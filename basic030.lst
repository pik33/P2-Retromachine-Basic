00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic030.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 30
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_cload = 184
00000                 | 	token_blit = 185
00000                 | 	token_playsample = 186
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 38 D9 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 3F 7F 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 3E 7D 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 3F 7D 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 7E 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 7C 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 3E 7D 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 3F 7F 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 80 B9 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed B4 B6 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 88 A7 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 94 A9 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 EC A4 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 EC 11 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 D4 B0 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 60 43 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 60 14 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 10 6B 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa C8 68 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb A0 7A 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc A8 4B 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1C 4A 05 F6 | 	mov	COUNT_, #28
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 1E 06 F6 | 	mov	local01, #0
00810     00 20 06 F6 | 	mov	local02, #0
00814     00 22 06 F6 | 	mov	local03, #0
00818     00 24 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     78 E9 B1 FD | 	call	#_hg010b_spin2_waitvbl
00824     AC FA B1 FD | 	call	#_usbnew_spin2_get_key
00828     FD 26 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
00840     51 00 00 FF 
00844     DC E5 05 F1 | 	add	objptr, ##41948
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     51 00 00 FF 
00850     DC E5 85 F1 | 	sub	objptr, ##41948
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 26 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 26 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     10 E5 05 F1 | 	add	objptr, ##41232
0086c     F2 28 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     10 E5 85 F1 | 	sub	objptr, ##41232
00878     01 28 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
00888     56 00 00 FF 
0088c     44 2A 06 F6 | 	mov	local07, ##44100
00890     0C 2C C6 F9 | 	decod	local08, #12
00894     00 2E 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 30 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
008d0     A4 FD B1 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     F8 04 B2 FD | 	call	#__system___waitms
008e4     07 28 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     F0 FE B1 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 26 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 26 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     13 29 02 C6 |  if_b	mov	local06, local05
00914     14 29 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 28 16 C2 |  if_b	cmp	local06, #224 wc
0091c     13 23 02 C6 |  if_b	mov	local03, local05
00920     01 1E 06 C6 |  if_b	mov	local01, #1
00924     11 25 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 26 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 20 06 36 |  if_ae	mov	local02, #0
00934     00 1E 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 26 0E F2 | 	cmp	local05, #0 wz
0093c     01 1E 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 20 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 26 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 20 0E C2 |  if_b	cmp	local02, #25 wz
00950     11 25 02 86 |  if_c_and_z	mov	local04, local03
00954     15 20 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 24 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     10 E5 05 F1 | 	add	objptr, ##41232
00968     F2 28 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     10 E5 85 F1 | 	sub	objptr, ##41232
00974     01 28 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     51 00 00 FF 
00980     B4 E5 05 F1 | 	add	objptr, ##41908
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 2A 06 F6 | 	mov	local07, ##44100
00990     0C 2C C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 2E 02 FB | 	rdlong	local09, objptr
0099c     01 30 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     17 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     E4 E4 85 F1 | 	sub	objptr, ##36068
009c0     B4 FC B1 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     12 13 02 F6 | 	mov	arg01, local04
009d0     C0 CE B1 FD | 	call	#_scantochar
009d4     FD 32 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     51 00 00 FF 
009dc     DC E5 05 F1 | 	add	objptr, ##41948
009e0     F2 34 02 FB | 	rdlong	local12, objptr
009e4     51 00 00 FF 
009e8     DC E5 85 F1 | 	sub	objptr, ##41948
009ec     1A 29 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 32 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 32 16 F2 | 	cmp	local11, #123 wc
00a00     20 32 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 32 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 32 16 F2 | 	cmp	local11, #91 wc
00a14     20 32 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 32 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 32 16 F2 | 	cmp	local11, #32 wc
00a28     09 32 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 32 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 32 16 F2 | 	cmp	local11, #23 wc
00a3c     27 32 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 32 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 32 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 28 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 28 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     51 00 00 FF 
00a64     D8 E5 05 F1 | 	add	objptr, ##41944
00a68     F2 28 0A FB | 	rdlong	local06, objptr wz
00a6c     51 00 00 FF 
00a70     D8 E5 85 F1 | 	sub	objptr, ##41944
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 2A C2 FA | 	rdbyte	local07, objptr
00a80     15 2D E2 F8 | 	getbyte	local08, local07, #0
00a84     80 2C 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 36 02 FB | 	rdlong	local13, objptr
00a90     1B 39 02 F6 | 	mov	local14, local13
00a94     16 39 02 F1 | 	add	local14, local08
00a98     7F 38 06 F1 | 	add	local14, #127
00a9c     15 2B E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 2A 06 FA | 	mul	local07, #128
00aa4     15 37 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 2E E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     17 3B 52 F6 | 	abs	local15, local09 wc
00ab8     01 3A 46 F0 | 	shr	local15, #1
00abc     1D 37 82 F3 | 	sumc	local13, local15
00ac0     01 36 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     1C 3D 02 F6 | 	mov	local16, local14
00ac8     01 3C 86 F1 | 	sub	local16, #1
00acc     1E 13 02 F6 | 	mov	arg01, local16
00ad0     B8 CC B1 FD | 	call	#_pspeek
00ad4     FD 3E 02 F6 | 	mov	local17, result1
00ad8     1F 41 E2 F8 | 	getbyte	local18, local17, #0
00adc     20 43 02 F6 | 	mov	local19, local18
00ae0     1C 13 02 F6 | 	mov	arg01, local14
00ae4     21 15 02 F6 | 	mov	arg02, local19
00ae8     58 CC B1 FD | 	call	#_pspoke
00aec     01 38 86 F1 | 	sub	local14, #1
00af0     1B 39 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     51 00 00 FF 
00afc     E4 E5 05 F1 | 	add	objptr, ##41956
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     51 00 00 FF 
00b08     A6 E5 85 F1 | 	sub	objptr, ##41894
00b0c     F2 2A C2 FA | 	rdbyte	local07, objptr
00b10     15 2D E2 F8 | 	getbyte	local08, local07, #0
00b14     80 2C 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 2E 02 FB | 	rdlong	local09, objptr
00b20     17 39 02 F6 | 	mov	local14, local09
00b24     16 39 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 3A E2 FA | 	rdword	local15, objptr
00b30     1D 31 32 F9 | 	getword	local10, local15, #0
00b34     18 45 52 F6 | 	abs	local20, local10 wc
00b38     01 44 46 F0 | 	shr	local20, #1
00b3c     22 45 82 F6 | 	negc	local20, local20
00b40     22 39 02 F1 | 	add	local14, local20
00b44     15 2B E2 F8 | 	getbyte	local07, local07, #0
00b48     80 2A 06 FA | 	mul	local07, #128
00b4c     17 2D 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     16 47 02 F6 | 	mov	local21, local08
00b58     15 47 02 F1 | 	add	local21, local07
00b5c     80 46 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     23 39 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 28 E2 FA | 	rdword	local06, objptr
00b70     51 00 00 FF 
00b74     A8 E5 05 F1 | 	add	objptr, ##41896
00b78     F2 2C 02 FB | 	rdlong	local08, objptr
00b7c     01 2C 66 F0 | 	shl	local08, #1
00b80     16 29 02 F1 | 	add	local06, local08
00b84     51 00 00 FF 
00b88     A6 E5 85 F1 | 	sub	objptr, ##41894
00b8c     F2 34 C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 34 06 FA | 	mul	local12, #16
00b98     04 34 06 F1 | 	add	local12, #4
00b9c     1C 13 02 F6 | 	mov	arg01, local14
00ba0     E8 CB B1 FD | 	call	#_pspeek
00ba4     FD 2A E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 2C 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 30 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     18 2F 02 F6 | 	mov	local09, local10
00bc0     14 13 02 F6 | 	mov	arg01, local06
00bc4     1A 15 02 F6 | 	mov	arg02, local12
00bc8     15 17 02 F6 | 	mov	arg03, local07
00bcc     16 19 02 F6 | 	mov	arg04, local08
00bd0     17 1B 02 F6 | 	mov	arg05, local09
00bd4     C0 E3 B1 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     51 00 00 FF 
00bdc     E4 E5 05 F1 | 	add	objptr, ##41956
00be0     F2 28 02 FB | 	rdlong	local06, objptr
00be4     01 28 06 F1 | 	add	local06, #1
00be8     F2 28 62 FC | 	wrlong	local06, objptr
00bec     51 00 00 FF 
00bf0     E4 E5 85 F1 | 	sub	objptr, ##41956
00bf4     01 38 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     19 13 02 F6 | 	mov	arg01, local11
00c00     DC E6 B1 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 32 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 32 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 28 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 28 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     10 E5 05 A1 |  if_e	add	objptr, ##41232
00c2c     F2 2C 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     10 E5 85 A1 |  if_e	sub	objptr, ##41232
00c38     16 2B 02 A6 |  if_e	mov	local07, local08
00c3c     01 2A 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
00c58     56 00 00 FF 
00c5c     44 2A 06 F6 | 	mov	local07, ##44100
00c60     0C 2C C6 F9 | 	decod	local08, #12
00c64     00 2E 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 30 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     E0 F9 B1 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     34 01 B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     30 FB B1 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 32 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     81 01 00 FF 
00ccc     9E 49 06 F6 | 	mov	local22, ##@LR__5037
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 38 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 38 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 3A C2 FA | 	rdbyte	local15, objptr
00cf4     80 3A 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     1D 13 02 F1 | 	add	arg01, local15
00d08     1C 13 02 F1 | 	add	arg01, local14
00d0c     7C CA B1 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     10 20 B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     24 13 02 F6 | 	mov	arg01, local22
00d20     20 FE B1 FD | 	call	#__system___string_concat
00d24     FD 48 02 F6 | 	mov	local22, result1
00d28     01 38 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     51 00 00 FF 
00d34     D8 E5 05 F1 | 	add	objptr, ##41944
00d38     F2 28 0A FB | 	rdlong	local06, objptr wz
00d3c     51 00 00 FF 
00d40     D8 E5 85 F1 | 	sub	objptr, ##41944
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 2A C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 2A 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     2C EB B1 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     5C ED B1 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     24 FB 01 F6 | 	mov	result1, local22
00d74     DC 06 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     12 33 E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d7c     2B 32 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 28 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 28 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     10 E5 05 F1 | 	add	objptr, ##41232
00da0     F2 2C 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     10 E5 85 F1 | 	sub	objptr, ##41232
00dac     16 2B 02 F6 | 	mov	local07, local08
00db0     01 2A 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
00dcc     56 00 00 FF 
00dd0     44 2A 06 F6 | 	mov	local07, ##44100
00dd4     0E 2C C6 F9 | 	decod	local08, #14
00dd8     00 2E 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 30 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     6C F8 B1 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     C0 FF B1 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     BC F9 B1 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 32 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 38 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 2E C2 FA | 	rdbyte	local09, objptr
00e48     17 2D E2 F8 | 	getbyte	local08, local09, #0
00e4c     16 31 02 F6 | 	mov	local10, local08
00e50     80 30 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 3A 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     1D 2B 02 F6 | 	mov	local07, local15
00e64     18 2B 02 F1 | 	add	local07, local10
00e68     1C 2B 02 F1 | 	add	local07, local14
00e6c     15 13 02 F6 | 	mov	arg01, local07
00e70     18 C9 B1 FD | 	call	#_pspeek
00e74     FD 28 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 28 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 38 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     1C 2B 02 F6 | 	mov	local07, local14
00e8c     01 2A 66 F0 | 	shl	local07, #1
00e90     15 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     9C E2 B1 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     90 E2 B1 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 38 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 28 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     14 39 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 34 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1A 29 02 F6 | 	mov	local06, local12
00ee4     14 39 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 2C 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     16 2B 02 F6 | 	mov	local07, local08
00f04     15 35 02 F6 | 	mov	local12, local07
00f08     01 34 66 F0 | 	shl	local12, #1
00f0c     1A 29 02 F6 | 	mov	local06, local12
00f10     14 13 02 F6 | 	mov	arg01, local06
00f14     20 E2 B1 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 32 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 2C 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     16 2B 02 F6 | 	mov	local07, local08
00f38     15 35 02 F6 | 	mov	local12, local07
00f3c     01 34 66 F0 | 	shl	local12, #1
00f40     1A 29 02 F6 | 	mov	local06, local12
00f44     14 13 02 F6 | 	mov	arg01, local06
00f48     EC E1 B1 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 32 0E F2 | 	cmp	local11, #75 wz
00f50     00 28 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     0C E2 B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 32 0E F2 | 	cmp	local11, #78 wz
00f60     24 28 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     FC E1 B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 32 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 2A C2 FA | 	rdbyte	local07, objptr
00f7c     15 2D E2 F8 | 	getbyte	local08, local07, #0
00f80     80 2C 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 4A 02 FB | 	rdlong	local23, objptr
00f8c     25 39 02 F6 | 	mov	local14, local23
00f90     16 39 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 30 E2 FA | 	rdword	local10, objptr
00f9c     18 45 52 F6 | 	abs	local20, local10 wc
00fa0     01 44 46 F0 | 	shr	local20, #1
00fa4     22 39 82 F3 | 	sumc	local14, local20
00fa8     15 2B E2 F8 | 	getbyte	local07, local07, #0
00fac     80 2A 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     15 4B 02 F1 | 	add	local23, local07
00fb8     80 4A 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     25 39 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     1C 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     BC C7 B1 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     1C 13 02 F6 | 	mov	arg01, local14
00fd8     68 C7 B1 FD | 	call	#_pspoke
00fdc     01 38 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 2E C2 FA | 	rdbyte	local09, objptr
00fec     80 2E 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     17 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     38 C7 B1 FD | 	call	#_pspoke
0100c     51 00 00 FF 
01010     E4 E5 05 F1 | 	add	objptr, ##41956
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     51 00 00 FF 
0101c     A6 E5 85 F1 | 	sub	objptr, ##41894
01020     F2 34 C2 FA | 	rdbyte	local12, objptr
01024     1A 2D E2 F8 | 	getbyte	local08, local12, #0
01028     80 2C 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 2E 02 FB | 	rdlong	local09, objptr
01034     17 39 02 F6 | 	mov	local14, local09
01038     16 39 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 3A E2 FA | 	rdword	local15, objptr
01044     1D 31 32 F9 | 	getword	local10, local15, #0
01048     18 45 52 F6 | 	abs	local20, local10 wc
0104c     01 44 46 F0 | 	shr	local20, #1
01050     22 45 82 F6 | 	negc	local20, local20
01054     22 39 02 F1 | 	add	local14, local20
01058     1A 29 E2 F8 | 	getbyte	local06, local12, #0
0105c     14 2B 02 F6 | 	mov	local07, local06
01060     80 2A 06 FA | 	mul	local07, #128
01064     17 2D 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     16 4D 02 F6 | 	mov	local24, local08
01070     15 4D 02 F1 | 	add	local24, local07
01074     80 4C 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     26 39 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 28 E2 FA | 	rdword	local06, objptr
01088     51 00 00 FF 
0108c     A8 E5 05 F1 | 	add	objptr, ##41896
01090     F2 2C 02 FB | 	rdlong	local08, objptr
01094     01 2C 66 F0 | 	shl	local08, #1
01098     16 29 02 F1 | 	add	local06, local08
0109c     51 00 00 FF 
010a0     A6 E5 85 F1 | 	sub	objptr, ##41894
010a4     F2 34 C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 34 06 FA | 	mul	local12, #16
010b0     04 34 06 F1 | 	add	local12, #4
010b4     1C 13 02 F6 | 	mov	arg01, local14
010b8     D0 C6 B1 FD | 	call	#_pspeek
010bc     FD 2A E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 2C 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 30 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     18 2F 02 F6 | 	mov	local09, local10
010d8     14 13 02 F6 | 	mov	arg01, local06
010dc     1A 15 02 F6 | 	mov	arg02, local12
010e0     15 17 02 F6 | 	mov	arg03, local07
010e4     16 19 02 F6 | 	mov	arg04, local08
010e8     17 1B 02 F6 | 	mov	arg05, local09
010ec     A8 DE B1 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     51 00 00 FF 
010f4     E4 E5 05 F1 | 	add	objptr, ##41956
010f8     F2 28 02 FB | 	rdlong	local06, objptr
010fc     01 28 06 F1 | 	add	local06, #1
01100     F2 28 62 FC | 	wrlong	local06, objptr
01104     51 00 00 FF 
01108     E4 E5 85 F1 | 	sub	objptr, ##41956
0110c     1C 29 02 F6 | 	mov	local06, local14
01110     1C 35 02 F6 | 	mov	local12, local14
01114     01 34 06 F1 | 	add	local12, #1
01118     1A 39 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 32 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 34 E2 FA | 	rdword	local12, objptr
01130     1A 29 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 2E 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     17 2D 02 F6 | 	mov	local08, local09
0114c     16 2B 02 F6 | 	mov	local07, local08
01150     01 2A 66 F0 | 	shl	local07, #1
01154     15 29 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     84 DF B1 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 2A C2 FA | 	rdbyte	local07, objptr
01180     15 2D E2 F8 | 	getbyte	local08, local07, #0
01184     80 2C 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 4E 02 FB | 	rdlong	local25, objptr
01190     27 39 02 F6 | 	mov	local14, local25
01194     16 39 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 30 E2 FA | 	rdword	local10, objptr
011a0     18 45 52 F6 | 	abs	local20, local10 wc
011a4     01 44 46 F0 | 	shr	local20, #1
011a8     22 39 82 F3 | 	sumc	local14, local20
011ac     15 2B E2 F8 | 	getbyte	local07, local07, #0
011b0     80 2A 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     15 4F 02 F1 | 	add	local25, local07
011bc     80 4E 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     27 39 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     1C 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     B8 C5 B1 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     1C 13 02 F6 | 	mov	arg01, local14
011dc     64 C5 B1 FD | 	call	#_pspoke
011e0     01 38 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 2E C2 FA | 	rdbyte	local09, objptr
011f0     80 2E 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     17 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     34 C5 B1 FD | 	call	#_pspoke
01210     51 00 00 FF 
01214     E4 E5 05 F1 | 	add	objptr, ##41956
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     51 00 00 FF 
01220     A6 E5 85 F1 | 	sub	objptr, ##41894
01224     F2 34 C2 FA | 	rdbyte	local12, objptr
01228     1A 2D E2 F8 | 	getbyte	local08, local12, #0
0122c     80 2C 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 2E 02 FB | 	rdlong	local09, objptr
01238     17 39 02 F6 | 	mov	local14, local09
0123c     16 39 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 3A E2 FA | 	rdword	local15, objptr
01248     1D 31 32 F9 | 	getword	local10, local15, #0
0124c     18 45 52 F6 | 	abs	local20, local10 wc
01250     01 44 46 F0 | 	shr	local20, #1
01254     22 45 82 F6 | 	negc	local20, local20
01258     22 39 02 F1 | 	add	local14, local20
0125c     1A 29 E2 F8 | 	getbyte	local06, local12, #0
01260     14 2B 02 F6 | 	mov	local07, local06
01264     80 2A 06 FA | 	mul	local07, #128
01268     17 2D 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     16 51 02 F6 | 	mov	local26, local08
01274     15 51 02 F1 | 	add	local26, local07
01278     80 50 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     28 39 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 28 E2 FA | 	rdword	local06, objptr
0128c     51 00 00 FF 
01290     A8 E5 05 F1 | 	add	objptr, ##41896
01294     F2 2C 02 FB | 	rdlong	local08, objptr
01298     01 2C 66 F0 | 	shl	local08, #1
0129c     16 29 02 F1 | 	add	local06, local08
012a0     51 00 00 FF 
012a4     A6 E5 85 F1 | 	sub	objptr, ##41894
012a8     F2 34 C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 34 06 FA | 	mul	local12, #16
012b4     04 34 06 F1 | 	add	local12, #4
012b8     1C 13 02 F6 | 	mov	arg01, local14
012bc     CC C4 B1 FD | 	call	#_pspeek
012c0     FD 2A E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 2C 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 30 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     18 2F 02 F6 | 	mov	local09, local10
012dc     14 13 02 F6 | 	mov	arg01, local06
012e0     1A 15 02 F6 | 	mov	arg02, local12
012e4     15 17 02 F6 | 	mov	arg03, local07
012e8     16 19 02 F6 | 	mov	arg04, local08
012ec     17 1B 02 F6 | 	mov	arg05, local09
012f0     A4 DC B1 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     51 00 00 FF 
012f8     E4 E5 05 F1 | 	add	objptr, ##41956
012fc     F2 28 02 FB | 	rdlong	local06, objptr
01300     01 28 06 F1 | 	add	local06, #1
01304     F2 28 62 FC | 	wrlong	local06, objptr
01308     51 00 00 FF 
0130c     E4 E5 85 F1 | 	sub	objptr, ##41956
01310     1C 29 02 F6 | 	mov	local06, local14
01314     1C 35 02 F6 | 	mov	local12, local14
01318     01 34 06 F1 | 	add	local12, #1
0131c     1A 39 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     81 01 00 FF 
01328     9F 49 06 F6 | 	mov	local22, ##@LR__5038
0132c     04 28 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 32 0E F2 | 	cmp	local11, #82 wz
01340     20 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 34 C2 FA | 	rdbyte	local12, objptr
0134c     3E E4 85 F1 | 	sub	objptr, #62
01350     1A 53 02 F6 | 	mov	local27, local12
01354     01 52 86 F1 | 	sub	local27, #1
01358     29 29 02 F6 | 	mov	local06, local27
0135c     14 13 02 F6 | 	mov	arg01, local06
01360     04 DE B1 FD | 	call	#_hg010b_spin2_setcursory
01364                 | LR__0042
01364                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
01364     51 32 0E F2 | 	cmp	local11, #81 wz
01368     24 00 90 5D |  if_ne	jmp	#LR__0043
0136c                 | ' return cursor_y
0136c     3E E4 05 F1 | 	add	objptr, #62
01370     F2 34 C2 FA | 	rdbyte	local12, objptr
01374     3E E4 85 F1 | 	sub	objptr, #62
01378     1A 53 02 F6 | 	mov	local27, local12
0137c     01 52 06 F1 | 	add	local27, #1
01380     24 52 36 F3 | 	fle	local27, #36 wc
01384     29 29 02 F6 | 	mov	local06, local27
01388     14 13 02 F6 | 	mov	arg01, local06
0138c     D8 DD B1 FD | 	call	#_hg010b_spin2_setcursory
01390                 | LR__0043
01390                 | '   if key4=80 then
01390     50 32 0E F2 | 	cmp	local11, #80 wz
01394     44 00 90 5D |  if_ne	jmp	#LR__0044
01398                 | ' return cursor_x
01398     3C E4 05 F1 | 	add	objptr, #60
0139c     F2 54 E2 FA | 	rdword	local28, objptr
013a0     02 54 86 F1 | 	sub	local28, #2
013a4                 | '     cx=v.getcursorx()-2 					' arrow left
013a4                 | '     if cx<editor_spaces then cx=editor_spaces			
013a4     36 00 00 FF 
013a8     F8 E5 05 F1 | 	add	objptr, ##28152
013ac     F2 34 02 FB | 	rdlong	local12, objptr
013b0     37 00 00 FF 
013b4     34 E4 85 F1 | 	sub	objptr, ##28212
013b8     1A 55 52 F2 | 	cmps	local28, local12 wc
013bc     37 00 00 CF 
013c0     34 E4 05 C1 |  if_b	add	objptr, ##28212
013c4     F2 54 02 CB |  if_b	rdlong	local28, objptr
013c8     37 00 00 CF 
013cc     34 E4 85 C1 |  if_b	sub	objptr, ##28212
013d0     2A 29 02 F6 | 	mov	local06, local28
013d4     14 13 02 F6 | 	mov	arg01, local06
013d8     5C DD B1 FD | 	call	#_hg010b_spin2_setcursorx
013dc                 | LR__0044
013dc                 | '   if key4=79 then						' arrow right
013dc     4F 32 0E F2 | 	cmp	local11, #79 wz
013e0     20 00 90 5D |  if_ne	jmp	#LR__0045
013e4                 | ' return cursor_x
013e4     3C E4 05 F1 | 	add	objptr, #60
013e8     F2 54 E2 FA | 	rdword	local28, objptr
013ec     3C E4 85 F1 | 	sub	objptr, #60
013f0     02 54 06 F1 | 	add	local28, #2
013f4                 | '     cx=v.getcursorx()+2 
013f4                 | '     if cx>254  then cx=254 
013f4     FE 54 36 F3 | 	fle	local28, #254 wc
013f8     2A 29 02 F6 | 	mov	local06, local28
013fc     14 13 02 F6 | 	mov	arg01, local06
01400     34 DD B1 FD | 	call	#_hg010b_spin2_setcursorx
01404                 | LR__0045
01404                 | ' 
01404                 | '   if key4=73 then 						' ins
01404     49 32 0E F2 | 	cmp	local11, #73 wz
01408     40 00 90 5D |  if_ne	jmp	#LR__0048
0140c     51 00 00 FF 
01410     D8 E5 05 F1 | 	add	objptr, ##41944
01414     F2 28 02 FB | 	rdlong	local06, objptr
01418     14 35 22 F6 | 	not	local12, local06
0141c     F2 34 62 FC | 	wrlong	local12, objptr
01420                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
01420     51 00 00 FF 
01424     D8 E5 85 F1 | 	sub	objptr, ##41944
01428     00 34 0E F2 | 	cmp	local12, #0 wz
0142c     10 00 90 AD |  if_e	jmp	#LR__0046
01430     0E 28 06 F6 | 	mov	local06, #14
01434     0E 12 06 F6 | 	mov	arg01, #14
01438     80 CB B1 FD | 	call	#_hg010b_spin2_setcursorshape
0143c     0C 00 90 FD | 	jmp	#LR__0047
01440                 | LR__0046
01440     00 28 06 F6 | 	mov	local06, #0
01444     00 12 06 F6 | 	mov	arg01, #0
01448     70 CB B1 FD | 	call	#_hg010b_spin2_setcursorshape
0144c                 | LR__0047
0144c                 | LR__0048
0144c     00 24 06 F6 | 	mov	local04, #0
01450     C8 F3 9F FD | 	jmp	#LR__0001
01454                 | LR__0049
01454     A7 F0 03 F6 | 	mov	ptra, fp
01458     B2 00 A0 FD | 	call	#popregs_
0145c                 | _edit_ret
0145c     2D 00 64 FD | 	ret
01460                 | 
01460                 | ' 
01460                 | ' ''-----------------------------------------------------------------------------------------------------------
01460                 | ' ' 					A housekeepeer.
01460                 | ' ' A deedicated cog that is intended to do things in the background, for example tracking GUI elements
01460                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01460                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01460                 | ' ''-----------------------------------------------------------------------------------------------------------
01460                 | ' 
01460                 | ' sub housekeeper
01460                 | _housekeeper
01460                 | ' 
01460                 | ' do
01460                 | LR__0050
01460                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01460     49 E4 05 F1 | 	add	objptr, #73
01464                 | LR__0051
01464     F2 12 02 FB | 	rdlong	arg01, objptr
01468     01 12 0E F2 | 	cmp	arg01, #1 wz
0146c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01470     51 00 00 FF 
01474     5B E5 05 F1 | 	add	objptr, ##41819
01478     F2 12 02 FB | 	rdlong	arg01, objptr
0147c     01 12 06 F1 | 	add	arg01, #1
01480     F2 12 62 FC | 	wrlong	arg01, objptr
01484     51 00 00 FF 
01488     A4 E5 85 F1 | 	sub	objptr, ##41892
0148c     80 00 B0 FD | 	call	#_gethdi
01490     05 12 06 F6 | 	mov	arg01, #5
01494     44 F9 B1 FD | 	call	#__system___waitms
01498     51 00 00 FF 
0149c     A4 E5 05 F1 | 	add	objptr, ##41892
014a0     F2 12 02 FB | 	rdlong	arg01, objptr
014a4     01 12 06 F1 | 	add	arg01, #1
014a8     F2 12 62 FC | 	wrlong	arg01, objptr
014ac     51 00 00 FF 
014b0     A4 E5 85 F1 | 	sub	objptr, ##41892
014b4     58 00 B0 FD | 	call	#_gethdi
014b8     05 12 06 F6 | 	mov	arg01, #5
014bc     1C F9 B1 FD | 	call	#__system___waitms
014c0     51 00 00 FF 
014c4     A4 E5 05 F1 | 	add	objptr, ##41892
014c8     F2 12 02 FB | 	rdlong	arg01, objptr
014cc     01 12 06 F1 | 	add	arg01, #1
014d0     F2 12 62 FC | 	wrlong	arg01, objptr
014d4     51 00 00 FF 
014d8     A4 E5 85 F1 | 	sub	objptr, ##41892
014dc     30 00 B0 FD | 	call	#_gethdi
014e0     05 12 06 F6 | 	mov	arg01, #5
014e4     F4 F8 B1 FD | 	call	#__system___waitms
014e8     51 00 00 FF 
014ec     A4 E5 05 F1 | 	add	objptr, ##41892
014f0     F2 12 02 FB | 	rdlong	arg01, objptr
014f4     01 12 06 F1 | 	add	arg01, #1
014f8     F2 12 62 FC | 	wrlong	arg01, objptr
014fc     51 00 00 FF 
01500     A4 E5 85 F1 | 	sub	objptr, ##41892
01504     08 00 B0 FD | 	call	#_gethdi
01508     54 FF 9F FD | 	jmp	#LR__0050
0150c                 | _housekeeper_ret
0150c     2D 00 64 FD | 	ret
01510                 | 
01510                 | ' 
01510                 | ' '----------------------------------------------------------------------------------------------------------
01510                 | ' ' gethdi is called from the houseekeeper to read HDI related values
01510                 | ' '----------------------------------------------------------------------------------------------------------
01510                 | ' 
01510                 | ' sub gethdi
01510                 | _gethdi
01510     03 4A 05 F6 | 	mov	COUNT_, #3
01514     A8 00 A0 FD | 	call	#pushregs_
01518                 | '   x := mouse_xacc
01518     14 00 00 FF 
0151c     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
01520     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
01524                 | '   y := mouse_yacc
01524     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01528     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
0152c     51 00 00 FF 
01530     1C E5 05 F1 | 	add	objptr, ##41756
01534     F2 14 62 FC | 	wrlong	arg02, objptr
01538     04 E4 05 F1 | 	add	objptr, #4
0153c     F2 12 62 FC | 	wrlong	arg01, objptr
01540                 | '   x := 0
01540                 | '   y := mouse_zacc
01540     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01544     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01548     08 E4 05 F1 | 	add	objptr, #8
0154c     F2 FA 61 FC | 	wrlong	result1, objptr
01550                 | '   return mouse_bstate&7
01550     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01554     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01558     14 00 00 FF 
0155c     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
01560     07 FA 05 F5 | 	and	result1, #7
01564     04 E4 85 F1 | 	sub	objptr, #4
01568     F2 FA 61 FC | 	wrlong	result1, objptr
0156c     51 00 00 FF 
01570     24 E5 85 F1 | 	sub	objptr, ##41764
01574     00 1E 06 F6 | 	mov	local01, #0
01578                 | ' 
01578                 | ' mousex,mousey=kbm.mouse_xy()
01578                 | ' dummy,mousew=kbm.mouse_scroll()
01578                 | ' mousek=kbm.mouse_buttons()
01578                 | ' i=0:
01578                 | ' for j=0 to 6
01578     00 20 06 F6 | 	mov	local02, #0
0157c                 | LR__0060
0157c                 | '   if kbm.hidpad_id(j)>0 then
0157c     10 13 02 F6 | 	mov	arg01, local02
01580     4C EE B1 FD | 	call	#_usbnew_spin2_hidpad_id
01584     01 FA 55 F2 | 	cmps	result1, #1 wc
01588     8C 00 90 CD |  if_b	jmp	#LR__0061
0158c     10 13 02 F6 | 	mov	arg01, local02
01590     00 14 06 F6 | 	mov	arg02, #0
01594     9C EE B1 FD | 	call	#_usbnew_spin2_hidpad_axis
01598     FD 22 02 F6 | 	mov	local03, result1
0159c     10 13 02 F6 | 	mov	arg01, local02
015a0     01 14 06 F6 | 	mov	arg02, #1
015a4     8C EE B1 FD | 	call	#_usbnew_spin2_hidpad_axis
015a8     60 00 00 FF 
015ac     00 22 06 F1 | 	add	local03, ##49152
015b0     0F 22 46 F0 | 	shr	local03, #15
015b4     01 14 06 F6 | 	mov	arg02, #1
015b8     11 15 02 F1 | 	add	arg02, local03
015bc     60 00 00 FF 
015c0     00 FA 05 F1 | 	add	result1, ##49152
015c4     0F FA 45 F0 | 	shr	result1, #15
015c8     01 12 06 F6 | 	mov	arg01, #1
015cc     FD 12 02 F1 | 	add	arg01, result1
015d0     0F 23 02 F6 | 	mov	local03, local01
015d4     02 22 66 F0 | 	shl	local03, #2
015d8     51 00 00 FF 
015dc     2C E5 05 F1 | 	add	objptr, ##41772
015e0     F2 22 02 F1 | 	add	local03, objptr
015e4     02 12 66 F0 | 	shl	arg01, #2
015e8     09 15 02 F1 | 	add	arg02, arg01
015ec     11 15 62 FC | 	wrlong	arg02, local03
015f0     0F 23 02 F6 | 	mov	local03, local01
015f4     02 22 66 F0 | 	shl	local03, #2
015f8     1C E4 05 F1 | 	add	objptr, #28
015fc     F2 22 02 F1 | 	add	local03, objptr
01600     10 13 02 F6 | 	mov	arg01, local02
01604     51 00 00 FF 
01608     48 E5 85 F1 | 	sub	objptr, ##41800
0160c     F0 ED B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
01610     11 FB 61 FC | 	wrlong	result1, local03
01614     01 1E 06 F1 | 	add	local01, #1
01618                 | LR__0061
01618     01 20 06 F1 | 	add	local02, #1
0161c     07 20 16 F2 | 	cmp	local02, #7 wc
01620     58 FF 9F CD |  if_b	jmp	#LR__0060
01624     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
01628                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
01628                 | LR__0062
01628     07 1E 16 F2 | 	cmp	local01, #7 wc
0162c     3C 00 90 3D |  if_ae	jmp	#LR__0064
01630     0F 23 02 F6 | 	mov	local03, local01
01634     02 22 66 F0 | 	shl	local03, #2
01638     51 00 00 FF 
0163c     2C E5 05 F1 | 	add	objptr, ##41772
01640     F2 22 02 F1 | 	add	local03, objptr
01644     11 01 68 FC | 	wrlong	#0, local03
01648     0F 23 02 F6 | 	mov	local03, local01
0164c     02 22 66 F0 | 	shl	local03, #2
01650     1C E4 05 F1 | 	add	objptr, #28
01654     F2 22 02 F1 | 	add	local03, objptr
01658     11 01 68 FC | 	wrlong	#0, local03
0165c     01 1E 06 F1 | 	add	local01, #1
01660     51 00 00 FF 
01664     48 E5 85 F1 | 	sub	objptr, ##41800
01668     BC FF 9F FD | 	jmp	#LR__0062
0166c                 | LR__0063
0166c                 | LR__0064
0166c     A7 F0 03 F6 | 	mov	ptra, fp
01670     B2 00 A0 FD | 	call	#popregs_
01674                 | _gethdi_ret
01674     2D 00 64 FD | 	ret
01678                 | 
01678                 | ' 
01678                 | ' '-------------------------------------------------------------------------------------------------------------
01678                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01678                 | ' '-------------------------------------------------------------------------------------------------------------
01678                 | ' 
01678                 | ' '-------------------------------------------------------------------------------------------------------------
01678                 | ' '
01678                 | ' '                                     LINE INTERPRETER/TOKENIZER
01678                 | ' '
01678                 | ' '-------------------------------------------------------------------------------------------------------------
01678                 | ' 
01678                 | ' 
01678                 | ' sub interpret
01678                 | _interpret
01678     2F 4A 05 F6 | 	mov	COUNT_, #47
0167c     A8 00 A0 FD | 	call	#pushregs_
01680     01 00 00 FF 
01684     7C F0 07 F1 | 	add	ptra, ##636
01688     37 00 00 FF 
0168c     1C E4 05 F1 | 	add	objptr, ##28188
01690     F2 12 02 FB | 	rdlong	arg01, objptr
01694     37 00 00 FF 
01698     1C E4 85 F1 | 	sub	objptr, ##28188
0169c     54 19 B2 FD | 	call	#__system__RTrim_S
016a0     FD 12 02 F6 | 	mov	arg01, result1
016a4     8C 18 B2 FD | 	call	#__system__LTrim_S
016a8     37 00 00 FF 
016ac     20 E4 05 F1 | 	add	objptr, ##28192
016b0     F2 FA 61 FC | 	wrlong	result1, objptr
016b4     04 E4 05 F1 | 	add	objptr, #4
016b8     FF FF FF FF 
016bc     F2 FE 6B FC | 	wrlong	##-1, objptr
016c0     1A 00 00 FF 
016c4     9C E5 05 F1 | 	add	objptr, ##13724
016c8     F2 00 68 FC | 	wrlong	#0, objptr
016cc     07 00 00 FF 
016d0     44 E5 85 F1 | 	sub	objptr, ##3908
016d4     F2 00 68 FC | 	wrlong	#0, objptr
016d8     4A 00 00 FF 
016dc     7C E4 85 F1 | 	sub	objptr, ##38012
016e0     00 1E 06 F6 | 	mov	local01, #0
016e4                 | LR__0070
016e4                 | ' 
016e4                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
016e4                 | ' 
016e4                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
016e4                 | ' 
016e4                 | ' 108 
016e4                 | ' for i=0 to 125: separators(i)=0 :next i
016e4     00 20 06 F6 | 	mov	local02, #0
016e8     38 4E 05 F1 | 	add	fp, #56
016ec     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
016f0                 | LR__0071
016f0     10 23 02 F6 | 	mov	local03, local02
016f4     02 22 66 F0 | 	shl	local03, #2
016f8     A7 22 02 F1 | 	add	local03, fp
016fc     11 01 68 FC | 	wrlong	#0, local03
01700     01 20 06 F1 | 	add	local02, #1
01704     7E 20 56 F2 | 	cmps	local02, #126 wc
01708     E4 FF 9F CD |  if_b	jmp	#LR__0071
0170c                 | LR__0072
0170c     38 4E 85 F1 | 	sub	fp, #56
01710                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
01710     00 20 06 F6 | 	mov	local02, #0
01714     35 00 00 FF 
01718     0C E4 05 F1 | 	add	objptr, ##27148
0171c     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
01720                 | LR__0073
01720     10 25 02 F6 | 	mov	local04, local02
01724     03 24 66 F0 | 	shl	local04, #3
01728     F2 24 02 F1 | 	add	local04, objptr
0172c     81 01 00 FF 
01730     A0 17 06 F6 | 	mov	arg03, ##@LR__5039
01734     12 17 62 FC | 	wrlong	arg03, local04
01738     10 25 02 F6 | 	mov	local04, local02
0173c     03 24 66 F0 | 	shl	local04, #3
01740     F2 26 02 F6 | 	mov	local05, objptr
01744     F2 24 02 F1 | 	add	local04, objptr
01748     00 28 06 F6 | 	mov	local06, #0
0174c     04 24 06 F1 | 	add	local04, #4
01750     12 01 68 FC | 	wrlong	#0, local04
01754     01 20 06 F1 | 	add	local02, #1
01758     7E 20 56 F2 | 	cmps	local02, #126 wc
0175c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01760                 | LR__0074
01760     02 00 00 FF 
01764     10 E4 05 F1 | 	add	objptr, ##1040
01768     F2 12 02 FB | 	rdlong	arg01, objptr
0176c     37 00 00 FF 
01770     1C E4 85 F1 | 	sub	objptr, ##28188
01774     7C 18 B2 FD | 	call	#__system__RTrim_S
01778     FD 12 02 F6 | 	mov	arg01, result1
0177c     B4 17 B2 FD | 	call	#__system__LTrim_S
01780     37 00 00 FF 
01784     1C E4 05 F1 | 	add	objptr, ##28188
01788     F2 FA 61 FC | 	wrlong	result1, objptr
0178c     81 01 00 FF 
01790     A1 25 06 F6 | 	mov	local04, ##@LR__5040
01794     1A 00 00 FF 
01798     D0 E5 05 F1 | 	add	objptr, ##13776
0179c     F2 24 62 FC | 	wrlong	local04, objptr
017a0     1A 00 00 FF 
017a4     D0 E5 85 F1 | 	sub	objptr, ##13776
017a8     F2 12 02 FB | 	rdlong	arg01, objptr
017ac     37 00 00 FF 
017b0     1C E4 85 F1 | 	sub	objptr, ##28188
017b4     09 2B 02 F6 | 	mov	local07, arg01
017b8     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
017bc                 | LR__0075
017bc     15 FB C9 FA | 	rdbyte	result1, local07 wz
017c0     01 2A 06 51 |  if_ne	add	local07, #1
017c4     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
017c8                 | LR__0076
017c8     09 2B 8A F1 | 	sub	local07, arg01 wz
017cc     51 00 00 FF 
017d0     F0 E5 05 F1 | 	add	objptr, ##41968
017d4     F2 2A 62 FC | 	wrlong	local07, objptr
017d8                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
017d8     51 00 00 FF 
017dc     F0 E5 85 F1 | 	sub	objptr, ##41968
017e0     38 24 90 AD |  if_e	jmp	#LR__0196
017e4     00 2C 06 F6 | 	mov	local08, #0
017e8                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
017e8                 | ' for i=1 to len(line$)
017e8     01 20 06 F6 | 	mov	local02, #1
017ec     37 00 00 FF 
017f0     1C E4 05 F1 | 	add	objptr, ##28188
017f4     F2 12 02 FB | 	rdlong	arg01, objptr
017f8     37 00 00 FF 
017fc     1C E4 85 F1 | 	sub	objptr, ##28188
01800     09 2B 02 F6 | 	mov	local07, arg01
01804     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
01808                 | LR__0077
01808     15 FB C9 FA | 	rdbyte	result1, local07 wz
0180c     01 2A 06 51 |  if_ne	add	local07, #1
01810     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
01814                 | LR__0078
01814     09 2B 82 F1 | 	sub	local07, arg01
01818     15 2F 02 F6 | 	mov	local09, local07
0181c     01 2E 06 F1 | 	add	local09, #1
01820                 | LR__0079
01820     17 21 52 F2 | 	cmps	local02, local09 wc
01824     AC 00 90 3D |  if_ae	jmp	#LR__0081
01828                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
01828     37 00 00 FF 
0182c     1C E4 05 F1 | 	add	objptr, ##28188
01830     F2 12 02 FB | 	rdlong	arg01, objptr
01834     37 00 00 FF 
01838     1C E4 85 F1 | 	sub	objptr, ##28188
0183c     10 15 02 F6 | 	mov	arg02, local02
01840     01 16 06 F6 | 	mov	arg03, #1
01844     34 14 B2 FD | 	call	#__system__Mid_S
01848     FD 12 02 F6 | 	mov	arg01, result1
0184c     81 01 00 FF 
01850     A2 15 06 F6 | 	mov	arg02, ##@LR__5041
01854     B8 F2 B1 FD | 	call	#__system___string_cmp
01858     00 FA 0D F2 | 	cmp	result1, #0 wz
0185c     00 2C 0E A2 |  if_e	cmp	local08, #0 wz
01860     01 2C 06 A6 |  if_e	mov	local08, #1
01864     3C 00 90 AD |  if_e	jmp	#LR__0080
01868     37 00 00 FF 
0186c     1C E4 05 F1 | 	add	objptr, ##28188
01870     F2 12 02 FB | 	rdlong	arg01, objptr
01874     37 00 00 FF 
01878     1C E4 85 F1 | 	sub	objptr, ##28188
0187c     10 15 02 F6 | 	mov	arg02, local02
01880     01 16 06 F6 | 	mov	arg03, #1
01884     F4 13 B2 FD | 	call	#__system__Mid_S
01888     FD 12 02 F6 | 	mov	arg01, result1
0188c     81 01 00 FF 
01890     A4 15 06 F6 | 	mov	arg02, ##@LR__5042
01894     78 F2 B1 FD | 	call	#__system___string_cmp
01898     00 FA 0D F2 | 	cmp	result1, #0 wz
0189c     01 2C 0E A2 |  if_e	cmp	local08, #1 wz
018a0     00 2C 06 A6 |  if_e	mov	local08, #0
018a4                 | LR__0080
018a4     10 25 02 F6 | 	mov	local04, local02
018a8     03 24 66 F0 | 	shl	local04, #3
018ac     35 00 00 FF 
018b0     0C E4 05 F1 | 	add	objptr, ##27148
018b4     F2 26 02 F6 | 	mov	local05, objptr
018b8     F2 24 02 F1 | 	add	local04, objptr
018bc     04 24 06 F1 | 	add	local04, #4
018c0     12 2D 62 FC | 	wrlong	local08, local04
018c4     01 20 06 F1 | 	add	local02, #1
018c8     35 00 00 FF 
018cc     0C E4 85 F1 | 	sub	objptr, ##27148
018d0     4C FF 9F FD | 	jmp	#LR__0079
018d4                 | LR__0081
018d4     01 20 06 F6 | 	mov	local02, #1
018d8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
018d8                 | LR__0082
018d8     37 00 00 FF 
018dc     1C E4 05 F1 | 	add	objptr, ##28188
018e0     F2 12 02 FB | 	rdlong	arg01, objptr
018e4     37 00 00 FF 
018e8     1C E4 85 F1 | 	sub	objptr, ##28188
018ec     10 15 02 F6 | 	mov	arg02, local02
018f0     01 16 06 F6 | 	mov	arg03, #1
018f4     84 13 B2 FD | 	call	#__system__Mid_S
018f8     FD 12 02 F6 | 	mov	arg01, result1
018fc     81 01 00 FF 
01900     A6 31 06 F6 | 	mov	local10, ##@LR__5043
01904     18 15 02 F6 | 	mov	arg02, local10
01908     04 F2 B1 FD | 	call	#__system___string_cmp
0190c     00 FA 0D F2 | 	cmp	result1, #0 wz
01910     34 00 90 5D |  if_ne	jmp	#LR__0083
01914     10 27 02 F6 | 	mov	local05, local02
01918     03 26 66 F0 | 	shl	local05, #3
0191c     35 00 00 FF 
01920     0C E4 05 F1 | 	add	objptr, ##27148
01924     F2 28 02 F6 | 	mov	local06, objptr
01928     F2 26 02 F1 | 	add	local05, objptr
0192c     04 26 06 F1 | 	add	local05, #4
01930     13 33 02 FB | 	rdlong	local11, local05
01934     04 26 86 F1 | 	sub	local05, #4
01938     19 35 0A F6 | 	mov	local12, local11 wz
0193c     35 00 00 FF 
01940     0C E4 85 F1 | 	sub	objptr, ##27148
01944     24 00 90 AD |  if_e	jmp	#LR__0084
01948                 | LR__0083
01948     51 00 00 FF 
0194c     F0 E5 05 F1 | 	add	objptr, ##41968
01950     F2 36 02 FB | 	rdlong	local13, objptr
01954     51 00 00 FF 
01958     F0 E5 85 F1 | 	sub	objptr, ##41968
0195c     1B 39 02 F6 | 	mov	local14, local13
01960     1C 21 52 F2 | 	cmps	local02, local14 wc
01964     01 20 06 C1 |  if_b	add	local02, #1
01968     6C FF 9F CD |  if_b	jmp	#LR__0082
0196c                 | LR__0084
0196c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
0196c     51 00 00 FF 
01970     F0 E5 05 F1 | 	add	objptr, ##41968
01974     F2 24 02 FB | 	rdlong	local04, objptr
01978     51 00 00 FF 
0197c     F0 E5 85 F1 | 	sub	objptr, ##41968
01980     12 21 52 F2 | 	cmps	local02, local04 wc
01984     A8 00 90 3D |  if_ae	jmp	#LR__0087
01988     37 00 00 FF 
0198c     1C E4 05 F1 | 	add	objptr, ##28188
01990     F2 28 02 FB | 	rdlong	local06, objptr
01994     37 00 00 FF 
01998     1C E4 85 F1 | 	sub	objptr, ##28188
0199c     14 13 02 F6 | 	mov	arg01, local06
019a0     09 2B 02 F6 | 	mov	local07, arg01
019a4     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
019a8                 | LR__0085
019a8     15 FB C9 FA | 	rdbyte	result1, local07 wz
019ac     01 2A 06 51 |  if_ne	add	local07, #1
019b0     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
019b4                 | LR__0086
019b4     09 2B 82 F1 | 	sub	local07, arg01
019b8     15 27 02 F6 | 	mov	local05, local07
019bc     13 15 02 F6 | 	mov	arg02, local05
019c0     10 15 82 F1 | 	sub	arg02, local02
019c4     14 13 02 F6 | 	mov	arg01, local06
019c8     20 12 B2 FD | 	call	#__system__Right_S
019cc     FD 12 02 F6 | 	mov	arg01, result1
019d0     20 16 B2 FD | 	call	#__system__RTrim_S
019d4     FD 12 02 F6 | 	mov	arg01, result1
019d8     58 15 B2 FD | 	call	#__system__LTrim_S
019dc     51 00 00 FF 
019e0     F4 E5 05 F1 | 	add	objptr, ##41972
019e4     F2 FA 61 FC | 	wrlong	result1, objptr
019e8     1A 00 00 FF 
019ec     D8 E5 85 F1 | 	sub	objptr, ##13784
019f0     F2 12 02 FB | 	rdlong	arg01, objptr
019f4     37 00 00 FF 
019f8     1C E4 85 F1 | 	sub	objptr, ##28188
019fc     01 20 86 F1 | 	sub	local02, #1
01a00     10 15 02 F6 | 	mov	arg02, local02
01a04     5C 11 B2 FD | 	call	#__system__Left_S
01a08     FD 12 02 F6 | 	mov	arg01, result1
01a0c     E4 15 B2 FD | 	call	#__system__RTrim_S
01a10     FD 12 02 F6 | 	mov	arg01, result1
01a14     1C 15 B2 FD | 	call	#__system__LTrim_S
01a18     37 00 00 FF 
01a1c     1C E4 05 F1 | 	add	objptr, ##28188
01a20     F2 FA 61 FC | 	wrlong	result1, objptr
01a24     37 00 00 FF 
01a28     1C E4 85 F1 | 	sub	objptr, ##28188
01a2c     1C 00 90 FD | 	jmp	#LR__0088
01a30                 | LR__0087
01a30     81 01 00 FF 
01a34     A8 25 06 F6 | 	mov	local04, ##@LR__5044
01a38     51 00 00 FF 
01a3c     F4 E5 05 F1 | 	add	objptr, ##41972
01a40     F2 24 62 FC | 	wrlong	local04, objptr
01a44     51 00 00 FF 
01a48     F4 E5 85 F1 | 	sub	objptr, ##41972
01a4c                 | LR__0088
01a4c                 | ' 
01a4c                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01a4c     37 00 00 FF 
01a50     24 E4 05 F1 | 	add	objptr, ##28196
01a54     F2 24 02 FB | 	rdlong	local04, objptr
01a58     37 00 00 FF 
01a5c     24 E4 85 F1 | 	sub	objptr, ##28196
01a60     FF FF 7F FF 
01a64     FF 25 0E F2 | 	cmp	local04, ##-1 wz
01a68     40 00 90 5D |  if_ne	jmp	#LR__0089
01a6c     51 00 00 FF 
01a70     F4 E5 05 F1 | 	add	objptr, ##41972
01a74     F2 12 02 FB | 	rdlong	arg01, objptr
01a78     51 00 00 FF 
01a7c     F4 E5 85 F1 | 	sub	objptr, ##41972
01a80     81 01 00 FF 
01a84     A9 29 06 F6 | 	mov	local06, ##@LR__5045
01a88     14 15 02 F6 | 	mov	arg02, local06
01a8c     80 F0 B1 FD | 	call	#__system___string_cmp
01a90     00 FA 0D F2 | 	cmp	result1, #0 wz
01a94     37 00 00 5F 
01a98     24 E4 05 51 |  if_ne	add	objptr, ##28196
01a9c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01aa0     37 00 00 5F 
01aa4     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01aa8     08 01 90 5D |  if_ne	jmp	#LR__0093
01aac                 | LR__0089
01aac                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01aac     37 00 00 FF 
01ab0     24 E4 05 F1 | 	add	objptr, ##28196
01ab4     F2 24 02 FB | 	rdlong	local04, objptr
01ab8     37 00 00 FF 
01abc     24 E4 85 F1 | 	sub	objptr, ##28196
01ac0     FF FF 7F FF 
01ac4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
01ac8     3C 00 90 5D |  if_ne	jmp	#LR__0090
01acc     51 00 00 FF 
01ad0     F4 E5 05 F1 | 	add	objptr, ##41972
01ad4     F2 12 02 FB | 	rdlong	arg01, objptr
01ad8     51 00 00 FF 
01adc     F4 E5 85 F1 | 	sub	objptr, ##41972
01ae0     81 01 00 FF 
01ae4     AA 15 06 F6 | 	mov	arg02, ##@LR__5046
01ae8     24 F0 B1 FD | 	call	#__system___string_cmp
01aec     00 FA 0D F2 | 	cmp	result1, #0 wz
01af0     37 00 00 AF 
01af4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01af8     F2 06 68 AC |  if_e	wrlong	#3, objptr
01afc     37 00 00 AF 
01b00     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01b04     AC 00 90 AD |  if_e	jmp	#LR__0093
01b08                 | LR__0090
01b08                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01b08     37 00 00 FF 
01b0c     24 E4 05 F1 | 	add	objptr, ##28196
01b10     F2 24 02 FB | 	rdlong	local04, objptr
01b14     37 00 00 FF 
01b18     24 E4 85 F1 | 	sub	objptr, ##28196
01b1c     04 24 0E F2 | 	cmp	local04, #4 wz
01b20     3C 00 90 5D |  if_ne	jmp	#LR__0091
01b24     51 00 00 FF 
01b28     F4 E5 05 F1 | 	add	objptr, ##41972
01b2c     F2 12 02 FB | 	rdlong	arg01, objptr
01b30     51 00 00 FF 
01b34     F4 E5 85 F1 | 	sub	objptr, ##41972
01b38     81 01 00 FF 
01b3c     AB 15 06 F6 | 	mov	arg02, ##@LR__5047
01b40     CC EF B1 FD | 	call	#__system___string_cmp
01b44     00 FA 0D F2 | 	cmp	result1, #0 wz
01b48     37 00 00 5F 
01b4c     24 E4 05 51 |  if_ne	add	objptr, ##28196
01b50     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01b54     37 00 00 5F 
01b58     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01b5c     54 00 90 5D |  if_ne	jmp	#LR__0093
01b60                 | LR__0091
01b60                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01b60     37 00 00 FF 
01b64     24 E4 05 F1 | 	add	objptr, ##28196
01b68     F2 24 02 FB | 	rdlong	local04, objptr
01b6c     37 00 00 FF 
01b70     24 E4 85 F1 | 	sub	objptr, ##28196
01b74     04 24 0E F2 | 	cmp	local04, #4 wz
01b78     38 00 90 5D |  if_ne	jmp	#LR__0092
01b7c     51 00 00 FF 
01b80     F4 E5 05 F1 | 	add	objptr, ##41972
01b84     F2 12 02 FB | 	rdlong	arg01, objptr
01b88     51 00 00 FF 
01b8c     F4 E5 85 F1 | 	sub	objptr, ##41972
01b90     81 01 00 FF 
01b94     AC 15 06 F6 | 	mov	arg02, ##@LR__5048
01b98     74 EF B1 FD | 	call	#__system___string_cmp
01b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
01ba0     37 00 00 AF 
01ba4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01ba8     F2 04 68 AC |  if_e	wrlong	#2, objptr
01bac     37 00 00 AF 
01bb0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01bb4                 | LR__0092
01bb4                 | LR__0093
01bb4     38 4E 05 F1 | 	add	fp, #56
01bb8     A7 00 68 FC | 	wrlong	#0, fp
01bbc     38 4E 85 F1 | 	sub	fp, #56
01bc0     00 20 06 F6 | 	mov	local02, #0
01bc4     01 3A 06 F6 | 	mov	local15, #1
01bc8                 | ' 
01bc8                 | ' ' 1b: find separators
01bc8                 | ' 
01bc8                 | ' 107
01bc8                 | ' separators(0)=0
01bc8                 | ' i=0: j=1
01bc8                 | ' do: 
01bc8                 | LR__0094
01bc8     01 20 06 F1 | 	add	local02, #1
01bcc     37 00 00 FF 
01bd0     1C E4 05 F1 | 	add	objptr, ##28188
01bd4     F2 12 02 FB | 	rdlong	arg01, objptr
01bd8     37 00 00 FF 
01bdc     1C E4 85 F1 | 	sub	objptr, ##28188
01be0     10 15 02 F6 | 	mov	arg02, local02
01be4     01 16 06 F6 | 	mov	arg03, #1
01be8     90 10 B2 FD | 	call	#__system__Mid_S
01bec     FD 3C 02 F6 | 	mov	local16, result1
01bf0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01bf0     1E 13 02 F6 | 	mov	arg01, local16
01bf4     04 28 B0 FD | 	call	#_isseparator
01bf8     00 FA 0D F2 | 	cmp	result1, #0 wz
01bfc     1C 00 90 AD |  if_e	jmp	#LR__0095
01c00     1D 23 02 F6 | 	mov	local03, local15
01c04     02 22 66 F0 | 	shl	local03, #2
01c08     38 4E 05 F1 | 	add	fp, #56
01c0c     A7 22 02 F1 | 	add	local03, fp
01c10     11 21 62 FC | 	wrlong	local02, local03
01c14     01 3A 06 F1 | 	add	local15, #1
01c18     38 4E 85 F1 | 	sub	fp, #56
01c1c                 | LR__0095
01c1c     51 00 00 FF 
01c20     F0 E5 05 F1 | 	add	objptr, ##41968
01c24     F2 24 02 FB | 	rdlong	local04, objptr
01c28     51 00 00 FF 
01c2c     F0 E5 85 F1 | 	sub	objptr, ##41968
01c30     12 21 5A F2 | 	cmps	local02, local04 wcz
01c34     90 FF 9F ED |  if_be	jmp	#LR__0094
01c38     1D 23 02 F6 | 	mov	local03, local15
01c3c     02 22 66 F0 | 	shl	local03, #2
01c40     38 4E 05 F1 | 	add	fp, #56
01c44     A7 30 02 F6 | 	mov	local10, fp
01c48     A7 22 02 F1 | 	add	local03, fp
01c4c     11 21 62 FC | 	wrlong	local02, local03
01c50     00 3E 06 F6 | 	mov	local17, #0
01c54                 | ' for i=0 to j-1 
01c54     00 20 06 F6 | 	mov	local02, #0
01c58     1D 41 02 F6 | 	mov	local18, local15
01c5c     38 4E 85 F1 | 	sub	fp, #56
01c60                 | LR__0096
01c60     20 21 52 F2 | 	cmps	local02, local18 wc
01c64     50 01 90 3D |  if_ae	jmp	#LR__0100
01c68     10 23 02 F6 | 	mov	local03, local02
01c6c     02 22 66 F0 | 	shl	local03, #2
01c70     38 4E 05 F1 | 	add	fp, #56
01c74     A7 22 02 F1 | 	add	local03, fp
01c78     11 27 02 FB | 	rdlong	local05, local03
01c7c     51 00 00 FF 
01c80     FC E5 05 F1 | 	add	objptr, ##41980
01c84     F2 26 62 FC | 	wrlong	local05, objptr
01c88     10 23 02 F6 | 	mov	local03, local02
01c8c     01 22 06 F1 | 	add	local03, #1
01c90     02 22 66 F0 | 	shl	local03, #2
01c94     A7 30 02 F6 | 	mov	local10, fp
01c98     A7 22 02 F1 | 	add	local03, fp
01c9c     11 27 02 FB | 	rdlong	local05, local03
01ca0     04 E4 05 F1 | 	add	objptr, #4
01ca4     F2 26 62 FC | 	wrlong	local05, objptr
01ca8                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01ca8     04 E4 85 F1 | 	sub	objptr, #4
01cac     F2 24 02 FB | 	rdlong	local04, objptr
01cb0     51 00 00 FF 
01cb4     FC E5 85 F1 | 	sub	objptr, ##41980
01cb8     01 24 56 F2 | 	cmps	local04, #1 wc
01cbc     38 4E 85 F1 | 	sub	fp, #56
01cc0     68 00 90 CD |  if_b	jmp	#LR__0098
01cc4     37 00 00 FF 
01cc8     1C E4 05 F1 | 	add	objptr, ##28188
01ccc     F2 12 02 FB | 	rdlong	arg01, objptr
01cd0     1A 00 00 FF 
01cd4     E0 E5 05 F1 | 	add	objptr, ##13792
01cd8     F2 14 02 FB | 	rdlong	arg02, objptr
01cdc     51 00 00 FF 
01ce0     FC E5 85 F1 | 	sub	objptr, ##41980
01ce4     01 16 06 F6 | 	mov	arg03, #1
01ce8     90 0F B2 FD | 	call	#__system__Mid_S
01cec     FD 42 02 F6 | 	mov	local19, result1
01cf0     81 01 00 FF 
01cf4     AD 15 06 F6 | 	mov	arg02, ##@LR__5049
01cf8     21 13 02 F6 | 	mov	arg01, local19
01cfc     10 EE B1 FD | 	call	#__system___string_cmp
01d00     00 FA 0D F2 | 	cmp	result1, #0 wz
01d04     24 00 90 AD |  if_e	jmp	#LR__0097
01d08     1F 31 02 F6 | 	mov	local10, local17
01d0c     03 30 66 F0 | 	shl	local10, #3
01d10     35 00 00 FF 
01d14     0C E4 05 F1 | 	add	objptr, ##27148
01d18     F2 30 02 F1 | 	add	local10, objptr
01d1c     18 43 62 FC | 	wrlong	local19, local10
01d20     01 3E 06 F1 | 	add	local17, #1
01d24     35 00 00 FF 
01d28     0C E4 85 F1 | 	sub	objptr, ##27148
01d2c                 | LR__0097
01d2c                 | LR__0098
01d2c     37 00 00 FF 
01d30     1C E4 05 F1 | 	add	objptr, ##28188
01d34     F2 12 02 FB | 	rdlong	arg01, objptr
01d38     1A 00 00 FF 
01d3c     E0 E5 05 F1 | 	add	objptr, ##13792
01d40     F2 14 02 FB | 	rdlong	arg02, objptr
01d44     01 14 06 F1 | 	add	arg02, #1
01d48     04 E4 05 F1 | 	add	objptr, #4
01d4c     F2 16 02 FB | 	rdlong	arg03, objptr
01d50     04 E4 85 F1 | 	sub	objptr, #4
01d54     F2 32 02 FB | 	rdlong	local11, objptr
01d58     51 00 00 FF 
01d5c     FC E5 85 F1 | 	sub	objptr, ##41980
01d60     19 35 02 F6 | 	mov	local12, local11
01d64     1A 17 82 F1 | 	sub	arg03, local12
01d68     01 16 86 F1 | 	sub	arg03, #1
01d6c     0C 0F B2 FD | 	call	#__system__Mid_S
01d70     FD 42 02 F6 | 	mov	local19, result1
01d74                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01d74     81 01 00 FF 
01d78     AE 15 06 F6 | 	mov	arg02, ##@LR__5050
01d7c     21 13 02 F6 | 	mov	arg01, local19
01d80     8C ED B1 FD | 	call	#__system___string_cmp
01d84     00 FA 0D F2 | 	cmp	result1, #0 wz
01d88     24 00 90 AD |  if_e	jmp	#LR__0099
01d8c     1F 31 02 F6 | 	mov	local10, local17
01d90     03 30 66 F0 | 	shl	local10, #3
01d94     35 00 00 FF 
01d98     0C E4 05 F1 | 	add	objptr, ##27148
01d9c     F2 30 02 F1 | 	add	local10, objptr
01da0     18 43 62 FC | 	wrlong	local19, local10
01da4     01 3E 06 F1 | 	add	local17, #1
01da8     35 00 00 FF 
01dac     0C E4 85 F1 | 	sub	objptr, ##27148
01db0                 | LR__0099
01db0     01 20 06 F1 | 	add	local02, #1
01db4     A8 FE 9F FD | 	jmp	#LR__0096
01db8                 | LR__0100
01db8                 | ' 
01db8                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01db8                 | ' 
01db8                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01db8     37 00 00 FF 
01dbc     24 E4 05 F1 | 	add	objptr, ##28196
01dc0     F2 24 0A FB | 	rdlong	local04, objptr wz
01dc4     37 00 00 FF 
01dc8     24 E4 85 F1 | 	sub	objptr, ##28196
01dcc     37 00 00 5F 
01dd0     24 E4 05 51 |  if_ne	add	objptr, ##28196
01dd4     F2 30 02 5B |  if_ne	rdlong	local10, objptr
01dd8     37 00 00 5F 
01ddc     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01de0     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
01de4     B8 00 90 5D |  if_ne	jmp	#LR__0103
01de8     35 00 00 FF 
01dec     0C E4 05 F1 | 	add	objptr, ##27148
01df0     F2 32 02 FB | 	rdlong	local11, objptr
01df4     35 00 00 FF 
01df8     0C E4 85 F1 | 	sub	objptr, ##27148
01dfc     19 13 02 F6 | 	mov	arg01, local11
01e00     DC 45 B0 FD | 	call	#_isdec
01e04     FD 34 02 F6 | 	mov	local12, result1
01e08     1A 29 22 F6 | 	not	local06, local12
01e0c     00 28 0E F2 | 	cmp	local06, #0 wz
01e10     8C 00 90 AD |  if_e	jmp	#LR__0103
01e14     1F 21 02 F6 | 	mov	local02, local17
01e18     35 00 00 FF 
01e1c     0C E4 05 F1 | 	add	objptr, ##27148
01e20     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01e24                 | LR__0101
01e24     10 27 02 F6 | 	mov	local05, local02
01e28     01 26 86 F1 | 	sub	local05, #1
01e2c     03 26 66 F0 | 	shl	local05, #3
01e30     F2 26 02 F1 | 	add	local05, objptr
01e34     13 25 02 FB | 	rdlong	local04, local05
01e38     10 29 02 F6 | 	mov	local06, local02
01e3c     01 28 86 F1 | 	sub	local06, #1
01e40     03 28 66 F0 | 	shl	local06, #3
01e44     F2 28 02 F1 | 	add	local06, objptr
01e48     04 28 06 F1 | 	add	local06, #4
01e4c     14 23 02 FB | 	rdlong	local03, local06
01e50     10 29 02 F6 | 	mov	local06, local02
01e54     03 28 66 F0 | 	shl	local06, #3
01e58     F2 34 02 F6 | 	mov	local12, objptr
01e5c     F2 28 02 F1 | 	add	local06, objptr
01e60     14 25 62 FC | 	wrlong	local04, local06
01e64     10 33 02 F6 | 	mov	local11, local02
01e68     19 37 02 F6 | 	mov	local13, local11
01e6c     03 36 66 F0 | 	shl	local13, #3
01e70     F2 36 02 F1 | 	add	local13, objptr
01e74     04 36 06 F1 | 	add	local13, #4
01e78     1B 23 62 FC | 	wrlong	local03, local13
01e7c     01 20 86 F1 | 	sub	local02, #1
01e80     01 20 56 F2 | 	cmps	local02, #1 wc
01e84     9C FF 9F 3D |  if_ae	jmp	#LR__0101
01e88                 | LR__0102
01e88     81 01 00 FF 
01e8c     AF 25 06 F6 | 	mov	local04, ##@LR__5051
01e90     F2 24 62 FC | 	wrlong	local04, objptr
01e94     35 00 00 FF 
01e98     0C E4 85 F1 | 	sub	objptr, ##27148
01e9c     01 3E 06 F1 | 	add	local17, #1
01ea0                 | LR__0103
01ea0     00 20 06 F6 | 	mov	local02, #0
01ea4                 | ' 
01ea4                 | ' ' 1e : find strings
01ea4                 | ' 
01ea4                 | ' i=0
01ea4                 | ' do
01ea4                 | LR__0104
01ea4                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
01ea4     10 27 02 F6 | 	mov	local05, local02
01ea8     03 26 66 F0 | 	shl	local05, #3
01eac     35 00 00 FF 
01eb0     0C E4 05 F1 | 	add	objptr, ##27148
01eb4     F2 26 02 F1 | 	add	local05, objptr
01eb8     13 13 02 FB | 	rdlong	arg01, local05
01ebc     81 01 00 FF 
01ec0     B1 15 06 F6 | 	mov	arg02, ##@LR__5052
01ec4     35 00 00 FF 
01ec8     0C E4 85 F1 | 	sub	objptr, ##27148
01ecc     40 EC B1 FD | 	call	#__system___string_cmp
01ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ed4     01 20 06 51 |  if_ne	add	local02, #1
01ed8     20 01 90 5D |  if_ne	jmp	#LR__0109
01edc     10 45 02 F6 | 	mov	local20, local02
01ee0                 | LR__0105
01ee0     10 31 02 F6 | 	mov	local10, local02
01ee4     01 30 06 F1 | 	add	local10, #1
01ee8     03 30 66 F0 | 	shl	local10, #3
01eec     35 00 00 FF 
01ef0     0C E4 05 F1 | 	add	objptr, ##27148
01ef4     F2 30 02 F1 | 	add	local10, objptr
01ef8     18 43 02 FB | 	rdlong	local19, local10
01efc     22 31 02 F6 | 	mov	local10, local20
01f00     03 30 66 F0 | 	shl	local10, #3
01f04     F2 30 02 F1 | 	add	local10, objptr
01f08     22 33 02 F6 | 	mov	local11, local20
01f0c     19 39 02 F6 | 	mov	local14, local11
01f10     03 38 66 F0 | 	shl	local14, #3
01f14     F2 38 02 F1 | 	add	local14, objptr
01f18     1C 13 02 FB | 	rdlong	arg01, local14
01f1c     21 35 02 F6 | 	mov	local12, local19
01f20     1A 15 02 F6 | 	mov	arg02, local12
01f24     35 00 00 FF 
01f28     0C E4 85 F1 | 	sub	objptr, ##27148
01f2c     14 EC B1 FD | 	call	#__system___string_concat
01f30     18 FB 61 FC | 	wrlong	result1, local10
01f34     10 3B 02 F6 | 	mov	local15, local02
01f38     01 3A 06 F1 | 	add	local15, #1
01f3c     1F 47 02 F6 | 	mov	local21, local17
01f40     01 46 06 F1 | 	add	local21, #1
01f44     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
01f48                 | LR__0106
01f48     23 3B 52 F2 | 	cmps	local15, local21 wc
01f4c     70 00 90 3D |  if_ae	jmp	#LR__0108
01f50     1D 27 02 F6 | 	mov	local05, local15
01f54     01 26 06 F1 | 	add	local05, #1
01f58     03 26 66 F0 | 	shl	local05, #3
01f5c     35 00 00 FF 
01f60     0C E4 05 F1 | 	add	objptr, ##27148
01f64     F2 26 02 F1 | 	add	local05, objptr
01f68     13 25 02 FB | 	rdlong	local04, local05
01f6c     1D 29 02 F6 | 	mov	local06, local15
01f70     01 28 06 F1 | 	add	local06, #1
01f74     03 28 66 F0 | 	shl	local06, #3
01f78     F2 28 02 F1 | 	add	local06, objptr
01f7c     04 28 06 F1 | 	add	local06, #4
01f80     14 23 02 FB | 	rdlong	local03, local06
01f84     1D 29 02 F6 | 	mov	local06, local15
01f88     03 28 66 F0 | 	shl	local06, #3
01f8c     F2 34 02 F6 | 	mov	local12, objptr
01f90     F2 28 02 F1 | 	add	local06, objptr
01f94     14 25 62 FC | 	wrlong	local04, local06
01f98     1D 33 02 F6 | 	mov	local11, local15
01f9c     19 37 02 F6 | 	mov	local13, local11
01fa0     03 36 66 F0 | 	shl	local13, #3
01fa4     F2 36 02 F1 | 	add	local13, objptr
01fa8     04 36 06 F1 | 	add	local13, #4
01fac     1B 23 62 FC | 	wrlong	local03, local13
01fb0     01 3A 06 F1 | 	add	local15, #1
01fb4     35 00 00 FF 
01fb8     0C E4 85 F1 | 	sub	objptr, ##27148
01fbc     88 FF 9F FD | 	jmp	#LR__0106
01fc0                 | LR__0107
01fc0                 | LR__0108
01fc0     01 3E 86 F1 | 	sub	local17, #1
01fc4     81 01 00 FF 
01fc8     B3 15 06 F6 | 	mov	arg02, ##@LR__5053
01fcc     21 13 02 F6 | 	mov	arg01, local19
01fd0     3C EB B1 FD | 	call	#__system___string_cmp
01fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
01fd8     1F 21 52 52 |  if_ne	cmps	local02, local17 wc
01fdc     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
01fe0                 | '   if p$<>"""" then k+=1:i+=1
01fe0     81 01 00 FF 
01fe4     B5 15 06 F6 | 	mov	arg02, ##@LR__5054
01fe8     21 13 02 F6 | 	mov	arg01, local19
01fec     20 EB B1 FD | 	call	#__system___string_cmp
01ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ff4     01 3E 06 51 |  if_ne	add	local17, #1
01ff8     01 20 06 51 |  if_ne	add	local02, #1
01ffc                 | LR__0109
01ffc     1F 21 52 F2 | 	cmps	local02, local17 wc
02000     A0 FE 9F CD |  if_b	jmp	#LR__0104
02004     00 20 06 F6 | 	mov	local02, #0
02008                 | ' 
02008                 | ' ' 1f : concatenate strings if "" detected between
02008                 | '  
02008                 | ' i=0
02008                 | ' do
02008                 | LR__0110
02008                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
02008     10 27 02 F6 | 	mov	local05, local02
0200c     03 26 66 F0 | 	shl	local05, #3
02010     35 00 00 FF 
02014     0C E4 05 F1 | 	add	objptr, ##27148
02018     F2 28 02 F6 | 	mov	local06, objptr
0201c     F2 26 02 F1 | 	add	local05, objptr
02020     13 13 02 FB | 	rdlong	arg01, local05
02024     01 14 06 F6 | 	mov	arg02, #1
02028     35 00 00 FF 
0202c     0C E4 85 F1 | 	sub	objptr, ##27148
02030     B8 0B B2 FD | 	call	#__system__Right_S
02034     FD 12 02 F6 | 	mov	arg01, result1
02038     81 01 00 FF 
0203c     B7 15 06 F6 | 	mov	arg02, ##@LR__5055
02040     CC EA B1 FD | 	call	#__system___string_cmp
02044     00 FA 0D F2 | 	cmp	result1, #0 wz
02048     7C 01 90 5D |  if_ne	jmp	#LR__0116
0204c     10 29 02 F6 | 	mov	local06, local02
02050     01 28 06 F1 | 	add	local06, #1
02054     03 28 66 F0 | 	shl	local06, #3
02058     35 00 00 FF 
0205c     0C E4 05 F1 | 	add	objptr, ##27148
02060     F2 34 02 F6 | 	mov	local12, objptr
02064     F2 28 02 F1 | 	add	local06, objptr
02068     14 13 02 FB | 	rdlong	arg01, local06
0206c     01 14 06 F6 | 	mov	arg02, #1
02070     35 00 00 FF 
02074     0C E4 85 F1 | 	sub	objptr, ##27148
02078     E8 0A B2 FD | 	call	#__system__Left_S
0207c     FD 12 02 F6 | 	mov	arg01, result1
02080     81 01 00 FF 
02084     B9 15 06 F6 | 	mov	arg02, ##@LR__5056
02088     84 EA B1 FD | 	call	#__system___string_cmp
0208c     00 FA 0D F2 | 	cmp	result1, #0 wz
02090     34 01 90 5D |  if_ne	jmp	#LR__0116
02094     10 31 02 F6 | 	mov	local10, local02
02098     03 30 66 F0 | 	shl	local10, #3
0209c     35 00 00 FF 
020a0     0C E4 05 F1 | 	add	objptr, ##27148
020a4     F2 30 02 F1 | 	add	local10, objptr
020a8     10 39 02 F6 | 	mov	local14, local02
020ac     03 38 66 F0 | 	shl	local14, #3
020b0     F2 38 02 F1 | 	add	local14, objptr
020b4     1C 29 02 FB | 	rdlong	local06, local14
020b8     10 37 02 F6 | 	mov	local13, local02
020bc     01 36 06 F1 | 	add	local13, #1
020c0     03 36 66 F0 | 	shl	local13, #3
020c4     F2 36 02 F1 | 	add	local13, objptr
020c8     1B 35 02 FB | 	rdlong	local12, local13
020cc     10 49 02 F6 | 	mov	local22, local02
020d0     01 48 06 F1 | 	add	local22, #1
020d4     24 4B 02 F6 | 	mov	local23, local22
020d8     03 4A 66 F0 | 	shl	local23, #3
020dc     F2 4C 02 F6 | 	mov	local24, objptr
020e0     F2 4A 02 F1 | 	add	local23, objptr
020e4     25 13 02 FB | 	rdlong	arg01, local23
020e8     35 00 00 FF 
020ec     0C E4 85 F1 | 	sub	objptr, ##27148
020f0     09 2B 02 F6 | 	mov	local07, arg01
020f4     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
020f8                 | LR__0111
020f8     15 FB C9 FA | 	rdbyte	result1, local07 wz
020fc     01 2A 06 51 |  if_ne	add	local07, #1
02100     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
02104                 | LR__0112
02104     09 2B 82 F1 | 	sub	local07, arg01
02108     15 33 02 F6 | 	mov	local11, local07
0210c     01 32 86 F1 | 	sub	local11, #1
02110     1A 13 02 F6 | 	mov	arg01, local12
02114     19 15 02 F6 | 	mov	arg02, local11
02118     D0 0A B2 FD | 	call	#__system__Right_S
0211c     FD 34 02 F6 | 	mov	local12, result1
02120     14 13 02 F6 | 	mov	arg01, local06
02124     1A 15 02 F6 | 	mov	arg02, local12
02128     18 EA B1 FD | 	call	#__system___string_concat
0212c     FD 28 02 F6 | 	mov	local06, result1
02130     18 29 62 FC | 	wrlong	local06, local10
02134                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
02134     10 3B 02 F6 | 	mov	local15, local02
02138     01 3A 06 F1 | 	add	local15, #1
0213c     1F 4F 02 F6 | 	mov	local25, local17
02140     01 4E 06 F1 | 	add	local25, #1
02144     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
02148                 | LR__0113
02148     27 3B 52 F2 | 	cmps	local15, local25 wc
0214c     70 00 90 3D |  if_ae	jmp	#LR__0115
02150     1D 27 02 F6 | 	mov	local05, local15
02154     01 26 06 F1 | 	add	local05, #1
02158     03 26 66 F0 | 	shl	local05, #3
0215c     35 00 00 FF 
02160     0C E4 05 F1 | 	add	objptr, ##27148
02164     F2 26 02 F1 | 	add	local05, objptr
02168     13 25 02 FB | 	rdlong	local04, local05
0216c     1D 29 02 F6 | 	mov	local06, local15
02170     01 28 06 F1 | 	add	local06, #1
02174     03 28 66 F0 | 	shl	local06, #3
02178     F2 28 02 F1 | 	add	local06, objptr
0217c     04 28 06 F1 | 	add	local06, #4
02180     14 23 02 FB | 	rdlong	local03, local06
02184     1D 29 02 F6 | 	mov	local06, local15
02188     03 28 66 F0 | 	shl	local06, #3
0218c     F2 34 02 F6 | 	mov	local12, objptr
02190     F2 28 02 F1 | 	add	local06, objptr
02194     14 25 62 FC | 	wrlong	local04, local06
02198     1D 33 02 F6 | 	mov	local11, local15
0219c     19 37 02 F6 | 	mov	local13, local11
021a0     03 36 66 F0 | 	shl	local13, #3
021a4     F2 36 02 F1 | 	add	local13, objptr
021a8     04 36 06 F1 | 	add	local13, #4
021ac     1B 23 62 FC | 	wrlong	local03, local13
021b0     01 3A 06 F1 | 	add	local15, #1
021b4     35 00 00 FF 
021b8     0C E4 85 F1 | 	sub	objptr, ##27148
021bc     88 FF 9F FD | 	jmp	#LR__0113
021c0                 | LR__0114
021c0                 | LR__0115
021c0     01 20 86 F1 | 	sub	local02, #1
021c4     01 3E 86 F1 | 	sub	local17, #1
021c8                 | LR__0116
021c8     01 20 06 F1 | 	add	local02, #1
021cc     1F 21 52 F2 | 	cmps	local02, local17 wc
021d0     34 FE 9F CD |  if_b	jmp	#LR__0110
021d4     00 20 06 F6 | 	mov	local02, #0
021d8                 | '  
021d8                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
021d8                 | '  
021d8                 | ' i=0 
021d8                 | ' do
021d8                 | LR__0117
021d8     10 31 02 F6 | 	mov	local10, local02
021dc     03 30 66 F0 | 	shl	local10, #3
021e0     35 00 00 FF 
021e4     0C E4 05 F1 | 	add	objptr, ##27148
021e8     F2 30 02 F1 | 	add	local10, objptr
021ec     18 51 02 FB | 	rdlong	local26, local10
021f0     10 31 02 F6 | 	mov	local10, local02
021f4     01 30 06 F1 | 	add	local10, #1
021f8     03 30 66 F0 | 	shl	local10, #3
021fc     F2 30 02 F1 | 	add	local10, objptr
02200     18 53 02 FB | 	rdlong	local27, local10
02204                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
02204                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
02204     81 01 00 FF 
02208     BB 15 06 F6 | 	mov	arg02, ##@LR__5057
0220c     28 13 02 F6 | 	mov	arg01, local26
02210     35 00 00 FF 
02214     0C E4 85 F1 | 	sub	objptr, ##27148
02218     F4 E8 B1 FD | 	call	#__system___string_cmp
0221c     00 FA 0D F2 | 	cmp	result1, #0 wz
02220     A8 00 90 AD |  if_e	jmp	#LR__0118
02224     81 01 00 FF 
02228     BD 15 06 F6 | 	mov	arg02, ##@LR__5058
0222c     28 13 02 F6 | 	mov	arg01, local26
02230     DC E8 B1 FD | 	call	#__system___string_cmp
02234     FD 22 0A F6 | 	mov	local03, result1 wz
02238     90 00 90 AD |  if_e	jmp	#LR__0118
0223c     81 01 00 FF 
02240     BF 29 06 F6 | 	mov	local06, ##@LR__5059
02244     28 13 02 F6 | 	mov	arg01, local26
02248     14 15 02 F6 | 	mov	arg02, local06
0224c     C0 E8 B1 FD | 	call	#__system___string_cmp
02250     00 FA 0D F2 | 	cmp	result1, #0 wz
02254     74 00 90 AD |  if_e	jmp	#LR__0118
02258     81 01 00 FF 
0225c     C1 35 06 F6 | 	mov	local12, ##@LR__5060
02260     28 13 02 F6 | 	mov	arg01, local26
02264     1A 15 02 F6 | 	mov	arg02, local12
02268     A4 E8 B1 FD | 	call	#__system___string_cmp
0226c     00 FA 0D F2 | 	cmp	result1, #0 wz
02270     58 00 90 AD |  if_e	jmp	#LR__0118
02274     81 01 00 FF 
02278     C3 33 06 F6 | 	mov	local11, ##@LR__5061
0227c     19 35 02 F6 | 	mov	local12, local11
02280     28 13 02 F6 | 	mov	arg01, local26
02284     1A 15 02 F6 | 	mov	arg02, local12
02288     84 E8 B1 FD | 	call	#__system___string_cmp
0228c     FD 28 0A F6 | 	mov	local06, result1 wz
02290     38 00 90 AD |  if_e	jmp	#LR__0118
02294     81 01 00 FF 
02298     C5 33 06 F6 | 	mov	local11, ##@LR__5062
0229c     28 13 02 F6 | 	mov	arg01, local26
022a0     19 15 02 F6 | 	mov	arg02, local11
022a4     68 E8 B1 FD | 	call	#__system___string_cmp
022a8     FD 34 0A F6 | 	mov	local12, result1 wz
022ac     1C 00 90 AD |  if_e	jmp	#LR__0118
022b0     81 01 00 FF 
022b4     C7 39 06 F6 | 	mov	local14, ##@LR__5063
022b8     28 13 02 F6 | 	mov	arg01, local26
022bc     1C 15 02 F6 | 	mov	arg02, local14
022c0     4C E8 B1 FD | 	call	#__system___string_cmp
022c4     FD 32 0A F6 | 	mov	local11, result1 wz
022c8     20 00 90 5D |  if_ne	jmp	#LR__0119
022cc                 | LR__0118
022cc     81 01 00 FF 
022d0     C9 55 06 F6 | 	mov	local28, ##@LR__5064
022d4     2A 37 02 F6 | 	mov	local13, local28
022d8     29 13 02 F6 | 	mov	arg01, local27
022dc     1B 15 02 F6 | 	mov	arg02, local13
022e0     2C E8 B1 FD | 	call	#__system___string_cmp
022e4     FD 38 0A F6 | 	mov	local14, result1 wz
022e8     B8 00 90 AD |  if_e	jmp	#LR__0122
022ec                 | LR__0119
022ec     81 01 00 FF 
022f0     CB 55 06 F6 | 	mov	local28, ##@LR__5065
022f4     28 13 02 F6 | 	mov	arg01, local26
022f8     2A 15 02 F6 | 	mov	arg02, local28
022fc     10 E8 B1 FD | 	call	#__system___string_cmp
02300     FD 36 0A F6 | 	mov	local13, result1 wz
02304     20 00 90 5D |  if_ne	jmp	#LR__0120
02308     81 01 00 FF 
0230c     CD 4B 06 F6 | 	mov	local23, ##@LR__5066
02310     25 49 02 F6 | 	mov	local22, local23
02314     29 13 02 F6 | 	mov	arg01, local27
02318     24 15 02 F6 | 	mov	arg02, local22
0231c     F0 E7 B1 FD | 	call	#__system___string_cmp
02320     FD 54 0A F6 | 	mov	local28, result1 wz
02324     7C 00 90 AD |  if_e	jmp	#LR__0122
02328                 | LR__0120
02328     81 01 00 FF 
0232c     CF 4B 06 F6 | 	mov	local23, ##@LR__5067
02330     28 13 02 F6 | 	mov	arg01, local26
02334     25 15 02 F6 | 	mov	arg02, local23
02338     D4 E7 B1 FD | 	call	#__system___string_cmp
0233c     FD 48 0A F6 | 	mov	local22, result1 wz
02340     20 00 90 5D |  if_ne	jmp	#LR__0121
02344     81 01 00 FF 
02348     D1 57 06 F6 | 	mov	local29, ##@LR__5068
0234c     2B 4D 02 F6 | 	mov	local24, local29
02350     29 13 02 F6 | 	mov	arg01, local27
02354     26 15 02 F6 | 	mov	arg02, local24
02358     B4 E7 B1 FD | 	call	#__system___string_cmp
0235c     FD 4A 0A F6 | 	mov	local23, result1 wz
02360     40 00 90 AD |  if_e	jmp	#LR__0122
02364                 | LR__0121
02364     81 01 00 FF 
02368     D3 59 06 F6 | 	mov	local30, ##@LR__5069
0236c     2C 57 02 F6 | 	mov	local29, local30
02370     28 13 02 F6 | 	mov	arg01, local26
02374     2B 15 02 F6 | 	mov	arg02, local29
02378     94 E7 B1 FD | 	call	#__system___string_cmp
0237c     FD 4C 0A F6 | 	mov	local24, result1 wz
02380     F0 00 90 5D |  if_ne	jmp	#LR__0126
02384     81 01 00 FF 
02388     D5 5B 06 F6 | 	mov	local31, ##@LR__5070
0238c     2D 59 02 F6 | 	mov	local30, local31
02390     29 13 02 F6 | 	mov	arg01, local27
02394     2C 15 02 F6 | 	mov	arg02, local30
02398     74 E7 B1 FD | 	call	#__system___string_cmp
0239c     FD 56 0A F6 | 	mov	local29, result1 wz
023a0     D0 00 90 5D |  if_ne	jmp	#LR__0126
023a4                 | LR__0122
023a4     10 31 02 F6 | 	mov	local10, local02
023a8     03 30 66 F0 | 	shl	local10, #3
023ac     35 00 00 FF 
023b0     0C E4 05 F1 | 	add	objptr, ##27148
023b4     F2 30 02 F1 | 	add	local10, objptr
023b8     29 35 02 F6 | 	mov	local12, local27
023bc     28 13 02 F6 | 	mov	arg01, local26
023c0     1A 15 02 F6 | 	mov	arg02, local12
023c4     35 00 00 FF 
023c8     0C E4 85 F1 | 	sub	objptr, ##27148
023cc     74 E7 B1 FD | 	call	#__system___string_concat
023d0     18 FB 61 FC | 	wrlong	result1, local10
023d4                 | '     lparts(i).part$=s1$+s2$
023d4                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
023d4     10 3B 02 F6 | 	mov	local15, local02
023d8     01 3A 06 F1 | 	add	local15, #1
023dc     1F 5D 02 F6 | 	mov	local32, local17
023e0     01 5C 06 F1 | 	add	local32, #1
023e4     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
023e8                 | LR__0123
023e8     2E 3B 52 F2 | 	cmps	local15, local32 wc
023ec     7C 00 90 3D |  if_ae	jmp	#LR__0125
023f0     1D 27 02 F6 | 	mov	local05, local15
023f4     01 26 06 F1 | 	add	local05, #1
023f8     03 26 66 F0 | 	shl	local05, #3
023fc     35 00 00 FF 
02400     0C E4 05 F1 | 	add	objptr, ##27148
02404     F2 26 02 F1 | 	add	local05, objptr
02408     13 25 02 FB | 	rdlong	local04, local05
0240c     1D 29 02 F6 | 	mov	local06, local15
02410     01 28 06 F1 | 	add	local06, #1
02414     03 28 66 F0 | 	shl	local06, #3
02418     F2 28 02 F1 | 	add	local06, objptr
0241c     04 28 06 F1 | 	add	local06, #4
02420     14 23 02 FB | 	rdlong	local03, local06
02424     1D 29 02 F6 | 	mov	local06, local15
02428     03 28 66 F0 | 	shl	local06, #3
0242c     F2 34 02 F6 | 	mov	local12, objptr
02430     F2 28 02 F1 | 	add	local06, objptr
02434     14 25 62 FC | 	wrlong	local04, local06
02438     1D 33 02 F6 | 	mov	local11, local15
0243c     19 39 02 F6 | 	mov	local14, local11
02440     1C 37 02 F6 | 	mov	local13, local14
02444     03 36 66 F0 | 	shl	local13, #3
02448     F2 54 02 F6 | 	mov	local28, objptr
0244c     F2 36 02 F1 | 	add	local13, objptr
02450     04 36 06 F1 | 	add	local13, #4
02454     1B 23 62 FC | 	wrlong	local03, local13
02458     04 36 86 F1 | 	sub	local13, #4
0245c     01 3A 06 F1 | 	add	local15, #1
02460     35 00 00 FF 
02464     0C E4 85 F1 | 	sub	objptr, ##27148
02468     7C FF 9F FD | 	jmp	#LR__0123
0246c                 | LR__0124
0246c                 | LR__0125
0246c     01 20 86 F1 | 	sub	local02, #1
02470     01 3E 86 F1 | 	sub	local17, #1
02474                 | LR__0126
02474     01 20 06 F1 | 	add	local02, #1
02478     1F 21 52 F2 | 	cmps	local02, local17 wc
0247c     58 FD 9F CD |  if_b	jmp	#LR__0117
02480                 | '  
02480                 | ' ' 1h : now remove parts that are spaces
02480                 | ' 
02480                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02480     00 20 06 F6 | 	mov	local02, #0
02484     1F 5F 02 F6 | 	mov	local33, local17
02488     01 5E 06 F1 | 	add	local33, #1
0248c                 | LR__0127
0248c     2F 21 52 F2 | 	cmps	local02, local33 wc
02490     50 00 90 3D |  if_ae	jmp	#LR__0128
02494     10 31 02 F6 | 	mov	local10, local02
02498     03 30 66 F0 | 	shl	local10, #3
0249c     35 00 00 FF 
024a0     0C E4 05 F1 | 	add	objptr, ##27148
024a4     F2 30 02 F1 | 	add	local10, objptr
024a8     10 35 02 F6 | 	mov	local12, local02
024ac     1A 33 02 F6 | 	mov	local11, local12
024b0     19 39 02 F6 | 	mov	local14, local11
024b4     03 38 66 F0 | 	shl	local14, #3
024b8     F2 36 02 F6 | 	mov	local13, objptr
024bc     F2 38 02 F1 | 	add	local14, objptr
024c0     1C 13 02 FB | 	rdlong	arg01, local14
024c4     35 00 00 FF 
024c8     0C E4 85 F1 | 	sub	objptr, ##27148
024cc     24 0B B2 FD | 	call	#__system__RTrim_S
024d0     FD 12 02 F6 | 	mov	arg01, result1
024d4     5C 0A B2 FD | 	call	#__system__LTrim_S
024d8     18 FB 61 FC | 	wrlong	result1, local10
024dc     01 20 06 F1 | 	add	local02, #1
024e0     A8 FF 9F FD | 	jmp	#LR__0127
024e4                 | LR__0128
024e4     00 20 06 F6 | 	mov	local02, #0
024e8     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
024ec                 | ' i=0
024ec                 | ' do 
024ec                 | LR__0129
024ec                 | '   if len(lparts(i).part$)=0 then 
024ec     10 27 02 F6 | 	mov	local05, local02
024f0     03 26 66 F0 | 	shl	local05, #3
024f4     35 00 00 FF 
024f8     0C E4 05 F1 | 	add	objptr, ##27148
024fc     F2 26 02 F1 | 	add	local05, objptr
02500     13 13 02 FB | 	rdlong	arg01, local05
02504     35 00 00 FF 
02508     0C E4 85 F1 | 	sub	objptr, ##27148
0250c     09 2B 02 F6 | 	mov	local07, arg01
02510                 | LR__0130
02510     15 FB C9 FA | 	rdbyte	result1, local07 wz
02514     01 2A 06 51 |  if_ne	add	local07, #1
02518     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
0251c     09 2B 8A F1 | 	sub	local07, arg01 wz
02520     C4 00 90 5D |  if_ne	jmp	#LR__0134
02524                 | '     if i=k-1 then k-=1  :  exit
02524     1F 25 02 F6 | 	mov	local04, local17
02528     01 24 86 F1 | 	sub	local04, #1
0252c     12 21 0A F2 | 	cmp	local02, local04 wz
02530     01 3E 86 A1 |  if_e	sub	local17, #1
02534     C4 00 90 AD |  if_e	jmp	#LR__0136
02538                 | '     if i<k-1 then 
02538     1F 25 02 F6 | 	mov	local04, local17
0253c     01 24 86 F1 | 	sub	local04, #1
02540     12 21 52 F2 | 	cmps	local02, local04 wc
02544     A0 00 90 3D |  if_ae	jmp	#LR__0133
02548                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
02548     10 3B 02 F6 | 	mov	local15, local02
0254c     1F 61 02 F6 | 	mov	local34, local17
02550     01 60 86 F1 | 	sub	local34, #1
02554                 | LR__0131
02554     30 3B 52 F2 | 	cmps	local15, local34 wc
02558     80 00 90 3D |  if_ae	jmp	#LR__0132
0255c     1D 27 02 F6 | 	mov	local05, local15
02560     01 26 06 F1 | 	add	local05, #1
02564     03 26 66 F0 | 	shl	local05, #3
02568     35 00 00 FF 
0256c     0C E4 05 F1 | 	add	objptr, ##27148
02570     F2 26 02 F1 | 	add	local05, objptr
02574     13 25 02 FB | 	rdlong	local04, local05
02578     1D 29 02 F6 | 	mov	local06, local15
0257c     01 28 06 F1 | 	add	local06, #1
02580     03 28 66 F0 | 	shl	local06, #3
02584     F2 28 02 F1 | 	add	local06, objptr
02588     04 28 06 F1 | 	add	local06, #4
0258c     14 23 02 FB | 	rdlong	local03, local06
02590     1D 31 02 F6 | 	mov	local10, local15
02594     18 29 02 F6 | 	mov	local06, local10
02598     03 28 66 F0 | 	shl	local06, #3
0259c     F2 34 02 F6 | 	mov	local12, objptr
025a0     F2 28 02 F1 | 	add	local06, objptr
025a4     14 25 62 FC | 	wrlong	local04, local06
025a8     1D 33 02 F6 | 	mov	local11, local15
025ac     19 39 02 F6 | 	mov	local14, local11
025b0     1C 37 02 F6 | 	mov	local13, local14
025b4     03 36 66 F0 | 	shl	local13, #3
025b8     F2 54 02 F6 | 	mov	local28, objptr
025bc     F2 36 02 F1 | 	add	local13, objptr
025c0     04 36 06 F1 | 	add	local13, #4
025c4     1B 23 62 FC | 	wrlong	local03, local13
025c8     04 36 86 F1 | 	sub	local13, #4
025cc     01 3A 06 F1 | 	add	local15, #1
025d0     35 00 00 FF 
025d4     0C E4 85 F1 | 	sub	objptr, ##27148
025d8     78 FF 9F FD | 	jmp	#LR__0131
025dc                 | LR__0132
025dc     01 3E 86 F1 | 	sub	local17, #1
025e0                 | '       if i>0 then i-=1 
025e0     01 20 56 F2 | 	cmps	local02, #1 wc
025e4     01 20 86 31 |  if_ae	sub	local02, #1
025e8                 | LR__0133
025e8                 | LR__0134
025e8     01 20 06 F1 | 	add	local02, #1
025ec     1F 25 02 F6 | 	mov	local04, local17
025f0     01 24 86 F1 | 	sub	local04, #1
025f4     12 21 5A F2 | 	cmps	local02, local04 wcz
025f8     F0 FE 9F ED |  if_be	jmp	#LR__0129
025fc                 | LR__0135
025fc                 | LR__0136
025fc                 | ' 
025fc                 | ' ' 1i: lowercase all that is not a string
025fc                 | ' 
025fc                 | ' for j=0 to k-1
025fc     00 3A 06 F6 | 	mov	local15, #0
02600     1F 63 02 F6 | 	mov	local35, local17
02604                 | LR__0137
02604     31 3B 52 F2 | 	cmps	local15, local35 wc
02608     C8 00 90 3D |  if_ae	jmp	#LR__0140
0260c                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
0260c     1D 27 02 F6 | 	mov	local05, local15
02610     03 26 66 F0 | 	shl	local05, #3
02614     35 00 00 FF 
02618     0C E4 05 F1 | 	add	objptr, ##27148
0261c     F2 26 02 F1 | 	add	local05, objptr
02620     13 13 02 FB | 	rdlong	arg01, local05
02624     01 14 06 F6 | 	mov	arg02, #1
02628     35 00 00 FF 
0262c     0C E4 85 F1 | 	sub	objptr, ##27148
02630     30 05 B2 FD | 	call	#__system__Left_S
02634     FD 12 02 F6 | 	mov	arg01, result1
02638     81 01 00 FF 
0263c     D7 15 06 F6 | 	mov	arg02, ##@LR__5071
02640     CC E4 B1 FD | 	call	#__system___string_cmp
02644     00 FA 0D F2 | 	cmp	result1, #0 wz
02648     44 00 90 5D |  if_ne	jmp	#LR__0138
0264c     1D 29 02 F6 | 	mov	local06, local15
02650     03 28 66 F0 | 	shl	local06, #3
02654     35 00 00 FF 
02658     0C E4 05 F1 | 	add	objptr, ##27148
0265c     F2 34 02 F6 | 	mov	local12, objptr
02660     F2 28 02 F1 | 	add	local06, objptr
02664     14 13 02 FB | 	rdlong	arg01, local06
02668     01 14 06 F6 | 	mov	arg02, #1
0266c     35 00 00 FF 
02670     0C E4 85 F1 | 	sub	objptr, ##27148
02674     74 05 B2 FD | 	call	#__system__Right_S
02678     FD 12 02 F6 | 	mov	arg01, result1
0267c     81 01 00 FF 
02680     D9 15 06 F6 | 	mov	arg02, ##@LR__5072
02684     88 E4 B1 FD | 	call	#__system___string_cmp
02688     00 FA 0D F2 | 	cmp	result1, #0 wz
0268c     3C 00 90 AD |  if_e	jmp	#LR__0139
02690                 | LR__0138
02690     1D 31 02 F6 | 	mov	local10, local15
02694     03 30 66 F0 | 	shl	local10, #3
02698     35 00 00 FF 
0269c     0C E4 05 F1 | 	add	objptr, ##27148
026a0     F2 30 02 F1 | 	add	local10, objptr
026a4     1D 33 02 F6 | 	mov	local11, local15
026a8     19 39 02 F6 | 	mov	local14, local11
026ac     03 38 66 F0 | 	shl	local14, #3
026b0     F2 36 02 F6 | 	mov	local13, objptr
026b4     F2 38 02 F1 | 	add	local14, objptr
026b8     1C 13 02 FB | 	rdlong	arg01, local14
026bc     35 00 00 FF 
026c0     0C E4 85 F1 | 	sub	objptr, ##27148
026c4     AC 07 B2 FD | 	call	#__system__LCase_S
026c8     18 FB 61 FC | 	wrlong	result1, local10
026cc                 | LR__0139
026cc     01 3A 06 F1 | 	add	local15, #1
026d0     30 FF 9F FD | 	jmp	#LR__0137
026d4                 | LR__0140
026d4                 | ' 
026d4                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
026d4                 | ' 
026d4                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
026d4     00 20 06 F6 | 	mov	local02, #0
026d8     1F 65 02 F6 | 	mov	local36, local17
026dc     01 64 06 F1 | 	add	local36, #1
026e0     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
026e4                 | LR__0141
026e4     32 21 52 F2 | 	cmps	local02, local36 wc
026e8     30 00 90 3D |  if_ae	jmp	#LR__0143
026ec     10 31 02 F6 | 	mov	local10, local02
026f0     03 30 66 F0 | 	shl	local10, #3
026f4     35 00 00 FF 
026f8     0C E4 05 F1 | 	add	objptr, ##27148
026fc     F2 30 02 F1 | 	add	local10, objptr
02700     04 30 06 F1 | 	add	local10, #4
02704     FF FF FF FF 
02708     18 FF 6B FC | 	wrlong	##-1, local10
0270c     01 20 06 F1 | 	add	local02, #1
02710     35 00 00 FF 
02714     0C E4 85 F1 | 	sub	objptr, ##27148
02718     C8 FF 9F FD | 	jmp	#LR__0141
0271c                 | LR__0142
0271c                 | LR__0143
0271c                 | ' 
0271c                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
0271c     35 00 00 FF 
02720     0C E4 05 F1 | 	add	objptr, ##27148
02724     F2 12 02 FB | 	rdlong	arg01, objptr
02728     35 00 00 FF 
0272c     0C E4 85 F1 | 	sub	objptr, ##27148
02730     AC 3C B0 FD | 	call	#_isdec
02734     00 FA 0D F2 | 	cmp	result1, #0 wz
02738     01 66 06 56 |  if_ne	mov	local37, #1
0273c     00 66 06 A6 |  if_e	mov	local37, #0
02740                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
02740     35 00 00 FF 
02744     0C E4 05 F1 | 	add	objptr, ##27148
02748     F2 12 02 FB | 	rdlong	arg01, objptr
0274c     35 00 00 FF 
02750     0C E4 85 F1 | 	sub	objptr, ##27148
02754     81 01 00 FF 
02758     DB 15 06 F6 | 	mov	arg02, ##@LR__5073
0275c     B0 E3 B1 FD | 	call	#__system___string_cmp
02760     00 FA 0D F2 | 	cmp	result1, #0 wz
02764     01 66 06 A6 |  if_e	mov	local37, #1
02768     00 20 06 F6 | 	mov	local02, #0
0276c                 | ' i=0 : do 
0276c                 | LR__0144
0276c                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
0276c     10 27 02 F6 | 	mov	local05, local02
02770     03 26 66 F0 | 	shl	local05, #3
02774     35 00 00 FF 
02778     0C E4 05 F1 | 	add	objptr, ##27148
0277c     F2 26 02 F1 | 	add	local05, objptr
02780     13 13 02 FB | 	rdlong	arg01, local05
02784     81 01 00 FF 
02788     E0 15 06 F6 | 	mov	arg02, ##@LR__5074
0278c     35 00 00 FF 
02790     0C E4 85 F1 | 	sub	objptr, ##27148
02794     78 E3 B1 FD | 	call	#__system___string_cmp
02798     00 FA 0D F2 | 	cmp	result1, #0 wz
0279c     0C 00 90 AD |  if_e	jmp	#LR__0145
027a0     01 20 06 F1 | 	add	local02, #1
027a4     1F 21 5A F2 | 	cmps	local02, local17 wcz
027a8     C0 FF 9F ED |  if_be	jmp	#LR__0144
027ac                 | LR__0145
027ac                 | ' if i<k then addptr=i+1	 							' then found
027ac     1F 21 52 F2 | 	cmps	local02, local17 wc
027b0     10 67 02 C6 |  if_b	mov	local37, local02
027b4     01 66 06 C1 |  if_b	add	local37, #1
027b8     35 00 00 FF 
027bc     0C E4 05 F1 | 	add	objptr, ##27148
027c0     33 29 02 F6 | 	mov	local06, local37
027c4     03 28 66 F0 | 	shl	local06, #3
027c8     F2 34 02 F6 | 	mov	local12, objptr
027cc     F2 28 02 F1 | 	add	local06, objptr
027d0     14 15 02 FB | 	rdlong	arg02, local06
027d4     81 01 00 FF 
027d8     E5 17 06 F6 | 	mov	arg03, ##@LR__5075
027dc     01 12 06 F6 | 	mov	arg01, #1
027e0     35 00 00 FF 
027e4     0C E4 85 F1 | 	sub	objptr, ##27148
027e8     C0 08 B2 FD | 	call	#__system__Instr
027ec     FD 68 02 F6 | 	mov	local38, result1
027f0                 | ' lp$=lparts(addptr).part$ 
027f0                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
027f0                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
027f0     01 68 56 F2 | 	cmps	local38, #1 wc
027f4     68 01 90 CD |  if_b	jmp	#LR__0152
027f8     33 27 02 F6 | 	mov	local05, local37
027fc     03 26 66 F0 | 	shl	local05, #3
02800     35 00 00 FF 
02804     0C E4 05 F1 | 	add	objptr, ##27148
02808     F2 26 02 F1 | 	add	local05, objptr
0280c     13 13 02 FB | 	rdlong	arg01, local05
02810     35 00 00 FF 
02814     0C E4 85 F1 | 	sub	objptr, ##27148
02818     09 2B 02 F6 | 	mov	local07, arg01
0281c     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
02820                 | LR__0146
02820     15 FB C9 FA | 	rdbyte	result1, local07 wz
02824     01 2A 06 51 |  if_ne	add	local07, #1
02828     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
0282c                 | LR__0147
0282c     09 2B 82 F1 | 	sub	local07, arg01
02830     15 69 52 F2 | 	cmps	local38, local07 wc
02834     28 01 90 3D |  if_ae	jmp	#LR__0152
02838     01 3E 06 F1 | 	add	local17, #1
0283c                 | '   k+=1
0283c                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
0283c     1F 21 02 F6 | 	mov	local02, local17
02840     33 6B 02 F6 | 	mov	local39, local37
02844     01 6A 06 F1 | 	add	local39, #1
02848     35 00 00 FF 
0284c     0C E4 05 F1 | 	add	objptr, ##27148
02850     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02854                 | LR__0148
02854     10 27 02 F6 | 	mov	local05, local02
02858     01 26 86 F1 | 	sub	local05, #1
0285c     03 26 66 F0 | 	shl	local05, #3
02860     F2 26 02 F1 | 	add	local05, objptr
02864     13 25 02 FB | 	rdlong	local04, local05
02868     10 29 02 F6 | 	mov	local06, local02
0286c     01 28 86 F1 | 	sub	local06, #1
02870     03 28 66 F0 | 	shl	local06, #3
02874     F2 28 02 F1 | 	add	local06, objptr
02878     04 28 06 F1 | 	add	local06, #4
0287c     14 23 02 FB | 	rdlong	local03, local06
02880     10 29 02 F6 | 	mov	local06, local02
02884     03 28 66 F0 | 	shl	local06, #3
02888     F2 28 02 F1 | 	add	local06, objptr
0288c     14 25 62 FC | 	wrlong	local04, local06
02890     10 37 02 F6 | 	mov	local13, local02
02894     03 36 66 F0 | 	shl	local13, #3
02898     F2 36 02 F1 | 	add	local13, objptr
0289c     04 36 06 F1 | 	add	local13, #4
028a0     1B 23 62 FC | 	wrlong	local03, local13
028a4     01 20 86 F1 | 	sub	local02, #1
028a8     35 21 52 F2 | 	cmps	local02, local39 wc
028ac     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
028b0                 | LR__0149
028b0     33 31 02 F6 | 	mov	local10, local37
028b4     01 30 06 F1 | 	add	local10, #1
028b8     03 30 66 F0 | 	shl	local10, #3
028bc     F2 30 02 F1 | 	add	local10, objptr
028c0     33 39 02 F6 | 	mov	local14, local37
028c4     03 38 66 F0 | 	shl	local14, #3
028c8     F2 38 02 F1 | 	add	local14, objptr
028cc     1C 29 02 FB | 	rdlong	local06, local14
028d0     33 55 02 F6 | 	mov	local28, local37
028d4     2A 49 02 F6 | 	mov	local22, local28
028d8     03 48 66 F0 | 	shl	local22, #3
028dc     F2 4A 02 F6 | 	mov	local23, objptr
028e0     F2 48 02 F1 | 	add	local22, objptr
028e4     24 13 02 FB | 	rdlong	arg01, local22
028e8     35 00 00 FF 
028ec     0C E4 85 F1 | 	sub	objptr, ##27148
028f0     09 2B 02 F6 | 	mov	local07, arg01
028f4     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
028f8                 | LR__0150
028f8     15 FB C9 FA | 	rdbyte	result1, local07 wz
028fc     01 2A 06 51 |  if_ne	add	local07, #1
02900     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
02904                 | LR__0151
02904     09 2B 82 F1 | 	sub	local07, arg01
02908     15 15 02 F6 | 	mov	arg02, local07
0290c     34 15 82 F1 | 	sub	arg02, local38
02910     14 13 02 F6 | 	mov	arg01, local06
02914     D4 02 B2 FD | 	call	#__system__Right_S
02918     18 FB 61 FC | 	wrlong	result1, local10
0291c     33 31 02 F6 | 	mov	local10, local37
02920     03 30 66 F0 | 	shl	local10, #3
02924     35 00 00 FF 
02928     0C E4 05 F1 | 	add	objptr, ##27148
0292c     F2 30 02 F1 | 	add	local10, objptr
02930     33 33 02 F6 | 	mov	local11, local37
02934     19 39 02 F6 | 	mov	local14, local11
02938     03 38 66 F0 | 	shl	local14, #3
0293c     F2 36 02 F6 | 	mov	local13, objptr
02940     F2 38 02 F1 | 	add	local14, objptr
02944     1C 13 02 FB | 	rdlong	arg01, local14
02948     34 35 02 F6 | 	mov	local12, local38
0294c     1A 15 02 F6 | 	mov	arg02, local12
02950     35 00 00 FF 
02954     0C E4 85 F1 | 	sub	objptr, ##27148
02958     08 02 B2 FD | 	call	#__system__Left_S
0295c     18 FB 61 FC | 	wrlong	result1, local10
02960                 | LR__0152
02960                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02960     33 27 02 F6 | 	mov	local05, local37
02964     03 26 66 F0 | 	shl	local05, #3
02968     35 00 00 FF 
0296c     0C E4 05 F1 | 	add	objptr, ##27148
02970     F2 26 02 F1 | 	add	local05, objptr
02974     13 13 02 FB | 	rdlong	arg01, local05
02978     01 14 06 F6 | 	mov	arg02, #1
0297c     35 00 00 FF 
02980     0C E4 85 F1 | 	sub	objptr, ##27148
02984     DC 01 B2 FD | 	call	#__system__Left_S
02988     FD 12 02 F6 | 	mov	arg01, result1
0298c     81 01 00 FF 
02990     E7 15 06 F6 | 	mov	arg02, ##@LR__5076
02994     78 E1 B1 FD | 	call	#__system___string_cmp
02998     00 FA 0D F2 | 	cmp	result1, #0 wz
0299c     60 01 90 5D |  if_ne	jmp	#LR__0159
029a0     33 29 02 F6 | 	mov	local06, local37
029a4     03 28 66 F0 | 	shl	local06, #3
029a8     35 00 00 FF 
029ac     0C E4 05 F1 | 	add	objptr, ##27148
029b0     F2 34 02 F6 | 	mov	local12, objptr
029b4     F2 28 02 F1 | 	add	local06, objptr
029b8     14 13 02 FB | 	rdlong	arg01, local06
029bc     35 00 00 FF 
029c0     0C E4 85 F1 | 	sub	objptr, ##27148
029c4     09 2B 02 F6 | 	mov	local07, arg01
029c8     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
029cc                 | LR__0153
029cc     15 FB C9 FA | 	rdbyte	result1, local07 wz
029d0     01 2A 06 51 |  if_ne	add	local07, #1
029d4     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
029d8                 | LR__0154
029d8     09 2B 82 F1 | 	sub	local07, arg01
029dc     02 2A 56 F2 | 	cmps	local07, #2 wc
029e0     1C 01 90 CD |  if_b	jmp	#LR__0159
029e4     01 3E 06 F1 | 	add	local17, #1
029e8                 | '   k+=1
029e8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
029e8     1F 21 02 F6 | 	mov	local02, local17
029ec     33 6D 02 F6 | 	mov	local40, local37
029f0     01 6C 06 F1 | 	add	local40, #1
029f4     35 00 00 FF 
029f8     0C E4 05 F1 | 	add	objptr, ##27148
029fc     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02a00                 | LR__0155
02a00     10 27 02 F6 | 	mov	local05, local02
02a04     01 26 86 F1 | 	sub	local05, #1
02a08     03 26 66 F0 | 	shl	local05, #3
02a0c     F2 26 02 F1 | 	add	local05, objptr
02a10     13 25 02 FB | 	rdlong	local04, local05
02a14     10 29 02 F6 | 	mov	local06, local02
02a18     01 28 86 F1 | 	sub	local06, #1
02a1c     03 28 66 F0 | 	shl	local06, #3
02a20     F2 28 02 F1 | 	add	local06, objptr
02a24     04 28 06 F1 | 	add	local06, #4
02a28     14 23 02 FB | 	rdlong	local03, local06
02a2c     10 29 02 F6 | 	mov	local06, local02
02a30     03 28 66 F0 | 	shl	local06, #3
02a34     F2 28 02 F1 | 	add	local06, objptr
02a38     14 25 62 FC | 	wrlong	local04, local06
02a3c     10 37 02 F6 | 	mov	local13, local02
02a40     03 36 66 F0 | 	shl	local13, #3
02a44     F2 36 02 F1 | 	add	local13, objptr
02a48     04 36 06 F1 | 	add	local13, #4
02a4c     1B 23 62 FC | 	wrlong	local03, local13
02a50     01 20 86 F1 | 	sub	local02, #1
02a54     36 21 52 F2 | 	cmps	local02, local40 wc
02a58     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02a5c                 | LR__0156
02a5c     33 31 02 F6 | 	mov	local10, local37
02a60     01 30 06 F1 | 	add	local10, #1
02a64     03 30 66 F0 | 	shl	local10, #3
02a68     F2 30 02 F1 | 	add	local10, objptr
02a6c     33 39 02 F6 | 	mov	local14, local37
02a70     03 38 66 F0 | 	shl	local14, #3
02a74     F2 38 02 F1 | 	add	local14, objptr
02a78     1C 29 02 FB | 	rdlong	local06, local14
02a7c     33 37 02 F6 | 	mov	local13, local37
02a80     1B 55 02 F6 | 	mov	local28, local13
02a84     2A 49 02 F6 | 	mov	local22, local28
02a88     03 48 66 F0 | 	shl	local22, #3
02a8c     F2 4A 02 F6 | 	mov	local23, objptr
02a90     F2 48 02 F1 | 	add	local22, objptr
02a94     24 13 02 FB | 	rdlong	arg01, local22
02a98     35 00 00 FF 
02a9c     0C E4 85 F1 | 	sub	objptr, ##27148
02aa0     09 2B 02 F6 | 	mov	local07, arg01
02aa4     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02aa8                 | LR__0157
02aa8     15 FB C9 FA | 	rdbyte	result1, local07 wz
02aac     01 2A 06 51 |  if_ne	add	local07, #1
02ab0     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02ab4                 | LR__0158
02ab4     09 2B 82 F1 | 	sub	local07, arg01
02ab8     15 39 02 F6 | 	mov	local14, local07
02abc     1C 33 02 F6 | 	mov	local11, local14
02ac0     01 32 86 F1 | 	sub	local11, #1
02ac4     19 35 02 F6 | 	mov	local12, local11
02ac8     14 13 02 F6 | 	mov	arg01, local06
02acc     1A 15 02 F6 | 	mov	arg02, local12
02ad0     18 01 B2 FD | 	call	#__system__Right_S
02ad4     18 FB 61 FC | 	wrlong	result1, local10
02ad8     33 31 02 F6 | 	mov	local10, local37
02adc     03 30 66 F0 | 	shl	local10, #3
02ae0     35 00 00 FF 
02ae4     0C E4 05 F1 | 	add	objptr, ##27148
02ae8     F2 30 02 F1 | 	add	local10, objptr
02aec     81 01 00 FF 
02af0     E9 29 06 F6 | 	mov	local06, ##@LR__5077
02af4     18 29 62 FC | 	wrlong	local06, local10
02af8     35 00 00 FF 
02afc     0C E4 85 F1 | 	sub	objptr, ##27148
02b00                 | LR__0159
02b00     33 31 02 F6 | 	mov	local10, local37
02b04     03 30 66 F0 | 	shl	local10, #3
02b08     35 00 00 FF 
02b0c     0C E4 05 F1 | 	add	objptr, ##27148
02b10     F2 30 02 F1 | 	add	local10, objptr
02b14     18 6F 02 FB | 	rdlong	local41, local10
02b18                 | ' 
02b18                 | ' lp$=lparts(addptr).part$ 
02b18                 | ' 
02b18                 | ' ' process mouse/cursor/click on/off
02b18                 | ' 
02b18                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02b18     81 01 00 FF 
02b1c     EB 15 06 F6 | 	mov	arg02, ##@LR__5078
02b20     37 13 02 F6 | 	mov	arg01, local41
02b24     35 00 00 FF 
02b28     0C E4 85 F1 | 	sub	objptr, ##27148
02b2c     E0 DF B1 FD | 	call	#__system___string_cmp
02b30     00 FA 0D F2 | 	cmp	result1, #0 wz
02b34     30 00 90 AD |  if_e	jmp	#LR__0160
02b38     81 01 00 FF 
02b3c     F1 15 06 F6 | 	mov	arg02, ##@LR__5079
02b40     37 13 02 F6 | 	mov	arg01, local41
02b44     C8 DF B1 FD | 	call	#__system___string_cmp
02b48     00 FA 0D F2 | 	cmp	result1, #0 wz
02b4c     18 00 90 AD |  if_e	jmp	#LR__0160
02b50     81 01 00 FF 
02b54     F8 15 06 F6 | 	mov	arg02, ##@LR__5080
02b58     37 13 02 F6 | 	mov	arg01, local41
02b5c     B0 DF B1 FD | 	call	#__system___string_cmp
02b60     00 FA 0D F2 | 	cmp	result1, #0 wz
02b64     E0 00 90 5D |  if_ne	jmp	#LR__0163
02b68                 | LR__0160
02b68                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02b68     33 27 02 F6 | 	mov	local05, local37
02b6c     01 26 06 F1 | 	add	local05, #1
02b70     03 26 66 F0 | 	shl	local05, #3
02b74     35 00 00 FF 
02b78     0C E4 05 F1 | 	add	objptr, ##27148
02b7c     F2 26 02 F1 | 	add	local05, objptr
02b80     13 13 02 FB | 	rdlong	arg01, local05
02b84     81 01 00 FF 
02b88     FE 15 06 F6 | 	mov	arg02, ##@LR__5081
02b8c     35 00 00 FF 
02b90     0C E4 85 F1 | 	sub	objptr, ##27148
02b94     78 DF B1 FD | 	call	#__system___string_cmp
02b98     00 FA 0D F2 | 	cmp	result1, #0 wz
02b9c     38 00 90 5D |  if_ne	jmp	#LR__0161
02ba0     33 31 02 F6 | 	mov	local10, local37
02ba4     01 30 06 F1 | 	add	local10, #1
02ba8     03 30 66 F0 | 	shl	local10, #3
02bac     35 00 00 FF 
02bb0     0C E4 05 F1 | 	add	objptr, ##27148
02bb4     F2 30 02 F1 | 	add	local10, objptr
02bb8     82 01 00 FF 
02bbc     01 28 06 F6 | 	mov	local06, ##@LR__5082
02bc0     18 29 62 FC | 	wrlong	local06, local10
02bc4     14 E4 05 F1 | 	add	objptr, #20
02bc8     01 00 80 FF 
02bcc     F2 00 68 FC | 	wrlong	##512, objptr
02bd0     35 00 00 FF 
02bd4     20 E4 85 F1 | 	sub	objptr, ##27168
02bd8                 | LR__0161
02bd8                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02bd8     33 27 02 F6 | 	mov	local05, local37
02bdc     01 26 06 F1 | 	add	local05, #1
02be0     03 26 66 F0 | 	shl	local05, #3
02be4     35 00 00 FF 
02be8     0C E4 05 F1 | 	add	objptr, ##27148
02bec     F2 26 02 F1 | 	add	local05, objptr
02bf0     13 13 02 FB | 	rdlong	arg01, local05
02bf4     82 01 00 FF 
02bf8     03 14 06 F6 | 	mov	arg02, ##@LR__5083
02bfc     35 00 00 FF 
02c00     0C E4 85 F1 | 	sub	objptr, ##27148
02c04     08 DF B1 FD | 	call	#__system___string_cmp
02c08     00 FA 0D F2 | 	cmp	result1, #0 wz
02c0c     38 00 90 5D |  if_ne	jmp	#LR__0162
02c10     33 31 02 F6 | 	mov	local10, local37
02c14     01 30 06 F1 | 	add	local10, #1
02c18     03 30 66 F0 | 	shl	local10, #3
02c1c     35 00 00 FF 
02c20     0C E4 05 F1 | 	add	objptr, ##27148
02c24     F2 30 02 F1 | 	add	local10, objptr
02c28     82 01 00 FF 
02c2c     07 28 06 F6 | 	mov	local06, ##@LR__5084
02c30     18 29 62 FC | 	wrlong	local06, local10
02c34     14 E4 05 F1 | 	add	objptr, #20
02c38     01 00 80 FF 
02c3c     F2 00 68 FC | 	wrlong	##512, objptr
02c40     35 00 00 FF 
02c44     20 E4 85 F1 | 	sub	objptr, ##27168
02c48                 | LR__0162
02c48                 | LR__0163
02c48                 | ' 		
02c48                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02c48                 | ' 
02c48                 | ' if (lp$="mode" orelse lp$="m.") then 
02c48     82 01 00 FF 
02c4c     09 14 06 F6 | 	mov	arg02, ##@LR__5085
02c50     37 13 02 F6 | 	mov	arg01, local41
02c54     B8 DE B1 FD | 	call	#__system___string_cmp
02c58     00 FA 0D F2 | 	cmp	result1, #0 wz
02c5c     18 00 90 AD |  if_e	jmp	#LR__0164
02c60     82 01 00 FF 
02c64     0E 14 06 F6 | 	mov	arg02, ##@LR__5086
02c68     37 13 02 F6 | 	mov	arg01, local41
02c6c     A0 DE B1 FD | 	call	#__system___string_cmp
02c70     00 FA 0D F2 | 	cmp	result1, #0 wz
02c74     F4 01 90 5D |  if_ne	jmp	#LR__0170
02c78                 | LR__0164
02c78                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02c78     33 27 02 F6 | 	mov	local05, local37
02c7c     01 26 06 F1 | 	add	local05, #1
02c80     03 26 66 F0 | 	shl	local05, #3
02c84     35 00 00 FF 
02c88     0C E4 05 F1 | 	add	objptr, ##27148
02c8c     F2 26 02 F1 | 	add	local05, objptr
02c90     13 13 02 FB | 	rdlong	arg01, local05
02c94     82 01 00 FF 
02c98     11 14 06 F6 | 	mov	arg02, ##@LR__5087
02c9c     35 00 00 FF 
02ca0     0C E4 85 F1 | 	sub	objptr, ##27148
02ca4     68 DE B1 FD | 	call	#__system___string_cmp
02ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
02cac     2C 00 90 5D |  if_ne	jmp	#LR__0165
02cb0     33 31 02 F6 | 	mov	local10, local37
02cb4     01 30 06 F1 | 	add	local10, #1
02cb8     03 30 66 F0 | 	shl	local10, #3
02cbc     35 00 00 FF 
02cc0     0C E4 05 F1 | 	add	objptr, ##27148
02cc4     F2 30 02 F1 | 	add	local10, objptr
02cc8     82 01 00 FF 
02ccc     17 28 06 F6 | 	mov	local06, ##@LR__5088
02cd0     18 29 62 FC | 	wrlong	local06, local10
02cd4     35 00 00 FF 
02cd8     0C E4 85 F1 | 	sub	objptr, ##27148
02cdc                 | LR__0165
02cdc                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02cdc     33 27 02 F6 | 	mov	local05, local37
02ce0     01 26 06 F1 | 	add	local05, #1
02ce4     03 26 66 F0 | 	shl	local05, #3
02ce8     35 00 00 FF 
02cec     0C E4 05 F1 | 	add	objptr, ##27148
02cf0     F2 26 02 F1 | 	add	local05, objptr
02cf4     13 13 02 FB | 	rdlong	arg01, local05
02cf8     82 01 00 FF 
02cfc     19 14 06 F6 | 	mov	arg02, ##@LR__5089
02d00     35 00 00 FF 
02d04     0C E4 85 F1 | 	sub	objptr, ##27148
02d08     04 DE B1 FD | 	call	#__system___string_cmp
02d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d10     2C 00 90 5D |  if_ne	jmp	#LR__0166
02d14     33 31 02 F6 | 	mov	local10, local37
02d18     01 30 06 F1 | 	add	local10, #1
02d1c     03 30 66 F0 | 	shl	local10, #3
02d20     35 00 00 FF 
02d24     0C E4 05 F1 | 	add	objptr, ##27148
02d28     F2 30 02 F1 | 	add	local10, objptr
02d2c     82 01 00 FF 
02d30     22 28 06 F6 | 	mov	local06, ##@LR__5090
02d34     18 29 62 FC | 	wrlong	local06, local10
02d38     35 00 00 FF 
02d3c     0C E4 85 F1 | 	sub	objptr, ##27148
02d40                 | LR__0166
02d40                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02d40     33 27 02 F6 | 	mov	local05, local37
02d44     01 26 06 F1 | 	add	local05, #1
02d48     03 26 66 F0 | 	shl	local05, #3
02d4c     35 00 00 FF 
02d50     0C E4 05 F1 | 	add	objptr, ##27148
02d54     F2 26 02 F1 | 	add	local05, objptr
02d58     13 13 02 FB | 	rdlong	arg01, local05
02d5c     82 01 00 FF 
02d60     24 14 06 F6 | 	mov	arg02, ##@LR__5091
02d64     35 00 00 FF 
02d68     0C E4 85 F1 | 	sub	objptr, ##27148
02d6c     A0 DD B1 FD | 	call	#__system___string_cmp
02d70     00 FA 0D F2 | 	cmp	result1, #0 wz
02d74     2C 00 90 5D |  if_ne	jmp	#LR__0167
02d78     33 31 02 F6 | 	mov	local10, local37
02d7c     01 30 06 F1 | 	add	local10, #1
02d80     03 30 66 F0 | 	shl	local10, #3
02d84     35 00 00 FF 
02d88     0C E4 05 F1 | 	add	objptr, ##27148
02d8c     F2 30 02 F1 | 	add	local10, objptr
02d90     82 01 00 FF 
02d94     2D 28 06 F6 | 	mov	local06, ##@LR__5092
02d98     18 29 62 FC | 	wrlong	local06, local10
02d9c     35 00 00 FF 
02da0     0C E4 85 F1 | 	sub	objptr, ##27148
02da4                 | LR__0167
02da4                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02da4     33 27 02 F6 | 	mov	local05, local37
02da8     01 26 06 F1 | 	add	local05, #1
02dac     03 26 66 F0 | 	shl	local05, #3
02db0     35 00 00 FF 
02db4     0C E4 05 F1 | 	add	objptr, ##27148
02db8     F2 26 02 F1 | 	add	local05, objptr
02dbc     13 13 02 FB | 	rdlong	arg01, local05
02dc0     82 01 00 FF 
02dc4     2F 14 06 F6 | 	mov	arg02, ##@LR__5093
02dc8     35 00 00 FF 
02dcc     0C E4 85 F1 | 	sub	objptr, ##27148
02dd0     3C DD B1 FD | 	call	#__system___string_cmp
02dd4     00 FA 0D F2 | 	cmp	result1, #0 wz
02dd8     2C 00 90 5D |  if_ne	jmp	#LR__0168
02ddc     33 31 02 F6 | 	mov	local10, local37
02de0     01 30 06 F1 | 	add	local10, #1
02de4     03 30 66 F0 | 	shl	local10, #3
02de8     35 00 00 FF 
02dec     0C E4 05 F1 | 	add	objptr, ##27148
02df0     F2 30 02 F1 | 	add	local10, objptr
02df4     82 01 00 FF 
02df8     38 28 06 F6 | 	mov	local06, ##@LR__5094
02dfc     18 29 62 FC | 	wrlong	local06, local10
02e00     35 00 00 FF 
02e04     0C E4 85 F1 | 	sub	objptr, ##27148
02e08                 | LR__0168
02e08                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02e08     33 27 02 F6 | 	mov	local05, local37
02e0c     01 26 06 F1 | 	add	local05, #1
02e10     03 26 66 F0 | 	shl	local05, #3
02e14     35 00 00 FF 
02e18     0C E4 05 F1 | 	add	objptr, ##27148
02e1c     F2 26 02 F1 | 	add	local05, objptr
02e20     13 13 02 FB | 	rdlong	arg01, local05
02e24     82 01 00 FF 
02e28     3A 14 06 F6 | 	mov	arg02, ##@LR__5095
02e2c     35 00 00 FF 
02e30     0C E4 85 F1 | 	sub	objptr, ##27148
02e34     D8 DC B1 FD | 	call	#__system___string_cmp
02e38     00 FA 0D F2 | 	cmp	result1, #0 wz
02e3c     2C 00 90 5D |  if_ne	jmp	#LR__0169
02e40     33 31 02 F6 | 	mov	local10, local37
02e44     01 30 06 F1 | 	add	local10, #1
02e48     03 30 66 F0 | 	shl	local10, #3
02e4c     35 00 00 FF 
02e50     0C E4 05 F1 | 	add	objptr, ##27148
02e54     F2 30 02 F1 | 	add	local10, objptr
02e58     82 01 00 FF 
02e5c     3D 28 06 F6 | 	mov	local06, ##@LR__5096
02e60     18 29 62 FC | 	wrlong	local06, local10
02e64     35 00 00 FF 
02e68     0C E4 85 F1 | 	sub	objptr, ##27148
02e6c                 | LR__0169
02e6c                 | LR__0170
02e6c                 | ' 
02e6c                 | ' ' find part types 
02e6c                 | ' 
02e6c                 | ' for i=0 to k-1
02e6c     00 20 06 F6 | 	mov	local02, #0
02e70     1F 71 02 F6 | 	mov	local42, local17
02e74                 | LR__0171
02e74     38 21 52 F2 | 	cmps	local02, local42 wc
02e78     A4 07 90 3D |  if_ae	jmp	#LR__0183
02e7c     10 31 02 F6 | 	mov	local10, local02
02e80     03 30 66 F0 | 	shl	local10, #3
02e84     35 00 00 FF 
02e88     0C E4 05 F1 | 	add	objptr, ##27148
02e8c     F2 30 02 F1 | 	add	local10, objptr
02e90     10 33 02 F6 | 	mov	local11, local02
02e94     19 39 02 F6 | 	mov	local14, local11
02e98     1C 37 02 F6 | 	mov	local13, local14
02e9c     03 36 66 F0 | 	shl	local13, #3
02ea0     F2 36 02 F1 | 	add	local13, objptr
02ea4     1B 13 02 FB | 	rdlong	arg01, local13
02ea8     35 00 00 FF 
02eac     0C E4 85 F1 | 	sub	objptr, ##27148
02eb0     48 15 B0 FD | 	call	#_isseparator
02eb4     FD FA E1 F8 | 	getbyte	result1, result1, #0
02eb8     04 30 06 F1 | 	add	local10, #4
02ebc     18 FB 61 FC | 	wrlong	result1, local10
02ec0                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
02ec0     10 31 02 F6 | 	mov	local10, local02
02ec4     03 30 66 F0 | 	shl	local10, #3
02ec8     35 00 00 FF 
02ecc     0C E4 05 F1 | 	add	objptr, ##27148
02ed0     F2 30 02 F1 | 	add	local10, objptr
02ed4     04 30 06 F1 | 	add	local10, #4
02ed8     18 35 02 FB | 	rdlong	local12, local10
02edc     01 34 56 F2 | 	cmps	local12, #1 wc
02ee0     35 00 00 FF 
02ee4     0C E4 85 F1 | 	sub	objptr, ##27148
02ee8     2C 07 90 3D |  if_ae	jmp	#LR__0182
02eec     10 31 02 F6 | 	mov	local10, local02
02ef0     03 30 66 F0 | 	shl	local10, #3
02ef4     35 00 00 FF 
02ef8     0C E4 05 F1 | 	add	objptr, ##27148
02efc     F2 30 02 F1 | 	add	local10, objptr
02f00     10 33 02 F6 | 	mov	local11, local02
02f04     19 39 02 F6 | 	mov	local14, local11
02f08     1C 37 02 F6 | 	mov	local13, local14
02f0c     03 36 66 F0 | 	shl	local13, #3
02f10     F2 36 02 F1 | 	add	local13, objptr
02f14     1B 13 02 FB | 	rdlong	arg01, local13
02f18     35 00 00 FF 
02f1c     0C E4 85 F1 | 	sub	objptr, ##27148
02f20     24 0D B0 FD | 	call	#_isoperator
02f24     FD FA E1 F8 | 	getbyte	result1, result1, #0
02f28     04 30 06 F1 | 	add	local10, #4
02f2c     18 FB 61 FC | 	wrlong	result1, local10
02f30                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
02f30     10 31 02 F6 | 	mov	local10, local02
02f34     03 30 66 F0 | 	shl	local10, #3
02f38     35 00 00 FF 
02f3c     0C E4 05 F1 | 	add	objptr, ##27148
02f40     F2 30 02 F1 | 	add	local10, objptr
02f44     04 30 06 F1 | 	add	local10, #4
02f48     18 35 02 FB | 	rdlong	local12, local10
02f4c     01 34 56 F2 | 	cmps	local12, #1 wc
02f50     35 00 00 FF 
02f54     0C E4 85 F1 | 	sub	objptr, ##27148
02f58     BC 06 90 3D |  if_ae	jmp	#LR__0182
02f5c     10 31 02 F6 | 	mov	local10, local02
02f60     03 30 66 F0 | 	shl	local10, #3
02f64     35 00 00 FF 
02f68     0C E4 05 F1 | 	add	objptr, ##27148
02f6c     F2 30 02 F1 | 	add	local10, objptr
02f70     10 33 02 F6 | 	mov	local11, local02
02f74     19 39 02 F6 | 	mov	local14, local11
02f78     1C 37 02 F6 | 	mov	local13, local14
02f7c     03 36 66 F0 | 	shl	local13, #3
02f80     F2 36 02 F1 | 	add	local13, objptr
02f84     1B 13 02 FB | 	rdlong	arg01, local13
02f88     35 00 00 FF 
02f8c     0C E4 85 F1 | 	sub	objptr, ##27148
02f90                 | ' 
02f90                 | ' select case s
02f90     82 01 00 FF 
02f94     12 15 06 F6 | 	mov	arg02, ##@LR__5173
02f98     74 DB B1 FD | 	call	#__system___string_cmp
02f9c     00 FA 0D F2 | 	cmp	result1, #0 wz
02fa0     1B FA 05 A6 |  if_e	mov	result1, #27
02fa4     00 FA 05 56 |  if_ne	mov	result1, #0
02fa8     FD FA E1 F8 | 	getbyte	result1, result1, #0
02fac     04 30 06 F1 | 	add	local10, #4
02fb0     18 FB 61 FC | 	wrlong	result1, local10
02fb4                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
02fb4     10 31 02 F6 | 	mov	local10, local02
02fb8     03 30 66 F0 | 	shl	local10, #3
02fbc     35 00 00 FF 
02fc0     0C E4 05 F1 | 	add	objptr, ##27148
02fc4     F2 30 02 F1 | 	add	local10, objptr
02fc8     04 30 06 F1 | 	add	local10, #4
02fcc     18 35 02 FB | 	rdlong	local12, local10
02fd0     01 34 56 F2 | 	cmps	local12, #1 wc
02fd4     35 00 00 FF 
02fd8     0C E4 85 F1 | 	sub	objptr, ##27148
02fdc     38 06 90 3D |  if_ae	jmp	#LR__0182
02fe0     10 31 02 F6 | 	mov	local10, local02
02fe4     03 30 66 F0 | 	shl	local10, #3
02fe8     35 00 00 FF 
02fec     0C E4 05 F1 | 	add	objptr, ##27148
02ff0     F2 30 02 F1 | 	add	local10, objptr
02ff4     10 33 02 F6 | 	mov	local11, local02
02ff8     19 39 02 F6 | 	mov	local14, local11
02ffc     1C 37 02 F6 | 	mov	local13, local14
03000     03 36 66 F0 | 	shl	local13, #3
03004     F2 36 02 F1 | 	add	local13, objptr
03008     1B 13 02 FB | 	rdlong	arg01, local13
0300c     35 00 00 FF 
03010     0C E4 85 F1 | 	sub	objptr, ##27148
03014     E4 15 B0 FD | 	call	#_iscommand
03018     FD FA E1 F8 | 	getbyte	result1, result1, #0
0301c     04 30 06 F1 | 	add	local10, #4
03020     18 FB 61 FC | 	wrlong	result1, local10
03024                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03024     10 31 02 F6 | 	mov	local10, local02
03028     03 30 66 F0 | 	shl	local10, #3
0302c     35 00 00 FF 
03030     0C E4 05 F1 | 	add	objptr, ##27148
03034     F2 30 02 F1 | 	add	local10, objptr
03038     04 30 06 F1 | 	add	local10, #4
0303c     18 35 02 FB | 	rdlong	local12, local10
03040     01 34 56 F2 | 	cmps	local12, #1 wc
03044     35 00 00 FF 
03048     0C E4 85 F1 | 	sub	objptr, ##27148
0304c     C8 05 90 3D |  if_ae	jmp	#LR__0182
03050     10 31 02 F6 | 	mov	local10, local02
03054     03 30 66 F0 | 	shl	local10, #3
03058     35 00 00 FF 
0305c     0C E4 05 F1 | 	add	objptr, ##27148
03060     F2 30 02 F1 | 	add	local10, objptr
03064     10 33 02 F6 | 	mov	local11, local02
03068     19 39 02 F6 | 	mov	local14, local11
0306c     1C 37 02 F6 | 	mov	local13, local14
03070     03 36 66 F0 | 	shl	local13, #3
03074     F2 54 02 F6 | 	mov	local28, objptr
03078     F2 36 02 F1 | 	add	local13, objptr
0307c     1B 13 02 FB | 	rdlong	arg01, local13
03080     35 00 00 FF 
03084     0C E4 85 F1 | 	sub	objptr, ##27148
03088     B0 24 B0 FD | 	call	#_isfunction
0308c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03090     04 30 06 F1 | 	add	local10, #4
03094     18 FB 61 FC | 	wrlong	result1, local10
03098                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03098     10 31 02 F6 | 	mov	local10, local02
0309c     03 30 66 F0 | 	shl	local10, #3
030a0     35 00 00 FF 
030a4     0C E4 05 F1 | 	add	objptr, ##27148
030a8     F2 30 02 F1 | 	add	local10, objptr
030ac     04 30 06 F1 | 	add	local10, #4
030b0     18 35 02 FB | 	rdlong	local12, local10
030b4     01 34 56 F2 | 	cmps	local12, #1 wc
030b8     35 00 00 FF 
030bc     0C E4 85 F1 | 	sub	objptr, ##27148
030c0     54 05 90 3D |  if_ae	jmp	#LR__0182
030c4     10 31 02 F6 | 	mov	local10, local02
030c8     03 30 66 F0 | 	shl	local10, #3
030cc     35 00 00 FF 
030d0     0C E4 05 F1 | 	add	objptr, ##27148
030d4     F2 30 02 F1 | 	add	local10, objptr
030d8     10 33 02 F6 | 	mov	local11, local02
030dc     19 39 02 F6 | 	mov	local14, local11
030e0     03 38 66 F0 | 	shl	local14, #3
030e4     F2 36 02 F6 | 	mov	local13, objptr
030e8     F2 38 02 F1 | 	add	local14, objptr
030ec     1C 13 02 FB | 	rdlong	arg01, local14
030f0     35 00 00 FF 
030f4     0C E4 85 F1 | 	sub	objptr, ##27148
030f8     94 0F B0 FD | 	call	#_isnotename
030fc     04 30 06 F1 | 	add	local10, #4
03100     18 FB 61 FC | 	wrlong	result1, local10
03104                 | ' lparts(i).token=isnotename(lparts(i).part$) 
03104                 | ' if lparts(i).token>0 then 
03104     10 31 02 F6 | 	mov	local10, local02
03108     03 30 66 F0 | 	shl	local10, #3
0310c     35 00 00 FF 
03110     0C E4 05 F1 | 	add	objptr, ##27148
03114     F2 30 02 F1 | 	add	local10, objptr
03118     04 30 06 F1 | 	add	local10, #4
0311c     18 29 02 FB | 	rdlong	local06, local10
03120     01 28 56 F2 | 	cmps	local06, #1 wc
03124     35 00 00 FF 
03128     0C E4 85 F1 | 	sub	objptr, ##27148
0312c     8C 00 90 CD |  if_b	jmp	#LR__0172
03130     10 27 02 F6 | 	mov	local05, local02
03134     03 26 66 F0 | 	shl	local05, #3
03138     35 00 00 FF 
0313c     0C E4 05 F1 | 	add	objptr, ##27148
03140     F2 26 02 F1 | 	add	local05, objptr
03144     04 26 06 F1 | 	add	local05, #4
03148     13 35 02 FB | 	rdlong	local12, local05
0314c     1A 13 02 F6 | 	mov	arg01, local12
03150     35 00 00 FF 
03154     0C E4 85 F1 | 	sub	objptr, ##27148
03158     2C A0 B1 FD | 	call	#_getnoteval
0315c     FD 72 02 F6 | 	mov	local43, result1
03160     10 31 02 F6 | 	mov	local10, local02
03164     03 30 66 F0 | 	shl	local10, #3
03168     35 00 00 FF 
0316c     0C E4 05 F1 | 	add	objptr, ##27148
03170     F2 30 02 F1 | 	add	local10, objptr
03174     39 13 02 F6 | 	mov	arg01, local43
03178     35 00 00 FF 
0317c     0C E4 85 F1 | 	sub	objptr, ##27148
03180     D8 FB B1 FD | 	call	#__system__str_S
03184     18 FB 61 FC | 	wrlong	result1, local10
03188     10 25 02 F6 | 	mov	local04, local02
0318c     12 23 02 F6 | 	mov	local03, local04
03190     11 31 02 F6 | 	mov	local10, local03
03194     03 30 66 F0 | 	shl	local10, #3
03198     35 00 00 FF 
0319c     0C E4 05 F1 | 	add	objptr, ##27148
031a0     F2 30 02 F1 | 	add	local10, objptr
031a4     04 30 06 F1 | 	add	local10, #4
031a8     01 00 80 FF 
031ac     18 05 68 FC | 	wrlong	##514, local10
031b0     35 00 00 FF 
031b4     0C E4 85 F1 | 	sub	objptr, ##27148
031b8     5C 04 90 FD | 	jmp	#LR__0182
031bc                 | LR__0172
031bc     10 31 02 F6 | 	mov	local10, local02
031c0     03 30 66 F0 | 	shl	local10, #3
031c4     35 00 00 FF 
031c8     0C E4 05 F1 | 	add	objptr, ##27148
031cc     F2 30 02 F1 | 	add	local10, objptr
031d0     10 39 02 F6 | 	mov	local14, local02
031d4     03 38 66 F0 | 	shl	local14, #3
031d8     F2 38 02 F1 | 	add	local14, objptr
031dc     1C 13 02 FB | 	rdlong	arg01, local14
031e0     35 00 00 FF 
031e4     0C E4 85 F1 | 	sub	objptr, ##27148
031e8     3C 0D B0 FD | 	call	#_ischannel
031ec     04 30 06 F1 | 	add	local10, #4
031f0     18 FB 61 FC | 	wrlong	result1, local10
031f4                 | ' 
031f4                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
031f4                 | ' 
031f4                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
031f4     10 31 02 F6 | 	mov	local10, local02
031f8     03 30 66 F0 | 	shl	local10, #3
031fc     35 00 00 FF 
03200     0C E4 05 F1 | 	add	objptr, ##27148
03204     F2 30 02 F1 | 	add	local10, objptr
03208     04 30 06 F1 | 	add	local10, #4
0320c     18 29 02 FB | 	rdlong	local06, local10
03210     01 28 56 F2 | 	cmps	local06, #1 wc
03214     35 00 00 FF 
03218     0C E4 85 F1 | 	sub	objptr, ##27148
0321c     74 00 90 CD |  if_b	jmp	#LR__0173
03220     10 31 02 F6 | 	mov	local10, local02
03224     03 30 66 F0 | 	shl	local10, #3
03228     35 00 00 FF 
0322c     0C E4 05 F1 | 	add	objptr, ##27148
03230     F2 30 02 F1 | 	add	local10, objptr
03234     10 33 02 F6 | 	mov	local11, local02
03238     19 39 02 F6 | 	mov	local14, local11
0323c     03 38 66 F0 | 	shl	local14, #3
03240     F2 36 02 F6 | 	mov	local13, objptr
03244     F2 38 02 F1 | 	add	local14, objptr
03248     1C 13 02 FB | 	rdlong	arg01, local14
0324c     01 34 06 F6 | 	mov	local12, #1
03250     01 14 06 F6 | 	mov	arg02, #1
03254     35 00 00 FF 
03258     0C E4 85 F1 | 	sub	objptr, ##27148
0325c     8C F9 B1 FD | 	call	#__system__Right_S
03260     18 FB 61 FC | 	wrlong	result1, local10
03264     10 25 02 F6 | 	mov	local04, local02
03268     12 23 02 F6 | 	mov	local03, local04
0326c     11 31 02 F6 | 	mov	local10, local03
03270     03 30 66 F0 | 	shl	local10, #3
03274     35 00 00 FF 
03278     0C E4 05 F1 | 	add	objptr, ##27148
0327c     F2 30 02 F1 | 	add	local10, objptr
03280     04 30 06 F1 | 	add	local10, #4
03284     18 59 68 FC | 	wrlong	#44, local10
03288     35 00 00 FF 
0328c     0C E4 85 F1 | 	sub	objptr, ##27148
03290     84 03 90 FD | 	jmp	#LR__0182
03294                 | LR__0173
03294     10 31 02 F6 | 	mov	local10, local02
03298     03 30 66 F0 | 	shl	local10, #3
0329c     35 00 00 FF 
032a0     0C E4 05 F1 | 	add	objptr, ##27148
032a4     F2 30 02 F1 | 	add	local10, objptr
032a8     10 33 02 F6 | 	mov	local11, local02
032ac     19 39 02 F6 | 	mov	local14, local11
032b0     03 38 66 F0 | 	shl	local14, #3
032b4     F2 36 02 F6 | 	mov	local13, objptr
032b8     F2 38 02 F1 | 	add	local14, objptr
032bc     1C 13 02 FB | 	rdlong	arg01, local14
032c0     35 00 00 FF 
032c4     0C E4 85 F1 | 	sub	objptr, ##27148
032c8     44 0D B0 FD | 	call	#_isconstant
032cc     04 30 06 F1 | 	add	local10, #4
032d0     18 FB 61 FC | 	wrlong	result1, local10
032d4                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
032d4     10 31 02 F6 | 	mov	local10, local02
032d8     03 30 66 F0 | 	shl	local10, #3
032dc     35 00 00 FF 
032e0     0C E4 05 F1 | 	add	objptr, ##27148
032e4     F2 30 02 F1 | 	add	local10, objptr
032e8     04 30 06 F1 | 	add	local10, #4
032ec     18 35 02 FB | 	rdlong	local12, local10
032f0     01 34 56 F2 | 	cmps	local12, #1 wc
032f4     35 00 00 FF 
032f8     0C E4 85 F1 | 	sub	objptr, ##27148
032fc     94 00 90 CD |  if_b	jmp	#LR__0174
03300     10 31 02 F6 | 	mov	local10, local02
03304     03 30 66 F0 | 	shl	local10, #3
03308     35 00 00 FF 
0330c     0C E4 05 F1 | 	add	objptr, ##27148
03310     F2 30 02 F1 | 	add	local10, objptr
03314     10 35 02 F6 | 	mov	local12, local02
03318     1A 33 02 F6 | 	mov	local11, local12
0331c     19 39 02 F6 | 	mov	local14, local11
03320     03 38 66 F0 | 	shl	local14, #3
03324     F2 36 02 F6 | 	mov	local13, objptr
03328     F2 38 02 F1 | 	add	local14, objptr
0332c     04 38 06 F1 | 	add	local14, #4
03330     1C 13 02 FB | 	rdlong	arg01, local14
03334     04 38 86 F1 | 	sub	local14, #4
03338     35 00 00 FF 
0333c     0C E4 85 F1 | 	sub	objptr, ##27148
03340     09 13 52 F6 | 	abs	arg01, arg01 wc
03344     1F 74 C6 C9 |  if_b	decod	local44, #31
03348     00 74 06 36 |  if_ae	mov	local44, #0
0334c     48 FF B1 FD | 	call	#__system___float_fromuns
03350     3A FB 61 F5 | 	xor	result1, local44
03354     FD 12 02 F6 | 	mov	arg01, result1
03358     00 FA B1 FD | 	call	#__system__str_S
0335c     18 FB 61 FC | 	wrlong	result1, local10
03360     10 25 02 F6 | 	mov	local04, local02
03364     12 23 02 F6 | 	mov	local03, local04
03368     11 31 02 F6 | 	mov	local10, local03
0336c     03 30 66 F0 | 	shl	local10, #3
03370     35 00 00 FF 
03374     0C E4 05 F1 | 	add	objptr, ##27148
03378     F2 30 02 F1 | 	add	local10, objptr
0337c     04 30 06 F1 | 	add	local10, #4
03380     01 00 80 FF 
03384     18 03 68 FC | 	wrlong	##513, local10
03388     35 00 00 FF 
0338c     0C E4 85 F1 | 	sub	objptr, ##27148
03390     84 02 90 FD | 	jmp	#LR__0182
03394                 | LR__0174
03394     10 27 02 F6 | 	mov	local05, local02
03398     03 26 66 F0 | 	shl	local05, #3
0339c     35 00 00 FF 
033a0     0C E4 05 F1 | 	add	objptr, ##27148
033a4     F2 26 02 F1 | 	add	local05, objptr
033a8     13 13 02 FB | 	rdlong	arg01, local05
033ac     35 00 00 FF 
033b0     0C E4 85 F1 | 	sub	objptr, ##27148
033b4     98 29 B0 FD | 	call	#_isnum
033b8     FD 76 02 F6 | 	mov	local45, result1
033bc     10 27 02 F6 | 	mov	local05, local02
033c0     03 26 66 F0 | 	shl	local05, #3
033c4     35 00 00 FF 
033c8     0C E4 05 F1 | 	add	objptr, ##27148
033cc     F2 26 02 F1 | 	add	local05, objptr
033d0     13 13 02 FB | 	rdlong	arg01, local05
033d4     35 00 00 FF 
033d8     0C E4 85 F1 | 	sub	objptr, ##27148
033dc     5C 2D B0 FD | 	call	#_isint
033e0     FD 78 02 F6 | 	mov	local46, result1
033e4     10 27 02 F6 | 	mov	local05, local02
033e8     03 26 66 F0 | 	shl	local05, #3
033ec     35 00 00 FF 
033f0     0C E4 05 F1 | 	add	objptr, ##27148
033f4     F2 26 02 F1 | 	add	local05, objptr
033f8     13 13 02 FB | 	rdlong	arg01, local05
033fc     35 00 00 FF 
03400     0C E4 85 F1 | 	sub	objptr, ##27148
03404     D8 2F B0 FD | 	call	#_isdec
03408     FD 7A 02 F6 | 	mov	local47, result1
0340c                 | ' 
0340c                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
0340c                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
0340c     00 76 0E F2 | 	cmp	local45, #0 wz
03410     00 78 0E 52 |  if_ne	cmp	local46, #0 wz
03414     00 7A 0E 52 |  if_ne	cmp	local47, #0 wz
03418     34 00 90 AD |  if_e	jmp	#LR__0175
0341c     10 25 02 F6 | 	mov	local04, local02
03420     12 23 02 F6 | 	mov	local03, local04
03424     11 31 02 F6 | 	mov	local10, local03
03428     03 30 66 F0 | 	shl	local10, #3
0342c     35 00 00 FF 
03430     0C E4 05 F1 | 	add	objptr, ##27148
03434     F2 30 02 F1 | 	add	local10, objptr
03438     04 30 06 F1 | 	add	local10, #4
0343c     01 00 80 FF 
03440     18 01 68 FC | 	wrlong	##512, local10
03444     35 00 00 FF 
03448     0C E4 85 F1 | 	sub	objptr, ##27148
0344c     C8 01 90 FD | 	jmp	#LR__0182
03450                 | LR__0175
03450                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03450     00 76 0E F2 | 	cmp	local45, #0 wz
03454     00 78 0E 52 |  if_ne	cmp	local46, #0 wz
03458     3D 25 22 56 |  if_ne	not	local04, local47
0345c     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
03460     34 00 90 AD |  if_e	jmp	#LR__0176
03464     10 25 02 F6 | 	mov	local04, local02
03468     12 23 02 F6 | 	mov	local03, local04
0346c     11 31 02 F6 | 	mov	local10, local03
03470     03 30 66 F0 | 	shl	local10, #3
03474     35 00 00 FF 
03478     0C E4 05 F1 | 	add	objptr, ##27148
0347c     F2 30 02 F1 | 	add	local10, objptr
03480     04 30 06 F1 | 	add	local10, #4
03484     01 00 80 FF 
03488     18 03 68 FC | 	wrlong	##513, local10
0348c     35 00 00 FF 
03490     0C E4 85 F1 | 	sub	objptr, ##27148
03494     80 01 90 FD | 	jmp	#LR__0182
03498                 | LR__0176
03498                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03498     00 76 0E F2 | 	cmp	local45, #0 wz
0349c     3C 25 22 56 |  if_ne	not	local04, local46
034a0     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
034a4     3D 23 22 56 |  if_ne	not	local03, local47
034a8     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
034ac     34 00 90 AD |  if_e	jmp	#LR__0177
034b0     10 25 02 F6 | 	mov	local04, local02
034b4     12 23 02 F6 | 	mov	local03, local04
034b8     11 31 02 F6 | 	mov	local10, local03
034bc     03 30 66 F0 | 	shl	local10, #3
034c0     35 00 00 FF 
034c4     0C E4 05 F1 | 	add	objptr, ##27148
034c8     F2 30 02 F1 | 	add	local10, objptr
034cc     04 30 06 F1 | 	add	local10, #4
034d0     01 00 80 FF 
034d4     18 05 68 FC | 	wrlong	##514, local10
034d8     35 00 00 FF 
034dc     0C E4 85 F1 | 	sub	objptr, ##27148
034e0     34 01 90 FD | 	jmp	#LR__0182
034e4                 | LR__0177
034e4                 | ' 
034e4                 | ' if isstring(lparts(i).part$) then 
034e4     10 27 02 F6 | 	mov	local05, local02
034e8     03 26 66 F0 | 	shl	local05, #3
034ec     35 00 00 FF 
034f0     0C E4 05 F1 | 	add	objptr, ##27148
034f4     F2 26 02 F1 | 	add	local05, objptr
034f8     13 13 02 FB | 	rdlong	arg01, local05
034fc     35 00 00 FF 
03500     0C E4 85 F1 | 	sub	objptr, ##27148
03504     98 2F B0 FD | 	call	#_isstring
03508     00 FA 0D F2 | 	cmp	result1, #0 wz
0350c     A8 00 90 AD |  if_e	jmp	#LR__0180
03510     10 31 02 F6 | 	mov	local10, local02
03514     03 30 66 F0 | 	shl	local10, #3
03518     35 00 00 FF 
0351c     0C E4 05 F1 | 	add	objptr, ##27148
03520     F2 30 02 F1 | 	add	local10, objptr
03524     04 30 06 F1 | 	add	local10, #4
03528     01 00 80 FF 
0352c     18 07 68 FC | 	wrlong	##515, local10
03530     10 25 02 F6 | 	mov	local04, local02
03534     12 23 02 F6 | 	mov	local03, local04
03538     11 31 02 F6 | 	mov	local10, local03
0353c     03 30 66 F0 | 	shl	local10, #3
03540     F2 30 02 F1 | 	add	local10, objptr
03544     10 39 02 F6 | 	mov	local14, local02
03548     03 38 66 F0 | 	shl	local14, #3
0354c     F2 38 02 F1 | 	add	local14, objptr
03550     1C 29 02 FB | 	rdlong	local06, local14
03554     02 34 06 F6 | 	mov	local12, #2
03558     10 49 02 F6 | 	mov	local22, local02
0355c     24 4B 02 F6 | 	mov	local23, local22
03560     03 4A 66 F0 | 	shl	local23, #3
03564     F2 4C 02 F6 | 	mov	local24, objptr
03568     F2 4A 02 F1 | 	add	local23, objptr
0356c     25 13 02 FB | 	rdlong	arg01, local23
03570     35 00 00 FF 
03574     0C E4 85 F1 | 	sub	objptr, ##27148
03578     09 2B 02 F6 | 	mov	local07, arg01
0357c     97 06 48 FB | 	callpa	#(@LR__0179-@LR__0178)>>2,fcache_load_ptr_
03580                 | LR__0178
03580     15 FB C9 FA | 	rdbyte	result1, local07 wz
03584     01 2A 06 51 |  if_ne	add	local07, #1
03588     F4 FF 9F 5D |  if_ne	jmp	#LR__0178
0358c                 | LR__0179
0358c     09 2B 82 F1 | 	sub	local07, arg01
03590     15 37 02 F6 | 	mov	local13, local07
03594     1B 39 02 F6 | 	mov	local14, local13
03598     02 38 86 F1 | 	sub	local14, #2
0359c     1C 33 02 F6 | 	mov	local11, local14
035a0     14 13 02 F6 | 	mov	arg01, local06
035a4     1A 15 02 F6 | 	mov	arg02, local12
035a8     19 17 02 F6 | 	mov	arg03, local11
035ac     CC F6 B1 FD | 	call	#__system__Mid_S
035b0     18 FB 61 FC | 	wrlong	result1, local10
035b4     60 00 90 FD | 	jmp	#LR__0182
035b8                 | LR__0180
035b8                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
035b8     10 23 02 F6 | 	mov	local03, local02
035bc     11 27 02 F6 | 	mov	local05, local03
035c0     03 26 66 F0 | 	shl	local05, #3
035c4     35 00 00 FF 
035c8     0C E4 05 F1 | 	add	objptr, ##27148
035cc     F2 26 02 F1 | 	add	local05, objptr
035d0     13 13 02 FB | 	rdlong	arg01, local05
035d4     35 00 00 FF 
035d8     0C E4 85 F1 | 	sub	objptr, ##27148
035dc     FC 24 B0 FD | 	call	#_isname
035e0     FD 24 0A F6 | 	mov	local04, result1 wz
035e4     30 00 90 AD |  if_e	jmp	#LR__0181
035e8     10 25 02 F6 | 	mov	local04, local02
035ec     12 23 02 F6 | 	mov	local03, local04
035f0     11 31 02 F6 | 	mov	local10, local03
035f4     03 30 66 F0 | 	shl	local10, #3
035f8     35 00 00 FF 
035fc     0C E4 05 F1 | 	add	objptr, ##27148
03600     F2 30 02 F1 | 	add	local10, objptr
03604     04 30 06 F1 | 	add	local10, #4
03608     01 00 80 FF 
0360c     18 09 68 FC | 	wrlong	##516, local10
03610     35 00 00 FF 
03614     0C E4 85 F1 | 	sub	objptr, ##27148
03618                 | LR__0181
03618                 | LR__0182
03618     01 20 06 F1 | 	add	local02, #1
0361c     54 F8 9F FD | 	jmp	#LR__0171
03620                 | LR__0183
03620     1F 31 02 F6 | 	mov	local10, local17
03624     03 30 66 F0 | 	shl	local10, #3
03628     35 00 00 FF 
0362c     0C E4 05 F1 | 	add	objptr, ##27148
03630     F2 30 02 F1 | 	add	local10, objptr
03634     04 30 06 F1 | 	add	local10, #4
03638     18 FD 6B FC | 	wrlong	#510, local10
0363c     1F 31 02 F6 | 	mov	local10, local17
03640     03 30 66 F0 | 	shl	local10, #3
03644     F2 26 02 F6 | 	mov	local05, objptr
03648     F2 30 02 F1 | 	add	local10, objptr
0364c     82 01 00 FF 
03650     3F 28 06 F6 | 	mov	local06, ##@LR__5097
03654     18 29 62 FC | 	wrlong	local06, local10
03658     10 00 00 FF 
0365c     54 E4 05 F1 | 	add	objptr, ##8276
03660     F2 3E 62 FC | 	wrlong	local17, objptr
03664     45 00 00 FF 
03668     60 E4 85 F1 | 	sub	objptr, ##35424
0366c                 | ' 
0366c                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
0366c                 | ' 
0366c                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
0366c                 | '  
0366c                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
0366c     82 01 00 FF 
03670     40 30 06 F6 | 	mov	local10, ##@LR__5098
03674     37 13 02 F6 | 	mov	arg01, local41
03678     18 15 02 F6 | 	mov	arg02, local10
0367c     90 D4 B1 FD | 	call	#__system___string_cmp
03680     00 FA 0D F2 | 	cmp	result1, #0 wz
03684     FC 00 90 AD |  if_e	jmp	#LR__0184
03688     82 01 00 FF 
0368c     45 26 06 F6 | 	mov	local05, ##@LR__5099
03690     13 31 02 F6 | 	mov	local10, local05
03694     37 13 02 F6 | 	mov	arg01, local41
03698     18 15 02 F6 | 	mov	arg02, local10
0369c     70 D4 B1 FD | 	call	#__system___string_cmp
036a0     00 FA 0D F2 | 	cmp	result1, #0 wz
036a4     DC 00 90 AD |  if_e	jmp	#LR__0184
036a8     82 01 00 FF 
036ac     4A 28 06 F6 | 	mov	local06, ##@LR__5100
036b0     14 27 02 F6 | 	mov	local05, local06
036b4     37 13 02 F6 | 	mov	arg01, local41
036b8     13 15 02 F6 | 	mov	arg02, local05
036bc     50 D4 B1 FD | 	call	#__system___string_cmp
036c0     FD 30 0A F6 | 	mov	local10, result1 wz
036c4     BC 00 90 AD |  if_e	jmp	#LR__0184
036c8     82 01 00 FF 
036cc     4F 34 06 F6 | 	mov	local12, ##@LR__5101
036d0     1A 29 02 F6 | 	mov	local06, local12
036d4     37 13 02 F6 | 	mov	arg01, local41
036d8     14 15 02 F6 | 	mov	arg02, local06
036dc     30 D4 B1 FD | 	call	#__system___string_cmp
036e0     FD 26 0A F6 | 	mov	local05, result1 wz
036e4     9C 00 90 AD |  if_e	jmp	#LR__0184
036e8     82 01 00 FF 
036ec     53 32 06 F6 | 	mov	local11, ##@LR__5102
036f0     19 35 02 F6 | 	mov	local12, local11
036f4     37 13 02 F6 | 	mov	arg01, local41
036f8     1A 15 02 F6 | 	mov	arg02, local12
036fc     10 D4 B1 FD | 	call	#__system___string_cmp
03700     FD 28 0A F6 | 	mov	local06, result1 wz
03704     7C 00 90 AD |  if_e	jmp	#LR__0184
03708     82 01 00 FF 
0370c     57 38 06 F6 | 	mov	local14, ##@LR__5103
03710     1C 33 02 F6 | 	mov	local11, local14
03714     37 13 02 F6 | 	mov	arg01, local41
03718     19 15 02 F6 | 	mov	arg02, local11
0371c     F0 D3 B1 FD | 	call	#__system___string_cmp
03720     FD 34 0A F6 | 	mov	local12, result1 wz
03724     5C 00 90 AD |  if_e	jmp	#LR__0184
03728     82 01 00 FF 
0372c     5A 36 06 F6 | 	mov	local13, ##@LR__5104
03730     1B 39 02 F6 | 	mov	local14, local13
03734     37 13 02 F6 | 	mov	arg01, local41
03738     1C 15 02 F6 | 	mov	arg02, local14
0373c     D0 D3 B1 FD | 	call	#__system___string_cmp
03740     FD 32 0A F6 | 	mov	local11, result1 wz
03744     3C 00 90 AD |  if_e	jmp	#LR__0184
03748     82 01 00 FF 
0374c     5E 36 06 F6 | 	mov	local13, ##@LR__5105
03750     37 13 02 F6 | 	mov	arg01, local41
03754     1B 15 02 F6 | 	mov	arg02, local13
03758     B4 D3 B1 FD | 	call	#__system___string_cmp
0375c     FD 38 0A F6 | 	mov	local14, result1 wz
03760     20 00 90 AD |  if_e	jmp	#LR__0184
03764     82 01 00 FF 
03768     64 48 06 F6 | 	mov	local22, ##@LR__5106
0376c     24 55 02 F6 | 	mov	local28, local22
03770     37 13 02 F6 | 	mov	arg01, local41
03774     2A 15 02 F6 | 	mov	arg02, local28
03778     94 D3 B1 FD | 	call	#__system___string_cmp
0377c     FD 36 0A F6 | 	mov	local13, result1 wz
03780     84 00 90 5D |  if_ne	jmp	#LR__0185
03784                 | LR__0184
03784     33 55 02 F6 | 	mov	local28, local37
03788     01 54 06 F1 | 	add	local28, #1
0378c     2A 49 02 F6 | 	mov	local22, local28
03790     24 4B 02 F6 | 	mov	local23, local22
03794     03 4A 66 F0 | 	shl	local23, #3
03798     35 00 00 FF 
0379c     0C E4 05 F1 | 	add	objptr, ##27148
037a0     F2 4C 02 F6 | 	mov	local24, objptr
037a4     F2 4A 02 F1 | 	add	local23, objptr
037a8     04 4A 06 F1 | 	add	local23, #4
037ac     25 59 02 FB | 	rdlong	local30, local23
037b0     04 4A 86 F1 | 	sub	local23, #4
037b4     2C 57 02 F6 | 	mov	local29, local30
037b8     01 00 00 FF 
037bc     04 56 0E F2 | 	cmp	local29, ##516 wz
037c0     35 00 00 FF 
037c4     0C E4 85 F1 | 	sub	objptr, ##27148
037c8     3C 00 90 5D |  if_ne	jmp	#LR__0185
037cc     33 31 02 F6 | 	mov	local10, local37
037d0     01 30 06 F1 | 	add	local10, #1
037d4     03 30 66 F0 | 	shl	local10, #3
037d8     35 00 00 FF 
037dc     0C E4 05 F1 | 	add	objptr, ##27148
037e0     F2 26 02 F6 | 	mov	local05, objptr
037e4     F2 30 02 F1 | 	add	local10, objptr
037e8     01 00 00 FF 
037ec     03 28 06 F6 | 	mov	local06, ##515
037f0     04 30 06 F1 | 	add	local10, #4
037f4     01 00 80 FF 
037f8     18 07 68 FC | 	wrlong	##515, local10
037fc     04 30 86 F1 | 	sub	local10, #4
03800     35 00 00 FF 
03804     0C E4 85 F1 | 	sub	objptr, ##27148
03808                 | LR__0185
03808                 | ' 
03808                 | ' ' determine a type of the line and compile it
03808                 | ' 
03808                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03808     35 00 00 FF 
0380c     0C E4 05 F1 | 	add	objptr, ##27148
03810     F2 12 02 FB | 	rdlong	arg01, objptr
03814     35 00 00 FF 
03818     0C E4 85 F1 | 	sub	objptr, ##27148
0381c     C0 2B B0 FD | 	call	#_isdec
03820     00 FA 0D F2 | 	cmp	result1, #0 wz
03824     30 00 90 AD |  if_e	jmp	#LR__0186
03828     35 00 00 FF 
0382c     0C E4 05 F1 | 	add	objptr, ##27148
03830     F2 12 02 FB | 	rdlong	arg01, objptr
03834     35 00 00 FF 
03838     0C E4 85 F1 | 	sub	objptr, ##27148
0383c     00 14 06 F6 | 	mov	arg02, #0
03840     D0 04 B2 FD | 	call	#__system____builtin_atoi
03844     51 00 00 FF 
03848     C0 E5 05 F1 | 	add	objptr, ##41920
0384c     F2 FA 61 FC | 	wrlong	result1, objptr
03850     51 00 00 FF 
03854     C0 E5 85 F1 | 	sub	objptr, ##41920
03858                 | LR__0186
03858                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03858     51 00 00 FF 
0385c     C0 E5 05 F1 | 	add	objptr, ##41920
03860     F2 24 02 FB | 	rdlong	local04, objptr
03864     51 00 00 FF 
03868     C0 E5 85 F1 | 	sub	objptr, ##41920
0386c     01 24 16 F2 | 	cmp	local04, #1 wc
03870     40 00 90 CD |  if_b	jmp	#LR__0187
03874     01 3E 0E F2 | 	cmp	local17, #1 wz
03878     37 00 00 AF 
0387c     24 E4 05 A1 |  if_e	add	objptr, ##28196
03880     F2 26 02 AB |  if_e	rdlong	local05, objptr
03884     37 00 00 AF 
03888     24 E4 85 A1 |  if_e	sub	objptr, ##28196
0388c     13 31 02 A6 |  if_e	mov	local10, local05
03890     03 30 0E A2 |  if_e	cmp	local10, #3 wz
03894     1C 00 90 5D |  if_ne	jmp	#LR__0187
03898     51 00 00 FF 
0389c     C0 E5 05 F1 | 	add	objptr, ##41920
038a0     F2 12 02 FB | 	rdlong	arg01, objptr
038a4     51 00 00 FF 
038a8     C0 E5 85 F1 | 	sub	objptr, ##41920
038ac     54 2C B0 FD | 	call	#_deleteline
038b0     48 03 90 FD | 	jmp	#LR__0195
038b4                 | LR__0187
038b4                 | ' 
038b4                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
038b4     37 00 00 FF 
038b8     24 E4 05 F1 | 	add	objptr, ##28196
038bc     F2 24 0A FB | 	rdlong	local04, objptr wz
038c0     37 00 00 FF 
038c4     24 E4 85 F1 | 	sub	objptr, ##28196
038c8     37 00 00 5F 
038cc     24 E4 05 51 |  if_ne	add	objptr, ##28196
038d0     F2 30 02 5B |  if_ne	rdlong	local10, objptr
038d4     37 00 00 5F 
038d8     24 E4 85 51 |  if_ne	sub	objptr, ##28196
038dc     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
038e0     AC 00 90 5D |  if_ne	jmp	#LR__0189
038e4     35 00 00 FF 
038e8     20 E4 05 F1 | 	add	objptr, ##27168
038ec     F2 34 02 FB | 	rdlong	local12, objptr
038f0     35 00 00 FF 
038f4     20 E4 85 F1 | 	sub	objptr, ##27168
038f8     1B 34 0E F2 | 	cmp	local12, #27 wz
038fc     90 00 90 AD |  if_e	jmp	#LR__0189
03900     51 00 00 FF 
03904     C0 E5 05 F1 | 	add	objptr, ##41920
03908     F2 12 02 FB | 	rdlong	arg01, objptr
0390c     1A 00 00 FF 
03910     9C E5 85 F1 | 	sub	objptr, ##13724
03914     F2 16 02 FB | 	rdlong	arg03, objptr
03918     37 00 00 FF 
0391c     24 E4 85 F1 | 	sub	objptr, ##28196
03920     00 14 06 F6 | 	mov	arg02, #0
03924     7C 40 B0 FD | 	call	#_compile
03928     FD 1E 0A F6 | 	mov	local01, result1 wz
0392c                 | '   err=compile(linenum,0,cont) 
0392c                 | '   if err<>0 then printerror(err): goto 104
0392c     0C 00 90 AD |  if_e	jmp	#LR__0188
03930     0F 13 02 F6 | 	mov	arg01, local01
03934     18 9C B1 FD | 	call	#_printerror
03938     C0 02 90 FD | 	jmp	#LR__0195
0393c                 | LR__0188
0393c                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
0393c     51 00 00 FF 
03940     F4 E5 05 F1 | 	add	objptr, ##41972
03944     F2 12 02 FB | 	rdlong	arg01, objptr
03948     51 00 00 FF 
0394c     F4 E5 85 F1 | 	sub	objptr, ##41972
03950     82 01 00 FF 
03954     67 14 06 F6 | 	mov	arg02, ##@LR__5107
03958     B4 D1 B1 FD | 	call	#__system___string_cmp
0395c     00 FA 0D F2 | 	cmp	result1, #0 wz
03960     98 02 90 AD |  if_e	jmp	#LR__0195
03964     51 00 00 FF 
03968     F4 E5 05 F1 | 	add	objptr, ##41972
0396c     F2 24 02 FB | 	rdlong	local04, objptr
03970     1A 00 00 FF 
03974     D8 E5 85 F1 | 	sub	objptr, ##13784
03978     F2 24 62 FC | 	wrlong	local04, objptr
0397c     08 E4 05 F1 | 	add	objptr, #8
03980     F2 08 68 FC | 	wrlong	#4, objptr
03984     37 00 00 FF 
03988     24 E4 85 F1 | 	sub	objptr, ##28196
0398c     54 DD 9F FD | 	jmp	#LR__0070
03990                 | LR__0189
03990                 | '       							
03990                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
03990     37 00 00 FF 
03994     24 E4 05 F1 | 	add	objptr, ##28196
03998     F2 24 02 FB | 	rdlong	local04, objptr
0399c     37 00 00 FF 
039a0     24 E4 85 F1 | 	sub	objptr, ##28196
039a4     01 24 0E F2 | 	cmp	local04, #1 wz
039a8     37 00 00 5F 
039ac     24 E4 05 51 |  if_ne	add	objptr, ##28196
039b0     F2 30 02 5B |  if_ne	rdlong	local10, objptr
039b4     37 00 00 5F 
039b8     24 E4 85 51 |  if_ne	sub	objptr, ##28196
039bc     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
039c0     AC 00 90 5D |  if_ne	jmp	#LR__0191
039c4     35 00 00 FF 
039c8     18 E4 05 F1 | 	add	objptr, ##27160
039cc     F2 34 02 FB | 	rdlong	local12, objptr
039d0     35 00 00 FF 
039d4     18 E4 85 F1 | 	sub	objptr, ##27160
039d8     1B 34 0E F2 | 	cmp	local12, #27 wz
039dc     90 00 90 AD |  if_e	jmp	#LR__0191
039e0     51 00 00 FF 
039e4     C0 E5 05 F1 | 	add	objptr, ##41920
039e8     F2 12 02 FB | 	rdlong	arg01, objptr
039ec     1A 00 00 FF 
039f0     9C E5 85 F1 | 	sub	objptr, ##13724
039f4     F2 16 02 FB | 	rdlong	arg03, objptr
039f8     37 00 00 FF 
039fc     24 E4 85 F1 | 	sub	objptr, ##28196
03a00     00 14 06 F6 | 	mov	arg02, #0
03a04     9C 3F B0 FD | 	call	#_compile
03a08     FD 1E 0A F6 | 	mov	local01, result1 wz
03a0c                 | '   err=compile(linenum,0,cont) 
03a0c                 | '   if err<>0 then printerror(err): goto 104
03a0c     0C 00 90 AD |  if_e	jmp	#LR__0190
03a10     0F 13 02 F6 | 	mov	arg01, local01
03a14     38 9B B1 FD | 	call	#_printerror
03a18     E0 01 90 FD | 	jmp	#LR__0195
03a1c                 | LR__0190
03a1c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
03a1c     51 00 00 FF 
03a20     F4 E5 05 F1 | 	add	objptr, ##41972
03a24     F2 12 02 FB | 	rdlong	arg01, objptr
03a28     51 00 00 FF 
03a2c     F4 E5 85 F1 | 	sub	objptr, ##41972
03a30     82 01 00 FF 
03a34     68 14 06 F6 | 	mov	arg02, ##@LR__5108
03a38     D4 D0 B1 FD | 	call	#__system___string_cmp
03a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a40     B8 01 90 AD |  if_e	jmp	#LR__0195
03a44     51 00 00 FF 
03a48     F4 E5 05 F1 | 	add	objptr, ##41972
03a4c     F2 24 02 FB | 	rdlong	local04, objptr
03a50     1A 00 00 FF 
03a54     D8 E5 85 F1 | 	sub	objptr, ##13784
03a58     F2 24 62 FC | 	wrlong	local04, objptr
03a5c     08 E4 05 F1 | 	add	objptr, #8
03a60     F2 08 68 FC | 	wrlong	#4, objptr
03a64     37 00 00 FF 
03a68     24 E4 85 F1 | 	sub	objptr, ##28196
03a6c     74 DC 9F FD | 	jmp	#LR__0070
03a70                 | LR__0191
03a70                 | ' 							 
03a70                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
03a70     37 00 00 FF 
03a74     24 E4 05 F1 | 	add	objptr, ##28196
03a78     F2 24 0A FB | 	rdlong	local04, objptr wz
03a7c     37 00 00 FF 
03a80     24 E4 85 F1 | 	sub	objptr, ##28196
03a84     37 00 00 5F 
03a88     24 E4 05 51 |  if_ne	add	objptr, ##28196
03a8c     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03a90     37 00 00 5F 
03a94     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03a98     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
03a9c     35 00 00 AF 
03aa0     20 E4 05 A1 |  if_e	add	objptr, ##27168
03aa4     F2 34 02 AB |  if_e	rdlong	local12, objptr
03aa8     35 00 00 AF 
03aac     20 E4 85 A1 |  if_e	sub	objptr, ##27168
03ab0     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
03ab4     7C 00 90 5D |  if_ne	jmp	#LR__0192
03ab8     51 00 00 FF 
03abc     C0 E5 05 F1 | 	add	objptr, ##41920
03ac0     F2 12 02 FB | 	rdlong	arg01, objptr
03ac4     1A 00 00 FF 
03ac8     9C E5 85 F1 | 	sub	objptr, ##13724
03acc     F2 16 02 FB | 	rdlong	arg03, objptr
03ad0     37 00 00 FF 
03ad4     24 E4 85 F1 | 	sub	objptr, ##28196
03ad8     00 14 06 F6 | 	mov	arg02, #0
03adc     88 3F B0 FD | 	call	#_compile_assign
03ae0                 | '   compile_assign(linenum,0,cont)
03ae0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
03ae0     51 00 00 FF 
03ae4     F4 E5 05 F1 | 	add	objptr, ##41972
03ae8     F2 12 02 FB | 	rdlong	arg01, objptr
03aec     51 00 00 FF 
03af0     F4 E5 85 F1 | 	sub	objptr, ##41972
03af4     82 01 00 FF 
03af8     69 14 06 F6 | 	mov	arg02, ##@LR__5109
03afc     10 D0 B1 FD | 	call	#__system___string_cmp
03b00     00 FA 0D F2 | 	cmp	result1, #0 wz
03b04     F4 00 90 AD |  if_e	jmp	#LR__0195
03b08     51 00 00 FF 
03b0c     F4 E5 05 F1 | 	add	objptr, ##41972
03b10     F2 24 02 FB | 	rdlong	local04, objptr
03b14     1A 00 00 FF 
03b18     D8 E5 85 F1 | 	sub	objptr, ##13784
03b1c     F2 24 62 FC | 	wrlong	local04, objptr
03b20     08 E4 05 F1 | 	add	objptr, #8
03b24     F2 08 68 FC | 	wrlong	#4, objptr
03b28     37 00 00 FF 
03b2c     24 E4 85 F1 | 	sub	objptr, ##28196
03b30     B0 DB 9F FD | 	jmp	#LR__0070
03b34                 | LR__0192
03b34                 | '     							 
03b34                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
03b34     37 00 00 FF 
03b38     24 E4 05 F1 | 	add	objptr, ##28196
03b3c     F2 24 02 FB | 	rdlong	local04, objptr
03b40     37 00 00 FF 
03b44     24 E4 85 F1 | 	sub	objptr, ##28196
03b48     01 24 0E F2 | 	cmp	local04, #1 wz
03b4c     37 00 00 5F 
03b50     24 E4 05 51 |  if_ne	add	objptr, ##28196
03b54     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03b58     37 00 00 5F 
03b5c     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03b60     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
03b64     35 00 00 AF 
03b68     18 E4 05 A1 |  if_e	add	objptr, ##27160
03b6c     F2 34 02 AB |  if_e	rdlong	local12, objptr
03b70     35 00 00 AF 
03b74     18 E4 85 A1 |  if_e	sub	objptr, ##27160
03b78     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
03b7c     7C 00 90 5D |  if_ne	jmp	#LR__0194
03b80     51 00 00 FF 
03b84     C0 E5 05 F1 | 	add	objptr, ##41920
03b88     F2 12 02 FB | 	rdlong	arg01, objptr
03b8c     1A 00 00 FF 
03b90     9C E5 85 F1 | 	sub	objptr, ##13724
03b94     F2 16 02 FB | 	rdlong	arg03, objptr
03b98     37 00 00 FF 
03b9c     24 E4 85 F1 | 	sub	objptr, ##28196
03ba0     00 14 06 F6 | 	mov	arg02, #0
03ba4     C0 3E B0 FD | 	call	#_compile_assign
03ba8                 | '   compile_assign(linenum,0,cont) 
03ba8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
03ba8     51 00 00 FF 
03bac     F4 E5 05 F1 | 	add	objptr, ##41972
03bb0     F2 12 02 FB | 	rdlong	arg01, objptr
03bb4     51 00 00 FF 
03bb8     F4 E5 85 F1 | 	sub	objptr, ##41972
03bbc     82 01 00 FF 
03bc0     6A 14 06 F6 | 	mov	arg02, ##@LR__5110
03bc4     48 CF B1 FD | 	call	#__system___string_cmp
03bc8     00 FA 4D F2 | 	cmps	result1, #0 wz
03bcc     2C 00 90 AD |  if_e	jmp	#LR__0193
03bd0     51 00 00 FF 
03bd4     F4 E5 05 F1 | 	add	objptr, ##41972
03bd8     F2 24 02 FB | 	rdlong	local04, objptr
03bdc     1A 00 00 FF 
03be0     D8 E5 85 F1 | 	sub	objptr, ##13784
03be4     F2 24 62 FC | 	wrlong	local04, objptr
03be8     08 E4 05 F1 | 	add	objptr, #8
03bec     F2 08 68 FC | 	wrlong	#4, objptr
03bf0     37 00 00 FF 
03bf4     24 E4 85 F1 | 	sub	objptr, ##28196
03bf8     E8 DA 9F FD | 	jmp	#LR__0070
03bfc                 | LR__0193
03bfc                 | LR__0194
03bfc                 | LR__0195
03bfc                 | ' 
03bfc                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
03bfc     51 00 00 FF 
03c00     C0 E5 05 F1 | 	add	objptr, ##41920
03c04     F2 24 0A FB | 	rdlong	local04, objptr wz
03c08     51 00 00 FF 
03c0c     C0 E5 85 F1 | 	sub	objptr, ##41920
03c10     28 00 90 5D |  if_ne	jmp	#LR__0197
03c14     02 12 06 F6 | 	mov	arg01, #2
03c18     38 7D B0 FD | 	call	#_execute_line
03c1c                 | LR__0196
03c1c     82 01 00 FF 
03c20     6B 12 06 F6 | 	mov	arg01, ##@LR__5111
03c24                 | ' 
03c24                 | ' write(text)
03c24     A4 B9 B1 FD | 	call	#_hg010b_spin2_write
03c28                 | ' crlf
03c28     A0 BE B1 FD | 	call	#_hg010b_spin2_crlf
03c2c     82 01 00 FF 
03c30     6C 12 06 F6 | 	mov	arg01, ##@LR__5112
03c34                 | ' 
03c34                 | ' write(text)
03c34     94 B9 B1 FD | 	call	#_hg010b_spin2_write
03c38                 | ' crlf
03c38     90 BE B1 FD | 	call	#_hg010b_spin2_crlf
03c3c                 | LR__0197
03c3c     A7 F0 03 F6 | 	mov	ptra, fp
03c40     B2 00 A0 FD | 	call	#popregs_
03c44                 | _interpret_ret
03c44     2D 00 64 FD | 	ret
03c48                 | 
03c48                 | ' 
03c48                 | ' '---------------------------------------------------------------------------------------------------------------------
03c48                 | ' '
03c48                 | ' '                          END OF TOKENIZER MAIN CODE
03c48                 | ' '
03c48                 | ' '---------------------------------------------------------------------------------------------------------------------
03c48                 | ' 
03c48                 | ' '---------------------------------------------------------------------------------------------------------------------
03c48                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
03c48                 | ' '---------------------------------------------------------------------------------------------------------------------
03c48                 | ' 
03c48                 | ' ' Check if the part is an operator, return a token or 0 if not found
03c48                 | ' 
03c48                 | ' function isoperator(s as string) as ubyte
03c48                 | _isoperator
03c48     01 4A 05 F6 | 	mov	COUNT_, #1
03c4c     A8 00 A0 FD | 	call	#pushregs_
03c50                 | ' 
03c50                 | ' select case s
03c50     09 1F 02 F6 | 	mov	local01, arg01
03c54     82 01 00 FF 
03c58     72 14 06 F6 | 	mov	arg02, ##@LR__5113
03c5c     0F 13 02 F6 | 	mov	arg01, local01
03c60     AC CE B1 FD | 	call	#__system___string_cmp
03c64     00 FA 0D F2 | 	cmp	result1, #0 wz
03c68     FC 01 90 AD |  if_e	jmp	#LR__0200
03c6c     82 01 00 FF 
03c70     74 14 06 F6 | 	mov	arg02, ##@LR__5114
03c74     0F 13 02 F6 | 	mov	arg01, local01
03c78     94 CE B1 FD | 	call	#__system___string_cmp
03c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c80     EC 01 90 AD |  if_e	jmp	#LR__0201
03c84     82 01 00 FF 
03c88     76 14 06 F6 | 	mov	arg02, ##@LR__5115
03c8c     0F 13 02 F6 | 	mov	arg01, local01
03c90     7C CE B1 FD | 	call	#__system___string_cmp
03c94     00 FA 0D F2 | 	cmp	result1, #0 wz
03c98     DC 01 90 AD |  if_e	jmp	#LR__0202
03c9c     82 01 00 FF 
03ca0     79 14 06 F6 | 	mov	arg02, ##@LR__5116
03ca4     0F 13 02 F6 | 	mov	arg01, local01
03ca8     64 CE B1 FD | 	call	#__system___string_cmp
03cac     00 FA 0D F2 | 	cmp	result1, #0 wz
03cb0     CC 01 90 AD |  if_e	jmp	#LR__0203
03cb4     82 01 00 FF 
03cb8     7D 14 06 F6 | 	mov	arg02, ##@LR__5117
03cbc     0F 13 02 F6 | 	mov	arg01, local01
03cc0     4C CE B1 FD | 	call	#__system___string_cmp
03cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc8     BC 01 90 AD |  if_e	jmp	#LR__0204
03ccc     82 01 00 FF 
03cd0     7F 14 06 F6 | 	mov	arg02, ##@LR__5118
03cd4     0F 13 02 F6 | 	mov	arg01, local01
03cd8     34 CE B1 FD | 	call	#__system___string_cmp
03cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ce0     AC 01 90 AD |  if_e	jmp	#LR__0205
03ce4     82 01 00 FF 
03ce8     81 14 06 F6 | 	mov	arg02, ##@LR__5119
03cec     0F 13 02 F6 | 	mov	arg01, local01
03cf0     1C CE B1 FD | 	call	#__system___string_cmp
03cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cf8     9C 01 90 AD |  if_e	jmp	#LR__0206
03cfc     82 01 00 FF 
03d00     85 14 06 F6 | 	mov	arg02, ##@LR__5120
03d04     0F 13 02 F6 | 	mov	arg01, local01
03d08     04 CE B1 FD | 	call	#__system___string_cmp
03d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d10     8C 01 90 AD |  if_e	jmp	#LR__0207
03d14     82 01 00 FF 
03d18     89 14 06 F6 | 	mov	arg02, ##@LR__5121
03d1c     0F 13 02 F6 | 	mov	arg01, local01
03d20     EC CD B1 FD | 	call	#__system___string_cmp
03d24     00 FA 0D F2 | 	cmp	result1, #0 wz
03d28     7C 01 90 AD |  if_e	jmp	#LR__0208
03d2c     82 01 00 FF 
03d30     8D 14 06 F6 | 	mov	arg02, ##@LR__5122
03d34     0F 13 02 F6 | 	mov	arg01, local01
03d38     D4 CD B1 FD | 	call	#__system___string_cmp
03d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d40     6C 01 90 AD |  if_e	jmp	#LR__0209
03d44     82 01 00 FF 
03d48     91 14 06 F6 | 	mov	arg02, ##@LR__5123
03d4c     0F 13 02 F6 | 	mov	arg01, local01
03d50     BC CD B1 FD | 	call	#__system___string_cmp
03d54     00 FA 0D F2 | 	cmp	result1, #0 wz
03d58     5C 01 90 AD |  if_e	jmp	#LR__0210
03d5c     82 01 00 FF 
03d60     95 14 06 F6 | 	mov	arg02, ##@LR__5124
03d64     0F 13 02 F6 | 	mov	arg01, local01
03d68     A4 CD B1 FD | 	call	#__system___string_cmp
03d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d70     4C 01 90 AD |  if_e	jmp	#LR__0211
03d74     82 01 00 FF 
03d78     97 14 06 F6 | 	mov	arg02, ##@LR__5125
03d7c     0F 13 02 F6 | 	mov	arg01, local01
03d80     8C CD B1 FD | 	call	#__system___string_cmp
03d84     00 FA 0D F2 | 	cmp	result1, #0 wz
03d88     3C 01 90 AD |  if_e	jmp	#LR__0212
03d8c     82 01 00 FF 
03d90     9B 14 06 F6 | 	mov	arg02, ##@LR__5126
03d94     0F 13 02 F6 | 	mov	arg01, local01
03d98     74 CD B1 FD | 	call	#__system___string_cmp
03d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03da0     2C 01 90 AD |  if_e	jmp	#LR__0213
03da4     82 01 00 FF 
03da8     9D 14 06 F6 | 	mov	arg02, ##@LR__5127
03dac     0F 13 02 F6 | 	mov	arg01, local01
03db0     5C CD B1 FD | 	call	#__system___string_cmp
03db4     00 FA 0D F2 | 	cmp	result1, #0 wz
03db8     1C 01 90 AD |  if_e	jmp	#LR__0214
03dbc     82 01 00 FF 
03dc0     9F 14 06 F6 | 	mov	arg02, ##@LR__5128
03dc4     0F 13 02 F6 | 	mov	arg01, local01
03dc8     44 CD B1 FD | 	call	#__system___string_cmp
03dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd0     0C 01 90 AD |  if_e	jmp	#LR__0215
03dd4     82 01 00 FF 
03dd8     A2 14 06 F6 | 	mov	arg02, ##@LR__5129
03ddc     0F 13 02 F6 | 	mov	arg01, local01
03de0     2C CD B1 FD | 	call	#__system___string_cmp
03de4     00 FA 0D F2 | 	cmp	result1, #0 wz
03de8     FC 00 90 AD |  if_e	jmp	#LR__0216
03dec     82 01 00 FF 
03df0     A5 14 06 F6 | 	mov	arg02, ##@LR__5130
03df4     0F 13 02 F6 | 	mov	arg01, local01
03df8     14 CD B1 FD | 	call	#__system___string_cmp
03dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03e00     EC 00 90 AD |  if_e	jmp	#LR__0217
03e04     82 01 00 FF 
03e08     A7 14 06 F6 | 	mov	arg02, ##@LR__5131
03e0c     0F 13 02 F6 | 	mov	arg01, local01
03e10     FC CC B1 FD | 	call	#__system___string_cmp
03e14     00 FA 0D F2 | 	cmp	result1, #0 wz
03e18     DC 00 90 AD |  if_e	jmp	#LR__0218
03e1c     82 01 00 FF 
03e20     A9 14 06 F6 | 	mov	arg02, ##@LR__5132
03e24     0F 13 02 F6 | 	mov	arg01, local01
03e28     E4 CC B1 FD | 	call	#__system___string_cmp
03e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e30     CC 00 90 AD |  if_e	jmp	#LR__0219
03e34     82 01 00 FF 
03e38     AC 14 06 F6 | 	mov	arg02, ##@LR__5133
03e3c     0F 13 02 F6 | 	mov	arg01, local01
03e40     CC CC B1 FD | 	call	#__system___string_cmp
03e44     00 FA 0D F2 | 	cmp	result1, #0 wz
03e48     BC 00 90 AD |  if_e	jmp	#LR__0220
03e4c     82 01 00 FF 
03e50     AF 14 06 F6 | 	mov	arg02, ##@LR__5134
03e54     0F 13 02 F6 | 	mov	arg01, local01
03e58     B4 CC B1 FD | 	call	#__system___string_cmp
03e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e60     AC 00 90 AD |  if_e	jmp	#LR__0221
03e64     B0 00 90 FD | 	jmp	#LR__0222
03e68                 | LR__0200
03e68     01 FA 05 F6 | 	mov	result1, #1
03e6c     AC 00 90 FD | 	jmp	#LR__0223
03e70                 | LR__0201
03e70     02 FA 05 F6 | 	mov	result1, #2
03e74     A4 00 90 FD | 	jmp	#LR__0223
03e78                 | LR__0202
03e78     03 FA 05 F6 | 	mov	result1, #3
03e7c     9C 00 90 FD | 	jmp	#LR__0223
03e80                 | LR__0203
03e80     04 FA 05 F6 | 	mov	result1, #4
03e84     94 00 90 FD | 	jmp	#LR__0223
03e88                 | LR__0204
03e88     05 FA 05 F6 | 	mov	result1, #5
03e8c     8C 00 90 FD | 	jmp	#LR__0223
03e90                 | LR__0205
03e90     06 FA 05 F6 | 	mov	result1, #6
03e94     84 00 90 FD | 	jmp	#LR__0223
03e98                 | LR__0206
03e98     07 FA 05 F6 | 	mov	result1, #7
03e9c     7C 00 90 FD | 	jmp	#LR__0223
03ea0                 | LR__0207
03ea0     08 FA 05 F6 | 	mov	result1, #8
03ea4     74 00 90 FD | 	jmp	#LR__0223
03ea8                 | LR__0208
03ea8     09 FA 05 F6 | 	mov	result1, #9
03eac     6C 00 90 FD | 	jmp	#LR__0223
03eb0                 | LR__0209
03eb0     0A FA 05 F6 | 	mov	result1, #10
03eb4     64 00 90 FD | 	jmp	#LR__0223
03eb8                 | LR__0210
03eb8     0B FA 05 F6 | 	mov	result1, #11
03ebc     5C 00 90 FD | 	jmp	#LR__0223
03ec0                 | LR__0211
03ec0     0C FA 05 F6 | 	mov	result1, #12
03ec4     54 00 90 FD | 	jmp	#LR__0223
03ec8                 | LR__0212
03ec8     0D FA 05 F6 | 	mov	result1, #13
03ecc     4C 00 90 FD | 	jmp	#LR__0223
03ed0                 | LR__0213
03ed0     0E FA 05 F6 | 	mov	result1, #14
03ed4     44 00 90 FD | 	jmp	#LR__0223
03ed8                 | LR__0214
03ed8     1B FA 05 F6 | 	mov	result1, #27
03edc     3C 00 90 FD | 	jmp	#LR__0223
03ee0                 | LR__0215
03ee0     27 FA 05 F6 | 	mov	result1, #39
03ee4     34 00 90 FD | 	jmp	#LR__0223
03ee8                 | LR__0216
03ee8     26 FA 05 F6 | 	mov	result1, #38
03eec     2C 00 90 FD | 	jmp	#LR__0223
03ef0                 | LR__0217
03ef0     10 FA 05 F6 | 	mov	result1, #16
03ef4     24 00 90 FD | 	jmp	#LR__0223
03ef8                 | LR__0218
03ef8     0F FA 05 F6 | 	mov	result1, #15
03efc     1C 00 90 FD | 	jmp	#LR__0223
03f00                 | LR__0219
03f00     2A FA 05 F6 | 	mov	result1, #42
03f04     14 00 90 FD | 	jmp	#LR__0223
03f08                 | LR__0220
03f08     28 FA 05 F6 | 	mov	result1, #40
03f0c     0C 00 90 FD | 	jmp	#LR__0223
03f10                 | LR__0221
03f10     29 FA 05 F6 | 	mov	result1, #41
03f14     04 00 90 FD | 	jmp	#LR__0223
03f18                 | LR__0222
03f18     00 FA 05 F6 | 	mov	result1, #0
03f1c                 | LR__0223
03f1c     A7 F0 03 F6 | 	mov	ptra, fp
03f20     B2 00 A0 FD | 	call	#popregs_
03f24                 | _isoperator_ret
03f24     2D 00 64 FD | 	ret
03f28                 | 
03f28                 | ' 
03f28                 | ' ' Check if the part is a channel#, return a token or 0 if not found
03f28                 | ' 
03f28                 | ' function ischannel(s as string) as ulong
03f28                 | _ischannel
03f28     02 4A 05 F6 | 	mov	COUNT_, #2
03f2c     A8 00 A0 FD | 	call	#pushregs_
03f30                 | ' if left$(s,1)<>"#" then return 0
03f30     09 1F 02 F6 | 	mov	local01, arg01
03f34     01 14 06 F6 | 	mov	arg02, #1
03f38     28 EC B1 FD | 	call	#__system__Left_S
03f3c     FD 12 02 F6 | 	mov	arg01, result1
03f40     82 01 00 FF 
03f44     B2 14 06 F6 | 	mov	arg02, ##@LR__5135
03f48     C4 CB B1 FD | 	call	#__system___string_cmp
03f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f50     00 FA 05 56 |  if_ne	mov	result1, #0
03f54     AC 00 90 5D |  if_ne	jmp	#LR__0234
03f58                 | ' if len(s)<>2 then return 0
03f58     0F 13 02 F6 | 	mov	arg01, local01
03f5c     09 21 02 F6 | 	mov	local02, arg01
03f60     97 06 48 FB | 	callpa	#(@LR__0231-@LR__0230)>>2,fcache_load_ptr_
03f64                 | LR__0230
03f64     10 FB C9 FA | 	rdbyte	result1, local02 wz
03f68     01 20 06 51 |  if_ne	add	local02, #1
03f6c     F4 FF 9F 5D |  if_ne	jmp	#LR__0230
03f70                 | LR__0231
03f70     09 21 82 F1 | 	sub	local02, arg01
03f74     10 FB 01 F6 | 	mov	result1, local02
03f78     02 FA 0D F2 | 	cmp	result1, #2 wz
03f7c     00 FA 05 56 |  if_ne	mov	result1, #0
03f80     80 00 90 5D |  if_ne	jmp	#LR__0234
03f84                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
03f84     0F 13 02 F6 | 	mov	arg01, local01
03f88     01 14 06 F6 | 	mov	arg02, #1
03f8c     5C EC B1 FD | 	call	#__system__Right_S
03f90     FD 12 02 F6 | 	mov	arg01, result1
03f94     82 01 00 FF 
03f98     B4 14 06 F6 | 	mov	arg02, ##@LR__5136
03f9c     70 CB B1 FD | 	call	#__system___string_cmp
03fa0     00 FA 55 F2 | 	cmps	result1, #0 wc
03fa4     24 00 90 CD |  if_b	jmp	#LR__0232
03fa8     0F 13 02 F6 | 	mov	arg01, local01
03fac     01 14 06 F6 | 	mov	arg02, #1
03fb0     38 EC B1 FD | 	call	#__system__Right_S
03fb4     FD 12 02 F6 | 	mov	arg01, result1
03fb8     82 01 00 FF 
03fbc     B6 14 06 F6 | 	mov	arg02, ##@LR__5137
03fc0     4C CB B1 FD | 	call	#__system___string_cmp
03fc4     01 FA 55 F2 | 	cmps	result1, #1 wc
03fc8     08 00 90 CD |  if_b	jmp	#LR__0233
03fcc                 | LR__0232
03fcc     00 FA 05 F6 | 	mov	result1, #0
03fd0     30 00 90 FD | 	jmp	#LR__0234
03fd4                 | LR__0233
03fd4                 | ' return token_channel+val(right$(s,1))
03fd4     0F 13 02 F6 | 	mov	arg01, local01
03fd8     01 14 06 F6 | 	mov	arg02, #1
03fdc     0C EC B1 FD | 	call	#__system__Right_S
03fe0     FD 12 02 F6 | 	mov	arg01, result1
03fe4     9C FE B1 FD | 	call	#__system____builtin_atof
03fe8     FD 14 02 F6 | 	mov	arg02, result1
03fec     00 18 21 FF 
03ff0     00 12 06 F6 | 	mov	arg01, ##1110441984
03ff4     D4 F2 B1 FD | 	call	#__system___float_add
03ff8     FD 12 02 F6 | 	mov	arg01, result1
03ffc     00 14 06 F6 | 	mov	arg02, #0
04000     60 FB B1 FD | 	call	#__system___float_tointeger
04004                 | LR__0234
04004     A7 F0 03 F6 | 	mov	ptra, fp
04008     B2 00 A0 FD | 	call	#popregs_
0400c                 | _ischannel_ret
0400c     2D 00 64 FD | 	ret
04010                 | 
04010                 | ' 
04010                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
04010                 | ' ' todo: add spin2/pasm constants for pin control
04010                 | ' 
04010                 | ' function isconstant(s as string) as integer
04010                 | _isconstant
04010     01 4A 05 F6 | 	mov	COUNT_, #1
04014     A8 00 A0 FD | 	call	#pushregs_
04018                 | ' 
04018                 | ' select case s
04018     09 1F 02 F6 | 	mov	local01, arg01
0401c     82 01 00 FF 
04020     B8 14 06 F6 | 	mov	arg02, ##@LR__5138
04024     0F 13 02 F6 | 	mov	arg01, local01
04028     E4 CA B1 FD | 	call	#__system___string_cmp
0402c     00 FA 0D F2 | 	cmp	result1, #0 wz
04030     34 00 90 AD |  if_e	jmp	#LR__0240
04034     82 01 00 FF 
04038     BE 14 06 F6 | 	mov	arg02, ##@LR__5139
0403c     0F 13 02 F6 | 	mov	arg01, local01
04040     CC CA B1 FD | 	call	#__system___string_cmp
04044     00 FA 0D F2 | 	cmp	result1, #0 wz
04048     24 00 90 AD |  if_e	jmp	#LR__0241
0404c     82 01 00 FF 
04050     C5 14 06 F6 | 	mov	arg02, ##@LR__5140
04054     0F 13 02 F6 | 	mov	arg01, local01
04058     B4 CA B1 FD | 	call	#__system___string_cmp
0405c     00 FA 0D F2 | 	cmp	result1, #0 wz
04060     14 00 90 AD |  if_e	jmp	#LR__0242
04064     18 00 90 FD | 	jmp	#LR__0243
04068                 | LR__0240
04068     01 FA 05 F6 | 	mov	result1, #1
0406c     14 00 90 FD | 	jmp	#LR__0244
04070                 | LR__0241
04070     02 FA 05 F6 | 	mov	result1, #2
04074     0C 00 90 FD | 	jmp	#LR__0244
04078                 | LR__0242
04078     04 FA 05 F6 | 	mov	result1, #4
0407c     04 00 90 FD | 	jmp	#LR__0244
04080                 | LR__0243
04080     00 FA 05 F6 | 	mov	result1, #0
04084                 | LR__0244
04084     A7 F0 03 F6 | 	mov	ptra, fp
04088     B2 00 A0 FD | 	call	#popregs_
0408c                 | _isconstant_ret
0408c     2D 00 64 FD | 	ret
04090                 | 
04090                 | ' 
04090                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
04090                 | ' 
04090                 | ' function isnotename(s as string) as ulong
04090                 | _isnotename
04090     07 4A 05 F6 | 	mov	COUNT_, #7
04094     A8 00 A0 FD | 	call	#pushregs_
04098                 | ' if left$(s,1)<>"#" then return 0
04098     09 1F 02 F6 | 	mov	local01, arg01
0409c     01 14 06 F6 | 	mov	arg02, #1
040a0     C0 EA B1 FD | 	call	#__system__Left_S
040a4     FD 12 02 F6 | 	mov	arg01, result1
040a8     82 01 00 FF 
040ac     CD 14 06 F6 | 	mov	arg02, ##@LR__5141
040b0     5C CA B1 FD | 	call	#__system___string_cmp
040b4     00 FA 0D F2 | 	cmp	result1, #0 wz
040b8     00 FA 05 56 |  if_ne	mov	result1, #0
040bc     30 03 90 5D |  if_ne	jmp	#LR__0273
040c0                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
040c0     0F 13 02 F6 | 	mov	arg01, local01
040c4     03 14 06 F6 | 	mov	arg02, #3
040c8     01 16 06 F6 | 	mov	arg03, #1
040cc     AC EB B1 FD | 	call	#__system__Mid_S
040d0     FD 12 02 F6 | 	mov	arg01, result1
040d4     82 01 00 FF 
040d8     CF 14 06 F6 | 	mov	arg02, ##@LR__5142
040dc     30 CA B1 FD | 	call	#__system___string_cmp
040e0     00 FA 0D F2 | 	cmp	result1, #0 wz
040e4     18 00 90 5D |  if_ne	jmp	#LR__0250
040e8     0F 13 02 F6 | 	mov	arg01, local01
040ec     02 14 06 F6 | 	mov	arg02, #2
040f0     02 16 06 F6 | 	mov	arg03, #2
040f4     84 EB B1 FD | 	call	#__system__Mid_S
040f8     FD 20 02 F6 | 	mov	local02, result1
040fc     14 00 90 FD | 	jmp	#LR__0251
04100                 | LR__0250
04100     0F 13 02 F6 | 	mov	arg01, local01
04104     02 14 06 F6 | 	mov	arg02, #2
04108     01 16 06 F6 | 	mov	arg03, #1
0410c     6C EB B1 FD | 	call	#__system__Mid_S
04110     FD 20 02 F6 | 	mov	local02, result1
04114                 | LR__0251
04114                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
04114     0F 13 02 F6 | 	mov	arg01, local01
04118     09 23 02 F6 | 	mov	local03, arg01
0411c     97 06 48 FB | 	callpa	#(@LR__0253-@LR__0252)>>2,fcache_load_ptr_
04120                 | LR__0252
04120     11 FB C9 FA | 	rdbyte	result1, local03 wz
04124     01 22 06 51 |  if_ne	add	local03, #1
04128     F4 FF 9F 5D |  if_ne	jmp	#LR__0252
0412c                 | LR__0253
0412c     09 23 82 F1 | 	sub	local03, arg01
04130     11 15 02 F6 | 	mov	arg02, local03
04134     01 14 86 F1 | 	sub	arg02, #1
04138     0F 13 02 F6 | 	mov	arg01, local01
0413c     01 16 06 F6 | 	mov	arg03, #1
04140     38 EB B1 FD | 	call	#__system__Mid_S
04144     FD 12 02 F6 | 	mov	arg01, result1
04148     82 01 00 FF 
0414c     D1 14 06 F6 | 	mov	arg02, ##@LR__5143
04150     BC C9 B1 FD | 	call	#__system___string_cmp
04154     00 FA 0D F2 | 	cmp	result1, #0 wz
04158     28 00 90 AD |  if_e	jmp	#LR__0254
0415c     0F 13 02 F6 | 	mov	arg01, local01
04160     01 14 06 F6 | 	mov	arg02, #1
04164     84 EA B1 FD | 	call	#__system__Right_S
04168     FD 12 02 F6 | 	mov	arg01, result1
0416c     14 FD B1 FD | 	call	#__system____builtin_atof
04170     FD 12 02 F6 | 	mov	arg01, result1
04174     00 14 06 F6 | 	mov	arg02, #0
04178     E8 F9 B1 FD | 	call	#__system___float_tointeger
0417c     FD 24 02 F6 | 	mov	local04, result1
04180     34 00 90 FD | 	jmp	#LR__0255
04184                 | LR__0254
04184     0F 13 02 F6 | 	mov	arg01, local01
04188     01 14 06 F6 | 	mov	arg02, #1
0418c     5C EA B1 FD | 	call	#__system__Right_S
04190     FD 12 02 F6 | 	mov	arg01, result1
04194     EC FC B1 FD | 	call	#__system____builtin_atof
04198     FD 14 02 F6 | 	mov	arg02, result1
0419c     00 C0 5F FF 
041a0     00 12 06 F6 | 	mov	arg01, ##-1082130432
041a4     F4 F4 B1 FD | 	call	#__system___float_mul
041a8     FD 12 02 F6 | 	mov	arg01, result1
041ac     00 14 06 F6 | 	mov	arg02, #0
041b0     B0 F9 B1 FD | 	call	#__system___float_tointeger
041b4     FD 24 02 F6 | 	mov	local04, result1
041b8                 | LR__0255
041b8                 | ' 
041b8                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
041b8     00 24 0E F2 | 	cmp	local04, #0 wz
041bc     24 00 90 5D |  if_ne	jmp	#LR__0256
041c0     0F 13 02 F6 | 	mov	arg01, local01
041c4     01 14 06 F6 | 	mov	arg02, #1
041c8     20 EA B1 FD | 	call	#__system__Right_S
041cc     FD 12 02 F6 | 	mov	arg01, result1
041d0     82 01 00 FF 
041d4     D3 14 06 F6 | 	mov	arg02, ##@LR__5144
041d8     34 C9 B1 FD | 	call	#__system___string_cmp
041dc     00 FA 0D F2 | 	cmp	result1, #0 wz
041e0     04 24 06 56 |  if_ne	mov	local04, #4
041e4                 | LR__0256
041e4                 | ' 
041e4                 | ' select case s1
041e4     10 27 02 F6 | 	mov	local05, local02
041e8     82 01 00 FF 
041ec     D5 14 06 F6 | 	mov	arg02, ##@LR__5145
041f0     13 13 02 F6 | 	mov	arg01, local05
041f4     18 C9 B1 FD | 	call	#__system___string_cmp
041f8     00 FA 0D F2 | 	cmp	result1, #0 wz
041fc     24 01 90 AD |  if_e	jmp	#LR__0257
04200     82 01 00 FF 
04204     D7 14 06 F6 | 	mov	arg02, ##@LR__5146
04208     13 13 02 F6 | 	mov	arg01, local05
0420c     00 C9 B1 FD | 	call	#__system___string_cmp
04210     00 FA 0D F2 | 	cmp	result1, #0 wz
04214     18 01 90 AD |  if_e	jmp	#LR__0258
04218     82 01 00 FF 
0421c     DA 14 06 F6 | 	mov	arg02, ##@LR__5147
04220     13 13 02 F6 | 	mov	arg01, local05
04224     E8 C8 B1 FD | 	call	#__system___string_cmp
04228     00 FA 0D F2 | 	cmp	result1, #0 wz
0422c     0C 01 90 AD |  if_e	jmp	#LR__0259
04230     82 01 00 FF 
04234     DC 14 06 F6 | 	mov	arg02, ##@LR__5148
04238     13 13 02 F6 | 	mov	arg01, local05
0423c     D0 C8 B1 FD | 	call	#__system___string_cmp
04240     00 FA 0D F2 | 	cmp	result1, #0 wz
04244     00 01 90 AD |  if_e	jmp	#LR__0260
04248     82 01 00 FF 
0424c     DF 14 06 F6 | 	mov	arg02, ##@LR__5149
04250     13 13 02 F6 | 	mov	arg01, local05
04254     B8 C8 B1 FD | 	call	#__system___string_cmp
04258     00 FA 0D F2 | 	cmp	result1, #0 wz
0425c     F4 00 90 AD |  if_e	jmp	#LR__0261
04260     82 01 00 FF 
04264     E1 14 06 F6 | 	mov	arg02, ##@LR__5150
04268     13 13 02 F6 | 	mov	arg01, local05
0426c     A0 C8 B1 FD | 	call	#__system___string_cmp
04270     00 FA 0D F2 | 	cmp	result1, #0 wz
04274     E8 00 90 AD |  if_e	jmp	#LR__0262
04278     82 01 00 FF 
0427c     E3 14 06 F6 | 	mov	arg02, ##@LR__5151
04280     13 13 02 F6 | 	mov	arg01, local05
04284     88 C8 B1 FD | 	call	#__system___string_cmp
04288     00 FA 0D F2 | 	cmp	result1, #0 wz
0428c     DC 00 90 AD |  if_e	jmp	#LR__0263
04290     82 01 00 FF 
04294     E6 14 06 F6 | 	mov	arg02, ##@LR__5152
04298     13 13 02 F6 | 	mov	arg01, local05
0429c     70 C8 B1 FD | 	call	#__system___string_cmp
042a0     00 FA 0D F2 | 	cmp	result1, #0 wz
042a4     D0 00 90 AD |  if_e	jmp	#LR__0264
042a8     82 01 00 FF 
042ac     E8 14 06 F6 | 	mov	arg02, ##@LR__5153
042b0     13 13 02 F6 | 	mov	arg01, local05
042b4     58 C8 B1 FD | 	call	#__system___string_cmp
042b8     00 FA 0D F2 | 	cmp	result1, #0 wz
042bc     C4 00 90 AD |  if_e	jmp	#LR__0265
042c0     82 01 00 FF 
042c4     EB 14 06 F6 | 	mov	arg02, ##@LR__5154
042c8     13 13 02 F6 | 	mov	arg01, local05
042cc     40 C8 B1 FD | 	call	#__system___string_cmp
042d0     00 FA 0D F2 | 	cmp	result1, #0 wz
042d4     B8 00 90 AD |  if_e	jmp	#LR__0266
042d8     82 01 00 FF 
042dc     ED 14 06 F6 | 	mov	arg02, ##@LR__5155
042e0     13 13 02 F6 | 	mov	arg01, local05
042e4     28 C8 B1 FD | 	call	#__system___string_cmp
042e8     00 FA 0D F2 | 	cmp	result1, #0 wz
042ec     AC 00 90 AD |  if_e	jmp	#LR__0267
042f0     82 01 00 FF 
042f4     F0 14 06 F6 | 	mov	arg02, ##@LR__5156
042f8     13 13 02 F6 | 	mov	arg01, local05
042fc     10 C8 B1 FD | 	call	#__system___string_cmp
04300     00 FA 0D F2 | 	cmp	result1, #0 wz
04304     A0 00 90 AD |  if_e	jmp	#LR__0268
04308     82 01 00 FF 
0430c     F2 14 06 F6 | 	mov	arg02, ##@LR__5157
04310     13 13 02 F6 | 	mov	arg01, local05
04314     F8 C7 B1 FD | 	call	#__system___string_cmp
04318     00 FA 0D F2 | 	cmp	result1, #0 wz
0431c     94 00 90 AD |  if_e	jmp	#LR__0269
04320     9C 00 90 FD | 	jmp	#LR__0270
04324                 | LR__0257
04324     01 00 00 FF 
04328     00 29 06 F6 | 	mov	local06, ##768
0432c     98 00 90 FD | 	jmp	#LR__0271
04330                 | LR__0258
04330     01 00 00 FF 
04334     01 29 06 F6 | 	mov	local06, ##769
04338     8C 00 90 FD | 	jmp	#LR__0271
0433c                 | LR__0259
0433c     01 00 00 FF 
04340     02 29 06 F6 | 	mov	local06, ##770
04344     80 00 90 FD | 	jmp	#LR__0271
04348                 | LR__0260
04348     01 00 00 FF 
0434c     03 29 06 F6 | 	mov	local06, ##771
04350     74 00 90 FD | 	jmp	#LR__0271
04354                 | LR__0261
04354     01 00 00 FF 
04358     04 29 06 F6 | 	mov	local06, ##772
0435c     68 00 90 FD | 	jmp	#LR__0271
04360                 | LR__0262
04360     01 00 00 FF 
04364     05 29 06 F6 | 	mov	local06, ##773
04368     5C 00 90 FD | 	jmp	#LR__0271
0436c                 | LR__0263
0436c     01 00 00 FF 
04370     06 29 06 F6 | 	mov	local06, ##774
04374     50 00 90 FD | 	jmp	#LR__0271
04378                 | LR__0264
04378     01 00 00 FF 
0437c     07 29 06 F6 | 	mov	local06, ##775
04380     44 00 90 FD | 	jmp	#LR__0271
04384                 | LR__0265
04384     01 00 00 FF 
04388     08 29 06 F6 | 	mov	local06, ##776
0438c     38 00 90 FD | 	jmp	#LR__0271
04390                 | LR__0266
04390     01 00 00 FF 
04394     09 29 06 F6 | 	mov	local06, ##777
04398     2C 00 90 FD | 	jmp	#LR__0271
0439c                 | LR__0267
0439c     01 00 00 FF 
043a0     0A 29 06 F6 | 	mov	local06, ##778
043a4     20 00 90 FD | 	jmp	#LR__0271
043a8                 | LR__0268
043a8     01 00 00 FF 
043ac     0B 29 06 F6 | 	mov	local06, ##779
043b0     14 00 90 FD | 	jmp	#LR__0271
043b4                 | LR__0269
043b4     01 00 00 FF 
043b8     0B 29 06 F6 | 	mov	local06, ##779
043bc     08 00 90 FD | 	jmp	#LR__0271
043c0                 | LR__0270
043c0     00 FA 05 F6 | 	mov	result1, #0
043c4     28 00 90 FD | 	jmp	#LR__0273
043c8                 | LR__0271
043c8                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
043c8     FF FF 7F FF 
043cc     FF 25 56 F2 | 	cmps	local04, ##-1 wc
043d0     18 00 90 CD |  if_b	jmp	#LR__0272
043d4     0A 24 56 F2 | 	cmps	local04, #10 wc
043d8     12 2B 02 C6 |  if_b	mov	local07, local04
043dc     01 2A 66 C0 |  if_b	shl	local07, #1
043e0     12 2B 02 C1 |  if_b	add	local07, local04
043e4     02 2A 66 C0 |  if_b	shl	local07, #2
043e8     15 29 02 C1 |  if_b	add	local06, local07
043ec                 | LR__0272
043ec                 | ' return token
043ec     14 FB 01 F6 | 	mov	result1, local06
043f0                 | LR__0273
043f0     A7 F0 03 F6 | 	mov	ptra, fp
043f4     B2 00 A0 FD | 	call	#popregs_
043f8                 | _isnotename_ret
043f8     2D 00 64 FD | 	ret
043fc                 | 
043fc                 | ' 
043fc                 | ' ' Check if the part is a separator, return a token or 0 if not found
043fc                 | ' 
043fc                 | ' function isseparator(s as string) as ubyte
043fc                 | _isseparator
043fc     01 4A 05 F6 | 	mov	COUNT_, #1
04400     A8 00 A0 FD | 	call	#pushregs_
04404                 | ' 
04404                 | ' select case s
04404     09 1F 02 F6 | 	mov	local01, arg01
04408     82 01 00 FF 
0440c     F4 14 06 F6 | 	mov	arg02, ##@LR__5158
04410     0F 13 02 F6 | 	mov	arg01, local01
04414     F8 C6 B1 FD | 	call	#__system___string_cmp
04418     00 FA 0D F2 | 	cmp	result1, #0 wz
0441c     54 01 90 AD |  if_e	jmp	#LR__0280
04420     82 01 00 FF 
04424     F6 14 06 F6 | 	mov	arg02, ##@LR__5159
04428     0F 13 02 F6 | 	mov	arg01, local01
0442c     E0 C6 B1 FD | 	call	#__system___string_cmp
04430     00 FA 0D F2 | 	cmp	result1, #0 wz
04434     44 01 90 AD |  if_e	jmp	#LR__0281
04438     82 01 00 FF 
0443c     F8 14 06 F6 | 	mov	arg02, ##@LR__5160
04440     0F 13 02 F6 | 	mov	arg01, local01
04444     C8 C6 B1 FD | 	call	#__system___string_cmp
04448     00 FA 0D F2 | 	cmp	result1, #0 wz
0444c     34 01 90 AD |  if_e	jmp	#LR__0282
04450     82 01 00 FF 
04454     FA 14 06 F6 | 	mov	arg02, ##@LR__5161
04458     0F 13 02 F6 | 	mov	arg01, local01
0445c     B0 C6 B1 FD | 	call	#__system___string_cmp
04460     00 FA 0D F2 | 	cmp	result1, #0 wz
04464     24 01 90 AD |  if_e	jmp	#LR__0283
04468     82 01 00 FF 
0446c     FC 14 06 F6 | 	mov	arg02, ##@LR__5162
04470     0F 13 02 F6 | 	mov	arg01, local01
04474     98 C6 B1 FD | 	call	#__system___string_cmp
04478     00 FA 0D F2 | 	cmp	result1, #0 wz
0447c     14 01 90 AD |  if_e	jmp	#LR__0284
04480     82 01 00 FF 
04484     FE 14 06 F6 | 	mov	arg02, ##@LR__5163
04488     0F 13 02 F6 | 	mov	arg01, local01
0448c     80 C6 B1 FD | 	call	#__system___string_cmp
04490     00 FA 0D F2 | 	cmp	result1, #0 wz
04494     04 01 90 AD |  if_e	jmp	#LR__0285
04498     82 01 00 FF 
0449c     00 15 06 F6 | 	mov	arg02, ##@LR__5164
044a0     0F 13 02 F6 | 	mov	arg01, local01
044a4     68 C6 B1 FD | 	call	#__system___string_cmp
044a8     00 FA 0D F2 | 	cmp	result1, #0 wz
044ac     F4 00 90 AD |  if_e	jmp	#LR__0286
044b0     82 01 00 FF 
044b4     02 15 06 F6 | 	mov	arg02, ##@LR__5165
044b8     0F 13 02 F6 | 	mov	arg01, local01
044bc     50 C6 B1 FD | 	call	#__system___string_cmp
044c0     00 FA 0D F2 | 	cmp	result1, #0 wz
044c4     E4 00 90 AD |  if_e	jmp	#LR__0287
044c8     82 01 00 FF 
044cc     04 15 06 F6 | 	mov	arg02, ##@LR__5166
044d0     0F 13 02 F6 | 	mov	arg01, local01
044d4     38 C6 B1 FD | 	call	#__system___string_cmp
044d8     00 FA 0D F2 | 	cmp	result1, #0 wz
044dc     D4 00 90 AD |  if_e	jmp	#LR__0288
044e0     82 01 00 FF 
044e4     06 15 06 F6 | 	mov	arg02, ##@LR__5167
044e8     0F 13 02 F6 | 	mov	arg01, local01
044ec     20 C6 B1 FD | 	call	#__system___string_cmp
044f0     00 FA 0D F2 | 	cmp	result1, #0 wz
044f4     C4 00 90 AD |  if_e	jmp	#LR__0289
044f8     82 01 00 FF 
044fc     08 15 06 F6 | 	mov	arg02, ##@LR__5168
04500     0F 13 02 F6 | 	mov	arg01, local01
04504     08 C6 B1 FD | 	call	#__system___string_cmp
04508     00 FA 0D F2 | 	cmp	result1, #0 wz
0450c     B4 00 90 AD |  if_e	jmp	#LR__0290
04510     82 01 00 FF 
04514     0A 15 06 F6 | 	mov	arg02, ##@LR__5169
04518     0F 13 02 F6 | 	mov	arg01, local01
0451c     F0 C5 B1 FD | 	call	#__system___string_cmp
04520     00 FA 0D F2 | 	cmp	result1, #0 wz
04524     A4 00 90 AD |  if_e	jmp	#LR__0291
04528     82 01 00 FF 
0452c     0C 15 06 F6 | 	mov	arg02, ##@LR__5170
04530     0F 13 02 F6 | 	mov	arg01, local01
04534     D8 C5 B1 FD | 	call	#__system___string_cmp
04538     00 FA 0D F2 | 	cmp	result1, #0 wz
0453c     94 00 90 AD |  if_e	jmp	#LR__0292
04540     82 01 00 FF 
04544     0E 15 06 F6 | 	mov	arg02, ##@LR__5171
04548     0F 13 02 F6 | 	mov	arg01, local01
0454c     C0 C5 B1 FD | 	call	#__system___string_cmp
04550     00 FA 0D F2 | 	cmp	result1, #0 wz
04554     84 00 90 AD |  if_e	jmp	#LR__0293
04558     82 01 00 FF 
0455c     10 15 06 F6 | 	mov	arg02, ##@LR__5172
04560     0F 13 02 F6 | 	mov	arg01, local01
04564     A8 C5 B1 FD | 	call	#__system___string_cmp
04568     00 FA 0D F2 | 	cmp	result1, #0 wz
0456c     74 00 90 AD |  if_e	jmp	#LR__0294
04570     78 00 90 FD | 	jmp	#LR__0295
04574                 | LR__0280
04574     01 FA 05 F6 | 	mov	result1, #1
04578     74 00 90 FD | 	jmp	#LR__0296
0457c                 | LR__0281
0457c     02 FA 05 F6 | 	mov	result1, #2
04580     6C 00 90 FD | 	jmp	#LR__0296
04584                 | LR__0282
04584     1B FA 05 F6 | 	mov	result1, #27
04588     64 00 90 FD | 	jmp	#LR__0296
0458c                 | LR__0283
0458c     11 FA 05 F6 | 	mov	result1, #17
04590     5C 00 90 FD | 	jmp	#LR__0296
04594                 | LR__0284
04594     05 FA 05 F6 | 	mov	result1, #5
04598     54 00 90 FD | 	jmp	#LR__0296
0459c                 | LR__0285
0459c     06 FA 05 F6 | 	mov	result1, #6
045a0     4C 00 90 FD | 	jmp	#LR__0296
045a4                 | LR__0286
045a4     12 FA 05 F6 | 	mov	result1, #18
045a8     44 00 90 FD | 	jmp	#LR__0296
045ac                 | LR__0287
045ac     13 FA 05 F6 | 	mov	result1, #19
045b0     3C 00 90 FD | 	jmp	#LR__0296
045b4                 | LR__0288
045b4     0C FA 05 F6 | 	mov	result1, #12
045b8     34 00 90 FD | 	jmp	#LR__0296
045bc                 | LR__0289
045bc     14 FA 05 F6 | 	mov	result1, #20
045c0     2C 00 90 FD | 	jmp	#LR__0296
045c4                 | LR__0290
045c4     15 FA 05 F6 | 	mov	result1, #21
045c8     24 00 90 FD | 	jmp	#LR__0296
045cc                 | LR__0291
045cc     16 FA 05 F6 | 	mov	result1, #22
045d0     1C 00 90 FD | 	jmp	#LR__0296
045d4                 | LR__0292
045d4     FF FB 05 F6 | 	mov	result1, #511
045d8     14 00 90 FD | 	jmp	#LR__0296
045dc                 | LR__0293
045dc     0F FA 05 F6 | 	mov	result1, #15
045e0     0C 00 90 FD | 	jmp	#LR__0296
045e4                 | LR__0294
045e4     10 FA 05 F6 | 	mov	result1, #16
045e8     04 00 90 FD | 	jmp	#LR__0296
045ec                 | LR__0295
045ec     00 FA 05 F6 | 	mov	result1, #0
045f0                 | LR__0296
045f0     A7 F0 03 F6 | 	mov	ptra, fp
045f4     B2 00 A0 FD | 	call	#popregs_
045f8                 | _isseparator_ret
045f8     2D 00 64 FD | 	ret
045fc                 | 
045fc                 | ' 
045fc                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
045fc                 | ' 
045fc                 | ' function iscommand(s as string) as ubyte
045fc                 | _iscommand
045fc     01 4A 05 F6 | 	mov	COUNT_, #1
04600     A8 00 A0 FD | 	call	#pushregs_
04604                 | ' 
04604                 | ' select case s
04604     09 1F 02 F6 | 	mov	local01, arg01
04608     82 01 00 FF 
0460c     14 15 06 F6 | 	mov	arg02, ##@LR__5174
04610     0F 13 02 F6 | 	mov	arg01, local01
04614     F8 C4 B1 FD | 	call	#__system___string_cmp
04618     00 FA 0D F2 | 	cmp	result1, #0 wz
0461c     44 0B 90 AD |  if_e	jmp	#LR__0300
04620     82 01 00 FF 
04624     19 15 06 F6 | 	mov	arg02, ##@LR__5175
04628     0F 13 02 F6 | 	mov	arg01, local01
0462c     E0 C4 B1 FD | 	call	#__system___string_cmp
04630     00 FA 0D F2 | 	cmp	result1, #0 wz
04634     34 0B 90 AD |  if_e	jmp	#LR__0301
04638     82 01 00 FF 
0463c     1C 15 06 F6 | 	mov	arg02, ##@LR__5176
04640     0F 13 02 F6 | 	mov	arg01, local01
04644     C8 C4 B1 FD | 	call	#__system___string_cmp
04648     00 FA 0D F2 | 	cmp	result1, #0 wz
0464c     24 0B 90 AD |  if_e	jmp	#LR__0302
04650     82 01 00 FF 
04654     20 15 06 F6 | 	mov	arg02, ##@LR__5177
04658     0F 13 02 F6 | 	mov	arg01, local01
0465c     B0 C4 B1 FD | 	call	#__system___string_cmp
04660     00 FA 0D F2 | 	cmp	result1, #0 wz
04664     14 0B 90 AD |  if_e	jmp	#LR__0303
04668     82 01 00 FF 
0466c     25 15 06 F6 | 	mov	arg02, ##@LR__5178
04670     0F 13 02 F6 | 	mov	arg01, local01
04674     98 C4 B1 FD | 	call	#__system___string_cmp
04678     00 FA 0D F2 | 	cmp	result1, #0 wz
0467c     04 0B 90 AD |  if_e	jmp	#LR__0304
04680     82 01 00 FF 
04684     29 15 06 F6 | 	mov	arg02, ##@LR__5179
04688     0F 13 02 F6 | 	mov	arg01, local01
0468c     80 C4 B1 FD | 	call	#__system___string_cmp
04690     00 FA 0D F2 | 	cmp	result1, #0 wz
04694     F4 0A 90 AD |  if_e	jmp	#LR__0305
04698     82 01 00 FF 
0469c     34 15 06 F6 | 	mov	arg02, ##@LR__5180
046a0     0F 13 02 F6 | 	mov	arg01, local01
046a4     68 C4 B1 FD | 	call	#__system___string_cmp
046a8     00 FA 0D F2 | 	cmp	result1, #0 wz
046ac     E4 0A 90 AD |  if_e	jmp	#LR__0306
046b0     82 01 00 FF 
046b4     38 15 06 F6 | 	mov	arg02, ##@LR__5181
046b8     0F 13 02 F6 | 	mov	arg01, local01
046bc     50 C4 B1 FD | 	call	#__system___string_cmp
046c0     00 FA 0D F2 | 	cmp	result1, #0 wz
046c4     D4 0A 90 AD |  if_e	jmp	#LR__0307
046c8     82 01 00 FF 
046cc     42 15 06 F6 | 	mov	arg02, ##@LR__5182
046d0     0F 13 02 F6 | 	mov	arg01, local01
046d4     38 C4 B1 FD | 	call	#__system___string_cmp
046d8     00 FA 0D F2 | 	cmp	result1, #0 wz
046dc     C4 0A 90 AD |  if_e	jmp	#LR__0308
046e0     82 01 00 FF 
046e4     46 15 06 F6 | 	mov	arg02, ##@LR__5183
046e8     0F 13 02 F6 | 	mov	arg01, local01
046ec     20 C4 B1 FD | 	call	#__system___string_cmp
046f0     00 FA 0D F2 | 	cmp	result1, #0 wz
046f4     B4 0A 90 AD |  if_e	jmp	#LR__0309
046f8     82 01 00 FF 
046fc     50 15 06 F6 | 	mov	arg02, ##@LR__5184
04700     0F 13 02 F6 | 	mov	arg01, local01
04704     08 C4 B1 FD | 	call	#__system___string_cmp
04708     00 FA 0D F2 | 	cmp	result1, #0 wz
0470c     A4 0A 90 AD |  if_e	jmp	#LR__0310
04710     82 01 00 FF 
04714     54 15 06 F6 | 	mov	arg02, ##@LR__5185
04718     0F 13 02 F6 | 	mov	arg01, local01
0471c     F0 C3 B1 FD | 	call	#__system___string_cmp
04720     00 FA 0D F2 | 	cmp	result1, #0 wz
04724     94 0A 90 AD |  if_e	jmp	#LR__0311
04728     82 01 00 FF 
0472c     5F 15 06 F6 | 	mov	arg02, ##@LR__5186
04730     0F 13 02 F6 | 	mov	arg01, local01
04734     D8 C3 B1 FD | 	call	#__system___string_cmp
04738     00 FA 0D F2 | 	cmp	result1, #0 wz
0473c     84 0A 90 AD |  if_e	jmp	#LR__0312
04740     82 01 00 FF 
04744     63 15 06 F6 | 	mov	arg02, ##@LR__5187
04748     0F 13 02 F6 | 	mov	arg01, local01
0474c     C0 C3 B1 FD | 	call	#__system___string_cmp
04750     00 FA 0D F2 | 	cmp	result1, #0 wz
04754     74 0A 90 AD |  if_e	jmp	#LR__0313
04758     82 01 00 FF 
0475c     6A 15 06 F6 | 	mov	arg02, ##@LR__5188
04760     0F 13 02 F6 | 	mov	arg01, local01
04764     A8 C3 B1 FD | 	call	#__system___string_cmp
04768     00 FA 0D F2 | 	cmp	result1, #0 wz
0476c     64 0A 90 AD |  if_e	jmp	#LR__0314
04770     82 01 00 FF 
04774     6E 15 06 F6 | 	mov	arg02, ##@LR__5189
04778     0F 13 02 F6 | 	mov	arg01, local01
0477c     90 C3 B1 FD | 	call	#__system___string_cmp
04780     00 FA 0D F2 | 	cmp	result1, #0 wz
04784     54 0A 90 AD |  if_e	jmp	#LR__0315
04788     82 01 00 FF 
0478c     74 15 06 F6 | 	mov	arg02, ##@LR__5190
04790     0F 13 02 F6 | 	mov	arg01, local01
04794     78 C3 B1 FD | 	call	#__system___string_cmp
04798     00 FA 0D F2 | 	cmp	result1, #0 wz
0479c     44 0A 90 AD |  if_e	jmp	#LR__0316
047a0     82 01 00 FF 
047a4     7A 15 06 F6 | 	mov	arg02, ##@LR__5191
047a8     0F 13 02 F6 | 	mov	arg01, local01
047ac     60 C3 B1 FD | 	call	#__system___string_cmp
047b0     00 FA 0D F2 | 	cmp	result1, #0 wz
047b4     34 0A 90 AD |  if_e	jmp	#LR__0317
047b8     82 01 00 FF 
047bc     7E 15 06 F6 | 	mov	arg02, ##@LR__5192
047c0     0F 13 02 F6 | 	mov	arg01, local01
047c4     48 C3 B1 FD | 	call	#__system___string_cmp
047c8     00 FA 0D F2 | 	cmp	result1, #0 wz
047cc     24 0A 90 AD |  if_e	jmp	#LR__0318
047d0     82 01 00 FF 
047d4     84 15 06 F6 | 	mov	arg02, ##@LR__5193
047d8     0F 13 02 F6 | 	mov	arg01, local01
047dc     30 C3 B1 FD | 	call	#__system___string_cmp
047e0     00 FA 0D F2 | 	cmp	result1, #0 wz
047e4     14 0A 90 AD |  if_e	jmp	#LR__0319
047e8     82 01 00 FF 
047ec     87 15 06 F6 | 	mov	arg02, ##@LR__5194
047f0     0F 13 02 F6 | 	mov	arg01, local01
047f4     18 C3 B1 FD | 	call	#__system___string_cmp
047f8     00 FA 0D F2 | 	cmp	result1, #0 wz
047fc     04 0A 90 AD |  if_e	jmp	#LR__0320
04800     82 01 00 FF 
04804     8D 15 06 F6 | 	mov	arg02, ##@LR__5195
04808     0F 13 02 F6 | 	mov	arg01, local01
0480c     00 C3 B1 FD | 	call	#__system___string_cmp
04810     00 FA 0D F2 | 	cmp	result1, #0 wz
04814     F4 09 90 AD |  if_e	jmp	#LR__0321
04818     82 01 00 FF 
0481c     91 15 06 F6 | 	mov	arg02, ##@LR__5196
04820     0F 13 02 F6 | 	mov	arg01, local01
04824     E8 C2 B1 FD | 	call	#__system___string_cmp
04828     00 FA 0D F2 | 	cmp	result1, #0 wz
0482c     E4 09 90 AD |  if_e	jmp	#LR__0322
04830     82 01 00 FF 
04834     98 15 06 F6 | 	mov	arg02, ##@LR__5197
04838     0F 13 02 F6 | 	mov	arg01, local01
0483c     D0 C2 B1 FD | 	call	#__system___string_cmp
04840     00 FA 0D F2 | 	cmp	result1, #0 wz
04844     D4 09 90 AD |  if_e	jmp	#LR__0323
04848     82 01 00 FF 
0484c     9F 15 06 F6 | 	mov	arg02, ##@LR__5198
04850     0F 13 02 F6 | 	mov	arg01, local01
04854     B8 C2 B1 FD | 	call	#__system___string_cmp
04858     00 FA 0D F2 | 	cmp	result1, #0 wz
0485c     C4 09 90 AD |  if_e	jmp	#LR__0324
04860     82 01 00 FF 
04864     A6 15 06 F6 | 	mov	arg02, ##@LR__5199
04868     0F 13 02 F6 | 	mov	arg01, local01
0486c     A0 C2 B1 FD | 	call	#__system___string_cmp
04870     00 FA 0D F2 | 	cmp	result1, #0 wz
04874     B4 09 90 AD |  if_e	jmp	#LR__0325
04878     82 01 00 FF 
0487c     B0 15 06 F6 | 	mov	arg02, ##@LR__5200
04880     0F 13 02 F6 | 	mov	arg01, local01
04884     88 C2 B1 FD | 	call	#__system___string_cmp
04888     00 FA 0D F2 | 	cmp	result1, #0 wz
0488c     A4 09 90 AD |  if_e	jmp	#LR__0326
04890     82 01 00 FF 
04894     B4 15 06 F6 | 	mov	arg02, ##@LR__5201
04898     0F 13 02 F6 | 	mov	arg01, local01
0489c     70 C2 B1 FD | 	call	#__system___string_cmp
048a0     00 FA 0D F2 | 	cmp	result1, #0 wz
048a4     94 09 90 AD |  if_e	jmp	#LR__0327
048a8     82 01 00 FF 
048ac     B8 15 06 F6 | 	mov	arg02, ##@LR__5202
048b0     0F 13 02 F6 | 	mov	arg01, local01
048b4     58 C2 B1 FD | 	call	#__system___string_cmp
048b8     00 FA 0D F2 | 	cmp	result1, #0 wz
048bc     84 09 90 AD |  if_e	jmp	#LR__0328
048c0     82 01 00 FF 
048c4     BC 15 06 F6 | 	mov	arg02, ##@LR__5203
048c8     0F 13 02 F6 | 	mov	arg01, local01
048cc     40 C2 B1 FD | 	call	#__system___string_cmp
048d0     00 FA 0D F2 | 	cmp	result1, #0 wz
048d4     74 09 90 AD |  if_e	jmp	#LR__0329
048d8     82 01 00 FF 
048dc     C0 15 06 F6 | 	mov	arg02, ##@LR__5204
048e0     0F 13 02 F6 | 	mov	arg01, local01
048e4     28 C2 B1 FD | 	call	#__system___string_cmp
048e8     00 FA 0D F2 | 	cmp	result1, #0 wz
048ec     64 09 90 AD |  if_e	jmp	#LR__0330
048f0     82 01 00 FF 
048f4     C6 15 06 F6 | 	mov	arg02, ##@LR__5205
048f8     0F 13 02 F6 | 	mov	arg01, local01
048fc     10 C2 B1 FD | 	call	#__system___string_cmp
04900     00 FA 0D F2 | 	cmp	result1, #0 wz
04904     54 09 90 AD |  if_e	jmp	#LR__0331
04908     82 01 00 FF 
0490c     CB 15 06 F6 | 	mov	arg02, ##@LR__5206
04910     0F 13 02 F6 | 	mov	arg01, local01
04914     F8 C1 B1 FD | 	call	#__system___string_cmp
04918     00 FA 0D F2 | 	cmp	result1, #0 wz
0491c     44 09 90 AD |  if_e	jmp	#LR__0332
04920     82 01 00 FF 
04924     CF 15 06 F6 | 	mov	arg02, ##@LR__5207
04928     0F 13 02 F6 | 	mov	arg01, local01
0492c     E0 C1 B1 FD | 	call	#__system___string_cmp
04930     00 FA 0D F2 | 	cmp	result1, #0 wz
04934     34 09 90 AD |  if_e	jmp	#LR__0333
04938     82 01 00 FF 
0493c     D4 15 06 F6 | 	mov	arg02, ##@LR__5208
04940     0F 13 02 F6 | 	mov	arg01, local01
04944     C8 C1 B1 FD | 	call	#__system___string_cmp
04948     00 FA 0D F2 | 	cmp	result1, #0 wz
0494c     24 09 90 AD |  if_e	jmp	#LR__0334
04950     82 01 00 FF 
04954     D8 15 06 F6 | 	mov	arg02, ##@LR__5209
04958     0F 13 02 F6 | 	mov	arg01, local01
0495c     B0 C1 B1 FD | 	call	#__system___string_cmp
04960     00 FA 0D F2 | 	cmp	result1, #0 wz
04964     14 09 90 AD |  if_e	jmp	#LR__0335
04968     82 01 00 FF 
0496c     DE 15 06 F6 | 	mov	arg02, ##@LR__5210
04970     0F 13 02 F6 | 	mov	arg01, local01
04974     98 C1 B1 FD | 	call	#__system___string_cmp
04978     00 FA 0D F2 | 	cmp	result1, #0 wz
0497c     04 09 90 AD |  if_e	jmp	#LR__0336
04980     82 01 00 FF 
04984     E1 15 06 F6 | 	mov	arg02, ##@LR__5211
04988     0F 13 02 F6 | 	mov	arg01, local01
0498c     80 C1 B1 FD | 	call	#__system___string_cmp
04990     00 FA 0D F2 | 	cmp	result1, #0 wz
04994     F4 08 90 AD |  if_e	jmp	#LR__0337
04998     82 01 00 FF 
0499c     E9 15 06 F6 | 	mov	arg02, ##@LR__5212
049a0     0F 13 02 F6 | 	mov	arg01, local01
049a4     68 C1 B1 FD | 	call	#__system___string_cmp
049a8     00 FA 0D F2 | 	cmp	result1, #0 wz
049ac     E4 08 90 AD |  if_e	jmp	#LR__0338
049b0     82 01 00 FF 
049b4     ED 15 06 F6 | 	mov	arg02, ##@LR__5213
049b8     0F 13 02 F6 | 	mov	arg01, local01
049bc     50 C1 B1 FD | 	call	#__system___string_cmp
049c0     00 FA 0D F2 | 	cmp	result1, #0 wz
049c4     D4 08 90 AD |  if_e	jmp	#LR__0339
049c8     82 01 00 FF 
049cc     F2 15 06 F6 | 	mov	arg02, ##@LR__5214
049d0     0F 13 02 F6 | 	mov	arg01, local01
049d4     38 C1 B1 FD | 	call	#__system___string_cmp
049d8     00 FA 0D F2 | 	cmp	result1, #0 wz
049dc     C4 08 90 AD |  if_e	jmp	#LR__0340
049e0     82 01 00 FF 
049e4     F6 15 06 F6 | 	mov	arg02, ##@LR__5215
049e8     0F 13 02 F6 | 	mov	arg01, local01
049ec     20 C1 B1 FD | 	call	#__system___string_cmp
049f0     00 FA 0D F2 | 	cmp	result1, #0 wz
049f4     B4 08 90 AD |  if_e	jmp	#LR__0341
049f8     82 01 00 FF 
049fc     FB 15 06 F6 | 	mov	arg02, ##@LR__5216
04a00     0F 13 02 F6 | 	mov	arg01, local01
04a04     08 C1 B1 FD | 	call	#__system___string_cmp
04a08     00 FA 0D F2 | 	cmp	result1, #0 wz
04a0c     A4 08 90 AD |  if_e	jmp	#LR__0342
04a10     82 01 00 FF 
04a14     FF 15 06 F6 | 	mov	arg02, ##@LR__5217
04a18     0F 13 02 F6 | 	mov	arg01, local01
04a1c     F0 C0 B1 FD | 	call	#__system___string_cmp
04a20     00 FA 0D F2 | 	cmp	result1, #0 wz
04a24     94 08 90 AD |  if_e	jmp	#LR__0343
04a28     83 01 00 FF 
04a2c     02 14 06 F6 | 	mov	arg02, ##@LR__5218
04a30     0F 13 02 F6 | 	mov	arg01, local01
04a34     D8 C0 B1 FD | 	call	#__system___string_cmp
04a38     00 FA 0D F2 | 	cmp	result1, #0 wz
04a3c     84 08 90 AD |  if_e	jmp	#LR__0344
04a40     83 01 00 FF 
04a44     08 14 06 F6 | 	mov	arg02, ##@LR__5219
04a48     0F 13 02 F6 | 	mov	arg01, local01
04a4c     C0 C0 B1 FD | 	call	#__system___string_cmp
04a50     00 FA 0D F2 | 	cmp	result1, #0 wz
04a54     74 08 90 AD |  if_e	jmp	#LR__0345
04a58     83 01 00 FF 
04a5c     0C 14 06 F6 | 	mov	arg02, ##@LR__5220
04a60     0F 13 02 F6 | 	mov	arg01, local01
04a64     A8 C0 B1 FD | 	call	#__system___string_cmp
04a68     00 FA 0D F2 | 	cmp	result1, #0 wz
04a6c     64 08 90 AD |  if_e	jmp	#LR__0346
04a70     83 01 00 FF 
04a74     10 14 06 F6 | 	mov	arg02, ##@LR__5221
04a78     0F 13 02 F6 | 	mov	arg01, local01
04a7c     90 C0 B1 FD | 	call	#__system___string_cmp
04a80     00 FA 0D F2 | 	cmp	result1, #0 wz
04a84     54 08 90 AD |  if_e	jmp	#LR__0347
04a88     83 01 00 FF 
04a8c     16 14 06 F6 | 	mov	arg02, ##@LR__5222
04a90     0F 13 02 F6 | 	mov	arg01, local01
04a94     78 C0 B1 FD | 	call	#__system___string_cmp
04a98     00 FA 0D F2 | 	cmp	result1, #0 wz
04a9c     44 08 90 AD |  if_e	jmp	#LR__0348
04aa0     83 01 00 FF 
04aa4     1B 14 06 F6 | 	mov	arg02, ##@LR__5223
04aa8     0F 13 02 F6 | 	mov	arg01, local01
04aac     60 C0 B1 FD | 	call	#__system___string_cmp
04ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab4     34 08 90 AD |  if_e	jmp	#LR__0349
04ab8     83 01 00 FF 
04abc     1E 14 06 F6 | 	mov	arg02, ##@LR__5224
04ac0     0F 13 02 F6 | 	mov	arg01, local01
04ac4     48 C0 B1 FD | 	call	#__system___string_cmp
04ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
04acc     24 08 90 AD |  if_e	jmp	#LR__0350
04ad0     83 01 00 FF 
04ad4     21 14 06 F6 | 	mov	arg02, ##@LR__5225
04ad8     0F 13 02 F6 | 	mov	arg01, local01
04adc     30 C0 B1 FD | 	call	#__system___string_cmp
04ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae4     14 08 90 AD |  if_e	jmp	#LR__0351
04ae8     83 01 00 FF 
04aec     25 14 06 F6 | 	mov	arg02, ##@LR__5226
04af0     0F 13 02 F6 | 	mov	arg01, local01
04af4     18 C0 B1 FD | 	call	#__system___string_cmp
04af8     00 FA 0D F2 | 	cmp	result1, #0 wz
04afc     04 08 90 AD |  if_e	jmp	#LR__0352
04b00     83 01 00 FF 
04b04     28 14 06 F6 | 	mov	arg02, ##@LR__5227
04b08     0F 13 02 F6 | 	mov	arg01, local01
04b0c     00 C0 B1 FD | 	call	#__system___string_cmp
04b10     00 FA 0D F2 | 	cmp	result1, #0 wz
04b14     F4 07 90 AD |  if_e	jmp	#LR__0353
04b18     83 01 00 FF 
04b1c     2D 14 06 F6 | 	mov	arg02, ##@LR__5228
04b20     0F 13 02 F6 | 	mov	arg01, local01
04b24     E8 BF B1 FD | 	call	#__system___string_cmp
04b28     00 FA 0D F2 | 	cmp	result1, #0 wz
04b2c     E4 07 90 AD |  if_e	jmp	#LR__0354
04b30     83 01 00 FF 
04b34     30 14 06 F6 | 	mov	arg02, ##@LR__5229
04b38     0F 13 02 F6 | 	mov	arg01, local01
04b3c     D0 BF B1 FD | 	call	#__system___string_cmp
04b40     00 FA 0D F2 | 	cmp	result1, #0 wz
04b44     D4 07 90 AD |  if_e	jmp	#LR__0355
04b48     83 01 00 FF 
04b4c     35 14 06 F6 | 	mov	arg02, ##@LR__5230
04b50     0F 13 02 F6 | 	mov	arg01, local01
04b54     B8 BF B1 FD | 	call	#__system___string_cmp
04b58     00 FA 0D F2 | 	cmp	result1, #0 wz
04b5c     C4 07 90 AD |  if_e	jmp	#LR__0356
04b60     83 01 00 FF 
04b64     39 14 06 F6 | 	mov	arg02, ##@LR__5231
04b68     0F 13 02 F6 | 	mov	arg01, local01
04b6c     A0 BF B1 FD | 	call	#__system___string_cmp
04b70     00 FA 0D F2 | 	cmp	result1, #0 wz
04b74     B4 07 90 AD |  if_e	jmp	#LR__0357
04b78     83 01 00 FF 
04b7c     3F 14 06 F6 | 	mov	arg02, ##@LR__5232
04b80     0F 13 02 F6 | 	mov	arg01, local01
04b84     88 BF B1 FD | 	call	#__system___string_cmp
04b88     00 FA 0D F2 | 	cmp	result1, #0 wz
04b8c     A4 07 90 AD |  if_e	jmp	#LR__0358
04b90     83 01 00 FF 
04b94     44 14 06 F6 | 	mov	arg02, ##@LR__5233
04b98     0F 13 02 F6 | 	mov	arg01, local01
04b9c     70 BF B1 FD | 	call	#__system___string_cmp
04ba0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ba4     94 07 90 AD |  if_e	jmp	#LR__0359
04ba8     83 01 00 FF 
04bac     47 14 06 F6 | 	mov	arg02, ##@LR__5234
04bb0     0F 13 02 F6 | 	mov	arg01, local01
04bb4     58 BF B1 FD | 	call	#__system___string_cmp
04bb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bbc     84 07 90 AD |  if_e	jmp	#LR__0360
04bc0     83 01 00 FF 
04bc4     4D 14 06 F6 | 	mov	arg02, ##@LR__5235
04bc8     0F 13 02 F6 | 	mov	arg01, local01
04bcc     40 BF B1 FD | 	call	#__system___string_cmp
04bd0     00 FA 0D F2 | 	cmp	result1, #0 wz
04bd4     74 07 90 AD |  if_e	jmp	#LR__0361
04bd8     83 01 00 FF 
04bdc     51 14 06 F6 | 	mov	arg02, ##@LR__5236
04be0     0F 13 02 F6 | 	mov	arg01, local01
04be4     28 BF B1 FD | 	call	#__system___string_cmp
04be8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bec     64 07 90 AD |  if_e	jmp	#LR__0362
04bf0     83 01 00 FF 
04bf4     56 14 06 F6 | 	mov	arg02, ##@LR__5237
04bf8     0F 13 02 F6 | 	mov	arg01, local01
04bfc     10 BF B1 FD | 	call	#__system___string_cmp
04c00     00 FA 0D F2 | 	cmp	result1, #0 wz
04c04     54 07 90 AD |  if_e	jmp	#LR__0363
04c08     83 01 00 FF 
04c0c     59 14 06 F6 | 	mov	arg02, ##@LR__5238
04c10     0F 13 02 F6 | 	mov	arg01, local01
04c14     F8 BE B1 FD | 	call	#__system___string_cmp
04c18     00 FA 0D F2 | 	cmp	result1, #0 wz
04c1c     44 07 90 AD |  if_e	jmp	#LR__0364
04c20     83 01 00 FF 
04c24     5E 14 06 F6 | 	mov	arg02, ##@LR__5239
04c28     0F 13 02 F6 | 	mov	arg01, local01
04c2c     E0 BE B1 FD | 	call	#__system___string_cmp
04c30     00 FA 0D F2 | 	cmp	result1, #0 wz
04c34     34 07 90 AD |  if_e	jmp	#LR__0365
04c38     83 01 00 FF 
04c3c     64 14 06 F6 | 	mov	arg02, ##@LR__5240
04c40     0F 13 02 F6 | 	mov	arg01, local01
04c44     C8 BE B1 FD | 	call	#__system___string_cmp
04c48     00 FA 0D F2 | 	cmp	result1, #0 wz
04c4c     24 07 90 AD |  if_e	jmp	#LR__0366
04c50     83 01 00 FF 
04c54     68 14 06 F6 | 	mov	arg02, ##@LR__5241
04c58     0F 13 02 F6 | 	mov	arg01, local01
04c5c     B0 BE B1 FD | 	call	#__system___string_cmp
04c60     00 FA 0D F2 | 	cmp	result1, #0 wz
04c64     14 07 90 AD |  if_e	jmp	#LR__0367
04c68     83 01 00 FF 
04c6c     71 14 06 F6 | 	mov	arg02, ##@LR__5242
04c70     0F 13 02 F6 | 	mov	arg01, local01
04c74     98 BE B1 FD | 	call	#__system___string_cmp
04c78     00 FA 0D F2 | 	cmp	result1, #0 wz
04c7c     04 07 90 AD |  if_e	jmp	#LR__0368
04c80     83 01 00 FF 
04c84     77 14 06 F6 | 	mov	arg02, ##@LR__5243
04c88     0F 13 02 F6 | 	mov	arg01, local01
04c8c     80 BE B1 FD | 	call	#__system___string_cmp
04c90     00 FA 0D F2 | 	cmp	result1, #0 wz
04c94     F4 06 90 AD |  if_e	jmp	#LR__0369
04c98     83 01 00 FF 
04c9c     7D 14 06 F6 | 	mov	arg02, ##@LR__5244
04ca0     0F 13 02 F6 | 	mov	arg01, local01
04ca4     68 BE B1 FD | 	call	#__system___string_cmp
04ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cac     E4 06 90 AD |  if_e	jmp	#LR__0370
04cb0     83 01 00 FF 
04cb4     86 14 06 F6 | 	mov	arg02, ##@LR__5245
04cb8     0F 13 02 F6 | 	mov	arg01, local01
04cbc     50 BE B1 FD | 	call	#__system___string_cmp
04cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cc4     D4 06 90 AD |  if_e	jmp	#LR__0371
04cc8     83 01 00 FF 
04ccc     90 14 06 F6 | 	mov	arg02, ##@LR__5246
04cd0     0F 13 02 F6 | 	mov	arg01, local01
04cd4     38 BE B1 FD | 	call	#__system___string_cmp
04cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cdc     C4 06 90 AD |  if_e	jmp	#LR__0372
04ce0     83 01 00 FF 
04ce4     99 14 06 F6 | 	mov	arg02, ##@LR__5247
04ce8     0F 13 02 F6 | 	mov	arg01, local01
04cec     20 BE B1 FD | 	call	#__system___string_cmp
04cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cf4     B4 06 90 AD |  if_e	jmp	#LR__0373
04cf8     83 01 00 FF 
04cfc     9E 14 06 F6 | 	mov	arg02, ##@LR__5248
04d00     0F 13 02 F6 | 	mov	arg01, local01
04d04     08 BE B1 FD | 	call	#__system___string_cmp
04d08     00 FA 0D F2 | 	cmp	result1, #0 wz
04d0c     A4 06 90 AD |  if_e	jmp	#LR__0374
04d10     83 01 00 FF 
04d14     A1 14 06 F6 | 	mov	arg02, ##@LR__5249
04d18     0F 13 02 F6 | 	mov	arg01, local01
04d1c     F0 BD B1 FD | 	call	#__system___string_cmp
04d20     00 FA 0D F2 | 	cmp	result1, #0 wz
04d24     94 06 90 AD |  if_e	jmp	#LR__0375
04d28     83 01 00 FF 
04d2c     A6 14 06 F6 | 	mov	arg02, ##@LR__5250
04d30     0F 13 02 F6 | 	mov	arg01, local01
04d34     D8 BD B1 FD | 	call	#__system___string_cmp
04d38     00 FA 0D F2 | 	cmp	result1, #0 wz
04d3c     84 06 90 AD |  if_e	jmp	#LR__0376
04d40     83 01 00 FF 
04d44     AA 14 06 F6 | 	mov	arg02, ##@LR__5251
04d48     0F 13 02 F6 | 	mov	arg01, local01
04d4c     C0 BD B1 FD | 	call	#__system___string_cmp
04d50     00 FA 0D F2 | 	cmp	result1, #0 wz
04d54     74 06 90 AD |  if_e	jmp	#LR__0377
04d58     83 01 00 FF 
04d5c     AF 14 06 F6 | 	mov	arg02, ##@LR__5252
04d60     0F 13 02 F6 | 	mov	arg01, local01
04d64     A8 BD B1 FD | 	call	#__system___string_cmp
04d68     00 FA 0D F2 | 	cmp	result1, #0 wz
04d6c     64 06 90 AD |  if_e	jmp	#LR__0378
04d70     83 01 00 FF 
04d74     B3 14 06 F6 | 	mov	arg02, ##@LR__5253
04d78     0F 13 02 F6 | 	mov	arg01, local01
04d7c     90 BD B1 FD | 	call	#__system___string_cmp
04d80     00 FA 0D F2 | 	cmp	result1, #0 wz
04d84     54 06 90 AD |  if_e	jmp	#LR__0379
04d88     83 01 00 FF 
04d8c     BC 14 06 F6 | 	mov	arg02, ##@LR__5254
04d90     0F 13 02 F6 | 	mov	arg01, local01
04d94     78 BD B1 FD | 	call	#__system___string_cmp
04d98     00 FA 0D F2 | 	cmp	result1, #0 wz
04d9c     44 06 90 AD |  if_e	jmp	#LR__0380
04da0     83 01 00 FF 
04da4     C1 14 06 F6 | 	mov	arg02, ##@LR__5255
04da8     0F 13 02 F6 | 	mov	arg01, local01
04dac     60 BD B1 FD | 	call	#__system___string_cmp
04db0     00 FA 0D F2 | 	cmp	result1, #0 wz
04db4     34 06 90 AD |  if_e	jmp	#LR__0381
04db8     83 01 00 FF 
04dbc     C7 14 06 F6 | 	mov	arg02, ##@LR__5256
04dc0     0F 13 02 F6 | 	mov	arg01, local01
04dc4     48 BD B1 FD | 	call	#__system___string_cmp
04dc8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dcc     24 06 90 AD |  if_e	jmp	#LR__0382
04dd0     83 01 00 FF 
04dd4     C9 14 06 F6 | 	mov	arg02, ##@LR__5257
04dd8     0F 13 02 F6 | 	mov	arg01, local01
04ddc     30 BD B1 FD | 	call	#__system___string_cmp
04de0     00 FA 0D F2 | 	cmp	result1, #0 wz
04de4     14 06 90 AD |  if_e	jmp	#LR__0383
04de8     83 01 00 FF 
04dec     CD 14 06 F6 | 	mov	arg02, ##@LR__5258
04df0     0F 13 02 F6 | 	mov	arg01, local01
04df4     18 BD B1 FD | 	call	#__system___string_cmp
04df8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dfc     04 06 90 AD |  if_e	jmp	#LR__0384
04e00     83 01 00 FF 
04e04     D1 14 06 F6 | 	mov	arg02, ##@LR__5259
04e08     0F 13 02 F6 | 	mov	arg01, local01
04e0c     00 BD B1 FD | 	call	#__system___string_cmp
04e10     00 FA 0D F2 | 	cmp	result1, #0 wz
04e14     F4 05 90 AD |  if_e	jmp	#LR__0385
04e18     83 01 00 FF 
04e1c     D9 14 06 F6 | 	mov	arg02, ##@LR__5260
04e20     0F 13 02 F6 | 	mov	arg01, local01
04e24     E8 BC B1 FD | 	call	#__system___string_cmp
04e28     00 FA 0D F2 | 	cmp	result1, #0 wz
04e2c     E4 05 90 AD |  if_e	jmp	#LR__0386
04e30     83 01 00 FF 
04e34     DD 14 06 F6 | 	mov	arg02, ##@LR__5261
04e38     0F 13 02 F6 | 	mov	arg01, local01
04e3c     D0 BC B1 FD | 	call	#__system___string_cmp
04e40     00 FA 0D F2 | 	cmp	result1, #0 wz
04e44     D4 05 90 AD |  if_e	jmp	#LR__0387
04e48     83 01 00 FF 
04e4c     DF 14 06 F6 | 	mov	arg02, ##@LR__5262
04e50     0F 13 02 F6 | 	mov	arg01, local01
04e54     B8 BC B1 FD | 	call	#__system___string_cmp
04e58     00 FA 0D F2 | 	cmp	result1, #0 wz
04e5c     C4 05 90 AD |  if_e	jmp	#LR__0388
04e60     83 01 00 FF 
04e64     E6 14 06 F6 | 	mov	arg02, ##@LR__5263
04e68     0F 13 02 F6 | 	mov	arg01, local01
04e6c     A0 BC B1 FD | 	call	#__system___string_cmp
04e70     00 FA 0D F2 | 	cmp	result1, #0 wz
04e74     B4 05 90 AD |  if_e	jmp	#LR__0389
04e78     83 01 00 FF 
04e7c     EA 14 06 F6 | 	mov	arg02, ##@LR__5264
04e80     0F 13 02 F6 | 	mov	arg01, local01
04e84     88 BC B1 FD | 	call	#__system___string_cmp
04e88     00 FA 0D F2 | 	cmp	result1, #0 wz
04e8c     A4 05 90 AD |  if_e	jmp	#LR__0390
04e90     83 01 00 FF 
04e94     EF 14 06 F6 | 	mov	arg02, ##@LR__5265
04e98     0F 13 02 F6 | 	mov	arg01, local01
04e9c     70 BC B1 FD | 	call	#__system___string_cmp
04ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ea4     94 05 90 AD |  if_e	jmp	#LR__0391
04ea8     83 01 00 FF 
04eac     F2 14 06 F6 | 	mov	arg02, ##@LR__5266
04eb0     0F 13 02 F6 | 	mov	arg01, local01
04eb4     58 BC B1 FD | 	call	#__system___string_cmp
04eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ebc     84 05 90 AD |  if_e	jmp	#LR__0392
04ec0     83 01 00 FF 
04ec4     FB 14 06 F6 | 	mov	arg02, ##@LR__5267
04ec8     0F 13 02 F6 | 	mov	arg01, local01
04ecc     40 BC B1 FD | 	call	#__system___string_cmp
04ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ed4     74 05 90 AD |  if_e	jmp	#LR__0393
04ed8     83 01 00 FF 
04edc     FF 14 06 F6 | 	mov	arg02, ##@LR__5268
04ee0     0F 13 02 F6 | 	mov	arg01, local01
04ee4     28 BC B1 FD | 	call	#__system___string_cmp
04ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
04eec     64 05 90 AD |  if_e	jmp	#LR__0394
04ef0     83 01 00 FF 
04ef4     06 15 06 F6 | 	mov	arg02, ##@LR__5269
04ef8     0F 13 02 F6 | 	mov	arg01, local01
04efc     10 BC B1 FD | 	call	#__system___string_cmp
04f00     00 FA 0D F2 | 	cmp	result1, #0 wz
04f04     54 05 90 AD |  if_e	jmp	#LR__0395
04f08     83 01 00 FF 
04f0c     0A 15 06 F6 | 	mov	arg02, ##@LR__5270
04f10     0F 13 02 F6 | 	mov	arg01, local01
04f14     F8 BB B1 FD | 	call	#__system___string_cmp
04f18     00 FA 0D F2 | 	cmp	result1, #0 wz
04f1c     44 05 90 AD |  if_e	jmp	#LR__0396
04f20     83 01 00 FF 
04f24     11 15 06 F6 | 	mov	arg02, ##@LR__5271
04f28     0F 13 02 F6 | 	mov	arg01, local01
04f2c     E0 BB B1 FD | 	call	#__system___string_cmp
04f30     00 FA 0D F2 | 	cmp	result1, #0 wz
04f34     34 05 90 AD |  if_e	jmp	#LR__0397
04f38     83 01 00 FF 
04f3c     15 15 06 F6 | 	mov	arg02, ##@LR__5272
04f40     0F 13 02 F6 | 	mov	arg01, local01
04f44     C8 BB B1 FD | 	call	#__system___string_cmp
04f48     00 FA 0D F2 | 	cmp	result1, #0 wz
04f4c     24 05 90 AD |  if_e	jmp	#LR__0398
04f50     83 01 00 FF 
04f54     1C 15 06 F6 | 	mov	arg02, ##@LR__5273
04f58     0F 13 02 F6 | 	mov	arg01, local01
04f5c     B0 BB B1 FD | 	call	#__system___string_cmp
04f60     00 FA 0D F2 | 	cmp	result1, #0 wz
04f64     14 05 90 AD |  if_e	jmp	#LR__0399
04f68     83 01 00 FF 
04f6c     1F 15 06 F6 | 	mov	arg02, ##@LR__5274
04f70     0F 13 02 F6 | 	mov	arg01, local01
04f74     98 BB B1 FD | 	call	#__system___string_cmp
04f78     00 FA 0D F2 | 	cmp	result1, #0 wz
04f7c     04 05 90 AD |  if_e	jmp	#LR__0400
04f80     83 01 00 FF 
04f84     2A 15 06 F6 | 	mov	arg02, ##@LR__5275
04f88     0F 13 02 F6 | 	mov	arg01, local01
04f8c     80 BB B1 FD | 	call	#__system___string_cmp
04f90     00 FA 0D F2 | 	cmp	result1, #0 wz
04f94     F4 04 90 AD |  if_e	jmp	#LR__0401
04f98     83 01 00 FF 
04f9c     2E 15 06 F6 | 	mov	arg02, ##@LR__5276
04fa0     0F 13 02 F6 | 	mov	arg01, local01
04fa4     68 BB B1 FD | 	call	#__system___string_cmp
04fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fac     E4 04 90 AD |  if_e	jmp	#LR__0402
04fb0     83 01 00 FF 
04fb4     35 15 06 F6 | 	mov	arg02, ##@LR__5277
04fb8     0F 13 02 F6 | 	mov	arg01, local01
04fbc     50 BB B1 FD | 	call	#__system___string_cmp
04fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fc4     D4 04 90 AD |  if_e	jmp	#LR__0403
04fc8     83 01 00 FF 
04fcc     39 15 06 F6 | 	mov	arg02, ##@LR__5278
04fd0     0F 13 02 F6 | 	mov	arg01, local01
04fd4     38 BB B1 FD | 	call	#__system___string_cmp
04fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fdc     C4 04 90 AD |  if_e	jmp	#LR__0404
04fe0     83 01 00 FF 
04fe4     41 15 06 F6 | 	mov	arg02, ##@LR__5279
04fe8     0F 13 02 F6 | 	mov	arg01, local01
04fec     20 BB B1 FD | 	call	#__system___string_cmp
04ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff4     B4 04 90 AD |  if_e	jmp	#LR__0405
04ff8     83 01 00 FF 
04ffc     45 15 06 F6 | 	mov	arg02, ##@LR__5280
05000     0F 13 02 F6 | 	mov	arg01, local01
05004     08 BB B1 FD | 	call	#__system___string_cmp
05008     00 FA 0D F2 | 	cmp	result1, #0 wz
0500c     A4 04 90 AD |  if_e	jmp	#LR__0406
05010     83 01 00 FF 
05014     4C 15 06 F6 | 	mov	arg02, ##@LR__5281
05018     0F 13 02 F6 | 	mov	arg01, local01
0501c     F0 BA B1 FD | 	call	#__system___string_cmp
05020     00 FA 0D F2 | 	cmp	result1, #0 wz
05024     94 04 90 AD |  if_e	jmp	#LR__0407
05028     83 01 00 FF 
0502c     53 15 06 F6 | 	mov	arg02, ##@LR__5282
05030     0F 13 02 F6 | 	mov	arg01, local01
05034     D8 BA B1 FD | 	call	#__system___string_cmp
05038     00 FA 0D F2 | 	cmp	result1, #0 wz
0503c     84 04 90 AD |  if_e	jmp	#LR__0408
05040     83 01 00 FF 
05044     57 15 06 F6 | 	mov	arg02, ##@LR__5283
05048     0F 13 02 F6 | 	mov	arg01, local01
0504c     C0 BA B1 FD | 	call	#__system___string_cmp
05050     00 FA 0D F2 | 	cmp	result1, #0 wz
05054     74 04 90 AD |  if_e	jmp	#LR__0409
05058     83 01 00 FF 
0505c     5D 15 06 F6 | 	mov	arg02, ##@LR__5284
05060     0F 13 02 F6 | 	mov	arg01, local01
05064     A8 BA B1 FD | 	call	#__system___string_cmp
05068     00 FA 0D F2 | 	cmp	result1, #0 wz
0506c     64 04 90 AD |  if_e	jmp	#LR__0410
05070     83 01 00 FF 
05074     61 15 06 F6 | 	mov	arg02, ##@LR__5285
05078     0F 13 02 F6 | 	mov	arg01, local01
0507c     90 BA B1 FD | 	call	#__system___string_cmp
05080     00 FA 0D F2 | 	cmp	result1, #0 wz
05084     54 04 90 AD |  if_e	jmp	#LR__0411
05088     83 01 00 FF 
0508c     68 15 06 F6 | 	mov	arg02, ##@LR__5286
05090     0F 13 02 F6 | 	mov	arg01, local01
05094     78 BA B1 FD | 	call	#__system___string_cmp
05098     00 FA 0D F2 | 	cmp	result1, #0 wz
0509c     44 04 90 AD |  if_e	jmp	#LR__0412
050a0     83 01 00 FF 
050a4     6D 15 06 F6 | 	mov	arg02, ##@LR__5287
050a8     0F 13 02 F6 | 	mov	arg01, local01
050ac     60 BA B1 FD | 	call	#__system___string_cmp
050b0     00 FA 0D F2 | 	cmp	result1, #0 wz
050b4     34 04 90 AD |  if_e	jmp	#LR__0413
050b8     83 01 00 FF 
050bc     72 15 06 F6 | 	mov	arg02, ##@LR__5288
050c0     0F 13 02 F6 | 	mov	arg01, local01
050c4     48 BA B1 FD | 	call	#__system___string_cmp
050c8     00 FA 0D F2 | 	cmp	result1, #0 wz
050cc     24 04 90 AD |  if_e	jmp	#LR__0414
050d0     83 01 00 FF 
050d4     79 15 06 F6 | 	mov	arg02, ##@LR__5289
050d8     0F 13 02 F6 | 	mov	arg01, local01
050dc     30 BA B1 FD | 	call	#__system___string_cmp
050e0     00 FA 0D F2 | 	cmp	result1, #0 wz
050e4     14 04 90 AD |  if_e	jmp	#LR__0415
050e8     83 01 00 FF 
050ec     83 15 06 F6 | 	mov	arg02, ##@LR__5290
050f0     0F 13 02 F6 | 	mov	arg01, local01
050f4     18 BA B1 FD | 	call	#__system___string_cmp
050f8     00 FA 0D F2 | 	cmp	result1, #0 wz
050fc     04 04 90 AD |  if_e	jmp	#LR__0416
05100     83 01 00 FF 
05104     87 15 06 F6 | 	mov	arg02, ##@LR__5291
05108     0F 13 02 F6 | 	mov	arg01, local01
0510c     00 BA B1 FD | 	call	#__system___string_cmp
05110     00 FA 0D F2 | 	cmp	result1, #0 wz
05114     F4 03 90 AD |  if_e	jmp	#LR__0417
05118     83 01 00 FF 
0511c     8F 15 06 F6 | 	mov	arg02, ##@LR__5292
05120     0F 13 02 F6 | 	mov	arg01, local01
05124     E8 B9 B1 FD | 	call	#__system___string_cmp
05128     00 FA 0D F2 | 	cmp	result1, #0 wz
0512c     E4 03 90 AD |  if_e	jmp	#LR__0418
05130     83 01 00 FF 
05134     93 15 06 F6 | 	mov	arg02, ##@LR__5293
05138     0F 13 02 F6 | 	mov	arg01, local01
0513c     D0 B9 B1 FD | 	call	#__system___string_cmp
05140     00 FA 0D F2 | 	cmp	result1, #0 wz
05144     D4 03 90 AD |  if_e	jmp	#LR__0419
05148     83 01 00 FF 
0514c     99 15 06 F6 | 	mov	arg02, ##@LR__5294
05150     0F 13 02 F6 | 	mov	arg01, local01
05154     B8 B9 B1 FD | 	call	#__system___string_cmp
05158     00 FA 0D F2 | 	cmp	result1, #0 wz
0515c     C4 03 90 AD |  if_e	jmp	#LR__0420
05160     C8 03 90 FD | 	jmp	#LR__0421
05164                 | LR__0300
05164     5C FA 05 F6 | 	mov	result1, #92
05168     C4 03 90 FD | 	jmp	#LR__0422
0516c                 | LR__0301
0516c     5C FA 05 F6 | 	mov	result1, #92
05170     BC 03 90 FD | 	jmp	#LR__0422
05174                 | LR__0302
05174     47 FA 05 F6 | 	mov	result1, #71
05178     B4 03 90 FD | 	jmp	#LR__0422
0517c                 | LR__0303
0517c     59 FA 05 F6 | 	mov	result1, #89
05180     AC 03 90 FD | 	jmp	#LR__0422
05184                 | LR__0304
05184     59 FA 05 F6 | 	mov	result1, #89
05188     A4 03 90 FD | 	jmp	#LR__0422
0518c                 | LR__0305
0518c     AE FA 05 F6 | 	mov	result1, #174
05190     9C 03 90 FD | 	jmp	#LR__0422
05194                 | LR__0306
05194     AE FA 05 F6 | 	mov	result1, #174
05198     94 03 90 FD | 	jmp	#LR__0422
0519c                 | LR__0307
0519c     B1 FA 05 F6 | 	mov	result1, #177
051a0     8C 03 90 FD | 	jmp	#LR__0422
051a4                 | LR__0308
051a4     B1 FA 05 F6 | 	mov	result1, #177
051a8     84 03 90 FD | 	jmp	#LR__0422
051ac                 | LR__0309
051ac     AF FA 05 F6 | 	mov	result1, #175
051b0     7C 03 90 FD | 	jmp	#LR__0422
051b4                 | LR__0310
051b4     AF FA 05 F6 | 	mov	result1, #175
051b8     74 03 90 FD | 	jmp	#LR__0422
051bc                 | LR__0311
051bc     B0 FA 05 F6 | 	mov	result1, #176
051c0     6C 03 90 FD | 	jmp	#LR__0422
051c4                 | LR__0312
051c4     B0 FA 05 F6 | 	mov	result1, #176
051c8     64 03 90 FD | 	jmp	#LR__0422
051cc                 | LR__0313
051cc     45 FA 05 F6 | 	mov	result1, #69
051d0     5C 03 90 FD | 	jmp	#LR__0422
051d4                 | LR__0314
051d4     45 FA 05 F6 | 	mov	result1, #69
051d8     54 03 90 FD | 	jmp	#LR__0422
051dc                 | LR__0315
051dc     69 FA 05 F6 | 	mov	result1, #105
051e0     4C 03 90 FD | 	jmp	#LR__0422
051e4                 | LR__0316
051e4     B4 FA 05 F6 | 	mov	result1, #180
051e8     44 03 90 FD | 	jmp	#LR__0422
051ec                 | LR__0317
051ec     40 FA 05 F6 | 	mov	result1, #64
051f0     3C 03 90 FD | 	jmp	#LR__0422
051f4                 | LR__0318
051f4     49 FA 05 F6 | 	mov	result1, #73
051f8     34 03 90 FD | 	jmp	#LR__0422
051fc                 | LR__0319
051fc     49 FA 05 F6 | 	mov	result1, #73
05200     2C 03 90 FD | 	jmp	#LR__0422
05204                 | LR__0320
05204     50 FA 05 F6 | 	mov	result1, #80
05208     24 03 90 FD | 	jmp	#LR__0422
0520c                 | LR__0321
0520c     50 FA 05 F6 | 	mov	result1, #80
05210     1C 03 90 FD | 	jmp	#LR__0422
05214                 | LR__0322
05214     68 FA 05 F6 | 	mov	result1, #104
05218     14 03 90 FD | 	jmp	#LR__0422
0521c                 | LR__0323
0521c     73 FA 05 F6 | 	mov	result1, #115
05220     0C 03 90 FD | 	jmp	#LR__0422
05224                 | LR__0324
05224     74 FA 05 F6 | 	mov	result1, #116
05228     04 03 90 FD | 	jmp	#LR__0422
0522c                 | LR__0325
0522c     6C FA 05 F6 | 	mov	result1, #108
05230     FC 02 90 FD | 	jmp	#LR__0422
05234                 | LR__0326
05234     6C FA 05 F6 | 	mov	result1, #108
05238     F4 02 90 FD | 	jmp	#LR__0422
0523c                 | LR__0327
0523c     89 FA 05 F6 | 	mov	result1, #137
05240     EC 02 90 FD | 	jmp	#LR__0422
05244                 | LR__0328
05244     72 FA 05 F6 | 	mov	result1, #114
05248     E4 02 90 FD | 	jmp	#LR__0422
0524c                 | LR__0329
0524c     5D FA 05 F6 | 	mov	result1, #93
05250     DC 02 90 FD | 	jmp	#LR__0422
05254                 | LR__0330
05254     96 FA 05 F6 | 	mov	result1, #150
05258     D4 02 90 FD | 	jmp	#LR__0422
0525c                 | LR__0331
0525c     43 FA 05 F6 | 	mov	result1, #67
05260     CC 02 90 FD | 	jmp	#LR__0422
05264                 | LR__0332
05264     43 FA 05 F6 | 	mov	result1, #67
05268     C4 02 90 FD | 	jmp	#LR__0422
0526c                 | LR__0333
0526c     5A FA 05 F6 | 	mov	result1, #90
05270     BC 02 90 FD | 	jmp	#LR__0422
05274                 | LR__0334
05274     AB FA 05 F6 | 	mov	result1, #171
05278     B4 02 90 FD | 	jmp	#LR__0422
0527c                 | LR__0335
0527c     BD FA 05 F6 | 	mov	result1, #189
05280     AC 02 90 FD | 	jmp	#LR__0422
05284                 | LR__0336
05284     BD FA 05 F6 | 	mov	result1, #189
05288     A4 02 90 FD | 	jmp	#LR__0422
0528c                 | LR__0337
0528c     46 FA 05 F6 | 	mov	result1, #70
05290     9C 02 90 FD | 	jmp	#LR__0422
05294                 | LR__0338
05294     46 FA 05 F6 | 	mov	result1, #70
05298     94 02 90 FD | 	jmp	#LR__0422
0529c                 | LR__0339
0529c     71 FA 05 F6 | 	mov	result1, #113
052a0     8C 02 90 FD | 	jmp	#LR__0422
052a4                 | LR__0340
052a4     71 FA 05 F6 | 	mov	result1, #113
052a8     84 02 90 FD | 	jmp	#LR__0422
052ac                 | LR__0341
052ac     60 FA 05 F6 | 	mov	result1, #96
052b0     7C 02 90 FD | 	jmp	#LR__0422
052b4                 | LR__0342
052b4     4A FA 05 F6 | 	mov	result1, #74
052b8     74 02 90 FD | 	jmp	#LR__0422
052bc                 | LR__0343
052bc     4A FA 05 F6 | 	mov	result1, #74
052c0     6C 02 90 FD | 	jmp	#LR__0422
052c4                 | LR__0344
052c4     48 FA 05 F6 | 	mov	result1, #72
052c8     64 02 90 FD | 	jmp	#LR__0422
052cc                 | LR__0345
052cc     48 FA 05 F6 | 	mov	result1, #72
052d0     5C 02 90 FD | 	jmp	#LR__0422
052d4                 | LR__0346
052d4     BB FA 05 F6 | 	mov	result1, #187
052d8     54 02 90 FD | 	jmp	#LR__0422
052dc                 | LR__0347
052dc     A9 FA 05 F6 | 	mov	result1, #169
052e0     4C 02 90 FD | 	jmp	#LR__0422
052e4                 | LR__0348
052e4     4E FA 05 F6 | 	mov	result1, #78
052e8     44 02 90 FD | 	jmp	#LR__0422
052ec                 | LR__0349
052ec     4E FA 05 F6 | 	mov	result1, #78
052f0     3C 02 90 FD | 	jmp	#LR__0422
052f4                 | LR__0350
052f4     58 FA 05 F6 | 	mov	result1, #88
052f8     34 02 90 FD | 	jmp	#LR__0422
052fc                 | LR__0351
052fc     5F FA 05 F6 | 	mov	result1, #95
05300     2C 02 90 FD | 	jmp	#LR__0422
05304                 | LR__0352
05304     5F FA 05 F6 | 	mov	result1, #95
05308     24 02 90 FD | 	jmp	#LR__0422
0530c                 | LR__0353
0530c     4C FA 05 F6 | 	mov	result1, #76
05310     1C 02 90 FD | 	jmp	#LR__0422
05314                 | LR__0354
05314     4C FA 05 F6 | 	mov	result1, #76
05318     14 02 90 FD | 	jmp	#LR__0422
0531c                 | LR__0355
0531c     52 FA 05 F6 | 	mov	result1, #82
05320     0C 02 90 FD | 	jmp	#LR__0422
05324                 | LR__0356
05324     52 FA 05 F6 | 	mov	result1, #82
05328     04 02 90 FD | 	jmp	#LR__0422
0532c                 | LR__0357
0532c     97 FA 05 F6 | 	mov	result1, #151
05330     FC 01 90 FD | 	jmp	#LR__0422
05334                 | LR__0358
05334     61 FA 05 F6 | 	mov	result1, #97
05338     F4 01 90 FD | 	jmp	#LR__0422
0533c                 | LR__0359
0533c     61 FA 05 F6 | 	mov	result1, #97
05340     EC 01 90 FD | 	jmp	#LR__0422
05344                 | LR__0360
05344     63 FA 05 F6 | 	mov	result1, #99
05348     E4 01 90 FD | 	jmp	#LR__0422
0534c                 | LR__0361
0534c     41 FA 05 F6 | 	mov	result1, #65
05350     DC 01 90 FD | 	jmp	#LR__0422
05354                 | LR__0362
05354     4B FA 05 F6 | 	mov	result1, #75
05358     D4 01 90 FD | 	jmp	#LR__0422
0535c                 | LR__0363
0535c     4B FA 05 F6 | 	mov	result1, #75
05360     CC 01 90 FD | 	jmp	#LR__0422
05364                 | LR__0364
05364     B3 FA 05 F6 | 	mov	result1, #179
05368     C4 01 90 FD | 	jmp	#LR__0422
0536c                 | LR__0365
0536c     5E FA 05 F6 | 	mov	result1, #94
05370     BC 01 90 FD | 	jmp	#LR__0422
05374                 | LR__0366
05374     5E FA 05 F6 | 	mov	result1, #94
05378     B4 01 90 FD | 	jmp	#LR__0422
0537c                 | LR__0367
0537c     7C FA 05 F6 | 	mov	result1, #124
05380     AC 01 90 FD | 	jmp	#LR__0422
05384                 | LR__0368
05384     7E FA 05 F6 | 	mov	result1, #126
05388     A4 01 90 FD | 	jmp	#LR__0422
0538c                 | LR__0369
0538c     7D FA 05 F6 | 	mov	result1, #125
05390     9C 01 90 FD | 	jmp	#LR__0422
05394                 | LR__0370
05394     7F FA 05 F6 | 	mov	result1, #127
05398     94 01 90 FD | 	jmp	#LR__0422
0539c                 | LR__0371
0539c     80 FA 05 F6 | 	mov	result1, #128
053a0     8C 01 90 FD | 	jmp	#LR__0422
053a4                 | LR__0372
053a4     55 FA 05 F6 | 	mov	result1, #85
053a8     84 01 90 FD | 	jmp	#LR__0422
053ac                 | LR__0373
053ac     75 FA 05 F6 | 	mov	result1, #117
053b0     7C 01 90 FD | 	jmp	#LR__0422
053b4                 | LR__0374
053b4     75 FA 05 F6 | 	mov	result1, #117
053b8     74 01 90 FD | 	jmp	#LR__0422
053bc                 | LR__0375
053bc     42 FA 05 F6 | 	mov	result1, #66
053c0     6C 01 90 FD | 	jmp	#LR__0422
053c4                 | LR__0376
053c4     42 FA 05 F6 | 	mov	result1, #66
053c8     64 01 90 FD | 	jmp	#LR__0422
053cc                 | LR__0377
053cc     95 FA 05 F6 | 	mov	result1, #149
053d0     5C 01 90 FD | 	jmp	#LR__0422
053d4                 | LR__0378
053d4     AC FA 05 F6 | 	mov	result1, #172
053d8     54 01 90 FD | 	jmp	#LR__0422
053dc                 | LR__0379
053dc     81 FA 05 F6 | 	mov	result1, #129
053e0     4C 01 90 FD | 	jmp	#LR__0422
053e4                 | LR__0380
053e4     81 FA 05 F6 | 	mov	result1, #129
053e8     44 01 90 FD | 	jmp	#LR__0422
053ec                 | LR__0381
053ec     44 FA 05 F6 | 	mov	result1, #68
053f0     3C 01 90 FD | 	jmp	#LR__0422
053f4                 | LR__0382
053f4     44 FA 05 F6 | 	mov	result1, #68
053f8     34 01 90 FD | 	jmp	#LR__0422
053fc                 | LR__0383
053fc     BC FA 05 F6 | 	mov	result1, #188
05400     2C 01 90 FD | 	jmp	#LR__0422
05404                 | LR__0384
05404     88 FA 05 F6 | 	mov	result1, #136
05408     24 01 90 FD | 	jmp	#LR__0422
0540c                 | LR__0385
0540c     92 FA 05 F6 | 	mov	result1, #146
05410     1C 01 90 FD | 	jmp	#LR__0422
05414                 | LR__0386
05414     BE FA 05 F6 | 	mov	result1, #190
05418     14 01 90 FD | 	jmp	#LR__0422
0541c                 | LR__0387
0541c     BE FA 05 F6 | 	mov	result1, #190
05420     0C 01 90 FD | 	jmp	#LR__0422
05424                 | LR__0388
05424     AA FA 05 F6 | 	mov	result1, #170
05428     04 01 90 FD | 	jmp	#LR__0422
0542c                 | LR__0389
0542c     4D FA 05 F6 | 	mov	result1, #77
05430     FC 00 90 FD | 	jmp	#LR__0422
05434                 | LR__0390
05434     51 FA 05 F6 | 	mov	result1, #81
05438     F4 00 90 FD | 	jmp	#LR__0422
0543c                 | LR__0391
0543c     51 FA 05 F6 | 	mov	result1, #81
05440     EC 00 90 FD | 	jmp	#LR__0422
05444                 | LR__0392
05444     8E FA 05 F6 | 	mov	result1, #142
05448     E4 00 90 FD | 	jmp	#LR__0422
0544c                 | LR__0393
0544c     8E FA 05 F6 | 	mov	result1, #142
05450     DC 00 90 FD | 	jmp	#LR__0422
05454                 | LR__0394
05454     90 FA 05 F6 | 	mov	result1, #144
05458     D4 00 90 FD | 	jmp	#LR__0422
0545c                 | LR__0395
0545c     90 FA 05 F6 | 	mov	result1, #144
05460     CC 00 90 FD | 	jmp	#LR__0422
05464                 | LR__0396
05464     8D FA 05 F6 | 	mov	result1, #141
05468     C4 00 90 FD | 	jmp	#LR__0422
0546c                 | LR__0397
0546c     8D FA 05 F6 | 	mov	result1, #141
05470     BC 00 90 FD | 	jmp	#LR__0422
05474                 | LR__0398
05474     8C FA 05 F6 | 	mov	result1, #140
05478     B4 00 90 FD | 	jmp	#LR__0422
0547c                 | LR__0399
0547c     8C FA 05 F6 | 	mov	result1, #140
05480     AC 00 90 FD | 	jmp	#LR__0422
05484                 | LR__0400
05484     91 FA 05 F6 | 	mov	result1, #145
05488     A4 00 90 FD | 	jmp	#LR__0422
0548c                 | LR__0401
0548c     91 FA 05 F6 | 	mov	result1, #145
05490     9C 00 90 FD | 	jmp	#LR__0422
05494                 | LR__0402
05494     8B FA 05 F6 | 	mov	result1, #139
05498     94 00 90 FD | 	jmp	#LR__0422
0549c                 | LR__0403
0549c     8B FA 05 F6 | 	mov	result1, #139
054a0     8C 00 90 FD | 	jmp	#LR__0422
054a4                 | LR__0404
054a4     8F FA 05 F6 | 	mov	result1, #143
054a8     84 00 90 FD | 	jmp	#LR__0422
054ac                 | LR__0405
054ac     8F FA 05 F6 | 	mov	result1, #143
054b0     7C 00 90 FD | 	jmp	#LR__0422
054b4                 | LR__0406
054b4     8F FA 05 F6 | 	mov	result1, #143
054b8     74 00 90 FD | 	jmp	#LR__0422
054bc                 | LR__0407
054bc     B2 FA 05 F6 | 	mov	result1, #178
054c0     6C 00 90 FD | 	jmp	#LR__0422
054c4                 | LR__0408
054c4     B2 FA 05 F6 | 	mov	result1, #178
054c8     64 00 90 FD | 	jmp	#LR__0422
054cc                 | LR__0409
054cc     75 FA 05 F6 | 	mov	result1, #117
054d0     5C 00 90 FD | 	jmp	#LR__0422
054d4                 | LR__0410
054d4     75 FA 05 F6 | 	mov	result1, #117
054d8     54 00 90 FD | 	jmp	#LR__0422
054dc                 | LR__0411
054dc     6D FA 05 F6 | 	mov	result1, #109
054e0     4C 00 90 FD | 	jmp	#LR__0422
054e4                 | LR__0412
054e4     6D FA 05 F6 | 	mov	result1, #109
054e8     44 00 90 FD | 	jmp	#LR__0422
054ec                 | LR__0413
054ec     5B FA 05 F6 | 	mov	result1, #91
054f0     3C 00 90 FD | 	jmp	#LR__0422
054f4                 | LR__0414
054f4     56 FA 05 F6 | 	mov	result1, #86
054f8     34 00 90 FD | 	jmp	#LR__0422
054fc                 | LR__0415
054fc     70 FA 05 F6 | 	mov	result1, #112
05500     2C 00 90 FD | 	jmp	#LR__0422
05504                 | LR__0416
05504     70 FA 05 F6 | 	mov	result1, #112
05508     24 00 90 FD | 	jmp	#LR__0422
0550c                 | LR__0417
0550c     57 FA 05 F6 | 	mov	result1, #87
05510     1C 00 90 FD | 	jmp	#LR__0422
05514                 | LR__0418
05514     57 FA 05 F6 | 	mov	result1, #87
05518     14 00 90 FD | 	jmp	#LR__0422
0551c                 | LR__0419
0551c     77 FA 05 F6 | 	mov	result1, #119
05520     0C 00 90 FD | 	jmp	#LR__0422
05524                 | LR__0420
05524     78 FA 05 F6 | 	mov	result1, #120
05528     04 00 90 FD | 	jmp	#LR__0422
0552c                 | LR__0421
0552c     00 FA 05 F6 | 	mov	result1, #0
05530                 | LR__0422
05530     A7 F0 03 F6 | 	mov	ptra, fp
05534     B2 00 A0 FD | 	call	#popregs_
05538                 | _iscommand_ret
05538     2D 00 64 FD | 	ret
0553c                 | 
0553c                 | ' 
0553c                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
0553c                 | ' 
0553c                 | ' function isfunction(s as string) as ubyte
0553c                 | _isfunction
0553c     01 4A 05 F6 | 	mov	COUNT_, #1
05540     A8 00 A0 FD | 	call	#pushregs_
05544                 | ' 
05544                 | ' select case s
05544     09 1F 02 F6 | 	mov	local01, arg01
05548     83 01 00 FF 
0554c     9F 15 06 F6 | 	mov	arg02, ##@LR__5295
05550     0F 13 02 F6 | 	mov	arg01, local01
05554     B8 B5 B1 FD | 	call	#__system___string_cmp
05558     00 FA 0D F2 | 	cmp	result1, #0 wz
0555c     0C 04 90 AD |  if_e	jmp	#LR__0430
05560     83 01 00 FF 
05564     A3 15 06 F6 | 	mov	arg02, ##@LR__5296
05568     0F 13 02 F6 | 	mov	arg01, local01
0556c     A0 B5 B1 FD | 	call	#__system___string_cmp
05570     00 FA 0D F2 | 	cmp	result1, #0 wz
05574     FC 03 90 AD |  if_e	jmp	#LR__0431
05578     83 01 00 FF 
0557c     A8 15 06 F6 | 	mov	arg02, ##@LR__5297
05580     0F 13 02 F6 | 	mov	arg01, local01
05584     88 B5 B1 FD | 	call	#__system___string_cmp
05588     00 FA 0D F2 | 	cmp	result1, #0 wz
0558c     EC 03 90 AD |  if_e	jmp	#LR__0432
05590     83 01 00 FF 
05594     AC 15 06 F6 | 	mov	arg02, ##@LR__5298
05598     0F 13 02 F6 | 	mov	arg01, local01
0559c     70 B5 B1 FD | 	call	#__system___string_cmp
055a0     00 FA 0D F2 | 	cmp	result1, #0 wz
055a4     DC 03 90 AD |  if_e	jmp	#LR__0433
055a8     83 01 00 FF 
055ac     B1 15 06 F6 | 	mov	arg02, ##@LR__5299
055b0     0F 13 02 F6 | 	mov	arg01, local01
055b4     58 B5 B1 FD | 	call	#__system___string_cmp
055b8     00 FA 0D F2 | 	cmp	result1, #0 wz
055bc     CC 03 90 AD |  if_e	jmp	#LR__0434
055c0     83 01 00 FF 
055c4     B5 15 06 F6 | 	mov	arg02, ##@LR__5300
055c8     0F 13 02 F6 | 	mov	arg01, local01
055cc     40 B5 B1 FD | 	call	#__system___string_cmp
055d0     00 FA 0D F2 | 	cmp	result1, #0 wz
055d4     BC 03 90 AD |  if_e	jmp	#LR__0435
055d8     83 01 00 FF 
055dc     BA 15 06 F6 | 	mov	arg02, ##@LR__5301
055e0     0F 13 02 F6 | 	mov	arg01, local01
055e4     28 B5 B1 FD | 	call	#__system___string_cmp
055e8     00 FA 0D F2 | 	cmp	result1, #0 wz
055ec     AC 03 90 AD |  if_e	jmp	#LR__0436
055f0     83 01 00 FF 
055f4     BE 15 06 F6 | 	mov	arg02, ##@LR__5302
055f8     0F 13 02 F6 | 	mov	arg01, local01
055fc     10 B5 B1 FD | 	call	#__system___string_cmp
05600     00 FA 0D F2 | 	cmp	result1, #0 wz
05604     9C 03 90 AD |  if_e	jmp	#LR__0437
05608     83 01 00 FF 
0560c     C3 15 06 F6 | 	mov	arg02, ##@LR__5303
05610     0F 13 02 F6 | 	mov	arg01, local01
05614     F8 B4 B1 FD | 	call	#__system___string_cmp
05618     00 FA 0D F2 | 	cmp	result1, #0 wz
0561c     8C 03 90 AD |  if_e	jmp	#LR__0438
05620     83 01 00 FF 
05624     C8 15 06 F6 | 	mov	arg02, ##@LR__5304
05628     0F 13 02 F6 | 	mov	arg01, local01
0562c     E0 B4 B1 FD | 	call	#__system___string_cmp
05630     00 FA 0D F2 | 	cmp	result1, #0 wz
05634     7C 03 90 AD |  if_e	jmp	#LR__0439
05638     83 01 00 FF 
0563c     CC 15 06 F6 | 	mov	arg02, ##@LR__5305
05640     0F 13 02 F6 | 	mov	arg01, local01
05644     C8 B4 B1 FD | 	call	#__system___string_cmp
05648     00 FA 0D F2 | 	cmp	result1, #0 wz
0564c     6C 03 90 AD |  if_e	jmp	#LR__0440
05650     83 01 00 FF 
05654     D2 15 06 F6 | 	mov	arg02, ##@LR__5306
05658     0F 13 02 F6 | 	mov	arg01, local01
0565c     B0 B4 B1 FD | 	call	#__system___string_cmp
05660     00 FA 0D F2 | 	cmp	result1, #0 wz
05664     5C 03 90 AD |  if_e	jmp	#LR__0441
05668     83 01 00 FF 
0566c     D6 15 06 F6 | 	mov	arg02, ##@LR__5307
05670     0F 13 02 F6 | 	mov	arg01, local01
05674     98 B4 B1 FD | 	call	#__system___string_cmp
05678     00 FA 0D F2 | 	cmp	result1, #0 wz
0567c     4C 03 90 AD |  if_e	jmp	#LR__0442
05680     83 01 00 FF 
05684     DF 15 06 F6 | 	mov	arg02, ##@LR__5308
05688     0F 13 02 F6 | 	mov	arg01, local01
0568c     80 B4 B1 FD | 	call	#__system___string_cmp
05690     00 FA 0D F2 | 	cmp	result1, #0 wz
05694     3C 03 90 AD |  if_e	jmp	#LR__0443
05698     83 01 00 FF 
0569c     E3 15 06 F6 | 	mov	arg02, ##@LR__5309
056a0     0F 13 02 F6 | 	mov	arg01, local01
056a4     68 B4 B1 FD | 	call	#__system___string_cmp
056a8     00 FA 0D F2 | 	cmp	result1, #0 wz
056ac     2C 03 90 AD |  if_e	jmp	#LR__0444
056b0     83 01 00 FF 
056b4     F1 15 06 F6 | 	mov	arg02, ##@LR__5310
056b8     0F 13 02 F6 | 	mov	arg01, local01
056bc     50 B4 B1 FD | 	call	#__system___string_cmp
056c0     00 FA 0D F2 | 	cmp	result1, #0 wz
056c4     1C 03 90 AD |  if_e	jmp	#LR__0445
056c8     83 01 00 FF 
056cc     FE 15 06 F6 | 	mov	arg02, ##@LR__5311
056d0     0F 13 02 F6 | 	mov	arg01, local01
056d4     38 B4 B1 FD | 	call	#__system___string_cmp
056d8     00 FA 0D F2 | 	cmp	result1, #0 wz
056dc     0C 03 90 AD |  if_e	jmp	#LR__0446
056e0     84 01 00 FF 
056e4     06 14 06 F6 | 	mov	arg02, ##@LR__5312
056e8     0F 13 02 F6 | 	mov	arg01, local01
056ec     20 B4 B1 FD | 	call	#__system___string_cmp
056f0     00 FA 0D F2 | 	cmp	result1, #0 wz
056f4     FC 02 90 AD |  if_e	jmp	#LR__0447
056f8     84 01 00 FF 
056fc     0B 14 06 F6 | 	mov	arg02, ##@LR__5313
05700     0F 13 02 F6 | 	mov	arg01, local01
05704     08 B4 B1 FD | 	call	#__system___string_cmp
05708     00 FA 0D F2 | 	cmp	result1, #0 wz
0570c     EC 02 90 AD |  if_e	jmp	#LR__0448
05710     84 01 00 FF 
05714     12 14 06 F6 | 	mov	arg02, ##@LR__5314
05718     0F 13 02 F6 | 	mov	arg01, local01
0571c     F0 B3 B1 FD | 	call	#__system___string_cmp
05720     00 FA 0D F2 | 	cmp	result1, #0 wz
05724     DC 02 90 AD |  if_e	jmp	#LR__0449
05728     84 01 00 FF 
0572c     16 14 06 F6 | 	mov	arg02, ##@LR__5315
05730     0F 13 02 F6 | 	mov	arg01, local01
05734     D8 B3 B1 FD | 	call	#__system___string_cmp
05738     00 FA 0D F2 | 	cmp	result1, #0 wz
0573c     CC 02 90 AD |  if_e	jmp	#LR__0450
05740     84 01 00 FF 
05744     1C 14 06 F6 | 	mov	arg02, ##@LR__5316
05748     0F 13 02 F6 | 	mov	arg01, local01
0574c     C0 B3 B1 FD | 	call	#__system___string_cmp
05750     00 FA 0D F2 | 	cmp	result1, #0 wz
05754     BC 02 90 AD |  if_e	jmp	#LR__0451
05758     84 01 00 FF 
0575c     20 14 06 F6 | 	mov	arg02, ##@LR__5317
05760     0F 13 02 F6 | 	mov	arg01, local01
05764     A8 B3 B1 FD | 	call	#__system___string_cmp
05768     00 FA 0D F2 | 	cmp	result1, #0 wz
0576c     AC 02 90 AD |  if_e	jmp	#LR__0452
05770     84 01 00 FF 
05774     24 14 06 F6 | 	mov	arg02, ##@LR__5318
05778     0F 13 02 F6 | 	mov	arg01, local01
0577c     90 B3 B1 FD | 	call	#__system___string_cmp
05780     00 FA 0D F2 | 	cmp	result1, #0 wz
05784     9C 02 90 AD |  if_e	jmp	#LR__0453
05788     84 01 00 FF 
0578c     2A 14 06 F6 | 	mov	arg02, ##@LR__5319
05790     0F 13 02 F6 | 	mov	arg01, local01
05794     78 B3 B1 FD | 	call	#__system___string_cmp
05798     00 FA 0D F2 | 	cmp	result1, #0 wz
0579c     8C 02 90 AD |  if_e	jmp	#LR__0454
057a0     84 01 00 FF 
057a4     2F 14 06 F6 | 	mov	arg02, ##@LR__5320
057a8     0F 13 02 F6 | 	mov	arg01, local01
057ac     60 B3 B1 FD | 	call	#__system___string_cmp
057b0     00 FA 0D F2 | 	cmp	result1, #0 wz
057b4     7C 02 90 AD |  if_e	jmp	#LR__0455
057b8     84 01 00 FF 
057bc     36 14 06 F6 | 	mov	arg02, ##@LR__5321
057c0     0F 13 02 F6 | 	mov	arg01, local01
057c4     48 B3 B1 FD | 	call	#__system___string_cmp
057c8     00 FA 0D F2 | 	cmp	result1, #0 wz
057cc     6C 02 90 AD |  if_e	jmp	#LR__0456
057d0     84 01 00 FF 
057d4     3D 14 06 F6 | 	mov	arg02, ##@LR__5322
057d8     0F 13 02 F6 | 	mov	arg01, local01
057dc     30 B3 B1 FD | 	call	#__system___string_cmp
057e0     00 FA 0D F2 | 	cmp	result1, #0 wz
057e4     5C 02 90 AD |  if_e	jmp	#LR__0457
057e8     84 01 00 FF 
057ec     44 14 06 F6 | 	mov	arg02, ##@LR__5323
057f0     0F 13 02 F6 | 	mov	arg01, local01
057f4     18 B3 B1 FD | 	call	#__system___string_cmp
057f8     00 FA 0D F2 | 	cmp	result1, #0 wz
057fc     4C 02 90 AD |  if_e	jmp	#LR__0458
05800     84 01 00 FF 
05804     4B 14 06 F6 | 	mov	arg02, ##@LR__5324
05808     0F 13 02 F6 | 	mov	arg01, local01
0580c     00 B3 B1 FD | 	call	#__system___string_cmp
05810     00 FA 0D F2 | 	cmp	result1, #0 wz
05814     3C 02 90 AD |  if_e	jmp	#LR__0459
05818     84 01 00 FF 
0581c     50 14 06 F6 | 	mov	arg02, ##@LR__5325
05820     0F 13 02 F6 | 	mov	arg01, local01
05824     E8 B2 B1 FD | 	call	#__system___string_cmp
05828     00 FA 0D F2 | 	cmp	result1, #0 wz
0582c     2C 02 90 AD |  if_e	jmp	#LR__0460
05830     84 01 00 FF 
05834     58 14 06 F6 | 	mov	arg02, ##@LR__5326
05838     0F 13 02 F6 | 	mov	arg01, local01
0583c     D0 B2 B1 FD | 	call	#__system___string_cmp
05840     00 FA 0D F2 | 	cmp	result1, #0 wz
05844     1C 02 90 AD |  if_e	jmp	#LR__0461
05848     84 01 00 FF 
0584c     5E 14 06 F6 | 	mov	arg02, ##@LR__5327
05850     0F 13 02 F6 | 	mov	arg01, local01
05854     B8 B2 B1 FD | 	call	#__system___string_cmp
05858     00 FA 0D F2 | 	cmp	result1, #0 wz
0585c     0C 02 90 AD |  if_e	jmp	#LR__0462
05860     84 01 00 FF 
05864     65 14 06 F6 | 	mov	arg02, ##@LR__5328
05868     0F 13 02 F6 | 	mov	arg01, local01
0586c     A0 B2 B1 FD | 	call	#__system___string_cmp
05870     00 FA 0D F2 | 	cmp	result1, #0 wz
05874     FC 01 90 AD |  if_e	jmp	#LR__0463
05878     84 01 00 FF 
0587c     6B 14 06 F6 | 	mov	arg02, ##@LR__5329
05880     0F 13 02 F6 | 	mov	arg01, local01
05884     88 B2 B1 FD | 	call	#__system___string_cmp
05888     00 FA 0D F2 | 	cmp	result1, #0 wz
0588c     EC 01 90 AD |  if_e	jmp	#LR__0464
05890     84 01 00 FF 
05894     71 14 06 F6 | 	mov	arg02, ##@LR__5330
05898     0F 13 02 F6 | 	mov	arg01, local01
0589c     70 B2 B1 FD | 	call	#__system___string_cmp
058a0     00 FA 0D F2 | 	cmp	result1, #0 wz
058a4     DC 01 90 AD |  if_e	jmp	#LR__0465
058a8     84 01 00 FF 
058ac     75 14 06 F6 | 	mov	arg02, ##@LR__5331
058b0     0F 13 02 F6 | 	mov	arg01, local01
058b4     58 B2 B1 FD | 	call	#__system___string_cmp
058b8     00 FA 0D F2 | 	cmp	result1, #0 wz
058bc     CC 01 90 AD |  if_e	jmp	#LR__0466
058c0     84 01 00 FF 
058c4     79 14 06 F6 | 	mov	arg02, ##@LR__5332
058c8     0F 13 02 F6 | 	mov	arg01, local01
058cc     40 B2 B1 FD | 	call	#__system___string_cmp
058d0     00 FA 0D F2 | 	cmp	result1, #0 wz
058d4     BC 01 90 AD |  if_e	jmp	#LR__0467
058d8     84 01 00 FF 
058dc     7D 14 06 F6 | 	mov	arg02, ##@LR__5333
058e0     0F 13 02 F6 | 	mov	arg01, local01
058e4     28 B2 B1 FD | 	call	#__system___string_cmp
058e8     00 FA 0D F2 | 	cmp	result1, #0 wz
058ec     AC 01 90 AD |  if_e	jmp	#LR__0468
058f0     84 01 00 FF 
058f4     83 14 06 F6 | 	mov	arg02, ##@LR__5334
058f8     0F 13 02 F6 | 	mov	arg01, local01
058fc     10 B2 B1 FD | 	call	#__system___string_cmp
05900     00 FA 0D F2 | 	cmp	result1, #0 wz
05904     9C 01 90 AD |  if_e	jmp	#LR__0469
05908     84 01 00 FF 
0590c     89 14 06 F6 | 	mov	arg02, ##@LR__5335
05910     0F 13 02 F6 | 	mov	arg01, local01
05914     F8 B1 B1 FD | 	call	#__system___string_cmp
05918     00 FA 0D F2 | 	cmp	result1, #0 wz
0591c     8C 01 90 AD |  if_e	jmp	#LR__0470
05920     84 01 00 FF 
05924     8E 14 06 F6 | 	mov	arg02, ##@LR__5336
05928     0F 13 02 F6 | 	mov	arg01, local01
0592c     E0 B1 B1 FD | 	call	#__system___string_cmp
05930     00 FA 0D F2 | 	cmp	result1, #0 wz
05934     7C 01 90 AD |  if_e	jmp	#LR__0471
05938     84 01 00 FF 
0593c     92 14 06 F6 | 	mov	arg02, ##@LR__5337
05940     0F 13 02 F6 | 	mov	arg01, local01
05944     C8 B1 B1 FD | 	call	#__system___string_cmp
05948     00 FA 0D F2 | 	cmp	result1, #0 wz
0594c     6C 01 90 AD |  if_e	jmp	#LR__0472
05950     84 01 00 FF 
05954     96 14 06 F6 | 	mov	arg02, ##@LR__5338
05958     0F 13 02 F6 | 	mov	arg01, local01
0595c     B0 B1 B1 FD | 	call	#__system___string_cmp
05960     00 FA 0D F2 | 	cmp	result1, #0 wz
05964     5C 01 90 AD |  if_e	jmp	#LR__0473
05968     60 01 90 FD | 	jmp	#LR__0474
0596c                 | LR__0430
0596c     9E FA 05 F6 | 	mov	result1, #158
05970     5C 01 90 FD | 	jmp	#LR__0475
05974                 | LR__0431
05974     85 FA 05 F6 | 	mov	result1, #133
05978     54 01 90 FD | 	jmp	#LR__0475
0597c                 | LR__0432
0597c     9B FA 05 F6 | 	mov	result1, #155
05980     4C 01 90 FD | 	jmp	#LR__0475
05984                 | LR__0433
05984     9B FA 05 F6 | 	mov	result1, #155
05988     44 01 90 FD | 	jmp	#LR__0475
0598c                 | LR__0434
0598c     A7 FA 05 F6 | 	mov	result1, #167
05990     3C 01 90 FD | 	jmp	#LR__0475
05994                 | LR__0435
05994     84 FA 05 F6 | 	mov	result1, #132
05998     34 01 90 FD | 	jmp	#LR__0475
0599c                 | LR__0436
0599c     86 FA 05 F6 | 	mov	result1, #134
059a0     2C 01 90 FD | 	jmp	#LR__0475
059a4                 | LR__0437
059a4     A2 FA 05 F6 | 	mov	result1, #162
059a8     24 01 90 FD | 	jmp	#LR__0475
059ac                 | LR__0438
059ac     9F FA 05 F6 | 	mov	result1, #159
059b0     1C 01 90 FD | 	jmp	#LR__0475
059b4                 | LR__0439
059b4     82 FA 05 F6 | 	mov	result1, #130
059b8     14 01 90 FD | 	jmp	#LR__0475
059bc                 | LR__0440
059bc     99 FA 05 F6 | 	mov	result1, #153
059c0     0C 01 90 FD | 	jmp	#LR__0475
059c4                 | LR__0441
059c4     9C FA 05 F6 | 	mov	result1, #156
059c8     04 01 90 FD | 	jmp	#LR__0475
059cc                 | LR__0442
059cc     6F FA 05 F6 | 	mov	result1, #111
059d0     FC 00 90 FD | 	jmp	#LR__0475
059d4                 | LR__0443
059d4     6F FA 05 F6 | 	mov	result1, #111
059d8     F4 00 90 FD | 	jmp	#LR__0475
059dc                 | LR__0444
059dc     93 FA 05 F6 | 	mov	result1, #147
059e0     EC 00 90 FD | 	jmp	#LR__0475
059e4                 | LR__0445
059e4     94 FA 05 F6 | 	mov	result1, #148
059e8     E4 00 90 FD | 	jmp	#LR__0475
059ec                 | LR__0446
059ec     62 FA 05 F6 | 	mov	result1, #98
059f0     DC 00 90 FD | 	jmp	#LR__0475
059f4                 | LR__0447
059f4     A3 FA 05 F6 | 	mov	result1, #163
059f8     D4 00 90 FD | 	jmp	#LR__0475
059fc                 | LR__0448
059fc     9D FA 05 F6 | 	mov	result1, #157
05a00     CC 00 90 FD | 	jmp	#LR__0475
05a04                 | LR__0449
05a04     8A FA 05 F6 | 	mov	result1, #138
05a08     C4 00 90 FD | 	jmp	#LR__0475
05a0c                 | LR__0450
05a0c     A4 FA 05 F6 | 	mov	result1, #164
05a10     BC 00 90 FD | 	jmp	#LR__0475
05a14                 | LR__0451
05a14     A8 FA 05 F6 | 	mov	result1, #168
05a18     B4 00 90 FD | 	jmp	#LR__0475
05a1c                 | LR__0452
05a1c     AD FA 05 F6 | 	mov	result1, #173
05a20     AC 00 90 FD | 	jmp	#LR__0475
05a24                 | LR__0453
05a24     9A FA 05 F6 | 	mov	result1, #154
05a28     A4 00 90 FD | 	jmp	#LR__0475
05a2c                 | LR__0454
05a2c     A6 FA 05 F6 | 	mov	result1, #166
05a30     9C 00 90 FD | 	jmp	#LR__0475
05a34                 | LR__0455
05a34     66 FA 05 F6 | 	mov	result1, #102
05a38     94 00 90 FD | 	jmp	#LR__0475
05a3c                 | LR__0456
05a3c     67 FA 05 F6 | 	mov	result1, #103
05a40     8C 00 90 FD | 	jmp	#LR__0475
05a44                 | LR__0457
05a44     64 FA 05 F6 | 	mov	result1, #100
05a48     84 00 90 FD | 	jmp	#LR__0475
05a4c                 | LR__0458
05a4c     65 FA 05 F6 | 	mov	result1, #101
05a50     7C 00 90 FD | 	jmp	#LR__0475
05a54                 | LR__0459
05a54     98 FA 05 F6 | 	mov	result1, #152
05a58     74 00 90 FD | 	jmp	#LR__0475
05a5c                 | LR__0460
05a5c     7B FA 05 F6 | 	mov	result1, #123
05a60     6C 00 90 FD | 	jmp	#LR__0475
05a64                 | LR__0461
05a64     76 FA 05 F6 | 	mov	result1, #118
05a68     64 00 90 FD | 	jmp	#LR__0475
05a6c                 | LR__0462
05a6c     A5 FA 05 F6 | 	mov	result1, #165
05a70     5C 00 90 FD | 	jmp	#LR__0475
05a74                 | LR__0463
05a74     7A FA 05 F6 | 	mov	result1, #122
05a78     54 00 90 FD | 	jmp	#LR__0475
05a7c                 | LR__0464
05a7c     BF FA 05 F6 | 	mov	result1, #191
05a80     4C 00 90 FD | 	jmp	#LR__0475
05a84                 | LR__0465
05a84     54 FA 05 F6 | 	mov	result1, #84
05a88     44 00 90 FD | 	jmp	#LR__0475
05a8c                 | LR__0466
05a8c     6B FA 05 F6 | 	mov	result1, #107
05a90     3C 00 90 FD | 	jmp	#LR__0475
05a94                 | LR__0467
05a94     87 FA 05 F6 | 	mov	result1, #135
05a98     34 00 90 FD | 	jmp	#LR__0475
05a9c                 | LR__0468
05a9c     6A FA 05 F6 | 	mov	result1, #106
05aa0     2C 00 90 FD | 	jmp	#LR__0475
05aa4                 | LR__0469
05aa4     6E FA 05 F6 | 	mov	result1, #110
05aa8     24 00 90 FD | 	jmp	#LR__0475
05aac                 | LR__0470
05aac     A1 FA 05 F6 | 	mov	result1, #161
05ab0     1C 00 90 FD | 	jmp	#LR__0475
05ab4                 | LR__0471
05ab4     83 FA 05 F6 | 	mov	result1, #131
05ab8     14 00 90 FD | 	jmp	#LR__0475
05abc                 | LR__0472
05abc     A0 FA 05 F6 | 	mov	result1, #160
05ac0     0C 00 90 FD | 	jmp	#LR__0475
05ac4                 | LR__0473
05ac4     9B FA 05 F6 | 	mov	result1, #155
05ac8     04 00 90 FD | 	jmp	#LR__0475
05acc                 | LR__0474
05acc     00 FA 05 F6 | 	mov	result1, #0
05ad0                 | LR__0475
05ad0     A7 F0 03 F6 | 	mov	ptra, fp
05ad4     B2 00 A0 FD | 	call	#popregs_
05ad8                 | _isfunction_ret
05ad8     2D 00 64 FD | 	ret
05adc                 | 
05adc                 | ' 
05adc                 | ' ' Check if the part is a name
05adc                 | ' 
05adc                 | ' function isname(s as string) as boolean
05adc                 | _isname
05adc     0D 4A 05 F6 | 	mov	COUNT_, #13
05ae0     A8 00 A0 FD | 	call	#pushregs_
05ae4     09 1F 02 F6 | 	mov	local01, arg01
05ae8     09 21 02 F6 | 	mov	local02, arg01
05aec     97 06 48 FB | 	callpa	#(@LR__0481-@LR__0480)>>2,fcache_load_ptr_
05af0                 | LR__0480
05af0     10 FB C9 FA | 	rdbyte	result1, local02 wz
05af4     01 20 06 51 |  if_ne	add	local02, #1
05af8     F4 FF 9F 5D |  if_ne	jmp	#LR__0480
05afc                 | LR__0481
05afc     09 21 82 F1 | 	sub	local02, arg01
05b00     10 FB 01 F6 | 	mov	result1, local02
05b04     FD 22 0A F6 | 	mov	local03, result1 wz
05b08     00 FA 05 A6 |  if_e	mov	result1, #0
05b0c     34 02 90 AD |  if_e	jmp	#LR__0493
05b10     0F 13 02 F6 | 	mov	arg01, local01
05b14     01 14 06 F6 | 	mov	arg02, #1
05b18     01 16 06 F6 | 	mov	arg03, #1
05b1c     5C D1 B1 FD | 	call	#__system__Mid_S
05b20     FD 24 02 F6 | 	mov	local04, result1
05b24                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
05b24     84 01 00 FF 
05b28     9D 14 06 F6 | 	mov	arg02, ##@LR__5339
05b2c     12 13 02 F6 | 	mov	arg01, local04
05b30     DC AF B1 FD | 	call	#__system___string_cmp
05b34     00 FA 55 F2 | 	cmps	result1, #0 wc
05b38     18 00 90 CD |  if_b	jmp	#LR__0482
05b3c     84 01 00 FF 
05b40     9F 14 06 F6 | 	mov	arg02, ##@LR__5340
05b44     12 13 02 F6 | 	mov	arg01, local04
05b48     C4 AF B1 FD | 	call	#__system___string_cmp
05b4c     01 FA 55 F2 | 	cmps	result1, #1 wc
05b50     1C 00 90 CD |  if_b	jmp	#LR__0483
05b54                 | LR__0482
05b54     84 01 00 FF 
05b58     A1 14 06 F6 | 	mov	arg02, ##@LR__5341
05b5c     12 13 02 F6 | 	mov	arg01, local04
05b60     AC AF B1 FD | 	call	#__system___string_cmp
05b64     00 FA 0D F2 | 	cmp	result1, #0 wz
05b68     00 FA 05 56 |  if_ne	mov	result1, #0
05b6c     D4 01 90 5D |  if_ne	jmp	#LR__0493
05b70                 | LR__0483
05b70                 | ' if l>2 then 
05b70     03 22 56 F2 | 	cmps	local03, #3 wc
05b74     C8 01 90 CD |  if_b	jmp	#LR__0492
05b78                 | '   for i=2 to l
05b78     02 26 06 F6 | 	mov	local05, #2
05b7c     11 29 02 F6 | 	mov	local06, local03
05b80     01 28 06 F1 | 	add	local06, #1
05b84                 | LR__0484
05b84     14 27 52 F2 | 	cmps	local05, local06 wc
05b88     B4 01 90 3D |  if_ae	jmp	#LR__0491
05b8c     0F 13 02 F6 | 	mov	arg01, local01
05b90     13 15 02 F6 | 	mov	arg02, local05
05b94     01 16 06 F6 | 	mov	arg03, #1
05b98     E0 D0 B1 FD | 	call	#__system__Mid_S
05b9c     FD 24 02 F6 | 	mov	local04, result1
05ba0                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
05ba0     11 27 52 F2 | 	cmps	local05, local03 wc
05ba4     9C 00 90 3D |  if_ae	jmp	#LR__0487
05ba8     84 01 00 FF 
05bac     A3 14 06 F6 | 	mov	arg02, ##@LR__5342
05bb0     12 13 02 F6 | 	mov	arg01, local04
05bb4     58 AF B1 FD | 	call	#__system___string_cmp
05bb8     00 FA 55 F2 | 	cmps	result1, #0 wc
05bbc     18 00 90 CD |  if_b	jmp	#LR__0485
05bc0     84 01 00 FF 
05bc4     A5 14 06 F6 | 	mov	arg02, ##@LR__5343
05bc8     12 13 02 F6 | 	mov	arg01, local04
05bcc     40 AF B1 FD | 	call	#__system___string_cmp
05bd0     01 FA 55 F2 | 	cmps	result1, #1 wc
05bd4     6C 00 90 CD |  if_b	jmp	#LR__0487
05bd8                 | LR__0485
05bd8     84 01 00 FF 
05bdc     A7 14 06 F6 | 	mov	arg02, ##@LR__5344
05be0     12 13 02 F6 | 	mov	arg01, local04
05be4     28 AF B1 FD | 	call	#__system___string_cmp
05be8     00 FA 55 F2 | 	cmps	result1, #0 wc
05bec     18 00 90 CD |  if_b	jmp	#LR__0486
05bf0     84 01 00 FF 
05bf4     A9 14 06 F6 | 	mov	arg02, ##@LR__5345
05bf8     12 13 02 F6 | 	mov	arg01, local04
05bfc     10 AF B1 FD | 	call	#__system___string_cmp
05c00     01 FA 55 F2 | 	cmps	result1, #1 wc
05c04     3C 00 90 CD |  if_b	jmp	#LR__0487
05c08                 | LR__0486
05c08     84 01 00 FF 
05c0c     AB 2A 06 F6 | 	mov	local07, ##@LR__5346
05c10     12 13 02 F6 | 	mov	arg01, local04
05c14     15 15 02 F6 | 	mov	arg02, local07
05c18     F4 AE B1 FD | 	call	#__system___string_cmp
05c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
05c20     20 00 90 AD |  if_e	jmp	#LR__0487
05c24     84 01 00 FF 
05c28     AD 2C 06 F6 | 	mov	local08, ##@LR__5347
05c2c     12 13 02 F6 | 	mov	arg01, local04
05c30     16 15 02 F6 | 	mov	arg02, local08
05c34     D8 AE B1 FD | 	call	#__system___string_cmp
05c38     FD 2E 0A F6 | 	mov	local09, result1 wz
05c3c     00 FA 05 56 |  if_ne	mov	result1, #0
05c40     00 01 90 5D |  if_ne	jmp	#LR__0493
05c44                 | LR__0487
05c44                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
05c44     11 27 0A F2 | 	cmp	local05, local03 wz
05c48     EC 00 90 5D |  if_ne	jmp	#LR__0490
05c4c     84 01 00 FF 
05c50     AF 30 06 F6 | 	mov	local10, ##@LR__5348
05c54     12 13 02 F6 | 	mov	arg01, local04
05c58     18 15 02 F6 | 	mov	arg02, local10
05c5c     B0 AE B1 FD | 	call	#__system___string_cmp
05c60     FD 32 02 F6 | 	mov	local11, result1
05c64     00 32 56 F2 | 	cmps	local11, #0 wc
05c68     1C 00 90 CD |  if_b	jmp	#LR__0488
05c6c     84 01 00 FF 
05c70     B1 14 06 F6 | 	mov	arg02, ##@LR__5349
05c74     12 13 02 F6 | 	mov	arg01, local04
05c78     94 AE B1 FD | 	call	#__system___string_cmp
05c7c     FD 30 02 F6 | 	mov	local10, result1
05c80     01 30 56 F2 | 	cmps	local10, #1 wc
05c84     B0 00 90 CD |  if_b	jmp	#LR__0490
05c88                 | LR__0488
05c88     84 01 00 FF 
05c8c     B3 14 06 F6 | 	mov	arg02, ##@LR__5350
05c90     12 13 02 F6 | 	mov	arg01, local04
05c94     78 AE B1 FD | 	call	#__system___string_cmp
05c98     00 FA 55 F2 | 	cmps	result1, #0 wc
05c9c     1C 00 90 CD |  if_b	jmp	#LR__0489
05ca0     84 01 00 FF 
05ca4     B5 2E 06 F6 | 	mov	local09, ##@LR__5351
05ca8     12 13 02 F6 | 	mov	arg01, local04
05cac     17 15 02 F6 | 	mov	arg02, local09
05cb0     5C AE B1 FD | 	call	#__system___string_cmp
05cb4     01 FA 55 F2 | 	cmps	result1, #1 wc
05cb8     7C 00 90 CD |  if_b	jmp	#LR__0490
05cbc                 | LR__0489
05cbc     84 01 00 FF 
05cc0     B7 2E 06 F6 | 	mov	local09, ##@LR__5352
05cc4     12 13 02 F6 | 	mov	arg01, local04
05cc8     17 15 02 F6 | 	mov	arg02, local09
05ccc     40 AE B1 FD | 	call	#__system___string_cmp
05cd0     00 FA 4D F2 | 	cmps	result1, #0 wz
05cd4     60 00 90 AD |  if_e	jmp	#LR__0490
05cd8     84 01 00 FF 
05cdc     B9 2C 06 F6 | 	mov	local08, ##@LR__5353
05ce0     12 13 02 F6 | 	mov	arg01, local04
05ce4     16 15 02 F6 | 	mov	arg02, local08
05ce8     24 AE B1 FD | 	call	#__system___string_cmp
05cec     FD 2E 0A F6 | 	mov	local09, result1 wz
05cf0     44 00 90 AD |  if_e	jmp	#LR__0490
05cf4     84 01 00 FF 
05cf8     BB 34 06 F6 | 	mov	local12, ##@LR__5354
05cfc     1A 2D 02 F6 | 	mov	local08, local12
05d00     12 13 02 F6 | 	mov	arg01, local04
05d04     16 15 02 F6 | 	mov	arg02, local08
05d08     04 AE B1 FD | 	call	#__system___string_cmp
05d0c     FD 2A 0A F6 | 	mov	local07, result1 wz
05d10     24 00 90 AD |  if_e	jmp	#LR__0490
05d14     84 01 00 FF 
05d18     BD 36 06 F6 | 	mov	local13, ##@LR__5355
05d1c     1B 35 02 F6 | 	mov	local12, local13
05d20     12 13 02 F6 | 	mov	arg01, local04
05d24     1A 15 02 F6 | 	mov	arg02, local12
05d28     E4 AD B1 FD | 	call	#__system___string_cmp
05d2c     FD 2C 0A F6 | 	mov	local08, result1 wz
05d30     00 FA 05 56 |  if_ne	mov	result1, #0
05d34     0C 00 90 5D |  if_ne	jmp	#LR__0493
05d38                 | LR__0490
05d38     01 26 06 F1 | 	add	local05, #1
05d3c     44 FE 9F FD | 	jmp	#LR__0484
05d40                 | LR__0491
05d40                 | LR__0492
05d40                 | ' return true
05d40     01 FA 65 F6 | 	neg	result1, #1
05d44                 | LR__0493
05d44     A7 F0 03 F6 | 	mov	ptra, fp
05d48     B2 00 A0 FD | 	call	#popregs_
05d4c                 | _isname_ret
05d4c     2D 00 64 FD | 	ret
05d50                 | 
05d50                 | ' 
05d50                 | ' ' Check if the part is a number.  
05d50                 | ' 
05d50                 | ' function isnum(s as string) as boolean 
05d50                 | _isnum
05d50     13 4A 05 F6 | 	mov	COUNT_, #19
05d54     A8 00 A0 FD | 	call	#pushregs_
05d58     09 1F 02 F6 | 	mov	local01, arg01
05d5c     00 20 06 F6 | 	mov	local02, #0
05d60     00 22 06 F6 | 	mov	local03, #0
05d64     0F 13 02 F6 | 	mov	arg01, local01
05d68     09 25 02 F6 | 	mov	local04, arg01
05d6c     97 06 48 FB | 	callpa	#(@LR__0501-@LR__0500)>>2,fcache_load_ptr_
05d70                 | LR__0500
05d70     12 FB C9 FA | 	rdbyte	result1, local04 wz
05d74     01 24 06 51 |  if_ne	add	local04, #1
05d78     F4 FF 9F 5D |  if_ne	jmp	#LR__0500
05d7c                 | LR__0501
05d7c     09 25 82 F1 | 	sub	local04, arg01
05d80     12 FB 01 F6 | 	mov	result1, local04
05d84     FD 26 0A F6 | 	mov	local05, result1 wz
05d88     00 FA 05 A6 |  if_e	mov	result1, #0
05d8c     A0 03 90 AD |  if_e	jmp	#LR__0516
05d90     0F 13 02 F6 | 	mov	arg01, local01
05d94     01 14 06 F6 | 	mov	arg02, #1
05d98     01 16 06 F6 | 	mov	arg03, #1
05d9c     DC CE B1 FD | 	call	#__system__Mid_S
05da0     FD 28 02 F6 | 	mov	local06, result1
05da4                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
05da4     84 01 00 FF 
05da8     BF 14 06 F6 | 	mov	arg02, ##@LR__5356
05dac     14 13 02 F6 | 	mov	arg01, local06
05db0     5C AD B1 FD | 	call	#__system___string_cmp
05db4     00 FA 55 F2 | 	cmps	result1, #0 wc
05db8     1C 00 90 CD |  if_b	jmp	#LR__0502
05dbc     84 01 00 FF 
05dc0     C1 2A 06 F6 | 	mov	local07, ##@LR__5357
05dc4     14 13 02 F6 | 	mov	arg01, local06
05dc8     15 15 02 F6 | 	mov	arg02, local07
05dcc     40 AD B1 FD | 	call	#__system___string_cmp
05dd0     01 FA 55 F2 | 	cmps	result1, #1 wc
05dd4     84 00 90 CD |  if_b	jmp	#LR__0503
05dd8                 | LR__0502
05dd8     84 01 00 FF 
05ddc     C3 2C 06 F6 | 	mov	local08, ##@LR__5358
05de0     16 2B 02 F6 | 	mov	local07, local08
05de4     14 13 02 F6 | 	mov	arg01, local06
05de8     15 15 02 F6 | 	mov	arg02, local07
05dec     20 AD B1 FD | 	call	#__system___string_cmp
05df0     00 FA 0D F2 | 	cmp	result1, #0 wz
05df4     64 00 90 AD |  if_e	jmp	#LR__0503
05df8     84 01 00 FF 
05dfc     C5 2E 06 F6 | 	mov	local09, ##@LR__5359
05e00     17 2D 02 F6 | 	mov	local08, local09
05e04     14 13 02 F6 | 	mov	arg01, local06
05e08     16 15 02 F6 | 	mov	arg02, local08
05e0c     00 AD B1 FD | 	call	#__system___string_cmp
05e10     FD 2A 0A F6 | 	mov	local07, result1 wz
05e14     44 00 90 AD |  if_e	jmp	#LR__0503
05e18     84 01 00 FF 
05e1c     C7 30 06 F6 | 	mov	local10, ##@LR__5360
05e20     18 2F 02 F6 | 	mov	local09, local10
05e24     14 13 02 F6 | 	mov	arg01, local06
05e28     17 15 02 F6 | 	mov	arg02, local09
05e2c     E0 AC B1 FD | 	call	#__system___string_cmp
05e30     FD 2C 0A F6 | 	mov	local08, result1 wz
05e34     24 00 90 AD |  if_e	jmp	#LR__0503
05e38     84 01 00 FF 
05e3c     C9 32 06 F6 | 	mov	local11, ##@LR__5361
05e40     19 31 02 F6 | 	mov	local10, local11
05e44     14 13 02 F6 | 	mov	arg01, local06
05e48     18 15 02 F6 | 	mov	arg02, local10
05e4c     C0 AC B1 FD | 	call	#__system___string_cmp
05e50     FD 2E 0A F6 | 	mov	local09, result1 wz
05e54     00 FA 05 56 |  if_ne	mov	result1, #0
05e58     D4 02 90 5D |  if_ne	jmp	#LR__0516
05e5c                 | LR__0503
05e5c                 | ' if m$="." then ds=1
05e5c     84 01 00 FF 
05e60     CB 14 06 F6 | 	mov	arg02, ##@LR__5362
05e64     14 13 02 F6 | 	mov	arg01, local06
05e68     A4 AC B1 FD | 	call	#__system___string_cmp
05e6c     00 FA 0D F2 | 	cmp	result1, #0 wz
05e70     01 20 06 A6 |  if_e	mov	local02, #1
05e74                 | ' if m$="$" then hex=1 else hex=0
05e74     84 01 00 FF 
05e78     CD 14 06 F6 | 	mov	arg02, ##@LR__5363
05e7c     14 13 02 F6 | 	mov	arg01, local06
05e80     8C AC B1 FD | 	call	#__system___string_cmp
05e84     00 FA 0D F2 | 	cmp	result1, #0 wz
05e88     01 34 06 A6 |  if_e	mov	local12, #1
05e8c     00 34 06 56 |  if_ne	mov	local12, #0
05e90                 | ' if m$="%" then bin=1 else bin=0
05e90     84 01 00 FF 
05e94     CF 14 06 F6 | 	mov	arg02, ##@LR__5364
05e98     14 13 02 F6 | 	mov	arg01, local06
05e9c     70 AC B1 FD | 	call	#__system___string_cmp
05ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ea4     01 36 06 A6 |  if_e	mov	local13, #1
05ea8     00 36 06 56 |  if_ne	mov	local13, #0
05eac                 | ' if l>1 then 
05eac     02 26 56 F2 | 	cmps	local05, #2 wc
05eb0     78 02 90 CD |  if_b	jmp	#LR__0515
05eb4                 | '   for i=2 to l
05eb4     02 38 06 F6 | 	mov	local14, #2
05eb8     13 3B 02 F6 | 	mov	local15, local05
05ebc     01 3A 06 F1 | 	add	local15, #1
05ec0                 | LR__0504
05ec0     1D 39 52 F2 | 	cmps	local14, local15 wc
05ec4     64 02 90 3D |  if_ae	jmp	#LR__0514
05ec8     0F 13 02 F6 | 	mov	arg01, local01
05ecc     1C 15 02 F6 | 	mov	arg02, local14
05ed0     01 16 06 F6 | 	mov	arg03, #1
05ed4     A4 CD B1 FD | 	call	#__system__Mid_S
05ed8     FD 28 02 F6 | 	mov	local06, result1
05edc     00 3C 06 F6 | 	mov	local16, #0
05ee0                 | '     m$=mid$(s,i,1) : b=false
05ee0                 | '     if m$>="0" andalso m$<="9" then b=true  
05ee0     84 01 00 FF 
05ee4     D1 14 06 F6 | 	mov	arg02, ##@LR__5365
05ee8     14 13 02 F6 | 	mov	arg01, local06
05eec     20 AC B1 FD | 	call	#__system___string_cmp
05ef0     00 FA 55 F2 | 	cmps	result1, #0 wc
05ef4     1C 00 90 CD |  if_b	jmp	#LR__0505
05ef8     84 01 00 FF 
05efc     D3 2A 06 F6 | 	mov	local07, ##@LR__5366
05f00     14 13 02 F6 | 	mov	arg01, local06
05f04     15 15 02 F6 | 	mov	arg02, local07
05f08     04 AC B1 FD | 	call	#__system___string_cmp
05f0c     01 FA 55 F2 | 	cmps	result1, #1 wc
05f10     01 3C 66 C6 |  if_b	neg	local16, #1
05f14                 | LR__0505
05f14                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
05f14     84 01 00 FF 
05f18     D5 14 06 F6 | 	mov	arg02, ##@LR__5367
05f1c     14 13 02 F6 | 	mov	arg01, local06
05f20     EC AB B1 FD | 	call	#__system___string_cmp
05f24     00 FA 0D F2 | 	cmp	result1, #0 wz
05f28     7C 00 90 AD |  if_e	jmp	#LR__0506
05f2c     84 01 00 FF 
05f30     D7 2A 06 F6 | 	mov	local07, ##@LR__5368
05f34     14 13 02 F6 | 	mov	arg01, local06
05f38     15 15 02 F6 | 	mov	arg02, local07
05f3c     D0 AB B1 FD | 	call	#__system___string_cmp
05f40     00 FA 0D F2 | 	cmp	result1, #0 wz
05f44     60 00 90 AD |  if_e	jmp	#LR__0506
05f48     84 01 00 FF 
05f4c     D9 2C 06 F6 | 	mov	local08, ##@LR__5369
05f50     16 2B 02 F6 | 	mov	local07, local08
05f54     14 13 02 F6 | 	mov	arg01, local06
05f58     15 15 02 F6 | 	mov	arg02, local07
05f5c     B0 AB B1 FD | 	call	#__system___string_cmp
05f60     00 FA 0D F2 | 	cmp	result1, #0 wz
05f64     40 00 90 AD |  if_e	jmp	#LR__0506
05f68     84 01 00 FF 
05f6c     DB 2E 06 F6 | 	mov	local09, ##@LR__5370
05f70     17 2D 02 F6 | 	mov	local08, local09
05f74     14 13 02 F6 | 	mov	arg01, local06
05f78     16 15 02 F6 | 	mov	arg02, local08
05f7c     90 AB B1 FD | 	call	#__system___string_cmp
05f80     FD 2A 0A F6 | 	mov	local07, result1 wz
05f84     20 00 90 AD |  if_e	jmp	#LR__0506
05f88     84 01 00 FF 
05f8c     DD 30 06 F6 | 	mov	local10, ##@LR__5371
05f90     18 2F 02 F6 | 	mov	local09, local10
05f94     14 13 02 F6 | 	mov	arg01, local06
05f98     17 15 02 F6 | 	mov	arg02, local09
05f9c     70 AB B1 FD | 	call	#__system___string_cmp
05fa0     FD 2C 0A F6 | 	mov	local08, result1 wz
05fa4     04 00 90 5D |  if_ne	jmp	#LR__0507
05fa8                 | LR__0506
05fa8     01 3C 66 F6 | 	neg	local16, #1
05fac                 | LR__0507
05fac                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
05fac     01 34 0E F2 | 	cmp	local12, #1 wz
05fb0     34 00 90 5D |  if_ne	jmp	#LR__0508
05fb4     84 01 00 FF 
05fb8     DF 14 06 F6 | 	mov	arg02, ##@LR__5372
05fbc     14 13 02 F6 | 	mov	arg01, local06
05fc0     4C AB B1 FD | 	call	#__system___string_cmp
05fc4     00 FA 55 F2 | 	cmps	result1, #0 wc
05fc8     1C 00 90 CD |  if_b	jmp	#LR__0508
05fcc     84 01 00 FF 
05fd0     E1 2A 06 F6 | 	mov	local07, ##@LR__5373
05fd4     14 13 02 F6 | 	mov	arg01, local06
05fd8     15 15 02 F6 | 	mov	arg02, local07
05fdc     30 AB B1 FD | 	call	#__system___string_cmp
05fe0     01 FA 55 F2 | 	cmps	result1, #1 wc
05fe4     01 3C 66 C6 |  if_b	neg	local16, #1
05fe8                 | LR__0508
05fe8                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
05fe8     01 36 0E F2 | 	cmp	local13, #1 wz
05fec     58 00 90 5D |  if_ne	jmp	#LR__0510
05ff0     84 01 00 FF 
05ff4     E3 14 06 F6 | 	mov	arg02, ##@LR__5374
05ff8     14 13 02 F6 | 	mov	arg01, local06
05ffc     10 AB B1 FD | 	call	#__system___string_cmp
06000     00 FA 55 F2 | 	cmps	result1, #0 wc
06004     1C 00 90 CD |  if_b	jmp	#LR__0509
06008     84 01 00 FF 
0600c     E5 2A 06 F6 | 	mov	local07, ##@LR__5375
06010     14 13 02 F6 | 	mov	arg01, local06
06014     15 15 02 F6 | 	mov	arg02, local07
06018     F4 AA B1 FD | 	call	#__system___string_cmp
0601c     01 FA 55 F2 | 	cmps	result1, #1 wc
06020     24 00 90 CD |  if_b	jmp	#LR__0510
06024                 | LR__0509
06024     84 01 00 FF 
06028     E7 2C 06 F6 | 	mov	local08, ##@LR__5376
0602c     16 2B 02 F6 | 	mov	local07, local08
06030     14 13 02 F6 | 	mov	arg01, local06
06034     15 15 02 F6 | 	mov	arg02, local07
06038     D4 AA B1 FD | 	call	#__system___string_cmp
0603c     00 FA 0D F2 | 	cmp	result1, #0 wz
06040     00 FA 05 56 |  if_ne	mov	result1, #0
06044     E8 00 90 5D |  if_ne	jmp	#LR__0516
06048                 | LR__0510
06048                 | '     if not b then return false
06048     1E 3D 22 F6 | 	not	local16, local16
0604c     00 3C 0E F2 | 	cmp	local16, #0 wz
06050     00 FA 05 56 |  if_ne	mov	result1, #0
06054     D8 00 90 5D |  if_ne	jmp	#LR__0516
06058                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06058     84 01 00 FF 
0605c     E9 14 06 F6 | 	mov	arg02, ##@LR__5377
06060     14 13 02 F6 | 	mov	arg01, local06
06064     A8 AA B1 FD | 	call	#__system___string_cmp
06068     00 FA 0D F2 | 	cmp	result1, #0 wz
0606c     3C 00 90 5D |  if_ne	jmp	#LR__0511
06070     1C 15 02 F6 | 	mov	arg02, local14
06074     01 14 86 F1 | 	sub	arg02, #1
06078     0F 13 02 F6 | 	mov	arg01, local01
0607c     01 16 06 F6 | 	mov	arg03, #1
06080     F8 CB B1 FD | 	call	#__system__Mid_S
06084     FD 12 02 F6 | 	mov	arg01, result1
06088     E8 CD B1 FD | 	call	#__system__LCase_S
0608c     FD 12 02 F6 | 	mov	arg01, result1
06090     84 01 00 FF 
06094     EB 2A 06 F6 | 	mov	local07, ##@LR__5378
06098     15 15 02 F6 | 	mov	arg02, local07
0609c     70 AA B1 FD | 	call	#__system___string_cmp
060a0     00 FA 0D F2 | 	cmp	result1, #0 wz
060a4     00 FA 05 56 |  if_ne	mov	result1, #0
060a8     84 00 90 5D |  if_ne	jmp	#LR__0516
060ac                 | LR__0511
060ac                 | '     if m$="." then ds+=1: if ds>1 then return false
060ac     84 01 00 FF 
060b0     ED 14 06 F6 | 	mov	arg02, ##@LR__5379
060b4     14 13 02 F6 | 	mov	arg01, local06
060b8     54 AA B1 FD | 	call	#__system___string_cmp
060bc     00 FA 0D F2 | 	cmp	result1, #0 wz
060c0     01 20 06 A1 |  if_e	add	local02, #1
060c4     02 20 56 A2 |  if_e	cmps	local02, #2 wc
060c8     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
060cc     60 00 90 2D |  if_nc_and_z	jmp	#LR__0516
060d0                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
060d0     84 01 00 FF 
060d4     EF 3E 06 F6 | 	mov	local17, ##@LR__5380
060d8     1F 41 02 F6 | 	mov	local18, local17
060dc     14 13 02 F6 | 	mov	arg01, local06
060e0     20 15 02 F6 | 	mov	arg02, local18
060e4     28 AA B1 FD | 	call	#__system___string_cmp
060e8     FD 42 0A F6 | 	mov	local19, result1 wz
060ec     20 00 90 AD |  if_e	jmp	#LR__0512
060f0     84 01 00 FF 
060f4     F1 2A 06 F6 | 	mov	local07, ##@LR__5381
060f8     15 3F 02 F6 | 	mov	local17, local07
060fc     14 13 02 F6 | 	mov	arg01, local06
06100     1F 15 02 F6 | 	mov	arg02, local17
06104     08 AA B1 FD | 	call	#__system___string_cmp
06108     FD 40 0A F6 | 	mov	local18, result1 wz
0610c     14 00 90 5D |  if_ne	jmp	#LR__0513
06110                 | LR__0512
06110     01 22 06 F1 | 	add	local03, #1
06114     00 34 0E F2 | 	cmp	local12, #0 wz
06118     02 22 56 A2 |  if_e	cmps	local03, #2 wc
0611c     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06120     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0516
06124                 | LR__0513
06124     01 38 06 F1 | 	add	local14, #1
06128     94 FD 9F FD | 	jmp	#LR__0504
0612c                 | LR__0514
0612c                 | LR__0515
0612c                 | ' return true
0612c     01 FA 65 F6 | 	neg	result1, #1
06130                 | LR__0516
06130     A7 F0 03 F6 | 	mov	ptra, fp
06134     B2 00 A0 FD | 	call	#popregs_
06138                 | _isnum_ret
06138     2D 00 64 FD | 	ret
0613c                 | 
0613c                 | '   
0613c                 | ' ' Check if the part is an integer number.    
0613c                 | '   
0613c                 | ' function isint(s as string) as boolean
0613c                 | _isint
0613c     0E 4A 05 F6 | 	mov	COUNT_, #14
06140     A8 00 A0 FD | 	call	#pushregs_
06144     09 1F 02 F6 | 	mov	local01, arg01
06148     09 21 02 F6 | 	mov	local02, arg01
0614c     97 06 48 FB | 	callpa	#(@LR__0521-@LR__0520)>>2,fcache_load_ptr_
06150                 | LR__0520
06150     10 FB C9 FA | 	rdbyte	result1, local02 wz
06154     01 20 06 51 |  if_ne	add	local02, #1
06158     F4 FF 9F 5D |  if_ne	jmp	#LR__0520
0615c                 | LR__0521
0615c     09 21 82 F1 | 	sub	local02, arg01
06160     10 FB 01 F6 | 	mov	result1, local02
06164     FD 22 0A F6 | 	mov	local03, result1 wz
06168     00 FA 05 A6 |  if_e	mov	result1, #0
0616c     64 02 90 AD |  if_e	jmp	#LR__0534
06170     0F 13 02 F6 | 	mov	arg01, local01
06174     01 14 06 F6 | 	mov	arg02, #1
06178     01 16 06 F6 | 	mov	arg03, #1
0617c     FC CA B1 FD | 	call	#__system__Mid_S
06180     FD 24 02 F6 | 	mov	local04, result1
06184                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06184     84 01 00 FF 
06188     F3 14 06 F6 | 	mov	arg02, ##@LR__5382
0618c     12 13 02 F6 | 	mov	arg01, local04
06190     7C A9 B1 FD | 	call	#__system___string_cmp
06194     00 FA 55 F2 | 	cmps	result1, #0 wc
06198     1C 00 90 CD |  if_b	jmp	#LR__0522
0619c     84 01 00 FF 
061a0     F5 26 06 F6 | 	mov	local05, ##@LR__5383
061a4     12 13 02 F6 | 	mov	arg01, local04
061a8     13 15 02 F6 | 	mov	arg02, local05
061ac     60 A9 B1 FD | 	call	#__system___string_cmp
061b0     01 FA 55 F2 | 	cmps	result1, #1 wc
061b4     64 00 90 CD |  if_b	jmp	#LR__0523
061b8                 | LR__0522
061b8     84 01 00 FF 
061bc     F7 28 06 F6 | 	mov	local06, ##@LR__5384
061c0     14 27 02 F6 | 	mov	local05, local06
061c4     12 13 02 F6 | 	mov	arg01, local04
061c8     13 15 02 F6 | 	mov	arg02, local05
061cc     40 A9 B1 FD | 	call	#__system___string_cmp
061d0     00 FA 0D F2 | 	cmp	result1, #0 wz
061d4     44 00 90 AD |  if_e	jmp	#LR__0523
061d8     84 01 00 FF 
061dc     F9 2A 06 F6 | 	mov	local07, ##@LR__5385
061e0     15 29 02 F6 | 	mov	local06, local07
061e4     12 13 02 F6 | 	mov	arg01, local04
061e8     14 15 02 F6 | 	mov	arg02, local06
061ec     20 A9 B1 FD | 	call	#__system___string_cmp
061f0     FD 26 0A F6 | 	mov	local05, result1 wz
061f4     24 00 90 AD |  if_e	jmp	#LR__0523
061f8     84 01 00 FF 
061fc     FB 2C 06 F6 | 	mov	local08, ##@LR__5386
06200     16 2B 02 F6 | 	mov	local07, local08
06204     12 13 02 F6 | 	mov	arg01, local04
06208     15 15 02 F6 | 	mov	arg02, local07
0620c     00 A9 B1 FD | 	call	#__system___string_cmp
06210     FD 28 0A F6 | 	mov	local06, result1 wz
06214     00 FA 05 56 |  if_ne	mov	result1, #0
06218     B8 01 90 5D |  if_ne	jmp	#LR__0534
0621c                 | LR__0523
0621c                 | ' if m$="$" then hex=1 else hex=0
0621c     84 01 00 FF 
06220     FD 14 06 F6 | 	mov	arg02, ##@LR__5387
06224     12 13 02 F6 | 	mov	arg01, local04
06228     E4 A8 B1 FD | 	call	#__system___string_cmp
0622c     00 FA 0D F2 | 	cmp	result1, #0 wz
06230     01 2E 06 A6 |  if_e	mov	local09, #1
06234     00 2E 06 56 |  if_ne	mov	local09, #0
06238                 | ' if m$="%" then bin=1 else bin=0
06238     84 01 00 FF 
0623c     FF 14 06 F6 | 	mov	arg02, ##@LR__5388
06240     12 13 02 F6 | 	mov	arg01, local04
06244     C8 A8 B1 FD | 	call	#__system___string_cmp
06248     00 FA 0D F2 | 	cmp	result1, #0 wz
0624c     01 30 06 A6 |  if_e	mov	local10, #1
06250     00 30 06 56 |  if_ne	mov	local10, #0
06254                 | ' if l>1 then 
06254     02 22 56 F2 | 	cmps	local03, #2 wc
06258     74 01 90 CD |  if_b	jmp	#LR__0533
0625c                 | '   for i=2 to l
0625c     02 32 06 F6 | 	mov	local11, #2
06260     11 35 02 F6 | 	mov	local12, local03
06264     01 34 06 F1 | 	add	local12, #1
06268                 | LR__0524
06268     1A 33 52 F2 | 	cmps	local11, local12 wc
0626c     60 01 90 3D |  if_ae	jmp	#LR__0532
06270     0F 13 02 F6 | 	mov	arg01, local01
06274     19 15 02 F6 | 	mov	arg02, local11
06278     01 16 06 F6 | 	mov	arg03, #1
0627c     FC C9 B1 FD | 	call	#__system__Mid_S
06280     FD 24 02 F6 | 	mov	local04, result1
06284                 | '     m$=mid$(s,i,1) 
06284                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06284     00 2E 0E F2 | 	cmp	local09, #0 wz
06288     50 00 90 5D |  if_ne	jmp	#LR__0526
0628c     84 01 00 FF 
06290     01 15 06 F6 | 	mov	arg02, ##@LR__5389
06294     12 13 02 F6 | 	mov	arg01, local04
06298     74 A8 B1 FD | 	call	#__system___string_cmp
0629c     00 FA 55 F2 | 	cmps	result1, #0 wc
062a0     18 00 90 CD |  if_b	jmp	#LR__0525
062a4     84 01 00 FF 
062a8     03 15 06 F6 | 	mov	arg02, ##@LR__5390
062ac     12 13 02 F6 | 	mov	arg01, local04
062b0     5C A8 B1 FD | 	call	#__system___string_cmp
062b4     01 FA 55 F2 | 	cmps	result1, #1 wc
062b8     20 00 90 CD |  if_b	jmp	#LR__0526
062bc                 | LR__0525
062bc     84 01 00 FF 
062c0     05 29 06 F6 | 	mov	local06, ##@LR__5391
062c4     12 13 02 F6 | 	mov	arg01, local04
062c8     14 15 02 F6 | 	mov	arg02, local06
062cc     40 A8 B1 FD | 	call	#__system___string_cmp
062d0     00 FA 0D F2 | 	cmp	result1, #0 wz
062d4     00 FA 05 56 |  if_ne	mov	result1, #0
062d8     F8 00 90 5D |  if_ne	jmp	#LR__0534
062dc                 | LR__0526
062dc                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
062dc     01 2E 0E F2 | 	cmp	local09, #1 wz
062e0     90 00 90 5D |  if_ne	jmp	#LR__0529
062e4     84 01 00 FF 
062e8     07 15 06 F6 | 	mov	arg02, ##@LR__5392
062ec     12 13 02 F6 | 	mov	arg01, local04
062f0     1C A8 B1 FD | 	call	#__system___string_cmp
062f4     00 FA 55 F2 | 	cmps	result1, #0 wc
062f8     1C 00 90 CD |  if_b	jmp	#LR__0527
062fc     84 01 00 FF 
06300     09 15 06 F6 | 	mov	arg02, ##@LR__5393
06304     12 13 02 F6 | 	mov	arg01, local04
06308     04 A8 B1 FD | 	call	#__system___string_cmp
0630c     FD 36 02 F6 | 	mov	local13, result1
06310     01 36 56 F2 | 	cmps	local13, #1 wc
06314     5C 00 90 CD |  if_b	jmp	#LR__0529
06318                 | LR__0527
06318     84 01 00 FF 
0631c     0B 27 06 F6 | 	mov	local05, ##@LR__5394
06320     12 13 02 F6 | 	mov	arg01, local04
06324     13 15 02 F6 | 	mov	arg02, local05
06328     E4 A7 B1 FD | 	call	#__system___string_cmp
0632c     FD 38 02 F6 | 	mov	local14, result1
06330     00 38 56 F2 | 	cmps	local14, #0 wc
06334     1C 00 90 CD |  if_b	jmp	#LR__0528
06338     84 01 00 FF 
0633c     0D 2B 06 F6 | 	mov	local07, ##@LR__5395
06340     12 13 02 F6 | 	mov	arg01, local04
06344     15 15 02 F6 | 	mov	arg02, local07
06348     C4 A7 B1 FD | 	call	#__system___string_cmp
0634c     01 FA 55 F2 | 	cmps	result1, #1 wc
06350     20 00 90 CD |  if_b	jmp	#LR__0529
06354                 | LR__0528
06354     84 01 00 FF 
06358     0F 2D 06 F6 | 	mov	local08, ##@LR__5396
0635c     12 13 02 F6 | 	mov	arg01, local04
06360     16 15 02 F6 | 	mov	arg02, local08
06364     A8 A7 B1 FD | 	call	#__system___string_cmp
06368     00 FA 0D F2 | 	cmp	result1, #0 wz
0636c     00 FA 05 56 |  if_ne	mov	result1, #0
06370     60 00 90 5D |  if_ne	jmp	#LR__0534
06374                 | LR__0529
06374                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
06374     01 30 0E F2 | 	cmp	local10, #1 wz
06378     4C 00 90 5D |  if_ne	jmp	#LR__0531
0637c     84 01 00 FF 
06380     11 15 06 F6 | 	mov	arg02, ##@LR__5397
06384     12 13 02 F6 | 	mov	arg01, local04
06388     84 A7 B1 FD | 	call	#__system___string_cmp
0638c     00 FA 55 F2 | 	cmps	result1, #0 wc
06390     18 00 90 CD |  if_b	jmp	#LR__0530
06394     84 01 00 FF 
06398     13 15 06 F6 | 	mov	arg02, ##@LR__5398
0639c     12 13 02 F6 | 	mov	arg01, local04
063a0     6C A7 B1 FD | 	call	#__system___string_cmp
063a4     01 FA 55 F2 | 	cmps	result1, #1 wc
063a8     1C 00 90 CD |  if_b	jmp	#LR__0531
063ac                 | LR__0530
063ac     84 01 00 FF 
063b0     15 15 06 F6 | 	mov	arg02, ##@LR__5399
063b4     12 13 02 F6 | 	mov	arg01, local04
063b8     54 A7 B1 FD | 	call	#__system___string_cmp
063bc     00 FA 0D F2 | 	cmp	result1, #0 wz
063c0     00 FA 05 56 |  if_ne	mov	result1, #0
063c4     0C 00 90 5D |  if_ne	jmp	#LR__0534
063c8                 | LR__0531
063c8     01 32 06 F1 | 	add	local11, #1
063cc     98 FE 9F FD | 	jmp	#LR__0524
063d0                 | LR__0532
063d0                 | LR__0533
063d0                 | ' return true
063d0     01 FA 65 F6 | 	neg	result1, #1
063d4                 | LR__0534
063d4     A7 F0 03 F6 | 	mov	ptra, fp
063d8     B2 00 A0 FD | 	call	#popregs_
063dc                 | _isint_ret
063dc     2D 00 64 FD | 	ret
063e0                 | 
063e0                 | ' 
063e0                 | ' ' Check if the part is a positive decimal number.  
063e0                 | ' 
063e0                 | ' function isdec(s as string) as boolean
063e0                 | _isdec
063e0     05 4A 05 F6 | 	mov	COUNT_, #5
063e4     A8 00 A0 FD | 	call	#pushregs_
063e8     09 1F 02 F6 | 	mov	local01, arg01
063ec     09 21 02 F6 | 	mov	local02, arg01
063f0     97 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
063f4                 | LR__0540
063f4     10 FB C9 FA | 	rdbyte	result1, local02 wz
063f8     01 20 06 51 |  if_ne	add	local02, #1
063fc     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
06400                 | LR__0541
06400     09 21 82 F1 | 	sub	local02, arg01
06404     10 FB 01 F6 | 	mov	result1, local02
06408     FD 20 0A F6 | 	mov	local02, result1 wz
0640c     00 FA 05 A6 |  if_e	mov	result1, #0
06410     80 00 90 AD |  if_e	jmp	#LR__0546
06414                 | ' for i=1 to l
06414     01 22 06 F6 | 	mov	local03, #1
06418     10 25 02 F6 | 	mov	local04, local02
0641c     01 24 06 F1 | 	add	local04, #1
06420                 | LR__0542
06420     12 23 52 F2 | 	cmps	local03, local04 wc
06424     68 00 90 3D |  if_ae	jmp	#LR__0545
06428     0F 13 02 F6 | 	mov	arg01, local01
0642c     11 15 02 F6 | 	mov	arg02, local03
06430     01 16 06 F6 | 	mov	arg03, #1
06434     44 C8 B1 FD | 	call	#__system__Mid_S
06438     FD 26 02 F6 | 	mov	local05, result1
0643c                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
0643c     84 01 00 FF 
06440     17 15 06 F6 | 	mov	arg02, ##@LR__5400
06444     13 13 02 F6 | 	mov	arg01, local05
06448     C4 A6 B1 FD | 	call	#__system___string_cmp
0644c     00 FA 55 F2 | 	cmps	result1, #0 wc
06450     18 00 90 CD |  if_b	jmp	#LR__0543
06454     84 01 00 FF 
06458     19 15 06 F6 | 	mov	arg02, ##@LR__5401
0645c     13 13 02 F6 | 	mov	arg01, local05
06460     AC A6 B1 FD | 	call	#__system___string_cmp
06464     01 FA 55 F2 | 	cmps	result1, #1 wc
06468     1C 00 90 CD |  if_b	jmp	#LR__0544
0646c                 | LR__0543
0646c     84 01 00 FF 
06470     1B 15 06 F6 | 	mov	arg02, ##@LR__5402
06474     13 13 02 F6 | 	mov	arg01, local05
06478     94 A6 B1 FD | 	call	#__system___string_cmp
0647c     00 FA 0D F2 | 	cmp	result1, #0 wz
06480     00 FA 05 56 |  if_ne	mov	result1, #0
06484     0C 00 90 5D |  if_ne	jmp	#LR__0546
06488                 | LR__0544
06488     01 22 06 F1 | 	add	local03, #1
0648c     90 FF 9F FD | 	jmp	#LR__0542
06490                 | LR__0545
06490                 | ' return true
06490     01 FA 65 F6 | 	neg	result1, #1
06494                 | LR__0546
06494     A7 F0 03 F6 | 	mov	ptra, fp
06498     B2 00 A0 FD | 	call	#popregs_
0649c                 | _isdec_ret
0649c     2D 00 64 FD | 	ret
064a0                 | 
064a0                 | ' 
064a0                 | ' ' Check if the part is a string.  
064a0                 | ' 
064a0                 | ' function isstring(s as string) as boolean
064a0                 | _isstring
064a0     01 4A 05 F6 | 	mov	COUNT_, #1
064a4     A8 00 A0 FD | 	call	#pushregs_
064a8                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
064a8     09 1F 02 F6 | 	mov	local01, arg01
064ac     01 14 06 F6 | 	mov	arg02, #1
064b0     B0 C6 B1 FD | 	call	#__system__Left_S
064b4     FD 12 02 F6 | 	mov	arg01, result1
064b8     84 01 00 FF 
064bc     1D 15 06 F6 | 	mov	arg02, ##@LR__5403
064c0     4C A6 B1 FD | 	call	#__system___string_cmp
064c4     00 FA 4D F2 | 	cmps	result1, #0 wz
064c8     28 00 90 5D |  if_ne	jmp	#LR__0550
064cc     0F 13 02 F6 | 	mov	arg01, local01
064d0     01 14 06 F6 | 	mov	arg02, #1
064d4     14 C7 B1 FD | 	call	#__system__Right_S
064d8     FD 12 02 F6 | 	mov	arg01, result1
064dc     84 01 00 FF 
064e0     1F 15 06 F6 | 	mov	arg02, ##@LR__5404
064e4     28 A6 B1 FD | 	call	#__system___string_cmp
064e8     00 FA 4D F2 | 	cmps	result1, #0 wz
064ec     01 FA 65 A6 |  if_e	neg	result1, #1
064f0     04 00 90 AD |  if_e	jmp	#LR__0551
064f4                 | LR__0550
064f4     00 FA 05 F6 | 	mov	result1, #0
064f8                 | LR__0551
064f8     A7 F0 03 F6 | 	mov	ptra, fp
064fc     B2 00 A0 FD | 	call	#popregs_
06500                 | _isstring_ret
06500     2D 00 64 FD | 	ret
06504                 | 
06504                 | ' 
06504                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06504                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
06504                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06504                 | ' 
06504                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06504                 | ' '
06504                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
06504                 | ' '
06504                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
06504                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
06504                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
06504                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
06504                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
06504                 | ' ' 
06504                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06504                 | ' 
06504                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06504                 | ' ' Helper functions to manage program lines
06504                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06504                 | ' 
06504                 | ' '----- delete a line from a program
06504                 | ' 
06504                 | ' function deleteline(aline as ulong) as integer
06504                 | _deleteline
06504     02 4A 05 F6 | 	mov	COUNT_, #2
06508     A8 00 A0 FD | 	call	#pushregs_
0650c     2C F0 07 F1 | 	add	ptra, #44
06510     04 4E 05 F1 | 	add	fp, #4
06514     A7 12 62 FC | 	wrlong	arg01, fp
06518     4A 00 00 FF 
0651c     84 E4 05 F1 | 	add	objptr, ##38020
06520     F2 1E 02 FB | 	rdlong	local01, objptr
06524     0C 4E 05 F1 | 	add	fp, #12
06528     A7 1E 62 FC | 	wrlong	local01, fp
0652c     10 4E 85 F1 | 	sub	fp, #16
06530                 | ' 
06530                 | ' searchptr=programstart
06530                 | ' do
06530     3E 00 00 FF 
06534     B8 E5 85 F1 | 	sub	objptr, ##32184
06538                 | LR__0560
06538     14 4E 05 F1 | 	add	fp, #20
0653c     A7 12 02 F6 | 	mov	arg01, fp
06540     04 4E 85 F1 | 	sub	fp, #4
06544     A7 14 02 FB | 	rdlong	arg02, fp
06548     10 4E 85 F1 | 	sub	fp, #16
0654c     18 16 06 F6 | 	mov	arg03, #24
06550     54 99 B1 FD | 	call	#_psram_spin2_read1
06554     10 4E 05 F1 | 	add	fp, #16
06558     A7 1E 02 FB | 	rdlong	local01, fp
0655c     08 4E 85 F1 | 	sub	fp, #8
06560     A7 1E 62 FC | 	wrlong	local01, fp
06564     20 4E 05 F1 | 	add	fp, #32
06568     A7 1E 02 FB | 	rdlong	local01, fp
0656c     18 4E 85 F1 | 	sub	fp, #24
06570     A7 1E 62 FC | 	wrlong	local01, fp
06574     04 4E 05 F1 | 	add	fp, #4
06578     A7 1E 02 FB | 	rdlong	local01, fp
0657c     10 4E 85 F1 | 	sub	fp, #16
06580     A7 16 02 FB | 	rdlong	arg03, fp
06584     04 4E 85 F1 | 	sub	fp, #4
06588     0B 1F 12 F2 | 	cmp	local01, arg03 wc
0658c     28 4E 05 C1 |  if_b	add	fp, #40
06590     A7 20 02 CB |  if_b	rdlong	local02, fp
06594     28 4E 85 C1 |  if_b	sub	fp, #40
06598     FF FF 3F CF 
0659c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
065a0     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0560
065a4     0B 00 00 FF 
065a8     CC E4 85 F1 | 	sub	objptr, ##5836
065ac                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
065ac     14 4E 05 F1 | 	add	fp, #20
065b0     A7 1E 02 FB | 	rdlong	local01, fp
065b4     10 4E 85 F1 | 	sub	fp, #16
065b8     A7 20 02 FB | 	rdlong	local02, fp
065bc     04 4E 85 F1 | 	sub	fp, #4
065c0     10 1F 0A F2 | 	cmp	local01, local02 wz
065c4     01 FA 65 56 |  if_ne	neg	result1, #1
065c8     34 02 90 5D |  if_ne	jmp	#LR__0565
065cc     08 4E 05 F1 | 	add	fp, #8
065d0     A7 12 02 FB | 	rdlong	arg01, fp
065d4     08 4E 85 F1 | 	sub	fp, #8
065d8     01 14 66 F6 | 	neg	arg02, #1
065dc     D4 70 B1 FD | 	call	#_pslpoke
065e0                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
065e0                 | ' 
065e0                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
065e0     28 4E 05 F1 | 	add	fp, #40
065e4     A7 1E 02 FB | 	rdlong	local01, fp
065e8     28 4E 85 F1 | 	sub	fp, #40
065ec     FF FF 3F FF 
065f0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
065f4     24 4E 05 A1 |  if_e	add	fp, #36
065f8     A7 20 02 AB |  if_e	rdlong	local02, fp
065fc     24 4E 85 A1 |  if_e	sub	fp, #36
06600     FF FF 7F AF 
06604     FF 21 0E A2 |  if_e	cmp	local02, ##-1 wz
06608     88 00 90 5D |  if_ne	jmp	#LR__0561
0660c     4A 00 00 FF 
06610     84 E4 05 F1 | 	add	objptr, ##38020
06614     00 04 80 FF 
06618     F2 00 68 FC | 	wrlong	##524288, objptr
0661c     07 00 00 FF 
06620     28 E4 85 F1 | 	sub	objptr, ##3624
06624     00 04 80 FF 
06628     F2 00 68 FC | 	wrlong	##524288, objptr
0662c     07 00 00 FF 
06630     2C E4 05 F1 | 	add	objptr, ##3628
06634     F2 00 68 FC | 	wrlong	#0, objptr
06638     04 E4 05 F1 | 	add	objptr, #4
0663c     FF FF FF FF 
06640     F2 FE 6B FC | 	wrlong	##-1, objptr
06644     4A 00 00 FF 
06648     8C E4 85 F1 | 	sub	objptr, ##38028
0664c     00 12 06 F6 | 	mov	arg01, #0
06650     01 14 66 F6 | 	neg	arg02, #1
06654     5C 70 B1 FD | 	call	#_pslpoke
06658     10 12 06 F6 | 	mov	arg01, #16
0665c     01 14 66 F6 | 	neg	arg02, #1
06660     50 70 B1 FD | 	call	#_pslpoke
06664     14 12 06 F6 | 	mov	arg01, #20
06668     1E 14 CE F9 | 	bmask	arg02, #30
0666c     44 70 B1 FD | 	call	#_pslpoke
06670     50 00 00 FF 
06674     B4 E4 05 F1 | 	add	objptr, ##41140
06678     00 04 80 FF 
0667c     F2 00 68 FC | 	wrlong	##524288, objptr
06680     04 E4 05 F1 | 	add	objptr, #4
06684     00 04 80 FF 
06688     F2 00 68 FC | 	wrlong	##524288, objptr
0668c     50 00 00 FF 
06690     B8 E4 85 F1 | 	sub	objptr, ##41144
06694                 | LR__0561
06694                 | ' 
06694                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
06694     28 4E 05 F1 | 	add	fp, #40
06698     A7 1E 02 FB | 	rdlong	local01, fp
0669c     28 4E 85 F1 | 	sub	fp, #40
066a0     FF FF 3F FF 
066a4     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
066a8     74 00 90 5D |  if_ne	jmp	#LR__0562
066ac     24 4E 05 F1 | 	add	fp, #36
066b0     A7 20 02 FB | 	rdlong	local02, fp
066b4     24 4E 85 F1 | 	sub	fp, #36
066b8     FF FF 7F FF 
066bc     FF 21 0E F2 | 	cmp	local02, ##-1 wz
066c0     5C 00 90 AD |  if_e	jmp	#LR__0562
066c4     24 4E 05 F1 | 	add	fp, #36
066c8     A7 12 02 FB | 	rdlong	arg01, fp
066cc     24 4E 85 F1 | 	sub	fp, #36
066d0     14 12 06 F1 | 	add	arg01, #20
066d4     1E 14 CE F9 | 	bmask	arg02, #30
066d8     D8 6F B1 FD | 	call	#_pslpoke
066dc     24 4E 05 F1 | 	add	fp, #36
066e0     A7 1E 02 FB | 	rdlong	local01, fp
066e4     4A 00 00 FF 
066e8     8C E4 05 F1 | 	add	objptr, ##38028
066ec     F2 1E 62 FC | 	wrlong	local01, objptr
066f0     4A 00 00 FF 
066f4     8C E4 85 F1 | 	sub	objptr, ##38028
066f8     A7 12 02 FB | 	rdlong	arg01, fp
066fc     24 4E 85 F1 | 	sub	fp, #36
06700     E0 70 B1 FD | 	call	#_pslpeek
06704     4A 00 00 FF 
06708     88 E4 05 F1 | 	add	objptr, ##38024
0670c     F2 FA 61 FC | 	wrlong	result1, objptr
06710     4A 00 00 FF 
06714     88 E4 85 F1 | 	sub	objptr, ##38024
06718                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
06718                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
06718                 | '   lastline=pslpeek(header(4))
06718                 | '   return 0
06718     00 FA 05 F6 | 	mov	result1, #0
0671c     E0 00 90 FD | 	jmp	#LR__0565
06720                 | LR__0562
06720                 | ' 
06720                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
06720     28 4E 05 F1 | 	add	fp, #40
06724     A7 1E 02 FB | 	rdlong	local01, fp
06728     28 4E 85 F1 | 	sub	fp, #40
0672c     FF FF 3F FF 
06730     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
06734     58 00 90 AD |  if_e	jmp	#LR__0563
06738     24 4E 05 F1 | 	add	fp, #36
0673c     A7 20 02 FB | 	rdlong	local02, fp
06740     24 4E 85 F1 | 	sub	fp, #36
06744     FF FF 7F FF 
06748     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0674c     40 00 90 5D |  if_ne	jmp	#LR__0563
06750     28 4E 05 F1 | 	add	fp, #40
06754     A7 12 02 FB | 	rdlong	arg01, fp
06758     28 4E 85 F1 | 	sub	fp, #40
0675c     10 12 06 F1 | 	add	arg01, #16
06760     01 14 66 F6 | 	neg	arg02, #1
06764     4C 6F B1 FD | 	call	#_pslpoke
06768     28 4E 05 F1 | 	add	fp, #40
0676c     A7 1E 02 FB | 	rdlong	local01, fp
06770     28 4E 85 F1 | 	sub	fp, #40
06774     4A 00 00 FF 
06778     84 E4 05 F1 | 	add	objptr, ##38020
0677c     F2 1E 62 FC | 	wrlong	local01, objptr
06780     4A 00 00 FF 
06784     84 E4 85 F1 | 	sub	objptr, ##38020
06788                 | ' '   print "deleted first line"
06788                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
06788                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
06788                 | '   return 0
06788     00 FA 05 F6 | 	mov	result1, #0
0678c     70 00 90 FD | 	jmp	#LR__0565
06790                 | LR__0563
06790                 | ' 
06790                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
06790     28 4E 05 F1 | 	add	fp, #40
06794     A7 1E 02 FB | 	rdlong	local01, fp
06798     28 4E 85 F1 | 	sub	fp, #40
0679c     FF FF 3F FF 
067a0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
067a4     24 4E 05 51 |  if_ne	add	fp, #36
067a8     A7 20 02 5B |  if_ne	rdlong	local02, fp
067ac     24 4E 85 51 |  if_ne	sub	fp, #36
067b0     FF FF 7F 5F 
067b4     FF 21 0E 52 |  if_ne	cmp	local02, ##-1 wz
067b8     40 00 90 AD |  if_e	jmp	#LR__0564
067bc     28 4E 05 F1 | 	add	fp, #40
067c0     A7 12 02 FB | 	rdlong	arg01, fp
067c4     10 12 06 F1 | 	add	arg01, #16
067c8     04 4E 85 F1 | 	sub	fp, #4
067cc     A7 14 02 FB | 	rdlong	arg02, fp
067d0     24 4E 85 F1 | 	sub	fp, #36
067d4     DC 6E B1 FD | 	call	#_pslpoke
067d8     24 4E 05 F1 | 	add	fp, #36
067dc     A7 12 02 FB | 	rdlong	arg01, fp
067e0     14 12 06 F1 | 	add	arg01, #20
067e4     04 4E 05 F1 | 	add	fp, #4
067e8     A7 14 02 FB | 	rdlong	arg02, fp
067ec     28 4E 85 F1 | 	sub	fp, #40
067f0     C0 6E B1 FD | 	call	#_pslpoke
067f4                 | '    pslpoke(header(5)+16,header(4))  
067f4                 | '    pslpoke(header(4)+20, header(5))
067f4                 | '    return 0
067f4     00 FA 05 F6 | 	mov	result1, #0
067f8     04 00 90 FD | 	jmp	#LR__0565
067fc                 | LR__0564
067fc     00 FA 05 F6 | 	mov	result1, #0
06800                 | LR__0565
06800     A7 F0 03 F6 | 	mov	ptra, fp
06804     B2 00 A0 FD | 	call	#popregs_
06808                 | _deleteline_ret
06808     2D 00 64 FD | 	ret
0680c                 | 
0680c                 | ' 
0680c                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
0680c                 | ' 
0680c                 | ' sub save_line
0680c                 | _save_line
0680c     03 4A 05 F6 | 	mov	COUNT_, #3
06810     A8 00 A0 FD | 	call	#pushregs_
06814     4A 00 00 FF 
06818     7C E4 05 F1 | 	add	objptr, ##38012
0681c     F2 16 02 FB | 	rdlong	arg03, objptr
06820     01 16 06 F1 | 	add	arg03, #1
06824     05 00 00 FF 
06828     18 E4 85 F1 | 	sub	objptr, ##2584
0682c     F2 14 02 FB | 	rdlong	arg02, objptr
06830     0B 15 02 FD | 	qmul	arg02, arg03
06834     0E 00 00 FF 
06838     44 E4 85 F1 | 	sub	objptr, ##7236
0683c     F2 12 02 FB | 	rdlong	arg01, objptr
06840     37 00 00 FF 
06844     20 E4 85 F1 | 	sub	objptr, ##28192
06848     09 1F 02 F6 | 	mov	local01, arg01
0684c     18 20 62 FD | 	getqx	local02
06850     97 06 48 FB | 	callpa	#(@LR__0571-@LR__0570)>>2,fcache_load_ptr_
06854                 | LR__0570
06854     0F FB C9 FA | 	rdbyte	result1, local01 wz
06858     01 1E 06 51 |  if_ne	add	local01, #1
0685c     F4 FF 9F 5D |  if_ne	jmp	#LR__0570
06860                 | LR__0571
06860     09 1F 82 F1 | 	sub	local01, arg01
06864     03 1E CE F7 | 	test	local01, #3 wz
06868     02 1E 46 50 |  if_ne	shr	local01, #2
0686c     01 1E 06 51 |  if_ne	add	local01, #1
06870     02 1E 66 50 |  if_ne	shl	local01, #2
06874     10 23 02 F6 | 	mov	local03, local02
06878     0F 23 02 F1 | 	add	local03, local01
0687c     43 00 00 FF 
06880     5C E4 05 F1 | 	add	objptr, ##34396
06884     F2 16 02 FB | 	rdlong	arg03, objptr
06888     10 17 02 F1 | 	add	arg03, local02
0688c     04 00 00 FF 
06890     28 E4 05 F1 | 	add	objptr, ##2088
06894     F2 16 62 FC | 	wrlong	arg03, objptr
06898     04 E4 05 F1 | 	add	objptr, #4
0689c     F2 1E 62 FC | 	wrlong	local01, objptr
068a0     0C E4 85 F1 | 	sub	objptr, #12
068a4     F2 12 02 F6 | 	mov	arg01, objptr
068a8     04 00 00 FF 
068ac     20 E4 85 F1 | 	sub	objptr, ##2080
068b0     F2 14 02 FB | 	rdlong	arg02, objptr
068b4     10 17 02 F6 | 	mov	arg03, local02
068b8     37 00 00 FF 
068bc     90 E5 85 F1 | 	sub	objptr, ##28560
068c0     80 96 B1 FD | 	call	#_psram_spin2_write
068c4     2B 00 00 FF 
068c8     54 E5 05 F1 | 	add	objptr, ##22356
068cc     F2 12 02 FB | 	rdlong	arg01, objptr
068d0     0C 00 00 FF 
068d4     3C E4 05 F1 | 	add	objptr, ##6204
068d8     F2 14 02 FB | 	rdlong	arg02, objptr
068dc     10 15 02 F1 | 	add	arg02, local02
068e0     0F 17 02 F6 | 	mov	arg03, local01
068e4     37 00 00 FF 
068e8     90 E5 85 F1 | 	sub	objptr, ##28560
068ec     54 96 B1 FD | 	call	#_psram_spin2_write
068f0     37 00 00 FF 
068f4     90 E5 05 F1 | 	add	objptr, ##28560
068f8     F2 1E 02 FB | 	rdlong	local01, objptr
068fc     11 1F 02 F1 | 	add	local01, local03
06900     F2 1E 62 FC | 	wrlong	local01, objptr
06904     43 00 00 FF 
06908     5C E4 85 F1 | 	sub	objptr, ##34396
0690c     A7 F0 03 F6 | 	mov	ptra, fp
06910     B2 00 A0 FD | 	call	#popregs_
06914                 | _save_line_ret
06914     2D 00 64 FD | 	ret
06918                 | 
06918                 | ' 
06918                 | ' '----- Insert a new line into the middle of the program
06918                 | ' 
06918                 | ' function insertline(aline as ulong) as integer
06918                 | _insertline
06918     02 4A 05 F6 | 	mov	COUNT_, #2
0691c     A8 00 A0 FD | 	call	#pushregs_
06920     28 F0 07 F1 | 	add	ptra, #40
06924     04 4E 05 F1 | 	add	fp, #4
06928     A7 12 62 FC | 	wrlong	arg01, fp
0692c     4A 00 00 FF 
06930     84 E4 05 F1 | 	add	objptr, ##38020
06934     F2 1E 02 FB | 	rdlong	local01, objptr
06938     04 4E 05 F1 | 	add	fp, #4
0693c     A7 1E 62 FC | 	wrlong	local01, fp
06940     08 4E 85 F1 | 	sub	fp, #8
06944                 | ' 
06944                 | ' do
06944     3E 00 00 FF 
06948     B8 E5 85 F1 | 	sub	objptr, ##32184
0694c                 | LR__0580
0694c     10 4E 05 F1 | 	add	fp, #16
06950     A7 12 02 F6 | 	mov	arg01, fp
06954     08 4E 85 F1 | 	sub	fp, #8
06958     A7 14 02 FB | 	rdlong	arg02, fp
0695c     08 4E 85 F1 | 	sub	fp, #8
06960     18 16 06 F6 | 	mov	arg03, #24
06964     40 95 B1 FD | 	call	#_psram_spin2_read1
06968     08 4E 05 F1 | 	add	fp, #8
0696c     A7 1E 02 FB | 	rdlong	local01, fp
06970     04 4E 05 F1 | 	add	fp, #4
06974     A7 1E 62 FC | 	wrlong	local01, fp
06978     18 4E 05 F1 | 	add	fp, #24
0697c     A7 1E 02 FB | 	rdlong	local01, fp
06980     1C 4E 85 F1 | 	sub	fp, #28
06984     A7 1E 62 FC | 	wrlong	local01, fp
06988     08 4E 05 F1 | 	add	fp, #8
0698c     A7 1E 02 FB | 	rdlong	local01, fp
06990     0C 4E 85 F1 | 	sub	fp, #12
06994     A7 16 02 FB | 	rdlong	arg03, fp
06998     04 4E 85 F1 | 	sub	fp, #4
0699c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
069a0     24 4E 05 C1 |  if_b	add	fp, #36
069a4     A7 20 02 CB |  if_b	rdlong	local02, fp
069a8     24 4E 85 C1 |  if_b	sub	fp, #36
069ac     FF FF 3F CF 
069b0     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
069b4     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0580
069b8     0B 00 00 FF 
069bc     CC E4 85 F1 | 	sub	objptr, ##5836
069c0                 | ' 
069c0                 | ' if header(0)=aline then return -1 				' delete it first
069c0     10 4E 05 F1 | 	add	fp, #16
069c4     A7 1E 02 FB | 	rdlong	local01, fp
069c8     0C 4E 85 F1 | 	sub	fp, #12
069cc     A7 20 02 FB | 	rdlong	local02, fp
069d0     04 4E 85 F1 | 	sub	fp, #4
069d4     10 1F 0A F2 | 	cmp	local01, local02 wz
069d8     01 FA 65 A6 |  if_e	neg	result1, #1
069dc     48 01 90 AD |  if_e	jmp	#LR__0583
069e0                 | ' if header(0)<aline then return -2 				' end of program reached
069e0     10 4E 05 F1 | 	add	fp, #16
069e4     A7 1E 02 FB | 	rdlong	local01, fp
069e8     0C 4E 85 F1 | 	sub	fp, #12
069ec     A7 16 02 FB | 	rdlong	arg03, fp
069f0     04 4E 85 F1 | 	sub	fp, #4
069f4     0B 1F 12 F2 | 	cmp	local01, arg03 wc
069f8     02 FA 65 C6 |  if_b	neg	result1, #2
069fc     28 01 90 CD |  if_b	jmp	#LR__0583
06a00                 | ' 
06a00                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
06a00     20 4E 05 F1 | 	add	fp, #32
06a04     A7 1E 02 FB | 	rdlong	local01, fp
06a08     20 4E 85 F1 | 	sub	fp, #32
06a0c     FF FF 7F FF 
06a10     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
06a14     78 00 90 5D |  if_ne	jmp	#LR__0581
06a18     43 00 00 FF 
06a1c     5C E4 05 F1 | 	add	objptr, ##34396
06a20     F2 1E 02 FB | 	rdlong	local01, objptr
06a24     07 00 00 FF 
06a28     28 E4 05 F1 | 	add	objptr, ##3624
06a2c     F2 1E 62 FC | 	wrlong	local01, objptr
06a30     0C 4E 05 F1 | 	add	fp, #12
06a34     A7 12 02 FB | 	rdlong	arg01, fp
06a38     0C 4E 85 F1 | 	sub	fp, #12
06a3c     10 12 06 F1 | 	add	arg01, #16
06a40     07 00 00 FF 
06a44     28 E4 85 F1 | 	sub	objptr, ##3624
06a48     F2 14 02 FB | 	rdlong	arg02, objptr
06a4c     43 00 00 FF 
06a50     5C E4 85 F1 | 	sub	objptr, ##34396
06a54     5C 6C B1 FD | 	call	#_pslpoke
06a58     47 00 00 FF 
06a5c     8C E4 05 F1 | 	add	objptr, ##36492
06a60     FF FF FF FF 
06a64     F2 FE 6B FC | 	wrlong	##-1, objptr
06a68     0C 4E 05 F1 | 	add	fp, #12
06a6c     A7 1E 02 FB | 	rdlong	local01, fp
06a70     0C 4E 85 F1 | 	sub	fp, #12
06a74     04 E4 05 F1 | 	add	objptr, #4
06a78     F2 1E 62 FC | 	wrlong	local01, objptr
06a7c     47 00 00 FF 
06a80     90 E4 85 F1 | 	sub	objptr, ##36496
06a84     84 FD BF FD | 	call	#_save_line
06a88                 | '   programstart=programptr
06a88                 | '   pslpoke(lineptr2+16,programptr)
06a88                 | '   ucompiledline(4)=$FFFF_FFFF
06a88                 | '   ucompiledline(5)=lineptr2
06a88                 | '   save_line
06a88                 | '   return 0
06a88     00 FA 05 F6 | 	mov	result1, #0
06a8c     98 00 90 FD | 	jmp	#LR__0583
06a90                 | LR__0581
06a90                 | ' 
06a90                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
06a90     20 4E 05 F1 | 	add	fp, #32
06a94     A7 1E 02 FB | 	rdlong	local01, fp
06a98     20 4E 85 F1 | 	sub	fp, #32
06a9c     FF FF 7F FF 
06aa0     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
06aa4     7C 00 90 AD |  if_e	jmp	#LR__0582
06aa8     20 4E 05 F1 | 	add	fp, #32
06aac     A7 1E 02 FB | 	rdlong	local01, fp
06ab0     47 00 00 FF 
06ab4     8C E4 05 F1 | 	add	objptr, ##36492
06ab8     F2 1E 62 FC | 	wrlong	local01, objptr
06abc     14 4E 85 F1 | 	sub	fp, #20
06ac0     A7 1E 02 FB | 	rdlong	local01, fp
06ac4     04 E4 05 F1 | 	add	objptr, #4
06ac8     F2 1E 62 FC | 	wrlong	local01, objptr
06acc     A7 12 02 FB | 	rdlong	arg01, fp
06ad0     0C 4E 85 F1 | 	sub	fp, #12
06ad4     10 12 06 F1 | 	add	arg01, #16
06ad8     04 00 00 FF 
06adc     34 E4 85 F1 | 	sub	objptr, ##2100
06ae0     F2 14 02 FB | 	rdlong	arg02, objptr
06ae4     43 00 00 FF 
06ae8     5C E4 85 F1 | 	sub	objptr, ##34396
06aec     C4 6B B1 FD | 	call	#_pslpoke
06af0     20 4E 05 F1 | 	add	fp, #32
06af4     A7 12 02 FB | 	rdlong	arg01, fp
06af8     20 4E 85 F1 | 	sub	fp, #32
06afc     14 12 06 F1 | 	add	arg01, #20
06b00     43 00 00 FF 
06b04     5C E4 05 F1 | 	add	objptr, ##34396
06b08     F2 14 02 FB | 	rdlong	arg02, objptr
06b0c     43 00 00 FF 
06b10     5C E4 85 F1 | 	sub	objptr, ##34396
06b14     9C 6B B1 FD | 	call	#_pslpoke
06b18     F0 FC BF FD | 	call	#_save_line
06b1c                 | '   ucompiledline(4)=header(4)
06b1c                 | '   ucompiledline(5)=lineptr2
06b1c                 | '   pslpoke(lineptr2+16,programptr)
06b1c                 | '   pslpoke(header(4)+20,programptr)
06b1c                 | '   save_line
06b1c                 | '   return 0
06b1c     00 FA 05 F6 | 	mov	result1, #0
06b20     04 00 90 FD | 	jmp	#LR__0583
06b24                 | LR__0582
06b24     00 FA 05 F6 | 	mov	result1, #0
06b28                 | LR__0583
06b28     A7 F0 03 F6 | 	mov	ptra, fp
06b2c     B2 00 A0 FD | 	call	#popregs_
06b30                 | _insertline_ret
06b30     2D 00 64 FD | 	ret
06b34                 | 
06b34                 | ' 
06b34                 | ' '----- Adds a new line at the end of the program
06b34                 | ' 
06b34                 | ' sub add_line_at_end(aline) 
06b34                 | _add_line_at_end
06b34     4A 00 00 FF 
06b38     88 E4 05 F1 | 	add	objptr, ##38024
06b3c     F2 12 62 FC | 	wrlong	arg01, objptr
06b40     04 E4 05 F1 | 	add	objptr, #4
06b44     F2 14 02 FB | 	rdlong	arg02, objptr
06b48     03 00 00 FF 
06b4c     00 E4 85 F1 | 	sub	objptr, ##1536
06b50     F2 14 62 FC | 	wrlong	arg02, objptr
06b54     03 00 00 FF 
06b58     00 E4 05 F1 | 	add	objptr, ##1536
06b5c     F2 12 02 FB | 	rdlong	arg01, objptr
06b60     14 12 06 F1 | 	add	arg01, #20
06b64     07 00 00 FF 
06b68     30 E4 85 F1 | 	sub	objptr, ##3632
06b6c     F2 14 02 FB | 	rdlong	arg02, objptr
06b70     43 00 00 FF 
06b74     5C E4 85 F1 | 	sub	objptr, ##34396
06b78     38 6B B1 FD | 	call	#_pslpoke
06b7c     43 00 00 FF 
06b80     5C E4 05 F1 | 	add	objptr, ##34396
06b84     F2 14 02 FB | 	rdlong	arg02, objptr
06b88     07 00 00 FF 
06b8c     30 E4 05 F1 | 	add	objptr, ##3632
06b90     F2 14 62 FC | 	wrlong	arg02, objptr
06b94     02 00 00 FF 
06b98     FC E5 85 F1 | 	sub	objptr, ##1532
06b9c     FF FF BF FF 
06ba0     F2 FE 6B FC | 	wrlong	##2147483647, objptr
06ba4                 | ' 
06ba4                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
06ba4                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
06ba4     04 00 00 FF 
06ba8     34 E4 85 F1 | 	sub	objptr, ##2100
06bac     F2 14 02 FB | 	rdlong	arg02, objptr
06bb0     43 00 00 FF 
06bb4     5C E4 85 F1 | 	sub	objptr, ##34396
06bb8     00 04 00 FF 
06bbc     00 14 0E F2 | 	cmp	arg02, ##524288 wz
06bc0     47 00 00 AF 
06bc4     8C E4 05 A1 |  if_e	add	objptr, ##36492
06bc8     FF FF FF AF 
06bcc     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
06bd0     47 00 00 AF 
06bd4     8C E4 85 A1 |  if_e	sub	objptr, ##36492
06bd8     30 FC BF FD | 	call	#_save_line
06bdc     43 00 00 FF 
06be0     5C E4 05 F1 | 	add	objptr, ##34396
06be4     F2 12 02 FB | 	rdlong	arg01, objptr
06be8     43 00 00 FF 
06bec     5C E4 85 F1 | 	sub	objptr, ##34396
06bf0     01 14 66 F6 | 	neg	arg02, #1
06bf4     BC 6A B1 FD | 	call	#_pslpoke
06bf8                 | _add_line_at_end_ret
06bf8     2D 00 64 FD | 	ret
06bfc                 | 
06bfc                 | ' 
06bfc                 | ' '--------------------------------------------------------------------------------------------------------------------------
06bfc                 | ' '---------------------------------- End of helper functions ---------------------------------------------------------------
06bfc                 | ' '--------------------------------------------------------------------------------------------------------------------------
06bfc                 | ' 
06bfc                 | ' 
06bfc                 | ' 
06bfc                 | ' 
06bfc                 | ' function compile_immediate(linetype as ulong) as integer
06bfc                 | _compile_immediate
06bfc     09 4A 05 F6 | 	mov	COUNT_, #9
06c00     A8 00 A0 FD | 	call	#pushregs_
06c04                 | _compile_immediate_enter
06c04     09 25 0A F6 | 	mov	local04, arg01 wz
06c08     00 26 06 F6 | 	mov	local05, #0
06c0c     00 28 06 F6 | 	mov	local06, #0
06c10                 | ' 
06c10                 | ' ' linetype=cont+1, linetype=0 immediate
06c10                 | ' '  : 1: this is the first part of the line that will continue
06c10                 | ' ' 2 - this is the continuation of the line
06c10                 | ' ' 3 - this is the last continued line
06c10                 | ' ' 4 - this is the one and only part
06c10                 | ' 
06c10                 | ' err=0
06c10                 | ' cmd=0
06c10                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
06c10     30 00 90 5D |  if_ne	jmp	#LR__0590
06c14     35 00 00 FF 
06c18     10 E4 05 F1 | 	add	objptr, ##27152
06c1c     F2 28 02 FB | 	rdlong	local06, objptr
06c20     02 00 00 FF 
06c24     34 E4 05 F1 | 	add	objptr, ##1076
06c28     F2 02 68 FC | 	wrlong	#1, objptr
06c2c     00 2A 06 F6 | 	mov	local07, #0
06c30     13 00 00 FF 
06c34     38 E4 05 F1 | 	add	objptr, ##9784
06c38     F2 00 68 FC | 	wrlong	#0, objptr
06c3c     4A 00 00 FF 
06c40     7C E4 85 F1 | 	sub	objptr, ##38012
06c44                 | LR__0590
06c44                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
06c44     02 24 0E F2 | 	cmp	local04, #2 wz
06c48     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
06c4c     24 00 90 5D |  if_ne	jmp	#LR__0591
06c50     35 00 00 FF 
06c54     10 E4 05 F1 | 	add	objptr, ##27152
06c58     F2 28 02 FB | 	rdlong	local06, objptr
06c5c     01 2A 06 F6 | 	mov	local07, #1
06c60     02 00 00 FF 
06c64     34 E4 05 F1 | 	add	objptr, ##1076
06c68     F2 02 68 FC | 	wrlong	#1, objptr
06c6c     37 00 00 FF 
06c70     44 E4 85 F1 | 	sub	objptr, ##28228
06c74                 | LR__0591
06c74                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
06c74     04 24 0E F2 | 	cmp	local04, #4 wz
06c78     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
06c7c     30 00 90 5D |  if_ne	jmp	#LR__0592
06c80     35 00 00 FF 
06c84     18 E4 05 F1 | 	add	objptr, ##27160
06c88     F2 28 02 FB | 	rdlong	local06, objptr
06c8c     02 2A 06 F6 | 	mov	local07, #2
06c90     02 00 00 FF 
06c94     2C E4 05 F1 | 	add	objptr, ##1068
06c98     F2 04 68 FC | 	wrlong	#2, objptr
06c9c     13 00 00 FF 
06ca0     38 E4 05 F1 | 	add	objptr, ##9784
06ca4     F2 04 68 FC | 	wrlong	#2, objptr
06ca8     4A 00 00 FF 
06cac     7C E4 85 F1 | 	sub	objptr, ##38012
06cb0                 | LR__0592
06cb0                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
06cb0     05 24 0E F2 | 	cmp	local04, #5 wz
06cb4     44 00 90 5D |  if_ne	jmp	#LR__0593
06cb8     37 00 00 FF 
06cbc     44 E4 05 F1 | 	add	objptr, ##28228
06cc0     F2 FA 01 FB | 	rdlong	result1, objptr
06cc4     FD 2A 02 F6 | 	mov	local07, result1
06cc8     03 2A 66 F0 | 	shl	local07, #3
06ccc     02 00 00 FF 
06cd0     38 E4 85 F1 | 	sub	objptr, ##1080
06cd4     F2 2A 02 F1 | 	add	local07, objptr
06cd8     04 2A 06 F1 | 	add	local07, #4
06cdc     15 29 02 FB | 	rdlong	local06, local07
06ce0     FD 2A 02 F6 | 	mov	local07, result1
06ce4     01 2A 06 F1 | 	add	local07, #1
06ce8     02 00 00 FF 
06cec     38 E4 05 F1 | 	add	objptr, ##1080
06cf0     F2 2A 62 FC | 	wrlong	local07, objptr
06cf4     37 00 00 FF 
06cf8     44 E4 85 F1 | 	sub	objptr, ##28228
06cfc                 | LR__0593
06cfc     00 2C 06 F6 | 	mov	local08, #0
06d00                 | ' vars=0
06d00                 | ' 'print  "In compile_immediate cmd=:", cmd
06d00                 | ' 451 select case cmd
06d00     5C 28 0E F2 | 	cmp	local06, #92 wz
06d04     80 02 90 AD |  if_e	jmp	#LR__0594
06d08     47 28 0E F2 | 	cmp	local06, #71 wz
06d0c     84 02 90 AD |  if_e	jmp	#LR__0595
06d10     59 28 0E F2 | 	cmp	local06, #89 wz
06d14     88 02 90 AD |  if_e	jmp	#LR__0596
06d18     45 28 0E F2 | 	cmp	local06, #69 wz
06d1c     8C 02 90 AD |  if_e	jmp	#LR__0597
06d20     69 28 0E F2 | 	cmp	local06, #105 wz
06d24     90 02 90 AD |  if_e	jmp	#LR__0598
06d28     40 28 0E F2 | 	cmp	local06, #64 wz
06d2c     84 05 90 AD |  if_e	jmp	#LR__0665
06d30     B4 28 0E F2 | 	cmp	local06, #180 wz
06d34     8C 02 90 AD |  if_e	jmp	#LR__0599
06d38     49 28 0E F2 | 	cmp	local06, #73 wz
06d3c     8C 02 90 AD |  if_e	jmp	#LR__0600
06d40     50 28 0E F2 | 	cmp	local06, #80 wz
06d44     90 02 90 AD |  if_e	jmp	#LR__0601
06d48     AE 28 0E F2 | 	cmp	local06, #174 wz
06d4c     94 02 90 AD |  if_e	jmp	#LR__0602
06d50     B0 28 0E F2 | 	cmp	local06, #176 wz
06d54     98 02 90 AD |  if_e	jmp	#LR__0603
06d58     AF 28 0E F2 | 	cmp	local06, #175 wz
06d5c     9C 02 90 AD |  if_e	jmp	#LR__0604
06d60     B1 28 0E F2 | 	cmp	local06, #177 wz
06d64     A0 02 90 AD |  if_e	jmp	#LR__0605
06d68     68 28 0E F2 | 	cmp	local06, #104 wz
06d6c     A4 02 90 AD |  if_e	jmp	#LR__0606
06d70     74 28 0E F2 | 	cmp	local06, #116 wz
06d74     A8 02 90 AD |  if_e	jmp	#LR__0607
06d78     73 28 0E F2 | 	cmp	local06, #115 wz
06d7c     AC 02 90 AD |  if_e	jmp	#LR__0608
06d80     6C 28 0E F2 | 	cmp	local06, #108 wz
06d84     B0 02 90 AD |  if_e	jmp	#LR__0609
06d88     89 28 0E F2 | 	cmp	local06, #137 wz
06d8c     24 05 90 AD |  if_e	jmp	#LR__0665
06d90     72 28 0E F2 | 	cmp	local06, #114 wz
06d94     AC 02 90 AD |  if_e	jmp	#LR__0610
06d98     5D 28 0E F2 | 	cmp	local06, #93 wz
06d9c     14 05 90 AD |  if_e	jmp	#LR__0665
06da0     96 28 0E F2 | 	cmp	local06, #150 wz
06da4     A4 02 90 AD |  if_e	jmp	#LR__0611
06da8     43 28 0E F2 | 	cmp	local06, #67 wz
06dac     A4 02 90 AD |  if_e	jmp	#LR__0612
06db0     5A 28 0E F2 | 	cmp	local06, #90 wz
06db4     A8 02 90 AD |  if_e	jmp	#LR__0613
06db8     AB 28 0E F2 | 	cmp	local06, #171 wz
06dbc     F4 04 90 AD |  if_e	jmp	#LR__0665
06dc0     BD 28 0E F2 | 	cmp	local06, #189 wz
06dc4     A0 02 90 AD |  if_e	jmp	#LR__0614
06dc8     BB 28 0E F2 | 	cmp	local06, #187 wz
06dcc     A4 02 90 AD |  if_e	jmp	#LR__0615
06dd0     4E 28 0E F2 | 	cmp	local06, #78 wz
06dd4     A8 02 90 AD |  if_e	jmp	#LR__0616
06dd8     A9 28 0E F2 | 	cmp	local06, #169 wz
06ddc     BC 02 90 AD |  if_e	jmp	#LR__0618
06de0     46 28 0E F2 | 	cmp	local06, #70 wz
06de4     BC 02 90 AD |  if_e	jmp	#LR__0619
06de8     71 28 0E F2 | 	cmp	local06, #113 wz
06dec     C0 02 90 AD |  if_e	jmp	#LR__0620
06df0     60 28 0E F2 | 	cmp	local06, #96 wz
06df4     C4 02 90 AD |  if_e	jmp	#LR__0621
06df8     4A 28 0E F2 | 	cmp	local06, #74 wz
06dfc     C8 02 90 AD |  if_e	jmp	#LR__0622
06e00     48 28 0E F2 | 	cmp	local06, #72 wz
06e04     C8 02 90 AD |  if_e	jmp	#LR__0623
06e08     58 28 0E F2 | 	cmp	local06, #88 wz
06e0c     CC 02 90 AD |  if_e	jmp	#LR__0624
06e10     5F 28 0E F2 | 	cmp	local06, #95 wz
06e14     CC 02 90 AD |  if_e	jmp	#LR__0625
06e18     8A 28 0E F2 | 	cmp	local06, #138 wz
06e1c     D0 02 90 AD |  if_e	jmp	#LR__0626
06e20     4C 28 0E F2 | 	cmp	local06, #76 wz
06e24     D4 02 90 AD |  if_e	jmp	#LR__0627
06e28     52 28 0E F2 | 	cmp	local06, #82 wz
06e2c     D8 02 90 AD |  if_e	jmp	#LR__0628
06e30     97 28 0E F2 | 	cmp	local06, #151 wz
06e34     DC 02 90 AD |  if_e	jmp	#LR__0629
06e38     61 28 0E F2 | 	cmp	local06, #97 wz
06e3c     E0 02 90 AD |  if_e	jmp	#LR__0630
06e40     63 28 0E F2 | 	cmp	local06, #99 wz
06e44     E4 02 90 AD |  if_e	jmp	#LR__0631
06e48     41 28 0E F2 | 	cmp	local06, #65 wz
06e4c     64 04 90 AD |  if_e	jmp	#LR__0665
06e50     4B 28 0E F2 | 	cmp	local06, #75 wz
06e54     E0 02 90 AD |  if_e	jmp	#LR__0632
06e58     B3 28 0E F2 | 	cmp	local06, #179 wz
06e5c     E0 02 90 AD |  if_e	jmp	#LR__0633
06e60     5E 28 0E F2 | 	cmp	local06, #94 wz
06e64     E4 02 90 AD |  if_e	jmp	#LR__0634
06e68     7C 28 0E F2 | 	cmp	local06, #124 wz
06e6c     E8 02 90 AD |  if_e	jmp	#LR__0635
06e70     7D 28 0E F2 | 	cmp	local06, #125 wz
06e74     EC 02 90 AD |  if_e	jmp	#LR__0636
06e78     7E 28 0E F2 | 	cmp	local06, #126 wz
06e7c     F0 02 90 AD |  if_e	jmp	#LR__0637
06e80     7F 28 0E F2 | 	cmp	local06, #127 wz
06e84     F4 02 90 AD |  if_e	jmp	#LR__0638
06e88     80 28 0E F2 | 	cmp	local06, #128 wz
06e8c     F8 02 90 AD |  if_e	jmp	#LR__0639
06e90     55 28 0E F2 | 	cmp	local06, #85 wz
06e94     FC 02 90 AD |  if_e	jmp	#LR__0640
06e98     75 28 0E F2 | 	cmp	local06, #117 wz
06e9c     00 03 90 AD |  if_e	jmp	#LR__0641
06ea0     42 28 0E F2 | 	cmp	local06, #66 wz
06ea4     04 03 90 AD |  if_e	jmp	#LR__0642
06ea8     95 28 0E F2 | 	cmp	local06, #149 wz
06eac     08 03 90 AD |  if_e	jmp	#LR__0643
06eb0     AC 28 0E F2 | 	cmp	local06, #172 wz
06eb4     FC 03 90 AD |  if_e	jmp	#LR__0665
06eb8     81 28 0E F2 | 	cmp	local06, #129 wz
06ebc     04 03 90 AD |  if_e	jmp	#LR__0644
06ec0     44 28 0E F2 | 	cmp	local06, #68 wz
06ec4     08 03 90 AD |  if_e	jmp	#LR__0645
06ec8     BC 28 0E F2 | 	cmp	local06, #188 wz
06ecc     0C 03 90 AD |  if_e	jmp	#LR__0646
06ed0     88 28 0E F2 | 	cmp	local06, #136 wz
06ed4     DC 03 90 AD |  if_e	jmp	#LR__0665
06ed8     92 28 0E F2 | 	cmp	local06, #146 wz
06edc     08 03 90 AD |  if_e	jmp	#LR__0647
06ee0     BE 28 0E F2 | 	cmp	local06, #190 wz
06ee4     88 04 90 AD |  if_e	jmp	#LR__0666
06ee8     AA 28 0E F2 | 	cmp	local06, #170 wz
06eec     C4 03 90 AD |  if_e	jmp	#LR__0665
06ef0     4D 28 0E F2 | 	cmp	local06, #77 wz
06ef4     F8 02 90 AD |  if_e	jmp	#LR__0648
06ef8     51 28 0E F2 | 	cmp	local06, #81 wz
06efc     FC 02 90 AD |  if_e	jmp	#LR__0649
06f00     8E 28 0E F2 | 	cmp	local06, #142 wz
06f04     00 03 90 AD |  if_e	jmp	#LR__0650
06f08     90 28 0E F2 | 	cmp	local06, #144 wz
06f0c     04 03 90 AD |  if_e	jmp	#LR__0651
06f10     8D 28 0E F2 | 	cmp	local06, #141 wz
06f14     08 03 90 AD |  if_e	jmp	#LR__0652
06f18     8C 28 0E F2 | 	cmp	local06, #140 wz
06f1c     0C 03 90 AD |  if_e	jmp	#LR__0653
06f20     91 28 0E F2 | 	cmp	local06, #145 wz
06f24     10 03 90 AD |  if_e	jmp	#LR__0654
06f28     8B 28 0E F2 | 	cmp	local06, #139 wz
06f2c     14 03 90 AD |  if_e	jmp	#LR__0655
06f30     8F 28 0E F2 | 	cmp	local06, #143 wz
06f34     18 03 90 AD |  if_e	jmp	#LR__0656
06f38     B2 28 0E F2 | 	cmp	local06, #178 wz
06f3c     1C 03 90 AD |  if_e	jmp	#LR__0657
06f40     6D 28 0E F2 | 	cmp	local06, #109 wz
06f44     20 03 90 AD |  if_e	jmp	#LR__0658
06f48     70 28 0E F2 | 	cmp	local06, #112 wz
06f4c     64 03 90 AD |  if_e	jmp	#LR__0665
06f50     56 28 0E F2 | 	cmp	local06, #86 wz
06f54     1C 03 90 AD |  if_e	jmp	#LR__0659
06f58     57 28 0E F2 | 	cmp	local06, #87 wz
06f5c     54 03 90 AD |  if_e	jmp	#LR__0665
06f60     79 28 0E F2 | 	cmp	local06, #121 wz
06f64     18 03 90 AD |  if_e	jmp	#LR__0660
06f68     77 28 0E F2 | 	cmp	local06, #119 wz
06f6c     1C 03 90 AD |  if_e	jmp	#LR__0661
06f70     78 28 0E F2 | 	cmp	local06, #120 wz
06f74     20 03 90 AD |  if_e	jmp	#LR__0662
06f78     01 00 00 FF 
06f7c     04 28 0E F2 | 	cmp	local06, ##516 wz
06f80     20 03 90 AD |  if_e	jmp	#LR__0663
06f84     24 03 90 FD | 	jmp	#LR__0664
06f88                 | LR__0594
06f88     08 0D B0 FD | 	call	#_compile_fun_2p
06f8c     FD 26 02 F6 | 	mov	local05, result1
06f90     20 03 90 FD | 	jmp	#LR__0665
06f94                 | LR__0595
06f94     3C 0E B0 FD | 	call	#_compile_fun_4p
06f98     FD 26 02 F6 | 	mov	local05, result1
06f9c     14 03 90 FD | 	jmp	#LR__0665
06fa0                 | LR__0596
06fa0     68 33 B0 FD | 	call	#_expr
06fa4                 | ' expr()
06fa4                 | ' return 0
06fa4     00 26 06 F6 | 	mov	local05, #0
06fa8     08 03 90 FD | 	jmp	#LR__0665
06fac                 | LR__0597
06fac     58 0D B0 FD | 	call	#_compile_fun_3p
06fb0     FD 26 02 F6 | 	mov	local05, result1
06fb4     FC 02 90 FD | 	jmp	#LR__0665
06fb8                 | LR__0598
06fb8     50 33 B0 FD | 	call	#_expr
06fbc                 | ' expr()
06fbc                 | ' return 0
06fbc     00 26 06 F6 | 	mov	local05, #0
06fc0     F0 02 90 FD | 	jmp	#LR__0665
06fc4                 | LR__0599
06fc4     44 33 B0 FD | 	call	#_expr
06fc8                 | ' expr()
06fc8                 | ' return 0
06fc8     E8 02 90 FD | 	jmp	#LR__0665
06fcc                 | LR__0600
06fcc     3C 33 B0 FD | 	call	#_expr
06fd0                 | ' expr()
06fd0                 | ' return 0
06fd0     00 26 06 F6 | 	mov	local05, #0
06fd4     DC 02 90 FD | 	jmp	#LR__0665
06fd8                 | LR__0601
06fd8     98 10 B0 FD | 	call	#_compile_fun_varp
06fdc     FD 2C 02 F6 | 	mov	local08, result1
06fe0     D0 02 90 FD | 	jmp	#LR__0665
06fe4                 | LR__0602
06fe4     8C 10 B0 FD | 	call	#_compile_fun_varp
06fe8     FD 2C 02 F6 | 	mov	local08, result1
06fec     C4 02 90 FD | 	jmp	#LR__0665
06ff0                 | LR__0603
06ff0     80 10 B0 FD | 	call	#_compile_fun_varp
06ff4     FD 2C 02 F6 | 	mov	local08, result1
06ff8     B8 02 90 FD | 	jmp	#LR__0665
06ffc                 | LR__0604
06ffc     74 10 B0 FD | 	call	#_compile_fun_varp
07000     FD 2C 02 F6 | 	mov	local08, result1
07004     AC 02 90 FD | 	jmp	#LR__0665
07008                 | LR__0605
07008     68 10 B0 FD | 	call	#_compile_fun_varp
0700c     FD 2C 02 F6 | 	mov	local08, result1
07010     A0 02 90 FD | 	jmp	#LR__0665
07014                 | LR__0606
07014     F4 32 B0 FD | 	call	#_expr
07018                 | ' expr()
07018                 | ' return 0
07018     00 26 06 F6 | 	mov	local05, #0
0701c     94 02 90 FD | 	jmp	#LR__0665
07020                 | LR__0607
07020     50 10 B0 FD | 	call	#_compile_fun_varp
07024     FD 2C 02 F6 | 	mov	local08, result1
07028     88 02 90 FD | 	jmp	#LR__0665
0702c                 | LR__0608
0702c     44 10 B0 FD | 	call	#_compile_fun_varp
07030     FD 2C 02 F6 | 	mov	local08, result1
07034     7C 02 90 FD | 	jmp	#LR__0665
07038                 | LR__0609
07038     BC 0E B0 FD | 	call	#_compile_fun_5p
0703c     FD 26 02 F6 | 	mov	local05, result1
07040     70 02 90 FD | 	jmp	#LR__0665
07044                 | LR__0610
07044     18 1A B0 FD | 	call	#_compile_dim
07048     24 03 90 FD | 	jmp	#LR__0666
0704c                 | LR__0611
0704c     44 0C B0 FD | 	call	#_compile_fun_2p
07050     60 02 90 FD | 	jmp	#LR__0665
07054                 | LR__0612
07054     3C 0C B0 FD | 	call	#_compile_fun_2p
07058     FD 26 02 F6 | 	mov	local05, result1
0705c     54 02 90 FD | 	jmp	#LR__0665
07060                 | LR__0613
07060     D4 18 B0 FD | 	call	#_compile_else
07064     08 03 90 FD | 	jmp	#LR__0666
07068                 | LR__0614
07068     08 10 B0 FD | 	call	#_compile_fun_varp
0706c     FD 2C 02 F6 | 	mov	local08, result1
07070     40 02 90 FD | 	jmp	#LR__0665
07074                 | LR__0615
07074     FC 0F B0 FD | 	call	#_compile_fun_varp
07078     FD 2C 02 F6 | 	mov	local08, result1
0707c     34 02 90 FD | 	jmp	#LR__0665
07080                 | LR__0616
07080     01 24 16 F2 | 	cmp	local04, #1 wc
07084     08 00 90 CD |  if_b	jmp	#LR__0617
07088     90 2E B0 FD | 	call	#_compile_goto
0708c     E0 02 90 FD | 	jmp	#LR__0666
07090                 | LR__0617
07090     19 12 06 F6 | 	mov	arg01, #25
07094     B8 64 B1 FD | 	call	#_printerror
07098     D4 02 90 FD | 	jmp	#LR__0666
0709c                 | LR__0618
0709c     14 2E B0 FD | 	call	#_compile_gosub
070a0     CC 02 90 FD | 	jmp	#LR__0666
070a4                 | LR__0619
070a4     60 0C B0 FD | 	call	#_compile_fun_3p
070a8     FD 26 02 F6 | 	mov	local05, result1
070ac     04 02 90 FD | 	jmp	#LR__0665
070b0                 | LR__0620
070b0     20 0D B0 FD | 	call	#_compile_fun_4p
070b4     FD 26 02 F6 | 	mov	local05, result1
070b8     F8 01 90 FD | 	jmp	#LR__0665
070bc                 | LR__0621
070bc     4C 32 B0 FD | 	call	#_expr
070c0                 | ' expr()
070c0                 | ' return 0
070c0     00 26 06 F6 | 	mov	local05, #0
070c4     EC 01 90 FD | 	jmp	#LR__0665
070c8                 | LR__0622
070c8     A4 20 B0 FD | 	call	#_compile_for
070cc     A0 02 90 FD | 	jmp	#LR__0666
070d0                 | LR__0623
070d0     00 0D B0 FD | 	call	#_compile_fun_4p
070d4     FD 26 02 F6 | 	mov	local05, result1
070d8     D8 01 90 FD | 	jmp	#LR__0665
070dc                 | LR__0624
070dc     18 17 B0 FD | 	call	#_compile_if
070e0     8C 02 90 FD | 	jmp	#LR__0666
070e4                 | LR__0625
070e4     24 32 B0 FD | 	call	#_expr
070e8                 | ' expr()
070e8                 | ' return 0
070e8     00 26 06 F6 | 	mov	local05, #0
070ec     C4 01 90 FD | 	jmp	#LR__0665
070f0                 | LR__0626
070f0     18 32 B0 FD | 	call	#_expr
070f4                 | ' expr()
070f4                 | ' return 0
070f4     00 26 06 F6 | 	mov	local05, #0
070f8     B8 01 90 FD | 	jmp	#LR__0665
070fc                 | LR__0627
070fc     74 0F B0 FD | 	call	#_compile_fun_varp
07100     FD 2C 02 F6 | 	mov	local08, result1
07104     AC 01 90 FD | 	jmp	#LR__0665
07108                 | LR__0628
07108     68 0F B0 FD | 	call	#_compile_fun_varp
0710c     FD 2C 02 F6 | 	mov	local08, result1
07110     A0 01 90 FD | 	jmp	#LR__0665
07114                 | LR__0629
07114     7C 0B B0 FD | 	call	#_compile_fun_2p
07118     FD 26 02 F6 | 	mov	local05, result1
0711c     94 01 90 FD | 	jmp	#LR__0665
07120                 | LR__0630
07120     E8 31 B0 FD | 	call	#_expr
07124                 | ' expr()
07124                 | ' return 0
07124     00 26 06 F6 | 	mov	local05, #0
07128     88 01 90 FD | 	jmp	#LR__0665
0712c                 | LR__0631
0712c     DC 31 B0 FD | 	call	#_expr
07130                 | ' expr()
07130                 | ' return 0
07130     00 26 06 F6 | 	mov	local05, #0
07134     7C 01 90 FD | 	jmp	#LR__0665
07138                 | LR__0632
07138     C8 2B B0 FD | 	call	#_compile_next
0713c     30 02 90 FD | 	jmp	#LR__0666
07140                 | LR__0633
07140     C4 0B B0 FD | 	call	#_compile_fun_3p
07144     FD 26 02 F6 | 	mov	local05, result1
07148     68 01 90 FD | 	jmp	#LR__0665
0714c                 | LR__0634
0714c     BC 31 B0 FD | 	call	#_expr
07150                 | ' expr()
07150                 | ' return 0
07150     00 26 06 F6 | 	mov	local05, #0
07154     5C 01 90 FD | 	jmp	#LR__0665
07158                 | LR__0635
07158     B0 31 B0 FD | 	call	#_expr
0715c                 | ' expr()
0715c                 | ' return 0
0715c     00 26 06 F6 | 	mov	local05, #0
07160     50 01 90 FD | 	jmp	#LR__0665
07164                 | LR__0636
07164     A4 31 B0 FD | 	call	#_expr
07168                 | ' expr()
07168                 | ' return 0
07168     00 26 06 F6 | 	mov	local05, #0
0716c     44 01 90 FD | 	jmp	#LR__0665
07170                 | LR__0637
07170     98 31 B0 FD | 	call	#_expr
07174                 | ' expr()
07174                 | ' return 0
07174     00 26 06 F6 | 	mov	local05, #0
07178     38 01 90 FD | 	jmp	#LR__0665
0717c                 | LR__0638
0717c     54 0C B0 FD | 	call	#_compile_fun_4p
07180     FD 26 02 F6 | 	mov	local05, result1
07184     2C 01 90 FD | 	jmp	#LR__0665
07188                 | LR__0639
07188     80 31 B0 FD | 	call	#_expr
0718c                 | ' expr()
0718c                 | ' return 0
0718c     00 26 06 F6 | 	mov	local05, #0
07190     20 01 90 FD | 	jmp	#LR__0665
07194                 | LR__0640
07194     FC 0A B0 FD | 	call	#_compile_fun_2p
07198     FD 26 02 F6 | 	mov	local05, result1
0719c     14 01 90 FD | 	jmp	#LR__0665
071a0                 | LR__0641
071a0     D0 0E B0 FD | 	call	#_compile_fun_varp
071a4     FD 2C 02 F6 | 	mov	local08, result1
071a8     08 01 90 FD | 	jmp	#LR__0665
071ac                 | LR__0642
071ac     E4 0A B0 FD | 	call	#_compile_fun_2p
071b0     FD 26 02 F6 | 	mov	local05, result1
071b4     FC 00 90 FD | 	jmp	#LR__0665
071b8                 | LR__0643
071b8     D8 0A B0 FD | 	call	#_compile_fun_2p
071bc     FD 26 02 F6 | 	mov	local05, result1
071c0     F0 00 90 FD | 	jmp	#LR__0665
071c4                 | LR__0644
071c4     CC 0A B0 FD | 	call	#_compile_fun_2p
071c8     FD 26 02 F6 | 	mov	local05, result1
071cc     E4 00 90 FD | 	jmp	#LR__0665
071d0                 | LR__0645
071d0     4C 0F B0 FD | 	call	#_compile_print
071d4     FD 26 02 F6 | 	mov	local05, result1
071d8     94 01 90 FD | 	jmp	#LR__0666
071dc                 | LR__0646
071dc     94 0E B0 FD | 	call	#_compile_fun_varp
071e0     FD 2C 02 F6 | 	mov	local08, result1
071e4     CC 00 90 FD | 	jmp	#LR__0665
071e8                 | LR__0647
071e8     20 31 B0 FD | 	call	#_expr
071ec                 | ' expr()
071ec                 | ' return 0
071ec     C4 00 90 FD | 	jmp	#LR__0665
071f0                 | LR__0648
071f0     80 0E B0 FD | 	call	#_compile_fun_varp
071f4     FD 2C 02 F6 | 	mov	local08, result1
071f8     B8 00 90 FD | 	jmp	#LR__0665
071fc                 | LR__0649
071fc     74 0E B0 FD | 	call	#_compile_fun_varp
07200     FD 2C 02 F6 | 	mov	local08, result1
07204     AC 00 90 FD | 	jmp	#LR__0665
07208                 | LR__0650
07208     88 0A B0 FD | 	call	#_compile_fun_2p
0720c     FD 26 02 F6 | 	mov	local05, result1
07210     A0 00 90 FD | 	jmp	#LR__0665
07214                 | LR__0651
07214     7C 0A B0 FD | 	call	#_compile_fun_2p
07218     FD 26 02 F6 | 	mov	local05, result1
0721c     94 00 90 FD | 	jmp	#LR__0665
07220                 | LR__0652
07220     70 0A B0 FD | 	call	#_compile_fun_2p
07224     FD 26 02 F6 | 	mov	local05, result1
07228     88 00 90 FD | 	jmp	#LR__0665
0722c                 | LR__0653
0722c     64 0A B0 FD | 	call	#_compile_fun_2p
07230     FD 26 02 F6 | 	mov	local05, result1
07234     7C 00 90 FD | 	jmp	#LR__0665
07238                 | LR__0654
07238     58 0A B0 FD | 	call	#_compile_fun_2p
0723c     FD 26 02 F6 | 	mov	local05, result1
07240     70 00 90 FD | 	jmp	#LR__0665
07244                 | LR__0655
07244     4C 0A B0 FD | 	call	#_compile_fun_2p
07248     FD 26 02 F6 | 	mov	local05, result1
0724c     64 00 90 FD | 	jmp	#LR__0665
07250                 | LR__0656
07250     40 0A B0 FD | 	call	#_compile_fun_2p
07254     FD 26 02 F6 | 	mov	local05, result1
07258     58 00 90 FD | 	jmp	#LR__0665
0725c                 | LR__0657
0725c     14 0E B0 FD | 	call	#_compile_fun_varp
07260     FD 2C 02 F6 | 	mov	local08, result1
07264     4C 00 90 FD | 	jmp	#LR__0665
07268                 | LR__0658
07268     9C 0A B0 FD | 	call	#_compile_fun_3p
0726c     FD 26 02 F6 | 	mov	local05, result1
07270     40 00 90 FD | 	jmp	#LR__0665
07274                 | LR__0659
07274     94 30 B0 FD | 	call	#_expr
07278                 | ' expr()
07278                 | ' return 0
07278     00 26 06 F6 | 	mov	local05, #0
0727c     34 00 90 FD | 	jmp	#LR__0665
07280                 | LR__0660
07280     10 0A B0 FD | 	call	#_compile_fun_2p
07284     FD 26 02 F6 | 	mov	local05, result1
07288     28 00 90 FD | 	jmp	#LR__0665
0728c                 | LR__0661
0728c     04 0A B0 FD | 	call	#_compile_fun_2p
07290     FD 26 02 F6 | 	mov	local05, result1
07294     1C 00 90 FD | 	jmp	#LR__0665
07298                 | LR__0662
07298     F8 09 B0 FD | 	call	#_compile_fun_2p
0729c     FD 26 02 F6 | 	mov	local05, result1
072a0     10 00 90 FD | 	jmp	#LR__0665
072a4                 | LR__0663
072a4     E4 01 B0 FD | 	call	#_compile_array_assign
072a8     C4 00 90 FD | 	jmp	#LR__0666
072ac                 | LR__0664
072ac     28 09 B0 FD | 	call	#_compile_unknown
072b0     BC 00 90 FD | 	jmp	#LR__0666
072b4                 | LR__0665
072b4     14 23 02 F6 | 	mov	local03, local06
072b8     16 1F 02 F6 | 	mov	local01, local08
072bc     0F 2B 02 F6 | 	mov	local07, local01
072c0     10 2F 02 F6 | 	mov	local09, local02
072c4     11 29 02 F6 | 	mov	local06, local03
072c8     4A 00 00 FF 
072cc     7C E4 05 F1 | 	add	objptr, ##38012
072d0     F2 1E 02 FB | 	rdlong	local01, objptr
072d4     0F 2D 02 F6 | 	mov	local08, local01
072d8     01 2C 66 F0 | 	shl	local08, #1
072dc     0F 2D 02 F1 | 	add	local08, local01
072e0     02 2C 66 F0 | 	shl	local08, #2
072e4     03 00 00 FF 
072e8     00 E4 85 F1 | 	sub	objptr, ##1536
072ec     F2 2C 02 F1 | 	add	local08, objptr
072f0     16 2B 62 FC | 	wrlong	local07, local08
072f4     03 00 00 FF 
072f8     00 E4 05 F1 | 	add	objptr, ##1536
072fc     F2 1E 02 FB | 	rdlong	local01, objptr
07300     0F 2D 02 F6 | 	mov	local08, local01
07304     01 2C 66 F0 | 	shl	local08, #1
07308     0F 2D 02 F1 | 	add	local08, local01
0730c     02 2C 66 F0 | 	shl	local08, #2
07310     03 00 00 FF 
07314     00 E4 85 F1 | 	sub	objptr, ##1536
07318     F2 2C 02 F1 | 	add	local08, objptr
0731c     04 2C 06 F1 | 	add	local08, #4
07320     16 2F 62 FC | 	wrlong	local09, local08
07324     03 00 00 FF 
07328     00 E4 05 F1 | 	add	objptr, ##1536
0732c     F2 1E 02 FB | 	rdlong	local01, objptr
07330     0F 2D 02 F6 | 	mov	local08, local01
07334     01 2C 66 F0 | 	shl	local08, #1
07338     0F 2D 02 F1 | 	add	local08, local01
0733c     02 2C 66 F0 | 	shl	local08, #2
07340     03 00 00 FF 
07344     00 E4 85 F1 | 	sub	objptr, ##1536
07348     F2 2C 02 F1 | 	add	local08, objptr
0734c     08 2C 06 F1 | 	add	local08, #8
07350     16 29 62 FC | 	wrlong	local06, local08
07354     03 00 00 FF 
07358     00 E4 05 F1 | 	add	objptr, ##1536
0735c     F2 2A 02 FB | 	rdlong	local07, objptr
07360     01 2A 06 F1 | 	add	local07, #1
07364     F2 2A 62 FC | 	wrlong	local07, objptr
07368     4A 00 00 FF 
0736c     7C E4 85 F1 | 	sub	objptr, ##38012
07370                 | LR__0666
07370                 | ' 
07370                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
07370                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
07370     03 24 0E F2 | 	cmp	local04, #3 wz
07374     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
07378     38 00 90 5D |  if_ne	jmp	#LR__0667
0737c     4A 00 00 FF 
07380     7C E4 05 F1 | 	add	objptr, ##38012
07384     F2 2C 02 FB | 	rdlong	local08, objptr
07388     16 1F 02 F6 | 	mov	local01, local08
0738c     01 1E 66 F0 | 	shl	local01, #1
07390     16 1F 02 F1 | 	add	local01, local08
07394     02 1E 66 F0 | 	shl	local01, #2
07398     03 00 00 FF 
0739c     00 E4 85 F1 | 	sub	objptr, ##1536
073a0     F2 1E 02 F1 | 	add	local01, objptr
073a4     08 1E 06 F1 | 	add	local01, #8
073a8     0F FD 6B FC | 	wrlong	#510, local01
073ac     47 00 00 FF 
073b0     7C E4 85 F1 | 	sub	objptr, ##36476
073b4                 | LR__0667
073b4                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
073b4     4A 00 00 FF 
073b8     7C E4 05 F1 | 	add	objptr, ##38012
073bc     F2 1E 02 FB | 	rdlong	local01, objptr
073c0     4A 00 00 FF 
073c4     7C E4 85 F1 | 	sub	objptr, ##38012
073c8     97 58 48 FB | 	callpa	#(@LR__0670-@LR__0668)>>2,fcache_load_ptr_
073cc                 | LR__0668
073cc     0F 2D 02 F6 | 	mov	local08, local01
073d0     01 2C 66 F0 | 	shl	local08, #1
073d4     0F 2D 02 F1 | 	add	local08, local01
073d8     02 2C 66 F0 | 	shl	local08, #2
073dc     47 00 00 FF 
073e0     7C E4 05 F1 | 	add	objptr, ##36476
073e4     F2 2C 02 F1 | 	add	local08, objptr
073e8     08 2C 06 F1 | 	add	local08, #8
073ec     16 2D 02 FB | 	rdlong	local08, local08
073f0     9B 2C 0E F2 | 	cmp	local08, #155 wz
073f4     47 00 00 FF 
073f8     7C E4 85 F1 | 	sub	objptr, ##36476
073fc     70 00 90 5D |  if_ne	jmp	#LR__0669
07400     0F 2D 02 F6 | 	mov	local08, local01
07404     01 2C 86 F1 | 	sub	local08, #1
07408     16 2F 02 F6 | 	mov	local09, local08
0740c     01 2E 66 F0 | 	shl	local09, #1
07410     16 2F 02 F1 | 	add	local09, local08
07414     02 2E 66 F0 | 	shl	local09, #2
07418     47 00 00 FF 
0741c     7C E4 05 F1 | 	add	objptr, ##36476
07420     F2 2E 02 F1 | 	add	local09, objptr
07424     08 2E 06 F1 | 	add	local09, #8
07428     17 2D 02 FB | 	rdlong	local08, local09
0742c     11 2C 0E F2 | 	cmp	local08, #17 wz
07430     47 00 00 FF 
07434     7C E4 85 F1 | 	sub	objptr, ##36476
07438     34 00 90 5D |  if_ne	jmp	#LR__0669
0743c     0F 2F 02 F6 | 	mov	local09, local01
07440     01 2E 86 F1 | 	sub	local09, #1
07444     17 2D 02 F6 | 	mov	local08, local09
07448     01 2C 66 F0 | 	shl	local08, #1
0744c     17 2D 02 F1 | 	add	local08, local09
07450     02 2C 66 F0 | 	shl	local08, #2
07454     47 00 00 FF 
07458     7C E4 05 F1 | 	add	objptr, ##36476
0745c     F2 2C 02 F1 | 	add	local08, objptr
07460     08 2C 06 F1 | 	add	local08, #8
07464     16 25 68 FC | 	wrlong	#18, local08
07468     47 00 00 FF 
0746c     7C E4 85 F1 | 	sub	objptr, ##36476
07470                 | LR__0669
07470     01 1E 86 F1 | 	sub	local01, #1
07474     01 1E 56 F2 | 	cmps	local01, #1 wc
07478     50 FF 9F 3D |  if_ae	jmp	#LR__0668
0747c                 | LR__0670
0747c                 | ' 'print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
0747c                 | ' 'print "In compile_immediate:" : for i=0 to lineptr: print ucompiledline(i): next i
0747c                 | ' return err
0747c     13 FB 01 F6 | 	mov	result1, local05
07480     A7 F0 03 F6 | 	mov	ptra, fp
07484     B2 00 A0 FD | 	call	#popregs_
07488                 | _compile_immediate_ret
07488     2D 00 64 FD | 	ret
0748c                 | 
0748c                 | ' 
0748c                 | ' sub compile_array_assign
0748c                 | _compile_array_assign
0748c     0A 4A 05 F6 | 	mov	COUNT_, #10
07490     A8 00 A0 FD | 	call	#pushregs_
07494     00 24 06 F6 | 	mov	local04, #0
07498     37 00 00 FF 
0749c     44 E4 05 F1 | 	add	objptr, ##28228
074a0     F2 26 02 FB | 	rdlong	local05, objptr
074a4     13 FB 01 F6 | 	mov	result1, local05
074a8     01 FA 85 F1 | 	sub	result1, #1
074ac     03 FA 65 F0 | 	shl	result1, #3
074b0     02 00 00 FF 
074b4     38 E4 85 F1 | 	sub	objptr, ##1080
074b8     F2 FA 01 F1 | 	add	result1, objptr
074bc     FD 28 02 FB | 	rdlong	local06, result1
074c0                 | ' numpar=0
074c0                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
074c0                 | ' ' todo here: recognize params and t1.result.twowords=numpar
074c0                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
074c0                 | ' if lparts(ct).token=token_lpar then
074c0     03 26 66 F0 | 	shl	local05, #3
074c4     F2 26 02 F1 | 	add	local05, objptr
074c8     04 26 06 F1 | 	add	local05, #4
074cc     13 27 02 FB | 	rdlong	local05, local05
074d0     15 26 0E F2 | 	cmp	local05, #21 wz
074d4     35 00 00 FF 
074d8     0C E4 85 F1 | 	sub	objptr, ##27148
074dc     D4 01 90 5D |  if_ne	jmp	#LR__0684
074e0     37 00 00 FF 
074e4     44 E4 05 F1 | 	add	objptr, ##28228
074e8     F2 2A 02 FB | 	rdlong	local07, objptr
074ec     01 2A 06 F1 | 	add	local07, #1
074f0     F2 2A 62 FC | 	wrlong	local07, objptr
074f4     37 00 00 FF 
074f8     44 E4 85 F1 | 	sub	objptr, ##28228
074fc                 | '   ct+=1 											' omit this lpar, this is for expr list
074fc                 | '   do
074fc                 | LR__0680
074fc     0C 2E B0 FD | 	call	#_expr
07500     37 00 00 FF 
07504     44 E4 05 F1 | 	add	objptr, ##28228
07508     F2 26 02 FB | 	rdlong	local05, objptr
0750c     01 26 06 F1 | 	add	local05, #1
07510     F2 26 62 FC | 	wrlong	local05, objptr
07514     01 24 06 F1 | 	add	local04, #1
07518     01 26 86 F1 | 	sub	local05, #1
0751c     03 26 66 F0 | 	shl	local05, #3
07520     02 00 00 FF 
07524     38 E4 85 F1 | 	sub	objptr, ##1080
07528     F2 26 02 F1 | 	add	local05, objptr
0752c     04 26 06 F1 | 	add	local05, #4
07530     13 2B 02 FB | 	rdlong	local07, local05
07534     14 2A 0E F2 | 	cmp	local07, #20 wz
07538     35 00 00 FF 
0753c     0C E4 85 F1 | 	sub	objptr, ##27148
07540     34 00 90 AD |  if_e	jmp	#LR__0681
07544     37 00 00 FF 
07548     44 E4 05 F1 | 	add	objptr, ##28228
0754c     F2 2A 02 FB | 	rdlong	local07, objptr
07550     03 2A 66 F0 | 	shl	local07, #3
07554     02 00 00 FF 
07558     38 E4 85 F1 | 	sub	objptr, ##1080
0755c     F2 2A 02 F1 | 	add	local07, objptr
07560     04 2A 06 F1 | 	add	local07, #4
07564     15 2B 02 FB | 	rdlong	local07, local07
07568     FE 2B 0E F2 | 	cmp	local07, #510 wz
0756c     35 00 00 FF 
07570     0C E4 85 F1 | 	sub	objptr, ##27148
07574     84 FF 9F 5D |  if_ne	jmp	#LR__0680
07578                 | LR__0681
07578     37 00 00 FF 
0757c     44 E4 05 F1 | 	add	objptr, ##28228
07580     F2 2A 02 FB | 	rdlong	local07, objptr
07584     01 2A 06 F1 | 	add	local07, #1
07588     F2 2A 62 FC | 	wrlong	local07, objptr
0758c     37 00 00 FF 
07590     44 E4 85 F1 | 	sub	objptr, ##28228
07594     74 2D B0 FD | 	call	#_expr
07598     01 2C 66 F6 | 	neg	local08, #1
0759c     00 2E 06 F6 | 	mov	local09, #0
075a0                 | ' '   print "in array_assign, rpar found, numpar=",numpar
075a0                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
075a0                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
075a0                 | ' ct+=1 : expr()
075a0                 | ' ' now find the vae
075a0                 | ' 
075a0                 | ' j=-1 : i=0 : do : 
075a0                 | LR__0682
075a0                 | '   if variables(i).name=varname$ then j=i: exit loop
075a0     17 27 02 F6 | 	mov	local05, local09
075a4     04 26 66 F0 | 	shl	local05, #4
075a8     14 00 00 FF 
075ac     F8 E5 05 F1 | 	add	objptr, ##10744
075b0     F2 26 02 F1 | 	add	local05, objptr
075b4     13 13 02 FB | 	rdlong	arg01, local05
075b8     14 15 02 F6 | 	mov	arg02, local06
075bc     14 00 00 FF 
075c0     F8 E5 85 F1 | 	sub	objptr, ##10744
075c4     48 95 B1 FD | 	call	#__system___string_cmp
075c8     00 FA 0D F2 | 	cmp	result1, #0 wz
075cc     17 2D 02 A6 |  if_e	mov	local08, local09
075d0     20 00 90 AD |  if_e	jmp	#LR__0683
075d4     01 2E 06 F1 | 	add	local09, #1
075d8     35 00 00 FF 
075dc     08 E4 05 F1 | 	add	objptr, ##27144
075e0     F2 2A 02 FB | 	rdlong	local07, objptr
075e4     35 00 00 FF 
075e8     08 E4 85 F1 | 	sub	objptr, ##27144
075ec     15 2F 5A F2 | 	cmps	local09, local07 wcz
075f0     AC FF 9F ED |  if_be	jmp	#LR__0682
075f4                 | LR__0683
075f4     16 1F 02 F6 | 	mov	local01, local08
075f8     12 21 02 F6 | 	mov	local02, local04
075fc     17 22 06 F6 | 	mov	local03, #23
07600     0F 2B 02 F6 | 	mov	local07, local01
07604     10 31 02 F6 | 	mov	local10, local02
07608     11 2D 02 F6 | 	mov	local08, local03
0760c     4A 00 00 FF 
07610     7C E4 05 F1 | 	add	objptr, ##38012
07614     F2 1E 02 FB | 	rdlong	local01, objptr
07618     0F 2F 02 F6 | 	mov	local09, local01
0761c     01 2E 66 F0 | 	shl	local09, #1
07620     0F 2F 02 F1 | 	add	local09, local01
07624     02 2E 66 F0 | 	shl	local09, #2
07628     03 00 00 FF 
0762c     00 E4 85 F1 | 	sub	objptr, ##1536
07630     F2 2E 02 F1 | 	add	local09, objptr
07634     17 2B 62 FC | 	wrlong	local07, local09
07638     03 00 00 FF 
0763c     00 E4 05 F1 | 	add	objptr, ##1536
07640     F2 1E 02 FB | 	rdlong	local01, objptr
07644     0F 2F 02 F6 | 	mov	local09, local01
07648     01 2E 66 F0 | 	shl	local09, #1
0764c     0F 2F 02 F1 | 	add	local09, local01
07650     02 2E 66 F0 | 	shl	local09, #2
07654     03 00 00 FF 
07658     00 E4 85 F1 | 	sub	objptr, ##1536
0765c     F2 2E 02 F1 | 	add	local09, objptr
07660     04 2E 06 F1 | 	add	local09, #4
07664     17 31 62 FC | 	wrlong	local10, local09
07668     03 00 00 FF 
0766c     00 E4 05 F1 | 	add	objptr, ##1536
07670     F2 30 02 FB | 	rdlong	local10, objptr
07674     18 1F 02 F6 | 	mov	local01, local10
07678     01 1E 66 F0 | 	shl	local01, #1
0767c     18 1F 02 F1 | 	add	local01, local10
07680     02 1E 66 F0 | 	shl	local01, #2
07684     03 00 00 FF 
07688     00 E4 85 F1 | 	sub	objptr, ##1536
0768c     F2 1E 02 F1 | 	add	local01, objptr
07690     08 1E 06 F1 | 	add	local01, #8
07694     0F 2D 62 FC | 	wrlong	local08, local01
07698     03 00 00 FF 
0769c     00 E4 05 F1 | 	add	objptr, ##1536
076a0     F2 2A 02 FB | 	rdlong	local07, objptr
076a4     01 2A 06 F1 | 	add	local07, #1
076a8     F2 2A 62 FC | 	wrlong	local07, objptr
076ac     4A 00 00 FF 
076b0     7C E4 85 F1 | 	sub	objptr, ##38012
076b4                 | LR__0684
076b4     A7 F0 03 F6 | 	mov	ptra, fp
076b8     B2 00 A0 FD | 	call	#popregs_
076bc                 | _compile_array_assign_ret
076bc     2D 00 64 FD | 	ret
076c0                 | 
076c0                 | ' 
076c0                 | ' 
076c0                 | ' sub compile_immediate_assign(linetype as ulong)
076c0                 | _compile_immediate_assign
076c0     09 4A 05 F6 | 	mov	COUNT_, #9
076c4     A8 00 A0 FD | 	call	#pushregs_
076c8     09 25 0A F6 | 	mov	local04, arg01 wz
076cc     FF 22 06 F6 | 	mov	local03, #255
076d0     01 26 66 F6 | 	neg	local05, #1
076d4                 | ' 
076d4                 | ' t1.result_type=result_error : t1.result.uresult=0
076d4                 | ' i=-1: j=-1
076d4                 | ' 
076d4                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
076d4     2C 00 90 5D |  if_ne	jmp	#LR__0690
076d8     35 00 00 FF 
076dc     0C E4 05 F1 | 	add	objptr, ##27148
076e0     F2 28 02 FB | 	rdlong	local06, objptr
076e4     02 00 00 FF 
076e8     38 E4 05 F1 | 	add	objptr, ##1080
076ec     F2 04 68 FC | 	wrlong	#2, objptr
076f0     13 00 00 FF 
076f4     38 E4 05 F1 | 	add	objptr, ##9784
076f8     F2 00 68 FC | 	wrlong	#0, objptr
076fc     4A 00 00 FF 
07700     7C E4 85 F1 | 	sub	objptr, ##38012
07704                 | LR__0690
07704                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
07704     02 24 0E F2 | 	cmp	local04, #2 wz
07708     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
0770c     35 00 00 AF 
07710     0C E4 05 A1 |  if_e	add	objptr, ##27148
07714     F2 28 02 AB |  if_e	rdlong	local06, objptr
07718     02 00 00 AF 
0771c     38 E4 05 A1 |  if_e	add	objptr, ##1080
07720     F2 04 68 AC |  if_e	wrlong	#2, objptr
07724     37 00 00 AF 
07728     44 E4 85 A1 |  if_e	sub	objptr, ##28228
0772c                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
0772c     04 24 0E F2 | 	cmp	local04, #4 wz
07730     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
07734     2C 00 90 5D |  if_ne	jmp	#LR__0691
07738     35 00 00 FF 
0773c     14 E4 05 F1 | 	add	objptr, ##27156
07740     F2 28 02 FB | 	rdlong	local06, objptr
07744     02 00 00 FF 
07748     30 E4 05 F1 | 	add	objptr, ##1072
0774c     F2 06 68 FC | 	wrlong	#3, objptr
07750     13 00 00 FF 
07754     38 E4 05 F1 | 	add	objptr, ##9784
07758     F2 04 68 FC | 	wrlong	#2, objptr
0775c     4A 00 00 FF 
07760     7C E4 85 F1 | 	sub	objptr, ##38012
07764                 | LR__0691
07764                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
07764     05 24 0E F2 | 	cmp	local04, #5 wz
07768     3C 00 90 5D |  if_ne	jmp	#LR__0692
0776c     37 00 00 FF 
07770     44 E4 05 F1 | 	add	objptr, ##28228
07774     F2 FA 01 FB | 	rdlong	result1, objptr
07778     FD 28 02 F6 | 	mov	local06, result1
0777c     03 28 66 F0 | 	shl	local06, #3
07780     02 00 00 FF 
07784     38 E4 85 F1 | 	sub	objptr, ##1080
07788     F2 28 02 F1 | 	add	local06, objptr
0778c     14 29 02 FB | 	rdlong	local06, local06
07790     02 FA 05 F1 | 	add	result1, #2
07794     02 00 00 FF 
07798     38 E4 05 F1 | 	add	objptr, ##1080
0779c     F2 FA 61 FC | 	wrlong	result1, objptr
077a0     37 00 00 FF 
077a4     44 E4 85 F1 | 	sub	objptr, ##28228
077a8                 | LR__0692
077a8     14 13 02 F6 | 	mov	arg01, local06
077ac     01 14 06 F6 | 	mov	arg02, #1
077b0     38 B4 B1 FD | 	call	#__system__Right_S
077b4     54 2B B0 FD | 	call	#_expr
077b8                 | '  
077b8                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
077b8                 | ' 
077b8                 | ' suffix2$=right$(varname2$,1)
077b8                 | ' expr()
077b8                 | ' 
077b8                 | ' 
077b8                 | ' if varnum>0 then
077b8     35 00 00 FF 
077bc     08 E4 05 F1 | 	add	objptr, ##27144
077c0     F2 2A 02 FB | 	rdlong	local07, objptr
077c4     35 00 00 FF 
077c8     08 E4 85 F1 | 	sub	objptr, ##27144
077cc     01 2A 56 F2 | 	cmps	local07, #1 wc
077d0     58 00 90 CD |  if_b	jmp	#LR__0695
077d4                 | '   for i=0 to varnum-1
077d4     00 2C 06 F6 | 	mov	local08, #0
077d8     35 00 00 FF 
077dc     08 E4 05 F1 | 	add	objptr, ##27144
077e0     F2 2E 02 FB | 	rdlong	local09, objptr
077e4     35 00 00 FF 
077e8     08 E4 85 F1 | 	sub	objptr, ##27144
077ec                 | LR__0693
077ec     17 2D 52 F2 | 	cmps	local08, local09 wc
077f0     38 00 90 3D |  if_ae	jmp	#LR__0694
077f4                 | '     if variables(i).name=varname2$ then j=i : exit
077f4     16 2B 02 F6 | 	mov	local07, local08
077f8     04 2A 66 F0 | 	shl	local07, #4
077fc     14 00 00 FF 
07800     F8 E5 05 F1 | 	add	objptr, ##10744
07804     F2 2A 02 F1 | 	add	local07, objptr
07808     15 13 02 FB | 	rdlong	arg01, local07
0780c     14 15 02 F6 | 	mov	arg02, local06
07810     14 00 00 FF 
07814     F8 E5 85 F1 | 	sub	objptr, ##10744
07818     F4 92 B1 FD | 	call	#__system___string_cmp
0781c     00 FA 0D F2 | 	cmp	result1, #0 wz
07820     16 27 02 A6 |  if_e	mov	local05, local08
07824     01 2C 06 51 |  if_ne	add	local08, #1
07828     C0 FF 9F 5D |  if_ne	jmp	#LR__0693
0782c                 | LR__0694
0782c                 | LR__0695
0782c                 | ' if  j=-1 andalso varnum<maxvars then   
0782c     FF FF 7F FF 
07830     FF 27 0E F2 | 	cmp	local05, ##-1 wz
07834     60 00 90 5D |  if_ne	jmp	#LR__0696
07838     35 00 00 FF 
0783c     08 E4 05 F1 | 	add	objptr, ##27144
07840     F2 2A 02 FB | 	rdlong	local07, objptr
07844     35 00 00 FF 
07848     08 E4 85 F1 | 	sub	objptr, ##27144
0784c     02 00 00 FF 
07850     00 2A 56 F2 | 	cmps	local07, ##1024 wc
07854     40 00 90 3D |  if_ae	jmp	#LR__0696
07858     35 00 00 FF 
0785c     08 E4 05 F1 | 	add	objptr, ##27144
07860     F2 2E 02 FB | 	rdlong	local09, objptr
07864     04 2E 66 F0 | 	shl	local09, #4
07868     20 00 00 FF 
0786c     10 E4 85 F1 | 	sub	objptr, ##16400
07870     F2 2E 02 F1 | 	add	local09, objptr
07874     17 29 62 FC | 	wrlong	local06, local09
07878     20 00 00 FF 
0787c     10 E4 05 F1 | 	add	objptr, ##16400
07880     F2 2A 02 FB | 	rdlong	local07, objptr
07884     15 27 02 F6 | 	mov	local05, local07
07888     01 2A 06 F1 | 	add	local07, #1
0788c     F2 2A 62 FC | 	wrlong	local07, objptr
07890     35 00 00 FF 
07894     08 E4 85 F1 | 	sub	objptr, ##27144
07898                 | LR__0696
07898     13 1F 02 F6 | 	mov	local01, local05
0789c     17 22 06 F6 | 	mov	local03, #23
078a0     0F 2B 02 F6 | 	mov	local07, local01
078a4     10 2F 02 F6 | 	mov	local09, local02
078a8     11 1F 02 F6 | 	mov	local01, local03
078ac     4A 00 00 FF 
078b0     7C E4 05 F1 | 	add	objptr, ##38012
078b4     F2 2C 02 FB | 	rdlong	local08, objptr
078b8     16 29 02 F6 | 	mov	local06, local08
078bc     01 28 66 F0 | 	shl	local06, #1
078c0     16 29 02 F1 | 	add	local06, local08
078c4     02 28 66 F0 | 	shl	local06, #2
078c8     03 00 00 FF 
078cc     00 E4 85 F1 | 	sub	objptr, ##1536
078d0     F2 28 02 F1 | 	add	local06, objptr
078d4     14 2B 62 FC | 	wrlong	local07, local06
078d8     03 00 00 FF 
078dc     00 E4 05 F1 | 	add	objptr, ##1536
078e0     F2 2C 02 FB | 	rdlong	local08, objptr
078e4     16 2B 02 F6 | 	mov	local07, local08
078e8     01 2A 66 F0 | 	shl	local07, #1
078ec     16 2B 02 F1 | 	add	local07, local08
078f0     02 2A 66 F0 | 	shl	local07, #2
078f4     03 00 00 FF 
078f8     00 E4 85 F1 | 	sub	objptr, ##1536
078fc     F2 2A 02 F1 | 	add	local07, objptr
07900     04 2A 06 F1 | 	add	local07, #4
07904     15 2F 62 FC | 	wrlong	local09, local07
07908     03 00 00 FF 
0790c     00 E4 05 F1 | 	add	objptr, ##1536
07910     F2 2E 02 FB | 	rdlong	local09, objptr
07914     17 2D 02 F6 | 	mov	local08, local09
07918     01 2C 66 F0 | 	shl	local08, #1
0791c     17 2D 02 F1 | 	add	local08, local09
07920     02 2C 66 F0 | 	shl	local08, #2
07924     03 00 00 FF 
07928     00 E4 85 F1 | 	sub	objptr, ##1536
0792c     F2 2C 02 F1 | 	add	local08, objptr
07930     08 2C 06 F1 | 	add	local08, #8
07934     16 1F 62 FC | 	wrlong	local01, local08
07938     03 00 00 FF 
0793c     00 E4 05 F1 | 	add	objptr, ##1536
07940     F2 2A 02 FB | 	rdlong	local07, objptr
07944     01 2A 06 F1 | 	add	local07, #1
07948     F2 2A 62 FC | 	wrlong	local07, objptr
0794c     4A 00 00 FF 
07950     7C E4 85 F1 | 	sub	objptr, ##38012
07954                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
07954                 | ' 
07954                 | ' 
07954                 | ' 
07954                 | ' 
07954                 | ' 
07954                 | ' 
07954                 | ' compiledline(lineptr)=t1:  lineptr+=1 
07954                 | '  if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
07954     03 24 0E F2 | 	cmp	local04, #3 wz
07958     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
0795c     38 00 90 5D |  if_ne	jmp	#LR__0697
07960     4A 00 00 FF 
07964     7C E4 05 F1 | 	add	objptr, ##38012
07968     F2 1E 02 FB | 	rdlong	local01, objptr
0796c     0F 2F 02 F6 | 	mov	local09, local01
07970     01 2E 66 F0 | 	shl	local09, #1
07974     0F 2F 02 F1 | 	add	local09, local01
07978     02 2E 66 F0 | 	shl	local09, #2
0797c     03 00 00 FF 
07980     00 E4 85 F1 | 	sub	objptr, ##1536
07984     F2 2E 02 F1 | 	add	local09, objptr
07988     08 2E 06 F1 | 	add	local09, #8
0798c     17 FD 6B FC | 	wrlong	#510, local09
07990     47 00 00 FF 
07994     7C E4 85 F1 | 	sub	objptr, ##36476
07998                 | LR__0697
07998     A7 F0 03 F6 | 	mov	ptra, fp
0799c     B2 00 A0 FD | 	call	#popregs_
079a0                 | _compile_immediate_assign_ret
079a0     2D 00 64 FD | 	ret
079a4                 | 
079a4                 | ' 
079a4                 | ' ' ------------------ compile the line that is calling a command 
079a4                 | ' 
079a4                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
079a4                 | _compile
079a4     03 4A 05 F6 | 	mov	COUNT_, #3
079a8     A8 00 A0 FD | 	call	#pushregs_
079ac     09 1F 02 F6 | 	mov	local01, arg01
079b0     0B 21 02 F6 | 	mov	local02, arg03
079b4     47 00 00 FF 
079b8     7C E4 05 F1 | 	add	objptr, ##36476
079bc     F2 1E 62 FC | 	wrlong	local01, objptr
079c0     04 E4 05 F1 | 	add	objptr, #4
079c4     F2 14 62 FC | 	wrlong	arg02, objptr
079c8     47 00 00 FF 
079cc     80 E4 85 F1 | 	sub	objptr, ##36480
079d0     10 13 02 F6 | 	mov	arg01, local02
079d4     01 12 06 F1 | 	add	arg01, #1
079d8     20 F2 BF FD | 	call	#_compile_immediate
079dc     FD 22 0A F6 | 	mov	local03, result1 wz
079e0                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
079e0                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
079e0                 | '  
079e0                 | ' ' print "called compile with line= "; alinemajor;" and cont= "; cont 
079e0                 | ' 'if alinemajor=0 then err=compile_immediate(0) : return err  
079e0                 | ' 
079e0                 | ' ucompiledline(0)=alinemajor
079e0                 | ' ucompiledline(1)=alineminor
079e0                 | ' 
079e0                 | ' 
079e0                 | ' ' cont: 0: this is the first part of the line that will continue
079e0                 | ' ' 1 - this is the continuation of the line
079e0                 | ' ' 2 - this is the last continued line
079e0                 | ' ' 3 - this is the ome and only part
079e0                 | ' 
079e0                 | ' err=compile_immediate(cont+1) 
079e0                 | ' if err=0 andalso alinemajor>0 then
079e0     74 00 90 5D |  if_ne	jmp	#LR__0705
079e4     01 1E 16 F2 | 	cmp	local01, #1 wc
079e8     6C 00 90 CD |  if_b	jmp	#LR__0705
079ec                 | '   if cont=3 orelse cont=2 then 
079ec     03 20 0E F2 | 	cmp	local02, #3 wz
079f0     02 20 0E 52 |  if_ne	cmp	local02, #2 wz
079f4     60 00 90 5D |  if_ne	jmp	#LR__0704
079f8                 | '     if alinemajor >lastline then 
079f8     4A 00 00 FF 
079fc     88 E4 05 F1 | 	add	objptr, ##38024
07a00     F2 14 02 FB | 	rdlong	arg02, objptr
07a04     4A 00 00 FF 
07a08     88 E4 85 F1 | 	sub	objptr, ##38024
07a0c     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07a10     0C 00 90 ED |  if_be	jmp	#LR__0700
07a14     0F 13 02 F6 | 	mov	arg01, local01
07a18     18 F1 BF FD | 	call	#_add_line_at_end
07a1c     38 00 90 FD | 	jmp	#LR__0703
07a20                 | LR__0700
07a20     0F 13 02 F6 | 	mov	arg01, local01
07a24     DC EA BF FD | 	call	#_deleteline
07a28                 | '       deleteline(alinemajor)  
07a28                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' yes I know that's not optimal    
07a28     4A 00 00 FF 
07a2c     88 E4 05 F1 | 	add	objptr, ##38024
07a30     F2 14 02 FB | 	rdlong	arg02, objptr
07a34     4A 00 00 FF 
07a38     88 E4 85 F1 | 	sub	objptr, ##38024
07a3c     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07a40     0C 00 90 ED |  if_be	jmp	#LR__0701
07a44     0F 13 02 F6 | 	mov	arg01, local01
07a48     E8 F0 BF FD | 	call	#_add_line_at_end
07a4c     08 00 90 FD | 	jmp	#LR__0702
07a50                 | LR__0701
07a50     0F 13 02 F6 | 	mov	arg01, local01
07a54     C0 EE BF FD | 	call	#_insertline
07a58                 | LR__0702
07a58                 | LR__0703
07a58                 | LR__0704
07a58                 | LR__0705
07a58                 | ' return err
07a58     11 FB 01 F6 | 	mov	result1, local03
07a5c     A7 F0 03 F6 | 	mov	ptra, fp
07a60     B2 00 A0 FD | 	call	#popregs_
07a64                 | _compile_ret
07a64     2D 00 64 FD | 	ret
07a68                 | 
07a68                 | ' 
07a68                 | ' ' ------------------ compile the line that is assigning to a variable
07a68                 | ' 
07a68                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
07a68                 | _compile_assign
07a68     02 4A 05 F6 | 	mov	COUNT_, #2
07a6c     A8 00 A0 FD | 	call	#pushregs_
07a70     09 1F 02 F6 | 	mov	local01, arg01
07a74     0B 21 02 F6 | 	mov	local02, arg03
07a78     47 00 00 FF 
07a7c     7C E4 05 F1 | 	add	objptr, ##36476
07a80     F2 1E 62 FC | 	wrlong	local01, objptr
07a84     04 E4 05 F1 | 	add	objptr, #4
07a88     F2 14 62 FC | 	wrlong	arg02, objptr
07a8c     47 00 00 FF 
07a90     80 E4 85 F1 | 	sub	objptr, ##36480
07a94     10 13 02 F6 | 	mov	arg01, local02
07a98     01 12 06 F1 | 	add	arg01, #1
07a9c     20 FC BF FD | 	call	#_compile_immediate_assign
07aa0                 | ' 
07aa0                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
07aa0                 | ' 'if alinemajor=0 then compile_immediate_assign(0) : return  
07aa0                 | ' 
07aa0                 | ' ucompiledline(0)=alinemajor
07aa0                 | ' ucompiledline(1)=alineminor
07aa0                 | ' 
07aa0                 | ' compile_immediate_assign(cont+1) 
07aa0                 | ' 
07aa0                 | ' if alinemajor>0 then
07aa0     01 1E 16 F2 | 	cmp	local01, #1 wc
07aa4     6C 00 90 CD |  if_b	jmp	#LR__0715
07aa8                 | '   if cont=3 orelse cont=2 then 
07aa8     03 20 0E F2 | 	cmp	local02, #3 wz
07aac     02 20 0E 52 |  if_ne	cmp	local02, #2 wz
07ab0     60 00 90 5D |  if_ne	jmp	#LR__0714
07ab4                 | '     if alinemajor >lastline then 
07ab4     4A 00 00 FF 
07ab8     88 E4 05 F1 | 	add	objptr, ##38024
07abc     F2 14 02 FB | 	rdlong	arg02, objptr
07ac0     4A 00 00 FF 
07ac4     88 E4 85 F1 | 	sub	objptr, ##38024
07ac8     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07acc     0C 00 90 ED |  if_be	jmp	#LR__0710
07ad0     0F 13 02 F6 | 	mov	arg01, local01
07ad4     5C F0 BF FD | 	call	#_add_line_at_end
07ad8     38 00 90 FD | 	jmp	#LR__0713
07adc                 | LR__0710
07adc     0F 13 02 F6 | 	mov	arg01, local01
07ae0     20 EA BF FD | 	call	#_deleteline
07ae4                 | '       deleteline(alinemajor)  
07ae4                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
07ae4     4A 00 00 FF 
07ae8     88 E4 05 F1 | 	add	objptr, ##38024
07aec     F2 14 02 FB | 	rdlong	arg02, objptr
07af0     4A 00 00 FF 
07af4     88 E4 85 F1 | 	sub	objptr, ##38024
07af8     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07afc     0C 00 90 ED |  if_be	jmp	#LR__0711
07b00     0F 13 02 F6 | 	mov	arg01, local01
07b04     2C F0 BF FD | 	call	#_add_line_at_end
07b08     08 00 90 FD | 	jmp	#LR__0712
07b0c                 | LR__0711
07b0c     0F 13 02 F6 | 	mov	arg01, local01
07b10     04 EE BF FD | 	call	#_insertline
07b14                 | LR__0712
07b14                 | LR__0713
07b14                 | LR__0714
07b14                 | LR__0715
07b14     A7 F0 03 F6 | 	mov	ptra, fp
07b18     B2 00 A0 FD | 	call	#popregs_
07b1c                 | _compile_assign_ret
07b1c     2D 00 64 FD | 	ret
07b20                 | 
07b20                 | ' 
07b20                 | ' sub compile_error(errno)
07b20                 | _compile_error
07b20     FF 04 06 F6 | 	mov	_var03, #255
07b24     01 07 02 F6 | 	mov	_var04, _var02
07b28     02 09 02 F6 | 	mov	_var05, _var03
07b2c     4A 00 00 FF 
07b30     7C E4 05 F1 | 	add	objptr, ##38012
07b34     F2 0A 02 FB | 	rdlong	_var06, objptr
07b38     05 0D 02 F6 | 	mov	_var07, _var06
07b3c     01 0C 66 F0 | 	shl	_var07, #1
07b40     05 0D 02 F1 | 	add	_var07, _var06
07b44     02 0C 66 F0 | 	shl	_var07, #2
07b48     03 00 00 FF 
07b4c     00 E4 85 F1 | 	sub	objptr, ##1536
07b50     F2 0C 02 F1 | 	add	_var07, objptr
07b54     06 13 62 FC | 	wrlong	arg01, _var07
07b58     03 00 00 FF 
07b5c     00 E4 05 F1 | 	add	objptr, ##1536
07b60     F2 0C 02 FB | 	rdlong	_var07, objptr
07b64     06 0B 02 F6 | 	mov	_var06, _var07
07b68     01 0A 66 F0 | 	shl	_var06, #1
07b6c     06 0B 02 F1 | 	add	_var06, _var07
07b70     02 0A 66 F0 | 	shl	_var06, #2
07b74     03 00 00 FF 
07b78     00 E4 85 F1 | 	sub	objptr, ##1536
07b7c     F2 0A 02 F1 | 	add	_var06, objptr
07b80     04 0A 06 F1 | 	add	_var06, #4
07b84     05 07 62 FC | 	wrlong	_var04, _var06
07b88     03 00 00 FF 
07b8c     00 E4 05 F1 | 	add	objptr, ##1536
07b90     F2 0C 02 FB | 	rdlong	_var07, objptr
07b94     06 0B 02 F6 | 	mov	_var06, _var07
07b98     01 0A 66 F0 | 	shl	_var06, #1
07b9c     06 0B 02 F1 | 	add	_var06, _var07
07ba0     02 0A 66 F0 | 	shl	_var06, #2
07ba4     03 00 00 FF 
07ba8     00 E4 85 F1 | 	sub	objptr, ##1536
07bac     F2 0A 02 F1 | 	add	_var06, objptr
07bb0     08 0A 06 F1 | 	add	_var06, #8
07bb4     05 09 62 FC | 	wrlong	_var05, _var06
07bb8     03 00 00 FF 
07bbc     00 E4 05 F1 | 	add	objptr, ##1536
07bc0     F2 12 02 FB | 	rdlong	arg01, objptr
07bc4     01 12 06 F1 | 	add	arg01, #1
07bc8     F2 12 62 FC | 	wrlong	arg01, objptr
07bcc     4A 00 00 FF 
07bd0     7C E4 85 F1 | 	sub	objptr, ##38012
07bd4                 | _compile_error_ret
07bd4     2D 00 64 FD | 	ret
07bd8                 | 
07bd8                 | ' 
07bd8                 | ' sub compile_unknown() 
07bd8                 | _compile_unknown
07bd8     FF 04 06 F6 | 	mov	_var03, #255
07bdc     17 00 06 F6 | 	mov	_var01, #23
07be0     01 07 02 F6 | 	mov	_var04, _var02
07be4     02 01 02 F6 | 	mov	_var01, _var03
07be8     4A 00 00 FF 
07bec     7C E4 05 F1 | 	add	objptr, ##38012
07bf0     F2 08 02 FB | 	rdlong	_var05, objptr
07bf4     04 0B 02 F6 | 	mov	_var06, _var05
07bf8     01 0A 66 F0 | 	shl	_var06, #1
07bfc     04 0B 02 F1 | 	add	_var06, _var05
07c00     02 0A 66 F0 | 	shl	_var06, #2
07c04     03 00 00 FF 
07c08     00 E4 85 F1 | 	sub	objptr, ##1536
07c0c     F2 0A 02 F1 | 	add	_var06, objptr
07c10     05 2F 68 FC | 	wrlong	#23, _var06
07c14     03 00 00 FF 
07c18     00 E4 05 F1 | 	add	objptr, ##1536
07c1c     F2 0A 02 FB | 	rdlong	_var06, objptr
07c20     05 09 02 F6 | 	mov	_var05, _var06
07c24     01 08 66 F0 | 	shl	_var05, #1
07c28     05 09 02 F1 | 	add	_var05, _var06
07c2c     02 08 66 F0 | 	shl	_var05, #2
07c30     03 00 00 FF 
07c34     00 E4 85 F1 | 	sub	objptr, ##1536
07c38     F2 08 02 F1 | 	add	_var05, objptr
07c3c     04 08 06 F1 | 	add	_var05, #4
07c40     04 07 62 FC | 	wrlong	_var04, _var05
07c44     03 00 00 FF 
07c48     00 E4 05 F1 | 	add	objptr, ##1536
07c4c     F2 0A 02 FB | 	rdlong	_var06, objptr
07c50     05 09 02 F6 | 	mov	_var05, _var06
07c54     01 08 66 F0 | 	shl	_var05, #1
07c58     05 09 02 F1 | 	add	_var05, _var06
07c5c     02 08 66 F0 | 	shl	_var05, #2
07c60     03 00 00 FF 
07c64     00 E4 85 F1 | 	sub	objptr, ##1536
07c68     F2 08 02 F1 | 	add	_var05, objptr
07c6c     08 08 06 F1 | 	add	_var05, #8
07c70     04 01 62 FC | 	wrlong	_var01, _var05
07c74     03 00 00 FF 
07c78     00 E4 05 F1 | 	add	objptr, ##1536
07c7c     F2 0A 02 FB | 	rdlong	_var06, objptr
07c80     01 0A 06 F1 | 	add	_var06, #1
07c84     F2 0A 62 FC | 	wrlong	_var06, objptr
07c88     4A 00 00 FF 
07c8c     7C E4 85 F1 | 	sub	objptr, ##38012
07c90                 | _compile_unknown_ret
07c90     2D 00 64 FD | 	ret
07c94                 | 
07c94                 | ' 
07c94                 | ' function compile_fun_2p() as ulong
07c94                 | _compile_fun_2p
07c94     01 4A 05 F6 | 	mov	COUNT_, #1
07c98     A8 00 A0 FD | 	call	#pushregs_
07c9c     6C 26 B0 FD | 	call	#_expr
07ca0                 | ' 
07ca0                 | ' expr()
07ca0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07ca0     37 00 00 FF 
07ca4     44 E4 05 F1 | 	add	objptr, ##28228
07ca8     F2 1E 02 FB | 	rdlong	local01, objptr
07cac     03 1E 66 F0 | 	shl	local01, #3
07cb0     02 00 00 FF 
07cb4     38 E4 85 F1 | 	sub	objptr, ##1080
07cb8     F2 1E 02 F1 | 	add	local01, objptr
07cbc     04 1E 06 F1 | 	add	local01, #4
07cc0     0F 1F 02 FB | 	rdlong	local01, local01
07cc4     11 1E 0E F2 | 	cmp	local01, #17 wz
07cc8     35 00 00 FF 
07ccc     0C E4 85 F1 | 	sub	objptr, ##27148
07cd0     15 FA 05 56 |  if_ne	mov	result1, #21
07cd4     24 00 90 5D |  if_ne	jmp	#LR__0720
07cd8     37 00 00 FF 
07cdc     44 E4 05 F1 | 	add	objptr, ##28228
07ce0     F2 1E 02 FB | 	rdlong	local01, objptr
07ce4     01 1E 06 F1 | 	add	local01, #1
07ce8     F2 1E 62 FC | 	wrlong	local01, objptr
07cec     37 00 00 FF 
07cf0     44 E4 85 F1 | 	sub	objptr, ##28228
07cf4     14 26 B0 FD | 	call	#_expr
07cf8     00 FA 05 F6 | 	mov	result1, #0
07cfc                 | LR__0720
07cfc     A7 F0 03 F6 | 	mov	ptra, fp
07d00     B2 00 A0 FD | 	call	#popregs_
07d04                 | _compile_fun_2p_ret
07d04     2D 00 64 FD | 	ret
07d08                 | 
07d08                 | ' 
07d08                 | ' function compile_fun_3p() as ulong
07d08                 | _compile_fun_3p
07d08     01 4A 05 F6 | 	mov	COUNT_, #1
07d0c     A8 00 A0 FD | 	call	#pushregs_
07d10     F8 25 B0 FD | 	call	#_expr
07d14                 | ' 
07d14                 | ' expr()
07d14                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07d14     37 00 00 FF 
07d18     44 E4 05 F1 | 	add	objptr, ##28228
07d1c     F2 1E 02 FB | 	rdlong	local01, objptr
07d20     03 1E 66 F0 | 	shl	local01, #3
07d24     02 00 00 FF 
07d28     38 E4 85 F1 | 	sub	objptr, ##1080
07d2c     F2 1E 02 F1 | 	add	local01, objptr
07d30     04 1E 06 F1 | 	add	local01, #4
07d34     0F 1F 02 FB | 	rdlong	local01, local01
07d38     11 1E 0E F2 | 	cmp	local01, #17 wz
07d3c     35 00 00 FF 
07d40     0C E4 85 F1 | 	sub	objptr, ##27148
07d44     15 FA 05 56 |  if_ne	mov	result1, #21
07d48     7C 00 90 5D |  if_ne	jmp	#LR__0730
07d4c     37 00 00 FF 
07d50     44 E4 05 F1 | 	add	objptr, ##28228
07d54     F2 1E 02 FB | 	rdlong	local01, objptr
07d58     01 1E 06 F1 | 	add	local01, #1
07d5c     F2 1E 62 FC | 	wrlong	local01, objptr
07d60     37 00 00 FF 
07d64     44 E4 85 F1 | 	sub	objptr, ##28228
07d68     A0 25 B0 FD | 	call	#_expr
07d6c                 | ' expr()
07d6c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07d6c     37 00 00 FF 
07d70     44 E4 05 F1 | 	add	objptr, ##28228
07d74     F2 1E 02 FB | 	rdlong	local01, objptr
07d78     03 1E 66 F0 | 	shl	local01, #3
07d7c     02 00 00 FF 
07d80     38 E4 85 F1 | 	sub	objptr, ##1080
07d84     F2 1E 02 F1 | 	add	local01, objptr
07d88     04 1E 06 F1 | 	add	local01, #4
07d8c     0F 1F 02 FB | 	rdlong	local01, local01
07d90     11 1E 0E F2 | 	cmp	local01, #17 wz
07d94     35 00 00 FF 
07d98     0C E4 85 F1 | 	sub	objptr, ##27148
07d9c     15 FA 05 56 |  if_ne	mov	result1, #21
07da0     24 00 90 5D |  if_ne	jmp	#LR__0730
07da4     37 00 00 FF 
07da8     44 E4 05 F1 | 	add	objptr, ##28228
07dac     F2 1E 02 FB | 	rdlong	local01, objptr
07db0     01 1E 06 F1 | 	add	local01, #1
07db4     F2 1E 62 FC | 	wrlong	local01, objptr
07db8     37 00 00 FF 
07dbc     44 E4 85 F1 | 	sub	objptr, ##28228
07dc0     48 25 B0 FD | 	call	#_expr
07dc4     00 FA 05 F6 | 	mov	result1, #0
07dc8                 | LR__0730
07dc8     A7 F0 03 F6 | 	mov	ptra, fp
07dcc     B2 00 A0 FD | 	call	#popregs_
07dd0                 | _compile_fun_3p_ret
07dd0     2D 00 64 FD | 	ret
07dd4                 | 
07dd4                 | ' 
07dd4                 | ' function compile_fun_4p() as ulong
07dd4                 | _compile_fun_4p
07dd4     01 4A 05 F6 | 	mov	COUNT_, #1
07dd8     A8 00 A0 FD | 	call	#pushregs_
07ddc     2C 25 B0 FD | 	call	#_expr
07de0                 | ' 
07de0                 | ' expr()
07de0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07de0     37 00 00 FF 
07de4     44 E4 05 F1 | 	add	objptr, ##28228
07de8     F2 1E 02 FB | 	rdlong	local01, objptr
07dec     03 1E 66 F0 | 	shl	local01, #3
07df0     02 00 00 FF 
07df4     38 E4 85 F1 | 	sub	objptr, ##1080
07df8     F2 1E 02 F1 | 	add	local01, objptr
07dfc     04 1E 06 F1 | 	add	local01, #4
07e00     0F 1F 02 FB | 	rdlong	local01, local01
07e04     11 1E 0E F2 | 	cmp	local01, #17 wz
07e08     35 00 00 FF 
07e0c     0C E4 85 F1 | 	sub	objptr, ##27148
07e10     15 FA 05 56 |  if_ne	mov	result1, #21
07e14     D4 00 90 5D |  if_ne	jmp	#LR__0740
07e18     37 00 00 FF 
07e1c     44 E4 05 F1 | 	add	objptr, ##28228
07e20     F2 1E 02 FB | 	rdlong	local01, objptr
07e24     01 1E 06 F1 | 	add	local01, #1
07e28     F2 1E 62 FC | 	wrlong	local01, objptr
07e2c     37 00 00 FF 
07e30     44 E4 85 F1 | 	sub	objptr, ##28228
07e34     D4 24 B0 FD | 	call	#_expr
07e38                 | ' expr()
07e38                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07e38     37 00 00 FF 
07e3c     44 E4 05 F1 | 	add	objptr, ##28228
07e40     F2 1E 02 FB | 	rdlong	local01, objptr
07e44     03 1E 66 F0 | 	shl	local01, #3
07e48     02 00 00 FF 
07e4c     38 E4 85 F1 | 	sub	objptr, ##1080
07e50     F2 1E 02 F1 | 	add	local01, objptr
07e54     04 1E 06 F1 | 	add	local01, #4
07e58     0F 1F 02 FB | 	rdlong	local01, local01
07e5c     11 1E 0E F2 | 	cmp	local01, #17 wz
07e60     35 00 00 FF 
07e64     0C E4 85 F1 | 	sub	objptr, ##27148
07e68     15 FA 05 56 |  if_ne	mov	result1, #21
07e6c     7C 00 90 5D |  if_ne	jmp	#LR__0740
07e70     37 00 00 FF 
07e74     44 E4 05 F1 | 	add	objptr, ##28228
07e78     F2 1E 02 FB | 	rdlong	local01, objptr
07e7c     01 1E 06 F1 | 	add	local01, #1
07e80     F2 1E 62 FC | 	wrlong	local01, objptr
07e84     37 00 00 FF 
07e88     44 E4 85 F1 | 	sub	objptr, ##28228
07e8c     7C 24 B0 FD | 	call	#_expr
07e90                 | ' expr()
07e90                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07e90     37 00 00 FF 
07e94     44 E4 05 F1 | 	add	objptr, ##28228
07e98     F2 1E 02 FB | 	rdlong	local01, objptr
07e9c     03 1E 66 F0 | 	shl	local01, #3
07ea0     02 00 00 FF 
07ea4     38 E4 85 F1 | 	sub	objptr, ##1080
07ea8     F2 1E 02 F1 | 	add	local01, objptr
07eac     04 1E 06 F1 | 	add	local01, #4
07eb0     0F 1F 02 FB | 	rdlong	local01, local01
07eb4     11 1E 0E F2 | 	cmp	local01, #17 wz
07eb8     35 00 00 FF 
07ebc     0C E4 85 F1 | 	sub	objptr, ##27148
07ec0     15 FA 05 56 |  if_ne	mov	result1, #21
07ec4     24 00 90 5D |  if_ne	jmp	#LR__0740
07ec8     37 00 00 FF 
07ecc     44 E4 05 F1 | 	add	objptr, ##28228
07ed0     F2 1E 02 FB | 	rdlong	local01, objptr
07ed4     01 1E 06 F1 | 	add	local01, #1
07ed8     F2 1E 62 FC | 	wrlong	local01, objptr
07edc     37 00 00 FF 
07ee0     44 E4 85 F1 | 	sub	objptr, ##28228
07ee4     24 24 B0 FD | 	call	#_expr
07ee8     00 FA 05 F6 | 	mov	result1, #0
07eec                 | LR__0740
07eec     A7 F0 03 F6 | 	mov	ptra, fp
07ef0     B2 00 A0 FD | 	call	#popregs_
07ef4                 | _compile_fun_4p_ret
07ef4     2D 00 64 FD | 	ret
07ef8                 | 
07ef8                 | ' 
07ef8                 | ' 
07ef8                 | ' function compile_fun_5p() as ulong
07ef8                 | _compile_fun_5p
07ef8     01 4A 05 F6 | 	mov	COUNT_, #1
07efc     A8 00 A0 FD | 	call	#pushregs_
07f00     08 24 B0 FD | 	call	#_expr
07f04                 | ' 
07f04                 | ' expr()
07f04                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07f04     37 00 00 FF 
07f08     44 E4 05 F1 | 	add	objptr, ##28228
07f0c     F2 1E 02 FB | 	rdlong	local01, objptr
07f10     03 1E 66 F0 | 	shl	local01, #3
07f14     02 00 00 FF 
07f18     38 E4 85 F1 | 	sub	objptr, ##1080
07f1c     F2 1E 02 F1 | 	add	local01, objptr
07f20     04 1E 06 F1 | 	add	local01, #4
07f24     0F 1F 02 FB | 	rdlong	local01, local01
07f28     11 1E 0E F2 | 	cmp	local01, #17 wz
07f2c     35 00 00 FF 
07f30     0C E4 85 F1 | 	sub	objptr, ##27148
07f34     15 FA 05 56 |  if_ne	mov	result1, #21
07f38     2C 01 90 5D |  if_ne	jmp	#LR__0750
07f3c     37 00 00 FF 
07f40     44 E4 05 F1 | 	add	objptr, ##28228
07f44     F2 1E 02 FB | 	rdlong	local01, objptr
07f48     01 1E 06 F1 | 	add	local01, #1
07f4c     F2 1E 62 FC | 	wrlong	local01, objptr
07f50     37 00 00 FF 
07f54     44 E4 85 F1 | 	sub	objptr, ##28228
07f58     B0 23 B0 FD | 	call	#_expr
07f5c                 | ' expr()
07f5c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07f5c     37 00 00 FF 
07f60     44 E4 05 F1 | 	add	objptr, ##28228
07f64     F2 1E 02 FB | 	rdlong	local01, objptr
07f68     03 1E 66 F0 | 	shl	local01, #3
07f6c     02 00 00 FF 
07f70     38 E4 85 F1 | 	sub	objptr, ##1080
07f74     F2 1E 02 F1 | 	add	local01, objptr
07f78     04 1E 06 F1 | 	add	local01, #4
07f7c     0F 1F 02 FB | 	rdlong	local01, local01
07f80     11 1E 0E F2 | 	cmp	local01, #17 wz
07f84     35 00 00 FF 
07f88     0C E4 85 F1 | 	sub	objptr, ##27148
07f8c     15 FA 05 56 |  if_ne	mov	result1, #21
07f90     D4 00 90 5D |  if_ne	jmp	#LR__0750
07f94     37 00 00 FF 
07f98     44 E4 05 F1 | 	add	objptr, ##28228
07f9c     F2 1E 02 FB | 	rdlong	local01, objptr
07fa0     01 1E 06 F1 | 	add	local01, #1
07fa4     F2 1E 62 FC | 	wrlong	local01, objptr
07fa8     37 00 00 FF 
07fac     44 E4 85 F1 | 	sub	objptr, ##28228
07fb0     58 23 B0 FD | 	call	#_expr
07fb4                 | ' expr()
07fb4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07fb4     37 00 00 FF 
07fb8     44 E4 05 F1 | 	add	objptr, ##28228
07fbc     F2 1E 02 FB | 	rdlong	local01, objptr
07fc0     03 1E 66 F0 | 	shl	local01, #3
07fc4     02 00 00 FF 
07fc8     38 E4 85 F1 | 	sub	objptr, ##1080
07fcc     F2 1E 02 F1 | 	add	local01, objptr
07fd0     04 1E 06 F1 | 	add	local01, #4
07fd4     0F 1F 02 FB | 	rdlong	local01, local01
07fd8     11 1E 0E F2 | 	cmp	local01, #17 wz
07fdc     35 00 00 FF 
07fe0     0C E4 85 F1 | 	sub	objptr, ##27148
07fe4     15 FA 05 56 |  if_ne	mov	result1, #21
07fe8     7C 00 90 5D |  if_ne	jmp	#LR__0750
07fec     37 00 00 FF 
07ff0     44 E4 05 F1 | 	add	objptr, ##28228
07ff4     F2 1E 02 FB | 	rdlong	local01, objptr
07ff8     01 1E 06 F1 | 	add	local01, #1
07ffc     F2 1E 62 FC | 	wrlong	local01, objptr
08000     37 00 00 FF 
08004     44 E4 85 F1 | 	sub	objptr, ##28228
08008     00 23 B0 FD | 	call	#_expr
0800c                 | ' expr()
0800c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0800c     37 00 00 FF 
08010     44 E4 05 F1 | 	add	objptr, ##28228
08014     F2 1E 02 FB | 	rdlong	local01, objptr
08018     03 1E 66 F0 | 	shl	local01, #3
0801c     02 00 00 FF 
08020     38 E4 85 F1 | 	sub	objptr, ##1080
08024     F2 1E 02 F1 | 	add	local01, objptr
08028     04 1E 06 F1 | 	add	local01, #4
0802c     0F 1F 02 FB | 	rdlong	local01, local01
08030     11 1E 0E F2 | 	cmp	local01, #17 wz
08034     35 00 00 FF 
08038     0C E4 85 F1 | 	sub	objptr, ##27148
0803c     15 FA 05 56 |  if_ne	mov	result1, #21
08040     24 00 90 5D |  if_ne	jmp	#LR__0750
08044     37 00 00 FF 
08048     44 E4 05 F1 | 	add	objptr, ##28228
0804c     F2 1E 02 FB | 	rdlong	local01, objptr
08050     01 1E 06 F1 | 	add	local01, #1
08054     F2 1E 62 FC | 	wrlong	local01, objptr
08058     37 00 00 FF 
0805c     44 E4 85 F1 | 	sub	objptr, ##28228
08060     A8 22 B0 FD | 	call	#_expr
08064     00 FA 05 F6 | 	mov	result1, #0
08068                 | LR__0750
08068     A7 F0 03 F6 | 	mov	ptra, fp
0806c     B2 00 A0 FD | 	call	#popregs_
08070                 | _compile_fun_5p_ret
08070     2D 00 64 FD | 	ret
08074                 | 
08074                 | ' 
08074                 | ' function compile_fun_varp() as ulong 
08074                 | _compile_fun_varp
08074     02 4A 05 F6 | 	mov	COUNT_, #2
08078     A8 00 A0 FD | 	call	#pushregs_
0807c     00 1E 06 F6 | 	mov	local01, #0
08080                 | ' i=0
08080                 | ' if lparts(ct).token<>token_end then
08080     37 00 00 FF 
08084     44 E4 05 F1 | 	add	objptr, ##28228
08088     F2 20 02 FB | 	rdlong	local02, objptr
0808c     03 20 66 F0 | 	shl	local02, #3
08090     02 00 00 FF 
08094     38 E4 85 F1 | 	sub	objptr, ##1080
08098     F2 20 02 F1 | 	add	local02, objptr
0809c     04 20 06 F1 | 	add	local02, #4
080a0     10 21 02 FB | 	rdlong	local02, local02
080a4     FE 21 0E F2 | 	cmp	local02, #510 wz
080a8     35 00 00 FF 
080ac     0C E4 85 F1 | 	sub	objptr, ##27148
080b0     5C 00 90 AD |  if_e	jmp	#LR__0762
080b4                 | '   do
080b4                 | LR__0760
080b4     54 22 B0 FD | 	call	#_expr
080b8     01 1E 06 F1 | 	add	local01, #1
080bc                 | '   expr()
080bc                 | '    i+=1
080bc                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
080bc     37 00 00 FF 
080c0     44 E4 05 F1 | 	add	objptr, ##28228
080c4     F2 20 02 FB | 	rdlong	local02, objptr
080c8     03 20 66 F0 | 	shl	local02, #3
080cc     02 00 00 FF 
080d0     38 E4 85 F1 | 	sub	objptr, ##1080
080d4     F2 20 02 F1 | 	add	local02, objptr
080d8     04 20 06 F1 | 	add	local02, #4
080dc     10 21 02 FB | 	rdlong	local02, local02
080e0     11 20 0E F2 | 	cmp	local02, #17 wz
080e4     35 00 00 FF 
080e8     0C E4 85 F1 | 	sub	objptr, ##27148
080ec     20 00 90 5D |  if_ne	jmp	#LR__0761
080f0     37 00 00 FF 
080f4     44 E4 05 F1 | 	add	objptr, ##28228
080f8     F2 20 02 FB | 	rdlong	local02, objptr
080fc     01 20 06 F1 | 	add	local02, #1
08100     F2 20 62 FC | 	wrlong	local02, objptr
08104     37 00 00 FF 
08108     44 E4 85 F1 | 	sub	objptr, ##28228
0810c     A4 FF 9F FD | 	jmp	#LR__0760
08110                 | LR__0761
08110                 | LR__0762
08110                 | ' return i
08110     0F FB 01 F6 | 	mov	result1, local01
08114     A7 F0 03 F6 | 	mov	ptra, fp
08118     B2 00 A0 FD | 	call	#popregs_
0811c                 | _compile_fun_varp_ret
0811c     2D 00 64 FD | 	ret
08120                 | 
08120                 | ' 
08120                 | ' 
08120                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
08120                 | _compile_print
08120     0B 4A 05 F6 | 	mov	COUNT_, #11
08124     A8 00 A0 FD | 	call	#pushregs_
08128     00 1E 06 F6 | 	mov	local01, #0
0812c     1D 22 06 F6 | 	mov	local03, #29
08130                 | ' t1.result.uresult=0 : t1.result_type=result_uint
08130                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
08130     37 00 00 FF 
08134     44 E4 05 F1 | 	add	objptr, ##28228
08138     F2 24 02 FB | 	rdlong	local04, objptr
0813c     03 24 66 F0 | 	shl	local04, #3
08140     02 00 00 FF 
08144     38 E4 85 F1 | 	sub	objptr, ##1080
08148     F2 24 02 F1 | 	add	local04, objptr
0814c     04 24 06 F1 | 	add	local04, #4
08150     12 25 02 FB | 	rdlong	local04, local04
08154     FE 25 0E F2 | 	cmp	local04, #510 wz
08158     35 00 00 FF 
0815c     0C E4 85 F1 | 	sub	objptr, ##27148
08160     68 01 90 5D |  if_ne	jmp	#LR__0770
08164     20 22 06 F6 | 	mov	local03, #32
08168     0F 27 02 F6 | 	mov	local05, local01
0816c     10 29 02 F6 | 	mov	local06, local02
08170     11 2B 02 F6 | 	mov	local07, local03
08174     4A 00 00 FF 
08178     7C E4 05 F1 | 	add	objptr, ##38012
0817c     F2 2C 02 FB | 	rdlong	local08, objptr
08180     16 2F 02 F6 | 	mov	local09, local08
08184     01 2E 66 F0 | 	shl	local09, #1
08188     16 2F 02 F1 | 	add	local09, local08
0818c     02 2E 66 F0 | 	shl	local09, #2
08190     03 00 00 FF 
08194     00 E4 85 F1 | 	sub	objptr, ##1536
08198     F2 2E 02 F1 | 	add	local09, objptr
0819c     17 27 62 FC | 	wrlong	local05, local09
081a0     03 00 00 FF 
081a4     00 E4 05 F1 | 	add	objptr, ##1536
081a8     F2 26 02 FB | 	rdlong	local05, objptr
081ac     13 31 02 F6 | 	mov	local10, local05
081b0     01 30 66 F0 | 	shl	local10, #1
081b4     13 31 02 F1 | 	add	local10, local05
081b8     02 30 66 F0 | 	shl	local10, #2
081bc     03 00 00 FF 
081c0     00 E4 85 F1 | 	sub	objptr, ##1536
081c4     F2 30 02 F1 | 	add	local10, objptr
081c8     04 30 06 F1 | 	add	local10, #4
081cc     18 29 62 FC | 	wrlong	local06, local10
081d0     03 00 00 FF 
081d4     00 E4 05 F1 | 	add	objptr, ##1536
081d8     F2 26 02 FB | 	rdlong	local05, objptr
081dc     13 33 02 F6 | 	mov	local11, local05
081e0     01 32 66 F0 | 	shl	local11, #1
081e4     13 33 02 F1 | 	add	local11, local05
081e8     02 32 66 F0 | 	shl	local11, #2
081ec     03 00 00 FF 
081f0     00 E4 85 F1 | 	sub	objptr, ##1536
081f4     F2 32 02 F1 | 	add	local11, objptr
081f8     08 32 06 F1 | 	add	local11, #8
081fc     19 2B 62 FC | 	wrlong	local07, local11
08200     03 00 00 FF 
08204     00 E4 05 F1 | 	add	objptr, ##1536
08208     F2 26 02 FB | 	rdlong	local05, objptr
0820c     01 26 06 F1 | 	add	local05, #1
08210     F2 26 62 FC | 	wrlong	local05, objptr
08214     44 22 06 F6 | 	mov	local03, #68
08218     0F 27 02 F6 | 	mov	local05, local01
0821c     10 29 02 F6 | 	mov	local06, local02
08220     11 2B 02 F6 | 	mov	local07, local03
08224     F2 2C 02 FB | 	rdlong	local08, objptr
08228     16 2F 02 F6 | 	mov	local09, local08
0822c     01 2E 66 F0 | 	shl	local09, #1
08230     16 2F 02 F1 | 	add	local09, local08
08234     02 2E 66 F0 | 	shl	local09, #2
08238     03 00 00 FF 
0823c     00 E4 85 F1 | 	sub	objptr, ##1536
08240     F2 2E 02 F1 | 	add	local09, objptr
08244     17 27 62 FC | 	wrlong	local05, local09
08248     03 00 00 FF 
0824c     00 E4 05 F1 | 	add	objptr, ##1536
08250     F2 32 02 FB | 	rdlong	local11, objptr
08254     19 31 02 F6 | 	mov	local10, local11
08258     01 30 66 F0 | 	shl	local10, #1
0825c     19 31 02 F1 | 	add	local10, local11
08260     02 30 66 F0 | 	shl	local10, #2
08264     03 00 00 FF 
08268     00 E4 85 F1 | 	sub	objptr, ##1536
0826c     F2 30 02 F1 | 	add	local10, objptr
08270     04 30 06 F1 | 	add	local10, #4
08274     18 29 62 FC | 	wrlong	local06, local10
08278     03 00 00 FF 
0827c     00 E4 05 F1 | 	add	objptr, ##1536
08280     F2 30 02 FB | 	rdlong	local10, objptr
08284     18 33 02 F6 | 	mov	local11, local10
08288     01 32 66 F0 | 	shl	local11, #1
0828c     18 33 02 F1 | 	add	local11, local10
08290     02 32 66 F0 | 	shl	local11, #2
08294     03 00 00 FF 
08298     00 E4 85 F1 | 	sub	objptr, ##1536
0829c     F2 32 02 F1 | 	add	local11, objptr
082a0     08 32 06 F1 | 	add	local11, #8
082a4     19 2B 62 FC | 	wrlong	local07, local11
082a8     03 00 00 FF 
082ac     00 E4 05 F1 | 	add	objptr, ##1536
082b0     F2 26 02 FB | 	rdlong	local05, objptr
082b4     01 26 06 F1 | 	add	local05, #1
082b8     F2 26 62 FC | 	wrlong	local05, objptr
082bc     4A 00 00 FF 
082c0     7C E4 85 F1 | 	sub	objptr, ##38012
082c4     00 FA 05 F6 | 	mov	result1, #0
082c8     20 05 90 FD | 	jmp	#LR__0777
082cc                 | LR__0770
082cc                 | ' do
082cc                 | LR__0771
082cc     3C 20 B0 FD | 	call	#_expr
082d0                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
082d0                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
082d0     37 00 00 FF 
082d4     44 E4 05 F1 | 	add	objptr, ##28228
082d8     F2 24 02 FB | 	rdlong	local04, objptr
082dc     03 24 66 F0 | 	shl	local04, #3
082e0     02 00 00 FF 
082e4     38 E4 85 F1 | 	sub	objptr, ##1080
082e8     F2 24 02 F1 | 	add	local04, objptr
082ec     04 24 06 F1 | 	add	local04, #4
082f0     12 2D 02 FB | 	rdlong	local08, local04
082f4     11 2C 0E F2 | 	cmp	local08, #17 wz
082f8     35 00 00 FF 
082fc     0C E4 85 F1 | 	sub	objptr, ##27148
08300     60 01 90 5D |  if_ne	jmp	#LR__0772
08304     21 22 06 F6 | 	mov	local03, #33
08308     0F 27 02 F6 | 	mov	local05, local01
0830c     10 29 02 F6 | 	mov	local06, local02
08310     11 2B 02 F6 | 	mov	local07, local03
08314     4A 00 00 FF 
08318     7C E4 05 F1 | 	add	objptr, ##38012
0831c     F2 2C 02 FB | 	rdlong	local08, objptr
08320     16 2F 02 F6 | 	mov	local09, local08
08324     01 2E 66 F0 | 	shl	local09, #1
08328     16 2F 02 F1 | 	add	local09, local08
0832c     02 2E 66 F0 | 	shl	local09, #2
08330     03 00 00 FF 
08334     00 E4 85 F1 | 	sub	objptr, ##1536
08338     F2 2E 02 F1 | 	add	local09, objptr
0833c     17 27 62 FC | 	wrlong	local05, local09
08340     03 00 00 FF 
08344     00 E4 05 F1 | 	add	objptr, ##1536
08348     F2 32 02 FB | 	rdlong	local11, objptr
0834c     19 31 02 F6 | 	mov	local10, local11
08350     01 30 66 F0 | 	shl	local10, #1
08354     19 31 02 F1 | 	add	local10, local11
08358     02 30 66 F0 | 	shl	local10, #2
0835c     03 00 00 FF 
08360     00 E4 85 F1 | 	sub	objptr, ##1536
08364     F2 30 02 F1 | 	add	local10, objptr
08368     04 30 06 F1 | 	add	local10, #4
0836c     18 29 62 FC | 	wrlong	local06, local10
08370     03 00 00 FF 
08374     00 E4 05 F1 | 	add	objptr, ##1536
08378     F2 26 02 FB | 	rdlong	local05, objptr
0837c     13 33 02 F6 | 	mov	local11, local05
08380     01 32 66 F0 | 	shl	local11, #1
08384     13 33 02 F1 | 	add	local11, local05
08388     02 32 66 F0 | 	shl	local11, #2
0838c     03 00 00 FF 
08390     00 E4 85 F1 | 	sub	objptr, ##1536
08394     F2 32 02 F1 | 	add	local11, objptr
08398     08 32 06 F1 | 	add	local11, #8
0839c     19 2B 62 FC | 	wrlong	local07, local11
083a0     03 00 00 FF 
083a4     00 E4 05 F1 | 	add	objptr, ##1536
083a8     F2 26 02 FB | 	rdlong	local05, objptr
083ac     01 26 06 F1 | 	add	local05, #1
083b0     F2 26 62 FC | 	wrlong	local05, objptr
083b4     44 22 06 F6 | 	mov	local03, #68
083b8     0F 27 02 F6 | 	mov	local05, local01
083bc     10 29 02 F6 | 	mov	local06, local02
083c0     11 2B 02 F6 | 	mov	local07, local03
083c4     F2 2C 02 FB | 	rdlong	local08, objptr
083c8     16 2F 02 F6 | 	mov	local09, local08
083cc     01 2E 66 F0 | 	shl	local09, #1
083d0     16 2F 02 F1 | 	add	local09, local08
083d4     02 2E 66 F0 | 	shl	local09, #2
083d8     03 00 00 FF 
083dc     00 E4 85 F1 | 	sub	objptr, ##1536
083e0     F2 2E 02 F1 | 	add	local09, objptr
083e4     17 27 62 FC | 	wrlong	local05, local09
083e8     03 00 00 FF 
083ec     00 E4 05 F1 | 	add	objptr, ##1536
083f0     F2 32 02 FB | 	rdlong	local11, objptr
083f4     19 31 02 F6 | 	mov	local10, local11
083f8     01 30 66 F0 | 	shl	local10, #1
083fc     19 31 02 F1 | 	add	local10, local11
08400     02 30 66 F0 | 	shl	local10, #2
08404     03 00 00 FF 
08408     00 E4 85 F1 | 	sub	objptr, ##1536
0840c     F2 30 02 F1 | 	add	local10, objptr
08410     04 30 06 F1 | 	add	local10, #4
08414     18 29 62 FC | 	wrlong	local06, local10
08418     03 00 00 FF 
0841c     00 E4 05 F1 | 	add	objptr, ##1536
08420     F2 30 02 FB | 	rdlong	local10, objptr
08424     18 33 02 F6 | 	mov	local11, local10
08428     01 32 66 F0 | 	shl	local11, #1
0842c     18 33 02 F1 | 	add	local11, local10
08430     02 32 66 F0 | 	shl	local11, #2
08434     03 00 00 FF 
08438     00 E4 85 F1 | 	sub	objptr, ##1536
0843c     F2 32 02 F1 | 	add	local11, objptr
08440     08 32 06 F1 | 	add	local11, #8
08444     19 2B 62 FC | 	wrlong	local07, local11
08448     03 00 00 FF 
0844c     00 E4 05 F1 | 	add	objptr, ##1536
08450     F2 26 02 FB | 	rdlong	local05, objptr
08454     01 26 06 F1 | 	add	local05, #1
08458     F2 26 62 FC | 	wrlong	local05, objptr
0845c     4A 00 00 FF 
08460     7C E4 85 F1 | 	sub	objptr, ##38012
08464                 | LR__0772
08464                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08464     37 00 00 FF 
08468     44 E4 05 F1 | 	add	objptr, ##28228
0846c     F2 24 02 FB | 	rdlong	local04, objptr
08470     03 24 66 F0 | 	shl	local04, #3
08474     02 00 00 FF 
08478     38 E4 85 F1 | 	sub	objptr, ##1080
0847c     F2 24 02 F1 | 	add	local04, objptr
08480     04 24 06 F1 | 	add	local04, #4
08484     12 2D 02 FB | 	rdlong	local08, local04
08488     12 2C 0E F2 | 	cmp	local08, #18 wz
0848c     35 00 00 FF 
08490     0C E4 85 F1 | 	sub	objptr, ##27148
08494     60 01 90 5D |  if_ne	jmp	#LR__0773
08498     22 22 06 F6 | 	mov	local03, #34
0849c     0F 27 02 F6 | 	mov	local05, local01
084a0     10 29 02 F6 | 	mov	local06, local02
084a4     11 2B 02 F6 | 	mov	local07, local03
084a8     4A 00 00 FF 
084ac     7C E4 05 F1 | 	add	objptr, ##38012
084b0     F2 2C 02 FB | 	rdlong	local08, objptr
084b4     16 2F 02 F6 | 	mov	local09, local08
084b8     01 2E 66 F0 | 	shl	local09, #1
084bc     16 2F 02 F1 | 	add	local09, local08
084c0     02 2E 66 F0 | 	shl	local09, #2
084c4     03 00 00 FF 
084c8     00 E4 85 F1 | 	sub	objptr, ##1536
084cc     F2 2E 02 F1 | 	add	local09, objptr
084d0     17 27 62 FC | 	wrlong	local05, local09
084d4     03 00 00 FF 
084d8     00 E4 05 F1 | 	add	objptr, ##1536
084dc     F2 32 02 FB | 	rdlong	local11, objptr
084e0     19 31 02 F6 | 	mov	local10, local11
084e4     01 30 66 F0 | 	shl	local10, #1
084e8     19 31 02 F1 | 	add	local10, local11
084ec     02 30 66 F0 | 	shl	local10, #2
084f0     03 00 00 FF 
084f4     00 E4 85 F1 | 	sub	objptr, ##1536
084f8     F2 30 02 F1 | 	add	local10, objptr
084fc     04 30 06 F1 | 	add	local10, #4
08500     18 29 62 FC | 	wrlong	local06, local10
08504     03 00 00 FF 
08508     00 E4 05 F1 | 	add	objptr, ##1536
0850c     F2 26 02 FB | 	rdlong	local05, objptr
08510     13 33 02 F6 | 	mov	local11, local05
08514     01 32 66 F0 | 	shl	local11, #1
08518     13 33 02 F1 | 	add	local11, local05
0851c     02 32 66 F0 | 	shl	local11, #2
08520     03 00 00 FF 
08524     00 E4 85 F1 | 	sub	objptr, ##1536
08528     F2 32 02 F1 | 	add	local11, objptr
0852c     08 32 06 F1 | 	add	local11, #8
08530     19 2B 62 FC | 	wrlong	local07, local11
08534     03 00 00 FF 
08538     00 E4 05 F1 | 	add	objptr, ##1536
0853c     F2 26 02 FB | 	rdlong	local05, objptr
08540     01 26 06 F1 | 	add	local05, #1
08544     F2 26 62 FC | 	wrlong	local05, objptr
08548     44 22 06 F6 | 	mov	local03, #68
0854c     0F 27 02 F6 | 	mov	local05, local01
08550     10 29 02 F6 | 	mov	local06, local02
08554     11 2B 02 F6 | 	mov	local07, local03
08558     F2 2C 02 FB | 	rdlong	local08, objptr
0855c     16 2F 02 F6 | 	mov	local09, local08
08560     01 2E 66 F0 | 	shl	local09, #1
08564     16 2F 02 F1 | 	add	local09, local08
08568     02 2E 66 F0 | 	shl	local09, #2
0856c     03 00 00 FF 
08570     00 E4 85 F1 | 	sub	objptr, ##1536
08574     F2 2E 02 F1 | 	add	local09, objptr
08578     17 27 62 FC | 	wrlong	local05, local09
0857c     03 00 00 FF 
08580     00 E4 05 F1 | 	add	objptr, ##1536
08584     F2 32 02 FB | 	rdlong	local11, objptr
08588     19 31 02 F6 | 	mov	local10, local11
0858c     01 30 66 F0 | 	shl	local10, #1
08590     19 31 02 F1 | 	add	local10, local11
08594     02 30 66 F0 | 	shl	local10, #2
08598     03 00 00 FF 
0859c     00 E4 85 F1 | 	sub	objptr, ##1536
085a0     F2 30 02 F1 | 	add	local10, objptr
085a4     04 30 06 F1 | 	add	local10, #4
085a8     18 29 62 FC | 	wrlong	local06, local10
085ac     03 00 00 FF 
085b0     00 E4 05 F1 | 	add	objptr, ##1536
085b4     F2 30 02 FB | 	rdlong	local10, objptr
085b8     18 33 02 F6 | 	mov	local11, local10
085bc     01 32 66 F0 | 	shl	local11, #1
085c0     18 33 02 F1 | 	add	local11, local10
085c4     02 32 66 F0 | 	shl	local11, #2
085c8     03 00 00 FF 
085cc     00 E4 85 F1 | 	sub	objptr, ##1536
085d0     F2 32 02 F1 | 	add	local11, objptr
085d4     08 32 06 F1 | 	add	local11, #8
085d8     19 2B 62 FC | 	wrlong	local07, local11
085dc     03 00 00 FF 
085e0     00 E4 05 F1 | 	add	objptr, ##1536
085e4     F2 26 02 FB | 	rdlong	local05, objptr
085e8     01 26 06 F1 | 	add	local05, #1
085ec     F2 26 62 FC | 	wrlong	local05, objptr
085f0     4A 00 00 FF 
085f4     7C E4 85 F1 | 	sub	objptr, ##38012
085f8                 | LR__0773
085f8                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
085f8     37 00 00 FF 
085fc     44 E4 05 F1 | 	add	objptr, ##28228
08600     F2 24 02 FB | 	rdlong	local04, objptr
08604     03 24 66 F0 | 	shl	local04, #3
08608     02 00 00 FF 
0860c     38 E4 85 F1 | 	sub	objptr, ##1080
08610     F2 24 02 F1 | 	add	local04, objptr
08614     04 24 06 F1 | 	add	local04, #4
08618     12 2D 02 FB | 	rdlong	local08, local04
0861c     FE 2D 0E F2 | 	cmp	local08, #510 wz
08620     35 00 00 FF 
08624     0C E4 85 F1 | 	sub	objptr, ##27148
08628     B8 00 90 5D |  if_ne	jmp	#LR__0774
0862c     44 22 06 F6 | 	mov	local03, #68
08630     0F 27 02 F6 | 	mov	local05, local01
08634     10 29 02 F6 | 	mov	local06, local02
08638     11 2B 02 F6 | 	mov	local07, local03
0863c     4A 00 00 FF 
08640     7C E4 05 F1 | 	add	objptr, ##38012
08644     F2 2C 02 FB | 	rdlong	local08, objptr
08648     16 2F 02 F6 | 	mov	local09, local08
0864c     01 2E 66 F0 | 	shl	local09, #1
08650     16 2F 02 F1 | 	add	local09, local08
08654     02 2E 66 F0 | 	shl	local09, #2
08658     03 00 00 FF 
0865c     00 E4 85 F1 | 	sub	objptr, ##1536
08660     F2 2E 02 F1 | 	add	local09, objptr
08664     17 27 62 FC | 	wrlong	local05, local09
08668     03 00 00 FF 
0866c     00 E4 05 F1 | 	add	objptr, ##1536
08670     F2 32 02 FB | 	rdlong	local11, objptr
08674     19 31 02 F6 | 	mov	local10, local11
08678     01 30 66 F0 | 	shl	local10, #1
0867c     19 31 02 F1 | 	add	local10, local11
08680     02 30 66 F0 | 	shl	local10, #2
08684     03 00 00 FF 
08688     00 E4 85 F1 | 	sub	objptr, ##1536
0868c     F2 30 02 F1 | 	add	local10, objptr
08690     04 30 06 F1 | 	add	local10, #4
08694     18 29 62 FC | 	wrlong	local06, local10
08698     03 00 00 FF 
0869c     00 E4 05 F1 | 	add	objptr, ##1536
086a0     F2 30 02 FB | 	rdlong	local10, objptr
086a4     18 33 02 F6 | 	mov	local11, local10
086a8     01 32 66 F0 | 	shl	local11, #1
086ac     18 33 02 F1 | 	add	local11, local10
086b0     02 32 66 F0 | 	shl	local11, #2
086b4     03 00 00 FF 
086b8     00 E4 85 F1 | 	sub	objptr, ##1536
086bc     F2 32 02 F1 | 	add	local11, objptr
086c0     08 32 06 F1 | 	add	local11, #8
086c4     19 2B 62 FC | 	wrlong	local07, local11
086c8     03 00 00 FF 
086cc     00 E4 05 F1 | 	add	objptr, ##1536
086d0     F2 26 02 FB | 	rdlong	local05, objptr
086d4     01 26 06 F1 | 	add	local05, #1
086d8     F2 26 62 FC | 	wrlong	local05, objptr
086dc     4A 00 00 FF 
086e0     7C E4 85 F1 | 	sub	objptr, ##38012
086e4                 | LR__0774
086e4                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
086e4     37 00 00 FF 
086e8     44 E4 05 F1 | 	add	objptr, ##28228
086ec     F2 24 02 FB | 	rdlong	local04, objptr
086f0     03 24 66 F0 | 	shl	local04, #3
086f4     02 00 00 FF 
086f8     38 E4 85 F1 | 	sub	objptr, ##1080
086fc     F2 24 02 F1 | 	add	local04, objptr
08700     04 24 06 F1 | 	add	local04, #4
08704     12 2D 02 FB | 	rdlong	local08, local04
08708     11 2C 0E F2 | 	cmp	local08, #17 wz
0870c     35 00 00 FF 
08710     0C E4 85 F1 | 	sub	objptr, ##27148
08714     6C 00 90 AD |  if_e	jmp	#LR__0775
08718     37 00 00 FF 
0871c     44 E4 05 F1 | 	add	objptr, ##28228
08720     F2 2C 02 FB | 	rdlong	local08, objptr
08724     03 2C 66 F0 | 	shl	local08, #3
08728     02 00 00 FF 
0872c     38 E4 85 F1 | 	sub	objptr, ##1080
08730     F2 2C 02 F1 | 	add	local08, objptr
08734     04 2C 06 F1 | 	add	local08, #4
08738     16 2D 02 FB | 	rdlong	local08, local08
0873c     12 2C 0E F2 | 	cmp	local08, #18 wz
08740     35 00 00 FF 
08744     0C E4 85 F1 | 	sub	objptr, ##27148
08748     38 00 90 AD |  if_e	jmp	#LR__0775
0874c     37 00 00 FF 
08750     44 E4 05 F1 | 	add	objptr, ##28228
08754     F2 32 02 FB | 	rdlong	local11, objptr
08758     03 32 66 F0 | 	shl	local11, #3
0875c     02 00 00 FF 
08760     38 E4 85 F1 | 	sub	objptr, ##1080
08764     F2 32 02 F1 | 	add	local11, objptr
08768     04 32 06 F1 | 	add	local11, #4
0876c     19 33 02 FB | 	rdlong	local11, local11
08770     FE 33 0E F2 | 	cmp	local11, #510 wz
08774     35 00 00 FF 
08778     0C E4 85 F1 | 	sub	objptr, ##27148
0877c     16 FA 05 56 |  if_ne	mov	result1, #22
08780     68 00 90 5D |  if_ne	jmp	#LR__0777
08784                 | LR__0775
08784     37 00 00 FF 
08788     44 E4 05 F1 | 	add	objptr, ##28228
0878c     F2 24 02 FB | 	rdlong	local04, objptr
08790     01 24 06 F1 | 	add	local04, #1
08794     F2 24 62 FC | 	wrlong	local04, objptr
08798     03 24 66 F0 | 	shl	local04, #3
0879c     02 00 00 FF 
087a0     38 E4 85 F1 | 	sub	objptr, ##1080
087a4     F2 24 02 F1 | 	add	local04, objptr
087a8     04 24 06 F1 | 	add	local04, #4
087ac     12 2D 02 FB | 	rdlong	local08, local04
087b0     FE 2D 0E F2 | 	cmp	local08, #510 wz
087b4     35 00 00 FF 
087b8     0C E4 85 F1 | 	sub	objptr, ##27148
087bc     28 00 90 AD |  if_e	jmp	#LR__0776
087c0     37 00 00 FF 
087c4     44 E4 05 F1 | 	add	objptr, ##28228
087c8     F2 32 02 FB | 	rdlong	local11, objptr
087cc     0E 00 00 FF 
087d0     1C E4 05 F1 | 	add	objptr, ##7196
087d4     F2 30 02 FB | 	rdlong	local10, objptr
087d8     45 00 00 FF 
087dc     60 E4 85 F1 | 	sub	objptr, ##35424
087e0     18 33 52 F2 | 	cmps	local11, local10 wc
087e4     E4 FA 9F CD |  if_b	jmp	#LR__0771
087e8                 | LR__0776
087e8                 | ' return 0
087e8     00 FA 05 F6 | 	mov	result1, #0
087ec                 | LR__0777
087ec     A7 F0 03 F6 | 	mov	ptra, fp
087f0     B2 00 A0 FD | 	call	#popregs_
087f4                 | _compile_print_ret
087f4     2D 00 64 FD | 	ret
087f8                 | 
087f8                 | ' 
087f8                 | ' function compile_if() as ulong  
087f8                 | _compile_if
087f8     05 4A 05 F6 | 	mov	COUNT_, #5
087fc     A8 00 A0 FD | 	call	#pushregs_
08800                 | _compile_if_enter
08800     08 1B B0 FD | 	call	#_expr
08804                 | ' expr()
08804                 | ' return 0
08804     37 00 00 FF 
08808     44 E4 05 F1 | 	add	objptr, ##28228
0880c     F2 FA 01 FB | 	rdlong	result1, objptr
08810     01 FA 05 F1 | 	add	result1, #1
08814     F2 FA 61 FC | 	wrlong	result1, objptr
08818     58 22 06 F6 | 	mov	local03, #88
0881c     0F 25 02 F6 | 	mov	local04, local01
08820     10 27 02 F6 | 	mov	local05, local02
08824     11 1F 02 F6 | 	mov	local01, local03
08828     13 00 00 FF 
0882c     38 E4 05 F1 | 	add	objptr, ##9784
08830     F2 12 02 FB | 	rdlong	arg01, objptr
08834     09 FB 01 F6 | 	mov	result1, arg01
08838     01 FA 65 F0 | 	shl	result1, #1
0883c     09 FB 01 F1 | 	add	result1, arg01
08840     02 FA 65 F0 | 	shl	result1, #2
08844     03 00 00 FF 
08848     00 E4 85 F1 | 	sub	objptr, ##1536
0884c     F2 FA 01 F1 | 	add	result1, objptr
08850     FD 24 62 FC | 	wrlong	local04, result1
08854     03 00 00 FF 
08858     00 E4 05 F1 | 	add	objptr, ##1536
0885c     F2 12 02 FB | 	rdlong	arg01, objptr
08860     09 25 02 F6 | 	mov	local04, arg01
08864     01 24 66 F0 | 	shl	local04, #1
08868     09 25 02 F1 | 	add	local04, arg01
0886c     02 24 66 F0 | 	shl	local04, #2
08870     03 00 00 FF 
08874     00 E4 85 F1 | 	sub	objptr, ##1536
08878     F2 24 02 F1 | 	add	local04, objptr
0887c     04 24 06 F1 | 	add	local04, #4
08880     12 27 62 FC | 	wrlong	local05, local04
08884     03 00 00 FF 
08888     00 E4 05 F1 | 	add	objptr, ##1536
0888c     F2 24 02 FB | 	rdlong	local04, objptr
08890     12 27 02 F6 | 	mov	local05, local04
08894     01 26 66 F0 | 	shl	local05, #1
08898     12 27 02 F1 | 	add	local05, local04
0889c     02 26 66 F0 | 	shl	local05, #2
088a0     03 00 00 FF 
088a4     00 E4 85 F1 | 	sub	objptr, ##1536
088a8     F2 26 02 F1 | 	add	local05, objptr
088ac     08 26 06 F1 | 	add	local05, #8
088b0     13 1F 62 FC | 	wrlong	local01, local05
088b4     03 00 00 FF 
088b8     00 E4 05 F1 | 	add	objptr, ##1536
088bc     F2 24 02 FB | 	rdlong	local04, objptr
088c0     01 24 06 F1 | 	add	local04, #1
088c4     F2 24 62 FC | 	wrlong	local04, objptr
088c8                 | ' 
088c8                 | ' 'print "In compile_if"
088c8                 | ' compile_fun_1p()
088c8                 | ' cmd=lparts(ct).token : ct+=1
088c8                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
088c8                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
088c8                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
088c8     13 00 00 FF 
088cc     38 E4 85 F1 | 	sub	objptr, ##9784
088d0     F2 26 02 FB | 	rdlong	local05, objptr
088d4     01 26 06 F1 | 	add	local05, #1
088d8     03 26 66 F0 | 	shl	local05, #3
088dc     02 00 00 FF 
088e0     38 E4 85 F1 | 	sub	objptr, ##1080
088e4     F2 26 02 F1 | 	add	local05, objptr
088e8     13 13 02 FB | 	rdlong	arg01, local05
088ec     35 00 00 FF 
088f0     0C E4 85 F1 | 	sub	objptr, ##27148
088f4                 | ' 
088f4                 | ' select case s
088f4     82 01 00 FF 
088f8     12 15 06 F6 | 	mov	arg02, ##@LR__5173
088fc     10 82 B1 FD | 	call	#__system___string_cmp
08900     00 FA 0D F2 | 	cmp	result1, #0 wz
08904     1B FA 05 A6 |  if_e	mov	result1, #27
08908     00 FA 05 56 |  if_ne	mov	result1, #0
0890c     00 FA 0D F2 | 	cmp	result1, #0 wz
08910     0C 00 90 AD |  if_e	jmp	#LR__0780
08914     05 12 06 F6 | 	mov	arg01, #5
08918     A4 ED BF FD | 	call	#_compile_immediate_assign
0891c     08 00 90 FD | 	jmp	#LR__0781
08920                 | LR__0780
08920     05 12 06 F6 | 	mov	arg01, #5
08924     D4 E2 BF FD | 	call	#_compile_immediate
08928                 | LR__0781
08928                 | ' 
08928                 | ' 
08928                 | ' return 0
08928     00 FA 05 F6 | 	mov	result1, #0
0892c     A7 F0 03 F6 | 	mov	ptra, fp
08930     B2 00 A0 FD | 	call	#popregs_
08934                 | _compile_if_ret
08934     2D 00 64 FD | 	ret
08938                 | 
08938                 | ' 
08938                 | ' function compile_else() as ulong  
08938                 | _compile_else
08938     05 4A 05 F6 | 	mov	COUNT_, #5
0893c     A8 00 A0 FD | 	call	#pushregs_
08940                 | _compile_else_enter
08940     5A 22 06 F6 | 	mov	local03, #90
08944     0F 25 02 F6 | 	mov	local04, local01
08948     10 27 02 F6 | 	mov	local05, local02
0894c     11 1F 02 F6 | 	mov	local01, local03
08950     4A 00 00 FF 
08954     7C E4 05 F1 | 	add	objptr, ##38012
08958     F2 12 02 FB | 	rdlong	arg01, objptr
0895c     09 FB 01 F6 | 	mov	result1, arg01
08960     01 FA 65 F0 | 	shl	result1, #1
08964     09 FB 01 F1 | 	add	result1, arg01
08968     02 FA 65 F0 | 	shl	result1, #2
0896c     03 00 00 FF 
08970     00 E4 85 F1 | 	sub	objptr, ##1536
08974     F2 FA 01 F1 | 	add	result1, objptr
08978     FD 24 62 FC | 	wrlong	local04, result1
0897c     03 00 00 FF 
08980     00 E4 05 F1 | 	add	objptr, ##1536
08984     F2 FA 01 FB | 	rdlong	result1, objptr
08988     FD 24 02 F6 | 	mov	local04, result1
0898c     01 24 66 F0 | 	shl	local04, #1
08990     FD 24 02 F1 | 	add	local04, result1
08994     02 24 66 F0 | 	shl	local04, #2
08998     03 00 00 FF 
0899c     00 E4 85 F1 | 	sub	objptr, ##1536
089a0     F2 24 02 F1 | 	add	local04, objptr
089a4     04 24 06 F1 | 	add	local04, #4
089a8     12 27 62 FC | 	wrlong	local05, local04
089ac     03 00 00 FF 
089b0     00 E4 05 F1 | 	add	objptr, ##1536
089b4     F2 24 02 FB | 	rdlong	local04, objptr
089b8     12 27 02 F6 | 	mov	local05, local04
089bc     01 26 66 F0 | 	shl	local05, #1
089c0     12 27 02 F1 | 	add	local05, local04
089c4     02 26 66 F0 | 	shl	local05, #2
089c8     03 00 00 FF 
089cc     00 E4 85 F1 | 	sub	objptr, ##1536
089d0     F2 26 02 F1 | 	add	local05, objptr
089d4     08 26 06 F1 | 	add	local05, #8
089d8     13 1F 62 FC | 	wrlong	local01, local05
089dc     03 00 00 FF 
089e0     00 E4 05 F1 | 	add	objptr, ##1536
089e4     F2 24 02 FB | 	rdlong	local04, objptr
089e8     01 24 06 F1 | 	add	local04, #1
089ec     F2 24 62 FC | 	wrlong	local04, objptr
089f0                 | ' 
089f0                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
089f0                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
089f0     13 00 00 FF 
089f4     38 E4 85 F1 | 	sub	objptr, ##9784
089f8     F2 26 02 FB | 	rdlong	local05, objptr
089fc     01 26 06 F1 | 	add	local05, #1
08a00     03 26 66 F0 | 	shl	local05, #3
08a04     02 00 00 FF 
08a08     38 E4 85 F1 | 	sub	objptr, ##1080
08a0c     F2 26 02 F1 | 	add	local05, objptr
08a10     13 13 02 FB | 	rdlong	arg01, local05
08a14     35 00 00 FF 
08a18     0C E4 85 F1 | 	sub	objptr, ##27148
08a1c                 | ' 
08a1c                 | ' select case s
08a1c     82 01 00 FF 
08a20     12 15 06 F6 | 	mov	arg02, ##@LR__5173
08a24     E8 80 B1 FD | 	call	#__system___string_cmp
08a28     00 FA 0D F2 | 	cmp	result1, #0 wz
08a2c     1B FA 05 A6 |  if_e	mov	result1, #27
08a30     00 FA 05 56 |  if_ne	mov	result1, #0
08a34     00 FA 0D F2 | 	cmp	result1, #0 wz
08a38     0C 00 90 AD |  if_e	jmp	#LR__0790
08a3c     05 12 06 F6 | 	mov	arg01, #5
08a40     7C EC BF FD | 	call	#_compile_immediate_assign
08a44     08 00 90 FD | 	jmp	#LR__0791
08a48                 | LR__0790
08a48     05 12 06 F6 | 	mov	arg01, #5
08a4c     AC E1 BF FD | 	call	#_compile_immediate
08a50                 | LR__0791
08a50                 | ' 
08a50                 | ' 
08a50                 | ' return 0
08a50     00 FA 05 F6 | 	mov	result1, #0
08a54     A7 F0 03 F6 | 	mov	ptra, fp
08a58     B2 00 A0 FD | 	call	#popregs_
08a5c                 | _compile_else_ret
08a5c     2D 00 64 FD | 	ret
08a60                 | 
08a60                 | ' 
08a60                 | ' 
08a60                 | ' function compile_dim() as ulong  
08a60                 | _compile_dim
08a60     11 4A 05 F6 | 	mov	COUNT_, #17
08a64     A8 00 A0 FD | 	call	#pushregs_
08a68     01 1E 06 F6 | 	mov	local01, #1
08a6c     01 20 06 F6 | 	mov	local02, #1
08a70     01 22 06 F6 | 	mov	local03, #1
08a74                 | ' 
08a74                 | ' dims(0)=1: dims(1)=1: dims(2)=1
08a74                 | ' 
08a74                 | ' if isname(lparts(ct).part$) then 
08a74     37 00 00 FF 
08a78     44 E4 05 F1 | 	add	objptr, ##28228
08a7c     F2 18 02 FB | 	rdlong	arg04, objptr
08a80     03 18 66 F0 | 	shl	arg04, #3
08a84     02 00 00 FF 
08a88     38 E4 85 F1 | 	sub	objptr, ##1080
08a8c     F2 18 02 F1 | 	add	arg04, objptr
08a90     0C 13 02 FB | 	rdlong	arg01, arg04
08a94     35 00 00 FF 
08a98     0C E4 85 F1 | 	sub	objptr, ##27148
08a9c     3C D0 BF FD | 	call	#_isname
08aa0     00 FA 0D F2 | 	cmp	result1, #0 wz
08aa4     AC 05 90 AD |  if_e	jmp	#LR__0824
08aa8     37 00 00 FF 
08aac     44 E4 05 F1 | 	add	objptr, ##28228
08ab0     F2 24 02 FB | 	rdlong	local04, objptr
08ab4     03 24 66 F0 | 	shl	local04, #3
08ab8     02 00 00 FF 
08abc     38 E4 85 F1 | 	sub	objptr, ##1080
08ac0     F2 24 02 F1 | 	add	local04, objptr
08ac4     12 27 02 FB | 	rdlong	local05, local04
08ac8     01 28 66 F6 | 	neg	local06, #1
08acc                 | '   varname2$=lparts(ct).part$ 
08acc                 | '   j=-1
08acc                 | '   if varnum>0 then
08acc     04 E4 85 F1 | 	sub	objptr, #4
08ad0     F2 2A 02 FB | 	rdlong	local07, objptr
08ad4     35 00 00 FF 
08ad8     08 E4 85 F1 | 	sub	objptr, ##27144
08adc     01 2A 56 F2 | 	cmps	local07, #1 wc
08ae0     58 00 90 CD |  if_b	jmp	#LR__0802
08ae4                 | '  '   print "in dim, varnum=";varnum
08ae4                 | '     for i=0 to varnum-1
08ae4     00 2C 06 F6 | 	mov	local08, #0
08ae8     35 00 00 FF 
08aec     08 E4 05 F1 | 	add	objptr, ##27144
08af0     F2 2E 02 FB | 	rdlong	local09, objptr
08af4     35 00 00 FF 
08af8     08 E4 85 F1 | 	sub	objptr, ##27144
08afc                 | LR__0800
08afc     17 2D 52 F2 | 	cmps	local08, local09 wc
08b00     38 00 90 3D |  if_ae	jmp	#LR__0801
08b04                 | '       if variables(i).name=varname2$ then j=i : exit
08b04     16 25 02 F6 | 	mov	local04, local08
08b08     04 24 66 F0 | 	shl	local04, #4
08b0c     14 00 00 FF 
08b10     F8 E5 05 F1 | 	add	objptr, ##10744
08b14     F2 24 02 F1 | 	add	local04, objptr
08b18     12 13 02 FB | 	rdlong	arg01, local04
08b1c     13 15 02 F6 | 	mov	arg02, local05
08b20     14 00 00 FF 
08b24     F8 E5 85 F1 | 	sub	objptr, ##10744
08b28     E4 7F B1 FD | 	call	#__system___string_cmp
08b2c     00 FA 0D F2 | 	cmp	result1, #0 wz
08b30     16 29 02 A6 |  if_e	mov	local06, local08
08b34     01 2C 06 51 |  if_ne	add	local08, #1
08b38     C0 FF 9F 5D |  if_ne	jmp	#LR__0800
08b3c                 | LR__0801
08b3c                 | LR__0802
08b3c                 | ' '  if j<>-1 then printerror (42) : return 42
08b3c                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
08b3c     FF FF 7F FF 
08b40     FF 29 0E F2 | 	cmp	local06, ##-1 wz
08b44     35 00 00 AF 
08b48     08 E4 05 A1 |  if_e	add	objptr, ##27144
08b4c     F2 28 02 AB |  if_e	rdlong	local06, objptr
08b50     35 00 00 AF 
08b54     08 E4 85 A1 |  if_e	sub	objptr, ##27144
08b58     78 00 90 AD |  if_e	jmp	#LR__0803
08b5c     00 12 06 F6 | 	mov	arg01, #0
08b60     C4 D9 B1 FD | 	call	#__system___getiolock_0540
08b64     FD 12 02 F6 | 	mov	arg01, result1
08b68     7C 7F B1 FD | 	call	#__system___lockmem
08b6c     84 01 00 FF 
08b70     21 15 06 F6 | 	mov	arg02, ##@LR__5405
08b74     00 12 06 F6 | 	mov	arg01, #0
08b78     00 16 06 F6 | 	mov	arg03, #0
08b7c     5C 8C B1 FD | 	call	#__system___basic_print_string
08b80     51 00 00 FF 
08b84     C0 E5 05 F1 | 	add	objptr, ##41920
08b88     F2 14 02 FB | 	rdlong	arg02, objptr
08b8c     51 00 00 FF 
08b90     C0 E5 85 F1 | 	sub	objptr, ##41920
08b94     00 12 06 F6 | 	mov	arg01, #0
08b98     00 16 06 F6 | 	mov	arg03, #0
08b9c     0A 18 06 F6 | 	mov	arg04, #10
08ba0     BC 8C B1 FD | 	call	#__system___basic_print_unsigned
08ba4     84 01 00 FF 
08ba8     2F 15 06 F6 | 	mov	arg02, ##@LR__5406
08bac     00 12 06 F6 | 	mov	arg01, #0
08bb0     00 16 06 F6 | 	mov	arg03, #0
08bb4     24 8C B1 FD | 	call	#__system___basic_print_string
08bb8     00 12 06 F6 | 	mov	arg01, #0
08bbc     0A 14 06 F6 | 	mov	arg02, #10
08bc0     00 16 06 F6 | 	mov	arg03, #0
08bc4     BC 8B B1 FD | 	call	#__system___basic_print_char
08bc8     00 12 06 F6 | 	mov	arg01, #0
08bcc     58 D9 B1 FD | 	call	#__system___getiolock_0540
08bd0     FD 00 68 FC | 	wrlong	#0, result1
08bd4                 | LR__0803
08bd4                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
08bd4     37 00 00 FF 
08bd8     44 E4 05 F1 | 	add	objptr, ##28228
08bdc     F2 18 02 FB | 	rdlong	arg04, objptr
08be0     01 18 06 F1 | 	add	arg04, #1
08be4     03 18 66 F0 | 	shl	arg04, #3
08be8     02 00 00 FF 
08bec     38 E4 85 F1 | 	sub	objptr, ##1080
08bf0     F2 18 02 F1 | 	add	arg04, objptr
08bf4     0C 13 02 FB | 	rdlong	arg01, arg04
08bf8     84 01 00 FF 
08bfc     50 15 06 F6 | 	mov	arg02, ##@LR__5407
08c00     35 00 00 FF 
08c04     0C E4 85 F1 | 	sub	objptr, ##27148
08c08     04 7F B1 FD | 	call	#__system___string_cmp
08c0c     00 FA 0D F2 | 	cmp	result1, #0 wz
08c10     50 00 90 AD |  if_e	jmp	#LR__0804
08c14     37 00 00 FF 
08c18     44 E4 05 F1 | 	add	objptr, ##28228
08c1c     F2 2E 02 FB | 	rdlong	local09, objptr
08c20     01 2E 06 F1 | 	add	local09, #1
08c24     03 2E 66 F0 | 	shl	local09, #3
08c28     02 00 00 FF 
08c2c     38 E4 85 F1 | 	sub	objptr, ##1080
08c30     F2 2E 02 F1 | 	add	local09, objptr
08c34     17 13 02 FB | 	rdlong	arg01, local09
08c38     84 01 00 FF 
08c3c     52 15 06 F6 | 	mov	arg02, ##@LR__5408
08c40     35 00 00 FF 
08c44     0C E4 85 F1 | 	sub	objptr, ##27148
08c48     C4 7E B1 FD | 	call	#__system___string_cmp
08c4c     00 FA 0D F2 | 	cmp	result1, #0 wz
08c50     10 00 90 AD |  if_e	jmp	#LR__0804
08c54     2B 12 06 F6 | 	mov	arg01, #43
08c58     F4 48 B1 FD | 	call	#_printerror
08c5c     2B FA 05 F6 | 	mov	result1, #43
08c60     00 05 90 FD | 	jmp	#LR__0826
08c64                 | LR__0804
08c64                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
08c64     37 00 00 FF 
08c68     44 E4 05 F1 | 	add	objptr, ##28228
08c6c     F2 14 02 FB | 	rdlong	arg02, objptr
08c70     01 14 06 F1 | 	add	arg02, #1
08c74     03 14 66 F0 | 	shl	arg02, #3
08c78     02 00 00 FF 
08c7c     38 E4 85 F1 | 	sub	objptr, ##1080
08c80     F2 14 02 F1 | 	add	arg02, objptr
08c84     0A 13 02 FB | 	rdlong	arg01, arg02
08c88     84 01 00 FF 
08c8c     55 15 06 F6 | 	mov	arg02, ##@LR__5409
08c90     35 00 00 FF 
08c94     0C E4 85 F1 | 	sub	objptr, ##27148
08c98     74 7E B1 FD | 	call	#__system___string_cmp
08c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
08ca0     37 00 00 AF 
08ca4     44 E4 05 A1 |  if_e	add	objptr, ##28228
08ca8     F2 30 02 AB |  if_e	rdlong	local10, objptr
08cac     37 00 00 AF 
08cb0     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08cb4     01 30 06 A1 |  if_e	add	local10, #1
08cb8     7C 01 90 AD |  if_e	jmp	#LR__0810
08cbc     37 00 00 FF 
08cc0     44 E4 05 F1 | 	add	objptr, ##28228
08cc4     F2 30 02 FB | 	rdlong	local10, objptr
08cc8     37 00 00 FF 
08ccc     44 E4 85 F1 | 	sub	objptr, ##28228
08cd0     02 30 06 F1 | 	add	local10, #2
08cd4     00 32 06 F6 | 	mov	local11, #0
08cd8                 | '   l=ct+2 : m=0 : do
08cd8                 | LR__0805
08cd8                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
08cd8                 | '     if isdec(lparts(l).part$) then 
08cd8     18 25 02 F6 | 	mov	local04, local10
08cdc     03 24 66 F0 | 	shl	local04, #3
08ce0     35 00 00 FF 
08ce4     0C E4 05 F1 | 	add	objptr, ##27148
08ce8     F2 24 02 F1 | 	add	local04, objptr
08cec     12 13 02 FB | 	rdlong	arg01, local04
08cf0     35 00 00 FF 
08cf4     0C E4 85 F1 | 	sub	objptr, ##27148
08cf8     E4 D6 BF FD | 	call	#_isdec
08cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
08d00     44 00 90 AD |  if_e	jmp	#LR__0806
08d04     19 35 02 F6 | 	mov	local12, local11
08d08     0F 35 06 F1 | 	add	local12, #local01
08d0c     18 2F 02 F6 | 	mov	local09, local10
08d10     03 2E 66 F0 | 	shl	local09, #3
08d14     35 00 00 FF 
08d18     0C E4 05 F1 | 	add	objptr, ##27148
08d1c     F2 2E 02 F1 | 	add	local09, objptr
08d20     17 13 02 FB | 	rdlong	arg01, local09
08d24     00 14 06 F6 | 	mov	arg02, #0
08d28     35 00 00 FF 
08d2c     0C E4 85 F1 | 	sub	objptr, ##27148
08d30     E0 AF B1 FD | 	call	#__system____builtin_atoi
08d34     FD 36 02 F6 | 	mov	local13, result1
08d38                 | 	'.live	local13
08d38                 | 	'.live	local12
08d38     00 34 8E F9 | 	altd	local12, #0
08d3c     1B 35 02 F6 | 	mov	local12, local13
08d40     01 32 06 F1 | 	add	local11, #1
08d44     10 00 90 FD | 	jmp	#LR__0807
08d48                 | LR__0806
08d48     11 12 06 F6 | 	mov	arg01, #17
08d4c     00 48 B1 FD | 	call	#_printerror
08d50                 | '       printerror (17)  : return(17)
08d50     11 FA 05 F6 | 	mov	result1, #17
08d54     0C 04 90 FD | 	jmp	#LR__0826
08d58                 | LR__0807
08d58                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
08d58     18 25 02 F6 | 	mov	local04, local10
08d5c     01 24 06 F1 | 	add	local04, #1
08d60     03 24 66 F0 | 	shl	local04, #3
08d64     35 00 00 FF 
08d68     0C E4 05 F1 | 	add	objptr, ##27148
08d6c     F2 24 02 F1 | 	add	local04, objptr
08d70     12 13 02 FB | 	rdlong	arg01, local04
08d74     84 01 00 FF 
08d78     58 15 06 F6 | 	mov	arg02, ##@LR__5410
08d7c     35 00 00 FF 
08d80     0C E4 85 F1 | 	sub	objptr, ##27148
08d84     88 7D B1 FD | 	call	#__system___string_cmp
08d88     00 FA 0D F2 | 	cmp	result1, #0 wz
08d8c     48 00 90 AD |  if_e	jmp	#LR__0808
08d90     18 37 02 F6 | 	mov	local13, local10
08d94     01 36 06 F1 | 	add	local13, #1
08d98     03 36 66 F0 | 	shl	local13, #3
08d9c     35 00 00 FF 
08da0     0C E4 05 F1 | 	add	objptr, ##27148
08da4     F2 36 02 F1 | 	add	local13, objptr
08da8     1B 13 02 FB | 	rdlong	arg01, local13
08dac     84 01 00 FF 
08db0     5A 15 06 F6 | 	mov	arg02, ##@LR__5411
08db4     35 00 00 FF 
08db8     0C E4 85 F1 | 	sub	objptr, ##27148
08dbc     50 7D B1 FD | 	call	#__system___string_cmp
08dc0     00 FA 0D F2 | 	cmp	result1, #0 wz
08dc4     10 00 90 AD |  if_e	jmp	#LR__0808
08dc8     2C 12 06 F6 | 	mov	arg01, #44
08dcc     80 47 B1 FD | 	call	#_printerror
08dd0     2C FA 05 F6 | 	mov	result1, #44
08dd4     8C 03 90 FD | 	jmp	#LR__0826
08dd8                 | LR__0808
08dd8     02 30 06 F1 | 	add	local10, #2
08ddc     18 25 02 F6 | 	mov	local04, local10
08de0     01 24 86 F1 | 	sub	local04, #1
08de4     03 24 66 F0 | 	shl	local04, #3
08de8     35 00 00 FF 
08dec     0C E4 05 F1 | 	add	objptr, ##27148
08df0     F2 24 02 F1 | 	add	local04, objptr
08df4     12 13 02 FB | 	rdlong	arg01, local04
08df8     84 01 00 FF 
08dfc     5C 15 06 F6 | 	mov	arg02, ##@LR__5412
08e00     35 00 00 FF 
08e04     0C E4 85 F1 | 	sub	objptr, ##27148
08e08     04 7D B1 FD | 	call	#__system___string_cmp
08e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
08e10     03 32 56 52 |  if_ne	cmps	local11, #3 wc
08e14     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0805
08e18                 | '   if m>3 then printerror(45): return(45)
08e18     04 32 56 F2 | 	cmps	local11, #4 wc
08e1c     10 00 90 CD |  if_b	jmp	#LR__0809
08e20     2D 12 06 F6 | 	mov	arg01, #45
08e24     28 47 B1 FD | 	call	#_printerror
08e28     2D FA 05 F6 | 	mov	result1, #45
08e2c     34 03 90 FD | 	jmp	#LR__0826
08e30                 | LR__0809
08e30     00 39 06 F6 | 	mov	local14, #256
08e34     0C 3A 06 F6 | 	mov	local15, #12
08e38                 | LR__0810
08e38                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
08e38                 | '   arraytype=array_no_type : esize=12
08e38                 | ' 1350 
08e38                 | '   if lparts(l).part$="as" then
08e38     18 25 02 F6 | 	mov	local04, local10
08e3c     03 24 66 F0 | 	shl	local04, #3
08e40     35 00 00 FF 
08e44     0C E4 05 F1 | 	add	objptr, ##27148
08e48     F2 24 02 F1 | 	add	local04, objptr
08e4c     12 13 02 FB | 	rdlong	arg01, local04
08e50     84 01 00 FF 
08e54     5E 15 06 F6 | 	mov	arg02, ##@LR__5413
08e58     35 00 00 FF 
08e5c     0C E4 85 F1 | 	sub	objptr, ##27148
08e60     AC 7C B1 FD | 	call	#__system___string_cmp
08e64     00 FA 0D F2 | 	cmp	result1, #0 wz
08e68     F8 01 90 5D |  if_ne	jmp	#LR__0825
08e6c                 | '     select case lparts(l+1).part$
08e6c     18 35 02 F6 | 	mov	local12, local10
08e70     01 34 06 F1 | 	add	local12, #1
08e74     03 34 66 F0 | 	shl	local12, #3
08e78     35 00 00 FF 
08e7c     0C E4 05 F1 | 	add	objptr, ##27148
08e80     F2 34 02 F1 | 	add	local12, objptr
08e84     1A 3D 02 FB | 	rdlong	local16, local12
08e88     84 01 00 FF 
08e8c     61 15 06 F6 | 	mov	arg02, ##@LR__5414
08e90     1E 13 02 F6 | 	mov	arg01, local16
08e94     35 00 00 FF 
08e98     0C E4 85 F1 | 	sub	objptr, ##27148
08e9c     70 7C B1 FD | 	call	#__system___string_cmp
08ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
08ea4     0C 01 90 AD |  if_e	jmp	#LR__0811
08ea8     84 01 00 FF 
08eac     66 15 06 F6 | 	mov	arg02, ##@LR__5415
08eb0     1E 13 02 F6 | 	mov	arg01, local16
08eb4     58 7C B1 FD | 	call	#__system___string_cmp
08eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
08ebc     00 01 90 AD |  if_e	jmp	#LR__0812
08ec0     84 01 00 FF 
08ec4     6C 15 06 F6 | 	mov	arg02, ##@LR__5416
08ec8     1E 13 02 F6 | 	mov	arg01, local16
08ecc     40 7C B1 FD | 	call	#__system___string_cmp
08ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
08ed4     F4 00 90 AD |  if_e	jmp	#LR__0813
08ed8     84 01 00 FF 
08edc     72 15 06 F6 | 	mov	arg02, ##@LR__5417
08ee0     1E 13 02 F6 | 	mov	arg01, local16
08ee4     28 7C B1 FD | 	call	#__system___string_cmp
08ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
08eec     E8 00 90 AD |  if_e	jmp	#LR__0814
08ef0     84 01 00 FF 
08ef4     79 15 06 F6 | 	mov	arg02, ##@LR__5418
08ef8     1E 13 02 F6 | 	mov	arg01, local16
08efc     10 7C B1 FD | 	call	#__system___string_cmp
08f00     00 FA 0D F2 | 	cmp	result1, #0 wz
08f04     DC 00 90 AD |  if_e	jmp	#LR__0815
08f08     84 01 00 FF 
08f0c     7E 15 06 F6 | 	mov	arg02, ##@LR__5419
08f10     1E 13 02 F6 | 	mov	arg01, local16
08f14     F8 7B B1 FD | 	call	#__system___string_cmp
08f18     00 FA 0D F2 | 	cmp	result1, #0 wz
08f1c     D0 00 90 AD |  if_e	jmp	#LR__0816
08f20     84 01 00 FF 
08f24     86 15 06 F6 | 	mov	arg02, ##@LR__5420
08f28     1E 13 02 F6 | 	mov	arg01, local16
08f2c     E0 7B B1 FD | 	call	#__system___string_cmp
08f30     00 FA 0D F2 | 	cmp	result1, #0 wz
08f34     C4 00 90 AD |  if_e	jmp	#LR__0817
08f38     84 01 00 FF 
08f3c     8C 15 06 F6 | 	mov	arg02, ##@LR__5421
08f40     1E 13 02 F6 | 	mov	arg01, local16
08f44     C8 7B B1 FD | 	call	#__system___string_cmp
08f48     00 FA 0D F2 | 	cmp	result1, #0 wz
08f4c     B8 00 90 AD |  if_e	jmp	#LR__0818
08f50     84 01 00 FF 
08f54     92 15 06 F6 | 	mov	arg02, ##@LR__5422
08f58     1E 13 02 F6 | 	mov	arg01, local16
08f5c     B0 7B B1 FD | 	call	#__system___string_cmp
08f60     00 FA 0D F2 | 	cmp	result1, #0 wz
08f64     AC 00 90 AD |  if_e	jmp	#LR__0819
08f68     84 01 00 FF 
08f6c     99 15 06 F6 | 	mov	arg02, ##@LR__5423
08f70     1E 13 02 F6 | 	mov	arg01, local16
08f74     98 7B B1 FD | 	call	#__system___string_cmp
08f78     00 FA 0D F2 | 	cmp	result1, #0 wz
08f7c     A0 00 90 AD |  if_e	jmp	#LR__0820
08f80     84 01 00 FF 
08f84     A0 15 06 F6 | 	mov	arg02, ##@LR__5424
08f88     1E 13 02 F6 | 	mov	arg01, local16
08f8c     80 7B B1 FD | 	call	#__system___string_cmp
08f90     00 FA 0D F2 | 	cmp	result1, #0 wz
08f94     94 00 90 AD |  if_e	jmp	#LR__0821
08f98     84 01 00 FF 
08f9c     A7 15 06 F6 | 	mov	arg02, ##@LR__5425
08fa0     1E 13 02 F6 | 	mov	arg01, local16
08fa4     68 7B B1 FD | 	call	#__system___string_cmp
08fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
08fac     88 00 90 AD |  if_e	jmp	#LR__0822
08fb0     90 00 90 FD | 	jmp	#LR__0823
08fb4                 | LR__0811
08fb4     01 39 06 F6 | 	mov	local14, #257
08fb8     01 3A 06 F6 | 	mov	local15, #1
08fbc     A4 00 90 FD | 	jmp	#LR__0825
08fc0                 | LR__0812
08fc0     02 39 06 F6 | 	mov	local14, #258
08fc4     01 3A 06 F6 | 	mov	local15, #1
08fc8     98 00 90 FD | 	jmp	#LR__0825
08fcc                 | LR__0813
08fcc     03 39 06 F6 | 	mov	local14, #259
08fd0     02 3A 06 F6 | 	mov	local15, #2
08fd4     8C 00 90 FD | 	jmp	#LR__0825
08fd8                 | LR__0814
08fd8     04 39 06 F6 | 	mov	local14, #260
08fdc     02 3A 06 F6 | 	mov	local15, #2
08fe0     80 00 90 FD | 	jmp	#LR__0825
08fe4                 | LR__0815
08fe4     05 39 06 F6 | 	mov	local14, #261
08fe8     04 3A 06 F6 | 	mov	local15, #4
08fec     74 00 90 FD | 	jmp	#LR__0825
08ff0                 | LR__0816
08ff0     05 39 06 F6 | 	mov	local14, #261
08ff4     04 3A 06 F6 | 	mov	local15, #4
08ff8     68 00 90 FD | 	jmp	#LR__0825
08ffc                 | LR__0817
08ffc     06 39 06 F6 | 	mov	local14, #262
09000     04 3A 06 F6 | 	mov	local15, #4
09004     5C 00 90 FD | 	jmp	#LR__0825
09008                 | LR__0818
09008     07 39 06 F6 | 	mov	local14, #263
0900c     08 3A 06 F6 | 	mov	local15, #8
09010     50 00 90 FD | 	jmp	#LR__0825
09014                 | LR__0819
09014     08 39 06 F6 | 	mov	local14, #264
09018     08 3A 06 F6 | 	mov	local15, #8
0901c     44 00 90 FD | 	jmp	#LR__0825
09020                 | LR__0820
09020     09 39 06 F6 | 	mov	local14, #265
09024     04 3A 06 F6 | 	mov	local15, #4
09028     38 00 90 FD | 	jmp	#LR__0825
0902c                 | LR__0821
0902c     0A 39 06 F6 | 	mov	local14, #266
09030     08 3A 06 F6 | 	mov	local15, #8
09034     2C 00 90 FD | 	jmp	#LR__0825
09038                 | LR__0822
09038     0B 39 06 F6 | 	mov	local14, #267
0903c     04 3A 06 F6 | 	mov	local15, #4
09040     20 00 90 FD | 	jmp	#LR__0825
09044                 | LR__0823
09044     2F 12 06 F6 | 	mov	arg01, #47
09048     04 45 B1 FD | 	call	#_printerror
0904c     2F FA 05 F6 | 	mov	result1, #47
09050     10 01 90 FD | 	jmp	#LR__0826
09054                 | LR__0824
09054     2E 12 06 F6 | 	mov	arg01, #46
09058     F4 44 B1 FD | 	call	#_printerror
0905c                 | '   printerror(46): return 46
0905c     2E FA 05 F6 | 	mov	result1, #46
09060     00 01 90 FD | 	jmp	#LR__0826
09064                 | LR__0825
09064     0F 3B 02 FD | 	qmul	local15, local01
09068     18 2A 62 FD | 	getqx	local07
0906c     10 2B 02 FD | 	qmul	local07, local02
09070     18 3C 62 FD | 	getqx	local16
09074     11 3D 02 FD | 	qmul	local16, local03
09078     51 00 00 FF 
0907c     A8 E5 05 F1 | 	add	objptr, ##41896
09080     F2 3E 02 FB | 	rdlong	local17, objptr
09084     1C 15 02 F6 | 	mov	arg02, local14
09088     18 3C 62 FD | 	getqx	local16
0908c     1E 3F 82 F1 | 	sub	local17, local16
09090     10 3E 86 F1 | 	sub	local17, #16
09094     0F 3E 26 F5 | 	andn	local17, #15
09098     F2 3E 62 FC | 	wrlong	local17, objptr
0909c     51 00 00 FF 
090a0     A8 E5 85 F1 | 	sub	objptr, ##41896
090a4     1F 13 02 F6 | 	mov	arg01, local17
090a8     50 46 B1 FD | 	call	#_psdpoke
090ac     1F 13 02 F6 | 	mov	arg01, local17
090b0     02 12 06 F1 | 	add	arg01, #2
090b4     1D 15 02 F6 | 	mov	arg02, local15
090b8     40 46 B1 FD | 	call	#_psdpoke
090bc     1F 13 02 F6 | 	mov	arg01, local17
090c0     04 12 06 F1 | 	add	arg01, #4
090c4     0F 15 02 F6 | 	mov	arg02, local01
090c8     E8 45 B1 FD | 	call	#_pslpoke
090cc     1F 13 02 F6 | 	mov	arg01, local17
090d0     08 12 06 F1 | 	add	arg01, #8
090d4     10 15 02 F6 | 	mov	arg02, local02
090d8     D8 45 B1 FD | 	call	#_pslpoke
090dc     1F 13 02 F6 | 	mov	arg01, local17
090e0     0C 12 06 F1 | 	add	arg01, #12
090e4     11 15 02 F6 | 	mov	arg02, local03
090e8     C8 45 B1 FD | 	call	#_pslpoke
090ec     14 35 02 F6 | 	mov	local12, local06
090f0     04 34 66 F0 | 	shl	local12, #4
090f4     14 00 00 FF 
090f8     F8 E5 05 F1 | 	add	objptr, ##10744
090fc     F2 34 02 F1 | 	add	local12, objptr
09100     1A 27 62 FC | 	wrlong	local05, local12
09104     14 35 02 F6 | 	mov	local12, local06
09108     04 34 66 F0 | 	shl	local12, #4
0910c     F2 34 02 F1 | 	add	local12, objptr
09110     04 34 06 F1 | 	add	local12, #4
09114     1A 3F 62 FC | 	wrlong	local17, local12
09118     14 35 02 F6 | 	mov	local12, local06
0911c     04 34 66 F0 | 	shl	local12, #4
09120     F2 34 02 F1 | 	add	local12, objptr
09124     0C 34 06 F1 | 	add	local12, #12
09128     1A 39 62 FC | 	wrlong	local14, local12
0912c                 | ' memtop=arrayptr
0912c                 | ' 
0912c                 | ' psdpoke arrayptr,arraytype ': print arraytype, arrayptr
0912c                 | ' psdpoke arrayptr+2,esize ': print esize , psdpeek(arrayptr+2)
0912c                 | ' pslpoke arrayptr+4,dims(0)
0912c                 | ' pslpoke arrayptr+8,dims(1)
0912c                 | ' pslpoke arrayptr+12,dims(2)
0912c                 | ' 'for i=0 to 15: print hex$(pspeek(arrayptr+i),2), : next i
0912c                 | ' 'for i=0 to 3: print hex$(pslpeek(arrayptr+4*i),2), : next i
0912c                 | ' 
0912c                 | ' 
0912c                 | ' variables(j).name=varname2$
0912c                 | ' variables(j).value.uresult=arrayptr
0912c                 | ' variables(j).vartype=arraytype
0912c                 | ' if j=varnum then varnum+=1
0912c     20 00 00 FF 
09130     10 E4 05 F1 | 	add	objptr, ##16400
09134     F2 2A 02 FB | 	rdlong	local07, objptr
09138     35 00 00 FF 
0913c     08 E4 85 F1 | 	sub	objptr, ##27144
09140     15 29 0A F2 | 	cmp	local06, local07 wz
09144     35 00 00 AF 
09148     08 E4 05 A1 |  if_e	add	objptr, ##27144
0914c     F2 2A 02 AB |  if_e	rdlong	local07, objptr
09150     01 2A 06 A1 |  if_e	add	local07, #1
09154     F2 2A 62 AC |  if_e	wrlong	local07, objptr
09158     35 00 00 AF 
0915c     08 E4 85 A1 |  if_e	sub	objptr, ##27144
09160                 | ' 
09160                 | ' return 0
09160     00 FA 05 F6 | 	mov	result1, #0
09164                 | LR__0826
09164     A7 F0 03 F6 | 	mov	ptra, fp
09168     B2 00 A0 FD | 	call	#popregs_
0916c                 | _compile_dim_ret
0916c     2D 00 64 FD | 	ret
09170                 | 
09170                 | ' 
09170                 | ' 
09170                 | ' function compile_for() as ulong  
09170                 | _compile_for
09170     07 4A 05 F6 | 	mov	COUNT_, #7
09174     A8 00 A0 FD | 	call	#pushregs_
09178                 | ' 
09178                 | ' 
09178                 | ' 
09178                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
09178     37 00 00 FF 
0917c     44 E4 05 F1 | 	add	objptr, ##28228
09180     F2 14 02 FB | 	rdlong	arg02, objptr
09184     01 14 06 F1 | 	add	arg02, #1
09188     03 14 66 F0 | 	shl	arg02, #3
0918c     02 00 00 FF 
09190     38 E4 85 F1 | 	sub	objptr, ##1080
09194     F2 14 02 F1 | 	add	arg02, objptr
09198     0A 13 02 FB | 	rdlong	arg01, arg02
0919c     35 00 00 FF 
091a0     0C E4 85 F1 | 	sub	objptr, ##27148
091a4                 | ' 
091a4                 | ' select case s
091a4     82 01 00 FF 
091a8     12 15 06 F6 | 	mov	arg02, ##@LR__5173
091ac     60 79 B1 FD | 	call	#__system___string_cmp
091b0     00 FA 0D F2 | 	cmp	result1, #0 wz
091b4     1B FA 05 A6 |  if_e	mov	result1, #27
091b8     00 FA 05 56 |  if_ne	mov	result1, #0
091bc     00 FA 0D F2 | 	cmp	result1, #0 wz
091c0     0C 00 90 AD |  if_e	jmp	#LR__0830
091c4     05 12 06 F6 | 	mov	arg01, #5
091c8     F4 E4 BF FD | 	call	#_compile_immediate_assign
091cc     10 00 90 FD | 	jmp	#LR__0831
091d0                 | LR__0830
091d0     20 12 06 F6 | 	mov	arg01, #32
091d4     48 E9 BF FD | 	call	#_compile_error
091d8     20 FA 05 F6 | 	mov	result1, #32
091dc     E8 02 90 FD | 	jmp	#LR__0837
091e0                 | LR__0831
091e0     4A 00 00 FF 
091e4     7C E4 05 F1 | 	add	objptr, ##38012
091e8     F2 12 02 FB | 	rdlong	arg01, objptr
091ec     09 25 02 F6 | 	mov	local04, arg01
091f0     01 24 86 F1 | 	sub	local04, #1
091f4     12 15 02 F6 | 	mov	arg02, local04
091f8     01 14 66 F0 | 	shl	arg02, #1
091fc     12 15 02 F1 | 	add	arg02, local04
09200     02 14 66 F0 | 	shl	arg02, #2
09204     03 00 00 FF 
09208     00 E4 85 F1 | 	sub	objptr, ##1536
0920c     F2 14 02 F1 | 	add	arg02, objptr
09210     0A 1F 02 FB | 	rdlong	local01, arg02
09214     04 14 06 F1 | 	add	arg02, #4
09218     0A 27 02 FB | 	rdlong	local05, arg02
0921c     01 12 86 F1 | 	sub	arg01, #1
09220     09 29 02 F6 | 	mov	local06, arg01
09224     01 28 66 F0 | 	shl	local06, #1
09228     09 29 02 F1 | 	add	local06, arg01
0922c     02 28 66 F0 | 	shl	local06, #2
09230     F2 28 02 F1 | 	add	local06, objptr
09234     08 28 06 F1 | 	add	local06, #8
09238     14 13 02 FB | 	rdlong	arg01, local06
0923c     13 21 02 F6 | 	mov	local02, local05
09240     09 23 02 F6 | 	mov	local03, arg01
09244                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
09244                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
09244     17 22 0E F2 | 	cmp	local03, #23 wz
09248     47 00 00 FF 
0924c     7C E4 85 F1 | 	sub	objptr, ##36476
09250     10 00 90 AD |  if_e	jmp	#LR__0832
09254     22 12 06 F6 | 	mov	arg01, #34
09258     C4 E8 BF FD | 	call	#_compile_error
0925c     22 FA 05 F6 | 	mov	result1, #34
09260     64 02 90 FD | 	jmp	#LR__0837
09264                 | LR__0832
09264     0F 2B 02 F6 | 	mov	local07, local01
09268                 | ' varnum=t1.result.uresult
09268                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
09268     37 00 00 FF 
0926c     44 E4 05 F1 | 	add	objptr, ##28228
09270     F2 24 02 FB | 	rdlong	local04, objptr
09274     03 24 66 F0 | 	shl	local04, #3
09278     02 00 00 FF 
0927c     38 E4 85 F1 | 	sub	objptr, ##1080
09280     F2 24 02 F1 | 	add	local04, objptr
09284     12 13 02 FB | 	rdlong	arg01, local04
09288     84 01 00 FF 
0928c     AE 15 06 F6 | 	mov	arg02, ##@LR__5426
09290     35 00 00 FF 
09294     0C E4 85 F1 | 	sub	objptr, ##27148
09298     74 78 B1 FD | 	call	#__system___string_cmp
0929c     00 FA 0D F2 | 	cmp	result1, #0 wz
092a0     10 00 90 AD |  if_e	jmp	#LR__0833
092a4     21 12 06 F6 | 	mov	arg01, #33
092a8     74 E8 BF FD | 	call	#_compile_error
092ac     21 FA 05 F6 | 	mov	result1, #33
092b0     14 02 90 FD | 	jmp	#LR__0837
092b4                 | LR__0833
092b4     37 00 00 FF 
092b8     44 E4 05 F1 | 	add	objptr, ##28228
092bc     F2 24 02 FB | 	rdlong	local04, objptr
092c0     01 24 06 F1 | 	add	local04, #1
092c4     F2 24 62 FC | 	wrlong	local04, objptr
092c8     37 00 00 FF 
092cc     44 E4 85 F1 | 	sub	objptr, ##28228
092d0     38 10 B0 FD | 	call	#_expr
092d4                 | ' ct+=1
092d4                 | ' expr()  ' there is "to" value pushed on the stack
092d4                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
092d4     37 00 00 FF 
092d8     44 E4 05 F1 | 	add	objptr, ##28228
092dc     F2 24 02 FB | 	rdlong	local04, objptr
092e0     03 24 66 F0 | 	shl	local04, #3
092e4     02 00 00 FF 
092e8     38 E4 85 F1 | 	sub	objptr, ##1080
092ec     F2 24 02 F1 | 	add	local04, objptr
092f0     12 13 02 FB | 	rdlong	arg01, local04
092f4     84 01 00 FF 
092f8     B1 15 06 F6 | 	mov	arg02, ##@LR__5427
092fc     35 00 00 FF 
09300     0C E4 85 F1 | 	sub	objptr, ##27148
09304     08 78 B1 FD | 	call	#__system___string_cmp
09308     00 FA 0D F2 | 	cmp	result1, #0 wz
0930c     3C 00 90 AD |  if_e	jmp	#LR__0834
09310     37 00 00 FF 
09314     44 E4 05 F1 | 	add	objptr, ##28228
09318     F2 28 02 FB | 	rdlong	local06, objptr
0931c     03 28 66 F0 | 	shl	local06, #3
09320     02 00 00 FF 
09324     38 E4 85 F1 | 	sub	objptr, ##1080
09328     F2 28 02 F1 | 	add	local06, objptr
0932c     14 13 02 FB | 	rdlong	arg01, local06
09330     84 01 00 FF 
09334     B6 15 06 F6 | 	mov	arg02, ##@LR__5428
09338     35 00 00 FF 
0933c     0C E4 85 F1 | 	sub	objptr, ##27148
09340     CC 77 B1 FD | 	call	#__system___string_cmp
09344     00 FA 0D F2 | 	cmp	result1, #0 wz
09348     24 00 90 5D |  if_ne	jmp	#LR__0835
0934c                 | LR__0834
0934c     37 00 00 FF 
09350     44 E4 05 F1 | 	add	objptr, ##28228
09354     F2 28 02 FB | 	rdlong	local06, objptr
09358     01 28 06 F1 | 	add	local06, #1
0935c     F2 28 62 FC | 	wrlong	local06, objptr
09360     37 00 00 FF 
09364     44 E4 85 F1 | 	sub	objptr, ##28228
09368     A0 0F B0 FD | 	call	#_expr
0936c     78 00 90 FD | 	jmp	#LR__0836
09370                 | LR__0835
09370     4A 00 00 FF 
09374     7C E4 05 F1 | 	add	objptr, ##38012
09378     F2 28 02 FB | 	rdlong	local06, objptr
0937c     14 27 02 F6 | 	mov	local05, local06
09380     01 26 66 F0 | 	shl	local05, #1
09384     14 27 02 F1 | 	add	local05, local06
09388     02 26 66 F0 | 	shl	local05, #2
0938c     03 00 00 FF 
09390     00 E4 85 F1 | 	sub	objptr, ##1536
09394     F2 26 02 F1 | 	add	local05, objptr
09398     08 26 06 F1 | 	add	local05, #8
0939c     13 39 68 FC | 	wrlong	#28, local05
093a0     03 00 00 FF 
093a4     00 E4 05 F1 | 	add	objptr, ##1536
093a8     F2 28 02 FB | 	rdlong	local06, objptr
093ac     14 27 02 F6 | 	mov	local05, local06
093b0     01 26 66 F0 | 	shl	local05, #1
093b4     14 27 02 F1 | 	add	local05, local06
093b8     02 26 66 F0 | 	shl	local05, #2
093bc     03 00 00 FF 
093c0     00 E4 85 F1 | 	sub	objptr, ##1536
093c4     F2 26 02 F1 | 	add	local05, objptr
093c8     13 03 68 FC | 	wrlong	#1, local05
093cc     03 00 00 FF 
093d0     00 E4 05 F1 | 	add	objptr, ##1536
093d4     F2 28 02 FB | 	rdlong	local06, objptr
093d8     01 28 06 F1 | 	add	local06, #1
093dc     F2 28 62 FC | 	wrlong	local06, objptr
093e0     4A 00 00 FF 
093e4     7C E4 85 F1 | 	sub	objptr, ##38012
093e8                 | LR__0836
093e8     4A 00 00 FF 
093ec     7C E4 05 F1 | 	add	objptr, ##38012
093f0     F2 28 02 FB | 	rdlong	local06, objptr
093f4     14 27 02 F6 | 	mov	local05, local06
093f8     01 26 66 F0 | 	shl	local05, #1
093fc     14 27 02 F1 | 	add	local05, local06
09400     02 26 66 F0 | 	shl	local05, #2
09404     03 00 00 FF 
09408     00 E4 85 F1 | 	sub	objptr, ##1536
0940c     F2 26 02 F1 | 	add	local05, objptr
09410     08 26 06 F1 | 	add	local05, #8
09414     13 39 68 FC | 	wrlong	#28, local05
09418     03 00 00 FF 
0941c     00 E4 05 F1 | 	add	objptr, ##1536
09420     F2 28 02 FB | 	rdlong	local06, objptr
09424     14 27 02 F6 | 	mov	local05, local06
09428     01 26 66 F0 | 	shl	local05, #1
0942c     14 27 02 F1 | 	add	local05, local06
09430     02 26 66 F0 | 	shl	local05, #2
09434     03 00 00 FF 
09438     00 E4 85 F1 | 	sub	objptr, ##1536
0943c     F2 26 02 F1 | 	add	local05, objptr
09440     13 2B 62 FC | 	wrlong	local07, local05
09444     03 00 00 FF 
09448     00 E4 05 F1 | 	add	objptr, ##1536
0944c     F2 2A 02 FB | 	rdlong	local07, objptr
09450     01 2A 06 F1 | 	add	local07, #1
09454     F2 2A 62 FC | 	wrlong	local07, objptr
09458     15 29 02 F6 | 	mov	local06, local07
0945c     01 28 66 F0 | 	shl	local06, #1
09460     15 29 02 F1 | 	add	local06, local07
09464     02 28 66 F0 | 	shl	local06, #2
09468     03 00 00 FF 
0946c     00 E4 85 F1 | 	sub	objptr, ##1536
09470     F2 28 02 F1 | 	add	local06, objptr
09474     08 28 06 F1 | 	add	local06, #8
09478     14 95 68 FC | 	wrlong	#74, local06
0947c     03 00 00 FF 
09480     00 E4 05 F1 | 	add	objptr, ##1536
09484     F2 2A 02 FB | 	rdlong	local07, objptr
09488     15 29 02 F6 | 	mov	local06, local07
0948c     01 28 66 F0 | 	shl	local06, #1
09490     15 29 02 F1 | 	add	local06, local07
09494     02 28 66 F0 | 	shl	local06, #2
09498     03 00 00 FF 
0949c     00 E4 85 F1 | 	sub	objptr, ##1536
094a0     F2 28 02 F1 | 	add	local06, objptr
094a4     14 01 68 FC | 	wrlong	#0, local06
094a8     03 00 00 FF 
094ac     00 E4 05 F1 | 	add	objptr, ##1536
094b0     F2 2A 02 FB | 	rdlong	local07, objptr
094b4     01 2A 06 F1 | 	add	local07, #1
094b8     F2 2A 62 FC | 	wrlong	local07, objptr
094bc     4A 00 00 FF 
094c0     7C E4 85 F1 | 	sub	objptr, ##38012
094c4                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
094c4                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
094c4                 | ' 
094c4                 | ' 
094c4                 | ' return 0
094c4     00 FA 05 F6 | 	mov	result1, #0
094c8                 | LR__0837
094c8     A7 F0 03 F6 | 	mov	ptra, fp
094cc     B2 00 A0 FD | 	call	#popregs_
094d0                 | _compile_for_ret
094d0     2D 00 64 FD | 	ret
094d4                 | 
094d4                 | ' 
094d4                 | ' 
094d4                 | ' sub do_gosub()
094d4                 | _do_gosub
094d4     50 00 00 FF 
094d8     08 E5 05 F1 | 	add	objptr, ##41224
094dc     F2 00 02 FB | 	rdlong	_var01, objptr
094e0     01 00 06 F1 | 	add	_var01, #1
094e4     F2 00 62 FC | 	wrlong	_var01, objptr
094e8                 | ' gosubtop+=1
094e8                 | ' if compiledline(lineptr_e+1).result_type=token_end then
094e8     06 00 00 FF 
094ec     88 E4 85 F1 | 	sub	objptr, ##3208
094f0     F2 00 02 FB | 	rdlong	_var01, objptr
094f4     01 00 06 F1 | 	add	_var01, #1
094f8     00 03 02 F6 | 	mov	_var02, _var01
094fc     01 02 66 F0 | 	shl	_var02, #1
09500     00 03 02 F1 | 	add	_var02, _var01
09504     02 02 66 F0 | 	shl	_var02, #2
09508     03 00 00 FF 
0950c     04 E4 85 F1 | 	sub	objptr, ##1540
09510     F2 02 02 F1 | 	add	_var02, objptr
09514     08 02 06 F1 | 	add	_var02, #8
09518     01 03 02 FB | 	rdlong	_var02, _var02
0951c     FE 03 0E F2 | 	cmp	_var02, #510 wz
09520     47 00 00 FF 
09524     7C E4 85 F1 | 	sub	objptr, ##36476
09528     58 00 90 5D |  if_ne	jmp	#LR__0840
0952c     50 00 00 FF 
09530     08 E5 05 F1 | 	add	objptr, ##41224
09534     F2 02 02 FB | 	rdlong	_var02, objptr
09538     03 02 66 F0 | 	shl	_var02, #3
0953c     03 00 00 FF 
09540     60 E5 85 F1 | 	sub	objptr, ##1888
09544     F2 02 02 F1 | 	add	_var02, objptr
09548     03 00 00 FF 
0954c     0C E5 05 F1 | 	add	objptr, ##1804
09550     F2 00 02 FB | 	rdlong	_var01, objptr
09554     01 01 62 FC | 	wrlong	_var01, _var02
09558     54 E4 05 F1 | 	add	objptr, #84
0955c     F2 02 02 FB | 	rdlong	_var02, objptr
09560     03 02 66 F0 | 	shl	_var02, #3
09564     03 00 00 FF 
09568     60 E5 85 F1 | 	sub	objptr, ##1888
0956c     F2 02 02 F1 | 	add	_var02, objptr
09570     04 02 06 F1 | 	add	_var02, #4
09574     01 01 68 FC | 	wrlong	#0, _var02
09578     4C 00 00 FF 
0957c     A8 E5 85 F1 | 	sub	objptr, ##39336
09580     64 00 90 FD | 	jmp	#LR__0841
09584                 | LR__0840
09584     50 00 00 FF 
09588     08 E5 05 F1 | 	add	objptr, ##41224
0958c     F2 02 02 FB | 	rdlong	_var02, objptr
09590     03 02 66 F0 | 	shl	_var02, #3
09594     03 00 00 FF 
09598     60 E5 85 F1 | 	sub	objptr, ##1888
0959c     F2 02 02 F1 | 	add	_var02, objptr
095a0     03 00 00 FF 
095a4     14 E5 05 F1 | 	add	objptr, ##1812
095a8     F2 00 02 FB | 	rdlong	_var01, objptr
095ac     01 01 62 FC | 	wrlong	_var01, _var02
095b0     4C E4 05 F1 | 	add	objptr, #76
095b4     F2 02 02 FB | 	rdlong	_var02, objptr
095b8     03 02 66 F0 | 	shl	_var02, #3
095bc     03 00 00 FF 
095c0     60 E5 85 F1 | 	sub	objptr, ##1888
095c4     F2 02 02 F1 | 	add	_var02, objptr
095c8     02 00 00 FF 
095cc     28 E5 85 F1 | 	sub	objptr, ##1320
095d0     F2 00 02 FB | 	rdlong	_var01, objptr
095d4     4A 00 00 FF 
095d8     80 E4 85 F1 | 	sub	objptr, ##38016
095dc     02 00 06 F1 | 	add	_var01, #2
095e0     04 02 06 F1 | 	add	_var02, #4
095e4     01 01 62 FC | 	wrlong	_var01, _var02
095e8                 | LR__0841
095e8                 | _do_gosub_ret
095e8     2D 00 64 FD | 	ret
095ec                 | 
095ec                 | ' 
095ec                 | ' 
095ec                 | ' sub do_for()
095ec                 | _do_for
095ec     01 4A 05 F6 | 	mov	COUNT_, #1
095f0     A8 00 A0 FD | 	call	#pushregs_
095f4     10 F0 07 F1 | 	add	ptra, #16
095f8     50 00 00 FF 
095fc     04 E5 05 F1 | 	add	objptr, ##41220
09600     F2 12 02 FB | 	rdlong	arg01, objptr
09604     01 12 06 F1 | 	add	arg01, #1
09608     F2 12 62 FC | 	wrlong	arg01, objptr
0960c     50 00 00 FF 
09610     04 E5 85 F1 | 	sub	objptr, ##41220
09614     40 24 B0 FD | 	call	#_pop
09618     A7 FA 61 FC | 	wrlong	result1, fp
0961c     04 4E 05 F1 | 	add	fp, #4
09620     A7 FC 61 FC | 	wrlong	result2, fp
09624     04 4E 05 F1 | 	add	fp, #4
09628     A7 FE 61 FC | 	wrlong	result3, fp
0962c     08 4E 85 F1 | 	sub	fp, #8
09630     50 00 00 FF 
09634     04 E5 05 F1 | 	add	objptr, ##41220
09638     F2 12 02 FB | 	rdlong	arg01, objptr
0963c     09 1F 02 F6 | 	mov	local01, arg01
09640     02 1E 66 F0 | 	shl	local01, #2
09644     09 1F 02 F1 | 	add	local01, arg01
09648     02 1E 66 F0 | 	shl	local01, #2
0964c     06 00 00 FF 
09650     70 E4 85 F1 | 	sub	objptr, ##3184
09654     F2 1E 02 F1 | 	add	local01, objptr
09658     A7 12 02 FB | 	rdlong	arg01, fp
0965c     08 1E 06 F1 | 	add	local01, #8
09660     0F 13 62 FC | 	wrlong	arg01, local01
09664     4A 00 00 FF 
09668     94 E4 85 F1 | 	sub	objptr, ##38036
0966c     E8 23 B0 FD | 	call	#_pop
09670     A7 FA 61 FC | 	wrlong	result1, fp
09674     04 4E 05 F1 | 	add	fp, #4
09678     A7 FC 61 FC | 	wrlong	result2, fp
0967c     04 4E 05 F1 | 	add	fp, #4
09680     A7 FE 61 FC | 	wrlong	result3, fp
09684     08 4E 85 F1 | 	sub	fp, #8
09688     50 00 00 FF 
0968c     04 E5 05 F1 | 	add	objptr, ##41220
09690     F2 12 02 FB | 	rdlong	arg01, objptr
09694     09 1F 02 F6 | 	mov	local01, arg01
09698     02 1E 66 F0 | 	shl	local01, #2
0969c     09 1F 02 F1 | 	add	local01, arg01
096a0     02 1E 66 F0 | 	shl	local01, #2
096a4     06 00 00 FF 
096a8     70 E4 85 F1 | 	sub	objptr, ##3184
096ac     F2 1E 02 F1 | 	add	local01, objptr
096b0     A7 12 02 F6 | 	mov	arg01, fp
096b4     4A 00 00 FF 
096b8     94 E4 85 F1 | 	sub	objptr, ##38036
096bc     34 C5 B0 FD | 	call	#_converttoint
096c0     FD 12 02 F6 | 	mov	arg01, result1
096c4     0C 1E 06 F1 | 	add	local01, #12
096c8     0F 13 62 FC | 	wrlong	arg01, local01
096cc     88 23 B0 FD | 	call	#_pop
096d0     A7 FA 61 FC | 	wrlong	result1, fp
096d4     04 4E 05 F1 | 	add	fp, #4
096d8     A7 FC 61 FC | 	wrlong	result2, fp
096dc     04 4E 05 F1 | 	add	fp, #4
096e0     A7 FE 61 FC | 	wrlong	result3, fp
096e4     08 4E 85 F1 | 	sub	fp, #8
096e8     50 00 00 FF 
096ec     04 E5 05 F1 | 	add	objptr, ##41220
096f0     F2 12 02 FB | 	rdlong	arg01, objptr
096f4     09 1F 02 F6 | 	mov	local01, arg01
096f8     02 1E 66 F0 | 	shl	local01, #2
096fc     09 1F 02 F1 | 	add	local01, arg01
09700     02 1E 66 F0 | 	shl	local01, #2
09704     06 00 00 FF 
09708     70 E4 85 F1 | 	sub	objptr, ##3184
0970c     F2 1E 02 F1 | 	add	local01, objptr
09710     A7 12 02 F6 | 	mov	arg01, fp
09714     4A 00 00 FF 
09718     94 E4 85 F1 | 	sub	objptr, ##38036
0971c     D4 C4 B0 FD | 	call	#_converttoint
09720     10 1E 06 F1 | 	add	local01, #16
09724     0F FB 61 FC | 	wrlong	result1, local01
09728                 | ' fortop+=1
09728                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
09728                 | ' 'if i> maxfor then printerror(36) : return
09728                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
09728                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
09728                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
09728                 | ' if compiledline(lineptr_e).result_type=token_end then
09728     4A 00 00 FF 
0972c     80 E4 05 F1 | 	add	objptr, ##38016
09730     F2 12 02 FB | 	rdlong	arg01, objptr
09734     09 1F 02 F6 | 	mov	local01, arg01
09738     01 1E 66 F0 | 	shl	local01, #1
0973c     09 1F 02 F1 | 	add	local01, arg01
09740     02 1E 66 F0 | 	shl	local01, #2
09744     03 00 00 FF 
09748     04 E4 85 F1 | 	sub	objptr, ##1540
0974c     F2 1E 02 F1 | 	add	local01, objptr
09750     08 1E 06 F1 | 	add	local01, #8
09754     0F 1F 02 FB | 	rdlong	local01, local01
09758     FE 1F 0E F2 | 	cmp	local01, #510 wz
0975c     47 00 00 FF 
09760     7C E4 85 F1 | 	sub	objptr, ##36476
09764     70 00 90 5D |  if_ne	jmp	#LR__0850
09768     50 00 00 FF 
0976c     04 E5 05 F1 | 	add	objptr, ##41220
09770     F2 12 02 FB | 	rdlong	arg01, objptr
09774     09 1F 02 F6 | 	mov	local01, arg01
09778     02 1E 66 F0 | 	shl	local01, #2
0977c     09 1F 02 F1 | 	add	local01, arg01
09780     02 1E 66 F0 | 	shl	local01, #2
09784     06 00 00 FF 
09788     70 E4 85 F1 | 	sub	objptr, ##3184
0978c     F2 1E 02 F1 | 	add	local01, objptr
09790     06 00 00 FF 
09794     20 E4 05 F1 | 	add	objptr, ##3104
09798     F2 12 02 FB | 	rdlong	arg01, objptr
0979c     0F 13 62 FC | 	wrlong	arg01, local01
097a0     50 E4 05 F1 | 	add	objptr, #80
097a4     F2 12 02 FB | 	rdlong	arg01, objptr
097a8     09 1F 02 F6 | 	mov	local01, arg01
097ac     02 1E 66 F0 | 	shl	local01, #2
097b0     09 1F 02 F1 | 	add	local01, arg01
097b4     02 1E 66 F0 | 	shl	local01, #2
097b8     06 00 00 FF 
097bc     70 E4 85 F1 | 	sub	objptr, ##3184
097c0     F2 1E 02 F1 | 	add	local01, objptr
097c4     04 1E 06 F1 | 	add	local01, #4
097c8     0F 01 68 FC | 	wrlong	#0, local01
097cc     4A 00 00 FF 
097d0     94 E4 85 F1 | 	sub	objptr, ##38036
097d4     78 00 90 FD | 	jmp	#LR__0851
097d8                 | LR__0850
097d8     50 00 00 FF 
097dc     04 E5 05 F1 | 	add	objptr, ##41220
097e0     F2 12 02 FB | 	rdlong	arg01, objptr
097e4     09 1F 02 F6 | 	mov	local01, arg01
097e8     02 1E 66 F0 | 	shl	local01, #2
097ec     09 1F 02 F1 | 	add	local01, arg01
097f0     02 1E 66 F0 | 	shl	local01, #2
097f4     06 00 00 FF 
097f8     70 E4 85 F1 | 	sub	objptr, ##3184
097fc     F2 1E 02 F1 | 	add	local01, objptr
09800     06 00 00 FF 
09804     28 E4 05 F1 | 	add	objptr, ##3112
09808     F2 12 02 FB | 	rdlong	arg01, objptr
0980c     0F 13 62 FC | 	wrlong	arg01, local01
09810     48 E4 05 F1 | 	add	objptr, #72
09814     F2 12 02 FB | 	rdlong	arg01, objptr
09818     09 1F 02 F6 | 	mov	local01, arg01
0981c     02 1E 66 F0 | 	shl	local01, #2
09820     09 1F 02 F1 | 	add	local01, arg01
09824     02 1E 66 F0 | 	shl	local01, #2
09828     06 00 00 FF 
0982c     70 E4 85 F1 | 	sub	objptr, ##3184
09830     F2 1E 02 F1 | 	add	local01, objptr
09834     14 E4 85 F1 | 	sub	objptr, #20
09838     F2 12 02 FB | 	rdlong	arg01, objptr
0983c     4A 00 00 FF 
09840     80 E4 85 F1 | 	sub	objptr, ##38016
09844     01 12 06 F1 | 	add	arg01, #1
09848     04 1E 06 F1 | 	add	local01, #4
0984c     0F 13 62 FC | 	wrlong	arg01, local01
09850                 | LR__0851
09850     A7 F0 03 F6 | 	mov	ptra, fp
09854     B2 00 A0 FD | 	call	#popregs_
09858                 | _do_for_ret
09858     2D 00 64 FD | 	ret
0985c                 | 
0985c                 | ' 
0985c                 | ' ' now do_next todo
0985c                 | ' 
0985c                 | ' sub do_return()
0985c                 | _do_return
0985c                 | ' if gosubtop>0 then
0985c     50 00 00 FF 
09860     08 E5 05 F1 | 	add	objptr, ##41224
09864     F2 00 02 FB | 	rdlong	_var01, objptr
09868     50 00 00 FF 
0986c     08 E5 85 F1 | 	sub	objptr, ##41224
09870     01 00 56 F2 | 	cmps	_var01, #1 wc
09874     8C 00 90 CD |  if_b	jmp	#LR__0860
09878     50 00 00 FF 
0987c     08 E5 05 F1 | 	add	objptr, ##41224
09880     F2 00 02 FB | 	rdlong	_var01, objptr
09884     03 00 66 F0 | 	shl	_var01, #3
09888     03 00 00 FF 
0988c     60 E5 85 F1 | 	sub	objptr, ##1888
09890     F2 00 02 F1 | 	add	_var01, objptr
09894     00 01 02 FB | 	rdlong	_var01, _var01
09898     03 00 00 FF 
0989c     0C E5 05 F1 | 	add	objptr, ##1804
098a0     F2 00 62 FC | 	wrlong	_var01, objptr
098a4     54 E4 05 F1 | 	add	objptr, #84
098a8     F2 00 02 FB | 	rdlong	_var01, objptr
098ac     03 00 66 F0 | 	shl	_var01, #3
098b0     03 00 00 FF 
098b4     60 E5 85 F1 | 	sub	objptr, ##1888
098b8     F2 00 02 F1 | 	add	_var01, objptr
098bc     04 00 06 F1 | 	add	_var01, #4
098c0     00 01 02 FB | 	rdlong	_var01, _var01
098c4     03 00 00 FF 
098c8     10 E5 05 F1 | 	add	objptr, ##1808
098cc     F2 00 62 FC | 	wrlong	_var01, objptr
098d0     06 00 00 FF 
098d4     3C E4 85 F1 | 	sub	objptr, ##3132
098d8     F2 00 02 FB | 	rdlong	_var01, objptr
098dc     01 00 86 F1 | 	sub	_var01, #1
098e0     04 E4 05 F1 | 	add	objptr, #4
098e4     F2 00 62 FC | 	wrlong	_var01, objptr
098e8     06 00 00 FF 
098ec     88 E4 05 F1 | 	add	objptr, ##3208
098f0     F2 00 02 FB | 	rdlong	_var01, objptr
098f4     01 00 86 F1 | 	sub	_var01, #1
098f8     F2 00 62 FC | 	wrlong	_var01, objptr
098fc     50 00 00 FF 
09900     08 E5 85 F1 | 	sub	objptr, ##41224
09904                 | LR__0860
09904                 | _do_return_ret
09904     2D 00 64 FD | 	ret
09908                 | 
09908                 | ' 
09908                 | ' sub do_pop()
09908                 | _do_pop
09908                 | ' if gosubtop>0 then  gosubtop -=1 
09908     50 00 00 FF 
0990c     08 E5 05 F1 | 	add	objptr, ##41224
09910     F2 00 02 FB | 	rdlong	_var01, objptr
09914     50 00 00 FF 
09918     08 E5 85 F1 | 	sub	objptr, ##41224
0991c     01 00 56 F2 | 	cmps	_var01, #1 wc
09920     50 00 00 3F 
09924     08 E5 05 31 |  if_ae	add	objptr, ##41224
09928     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
0992c     01 00 86 31 |  if_ae	sub	_var01, #1
09930     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
09934     50 00 00 3F 
09938     08 E5 85 31 |  if_ae	sub	objptr, ##41224
0993c                 | _do_pop_ret
0993c     2D 00 64 FD | 	ret
09940                 | 
09940                 | ' 
09940                 | ' sub do_next()
09940                 | _do_next
09940     04 4A 05 F6 | 	mov	COUNT_, #4
09944     A8 00 A0 FD | 	call	#pushregs_
09948     0C 21 B0 FD | 	call	#_pop
0994c     FD 1E 02 F6 | 	mov	local01, result1
09950     FE 20 02 F6 | 	mov	local02, result2
09954     FF 22 02 F6 | 	mov	local03, result3
09958                 | ' 
09958                 | ' t1=pop() :varnum=t1.result.uresult
09958                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
09958     50 00 00 FF 
0995c     04 E5 05 F1 | 	add	objptr, ##41220
09960     F2 12 02 FB | 	rdlong	arg01, objptr
09964     09 15 02 F6 | 	mov	arg02, arg01
09968     02 14 66 F0 | 	shl	arg02, #2
0996c     09 15 02 F1 | 	add	arg02, arg01
09970     02 14 66 F0 | 	shl	arg02, #2
09974     06 00 00 FF 
09978     70 E4 85 F1 | 	sub	objptr, ##3184
0997c     F2 14 02 F1 | 	add	arg02, objptr
09980     08 14 06 F1 | 	add	arg02, #8
09984     0A 15 02 FB | 	rdlong	arg02, arg02
09988     0F 15 0A F2 | 	cmp	arg02, local01 wz
0998c     4A 00 00 FF 
09990     94 E4 85 F1 | 	sub	objptr, ##38036
09994     0C 00 90 AD |  if_e	jmp	#LR__0870
09998     25 12 06 F6 | 	mov	arg01, #37
0999c     B0 3B B1 FD | 	call	#_printerror
099a0     54 03 90 FD | 	jmp	#LR__0877
099a4                 | LR__0870
099a4                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
099a4     0F 15 02 F6 | 	mov	arg02, local01
099a8     04 14 66 F0 | 	shl	arg02, #4
099ac     14 00 00 FF 
099b0     F8 E5 05 F1 | 	add	objptr, ##10744
099b4     F2 14 02 F1 | 	add	arg02, objptr
099b8     0C 14 06 F1 | 	add	arg02, #12
099bc     0A 15 02 FB | 	rdlong	arg02, arg02
099c0     1E 14 0E F2 | 	cmp	arg02, #30 wz
099c4     14 00 00 FF 
099c8     F8 E5 85 F1 | 	sub	objptr, ##10744
099cc     54 00 90 5D |  if_ne	jmp	#LR__0871
099d0     0F 15 02 F6 | 	mov	arg02, local01
099d4     04 14 66 F0 | 	shl	arg02, #4
099d8     14 00 00 FF 
099dc     F8 E5 05 F1 | 	add	objptr, ##10744
099e0     F2 14 02 F1 | 	add	arg02, objptr
099e4     0C 14 06 F1 | 	add	arg02, #12
099e8     0A 39 68 FC | 	wrlong	#28, arg02
099ec     0F 25 02 F6 | 	mov	local04, local01
099f0     04 24 66 F0 | 	shl	local04, #4
099f4     F2 24 02 F1 | 	add	local04, objptr
099f8     0F 13 02 F6 | 	mov	arg01, local01
099fc     04 12 66 F0 | 	shl	arg01, #4
09a00     F2 12 02 F1 | 	add	arg01, objptr
09a04     04 12 06 F1 | 	add	arg01, #4
09a08     09 13 02 FB | 	rdlong	arg01, arg01
09a0c     14 00 00 FF 
09a10     F8 E5 85 F1 | 	sub	objptr, ##10744
09a14     01 14 06 F6 | 	mov	arg02, #1
09a18     48 A1 B1 FD | 	call	#__system___float_tointeger
09a1c     04 24 06 F1 | 	add	local04, #4
09a20     12 FB 61 FC | 	wrlong	result1, local04
09a24                 | LR__0871
09a24     50 00 00 FF 
09a28     04 E5 05 F1 | 	add	objptr, ##41220
09a2c     F2 12 02 FB | 	rdlong	arg01, objptr
09a30     09 25 02 F6 | 	mov	local04, arg01
09a34     02 24 66 F0 | 	shl	local04, #2
09a38     09 25 02 F1 | 	add	local04, arg01
09a3c     02 24 66 F0 | 	shl	local04, #2
09a40     06 00 00 FF 
09a44     70 E4 85 F1 | 	sub	objptr, ##3184
09a48     F2 24 02 F1 | 	add	local04, objptr
09a4c     0C 24 06 F1 | 	add	local04, #12
09a50     12 25 02 FB | 	rdlong	local04, local04
09a54     0F 13 02 F6 | 	mov	arg01, local01
09a58     04 12 66 F0 | 	shl	arg01, #4
09a5c     35 00 00 FF 
09a60     9C E4 85 F1 | 	sub	objptr, ##27292
09a64     F2 12 02 F1 | 	add	arg01, objptr
09a68     0F FF 01 F6 | 	mov	result3, local01
09a6c     04 FE 65 F0 | 	shl	result3, #4
09a70     F2 FE 01 F1 | 	add	result3, objptr
09a74     04 FE 05 F1 | 	add	result3, #4
09a78     FF FE 01 FB | 	rdlong	result3, result3
09a7c     12 FF 01 F1 | 	add	result3, local04
09a80     04 12 06 F1 | 	add	arg01, #4
09a84     09 FF 61 FC | 	wrlong	result3, arg01
09a88                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
09a88                 | ' if fortable(fortop).stepval>=0 then
09a88     3B 00 00 FF 
09a8c     0C E5 05 F1 | 	add	objptr, ##30476
09a90     F2 12 02 FB | 	rdlong	arg01, objptr
09a94     09 25 02 F6 | 	mov	local04, arg01
09a98     02 24 66 F0 | 	shl	local04, #2
09a9c     09 25 02 F1 | 	add	local04, arg01
09aa0     02 24 66 F0 | 	shl	local04, #2
09aa4     06 00 00 FF 
09aa8     70 E4 85 F1 | 	sub	objptr, ##3184
09aac     F2 24 02 F1 | 	add	local04, objptr
09ab0     0C 24 06 F1 | 	add	local04, #12
09ab4     12 25 02 FB | 	rdlong	local04, local04
09ab8     00 24 56 F2 | 	cmps	local04, #0 wc
09abc     4A 00 00 FF 
09ac0     94 E4 85 F1 | 	sub	objptr, ##38036
09ac4     78 00 90 CD |  if_b	jmp	#LR__0872
09ac8                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
09ac8     04 1E 66 F0 | 	shl	local01, #4
09acc     14 00 00 FF 
09ad0     F8 E5 05 F1 | 	add	objptr, ##10744
09ad4     F2 1E 02 F1 | 	add	local01, objptr
09ad8     3B 00 00 FF 
09adc     0C E5 05 F1 | 	add	objptr, ##30476
09ae0     F2 24 02 FB | 	rdlong	local04, objptr
09ae4     12 13 02 F6 | 	mov	arg01, local04
09ae8     02 12 66 F0 | 	shl	arg01, #2
09aec     12 13 02 F1 | 	add	arg01, local04
09af0     02 12 66 F0 | 	shl	arg01, #2
09af4     06 00 00 FF 
09af8     70 E4 85 F1 | 	sub	objptr, ##3184
09afc     F2 12 02 F1 | 	add	arg01, objptr
09b00     04 1E 06 F1 | 	add	local01, #4
09b04     0F 25 02 FB | 	rdlong	local04, local01
09b08     10 12 06 F1 | 	add	arg01, #16
09b0c     09 13 02 FB | 	rdlong	arg01, arg01
09b10     09 25 5A F2 | 	cmps	local04, arg01 wcz
09b14     4A 00 00 FF 
09b18     94 E4 85 F1 | 	sub	objptr, ##38036
09b1c     9C 00 90 ED |  if_be	jmp	#LR__0874
09b20     50 00 00 FF 
09b24     04 E5 05 F1 | 	add	objptr, ##41220
09b28     F2 24 02 FB | 	rdlong	local04, objptr
09b2c     01 24 86 F1 | 	sub	local04, #1
09b30     F2 24 62 FC | 	wrlong	local04, objptr
09b34     50 00 00 FF 
09b38     04 E5 85 F1 | 	sub	objptr, ##41220
09b3c     B8 01 90 FD | 	jmp	#LR__0877
09b40                 | LR__0872
09b40                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
09b40     0F 13 02 F6 | 	mov	arg01, local01
09b44     04 12 66 F0 | 	shl	arg01, #4
09b48     14 00 00 FF 
09b4c     F8 E5 05 F1 | 	add	objptr, ##10744
09b50     F2 12 02 F1 | 	add	arg01, objptr
09b54     3B 00 00 FF 
09b58     0C E5 05 F1 | 	add	objptr, ##30476
09b5c     F2 24 02 FB | 	rdlong	local04, objptr
09b60     12 1F 02 F6 | 	mov	local01, local04
09b64     02 1E 66 F0 | 	shl	local01, #2
09b68     12 1F 02 F1 | 	add	local01, local04
09b6c     02 1E 66 F0 | 	shl	local01, #2
09b70     06 00 00 FF 
09b74     70 E4 85 F1 | 	sub	objptr, ##3184
09b78     F2 1E 02 F1 | 	add	local01, objptr
09b7c     04 12 06 F1 | 	add	arg01, #4
09b80     09 13 02 FB | 	rdlong	arg01, arg01
09b84     10 1E 06 F1 | 	add	local01, #16
09b88     0F 1F 02 FB | 	rdlong	local01, local01
09b8c     0F 13 52 F2 | 	cmps	arg01, local01 wc
09b90     4A 00 00 FF 
09b94     94 E4 85 F1 | 	sub	objptr, ##38036
09b98     20 00 90 3D |  if_ae	jmp	#LR__0873
09b9c     50 00 00 FF 
09ba0     04 E5 05 F1 | 	add	objptr, ##41220
09ba4     F2 24 02 FB | 	rdlong	local04, objptr
09ba8     01 24 86 F1 | 	sub	local04, #1
09bac     F2 24 62 FC | 	wrlong	local04, objptr
09bb0     50 00 00 FF 
09bb4     04 E5 85 F1 | 	sub	objptr, ##41220
09bb8     3C 01 90 FD | 	jmp	#LR__0877
09bbc                 | LR__0873
09bbc                 | LR__0874
09bbc                 | ' ' if not returned, goto pointer 
09bbc                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
09bbc     50 00 00 FF 
09bc0     E8 E4 05 F1 | 	add	objptr, ##41192
09bc4     F2 24 02 FB | 	rdlong	local04, objptr
09bc8     50 00 00 FF 
09bcc     E8 E4 85 F1 | 	sub	objptr, ##41192
09bd0     01 24 16 F2 | 	cmp	local04, #1 wc
09bd4     DC 00 90 CD |  if_b	jmp	#LR__0875
09bd8     50 00 00 FF 
09bdc     04 E5 05 F1 | 	add	objptr, ##41220
09be0     F2 1E 02 FB | 	rdlong	local01, objptr
09be4     0F 25 02 F6 | 	mov	local04, local01
09be8     02 24 66 F0 | 	shl	local04, #2
09bec     0F 25 02 F1 | 	add	local04, local01
09bf0     02 24 66 F0 | 	shl	local04, #2
09bf4     06 00 00 FF 
09bf8     70 E4 85 F1 | 	sub	objptr, ##3184
09bfc     F2 24 02 F1 | 	add	local04, objptr
09c00     06 00 00 FF 
09c04     20 E4 05 F1 | 	add	objptr, ##3104
09c08     F2 1E 02 FB | 	rdlong	local01, objptr
09c0c     50 00 00 FF 
09c10     B4 E4 85 F1 | 	sub	objptr, ##41140
09c14     12 25 02 FB | 	rdlong	local04, local04
09c18     12 1F 0A F2 | 	cmp	local01, local04 wz
09c1c     94 00 90 AD |  if_e	jmp	#LR__0875
09c20     50 00 00 FF 
09c24     04 E5 05 F1 | 	add	objptr, ##41220
09c28     F2 1E 02 FB | 	rdlong	local01, objptr
09c2c     0F 25 02 F6 | 	mov	local04, local01
09c30     02 24 66 F0 | 	shl	local04, #2
09c34     0F 25 02 F1 | 	add	local04, local01
09c38     02 24 66 F0 | 	shl	local04, #2
09c3c     06 00 00 FF 
09c40     70 E4 85 F1 | 	sub	objptr, ##3184
09c44     F2 24 02 F1 | 	add	local04, objptr
09c48     12 25 02 FB | 	rdlong	local04, local04
09c4c     06 00 00 FF 
09c50     20 E4 05 F1 | 	add	objptr, ##3104
09c54     F2 24 62 FC | 	wrlong	local04, objptr
09c58     50 E4 05 F1 | 	add	objptr, #80
09c5c     F2 1E 02 FB | 	rdlong	local01, objptr
09c60     0F 25 02 F6 | 	mov	local04, local01
09c64     02 24 66 F0 | 	shl	local04, #2
09c68     0F 25 02 F1 | 	add	local04, local01
09c6c     02 24 66 F0 | 	shl	local04, #2
09c70     06 00 00 FF 
09c74     70 E4 85 F1 | 	sub	objptr, ##3184
09c78     F2 24 02 F1 | 	add	local04, objptr
09c7c     04 24 06 F1 | 	add	local04, #4
09c80     12 25 02 FB | 	rdlong	local04, local04
09c84     06 00 00 FF 
09c88     24 E4 05 F1 | 	add	objptr, ##3108
09c8c     F2 24 62 FC | 	wrlong	local04, objptr
09c90     06 00 00 FF 
09c94     3C E4 85 F1 | 	sub	objptr, ##3132
09c98     F2 24 02 FB | 	rdlong	local04, objptr
09c9c     01 24 86 F1 | 	sub	local04, #1
09ca0     04 E4 05 F1 | 	add	objptr, #4
09ca4     F2 24 62 FC | 	wrlong	local04, objptr
09ca8     4A 00 00 FF 
09cac     80 E4 85 F1 | 	sub	objptr, ##38016
09cb0     44 00 90 FD | 	jmp	#LR__0876
09cb4                 | LR__0875
09cb4     50 00 00 FF 
09cb8     04 E5 05 F1 | 	add	objptr, ##41220
09cbc     F2 24 02 FB | 	rdlong	local04, objptr
09cc0     12 1F 02 F6 | 	mov	local01, local04
09cc4     02 1E 66 F0 | 	shl	local01, #2
09cc8     12 1F 02 F1 | 	add	local01, local04
09ccc     02 1E 66 F0 | 	shl	local01, #2
09cd0     06 00 00 FF 
09cd4     70 E4 85 F1 | 	sub	objptr, ##3184
09cd8     F2 1E 02 F1 | 	add	local01, objptr
09cdc     04 1E 06 F1 | 	add	local01, #4
09ce0     0F 1F 02 FB | 	rdlong	local01, local01
09ce4     01 1E 86 F1 | 	sub	local01, #1
09ce8     14 E4 85 F1 | 	sub	objptr, #20
09cec     F2 1E 62 FC | 	wrlong	local01, objptr
09cf0     4A 00 00 FF 
09cf4     80 E4 85 F1 | 	sub	objptr, ##38016
09cf8                 | LR__0876
09cf8                 | LR__0877
09cf8     A7 F0 03 F6 | 	mov	ptra, fp
09cfc     B2 00 A0 FD | 	call	#popregs_
09d00                 | _do_next_ret
09d00     2D 00 64 FD | 	ret
09d04                 | 
09d04                 | ' 
09d04                 | ' 
09d04                 | ' function compile_next() as ulong
09d04                 | _compile_next
09d04     04 4A 05 F6 | 	mov	COUNT_, #4
09d08     A8 00 A0 FD | 	call	#pushregs_
09d0c     37 00 00 FF 
09d10     44 E4 05 F1 | 	add	objptr, ##28228
09d14     F2 12 02 FB | 	rdlong	arg01, objptr
09d18     03 12 66 F0 | 	shl	arg01, #3
09d1c     02 00 00 FF 
09d20     38 E4 85 F1 | 	sub	objptr, ##1080
09d24     F2 12 02 F1 | 	add	arg01, objptr
09d28     09 1F 02 FB | 	rdlong	local01, arg01
09d2c                 | ' 
09d2c                 | ' varname$=lparts(ct).part$ 
09d2c                 | ' 'suffix$=right$(varname$,1)
09d2c                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
09d2c                 | ' if varnum=0 then compile_error(35)  : return 35
09d2c     04 E4 85 F1 | 	sub	objptr, #4
09d30     F2 14 0A FB | 	rdlong	arg02, objptr wz
09d34     35 00 00 FF 
09d38     08 E4 85 F1 | 	sub	objptr, ##27144
09d3c     10 00 90 5D |  if_ne	jmp	#LR__0880
09d40     23 12 06 F6 | 	mov	arg01, #35
09d44     D8 DD BF FD | 	call	#_compile_error
09d48     23 FA 05 F6 | 	mov	result1, #35
09d4c     58 01 90 FD | 	jmp	#LR__0884
09d50                 | LR__0880
09d50     01 20 66 F6 | 	neg	local02, #1
09d54                 | ' j=-1
09d54                 | ' for i=0 to varnum-1
09d54     00 22 06 F6 | 	mov	local03, #0
09d58     35 00 00 FF 
09d5c     08 E4 05 F1 | 	add	objptr, ##27144
09d60     F2 24 02 FB | 	rdlong	local04, objptr
09d64     35 00 00 FF 
09d68     08 E4 85 F1 | 	sub	objptr, ##27144
09d6c                 | LR__0881
09d6c     12 23 12 F2 | 	cmp	local03, local04 wc
09d70     38 00 90 3D |  if_ae	jmp	#LR__0882
09d74                 | '   if variables(i).name=varname$ then j=i : exit
09d74     11 15 02 F6 | 	mov	arg02, local03
09d78     04 14 66 F0 | 	shl	arg02, #4
09d7c     14 00 00 FF 
09d80     F8 E5 05 F1 | 	add	objptr, ##10744
09d84     F2 14 02 F1 | 	add	arg02, objptr
09d88     0A 13 02 FB | 	rdlong	arg01, arg02
09d8c     0F 15 02 F6 | 	mov	arg02, local01
09d90     14 00 00 FF 
09d94     F8 E5 85 F1 | 	sub	objptr, ##10744
09d98     74 6D B1 FD | 	call	#__system___string_cmp
09d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
09da0     11 21 02 A6 |  if_e	mov	local02, local03
09da4     01 22 06 51 |  if_ne	add	local03, #1
09da8     C0 FF 9F 5D |  if_ne	jmp	#LR__0881
09dac                 | LR__0882
09dac                 | ' if j=-1 then compile_error(35) : return 35
09dac     FF FF 7F FF 
09db0     FF 21 0E F2 | 	cmp	local02, ##-1 wz
09db4     10 00 90 5D |  if_ne	jmp	#LR__0883
09db8     23 12 06 F6 | 	mov	arg01, #35
09dbc     60 DD BF FD | 	call	#_compile_error
09dc0     23 FA 05 F6 | 	mov	result1, #35
09dc4     E0 00 90 FD | 	jmp	#LR__0884
09dc8                 | LR__0883
09dc8     4A 00 00 FF 
09dcc     7C E4 05 F1 | 	add	objptr, ##38012
09dd0     F2 24 02 FB | 	rdlong	local04, objptr
09dd4     12 23 02 F6 | 	mov	local03, local04
09dd8     01 22 66 F0 | 	shl	local03, #1
09ddc     12 23 02 F1 | 	add	local03, local04
09de0     02 22 66 F0 | 	shl	local03, #2
09de4     03 00 00 FF 
09de8     00 E4 85 F1 | 	sub	objptr, ##1536
09dec     F2 22 02 F1 | 	add	local03, objptr
09df0     08 22 06 F1 | 	add	local03, #8
09df4     11 39 68 FC | 	wrlong	#28, local03
09df8     03 00 00 FF 
09dfc     00 E4 05 F1 | 	add	objptr, ##1536
09e00     F2 24 02 FB | 	rdlong	local04, objptr
09e04     12 23 02 F6 | 	mov	local03, local04
09e08     01 22 66 F0 | 	shl	local03, #1
09e0c     12 23 02 F1 | 	add	local03, local04
09e10     02 22 66 F0 | 	shl	local03, #2
09e14     03 00 00 FF 
09e18     00 E4 85 F1 | 	sub	objptr, ##1536
09e1c     F2 22 02 F1 | 	add	local03, objptr
09e20     11 21 62 FC | 	wrlong	local02, local03
09e24     03 00 00 FF 
09e28     00 E4 05 F1 | 	add	objptr, ##1536
09e2c     F2 24 02 FB | 	rdlong	local04, objptr
09e30     01 24 06 F1 | 	add	local04, #1
09e34     F2 24 62 FC | 	wrlong	local04, objptr
09e38     12 23 02 F6 | 	mov	local03, local04
09e3c     01 22 66 F0 | 	shl	local03, #1
09e40     12 23 02 F1 | 	add	local03, local04
09e44     02 22 66 F0 | 	shl	local03, #2
09e48     03 00 00 FF 
09e4c     00 E4 85 F1 | 	sub	objptr, ##1536
09e50     F2 22 02 F1 | 	add	local03, objptr
09e54     08 22 06 F1 | 	add	local03, #8
09e58     11 97 68 FC | 	wrlong	#75, local03
09e5c     03 00 00 FF 
09e60     00 E4 05 F1 | 	add	objptr, ##1536
09e64     F2 24 02 FB | 	rdlong	local04, objptr
09e68     12 23 02 F6 | 	mov	local03, local04
09e6c     01 22 66 F0 | 	shl	local03, #1
09e70     12 23 02 F1 | 	add	local03, local04
09e74     02 22 66 F0 | 	shl	local03, #2
09e78     03 00 00 FF 
09e7c     00 E4 85 F1 | 	sub	objptr, ##1536
09e80     F2 22 02 F1 | 	add	local03, objptr
09e84     11 01 68 FC | 	wrlong	#0, local03
09e88     03 00 00 FF 
09e8c     00 E4 05 F1 | 	add	objptr, ##1536
09e90     F2 24 02 FB | 	rdlong	local04, objptr
09e94     01 24 06 F1 | 	add	local04, #1
09e98     F2 24 62 FC | 	wrlong	local04, objptr
09e9c     4A 00 00 FF 
09ea0     7C E4 85 F1 | 	sub	objptr, ##38012
09ea4                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
09ea4                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
09ea4                 | ' return 0
09ea4     00 FA 05 F6 | 	mov	result1, #0
09ea8                 | LR__0884
09ea8     A7 F0 03 F6 | 	mov	ptra, fp
09eac     B2 00 A0 FD | 	call	#popregs_
09eb0                 | _compile_next_ret
09eb0     2D 00 64 FD | 	ret
09eb4                 | 
09eb4                 | ' 
09eb4                 | ' 
09eb4                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
09eb4                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
09eb4                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
09eb4                 | ' 
09eb4                 | ' function compile_gosub() as ulong
09eb4                 | _compile_gosub
09eb4     01 4A 05 F6 | 	mov	COUNT_, #1
09eb8     A8 00 A0 FD | 	call	#pushregs_
09ebc     4A 00 00 FF 
09ec0     7C E4 05 F1 | 	add	objptr, ##38012
09ec4     F2 1E 02 FB | 	rdlong	local01, objptr
09ec8     0F FB 01 F6 | 	mov	result1, local01
09ecc     01 FA 65 F0 | 	shl	result1, #1
09ed0     0F FB 01 F1 | 	add	result1, local01
09ed4     02 FA 65 F0 | 	shl	result1, #2
09ed8     03 00 00 FF 
09edc     00 E4 85 F1 | 	sub	objptr, ##1536
09ee0     F2 FA 01 F1 | 	add	result1, objptr
09ee4     08 FA 05 F1 | 	add	result1, #8
09ee8     FD 52 69 FC | 	wrlong	#169, result1
09eec     03 00 00 FF 
09ef0     00 E4 05 F1 | 	add	objptr, ##1536
09ef4     F2 1E 02 FB | 	rdlong	local01, objptr
09ef8     01 1E 06 F1 | 	add	local01, #1
09efc     F2 1E 62 FC | 	wrlong	local01, objptr
09f00     4A 00 00 FF 
09f04     7C E4 85 F1 | 	sub	objptr, ##38012
09f08     10 00 B0 FD | 	call	#_compile_goto
09f0c                 | ' 
09f0c                 | ' compiledline(lineptr).result_type=token_gosub
09f0c                 | ' lineptr+=1
09f0c                 | ' compile_goto()
09f0c                 | ' return 0
09f0c     00 FA 05 F6 | 	mov	result1, #0
09f10     A7 F0 03 F6 | 	mov	ptra, fp
09f14     B2 00 A0 FD | 	call	#popregs_
09f18                 | _compile_gosub_ret
09f18     2D 00 64 FD | 	ret
09f1c                 | 
09f1c                 | ' 
09f1c                 | ' function compile_goto( ) as ulong
09f1c                 | _compile_goto
09f1c     03 4A 05 F6 | 	mov	COUNT_, #3
09f20     A8 00 A0 FD | 	call	#pushregs_
09f24     34 F0 07 F1 | 	add	ptra, #52
09f28                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
09f28     37 00 00 FF 
09f2c     44 E4 05 F1 | 	add	objptr, ##28228
09f30     F2 16 02 FB | 	rdlong	arg03, objptr
09f34     03 16 66 F0 | 	shl	arg03, #3
09f38     02 00 00 FF 
09f3c     38 E4 85 F1 | 	sub	objptr, ##1080
09f40     F2 16 02 F1 | 	add	arg03, objptr
09f44     04 16 06 F1 | 	add	arg03, #4
09f48     0B 17 02 FB | 	rdlong	arg03, arg03
09f4c     01 00 00 FF 
09f50     00 16 0E F2 | 	cmp	arg03, ##512 wz
09f54     35 00 00 FF 
09f58     0C E4 85 F1 | 	sub	objptr, ##27148
09f5c     CC 02 90 5D |  if_ne	jmp	#LR__0895
09f60     37 00 00 FF 
09f64     44 E4 05 F1 | 	add	objptr, ##28228
09f68     F2 16 02 FB | 	rdlong	arg03, objptr
09f6c     01 16 06 F1 | 	add	arg03, #1
09f70     03 16 66 F0 | 	shl	arg03, #3
09f74     02 00 00 FF 
09f78     38 E4 85 F1 | 	sub	objptr, ##1080
09f7c     F2 16 02 F1 | 	add	arg03, objptr
09f80     04 16 06 F1 | 	add	arg03, #4
09f84     0B 17 02 FB | 	rdlong	arg03, arg03
09f88     FE 17 0E F2 | 	cmp	arg03, #510 wz
09f8c     35 00 00 FF 
09f90     0C E4 85 F1 | 	sub	objptr, ##27148
09f94     94 02 90 5D |  if_ne	jmp	#LR__0895
09f98     37 00 00 FF 
09f9c     44 E4 05 F1 | 	add	objptr, ##28228
09fa0     F2 16 02 FB | 	rdlong	arg03, objptr
09fa4     03 16 66 F0 | 	shl	arg03, #3
09fa8     02 00 00 FF 
09fac     38 E4 85 F1 | 	sub	objptr, ##1080
09fb0     F2 16 02 F1 | 	add	arg03, objptr
09fb4     0B 13 02 FB | 	rdlong	arg01, arg03
09fb8     00 14 06 F6 | 	mov	arg02, #0
09fbc     35 00 00 FF 
09fc0     0C E4 85 F1 | 	sub	objptr, ##27148
09fc4     4C 9D B1 FD | 	call	#__system____builtin_atoi
09fc8     04 4E 05 F1 | 	add	fp, #4
09fcc     A7 FA 61 FC | 	wrlong	result1, fp
09fd0     4A 00 00 FF 
09fd4     7C E4 05 F1 | 	add	objptr, ##38012
09fd8     F2 1E 02 FB | 	rdlong	local01, objptr
09fdc     0F 21 02 F6 | 	mov	local02, local01
09fe0     01 20 66 F0 | 	shl	local02, #1
09fe4     0F 21 02 F1 | 	add	local02, local01
09fe8     02 20 66 F0 | 	shl	local02, #2
09fec     03 00 00 FF 
09ff0     00 E4 85 F1 | 	sub	objptr, ##1536
09ff4     F2 20 02 F1 | 	add	local02, objptr
09ff8     08 20 06 F1 | 	add	local02, #8
09ffc     10 9D 68 FC | 	wrlong	#78, local02
0a000     03 00 00 FF 
0a004     08 E4 05 F1 | 	add	objptr, ##1544
0a008     F2 22 02 FB | 	rdlong	local03, objptr
0a00c     4A 00 00 FF 
0a010     84 E4 85 F1 | 	sub	objptr, ##38020
0a014     04 4E 05 F1 | 	add	fp, #4
0a018     A7 22 62 FC | 	wrlong	local03, fp
0a01c     08 4E 85 F1 | 	sub	fp, #8
0a020                 | ' 
0a020                 | '   gotoline=val%(lparts(ct).part$) 
0a020                 | '   compiledline(lineptr).result_type=token_fast_goto
0a020                 | ' ' now find a pointer to goto
0a020                 | '   gotoptr=programstart
0a020                 | '   do
0a020                 | LR__0890
0a020     10 4E 05 F1 | 	add	fp, #16
0a024     A7 12 02 F6 | 	mov	arg01, fp
0a028     08 4E 85 F1 | 	sub	fp, #8
0a02c     A7 14 02 FB | 	rdlong	arg02, fp
0a030     08 4E 85 F1 | 	sub	fp, #8
0a034     18 16 06 F6 | 	mov	arg03, #24
0a038     0B 00 00 FF 
0a03c     CC E4 05 F1 | 	add	objptr, ##5836
0a040     64 5E B1 FD | 	call	#_psram_spin2_read1
0a044     0B 00 00 FF 
0a048     CC E4 85 F1 | 	sub	objptr, ##5836
0a04c                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0a04c                 | '     if gotoheader(0)<>$FFFFFFFF then
0a04c     10 4E 05 F1 | 	add	fp, #16
0a050     A7 22 02 FB | 	rdlong	local03, fp
0a054     10 4E 85 F1 | 	sub	fp, #16
0a058     FF FF 7F FF 
0a05c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0a060     24 00 90 AD |  if_e	jmp	#LR__0891
0a064     08 4E 05 F1 | 	add	fp, #8
0a068     A7 22 02 FB | 	rdlong	local03, fp
0a06c     04 4E 05 F1 | 	add	fp, #4
0a070     A7 22 62 FC | 	wrlong	local03, fp
0a074     18 4E 05 F1 | 	add	fp, #24
0a078     A7 22 02 FB | 	rdlong	local03, fp
0a07c     1C 4E 85 F1 | 	sub	fp, #28
0a080     A7 22 62 FC | 	wrlong	local03, fp
0a084     08 4E 85 F1 | 	sub	fp, #8
0a088                 | LR__0891
0a088     24 4E 05 F1 | 	add	fp, #36
0a08c     A7 22 02 FB | 	rdlong	local03, fp
0a090     24 4E 85 F1 | 	sub	fp, #36
0a094     FF FF 3F FF 
0a098     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0a09c     10 4E 05 51 |  if_ne	add	fp, #16
0a0a0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0a0a4     10 4E 85 51 |  if_ne	sub	fp, #16
0a0a8     FF FF 7F 5F 
0a0ac     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0a0b0     1C 00 90 AD |  if_e	jmp	#LR__0892
0a0b4     10 4E 05 F1 | 	add	fp, #16
0a0b8     A7 22 02 FB | 	rdlong	local03, fp
0a0bc     0C 4E 85 F1 | 	sub	fp, #12
0a0c0     A7 20 02 FB | 	rdlong	local02, fp
0a0c4     04 4E 85 F1 | 	sub	fp, #4
0a0c8     10 23 0A F2 | 	cmp	local03, local02 wz
0a0cc     50 FF 9F 5D |  if_ne	jmp	#LR__0890
0a0d0                 | LR__0892
0a0d0                 | '   if gotoheader(0)=gotoline then
0a0d0     10 4E 05 F1 | 	add	fp, #16
0a0d4     A7 22 02 FB | 	rdlong	local03, fp
0a0d8     0C 4E 85 F1 | 	sub	fp, #12
0a0dc     A7 1E 02 FB | 	rdlong	local01, fp
0a0e0     04 4E 85 F1 | 	sub	fp, #4
0a0e4     0F 23 0A F2 | 	cmp	local03, local01 wz
0a0e8     7C 00 90 5D |  if_ne	jmp	#LR__0893
0a0ec     4A 00 00 FF 
0a0f0     7C E4 05 F1 | 	add	objptr, ##38012
0a0f4     F2 1E 02 FB | 	rdlong	local01, objptr
0a0f8     0F 21 02 F6 | 	mov	local02, local01
0a0fc     01 20 66 F0 | 	shl	local02, #1
0a100     0F 21 02 F1 | 	add	local02, local01
0a104     02 20 66 F0 | 	shl	local02, #2
0a108     03 00 00 FF 
0a10c     00 E4 85 F1 | 	sub	objptr, ##1536
0a110     F2 20 02 F1 | 	add	local02, objptr
0a114     0C 4E 05 F1 | 	add	fp, #12
0a118     A7 22 02 FB | 	rdlong	local03, fp
0a11c     10 23 62 FC | 	wrlong	local03, local02
0a120     03 00 00 FF 
0a124     00 E4 05 F1 | 	add	objptr, ##1536
0a128     F2 1E 02 FB | 	rdlong	local01, objptr
0a12c     0F 21 02 F6 | 	mov	local02, local01
0a130     01 20 66 F0 | 	shl	local02, #1
0a134     0F 21 02 F1 | 	add	local02, local01
0a138     02 20 66 F0 | 	shl	local02, #2
0a13c     03 00 00 FF 
0a140     00 E4 85 F1 | 	sub	objptr, ##1536
0a144     F2 20 02 F1 | 	add	local02, objptr
0a148     08 4E 85 F1 | 	sub	fp, #8
0a14c     A7 22 02 FB | 	rdlong	local03, fp
0a150     04 4E 85 F1 | 	sub	fp, #4
0a154     04 20 06 F1 | 	add	local02, #4
0a158     10 23 62 FC | 	wrlong	local03, local02
0a15c     47 00 00 FF 
0a160     7C E4 85 F1 | 	sub	objptr, ##36476
0a164     A4 00 90 FD | 	jmp	#LR__0894
0a168                 | LR__0893
0a168     4A 00 00 FF 
0a16c     7C E4 05 F1 | 	add	objptr, ##38012
0a170     F2 1E 02 FB | 	rdlong	local01, objptr
0a174     0F 21 02 F6 | 	mov	local02, local01
0a178     01 20 66 F0 | 	shl	local02, #1
0a17c     0F 21 02 F1 | 	add	local02, local01
0a180     02 20 66 F0 | 	shl	local02, #2
0a184     03 00 00 FF 
0a188     00 E4 85 F1 | 	sub	objptr, ##1536
0a18c     F2 20 02 F1 | 	add	local02, objptr
0a190     00 00 C0 FF 
0a194     10 01 68 FC | 	wrlong	##-2147483648, local02
0a198     03 00 00 FF 
0a19c     00 E4 05 F1 | 	add	objptr, ##1536
0a1a0     F2 1E 02 FB | 	rdlong	local01, objptr
0a1a4     0F 21 02 F6 | 	mov	local02, local01
0a1a8     01 20 66 F0 | 	shl	local02, #1
0a1ac     0F 21 02 F1 | 	add	local02, local01
0a1b0     02 20 66 F0 | 	shl	local02, #2
0a1b4     03 00 00 FF 
0a1b8     00 E4 85 F1 | 	sub	objptr, ##1536
0a1bc     F2 20 02 F1 | 	add	local02, objptr
0a1c0     04 4E 05 F1 | 	add	fp, #4
0a1c4     A7 22 02 FB | 	rdlong	local03, fp
0a1c8     04 4E 85 F1 | 	sub	fp, #4
0a1cc     04 20 06 F1 | 	add	local02, #4
0a1d0     10 23 62 FC | 	wrlong	local03, local02
0a1d4     03 00 00 FF 
0a1d8     00 E4 05 F1 | 	add	objptr, ##1536
0a1dc     F2 1E 02 FB | 	rdlong	local01, objptr
0a1e0     0F 21 02 F6 | 	mov	local02, local01
0a1e4     01 20 66 F0 | 	shl	local02, #1
0a1e8     0F 21 02 F1 | 	add	local02, local01
0a1ec     02 20 66 F0 | 	shl	local02, #2
0a1f0     03 00 00 FF 
0a1f4     00 E4 85 F1 | 	sub	objptr, ##1536
0a1f8     F2 20 02 F1 | 	add	local02, objptr
0a1fc     08 20 06 F1 | 	add	local02, #8
0a200     10 A7 68 FC | 	wrlong	#83, local02
0a204     47 00 00 FF 
0a208     7C E4 85 F1 | 	sub	objptr, ##36476
0a20c                 | LR__0894
0a20c     4A 00 00 FF 
0a210     7C E4 05 F1 | 	add	objptr, ##38012
0a214     F2 22 02 FB | 	rdlong	local03, objptr
0a218     01 22 06 F1 | 	add	local03, #1
0a21c     F2 22 62 FC | 	wrlong	local03, objptr
0a220     4A 00 00 FF 
0a224     7C E4 85 F1 | 	sub	objptr, ##38012
0a228     D0 00 90 FD | 	jmp	#LR__0896
0a22c                 | LR__0895
0a22c     DC 00 B0 FD | 	call	#_expr
0a230     30 4E 05 F1 | 	add	fp, #48
0a234     A7 9E 68 FC | 	wrlong	#79, fp
0a238     08 4E 85 F1 | 	sub	fp, #8
0a23c     A7 00 68 FC | 	wrlong	#0, fp
0a240     04 4E 05 F1 | 	add	fp, #4
0a244     A7 22 02 FB | 	rdlong	local03, fp
0a248     04 4E 05 F1 | 	add	fp, #4
0a24c     A7 1E 02 FB | 	rdlong	local01, fp
0a250     30 4E 85 F1 | 	sub	fp, #48
0a254     4A 00 00 FF 
0a258     7C E4 05 F1 | 	add	objptr, ##38012
0a25c     F2 20 02 FB | 	rdlong	local02, objptr
0a260     10 17 02 F6 | 	mov	arg03, local02
0a264     01 16 66 F0 | 	shl	arg03, #1
0a268     10 17 02 F1 | 	add	arg03, local02
0a26c     02 16 66 F0 | 	shl	arg03, #2
0a270     03 00 00 FF 
0a274     00 E4 85 F1 | 	sub	objptr, ##1536
0a278     F2 16 02 F1 | 	add	arg03, objptr
0a27c     0B 01 68 FC | 	wrlong	#0, arg03
0a280     03 00 00 FF 
0a284     00 E4 05 F1 | 	add	objptr, ##1536
0a288     F2 20 02 FB | 	rdlong	local02, objptr
0a28c     10 17 02 F6 | 	mov	arg03, local02
0a290     01 16 66 F0 | 	shl	arg03, #1
0a294     10 17 02 F1 | 	add	arg03, local02
0a298     02 16 66 F0 | 	shl	arg03, #2
0a29c     03 00 00 FF 
0a2a0     00 E4 85 F1 | 	sub	objptr, ##1536
0a2a4     F2 16 02 F1 | 	add	arg03, objptr
0a2a8     04 16 06 F1 | 	add	arg03, #4
0a2ac     0B 23 62 FC | 	wrlong	local03, arg03
0a2b0     03 00 00 FF 
0a2b4     00 E4 05 F1 | 	add	objptr, ##1536
0a2b8     F2 22 02 FB | 	rdlong	local03, objptr
0a2bc     11 21 02 F6 | 	mov	local02, local03
0a2c0     01 20 66 F0 | 	shl	local02, #1
0a2c4     11 21 02 F1 | 	add	local02, local03
0a2c8     02 20 66 F0 | 	shl	local02, #2
0a2cc     03 00 00 FF 
0a2d0     00 E4 85 F1 | 	sub	objptr, ##1536
0a2d4     F2 20 02 F1 | 	add	local02, objptr
0a2d8     08 20 06 F1 | 	add	local02, #8
0a2dc     10 1F 62 FC | 	wrlong	local01, local02
0a2e0     03 00 00 FF 
0a2e4     00 E4 05 F1 | 	add	objptr, ##1536
0a2e8     F2 22 02 FB | 	rdlong	local03, objptr
0a2ec     01 22 06 F1 | 	add	local03, #1
0a2f0     F2 22 62 FC | 	wrlong	local03, objptr
0a2f4     4A 00 00 FF 
0a2f8     7C E4 85 F1 | 	sub	objptr, ##38012
0a2fc                 | LR__0896
0a2fc                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
0a2fc                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
0a2fc                 | ' return 0
0a2fc     00 FA 05 F6 | 	mov	result1, #0
0a300     A7 F0 03 F6 | 	mov	ptra, fp
0a304     B2 00 A0 FD | 	call	#popregs_
0a308                 | _compile_goto_ret
0a308     2D 00 64 FD | 	ret
0a30c                 | 
0a30c                 | ' 
0a30c                 | ' 
0a30c                 | ' 
0a30c                 | ' 
0a30c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a30c                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
0a30c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a30c                 | ' 
0a30c                 | ' 
0a30c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a30c                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
0a30c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a30c                 | ' 
0a30c                 | ' 
0a30c                 | ' function expr() as integer 
0a30c                 | _expr
0a30c     07 4A 05 F6 | 	mov	COUNT_, #7
0a310     A8 00 A0 FD | 	call	#pushregs_
0a314                 | _expr_enter
0a314     37 00 00 FF 
0a318     44 E4 05 F1 | 	add	objptr, ##28228
0a31c     F2 24 02 FB | 	rdlong	local04, objptr
0a320     03 24 66 F0 | 	shl	local04, #3
0a324     02 00 00 FF 
0a328     38 E4 85 F1 | 	sub	objptr, ##1080
0a32c     F2 24 02 F1 | 	add	local04, objptr
0a330     04 24 06 F1 | 	add	local04, #4
0a334     12 27 02 FB | 	rdlong	local05, local04
0a338                 | ' 
0a338                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0a338     FE 27 0E F2 | 	cmp	local05, #510 wz
0a33c     35 00 00 FF 
0a340     0C E4 85 F1 | 	sub	objptr, ##27148
0a344     C4 00 90 5D |  if_ne	jmp	#LR__0900
0a348     1D 1E 06 F6 | 	mov	local01, #29
0a34c     FF 22 06 F6 | 	mov	local03, #255
0a350     0F 29 02 F6 | 	mov	local06, local01
0a354     10 2B 02 F6 | 	mov	local07, local02
0a358     11 1F 02 F6 | 	mov	local01, local03
0a35c     4A 00 00 FF 
0a360     7C E4 05 F1 | 	add	objptr, ##38012
0a364     F2 26 02 FB | 	rdlong	local05, objptr
0a368     13 25 02 F6 | 	mov	local04, local05
0a36c     01 24 66 F0 | 	shl	local04, #1
0a370     13 25 02 F1 | 	add	local04, local05
0a374     02 24 66 F0 | 	shl	local04, #2
0a378     03 00 00 FF 
0a37c     00 E4 85 F1 | 	sub	objptr, ##1536
0a380     F2 24 02 F1 | 	add	local04, objptr
0a384     12 29 62 FC | 	wrlong	local06, local04
0a388     03 00 00 FF 
0a38c     00 E4 05 F1 | 	add	objptr, ##1536
0a390     F2 28 02 FB | 	rdlong	local06, objptr
0a394     14 27 02 F6 | 	mov	local05, local06
0a398     01 26 66 F0 | 	shl	local05, #1
0a39c     14 27 02 F1 | 	add	local05, local06
0a3a0     02 26 66 F0 | 	shl	local05, #2
0a3a4     03 00 00 FF 
0a3a8     00 E4 85 F1 | 	sub	objptr, ##1536
0a3ac     F2 26 02 F1 | 	add	local05, objptr
0a3b0     04 26 06 F1 | 	add	local05, #4
0a3b4     13 2B 62 FC | 	wrlong	local07, local05
0a3b8     03 00 00 FF 
0a3bc     00 E4 05 F1 | 	add	objptr, ##1536
0a3c0     F2 2A 02 FB | 	rdlong	local07, objptr
0a3c4     15 29 02 F6 | 	mov	local06, local07
0a3c8     01 28 66 F0 | 	shl	local06, #1
0a3cc     15 29 02 F1 | 	add	local06, local07
0a3d0     02 28 66 F0 | 	shl	local06, #2
0a3d4     03 00 00 FF 
0a3d8     00 E4 85 F1 | 	sub	objptr, ##1536
0a3dc     F2 28 02 F1 | 	add	local06, objptr
0a3e0     08 28 06 F1 | 	add	local06, #8
0a3e4     14 1F 62 FC | 	wrlong	local01, local06
0a3e8     03 00 00 FF 
0a3ec     00 E4 05 F1 | 	add	objptr, ##1536
0a3f0     F2 28 02 FB | 	rdlong	local06, objptr
0a3f4     01 28 06 F1 | 	add	local06, #1
0a3f8     F2 28 62 FC | 	wrlong	local06, objptr
0a3fc     4A 00 00 FF 
0a400     7C E4 85 F1 | 	sub	objptr, ##38012
0a404     1D FA 05 F6 | 	mov	result1, #29
0a408     54 01 90 FD | 	jmp	#LR__0903
0a40c                 | LR__0900
0a40c     00 1E 06 F6 | 	mov	local01, #0
0a410     58 01 B0 FD | 	call	#_addsub
0a414     37 00 00 FF 
0a418     44 E4 05 F1 | 	add	objptr, ##28228
0a41c     F2 24 02 FB | 	rdlong	local04, objptr
0a420     03 24 66 F0 | 	shl	local04, #3
0a424     02 00 00 FF 
0a428     38 E4 85 F1 | 	sub	objptr, ##1080
0a42c     F2 24 02 F1 | 	add	local04, objptr
0a430     04 24 06 F1 | 	add	local04, #4
0a434     12 27 02 FB | 	rdlong	local05, local04
0a438                 | ' t3.result.uresult=0
0a438                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
0a438                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
0a438                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0a438     35 00 00 FF 
0a43c     0C E4 85 F1 | 	sub	objptr, ##27148
0a440                 | LR__0901
0a440     1B 26 0E F2 | 	cmp	local05, #27 wz
0a444     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
0a448     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
0a44c     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
0a450     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
0a454     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
0a458     00 01 90 5D |  if_ne	jmp	#LR__0902
0a45c     37 00 00 FF 
0a460     44 E4 05 F1 | 	add	objptr, ##28228
0a464     F2 28 02 FB | 	rdlong	local06, objptr
0a468     01 28 06 F1 | 	add	local06, #1
0a46c     F2 28 62 FC | 	wrlong	local06, objptr
0a470     37 00 00 FF 
0a474     44 E4 85 F1 | 	sub	objptr, ##28228
0a478     F0 00 B0 FD | 	call	#_addsub
0a47c     13 23 02 F6 | 	mov	local03, local05
0a480     0F 29 02 F6 | 	mov	local06, local01
0a484     10 2B 02 F6 | 	mov	local07, local02
0a488     11 27 02 F6 | 	mov	local05, local03
0a48c     4A 00 00 FF 
0a490     7C E4 05 F1 | 	add	objptr, ##38012
0a494     F2 24 02 FB | 	rdlong	local04, objptr
0a498     12 FB 01 F6 | 	mov	result1, local04
0a49c     01 FA 65 F0 | 	shl	result1, #1
0a4a0     12 FB 01 F1 | 	add	result1, local04
0a4a4     02 FA 65 F0 | 	shl	result1, #2
0a4a8     03 00 00 FF 
0a4ac     00 E4 85 F1 | 	sub	objptr, ##1536
0a4b0     F2 FA 01 F1 | 	add	result1, objptr
0a4b4     FD 28 62 FC | 	wrlong	local06, result1
0a4b8     03 00 00 FF 
0a4bc     00 E4 05 F1 | 	add	objptr, ##1536
0a4c0     F2 28 02 FB | 	rdlong	local06, objptr
0a4c4     14 25 02 F6 | 	mov	local04, local06
0a4c8     01 24 66 F0 | 	shl	local04, #1
0a4cc     14 25 02 F1 | 	add	local04, local06
0a4d0     02 24 66 F0 | 	shl	local04, #2
0a4d4     03 00 00 FF 
0a4d8     00 E4 85 F1 | 	sub	objptr, ##1536
0a4dc     F2 24 02 F1 | 	add	local04, objptr
0a4e0     04 24 06 F1 | 	add	local04, #4
0a4e4     12 2B 62 FC | 	wrlong	local07, local04
0a4e8     03 00 00 FF 
0a4ec     00 E4 05 F1 | 	add	objptr, ##1536
0a4f0     F2 2A 02 FB | 	rdlong	local07, objptr
0a4f4     15 29 02 F6 | 	mov	local06, local07
0a4f8     01 28 66 F0 | 	shl	local06, #1
0a4fc     15 29 02 F1 | 	add	local06, local07
0a500     02 28 66 F0 | 	shl	local06, #2
0a504     03 00 00 FF 
0a508     00 E4 85 F1 | 	sub	objptr, ##1536
0a50c     F2 28 02 F1 | 	add	local06, objptr
0a510     08 28 06 F1 | 	add	local06, #8
0a514     14 27 62 FC | 	wrlong	local05, local06
0a518     03 00 00 FF 
0a51c     00 E4 05 F1 | 	add	objptr, ##1536
0a520     F2 28 02 FB | 	rdlong	local06, objptr
0a524     01 28 06 F1 | 	add	local06, #1
0a528     F2 28 62 FC | 	wrlong	local06, objptr
0a52c     13 00 00 FF 
0a530     38 E4 85 F1 | 	sub	objptr, ##9784
0a534     F2 24 02 FB | 	rdlong	local04, objptr
0a538     03 24 66 F0 | 	shl	local04, #3
0a53c     02 00 00 FF 
0a540     38 E4 85 F1 | 	sub	objptr, ##1080
0a544     F2 24 02 F1 | 	add	local04, objptr
0a548     04 24 06 F1 | 	add	local04, #4
0a54c     12 27 02 FB | 	rdlong	local05, local04
0a550     35 00 00 FF 
0a554     0C E4 85 F1 | 	sub	objptr, ##27148
0a558     E4 FE 9F FD | 	jmp	#LR__0901
0a55c                 | LR__0902
0a55c                 | ' return 0  
0a55c     00 FA 05 F6 | 	mov	result1, #0
0a560                 | LR__0903
0a560     A7 F0 03 F6 | 	mov	ptra, fp
0a564     B2 00 A0 FD | 	call	#popregs_
0a568                 | _expr_ret
0a568     2D 00 64 FD | 	ret
0a56c                 | 
0a56c                 | ' 
0a56c                 | ' 
0a56c                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
0a56c                 | ' 
0a56c                 | ' function addsub() as integer 
0a56c                 | _addsub
0a56c     07 4A 05 F6 | 	mov	COUNT_, #7
0a570     A8 00 A0 FD | 	call	#pushregs_
0a574                 | _addsub_enter
0a574     00 1E 06 F6 | 	mov	local01, #0
0a578     50 01 B0 FD | 	call	#_muldiv
0a57c     37 00 00 FF 
0a580     44 E4 05 F1 | 	add	objptr, ##28228
0a584     F2 24 02 FB | 	rdlong	local04, objptr
0a588     03 24 66 F0 | 	shl	local04, #3
0a58c     02 00 00 FF 
0a590     38 E4 85 F1 | 	sub	objptr, ##1080
0a594     F2 24 02 F1 | 	add	local04, objptr
0a598     04 24 06 F1 | 	add	local04, #4
0a59c     12 27 02 FB | 	rdlong	local05, local04
0a5a0                 | ' t3.result.uresult=0
0a5a0                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
0a5a0                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
0a5a0                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0a5a0     35 00 00 FF 
0a5a4     0C E4 85 F1 | 	sub	objptr, ##27148
0a5a8                 | LR__0910
0a5a8     01 26 0E F2 | 	cmp	local05, #1 wz
0a5ac     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
0a5b0     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
0a5b4     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
0a5b8     00 01 90 5D |  if_ne	jmp	#LR__0911
0a5bc     37 00 00 FF 
0a5c0     44 E4 05 F1 | 	add	objptr, ##28228
0a5c4     F2 24 02 FB | 	rdlong	local04, objptr
0a5c8     01 24 06 F1 | 	add	local04, #1
0a5cc     F2 24 62 FC | 	wrlong	local04, objptr
0a5d0     37 00 00 FF 
0a5d4     44 E4 85 F1 | 	sub	objptr, ##28228
0a5d8     F0 00 B0 FD | 	call	#_muldiv
0a5dc     13 23 02 F6 | 	mov	local03, local05
0a5e0     0F 29 02 F6 | 	mov	local06, local01
0a5e4     10 2B 02 F6 | 	mov	local07, local02
0a5e8     11 27 02 F6 | 	mov	local05, local03
0a5ec     4A 00 00 FF 
0a5f0     7C E4 05 F1 | 	add	objptr, ##38012
0a5f4     F2 24 02 FB | 	rdlong	local04, objptr
0a5f8     12 FB 01 F6 | 	mov	result1, local04
0a5fc     01 FA 65 F0 | 	shl	result1, #1
0a600     12 FB 01 F1 | 	add	result1, local04
0a604     02 FA 65 F0 | 	shl	result1, #2
0a608     03 00 00 FF 
0a60c     00 E4 85 F1 | 	sub	objptr, ##1536
0a610     F2 FA 01 F1 | 	add	result1, objptr
0a614     FD 28 62 FC | 	wrlong	local06, result1
0a618     03 00 00 FF 
0a61c     00 E4 05 F1 | 	add	objptr, ##1536
0a620     F2 28 02 FB | 	rdlong	local06, objptr
0a624     14 25 02 F6 | 	mov	local04, local06
0a628     01 24 66 F0 | 	shl	local04, #1
0a62c     14 25 02 F1 | 	add	local04, local06
0a630     02 24 66 F0 | 	shl	local04, #2
0a634     03 00 00 FF 
0a638     00 E4 85 F1 | 	sub	objptr, ##1536
0a63c     F2 24 02 F1 | 	add	local04, objptr
0a640     04 24 06 F1 | 	add	local04, #4
0a644     12 2B 62 FC | 	wrlong	local07, local04
0a648     03 00 00 FF 
0a64c     00 E4 05 F1 | 	add	objptr, ##1536
0a650     F2 2A 02 FB | 	rdlong	local07, objptr
0a654     15 29 02 F6 | 	mov	local06, local07
0a658     01 28 66 F0 | 	shl	local06, #1
0a65c     15 29 02 F1 | 	add	local06, local07
0a660     02 28 66 F0 | 	shl	local06, #2
0a664     03 00 00 FF 
0a668     00 E4 85 F1 | 	sub	objptr, ##1536
0a66c     F2 28 02 F1 | 	add	local06, objptr
0a670     08 28 06 F1 | 	add	local06, #8
0a674     14 27 62 FC | 	wrlong	local05, local06
0a678     03 00 00 FF 
0a67c     00 E4 05 F1 | 	add	objptr, ##1536
0a680     F2 28 02 FB | 	rdlong	local06, objptr
0a684     01 28 06 F1 | 	add	local06, #1
0a688     F2 28 62 FC | 	wrlong	local06, objptr
0a68c     13 00 00 FF 
0a690     38 E4 85 F1 | 	sub	objptr, ##9784
0a694     F2 24 02 FB | 	rdlong	local04, objptr
0a698     03 24 66 F0 | 	shl	local04, #3
0a69c     02 00 00 FF 
0a6a0     38 E4 85 F1 | 	sub	objptr, ##1080
0a6a4     F2 24 02 F1 | 	add	local04, objptr
0a6a8     04 24 06 F1 | 	add	local04, #4
0a6ac     12 27 02 FB | 	rdlong	local05, local04
0a6b0     35 00 00 FF 
0a6b4     0C E4 85 F1 | 	sub	objptr, ##27148
0a6b8     EC FE 9F FD | 	jmp	#LR__0910
0a6bc                 | LR__0911
0a6bc                 | '   return 0
0a6bc     00 FA 05 F6 | 	mov	result1, #0
0a6c0     A7 F0 03 F6 | 	mov	ptra, fp
0a6c4     B2 00 A0 FD | 	call	#popregs_
0a6c8                 | _addsub_ret
0a6c8     2D 00 64 FD | 	ret
0a6cc                 | 
0a6cc                 | ' 
0a6cc                 | ' sub muldiv()
0a6cc                 | _muldiv
0a6cc     08 4A 05 F6 | 	mov	COUNT_, #8
0a6d0     A8 00 A0 FD | 	call	#pushregs_
0a6d4                 | _muldiv_enter
0a6d4     00 1E 06 F6 | 	mov	local01, #0
0a6d8     58 01 B0 FD | 	call	#_getvalue
0a6dc     37 00 00 FF 
0a6e0     44 E4 05 F1 | 	add	objptr, ##28228
0a6e4     F2 24 02 FB | 	rdlong	local04, objptr
0a6e8     03 24 66 F0 | 	shl	local04, #3
0a6ec     02 00 00 FF 
0a6f0     38 E4 85 F1 | 	sub	objptr, ##1080
0a6f4     F2 24 02 F1 | 	add	local04, objptr
0a6f8     04 24 06 F1 | 	add	local04, #4
0a6fc     12 27 02 FB | 	rdlong	local05, local04
0a700                 | ' t3.result.uresult=0
0a700                 | ' getvalue()    
0a700                 | ' op = lparts(ct).token
0a700                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0a700     35 00 00 FF 
0a704     0C E4 85 F1 | 	sub	objptr, ##27148
0a708                 | LR__0920
0a708     05 26 0E F2 | 	cmp	local05, #5 wz
0a70c     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
0a710     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
0a714     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
0a718     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
0a71c     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
0a720     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
0a724     00 01 90 5D |  if_ne	jmp	#LR__0921
0a728     37 00 00 FF 
0a72c     44 E4 05 F1 | 	add	objptr, ##28228
0a730     F2 24 02 FB | 	rdlong	local04, objptr
0a734     01 24 06 F1 | 	add	local04, #1
0a738     F2 24 62 FC | 	wrlong	local04, objptr
0a73c     37 00 00 FF 
0a740     44 E4 85 F1 | 	sub	objptr, ##28228
0a744     EC 00 B0 FD | 	call	#_getvalue
0a748     13 23 02 F6 | 	mov	local03, local05
0a74c     0F 29 02 F6 | 	mov	local06, local01
0a750     10 2B 02 F6 | 	mov	local07, local02
0a754     11 27 02 F6 | 	mov	local05, local03
0a758     4A 00 00 FF 
0a75c     7C E4 05 F1 | 	add	objptr, ##38012
0a760     F2 24 02 FB | 	rdlong	local04, objptr
0a764     12 2D 02 F6 | 	mov	local08, local04
0a768     01 2C 66 F0 | 	shl	local08, #1
0a76c     12 2D 02 F1 | 	add	local08, local04
0a770     02 2C 66 F0 | 	shl	local08, #2
0a774     03 00 00 FF 
0a778     00 E4 85 F1 | 	sub	objptr, ##1536
0a77c     F2 2C 02 F1 | 	add	local08, objptr
0a780     16 29 62 FC | 	wrlong	local06, local08
0a784     03 00 00 FF 
0a788     00 E4 05 F1 | 	add	objptr, ##1536
0a78c     F2 2C 02 FB | 	rdlong	local08, objptr
0a790     16 29 02 F6 | 	mov	local06, local08
0a794     01 28 66 F0 | 	shl	local06, #1
0a798     16 29 02 F1 | 	add	local06, local08
0a79c     02 28 66 F0 | 	shl	local06, #2
0a7a0     03 00 00 FF 
0a7a4     00 E4 85 F1 | 	sub	objptr, ##1536
0a7a8     F2 28 02 F1 | 	add	local06, objptr
0a7ac     04 28 06 F1 | 	add	local06, #4
0a7b0     14 2B 62 FC | 	wrlong	local07, local06
0a7b4     03 00 00 FF 
0a7b8     00 E4 05 F1 | 	add	objptr, ##1536
0a7bc     F2 2C 02 FB | 	rdlong	local08, objptr
0a7c0     16 2B 02 F6 | 	mov	local07, local08
0a7c4     01 2A 66 F0 | 	shl	local07, #1
0a7c8     16 2B 02 F1 | 	add	local07, local08
0a7cc     02 2A 66 F0 | 	shl	local07, #2
0a7d0     03 00 00 FF 
0a7d4     00 E4 85 F1 | 	sub	objptr, ##1536
0a7d8     F2 2A 02 F1 | 	add	local07, objptr
0a7dc     08 2A 06 F1 | 	add	local07, #8
0a7e0     15 27 62 FC | 	wrlong	local05, local07
0a7e4     03 00 00 FF 
0a7e8     00 E4 05 F1 | 	add	objptr, ##1536
0a7ec     F2 28 02 FB | 	rdlong	local06, objptr
0a7f0     01 28 06 F1 | 	add	local06, #1
0a7f4     F2 28 62 FC | 	wrlong	local06, objptr
0a7f8     13 00 00 FF 
0a7fc     38 E4 85 F1 | 	sub	objptr, ##9784
0a800     F2 24 02 FB | 	rdlong	local04, objptr
0a804     03 24 66 F0 | 	shl	local04, #3
0a808     02 00 00 FF 
0a80c     38 E4 85 F1 | 	sub	objptr, ##1080
0a810     F2 24 02 F1 | 	add	local04, objptr
0a814     04 24 06 F1 | 	add	local04, #4
0a818     12 27 02 FB | 	rdlong	local05, local04
0a81c     35 00 00 FF 
0a820     0C E4 85 F1 | 	sub	objptr, ##27148
0a824     E0 FE 9F FD | 	jmp	#LR__0920
0a828                 | LR__0921
0a828     A7 F0 03 F6 | 	mov	ptra, fp
0a82c     B2 00 A0 FD | 	call	#popregs_
0a830                 | _muldiv_ret
0a830     2D 00 64 FD | 	ret
0a834                 | 
0a834                 | ' 
0a834                 | ' sub getvalue() 
0a834                 | _getvalue
0a834     0B 4A 05 F6 | 	mov	COUNT_, #11
0a838     A8 00 A0 FD | 	call	#pushregs_
0a83c                 | _getvalue_enter
0a83c     01 24 06 F6 | 	mov	local04, #1
0a840     00 1E 06 F6 | 	mov	local01, #0
0a844     1D 22 06 F6 | 	mov	local03, #29
0a848     37 00 00 FF 
0a84c     44 E4 05 F1 | 	add	objptr, ##28228
0a850     F2 16 02 FB | 	rdlong	arg03, objptr
0a854     03 16 66 F0 | 	shl	arg03, #3
0a858     02 00 00 FF 
0a85c     38 E4 85 F1 | 	sub	objptr, ##1080
0a860     F2 16 02 F1 | 	add	arg03, objptr
0a864     04 16 06 F1 | 	add	arg03, #4
0a868     0B 27 02 FB | 	rdlong	local05, arg03
0a86c                 | ' m=1
0a86c                 | ' t1.result.uresult=0: t1.result_type=result_uint
0a86c                 | ' op=lparts(ct).token
0a86c                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
0a86c     02 26 0E F2 | 	cmp	local05, #2 wz
0a870     35 00 00 FF 
0a874     0C E4 85 F1 | 	sub	objptr, ##27148
0a878     38 00 90 5D |  if_ne	jmp	#LR__0930
0a87c     01 24 66 F6 | 	neg	local04, #1
0a880     37 00 00 FF 
0a884     44 E4 05 F1 | 	add	objptr, ##28228
0a888     F2 26 02 FB | 	rdlong	local05, objptr
0a88c     01 26 06 F1 | 	add	local05, #1
0a890     F2 26 62 FC | 	wrlong	local05, objptr
0a894     03 26 66 F0 | 	shl	local05, #3
0a898     02 00 00 FF 
0a89c     38 E4 85 F1 | 	sub	objptr, ##1080
0a8a0     F2 26 02 F1 | 	add	local05, objptr
0a8a4     04 26 06 F1 | 	add	local05, #4
0a8a8     13 27 02 FB | 	rdlong	local05, local05
0a8ac     35 00 00 FF 
0a8b0     0C E4 85 F1 | 	sub	objptr, ##27148
0a8b4                 | LR__0930
0a8b4                 | ' select case op
0a8b4     01 00 00 FF 
0a8b8     00 26 0E F2 | 	cmp	local05, ##512 wz
0a8bc     44 00 90 AD |  if_e	jmp	#LR__0931
0a8c0     01 00 00 FF 
0a8c4     01 26 0E F2 | 	cmp	local05, ##513 wz
0a8c8     90 01 90 AD |  if_e	jmp	#LR__0934
0a8cc     01 00 00 FF 
0a8d0     02 26 0E F2 | 	cmp	local05, ##514 wz
0a8d4     44 04 90 AD |  if_e	jmp	#LR__0941
0a8d8     01 00 00 FF 
0a8dc     03 26 0E F2 | 	cmp	local05, ##515 wz
0a8e0     A8 05 90 AD |  if_e	jmp	#LR__0944
0a8e4     2C 26 0E F2 | 	cmp	local05, #44 wz
0a8e8     7C 07 90 AD |  if_e	jmp	#LR__0949
0a8ec     01 00 00 FF 
0a8f0     04 26 0E F2 | 	cmp	local05, ##516 wz
0a8f4     74 08 90 AD |  if_e	jmp	#LR__0950
0a8f8     15 26 0E F2 | 	cmp	local05, #21 wz
0a8fc     94 08 90 AD |  if_e	jmp	#LR__0951
0a900     04 09 90 FD | 	jmp	#LR__0952
0a904                 | LR__0931
0a904                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
0a904     01 24 0E F2 | 	cmp	local04, #1 wz
0a908     3C 00 90 5D |  if_ne	jmp	#LR__0932
0a90c     37 00 00 FF 
0a910     44 E4 05 F1 | 	add	objptr, ##28228
0a914     F2 26 02 FB | 	rdlong	local05, objptr
0a918     03 26 66 F0 | 	shl	local05, #3
0a91c     02 00 00 FF 
0a920     38 E4 85 F1 | 	sub	objptr, ##1080
0a924     F2 26 02 F1 | 	add	local05, objptr
0a928     13 13 02 FB | 	rdlong	arg01, local05
0a92c     00 14 06 F6 | 	mov	arg02, #0
0a930     35 00 00 FF 
0a934     0C E4 85 F1 | 	sub	objptr, ##27148
0a938     D8 93 B1 FD | 	call	#__system____builtin_atoi
0a93c     FD 24 02 FD | 	qmul	local04, result1
0a940     18 1E 62 FD | 	getqx	local01
0a944     1C 22 06 F6 | 	mov	local03, #28
0a948                 | LR__0932
0a948                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
0a948     FF FF 7F FF 
0a94c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a950     3C 00 90 5D |  if_ne	jmp	#LR__0933
0a954     37 00 00 FF 
0a958     44 E4 05 F1 | 	add	objptr, ##28228
0a95c     F2 26 02 FB | 	rdlong	local05, objptr
0a960     03 26 66 F0 | 	shl	local05, #3
0a964     02 00 00 FF 
0a968     38 E4 85 F1 | 	sub	objptr, ##1080
0a96c     F2 26 02 F1 | 	add	local05, objptr
0a970     13 13 02 FB | 	rdlong	arg01, local05
0a974     00 14 06 F6 | 	mov	arg02, #0
0a978     35 00 00 FF 
0a97c     0C E4 85 F1 | 	sub	objptr, ##27148
0a980     90 93 B1 FD | 	call	#__system____builtin_atoi
0a984     FD 24 02 FD | 	qmul	local04, result1
0a988     18 1E 62 FD | 	getqx	local01
0a98c     1C 22 06 F6 | 	mov	local03, #28
0a990                 | LR__0933
0a990     0F 29 02 F6 | 	mov	local06, local01
0a994     10 2B 02 F6 | 	mov	local07, local02
0a998     11 27 02 F6 | 	mov	local05, local03
0a99c     4A 00 00 FF 
0a9a0     7C E4 05 F1 | 	add	objptr, ##38012
0a9a4     F2 1E 02 FB | 	rdlong	local01, objptr
0a9a8     0F 25 02 F6 | 	mov	local04, local01
0a9ac     01 24 66 F0 | 	shl	local04, #1
0a9b0     0F 25 02 F1 | 	add	local04, local01
0a9b4     02 24 66 F0 | 	shl	local04, #2
0a9b8     03 00 00 FF 
0a9bc     00 E4 85 F1 | 	sub	objptr, ##1536
0a9c0     F2 24 02 F1 | 	add	local04, objptr
0a9c4     12 29 62 FC | 	wrlong	local06, local04
0a9c8     03 00 00 FF 
0a9cc     00 E4 05 F1 | 	add	objptr, ##1536
0a9d0     F2 28 02 FB | 	rdlong	local06, objptr
0a9d4     14 1F 02 F6 | 	mov	local01, local06
0a9d8     01 1E 66 F0 | 	shl	local01, #1
0a9dc     14 1F 02 F1 | 	add	local01, local06
0a9e0     02 1E 66 F0 | 	shl	local01, #2
0a9e4     03 00 00 FF 
0a9e8     00 E4 85 F1 | 	sub	objptr, ##1536
0a9ec     F2 1E 02 F1 | 	add	local01, objptr
0a9f0     04 1E 06 F1 | 	add	local01, #4
0a9f4     0F 2B 62 FC | 	wrlong	local07, local01
0a9f8     03 00 00 FF 
0a9fc     00 E4 05 F1 | 	add	objptr, ##1536
0aa00     F2 2A 02 FB | 	rdlong	local07, objptr
0aa04     15 29 02 F6 | 	mov	local06, local07
0aa08     01 28 66 F0 | 	shl	local06, #1
0aa0c     15 29 02 F1 | 	add	local06, local07
0aa10     02 28 66 F0 | 	shl	local06, #2
0aa14     03 00 00 FF 
0aa18     00 E4 85 F1 | 	sub	objptr, ##1536
0aa1c     F2 28 02 F1 | 	add	local06, objptr
0aa20     08 28 06 F1 | 	add	local06, #8
0aa24     14 27 62 FC | 	wrlong	local05, local06
0aa28     03 00 00 FF 
0aa2c     00 E4 05 F1 | 	add	objptr, ##1536
0aa30     F2 28 02 FB | 	rdlong	local06, objptr
0aa34     01 28 06 F1 | 	add	local06, #1
0aa38     F2 28 62 FC | 	wrlong	local06, objptr
0aa3c     13 00 00 FF 
0aa40     38 E4 85 F1 | 	sub	objptr, ##9784
0aa44     F2 28 02 FB | 	rdlong	local06, objptr
0aa48     01 28 06 F1 | 	add	local06, #1
0aa4c     F2 28 62 FC | 	wrlong	local06, objptr
0aa50     37 00 00 FF 
0aa54     44 E4 85 F1 | 	sub	objptr, ##28228
0aa58     D0 07 90 FD | 	jmp	#LR__0953
0aa5c                 | LR__0934
0aa5c                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0aa5c     37 00 00 FF 
0aa60     44 E4 05 F1 | 	add	objptr, ##28228
0aa64     F2 16 02 FB | 	rdlong	arg03, objptr
0aa68     03 16 66 F0 | 	shl	arg03, #3
0aa6c     02 00 00 FF 
0aa70     38 E4 85 F1 | 	sub	objptr, ##1080
0aa74     F2 16 02 F1 | 	add	arg03, objptr
0aa78     0B 13 02 FB | 	rdlong	arg01, arg03
0aa7c     01 14 06 F6 | 	mov	arg02, #1
0aa80     35 00 00 FF 
0aa84     0C E4 85 F1 | 	sub	objptr, ##27148
0aa88     D8 80 B1 FD | 	call	#__system__Left_S
0aa8c     FD 12 02 F6 | 	mov	arg01, result1
0aa90     84 01 00 FF 
0aa94     B9 15 06 F6 | 	mov	arg02, ##@LR__5429
0aa98     74 60 B1 FD | 	call	#__system___string_cmp
0aa9c     00 FA 0D F2 | 	cmp	result1, #0 wz
0aaa0     94 00 90 5D |  if_ne	jmp	#LR__0937
0aaa4     37 00 00 FF 
0aaa8     44 E4 05 F1 | 	add	objptr, ##28228
0aaac     F2 2A 02 FB | 	rdlong	local07, objptr
0aab0     15 29 02 F6 | 	mov	local06, local07
0aab4     03 28 66 F0 | 	shl	local06, #3
0aab8     02 00 00 FF 
0aabc     38 E4 85 F1 | 	sub	objptr, ##1080
0aac0     F2 28 02 F1 | 	add	local06, objptr
0aac4     84 01 00 FF 
0aac8     BB 27 06 F6 | 	mov	local05, ##@LR__5430
0aacc     03 2A 66 F0 | 	shl	local07, #3
0aad0     F2 2A 02 F1 | 	add	local07, objptr
0aad4     15 2B 02 FB | 	rdlong	local07, local07
0aad8     02 00 00 FF 
0aadc     38 E4 05 F1 | 	add	objptr, ##1080
0aae0     F2 1E 02 FB | 	rdlong	local01, objptr
0aae4     03 1E 66 F0 | 	shl	local01, #3
0aae8     02 00 00 FF 
0aaec     38 E4 85 F1 | 	sub	objptr, ##1080
0aaf0     F2 1E 02 F1 | 	add	local01, objptr
0aaf4     0F 13 02 FB | 	rdlong	arg01, local01
0aaf8     35 00 00 FF 
0aafc     0C E4 85 F1 | 	sub	objptr, ##27148
0ab00     09 2D 02 F6 | 	mov	local08, arg01
0ab04     97 06 48 FB | 	callpa	#(@LR__0936-@LR__0935)>>2,fcache_load_ptr_
0ab08                 | LR__0935
0ab08     16 FB C9 FA | 	rdbyte	result1, local08 wz
0ab0c     01 2C 06 51 |  if_ne	add	local08, #1
0ab10     F4 FF 9F 5D |  if_ne	jmp	#LR__0935
0ab14                 | LR__0936
0ab14     09 2D 82 F1 | 	sub	local08, arg01
0ab18     16 15 02 F6 | 	mov	arg02, local08
0ab1c     01 14 86 F1 | 	sub	arg02, #1
0ab20     15 13 02 F6 | 	mov	arg01, local07
0ab24     C4 80 B1 FD | 	call	#__system__Right_S
0ab28     FD 14 02 F6 | 	mov	arg02, result1
0ab2c     13 13 02 F6 | 	mov	arg01, local05
0ab30     10 60 B1 FD | 	call	#__system___string_concat
0ab34     14 FB 61 FC | 	wrlong	result1, local06
0ab38                 | LR__0937
0ab38                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0ab38     37 00 00 FF 
0ab3c     44 E4 05 F1 | 	add	objptr, ##28228
0ab40     F2 16 02 FB | 	rdlong	arg03, objptr
0ab44     03 16 66 F0 | 	shl	arg03, #3
0ab48     02 00 00 FF 
0ab4c     38 E4 85 F1 | 	sub	objptr, ##1080
0ab50     F2 16 02 F1 | 	add	arg03, objptr
0ab54     0B 13 02 FB | 	rdlong	arg01, arg03
0ab58     01 14 06 F6 | 	mov	arg02, #1
0ab5c     35 00 00 FF 
0ab60     0C E4 85 F1 | 	sub	objptr, ##27148
0ab64     FC 7F B1 FD | 	call	#__system__Left_S
0ab68     FD 12 02 F6 | 	mov	arg01, result1
0ab6c     84 01 00 FF 
0ab70     BE 15 06 F6 | 	mov	arg02, ##@LR__5431
0ab74     98 5F B1 FD | 	call	#__system___string_cmp
0ab78     00 FA 0D F2 | 	cmp	result1, #0 wz
0ab7c     94 00 90 5D |  if_ne	jmp	#LR__0940
0ab80     37 00 00 FF 
0ab84     44 E4 05 F1 | 	add	objptr, ##28228
0ab88     F2 2A 02 FB | 	rdlong	local07, objptr
0ab8c     15 29 02 F6 | 	mov	local06, local07
0ab90     03 28 66 F0 | 	shl	local06, #3
0ab94     02 00 00 FF 
0ab98     38 E4 85 F1 | 	sub	objptr, ##1080
0ab9c     F2 28 02 F1 | 	add	local06, objptr
0aba0     84 01 00 FF 
0aba4     C0 27 06 F6 | 	mov	local05, ##@LR__5432
0aba8     03 2A 66 F0 | 	shl	local07, #3
0abac     F2 2A 02 F1 | 	add	local07, objptr
0abb0     15 2B 02 FB | 	rdlong	local07, local07
0abb4     02 00 00 FF 
0abb8     38 E4 05 F1 | 	add	objptr, ##1080
0abbc     F2 1E 02 FB | 	rdlong	local01, objptr
0abc0     03 1E 66 F0 | 	shl	local01, #3
0abc4     02 00 00 FF 
0abc8     38 E4 85 F1 | 	sub	objptr, ##1080
0abcc     F2 1E 02 F1 | 	add	local01, objptr
0abd0     0F 13 02 FB | 	rdlong	arg01, local01
0abd4     35 00 00 FF 
0abd8     0C E4 85 F1 | 	sub	objptr, ##27148
0abdc     09 2D 02 F6 | 	mov	local08, arg01
0abe0     97 06 48 FB | 	callpa	#(@LR__0939-@LR__0938)>>2,fcache_load_ptr_
0abe4                 | LR__0938
0abe4     16 FB C9 FA | 	rdbyte	result1, local08 wz
0abe8     01 2C 06 51 |  if_ne	add	local08, #1
0abec     F4 FF 9F 5D |  if_ne	jmp	#LR__0938
0abf0                 | LR__0939
0abf0     09 2D 82 F1 | 	sub	local08, arg01
0abf4     16 15 02 F6 | 	mov	arg02, local08
0abf8     01 14 86 F1 | 	sub	arg02, #1
0abfc     15 13 02 F6 | 	mov	arg01, local07
0ac00     E8 7F B1 FD | 	call	#__system__Right_S
0ac04     FD 14 02 F6 | 	mov	arg02, result1
0ac08     13 13 02 F6 | 	mov	arg01, local05
0ac0c     34 5F B1 FD | 	call	#__system___string_concat
0ac10     14 FB 61 FC | 	wrlong	result1, local06
0ac14                 | LR__0940
0ac14     37 00 00 FF 
0ac18     44 E4 05 F1 | 	add	objptr, ##28228
0ac1c     F2 28 02 FB | 	rdlong	local06, objptr
0ac20     03 28 66 F0 | 	shl	local06, #3
0ac24     02 00 00 FF 
0ac28     38 E4 85 F1 | 	sub	objptr, ##1080
0ac2c     F2 28 02 F1 | 	add	local06, objptr
0ac30     14 13 02 FB | 	rdlong	arg01, local06
0ac34     00 14 06 F6 | 	mov	arg02, #0
0ac38     35 00 00 FF 
0ac3c     0C E4 85 F1 | 	sub	objptr, ##27148
0ac40     D0 90 B1 FD | 	call	#__system____builtin_atoi
0ac44     FD 24 02 FD | 	qmul	local04, result1
0ac48     4A 00 00 FF 
0ac4c     7C E4 05 F1 | 	add	objptr, ##38012
0ac50     F2 28 02 FB | 	rdlong	local06, objptr
0ac54     14 2F 02 F6 | 	mov	local09, local06
0ac58     01 2E 66 F0 | 	shl	local09, #1
0ac5c     14 2F 02 F1 | 	add	local09, local06
0ac60     02 2E 66 F0 | 	shl	local09, #2
0ac64     03 00 00 FF 
0ac68     00 E4 85 F1 | 	sub	objptr, ##1536
0ac6c     F2 2E 02 F1 | 	add	local09, objptr
0ac70     03 00 00 FF 
0ac74     00 E4 05 F1 | 	add	objptr, ##1536
0ac78     18 1E 62 FD | 	getqx	local01
0ac7c     1C 22 06 F6 | 	mov	local03, #28
0ac80     0F 29 02 F6 | 	mov	local06, local01
0ac84     10 2B 02 F6 | 	mov	local07, local02
0ac88     17 29 62 FC | 	wrlong	local06, local09
0ac8c     11 2F 02 F6 | 	mov	local09, local03
0ac90     F2 28 02 FB | 	rdlong	local06, objptr
0ac94     14 27 02 F6 | 	mov	local05, local06
0ac98     01 26 66 F0 | 	shl	local05, #1
0ac9c     14 27 02 F1 | 	add	local05, local06
0aca0     02 26 66 F0 | 	shl	local05, #2
0aca4     03 00 00 FF 
0aca8     00 E4 85 F1 | 	sub	objptr, ##1536
0acac     F2 26 02 F1 | 	add	local05, objptr
0acb0     04 26 06 F1 | 	add	local05, #4
0acb4     13 2B 62 FC | 	wrlong	local07, local05
0acb8     03 00 00 FF 
0acbc     00 E4 05 F1 | 	add	objptr, ##1536
0acc0     F2 2A 02 FB | 	rdlong	local07, objptr
0acc4     15 29 02 F6 | 	mov	local06, local07
0acc8     01 28 66 F0 | 	shl	local06, #1
0accc     15 29 02 F1 | 	add	local06, local07
0acd0     02 28 66 F0 | 	shl	local06, #2
0acd4     03 00 00 FF 
0acd8     00 E4 85 F1 | 	sub	objptr, ##1536
0acdc     F2 28 02 F1 | 	add	local06, objptr
0ace0     08 28 06 F1 | 	add	local06, #8
0ace4     14 2F 62 FC | 	wrlong	local09, local06
0ace8     03 00 00 FF 
0acec     00 E4 05 F1 | 	add	objptr, ##1536
0acf0     F2 28 02 FB | 	rdlong	local06, objptr
0acf4     01 28 06 F1 | 	add	local06, #1
0acf8     F2 28 62 FC | 	wrlong	local06, objptr
0acfc     13 00 00 FF 
0ad00     38 E4 85 F1 | 	sub	objptr, ##9784
0ad04     F2 28 02 FB | 	rdlong	local06, objptr
0ad08     01 28 06 F1 | 	add	local06, #1
0ad0c     F2 28 62 FC | 	wrlong	local06, objptr
0ad10     37 00 00 FF 
0ad14     44 E4 85 F1 | 	sub	objptr, ##28228
0ad18     10 05 90 FD | 	jmp	#LR__0953
0ad1c                 | LR__0941
0ad1c                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0ad1c     01 24 0E F2 | 	cmp	local04, #1 wz
0ad20     48 00 90 5D |  if_ne	jmp	#LR__0942
0ad24     00 C0 1F FF 
0ad28     00 28 06 F6 | 	mov	local06, ##1065353216
0ad2c     37 00 00 FF 
0ad30     44 E4 05 F1 | 	add	objptr, ##28228
0ad34     F2 2E 02 FB | 	rdlong	local09, objptr
0ad38     03 2E 66 F0 | 	shl	local09, #3
0ad3c     02 00 00 FF 
0ad40     38 E4 85 F1 | 	sub	objptr, ##1080
0ad44     F2 2E 02 F1 | 	add	local09, objptr
0ad48     17 13 02 FB | 	rdlong	arg01, local09
0ad4c     35 00 00 FF 
0ad50     0C E4 85 F1 | 	sub	objptr, ##27148
0ad54     2C 91 B1 FD | 	call	#__system____builtin_atof
0ad58     FD 14 02 F6 | 	mov	arg02, result1
0ad5c     14 13 02 F6 | 	mov	arg01, local06
0ad60     38 89 B1 FD | 	call	#__system___float_mul
0ad64     FD 1E 02 F6 | 	mov	local01, result1
0ad68     1E 22 06 F6 | 	mov	local03, #30
0ad6c                 | LR__0942
0ad6c                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0ad6c     FF FF 7F FF 
0ad70     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0ad74     48 00 90 5D |  if_ne	jmp	#LR__0943
0ad78     00 C0 5F FF 
0ad7c     00 28 06 F6 | 	mov	local06, ##-1082130432
0ad80     37 00 00 FF 
0ad84     44 E4 05 F1 | 	add	objptr, ##28228
0ad88     F2 2E 02 FB | 	rdlong	local09, objptr
0ad8c     03 2E 66 F0 | 	shl	local09, #3
0ad90     02 00 00 FF 
0ad94     38 E4 85 F1 | 	sub	objptr, ##1080
0ad98     F2 2E 02 F1 | 	add	local09, objptr
0ad9c     17 13 02 FB | 	rdlong	arg01, local09
0ada0     35 00 00 FF 
0ada4     0C E4 85 F1 | 	sub	objptr, ##27148
0ada8     D8 90 B1 FD | 	call	#__system____builtin_atof
0adac     FD 14 02 F6 | 	mov	arg02, result1
0adb0     14 13 02 F6 | 	mov	arg01, local06
0adb4     E4 88 B1 FD | 	call	#__system___float_mul
0adb8     FD 1E 02 F6 | 	mov	local01, result1
0adbc     1E 22 06 F6 | 	mov	local03, #30
0adc0                 | LR__0943
0adc0     0F 29 02 F6 | 	mov	local06, local01
0adc4     10 2B 02 F6 | 	mov	local07, local02
0adc8     11 27 02 F6 | 	mov	local05, local03
0adcc     4A 00 00 FF 
0add0     7C E4 05 F1 | 	add	objptr, ##38012
0add4     F2 1E 02 FB | 	rdlong	local01, objptr
0add8     0F 2F 02 F6 | 	mov	local09, local01
0addc     01 2E 66 F0 | 	shl	local09, #1
0ade0     0F 2F 02 F1 | 	add	local09, local01
0ade4     02 2E 66 F0 | 	shl	local09, #2
0ade8     03 00 00 FF 
0adec     00 E4 85 F1 | 	sub	objptr, ##1536
0adf0     F2 2E 02 F1 | 	add	local09, objptr
0adf4     17 29 62 FC | 	wrlong	local06, local09
0adf8     03 00 00 FF 
0adfc     00 E4 05 F1 | 	add	objptr, ##1536
0ae00     F2 2E 02 FB | 	rdlong	local09, objptr
0ae04     17 29 02 F6 | 	mov	local06, local09
0ae08     01 28 66 F0 | 	shl	local06, #1
0ae0c     17 29 02 F1 | 	add	local06, local09
0ae10     02 28 66 F0 | 	shl	local06, #2
0ae14     03 00 00 FF 
0ae18     00 E4 85 F1 | 	sub	objptr, ##1536
0ae1c     F2 28 02 F1 | 	add	local06, objptr
0ae20     04 28 06 F1 | 	add	local06, #4
0ae24     14 2B 62 FC | 	wrlong	local07, local06
0ae28     03 00 00 FF 
0ae2c     00 E4 05 F1 | 	add	objptr, ##1536
0ae30     F2 2E 02 FB | 	rdlong	local09, objptr
0ae34     17 2B 02 F6 | 	mov	local07, local09
0ae38     01 2A 66 F0 | 	shl	local07, #1
0ae3c     17 2B 02 F1 | 	add	local07, local09
0ae40     02 2A 66 F0 | 	shl	local07, #2
0ae44     03 00 00 FF 
0ae48     00 E4 85 F1 | 	sub	objptr, ##1536
0ae4c     F2 2A 02 F1 | 	add	local07, objptr
0ae50     08 2A 06 F1 | 	add	local07, #8
0ae54     15 27 62 FC | 	wrlong	local05, local07
0ae58     03 00 00 FF 
0ae5c     00 E4 05 F1 | 	add	objptr, ##1536
0ae60     F2 28 02 FB | 	rdlong	local06, objptr
0ae64     01 28 06 F1 | 	add	local06, #1
0ae68     F2 28 62 FC | 	wrlong	local06, objptr
0ae6c     13 00 00 FF 
0ae70     38 E4 85 F1 | 	sub	objptr, ##9784
0ae74     F2 28 02 FB | 	rdlong	local06, objptr
0ae78     01 28 06 F1 | 	add	local06, #1
0ae7c     F2 28 62 FC | 	wrlong	local06, objptr
0ae80     37 00 00 FF 
0ae84     44 E4 85 F1 | 	sub	objptr, ##28228
0ae88     A0 03 90 FD | 	jmp	#LR__0953
0ae8c                 | LR__0944
0ae8c     1F 22 06 F6 | 	mov	local03, #31
0ae90     37 00 00 FF 
0ae94     44 E4 05 F1 | 	add	objptr, ##28228
0ae98     F2 16 02 FB | 	rdlong	arg03, objptr
0ae9c     03 16 66 F0 | 	shl	arg03, #3
0aea0     02 00 00 FF 
0aea4     38 E4 85 F1 | 	sub	objptr, ##1080
0aea8     F2 16 02 F1 | 	add	arg03, objptr
0aeac     0B 13 02 FB | 	rdlong	arg01, arg03
0aeb0     35 00 00 FF 
0aeb4     0C E4 85 F1 | 	sub	objptr, ##27148
0aeb8     09 2D 02 F6 | 	mov	local08, arg01
0aebc     97 06 48 FB | 	callpa	#(@LR__0946-@LR__0945)>>2,fcache_load_ptr_
0aec0                 | LR__0945
0aec0     16 FB C9 FA | 	rdbyte	result1, local08 wz
0aec4     01 2C 06 51 |  if_ne	add	local08, #1
0aec8     F4 FF 9F 5D |  if_ne	jmp	#LR__0945
0aecc                 | LR__0946
0aecc     09 2D 82 F1 | 	sub	local08, arg01
0aed0     16 FB 01 F6 | 	mov	result1, local08
0aed4     51 00 00 FF 
0aed8     F0 E5 05 F1 | 	add	objptr, ##41968
0aedc     F2 FA 61 FC | 	wrlong	result1, objptr
0aee0     48 E4 85 F1 | 	sub	objptr, #72
0aee4     F2 12 02 FB | 	rdlong	arg01, objptr
0aee8     FD 12 82 F1 | 	sub	arg01, result1
0aeec     04 12 86 F1 | 	sub	arg01, #4
0aef0     03 12 26 F5 | 	andn	arg01, #3
0aef4     F2 12 62 FC | 	wrlong	arg01, objptr
0aef8     48 E4 05 F1 | 	add	objptr, #72
0aefc     F2 14 02 FB | 	rdlong	arg02, objptr
0af00     51 00 00 FF 
0af04     F0 E5 85 F1 | 	sub	objptr, ##41968
0af08     A8 27 B1 FD | 	call	#_pslpoke
0af0c                 | '     pslpoke memtop,l
0af0c                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0af0c     01 30 06 F6 | 	mov	local10, #1
0af10     51 00 00 FF 
0af14     F0 E5 05 F1 | 	add	objptr, ##41968
0af18     F2 32 02 FB | 	rdlong	local11, objptr
0af1c     51 00 00 FF 
0af20     F0 E5 85 F1 | 	sub	objptr, ##41968
0af24     01 32 06 F1 | 	add	local11, #1
0af28                 | LR__0947
0af28     19 31 52 F2 | 	cmps	local10, local11 wc
0af2c     5C 00 90 3D |  if_ae	jmp	#LR__0948
0af30     51 00 00 FF 
0af34     A8 E5 05 F1 | 	add	objptr, ##41896
0af38     F2 2A 02 FB | 	rdlong	local07, objptr
0af3c     03 2A 06 F1 | 	add	local07, #3
0af40     18 2B 02 F1 | 	add	local07, local10
0af44     1A 00 00 FF 
0af48     64 E5 85 F1 | 	sub	objptr, ##13668
0af4c     F2 2E 02 FB | 	rdlong	local09, objptr
0af50     03 2E 66 F0 | 	shl	local09, #3
0af54     02 00 00 FF 
0af58     38 E4 85 F1 | 	sub	objptr, ##1080
0af5c     F2 2E 02 F1 | 	add	local09, objptr
0af60     17 13 02 FB | 	rdlong	arg01, local09
0af64     18 15 02 F6 | 	mov	arg02, local10
0af68     01 16 06 F6 | 	mov	arg03, #1
0af6c     35 00 00 FF 
0af70     0C E4 85 F1 | 	sub	objptr, ##27148
0af74     04 7D B1 FD | 	call	#__system__Mid_S
0af78     FD 14 C2 FA | 	rdbyte	arg02, result1
0af7c     15 13 02 F6 | 	mov	arg01, local07
0af80     C0 27 B1 FD | 	call	#_pspoke
0af84     01 30 06 F1 | 	add	local10, #1
0af88     9C FF 9F FD | 	jmp	#LR__0947
0af8c                 | LR__0948
0af8c     51 00 00 FF 
0af90     A8 E5 05 F1 | 	add	objptr, ##41896
0af94     F2 1E 02 FB | 	rdlong	local01, objptr
0af98     2B 22 06 F6 | 	mov	local03, #43
0af9c     0F 29 02 F6 | 	mov	local06, local01
0afa0     10 2B 02 F6 | 	mov	local07, local02
0afa4     11 33 02 F6 | 	mov	local11, local03
0afa8     07 00 00 FF 
0afac     2C E5 85 F1 | 	sub	objptr, ##3884
0afb0     F2 30 02 FB | 	rdlong	local10, objptr
0afb4     18 2F 02 F6 | 	mov	local09, local10
0afb8     01 2E 66 F0 | 	shl	local09, #1
0afbc     18 2F 02 F1 | 	add	local09, local10
0afc0     02 2E 66 F0 | 	shl	local09, #2
0afc4     03 00 00 FF 
0afc8     00 E4 85 F1 | 	sub	objptr, ##1536
0afcc     F2 2E 02 F1 | 	add	local09, objptr
0afd0     17 29 62 FC | 	wrlong	local06, local09
0afd4     03 00 00 FF 
0afd8     00 E4 05 F1 | 	add	objptr, ##1536
0afdc     F2 30 02 FB | 	rdlong	local10, objptr
0afe0     18 2F 02 F6 | 	mov	local09, local10
0afe4     01 2E 66 F0 | 	shl	local09, #1
0afe8     18 2F 02 F1 | 	add	local09, local10
0afec     02 2E 66 F0 | 	shl	local09, #2
0aff0     03 00 00 FF 
0aff4     00 E4 85 F1 | 	sub	objptr, ##1536
0aff8     F2 2E 02 F1 | 	add	local09, objptr
0affc     04 2E 06 F1 | 	add	local09, #4
0b000     17 2B 62 FC | 	wrlong	local07, local09
0b004     03 00 00 FF 
0b008     00 E4 05 F1 | 	add	objptr, ##1536
0b00c     F2 30 02 FB | 	rdlong	local10, objptr
0b010     18 2F 02 F6 | 	mov	local09, local10
0b014     01 2E 66 F0 | 	shl	local09, #1
0b018     18 2F 02 F1 | 	add	local09, local10
0b01c     02 2E 66 F0 | 	shl	local09, #2
0b020     03 00 00 FF 
0b024     00 E4 85 F1 | 	sub	objptr, ##1536
0b028     F2 2E 02 F1 | 	add	local09, objptr
0b02c     08 2E 06 F1 | 	add	local09, #8
0b030     17 33 62 FC | 	wrlong	local11, local09
0b034     03 00 00 FF 
0b038     00 E4 05 F1 | 	add	objptr, ##1536
0b03c     F2 28 02 FB | 	rdlong	local06, objptr
0b040     01 28 06 F1 | 	add	local06, #1
0b044     F2 28 62 FC | 	wrlong	local06, objptr
0b048     13 00 00 FF 
0b04c     38 E4 85 F1 | 	sub	objptr, ##9784
0b050     F2 28 02 FB | 	rdlong	local06, objptr
0b054     01 28 06 F1 | 	add	local06, #1
0b058     F2 28 62 FC | 	wrlong	local06, objptr
0b05c     37 00 00 FF 
0b060     44 E4 85 F1 | 	sub	objptr, ##28228
0b064     C4 01 90 FD | 	jmp	#LR__0953
0b068                 | LR__0949
0b068     2C 22 06 F6 | 	mov	local03, #44
0b06c     37 00 00 FF 
0b070     44 E4 05 F1 | 	add	objptr, ##28228
0b074     F2 28 02 FB | 	rdlong	local06, objptr
0b078     03 28 66 F0 | 	shl	local06, #3
0b07c     02 00 00 FF 
0b080     38 E4 85 F1 | 	sub	objptr, ##1080
0b084     F2 28 02 F1 | 	add	local06, objptr
0b088     14 13 02 FB | 	rdlong	arg01, local06
0b08c     00 14 06 F6 | 	mov	arg02, #0
0b090     35 00 00 FF 
0b094     0C E4 85 F1 | 	sub	objptr, ##27148
0b098     78 8C B1 FD | 	call	#__system____builtin_atoi
0b09c     FD 1E 02 F6 | 	mov	local01, result1
0b0a0     0F 29 02 F6 | 	mov	local06, local01
0b0a4     10 2B 02 F6 | 	mov	local07, local02
0b0a8     11 33 02 F6 | 	mov	local11, local03
0b0ac     4A 00 00 FF 
0b0b0     7C E4 05 F1 | 	add	objptr, ##38012
0b0b4     F2 30 02 FB | 	rdlong	local10, objptr
0b0b8     18 2F 02 F6 | 	mov	local09, local10
0b0bc     01 2E 66 F0 | 	shl	local09, #1
0b0c0     18 2F 02 F1 | 	add	local09, local10
0b0c4     02 2E 66 F0 | 	shl	local09, #2
0b0c8     03 00 00 FF 
0b0cc     00 E4 85 F1 | 	sub	objptr, ##1536
0b0d0     F2 2E 02 F1 | 	add	local09, objptr
0b0d4     17 29 62 FC | 	wrlong	local06, local09
0b0d8     03 00 00 FF 
0b0dc     00 E4 05 F1 | 	add	objptr, ##1536
0b0e0     F2 30 02 FB | 	rdlong	local10, objptr
0b0e4     18 2F 02 F6 | 	mov	local09, local10
0b0e8     01 2E 66 F0 | 	shl	local09, #1
0b0ec     18 2F 02 F1 | 	add	local09, local10
0b0f0     02 2E 66 F0 | 	shl	local09, #2
0b0f4     03 00 00 FF 
0b0f8     00 E4 85 F1 | 	sub	objptr, ##1536
0b0fc     F2 2E 02 F1 | 	add	local09, objptr
0b100     04 2E 06 F1 | 	add	local09, #4
0b104     17 2B 62 FC | 	wrlong	local07, local09
0b108     03 00 00 FF 
0b10c     00 E4 05 F1 | 	add	objptr, ##1536
0b110     F2 30 02 FB | 	rdlong	local10, objptr
0b114     18 2F 02 F6 | 	mov	local09, local10
0b118     01 2E 66 F0 | 	shl	local09, #1
0b11c     18 2F 02 F1 | 	add	local09, local10
0b120     02 2E 66 F0 | 	shl	local09, #2
0b124     03 00 00 FF 
0b128     00 E4 85 F1 | 	sub	objptr, ##1536
0b12c     F2 2E 02 F1 | 	add	local09, objptr
0b130     08 2E 06 F1 | 	add	local09, #8
0b134     17 33 62 FC | 	wrlong	local11, local09
0b138     03 00 00 FF 
0b13c     00 E4 05 F1 | 	add	objptr, ##1536
0b140     F2 28 02 FB | 	rdlong	local06, objptr
0b144     01 28 06 F1 | 	add	local06, #1
0b148     F2 28 62 FC | 	wrlong	local06, objptr
0b14c     13 00 00 FF 
0b150     38 E4 85 F1 | 	sub	objptr, ##9784
0b154     F2 28 02 FB | 	rdlong	local06, objptr
0b158     01 28 06 F1 | 	add	local06, #1
0b15c     F2 28 62 FC | 	wrlong	local06, objptr
0b160     37 00 00 FF 
0b164     44 E4 85 F1 | 	sub	objptr, ##28228
0b168     C0 00 90 FD | 	jmp	#LR__0953
0b16c                 | LR__0950
0b16c     12 13 02 F6 | 	mov	arg01, local04
0b170     B8 03 B0 FD | 	call	#_getvar
0b174     37 00 00 FF 
0b178     44 E4 05 F1 | 	add	objptr, ##28228
0b17c     F2 28 02 FB | 	rdlong	local06, objptr
0b180     01 28 06 F1 | 	add	local06, #1
0b184     F2 28 62 FC | 	wrlong	local06, objptr
0b188     37 00 00 FF 
0b18c     44 E4 85 F1 | 	sub	objptr, ##28228
0b190     98 00 90 FD | 	jmp	#LR__0953
0b194                 | LR__0951
0b194     37 00 00 FF 
0b198     44 E4 05 F1 | 	add	objptr, ##28228
0b19c     F2 28 02 FB | 	rdlong	local06, objptr
0b1a0     01 28 06 F1 | 	add	local06, #1
0b1a4     F2 28 62 FC | 	wrlong	local06, objptr
0b1a8     37 00 00 FF 
0b1ac     44 E4 85 F1 | 	sub	objptr, ##28228
0b1b0     58 F1 BF FD | 	call	#_expr
0b1b4                 | '     ct+=1
0b1b4                 | '     expr() 
0b1b4                 | '     if lparts(ct).token=token_rpar then ct+=1
0b1b4     37 00 00 FF 
0b1b8     44 E4 05 F1 | 	add	objptr, ##28228
0b1bc     F2 32 02 FB | 	rdlong	local11, objptr
0b1c0     03 32 66 F0 | 	shl	local11, #3
0b1c4     02 00 00 FF 
0b1c8     38 E4 85 F1 | 	sub	objptr, ##1080
0b1cc     F2 32 02 F1 | 	add	local11, objptr
0b1d0     04 32 06 F1 | 	add	local11, #4
0b1d4     19 33 02 FB | 	rdlong	local11, local11
0b1d8     14 32 0E F2 | 	cmp	local11, #20 wz
0b1dc     35 00 00 FF 
0b1e0     0C E4 85 F1 | 	sub	objptr, ##27148
0b1e4     44 00 90 5D |  if_ne	jmp	#LR__0953
0b1e8     37 00 00 FF 
0b1ec     44 E4 05 F1 | 	add	objptr, ##28228
0b1f0     F2 28 02 FB | 	rdlong	local06, objptr
0b1f4     01 28 06 F1 | 	add	local06, #1
0b1f8     F2 28 62 FC | 	wrlong	local06, objptr
0b1fc     37 00 00 FF 
0b200     44 E4 85 F1 | 	sub	objptr, ##28228
0b204     24 00 90 FD | 	jmp	#LR__0953
0b208                 | LR__0952
0b208     12 13 02 F6 | 	mov	arg01, local04
0b20c     28 00 B0 FD | 	call	#_getfun
0b210     37 00 00 FF 
0b214     44 E4 05 F1 | 	add	objptr, ##28228
0b218     F2 28 02 FB | 	rdlong	local06, objptr
0b21c     01 28 06 F1 | 	add	local06, #1
0b220     F2 28 62 FC | 	wrlong	local06, objptr
0b224     37 00 00 FF 
0b228     44 E4 85 F1 | 	sub	objptr, ##28228
0b22c                 | LR__0953
0b22c     A7 F0 03 F6 | 	mov	ptra, fp
0b230     B2 00 A0 FD | 	call	#popregs_
0b234                 | _getvalue_ret
0b234     2D 00 64 FD | 	ret
0b238                 | 
0b238                 | ' 
0b238                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
0b238                 | _getfun
0b238     0A 4A 05 F6 | 	mov	COUNT_, #10
0b23c     A8 00 A0 FD | 	call	#pushregs_
0b240                 | _getfun_enter
0b240     09 25 02 F6 | 	mov	local04, arg01
0b244     37 00 00 FF 
0b248     44 E4 05 F1 | 	add	objptr, ##28228
0b24c     F2 26 02 FB | 	rdlong	local05, objptr
0b250     13 29 02 F6 | 	mov	local06, local05
0b254     00 2A 06 F6 | 	mov	local07, #0
0b258                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
0b258                 | ' oldct=ct
0b258                 | ' numpar=0
0b258                 | '   
0b258                 | ' if lparts(ct+1).token=token_lpar then
0b258     01 26 06 F1 | 	add	local05, #1
0b25c     03 26 66 F0 | 	shl	local05, #3
0b260     02 00 00 FF 
0b264     38 E4 85 F1 | 	sub	objptr, ##1080
0b268     F2 26 02 F1 | 	add	local05, objptr
0b26c     04 26 06 F1 | 	add	local05, #4
0b270     13 27 02 FB | 	rdlong	local05, local05
0b274     15 26 0E F2 | 	cmp	local05, #21 wz
0b278     35 00 00 FF 
0b27c     0C E4 85 F1 | 	sub	objptr, ##27148
0b280     08 01 90 5D |  if_ne	jmp	#LR__0964
0b284     37 00 00 FF 
0b288     44 E4 05 F1 | 	add	objptr, ##28228
0b28c     F2 2C 02 FB | 	rdlong	local08, objptr
0b290     01 2C 06 F1 | 	add	local08, #1
0b294     F2 2C 62 FC | 	wrlong	local08, objptr
0b298     37 00 00 FF 
0b29c     44 E4 85 F1 | 	sub	objptr, ##28228
0b2a0                 | '   ct+=1 											' omit this lpar, this is for expr list
0b2a0                 | '   do
0b2a0                 | LR__0960
0b2a0     37 00 00 FF 
0b2a4     44 E4 05 F1 | 	add	objptr, ##28228
0b2a8     F2 26 02 FB | 	rdlong	local05, objptr
0b2ac     01 26 06 F1 | 	add	local05, #1
0b2b0     F2 26 62 FC | 	wrlong	local05, objptr
0b2b4                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0b2b4                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0b2b4     03 26 66 F0 | 	shl	local05, #3
0b2b8     02 00 00 FF 
0b2bc     38 E4 85 F1 | 	sub	objptr, ##1080
0b2c0     F2 26 02 F1 | 	add	local05, objptr
0b2c4     04 26 06 F1 | 	add	local05, #4
0b2c8     13 2D 02 FB | 	rdlong	local08, local05
0b2cc     15 2C 0E F2 | 	cmp	local08, #21 wz
0b2d0     35 00 00 FF 
0b2d4     0C E4 85 F1 | 	sub	objptr, ##27148
0b2d8     40 00 90 5D |  if_ne	jmp	#LR__0961
0b2dc     37 00 00 FF 
0b2e0     44 E4 05 F1 | 	add	objptr, ##28228
0b2e4     F2 2C 02 FB | 	rdlong	local08, objptr
0b2e8     01 2C 06 F1 | 	add	local08, #1
0b2ec     F2 2C 62 FC | 	wrlong	local08, objptr
0b2f0     37 00 00 FF 
0b2f4     44 E4 85 F1 | 	sub	objptr, ##28228
0b2f8     10 F0 BF FD | 	call	#_expr
0b2fc     37 00 00 FF 
0b300     44 E4 05 F1 | 	add	objptr, ##28228
0b304     F2 2C 02 FB | 	rdlong	local08, objptr
0b308     01 2C 06 F1 | 	add	local08, #1
0b30c     F2 2C 62 FC | 	wrlong	local08, objptr
0b310     37 00 00 FF 
0b314     44 E4 85 F1 | 	sub	objptr, ##28228
0b318     04 00 90 FD | 	jmp	#LR__0962
0b31c                 | LR__0961
0b31c     EC EF BF FD | 	call	#_expr
0b320                 | LR__0962
0b320     01 2A 06 F1 | 	add	local07, #1
0b324     37 00 00 FF 
0b328     44 E4 05 F1 | 	add	objptr, ##28228
0b32c     F2 26 02 FB | 	rdlong	local05, objptr
0b330     03 26 66 F0 | 	shl	local05, #3
0b334     02 00 00 FF 
0b338     38 E4 85 F1 | 	sub	objptr, ##1080
0b33c     F2 26 02 F1 | 	add	local05, objptr
0b340     04 26 06 F1 | 	add	local05, #4
0b344     13 2D 02 FB | 	rdlong	local08, local05
0b348     14 2C 0E F2 | 	cmp	local08, #20 wz
0b34c     35 00 00 FF 
0b350     0C E4 85 F1 | 	sub	objptr, ##27148
0b354     34 00 90 AD |  if_e	jmp	#LR__0963
0b358     37 00 00 FF 
0b35c     44 E4 05 F1 | 	add	objptr, ##28228
0b360     F2 2C 02 FB | 	rdlong	local08, objptr
0b364     03 2C 66 F0 | 	shl	local08, #3
0b368     02 00 00 FF 
0b36c     38 E4 85 F1 | 	sub	objptr, ##1080
0b370     F2 2C 02 F1 | 	add	local08, objptr
0b374     04 2C 06 F1 | 	add	local08, #4
0b378     16 2D 02 FB | 	rdlong	local08, local08
0b37c     FE 2D 0E F2 | 	cmp	local08, #510 wz
0b380     35 00 00 FF 
0b384     0C E4 85 F1 | 	sub	objptr, ##27148
0b388     14 FF 9F 5D |  if_ne	jmp	#LR__0960
0b38c                 | LR__0963
0b38c                 | LR__0964
0b38c     15 1F 02 F6 | 	mov	local01, local07
0b390     03 28 66 F0 | 	shl	local06, #3
0b394     35 00 00 FF 
0b398     0C E4 05 F1 | 	add	objptr, ##27148
0b39c     F2 28 02 F1 | 	add	local06, objptr
0b3a0     04 28 06 F1 | 	add	local06, #4
0b3a4     14 23 02 FB | 	rdlong	local03, local06
0b3a8     0F 2D 02 F6 | 	mov	local08, local01
0b3ac     10 2B 02 F6 | 	mov	local07, local02
0b3b0     11 29 02 F6 | 	mov	local06, local03
0b3b4     15 00 00 FF 
0b3b8     70 E4 05 F1 | 	add	objptr, ##10864
0b3bc     F2 26 02 FB | 	rdlong	local05, objptr
0b3c0     13 13 02 F6 | 	mov	arg01, local05
0b3c4     01 12 66 F0 | 	shl	arg01, #1
0b3c8     13 13 02 F1 | 	add	arg01, local05
0b3cc     02 12 66 F0 | 	shl	arg01, #2
0b3d0     03 00 00 FF 
0b3d4     00 E4 85 F1 | 	sub	objptr, ##1536
0b3d8     F2 12 02 F1 | 	add	arg01, objptr
0b3dc     09 2D 62 FC | 	wrlong	local08, arg01
0b3e0     03 00 00 FF 
0b3e4     00 E4 05 F1 | 	add	objptr, ##1536
0b3e8     F2 2C 02 FB | 	rdlong	local08, objptr
0b3ec     16 2F 02 F6 | 	mov	local09, local08
0b3f0     01 2E 66 F0 | 	shl	local09, #1
0b3f4     16 2F 02 F1 | 	add	local09, local08
0b3f8     02 2E 66 F0 | 	shl	local09, #2
0b3fc     03 00 00 FF 
0b400     00 E4 85 F1 | 	sub	objptr, ##1536
0b404     F2 2E 02 F1 | 	add	local09, objptr
0b408     04 2E 06 F1 | 	add	local09, #4
0b40c     17 2B 62 FC | 	wrlong	local07, local09
0b410     03 00 00 FF 
0b414     00 E4 05 F1 | 	add	objptr, ##1536
0b418     F2 2C 02 FB | 	rdlong	local08, objptr
0b41c     16 31 02 F6 | 	mov	local10, local08
0b420     01 30 66 F0 | 	shl	local10, #1
0b424     16 31 02 F1 | 	add	local10, local08
0b428     02 30 66 F0 | 	shl	local10, #2
0b42c     03 00 00 FF 
0b430     00 E4 85 F1 | 	sub	objptr, ##1536
0b434     F2 30 02 F1 | 	add	local10, objptr
0b438     08 30 06 F1 | 	add	local10, #8
0b43c     18 29 62 FC | 	wrlong	local06, local10
0b440     03 00 00 FF 
0b444     00 E4 05 F1 | 	add	objptr, ##1536
0b448     F2 2C 02 FB | 	rdlong	local08, objptr
0b44c     01 2C 06 F1 | 	add	local08, #1
0b450     F2 2C 62 FC | 	wrlong	local08, objptr
0b454     4A 00 00 FF 
0b458     7C E4 85 F1 | 	sub	objptr, ##38012
0b45c                 | ' 
0b45c                 | ' t2.result.uresult=numpar
0b45c                 | ' 
0b45c                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0b45c                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b45c                 | ' 
0b45c                 | '   
0b45c                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0b45c     FF FF 7F FF 
0b460     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0b464     B8 00 90 5D |  if_ne	jmp	#LR__0965
0b468     15 22 06 F6 | 	mov	local03, #21
0b46c     0F 2D 02 F6 | 	mov	local08, local01
0b470     10 2B 02 F6 | 	mov	local07, local02
0b474     11 29 02 F6 | 	mov	local06, local03
0b478     4A 00 00 FF 
0b47c     7C E4 05 F1 | 	add	objptr, ##38012
0b480     F2 26 02 FB | 	rdlong	local05, objptr
0b484     13 13 02 F6 | 	mov	arg01, local05
0b488     01 12 66 F0 | 	shl	arg01, #1
0b48c     13 13 02 F1 | 	add	arg01, local05
0b490     02 12 66 F0 | 	shl	arg01, #2
0b494     03 00 00 FF 
0b498     00 E4 85 F1 | 	sub	objptr, ##1536
0b49c     F2 12 02 F1 | 	add	arg01, objptr
0b4a0     09 2D 62 FC | 	wrlong	local08, arg01
0b4a4     03 00 00 FF 
0b4a8     00 E4 05 F1 | 	add	objptr, ##1536
0b4ac     F2 30 02 FB | 	rdlong	local10, objptr
0b4b0     18 2F 02 F6 | 	mov	local09, local10
0b4b4     01 2E 66 F0 | 	shl	local09, #1
0b4b8     18 2F 02 F1 | 	add	local09, local10
0b4bc     02 2E 66 F0 | 	shl	local09, #2
0b4c0     03 00 00 FF 
0b4c4     00 E4 85 F1 | 	sub	objptr, ##1536
0b4c8     F2 2E 02 F1 | 	add	local09, objptr
0b4cc     04 2E 06 F1 | 	add	local09, #4
0b4d0     17 2B 62 FC | 	wrlong	local07, local09
0b4d4     03 00 00 FF 
0b4d8     00 E4 05 F1 | 	add	objptr, ##1536
0b4dc     F2 2E 02 FB | 	rdlong	local09, objptr
0b4e0     17 31 02 F6 | 	mov	local10, local09
0b4e4     01 30 66 F0 | 	shl	local10, #1
0b4e8     17 31 02 F1 | 	add	local10, local09
0b4ec     02 30 66 F0 | 	shl	local10, #2
0b4f0     03 00 00 FF 
0b4f4     00 E4 85 F1 | 	sub	objptr, ##1536
0b4f8     F2 30 02 F1 | 	add	local10, objptr
0b4fc     08 30 06 F1 | 	add	local10, #8
0b500     18 29 62 FC | 	wrlong	local06, local10
0b504     03 00 00 FF 
0b508     00 E4 05 F1 | 	add	objptr, ##1536
0b50c     F2 2C 02 FB | 	rdlong	local08, objptr
0b510     01 2C 06 F1 | 	add	local08, #1
0b514     F2 2C 62 FC | 	wrlong	local08, objptr
0b518     4A 00 00 FF 
0b51c     7C E4 85 F1 | 	sub	objptr, ##38012
0b520                 | LR__0965
0b520     A7 F0 03 F6 | 	mov	ptra, fp
0b524     B2 00 A0 FD | 	call	#popregs_
0b528                 | _getfun_ret
0b528     2D 00 64 FD | 	ret
0b52c                 | 
0b52c                 | '   
0b52c                 | '   
0b52c                 | ' sub getvar(m as integer) 
0b52c                 | _getvar
0b52c     0A 4A 05 F6 | 	mov	COUNT_, #10
0b530     A8 00 A0 FD | 	call	#pushregs_
0b534                 | _getvar_enter
0b534     09 25 02 F6 | 	mov	local04, arg01
0b538     37 00 00 FF 
0b53c     44 E4 05 F1 | 	add	objptr, ##28228
0b540     F2 14 02 FB | 	rdlong	arg02, objptr
0b544     03 14 66 F0 | 	shl	arg02, #3
0b548     02 00 00 FF 
0b54c     38 E4 85 F1 | 	sub	objptr, ##1080
0b550     F2 14 02 F1 | 	add	arg02, objptr
0b554     0A 27 02 FB | 	rdlong	local05, arg02
0b558     13 13 02 F6 | 	mov	arg01, local05
0b55c     01 14 06 F6 | 	mov	arg02, #1
0b560     35 00 00 FF 
0b564     0C E4 85 F1 | 	sub	objptr, ##27148
0b568     80 76 B1 FD | 	call	#__system__Right_S
0b56c     FD 28 02 F6 | 	mov	local06, result1
0b570     01 2A 66 F6 | 	neg	local07, #1
0b574                 | ' 
0b574                 | ' varname$=lparts(ct).part$
0b574                 | ' suffix$=right$(varname$,1)
0b574                 | ' j=-1
0b574                 | ' 
0b574                 | ' for i=0 to varnum-1
0b574     00 2C 06 F6 | 	mov	local08, #0
0b578     35 00 00 FF 
0b57c     08 E4 05 F1 | 	add	objptr, ##27144
0b580     F2 2E 02 FB | 	rdlong	local09, objptr
0b584     35 00 00 FF 
0b588     08 E4 85 F1 | 	sub	objptr, ##27144
0b58c                 | LR__0970
0b58c     17 2D 52 F2 | 	cmps	local08, local09 wc
0b590     38 00 90 3D |  if_ae	jmp	#LR__0971
0b594                 | '   if variables(i).name=varname$ then j=i : exit
0b594     16 15 02 F6 | 	mov	arg02, local08
0b598     04 14 66 F0 | 	shl	arg02, #4
0b59c     14 00 00 FF 
0b5a0     F8 E5 05 F1 | 	add	objptr, ##10744
0b5a4     F2 14 02 F1 | 	add	arg02, objptr
0b5a8     0A 13 02 FB | 	rdlong	arg01, arg02
0b5ac     13 15 02 F6 | 	mov	arg02, local05
0b5b0     14 00 00 FF 
0b5b4     F8 E5 85 F1 | 	sub	objptr, ##10744
0b5b8     54 55 B1 FD | 	call	#__system___string_cmp
0b5bc     00 FA 0D F2 | 	cmp	result1, #0 wz
0b5c0     16 2B 02 A6 |  if_e	mov	local07, local08
0b5c4     01 2C 06 51 |  if_ne	add	local08, #1
0b5c8     C0 FF 9F 5D |  if_ne	jmp	#LR__0970
0b5cc                 | LR__0971
0b5cc                 | ' if  j=-1 andalso varnum<maxvars then   
0b5cc     FF FF 7F FF 
0b5d0     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
0b5d4     A8 00 90 5D |  if_ne	jmp	#LR__0972
0b5d8     35 00 00 FF 
0b5dc     08 E4 05 F1 | 	add	objptr, ##27144
0b5e0     F2 2E 02 FB | 	rdlong	local09, objptr
0b5e4     35 00 00 FF 
0b5e8     08 E4 85 F1 | 	sub	objptr, ##27144
0b5ec     02 00 00 FF 
0b5f0     00 2E 56 F2 | 	cmps	local09, ##1024 wc
0b5f4     88 00 90 3D |  if_ae	jmp	#LR__0972
0b5f8     35 00 00 FF 
0b5fc     08 E4 05 F1 | 	add	objptr, ##27144
0b600     F2 2E 02 FB | 	rdlong	local09, objptr
0b604     04 2E 66 F0 | 	shl	local09, #4
0b608     20 00 00 FF 
0b60c     10 E4 85 F1 | 	sub	objptr, ##16400
0b610     F2 2E 02 F1 | 	add	local09, objptr
0b614     17 27 62 FC | 	wrlong	local05, local09
0b618     20 00 00 FF 
0b61c     10 E4 05 F1 | 	add	objptr, ##16400
0b620     F2 2E 02 FB | 	rdlong	local09, objptr
0b624     04 2E 66 F0 | 	shl	local09, #4
0b628     20 00 00 FF 
0b62c     10 E4 85 F1 | 	sub	objptr, ##16400
0b630     F2 2E 02 F1 | 	add	local09, objptr
0b634     04 2E 06 F1 | 	add	local09, #4
0b638     17 01 68 FC | 	wrlong	#0, local09
0b63c     20 00 00 FF 
0b640     10 E4 05 F1 | 	add	objptr, ##16400
0b644     F2 2E 02 FB | 	rdlong	local09, objptr
0b648     04 2E 66 F0 | 	shl	local09, #4
0b64c     20 00 00 FF 
0b650     10 E4 85 F1 | 	sub	objptr, ##16400
0b654     F2 2E 02 F1 | 	add	local09, objptr
0b658     0C 2E 06 F1 | 	add	local09, #12
0b65c     17 39 68 FC | 	wrlong	#28, local09
0b660     20 00 00 FF 
0b664     10 E4 05 F1 | 	add	objptr, ##16400
0b668     F2 2E 02 FB | 	rdlong	local09, objptr
0b66c     17 2B 02 F6 | 	mov	local07, local09
0b670     01 2E 06 F1 | 	add	local09, #1
0b674     F2 2E 62 FC | 	wrlong	local09, objptr
0b678     35 00 00 FF 
0b67c     08 E4 85 F1 | 	sub	objptr, ##27144
0b680                 | LR__0972
0b680     00 2E 06 F6 | 	mov	local09, #0
0b684                 | ' numpar=0
0b684                 | ' ' check if it is an array
0b684                 | ' 
0b684                 | ' if lparts(ct+1).token=token_lpar then
0b684     37 00 00 FF 
0b688     44 E4 05 F1 | 	add	objptr, ##28228
0b68c     F2 2C 02 FB | 	rdlong	local08, objptr
0b690     01 2C 06 F1 | 	add	local08, #1
0b694     03 2C 66 F0 | 	shl	local08, #3
0b698     02 00 00 FF 
0b69c     38 E4 85 F1 | 	sub	objptr, ##1080
0b6a0     F2 2C 02 F1 | 	add	local08, objptr
0b6a4     04 2C 06 F1 | 	add	local08, #4
0b6a8     16 2D 02 FB | 	rdlong	local08, local08
0b6ac     15 2C 0E F2 | 	cmp	local08, #21 wz
0b6b0     35 00 00 FF 
0b6b4     0C E4 85 F1 | 	sub	objptr, ##27148
0b6b8     08 01 90 5D |  if_ne	jmp	#LR__0977
0b6bc     37 00 00 FF 
0b6c0     44 E4 05 F1 | 	add	objptr, ##28228
0b6c4     F2 30 02 FB | 	rdlong	local10, objptr
0b6c8     01 30 06 F1 | 	add	local10, #1
0b6cc     F2 30 62 FC | 	wrlong	local10, objptr
0b6d0     37 00 00 FF 
0b6d4     44 E4 85 F1 | 	sub	objptr, ##28228
0b6d8                 | '   ct+=1 											' omit this lpar, this is for expr list
0b6d8                 | '   do
0b6d8                 | LR__0973
0b6d8     37 00 00 FF 
0b6dc     44 E4 05 F1 | 	add	objptr, ##28228
0b6e0     F2 2C 02 FB | 	rdlong	local08, objptr
0b6e4     01 2C 06 F1 | 	add	local08, #1
0b6e8     F2 2C 62 FC | 	wrlong	local08, objptr
0b6ec                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0b6ec                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0b6ec     03 2C 66 F0 | 	shl	local08, #3
0b6f0     02 00 00 FF 
0b6f4     38 E4 85 F1 | 	sub	objptr, ##1080
0b6f8     F2 2C 02 F1 | 	add	local08, objptr
0b6fc     04 2C 06 F1 | 	add	local08, #4
0b700     16 31 02 FB | 	rdlong	local10, local08
0b704     15 30 0E F2 | 	cmp	local10, #21 wz
0b708     35 00 00 FF 
0b70c     0C E4 85 F1 | 	sub	objptr, ##27148
0b710     40 00 90 5D |  if_ne	jmp	#LR__0974
0b714     37 00 00 FF 
0b718     44 E4 05 F1 | 	add	objptr, ##28228
0b71c     F2 30 02 FB | 	rdlong	local10, objptr
0b720     01 30 06 F1 | 	add	local10, #1
0b724     F2 30 62 FC | 	wrlong	local10, objptr
0b728     37 00 00 FF 
0b72c     44 E4 85 F1 | 	sub	objptr, ##28228
0b730     D8 EB BF FD | 	call	#_expr
0b734     37 00 00 FF 
0b738     44 E4 05 F1 | 	add	objptr, ##28228
0b73c     F2 30 02 FB | 	rdlong	local10, objptr
0b740     01 30 06 F1 | 	add	local10, #1
0b744     F2 30 62 FC | 	wrlong	local10, objptr
0b748     37 00 00 FF 
0b74c     44 E4 85 F1 | 	sub	objptr, ##28228
0b750     04 00 90 FD | 	jmp	#LR__0975
0b754                 | LR__0974
0b754     B4 EB BF FD | 	call	#_expr
0b758                 | LR__0975
0b758     01 2E 06 F1 | 	add	local09, #1
0b75c     37 00 00 FF 
0b760     44 E4 05 F1 | 	add	objptr, ##28228
0b764     F2 2C 02 FB | 	rdlong	local08, objptr
0b768     03 2C 66 F0 | 	shl	local08, #3
0b76c     02 00 00 FF 
0b770     38 E4 85 F1 | 	sub	objptr, ##1080
0b774     F2 2C 02 F1 | 	add	local08, objptr
0b778     04 2C 06 F1 | 	add	local08, #4
0b77c     16 31 02 FB | 	rdlong	local10, local08
0b780     14 30 0E F2 | 	cmp	local10, #20 wz
0b784     35 00 00 FF 
0b788     0C E4 85 F1 | 	sub	objptr, ##27148
0b78c     34 00 90 AD |  if_e	jmp	#LR__0976
0b790     37 00 00 FF 
0b794     44 E4 05 F1 | 	add	objptr, ##28228
0b798     F2 30 02 FB | 	rdlong	local10, objptr
0b79c     03 30 66 F0 | 	shl	local10, #3
0b7a0     02 00 00 FF 
0b7a4     38 E4 85 F1 | 	sub	objptr, ##1080
0b7a8     F2 30 02 F1 | 	add	local10, objptr
0b7ac     04 30 06 F1 | 	add	local10, #4
0b7b0     18 31 02 FB | 	rdlong	local10, local10
0b7b4     FE 31 0E F2 | 	cmp	local10, #510 wz
0b7b8     35 00 00 FF 
0b7bc     0C E4 85 F1 | 	sub	objptr, ##27148
0b7c0     14 FF 9F 5D |  if_ne	jmp	#LR__0973
0b7c4                 | LR__0976
0b7c4                 | LR__0977
0b7c4     17 21 02 F6 | 	mov	local02, local09
0b7c8     11 22 06 F6 | 	mov	local03, #17
0b7cc     15 1F 02 F6 | 	mov	local01, local07
0b7d0     0F 31 02 F6 | 	mov	local10, local01
0b7d4     10 2F 02 F6 | 	mov	local09, local02
0b7d8     11 2D 02 F6 | 	mov	local08, local03
0b7dc     4A 00 00 FF 
0b7e0     7C E4 05 F1 | 	add	objptr, ##38012
0b7e4     F2 2A 02 FB | 	rdlong	local07, objptr
0b7e8     15 29 02 F6 | 	mov	local06, local07
0b7ec     01 28 66 F0 | 	shl	local06, #1
0b7f0     15 29 02 F1 | 	add	local06, local07
0b7f4     02 28 66 F0 | 	shl	local06, #2
0b7f8     03 00 00 FF 
0b7fc     00 E4 85 F1 | 	sub	objptr, ##1536
0b800     F2 28 02 F1 | 	add	local06, objptr
0b804     14 31 62 FC | 	wrlong	local10, local06
0b808     03 00 00 FF 
0b80c     00 E4 05 F1 | 	add	objptr, ##1536
0b810     F2 30 02 FB | 	rdlong	local10, objptr
0b814     18 27 02 F6 | 	mov	local05, local10
0b818     01 26 66 F0 | 	shl	local05, #1
0b81c     18 27 02 F1 | 	add	local05, local10
0b820     02 26 66 F0 | 	shl	local05, #2
0b824     03 00 00 FF 
0b828     00 E4 85 F1 | 	sub	objptr, ##1536
0b82c     F2 26 02 F1 | 	add	local05, objptr
0b830     04 26 06 F1 | 	add	local05, #4
0b834     13 2F 62 FC | 	wrlong	local09, local05
0b838     03 00 00 FF 
0b83c     00 E4 05 F1 | 	add	objptr, ##1536
0b840     F2 30 02 FB | 	rdlong	local10, objptr
0b844     18 FB 01 F6 | 	mov	result1, local10
0b848     01 FA 65 F0 | 	shl	result1, #1
0b84c     18 FB 01 F1 | 	add	result1, local10
0b850     02 FA 65 F0 | 	shl	result1, #2
0b854     03 00 00 FF 
0b858     00 E4 85 F1 | 	sub	objptr, ##1536
0b85c     F2 FA 01 F1 | 	add	result1, objptr
0b860     08 FA 05 F1 | 	add	result1, #8
0b864     FD 2C 62 FC | 	wrlong	local08, result1
0b868     03 00 00 FF 
0b86c     00 E4 05 F1 | 	add	objptr, ##1536
0b870     F2 30 02 FB | 	rdlong	local10, objptr
0b874     01 30 06 F1 | 	add	local10, #1
0b878     F2 30 62 FC | 	wrlong	local10, objptr
0b87c     4A 00 00 FF 
0b880     7C E4 85 F1 | 	sub	objptr, ##38012
0b884                 | ' 
0b884                 | ' t2.result.twowords(1)=numpar
0b884                 | ' 
0b884                 | ' 
0b884                 | ' 
0b884                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0b884                 | ' 
0b884                 | ' 
0b884                 | '  
0b884                 | ' 
0b884                 | ' 701 
0b884                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b884                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0b884     FF FF 7F FF 
0b888     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0b88c     B8 00 90 5D |  if_ne	jmp	#LR__0978
0b890     15 22 06 F6 | 	mov	local03, #21
0b894     0F 31 02 F6 | 	mov	local10, local01
0b898     10 2F 02 F6 | 	mov	local09, local02
0b89c     11 2D 02 F6 | 	mov	local08, local03
0b8a0     4A 00 00 FF 
0b8a4     7C E4 05 F1 | 	add	objptr, ##38012
0b8a8     F2 2A 02 FB | 	rdlong	local07, objptr
0b8ac     15 29 02 F6 | 	mov	local06, local07
0b8b0     01 28 66 F0 | 	shl	local06, #1
0b8b4     15 29 02 F1 | 	add	local06, local07
0b8b8     02 28 66 F0 | 	shl	local06, #2
0b8bc     03 00 00 FF 
0b8c0     00 E4 85 F1 | 	sub	objptr, ##1536
0b8c4     F2 28 02 F1 | 	add	local06, objptr
0b8c8     14 31 62 FC | 	wrlong	local10, local06
0b8cc     03 00 00 FF 
0b8d0     00 E4 05 F1 | 	add	objptr, ##1536
0b8d4     F2 1E 02 FB | 	rdlong	local01, objptr
0b8d8     0F 27 02 F6 | 	mov	local05, local01
0b8dc     01 26 66 F0 | 	shl	local05, #1
0b8e0     0F 27 02 F1 | 	add	local05, local01
0b8e4     02 26 66 F0 | 	shl	local05, #2
0b8e8     03 00 00 FF 
0b8ec     00 E4 85 F1 | 	sub	objptr, ##1536
0b8f0     F2 26 02 F1 | 	add	local05, objptr
0b8f4     04 26 06 F1 | 	add	local05, #4
0b8f8     13 2F 62 FC | 	wrlong	local09, local05
0b8fc     03 00 00 FF 
0b900     00 E4 05 F1 | 	add	objptr, ##1536
0b904     F2 1E 02 FB | 	rdlong	local01, objptr
0b908     0F FB 01 F6 | 	mov	result1, local01
0b90c     01 FA 65 F0 | 	shl	result1, #1
0b910     0F FB 01 F1 | 	add	result1, local01
0b914     02 FA 65 F0 | 	shl	result1, #2
0b918     03 00 00 FF 
0b91c     00 E4 85 F1 | 	sub	objptr, ##1536
0b920     F2 FA 01 F1 | 	add	result1, objptr
0b924     08 FA 05 F1 | 	add	result1, #8
0b928     FD 2C 62 FC | 	wrlong	local08, result1
0b92c     03 00 00 FF 
0b930     00 E4 05 F1 | 	add	objptr, ##1536
0b934     F2 30 02 FB | 	rdlong	local10, objptr
0b938     01 30 06 F1 | 	add	local10, #1
0b93c     F2 30 62 FC | 	wrlong	local10, objptr
0b940     4A 00 00 FF 
0b944     7C E4 85 F1 | 	sub	objptr, ##38012
0b948                 | LR__0978
0b948     A7 F0 03 F6 | 	mov	ptra, fp
0b94c     B2 00 A0 FD | 	call	#popregs_
0b950                 | _getvar_ret
0b950     2D 00 64 FD | 	ret
0b954                 | 
0b954                 | ' 
0b954                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b954                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0b954                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b954                 | ' 
0b954                 | ' 
0b954                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b954                 | ' '                                                                                                                                       -
0b954                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0b954                 | ' '                                                                                                                                       -
0b954                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b954                 | ' 
0b954                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b954                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0b954                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b954                 | ' 
0b954                 | ' function execute_line (astart=0 as integer) as integer
0b954                 | _execute_line
0b954     04 4A 05 F6 | 	mov	COUNT_, #4
0b958     A8 00 A0 FD | 	call	#pushregs_
0b95c     50 00 00 FF 
0b960     B8 E4 05 F1 | 	add	objptr, ##41144
0b964     F2 00 68 FC | 	wrlong	#0, objptr
0b968                 | ' runptr2=0
0b968                 | ' for lineptr_e=astart to lineptr-1
0b968     06 00 00 FF 
0b96c     38 E4 85 F1 | 	sub	objptr, ##3128
0b970     F2 12 62 FC | 	wrlong	arg01, objptr
0b974     04 E4 85 F1 | 	sub	objptr, #4
0b978     F2 1E 02 FB | 	rdlong	local01, objptr
0b97c     4A 00 00 FF 
0b980     7C E4 85 F1 | 	sub	objptr, ##38012
0b984                 | LR__0980
0b984     4A 00 00 FF 
0b988     80 E4 05 F1 | 	add	objptr, ##38016
0b98c     F2 FA 01 FB | 	rdlong	result1, objptr
0b990     4A 00 00 FF 
0b994     80 E4 85 F1 | 	sub	objptr, ##38016
0b998     0F FB 51 F2 | 	cmps	result1, local01 wc
0b99c     98 00 90 3D |  if_ae	jmp	#LR__0981
0b9a0     4A 00 00 FF 
0b9a4     80 E4 05 F1 | 	add	objptr, ##38016
0b9a8     F2 FA 01 FB | 	rdlong	result1, objptr
0b9ac     FD 20 02 F6 | 	mov	local02, result1
0b9b0     01 20 66 F0 | 	shl	local02, #1
0b9b4     FD 20 02 F1 | 	add	local02, result1
0b9b8     02 20 66 F0 | 	shl	local02, #2
0b9bc     03 00 00 FF 
0b9c0     04 E4 85 F1 | 	sub	objptr, ##1540
0b9c4     F2 20 02 F1 | 	add	local02, objptr
0b9c8     08 20 06 F1 | 	add	local02, #8
0b9cc     10 21 02 FB | 	rdlong	local02, local02
0b9d0     10 21 E2 F8 | 	getbyte	local02, local02, #0
0b9d4     02 20 66 F0 | 	shl	local02, #2
0b9d8     04 00 00 FF 
0b9dc     1C E4 85 F1 | 	sub	objptr, ##2076
0b9e0     F2 20 02 F1 | 	add	local02, objptr
0b9e4     10 21 02 FB | 	rdlong	local02, local02
0b9e8     10 23 02 F6 | 	mov	local03, local02
0b9ec     13 20 46 F7 | 	zerox	local02, #19
0b9f0     14 22 46 F0 | 	shr	local03, #20
0b9f4     02 22 66 F0 | 	shl	local03, #2
0b9f8     ED 22 02 F1 | 	add	local03, __methods__
0b9fc     11 23 02 FB | 	rdlong	local03, local03
0ba00     43 00 00 FF 
0ba04     60 E4 85 F1 | 	sub	objptr, ##34400
0ba08     F2 24 02 F6 | 	mov	local04, objptr
0ba0c     10 E5 01 F6 | 	mov	objptr, local02
0ba10     2D 22 62 FD | 	call	local03
0ba14     12 E5 01 F6 | 	mov	objptr, local04
0ba18     4A 00 00 FF 
0ba1c     80 E4 05 F1 | 	add	objptr, ##38016
0ba20     F2 24 02 FB | 	rdlong	local04, objptr
0ba24     01 24 06 F1 | 	add	local04, #1
0ba28     F2 24 62 FC | 	wrlong	local04, objptr
0ba2c     4A 00 00 FF 
0ba30     80 E4 85 F1 | 	sub	objptr, ##38016
0ba34     4C FF 9F FD | 	jmp	#LR__0980
0ba38                 | LR__0981
0ba38                 | ' return runptr2
0ba38     50 00 00 FF 
0ba3c     B8 E4 05 F1 | 	add	objptr, ##41144
0ba40     F2 FA 01 FB | 	rdlong	result1, objptr
0ba44     50 00 00 FF 
0ba48     B8 E4 85 F1 | 	sub	objptr, ##41144
0ba4c     A7 F0 03 F6 | 	mov	ptra, fp
0ba50     B2 00 A0 FD | 	call	#popregs_
0ba54                 | _execute_line_ret
0ba54     2D 00 64 FD | 	ret
0ba58                 | 
0ba58                 | ' 
0ba58                 | ' 
0ba58                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0ba58                 | ' 
0ba58                 | ' function pop() as expr_result
0ba58                 | _pop
0ba58                 | ' 
0ba58                 | ' if stackpointer=0 then
0ba58     43 00 00 FF 
0ba5c     58 E4 05 F1 | 	add	objptr, ##34392
0ba60     F2 FA 09 FB | 	rdlong	result1, objptr wz
0ba64     43 00 00 FF 
0ba68     58 E4 85 F1 | 	sub	objptr, ##34392
0ba6c     FF 04 06 A6 |  if_e	mov	_var03, #255
0ba70     18 00 06 A6 |  if_e	mov	_var01, #24
0ba74     68 00 90 AD |  if_e	jmp	#LR__0990
0ba78     43 00 00 FF 
0ba7c     58 E4 05 F1 | 	add	objptr, ##34392
0ba80     F2 FA 01 FB | 	rdlong	result1, objptr
0ba84     01 FA 85 F1 | 	sub	result1, #1
0ba88     F2 FA 61 FC | 	wrlong	result1, objptr
0ba8c     FD FE 01 F6 | 	mov	result3, result1
0ba90     01 FE 65 F0 | 	shl	result3, #1
0ba94     FD FE 01 F1 | 	add	result3, result1
0ba98     02 FE 65 F0 | 	shl	result3, #2
0ba9c     0C 00 00 FF 
0baa0     0C E4 85 F1 | 	sub	objptr, ##6156
0baa4     F2 FE 01 F1 | 	add	result3, objptr
0baa8     FF 00 02 FB | 	rdlong	_var01, result3
0baac     04 FE 05 F1 | 	add	result3, #4
0bab0     FF FE 01 FB | 	rdlong	result3, result3
0bab4     FD FC 01 F6 | 	mov	result2, result1
0bab8     01 FC 65 F0 | 	shl	result2, #1
0babc     FD FC 01 F1 | 	add	result2, result1
0bac0     02 FC 65 F0 | 	shl	result2, #2
0bac4     F2 FC 01 F1 | 	add	result2, objptr
0bac8     08 FC 05 F1 | 	add	result2, #8
0bacc     FE FA 01 FB | 	rdlong	result1, result2
0bad0     FF 02 02 F6 | 	mov	_var02, result3
0bad4     FD 04 02 F6 | 	mov	_var03, result1
0bad8     37 00 00 FF 
0badc     4C E4 85 F1 | 	sub	objptr, ##28236
0bae0                 | LR__0990
0bae0                 | ' return t1
0bae0     01 FD 01 F6 | 	mov	result2, _var02
0bae4     02 FF 01 F6 | 	mov	result3, _var03
0bae8     00 FB 01 F6 | 	mov	result1, _var01
0baec                 | _pop_ret
0baec     2D 00 64 FD | 	ret
0baf0                 | 
0baf0                 | ' 
0baf0                 | ' sub push(t1 as expr_result )
0baf0                 | _push
0baf0                 | ' 
0baf0                 | ' 'print "In push: "; t1.result_type
0baf0                 | ' 'print "In push: "; t1.result.uresult
0baf0                 | ' 
0baf0                 | ' if stackpointer<maxstack then 
0baf0     43 00 00 FF 
0baf4     58 E4 05 F1 | 	add	objptr, ##34392
0baf8     F2 00 02 FB | 	rdlong	_var01, objptr
0bafc     43 00 00 FF 
0bb00     58 E4 85 F1 | 	sub	objptr, ##34392
0bb04     01 00 00 FF 
0bb08     00 00 56 F2 | 	cmps	_var01, ##512 wc
0bb0c     BC 00 90 3D |  if_ae	jmp	#LR__1000
0bb10     09 01 02 FB | 	rdlong	_var01, arg01
0bb14     04 12 06 F1 | 	add	arg01, #4
0bb18     09 03 02 FB | 	rdlong	_var02, arg01
0bb1c     04 12 06 F1 | 	add	arg01, #4
0bb20     09 13 02 FB | 	rdlong	arg01, arg01
0bb24     43 00 00 FF 
0bb28     58 E4 05 F1 | 	add	objptr, ##34392
0bb2c     F2 04 02 FB | 	rdlong	_var03, objptr
0bb30     02 07 02 F6 | 	mov	_var04, _var03
0bb34     01 06 66 F0 | 	shl	_var04, #1
0bb38     02 07 02 F1 | 	add	_var04, _var03
0bb3c     02 06 66 F0 | 	shl	_var04, #2
0bb40     0C 00 00 FF 
0bb44     0C E4 85 F1 | 	sub	objptr, ##6156
0bb48     F2 06 02 F1 | 	add	_var04, objptr
0bb4c     03 01 62 FC | 	wrlong	_var01, _var04
0bb50     0C 00 00 FF 
0bb54     0C E4 05 F1 | 	add	objptr, ##6156
0bb58     F2 06 02 FB | 	rdlong	_var04, objptr
0bb5c     03 05 02 F6 | 	mov	_var03, _var04
0bb60     01 04 66 F0 | 	shl	_var03, #1
0bb64     03 05 02 F1 | 	add	_var03, _var04
0bb68     02 04 66 F0 | 	shl	_var03, #2
0bb6c     0C 00 00 FF 
0bb70     0C E4 85 F1 | 	sub	objptr, ##6156
0bb74     F2 04 02 F1 | 	add	_var03, objptr
0bb78     04 04 06 F1 | 	add	_var03, #4
0bb7c     02 03 62 FC | 	wrlong	_var02, _var03
0bb80     0C 00 00 FF 
0bb84     0C E4 05 F1 | 	add	objptr, ##6156
0bb88     F2 06 02 FB | 	rdlong	_var04, objptr
0bb8c     03 05 02 F6 | 	mov	_var03, _var04
0bb90     01 04 66 F0 | 	shl	_var03, #1
0bb94     03 05 02 F1 | 	add	_var03, _var04
0bb98     02 04 66 F0 | 	shl	_var03, #2
0bb9c     0C 00 00 FF 
0bba0     0C E4 85 F1 | 	sub	objptr, ##6156
0bba4     F2 04 02 F1 | 	add	_var03, objptr
0bba8     08 04 06 F1 | 	add	_var03, #8
0bbac     02 13 62 FC | 	wrlong	arg01, _var03
0bbb0     0C 00 00 FF 
0bbb4     0C E4 05 F1 | 	add	objptr, ##6156
0bbb8     F2 00 02 FB | 	rdlong	_var01, objptr
0bbbc     01 00 06 F1 | 	add	_var01, #1
0bbc0     F2 00 62 FC | 	wrlong	_var01, objptr
0bbc4     43 00 00 FF 
0bbc8     58 E4 85 F1 | 	sub	objptr, ##34392
0bbcc                 | LR__1000
0bbcc                 | _push_ret
0bbcc     2D 00 64 FD | 	ret
0bbd0                 | 
0bbd0                 | ' 
0bbd0                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
0bbd0                 | ' 
0bbd0                 | ' sub do_push
0bbd0                 | _do_push
0bbd0                 | ' if stackpointer<maxstack then 
0bbd0     43 00 00 FF 
0bbd4     58 E4 05 F1 | 	add	objptr, ##34392
0bbd8     F2 00 02 FB | 	rdlong	_var01, objptr
0bbdc     43 00 00 FF 
0bbe0     58 E4 85 F1 | 	sub	objptr, ##34392
0bbe4     01 00 00 FF 
0bbe8     00 00 56 F2 | 	cmps	_var01, ##512 wc
0bbec     F8 00 90 3D |  if_ae	jmp	#LR__1010
0bbf0     4A 00 00 FF 
0bbf4     80 E4 05 F1 | 	add	objptr, ##38016
0bbf8     F2 02 02 FB | 	rdlong	_var02, objptr
0bbfc     01 05 02 F6 | 	mov	_var03, _var02
0bc00     01 04 66 F0 | 	shl	_var03, #1
0bc04     01 05 02 F1 | 	add	_var03, _var02
0bc08     02 04 66 F0 | 	shl	_var03, #2
0bc0c     03 00 00 FF 
0bc10     04 E4 85 F1 | 	sub	objptr, ##1540
0bc14     F2 04 02 F1 | 	add	_var03, objptr
0bc18     02 01 02 FB | 	rdlong	_var01, _var03
0bc1c     04 04 06 F1 | 	add	_var03, #4
0bc20     02 07 02 FB | 	rdlong	_var04, _var03
0bc24     01 05 02 F6 | 	mov	_var03, _var02
0bc28     01 04 66 F0 | 	shl	_var03, #1
0bc2c     01 05 02 F1 | 	add	_var03, _var02
0bc30     02 04 66 F0 | 	shl	_var03, #2
0bc34     F2 04 02 F1 | 	add	_var03, objptr
0bc38     08 04 06 F1 | 	add	_var03, #8
0bc3c     02 03 02 FB | 	rdlong	_var02, _var03
0bc40     04 00 00 FF 
0bc44     24 E4 85 F1 | 	sub	objptr, ##2084
0bc48     F2 04 02 FB | 	rdlong	_var03, objptr
0bc4c     02 09 02 F6 | 	mov	_var05, _var03
0bc50     01 08 66 F0 | 	shl	_var05, #1
0bc54     02 09 02 F1 | 	add	_var05, _var03
0bc58     02 08 66 F0 | 	shl	_var05, #2
0bc5c     0C 00 00 FF 
0bc60     0C E4 85 F1 | 	sub	objptr, ##6156
0bc64     F2 08 02 F1 | 	add	_var05, objptr
0bc68     04 01 62 FC | 	wrlong	_var01, _var05
0bc6c     0C 00 00 FF 
0bc70     0C E4 05 F1 | 	add	objptr, ##6156
0bc74     F2 08 02 FB | 	rdlong	_var05, objptr
0bc78     04 05 02 F6 | 	mov	_var03, _var05
0bc7c     01 04 66 F0 | 	shl	_var03, #1
0bc80     04 05 02 F1 | 	add	_var03, _var05
0bc84     02 04 66 F0 | 	shl	_var03, #2
0bc88     0C 00 00 FF 
0bc8c     0C E4 85 F1 | 	sub	objptr, ##6156
0bc90     F2 04 02 F1 | 	add	_var03, objptr
0bc94     04 04 06 F1 | 	add	_var03, #4
0bc98     02 07 62 FC | 	wrlong	_var04, _var03
0bc9c     0C 00 00 FF 
0bca0     0C E4 05 F1 | 	add	objptr, ##6156
0bca4     F2 08 02 FB | 	rdlong	_var05, objptr
0bca8     04 07 02 F6 | 	mov	_var04, _var05
0bcac     01 06 66 F0 | 	shl	_var04, #1
0bcb0     04 07 02 F1 | 	add	_var04, _var05
0bcb4     02 06 66 F0 | 	shl	_var04, #2
0bcb8     0C 00 00 FF 
0bcbc     0C E4 85 F1 | 	sub	objptr, ##6156
0bcc0     F2 06 02 F1 | 	add	_var04, objptr
0bcc4     08 06 06 F1 | 	add	_var04, #8
0bcc8     03 03 62 FC | 	wrlong	_var02, _var04
0bccc     0C 00 00 FF 
0bcd0     0C E4 05 F1 | 	add	objptr, ##6156
0bcd4     F2 00 02 FB | 	rdlong	_var01, objptr
0bcd8     01 00 06 F1 | 	add	_var01, #1
0bcdc     F2 00 62 FC | 	wrlong	_var01, objptr
0bce0     43 00 00 FF 
0bce4     58 E4 85 F1 | 	sub	objptr, ##34392
0bce8                 | LR__1010
0bce8                 | _do_push_ret
0bce8     2D 00 64 FD | 	ret
0bcec                 | 
0bcec                 | ' 
0bcec                 | '   
0bcec                 | ' sub csave_block(address as ulong)
0bcec                 | _csave_block
0bcec     09 01 02 F6 | 	mov	_var01, arg01
0bcf0                 | ' 
0bcf0                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
0bcf0                 | ' ' we enter it at the state of playing 1 kHz header tone
0bcf0                 | ' 
0bcf0                 | ' for i=0 to 63 step 2
0bcf0     00 02 06 F6 | 	mov	_var02, #0
0bcf4                 | LR__1020
0bcf4                 | '   do: loop until lpeek(base+64*7)>32768
0bcf4     37 00 00 FF 
0bcf8     10 E4 05 F1 | 	add	objptr, ##28176
0bcfc     97 0C 48 FB | 	callpa	#(@LR__1022-@LR__1021)>>2,fcache_load_ptr_
0bd00                 | LR__1021
0bd00     F2 12 02 FB | 	rdlong	arg01, objptr
0bd04     C0 13 06 F1 | 	add	arg01, #448
0bd08     09 FB 01 FB | 	rdlong	result1, arg01
0bd0c     40 00 00 FF 
0bd10     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0bd14     E8 FF 9F CD |  if_b	jmp	#LR__1021
0bd18                 | LR__1022
0bd18     00 13 02 F6 | 	mov	arg01, _var01
0bd1c     01 05 02 F6 | 	mov	_var03, _var02
0bd20     02 04 66 F0 | 	shl	_var03, #2
0bd24     02 13 02 F1 | 	add	arg01, _var03
0bd28     09 07 02 FB | 	rdlong	_var04, arg01
0bd2c     1A 00 00 FF 
0bd30     F8 E5 05 F1 | 	add	objptr, ##13816
0bd34     F2 06 62 FC | 	wrlong	_var04, objptr
0bd38     52 00 00 FF 
0bd3c     08 E4 85 F1 | 	sub	objptr, ##41992
0bd40                 | '   q=lpeek(address+4*i)
0bd40                 | '      for bit=0 to 31
0bd40     00 08 06 F6 | 	mov	_var05, #0
0bd44     97 84 48 FB | 	callpa	#(@LR__1027-@LR__1023)>>2,fcache_load_ptr_
0bd48                 | LR__1023
0bd48                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0bd48     52 00 00 FF 
0bd4c     08 E4 05 F1 | 	add	objptr, ##41992
0bd50     F2 06 02 FB | 	rdlong	_var04, objptr
0bd54     52 00 00 FF 
0bd58     08 E4 85 F1 | 	sub	objptr, ##41992
0bd5c     04 05 C2 F9 | 	decod	_var03, _var05
0bd60     02 07 CA F7 | 	test	_var04, _var03 wz
0bd64     60 00 90 AD |  if_e	jmp	#LR__1024
0bd68     04 05 02 F6 | 	mov	_var03, _var05
0bd6c     02 04 66 F0 | 	shl	_var03, #2
0bd70     4D 00 00 FF 
0bd74     B0 E5 05 F1 | 	add	objptr, ##39856
0bd78     F2 04 02 F1 | 	add	_var03, objptr
0bd7c     02 FF 48 FC | 	wrbyte	#127, _var03
0bd80     04 05 02 F6 | 	mov	_var03, _var05
0bd84     02 04 66 F0 | 	shl	_var03, #2
0bd88     01 04 06 F1 | 	add	_var03, #1
0bd8c     F2 04 02 F1 | 	add	_var03, objptr
0bd90     02 01 49 FC | 	wrbyte	#128, _var03
0bd94     04 05 02 F6 | 	mov	_var03, _var05
0bd98     02 04 66 F0 | 	shl	_var03, #2
0bd9c     02 04 06 F1 | 	add	_var03, #2
0bda0     F2 04 02 F1 | 	add	_var03, objptr
0bda4     02 FF 48 FC | 	wrbyte	#127, _var03
0bda8     04 05 02 F6 | 	mov	_var03, _var05
0bdac     02 04 66 F0 | 	shl	_var03, #2
0bdb0     03 04 06 F1 | 	add	_var03, #3
0bdb4     F2 04 02 F1 | 	add	_var03, objptr
0bdb8     02 01 49 FC | 	wrbyte	#128, _var03
0bdbc     4D 00 00 FF 
0bdc0     B0 E5 85 F1 | 	sub	objptr, ##39856
0bdc4     5C 00 90 FD | 	jmp	#LR__1025
0bdc8                 | LR__1024
0bdc8     04 05 02 F6 | 	mov	_var03, _var05
0bdcc     02 04 66 F0 | 	shl	_var03, #2
0bdd0     4D 00 00 FF 
0bdd4     B0 E5 05 F1 | 	add	objptr, ##39856
0bdd8     F2 04 02 F1 | 	add	_var03, objptr
0bddc     02 01 49 FC | 	wrbyte	#128, _var03
0bde0     04 05 02 F6 | 	mov	_var03, _var05
0bde4     02 04 66 F0 | 	shl	_var03, #2
0bde8     01 04 06 F1 | 	add	_var03, #1
0bdec     F2 04 02 F1 | 	add	_var03, objptr
0bdf0     02 01 49 FC | 	wrbyte	#128, _var03
0bdf4     04 05 02 F6 | 	mov	_var03, _var05
0bdf8     02 04 66 F0 | 	shl	_var03, #2
0bdfc     02 04 06 F1 | 	add	_var03, #2
0be00     F2 04 02 F1 | 	add	_var03, objptr
0be04     02 FF 48 FC | 	wrbyte	#127, _var03
0be08     04 05 02 F6 | 	mov	_var03, _var05
0be0c     02 04 66 F0 | 	shl	_var03, #2
0be10     03 04 06 F1 | 	add	_var03, #3
0be14     F2 04 02 F1 | 	add	_var03, objptr
0be18     02 FF 48 FC | 	wrbyte	#127, _var03
0be1c     4D 00 00 FF 
0be20     B0 E5 85 F1 | 	sub	objptr, ##39856
0be24                 | LR__1025
0be24     01 08 06 F1 | 	add	_var05, #1
0be28     20 08 56 F2 | 	cmps	_var05, #32 wc
0be2c     18 FF 9F CD |  if_b	jmp	#LR__1023
0be30                 | '   do: loop until lpeek(base+64*7)<32768
0be30     37 00 00 FF 
0be34     10 E4 05 F1 | 	add	objptr, ##28176
0be38                 | LR__1026
0be38     F2 12 02 FB | 	rdlong	arg01, objptr
0be3c     C0 13 06 F1 | 	add	arg01, #448
0be40     09 FB 01 FB | 	rdlong	result1, arg01
0be44     40 00 00 FF 
0be48     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0be4c     E8 FF 9F 3D |  if_ae	jmp	#LR__1026
0be50                 | LR__1027
0be50     00 13 02 F6 | 	mov	arg01, _var01
0be54     04 12 06 F1 | 	add	arg01, #4
0be58     01 05 02 F6 | 	mov	_var03, _var02
0be5c     02 04 66 F0 | 	shl	_var03, #2
0be60     02 13 02 F1 | 	add	arg01, _var03
0be64     09 07 02 FB | 	rdlong	_var04, arg01
0be68     1A 00 00 FF 
0be6c     F8 E5 05 F1 | 	add	objptr, ##13816
0be70     F2 06 62 FC | 	wrlong	_var04, objptr
0be74     52 00 00 FF 
0be78     08 E4 85 F1 | 	sub	objptr, ##41992
0be7c                 | '   q=lpeek(address+4+4*i)
0be7c                 | '      for bit=0 to 31
0be7c     00 08 06 F6 | 	mov	_var05, #0
0be80     97 94 48 FB | 	callpa	#(@LR__1031-@LR__1028)>>2,fcache_load_ptr_
0be84                 | LR__1028
0be84                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0be84     52 00 00 FF 
0be88     08 E4 05 F1 | 	add	objptr, ##41992
0be8c     F2 06 02 FB | 	rdlong	_var04, objptr
0be90     52 00 00 FF 
0be94     08 E4 85 F1 | 	sub	objptr, ##41992
0be98     04 05 C2 F9 | 	decod	_var03, _var05
0be9c     02 07 CA F7 | 	test	_var04, _var03 wz
0bea0     80 00 90 AD |  if_e	jmp	#LR__1029
0bea4     04 0B 02 F6 | 	mov	_var06, _var05
0bea8     02 0A 66 F0 | 	shl	_var06, #2
0beac     80 04 06 F6 | 	mov	_var03, #128
0beb0     05 05 02 F1 | 	add	_var03, _var06
0beb4     4D 00 00 FF 
0beb8     B0 E5 05 F1 | 	add	objptr, ##39856
0bebc     F2 04 02 F1 | 	add	_var03, objptr
0bec0     02 FF 48 FC | 	wrbyte	#127, _var03
0bec4     04 0B 02 F6 | 	mov	_var06, _var05
0bec8     02 0A 66 F0 | 	shl	_var06, #2
0becc     80 04 06 F6 | 	mov	_var03, #128
0bed0     05 05 02 F1 | 	add	_var03, _var06
0bed4     01 04 06 F1 | 	add	_var03, #1
0bed8     F2 04 02 F1 | 	add	_var03, objptr
0bedc     02 01 49 FC | 	wrbyte	#128, _var03
0bee0     04 0B 02 F6 | 	mov	_var06, _var05
0bee4     02 0A 66 F0 | 	shl	_var06, #2
0bee8     80 04 06 F6 | 	mov	_var03, #128
0beec     05 05 02 F1 | 	add	_var03, _var06
0bef0     02 04 06 F1 | 	add	_var03, #2
0bef4     F2 04 02 F1 | 	add	_var03, objptr
0bef8     02 FF 48 FC | 	wrbyte	#127, _var03
0befc     04 0B 02 F6 | 	mov	_var06, _var05
0bf00     02 0A 66 F0 | 	shl	_var06, #2
0bf04     80 04 06 F6 | 	mov	_var03, #128
0bf08     05 05 02 F1 | 	add	_var03, _var06
0bf0c     03 04 06 F1 | 	add	_var03, #3
0bf10     F2 04 02 F1 | 	add	_var03, objptr
0bf14     02 01 49 FC | 	wrbyte	#128, _var03
0bf18     4D 00 00 FF 
0bf1c     B0 E5 85 F1 | 	sub	objptr, ##39856
0bf20     7C 00 90 FD | 	jmp	#LR__1030
0bf24                 | LR__1029
0bf24     04 0B 02 F6 | 	mov	_var06, _var05
0bf28     02 0A 66 F0 | 	shl	_var06, #2
0bf2c     80 04 06 F6 | 	mov	_var03, #128
0bf30     05 05 02 F1 | 	add	_var03, _var06
0bf34     4D 00 00 FF 
0bf38     B0 E5 05 F1 | 	add	objptr, ##39856
0bf3c     F2 04 02 F1 | 	add	_var03, objptr
0bf40     02 01 49 FC | 	wrbyte	#128, _var03
0bf44     04 0B 02 F6 | 	mov	_var06, _var05
0bf48     02 0A 66 F0 | 	shl	_var06, #2
0bf4c     80 04 06 F6 | 	mov	_var03, #128
0bf50     05 05 02 F1 | 	add	_var03, _var06
0bf54     01 04 06 F1 | 	add	_var03, #1
0bf58     F2 04 02 F1 | 	add	_var03, objptr
0bf5c     02 01 49 FC | 	wrbyte	#128, _var03
0bf60     04 0B 02 F6 | 	mov	_var06, _var05
0bf64     02 0A 66 F0 | 	shl	_var06, #2
0bf68     80 04 06 F6 | 	mov	_var03, #128
0bf6c     05 05 02 F1 | 	add	_var03, _var06
0bf70     02 04 06 F1 | 	add	_var03, #2
0bf74     F2 04 02 F1 | 	add	_var03, objptr
0bf78     02 FF 48 FC | 	wrbyte	#127, _var03
0bf7c     04 0B 02 F6 | 	mov	_var06, _var05
0bf80     02 0A 66 F0 | 	shl	_var06, #2
0bf84     80 04 06 F6 | 	mov	_var03, #128
0bf88     05 05 02 F1 | 	add	_var03, _var06
0bf8c     03 04 06 F1 | 	add	_var03, #3
0bf90     F2 04 02 F1 | 	add	_var03, objptr
0bf94     02 FF 48 FC | 	wrbyte	#127, _var03
0bf98     4D 00 00 FF 
0bf9c     B0 E5 85 F1 | 	sub	objptr, ##39856
0bfa0                 | LR__1030
0bfa0     01 08 06 F1 | 	add	_var05, #1
0bfa4     20 08 56 F2 | 	cmps	_var05, #32 wc
0bfa8     D8 FE 9F CD |  if_b	jmp	#LR__1028
0bfac                 | LR__1031
0bfac     02 02 06 F1 | 	add	_var02, #2
0bfb0     40 02 56 F2 | 	cmps	_var02, #64 wc
0bfb4     3C FD 9F CD |  if_b	jmp	#LR__1020
0bfb8                 | ' do: loop until lpeek(base+64*7)>32768
0bfb8     37 00 00 FF 
0bfbc     10 E4 05 F1 | 	add	objptr, ##28176
0bfc0     97 84 48 FB | 	callpa	#(@LR__1040-@LR__1032)>>2,fcache_load_ptr_
0bfc4                 | LR__1032
0bfc4     F2 12 02 FB | 	rdlong	arg01, objptr
0bfc8     C0 13 06 F1 | 	add	arg01, #448
0bfcc     09 FB 01 FB | 	rdlong	result1, arg01
0bfd0     40 00 00 FF 
0bfd4     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0bfd8     E8 FF 9F CD |  if_b	jmp	#LR__1032
0bfdc     37 00 00 FF 
0bfe0     10 E4 85 F1 | 	sub	objptr, ##28176
0bfe4                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0bfe4     00 02 06 F6 | 	mov	_var02, #0
0bfe8                 | LR__1033
0bfe8     01 07 52 F6 | 	abs	_var04, _var02 wc
0bfec     07 06 06 F5 | 	and	_var04, #7
0bff0     03 07 82 F6 | 	negc	_var04, _var04
0bff4     04 06 56 F2 | 	cmps	_var04, #4 wc
0bff8     20 00 90 3D |  if_ae	jmp	#LR__1034
0bffc     01 0B 02 F6 | 	mov	_var06, _var02
0c000     4D 00 00 FF 
0c004     B0 E5 05 F1 | 	add	objptr, ##39856
0c008     F2 0A 02 F1 | 	add	_var06, objptr
0c00c     05 FF 48 FC | 	wrbyte	#127, _var06
0c010     4D 00 00 FF 
0c014     B0 E5 85 F1 | 	sub	objptr, ##39856
0c018     1C 00 90 FD | 	jmp	#LR__1035
0c01c                 | LR__1034
0c01c     01 0B 02 F6 | 	mov	_var06, _var02
0c020     4D 00 00 FF 
0c024     B0 E5 05 F1 | 	add	objptr, ##39856
0c028     F2 0A 02 F1 | 	add	_var06, objptr
0c02c     05 01 49 FC | 	wrbyte	#128, _var06
0c030     4D 00 00 FF 
0c034     B0 E5 85 F1 | 	sub	objptr, ##39856
0c038                 | LR__1035
0c038     01 02 06 F1 | 	add	_var02, #1
0c03c     80 02 56 F2 | 	cmps	_var02, #128 wc
0c040     A4 FF 9F CD |  if_b	jmp	#LR__1033
0c044                 | ' 
0c044                 | ' do: loop until lpeek(base+64*7)<32768
0c044     37 00 00 FF 
0c048     10 E4 05 F1 | 	add	objptr, ##28176
0c04c                 | LR__1036
0c04c     F2 12 02 FB | 	rdlong	arg01, objptr
0c050     C0 13 06 F1 | 	add	arg01, #448
0c054     09 FB 01 FB | 	rdlong	result1, arg01
0c058     40 00 00 FF 
0c05c     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0c060     E8 FF 9F 3D |  if_ae	jmp	#LR__1036
0c064     37 00 00 FF 
0c068     10 E4 85 F1 | 	sub	objptr, ##28176
0c06c                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0c06c     80 02 06 F6 | 	mov	_var02, #128
0c070                 | LR__1037
0c070     01 07 52 F6 | 	abs	_var04, _var02 wc
0c074     07 06 06 F5 | 	and	_var04, #7
0c078     03 07 82 F6 | 	negc	_var04, _var04
0c07c     04 06 56 F2 | 	cmps	_var04, #4 wc
0c080     20 00 90 3D |  if_ae	jmp	#LR__1038
0c084     01 0B 02 F6 | 	mov	_var06, _var02
0c088     4D 00 00 FF 
0c08c     B0 E5 05 F1 | 	add	objptr, ##39856
0c090     F2 0A 02 F1 | 	add	_var06, objptr
0c094     05 FF 48 FC | 	wrbyte	#127, _var06
0c098     4D 00 00 FF 
0c09c     B0 E5 85 F1 | 	sub	objptr, ##39856
0c0a0     1C 00 90 FD | 	jmp	#LR__1039
0c0a4                 | LR__1038
0c0a4     01 0B 02 F6 | 	mov	_var06, _var02
0c0a8     4D 00 00 FF 
0c0ac     B0 E5 05 F1 | 	add	objptr, ##39856
0c0b0     F2 0A 02 F1 | 	add	_var06, objptr
0c0b4     05 01 49 FC | 	wrbyte	#128, _var06
0c0b8     4D 00 00 FF 
0c0bc     B0 E5 85 F1 | 	sub	objptr, ##39856
0c0c0                 | LR__1039
0c0c0     01 02 06 F1 | 	add	_var02, #1
0c0c4     00 03 16 F2 | 	cmp	_var02, #256 wc
0c0c8     A4 FF 9F CD |  if_b	jmp	#LR__1037
0c0cc                 | LR__1040
0c0cc                 | _csave_block_ret
0c0cc     2D 00 64 FD | 	ret
0c0d0                 | 
0c0d0                 | ' 
0c0d0                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0c0d0                 | _csave_addtoblock
0c0d0     04 4A 05 F6 | 	mov	COUNT_, #4
0c0d4     A8 00 A0 FD | 	call	#pushregs_
0c0d8     09 1F 02 F6 | 	mov	local01, arg01
0c0dc                 | ' 
0c0dc                 | ' 
0c0dc                 | ' if force=0 then
0c0dc     07 14 4E F7 | 	zerox	arg02, #7 wz
0c0e0     78 00 90 5D |  if_ne	jmp	#LR__1050
0c0e4     50 00 00 FF 
0c0e8     B0 E4 05 F1 | 	add	objptr, ##41136
0c0ec     F2 14 02 FB | 	rdlong	arg02, objptr
0c0f0     02 00 00 FF 
0c0f4     00 E4 85 F1 | 	sub	objptr, ##1024
0c0f8     F2 14 02 F1 | 	add	arg02, objptr
0c0fc     0A 1F 42 FC | 	wrbyte	local01, arg02
0c100     02 00 00 FF 
0c104     00 E4 05 F1 | 	add	objptr, ##1024
0c108     F2 1E 02 FB | 	rdlong	local01, objptr
0c10c     01 1E 06 F1 | 	add	local01, #1
0c110     F2 1E 62 FC | 	wrlong	local01, objptr
0c114                 | '   block(blockptr)=d
0c114                 | '   blockptr+=1
0c114                 | '   if blockptr>=255 then
0c114     50 00 00 FF 
0c118     B0 E4 85 F1 | 	sub	objptr, ##41136
0c11c     FF 1E 16 F2 | 	cmp	local01, #255 wc
0c120     E4 00 90 CD |  if_b	jmp	#LR__1054
0c124     4E 00 00 FF 
0c128     B0 E4 05 F1 | 	add	objptr, ##40112
0c12c     F2 12 02 F6 | 	mov	arg01, objptr
0c130     4E 00 00 FF 
0c134     B0 E4 85 F1 | 	sub	objptr, ##40112
0c138     B0 FB BF FD | 	call	#_csave_block
0c13c     50 00 00 FF 
0c140     B0 E4 05 F1 | 	add	objptr, ##41136
0c144     F2 00 68 FC | 	wrlong	#0, objptr
0c148     50 00 00 FF 
0c14c     B0 E4 85 F1 | 	sub	objptr, ##41136
0c150     2C 13 06 F6 | 	mov	arg01, #300
0c154     84 4C B1 FD | 	call	#__system___waitms
0c158     AC 00 90 FD | 	jmp	#LR__1054
0c15c                 | LR__1050
0c15c     50 00 00 FF 
0c160     B0 E4 05 F1 | 	add	objptr, ##41136
0c164     F2 20 02 FB | 	rdlong	local02, objptr
0c168     02 00 00 FF 
0c16c     00 E4 85 F1 | 	sub	objptr, ##1024
0c170     F2 20 02 F1 | 	add	local02, objptr
0c174     10 1F 42 FC | 	wrbyte	local01, local02
0c178                 | '   block(blockptr)=d
0c178                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0c178     02 00 00 FF 
0c17c     00 E4 05 F1 | 	add	objptr, ##1024
0c180     F2 22 02 FB | 	rdlong	local03, objptr
0c184     50 00 00 FF 
0c188     B0 E4 85 F1 | 	sub	objptr, ##41136
0c18c     FF 22 16 F2 | 	cmp	local03, #255 wc
0c190     40 00 90 3D |  if_ae	jmp	#LR__1053
0c194     50 00 00 FF 
0c198     B0 E4 05 F1 | 	add	objptr, ##41136
0c19c     F2 24 02 FB | 	rdlong	local04, objptr
0c1a0     50 00 00 FF 
0c1a4     B0 E4 85 F1 | 	sub	objptr, ##41136
0c1a8                 | LR__1051
0c1a8     00 25 56 F2 | 	cmps	local04, #256 wc
0c1ac     24 00 90 3D |  if_ae	jmp	#LR__1052
0c1b0     12 21 02 F6 | 	mov	local02, local04
0c1b4     4E 00 00 FF 
0c1b8     B0 E4 05 F1 | 	add	objptr, ##40112
0c1bc     F2 20 02 F1 | 	add	local02, objptr
0c1c0     10 01 48 FC | 	wrbyte	#0, local02
0c1c4     01 24 06 F1 | 	add	local04, #1
0c1c8     4E 00 00 FF 
0c1cc     B0 E4 85 F1 | 	sub	objptr, ##40112
0c1d0     D4 FF 9F FD | 	jmp	#LR__1051
0c1d4                 | LR__1052
0c1d4                 | LR__1053
0c1d4     4E 00 00 FF 
0c1d8     B0 E4 05 F1 | 	add	objptr, ##40112
0c1dc     F2 12 02 F6 | 	mov	arg01, objptr
0c1e0     4E 00 00 FF 
0c1e4     B0 E4 85 F1 | 	sub	objptr, ##40112
0c1e8     00 FB BF FD | 	call	#_csave_block
0c1ec     50 00 00 FF 
0c1f0     B0 E4 05 F1 | 	add	objptr, ##41136
0c1f4     F2 00 68 FC | 	wrlong	#0, objptr
0c1f8     50 00 00 FF 
0c1fc     B0 E4 85 F1 | 	sub	objptr, ##41136
0c200     2C 13 06 F6 | 	mov	arg01, #300
0c204     D4 4B B1 FD | 	call	#__system___waitms
0c208                 | LR__1054
0c208     A7 F0 03 F6 | 	mov	ptra, fp
0c20c     B2 00 A0 FD | 	call	#popregs_
0c210                 | _csave_addtoblock_ret
0c210     2D 00 64 FD | 	ret
0c214                 | 
0c214                 | ' 
0c214                 | ' sub test_csave
0c214                 | _test_csave
0c214     04 4A 05 F6 | 	mov	COUNT_, #4
0c218     A8 00 A0 FD | 	call	#pushregs_
0c21c     C0 F0 07 F1 | 	add	ptra, #192
0c220                 | ' 'dim fileheader,savestart, saveptr as ulong
0c220                 | ' 
0c220                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0c220     4A 00 00 FF 
0c224     84 E4 05 F1 | 	add	objptr, ##38020
0c228     F2 12 02 FB | 	rdlong	arg01, objptr
0c22c     4A 00 00 FF 
0c230     84 E4 85 F1 | 	sub	objptr, ##38020
0c234     AC 15 B1 FD | 	call	#_pslpeek
0c238     FF FF 7F FF 
0c23c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0c240     0C 00 90 5D |  if_ne	jmp	#LR__1060
0c244     1B 12 06 F6 | 	mov	arg01, #27
0c248     04 13 B1 FD | 	call	#_printerror
0c24c     1C 03 90 FD | 	jmp	#LR__1074
0c250                 | LR__1060
0c250     04 F8 BF FD | 	call	#_pop
0c254     90 4E 05 F1 | 	add	fp, #144
0c258     A7 FA 61 FC | 	wrlong	result1, fp
0c25c     04 4E 05 F1 | 	add	fp, #4
0c260     A7 FC 61 FC | 	wrlong	result2, fp
0c264     04 4E 05 F1 | 	add	fp, #4
0c268     A7 FE 61 FC | 	wrlong	result3, fp
0c26c                 | ' t1=pop()
0c26c                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0c26c     98 4E 85 F1 | 	sub	fp, #152
0c270     1F FE 0D F2 | 	cmp	result3, #31 wz
0c274     24 00 90 AD |  if_e	jmp	#LR__1061
0c278     51 00 00 FF 
0c27c     D4 E5 05 F1 | 	add	objptr, ##41940
0c280     F2 1C 02 FB | 	rdlong	arg06, objptr
0c284     51 00 00 FF 
0c288     D4 E5 85 F1 | 	sub	objptr, ##41940
0c28c     8C 4E 05 F1 | 	add	fp, #140
0c290     A7 1C 62 FC | 	wrlong	arg06, fp
0c294     8C 4E 85 F1 | 	sub	fp, #140
0c298     14 00 90 FD | 	jmp	#LR__1062
0c29c                 | LR__1061
0c29c     90 4E 05 F1 | 	add	fp, #144
0c2a0     A7 1C 02 FB | 	rdlong	arg06, fp
0c2a4     04 4E 85 F1 | 	sub	fp, #4
0c2a8     A7 1C 62 FC | 	wrlong	arg06, fp
0c2ac     8C 4E 85 F1 | 	sub	fp, #140
0c2b0                 | LR__1062
0c2b0                 | ' 
0c2b0                 | ' ' prepare 1 kHz header wave
0c2b0                 | ' 
0c2b0                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0c2b0     A7 00 68 FC | 	wrlong	#0, fp
0c2b4     97 34 48 FB | 	callpa	#(@LR__1066-@LR__1063)>>2,fcache_load_ptr_
0c2b8                 | LR__1063
0c2b8     A7 1C 02 FB | 	rdlong	arg06, fp
0c2bc     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0c2c0     07 1A 06 F5 | 	and	arg05, #7
0c2c4     0D 1B 82 F6 | 	negc	arg05, arg05
0c2c8     04 1A 56 F2 | 	cmps	arg05, #4 wc
0c2cc     20 00 90 3D |  if_ae	jmp	#LR__1064
0c2d0     A7 1A 02 FB | 	rdlong	arg05, fp
0c2d4     4D 00 00 FF 
0c2d8     B0 E5 05 F1 | 	add	objptr, ##39856
0c2dc     F2 1A 02 F1 | 	add	arg05, objptr
0c2e0     0D FF 48 FC | 	wrbyte	#127, arg05
0c2e4     4D 00 00 FF 
0c2e8     B0 E5 85 F1 | 	sub	objptr, ##39856
0c2ec     1C 00 90 FD | 	jmp	#LR__1065
0c2f0                 | LR__1064
0c2f0     A7 1A 02 FB | 	rdlong	arg05, fp
0c2f4     4D 00 00 FF 
0c2f8     B0 E5 05 F1 | 	add	objptr, ##39856
0c2fc     F2 1A 02 F1 | 	add	arg05, objptr
0c300     0D 01 49 FC | 	wrbyte	#128, arg05
0c304     4D 00 00 FF 
0c308     B0 E5 85 F1 | 	sub	objptr, ##39856
0c30c                 | LR__1065
0c30c     A7 1A 02 FB | 	rdlong	arg05, fp
0c310     01 1A 06 F1 | 	add	arg05, #1
0c314     A7 1A 62 FC | 	wrlong	arg05, fp
0c318     00 1B 56 F2 | 	cmps	arg05, #256 wc
0c31c     98 FF 9F CD |  if_b	jmp	#LR__1063
0c320                 | LR__1066
0c320     4D 00 00 FF 
0c324     B0 E5 05 F1 | 	add	objptr, ##39856
0c328     F2 14 02 F6 | 	mov	arg02, objptr
0c32c     07 12 06 F6 | 	mov	arg01, #7
0c330     0F 00 00 FF 
0c334     40 17 06 F6 | 	mov	arg03, ##8000
0c338     0E 18 C6 F9 | 	decod	arg04, #14
0c33c     00 1B 06 F6 | 	mov	arg05, #256
0c340     00 1C 06 F6 | 	mov	arg06, #0
0c344     42 00 00 FF 
0c348     E4 E4 85 F1 | 	sub	objptr, ##34020
0c34c     F4 43 B1 FD | 	call	#_audio096_spin2_play8
0c350     0B 00 00 FF 
0c354     CC E4 85 F1 | 	sub	objptr, ##5836
0c358     05 00 00 FF 
0c35c     B8 13 06 F6 | 	mov	arg01, ##3000
0c360     78 4A B1 FD | 	call	#__system___waitms
0c364     50 00 00 FF 
0c368     B0 E4 05 F1 | 	add	objptr, ##41136
0c36c     F2 00 68 FC | 	wrlong	#0, objptr
0c370     50 00 00 FF 
0c374     B0 E4 85 F1 | 	sub	objptr, ##41136
0c378     72 12 06 F6 | 	mov	arg01, #114
0c37c     00 14 06 F6 | 	mov	arg02, #0
0c380     4C FD BF FD | 	call	#_csave_addtoblock
0c384     62 12 06 F6 | 	mov	arg01, #98
0c388     00 14 06 F6 | 	mov	arg02, #0
0c38c     40 FD BF FD | 	call	#_csave_addtoblock
0c390     61 12 06 F6 | 	mov	arg01, #97
0c394     00 14 06 F6 | 	mov	arg02, #0
0c398     34 FD BF FD | 	call	#_csave_addtoblock
0c39c     0D 12 06 F6 | 	mov	arg01, #13
0c3a0     00 14 06 F6 | 	mov	arg02, #0
0c3a4     28 FD BF FD | 	call	#_csave_addtoblock
0c3a8                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0c3a8                 | ' waitms 3000 
0c3a8                 | ' 
0c3a8                 | ' blockptr=0
0c3a8                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0c3a8                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0c3a8     A7 02 68 FC | 	wrlong	#1, fp
0c3ac     8C 4E 05 F1 | 	add	fp, #140
0c3b0     A7 12 02 FB | 	rdlong	arg01, fp
0c3b4     8C 4E 85 F1 | 	sub	fp, #140
0c3b8     09 1F 02 F6 | 	mov	local01, arg01
0c3bc     97 06 48 FB | 	callpa	#(@LR__1068-@LR__1067)>>2,fcache_load_ptr_
0c3c0                 | LR__1067
0c3c0     0F FB C9 FA | 	rdbyte	result1, local01 wz
0c3c4     01 1E 06 51 |  if_ne	add	local01, #1
0c3c8     F4 FF 9F 5D |  if_ne	jmp	#LR__1067
0c3cc                 | LR__1068
0c3cc     09 1F 82 F1 | 	sub	local01, arg01
0c3d0     0F 21 02 F6 | 	mov	local02, local01
0c3d4     01 20 06 F1 | 	add	local02, #1
0c3d8                 | LR__1069
0c3d8     A7 1A 02 FB | 	rdlong	arg05, fp
0c3dc     10 1B 52 F2 | 	cmps	arg05, local02 wc
0c3e0     34 00 90 3D |  if_ae	jmp	#LR__1070
0c3e4     8C 4E 05 F1 | 	add	fp, #140
0c3e8     A7 12 02 FB | 	rdlong	arg01, fp
0c3ec     8C 4E 85 F1 | 	sub	fp, #140
0c3f0     A7 14 02 FB | 	rdlong	arg02, fp
0c3f4     01 16 06 F6 | 	mov	arg03, #1
0c3f8     80 68 B1 FD | 	call	#__system__Mid_S
0c3fc     FD 12 C2 FA | 	rdbyte	arg01, result1
0c400     00 14 06 F6 | 	mov	arg02, #0
0c404     C8 FC BF FD | 	call	#_csave_addtoblock
0c408     A7 1A 02 FB | 	rdlong	arg05, fp
0c40c     01 1A 06 F1 | 	add	arg05, #1
0c410     A7 1A 62 FC | 	wrlong	arg05, fp
0c414     C0 FF 9F FD | 	jmp	#LR__1069
0c418                 | LR__1070
0c418     00 12 06 F6 | 	mov	arg01, #0
0c41c     00 14 06 F6 | 	mov	arg02, #0
0c420     AC FC BF FD | 	call	#_csave_addtoblock
0c424     72 12 06 F6 | 	mov	arg01, #114
0c428     00 14 06 F6 | 	mov	arg02, #0
0c42c     A0 FC BF FD | 	call	#_csave_addtoblock
0c430     62 12 06 F6 | 	mov	arg01, #98
0c434     00 14 06 F6 | 	mov	arg02, #0
0c438     94 FC BF FD | 	call	#_csave_addtoblock
0c43c     73 12 06 F6 | 	mov	arg01, #115
0c440     00 14 06 F6 | 	mov	arg02, #0
0c444     88 FC BF FD | 	call	#_csave_addtoblock
0c448     0D 12 06 F6 | 	mov	arg01, #13
0c44c     00 14 06 F6 | 	mov	arg02, #0
0c450     7C FC BF FD | 	call	#_csave_addtoblock
0c454     4A 00 00 FF 
0c458     84 E4 05 F1 | 	add	objptr, ##38020
0c45c     F2 22 02 FB | 	rdlong	local03, objptr
0c460     4A 00 00 FF 
0c464     84 E4 85 F1 | 	sub	objptr, ##38020
0c468     9C 4E 05 F1 | 	add	fp, #156
0c46c     A7 22 62 FC | 	wrlong	local03, fp
0c470     9C 4E 85 F1 | 	sub	fp, #156
0c474                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0c474                 | ' 
0c474                 | ' saveptr=programstart
0c474                 | ' do
0c474                 | LR__1071
0c474     A0 4E 05 F1 | 	add	fp, #160
0c478     A7 12 02 F6 | 	mov	arg01, fp
0c47c     04 4E 85 F1 | 	sub	fp, #4
0c480     A7 14 02 FB | 	rdlong	arg02, fp
0c484     9C 4E 85 F1 | 	sub	fp, #156
0c488     18 16 06 F6 | 	mov	arg03, #24
0c48c     0B 00 00 FF 
0c490     CC E4 05 F1 | 	add	objptr, ##5836
0c494     10 3A B1 FD | 	call	#_psram_spin2_read1
0c498     0C 4E 05 F1 | 	add	fp, #12
0c49c     A7 12 02 F6 | 	mov	arg01, fp
0c4a0     9C 4E 05 F1 | 	add	fp, #156
0c4a4     A7 14 02 FB | 	rdlong	arg02, fp
0c4a8     04 4E 05 F1 | 	add	fp, #4
0c4ac     A7 16 02 FB | 	rdlong	arg03, fp
0c4b0     AC 4E 85 F1 | 	sub	fp, #172
0c4b4     F0 39 B1 FD | 	call	#_psram_spin2_read1
0c4b8     0B 00 00 FF 
0c4bc     CC E4 85 F1 | 	sub	objptr, ##5836
0c4c0     AC 4E 05 F1 | 	add	fp, #172
0c4c4     A7 12 02 FB | 	rdlong	arg01, fp
0c4c8     AC 4E 85 F1 | 	sub	fp, #172
0c4cc     00 14 06 F6 | 	mov	arg02, #0
0c4d0     FC FB BF FD | 	call	#_csave_addtoblock
0c4d4                 | ' 
0c4d4                 | '   psram.read1(varptr(header(0)),saveptr,24)
0c4d4                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0c4d4                 | '   csave_addtoblock(header(3),0) ' that's always <255
0c4d4                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)  :next i
0c4d4     A7 00 68 FC | 	wrlong	#0, fp
0c4d8     AC 4E 05 F1 | 	add	fp, #172
0c4dc     A7 24 02 FB | 	rdlong	local04, fp
0c4e0     AC 4E 85 F1 | 	sub	fp, #172
0c4e4                 | LR__1072
0c4e4     A7 22 02 FB | 	rdlong	local03, fp
0c4e8     12 23 52 F2 | 	cmps	local03, local04 wc
0c4ec     2C 00 90 3D |  if_ae	jmp	#LR__1073
0c4f0     A7 22 02 FB | 	rdlong	local03, fp
0c4f4     0C 4E 05 F1 | 	add	fp, #12
0c4f8     A7 22 02 F1 | 	add	local03, fp
0c4fc     11 13 C2 FA | 	rdbyte	arg01, local03
0c500     00 14 06 F6 | 	mov	arg02, #0
0c504     0C 4E 85 F1 | 	sub	fp, #12
0c508     C4 FB BF FD | 	call	#_csave_addtoblock
0c50c     A7 22 02 FB | 	rdlong	local03, fp
0c510     01 22 06 F1 | 	add	local03, #1
0c514     A7 22 62 FC | 	wrlong	local03, fp
0c518     C8 FF 9F FD | 	jmp	#LR__1072
0c51c                 | LR__1073
0c51c     B4 4E 05 F1 | 	add	fp, #180
0c520     A7 22 02 FB | 	rdlong	local03, fp
0c524     18 4E 85 F1 | 	sub	fp, #24
0c528     A7 22 62 FC | 	wrlong	local03, fp
0c52c     18 4E 05 F1 | 	add	fp, #24
0c530     A7 22 02 FB | 	rdlong	local03, fp
0c534     B4 4E 85 F1 | 	sub	fp, #180
0c538     FF FF 3F FF 
0c53c     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0c540     30 FF 9F 5D |  if_ne	jmp	#LR__1071
0c544     00 12 06 F6 | 	mov	arg01, #0
0c548     01 14 06 F6 | 	mov	arg02, #1
0c54c     80 FB BF FD | 	call	#_csave_addtoblock
0c550     37 00 00 FF 
0c554     10 E4 05 F1 | 	add	objptr, ##28176
0c558     F2 12 02 FB | 	rdlong	arg01, objptr
0c55c     37 00 00 FF 
0c560     10 E4 85 F1 | 	sub	objptr, ##28176
0c564     D4 13 06 F1 | 	add	arg01, #468
0c568     09 01 58 FC | 	wrword	#0, arg01
0c56c                 | LR__1074
0c56c     A7 F0 03 F6 | 	mov	ptra, fp
0c570     B2 00 A0 FD | 	call	#popregs_
0c574                 | _test_csave_ret
0c574     2D 00 64 FD | 	ret
0c578                 | 
0c578                 | ' 
0c578                 | ' ' ----------------- Save the program
0c578                 | ' 
0c578                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0c578                 | _do_save
0c578     04 4A 05 F6 | 	mov	COUNT_, #4
0c57c     A8 00 A0 FD | 	call	#pushregs_
0c580     01 00 00 FF 
0c584     C0 F0 07 F1 | 	add	ptra, ##704
0c588     4A 00 00 FF 
0c58c     80 E4 05 F1 | 	add	objptr, ##38016
0c590     F2 1E 02 FB | 	rdlong	local01, objptr
0c594     0F 21 02 F6 | 	mov	local02, local01
0c598     01 20 66 F0 | 	shl	local02, #1
0c59c     0F 21 02 F1 | 	add	local02, local01
0c5a0     02 20 66 F0 | 	shl	local02, #2
0c5a4     03 00 00 FF 
0c5a8     04 E4 85 F1 | 	sub	objptr, ##1540
0c5ac     F2 20 02 F1 | 	add	local02, objptr
0c5b0     10 23 02 FB | 	rdlong	local03, local02
0c5b4     01 00 00 FF 
0c5b8     10 4E 05 F1 | 	add	fp, ##528
0c5bc     A7 22 62 FC | 	wrlong	local03, fp
0c5c0                 | ' 
0c5c0                 | ' numpar=compiledline(lineptr_e).result.uresult
0c5c0                 | ' 
0c5c0                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0c5c0     01 00 00 FF 
0c5c4     10 4E 85 F1 | 	sub	fp, ##528
0c5c8     01 22 56 F2 | 	cmps	local03, #1 wc
0c5cc     47 00 00 FF 
0c5d0     7C E4 85 F1 | 	sub	objptr, ##36476
0c5d4     20 00 90 CD |  if_b	jmp	#LR__1080
0c5d8     7C F4 BF FD | 	call	#_pop
0c5dc     A7 FA 61 FC | 	wrlong	result1, fp
0c5e0     04 4E 05 F1 | 	add	fp, #4
0c5e4     A7 FC 61 FC | 	wrlong	result2, fp
0c5e8     04 4E 05 F1 | 	add	fp, #4
0c5ec     A7 FE 61 FC | 	wrlong	result3, fp
0c5f0     08 4E 85 F1 | 	sub	fp, #8
0c5f4     24 00 90 FD | 	jmp	#LR__1081
0c5f8                 | LR__1080
0c5f8     51 00 00 FF 
0c5fc     D4 E5 05 F1 | 	add	objptr, ##41940
0c600     F2 22 02 FB | 	rdlong	local03, objptr
0c604     51 00 00 FF 
0c608     D4 E5 85 F1 | 	sub	objptr, ##41940
0c60c     A7 22 62 FC | 	wrlong	local03, fp
0c610     08 4E 05 F1 | 	add	fp, #8
0c614     A7 3E 68 FC | 	wrlong	#31, fp
0c618     08 4E 85 F1 | 	sub	fp, #8
0c61c                 | LR__1081
0c61c                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0c61c     4A 00 00 FF 
0c620     84 E4 05 F1 | 	add	objptr, ##38020
0c624     F2 12 02 FB | 	rdlong	arg01, objptr
0c628     4A 00 00 FF 
0c62c     84 E4 85 F1 | 	sub	objptr, ##38020
0c630     B0 11 B1 FD | 	call	#_pslpeek
0c634     FF FF 7F FF 
0c638     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0c63c     0C 00 90 5D |  if_ne	jmp	#LR__1082
0c640     1B 12 06 F6 | 	mov	arg01, #27
0c644     08 0F B1 FD | 	call	#_printerror
0c648     1C 03 90 FD | 	jmp	#LR__1088
0c64c                 | LR__1082
0c64c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0c64c     08 4E 05 F1 | 	add	fp, #8
0c650     A7 22 02 FB | 	rdlong	local03, fp
0c654     08 4E 85 F1 | 	sub	fp, #8
0c658     2B 22 0E F2 | 	cmp	local03, #43 wz
0c65c     18 00 90 5D |  if_ne	jmp	#LR__1083
0c660     A7 12 02 FB | 	rdlong	arg01, fp
0c664     68 4D B0 FD | 	call	#_convertstring
0c668     A7 FA 61 FC | 	wrlong	result1, fp
0c66c     08 4E 05 F1 | 	add	fp, #8
0c670     A7 3E 68 FC | 	wrlong	#31, fp
0c674     08 4E 85 F1 | 	sub	fp, #8
0c678                 | LR__1083
0c678                 | ' if t1.result_type=result_string then
0c678     08 4E 05 F1 | 	add	fp, #8
0c67c     A7 22 02 FB | 	rdlong	local03, fp
0c680     08 4E 85 F1 | 	sub	fp, #8
0c684     1F 22 0E F2 | 	cmp	local03, #31 wz
0c688     DC 02 90 5D |  if_ne	jmp	#LR__1087
0c68c                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0c68c     A7 12 02 FB | 	rdlong	arg01, fp
0c690     84 01 00 FF 
0c694     C3 15 06 F6 | 	mov	arg02, ##@LR__5433
0c698     74 44 B1 FD | 	call	#__system___string_cmp
0c69c     00 FA 0D F2 | 	cmp	result1, #0 wz
0c6a0     51 00 00 AF 
0c6a4     D4 E5 05 A1 |  if_e	add	objptr, ##41940
0c6a8     F2 22 02 AB |  if_e	rdlong	local03, objptr
0c6ac     A7 22 62 AC |  if_e	wrlong	local03, fp
0c6b0     51 00 00 AF 
0c6b4     D4 E5 85 A1 |  if_e	sub	objptr, ##41940
0c6b8     A7 22 02 5B |  if_ne	rdlong	local03, fp
0c6bc     51 00 00 5F 
0c6c0     D4 E5 05 51 |  if_ne	add	objptr, ##41940
0c6c4     F2 22 62 5C |  if_ne	wrlong	local03, objptr
0c6c8     51 00 00 5F 
0c6cc     D4 E5 85 51 |  if_ne	sub	objptr, ##41940
0c6d0                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0c6d0     09 12 06 F6 | 	mov	arg01, #9
0c6d4     80 94 B1 FD | 	call	#__system__close
0c6d8     09 22 06 F6 | 	mov	local03, #9
0c6dc     4A 00 00 FF 
0c6e0     90 E4 05 F1 | 	add	objptr, ##38032
0c6e4     F2 12 02 FB | 	rdlong	arg01, objptr
0c6e8     4A 00 00 FF 
0c6ec     90 E4 85 F1 | 	sub	objptr, ##38032
0c6f0     84 01 00 FF 
0c6f4     C4 15 06 F6 | 	mov	arg02, ##@LR__5434
0c6f8     48 44 B1 FD | 	call	#__system___string_concat
0c6fc     FD 12 02 F6 | 	mov	arg01, result1
0c700     A7 14 02 FB | 	rdlong	arg02, fp
0c704     3C 44 B1 FD | 	call	#__system___string_concat
0c708     FD 14 02 F6 | 	mov	arg02, result1
0c70c     11 13 02 F6 | 	mov	arg01, local03
0c710     0D 16 06 F6 | 	mov	arg03, #13
0c714     D4 4F B1 FD | 	call	#__system___basic_open_string
0c718     01 00 00 FF 
0c71c     0C 4E 05 F1 | 	add	fp, ##524
0c720     A7 0A 68 FC | 	wrlong	#5, fp
0c724     4A 00 00 FF 
0c728     84 E4 05 F1 | 	add	objptr, ##38020
0c72c     F2 22 02 FB | 	rdlong	local03, objptr
0c730     4A 00 00 FF 
0c734     84 E4 85 F1 | 	sub	objptr, ##38020
0c738     10 4E 05 F1 | 	add	fp, #16
0c73c     A7 22 62 FC | 	wrlong	local03, fp
0c740     01 00 00 FF 
0c744     1C 4E 85 F1 | 	sub	fp, ##540
0c748                 | ' '  put #9,1,fileheader,1
0c748                 | '   i=5
0c748                 | '   saveptr=programstart
0c748                 | '   do
0c748                 | LR__1084
0c748     01 00 00 FF 
0c74c     20 4E 05 F1 | 	add	fp, ##544
0c750     A7 12 02 F6 | 	mov	arg01, fp
0c754     04 4E 85 F1 | 	sub	fp, #4
0c758     A7 14 02 FB | 	rdlong	arg02, fp
0c75c     01 00 00 FF 
0c760     1C 4E 85 F1 | 	sub	fp, ##540
0c764     18 16 06 F6 | 	mov	arg03, #24
0c768     0B 00 00 FF 
0c76c     CC E4 05 F1 | 	add	objptr, ##5836
0c770     34 37 B1 FD | 	call	#_psram_spin2_read1
0c774     01 00 00 FF 
0c778     38 4E 05 F1 | 	add	fp, ##568
0c77c     A7 12 02 F6 | 	mov	arg01, fp
0c780     10 4E 85 F1 | 	sub	fp, #16
0c784     A7 14 02 FB | 	rdlong	arg02, fp
0c788     04 4E 05 F1 | 	add	fp, #4
0c78c     A7 16 02 FB | 	rdlong	arg03, fp
0c790     01 00 00 FF 
0c794     2C 4E 85 F1 | 	sub	fp, ##556
0c798     0C 37 B1 FD | 	call	#_psram_spin2_read1
0c79c     0B 00 00 FF 
0c7a0     CC E4 85 F1 | 	sub	objptr, ##5836
0c7a4     84 01 00 FF 
0c7a8     C6 23 06 F6 | 	mov	local03, ##@LR__5435
0c7ac     01 00 00 FF 
0c7b0     B8 4E 05 F1 | 	add	fp, ##696
0c7b4     A7 22 62 FC | 	wrlong	local03, fp
0c7b8                 | '     psram.read1(varptr(header(0)),saveptr,24)
0c7b8                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0c7b8                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0c7b8     AC 4E 85 F1 | 	sub	fp, #172
0c7bc     A7 02 68 FC | 	wrlong	#1, fp
0c7c0     20 4E 05 F1 | 	add	fp, #32
0c7c4     A7 24 02 FB | 	rdlong	local04, fp
0c7c8     01 00 00 FF 
0c7cc     2C 4E 85 F1 | 	sub	fp, ##556
0c7d0     01 24 06 F1 | 	add	local04, #1
0c7d4                 | LR__1085
0c7d4     01 00 00 FF 
0c7d8     0C 4E 05 F1 | 	add	fp, ##524
0c7dc     A7 22 02 FB | 	rdlong	local03, fp
0c7e0     01 00 00 FF 
0c7e4     0C 4E 85 F1 | 	sub	fp, ##524
0c7e8     12 23 52 F2 | 	cmps	local03, local04 wc
0c7ec     64 00 90 3D |  if_ae	jmp	#LR__1086
0c7f0     01 00 00 FF 
0c7f4     B8 4E 05 F1 | 	add	fp, ##696
0c7f8     A7 1E 02 FB | 	rdlong	local01, fp
0c7fc     AC 4E 85 F1 | 	sub	fp, #172
0c800     A7 22 02 FB | 	rdlong	local03, fp
0c804     01 22 86 F1 | 	sub	local03, #1
0c808     2C 4E 05 F1 | 	add	fp, #44
0c80c     A7 22 02 F1 | 	add	local03, fp
0c810     11 13 C2 FA | 	rdbyte	arg01, local03
0c814     01 00 00 FF 
0c818     38 4E 85 F1 | 	sub	fp, ##568
0c81c     08 65 B1 FD | 	call	#__system__Chr_S
0c820     FD 14 02 F6 | 	mov	arg02, result1
0c824     0F 13 02 F6 | 	mov	arg01, local01
0c828     18 43 B1 FD | 	call	#__system___string_concat
0c82c     01 00 00 FF 
0c830     B8 4E 05 F1 | 	add	fp, ##696
0c834     A7 FA 61 FC | 	wrlong	result1, fp
0c838     AC 4E 85 F1 | 	sub	fp, #172
0c83c     A7 22 02 FB | 	rdlong	local03, fp
0c840     01 22 06 F1 | 	add	local03, #1
0c844     A7 22 62 FC | 	wrlong	local03, fp
0c848     01 00 00 FF 
0c84c     0C 4E 85 F1 | 	sub	fp, ##524
0c850     80 FF 9F FD | 	jmp	#LR__1085
0c854                 | LR__1086
0c854                 | '  '   put #9,i,header(3),1 : i+=4
0c854                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0c854                 | '      print #9, saveline$
0c854     09 12 06 F6 | 	mov	arg01, #9
0c858     CC 9C B1 FD | 	call	#__system___getiolock_0540
0c85c     FD 12 02 F6 | 	mov	arg01, result1
0c860     84 42 B1 FD | 	call	#__system___lockmem
0c864     01 00 00 FF 
0c868     B8 4E 05 F1 | 	add	fp, ##696
0c86c     A7 14 02 FB | 	rdlong	arg02, fp
0c870     01 00 00 FF 
0c874     B8 4E 85 F1 | 	sub	fp, ##696
0c878     09 12 06 F6 | 	mov	arg01, #9
0c87c     00 16 06 F6 | 	mov	arg03, #0
0c880     58 4F B1 FD | 	call	#__system___basic_print_string
0c884     09 12 06 F6 | 	mov	arg01, #9
0c888     0A 14 06 F6 | 	mov	arg02, #10
0c88c     00 16 06 F6 | 	mov	arg03, #0
0c890     F0 4E B1 FD | 	call	#__system___basic_print_char
0c894     09 12 06 F6 | 	mov	arg01, #9
0c898     8C 9C B1 FD | 	call	#__system___getiolock_0540
0c89c     FD 00 68 FC | 	wrlong	#0, result1
0c8a0     01 00 00 FF 
0c8a4     34 4E 05 F1 | 	add	fp, ##564
0c8a8     A7 22 02 FB | 	rdlong	local03, fp
0c8ac     18 4E 85 F1 | 	sub	fp, #24
0c8b0     A7 22 62 FC | 	wrlong	local03, fp
0c8b4     18 4E 05 F1 | 	add	fp, #24
0c8b8     A7 22 02 FB | 	rdlong	local03, fp
0c8bc     01 00 00 FF 
0c8c0     34 4E 85 F1 | 	sub	fp, ##564
0c8c4     FF FF 3F FF 
0c8c8     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0c8cc     78 FE 9F 5D |  if_ne	jmp	#LR__1084
0c8d0                 | '   close #9  
0c8d0     09 12 06 F6 | 	mov	arg01, #9
0c8d4     80 92 B1 FD | 	call	#__system__close
0c8d8                 | '   print "Saved as ";currentdir$+"/"+loadname
0c8d8     00 12 06 F6 | 	mov	arg01, #0
0c8dc     48 9C B1 FD | 	call	#__system___getiolock_0540
0c8e0     FD 12 02 F6 | 	mov	arg01, result1
0c8e4     00 42 B1 FD | 	call	#__system___lockmem
0c8e8     84 01 00 FF 
0c8ec     C7 15 06 F6 | 	mov	arg02, ##@LR__5436
0c8f0     00 12 06 F6 | 	mov	arg01, #0
0c8f4     00 16 06 F6 | 	mov	arg03, #0
0c8f8     E0 4E B1 FD | 	call	#__system___basic_print_string
0c8fc     00 20 06 F6 | 	mov	local02, #0
0c900     4A 00 00 FF 
0c904     90 E4 05 F1 | 	add	objptr, ##38032
0c908     F2 12 02 FB | 	rdlong	arg01, objptr
0c90c     4A 00 00 FF 
0c910     90 E4 85 F1 | 	sub	objptr, ##38032
0c914     84 01 00 FF 
0c918     D1 15 06 F6 | 	mov	arg02, ##@LR__5437
0c91c     24 42 B1 FD | 	call	#__system___string_concat
0c920     FD 12 02 F6 | 	mov	arg01, result1
0c924     51 00 00 FF 
0c928     D4 E5 05 F1 | 	add	objptr, ##41940
0c92c     F2 14 02 FB | 	rdlong	arg02, objptr
0c930     51 00 00 FF 
0c934     D4 E5 85 F1 | 	sub	objptr, ##41940
0c938     08 42 B1 FD | 	call	#__system___string_concat
0c93c     FD 14 02 F6 | 	mov	arg02, result1
0c940     10 13 02 F6 | 	mov	arg01, local02
0c944     00 16 06 F6 | 	mov	arg03, #0
0c948     90 4E B1 FD | 	call	#__system___basic_print_string
0c94c     00 12 06 F6 | 	mov	arg01, #0
0c950     0A 14 06 F6 | 	mov	arg02, #10
0c954     00 16 06 F6 | 	mov	arg03, #0
0c958     28 4E B1 FD | 	call	#__system___basic_print_char
0c95c     00 12 06 F6 | 	mov	arg01, #0
0c960     C4 9B B1 FD | 	call	#__system___getiolock_0540
0c964     FD 00 68 FC | 	wrlong	#0, result1
0c968                 | LR__1087
0c968                 | LR__1088
0c968     A7 F0 03 F6 | 	mov	ptra, fp
0c96c     B2 00 A0 FD | 	call	#popregs_
0c970                 | _do_save_ret
0c970     2D 00 64 FD | 	ret
0c974                 | 
0c974                 | ' 
0c974                 | ' '----------------- Load the program
0c974                 | ' 'lo todo: errors while loading
0c974                 | ' 
0c974                 | ' sub do_enter
0c974                 | _do_enter
0c974     02 00 00 FF 
0c978     D2 12 06 F6 | 	mov	arg01, ##1234
0c97c     04 00 B0 FD | 	call	#_do_load
0c980                 | _do_enter_ret
0c980     2D 00 64 FD | 	ret
0c984                 | 
0c984                 | ' 
0c984                 | ' 
0c984                 | ' sub do_load(amode=0 as integer)   ' here amode = 2, why?
0c984                 | _do_load
0c984     01 4A 05 F6 | 	mov	COUNT_, #1
0c988     A8 00 A0 FD | 	call	#pushregs_
0c98c     AC F0 07 F1 | 	add	ptra, #172
0c990     A7 12 62 FC | 	wrlong	arg01, fp
0c994     4A 00 00 FF 
0c998     80 E4 05 F1 | 	add	objptr, ##38016
0c99c     F2 14 02 FB | 	rdlong	arg02, objptr
0c9a0     0A 13 02 F6 | 	mov	arg01, arg02
0c9a4     01 12 66 F0 | 	shl	arg01, #1
0c9a8     0A 13 02 F1 | 	add	arg01, arg02
0c9ac     02 12 66 F0 | 	shl	arg01, #2
0c9b0     03 00 00 FF 
0c9b4     04 E4 85 F1 | 	sub	objptr, ##1540
0c9b8     F2 12 02 F1 | 	add	arg01, objptr
0c9bc     09 15 02 FB | 	rdlong	arg02, arg01
0c9c0     1C 4E 05 F1 | 	add	fp, #28
0c9c4     A7 14 62 FC | 	wrlong	arg02, fp
0c9c8     8C 4E 05 F1 | 	add	fp, #140
0c9cc     A7 12 02 F6 | 	mov	arg01, fp
0c9d0     47 00 00 FF 
0c9d4     7C E4 85 F1 | 	sub	objptr, ##36476
0c9d8     80 4E 85 F1 | 	sub	fp, #128
0c9dc     09 4F 61 FC | 	wrlong	fp, arg01
0c9e0                 | ' numpar=compiledline(lineptr_e).result.uresult
0c9e0                 | ' lpoke varptr(line2$),varptr(line2)
0c9e0                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0c9e0     0C 4E 85 F1 | 	sub	fp, #12
0c9e4     A7 1E 02 FB | 	rdlong	local01, fp
0c9e8     1C 4E 85 F1 | 	sub	fp, #28
0c9ec     01 1E 56 F2 | 	cmps	local01, #1 wc
0c9f0     24 00 90 CD |  if_b	jmp	#LR__1090
0c9f4     60 F0 BF FD | 	call	#_pop
0c9f8     04 4E 05 F1 | 	add	fp, #4
0c9fc     A7 FA 61 FC | 	wrlong	result1, fp
0ca00     04 4E 05 F1 | 	add	fp, #4
0ca04     A7 FC 61 FC | 	wrlong	result2, fp
0ca08     04 4E 05 F1 | 	add	fp, #4
0ca0c     A7 FE 61 FC | 	wrlong	result3, fp
0ca10     0C 4E 85 F1 | 	sub	fp, #12
0ca14     28 00 90 FD | 	jmp	#LR__1091
0ca18                 | LR__1090
0ca18     51 00 00 FF 
0ca1c     D4 E5 05 F1 | 	add	objptr, ##41940
0ca20     F2 1E 02 FB | 	rdlong	local01, objptr
0ca24     51 00 00 FF 
0ca28     D4 E5 85 F1 | 	sub	objptr, ##41940
0ca2c     04 4E 05 F1 | 	add	fp, #4
0ca30     A7 1E 62 FC | 	wrlong	local01, fp
0ca34     08 4E 05 F1 | 	add	fp, #8
0ca38     A7 3E 68 FC | 	wrlong	#31, fp
0ca3c     0C 4E 85 F1 | 	sub	fp, #12
0ca40                 | LR__1091
0ca40                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0ca40                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0ca40     0C 4E 05 F1 | 	add	fp, #12
0ca44     A7 1E 02 FB | 	rdlong	local01, fp
0ca48     0C 4E 85 F1 | 	sub	fp, #12
0ca4c     2B 1E 0E F2 | 	cmp	local01, #43 wz
0ca50     24 00 90 5D |  if_ne	jmp	#LR__1092
0ca54     04 4E 05 F1 | 	add	fp, #4
0ca58     A7 12 02 FB | 	rdlong	arg01, fp
0ca5c     04 4E 85 F1 | 	sub	fp, #4
0ca60     6C 49 B0 FD | 	call	#_convertstring
0ca64     04 4E 05 F1 | 	add	fp, #4
0ca68     A7 FA 61 FC | 	wrlong	result1, fp
0ca6c     08 4E 05 F1 | 	add	fp, #8
0ca70     A7 3E 68 FC | 	wrlong	#31, fp
0ca74     0C 4E 85 F1 | 	sub	fp, #12
0ca78                 | LR__1092
0ca78                 | ' if t1.result_type=result_string then
0ca78     0C 4E 05 F1 | 	add	fp, #12
0ca7c     A7 1E 02 FB | 	rdlong	local01, fp
0ca80     0C 4E 85 F1 | 	sub	fp, #12
0ca84     1F 1E 0E F2 | 	cmp	local01, #31 wz
0ca88     E0 02 90 5D |  if_ne	jmp	#LR__1098
0ca8c                 | '   if amode<>1234 then do_new
0ca8c     A7 1E 02 FB | 	rdlong	local01, fp
0ca90     02 00 00 FF 
0ca94     D2 1E 0E F2 | 	cmp	local01, ##1234 wz
0ca98     34 33 B0 5D |  if_ne	call	#_do_new
0ca9c                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0ca9c     04 4E 05 F1 | 	add	fp, #4
0caa0     A7 12 02 FB | 	rdlong	arg01, fp
0caa4     04 4E 85 F1 | 	sub	fp, #4
0caa8     84 01 00 FF 
0caac     D3 15 06 F6 | 	mov	arg02, ##@LR__5438
0cab0     5C 40 B1 FD | 	call	#__system___string_cmp
0cab4     00 FA 0D F2 | 	cmp	result1, #0 wz
0cab8     24 00 90 5D |  if_ne	jmp	#LR__1093
0cabc     51 00 00 FF 
0cac0     D4 E5 05 F1 | 	add	objptr, ##41940
0cac4     F2 1E 02 FB | 	rdlong	local01, objptr
0cac8     51 00 00 FF 
0cacc     D4 E5 85 F1 | 	sub	objptr, ##41940
0cad0     04 4E 05 F1 | 	add	fp, #4
0cad4     A7 1E 62 FC | 	wrlong	local01, fp
0cad8     04 4E 85 F1 | 	sub	fp, #4
0cadc     20 00 90 FD | 	jmp	#LR__1094
0cae0                 | LR__1093
0cae0     04 4E 05 F1 | 	add	fp, #4
0cae4     A7 1E 02 FB | 	rdlong	local01, fp
0cae8     04 4E 85 F1 | 	sub	fp, #4
0caec     51 00 00 FF 
0caf0     D4 E5 05 F1 | 	add	objptr, ##41940
0caf4     F2 1E 62 FC | 	wrlong	local01, objptr
0caf8     51 00 00 FF 
0cafc     D4 E5 85 F1 | 	sub	objptr, ##41940
0cb00                 | LR__1094
0cb00                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0cb00     09 12 06 F6 | 	mov	arg01, #9
0cb04     50 90 B1 FD | 	call	#__system__close
0cb08     09 1E 06 F6 | 	mov	local01, #9
0cb0c     4A 00 00 FF 
0cb10     90 E4 05 F1 | 	add	objptr, ##38032
0cb14     F2 12 02 FB | 	rdlong	arg01, objptr
0cb18     4A 00 00 FF 
0cb1c     90 E4 85 F1 | 	sub	objptr, ##38032
0cb20     84 01 00 FF 
0cb24     D4 15 06 F6 | 	mov	arg02, ##@LR__5439
0cb28     18 40 B1 FD | 	call	#__system___string_concat
0cb2c     FD 12 02 F6 | 	mov	arg01, result1
0cb30     04 4E 05 F1 | 	add	fp, #4
0cb34     A7 14 02 FB | 	rdlong	arg02, fp
0cb38     04 4E 85 F1 | 	sub	fp, #4
0cb3c     04 40 B1 FD | 	call	#__system___string_concat
0cb40     FD 14 02 F6 | 	mov	arg02, result1
0cb44     0F 13 02 F6 | 	mov	arg01, local01
0cb48     00 16 06 F6 | 	mov	arg03, #0
0cb4c     9C 4B B1 FD | 	call	#__system___basic_open_string
0cb50     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0cb54     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0cb58     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0cb5c     14 4E 05 F1 | 	add	fp, #20
0cb60     A7 FA 61 FC | 	wrlong	result1, fp
0cb64                 | '   r=geterr() 
0cb64                 | '   if r then 
0cb64     14 4E 85 F1 | 	sub	fp, #20
0cb68     50 01 90 AD |  if_e	jmp	#LR__1096
0cb6c                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
0cb6c     09 12 06 F6 | 	mov	arg01, #9
0cb70     E4 8F B1 FD | 	call	#__system__close
0cb74     09 1E 06 F6 | 	mov	local01, #9
0cb78     4A 00 00 FF 
0cb7c     90 E4 05 F1 | 	add	objptr, ##38032
0cb80     F2 12 02 FB | 	rdlong	arg01, objptr
0cb84     4A 00 00 FF 
0cb88     90 E4 85 F1 | 	sub	objptr, ##38032
0cb8c     84 01 00 FF 
0cb90     D6 15 06 F6 | 	mov	arg02, ##@LR__5440
0cb94     AC 3F B1 FD | 	call	#__system___string_concat
0cb98     FD 12 02 F6 | 	mov	arg01, result1
0cb9c     04 4E 05 F1 | 	add	fp, #4
0cba0     A7 14 02 FB | 	rdlong	arg02, fp
0cba4     04 4E 85 F1 | 	sub	fp, #4
0cba8     98 3F B1 FD | 	call	#__system___string_concat
0cbac     FD 12 02 F6 | 	mov	arg01, result1
0cbb0     84 01 00 FF 
0cbb4     D8 15 06 F6 | 	mov	arg02, ##@LR__5441
0cbb8     88 3F B1 FD | 	call	#__system___string_concat
0cbbc     FD 14 02 F6 | 	mov	arg02, result1
0cbc0     0F 13 02 F6 | 	mov	arg01, local01
0cbc4     00 16 06 F6 | 	mov	arg03, #0
0cbc8     20 4B B1 FD | 	call	#__system___basic_open_string
0cbcc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0cbd0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0cbd4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0cbd8     14 4E 05 F1 | 	add	fp, #20
0cbdc     A7 FA 61 FC | 	wrlong	result1, fp
0cbe0                 | '     r=geterr() 
0cbe0                 | '     if r then 
0cbe0     14 4E 85 F1 | 	sub	fp, #20
0cbe4     A0 00 90 AD |  if_e	jmp	#LR__1095
0cbe8                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
0cbe8     00 12 06 F6 | 	mov	arg01, #0
0cbec     38 99 B1 FD | 	call	#__system___getiolock_0540
0cbf0     FD 12 02 F6 | 	mov	arg01, result1
0cbf4     F0 3E B1 FD | 	call	#__system___lockmem
0cbf8     84 01 00 FF 
0cbfc     DD 15 06 F6 | 	mov	arg02, ##@LR__5442
0cc00     00 12 06 F6 | 	mov	arg01, #0
0cc04     00 16 06 F6 | 	mov	arg03, #0
0cc08     D0 4B B1 FD | 	call	#__system___basic_print_string
0cc0c     14 4E 05 F1 | 	add	fp, #20
0cc10     A7 14 02 FB | 	rdlong	arg02, fp
0cc14     14 4E 85 F1 | 	sub	fp, #20
0cc18     00 12 06 F6 | 	mov	arg01, #0
0cc1c     00 16 06 F6 | 	mov	arg03, #0
0cc20     0A 18 06 F6 | 	mov	arg04, #10
0cc24     F8 4B B1 FD | 	call	#__system___basic_print_integer
0cc28     84 01 00 FF 
0cc2c     EB 15 06 F6 | 	mov	arg02, ##@LR__5443
0cc30     00 12 06 F6 | 	mov	arg01, #0
0cc34     00 16 06 F6 | 	mov	arg03, #0
0cc38     A0 4B B1 FD | 	call	#__system___basic_print_string
0cc3c     00 1E 06 F6 | 	mov	local01, #0
0cc40     14 4E 05 F1 | 	add	fp, #20
0cc44     A7 12 02 FB | 	rdlong	arg01, fp
0cc48     14 4E 85 F1 | 	sub	fp, #20
0cc4c     60 65 B1 FD | 	call	#__system___strerror
0cc50     FD 14 02 F6 | 	mov	arg02, result1
0cc54     0F 13 02 F6 | 	mov	arg01, local01
0cc58     00 16 06 F6 | 	mov	arg03, #0
0cc5c     7C 4B B1 FD | 	call	#__system___basic_print_string
0cc60     00 12 06 F6 | 	mov	arg01, #0
0cc64     0A 14 06 F6 | 	mov	arg02, #10
0cc68     00 16 06 F6 | 	mov	arg03, #0
0cc6c     14 4B B1 FD | 	call	#__system___basic_print_char
0cc70     00 12 06 F6 | 	mov	arg01, #0
0cc74     B0 98 B1 FD | 	call	#__system___getiolock_0540
0cc78     FD 00 68 FC | 	wrlong	#0, result1
0cc7c     09 12 06 F6 | 	mov	arg01, #9
0cc80     D4 8E B1 FD | 	call	#__system__close
0cc84     7C 01 90 FD | 	jmp	#LR__1100
0cc88                 | LR__1095
0cc88     51 00 00 FF 
0cc8c     D4 E5 05 F1 | 	add	objptr, ##41940
0cc90     F2 12 02 FB | 	rdlong	arg01, objptr
0cc94     51 00 00 FF 
0cc98     D4 E5 85 F1 | 	sub	objptr, ##41940
0cc9c     84 01 00 FF 
0cca0     EE 15 06 F6 | 	mov	arg02, ##@LR__5444
0cca4     9C 3E B1 FD | 	call	#__system___string_concat
0cca8     51 00 00 FF 
0ccac     D4 E5 05 F1 | 	add	objptr, ##41940
0ccb0     F2 FA 61 FC | 	wrlong	result1, objptr
0ccb4     51 00 00 FF 
0ccb8     D4 E5 85 F1 | 	sub	objptr, ##41940
0ccbc                 | LR__1096
0ccbc                 | '   close #9: open currentdir$+"/"+loadname for input as #9
0ccbc     09 12 06 F6 | 	mov	arg01, #9
0ccc0     94 8E B1 FD | 	call	#__system__close
0ccc4     09 1E 06 F6 | 	mov	local01, #9
0ccc8     4A 00 00 FF 
0cccc     90 E4 05 F1 | 	add	objptr, ##38032
0ccd0     F2 12 02 FB | 	rdlong	arg01, objptr
0ccd4     4A 00 00 FF 
0ccd8     90 E4 85 F1 | 	sub	objptr, ##38032
0ccdc     84 01 00 FF 
0cce0     F3 15 06 F6 | 	mov	arg02, ##@LR__5445
0cce4     5C 3E B1 FD | 	call	#__system___string_concat
0cce8     FD 12 02 F6 | 	mov	arg01, result1
0ccec     51 00 00 FF 
0ccf0     D4 E5 05 F1 | 	add	objptr, ##41940
0ccf4     F2 14 02 FB | 	rdlong	arg02, objptr
0ccf8     51 00 00 FF 
0ccfc     D4 E5 85 F1 | 	sub	objptr, ##41940
0cd00     40 3E B1 FD | 	call	#__system___string_concat
0cd04     FD 14 02 F6 | 	mov	arg02, result1
0cd08     0F 13 02 F6 | 	mov	arg01, local01
0cd0c     00 16 06 F6 | 	mov	arg03, #0
0cd10     D8 49 B1 FD | 	call	#__system___basic_open_string
0cd14                 | '   do
0cd14                 | LR__1097
0cd14     09 12 06 F6 | 	mov	arg01, #9
0cd18     D8 3F B1 FD | 	call	#__system___basic_read_line
0cd1c     FD 1E 02 F6 | 	mov	local01, result1
0cd20     37 00 00 FF 
0cd24     1C E4 05 F1 | 	add	objptr, ##28188
0cd28     F2 1E 62 FC | 	wrlong	local01, objptr
0cd2c     37 00 00 FF 
0cd30     1C E4 85 F1 | 	sub	objptr, ##28188
0cd34     40 49 BF FD | 	call	#_interpret
0cd38     37 00 00 FF 
0cd3c     1C E4 05 F1 | 	add	objptr, ##28188
0cd40     F2 12 02 FB | 	rdlong	arg01, objptr
0cd44     37 00 00 FF 
0cd48     1C E4 85 F1 | 	sub	objptr, ##28188
0cd4c     84 01 00 FF 
0cd50     F5 15 06 F6 | 	mov	arg02, ##@LR__5446
0cd54     B8 3D B1 FD | 	call	#__system___string_cmp
0cd58     00 FA 0D F2 | 	cmp	result1, #0 wz
0cd5c     B4 FF 9F 5D |  if_ne	jmp	#LR__1097
0cd60                 | '   close #9   
0cd60     09 12 06 F6 | 	mov	arg01, #9
0cd64     F0 8D B1 FD | 	call	#__system__close
0cd68     08 00 90 FD | 	jmp	#LR__1099
0cd6c                 | LR__1098
0cd6c     1E 12 06 F6 | 	mov	arg01, #30
0cd70     DC 07 B1 FD | 	call	#_printerror
0cd74                 | LR__1099
0cd74                 | ' print "Loaded ";currentdir$+"/"+loadname
0cd74     00 12 06 F6 | 	mov	arg01, #0
0cd78     AC 97 B1 FD | 	call	#__system___getiolock_0540
0cd7c     FD 12 02 F6 | 	mov	arg01, result1
0cd80     64 3D B1 FD | 	call	#__system___lockmem
0cd84     84 01 00 FF 
0cd88     F6 15 06 F6 | 	mov	arg02, ##@LR__5447
0cd8c     00 12 06 F6 | 	mov	arg01, #0
0cd90     00 16 06 F6 | 	mov	arg03, #0
0cd94     44 4A B1 FD | 	call	#__system___basic_print_string
0cd98     00 1E 06 F6 | 	mov	local01, #0
0cd9c     4A 00 00 FF 
0cda0     90 E4 05 F1 | 	add	objptr, ##38032
0cda4     F2 12 02 FB | 	rdlong	arg01, objptr
0cda8     4A 00 00 FF 
0cdac     90 E4 85 F1 | 	sub	objptr, ##38032
0cdb0     84 01 00 FF 
0cdb4     FE 15 06 F6 | 	mov	arg02, ##@LR__5448
0cdb8     88 3D B1 FD | 	call	#__system___string_concat
0cdbc     FD 12 02 F6 | 	mov	arg01, result1
0cdc0     51 00 00 FF 
0cdc4     D4 E5 05 F1 | 	add	objptr, ##41940
0cdc8     F2 14 02 FB | 	rdlong	arg02, objptr
0cdcc     51 00 00 FF 
0cdd0     D4 E5 85 F1 | 	sub	objptr, ##41940
0cdd4     6C 3D B1 FD | 	call	#__system___string_concat
0cdd8     FD 14 02 F6 | 	mov	arg02, result1
0cddc     0F 13 02 F6 | 	mov	arg01, local01
0cde0     00 16 06 F6 | 	mov	arg03, #0
0cde4     F4 49 B1 FD | 	call	#__system___basic_print_string
0cde8     00 12 06 F6 | 	mov	arg01, #0
0cdec     0A 14 06 F6 | 	mov	arg02, #10
0cdf0     00 16 06 F6 | 	mov	arg03, #0
0cdf4     8C 49 B1 FD | 	call	#__system___basic_print_char
0cdf8     00 12 06 F6 | 	mov	arg01, #0
0cdfc     28 97 B1 FD | 	call	#__system___getiolock_0540
0ce00     FD 00 68 FC | 	wrlong	#0, result1
0ce04                 | LR__1100
0ce04     A7 F0 03 F6 | 	mov	ptra, fp
0ce08     B2 00 A0 FD | 	call	#popregs_
0ce0c                 | _do_load_ret
0ce0c     2D 00 64 FD | 	ret
0ce10                 | 
0ce10                 | ' 
0ce10                 | ' sub do_end
0ce10                 | _do_end
0ce10     4A 00 00 FF 
0ce14     7C E4 05 F1 | 	add	objptr, ##38012
0ce18     F2 00 02 FB | 	rdlong	_var01, objptr
0ce1c     01 00 86 F1 | 	sub	_var01, #1
0ce20     04 E4 05 F1 | 	add	objptr, #4
0ce24     F2 00 62 FC | 	wrlong	_var01, objptr
0ce28     06 00 00 FF 
0ce2c     34 E4 05 F1 | 	add	objptr, ##3124
0ce30     FF FF BF FF 
0ce34     F2 FE 6B FC | 	wrlong	##2147483647, objptr
0ce38     50 00 00 FF 
0ce3c     B4 E4 85 F1 | 	sub	objptr, ##41140
0ce40                 | _do_end_ret
0ce40     2D 00 64 FD | 	ret
0ce44                 | 
0ce44                 | ' 
0ce44                 | ' '----------------- Run the program 
0ce44                 | ' 
0ce44                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0ce44                 | ' 
0ce44                 | ' sub do_run
0ce44                 | _do_run
0ce44     01 4A 05 F6 | 	mov	COUNT_, #1
0ce48     A8 00 A0 FD | 	call	#pushregs_
0ce4c     4A 00 00 FF 
0ce50     80 E4 05 F1 | 	add	objptr, ##38016
0ce54     F2 18 02 FB | 	rdlong	arg04, objptr
0ce58     0C 17 02 F6 | 	mov	arg03, arg04
0ce5c     01 16 66 F0 | 	shl	arg03, #1
0ce60     0C 17 02 F1 | 	add	arg03, arg04
0ce64     02 16 66 F0 | 	shl	arg03, #2
0ce68     03 00 00 FF 
0ce6c     04 E4 85 F1 | 	sub	objptr, ##1540
0ce70     F2 16 02 F1 | 	add	arg03, objptr
0ce74     0B 15 02 FB | 	rdlong	arg02, arg03
0ce78                 | ' numpar=compiledline(lineptr_e).result.uresult
0ce78                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
0ce78     01 14 0E F2 | 	cmp	arg02, #1 wz
0ce7c     47 00 00 FF 
0ce80     7C E4 85 F1 | 	sub	objptr, ##36476
0ce84     00 12 06 A6 |  if_e	mov	arg01, #0
0ce88     F8 FA BF AD |  if_e	call	#_do_load
0ce8c     4A 00 00 FF 
0ce90     84 E4 05 F1 | 	add	objptr, ##38020
0ce94     F2 18 02 FB | 	rdlong	arg04, objptr
0ce98     06 00 00 FF 
0ce9c     30 E4 05 F1 | 	add	objptr, ##3120
0cea0     F2 18 62 FC | 	wrlong	arg04, objptr
0cea4     04 E4 05 F1 | 	add	objptr, #4
0cea8     F2 00 68 FC | 	wrlong	#0, objptr
0ceac     04 E4 05 F1 | 	add	objptr, #4
0ceb0     FF FF FF FF 
0ceb4     F2 FE 6B FC | 	wrlong	##-1, objptr
0ceb8                 | ' if inrun>0 then 
0ceb8     2C E4 05 F1 | 	add	objptr, #44
0cebc     F2 18 02 FB | 	rdlong	arg04, objptr
0cec0     50 00 00 FF 
0cec4     E8 E4 85 F1 | 	sub	objptr, ##41192
0cec8     01 18 16 F2 | 	cmp	arg04, #1 wc
0cecc     30 00 90 CD |  if_b	jmp	#LR__1110
0ced0     50 00 00 FF 
0ced4     EC E4 05 F1 | 	add	objptr, ##41196
0ced8     F2 12 02 F6 | 	mov	arg01, objptr
0cedc     38 E4 85 F1 | 	sub	objptr, #56
0cee0     F2 14 02 FB | 	rdlong	arg02, objptr
0cee4     18 16 06 F6 | 	mov	arg03, #24
0cee8     44 00 00 FF 
0ceec     E8 E5 85 F1 | 	sub	objptr, ##35304
0cef0     B4 2F B1 FD | 	call	#_psram_spin2_read1
0cef4     0B 00 00 FF 
0cef8     CC E4 85 F1 | 	sub	objptr, ##5836
0cefc                 | '   psram.read1(varptr(runheader),runptr,24)  
0cefc                 | '   return
0cefc     88 02 90 FD | 	jmp	#LR__1116
0cf00                 | LR__1110
0cf00     50 00 00 FF 
0cf04     E8 E4 05 F1 | 	add	objptr, ##41192
0cf08     F2 02 68 FC | 	wrlong	#1, objptr
0cf0c     04 E4 05 F1 | 	add	objptr, #4
0cf10     F2 12 02 F6 | 	mov	arg01, objptr
0cf14     38 E4 85 F1 | 	sub	objptr, #56
0cf18     F2 14 02 FB | 	rdlong	arg02, objptr
0cf1c     18 16 06 F6 | 	mov	arg03, #24
0cf20     44 00 00 FF 
0cf24     E8 E5 85 F1 | 	sub	objptr, ##35304
0cf28     7C 2F B1 FD | 	call	#_psram_spin2_read1
0cf2c                 | ' inrun=1
0cf2c                 | ' psram.read1(varptr(runheader),runptr,24) 
0cf2c                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0cf2c     45 00 00 FF 
0cf30     20 E4 05 F1 | 	add	objptr, ##35360
0cf34     F2 1E 02 FB | 	rdlong	local01, objptr
0cf38     50 00 00 FF 
0cf3c     EC E4 85 F1 | 	sub	objptr, ##41196
0cf40     FF FF 7F FF 
0cf44     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0cf48     50 00 00 AF 
0cf4c     E8 E4 05 A1 |  if_e	add	objptr, ##41192
0cf50     F2 00 68 AC |  if_e	wrlong	#0, objptr
0cf54     50 00 00 AF 
0cf58     E8 E4 85 A1 |  if_e	sub	objptr, ##41192
0cf5c     28 02 90 AD |  if_e	jmp	#LR__1116
0cf60                 | ' do 
0cf60                 | LR__1111
0cf60                 | '   if runptr<>oldrunptr then
0cf60     50 00 00 FF 
0cf64     B4 E4 05 F1 | 	add	objptr, ##41140
0cf68     F2 1E 02 FB | 	rdlong	local01, objptr
0cf6c     08 E4 05 F1 | 	add	objptr, #8
0cf70     F2 18 02 FB | 	rdlong	arg04, objptr
0cf74     50 00 00 FF 
0cf78     BC E4 85 F1 | 	sub	objptr, ##41148
0cf7c     0C 1F 0A F2 | 	cmp	local01, arg04 wz
0cf80     CC 00 90 AD |  if_e	jmp	#LR__1112
0cf84     50 00 00 FF 
0cf88     EC E4 05 F1 | 	add	objptr, ##41196
0cf8c     F2 12 02 F6 | 	mov	arg01, objptr
0cf90     38 E4 85 F1 | 	sub	objptr, #56
0cf94     F2 14 02 FB | 	rdlong	arg02, objptr
0cf98     18 16 06 F6 | 	mov	arg03, #24
0cf9c     44 00 00 FF 
0cfa0     E8 E5 85 F1 | 	sub	objptr, ##35304
0cfa4     00 2F B1 FD | 	call	#_psram_spin2_read1
0cfa8     3B 00 00 FF 
0cfac     B0 E5 05 F1 | 	add	objptr, ##30640
0cfb0     F2 12 02 F6 | 	mov	arg01, objptr
0cfb4     09 00 00 FF 
0cfb8     38 E4 05 F1 | 	add	objptr, ##4664
0cfbc     F2 14 02 FB | 	rdlong	arg02, objptr
0cfc0     0B 00 00 FF 
0cfc4     50 E4 85 F1 | 	sub	objptr, ##5712
0cfc8     F2 1E 02 FB | 	rdlong	local01, objptr
0cfcc     01 1E 66 F0 | 	shl	local01, #1
0cfd0     0F 15 02 F1 | 	add	arg02, local01
0cfd4     0B 00 00 FF 
0cfd8     90 E4 05 F1 | 	add	objptr, ##5776
0cfdc     F2 16 02 FB | 	rdlong	arg03, objptr
0cfe0     40 E4 85 F1 | 	sub	objptr, #64
0cfe4     F2 1E 02 FB | 	rdlong	local01, objptr
0cfe8     0F 17 82 F1 | 	sub	arg03, local01
0cfec     44 00 00 FF 
0cff0     E8 E5 85 F1 | 	sub	objptr, ##35304
0cff4     B0 2E B1 FD | 	call	#_psram_spin2_read1
0cff8     45 00 00 FF 
0cffc     28 E4 05 F1 | 	add	objptr, ##35368
0d000     F2 1E 02 FB | 	rdlong	local01, objptr
0d004     40 E4 85 F1 | 	sub	objptr, #64
0d008     F2 FA 01 FB | 	rdlong	result1, objptr
0d00c     FD 1E 82 F1 | 	sub	local01, result1
0d010     0B 00 00 FF 
0d014     50 E4 85 F1 | 	sub	objptr, ##5712
0d018     F2 FA 01 FB | 	rdlong	result1, objptr
0d01c     FD 1E 12 FD | 	qdiv	local01, result1
0d020     05 00 00 FF 
0d024     18 E4 05 F1 | 	add	objptr, ##2584
0d028     18 1E 62 FD | 	getqx	local01
0d02c     03 1E 86 F1 | 	sub	local01, #3
0d030     F2 1E 62 FC | 	wrlong	local01, objptr
0d034     06 00 00 FF 
0d038     38 E4 05 F1 | 	add	objptr, ##3128
0d03c     F2 1E 02 FB | 	rdlong	local01, objptr
0d040     08 E4 05 F1 | 	add	objptr, #8
0d044     F2 1E 62 FC | 	wrlong	local01, objptr
0d048     50 00 00 FF 
0d04c     BC E4 85 F1 | 	sub	objptr, ##41148
0d050                 | LR__1112
0d050     50 00 00 FF 
0d054     00 E5 05 F1 | 	add	objptr, ##41216
0d058     F2 1E 02 FB | 	rdlong	local01, objptr
0d05c     4C E4 85 F1 | 	sub	objptr, #76
0d060     F2 1E 62 FC | 	wrlong	local01, objptr
0d064     04 E4 05 F1 | 	add	objptr, #4
0d068     F2 12 02 FB | 	rdlong	arg01, objptr
0d06c     50 00 00 FF 
0d070     B8 E4 85 F1 | 	sub	objptr, ##41144
0d074     DC E8 BF FD | 	call	#_execute_line
0d078     50 00 00 FF 
0d07c     B8 E4 05 F1 | 	add	objptr, ##41144
0d080     F2 FA 61 FC | 	wrlong	result1, objptr
0d084     04 E4 85 F1 | 	sub	objptr, #4
0d088     F2 1E 02 FB | 	rdlong	local01, objptr
0d08c     50 00 00 FF 
0d090     B4 E4 85 F1 | 	sub	objptr, ##41140
0d094     FF FF 3F FF 
0d098     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0d09c     30 00 90 AD |  if_e	jmp	#LR__1114
0d0a0     E0 12 06 F6 | 	mov	arg01, #224
0d0a4     90 31 B1 FD | 	call	#_usbnew_spin2_keystate
0d0a8     00 FA 0D F2 | 	cmp	result1, #0 wz
0d0ac     10 00 90 5D |  if_ne	jmp	#LR__1113
0d0b0     E4 12 06 F6 | 	mov	arg01, #228
0d0b4     80 31 B1 FD | 	call	#_usbnew_spin2_keystate
0d0b8     00 FA 0D F2 | 	cmp	result1, #0 wz
0d0bc     A0 FE 9F AD |  if_e	jmp	#LR__1111
0d0c0                 | LR__1113
0d0c0     06 12 06 F6 | 	mov	arg01, #6
0d0c4     70 31 B1 FD | 	call	#_usbnew_spin2_keystate
0d0c8     00 FA 0D F2 | 	cmp	result1, #0 wz
0d0cc     90 FE 9F AD |  if_e	jmp	#LR__1111
0d0d0                 | LR__1114
0d0d0                 | '   ''do whatever kbm.peek_latest_key()=$106 
0d0d0                 | ' if runptr<>$7FFF_FFFF then 
0d0d0     50 00 00 FF 
0d0d4     B4 E4 05 F1 | 	add	objptr, ##41140
0d0d8     F2 1E 02 FB | 	rdlong	local01, objptr
0d0dc     50 00 00 FF 
0d0e0     B4 E4 85 F1 | 	sub	objptr, ##41140
0d0e4     FF FF 3F FF 
0d0e8     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0d0ec     64 00 90 AD |  if_e	jmp	#LR__1115
0d0f0                 | '     print "Stopped at line ";runheader(0)
0d0f0     00 12 06 F6 | 	mov	arg01, #0
0d0f4     30 94 B1 FD | 	call	#__system___getiolock_0540
0d0f8     FD 12 02 F6 | 	mov	arg01, result1
0d0fc     E8 39 B1 FD | 	call	#__system___lockmem
0d100     85 01 00 FF 
0d104     00 14 06 F6 | 	mov	arg02, ##@LR__5449
0d108     00 12 06 F6 | 	mov	arg01, #0
0d10c     00 16 06 F6 | 	mov	arg03, #0
0d110     C8 46 B1 FD | 	call	#__system___basic_print_string
0d114     50 00 00 FF 
0d118     EC E4 05 F1 | 	add	objptr, ##41196
0d11c     F2 14 02 FB | 	rdlong	arg02, objptr
0d120     50 00 00 FF 
0d124     EC E4 85 F1 | 	sub	objptr, ##41196
0d128     00 12 06 F6 | 	mov	arg01, #0
0d12c     00 16 06 F6 | 	mov	arg03, #0
0d130     0A 18 06 F6 | 	mov	arg04, #10
0d134     28 47 B1 FD | 	call	#__system___basic_print_unsigned
0d138     00 12 06 F6 | 	mov	arg01, #0
0d13c     0A 14 06 F6 | 	mov	arg02, #10
0d140     00 16 06 F6 | 	mov	arg03, #0
0d144     3C 46 B1 FD | 	call	#__system___basic_print_char
0d148     00 12 06 F6 | 	mov	arg01, #0
0d14c     D8 93 B1 FD | 	call	#__system___getiolock_0540
0d150     FD 00 68 FC | 	wrlong	#0, result1
0d154                 | LR__1115
0d154     50 00 00 FF 
0d158     E8 E4 05 F1 | 	add	objptr, ##41192
0d15c     F2 00 68 FC | 	wrlong	#0, objptr
0d160     50 00 00 FF 
0d164     E8 E4 85 F1 | 	sub	objptr, ##41192
0d168     11 12 06 F6 | 	mov	arg01, #17
0d16c     08 14 06 F6 | 	mov	arg02, #8
0d170     10 16 06 F6 | 	mov	arg03, #16
0d174     74 13 B1 FD | 	call	#_hg010b_spin2_setspritesize
0d178     10 12 06 F6 | 	mov	arg01, #16
0d17c     20 14 06 F6 | 	mov	arg02, #32
0d180     20 16 06 F6 | 	mov	arg03, #32
0d184     64 13 B1 FD | 	call	#_hg010b_spin2_setspritesize
0d188                 | LR__1116
0d188     A7 F0 03 F6 | 	mov	ptra, fp
0d18c     B2 00 A0 FD | 	call	#popregs_
0d190                 | _do_run_ret
0d190     2D 00 64 FD | 	ret
0d194                 | 
0d194                 | ' 
0d194                 | ' 
0d194                 | ' 
0d194                 | ' 
0d194                 | ' 
0d194                 | ' 
0d194                 | ' 
0d194                 | ' sub do_defenv
0d194                 | _do_defenv
0d194     08 4A 05 F6 | 	mov	COUNT_, #8
0d198     A8 00 A0 FD | 	call	#pushregs_
0d19c     B4 F0 07 F1 | 	add	ptra, #180
0d1a0     4A 00 00 FF 
0d1a4     80 E4 05 F1 | 	add	objptr, ##38016
0d1a8     F2 1E 02 FB | 	rdlong	local01, objptr
0d1ac     0F 1B 02 F6 | 	mov	arg05, local01
0d1b0     01 1A 66 F0 | 	shl	arg05, #1
0d1b4     0F 1B 02 F1 | 	add	arg05, local01
0d1b8     02 1A 66 F0 | 	shl	arg05, #2
0d1bc     03 00 00 FF 
0d1c0     04 E4 85 F1 | 	sub	objptr, ##1540
0d1c4     F2 20 02 F6 | 	mov	local02, objptr
0d1c8     F2 1A 02 F1 | 	add	arg05, objptr
0d1cc     0D 1B 02 FB | 	rdlong	arg05, arg05
0d1d0     10 4E 05 F1 | 	add	fp, #16
0d1d4     A7 1A 62 FC | 	wrlong	arg05, fp
0d1d8                 | ' 
0d1d8                 | ' numpar=compiledline(lineptr_e).result.uresult
0d1d8                 | ' 
0d1d8                 | ' 
0d1d8                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0d1d8                 | ' 'TODO for 2.0: ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0d1d8                 | ' ' defsnd channel, a,d,s,r - defines ADSR attack time, decay time, sus level, release time. Sus point has to be returned - how?
0d1d8                 | ' 
0d1d8                 | ' 
0d1d8                 | ' if numpar<>2 andalso numpar<>5 andalso numpar<>9 then return ' and print error
0d1d8     10 4E 85 F1 | 	sub	fp, #16
0d1dc     02 1A 0E F2 | 	cmp	arg05, #2 wz
0d1e0     47 00 00 FF 
0d1e4     7C E4 85 F1 | 	sub	objptr, ##36476
0d1e8     10 4E 05 51 |  if_ne	add	fp, #16
0d1ec     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0d1f0     10 4E 85 51 |  if_ne	sub	fp, #16
0d1f4     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0d1f8     10 4E 05 51 |  if_ne	add	fp, #16
0d1fc     0F 21 02 56 |  if_ne	mov	local02, local01
0d200     10 4E 85 51 |  if_ne	sub	fp, #16
0d204     09 20 0E 52 |  if_ne	cmp	local02, #9 wz
0d208     10 0C 90 5D |  if_ne	jmp	#LR__1141
0d20c                 | ' 
0d20c                 | '  
0d20c                 | ' if numpar=2 then
0d20c     10 4E 05 F1 | 	add	fp, #16
0d210     A7 20 02 FB | 	rdlong	local02, fp
0d214     10 4E 85 F1 | 	sub	fp, #16
0d218     02 20 0E F2 | 	cmp	local02, #2 wz
0d21c     24 04 90 5D |  if_ne	jmp	#LR__1133
0d220     34 E8 BF FD | 	call	#_pop
0d224     FF 1A 02 F6 | 	mov	arg05, result3
0d228     5C 4E 05 F1 | 	add	fp, #92
0d22c     A7 FA 61 FC | 	wrlong	result1, fp
0d230     04 4E 05 F1 | 	add	fp, #4
0d234     A7 FC 61 FC | 	wrlong	result2, fp
0d238     04 4E 05 F1 | 	add	fp, #4
0d23c     A7 1A 62 FC | 	wrlong	arg05, fp
0d240                 | '   t1=pop()
0d240                 | '   if t1.result_type=result_string2 then 
0d240     64 4E 85 F1 | 	sub	fp, #100
0d244     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0d248     20 00 90 5D |  if_ne	jmp	#LR__1120
0d24c     5C 4E 05 F1 | 	add	fp, #92
0d250     A7 12 02 FB | 	rdlong	arg01, fp
0d254     5C 4E 85 F1 | 	sub	fp, #92
0d258     74 41 B0 FD | 	call	#_convertstring
0d25c     68 4E 05 F1 | 	add	fp, #104
0d260     A7 FA 61 FC | 	wrlong	result1, fp
0d264     68 4E 85 F1 | 	sub	fp, #104
0d268     58 00 90 FD | 	jmp	#LR__1123
0d26c                 | LR__1120
0d26c     64 4E 05 F1 | 	add	fp, #100
0d270     A7 20 02 FB | 	rdlong	local02, fp
0d274     64 4E 85 F1 | 	sub	fp, #100
0d278     1F 20 0E F2 | 	cmp	local02, #31 wz
0d27c     18 00 90 5D |  if_ne	jmp	#LR__1121
0d280     5C 4E 05 F1 | 	add	fp, #92
0d284     A7 20 02 FB | 	rdlong	local02, fp
0d288     0C 4E 05 F1 | 	add	fp, #12
0d28c     A7 20 62 FC | 	wrlong	local02, fp
0d290     68 4E 85 F1 | 	sub	fp, #104
0d294     2C 00 90 FD | 	jmp	#LR__1122
0d298                 | LR__1121
0d298     85 01 00 FF 
0d29c     11 20 06 F6 | 	mov	local02, ##@LR__5450
0d2a0     68 4E 05 F1 | 	add	fp, #104
0d2a4     A7 20 62 FC | 	wrlong	local02, fp
0d2a8     0C 4E 85 F1 | 	sub	fp, #12
0d2ac     A7 12 02 F6 | 	mov	arg01, fp
0d2b0     5C 4E 85 F1 | 	sub	fp, #92
0d2b4     3C 89 B0 FD | 	call	#_converttoint
0d2b8     24 4E 05 F1 | 	add	fp, #36
0d2bc     A7 FA 61 FC | 	wrlong	result1, fp
0d2c0     24 4E 85 F1 | 	sub	fp, #36
0d2c4                 | LR__1122
0d2c4                 | LR__1123
0d2c4                 | ' 
0d2c4                 | '     
0d2c4                 | '   if s1<>"" then 
0d2c4     68 4E 05 F1 | 	add	fp, #104
0d2c8     A7 12 02 FB | 	rdlong	arg01, fp
0d2cc     68 4E 85 F1 | 	sub	fp, #104
0d2d0     85 01 00 FF 
0d2d4     12 14 06 F6 | 	mov	arg02, ##@LR__5451
0d2d8     34 38 B1 FD | 	call	#__system___string_cmp
0d2dc     00 FA 0D F2 | 	cmp	result1, #0 wz
0d2e0     24 02 90 AD |  if_e	jmp	#LR__1127
0d2e4     70 E7 BF FD | 	call	#_pop
0d2e8     FF 1E 02 F6 | 	mov	local01, result3
0d2ec     5C 4E 05 F1 | 	add	fp, #92
0d2f0     A7 FA 61 FC | 	wrlong	result1, fp
0d2f4     04 4E 05 F1 | 	add	fp, #4
0d2f8     A7 FC 61 FC | 	wrlong	result2, fp
0d2fc     04 4E 05 F1 | 	add	fp, #4
0d300     A7 1E 62 FC | 	wrlong	local01, fp
0d304     08 4E 85 F1 | 	sub	fp, #8
0d308     A7 12 02 F6 | 	mov	arg01, fp
0d30c     5C 4E 85 F1 | 	sub	fp, #92
0d310     E0 88 B0 FD | 	call	#_converttoint
0d314     20 4E 05 F1 | 	add	fp, #32
0d318     A7 FA 61 FC | 	wrlong	result1, fp
0d31c     20 4E 85 F1 | 	sub	fp, #32
0d320                 | '     t1=pop()
0d320                 | '     channel=converttoint(t1) 
0d320                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0d320     09 12 06 F6 | 	mov	arg01, #9
0d324     30 88 B1 FD | 	call	#__system__close
0d328     09 20 06 F6 | 	mov	local02, #9
0d32c     85 01 00 FF 
0d330     13 12 06 F6 | 	mov	arg01, ##@LR__5452
0d334     68 4E 05 F1 | 	add	fp, #104
0d338     A7 14 02 FB | 	rdlong	arg02, fp
0d33c     68 4E 85 F1 | 	sub	fp, #104
0d340     00 38 B1 FD | 	call	#__system___string_concat
0d344     FD 14 02 F6 | 	mov	arg02, result1
0d348     10 13 02 F6 | 	mov	arg01, local02
0d34c     00 16 06 F6 | 	mov	arg03, #0
0d350     98 43 B1 FD | 	call	#__system___basic_open_string
0d354     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d358     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0d35c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d360     0C 4E 05 F1 | 	add	fp, #12
0d364     A7 FA 61 FC | 	wrlong	result1, fp
0d368                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0d368     0C 4E 85 F1 | 	sub	fp, #12
0d36c     A0 00 90 AD |  if_e	jmp	#LR__1124
0d370     00 12 06 F6 | 	mov	arg01, #0
0d374     B0 91 B1 FD | 	call	#__system___getiolock_0540
0d378     FD 12 02 F6 | 	mov	arg01, result1
0d37c     68 37 B1 FD | 	call	#__system___lockmem
0d380     85 01 00 FF 
0d384     20 14 06 F6 | 	mov	arg02, ##@LR__5453
0d388     00 12 06 F6 | 	mov	arg01, #0
0d38c     00 16 06 F6 | 	mov	arg03, #0
0d390     48 44 B1 FD | 	call	#__system___basic_print_string
0d394     0C 4E 05 F1 | 	add	fp, #12
0d398     A7 14 02 FB | 	rdlong	arg02, fp
0d39c     0C 4E 85 F1 | 	sub	fp, #12
0d3a0     00 12 06 F6 | 	mov	arg01, #0
0d3a4     00 16 06 F6 | 	mov	arg03, #0
0d3a8     0A 18 06 F6 | 	mov	arg04, #10
0d3ac     70 44 B1 FD | 	call	#__system___basic_print_integer
0d3b0     85 01 00 FF 
0d3b4     2E 14 06 F6 | 	mov	arg02, ##@LR__5454
0d3b8     00 12 06 F6 | 	mov	arg01, #0
0d3bc     00 16 06 F6 | 	mov	arg03, #0
0d3c0     18 44 B1 FD | 	call	#__system___basic_print_string
0d3c4     00 20 06 F6 | 	mov	local02, #0
0d3c8     0C 4E 05 F1 | 	add	fp, #12
0d3cc     A7 12 02 FB | 	rdlong	arg01, fp
0d3d0     0C 4E 85 F1 | 	sub	fp, #12
0d3d4     D8 5D B1 FD | 	call	#__system___strerror
0d3d8     FD 14 02 F6 | 	mov	arg02, result1
0d3dc     10 13 02 F6 | 	mov	arg01, local02
0d3e0     00 16 06 F6 | 	mov	arg03, #0
0d3e4     F4 43 B1 FD | 	call	#__system___basic_print_string
0d3e8     00 12 06 F6 | 	mov	arg01, #0
0d3ec     0A 14 06 F6 | 	mov	arg02, #10
0d3f0     00 16 06 F6 | 	mov	arg03, #0
0d3f4     8C 43 B1 FD | 	call	#__system___basic_print_char
0d3f8     00 12 06 F6 | 	mov	arg01, #0
0d3fc     28 91 B1 FD | 	call	#__system___getiolock_0540
0d400     FD 00 68 FC | 	wrlong	#0, result1
0d404     09 12 06 F6 | 	mov	arg01, #9
0d408     4C 87 B1 FD | 	call	#__system__close
0d40c     0C 0A 90 FD | 	jmp	#LR__1141
0d410                 | LR__1124
0d410                 | '     get #9,17,envbuf8(channel,0),256
0d410     20 4E 05 F1 | 	add	fp, #32
0d414     A7 1A 02 FB | 	rdlong	arg05, fp
0d418     20 4E 85 F1 | 	sub	fp, #32
0d41c     0D 17 02 F6 | 	mov	arg03, arg05
0d420     09 16 66 F0 | 	shl	arg03, #9
0d424     0D 17 02 F1 | 	add	arg03, arg05
0d428     0C 00 00 FF 
0d42c     D8 E4 05 F1 | 	add	objptr, ##6360
0d430     F2 16 02 F1 | 	add	arg03, objptr
0d434     09 12 06 F6 | 	mov	arg01, #9
0d438     11 14 06 F6 | 	mov	arg02, #17
0d43c     00 19 06 F6 | 	mov	arg04, #256
0d440     01 1A 06 F6 | 	mov	arg05, #1
0d444     0C 00 00 FF 
0d448     D8 E4 85 F1 | 	sub	objptr, ##6360
0d44c     08 45 B1 FD | 	call	#__system___basic_get
0d450                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0d450     14 4E 05 F1 | 	add	fp, #20
0d454     A7 FE 69 FC | 	wrlong	#255, fp
0d458     14 4E 85 F1 | 	sub	fp, #20
0d45c     0C 00 00 FF 
0d460     D8 E4 05 F1 | 	add	objptr, ##6360
0d464     97 30 48 FB | 	callpa	#(@LR__1126-@LR__1125)>>2,fcache_load_ptr_
0d468                 | LR__1125
0d468     20 4E 05 F1 | 	add	fp, #32
0d46c     A7 18 02 FB | 	rdlong	arg04, fp
0d470     0C 21 02 F6 | 	mov	local02, arg04
0d474     09 20 66 F0 | 	shl	local02, #9
0d478     F2 20 02 F1 | 	add	local02, objptr
0d47c     0C 4E 85 F1 | 	sub	fp, #12
0d480     A7 1E 02 FB | 	rdlong	local01, fp
0d484     0F 1B 02 F6 | 	mov	arg05, local01
0d488     01 1A 66 F0 | 	shl	arg05, #1
0d48c     10 1B 02 F1 | 	add	arg05, local02
0d490     0C 21 02 F6 | 	mov	local02, arg04
0d494     09 20 66 F0 | 	shl	local02, #9
0d498     0C 21 02 F1 | 	add	local02, arg04
0d49c     F2 20 02 F1 | 	add	local02, objptr
0d4a0     10 1F 02 F1 | 	add	local01, local02
0d4a4     0F 21 C2 FA | 	rdbyte	local02, local01
0d4a8     00 21 06 FA | 	mul	local02, #256
0d4ac     0D 21 52 FC | 	wrword	local02, arg05
0d4b0     A7 20 02 FB | 	rdlong	local02, fp
0d4b4     01 20 86 F1 | 	sub	local02, #1
0d4b8     A7 20 62 FC | 	wrlong	local02, fp
0d4bc     14 4E 85 F1 | 	sub	fp, #20
0d4c0     00 20 56 F2 | 	cmps	local02, #0 wc
0d4c4     A0 FF 9F 3D |  if_ae	jmp	#LR__1125
0d4c8                 | LR__1126
0d4c8     0C 00 00 FF 
0d4cc     D8 E4 85 F1 | 	sub	objptr, ##6360
0d4d0                 | '     close #9
0d4d0     09 12 06 F6 | 	mov	arg01, #9
0d4d4     80 86 B1 FD | 	call	#__system__close
0d4d8     20 4E 05 F1 | 	add	fp, #32
0d4dc     A7 20 02 FB | 	rdlong	local02, fp
0d4e0     20 4E 85 F1 | 	sub	fp, #32
0d4e4     09 20 66 F0 | 	shl	local02, #9
0d4e8     0C 00 00 FF 
0d4ec     D8 E4 05 F1 | 	add	objptr, ##6360
0d4f0     F2 20 02 F1 | 	add	local02, objptr
0d4f4     FE 21 06 F1 | 	add	local02, #510
0d4f8     10 01 58 FC | 	wrword	#0, local02
0d4fc                 | '     envbuf(channel,255)=0                                                                   '  for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0d4fc                 | '     return
0d4fc     0C 00 00 FF 
0d500     D8 E4 85 F1 | 	sub	objptr, ##6360
0d504     14 09 90 FD | 	jmp	#LR__1141
0d508                 | LR__1127
0d508                 | '     if wptr < ($80000 - 2048) then 
0d508     24 4E 05 F1 | 	add	fp, #36
0d50c     A7 22 02 FB | 	rdlong	local03, fp
0d510     24 4E 85 F1 | 	sub	fp, #36
0d514     FC 03 00 FF 
0d518     00 22 56 F2 | 	cmps	local03, ##522240 wc
0d51c     7C 00 90 3D |  if_ae	jmp	#LR__1130
0d520                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0d520     14 4E 05 F1 | 	add	fp, #20
0d524     A7 00 68 FC | 	wrlong	#0, fp
0d528     14 4E 85 F1 | 	sub	fp, #20
0d52c     0C 00 00 FF 
0d530     D8 E4 05 F1 | 	add	objptr, ##6360
0d534     97 2C 48 FB | 	callpa	#(@LR__1129-@LR__1128)>>2,fcache_load_ptr_
0d538                 | LR__1128
0d538     20 4E 05 F1 | 	add	fp, #32
0d53c     A7 22 02 FB | 	rdlong	local03, fp
0d540     09 22 66 F0 | 	shl	local03, #9
0d544     F2 22 02 F1 | 	add	local03, objptr
0d548     0C 4E 85 F1 | 	sub	fp, #12
0d54c     A7 20 02 FB | 	rdlong	local02, fp
0d550     10 1F 02 F6 | 	mov	local01, local02
0d554     01 1E 66 F0 | 	shl	local01, #1
0d558     11 1F 02 F1 | 	add	local01, local03
0d55c     10 4E 05 F1 | 	add	fp, #16
0d560     A7 12 02 FB | 	rdlong	arg01, fp
0d564     01 20 66 F0 | 	shl	local02, #1
0d568     10 13 02 F1 | 	add	arg01, local02
0d56c     09 FB E1 FA | 	rdword	result1, arg01
0d570     0F FB 51 FC | 	wrword	result1, local01
0d574     10 4E 85 F1 | 	sub	fp, #16
0d578     A7 22 02 FB | 	rdlong	local03, fp
0d57c     01 22 06 F1 | 	add	local03, #1
0d580     A7 22 62 FC | 	wrlong	local03, fp
0d584     14 4E 85 F1 | 	sub	fp, #20
0d588     00 23 56 F2 | 	cmps	local03, #256 wc
0d58c     A8 FF 9F CD |  if_b	jmp	#LR__1128
0d590                 | LR__1129
0d590     0C 00 00 FF 
0d594     D8 E4 85 F1 | 	sub	objptr, ##6360
0d598     78 00 90 FD | 	jmp	#LR__1132
0d59c                 | LR__1130
0d59c                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0d59c     14 4E 05 F1 | 	add	fp, #20
0d5a0     A7 00 68 FC | 	wrlong	#0, fp
0d5a4     14 4E 85 F1 | 	sub	fp, #20
0d5a8                 | LR__1131
0d5a8     20 4E 05 F1 | 	add	fp, #32
0d5ac     A7 22 02 FB | 	rdlong	local03, fp
0d5b0     09 22 66 F0 | 	shl	local03, #9
0d5b4     0C 00 00 FF 
0d5b8     D8 E4 05 F1 | 	add	objptr, ##6360
0d5bc     F2 22 02 F1 | 	add	local03, objptr
0d5c0     0C 4E 85 F1 | 	sub	fp, #12
0d5c4     A7 20 02 FB | 	rdlong	local02, fp
0d5c8     10 1F 02 F6 | 	mov	local01, local02
0d5cc     01 1E 66 F0 | 	shl	local01, #1
0d5d0     11 1F 02 F1 | 	add	local01, local03
0d5d4     10 4E 05 F1 | 	add	fp, #16
0d5d8     A7 12 02 FB | 	rdlong	arg01, fp
0d5dc     24 4E 85 F1 | 	sub	fp, #36
0d5e0     01 20 66 F0 | 	shl	local02, #1
0d5e4     10 13 02 F1 | 	add	arg01, local02
0d5e8     0C 00 00 FF 
0d5ec     D8 E4 85 F1 | 	sub	objptr, ##6360
0d5f0     48 02 B1 FD | 	call	#_psdpeek
0d5f4     0F FB 51 FC | 	wrword	result1, local01
0d5f8     14 4E 05 F1 | 	add	fp, #20
0d5fc     A7 22 02 FB | 	rdlong	local03, fp
0d600     01 22 06 F1 | 	add	local03, #1
0d604     A7 22 62 FC | 	wrlong	local03, fp
0d608     14 4E 85 F1 | 	sub	fp, #20
0d60c     00 23 56 F2 | 	cmps	local03, #256 wc
0d610     94 FF 9F CD |  if_b	jmp	#LR__1131
0d614                 | LR__1132
0d614     20 4E 05 F1 | 	add	fp, #32
0d618     A7 22 02 FB | 	rdlong	local03, fp
0d61c     20 4E 85 F1 | 	sub	fp, #32
0d620     09 22 66 F0 | 	shl	local03, #9
0d624     0C 00 00 FF 
0d628     D8 E4 05 F1 | 	add	objptr, ##6360
0d62c     F2 22 02 F1 | 	add	local03, objptr
0d630     FE 23 06 F1 | 	add	local03, #510
0d634     11 01 58 FC | 	wrword	#0, local03
0d638                 | '     envbuf(channel,255)=0
0d638                 | '     return   
0d638     0C 00 00 FF 
0d63c     D8 E4 85 F1 | 	sub	objptr, ##6360
0d640     D8 07 90 FD | 	jmp	#LR__1141
0d644                 | LR__1133
0d644                 | ' 
0d644                 | ' if numpar=5 then    'simple adsr
0d644     10 4E 05 F1 | 	add	fp, #16
0d648     A7 22 02 FB | 	rdlong	local03, fp
0d64c     10 4E 85 F1 | 	sub	fp, #16
0d650     05 22 0E F2 | 	cmp	local03, #5 wz
0d654     98 07 90 5D |  if_ne	jmp	#LR__1140
0d658     FC E3 BF FD | 	call	#_pop
0d65c     FF 1E 02 F6 | 	mov	local01, result3
0d660     5C 4E 05 F1 | 	add	fp, #92
0d664     A7 FA 61 FC | 	wrlong	result1, fp
0d668     04 4E 05 F1 | 	add	fp, #4
0d66c     A7 FC 61 FC | 	wrlong	result2, fp
0d670     04 4E 05 F1 | 	add	fp, #4
0d674     A7 1E 62 FC | 	wrlong	local01, fp
0d678     08 4E 85 F1 | 	sub	fp, #8
0d67c     A7 12 02 F6 | 	mov	arg01, fp
0d680     5C 4E 85 F1 | 	sub	fp, #92
0d684     28 86 B0 FD | 	call	#_converttofloat
0d688     FD 22 02 F6 | 	mov	local03, result1
0d68c     34 4E 05 F1 | 	add	fp, #52
0d690     A7 22 62 FC | 	wrlong	local03, fp
0d694     34 4E 85 F1 | 	sub	fp, #52
0d698     BC E3 BF FD | 	call	#_pop
0d69c     FF 1E 02 F6 | 	mov	local01, result3
0d6a0     5C 4E 05 F1 | 	add	fp, #92
0d6a4     A7 FA 61 FC | 	wrlong	result1, fp
0d6a8     04 4E 05 F1 | 	add	fp, #4
0d6ac     A7 FC 61 FC | 	wrlong	result2, fp
0d6b0     04 4E 05 F1 | 	add	fp, #4
0d6b4     A7 1E 62 FC | 	wrlong	local01, fp
0d6b8     08 4E 85 F1 | 	sub	fp, #8
0d6bc     A7 12 02 F6 | 	mov	arg01, fp
0d6c0     5C 4E 85 F1 | 	sub	fp, #92
0d6c4     E8 85 B0 FD | 	call	#_converttofloat
0d6c8     FD 22 02 F6 | 	mov	local03, result1
0d6cc     30 4E 05 F1 | 	add	fp, #48
0d6d0     A7 22 62 FC | 	wrlong	local03, fp
0d6d4     30 4E 85 F1 | 	sub	fp, #48
0d6d8     7C E3 BF FD | 	call	#_pop
0d6dc     FF 1E 02 F6 | 	mov	local01, result3
0d6e0     5C 4E 05 F1 | 	add	fp, #92
0d6e4     A7 FA 61 FC | 	wrlong	result1, fp
0d6e8     04 4E 05 F1 | 	add	fp, #4
0d6ec     A7 FC 61 FC | 	wrlong	result2, fp
0d6f0     04 4E 05 F1 | 	add	fp, #4
0d6f4     A7 1E 62 FC | 	wrlong	local01, fp
0d6f8     08 4E 85 F1 | 	sub	fp, #8
0d6fc     A7 12 02 F6 | 	mov	arg01, fp
0d700     5C 4E 85 F1 | 	sub	fp, #92
0d704     A8 85 B0 FD | 	call	#_converttofloat
0d708     FD 22 02 F6 | 	mov	local03, result1
0d70c     2C 4E 05 F1 | 	add	fp, #44
0d710     A7 22 62 FC | 	wrlong	local03, fp
0d714     2C 4E 85 F1 | 	sub	fp, #44
0d718     3C E3 BF FD | 	call	#_pop
0d71c     FF 1E 02 F6 | 	mov	local01, result3
0d720     5C 4E 05 F1 | 	add	fp, #92
0d724     A7 FA 61 FC | 	wrlong	result1, fp
0d728     04 4E 05 F1 | 	add	fp, #4
0d72c     A7 FC 61 FC | 	wrlong	result2, fp
0d730     04 4E 05 F1 | 	add	fp, #4
0d734     A7 1E 62 FC | 	wrlong	local01, fp
0d738     08 4E 85 F1 | 	sub	fp, #8
0d73c     A7 12 02 F6 | 	mov	arg01, fp
0d740     5C 4E 85 F1 | 	sub	fp, #92
0d744     68 85 B0 FD | 	call	#_converttofloat
0d748     FD 22 02 F6 | 	mov	local03, result1
0d74c     28 4E 05 F1 | 	add	fp, #40
0d750     A7 22 62 FC | 	wrlong	local03, fp
0d754     28 4E 85 F1 | 	sub	fp, #40
0d758     FC E2 BF FD | 	call	#_pop
0d75c     FF 1E 02 F6 | 	mov	local01, result3
0d760     5C 4E 05 F1 | 	add	fp, #92
0d764     A7 FA 61 FC | 	wrlong	result1, fp
0d768     04 4E 05 F1 | 	add	fp, #4
0d76c     A7 FC 61 FC | 	wrlong	result2, fp
0d770     04 4E 05 F1 | 	add	fp, #4
0d774     A7 1E 62 FC | 	wrlong	local01, fp
0d778     08 4E 85 F1 | 	sub	fp, #8
0d77c     A7 12 02 F6 | 	mov	arg01, fp
0d780     5C 4E 85 F1 | 	sub	fp, #92
0d784     6C 84 B0 FD | 	call	#_converttoint
0d788     20 4E 05 F1 | 	add	fp, #32
0d78c     A7 FA 61 FC | 	wrlong	result1, fp
0d790                 | ' 
0d790                 | '   t1=pop() : rr=converttofloat(t1)
0d790                 | '   t1=pop() : ss=converttofloat(t1) 
0d790                 | '   t1=pop() : dd=converttofloat(t1)
0d790                 | '   t1=pop() : aa=converttofloat(t1)
0d790                 | '   t1=pop() : channel=converttoint(t1)
0d790                 | '   if ss<0.0 then ss=0.0 
0d790     10 4E 05 F1 | 	add	fp, #16
0d794     A7 12 02 FB | 	rdlong	arg01, fp
0d798     30 4E 85 F1 | 	sub	fp, #48
0d79c     00 14 06 F6 | 	mov	arg02, #0
0d7a0     01 16 06 F6 | 	mov	arg03, #1
0d7a4     28 63 B1 FD | 	call	#__system___float_cmp
0d7a8     00 FA 55 F2 | 	cmps	result1, #0 wc
0d7ac     30 4E 05 C1 |  if_b	add	fp, #48
0d7b0     A7 00 68 CC |  if_b	wrlong	#0, fp
0d7b4     30 4E 85 C1 |  if_b	sub	fp, #48
0d7b8                 | '   if ss>1.0 then ss=1.0
0d7b8     30 4E 05 F1 | 	add	fp, #48
0d7bc     A7 12 02 FB | 	rdlong	arg01, fp
0d7c0     30 4E 85 F1 | 	sub	fp, #48
0d7c4     00 C0 1F FF 
0d7c8     00 14 06 F6 | 	mov	arg02, ##1065353216
0d7cc     01 16 66 F6 | 	neg	arg03, #1
0d7d0     FC 62 B1 FD | 	call	#__system___float_cmp
0d7d4     01 FA 55 F2 | 	cmps	result1, #1 wc
0d7d8     30 4E 05 31 |  if_ae	add	fp, #48
0d7dc     00 C0 9F 3F 
0d7e0     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0d7e4     30 4E 85 31 |  if_ae	sub	fp, #48
0d7e8     28 4E 05 F1 | 	add	fp, #40
0d7ec     A7 12 02 FB | 	rdlong	arg01, fp
0d7f0     04 4E 05 F1 | 	add	fp, #4
0d7f4     A7 14 02 FB | 	rdlong	arg02, fp
0d7f8     2C 4E 85 F1 | 	sub	fp, #44
0d7fc     CC 5A B1 FD | 	call	#__system___float_add
0d800     FD 12 02 F6 | 	mov	arg01, result1
0d804     34 4E 05 F1 | 	add	fp, #52
0d808     A7 14 02 FB | 	rdlong	arg02, fp
0d80c     34 4E 85 F1 | 	sub	fp, #52
0d810     B8 5A B1 FD | 	call	#__system___float_add
0d814     4C 4E 05 F1 | 	add	fp, #76
0d818     A7 FA 61 FC | 	wrlong	result1, fp
0d81c     FD 14 02 F6 | 	mov	arg02, result1
0d820     4C 4E 85 F1 | 	sub	fp, #76
0d824     00 C0 21 FF 
0d828     00 12 06 F6 | 	mov	arg01, ##1132462080
0d82c     70 60 B1 FD | 	call	#__system___float_div
0d830     50 4E 05 F1 | 	add	fp, #80
0d834     A7 FA 61 FC | 	wrlong	result1, fp
0d838     28 4E 85 F1 | 	sub	fp, #40
0d83c     A7 12 02 FB | 	rdlong	arg01, fp
0d840     FD 14 02 F6 | 	mov	arg02, result1
0d844     28 4E 85 F1 | 	sub	fp, #40
0d848     50 5E B1 FD | 	call	#__system___float_mul
0d84c     FD 12 02 F6 | 	mov	arg01, result1
0d850     01 14 06 F6 | 	mov	arg02, #1
0d854     0C 63 B1 FD | 	call	#__system___float_tointeger
0d858     A7 FA 61 FC | 	wrlong	result1, fp
0d85c     2C 4E 05 F1 | 	add	fp, #44
0d860     A7 12 02 FB | 	rdlong	arg01, fp
0d864     24 4E 05 F1 | 	add	fp, #36
0d868     A7 14 02 FB | 	rdlong	arg02, fp
0d86c     50 4E 85 F1 | 	sub	fp, #80
0d870     28 5E B1 FD | 	call	#__system___float_mul
0d874     FD 12 02 F6 | 	mov	arg01, result1
0d878     01 14 06 F6 | 	mov	arg02, #1
0d87c     E4 62 B1 FD | 	call	#__system___float_tointeger
0d880     04 4E 05 F1 | 	add	fp, #4
0d884     A7 FA 61 FC | 	wrlong	result1, fp
0d888     30 4E 05 F1 | 	add	fp, #48
0d88c     A7 12 02 FB | 	rdlong	arg01, fp
0d890     1C 4E 05 F1 | 	add	fp, #28
0d894     A7 14 02 FB | 	rdlong	arg02, fp
0d898     50 4E 85 F1 | 	sub	fp, #80
0d89c     FC 5D B1 FD | 	call	#__system___float_mul
0d8a0     FD 12 02 F6 | 	mov	arg01, result1
0d8a4     01 14 06 F6 | 	mov	arg02, #1
0d8a8     B8 62 B1 FD | 	call	#__system___float_tointeger
0d8ac     FD 22 02 F6 | 	mov	local03, result1
0d8b0     0C 4E 05 F1 | 	add	fp, #12
0d8b4     A7 22 62 FC | 	wrlong	local03, fp
0d8b8     0C 4E 85 F1 | 	sub	fp, #12
0d8bc                 | '   fulltime=aa+dd+rr
0d8bc                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit) :print a,d,r,a+d+r
0d8bc     00 12 06 F6 | 	mov	arg01, #0
0d8c0     64 8C B1 FD | 	call	#__system___getiolock_0540
0d8c4     FD 12 02 F6 | 	mov	arg01, result1
0d8c8     1C 32 B1 FD | 	call	#__system___lockmem
0d8cc     A7 14 02 FB | 	rdlong	arg02, fp
0d8d0     00 12 06 F6 | 	mov	arg01, #0
0d8d4     00 16 06 F6 | 	mov	arg03, #0
0d8d8     0A 18 06 F6 | 	mov	arg04, #10
0d8dc     40 3F B1 FD | 	call	#__system___basic_print_integer
0d8e0     00 12 06 F6 | 	mov	arg01, #0
0d8e4     09 14 06 F6 | 	mov	arg02, #9
0d8e8     00 16 06 F6 | 	mov	arg03, #0
0d8ec     94 3E B1 FD | 	call	#__system___basic_print_char
0d8f0     04 4E 05 F1 | 	add	fp, #4
0d8f4     A7 14 02 FB | 	rdlong	arg02, fp
0d8f8     04 4E 85 F1 | 	sub	fp, #4
0d8fc     00 12 06 F6 | 	mov	arg01, #0
0d900     00 16 06 F6 | 	mov	arg03, #0
0d904     0A 18 06 F6 | 	mov	arg04, #10
0d908     14 3F B1 FD | 	call	#__system___basic_print_integer
0d90c     00 12 06 F6 | 	mov	arg01, #0
0d910     09 14 06 F6 | 	mov	arg02, #9
0d914     00 16 06 F6 | 	mov	arg03, #0
0d918     68 3E B1 FD | 	call	#__system___basic_print_char
0d91c     0C 4E 05 F1 | 	add	fp, #12
0d920     A7 14 02 FB | 	rdlong	arg02, fp
0d924     0C 4E 85 F1 | 	sub	fp, #12
0d928     00 12 06 F6 | 	mov	arg01, #0
0d92c     00 16 06 F6 | 	mov	arg03, #0
0d930     0A 18 06 F6 | 	mov	arg04, #10
0d934     E8 3E B1 FD | 	call	#__system___basic_print_integer
0d938     00 12 06 F6 | 	mov	arg01, #0
0d93c     09 14 06 F6 | 	mov	arg02, #9
0d940     00 16 06 F6 | 	mov	arg03, #0
0d944     3C 3E B1 FD | 	call	#__system___basic_print_char
0d948     A7 14 02 FB | 	rdlong	arg02, fp
0d94c     04 4E 05 F1 | 	add	fp, #4
0d950     A7 22 02 FB | 	rdlong	local03, fp
0d954     11 15 02 F1 | 	add	arg02, local03
0d958     08 4E 05 F1 | 	add	fp, #8
0d95c     A7 22 02 FB | 	rdlong	local03, fp
0d960     0C 4E 85 F1 | 	sub	fp, #12
0d964     11 15 02 F1 | 	add	arg02, local03
0d968     00 12 06 F6 | 	mov	arg01, #0
0d96c     00 16 06 F6 | 	mov	arg03, #0
0d970     0A 18 06 F6 | 	mov	arg04, #10
0d974     A8 3E B1 FD | 	call	#__system___basic_print_integer
0d978     00 12 06 F6 | 	mov	arg01, #0
0d97c     0A 14 06 F6 | 	mov	arg02, #10
0d980     00 16 06 F6 | 	mov	arg03, #0
0d984     FC 3D B1 FD | 	call	#__system___basic_print_char
0d988     00 12 06 F6 | 	mov	arg01, #0
0d98c     98 8B B1 FD | 	call	#__system___getiolock_0540
0d990     FD 00 68 FC | 	wrlong	#0, result1
0d994     F8 BF 23 FF 
0d998     00 22 06 F6 | 	mov	local03, ##1199566848
0d99c     A7 12 02 FB | 	rdlong	arg01, fp
0d9a0     09 13 52 F6 | 	abs	arg01, arg01 wc
0d9a4     1F 24 C6 C9 |  if_b	decod	local04, #31
0d9a8     00 24 06 36 |  if_ae	mov	local04, #0
0d9ac     E8 58 B1 FD | 	call	#__system___float_fromuns
0d9b0     12 FB 61 F5 | 	xor	result1, local04
0d9b4     FD 14 02 F6 | 	mov	arg02, result1
0d9b8     11 13 02 F6 | 	mov	arg01, local03
0d9bc     E0 5E B1 FD | 	call	#__system___float_div
0d9c0     54 4E 05 F1 | 	add	fp, #84
0d9c4     A7 FA 61 FC | 	wrlong	result1, fp
0d9c8     F8 BF 23 FF 
0d9cc     00 22 06 F6 | 	mov	local03, ##1199566848
0d9d0     24 4E 85 F1 | 	sub	fp, #36
0d9d4     A7 14 02 FB | 	rdlong	arg02, fp
0d9d8     30 4E 85 F1 | 	sub	fp, #48
0d9dc     F8 BF 23 FF 
0d9e0     00 12 06 F6 | 	mov	arg01, ##1199566848
0d9e4     B4 5C B1 FD | 	call	#__system___float_mul
0d9e8     FD 14 02 F6 | 	mov	arg02, result1
0d9ec     11 13 02 F6 | 	mov	arg01, local03
0d9f0     1F 14 E6 F4 | 	bitnot	arg02, #31
0d9f4     D4 58 B1 FD | 	call	#__system___float_add
0d9f8     FD 22 02 F6 | 	mov	local03, result1
0d9fc     04 4E 05 F1 | 	add	fp, #4
0da00     A7 12 02 FB | 	rdlong	arg01, fp
0da04     04 4E 85 F1 | 	sub	fp, #4
0da08     09 13 52 F6 | 	abs	arg01, arg01 wc
0da0c     1F 24 C6 C9 |  if_b	decod	local04, #31
0da10     00 24 06 36 |  if_ae	mov	local04, #0
0da14     80 58 B1 FD | 	call	#__system___float_fromuns
0da18     12 FB 61 F5 | 	xor	result1, local04
0da1c     FD 14 02 F6 | 	mov	arg02, result1
0da20     11 13 02 F6 | 	mov	arg01, local03
0da24     78 5E B1 FD | 	call	#__system___float_div
0da28     2C 4E 05 F1 | 	add	fp, #44
0da2c     A7 FA 61 FC | 	wrlong	result1, fp
0da30     04 4E 05 F1 | 	add	fp, #4
0da34     A7 14 02 FB | 	rdlong	arg02, fp
0da38     30 4E 85 F1 | 	sub	fp, #48
0da3c     F8 BF 23 FF 
0da40     00 12 06 F6 | 	mov	arg01, ##1199566848
0da44     54 5C B1 FD | 	call	#__system___float_mul
0da48     FD 22 02 F6 | 	mov	local03, result1
0da4c     0C 4E 05 F1 | 	add	fp, #12
0da50     A7 12 02 FB | 	rdlong	arg01, fp
0da54     0C 4E 85 F1 | 	sub	fp, #12
0da58     09 13 52 F6 | 	abs	arg01, arg01 wc
0da5c     1F 24 C6 C9 |  if_b	decod	local04, #31
0da60     00 24 06 36 |  if_ae	mov	local04, #0
0da64     30 58 B1 FD | 	call	#__system___float_fromuns
0da68     12 FB 61 F5 | 	xor	result1, local04
0da6c     FD 14 02 F6 | 	mov	arg02, result1
0da70     11 13 02 F6 | 	mov	arg01, local03
0da74     28 5E B1 FD | 	call	#__system___float_div
0da78     FD 22 02 F6 | 	mov	local03, result1
0da7c     58 4E 05 F1 | 	add	fp, #88
0da80     A7 22 62 FC | 	wrlong	local03, fp
0da84     58 4E 85 F1 | 	sub	fp, #88
0da88                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r : print da,dd,dr
0da88     00 12 06 F6 | 	mov	arg01, #0
0da8c     98 8A B1 FD | 	call	#__system___getiolock_0540
0da90     FD 12 02 F6 | 	mov	arg01, result1
0da94     50 30 B1 FD | 	call	#__system___lockmem
0da98     54 4E 05 F1 | 	add	fp, #84
0da9c     A7 14 02 FB | 	rdlong	arg02, fp
0daa0     54 4E 85 F1 | 	sub	fp, #84
0daa4     00 12 06 F6 | 	mov	arg01, #0
0daa8     00 16 06 F6 | 	mov	arg03, #0
0daac     23 18 06 F6 | 	mov	arg04, #35
0dab0     00 62 B1 FD | 	call	#__system___basic_print_float
0dab4     00 12 06 F6 | 	mov	arg01, #0
0dab8     09 14 06 F6 | 	mov	arg02, #9
0dabc     00 16 06 F6 | 	mov	arg03, #0
0dac0     C0 3C B1 FD | 	call	#__system___basic_print_char
0dac4     2C 4E 05 F1 | 	add	fp, #44
0dac8     A7 14 02 FB | 	rdlong	arg02, fp
0dacc     2C 4E 85 F1 | 	sub	fp, #44
0dad0     00 12 06 F6 | 	mov	arg01, #0
0dad4     00 16 06 F6 | 	mov	arg03, #0
0dad8     23 18 06 F6 | 	mov	arg04, #35
0dadc     D4 61 B1 FD | 	call	#__system___basic_print_float
0dae0     00 12 06 F6 | 	mov	arg01, #0
0dae4     09 14 06 F6 | 	mov	arg02, #9
0dae8     00 16 06 F6 | 	mov	arg03, #0
0daec     94 3C B1 FD | 	call	#__system___basic_print_char
0daf0     58 4E 05 F1 | 	add	fp, #88
0daf4     A7 14 02 FB | 	rdlong	arg02, fp
0daf8     58 4E 85 F1 | 	sub	fp, #88
0dafc     00 12 06 F6 | 	mov	arg01, #0
0db00     00 16 06 F6 | 	mov	arg03, #0
0db04     23 18 06 F6 | 	mov	arg04, #35
0db08     A8 61 B1 FD | 	call	#__system___basic_print_float
0db0c     00 12 06 F6 | 	mov	arg01, #0
0db10     0A 14 06 F6 | 	mov	arg02, #10
0db14     00 16 06 F6 | 	mov	arg03, #0
0db18     68 3C B1 FD | 	call	#__system___basic_print_char
0db1c     00 12 06 F6 | 	mov	arg01, #0
0db20     04 8A B1 FD | 	call	#__system___getiolock_0540
0db24     FD 00 68 FC | 	wrlong	#0, result1
0db28     20 4E 05 F1 | 	add	fp, #32
0db2c     A7 26 02 FB | 	rdlong	local05, fp
0db30     20 4E 85 F1 | 	sub	fp, #32
0db34     01 26 66 F0 | 	shl	local05, #1
0db38     51 00 00 FF 
0db3c     C4 E5 05 F1 | 	add	objptr, ##41924
0db40     F2 26 02 F1 | 	add	local05, objptr
0db44     A7 28 02 FB | 	rdlong	local06, fp
0db48     04 4E 05 F1 | 	add	fp, #4
0db4c     A7 22 02 FB | 	rdlong	local03, fp
0db50     11 29 02 F1 | 	add	local06, local03
0db54     13 29 52 FC | 	wrword	local06, local05
0db58     24 4E 05 F1 | 	add	fp, #36
0db5c     A7 00 68 FC | 	wrlong	#0, fp
0db60                 | '   suspoints(channel)=a+d
0db60                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0db60     14 4E 85 F1 | 	sub	fp, #20
0db64     A7 00 68 FC | 	wrlong	#0, fp
0db68     14 4E 85 F1 | 	sub	fp, #20
0db6c     A7 2A 02 FB | 	rdlong	local07, fp
0db70     51 00 00 FF 
0db74     C4 E5 85 F1 | 	sub	objptr, ##41924
0db78                 | LR__1134
0db78     14 4E 05 F1 | 	add	fp, #20
0db7c     A7 22 02 FB | 	rdlong	local03, fp
0db80     14 4E 85 F1 | 	sub	fp, #20
0db84     15 23 52 F2 | 	cmps	local03, local07 wc
0db88     80 00 90 3D |  if_ae	jmp	#LR__1135
0db8c     20 4E 05 F1 | 	add	fp, #32
0db90     A7 28 02 FB | 	rdlong	local06, fp
0db94     09 28 66 F0 | 	shl	local06, #9
0db98     0C 00 00 FF 
0db9c     D8 E4 05 F1 | 	add	objptr, ##6360
0dba0     F2 28 02 F1 | 	add	local06, objptr
0dba4     0C 4E 85 F1 | 	sub	fp, #12
0dba8     A7 26 02 FB | 	rdlong	local05, fp
0dbac     01 26 66 F0 | 	shl	local05, #1
0dbb0     14 27 02 F1 | 	add	local05, local06
0dbb4     14 4E 05 F1 | 	add	fp, #20
0dbb8     A7 12 02 FB | 	rdlong	arg01, fp
0dbbc     28 4E 85 F1 | 	sub	fp, #40
0dbc0     0C 00 00 FF 
0dbc4     D8 E4 85 F1 | 	sub	objptr, ##6360
0dbc8     01 14 06 F6 | 	mov	arg02, #1
0dbcc     94 5F B1 FD | 	call	#__system___float_tointeger
0dbd0     13 FB 51 FC | 	wrword	result1, local05
0dbd4     28 4E 05 F1 | 	add	fp, #40
0dbd8     A7 12 02 FB | 	rdlong	arg01, fp
0dbdc     2C 4E 05 F1 | 	add	fp, #44
0dbe0     A7 14 02 FB | 	rdlong	arg02, fp
0dbe4     54 4E 85 F1 | 	sub	fp, #84
0dbe8     E0 56 B1 FD | 	call	#__system___float_add
0dbec     28 4E 05 F1 | 	add	fp, #40
0dbf0     A7 FA 61 FC | 	wrlong	result1, fp
0dbf4     14 4E 85 F1 | 	sub	fp, #20
0dbf8     A7 20 02 FB | 	rdlong	local02, fp
0dbfc     01 20 06 F1 | 	add	local02, #1
0dc00     A7 20 62 FC | 	wrlong	local02, fp
0dc04     14 4E 85 F1 | 	sub	fp, #20
0dc08     6C FF 9F FD | 	jmp	#LR__1134
0dc0c                 | LR__1135
0dc0c                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0dc0c     A7 22 02 FB | 	rdlong	local03, fp
0dc10     14 4E 05 F1 | 	add	fp, #20
0dc14     A7 22 62 FC | 	wrlong	local03, fp
0dc18     14 4E 85 F1 | 	sub	fp, #20
0dc1c     A7 2C 02 FB | 	rdlong	local08, fp
0dc20     04 4E 05 F1 | 	add	fp, #4
0dc24     A7 22 02 FB | 	rdlong	local03, fp
0dc28     04 4E 85 F1 | 	sub	fp, #4
0dc2c     11 2D 02 F1 | 	add	local08, local03
0dc30                 | LR__1136
0dc30     14 4E 05 F1 | 	add	fp, #20
0dc34     A7 22 02 FB | 	rdlong	local03, fp
0dc38     14 4E 85 F1 | 	sub	fp, #20
0dc3c     16 23 52 F2 | 	cmps	local03, local08 wc
0dc40     A8 00 90 3D |  if_ae	jmp	#LR__1137
0dc44     20 4E 05 F1 | 	add	fp, #32
0dc48     A7 2A 02 FB | 	rdlong	local07, fp
0dc4c     09 2A 66 F0 | 	shl	local07, #9
0dc50     0C 00 00 FF 
0dc54     D8 E4 05 F1 | 	add	objptr, ##6360
0dc58     F2 2A 02 F1 | 	add	local07, objptr
0dc5c     0C 4E 85 F1 | 	sub	fp, #12
0dc60     A7 28 02 FB | 	rdlong	local06, fp
0dc64     01 28 66 F0 | 	shl	local06, #1
0dc68     15 29 02 F1 | 	add	local06, local07
0dc6c     14 4E 05 F1 | 	add	fp, #20
0dc70     A7 12 02 FB | 	rdlong	arg01, fp
0dc74     28 4E 85 F1 | 	sub	fp, #40
0dc78     0C 00 00 FF 
0dc7c     D8 E4 85 F1 | 	sub	objptr, ##6360
0dc80     01 14 06 F6 | 	mov	arg02, #1
0dc84     DC 5E B1 FD | 	call	#__system___float_tointeger
0dc88     14 FB 51 FC | 	wrword	result1, local06
0dc8c     28 4E 05 F1 | 	add	fp, #40
0dc90     A7 12 02 FB | 	rdlong	arg01, fp
0dc94     04 4E 05 F1 | 	add	fp, #4
0dc98     A7 14 02 FB | 	rdlong	arg02, fp
0dc9c     2C 4E 85 F1 | 	sub	fp, #44
0dca0     1F 14 E6 F4 | 	bitnot	arg02, #31
0dca4     24 56 B1 FD | 	call	#__system___float_add
0dca8     28 4E 05 F1 | 	add	fp, #40
0dcac     A7 FA 61 FC | 	wrlong	result1, fp
0dcb0     28 4E 85 F1 | 	sub	fp, #40
0dcb4     FD 12 02 F6 | 	mov	arg01, result1
0dcb8     00 14 06 F6 | 	mov	arg02, #0
0dcbc     01 16 06 F6 | 	mov	arg03, #1
0dcc0     0C 5E B1 FD | 	call	#__system___float_cmp
0dcc4     00 FA 55 F2 | 	cmps	result1, #0 wc
0dcc8     28 4E 05 C1 |  if_b	add	fp, #40
0dccc     A7 00 68 CC |  if_b	wrlong	#0, fp
0dcd0     28 4E 85 C1 |  if_b	sub	fp, #40
0dcd4     14 4E 05 F1 | 	add	fp, #20
0dcd8     A7 20 02 FB | 	rdlong	local02, fp
0dcdc     01 20 06 F1 | 	add	local02, #1
0dce0     A7 20 62 FC | 	wrlong	local02, fp
0dce4     14 4E 85 F1 | 	sub	fp, #20
0dce8     44 FF 9F FD | 	jmp	#LR__1136
0dcec                 | LR__1137
0dcec                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0dcec     A7 22 02 FB | 	rdlong	local03, fp
0dcf0     04 4E 05 F1 | 	add	fp, #4
0dcf4     A7 2C 02 FB | 	rdlong	local08, fp
0dcf8     16 23 02 F1 | 	add	local03, local08
0dcfc     10 4E 05 F1 | 	add	fp, #16
0dd00     A7 22 62 FC | 	wrlong	local03, fp
0dd04     14 4E 85 F1 | 	sub	fp, #20
0dd08                 | LR__1138
0dd08     14 4E 05 F1 | 	add	fp, #20
0dd0c     A7 26 02 FB | 	rdlong	local05, fp
0dd10     14 4E 85 F1 | 	sub	fp, #20
0dd14     00 27 56 F2 | 	cmps	local05, #256 wc
0dd18     A8 00 90 3D |  if_ae	jmp	#LR__1139
0dd1c     20 4E 05 F1 | 	add	fp, #32
0dd20     A7 2C 02 FB | 	rdlong	local08, fp
0dd24     09 2C 66 F0 | 	shl	local08, #9
0dd28     0C 00 00 FF 
0dd2c     D8 E4 05 F1 | 	add	objptr, ##6360
0dd30     F2 2C 02 F1 | 	add	local08, objptr
0dd34     0C 4E 85 F1 | 	sub	fp, #12
0dd38     A7 2A 02 FB | 	rdlong	local07, fp
0dd3c     01 2A 66 F0 | 	shl	local07, #1
0dd40     16 2B 02 F1 | 	add	local07, local08
0dd44     14 4E 05 F1 | 	add	fp, #20
0dd48     A7 12 02 FB | 	rdlong	arg01, fp
0dd4c     28 4E 85 F1 | 	sub	fp, #40
0dd50     0C 00 00 FF 
0dd54     D8 E4 85 F1 | 	sub	objptr, ##6360
0dd58     01 14 06 F6 | 	mov	arg02, #1
0dd5c     04 5E B1 FD | 	call	#__system___float_tointeger
0dd60     15 FB 51 FC | 	wrword	result1, local07
0dd64     28 4E 05 F1 | 	add	fp, #40
0dd68     A7 12 02 FB | 	rdlong	arg01, fp
0dd6c     30 4E 05 F1 | 	add	fp, #48
0dd70     A7 14 02 FB | 	rdlong	arg02, fp
0dd74     58 4E 85 F1 | 	sub	fp, #88
0dd78     1F 14 E6 F4 | 	bitnot	arg02, #31
0dd7c     4C 55 B1 FD | 	call	#__system___float_add
0dd80     28 4E 05 F1 | 	add	fp, #40
0dd84     A7 FA 61 FC | 	wrlong	result1, fp
0dd88     28 4E 85 F1 | 	sub	fp, #40
0dd8c     FD 12 02 F6 | 	mov	arg01, result1
0dd90     00 14 06 F6 | 	mov	arg02, #0
0dd94     01 16 06 F6 | 	mov	arg03, #1
0dd98     34 5D B1 FD | 	call	#__system___float_cmp
0dd9c     00 FA 55 F2 | 	cmps	result1, #0 wc
0dda0     28 4E 05 C1 |  if_b	add	fp, #40
0dda4     A7 00 68 CC |  if_b	wrlong	#0, fp
0dda8     28 4E 85 C1 |  if_b	sub	fp, #40
0ddac     14 4E 05 F1 | 	add	fp, #20
0ddb0     A7 2C 02 FB | 	rdlong	local08, fp
0ddb4     01 2C 06 F1 | 	add	local08, #1
0ddb8     A7 2C 62 FC | 	wrlong	local08, fp
0ddbc     14 4E 85 F1 | 	sub	fp, #20
0ddc0     44 FF 9F FD | 	jmp	#LR__1138
0ddc4                 | LR__1139
0ddc4     20 4E 05 F1 | 	add	fp, #32
0ddc8     A7 26 02 FB | 	rdlong	local05, fp
0ddcc     20 4E 85 F1 | 	sub	fp, #32
0ddd0     09 26 66 F0 | 	shl	local05, #9
0ddd4     0C 00 00 FF 
0ddd8     D8 E4 05 F1 | 	add	objptr, ##6360
0dddc     F2 26 02 F1 | 	add	local05, objptr
0dde0     FE 27 06 F1 | 	add	local05, #510
0dde4     13 01 58 FC | 	wrword	#0, local05
0dde8     0C 00 00 FF 
0ddec     D8 E4 85 F1 | 	sub	objptr, ##6360
0ddf0                 | LR__1140
0ddf0     20 4E 05 F1 | 	add	fp, #32
0ddf4     A7 26 02 FB | 	rdlong	local05, fp
0ddf8     20 4E 85 F1 | 	sub	fp, #32
0ddfc     09 26 66 F0 | 	shl	local05, #9
0de00     0C 00 00 FF 
0de04     D8 E4 05 F1 | 	add	objptr, ##6360
0de08     F2 26 02 F1 | 	add	local05, objptr
0de0c     FE 27 06 F1 | 	add	local05, #510
0de10     13 01 58 FC | 	wrword	#0, local05
0de14     0C 00 00 FF 
0de18     D8 E4 85 F1 | 	sub	objptr, ##6360
0de1c                 | LR__1141
0de1c     A7 F0 03 F6 | 	mov	ptra, fp
0de20     B2 00 A0 FD | 	call	#popregs_
0de24                 | _do_defenv_ret
0de24     2D 00 64 FD | 	ret
0de28                 | 
0de28                 | ' 
0de28                 | ' 
0de28                 | ' sub do_play
0de28                 | _do_play
0de28     06 4A 05 F6 | 	mov	COUNT_, #6
0de2c     A8 00 A0 FD | 	call	#pushregs_
0de30     7C F0 07 F1 | 	add	ptra, #124
0de34     68 4E 05 F1 | 	add	fp, #104
0de38     AB CB A1 FF 
0de3c     A7 D6 6B FC | 	wrlong	##1133991915, fp
0de40                 | ' speed_coeff=815.6614449376854599406528189911*(95.0/256.0)
0de40                 | ' 
0de40                 | ' for i=0 to 8 : params(i)=-2.0 : next i
0de40     64 4E 85 F1 | 	sub	fp, #100
0de44     A7 00 68 FC | 	wrlong	#0, fp
0de48     97 18 48 FB | 	callpa	#(@LR__1151-@LR__1150)>>2,fcache_load_ptr_
0de4c                 | LR__1150
0de4c     A7 16 02 FB | 	rdlong	arg03, fp
0de50     02 16 66 F0 | 	shl	arg03, #2
0de54     34 4E 05 F1 | 	add	fp, #52
0de58     A7 16 02 F1 | 	add	arg03, fp
0de5c     00 00 E0 FF 
0de60     0B 01 68 FC | 	wrlong	##-1073741824, arg03
0de64     34 4E 85 F1 | 	sub	fp, #52
0de68     A7 1E 02 FB | 	rdlong	local01, fp
0de6c     01 1E 06 F1 | 	add	local01, #1
0de70     A7 1E 62 FC | 	wrlong	local01, fp
0de74     09 1E 56 F2 | 	cmps	local01, #9 wc
0de78     D0 FF 9F CD |  if_b	jmp	#LR__1150
0de7c                 | LR__1151
0de7c     04 4E 85 F1 | 	sub	fp, #4
0de80     4A 00 00 FF 
0de84     80 E4 05 F1 | 	add	objptr, ##38016
0de88     F2 20 02 FB | 	rdlong	local02, objptr
0de8c     10 23 02 F6 | 	mov	local03, local02
0de90     01 22 66 F0 | 	shl	local03, #1
0de94     10 23 02 F1 | 	add	local03, local02
0de98     02 22 66 F0 | 	shl	local03, #2
0de9c     03 00 00 FF 
0dea0     04 E4 85 F1 | 	sub	objptr, ##1540
0dea4     F2 22 02 F1 | 	add	local03, objptr
0dea8     11 25 02 FB | 	rdlong	local04, local03
0deac     A7 24 62 FC | 	wrlong	local04, fp
0deb0                 | ' 'params(0)=0: params(1)=440.0 : params(2)=16.0 : params(3)=0.0 : params(4)=0.0 : params(5)=1.0 : params(6)=0.0 : params(7)=0.0 : 
0deb0                 | ' 'chn		freq		   vol		   wave#	   env#		   len		   delay	   pan		: sus 
0deb0                 | ' numpar=compiledline(lineptr_e).result.uresult
0deb0                 | ' for i=numpar to 1 step -1 
0deb0     04 4E 05 F1 | 	add	fp, #4
0deb4     A7 24 62 FC | 	wrlong	local04, fp
0deb8     04 4E 85 F1 | 	sub	fp, #4
0debc     47 00 00 FF 
0dec0     7C E4 85 F1 | 	sub	objptr, ##36476
0dec4                 | LR__1152
0dec4     90 DB BF FD | 	call	#_pop
0dec8     5C 4E 05 F1 | 	add	fp, #92
0decc     A7 FA 61 FC | 	wrlong	result1, fp
0ded0     04 4E 05 F1 | 	add	fp, #4
0ded4     A7 FC 61 FC | 	wrlong	result2, fp
0ded8     04 4E 05 F1 | 	add	fp, #4
0dedc     A7 FE 61 FC | 	wrlong	result3, fp
0dee0     60 4E 85 F1 | 	sub	fp, #96
0dee4     A7 22 02 FB | 	rdlong	local03, fp
0dee8     01 22 86 F1 | 	sub	local03, #1
0deec     02 22 66 F0 | 	shl	local03, #2
0def0     34 4E 05 F1 | 	add	fp, #52
0def4     A7 22 02 F1 | 	add	local03, fp
0def8     24 4E 05 F1 | 	add	fp, #36
0defc     A7 26 02 F6 | 	mov	local05, fp
0df00     13 13 02 F6 | 	mov	arg01, local05
0df04     5C 4E 85 F1 | 	sub	fp, #92
0df08     A4 7D B0 FD | 	call	#_converttofloat
0df0c     11 FB 61 FC | 	wrlong	result1, local03
0df10     04 4E 05 F1 | 	add	fp, #4
0df14     A7 1E 02 FB | 	rdlong	local01, fp
0df18     01 1E 86 F1 | 	sub	local01, #1
0df1c     A7 1E 62 FC | 	wrlong	local01, fp
0df20     04 4E 85 F1 | 	sub	fp, #4
0df24     01 1E 56 F2 | 	cmps	local01, #1 wc
0df28     98 FF 9F 3D |  if_ae	jmp	#LR__1152
0df2c                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
0df2c     38 4E 05 F1 | 	add	fp, #56
0df30     A7 12 02 FB | 	rdlong	arg01, fp
0df34     38 4E 85 F1 | 	sub	fp, #56
0df38     00 14 06 F6 | 	mov	arg02, #0
0df3c     01 16 06 F6 | 	mov	arg03, #1
0df40     8C 5B B1 FD | 	call	#__system___float_cmp
0df44     00 FA 55 F2 | 	cmps	result1, #0 wc
0df48     0C 4E 05 C1 |  if_b	add	fp, #12
0df4c     A7 00 68 CC |  if_b	wrlong	#0, fp
0df50     0C 4E 85 C1 |  if_b	sub	fp, #12
0df54     2C 00 90 CD |  if_b	jmp	#LR__1153
0df58     38 4E 05 F1 | 	add	fp, #56
0df5c     A7 12 02 FB | 	rdlong	arg01, fp
0df60     38 4E 85 F1 | 	sub	fp, #56
0df64     01 14 06 F6 | 	mov	arg02, #1
0df68     F8 5B B1 FD | 	call	#__system___float_tointeger
0df6c     FD 1E 52 F6 | 	abs	local01, result1 wc
0df70     07 1E 06 F5 | 	and	local01, #7
0df74     0F 1F 82 F6 | 	negc	local01, local01
0df78     0C 4E 05 F1 | 	add	fp, #12
0df7c     A7 1E 62 FC | 	wrlong	local01, fp
0df80     0C 4E 85 F1 | 	sub	fp, #12
0df84                 | LR__1153
0df84                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
0df84     3C 4E 05 F1 | 	add	fp, #60
0df88     A7 12 02 FB | 	rdlong	arg01, fp
0df8c     3C 4E 85 F1 | 	sub	fp, #60
0df90     00 14 06 F6 | 	mov	arg02, #0
0df94     01 16 06 F6 | 	mov	arg03, #1
0df98     34 5B B1 FD | 	call	#__system___float_cmp
0df9c     00 FA 55 F2 | 	cmps	result1, #0 wc
0dfa0     40 00 90 3D |  if_ae	jmp	#LR__1154
0dfa4     0C 4E 05 F1 | 	add	fp, #12
0dfa8     A7 20 02 FB | 	rdlong	local02, fp
0dfac     10 23 02 F6 | 	mov	local03, local02
0dfb0     01 22 66 F0 | 	shl	local03, #1
0dfb4     10 23 02 F1 | 	add	local03, local02
0dfb8     03 22 66 F0 | 	shl	local03, #3
0dfbc     14 00 00 FF 
0dfc0     38 E5 05 F1 | 	add	objptr, ##10552
0dfc4     F2 22 02 F1 | 	add	local03, objptr
0dfc8     11 23 02 FB | 	rdlong	local03, local03
0dfcc     60 4E 05 F1 | 	add	fp, #96
0dfd0     A7 22 62 FC | 	wrlong	local03, fp
0dfd4     6C 4E 85 F1 | 	sub	fp, #108
0dfd8     14 00 00 FF 
0dfdc     38 E5 85 F1 | 	sub	objptr, ##10552
0dfe0     44 00 90 FD | 	jmp	#LR__1155
0dfe4                 | LR__1154
0dfe4     3C 4E 05 F1 | 	add	fp, #60
0dfe8     A7 24 02 FB | 	rdlong	local04, fp
0dfec     30 4E 05 F1 | 	add	fp, #48
0dff0     A7 24 62 FC | 	wrlong	local04, fp
0dff4     60 4E 85 F1 | 	sub	fp, #96
0dff8     A7 20 02 FB | 	rdlong	local02, fp
0dffc     10 23 02 F6 | 	mov	local03, local02
0e000     01 22 66 F0 | 	shl	local03, #1
0e004     10 23 02 F1 | 	add	local03, local02
0e008     03 22 66 F0 | 	shl	local03, #3
0e00c     14 00 00 FF 
0e010     38 E5 05 F1 | 	add	objptr, ##10552
0e014     F2 22 02 F1 | 	add	local03, objptr
0e018     0C 4E 85 F1 | 	sub	fp, #12
0e01c     11 25 62 FC | 	wrlong	local04, local03
0e020     14 00 00 FF 
0e024     38 E5 85 F1 | 	sub	objptr, ##10552
0e028                 | LR__1155
0e028                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
0e028     44 4E 05 F1 | 	add	fp, #68
0e02c     A7 12 02 FB | 	rdlong	arg01, fp
0e030     44 4E 85 F1 | 	sub	fp, #68
0e034     00 14 06 F6 | 	mov	arg02, #0
0e038     01 16 06 F6 | 	mov	arg03, #1
0e03c     90 5A B1 FD | 	call	#__system___float_cmp
0e040     00 FA 55 F2 | 	cmps	result1, #0 wc
0e044     24 00 90 CD |  if_b	jmp	#LR__1156
0e048     44 4E 05 F1 | 	add	fp, #68
0e04c     A7 12 02 FB | 	rdlong	arg01, fp
0e050     44 4E 85 F1 | 	sub	fp, #68
0e054     89 C1 20 FF 
0e058     6F 14 06 F6 | 	mov	arg02, ##1099108975
0e05c     01 16 66 F6 | 	neg	arg03, #1
0e060     6C 5A B1 FD | 	call	#__system___float_cmp
0e064     01 FA 55 F2 | 	cmps	result1, #1 wc
0e068     44 00 90 CD |  if_b	jmp	#LR__1157
0e06c                 | LR__1156
0e06c     0C 4E 05 F1 | 	add	fp, #12
0e070     A7 20 02 FB | 	rdlong	local02, fp
0e074     10 23 02 F6 | 	mov	local03, local02
0e078     01 22 66 F0 | 	shl	local03, #1
0e07c     10 23 02 F1 | 	add	local03, local02
0e080     03 22 66 F0 | 	shl	local03, #3
0e084     14 00 00 FF 
0e088     38 E5 05 F1 | 	add	objptr, ##10552
0e08c     F2 22 02 F1 | 	add	local03, objptr
0e090     0C 22 06 F1 | 	add	local03, #12
0e094     11 23 02 FB | 	rdlong	local03, local03
0e098     68 4E 05 F1 | 	add	fp, #104
0e09c     A7 22 62 FC | 	wrlong	local03, fp
0e0a0     74 4E 85 F1 | 	sub	fp, #116
0e0a4     14 00 00 FF 
0e0a8     38 E5 85 F1 | 	sub	objptr, ##10552
0e0ac     48 00 90 FD | 	jmp	#LR__1158
0e0b0                 | LR__1157
0e0b0     44 4E 05 F1 | 	add	fp, #68
0e0b4     A7 24 02 FB | 	rdlong	local04, fp
0e0b8     30 4E 05 F1 | 	add	fp, #48
0e0bc     A7 24 62 FC | 	wrlong	local04, fp
0e0c0     68 4E 85 F1 | 	sub	fp, #104
0e0c4     A7 20 02 FB | 	rdlong	local02, fp
0e0c8     10 23 02 F6 | 	mov	local03, local02
0e0cc     01 22 66 F0 | 	shl	local03, #1
0e0d0     10 23 02 F1 | 	add	local03, local02
0e0d4     03 22 66 F0 | 	shl	local03, #3
0e0d8     14 00 00 FF 
0e0dc     38 E5 05 F1 | 	add	objptr, ##10552
0e0e0     F2 22 02 F1 | 	add	local03, objptr
0e0e4     0C 4E 85 F1 | 	sub	fp, #12
0e0e8     0C 22 06 F1 | 	add	local03, #12
0e0ec     11 25 62 FC | 	wrlong	local04, local03
0e0f0     14 00 00 FF 
0e0f4     38 E5 85 F1 | 	sub	objptr, ##10552
0e0f8                 | LR__1158
0e0f8                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
0e0f8     48 4E 05 F1 | 	add	fp, #72
0e0fc     A7 12 02 FB | 	rdlong	arg01, fp
0e100     48 4E 85 F1 | 	sub	fp, #72
0e104     00 14 06 F6 | 	mov	arg02, #0
0e108     01 16 06 F6 | 	mov	arg03, #1
0e10c     C0 59 B1 FD | 	call	#__system___float_cmp
0e110     00 FA 55 F2 | 	cmps	result1, #0 wc
0e114     24 00 90 CD |  if_b	jmp	#LR__1159
0e118     48 4E 05 F1 | 	add	fp, #72
0e11c     A7 12 02 FB | 	rdlong	arg01, fp
0e120     48 4E 85 F1 | 	sub	fp, #72
0e124     00 00 21 FF 
0e128     00 14 06 F6 | 	mov	arg02, ##1107296256
0e12c     01 16 66 F6 | 	neg	arg03, #1
0e130     9C 59 B1 FD | 	call	#__system___float_cmp
0e134     01 FA 55 F2 | 	cmps	result1, #1 wc
0e138     48 00 90 CD |  if_b	jmp	#LR__1160
0e13c                 | LR__1159
0e13c     0C 4E 05 F1 | 	add	fp, #12
0e140     A7 22 02 FB | 	rdlong	local03, fp
0e144     11 27 02 F6 | 	mov	local05, local03
0e148     01 26 66 F0 | 	shl	local05, #1
0e14c     11 27 02 F1 | 	add	local05, local03
0e150     03 26 66 F0 | 	shl	local05, #3
0e154     14 00 00 FF 
0e158     38 E5 05 F1 | 	add	objptr, ##10552
0e15c     F2 26 02 F1 | 	add	local05, objptr
0e160     04 26 06 F1 | 	add	local05, #4
0e164     13 27 C2 FA | 	rdbyte	local05, local05
0e168     13 25 E2 F8 | 	getbyte	local04, local05, #0
0e16c     14 4E 05 F1 | 	add	fp, #20
0e170     A7 24 62 FC | 	wrlong	local04, fp
0e174     20 4E 85 F1 | 	sub	fp, #32
0e178     14 00 00 FF 
0e17c     38 E5 85 F1 | 	sub	objptr, ##10552
0e180     54 00 90 FD | 	jmp	#LR__1161
0e184                 | LR__1160
0e184     48 4E 05 F1 | 	add	fp, #72
0e188     A7 12 02 FB | 	rdlong	arg01, fp
0e18c     48 4E 85 F1 | 	sub	fp, #72
0e190     01 14 06 F6 | 	mov	arg02, #1
0e194     CC 59 B1 FD | 	call	#__system___float_tointeger
0e198     20 4E 05 F1 | 	add	fp, #32
0e19c     A7 FA 61 FC | 	wrlong	result1, fp
0e1a0     14 4E 85 F1 | 	sub	fp, #20
0e1a4     A7 20 02 FB | 	rdlong	local02, fp
0e1a8     10 23 02 F6 | 	mov	local03, local02
0e1ac     01 22 66 F0 | 	shl	local03, #1
0e1b0     10 23 02 F1 | 	add	local03, local02
0e1b4     03 22 66 F0 | 	shl	local03, #3
0e1b8     14 00 00 FF 
0e1bc     38 E5 05 F1 | 	add	objptr, ##10552
0e1c0     F2 22 02 F1 | 	add	local03, objptr
0e1c4     0C 4E 85 F1 | 	sub	fp, #12
0e1c8     04 22 06 F1 | 	add	local03, #4
0e1cc     11 FB 41 FC | 	wrbyte	result1, local03
0e1d0     14 00 00 FF 
0e1d4     38 E5 85 F1 | 	sub	objptr, ##10552
0e1d8                 | LR__1161
0e1d8                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
0e1d8     4C 4E 05 F1 | 	add	fp, #76
0e1dc     A7 12 02 FB | 	rdlong	arg01, fp
0e1e0     4C 4E 85 F1 | 	sub	fp, #76
0e1e4     00 14 06 F6 | 	mov	arg02, #0
0e1e8     01 16 06 F6 | 	mov	arg03, #1
0e1ec     E0 58 B1 FD | 	call	#__system___float_cmp
0e1f0     00 FA 55 F2 | 	cmps	result1, #0 wc
0e1f4     24 00 90 CD |  if_b	jmp	#LR__1162
0e1f8     4C 4E 05 F1 | 	add	fp, #76
0e1fc     A7 12 02 FB | 	rdlong	arg01, fp
0e200     4C 4E 85 F1 | 	sub	fp, #76
0e204     00 80 20 FF 
0e208     00 14 06 F6 | 	mov	arg02, ##1090519040
0e20c     01 16 66 F6 | 	neg	arg03, #1
0e210     BC 58 B1 FD | 	call	#__system___float_cmp
0e214     01 FA 55 F2 | 	cmps	result1, #1 wc
0e218     48 00 90 CD |  if_b	jmp	#LR__1163
0e21c                 | LR__1162
0e21c     0C 4E 05 F1 | 	add	fp, #12
0e220     A7 22 02 FB | 	rdlong	local03, fp
0e224     11 27 02 F6 | 	mov	local05, local03
0e228     01 26 66 F0 | 	shl	local05, #1
0e22c     11 27 02 F1 | 	add	local05, local03
0e230     03 26 66 F0 | 	shl	local05, #3
0e234     14 00 00 FF 
0e238     38 E5 05 F1 | 	add	objptr, ##10552
0e23c     F2 26 02 F1 | 	add	local05, objptr
0e240     05 26 06 F1 | 	add	local05, #5
0e244     13 27 C2 FA | 	rdbyte	local05, local05
0e248     13 25 E2 F8 | 	getbyte	local04, local05, #0
0e24c     18 4E 05 F1 | 	add	fp, #24
0e250     A7 24 62 FC | 	wrlong	local04, fp
0e254     24 4E 85 F1 | 	sub	fp, #36
0e258     14 00 00 FF 
0e25c     38 E5 85 F1 | 	sub	objptr, ##10552
0e260     54 00 90 FD | 	jmp	#LR__1164
0e264                 | LR__1163
0e264     4C 4E 05 F1 | 	add	fp, #76
0e268     A7 12 02 FB | 	rdlong	arg01, fp
0e26c     4C 4E 85 F1 | 	sub	fp, #76
0e270     01 14 06 F6 | 	mov	arg02, #1
0e274     EC 58 B1 FD | 	call	#__system___float_tointeger
0e278     24 4E 05 F1 | 	add	fp, #36
0e27c     A7 FA 61 FC | 	wrlong	result1, fp
0e280     18 4E 85 F1 | 	sub	fp, #24
0e284     A7 20 02 FB | 	rdlong	local02, fp
0e288     10 23 02 F6 | 	mov	local03, local02
0e28c     01 22 66 F0 | 	shl	local03, #1
0e290     10 23 02 F1 | 	add	local03, local02
0e294     03 22 66 F0 | 	shl	local03, #3
0e298     14 00 00 FF 
0e29c     38 E5 05 F1 | 	add	objptr, ##10552
0e2a0     F2 22 02 F1 | 	add	local03, objptr
0e2a4     0C 4E 85 F1 | 	sub	fp, #12
0e2a8     05 22 06 F1 | 	add	local03, #5
0e2ac     11 FB 41 FC | 	wrbyte	result1, local03
0e2b0     14 00 00 FF 
0e2b4     38 E5 85 F1 | 	sub	objptr, ##10552
0e2b8                 | LR__1164
0e2b8                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
0e2b8     50 4E 05 F1 | 	add	fp, #80
0e2bc     A7 12 02 FB | 	rdlong	arg01, fp
0e2c0     50 4E 85 F1 | 	sub	fp, #80
0e2c4     00 14 06 F6 | 	mov	arg02, #0
0e2c8     01 16 06 F6 | 	mov	arg03, #1
0e2cc     00 58 B1 FD | 	call	#__system___float_cmp
0e2d0     00 FA 55 F2 | 	cmps	result1, #0 wc
0e2d4     24 00 90 CD |  if_b	jmp	#LR__1165
0e2d8     50 4E 05 F1 | 	add	fp, #80
0e2dc     A7 12 02 FB | 	rdlong	arg01, fp
0e2e0     50 4E 85 F1 | 	sub	fp, #80
0e2e4     00 3D 22 FF 
0e2e8     00 14 06 F6 | 	mov	arg02, ##1148846080
0e2ec     01 16 66 F6 | 	neg	arg03, #1
0e2f0     DC 57 B1 FD | 	call	#__system___float_cmp
0e2f4     01 FA 55 F2 | 	cmps	result1, #1 wc
0e2f8     44 00 90 CD |  if_b	jmp	#LR__1166
0e2fc                 | LR__1165
0e2fc     0C 4E 05 F1 | 	add	fp, #12
0e300     A7 20 02 FB | 	rdlong	local02, fp
0e304     10 23 02 F6 | 	mov	local03, local02
0e308     01 22 66 F0 | 	shl	local03, #1
0e30c     10 23 02 F1 | 	add	local03, local02
0e310     03 22 66 F0 | 	shl	local03, #3
0e314     14 00 00 FF 
0e318     38 E5 05 F1 | 	add	objptr, ##10552
0e31c     F2 22 02 F1 | 	add	local03, objptr
0e320     08 22 06 F1 | 	add	local03, #8
0e324     11 25 02 FB | 	rdlong	local04, local03
0e328     6C 4E 05 F1 | 	add	fp, #108
0e32c     A7 24 62 FC | 	wrlong	local04, fp
0e330     78 4E 85 F1 | 	sub	fp, #120
0e334     14 00 00 FF 
0e338     38 E5 85 F1 | 	sub	objptr, ##10552
0e33c     48 00 90 FD | 	jmp	#LR__1167
0e340                 | LR__1166
0e340     50 4E 05 F1 | 	add	fp, #80
0e344     A7 24 02 FB | 	rdlong	local04, fp
0e348     28 4E 05 F1 | 	add	fp, #40
0e34c     A7 24 62 FC | 	wrlong	local04, fp
0e350     6C 4E 85 F1 | 	sub	fp, #108
0e354     A7 20 02 FB | 	rdlong	local02, fp
0e358     10 23 02 F6 | 	mov	local03, local02
0e35c     01 22 66 F0 | 	shl	local03, #1
0e360     10 23 02 F1 | 	add	local03, local02
0e364     03 22 66 F0 | 	shl	local03, #3
0e368     14 00 00 FF 
0e36c     38 E5 05 F1 | 	add	objptr, ##10552
0e370     F2 22 02 F1 | 	add	local03, objptr
0e374     0C 4E 85 F1 | 	sub	fp, #12
0e378     08 22 06 F1 | 	add	local03, #8
0e37c     11 25 62 FC | 	wrlong	local04, local03
0e380     14 00 00 FF 
0e384     38 E5 85 F1 | 	sub	objptr, ##10552
0e388                 | LR__1167
0e388                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
0e388     40 4E 05 F1 | 	add	fp, #64
0e38c     A7 12 02 FB | 	rdlong	arg01, fp
0e390     40 4E 85 F1 | 	sub	fp, #64
0e394     00 14 06 F6 | 	mov	arg02, #0
0e398     01 16 06 F6 | 	mov	arg03, #1
0e39c     30 57 B1 FD | 	call	#__system___float_cmp
0e3a0     00 FA 55 F2 | 	cmps	result1, #0 wc
0e3a4     24 00 90 CD |  if_b	jmp	#LR__1168
0e3a8     40 4E 05 F1 | 	add	fp, #64
0e3ac     A7 12 02 FB | 	rdlong	arg01, fp
0e3b0     40 4E 85 F1 | 	sub	fp, #64
0e3b4     20 0E 23 FF 
0e3b8     00 14 06 F6 | 	mov	arg02, ##1176256512
0e3bc     01 16 66 F6 | 	neg	arg03, #1
0e3c0     0C 57 B1 FD | 	call	#__system___float_cmp
0e3c4     01 FA 55 F2 | 	cmps	result1, #1 wc
0e3c8     44 00 90 CD |  if_b	jmp	#LR__1169
0e3cc                 | LR__1168
0e3cc     0C 4E 05 F1 | 	add	fp, #12
0e3d0     A7 22 02 FB | 	rdlong	local03, fp
0e3d4     11 25 02 F6 | 	mov	local04, local03
0e3d8     01 24 66 F0 | 	shl	local04, #1
0e3dc     11 25 02 F1 | 	add	local04, local03
0e3e0     03 24 66 F0 | 	shl	local04, #3
0e3e4     14 00 00 FF 
0e3e8     38 E5 05 F1 | 	add	objptr, ##10552
0e3ec     F2 24 02 F1 | 	add	local04, objptr
0e3f0     06 24 06 F1 | 	add	local04, #6
0e3f4     12 25 E2 FA | 	rdword	local04, local04
0e3f8     1C 4E 05 F1 | 	add	fp, #28
0e3fc     A7 24 62 FC | 	wrlong	local04, fp
0e400     28 4E 85 F1 | 	sub	fp, #40
0e404     14 00 00 FF 
0e408     38 E5 85 F1 | 	sub	objptr, ##10552
0e40c     54 00 90 FD | 	jmp	#LR__1170
0e410                 | LR__1169
0e410     40 4E 05 F1 | 	add	fp, #64
0e414     A7 12 02 FB | 	rdlong	arg01, fp
0e418     40 4E 85 F1 | 	sub	fp, #64
0e41c     01 14 06 F6 | 	mov	arg02, #1
0e420     40 57 B1 FD | 	call	#__system___float_tointeger
0e424     28 4E 05 F1 | 	add	fp, #40
0e428     A7 FA 61 FC | 	wrlong	result1, fp
0e42c     1C 4E 85 F1 | 	sub	fp, #28
0e430     A7 20 02 FB | 	rdlong	local02, fp
0e434     10 23 02 F6 | 	mov	local03, local02
0e438     01 22 66 F0 | 	shl	local03, #1
0e43c     10 23 02 F1 | 	add	local03, local02
0e440     03 22 66 F0 | 	shl	local03, #3
0e444     14 00 00 FF 
0e448     38 E5 05 F1 | 	add	objptr, ##10552
0e44c     F2 22 02 F1 | 	add	local03, objptr
0e450     0C 4E 85 F1 | 	sub	fp, #12
0e454     06 22 06 F1 | 	add	local03, #6
0e458     11 FB 51 FC | 	wrword	result1, local03
0e45c     14 00 00 FF 
0e460     38 E5 85 F1 | 	sub	objptr, ##10552
0e464                 | LR__1170
0e464                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
0e464     54 4E 05 F1 | 	add	fp, #84
0e468     A7 12 02 FB | 	rdlong	arg01, fp
0e46c     54 4E 85 F1 | 	sub	fp, #84
0e470     00 C0 5F FF 
0e474     00 14 06 F6 | 	mov	arg02, ##-1082130432
0e478     01 16 06 F6 | 	mov	arg03, #1
0e47c     50 56 B1 FD | 	call	#__system___float_cmp
0e480     00 FA 55 F2 | 	cmps	result1, #0 wc
0e484     24 00 90 CD |  if_b	jmp	#LR__1171
0e488     54 4E 05 F1 | 	add	fp, #84
0e48c     A7 12 02 FB | 	rdlong	arg01, fp
0e490     54 4E 85 F1 | 	sub	fp, #84
0e494     00 C0 1F FF 
0e498     00 14 06 F6 | 	mov	arg02, ##1065353216
0e49c     01 16 66 F6 | 	neg	arg03, #1
0e4a0     2C 56 B1 FD | 	call	#__system___float_cmp
0e4a4     01 FA 55 F2 | 	cmps	result1, #1 wc
0e4a8     44 00 90 CD |  if_b	jmp	#LR__1172
0e4ac                 | LR__1171
0e4ac     0C 4E 05 F1 | 	add	fp, #12
0e4b0     A7 20 02 FB | 	rdlong	local02, fp
0e4b4     10 23 02 F6 | 	mov	local03, local02
0e4b8     01 22 66 F0 | 	shl	local03, #1
0e4bc     10 23 02 F1 | 	add	local03, local02
0e4c0     03 22 66 F0 | 	shl	local03, #3
0e4c4     14 00 00 FF 
0e4c8     38 E5 05 F1 | 	add	objptr, ##10552
0e4cc     F2 22 02 F1 | 	add	local03, objptr
0e4d0     10 22 06 F1 | 	add	local03, #16
0e4d4     11 25 02 FB | 	rdlong	local04, local03
0e4d8     64 4E 05 F1 | 	add	fp, #100
0e4dc     A7 24 62 FC | 	wrlong	local04, fp
0e4e0     70 4E 85 F1 | 	sub	fp, #112
0e4e4     14 00 00 FF 
0e4e8     38 E5 85 F1 | 	sub	objptr, ##10552
0e4ec     48 00 90 FD | 	jmp	#LR__1173
0e4f0                 | LR__1172
0e4f0     54 4E 05 F1 | 	add	fp, #84
0e4f4     A7 26 02 FB | 	rdlong	local05, fp
0e4f8     1C 4E 05 F1 | 	add	fp, #28
0e4fc     A7 26 62 FC | 	wrlong	local05, fp
0e500     64 4E 85 F1 | 	sub	fp, #100
0e504     A7 20 02 FB | 	rdlong	local02, fp
0e508     10 23 02 F6 | 	mov	local03, local02
0e50c     01 22 66 F0 | 	shl	local03, #1
0e510     10 23 02 F1 | 	add	local03, local02
0e514     03 22 66 F0 | 	shl	local03, #3
0e518     14 00 00 FF 
0e51c     38 E5 05 F1 | 	add	objptr, ##10552
0e520     F2 22 02 F1 | 	add	local03, objptr
0e524     0C 4E 85 F1 | 	sub	fp, #12
0e528     10 22 06 F1 | 	add	local03, #16
0e52c     11 27 62 FC | 	wrlong	local05, local03
0e530     14 00 00 FF 
0e534     38 E5 85 F1 | 	sub	objptr, ##10552
0e538                 | LR__1173
0e538                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
0e538     58 4E 05 F1 | 	add	fp, #88
0e53c     A7 12 02 FB | 	rdlong	arg01, fp
0e540     58 4E 85 F1 | 	sub	fp, #88
0e544     00 14 06 F6 | 	mov	arg02, #0
0e548     01 16 06 F6 | 	mov	arg03, #1
0e54c     80 55 B1 FD | 	call	#__system___float_cmp
0e550     00 FA 55 F2 | 	cmps	result1, #0 wc
0e554     24 00 90 CD |  if_b	jmp	#LR__1174
0e558     58 4E 05 F1 | 	add	fp, #88
0e55c     A7 12 02 FB | 	rdlong	arg01, fp
0e560     58 4E 85 F1 | 	sub	fp, #88
0e564     80 BF 21 FF 
0e568     00 14 06 F6 | 	mov	arg02, ##1132396544
0e56c     01 16 66 F6 | 	neg	arg03, #1
0e570     5C 55 B1 FD | 	call	#__system___float_cmp
0e574     01 FA 55 F2 | 	cmps	result1, #1 wc
0e578     44 00 90 CD |  if_b	jmp	#LR__1175
0e57c                 | LR__1174
0e57c     0C 4E 05 F1 | 	add	fp, #12
0e580     A7 22 02 FB | 	rdlong	local03, fp
0e584     11 27 02 F6 | 	mov	local05, local03
0e588     01 26 66 F0 | 	shl	local05, #1
0e58c     11 27 02 F1 | 	add	local05, local03
0e590     03 26 66 F0 | 	shl	local05, #3
0e594     14 00 00 FF 
0e598     38 E5 05 F1 | 	add	objptr, ##10552
0e59c     F2 26 02 F1 | 	add	local05, objptr
0e5a0     14 26 06 F1 | 	add	local05, #20
0e5a4     13 25 E2 FA | 	rdword	local04, local05
0e5a8     20 4E 05 F1 | 	add	fp, #32
0e5ac     A7 24 62 FC | 	wrlong	local04, fp
0e5b0     2C 4E 85 F1 | 	sub	fp, #44
0e5b4     14 00 00 FF 
0e5b8     38 E5 85 F1 | 	sub	objptr, ##10552
0e5bc     54 00 90 FD | 	jmp	#LR__1176
0e5c0                 | LR__1175
0e5c0     58 4E 05 F1 | 	add	fp, #88
0e5c4     A7 12 02 FB | 	rdlong	arg01, fp
0e5c8     58 4E 85 F1 | 	sub	fp, #88
0e5cc     01 14 06 F6 | 	mov	arg02, #1
0e5d0     90 55 B1 FD | 	call	#__system___float_tointeger
0e5d4     2C 4E 05 F1 | 	add	fp, #44
0e5d8     A7 FA 61 FC | 	wrlong	result1, fp
0e5dc     20 4E 85 F1 | 	sub	fp, #32
0e5e0     A7 20 02 FB | 	rdlong	local02, fp
0e5e4     10 23 02 F6 | 	mov	local03, local02
0e5e8     01 22 66 F0 | 	shl	local03, #1
0e5ec     10 23 02 F1 | 	add	local03, local02
0e5f0     03 22 66 F0 | 	shl	local03, #3
0e5f4     14 00 00 FF 
0e5f8     38 E5 05 F1 | 	add	objptr, ##10552
0e5fc     F2 22 02 F1 | 	add	local03, objptr
0e600     0C 4E 85 F1 | 	sub	fp, #12
0e604     14 22 06 F1 | 	add	local03, #20
0e608     11 FB 51 FC | 	wrword	result1, local03
0e60c     14 00 00 FF 
0e610     38 E5 85 F1 | 	sub	objptr, ##10552
0e614                 | LR__1176
0e614     6C 4E 05 F1 | 	add	fp, #108
0e618     A7 14 02 FB | 	rdlong	arg02, fp
0e61c     6C 4E 85 F1 | 	sub	fp, #108
0e620     FC 16 20 FF 
0e624     54 12 06 F6 | 	mov	arg01, ##1076754516
0e628     1C 60 B1 FD | 	call	#__system____builtin_logbase
0e62c     FD 24 02 F6 | 	mov	local04, result1
0e630     1E 14 C6 F9 | 	decod	arg02, #30
0e634     FC 16 20 FF 
0e638     54 12 06 F6 | 	mov	arg01, ##1076754516
0e63c     08 60 B1 FD | 	call	#__system____builtin_logbase
0e640     FD 14 02 F6 | 	mov	arg02, result1
0e644     12 13 02 F6 | 	mov	arg01, local04
0e648     54 52 B1 FD | 	call	#__system___float_div
0e64c     FD 12 02 F6 | 	mov	arg01, result1
0e650     00 14 06 F6 | 	mov	arg02, #0
0e654     0C 55 B1 FD | 	call	#__system___float_tointeger
0e658     30 4E 05 F1 | 	add	fp, #48
0e65c     A7 FA 61 FC | 	wrlong	result1, fp
0e660     1E 24 C6 F9 | 	decod	local04, #30
0e664     FD 12 02 F6 | 	mov	arg01, result1
0e668     30 4E 85 F1 | 	sub	fp, #48
0e66c     05 12 06 F1 | 	add	arg01, #5
0e670     09 13 52 F6 | 	abs	arg01, arg01 wc
0e674     1F 28 C6 C9 |  if_b	decod	local06, #31
0e678     00 28 06 36 |  if_ae	mov	local06, #0
0e67c     18 4C B1 FD | 	call	#__system___float_fromuns
0e680     14 FB 61 F5 | 	xor	result1, local06
0e684     FD 14 02 F6 | 	mov	arg02, result1
0e688     12 13 02 F6 | 	mov	arg01, local04
0e68c     F0 5E B1 FD | 	call	#__system____builtin_powf
0e690     FD 12 02 F6 | 	mov	arg01, result1
0e694     01 14 06 F6 | 	mov	arg02, #1
0e698     C8 54 B1 FD | 	call	#__system___float_tointeger
0e69c     10 4E 05 F1 | 	add	fp, #16
0e6a0     A7 FA 61 FC | 	wrlong	result1, fp
0e6a4                 | ' skip=round(2^(lfreq+5))
0e6a4                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0e6a4     10 4E 85 F1 | 	sub	fp, #16
0e6a8     40 00 00 FF 
0e6ac     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0e6b0     30 00 90 CD |  if_b	jmp	#LR__1177
0e6b4     10 4E 05 F1 | 	add	fp, #16
0e6b8     A7 1E 02 FB | 	rdlong	local01, fp
0e6bc     0F 25 52 F6 | 	abs	local04, local01 wc
0e6c0     0F 24 46 F0 | 	shr	local04, #15
0e6c4     12 25 82 F6 | 	negc	local04, local04
0e6c8     0C 4E 85 F1 | 	sub	fp, #12
0e6cc     A7 24 62 FC | 	wrlong	local04, fp
0e6d0     0C 4E 05 F1 | 	add	fp, #12
0e6d4     40 00 80 FF 
0e6d8     A7 00 68 FC | 	wrlong	##32768, fp
0e6dc     10 4E 85 F1 | 	sub	fp, #16
0e6e0     0C 00 90 FD | 	jmp	#LR__1178
0e6e4                 | LR__1177
0e6e4     04 4E 05 F1 | 	add	fp, #4
0e6e8     A7 02 68 FC | 	wrlong	#1, fp
0e6ec     04 4E 85 F1 | 	sub	fp, #4
0e6f0                 | LR__1178
0e6f0     6C 4E 05 F1 | 	add	fp, #108
0e6f4     A7 14 02 FB | 	rdlong	arg02, fp
0e6f8     6C 4E 85 F1 | 	sub	fp, #108
0e6fc     3E 2C 25 FF 
0e700     3C 12 06 F6 | 	mov	arg01, ##1247312956
0e704     98 51 B1 FD | 	call	#__system___float_div
0e708     FD 24 02 F6 | 	mov	local04, result1
0e70c     04 4E 05 F1 | 	add	fp, #4
0e710     A7 12 02 FB | 	rdlong	arg01, fp
0e714     04 4E 85 F1 | 	sub	fp, #4
0e718     09 13 52 F6 | 	abs	arg01, arg01 wc
0e71c     1F 28 C6 C9 |  if_b	decod	local06, #31
0e720     00 28 06 36 |  if_ae	mov	local06, #0
0e724     70 4B B1 FD | 	call	#__system___float_fromuns
0e728     14 FB 61 F5 | 	xor	result1, local06
0e72c     FD 1E 02 F6 | 	mov	local01, result1
0e730     1E 20 C6 F9 | 	decod	local02, #30
0e734     0D 12 06 F6 | 	mov	arg01, #13
0e738     30 4E 05 F1 | 	add	fp, #48
0e73c     A7 26 02 FB | 	rdlong	local05, fp
0e740     30 4E 85 F1 | 	sub	fp, #48
0e744     13 13 82 F1 | 	sub	arg01, local05
0e748     09 13 52 F6 | 	abs	arg01, arg01 wc
0e74c     1F 28 C6 C9 |  if_b	decod	local06, #31
0e750     00 28 06 36 |  if_ae	mov	local06, #0
0e754     40 4B B1 FD | 	call	#__system___float_fromuns
0e758     14 FB 61 F5 | 	xor	result1, local06
0e75c     FD 14 02 F6 | 	mov	arg02, result1
0e760     10 13 02 F6 | 	mov	arg01, local02
0e764     18 5E B1 FD | 	call	#__system____builtin_powf
0e768     FD 14 02 F6 | 	mov	arg02, result1
0e76c     0F 13 02 F6 | 	mov	arg01, local01
0e770     28 4F B1 FD | 	call	#__system___float_mul
0e774     FD 14 02 F6 | 	mov	arg02, result1
0e778     12 13 02 F6 | 	mov	arg01, local04
0e77c     20 51 B1 FD | 	call	#__system___float_div
0e780     FD 12 02 F6 | 	mov	arg01, result1
0e784     01 14 06 F6 | 	mov	arg02, #1
0e788     D8 53 B1 FD | 	call	#__system___float_tointeger
0e78c     34 4E 05 F1 | 	add	fp, #52
0e790     A7 FA 61 FC | 	wrlong	result1, fp
0e794     34 4E 05 F1 | 	add	fp, #52
0e798     A7 12 02 FB | 	rdlong	arg01, fp
0e79c     10 4E 05 F1 | 	add	fp, #16
0e7a0     A7 14 02 FB | 	rdlong	arg02, fp
0e7a4     78 4E 85 F1 | 	sub	fp, #120
0e7a8     F4 50 B1 FD | 	call	#__system___float_div
0e7ac     FD 12 02 F6 | 	mov	arg01, result1
0e7b0     01 14 06 F6 | 	mov	arg02, #1
0e7b4     AC 53 B1 FD | 	call	#__system___float_tointeger
0e7b8     FD 24 02 F6 | 	mov	local04, result1
0e7bc     14 4E 05 F1 | 	add	fp, #20
0e7c0     A7 24 62 FC | 	wrlong	local04, fp
0e7c4     5C 4E 05 F1 | 	add	fp, #92
0e7c8     A7 14 02 FB | 	rdlong	arg02, fp
0e7cc     70 4E 85 F1 | 	sub	fp, #112
0e7d0     00 00 23 FF 
0e7d4     00 12 06 F6 | 	mov	arg01, ##1174405120
0e7d8     C0 4E B1 FD | 	call	#__system___float_mul
0e7dc     FD 12 02 F6 | 	mov	arg01, result1
0e7e0     01 14 06 F6 | 	mov	arg02, #1
0e7e4     7C 53 B1 FD | 	call	#__system___float_tointeger
0e7e8     0D 24 C6 F9 | 	decod	local04, #13
0e7ec     FD 24 02 F1 | 	add	local04, result1
0e7f0     18 4E 05 F1 | 	add	fp, #24
0e7f4     A7 24 62 FC | 	wrlong	local04, fp
0e7f8     5C 4E 05 F1 | 	add	fp, #92
0e7fc     A7 14 02 FB | 	rdlong	arg02, fp
0e800     74 4E 85 F1 | 	sub	fp, #116
0e804     00 3D 22 FF 
0e808     00 12 06 F6 | 	mov	arg01, ##1148846080
0e80c     8C 4E B1 FD | 	call	#__system___float_mul
0e810     FD 12 02 F6 | 	mov	arg01, result1
0e814     01 14 06 F6 | 	mov	arg02, #1
0e818     48 53 B1 FD | 	call	#__system___float_tointeger
0e81c     1C 4E 05 F1 | 	add	fp, #28
0e820     A7 FA 61 FC | 	wrlong	result1, fp
0e824     37 00 00 FF 
0e828     10 E4 05 F1 | 	add	objptr, ##28176
0e82c     F2 24 02 FB | 	rdlong	local04, objptr
0e830     37 00 00 FF 
0e834     10 E4 85 F1 | 	sub	objptr, ##28176
0e838     10 4E 85 F1 | 	sub	fp, #16
0e83c     A7 20 02 FB | 	rdlong	local02, fp
0e840     06 20 66 F0 | 	shl	local02, #6
0e844     10 25 02 F1 | 	add	local04, local02
0e848     04 4E 85 F1 | 	sub	fp, #4
0e84c     A7 24 62 FC | 	wrlong	local04, fp
0e850                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
0e850                 | '  
0e850                 | '   
0e850                 | ' 'print period,skip
0e850                 | ' speed=round(speed_coeff/slen)
0e850                 | ' ipan=8192+round(8192*pan)
0e850                 | ' ivol=round(1000.0*vol)
0e850                 | ' base2=base+64*channel
0e850                 | ' 'skip=round(freq*3.9827219) 
0e850                 | ' if wave <32 then 
0e850     18 4E 05 F1 | 	add	fp, #24
0e854     A7 24 02 FB | 	rdlong	local04, fp
0e858     20 4E 85 F1 | 	sub	fp, #32
0e85c     20 24 56 F2 | 	cmps	local04, #32 wc
0e860     2C 00 90 3D |  if_ae	jmp	#LR__1179
0e864     08 4E 05 F1 | 	add	fp, #8
0e868     A7 12 02 FB | 	rdlong	arg01, fp
0e86c     08 12 06 F1 | 	add	arg01, #8
0e870     18 4E 05 F1 | 	add	fp, #24
0e874     A7 14 02 FB | 	rdlong	arg02, fp
0e878     20 4E 85 F1 | 	sub	fp, #32
0e87c     0B 14 66 F0 | 	shl	arg02, #11
0e880     00 00 60 FF 
0e884     00 14 06 F1 | 	add	arg02, ##-1073741824
0e888     09 15 62 FC | 	wrlong	arg02, arg01
0e88c     18 00 90 FD | 	jmp	#LR__1180
0e890                 | LR__1179
0e890     08 4E 05 F1 | 	add	fp, #8
0e894     A7 12 02 FB | 	rdlong	arg01, fp
0e898     08 4E 85 F1 | 	sub	fp, #8
0e89c     08 12 06 F1 | 	add	arg01, #8
0e8a0     00 00 E4 FF 
0e8a4     09 01 68 FC | 	wrlong	##-939524096, arg01
0e8a8                 | LR__1180
0e8a8     08 4E 05 F1 | 	add	fp, #8
0e8ac     A7 12 02 FB | 	rdlong	arg01, fp
0e8b0     10 12 06 F1 | 	add	arg01, #16
0e8b4     04 00 80 FF 
0e8b8     09 01 68 FC | 	wrlong	##2048, arg01
0e8bc     A7 12 02 FB | 	rdlong	arg01, fp
0e8c0     0C 12 06 F1 | 	add	arg01, #12
0e8c4     09 01 68 FC | 	wrlong	#0, arg01
0e8c8     A7 12 02 FB | 	rdlong	arg01, fp
0e8cc     14 12 06 F1 | 	add	arg01, #20
0e8d0     14 4E 05 F1 | 	add	fp, #20
0e8d4     A7 14 02 FB | 	rdlong	arg02, fp
0e8d8     09 15 52 FC | 	wrword	arg02, arg01
0e8dc     14 4E 85 F1 | 	sub	fp, #20
0e8e0     A7 12 02 FB | 	rdlong	arg01, fp
0e8e4     16 12 06 F1 | 	add	arg01, #22
0e8e8     10 4E 05 F1 | 	add	fp, #16
0e8ec     A7 14 02 FB | 	rdlong	arg02, fp
0e8f0     09 15 52 FC | 	wrword	arg02, arg01
0e8f4                 | ' lpoke base2+16,2048
0e8f4                 | ' lpoke base2+12,0
0e8f4                 | ' dpoke base2+20,ivol 
0e8f4                 | ' dpoke base2+22,ipan 
0e8f4                 | ' if wave<32 then
0e8f4     08 4E 05 F1 | 	add	fp, #8
0e8f8     A7 24 02 FB | 	rdlong	local04, fp
0e8fc     20 4E 85 F1 | 	sub	fp, #32
0e900     20 24 56 F2 | 	cmps	local04, #32 wc
0e904     38 00 90 3D |  if_ae	jmp	#LR__1181
0e908     08 4E 05 F1 | 	add	fp, #8
0e90c     A7 12 02 FB | 	rdlong	arg01, fp
0e910     18 12 06 F1 | 	add	arg01, #24
0e914     2C 4E 05 F1 | 	add	fp, #44
0e918     A7 14 02 FB | 	rdlong	arg02, fp
0e91c     09 15 52 FC | 	wrword	arg02, arg01
0e920     2C 4E 85 F1 | 	sub	fp, #44
0e924     A7 12 02 FB | 	rdlong	arg01, fp
0e928     1A 12 06 F1 | 	add	arg01, #26
0e92c     08 4E 05 F1 | 	add	fp, #8
0e930     A7 14 02 FB | 	rdlong	arg02, fp
0e934     10 4E 85 F1 | 	sub	fp, #16
0e938     09 15 52 FC | 	wrword	arg02, arg01
0e93c     48 00 90 FD | 	jmp	#LR__1182
0e940                 | LR__1181
0e940     08 4E 05 F1 | 	add	fp, #8
0e944     A7 24 02 FB | 	rdlong	local04, fp
0e948     18 24 06 F1 | 	add	local04, #24
0e94c     64 4E 05 F1 | 	add	fp, #100
0e950     A7 14 02 FB | 	rdlong	arg02, fp
0e954     6C 4E 85 F1 | 	sub	fp, #108
0e958     3E 2C 25 FF 
0e95c     3C 12 06 F6 | 	mov	arg01, ##1247312956
0e960     3C 4F B1 FD | 	call	#__system___float_div
0e964     FD 12 02 F6 | 	mov	arg01, result1
0e968     01 14 06 F6 | 	mov	arg02, #1
0e96c     F4 51 B1 FD | 	call	#__system___float_tointeger
0e970     12 FB 51 FC | 	wrword	result1, local04
0e974     08 4E 05 F1 | 	add	fp, #8
0e978     A7 12 02 FB | 	rdlong	arg01, fp
0e97c     08 4E 85 F1 | 	sub	fp, #8
0e980     1A 12 06 F1 | 	add	arg01, #26
0e984     09 01 5A FC | 	wrword	#256, arg01
0e988                 | LR__1182
0e988     08 4E 05 F1 | 	add	fp, #8
0e98c     A7 12 02 FB | 	rdlong	arg01, fp
0e990     1C 12 06 F1 | 	add	arg01, #28
0e994     09 01 68 FC | 	wrlong	#0, arg01
0e998     A7 12 02 FB | 	rdlong	arg01, fp
0e99c     20 12 06 F1 | 	add	arg01, #32
0e9a0     09 01 68 FC | 	wrlong	#0, arg01
0e9a4                 | ' lpoke base2+28,$0000_0000
0e9a4                 | ' lpoke base2+32,0 
0e9a4                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
0e9a4     1C 4E 05 F1 | 	add	fp, #28
0e9a8     A7 24 02 FB | 	rdlong	local04, fp
0e9ac     24 4E 85 F1 | 	sub	fp, #36
0e9b0     08 24 0E F2 | 	cmp	local04, #8 wz
0e9b4     18 00 90 5D |  if_ne	jmp	#LR__1183
0e9b8     08 4E 05 F1 | 	add	fp, #8
0e9bc     A7 12 02 FB | 	rdlong	arg01, fp
0e9c0     08 4E 85 F1 | 	sub	fp, #8
0e9c4     24 12 06 F1 | 	add	arg01, #36
0e9c8     09 01 68 FC | 	wrlong	#0, arg01
0e9cc     34 00 90 FD | 	jmp	#LR__1184
0e9d0                 | LR__1183
0e9d0     08 4E 05 F1 | 	add	fp, #8
0e9d4     A7 12 02 FB | 	rdlong	arg01, fp
0e9d8     24 12 06 F1 | 	add	arg01, #36
0e9dc     1C 4E 05 F1 | 	add	fp, #28
0e9e0     A7 14 02 FB | 	rdlong	arg02, fp
0e9e4     24 4E 85 F1 | 	sub	fp, #36
0e9e8     09 14 66 F0 | 	shl	arg02, #9
0e9ec     0C 00 00 FF 
0e9f0     D8 E4 05 F1 | 	add	objptr, ##6360
0e9f4     F2 14 02 F1 | 	add	arg02, objptr
0e9f8     0C 00 00 FF 
0e9fc     D8 E4 85 F1 | 	sub	objptr, ##6360
0ea00     09 15 62 FC | 	wrlong	arg02, arg01
0ea04                 | LR__1184
0ea04     08 4E 05 F1 | 	add	fp, #8
0ea08     A7 12 02 FB | 	rdlong	arg01, fp
0ea0c     28 12 06 F1 | 	add	arg01, #40
0ea10     0C 4E 05 F1 | 	add	fp, #12
0ea14     A7 14 02 FB | 	rdlong	arg02, fp
0ea18     09 15 62 FC | 	wrlong	arg02, arg01
0ea1c     0C 4E 85 F1 | 	sub	fp, #12
0ea20     A7 12 02 FB | 	rdlong	arg01, fp
0ea24     2C 12 06 F1 | 	add	arg01, #44
0ea28     24 4E 05 F1 | 	add	fp, #36
0ea2c     A7 14 02 FB | 	rdlong	arg02, fp
0ea30     09 15 62 FC | 	wrlong	arg02, arg01
0ea34                 | ' lpoke base2+40,speed' speed
0ea34                 | ' lpoke base2+44,sus 'len
0ea34                 | ' 
0ea34                 | ' if delay>0 then waitms(delay) ' : print "wait "; round(params(6)) : l
0ea34     04 4E 85 F1 | 	sub	fp, #4
0ea38     A7 24 02 FB | 	rdlong	local04, fp
0ea3c     28 4E 85 F1 | 	sub	fp, #40
0ea40     01 24 56 F2 | 	cmps	local04, #1 wc
0ea44     28 4E 05 31 |  if_ae	add	fp, #40
0ea48     A7 12 02 3B |  if_ae	rdlong	arg01, fp
0ea4c     28 4E 85 31 |  if_ae	sub	fp, #40
0ea50     88 23 B1 3D |  if_ae	call	#__system___waitms
0ea54     A7 F0 03 F6 | 	mov	ptra, fp
0ea58     B2 00 A0 FD | 	call	#popregs_
0ea5c                 | _do_play_ret
0ea5c     2D 00 64 FD | 	ret
0ea60                 | 
0ea60                 | ' 
0ea60                 | ' sub do_changevol
0ea60                 | _do_changevol
0ea60     00 4A 05 F6 | 	mov	COUNT_, #0
0ea64     A8 00 A0 FD | 	call	#pushregs_
0ea68     14 F0 07 F1 | 	add	ptra, #20
0ea6c     E8 CF BF FD | 	call	#_pop
0ea70     FF 14 02 F6 | 	mov	arg02, result3
0ea74     A7 FA 61 FC | 	wrlong	result1, fp
0ea78     04 4E 05 F1 | 	add	fp, #4
0ea7c     A7 FC 61 FC | 	wrlong	result2, fp
0ea80     04 4E 05 F1 | 	add	fp, #4
0ea84     A7 14 62 FC | 	wrlong	arg02, fp
0ea88     08 4E 85 F1 | 	sub	fp, #8
0ea8c     A7 12 02 F6 | 	mov	arg01, fp
0ea90     1C 72 B0 FD | 	call	#_converttofloat
0ea94     FD 12 02 F6 | 	mov	arg01, result1
0ea98     00 3D 22 FF 
0ea9c     00 14 06 F6 | 	mov	arg02, ##1148846080
0eaa0     F8 4B B1 FD | 	call	#__system___float_mul
0eaa4     FD 12 02 F6 | 	mov	arg01, result1
0eaa8     01 14 06 F6 | 	mov	arg02, #1
0eaac     B4 50 B1 FD | 	call	#__system___float_tointeger
0eab0     FD 14 52 F6 | 	abs	arg02, result1 wc
0eab4     0D 14 46 F7 | 	zerox	arg02, #13
0eab8     0A 15 82 F6 | 	negc	arg02, arg02
0eabc     10 4E 05 F1 | 	add	fp, #16
0eac0     A7 14 62 FC | 	wrlong	arg02, fp
0eac4     10 4E 85 F1 | 	sub	fp, #16
0eac8     8C CF BF FD | 	call	#_pop
0eacc     FF 14 02 F6 | 	mov	arg02, result3
0ead0     A7 FA 61 FC | 	wrlong	result1, fp
0ead4     04 4E 05 F1 | 	add	fp, #4
0ead8     A7 FC 61 FC | 	wrlong	result2, fp
0eadc     04 4E 05 F1 | 	add	fp, #4
0eae0     A7 14 62 FC | 	wrlong	arg02, fp
0eae4     08 4E 85 F1 | 	sub	fp, #8
0eae8     A7 12 02 F6 | 	mov	arg01, fp
0eaec     04 71 B0 FD | 	call	#_converttoint
0eaf0     FD 14 52 F6 | 	abs	arg02, result1 wc
0eaf4     07 14 06 F5 | 	and	arg02, #7
0eaf8     0A 15 82 F6 | 	negc	arg02, arg02
0eafc     0C 4E 05 F1 | 	add	fp, #12
0eb00     A7 14 62 FC | 	wrlong	arg02, fp
0eb04     37 00 00 FF 
0eb08     10 E4 05 F1 | 	add	objptr, ##28176
0eb0c     F2 12 02 FB | 	rdlong	arg01, objptr
0eb10     37 00 00 FF 
0eb14     10 E4 85 F1 | 	sub	objptr, ##28176
0eb18     06 14 66 F0 | 	shl	arg02, #6
0eb1c     0A 13 02 F1 | 	add	arg01, arg02
0eb20     14 12 06 F1 | 	add	arg01, #20
0eb24     04 4E 05 F1 | 	add	fp, #4
0eb28     A7 14 02 FB | 	rdlong	arg02, fp
0eb2c     10 4E 85 F1 | 	sub	fp, #16
0eb30     09 15 52 FC | 	wrword	arg02, arg01
0eb34     A7 F0 03 F6 | 	mov	ptra, fp
0eb38     B2 00 A0 FD | 	call	#popregs_
0eb3c                 | _do_changevol_ret
0eb3c     2D 00 64 FD | 	ret
0eb40                 | 
0eb40                 | ' 
0eb40                 | ' sub do_changepan
0eb40                 | _do_changepan
0eb40     01 4A 05 F6 | 	mov	COUNT_, #1
0eb44     A8 00 A0 FD | 	call	#pushregs_
0eb48     14 F0 07 F1 | 	add	ptra, #20
0eb4c     08 CF BF FD | 	call	#_pop
0eb50     A7 FA 61 FC | 	wrlong	result1, fp
0eb54     04 4E 05 F1 | 	add	fp, #4
0eb58     A7 FC 61 FC | 	wrlong	result2, fp
0eb5c     04 4E 05 F1 | 	add	fp, #4
0eb60     A7 FE 61 FC | 	wrlong	result3, fp
0eb64     08 4E 85 F1 | 	sub	fp, #8
0eb68     00 00 23 FF 
0eb6c     00 1E 06 F6 | 	mov	local01, ##1174405120
0eb70     A7 12 02 F6 | 	mov	arg01, fp
0eb74     38 71 B0 FD | 	call	#_converttofloat
0eb78     FD 14 02 F6 | 	mov	arg02, result1
0eb7c     0F 13 02 F6 | 	mov	arg01, local01
0eb80     18 4B B1 FD | 	call	#__system___float_mul
0eb84     FD 12 02 F6 | 	mov	arg01, result1
0eb88     01 14 06 F6 | 	mov	arg02, #1
0eb8c     D4 4F B1 FD | 	call	#__system___float_tointeger
0eb90     0D 1E C6 F9 | 	decod	local01, #13
0eb94     FD 1E 02 F1 | 	add	local01, result1
0eb98     10 4E 05 F1 | 	add	fp, #16
0eb9c     A7 1E 62 FC | 	wrlong	local01, fp
0eba0                 | ' t1=pop()
0eba0                 | ' pan=8192+round(8192*converttofloat(t1)) 
0eba0                 | ' if pan<0 then pan=0
0eba0     10 4E 85 F1 | 	sub	fp, #16
0eba4     00 1E 56 F2 | 	cmps	local01, #0 wc
0eba8     10 4E 05 C1 |  if_b	add	fp, #16
0ebac     A7 00 68 CC |  if_b	wrlong	#0, fp
0ebb0     10 4E 85 C1 |  if_b	sub	fp, #16
0ebb4                 | ' if pan>16384 then pan=16384
0ebb4     10 4E 05 F1 | 	add	fp, #16
0ebb8     A7 1E 02 FB | 	rdlong	local01, fp
0ebbc     10 4E 85 F1 | 	sub	fp, #16
0ebc0     20 00 00 FF 
0ebc4     01 1E 56 F2 | 	cmps	local01, ##16385 wc
0ebc8     10 4E 05 31 |  if_ae	add	fp, #16
0ebcc     20 00 80 3F 
0ebd0     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0ebd4     10 4E 85 31 |  if_ae	sub	fp, #16
0ebd8     7C CE BF FD | 	call	#_pop
0ebdc     FF 1E 02 F6 | 	mov	local01, result3
0ebe0     A7 FA 61 FC | 	wrlong	result1, fp
0ebe4     04 4E 05 F1 | 	add	fp, #4
0ebe8     A7 FC 61 FC | 	wrlong	result2, fp
0ebec     04 4E 05 F1 | 	add	fp, #4
0ebf0     A7 1E 62 FC | 	wrlong	local01, fp
0ebf4     08 4E 85 F1 | 	sub	fp, #8
0ebf8     A7 12 02 F6 | 	mov	arg01, fp
0ebfc     F4 6F B0 FD | 	call	#_converttoint
0ec00     FD 1E 52 F6 | 	abs	local01, result1 wc
0ec04     07 1E 06 F5 | 	and	local01, #7
0ec08     0F 1F 82 F6 | 	negc	local01, local01
0ec0c     0C 4E 05 F1 | 	add	fp, #12
0ec10     A7 1E 62 FC | 	wrlong	local01, fp
0ec14     37 00 00 FF 
0ec18     10 E4 05 F1 | 	add	objptr, ##28176
0ec1c     F2 12 02 FB | 	rdlong	arg01, objptr
0ec20     37 00 00 FF 
0ec24     10 E4 85 F1 | 	sub	objptr, ##28176
0ec28     06 1E 66 F0 | 	shl	local01, #6
0ec2c     0F 13 02 F1 | 	add	arg01, local01
0ec30     16 12 06 F1 | 	add	arg01, #22
0ec34     04 4E 05 F1 | 	add	fp, #4
0ec38     A7 14 02 FB | 	rdlong	arg02, fp
0ec3c     10 4E 85 F1 | 	sub	fp, #16
0ec40     09 15 52 FC | 	wrword	arg02, arg01
0ec44     A7 F0 03 F6 | 	mov	ptra, fp
0ec48     B2 00 A0 FD | 	call	#popregs_
0ec4c                 | _do_changepan_ret
0ec4c     2D 00 64 FD | 	ret
0ec50                 | 
0ec50                 | ' 
0ec50                 | ' sub do_changefreq
0ec50                 | _do_changefreq
0ec50     04 4A 05 F6 | 	mov	COUNT_, #4
0ec54     A8 00 A0 FD | 	call	#pushregs_
0ec58     28 F0 07 F1 | 	add	ptra, #40
0ec5c     F8 CD BF FD | 	call	#_pop
0ec60     FF 14 02 F6 | 	mov	arg02, result3
0ec64     A7 FA 61 FC | 	wrlong	result1, fp
0ec68     04 4E 05 F1 | 	add	fp, #4
0ec6c     A7 FC 61 FC | 	wrlong	result2, fp
0ec70     04 4E 05 F1 | 	add	fp, #4
0ec74     A7 14 62 FC | 	wrlong	arg02, fp
0ec78     08 4E 85 F1 | 	sub	fp, #8
0ec7c     A7 12 02 F6 | 	mov	arg01, fp
0ec80     2C 70 B0 FD | 	call	#_converttofloat
0ec84     24 4E 05 F1 | 	add	fp, #36
0ec88     A7 FA 61 FC | 	wrlong	result1, fp
0ec8c     24 4E 85 F1 | 	sub	fp, #36
0ec90     FD 14 02 F6 | 	mov	arg02, result1
0ec94     FC 16 20 FF 
0ec98     54 12 06 F6 | 	mov	arg01, ##1076754516
0ec9c     A8 59 B1 FD | 	call	#__system____builtin_logbase
0eca0     FD 1E 02 F6 | 	mov	local01, result1
0eca4     1E 14 C6 F9 | 	decod	arg02, #30
0eca8     FC 16 20 FF 
0ecac     54 12 06 F6 | 	mov	arg01, ##1076754516
0ecb0     94 59 B1 FD | 	call	#__system____builtin_logbase
0ecb4     FD 14 02 F6 | 	mov	arg02, result1
0ecb8     0F 13 02 F6 | 	mov	arg01, local01
0ecbc     E0 4B B1 FD | 	call	#__system___float_div
0ecc0     FD 12 02 F6 | 	mov	arg01, result1
0ecc4     00 14 06 F6 | 	mov	arg02, #0
0ecc8     98 4E B1 FD | 	call	#__system___float_tointeger
0eccc     10 4E 05 F1 | 	add	fp, #16
0ecd0     A7 FA 61 FC | 	wrlong	result1, fp
0ecd4     1E 1E C6 F9 | 	decod	local01, #30
0ecd8     FD 12 02 F6 | 	mov	arg01, result1
0ecdc     10 4E 85 F1 | 	sub	fp, #16
0ece0     05 12 06 F1 | 	add	arg01, #5
0ece4     09 13 52 F6 | 	abs	arg01, arg01 wc
0ece8     1F 20 C6 C9 |  if_b	decod	local02, #31
0ecec     00 20 06 36 |  if_ae	mov	local02, #0
0ecf0     A4 45 B1 FD | 	call	#__system___float_fromuns
0ecf4     10 FB 61 F5 | 	xor	result1, local02
0ecf8     FD 14 02 F6 | 	mov	arg02, result1
0ecfc     0F 13 02 F6 | 	mov	arg01, local01
0ed00     7C 58 B1 FD | 	call	#__system____builtin_powf
0ed04     FD 12 02 F6 | 	mov	arg01, result1
0ed08     01 14 06 F6 | 	mov	arg02, #1
0ed0c     54 4E B1 FD | 	call	#__system___float_tointeger
0ed10     14 4E 05 F1 | 	add	fp, #20
0ed14     A7 FA 61 FC | 	wrlong	result1, fp
0ed18                 | ' skip=round(2^(lfreq+5))
0ed18                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0ed18     14 4E 85 F1 | 	sub	fp, #20
0ed1c     40 00 00 FF 
0ed20     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0ed24     30 00 90 CD |  if_b	jmp	#LR__1190
0ed28     14 4E 05 F1 | 	add	fp, #20
0ed2c     A7 1E 02 FB | 	rdlong	local01, fp
0ed30     0F 1F 52 F6 | 	abs	local01, local01 wc
0ed34     0F 1E 46 F0 | 	shr	local01, #15
0ed38     0F 1F 82 F6 | 	negc	local01, local01
0ed3c     04 4E 05 F1 | 	add	fp, #4
0ed40     A7 1E 62 FC | 	wrlong	local01, fp
0ed44     04 4E 85 F1 | 	sub	fp, #4
0ed48     40 00 80 FF 
0ed4c     A7 00 68 FC | 	wrlong	##32768, fp
0ed50     14 4E 85 F1 | 	sub	fp, #20
0ed54     0C 00 90 FD | 	jmp	#LR__1191
0ed58                 | LR__1190
0ed58     18 4E 05 F1 | 	add	fp, #24
0ed5c     A7 02 68 FC | 	wrlong	#1, fp
0ed60     18 4E 85 F1 | 	sub	fp, #24
0ed64                 | LR__1191
0ed64     24 4E 05 F1 | 	add	fp, #36
0ed68     A7 14 02 FB | 	rdlong	arg02, fp
0ed6c     24 4E 85 F1 | 	sub	fp, #36
0ed70     3E 2C 25 FF 
0ed74     3C 12 06 F6 | 	mov	arg01, ##1247312956
0ed78     24 4B B1 FD | 	call	#__system___float_div
0ed7c     FD 1E 02 F6 | 	mov	local01, result1
0ed80     18 4E 05 F1 | 	add	fp, #24
0ed84     A7 12 02 FB | 	rdlong	arg01, fp
0ed88     18 4E 85 F1 | 	sub	fp, #24
0ed8c     09 13 52 F6 | 	abs	arg01, arg01 wc
0ed90     1F 20 C6 C9 |  if_b	decod	local02, #31
0ed94     00 20 06 36 |  if_ae	mov	local02, #0
0ed98     FC 44 B1 FD | 	call	#__system___float_fromuns
0ed9c     10 FB 61 F5 | 	xor	result1, local02
0eda0     FD 22 02 F6 | 	mov	local03, result1
0eda4     1E 24 C6 F9 | 	decod	local04, #30
0eda8     0D 12 06 F6 | 	mov	arg01, #13
0edac     10 4E 05 F1 | 	add	fp, #16
0edb0     A7 14 02 FB | 	rdlong	arg02, fp
0edb4     10 4E 85 F1 | 	sub	fp, #16
0edb8     0A 13 82 F1 | 	sub	arg01, arg02
0edbc     09 13 52 F6 | 	abs	arg01, arg01 wc
0edc0     1F 20 C6 C9 |  if_b	decod	local02, #31
0edc4     00 20 06 36 |  if_ae	mov	local02, #0
0edc8     CC 44 B1 FD | 	call	#__system___float_fromuns
0edcc     10 FB 61 F5 | 	xor	result1, local02
0edd0     FD 14 02 F6 | 	mov	arg02, result1
0edd4     12 13 02 F6 | 	mov	arg01, local04
0edd8     A4 57 B1 FD | 	call	#__system____builtin_powf
0eddc     FD 14 02 F6 | 	mov	arg02, result1
0ede0     11 13 02 F6 | 	mov	arg01, local03
0ede4     B4 48 B1 FD | 	call	#__system___float_mul
0ede8     FD 14 02 F6 | 	mov	arg02, result1
0edec     0F 13 02 F6 | 	mov	arg01, local01
0edf0     AC 4A B1 FD | 	call	#__system___float_div
0edf4     FD 12 02 F6 | 	mov	arg01, result1
0edf8     01 14 06 F6 | 	mov	arg02, #1
0edfc     64 4D B1 FD | 	call	#__system___float_tointeger
0ee00     FD 1E 02 F6 | 	mov	local01, result1
0ee04     1C 4E 05 F1 | 	add	fp, #28
0ee08     A7 1E 62 FC | 	wrlong	local01, fp
0ee0c     1C 4E 85 F1 | 	sub	fp, #28
0ee10     44 CC BF FD | 	call	#_pop
0ee14     FF 24 02 F6 | 	mov	local04, result3
0ee18     A7 FA 61 FC | 	wrlong	result1, fp
0ee1c     04 4E 05 F1 | 	add	fp, #4
0ee20     A7 FC 61 FC | 	wrlong	result2, fp
0ee24     04 4E 05 F1 | 	add	fp, #4
0ee28     A7 24 62 FC | 	wrlong	local04, fp
0ee2c     08 4E 85 F1 | 	sub	fp, #8
0ee30     A7 12 02 F6 | 	mov	arg01, fp
0ee34     BC 6D B0 FD | 	call	#_converttoint
0ee38     FD 22 52 F6 | 	abs	local03, result1 wc
0ee3c     07 22 06 F5 | 	and	local03, #7
0ee40     11 23 82 F6 | 	negc	local03, local03
0ee44     0C 4E 05 F1 | 	add	fp, #12
0ee48     A7 22 62 FC | 	wrlong	local03, fp
0ee4c     08 4E 05 F1 | 	add	fp, #8
0ee50     A7 1E 02 FB | 	rdlong	local01, fp
0ee54     10 1E 66 F0 | 	shl	local01, #16
0ee58     08 4E 05 F1 | 	add	fp, #8
0ee5c     A7 24 02 FB | 	rdlong	local04, fp
0ee60     12 1F 02 F1 | 	add	local01, local04
0ee64     04 4E 05 F1 | 	add	fp, #4
0ee68     A7 1E 62 FC | 	wrlong	local01, fp
0ee6c                 | ' if channels(channel).wave<32 then 
0ee6c     14 4E 85 F1 | 	sub	fp, #20
0ee70     A7 24 02 FB | 	rdlong	local04, fp
0ee74     0C 4E 85 F1 | 	sub	fp, #12
0ee78     12 23 02 F6 | 	mov	local03, local04
0ee7c     01 22 66 F0 | 	shl	local03, #1
0ee80     12 23 02 F1 | 	add	local03, local04
0ee84     03 22 66 F0 | 	shl	local03, #3
0ee88     14 00 00 FF 
0ee8c     38 E5 05 F1 | 	add	objptr, ##10552
0ee90     F2 22 02 F1 | 	add	local03, objptr
0ee94     04 22 06 F1 | 	add	local03, #4
0ee98     11 1F C2 FA | 	rdbyte	local01, local03
0ee9c     20 1E 16 F2 | 	cmp	local01, #32 wc
0eea0     14 00 00 FF 
0eea4     38 E5 85 F1 | 	sub	objptr, ##10552
0eea8     3C 00 90 3D |  if_ae	jmp	#LR__1192
0eeac     37 00 00 FF 
0eeb0     10 E4 05 F1 | 	add	objptr, ##28176
0eeb4     F2 12 02 FB | 	rdlong	arg01, objptr
0eeb8     37 00 00 FF 
0eebc     10 E4 85 F1 | 	sub	objptr, ##28176
0eec0     0C 4E 05 F1 | 	add	fp, #12
0eec4     A7 24 02 FB | 	rdlong	local04, fp
0eec8     06 24 66 F0 | 	shl	local04, #6
0eecc     12 13 02 F1 | 	add	arg01, local04
0eed0     18 12 06 F1 | 	add	arg01, #24
0eed4     14 4E 05 F1 | 	add	fp, #20
0eed8     A7 14 02 FB | 	rdlong	arg02, fp
0eedc     20 4E 85 F1 | 	sub	fp, #32
0eee0     09 15 62 FC | 	wrlong	arg02, arg01
0eee4     80 00 90 FD | 	jmp	#LR__1193
0eee8                 | LR__1192
0eee8     37 00 00 FF 
0eeec     10 E4 05 F1 | 	add	objptr, ##28176
0eef0     F2 1E 02 FB | 	rdlong	local01, objptr
0eef4     37 00 00 FF 
0eef8     10 E4 85 F1 | 	sub	objptr, ##28176
0eefc     0C 4E 05 F1 | 	add	fp, #12
0ef00     A7 24 02 FB | 	rdlong	local04, fp
0ef04     06 24 66 F0 | 	shl	local04, #6
0ef08     12 1F 02 F1 | 	add	local01, local04
0ef0c     18 1E 06 F1 | 	add	local01, #24
0ef10     18 4E 05 F1 | 	add	fp, #24
0ef14     A7 14 02 FB | 	rdlong	arg02, fp
0ef18     24 4E 85 F1 | 	sub	fp, #36
0ef1c     3E 2C 25 FF 
0ef20     3C 12 06 F6 | 	mov	arg01, ##1247312956
0ef24     78 49 B1 FD | 	call	#__system___float_div
0ef28     FD 12 02 F6 | 	mov	arg01, result1
0ef2c     01 14 06 F6 | 	mov	arg02, #1
0ef30     30 4C B1 FD | 	call	#__system___float_tointeger
0ef34     0F FB 51 FC | 	wrword	result1, local01
0ef38     37 00 00 FF 
0ef3c     10 E4 05 F1 | 	add	objptr, ##28176
0ef40     F2 12 02 FB | 	rdlong	arg01, objptr
0ef44     37 00 00 FF 
0ef48     10 E4 85 F1 | 	sub	objptr, ##28176
0ef4c     0C 4E 05 F1 | 	add	fp, #12
0ef50     A7 24 02 FB | 	rdlong	local04, fp
0ef54     0C 4E 85 F1 | 	sub	fp, #12
0ef58     06 24 66 F0 | 	shl	local04, #6
0ef5c     12 13 02 F1 | 	add	arg01, local04
0ef60     1A 12 06 F1 | 	add	arg01, #26
0ef64     09 01 5A FC | 	wrword	#256, arg01
0ef68                 | LR__1193
0ef68     A7 F0 03 F6 | 	mov	ptra, fp
0ef6c     B2 00 A0 FD | 	call	#popregs_
0ef70                 | _do_changefreq_ret
0ef70     2D 00 64 FD | 	ret
0ef74                 | 
0ef74                 | ' 
0ef74                 | ' sub do_changewav
0ef74                 | _do_changewav
0ef74     00 4A 05 F6 | 	mov	COUNT_, #0
0ef78     A8 00 A0 FD | 	call	#pushregs_
0ef7c     14 F0 07 F1 | 	add	ptra, #20
0ef80     D4 CA BF FD | 	call	#_pop
0ef84     FF 14 02 F6 | 	mov	arg02, result3
0ef88     A7 FA 61 FC | 	wrlong	result1, fp
0ef8c     04 4E 05 F1 | 	add	fp, #4
0ef90     A7 FC 61 FC | 	wrlong	result2, fp
0ef94     04 4E 05 F1 | 	add	fp, #4
0ef98     A7 14 62 FC | 	wrlong	arg02, fp
0ef9c     08 4E 85 F1 | 	sub	fp, #8
0efa0     A7 12 02 F6 | 	mov	arg01, fp
0efa4     4C 6C B0 FD | 	call	#_converttoint
0efa8     10 4E 05 F1 | 	add	fp, #16
0efac     A7 FA 61 FC | 	wrlong	result1, fp
0efb0                 | ' t1=pop()
0efb0                 | ' wave=converttoint(t1)
0efb0                 | ' if wave<0 then wave=0
0efb0     FD 14 02 F6 | 	mov	arg02, result1
0efb4     10 4E 85 F1 | 	sub	fp, #16
0efb8     00 14 56 F2 | 	cmps	arg02, #0 wc
0efbc     10 4E 05 C1 |  if_b	add	fp, #16
0efc0     A7 00 68 CC |  if_b	wrlong	#0, fp
0efc4     10 4E 85 C1 |  if_b	sub	fp, #16
0efc8     8C CA BF FD | 	call	#_pop
0efcc     FF 14 02 F6 | 	mov	arg02, result3
0efd0     A7 FA 61 FC | 	wrlong	result1, fp
0efd4     04 4E 05 F1 | 	add	fp, #4
0efd8     A7 FC 61 FC | 	wrlong	result2, fp
0efdc     04 4E 05 F1 | 	add	fp, #4
0efe0     A7 14 62 FC | 	wrlong	arg02, fp
0efe4     08 4E 85 F1 | 	sub	fp, #8
0efe8     A7 12 02 F6 | 	mov	arg01, fp
0efec     04 6C B0 FD | 	call	#_converttoint
0eff0     FD 14 52 F6 | 	abs	arg02, result1 wc
0eff4     07 14 06 F5 | 	and	arg02, #7
0eff8     0A 15 82 F6 | 	negc	arg02, arg02
0effc     0C 4E 05 F1 | 	add	fp, #12
0f000     A7 14 62 FC | 	wrlong	arg02, fp
0f004                 | ' if wave <32 then 
0f004     04 4E 05 F1 | 	add	fp, #4
0f008     A7 14 02 FB | 	rdlong	arg02, fp
0f00c     10 4E 85 F1 | 	sub	fp, #16
0f010     20 14 56 F2 | 	cmps	arg02, #32 wc
0f014     48 00 90 3D |  if_ae	jmp	#LR__1200
0f018     37 00 00 FF 
0f01c     10 E4 05 F1 | 	add	objptr, ##28176
0f020     F2 12 02 FB | 	rdlong	arg01, objptr
0f024     37 00 00 FF 
0f028     10 E4 85 F1 | 	sub	objptr, ##28176
0f02c     0C 4E 05 F1 | 	add	fp, #12
0f030     A7 14 02 FB | 	rdlong	arg02, fp
0f034     06 14 66 F0 | 	shl	arg02, #6
0f038     0A 13 02 F1 | 	add	arg01, arg02
0f03c     08 12 06 F1 | 	add	arg01, #8
0f040     04 4E 05 F1 | 	add	fp, #4
0f044     A7 14 02 FB | 	rdlong	arg02, fp
0f048     10 4E 85 F1 | 	sub	fp, #16
0f04c     0B 14 66 F0 | 	shl	arg02, #11
0f050     00 00 60 FF 
0f054     00 14 06 F1 | 	add	arg02, ##-1073741824
0f058     09 15 62 FC | 	wrlong	arg02, arg01
0f05c     34 00 90 FD | 	jmp	#LR__1201
0f060                 | LR__1200
0f060     37 00 00 FF 
0f064     10 E4 05 F1 | 	add	objptr, ##28176
0f068     F2 12 02 FB | 	rdlong	arg01, objptr
0f06c     37 00 00 FF 
0f070     10 E4 85 F1 | 	sub	objptr, ##28176
0f074     0C 4E 05 F1 | 	add	fp, #12
0f078     A7 14 02 FB | 	rdlong	arg02, fp
0f07c     0C 4E 85 F1 | 	sub	fp, #12
0f080     06 14 66 F0 | 	shl	arg02, #6
0f084     0A 13 02 F1 | 	add	arg01, arg02
0f088     08 12 06 F1 | 	add	arg01, #8
0f08c     00 00 E4 FF 
0f090     09 01 68 FC | 	wrlong	##-939524096, arg01
0f094                 | LR__1201
0f094     A7 F0 03 F6 | 	mov	ptra, fp
0f098     B2 00 A0 FD | 	call	#popregs_
0f09c                 | _do_changewav_ret
0f09c     2D 00 64 FD | 	ret
0f0a0                 | 
0f0a0                 | ' 
0f0a0                 | ' 
0f0a0                 | ' sub do_shutup
0f0a0                 | _do_shutup
0f0a0     03 4A 05 F6 | 	mov	COUNT_, #3
0f0a4     A8 00 A0 FD | 	call	#pushregs_
0f0a8     18 F0 07 F1 | 	add	ptra, #24
0f0ac     4A 00 00 FF 
0f0b0     80 E4 05 F1 | 	add	objptr, ##38016
0f0b4     F2 1E 02 FB | 	rdlong	local01, objptr
0f0b8     0F 21 02 F6 | 	mov	local02, local01
0f0bc     01 20 66 F0 | 	shl	local02, #1
0f0c0     0F 21 02 F1 | 	add	local02, local01
0f0c4     02 20 66 F0 | 	shl	local02, #2
0f0c8     03 00 00 FF 
0f0cc     04 E4 85 F1 | 	sub	objptr, ##1540
0f0d0     F2 20 02 F1 | 	add	local02, objptr
0f0d4     10 23 0A FB | 	rdlong	local03, local02 wz
0f0d8     14 4E 05 F1 | 	add	fp, #20
0f0dc     A7 22 62 FC | 	wrlong	local03, fp
0f0e0                 | ' 
0f0e0                 | ' numpar=compiledline(lineptr_e).result.uresult
0f0e0                 | ' if numpar=0 then
0f0e0     14 4E 85 F1 | 	sub	fp, #20
0f0e4     47 00 00 FF 
0f0e8     7C E4 85 F1 | 	sub	objptr, ##36476
0f0ec     50 00 90 5D |  if_ne	jmp	#LR__1212
0f0f0                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
0f0f0     10 4E 05 F1 | 	add	fp, #16
0f0f4     A7 00 68 FC | 	wrlong	#0, fp
0f0f8     37 00 00 FF 
0f0fc     10 E4 05 F1 | 	add	objptr, ##28176
0f100     97 16 48 FB | 	callpa	#(@LR__1211-@LR__1210)>>2,fcache_load_ptr_
0f104                 | LR__1210
0f104     F2 12 02 FB | 	rdlong	arg01, objptr
0f108     A7 22 02 FB | 	rdlong	local03, fp
0f10c     06 22 66 F0 | 	shl	local03, #6
0f110     11 13 02 F1 | 	add	arg01, local03
0f114     14 12 06 F1 | 	add	arg01, #20
0f118     09 01 58 FC | 	wrword	#0, arg01
0f11c     A7 22 02 FB | 	rdlong	local03, fp
0f120     01 22 06 F1 | 	add	local03, #1
0f124     A7 22 62 FC | 	wrlong	local03, fp
0f128     08 22 56 F2 | 	cmps	local03, #8 wc
0f12c     D4 FF 9F CD |  if_b	jmp	#LR__1210
0f130                 | LR__1211
0f130     37 00 00 FF 
0f134     10 E4 85 F1 | 	sub	objptr, ##28176
0f138     10 4E 85 F1 | 	sub	fp, #16
0f13c     64 00 90 FD | 	jmp	#LR__1213
0f140                 | LR__1212
0f140     14 C9 BF FD | 	call	#_pop
0f144     FF 1E 02 F6 | 	mov	local01, result3
0f148     A7 FA 61 FC | 	wrlong	result1, fp
0f14c     04 4E 05 F1 | 	add	fp, #4
0f150     A7 FC 61 FC | 	wrlong	result2, fp
0f154     04 4E 05 F1 | 	add	fp, #4
0f158     A7 1E 62 FC | 	wrlong	local01, fp
0f15c     08 4E 85 F1 | 	sub	fp, #8
0f160     A7 12 02 F6 | 	mov	arg01, fp
0f164     8C 6A B0 FD | 	call	#_converttoint
0f168     FD 22 52 F6 | 	abs	local03, result1 wc
0f16c     07 22 06 F5 | 	and	local03, #7
0f170     11 21 82 F6 | 	negc	local02, local03
0f174     0C 4E 05 F1 | 	add	fp, #12
0f178     A7 20 62 FC | 	wrlong	local02, fp
0f17c     37 00 00 FF 
0f180     10 E4 05 F1 | 	add	objptr, ##28176
0f184     F2 12 02 FB | 	rdlong	arg01, objptr
0f188     37 00 00 FF 
0f18c     10 E4 85 F1 | 	sub	objptr, ##28176
0f190     0C 4E 85 F1 | 	sub	fp, #12
0f194     06 20 66 F0 | 	shl	local02, #6
0f198     10 13 02 F1 | 	add	arg01, local02
0f19c     14 12 06 F1 | 	add	arg01, #20
0f1a0     09 01 58 FC | 	wrword	#0, arg01
0f1a4                 | LR__1213
0f1a4     A7 F0 03 F6 | 	mov	ptra, fp
0f1a8     B2 00 A0 FD | 	call	#popregs_
0f1ac                 | _do_shutup_ret
0f1ac     2D 00 64 FD | 	ret
0f1b0                 | 
0f1b0                 | ' 
0f1b0                 | ' 
0f1b0                 | ' sub do_release
0f1b0                 | _do_release
0f1b0     00 4A 05 F6 | 	mov	COUNT_, #0
0f1b4     A8 00 A0 FD | 	call	#pushregs_
0f1b8     10 F0 07 F1 | 	add	ptra, #16
0f1bc     98 C8 BF FD | 	call	#_pop
0f1c0     FF 14 02 F6 | 	mov	arg02, result3
0f1c4     A7 FA 61 FC | 	wrlong	result1, fp
0f1c8     04 4E 05 F1 | 	add	fp, #4
0f1cc     A7 FC 61 FC | 	wrlong	result2, fp
0f1d0     04 4E 05 F1 | 	add	fp, #4
0f1d4     A7 14 62 FC | 	wrlong	arg02, fp
0f1d8     08 4E 85 F1 | 	sub	fp, #8
0f1dc     A7 12 02 F6 | 	mov	arg01, fp
0f1e0     10 6A B0 FD | 	call	#_converttoint
0f1e4     0C 4E 05 F1 | 	add	fp, #12
0f1e8     A7 FA 61 FC | 	wrlong	result1, fp
0f1ec                 | ' t1=pop()
0f1ec                 | ' channel=converttoint(t1)
0f1ec                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255 ' else printerror
0f1ec     0C 4E 85 F1 | 	sub	fp, #12
0f1f0     00 FA 55 F2 | 	cmps	result1, #0 wc
0f1f4     44 00 90 CD |  if_b	jmp	#LR__1220
0f1f8     0C 4E 05 F1 | 	add	fp, #12
0f1fc     A7 14 02 FB | 	rdlong	arg02, fp
0f200     0C 4E 85 F1 | 	sub	fp, #12
0f204     08 14 56 F2 | 	cmps	arg02, #8 wc
0f208     30 00 90 3D |  if_ae	jmp	#LR__1220
0f20c     37 00 00 FF 
0f210     10 E4 05 F1 | 	add	objptr, ##28176
0f214     F2 12 02 FB | 	rdlong	arg01, objptr
0f218     37 00 00 FF 
0f21c     10 E4 85 F1 | 	sub	objptr, ##28176
0f220     0C 4E 05 F1 | 	add	fp, #12
0f224     A7 14 02 FB | 	rdlong	arg02, fp
0f228     0C 4E 85 F1 | 	sub	fp, #12
0f22c     06 14 66 F0 | 	shl	arg02, #6
0f230     0A 13 02 F1 | 	add	arg01, arg02
0f234     2C 12 06 F1 | 	add	arg01, #44
0f238     09 FF 69 FC | 	wrlong	#255, arg01
0f23c                 | LR__1220
0f23c     A7 F0 03 F6 | 	mov	ptra, fp
0f240     B2 00 A0 FD | 	call	#popregs_
0f244                 | _do_release_ret
0f244     2D 00 64 FD | 	ret
0f248                 | 
0f248                 | ' 
0f248                 | ' 
0f248                 | ' sub do_defsnd
0f248                 | _do_defsnd
0f248     04 4A 05 F6 | 	mov	COUNT_, #4
0f24c     A8 00 A0 FD | 	call	#pushregs_
0f250     88 F0 07 F1 | 	add	ptra, #136
0f254     4A 00 00 FF 
0f258     80 E4 05 F1 | 	add	objptr, ##38016
0f25c     F2 1A 02 FB | 	rdlong	arg05, objptr
0f260     0D 19 02 F6 | 	mov	arg04, arg05
0f264     01 18 66 F0 | 	shl	arg04, #1
0f268     0D 19 02 F1 | 	add	arg04, arg05
0f26c     02 18 66 F0 | 	shl	arg04, #2
0f270     03 00 00 FF 
0f274     04 E4 85 F1 | 	sub	objptr, ##1540
0f278     F2 18 02 F1 | 	add	arg04, objptr
0f27c     0C 1B 02 FB | 	rdlong	arg05, arg04
0f280     A7 1A 62 FC | 	wrlong	arg05, fp
0f284                 | ' 
0f284                 | ' numpar=compiledline(lineptr_e).result.uresult
0f284                 | ' 
0f284                 | ' 
0f284                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0f284                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0f284                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0f284                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0f284                 | ' 
0f284                 | ' if numpar<2 then return
0f284     02 1A 56 F2 | 	cmps	arg05, #2 wc
0f288     47 00 00 FF 
0f28c     7C E4 85 F1 | 	sub	objptr, ##36476
0f290     94 08 90 CD |  if_b	jmp	#LR__1253
0f294                 | ' 
0f294                 | '   
0f294                 | ' if numpar=2 then
0f294     A7 1A 02 FB | 	rdlong	arg05, fp
0f298     02 1A 0E F2 | 	cmp	arg05, #2 wz
0f29c     A0 03 90 5D |  if_ne	jmp	#LR__1240
0f2a0     B4 C7 BF FD | 	call	#_pop
0f2a4     FF 1A 02 F6 | 	mov	arg05, result3
0f2a8     2C 4E 05 F1 | 	add	fp, #44
0f2ac     A7 FA 61 FC | 	wrlong	result1, fp
0f2b0     04 4E 05 F1 | 	add	fp, #4
0f2b4     A7 FC 61 FC | 	wrlong	result2, fp
0f2b8     04 4E 05 F1 | 	add	fp, #4
0f2bc     A7 1A 62 FC | 	wrlong	arg05, fp
0f2c0                 | '   t1=pop()
0f2c0                 | '   if t1.result_type=result_string2 then 
0f2c0     34 4E 85 F1 | 	sub	fp, #52
0f2c4     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0f2c8     20 00 90 5D |  if_ne	jmp	#LR__1230
0f2cc     2C 4E 05 F1 | 	add	fp, #44
0f2d0     A7 12 02 FB | 	rdlong	arg01, fp
0f2d4     2C 4E 85 F1 | 	sub	fp, #44
0f2d8     F4 20 B0 FD | 	call	#_convertstring
0f2dc     38 4E 05 F1 | 	add	fp, #56
0f2e0     A7 FA 61 FC | 	wrlong	result1, fp
0f2e4     38 4E 85 F1 | 	sub	fp, #56
0f2e8     58 00 90 FD | 	jmp	#LR__1233
0f2ec                 | LR__1230
0f2ec     34 4E 05 F1 | 	add	fp, #52
0f2f0     A7 1A 02 FB | 	rdlong	arg05, fp
0f2f4     34 4E 85 F1 | 	sub	fp, #52
0f2f8     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0f2fc     18 00 90 5D |  if_ne	jmp	#LR__1231
0f300     2C 4E 05 F1 | 	add	fp, #44
0f304     A7 1A 02 FB | 	rdlong	arg05, fp
0f308     0C 4E 05 F1 | 	add	fp, #12
0f30c     A7 1A 62 FC | 	wrlong	arg05, fp
0f310     38 4E 85 F1 | 	sub	fp, #56
0f314     2C 00 90 FD | 	jmp	#LR__1232
0f318                 | LR__1231
0f318     85 01 00 FF 
0f31c     31 1A 06 F6 | 	mov	arg05, ##@LR__5455
0f320     38 4E 05 F1 | 	add	fp, #56
0f324     A7 1A 62 FC | 	wrlong	arg05, fp
0f328     0C 4E 85 F1 | 	sub	fp, #12
0f32c     A7 12 02 F6 | 	mov	arg01, fp
0f330     2C 4E 85 F1 | 	sub	fp, #44
0f334     BC 68 B0 FD | 	call	#_converttoint
0f338     14 4E 05 F1 | 	add	fp, #20
0f33c     A7 FA 61 FC | 	wrlong	result1, fp
0f340     14 4E 85 F1 | 	sub	fp, #20
0f344                 | LR__1232
0f344                 | LR__1233
0f344                 | ' 
0f344                 | '     
0f344                 | '   if s<>"" then 
0f344     38 4E 05 F1 | 	add	fp, #56
0f348     A7 12 02 FB | 	rdlong	arg01, fp
0f34c     38 4E 85 F1 | 	sub	fp, #56
0f350     85 01 00 FF 
0f354     32 14 06 F6 | 	mov	arg02, ##@LR__5456
0f358     B4 17 B1 FD | 	call	#__system___string_cmp
0f35c     00 FA 0D F2 | 	cmp	result1, #0 wz
0f360     E0 01 90 AD |  if_e	jmp	#LR__1236
0f364     F0 C6 BF FD | 	call	#_pop
0f368     FF 1A 02 F6 | 	mov	arg05, result3
0f36c     2C 4E 05 F1 | 	add	fp, #44
0f370     A7 FA 61 FC | 	wrlong	result1, fp
0f374     04 4E 05 F1 | 	add	fp, #4
0f378     A7 FC 61 FC | 	wrlong	result2, fp
0f37c     04 4E 05 F1 | 	add	fp, #4
0f380     A7 1A 62 FC | 	wrlong	arg05, fp
0f384     08 4E 85 F1 | 	sub	fp, #8
0f388     A7 12 02 F6 | 	mov	arg01, fp
0f38c     2C 4E 85 F1 | 	sub	fp, #44
0f390     60 68 B0 FD | 	call	#_converttoint
0f394     10 4E 05 F1 | 	add	fp, #16
0f398     A7 FA 61 FC | 	wrlong	result1, fp
0f39c                 | '     t1=pop()
0f39c                 | '     channel=converttoint(t1) : if channel>31 then return
0f39c     FD 1A 02 F6 | 	mov	arg05, result1
0f3a0     10 4E 85 F1 | 	sub	fp, #16
0f3a4     20 1A 56 F2 | 	cmps	arg05, #32 wc
0f3a8     7C 07 90 3D |  if_ae	jmp	#LR__1253
0f3ac                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0f3ac     09 12 06 F6 | 	mov	arg01, #9
0f3b0     A4 67 B1 FD | 	call	#__system__close
0f3b4     09 1E 06 F6 | 	mov	local01, #9
0f3b8     85 01 00 FF 
0f3bc     33 12 06 F6 | 	mov	arg01, ##@LR__5457
0f3c0     38 4E 05 F1 | 	add	fp, #56
0f3c4     A7 14 02 FB | 	rdlong	arg02, fp
0f3c8     38 4E 85 F1 | 	sub	fp, #56
0f3cc     74 17 B1 FD | 	call	#__system___string_concat
0f3d0     FD 14 02 F6 | 	mov	arg02, result1
0f3d4     0F 13 02 F6 | 	mov	arg01, local01
0f3d8     00 16 06 F6 | 	mov	arg03, #0
0f3dc     0C 23 B1 FD | 	call	#__system___basic_open_string
0f3e0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0f3e4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0f3e8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0f3ec     52 00 00 FF 
0f3f0     14 E4 05 F1 | 	add	objptr, ##42004
0f3f4     F2 FA 61 FC | 	wrlong	result1, objptr
0f3f8                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0f3f8     52 00 00 FF 
0f3fc     14 E4 85 F1 | 	sub	objptr, ##42004
0f400     B0 00 90 AD |  if_e	jmp	#LR__1234
0f404     00 12 06 F6 | 	mov	arg01, #0
0f408     1C 71 B1 FD | 	call	#__system___getiolock_0540
0f40c     FD 12 02 F6 | 	mov	arg01, result1
0f410     D4 16 B1 FD | 	call	#__system___lockmem
0f414     85 01 00 FF 
0f418     40 14 06 F6 | 	mov	arg02, ##@LR__5458
0f41c     00 12 06 F6 | 	mov	arg01, #0
0f420     00 16 06 F6 | 	mov	arg03, #0
0f424     B4 23 B1 FD | 	call	#__system___basic_print_string
0f428     52 00 00 FF 
0f42c     14 E4 05 F1 | 	add	objptr, ##42004
0f430     F2 14 02 FB | 	rdlong	arg02, objptr
0f434     52 00 00 FF 
0f438     14 E4 85 F1 | 	sub	objptr, ##42004
0f43c     00 12 06 F6 | 	mov	arg01, #0
0f440     00 16 06 F6 | 	mov	arg03, #0
0f444     0A 18 06 F6 | 	mov	arg04, #10
0f448     D4 23 B1 FD | 	call	#__system___basic_print_integer
0f44c     85 01 00 FF 
0f450     4E 14 06 F6 | 	mov	arg02, ##@LR__5459
0f454     00 12 06 F6 | 	mov	arg01, #0
0f458     00 16 06 F6 | 	mov	arg03, #0
0f45c     7C 23 B1 FD | 	call	#__system___basic_print_string
0f460     00 1E 06 F6 | 	mov	local01, #0
0f464     52 00 00 FF 
0f468     14 E4 05 F1 | 	add	objptr, ##42004
0f46c     F2 12 02 FB | 	rdlong	arg01, objptr
0f470     52 00 00 FF 
0f474     14 E4 85 F1 | 	sub	objptr, ##42004
0f478     34 3D B1 FD | 	call	#__system___strerror
0f47c     FD 14 02 F6 | 	mov	arg02, result1
0f480     0F 13 02 F6 | 	mov	arg01, local01
0f484     00 16 06 F6 | 	mov	arg03, #0
0f488     50 23 B1 FD | 	call	#__system___basic_print_string
0f48c     00 12 06 F6 | 	mov	arg01, #0
0f490     0A 14 06 F6 | 	mov	arg02, #10
0f494     00 16 06 F6 | 	mov	arg03, #0
0f498     E8 22 B1 FD | 	call	#__system___basic_print_char
0f49c     00 12 06 F6 | 	mov	arg01, #0
0f4a0     84 70 B1 FD | 	call	#__system___getiolock_0540
0f4a4     FD 00 68 FC | 	wrlong	#0, result1
0f4a8     09 12 06 F6 | 	mov	arg01, #9
0f4ac     A8 66 B1 FD | 	call	#__system__close
0f4b0     74 06 90 FD | 	jmp	#LR__1253
0f4b4                 | LR__1234
0f4b4                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
0f4b4     04 4E 05 F1 | 	add	fp, #4
0f4b8     A7 00 68 FC | 	wrlong	#0, fp
0f4bc                 | LR__1235
0f4bc     A7 1E 02 FB | 	rdlong	local01, fp
0f4c0     01 1E 66 F0 | 	shl	local01, #1
0f4c4     11 14 06 F6 | 	mov	arg02, #17
0f4c8     0F 15 02 F1 | 	add	arg02, local01
0f4cc     78 4E 05 F1 | 	add	fp, #120
0f4d0     A7 16 02 F6 | 	mov	arg03, fp
0f4d4     7C 4E 85 F1 | 	sub	fp, #124
0f4d8     09 12 06 F6 | 	mov	arg01, #9
0f4dc     01 18 06 F6 | 	mov	arg04, #1
0f4e0     02 1A 06 F6 | 	mov	arg05, #2
0f4e4     70 24 B1 FD | 	call	#__system___basic_get
0f4e8     10 4E 05 F1 | 	add	fp, #16
0f4ec     A7 12 02 FB | 	rdlong	arg01, fp
0f4f0     0B 12 66 F0 | 	shl	arg01, #11
0f4f4     0C 4E 85 F1 | 	sub	fp, #12
0f4f8     A7 1E 02 FB | 	rdlong	local01, fp
0f4fc     01 1E 66 F0 | 	shl	local01, #1
0f500     0F 13 02 F1 | 	add	arg01, local01
0f504     78 4E 05 F1 | 	add	fp, #120
0f508     A7 14 E2 FA | 	rdword	arg02, fp
0f50c     7C 4E 85 F1 | 	sub	fp, #124
0f510     0F 14 66 F7 | 	signx	arg02, #15
0f514     E4 E1 B0 FD | 	call	#_psdpoke
0f518     04 4E 05 F1 | 	add	fp, #4
0f51c     A7 1E 02 FB | 	rdlong	local01, fp
0f520     01 1E 06 F1 | 	add	local01, #1
0f524     A7 1E 62 FC | 	wrlong	local01, fp
0f528     02 00 00 FF 
0f52c     01 1E 56 F2 | 	cmps	local01, ##1025 wc
0f530     88 FF 9F CD |  if_b	jmp	#LR__1235
0f534     04 4E 85 F1 | 	sub	fp, #4
0f538                 | '     close #9
0f538     09 12 06 F6 | 	mov	arg01, #9
0f53c     18 66 B1 FD | 	call	#__system__close
0f540                 | '                                                                        'for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0f540                 | '     return
0f540     E4 05 90 FD | 	jmp	#LR__1253
0f544                 | LR__1236
0f544                 | '     if wptr < ($80000 - 2048) then 
0f544     14 4E 05 F1 | 	add	fp, #20
0f548     A7 1E 02 FB | 	rdlong	local01, fp
0f54c     14 4E 85 F1 | 	sub	fp, #20
0f550     FC 03 00 FF 
0f554     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0f558     70 00 90 3D |  if_ae	jmp	#LR__1238
0f55c                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
0f55c     04 4E 05 F1 | 	add	fp, #4
0f560     A7 00 68 FC | 	wrlong	#0, fp
0f564     04 4E 85 F1 | 	sub	fp, #4
0f568                 | LR__1237
0f568     10 4E 05 F1 | 	add	fp, #16
0f56c     A7 1E 02 FB | 	rdlong	local01, fp
0f570     0B 1E 66 F0 | 	shl	local01, #11
0f574     0C 4E 85 F1 | 	sub	fp, #12
0f578     A7 1A 02 FB | 	rdlong	arg05, fp
0f57c     0D 19 02 F6 | 	mov	arg04, arg05
0f580     01 18 66 F0 | 	shl	arg04, #1
0f584     0C 1F 02 F1 | 	add	local01, arg04
0f588     10 4E 05 F1 | 	add	fp, #16
0f58c     A7 12 02 FB | 	rdlong	arg01, fp
0f590     14 4E 85 F1 | 	sub	fp, #20
0f594     01 1A 66 F0 | 	shl	arg05, #1
0f598     0D 13 02 F1 | 	add	arg01, arg05
0f59c     09 15 E2 FA | 	rdword	arg02, arg01
0f5a0     0F 13 02 F6 | 	mov	arg01, local01
0f5a4     54 E1 B0 FD | 	call	#_psdpoke
0f5a8     04 4E 05 F1 | 	add	fp, #4
0f5ac     A7 1E 02 FB | 	rdlong	local01, fp
0f5b0     01 1E 06 F1 | 	add	local01, #1
0f5b4     A7 1E 62 FC | 	wrlong	local01, fp
0f5b8     04 4E 85 F1 | 	sub	fp, #4
0f5bc     02 00 00 FF 
0f5c0     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0f5c4     A0 FF 9F CD |  if_b	jmp	#LR__1237
0f5c8     5C 05 90 FD | 	jmp	#LR__1253
0f5cc                 | LR__1238
0f5cc                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
0f5cc     04 4E 05 F1 | 	add	fp, #4
0f5d0     A7 00 68 FC | 	wrlong	#0, fp
0f5d4     04 4E 85 F1 | 	sub	fp, #4
0f5d8                 | LR__1239
0f5d8     10 4E 05 F1 | 	add	fp, #16
0f5dc     A7 1E 02 FB | 	rdlong	local01, fp
0f5e0     0B 1E 66 F0 | 	shl	local01, #11
0f5e4     0C 4E 85 F1 | 	sub	fp, #12
0f5e8     A7 1A 02 FB | 	rdlong	arg05, fp
0f5ec     0D 19 02 F6 | 	mov	arg04, arg05
0f5f0     01 18 66 F0 | 	shl	arg04, #1
0f5f4     0C 1F 02 F1 | 	add	local01, arg04
0f5f8     10 4E 05 F1 | 	add	fp, #16
0f5fc     A7 12 02 FB | 	rdlong	arg01, fp
0f600     14 4E 85 F1 | 	sub	fp, #20
0f604     01 1A 66 F0 | 	shl	arg05, #1
0f608     0D 13 02 F1 | 	add	arg01, arg05
0f60c     2C E2 B0 FD | 	call	#_psdpeek
0f610     FD 14 02 F6 | 	mov	arg02, result1
0f614     0F 13 02 F6 | 	mov	arg01, local01
0f618     E0 E0 B0 FD | 	call	#_psdpoke
0f61c     04 4E 05 F1 | 	add	fp, #4
0f620     A7 1E 02 FB | 	rdlong	local01, fp
0f624     01 1E 06 F1 | 	add	local01, #1
0f628     A7 1E 62 FC | 	wrlong	local01, fp
0f62c     04 4E 85 F1 | 	sub	fp, #4
0f630     02 00 00 FF 
0f634     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0f638     9C FF 9F CD |  if_b	jmp	#LR__1239
0f63c                 | '     return 
0f63c     E8 04 90 FD | 	jmp	#LR__1253
0f640                 | '   
0f640                 | '                                                                         '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0f640                 | '   return
0f640                 | LR__1240
0f640                 | ' for i=0 to 15 : harm(i)=0: next i  
0f640     04 4E 05 F1 | 	add	fp, #4
0f644     A7 00 68 FC | 	wrlong	#0, fp
0f648     97 16 48 FB | 	callpa	#(@LR__1242-@LR__1241)>>2,fcache_load_ptr_
0f64c                 | LR__1241
0f64c     A7 1E 02 FB | 	rdlong	local01, fp
0f650     02 1E 66 F0 | 	shl	local01, #2
0f654     38 4E 05 F1 | 	add	fp, #56
0f658     A7 1E 02 F1 | 	add	local01, fp
0f65c     0F 01 68 FC | 	wrlong	#0, local01
0f660     38 4E 85 F1 | 	sub	fp, #56
0f664     A7 1E 02 FB | 	rdlong	local01, fp
0f668     01 1E 06 F1 | 	add	local01, #1
0f66c     A7 1E 62 FC | 	wrlong	local01, fp
0f670     10 1E 56 F2 | 	cmps	local01, #16 wc
0f674     D4 FF 9F CD |  if_b	jmp	#LR__1241
0f678                 | LR__1242
0f678     04 4E 85 F1 | 	sub	fp, #4
0f67c                 | ' for i=numpar to 2 step -1 
0f67c     A7 1E 02 FB | 	rdlong	local01, fp
0f680     04 4E 05 F1 | 	add	fp, #4
0f684     A7 1E 62 FC | 	wrlong	local01, fp
0f688     04 4E 85 F1 | 	sub	fp, #4
0f68c                 | LR__1243
0f68c     C8 C3 BF FD | 	call	#_pop
0f690     2C 4E 05 F1 | 	add	fp, #44
0f694     A7 FA 61 FC | 	wrlong	result1, fp
0f698     04 4E 05 F1 | 	add	fp, #4
0f69c     A7 FC 61 FC | 	wrlong	result2, fp
0f6a0     04 4E 05 F1 | 	add	fp, #4
0f6a4     A7 FE 61 FC | 	wrlong	result3, fp
0f6a8     30 4E 85 F1 | 	sub	fp, #48
0f6ac     A7 1E 02 FB | 	rdlong	local01, fp
0f6b0     02 1E 86 F1 | 	sub	local01, #2
0f6b4     02 1E 66 F0 | 	shl	local01, #2
0f6b8     38 4E 05 F1 | 	add	fp, #56
0f6bc     A7 1E 02 F1 | 	add	local01, fp
0f6c0     10 4E 85 F1 | 	sub	fp, #16
0f6c4     A7 12 02 F6 | 	mov	arg01, fp
0f6c8     2C 4E 85 F1 | 	sub	fp, #44
0f6cc     E0 65 B0 FD | 	call	#_converttofloat
0f6d0     0F FB 61 FC | 	wrlong	result1, local01
0f6d4     04 4E 05 F1 | 	add	fp, #4
0f6d8     A7 1E 02 FB | 	rdlong	local01, fp
0f6dc     01 1E 86 F1 | 	sub	local01, #1
0f6e0     A7 1E 62 FC | 	wrlong	local01, fp
0f6e4     04 4E 85 F1 | 	sub	fp, #4
0f6e8     02 1E 56 F2 | 	cmps	local01, #2 wc
0f6ec     9C FF 9F 3D |  if_ae	jmp	#LR__1243
0f6f0     64 C3 BF FD | 	call	#_pop
0f6f4     FF 1E 02 F6 | 	mov	local01, result3
0f6f8     2C 4E 05 F1 | 	add	fp, #44
0f6fc     A7 FA 61 FC | 	wrlong	result1, fp
0f700     04 4E 05 F1 | 	add	fp, #4
0f704     A7 FC 61 FC | 	wrlong	result2, fp
0f708     04 4E 05 F1 | 	add	fp, #4
0f70c     A7 1E 62 FC | 	wrlong	local01, fp
0f710     08 4E 85 F1 | 	sub	fp, #8
0f714     A7 12 02 F6 | 	mov	arg01, fp
0f718     2C 4E 85 F1 | 	sub	fp, #44
0f71c     D4 64 B0 FD | 	call	#_converttoint
0f720     10 4E 05 F1 | 	add	fp, #16
0f724     A7 FA 61 FC | 	wrlong	result1, fp
0f728                 | ' t1=pop()
0f728                 | ' channel=converttoint(t1) : : if channel>31 then return
0f728     FD 1E 02 F6 | 	mov	local01, result1
0f72c     10 4E 85 F1 | 	sub	fp, #16
0f730     20 1E 56 F2 | 	cmps	local01, #32 wc
0f734     F0 03 90 3D |  if_ae	jmp	#LR__1253
0f738     20 4E 05 F1 | 	add	fp, #32
0f73c     A7 00 68 FC | 	wrlong	#0, fp
0f740                 | ' max=0
0f740                 | ' if harm(0)<0 then
0f740     1C 4E 05 F1 | 	add	fp, #28
0f744     A7 12 02 FB | 	rdlong	arg01, fp
0f748     3C 4E 85 F1 | 	sub	fp, #60
0f74c     00 14 06 F6 | 	mov	arg02, #0
0f750     01 16 06 F6 | 	mov	arg03, #1
0f754     78 43 B1 FD | 	call	#__system___float_cmp
0f758     00 FA 55 F2 | 	cmps	result1, #0 wc
0f75c     04 01 90 3D |  if_ae	jmp	#LR__1246
0f760     3C 4E 05 F1 | 	add	fp, #60
0f764     A7 FA 01 FB | 	rdlong	result1, fp
0f768     1F FA 05 F4 | 	bitl	result1, #31
0f76c     24 4E 85 F1 | 	sub	fp, #36
0f770     A7 FA 61 FC | 	wrlong	result1, fp
0f774     28 4E 05 F1 | 	add	fp, #40
0f778     A7 FA 01 FB | 	rdlong	result1, fp
0f77c     1F FA 05 F4 | 	bitl	result1, #31
0f780     24 4E 85 F1 | 	sub	fp, #36
0f784     A7 FA 61 FC | 	wrlong	result1, fp
0f788     20 4E 05 F1 | 	add	fp, #32
0f78c     00 C0 9F FF 
0f790     A7 00 68 FC | 	wrlong	##1065353216, fp
0f794     24 4E 85 F1 | 	sub	fp, #36
0f798     A7 1E 02 FB | 	rdlong	local01, fp
0f79c     28 4E 05 F1 | 	add	fp, #40
0f7a0     A7 1E 62 FC | 	wrlong	local01, fp
0f7a4     24 4E 85 F1 | 	sub	fp, #36
0f7a8     A7 1E 02 FB | 	rdlong	local01, fp
0f7ac     28 4E 05 F1 | 	add	fp, #40
0f7b0     A7 1E 62 FC | 	wrlong	local01, fp
0f7b4                 | '   harm(0)=1
0f7b4                 | '   harm(1)=even
0f7b4                 | '   harm(2)=odd
0f7b4                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0f7b4     40 4E 85 F1 | 	sub	fp, #64
0f7b8     A7 06 68 FC | 	wrlong	#3, fp
0f7bc                 | LR__1244
0f7bc     A7 1A 02 FB | 	rdlong	arg05, fp
0f7c0     0D 21 02 F6 | 	mov	local02, arg05
0f7c4     02 20 66 F0 | 	shl	local02, #2
0f7c8     38 4E 05 F1 | 	add	fp, #56
0f7cc     A7 20 02 F1 | 	add	local02, fp
0f7d0     02 1A 86 F1 | 	sub	arg05, #2
0f7d4     02 1A 66 F0 | 	shl	arg05, #2
0f7d8     A7 1A 02 F1 | 	add	arg05, fp
0f7dc     0D 13 02 FB | 	rdlong	arg01, arg05
0f7e0     24 4E 85 F1 | 	sub	fp, #36
0f7e4     A7 14 02 FB | 	rdlong	arg02, fp
0f7e8     18 4E 85 F1 | 	sub	fp, #24
0f7ec     AC 3E B1 FD | 	call	#__system___float_mul
0f7f0     10 FB 61 FC | 	wrlong	result1, local02
0f7f4     04 4E 05 F1 | 	add	fp, #4
0f7f8     A7 22 02 FB | 	rdlong	local03, fp
0f7fc     02 22 06 F1 | 	add	local03, #2
0f800     A7 22 62 FC | 	wrlong	local03, fp
0f804     10 22 56 F2 | 	cmps	local03, #16 wc
0f808     B0 FF 9F CD |  if_b	jmp	#LR__1244
0f80c                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0f80c     A7 08 68 FC | 	wrlong	#4, fp
0f810                 | LR__1245
0f810     A7 22 02 FB | 	rdlong	local03, fp
0f814     11 21 02 F6 | 	mov	local02, local03
0f818     02 20 66 F0 | 	shl	local02, #2
0f81c     38 4E 05 F1 | 	add	fp, #56
0f820     A7 20 02 F1 | 	add	local02, fp
0f824     02 22 86 F1 | 	sub	local03, #2
0f828     02 22 66 F0 | 	shl	local03, #2
0f82c     A7 22 02 F1 | 	add	local03, fp
0f830     11 13 02 FB | 	rdlong	arg01, local03
0f834     20 4E 85 F1 | 	sub	fp, #32
0f838     A7 14 02 FB | 	rdlong	arg02, fp
0f83c     1C 4E 85 F1 | 	sub	fp, #28
0f840     58 3E B1 FD | 	call	#__system___float_mul
0f844     10 FB 61 FC | 	wrlong	result1, local02
0f848     04 4E 05 F1 | 	add	fp, #4
0f84c     A7 22 02 FB | 	rdlong	local03, fp
0f850     02 22 06 F1 | 	add	local03, #2
0f854     A7 22 62 FC | 	wrlong	local03, fp
0f858     0F 22 56 F2 | 	cmps	local03, #15 wc
0f85c     B0 FF 9F CD |  if_b	jmp	#LR__1245
0f860     04 4E 85 F1 | 	sub	fp, #4
0f864                 | LR__1246
0f864                 | ' if harm(0)>=0 then ' synthesize with harmonics
0f864     3C 4E 05 F1 | 	add	fp, #60
0f868     A7 12 02 FB | 	rdlong	arg01, fp
0f86c     3C 4E 85 F1 | 	sub	fp, #60
0f870     00 14 06 F6 | 	mov	arg02, #0
0f874     01 16 66 F6 | 	neg	arg03, #1
0f878     54 42 B1 FD | 	call	#__system___float_cmp
0f87c     00 FA 55 F2 | 	cmps	result1, #0 wc
0f880     A4 02 90 CD |  if_b	jmp	#LR__1252
0f884                 | '   for i=0 to 1023
0f884     04 4E 05 F1 | 	add	fp, #4
0f888     A7 00 68 FC | 	wrlong	#0, fp
0f88c     04 4E 85 F1 | 	sub	fp, #4
0f890                 | LR__1247
0f890     24 4E 05 F1 | 	add	fp, #36
0f894     A7 00 68 FC | 	wrlong	#0, fp
0f898                 | '     spl=0
0f898                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0f898     1C 4E 85 F1 | 	sub	fp, #28
0f89c     A7 00 68 FC | 	wrlong	#0, fp
0f8a0                 | LR__1248
0f8a0     A7 20 02 FB | 	rdlong	local02, fp
0f8a4     02 20 66 F0 | 	shl	local02, #2
0f8a8     34 4E 05 F1 | 	add	fp, #52
0f8ac     A7 20 02 F1 | 	add	local02, fp
0f8b0     10 23 02 FB | 	rdlong	local03, local02
0f8b4     87 E4 1D FF 
0f8b8     DB 21 06 F6 | 	mov	local02, ##1003032539
0f8bc     38 4E 85 F1 | 	sub	fp, #56
0f8c0     A7 12 02 FB | 	rdlong	arg01, fp
0f8c4     04 4E 85 F1 | 	sub	fp, #4
0f8c8     09 13 52 F6 | 	abs	arg01, arg01 wc
0f8cc     1F 24 C6 C9 |  if_b	decod	local04, #31
0f8d0     00 24 06 36 |  if_ae	mov	local04, #0
0f8d4     C0 39 B1 FD | 	call	#__system___float_fromuns
0f8d8     12 FB 61 F5 | 	xor	result1, local04
0f8dc     FD 14 02 F6 | 	mov	arg02, result1
0f8e0     10 13 02 F6 | 	mov	arg01, local02
0f8e4     B4 3D B1 FD | 	call	#__system___float_mul
0f8e8     FD 20 02 F6 | 	mov	local02, result1
0f8ec     08 4E 05 F1 | 	add	fp, #8
0f8f0     A7 12 02 FB | 	rdlong	arg01, fp
0f8f4     08 4E 85 F1 | 	sub	fp, #8
0f8f8     01 12 06 F1 | 	add	arg01, #1
0f8fc     09 13 52 F6 | 	abs	arg01, arg01 wc
0f900     1F 24 C6 C9 |  if_b	decod	local04, #31
0f904     00 24 06 36 |  if_ae	mov	local04, #0
0f908     8C 39 B1 FD | 	call	#__system___float_fromuns
0f90c     12 FB 61 F5 | 	xor	result1, local04
0f910     FD 14 02 F6 | 	mov	arg02, result1
0f914     10 13 02 F6 | 	mov	arg01, local02
0f918     80 3D B1 FD | 	call	#__system___float_mul
0f91c     FD 12 02 F6 | 	mov	arg01, result1
0f920     B4 46 B1 FD | 	call	#__system____builtin_sinf
0f924     FD 14 02 F6 | 	mov	arg02, result1
0f928     11 13 02 F6 | 	mov	arg01, local03
0f92c     6C 3D B1 FD | 	call	#__system___float_mul
0f930     FD 14 02 F6 | 	mov	arg02, result1
0f934     24 4E 05 F1 | 	add	fp, #36
0f938     A7 12 02 FB | 	rdlong	arg01, fp
0f93c     24 4E 85 F1 | 	sub	fp, #36
0f940     88 39 B1 FD | 	call	#__system___float_add
0f944     24 4E 05 F1 | 	add	fp, #36
0f948     A7 FA 61 FC | 	wrlong	result1, fp
0f94c     1C 4E 85 F1 | 	sub	fp, #28
0f950     A7 16 02 FB | 	rdlong	arg03, fp
0f954     01 16 06 F1 | 	add	arg03, #1
0f958     A7 16 62 FC | 	wrlong	arg03, fp
0f95c     10 16 56 F2 | 	cmps	arg03, #16 wc
0f960     3C FF 9F CD |  if_b	jmp	#LR__1248
0f964                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0f964     1C 4E 05 F1 | 	add	fp, #28
0f968     A7 12 02 FB | 	rdlong	arg01, fp
0f96c     1F 12 06 F4 | 	bitl	arg01, #31
0f970     04 4E 85 F1 | 	sub	fp, #4
0f974     A7 14 02 FB | 	rdlong	arg02, fp
0f978     20 4E 85 F1 | 	sub	fp, #32
0f97c     01 16 66 F6 | 	neg	arg03, #1
0f980     4C 41 B1 FD | 	call	#__system___float_cmp
0f984     01 FA 55 F2 | 	cmps	result1, #1 wc
0f988     18 00 90 CD |  if_b	jmp	#LR__1249
0f98c     24 4E 05 F1 | 	add	fp, #36
0f990     A7 FA 01 FB | 	rdlong	result1, fp
0f994     1F FA 05 F4 | 	bitl	result1, #31
0f998     04 4E 85 F1 | 	sub	fp, #4
0f99c     A7 FA 61 FC | 	wrlong	result1, fp
0f9a0     20 4E 85 F1 | 	sub	fp, #32
0f9a4                 | LR__1249
0f9a4     04 4E 05 F1 | 	add	fp, #4
0f9a8     A7 22 02 FB | 	rdlong	local03, fp
0f9ac     01 22 06 F1 | 	add	local03, #1
0f9b0     A7 22 62 FC | 	wrlong	local03, fp
0f9b4     04 4E 85 F1 | 	sub	fp, #4
0f9b8     02 00 00 FF 
0f9bc     00 22 56 F2 | 	cmps	local03, ##1024 wc
0f9c0     CC FE 9F CD |  if_b	jmp	#LR__1247
0f9c4                 | '   for i=0 to 1023
0f9c4     04 4E 05 F1 | 	add	fp, #4
0f9c8     A7 00 68 FC | 	wrlong	#0, fp
0f9cc     04 4E 85 F1 | 	sub	fp, #4
0f9d0                 | LR__1250
0f9d0     24 4E 05 F1 | 	add	fp, #36
0f9d4     A7 00 68 FC | 	wrlong	#0, fp
0f9d8                 | '     spl=0
0f9d8                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0f9d8     1C 4E 85 F1 | 	sub	fp, #28
0f9dc     A7 00 68 FC | 	wrlong	#0, fp
0f9e0                 | LR__1251
0f9e0     A7 22 02 FB | 	rdlong	local03, fp
0f9e4     02 22 66 F0 | 	shl	local03, #2
0f9e8     34 4E 05 F1 | 	add	fp, #52
0f9ec     A7 22 02 F1 | 	add	local03, fp
0f9f0     11 23 02 FB | 	rdlong	local03, local03
0f9f4     1C 4E 85 F1 | 	sub	fp, #28
0f9f8     A7 14 02 FB | 	rdlong	arg02, fp
0f9fc     20 4E 85 F1 | 	sub	fp, #32
0fa00     58 7F 23 FF 
0fa04     00 12 06 F6 | 	mov	arg01, ##1191096320
0fa08     94 3E B1 FD | 	call	#__system___float_div
0fa0c     FD 14 02 F6 | 	mov	arg02, result1
0fa10     11 13 02 F6 | 	mov	arg01, local03
0fa14     84 3C B1 FD | 	call	#__system___float_mul
0fa18     FD 22 02 F6 | 	mov	local03, result1
0fa1c     87 E4 1D FF 
0fa20     DB 21 06 F6 | 	mov	local02, ##1003032539
0fa24     04 4E 05 F1 | 	add	fp, #4
0fa28     A7 12 02 FB | 	rdlong	arg01, fp
0fa2c     04 4E 85 F1 | 	sub	fp, #4
0fa30     09 13 52 F6 | 	abs	arg01, arg01 wc
0fa34     1F 24 C6 C9 |  if_b	decod	local04, #31
0fa38     00 24 06 36 |  if_ae	mov	local04, #0
0fa3c     58 38 B1 FD | 	call	#__system___float_fromuns
0fa40     12 FB 61 F5 | 	xor	result1, local04
0fa44     FD 14 02 F6 | 	mov	arg02, result1
0fa48     10 13 02 F6 | 	mov	arg01, local02
0fa4c     4C 3C B1 FD | 	call	#__system___float_mul
0fa50     FD 20 02 F6 | 	mov	local02, result1
0fa54     08 4E 05 F1 | 	add	fp, #8
0fa58     A7 12 02 FB | 	rdlong	arg01, fp
0fa5c     08 4E 85 F1 | 	sub	fp, #8
0fa60     01 12 06 F1 | 	add	arg01, #1
0fa64     09 13 52 F6 | 	abs	arg01, arg01 wc
0fa68     1F 24 C6 C9 |  if_b	decod	local04, #31
0fa6c     00 24 06 36 |  if_ae	mov	local04, #0
0fa70     24 38 B1 FD | 	call	#__system___float_fromuns
0fa74     12 FB 61 F5 | 	xor	result1, local04
0fa78     FD 14 02 F6 | 	mov	arg02, result1
0fa7c     10 13 02 F6 | 	mov	arg01, local02
0fa80     18 3C B1 FD | 	call	#__system___float_mul
0fa84     FD 12 02 F6 | 	mov	arg01, result1
0fa88     4C 45 B1 FD | 	call	#__system____builtin_sinf
0fa8c     FD 14 02 F6 | 	mov	arg02, result1
0fa90     11 13 02 F6 | 	mov	arg01, local03
0fa94     04 3C B1 FD | 	call	#__system___float_mul
0fa98     FD 14 02 F6 | 	mov	arg02, result1
0fa9c     24 4E 05 F1 | 	add	fp, #36
0faa0     A7 12 02 FB | 	rdlong	arg01, fp
0faa4     24 4E 85 F1 | 	sub	fp, #36
0faa8     20 38 B1 FD | 	call	#__system___float_add
0faac     24 4E 05 F1 | 	add	fp, #36
0fab0     A7 FA 61 FC | 	wrlong	result1, fp
0fab4     1C 4E 85 F1 | 	sub	fp, #28
0fab8     A7 22 02 FB | 	rdlong	local03, fp
0fabc     01 22 06 F1 | 	add	local03, #1
0fac0     A7 22 62 FC | 	wrlong	local03, fp
0fac4     10 22 56 F2 | 	cmps	local03, #16 wc
0fac8     14 FF 9F CD |  if_b	jmp	#LR__1251
0facc     08 4E 05 F1 | 	add	fp, #8
0fad0     A7 22 02 FB | 	rdlong	local03, fp
0fad4     0B 22 66 F0 | 	shl	local03, #11
0fad8     0C 4E 85 F1 | 	sub	fp, #12
0fadc     A7 20 02 FB | 	rdlong	local02, fp
0fae0     01 20 66 F0 | 	shl	local02, #1
0fae4     10 23 02 F1 | 	add	local03, local02
0fae8     20 4E 05 F1 | 	add	fp, #32
0faec     A7 12 02 FB | 	rdlong	arg01, fp
0faf0     24 4E 85 F1 | 	sub	fp, #36
0faf4     01 14 06 F6 | 	mov	arg02, #1
0faf8     68 40 B1 FD | 	call	#__system___float_tointeger
0fafc     FD 14 02 F6 | 	mov	arg02, result1
0fb00     11 13 02 F6 | 	mov	arg01, local03
0fb04     F4 DB B0 FD | 	call	#_psdpoke
0fb08     04 4E 05 F1 | 	add	fp, #4
0fb0c     A7 22 02 FB | 	rdlong	local03, fp
0fb10     01 22 06 F1 | 	add	local03, #1
0fb14     A7 22 62 FC | 	wrlong	local03, fp
0fb18     04 4E 85 F1 | 	sub	fp, #4
0fb1c     02 00 00 FF 
0fb20     00 22 56 F2 | 	cmps	local03, ##1024 wc
0fb24     A8 FE 9F CD |  if_b	jmp	#LR__1250
0fb28                 | LR__1252
0fb28                 | LR__1253
0fb28     A7 F0 03 F6 | 	mov	ptra, fp
0fb2c     B2 00 A0 FD | 	call	#popregs_
0fb30                 | _do_defsnd_ret
0fb30     2D 00 64 FD | 	ret
0fb34                 | 
0fb34                 | ' 
0fb34                 | ' ' ---------------  List the program. 
0fb34                 | ' 
0fb34                 | ' sub do_list
0fb34                 | _do_list
0fb34     02 4A 05 F6 | 	mov	COUNT_, #2
0fb38     A8 00 A0 FD | 	call	#pushregs_
0fb3c     B8 F0 07 F1 | 	add	ptra, #184
0fb40     04 4E 05 F1 | 	add	fp, #4
0fb44     A7 00 68 FC | 	wrlong	#0, fp
0fb48     04 4E 05 F1 | 	add	fp, #4
0fb4c     FF FF BF FF 
0fb50     A7 FE 6B FC | 	wrlong	##2147483647, fp
0fb54     08 4E 85 F1 | 	sub	fp, #8
0fb58     4A 00 00 FF 
0fb5c     80 E4 05 F1 | 	add	objptr, ##38016
0fb60     F2 1E 02 FB | 	rdlong	local01, objptr
0fb64     0F 17 02 F6 | 	mov	arg03, local01
0fb68     01 16 66 F0 | 	shl	arg03, #1
0fb6c     0F 17 02 F1 | 	add	arg03, local01
0fb70     02 16 66 F0 | 	shl	arg03, #2
0fb74     03 00 00 FF 
0fb78     04 E4 85 F1 | 	sub	objptr, ##1540
0fb7c     F2 16 02 F1 | 	add	arg03, objptr
0fb80     0B 17 02 FB | 	rdlong	arg03, arg03
0fb84     A7 16 62 FC | 	wrlong	arg03, fp
0fb88                 | ' 
0fb88                 | ' startline=0 : endline=$7FFFFFFF
0fb88                 | ' numpar=compiledline(lineptr_e).result.uresult
0fb88                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0fb88     01 16 0E F2 | 	cmp	arg03, #1 wz
0fb8c     47 00 00 FF 
0fb90     7C E4 85 F1 | 	sub	objptr, ##36476
0fb94     3C 00 90 5D |  if_ne	jmp	#LR__1260
0fb98     BC BE BF FD | 	call	#_pop
0fb9c     FF 1E 02 F6 | 	mov	local01, result3
0fba0     0C 4E 05 F1 | 	add	fp, #12
0fba4     A7 FA 61 FC | 	wrlong	result1, fp
0fba8     04 4E 05 F1 | 	add	fp, #4
0fbac     A7 FC 61 FC | 	wrlong	result2, fp
0fbb0     04 4E 05 F1 | 	add	fp, #4
0fbb4     A7 1E 62 FC | 	wrlong	local01, fp
0fbb8     08 4E 85 F1 | 	sub	fp, #8
0fbbc     A7 12 02 F6 | 	mov	arg01, fp
0fbc0     0C 4E 85 F1 | 	sub	fp, #12
0fbc4     2C 60 B0 FD | 	call	#_converttoint
0fbc8     04 4E 05 F1 | 	add	fp, #4
0fbcc     A7 FA 61 FC | 	wrlong	result1, fp
0fbd0     04 4E 85 F1 | 	sub	fp, #4
0fbd4                 | LR__1260
0fbd4                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0fbd4     A7 16 02 FB | 	rdlong	arg03, fp
0fbd8     02 16 0E F2 | 	cmp	arg03, #2 wz
0fbdc     7C 00 90 5D |  if_ne	jmp	#LR__1261
0fbe0     74 BE BF FD | 	call	#_pop
0fbe4     FF 1E 02 F6 | 	mov	local01, result3
0fbe8     0C 4E 05 F1 | 	add	fp, #12
0fbec     A7 FA 61 FC | 	wrlong	result1, fp
0fbf0     04 4E 05 F1 | 	add	fp, #4
0fbf4     A7 FC 61 FC | 	wrlong	result2, fp
0fbf8     04 4E 05 F1 | 	add	fp, #4
0fbfc     A7 1E 62 FC | 	wrlong	local01, fp
0fc00     08 4E 85 F1 | 	sub	fp, #8
0fc04     A7 12 02 F6 | 	mov	arg01, fp
0fc08     0C 4E 85 F1 | 	sub	fp, #12
0fc0c     E4 5F B0 FD | 	call	#_converttoint
0fc10     FD 1E 02 F6 | 	mov	local01, result1
0fc14     08 4E 05 F1 | 	add	fp, #8
0fc18     A7 1E 62 FC | 	wrlong	local01, fp
0fc1c     08 4E 85 F1 | 	sub	fp, #8
0fc20     34 BE BF FD | 	call	#_pop
0fc24     FF 1E 02 F6 | 	mov	local01, result3
0fc28     0C 4E 05 F1 | 	add	fp, #12
0fc2c     A7 FA 61 FC | 	wrlong	result1, fp
0fc30     04 4E 05 F1 | 	add	fp, #4
0fc34     A7 FC 61 FC | 	wrlong	result2, fp
0fc38     04 4E 05 F1 | 	add	fp, #4
0fc3c     A7 1E 62 FC | 	wrlong	local01, fp
0fc40     08 4E 85 F1 | 	sub	fp, #8
0fc44     A7 12 02 F6 | 	mov	arg01, fp
0fc48     0C 4E 85 F1 | 	sub	fp, #12
0fc4c     A4 5F B0 FD | 	call	#_converttoint
0fc50     04 4E 05 F1 | 	add	fp, #4
0fc54     A7 FA 61 FC | 	wrlong	result1, fp
0fc58     04 4E 85 F1 | 	sub	fp, #4
0fc5c                 | LR__1261
0fc5c                 | ' 
0fc5c                 | ' 
0fc5c                 | ' print
0fc5c     00 12 06 F6 | 	mov	arg01, #0
0fc60     C4 68 B1 FD | 	call	#__system___getiolock_0540
0fc64     FD 12 02 F6 | 	mov	arg01, result1
0fc68     7C 0E B1 FD | 	call	#__system___lockmem
0fc6c     00 12 06 F6 | 	mov	arg01, #0
0fc70     0A 14 06 F6 | 	mov	arg02, #10
0fc74     00 16 06 F6 | 	mov	arg03, #0
0fc78     08 1B B1 FD | 	call	#__system___basic_print_char
0fc7c     00 12 06 F6 | 	mov	arg01, #0
0fc80     A4 68 B1 FD | 	call	#__system___getiolock_0540
0fc84     FD 00 68 FC | 	wrlong	#0, result1
0fc88     4A 00 00 FF 
0fc8c     84 E4 05 F1 | 	add	objptr, ##38020
0fc90     F2 20 02 FB | 	rdlong	local02, objptr
0fc94     07 00 00 FF 
0fc98     88 E5 05 F1 | 	add	objptr, ##3976
0fc9c     F2 20 62 FC | 	wrlong	local02, objptr
0fca0     52 00 00 FF 
0fca4     0C E4 85 F1 | 	sub	objptr, ##41996
0fca8                 | ' do 
0fca8                 | LR__1262
0fca8     20 4E 05 F1 | 	add	fp, #32
0fcac     A7 12 02 F6 | 	mov	arg01, fp
0fcb0     20 4E 85 F1 | 	sub	fp, #32
0fcb4     52 00 00 FF 
0fcb8     0C E4 05 F1 | 	add	objptr, ##41996
0fcbc     F2 14 02 FB | 	rdlong	arg02, objptr
0fcc0     18 16 06 F6 | 	mov	arg03, #24
0fcc4     46 00 00 FF 
0fcc8     40 E5 85 F1 | 	sub	objptr, ##36160
0fccc     D8 01 B1 FD | 	call	#_psram_spin2_read1
0fcd0     0B 00 00 FF 
0fcd4     CC E4 85 F1 | 	sub	objptr, ##5836
0fcd8                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
0fcd8                 | '   
0fcd8                 | '   if header(0)<> $FFFFFFFF then
0fcd8     20 4E 05 F1 | 	add	fp, #32
0fcdc     A7 20 02 FB | 	rdlong	local02, fp
0fce0     20 4E 85 F1 | 	sub	fp, #32
0fce4     FF FF 7F FF 
0fce8     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0fcec     A8 00 90 AD |  if_e	jmp	#LR__1264
0fcf0     38 4E 05 F1 | 	add	fp, #56
0fcf4     3F 16 06 F6 | 	mov	arg03, #63
0fcf8     28 16 62 FD | 	setq	arg03
0fcfc     A7 00 68 FC | 	wrlong	#0, fp
0fd00     A7 12 02 F6 | 	mov	arg01, fp
0fd04     10 4E 85 F1 | 	sub	fp, #16
0fd08     A7 14 02 FB | 	rdlong	arg02, fp
0fd0c     04 4E 05 F1 | 	add	fp, #4
0fd10     A7 16 02 FB | 	rdlong	arg03, fp
0fd14     2C 4E 85 F1 | 	sub	fp, #44
0fd18     0B 00 00 FF 
0fd1c     CC E4 05 F1 | 	add	objptr, ##5836
0fd20     84 01 B1 FD | 	call	#_psram_spin2_read1
0fd24     0B 00 00 FF 
0fd28     CC E4 85 F1 | 	sub	objptr, ##5836
0fd2c                 | '     longfill(linebuf,0,64)
0fd2c                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0fd2c                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0fd2c     20 4E 05 F1 | 	add	fp, #32
0fd30     A7 20 02 FB | 	rdlong	local02, fp
0fd34     1C 4E 85 F1 | 	sub	fp, #28
0fd38     A7 1E 02 FB | 	rdlong	local01, fp
0fd3c     04 4E 85 F1 | 	sub	fp, #4
0fd40     0F 21 52 F2 | 	cmps	local02, local01 wc
0fd44     30 00 90 CD |  if_b	jmp	#LR__1263
0fd48     20 4E 05 F1 | 	add	fp, #32
0fd4c     A7 20 02 FB | 	rdlong	local02, fp
0fd50     18 4E 85 F1 | 	sub	fp, #24
0fd54     A7 16 02 FB | 	rdlong	arg03, fp
0fd58     08 4E 85 F1 | 	sub	fp, #8
0fd5c     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0fd60     14 00 90 1D |  if_a	jmp	#LR__1263
0fd64     38 4E 05 F1 | 	add	fp, #56
0fd68     A7 12 02 F6 | 	mov	arg01, fp
0fd6c     38 4E 85 F1 | 	sub	fp, #56
0fd70                 | ' 
0fd70                 | ' write(text)
0fd70     58 F8 B0 FD | 	call	#_hg010b_spin2_write
0fd74                 | ' crlf
0fd74     54 FD B0 FD | 	call	#_hg010b_spin2_crlf
0fd78                 | LR__1263
0fd78     34 4E 05 F1 | 	add	fp, #52
0fd7c     A7 20 02 FB | 	rdlong	local02, fp
0fd80     34 4E 85 F1 | 	sub	fp, #52
0fd84     52 00 00 FF 
0fd88     0C E4 05 F1 | 	add	objptr, ##41996
0fd8c     F2 20 62 FC | 	wrlong	local02, objptr
0fd90     52 00 00 FF 
0fd94     0C E4 85 F1 | 	sub	objptr, ##41996
0fd98                 | LR__1264
0fd98     34 4E 05 F1 | 	add	fp, #52
0fd9c     A7 20 02 FB | 	rdlong	local02, fp
0fda0     34 4E 85 F1 | 	sub	fp, #52
0fda4     FF FF 3F FF 
0fda8     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0fdac     20 4E 05 51 |  if_ne	add	fp, #32
0fdb0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0fdb4     20 4E 85 51 |  if_ne	sub	fp, #32
0fdb8     FF FF 7F 5F 
0fdbc     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0fdc0     E4 FE 9F 5D |  if_ne	jmp	#LR__1262
0fdc4     A7 F0 03 F6 | 	mov	ptra, fp
0fdc8     B2 00 A0 FD | 	call	#popregs_
0fdcc                 | _do_list_ret
0fdcc     2D 00 64 FD | 	ret
0fdd0                 | 
0fdd0                 | ' 
0fdd0                 | ' '---------------- Clear the program
0fdd0                 | ' 
0fdd0                 | ' sub do_new
0fdd0                 | _do_new
0fdd0     03 4A 05 F6 | 	mov	COUNT_, #3
0fdd4     A8 00 A0 FD | 	call	#pushregs_
0fdd8     13 12 C6 F9 | 	decod	arg01, #19
0fddc     01 14 66 F6 | 	neg	arg02, #1
0fde0     D0 D8 B0 FD | 	call	#_pslpoke
0fde4     35 00 00 FF 
0fde8     08 E4 05 F1 | 	add	objptr, ##27144
0fdec     F2 00 68 FC | 	wrlong	#0, objptr
0fdf0                 | ' 
0fdf0                 | ' pslpoke(memlo,$FFFFFFFF)
0fdf0                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
0fdf0     00 1E 06 F6 | 	mov	local01, #0
0fdf4     20 00 00 FF 
0fdf8     10 E4 85 F1 | 	sub	objptr, ##16400
0fdfc     97 1E 48 FB | 	callpa	#(@LR__1271-@LR__1270)>>2,fcache_load_ptr_
0fe00                 | LR__1270
0fe00     0F 17 02 F6 | 	mov	arg03, local01
0fe04     04 16 66 F0 | 	shl	arg03, #4
0fe08     F2 16 02 F1 | 	add	arg03, objptr
0fe0c     85 01 00 FF 
0fe10     51 14 06 F6 | 	mov	arg02, ##@LR__5460
0fe14     0B 15 62 FC | 	wrlong	arg02, arg03
0fe18     0F 21 02 F6 | 	mov	local02, local01
0fe1c     04 20 66 F0 | 	shl	local02, #4
0fe20     F2 20 02 F1 | 	add	local02, objptr
0fe24     0C 20 06 F1 | 	add	local02, #12
0fe28     10 01 68 FC | 	wrlong	#0, local02
0fe2c     01 1E 06 F1 | 	add	local01, #1
0fe30     02 00 00 FF 
0fe34     01 1E 56 F2 | 	cmps	local01, ##1025 wc
0fe38     C4 FF 9F CD |  if_b	jmp	#LR__1270
0fe3c                 | LR__1271
0fe3c     35 00 00 FF 
0fe40     8C E4 05 F1 | 	add	objptr, ##27276
0fe44     00 04 80 FF 
0fe48     F2 00 68 FC | 	wrlong	##524288, objptr
0fe4c     06 00 00 FF 
0fe50     30 E4 05 F1 | 	add	objptr, ##3120
0fe54     00 04 80 FF 
0fe58     F2 00 68 FC | 	wrlong	##524288, objptr
0fe5c     04 E4 05 F1 | 	add	objptr, #4
0fe60     00 04 80 FF 
0fe64     F2 00 68 FC | 	wrlong	##524288, objptr
0fe68     0D 00 00 FF 
0fe6c     60 E4 85 F1 | 	sub	objptr, ##6752
0fe70     F2 00 68 FC | 	wrlong	#0, objptr
0fe74     07 00 00 FF 
0fe78     24 E4 05 F1 | 	add	objptr, ##3620
0fe7c     F2 00 68 FC | 	wrlong	#0, objptr
0fe80     07 00 00 FF 
0fe84     20 E4 85 F1 | 	sub	objptr, ##3616
0fe88     00 04 80 FF 
0fe8c     F2 00 68 FC | 	wrlong	##524288, objptr
0fe90     07 00 00 FF 
0fe94     2C E4 05 F1 | 	add	objptr, ##3628
0fe98     F2 00 68 FC | 	wrlong	#0, objptr
0fe9c     04 E4 05 F1 | 	add	objptr, #4
0fea0     FF FF FF FF 
0fea4     F2 FE 6B FC | 	wrlong	##-1, objptr
0fea8     06 00 00 FF 
0feac     78 E4 05 F1 | 	add	objptr, ##3192
0feb0     F2 00 68 FC | 	wrlong	#0, objptr
0feb4     04 E4 05 F1 | 	add	objptr, #4
0feb8     F2 00 68 FC | 	wrlong	#0, objptr
0febc                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
0febc                 | ' stackpointer=0
0febc                 | ' lineptr=0 
0febc                 | ' programptr=memlo ': stringptr=0
0febc                 | ' 
0febc                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
0febc                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0febc     00 1E 06 F6 | 	mov	local01, #0
0fec0     06 00 00 FF 
0fec4     74 E4 85 F1 | 	sub	objptr, ##3188
0fec8     97 16 48 FB | 	callpa	#(@LR__1273-@LR__1272)>>2,fcache_load_ptr_
0fecc                 | LR__1272
0fecc     0F 21 02 F6 | 	mov	local02, local01
0fed0     02 20 66 F0 | 	shl	local02, #2
0fed4     0F 21 02 F1 | 	add	local02, local01
0fed8     02 20 66 F0 | 	shl	local02, #2
0fedc     F2 20 02 F1 | 	add	local02, objptr
0fee0     08 20 06 F1 | 	add	local02, #8
0fee4     FF FF FF FF 
0fee8     10 FF 6B FC | 	wrlong	##-1, local02
0feec     01 1E 06 F1 | 	add	local01, #1
0fef0     41 1E 56 F2 | 	cmps	local01, #65 wc
0fef4     D4 FF 9F CD |  if_b	jmp	#LR__1272
0fef8                 | LR__1273
0fef8     4A 00 00 FF 
0fefc     94 E4 85 F1 | 	sub	objptr, ##38036
0ff00                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
0ff00     00 1E 06 F6 | 	mov	local01, #0
0ff04                 | LR__1274
0ff04     0F 21 02 F6 | 	mov	local02, local01
0ff08     02 20 66 F0 | 	shl	local02, #2
0ff0c     51 00 00 FF 
0ff10     64 E5 05 F1 | 	add	objptr, ##41828
0ff14     F2 20 02 F1 | 	add	local02, objptr
0ff18     10 23 0A FB | 	rdlong	local03, local02 wz
0ff1c     51 00 00 FF 
0ff20     64 E5 85 F1 | 	sub	objptr, ##41828
0ff24     34 00 90 AD |  if_e	jmp	#LR__1275
0ff28     0F 13 02 F6 | 	mov	arg01, local01
0ff2c     00 14 06 F6 | 	mov	arg02, #0
0ff30     00 16 06 F6 | 	mov	arg03, #0
0ff34     B4 E5 B0 FD | 	call	#_hg010b_spin2_setspritesize
0ff38     0F 21 02 F6 | 	mov	local02, local01
0ff3c     02 20 66 F0 | 	shl	local02, #2
0ff40     51 00 00 FF 
0ff44     64 E5 05 F1 | 	add	objptr, ##41828
0ff48     F2 20 02 F1 | 	add	local02, objptr
0ff4c     10 13 02 FB | 	rdlong	arg01, local02
0ff50     51 00 00 FF 
0ff54     64 E5 85 F1 | 	sub	objptr, ##41828
0ff58     80 4B B1 FD | 	call	#__system___gc_free
0ff5c                 | LR__1275
0ff5c     01 1E 06 F1 | 	add	local01, #1
0ff60     10 1E 56 F2 | 	cmps	local01, #16 wc
0ff64     9C FF 9F CD |  if_b	jmp	#LR__1274
0ff68     51 00 00 FF 
0ff6c     B8 E5 05 F1 | 	add	objptr, ##41912
0ff70     00 C0 9F FF 
0ff74     F2 00 68 FC | 	wrlong	##1065353216, objptr
0ff78     04 E4 05 F1 | 	add	objptr, #4
0ff7c     00 C0 9F FF 
0ff80     F2 00 68 FC | 	wrlong	##1065353216, objptr
0ff84     51 00 00 FF 
0ff88     B8 E5 85 F1 | 	sub	objptr, ##41912
0ff8c     F2 22 02 FB | 	rdlong	local03, objptr
0ff90     51 00 00 FF 
0ff94     A4 E5 05 F1 | 	add	objptr, ##41892
0ff98     F2 22 62 FC | 	wrlong	local03, objptr
0ff9c     51 00 00 FF 
0ffa0     A8 E5 85 F1 | 	sub	objptr, ##41896
0ffa4     11 12 06 F6 | 	mov	arg01, #17
0ffa8     08 14 06 F6 | 	mov	arg02, #8
0ffac     10 16 06 F6 | 	mov	arg03, #16
0ffb0     38 E5 B0 FD | 	call	#_hg010b_spin2_setspritesize
0ffb4     10 12 06 F6 | 	mov	arg01, #16
0ffb8     20 14 06 F6 | 	mov	arg02, #32
0ffbc     20 16 06 F6 | 	mov	arg03, #32
0ffc0     28 E5 B0 FD | 	call	#_hg010b_spin2_setspritesize
0ffc4     85 01 00 FF 
0ffc8     52 22 06 F6 | 	mov	local03, ##@LR__5461
0ffcc     51 00 00 FF 
0ffd0     D4 E5 05 F1 | 	add	objptr, ##41940
0ffd4     F2 22 62 FC | 	wrlong	local03, objptr
0ffd8     51 00 00 FF 
0ffdc     D4 E5 85 F1 | 	sub	objptr, ##41940
0ffe0     2C C9 B0 FD | 	call	#_init_audio
0ffe4     A7 F0 03 F6 | 	mov	ptra, fp
0ffe8     B2 00 A0 FD | 	call	#popregs_
0ffec                 | _do_new_ret
0ffec     2D 00 64 FD | 	ret
0fff0                 | 
0fff0                 | ' 
0fff0                 | ' '----------------------- goto
0fff0                 | ' sub do_fast_goto
0fff0                 | _do_fast_goto
0fff0     02 4A 05 F6 | 	mov	COUNT_, #2
0fff4     A8 00 A0 FD | 	call	#pushregs_
0fff8                 | _do_fast_goto_enter
0fff8     4A 00 00 FF 
0fffc     80 E4 05 F1 | 	add	objptr, ##38016
10000     F2 12 02 FB | 	rdlong	arg01, objptr
10004     09 1F 02 F6 | 	mov	local01, arg01
10008     01 1E 66 F0 | 	shl	local01, #1
1000c     09 1F 02 F1 | 	add	local01, arg01
10010     02 1E 66 F0 | 	shl	local01, #2
10014     03 00 00 FF 
10018     04 E4 85 F1 | 	sub	objptr, ##1540
1001c     F2 1E 02 F1 | 	add	local01, objptr
10020     0F 21 02 FB | 	rdlong	local02, local01
10024     10 13 02 F6 | 	mov	arg01, local02
10028     47 00 00 FF 
1002c     7C E4 85 F1 | 	sub	objptr, ##36476
10030     B0 D7 B0 FD | 	call	#_pslpeek
10034     FD 12 02 F6 | 	mov	arg01, result1
10038                 | ' 
10038                 | ' testptr=compiledline(lineptr_e).result.uresult
10038                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
10038                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
10038     4A 00 00 FF 
1003c     80 E4 05 F1 | 	add	objptr, ##38016
10040     F2 FA 01 FB | 	rdlong	result1, objptr
10044     FD 1E 02 F6 | 	mov	local01, result1
10048     01 1E 66 F0 | 	shl	local01, #1
1004c     FD 1E 02 F1 | 	add	local01, result1
10050     02 1E 66 F0 | 	shl	local01, #2
10054     03 00 00 FF 
10058     04 E4 85 F1 | 	sub	objptr, ##1540
1005c     F2 1E 02 F1 | 	add	local01, objptr
10060     04 1E 06 F1 | 	add	local01, #4
10064     0F 1F 02 FB | 	rdlong	local01, local01
10068     0F 13 0A F2 | 	cmp	arg01, local01 wz
1006c     47 00 00 FF 
10070     7C E4 85 F1 | 	sub	objptr, ##36476
10074     58 00 90 5D |  if_ne	jmp	#LR__1280
10078     50 00 00 FF 
1007c     B4 E4 05 F1 | 	add	objptr, ##41140
10080     F2 20 62 FC | 	wrlong	local02, objptr
10084     06 00 00 FF 
10088     38 E4 85 F1 | 	sub	objptr, ##3128
1008c     F2 20 02 FB | 	rdlong	local02, objptr
10090     01 20 86 F1 | 	sub	local02, #1
10094     04 E4 05 F1 | 	add	objptr, #4
10098     F2 20 62 FC | 	wrlong	local02, objptr
1009c                 | '   runptr=testptr
1009c                 | '   lineptr_e=lineptr-1
1009c                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
1009c     06 00 00 FF 
100a0     80 E4 05 F1 | 	add	objptr, ##3200
100a4     F2 20 02 FB | 	rdlong	local02, objptr
100a8     50 00 00 FF 
100ac     00 E5 85 F1 | 	sub	objptr, ##41216
100b0     FF FF 3F FF 
100b4     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
100b8     50 00 00 AF 
100bc     00 E5 05 A1 |  if_e	add	objptr, ##41216
100c0     F2 00 68 AC |  if_e	wrlong	#0, objptr
100c4     50 00 00 AF 
100c8     00 E5 85 A1 |  if_e	sub	objptr, ##41216
100cc     04 00 90 FD | 	jmp	#LR__1281
100d0                 | LR__1280
100d0     84 0E B0 FD | 	call	#_do_find_goto
100d4                 | LR__1281
100d4     A7 F0 03 F6 | 	mov	ptra, fp
100d8     B2 00 A0 FD | 	call	#popregs_
100dc                 | _do_fast_goto_ret
100dc     2D 00 64 FD | 	ret
100e0                 | 
100e0                 | ' 
100e0                 | ' sub do_open
100e0                 | _do_open
100e0     02 4A 05 F6 | 	mov	COUNT_, #2
100e4     A8 00 A0 FD | 	call	#pushregs_
100e8     20 F0 07 F1 | 	add	ptra, #32
100ec     4A 00 00 FF 
100f0     80 E4 05 F1 | 	add	objptr, ##38016
100f4     F2 16 02 FB | 	rdlong	arg03, objptr
100f8     0B 15 02 F6 | 	mov	arg02, arg03
100fc     01 14 66 F0 | 	shl	arg02, #1
10100     0B 15 02 F1 | 	add	arg02, arg03
10104     02 14 66 F0 | 	shl	arg02, #2
10108     03 00 00 FF 
1010c     04 E4 85 F1 | 	sub	objptr, ##1540
10110     F2 14 02 F1 | 	add	arg02, objptr
10114     0A 17 02 FB | 	rdlong	arg03, arg02
10118     10 4E 05 F1 | 	add	fp, #16
1011c     A7 16 62 FC | 	wrlong	arg03, fp
10120     10 4E 85 F1 | 	sub	fp, #16
10124     47 00 00 FF 
10128     7C E4 85 F1 | 	sub	objptr, ##36476
1012c     28 B9 BF FD | 	call	#_pop
10130     FF 16 02 F6 | 	mov	arg03, result3
10134     A7 FA 61 FC | 	wrlong	result1, fp
10138     04 4E 05 F1 | 	add	fp, #4
1013c     A7 FC 61 FC | 	wrlong	result2, fp
10140     04 4E 05 F1 | 	add	fp, #4
10144     A7 16 62 FC | 	wrlong	arg03, fp
10148                 | ' 
10148                 | ' numpar=compiledline(lineptr_e).result.uresult
10148                 | ' 
10148                 | ' t1=pop()
10148                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
10148     08 4E 85 F1 | 	sub	fp, #8
1014c     2B 16 0E F2 | 	cmp	arg03, #43 wz
10150     18 00 90 5D |  if_ne	jmp	#LR__1290
10154     A7 12 02 FB | 	rdlong	arg01, fp
10158     74 12 B0 FD | 	call	#_convertstring
1015c     A7 FA 61 FC | 	wrlong	result1, fp
10160     08 4E 05 F1 | 	add	fp, #8
10164     A7 3E 68 FC | 	wrlong	#31, fp
10168     08 4E 85 F1 | 	sub	fp, #8
1016c                 | LR__1290
1016c                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
1016c     08 4E 05 F1 | 	add	fp, #8
10170     A7 16 02 FB | 	rdlong	arg03, fp
10174     08 4E 85 F1 | 	sub	fp, #8
10178     1F 16 0E F2 | 	cmp	arg03, #31 wz
1017c     44 00 90 AD |  if_e	jmp	#LR__1291
10180     00 12 06 F6 | 	mov	arg01, #0
10184     A0 63 B1 FD | 	call	#__system___getiolock_0540
10188     FD 12 02 F6 | 	mov	arg01, result1
1018c     58 09 B1 FD | 	call	#__system___lockmem
10190     85 01 00 FF 
10194     5D 14 06 F6 | 	mov	arg02, ##@LR__5462
10198     00 12 06 F6 | 	mov	arg01, #0
1019c     00 16 06 F6 | 	mov	arg03, #0
101a0     38 16 B1 FD | 	call	#__system___basic_print_string
101a4     00 12 06 F6 | 	mov	arg01, #0
101a8     0A 14 06 F6 | 	mov	arg02, #10
101ac     00 16 06 F6 | 	mov	arg03, #0
101b0     D0 15 B1 FD | 	call	#__system___basic_print_char
101b4     00 12 06 F6 | 	mov	arg01, #0
101b8     6C 63 B1 FD | 	call	#__system___getiolock_0540
101bc     FD 00 68 FC | 	wrlong	#0, result1
101c0     28 02 90 FD | 	jmp	#LR__1302
101c4                 | LR__1291
101c4     A7 16 02 FB | 	rdlong	arg03, fp
101c8     0C 4E 05 F1 | 	add	fp, #12
101cc     A7 16 62 FC | 	wrlong	arg03, fp
101d0     0C 4E 85 F1 | 	sub	fp, #12
101d4     80 B8 BF FD | 	call	#_pop
101d8     FF 16 02 F6 | 	mov	arg03, result3
101dc     A7 FA 61 FC | 	wrlong	result1, fp
101e0     04 4E 05 F1 | 	add	fp, #4
101e4     A7 FC 61 FC | 	wrlong	result2, fp
101e8     04 4E 05 F1 | 	add	fp, #4
101ec     A7 16 62 FC | 	wrlong	arg03, fp
101f0                 | ' filename=t1.result.sresult
101f0                 | ' t1=pop()
101f0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
101f0     08 4E 85 F1 | 	sub	fp, #8
101f4     2B 16 0E F2 | 	cmp	arg03, #43 wz
101f8     18 00 90 5D |  if_ne	jmp	#LR__1292
101fc     A7 12 02 FB | 	rdlong	arg01, fp
10200     CC 11 B0 FD | 	call	#_convertstring
10204     A7 FA 61 FC | 	wrlong	result1, fp
10208     08 4E 05 F1 | 	add	fp, #8
1020c     A7 3E 68 FC | 	wrlong	#31, fp
10210     08 4E 85 F1 | 	sub	fp, #8
10214                 | LR__1292
10214     14 4E 05 F1 | 	add	fp, #20
10218     A7 00 68 FC | 	wrlong	#0, fp
1021c                 | ' mode=0
1021c                 | ' if t1.result_type=result_string then
1021c     0C 4E 85 F1 | 	sub	fp, #12
10220     A7 14 02 FB | 	rdlong	arg02, fp
10224     08 4E 85 F1 | 	sub	fp, #8
10228     1F 14 0E F2 | 	cmp	arg02, #31 wz
1022c     64 00 90 5D |  if_ne	jmp	#LR__1293
10230                 | '   if t1.result.sresult="read" then mode=1
10230     A7 12 02 FB | 	rdlong	arg01, fp
10234     85 01 00 FF 
10238     6F 14 06 F6 | 	mov	arg02, ##@LR__5463
1023c     D0 08 B1 FD | 	call	#__system___string_cmp
10240     00 FA 0D F2 | 	cmp	result1, #0 wz
10244     14 4E 05 A1 |  if_e	add	fp, #20
10248     A7 02 68 AC |  if_e	wrlong	#1, fp
1024c     14 4E 85 A1 |  if_e	sub	fp, #20
10250                 | '   if t1.result.sresult="write" then mode=2
10250     A7 12 02 FB | 	rdlong	arg01, fp
10254     85 01 00 FF 
10258     74 14 06 F6 | 	mov	arg02, ##@LR__5464
1025c     B0 08 B1 FD | 	call	#__system___string_cmp
10260     00 FA 0D F2 | 	cmp	result1, #0 wz
10264     14 4E 05 A1 |  if_e	add	fp, #20
10268     A7 04 68 AC |  if_e	wrlong	#2, fp
1026c     14 4E 85 A1 |  if_e	sub	fp, #20
10270                 | '   if t1.result.sresult="append" then mode=4
10270     A7 12 02 FB | 	rdlong	arg01, fp
10274     85 01 00 FF 
10278     7A 14 06 F6 | 	mov	arg02, ##@LR__5465
1027c     90 08 B1 FD | 	call	#__system___string_cmp
10280     00 FA 0D F2 | 	cmp	result1, #0 wz
10284     14 4E 05 A1 |  if_e	add	fp, #20
10288     A7 08 68 AC |  if_e	wrlong	#4, fp
1028c     14 4E 85 A1 |  if_e	sub	fp, #20
10290     14 00 90 FD | 	jmp	#LR__1294
10294                 | LR__1293
10294     A7 12 02 F6 | 	mov	arg01, fp
10298     58 59 B0 FD | 	call	#_converttoint
1029c     14 4E 05 F1 | 	add	fp, #20
102a0     A7 FA 61 FC | 	wrlong	result1, fp
102a4     14 4E 85 F1 | 	sub	fp, #20
102a8                 | LR__1294
102a8     AC B7 BF FD | 	call	#_pop
102ac     FF 16 02 F6 | 	mov	arg03, result3
102b0     A7 FA 61 FC | 	wrlong	result1, fp
102b4     04 4E 05 F1 | 	add	fp, #4
102b8     A7 FC 61 FC | 	wrlong	result2, fp
102bc     04 4E 05 F1 | 	add	fp, #4
102c0     A7 16 62 FC | 	wrlong	arg03, fp
102c4                 | ' t1=pop()
102c4                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
102c4     08 4E 85 F1 | 	sub	fp, #8
102c8     2C 16 0E F2 | 	cmp	arg03, #44 wz
102cc     44 00 90 AD |  if_e	jmp	#LR__1295
102d0     00 12 06 F6 | 	mov	arg01, #0
102d4     50 62 B1 FD | 	call	#__system___getiolock_0540
102d8     FD 12 02 F6 | 	mov	arg01, result1
102dc     08 08 B1 FD | 	call	#__system___lockmem
102e0     85 01 00 FF 
102e4     81 14 06 F6 | 	mov	arg02, ##@LR__5466
102e8     00 12 06 F6 | 	mov	arg01, #0
102ec     00 16 06 F6 | 	mov	arg03, #0
102f0     E8 14 B1 FD | 	call	#__system___basic_print_string
102f4     00 12 06 F6 | 	mov	arg01, #0
102f8     0A 14 06 F6 | 	mov	arg02, #10
102fc     00 16 06 F6 | 	mov	arg03, #0
10300     80 14 B1 FD | 	call	#__system___basic_print_char
10304     00 12 06 F6 | 	mov	arg01, #0
10308     1C 62 B1 FD | 	call	#__system___getiolock_0540
1030c     FD 00 68 FC | 	wrlong	#0, result1
10310     D8 00 90 FD | 	jmp	#LR__1302
10314                 | LR__1295
10314     A7 1E 02 FB | 	rdlong	local01, fp
10318     18 4E 05 F1 | 	add	fp, #24
1031c     A7 1E 62 FC | 	wrlong	local01, fp
10320                 | ' channel  = t1.result.iresult
10320                 | ' 'print "Open,  channel=";channel; " mode=";mode;  " filename=";filename
10320                 | ' select case  mode
10320     04 4E 85 F1 | 	sub	fp, #4
10324     A7 20 02 FB | 	rdlong	local02, fp
10328     14 4E 85 F1 | 	sub	fp, #20
1032c     01 20 86 F1 | 	sub	local02, #1
10330     04 20 26 F3 | 	fle	local02, #4
10334     30 20 62 FD | 	jmprel	local02
10338                 | LR__1296
10338     10 00 90 FD | 	jmp	#LR__1297
1033c     2C 00 90 FD | 	jmp	#LR__1298
10340     68 00 90 FD | 	jmp	#LR__1300
10344     44 00 90 FD | 	jmp	#LR__1299
10348     60 00 90 FD | 	jmp	#LR__1300
1034c                 | LR__1297
1034c     18 4E 05 F1 | 	add	fp, #24
10350     A7 12 02 FB | 	rdlong	arg01, fp
10354     0C 4E 85 F1 | 	sub	fp, #12
10358     A7 14 02 FB | 	rdlong	arg02, fp
1035c     0C 4E 85 F1 | 	sub	fp, #12
10360     00 16 06 F6 | 	mov	arg03, #0
10364     84 13 B1 FD | 	call	#__system___basic_open_string
10368     80 00 90 FD | 	jmp	#LR__1301
1036c                 | LR__1298
1036c     18 4E 05 F1 | 	add	fp, #24
10370     A7 12 02 FB | 	rdlong	arg01, fp
10374     0C 4E 85 F1 | 	sub	fp, #12
10378     A7 14 02 FB | 	rdlong	arg02, fp
1037c     0C 4E 85 F1 | 	sub	fp, #12
10380     0D 16 06 F6 | 	mov	arg03, #13
10384     64 13 B1 FD | 	call	#__system___basic_open_string
10388     60 00 90 FD | 	jmp	#LR__1301
1038c                 | LR__1299
1038c     18 4E 05 F1 | 	add	fp, #24
10390     A7 12 02 FB | 	rdlong	arg01, fp
10394     0C 4E 85 F1 | 	sub	fp, #12
10398     A7 14 02 FB | 	rdlong	arg02, fp
1039c     0C 4E 85 F1 | 	sub	fp, #12
103a0     25 16 06 F6 | 	mov	arg03, #37
103a4     44 13 B1 FD | 	call	#__system___basic_open_string
103a8     40 00 90 FD | 	jmp	#LR__1301
103ac                 | LR__1300
103ac     00 12 06 F6 | 	mov	arg01, #0
103b0     74 61 B1 FD | 	call	#__system___getiolock_0540
103b4     FD 12 02 F6 | 	mov	arg01, result1
103b8     2C 07 B1 FD | 	call	#__system___lockmem
103bc     85 01 00 FF 
103c0     93 14 06 F6 | 	mov	arg02, ##@LR__5467
103c4     00 12 06 F6 | 	mov	arg01, #0
103c8     00 16 06 F6 | 	mov	arg03, #0
103cc     0C 14 B1 FD | 	call	#__system___basic_print_string
103d0     00 12 06 F6 | 	mov	arg01, #0
103d4     0A 14 06 F6 | 	mov	arg02, #10
103d8     00 16 06 F6 | 	mov	arg03, #0
103dc     A4 13 B1 FD | 	call	#__system___basic_print_char
103e0     00 12 06 F6 | 	mov	arg01, #0
103e4     40 61 B1 FD | 	call	#__system___getiolock_0540
103e8     FD 00 68 FC | 	wrlong	#0, result1
103ec                 | LR__1301
103ec                 | LR__1302
103ec     A7 F0 03 F6 | 	mov	ptra, fp
103f0     B2 00 A0 FD | 	call	#popregs_
103f4                 | _do_open_ret
103f4     2D 00 64 FD | 	ret
103f8                 | 
103f8                 | ' 
103f8                 | ' 
103f8                 | ' sub do_close
103f8                 | _do_close
103f8     03 4A 05 F6 | 	mov	COUNT_, #3
103fc     A8 00 A0 FD | 	call	#pushregs_
10400     54 B6 BF FD | 	call	#_pop
10404     FD 1E 02 F6 | 	mov	local01, result1
10408     FF 16 02 F6 | 	mov	arg03, result3
1040c     FE 20 02 F6 | 	mov	local02, result2
10410     0B 23 02 F6 | 	mov	local03, arg03
10414                 | ' numpar=compiledline(lineptr_e).result.uresult
10414                 | ' 
10414                 | ' t1=pop()
10414                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
10414     2C 22 0E F2 | 	cmp	local03, #44 wz
10418     44 00 90 AD |  if_e	jmp	#LR__1310
1041c     00 12 06 F6 | 	mov	arg01, #0
10420     04 61 B1 FD | 	call	#__system___getiolock_0540
10424     FD 12 02 F6 | 	mov	arg01, result1
10428     BC 06 B1 FD | 	call	#__system___lockmem
1042c     85 01 00 FF 
10430     A6 14 06 F6 | 	mov	arg02, ##@LR__5468
10434     00 12 06 F6 | 	mov	arg01, #0
10438     00 16 06 F6 | 	mov	arg03, #0
1043c     9C 13 B1 FD | 	call	#__system___basic_print_string
10440     00 12 06 F6 | 	mov	arg01, #0
10444     0A 14 06 F6 | 	mov	arg02, #10
10448     00 16 06 F6 | 	mov	arg03, #0
1044c     34 13 B1 FD | 	call	#__system___basic_print_char
10450     00 12 06 F6 | 	mov	arg01, #0
10454     D0 60 B1 FD | 	call	#__system___getiolock_0540
10458     FD 00 68 FC | 	wrlong	#0, result1
1045c     08 00 90 FD | 	jmp	#LR__1311
10460                 | LR__1310
10460                 | ' channel  = t1.result.iresult
10460                 | ' close #channel
10460     0F 13 02 F6 | 	mov	arg01, local01
10464     F0 56 B1 FD | 	call	#__system__close
10468                 | LR__1311
10468     A7 F0 03 F6 | 	mov	ptra, fp
1046c     B2 00 A0 FD | 	call	#popregs_
10470                 | _do_close_ret
10470     2D 00 64 FD | 	ret
10474                 | 
10474                 | ' 
10474                 | ' sub  do_get
10474                 | _do_get
10474     09 4A 05 F6 | 	mov	COUNT_, #9
10478     A8 00 A0 FD | 	call	#pushregs_
1047c     40 F0 07 F1 | 	add	ptra, #64
10480     4A 00 00 FF 
10484     80 E4 05 F1 | 	add	objptr, ##38016
10488     F2 1A 02 FB | 	rdlong	arg05, objptr
1048c     0D 19 02 F6 | 	mov	arg04, arg05
10490     01 18 66 F0 | 	shl	arg04, #1
10494     0D 19 02 F1 | 	add	arg04, arg05
10498     02 18 66 F0 | 	shl	arg04, #2
1049c     03 00 00 FF 
104a0     04 E4 85 F1 | 	sub	objptr, ##1540
104a4     F2 18 02 F1 | 	add	arg04, objptr
104a8     0C 1B 02 FB | 	rdlong	arg05, arg04
104ac     A7 1A 62 FC | 	wrlong	arg05, fp
104b0                 | ' numpar=compiledline(lineptr_e).result.uresult
104b0                 | ' if  numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
104b0     04 1A 0E F2 | 	cmp	arg05, #4 wz
104b4     47 00 00 FF 
104b8     7C E4 85 F1 | 	sub	objptr, ##36476
104bc     48 00 90 5D |  if_ne	jmp	#LR__1320
104c0     94 B5 BF FD | 	call	#_pop
104c4     FF 1A 02 F6 | 	mov	arg05, result3
104c8     1C 4E 05 F1 | 	add	fp, #28
104cc     A7 FA 61 FC | 	wrlong	result1, fp
104d0     04 4E 05 F1 | 	add	fp, #4
104d4     A7 FC 61 FC | 	wrlong	result2, fp
104d8     04 4E 05 F1 | 	add	fp, #4
104dc     A7 1A 62 FC | 	wrlong	arg05, fp
104e0     08 4E 85 F1 | 	sub	fp, #8
104e4     A7 12 02 F6 | 	mov	arg01, fp
104e8     1C 4E 85 F1 | 	sub	fp, #28
104ec     04 57 B0 FD | 	call	#_converttoint
104f0     52 00 00 FF 
104f4     10 E4 05 F1 | 	add	objptr, ##42000
104f8     F2 FA 61 FC | 	wrlong	result1, objptr
104fc     52 00 00 FF 
10500     10 E4 85 F1 | 	sub	objptr, ##42000
10504     18 00 90 FD | 	jmp	#LR__1321
10508                 | LR__1320
10508     52 00 00 FF 
1050c     10 E4 05 F1 | 	add	objptr, ##42000
10510     FF FF FF FF 
10514     F2 FE 6B FC | 	wrlong	##-1, objptr
10518     52 00 00 FF 
1051c     10 E4 85 F1 | 	sub	objptr, ##42000
10520                 | LR__1321
10520                 | ' if  numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
10520     A7 16 02 FB | 	rdlong	arg03, fp
10524     03 16 56 F2 | 	cmps	arg03, #3 wc
10528     40 00 90 CD |  if_b	jmp	#LR__1322
1052c     28 B5 BF FD | 	call	#_pop
10530     FF 16 02 F6 | 	mov	arg03, result3
10534     1C 4E 05 F1 | 	add	fp, #28
10538     A7 FA 61 FC | 	wrlong	result1, fp
1053c     04 4E 05 F1 | 	add	fp, #4
10540     A7 FC 61 FC | 	wrlong	result2, fp
10544     04 4E 05 F1 | 	add	fp, #4
10548     A7 16 62 FC | 	wrlong	arg03, fp
1054c     08 4E 85 F1 | 	sub	fp, #8
10550     A7 12 02 F6 | 	mov	arg01, fp
10554     1C 4E 85 F1 | 	sub	fp, #28
10558     98 56 B0 FD | 	call	#_converttoint
1055c     08 4E 05 F1 | 	add	fp, #8
10560     A7 FA 61 FC | 	wrlong	result1, fp
10564     08 4E 85 F1 | 	sub	fp, #8
10568     0C 00 90 FD | 	jmp	#LR__1323
1056c                 | LR__1322
1056c     08 4E 05 F1 | 	add	fp, #8
10570     A7 02 68 FC | 	wrlong	#1, fp
10574     08 4E 85 F1 | 	sub	fp, #8
10578                 | LR__1323
10578                 | ' if  numpar>=2  then t1=pop() : adr=converttoint(t1)
10578     A7 16 02 FB | 	rdlong	arg03, fp
1057c     02 16 56 F2 | 	cmps	arg03, #2 wc
10580     3C 00 90 CD |  if_b	jmp	#LR__1324
10584     D0 B4 BF FD | 	call	#_pop
10588     FF 16 02 F6 | 	mov	arg03, result3
1058c     1C 4E 05 F1 | 	add	fp, #28
10590     A7 FA 61 FC | 	wrlong	result1, fp
10594     04 4E 05 F1 | 	add	fp, #4
10598     A7 FC 61 FC | 	wrlong	result2, fp
1059c     04 4E 05 F1 | 	add	fp, #4
105a0     A7 16 62 FC | 	wrlong	arg03, fp
105a4     08 4E 85 F1 | 	sub	fp, #8
105a8     A7 12 02 F6 | 	mov	arg01, fp
105ac     1C 4E 85 F1 | 	sub	fp, #28
105b0     40 56 B0 FD | 	call	#_converttoint
105b4     0C 4E 05 F1 | 	add	fp, #12
105b8     A7 FA 61 FC | 	wrlong	result1, fp
105bc     0C 4E 85 F1 | 	sub	fp, #12
105c0                 | LR__1324
105c0     94 B4 BF FD | 	call	#_pop
105c4     FF 16 02 F6 | 	mov	arg03, result3
105c8     1C 4E 05 F1 | 	add	fp, #28
105cc     A7 FA 61 FC | 	wrlong	result1, fp
105d0     04 4E 05 F1 | 	add	fp, #4
105d4     A7 FC 61 FC | 	wrlong	result2, fp
105d8     04 4E 05 F1 | 	add	fp, #4
105dc     A7 16 62 FC | 	wrlong	arg03, fp
105e0     08 4E 85 F1 | 	sub	fp, #8
105e4     A7 12 02 F6 | 	mov	arg01, fp
105e8     1C 4E 85 F1 | 	sub	fp, #28
105ec     04 56 B0 FD | 	call	#_converttoint
105f0     04 4E 05 F1 | 	add	fp, #4
105f4     A7 FA 61 FC | 	wrlong	result1, fp
105f8     10 4E 05 F1 | 	add	fp, #16
105fc     A7 16 02 FB | 	rdlong	arg03, fp
10600     14 4E 85 F1 | 	sub	fp, #20
10604     02 16 66 F0 | 	shl	arg03, #2
10608     50 00 00 FF 
1060c     C0 E4 05 F1 | 	add	objptr, ##41152
10610     F2 1E 02 F6 | 	mov	local01, objptr
10614     F2 16 02 F1 | 	add	arg03, objptr
10618     0B 01 68 FC | 	wrlong	#0, arg03
1061c                 | ' t1=pop() : channel=converttoint(t1)
1061c                 | ' 
1061c                 | ' getres(j)=0
1061c                 | ' if pos>=0 then
1061c     01 00 00 FF 
10620     50 E5 05 F1 | 	add	objptr, ##848
10624     F2 20 02 FB | 	rdlong	local02, objptr
10628     52 00 00 FF 
1062c     10 E4 85 F1 | 	sub	objptr, ##42000
10630     00 20 56 F2 | 	cmps	local02, #0 wc
10634     F0 01 90 CD |  if_b	jmp	#LR__1331
10638                 | '   for i=0 to  amount/1024
10638     10 4E 05 F1 | 	add	fp, #16
1063c     A7 00 68 FC | 	wrlong	#0, fp
10640     08 4E 85 F1 | 	sub	fp, #8
10644     A7 22 02 FB | 	rdlong	local03, fp
10648     08 4E 85 F1 | 	sub	fp, #8
1064c     11 25 52 F6 | 	abs	local04, local03 wc
10650     0A 24 46 F0 | 	shr	local04, #10
10654     12 25 82 F6 | 	negc	local04, local04
10658     01 24 06 F1 | 	add	local04, #1
1065c                 | LR__1325
1065c     10 4E 05 F1 | 	add	fp, #16
10660     A7 22 02 FB | 	rdlong	local03, fp
10664     10 4E 85 F1 | 	sub	fp, #16
10668     12 23 52 F2 | 	cmps	local03, local04 wc
1066c     9C 03 90 3D |  if_ae	jmp	#LR__1339
10670                 | '     get #channel,pos+1,block(0),amount,r
10670     04 4E 05 F1 | 	add	fp, #4
10674     A7 12 02 FB | 	rdlong	arg01, fp
10678     52 00 00 FF 
1067c     10 E4 05 F1 | 	add	objptr, ##42000
10680     F2 14 02 FB | 	rdlong	arg02, objptr
10684     01 14 06 F1 | 	add	arg02, #1
10688     03 00 00 FF 
1068c     60 E5 85 F1 | 	sub	objptr, ##1888
10690     F2 16 02 F6 | 	mov	arg03, objptr
10694     4E 00 00 FF 
10698     B0 E4 85 F1 | 	sub	objptr, ##40112
1069c     04 4E 05 F1 | 	add	fp, #4
106a0     A7 18 02 FB | 	rdlong	arg04, fp
106a4     08 4E 85 F1 | 	sub	fp, #8
106a8     01 1A 06 F6 | 	mov	arg05, #1
106ac     A8 12 B1 FD | 	call	#__system___basic_get
106b0     18 4E 05 F1 | 	add	fp, #24
106b4     A7 FA 61 FC | 	wrlong	result1, fp
106b8                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
106b8     0C 4E 85 F1 | 	sub	fp, #12
106bc     A7 20 02 FB | 	rdlong	local02, fp
106c0     0C 4E 85 F1 | 	sub	fp, #12
106c4     00 04 00 FF 
106c8     00 20 56 F2 | 	cmps	local02, ##524288 wc
106cc     7C 00 90 3D |  if_ae	jmp	#LR__1327
106d0     14 4E 05 F1 | 	add	fp, #20
106d4     A7 00 68 FC | 	wrlong	#0, fp
106d8     04 4E 05 F1 | 	add	fp, #4
106dc     A7 26 02 FB | 	rdlong	local05, fp
106e0     18 4E 85 F1 | 	sub	fp, #24
106e4                 | LR__1326
106e4     14 4E 05 F1 | 	add	fp, #20
106e8     A7 20 02 FB | 	rdlong	local02, fp
106ec     14 4E 85 F1 | 	sub	fp, #20
106f0     13 21 52 F2 | 	cmps	local02, local05 wc
106f4     D8 00 90 3D |  if_ae	jmp	#LR__1330
106f8     0C 4E 05 F1 | 	add	fp, #12
106fc     A7 12 02 FB | 	rdlong	arg01, fp
10700     04 4E 05 F1 | 	add	fp, #4
10704     A7 22 02 FB | 	rdlong	local03, fp
10708     0A 22 66 F0 | 	shl	local03, #10
1070c     11 13 02 F1 | 	add	arg01, local03
10710     04 4E 05 F1 | 	add	fp, #4
10714     A7 22 02 FB | 	rdlong	local03, fp
10718     11 13 02 F1 | 	add	arg01, local03
1071c     4E 00 00 FF 
10720     B0 E4 05 F1 | 	add	objptr, ##40112
10724     F2 22 02 F1 | 	add	local03, objptr
10728     11 15 C2 FA | 	rdbyte	arg02, local03
1072c     09 15 42 FC | 	wrbyte	arg02, arg01
10730     4E 00 00 FF 
10734     B0 E4 85 F1 | 	sub	objptr, ##40112
10738     A7 22 02 FB | 	rdlong	local03, fp
1073c     01 22 06 F1 | 	add	local03, #1
10740     A7 22 62 FC | 	wrlong	local03, fp
10744     14 4E 85 F1 | 	sub	fp, #20
10748     98 FF 9F FD | 	jmp	#LR__1326
1074c                 | LR__1327
1074c     14 4E 05 F1 | 	add	fp, #20
10750     A7 00 68 FC | 	wrlong	#0, fp
10754     04 4E 05 F1 | 	add	fp, #4
10758     A7 28 02 FB | 	rdlong	local06, fp
1075c     18 4E 85 F1 | 	sub	fp, #24
10760                 | LR__1328
10760     14 4E 05 F1 | 	add	fp, #20
10764     A7 20 02 FB | 	rdlong	local02, fp
10768     14 4E 85 F1 | 	sub	fp, #20
1076c     14 21 52 F2 | 	cmps	local02, local06 wc
10770     5C 00 90 3D |  if_ae	jmp	#LR__1329
10774     0C 4E 05 F1 | 	add	fp, #12
10778     A7 12 02 FB | 	rdlong	arg01, fp
1077c     04 4E 05 F1 | 	add	fp, #4
10780     A7 26 02 FB | 	rdlong	local05, fp
10784     0A 26 66 F0 | 	shl	local05, #10
10788     13 13 02 F1 | 	add	arg01, local05
1078c     04 4E 05 F1 | 	add	fp, #4
10790     A7 26 02 FB | 	rdlong	local05, fp
10794     13 13 02 F1 | 	add	arg01, local05
10798     14 4E 85 F1 | 	sub	fp, #20
1079c     4E 00 00 FF 
107a0     B0 E4 05 F1 | 	add	objptr, ##40112
107a4     F2 26 02 F1 | 	add	local05, objptr
107a8     13 15 C2 FA | 	rdbyte	arg02, local05
107ac     4E 00 00 FF 
107b0     B0 E4 85 F1 | 	sub	objptr, ##40112
107b4     8C CF B0 FD | 	call	#_pspoke
107b8     14 4E 05 F1 | 	add	fp, #20
107bc     A7 26 02 FB | 	rdlong	local05, fp
107c0     01 26 06 F1 | 	add	local05, #1
107c4     A7 26 62 FC | 	wrlong	local05, fp
107c8     14 4E 85 F1 | 	sub	fp, #20
107cc     90 FF 9F FD | 	jmp	#LR__1328
107d0                 | LR__1329
107d0                 | LR__1330
107d0     14 4E 05 F1 | 	add	fp, #20
107d4     A7 28 02 FB | 	rdlong	local06, fp
107d8     14 23 02 F6 | 	mov	local03, local06
107dc     02 22 66 F0 | 	shl	local03, #2
107e0     50 00 00 FF 
107e4     C0 E4 05 F1 | 	add	objptr, ##41152
107e8     F2 22 02 F1 | 	add	local03, objptr
107ec     02 28 66 F0 | 	shl	local06, #2
107f0     F2 28 02 F1 | 	add	local06, objptr
107f4     14 29 02 FB | 	rdlong	local06, local06
107f8     04 4E 05 F1 | 	add	fp, #4
107fc     A7 26 02 FB | 	rdlong	local05, fp
10800     13 29 02 F1 | 	add	local06, local05
10804     11 29 62 FC | 	wrlong	local06, local03
10808     08 4E 85 F1 | 	sub	fp, #8
1080c     A7 28 02 FB | 	rdlong	local06, fp
10810     01 28 06 F1 | 	add	local06, #1
10814     A7 28 62 FC | 	wrlong	local06, fp
10818     10 4E 85 F1 | 	sub	fp, #16
1081c     50 00 00 FF 
10820     C0 E4 85 F1 | 	sub	objptr, ##41152
10824     34 FE 9F FD | 	jmp	#LR__1325
10828                 | LR__1331
10828                 | '   for i=0 to  amount/1024
10828     10 4E 05 F1 | 	add	fp, #16
1082c     A7 00 68 FC | 	wrlong	#0, fp
10830     08 4E 85 F1 | 	sub	fp, #8
10834     A7 22 02 FB | 	rdlong	local03, fp
10838     08 4E 85 F1 | 	sub	fp, #8
1083c     11 2B 52 F6 | 	abs	local07, local03 wc
10840     0A 2A 46 F0 | 	shr	local07, #10
10844     15 2B 82 F6 | 	negc	local07, local07
10848     01 2A 06 F1 | 	add	local07, #1
1084c                 | LR__1332
1084c     10 4E 05 F1 | 	add	fp, #16
10850     A7 22 02 FB | 	rdlong	local03, fp
10854     10 4E 85 F1 | 	sub	fp, #16
10858     15 23 52 F2 | 	cmps	local03, local07 wc
1085c     AC 01 90 3D |  if_ae	jmp	#LR__1338
10860                 | '     get #channel,,block(0),amount,r
10860     04 4E 05 F1 | 	add	fp, #4
10864     A7 12 02 FB | 	rdlong	arg01, fp
10868     4E 00 00 FF 
1086c     B0 E4 05 F1 | 	add	objptr, ##40112
10870     F2 16 02 F6 | 	mov	arg03, objptr
10874     4E 00 00 FF 
10878     B0 E4 85 F1 | 	sub	objptr, ##40112
1087c     04 4E 05 F1 | 	add	fp, #4
10880     A7 18 02 FB | 	rdlong	arg04, fp
10884     08 4E 85 F1 | 	sub	fp, #8
10888     00 14 06 F6 | 	mov	arg02, #0
1088c     01 1A 06 F6 | 	mov	arg05, #1
10890     C4 10 B1 FD | 	call	#__system___basic_get
10894     18 4E 05 F1 | 	add	fp, #24
10898     A7 FA 61 FC | 	wrlong	result1, fp
1089c                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
1089c     0C 4E 85 F1 | 	sub	fp, #12
108a0     A7 20 02 FB | 	rdlong	local02, fp
108a4     0C 4E 85 F1 | 	sub	fp, #12
108a8     00 04 00 FF 
108ac     00 20 56 F2 | 	cmps	local02, ##524288 wc
108b0     7C 00 90 3D |  if_ae	jmp	#LR__1334
108b4     14 4E 05 F1 | 	add	fp, #20
108b8     A7 00 68 FC | 	wrlong	#0, fp
108bc     04 4E 05 F1 | 	add	fp, #4
108c0     A7 2C 02 FB | 	rdlong	local08, fp
108c4     18 4E 85 F1 | 	sub	fp, #24
108c8                 | LR__1333
108c8     14 4E 05 F1 | 	add	fp, #20
108cc     A7 20 02 FB | 	rdlong	local02, fp
108d0     14 4E 85 F1 | 	sub	fp, #20
108d4     16 21 52 F2 | 	cmps	local02, local08 wc
108d8     D8 00 90 3D |  if_ae	jmp	#LR__1337
108dc     0C 4E 05 F1 | 	add	fp, #12
108e0     A7 12 02 FB | 	rdlong	arg01, fp
108e4     04 4E 05 F1 | 	add	fp, #4
108e8     A7 28 02 FB | 	rdlong	local06, fp
108ec     0A 28 66 F0 | 	shl	local06, #10
108f0     14 13 02 F1 | 	add	arg01, local06
108f4     04 4E 05 F1 | 	add	fp, #4
108f8     A7 28 02 FB | 	rdlong	local06, fp
108fc     14 13 02 F1 | 	add	arg01, local06
10900     4E 00 00 FF 
10904     B0 E4 05 F1 | 	add	objptr, ##40112
10908     F2 28 02 F1 | 	add	local06, objptr
1090c     14 15 C2 FA | 	rdbyte	arg02, local06
10910     09 15 42 FC | 	wrbyte	arg02, arg01
10914     4E 00 00 FF 
10918     B0 E4 85 F1 | 	sub	objptr, ##40112
1091c     A7 28 02 FB | 	rdlong	local06, fp
10920     01 28 06 F1 | 	add	local06, #1
10924     A7 28 62 FC | 	wrlong	local06, fp
10928     14 4E 85 F1 | 	sub	fp, #20
1092c     98 FF 9F FD | 	jmp	#LR__1333
10930                 | LR__1334
10930     14 4E 05 F1 | 	add	fp, #20
10934     A7 00 68 FC | 	wrlong	#0, fp
10938     04 4E 05 F1 | 	add	fp, #4
1093c     A7 2E 02 FB | 	rdlong	local09, fp
10940     18 4E 85 F1 | 	sub	fp, #24
10944                 | LR__1335
10944     14 4E 05 F1 | 	add	fp, #20
10948     A7 20 02 FB | 	rdlong	local02, fp
1094c     14 4E 85 F1 | 	sub	fp, #20
10950     17 21 52 F2 | 	cmps	local02, local09 wc
10954     5C 00 90 3D |  if_ae	jmp	#LR__1336
10958     0C 4E 05 F1 | 	add	fp, #12
1095c     A7 12 02 FB | 	rdlong	arg01, fp
10960     04 4E 05 F1 | 	add	fp, #4
10964     A7 2C 02 FB | 	rdlong	local08, fp
10968     0A 2C 66 F0 | 	shl	local08, #10
1096c     16 13 02 F1 | 	add	arg01, local08
10970     04 4E 05 F1 | 	add	fp, #4
10974     A7 2C 02 FB | 	rdlong	local08, fp
10978     16 13 02 F1 | 	add	arg01, local08
1097c     14 4E 85 F1 | 	sub	fp, #20
10980     4E 00 00 FF 
10984     B0 E4 05 F1 | 	add	objptr, ##40112
10988     F2 2C 02 F1 | 	add	local08, objptr
1098c     16 15 C2 FA | 	rdbyte	arg02, local08
10990     4E 00 00 FF 
10994     B0 E4 85 F1 | 	sub	objptr, ##40112
10998     A8 CD B0 FD | 	call	#_pspoke
1099c     14 4E 05 F1 | 	add	fp, #20
109a0     A7 2C 02 FB | 	rdlong	local08, fp
109a4     01 2C 06 F1 | 	add	local08, #1
109a8     A7 2C 62 FC | 	wrlong	local08, fp
109ac     14 4E 85 F1 | 	sub	fp, #20
109b0     90 FF 9F FD | 	jmp	#LR__1335
109b4                 | LR__1336
109b4                 | LR__1337
109b4     14 4E 05 F1 | 	add	fp, #20
109b8     A7 2E 02 FB | 	rdlong	local09, fp
109bc     17 29 02 F6 | 	mov	local06, local09
109c0     02 28 66 F0 | 	shl	local06, #2
109c4     50 00 00 FF 
109c8     C0 E4 05 F1 | 	add	objptr, ##41152
109cc     F2 28 02 F1 | 	add	local06, objptr
109d0     02 2E 66 F0 | 	shl	local09, #2
109d4     F2 2E 02 F1 | 	add	local09, objptr
109d8     17 2F 02 FB | 	rdlong	local09, local09
109dc     04 4E 05 F1 | 	add	fp, #4
109e0     A7 2C 02 FB | 	rdlong	local08, fp
109e4     16 2F 02 F1 | 	add	local09, local08
109e8     14 2F 62 FC | 	wrlong	local09, local06
109ec     08 4E 85 F1 | 	sub	fp, #8
109f0     A7 2E 02 FB | 	rdlong	local09, fp
109f4     01 2E 06 F1 | 	add	local09, #1
109f8     A7 2E 62 FC | 	wrlong	local09, fp
109fc     10 4E 85 F1 | 	sub	fp, #16
10a00     50 00 00 FF 
10a04     C0 E4 85 F1 | 	sub	objptr, ##41152
10a08     40 FE 9F FD | 	jmp	#LR__1332
10a0c                 | LR__1338
10a0c                 | LR__1339
10a0c     A7 F0 03 F6 | 	mov	ptra, fp
10a10     B2 00 A0 FD | 	call	#popregs_
10a14                 | _do_get_ret
10a14     2D 00 64 FD | 	ret
10a18                 | 
10a18                 | ' 
10a18                 | ' sub  do_put
10a18                 | _do_put
10a18     03 4A 05 F6 | 	mov	COUNT_, #3
10a1c     A8 00 A0 FD | 	call	#pushregs_
10a20     28 F0 07 F1 | 	add	ptra, #40
10a24     4A 00 00 FF 
10a28     80 E4 05 F1 | 	add	objptr, ##38016
10a2c     F2 1A 02 FB | 	rdlong	arg05, objptr
10a30     0D 19 02 F6 | 	mov	arg04, arg05
10a34     01 18 66 F0 | 	shl	arg04, #1
10a38     0D 19 02 F1 | 	add	arg04, arg05
10a3c     02 18 66 F0 | 	shl	arg04, #2
10a40     03 00 00 FF 
10a44     04 E4 85 F1 | 	sub	objptr, ##1540
10a48     F2 18 02 F1 | 	add	arg04, objptr
10a4c     0C 1B 02 FB | 	rdlong	arg05, arg04
10a50     A7 1A 62 FC | 	wrlong	arg05, fp
10a54                 | ' numpar=compiledline(lineptr_e).result.uresult
10a54                 | ' if  numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
10a54     04 1A 0E F2 | 	cmp	arg05, #4 wz
10a58     47 00 00 FF 
10a5c     7C E4 85 F1 | 	sub	objptr, ##36476
10a60     48 00 90 5D |  if_ne	jmp	#LR__1340
10a64     F0 AF BF FD | 	call	#_pop
10a68     FF 1A 02 F6 | 	mov	arg05, result3
10a6c     1C 4E 05 F1 | 	add	fp, #28
10a70     A7 FA 61 FC | 	wrlong	result1, fp
10a74     04 4E 05 F1 | 	add	fp, #4
10a78     A7 FC 61 FC | 	wrlong	result2, fp
10a7c     04 4E 05 F1 | 	add	fp, #4
10a80     A7 1A 62 FC | 	wrlong	arg05, fp
10a84     08 4E 85 F1 | 	sub	fp, #8
10a88     A7 12 02 F6 | 	mov	arg01, fp
10a8c     1C 4E 85 F1 | 	sub	fp, #28
10a90     60 51 B0 FD | 	call	#_converttoint
10a94     52 00 00 FF 
10a98     10 E4 05 F1 | 	add	objptr, ##42000
10a9c     F2 FA 61 FC | 	wrlong	result1, objptr
10aa0     52 00 00 FF 
10aa4     10 E4 85 F1 | 	sub	objptr, ##42000
10aa8     18 00 90 FD | 	jmp	#LR__1341
10aac                 | LR__1340
10aac     52 00 00 FF 
10ab0     10 E4 05 F1 | 	add	objptr, ##42000
10ab4     FF FF FF FF 
10ab8     F2 FE 6B FC | 	wrlong	##-1, objptr
10abc     52 00 00 FF 
10ac0     10 E4 85 F1 | 	sub	objptr, ##42000
10ac4                 | LR__1341
10ac4                 | ' if  numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
10ac4     A7 1A 02 FB | 	rdlong	arg05, fp
10ac8     03 1A 56 F2 | 	cmps	arg05, #3 wc
10acc     40 00 90 CD |  if_b	jmp	#LR__1342
10ad0     84 AF BF FD | 	call	#_pop
10ad4     FF 1A 02 F6 | 	mov	arg05, result3
10ad8     1C 4E 05 F1 | 	add	fp, #28
10adc     A7 FA 61 FC | 	wrlong	result1, fp
10ae0     04 4E 05 F1 | 	add	fp, #4
10ae4     A7 FC 61 FC | 	wrlong	result2, fp
10ae8     04 4E 05 F1 | 	add	fp, #4
10aec     A7 1A 62 FC | 	wrlong	arg05, fp
10af0     08 4E 85 F1 | 	sub	fp, #8
10af4     A7 12 02 F6 | 	mov	arg01, fp
10af8     1C 4E 85 F1 | 	sub	fp, #28
10afc     F4 50 B0 FD | 	call	#_converttoint
10b00     08 4E 05 F1 | 	add	fp, #8
10b04     A7 FA 61 FC | 	wrlong	result1, fp
10b08     08 4E 85 F1 | 	sub	fp, #8
10b0c     0C 00 90 FD | 	jmp	#LR__1343
10b10                 | LR__1342
10b10     08 4E 05 F1 | 	add	fp, #8
10b14     A7 02 68 FC | 	wrlong	#1, fp
10b18     08 4E 85 F1 | 	sub	fp, #8
10b1c                 | LR__1343
10b1c                 | ' if  numpar>=2  then t1=pop() : adr=converttoint(t1)
10b1c     A7 18 02 FB | 	rdlong	arg04, fp
10b20     02 18 56 F2 | 	cmps	arg04, #2 wc
10b24     3C 00 90 CD |  if_b	jmp	#LR__1344
10b28     2C AF BF FD | 	call	#_pop
10b2c     FF 18 02 F6 | 	mov	arg04, result3
10b30     1C 4E 05 F1 | 	add	fp, #28
10b34     A7 FA 61 FC | 	wrlong	result1, fp
10b38     04 4E 05 F1 | 	add	fp, #4
10b3c     A7 FC 61 FC | 	wrlong	result2, fp
10b40     04 4E 05 F1 | 	add	fp, #4
10b44     A7 18 62 FC | 	wrlong	arg04, fp
10b48     08 4E 85 F1 | 	sub	fp, #8
10b4c     A7 12 02 F6 | 	mov	arg01, fp
10b50     1C 4E 85 F1 | 	sub	fp, #28
10b54     9C 50 B0 FD | 	call	#_converttoint
10b58     0C 4E 05 F1 | 	add	fp, #12
10b5c     A7 FA 61 FC | 	wrlong	result1, fp
10b60     0C 4E 85 F1 | 	sub	fp, #12
10b64                 | LR__1344
10b64     F0 AE BF FD | 	call	#_pop
10b68     FF 18 02 F6 | 	mov	arg04, result3
10b6c     1C 4E 05 F1 | 	add	fp, #28
10b70     A7 FA 61 FC | 	wrlong	result1, fp
10b74     04 4E 05 F1 | 	add	fp, #4
10b78     A7 FC 61 FC | 	wrlong	result2, fp
10b7c     04 4E 05 F1 | 	add	fp, #4
10b80     A7 18 62 FC | 	wrlong	arg04, fp
10b84     08 4E 85 F1 | 	sub	fp, #8
10b88     A7 12 02 F6 | 	mov	arg01, fp
10b8c     1C 4E 85 F1 | 	sub	fp, #28
10b90     60 50 B0 FD | 	call	#_converttoint
10b94     04 4E 05 F1 | 	add	fp, #4
10b98     A7 FA 61 FC | 	wrlong	result1, fp
10b9c     10 4E 05 F1 | 	add	fp, #16
10ba0     A7 1E 02 FB | 	rdlong	local01, fp
10ba4     14 4E 85 F1 | 	sub	fp, #20
10ba8     02 1E 66 F0 | 	shl	local01, #2
10bac     50 00 00 FF 
10bb0     C0 E4 05 F1 | 	add	objptr, ##41152
10bb4     F2 1E 02 F1 | 	add	local01, objptr
10bb8     0F 01 68 FC | 	wrlong	#0, local01
10bbc                 | ' t1=pop() : channel=converttoint(t1)
10bbc                 | ' 
10bbc                 | ' getres(j)=0
10bbc                 | ' if pos>=0 then
10bbc     01 00 00 FF 
10bc0     50 E5 05 F1 | 	add	objptr, ##848
10bc4     F2 20 02 FB | 	rdlong	local02, objptr
10bc8     52 00 00 FF 
10bcc     10 E4 85 F1 | 	sub	objptr, ##42000
10bd0     00 20 56 F2 | 	cmps	local02, #0 wc
10bd4     C0 01 90 CD |  if_b	jmp	#LR__1350
10bd8     10 4E 05 F1 | 	add	fp, #16
10bdc     A7 00 68 FC | 	wrlong	#0, fp
10be0     10 4E 85 F1 | 	sub	fp, #16
10be4                 | '    i=0: do
10be4                 | LR__1345
10be4     14 4E 05 F1 | 	add	fp, #20
10be8     A7 00 68 FC | 	wrlong	#0, fp
10bec     14 4E 85 F1 | 	sub	fp, #20
10bf0                 | '    j=0: do    
10bf0                 | LR__1346
10bf0                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
10bf0     0C 4E 05 F1 | 	add	fp, #12
10bf4     A7 20 02 FB | 	rdlong	local02, fp
10bf8     0C 4E 85 F1 | 	sub	fp, #12
10bfc     00 04 00 FF 
10c00     00 20 56 F2 | 	cmps	local02, ##524288 wc
10c04     4C 00 90 3D |  if_ae	jmp	#LR__1347
10c08     14 4E 05 F1 | 	add	fp, #20
10c0c     A7 20 02 FB | 	rdlong	local02, fp
10c10     10 1F 02 F6 | 	mov	local01, local02
10c14     4E 00 00 FF 
10c18     B0 E4 05 F1 | 	add	objptr, ##40112
10c1c     F2 1E 02 F1 | 	add	local01, objptr
10c20     08 4E 85 F1 | 	sub	fp, #8
10c24     A7 12 02 FB | 	rdlong	arg01, fp
10c28     04 4E 05 F1 | 	add	fp, #4
10c2c     A7 18 02 FB | 	rdlong	arg04, fp
10c30     0A 18 66 F0 | 	shl	arg04, #10
10c34     0C 13 02 F1 | 	add	arg01, arg04
10c38     10 4E 85 F1 | 	sub	fp, #16
10c3c     10 13 02 F1 | 	add	arg01, local02
10c40     09 FB C1 FA | 	rdbyte	result1, arg01
10c44     4E 00 00 FF 
10c48     B0 E4 85 F1 | 	sub	objptr, ##40112
10c4c     0F FB 41 FC | 	wrbyte	result1, local01
10c50     48 00 90 FD | 	jmp	#LR__1348
10c54                 | LR__1347
10c54     14 4E 05 F1 | 	add	fp, #20
10c58     A7 20 02 FB | 	rdlong	local02, fp
10c5c     10 1F 02 F6 | 	mov	local01, local02
10c60     4E 00 00 FF 
10c64     B0 E4 05 F1 | 	add	objptr, ##40112
10c68     F2 1E 02 F1 | 	add	local01, objptr
10c6c     08 4E 85 F1 | 	sub	fp, #8
10c70     A7 12 02 FB | 	rdlong	arg01, fp
10c74     04 4E 05 F1 | 	add	fp, #4
10c78     A7 18 02 FB | 	rdlong	arg04, fp
10c7c     0A 18 66 F0 | 	shl	arg04, #10
10c80     0C 13 02 F1 | 	add	arg01, arg04
10c84     10 4E 85 F1 | 	sub	fp, #16
10c88     10 13 02 F1 | 	add	arg01, local02
10c8c     4E 00 00 FF 
10c90     B0 E4 85 F1 | 	sub	objptr, ##40112
10c94     F4 CA B0 FD | 	call	#_pspeek
10c98     0F FB 41 FC | 	wrbyte	result1, local01
10c9c                 | LR__1348
10c9c     14 4E 05 F1 | 	add	fp, #20
10ca0     A7 20 02 FB | 	rdlong	local02, fp
10ca4     01 20 06 F1 | 	add	local02, #1
10ca8     A7 20 62 FC | 	wrlong	local02, fp
10cac     14 4E 85 F1 | 	sub	fp, #20
10cb0     02 00 00 FF 
10cb4     00 20 56 F2 | 	cmps	local02, ##1024 wc
10cb8     2C 00 90 3D |  if_ae	jmp	#LR__1349
10cbc     10 4E 05 F1 | 	add	fp, #16
10cc0     A7 1E 02 FB | 	rdlong	local01, fp
10cc4     0A 1E 66 F0 | 	shl	local01, #10
10cc8     04 4E 05 F1 | 	add	fp, #4
10ccc     A7 20 02 FB | 	rdlong	local02, fp
10cd0     10 1F 02 F1 | 	add	local01, local02
10cd4     0C 4E 85 F1 | 	sub	fp, #12
10cd8     A7 20 02 FB | 	rdlong	local02, fp
10cdc     08 4E 85 F1 | 	sub	fp, #8
10ce0     10 1F 5A F2 | 	cmps	local01, local02 wcz
10ce4     08 FF 9F ED |  if_be	jmp	#LR__1346
10ce8                 | LR__1349
10ce8                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
10ce8     04 4E 05 F1 | 	add	fp, #4
10cec     A7 12 02 FB | 	rdlong	arg01, fp
10cf0     52 00 00 FF 
10cf4     10 E4 05 F1 | 	add	objptr, ##42000
10cf8     F2 14 02 FB | 	rdlong	arg02, objptr
10cfc     01 14 06 F1 | 	add	arg02, #1
10d00     03 00 00 FF 
10d04     60 E5 85 F1 | 	sub	objptr, ##1888
10d08     F2 16 02 F6 | 	mov	arg03, objptr
10d0c     4E 00 00 FF 
10d10     B0 E4 85 F1 | 	sub	objptr, ##40112
10d14     04 4E 05 F1 | 	add	fp, #4
10d18     A7 18 02 FB | 	rdlong	arg04, fp
10d1c     08 4E 85 F1 | 	sub	fp, #8
10d20     01 1A 06 F6 | 	mov	arg05, #1
10d24     C4 0B B1 FD | 	call	#__system___basic_put
10d28     18 4E 05 F1 | 	add	fp, #24
10d2c     A7 FA 61 FC | 	wrlong	result1, fp
10d30     14 4E 85 F1 | 	sub	fp, #20
10d34     A7 1E 02 FB | 	rdlong	local01, fp
10d38     02 1E 66 F0 | 	shl	local01, #2
10d3c     50 00 00 FF 
10d40     C0 E4 05 F1 | 	add	objptr, ##41152
10d44     F2 1E 02 F1 | 	add	local01, objptr
10d48     0F FB 61 FC | 	wrlong	result1, local01
10d4c                 | '    if 1024*i+j>amount then exit loop
10d4c     0C 4E 05 F1 | 	add	fp, #12
10d50     A7 20 02 FB | 	rdlong	local02, fp
10d54     0A 20 66 F0 | 	shl	local02, #10
10d58     04 4E 05 F1 | 	add	fp, #4
10d5c     A7 1E 02 FB | 	rdlong	local01, fp
10d60     0F 21 02 F1 | 	add	local02, local01
10d64     0C 4E 85 F1 | 	sub	fp, #12
10d68     A7 1E 02 FB | 	rdlong	local01, fp
10d6c     08 4E 85 F1 | 	sub	fp, #8
10d70     0F 21 5A F2 | 	cmps	local02, local01 wcz
10d74     50 00 00 FF 
10d78     C0 E4 85 F1 | 	sub	objptr, ##41152
10d7c     CC 01 90 1D |  if_a	jmp	#LR__1357
10d80     10 4E 05 F1 | 	add	fp, #16
10d84     A7 20 02 FB | 	rdlong	local02, fp
10d88     01 20 06 F1 | 	add	local02, #1
10d8c     A7 20 62 FC | 	wrlong	local02, fp
10d90     10 4E 85 F1 | 	sub	fp, #16
10d94     4C FE 9F FD | 	jmp	#LR__1345
10d98                 | LR__1350
10d98     10 4E 05 F1 | 	add	fp, #16
10d9c     A7 00 68 FC | 	wrlong	#0, fp
10da0     10 4E 85 F1 | 	sub	fp, #16
10da4                 | '    i=0: do
10da4                 | LR__1351
10da4     14 4E 05 F1 | 	add	fp, #20
10da8     A7 00 68 FC | 	wrlong	#0, fp
10dac     14 4E 85 F1 | 	sub	fp, #20
10db0                 | '    j=0: do  
10db0                 | LR__1352
10db0                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
10db0     0C 4E 05 F1 | 	add	fp, #12
10db4     A7 20 02 FB | 	rdlong	local02, fp
10db8     0C 4E 85 F1 | 	sub	fp, #12
10dbc     00 04 00 FF 
10dc0     00 20 56 F2 | 	cmps	local02, ##524288 wc
10dc4     4C 00 90 3D |  if_ae	jmp	#LR__1353
10dc8     14 4E 05 F1 | 	add	fp, #20
10dcc     A7 20 02 FB | 	rdlong	local02, fp
10dd0     10 1F 02 F6 | 	mov	local01, local02
10dd4     4E 00 00 FF 
10dd8     B0 E4 05 F1 | 	add	objptr, ##40112
10ddc     F2 1E 02 F1 | 	add	local01, objptr
10de0     08 4E 85 F1 | 	sub	fp, #8
10de4     A7 12 02 FB | 	rdlong	arg01, fp
10de8     04 4E 05 F1 | 	add	fp, #4
10dec     A7 18 02 FB | 	rdlong	arg04, fp
10df0     0A 18 66 F0 | 	shl	arg04, #10
10df4     0C 13 02 F1 | 	add	arg01, arg04
10df8     10 4E 85 F1 | 	sub	fp, #16
10dfc     10 13 02 F1 | 	add	arg01, local02
10e00     09 FB C1 FA | 	rdbyte	result1, arg01
10e04     4E 00 00 FF 
10e08     B0 E4 85 F1 | 	sub	objptr, ##40112
10e0c     0F FB 41 FC | 	wrbyte	result1, local01
10e10     48 00 90 FD | 	jmp	#LR__1354
10e14                 | LR__1353
10e14     14 4E 05 F1 | 	add	fp, #20
10e18     A7 20 02 FB | 	rdlong	local02, fp
10e1c     10 1F 02 F6 | 	mov	local01, local02
10e20     4E 00 00 FF 
10e24     B0 E4 05 F1 | 	add	objptr, ##40112
10e28     F2 1E 02 F1 | 	add	local01, objptr
10e2c     08 4E 85 F1 | 	sub	fp, #8
10e30     A7 12 02 FB | 	rdlong	arg01, fp
10e34     04 4E 05 F1 | 	add	fp, #4
10e38     A7 18 02 FB | 	rdlong	arg04, fp
10e3c     0A 18 66 F0 | 	shl	arg04, #10
10e40     0C 13 02 F1 | 	add	arg01, arg04
10e44     10 4E 85 F1 | 	sub	fp, #16
10e48     10 13 02 F1 | 	add	arg01, local02
10e4c     4E 00 00 FF 
10e50     B0 E4 85 F1 | 	sub	objptr, ##40112
10e54     34 C9 B0 FD | 	call	#_pspeek
10e58     0F FB 41 FC | 	wrbyte	result1, local01
10e5c                 | LR__1354
10e5c     14 4E 05 F1 | 	add	fp, #20
10e60     A7 20 02 FB | 	rdlong	local02, fp
10e64     01 20 06 F1 | 	add	local02, #1
10e68     A7 20 62 FC | 	wrlong	local02, fp
10e6c     14 4E 85 F1 | 	sub	fp, #20
10e70     02 00 00 FF 
10e74     00 20 56 F2 | 	cmps	local02, ##1024 wc
10e78     2C 00 90 3D |  if_ae	jmp	#LR__1355
10e7c     10 4E 05 F1 | 	add	fp, #16
10e80     A7 1E 02 FB | 	rdlong	local01, fp
10e84     0A 1E 66 F0 | 	shl	local01, #10
10e88     04 4E 05 F1 | 	add	fp, #4
10e8c     A7 20 02 FB | 	rdlong	local02, fp
10e90     10 1F 02 F1 | 	add	local01, local02
10e94     0C 4E 85 F1 | 	sub	fp, #12
10e98     A7 20 02 FB | 	rdlong	local02, fp
10e9c     08 4E 85 F1 | 	sub	fp, #8
10ea0     10 1F 5A F2 | 	cmps	local01, local02 wcz
10ea4     08 FF 9F ED |  if_be	jmp	#LR__1352
10ea8                 | LR__1355
10ea8                 | '    put #channel,,block(0),amount, r : getres(channel)=r
10ea8     04 4E 05 F1 | 	add	fp, #4
10eac     A7 12 02 FB | 	rdlong	arg01, fp
10eb0     4E 00 00 FF 
10eb4     B0 E4 05 F1 | 	add	objptr, ##40112
10eb8     F2 16 02 F6 | 	mov	arg03, objptr
10ebc     4E 00 00 FF 
10ec0     B0 E4 85 F1 | 	sub	objptr, ##40112
10ec4     04 4E 05 F1 | 	add	fp, #4
10ec8     A7 18 02 FB | 	rdlong	arg04, fp
10ecc     08 4E 85 F1 | 	sub	fp, #8
10ed0     00 14 06 F6 | 	mov	arg02, #0
10ed4     01 1A 06 F6 | 	mov	arg05, #1
10ed8     10 0A B1 FD | 	call	#__system___basic_put
10edc     18 4E 05 F1 | 	add	fp, #24
10ee0     A7 FA 61 FC | 	wrlong	result1, fp
10ee4     14 4E 85 F1 | 	sub	fp, #20
10ee8     A7 1E 02 FB | 	rdlong	local01, fp
10eec     02 1E 66 F0 | 	shl	local01, #2
10ef0     50 00 00 FF 
10ef4     C0 E4 05 F1 | 	add	objptr, ##41152
10ef8     F2 1E 02 F1 | 	add	local01, objptr
10efc     0F FB 61 FC | 	wrlong	result1, local01
10f00                 | '    if 1024*i+j>amount then exit loop
10f00     0C 4E 05 F1 | 	add	fp, #12
10f04     A7 20 02 FB | 	rdlong	local02, fp
10f08     0A 20 66 F0 | 	shl	local02, #10
10f0c     04 4E 05 F1 | 	add	fp, #4
10f10     A7 1E 02 FB | 	rdlong	local01, fp
10f14     0F 21 02 F1 | 	add	local02, local01
10f18     0C 4E 85 F1 | 	sub	fp, #12
10f1c     A7 22 02 FB | 	rdlong	local03, fp
10f20     08 4E 85 F1 | 	sub	fp, #8
10f24     11 21 5A F2 | 	cmps	local02, local03 wcz
10f28     50 00 00 FF 
10f2c     C0 E4 85 F1 | 	sub	objptr, ##41152
10f30     18 00 90 1D |  if_a	jmp	#LR__1356
10f34     10 4E 05 F1 | 	add	fp, #16
10f38     A7 20 02 FB | 	rdlong	local02, fp
10f3c     01 20 06 F1 | 	add	local02, #1
10f40     A7 20 62 FC | 	wrlong	local02, fp
10f44     10 4E 85 F1 | 	sub	fp, #16
10f48     58 FE 9F FD | 	jmp	#LR__1351
10f4c                 | LR__1356
10f4c                 | LR__1357
10f4c     A7 F0 03 F6 | 	mov	ptra, fp
10f50     B2 00 A0 FD | 	call	#popregs_
10f54                 | _do_put_ret
10f54     2D 00 64 FD | 	ret
10f58                 | 
10f58                 | '   
10f58                 | ' sub do_find_goto
10f58                 | _do_find_goto
10f58     03 4A 05 F6 | 	mov	COUNT_, #3
10f5c     A8 00 A0 FD | 	call	#pushregs_
10f60     24 F0 07 F1 | 	add	ptra, #36
10f64                 | _do_find_goto_enter
10f64     4A 00 00 FF 
10f68     80 E4 05 F1 | 	add	objptr, ##38016
10f6c     F2 1E 02 FB | 	rdlong	local01, objptr
10f70     0F 21 02 F6 | 	mov	local02, local01
10f74     01 20 66 F0 | 	shl	local02, #1
10f78     0F 21 02 F1 | 	add	local02, local01
10f7c     02 20 66 F0 | 	shl	local02, #2
10f80     03 00 00 FF 
10f84     04 E4 85 F1 | 	sub	objptr, ##1540
10f88     F2 20 02 F1 | 	add	local02, objptr
10f8c     04 20 06 F1 | 	add	local02, #4
10f90     10 21 02 FB | 	rdlong	local02, local02
10f94     A7 20 62 FC | 	wrlong	local02, fp
10f98     03 00 00 FF 
10f9c     08 E4 05 F1 | 	add	objptr, ##1544
10fa0     F2 22 02 FB | 	rdlong	local03, objptr
10fa4     4A 00 00 FF 
10fa8     84 E4 85 F1 | 	sub	objptr, ##38020
10fac     04 4E 05 F1 | 	add	fp, #4
10fb0     A7 22 62 FC | 	wrlong	local03, fp
10fb4     04 4E 85 F1 | 	sub	fp, #4
10fb8                 | ' 
10fb8                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
10fb8                 | '  ' print "find goto"                                                                     'print gotoline 
10fb8                 | ' gotoptr=programstart
10fb8                 | ' do
10fb8                 | LR__1360
10fb8     0C 4E 05 F1 | 	add	fp, #12
10fbc     A7 12 02 F6 | 	mov	arg01, fp
10fc0     08 4E 85 F1 | 	sub	fp, #8
10fc4     A7 14 02 FB | 	rdlong	arg02, fp
10fc8     04 4E 85 F1 | 	sub	fp, #4
10fcc     18 16 06 F6 | 	mov	arg03, #24
10fd0     0B 00 00 FF 
10fd4     CC E4 05 F1 | 	add	objptr, ##5836
10fd8     CC EE B0 FD | 	call	#_psram_spin2_read1
10fdc     0B 00 00 FF 
10fe0     CC E4 85 F1 | 	sub	objptr, ##5836
10fe4                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
10fe4                 | '   if gotoheader(0)<>$FFFFFFFF then
10fe4     0C 4E 05 F1 | 	add	fp, #12
10fe8     A7 22 02 FB | 	rdlong	local03, fp
10fec     0C 4E 85 F1 | 	sub	fp, #12
10ff0     FF FF 7F FF 
10ff4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
10ff8     24 00 90 AD |  if_e	jmp	#LR__1361
10ffc     04 4E 05 F1 | 	add	fp, #4
11000     A7 22 02 FB | 	rdlong	local03, fp
11004     04 4E 05 F1 | 	add	fp, #4
11008     A7 22 62 FC | 	wrlong	local03, fp
1100c     18 4E 05 F1 | 	add	fp, #24
11010     A7 22 02 FB | 	rdlong	local03, fp
11014     1C 4E 85 F1 | 	sub	fp, #28
11018     A7 22 62 FC | 	wrlong	local03, fp
1101c     04 4E 85 F1 | 	sub	fp, #4
11020                 | LR__1361
11020     20 4E 05 F1 | 	add	fp, #32
11024     A7 22 02 FB | 	rdlong	local03, fp
11028     20 4E 85 F1 | 	sub	fp, #32
1102c     FF FF 3F FF 
11030     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
11034     0C 4E 05 51 |  if_ne	add	fp, #12
11038     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1103c     0C 4E 85 51 |  if_ne	sub	fp, #12
11040     FF FF 7F 5F 
11044     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
11048     18 00 90 AD |  if_e	jmp	#LR__1362
1104c     0C 4E 05 F1 | 	add	fp, #12
11050     A7 22 02 FB | 	rdlong	local03, fp
11054     0C 4E 85 F1 | 	sub	fp, #12
11058     A7 20 02 FB | 	rdlong	local02, fp
1105c     10 23 0A F2 | 	cmp	local03, local02 wz
11060     54 FF 9F 5D |  if_ne	jmp	#LR__1360
11064                 | LR__1362
11064                 | ' 
11064                 | ' if gotoheader(0)=gotoline then
11064     0C 4E 05 F1 | 	add	fp, #12
11068     A7 22 02 FB | 	rdlong	local03, fp
1106c     0C 4E 85 F1 | 	sub	fp, #12
11070     A7 1E 02 FB | 	rdlong	local01, fp
11074     0F 23 0A F2 | 	cmp	local03, local01 wz
11078     D8 00 90 5D |  if_ne	jmp	#LR__1363
1107c     4A 00 00 FF 
11080     80 E4 05 F1 | 	add	objptr, ##38016
11084     F2 1E 02 FB | 	rdlong	local01, objptr
11088     0F 21 02 F6 | 	mov	local02, local01
1108c     01 20 66 F0 | 	shl	local02, #1
11090     0F 21 02 F1 | 	add	local02, local01
11094     02 20 66 F0 | 	shl	local02, #2
11098     03 00 00 FF 
1109c     04 E4 85 F1 | 	sub	objptr, ##1540
110a0     F2 20 02 F1 | 	add	local02, objptr
110a4     08 4E 05 F1 | 	add	fp, #8
110a8     A7 22 02 FB | 	rdlong	local03, fp
110ac     10 23 62 FC | 	wrlong	local03, local02
110b0     03 00 00 FF 
110b4     04 E4 05 F1 | 	add	objptr, ##1540
110b8     F2 1E 02 FB | 	rdlong	local01, objptr
110bc     0F 21 02 F6 | 	mov	local02, local01
110c0     01 20 66 F0 | 	shl	local02, #1
110c4     0F 21 02 F1 | 	add	local02, local01
110c8     02 20 66 F0 | 	shl	local02, #2
110cc     03 00 00 FF 
110d0     04 E4 85 F1 | 	sub	objptr, ##1540
110d4     F2 20 02 F1 | 	add	local02, objptr
110d8     08 20 06 F1 | 	add	local02, #8
110dc     10 9D 68 FC | 	wrlong	#78, local02
110e0     03 00 00 FF 
110e4     04 E4 05 F1 | 	add	objptr, ##1540
110e8     F2 20 02 FB | 	rdlong	local02, objptr
110ec     10 13 02 F6 | 	mov	arg01, local02
110f0     01 12 66 F0 | 	shl	arg01, #1
110f4     10 13 02 F1 | 	add	arg01, local02
110f8     02 12 66 F0 | 	shl	arg01, #2
110fc     03 00 00 FF 
11100     04 E4 85 F1 | 	sub	objptr, ##1540
11104     F2 12 02 F1 | 	add	arg01, objptr
11108     09 00 00 FF 
1110c     40 E4 05 F1 | 	add	objptr, ##4672
11110     F2 14 02 FB | 	rdlong	arg02, objptr
11114     02 22 06 F6 | 	mov	local03, #2
11118     10 23 02 F1 | 	add	local03, local02
1111c     0B 00 00 FF 
11120     58 E4 85 F1 | 	sub	objptr, ##5720
11124     F2 16 02 FB | 	rdlong	arg03, objptr
11128     0B 23 02 FD | 	qmul	local03, arg03
1112c     08 4E 85 F1 | 	sub	fp, #8
11130     39 00 00 FF 
11134     98 E5 85 F1 | 	sub	objptr, ##29592
11138     18 22 62 FD | 	getqx	local03
1113c     11 15 02 F1 | 	add	arg02, local03
11140     00 EE B0 FD | 	call	#_psram_spin2_write
11144     0B 00 00 FF 
11148     CC E4 85 F1 | 	sub	objptr, ##5836
1114c     A0 EE BF FD | 	call	#_do_fast_goto
11150     08 00 90 FD | 	jmp	#LR__1364
11154                 | LR__1363
11154     26 12 06 F6 | 	mov	arg01, #38
11158     F4 C3 B0 FD | 	call	#_printerror
1115c                 | LR__1364
1115c     A7 F0 03 F6 | 	mov	ptra, fp
11160     B2 00 A0 FD | 	call	#popregs_
11164                 | _do_find_goto_ret
11164     2D 00 64 FD | 	ret
11168                 | 
11168                 | ' 
11168                 | ' sub do_slow_goto
11168                 | _do_slow_goto
11168     02 4A 05 F6 | 	mov	COUNT_, #2
1116c     A8 00 A0 FD | 	call	#pushregs_
11170     30 F0 07 F1 | 	add	ptra, #48
11174     E0 A8 BF FD | 	call	#_pop
11178     FF 1E 02 F6 | 	mov	local01, result3
1117c     24 4E 05 F1 | 	add	fp, #36
11180     A7 FA 61 FC | 	wrlong	result1, fp
11184     04 4E 05 F1 | 	add	fp, #4
11188     A7 FC 61 FC | 	wrlong	result2, fp
1118c     04 4E 05 F1 | 	add	fp, #4
11190     A7 1E 62 FC | 	wrlong	local01, fp
11194     08 4E 85 F1 | 	sub	fp, #8
11198     A7 12 02 F6 | 	mov	arg01, fp
1119c     24 4E 85 F1 | 	sub	fp, #36
111a0     50 4A B0 FD | 	call	#_converttoint
111a4     A7 FA 61 FC | 	wrlong	result1, fp
111a8     4A 00 00 FF 
111ac     84 E4 05 F1 | 	add	objptr, ##38020
111b0     F2 20 02 FB | 	rdlong	local02, objptr
111b4     4A 00 00 FF 
111b8     84 E4 85 F1 | 	sub	objptr, ##38020
111bc     04 4E 05 F1 | 	add	fp, #4
111c0     A7 20 62 FC | 	wrlong	local02, fp
111c4     04 4E 85 F1 | 	sub	fp, #4
111c8                 | ' 
111c8                 | ' t1=pop() : gotoline=converttoint(t1)
111c8                 | ' gotoptr=programstart
111c8                 | ' do
111c8                 | LR__1370
111c8     0C 4E 05 F1 | 	add	fp, #12
111cc     A7 12 02 F6 | 	mov	arg01, fp
111d0     08 4E 85 F1 | 	sub	fp, #8
111d4     A7 14 02 FB | 	rdlong	arg02, fp
111d8     04 4E 85 F1 | 	sub	fp, #4
111dc     18 16 06 F6 | 	mov	arg03, #24
111e0     0B 00 00 FF 
111e4     CC E4 05 F1 | 	add	objptr, ##5836
111e8     BC EC B0 FD | 	call	#_psram_spin2_read1
111ec     0B 00 00 FF 
111f0     CC E4 85 F1 | 	sub	objptr, ##5836
111f4                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
111f4                 | '   if gotoheader(0)<>$FFFFFFFF then
111f4     0C 4E 05 F1 | 	add	fp, #12
111f8     A7 20 02 FB | 	rdlong	local02, fp
111fc     0C 4E 85 F1 | 	sub	fp, #12
11200     FF FF 7F FF 
11204     FF 21 0E F2 | 	cmp	local02, ##-1 wz
11208     24 00 90 AD |  if_e	jmp	#LR__1371
1120c     04 4E 05 F1 | 	add	fp, #4
11210     A7 20 02 FB | 	rdlong	local02, fp
11214     04 4E 05 F1 | 	add	fp, #4
11218     A7 20 62 FC | 	wrlong	local02, fp
1121c     18 4E 05 F1 | 	add	fp, #24
11220     A7 20 02 FB | 	rdlong	local02, fp
11224     1C 4E 85 F1 | 	sub	fp, #28
11228     A7 20 62 FC | 	wrlong	local02, fp
1122c     04 4E 85 F1 | 	sub	fp, #4
11230                 | LR__1371
11230     20 4E 05 F1 | 	add	fp, #32
11234     A7 20 02 FB | 	rdlong	local02, fp
11238     20 4E 85 F1 | 	sub	fp, #32
1123c     FF FF 3F FF 
11240     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
11244     0C 4E 05 51 |  if_ne	add	fp, #12
11248     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1124c     0C 4E 85 51 |  if_ne	sub	fp, #12
11250     FF FF 7F 5F 
11254     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
11258     18 00 90 AD |  if_e	jmp	#LR__1372
1125c     0C 4E 05 F1 | 	add	fp, #12
11260     A7 20 02 FB | 	rdlong	local02, fp
11264     0C 4E 85 F1 | 	sub	fp, #12
11268     A7 16 02 FB | 	rdlong	arg03, fp
1126c     0B 21 0A F2 | 	cmp	local02, arg03 wz
11270     54 FF 9F 5D |  if_ne	jmp	#LR__1370
11274                 | LR__1372
11274                 | ' if gotoheader(0)=gotoline then  
11274     0C 4E 05 F1 | 	add	fp, #12
11278     A7 20 02 FB | 	rdlong	local02, fp
1127c     0C 4E 85 F1 | 	sub	fp, #12
11280     A7 1E 02 FB | 	rdlong	local01, fp
11284     0F 21 0A F2 | 	cmp	local02, local01 wz
11288     60 00 90 5D |  if_ne	jmp	#LR__1373
1128c     08 4E 05 F1 | 	add	fp, #8
11290     A7 20 02 FB | 	rdlong	local02, fp
11294     08 4E 85 F1 | 	sub	fp, #8
11298     50 00 00 FF 
1129c     B4 E4 05 F1 | 	add	objptr, ##41140
112a0     F2 20 62 FC | 	wrlong	local02, objptr
112a4     06 00 00 FF 
112a8     38 E4 85 F1 | 	sub	objptr, ##3128
112ac     F2 20 02 FB | 	rdlong	local02, objptr
112b0     01 20 86 F1 | 	sub	local02, #1
112b4     04 E4 05 F1 | 	add	objptr, #4
112b8     F2 20 62 FC | 	wrlong	local02, objptr
112bc                 | '    runptr=oldgotoptr
112bc                 | '    lineptr_e=lineptr-1
112bc                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
112bc     06 00 00 FF 
112c0     80 E4 05 F1 | 	add	objptr, ##3200
112c4     F2 20 02 FB | 	rdlong	local02, objptr
112c8     50 00 00 FF 
112cc     00 E5 85 F1 | 	sub	objptr, ##41216
112d0     FF FF 3F FF 
112d4     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
112d8     50 00 00 AF 
112dc     00 E5 05 A1 |  if_e	add	objptr, ##41216
112e0     F2 00 68 AC |  if_e	wrlong	#0, objptr
112e4     50 00 00 AF 
112e8     00 E5 85 A1 |  if_e	sub	objptr, ##41216
112ec                 | LR__1373
112ec     A7 F0 03 F6 | 	mov	ptra, fp
112f0     B2 00 A0 FD | 	call	#popregs_
112f4                 | _do_slow_goto_ret
112f4     2D 00 64 FD | 	ret
112f8                 | 
112f8                 | ' 
112f8                 | ' '----------------------- Error processing
112f8                 | ' 
112f8                 | ' sub do_error
112f8                 | _do_error
112f8     01 4A 05 F6 | 	mov	COUNT_, #1
112fc     A8 00 A0 FD | 	call	#pushregs_
11300     4A 00 00 FF 
11304     80 E4 05 F1 | 	add	objptr, ##38016
11308     F2 18 02 FB | 	rdlong	arg04, objptr
1130c     0C 17 02 F6 | 	mov	arg03, arg04
11310     01 16 66 F0 | 	shl	arg03, #1
11314     0C 17 02 F1 | 	add	arg03, arg04
11318     02 16 66 F0 | 	shl	arg03, #2
1131c     03 00 00 FF 
11320     04 E4 85 F1 | 	sub	objptr, ##1540
11324     F2 16 02 F1 | 	add	arg03, objptr
11328     0B 1F 02 FB | 	rdlong	local01, arg03
1132c                 | ' r=compiledline(lineptr_e).result.uresult
1132c                 | ' print "Error ";r;": ";errors$(r)
1132c     00 12 06 F6 | 	mov	arg01, #0
11330     47 00 00 FF 
11334     7C E4 85 F1 | 	sub	objptr, ##36476
11338     EC 51 B1 FD | 	call	#__system___getiolock_0540
1133c     FD 12 02 F6 | 	mov	arg01, result1
11340     A4 F7 B0 FD | 	call	#__system___lockmem
11344     85 01 00 FF 
11348     B8 14 06 F6 | 	mov	arg02, ##@LR__5469
1134c     00 12 06 F6 | 	mov	arg01, #0
11350     00 16 06 F6 | 	mov	arg03, #0
11354     84 04 B1 FD | 	call	#__system___basic_print_string
11358     00 12 06 F6 | 	mov	arg01, #0
1135c     0F 15 02 F6 | 	mov	arg02, local01
11360     00 16 06 F6 | 	mov	arg03, #0
11364     0A 18 06 F6 | 	mov	arg04, #10
11368     F4 04 B1 FD | 	call	#__system___basic_print_unsigned
1136c     85 01 00 FF 
11370     BF 14 06 F6 | 	mov	arg02, ##@LR__5470
11374     00 12 06 F6 | 	mov	arg01, #0
11378     00 16 06 F6 | 	mov	arg03, #0
1137c     5C 04 B1 FD | 	call	#__system___basic_print_string
11380     02 1E 66 F0 | 	shl	local01, #2
11384     45 00 00 FF 
11388     7C E4 05 F1 | 	add	objptr, ##35452
1138c     F2 1E 02 F1 | 	add	local01, objptr
11390     0F 15 02 FB | 	rdlong	arg02, local01
11394     00 12 06 F6 | 	mov	arg01, #0
11398     00 16 06 F6 | 	mov	arg03, #0
1139c     45 00 00 FF 
113a0     7C E4 85 F1 | 	sub	objptr, ##35452
113a4     34 04 B1 FD | 	call	#__system___basic_print_string
113a8     00 12 06 F6 | 	mov	arg01, #0
113ac     0A 14 06 F6 | 	mov	arg02, #10
113b0     00 16 06 F6 | 	mov	arg03, #0
113b4     CC 03 B1 FD | 	call	#__system___basic_print_char
113b8     00 12 06 F6 | 	mov	arg01, #0
113bc     68 51 B1 FD | 	call	#__system___getiolock_0540
113c0     FD 00 68 FC | 	wrlong	#0, result1
113c4     A7 F0 03 F6 | 	mov	ptra, fp
113c8     B2 00 A0 FD | 	call	#popregs_
113cc                 | _do_error_ret
113cc     2D 00 64 FD | 	ret
113d0                 | 
113d0                 | ' 
113d0                 | ' 
113d0                 | ' '------------------ Assigning to a variable  
113d0                 | ' 
113d0                 | ' function  convertstring(psaddr as ulong) as string
113d0                 | _convertstring
113d0     04 4A 05 F6 | 	mov	COUNT_, #4
113d4     A8 00 A0 FD | 	call	#pushregs_
113d8     09 1F 02 F6 | 	mov	local01, arg01
113dc     04 C4 B0 FD | 	call	#_pslpeek
113e0     FD 20 02 F6 | 	mov	local02, result1
113e4     85 01 00 FF 
113e8     C2 22 06 F6 | 	mov	local03, ##@LR__5471
113ec                 | ' 'print "in convertstring: psaddr=";psaddr
113ec                 | ' l=pslpeek(psaddr)
113ec                 | ' 'print "in convertstring: len=";l
113ec                 | ' s="" 
113ec                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
113ec     01 24 06 F6 | 	mov	local04, #1
113f0     01 20 06 F1 | 	add	local02, #1
113f4                 | LR__1380
113f4     10 25 52 F2 | 	cmps	local04, local02 wc
113f8     30 00 90 3D |  if_ae	jmp	#LR__1381
113fc     0F 13 02 F6 | 	mov	arg01, local01
11400     03 12 06 F1 | 	add	arg01, #3
11404     12 13 02 F1 | 	add	arg01, local04
11408     80 C3 B0 FD | 	call	#_pspeek
1140c     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
11410     14 19 B1 FD | 	call	#__system__Chr_S
11414     FD 14 02 F6 | 	mov	arg02, result1
11418     11 13 02 F6 | 	mov	arg01, local03
1141c     24 F7 B0 FD | 	call	#__system___string_concat
11420     FD 22 02 F6 | 	mov	local03, result1
11424     01 24 06 F1 | 	add	local04, #1
11428     C8 FF 9F FD | 	jmp	#LR__1380
1142c                 | LR__1381
1142c                 | ' 'print "in convertstring: str=";s
1142c                 | ' return s
1142c     11 FB 01 F6 | 	mov	result1, local03
11430     A7 F0 03 F6 | 	mov	ptra, fp
11434     B2 00 A0 FD | 	call	#popregs_
11438                 | _convertstring_ret
11438     2D 00 64 FD | 	ret
1143c                 | 
1143c                 | ' 
1143c                 | ' sub do_assign
1143c                 | _do_assign
1143c     05 4A 05 F6 | 	mov	COUNT_, #5
11440     A8 00 A0 FD | 	call	#pushregs_
11444     44 F0 07 F1 | 	add	ptra, #68
11448     4A 00 00 FF 
1144c     80 E4 05 F1 | 	add	objptr, ##38016
11450     F2 16 02 FB | 	rdlong	arg03, objptr
11454     0B 15 02 F6 | 	mov	arg02, arg03
11458     01 14 66 F0 | 	shl	arg02, #1
1145c     0B 15 02 F1 | 	add	arg02, arg03
11460     02 14 66 F0 | 	shl	arg02, #2
11464     03 00 00 FF 
11468     04 E4 85 F1 | 	sub	objptr, ##1540
1146c     F2 14 02 F1 | 	add	arg02, objptr
11470     0A 15 02 FB | 	rdlong	arg02, arg02
11474     18 4E 05 F1 | 	add	fp, #24
11478     A7 14 62 FC | 	wrlong	arg02, fp
1147c                 | ' 
1147c                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
1147c                 | ' if variables(varnum).vartype<array_no_type then 
1147c     18 4E 85 F1 | 	sub	fp, #24
11480     04 14 66 F0 | 	shl	arg02, #4
11484     32 00 00 FF 
11488     84 E4 85 F1 | 	sub	objptr, ##25732
1148c     F2 14 02 F1 | 	add	arg02, objptr
11490     0C 14 06 F1 | 	add	arg02, #12
11494     0A 17 02 FB | 	rdlong	arg03, arg02
11498     00 17 16 F2 | 	cmp	arg03, #256 wc
1149c     14 00 00 FF 
114a0     F8 E5 85 F1 | 	sub	objptr, ##10744
114a4     18 01 90 3D |  if_ae	jmp	#LR__1390
114a8     AC A5 BF FD | 	call	#_pop
114ac     A7 FA 61 FC | 	wrlong	result1, fp
114b0     04 4E 05 F1 | 	add	fp, #4
114b4     A7 FC 61 FC | 	wrlong	result2, fp
114b8     04 4E 05 F1 | 	add	fp, #4
114bc     A7 FE 61 FC | 	wrlong	result3, fp
114c0     08 4E 85 F1 | 	sub	fp, #8
114c4     A7 16 02 FB | 	rdlong	arg03, fp
114c8     04 4E 05 F1 | 	add	fp, #4
114cc     A7 14 02 FB | 	rdlong	arg02, fp
114d0     14 4E 05 F1 | 	add	fp, #20
114d4     A7 12 02 FB | 	rdlong	arg01, fp
114d8     04 12 66 F0 | 	shl	arg01, #4
114dc     14 00 00 FF 
114e0     F8 E5 05 F1 | 	add	objptr, ##10744
114e4     F2 12 02 F1 | 	add	arg01, objptr
114e8     04 12 06 F1 | 	add	arg01, #4
114ec     09 17 62 FC | 	wrlong	arg03, arg01
114f0     A7 16 02 FB | 	rdlong	arg03, fp
114f4     04 16 66 F0 | 	shl	arg03, #4
114f8     F2 16 02 F1 | 	add	arg03, objptr
114fc     08 16 06 F1 | 	add	arg03, #8
11500     0B 15 62 FC | 	wrlong	arg02, arg03
11504     A7 16 02 FB | 	rdlong	arg03, fp
11508     04 16 66 F0 | 	shl	arg03, #4
1150c     F2 16 02 F1 | 	add	arg03, objptr
11510     10 4E 85 F1 | 	sub	fp, #16
11514     A7 14 02 FB | 	rdlong	arg02, fp
11518     0C 16 06 F1 | 	add	arg03, #12
1151c     0B 15 62 FC | 	wrlong	arg02, arg03
11520                 | '   t1=pop() 
11520                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
11520                 | '   if variables(varnum).vartype<>result_string2 then return
11520     10 4E 05 F1 | 	add	fp, #16
11524     A7 16 02 FB | 	rdlong	arg03, fp
11528     18 4E 85 F1 | 	sub	fp, #24
1152c     04 16 66 F0 | 	shl	arg03, #4
11530     F2 16 02 F1 | 	add	arg03, objptr
11534     0C 16 06 F1 | 	add	arg03, #12
11538     0B 17 02 FB | 	rdlong	arg03, arg03
1153c     2B 16 0E F2 | 	cmp	arg03, #43 wz
11540     14 00 00 FF 
11544     F8 E5 85 F1 | 	sub	objptr, ##10744
11548     E4 04 90 5D |  if_ne	jmp	#LR__1413
1154c     18 4E 05 F1 | 	add	fp, #24
11550     A7 16 02 FB | 	rdlong	arg03, fp
11554     0B 1F 02 F6 | 	mov	local01, arg03
11558     04 1E 66 F0 | 	shl	local01, #4
1155c     14 00 00 FF 
11560     F8 E5 05 F1 | 	add	objptr, ##10744
11564     F2 1E 02 F1 | 	add	local01, objptr
11568     18 4E 85 F1 | 	sub	fp, #24
1156c     04 16 66 F0 | 	shl	arg03, #4
11570     F2 16 02 F1 | 	add	arg03, objptr
11574     04 16 06 F1 | 	add	arg03, #4
11578     0B 13 02 FB | 	rdlong	arg01, arg03
1157c     14 00 00 FF 
11580     F8 E5 85 F1 | 	sub	objptr, ##10744
11584     48 FE BF FD | 	call	#_convertstring
11588     04 1E 06 F1 | 	add	local01, #4
1158c     0F FB 61 FC | 	wrlong	result1, local01
11590     18 4E 05 F1 | 	add	fp, #24
11594     A7 1E 02 FB | 	rdlong	local01, fp
11598     18 4E 85 F1 | 	sub	fp, #24
1159c     04 1E 66 F0 | 	shl	local01, #4
115a0     14 00 00 FF 
115a4     F8 E5 05 F1 | 	add	objptr, ##10744
115a8     F2 1E 02 F1 | 	add	local01, objptr
115ac     0C 1E 06 F1 | 	add	local01, #12
115b0     0F 3F 68 FC | 	wrlong	#31, local01
115b4                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
115b4                 | '   variables(varnum).vartype=result_string
115b4                 | '   return
115b4     14 00 00 FF 
115b8     F8 E5 85 F1 | 	sub	objptr, ##10744
115bc     70 04 90 FD | 	jmp	#LR__1413
115c0                 | LR__1390
115c0                 | ' for i=0 to 2 : arrid(i)=0 : next i
115c0     1C 4E 05 F1 | 	add	fp, #28
115c4     A7 00 68 FC | 	wrlong	#0, fp
115c8     97 16 48 FB | 	callpa	#(@LR__1392-@LR__1391)>>2,fcache_load_ptr_
115cc                 | LR__1391
115cc     A7 1E 02 FB | 	rdlong	local01, fp
115d0     02 1E 66 F0 | 	shl	local01, #2
115d4     18 4E 05 F1 | 	add	fp, #24
115d8     A7 1E 02 F1 | 	add	local01, fp
115dc     0F 01 68 FC | 	wrlong	#0, local01
115e0     18 4E 85 F1 | 	sub	fp, #24
115e4     A7 1E 02 FB | 	rdlong	local01, fp
115e8     01 1E 06 F1 | 	add	local01, #1
115ec     A7 1E 62 FC | 	wrlong	local01, fp
115f0     03 1E 16 F2 | 	cmp	local01, #3 wc
115f4     D4 FF 9F CD |  if_b	jmp	#LR__1391
115f8                 | LR__1392
115f8     4A 00 00 FF 
115fc     80 E4 05 F1 | 	add	objptr, ##38016
11600     F2 16 02 FB | 	rdlong	arg03, objptr
11604     0B 1F 02 F6 | 	mov	local01, arg03
11608     01 1E 66 F0 | 	shl	local01, #1
1160c     0B 1F 02 F1 | 	add	local01, arg03
11610     02 1E 66 F0 | 	shl	local01, #2
11614     03 00 00 FF 
11618     04 E4 85 F1 | 	sub	objptr, ##1540
1161c     F2 1E 02 F1 | 	add	local01, objptr
11620     04 1E 06 F1 | 	add	local01, #4
11624     0F 21 02 FB | 	rdlong	local02, local01
11628     04 4E 05 F1 | 	add	fp, #4
1162c     A7 20 62 FC | 	wrlong	local02, fp
11630     20 4E 85 F1 | 	sub	fp, #32
11634     47 00 00 FF 
11638     7C E4 85 F1 | 	sub	objptr, ##36476
1163c     18 A4 BF FD | 	call	#_pop
11640     A7 FA 61 FC | 	wrlong	result1, fp
11644     04 4E 05 F1 | 	add	fp, #4
11648     A7 FC 61 FC | 	wrlong	result2, fp
1164c     04 4E 05 F1 | 	add	fp, #4
11650     A7 FE 61 FC | 	wrlong	result3, fp
11654                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
11654                 | ' t1=pop() ' var value
11654                 | ' if numpar>0 then
11654     18 4E 05 F1 | 	add	fp, #24
11658     A7 22 02 FB | 	rdlong	local03, fp
1165c     20 4E 85 F1 | 	sub	fp, #32
11660     01 22 16 F2 | 	cmp	local03, #1 wc
11664     78 00 90 CD |  if_b	jmp	#LR__1395
11668                 | '   for i=numpar to 1 step -1
11668     20 4E 05 F1 | 	add	fp, #32
1166c     A7 24 0A FB | 	rdlong	local04, fp wz
11670     04 4E 85 F1 | 	sub	fp, #4
11674     A7 24 62 FC | 	wrlong	local04, fp
11678     1C 4E 85 F1 | 	sub	fp, #28
1167c     60 00 90 AD |  if_e	jmp	#LR__1394
11680                 | LR__1393
11680     D4 A3 BF FD | 	call	#_pop
11684     0C 4E 05 F1 | 	add	fp, #12
11688     A7 FA 61 FC | 	wrlong	result1, fp
1168c     04 4E 05 F1 | 	add	fp, #4
11690     A7 FC 61 FC | 	wrlong	result2, fp
11694     04 4E 05 F1 | 	add	fp, #4
11698     A7 FE 61 FC | 	wrlong	result3, fp
1169c     08 4E 05 F1 | 	add	fp, #8
116a0     A7 22 02 FB | 	rdlong	local03, fp
116a4     01 22 86 F1 | 	sub	local03, #1
116a8     02 22 66 F0 | 	shl	local03, #2
116ac     18 4E 05 F1 | 	add	fp, #24
116b0     A7 22 02 F1 | 	add	local03, fp
116b4     28 4E 85 F1 | 	sub	fp, #40
116b8     A7 12 02 F6 | 	mov	arg01, fp
116bc     0C 4E 85 F1 | 	sub	fp, #12
116c0     30 45 B0 FD | 	call	#_converttoint
116c4     11 FB 61 FC | 	wrlong	result1, local03
116c8     1C 4E 05 F1 | 	add	fp, #28
116cc     A7 24 02 FB | 	rdlong	local04, fp
116d0     01 24 8E F1 | 	sub	local04, #1 wz
116d4     A7 24 62 FC | 	wrlong	local04, fp
116d8     1C 4E 85 F1 | 	sub	fp, #28
116dc     A0 FF 9F 5D |  if_ne	jmp	#LR__1393
116e0                 | LR__1394
116e0                 | LR__1395
116e0     18 4E 05 F1 | 	add	fp, #24
116e4     A7 1E 02 FB | 	rdlong	local01, fp
116e8     04 1E 66 F0 | 	shl	local01, #4
116ec     14 00 00 FF 
116f0     F8 E5 05 F1 | 	add	objptr, ##10744
116f4     F2 1E 02 F1 | 	add	local01, objptr
116f8     04 1E 06 F1 | 	add	local01, #4
116fc     0F 13 02 FB | 	rdlong	arg01, local01
11700     0C 4E 05 F1 | 	add	fp, #12
11704     A7 12 62 FC | 	wrlong	arg01, fp
11708     24 4E 85 F1 | 	sub	fp, #36
1170c     14 00 00 FF 
11710     F8 E5 85 F1 | 	sub	objptr, ##10744
11714     CC C0 B0 FD | 	call	#_pslpeek
11718     FD 24 32 F9 | 	getword	local04, result1, #0
1171c     28 4E 05 F1 | 	add	fp, #40
11720     A7 24 62 FC | 	wrlong	local04, fp
11724     04 4E 85 F1 | 	sub	fp, #4
11728     A7 12 02 FB | 	rdlong	arg01, fp
1172c     24 4E 85 F1 | 	sub	fp, #36
11730     02 12 06 F1 | 	add	arg01, #2
11734     54 C0 B0 FD | 	call	#_pspeek
11738     FD FA E1 F8 | 	getbyte	result1, result1, #0
1173c     2C 4E 05 F1 | 	add	fp, #44
11740     A7 FA 61 FC | 	wrlong	result1, fp
11744                 | ' esize=pspeek(arrptr+2)
11744                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
11744     08 4E 85 F1 | 	sub	fp, #8
11748     A7 12 02 FB | 	rdlong	arg01, fp
1174c     24 4E 85 F1 | 	sub	fp, #36
11750     04 12 06 F1 | 	add	arg01, #4
11754     8C C0 B0 FD | 	call	#_pslpeek
11758     FD 24 02 F6 | 	mov	local04, result1
1175c     34 4E 05 F1 | 	add	fp, #52
11760     A7 1E 02 FB | 	rdlong	local01, fp
11764     34 4E 85 F1 | 	sub	fp, #52
11768     12 1F 12 F2 | 	cmp	local01, local04 wc
1176c     54 00 90 3D |  if_ae	jmp	#LR__1396
11770     24 4E 05 F1 | 	add	fp, #36
11774     A7 12 02 FB | 	rdlong	arg01, fp
11778     24 4E 85 F1 | 	sub	fp, #36
1177c     08 12 06 F1 | 	add	arg01, #8
11780     60 C0 B0 FD | 	call	#_pslpeek
11784     FD 1E 02 F6 | 	mov	local01, result1
11788     38 4E 05 F1 | 	add	fp, #56
1178c     A7 24 02 FB | 	rdlong	local04, fp
11790     38 4E 85 F1 | 	sub	fp, #56
11794     0F 25 12 F2 | 	cmp	local04, local01 wc
11798     28 00 90 3D |  if_ae	jmp	#LR__1396
1179c     24 4E 05 F1 | 	add	fp, #36
117a0     A7 12 02 FB | 	rdlong	arg01, fp
117a4     24 4E 85 F1 | 	sub	fp, #36
117a8     0C 12 06 F1 | 	add	arg01, #12
117ac     34 C0 B0 FD | 	call	#_pslpeek
117b0     3C 4E 05 F1 | 	add	fp, #60
117b4     A7 24 02 FB | 	rdlong	local04, fp
117b8     3C 4E 85 F1 | 	sub	fp, #60
117bc     FD 24 12 F2 | 	cmp	local04, result1 wc
117c0     0C 00 90 CD |  if_b	jmp	#LR__1397
117c4                 | LR__1396
117c4     31 12 06 F6 | 	mov	arg01, #49
117c8     84 BD B0 FD | 	call	#_printerror
117cc     60 02 90 FD | 	jmp	#LR__1413
117d0                 | LR__1397
117d0     24 4E 05 F1 | 	add	fp, #36
117d4     A7 12 02 FB | 	rdlong	arg01, fp
117d8     09 25 02 F6 | 	mov	local04, arg01
117dc     10 24 06 F1 | 	add	local04, #16
117e0     24 4E 85 F1 | 	sub	fp, #36
117e4     04 12 06 F1 | 	add	arg01, #4
117e8     F8 BF B0 FD | 	call	#_pslpeek
117ec     FD 1E 02 F6 | 	mov	local01, result1
117f0     38 4E 05 F1 | 	add	fp, #56
117f4     A7 20 02 FB | 	rdlong	local02, fp
117f8     10 1F 02 FD | 	qmul	local01, local02
117fc     04 4E 85 F1 | 	sub	fp, #4
11800     A7 22 02 FB | 	rdlong	local03, fp
11804     10 4E 85 F1 | 	sub	fp, #16
11808     A7 12 02 FB | 	rdlong	arg01, fp
1180c     24 4E 85 F1 | 	sub	fp, #36
11810     08 12 06 F1 | 	add	arg01, #8
11814     18 20 62 FD | 	getqx	local02
11818     10 23 02 F1 | 	add	local03, local02
1181c     C4 BF B0 FD | 	call	#_pslpeek
11820     FD 20 02 F6 | 	mov	local02, result1
11824     24 4E 05 F1 | 	add	fp, #36
11828     A7 12 02 FB | 	rdlong	arg01, fp
1182c     24 4E 85 F1 | 	sub	fp, #36
11830     04 12 06 F1 | 	add	arg01, #4
11834     AC BF B0 FD | 	call	#_pslpeek
11838     FD 20 02 FD | 	qmul	local02, result1
1183c     3C 4E 05 F1 | 	add	fp, #60
11840     A7 20 02 FB | 	rdlong	local02, fp
11844     18 1E 62 FD | 	getqx	local01
11848     10 1F 02 FD | 	qmul	local01, local02
1184c     10 4E 85 F1 | 	sub	fp, #16
11850     A7 20 02 FB | 	rdlong	local02, fp
11854     18 1E 62 FD | 	getqx	local01
11858     0F 23 02 F1 | 	add	local03, local01
1185c     11 21 02 FD | 	qmul	local02, local03
11860     04 4E 05 F1 | 	add	fp, #4
11864                 | ' 
11864                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
11864                 | ' select case arrtype
11864     18 22 62 FD | 	getqx	local03
11868     11 25 02 F1 | 	add	local04, local03
1186c     A7 24 62 FC | 	wrlong	local04, fp
11870     08 4E 85 F1 | 	sub	fp, #8
11874     A7 26 02 FB | 	rdlong	local05, fp
11878     28 4E 85 F1 | 	sub	fp, #40
1187c     00 27 86 F1 | 	sub	local05, #256
11880     0C 26 26 F3 | 	fle	local05, #12
11884     30 26 62 FD | 	jmprel	local05
11888                 | LR__1398
11888     30 00 90 FD | 	jmp	#LR__1399
1188c     58 00 90 FD | 	jmp	#LR__1400
11890     6C 00 90 FD | 	jmp	#LR__1401
11894     80 00 90 FD | 	jmp	#LR__1402
11898     B0 00 90 FD | 	jmp	#LR__1403
1189c     E0 00 90 FD | 	jmp	#LR__1404
118a0     F4 00 90 FD | 	jmp	#LR__1405
118a4     08 01 90 FD | 	jmp	#LR__1406
118a8     1C 01 90 FD | 	jmp	#LR__1407
118ac     30 01 90 FD | 	jmp	#LR__1408
118b0     44 01 90 FD | 	jmp	#LR__1409
118b4     58 01 90 FD | 	jmp	#LR__1410
118b8     6C 01 90 FD | 	jmp	#LR__1411
118bc                 | LR__1399
118bc     A7 12 02 F6 | 	mov	arg01, fp
118c0     30 4E 05 F1 | 	add	fp, #48
118c4     A7 14 02 FB | 	rdlong	arg02, fp
118c8     30 4E 85 F1 | 	sub	fp, #48
118cc     0C 16 06 F6 | 	mov	arg03, #12
118d0     0B 00 00 FF 
118d4     CC E4 05 F1 | 	add	objptr, ##5836
118d8     68 E6 B0 FD | 	call	#_psram_spin2_write
118dc     0B 00 00 FF 
118e0     CC E4 85 F1 | 	sub	objptr, ##5836
118e4     48 01 90 FD | 	jmp	#LR__1412
118e8                 | LR__1400
118e8     30 4E 05 F1 | 	add	fp, #48
118ec     A7 12 02 FB | 	rdlong	arg01, fp
118f0     30 4E 85 F1 | 	sub	fp, #48
118f4     A7 14 02 FB | 	rdlong	arg02, fp
118f8     48 BE B0 FD | 	call	#_pspoke
118fc     30 01 90 FD | 	jmp	#LR__1412
11900                 | LR__1401
11900     30 4E 05 F1 | 	add	fp, #48
11904     A7 12 02 FB | 	rdlong	arg01, fp
11908     30 4E 85 F1 | 	sub	fp, #48
1190c     A7 14 02 FB | 	rdlong	arg02, fp
11910     30 BE B0 FD | 	call	#_pspoke
11914     18 01 90 FD | 	jmp	#LR__1412
11918                 | LR__1402
11918     30 4E 05 F1 | 	add	fp, #48
1191c     A7 12 02 FB | 	rdlong	arg01, fp
11920     30 4E 85 F1 | 	sub	fp, #48
11924     A7 14 02 FB | 	rdlong	arg02, fp
11928     18 BE B0 FD | 	call	#_pspoke
1192c     30 4E 05 F1 | 	add	fp, #48
11930     A7 12 02 FB | 	rdlong	arg01, fp
11934     30 4E 85 F1 | 	sub	fp, #48
11938     01 12 06 F1 | 	add	arg01, #1
1193c     A7 14 02 FB | 	rdlong	arg02, fp
11940     08 14 46 F0 | 	shr	arg02, #8
11944     FC BD B0 FD | 	call	#_pspoke
11948     E4 00 90 FD | 	jmp	#LR__1412
1194c                 | LR__1403
1194c     30 4E 05 F1 | 	add	fp, #48
11950     A7 12 02 FB | 	rdlong	arg01, fp
11954     30 4E 85 F1 | 	sub	fp, #48
11958     A7 14 02 FB | 	rdlong	arg02, fp
1195c     E4 BD B0 FD | 	call	#_pspoke
11960     30 4E 05 F1 | 	add	fp, #48
11964     A7 12 02 FB | 	rdlong	arg01, fp
11968     30 4E 85 F1 | 	sub	fp, #48
1196c     01 12 06 F1 | 	add	arg01, #1
11970     A7 14 02 FB | 	rdlong	arg02, fp
11974     08 14 46 F0 | 	shr	arg02, #8
11978     C8 BD B0 FD | 	call	#_pspoke
1197c     B0 00 90 FD | 	jmp	#LR__1412
11980                 | LR__1404
11980     30 4E 05 F1 | 	add	fp, #48
11984     A7 12 02 FB | 	rdlong	arg01, fp
11988     30 4E 85 F1 | 	sub	fp, #48
1198c     A7 14 02 FB | 	rdlong	arg02, fp
11990     20 BD B0 FD | 	call	#_pslpoke
11994     98 00 90 FD | 	jmp	#LR__1412
11998                 | LR__1405
11998     30 4E 05 F1 | 	add	fp, #48
1199c     A7 12 02 FB | 	rdlong	arg01, fp
119a0     30 4E 85 F1 | 	sub	fp, #48
119a4     A7 14 02 FB | 	rdlong	arg02, fp
119a8     08 BD B0 FD | 	call	#_pslpoke
119ac     80 00 90 FD | 	jmp	#LR__1412
119b0                 | LR__1406
119b0     30 4E 05 F1 | 	add	fp, #48
119b4     A7 12 02 FB | 	rdlong	arg01, fp
119b8     30 4E 85 F1 | 	sub	fp, #48
119bc     A7 14 02 FB | 	rdlong	arg02, fp
119c0     F0 BC B0 FD | 	call	#_pslpoke
119c4     68 00 90 FD | 	jmp	#LR__1412
119c8                 | LR__1407
119c8     30 4E 05 F1 | 	add	fp, #48
119cc     A7 12 02 FB | 	rdlong	arg01, fp
119d0     30 4E 85 F1 | 	sub	fp, #48
119d4     A7 14 02 FB | 	rdlong	arg02, fp
119d8     D8 BC B0 FD | 	call	#_pslpoke
119dc     50 00 90 FD | 	jmp	#LR__1412
119e0                 | LR__1408
119e0     30 4E 05 F1 | 	add	fp, #48
119e4     A7 12 02 FB | 	rdlong	arg01, fp
119e8     30 4E 85 F1 | 	sub	fp, #48
119ec     A7 14 02 FB | 	rdlong	arg02, fp
119f0     C0 BC B0 FD | 	call	#_pslpoke
119f4     38 00 90 FD | 	jmp	#LR__1412
119f8                 | LR__1409
119f8     30 4E 05 F1 | 	add	fp, #48
119fc     A7 12 02 FB | 	rdlong	arg01, fp
11a00     30 4E 85 F1 | 	sub	fp, #48
11a04     A7 14 02 FB | 	rdlong	arg02, fp
11a08     A8 BC B0 FD | 	call	#_pslpoke
11a0c     20 00 90 FD | 	jmp	#LR__1412
11a10                 | LR__1410
11a10     30 4E 05 F1 | 	add	fp, #48
11a14     A7 12 02 FB | 	rdlong	arg01, fp
11a18     30 4E 85 F1 | 	sub	fp, #48
11a1c     A7 14 02 FB | 	rdlong	arg02, fp
11a20     90 BC B0 FD | 	call	#_pslpoke
11a24     08 00 90 FD | 	jmp	#LR__1412
11a28                 | LR__1411
11a28     32 12 06 F6 | 	mov	arg01, #50
11a2c     20 BB B0 FD | 	call	#_printerror
11a30                 | LR__1412
11a30                 | LR__1413
11a30     A7 F0 03 F6 | 	mov	ptra, fp
11a34     B2 00 A0 FD | 	call	#popregs_
11a38                 | _do_assign_ret
11a38     2D 00 64 FD | 	ret
11a3c                 | 
11a3c                 | ' 
11a3c                 | ' 
11a3c                 | ' ' --------------------- Read a variable and push to the stack
11a3c                 | ' 
11a3c                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
11a3c                 | ' 
11a3c                 | ' sub do_getvar
11a3c                 | _do_getvar
11a3c     04 4A 05 F6 | 	mov	COUNT_, #4
11a40     A8 00 A0 FD | 	call	#pushregs_
11a44     3C F0 07 F1 | 	add	ptra, #60
11a48                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
11a48                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
11a48     4A 00 00 FF 
11a4c     80 E4 05 F1 | 	add	objptr, ##38016
11a50     F2 1E 02 FB | 	rdlong	local01, objptr
11a54     0F 17 02 F6 | 	mov	arg03, local01
11a58     01 16 66 F0 | 	shl	arg03, #1
11a5c     0F 17 02 F1 | 	add	arg03, local01
11a60     02 16 66 F0 | 	shl	arg03, #2
11a64     03 00 00 FF 
11a68     04 E4 85 F1 | 	sub	objptr, ##1540
11a6c     F2 16 02 F1 | 	add	arg03, objptr
11a70     04 16 06 F1 | 	add	arg03, #4
11a74     0B 17 0A FB | 	rdlong	arg03, arg03 wz
11a78     47 00 00 FF 
11a7c     7C E4 85 F1 | 	sub	objptr, ##36476
11a80     C4 00 90 5D |  if_ne	jmp	#LR__1421
11a84     4A 00 00 FF 
11a88     80 E4 05 F1 | 	add	objptr, ##38016
11a8c     F2 1E 02 FB | 	rdlong	local01, objptr
11a90     0F 13 02 F6 | 	mov	arg01, local01
11a94     01 12 66 F0 | 	shl	arg01, #1
11a98     0F 13 02 F1 | 	add	arg01, local01
11a9c     02 12 66 F0 | 	shl	arg01, #2
11aa0     03 00 00 FF 
11aa4     04 E4 85 F1 | 	sub	objptr, ##1540
11aa8     F2 12 02 F1 | 	add	arg01, objptr
11aac     09 1F 02 FB | 	rdlong	local01, arg01
11ab0     04 1E 66 F0 | 	shl	local01, #4
11ab4     32 00 00 FF 
11ab8     84 E4 85 F1 | 	sub	objptr, ##25732
11abc     F2 1E 02 F1 | 	add	local01, objptr
11ac0     04 1E 06 F1 | 	add	local01, #4
11ac4     0F 13 02 FB | 	rdlong	arg01, local01
11ac8     04 1E 06 F1 | 	add	local01, #4
11acc     0F 1F 02 FB | 	rdlong	local01, local01
11ad0     A7 12 62 FC | 	wrlong	arg01, fp
11ad4     04 4E 05 F1 | 	add	fp, #4
11ad8     A7 1E 62 FC | 	wrlong	local01, fp
11adc     35 00 00 FF 
11ae0     88 E4 05 F1 | 	add	objptr, ##27272
11ae4     F2 1E 02 FB | 	rdlong	local01, objptr
11ae8     0F 13 02 F6 | 	mov	arg01, local01
11aec     01 12 66 F0 | 	shl	arg01, #1
11af0     0F 13 02 F1 | 	add	arg01, local01
11af4     02 12 66 F0 | 	shl	arg01, #2
11af8     03 00 00 FF 
11afc     04 E4 85 F1 | 	sub	objptr, ##1540
11b00     F2 12 02 F1 | 	add	arg01, objptr
11b04     09 1F 02 FB | 	rdlong	local01, arg01
11b08     04 1E 66 F0 | 	shl	local01, #4
11b0c     32 00 00 FF 
11b10     84 E4 85 F1 | 	sub	objptr, ##25732
11b14     F2 1E 02 F1 | 	add	local01, objptr
11b18     0C 1E 06 F1 | 	add	local01, #12
11b1c     0F 1F 02 FB | 	rdlong	local01, local01
11b20     04 4E 05 F1 | 	add	fp, #4
11b24     A7 1E 62 FC | 	wrlong	local01, fp
11b28                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
11b28                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
11b28                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
11b28     08 4E 85 F1 | 	sub	fp, #8
11b2c     00 1F 16 F2 | 	cmp	local01, #256 wc
11b30     14 00 00 FF 
11b34     F8 E5 85 F1 | 	sub	objptr, ##10744
11b38     0C 00 90 3D |  if_ae	jmp	#LR__1420
11b3c     A7 12 02 F6 | 	mov	arg01, fp
11b40     AC 9F BF FD | 	call	#_push
11b44     A0 04 90 FD | 	jmp	#LR__1442
11b48                 | LR__1420
11b48                 | LR__1421
11b48     4A 00 00 FF 
11b4c     80 E4 05 F1 | 	add	objptr, ##38016
11b50     F2 16 02 FB | 	rdlong	arg03, objptr
11b54     0B 15 02 F6 | 	mov	arg02, arg03
11b58     01 14 66 F0 | 	shl	arg02, #1
11b5c     0B 15 02 F1 | 	add	arg02, arg03
11b60     02 14 66 F0 | 	shl	arg02, #2
11b64     03 00 00 FF 
11b68     04 E4 85 F1 | 	sub	objptr, ##1540
11b6c     F2 14 02 F1 | 	add	arg02, objptr
11b70     0A 17 02 FB | 	rdlong	arg03, arg02
11b74     04 16 66 F0 | 	shl	arg03, #4
11b78     32 00 00 FF 
11b7c     84 E4 85 F1 | 	sub	objptr, ##25732
11b80     F2 16 02 F1 | 	add	arg03, objptr
11b84     04 16 06 F1 | 	add	arg03, #4
11b88     0B 13 02 FB | 	rdlong	arg01, arg03
11b8c     0C 4E 05 F1 | 	add	fp, #12
11b90     A7 12 62 FC | 	wrlong	arg01, fp
11b94     0C 4E 85 F1 | 	sub	fp, #12
11b98     14 00 00 FF 
11b9c     F8 E5 85 F1 | 	sub	objptr, ##10744
11ba0     40 BC B0 FD | 	call	#_pslpeek
11ba4     FD FA 31 F9 | 	getword	result1, result1, #0
11ba8     10 4E 05 F1 | 	add	fp, #16
11bac     A7 FA 61 FC | 	wrlong	result1, fp
11bb0     4A 00 00 FF 
11bb4     80 E4 05 F1 | 	add	objptr, ##38016
11bb8     F2 16 02 FB | 	rdlong	arg03, objptr
11bbc     0B 15 02 F6 | 	mov	arg02, arg03
11bc0     01 14 66 F0 | 	shl	arg02, #1
11bc4     0B 15 02 F1 | 	add	arg02, arg03
11bc8     02 14 66 F0 | 	shl	arg02, #2
11bcc     03 00 00 FF 
11bd0     04 E4 85 F1 | 	sub	objptr, ##1540
11bd4     F2 14 02 F1 | 	add	arg02, objptr
11bd8     04 14 06 F1 | 	add	arg02, #4
11bdc     0A 17 02 FB | 	rdlong	arg03, arg02
11be0     04 4E 05 F1 | 	add	fp, #4
11be4     A7 16 62 FC | 	wrlong	arg03, fp
11be8     08 4E 85 F1 | 	sub	fp, #8
11bec     A7 12 02 FB | 	rdlong	arg01, fp
11bf0     0C 4E 85 F1 | 	sub	fp, #12
11bf4     02 12 06 F1 | 	add	arg01, #2
11bf8     47 00 00 FF 
11bfc     7C E4 85 F1 | 	sub	objptr, ##36476
11c00     88 BB B0 FD | 	call	#_pspeek
11c04     FD FA E1 F8 | 	getbyte	result1, result1, #0
11c08     18 4E 05 F1 | 	add	fp, #24
11c0c     A7 FA 61 FC | 	wrlong	result1, fp
11c10     0C 4E 85 F1 | 	sub	fp, #12
11c14     A7 12 02 FB | 	rdlong	arg01, fp
11c18     0C 4E 85 F1 | 	sub	fp, #12
11c1c     04 12 06 F1 | 	add	arg01, #4
11c20     C0 BB B0 FD | 	call	#_pslpeek
11c24     1C 4E 05 F1 | 	add	fp, #28
11c28     A7 FA 61 FC | 	wrlong	result1, fp
11c2c     10 4E 85 F1 | 	sub	fp, #16
11c30     A7 12 02 FB | 	rdlong	arg01, fp
11c34     0C 4E 85 F1 | 	sub	fp, #12
11c38     08 12 06 F1 | 	add	arg01, #8
11c3c     A4 BB B0 FD | 	call	#_pslpeek
11c40     20 4E 05 F1 | 	add	fp, #32
11c44     A7 FA 61 FC | 	wrlong	result1, fp
11c48     14 4E 85 F1 | 	sub	fp, #20
11c4c     A7 12 02 FB | 	rdlong	arg01, fp
11c50     0C 4E 85 F1 | 	sub	fp, #12
11c54     0C 12 06 F1 | 	add	arg01, #12
11c58     88 BB B0 FD | 	call	#_pslpeek
11c5c     24 4E 05 F1 | 	add	fp, #36
11c60     A7 FA 61 FC | 	wrlong	result1, fp
11c64                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
11c64                 | ' esize=pspeek(arrptr+2)
11c64                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
11c64                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
11c64                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
11c64                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
11c64     10 4E 85 F1 | 	sub	fp, #16
11c68     A7 16 02 FB | 	rdlong	arg03, fp
11c6c     14 4E 85 F1 | 	sub	fp, #20
11c70     03 16 16 F2 | 	cmp	arg03, #3 wc
11c74     38 00 90 CD |  if_b	jmp	#LR__1422
11c78     DC 9D BF FD | 	call	#_pop
11c7c     FF 16 02 F6 | 	mov	arg03, result3
11c80     A7 FA 61 FC | 	wrlong	result1, fp
11c84     04 4E 05 F1 | 	add	fp, #4
11c88     A7 FC 61 FC | 	wrlong	result2, fp
11c8c     04 4E 05 F1 | 	add	fp, #4
11c90     A7 16 62 FC | 	wrlong	arg03, fp
11c94     08 4E 85 F1 | 	sub	fp, #8
11c98     A7 12 02 F6 | 	mov	arg01, fp
11c9c     54 3F B0 FD | 	call	#_converttoint
11ca0     30 4E 05 F1 | 	add	fp, #48
11ca4     A7 FA 61 FC | 	wrlong	result1, fp
11ca8     30 4E 85 F1 | 	sub	fp, #48
11cac     0C 00 90 FD | 	jmp	#LR__1423
11cb0                 | LR__1422
11cb0     30 4E 05 F1 | 	add	fp, #48
11cb4     A7 00 68 FC | 	wrlong	#0, fp
11cb8     30 4E 85 F1 | 	sub	fp, #48
11cbc                 | LR__1423
11cbc                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
11cbc     14 4E 05 F1 | 	add	fp, #20
11cc0     A7 16 02 FB | 	rdlong	arg03, fp
11cc4     14 4E 85 F1 | 	sub	fp, #20
11cc8     02 16 16 F2 | 	cmp	arg03, #2 wc
11ccc     38 00 90 CD |  if_b	jmp	#LR__1424
11cd0     84 9D BF FD | 	call	#_pop
11cd4     FF 16 02 F6 | 	mov	arg03, result3
11cd8     A7 FA 61 FC | 	wrlong	result1, fp
11cdc     04 4E 05 F1 | 	add	fp, #4
11ce0     A7 FC 61 FC | 	wrlong	result2, fp
11ce4     04 4E 05 F1 | 	add	fp, #4
11ce8     A7 16 62 FC | 	wrlong	arg03, fp
11cec     08 4E 85 F1 | 	sub	fp, #8
11cf0     A7 12 02 F6 | 	mov	arg01, fp
11cf4     FC 3E B0 FD | 	call	#_converttoint
11cf8     2C 4E 05 F1 | 	add	fp, #44
11cfc     A7 FA 61 FC | 	wrlong	result1, fp
11d00     2C 4E 85 F1 | 	sub	fp, #44
11d04     0C 00 90 FD | 	jmp	#LR__1425
11d08                 | LR__1424
11d08     2C 4E 05 F1 | 	add	fp, #44
11d0c     A7 00 68 FC | 	wrlong	#0, fp
11d10     2C 4E 85 F1 | 	sub	fp, #44
11d14                 | LR__1425
11d14                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
11d14     14 4E 05 F1 | 	add	fp, #20
11d18     A7 16 02 FB | 	rdlong	arg03, fp
11d1c     14 4E 85 F1 | 	sub	fp, #20
11d20     01 16 16 F2 | 	cmp	arg03, #1 wc
11d24     38 00 90 CD |  if_b	jmp	#LR__1426
11d28     2C 9D BF FD | 	call	#_pop
11d2c     FF 16 02 F6 | 	mov	arg03, result3
11d30     A7 FA 61 FC | 	wrlong	result1, fp
11d34     04 4E 05 F1 | 	add	fp, #4
11d38     A7 FC 61 FC | 	wrlong	result2, fp
11d3c     04 4E 05 F1 | 	add	fp, #4
11d40     A7 16 62 FC | 	wrlong	arg03, fp
11d44     08 4E 85 F1 | 	sub	fp, #8
11d48     A7 12 02 F6 | 	mov	arg01, fp
11d4c     A4 3E B0 FD | 	call	#_converttoint
11d50     28 4E 05 F1 | 	add	fp, #40
11d54     A7 FA 61 FC | 	wrlong	result1, fp
11d58     28 4E 85 F1 | 	sub	fp, #40
11d5c     0C 00 90 FD | 	jmp	#LR__1427
11d60                 | LR__1426
11d60     28 4E 05 F1 | 	add	fp, #40
11d64     A7 00 68 FC | 	wrlong	#0, fp
11d68     28 4E 85 F1 | 	sub	fp, #40
11d6c                 | LR__1427
11d6c     0C 4E 05 F1 | 	add	fp, #12
11d70     A7 20 02 FB | 	rdlong	local02, fp
11d74     1C 4E 05 F1 | 	add	fp, #28
11d78     A7 22 02 FB | 	rdlong	local03, fp
11d7c     04 4E 05 F1 | 	add	fp, #4
11d80     A7 FC 01 FB | 	rdlong	result2, fp
11d84     10 4E 85 F1 | 	sub	fp, #16
11d88     A7 FE 01 FB | 	rdlong	result3, fp
11d8c     FF FC 01 FD | 	qmul	result2, result3
11d90     10 20 06 F1 | 	add	local02, #16
11d94     14 4E 05 F1 | 	add	fp, #20
11d98     A7 FC 01 FB | 	rdlong	result2, fp
11d9c     18 FA 61 FD | 	getqx	result1
11da0     FF FC 01 FD | 	qmul	result2, result3
11da4     FD 22 02 F1 | 	add	local03, result1
11da8     10 4E 85 F1 | 	sub	fp, #16
11dac     A7 FE 01 FB | 	rdlong	result3, fp
11db0     18 FC 61 FD | 	getqx	result2
11db4     FF FC 01 FD | 	qmul	result2, result3
11db8     08 4E 85 F1 | 	sub	fp, #8
11dbc     A7 FE 01 FB | 	rdlong	result3, fp
11dc0     18 FC 61 FD | 	getqx	result2
11dc4     FE 22 02 F1 | 	add	local03, result2
11dc8     FF 22 02 FD | 	qmul	local03, result3
11dcc     1C 4E 05 F1 | 	add	fp, #28
11dd0                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
11dd0                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
11dd0                 | ' 
11dd0                 | ' select case vartype
11dd0     18 FC 61 FD | 	getqx	result2
11dd4     FE 20 02 F1 | 	add	local02, result2
11dd8     A7 20 62 FC | 	wrlong	local02, fp
11ddc     24 4E 85 F1 | 	sub	fp, #36
11de0     A7 24 02 FB | 	rdlong	local04, fp
11de4     10 4E 85 F1 | 	sub	fp, #16
11de8     00 25 86 F1 | 	sub	local04, #256
11dec     0C 24 26 F3 | 	fle	local04, #12
11df0     30 24 62 FD | 	jmprel	local04
11df4                 | LR__1428
11df4     30 00 90 FD | 	jmp	#LR__1429
11df8     58 00 90 FD | 	jmp	#LR__1430
11dfc     8C 00 90 FD | 	jmp	#LR__1431
11e00     AC 00 90 FD | 	jmp	#LR__1432
11e04     E8 00 90 FD | 	jmp	#LR__1433
11e08     08 01 90 FD | 	jmp	#LR__1434
11e0c     24 01 90 FD | 	jmp	#LR__1435
11e10     40 01 90 FD | 	jmp	#LR__1436
11e14     50 01 90 FD | 	jmp	#LR__1437
11e18     60 01 90 FD | 	jmp	#LR__1438
11e1c     7C 01 90 FD | 	jmp	#LR__1439
11e20     8C 01 90 FD | 	jmp	#LR__1440
11e24     B8 01 90 FD | 	jmp	#LR__1441
11e28                 | LR__1429
11e28     A7 12 02 F6 | 	mov	arg01, fp
11e2c     34 4E 05 F1 | 	add	fp, #52
11e30     A7 14 02 FB | 	rdlong	arg02, fp
11e34     34 4E 85 F1 | 	sub	fp, #52
11e38     0C 16 06 F6 | 	mov	arg03, #12
11e3c     0B 00 00 FF 
11e40     CC E4 05 F1 | 	add	objptr, ##5836
11e44     60 E0 B0 FD | 	call	#_psram_spin2_read1
11e48     0B 00 00 FF 
11e4c     CC E4 85 F1 | 	sub	objptr, ##5836
11e50     8C 01 90 FD | 	jmp	#LR__1441
11e54                 | LR__1430
11e54     08 4E 05 F1 | 	add	fp, #8
11e58     A7 38 68 FC | 	wrlong	#28, fp
11e5c     2C 4E 05 F1 | 	add	fp, #44
11e60     A7 12 02 FB | 	rdlong	arg01, fp
11e64     34 4E 85 F1 | 	sub	fp, #52
11e68     20 B9 B0 FD | 	call	#_pspeek
11e6c     FD FA E1 F8 | 	getbyte	result1, result1, #0
11e70     A7 FA 61 FC | 	wrlong	result1, fp
11e74     80 FA 15 F2 | 	cmp	result1, #128 wc
11e78     00 1F 66 36 |  if_ae	neg	local01, #256
11e7c     A7 22 02 3B |  if_ae	rdlong	local03, fp
11e80     11 1F 42 35 |  if_ae	or	local01, local03
11e84     A7 1E 62 3C |  if_ae	wrlong	local01, fp
11e88     54 01 90 FD | 	jmp	#LR__1441
11e8c                 | LR__1431
11e8c     08 4E 05 F1 | 	add	fp, #8
11e90     A7 3A 68 FC | 	wrlong	#29, fp
11e94     2C 4E 05 F1 | 	add	fp, #44
11e98     A7 12 02 FB | 	rdlong	arg01, fp
11e9c     34 4E 85 F1 | 	sub	fp, #52
11ea0     E8 B8 B0 FD | 	call	#_pspeek
11ea4     FD FA E1 F8 | 	getbyte	result1, result1, #0
11ea8     A7 FA 61 FC | 	wrlong	result1, fp
11eac     30 01 90 FD | 	jmp	#LR__1441
11eb0                 | LR__1432
11eb0     08 4E 05 F1 | 	add	fp, #8
11eb4     A7 38 68 FC | 	wrlong	#28, fp
11eb8     2C 4E 05 F1 | 	add	fp, #44
11ebc     A7 12 02 FB | 	rdlong	arg01, fp
11ec0     34 4E 85 F1 | 	sub	fp, #52
11ec4     1C B9 B0 FD | 	call	#_pslpeek
11ec8     FD FA 31 F9 | 	getword	result1, result1, #0
11ecc     A7 FA 61 FC | 	wrlong	result1, fp
11ed0     40 00 00 FF 
11ed4     00 FA 15 F2 | 	cmp	result1, ##32768 wc
11ed8     FF 7F 00 3F 
11edc     00 1F 06 36 |  if_ae	mov	local01, ##16776960
11ee0     A7 22 02 3B |  if_ae	rdlong	local03, fp
11ee4     11 1F 42 35 |  if_ae	or	local01, local03
11ee8     A7 1E 62 3C |  if_ae	wrlong	local01, fp
11eec     F0 00 90 FD | 	jmp	#LR__1441
11ef0                 | LR__1433
11ef0     08 4E 05 F1 | 	add	fp, #8
11ef4     A7 3A 68 FC | 	wrlong	#29, fp
11ef8     2C 4E 05 F1 | 	add	fp, #44
11efc     A7 12 02 FB | 	rdlong	arg01, fp
11f00     34 4E 85 F1 | 	sub	fp, #52
11f04     DC B8 B0 FD | 	call	#_pslpeek
11f08     FD FA 31 F9 | 	getword	result1, result1, #0
11f0c     A7 FA 61 FC | 	wrlong	result1, fp
11f10     CC 00 90 FD | 	jmp	#LR__1441
11f14                 | LR__1434
11f14     08 4E 05 F1 | 	add	fp, #8
11f18     A7 38 68 FC | 	wrlong	#28, fp
11f1c     2C 4E 05 F1 | 	add	fp, #44
11f20     A7 12 02 FB | 	rdlong	arg01, fp
11f24     34 4E 85 F1 | 	sub	fp, #52
11f28     B8 B8 B0 FD | 	call	#_pslpeek
11f2c     A7 FA 61 FC | 	wrlong	result1, fp
11f30     AC 00 90 FD | 	jmp	#LR__1441
11f34                 | LR__1435
11f34     08 4E 05 F1 | 	add	fp, #8
11f38     A7 3A 68 FC | 	wrlong	#29, fp
11f3c     2C 4E 05 F1 | 	add	fp, #44
11f40     A7 12 02 FB | 	rdlong	arg01, fp
11f44     34 4E 85 F1 | 	sub	fp, #52
11f48     98 B8 B0 FD | 	call	#_pslpeek
11f4c     A7 FA 61 FC | 	wrlong	result1, fp
11f50     8C 00 90 FD | 	jmp	#LR__1441
11f54                 | LR__1436
11f54     08 4E 05 F1 | 	add	fp, #8
11f58     A7 FE 69 FC | 	wrlong	#255, fp
11f5c     08 4E 85 F1 | 	sub	fp, #8
11f60     A7 60 68 FC | 	wrlong	#48, fp
11f64     78 00 90 FD | 	jmp	#LR__1441
11f68                 | LR__1437
11f68     08 4E 05 F1 | 	add	fp, #8
11f6c     A7 FE 69 FC | 	wrlong	#255, fp
11f70     08 4E 85 F1 | 	sub	fp, #8
11f74     A7 60 68 FC | 	wrlong	#48, fp
11f78     64 00 90 FD | 	jmp	#LR__1441
11f7c                 | LR__1438
11f7c     08 4E 05 F1 | 	add	fp, #8
11f80     A7 3C 68 FC | 	wrlong	#30, fp
11f84     2C 4E 05 F1 | 	add	fp, #44
11f88     A7 12 02 FB | 	rdlong	arg01, fp
11f8c     34 4E 85 F1 | 	sub	fp, #52
11f90     50 B8 B0 FD | 	call	#_pslpeek
11f94     A7 FA 61 FC | 	wrlong	result1, fp
11f98     44 00 90 FD | 	jmp	#LR__1441
11f9c                 | LR__1439
11f9c     08 4E 05 F1 | 	add	fp, #8
11fa0     A7 FE 69 FC | 	wrlong	#255, fp
11fa4     08 4E 85 F1 | 	sub	fp, #8
11fa8     A7 60 68 FC | 	wrlong	#48, fp
11fac     30 00 90 FD | 	jmp	#LR__1441
11fb0                 | LR__1440
11fb0     08 4E 05 F1 | 	add	fp, #8
11fb4     A7 3E 68 FC | 	wrlong	#31, fp
11fb8     2C 4E 05 F1 | 	add	fp, #44
11fbc     A7 12 02 FB | 	rdlong	arg01, fp
11fc0     34 4E 85 F1 | 	sub	fp, #52
11fc4     1C B8 B0 FD | 	call	#_pslpeek
11fc8     A7 FA 61 FC | 	wrlong	result1, fp
11fcc     00 04 00 FF 
11fd0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
11fd4     08 4E 05 31 |  if_ae	add	fp, #8
11fd8     A7 56 68 3C |  if_ae	wrlong	#43, fp
11fdc     08 4E 85 31 |  if_ae	sub	fp, #8
11fe0                 | LR__1441
11fe0     A7 12 02 F6 | 	mov	arg01, fp
11fe4     08 9B BF FD | 	call	#_push
11fe8                 | LR__1442
11fe8     A7 F0 03 F6 | 	mov	ptra, fp
11fec     B2 00 A0 FD | 	call	#popregs_
11ff0                 | _do_getvar_ret
11ff0     2D 00 64 FD | 	ret
11ff4                 | 
11ff4                 | ' 
11ff4                 | ' 
11ff4                 | ' sub do_getaddr
11ff4                 | _do_getaddr
11ff4     01 4A 05 F6 | 	mov	COUNT_, #1
11ff8     A8 00 A0 FD | 	call	#pushregs_
11ffc     38 F0 07 F1 | 	add	ptra, #56
12000                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
12000                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
12000     4A 00 00 FF 
12004     80 E4 05 F1 | 	add	objptr, ##38016
12008     F2 12 02 FB | 	rdlong	arg01, objptr
1200c     09 FD 01 F6 | 	mov	result2, arg01
12010     01 FC 65 F0 | 	shl	result2, #1
12014     09 FD 01 F1 | 	add	result2, arg01
12018     02 FC 65 F0 | 	shl	result2, #2
1201c     03 00 00 FF 
12020     04 E4 85 F1 | 	sub	objptr, ##1540
12024     F2 FC 01 F1 | 	add	result2, objptr
12028     04 FC 05 F1 | 	add	result2, #4
1202c     FE FC 09 FB | 	rdlong	result2, result2 wz
12030     47 00 00 FF 
12034     7C E4 85 F1 | 	sub	objptr, ##36476
12038     C4 00 90 5D |  if_ne	jmp	#LR__1450
1203c     4A 00 00 FF 
12040     80 E4 05 F1 | 	add	objptr, ##38016
12044     F2 12 02 FB | 	rdlong	arg01, objptr
12048     09 FD 01 F6 | 	mov	result2, arg01
1204c     01 FC 65 F0 | 	shl	result2, #1
12050     09 FD 01 F1 | 	add	result2, arg01
12054     02 FC 65 F0 | 	shl	result2, #2
12058     03 00 00 FF 
1205c     04 E4 85 F1 | 	sub	objptr, ##1540
12060     F2 FC 01 F1 | 	add	result2, objptr
12064     FE 12 02 FB | 	rdlong	arg01, result2
12068     04 12 66 F0 | 	shl	arg01, #4
1206c     32 00 00 FF 
12070     84 E4 85 F1 | 	sub	objptr, ##25732
12074     F2 12 02 F1 | 	add	arg01, objptr
12078     0C 12 06 F1 | 	add	arg01, #12
1207c     09 13 02 FB | 	rdlong	arg01, arg01
12080     08 4E 05 F1 | 	add	fp, #8
12084     A7 12 62 FC | 	wrlong	arg01, fp
12088                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
12088                 | '    if t1.result_type>=array_no_type then goto 2200
12088     08 4E 85 F1 | 	sub	fp, #8
1208c     00 13 16 F2 | 	cmp	arg01, #256 wc
12090     14 00 00 FF 
12094     F8 E5 85 F1 | 	sub	objptr, ##10744
12098     64 00 90 3D |  if_ae	jmp	#LR__1451
1209c     4A 00 00 FF 
120a0     80 E4 05 F1 | 	add	objptr, ##38016
120a4     F2 12 02 FB | 	rdlong	arg01, objptr
120a8     09 FB 01 F6 | 	mov	result1, arg01
120ac     01 FA 65 F0 | 	shl	result1, #1
120b0     09 FB 01 F1 | 	add	result1, arg01
120b4     02 FA 65 F0 | 	shl	result1, #2
120b8     03 00 00 FF 
120bc     04 E4 85 F1 | 	sub	objptr, ##1540
120c0     F2 FA 01 F1 | 	add	result1, objptr
120c4     FD FA 01 FB | 	rdlong	result1, result1
120c8     04 FA 65 F0 | 	shl	result1, #4
120cc     32 00 00 FF 
120d0     84 E4 85 F1 | 	sub	objptr, ##25732
120d4     F2 FA 01 F1 | 	add	result1, objptr
120d8     04 FA 05 F1 | 	add	result1, #4
120dc     14 00 00 FF 
120e0     F8 E5 85 F1 | 	sub	objptr, ##10744
120e4     A7 FA 61 FC | 	wrlong	result1, fp
120e8     08 4E 05 F1 | 	add	fp, #8
120ec     A7 3A 68 FC | 	wrlong	#29, fp
120f0     08 4E 85 F1 | 	sub	fp, #8
120f4     A7 12 02 F6 | 	mov	arg01, fp
120f8     F4 99 BF FD | 	call	#_push
120fc                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
120fc                 | '   t1.result_type=result_uint
120fc                 | '   push t1 : return
120fc     D8 02 90 FD | 	jmp	#LR__1460
12100                 | LR__1450
12100                 | LR__1451
12100     4A 00 00 FF 
12104     80 E4 05 F1 | 	add	objptr, ##38016
12108     F2 FE 01 FB | 	rdlong	result3, objptr
1210c     FF 12 02 F6 | 	mov	arg01, result3
12110     01 12 66 F0 | 	shl	arg01, #1
12114     FF 12 02 F1 | 	add	arg01, result3
12118     02 12 66 F0 | 	shl	arg01, #2
1211c     03 00 00 FF 
12120     04 E4 85 F1 | 	sub	objptr, ##1540
12124     F2 12 02 F1 | 	add	arg01, objptr
12128     09 13 02 FB | 	rdlong	arg01, arg01
1212c     04 12 66 F0 | 	shl	arg01, #4
12130     32 00 00 FF 
12134     84 E4 85 F1 | 	sub	objptr, ##25732
12138     F2 12 02 F1 | 	add	arg01, objptr
1213c     04 12 06 F1 | 	add	arg01, #4
12140     09 13 02 FB | 	rdlong	arg01, arg01
12144     0C 4E 05 F1 | 	add	fp, #12
12148     A7 12 62 FC | 	wrlong	arg01, fp
1214c     0C 4E 85 F1 | 	sub	fp, #12
12150     14 00 00 FF 
12154     F8 E5 85 F1 | 	sub	objptr, ##10744
12158     88 B6 B0 FD | 	call	#_pslpeek
1215c     FD FA 31 F9 | 	getword	result1, result1, #0
12160     10 4E 05 F1 | 	add	fp, #16
12164     A7 FA 61 FC | 	wrlong	result1, fp
12168     4A 00 00 FF 
1216c     80 E4 05 F1 | 	add	objptr, ##38016
12170     F2 FE 01 FB | 	rdlong	result3, objptr
12174     FF 12 02 F6 | 	mov	arg01, result3
12178     01 12 66 F0 | 	shl	arg01, #1
1217c     FF 12 02 F1 | 	add	arg01, result3
12180     02 12 66 F0 | 	shl	arg01, #2
12184     03 00 00 FF 
12188     04 E4 85 F1 | 	sub	objptr, ##1540
1218c     F2 12 02 F1 | 	add	arg01, objptr
12190     04 12 06 F1 | 	add	arg01, #4
12194     09 13 02 FB | 	rdlong	arg01, arg01
12198     04 4E 05 F1 | 	add	fp, #4
1219c     A7 12 62 FC | 	wrlong	arg01, fp
121a0     08 4E 85 F1 | 	sub	fp, #8
121a4     A7 12 02 FB | 	rdlong	arg01, fp
121a8     0C 4E 85 F1 | 	sub	fp, #12
121ac     02 12 06 F1 | 	add	arg01, #2
121b0     47 00 00 FF 
121b4     7C E4 85 F1 | 	sub	objptr, ##36476
121b8     D0 B5 B0 FD | 	call	#_pspeek
121bc     FD FA E1 F8 | 	getbyte	result1, result1, #0
121c0     18 4E 05 F1 | 	add	fp, #24
121c4     A7 FA 61 FC | 	wrlong	result1, fp
121c8     0C 4E 85 F1 | 	sub	fp, #12
121cc     A7 12 02 FB | 	rdlong	arg01, fp
121d0     0C 4E 85 F1 | 	sub	fp, #12
121d4     04 12 06 F1 | 	add	arg01, #4
121d8     08 B6 B0 FD | 	call	#_pslpeek
121dc     1C 4E 05 F1 | 	add	fp, #28
121e0     A7 FA 61 FC | 	wrlong	result1, fp
121e4     10 4E 85 F1 | 	sub	fp, #16
121e8     A7 12 02 FB | 	rdlong	arg01, fp
121ec     0C 4E 85 F1 | 	sub	fp, #12
121f0     08 12 06 F1 | 	add	arg01, #8
121f4     EC B5 B0 FD | 	call	#_pslpeek
121f8     20 4E 05 F1 | 	add	fp, #32
121fc     A7 FA 61 FC | 	wrlong	result1, fp
12200     14 4E 85 F1 | 	sub	fp, #20
12204     A7 12 02 FB | 	rdlong	arg01, fp
12208     0C 4E 85 F1 | 	sub	fp, #12
1220c     0C 12 06 F1 | 	add	arg01, #12
12210     D0 B5 B0 FD | 	call	#_pslpeek
12214     24 4E 05 F1 | 	add	fp, #36
12218     A7 FA 61 FC | 	wrlong	result1, fp
1221c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1221c                 | ' esize=pspeek(arrptr+2)
1221c                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1221c                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1221c                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1221c                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1221c     10 4E 85 F1 | 	sub	fp, #16
12220     A7 12 02 FB | 	rdlong	arg01, fp
12224     14 4E 85 F1 | 	sub	fp, #20
12228     03 12 16 F2 | 	cmp	arg01, #3 wc
1222c     34 00 90 CD |  if_b	jmp	#LR__1452
12230     24 98 BF FD | 	call	#_pop
12234     A7 FA 61 FC | 	wrlong	result1, fp
12238     04 4E 05 F1 | 	add	fp, #4
1223c     A7 FC 61 FC | 	wrlong	result2, fp
12240     04 4E 05 F1 | 	add	fp, #4
12244     A7 FE 61 FC | 	wrlong	result3, fp
12248     08 4E 85 F1 | 	sub	fp, #8
1224c     A7 12 02 F6 | 	mov	arg01, fp
12250     A0 39 B0 FD | 	call	#_converttoint
12254     30 4E 05 F1 | 	add	fp, #48
12258     A7 FA 61 FC | 	wrlong	result1, fp
1225c     30 4E 85 F1 | 	sub	fp, #48
12260     0C 00 90 FD | 	jmp	#LR__1453
12264                 | LR__1452
12264     30 4E 05 F1 | 	add	fp, #48
12268     A7 00 68 FC | 	wrlong	#0, fp
1226c     30 4E 85 F1 | 	sub	fp, #48
12270                 | LR__1453
12270                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
12270     14 4E 05 F1 | 	add	fp, #20
12274     A7 12 02 FB | 	rdlong	arg01, fp
12278     14 4E 85 F1 | 	sub	fp, #20
1227c     02 12 16 F2 | 	cmp	arg01, #2 wc
12280     34 00 90 CD |  if_b	jmp	#LR__1454
12284     D0 97 BF FD | 	call	#_pop
12288     A7 FA 61 FC | 	wrlong	result1, fp
1228c     04 4E 05 F1 | 	add	fp, #4
12290     A7 FC 61 FC | 	wrlong	result2, fp
12294     04 4E 05 F1 | 	add	fp, #4
12298     A7 FE 61 FC | 	wrlong	result3, fp
1229c     08 4E 85 F1 | 	sub	fp, #8
122a0     A7 12 02 F6 | 	mov	arg01, fp
122a4     4C 39 B0 FD | 	call	#_converttoint
122a8     2C 4E 05 F1 | 	add	fp, #44
122ac     A7 FA 61 FC | 	wrlong	result1, fp
122b0     2C 4E 85 F1 | 	sub	fp, #44
122b4     0C 00 90 FD | 	jmp	#LR__1455
122b8                 | LR__1454
122b8     2C 4E 05 F1 | 	add	fp, #44
122bc     A7 00 68 FC | 	wrlong	#0, fp
122c0     2C 4E 85 F1 | 	sub	fp, #44
122c4                 | LR__1455
122c4                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
122c4     14 4E 05 F1 | 	add	fp, #20
122c8     A7 12 02 FB | 	rdlong	arg01, fp
122cc     14 4E 85 F1 | 	sub	fp, #20
122d0     01 12 16 F2 | 	cmp	arg01, #1 wc
122d4     34 00 90 CD |  if_b	jmp	#LR__1456
122d8     7C 97 BF FD | 	call	#_pop
122dc     A7 FA 61 FC | 	wrlong	result1, fp
122e0     04 4E 05 F1 | 	add	fp, #4
122e4     A7 FC 61 FC | 	wrlong	result2, fp
122e8     04 4E 05 F1 | 	add	fp, #4
122ec     A7 FE 61 FC | 	wrlong	result3, fp
122f0     08 4E 85 F1 | 	sub	fp, #8
122f4     A7 12 02 F6 | 	mov	arg01, fp
122f8     F8 38 B0 FD | 	call	#_converttoint
122fc     28 4E 05 F1 | 	add	fp, #40
12300     A7 FA 61 FC | 	wrlong	result1, fp
12304     28 4E 85 F1 | 	sub	fp, #40
12308     0C 00 90 FD | 	jmp	#LR__1457
1230c                 | LR__1456
1230c     28 4E 05 F1 | 	add	fp, #40
12310     A7 00 68 FC | 	wrlong	#0, fp
12314     28 4E 85 F1 | 	sub	fp, #40
12318                 | LR__1457
12318                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
12318                 | ' if numpar>0 then
12318     14 4E 05 F1 | 	add	fp, #20
1231c     A7 FE 01 FB | 	rdlong	result3, fp
12320     14 4E 85 F1 | 	sub	fp, #20
12324     01 FE 15 F2 | 	cmp	result3, #1 wc
12328     8C 00 90 CD |  if_b	jmp	#LR__1458
1232c     0C 4E 05 F1 | 	add	fp, #12
12330     A7 FC 01 FB | 	rdlong	result2, fp
12334     1C 4E 05 F1 | 	add	fp, #28
12338     A7 FE 01 FB | 	rdlong	result3, fp
1233c     04 4E 05 F1 | 	add	fp, #4
12340     A7 12 02 FB | 	rdlong	arg01, fp
12344     10 4E 85 F1 | 	sub	fp, #16
12348     A7 FA 01 FB | 	rdlong	result1, fp
1234c     FD 12 02 FD | 	qmul	arg01, result1
12350     10 FC 05 F1 | 	add	result2, #16
12354     14 4E 05 F1 | 	add	fp, #20
12358     A7 1E 02 FB | 	rdlong	local01, fp
1235c     18 12 62 FD | 	getqx	arg01
12360     FD 1E 02 FD | 	qmul	local01, result1
12364     09 FF 01 F1 | 	add	result3, arg01
12368     10 4E 85 F1 | 	sub	fp, #16
1236c     A7 1E 02 FB | 	rdlong	local01, fp
12370     18 FA 61 FD | 	getqx	result1
12374     0F FB 01 FD | 	qmul	result1, local01
12378     08 4E 85 F1 | 	sub	fp, #8
1237c     A7 1E 02 FB | 	rdlong	local01, fp
12380     18 FA 61 FD | 	getqx	result1
12384     FD FE 01 F1 | 	add	result3, result1
12388     0F FF 01 FD | 	qmul	result3, local01
1238c     1C 4E 05 F1 | 	add	fp, #28
12390     18 1E 62 FD | 	getqx	local01
12394     0F FD 01 F1 | 	add	result2, local01
12398     A7 FC 61 FC | 	wrlong	result2, fp
1239c     2C 4E 85 F1 | 	sub	fp, #44
123a0     A7 3A 68 FC | 	wrlong	#29, fp
123a4     2C 4E 05 F1 | 	add	fp, #44
123a8     A7 1E 02 FB | 	rdlong	local01, fp
123ac     34 4E 85 F1 | 	sub	fp, #52
123b0     A7 1E 62 FC | 	wrlong	local01, fp
123b4     18 00 90 FD | 	jmp	#LR__1459
123b8                 | LR__1458
123b8     08 4E 05 F1 | 	add	fp, #8
123bc     A7 3A 68 FC | 	wrlong	#29, fp
123c0     04 4E 05 F1 | 	add	fp, #4
123c4     A7 1E 02 FB | 	rdlong	local01, fp
123c8     0C 4E 85 F1 | 	sub	fp, #12
123cc     A7 1E 62 FC | 	wrlong	local01, fp
123d0                 | LR__1459
123d0     A7 12 02 F6 | 	mov	arg01, fp
123d4     18 97 BF FD | 	call	#_push
123d8                 | LR__1460
123d8     A7 F0 03 F6 | 	mov	ptra, fp
123dc     B2 00 A0 FD | 	call	#popregs_
123e0                 | _do_getaddr_ret
123e0     2D 00 64 FD | 	ret
123e4                 | 
123e4                 | ' 
123e4                 | ' 
123e4                 | ' sub do_inkey
123e4                 | _do_inkey
123e4     02 4A 05 F6 | 	mov	COUNT_, #2
123e8     A8 00 A0 FD | 	call	#pushregs_
123ec     0C F0 07 F1 | 	add	ptra, #12
123f0     E0 DE B0 FD | 	call	#_usbnew_spin2_get_key
123f4     45 00 00 FF 
123f8     74 E4 05 F1 | 	add	objptr, ##35444
123fc     F2 FA 61 FC | 	wrlong	result1, objptr
12400                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
12400     45 00 00 FF 
12404     74 E4 85 F1 | 	sub	objptr, ##35444
12408     00 FA 0D F2 | 	cmp	result1, #0 wz
1240c     94 00 90 AD |  if_e	jmp	#LR__1471
12410     45 00 00 FF 
12414     74 E4 05 F1 | 	add	objptr, ##35444
12418     F2 1C 02 FB | 	rdlong	arg06, objptr
1241c     45 00 00 FF 
12420     74 E4 85 F1 | 	sub	objptr, ##35444
12424     00 00 40 FF 
12428     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
1242c     45 00 00 CF 
12430     74 E4 05 C1 |  if_b	add	objptr, ##35444
12434     F2 1E 02 CB |  if_b	rdlong	local01, objptr
12438     45 00 00 CF 
1243c     74 E4 85 C1 |  if_b	sub	objptr, ##35444
12440     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
12444     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
12448     58 00 90 3D |  if_ae	jmp	#LR__1471
1244c                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
1244c     50 00 00 FF 
12450     10 E5 05 F1 | 	add	objptr, ##41232
12454     F2 1C 02 FB | 	rdlong	arg06, objptr
12458     50 00 00 FF 
1245c     10 E5 85 F1 | 	sub	objptr, ##41232
12460     01 1C 0E F2 | 	cmp	arg06, #1 wz
12464     3C 00 90 5D |  if_ne	jmp	#LR__1470
12468     51 00 00 FF 
1246c     B4 E5 05 F1 | 	add	objptr, ##41908
12470     F2 14 02 FB | 	rdlong	arg02, objptr
12474     04 E4 85 F1 | 	sub	objptr, #4
12478     F2 1A 02 FB | 	rdlong	arg05, objptr
1247c     07 12 06 F6 | 	mov	arg01, #7
12480     56 00 00 FF 
12484     44 16 06 F6 | 	mov	arg03, ##44100
12488     0C 18 C6 F9 | 	decod	arg04, #12
1248c     01 1C 66 F6 | 	neg	arg06, #1
12490     46 00 00 FF 
12494     E4 E4 85 F1 | 	sub	objptr, ##36068
12498     DC E1 B0 FD | 	call	#_audio096_spin2_play
1249c     0B 00 00 FF 
124a0     CC E4 85 F1 | 	sub	objptr, ##5836
124a4                 | LR__1470
124a4                 | LR__1471
124a4                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
124a4     45 00 00 FF 
124a8     74 E4 05 F1 | 	add	objptr, ##35444
124ac     F2 1C 0A FB | 	rdlong	arg06, objptr wz
124b0     45 00 00 FF 
124b4     74 E4 85 F1 | 	sub	objptr, ##35444
124b8     D4 01 90 AD |  if_e	jmp	#LR__1480
124bc     45 00 00 FF 
124c0     74 E4 05 F1 | 	add	objptr, ##35444
124c4     F2 1C 02 FB | 	rdlong	arg06, objptr
124c8     45 00 00 FF 
124cc     74 E4 85 F1 | 	sub	objptr, ##35444
124d0     00 00 40 FF 
124d4     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
124d8     45 00 00 CF 
124dc     74 E4 05 C1 |  if_b	add	objptr, ##35444
124e0     F2 1E 02 CB |  if_b	rdlong	local01, objptr
124e4     45 00 00 CF 
124e8     74 E4 85 C1 |  if_b	sub	objptr, ##35444
124ec     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
124f0     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
124f4     98 01 90 3D |  if_ae	jmp	#LR__1480
124f8                 | '   if leds and 2 = 2 then 
124f8     51 00 00 FF 
124fc     DC E5 05 F1 | 	add	objptr, ##41948
12500     F2 1E 0A FB | 	rdlong	local01, objptr wz
12504     51 00 00 FF 
12508     DC E5 85 F1 | 	sub	objptr, ##41948
1250c     58 01 90 AD |  if_e	jmp	#LR__1479
12510                 | '     if key>96 andalso key<123 then
12510     45 00 00 FF 
12514     74 E4 05 F1 | 	add	objptr, ##35444
12518     F2 1E 02 FB | 	rdlong	local01, objptr
1251c     45 00 00 FF 
12520     74 E4 85 F1 | 	sub	objptr, ##35444
12524     61 1E 16 F2 | 	cmp	local01, #97 wc
12528     3C 00 90 CD |  if_b	jmp	#LR__1472
1252c     45 00 00 FF 
12530     74 E4 05 F1 | 	add	objptr, ##35444
12534     F2 1E 02 FB | 	rdlong	local01, objptr
12538     45 00 00 FF 
1253c     74 E4 85 F1 | 	sub	objptr, ##35444
12540     7B 1E 16 F2 | 	cmp	local01, #123 wc
12544     20 00 90 3D |  if_ae	jmp	#LR__1472
12548     45 00 00 FF 
1254c     74 E4 05 F1 | 	add	objptr, ##35444
12550     F2 1E 02 FB | 	rdlong	local01, objptr
12554     20 1E 86 F1 | 	sub	local01, #32
12558     F2 1E 62 FC | 	wrlong	local01, objptr
1255c     45 00 00 FF 
12560     74 E4 85 F1 | 	sub	objptr, ##35444
12564     00 01 90 FD | 	jmp	#LR__1478
12568                 | LR__1472
12568     45 00 00 FF 
1256c     74 E4 05 F1 | 	add	objptr, ##35444
12570     F2 1E 02 FB | 	rdlong	local01, objptr
12574     45 00 00 FF 
12578     74 E4 85 F1 | 	sub	objptr, ##35444
1257c     41 1E 16 F2 | 	cmp	local01, #65 wc
12580     3C 00 90 CD |  if_b	jmp	#LR__1473
12584     45 00 00 FF 
12588     74 E4 05 F1 | 	add	objptr, ##35444
1258c     F2 1E 02 FB | 	rdlong	local01, objptr
12590     45 00 00 FF 
12594     74 E4 85 F1 | 	sub	objptr, ##35444
12598     5B 1E 16 F2 | 	cmp	local01, #91 wc
1259c     20 00 90 3D |  if_ae	jmp	#LR__1473
125a0     45 00 00 FF 
125a4     74 E4 05 F1 | 	add	objptr, ##35444
125a8     F2 1E 02 FB | 	rdlong	local01, objptr
125ac     20 1E 06 F1 | 	add	local01, #32
125b0     F2 1E 62 FC | 	wrlong	local01, objptr
125b4     45 00 00 FF 
125b8     74 E4 85 F1 | 	sub	objptr, ##35444
125bc     A8 00 90 FD | 	jmp	#LR__1477
125c0                 | LR__1473
125c0     45 00 00 FF 
125c4     74 E4 05 F1 | 	add	objptr, ##35444
125c8     F2 1E 02 FB | 	rdlong	local01, objptr
125cc     45 00 00 FF 
125d0     74 E4 85 F1 | 	sub	objptr, ##35444
125d4     17 1E 16 F2 | 	cmp	local01, #23 wc
125d8     3C 00 90 CD |  if_b	jmp	#LR__1474
125dc     45 00 00 FF 
125e0     74 E4 05 F1 | 	add	objptr, ##35444
125e4     F2 1E 02 FB | 	rdlong	local01, objptr
125e8     45 00 00 FF 
125ec     74 E4 85 F1 | 	sub	objptr, ##35444
125f0     20 1E 16 F2 | 	cmp	local01, #32 wc
125f4     20 00 90 3D |  if_ae	jmp	#LR__1474
125f8     45 00 00 FF 
125fc     74 E4 05 F1 | 	add	objptr, ##35444
12600     F2 1E 02 FB | 	rdlong	local01, objptr
12604     09 1E 86 F1 | 	sub	local01, #9
12608     F2 1E 62 FC | 	wrlong	local01, objptr
1260c     45 00 00 FF 
12610     74 E4 85 F1 | 	sub	objptr, ##35444
12614     50 00 90 FD | 	jmp	#LR__1476
12618                 | LR__1474
12618     45 00 00 FF 
1261c     74 E4 05 F1 | 	add	objptr, ##35444
12620     F2 20 02 FB | 	rdlong	local02, objptr
12624     45 00 00 FF 
12628     74 E4 85 F1 | 	sub	objptr, ##35444
1262c     0E 20 16 F2 | 	cmp	local02, #14 wc
12630     34 00 90 CD |  if_b	jmp	#LR__1475
12634     45 00 00 FF 
12638     74 E4 05 F1 | 	add	objptr, ##35444
1263c     F2 1E 02 FB | 	rdlong	local01, objptr
12640     45 00 00 FF 
12644     74 E4 85 F1 | 	sub	objptr, ##35444
12648     17 1E 16 F2 | 	cmp	local01, #23 wc
1264c     51 00 00 CF 
12650     E0 E5 05 C1 |  if_b	add	objptr, ##41952
12654     F2 20 02 CB |  if_b	rdlong	local02, objptr
12658     27 20 06 C1 |  if_b	add	local02, #39
1265c     F2 20 62 CC |  if_b	wrlong	local02, objptr
12660     51 00 00 CF 
12664     E0 E5 85 C1 |  if_b	sub	objptr, ##41952
12668                 | LR__1475
12668                 | LR__1476
12668                 | LR__1477
12668                 | LR__1478
12668                 | LR__1479
12668     45 00 00 FF 
1266c     74 E4 05 F1 | 	add	objptr, ##35444
12670     F2 12 02 FB | 	rdlong	arg01, objptr
12674     45 00 00 FF 
12678     74 E4 85 F1 | 	sub	objptr, ##35444
1267c     14 B2 B0 FD | 	call	#_scantochar
12680     FD 12 02 F6 | 	mov	arg01, result1
12684     A0 06 B1 FD | 	call	#__system__Chr_S
12688     A7 FA 61 FC | 	wrlong	result1, fp
1268c     0C 00 90 FD | 	jmp	#LR__1481
12690                 | LR__1480
12690     85 01 00 FF 
12694     C3 20 06 F6 | 	mov	local02, ##@LR__5472
12698     A7 20 62 FC | 	wrlong	local02, fp
1269c                 | LR__1481
1269c     08 4E 05 F1 | 	add	fp, #8
126a0     A7 3E 68 FC | 	wrlong	#31, fp
126a4     08 4E 85 F1 | 	sub	fp, #8
126a8     A7 12 02 F6 | 	mov	arg01, fp
126ac     40 94 BF FD | 	call	#_push
126b0     A7 F0 03 F6 | 	mov	ptra, fp
126b4     B2 00 A0 FD | 	call	#popregs_
126b8                 | _do_inkey_ret
126b8     2D 00 64 FD | 	ret
126bc                 | 
126bc                 | '  
126bc                 | ' '------------------------ Operators 
126bc                 | ' 
126bc                 | ' sub do_plus 
126bc                 | _do_plus
126bc     05 4A 05 F6 | 	mov	COUNT_, #5
126c0     A8 00 A0 FD | 	call	#pushregs_
126c4     18 F0 07 F1 | 	add	ptra, #24
126c8     8C 93 BF FD | 	call	#_pop
126cc     FD 1E 02 F6 | 	mov	local01, result1
126d0     FE 20 02 F6 | 	mov	local02, result2
126d4     FF 22 02 F6 | 	mov	local03, result3
126d8     0C 4E 05 F1 | 	add	fp, #12
126dc     A7 1E 62 FC | 	wrlong	local01, fp
126e0     04 4E 05 F1 | 	add	fp, #4
126e4     A7 20 62 FC | 	wrlong	local02, fp
126e8     04 4E 05 F1 | 	add	fp, #4
126ec     A7 22 62 FC | 	wrlong	local03, fp
126f0     14 4E 85 F1 | 	sub	fp, #20
126f4     60 93 BF FD | 	call	#_pop
126f8     FF 22 02 F6 | 	mov	local03, result3
126fc     A7 FA 61 FC | 	wrlong	result1, fp
12700     04 4E 05 F1 | 	add	fp, #4
12704     A7 FC 61 FC | 	wrlong	result2, fp
12708     04 4E 05 F1 | 	add	fp, #4
1270c     A7 22 62 FC | 	wrlong	local03, fp
12710                 | ' 
12710                 | ' t2=pop()
12710                 | ' t1=pop()
12710                 | ' 
12710                 | ' 
12710                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
12710     08 4E 85 F1 | 	sub	fp, #8
12714     1D 22 0E F2 | 	cmp	local03, #29 wz
12718     14 4E 05 A1 |  if_e	add	fp, #20
1271c     A7 24 02 AB |  if_e	rdlong	local04, fp
12720     14 4E 85 A1 |  if_e	sub	fp, #20
12724     12 23 02 A6 |  if_e	mov	local03, local04
12728     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1272c     1C 00 90 5D |  if_ne	jmp	#LR__1490
12730     A7 1E 02 FB | 	rdlong	local01, fp
12734     0C 4E 05 F1 | 	add	fp, #12
12738     A7 20 02 FB | 	rdlong	local02, fp
1273c     0C 4E 85 F1 | 	sub	fp, #12
12740     10 1F 02 F1 | 	add	local01, local02
12744     A7 1E 62 FC | 	wrlong	local01, fp
12748     48 04 90 FD | 	jmp	#LR__1505
1274c                 | LR__1490
1274c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
1274c     08 4E 05 F1 | 	add	fp, #8
12750     A7 1E 02 FB | 	rdlong	local01, fp
12754     08 4E 85 F1 | 	sub	fp, #8
12758     1D 1E 0E F2 | 	cmp	local01, #29 wz
1275c     14 4E 05 A1 |  if_e	add	fp, #20
12760     A7 24 02 AB |  if_e	rdlong	local04, fp
12764     14 4E 85 A1 |  if_e	sub	fp, #20
12768     12 23 02 A6 |  if_e	mov	local03, local04
1276c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12770     28 00 90 5D |  if_ne	jmp	#LR__1491
12774     A7 1E 02 FB | 	rdlong	local01, fp
12778     0C 4E 05 F1 | 	add	fp, #12
1277c     A7 20 02 FB | 	rdlong	local02, fp
12780     0C 4E 85 F1 | 	sub	fp, #12
12784     10 1F 02 F1 | 	add	local01, local02
12788     A7 1E 62 FC | 	wrlong	local01, fp
1278c     08 4E 05 F1 | 	add	fp, #8
12790     A7 38 68 FC | 	wrlong	#28, fp
12794     08 4E 85 F1 | 	sub	fp, #8
12798     F8 03 90 FD | 	jmp	#LR__1505
1279c                 | LR__1491
1279c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1279c     08 4E 05 F1 | 	add	fp, #8
127a0     A7 1E 02 FB | 	rdlong	local01, fp
127a4     08 4E 85 F1 | 	sub	fp, #8
127a8     1D 1E 0E F2 | 	cmp	local01, #29 wz
127ac     14 4E 05 A1 |  if_e	add	fp, #20
127b0     A7 24 02 AB |  if_e	rdlong	local04, fp
127b4     14 4E 85 A1 |  if_e	sub	fp, #20
127b8     12 23 02 A6 |  if_e	mov	local03, local04
127bc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
127c0     30 00 90 5D |  if_ne	jmp	#LR__1492
127c4     A7 12 02 FB | 	rdlong	arg01, fp
127c8     CC 0A B1 FD | 	call	#__system___float_fromuns
127cc     FD 12 02 F6 | 	mov	arg01, result1
127d0     0C 4E 05 F1 | 	add	fp, #12
127d4     A7 14 02 FB | 	rdlong	arg02, fp
127d8     0C 4E 85 F1 | 	sub	fp, #12
127dc     EC 0A B1 FD | 	call	#__system___float_add
127e0     A7 FA 61 FC | 	wrlong	result1, fp
127e4     08 4E 05 F1 | 	add	fp, #8
127e8     A7 3C 68 FC | 	wrlong	#30, fp
127ec     08 4E 85 F1 | 	sub	fp, #8
127f0     A0 03 90 FD | 	jmp	#LR__1505
127f4                 | LR__1492
127f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
127f4     08 4E 05 F1 | 	add	fp, #8
127f8     A7 1E 02 FB | 	rdlong	local01, fp
127fc     08 4E 85 F1 | 	sub	fp, #8
12800     1C 1E 0E F2 | 	cmp	local01, #28 wz
12804     14 4E 05 A1 |  if_e	add	fp, #20
12808     A7 24 02 AB |  if_e	rdlong	local04, fp
1280c     14 4E 85 A1 |  if_e	sub	fp, #20
12810     12 23 02 A6 |  if_e	mov	local03, local04
12814     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12818     1C 00 90 5D |  if_ne	jmp	#LR__1493
1281c     A7 1E 02 FB | 	rdlong	local01, fp
12820     0C 4E 05 F1 | 	add	fp, #12
12824     A7 20 02 FB | 	rdlong	local02, fp
12828     0C 4E 85 F1 | 	sub	fp, #12
1282c     10 1F 02 F1 | 	add	local01, local02
12830     A7 1E 62 FC | 	wrlong	local01, fp
12834     5C 03 90 FD | 	jmp	#LR__1505
12838                 | LR__1493
12838                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
12838     08 4E 05 F1 | 	add	fp, #8
1283c     A7 1E 02 FB | 	rdlong	local01, fp
12840     08 4E 85 F1 | 	sub	fp, #8
12844     1C 1E 0E F2 | 	cmp	local01, #28 wz
12848     14 4E 05 A1 |  if_e	add	fp, #20
1284c     A7 24 02 AB |  if_e	rdlong	local04, fp
12850     14 4E 85 A1 |  if_e	sub	fp, #20
12854     12 23 02 A6 |  if_e	mov	local03, local04
12858     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1285c     1C 00 90 5D |  if_ne	jmp	#LR__1494
12860     A7 1E 02 FB | 	rdlong	local01, fp
12864     0C 4E 05 F1 | 	add	fp, #12
12868     A7 20 02 FB | 	rdlong	local02, fp
1286c     0C 4E 85 F1 | 	sub	fp, #12
12870     10 1F 02 F1 | 	add	local01, local02
12874     A7 1E 62 FC | 	wrlong	local01, fp
12878     18 03 90 FD | 	jmp	#LR__1505
1287c                 | LR__1494
1287c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1287c     08 4E 05 F1 | 	add	fp, #8
12880     A7 1E 02 FB | 	rdlong	local01, fp
12884     08 4E 85 F1 | 	sub	fp, #8
12888     1C 1E 0E F2 | 	cmp	local01, #28 wz
1288c     14 4E 05 A1 |  if_e	add	fp, #20
12890     A7 24 02 AB |  if_e	rdlong	local04, fp
12894     14 4E 85 A1 |  if_e	sub	fp, #20
12898     12 23 02 A6 |  if_e	mov	local03, local04
1289c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
128a0     40 00 90 5D |  if_ne	jmp	#LR__1495
128a4     A7 12 02 FB | 	rdlong	arg01, fp
128a8     09 13 52 F6 | 	abs	arg01, arg01 wc
128ac     1F 26 C6 C9 |  if_b	decod	local05, #31
128b0     00 26 06 36 |  if_ae	mov	local05, #0
128b4     E0 09 B1 FD | 	call	#__system___float_fromuns
128b8     13 FB 61 F5 | 	xor	result1, local05
128bc     FD 12 02 F6 | 	mov	arg01, result1
128c0     0C 4E 05 F1 | 	add	fp, #12
128c4     A7 14 02 FB | 	rdlong	arg02, fp
128c8     0C 4E 85 F1 | 	sub	fp, #12
128cc     FC 09 B1 FD | 	call	#__system___float_add
128d0     A7 FA 61 FC | 	wrlong	result1, fp
128d4     08 4E 05 F1 | 	add	fp, #8
128d8     A7 3C 68 FC | 	wrlong	#30, fp
128dc     08 4E 85 F1 | 	sub	fp, #8
128e0     B0 02 90 FD | 	jmp	#LR__1505
128e4                 | LR__1495
128e4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
128e4     08 4E 05 F1 | 	add	fp, #8
128e8     A7 1E 02 FB | 	rdlong	local01, fp
128ec     08 4E 85 F1 | 	sub	fp, #8
128f0     1E 1E 0E F2 | 	cmp	local01, #30 wz
128f4     14 4E 05 A1 |  if_e	add	fp, #20
128f8     A7 24 02 AB |  if_e	rdlong	local04, fp
128fc     14 4E 85 A1 |  if_e	sub	fp, #20
12900     12 23 02 A6 |  if_e	mov	local03, local04
12904     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12908     28 00 90 5D |  if_ne	jmp	#LR__1496
1290c     A7 1E 02 FB | 	rdlong	local01, fp
12910     0C 4E 05 F1 | 	add	fp, #12
12914     A7 12 02 FB | 	rdlong	arg01, fp
12918     0C 4E 85 F1 | 	sub	fp, #12
1291c     78 09 B1 FD | 	call	#__system___float_fromuns
12920     FD 14 02 F6 | 	mov	arg02, result1
12924     0F 13 02 F6 | 	mov	arg01, local01
12928     A0 09 B1 FD | 	call	#__system___float_add
1292c     A7 FA 61 FC | 	wrlong	result1, fp
12930     60 02 90 FD | 	jmp	#LR__1505
12934                 | LR__1496
12934                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
12934     08 4E 05 F1 | 	add	fp, #8
12938     A7 1E 02 FB | 	rdlong	local01, fp
1293c     08 4E 85 F1 | 	sub	fp, #8
12940     1E 1E 0E F2 | 	cmp	local01, #30 wz
12944     14 4E 05 A1 |  if_e	add	fp, #20
12948     A7 24 02 AB |  if_e	rdlong	local04, fp
1294c     14 4E 85 A1 |  if_e	sub	fp, #20
12950     12 23 02 A6 |  if_e	mov	local03, local04
12954     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12958     38 00 90 5D |  if_ne	jmp	#LR__1497
1295c     A7 1E 02 FB | 	rdlong	local01, fp
12960     0C 4E 05 F1 | 	add	fp, #12
12964     A7 12 02 FB | 	rdlong	arg01, fp
12968     0C 4E 85 F1 | 	sub	fp, #12
1296c     09 13 52 F6 | 	abs	arg01, arg01 wc
12970     1F 26 C6 C9 |  if_b	decod	local05, #31
12974     00 26 06 36 |  if_ae	mov	local05, #0
12978     1C 09 B1 FD | 	call	#__system___float_fromuns
1297c     13 FB 61 F5 | 	xor	result1, local05
12980     FD 14 02 F6 | 	mov	arg02, result1
12984     0F 13 02 F6 | 	mov	arg01, local01
12988     40 09 B1 FD | 	call	#__system___float_add
1298c     A7 FA 61 FC | 	wrlong	result1, fp
12990     00 02 90 FD | 	jmp	#LR__1505
12994                 | LR__1497
12994                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
12994     08 4E 05 F1 | 	add	fp, #8
12998     A7 1E 02 FB | 	rdlong	local01, fp
1299c     08 4E 85 F1 | 	sub	fp, #8
129a0     1E 1E 0E F2 | 	cmp	local01, #30 wz
129a4     14 4E 05 A1 |  if_e	add	fp, #20
129a8     A7 24 02 AB |  if_e	rdlong	local04, fp
129ac     14 4E 85 A1 |  if_e	sub	fp, #20
129b0     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
129b4     1C 00 90 5D |  if_ne	jmp	#LR__1498
129b8     A7 12 02 FB | 	rdlong	arg01, fp
129bc     0C 4E 05 F1 | 	add	fp, #12
129c0     A7 14 02 FB | 	rdlong	arg02, fp
129c4     0C 4E 85 F1 | 	sub	fp, #12
129c8     00 09 B1 FD | 	call	#__system___float_add
129cc     A7 FA 61 FC | 	wrlong	result1, fp
129d0     C0 01 90 FD | 	jmp	#LR__1505
129d4                 | LR__1498
129d4                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
129d4     08 4E 05 F1 | 	add	fp, #8
129d8     A7 1E 02 FB | 	rdlong	local01, fp
129dc     08 4E 85 F1 | 	sub	fp, #8
129e0     1F 1E 0E F2 | 	cmp	local01, #31 wz
129e4     24 00 90 5D |  if_ne	jmp	#LR__1499
129e8     14 4E 05 F1 | 	add	fp, #20
129ec     A7 22 02 FB | 	rdlong	local03, fp
129f0     14 4E 85 F1 | 	sub	fp, #20
129f4     1F 22 0E F2 | 	cmp	local03, #31 wz
129f8     A7 04 68 5C |  if_ne	wrlong	#2, fp
129fc     08 4E 05 51 |  if_ne	add	fp, #8
12a00     A7 FE 69 5C |  if_ne	wrlong	#255, fp
12a04     08 4E 85 51 |  if_ne	sub	fp, #8
12a08     88 01 90 5D |  if_ne	jmp	#LR__1505
12a0c                 | LR__1499
12a0c                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
12a0c     14 4E 05 F1 | 	add	fp, #20
12a10     A7 1E 02 FB | 	rdlong	local01, fp
12a14     14 4E 85 F1 | 	sub	fp, #20
12a18     1F 1E 0E F2 | 	cmp	local01, #31 wz
12a1c     24 00 90 5D |  if_ne	jmp	#LR__1500
12a20     08 4E 05 F1 | 	add	fp, #8
12a24     A7 22 02 FB | 	rdlong	local03, fp
12a28     08 4E 85 F1 | 	sub	fp, #8
12a2c     1F 22 0E F2 | 	cmp	local03, #31 wz
12a30     A7 04 68 5C |  if_ne	wrlong	#2, fp
12a34     08 4E 05 51 |  if_ne	add	fp, #8
12a38     A7 FE 69 5C |  if_ne	wrlong	#255, fp
12a3c     08 4E 85 51 |  if_ne	sub	fp, #8
12a40     50 01 90 5D |  if_ne	jmp	#LR__1505
12a44                 | LR__1500
12a44                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
12a44     08 4E 05 F1 | 	add	fp, #8
12a48     A7 1E 02 FB | 	rdlong	local01, fp
12a4c     08 4E 85 F1 | 	sub	fp, #8
12a50     1F 1E 0E F2 | 	cmp	local01, #31 wz
12a54     14 4E 05 A1 |  if_e	add	fp, #20
12a58     A7 22 02 AB |  if_e	rdlong	local03, fp
12a5c     14 4E 85 A1 |  if_e	sub	fp, #20
12a60     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12a64     1C 00 90 5D |  if_ne	jmp	#LR__1501
12a68     A7 12 02 FB | 	rdlong	arg01, fp
12a6c     0C 4E 05 F1 | 	add	fp, #12
12a70     A7 14 02 FB | 	rdlong	arg02, fp
12a74     0C 4E 85 F1 | 	sub	fp, #12
12a78     C8 E0 B0 FD | 	call	#__system___string_concat
12a7c     A7 FA 61 FC | 	wrlong	result1, fp
12a80     10 01 90 FD | 	jmp	#LR__1505
12a84                 | LR__1501
12a84                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
12a84     08 4E 05 F1 | 	add	fp, #8
12a88     A7 1E 02 FB | 	rdlong	local01, fp
12a8c     08 4E 85 F1 | 	sub	fp, #8
12a90     2B 1E 0E F2 | 	cmp	local01, #43 wz
12a94     14 4E 05 A1 |  if_e	add	fp, #20
12a98     A7 22 02 AB |  if_e	rdlong	local03, fp
12a9c     14 4E 85 A1 |  if_e	sub	fp, #20
12aa0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12aa4     30 00 90 5D |  if_ne	jmp	#LR__1502
12aa8     A7 12 02 FB | 	rdlong	arg01, fp
12aac     20 E9 BF FD | 	call	#_convertstring
12ab0     FD 12 02 F6 | 	mov	arg01, result1
12ab4     0C 4E 05 F1 | 	add	fp, #12
12ab8     A7 14 02 FB | 	rdlong	arg02, fp
12abc     0C 4E 85 F1 | 	sub	fp, #12
12ac0     80 E0 B0 FD | 	call	#__system___string_concat
12ac4     A7 FA 61 FC | 	wrlong	result1, fp
12ac8     08 4E 05 F1 | 	add	fp, #8
12acc     A7 3E 68 FC | 	wrlong	#31, fp
12ad0     08 4E 85 F1 | 	sub	fp, #8
12ad4     BC 00 90 FD | 	jmp	#LR__1505
12ad8                 | LR__1502
12ad8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
12ad8     08 4E 05 F1 | 	add	fp, #8
12adc     A7 1E 02 FB | 	rdlong	local01, fp
12ae0     08 4E 85 F1 | 	sub	fp, #8
12ae4     1F 1E 0E F2 | 	cmp	local01, #31 wz
12ae8     14 4E 05 A1 |  if_e	add	fp, #20
12aec     A7 22 02 AB |  if_e	rdlong	local03, fp
12af0     14 4E 85 A1 |  if_e	sub	fp, #20
12af4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12af8     28 00 90 5D |  if_ne	jmp	#LR__1503
12afc     A7 1E 02 FB | 	rdlong	local01, fp
12b00     0C 4E 05 F1 | 	add	fp, #12
12b04     A7 12 02 FB | 	rdlong	arg01, fp
12b08     0C 4E 85 F1 | 	sub	fp, #12
12b0c     C0 E8 BF FD | 	call	#_convertstring
12b10     FD 14 02 F6 | 	mov	arg02, result1
12b14     0F 13 02 F6 | 	mov	arg01, local01
12b18     28 E0 B0 FD | 	call	#__system___string_concat
12b1c     A7 FA 61 FC | 	wrlong	result1, fp
12b20     70 00 90 FD | 	jmp	#LR__1505
12b24                 | LR__1503
12b24                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
12b24     08 4E 05 F1 | 	add	fp, #8
12b28     A7 1E 02 FB | 	rdlong	local01, fp
12b2c     08 4E 85 F1 | 	sub	fp, #8
12b30     2B 1E 0E F2 | 	cmp	local01, #43 wz
12b34     14 4E 05 A1 |  if_e	add	fp, #20
12b38     A7 22 02 AB |  if_e	rdlong	local03, fp
12b3c     14 4E 85 A1 |  if_e	sub	fp, #20
12b40     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12b44     3C 00 90 5D |  if_ne	jmp	#LR__1504
12b48     A7 12 02 FB | 	rdlong	arg01, fp
12b4c     80 E8 BF FD | 	call	#_convertstring
12b50     FD 1E 02 F6 | 	mov	local01, result1
12b54     0C 4E 05 F1 | 	add	fp, #12
12b58     A7 12 02 FB | 	rdlong	arg01, fp
12b5c     0C 4E 85 F1 | 	sub	fp, #12
12b60     6C E8 BF FD | 	call	#_convertstring
12b64     FD 14 02 F6 | 	mov	arg02, result1
12b68     0F 13 02 F6 | 	mov	arg01, local01
12b6c     D4 DF B0 FD | 	call	#__system___string_concat
12b70     A7 FA 61 FC | 	wrlong	result1, fp
12b74     08 4E 05 F1 | 	add	fp, #8
12b78     A7 3E 68 FC | 	wrlong	#31, fp
12b7c     08 4E 85 F1 | 	sub	fp, #8
12b80     10 00 90 FD | 	jmp	#LR__1505
12b84                 | LR__1504
12b84     A7 08 68 FC | 	wrlong	#4, fp
12b88     08 4E 05 F1 | 	add	fp, #8
12b8c     A7 FE 69 FC | 	wrlong	#255, fp
12b90     08 4E 85 F1 | 	sub	fp, #8
12b94                 | LR__1505
12b94     A7 12 02 F6 | 	mov	arg01, fp
12b98     54 8F BF FD | 	call	#_push
12b9c     A7 F0 03 F6 | 	mov	ptra, fp
12ba0     B2 00 A0 FD | 	call	#popregs_
12ba4                 | _do_plus_ret
12ba4     2D 00 64 FD | 	ret
12ba8                 | 
12ba8                 | ' 
12ba8                 | ' sub do_minus
12ba8                 | _do_minus
12ba8     05 4A 05 F6 | 	mov	COUNT_, #5
12bac     A8 00 A0 FD | 	call	#pushregs_
12bb0     18 F0 07 F1 | 	add	ptra, #24
12bb4     A0 8E BF FD | 	call	#_pop
12bb8     FD 1E 02 F6 | 	mov	local01, result1
12bbc     FE 20 02 F6 | 	mov	local02, result2
12bc0     FF 22 02 F6 | 	mov	local03, result3
12bc4     0C 4E 05 F1 | 	add	fp, #12
12bc8     A7 1E 62 FC | 	wrlong	local01, fp
12bcc     04 4E 05 F1 | 	add	fp, #4
12bd0     A7 20 62 FC | 	wrlong	local02, fp
12bd4     04 4E 05 F1 | 	add	fp, #4
12bd8     A7 22 62 FC | 	wrlong	local03, fp
12bdc     14 4E 85 F1 | 	sub	fp, #20
12be0     74 8E BF FD | 	call	#_pop
12be4     FF 22 02 F6 | 	mov	local03, result3
12be8     A7 FA 61 FC | 	wrlong	result1, fp
12bec     04 4E 05 F1 | 	add	fp, #4
12bf0     A7 FC 61 FC | 	wrlong	result2, fp
12bf4     04 4E 05 F1 | 	add	fp, #4
12bf8     A7 22 62 FC | 	wrlong	local03, fp
12bfc                 | ' 
12bfc                 | ' t2=pop()
12bfc                 | ' t1=pop()
12bfc                 | ' 
12bfc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
12bfc     08 4E 85 F1 | 	sub	fp, #8
12c00     1D 22 0E F2 | 	cmp	local03, #29 wz
12c04     14 4E 05 A1 |  if_e	add	fp, #20
12c08     A7 24 02 AB |  if_e	rdlong	local04, fp
12c0c     14 4E 85 A1 |  if_e	sub	fp, #20
12c10     12 23 02 A6 |  if_e	mov	local03, local04
12c14     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12c18     5C 00 90 5D |  if_ne	jmp	#LR__1511
12c1c                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
12c1c     0C 4E 05 F1 | 	add	fp, #12
12c20     A7 1E 02 FB | 	rdlong	local01, fp
12c24     0C 4E 85 F1 | 	sub	fp, #12
12c28     A7 22 02 FB | 	rdlong	local03, fp
12c2c     11 1F 12 F2 | 	cmp	local01, local03 wc
12c30     1C 00 90 3D |  if_ae	jmp	#LR__1510
12c34     A7 1E 02 FB | 	rdlong	local01, fp
12c38     0C 4E 05 F1 | 	add	fp, #12
12c3c     A7 20 02 FB | 	rdlong	local02, fp
12c40     0C 4E 85 F1 | 	sub	fp, #12
12c44     10 1F 82 F1 | 	sub	local01, local02
12c48     A7 1E 62 FC | 	wrlong	local01, fp
12c4c     F4 02 90 FD | 	jmp	#LR__1520
12c50                 | LR__1510
12c50     A7 1E 02 FB | 	rdlong	local01, fp
12c54     0C 4E 05 F1 | 	add	fp, #12
12c58     A7 20 02 FB | 	rdlong	local02, fp
12c5c     0C 4E 85 F1 | 	sub	fp, #12
12c60     10 1F 82 F1 | 	sub	local01, local02
12c64     A7 1E 62 FC | 	wrlong	local01, fp
12c68     08 4E 05 F1 | 	add	fp, #8
12c6c     A7 38 68 FC | 	wrlong	#28, fp
12c70     08 4E 85 F1 | 	sub	fp, #8
12c74     CC 02 90 FD | 	jmp	#LR__1520
12c78                 | LR__1511
12c78                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
12c78     08 4E 05 F1 | 	add	fp, #8
12c7c     A7 1E 02 FB | 	rdlong	local01, fp
12c80     08 4E 85 F1 | 	sub	fp, #8
12c84     1D 1E 0E F2 | 	cmp	local01, #29 wz
12c88     14 4E 05 A1 |  if_e	add	fp, #20
12c8c     A7 24 02 AB |  if_e	rdlong	local04, fp
12c90     14 4E 85 A1 |  if_e	sub	fp, #20
12c94     12 23 02 A6 |  if_e	mov	local03, local04
12c98     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12c9c     28 00 90 5D |  if_ne	jmp	#LR__1512
12ca0     A7 1E 02 FB | 	rdlong	local01, fp
12ca4     0C 4E 05 F1 | 	add	fp, #12
12ca8     A7 20 02 FB | 	rdlong	local02, fp
12cac     0C 4E 85 F1 | 	sub	fp, #12
12cb0     10 1F 82 F1 | 	sub	local01, local02
12cb4     A7 1E 62 FC | 	wrlong	local01, fp
12cb8     08 4E 05 F1 | 	add	fp, #8
12cbc     A7 38 68 FC | 	wrlong	#28, fp
12cc0     08 4E 85 F1 | 	sub	fp, #8
12cc4     7C 02 90 FD | 	jmp	#LR__1520
12cc8                 | LR__1512
12cc8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
12cc8     08 4E 05 F1 | 	add	fp, #8
12ccc     A7 1E 02 FB | 	rdlong	local01, fp
12cd0     08 4E 85 F1 | 	sub	fp, #8
12cd4     1D 1E 0E F2 | 	cmp	local01, #29 wz
12cd8     14 4E 05 A1 |  if_e	add	fp, #20
12cdc     A7 24 02 AB |  if_e	rdlong	local04, fp
12ce0     14 4E 85 A1 |  if_e	sub	fp, #20
12ce4     12 23 02 A6 |  if_e	mov	local03, local04
12ce8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12cec     34 00 90 5D |  if_ne	jmp	#LR__1513
12cf0     A7 12 02 FB | 	rdlong	arg01, fp
12cf4     A0 05 B1 FD | 	call	#__system___float_fromuns
12cf8     FD 12 02 F6 | 	mov	arg01, result1
12cfc     0C 4E 05 F1 | 	add	fp, #12
12d00     A7 14 02 FB | 	rdlong	arg02, fp
12d04     0C 4E 85 F1 | 	sub	fp, #12
12d08     1F 14 E6 F4 | 	bitnot	arg02, #31
12d0c     BC 05 B1 FD | 	call	#__system___float_add
12d10     A7 FA 61 FC | 	wrlong	result1, fp
12d14     08 4E 05 F1 | 	add	fp, #8
12d18     A7 3C 68 FC | 	wrlong	#30, fp
12d1c     08 4E 85 F1 | 	sub	fp, #8
12d20     20 02 90 FD | 	jmp	#LR__1520
12d24                 | LR__1513
12d24                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
12d24     08 4E 05 F1 | 	add	fp, #8
12d28     A7 1E 02 FB | 	rdlong	local01, fp
12d2c     08 4E 85 F1 | 	sub	fp, #8
12d30     1C 1E 0E F2 | 	cmp	local01, #28 wz
12d34     14 4E 05 A1 |  if_e	add	fp, #20
12d38     A7 24 02 AB |  if_e	rdlong	local04, fp
12d3c     14 4E 85 A1 |  if_e	sub	fp, #20
12d40     12 23 02 A6 |  if_e	mov	local03, local04
12d44     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12d48     1C 00 90 5D |  if_ne	jmp	#LR__1514
12d4c     A7 1E 02 FB | 	rdlong	local01, fp
12d50     0C 4E 05 F1 | 	add	fp, #12
12d54     A7 20 02 FB | 	rdlong	local02, fp
12d58     0C 4E 85 F1 | 	sub	fp, #12
12d5c     10 1F 82 F1 | 	sub	local01, local02
12d60     A7 1E 62 FC | 	wrlong	local01, fp
12d64     DC 01 90 FD | 	jmp	#LR__1520
12d68                 | LR__1514
12d68                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
12d68     08 4E 05 F1 | 	add	fp, #8
12d6c     A7 1E 02 FB | 	rdlong	local01, fp
12d70     08 4E 85 F1 | 	sub	fp, #8
12d74     1C 1E 0E F2 | 	cmp	local01, #28 wz
12d78     14 4E 05 A1 |  if_e	add	fp, #20
12d7c     A7 24 02 AB |  if_e	rdlong	local04, fp
12d80     14 4E 85 A1 |  if_e	sub	fp, #20
12d84     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
12d88     1C 00 90 5D |  if_ne	jmp	#LR__1515
12d8c     A7 1E 02 FB | 	rdlong	local01, fp
12d90     0C 4E 05 F1 | 	add	fp, #12
12d94     A7 20 02 FB | 	rdlong	local02, fp
12d98     0C 4E 85 F1 | 	sub	fp, #12
12d9c     10 1F 82 F1 | 	sub	local01, local02
12da0     A7 1E 62 FC | 	wrlong	local01, fp
12da4     9C 01 90 FD | 	jmp	#LR__1520
12da8                 | LR__1515
12da8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
12da8     08 4E 05 F1 | 	add	fp, #8
12dac     A7 1E 02 FB | 	rdlong	local01, fp
12db0     08 4E 85 F1 | 	sub	fp, #8
12db4     1C 1E 0E F2 | 	cmp	local01, #28 wz
12db8     14 4E 05 A1 |  if_e	add	fp, #20
12dbc     A7 22 02 AB |  if_e	rdlong	local03, fp
12dc0     14 4E 85 A1 |  if_e	sub	fp, #20
12dc4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12dc8     44 00 90 5D |  if_ne	jmp	#LR__1516
12dcc     A7 12 02 FB | 	rdlong	arg01, fp
12dd0     09 13 52 F6 | 	abs	arg01, arg01 wc
12dd4     1F 26 C6 C9 |  if_b	decod	local05, #31
12dd8     00 26 06 36 |  if_ae	mov	local05, #0
12ddc     B8 04 B1 FD | 	call	#__system___float_fromuns
12de0     13 FB 61 F5 | 	xor	result1, local05
12de4     FD 12 02 F6 | 	mov	arg01, result1
12de8     0C 4E 05 F1 | 	add	fp, #12
12dec     A7 14 02 FB | 	rdlong	arg02, fp
12df0     0C 4E 85 F1 | 	sub	fp, #12
12df4     1F 14 E6 F4 | 	bitnot	arg02, #31
12df8     D0 04 B1 FD | 	call	#__system___float_add
12dfc     A7 FA 61 FC | 	wrlong	result1, fp
12e00     08 4E 05 F1 | 	add	fp, #8
12e04     A7 3C 68 FC | 	wrlong	#30, fp
12e08     08 4E 85 F1 | 	sub	fp, #8
12e0c     34 01 90 FD | 	jmp	#LR__1520
12e10                 | LR__1516
12e10                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
12e10     08 4E 05 F1 | 	add	fp, #8
12e14     A7 1E 02 FB | 	rdlong	local01, fp
12e18     08 4E 85 F1 | 	sub	fp, #8
12e1c     1E 1E 0E F2 | 	cmp	local01, #30 wz
12e20     14 4E 05 A1 |  if_e	add	fp, #20
12e24     A7 22 02 AB |  if_e	rdlong	local03, fp
12e28     14 4E 85 A1 |  if_e	sub	fp, #20
12e2c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12e30     2C 00 90 5D |  if_ne	jmp	#LR__1517
12e34     A7 1E 02 FB | 	rdlong	local01, fp
12e38     0C 4E 05 F1 | 	add	fp, #12
12e3c     A7 12 02 FB | 	rdlong	arg01, fp
12e40     0C 4E 85 F1 | 	sub	fp, #12
12e44     50 04 B1 FD | 	call	#__system___float_fromuns
12e48     FD 14 02 F6 | 	mov	arg02, result1
12e4c     0F 13 02 F6 | 	mov	arg01, local01
12e50     1F 14 E6 F4 | 	bitnot	arg02, #31
12e54     74 04 B1 FD | 	call	#__system___float_add
12e58     A7 FA 61 FC | 	wrlong	result1, fp
12e5c     E4 00 90 FD | 	jmp	#LR__1520
12e60                 | LR__1517
12e60                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
12e60     08 4E 05 F1 | 	add	fp, #8
12e64     A7 1E 02 FB | 	rdlong	local01, fp
12e68     08 4E 85 F1 | 	sub	fp, #8
12e6c     1E 1E 0E F2 | 	cmp	local01, #30 wz
12e70     14 4E 05 A1 |  if_e	add	fp, #20
12e74     A7 22 02 AB |  if_e	rdlong	local03, fp
12e78     14 4E 85 A1 |  if_e	sub	fp, #20
12e7c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12e80     3C 00 90 5D |  if_ne	jmp	#LR__1518
12e84     A7 1E 02 FB | 	rdlong	local01, fp
12e88     0C 4E 05 F1 | 	add	fp, #12
12e8c     A7 12 02 FB | 	rdlong	arg01, fp
12e90     0C 4E 85 F1 | 	sub	fp, #12
12e94     09 13 52 F6 | 	abs	arg01, arg01 wc
12e98     1F 26 C6 C9 |  if_b	decod	local05, #31
12e9c     00 26 06 36 |  if_ae	mov	local05, #0
12ea0     F4 03 B1 FD | 	call	#__system___float_fromuns
12ea4     13 FB 61 F5 | 	xor	result1, local05
12ea8     FD 14 02 F6 | 	mov	arg02, result1
12eac     0F 13 02 F6 | 	mov	arg01, local01
12eb0     1F 14 E6 F4 | 	bitnot	arg02, #31
12eb4     14 04 B1 FD | 	call	#__system___float_add
12eb8     A7 FA 61 FC | 	wrlong	result1, fp
12ebc     84 00 90 FD | 	jmp	#LR__1520
12ec0                 | LR__1518
12ec0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
12ec0     08 4E 05 F1 | 	add	fp, #8
12ec4     A7 1E 02 FB | 	rdlong	local01, fp
12ec8     08 4E 85 F1 | 	sub	fp, #8
12ecc     1E 1E 0E F2 | 	cmp	local01, #30 wz
12ed0     14 4E 05 A1 |  if_e	add	fp, #20
12ed4     A7 22 02 AB |  if_e	rdlong	local03, fp
12ed8     14 4E 85 A1 |  if_e	sub	fp, #20
12edc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12ee0     20 00 90 5D |  if_ne	jmp	#LR__1519
12ee4     A7 12 02 FB | 	rdlong	arg01, fp
12ee8     0C 4E 05 F1 | 	add	fp, #12
12eec     A7 14 02 FB | 	rdlong	arg02, fp
12ef0     0C 4E 85 F1 | 	sub	fp, #12
12ef4     1F 14 E6 F4 | 	bitnot	arg02, #31
12ef8     D0 03 B1 FD | 	call	#__system___float_add
12efc     A7 FA 61 FC | 	wrlong	result1, fp
12f00     40 00 90 FD | 	jmp	#LR__1520
12f04                 | LR__1519
12f04                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
12f04     08 4E 05 F1 | 	add	fp, #8
12f08     A7 1E 02 FB | 	rdlong	local01, fp
12f0c     08 4E 85 F1 | 	sub	fp, #8
12f10     1F 1E 0E F2 | 	cmp	local01, #31 wz
12f14     14 4E 05 51 |  if_ne	add	fp, #20
12f18     A7 22 02 5B |  if_ne	rdlong	local03, fp
12f1c     14 4E 85 51 |  if_ne	sub	fp, #20
12f20     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
12f24     A7 06 68 AC |  if_e	wrlong	#3, fp
12f28     08 4E 05 A1 |  if_e	add	fp, #8
12f2c     A7 FE 69 AC |  if_e	wrlong	#255, fp
12f30     08 4E 85 A1 |  if_e	sub	fp, #8
12f34     A7 0A 68 5C |  if_ne	wrlong	#5, fp
12f38     08 4E 05 51 |  if_ne	add	fp, #8
12f3c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
12f40     08 4E 85 51 |  if_ne	sub	fp, #8
12f44                 | LR__1520
12f44     A7 12 02 F6 | 	mov	arg01, fp
12f48     A4 8B BF FD | 	call	#_push
12f4c     A7 F0 03 F6 | 	mov	ptra, fp
12f50     B2 00 A0 FD | 	call	#popregs_
12f54                 | _do_minus_ret
12f54     2D 00 64 FD | 	ret
12f58                 | 
12f58                 | ' 
12f58                 | ' sub do_and 
12f58                 | _do_and
12f58     03 4A 05 F6 | 	mov	COUNT_, #3
12f5c     A8 00 A0 FD | 	call	#pushregs_
12f60     18 F0 07 F1 | 	add	ptra, #24
12f64     F0 8A BF FD | 	call	#_pop
12f68     FD 12 02 F6 | 	mov	arg01, result1
12f6c     FE 1E 02 F6 | 	mov	local01, result2
12f70     FF 20 02 F6 | 	mov	local02, result3
12f74     0C 4E 05 F1 | 	add	fp, #12
12f78     A7 12 62 FC | 	wrlong	arg01, fp
12f7c     04 4E 05 F1 | 	add	fp, #4
12f80     A7 1E 62 FC | 	wrlong	local01, fp
12f84     04 4E 05 F1 | 	add	fp, #4
12f88     A7 20 62 FC | 	wrlong	local02, fp
12f8c     14 4E 85 F1 | 	sub	fp, #20
12f90     C4 8A BF FD | 	call	#_pop
12f94     FF 22 02 F6 | 	mov	local03, result3
12f98     A7 FA 61 FC | 	wrlong	result1, fp
12f9c     04 4E 05 F1 | 	add	fp, #4
12fa0     A7 FC 61 FC | 	wrlong	result2, fp
12fa4     04 4E 05 F1 | 	add	fp, #4
12fa8     A7 22 62 FC | 	wrlong	local03, fp
12fac                 | ' 
12fac                 | ' t2=pop()
12fac                 | ' t1=pop()
12fac                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
12fac     08 4E 85 F1 | 	sub	fp, #8
12fb0     1C 22 0E F2 | 	cmp	local03, #28 wz
12fb4     A7 22 02 AB |  if_e	rdlong	local03, fp
12fb8     A7 22 62 AC |  if_e	wrlong	local03, fp
12fbc     08 4E 05 A1 |  if_e	add	fp, #8
12fc0     A7 3A 68 AC |  if_e	wrlong	#29, fp
12fc4     08 4E 85 A1 |  if_e	sub	fp, #8
12fc8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
12fc8     14 4E 05 F1 | 	add	fp, #20
12fcc     A7 22 02 FB | 	rdlong	local03, fp
12fd0     14 4E 85 F1 | 	sub	fp, #20
12fd4     1C 22 0E F2 | 	cmp	local03, #28 wz
12fd8     18 00 90 5D |  if_ne	jmp	#LR__1530
12fdc     0C 4E 05 F1 | 	add	fp, #12
12fe0     A7 22 02 FB | 	rdlong	local03, fp
12fe4     A7 22 62 FC | 	wrlong	local03, fp
12fe8     08 4E 05 F1 | 	add	fp, #8
12fec     A7 3A 68 FC | 	wrlong	#29, fp
12ff0     14 4E 85 F1 | 	sub	fp, #20
12ff4                 | LR__1530
12ff4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
12ff4     08 4E 05 F1 | 	add	fp, #8
12ff8     A7 22 02 FB | 	rdlong	local03, fp
12ffc     08 4E 85 F1 | 	sub	fp, #8
13000     1F 22 0E F2 | 	cmp	local03, #31 wz
13004     14 4E 05 51 |  if_ne	add	fp, #20
13008     A7 20 02 5B |  if_ne	rdlong	local02, fp
1300c     14 4E 85 51 |  if_ne	sub	fp, #20
13010     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
13014     08 4E 05 51 |  if_ne	add	fp, #8
13018     A7 22 02 5B |  if_ne	rdlong	local03, fp
1301c     08 4E 85 51 |  if_ne	sub	fp, #8
13020     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
13024     14 4E 05 51 |  if_ne	add	fp, #20
13028     14 4E 85 51 |  if_ne	sub	fp, #20
1302c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
13030     A7 0C 68 AC |  if_e	wrlong	#6, fp
13034     08 4E 05 A1 |  if_e	add	fp, #8
13038     A7 FE 69 AC |  if_e	wrlong	#255, fp
1303c     08 4E 85 A1 |  if_e	sub	fp, #8
13040     18 00 90 AD |  if_e	jmp	#LR__1531
13044     A7 22 02 FB | 	rdlong	local03, fp
13048     0C 4E 05 F1 | 	add	fp, #12
1304c     A7 1E 02 FB | 	rdlong	local01, fp
13050     0C 4E 85 F1 | 	sub	fp, #12
13054     0F 23 02 F5 | 	and	local03, local01
13058     A7 22 62 FC | 	wrlong	local03, fp
1305c                 | LR__1531
1305c     A7 12 02 F6 | 	mov	arg01, fp
13060     8C 8A BF FD | 	call	#_push
13064     A7 F0 03 F6 | 	mov	ptra, fp
13068     B2 00 A0 FD | 	call	#popregs_
1306c                 | _do_and_ret
1306c     2D 00 64 FD | 	ret
13070                 | 
13070                 | ' 
13070                 | ' sub do_or 
13070                 | _do_or
13070     03 4A 05 F6 | 	mov	COUNT_, #3
13074     A8 00 A0 FD | 	call	#pushregs_
13078     18 F0 07 F1 | 	add	ptra, #24
1307c     D8 89 BF FD | 	call	#_pop
13080     FD 12 02 F6 | 	mov	arg01, result1
13084     FE 1E 02 F6 | 	mov	local01, result2
13088     FF 20 02 F6 | 	mov	local02, result3
1308c     0C 4E 05 F1 | 	add	fp, #12
13090     A7 12 62 FC | 	wrlong	arg01, fp
13094     04 4E 05 F1 | 	add	fp, #4
13098     A7 1E 62 FC | 	wrlong	local01, fp
1309c     04 4E 05 F1 | 	add	fp, #4
130a0     A7 20 62 FC | 	wrlong	local02, fp
130a4     14 4E 85 F1 | 	sub	fp, #20
130a8     AC 89 BF FD | 	call	#_pop
130ac     FF 22 02 F6 | 	mov	local03, result3
130b0     A7 FA 61 FC | 	wrlong	result1, fp
130b4     04 4E 05 F1 | 	add	fp, #4
130b8     A7 FC 61 FC | 	wrlong	result2, fp
130bc     04 4E 05 F1 | 	add	fp, #4
130c0     A7 22 62 FC | 	wrlong	local03, fp
130c4                 | ' 
130c4                 | ' t2=pop()
130c4                 | ' t1=pop()
130c4                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
130c4     08 4E 85 F1 | 	sub	fp, #8
130c8     1C 22 0E F2 | 	cmp	local03, #28 wz
130cc     A7 22 02 AB |  if_e	rdlong	local03, fp
130d0     A7 22 62 AC |  if_e	wrlong	local03, fp
130d4     08 4E 05 A1 |  if_e	add	fp, #8
130d8     A7 3A 68 AC |  if_e	wrlong	#29, fp
130dc     08 4E 85 A1 |  if_e	sub	fp, #8
130e0                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
130e0     14 4E 05 F1 | 	add	fp, #20
130e4     A7 22 02 FB | 	rdlong	local03, fp
130e8     14 4E 85 F1 | 	sub	fp, #20
130ec     1C 22 0E F2 | 	cmp	local03, #28 wz
130f0     18 00 90 5D |  if_ne	jmp	#LR__1540
130f4     0C 4E 05 F1 | 	add	fp, #12
130f8     A7 22 02 FB | 	rdlong	local03, fp
130fc     A7 22 62 FC | 	wrlong	local03, fp
13100     08 4E 05 F1 | 	add	fp, #8
13104     A7 3A 68 FC | 	wrlong	#29, fp
13108     14 4E 85 F1 | 	sub	fp, #20
1310c                 | LR__1540
1310c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
1310c     08 4E 05 F1 | 	add	fp, #8
13110     A7 22 02 FB | 	rdlong	local03, fp
13114     08 4E 85 F1 | 	sub	fp, #8
13118     1F 22 0E F2 | 	cmp	local03, #31 wz
1311c     14 4E 05 51 |  if_ne	add	fp, #20
13120     A7 20 02 5B |  if_ne	rdlong	local02, fp
13124     14 4E 85 51 |  if_ne	sub	fp, #20
13128     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
1312c     08 4E 05 51 |  if_ne	add	fp, #8
13130     A7 22 02 5B |  if_ne	rdlong	local03, fp
13134     08 4E 85 51 |  if_ne	sub	fp, #8
13138     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
1313c     14 4E 05 51 |  if_ne	add	fp, #20
13140     14 4E 85 51 |  if_ne	sub	fp, #20
13144     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
13148     A7 0C 68 AC |  if_e	wrlong	#6, fp
1314c     08 4E 05 A1 |  if_e	add	fp, #8
13150     A7 FE 69 AC |  if_e	wrlong	#255, fp
13154     08 4E 85 A1 |  if_e	sub	fp, #8
13158     18 00 90 AD |  if_e	jmp	#LR__1541
1315c     A7 22 02 FB | 	rdlong	local03, fp
13160     0C 4E 05 F1 | 	add	fp, #12
13164     A7 1E 02 FB | 	rdlong	local01, fp
13168     0C 4E 85 F1 | 	sub	fp, #12
1316c     0F 23 42 F5 | 	or	local03, local01
13170     A7 22 62 FC | 	wrlong	local03, fp
13174                 | LR__1541
13174     A7 12 02 F6 | 	mov	arg01, fp
13178     74 89 BF FD | 	call	#_push
1317c     A7 F0 03 F6 | 	mov	ptra, fp
13180     B2 00 A0 FD | 	call	#popregs_
13184                 | _do_or_ret
13184     2D 00 64 FD | 	ret
13188                 | 
13188                 | ' 
13188                 | ' sub do_mul
13188                 | _do_mul
13188     05 4A 05 F6 | 	mov	COUNT_, #5
1318c     A8 00 A0 FD | 	call	#pushregs_
13190     18 F0 07 F1 | 	add	ptra, #24
13194     C0 88 BF FD | 	call	#_pop
13198     FD 1E 02 F6 | 	mov	local01, result1
1319c     FE 20 02 F6 | 	mov	local02, result2
131a0     FF 22 02 F6 | 	mov	local03, result3
131a4     0C 4E 05 F1 | 	add	fp, #12
131a8     A7 1E 62 FC | 	wrlong	local01, fp
131ac     04 4E 05 F1 | 	add	fp, #4
131b0     A7 20 62 FC | 	wrlong	local02, fp
131b4     04 4E 05 F1 | 	add	fp, #4
131b8     A7 22 62 FC | 	wrlong	local03, fp
131bc     14 4E 85 F1 | 	sub	fp, #20
131c0     94 88 BF FD | 	call	#_pop
131c4     FF 22 02 F6 | 	mov	local03, result3
131c8     A7 FA 61 FC | 	wrlong	result1, fp
131cc     04 4E 05 F1 | 	add	fp, #4
131d0     A7 FC 61 FC | 	wrlong	result2, fp
131d4     04 4E 05 F1 | 	add	fp, #4
131d8     A7 22 62 FC | 	wrlong	local03, fp
131dc                 | ' 
131dc                 | ' t2=pop()
131dc                 | ' t1=pop()
131dc                 | ' 
131dc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
131dc     08 4E 85 F1 | 	sub	fp, #8
131e0     1D 22 0E F2 | 	cmp	local03, #29 wz
131e4     14 4E 05 A1 |  if_e	add	fp, #20
131e8     A7 24 02 AB |  if_e	rdlong	local04, fp
131ec     14 4E 85 A1 |  if_e	sub	fp, #20
131f0     12 23 02 A6 |  if_e	mov	local03, local04
131f4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
131f8     20 00 90 5D |  if_ne	jmp	#LR__1550
131fc     A7 20 02 FB | 	rdlong	local02, fp
13200     0C 4E 05 F1 | 	add	fp, #12
13204     A7 22 02 FB | 	rdlong	local03, fp
13208     11 21 02 FD | 	qmul	local02, local03
1320c     0C 4E 85 F1 | 	sub	fp, #12
13210     18 1E 62 FD | 	getqx	local01
13214     A7 1E 62 FC | 	wrlong	local01, fp
13218     C4 02 90 FD | 	jmp	#LR__1559
1321c                 | LR__1550
1321c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
1321c     08 4E 05 F1 | 	add	fp, #8
13220     A7 1E 02 FB | 	rdlong	local01, fp
13224     08 4E 85 F1 | 	sub	fp, #8
13228     1D 1E 0E F2 | 	cmp	local01, #29 wz
1322c     14 4E 05 A1 |  if_e	add	fp, #20
13230     A7 24 02 AB |  if_e	rdlong	local04, fp
13234     14 4E 85 A1 |  if_e	sub	fp, #20
13238     12 23 02 A6 |  if_e	mov	local03, local04
1323c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13240     2C 00 90 5D |  if_ne	jmp	#LR__1551
13244     A7 20 02 FB | 	rdlong	local02, fp
13248     0C 4E 05 F1 | 	add	fp, #12
1324c     A7 22 02 FB | 	rdlong	local03, fp
13250     11 21 02 FD | 	qmul	local02, local03
13254     0C 4E 85 F1 | 	sub	fp, #12
13258     18 1E 62 FD | 	getqx	local01
1325c     A7 1E 62 FC | 	wrlong	local01, fp
13260     08 4E 05 F1 | 	add	fp, #8
13264     A7 38 68 FC | 	wrlong	#28, fp
13268     08 4E 85 F1 | 	sub	fp, #8
1326c     70 02 90 FD | 	jmp	#LR__1559
13270                 | LR__1551
13270                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
13270     08 4E 05 F1 | 	add	fp, #8
13274     A7 1E 02 FB | 	rdlong	local01, fp
13278     08 4E 85 F1 | 	sub	fp, #8
1327c     1D 1E 0E F2 | 	cmp	local01, #29 wz
13280     14 4E 05 A1 |  if_e	add	fp, #20
13284     A7 24 02 AB |  if_e	rdlong	local04, fp
13288     14 4E 85 A1 |  if_e	sub	fp, #20
1328c     12 23 02 A6 |  if_e	mov	local03, local04
13290     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13294     30 00 90 5D |  if_ne	jmp	#LR__1552
13298     A7 12 02 FB | 	rdlong	arg01, fp
1329c     F8 FF B0 FD | 	call	#__system___float_fromuns
132a0     FD 12 02 F6 | 	mov	arg01, result1
132a4     0C 4E 05 F1 | 	add	fp, #12
132a8     A7 14 02 FB | 	rdlong	arg02, fp
132ac     0C 4E 85 F1 | 	sub	fp, #12
132b0     E8 03 B1 FD | 	call	#__system___float_mul
132b4     A7 FA 61 FC | 	wrlong	result1, fp
132b8     08 4E 05 F1 | 	add	fp, #8
132bc     A7 3C 68 FC | 	wrlong	#30, fp
132c0     08 4E 85 F1 | 	sub	fp, #8
132c4     18 02 90 FD | 	jmp	#LR__1559
132c8                 | LR__1552
132c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
132c8     08 4E 05 F1 | 	add	fp, #8
132cc     A7 1E 02 FB | 	rdlong	local01, fp
132d0     08 4E 85 F1 | 	sub	fp, #8
132d4     1C 1E 0E F2 | 	cmp	local01, #28 wz
132d8     14 4E 05 A1 |  if_e	add	fp, #20
132dc     A7 24 02 AB |  if_e	rdlong	local04, fp
132e0     14 4E 85 A1 |  if_e	sub	fp, #20
132e4     12 23 02 A6 |  if_e	mov	local03, local04
132e8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
132ec     20 00 90 5D |  if_ne	jmp	#LR__1553
132f0     A7 20 02 FB | 	rdlong	local02, fp
132f4     0C 4E 05 F1 | 	add	fp, #12
132f8     A7 22 02 FB | 	rdlong	local03, fp
132fc     11 21 02 FD | 	qmul	local02, local03
13300     0C 4E 85 F1 | 	sub	fp, #12
13304     18 1E 62 FD | 	getqx	local01
13308     A7 1E 62 FC | 	wrlong	local01, fp
1330c     D0 01 90 FD | 	jmp	#LR__1559
13310                 | LR__1553
13310                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
13310     08 4E 05 F1 | 	add	fp, #8
13314     A7 1E 02 FB | 	rdlong	local01, fp
13318     08 4E 85 F1 | 	sub	fp, #8
1331c     1C 1E 0E F2 | 	cmp	local01, #28 wz
13320     14 4E 05 A1 |  if_e	add	fp, #20
13324     A7 24 02 AB |  if_e	rdlong	local04, fp
13328     14 4E 85 A1 |  if_e	sub	fp, #20
1332c     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
13330     20 00 90 5D |  if_ne	jmp	#LR__1554
13334     A7 20 02 FB | 	rdlong	local02, fp
13338     0C 4E 05 F1 | 	add	fp, #12
1333c     A7 22 02 FB | 	rdlong	local03, fp
13340     11 21 02 FD | 	qmul	local02, local03
13344     0C 4E 85 F1 | 	sub	fp, #12
13348     18 1E 62 FD | 	getqx	local01
1334c     A7 1E 62 FC | 	wrlong	local01, fp
13350     8C 01 90 FD | 	jmp	#LR__1559
13354                 | LR__1554
13354                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
13354     08 4E 05 F1 | 	add	fp, #8
13358     A7 1E 02 FB | 	rdlong	local01, fp
1335c     08 4E 85 F1 | 	sub	fp, #8
13360     1C 1E 0E F2 | 	cmp	local01, #28 wz
13364     14 4E 05 A1 |  if_e	add	fp, #20
13368     A7 22 02 AB |  if_e	rdlong	local03, fp
1336c     14 4E 85 A1 |  if_e	sub	fp, #20
13370     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13374     40 00 90 5D |  if_ne	jmp	#LR__1555
13378     A7 12 02 FB | 	rdlong	arg01, fp
1337c     09 13 52 F6 | 	abs	arg01, arg01 wc
13380     1F 26 C6 C9 |  if_b	decod	local05, #31
13384     00 26 06 36 |  if_ae	mov	local05, #0
13388     0C FF B0 FD | 	call	#__system___float_fromuns
1338c     13 FB 61 F5 | 	xor	result1, local05
13390     FD 12 02 F6 | 	mov	arg01, result1
13394     0C 4E 05 F1 | 	add	fp, #12
13398     A7 14 02 FB | 	rdlong	arg02, fp
1339c     0C 4E 85 F1 | 	sub	fp, #12
133a0     F8 02 B1 FD | 	call	#__system___float_mul
133a4     A7 FA 61 FC | 	wrlong	result1, fp
133a8     08 4E 05 F1 | 	add	fp, #8
133ac     A7 3C 68 FC | 	wrlong	#30, fp
133b0     08 4E 85 F1 | 	sub	fp, #8
133b4     28 01 90 FD | 	jmp	#LR__1559
133b8                 | LR__1555
133b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
133b8     08 4E 05 F1 | 	add	fp, #8
133bc     A7 1E 02 FB | 	rdlong	local01, fp
133c0     08 4E 85 F1 | 	sub	fp, #8
133c4     1E 1E 0E F2 | 	cmp	local01, #30 wz
133c8     14 4E 05 A1 |  if_e	add	fp, #20
133cc     A7 22 02 AB |  if_e	rdlong	local03, fp
133d0     14 4E 85 A1 |  if_e	sub	fp, #20
133d4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
133d8     28 00 90 5D |  if_ne	jmp	#LR__1556
133dc     A7 1E 02 FB | 	rdlong	local01, fp
133e0     0C 4E 05 F1 | 	add	fp, #12
133e4     A7 12 02 FB | 	rdlong	arg01, fp
133e8     0C 4E 85 F1 | 	sub	fp, #12
133ec     A8 FE B0 FD | 	call	#__system___float_fromuns
133f0     FD 14 02 F6 | 	mov	arg02, result1
133f4     0F 13 02 F6 | 	mov	arg01, local01
133f8     A0 02 B1 FD | 	call	#__system___float_mul
133fc     A7 FA 61 FC | 	wrlong	result1, fp
13400     DC 00 90 FD | 	jmp	#LR__1559
13404                 | LR__1556
13404                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
13404     08 4E 05 F1 | 	add	fp, #8
13408     A7 1E 02 FB | 	rdlong	local01, fp
1340c     08 4E 85 F1 | 	sub	fp, #8
13410     1E 1E 0E F2 | 	cmp	local01, #30 wz
13414     14 4E 05 A1 |  if_e	add	fp, #20
13418     A7 22 02 AB |  if_e	rdlong	local03, fp
1341c     14 4E 85 A1 |  if_e	sub	fp, #20
13420     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13424     38 00 90 5D |  if_ne	jmp	#LR__1557
13428     A7 1E 02 FB | 	rdlong	local01, fp
1342c     0C 4E 05 F1 | 	add	fp, #12
13430     A7 12 02 FB | 	rdlong	arg01, fp
13434     0C 4E 85 F1 | 	sub	fp, #12
13438     09 13 52 F6 | 	abs	arg01, arg01 wc
1343c     1F 26 C6 C9 |  if_b	decod	local05, #31
13440     00 26 06 36 |  if_ae	mov	local05, #0
13444     50 FE B0 FD | 	call	#__system___float_fromuns
13448     13 FB 61 F5 | 	xor	result1, local05
1344c     FD 14 02 F6 | 	mov	arg02, result1
13450     0F 13 02 F6 | 	mov	arg01, local01
13454     44 02 B1 FD | 	call	#__system___float_mul
13458     A7 FA 61 FC | 	wrlong	result1, fp
1345c     80 00 90 FD | 	jmp	#LR__1559
13460                 | LR__1557
13460                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
13460     08 4E 05 F1 | 	add	fp, #8
13464     A7 1E 02 FB | 	rdlong	local01, fp
13468     08 4E 85 F1 | 	sub	fp, #8
1346c     1E 1E 0E F2 | 	cmp	local01, #30 wz
13470     14 4E 05 A1 |  if_e	add	fp, #20
13474     A7 22 02 AB |  if_e	rdlong	local03, fp
13478     14 4E 85 A1 |  if_e	sub	fp, #20
1347c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13480     1C 00 90 5D |  if_ne	jmp	#LR__1558
13484     A7 12 02 FB | 	rdlong	arg01, fp
13488     0C 4E 05 F1 | 	add	fp, #12
1348c     A7 14 02 FB | 	rdlong	arg02, fp
13490     0C 4E 85 F1 | 	sub	fp, #12
13494     04 02 B1 FD | 	call	#__system___float_mul
13498     A7 FA 61 FC | 	wrlong	result1, fp
1349c     40 00 90 FD | 	jmp	#LR__1559
134a0                 | LR__1558
134a0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
134a0     08 4E 05 F1 | 	add	fp, #8
134a4     A7 1E 02 FB | 	rdlong	local01, fp
134a8     08 4E 85 F1 | 	sub	fp, #8
134ac     1F 1E 0E F2 | 	cmp	local01, #31 wz
134b0     14 4E 05 51 |  if_ne	add	fp, #20
134b4     A7 22 02 5B |  if_ne	rdlong	local03, fp
134b8     14 4E 85 51 |  if_ne	sub	fp, #20
134bc     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
134c0     A7 10 68 AC |  if_e	wrlong	#8, fp
134c4     08 4E 05 A1 |  if_e	add	fp, #8
134c8     A7 FE 69 AC |  if_e	wrlong	#255, fp
134cc     08 4E 85 A1 |  if_e	sub	fp, #8
134d0     A7 12 68 5C |  if_ne	wrlong	#9, fp
134d4     08 4E 05 51 |  if_ne	add	fp, #8
134d8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
134dc     08 4E 85 51 |  if_ne	sub	fp, #8
134e0                 | LR__1559
134e0     A7 12 02 F6 | 	mov	arg01, fp
134e4     08 86 BF FD | 	call	#_push
134e8     A7 F0 03 F6 | 	mov	ptra, fp
134ec     B2 00 A0 FD | 	call	#popregs_
134f0                 | _do_mul_ret
134f0     2D 00 64 FD | 	ret
134f4                 | 
134f4                 | ' 
134f4                 | ' sub do_div 
134f4                 | _do_div
134f4     01 4A 05 F6 | 	mov	COUNT_, #1
134f8     A8 00 A0 FD | 	call	#pushregs_
134fc     18 F0 07 F1 | 	add	ptra, #24
13500     54 85 BF FD | 	call	#_pop
13504     FD 7E 02 F6 | 	mov	muldivb_, result1
13508     FE 7C 02 F6 | 	mov	muldiva_, result2
1350c     FF 1E 02 F6 | 	mov	local01, result3
13510     0C 4E 05 F1 | 	add	fp, #12
13514     A7 7E 62 FC | 	wrlong	muldivb_, fp
13518     04 4E 05 F1 | 	add	fp, #4
1351c     A7 7C 62 FC | 	wrlong	muldiva_, fp
13520     04 4E 05 F1 | 	add	fp, #4
13524     A7 1E 62 FC | 	wrlong	local01, fp
13528     14 4E 85 F1 | 	sub	fp, #20
1352c     28 85 BF FD | 	call	#_pop
13530     A7 FA 61 FC | 	wrlong	result1, fp
13534     04 4E 05 F1 | 	add	fp, #4
13538     A7 FC 61 FC | 	wrlong	result2, fp
1353c     04 4E 05 F1 | 	add	fp, #4
13540     A7 FE 61 FC | 	wrlong	result3, fp
13544                 | ' 
13544                 | ' t2=pop()
13544                 | ' t1=pop()
13544                 | ' 
13544                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
13544     08 4E 85 F1 | 	sub	fp, #8
13548     1F FE 0D F2 | 	cmp	result3, #31 wz
1354c     14 4E 05 51 |  if_ne	add	fp, #20
13550     A7 12 02 5B |  if_ne	rdlong	arg01, fp
13554     14 4E 85 51 |  if_ne	sub	fp, #20
13558     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1355c     A7 14 68 AC |  if_e	wrlong	#10, fp
13560     08 4E 05 A1 |  if_e	add	fp, #8
13564     A7 FE 69 AC |  if_e	wrlong	#255, fp
13568     08 4E 85 A1 |  if_e	sub	fp, #8
1356c     90 01 90 AD |  if_e	jmp	#LR__1566
13570                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
13570     08 4E 05 F1 | 	add	fp, #8
13574     A7 7E 02 FB | 	rdlong	muldivb_, fp
13578     08 4E 85 F1 | 	sub	fp, #8
1357c     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
13580     1C 00 90 5D |  if_ne	jmp	#LR__1560
13584     08 4E 05 F1 | 	add	fp, #8
13588     A7 38 68 FC | 	wrlong	#28, fp
1358c     08 4E 85 F1 | 	sub	fp, #8
13590     A7 12 02 FB | 	rdlong	arg01, fp
13594     00 14 06 F6 | 	mov	arg02, #0
13598     C8 05 B1 FD | 	call	#__system___float_tointeger
1359c     A7 FA 61 FC | 	wrlong	result1, fp
135a0                 | LR__1560
135a0                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
135a0     14 4E 05 F1 | 	add	fp, #20
135a4     A7 7E 02 FB | 	rdlong	muldivb_, fp
135a8     14 4E 85 F1 | 	sub	fp, #20
135ac     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
135b0     28 00 90 5D |  if_ne	jmp	#LR__1561
135b4     14 4E 05 F1 | 	add	fp, #20
135b8     A7 38 68 FC | 	wrlong	#28, fp
135bc     08 4E 85 F1 | 	sub	fp, #8
135c0     A7 12 02 FB | 	rdlong	arg01, fp
135c4     0C 4E 85 F1 | 	sub	fp, #12
135c8     00 14 06 F6 | 	mov	arg02, #0
135cc     94 05 B1 FD | 	call	#__system___float_tointeger
135d0     0C 4E 05 F1 | 	add	fp, #12
135d4     A7 FA 61 FC | 	wrlong	result1, fp
135d8     0C 4E 85 F1 | 	sub	fp, #12
135dc                 | LR__1561
135dc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
135dc     08 4E 05 F1 | 	add	fp, #8
135e0     A7 7E 02 FB | 	rdlong	muldivb_, fp
135e4     08 4E 85 F1 | 	sub	fp, #8
135e8     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
135ec     14 4E 05 A1 |  if_e	add	fp, #20
135f0     A7 1E 02 AB |  if_e	rdlong	local01, fp
135f4     14 4E 85 A1 |  if_e	sub	fp, #20
135f8     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
135fc     20 00 90 5D |  if_ne	jmp	#LR__1562
13600     0C 4E 05 F1 | 	add	fp, #12
13604     A7 1E 02 FB | 	rdlong	local01, fp
13608     0C 4E 85 F1 | 	sub	fp, #12
1360c     A7 7E 02 FB | 	rdlong	muldivb_, fp
13610     0F 7F 12 FD | 	qdiv	muldivb_, local01
13614     18 1E 62 FD | 	getqx	local01
13618     A7 1E 62 FC | 	wrlong	local01, fp
1361c     E0 00 90 FD | 	jmp	#LR__1566
13620                 | LR__1562
13620                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
13620     08 4E 05 F1 | 	add	fp, #8
13624     A7 7E 02 FB | 	rdlong	muldivb_, fp
13628     08 4E 85 F1 | 	sub	fp, #8
1362c     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
13630     14 4E 05 A1 |  if_e	add	fp, #20
13634     A7 1E 02 AB |  if_e	rdlong	local01, fp
13638     14 4E 85 A1 |  if_e	sub	fp, #20
1363c     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
13640     2C 00 90 5D |  if_ne	jmp	#LR__1563
13644     0C 4E 05 F1 | 	add	fp, #12
13648     A7 1E 02 FB | 	rdlong	local01, fp
1364c     0C 4E 85 F1 | 	sub	fp, #12
13650     A7 7E 02 FB | 	rdlong	muldivb_, fp
13654     0F 7F 12 FD | 	qdiv	muldivb_, local01
13658     18 1E 62 FD | 	getqx	local01
1365c     A7 1E 62 FC | 	wrlong	local01, fp
13660     08 4E 05 F1 | 	add	fp, #8
13664     A7 38 68 FC | 	wrlong	#28, fp
13668     08 4E 85 F1 | 	sub	fp, #8
1366c     90 00 90 FD | 	jmp	#LR__1566
13670                 | LR__1563
13670                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
13670     08 4E 05 F1 | 	add	fp, #8
13674     A7 7E 02 FB | 	rdlong	muldivb_, fp
13678     08 4E 85 F1 | 	sub	fp, #8
1367c     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
13680     14 4E 05 A1 |  if_e	add	fp, #20
13684     A7 1E 02 AB |  if_e	rdlong	local01, fp
13688     14 4E 85 A1 |  if_e	sub	fp, #20
1368c     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
13690     1C 00 90 5D |  if_ne	jmp	#LR__1564
13694     A7 7C 02 FB | 	rdlong	muldiva_, fp
13698     0C 4E 05 F1 | 	add	fp, #12
1369c     A7 7E 02 FB | 	rdlong	muldivb_, fp
136a0     0C 4E 85 F1 | 	sub	fp, #12
136a4     BA 00 A0 FD | 	call	#divide_
136a8     A7 7E 62 FC | 	wrlong	muldivb_, fp
136ac     50 00 90 FD | 	jmp	#LR__1566
136b0                 | LR__1564
136b0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
136b0     08 4E 05 F1 | 	add	fp, #8
136b4     A7 7E 02 FB | 	rdlong	muldivb_, fp
136b8     08 4E 85 F1 | 	sub	fp, #8
136bc     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
136c0     14 4E 05 A1 |  if_e	add	fp, #20
136c4     A7 1E 02 AB |  if_e	rdlong	local01, fp
136c8     14 4E 85 A1 |  if_e	sub	fp, #20
136cc     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
136d0     1C 00 90 5D |  if_ne	jmp	#LR__1565
136d4     A7 7C 02 FB | 	rdlong	muldiva_, fp
136d8     0C 4E 05 F1 | 	add	fp, #12
136dc     A7 7E 02 FB | 	rdlong	muldivb_, fp
136e0     0C 4E 85 F1 | 	sub	fp, #12
136e4     BA 00 A0 FD | 	call	#divide_
136e8     A7 7E 62 FC | 	wrlong	muldivb_, fp
136ec     10 00 90 FD | 	jmp	#LR__1566
136f0                 | LR__1565
136f0     A7 16 68 FC | 	wrlong	#11, fp
136f4     08 4E 05 F1 | 	add	fp, #8
136f8     A7 FE 69 FC | 	wrlong	#255, fp
136fc     08 4E 85 F1 | 	sub	fp, #8
13700                 | LR__1566
13700     A7 12 02 F6 | 	mov	arg01, fp
13704     E8 83 BF FD | 	call	#_push
13708     A7 F0 03 F6 | 	mov	ptra, fp
1370c     B2 00 A0 FD | 	call	#popregs_
13710                 | _do_div_ret
13710     2D 00 64 FD | 	ret
13714                 | 
13714                 | ' 
13714                 | ' sub do_fdiv 
13714                 | _do_fdiv
13714     02 4A 05 F6 | 	mov	COUNT_, #2
13718     A8 00 A0 FD | 	call	#pushregs_
1371c     18 F0 07 F1 | 	add	ptra, #24
13720     34 83 BF FD | 	call	#_pop
13724     FD 14 02 F6 | 	mov	arg02, result1
13728     FE 12 02 F6 | 	mov	arg01, result2
1372c     FF 1E 02 F6 | 	mov	local01, result3
13730     0C 4E 05 F1 | 	add	fp, #12
13734     A7 14 62 FC | 	wrlong	arg02, fp
13738     04 4E 05 F1 | 	add	fp, #4
1373c     A7 12 62 FC | 	wrlong	arg01, fp
13740     04 4E 05 F1 | 	add	fp, #4
13744     A7 1E 62 FC | 	wrlong	local01, fp
13748     14 4E 85 F1 | 	sub	fp, #20
1374c     08 83 BF FD | 	call	#_pop
13750     A7 FA 61 FC | 	wrlong	result1, fp
13754     04 4E 05 F1 | 	add	fp, #4
13758     A7 FC 61 FC | 	wrlong	result2, fp
1375c     04 4E 05 F1 | 	add	fp, #4
13760     A7 FE 61 FC | 	wrlong	result3, fp
13764                 | ' 
13764                 | ' t2=pop()
13764                 | ' t1=pop()
13764                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
13764     08 4E 85 F1 | 	sub	fp, #8
13768     1F FE 0D F2 | 	cmp	result3, #31 wz
1376c     14 4E 05 51 |  if_ne	add	fp, #20
13770     A7 1E 02 5B |  if_ne	rdlong	local01, fp
13774     14 4E 85 51 |  if_ne	sub	fp, #20
13778     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
1377c     A7 14 68 AC |  if_e	wrlong	#10, fp
13780     08 4E 05 A1 |  if_e	add	fp, #8
13784     A7 FE 69 AC |  if_e	wrlong	#255, fp
13788     08 4E 85 A1 |  if_e	sub	fp, #8
1378c     38 01 90 AD |  if_e	jmp	#LR__1575
13790                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
13790     08 4E 05 F1 | 	add	fp, #8
13794     A7 14 02 FB | 	rdlong	arg02, fp
13798     08 4E 85 F1 | 	sub	fp, #8
1379c     1C 14 0E F2 | 	cmp	arg02, #28 wz
137a0     28 00 90 5D |  if_ne	jmp	#LR__1570
137a4     08 4E 05 F1 | 	add	fp, #8
137a8     A7 3C 68 FC | 	wrlong	#30, fp
137ac     08 4E 85 F1 | 	sub	fp, #8
137b0     A7 12 02 FB | 	rdlong	arg01, fp
137b4     09 13 52 F6 | 	abs	arg01, arg01 wc
137b8     1F 20 C6 C9 |  if_b	decod	local02, #31
137bc     00 20 06 36 |  if_ae	mov	local02, #0
137c0     D4 FA B0 FD | 	call	#__system___float_fromuns
137c4     10 FB 61 F5 | 	xor	result1, local02
137c8     A7 FA 61 FC | 	wrlong	result1, fp
137cc                 | LR__1570
137cc                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
137cc     08 4E 05 F1 | 	add	fp, #8
137d0     A7 14 02 FB | 	rdlong	arg02, fp
137d4     08 4E 85 F1 | 	sub	fp, #8
137d8     1D 14 0E F2 | 	cmp	arg02, #29 wz
137dc     18 00 90 5D |  if_ne	jmp	#LR__1571
137e0     08 4E 05 F1 | 	add	fp, #8
137e4     A7 3C 68 FC | 	wrlong	#30, fp
137e8     08 4E 85 F1 | 	sub	fp, #8
137ec     A7 12 02 FB | 	rdlong	arg01, fp
137f0     A4 FA B0 FD | 	call	#__system___float_fromuns
137f4     A7 FA 61 FC | 	wrlong	result1, fp
137f8                 | LR__1571
137f8                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
137f8     14 4E 05 F1 | 	add	fp, #20
137fc     A7 14 02 FB | 	rdlong	arg02, fp
13800     14 4E 85 F1 | 	sub	fp, #20
13804     1C 14 0E F2 | 	cmp	arg02, #28 wz
13808     34 00 90 5D |  if_ne	jmp	#LR__1572
1380c     14 4E 05 F1 | 	add	fp, #20
13810     A7 3C 68 FC | 	wrlong	#30, fp
13814     08 4E 85 F1 | 	sub	fp, #8
13818     A7 12 02 FB | 	rdlong	arg01, fp
1381c     0C 4E 85 F1 | 	sub	fp, #12
13820     09 13 52 F6 | 	abs	arg01, arg01 wc
13824     1F 20 C6 C9 |  if_b	decod	local02, #31
13828     00 20 06 36 |  if_ae	mov	local02, #0
1382c     68 FA B0 FD | 	call	#__system___float_fromuns
13830     10 FB 61 F5 | 	xor	result1, local02
13834     0C 4E 05 F1 | 	add	fp, #12
13838     A7 FA 61 FC | 	wrlong	result1, fp
1383c     0C 4E 85 F1 | 	sub	fp, #12
13840                 | LR__1572
13840                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
13840     14 4E 05 F1 | 	add	fp, #20
13844     A7 14 02 FB | 	rdlong	arg02, fp
13848     14 4E 85 F1 | 	sub	fp, #20
1384c     1D 14 0E F2 | 	cmp	arg02, #29 wz
13850     24 00 90 5D |  if_ne	jmp	#LR__1573
13854     14 4E 05 F1 | 	add	fp, #20
13858     A7 3C 68 FC | 	wrlong	#30, fp
1385c     08 4E 85 F1 | 	sub	fp, #8
13860     A7 12 02 FB | 	rdlong	arg01, fp
13864     0C 4E 85 F1 | 	sub	fp, #12
13868     2C FA B0 FD | 	call	#__system___float_fromuns
1386c     0C 4E 05 F1 | 	add	fp, #12
13870     A7 FA 61 FC | 	wrlong	result1, fp
13874     0C 4E 85 F1 | 	sub	fp, #12
13878                 | LR__1573
13878                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
13878     08 4E 05 F1 | 	add	fp, #8
1387c     A7 14 02 FB | 	rdlong	arg02, fp
13880     08 4E 85 F1 | 	sub	fp, #8
13884     1E 14 0E F2 | 	cmp	arg02, #30 wz
13888     14 4E 05 A1 |  if_e	add	fp, #20
1388c     A7 1E 02 AB |  if_e	rdlong	local01, fp
13890     14 4E 85 A1 |  if_e	sub	fp, #20
13894     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
13898     1C 00 90 5D |  if_ne	jmp	#LR__1574
1389c     A7 12 02 FB | 	rdlong	arg01, fp
138a0     0C 4E 05 F1 | 	add	fp, #12
138a4     A7 14 02 FB | 	rdlong	arg02, fp
138a8     0C 4E 85 F1 | 	sub	fp, #12
138ac     F0 FF B0 FD | 	call	#__system___float_div
138b0     A7 FA 61 FC | 	wrlong	result1, fp
138b4     10 00 90 FD | 	jmp	#LR__1575
138b8                 | LR__1574
138b8     A7 16 68 FC | 	wrlong	#11, fp
138bc     08 4E 05 F1 | 	add	fp, #8
138c0     A7 FE 69 FC | 	wrlong	#255, fp
138c4     08 4E 85 F1 | 	sub	fp, #8
138c8                 | LR__1575
138c8     A7 12 02 F6 | 	mov	arg01, fp
138cc     20 82 BF FD | 	call	#_push
138d0     A7 F0 03 F6 | 	mov	ptra, fp
138d4     B2 00 A0 FD | 	call	#popregs_
138d8                 | _do_fdiv_ret
138d8     2D 00 64 FD | 	ret
138dc                 | 
138dc                 | ' 
138dc                 | ' 
138dc                 | ' sub do_mod 
138dc                 | _do_mod
138dc     01 4A 05 F6 | 	mov	COUNT_, #1
138e0     A8 00 A0 FD | 	call	#pushregs_
138e4     18 F0 07 F1 | 	add	ptra, #24
138e8     6C 81 BF FD | 	call	#_pop
138ec     FD 7E 02 F6 | 	mov	muldivb_, result1
138f0     FE 7C 02 F6 | 	mov	muldiva_, result2
138f4     FF 1E 02 F6 | 	mov	local01, result3
138f8     0C 4E 05 F1 | 	add	fp, #12
138fc     A7 7E 62 FC | 	wrlong	muldivb_, fp
13900     04 4E 05 F1 | 	add	fp, #4
13904     A7 7C 62 FC | 	wrlong	muldiva_, fp
13908     04 4E 05 F1 | 	add	fp, #4
1390c     A7 1E 62 FC | 	wrlong	local01, fp
13910     14 4E 85 F1 | 	sub	fp, #20
13914     40 81 BF FD | 	call	#_pop
13918     A7 FA 61 FC | 	wrlong	result1, fp
1391c     04 4E 05 F1 | 	add	fp, #4
13920     A7 FC 61 FC | 	wrlong	result2, fp
13924     04 4E 05 F1 | 	add	fp, #4
13928     A7 FE 61 FC | 	wrlong	result3, fp
1392c                 | ' 
1392c                 | ' t2=pop()
1392c                 | ' t1=pop()
1392c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1392c     08 4E 85 F1 | 	sub	fp, #8
13930     1F FE 0D F2 | 	cmp	result3, #31 wz
13934     14 4E 05 51 |  if_ne	add	fp, #20
13938     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1393c     14 4E 85 51 |  if_ne	sub	fp, #20
13940     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
13944     A7 14 68 AC |  if_e	wrlong	#10, fp
13948     08 4E 05 A1 |  if_e	add	fp, #8
1394c     A7 FE 69 AC |  if_e	wrlong	#255, fp
13950     08 4E 85 A1 |  if_e	sub	fp, #8
13954     90 01 90 AD |  if_e	jmp	#LR__1586
13958                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
13958     08 4E 05 F1 | 	add	fp, #8
1395c     A7 7E 02 FB | 	rdlong	muldivb_, fp
13960     08 4E 85 F1 | 	sub	fp, #8
13964     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
13968     1C 00 90 5D |  if_ne	jmp	#LR__1580
1396c     08 4E 05 F1 | 	add	fp, #8
13970     A7 38 68 FC | 	wrlong	#28, fp
13974     08 4E 85 F1 | 	sub	fp, #8
13978     A7 12 02 FB | 	rdlong	arg01, fp
1397c     00 14 06 F6 | 	mov	arg02, #0
13980     E0 01 B1 FD | 	call	#__system___float_tointeger
13984     A7 FA 61 FC | 	wrlong	result1, fp
13988                 | LR__1580
13988                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
13988     14 4E 05 F1 | 	add	fp, #20
1398c     A7 7E 02 FB | 	rdlong	muldivb_, fp
13990     14 4E 85 F1 | 	sub	fp, #20
13994     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
13998     28 00 90 5D |  if_ne	jmp	#LR__1581
1399c     14 4E 05 F1 | 	add	fp, #20
139a0     A7 38 68 FC | 	wrlong	#28, fp
139a4     08 4E 85 F1 | 	sub	fp, #8
139a8     A7 12 02 FB | 	rdlong	arg01, fp
139ac     0C 4E 85 F1 | 	sub	fp, #12
139b0     00 14 06 F6 | 	mov	arg02, #0
139b4     AC 01 B1 FD | 	call	#__system___float_tointeger
139b8     0C 4E 05 F1 | 	add	fp, #12
139bc     A7 FA 61 FC | 	wrlong	result1, fp
139c0     0C 4E 85 F1 | 	sub	fp, #12
139c4                 | LR__1581
139c4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
139c4     08 4E 05 F1 | 	add	fp, #8
139c8     A7 7E 02 FB | 	rdlong	muldivb_, fp
139cc     08 4E 85 F1 | 	sub	fp, #8
139d0     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
139d4     14 4E 05 A1 |  if_e	add	fp, #20
139d8     A7 1E 02 AB |  if_e	rdlong	local01, fp
139dc     14 4E 85 A1 |  if_e	sub	fp, #20
139e0     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
139e4     20 00 90 5D |  if_ne	jmp	#LR__1582
139e8     0C 4E 05 F1 | 	add	fp, #12
139ec     A7 1E 02 FB | 	rdlong	local01, fp
139f0     0C 4E 85 F1 | 	sub	fp, #12
139f4     A7 7E 02 FB | 	rdlong	muldivb_, fp
139f8     0F 7F 12 FD | 	qdiv	muldivb_, local01
139fc     19 1E 62 FD | 	getqy	local01
13a00     A7 1E 62 FC | 	wrlong	local01, fp
13a04     E0 00 90 FD | 	jmp	#LR__1586
13a08                 | LR__1582
13a08                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
13a08     08 4E 05 F1 | 	add	fp, #8
13a0c     A7 7E 02 FB | 	rdlong	muldivb_, fp
13a10     08 4E 85 F1 | 	sub	fp, #8
13a14     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
13a18     14 4E 05 A1 |  if_e	add	fp, #20
13a1c     A7 1E 02 AB |  if_e	rdlong	local01, fp
13a20     14 4E 85 A1 |  if_e	sub	fp, #20
13a24     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
13a28     2C 00 90 5D |  if_ne	jmp	#LR__1583
13a2c     0C 4E 05 F1 | 	add	fp, #12
13a30     A7 1E 02 FB | 	rdlong	local01, fp
13a34     0C 4E 85 F1 | 	sub	fp, #12
13a38     A7 7E 02 FB | 	rdlong	muldivb_, fp
13a3c     0F 7F 12 FD | 	qdiv	muldivb_, local01
13a40     19 1E 62 FD | 	getqy	local01
13a44     A7 1E 62 FC | 	wrlong	local01, fp
13a48     08 4E 05 F1 | 	add	fp, #8
13a4c     A7 38 68 FC | 	wrlong	#28, fp
13a50     08 4E 85 F1 | 	sub	fp, #8
13a54     90 00 90 FD | 	jmp	#LR__1586
13a58                 | LR__1583
13a58                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
13a58     08 4E 05 F1 | 	add	fp, #8
13a5c     A7 7E 02 FB | 	rdlong	muldivb_, fp
13a60     08 4E 85 F1 | 	sub	fp, #8
13a64     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
13a68     14 4E 05 A1 |  if_e	add	fp, #20
13a6c     A7 1E 02 AB |  if_e	rdlong	local01, fp
13a70     14 4E 85 A1 |  if_e	sub	fp, #20
13a74     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
13a78     1C 00 90 5D |  if_ne	jmp	#LR__1584
13a7c     A7 7C 02 FB | 	rdlong	muldiva_, fp
13a80     0C 4E 05 F1 | 	add	fp, #12
13a84     A7 7E 02 FB | 	rdlong	muldivb_, fp
13a88     0C 4E 85 F1 | 	sub	fp, #12
13a8c     BA 00 A0 FD | 	call	#divide_
13a90     A7 7C 62 FC | 	wrlong	muldiva_, fp
13a94     50 00 90 FD | 	jmp	#LR__1586
13a98                 | LR__1584
13a98                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
13a98     08 4E 05 F1 | 	add	fp, #8
13a9c     A7 7E 02 FB | 	rdlong	muldivb_, fp
13aa0     08 4E 85 F1 | 	sub	fp, #8
13aa4     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
13aa8     14 4E 05 A1 |  if_e	add	fp, #20
13aac     A7 1E 02 AB |  if_e	rdlong	local01, fp
13ab0     14 4E 85 A1 |  if_e	sub	fp, #20
13ab4     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
13ab8     1C 00 90 5D |  if_ne	jmp	#LR__1585
13abc     A7 7C 02 FB | 	rdlong	muldiva_, fp
13ac0     0C 4E 05 F1 | 	add	fp, #12
13ac4     A7 7E 02 FB | 	rdlong	muldivb_, fp
13ac8     0C 4E 85 F1 | 	sub	fp, #12
13acc     BA 00 A0 FD | 	call	#divide_
13ad0     A7 7C 62 FC | 	wrlong	muldiva_, fp
13ad4     10 00 90 FD | 	jmp	#LR__1586
13ad8                 | LR__1585
13ad8     A7 16 68 FC | 	wrlong	#11, fp
13adc     08 4E 05 F1 | 	add	fp, #8
13ae0     A7 FE 69 FC | 	wrlong	#255, fp
13ae4     08 4E 85 F1 | 	sub	fp, #8
13ae8                 | LR__1586
13ae8     A7 12 02 F6 | 	mov	arg01, fp
13aec     00 80 BF FD | 	call	#_push
13af0     A7 F0 03 F6 | 	mov	ptra, fp
13af4     B2 00 A0 FD | 	call	#popregs_
13af8                 | _do_mod_ret
13af8     2D 00 64 FD | 	ret
13afc                 | 
13afc                 | ' 
13afc                 | ' sub do_shl 
13afc                 | _do_shl
13afc     03 4A 05 F6 | 	mov	COUNT_, #3
13b00     A8 00 A0 FD | 	call	#pushregs_
13b04     18 F0 07 F1 | 	add	ptra, #24
13b08     4C 7F BF FD | 	call	#_pop
13b0c     FD 12 02 F6 | 	mov	arg01, result1
13b10     FE 1E 02 F6 | 	mov	local01, result2
13b14     FF 20 02 F6 | 	mov	local02, result3
13b18     0C 4E 05 F1 | 	add	fp, #12
13b1c     A7 12 62 FC | 	wrlong	arg01, fp
13b20     04 4E 05 F1 | 	add	fp, #4
13b24     A7 1E 62 FC | 	wrlong	local01, fp
13b28     04 4E 05 F1 | 	add	fp, #4
13b2c     A7 20 62 FC | 	wrlong	local02, fp
13b30     14 4E 85 F1 | 	sub	fp, #20
13b34     20 7F BF FD | 	call	#_pop
13b38     FF 22 02 F6 | 	mov	local03, result3
13b3c     A7 FA 61 FC | 	wrlong	result1, fp
13b40     04 4E 05 F1 | 	add	fp, #4
13b44     A7 FC 61 FC | 	wrlong	result2, fp
13b48     04 4E 05 F1 | 	add	fp, #4
13b4c     A7 22 62 FC | 	wrlong	local03, fp
13b50                 | ' 
13b50                 | ' t2=pop()
13b50                 | ' t1=pop()
13b50                 | ' 
13b50                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
13b50     08 4E 85 F1 | 	sub	fp, #8
13b54     1C 22 0E F2 | 	cmp	local03, #28 wz
13b58     A7 22 02 AB |  if_e	rdlong	local03, fp
13b5c     A7 22 62 AC |  if_e	wrlong	local03, fp
13b60     08 4E 05 A1 |  if_e	add	fp, #8
13b64     A7 3A 68 AC |  if_e	wrlong	#29, fp
13b68     08 4E 85 A1 |  if_e	sub	fp, #8
13b6c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
13b6c     14 4E 05 F1 | 	add	fp, #20
13b70     A7 22 02 FB | 	rdlong	local03, fp
13b74     14 4E 85 F1 | 	sub	fp, #20
13b78     1C 22 0E F2 | 	cmp	local03, #28 wz
13b7c     18 00 90 5D |  if_ne	jmp	#LR__1590
13b80     0C 4E 05 F1 | 	add	fp, #12
13b84     A7 22 02 FB | 	rdlong	local03, fp
13b88     A7 22 62 FC | 	wrlong	local03, fp
13b8c     08 4E 05 F1 | 	add	fp, #8
13b90     A7 3A 68 FC | 	wrlong	#29, fp
13b94     14 4E 85 F1 | 	sub	fp, #20
13b98                 | LR__1590
13b98                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
13b98     08 4E 05 F1 | 	add	fp, #8
13b9c     A7 22 02 FB | 	rdlong	local03, fp
13ba0     08 4E 85 F1 | 	sub	fp, #8
13ba4     1F 22 0E F2 | 	cmp	local03, #31 wz
13ba8     14 4E 05 51 |  if_ne	add	fp, #20
13bac     A7 20 02 5B |  if_ne	rdlong	local02, fp
13bb0     14 4E 85 51 |  if_ne	sub	fp, #20
13bb4     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
13bb8     08 4E 05 51 |  if_ne	add	fp, #8
13bbc     A7 22 02 5B |  if_ne	rdlong	local03, fp
13bc0     08 4E 85 51 |  if_ne	sub	fp, #8
13bc4     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
13bc8     14 4E 05 51 |  if_ne	add	fp, #20
13bcc     14 4E 85 51 |  if_ne	sub	fp, #20
13bd0     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
13bd4     A7 0C 68 AC |  if_e	wrlong	#6, fp
13bd8     08 4E 05 A1 |  if_e	add	fp, #8
13bdc     A7 FE 69 AC |  if_e	wrlong	#255, fp
13be0     08 4E 85 A1 |  if_e	sub	fp, #8
13be4     18 00 90 AD |  if_e	jmp	#LR__1591
13be8     A7 22 02 FB | 	rdlong	local03, fp
13bec     0C 4E 05 F1 | 	add	fp, #12
13bf0     A7 1E 02 FB | 	rdlong	local01, fp
13bf4     0C 4E 85 F1 | 	sub	fp, #12
13bf8     0F 23 62 F0 | 	shl	local03, local01
13bfc     A7 22 62 FC | 	wrlong	local03, fp
13c00                 | LR__1591
13c00     A7 12 02 F6 | 	mov	arg01, fp
13c04     E8 7E BF FD | 	call	#_push
13c08     A7 F0 03 F6 | 	mov	ptra, fp
13c0c     B2 00 A0 FD | 	call	#popregs_
13c10                 | _do_shl_ret
13c10     2D 00 64 FD | 	ret
13c14                 | 
13c14                 | ' 
13c14                 | ' sub do_shr 
13c14                 | _do_shr
13c14     03 4A 05 F6 | 	mov	COUNT_, #3
13c18     A8 00 A0 FD | 	call	#pushregs_
13c1c     18 F0 07 F1 | 	add	ptra, #24
13c20     34 7E BF FD | 	call	#_pop
13c24     FD 12 02 F6 | 	mov	arg01, result1
13c28     FE 1E 02 F6 | 	mov	local01, result2
13c2c     FF 20 02 F6 | 	mov	local02, result3
13c30     0C 4E 05 F1 | 	add	fp, #12
13c34     A7 12 62 FC | 	wrlong	arg01, fp
13c38     04 4E 05 F1 | 	add	fp, #4
13c3c     A7 1E 62 FC | 	wrlong	local01, fp
13c40     04 4E 05 F1 | 	add	fp, #4
13c44     A7 20 62 FC | 	wrlong	local02, fp
13c48     14 4E 85 F1 | 	sub	fp, #20
13c4c     08 7E BF FD | 	call	#_pop
13c50     FF 22 02 F6 | 	mov	local03, result3
13c54     A7 FA 61 FC | 	wrlong	result1, fp
13c58     04 4E 05 F1 | 	add	fp, #4
13c5c     A7 FC 61 FC | 	wrlong	result2, fp
13c60     04 4E 05 F1 | 	add	fp, #4
13c64     A7 22 62 FC | 	wrlong	local03, fp
13c68                 | ' t2=pop()
13c68                 | ' t1=pop()
13c68                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
13c68     08 4E 85 F1 | 	sub	fp, #8
13c6c     1C 22 0E F2 | 	cmp	local03, #28 wz
13c70     A7 22 02 AB |  if_e	rdlong	local03, fp
13c74     A7 22 62 AC |  if_e	wrlong	local03, fp
13c78     08 4E 05 A1 |  if_e	add	fp, #8
13c7c     A7 3A 68 AC |  if_e	wrlong	#29, fp
13c80     08 4E 85 A1 |  if_e	sub	fp, #8
13c84                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
13c84     14 4E 05 F1 | 	add	fp, #20
13c88     A7 22 02 FB | 	rdlong	local03, fp
13c8c     14 4E 85 F1 | 	sub	fp, #20
13c90     1C 22 0E F2 | 	cmp	local03, #28 wz
13c94     18 00 90 5D |  if_ne	jmp	#LR__1600
13c98     0C 4E 05 F1 | 	add	fp, #12
13c9c     A7 22 02 FB | 	rdlong	local03, fp
13ca0     A7 22 62 FC | 	wrlong	local03, fp
13ca4     08 4E 05 F1 | 	add	fp, #8
13ca8     A7 3A 68 FC | 	wrlong	#29, fp
13cac     14 4E 85 F1 | 	sub	fp, #20
13cb0                 | LR__1600
13cb0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
13cb0     08 4E 05 F1 | 	add	fp, #8
13cb4     A7 22 02 FB | 	rdlong	local03, fp
13cb8     08 4E 85 F1 | 	sub	fp, #8
13cbc     1F 22 0E F2 | 	cmp	local03, #31 wz
13cc0     14 4E 05 51 |  if_ne	add	fp, #20
13cc4     A7 20 02 5B |  if_ne	rdlong	local02, fp
13cc8     14 4E 85 51 |  if_ne	sub	fp, #20
13ccc     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
13cd0     08 4E 05 51 |  if_ne	add	fp, #8
13cd4     A7 22 02 5B |  if_ne	rdlong	local03, fp
13cd8     08 4E 85 51 |  if_ne	sub	fp, #8
13cdc     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
13ce0     14 4E 05 51 |  if_ne	add	fp, #20
13ce4     14 4E 85 51 |  if_ne	sub	fp, #20
13ce8     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
13cec     A7 0C 68 AC |  if_e	wrlong	#6, fp
13cf0     08 4E 05 A1 |  if_e	add	fp, #8
13cf4     A7 FE 69 AC |  if_e	wrlong	#255, fp
13cf8     08 4E 85 A1 |  if_e	sub	fp, #8
13cfc     18 00 90 AD |  if_e	jmp	#LR__1601
13d00     A7 22 02 FB | 	rdlong	local03, fp
13d04     0C 4E 05 F1 | 	add	fp, #12
13d08     A7 1E 02 FB | 	rdlong	local01, fp
13d0c     0C 4E 85 F1 | 	sub	fp, #12
13d10     0F 23 42 F0 | 	shr	local03, local01
13d14     A7 22 62 FC | 	wrlong	local03, fp
13d18                 | LR__1601
13d18     A7 12 02 F6 | 	mov	arg01, fp
13d1c     D0 7D BF FD | 	call	#_push
13d20     A7 F0 03 F6 | 	mov	ptra, fp
13d24     B2 00 A0 FD | 	call	#popregs_
13d28                 | _do_shr_ret
13d28     2D 00 64 FD | 	ret
13d2c                 | 
13d2c                 | ' 
13d2c                 | ' sub do_power 
13d2c                 | _do_power
13d2c     02 4A 05 F6 | 	mov	COUNT_, #2
13d30     A8 00 A0 FD | 	call	#pushregs_
13d34     18 F0 07 F1 | 	add	ptra, #24
13d38     1C 7D BF FD | 	call	#_pop
13d3c     FD 14 02 F6 | 	mov	arg02, result1
13d40     FE 12 02 F6 | 	mov	arg01, result2
13d44     FF 1E 02 F6 | 	mov	local01, result3
13d48     0C 4E 05 F1 | 	add	fp, #12
13d4c     A7 14 62 FC | 	wrlong	arg02, fp
13d50     04 4E 05 F1 | 	add	fp, #4
13d54     A7 12 62 FC | 	wrlong	arg01, fp
13d58     04 4E 05 F1 | 	add	fp, #4
13d5c     A7 1E 62 FC | 	wrlong	local01, fp
13d60     14 4E 85 F1 | 	sub	fp, #20
13d64     F0 7C BF FD | 	call	#_pop
13d68     A7 FA 61 FC | 	wrlong	result1, fp
13d6c     04 4E 05 F1 | 	add	fp, #4
13d70     A7 FC 61 FC | 	wrlong	result2, fp
13d74     04 4E 05 F1 | 	add	fp, #4
13d78     A7 FE 61 FC | 	wrlong	result3, fp
13d7c                 | ' t2=pop()
13d7c                 | ' t1=pop()
13d7c                 | ' 
13d7c                 | ' 
13d7c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
13d7c     08 4E 85 F1 | 	sub	fp, #8
13d80     1F FE 0D F2 | 	cmp	result3, #31 wz
13d84     14 4E 05 51 |  if_ne	add	fp, #20
13d88     A7 1E 02 5B |  if_ne	rdlong	local01, fp
13d8c     14 4E 85 51 |  if_ne	sub	fp, #20
13d90     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
13d94     A7 18 68 AC |  if_e	wrlong	#12, fp
13d98     08 4E 05 A1 |  if_e	add	fp, #8
13d9c     A7 FE 69 AC |  if_e	wrlong	#255, fp
13da0     08 4E 85 A1 |  if_e	sub	fp, #8
13da4     38 01 90 AD |  if_e	jmp	#LR__1615
13da8                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
13da8     08 4E 05 F1 | 	add	fp, #8
13dac     A7 14 02 FB | 	rdlong	arg02, fp
13db0     08 4E 85 F1 | 	sub	fp, #8
13db4     1C 14 0E F2 | 	cmp	arg02, #28 wz
13db8     28 00 90 5D |  if_ne	jmp	#LR__1610
13dbc     08 4E 05 F1 | 	add	fp, #8
13dc0     A7 3C 68 FC | 	wrlong	#30, fp
13dc4     08 4E 85 F1 | 	sub	fp, #8
13dc8     A7 12 02 FB | 	rdlong	arg01, fp
13dcc     09 13 52 F6 | 	abs	arg01, arg01 wc
13dd0     1F 20 C6 C9 |  if_b	decod	local02, #31
13dd4     00 20 06 36 |  if_ae	mov	local02, #0
13dd8     BC F4 B0 FD | 	call	#__system___float_fromuns
13ddc     10 FB 61 F5 | 	xor	result1, local02
13de0     A7 FA 61 FC | 	wrlong	result1, fp
13de4                 | LR__1610
13de4                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
13de4     08 4E 05 F1 | 	add	fp, #8
13de8     A7 14 02 FB | 	rdlong	arg02, fp
13dec     08 4E 85 F1 | 	sub	fp, #8
13df0     1D 14 0E F2 | 	cmp	arg02, #29 wz
13df4     18 00 90 5D |  if_ne	jmp	#LR__1611
13df8     08 4E 05 F1 | 	add	fp, #8
13dfc     A7 3C 68 FC | 	wrlong	#30, fp
13e00     08 4E 85 F1 | 	sub	fp, #8
13e04     A7 12 02 FB | 	rdlong	arg01, fp
13e08     8C F4 B0 FD | 	call	#__system___float_fromuns
13e0c     A7 FA 61 FC | 	wrlong	result1, fp
13e10                 | LR__1611
13e10                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
13e10     14 4E 05 F1 | 	add	fp, #20
13e14     A7 14 02 FB | 	rdlong	arg02, fp
13e18     14 4E 85 F1 | 	sub	fp, #20
13e1c     1C 14 0E F2 | 	cmp	arg02, #28 wz
13e20     34 00 90 5D |  if_ne	jmp	#LR__1612
13e24     14 4E 05 F1 | 	add	fp, #20
13e28     A7 3C 68 FC | 	wrlong	#30, fp
13e2c     08 4E 85 F1 | 	sub	fp, #8
13e30     A7 12 02 FB | 	rdlong	arg01, fp
13e34     0C 4E 85 F1 | 	sub	fp, #12
13e38     09 13 52 F6 | 	abs	arg01, arg01 wc
13e3c     1F 20 C6 C9 |  if_b	decod	local02, #31
13e40     00 20 06 36 |  if_ae	mov	local02, #0
13e44     50 F4 B0 FD | 	call	#__system___float_fromuns
13e48     10 FB 61 F5 | 	xor	result1, local02
13e4c     0C 4E 05 F1 | 	add	fp, #12
13e50     A7 FA 61 FC | 	wrlong	result1, fp
13e54     0C 4E 85 F1 | 	sub	fp, #12
13e58                 | LR__1612
13e58                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
13e58     14 4E 05 F1 | 	add	fp, #20
13e5c     A7 14 02 FB | 	rdlong	arg02, fp
13e60     14 4E 85 F1 | 	sub	fp, #20
13e64     1D 14 0E F2 | 	cmp	arg02, #29 wz
13e68     24 00 90 5D |  if_ne	jmp	#LR__1613
13e6c     14 4E 05 F1 | 	add	fp, #20
13e70     A7 3C 68 FC | 	wrlong	#30, fp
13e74     08 4E 85 F1 | 	sub	fp, #8
13e78     A7 12 02 FB | 	rdlong	arg01, fp
13e7c     0C 4E 85 F1 | 	sub	fp, #12
13e80     14 F4 B0 FD | 	call	#__system___float_fromuns
13e84     0C 4E 05 F1 | 	add	fp, #12
13e88     A7 FA 61 FC | 	wrlong	result1, fp
13e8c     0C 4E 85 F1 | 	sub	fp, #12
13e90                 | LR__1613
13e90                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
13e90     08 4E 05 F1 | 	add	fp, #8
13e94     A7 14 02 FB | 	rdlong	arg02, fp
13e98     08 4E 85 F1 | 	sub	fp, #8
13e9c     1E 14 0E F2 | 	cmp	arg02, #30 wz
13ea0     14 4E 05 A1 |  if_e	add	fp, #20
13ea4     A7 1E 02 AB |  if_e	rdlong	local01, fp
13ea8     14 4E 85 A1 |  if_e	sub	fp, #20
13eac     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
13eb0     1C 00 90 5D |  if_ne	jmp	#LR__1614
13eb4     A7 12 02 FB | 	rdlong	arg01, fp
13eb8     0C 4E 05 F1 | 	add	fp, #12
13ebc     A7 14 02 FB | 	rdlong	arg02, fp
13ec0     0C 4E 85 F1 | 	sub	fp, #12
13ec4     B8 06 B1 FD | 	call	#__system____builtin_powf
13ec8     A7 FA 61 FC | 	wrlong	result1, fp
13ecc     10 00 90 FD | 	jmp	#LR__1615
13ed0                 | LR__1614
13ed0     A7 1A 68 FC | 	wrlong	#13, fp
13ed4     08 4E 05 F1 | 	add	fp, #8
13ed8     A7 FE 69 FC | 	wrlong	#255, fp
13edc     08 4E 85 F1 | 	sub	fp, #8
13ee0                 | LR__1615
13ee0     A7 12 02 F6 | 	mov	arg01, fp
13ee4     08 7C BF FD | 	call	#_push
13ee8     A7 F0 03 F6 | 	mov	ptra, fp
13eec     B2 00 A0 FD | 	call	#popregs_
13ef0                 | _do_power_ret
13ef0     2D 00 64 FD | 	ret
13ef4                 | 
13ef4                 | ' 
13ef4                 | ' 
13ef4                 | ' sub do_eq
13ef4                 | _do_eq
13ef4     05 4A 05 F6 | 	mov	COUNT_, #5
13ef8     A8 00 A0 FD | 	call	#pushregs_
13efc     18 F0 07 F1 | 	add	ptra, #24
13f00     54 7B BF FD | 	call	#_pop
13f04     FD 1E 02 F6 | 	mov	local01, result1
13f08     FE 20 02 F6 | 	mov	local02, result2
13f0c     FF 22 02 F6 | 	mov	local03, result3
13f10     0C 4E 05 F1 | 	add	fp, #12
13f14     A7 1E 62 FC | 	wrlong	local01, fp
13f18     04 4E 05 F1 | 	add	fp, #4
13f1c     A7 20 62 FC | 	wrlong	local02, fp
13f20     04 4E 05 F1 | 	add	fp, #4
13f24     A7 22 62 FC | 	wrlong	local03, fp
13f28     14 4E 85 F1 | 	sub	fp, #20
13f2c     28 7B BF FD | 	call	#_pop
13f30     FF 22 02 F6 | 	mov	local03, result3
13f34     A7 FA 61 FC | 	wrlong	result1, fp
13f38     04 4E 05 F1 | 	add	fp, #4
13f3c     A7 FC 61 FC | 	wrlong	result2, fp
13f40     04 4E 05 F1 | 	add	fp, #4
13f44     A7 22 62 FC | 	wrlong	local03, fp
13f48                 | ' t2=pop()
13f48                 | ' t1=pop()
13f48                 | ' 
13f48                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
13f48     08 4E 85 F1 | 	sub	fp, #8
13f4c     1F 22 0E F2 | 	cmp	local03, #31 wz
13f50     14 4E 05 A1 |  if_e	add	fp, #20
13f54     A7 24 02 AB |  if_e	rdlong	local04, fp
13f58     14 4E 85 A1 |  if_e	sub	fp, #20
13f5c     12 23 02 A6 |  if_e	mov	local03, local04
13f60     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
13f64     28 00 90 5D |  if_ne	jmp	#LR__1620
13f68     00 1E 06 F6 | 	mov	local01, #0
13f6c     A7 12 02 FB | 	rdlong	arg01, fp
13f70     0C 4E 05 F1 | 	add	fp, #12
13f74     A7 14 02 FB | 	rdlong	arg02, fp
13f78     0C 4E 85 F1 | 	sub	fp, #12
13f7c     90 CB B0 FD | 	call	#__system___string_cmp
13f80     00 FA 0D F2 | 	cmp	result1, #0 wz
13f84     00 1E 26 A6 |  if_e	not	local01, #0
13f88     A7 1E 62 FC | 	wrlong	local01, fp
13f8c     1C 04 90 FD | 	jmp	#LR__1633
13f90                 | LR__1620
13f90                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
13f90     08 4E 05 F1 | 	add	fp, #8
13f94     A7 1E 02 FB | 	rdlong	local01, fp
13f98     08 4E 85 F1 | 	sub	fp, #8
13f9c     1E 1E 0E F2 | 	cmp	local01, #30 wz
13fa0     14 4E 05 A1 |  if_e	add	fp, #20
13fa4     A7 24 02 AB |  if_e	rdlong	local04, fp
13fa8     14 4E 85 A1 |  if_e	sub	fp, #20
13fac     12 23 02 A6 |  if_e	mov	local03, local04
13fb0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13fb4     2C 00 90 5D |  if_ne	jmp	#LR__1621
13fb8     00 1E 06 F6 | 	mov	local01, #0
13fbc     A7 12 02 FB | 	rdlong	arg01, fp
13fc0     0C 4E 05 F1 | 	add	fp, #12
13fc4     A7 14 02 FB | 	rdlong	arg02, fp
13fc8     0C 4E 85 F1 | 	sub	fp, #12
13fcc     01 16 06 F6 | 	mov	arg03, #1
13fd0     FC FA B0 FD | 	call	#__system___float_cmp
13fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
13fd8     00 1E 26 A6 |  if_e	not	local01, #0
13fdc     A7 1E 62 FC | 	wrlong	local01, fp
13fe0     C8 03 90 FD | 	jmp	#LR__1633
13fe4                 | LR__1621
13fe4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
13fe4     08 4E 05 F1 | 	add	fp, #8
13fe8     A7 1E 02 FB | 	rdlong	local01, fp
13fec     08 4E 85 F1 | 	sub	fp, #8
13ff0     1E 1E 0E F2 | 	cmp	local01, #30 wz
13ff4     14 4E 05 A1 |  if_e	add	fp, #20
13ff8     A7 24 02 AB |  if_e	rdlong	local04, fp
13ffc     14 4E 85 A1 |  if_e	sub	fp, #20
14000     12 23 02 A6 |  if_e	mov	local03, local04
14004     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14008     48 00 90 5D |  if_ne	jmp	#LR__1622
1400c     00 1E 06 F6 | 	mov	local01, #0
14010     A7 20 02 FB | 	rdlong	local02, fp
14014     0C 4E 05 F1 | 	add	fp, #12
14018     A7 12 02 FB | 	rdlong	arg01, fp
1401c     0C 4E 85 F1 | 	sub	fp, #12
14020     09 13 52 F6 | 	abs	arg01, arg01 wc
14024     1F 26 C6 C9 |  if_b	decod	local05, #31
14028     00 26 06 36 |  if_ae	mov	local05, #0
1402c     68 F2 B0 FD | 	call	#__system___float_fromuns
14030     13 FB 61 F5 | 	xor	result1, local05
14034     FD 14 02 F6 | 	mov	arg02, result1
14038     10 13 02 F6 | 	mov	arg01, local02
1403c     01 16 06 F6 | 	mov	arg03, #1
14040     8C FA B0 FD | 	call	#__system___float_cmp
14044     00 FA 0D F2 | 	cmp	result1, #0 wz
14048     00 1E 26 A6 |  if_e	not	local01, #0
1404c     A7 1E 62 FC | 	wrlong	local01, fp
14050     58 03 90 FD | 	jmp	#LR__1633
14054                 | LR__1622
14054                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
14054     08 4E 05 F1 | 	add	fp, #8
14058     A7 1E 02 FB | 	rdlong	local01, fp
1405c     08 4E 85 F1 | 	sub	fp, #8
14060     1E 1E 0E F2 | 	cmp	local01, #30 wz
14064     14 4E 05 A1 |  if_e	add	fp, #20
14068     A7 24 02 AB |  if_e	rdlong	local04, fp
1406c     14 4E 85 A1 |  if_e	sub	fp, #20
14070     12 23 02 A6 |  if_e	mov	local03, local04
14074     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14078     38 00 90 5D |  if_ne	jmp	#LR__1623
1407c     00 1E 06 F6 | 	mov	local01, #0
14080     A7 20 02 FB | 	rdlong	local02, fp
14084     0C 4E 05 F1 | 	add	fp, #12
14088     A7 12 02 FB | 	rdlong	arg01, fp
1408c     0C 4E 85 F1 | 	sub	fp, #12
14090     04 F2 B0 FD | 	call	#__system___float_fromuns
14094     FD 14 02 F6 | 	mov	arg02, result1
14098     10 13 02 F6 | 	mov	arg01, local02
1409c     01 16 06 F6 | 	mov	arg03, #1
140a0     2C FA B0 FD | 	call	#__system___float_cmp
140a4     00 FA 0D F2 | 	cmp	result1, #0 wz
140a8     00 1E 26 A6 |  if_e	not	local01, #0
140ac     A7 1E 62 FC | 	wrlong	local01, fp
140b0     F8 02 90 FD | 	jmp	#LR__1633
140b4                 | LR__1623
140b4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
140b4     08 4E 05 F1 | 	add	fp, #8
140b8     A7 1E 02 FB | 	rdlong	local01, fp
140bc     08 4E 85 F1 | 	sub	fp, #8
140c0     1C 1E 0E F2 | 	cmp	local01, #28 wz
140c4     14 4E 05 A1 |  if_e	add	fp, #20
140c8     A7 24 02 AB |  if_e	rdlong	local04, fp
140cc     14 4E 85 A1 |  if_e	sub	fp, #20
140d0     12 23 02 A6 |  if_e	mov	local03, local04
140d4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
140d8     44 00 90 5D |  if_ne	jmp	#LR__1624
140dc     00 1E 06 F6 | 	mov	local01, #0
140e0     A7 12 02 FB | 	rdlong	arg01, fp
140e4     09 13 52 F6 | 	abs	arg01, arg01 wc
140e8     1F 26 C6 C9 |  if_b	decod	local05, #31
140ec     00 26 06 36 |  if_ae	mov	local05, #0
140f0     A4 F1 B0 FD | 	call	#__system___float_fromuns
140f4     13 FB 61 F5 | 	xor	result1, local05
140f8     FD 12 02 F6 | 	mov	arg01, result1
140fc     0C 4E 05 F1 | 	add	fp, #12
14100     A7 14 02 FB | 	rdlong	arg02, fp
14104     0C 4E 85 F1 | 	sub	fp, #12
14108     01 16 06 F6 | 	mov	arg03, #1
1410c     C0 F9 B0 FD | 	call	#__system___float_cmp
14110     00 FA 0D F2 | 	cmp	result1, #0 wz
14114     00 1E 26 A6 |  if_e	not	local01, #0
14118     A7 1E 62 FC | 	wrlong	local01, fp
1411c     8C 02 90 FD | 	jmp	#LR__1633
14120                 | LR__1624
14120                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
14120     08 4E 05 F1 | 	add	fp, #8
14124     A7 1E 02 FB | 	rdlong	local01, fp
14128     08 4E 85 F1 | 	sub	fp, #8
1412c     1C 1E 0E F2 | 	cmp	local01, #28 wz
14130     14 4E 05 A1 |  if_e	add	fp, #20
14134     A7 24 02 AB |  if_e	rdlong	local04, fp
14138     14 4E 85 A1 |  if_e	sub	fp, #20
1413c     12 23 02 A6 |  if_e	mov	local03, local04
14140     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14144     24 00 90 5D |  if_ne	jmp	#LR__1625
14148     00 1E 06 F6 | 	mov	local01, #0
1414c     A7 20 02 FB | 	rdlong	local02, fp
14150     0C 4E 05 F1 | 	add	fp, #12
14154     A7 22 02 FB | 	rdlong	local03, fp
14158     0C 4E 85 F1 | 	sub	fp, #12
1415c     11 21 0A F2 | 	cmp	local02, local03 wz
14160     01 1E 66 A6 |  if_e	neg	local01, #1
14164     A7 1E 62 FC | 	wrlong	local01, fp
14168     40 02 90 FD | 	jmp	#LR__1633
1416c                 | LR__1625
1416c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1416c     08 4E 05 F1 | 	add	fp, #8
14170     A7 1E 02 FB | 	rdlong	local01, fp
14174     08 4E 85 F1 | 	sub	fp, #8
14178     1C 1E 0E F2 | 	cmp	local01, #28 wz
1417c     14 4E 05 A1 |  if_e	add	fp, #20
14180     A7 24 02 AB |  if_e	rdlong	local04, fp
14184     14 4E 85 A1 |  if_e	sub	fp, #20
14188     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
1418c     24 00 90 5D |  if_ne	jmp	#LR__1626
14190     00 1E 06 F6 | 	mov	local01, #0
14194     A7 20 02 FB | 	rdlong	local02, fp
14198     0C 4E 05 F1 | 	add	fp, #12
1419c     A7 22 02 FB | 	rdlong	local03, fp
141a0     0C 4E 85 F1 | 	sub	fp, #12
141a4     11 21 0A F2 | 	cmp	local02, local03 wz
141a8     01 1E 66 A6 |  if_e	neg	local01, #1
141ac     A7 1E 62 FC | 	wrlong	local01, fp
141b0     F8 01 90 FD | 	jmp	#LR__1633
141b4                 | LR__1626
141b4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
141b4     08 4E 05 F1 | 	add	fp, #8
141b8     A7 1E 02 FB | 	rdlong	local01, fp
141bc     08 4E 85 F1 | 	sub	fp, #8
141c0     1D 1E 0E F2 | 	cmp	local01, #29 wz
141c4     14 4E 05 A1 |  if_e	add	fp, #20
141c8     A7 22 02 AB |  if_e	rdlong	local03, fp
141cc     14 4E 85 A1 |  if_e	sub	fp, #20
141d0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
141d4     34 00 90 5D |  if_ne	jmp	#LR__1627
141d8     00 1E 06 F6 | 	mov	local01, #0
141dc     A7 12 02 FB | 	rdlong	arg01, fp
141e0     B4 F0 B0 FD | 	call	#__system___float_fromuns
141e4     FD 12 02 F6 | 	mov	arg01, result1
141e8     0C 4E 05 F1 | 	add	fp, #12
141ec     A7 14 02 FB | 	rdlong	arg02, fp
141f0     0C 4E 85 F1 | 	sub	fp, #12
141f4     01 16 06 F6 | 	mov	arg03, #1
141f8     D4 F8 B0 FD | 	call	#__system___float_cmp
141fc     00 FA 0D F2 | 	cmp	result1, #0 wz
14200     00 1E 26 A6 |  if_e	not	local01, #0
14204     A7 1E 62 FC | 	wrlong	local01, fp
14208     A0 01 90 FD | 	jmp	#LR__1633
1420c                 | LR__1627
1420c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1420c     08 4E 05 F1 | 	add	fp, #8
14210     A7 1E 02 FB | 	rdlong	local01, fp
14214     08 4E 85 F1 | 	sub	fp, #8
14218     1D 1E 0E F2 | 	cmp	local01, #29 wz
1421c     14 4E 05 A1 |  if_e	add	fp, #20
14220     A7 22 02 AB |  if_e	rdlong	local03, fp
14224     14 4E 85 A1 |  if_e	sub	fp, #20
14228     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1422c     24 00 90 5D |  if_ne	jmp	#LR__1628
14230     00 1E 06 F6 | 	mov	local01, #0
14234     A7 20 02 FB | 	rdlong	local02, fp
14238     0C 4E 05 F1 | 	add	fp, #12
1423c     A7 22 02 FB | 	rdlong	local03, fp
14240     0C 4E 85 F1 | 	sub	fp, #12
14244     11 21 0A F2 | 	cmp	local02, local03 wz
14248     01 1E 66 A6 |  if_e	neg	local01, #1
1424c     A7 1E 62 FC | 	wrlong	local01, fp
14250     58 01 90 FD | 	jmp	#LR__1633
14254                 | LR__1628
14254                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
14254     08 4E 05 F1 | 	add	fp, #8
14258     A7 1E 02 FB | 	rdlong	local01, fp
1425c     08 4E 85 F1 | 	sub	fp, #8
14260     1D 1E 0E F2 | 	cmp	local01, #29 wz
14264     14 4E 05 A1 |  if_e	add	fp, #20
14268     A7 22 02 AB |  if_e	rdlong	local03, fp
1426c     14 4E 85 A1 |  if_e	sub	fp, #20
14270     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14274     24 00 90 5D |  if_ne	jmp	#LR__1629
14278     00 1E 06 F6 | 	mov	local01, #0
1427c     A7 20 02 FB | 	rdlong	local02, fp
14280     0C 4E 05 F1 | 	add	fp, #12
14284     A7 22 02 FB | 	rdlong	local03, fp
14288     0C 4E 85 F1 | 	sub	fp, #12
1428c     11 21 0A F2 | 	cmp	local02, local03 wz
14290     01 1E 66 A6 |  if_e	neg	local01, #1
14294     A7 1E 62 FC | 	wrlong	local01, fp
14298     10 01 90 FD | 	jmp	#LR__1633
1429c                 | LR__1629
1429c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1429c     08 4E 05 F1 | 	add	fp, #8
142a0     A7 1E 02 FB | 	rdlong	local01, fp
142a4     08 4E 85 F1 | 	sub	fp, #8
142a8     2B 1E 0E F2 | 	cmp	local01, #43 wz
142ac     14 4E 05 A1 |  if_e	add	fp, #20
142b0     A7 22 02 AB |  if_e	rdlong	local03, fp
142b4     14 4E 85 A1 |  if_e	sub	fp, #20
142b8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
142bc     30 00 90 5D |  if_ne	jmp	#LR__1630
142c0     00 1E 06 F6 | 	mov	local01, #0
142c4     A7 12 02 FB | 	rdlong	arg01, fp
142c8     04 D1 BF FD | 	call	#_convertstring
142cc     FD 12 02 F6 | 	mov	arg01, result1
142d0     0C 4E 05 F1 | 	add	fp, #12
142d4     A7 14 02 FB | 	rdlong	arg02, fp
142d8     0C 4E 85 F1 | 	sub	fp, #12
142dc     30 C8 B0 FD | 	call	#__system___string_cmp
142e0     00 FA 0D F2 | 	cmp	result1, #0 wz
142e4     00 1E 26 A6 |  if_e	not	local01, #0
142e8     A7 1E 62 FC | 	wrlong	local01, fp
142ec     BC 00 90 FD | 	jmp	#LR__1633
142f0                 | LR__1630
142f0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
142f0     08 4E 05 F1 | 	add	fp, #8
142f4     A7 1E 02 FB | 	rdlong	local01, fp
142f8     08 4E 85 F1 | 	sub	fp, #8
142fc     1F 1E 0E F2 | 	cmp	local01, #31 wz
14300     14 4E 05 A1 |  if_e	add	fp, #20
14304     A7 22 02 AB |  if_e	rdlong	local03, fp
14308     14 4E 85 A1 |  if_e	sub	fp, #20
1430c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
14310     34 00 90 5D |  if_ne	jmp	#LR__1631
14314     00 1E 06 F6 | 	mov	local01, #0
14318     A7 20 02 FB | 	rdlong	local02, fp
1431c     0C 4E 05 F1 | 	add	fp, #12
14320     A7 12 02 FB | 	rdlong	arg01, fp
14324     0C 4E 85 F1 | 	sub	fp, #12
14328     A4 D0 BF FD | 	call	#_convertstring
1432c     FD 14 02 F6 | 	mov	arg02, result1
14330     10 13 02 F6 | 	mov	arg01, local02
14334     D8 C7 B0 FD | 	call	#__system___string_cmp
14338     00 FA 0D F2 | 	cmp	result1, #0 wz
1433c     00 1E 26 A6 |  if_e	not	local01, #0
14340     A7 1E 62 FC | 	wrlong	local01, fp
14344     64 00 90 FD | 	jmp	#LR__1633
14348                 | LR__1631
14348                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
14348     08 4E 05 F1 | 	add	fp, #8
1434c     A7 1E 02 FB | 	rdlong	local01, fp
14350     08 4E 85 F1 | 	sub	fp, #8
14354     2B 1E 0E F2 | 	cmp	local01, #43 wz
14358     14 4E 05 A1 |  if_e	add	fp, #20
1435c     A7 22 02 AB |  if_e	rdlong	local03, fp
14360     14 4E 85 A1 |  if_e	sub	fp, #20
14364     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
14368     3C 00 90 5D |  if_ne	jmp	#LR__1632
1436c     00 1E 06 F6 | 	mov	local01, #0
14370     A7 12 02 FB | 	rdlong	arg01, fp
14374     58 D0 BF FD | 	call	#_convertstring
14378     FD 20 02 F6 | 	mov	local02, result1
1437c     0C 4E 05 F1 | 	add	fp, #12
14380     A7 12 02 FB | 	rdlong	arg01, fp
14384     0C 4E 85 F1 | 	sub	fp, #12
14388     44 D0 BF FD | 	call	#_convertstring
1438c     FD 14 02 F6 | 	mov	arg02, result1
14390     10 13 02 F6 | 	mov	arg01, local02
14394     78 C7 B0 FD | 	call	#__system___string_cmp
14398     00 FA 0D F2 | 	cmp	result1, #0 wz
1439c     00 1E 26 A6 |  if_e	not	local01, #0
143a0     A7 1E 62 FC | 	wrlong	local01, fp
143a4     04 00 90 FD | 	jmp	#LR__1633
143a8                 | LR__1632
143a8     A7 00 68 FC | 	wrlong	#0, fp
143ac                 | LR__1633
143ac     08 4E 05 F1 | 	add	fp, #8
143b0     A7 38 68 FC | 	wrlong	#28, fp
143b4     08 4E 85 F1 | 	sub	fp, #8
143b8     A7 12 02 F6 | 	mov	arg01, fp
143bc     30 77 BF FD | 	call	#_push
143c0     A7 F0 03 F6 | 	mov	ptra, fp
143c4     B2 00 A0 FD | 	call	#popregs_
143c8                 | _do_eq_ret
143c8     2D 00 64 FD | 	ret
143cc                 | 
143cc                 | ' 
143cc                 | ' sub do_gt
143cc                 | _do_gt
143cc     05 4A 05 F6 | 	mov	COUNT_, #5
143d0     A8 00 A0 FD | 	call	#pushregs_
143d4     18 F0 07 F1 | 	add	ptra, #24
143d8     7C 76 BF FD | 	call	#_pop
143dc     FD 1E 02 F6 | 	mov	local01, result1
143e0     FE 20 02 F6 | 	mov	local02, result2
143e4     FF 22 02 F6 | 	mov	local03, result3
143e8     0C 4E 05 F1 | 	add	fp, #12
143ec     A7 1E 62 FC | 	wrlong	local01, fp
143f0     04 4E 05 F1 | 	add	fp, #4
143f4     A7 20 62 FC | 	wrlong	local02, fp
143f8     04 4E 05 F1 | 	add	fp, #4
143fc     A7 22 62 FC | 	wrlong	local03, fp
14400     14 4E 85 F1 | 	sub	fp, #20
14404     50 76 BF FD | 	call	#_pop
14408     FF 22 02 F6 | 	mov	local03, result3
1440c     A7 FA 61 FC | 	wrlong	result1, fp
14410     04 4E 05 F1 | 	add	fp, #4
14414     A7 FC 61 FC | 	wrlong	result2, fp
14418     04 4E 05 F1 | 	add	fp, #4
1441c     A7 22 62 FC | 	wrlong	local03, fp
14420                 | ' t2=pop()
14420                 | ' t1=pop()
14420                 | ' 
14420                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
14420     08 4E 85 F1 | 	sub	fp, #8
14424     1F 22 0E F2 | 	cmp	local03, #31 wz
14428     14 4E 05 A1 |  if_e	add	fp, #20
1442c     A7 24 02 AB |  if_e	rdlong	local04, fp
14430     14 4E 85 A1 |  if_e	sub	fp, #20
14434     12 23 02 A6 |  if_e	mov	local03, local04
14438     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1443c     28 00 90 5D |  if_ne	jmp	#LR__1640
14440     00 1E 06 F6 | 	mov	local01, #0
14444     A7 12 02 FB | 	rdlong	arg01, fp
14448     0C 4E 05 F1 | 	add	fp, #12
1444c     A7 14 02 FB | 	rdlong	arg02, fp
14450     0C 4E 85 F1 | 	sub	fp, #12
14454     B8 C6 B0 FD | 	call	#__system___string_cmp
14458     01 FA 55 F2 | 	cmps	result1, #1 wc
1445c     00 1E 26 36 |  if_ae	not	local01, #0
14460     A7 1E 62 FC | 	wrlong	local01, fp
14464     1C 04 90 FD | 	jmp	#LR__1653
14468                 | LR__1640
14468                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
14468     08 4E 05 F1 | 	add	fp, #8
1446c     A7 1E 02 FB | 	rdlong	local01, fp
14470     08 4E 85 F1 | 	sub	fp, #8
14474     1E 1E 0E F2 | 	cmp	local01, #30 wz
14478     14 4E 05 A1 |  if_e	add	fp, #20
1447c     A7 24 02 AB |  if_e	rdlong	local04, fp
14480     14 4E 85 A1 |  if_e	sub	fp, #20
14484     12 23 02 A6 |  if_e	mov	local03, local04
14488     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1448c     2C 00 90 5D |  if_ne	jmp	#LR__1641
14490     00 1E 06 F6 | 	mov	local01, #0
14494     A7 12 02 FB | 	rdlong	arg01, fp
14498     0C 4E 05 F1 | 	add	fp, #12
1449c     A7 14 02 FB | 	rdlong	arg02, fp
144a0     0C 4E 85 F1 | 	sub	fp, #12
144a4     01 16 66 F6 | 	neg	arg03, #1
144a8     24 F6 B0 FD | 	call	#__system___float_cmp
144ac     01 FA 55 F2 | 	cmps	result1, #1 wc
144b0     00 1E 26 36 |  if_ae	not	local01, #0
144b4     A7 1E 62 FC | 	wrlong	local01, fp
144b8     C8 03 90 FD | 	jmp	#LR__1653
144bc                 | LR__1641
144bc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
144bc     08 4E 05 F1 | 	add	fp, #8
144c0     A7 1E 02 FB | 	rdlong	local01, fp
144c4     08 4E 85 F1 | 	sub	fp, #8
144c8     1E 1E 0E F2 | 	cmp	local01, #30 wz
144cc     14 4E 05 A1 |  if_e	add	fp, #20
144d0     A7 24 02 AB |  if_e	rdlong	local04, fp
144d4     14 4E 85 A1 |  if_e	sub	fp, #20
144d8     12 23 02 A6 |  if_e	mov	local03, local04
144dc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
144e0     48 00 90 5D |  if_ne	jmp	#LR__1642
144e4     00 1E 06 F6 | 	mov	local01, #0
144e8     A7 20 02 FB | 	rdlong	local02, fp
144ec     0C 4E 05 F1 | 	add	fp, #12
144f0     A7 12 02 FB | 	rdlong	arg01, fp
144f4     0C 4E 85 F1 | 	sub	fp, #12
144f8     09 13 52 F6 | 	abs	arg01, arg01 wc
144fc     1F 26 C6 C9 |  if_b	decod	local05, #31
14500     00 26 06 36 |  if_ae	mov	local05, #0
14504     90 ED B0 FD | 	call	#__system___float_fromuns
14508     13 FB 61 F5 | 	xor	result1, local05
1450c     FD 14 02 F6 | 	mov	arg02, result1
14510     10 13 02 F6 | 	mov	arg01, local02
14514     01 16 66 F6 | 	neg	arg03, #1
14518     B4 F5 B0 FD | 	call	#__system___float_cmp
1451c     01 FA 55 F2 | 	cmps	result1, #1 wc
14520     00 1E 26 36 |  if_ae	not	local01, #0
14524     A7 1E 62 FC | 	wrlong	local01, fp
14528     58 03 90 FD | 	jmp	#LR__1653
1452c                 | LR__1642
1452c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1452c     08 4E 05 F1 | 	add	fp, #8
14530     A7 1E 02 FB | 	rdlong	local01, fp
14534     08 4E 85 F1 | 	sub	fp, #8
14538     1E 1E 0E F2 | 	cmp	local01, #30 wz
1453c     14 4E 05 A1 |  if_e	add	fp, #20
14540     A7 24 02 AB |  if_e	rdlong	local04, fp
14544     14 4E 85 A1 |  if_e	sub	fp, #20
14548     12 23 02 A6 |  if_e	mov	local03, local04
1454c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14550     38 00 90 5D |  if_ne	jmp	#LR__1643
14554     00 1E 06 F6 | 	mov	local01, #0
14558     A7 20 02 FB | 	rdlong	local02, fp
1455c     0C 4E 05 F1 | 	add	fp, #12
14560     A7 12 02 FB | 	rdlong	arg01, fp
14564     0C 4E 85 F1 | 	sub	fp, #12
14568     2C ED B0 FD | 	call	#__system___float_fromuns
1456c     FD 14 02 F6 | 	mov	arg02, result1
14570     10 13 02 F6 | 	mov	arg01, local02
14574     01 16 66 F6 | 	neg	arg03, #1
14578     54 F5 B0 FD | 	call	#__system___float_cmp
1457c     01 FA 55 F2 | 	cmps	result1, #1 wc
14580     00 1E 26 36 |  if_ae	not	local01, #0
14584     A7 1E 62 FC | 	wrlong	local01, fp
14588     F8 02 90 FD | 	jmp	#LR__1653
1458c                 | LR__1643
1458c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1458c     08 4E 05 F1 | 	add	fp, #8
14590     A7 1E 02 FB | 	rdlong	local01, fp
14594     08 4E 85 F1 | 	sub	fp, #8
14598     1C 1E 0E F2 | 	cmp	local01, #28 wz
1459c     14 4E 05 A1 |  if_e	add	fp, #20
145a0     A7 24 02 AB |  if_e	rdlong	local04, fp
145a4     14 4E 85 A1 |  if_e	sub	fp, #20
145a8     12 23 02 A6 |  if_e	mov	local03, local04
145ac     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
145b0     44 00 90 5D |  if_ne	jmp	#LR__1644
145b4     00 1E 06 F6 | 	mov	local01, #0
145b8     A7 12 02 FB | 	rdlong	arg01, fp
145bc     09 13 52 F6 | 	abs	arg01, arg01 wc
145c0     1F 26 C6 C9 |  if_b	decod	local05, #31
145c4     00 26 06 36 |  if_ae	mov	local05, #0
145c8     CC EC B0 FD | 	call	#__system___float_fromuns
145cc     13 FB 61 F5 | 	xor	result1, local05
145d0     FD 12 02 F6 | 	mov	arg01, result1
145d4     0C 4E 05 F1 | 	add	fp, #12
145d8     A7 14 02 FB | 	rdlong	arg02, fp
145dc     0C 4E 85 F1 | 	sub	fp, #12
145e0     01 16 66 F6 | 	neg	arg03, #1
145e4     E8 F4 B0 FD | 	call	#__system___float_cmp
145e8     01 FA 55 F2 | 	cmps	result1, #1 wc
145ec     00 1E 26 36 |  if_ae	not	local01, #0
145f0     A7 1E 62 FC | 	wrlong	local01, fp
145f4     8C 02 90 FD | 	jmp	#LR__1653
145f8                 | LR__1644
145f8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
145f8     08 4E 05 F1 | 	add	fp, #8
145fc     A7 1E 02 FB | 	rdlong	local01, fp
14600     08 4E 85 F1 | 	sub	fp, #8
14604     1C 1E 0E F2 | 	cmp	local01, #28 wz
14608     14 4E 05 A1 |  if_e	add	fp, #20
1460c     A7 24 02 AB |  if_e	rdlong	local04, fp
14610     14 4E 85 A1 |  if_e	sub	fp, #20
14614     12 23 02 A6 |  if_e	mov	local03, local04
14618     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1461c     24 00 90 5D |  if_ne	jmp	#LR__1645
14620     00 1E 06 F6 | 	mov	local01, #0
14624     A7 20 02 FB | 	rdlong	local02, fp
14628     0C 4E 05 F1 | 	add	fp, #12
1462c     A7 22 02 FB | 	rdlong	local03, fp
14630     0C 4E 85 F1 | 	sub	fp, #12
14634     11 21 5A F2 | 	cmps	local02, local03 wcz
14638     01 1E 66 16 |  if_a	neg	local01, #1
1463c     A7 1E 62 FC | 	wrlong	local01, fp
14640     40 02 90 FD | 	jmp	#LR__1653
14644                 | LR__1645
14644                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
14644     08 4E 05 F1 | 	add	fp, #8
14648     A7 1E 02 FB | 	rdlong	local01, fp
1464c     08 4E 85 F1 | 	sub	fp, #8
14650     1C 1E 0E F2 | 	cmp	local01, #28 wz
14654     14 4E 05 A1 |  if_e	add	fp, #20
14658     A7 24 02 AB |  if_e	rdlong	local04, fp
1465c     14 4E 85 A1 |  if_e	sub	fp, #20
14660     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
14664     24 00 90 5D |  if_ne	jmp	#LR__1646
14668     00 1E 06 F6 | 	mov	local01, #0
1466c     A7 20 02 FB | 	rdlong	local02, fp
14670     0C 4E 05 F1 | 	add	fp, #12
14674     A7 22 02 FB | 	rdlong	local03, fp
14678     0C 4E 85 F1 | 	sub	fp, #12
1467c     11 21 5A F2 | 	cmps	local02, local03 wcz
14680     01 1E 66 16 |  if_a	neg	local01, #1
14684     A7 1E 62 FC | 	wrlong	local01, fp
14688     F8 01 90 FD | 	jmp	#LR__1653
1468c                 | LR__1646
1468c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1468c     08 4E 05 F1 | 	add	fp, #8
14690     A7 1E 02 FB | 	rdlong	local01, fp
14694     08 4E 85 F1 | 	sub	fp, #8
14698     1D 1E 0E F2 | 	cmp	local01, #29 wz
1469c     14 4E 05 A1 |  if_e	add	fp, #20
146a0     A7 22 02 AB |  if_e	rdlong	local03, fp
146a4     14 4E 85 A1 |  if_e	sub	fp, #20
146a8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
146ac     34 00 90 5D |  if_ne	jmp	#LR__1647
146b0     00 1E 06 F6 | 	mov	local01, #0
146b4     A7 12 02 FB | 	rdlong	arg01, fp
146b8     DC EB B0 FD | 	call	#__system___float_fromuns
146bc     FD 12 02 F6 | 	mov	arg01, result1
146c0     0C 4E 05 F1 | 	add	fp, #12
146c4     A7 14 02 FB | 	rdlong	arg02, fp
146c8     0C 4E 85 F1 | 	sub	fp, #12
146cc     01 16 66 F6 | 	neg	arg03, #1
146d0     FC F3 B0 FD | 	call	#__system___float_cmp
146d4     01 FA 55 F2 | 	cmps	result1, #1 wc
146d8     00 1E 26 36 |  if_ae	not	local01, #0
146dc     A7 1E 62 FC | 	wrlong	local01, fp
146e0     A0 01 90 FD | 	jmp	#LR__1653
146e4                 | LR__1647
146e4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
146e4     08 4E 05 F1 | 	add	fp, #8
146e8     A7 1E 02 FB | 	rdlong	local01, fp
146ec     08 4E 85 F1 | 	sub	fp, #8
146f0     1D 1E 0E F2 | 	cmp	local01, #29 wz
146f4     14 4E 05 A1 |  if_e	add	fp, #20
146f8     A7 22 02 AB |  if_e	rdlong	local03, fp
146fc     14 4E 85 A1 |  if_e	sub	fp, #20
14700     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14704     24 00 90 5D |  if_ne	jmp	#LR__1648
14708     00 1E 06 F6 | 	mov	local01, #0
1470c     A7 20 02 FB | 	rdlong	local02, fp
14710     0C 4E 05 F1 | 	add	fp, #12
14714     A7 22 02 FB | 	rdlong	local03, fp
14718     0C 4E 85 F1 | 	sub	fp, #12
1471c     11 21 5A F2 | 	cmps	local02, local03 wcz
14720     01 1E 66 16 |  if_a	neg	local01, #1
14724     A7 1E 62 FC | 	wrlong	local01, fp
14728     58 01 90 FD | 	jmp	#LR__1653
1472c                 | LR__1648
1472c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1472c     08 4E 05 F1 | 	add	fp, #8
14730     A7 1E 02 FB | 	rdlong	local01, fp
14734     08 4E 85 F1 | 	sub	fp, #8
14738     1D 1E 0E F2 | 	cmp	local01, #29 wz
1473c     14 4E 05 A1 |  if_e	add	fp, #20
14740     A7 22 02 AB |  if_e	rdlong	local03, fp
14744     14 4E 85 A1 |  if_e	sub	fp, #20
14748     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1474c     24 00 90 5D |  if_ne	jmp	#LR__1649
14750     00 1E 06 F6 | 	mov	local01, #0
14754     A7 20 02 FB | 	rdlong	local02, fp
14758     0C 4E 05 F1 | 	add	fp, #12
1475c     A7 22 02 FB | 	rdlong	local03, fp
14760     0C 4E 85 F1 | 	sub	fp, #12
14764     11 21 1A F2 | 	cmp	local02, local03 wcz
14768     01 1E 66 16 |  if_a	neg	local01, #1
1476c     A7 1E 62 FC | 	wrlong	local01, fp
14770     10 01 90 FD | 	jmp	#LR__1653
14774                 | LR__1649
14774                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
14774     08 4E 05 F1 | 	add	fp, #8
14778     A7 1E 02 FB | 	rdlong	local01, fp
1477c     08 4E 85 F1 | 	sub	fp, #8
14780     2B 1E 0E F2 | 	cmp	local01, #43 wz
14784     14 4E 05 A1 |  if_e	add	fp, #20
14788     A7 22 02 AB |  if_e	rdlong	local03, fp
1478c     14 4E 85 A1 |  if_e	sub	fp, #20
14790     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14794     30 00 90 5D |  if_ne	jmp	#LR__1650
14798     00 1E 06 F6 | 	mov	local01, #0
1479c     A7 12 02 FB | 	rdlong	arg01, fp
147a0     2C CC BF FD | 	call	#_convertstring
147a4     FD 12 02 F6 | 	mov	arg01, result1
147a8     0C 4E 05 F1 | 	add	fp, #12
147ac     A7 14 02 FB | 	rdlong	arg02, fp
147b0     0C 4E 85 F1 | 	sub	fp, #12
147b4     58 C3 B0 FD | 	call	#__system___string_cmp
147b8     01 FA 55 F2 | 	cmps	result1, #1 wc
147bc     00 1E 26 36 |  if_ae	not	local01, #0
147c0     A7 1E 62 FC | 	wrlong	local01, fp
147c4     BC 00 90 FD | 	jmp	#LR__1653
147c8                 | LR__1650
147c8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
147c8     08 4E 05 F1 | 	add	fp, #8
147cc     A7 1E 02 FB | 	rdlong	local01, fp
147d0     08 4E 85 F1 | 	sub	fp, #8
147d4     1F 1E 0E F2 | 	cmp	local01, #31 wz
147d8     14 4E 05 A1 |  if_e	add	fp, #20
147dc     A7 22 02 AB |  if_e	rdlong	local03, fp
147e0     14 4E 85 A1 |  if_e	sub	fp, #20
147e4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
147e8     34 00 90 5D |  if_ne	jmp	#LR__1651
147ec     00 1E 06 F6 | 	mov	local01, #0
147f0     A7 20 02 FB | 	rdlong	local02, fp
147f4     0C 4E 05 F1 | 	add	fp, #12
147f8     A7 12 02 FB | 	rdlong	arg01, fp
147fc     0C 4E 85 F1 | 	sub	fp, #12
14800     CC CB BF FD | 	call	#_convertstring
14804     FD 14 02 F6 | 	mov	arg02, result1
14808     10 13 02 F6 | 	mov	arg01, local02
1480c     00 C3 B0 FD | 	call	#__system___string_cmp
14810     01 FA 55 F2 | 	cmps	result1, #1 wc
14814     00 1E 26 36 |  if_ae	not	local01, #0
14818     A7 1E 62 FC | 	wrlong	local01, fp
1481c     64 00 90 FD | 	jmp	#LR__1653
14820                 | LR__1651
14820                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
14820     08 4E 05 F1 | 	add	fp, #8
14824     A7 1E 02 FB | 	rdlong	local01, fp
14828     08 4E 85 F1 | 	sub	fp, #8
1482c     2B 1E 0E F2 | 	cmp	local01, #43 wz
14830     14 4E 05 A1 |  if_e	add	fp, #20
14834     A7 22 02 AB |  if_e	rdlong	local03, fp
14838     14 4E 85 A1 |  if_e	sub	fp, #20
1483c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
14840     3C 00 90 5D |  if_ne	jmp	#LR__1652
14844     00 1E 06 F6 | 	mov	local01, #0
14848     A7 12 02 FB | 	rdlong	arg01, fp
1484c     80 CB BF FD | 	call	#_convertstring
14850     FD 20 02 F6 | 	mov	local02, result1
14854     0C 4E 05 F1 | 	add	fp, #12
14858     A7 12 02 FB | 	rdlong	arg01, fp
1485c     0C 4E 85 F1 | 	sub	fp, #12
14860     6C CB BF FD | 	call	#_convertstring
14864     FD 14 02 F6 | 	mov	arg02, result1
14868     10 13 02 F6 | 	mov	arg01, local02
1486c     A0 C2 B0 FD | 	call	#__system___string_cmp
14870     01 FA 55 F2 | 	cmps	result1, #1 wc
14874     00 1E 26 36 |  if_ae	not	local01, #0
14878     A7 1E 62 FC | 	wrlong	local01, fp
1487c     04 00 90 FD | 	jmp	#LR__1653
14880                 | LR__1652
14880     A7 00 68 FC | 	wrlong	#0, fp
14884                 | LR__1653
14884     08 4E 05 F1 | 	add	fp, #8
14888     A7 38 68 FC | 	wrlong	#28, fp
1488c     08 4E 85 F1 | 	sub	fp, #8
14890     A7 12 02 F6 | 	mov	arg01, fp
14894     58 72 BF FD | 	call	#_push
14898     A7 F0 03 F6 | 	mov	ptra, fp
1489c     B2 00 A0 FD | 	call	#popregs_
148a0                 | _do_gt_ret
148a0     2D 00 64 FD | 	ret
148a4                 | 
148a4                 | ' 
148a4                 | ' sub do_lt
148a4                 | _do_lt
148a4     05 4A 05 F6 | 	mov	COUNT_, #5
148a8     A8 00 A0 FD | 	call	#pushregs_
148ac     18 F0 07 F1 | 	add	ptra, #24
148b0     A4 71 BF FD | 	call	#_pop
148b4     FD 1E 02 F6 | 	mov	local01, result1
148b8     FE 20 02 F6 | 	mov	local02, result2
148bc     FF 22 02 F6 | 	mov	local03, result3
148c0     0C 4E 05 F1 | 	add	fp, #12
148c4     A7 1E 62 FC | 	wrlong	local01, fp
148c8     04 4E 05 F1 | 	add	fp, #4
148cc     A7 20 62 FC | 	wrlong	local02, fp
148d0     04 4E 05 F1 | 	add	fp, #4
148d4     A7 22 62 FC | 	wrlong	local03, fp
148d8     14 4E 85 F1 | 	sub	fp, #20
148dc     78 71 BF FD | 	call	#_pop
148e0     FF 22 02 F6 | 	mov	local03, result3
148e4     A7 FA 61 FC | 	wrlong	result1, fp
148e8     04 4E 05 F1 | 	add	fp, #4
148ec     A7 FC 61 FC | 	wrlong	result2, fp
148f0     04 4E 05 F1 | 	add	fp, #4
148f4     A7 22 62 FC | 	wrlong	local03, fp
148f8                 | ' t2=pop()
148f8                 | ' t1=pop()
148f8                 | ' 
148f8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
148f8     08 4E 85 F1 | 	sub	fp, #8
148fc     1F 22 0E F2 | 	cmp	local03, #31 wz
14900     14 4E 05 A1 |  if_e	add	fp, #20
14904     A7 24 02 AB |  if_e	rdlong	local04, fp
14908     14 4E 85 A1 |  if_e	sub	fp, #20
1490c     12 23 02 A6 |  if_e	mov	local03, local04
14910     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14914     28 00 90 5D |  if_ne	jmp	#LR__1660
14918     00 1E 06 F6 | 	mov	local01, #0
1491c     A7 12 02 FB | 	rdlong	arg01, fp
14920     0C 4E 05 F1 | 	add	fp, #12
14924     A7 14 02 FB | 	rdlong	arg02, fp
14928     0C 4E 85 F1 | 	sub	fp, #12
1492c     E0 C1 B0 FD | 	call	#__system___string_cmp
14930     00 FA 55 F2 | 	cmps	result1, #0 wc
14934     00 1E 26 C6 |  if_b	not	local01, #0
14938     A7 1E 62 FC | 	wrlong	local01, fp
1493c     0C 04 90 FD | 	jmp	#LR__1673
14940                 | LR__1660
14940                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
14940     08 4E 05 F1 | 	add	fp, #8
14944     A7 1E 02 FB | 	rdlong	local01, fp
14948     08 4E 85 F1 | 	sub	fp, #8
1494c     1E 1E 0E F2 | 	cmp	local01, #30 wz
14950     14 4E 05 A1 |  if_e	add	fp, #20
14954     A7 24 02 AB |  if_e	rdlong	local04, fp
14958     14 4E 85 A1 |  if_e	sub	fp, #20
1495c     12 23 02 A6 |  if_e	mov	local03, local04
14960     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14964     2C 00 90 5D |  if_ne	jmp	#LR__1661
14968     00 1E 06 F6 | 	mov	local01, #0
1496c     A7 12 02 FB | 	rdlong	arg01, fp
14970     0C 4E 05 F1 | 	add	fp, #12
14974     A7 14 02 FB | 	rdlong	arg02, fp
14978     0C 4E 85 F1 | 	sub	fp, #12
1497c     01 16 06 F6 | 	mov	arg03, #1
14980     4C F1 B0 FD | 	call	#__system___float_cmp
14984     00 FA 55 F2 | 	cmps	result1, #0 wc
14988     00 1E 26 C6 |  if_b	not	local01, #0
1498c     A7 1E 62 FC | 	wrlong	local01, fp
14990     B8 03 90 FD | 	jmp	#LR__1673
14994                 | LR__1661
14994                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
14994     08 4E 05 F1 | 	add	fp, #8
14998     A7 1E 02 FB | 	rdlong	local01, fp
1499c     08 4E 85 F1 | 	sub	fp, #8
149a0     1E 1E 0E F2 | 	cmp	local01, #30 wz
149a4     14 4E 05 A1 |  if_e	add	fp, #20
149a8     A7 24 02 AB |  if_e	rdlong	local04, fp
149ac     14 4E 85 A1 |  if_e	sub	fp, #20
149b0     12 23 02 A6 |  if_e	mov	local03, local04
149b4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
149b8     48 00 90 5D |  if_ne	jmp	#LR__1662
149bc     00 1E 06 F6 | 	mov	local01, #0
149c0     A7 20 02 FB | 	rdlong	local02, fp
149c4     0C 4E 05 F1 | 	add	fp, #12
149c8     A7 12 02 FB | 	rdlong	arg01, fp
149cc     0C 4E 85 F1 | 	sub	fp, #12
149d0     09 13 52 F6 | 	abs	arg01, arg01 wc
149d4     1F 26 C6 C9 |  if_b	decod	local05, #31
149d8     00 26 06 36 |  if_ae	mov	local05, #0
149dc     B8 E8 B0 FD | 	call	#__system___float_fromuns
149e0     13 FB 61 F5 | 	xor	result1, local05
149e4     FD 14 02 F6 | 	mov	arg02, result1
149e8     10 13 02 F6 | 	mov	arg01, local02
149ec     01 16 06 F6 | 	mov	arg03, #1
149f0     DC F0 B0 FD | 	call	#__system___float_cmp
149f4     00 FA 55 F2 | 	cmps	result1, #0 wc
149f8     00 1E 26 C6 |  if_b	not	local01, #0
149fc     A7 1E 62 FC | 	wrlong	local01, fp
14a00     48 03 90 FD | 	jmp	#LR__1673
14a04                 | LR__1662
14a04                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
14a04     08 4E 05 F1 | 	add	fp, #8
14a08     A7 1E 02 FB | 	rdlong	local01, fp
14a0c     08 4E 85 F1 | 	sub	fp, #8
14a10     1E 1E 0E F2 | 	cmp	local01, #30 wz
14a14     14 4E 05 A1 |  if_e	add	fp, #20
14a18     A7 24 02 AB |  if_e	rdlong	local04, fp
14a1c     14 4E 85 A1 |  if_e	sub	fp, #20
14a20     12 23 02 A6 |  if_e	mov	local03, local04
14a24     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14a28     38 00 90 5D |  if_ne	jmp	#LR__1663
14a2c     00 1E 06 F6 | 	mov	local01, #0
14a30     A7 20 02 FB | 	rdlong	local02, fp
14a34     0C 4E 05 F1 | 	add	fp, #12
14a38     A7 12 02 FB | 	rdlong	arg01, fp
14a3c     0C 4E 85 F1 | 	sub	fp, #12
14a40     54 E8 B0 FD | 	call	#__system___float_fromuns
14a44     FD 14 02 F6 | 	mov	arg02, result1
14a48     10 13 02 F6 | 	mov	arg01, local02
14a4c     01 16 06 F6 | 	mov	arg03, #1
14a50     7C F0 B0 FD | 	call	#__system___float_cmp
14a54     00 FA 55 F2 | 	cmps	result1, #0 wc
14a58     00 1E 26 C6 |  if_b	not	local01, #0
14a5c     A7 1E 62 FC | 	wrlong	local01, fp
14a60     E8 02 90 FD | 	jmp	#LR__1673
14a64                 | LR__1663
14a64                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
14a64     08 4E 05 F1 | 	add	fp, #8
14a68     A7 1E 02 FB | 	rdlong	local01, fp
14a6c     08 4E 85 F1 | 	sub	fp, #8
14a70     1C 1E 0E F2 | 	cmp	local01, #28 wz
14a74     14 4E 05 A1 |  if_e	add	fp, #20
14a78     A7 24 02 AB |  if_e	rdlong	local04, fp
14a7c     14 4E 85 A1 |  if_e	sub	fp, #20
14a80     12 23 02 A6 |  if_e	mov	local03, local04
14a84     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14a88     44 00 90 5D |  if_ne	jmp	#LR__1664
14a8c     00 1E 06 F6 | 	mov	local01, #0
14a90     A7 12 02 FB | 	rdlong	arg01, fp
14a94     09 13 52 F6 | 	abs	arg01, arg01 wc
14a98     1F 26 C6 C9 |  if_b	decod	local05, #31
14a9c     00 26 06 36 |  if_ae	mov	local05, #0
14aa0     F4 E7 B0 FD | 	call	#__system___float_fromuns
14aa4     13 FB 61 F5 | 	xor	result1, local05
14aa8     FD 12 02 F6 | 	mov	arg01, result1
14aac     0C 4E 05 F1 | 	add	fp, #12
14ab0     A7 14 02 FB | 	rdlong	arg02, fp
14ab4     0C 4E 85 F1 | 	sub	fp, #12
14ab8     01 16 06 F6 | 	mov	arg03, #1
14abc     10 F0 B0 FD | 	call	#__system___float_cmp
14ac0     00 FA 55 F2 | 	cmps	result1, #0 wc
14ac4     00 1E 26 C6 |  if_b	not	local01, #0
14ac8     A7 1E 62 FC | 	wrlong	local01, fp
14acc     7C 02 90 FD | 	jmp	#LR__1673
14ad0                 | LR__1664
14ad0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
14ad0     08 4E 05 F1 | 	add	fp, #8
14ad4     A7 1E 02 FB | 	rdlong	local01, fp
14ad8     08 4E 85 F1 | 	sub	fp, #8
14adc     1C 1E 0E F2 | 	cmp	local01, #28 wz
14ae0     14 4E 05 A1 |  if_e	add	fp, #20
14ae4     A7 24 02 AB |  if_e	rdlong	local04, fp
14ae8     14 4E 85 A1 |  if_e	sub	fp, #20
14aec     12 23 02 A6 |  if_e	mov	local03, local04
14af0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14af4     20 00 90 5D |  if_ne	jmp	#LR__1665
14af8     A7 20 02 FB | 	rdlong	local02, fp
14afc     0C 4E 05 F1 | 	add	fp, #12
14b00     A7 22 02 FB | 	rdlong	local03, fp
14b04     0C 4E 85 F1 | 	sub	fp, #12
14b08     11 21 52 F2 | 	cmps	local02, local03 wc
14b0c     0F 1F A2 F1 | 	subx	local01, local01
14b10     A7 1E 62 FC | 	wrlong	local01, fp
14b14     34 02 90 FD | 	jmp	#LR__1673
14b18                 | LR__1665
14b18                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
14b18     08 4E 05 F1 | 	add	fp, #8
14b1c     A7 1E 02 FB | 	rdlong	local01, fp
14b20     08 4E 85 F1 | 	sub	fp, #8
14b24     1C 1E 0E F2 | 	cmp	local01, #28 wz
14b28     14 4E 05 A1 |  if_e	add	fp, #20
14b2c     A7 24 02 AB |  if_e	rdlong	local04, fp
14b30     14 4E 85 A1 |  if_e	sub	fp, #20
14b34     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
14b38     20 00 90 5D |  if_ne	jmp	#LR__1666
14b3c     A7 20 02 FB | 	rdlong	local02, fp
14b40     0C 4E 05 F1 | 	add	fp, #12
14b44     A7 22 02 FB | 	rdlong	local03, fp
14b48     0C 4E 85 F1 | 	sub	fp, #12
14b4c     11 21 52 F2 | 	cmps	local02, local03 wc
14b50     0F 1F A2 F1 | 	subx	local01, local01
14b54     A7 1E 62 FC | 	wrlong	local01, fp
14b58     F0 01 90 FD | 	jmp	#LR__1673
14b5c                 | LR__1666
14b5c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
14b5c     08 4E 05 F1 | 	add	fp, #8
14b60     A7 1E 02 FB | 	rdlong	local01, fp
14b64     08 4E 85 F1 | 	sub	fp, #8
14b68     1D 1E 0E F2 | 	cmp	local01, #29 wz
14b6c     14 4E 05 A1 |  if_e	add	fp, #20
14b70     A7 22 02 AB |  if_e	rdlong	local03, fp
14b74     14 4E 85 A1 |  if_e	sub	fp, #20
14b78     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14b7c     34 00 90 5D |  if_ne	jmp	#LR__1667
14b80     00 1E 06 F6 | 	mov	local01, #0
14b84     A7 12 02 FB | 	rdlong	arg01, fp
14b88     0C E7 B0 FD | 	call	#__system___float_fromuns
14b8c     FD 12 02 F6 | 	mov	arg01, result1
14b90     0C 4E 05 F1 | 	add	fp, #12
14b94     A7 14 02 FB | 	rdlong	arg02, fp
14b98     0C 4E 85 F1 | 	sub	fp, #12
14b9c     01 16 06 F6 | 	mov	arg03, #1
14ba0     2C EF B0 FD | 	call	#__system___float_cmp
14ba4     00 FA 55 F2 | 	cmps	result1, #0 wc
14ba8     00 1E 26 C6 |  if_b	not	local01, #0
14bac     A7 1E 62 FC | 	wrlong	local01, fp
14bb0     98 01 90 FD | 	jmp	#LR__1673
14bb4                 | LR__1667
14bb4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
14bb4     08 4E 05 F1 | 	add	fp, #8
14bb8     A7 1E 02 FB | 	rdlong	local01, fp
14bbc     08 4E 85 F1 | 	sub	fp, #8
14bc0     1D 1E 0E F2 | 	cmp	local01, #29 wz
14bc4     14 4E 05 A1 |  if_e	add	fp, #20
14bc8     A7 22 02 AB |  if_e	rdlong	local03, fp
14bcc     14 4E 85 A1 |  if_e	sub	fp, #20
14bd0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14bd4     20 00 90 5D |  if_ne	jmp	#LR__1668
14bd8     A7 20 02 FB | 	rdlong	local02, fp
14bdc     0C 4E 05 F1 | 	add	fp, #12
14be0     A7 22 02 FB | 	rdlong	local03, fp
14be4     0C 4E 85 F1 | 	sub	fp, #12
14be8     11 21 52 F2 | 	cmps	local02, local03 wc
14bec     0F 1F A2 F1 | 	subx	local01, local01
14bf0     A7 1E 62 FC | 	wrlong	local01, fp
14bf4     54 01 90 FD | 	jmp	#LR__1673
14bf8                 | LR__1668
14bf8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
14bf8     08 4E 05 F1 | 	add	fp, #8
14bfc     A7 1E 02 FB | 	rdlong	local01, fp
14c00     08 4E 85 F1 | 	sub	fp, #8
14c04     1D 1E 0E F2 | 	cmp	local01, #29 wz
14c08     14 4E 05 A1 |  if_e	add	fp, #20
14c0c     A7 22 02 AB |  if_e	rdlong	local03, fp
14c10     14 4E 85 A1 |  if_e	sub	fp, #20
14c14     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14c18     20 00 90 5D |  if_ne	jmp	#LR__1669
14c1c     A7 20 02 FB | 	rdlong	local02, fp
14c20     0C 4E 05 F1 | 	add	fp, #12
14c24     A7 22 02 FB | 	rdlong	local03, fp
14c28     0C 4E 85 F1 | 	sub	fp, #12
14c2c     11 21 12 F2 | 	cmp	local02, local03 wc
14c30     0F 1F A2 F1 | 	subx	local01, local01
14c34     A7 1E 62 FC | 	wrlong	local01, fp
14c38     10 01 90 FD | 	jmp	#LR__1673
14c3c                 | LR__1669
14c3c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
14c3c     08 4E 05 F1 | 	add	fp, #8
14c40     A7 1E 02 FB | 	rdlong	local01, fp
14c44     08 4E 85 F1 | 	sub	fp, #8
14c48     2B 1E 0E F2 | 	cmp	local01, #43 wz
14c4c     14 4E 05 A1 |  if_e	add	fp, #20
14c50     A7 22 02 AB |  if_e	rdlong	local03, fp
14c54     14 4E 85 A1 |  if_e	sub	fp, #20
14c58     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14c5c     30 00 90 5D |  if_ne	jmp	#LR__1670
14c60     00 1E 06 F6 | 	mov	local01, #0
14c64     A7 12 02 FB | 	rdlong	arg01, fp
14c68     64 C7 BF FD | 	call	#_convertstring
14c6c     FD 12 02 F6 | 	mov	arg01, result1
14c70     0C 4E 05 F1 | 	add	fp, #12
14c74     A7 14 02 FB | 	rdlong	arg02, fp
14c78     0C 4E 85 F1 | 	sub	fp, #12
14c7c     90 BE B0 FD | 	call	#__system___string_cmp
14c80     00 FA 55 F2 | 	cmps	result1, #0 wc
14c84     00 1E 26 C6 |  if_b	not	local01, #0
14c88     A7 1E 62 FC | 	wrlong	local01, fp
14c8c     BC 00 90 FD | 	jmp	#LR__1673
14c90                 | LR__1670
14c90                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
14c90     08 4E 05 F1 | 	add	fp, #8
14c94     A7 1E 02 FB | 	rdlong	local01, fp
14c98     08 4E 85 F1 | 	sub	fp, #8
14c9c     1F 1E 0E F2 | 	cmp	local01, #31 wz
14ca0     14 4E 05 A1 |  if_e	add	fp, #20
14ca4     A7 22 02 AB |  if_e	rdlong	local03, fp
14ca8     14 4E 85 A1 |  if_e	sub	fp, #20
14cac     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
14cb0     34 00 90 5D |  if_ne	jmp	#LR__1671
14cb4     00 1E 06 F6 | 	mov	local01, #0
14cb8     A7 20 02 FB | 	rdlong	local02, fp
14cbc     0C 4E 05 F1 | 	add	fp, #12
14cc0     A7 12 02 FB | 	rdlong	arg01, fp
14cc4     0C 4E 85 F1 | 	sub	fp, #12
14cc8     04 C7 BF FD | 	call	#_convertstring
14ccc     FD 14 02 F6 | 	mov	arg02, result1
14cd0     10 13 02 F6 | 	mov	arg01, local02
14cd4     38 BE B0 FD | 	call	#__system___string_cmp
14cd8     00 FA 55 F2 | 	cmps	result1, #0 wc
14cdc     00 1E 26 C6 |  if_b	not	local01, #0
14ce0     A7 1E 62 FC | 	wrlong	local01, fp
14ce4     64 00 90 FD | 	jmp	#LR__1673
14ce8                 | LR__1671
14ce8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
14ce8     08 4E 05 F1 | 	add	fp, #8
14cec     A7 1E 02 FB | 	rdlong	local01, fp
14cf0     08 4E 85 F1 | 	sub	fp, #8
14cf4     2B 1E 0E F2 | 	cmp	local01, #43 wz
14cf8     14 4E 05 A1 |  if_e	add	fp, #20
14cfc     A7 22 02 AB |  if_e	rdlong	local03, fp
14d00     14 4E 85 A1 |  if_e	sub	fp, #20
14d04     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
14d08     3C 00 90 5D |  if_ne	jmp	#LR__1672
14d0c     00 1E 06 F6 | 	mov	local01, #0
14d10     A7 12 02 FB | 	rdlong	arg01, fp
14d14     B8 C6 BF FD | 	call	#_convertstring
14d18     FD 20 02 F6 | 	mov	local02, result1
14d1c     0C 4E 05 F1 | 	add	fp, #12
14d20     A7 12 02 FB | 	rdlong	arg01, fp
14d24     0C 4E 85 F1 | 	sub	fp, #12
14d28     A4 C6 BF FD | 	call	#_convertstring
14d2c     FD 14 02 F6 | 	mov	arg02, result1
14d30     10 13 02 F6 | 	mov	arg01, local02
14d34     D8 BD B0 FD | 	call	#__system___string_cmp
14d38     00 FA 55 F2 | 	cmps	result1, #0 wc
14d3c     00 1E 26 C6 |  if_b	not	local01, #0
14d40     A7 1E 62 FC | 	wrlong	local01, fp
14d44     04 00 90 FD | 	jmp	#LR__1673
14d48                 | LR__1672
14d48     A7 00 68 FC | 	wrlong	#0, fp
14d4c                 | LR__1673
14d4c     08 4E 05 F1 | 	add	fp, #8
14d50     A7 38 68 FC | 	wrlong	#28, fp
14d54     08 4E 85 F1 | 	sub	fp, #8
14d58     A7 12 02 F6 | 	mov	arg01, fp
14d5c     90 6D BF FD | 	call	#_push
14d60     A7 F0 03 F6 | 	mov	ptra, fp
14d64     B2 00 A0 FD | 	call	#popregs_
14d68                 | _do_lt_ret
14d68     2D 00 64 FD | 	ret
14d6c                 | 
14d6c                 | ' 
14d6c                 | ' sub do_ge
14d6c                 | _do_ge
14d6c     05 4A 05 F6 | 	mov	COUNT_, #5
14d70     A8 00 A0 FD | 	call	#pushregs_
14d74     18 F0 07 F1 | 	add	ptra, #24
14d78     DC 6C BF FD | 	call	#_pop
14d7c     FD 1E 02 F6 | 	mov	local01, result1
14d80     FE 20 02 F6 | 	mov	local02, result2
14d84     FF 22 02 F6 | 	mov	local03, result3
14d88     0C 4E 05 F1 | 	add	fp, #12
14d8c     A7 1E 62 FC | 	wrlong	local01, fp
14d90     04 4E 05 F1 | 	add	fp, #4
14d94     A7 20 62 FC | 	wrlong	local02, fp
14d98     04 4E 05 F1 | 	add	fp, #4
14d9c     A7 22 62 FC | 	wrlong	local03, fp
14da0     14 4E 85 F1 | 	sub	fp, #20
14da4     B0 6C BF FD | 	call	#_pop
14da8     FF 22 02 F6 | 	mov	local03, result3
14dac     A7 FA 61 FC | 	wrlong	result1, fp
14db0     04 4E 05 F1 | 	add	fp, #4
14db4     A7 FC 61 FC | 	wrlong	result2, fp
14db8     04 4E 05 F1 | 	add	fp, #4
14dbc     A7 22 62 FC | 	wrlong	local03, fp
14dc0                 | ' t2=pop()
14dc0                 | ' t1=pop()
14dc0                 | ' 
14dc0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
14dc0     08 4E 85 F1 | 	sub	fp, #8
14dc4     1F 22 0E F2 | 	cmp	local03, #31 wz
14dc8     14 4E 05 A1 |  if_e	add	fp, #20
14dcc     A7 24 02 AB |  if_e	rdlong	local04, fp
14dd0     14 4E 85 A1 |  if_e	sub	fp, #20
14dd4     12 23 02 A6 |  if_e	mov	local03, local04
14dd8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14ddc     28 00 90 5D |  if_ne	jmp	#LR__1680
14de0     00 1E 06 F6 | 	mov	local01, #0
14de4     A7 12 02 FB | 	rdlong	arg01, fp
14de8     0C 4E 05 F1 | 	add	fp, #12
14dec     A7 14 02 FB | 	rdlong	arg02, fp
14df0     0C 4E 85 F1 | 	sub	fp, #12
14df4     18 BD B0 FD | 	call	#__system___string_cmp
14df8     00 FA 55 F2 | 	cmps	result1, #0 wc
14dfc     00 1E 26 36 |  if_ae	not	local01, #0
14e00     A7 1E 62 FC | 	wrlong	local01, fp
14e04     1C 04 90 FD | 	jmp	#LR__1693
14e08                 | LR__1680
14e08                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
14e08     08 4E 05 F1 | 	add	fp, #8
14e0c     A7 1E 02 FB | 	rdlong	local01, fp
14e10     08 4E 85 F1 | 	sub	fp, #8
14e14     1E 1E 0E F2 | 	cmp	local01, #30 wz
14e18     14 4E 05 A1 |  if_e	add	fp, #20
14e1c     A7 24 02 AB |  if_e	rdlong	local04, fp
14e20     14 4E 85 A1 |  if_e	sub	fp, #20
14e24     12 23 02 A6 |  if_e	mov	local03, local04
14e28     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14e2c     2C 00 90 5D |  if_ne	jmp	#LR__1681
14e30     00 1E 06 F6 | 	mov	local01, #0
14e34     A7 12 02 FB | 	rdlong	arg01, fp
14e38     0C 4E 05 F1 | 	add	fp, #12
14e3c     A7 14 02 FB | 	rdlong	arg02, fp
14e40     0C 4E 85 F1 | 	sub	fp, #12
14e44     01 16 66 F6 | 	neg	arg03, #1
14e48     84 EC B0 FD | 	call	#__system___float_cmp
14e4c     00 FA 55 F2 | 	cmps	result1, #0 wc
14e50     00 1E 26 36 |  if_ae	not	local01, #0
14e54     A7 1E 62 FC | 	wrlong	local01, fp
14e58     C8 03 90 FD | 	jmp	#LR__1693
14e5c                 | LR__1681
14e5c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
14e5c     08 4E 05 F1 | 	add	fp, #8
14e60     A7 1E 02 FB | 	rdlong	local01, fp
14e64     08 4E 85 F1 | 	sub	fp, #8
14e68     1E 1E 0E F2 | 	cmp	local01, #30 wz
14e6c     14 4E 05 A1 |  if_e	add	fp, #20
14e70     A7 24 02 AB |  if_e	rdlong	local04, fp
14e74     14 4E 85 A1 |  if_e	sub	fp, #20
14e78     12 23 02 A6 |  if_e	mov	local03, local04
14e7c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14e80     48 00 90 5D |  if_ne	jmp	#LR__1682
14e84     00 1E 06 F6 | 	mov	local01, #0
14e88     A7 20 02 FB | 	rdlong	local02, fp
14e8c     0C 4E 05 F1 | 	add	fp, #12
14e90     A7 12 02 FB | 	rdlong	arg01, fp
14e94     0C 4E 85 F1 | 	sub	fp, #12
14e98     09 13 52 F6 | 	abs	arg01, arg01 wc
14e9c     1F 26 C6 C9 |  if_b	decod	local05, #31
14ea0     00 26 06 36 |  if_ae	mov	local05, #0
14ea4     F0 E3 B0 FD | 	call	#__system___float_fromuns
14ea8     13 FB 61 F5 | 	xor	result1, local05
14eac     FD 14 02 F6 | 	mov	arg02, result1
14eb0     10 13 02 F6 | 	mov	arg01, local02
14eb4     01 16 66 F6 | 	neg	arg03, #1
14eb8     14 EC B0 FD | 	call	#__system___float_cmp
14ebc     00 FA 55 F2 | 	cmps	result1, #0 wc
14ec0     00 1E 26 36 |  if_ae	not	local01, #0
14ec4     A7 1E 62 FC | 	wrlong	local01, fp
14ec8     58 03 90 FD | 	jmp	#LR__1693
14ecc                 | LR__1682
14ecc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
14ecc     08 4E 05 F1 | 	add	fp, #8
14ed0     A7 1E 02 FB | 	rdlong	local01, fp
14ed4     08 4E 85 F1 | 	sub	fp, #8
14ed8     1E 1E 0E F2 | 	cmp	local01, #30 wz
14edc     14 4E 05 A1 |  if_e	add	fp, #20
14ee0     A7 24 02 AB |  if_e	rdlong	local04, fp
14ee4     14 4E 85 A1 |  if_e	sub	fp, #20
14ee8     12 23 02 A6 |  if_e	mov	local03, local04
14eec     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14ef0     38 00 90 5D |  if_ne	jmp	#LR__1683
14ef4     00 1E 06 F6 | 	mov	local01, #0
14ef8     A7 20 02 FB | 	rdlong	local02, fp
14efc     0C 4E 05 F1 | 	add	fp, #12
14f00     A7 12 02 FB | 	rdlong	arg01, fp
14f04     0C 4E 85 F1 | 	sub	fp, #12
14f08     8C E3 B0 FD | 	call	#__system___float_fromuns
14f0c     FD 14 02 F6 | 	mov	arg02, result1
14f10     10 13 02 F6 | 	mov	arg01, local02
14f14     01 16 66 F6 | 	neg	arg03, #1
14f18     B4 EB B0 FD | 	call	#__system___float_cmp
14f1c     00 FA 55 F2 | 	cmps	result1, #0 wc
14f20     00 1E 26 36 |  if_ae	not	local01, #0
14f24     A7 1E 62 FC | 	wrlong	local01, fp
14f28     F8 02 90 FD | 	jmp	#LR__1693
14f2c                 | LR__1683
14f2c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
14f2c     08 4E 05 F1 | 	add	fp, #8
14f30     A7 1E 02 FB | 	rdlong	local01, fp
14f34     08 4E 85 F1 | 	sub	fp, #8
14f38     1C 1E 0E F2 | 	cmp	local01, #28 wz
14f3c     14 4E 05 A1 |  if_e	add	fp, #20
14f40     A7 24 02 AB |  if_e	rdlong	local04, fp
14f44     14 4E 85 A1 |  if_e	sub	fp, #20
14f48     12 23 02 A6 |  if_e	mov	local03, local04
14f4c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14f50     44 00 90 5D |  if_ne	jmp	#LR__1684
14f54     00 1E 06 F6 | 	mov	local01, #0
14f58     A7 12 02 FB | 	rdlong	arg01, fp
14f5c     09 13 52 F6 | 	abs	arg01, arg01 wc
14f60     1F 26 C6 C9 |  if_b	decod	local05, #31
14f64     00 26 06 36 |  if_ae	mov	local05, #0
14f68     2C E3 B0 FD | 	call	#__system___float_fromuns
14f6c     13 FB 61 F5 | 	xor	result1, local05
14f70     FD 12 02 F6 | 	mov	arg01, result1
14f74     0C 4E 05 F1 | 	add	fp, #12
14f78     A7 14 02 FB | 	rdlong	arg02, fp
14f7c     0C 4E 85 F1 | 	sub	fp, #12
14f80     01 16 66 F6 | 	neg	arg03, #1
14f84     48 EB B0 FD | 	call	#__system___float_cmp
14f88     00 FA 55 F2 | 	cmps	result1, #0 wc
14f8c     00 1E 26 36 |  if_ae	not	local01, #0
14f90     A7 1E 62 FC | 	wrlong	local01, fp
14f94     8C 02 90 FD | 	jmp	#LR__1693
14f98                 | LR__1684
14f98                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
14f98     08 4E 05 F1 | 	add	fp, #8
14f9c     A7 1E 02 FB | 	rdlong	local01, fp
14fa0     08 4E 85 F1 | 	sub	fp, #8
14fa4     1C 1E 0E F2 | 	cmp	local01, #28 wz
14fa8     14 4E 05 A1 |  if_e	add	fp, #20
14fac     A7 24 02 AB |  if_e	rdlong	local04, fp
14fb0     14 4E 85 A1 |  if_e	sub	fp, #20
14fb4     12 23 02 A6 |  if_e	mov	local03, local04
14fb8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14fbc     24 00 90 5D |  if_ne	jmp	#LR__1685
14fc0     00 1E 06 F6 | 	mov	local01, #0
14fc4     A7 20 02 FB | 	rdlong	local02, fp
14fc8     0C 4E 05 F1 | 	add	fp, #12
14fcc     A7 22 02 FB | 	rdlong	local03, fp
14fd0     0C 4E 85 F1 | 	sub	fp, #12
14fd4     11 21 52 F2 | 	cmps	local02, local03 wc
14fd8     01 1E 66 36 |  if_ae	neg	local01, #1
14fdc     A7 1E 62 FC | 	wrlong	local01, fp
14fe0     40 02 90 FD | 	jmp	#LR__1693
14fe4                 | LR__1685
14fe4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
14fe4     08 4E 05 F1 | 	add	fp, #8
14fe8     A7 1E 02 FB | 	rdlong	local01, fp
14fec     08 4E 85 F1 | 	sub	fp, #8
14ff0     1C 1E 0E F2 | 	cmp	local01, #28 wz
14ff4     14 4E 05 A1 |  if_e	add	fp, #20
14ff8     A7 24 02 AB |  if_e	rdlong	local04, fp
14ffc     14 4E 85 A1 |  if_e	sub	fp, #20
15000     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
15004     24 00 90 5D |  if_ne	jmp	#LR__1686
15008     00 1E 06 F6 | 	mov	local01, #0
1500c     A7 20 02 FB | 	rdlong	local02, fp
15010     0C 4E 05 F1 | 	add	fp, #12
15014     A7 22 02 FB | 	rdlong	local03, fp
15018     0C 4E 85 F1 | 	sub	fp, #12
1501c     11 21 52 F2 | 	cmps	local02, local03 wc
15020     01 1E 66 36 |  if_ae	neg	local01, #1
15024     A7 1E 62 FC | 	wrlong	local01, fp
15028     F8 01 90 FD | 	jmp	#LR__1693
1502c                 | LR__1686
1502c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1502c     08 4E 05 F1 | 	add	fp, #8
15030     A7 1E 02 FB | 	rdlong	local01, fp
15034     08 4E 85 F1 | 	sub	fp, #8
15038     1D 1E 0E F2 | 	cmp	local01, #29 wz
1503c     14 4E 05 A1 |  if_e	add	fp, #20
15040     A7 22 02 AB |  if_e	rdlong	local03, fp
15044     14 4E 85 A1 |  if_e	sub	fp, #20
15048     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1504c     34 00 90 5D |  if_ne	jmp	#LR__1687
15050     00 1E 06 F6 | 	mov	local01, #0
15054     A7 12 02 FB | 	rdlong	arg01, fp
15058     3C E2 B0 FD | 	call	#__system___float_fromuns
1505c     FD 12 02 F6 | 	mov	arg01, result1
15060     0C 4E 05 F1 | 	add	fp, #12
15064     A7 14 02 FB | 	rdlong	arg02, fp
15068     0C 4E 85 F1 | 	sub	fp, #12
1506c     01 16 66 F6 | 	neg	arg03, #1
15070     5C EA B0 FD | 	call	#__system___float_cmp
15074     00 FA 55 F2 | 	cmps	result1, #0 wc
15078     00 1E 26 36 |  if_ae	not	local01, #0
1507c     A7 1E 62 FC | 	wrlong	local01, fp
15080     A0 01 90 FD | 	jmp	#LR__1693
15084                 | LR__1687
15084                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
15084     08 4E 05 F1 | 	add	fp, #8
15088     A7 1E 02 FB | 	rdlong	local01, fp
1508c     08 4E 85 F1 | 	sub	fp, #8
15090     1D 1E 0E F2 | 	cmp	local01, #29 wz
15094     14 4E 05 A1 |  if_e	add	fp, #20
15098     A7 22 02 AB |  if_e	rdlong	local03, fp
1509c     14 4E 85 A1 |  if_e	sub	fp, #20
150a0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
150a4     24 00 90 5D |  if_ne	jmp	#LR__1688
150a8     00 1E 06 F6 | 	mov	local01, #0
150ac     A7 20 02 FB | 	rdlong	local02, fp
150b0     0C 4E 05 F1 | 	add	fp, #12
150b4     A7 22 02 FB | 	rdlong	local03, fp
150b8     0C 4E 85 F1 | 	sub	fp, #12
150bc     11 21 52 F2 | 	cmps	local02, local03 wc
150c0     01 1E 66 36 |  if_ae	neg	local01, #1
150c4     A7 1E 62 FC | 	wrlong	local01, fp
150c8     58 01 90 FD | 	jmp	#LR__1693
150cc                 | LR__1688
150cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
150cc     08 4E 05 F1 | 	add	fp, #8
150d0     A7 1E 02 FB | 	rdlong	local01, fp
150d4     08 4E 85 F1 | 	sub	fp, #8
150d8     1D 1E 0E F2 | 	cmp	local01, #29 wz
150dc     14 4E 05 A1 |  if_e	add	fp, #20
150e0     A7 22 02 AB |  if_e	rdlong	local03, fp
150e4     14 4E 85 A1 |  if_e	sub	fp, #20
150e8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
150ec     24 00 90 5D |  if_ne	jmp	#LR__1689
150f0     00 1E 06 F6 | 	mov	local01, #0
150f4     A7 20 02 FB | 	rdlong	local02, fp
150f8     0C 4E 05 F1 | 	add	fp, #12
150fc     A7 22 02 FB | 	rdlong	local03, fp
15100     0C 4E 85 F1 | 	sub	fp, #12
15104     11 21 12 F2 | 	cmp	local02, local03 wc
15108     01 1E 66 36 |  if_ae	neg	local01, #1
1510c     A7 1E 62 FC | 	wrlong	local01, fp
15110     10 01 90 FD | 	jmp	#LR__1693
15114                 | LR__1689
15114                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
15114     08 4E 05 F1 | 	add	fp, #8
15118     A7 1E 02 FB | 	rdlong	local01, fp
1511c     08 4E 85 F1 | 	sub	fp, #8
15120     2B 1E 0E F2 | 	cmp	local01, #43 wz
15124     14 4E 05 A1 |  if_e	add	fp, #20
15128     A7 22 02 AB |  if_e	rdlong	local03, fp
1512c     14 4E 85 A1 |  if_e	sub	fp, #20
15130     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
15134     30 00 90 5D |  if_ne	jmp	#LR__1690
15138     00 1E 06 F6 | 	mov	local01, #0
1513c     A7 12 02 FB | 	rdlong	arg01, fp
15140     8C C2 BF FD | 	call	#_convertstring
15144     FD 12 02 F6 | 	mov	arg01, result1
15148     0C 4E 05 F1 | 	add	fp, #12
1514c     A7 14 02 FB | 	rdlong	arg02, fp
15150     0C 4E 85 F1 | 	sub	fp, #12
15154     B8 B9 B0 FD | 	call	#__system___string_cmp
15158     00 FA 55 F2 | 	cmps	result1, #0 wc
1515c     00 1E 26 36 |  if_ae	not	local01, #0
15160     A7 1E 62 FC | 	wrlong	local01, fp
15164     BC 00 90 FD | 	jmp	#LR__1693
15168                 | LR__1690
15168                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
15168     08 4E 05 F1 | 	add	fp, #8
1516c     A7 1E 02 FB | 	rdlong	local01, fp
15170     08 4E 85 F1 | 	sub	fp, #8
15174     1F 1E 0E F2 | 	cmp	local01, #31 wz
15178     14 4E 05 A1 |  if_e	add	fp, #20
1517c     A7 22 02 AB |  if_e	rdlong	local03, fp
15180     14 4E 85 A1 |  if_e	sub	fp, #20
15184     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
15188     34 00 90 5D |  if_ne	jmp	#LR__1691
1518c     00 1E 06 F6 | 	mov	local01, #0
15190     A7 20 02 FB | 	rdlong	local02, fp
15194     0C 4E 05 F1 | 	add	fp, #12
15198     A7 12 02 FB | 	rdlong	arg01, fp
1519c     0C 4E 85 F1 | 	sub	fp, #12
151a0     2C C2 BF FD | 	call	#_convertstring
151a4     FD 14 02 F6 | 	mov	arg02, result1
151a8     10 13 02 F6 | 	mov	arg01, local02
151ac     60 B9 B0 FD | 	call	#__system___string_cmp
151b0     00 FA 55 F2 | 	cmps	result1, #0 wc
151b4     00 1E 26 36 |  if_ae	not	local01, #0
151b8     A7 1E 62 FC | 	wrlong	local01, fp
151bc     64 00 90 FD | 	jmp	#LR__1693
151c0                 | LR__1691
151c0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
151c0     08 4E 05 F1 | 	add	fp, #8
151c4     A7 1E 02 FB | 	rdlong	local01, fp
151c8     08 4E 85 F1 | 	sub	fp, #8
151cc     2B 1E 0E F2 | 	cmp	local01, #43 wz
151d0     14 4E 05 A1 |  if_e	add	fp, #20
151d4     A7 22 02 AB |  if_e	rdlong	local03, fp
151d8     14 4E 85 A1 |  if_e	sub	fp, #20
151dc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
151e0     3C 00 90 5D |  if_ne	jmp	#LR__1692
151e4     00 1E 06 F6 | 	mov	local01, #0
151e8     A7 12 02 FB | 	rdlong	arg01, fp
151ec     E0 C1 BF FD | 	call	#_convertstring
151f0     FD 20 02 F6 | 	mov	local02, result1
151f4     0C 4E 05 F1 | 	add	fp, #12
151f8     A7 12 02 FB | 	rdlong	arg01, fp
151fc     0C 4E 85 F1 | 	sub	fp, #12
15200     CC C1 BF FD | 	call	#_convertstring
15204     FD 14 02 F6 | 	mov	arg02, result1
15208     10 13 02 F6 | 	mov	arg01, local02
1520c     00 B9 B0 FD | 	call	#__system___string_cmp
15210     00 FA 55 F2 | 	cmps	result1, #0 wc
15214     00 1E 26 36 |  if_ae	not	local01, #0
15218     A7 1E 62 FC | 	wrlong	local01, fp
1521c     04 00 90 FD | 	jmp	#LR__1693
15220                 | LR__1692
15220     A7 00 68 FC | 	wrlong	#0, fp
15224                 | LR__1693
15224     08 4E 05 F1 | 	add	fp, #8
15228     A7 38 68 FC | 	wrlong	#28, fp
1522c     08 4E 85 F1 | 	sub	fp, #8
15230     A7 12 02 F6 | 	mov	arg01, fp
15234     B8 68 BF FD | 	call	#_push
15238     A7 F0 03 F6 | 	mov	ptra, fp
1523c     B2 00 A0 FD | 	call	#popregs_
15240                 | _do_ge_ret
15240     2D 00 64 FD | 	ret
15244                 | 
15244                 | ' 
15244                 | ' sub do_le
15244                 | _do_le
15244     05 4A 05 F6 | 	mov	COUNT_, #5
15248     A8 00 A0 FD | 	call	#pushregs_
1524c     18 F0 07 F1 | 	add	ptra, #24
15250     04 68 BF FD | 	call	#_pop
15254     FD 1E 02 F6 | 	mov	local01, result1
15258     FE 20 02 F6 | 	mov	local02, result2
1525c     FF 22 02 F6 | 	mov	local03, result3
15260     0C 4E 05 F1 | 	add	fp, #12
15264     A7 1E 62 FC | 	wrlong	local01, fp
15268     04 4E 05 F1 | 	add	fp, #4
1526c     A7 20 62 FC | 	wrlong	local02, fp
15270     04 4E 05 F1 | 	add	fp, #4
15274     A7 22 62 FC | 	wrlong	local03, fp
15278     14 4E 85 F1 | 	sub	fp, #20
1527c     D8 67 BF FD | 	call	#_pop
15280     FF 22 02 F6 | 	mov	local03, result3
15284     A7 FA 61 FC | 	wrlong	result1, fp
15288     04 4E 05 F1 | 	add	fp, #4
1528c     A7 FC 61 FC | 	wrlong	result2, fp
15290     04 4E 05 F1 | 	add	fp, #4
15294     A7 22 62 FC | 	wrlong	local03, fp
15298                 | ' t2=pop()
15298                 | ' t1=pop()
15298                 | ' 
15298                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
15298     08 4E 85 F1 | 	sub	fp, #8
1529c     1F 22 0E F2 | 	cmp	local03, #31 wz
152a0     14 4E 05 A1 |  if_e	add	fp, #20
152a4     A7 24 02 AB |  if_e	rdlong	local04, fp
152a8     14 4E 85 A1 |  if_e	sub	fp, #20
152ac     12 23 02 A6 |  if_e	mov	local03, local04
152b0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
152b4     28 00 90 5D |  if_ne	jmp	#LR__1700
152b8     00 1E 06 F6 | 	mov	local01, #0
152bc     A7 12 02 FB | 	rdlong	arg01, fp
152c0     0C 4E 05 F1 | 	add	fp, #12
152c4     A7 14 02 FB | 	rdlong	arg02, fp
152c8     0C 4E 85 F1 | 	sub	fp, #12
152cc     40 B8 B0 FD | 	call	#__system___string_cmp
152d0     01 FA 55 F2 | 	cmps	result1, #1 wc
152d4     00 1E 26 C6 |  if_b	not	local01, #0
152d8     A7 1E 62 FC | 	wrlong	local01, fp
152dc     1C 04 90 FD | 	jmp	#LR__1713
152e0                 | LR__1700
152e0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
152e0     08 4E 05 F1 | 	add	fp, #8
152e4     A7 1E 02 FB | 	rdlong	local01, fp
152e8     08 4E 85 F1 | 	sub	fp, #8
152ec     1E 1E 0E F2 | 	cmp	local01, #30 wz
152f0     14 4E 05 A1 |  if_e	add	fp, #20
152f4     A7 24 02 AB |  if_e	rdlong	local04, fp
152f8     14 4E 85 A1 |  if_e	sub	fp, #20
152fc     12 23 02 A6 |  if_e	mov	local03, local04
15300     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
15304     2C 00 90 5D |  if_ne	jmp	#LR__1701
15308     00 1E 06 F6 | 	mov	local01, #0
1530c     A7 12 02 FB | 	rdlong	arg01, fp
15310     0C 4E 05 F1 | 	add	fp, #12
15314     A7 14 02 FB | 	rdlong	arg02, fp
15318     0C 4E 85 F1 | 	sub	fp, #12
1531c     01 16 06 F6 | 	mov	arg03, #1
15320     AC E7 B0 FD | 	call	#__system___float_cmp
15324     01 FA 55 F2 | 	cmps	result1, #1 wc
15328     00 1E 26 C6 |  if_b	not	local01, #0
1532c     A7 1E 62 FC | 	wrlong	local01, fp
15330     C8 03 90 FD | 	jmp	#LR__1713
15334                 | LR__1701
15334                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
15334     08 4E 05 F1 | 	add	fp, #8
15338     A7 1E 02 FB | 	rdlong	local01, fp
1533c     08 4E 85 F1 | 	sub	fp, #8
15340     1E 1E 0E F2 | 	cmp	local01, #30 wz
15344     14 4E 05 A1 |  if_e	add	fp, #20
15348     A7 24 02 AB |  if_e	rdlong	local04, fp
1534c     14 4E 85 A1 |  if_e	sub	fp, #20
15350     12 23 02 A6 |  if_e	mov	local03, local04
15354     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
15358     48 00 90 5D |  if_ne	jmp	#LR__1702
1535c     00 1E 06 F6 | 	mov	local01, #0
15360     A7 20 02 FB | 	rdlong	local02, fp
15364     0C 4E 05 F1 | 	add	fp, #12
15368     A7 12 02 FB | 	rdlong	arg01, fp
1536c     0C 4E 85 F1 | 	sub	fp, #12
15370     09 13 52 F6 | 	abs	arg01, arg01 wc
15374     1F 26 C6 C9 |  if_b	decod	local05, #31
15378     00 26 06 36 |  if_ae	mov	local05, #0
1537c     18 DF B0 FD | 	call	#__system___float_fromuns
15380     13 FB 61 F5 | 	xor	result1, local05
15384     FD 14 02 F6 | 	mov	arg02, result1
15388     10 13 02 F6 | 	mov	arg01, local02
1538c     01 16 06 F6 | 	mov	arg03, #1
15390     3C E7 B0 FD | 	call	#__system___float_cmp
15394     01 FA 55 F2 | 	cmps	result1, #1 wc
15398     00 1E 26 C6 |  if_b	not	local01, #0
1539c     A7 1E 62 FC | 	wrlong	local01, fp
153a0     58 03 90 FD | 	jmp	#LR__1713
153a4                 | LR__1702
153a4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
153a4     08 4E 05 F1 | 	add	fp, #8
153a8     A7 1E 02 FB | 	rdlong	local01, fp
153ac     08 4E 85 F1 | 	sub	fp, #8
153b0     1E 1E 0E F2 | 	cmp	local01, #30 wz
153b4     14 4E 05 A1 |  if_e	add	fp, #20
153b8     A7 24 02 AB |  if_e	rdlong	local04, fp
153bc     14 4E 85 A1 |  if_e	sub	fp, #20
153c0     12 23 02 A6 |  if_e	mov	local03, local04
153c4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
153c8     38 00 90 5D |  if_ne	jmp	#LR__1703
153cc     00 1E 06 F6 | 	mov	local01, #0
153d0     A7 20 02 FB | 	rdlong	local02, fp
153d4     0C 4E 05 F1 | 	add	fp, #12
153d8     A7 12 02 FB | 	rdlong	arg01, fp
153dc     0C 4E 85 F1 | 	sub	fp, #12
153e0     B4 DE B0 FD | 	call	#__system___float_fromuns
153e4     FD 14 02 F6 | 	mov	arg02, result1
153e8     10 13 02 F6 | 	mov	arg01, local02
153ec     01 16 06 F6 | 	mov	arg03, #1
153f0     DC E6 B0 FD | 	call	#__system___float_cmp
153f4     01 FA 55 F2 | 	cmps	result1, #1 wc
153f8     00 1E 26 C6 |  if_b	not	local01, #0
153fc     A7 1E 62 FC | 	wrlong	local01, fp
15400     F8 02 90 FD | 	jmp	#LR__1713
15404                 | LR__1703
15404                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
15404     08 4E 05 F1 | 	add	fp, #8
15408     A7 1E 02 FB | 	rdlong	local01, fp
1540c     08 4E 85 F1 | 	sub	fp, #8
15410     1C 1E 0E F2 | 	cmp	local01, #28 wz
15414     14 4E 05 A1 |  if_e	add	fp, #20
15418     A7 24 02 AB |  if_e	rdlong	local04, fp
1541c     14 4E 85 A1 |  if_e	sub	fp, #20
15420     12 23 02 A6 |  if_e	mov	local03, local04
15424     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
15428     44 00 90 5D |  if_ne	jmp	#LR__1704
1542c     00 1E 06 F6 | 	mov	local01, #0
15430     A7 12 02 FB | 	rdlong	arg01, fp
15434     09 13 52 F6 | 	abs	arg01, arg01 wc
15438     1F 26 C6 C9 |  if_b	decod	local05, #31
1543c     00 26 06 36 |  if_ae	mov	local05, #0
15440     54 DE B0 FD | 	call	#__system___float_fromuns
15444     13 FB 61 F5 | 	xor	result1, local05
15448     FD 12 02 F6 | 	mov	arg01, result1
1544c     0C 4E 05 F1 | 	add	fp, #12
15450     A7 14 02 FB | 	rdlong	arg02, fp
15454     0C 4E 85 F1 | 	sub	fp, #12
15458     01 16 06 F6 | 	mov	arg03, #1
1545c     70 E6 B0 FD | 	call	#__system___float_cmp
15460     01 FA 55 F2 | 	cmps	result1, #1 wc
15464     00 1E 26 C6 |  if_b	not	local01, #0
15468     A7 1E 62 FC | 	wrlong	local01, fp
1546c     8C 02 90 FD | 	jmp	#LR__1713
15470                 | LR__1704
15470                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
15470     08 4E 05 F1 | 	add	fp, #8
15474     A7 1E 02 FB | 	rdlong	local01, fp
15478     08 4E 85 F1 | 	sub	fp, #8
1547c     1C 1E 0E F2 | 	cmp	local01, #28 wz
15480     14 4E 05 A1 |  if_e	add	fp, #20
15484     A7 24 02 AB |  if_e	rdlong	local04, fp
15488     14 4E 85 A1 |  if_e	sub	fp, #20
1548c     12 23 02 A6 |  if_e	mov	local03, local04
15490     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
15494     24 00 90 5D |  if_ne	jmp	#LR__1705
15498     00 1E 06 F6 | 	mov	local01, #0
1549c     A7 20 02 FB | 	rdlong	local02, fp
154a0     0C 4E 05 F1 | 	add	fp, #12
154a4     A7 22 02 FB | 	rdlong	local03, fp
154a8     0C 4E 85 F1 | 	sub	fp, #12
154ac     11 21 5A F2 | 	cmps	local02, local03 wcz
154b0     01 1E 66 E6 |  if_be	neg	local01, #1
154b4     A7 1E 62 FC | 	wrlong	local01, fp
154b8     40 02 90 FD | 	jmp	#LR__1713
154bc                 | LR__1705
154bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
154bc     08 4E 05 F1 | 	add	fp, #8
154c0     A7 1E 02 FB | 	rdlong	local01, fp
154c4     08 4E 85 F1 | 	sub	fp, #8
154c8     1C 1E 0E F2 | 	cmp	local01, #28 wz
154cc     14 4E 05 A1 |  if_e	add	fp, #20
154d0     A7 24 02 AB |  if_e	rdlong	local04, fp
154d4     14 4E 85 A1 |  if_e	sub	fp, #20
154d8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
154dc     24 00 90 5D |  if_ne	jmp	#LR__1706
154e0     00 1E 06 F6 | 	mov	local01, #0
154e4     A7 20 02 FB | 	rdlong	local02, fp
154e8     0C 4E 05 F1 | 	add	fp, #12
154ec     A7 22 02 FB | 	rdlong	local03, fp
154f0     0C 4E 85 F1 | 	sub	fp, #12
154f4     11 21 5A F2 | 	cmps	local02, local03 wcz
154f8     01 1E 66 E6 |  if_be	neg	local01, #1
154fc     A7 1E 62 FC | 	wrlong	local01, fp
15500     F8 01 90 FD | 	jmp	#LR__1713
15504                 | LR__1706
15504                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
15504     08 4E 05 F1 | 	add	fp, #8
15508     A7 1E 02 FB | 	rdlong	local01, fp
1550c     08 4E 85 F1 | 	sub	fp, #8
15510     1D 1E 0E F2 | 	cmp	local01, #29 wz
15514     14 4E 05 A1 |  if_e	add	fp, #20
15518     A7 22 02 AB |  if_e	rdlong	local03, fp
1551c     14 4E 85 A1 |  if_e	sub	fp, #20
15520     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
15524     34 00 90 5D |  if_ne	jmp	#LR__1707
15528     00 1E 06 F6 | 	mov	local01, #0
1552c     A7 12 02 FB | 	rdlong	arg01, fp
15530     64 DD B0 FD | 	call	#__system___float_fromuns
15534     FD 12 02 F6 | 	mov	arg01, result1
15538     0C 4E 05 F1 | 	add	fp, #12
1553c     A7 14 02 FB | 	rdlong	arg02, fp
15540     0C 4E 85 F1 | 	sub	fp, #12
15544     01 16 06 F6 | 	mov	arg03, #1
15548     84 E5 B0 FD | 	call	#__system___float_cmp
1554c     01 FA 55 F2 | 	cmps	result1, #1 wc
15550     00 1E 26 C6 |  if_b	not	local01, #0
15554     A7 1E 62 FC | 	wrlong	local01, fp
15558     A0 01 90 FD | 	jmp	#LR__1713
1555c                 | LR__1707
1555c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1555c     08 4E 05 F1 | 	add	fp, #8
15560     A7 1E 02 FB | 	rdlong	local01, fp
15564     08 4E 85 F1 | 	sub	fp, #8
15568     1D 1E 0E F2 | 	cmp	local01, #29 wz
1556c     14 4E 05 A1 |  if_e	add	fp, #20
15570     A7 22 02 AB |  if_e	rdlong	local03, fp
15574     14 4E 85 A1 |  if_e	sub	fp, #20
15578     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1557c     24 00 90 5D |  if_ne	jmp	#LR__1708
15580     00 1E 06 F6 | 	mov	local01, #0
15584     A7 20 02 FB | 	rdlong	local02, fp
15588     0C 4E 05 F1 | 	add	fp, #12
1558c     A7 22 02 FB | 	rdlong	local03, fp
15590     0C 4E 85 F1 | 	sub	fp, #12
15594     11 21 5A F2 | 	cmps	local02, local03 wcz
15598     01 1E 66 E6 |  if_be	neg	local01, #1
1559c     A7 1E 62 FC | 	wrlong	local01, fp
155a0     58 01 90 FD | 	jmp	#LR__1713
155a4                 | LR__1708
155a4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
155a4     08 4E 05 F1 | 	add	fp, #8
155a8     A7 1E 02 FB | 	rdlong	local01, fp
155ac     08 4E 85 F1 | 	sub	fp, #8
155b0     1D 1E 0E F2 | 	cmp	local01, #29 wz
155b4     14 4E 05 A1 |  if_e	add	fp, #20
155b8     A7 22 02 AB |  if_e	rdlong	local03, fp
155bc     14 4E 85 A1 |  if_e	sub	fp, #20
155c0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
155c4     24 00 90 5D |  if_ne	jmp	#LR__1709
155c8     00 1E 06 F6 | 	mov	local01, #0
155cc     A7 20 02 FB | 	rdlong	local02, fp
155d0     0C 4E 05 F1 | 	add	fp, #12
155d4     A7 22 02 FB | 	rdlong	local03, fp
155d8     0C 4E 85 F1 | 	sub	fp, #12
155dc     11 21 1A F2 | 	cmp	local02, local03 wcz
155e0     01 1E 66 E6 |  if_be	neg	local01, #1
155e4     A7 1E 62 FC | 	wrlong	local01, fp
155e8     10 01 90 FD | 	jmp	#LR__1713
155ec                 | LR__1709
155ec                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
155ec     08 4E 05 F1 | 	add	fp, #8
155f0     A7 1E 02 FB | 	rdlong	local01, fp
155f4     08 4E 85 F1 | 	sub	fp, #8
155f8     2B 1E 0E F2 | 	cmp	local01, #43 wz
155fc     14 4E 05 A1 |  if_e	add	fp, #20
15600     A7 22 02 AB |  if_e	rdlong	local03, fp
15604     14 4E 85 A1 |  if_e	sub	fp, #20
15608     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1560c     30 00 90 5D |  if_ne	jmp	#LR__1710
15610     00 1E 06 F6 | 	mov	local01, #0
15614     A7 12 02 FB | 	rdlong	arg01, fp
15618     B4 BD BF FD | 	call	#_convertstring
1561c     FD 12 02 F6 | 	mov	arg01, result1
15620     0C 4E 05 F1 | 	add	fp, #12
15624     A7 14 02 FB | 	rdlong	arg02, fp
15628     0C 4E 85 F1 | 	sub	fp, #12
1562c     E0 B4 B0 FD | 	call	#__system___string_cmp
15630     01 FA 55 F2 | 	cmps	result1, #1 wc
15634     00 1E 26 C6 |  if_b	not	local01, #0
15638     A7 1E 62 FC | 	wrlong	local01, fp
1563c     BC 00 90 FD | 	jmp	#LR__1713
15640                 | LR__1710
15640                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
15640     08 4E 05 F1 | 	add	fp, #8
15644     A7 1E 02 FB | 	rdlong	local01, fp
15648     08 4E 85 F1 | 	sub	fp, #8
1564c     1F 1E 0E F2 | 	cmp	local01, #31 wz
15650     14 4E 05 A1 |  if_e	add	fp, #20
15654     A7 22 02 AB |  if_e	rdlong	local03, fp
15658     14 4E 85 A1 |  if_e	sub	fp, #20
1565c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
15660     34 00 90 5D |  if_ne	jmp	#LR__1711
15664     00 1E 06 F6 | 	mov	local01, #0
15668     A7 20 02 FB | 	rdlong	local02, fp
1566c     0C 4E 05 F1 | 	add	fp, #12
15670     A7 12 02 FB | 	rdlong	arg01, fp
15674     0C 4E 85 F1 | 	sub	fp, #12
15678     54 BD BF FD | 	call	#_convertstring
1567c     FD 14 02 F6 | 	mov	arg02, result1
15680     10 13 02 F6 | 	mov	arg01, local02
15684     88 B4 B0 FD | 	call	#__system___string_cmp
15688     01 FA 55 F2 | 	cmps	result1, #1 wc
1568c     00 1E 26 C6 |  if_b	not	local01, #0
15690     A7 1E 62 FC | 	wrlong	local01, fp
15694     64 00 90 FD | 	jmp	#LR__1713
15698                 | LR__1711
15698                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
15698     08 4E 05 F1 | 	add	fp, #8
1569c     A7 1E 02 FB | 	rdlong	local01, fp
156a0     08 4E 85 F1 | 	sub	fp, #8
156a4     2B 1E 0E F2 | 	cmp	local01, #43 wz
156a8     14 4E 05 A1 |  if_e	add	fp, #20
156ac     A7 22 02 AB |  if_e	rdlong	local03, fp
156b0     14 4E 85 A1 |  if_e	sub	fp, #20
156b4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
156b8     3C 00 90 5D |  if_ne	jmp	#LR__1712
156bc     00 1E 06 F6 | 	mov	local01, #0
156c0     A7 12 02 FB | 	rdlong	arg01, fp
156c4     08 BD BF FD | 	call	#_convertstring
156c8     FD 20 02 F6 | 	mov	local02, result1
156cc     0C 4E 05 F1 | 	add	fp, #12
156d0     A7 12 02 FB | 	rdlong	arg01, fp
156d4     0C 4E 85 F1 | 	sub	fp, #12
156d8     F4 BC BF FD | 	call	#_convertstring
156dc     FD 14 02 F6 | 	mov	arg02, result1
156e0     10 13 02 F6 | 	mov	arg01, local02
156e4     28 B4 B0 FD | 	call	#__system___string_cmp
156e8     01 FA 55 F2 | 	cmps	result1, #1 wc
156ec     00 1E 26 C6 |  if_b	not	local01, #0
156f0     A7 1E 62 FC | 	wrlong	local01, fp
156f4     04 00 90 FD | 	jmp	#LR__1713
156f8                 | LR__1712
156f8     A7 00 68 FC | 	wrlong	#0, fp
156fc                 | LR__1713
156fc     08 4E 05 F1 | 	add	fp, #8
15700     A7 38 68 FC | 	wrlong	#28, fp
15704     08 4E 85 F1 | 	sub	fp, #8
15708     A7 12 02 F6 | 	mov	arg01, fp
1570c     E0 63 BF FD | 	call	#_push
15710     A7 F0 03 F6 | 	mov	ptra, fp
15714     B2 00 A0 FD | 	call	#popregs_
15718                 | _do_le_ret
15718     2D 00 64 FD | 	ret
1571c                 | 
1571c                 | ' 
1571c                 | ' 
1571c                 | ' sub do_ne
1571c                 | _do_ne
1571c     05 4A 05 F6 | 	mov	COUNT_, #5
15720     A8 00 A0 FD | 	call	#pushregs_
15724     18 F0 07 F1 | 	add	ptra, #24
15728     2C 63 BF FD | 	call	#_pop
1572c     FD 1E 02 F6 | 	mov	local01, result1
15730     FE 20 02 F6 | 	mov	local02, result2
15734     FF 22 02 F6 | 	mov	local03, result3
15738     0C 4E 05 F1 | 	add	fp, #12
1573c     A7 1E 62 FC | 	wrlong	local01, fp
15740     04 4E 05 F1 | 	add	fp, #4
15744     A7 20 62 FC | 	wrlong	local02, fp
15748     04 4E 05 F1 | 	add	fp, #4
1574c     A7 22 62 FC | 	wrlong	local03, fp
15750     14 4E 85 F1 | 	sub	fp, #20
15754     00 63 BF FD | 	call	#_pop
15758     FF 22 02 F6 | 	mov	local03, result3
1575c     A7 FA 61 FC | 	wrlong	result1, fp
15760     04 4E 05 F1 | 	add	fp, #4
15764     A7 FC 61 FC | 	wrlong	result2, fp
15768     04 4E 05 F1 | 	add	fp, #4
1576c     A7 22 62 FC | 	wrlong	local03, fp
15770                 | ' t2=pop()
15770                 | ' t1=pop()
15770                 | ' 
15770                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
15770     08 4E 85 F1 | 	sub	fp, #8
15774     1F 22 0E F2 | 	cmp	local03, #31 wz
15778     14 4E 05 A1 |  if_e	add	fp, #20
1577c     A7 24 02 AB |  if_e	rdlong	local04, fp
15780     14 4E 85 A1 |  if_e	sub	fp, #20
15784     12 23 02 A6 |  if_e	mov	local03, local04
15788     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1578c     28 00 90 5D |  if_ne	jmp	#LR__1720
15790     00 1E 06 F6 | 	mov	local01, #0
15794     A7 12 02 FB | 	rdlong	arg01, fp
15798     0C 4E 05 F1 | 	add	fp, #12
1579c     A7 14 02 FB | 	rdlong	arg02, fp
157a0     0C 4E 85 F1 | 	sub	fp, #12
157a4     68 B3 B0 FD | 	call	#__system___string_cmp
157a8     00 FA 0D F2 | 	cmp	result1, #0 wz
157ac     00 1E 26 56 |  if_ne	not	local01, #0
157b0     A7 1E 62 FC | 	wrlong	local01, fp
157b4     1C 04 90 FD | 	jmp	#LR__1733
157b8                 | LR__1720
157b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
157b8     08 4E 05 F1 | 	add	fp, #8
157bc     A7 1E 02 FB | 	rdlong	local01, fp
157c0     08 4E 85 F1 | 	sub	fp, #8
157c4     1E 1E 0E F2 | 	cmp	local01, #30 wz
157c8     14 4E 05 A1 |  if_e	add	fp, #20
157cc     A7 24 02 AB |  if_e	rdlong	local04, fp
157d0     14 4E 85 A1 |  if_e	sub	fp, #20
157d4     12 23 02 A6 |  if_e	mov	local03, local04
157d8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
157dc     2C 00 90 5D |  if_ne	jmp	#LR__1721
157e0     00 1E 06 F6 | 	mov	local01, #0
157e4     A7 12 02 FB | 	rdlong	arg01, fp
157e8     0C 4E 05 F1 | 	add	fp, #12
157ec     A7 14 02 FB | 	rdlong	arg02, fp
157f0     0C 4E 85 F1 | 	sub	fp, #12
157f4     01 16 06 F6 | 	mov	arg03, #1
157f8     D4 E2 B0 FD | 	call	#__system___float_cmp
157fc     00 FA 0D F2 | 	cmp	result1, #0 wz
15800     00 1E 26 56 |  if_ne	not	local01, #0
15804     A7 1E 62 FC | 	wrlong	local01, fp
15808     C8 03 90 FD | 	jmp	#LR__1733
1580c                 | LR__1721
1580c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1580c     08 4E 05 F1 | 	add	fp, #8
15810     A7 1E 02 FB | 	rdlong	local01, fp
15814     08 4E 85 F1 | 	sub	fp, #8
15818     1E 1E 0E F2 | 	cmp	local01, #30 wz
1581c     14 4E 05 A1 |  if_e	add	fp, #20
15820     A7 24 02 AB |  if_e	rdlong	local04, fp
15824     14 4E 85 A1 |  if_e	sub	fp, #20
15828     12 23 02 A6 |  if_e	mov	local03, local04
1582c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
15830     48 00 90 5D |  if_ne	jmp	#LR__1722
15834     00 1E 06 F6 | 	mov	local01, #0
15838     A7 20 02 FB | 	rdlong	local02, fp
1583c     0C 4E 05 F1 | 	add	fp, #12
15840     A7 12 02 FB | 	rdlong	arg01, fp
15844     0C 4E 85 F1 | 	sub	fp, #12
15848     09 13 52 F6 | 	abs	arg01, arg01 wc
1584c     1F 26 C6 C9 |  if_b	decod	local05, #31
15850     00 26 06 36 |  if_ae	mov	local05, #0
15854     40 DA B0 FD | 	call	#__system___float_fromuns
15858     13 FB 61 F5 | 	xor	result1, local05
1585c     FD 14 02 F6 | 	mov	arg02, result1
15860     10 13 02 F6 | 	mov	arg01, local02
15864     01 16 06 F6 | 	mov	arg03, #1
15868     64 E2 B0 FD | 	call	#__system___float_cmp
1586c     00 FA 0D F2 | 	cmp	result1, #0 wz
15870     00 1E 26 56 |  if_ne	not	local01, #0
15874     A7 1E 62 FC | 	wrlong	local01, fp
15878     58 03 90 FD | 	jmp	#LR__1733
1587c                 | LR__1722
1587c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1587c     08 4E 05 F1 | 	add	fp, #8
15880     A7 1E 02 FB | 	rdlong	local01, fp
15884     08 4E 85 F1 | 	sub	fp, #8
15888     1E 1E 0E F2 | 	cmp	local01, #30 wz
1588c     14 4E 05 A1 |  if_e	add	fp, #20
15890     A7 24 02 AB |  if_e	rdlong	local04, fp
15894     14 4E 85 A1 |  if_e	sub	fp, #20
15898     12 23 02 A6 |  if_e	mov	local03, local04
1589c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
158a0     38 00 90 5D |  if_ne	jmp	#LR__1723
158a4     00 1E 06 F6 | 	mov	local01, #0
158a8     A7 20 02 FB | 	rdlong	local02, fp
158ac     0C 4E 05 F1 | 	add	fp, #12
158b0     A7 12 02 FB | 	rdlong	arg01, fp
158b4     0C 4E 85 F1 | 	sub	fp, #12
158b8     DC D9 B0 FD | 	call	#__system___float_fromuns
158bc     FD 14 02 F6 | 	mov	arg02, result1
158c0     10 13 02 F6 | 	mov	arg01, local02
158c4     01 16 06 F6 | 	mov	arg03, #1
158c8     04 E2 B0 FD | 	call	#__system___float_cmp
158cc     00 FA 0D F2 | 	cmp	result1, #0 wz
158d0     00 1E 26 56 |  if_ne	not	local01, #0
158d4     A7 1E 62 FC | 	wrlong	local01, fp
158d8     F8 02 90 FD | 	jmp	#LR__1733
158dc                 | LR__1723
158dc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
158dc     08 4E 05 F1 | 	add	fp, #8
158e0     A7 1E 02 FB | 	rdlong	local01, fp
158e4     08 4E 85 F1 | 	sub	fp, #8
158e8     1C 1E 0E F2 | 	cmp	local01, #28 wz
158ec     14 4E 05 A1 |  if_e	add	fp, #20
158f0     A7 24 02 AB |  if_e	rdlong	local04, fp
158f4     14 4E 85 A1 |  if_e	sub	fp, #20
158f8     12 23 02 A6 |  if_e	mov	local03, local04
158fc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
15900     44 00 90 5D |  if_ne	jmp	#LR__1724
15904     00 1E 06 F6 | 	mov	local01, #0
15908     A7 12 02 FB | 	rdlong	arg01, fp
1590c     09 13 52 F6 | 	abs	arg01, arg01 wc
15910     1F 26 C6 C9 |  if_b	decod	local05, #31
15914     00 26 06 36 |  if_ae	mov	local05, #0
15918     7C D9 B0 FD | 	call	#__system___float_fromuns
1591c     13 FB 61 F5 | 	xor	result1, local05
15920     FD 12 02 F6 | 	mov	arg01, result1
15924     0C 4E 05 F1 | 	add	fp, #12
15928     A7 14 02 FB | 	rdlong	arg02, fp
1592c     0C 4E 85 F1 | 	sub	fp, #12
15930     01 16 06 F6 | 	mov	arg03, #1
15934     98 E1 B0 FD | 	call	#__system___float_cmp
15938     00 FA 0D F2 | 	cmp	result1, #0 wz
1593c     00 1E 26 56 |  if_ne	not	local01, #0
15940     A7 1E 62 FC | 	wrlong	local01, fp
15944     8C 02 90 FD | 	jmp	#LR__1733
15948                 | LR__1724
15948                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
15948     08 4E 05 F1 | 	add	fp, #8
1594c     A7 1E 02 FB | 	rdlong	local01, fp
15950     08 4E 85 F1 | 	sub	fp, #8
15954     1C 1E 0E F2 | 	cmp	local01, #28 wz
15958     14 4E 05 A1 |  if_e	add	fp, #20
1595c     A7 24 02 AB |  if_e	rdlong	local04, fp
15960     14 4E 85 A1 |  if_e	sub	fp, #20
15964     12 23 02 A6 |  if_e	mov	local03, local04
15968     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1596c     24 00 90 5D |  if_ne	jmp	#LR__1725
15970     00 1E 06 F6 | 	mov	local01, #0
15974     A7 20 02 FB | 	rdlong	local02, fp
15978     0C 4E 05 F1 | 	add	fp, #12
1597c     A7 22 02 FB | 	rdlong	local03, fp
15980     0C 4E 85 F1 | 	sub	fp, #12
15984     11 21 0A F2 | 	cmp	local02, local03 wz
15988     01 1E 66 56 |  if_ne	neg	local01, #1
1598c     A7 1E 62 FC | 	wrlong	local01, fp
15990     40 02 90 FD | 	jmp	#LR__1733
15994                 | LR__1725
15994                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
15994     08 4E 05 F1 | 	add	fp, #8
15998     A7 1E 02 FB | 	rdlong	local01, fp
1599c     08 4E 85 F1 | 	sub	fp, #8
159a0     1C 1E 0E F2 | 	cmp	local01, #28 wz
159a4     14 4E 05 A1 |  if_e	add	fp, #20
159a8     A7 24 02 AB |  if_e	rdlong	local04, fp
159ac     14 4E 85 A1 |  if_e	sub	fp, #20
159b0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
159b4     24 00 90 5D |  if_ne	jmp	#LR__1726
159b8     00 1E 06 F6 | 	mov	local01, #0
159bc     A7 20 02 FB | 	rdlong	local02, fp
159c0     0C 4E 05 F1 | 	add	fp, #12
159c4     A7 22 02 FB | 	rdlong	local03, fp
159c8     0C 4E 85 F1 | 	sub	fp, #12
159cc     11 21 0A F2 | 	cmp	local02, local03 wz
159d0     01 1E 66 56 |  if_ne	neg	local01, #1
159d4     A7 1E 62 FC | 	wrlong	local01, fp
159d8     F8 01 90 FD | 	jmp	#LR__1733
159dc                 | LR__1726
159dc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
159dc     08 4E 05 F1 | 	add	fp, #8
159e0     A7 1E 02 FB | 	rdlong	local01, fp
159e4     08 4E 85 F1 | 	sub	fp, #8
159e8     1D 1E 0E F2 | 	cmp	local01, #29 wz
159ec     14 4E 05 A1 |  if_e	add	fp, #20
159f0     A7 22 02 AB |  if_e	rdlong	local03, fp
159f4     14 4E 85 A1 |  if_e	sub	fp, #20
159f8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
159fc     34 00 90 5D |  if_ne	jmp	#LR__1727
15a00     00 1E 06 F6 | 	mov	local01, #0
15a04     A7 12 02 FB | 	rdlong	arg01, fp
15a08     8C D8 B0 FD | 	call	#__system___float_fromuns
15a0c     FD 12 02 F6 | 	mov	arg01, result1
15a10     0C 4E 05 F1 | 	add	fp, #12
15a14     A7 14 02 FB | 	rdlong	arg02, fp
15a18     0C 4E 85 F1 | 	sub	fp, #12
15a1c     01 16 06 F6 | 	mov	arg03, #1
15a20     AC E0 B0 FD | 	call	#__system___float_cmp
15a24     00 FA 0D F2 | 	cmp	result1, #0 wz
15a28     00 1E 26 56 |  if_ne	not	local01, #0
15a2c     A7 1E 62 FC | 	wrlong	local01, fp
15a30     A0 01 90 FD | 	jmp	#LR__1733
15a34                 | LR__1727
15a34                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
15a34     08 4E 05 F1 | 	add	fp, #8
15a38     A7 1E 02 FB | 	rdlong	local01, fp
15a3c     08 4E 85 F1 | 	sub	fp, #8
15a40     1D 1E 0E F2 | 	cmp	local01, #29 wz
15a44     14 4E 05 A1 |  if_e	add	fp, #20
15a48     A7 22 02 AB |  if_e	rdlong	local03, fp
15a4c     14 4E 85 A1 |  if_e	sub	fp, #20
15a50     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
15a54     24 00 90 5D |  if_ne	jmp	#LR__1728
15a58     00 1E 06 F6 | 	mov	local01, #0
15a5c     A7 20 02 FB | 	rdlong	local02, fp
15a60     0C 4E 05 F1 | 	add	fp, #12
15a64     A7 22 02 FB | 	rdlong	local03, fp
15a68     0C 4E 85 F1 | 	sub	fp, #12
15a6c     11 21 0A F2 | 	cmp	local02, local03 wz
15a70     01 1E 66 56 |  if_ne	neg	local01, #1
15a74     A7 1E 62 FC | 	wrlong	local01, fp
15a78     58 01 90 FD | 	jmp	#LR__1733
15a7c                 | LR__1728
15a7c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
15a7c     08 4E 05 F1 | 	add	fp, #8
15a80     A7 1E 02 FB | 	rdlong	local01, fp
15a84     08 4E 85 F1 | 	sub	fp, #8
15a88     1D 1E 0E F2 | 	cmp	local01, #29 wz
15a8c     14 4E 05 A1 |  if_e	add	fp, #20
15a90     A7 22 02 AB |  if_e	rdlong	local03, fp
15a94     14 4E 85 A1 |  if_e	sub	fp, #20
15a98     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
15a9c     24 00 90 5D |  if_ne	jmp	#LR__1729
15aa0     00 1E 06 F6 | 	mov	local01, #0
15aa4     A7 20 02 FB | 	rdlong	local02, fp
15aa8     0C 4E 05 F1 | 	add	fp, #12
15aac     A7 22 02 FB | 	rdlong	local03, fp
15ab0     0C 4E 85 F1 | 	sub	fp, #12
15ab4     11 21 0A F2 | 	cmp	local02, local03 wz
15ab8     01 1E 66 56 |  if_ne	neg	local01, #1
15abc     A7 1E 62 FC | 	wrlong	local01, fp
15ac0     10 01 90 FD | 	jmp	#LR__1733
15ac4                 | LR__1729
15ac4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
15ac4     08 4E 05 F1 | 	add	fp, #8
15ac8     A7 1E 02 FB | 	rdlong	local01, fp
15acc     08 4E 85 F1 | 	sub	fp, #8
15ad0     2B 1E 0E F2 | 	cmp	local01, #43 wz
15ad4     14 4E 05 A1 |  if_e	add	fp, #20
15ad8     A7 22 02 AB |  if_e	rdlong	local03, fp
15adc     14 4E 85 A1 |  if_e	sub	fp, #20
15ae0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
15ae4     30 00 90 5D |  if_ne	jmp	#LR__1730
15ae8     00 1E 06 F6 | 	mov	local01, #0
15aec     A7 12 02 FB | 	rdlong	arg01, fp
15af0     DC B8 BF FD | 	call	#_convertstring
15af4     FD 12 02 F6 | 	mov	arg01, result1
15af8     0C 4E 05 F1 | 	add	fp, #12
15afc     A7 14 02 FB | 	rdlong	arg02, fp
15b00     0C 4E 85 F1 | 	sub	fp, #12
15b04     08 B0 B0 FD | 	call	#__system___string_cmp
15b08     00 FA 0D F2 | 	cmp	result1, #0 wz
15b0c     00 1E 26 56 |  if_ne	not	local01, #0
15b10     A7 1E 62 FC | 	wrlong	local01, fp
15b14     BC 00 90 FD | 	jmp	#LR__1733
15b18                 | LR__1730
15b18                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
15b18     08 4E 05 F1 | 	add	fp, #8
15b1c     A7 1E 02 FB | 	rdlong	local01, fp
15b20     08 4E 85 F1 | 	sub	fp, #8
15b24     1F 1E 0E F2 | 	cmp	local01, #31 wz
15b28     14 4E 05 A1 |  if_e	add	fp, #20
15b2c     A7 22 02 AB |  if_e	rdlong	local03, fp
15b30     14 4E 85 A1 |  if_e	sub	fp, #20
15b34     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
15b38     34 00 90 5D |  if_ne	jmp	#LR__1731
15b3c     00 1E 06 F6 | 	mov	local01, #0
15b40     A7 20 02 FB | 	rdlong	local02, fp
15b44     0C 4E 05 F1 | 	add	fp, #12
15b48     A7 12 02 FB | 	rdlong	arg01, fp
15b4c     0C 4E 85 F1 | 	sub	fp, #12
15b50     7C B8 BF FD | 	call	#_convertstring
15b54     FD 14 02 F6 | 	mov	arg02, result1
15b58     10 13 02 F6 | 	mov	arg01, local02
15b5c     B0 AF B0 FD | 	call	#__system___string_cmp
15b60     00 FA 0D F2 | 	cmp	result1, #0 wz
15b64     00 1E 26 56 |  if_ne	not	local01, #0
15b68     A7 1E 62 FC | 	wrlong	local01, fp
15b6c     64 00 90 FD | 	jmp	#LR__1733
15b70                 | LR__1731
15b70                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
15b70     08 4E 05 F1 | 	add	fp, #8
15b74     A7 1E 02 FB | 	rdlong	local01, fp
15b78     08 4E 85 F1 | 	sub	fp, #8
15b7c     2B 1E 0E F2 | 	cmp	local01, #43 wz
15b80     14 4E 05 A1 |  if_e	add	fp, #20
15b84     A7 22 02 AB |  if_e	rdlong	local03, fp
15b88     14 4E 85 A1 |  if_e	sub	fp, #20
15b8c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
15b90     3C 00 90 5D |  if_ne	jmp	#LR__1732
15b94     00 1E 06 F6 | 	mov	local01, #0
15b98     A7 12 02 FB | 	rdlong	arg01, fp
15b9c     30 B8 BF FD | 	call	#_convertstring
15ba0     FD 20 02 F6 | 	mov	local02, result1
15ba4     0C 4E 05 F1 | 	add	fp, #12
15ba8     A7 12 02 FB | 	rdlong	arg01, fp
15bac     0C 4E 85 F1 | 	sub	fp, #12
15bb0     1C B8 BF FD | 	call	#_convertstring
15bb4     FD 14 02 F6 | 	mov	arg02, result1
15bb8     10 13 02 F6 | 	mov	arg01, local02
15bbc     50 AF B0 FD | 	call	#__system___string_cmp
15bc0     00 FA 0D F2 | 	cmp	result1, #0 wz
15bc4     00 1E 26 56 |  if_ne	not	local01, #0
15bc8     A7 1E 62 FC | 	wrlong	local01, fp
15bcc     04 00 90 FD | 	jmp	#LR__1733
15bd0                 | LR__1732
15bd0     A7 00 68 FC | 	wrlong	#0, fp
15bd4                 | LR__1733
15bd4     08 4E 05 F1 | 	add	fp, #8
15bd8     A7 38 68 FC | 	wrlong	#28, fp
15bdc     08 4E 85 F1 | 	sub	fp, #8
15be0     A7 12 02 F6 | 	mov	arg01, fp
15be4     08 5F BF FD | 	call	#_push
15be8     A7 F0 03 F6 | 	mov	ptra, fp
15bec     B2 00 A0 FD | 	call	#popregs_
15bf0                 | _do_ne_ret
15bf0     2D 00 64 FD | 	ret
15bf4                 | 
15bf4                 | ' 
15bf4                 | ' 
15bf4                 | ' 
15bf4                 | ' function converttoint (t1 as expr_result) as integer 
15bf4                 | _converttoint
15bf4     02 4A 05 F6 | 	mov	COUNT_, #2
15bf8     A8 00 A0 FD | 	call	#pushregs_
15bfc     09 1F 02 F6 | 	mov	local01, arg01
15c00                 | ' 
15c00                 | ' select case t1.result_type
15c00     08 1E 06 F1 | 	add	local01, #8
15c04     0F 21 02 FB | 	rdlong	local02, local01
15c08     08 1E 86 F1 | 	sub	local01, #8
15c0c     1C 20 0E F2 | 	cmp	local02, #28 wz
15c10     2C 00 90 AD |  if_e	jmp	#LR__1740
15c14     1D 20 0E F2 | 	cmp	local02, #29 wz
15c18     2C 00 90 AD |  if_e	jmp	#LR__1741
15c1c     1E 20 0E F2 | 	cmp	local02, #30 wz
15c20     2C 00 90 AD |  if_e	jmp	#LR__1742
15c24     1F 20 0E F2 | 	cmp	local02, #31 wz
15c28     34 00 90 AD |  if_e	jmp	#LR__1743
15c2c     2B 20 0E F2 | 	cmp	local02, #43 wz
15c30     44 00 90 AD |  if_e	jmp	#LR__1744
15c34     2C 20 0E F2 | 	cmp	local02, #44 wz
15c38     5C 00 90 AD |  if_e	jmp	#LR__1745
15c3c     60 00 90 FD | 	jmp	#LR__1746
15c40                 | LR__1740
15c40     0F FB 01 FB | 	rdlong	result1, local01
15c44     5C 00 90 FD | 	jmp	#LR__1747
15c48                 | LR__1741
15c48     0F FB 01 FB | 	rdlong	result1, local01
15c4c     54 00 90 FD | 	jmp	#LR__1747
15c50                 | LR__1742
15c50     0F 13 02 FB | 	rdlong	arg01, local01
15c54     01 14 06 F6 | 	mov	arg02, #1
15c58     08 DF B0 FD | 	call	#__system___float_tointeger
15c5c     44 00 90 FD | 	jmp	#LR__1747
15c60                 | LR__1743
15c60     0F 13 02 FB | 	rdlong	arg01, local01
15c64     1C E2 B0 FD | 	call	#__system____builtin_atof
15c68     FD 12 02 F6 | 	mov	arg01, result1
15c6c     01 14 06 F6 | 	mov	arg02, #1
15c70     F0 DE B0 FD | 	call	#__system___float_tointeger
15c74     2C 00 90 FD | 	jmp	#LR__1747
15c78                 | LR__1744
15c78     0F 13 02 FB | 	rdlong	arg01, local01
15c7c     50 B7 BF FD | 	call	#_convertstring
15c80     FD 12 02 F6 | 	mov	arg01, result1
15c84     FC E1 B0 FD | 	call	#__system____builtin_atof
15c88     FD 12 02 F6 | 	mov	arg01, result1
15c8c     01 14 06 F6 | 	mov	arg02, #1
15c90     D0 DE B0 FD | 	call	#__system___float_tointeger
15c94     0C 00 90 FD | 	jmp	#LR__1747
15c98                 | LR__1745
15c98     0F FB 01 FB | 	rdlong	result1, local01
15c9c     04 00 90 FD | 	jmp	#LR__1747
15ca0                 | LR__1746
15ca0     00 FA 05 F6 | 	mov	result1, #0
15ca4                 | LR__1747
15ca4     A7 F0 03 F6 | 	mov	ptra, fp
15ca8     B2 00 A0 FD | 	call	#popregs_
15cac                 | _converttoint_ret
15cac     2D 00 64 FD | 	ret
15cb0                 | 
15cb0                 | ' 
15cb0                 | ' function converttofloat (t1 as expr_result) as single
15cb0                 | _converttofloat
15cb0     03 4A 05 F6 | 	mov	COUNT_, #3
15cb4     A8 00 A0 FD | 	call	#pushregs_
15cb8     09 1F 02 F6 | 	mov	local01, arg01
15cbc                 | ' 
15cbc                 | ' select case t1.result_type
15cbc     08 1E 06 F1 | 	add	local01, #8
15cc0     0F 21 02 FB | 	rdlong	local02, local01
15cc4     08 1E 86 F1 | 	sub	local01, #8
15cc8     1C 20 0E F2 | 	cmp	local02, #28 wz
15ccc     24 00 90 AD |  if_e	jmp	#LR__1750
15cd0     1D 20 0E F2 | 	cmp	local02, #29 wz
15cd4     38 00 90 AD |  if_e	jmp	#LR__1751
15cd8     1E 20 0E F2 | 	cmp	local02, #30 wz
15cdc     3C 00 90 AD |  if_e	jmp	#LR__1752
15ce0     1F 20 0E F2 | 	cmp	local02, #31 wz
15ce4     3C 00 90 AD |  if_e	jmp	#LR__1753
15ce8     2B 20 0E F2 | 	cmp	local02, #43 wz
15cec     40 00 90 AD |  if_e	jmp	#LR__1754
15cf0     50 00 90 FD | 	jmp	#LR__1755
15cf4                 | LR__1750
15cf4     0F 13 02 FB | 	rdlong	arg01, local01
15cf8     09 13 52 F6 | 	abs	arg01, arg01 wc
15cfc     1F 22 C6 C9 |  if_b	decod	local03, #31
15d00     00 22 06 36 |  if_ae	mov	local03, #0
15d04     90 D5 B0 FD | 	call	#__system___float_fromuns
15d08     11 FB 61 F5 | 	xor	result1, local03
15d0c     38 00 90 FD | 	jmp	#LR__1756
15d10                 | LR__1751
15d10     0F 13 02 FB | 	rdlong	arg01, local01
15d14     80 D5 B0 FD | 	call	#__system___float_fromuns
15d18     2C 00 90 FD | 	jmp	#LR__1756
15d1c                 | LR__1752
15d1c     0F FB 01 FB | 	rdlong	result1, local01
15d20     24 00 90 FD | 	jmp	#LR__1756
15d24                 | LR__1753
15d24     0F 13 02 FB | 	rdlong	arg01, local01
15d28     58 E1 B0 FD | 	call	#__system____builtin_atof
15d2c     18 00 90 FD | 	jmp	#LR__1756
15d30                 | LR__1754
15d30     0F 13 02 FB | 	rdlong	arg01, local01
15d34     98 B6 BF FD | 	call	#_convertstring
15d38     FD 12 02 F6 | 	mov	arg01, result1
15d3c     44 E1 B0 FD | 	call	#__system____builtin_atof
15d40     04 00 90 FD | 	jmp	#LR__1756
15d44                 | LR__1755
15d44     00 FA 05 F6 | 	mov	result1, #0
15d48                 | LR__1756
15d48     A7 F0 03 F6 | 	mov	ptra, fp
15d4c     B2 00 A0 FD | 	call	#popregs_
15d50                 | _converttofloat_ret
15d50     2D 00 64 FD | 	ret
15d54                 | 
15d54                 | ' 
15d54                 | ' sub do_rnd
15d54                 | _do_rnd
15d54     01 4A 05 F6 | 	mov	COUNT_, #1
15d58     A8 00 A0 FD | 	call	#pushregs_
15d5c     10 F0 07 F1 | 	add	ptra, #16
15d60     4A 00 00 FF 
15d64     80 E4 05 F1 | 	add	objptr, ##38016
15d68     F2 1E 02 FB | 	rdlong	local01, objptr
15d6c     0F 17 02 F6 | 	mov	arg03, local01
15d70     01 16 66 F0 | 	shl	arg03, #1
15d74     0F 17 02 F1 | 	add	arg03, local01
15d78     02 16 66 F0 | 	shl	arg03, #2
15d7c     03 00 00 FF 
15d80     04 E4 85 F1 | 	sub	objptr, ##1540
15d84     F2 16 02 F1 | 	add	arg03, objptr
15d88     0B 17 02 FB | 	rdlong	arg03, arg03
15d8c     0C 4E 05 F1 | 	add	fp, #12
15d90     A7 16 62 FC | 	wrlong	arg03, fp
15d94                 | ' 
15d94                 | ' numpar=compiledline(lineptr_e).result.uresult
15d94                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
15d94     0C 4E 85 F1 | 	sub	fp, #12
15d98     02 16 16 F2 | 	cmp	arg03, #2 wc
15d9c     47 00 00 FF 
15da0     7C E4 85 F1 | 	sub	objptr, ##36476
15da4     3C 00 90 CD |  if_b	jmp	#LR__1760
15da8     00 12 06 F6 | 	mov	arg01, #0
15dac     78 07 B1 FD | 	call	#__system___getiolock_0540
15db0     FD 12 02 F6 | 	mov	arg01, result1
15db4     30 AD B0 FD | 	call	#__system___lockmem
15db8     85 01 00 FF 
15dbc     C4 14 06 F6 | 	mov	arg02, ##@LR__5473
15dc0     00 12 06 F6 | 	mov	arg01, #0
15dc4     00 16 06 F6 | 	mov	arg03, #0
15dc8     10 BA B0 FD | 	call	#__system___basic_print_string
15dcc     00 12 06 F6 | 	mov	arg01, #0
15dd0     54 07 B1 FD | 	call	#__system___getiolock_0540
15dd4     FD 00 68 FC | 	wrlong	#0, result1
15dd8     27 12 06 F6 | 	mov	arg01, #39
15ddc     70 77 B0 FD | 	call	#_printerror
15de0     2C 01 90 FD | 	jmp	#LR__1767
15de4                 | LR__1760
15de4                 | ' if numpar=0 then
15de4     0C 4E 05 F1 | 	add	fp, #12
15de8     A7 FE 09 FB | 	rdlong	result3, fp wz
15dec     0C 4E 85 F1 | 	sub	fp, #12
15df0     20 00 90 5D |  if_ne	jmp	#LR__1761
15df4     08 4E 05 F1 | 	add	fp, #8
15df8     A7 3A 68 FC | 	wrlong	#29, fp
15dfc     08 4E 85 F1 | 	sub	fp, #8
15e00     1B FA 61 FD | 	getrnd	result1
15e04     A7 FA 61 FC | 	wrlong	result1, fp
15e08     A7 12 02 F6 | 	mov	arg01, fp
15e0c     E0 5C BF FD | 	call	#_push
15e10     FC 00 90 FD | 	jmp	#LR__1766
15e14                 | LR__1761
15e14     40 5C BF FD | 	call	#_pop
15e18     A7 FA 61 FC | 	wrlong	result1, fp
15e1c     04 4E 05 F1 | 	add	fp, #4
15e20     A7 FC 61 FC | 	wrlong	result2, fp
15e24     04 4E 05 F1 | 	add	fp, #4
15e28     A7 FE 61 FC | 	wrlong	result3, fp
15e2c                 | '   t1=pop()
15e2c                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
15e2c     08 4E 85 F1 | 	sub	fp, #8
15e30     1C FE 0D F2 | 	cmp	result3, #28 wz
15e34     08 4E 05 51 |  if_ne	add	fp, #8
15e38     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15e3c     08 4E 85 51 |  if_ne	sub	fp, #8
15e40     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15e44     2C 00 90 5D |  if_ne	jmp	#LR__1762
15e48     1B FA 61 FD | 	getrnd	result1
15e4c     A7 1E 02 FB | 	rdlong	local01, fp
15e50     0F FB 11 FD | 	qdiv	result1, local01
15e54     A7 12 02 F6 | 	mov	arg01, fp
15e58     19 1E 62 FD | 	getqy	local01
15e5c     A7 1E 62 FC | 	wrlong	local01, fp
15e60     08 4E 05 F1 | 	add	fp, #8
15e64     A7 3A 68 FC | 	wrlong	#29, fp
15e68     08 4E 85 F1 | 	sub	fp, #8
15e6c     80 5C BF FD | 	call	#_push
15e70     9C 00 90 FD | 	jmp	#LR__1765
15e74                 | LR__1762
15e74     08 4E 05 F1 | 	add	fp, #8
15e78     A7 1E 02 FB | 	rdlong	local01, fp
15e7c     08 4E 85 F1 | 	sub	fp, #8
15e80     1E 1E 0E F2 | 	cmp	local01, #30 wz
15e84     48 00 90 5D |  if_ne	jmp	#LR__1763
15e88     A7 12 02 FB | 	rdlong	arg01, fp
15e8c     00 C0 24 FF 
15e90     00 14 06 F6 | 	mov	arg02, ##1233125376
15e94     08 DA B0 FD | 	call	#__system___float_div
15e98     FD 1E 02 F6 | 	mov	local01, result1
15e9c     1B 12 62 FD | 	getrnd	arg01
15ea0     74 13 06 F4 | 	bitl	arg01, #372
15ea4     F0 D3 B0 FD | 	call	#__system___float_fromuns
15ea8     FD 14 02 F6 | 	mov	arg02, result1
15eac     0F 13 02 F6 | 	mov	arg01, local01
15eb0     E8 D7 B0 FD | 	call	#__system___float_mul
15eb4     A7 FA 61 FC | 	wrlong	result1, fp
15eb8     08 4E 05 F1 | 	add	fp, #8
15ebc     A7 3C 68 FC | 	wrlong	#30, fp
15ec0     08 4E 85 F1 | 	sub	fp, #8
15ec4     A7 12 02 F6 | 	mov	arg01, fp
15ec8     24 5C BF FD | 	call	#_push
15ecc     40 00 90 FD | 	jmp	#LR__1764
15ed0                 | LR__1763
15ed0                 | '     print "rnd: "; : printerror(40) 
15ed0     00 12 06 F6 | 	mov	arg01, #0
15ed4     50 06 B1 FD | 	call	#__system___getiolock_0540
15ed8     FD 12 02 F6 | 	mov	arg01, result1
15edc     08 AC B0 FD | 	call	#__system___lockmem
15ee0     85 01 00 FF 
15ee4     CA 14 06 F6 | 	mov	arg02, ##@LR__5474
15ee8     00 12 06 F6 | 	mov	arg01, #0
15eec     00 16 06 F6 | 	mov	arg03, #0
15ef0     E8 B8 B0 FD | 	call	#__system___basic_print_string
15ef4     00 12 06 F6 | 	mov	arg01, #0
15ef8     2C 06 B1 FD | 	call	#__system___getiolock_0540
15efc     FD 00 68 FC | 	wrlong	#0, result1
15f00     28 12 06 F6 | 	mov	arg01, #40
15f04     48 76 B0 FD | 	call	#_printerror
15f08     A7 12 02 F6 | 	mov	arg01, fp
15f0c     E0 5B BF FD | 	call	#_push
15f10                 | LR__1764
15f10                 | LR__1765
15f10                 | LR__1766
15f10                 | LR__1767
15f10     A7 F0 03 F6 | 	mov	ptra, fp
15f14     B2 00 A0 FD | 	call	#popregs_
15f18                 | _do_rnd_ret
15f18     2D 00 64 FD | 	ret
15f1c                 | 
15f1c                 | ' 
15f1c                 | ' sub do_getenvsustain
15f1c                 | _do_getenvsustain
15f1c     01 4A 05 F6 | 	mov	COUNT_, #1
15f20     A8 00 A0 FD | 	call	#pushregs_
15f24     10 F0 07 F1 | 	add	ptra, #16
15f28     4A 00 00 FF 
15f2c     80 E4 05 F1 | 	add	objptr, ##38016
15f30     F2 1E 02 FB | 	rdlong	local01, objptr
15f34     0F 17 02 F6 | 	mov	arg03, local01
15f38     01 16 66 F0 | 	shl	arg03, #1
15f3c     0F 17 02 F1 | 	add	arg03, local01
15f40     02 16 66 F0 | 	shl	arg03, #2
15f44     03 00 00 FF 
15f48     04 E4 85 F1 | 	sub	objptr, ##1540
15f4c     F2 16 02 F1 | 	add	arg03, objptr
15f50     0B 17 02 FB | 	rdlong	arg03, arg03
15f54     0C 4E 05 F1 | 	add	fp, #12
15f58     A7 16 62 FC | 	wrlong	arg03, fp
15f5c                 | ' 
15f5c                 | ' numpar=compiledline(lineptr_e).result.uresult
15f5c                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
15f5c     0C 4E 85 F1 | 	sub	fp, #12
15f60     02 16 16 F2 | 	cmp	arg03, #2 wc
15f64     47 00 00 FF 
15f68     7C E4 85 F1 | 	sub	objptr, ##36476
15f6c     0C 4E 05 C1 |  if_b	add	fp, #12
15f70     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
15f74     0C 4E 85 C1 |  if_b	sub	fp, #12
15f78     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1770
15f7c     00 12 06 F6 | 	mov	arg01, #0
15f80     A4 05 B1 FD | 	call	#__system___getiolock_0540
15f84     FD 12 02 F6 | 	mov	arg01, result1
15f88     5C AB B0 FD | 	call	#__system___lockmem
15f8c     85 01 00 FF 
15f90     D0 14 06 F6 | 	mov	arg02, ##@LR__5475
15f94     00 12 06 F6 | 	mov	arg01, #0
15f98     00 16 06 F6 | 	mov	arg03, #0
15f9c     3C B8 B0 FD | 	call	#__system___basic_print_string
15fa0     00 12 06 F6 | 	mov	arg01, #0
15fa4     80 05 B1 FD | 	call	#__system___getiolock_0540
15fa8     FD 00 68 FC | 	wrlong	#0, result1
15fac     27 12 06 F6 | 	mov	arg01, #39
15fb0     9C 75 B0 FD | 	call	#_printerror
15fb4     64 00 90 FD | 	jmp	#LR__1771
15fb8                 | LR__1770
15fb8     9C 5A BF FD | 	call	#_pop
15fbc     FD 1E 02 F6 | 	mov	local01, result1
15fc0     FE 16 02 F6 | 	mov	arg03, result2
15fc4     A7 1E 62 FC | 	wrlong	local01, fp
15fc8     04 4E 05 F1 | 	add	fp, #4
15fcc     A7 16 62 FC | 	wrlong	arg03, fp
15fd0     04 4E 05 F1 | 	add	fp, #4
15fd4     A7 FE 61 FC | 	wrlong	result3, fp
15fd8     08 4E 85 F1 | 	sub	fp, #8
15fdc     A7 12 02 F6 | 	mov	arg01, fp
15fe0     10 FC BF FD | 	call	#_converttoint
15fe4     FD 1E 02 F6 | 	mov	local01, result1
15fe8     01 1E 66 F0 | 	shl	local01, #1
15fec     51 00 00 FF 
15ff0     C4 E5 05 F1 | 	add	objptr, ##41924
15ff4     F2 1E 02 F1 | 	add	local01, objptr
15ff8     0F 1F E2 FA | 	rdword	local01, local01
15ffc     A7 1E 62 FC | 	wrlong	local01, fp
16000     08 4E 05 F1 | 	add	fp, #8
16004     A7 38 68 FC | 	wrlong	#28, fp
16008     08 4E 85 F1 | 	sub	fp, #8
1600c     A7 12 02 F6 | 	mov	arg01, fp
16010     51 00 00 FF 
16014     C4 E5 85 F1 | 	sub	objptr, ##41924
16018     D4 5A BF FD | 	call	#_push
1601c                 | LR__1771
1601c     A7 F0 03 F6 | 	mov	ptra, fp
16020     B2 00 A0 FD | 	call	#popregs_
16024                 | _do_getenvsustain_ret
16024     2D 00 64 FD | 	ret
16028                 | 
16028                 | ' 
16028                 | ' sub do_sin
16028                 | _do_sin
16028     01 4A 05 F6 | 	mov	COUNT_, #1
1602c     A8 00 A0 FD | 	call	#pushregs_
16030     10 F0 07 F1 | 	add	ptra, #16
16034     4A 00 00 FF 
16038     80 E4 05 F1 | 	add	objptr, ##38016
1603c     F2 1E 02 FB | 	rdlong	local01, objptr
16040     0F 17 02 F6 | 	mov	arg03, local01
16044     01 16 66 F0 | 	shl	arg03, #1
16048     0F 17 02 F1 | 	add	arg03, local01
1604c     02 16 66 F0 | 	shl	arg03, #2
16050     03 00 00 FF 
16054     04 E4 85 F1 | 	sub	objptr, ##1540
16058     F2 16 02 F1 | 	add	arg03, objptr
1605c     0B 17 02 FB | 	rdlong	arg03, arg03
16060     0C 4E 05 F1 | 	add	fp, #12
16064     A7 16 62 FC | 	wrlong	arg03, fp
16068                 | ' 
16068                 | ' numpar=compiledline(lineptr_e).result.uresult
16068                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
16068     0C 4E 85 F1 | 	sub	fp, #12
1606c     02 16 16 F2 | 	cmp	arg03, #2 wc
16070     47 00 00 FF 
16074     7C E4 85 F1 | 	sub	objptr, ##36476
16078     0C 4E 05 C1 |  if_b	add	fp, #12
1607c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16080     0C 4E 85 C1 |  if_b	sub	fp, #12
16084     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1780
16088     00 12 06 F6 | 	mov	arg01, #0
1608c     98 04 B1 FD | 	call	#__system___getiolock_0540
16090     FD 12 02 F6 | 	mov	arg01, result1
16094     50 AA B0 FD | 	call	#__system___lockmem
16098     85 01 00 FF 
1609c     E0 14 06 F6 | 	mov	arg02, ##@LR__5476
160a0     00 12 06 F6 | 	mov	arg01, #0
160a4     00 16 06 F6 | 	mov	arg03, #0
160a8     30 B7 B0 FD | 	call	#__system___basic_print_string
160ac     00 12 06 F6 | 	mov	arg01, #0
160b0     74 04 B1 FD | 	call	#__system___getiolock_0540
160b4     FD 00 68 FC | 	wrlong	#0, result1
160b8     27 12 06 F6 | 	mov	arg01, #39
160bc     90 74 B0 FD | 	call	#_printerror
160c0     64 00 90 FD | 	jmp	#LR__1781
160c4                 | LR__1780
160c4     90 59 BF FD | 	call	#_pop
160c8     A7 FA 61 FC | 	wrlong	result1, fp
160cc     04 4E 05 F1 | 	add	fp, #4
160d0     A7 FC 61 FC | 	wrlong	result2, fp
160d4     04 4E 05 F1 | 	add	fp, #4
160d8     A7 FE 61 FC | 	wrlong	result3, fp
160dc     08 4E 85 F1 | 	sub	fp, #8
160e0     51 00 00 FF 
160e4     B8 E5 05 F1 | 	add	objptr, ##41912
160e8     F2 1E 02 FB | 	rdlong	local01, objptr
160ec     51 00 00 FF 
160f0     B8 E5 85 F1 | 	sub	objptr, ##41912
160f4     A7 12 02 F6 | 	mov	arg01, fp
160f8     B4 FB BF FD | 	call	#_converttofloat
160fc     FD 14 02 F6 | 	mov	arg02, result1
16100     0F 13 02 F6 | 	mov	arg01, local01
16104     94 D5 B0 FD | 	call	#__system___float_mul
16108     FD 12 02 F6 | 	mov	arg01, result1
1610c     C8 DE B0 FD | 	call	#__system____builtin_sinf
16110     A7 FA 61 FC | 	wrlong	result1, fp
16114     08 4E 05 F1 | 	add	fp, #8
16118     A7 3C 68 FC | 	wrlong	#30, fp
1611c     08 4E 85 F1 | 	sub	fp, #8
16120     A7 12 02 F6 | 	mov	arg01, fp
16124     C8 59 BF FD | 	call	#_push
16128                 | LR__1781
16128     A7 F0 03 F6 | 	mov	ptra, fp
1612c     B2 00 A0 FD | 	call	#popregs_
16130                 | _do_sin_ret
16130     2D 00 64 FD | 	ret
16134                 | 
16134                 | ' 
16134                 | ' 
16134                 | ' sub do_mid
16134                 | _do_mid
16134     00 4A 05 F6 | 	mov	COUNT_, #0
16138     A8 00 A0 FD | 	call	#pushregs_
1613c     18 F0 07 F1 | 	add	ptra, #24
16140     4A 00 00 FF 
16144     80 E4 05 F1 | 	add	objptr, ##38016
16148     F2 16 02 FB | 	rdlong	arg03, objptr
1614c     0B 15 02 F6 | 	mov	arg02, arg03
16150     01 14 66 F0 | 	shl	arg02, #1
16154     0B 15 02 F1 | 	add	arg02, arg03
16158     02 14 66 F0 | 	shl	arg02, #2
1615c     03 00 00 FF 
16160     04 E4 85 F1 | 	sub	objptr, ##1540
16164     F2 14 02 F1 | 	add	arg02, objptr
16168     0A 17 02 FB | 	rdlong	arg03, arg02
1616c     0C 4E 05 F1 | 	add	fp, #12
16170     A7 16 62 FC | 	wrlong	arg03, fp
16174                 | ' 
16174                 | ' numpar=compiledline(lineptr_e).result.uresult
16174                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
16174     0C 4E 85 F1 | 	sub	fp, #12
16178     03 16 0E F2 | 	cmp	arg03, #3 wz
1617c     47 00 00 FF 
16180     7C E4 85 F1 | 	sub	objptr, ##36476
16184     3C 00 90 AD |  if_e	jmp	#LR__1790
16188     00 12 06 F6 | 	mov	arg01, #0
1618c     98 03 B1 FD | 	call	#__system___getiolock_0540
16190     FD 12 02 F6 | 	mov	arg01, result1
16194     50 A9 B0 FD | 	call	#__system___lockmem
16198     85 01 00 FF 
1619c     E6 14 06 F6 | 	mov	arg02, ##@LR__5477
161a0     00 12 06 F6 | 	mov	arg01, #0
161a4     00 16 06 F6 | 	mov	arg03, #0
161a8     30 B6 B0 FD | 	call	#__system___basic_print_string
161ac     00 12 06 F6 | 	mov	arg01, #0
161b0     74 03 B1 FD | 	call	#__system___getiolock_0540
161b4     FD 00 68 FC | 	wrlong	#0, result1
161b8     27 12 06 F6 | 	mov	arg01, #39
161bc     90 73 B0 FD | 	call	#_printerror
161c0     28 01 90 FD | 	jmp	#LR__1793
161c4                 | LR__1790
161c4     90 58 BF FD | 	call	#_pop
161c8     FF 16 02 F6 | 	mov	arg03, result3
161cc     A7 FA 61 FC | 	wrlong	result1, fp
161d0     04 4E 05 F1 | 	add	fp, #4
161d4     A7 FC 61 FC | 	wrlong	result2, fp
161d8     04 4E 05 F1 | 	add	fp, #4
161dc     A7 16 62 FC | 	wrlong	arg03, fp
161e0     08 4E 85 F1 | 	sub	fp, #8
161e4     A7 12 02 F6 | 	mov	arg01, fp
161e8     08 FA BF FD | 	call	#_converttoint
161ec     FD 16 02 F6 | 	mov	arg03, result1
161f0     14 4E 05 F1 | 	add	fp, #20
161f4     A7 16 62 FC | 	wrlong	arg03, fp
161f8     14 4E 85 F1 | 	sub	fp, #20
161fc     58 58 BF FD | 	call	#_pop
16200     FF 16 02 F6 | 	mov	arg03, result3
16204     A7 FA 61 FC | 	wrlong	result1, fp
16208     04 4E 05 F1 | 	add	fp, #4
1620c     A7 FC 61 FC | 	wrlong	result2, fp
16210     04 4E 05 F1 | 	add	fp, #4
16214     A7 16 62 FC | 	wrlong	arg03, fp
16218     08 4E 85 F1 | 	sub	fp, #8
1621c     A7 12 02 F6 | 	mov	arg01, fp
16220     D0 F9 BF FD | 	call	#_converttoint
16224     FD 16 02 F6 | 	mov	arg03, result1
16228     10 4E 05 F1 | 	add	fp, #16
1622c     A7 16 62 FC | 	wrlong	arg03, fp
16230     10 4E 85 F1 | 	sub	fp, #16
16234     20 58 BF FD | 	call	#_pop
16238     FF 16 02 F6 | 	mov	arg03, result3
1623c     A7 FA 61 FC | 	wrlong	result1, fp
16240     04 4E 05 F1 | 	add	fp, #4
16244     A7 FC 61 FC | 	wrlong	result2, fp
16248     04 4E 05 F1 | 	add	fp, #4
1624c     A7 16 62 FC | 	wrlong	arg03, fp
16250                 | ' t1=pop() : arg2=converttoint(t1)
16250                 | ' t1=pop() : arg1=converttoint(t1)
16250                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16250     08 4E 85 F1 | 	sub	fp, #8
16254     2B 16 0E F2 | 	cmp	arg03, #43 wz
16258     18 00 90 5D |  if_ne	jmp	#LR__1791
1625c     A7 12 02 FB | 	rdlong	arg01, fp
16260     6C B1 BF FD | 	call	#_convertstring
16264     A7 FA 61 FC | 	wrlong	result1, fp
16268     08 4E 05 F1 | 	add	fp, #8
1626c     A7 3E 68 FC | 	wrlong	#31, fp
16270     08 4E 85 F1 | 	sub	fp, #8
16274                 | LR__1791
16274                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
16274     08 4E 05 F1 | 	add	fp, #8
16278     A7 16 02 FB | 	rdlong	arg03, fp
1627c     08 4E 85 F1 | 	sub	fp, #8
16280     1F 16 0E F2 | 	cmp	arg03, #31 wz
16284     3C 00 90 AD |  if_e	jmp	#LR__1792
16288     00 12 06 F6 | 	mov	arg01, #0
1628c     98 02 B1 FD | 	call	#__system___getiolock_0540
16290     FD 12 02 F6 | 	mov	arg01, result1
16294     50 A8 B0 FD | 	call	#__system___lockmem
16298     85 01 00 FF 
1629c     ED 14 06 F6 | 	mov	arg02, ##@LR__5478
162a0     00 12 06 F6 | 	mov	arg01, #0
162a4     00 16 06 F6 | 	mov	arg03, #0
162a8     30 B5 B0 FD | 	call	#__system___basic_print_string
162ac     00 12 06 F6 | 	mov	arg01, #0
162b0     74 02 B1 FD | 	call	#__system___getiolock_0540
162b4     FD 00 68 FC | 	wrlong	#0, result1
162b8     0F 12 06 F6 | 	mov	arg01, #15
162bc     90 72 B0 FD | 	call	#_printerror
162c0     28 00 90 FD | 	jmp	#LR__1793
162c4                 | LR__1792
162c4     A7 12 02 FB | 	rdlong	arg01, fp
162c8     10 4E 05 F1 | 	add	fp, #16
162cc     A7 14 02 FB | 	rdlong	arg02, fp
162d0     04 4E 05 F1 | 	add	fp, #4
162d4     A7 16 02 FB | 	rdlong	arg03, fp
162d8     14 4E 85 F1 | 	sub	fp, #20
162dc     9C C9 B0 FD | 	call	#__system__Mid_S
162e0     A7 FA 61 FC | 	wrlong	result1, fp
162e4     A7 12 02 F6 | 	mov	arg01, fp
162e8     04 58 BF FD | 	call	#_push
162ec                 | LR__1793
162ec     A7 F0 03 F6 | 	mov	ptra, fp
162f0     B2 00 A0 FD | 	call	#popregs_
162f4                 | _do_mid_ret
162f4     2D 00 64 FD | 	ret
162f8                 | 
162f8                 | ' 
162f8                 | ' sub do_right
162f8                 | _do_right
162f8     00 4A 05 F6 | 	mov	COUNT_, #0
162fc     A8 00 A0 FD | 	call	#pushregs_
16300     14 F0 07 F1 | 	add	ptra, #20
16304     4A 00 00 FF 
16308     80 E4 05 F1 | 	add	objptr, ##38016
1630c     F2 16 02 FB | 	rdlong	arg03, objptr
16310     0B 15 02 F6 | 	mov	arg02, arg03
16314     01 14 66 F0 | 	shl	arg02, #1
16318     0B 15 02 F1 | 	add	arg02, arg03
1631c     02 14 66 F0 | 	shl	arg02, #2
16320     03 00 00 FF 
16324     04 E4 85 F1 | 	sub	objptr, ##1540
16328     F2 14 02 F1 | 	add	arg02, objptr
1632c     0A 17 02 FB | 	rdlong	arg03, arg02
16330     0C 4E 05 F1 | 	add	fp, #12
16334     A7 16 62 FC | 	wrlong	arg03, fp
16338                 | ' 
16338                 | ' numpar=compiledline(lineptr_e).result.uresult
16338                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
16338     0C 4E 85 F1 | 	sub	fp, #12
1633c     02 16 0E F2 | 	cmp	arg03, #2 wz
16340     47 00 00 FF 
16344     7C E4 85 F1 | 	sub	objptr, ##36476
16348     3C 00 90 AD |  if_e	jmp	#LR__1800
1634c     00 12 06 F6 | 	mov	arg01, #0
16350     D4 01 B1 FD | 	call	#__system___getiolock_0540
16354     FD 12 02 F6 | 	mov	arg01, result1
16358     8C A7 B0 FD | 	call	#__system___lockmem
1635c     85 01 00 FF 
16360     F4 14 06 F6 | 	mov	arg02, ##@LR__5479
16364     00 12 06 F6 | 	mov	arg01, #0
16368     00 16 06 F6 | 	mov	arg03, #0
1636c     6C B4 B0 FD | 	call	#__system___basic_print_string
16370     00 12 06 F6 | 	mov	arg01, #0
16374     B0 01 B1 FD | 	call	#__system___getiolock_0540
16378     FD 00 68 FC | 	wrlong	#0, result1
1637c     27 12 06 F6 | 	mov	arg01, #39
16380     CC 71 B0 FD | 	call	#_printerror
16384     E8 00 90 FD | 	jmp	#LR__1803
16388                 | LR__1800
16388     CC 56 BF FD | 	call	#_pop
1638c     FF 16 02 F6 | 	mov	arg03, result3
16390     A7 FA 61 FC | 	wrlong	result1, fp
16394     04 4E 05 F1 | 	add	fp, #4
16398     A7 FC 61 FC | 	wrlong	result2, fp
1639c     04 4E 05 F1 | 	add	fp, #4
163a0     A7 16 62 FC | 	wrlong	arg03, fp
163a4     08 4E 85 F1 | 	sub	fp, #8
163a8     A7 12 02 F6 | 	mov	arg01, fp
163ac     44 F8 BF FD | 	call	#_converttoint
163b0     FD 16 02 F6 | 	mov	arg03, result1
163b4     10 4E 05 F1 | 	add	fp, #16
163b8     A7 16 62 FC | 	wrlong	arg03, fp
163bc     10 4E 85 F1 | 	sub	fp, #16
163c0     94 56 BF FD | 	call	#_pop
163c4     FF 16 02 F6 | 	mov	arg03, result3
163c8     A7 FA 61 FC | 	wrlong	result1, fp
163cc     04 4E 05 F1 | 	add	fp, #4
163d0     A7 FC 61 FC | 	wrlong	result2, fp
163d4     04 4E 05 F1 | 	add	fp, #4
163d8     A7 16 62 FC | 	wrlong	arg03, fp
163dc                 | ' t1=pop() : arg=converttoint(t1)
163dc                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
163dc     08 4E 85 F1 | 	sub	fp, #8
163e0     2B 16 0E F2 | 	cmp	arg03, #43 wz
163e4     18 00 90 5D |  if_ne	jmp	#LR__1801
163e8     A7 12 02 FB | 	rdlong	arg01, fp
163ec     E0 AF BF FD | 	call	#_convertstring
163f0     A7 FA 61 FC | 	wrlong	result1, fp
163f4     08 4E 05 F1 | 	add	fp, #8
163f8     A7 3E 68 FC | 	wrlong	#31, fp
163fc     08 4E 85 F1 | 	sub	fp, #8
16400                 | LR__1801
16400                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
16400     08 4E 05 F1 | 	add	fp, #8
16404     A7 16 02 FB | 	rdlong	arg03, fp
16408     08 4E 85 F1 | 	sub	fp, #8
1640c     1F 16 0E F2 | 	cmp	arg03, #31 wz
16410     3C 00 90 AD |  if_e	jmp	#LR__1802
16414     00 12 06 F6 | 	mov	arg01, #0
16418     0C 01 B1 FD | 	call	#__system___getiolock_0540
1641c     FD 12 02 F6 | 	mov	arg01, result1
16420     C4 A6 B0 FD | 	call	#__system___lockmem
16424     85 01 00 FF 
16428     FD 14 06 F6 | 	mov	arg02, ##@LR__5480
1642c     00 12 06 F6 | 	mov	arg01, #0
16430     00 16 06 F6 | 	mov	arg03, #0
16434     A4 B3 B0 FD | 	call	#__system___basic_print_string
16438     00 12 06 F6 | 	mov	arg01, #0
1643c     E8 00 B1 FD | 	call	#__system___getiolock_0540
16440     FD 00 68 FC | 	wrlong	#0, result1
16444     0F 12 06 F6 | 	mov	arg01, #15
16448     04 71 B0 FD | 	call	#_printerror
1644c     20 00 90 FD | 	jmp	#LR__1803
16450                 | LR__1802
16450     A7 12 02 FB | 	rdlong	arg01, fp
16454     10 4E 05 F1 | 	add	fp, #16
16458     A7 14 02 FB | 	rdlong	arg02, fp
1645c     10 4E 85 F1 | 	sub	fp, #16
16460     88 C7 B0 FD | 	call	#__system__Right_S
16464     A7 FA 61 FC | 	wrlong	result1, fp
16468     A7 12 02 F6 | 	mov	arg01, fp
1646c     80 56 BF FD | 	call	#_push
16470                 | LR__1803
16470     A7 F0 03 F6 | 	mov	ptra, fp
16474     B2 00 A0 FD | 	call	#popregs_
16478                 | _do_right_ret
16478     2D 00 64 FD | 	ret
1647c                 | 
1647c                 | ' 
1647c                 | ' sub do_left
1647c                 | _do_left
1647c     00 4A 05 F6 | 	mov	COUNT_, #0
16480     A8 00 A0 FD | 	call	#pushregs_
16484     14 F0 07 F1 | 	add	ptra, #20
16488     4A 00 00 FF 
1648c     80 E4 05 F1 | 	add	objptr, ##38016
16490     F2 16 02 FB | 	rdlong	arg03, objptr
16494     0B 15 02 F6 | 	mov	arg02, arg03
16498     01 14 66 F0 | 	shl	arg02, #1
1649c     0B 15 02 F1 | 	add	arg02, arg03
164a0     02 14 66 F0 | 	shl	arg02, #2
164a4     03 00 00 FF 
164a8     04 E4 85 F1 | 	sub	objptr, ##1540
164ac     F2 14 02 F1 | 	add	arg02, objptr
164b0     0A 17 02 FB | 	rdlong	arg03, arg02
164b4     0C 4E 05 F1 | 	add	fp, #12
164b8     A7 16 62 FC | 	wrlong	arg03, fp
164bc                 | ' 
164bc                 | ' numpar=compiledline(lineptr_e).result.uresult
164bc                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
164bc     0C 4E 85 F1 | 	sub	fp, #12
164c0     02 16 0E F2 | 	cmp	arg03, #2 wz
164c4     47 00 00 FF 
164c8     7C E4 85 F1 | 	sub	objptr, ##36476
164cc     3C 00 90 AD |  if_e	jmp	#LR__1810
164d0     00 12 06 F6 | 	mov	arg01, #0
164d4     50 00 B1 FD | 	call	#__system___getiolock_0540
164d8     FD 12 02 F6 | 	mov	arg01, result1
164dc     08 A6 B0 FD | 	call	#__system___lockmem
164e0     85 01 00 FF 
164e4     06 15 06 F6 | 	mov	arg02, ##@LR__5481
164e8     00 12 06 F6 | 	mov	arg01, #0
164ec     00 16 06 F6 | 	mov	arg03, #0
164f0     E8 B2 B0 FD | 	call	#__system___basic_print_string
164f4     00 12 06 F6 | 	mov	arg01, #0
164f8     2C 00 B1 FD | 	call	#__system___getiolock_0540
164fc     FD 00 68 FC | 	wrlong	#0, result1
16500     27 12 06 F6 | 	mov	arg01, #39
16504     48 70 B0 FD | 	call	#_printerror
16508     E8 00 90 FD | 	jmp	#LR__1813
1650c                 | LR__1810
1650c     48 55 BF FD | 	call	#_pop
16510     FF 16 02 F6 | 	mov	arg03, result3
16514     A7 FA 61 FC | 	wrlong	result1, fp
16518     04 4E 05 F1 | 	add	fp, #4
1651c     A7 FC 61 FC | 	wrlong	result2, fp
16520     04 4E 05 F1 | 	add	fp, #4
16524     A7 16 62 FC | 	wrlong	arg03, fp
16528     08 4E 85 F1 | 	sub	fp, #8
1652c     A7 12 02 F6 | 	mov	arg01, fp
16530     C0 F6 BF FD | 	call	#_converttoint
16534     FD 16 02 F6 | 	mov	arg03, result1
16538     10 4E 05 F1 | 	add	fp, #16
1653c     A7 16 62 FC | 	wrlong	arg03, fp
16540     10 4E 85 F1 | 	sub	fp, #16
16544     10 55 BF FD | 	call	#_pop
16548     FF 16 02 F6 | 	mov	arg03, result3
1654c     A7 FA 61 FC | 	wrlong	result1, fp
16550     04 4E 05 F1 | 	add	fp, #4
16554     A7 FC 61 FC | 	wrlong	result2, fp
16558     04 4E 05 F1 | 	add	fp, #4
1655c     A7 16 62 FC | 	wrlong	arg03, fp
16560                 | ' t1=pop() : arg=converttoint(t1)
16560                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16560     08 4E 85 F1 | 	sub	fp, #8
16564     2B 16 0E F2 | 	cmp	arg03, #43 wz
16568     18 00 90 5D |  if_ne	jmp	#LR__1811
1656c     A7 12 02 FB | 	rdlong	arg01, fp
16570     5C AE BF FD | 	call	#_convertstring
16574     A7 FA 61 FC | 	wrlong	result1, fp
16578     08 4E 05 F1 | 	add	fp, #8
1657c     A7 3E 68 FC | 	wrlong	#31, fp
16580     08 4E 85 F1 | 	sub	fp, #8
16584                 | LR__1811
16584                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
16584     08 4E 05 F1 | 	add	fp, #8
16588     A7 16 02 FB | 	rdlong	arg03, fp
1658c     08 4E 85 F1 | 	sub	fp, #8
16590     1F 16 0E F2 | 	cmp	arg03, #31 wz
16594     3C 00 90 AD |  if_e	jmp	#LR__1812
16598     00 12 06 F6 | 	mov	arg01, #0
1659c     88 FF B0 FD | 	call	#__system___getiolock_0540
165a0     FD 12 02 F6 | 	mov	arg01, result1
165a4     40 A5 B0 FD | 	call	#__system___lockmem
165a8     85 01 00 FF 
165ac     0E 15 06 F6 | 	mov	arg02, ##@LR__5482
165b0     00 12 06 F6 | 	mov	arg01, #0
165b4     00 16 06 F6 | 	mov	arg03, #0
165b8     20 B2 B0 FD | 	call	#__system___basic_print_string
165bc     00 12 06 F6 | 	mov	arg01, #0
165c0     64 FF B0 FD | 	call	#__system___getiolock_0540
165c4     FD 00 68 FC | 	wrlong	#0, result1
165c8     0F 12 06 F6 | 	mov	arg01, #15
165cc     80 6F B0 FD | 	call	#_printerror
165d0     20 00 90 FD | 	jmp	#LR__1813
165d4                 | LR__1812
165d4     A7 12 02 FB | 	rdlong	arg01, fp
165d8     10 4E 05 F1 | 	add	fp, #16
165dc     A7 14 02 FB | 	rdlong	arg02, fp
165e0     10 4E 85 F1 | 	sub	fp, #16
165e4     7C C5 B0 FD | 	call	#__system__Left_S
165e8     A7 FA 61 FC | 	wrlong	result1, fp
165ec     A7 12 02 F6 | 	mov	arg01, fp
165f0     FC 54 BF FD | 	call	#_push
165f4                 | LR__1813
165f4     A7 F0 03 F6 | 	mov	ptra, fp
165f8     B2 00 A0 FD | 	call	#popregs_
165fc                 | _do_left_ret
165fc     2D 00 64 FD | 	ret
16600                 | 
16600                 | ' 
16600                 | ' sub do_asc
16600                 | _do_asc
16600     01 4A 05 F6 | 	mov	COUNT_, #1
16604     A8 00 A0 FD | 	call	#pushregs_
16608     14 F0 07 F1 | 	add	ptra, #20
1660c     4A 00 00 FF 
16610     80 E4 05 F1 | 	add	objptr, ##38016
16614     F2 1E 02 FB | 	rdlong	local01, objptr
16618     0F 17 02 F6 | 	mov	arg03, local01
1661c     01 16 66 F0 | 	shl	arg03, #1
16620     0F 17 02 F1 | 	add	arg03, local01
16624     02 16 66 F0 | 	shl	arg03, #2
16628     03 00 00 FF 
1662c     04 E4 85 F1 | 	sub	objptr, ##1540
16630     F2 16 02 F1 | 	add	arg03, objptr
16634     0B 17 02 FB | 	rdlong	arg03, arg03
16638     0C 4E 05 F1 | 	add	fp, #12
1663c     A7 16 62 FC | 	wrlong	arg03, fp
16640                 | ' 
16640                 | ' numpar=compiledline(lineptr_e).result.uresult
16640                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
16640     0C 4E 85 F1 | 	sub	fp, #12
16644     02 16 16 F2 | 	cmp	arg03, #2 wc
16648     47 00 00 FF 
1664c     7C E4 85 F1 | 	sub	objptr, ##36476
16650     0C 4E 05 C1 |  if_b	add	fp, #12
16654     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16658     0C 4E 85 C1 |  if_b	sub	fp, #12
1665c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1820
16660     00 12 06 F6 | 	mov	arg01, #0
16664     C0 FE B0 FD | 	call	#__system___getiolock_0540
16668     FD 12 02 F6 | 	mov	arg01, result1
1666c     78 A4 B0 FD | 	call	#__system___lockmem
16670     85 01 00 FF 
16674     16 15 06 F6 | 	mov	arg02, ##@LR__5483
16678     00 12 06 F6 | 	mov	arg01, #0
1667c     00 16 06 F6 | 	mov	arg03, #0
16680     58 B1 B0 FD | 	call	#__system___basic_print_string
16684     00 12 06 F6 | 	mov	arg01, #0
16688     9C FE B0 FD | 	call	#__system___getiolock_0540
1668c     FD 00 68 FC | 	wrlong	#0, result1
16690     27 12 06 F6 | 	mov	arg01, #39
16694     B8 6E B0 FD | 	call	#_printerror
16698     B0 00 90 FD | 	jmp	#LR__1823
1669c                 | LR__1820
1669c     B8 53 BF FD | 	call	#_pop
166a0     FF 16 02 F6 | 	mov	arg03, result3
166a4     A7 FA 61 FC | 	wrlong	result1, fp
166a8     04 4E 05 F1 | 	add	fp, #4
166ac     A7 FC 61 FC | 	wrlong	result2, fp
166b0     04 4E 05 F1 | 	add	fp, #4
166b4     A7 16 62 FC | 	wrlong	arg03, fp
166b8                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
166b8     08 4E 85 F1 | 	sub	fp, #8
166bc     2B 16 0E F2 | 	cmp	arg03, #43 wz
166c0     18 00 90 5D |  if_ne	jmp	#LR__1821
166c4     A7 12 02 FB | 	rdlong	arg01, fp
166c8     04 AD BF FD | 	call	#_convertstring
166cc     A7 FA 61 FC | 	wrlong	result1, fp
166d0     08 4E 05 F1 | 	add	fp, #8
166d4     A7 3E 68 FC | 	wrlong	#31, fp
166d8     08 4E 85 F1 | 	sub	fp, #8
166dc                 | LR__1821
166dc                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
166dc     08 4E 05 F1 | 	add	fp, #8
166e0     A7 16 02 FB | 	rdlong	arg03, fp
166e4     08 4E 85 F1 | 	sub	fp, #8
166e8     1F 16 0E F2 | 	cmp	arg03, #31 wz
166ec     3C 00 90 AD |  if_e	jmp	#LR__1822
166f0     00 12 06 F6 | 	mov	arg01, #0
166f4     30 FE B0 FD | 	call	#__system___getiolock_0540
166f8     FD 12 02 F6 | 	mov	arg01, result1
166fc     E8 A3 B0 FD | 	call	#__system___lockmem
16700     85 01 00 FF 
16704     1C 15 06 F6 | 	mov	arg02, ##@LR__5484
16708     00 12 06 F6 | 	mov	arg01, #0
1670c     00 16 06 F6 | 	mov	arg03, #0
16710     C8 B0 B0 FD | 	call	#__system___basic_print_string
16714     00 12 06 F6 | 	mov	arg01, #0
16718     0C FE B0 FD | 	call	#__system___getiolock_0540
1671c     FD 00 68 FC | 	wrlong	#0, result1
16720     0F 12 06 F6 | 	mov	arg01, #15
16724     28 6E B0 FD | 	call	#_printerror
16728     20 00 90 FD | 	jmp	#LR__1823
1672c                 | LR__1822
1672c     A7 1E 02 FB | 	rdlong	local01, fp
16730     0F 1F C2 FA | 	rdbyte	local01, local01
16734     A7 1E 62 FC | 	wrlong	local01, fp
16738     08 4E 05 F1 | 	add	fp, #8
1673c     A7 38 68 FC | 	wrlong	#28, fp
16740     08 4E 85 F1 | 	sub	fp, #8
16744     A7 12 02 F6 | 	mov	arg01, fp
16748     A4 53 BF FD | 	call	#_push
1674c                 | LR__1823
1674c     A7 F0 03 F6 | 	mov	ptra, fp
16750     B2 00 A0 FD | 	call	#popregs_
16754                 | _do_asc_ret
16754     2D 00 64 FD | 	ret
16758                 | 
16758                 | ' 
16758                 | ' sub do_len
16758                 | _do_len
16758     02 4A 05 F6 | 	mov	COUNT_, #2
1675c     A8 00 A0 FD | 	call	#pushregs_
16760     14 F0 07 F1 | 	add	ptra, #20
16764     4A 00 00 FF 
16768     80 E4 05 F1 | 	add	objptr, ##38016
1676c     F2 1E 02 FB | 	rdlong	local01, objptr
16770     0F 17 02 F6 | 	mov	arg03, local01
16774     01 16 66 F0 | 	shl	arg03, #1
16778     0F 17 02 F1 | 	add	arg03, local01
1677c     02 16 66 F0 | 	shl	arg03, #2
16780     03 00 00 FF 
16784     04 E4 85 F1 | 	sub	objptr, ##1540
16788     F2 16 02 F1 | 	add	arg03, objptr
1678c     0B 17 02 FB | 	rdlong	arg03, arg03
16790     0C 4E 05 F1 | 	add	fp, #12
16794     A7 16 62 FC | 	wrlong	arg03, fp
16798                 | ' 
16798                 | ' numpar=compiledline(lineptr_e).result.uresult
16798                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
16798     0C 4E 85 F1 | 	sub	fp, #12
1679c     02 16 16 F2 | 	cmp	arg03, #2 wc
167a0     47 00 00 FF 
167a4     7C E4 85 F1 | 	sub	objptr, ##36476
167a8     0C 4E 05 C1 |  if_b	add	fp, #12
167ac     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
167b0     0C 4E 85 C1 |  if_b	sub	fp, #12
167b4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1830
167b8     00 12 06 F6 | 	mov	arg01, #0
167bc     68 FD B0 FD | 	call	#__system___getiolock_0540
167c0     FD 12 02 F6 | 	mov	arg01, result1
167c4     20 A3 B0 FD | 	call	#__system___lockmem
167c8     85 01 00 FF 
167cc     22 15 06 F6 | 	mov	arg02, ##@LR__5485
167d0     00 12 06 F6 | 	mov	arg01, #0
167d4     00 16 06 F6 | 	mov	arg03, #0
167d8     00 B0 B0 FD | 	call	#__system___basic_print_string
167dc     00 12 06 F6 | 	mov	arg01, #0
167e0     44 FD B0 FD | 	call	#__system___getiolock_0540
167e4     FD 00 68 FC | 	wrlong	#0, result1
167e8     27 12 06 F6 | 	mov	arg01, #39
167ec     60 6D B0 FD | 	call	#_printerror
167f0     C4 00 90 FD | 	jmp	#LR__1835
167f4                 | LR__1830
167f4     60 52 BF FD | 	call	#_pop
167f8     FF 16 02 F6 | 	mov	arg03, result3
167fc     A7 FA 61 FC | 	wrlong	result1, fp
16800     04 4E 05 F1 | 	add	fp, #4
16804     A7 FC 61 FC | 	wrlong	result2, fp
16808     04 4E 05 F1 | 	add	fp, #4
1680c     A7 16 62 FC | 	wrlong	arg03, fp
16810                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16810     08 4E 85 F1 | 	sub	fp, #8
16814     2B 16 0E F2 | 	cmp	arg03, #43 wz
16818     18 00 90 5D |  if_ne	jmp	#LR__1831
1681c     A7 12 02 FB | 	rdlong	arg01, fp
16820     AC AB BF FD | 	call	#_convertstring
16824     A7 FA 61 FC | 	wrlong	result1, fp
16828     08 4E 05 F1 | 	add	fp, #8
1682c     A7 3E 68 FC | 	wrlong	#31, fp
16830     08 4E 85 F1 | 	sub	fp, #8
16834                 | LR__1831
16834                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
16834     08 4E 05 F1 | 	add	fp, #8
16838     A7 16 02 FB | 	rdlong	arg03, fp
1683c     08 4E 85 F1 | 	sub	fp, #8
16840     1F 16 0E F2 | 	cmp	arg03, #31 wz
16844     3C 00 90 AD |  if_e	jmp	#LR__1832
16848     00 12 06 F6 | 	mov	arg01, #0
1684c     D8 FC B0 FD | 	call	#__system___getiolock_0540
16850     FD 12 02 F6 | 	mov	arg01, result1
16854     90 A2 B0 FD | 	call	#__system___lockmem
16858     85 01 00 FF 
1685c     28 15 06 F6 | 	mov	arg02, ##@LR__5486
16860     00 12 06 F6 | 	mov	arg01, #0
16864     00 16 06 F6 | 	mov	arg03, #0
16868     70 AF B0 FD | 	call	#__system___basic_print_string
1686c     00 12 06 F6 | 	mov	arg01, #0
16870     B4 FC B0 FD | 	call	#__system___getiolock_0540
16874     FD 00 68 FC | 	wrlong	#0, result1
16878     0F 12 06 F6 | 	mov	arg01, #15
1687c     D0 6C B0 FD | 	call	#_printerror
16880     34 00 90 FD | 	jmp	#LR__1835
16884                 | LR__1832
16884     A7 12 02 FB | 	rdlong	arg01, fp
16888     09 21 02 F6 | 	mov	local02, arg01
1688c     97 06 48 FB | 	callpa	#(@LR__1834-@LR__1833)>>2,fcache_load_ptr_
16890                 | LR__1833
16890     10 FB C9 FA | 	rdbyte	result1, local02 wz
16894     01 20 06 51 |  if_ne	add	local02, #1
16898     F4 FF 9F 5D |  if_ne	jmp	#LR__1833
1689c                 | LR__1834
1689c     09 21 82 F1 | 	sub	local02, arg01
168a0     A7 20 62 FC | 	wrlong	local02, fp
168a4     08 4E 05 F1 | 	add	fp, #8
168a8     A7 38 68 FC | 	wrlong	#28, fp
168ac     08 4E 85 F1 | 	sub	fp, #8
168b0     A7 12 02 F6 | 	mov	arg01, fp
168b4     38 52 BF FD | 	call	#_push
168b8                 | LR__1835
168b8     A7 F0 03 F6 | 	mov	ptra, fp
168bc     B2 00 A0 FD | 	call	#popregs_
168c0                 | _do_len_ret
168c0     2D 00 64 FD | 	ret
168c4                 | 
168c4                 | ' 
168c4                 | ' sub do_chr
168c4                 | _do_chr
168c4     01 4A 05 F6 | 	mov	COUNT_, #1
168c8     A8 00 A0 FD | 	call	#pushregs_
168cc     14 F0 07 F1 | 	add	ptra, #20
168d0     4A 00 00 FF 
168d4     80 E4 05 F1 | 	add	objptr, ##38016
168d8     F2 1E 02 FB | 	rdlong	local01, objptr
168dc     0F 17 02 F6 | 	mov	arg03, local01
168e0     01 16 66 F0 | 	shl	arg03, #1
168e4     0F 17 02 F1 | 	add	arg03, local01
168e8     02 16 66 F0 | 	shl	arg03, #2
168ec     03 00 00 FF 
168f0     04 E4 85 F1 | 	sub	objptr, ##1540
168f4     F2 16 02 F1 | 	add	arg03, objptr
168f8     0B 17 02 FB | 	rdlong	arg03, arg03
168fc     0C 4E 05 F1 | 	add	fp, #12
16900     A7 16 62 FC | 	wrlong	arg03, fp
16904                 | ' 
16904                 | ' numpar=compiledline(lineptr_e).result.uresult
16904                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
16904     0C 4E 85 F1 | 	sub	fp, #12
16908     02 16 16 F2 | 	cmp	arg03, #2 wc
1690c     47 00 00 FF 
16910     7C E4 85 F1 | 	sub	objptr, ##36476
16914     0C 4E 05 C1 |  if_b	add	fp, #12
16918     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1691c     0C 4E 85 C1 |  if_b	sub	fp, #12
16920     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1840
16924     00 12 06 F6 | 	mov	arg01, #0
16928     FC FB B0 FD | 	call	#__system___getiolock_0540
1692c     FD 12 02 F6 | 	mov	arg01, result1
16930     B4 A1 B0 FD | 	call	#__system___lockmem
16934     85 01 00 FF 
16938     2E 15 06 F6 | 	mov	arg02, ##@LR__5487
1693c     00 12 06 F6 | 	mov	arg01, #0
16940     00 16 06 F6 | 	mov	arg03, #0
16944     94 AE B0 FD | 	call	#__system___basic_print_string
16948     00 12 06 F6 | 	mov	arg01, #0
1694c     D8 FB B0 FD | 	call	#__system___getiolock_0540
16950     FD 00 68 FC | 	wrlong	#0, result1
16954     27 12 06 F6 | 	mov	arg01, #39
16958     F4 6B B0 FD | 	call	#_printerror
1695c     54 00 90 FD | 	jmp	#LR__1841
16960                 | LR__1840
16960     F4 50 BF FD | 	call	#_pop
16964     FF 1E 02 F6 | 	mov	local01, result3
16968     A7 FA 61 FC | 	wrlong	result1, fp
1696c     04 4E 05 F1 | 	add	fp, #4
16970     A7 FC 61 FC | 	wrlong	result2, fp
16974     04 4E 05 F1 | 	add	fp, #4
16978     A7 1E 62 FC | 	wrlong	local01, fp
1697c     08 4E 85 F1 | 	sub	fp, #8
16980     A7 12 02 F6 | 	mov	arg01, fp
16984     6C F2 BF FD | 	call	#_converttoint
16988     10 4E 05 F1 | 	add	fp, #16
1698c     A7 FA 61 FC | 	wrlong	result1, fp
16990     FD 12 02 F6 | 	mov	arg01, result1
16994     10 4E 85 F1 | 	sub	fp, #16
16998     8C C3 B0 FD | 	call	#__system__Chr_S
1699c     A7 FA 61 FC | 	wrlong	result1, fp
169a0     08 4E 05 F1 | 	add	fp, #8
169a4     A7 3E 68 FC | 	wrlong	#31, fp
169a8     08 4E 85 F1 | 	sub	fp, #8
169ac     A7 12 02 F6 | 	mov	arg01, fp
169b0     3C 51 BF FD | 	call	#_push
169b4                 | LR__1841
169b4     A7 F0 03 F6 | 	mov	ptra, fp
169b8     B2 00 A0 FD | 	call	#popregs_
169bc                 | _do_chr_ret
169bc     2D 00 64 FD | 	ret
169c0                 | 
169c0                 | ' 
169c0                 | ' sub do_val
169c0                 | _do_val
169c0     03 4A 05 F6 | 	mov	COUNT_, #3
169c4     A8 00 A0 FD | 	call	#pushregs_
169c8     20 F0 07 F1 | 	add	ptra, #32
169cc     4A 00 00 FF 
169d0     80 E4 05 F1 | 	add	objptr, ##38016
169d4     F2 16 02 FB | 	rdlong	arg03, objptr
169d8     0B 1F 02 F6 | 	mov	local01, arg03
169dc     01 1E 66 F0 | 	shl	local01, #1
169e0     0B 1F 02 F1 | 	add	local01, arg03
169e4     02 1E 66 F0 | 	shl	local01, #2
169e8     03 00 00 FF 
169ec     04 E4 85 F1 | 	sub	objptr, ##1540
169f0     F2 1E 02 F1 | 	add	local01, objptr
169f4     0F 17 02 FB | 	rdlong	arg03, local01
169f8     0C 4E 05 F1 | 	add	fp, #12
169fc     A7 16 62 FC | 	wrlong	arg03, fp
16a00                 | ' 
16a00                 | ' numpar=compiledline(lineptr_e).result.uresult
16a00                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
16a00     0C 4E 85 F1 | 	sub	fp, #12
16a04     02 16 16 F2 | 	cmp	arg03, #2 wc
16a08     47 00 00 FF 
16a0c     7C E4 85 F1 | 	sub	objptr, ##36476
16a10     0C 4E 05 C1 |  if_b	add	fp, #12
16a14     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16a18     0C 4E 85 C1 |  if_b	sub	fp, #12
16a1c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1850
16a20     00 12 06 F6 | 	mov	arg01, #0
16a24     00 FB B0 FD | 	call	#__system___getiolock_0540
16a28     FD 12 02 F6 | 	mov	arg01, result1
16a2c     B8 A0 B0 FD | 	call	#__system___lockmem
16a30     85 01 00 FF 
16a34     35 15 06 F6 | 	mov	arg02, ##@LR__5488
16a38     00 12 06 F6 | 	mov	arg01, #0
16a3c     00 16 06 F6 | 	mov	arg03, #0
16a40     98 AD B0 FD | 	call	#__system___basic_print_string
16a44     00 12 06 F6 | 	mov	arg01, #0
16a48     DC FA B0 FD | 	call	#__system___getiolock_0540
16a4c     FD 00 68 FC | 	wrlong	#0, result1
16a50     27 12 06 F6 | 	mov	arg01, #39
16a54     F8 6A B0 FD | 	call	#_printerror
16a58     5C 02 90 FD | 	jmp	#LR__1863
16a5c                 | LR__1850
16a5c     F8 4F BF FD | 	call	#_pop
16a60     FF 16 02 F6 | 	mov	arg03, result3
16a64     A7 FA 61 FC | 	wrlong	result1, fp
16a68     04 4E 05 F1 | 	add	fp, #4
16a6c     A7 FC 61 FC | 	wrlong	result2, fp
16a70     04 4E 05 F1 | 	add	fp, #4
16a74     A7 16 62 FC | 	wrlong	arg03, fp
16a78                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16a78     08 4E 85 F1 | 	sub	fp, #8
16a7c     2B 16 0E F2 | 	cmp	arg03, #43 wz
16a80     18 00 90 5D |  if_ne	jmp	#LR__1851
16a84     A7 12 02 FB | 	rdlong	arg01, fp
16a88     44 A9 BF FD | 	call	#_convertstring
16a8c     A7 FA 61 FC | 	wrlong	result1, fp
16a90     08 4E 05 F1 | 	add	fp, #8
16a94     A7 3E 68 FC | 	wrlong	#31, fp
16a98     08 4E 85 F1 | 	sub	fp, #8
16a9c                 | LR__1851
16a9c                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
16a9c     08 4E 05 F1 | 	add	fp, #8
16aa0     A7 16 02 FB | 	rdlong	arg03, fp
16aa4     08 4E 85 F1 | 	sub	fp, #8
16aa8     1F 16 0E F2 | 	cmp	arg03, #31 wz
16aac     3C 00 90 AD |  if_e	jmp	#LR__1852
16ab0     00 12 06 F6 | 	mov	arg01, #0
16ab4     70 FA B0 FD | 	call	#__system___getiolock_0540
16ab8     FD 12 02 F6 | 	mov	arg01, result1
16abc     28 A0 B0 FD | 	call	#__system___lockmem
16ac0     85 01 00 FF 
16ac4     3B 15 06 F6 | 	mov	arg02, ##@LR__5489
16ac8     00 12 06 F6 | 	mov	arg01, #0
16acc     00 16 06 F6 | 	mov	arg03, #0
16ad0     08 AD B0 FD | 	call	#__system___basic_print_string
16ad4     00 12 06 F6 | 	mov	arg01, #0
16ad8     4C FA B0 FD | 	call	#__system___getiolock_0540
16adc     FD 00 68 FC | 	wrlong	#0, result1
16ae0     0F 12 06 F6 | 	mov	arg01, #15
16ae4     68 6A B0 FD | 	call	#_printerror
16ae8     CC 01 90 FD | 	jmp	#LR__1863
16aec                 | LR__1852
16aec                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
16aec     A7 12 02 FB | 	rdlong	arg01, fp
16af0     01 14 06 F6 | 	mov	arg02, #1
16af4     6C C0 B0 FD | 	call	#__system__Left_S
16af8     FD 12 02 F6 | 	mov	arg01, result1
16afc     85 01 00 FF 
16b00     41 15 06 F6 | 	mov	arg02, ##@LR__5490
16b04     08 A0 B0 FD | 	call	#__system___string_cmp
16b08     00 FA 0D F2 | 	cmp	result1, #0 wz
16b0c     48 00 90 5D |  if_ne	jmp	#LR__1855
16b10     85 01 00 FF 
16b14     43 1F 06 F6 | 	mov	local01, ##@LR__5491
16b18     A7 16 02 FB | 	rdlong	arg03, fp
16b1c     0B 13 02 F6 | 	mov	arg01, arg03
16b20     09 21 02 F6 | 	mov	local02, arg01
16b24     97 06 48 FB | 	callpa	#(@LR__1854-@LR__1853)>>2,fcache_load_ptr_
16b28                 | LR__1853
16b28     10 FB C9 FA | 	rdbyte	result1, local02 wz
16b2c     01 20 06 51 |  if_ne	add	local02, #1
16b30     F4 FF 9F 5D |  if_ne	jmp	#LR__1853
16b34                 | LR__1854
16b34     09 21 82 F1 | 	sub	local02, arg01
16b38     10 15 02 F6 | 	mov	arg02, local02
16b3c     01 14 86 F1 | 	sub	arg02, #1
16b40     0B 13 02 F6 | 	mov	arg01, arg03
16b44     A4 C0 B0 FD | 	call	#__system__Right_S
16b48     FD 14 02 F6 | 	mov	arg02, result1
16b4c     0F 13 02 F6 | 	mov	arg01, local01
16b50     F0 9F B0 FD | 	call	#__system___string_concat
16b54     A7 FA 61 FC | 	wrlong	result1, fp
16b58                 | LR__1855
16b58                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
16b58     A7 12 02 FB | 	rdlong	arg01, fp
16b5c     01 14 06 F6 | 	mov	arg02, #1
16b60     00 C0 B0 FD | 	call	#__system__Left_S
16b64     FD 12 02 F6 | 	mov	arg01, result1
16b68     85 01 00 FF 
16b6c     46 15 06 F6 | 	mov	arg02, ##@LR__5492
16b70     9C 9F B0 FD | 	call	#__system___string_cmp
16b74     00 FA 0D F2 | 	cmp	result1, #0 wz
16b78     48 00 90 5D |  if_ne	jmp	#LR__1858
16b7c     85 01 00 FF 
16b80     48 1F 06 F6 | 	mov	local01, ##@LR__5493
16b84     A7 16 02 FB | 	rdlong	arg03, fp
16b88     0B 13 02 F6 | 	mov	arg01, arg03
16b8c     09 21 02 F6 | 	mov	local02, arg01
16b90     97 06 48 FB | 	callpa	#(@LR__1857-@LR__1856)>>2,fcache_load_ptr_
16b94                 | LR__1856
16b94     10 FB C9 FA | 	rdbyte	result1, local02 wz
16b98     01 20 06 51 |  if_ne	add	local02, #1
16b9c     F4 FF 9F 5D |  if_ne	jmp	#LR__1856
16ba0                 | LR__1857
16ba0     09 21 82 F1 | 	sub	local02, arg01
16ba4     10 15 02 F6 | 	mov	arg02, local02
16ba8     01 14 86 F1 | 	sub	arg02, #1
16bac     0B 13 02 F6 | 	mov	arg01, arg03
16bb0     38 C0 B0 FD | 	call	#__system__Right_S
16bb4     FD 14 02 F6 | 	mov	arg02, result1
16bb8     0F 13 02 F6 | 	mov	arg01, local01
16bbc     84 9F B0 FD | 	call	#__system___string_concat
16bc0     A7 FA 61 FC | 	wrlong	result1, fp
16bc4                 | LR__1858
16bc4     A7 12 02 FB | 	rdlong	arg01, fp
16bc8     B8 D2 B0 FD | 	call	#__system____builtin_atof
16bcc     1C 4E 05 F1 | 	add	fp, #28
16bd0     A7 FA 61 FC | 	wrlong	result1, fp
16bd4     1C 4E 85 F1 | 	sub	fp, #28
16bd8     A7 12 02 FB | 	rdlong	arg01, fp
16bdc     00 14 06 F6 | 	mov	arg02, #0
16be0     30 D1 B0 FD | 	call	#__system____builtin_atoi
16be4     18 4E 05 F1 | 	add	fp, #24
16be8     A7 FA 61 FC | 	wrlong	result1, fp
16bec                 | ' fval=val(t1.result.sresult)
16bec                 | ' ival=val%(t1.result.sresult)
16bec                 | ' if fval=ival then
16bec     04 4E 05 F1 | 	add	fp, #4
16bf0     A7 1E 02 FB | 	rdlong	local01, fp
16bf4     1C 4E 85 F1 | 	sub	fp, #28
16bf8     FD 12 52 F6 | 	abs	arg01, result1 wc
16bfc     1F 22 C6 C9 |  if_b	decod	local03, #31
16c00     00 22 06 36 |  if_ae	mov	local03, #0
16c04     90 C6 B0 FD | 	call	#__system___float_fromuns
16c08     11 FB 61 F5 | 	xor	result1, local03
16c0c     FD 14 02 F6 | 	mov	arg02, result1
16c10     0F 13 02 F6 | 	mov	arg01, local01
16c14     01 16 06 F6 | 	mov	arg03, #1
16c18     B4 CE B0 FD | 	call	#__system___float_cmp
16c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
16c20     20 00 90 5D |  if_ne	jmp	#LR__1859
16c24     18 4E 05 F1 | 	add	fp, #24
16c28     A7 1E 02 FB | 	rdlong	local01, fp
16c2c     18 4E 85 F1 | 	sub	fp, #24
16c30     A7 1E 62 FC | 	wrlong	local01, fp
16c34     08 4E 05 F1 | 	add	fp, #8
16c38     A7 38 68 FC | 	wrlong	#28, fp
16c3c     08 4E 85 F1 | 	sub	fp, #8
16c40     6C 00 90 FD | 	jmp	#LR__1862
16c44                 | LR__1859
16c44                 | '   if fval=0 andalso ival<>0 then
16c44     1C 4E 05 F1 | 	add	fp, #28
16c48     A7 12 02 FB | 	rdlong	arg01, fp
16c4c     1C 4E 85 F1 | 	sub	fp, #28
16c50     00 14 06 F6 | 	mov	arg02, #0
16c54     01 16 06 F6 | 	mov	arg03, #1
16c58     74 CE B0 FD | 	call	#__system___float_cmp
16c5c     00 FA 0D F2 | 	cmp	result1, #0 wz
16c60     30 00 90 5D |  if_ne	jmp	#LR__1860
16c64     18 4E 05 F1 | 	add	fp, #24
16c68     A7 1E 0A FB | 	rdlong	local01, fp wz
16c6c     18 4E 85 F1 | 	sub	fp, #24
16c70     20 00 90 AD |  if_e	jmp	#LR__1860
16c74     18 4E 05 F1 | 	add	fp, #24
16c78     A7 1E 02 FB | 	rdlong	local01, fp
16c7c     18 4E 85 F1 | 	sub	fp, #24
16c80     A7 1E 62 FC | 	wrlong	local01, fp
16c84     08 4E 05 F1 | 	add	fp, #8
16c88     A7 38 68 FC | 	wrlong	#28, fp
16c8c     08 4E 85 F1 | 	sub	fp, #8
16c90     1C 00 90 FD | 	jmp	#LR__1861
16c94                 | LR__1860
16c94     1C 4E 05 F1 | 	add	fp, #28
16c98     A7 1E 02 FB | 	rdlong	local01, fp
16c9c     1C 4E 85 F1 | 	sub	fp, #28
16ca0     A7 1E 62 FC | 	wrlong	local01, fp
16ca4     08 4E 05 F1 | 	add	fp, #8
16ca8     A7 3C 68 FC | 	wrlong	#30, fp
16cac     08 4E 85 F1 | 	sub	fp, #8
16cb0                 | LR__1861
16cb0                 | LR__1862
16cb0     A7 12 02 F6 | 	mov	arg01, fp
16cb4     38 4E BF FD | 	call	#_push
16cb8                 | LR__1863
16cb8     A7 F0 03 F6 | 	mov	ptra, fp
16cbc     B2 00 A0 FD | 	call	#popregs_
16cc0                 | _do_val_ret
16cc0     2D 00 64 FD | 	ret
16cc4                 | 
16cc4                 | ' 
16cc4                 | ' 
16cc4                 | ' sub do_hex
16cc4                 | _do_hex
16cc4     01 4A 05 F6 | 	mov	COUNT_, #1
16cc8     A8 00 A0 FD | 	call	#pushregs_
16ccc     18 F0 07 F1 | 	add	ptra, #24
16cd0     4A 00 00 FF 
16cd4     80 E4 05 F1 | 	add	objptr, ##38016
16cd8     F2 1E 02 FB | 	rdlong	local01, objptr
16cdc     0F 17 02 F6 | 	mov	arg03, local01
16ce0     01 16 66 F0 | 	shl	arg03, #1
16ce4     0F 17 02 F1 | 	add	arg03, local01
16ce8     02 16 66 F0 | 	shl	arg03, #2
16cec     03 00 00 FF 
16cf0     04 E4 85 F1 | 	sub	objptr, ##1540
16cf4     F2 16 02 F1 | 	add	arg03, objptr
16cf8     0B 17 02 FB | 	rdlong	arg03, arg03
16cfc     0C 4E 05 F1 | 	add	fp, #12
16d00     A7 16 62 FC | 	wrlong	arg03, fp
16d04                 | ' 
16d04                 | ' numpar=compiledline(lineptr_e).result.uresult
16d04                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
16d04     0C 4E 85 F1 | 	sub	fp, #12
16d08     03 16 16 F2 | 	cmp	arg03, #3 wc
16d0c     47 00 00 FF 
16d10     7C E4 85 F1 | 	sub	objptr, ##36476
16d14     0C 4E 05 C1 |  if_b	add	fp, #12
16d18     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16d1c     0C 4E 85 C1 |  if_b	sub	fp, #12
16d20     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1870
16d24     00 12 06 F6 | 	mov	arg01, #0
16d28     FC F7 B0 FD | 	call	#__system___getiolock_0540
16d2c     FD 12 02 F6 | 	mov	arg01, result1
16d30     B4 9D B0 FD | 	call	#__system___lockmem
16d34     85 01 00 FF 
16d38     4B 15 06 F6 | 	mov	arg02, ##@LR__5494
16d3c     00 12 06 F6 | 	mov	arg01, #0
16d40     00 16 06 F6 | 	mov	arg03, #0
16d44     94 AA B0 FD | 	call	#__system___basic_print_string
16d48     00 12 06 F6 | 	mov	arg01, #0
16d4c     D8 F7 B0 FD | 	call	#__system___getiolock_0540
16d50     FD 00 68 FC | 	wrlong	#0, result1
16d54     27 12 06 F6 | 	mov	arg01, #39
16d58     F4 67 B0 FD | 	call	#_printerror
16d5c     B8 00 90 FD | 	jmp	#LR__1873
16d60                 | LR__1870
16d60                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
16d60     0C 4E 05 F1 | 	add	fp, #12
16d64     A7 1E 02 FB | 	rdlong	local01, fp
16d68     0C 4E 85 F1 | 	sub	fp, #12
16d6c     02 1E 0E F2 | 	cmp	local01, #2 wz
16d70     38 00 90 5D |  if_ne	jmp	#LR__1871
16d74     E0 4C BF FD | 	call	#_pop
16d78     FF 1E 02 F6 | 	mov	local01, result3
16d7c     A7 FA 61 FC | 	wrlong	result1, fp
16d80     04 4E 05 F1 | 	add	fp, #4
16d84     A7 FC 61 FC | 	wrlong	result2, fp
16d88     04 4E 05 F1 | 	add	fp, #4
16d8c     A7 1E 62 FC | 	wrlong	local01, fp
16d90     08 4E 85 F1 | 	sub	fp, #8
16d94     A7 12 02 F6 | 	mov	arg01, fp
16d98     58 EE BF FD | 	call	#_converttoint
16d9c     14 4E 05 F1 | 	add	fp, #20
16da0     A7 FA 61 FC | 	wrlong	result1, fp
16da4     14 4E 85 F1 | 	sub	fp, #20
16da8     0C 00 90 FD | 	jmp	#LR__1872
16dac                 | LR__1871
16dac     14 4E 05 F1 | 	add	fp, #20
16db0     A7 10 68 FC | 	wrlong	#8, fp
16db4     14 4E 85 F1 | 	sub	fp, #20
16db8                 | LR__1872
16db8     9C 4C BF FD | 	call	#_pop
16dbc     FF 1E 02 F6 | 	mov	local01, result3
16dc0     A7 FA 61 FC | 	wrlong	result1, fp
16dc4     04 4E 05 F1 | 	add	fp, #4
16dc8     A7 FC 61 FC | 	wrlong	result2, fp
16dcc     04 4E 05 F1 | 	add	fp, #4
16dd0     A7 1E 62 FC | 	wrlong	local01, fp
16dd4     08 4E 85 F1 | 	sub	fp, #8
16dd8     A7 12 02 F6 | 	mov	arg01, fp
16ddc     14 EE BF FD | 	call	#_converttoint
16de0     10 4E 05 F1 | 	add	fp, #16
16de4     A7 FA 61 FC | 	wrlong	result1, fp
16de8     FD 12 02 F6 | 	mov	arg01, result1
16dec     04 4E 05 F1 | 	add	fp, #4
16df0     A7 14 02 FB | 	rdlong	arg02, fp
16df4     14 4E 85 F1 | 	sub	fp, #20
16df8     10 16 06 F6 | 	mov	arg03, #16
16dfc     B8 BF B0 FD | 	call	#__system__Number_S
16e00     A7 FA 61 FC | 	wrlong	result1, fp
16e04     08 4E 05 F1 | 	add	fp, #8
16e08     A7 3E 68 FC | 	wrlong	#31, fp
16e0c     08 4E 85 F1 | 	sub	fp, #8
16e10     A7 12 02 F6 | 	mov	arg01, fp
16e14     D8 4C BF FD | 	call	#_push
16e18                 | LR__1873
16e18     A7 F0 03 F6 | 	mov	ptra, fp
16e1c     B2 00 A0 FD | 	call	#popregs_
16e20                 | _do_hex_ret
16e20     2D 00 64 FD | 	ret
16e24                 | 
16e24                 | ' 
16e24                 | ' sub do_bin
16e24                 | _do_bin
16e24     01 4A 05 F6 | 	mov	COUNT_, #1
16e28     A8 00 A0 FD | 	call	#pushregs_
16e2c     18 F0 07 F1 | 	add	ptra, #24
16e30     4A 00 00 FF 
16e34     80 E4 05 F1 | 	add	objptr, ##38016
16e38     F2 1E 02 FB | 	rdlong	local01, objptr
16e3c     0F 17 02 F6 | 	mov	arg03, local01
16e40     01 16 66 F0 | 	shl	arg03, #1
16e44     0F 17 02 F1 | 	add	arg03, local01
16e48     02 16 66 F0 | 	shl	arg03, #2
16e4c     03 00 00 FF 
16e50     04 E4 85 F1 | 	sub	objptr, ##1540
16e54     F2 16 02 F1 | 	add	arg03, objptr
16e58     0B 17 02 FB | 	rdlong	arg03, arg03
16e5c     0C 4E 05 F1 | 	add	fp, #12
16e60     A7 16 62 FC | 	wrlong	arg03, fp
16e64                 | ' 
16e64                 | ' numpar=compiledline(lineptr_e).result.uresult
16e64                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
16e64     0C 4E 85 F1 | 	sub	fp, #12
16e68     03 16 16 F2 | 	cmp	arg03, #3 wc
16e6c     47 00 00 FF 
16e70     7C E4 85 F1 | 	sub	objptr, ##36476
16e74     0C 4E 05 C1 |  if_b	add	fp, #12
16e78     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16e7c     0C 4E 85 C1 |  if_b	sub	fp, #12
16e80     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1880
16e84     00 12 06 F6 | 	mov	arg01, #0
16e88     9C F6 B0 FD | 	call	#__system___getiolock_0540
16e8c     FD 12 02 F6 | 	mov	arg01, result1
16e90     54 9C B0 FD | 	call	#__system___lockmem
16e94     85 01 00 FF 
16e98     52 15 06 F6 | 	mov	arg02, ##@LR__5495
16e9c     00 12 06 F6 | 	mov	arg01, #0
16ea0     00 16 06 F6 | 	mov	arg03, #0
16ea4     34 A9 B0 FD | 	call	#__system___basic_print_string
16ea8     00 12 06 F6 | 	mov	arg01, #0
16eac     78 F6 B0 FD | 	call	#__system___getiolock_0540
16eb0     FD 00 68 FC | 	wrlong	#0, result1
16eb4     27 12 06 F6 | 	mov	arg01, #39
16eb8     94 66 B0 FD | 	call	#_printerror
16ebc     B8 00 90 FD | 	jmp	#LR__1883
16ec0                 | LR__1880
16ec0                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
16ec0     0C 4E 05 F1 | 	add	fp, #12
16ec4     A7 1E 02 FB | 	rdlong	local01, fp
16ec8     0C 4E 85 F1 | 	sub	fp, #12
16ecc     02 1E 0E F2 | 	cmp	local01, #2 wz
16ed0     38 00 90 5D |  if_ne	jmp	#LR__1881
16ed4     80 4B BF FD | 	call	#_pop
16ed8     FF 1E 02 F6 | 	mov	local01, result3
16edc     A7 FA 61 FC | 	wrlong	result1, fp
16ee0     04 4E 05 F1 | 	add	fp, #4
16ee4     A7 FC 61 FC | 	wrlong	result2, fp
16ee8     04 4E 05 F1 | 	add	fp, #4
16eec     A7 1E 62 FC | 	wrlong	local01, fp
16ef0     08 4E 85 F1 | 	sub	fp, #8
16ef4     A7 12 02 F6 | 	mov	arg01, fp
16ef8     F8 EC BF FD | 	call	#_converttoint
16efc     14 4E 05 F1 | 	add	fp, #20
16f00     A7 FA 61 FC | 	wrlong	result1, fp
16f04     14 4E 85 F1 | 	sub	fp, #20
16f08     0C 00 90 FD | 	jmp	#LR__1882
16f0c                 | LR__1881
16f0c     14 4E 05 F1 | 	add	fp, #20
16f10     A7 00 68 FC | 	wrlong	#0, fp
16f14     14 4E 85 F1 | 	sub	fp, #20
16f18                 | LR__1882
16f18     3C 4B BF FD | 	call	#_pop
16f1c     FF 1E 02 F6 | 	mov	local01, result3
16f20     A7 FA 61 FC | 	wrlong	result1, fp
16f24     04 4E 05 F1 | 	add	fp, #4
16f28     A7 FC 61 FC | 	wrlong	result2, fp
16f2c     04 4E 05 F1 | 	add	fp, #4
16f30     A7 1E 62 FC | 	wrlong	local01, fp
16f34     08 4E 85 F1 | 	sub	fp, #8
16f38     A7 12 02 F6 | 	mov	arg01, fp
16f3c     B4 EC BF FD | 	call	#_converttoint
16f40     10 4E 05 F1 | 	add	fp, #16
16f44     A7 FA 61 FC | 	wrlong	result1, fp
16f48     FD 12 02 F6 | 	mov	arg01, result1
16f4c     04 4E 05 F1 | 	add	fp, #4
16f50     A7 14 02 FB | 	rdlong	arg02, fp
16f54     14 4E 85 F1 | 	sub	fp, #20
16f58     02 16 06 F6 | 	mov	arg03, #2
16f5c     58 BE B0 FD | 	call	#__system__Number_S
16f60     A7 FA 61 FC | 	wrlong	result1, fp
16f64     08 4E 05 F1 | 	add	fp, #8
16f68     A7 3E 68 FC | 	wrlong	#31, fp
16f6c     08 4E 85 F1 | 	sub	fp, #8
16f70     A7 12 02 F6 | 	mov	arg01, fp
16f74     78 4B BF FD | 	call	#_push
16f78                 | LR__1883
16f78     A7 F0 03 F6 | 	mov	ptra, fp
16f7c     B2 00 A0 FD | 	call	#popregs_
16f80                 | _do_bin_ret
16f80     2D 00 64 FD | 	ret
16f84                 | 
16f84                 | ' 
16f84                 | ' sub do_cos
16f84                 | _do_cos
16f84     01 4A 05 F6 | 	mov	COUNT_, #1
16f88     A8 00 A0 FD | 	call	#pushregs_
16f8c     10 F0 07 F1 | 	add	ptra, #16
16f90     4A 00 00 FF 
16f94     80 E4 05 F1 | 	add	objptr, ##38016
16f98     F2 1E 02 FB | 	rdlong	local01, objptr
16f9c     0F 17 02 F6 | 	mov	arg03, local01
16fa0     01 16 66 F0 | 	shl	arg03, #1
16fa4     0F 17 02 F1 | 	add	arg03, local01
16fa8     02 16 66 F0 | 	shl	arg03, #2
16fac     03 00 00 FF 
16fb0     04 E4 85 F1 | 	sub	objptr, ##1540
16fb4     F2 16 02 F1 | 	add	arg03, objptr
16fb8     0B 17 02 FB | 	rdlong	arg03, arg03
16fbc     0C 4E 05 F1 | 	add	fp, #12
16fc0     A7 16 62 FC | 	wrlong	arg03, fp
16fc4                 | ' 
16fc4                 | ' numpar=compiledline(lineptr_e).result.uresult
16fc4                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
16fc4     0C 4E 85 F1 | 	sub	fp, #12
16fc8     02 16 16 F2 | 	cmp	arg03, #2 wc
16fcc     47 00 00 FF 
16fd0     7C E4 85 F1 | 	sub	objptr, ##36476
16fd4     0C 4E 05 C1 |  if_b	add	fp, #12
16fd8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16fdc     0C 4E 85 C1 |  if_b	sub	fp, #12
16fe0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1890
16fe4     00 12 06 F6 | 	mov	arg01, #0
16fe8     3C F5 B0 FD | 	call	#__system___getiolock_0540
16fec     FD 12 02 F6 | 	mov	arg01, result1
16ff0     F4 9A B0 FD | 	call	#__system___lockmem
16ff4     85 01 00 FF 
16ff8     59 15 06 F6 | 	mov	arg02, ##@LR__5496
16ffc     00 12 06 F6 | 	mov	arg01, #0
17000     00 16 06 F6 | 	mov	arg03, #0
17004     D4 A7 B0 FD | 	call	#__system___basic_print_string
17008     00 12 06 F6 | 	mov	arg01, #0
1700c     18 F5 B0 FD | 	call	#__system___getiolock_0540
17010     FD 00 68 FC | 	wrlong	#0, result1
17014     27 12 06 F6 | 	mov	arg01, #39
17018     34 65 B0 FD | 	call	#_printerror
1701c     78 00 90 FD | 	jmp	#LR__1891
17020                 | LR__1890
17020     34 4A BF FD | 	call	#_pop
17024     A7 FA 61 FC | 	wrlong	result1, fp
17028     04 4E 05 F1 | 	add	fp, #4
1702c     A7 FC 61 FC | 	wrlong	result2, fp
17030     04 4E 05 F1 | 	add	fp, #4
17034     A7 FE 61 FC | 	wrlong	result3, fp
17038     08 4E 85 F1 | 	sub	fp, #8
1703c     51 00 00 FF 
17040     B8 E5 05 F1 | 	add	objptr, ##41912
17044     F2 1E 02 FB | 	rdlong	local01, objptr
17048     51 00 00 FF 
1704c     B8 E5 85 F1 | 	sub	objptr, ##41912
17050     A7 12 02 F6 | 	mov	arg01, fp
17054     58 EC BF FD | 	call	#_converttofloat
17058     FD 14 02 F6 | 	mov	arg02, result1
1705c     0F 13 02 F6 | 	mov	arg01, local01
17060     38 C6 B0 FD | 	call	#__system___float_mul
17064     FD 14 02 F6 | 	mov	arg02, result1
17068     87 E4 1F FF 
1706c     DB 13 06 F6 | 	mov	arg01, ##1070141403
17070     1F 14 E6 F4 | 	bitnot	arg02, #31
17074     54 C2 B0 FD | 	call	#__system___float_add
17078     FD 12 02 F6 | 	mov	arg01, result1
1707c     58 CF B0 FD | 	call	#__system____builtin_sinf
17080     A7 FA 61 FC | 	wrlong	result1, fp
17084     08 4E 05 F1 | 	add	fp, #8
17088     A7 3C 68 FC | 	wrlong	#30, fp
1708c     08 4E 85 F1 | 	sub	fp, #8
17090     A7 12 02 F6 | 	mov	arg01, fp
17094     58 4A BF FD | 	call	#_push
17098                 | LR__1891
17098     A7 F0 03 F6 | 	mov	ptra, fp
1709c     B2 00 A0 FD | 	call	#popregs_
170a0                 | _do_cos_ret
170a0     2D 00 64 FD | 	ret
170a4                 | 
170a4                 | ' 
170a4                 | ' sub do_tan
170a4                 | _do_tan
170a4     01 4A 05 F6 | 	mov	COUNT_, #1
170a8     A8 00 A0 FD | 	call	#pushregs_
170ac     10 F0 07 F1 | 	add	ptra, #16
170b0     4A 00 00 FF 
170b4     80 E4 05 F1 | 	add	objptr, ##38016
170b8     F2 1E 02 FB | 	rdlong	local01, objptr
170bc     0F 17 02 F6 | 	mov	arg03, local01
170c0     01 16 66 F0 | 	shl	arg03, #1
170c4     0F 17 02 F1 | 	add	arg03, local01
170c8     02 16 66 F0 | 	shl	arg03, #2
170cc     03 00 00 FF 
170d0     04 E4 85 F1 | 	sub	objptr, ##1540
170d4     F2 16 02 F1 | 	add	arg03, objptr
170d8     0B 17 02 FB | 	rdlong	arg03, arg03
170dc     0C 4E 05 F1 | 	add	fp, #12
170e0     A7 16 62 FC | 	wrlong	arg03, fp
170e4                 | ' 
170e4                 | ' numpar=compiledline(lineptr_e).result.uresult
170e4                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
170e4     0C 4E 85 F1 | 	sub	fp, #12
170e8     02 16 16 F2 | 	cmp	arg03, #2 wc
170ec     47 00 00 FF 
170f0     7C E4 85 F1 | 	sub	objptr, ##36476
170f4     0C 4E 05 C1 |  if_b	add	fp, #12
170f8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
170fc     0C 4E 85 C1 |  if_b	sub	fp, #12
17100     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1900
17104     00 12 06 F6 | 	mov	arg01, #0
17108     1C F4 B0 FD | 	call	#__system___getiolock_0540
1710c     FD 12 02 F6 | 	mov	arg01, result1
17110     D4 99 B0 FD | 	call	#__system___lockmem
17114     85 01 00 FF 
17118     5F 15 06 F6 | 	mov	arg02, ##@LR__5497
1711c     00 12 06 F6 | 	mov	arg01, #0
17120     00 16 06 F6 | 	mov	arg03, #0
17124     B4 A6 B0 FD | 	call	#__system___basic_print_string
17128     00 12 06 F6 | 	mov	arg01, #0
1712c     F8 F3 B0 FD | 	call	#__system___getiolock_0540
17130     FD 00 68 FC | 	wrlong	#0, result1
17134     27 12 06 F6 | 	mov	arg01, #39
17138     14 64 B0 FD | 	call	#_printerror
1713c     64 00 90 FD | 	jmp	#LR__1901
17140                 | LR__1900
17140     14 49 BF FD | 	call	#_pop
17144     A7 FA 61 FC | 	wrlong	result1, fp
17148     04 4E 05 F1 | 	add	fp, #4
1714c     A7 FC 61 FC | 	wrlong	result2, fp
17150     04 4E 05 F1 | 	add	fp, #4
17154     A7 FE 61 FC | 	wrlong	result3, fp
17158     08 4E 85 F1 | 	sub	fp, #8
1715c     51 00 00 FF 
17160     B8 E5 05 F1 | 	add	objptr, ##41912
17164     F2 1E 02 FB | 	rdlong	local01, objptr
17168     51 00 00 FF 
1716c     B8 E5 85 F1 | 	sub	objptr, ##41912
17170     A7 12 02 F6 | 	mov	arg01, fp
17174     38 EB BF FD | 	call	#_converttofloat
17178     FD 14 02 F6 | 	mov	arg02, result1
1717c     0F 13 02 F6 | 	mov	arg01, local01
17180     18 C5 B0 FD | 	call	#__system___float_mul
17184     FD 12 02 F6 | 	mov	arg01, result1
17188     98 CF B0 FD | 	call	#__system____builtin_tanf
1718c     A7 FA 61 FC | 	wrlong	result1, fp
17190     08 4E 05 F1 | 	add	fp, #8
17194     A7 3C 68 FC | 	wrlong	#30, fp
17198     08 4E 85 F1 | 	sub	fp, #8
1719c     A7 12 02 F6 | 	mov	arg01, fp
171a0     4C 49 BF FD | 	call	#_push
171a4                 | LR__1901
171a4     A7 F0 03 F6 | 	mov	ptra, fp
171a8     B2 00 A0 FD | 	call	#popregs_
171ac                 | _do_tan_ret
171ac     2D 00 64 FD | 	ret
171b0                 | 
171b0                 | ' 
171b0                 | ' sub do_asin
171b0                 | _do_asin
171b0     01 4A 05 F6 | 	mov	COUNT_, #1
171b4     A8 00 A0 FD | 	call	#pushregs_
171b8     10 F0 07 F1 | 	add	ptra, #16
171bc     4A 00 00 FF 
171c0     80 E4 05 F1 | 	add	objptr, ##38016
171c4     F2 1E 02 FB | 	rdlong	local01, objptr
171c8     0F 17 02 F6 | 	mov	arg03, local01
171cc     01 16 66 F0 | 	shl	arg03, #1
171d0     0F 17 02 F1 | 	add	arg03, local01
171d4     02 16 66 F0 | 	shl	arg03, #2
171d8     03 00 00 FF 
171dc     04 E4 85 F1 | 	sub	objptr, ##1540
171e0     F2 16 02 F1 | 	add	arg03, objptr
171e4     0B 17 02 FB | 	rdlong	arg03, arg03
171e8     0C 4E 05 F1 | 	add	fp, #12
171ec     A7 16 62 FC | 	wrlong	arg03, fp
171f0                 | ' 
171f0                 | ' numpar=compiledline(lineptr_e).result.uresult
171f0                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
171f0     0C 4E 85 F1 | 	sub	fp, #12
171f4     02 16 16 F2 | 	cmp	arg03, #2 wc
171f8     47 00 00 FF 
171fc     7C E4 85 F1 | 	sub	objptr, ##36476
17200     0C 4E 05 C1 |  if_b	add	fp, #12
17204     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
17208     0C 4E 85 C1 |  if_b	sub	fp, #12
1720c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1910
17210     00 12 06 F6 | 	mov	arg01, #0
17214     10 F3 B0 FD | 	call	#__system___getiolock_0540
17218     FD 12 02 F6 | 	mov	arg01, result1
1721c     C8 98 B0 FD | 	call	#__system___lockmem
17220     85 01 00 FF 
17224     65 15 06 F6 | 	mov	arg02, ##@LR__5498
17228     00 12 06 F6 | 	mov	arg01, #0
1722c     00 16 06 F6 | 	mov	arg03, #0
17230     A8 A5 B0 FD | 	call	#__system___basic_print_string
17234     00 12 06 F6 | 	mov	arg01, #0
17238     EC F2 B0 FD | 	call	#__system___getiolock_0540
1723c     FD 00 68 FC | 	wrlong	#0, result1
17240     27 12 06 F6 | 	mov	arg01, #39
17244     08 63 B0 FD | 	call	#_printerror
17248     64 00 90 FD | 	jmp	#LR__1911
1724c                 | LR__1910
1724c     08 48 BF FD | 	call	#_pop
17250     FF 1E 02 F6 | 	mov	local01, result3
17254     A7 FA 61 FC | 	wrlong	result1, fp
17258     04 4E 05 F1 | 	add	fp, #4
1725c     A7 FC 61 FC | 	wrlong	result2, fp
17260     04 4E 05 F1 | 	add	fp, #4
17264     A7 1E 62 FC | 	wrlong	local01, fp
17268     08 4E 85 F1 | 	sub	fp, #8
1726c     A7 12 02 F6 | 	mov	arg01, fp
17270     3C EA BF FD | 	call	#_converttofloat
17274     FD 12 02 F6 | 	mov	arg01, result1
17278     F0 CE B0 FD | 	call	#__system____builtin_asinf
1727c     FD 12 02 F6 | 	mov	arg01, result1
17280     51 00 00 FF 
17284     BC E5 05 F1 | 	add	objptr, ##41916
17288     F2 14 02 FB | 	rdlong	arg02, objptr
1728c     51 00 00 FF 
17290     BC E5 85 F1 | 	sub	objptr, ##41916
17294     04 C4 B0 FD | 	call	#__system___float_mul
17298     A7 FA 61 FC | 	wrlong	result1, fp
1729c     08 4E 05 F1 | 	add	fp, #8
172a0     A7 3C 68 FC | 	wrlong	#30, fp
172a4     08 4E 85 F1 | 	sub	fp, #8
172a8     A7 12 02 F6 | 	mov	arg01, fp
172ac     40 48 BF FD | 	call	#_push
172b0                 | LR__1911
172b0     A7 F0 03 F6 | 	mov	ptra, fp
172b4     B2 00 A0 FD | 	call	#popregs_
172b8                 | _do_asin_ret
172b8     2D 00 64 FD | 	ret
172bc                 | 
172bc                 | ' 
172bc                 | ' sub do_acos
172bc                 | _do_acos
172bc     01 4A 05 F6 | 	mov	COUNT_, #1
172c0     A8 00 A0 FD | 	call	#pushregs_
172c4     10 F0 07 F1 | 	add	ptra, #16
172c8     4A 00 00 FF 
172cc     80 E4 05 F1 | 	add	objptr, ##38016
172d0     F2 1E 02 FB | 	rdlong	local01, objptr
172d4     0F 17 02 F6 | 	mov	arg03, local01
172d8     01 16 66 F0 | 	shl	arg03, #1
172dc     0F 17 02 F1 | 	add	arg03, local01
172e0     02 16 66 F0 | 	shl	arg03, #2
172e4     03 00 00 FF 
172e8     04 E4 85 F1 | 	sub	objptr, ##1540
172ec     F2 16 02 F1 | 	add	arg03, objptr
172f0     0B 17 02 FB | 	rdlong	arg03, arg03
172f4     0C 4E 05 F1 | 	add	fp, #12
172f8     A7 16 62 FC | 	wrlong	arg03, fp
172fc                 | ' 
172fc                 | ' numpar=compiledline(lineptr_e).result.uresult
172fc                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
172fc     0C 4E 85 F1 | 	sub	fp, #12
17300     02 16 16 F2 | 	cmp	arg03, #2 wc
17304     47 00 00 FF 
17308     7C E4 85 F1 | 	sub	objptr, ##36476
1730c     0C 4E 05 C1 |  if_b	add	fp, #12
17310     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
17314     0C 4E 85 C1 |  if_b	sub	fp, #12
17318     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1920
1731c     00 12 06 F6 | 	mov	arg01, #0
17320     04 F2 B0 FD | 	call	#__system___getiolock_0540
17324     FD 12 02 F6 | 	mov	arg01, result1
17328     BC 97 B0 FD | 	call	#__system___lockmem
1732c     85 01 00 FF 
17330     6C 15 06 F6 | 	mov	arg02, ##@LR__5499
17334     00 12 06 F6 | 	mov	arg01, #0
17338     00 16 06 F6 | 	mov	arg03, #0
1733c     9C A4 B0 FD | 	call	#__system___basic_print_string
17340     00 12 06 F6 | 	mov	arg01, #0
17344     E0 F1 B0 FD | 	call	#__system___getiolock_0540
17348     FD 00 68 FC | 	wrlong	#0, result1
1734c     27 12 06 F6 | 	mov	arg01, #39
17350     FC 61 B0 FD | 	call	#_printerror
17354     64 00 90 FD | 	jmp	#LR__1921
17358                 | LR__1920
17358     FC 46 BF FD | 	call	#_pop
1735c     FF 1E 02 F6 | 	mov	local01, result3
17360     A7 FA 61 FC | 	wrlong	result1, fp
17364     04 4E 05 F1 | 	add	fp, #4
17368     A7 FC 61 FC | 	wrlong	result2, fp
1736c     04 4E 05 F1 | 	add	fp, #4
17370     A7 1E 62 FC | 	wrlong	local01, fp
17374     08 4E 85 F1 | 	sub	fp, #8
17378     A7 12 02 F6 | 	mov	arg01, fp
1737c     30 E9 BF FD | 	call	#_converttofloat
17380     FD 12 02 F6 | 	mov	arg01, result1
17384     30 CE B0 FD | 	call	#__system____builtin_acosf
17388     FD 12 02 F6 | 	mov	arg01, result1
1738c     51 00 00 FF 
17390     BC E5 05 F1 | 	add	objptr, ##41916
17394     F2 14 02 FB | 	rdlong	arg02, objptr
17398     51 00 00 FF 
1739c     BC E5 85 F1 | 	sub	objptr, ##41916
173a0     F8 C2 B0 FD | 	call	#__system___float_mul
173a4     A7 FA 61 FC | 	wrlong	result1, fp
173a8     08 4E 05 F1 | 	add	fp, #8
173ac     A7 3C 68 FC | 	wrlong	#30, fp
173b0     08 4E 85 F1 | 	sub	fp, #8
173b4     A7 12 02 F6 | 	mov	arg01, fp
173b8     34 47 BF FD | 	call	#_push
173bc                 | LR__1921
173bc     A7 F0 03 F6 | 	mov	ptra, fp
173c0     B2 00 A0 FD | 	call	#popregs_
173c4                 | _do_acos_ret
173c4     2D 00 64 FD | 	ret
173c8                 | 
173c8                 | ' 
173c8                 | ' sub do_atn
173c8                 | _do_atn
173c8     01 4A 05 F6 | 	mov	COUNT_, #1
173cc     A8 00 A0 FD | 	call	#pushregs_
173d0     10 F0 07 F1 | 	add	ptra, #16
173d4     4A 00 00 FF 
173d8     80 E4 05 F1 | 	add	objptr, ##38016
173dc     F2 1E 02 FB | 	rdlong	local01, objptr
173e0     0F 17 02 F6 | 	mov	arg03, local01
173e4     01 16 66 F0 | 	shl	arg03, #1
173e8     0F 17 02 F1 | 	add	arg03, local01
173ec     02 16 66 F0 | 	shl	arg03, #2
173f0     03 00 00 FF 
173f4     04 E4 85 F1 | 	sub	objptr, ##1540
173f8     F2 16 02 F1 | 	add	arg03, objptr
173fc     0B 17 02 FB | 	rdlong	arg03, arg03
17400     0C 4E 05 F1 | 	add	fp, #12
17404     A7 16 62 FC | 	wrlong	arg03, fp
17408                 | ' 
17408                 | ' numpar=compiledline(lineptr_e).result.uresult
17408                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
17408     0C 4E 85 F1 | 	sub	fp, #12
1740c     02 16 16 F2 | 	cmp	arg03, #2 wc
17410     47 00 00 FF 
17414     7C E4 85 F1 | 	sub	objptr, ##36476
17418     0C 4E 05 C1 |  if_b	add	fp, #12
1741c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
17420     0C 4E 85 C1 |  if_b	sub	fp, #12
17424     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1930
17428     00 12 06 F6 | 	mov	arg01, #0
1742c     F8 F0 B0 FD | 	call	#__system___getiolock_0540
17430     FD 12 02 F6 | 	mov	arg01, result1
17434     B0 96 B0 FD | 	call	#__system___lockmem
17438     85 01 00 FF 
1743c     73 15 06 F6 | 	mov	arg02, ##@LR__5500
17440     00 12 06 F6 | 	mov	arg01, #0
17444     00 16 06 F6 | 	mov	arg03, #0
17448     90 A3 B0 FD | 	call	#__system___basic_print_string
1744c     00 12 06 F6 | 	mov	arg01, #0
17450     D4 F0 B0 FD | 	call	#__system___getiolock_0540
17454     FD 00 68 FC | 	wrlong	#0, result1
17458     27 12 06 F6 | 	mov	arg01, #39
1745c     F0 60 B0 FD | 	call	#_printerror
17460     6C 00 90 FD | 	jmp	#LR__1931
17464                 | LR__1930
17464     F0 45 BF FD | 	call	#_pop
17468     FF 1E 02 F6 | 	mov	local01, result3
1746c     A7 FA 61 FC | 	wrlong	result1, fp
17470     04 4E 05 F1 | 	add	fp, #4
17474     A7 FC 61 FC | 	wrlong	result2, fp
17478     04 4E 05 F1 | 	add	fp, #4
1747c     A7 1E 62 FC | 	wrlong	local01, fp
17480     08 4E 85 F1 | 	sub	fp, #8
17484     A7 12 02 F6 | 	mov	arg01, fp
17488     24 E8 BF FD | 	call	#_converttofloat
1748c     FD 12 02 F6 | 	mov	arg01, result1
17490     00 C0 1F FF 
17494     00 14 06 F6 | 	mov	arg02, ##1065353216
17498     68 CD B0 FD | 	call	#__system____builtin_atan2f
1749c     FD 12 02 F6 | 	mov	arg01, result1
174a0     51 00 00 FF 
174a4     BC E5 05 F1 | 	add	objptr, ##41916
174a8     F2 14 02 FB | 	rdlong	arg02, objptr
174ac     51 00 00 FF 
174b0     BC E5 85 F1 | 	sub	objptr, ##41916
174b4     E4 C1 B0 FD | 	call	#__system___float_mul
174b8     A7 FA 61 FC | 	wrlong	result1, fp
174bc     08 4E 05 F1 | 	add	fp, #8
174c0     A7 3C 68 FC | 	wrlong	#30, fp
174c4     08 4E 85 F1 | 	sub	fp, #8
174c8     A7 12 02 F6 | 	mov	arg01, fp
174cc     20 46 BF FD | 	call	#_push
174d0                 | LR__1931
174d0     A7 F0 03 F6 | 	mov	ptra, fp
174d4     B2 00 A0 FD | 	call	#popregs_
174d8                 | _do_atn_ret
174d8     2D 00 64 FD | 	ret
174dc                 | 
174dc                 | ' 
174dc                 | ' sub do_sqr
174dc                 | _do_sqr
174dc     01 4A 05 F6 | 	mov	COUNT_, #1
174e0     A8 00 A0 FD | 	call	#pushregs_
174e4     10 F0 07 F1 | 	add	ptra, #16
174e8     4A 00 00 FF 
174ec     80 E4 05 F1 | 	add	objptr, ##38016
174f0     F2 1E 02 FB | 	rdlong	local01, objptr
174f4     0F 17 02 F6 | 	mov	arg03, local01
174f8     01 16 66 F0 | 	shl	arg03, #1
174fc     0F 17 02 F1 | 	add	arg03, local01
17500     02 16 66 F0 | 	shl	arg03, #2
17504     03 00 00 FF 
17508     04 E4 85 F1 | 	sub	objptr, ##1540
1750c     F2 16 02 F1 | 	add	arg03, objptr
17510     0B 17 02 FB | 	rdlong	arg03, arg03
17514     0C 4E 05 F1 | 	add	fp, #12
17518     A7 16 62 FC | 	wrlong	arg03, fp
1751c                 | ' 
1751c                 | ' numpar=compiledline(lineptr_e).result.uresult
1751c                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
1751c     0C 4E 85 F1 | 	sub	fp, #12
17520     02 16 16 F2 | 	cmp	arg03, #2 wc
17524     47 00 00 FF 
17528     7C E4 85 F1 | 	sub	objptr, ##36476
1752c     0C 4E 05 C1 |  if_b	add	fp, #12
17530     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
17534     0C 4E 85 C1 |  if_b	sub	fp, #12
17538     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1940
1753c     00 12 06 F6 | 	mov	arg01, #0
17540     E4 EF B0 FD | 	call	#__system___getiolock_0540
17544     FD 12 02 F6 | 	mov	arg01, result1
17548     9C 95 B0 FD | 	call	#__system___lockmem
1754c     85 01 00 FF 
17550     79 15 06 F6 | 	mov	arg02, ##@LR__5501
17554     00 12 06 F6 | 	mov	arg01, #0
17558     00 16 06 F6 | 	mov	arg03, #0
1755c     7C A2 B0 FD | 	call	#__system___basic_print_string
17560     00 12 06 F6 | 	mov	arg01, #0
17564     C0 EF B0 FD | 	call	#__system___getiolock_0540
17568     FD 00 68 FC | 	wrlong	#0, result1
1756c     27 12 06 F6 | 	mov	arg01, #39
17570     DC 5F B0 FD | 	call	#_printerror
17574     48 00 90 FD | 	jmp	#LR__1941
17578                 | LR__1940
17578     DC 44 BF FD | 	call	#_pop
1757c     FF 1E 02 F6 | 	mov	local01, result3
17580     A7 FA 61 FC | 	wrlong	result1, fp
17584     04 4E 05 F1 | 	add	fp, #4
17588     A7 FC 61 FC | 	wrlong	result2, fp
1758c     04 4E 05 F1 | 	add	fp, #4
17590     A7 1E 62 FC | 	wrlong	local01, fp
17594     08 4E 85 F1 | 	sub	fp, #8
17598     A7 12 02 F6 | 	mov	arg01, fp
1759c     10 E7 BF FD | 	call	#_converttofloat
175a0     FD 12 02 F6 | 	mov	arg01, result1
175a4     1C C0 B0 FD | 	call	#__system___float_sqrt
175a8     A7 FA 61 FC | 	wrlong	result1, fp
175ac     08 4E 05 F1 | 	add	fp, #8
175b0     A7 3C 68 FC | 	wrlong	#30, fp
175b4     08 4E 85 F1 | 	sub	fp, #8
175b8     A7 12 02 F6 | 	mov	arg01, fp
175bc     30 45 BF FD | 	call	#_push
175c0                 | LR__1941
175c0     A7 F0 03 F6 | 	mov	ptra, fp
175c4     B2 00 A0 FD | 	call	#popregs_
175c8                 | _do_sqr_ret
175c8     2D 00 64 FD | 	ret
175cc                 | 
175cc                 | ' 
175cc                 | ' sub do_stick
175cc                 | _do_stick
175cc     01 4A 05 F6 | 	mov	COUNT_, #1
175d0     A8 00 A0 FD | 	call	#pushregs_
175d4     10 F0 07 F1 | 	add	ptra, #16
175d8     4A 00 00 FF 
175dc     80 E4 05 F1 | 	add	objptr, ##38016
175e0     F2 1E 02 FB | 	rdlong	local01, objptr
175e4     0F 17 02 F6 | 	mov	arg03, local01
175e8     01 16 66 F0 | 	shl	arg03, #1
175ec     0F 17 02 F1 | 	add	arg03, local01
175f0     02 16 66 F0 | 	shl	arg03, #2
175f4     03 00 00 FF 
175f8     04 E4 85 F1 | 	sub	objptr, ##1540
175fc     F2 16 02 F1 | 	add	arg03, objptr
17600     0B 17 02 FB | 	rdlong	arg03, arg03
17604     0C 4E 05 F1 | 	add	fp, #12
17608     A7 16 62 FC | 	wrlong	arg03, fp
1760c                 | ' 
1760c                 | ' numpar=compiledline(lineptr_e).result.uresult
1760c                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1760c     0C 4E 85 F1 | 	sub	fp, #12
17610     02 16 16 F2 | 	cmp	arg03, #2 wc
17614     47 00 00 FF 
17618     7C E4 85 F1 | 	sub	objptr, ##36476
1761c     3C 00 90 CD |  if_b	jmp	#LR__1950
17620     00 12 06 F6 | 	mov	arg01, #0
17624     00 EF B0 FD | 	call	#__system___getiolock_0540
17628     FD 12 02 F6 | 	mov	arg01, result1
1762c     B8 94 B0 FD | 	call	#__system___lockmem
17630     85 01 00 FF 
17634     7F 15 06 F6 | 	mov	arg02, ##@LR__5502
17638     00 12 06 F6 | 	mov	arg01, #0
1763c     00 16 06 F6 | 	mov	arg03, #0
17640     98 A1 B0 FD | 	call	#__system___basic_print_string
17644     00 12 06 F6 | 	mov	arg01, #0
17648     DC EE B0 FD | 	call	#__system___getiolock_0540
1764c     FD 00 68 FC | 	wrlong	#0, result1
17650     27 12 06 F6 | 	mov	arg01, #39
17654     F8 5E B0 FD | 	call	#_printerror
17658     E8 00 90 FD | 	jmp	#LR__1954
1765c                 | LR__1950
1765c                 | ' 
1765c                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1765c     0C 4E 05 F1 | 	add	fp, #12
17660     A7 FE 09 FB | 	rdlong	result3, fp wz
17664     0C 4E 85 F1 | 	sub	fp, #12
17668     30 00 90 5D |  if_ne	jmp	#LR__1951
1766c     51 00 00 FF 
17670     2C E5 05 F1 | 	add	objptr, ##41772
17674     F2 1E 02 FB | 	rdlong	local01, objptr
17678     51 00 00 FF 
1767c     2C E5 85 F1 | 	sub	objptr, ##41772
17680     A7 1E 62 FC | 	wrlong	local01, fp
17684     08 4E 05 F1 | 	add	fp, #8
17688     A7 3A 68 FC | 	wrlong	#29, fp
1768c     08 4E 85 F1 | 	sub	fp, #8
17690     A7 12 02 F6 | 	mov	arg01, fp
17694     58 44 BF FD | 	call	#_push
17698     A8 00 90 FD | 	jmp	#LR__1954
1769c                 | LR__1951
1769c     B8 43 BF FD | 	call	#_pop
176a0     A7 FA 61 FC | 	wrlong	result1, fp
176a4     04 4E 05 F1 | 	add	fp, #4
176a8     A7 FC 61 FC | 	wrlong	result2, fp
176ac     04 4E 05 F1 | 	add	fp, #4
176b0     A7 FE 61 FC | 	wrlong	result3, fp
176b4                 | ' 
176b4                 | ' t1=pop()
176b4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
176b4     08 4E 85 F1 | 	sub	fp, #8
176b8     1C FE 0D F2 | 	cmp	result3, #28 wz
176bc     08 4E 05 51 |  if_ne	add	fp, #8
176c0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
176c4     08 4E 85 51 |  if_ne	sub	fp, #8
176c8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
176cc     6C 00 90 5D |  if_ne	jmp	#LR__1953
176d0     A7 1E 02 FB | 	rdlong	local01, fp
176d4     52 00 00 FF 
176d8     08 E4 05 F1 | 	add	objptr, ##41992
176dc     F2 1E 62 FC | 	wrlong	local01, objptr
176e0                 | '   q=t1.result.uresult
176e0                 | '   if q<7 then 
176e0     52 00 00 FF 
176e4     08 E4 85 F1 | 	sub	objptr, ##41992
176e8     07 1E 56 F2 | 	cmps	local01, #7 wc
176ec     40 00 90 3D |  if_ae	jmp	#LR__1952
176f0     52 00 00 FF 
176f4     08 E4 05 F1 | 	add	objptr, ##41992
176f8     F2 1E 02 FB | 	rdlong	local01, objptr
176fc     02 1E 66 F0 | 	shl	local01, #2
17700     DC E4 85 F1 | 	sub	objptr, #220
17704     F2 1E 02 F1 | 	add	local01, objptr
17708     0F 1F 02 FB | 	rdlong	local01, local01
1770c     A7 1E 62 FC | 	wrlong	local01, fp
17710     08 4E 05 F1 | 	add	fp, #8
17714     A7 3A 68 FC | 	wrlong	#29, fp
17718     08 4E 85 F1 | 	sub	fp, #8
1771c     A7 12 02 F6 | 	mov	arg01, fp
17720     51 00 00 FF 
17724     2C E5 85 F1 | 	sub	objptr, ##41772
17728     C4 43 BF FD | 	call	#_push
1772c                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1772c     14 00 90 FD | 	jmp	#LR__1954
17730                 | LR__1952
17730     29 12 06 F6 | 	mov	arg01, #41
17734     18 5E B0 FD | 	call	#_printerror
17738                 | '      printerror(41) : return
17738     08 00 90 FD | 	jmp	#LR__1954
1773c                 | LR__1953
1773c     29 12 06 F6 | 	mov	arg01, #41
17740     0C 5E B0 FD | 	call	#_printerror
17744                 | LR__1954
17744     A7 F0 03 F6 | 	mov	ptra, fp
17748     B2 00 A0 FD | 	call	#popregs_
1774c                 | _do_stick_ret
1774c     2D 00 64 FD | 	ret
17750                 | 
17750                 | ' 
17750                 | ' sub do_strig
17750                 | _do_strig
17750     01 4A 05 F6 | 	mov	COUNT_, #1
17754     A8 00 A0 FD | 	call	#pushregs_
17758     10 F0 07 F1 | 	add	ptra, #16
1775c     4A 00 00 FF 
17760     80 E4 05 F1 | 	add	objptr, ##38016
17764     F2 1E 02 FB | 	rdlong	local01, objptr
17768     0F 17 02 F6 | 	mov	arg03, local01
1776c     01 16 66 F0 | 	shl	arg03, #1
17770     0F 17 02 F1 | 	add	arg03, local01
17774     02 16 66 F0 | 	shl	arg03, #2
17778     03 00 00 FF 
1777c     04 E4 85 F1 | 	sub	objptr, ##1540
17780     F2 16 02 F1 | 	add	arg03, objptr
17784     0B 17 02 FB | 	rdlong	arg03, arg03
17788     0C 4E 05 F1 | 	add	fp, #12
1778c     A7 16 62 FC | 	wrlong	arg03, fp
17790                 | ' 
17790                 | ' numpar=compiledline(lineptr_e).result.uresult
17790                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
17790     0C 4E 85 F1 | 	sub	fp, #12
17794     02 16 16 F2 | 	cmp	arg03, #2 wc
17798     47 00 00 FF 
1779c     7C E4 85 F1 | 	sub	objptr, ##36476
177a0     3C 00 90 CD |  if_b	jmp	#LR__1960
177a4     00 12 06 F6 | 	mov	arg01, #0
177a8     7C ED B0 FD | 	call	#__system___getiolock_0540
177ac     FD 12 02 F6 | 	mov	arg01, result1
177b0     34 93 B0 FD | 	call	#__system___lockmem
177b4     85 01 00 FF 
177b8     87 15 06 F6 | 	mov	arg02, ##@LR__5503
177bc     00 12 06 F6 | 	mov	arg01, #0
177c0     00 16 06 F6 | 	mov	arg03, #0
177c4     14 A0 B0 FD | 	call	#__system___basic_print_string
177c8     00 12 06 F6 | 	mov	arg01, #0
177cc     58 ED B0 FD | 	call	#__system___getiolock_0540
177d0     FD 00 68 FC | 	wrlong	#0, result1
177d4     27 12 06 F6 | 	mov	arg01, #39
177d8     74 5D B0 FD | 	call	#_printerror
177dc     E8 00 90 FD | 	jmp	#LR__1964
177e0                 | LR__1960
177e0                 | ' 
177e0                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
177e0     0C 4E 05 F1 | 	add	fp, #12
177e4     A7 FE 09 FB | 	rdlong	result3, fp wz
177e8     0C 4E 85 F1 | 	sub	fp, #12
177ec     30 00 90 5D |  if_ne	jmp	#LR__1961
177f0     51 00 00 FF 
177f4     48 E5 05 F1 | 	add	objptr, ##41800
177f8     F2 1E 02 FB | 	rdlong	local01, objptr
177fc     51 00 00 FF 
17800     48 E5 85 F1 | 	sub	objptr, ##41800
17804     A7 1E 62 FC | 	wrlong	local01, fp
17808     08 4E 05 F1 | 	add	fp, #8
1780c     A7 3A 68 FC | 	wrlong	#29, fp
17810     08 4E 85 F1 | 	sub	fp, #8
17814     A7 12 02 F6 | 	mov	arg01, fp
17818     D4 42 BF FD | 	call	#_push
1781c     A8 00 90 FD | 	jmp	#LR__1964
17820                 | LR__1961
17820     34 42 BF FD | 	call	#_pop
17824     A7 FA 61 FC | 	wrlong	result1, fp
17828     04 4E 05 F1 | 	add	fp, #4
1782c     A7 FC 61 FC | 	wrlong	result2, fp
17830     04 4E 05 F1 | 	add	fp, #4
17834     A7 FE 61 FC | 	wrlong	result3, fp
17838                 | ' 
17838                 | ' t1=pop()
17838                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17838     08 4E 85 F1 | 	sub	fp, #8
1783c     1C FE 0D F2 | 	cmp	result3, #28 wz
17840     08 4E 05 51 |  if_ne	add	fp, #8
17844     A7 1E 02 5B |  if_ne	rdlong	local01, fp
17848     08 4E 85 51 |  if_ne	sub	fp, #8
1784c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
17850     6C 00 90 5D |  if_ne	jmp	#LR__1963
17854     A7 1E 02 FB | 	rdlong	local01, fp
17858     52 00 00 FF 
1785c     08 E4 05 F1 | 	add	objptr, ##41992
17860     F2 1E 62 FC | 	wrlong	local01, objptr
17864                 | '   q=t1.result.uresult
17864                 | '   if q<7 then 
17864     52 00 00 FF 
17868     08 E4 85 F1 | 	sub	objptr, ##41992
1786c     07 1E 56 F2 | 	cmps	local01, #7 wc
17870     40 00 90 3D |  if_ae	jmp	#LR__1962
17874     52 00 00 FF 
17878     08 E4 05 F1 | 	add	objptr, ##41992
1787c     F2 1E 02 FB | 	rdlong	local01, objptr
17880     02 1E 66 F0 | 	shl	local01, #2
17884     C0 E4 85 F1 | 	sub	objptr, #192
17888     F2 1E 02 F1 | 	add	local01, objptr
1788c     0F 1F 02 FB | 	rdlong	local01, local01
17890     A7 1E 62 FC | 	wrlong	local01, fp
17894     08 4E 05 F1 | 	add	fp, #8
17898     A7 3A 68 FC | 	wrlong	#29, fp
1789c     08 4E 85 F1 | 	sub	fp, #8
178a0     A7 12 02 F6 | 	mov	arg01, fp
178a4     51 00 00 FF 
178a8     48 E5 85 F1 | 	sub	objptr, ##41800
178ac     40 42 BF FD | 	call	#_push
178b0                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
178b0     14 00 90 FD | 	jmp	#LR__1964
178b4                 | LR__1962
178b4     29 12 06 F6 | 	mov	arg01, #41
178b8     94 5C B0 FD | 	call	#_printerror
178bc                 | '      printerror(41) : return
178bc     08 00 90 FD | 	jmp	#LR__1964
178c0                 | LR__1963
178c0     29 12 06 F6 | 	mov	arg01, #41
178c4     88 5C B0 FD | 	call	#_printerror
178c8                 | LR__1964
178c8     A7 F0 03 F6 | 	mov	ptra, fp
178cc     B2 00 A0 FD | 	call	#popregs_
178d0                 | _do_strig_ret
178d0     2D 00 64 FD | 	ret
178d4                 | 
178d4                 | ' 
178d4                 | ' sub do_getpixel
178d4                 | _do_getpixel
178d4     00 4A 05 F6 | 	mov	COUNT_, #0
178d8     A8 00 A0 FD | 	call	#pushregs_
178dc     24 F0 07 F1 | 	add	ptra, #36
178e0     4A 00 00 FF 
178e4     80 E4 05 F1 | 	add	objptr, ##38016
178e8     F2 16 02 FB | 	rdlong	arg03, objptr
178ec     0B 15 02 F6 | 	mov	arg02, arg03
178f0     01 14 66 F0 | 	shl	arg02, #1
178f4     0B 15 02 F1 | 	add	arg02, arg03
178f8     02 14 66 F0 | 	shl	arg02, #2
178fc     03 00 00 FF 
17900     04 E4 85 F1 | 	sub	objptr, ##1540
17904     F2 14 02 F1 | 	add	arg02, objptr
17908     0A 17 02 FB | 	rdlong	arg03, arg02
1790c     18 4E 05 F1 | 	add	fp, #24
17910     A7 16 62 FC | 	wrlong	arg03, fp
17914                 | ' 
17914                 | ' numpar=compiledline(lineptr_e).result.uresult
17914                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
17914     18 4E 85 F1 | 	sub	fp, #24
17918     02 16 0E F2 | 	cmp	arg03, #2 wz
1791c     47 00 00 FF 
17920     7C E4 85 F1 | 	sub	objptr, ##36476
17924     3C 00 90 AD |  if_e	jmp	#LR__1970
17928     00 12 06 F6 | 	mov	arg01, #0
1792c     F8 EB B0 FD | 	call	#__system___getiolock_0540
17930     FD 12 02 F6 | 	mov	arg01, result1
17934     B0 91 B0 FD | 	call	#__system___lockmem
17938     85 01 00 FF 
1793c     8F 15 06 F6 | 	mov	arg02, ##@LR__5504
17940     00 12 06 F6 | 	mov	arg01, #0
17944     00 16 06 F6 | 	mov	arg03, #0
17948     90 9E B0 FD | 	call	#__system___basic_print_string
1794c     00 12 06 F6 | 	mov	arg01, #0
17950     D4 EB B0 FD | 	call	#__system___getiolock_0540
17954     FD 00 68 FC | 	wrlong	#0, result1
17958     27 12 06 F6 | 	mov	arg01, #39
1795c     F0 5B B0 FD | 	call	#_printerror
17960     B4 00 90 FD | 	jmp	#LR__1971
17964                 | LR__1970
17964     F0 40 BF FD | 	call	#_pop
17968     FD 16 02 F6 | 	mov	arg03, result1
1796c     FE 14 02 F6 | 	mov	arg02, result2
17970     FF 12 02 F6 | 	mov	arg01, result3
17974     0C 4E 05 F1 | 	add	fp, #12
17978     A7 16 62 FC | 	wrlong	arg03, fp
1797c     04 4E 05 F1 | 	add	fp, #4
17980     A7 14 62 FC | 	wrlong	arg02, fp
17984     04 4E 05 F1 | 	add	fp, #4
17988     A7 12 62 FC | 	wrlong	arg01, fp
1798c     14 4E 85 F1 | 	sub	fp, #20
17990     C4 40 BF FD | 	call	#_pop
17994     FF 16 02 F6 | 	mov	arg03, result3
17998     A7 FA 61 FC | 	wrlong	result1, fp
1799c     04 4E 05 F1 | 	add	fp, #4
179a0     A7 FC 61 FC | 	wrlong	result2, fp
179a4     04 4E 05 F1 | 	add	fp, #4
179a8     A7 16 62 FC | 	wrlong	arg03, fp
179ac     08 4E 85 F1 | 	sub	fp, #8
179b0     A7 12 02 F6 | 	mov	arg01, fp
179b4     3C E2 BF FD | 	call	#_converttoint
179b8     1C 4E 05 F1 | 	add	fp, #28
179bc     A7 FA 61 FC | 	wrlong	result1, fp
179c0     10 4E 85 F1 | 	sub	fp, #16
179c4     A7 12 02 F6 | 	mov	arg01, fp
179c8     0C 4E 85 F1 | 	sub	fp, #12
179cc     24 E2 BF FD | 	call	#_converttoint
179d0     FD 16 02 F6 | 	mov	arg03, result1
179d4     20 4E 05 F1 | 	add	fp, #32
179d8     A7 16 62 FC | 	wrlong	arg03, fp
179dc     F2 12 02 FB | 	rdlong	arg01, objptr
179e0     04 4E 85 F1 | 	sub	fp, #4
179e4     A7 FE 01 FB | 	rdlong	result3, fp
179e8     FF 12 02 F1 | 	add	arg01, result3
179ec     1C 4E 85 F1 | 	sub	fp, #28
179f0     0A 16 66 F0 | 	shl	arg03, #10
179f4     0B 13 02 F1 | 	add	arg01, arg03
179f8     90 5D B0 FD | 	call	#_pspeek
179fc     FD FA E1 F8 | 	getbyte	result1, result1, #0
17a00     A7 FA 61 FC | 	wrlong	result1, fp
17a04     08 4E 05 F1 | 	add	fp, #8
17a08     A7 3A 68 FC | 	wrlong	#29, fp
17a0c     08 4E 85 F1 | 	sub	fp, #8
17a10     A7 12 02 F6 | 	mov	arg01, fp
17a14     D8 40 BF FD | 	call	#_push
17a18                 | LR__1971
17a18     A7 F0 03 F6 | 	mov	ptra, fp
17a1c     B2 00 A0 FD | 	call	#popregs_
17a20                 | _do_getpixel_ret
17a20     2D 00 64 FD | 	ret
17a24                 | 
17a24                 | ' 
17a24                 | ' sub do_log
17a24                 | _do_log
17a24     01 4A 05 F6 | 	mov	COUNT_, #1
17a28     A8 00 A0 FD | 	call	#pushregs_
17a2c     14 F0 07 F1 | 	add	ptra, #20
17a30     4A 00 00 FF 
17a34     80 E4 05 F1 | 	add	objptr, ##38016
17a38     F2 1E 02 FB | 	rdlong	local01, objptr
17a3c     0F 17 02 F6 | 	mov	arg03, local01
17a40     01 16 66 F0 | 	shl	arg03, #1
17a44     0F 17 02 F1 | 	add	arg03, local01
17a48     02 16 66 F0 | 	shl	arg03, #2
17a4c     03 00 00 FF 
17a50     04 E4 85 F1 | 	sub	objptr, ##1540
17a54     F2 16 02 F1 | 	add	arg03, objptr
17a58     0B 17 0A FB | 	rdlong	arg03, arg03 wz
17a5c     0C 4E 05 F1 | 	add	fp, #12
17a60     A7 16 62 FC | 	wrlong	arg03, fp
17a64                 | ' 
17a64                 | ' numpar=compiledline(lineptr_e).result.uresult
17a64                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
17a64     0C 4E 85 F1 | 	sub	fp, #12
17a68     47 00 00 FF 
17a6c     7C E4 85 F1 | 	sub	objptr, ##36476
17a70     0C 4E 05 51 |  if_ne	add	fp, #12
17a74     A7 1E 02 5B |  if_ne	rdlong	local01, fp
17a78     0C 4E 85 51 |  if_ne	sub	fp, #12
17a7c     03 1E 16 52 |  if_ne	cmp	local01, #3 wc
17a80     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1980
17a84     00 12 06 F6 | 	mov	arg01, #0
17a88     9C EA B0 FD | 	call	#__system___getiolock_0540
17a8c     FD 12 02 F6 | 	mov	arg01, result1
17a90     54 90 B0 FD | 	call	#__system___lockmem
17a94     85 01 00 FF 
17a98     9A 15 06 F6 | 	mov	arg02, ##@LR__5505
17a9c     00 12 06 F6 | 	mov	arg01, #0
17aa0     00 16 06 F6 | 	mov	arg03, #0
17aa4     34 9D B0 FD | 	call	#__system___basic_print_string
17aa8     00 12 06 F6 | 	mov	arg01, #0
17aac     78 EA B0 FD | 	call	#__system___getiolock_0540
17ab0     FD 00 68 FC | 	wrlong	#0, result1
17ab4     27 12 06 F6 | 	mov	arg01, #39
17ab8     94 5A B0 FD | 	call	#_printerror
17abc     D0 00 90 FD | 	jmp	#LR__1983
17ac0                 | LR__1980
17ac0                 | ' 
17ac0                 | ' if numpar=2 then 
17ac0     0C 4E 05 F1 | 	add	fp, #12
17ac4     A7 1E 02 FB | 	rdlong	local01, fp
17ac8     0C 4E 85 F1 | 	sub	fp, #12
17acc     02 1E 0E F2 | 	cmp	local01, #2 wz
17ad0     48 00 90 5D |  if_ne	jmp	#LR__1981
17ad4     80 3F BF FD | 	call	#_pop
17ad8     FF 1E 02 F6 | 	mov	local01, result3
17adc     A7 FA 61 FC | 	wrlong	result1, fp
17ae0     04 4E 05 F1 | 	add	fp, #4
17ae4     A7 FC 61 FC | 	wrlong	result2, fp
17ae8     04 4E 05 F1 | 	add	fp, #4
17aec     A7 1E 62 FC | 	wrlong	local01, fp
17af0     08 4E 85 F1 | 	sub	fp, #8
17af4     A7 12 02 F6 | 	mov	arg01, fp
17af8     B4 E1 BF FD | 	call	#_converttofloat
17afc     FD 14 02 F6 | 	mov	arg02, result1
17b00     FC 16 20 FF 
17b04     54 12 06 F6 | 	mov	arg01, ##1076754516
17b08     3C CB B0 FD | 	call	#__system____builtin_logbase
17b0c     10 4E 05 F1 | 	add	fp, #16
17b10     A7 FA 61 FC | 	wrlong	result1, fp
17b14     10 4E 85 F1 | 	sub	fp, #16
17b18     10 00 90 FD | 	jmp	#LR__1982
17b1c                 | LR__1981
17b1c     10 4E 05 F1 | 	add	fp, #16
17b20     00 C0 9F FF 
17b24     A7 00 68 FC | 	wrlong	##1065353216, fp
17b28     10 4E 85 F1 | 	sub	fp, #16
17b2c                 | LR__1982
17b2c     28 3F BF FD | 	call	#_pop
17b30     FF 1E 02 F6 | 	mov	local01, result3
17b34     A7 FA 61 FC | 	wrlong	result1, fp
17b38     04 4E 05 F1 | 	add	fp, #4
17b3c     A7 FC 61 FC | 	wrlong	result2, fp
17b40     04 4E 05 F1 | 	add	fp, #4
17b44     A7 1E 62 FC | 	wrlong	local01, fp
17b48     08 4E 85 F1 | 	sub	fp, #8
17b4c     A7 12 02 F6 | 	mov	arg01, fp
17b50     5C E1 BF FD | 	call	#_converttofloat
17b54     FD 14 02 F6 | 	mov	arg02, result1
17b58     FC 16 20 FF 
17b5c     54 12 06 F6 | 	mov	arg01, ##1076754516
17b60     E4 CA B0 FD | 	call	#__system____builtin_logbase
17b64     FD 12 02 F6 | 	mov	arg01, result1
17b68     10 4E 05 F1 | 	add	fp, #16
17b6c     A7 14 02 FB | 	rdlong	arg02, fp
17b70     10 4E 85 F1 | 	sub	fp, #16
17b74     28 BD B0 FD | 	call	#__system___float_div
17b78     A7 FA 61 FC | 	wrlong	result1, fp
17b7c     08 4E 05 F1 | 	add	fp, #8
17b80     A7 3C 68 FC | 	wrlong	#30, fp
17b84     08 4E 85 F1 | 	sub	fp, #8
17b88     A7 12 02 F6 | 	mov	arg01, fp
17b8c     60 3F BF FD | 	call	#_push
17b90                 | LR__1983
17b90     A7 F0 03 F6 | 	mov	ptra, fp
17b94     B2 00 A0 FD | 	call	#popregs_
17b98                 | _do_log_ret
17b98     2D 00 64 FD | 	ret
17b9c                 | 
17b9c                 | ' 
17b9c                 | ' sub do_defsprite
17b9c                 | _do_defsprite
17b9c     07 4A 05 F6 | 	mov	COUNT_, #7
17ba0     A8 00 A0 FD | 	call	#pushregs_
17ba4     60 F0 07 F1 | 	add	ptra, #96
17ba8     AC 3E BF FD | 	call	#_pop
17bac     FD 16 02 F6 | 	mov	arg03, result1
17bb0     FE 14 02 F6 | 	mov	arg02, result2
17bb4     FF 12 02 F6 | 	mov	arg01, result3
17bb8     30 4E 05 F1 | 	add	fp, #48
17bbc     A7 16 62 FC | 	wrlong	arg03, fp
17bc0     04 4E 05 F1 | 	add	fp, #4
17bc4     A7 14 62 FC | 	wrlong	arg02, fp
17bc8     04 4E 05 F1 | 	add	fp, #4
17bcc     A7 12 62 FC | 	wrlong	arg01, fp
17bd0     38 4E 85 F1 | 	sub	fp, #56
17bd4     80 3E BF FD | 	call	#_pop
17bd8     FD 16 02 F6 | 	mov	arg03, result1
17bdc     FE 14 02 F6 | 	mov	arg02, result2
17be0     FF 12 02 F6 | 	mov	arg01, result3
17be4     24 4E 05 F1 | 	add	fp, #36
17be8     A7 16 62 FC | 	wrlong	arg03, fp
17bec     04 4E 05 F1 | 	add	fp, #4
17bf0     A7 14 62 FC | 	wrlong	arg02, fp
17bf4     04 4E 05 F1 | 	add	fp, #4
17bf8     A7 12 62 FC | 	wrlong	arg01, fp
17bfc     2C 4E 85 F1 | 	sub	fp, #44
17c00     54 3E BF FD | 	call	#_pop
17c04     FD 16 02 F6 | 	mov	arg03, result1
17c08     FE 14 02 F6 | 	mov	arg02, result2
17c0c     FF 12 02 F6 | 	mov	arg01, result3
17c10     18 4E 05 F1 | 	add	fp, #24
17c14     A7 16 62 FC | 	wrlong	arg03, fp
17c18     04 4E 05 F1 | 	add	fp, #4
17c1c     A7 14 62 FC | 	wrlong	arg02, fp
17c20     04 4E 05 F1 | 	add	fp, #4
17c24     A7 12 62 FC | 	wrlong	arg01, fp
17c28     20 4E 85 F1 | 	sub	fp, #32
17c2c     28 3E BF FD | 	call	#_pop
17c30     FD 16 02 F6 | 	mov	arg03, result1
17c34     FE 14 02 F6 | 	mov	arg02, result2
17c38     FF 12 02 F6 | 	mov	arg01, result3
17c3c     0C 4E 05 F1 | 	add	fp, #12
17c40     A7 16 62 FC | 	wrlong	arg03, fp
17c44     04 4E 05 F1 | 	add	fp, #4
17c48     A7 14 62 FC | 	wrlong	arg02, fp
17c4c     04 4E 05 F1 | 	add	fp, #4
17c50     A7 12 62 FC | 	wrlong	arg01, fp
17c54     14 4E 85 F1 | 	sub	fp, #20
17c58     FC 3D BF FD | 	call	#_pop
17c5c     FF 16 02 F6 | 	mov	arg03, result3
17c60     A7 FA 61 FC | 	wrlong	result1, fp
17c64     04 4E 05 F1 | 	add	fp, #4
17c68     A7 FC 61 FC | 	wrlong	result2, fp
17c6c     04 4E 05 F1 | 	add	fp, #4
17c70     A7 16 62 FC | 	wrlong	arg03, fp
17c74     08 4E 85 F1 | 	sub	fp, #8
17c78     A7 12 02 F6 | 	mov	arg01, fp
17c7c     74 DF BF FD | 	call	#_converttoint
17c80     3C 4E 05 F1 | 	add	fp, #60
17c84     A7 FA 61 FC | 	wrlong	result1, fp
17c88     30 4E 85 F1 | 	sub	fp, #48
17c8c     A7 12 02 F6 | 	mov	arg01, fp
17c90     0C 4E 85 F1 | 	sub	fp, #12
17c94     5C DF BF FD | 	call	#_converttoint
17c98     40 4E 05 F1 | 	add	fp, #64
17c9c     A7 FA 61 FC | 	wrlong	result1, fp
17ca0     28 4E 85 F1 | 	sub	fp, #40
17ca4     A7 12 02 F6 | 	mov	arg01, fp
17ca8     18 4E 85 F1 | 	sub	fp, #24
17cac     44 DF BF FD | 	call	#_converttoint
17cb0     44 4E 05 F1 | 	add	fp, #68
17cb4     A7 FA 61 FC | 	wrlong	result1, fp
17cb8     20 4E 85 F1 | 	sub	fp, #32
17cbc     A7 12 02 F6 | 	mov	arg01, fp
17cc0     24 4E 85 F1 | 	sub	fp, #36
17cc4     2C DF BF FD | 	call	#_converttoint
17cc8     48 4E 05 F1 | 	add	fp, #72
17ccc     A7 FA 61 FC | 	wrlong	result1, fp
17cd0     18 4E 85 F1 | 	sub	fp, #24
17cd4     A7 12 02 F6 | 	mov	arg01, fp
17cd8     30 4E 85 F1 | 	sub	fp, #48
17cdc     14 DF BF FD | 	call	#_converttoint
17ce0     4C 4E 05 F1 | 	add	fp, #76
17ce4     A7 FA 61 FC | 	wrlong	result1, fp
17ce8                 | ' 
17ce8                 | ' t5=pop()
17ce8                 | ' t4=pop()
17ce8                 | ' t3=pop()
17ce8                 | ' t2=pop()
17ce8                 | ' t1=pop()
17ce8                 | ' 
17ce8                 | ' ' do convert, defsprite is not a racing command
17ce8                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
17ce8                 | '  
17ce8                 | ' ' todo: check parameters for linits
17ce8                 | ' if sprite(a1)<> nil then delete(sprite(a1))
17ce8     10 4E 85 F1 | 	sub	fp, #16
17cec     A7 16 02 FB | 	rdlong	arg03, fp
17cf0     3C 4E 85 F1 | 	sub	fp, #60
17cf4     02 16 66 F0 | 	shl	arg03, #2
17cf8     51 00 00 FF 
17cfc     64 E5 05 F1 | 	add	objptr, ##41828
17d00     F2 16 02 F1 | 	add	arg03, objptr
17d04     0B 17 0A FB | 	rdlong	arg03, arg03 wz
17d08     51 00 00 FF 
17d0c     64 E5 85 F1 | 	sub	objptr, ##41828
17d10     2C 00 90 AD |  if_e	jmp	#LR__1990
17d14     3C 4E 05 F1 | 	add	fp, #60
17d18     A7 16 02 FB | 	rdlong	arg03, fp
17d1c     3C 4E 85 F1 | 	sub	fp, #60
17d20     02 16 66 F0 | 	shl	arg03, #2
17d24     51 00 00 FF 
17d28     64 E5 05 F1 | 	add	objptr, ##41828
17d2c     F2 16 02 F1 | 	add	arg03, objptr
17d30     0B 13 02 FB | 	rdlong	arg01, arg03
17d34     51 00 00 FF 
17d38     64 E5 85 F1 | 	sub	objptr, ##41828
17d3c     9C CD B0 FD | 	call	#__system___gc_free
17d40                 | LR__1990
17d40     3C 4E 05 F1 | 	add	fp, #60
17d44     A7 1E 02 FB | 	rdlong	local01, fp
17d48     0C 4E 05 F1 | 	add	fp, #12
17d4c     A7 16 02 FB | 	rdlong	arg03, fp
17d50     04 4E 05 F1 | 	add	fp, #4
17d54     A7 14 02 FB | 	rdlong	arg02, fp
17d58     0A 17 02 FD | 	qmul	arg03, arg02
17d5c     02 1E 66 F0 | 	shl	local01, #2
17d60     51 00 00 FF 
17d64     64 E5 05 F1 | 	add	objptr, ##41828
17d68     F2 1E 02 F1 | 	add	local01, objptr
17d6c     4C 4E 85 F1 | 	sub	fp, #76
17d70     51 00 00 FF 
17d74     64 E5 85 F1 | 	sub	objptr, ##41828
17d78     18 12 62 FD | 	getqx	arg01
17d7c     20 CC B0 FD | 	call	#__system___gc_alloc_managed
17d80     0F FB 61 FC | 	wrlong	result1, local01
17d84                 | ' for y=a3 to a3+a5-1
17d84     44 4E 05 F1 | 	add	fp, #68
17d88     A7 20 02 FB | 	rdlong	local02, fp
17d8c     0C 4E 05 F1 | 	add	fp, #12
17d90     A7 20 62 FC | 	wrlong	local02, fp
17d94     0C 4E 85 F1 | 	sub	fp, #12
17d98     A7 22 02 FB | 	rdlong	local03, fp
17d9c     08 4E 05 F1 | 	add	fp, #8
17da0     A7 24 02 FB | 	rdlong	local04, fp
17da4     4C 4E 85 F1 | 	sub	fp, #76
17da8     12 23 02 F1 | 	add	local03, local04
17dac                 | LR__1991
17dac     50 4E 05 F1 | 	add	fp, #80
17db0     A7 20 02 FB | 	rdlong	local02, fp
17db4     50 4E 85 F1 | 	sub	fp, #80
17db8     11 21 52 F2 | 	cmps	local02, local03 wc
17dbc     F4 00 90 3D |  if_ae	jmp	#LR__1994
17dc0                 | '   for x=a2 to a4+a2-1
17dc0     40 4E 05 F1 | 	add	fp, #64
17dc4     A7 1E 02 FB | 	rdlong	local01, fp
17dc8     14 4E 05 F1 | 	add	fp, #20
17dcc     A7 1E 62 FC | 	wrlong	local01, fp
17dd0     0C 4E 85 F1 | 	sub	fp, #12
17dd4     A7 26 02 FB | 	rdlong	local05, fp
17dd8     08 4E 85 F1 | 	sub	fp, #8
17ddc     A7 28 02 FB | 	rdlong	local06, fp
17de0     40 4E 85 F1 | 	sub	fp, #64
17de4     14 27 02 F1 | 	add	local05, local06
17de8                 | LR__1992
17de8     54 4E 05 F1 | 	add	fp, #84
17dec     A7 1E 02 FB | 	rdlong	local01, fp
17df0     54 4E 85 F1 | 	sub	fp, #84
17df4     13 1F 52 F2 | 	cmps	local01, local05 wc
17df8     A0 00 90 3D |  if_ae	jmp	#LR__1993
17dfc     3C 4E 05 F1 | 	add	fp, #60
17e00     A7 28 02 FB | 	rdlong	local06, fp
17e04     18 4E 05 F1 | 	add	fp, #24
17e08     A7 24 02 FB | 	rdlong	local04, fp
17e0c     14 4E 85 F1 | 	sub	fp, #20
17e10     A7 20 02 FB | 	rdlong	local02, fp
17e14     10 4E 05 F1 | 	add	fp, #16
17e18     A7 1E 02 FB | 	rdlong	local01, fp
17e1c     0F 17 02 F6 | 	mov	arg03, local01
17e20     0C 4E 85 F1 | 	sub	fp, #12
17e24     A7 14 02 FB | 	rdlong	arg02, fp
17e28     0A 17 82 F1 | 	sub	arg03, arg02
17e2c     04 4E 05 F1 | 	add	fp, #4
17e30     A7 14 02 FB | 	rdlong	arg02, fp
17e34     0A 17 02 FD | 	qmul	arg03, arg02
17e38     02 28 66 F0 | 	shl	local06, #2
17e3c     51 00 00 FF 
17e40     64 E5 05 F1 | 	add	objptr, ##41828
17e44     F2 28 02 F1 | 	add	local06, objptr
17e48     14 29 02 FB | 	rdlong	local06, local06
17e4c     12 2B 02 F6 | 	mov	local07, local04
17e50     10 2B 82 F1 | 	sub	local07, local02
17e54     51 00 00 FF 
17e58     64 E5 85 F1 | 	sub	objptr, ##41828
17e5c     F2 12 02 FB | 	rdlong	arg01, objptr
17e60     12 13 02 F1 | 	add	arg01, local04
17e64     48 4E 85 F1 | 	sub	fp, #72
17e68     0A 1E 66 F0 | 	shl	local01, #10
17e6c     0F 13 02 F1 | 	add	arg01, local01
17e70     18 24 62 FD | 	getqx	local04
17e74     12 2B 02 F1 | 	add	local07, local04
17e78     14 2B 02 F1 | 	add	local07, local06
17e7c     0C 59 B0 FD | 	call	#_pspeek
17e80     15 FB 41 FC | 	wrbyte	result1, local07
17e84     54 4E 05 F1 | 	add	fp, #84
17e88     A7 2A 02 FB | 	rdlong	local07, fp
17e8c     01 2A 06 F1 | 	add	local07, #1
17e90     A7 2A 62 FC | 	wrlong	local07, fp
17e94     54 4E 85 F1 | 	sub	fp, #84
17e98     4C FF 9F FD | 	jmp	#LR__1992
17e9c                 | LR__1993
17e9c     50 4E 05 F1 | 	add	fp, #80
17ea0     A7 2A 02 FB | 	rdlong	local07, fp
17ea4     01 2A 06 F1 | 	add	local07, #1
17ea8     A7 2A 62 FC | 	wrlong	local07, fp
17eac     50 4E 85 F1 | 	sub	fp, #80
17eb0     F8 FE 9F FD | 	jmp	#LR__1991
17eb4                 | LR__1994
17eb4     3C 4E 05 F1 | 	add	fp, #60
17eb8     A7 2A 02 FB | 	rdlong	local07, fp
17ebc     15 13 02 F6 | 	mov	arg01, local07
17ec0     3C 4E 85 F1 | 	sub	fp, #60
17ec4     02 2A 66 F0 | 	shl	local07, #2
17ec8     51 00 00 FF 
17ecc     64 E5 05 F1 | 	add	objptr, ##41828
17ed0     F2 2A 02 F1 | 	add	local07, objptr
17ed4     15 15 02 FB | 	rdlong	arg02, local07
17ed8     51 00 00 FF 
17edc     64 E5 85 F1 | 	sub	objptr, ##41828
17ee0     78 65 B0 FD | 	call	#_hg010b_spin2_setspriteptr
17ee4     3C 4E 05 F1 | 	add	fp, #60
17ee8     A7 12 02 FB | 	rdlong	arg01, fp
17eec     0C 4E 05 F1 | 	add	fp, #12
17ef0     A7 14 02 FB | 	rdlong	arg02, fp
17ef4     04 4E 05 F1 | 	add	fp, #4
17ef8     A7 16 02 FB | 	rdlong	arg03, fp
17efc     4C 4E 85 F1 | 	sub	fp, #76
17f00     E8 65 B0 FD | 	call	#_hg010b_spin2_setspritesize
17f04     A7 F0 03 F6 | 	mov	ptra, fp
17f08     B2 00 A0 FD | 	call	#popregs_
17f0c                 | _do_defsprite_ret
17f0c     2D 00 64 FD | 	ret
17f10                 | 
17f10                 | ' 
17f10                 | ' sub do_sprite
17f10                 | _do_sprite
17f10     00 4A 05 F6 | 	mov	COUNT_, #0
17f14     A8 00 A0 FD | 	call	#pushregs_
17f18     30 F0 07 F1 | 	add	ptra, #48
17f1c     38 3B BF FD | 	call	#_pop
17f20     FD 16 02 F6 | 	mov	arg03, result1
17f24     FE 14 02 F6 | 	mov	arg02, result2
17f28     FF 12 02 F6 | 	mov	arg01, result3
17f2c     18 4E 05 F1 | 	add	fp, #24
17f30     A7 16 62 FC | 	wrlong	arg03, fp
17f34     04 4E 05 F1 | 	add	fp, #4
17f38     A7 14 62 FC | 	wrlong	arg02, fp
17f3c     04 4E 05 F1 | 	add	fp, #4
17f40     A7 12 62 FC | 	wrlong	arg01, fp
17f44     20 4E 85 F1 | 	sub	fp, #32
17f48     0C 3B BF FD | 	call	#_pop
17f4c     FD 16 02 F6 | 	mov	arg03, result1
17f50     FE 14 02 F6 | 	mov	arg02, result2
17f54     FF 12 02 F6 | 	mov	arg01, result3
17f58     0C 4E 05 F1 | 	add	fp, #12
17f5c     A7 16 62 FC | 	wrlong	arg03, fp
17f60     04 4E 05 F1 | 	add	fp, #4
17f64     A7 14 62 FC | 	wrlong	arg02, fp
17f68     04 4E 05 F1 | 	add	fp, #4
17f6c     A7 12 62 FC | 	wrlong	arg01, fp
17f70     14 4E 85 F1 | 	sub	fp, #20
17f74     E0 3A BF FD | 	call	#_pop
17f78     FF 16 02 F6 | 	mov	arg03, result3
17f7c     A7 FA 61 FC | 	wrlong	result1, fp
17f80     04 4E 05 F1 | 	add	fp, #4
17f84     A7 FC 61 FC | 	wrlong	result2, fp
17f88     04 4E 05 F1 | 	add	fp, #4
17f8c     A7 16 62 FC | 	wrlong	arg03, fp
17f90     08 4E 85 F1 | 	sub	fp, #8
17f94     A7 12 02 F6 | 	mov	arg01, fp
17f98     58 DC BF FD | 	call	#_converttoint
17f9c     24 4E 05 F1 | 	add	fp, #36
17fa0     A7 FA 61 FC | 	wrlong	result1, fp
17fa4     18 4E 85 F1 | 	sub	fp, #24
17fa8     A7 12 02 F6 | 	mov	arg01, fp
17fac     0C 4E 85 F1 | 	sub	fp, #12
17fb0     40 DC BF FD | 	call	#_converttoint
17fb4     28 4E 05 F1 | 	add	fp, #40
17fb8     A7 FA 61 FC | 	wrlong	result1, fp
17fbc     10 4E 85 F1 | 	sub	fp, #16
17fc0     A7 12 02 F6 | 	mov	arg01, fp
17fc4     18 4E 85 F1 | 	sub	fp, #24
17fc8     28 DC BF FD | 	call	#_converttoint
17fcc     2C 4E 05 F1 | 	add	fp, #44
17fd0     A7 FA 61 FC | 	wrlong	result1, fp
17fd4     08 4E 85 F1 | 	sub	fp, #8
17fd8     A7 12 02 FB | 	rdlong	arg01, fp
17fdc     04 4E 05 F1 | 	add	fp, #4
17fe0     A7 14 02 FB | 	rdlong	arg02, fp
17fe4     FD 16 02 F6 | 	mov	arg03, result1
17fe8     28 4E 85 F1 | 	sub	fp, #40
17fec     94 64 B0 FD | 	call	#_hg010b_spin2_setspritepos
17ff0     A7 F0 03 F6 | 	mov	ptra, fp
17ff4     B2 00 A0 FD | 	call	#popregs_
17ff8                 | _do_sprite_ret
17ff8     2D 00 64 FD | 	ret
17ffc                 | 
17ffc                 | ' 
17ffc                 | ' sub do_mousex
17ffc                 | _do_mousex
17ffc     00 4A 05 F6 | 	mov	COUNT_, #0
18000     A8 00 A0 FD | 	call	#pushregs_
18004     0C F0 07 F1 | 	add	ptra, #12
18008     08 4E 05 F1 | 	add	fp, #8
1800c     A7 3A 68 FC | 	wrlong	#29, fp
18010     08 4E 85 F1 | 	sub	fp, #8
18014     51 00 00 FF 
18018     1C E5 05 F1 | 	add	objptr, ##41756
1801c     F2 12 02 FB | 	rdlong	arg01, objptr
18020     51 00 00 FF 
18024     1C E5 85 F1 | 	sub	objptr, ##41756
18028     A7 12 62 FC | 	wrlong	arg01, fp
1802c     A7 12 02 F6 | 	mov	arg01, fp
18030     BC 3A BF FD | 	call	#_push
18034     A7 F0 03 F6 | 	mov	ptra, fp
18038     B2 00 A0 FD | 	call	#popregs_
1803c                 | _do_mousex_ret
1803c     2D 00 64 FD | 	ret
18040                 | 
18040                 | ' 
18040                 | ' sub do_mousey
18040                 | _do_mousey
18040     00 4A 05 F6 | 	mov	COUNT_, #0
18044     A8 00 A0 FD | 	call	#pushregs_
18048     0C F0 07 F1 | 	add	ptra, #12
1804c     08 4E 05 F1 | 	add	fp, #8
18050     A7 3A 68 FC | 	wrlong	#29, fp
18054     08 4E 85 F1 | 	sub	fp, #8
18058     51 00 00 FF 
1805c     20 E5 05 F1 | 	add	objptr, ##41760
18060     F2 12 02 FB | 	rdlong	arg01, objptr
18064     51 00 00 FF 
18068     20 E5 85 F1 | 	sub	objptr, ##41760
1806c     A7 12 62 FC | 	wrlong	arg01, fp
18070     A7 12 02 F6 | 	mov	arg01, fp
18074     78 3A BF FD | 	call	#_push
18078     A7 F0 03 F6 | 	mov	ptra, fp
1807c     B2 00 A0 FD | 	call	#popregs_
18080                 | _do_mousey_ret
18080     2D 00 64 FD | 	ret
18084                 | 
18084                 | ' 
18084                 | ' sub do_mousew
18084                 | _do_mousew
18084     00 4A 05 F6 | 	mov	COUNT_, #0
18088     A8 00 A0 FD | 	call	#pushregs_
1808c     0C F0 07 F1 | 	add	ptra, #12
18090     08 4E 05 F1 | 	add	fp, #8
18094     A7 38 68 FC | 	wrlong	#28, fp
18098     08 4E 85 F1 | 	sub	fp, #8
1809c     51 00 00 FF 
180a0     28 E5 05 F1 | 	add	objptr, ##41768
180a4     F2 12 02 FB | 	rdlong	arg01, objptr
180a8     51 00 00 FF 
180ac     28 E5 85 F1 | 	sub	objptr, ##41768
180b0     A7 12 62 FC | 	wrlong	arg01, fp
180b4     A7 12 02 F6 | 	mov	arg01, fp
180b8     34 3A BF FD | 	call	#_push
180bc     A7 F0 03 F6 | 	mov	ptra, fp
180c0     B2 00 A0 FD | 	call	#popregs_
180c4                 | _do_mousew_ret
180c4     2D 00 64 FD | 	ret
180c8                 | 
180c8                 | ' 
180c8                 | ' sub do_mousek
180c8                 | _do_mousek
180c8     00 4A 05 F6 | 	mov	COUNT_, #0
180cc     A8 00 A0 FD | 	call	#pushregs_
180d0     0C F0 07 F1 | 	add	ptra, #12
180d4     08 4E 05 F1 | 	add	fp, #8
180d8     A7 3A 68 FC | 	wrlong	#29, fp
180dc     08 4E 85 F1 | 	sub	fp, #8
180e0     51 00 00 FF 
180e4     24 E5 05 F1 | 	add	objptr, ##41764
180e8     F2 12 02 FB | 	rdlong	arg01, objptr
180ec     51 00 00 FF 
180f0     24 E5 85 F1 | 	sub	objptr, ##41764
180f4     A7 12 62 FC | 	wrlong	arg01, fp
180f8     A7 12 02 F6 | 	mov	arg01, fp
180fc     F0 39 BF FD | 	call	#_push
18100     A7 F0 03 F6 | 	mov	ptra, fp
18104     B2 00 A0 FD | 	call	#popregs_
18108                 | _do_mousek_ret
18108     2D 00 64 FD | 	ret
1810c                 | 
1810c                 | ' 
1810c                 | ' 
1810c                 | ' sub do_rdpin
1810c                 | _do_rdpin
1810c     00 4A 05 F6 | 	mov	COUNT_, #0
18110     A8 00 A0 FD | 	call	#pushregs_
18114     0C F0 07 F1 | 	add	ptra, #12
18118     3C 39 BF FD | 	call	#_pop
1811c     A7 FA 61 FC | 	wrlong	result1, fp
18120     04 4E 05 F1 | 	add	fp, #4
18124     A7 FC 61 FC | 	wrlong	result2, fp
18128     04 4E 05 F1 | 	add	fp, #4
1812c     A7 FE 61 FC | 	wrlong	result3, fp
18130     08 4E 85 F1 | 	sub	fp, #8
18134     A7 12 02 F6 | 	mov	arg01, fp
18138     B8 DA BF FD | 	call	#_converttoint
1813c     FD FA 89 FA | 	rdpin	result1, result1
18140     52 00 00 FF 
18144     14 E4 05 F1 | 	add	objptr, ##42004
18148     F2 FA 61 FC | 	wrlong	result1, objptr
1814c     52 00 00 FF 
18150     14 E4 85 F1 | 	sub	objptr, ##42004
18154     08 4E 05 F1 | 	add	fp, #8
18158     A7 3A 68 FC | 	wrlong	#29, fp
1815c     08 4E 85 F1 | 	sub	fp, #8
18160     A7 08 68 FC | 	wrlong	#4, fp
18164     A7 12 02 F6 | 	mov	arg01, fp
18168     84 39 BF FD | 	call	#_push
1816c     A7 F0 03 F6 | 	mov	ptra, fp
18170     B2 00 A0 FD | 	call	#popregs_
18174                 | _do_rdpin_ret
18174     2D 00 64 FD | 	ret
18178                 | 
18178                 | ' 
18178                 | ' sub do_rqpin
18178                 | _do_rqpin
18178     00 4A 05 F6 | 	mov	COUNT_, #0
1817c     A8 00 A0 FD | 	call	#pushregs_
18180     0C F0 07 F1 | 	add	ptra, #12
18184     D0 38 BF FD | 	call	#_pop
18188     A7 FA 61 FC | 	wrlong	result1, fp
1818c     04 4E 05 F1 | 	add	fp, #4
18190     A7 FC 61 FC | 	wrlong	result2, fp
18194     04 4E 05 F1 | 	add	fp, #4
18198     A7 FE 61 FC | 	wrlong	result3, fp
1819c     08 4E 85 F1 | 	sub	fp, #8
181a0     A7 12 02 F6 | 	mov	arg01, fp
181a4     4C DA BF FD | 	call	#_converttoint
181a8     FD 12 02 F6 | 	mov	arg01, result1
181ac     00 FA 05 F6 | 	mov	result1, #0
181b0     09 FB 81 FA | 	rqpin	result1, arg01
181b4     52 00 00 FF 
181b8     14 E4 05 F1 | 	add	objptr, ##42004
181bc     F2 FA 61 FC | 	wrlong	result1, objptr
181c0     52 00 00 FF 
181c4     14 E4 85 F1 | 	sub	objptr, ##42004
181c8     08 4E 05 F1 | 	add	fp, #8
181cc     A7 3A 68 FC | 	wrlong	#29, fp
181d0     08 4E 85 F1 | 	sub	fp, #8
181d4     A7 08 68 FC | 	wrlong	#4, fp
181d8     A7 12 02 F6 | 	mov	arg01, fp
181dc     10 39 BF FD | 	call	#_push
181e0     A7 F0 03 F6 | 	mov	ptra, fp
181e4     B2 00 A0 FD | 	call	#popregs_
181e8                 | _do_rqpin_ret
181e8     2D 00 64 FD | 	ret
181ec                 | 
181ec                 | ' 
181ec                 | ' sub do_pinread
181ec                 | _do_pinread
181ec     00 4A 05 F6 | 	mov	COUNT_, #0
181f0     A8 00 A0 FD | 	call	#pushregs_
181f4     0C F0 07 F1 | 	add	ptra, #12
181f8     5C 38 BF FD | 	call	#_pop
181fc     A7 FA 61 FC | 	wrlong	result1, fp
18200     04 4E 05 F1 | 	add	fp, #4
18204     A7 FC 61 FC | 	wrlong	result2, fp
18208     04 4E 05 F1 | 	add	fp, #4
1820c     A7 FE 61 FC | 	wrlong	result3, fp
18210     08 4E 85 F1 | 	sub	fp, #8
18214     A7 12 02 F6 | 	mov	arg01, fp
18218     D8 D9 BF FD | 	call	#_converttoint
1821c     FD 12 02 F6 | 	mov	arg01, result1
18220     20 12 CE F7 | 	test	arg01, #32 wz
18224     FF FB 01 56 |  if_ne	mov	result1, inb
18228     FE FB 01 A6 |  if_e	mov	result1, ina
1822c     09 FB 41 F0 | 	shr	result1, arg01
18230     06 12 46 F0 | 	shr	arg01, #6
18234     09 FB 41 F7 | 	zerox	result1, arg01
18238     52 00 00 FF 
1823c     14 E4 05 F1 | 	add	objptr, ##42004
18240     F2 FA 61 FC | 	wrlong	result1, objptr
18244     52 00 00 FF 
18248     14 E4 85 F1 | 	sub	objptr, ##42004
1824c     08 4E 05 F1 | 	add	fp, #8
18250     A7 3A 68 FC | 	wrlong	#29, fp
18254     08 4E 85 F1 | 	sub	fp, #8
18258     A7 08 68 FC | 	wrlong	#4, fp
1825c     A7 12 02 F6 | 	mov	arg01, fp
18260     8C 38 BF FD | 	call	#_push
18264     A7 F0 03 F6 | 	mov	ptra, fp
18268     B2 00 A0 FD | 	call	#popregs_
1826c                 | _do_pinread_ret
1826c     2D 00 64 FD | 	ret
18270                 | 
18270                 | ' 
18270                 | ' sub do_gettime
18270                 | _do_gettime
18270     02 4A 05 F6 | 	mov	COUNT_, #2
18274     A8 00 A0 FD | 	call	#pushregs_
18278     14 F0 07 F1 | 	add	ptra, #20
1827c                 | ' 
1827c                 | ' const asm 
1827c     1A 1E 72 FD | 	getct	local01 wc
18280     1A 20 62 FD | 	getct	local02
18284                 | ' 
18284                 | ' return hi1, lo1
18284     10 FD 01 F6 | 	mov	result2, local02
18288     A7 1E 62 FC | 	wrlong	local01, fp
1828c     04 4E 05 F1 | 	add	fp, #4
18290     A7 FC 61 FC | 	wrlong	result2, fp
18294     0C 4E 05 F1 | 	add	fp, #12
18298     A7 3A 68 FC | 	wrlong	#29, fp
1829c     0C 4E 85 F1 | 	sub	fp, #12
182a0     A7 12 02 FB | 	rdlong	arg01, fp
182a4     04 4E 05 F1 | 	add	fp, #4
182a8     A7 12 62 FC | 	wrlong	arg01, fp
182ac     08 4E 85 F1 | 	sub	fp, #8
182b0     A7 12 02 FB | 	rdlong	arg01, fp
182b4     0C 4E 05 F1 | 	add	fp, #12
182b8     A7 12 62 FC | 	wrlong	arg01, fp
182bc     04 4E 85 F1 | 	sub	fp, #4
182c0     A7 12 02 F6 | 	mov	arg01, fp
182c4     08 4E 85 F1 | 	sub	fp, #8
182c8     24 38 BF FD | 	call	#_push
182cc     A7 F0 03 F6 | 	mov	ptra, fp
182d0     B2 00 A0 FD | 	call	#popregs_
182d4                 | _do_gettime_ret
182d4     2D 00 64 FD | 	ret
182d8                 | 
182d8                 | '    
182d8                 | ' 
182d8                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
182d8                 | ' 
182d8                 | ' '' ----------------------------- Clear the screen
182d8                 | ' 
182d8                 | ' sub do_cls
182d8                 | _do_cls
182d8     37 00 00 FF 
182dc     3C E4 05 F1 | 	add	objptr, ##28220
182e0     F2 12 02 FB | 	rdlong	arg01, objptr
182e4     04 E4 85 F1 | 	sub	objptr, #4
182e8     F2 14 02 FB | 	rdlong	arg02, objptr
182ec     37 00 00 FF 
182f0     38 E4 85 F1 | 	sub	objptr, ##28216
182f4     14 6F B0 FD | 	call	#_hg010b_spin2_cls
182f8     37 00 00 FF 
182fc     3C E4 05 F1 | 	add	objptr, ##28220
18300     F2 14 02 FB | 	rdlong	arg02, objptr
18304     14 E4 85 F1 | 	sub	objptr, #20
18308     F2 14 62 FC | 	wrlong	arg02, objptr
1830c     37 00 00 FF 
18310     28 E4 85 F1 | 	sub	objptr, ##28200
18314                 | _do_cls_ret
18314     2D 00 64 FD | 	ret
18318                 | 
18318                 | ' 
18318                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
18318                 | ' 
18318                 | ' sub do_color
18318                 | _do_color
18318     03 4A 05 F6 | 	mov	COUNT_, #3
1831c     A8 00 A0 FD | 	call	#pushregs_
18320     34 37 BF FD | 	call	#_pop
18324     FD 1E 02 F6 | 	mov	local01, result1
18328     FE 20 02 F6 | 	mov	local02, result2
1832c     FF 22 02 F6 | 	mov	local03, result3
18330     37 00 00 FF 
18334     28 E4 05 F1 | 	add	objptr, ##28200
18338     F2 1E 62 FC | 	wrlong	local01, objptr
1833c     37 00 00 FF 
18340     28 E4 85 F1 | 	sub	objptr, ##28200
18344     A7 F0 03 F6 | 	mov	ptra, fp
18348     B2 00 A0 FD | 	call	#popregs_
1834c                 | _do_color_ret
1834c     2D 00 64 FD | 	ret
18350                 | 
18350                 | ' 
18350                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
18350                 | ' 
18350                 | ' sub do_plot
18350                 | _do_plot
18350     00 4A 05 F6 | 	mov	COUNT_, #0
18354     A8 00 A0 FD | 	call	#pushregs_
18358     20 F0 07 F1 | 	add	ptra, #32
1835c     F8 36 BF FD | 	call	#_pop
18360     FD 16 02 F6 | 	mov	arg03, result1
18364     FE 14 02 F6 | 	mov	arg02, result2
18368     FF 12 02 F6 | 	mov	arg01, result3
1836c     0C 4E 05 F1 | 	add	fp, #12
18370     A7 16 62 FC | 	wrlong	arg03, fp
18374     04 4E 05 F1 | 	add	fp, #4
18378     A7 14 62 FC | 	wrlong	arg02, fp
1837c     04 4E 05 F1 | 	add	fp, #4
18380     A7 12 62 FC | 	wrlong	arg01, fp
18384     14 4E 85 F1 | 	sub	fp, #20
18388     CC 36 BF FD | 	call	#_pop
1838c     FF 16 02 F6 | 	mov	arg03, result3
18390     A7 FA 61 FC | 	wrlong	result1, fp
18394     04 4E 05 F1 | 	add	fp, #4
18398     A7 FC 61 FC | 	wrlong	result2, fp
1839c     04 4E 05 F1 | 	add	fp, #4
183a0     A7 16 62 FC | 	wrlong	arg03, fp
183a4     08 4E 85 F1 | 	sub	fp, #8
183a8     A7 12 02 F6 | 	mov	arg01, fp
183ac     44 D8 BF FD | 	call	#_converttoint
183b0     18 4E 05 F1 | 	add	fp, #24
183b4     A7 FA 61 FC | 	wrlong	result1, fp
183b8     0C 4E 85 F1 | 	sub	fp, #12
183bc     A7 12 02 F6 | 	mov	arg01, fp
183c0     0C 4E 85 F1 | 	sub	fp, #12
183c4     2C D8 BF FD | 	call	#_converttoint
183c8     1C 4E 05 F1 | 	add	fp, #28
183cc     A7 FA 61 FC | 	wrlong	result1, fp
183d0     04 4E 85 F1 | 	sub	fp, #4
183d4     A7 16 02 FB | 	rdlong	arg03, fp
183d8     37 00 00 FF 
183dc     2C E4 05 F1 | 	add	objptr, ##28204
183e0     F2 16 62 FC | 	wrlong	arg03, objptr
183e4     04 4E 05 F1 | 	add	fp, #4
183e8     A7 14 02 FB | 	rdlong	arg02, fp
183ec     1C 4E 85 F1 | 	sub	fp, #28
183f0     04 E4 05 F1 | 	add	objptr, #4
183f4     F2 14 62 FC | 	wrlong	arg02, objptr
183f8     04 E4 85 F1 | 	sub	objptr, #4
183fc     F2 12 02 FB | 	rdlong	arg01, objptr
18400     04 E4 85 F1 | 	sub	objptr, #4
18404     F2 16 02 FB | 	rdlong	arg03, objptr
18408     37 00 00 FF 
1840c     28 E4 85 F1 | 	sub	objptr, ##28200
18410     24 61 B0 FD | 	call	#_hg010b_spin2_putpixel
18414     A7 F0 03 F6 | 	mov	ptra, fp
18418     B2 00 A0 FD | 	call	#popregs_
1841c                 | _do_plot_ret
1841c     2D 00 64 FD | 	ret
18420                 | 
18420                 | ' 
18420                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
18420                 | ' 
18420                 | ' sub do_draw
18420                 | _do_draw
18420     00 4A 05 F6 | 	mov	COUNT_, #0
18424     A8 00 A0 FD | 	call	#pushregs_
18428     20 F0 07 F1 | 	add	ptra, #32
1842c     28 36 BF FD | 	call	#_pop
18430     FD 1A 02 F6 | 	mov	arg05, result1
18434     FE 18 02 F6 | 	mov	arg04, result2
18438     FF 16 02 F6 | 	mov	arg03, result3
1843c     0C 4E 05 F1 | 	add	fp, #12
18440     A7 1A 62 FC | 	wrlong	arg05, fp
18444     04 4E 05 F1 | 	add	fp, #4
18448     A7 18 62 FC | 	wrlong	arg04, fp
1844c     04 4E 05 F1 | 	add	fp, #4
18450     A7 16 62 FC | 	wrlong	arg03, fp
18454     14 4E 85 F1 | 	sub	fp, #20
18458     FC 35 BF FD | 	call	#_pop
1845c     FF 1A 02 F6 | 	mov	arg05, result3
18460     A7 FA 61 FC | 	wrlong	result1, fp
18464     04 4E 05 F1 | 	add	fp, #4
18468     A7 FC 61 FC | 	wrlong	result2, fp
1846c     04 4E 05 F1 | 	add	fp, #4
18470     A7 1A 62 FC | 	wrlong	arg05, fp
18474     08 4E 85 F1 | 	sub	fp, #8
18478     A7 12 02 F6 | 	mov	arg01, fp
1847c     74 D7 BF FD | 	call	#_converttoint
18480     18 4E 05 F1 | 	add	fp, #24
18484     A7 FA 61 FC | 	wrlong	result1, fp
18488     0C 4E 85 F1 | 	sub	fp, #12
1848c     A7 12 02 F6 | 	mov	arg01, fp
18490     0C 4E 85 F1 | 	sub	fp, #12
18494     5C D7 BF FD | 	call	#_converttoint
18498     1C 4E 05 F1 | 	add	fp, #28
1849c     A7 FA 61 FC | 	wrlong	result1, fp
184a0     37 00 00 FF 
184a4     2C E4 05 F1 | 	add	objptr, ##28204
184a8     F2 12 02 FB | 	rdlong	arg01, objptr
184ac     04 E4 05 F1 | 	add	objptr, #4
184b0     F2 14 02 FB | 	rdlong	arg02, objptr
184b4     04 4E 85 F1 | 	sub	fp, #4
184b8     A7 16 02 FB | 	rdlong	arg03, fp
184bc     FD 18 02 F6 | 	mov	arg04, result1
184c0     18 4E 85 F1 | 	sub	fp, #24
184c4     08 E4 85 F1 | 	sub	objptr, #8
184c8     F2 1A 02 FB | 	rdlong	arg05, objptr
184cc     37 00 00 FF 
184d0     28 E4 85 F1 | 	sub	objptr, ##28200
184d4     10 63 B0 FD | 	call	#_hg010b_spin2_draw
184d8     18 4E 05 F1 | 	add	fp, #24
184dc     A7 1A 02 FB | 	rdlong	arg05, fp
184e0     37 00 00 FF 
184e4     2C E4 05 F1 | 	add	objptr, ##28204
184e8     F2 1A 62 FC | 	wrlong	arg05, objptr
184ec     04 4E 05 F1 | 	add	fp, #4
184f0     A7 1A 02 FB | 	rdlong	arg05, fp
184f4     1C 4E 85 F1 | 	sub	fp, #28
184f8     04 E4 05 F1 | 	add	objptr, #4
184fc     F2 1A 62 FC | 	wrlong	arg05, objptr
18500     37 00 00 FF 
18504     30 E4 85 F1 | 	sub	objptr, ##28208
18508     A7 F0 03 F6 | 	mov	ptra, fp
1850c     B2 00 A0 FD | 	call	#popregs_
18510                 | _do_draw_ret
18510     2D 00 64 FD | 	ret
18514                 | 
18514                 | ' 
18514                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
18514                 | ' 
18514                 | ' sub do_fcircle
18514                 | _do_fcircle
18514     02 4A 05 F6 | 	mov	COUNT_, #2
18518     A8 00 A0 FD | 	call	#pushregs_
1851c     24 F0 07 F1 | 	add	ptra, #36
18520     34 35 BF FD | 	call	#_pop
18524     FD 18 02 F6 | 	mov	arg04, result1
18528     FE 16 02 F6 | 	mov	arg03, result2
1852c     FF 14 02 F6 | 	mov	arg02, result3
18530     18 4E 05 F1 | 	add	fp, #24
18534     A7 18 62 FC | 	wrlong	arg04, fp
18538     04 4E 05 F1 | 	add	fp, #4
1853c     A7 16 62 FC | 	wrlong	arg03, fp
18540     04 4E 05 F1 | 	add	fp, #4
18544     A7 14 62 FC | 	wrlong	arg02, fp
18548     20 4E 85 F1 | 	sub	fp, #32
1854c     08 35 BF FD | 	call	#_pop
18550     FD 18 02 F6 | 	mov	arg04, result1
18554     FE 16 02 F6 | 	mov	arg03, result2
18558     FF 1E 02 F6 | 	mov	local01, result3
1855c     0C 4E 05 F1 | 	add	fp, #12
18560     A7 18 62 FC | 	wrlong	arg04, fp
18564     04 4E 05 F1 | 	add	fp, #4
18568     A7 16 62 FC | 	wrlong	arg03, fp
1856c     04 4E 05 F1 | 	add	fp, #4
18570     A7 1E 62 FC | 	wrlong	local01, fp
18574     14 4E 85 F1 | 	sub	fp, #20
18578     DC 34 BF FD | 	call	#_pop
1857c     A7 FA 61 FC | 	wrlong	result1, fp
18580     04 4E 05 F1 | 	add	fp, #4
18584     A7 FC 61 FC | 	wrlong	result2, fp
18588     04 4E 05 F1 | 	add	fp, #4
1858c     A7 FE 61 FC | 	wrlong	result3, fp
18590                 | ' 
18590                 | ' t3=pop()
18590                 | ' t2=pop()
18590                 | ' t1=pop()
18590                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
18590     FF 18 02 F6 | 	mov	arg04, result3
18594     08 4E 85 F1 | 	sub	fp, #8
18598     1C 18 0E F2 | 	cmp	arg04, #28 wz
1859c     08 4E 05 51 |  if_ne	add	fp, #8
185a0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
185a4     08 4E 85 51 |  if_ne	sub	fp, #8
185a8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
185ac     7C 00 90 5D |  if_ne	jmp	#LR__2000
185b0     14 4E 05 F1 | 	add	fp, #20
185b4     A7 1E 02 FB | 	rdlong	local01, fp
185b8     14 4E 85 F1 | 	sub	fp, #20
185bc     1C 1E 0E F2 | 	cmp	local01, #28 wz
185c0     14 4E 05 51 |  if_ne	add	fp, #20
185c4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
185c8     14 4E 85 51 |  if_ne	sub	fp, #20
185cc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
185d0     58 00 90 5D |  if_ne	jmp	#LR__2000
185d4     20 4E 05 F1 | 	add	fp, #32
185d8     A7 1E 02 FB | 	rdlong	local01, fp
185dc     20 4E 85 F1 | 	sub	fp, #32
185e0     1C 1E 0E F2 | 	cmp	local01, #28 wz
185e4     20 4E 05 51 |  if_ne	add	fp, #32
185e8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
185ec     20 4E 85 51 |  if_ne	sub	fp, #32
185f0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
185f4     34 00 90 5D |  if_ne	jmp	#LR__2000
185f8     A7 12 02 FB | 	rdlong	arg01, fp
185fc     0C 4E 05 F1 | 	add	fp, #12
18600     A7 14 02 FB | 	rdlong	arg02, fp
18604     0C 4E 05 F1 | 	add	fp, #12
18608     A7 16 02 FB | 	rdlong	arg03, fp
1860c     18 4E 85 F1 | 	sub	fp, #24
18610     37 00 00 FF 
18614     28 E4 05 F1 | 	add	objptr, ##28200
18618     F2 18 02 FB | 	rdlong	arg04, objptr
1861c     37 00 00 FF 
18620     28 E4 85 F1 | 	sub	objptr, ##28200
18624     44 66 B0 FD | 	call	#_hg010b_spin2_fcircle
18628                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
18628     54 00 90 FD | 	jmp	#LR__2001
1862c                 | LR__2000
1862c     A7 12 02 F6 | 	mov	arg01, fp
18630     C0 D5 BF FD | 	call	#_converttoint
18634     FD 1E 02 F6 | 	mov	local01, result1
18638     0C 4E 05 F1 | 	add	fp, #12
1863c     A7 12 02 F6 | 	mov	arg01, fp
18640     0C 4E 85 F1 | 	sub	fp, #12
18644     AC D5 BF FD | 	call	#_converttoint
18648     FD 20 02 F6 | 	mov	local02, result1
1864c     18 4E 05 F1 | 	add	fp, #24
18650     A7 12 02 F6 | 	mov	arg01, fp
18654     18 4E 85 F1 | 	sub	fp, #24
18658     98 D5 BF FD | 	call	#_converttoint
1865c     FD 16 02 F6 | 	mov	arg03, result1
18660     37 00 00 FF 
18664     28 E4 05 F1 | 	add	objptr, ##28200
18668     F2 18 02 FB | 	rdlong	arg04, objptr
1866c     37 00 00 FF 
18670     28 E4 85 F1 | 	sub	objptr, ##28200
18674     0F 13 02 F6 | 	mov	arg01, local01
18678     10 15 02 F6 | 	mov	arg02, local02
1867c     EC 65 B0 FD | 	call	#_hg010b_spin2_fcircle
18680                 | LR__2001
18680     A7 F0 03 F6 | 	mov	ptra, fp
18684     B2 00 A0 FD | 	call	#popregs_
18688                 | _do_fcircle_ret
18688     2D 00 64 FD | 	ret
1868c                 | 
1868c                 | ' 
1868c                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
1868c                 | ' 
1868c                 | ' sub do_circle
1868c                 | _do_circle
1868c     02 4A 05 F6 | 	mov	COUNT_, #2
18690     A8 00 A0 FD | 	call	#pushregs_
18694     24 F0 07 F1 | 	add	ptra, #36
18698     BC 33 BF FD | 	call	#_pop
1869c     FD 18 02 F6 | 	mov	arg04, result1
186a0     FE 16 02 F6 | 	mov	arg03, result2
186a4     FF 14 02 F6 | 	mov	arg02, result3
186a8     18 4E 05 F1 | 	add	fp, #24
186ac     A7 18 62 FC | 	wrlong	arg04, fp
186b0     04 4E 05 F1 | 	add	fp, #4
186b4     A7 16 62 FC | 	wrlong	arg03, fp
186b8     04 4E 05 F1 | 	add	fp, #4
186bc     A7 14 62 FC | 	wrlong	arg02, fp
186c0     20 4E 85 F1 | 	sub	fp, #32
186c4     90 33 BF FD | 	call	#_pop
186c8     FD 18 02 F6 | 	mov	arg04, result1
186cc     FE 16 02 F6 | 	mov	arg03, result2
186d0     FF 1E 02 F6 | 	mov	local01, result3
186d4     0C 4E 05 F1 | 	add	fp, #12
186d8     A7 18 62 FC | 	wrlong	arg04, fp
186dc     04 4E 05 F1 | 	add	fp, #4
186e0     A7 16 62 FC | 	wrlong	arg03, fp
186e4     04 4E 05 F1 | 	add	fp, #4
186e8     A7 1E 62 FC | 	wrlong	local01, fp
186ec     14 4E 85 F1 | 	sub	fp, #20
186f0     64 33 BF FD | 	call	#_pop
186f4     A7 FA 61 FC | 	wrlong	result1, fp
186f8     04 4E 05 F1 | 	add	fp, #4
186fc     A7 FC 61 FC | 	wrlong	result2, fp
18700     04 4E 05 F1 | 	add	fp, #4
18704     A7 FE 61 FC | 	wrlong	result3, fp
18708                 | ' 
18708                 | ' t3=pop()
18708                 | ' t2=pop()
18708                 | ' t1=pop()
18708                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
18708     FF 18 02 F6 | 	mov	arg04, result3
1870c     08 4E 85 F1 | 	sub	fp, #8
18710     1C 18 0E F2 | 	cmp	arg04, #28 wz
18714     08 4E 05 51 |  if_ne	add	fp, #8
18718     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1871c     08 4E 85 51 |  if_ne	sub	fp, #8
18720     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
18724     7C 00 90 5D |  if_ne	jmp	#LR__2010
18728     14 4E 05 F1 | 	add	fp, #20
1872c     A7 1E 02 FB | 	rdlong	local01, fp
18730     14 4E 85 F1 | 	sub	fp, #20
18734     1C 1E 0E F2 | 	cmp	local01, #28 wz
18738     14 4E 05 51 |  if_ne	add	fp, #20
1873c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18740     14 4E 85 51 |  if_ne	sub	fp, #20
18744     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18748     58 00 90 5D |  if_ne	jmp	#LR__2010
1874c     20 4E 05 F1 | 	add	fp, #32
18750     A7 1E 02 FB | 	rdlong	local01, fp
18754     20 4E 85 F1 | 	sub	fp, #32
18758     1C 1E 0E F2 | 	cmp	local01, #28 wz
1875c     20 4E 05 51 |  if_ne	add	fp, #32
18760     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18764     20 4E 85 51 |  if_ne	sub	fp, #32
18768     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1876c     34 00 90 5D |  if_ne	jmp	#LR__2010
18770     A7 12 02 FB | 	rdlong	arg01, fp
18774     0C 4E 05 F1 | 	add	fp, #12
18778     A7 14 02 FB | 	rdlong	arg02, fp
1877c     0C 4E 05 F1 | 	add	fp, #12
18780     A7 16 02 FB | 	rdlong	arg03, fp
18784     18 4E 85 F1 | 	sub	fp, #24
18788     37 00 00 FF 
1878c     28 E4 05 F1 | 	add	objptr, ##28200
18790     F2 18 02 FB | 	rdlong	arg04, objptr
18794     37 00 00 FF 
18798     28 E4 85 F1 | 	sub	objptr, ##28200
1879c     D8 65 B0 FD | 	call	#_hg010b_spin2_circle
187a0                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
187a0     54 00 90 FD | 	jmp	#LR__2011
187a4                 | LR__2010
187a4     A7 12 02 F6 | 	mov	arg01, fp
187a8     48 D4 BF FD | 	call	#_converttoint
187ac     FD 1E 02 F6 | 	mov	local01, result1
187b0     0C 4E 05 F1 | 	add	fp, #12
187b4     A7 12 02 F6 | 	mov	arg01, fp
187b8     0C 4E 85 F1 | 	sub	fp, #12
187bc     34 D4 BF FD | 	call	#_converttoint
187c0     FD 20 02 F6 | 	mov	local02, result1
187c4     18 4E 05 F1 | 	add	fp, #24
187c8     A7 12 02 F6 | 	mov	arg01, fp
187cc     18 4E 85 F1 | 	sub	fp, #24
187d0     20 D4 BF FD | 	call	#_converttoint
187d4     FD 16 02 F6 | 	mov	arg03, result1
187d8     37 00 00 FF 
187dc     28 E4 05 F1 | 	add	objptr, ##28200
187e0     F2 18 02 FB | 	rdlong	arg04, objptr
187e4     37 00 00 FF 
187e8     28 E4 85 F1 | 	sub	objptr, ##28200
187ec     0F 13 02 F6 | 	mov	arg01, local01
187f0     10 15 02 F6 | 	mov	arg02, local02
187f4     80 65 B0 FD | 	call	#_hg010b_spin2_circle
187f8                 | LR__2011
187f8     A7 F0 03 F6 | 	mov	ptra, fp
187fc     B2 00 A0 FD | 	call	#popregs_
18800                 | _do_circle_ret
18800     2D 00 64 FD | 	ret
18804                 | 
18804                 | ' 
18804                 | ' ' -------------------------- Draw a rectangle
18804                 | ' 
18804                 | ' sub do_box
18804                 | _do_box
18804     03 4A 05 F6 | 	mov	COUNT_, #3
18808     A8 00 A0 FD | 	call	#pushregs_
1880c     30 F0 07 F1 | 	add	ptra, #48
18810     44 32 BF FD | 	call	#_pop
18814     FD 1A 02 F6 | 	mov	arg05, result1
18818     FE 18 02 F6 | 	mov	arg04, result2
1881c     FF 16 02 F6 | 	mov	arg03, result3
18820     24 4E 05 F1 | 	add	fp, #36
18824     A7 1A 62 FC | 	wrlong	arg05, fp
18828     04 4E 05 F1 | 	add	fp, #4
1882c     A7 18 62 FC | 	wrlong	arg04, fp
18830     04 4E 05 F1 | 	add	fp, #4
18834     A7 16 62 FC | 	wrlong	arg03, fp
18838     2C 4E 85 F1 | 	sub	fp, #44
1883c     18 32 BF FD | 	call	#_pop
18840     FD 1A 02 F6 | 	mov	arg05, result1
18844     FE 18 02 F6 | 	mov	arg04, result2
18848     FF 16 02 F6 | 	mov	arg03, result3
1884c     18 4E 05 F1 | 	add	fp, #24
18850     A7 1A 62 FC | 	wrlong	arg05, fp
18854     04 4E 05 F1 | 	add	fp, #4
18858     A7 18 62 FC | 	wrlong	arg04, fp
1885c     04 4E 05 F1 | 	add	fp, #4
18860     A7 16 62 FC | 	wrlong	arg03, fp
18864     20 4E 85 F1 | 	sub	fp, #32
18868     EC 31 BF FD | 	call	#_pop
1886c     FD 1A 02 F6 | 	mov	arg05, result1
18870     FE 18 02 F6 | 	mov	arg04, result2
18874     FF 1E 02 F6 | 	mov	local01, result3
18878     0C 4E 05 F1 | 	add	fp, #12
1887c     A7 1A 62 FC | 	wrlong	arg05, fp
18880     04 4E 05 F1 | 	add	fp, #4
18884     A7 18 62 FC | 	wrlong	arg04, fp
18888     04 4E 05 F1 | 	add	fp, #4
1888c     A7 1E 62 FC | 	wrlong	local01, fp
18890     14 4E 85 F1 | 	sub	fp, #20
18894     C0 31 BF FD | 	call	#_pop
18898     A7 FA 61 FC | 	wrlong	result1, fp
1889c     04 4E 05 F1 | 	add	fp, #4
188a0     A7 FC 61 FC | 	wrlong	result2, fp
188a4     04 4E 05 F1 | 	add	fp, #4
188a8     A7 FE 61 FC | 	wrlong	result3, fp
188ac                 | ' 
188ac                 | ' t4=pop()
188ac                 | ' t3=pop()
188ac                 | ' t2=pop()
188ac                 | ' t1=pop()
188ac                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
188ac     FF 1A 02 F6 | 	mov	arg05, result3
188b0     08 4E 85 F1 | 	sub	fp, #8
188b4     1C 1A 0E F2 | 	cmp	arg05, #28 wz
188b8     08 4E 05 51 |  if_ne	add	fp, #8
188bc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
188c0     08 4E 85 51 |  if_ne	sub	fp, #8
188c4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
188c8     A8 00 90 5D |  if_ne	jmp	#LR__2020
188cc     14 4E 05 F1 | 	add	fp, #20
188d0     A7 1E 02 FB | 	rdlong	local01, fp
188d4     14 4E 85 F1 | 	sub	fp, #20
188d8     1C 1E 0E F2 | 	cmp	local01, #28 wz
188dc     14 4E 05 51 |  if_ne	add	fp, #20
188e0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
188e4     14 4E 85 51 |  if_ne	sub	fp, #20
188e8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
188ec     84 00 90 5D |  if_ne	jmp	#LR__2020
188f0     20 4E 05 F1 | 	add	fp, #32
188f4     A7 1E 02 FB | 	rdlong	local01, fp
188f8     20 4E 85 F1 | 	sub	fp, #32
188fc     1C 1E 0E F2 | 	cmp	local01, #28 wz
18900     20 4E 05 51 |  if_ne	add	fp, #32
18904     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18908     20 4E 85 51 |  if_ne	sub	fp, #32
1890c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18910     60 00 90 5D |  if_ne	jmp	#LR__2020
18914     2C 4E 05 F1 | 	add	fp, #44
18918     A7 1E 02 FB | 	rdlong	local01, fp
1891c     2C 4E 85 F1 | 	sub	fp, #44
18920     1C 1E 0E F2 | 	cmp	local01, #28 wz
18924     2C 4E 05 51 |  if_ne	add	fp, #44
18928     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
1892c     2C 4E 85 51 |  if_ne	sub	fp, #44
18930     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18934     3C 00 90 5D |  if_ne	jmp	#LR__2020
18938     A7 12 02 FB | 	rdlong	arg01, fp
1893c     0C 4E 05 F1 | 	add	fp, #12
18940     A7 14 02 FB | 	rdlong	arg02, fp
18944     0C 4E 05 F1 | 	add	fp, #12
18948     A7 16 02 FB | 	rdlong	arg03, fp
1894c     0C 4E 05 F1 | 	add	fp, #12
18950     A7 18 02 FB | 	rdlong	arg04, fp
18954     24 4E 85 F1 | 	sub	fp, #36
18958     37 00 00 FF 
1895c     28 E4 05 F1 | 	add	objptr, ##28200
18960     F2 1A 02 FB | 	rdlong	arg05, objptr
18964     37 00 00 FF 
18968     28 E4 85 F1 | 	sub	objptr, ##28200
1896c     D4 65 B0 FD | 	call	#_hg010b_spin2_box
18970                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
18970     6C 00 90 FD | 	jmp	#LR__2021
18974                 | LR__2020
18974     A7 12 02 F6 | 	mov	arg01, fp
18978     78 D2 BF FD | 	call	#_converttoint
1897c     FD 20 02 F6 | 	mov	local02, result1
18980     0C 4E 05 F1 | 	add	fp, #12
18984     A7 12 02 F6 | 	mov	arg01, fp
18988     0C 4E 85 F1 | 	sub	fp, #12
1898c     64 D2 BF FD | 	call	#_converttoint
18990     FD 22 02 F6 | 	mov	local03, result1
18994     18 4E 05 F1 | 	add	fp, #24
18998     A7 12 02 F6 | 	mov	arg01, fp
1899c     18 4E 85 F1 | 	sub	fp, #24
189a0     50 D2 BF FD | 	call	#_converttoint
189a4     FD 1E 02 F6 | 	mov	local01, result1
189a8     24 4E 05 F1 | 	add	fp, #36
189ac     A7 12 02 F6 | 	mov	arg01, fp
189b0     24 4E 85 F1 | 	sub	fp, #36
189b4     3C D2 BF FD | 	call	#_converttoint
189b8     FD 18 02 F6 | 	mov	arg04, result1
189bc     37 00 00 FF 
189c0     28 E4 05 F1 | 	add	objptr, ##28200
189c4     F2 1A 02 FB | 	rdlong	arg05, objptr
189c8     37 00 00 FF 
189cc     28 E4 85 F1 | 	sub	objptr, ##28200
189d0     10 13 02 F6 | 	mov	arg01, local02
189d4     11 15 02 F6 | 	mov	arg02, local03
189d8     0F 17 02 F6 | 	mov	arg03, local01
189dc     64 65 B0 FD | 	call	#_hg010b_spin2_box
189e0                 | LR__2021
189e0     A7 F0 03 F6 | 	mov	ptra, fp
189e4     B2 00 A0 FD | 	call	#popregs_
189e8                 | _do_box_ret
189e8     2D 00 64 FD | 	ret
189ec                 | 
189ec                 | ' 
189ec                 | ' sub do_fill
189ec                 | _do_fill
189ec     03 4A 05 F6 | 	mov	COUNT_, #3
189f0     A8 00 A0 FD | 	call	#pushregs_
189f4     30 F0 07 F1 | 	add	ptra, #48
189f8     5C 30 BF FD | 	call	#_pop
189fc     FD 18 02 F6 | 	mov	arg04, result1
18a00     FE 16 02 F6 | 	mov	arg03, result2
18a04     FF 14 02 F6 | 	mov	arg02, result3
18a08     24 4E 05 F1 | 	add	fp, #36
18a0c     A7 18 62 FC | 	wrlong	arg04, fp
18a10     04 4E 05 F1 | 	add	fp, #4
18a14     A7 16 62 FC | 	wrlong	arg03, fp
18a18     04 4E 05 F1 | 	add	fp, #4
18a1c     A7 14 62 FC | 	wrlong	arg02, fp
18a20     2C 4E 85 F1 | 	sub	fp, #44
18a24     30 30 BF FD | 	call	#_pop
18a28     FD 18 02 F6 | 	mov	arg04, result1
18a2c     FE 16 02 F6 | 	mov	arg03, result2
18a30     FF 14 02 F6 | 	mov	arg02, result3
18a34     18 4E 05 F1 | 	add	fp, #24
18a38     A7 18 62 FC | 	wrlong	arg04, fp
18a3c     04 4E 05 F1 | 	add	fp, #4
18a40     A7 16 62 FC | 	wrlong	arg03, fp
18a44     04 4E 05 F1 | 	add	fp, #4
18a48     A7 14 62 FC | 	wrlong	arg02, fp
18a4c     20 4E 85 F1 | 	sub	fp, #32
18a50     04 30 BF FD | 	call	#_pop
18a54     FD 18 02 F6 | 	mov	arg04, result1
18a58     FE 16 02 F6 | 	mov	arg03, result2
18a5c     FF 1E 02 F6 | 	mov	local01, result3
18a60     0C 4E 05 F1 | 	add	fp, #12
18a64     A7 18 62 FC | 	wrlong	arg04, fp
18a68     04 4E 05 F1 | 	add	fp, #4
18a6c     A7 16 62 FC | 	wrlong	arg03, fp
18a70     04 4E 05 F1 | 	add	fp, #4
18a74     A7 1E 62 FC | 	wrlong	local01, fp
18a78     14 4E 85 F1 | 	sub	fp, #20
18a7c     D8 2F BF FD | 	call	#_pop
18a80     A7 FA 61 FC | 	wrlong	result1, fp
18a84     04 4E 05 F1 | 	add	fp, #4
18a88     A7 FC 61 FC | 	wrlong	result2, fp
18a8c     04 4E 05 F1 | 	add	fp, #4
18a90     A7 FE 61 FC | 	wrlong	result3, fp
18a94                 | ' 
18a94                 | ' t4=pop()
18a94                 | ' t3=pop()
18a94                 | ' t2=pop()
18a94                 | ' t1=pop()
18a94                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
18a94     FF 18 02 F6 | 	mov	arg04, result3
18a98     08 4E 85 F1 | 	sub	fp, #8
18a9c     1C 18 0E F2 | 	cmp	arg04, #28 wz
18aa0     08 4E 05 51 |  if_ne	add	fp, #8
18aa4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
18aa8     08 4E 85 51 |  if_ne	sub	fp, #8
18aac     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
18ab0     94 00 90 5D |  if_ne	jmp	#LR__2030
18ab4     14 4E 05 F1 | 	add	fp, #20
18ab8     A7 1E 02 FB | 	rdlong	local01, fp
18abc     14 4E 85 F1 | 	sub	fp, #20
18ac0     1C 1E 0E F2 | 	cmp	local01, #28 wz
18ac4     14 4E 05 51 |  if_ne	add	fp, #20
18ac8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18acc     14 4E 85 51 |  if_ne	sub	fp, #20
18ad0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18ad4     70 00 90 5D |  if_ne	jmp	#LR__2030
18ad8     20 4E 05 F1 | 	add	fp, #32
18adc     A7 1E 02 FB | 	rdlong	local01, fp
18ae0     20 4E 85 F1 | 	sub	fp, #32
18ae4     1C 1E 0E F2 | 	cmp	local01, #28 wz
18ae8     20 4E 05 51 |  if_ne	add	fp, #32
18aec     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18af0     20 4E 85 51 |  if_ne	sub	fp, #32
18af4     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18af8     4C 00 90 5D |  if_ne	jmp	#LR__2030
18afc     2C 4E 05 F1 | 	add	fp, #44
18b00     A7 1E 02 FB | 	rdlong	local01, fp
18b04     2C 4E 85 F1 | 	sub	fp, #44
18b08     1C 1E 0E F2 | 	cmp	local01, #28 wz
18b0c     2C 4E 05 51 |  if_ne	add	fp, #44
18b10     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18b14     2C 4E 85 51 |  if_ne	sub	fp, #44
18b18     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18b1c     28 00 90 5D |  if_ne	jmp	#LR__2030
18b20     A7 12 02 FB | 	rdlong	arg01, fp
18b24     0C 4E 05 F1 | 	add	fp, #12
18b28     A7 14 02 FB | 	rdlong	arg02, fp
18b2c     0C 4E 05 F1 | 	add	fp, #12
18b30     A7 16 02 FB | 	rdlong	arg03, fp
18b34     0C 4E 05 F1 | 	add	fp, #12
18b38     A7 18 02 FB | 	rdlong	arg04, fp
18b3c     24 4E 85 F1 | 	sub	fp, #36
18b40     94 5E B0 FD | 	call	#_hg010b_spin2_fill
18b44                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
18b44     58 00 90 FD | 	jmp	#LR__2031
18b48                 | LR__2030
18b48     A7 12 02 F6 | 	mov	arg01, fp
18b4c     A4 D0 BF FD | 	call	#_converttoint
18b50     FD 20 02 F6 | 	mov	local02, result1
18b54     0C 4E 05 F1 | 	add	fp, #12
18b58     A7 12 02 F6 | 	mov	arg01, fp
18b5c     0C 4E 85 F1 | 	sub	fp, #12
18b60     90 D0 BF FD | 	call	#_converttoint
18b64     FD 22 02 F6 | 	mov	local03, result1
18b68     18 4E 05 F1 | 	add	fp, #24
18b6c     A7 12 02 F6 | 	mov	arg01, fp
18b70     18 4E 85 F1 | 	sub	fp, #24
18b74     7C D0 BF FD | 	call	#_converttoint
18b78     FD 1E 02 F6 | 	mov	local01, result1
18b7c     24 4E 05 F1 | 	add	fp, #36
18b80     A7 12 02 F6 | 	mov	arg01, fp
18b84     24 4E 85 F1 | 	sub	fp, #36
18b88     68 D0 BF FD | 	call	#_converttoint
18b8c     FD 18 02 F6 | 	mov	arg04, result1
18b90     10 13 02 F6 | 	mov	arg01, local02
18b94     11 15 02 F6 | 	mov	arg02, local03
18b98     0F 17 02 F6 | 	mov	arg03, local01
18b9c     38 5E B0 FD | 	call	#_hg010b_spin2_fill
18ba0                 | LR__2031
18ba0     A7 F0 03 F6 | 	mov	ptra, fp
18ba4     B2 00 A0 FD | 	call	#popregs_
18ba8                 | _do_fill_ret
18ba8     2D 00 64 FD | 	ret
18bac                 | 
18bac                 | ' 
18bac                 | ' ' -------------------------- Draw a frane
18bac                 | ' 
18bac                 | ' sub do_frame
18bac                 | _do_frame
18bac     03 4A 05 F6 | 	mov	COUNT_, #3
18bb0     A8 00 A0 FD | 	call	#pushregs_
18bb4     30 F0 07 F1 | 	add	ptra, #48
18bb8     9C 2E BF FD | 	call	#_pop
18bbc     FD 1A 02 F6 | 	mov	arg05, result1
18bc0     FE 18 02 F6 | 	mov	arg04, result2
18bc4     FF 16 02 F6 | 	mov	arg03, result3
18bc8     24 4E 05 F1 | 	add	fp, #36
18bcc     A7 1A 62 FC | 	wrlong	arg05, fp
18bd0     04 4E 05 F1 | 	add	fp, #4
18bd4     A7 18 62 FC | 	wrlong	arg04, fp
18bd8     04 4E 05 F1 | 	add	fp, #4
18bdc     A7 16 62 FC | 	wrlong	arg03, fp
18be0     2C 4E 85 F1 | 	sub	fp, #44
18be4     70 2E BF FD | 	call	#_pop
18be8     FD 1A 02 F6 | 	mov	arg05, result1
18bec     FE 18 02 F6 | 	mov	arg04, result2
18bf0     FF 16 02 F6 | 	mov	arg03, result3
18bf4     18 4E 05 F1 | 	add	fp, #24
18bf8     A7 1A 62 FC | 	wrlong	arg05, fp
18bfc     04 4E 05 F1 | 	add	fp, #4
18c00     A7 18 62 FC | 	wrlong	arg04, fp
18c04     04 4E 05 F1 | 	add	fp, #4
18c08     A7 16 62 FC | 	wrlong	arg03, fp
18c0c     20 4E 85 F1 | 	sub	fp, #32
18c10     44 2E BF FD | 	call	#_pop
18c14     FD 1A 02 F6 | 	mov	arg05, result1
18c18     FE 18 02 F6 | 	mov	arg04, result2
18c1c     FF 1E 02 F6 | 	mov	local01, result3
18c20     0C 4E 05 F1 | 	add	fp, #12
18c24     A7 1A 62 FC | 	wrlong	arg05, fp
18c28     04 4E 05 F1 | 	add	fp, #4
18c2c     A7 18 62 FC | 	wrlong	arg04, fp
18c30     04 4E 05 F1 | 	add	fp, #4
18c34     A7 1E 62 FC | 	wrlong	local01, fp
18c38     14 4E 85 F1 | 	sub	fp, #20
18c3c     18 2E BF FD | 	call	#_pop
18c40     A7 FA 61 FC | 	wrlong	result1, fp
18c44     04 4E 05 F1 | 	add	fp, #4
18c48     A7 FC 61 FC | 	wrlong	result2, fp
18c4c     04 4E 05 F1 | 	add	fp, #4
18c50     A7 FE 61 FC | 	wrlong	result3, fp
18c54                 | ' 
18c54                 | ' t4=pop()
18c54                 | ' t3=pop()
18c54                 | ' t2=pop()
18c54                 | ' t1=pop()
18c54                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
18c54     FF 1A 02 F6 | 	mov	arg05, result3
18c58     08 4E 85 F1 | 	sub	fp, #8
18c5c     1C 1A 0E F2 | 	cmp	arg05, #28 wz
18c60     08 4E 05 51 |  if_ne	add	fp, #8
18c64     A7 1E 02 5B |  if_ne	rdlong	local01, fp
18c68     08 4E 85 51 |  if_ne	sub	fp, #8
18c6c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
18c70     A8 00 90 5D |  if_ne	jmp	#LR__2040
18c74     14 4E 05 F1 | 	add	fp, #20
18c78     A7 1E 02 FB | 	rdlong	local01, fp
18c7c     14 4E 85 F1 | 	sub	fp, #20
18c80     1C 1E 0E F2 | 	cmp	local01, #28 wz
18c84     14 4E 05 51 |  if_ne	add	fp, #20
18c88     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18c8c     14 4E 85 51 |  if_ne	sub	fp, #20
18c90     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18c94     84 00 90 5D |  if_ne	jmp	#LR__2040
18c98     20 4E 05 F1 | 	add	fp, #32
18c9c     A7 1E 02 FB | 	rdlong	local01, fp
18ca0     20 4E 85 F1 | 	sub	fp, #32
18ca4     1C 1E 0E F2 | 	cmp	local01, #28 wz
18ca8     20 4E 05 51 |  if_ne	add	fp, #32
18cac     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18cb0     20 4E 85 51 |  if_ne	sub	fp, #32
18cb4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18cb8     60 00 90 5D |  if_ne	jmp	#LR__2040
18cbc     2C 4E 05 F1 | 	add	fp, #44
18cc0     A7 1E 02 FB | 	rdlong	local01, fp
18cc4     2C 4E 85 F1 | 	sub	fp, #44
18cc8     1C 1E 0E F2 | 	cmp	local01, #28 wz
18ccc     2C 4E 05 51 |  if_ne	add	fp, #44
18cd0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18cd4     2C 4E 85 51 |  if_ne	sub	fp, #44
18cd8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18cdc     3C 00 90 5D |  if_ne	jmp	#LR__2040
18ce0     A7 12 02 FB | 	rdlong	arg01, fp
18ce4     0C 4E 05 F1 | 	add	fp, #12
18ce8     A7 14 02 FB | 	rdlong	arg02, fp
18cec     0C 4E 05 F1 | 	add	fp, #12
18cf0     A7 16 02 FB | 	rdlong	arg03, fp
18cf4     0C 4E 05 F1 | 	add	fp, #12
18cf8     A7 18 02 FB | 	rdlong	arg04, fp
18cfc     24 4E 85 F1 | 	sub	fp, #36
18d00     37 00 00 FF 
18d04     28 E4 05 F1 | 	add	objptr, ##28200
18d08     F2 1A 02 FB | 	rdlong	arg05, objptr
18d0c     37 00 00 FF 
18d10     28 E4 85 F1 | 	sub	objptr, ##28200
18d14     AC 61 B0 FD | 	call	#_hg010b_spin2_frame
18d18                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
18d18     6C 00 90 FD | 	jmp	#LR__2041
18d1c                 | LR__2040
18d1c     A7 12 02 F6 | 	mov	arg01, fp
18d20     D0 CE BF FD | 	call	#_converttoint
18d24     FD 20 02 F6 | 	mov	local02, result1
18d28     0C 4E 05 F1 | 	add	fp, #12
18d2c     A7 12 02 F6 | 	mov	arg01, fp
18d30     0C 4E 85 F1 | 	sub	fp, #12
18d34     BC CE BF FD | 	call	#_converttoint
18d38     FD 22 02 F6 | 	mov	local03, result1
18d3c     18 4E 05 F1 | 	add	fp, #24
18d40     A7 12 02 F6 | 	mov	arg01, fp
18d44     18 4E 85 F1 | 	sub	fp, #24
18d48     A8 CE BF FD | 	call	#_converttoint
18d4c     FD 1E 02 F6 | 	mov	local01, result1
18d50     24 4E 05 F1 | 	add	fp, #36
18d54     A7 12 02 F6 | 	mov	arg01, fp
18d58     24 4E 85 F1 | 	sub	fp, #36
18d5c     94 CE BF FD | 	call	#_converttoint
18d60     FD 18 02 F6 | 	mov	arg04, result1
18d64     37 00 00 FF 
18d68     28 E4 05 F1 | 	add	objptr, ##28200
18d6c     F2 1A 02 FB | 	rdlong	arg05, objptr
18d70     37 00 00 FF 
18d74     28 E4 85 F1 | 	sub	objptr, ##28200
18d78     10 13 02 F6 | 	mov	arg01, local02
18d7c     11 15 02 F6 | 	mov	arg02, local03
18d80     0F 17 02 F6 | 	mov	arg03, local01
18d84     3C 61 B0 FD | 	call	#_hg010b_spin2_frame
18d88                 | LR__2041
18d88     A7 F0 03 F6 | 	mov	ptra, fp
18d8c     B2 00 A0 FD | 	call	#popregs_
18d90                 | _do_frame_ret
18d90     2D 00 64 FD | 	ret
18d94                 | 
18d94                 | ' 
18d94                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
18d94                 | ' 
18d94                 | ' ' ------------------------- Print to the screem
18d94                 | ' 
18d94                 | ' sub do_print  
18d94                 | _do_print
18d94     0B 4A 05 F6 | 	mov	COUNT_, #11
18d98     A8 00 A0 FD | 	call	#pushregs_
18d9c     00 24 06 F6 | 	mov	local04, #0
18da0     B4 2C BF FD | 	call	#_pop
18da4     FD 26 02 F6 | 	mov	local05, result1
18da8     FE 28 02 F6 | 	mov	local06, result2
18dac     FF 2A 02 F6 | 	mov	local07, result3
18db0     13 1F 02 F6 | 	mov	local01, local05
18db4     14 21 02 F6 | 	mov	local02, local06
18db8     15 23 02 F6 | 	mov	local03, local07
18dbc                 | '  
18dbc                 | ' r=0
18dbc                 | ' t1=pop() 
18dbc                 | ' 'print t1.result_type,t1.result.uresult
18dbc                 | ' 
18dbc                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
18dbc     21 22 0E F2 | 	cmp	local03, #33 wz
18dc0     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
18dc4     20 00 90 5D |  if_ne	jmp	#LR__2050
18dc8     11 25 02 F6 | 	mov	local04, local03
18dcc     88 2C BF FD | 	call	#_pop
18dd0     FD 26 02 F6 | 	mov	local05, result1
18dd4     FE 28 02 F6 | 	mov	local06, result2
18dd8     FF 2A 02 F6 | 	mov	local07, result3
18ddc     13 1F 02 F6 | 	mov	local01, local05
18de0     14 21 02 F6 | 	mov	local02, local06
18de4     15 23 02 F6 | 	mov	local03, local07
18de8                 | LR__2050
18de8                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
18de8     20 22 0E F2 | 	cmp	local03, #32 wz
18dec     11 25 02 A6 |  if_e	mov	local04, local03
18df0                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
18df0     FF 22 0E F2 | 	cmp	local03, #255 wz
18df4     0C 00 90 5D |  if_ne	jmp	#LR__2051
18df8     0F 13 02 F6 | 	mov	arg01, local01
18dfc     50 47 B0 FD | 	call	#_printerror
18e00     D4 04 90 FD | 	jmp	#LR__2070
18e04                 | LR__2051
18e04                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
18e04     2B 22 0E F2 | 	cmp	local03, #43 wz
18e08     14 00 90 5D |  if_ne	jmp	#LR__2052
18e0c     0F 13 02 F6 | 	mov	arg01, local01
18e10     BC 85 BF FD | 	call	#_convertstring
18e14     FD 26 02 F6 | 	mov	local05, result1
18e18     13 1F 02 F6 | 	mov	local01, local05
18e1c     1F 22 06 F6 | 	mov	local03, #31
18e20                 | LR__2052
18e20                 | ' 
18e20                 | ' if t1.result_type=token_channel then print "Print to channel "; t1.result.iresult : t1=pop()
18e20     2C 22 0E F2 | 	cmp	local03, #44 wz
18e24     80 00 90 5D |  if_ne	jmp	#LR__2053
18e28     00 12 06 F6 | 	mov	arg01, #0
18e2c     F8 D6 B0 FD | 	call	#__system___getiolock_0540
18e30     FD 12 02 F6 | 	mov	arg01, result1
18e34     B0 7C B0 FD | 	call	#__system___lockmem
18e38     85 01 00 FF 
18e3c     A0 15 06 F6 | 	mov	arg02, ##@LR__5506
18e40     00 12 06 F6 | 	mov	arg01, #0
18e44     00 16 06 F6 | 	mov	arg03, #0
18e48     90 89 B0 FD | 	call	#__system___basic_print_string
18e4c     0A 2C 06 F6 | 	mov	local08, #10
18e50     00 12 06 F6 | 	mov	arg01, #0
18e54     0F 15 02 F6 | 	mov	arg02, local01
18e58     00 16 06 F6 | 	mov	arg03, #0
18e5c     0A 18 06 F6 | 	mov	arg04, #10
18e60     BC 89 B0 FD | 	call	#__system___basic_print_integer
18e64     FD 2E 02 F6 | 	mov	local09, result1
18e68     00 12 06 F6 | 	mov	arg01, #0
18e6c     0A 14 06 F6 | 	mov	arg02, #10
18e70     00 16 06 F6 | 	mov	arg03, #0
18e74     0C 89 B0 FD | 	call	#__system___basic_print_char
18e78     01 30 06 F6 | 	mov	local10, #1
18e7c     00 12 06 F6 | 	mov	arg01, #0
18e80     A4 D6 B0 FD | 	call	#__system___getiolock_0540
18e84     FD 00 68 FC | 	wrlong	#0, result1
18e88     00 32 06 F6 | 	mov	local11, #0
18e8c     C8 2B BF FD | 	call	#_pop
18e90     FD 26 02 F6 | 	mov	local05, result1
18e94     FE 28 02 F6 | 	mov	local06, result2
18e98     FF 2A 02 F6 | 	mov	local07, result3
18e9c     13 1F 02 F6 | 	mov	local01, local05
18ea0     14 21 02 F6 | 	mov	local02, local06
18ea4     15 23 02 F6 | 	mov	local03, local07
18ea8                 | LR__2053
18ea8                 | ' 
18ea8                 | ' if r=print_mod_comma  then
18ea8     21 24 0E F2 | 	cmp	local04, #33 wz
18eac     AC 01 90 5D |  if_ne	jmp	#LR__2058
18eb0                 | '   if t1.result_type=result_int then print t1.result.iresult,
18eb0     1C 22 0E F2 | 	cmp	local03, #28 wz
18eb4     64 00 90 5D |  if_ne	jmp	#LR__2054
18eb8     00 12 06 F6 | 	mov	arg01, #0
18ebc     68 D6 B0 FD | 	call	#__system___getiolock_0540
18ec0     FD 12 02 F6 | 	mov	arg01, result1
18ec4     20 7C B0 FD | 	call	#__system___lockmem
18ec8     00 28 06 F6 | 	mov	local06, #0
18ecc     00 12 06 F6 | 	mov	arg01, #0
18ed0     0F 15 02 F6 | 	mov	arg02, local01
18ed4     00 16 06 F6 | 	mov	arg03, #0
18ed8     0A 18 06 F6 | 	mov	arg04, #10
18edc     40 89 B0 FD | 	call	#__system___basic_print_integer
18ee0     FD 2A 02 F6 | 	mov	local07, result1
18ee4     14 27 02 F6 | 	mov	local05, local06
18ee8     15 27 02 F1 | 	add	local05, local07
18eec     00 32 06 F6 | 	mov	local11, #0
18ef0     00 12 06 F6 | 	mov	arg01, #0
18ef4     09 14 06 F6 | 	mov	arg02, #9
18ef8     00 16 06 F6 | 	mov	arg03, #0
18efc     84 88 B0 FD | 	call	#__system___basic_print_char
18f00     FD 2E 02 F6 | 	mov	local09, result1
18f04     FD 26 02 F1 | 	add	local05, result1
18f08     00 12 06 F6 | 	mov	arg01, #0
18f0c     18 D6 B0 FD | 	call	#__system___getiolock_0540
18f10     FD 00 68 FC | 	wrlong	#0, result1
18f14     00 FA 05 F6 | 	mov	result1, #0
18f18     00 30 06 F6 | 	mov	local10, #0
18f1c                 | LR__2054
18f1c                 | '   if t1.result_type=result_uint then print t1.result.uresult,
18f1c     1D 22 0E F2 | 	cmp	local03, #29 wz
18f20     64 00 90 5D |  if_ne	jmp	#LR__2055
18f24     00 12 06 F6 | 	mov	arg01, #0
18f28     FC D5 B0 FD | 	call	#__system___getiolock_0540
18f2c     FD 12 02 F6 | 	mov	arg01, result1
18f30     B4 7B B0 FD | 	call	#__system___lockmem
18f34     00 28 06 F6 | 	mov	local06, #0
18f38     00 12 06 F6 | 	mov	arg01, #0
18f3c     0F 15 02 F6 | 	mov	arg02, local01
18f40     00 16 06 F6 | 	mov	arg03, #0
18f44     0A 18 06 F6 | 	mov	arg04, #10
18f48     14 89 B0 FD | 	call	#__system___basic_print_unsigned
18f4c     FD 2A 02 F6 | 	mov	local07, result1
18f50     14 27 02 F6 | 	mov	local05, local06
18f54     15 27 02 F1 | 	add	local05, local07
18f58     00 32 06 F6 | 	mov	local11, #0
18f5c     00 12 06 F6 | 	mov	arg01, #0
18f60     09 14 06 F6 | 	mov	arg02, #9
18f64     00 16 06 F6 | 	mov	arg03, #0
18f68     18 88 B0 FD | 	call	#__system___basic_print_char
18f6c     FD 2E 02 F6 | 	mov	local09, result1
18f70     FD 26 02 F1 | 	add	local05, result1
18f74     00 12 06 F6 | 	mov	arg01, #0
18f78     AC D5 B0 FD | 	call	#__system___getiolock_0540
18f7c     FD 00 68 FC | 	wrlong	#0, result1
18f80     00 FA 05 F6 | 	mov	result1, #0
18f84     00 30 06 F6 | 	mov	local10, #0
18f88                 | LR__2055
18f88                 | '   if t1.result_type=result_float then print t1.result.fresult,
18f88     1E 22 0E F2 | 	cmp	local03, #30 wz
18f8c     64 00 90 5D |  if_ne	jmp	#LR__2056
18f90     00 12 06 F6 | 	mov	arg01, #0
18f94     90 D5 B0 FD | 	call	#__system___getiolock_0540
18f98     FD 12 02 F6 | 	mov	arg01, result1
18f9c     48 7B B0 FD | 	call	#__system___lockmem
18fa0     00 28 06 F6 | 	mov	local06, #0
18fa4     00 12 06 F6 | 	mov	arg01, #0
18fa8     0F 15 02 F6 | 	mov	arg02, local01
18fac     00 16 06 F6 | 	mov	arg03, #0
18fb0     23 18 06 F6 | 	mov	arg04, #35
18fb4     FC AC B0 FD | 	call	#__system___basic_print_float
18fb8     FD 2A 02 F6 | 	mov	local07, result1
18fbc     14 27 02 F6 | 	mov	local05, local06
18fc0     15 27 02 F1 | 	add	local05, local07
18fc4     00 32 06 F6 | 	mov	local11, #0
18fc8     00 12 06 F6 | 	mov	arg01, #0
18fcc     09 14 06 F6 | 	mov	arg02, #9
18fd0     00 16 06 F6 | 	mov	arg03, #0
18fd4     AC 87 B0 FD | 	call	#__system___basic_print_char
18fd8     FD 2E 02 F6 | 	mov	local09, result1
18fdc     FD 26 02 F1 | 	add	local05, result1
18fe0     00 12 06 F6 | 	mov	arg01, #0
18fe4     40 D5 B0 FD | 	call	#__system___getiolock_0540
18fe8     FD 00 68 FC | 	wrlong	#0, result1
18fec     00 FA 05 F6 | 	mov	result1, #0
18ff0     00 30 06 F6 | 	mov	local10, #0
18ff4                 | LR__2056
18ff4                 | '   if t1.result_type=result_string then print t1.result.sresult,
18ff4     1F 22 0E F2 | 	cmp	local03, #31 wz
18ff8     60 00 90 5D |  if_ne	jmp	#LR__2057
18ffc     00 12 06 F6 | 	mov	arg01, #0
19000     24 D5 B0 FD | 	call	#__system___getiolock_0540
19004     FD 12 02 F6 | 	mov	arg01, result1
19008     DC 7A B0 FD | 	call	#__system___lockmem
1900c     00 28 06 F6 | 	mov	local06, #0
19010     00 12 06 F6 | 	mov	arg01, #0
19014     0F 15 02 F6 | 	mov	arg02, local01
19018     00 16 06 F6 | 	mov	arg03, #0
1901c     BC 87 B0 FD | 	call	#__system___basic_print_string
19020     FD 2A 02 F6 | 	mov	local07, result1
19024     14 27 02 F6 | 	mov	local05, local06
19028     15 27 02 F1 | 	add	local05, local07
1902c     00 32 06 F6 | 	mov	local11, #0
19030     00 12 06 F6 | 	mov	arg01, #0
19034     09 14 06 F6 | 	mov	arg02, #9
19038     00 16 06 F6 | 	mov	arg03, #0
1903c     44 87 B0 FD | 	call	#__system___basic_print_char
19040     FD 2E 02 F6 | 	mov	local09, result1
19044     FD 26 02 F1 | 	add	local05, result1
19048     00 12 06 F6 | 	mov	arg01, #0
1904c     D8 D4 B0 FD | 	call	#__system___getiolock_0540
19050     FD 00 68 FC | 	wrlong	#0, result1
19054     00 FA 05 F6 | 	mov	result1, #0
19058     00 30 06 F6 | 	mov	local10, #0
1905c                 | LR__2057
1905c                 | LR__2058
1905c                 | ' if r=print_mod_semicolon then 
1905c     22 24 0E F2 | 	cmp	local04, #34 wz
19060     1C 01 90 5D |  if_ne	jmp	#LR__2063
19064                 | '   if t1.result_type=result_int then print t1.result.iresult;
19064     1C 22 0E F2 | 	cmp	local03, #28 wz
19068     50 00 90 5D |  if_ne	jmp	#LR__2059
1906c     00 12 06 F6 | 	mov	arg01, #0
19070     B4 D4 B0 FD | 	call	#__system___getiolock_0540
19074     FD 12 02 F6 | 	mov	arg01, result1
19078     6C 7A B0 FD | 	call	#__system___lockmem
1907c     00 28 06 F6 | 	mov	local06, #0
19080     00 30 06 F6 | 	mov	local10, #0
19084     0A 32 06 F6 | 	mov	local11, #10
19088     00 12 06 F6 | 	mov	arg01, #0
1908c     0F 15 02 F6 | 	mov	arg02, local01
19090     00 16 06 F6 | 	mov	arg03, #0
19094     0A 18 06 F6 | 	mov	arg04, #10
19098     84 87 B0 FD | 	call	#__system___basic_print_integer
1909c     FD 2A 02 F6 | 	mov	local07, result1
190a0     14 27 02 F6 | 	mov	local05, local06
190a4     15 27 02 F1 | 	add	local05, local07
190a8     00 12 06 F6 | 	mov	arg01, #0
190ac     78 D4 B0 FD | 	call	#__system___getiolock_0540
190b0     FD 00 68 FC | 	wrlong	#0, result1
190b4     00 FA 05 F6 | 	mov	result1, #0
190b8     00 2E 06 F6 | 	mov	local09, #0
190bc                 | LR__2059
190bc                 | '   if t1.result_type=result_uint then print t1.result.uresult;
190bc     1D 22 0E F2 | 	cmp	local03, #29 wz
190c0     50 00 90 5D |  if_ne	jmp	#LR__2060
190c4     00 12 06 F6 | 	mov	arg01, #0
190c8     5C D4 B0 FD | 	call	#__system___getiolock_0540
190cc     FD 12 02 F6 | 	mov	arg01, result1
190d0     14 7A B0 FD | 	call	#__system___lockmem
190d4     00 28 06 F6 | 	mov	local06, #0
190d8     00 30 06 F6 | 	mov	local10, #0
190dc     0A 32 06 F6 | 	mov	local11, #10
190e0     00 12 06 F6 | 	mov	arg01, #0
190e4     0F 15 02 F6 | 	mov	arg02, local01
190e8     00 16 06 F6 | 	mov	arg03, #0
190ec     0A 18 06 F6 | 	mov	arg04, #10
190f0     6C 87 B0 FD | 	call	#__system___basic_print_unsigned
190f4     FD 2A 02 F6 | 	mov	local07, result1
190f8     14 27 02 F6 | 	mov	local05, local06
190fc     15 27 02 F1 | 	add	local05, local07
19100     00 12 06 F6 | 	mov	arg01, #0
19104     20 D4 B0 FD | 	call	#__system___getiolock_0540
19108     FD 00 68 FC | 	wrlong	#0, result1
1910c     00 FA 05 F6 | 	mov	result1, #0
19110     00 2E 06 F6 | 	mov	local09, #0
19114                 | LR__2060
19114                 | '   if t1.result_type=result_float then print t1.result.fresult;
19114     1E 22 0E F2 | 	cmp	local03, #30 wz
19118     30 00 90 5D |  if_ne	jmp	#LR__2061
1911c     00 12 06 F6 | 	mov	arg01, #0
19120     04 D4 B0 FD | 	call	#__system___getiolock_0540
19124     FD 12 02 F6 | 	mov	arg01, result1
19128     BC 79 B0 FD | 	call	#__system___lockmem
1912c     00 12 06 F6 | 	mov	arg01, #0
19130     0F 15 02 F6 | 	mov	arg02, local01
19134     00 16 06 F6 | 	mov	arg03, #0
19138     23 18 06 F6 | 	mov	arg04, #35
1913c     74 AB B0 FD | 	call	#__system___basic_print_float
19140     00 12 06 F6 | 	mov	arg01, #0
19144     E0 D3 B0 FD | 	call	#__system___getiolock_0540
19148     FD 00 68 FC | 	wrlong	#0, result1
1914c                 | LR__2061
1914c                 | '   if t1.result_type=result_string then print t1.result.sresult;
1914c     1F 22 0E F2 | 	cmp	local03, #31 wz
19150     2C 00 90 5D |  if_ne	jmp	#LR__2062
19154     00 12 06 F6 | 	mov	arg01, #0
19158     CC D3 B0 FD | 	call	#__system___getiolock_0540
1915c     FD 12 02 F6 | 	mov	arg01, result1
19160     84 79 B0 FD | 	call	#__system___lockmem
19164     00 12 06 F6 | 	mov	arg01, #0
19168     0F 15 02 F6 | 	mov	arg02, local01
1916c     00 16 06 F6 | 	mov	arg03, #0
19170     68 86 B0 FD | 	call	#__system___basic_print_string
19174     00 12 06 F6 | 	mov	arg01, #0
19178     AC D3 B0 FD | 	call	#__system___getiolock_0540
1917c     FD 00 68 FC | 	wrlong	#0, result1
19180                 | LR__2062
19180                 | LR__2063
19180                 | ' if r=0 then 
19180     00 24 0E F2 | 	cmp	local04, #0 wz
19184     1C 01 90 5D |  if_ne	jmp	#LR__2068
19188                 | '   if t1.result_type=result_int then print t1.result.iresult
19188     1C 22 0E F2 | 	cmp	local03, #28 wz
1918c     40 00 90 5D |  if_ne	jmp	#LR__2064
19190     00 12 06 F6 | 	mov	arg01, #0
19194     90 D3 B0 FD | 	call	#__system___getiolock_0540
19198     FD 12 02 F6 | 	mov	arg01, result1
1919c     48 79 B0 FD | 	call	#__system___lockmem
191a0     00 12 06 F6 | 	mov	arg01, #0
191a4     0F 15 02 F6 | 	mov	arg02, local01
191a8     00 16 06 F6 | 	mov	arg03, #0
191ac     0A 18 06 F6 | 	mov	arg04, #10
191b0     6C 86 B0 FD | 	call	#__system___basic_print_integer
191b4     00 12 06 F6 | 	mov	arg01, #0
191b8     0A 14 06 F6 | 	mov	arg02, #10
191bc     00 16 06 F6 | 	mov	arg03, #0
191c0     C0 85 B0 FD | 	call	#__system___basic_print_char
191c4     00 12 06 F6 | 	mov	arg01, #0
191c8     5C D3 B0 FD | 	call	#__system___getiolock_0540
191cc     FD 00 68 FC | 	wrlong	#0, result1
191d0                 | LR__2064
191d0                 | '   if t1.result_type=result_uint then print t1.result.uresult
191d0     1D 22 0E F2 | 	cmp	local03, #29 wz
191d4     40 00 90 5D |  if_ne	jmp	#LR__2065
191d8     00 12 06 F6 | 	mov	arg01, #0
191dc     48 D3 B0 FD | 	call	#__system___getiolock_0540
191e0     FD 12 02 F6 | 	mov	arg01, result1
191e4     00 79 B0 FD | 	call	#__system___lockmem
191e8     00 12 06 F6 | 	mov	arg01, #0
191ec     0F 15 02 F6 | 	mov	arg02, local01
191f0     00 16 06 F6 | 	mov	arg03, #0
191f4     0A 18 06 F6 | 	mov	arg04, #10
191f8     64 86 B0 FD | 	call	#__system___basic_print_unsigned
191fc     00 12 06 F6 | 	mov	arg01, #0
19200     0A 14 06 F6 | 	mov	arg02, #10
19204     00 16 06 F6 | 	mov	arg03, #0
19208     78 85 B0 FD | 	call	#__system___basic_print_char
1920c     00 12 06 F6 | 	mov	arg01, #0
19210     14 D3 B0 FD | 	call	#__system___getiolock_0540
19214     FD 00 68 FC | 	wrlong	#0, result1
19218                 | LR__2065
19218                 | '   if t1.result_type=result_float then print t1.result.fresult
19218     1E 22 0E F2 | 	cmp	local03, #30 wz
1921c     40 00 90 5D |  if_ne	jmp	#LR__2066
19220     00 12 06 F6 | 	mov	arg01, #0
19224     00 D3 B0 FD | 	call	#__system___getiolock_0540
19228     FD 12 02 F6 | 	mov	arg01, result1
1922c     B8 78 B0 FD | 	call	#__system___lockmem
19230     00 12 06 F6 | 	mov	arg01, #0
19234     0F 15 02 F6 | 	mov	arg02, local01
19238     00 16 06 F6 | 	mov	arg03, #0
1923c     23 18 06 F6 | 	mov	arg04, #35
19240     70 AA B0 FD | 	call	#__system___basic_print_float
19244     00 12 06 F6 | 	mov	arg01, #0
19248     0A 14 06 F6 | 	mov	arg02, #10
1924c     00 16 06 F6 | 	mov	arg03, #0
19250     30 85 B0 FD | 	call	#__system___basic_print_char
19254     00 12 06 F6 | 	mov	arg01, #0
19258     CC D2 B0 FD | 	call	#__system___getiolock_0540
1925c     FD 00 68 FC | 	wrlong	#0, result1
19260                 | LR__2066
19260                 | '   if t1.result_type=result_string then print t1.result.sresult
19260     1F 22 0E F2 | 	cmp	local03, #31 wz
19264     3C 00 90 5D |  if_ne	jmp	#LR__2067
19268     00 12 06 F6 | 	mov	arg01, #0
1926c     B8 D2 B0 FD | 	call	#__system___getiolock_0540
19270     FD 12 02 F6 | 	mov	arg01, result1
19274     70 78 B0 FD | 	call	#__system___lockmem
19278     00 12 06 F6 | 	mov	arg01, #0
1927c     0F 15 02 F6 | 	mov	arg02, local01
19280     00 16 06 F6 | 	mov	arg03, #0
19284     54 85 B0 FD | 	call	#__system___basic_print_string
19288     00 12 06 F6 | 	mov	arg01, #0
1928c     0A 14 06 F6 | 	mov	arg02, #10
19290     00 16 06 F6 | 	mov	arg03, #0
19294     EC 84 B0 FD | 	call	#__system___basic_print_char
19298     00 12 06 F6 | 	mov	arg01, #0
1929c     88 D2 B0 FD | 	call	#__system___getiolock_0540
192a0     FD 00 68 FC | 	wrlong	#0, result1
192a4                 | LR__2067
192a4                 | LR__2068
192a4                 | ' if r=print_mod_empty then print
192a4     20 24 0E F2 | 	cmp	local04, #32 wz
192a8     2C 00 90 5D |  if_ne	jmp	#LR__2069
192ac     00 12 06 F6 | 	mov	arg01, #0
192b0     74 D2 B0 FD | 	call	#__system___getiolock_0540
192b4     FD 12 02 F6 | 	mov	arg01, result1
192b8     2C 78 B0 FD | 	call	#__system___lockmem
192bc     00 12 06 F6 | 	mov	arg01, #0
192c0     0A 14 06 F6 | 	mov	arg02, #10
192c4     00 16 06 F6 | 	mov	arg03, #0
192c8     B8 84 B0 FD | 	call	#__system___basic_print_char
192cc     00 12 06 F6 | 	mov	arg01, #0
192d0     54 D2 B0 FD | 	call	#__system___getiolock_0540
192d4     FD 00 68 FC | 	wrlong	#0, result1
192d8                 | LR__2069
192d8                 | LR__2070
192d8     A7 F0 03 F6 | 	mov	ptra, fp
192dc     B2 00 A0 FD | 	call	#popregs_
192e0                 | _do_print_ret
192e0     2D 00 64 FD | 	ret
192e4                 | 
192e4                 | ' 
192e4                 | ' 
192e4                 | ' sub do_paper
192e4                 | _do_paper
192e4     03 4A 05 F6 | 	mov	COUNT_, #3
192e8     A8 00 A0 FD | 	call	#pushregs_
192ec     68 27 BF FD | 	call	#_pop
192f0     FD 1E 02 F6 | 	mov	local01, result1
192f4     FE 20 02 F6 | 	mov	local02, result2
192f8     FF 22 02 F6 | 	mov	local03, result3
192fc                 | ' t1=pop() 
192fc                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
192fc     1E 22 0E F2 | 	cmp	local03, #30 wz
19300     10 00 90 5D |  if_ne	jmp	#LR__2080
19304     0F 13 02 F6 | 	mov	arg01, local01
19308     00 14 06 F6 | 	mov	arg02, #0
1930c     54 A8 B0 FD | 	call	#__system___float_tointeger
19310     FD 1E 02 F6 | 	mov	local01, result1
19314                 | LR__2080
19314                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
19314     1F 22 0E F2 | 	cmp	local03, #31 wz
19318     18 00 90 5D |  if_ne	jmp	#LR__2081
1931c     0F 13 02 F6 | 	mov	arg01, local01
19320     60 AB B0 FD | 	call	#__system____builtin_atof
19324     FD 12 02 F6 | 	mov	arg01, result1
19328     00 14 06 F6 | 	mov	arg02, #0
1932c     34 A8 B0 FD | 	call	#__system___float_tointeger
19330     FD 1E 02 F6 | 	mov	local01, result1
19334                 | LR__2081
19334     37 00 00 FF 
19338     38 E4 05 F1 | 	add	objptr, ##28216
1933c     F2 1E 62 FC | 	wrlong	local01, objptr
19340     04 E4 05 F1 | 	add	objptr, #4
19344     F2 12 02 FB | 	rdlong	arg01, objptr
19348                 | ' 
19348                 | ' write_color:=ff
19348     36 00 00 FF 
1934c     FB E5 85 F1 | 	sub	objptr, ##28155
19350     F2 12 62 FC | 	wrlong	arg01, objptr
19354                 | ' write_background:=bb
19354     04 E4 05 F1 | 	add	objptr, #4
19358     F2 1E 62 FC | 	wrlong	local01, objptr
1935c     45 E4 85 F1 | 	sub	objptr, #69
19360     A7 F0 03 F6 | 	mov	ptra, fp
19364     B2 00 A0 FD | 	call	#popregs_
19368                 | _do_paper_ret
19368     2D 00 64 FD | 	ret
1936c                 | 
1936c                 | ' 
1936c                 | ' sub do_ink
1936c                 | _do_ink
1936c     03 4A 05 F6 | 	mov	COUNT_, #3
19370     A8 00 A0 FD | 	call	#pushregs_
19374     E0 26 BF FD | 	call	#_pop
19378     FD 1E 02 F6 | 	mov	local01, result1
1937c     FE 20 02 F6 | 	mov	local02, result2
19380     FF 22 02 F6 | 	mov	local03, result3
19384                 | ' t1=pop() 
19384                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
19384     1E 22 0E F2 | 	cmp	local03, #30 wz
19388     10 00 90 5D |  if_ne	jmp	#LR__2090
1938c     0F 13 02 F6 | 	mov	arg01, local01
19390     00 14 06 F6 | 	mov	arg02, #0
19394     CC A7 B0 FD | 	call	#__system___float_tointeger
19398     FD 1E 02 F6 | 	mov	local01, result1
1939c                 | LR__2090
1939c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1939c     1F 22 0E F2 | 	cmp	local03, #31 wz
193a0     18 00 90 5D |  if_ne	jmp	#LR__2091
193a4     0F 13 02 F6 | 	mov	arg01, local01
193a8     D8 AA B0 FD | 	call	#__system____builtin_atof
193ac     FD 12 02 F6 | 	mov	arg01, result1
193b0     00 14 06 F6 | 	mov	arg02, #0
193b4     AC A7 B0 FD | 	call	#__system___float_tointeger
193b8     FD 1E 02 F6 | 	mov	local01, result1
193bc                 | LR__2091
193bc     37 00 00 FF 
193c0     3C E4 05 F1 | 	add	objptr, ##28220
193c4     F2 1E 62 FC | 	wrlong	local01, objptr
193c8     04 E4 85 F1 | 	sub	objptr, #4
193cc     F2 14 02 FB | 	rdlong	arg02, objptr
193d0                 | ' 
193d0                 | ' write_color:=ff
193d0     36 00 00 FF 
193d4     F7 E5 85 F1 | 	sub	objptr, ##28151
193d8     F2 1E 62 FC | 	wrlong	local01, objptr
193dc                 | ' write_background:=bb
193dc     04 E4 05 F1 | 	add	objptr, #4
193e0     F2 14 62 FC | 	wrlong	arg02, objptr
193e4     36 00 00 FF 
193e8     F7 E5 05 F1 | 	add	objptr, ##28151
193ec     F2 12 02 FB | 	rdlong	arg01, objptr
193f0     37 00 00 FF 
193f4     3C E4 85 F1 | 	sub	objptr, ##28220
193f8     7C 4C B0 FD | 	call	#_hg010b_spin2_setcursorcolor
193fc     A7 F0 03 F6 | 	mov	ptra, fp
19400     B2 00 A0 FD | 	call	#popregs_
19404                 | _do_ink_ret
19404     2D 00 64 FD | 	ret
19408                 | 
19408                 | ' 
19408                 | ' 
19408                 | ' sub do_font
19408                 | _do_font
19408     03 4A 05 F6 | 	mov	COUNT_, #3
1940c     A8 00 A0 FD | 	call	#pushregs_
19410     44 26 BF FD | 	call	#_pop
19414     FD 1E 02 F6 | 	mov	local01, result1
19418     FE 20 02 F6 | 	mov	local02, result2
1941c     FF 22 02 F6 | 	mov	local03, result3
19420                 | ' t1=pop() 
19420                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
19420     1E 22 0E F2 | 	cmp	local03, #30 wz
19424     10 00 90 5D |  if_ne	jmp	#LR__2100
19428     0F 13 02 F6 | 	mov	arg01, local01
1942c     00 14 06 F6 | 	mov	arg02, #0
19430     30 A7 B0 FD | 	call	#__system___float_tointeger
19434     FD 1E 02 F6 | 	mov	local01, result1
19438                 | LR__2100
19438                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
19438     1F 22 0E F2 | 	cmp	local03, #31 wz
1943c     18 00 90 5D |  if_ne	jmp	#LR__2101
19440     0F 13 02 F6 | 	mov	arg01, local01
19444     3C AA B0 FD | 	call	#__system____builtin_atof
19448     FD 12 02 F6 | 	mov	arg01, result1
1944c     00 14 06 F6 | 	mov	arg02, #0
19450     10 A7 B0 FD | 	call	#__system___float_tointeger
19454     FD 1E 02 F6 | 	mov	local01, result1
19458                 | LR__2101
19458     37 00 00 FF 
1945c     40 E4 05 F1 | 	add	objptr, ##28224
19460     F2 1E 62 FC | 	wrlong	local01, objptr
19464     37 00 00 FF 
19468     40 E4 85 F1 | 	sub	objptr, ##28224
1946c     02 1E 66 F0 | 	shl	local01, #2
19470     0F 13 02 F6 | 	mov	arg01, local01
19474     44 5C B0 FD | 	call	#_hg010b_spin2_setfontfamily
19478     A7 F0 03 F6 | 	mov	ptra, fp
1947c     B2 00 A0 FD | 	call	#popregs_
19480                 | _do_font_ret
19480     2D 00 64 FD | 	ret
19484                 | 
19484                 | ' 
19484                 | ' sub do_mode
19484                 | _do_mode
19484     05 4A 05 F6 | 	mov	COUNT_, #5
19488     A8 00 A0 FD | 	call	#pushregs_
1948c     C8 25 BF FD | 	call	#_pop
19490     FD 1E 02 F6 | 	mov	local01, result1
19494     FE 20 02 F6 | 	mov	local02, result2
19498     FF 22 02 F6 | 	mov	local03, result3
1949c                 | ' t1=pop() 
1949c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1949c     1E 22 0E F2 | 	cmp	local03, #30 wz
194a0     10 00 90 5D |  if_ne	jmp	#LR__2110
194a4     0F 13 02 F6 | 	mov	arg01, local01
194a8     00 14 06 F6 | 	mov	arg02, #0
194ac     B4 A6 B0 FD | 	call	#__system___float_tointeger
194b0     FD 1E 02 F6 | 	mov	local01, result1
194b4                 | LR__2110
194b4                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
194b4     1F 22 0E F2 | 	cmp	local03, #31 wz
194b8     18 00 90 5D |  if_ne	jmp	#LR__2111
194bc     0F 13 02 F6 | 	mov	arg01, local01
194c0     C0 A9 B0 FD | 	call	#__system____builtin_atof
194c4     FD 12 02 F6 | 	mov	arg01, result1
194c8     00 14 06 F6 | 	mov	arg02, #0
194cc     94 A6 B0 FD | 	call	#__system___float_tointeger
194d0     FD 1E 02 F6 | 	mov	local01, result1
194d4                 | LR__2111
194d4                 | ' select case t1.result.iresult
194d4     0F 25 02 F6 | 	mov	local04, local01
194d8     05 24 26 F3 | 	fle	local04, #5
194dc     30 24 62 FD | 	jmprel	local04
194e0                 | LR__2112
194e0     14 00 90 FD | 	jmp	#LR__2113
194e4     A8 00 90 FD | 	jmp	#LR__2114
194e8     10 01 90 FD | 	jmp	#LR__2115
194ec     78 01 90 FD | 	jmp	#LR__2116
194f0     E0 01 90 FD | 	jmp	#LR__2117
194f4     70 02 90 FD | 	jmp	#LR__2118
194f8                 | LR__2113
194f8     37 00 00 FF 
194fc     40 E4 05 F1 | 	add	objptr, ##28224
19500     F2 02 68 FC | 	wrlong	#1, objptr
19504     04 E4 85 F1 | 	sub	objptr, #4
19508     F2 34 69 FC | 	wrlong	#154, objptr
1950c     19 00 00 FF 
19510     D4 E4 05 F1 | 	add	objptr, ##13012
19514     F2 02 68 FC | 	wrlong	#1, objptr
19518     19 00 00 FF 
1951c     D8 E4 85 F1 | 	sub	objptr, ##13016
19520     F2 26 69 FC | 	wrlong	#147, objptr
19524     37 00 00 FF 
19528     38 E4 85 F1 | 	sub	objptr, ##28216
1952c     04 12 06 F6 | 	mov	arg01, #4
19530     88 5B B0 FD | 	call	#_hg010b_spin2_setfontfamily
19534     37 00 00 FF 
19538     3C E4 05 F1 | 	add	objptr, ##28220
1953c     F2 12 02 FB | 	rdlong	arg01, objptr
19540     04 E4 85 F1 | 	sub	objptr, #4
19544     F2 14 02 FB | 	rdlong	arg02, objptr
19548                 | ' 
19548                 | ' write_color:=ff
19548     36 00 00 FF 
1954c     F7 E5 85 F1 | 	sub	objptr, ##28151
19550     F2 12 62 FC | 	wrlong	arg01, objptr
19554                 | ' write_background:=bb
19554     04 E4 05 F1 | 	add	objptr, #4
19558     F2 14 62 FC | 	wrlong	arg02, objptr
1955c     01 00 00 FF 
19560     00 EA 05 F1 | 	add	ptr__dat__, ##512
19564     51 00 00 FF 
19568     6F E5 05 F1 | 	add	objptr, ##41839
1956c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
19570     04 E4 85 F1 | 	sub	objptr, #4
19574     03 00 80 FF 
19578     F2 30 69 FC | 	wrlong	##1688, objptr
1957c     51 00 00 FF 
19580     B0 E5 85 F1 | 	sub	objptr, ##41904
19584     01 00 00 FF 
19588     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1958c     D8 01 90 FD | 	jmp	#LR__2118
19590                 | LR__2114
19590     37 00 00 FF 
19594     40 E4 05 F1 | 	add	objptr, ##28224
19598     F2 00 68 FC | 	wrlong	#0, objptr
1959c     04 E4 85 F1 | 	sub	objptr, #4
195a0     F2 2E 68 FC | 	wrlong	#23, objptr
195a4     19 00 00 FF 
195a8     D4 E4 05 F1 | 	add	objptr, ##13012
195ac     F2 00 68 FC | 	wrlong	#0, objptr
195b0     19 00 00 FF 
195b4     D8 E4 85 F1 | 	sub	objptr, ##13016
195b8     F2 00 68 FC | 	wrlong	#0, objptr
195bc     37 00 00 FF 
195c0     38 E4 85 F1 | 	sub	objptr, ##28216
195c4     00 12 06 F6 | 	mov	arg01, #0
195c8     F0 5A B0 FD | 	call	#_hg010b_spin2_setfontfamily
195cc     37 00 00 FF 
195d0     3C E4 05 F1 | 	add	objptr, ##28220
195d4     F2 12 02 FB | 	rdlong	arg01, objptr
195d8     04 E4 85 F1 | 	sub	objptr, #4
195dc     F2 14 02 FB | 	rdlong	arg02, objptr
195e0                 | ' 
195e0                 | ' write_color:=ff
195e0     36 00 00 FF 
195e4     F7 E5 85 F1 | 	sub	objptr, ##28151
195e8     F2 12 62 FC | 	wrlong	arg01, objptr
195ec                 | ' write_background:=bb
195ec     04 E4 05 F1 | 	add	objptr, #4
195f0     F2 14 62 FC | 	wrlong	arg02, objptr
195f4     45 E4 85 F1 | 	sub	objptr, #69
195f8     6C 01 90 FD | 	jmp	#LR__2118
195fc                 | LR__2115
195fc     37 00 00 FF 
19600     40 E4 05 F1 | 	add	objptr, ##28224
19604     F2 00 68 FC | 	wrlong	#0, objptr
19608     04 E4 85 F1 | 	sub	objptr, #4
1960c     F2 6A 69 FC | 	wrlong	#181, objptr
19610     19 00 00 FF 
19614     D4 E4 05 F1 | 	add	objptr, ##13012
19618     F2 00 68 FC | 	wrlong	#0, objptr
1961c     19 00 00 FF 
19620     D8 E4 85 F1 | 	sub	objptr, ##13016
19624     F2 00 68 FC | 	wrlong	#0, objptr
19628     37 00 00 FF 
1962c     38 E4 85 F1 | 	sub	objptr, ##28216
19630     00 12 06 F6 | 	mov	arg01, #0
19634     84 5A B0 FD | 	call	#_hg010b_spin2_setfontfamily
19638     37 00 00 FF 
1963c     3C E4 05 F1 | 	add	objptr, ##28220
19640     F2 12 02 FB | 	rdlong	arg01, objptr
19644     04 E4 85 F1 | 	sub	objptr, #4
19648     F2 14 02 FB | 	rdlong	arg02, objptr
1964c                 | ' 
1964c                 | ' write_color:=ff
1964c     36 00 00 FF 
19650     F7 E5 85 F1 | 	sub	objptr, ##28151
19654     F2 12 62 FC | 	wrlong	arg01, objptr
19658                 | ' write_background:=bb
19658     04 E4 05 F1 | 	add	objptr, #4
1965c     F2 14 62 FC | 	wrlong	arg02, objptr
19660     45 E4 85 F1 | 	sub	objptr, #69
19664     00 01 90 FD | 	jmp	#LR__2118
19668                 | LR__2116
19668     37 00 00 FF 
1966c     40 E4 05 F1 | 	add	objptr, ##28224
19670     F2 00 68 FC | 	wrlong	#0, objptr
19674     04 E4 85 F1 | 	sub	objptr, #4
19678     F2 1E 68 FC | 	wrlong	#15, objptr
1967c     19 00 00 FF 
19680     D4 E4 05 F1 | 	add	objptr, ##13012
19684     F2 00 68 FC | 	wrlong	#0, objptr
19688     19 00 00 FF 
1968c     D8 E4 85 F1 | 	sub	objptr, ##13016
19690     F2 00 68 FC | 	wrlong	#0, objptr
19694     37 00 00 FF 
19698     38 E4 85 F1 | 	sub	objptr, ##28216
1969c     00 12 06 F6 | 	mov	arg01, #0
196a0     18 5A B0 FD | 	call	#_hg010b_spin2_setfontfamily
196a4     37 00 00 FF 
196a8     3C E4 05 F1 | 	add	objptr, ##28220
196ac     F2 12 02 FB | 	rdlong	arg01, objptr
196b0     04 E4 85 F1 | 	sub	objptr, #4
196b4     F2 14 02 FB | 	rdlong	arg02, objptr
196b8                 | ' 
196b8                 | ' write_color:=ff
196b8     36 00 00 FF 
196bc     F7 E5 85 F1 | 	sub	objptr, ##28151
196c0     F2 12 62 FC | 	wrlong	arg01, objptr
196c4                 | ' write_background:=bb
196c4     04 E4 05 F1 | 	add	objptr, #4
196c8     F2 14 62 FC | 	wrlong	arg02, objptr
196cc     45 E4 85 F1 | 	sub	objptr, #69
196d0     94 00 90 FD | 	jmp	#LR__2118
196d4                 | LR__2117
196d4     37 00 00 FF 
196d8     40 E4 05 F1 | 	add	objptr, ##28224
196dc     F2 02 68 FC | 	wrlong	#1, objptr
196e0     04 E4 85 F1 | 	sub	objptr, #4
196e4     F2 02 68 FC | 	wrlong	#1, objptr
196e8     19 00 00 FF 
196ec     D4 E4 05 F1 | 	add	objptr, ##13012
196f0     F2 02 68 FC | 	wrlong	#1, objptr
196f4     19 00 00 FF 
196f8     D8 E4 85 F1 | 	sub	objptr, ##13016
196fc     F2 1C 68 FC | 	wrlong	#14, objptr
19700     37 00 00 FF 
19704     38 E4 85 F1 | 	sub	objptr, ##28216
19708     04 12 06 F6 | 	mov	arg01, #4
1970c     AC 59 B0 FD | 	call	#_hg010b_spin2_setfontfamily
19710     37 00 00 FF 
19714     3C E4 05 F1 | 	add	objptr, ##28220
19718     F2 12 02 FB | 	rdlong	arg01, objptr
1971c     04 E4 85 F1 | 	sub	objptr, #4
19720     F2 14 02 FB | 	rdlong	arg02, objptr
19724                 | ' 
19724                 | ' write_color:=ff
19724     36 00 00 FF 
19728     F7 E5 85 F1 | 	sub	objptr, ##28151
1972c     F2 12 62 FC | 	wrlong	arg01, objptr
19730                 | ' write_background:=bb
19730     04 E4 05 F1 | 	add	objptr, #4
19734     F2 14 62 FC | 	wrlong	arg02, objptr
19738     07 00 00 FF 
1973c     8A EB 05 F1 | 	add	ptr__dat__, ##3978
19740     51 00 00 FF 
19744     6F E5 05 F1 | 	add	objptr, ##41839
19748     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1974c     04 E4 85 F1 | 	sub	objptr, #4
19750     03 00 80 FF 
19754     F2 30 69 FC | 	wrlong	##1688, objptr
19758     51 00 00 FF 
1975c     B0 E5 85 F1 | 	sub	objptr, ##41904
19760     07 00 00 FF 
19764     8A EB 85 F1 | 	sub	ptr__dat__, ##3978
19768                 | LR__2118
19768     51 00 00 FF 
1976c     AC E5 05 F1 | 	add	objptr, ##41900
19770     F2 1E 62 FC | 	wrlong	local01, objptr
19774     04 E4 85 F1 | 	sub	objptr, #4
19778     F2 12 02 FB | 	rdlong	arg01, objptr
1977c     0E 00 00 FF 
19780     4C E5 85 F1 | 	sub	objptr, ##7500
19784     F2 26 02 FB | 	rdlong	local05, objptr
19788     43 00 00 FF 
1978c     5C E4 85 F1 | 	sub	objptr, ##34396
19790     13 13 82 F1 | 	sub	arg01, local05
19794     00 14 06 F6 | 	mov	arg02, #0
19798     0A 16 06 F6 | 	mov	arg03, #10
1979c     18 96 B0 FD | 	call	#__system__Number_S
197a0     FD 12 02 F6 | 	mov	arg01, result1
197a4     85 01 00 FF 
197a8     B2 15 06 F6 | 	mov	arg02, ##@LR__5507
197ac     94 73 B0 FD | 	call	#__system___string_concat
197b0     50 00 00 FF 
197b4     0C E5 05 F1 | 	add	objptr, ##41228
197b8     F2 FA 61 FC | 	wrlong	result1, objptr
197bc     19 00 00 FF 
197c0     D0 E4 85 F1 | 	sub	objptr, ##13008
197c4     F2 12 02 FB | 	rdlong	arg01, objptr
197c8     04 E4 85 F1 | 	sub	objptr, #4
197cc     F2 14 02 FB | 	rdlong	arg02, objptr
197d0     37 00 00 FF 
197d4     38 E4 85 F1 | 	sub	objptr, ##28216
197d8     30 5A B0 FD | 	call	#_hg010b_spin2_cls
197dc     85 01 00 FF 
197e0     C4 13 06 F6 | 	mov	arg01, ##@LR__5508
197e4                 | ' 
197e4                 | ' write(text)
197e4     E4 5D B0 FD | 	call	#_hg010b_spin2_write
197e8                 | ' crlf
197e8     E0 62 B0 FD | 	call	#_hg010b_spin2_crlf
197ec     18 00 00 FF 
197f0     4C EB 05 F1 | 	add	ptr__dat__, ##12620
197f4     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
197f8     18 00 00 FF 
197fc     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
19800                 | ' 
19800                 | ' write(text)
19800     C8 5D B0 FD | 	call	#_hg010b_spin2_write
19804                 | ' crlf
19804     C4 62 B0 FD | 	call	#_hg010b_spin2_crlf
19808     50 00 00 FF 
1980c     0C E5 05 F1 | 	add	objptr, ##41228
19810     F2 12 02 FB | 	rdlong	arg01, objptr
19814     50 00 00 FF 
19818     0C E5 85 F1 | 	sub	objptr, ##41228
1981c                 | ' 
1981c                 | ' write(text)
1981c     AC 5D B0 FD | 	call	#_hg010b_spin2_write
19820                 | ' crlf
19820     A8 62 B0 FD | 	call	#_hg010b_spin2_crlf
19824     A7 F0 03 F6 | 	mov	ptra, fp
19828     B2 00 A0 FD | 	call	#popregs_
1982c                 | _do_mode_ret
1982c     2D 00 64 FD | 	ret
19830                 | 
19830                 | ' 
19830                 | ' sub do_setwave
19830                 | _do_setwave
19830     02 4A 05 F6 | 	mov	COUNT_, #2
19834     A8 00 A0 FD | 	call	#pushregs_
19838     18 F0 07 F1 | 	add	ptra, #24
1983c     18 22 BF FD | 	call	#_pop
19840     FD 12 02 F6 | 	mov	arg01, result1
19844     FE 1E 02 F6 | 	mov	local01, result2
19848     FF 20 02 F6 | 	mov	local02, result3
1984c     A7 12 62 FC | 	wrlong	arg01, fp
19850     04 4E 05 F1 | 	add	fp, #4
19854     A7 1E 62 FC | 	wrlong	local01, fp
19858     04 4E 05 F1 | 	add	fp, #4
1985c     A7 20 62 FC | 	wrlong	local02, fp
19860     08 4E 85 F1 | 	sub	fp, #8
19864     F0 21 BF FD | 	call	#_pop
19868     FD 20 02 F6 | 	mov	local02, result1
1986c     0C 4E 05 F1 | 	add	fp, #12
19870     A7 20 62 FC | 	wrlong	local02, fp
19874     04 4E 05 F1 | 	add	fp, #4
19878     A7 FC 61 FC | 	wrlong	result2, fp
1987c     04 4E 05 F1 | 	add	fp, #4
19880     A7 FE 61 FC | 	wrlong	result3, fp
19884     08 4E 85 F1 | 	sub	fp, #8
19888     A7 12 02 F6 | 	mov	arg01, fp
1988c     0C 4E 85 F1 | 	sub	fp, #12
19890     60 C3 BF FD | 	call	#_converttoint
19894     FD 20 02 F6 | 	mov	local02, result1
19898     10 1F 02 F6 | 	mov	local01, local02
1989c     01 1E 66 F0 | 	shl	local01, #1
198a0     10 1F 02 F1 | 	add	local01, local02
198a4     03 1E 66 F0 | 	shl	local01, #3
198a8     14 00 00 FF 
198ac     38 E5 05 F1 | 	add	objptr, ##10552
198b0     F2 1E 02 F1 | 	add	local01, objptr
198b4     A7 12 02 F6 | 	mov	arg01, fp
198b8     14 00 00 FF 
198bc     38 E5 85 F1 | 	sub	objptr, ##10552
198c0     30 C3 BF FD | 	call	#_converttoint
198c4     04 1E 06 F1 | 	add	local01, #4
198c8     0F FB 41 FC | 	wrbyte	result1, local01
198cc     A7 F0 03 F6 | 	mov	ptra, fp
198d0     B2 00 A0 FD | 	call	#popregs_
198d4                 | _do_setwave_ret
198d4     2D 00 64 FD | 	ret
198d8                 | 
198d8                 | ' 
198d8                 | ' sub do_setsustain
198d8                 | _do_setsustain
198d8     02 4A 05 F6 | 	mov	COUNT_, #2
198dc     A8 00 A0 FD | 	call	#pushregs_
198e0     18 F0 07 F1 | 	add	ptra, #24
198e4     70 21 BF FD | 	call	#_pop
198e8     FD 12 02 F6 | 	mov	arg01, result1
198ec     FE 1E 02 F6 | 	mov	local01, result2
198f0     FF 20 02 F6 | 	mov	local02, result3
198f4     A7 12 62 FC | 	wrlong	arg01, fp
198f8     04 4E 05 F1 | 	add	fp, #4
198fc     A7 1E 62 FC | 	wrlong	local01, fp
19900     04 4E 05 F1 | 	add	fp, #4
19904     A7 20 62 FC | 	wrlong	local02, fp
19908     08 4E 85 F1 | 	sub	fp, #8
1990c     48 21 BF FD | 	call	#_pop
19910     FD 20 02 F6 | 	mov	local02, result1
19914     0C 4E 05 F1 | 	add	fp, #12
19918     A7 20 62 FC | 	wrlong	local02, fp
1991c     04 4E 05 F1 | 	add	fp, #4
19920     A7 FC 61 FC | 	wrlong	result2, fp
19924     04 4E 05 F1 | 	add	fp, #4
19928     A7 FE 61 FC | 	wrlong	result3, fp
1992c     08 4E 85 F1 | 	sub	fp, #8
19930     A7 12 02 F6 | 	mov	arg01, fp
19934     0C 4E 85 F1 | 	sub	fp, #12
19938     B8 C2 BF FD | 	call	#_converttoint
1993c     FD 20 02 F6 | 	mov	local02, result1
19940     10 1F 02 F6 | 	mov	local01, local02
19944     01 1E 66 F0 | 	shl	local01, #1
19948     10 1F 02 F1 | 	add	local01, local02
1994c     03 1E 66 F0 | 	shl	local01, #3
19950     14 00 00 FF 
19954     38 E5 05 F1 | 	add	objptr, ##10552
19958     F2 1E 02 F1 | 	add	local01, objptr
1995c     A7 12 02 F6 | 	mov	arg01, fp
19960     14 00 00 FF 
19964     38 E5 85 F1 | 	sub	objptr, ##10552
19968     88 C2 BF FD | 	call	#_converttoint
1996c     14 1E 06 F1 | 	add	local01, #20
19970     0F FB 51 FC | 	wrword	result1, local01
19974     A7 F0 03 F6 | 	mov	ptra, fp
19978     B2 00 A0 FD | 	call	#popregs_
1997c                 | _do_setsustain_ret
1997c     2D 00 64 FD | 	ret
19980                 | 
19980                 | ' 
19980                 | ' sub do_setenv
19980                 | _do_setenv
19980     02 4A 05 F6 | 	mov	COUNT_, #2
19984     A8 00 A0 FD | 	call	#pushregs_
19988     18 F0 07 F1 | 	add	ptra, #24
1998c     C8 20 BF FD | 	call	#_pop
19990     FD 12 02 F6 | 	mov	arg01, result1
19994     FE 1E 02 F6 | 	mov	local01, result2
19998     FF 20 02 F6 | 	mov	local02, result3
1999c     A7 12 62 FC | 	wrlong	arg01, fp
199a0     04 4E 05 F1 | 	add	fp, #4
199a4     A7 1E 62 FC | 	wrlong	local01, fp
199a8     04 4E 05 F1 | 	add	fp, #4
199ac     A7 20 62 FC | 	wrlong	local02, fp
199b0     08 4E 85 F1 | 	sub	fp, #8
199b4     A0 20 BF FD | 	call	#_pop
199b8     FD 20 02 F6 | 	mov	local02, result1
199bc     0C 4E 05 F1 | 	add	fp, #12
199c0     A7 20 62 FC | 	wrlong	local02, fp
199c4     04 4E 05 F1 | 	add	fp, #4
199c8     A7 FC 61 FC | 	wrlong	result2, fp
199cc     04 4E 05 F1 | 	add	fp, #4
199d0     A7 FE 61 FC | 	wrlong	result3, fp
199d4     08 4E 85 F1 | 	sub	fp, #8
199d8     A7 12 02 F6 | 	mov	arg01, fp
199dc     0C 4E 85 F1 | 	sub	fp, #12
199e0     10 C2 BF FD | 	call	#_converttoint
199e4     FD 20 02 F6 | 	mov	local02, result1
199e8     10 1F 02 F6 | 	mov	local01, local02
199ec     01 1E 66 F0 | 	shl	local01, #1
199f0     10 1F 02 F1 | 	add	local01, local02
199f4     03 1E 66 F0 | 	shl	local01, #3
199f8     14 00 00 FF 
199fc     38 E5 05 F1 | 	add	objptr, ##10552
19a00     F2 1E 02 F1 | 	add	local01, objptr
19a04     A7 12 02 F6 | 	mov	arg01, fp
19a08     14 00 00 FF 
19a0c     38 E5 85 F1 | 	sub	objptr, ##10552
19a10     E0 C1 BF FD | 	call	#_converttoint
19a14     05 1E 06 F1 | 	add	local01, #5
19a18     0F FB 41 FC | 	wrbyte	result1, local01
19a1c     A7 F0 03 F6 | 	mov	ptra, fp
19a20     B2 00 A0 FD | 	call	#popregs_
19a24                 | _do_setenv_ret
19a24     2D 00 64 FD | 	ret
19a28                 | 
19a28                 | ' 
19a28                 | ' sub do_setdelay
19a28                 | _do_setdelay
19a28     02 4A 05 F6 | 	mov	COUNT_, #2
19a2c     A8 00 A0 FD | 	call	#pushregs_
19a30     18 F0 07 F1 | 	add	ptra, #24
19a34     20 20 BF FD | 	call	#_pop
19a38     FD 12 02 F6 | 	mov	arg01, result1
19a3c     FE 1E 02 F6 | 	mov	local01, result2
19a40     FF 20 02 F6 | 	mov	local02, result3
19a44     A7 12 62 FC | 	wrlong	arg01, fp
19a48     04 4E 05 F1 | 	add	fp, #4
19a4c     A7 1E 62 FC | 	wrlong	local01, fp
19a50     04 4E 05 F1 | 	add	fp, #4
19a54     A7 20 62 FC | 	wrlong	local02, fp
19a58     08 4E 85 F1 | 	sub	fp, #8
19a5c     F8 1F BF FD | 	call	#_pop
19a60     FD 20 02 F6 | 	mov	local02, result1
19a64     0C 4E 05 F1 | 	add	fp, #12
19a68     A7 20 62 FC | 	wrlong	local02, fp
19a6c     04 4E 05 F1 | 	add	fp, #4
19a70     A7 FC 61 FC | 	wrlong	result2, fp
19a74     04 4E 05 F1 | 	add	fp, #4
19a78     A7 FE 61 FC | 	wrlong	result3, fp
19a7c     08 4E 85 F1 | 	sub	fp, #8
19a80     A7 12 02 F6 | 	mov	arg01, fp
19a84     0C 4E 85 F1 | 	sub	fp, #12
19a88     68 C1 BF FD | 	call	#_converttoint
19a8c     FD 20 02 F6 | 	mov	local02, result1
19a90     10 1F 02 F6 | 	mov	local01, local02
19a94     01 1E 66 F0 | 	shl	local01, #1
19a98     10 1F 02 F1 | 	add	local01, local02
19a9c     03 1E 66 F0 | 	shl	local01, #3
19aa0     14 00 00 FF 
19aa4     38 E5 05 F1 | 	add	objptr, ##10552
19aa8     F2 1E 02 F1 | 	add	local01, objptr
19aac     A7 12 02 F6 | 	mov	arg01, fp
19ab0     14 00 00 FF 
19ab4     38 E5 85 F1 | 	sub	objptr, ##10552
19ab8     38 C1 BF FD | 	call	#_converttoint
19abc     06 1E 06 F1 | 	add	local01, #6
19ac0     0F FB 51 FC | 	wrword	result1, local01
19ac4     A7 F0 03 F6 | 	mov	ptra, fp
19ac8     B2 00 A0 FD | 	call	#popregs_
19acc                 | _do_setdelay_ret
19acc     2D 00 64 FD | 	ret
19ad0                 | 
19ad0                 | ' 
19ad0                 | ' sub do_setlen
19ad0                 | _do_setlen
19ad0     02 4A 05 F6 | 	mov	COUNT_, #2
19ad4     A8 00 A0 FD | 	call	#pushregs_
19ad8     18 F0 07 F1 | 	add	ptra, #24
19adc     78 1F BF FD | 	call	#_pop
19ae0     FD 12 02 F6 | 	mov	arg01, result1
19ae4     FE 1E 02 F6 | 	mov	local01, result2
19ae8     FF 20 02 F6 | 	mov	local02, result3
19aec     A7 12 62 FC | 	wrlong	arg01, fp
19af0     04 4E 05 F1 | 	add	fp, #4
19af4     A7 1E 62 FC | 	wrlong	local01, fp
19af8     04 4E 05 F1 | 	add	fp, #4
19afc     A7 20 62 FC | 	wrlong	local02, fp
19b00     08 4E 85 F1 | 	sub	fp, #8
19b04     50 1F BF FD | 	call	#_pop
19b08     FD 20 02 F6 | 	mov	local02, result1
19b0c     0C 4E 05 F1 | 	add	fp, #12
19b10     A7 20 62 FC | 	wrlong	local02, fp
19b14     04 4E 05 F1 | 	add	fp, #4
19b18     A7 FC 61 FC | 	wrlong	result2, fp
19b1c     04 4E 05 F1 | 	add	fp, #4
19b20     A7 FE 61 FC | 	wrlong	result3, fp
19b24     08 4E 85 F1 | 	sub	fp, #8
19b28     A7 12 02 F6 | 	mov	arg01, fp
19b2c     0C 4E 85 F1 | 	sub	fp, #12
19b30     C0 C0 BF FD | 	call	#_converttoint
19b34     FD 20 02 F6 | 	mov	local02, result1
19b38     10 1F 02 F6 | 	mov	local01, local02
19b3c     01 1E 66 F0 | 	shl	local01, #1
19b40     10 1F 02 F1 | 	add	local01, local02
19b44     03 1E 66 F0 | 	shl	local01, #3
19b48     14 00 00 FF 
19b4c     38 E5 05 F1 | 	add	objptr, ##10552
19b50     F2 1E 02 F1 | 	add	local01, objptr
19b54     A7 12 02 F6 | 	mov	arg01, fp
19b58     14 00 00 FF 
19b5c     38 E5 85 F1 | 	sub	objptr, ##10552
19b60     4C C1 BF FD | 	call	#_converttofloat
19b64     08 1E 06 F1 | 	add	local01, #8
19b68     0F FB 61 FC | 	wrlong	result1, local01
19b6c     A7 F0 03 F6 | 	mov	ptra, fp
19b70     B2 00 A0 FD | 	call	#popregs_
19b74                 | _do_setlen_ret
19b74     2D 00 64 FD | 	ret
19b78                 | 
19b78                 | ' 
19b78                 | ' sub do_setvol
19b78                 | _do_setvol
19b78     02 4A 05 F6 | 	mov	COUNT_, #2
19b7c     A8 00 A0 FD | 	call	#pushregs_
19b80     18 F0 07 F1 | 	add	ptra, #24
19b84     D0 1E BF FD | 	call	#_pop
19b88     FD 12 02 F6 | 	mov	arg01, result1
19b8c     FE 1E 02 F6 | 	mov	local01, result2
19b90     FF 20 02 F6 | 	mov	local02, result3
19b94     A7 12 62 FC | 	wrlong	arg01, fp
19b98     04 4E 05 F1 | 	add	fp, #4
19b9c     A7 1E 62 FC | 	wrlong	local01, fp
19ba0     04 4E 05 F1 | 	add	fp, #4
19ba4     A7 20 62 FC | 	wrlong	local02, fp
19ba8     08 4E 85 F1 | 	sub	fp, #8
19bac     A8 1E BF FD | 	call	#_pop
19bb0     FD 20 02 F6 | 	mov	local02, result1
19bb4     0C 4E 05 F1 | 	add	fp, #12
19bb8     A7 20 62 FC | 	wrlong	local02, fp
19bbc     04 4E 05 F1 | 	add	fp, #4
19bc0     A7 FC 61 FC | 	wrlong	result2, fp
19bc4     04 4E 05 F1 | 	add	fp, #4
19bc8     A7 FE 61 FC | 	wrlong	result3, fp
19bcc     08 4E 85 F1 | 	sub	fp, #8
19bd0     A7 12 02 F6 | 	mov	arg01, fp
19bd4     0C 4E 85 F1 | 	sub	fp, #12
19bd8     18 C0 BF FD | 	call	#_converttoint
19bdc     FD 20 02 F6 | 	mov	local02, result1
19be0     10 1F 02 F6 | 	mov	local01, local02
19be4     01 1E 66 F0 | 	shl	local01, #1
19be8     10 1F 02 F1 | 	add	local01, local02
19bec     03 1E 66 F0 | 	shl	local01, #3
19bf0     14 00 00 FF 
19bf4     38 E5 05 F1 | 	add	objptr, ##10552
19bf8     F2 1E 02 F1 | 	add	local01, objptr
19bfc     A7 12 02 F6 | 	mov	arg01, fp
19c00     14 00 00 FF 
19c04     38 E5 85 F1 | 	sub	objptr, ##10552
19c08     A4 C0 BF FD | 	call	#_converttofloat
19c0c     0C 1E 06 F1 | 	add	local01, #12
19c10     0F FB 61 FC | 	wrlong	result1, local01
19c14     A7 F0 03 F6 | 	mov	ptra, fp
19c18     B2 00 A0 FD | 	call	#popregs_
19c1c                 | _do_setvol_ret
19c1c     2D 00 64 FD | 	ret
19c20                 | 
19c20                 | ' 
19c20                 | ' sub do_setpan
19c20                 | _do_setpan
19c20     02 4A 05 F6 | 	mov	COUNT_, #2
19c24     A8 00 A0 FD | 	call	#pushregs_
19c28     18 F0 07 F1 | 	add	ptra, #24
19c2c     28 1E BF FD | 	call	#_pop
19c30     FD 12 02 F6 | 	mov	arg01, result1
19c34     FE 1E 02 F6 | 	mov	local01, result2
19c38     FF 20 02 F6 | 	mov	local02, result3
19c3c     A7 12 62 FC | 	wrlong	arg01, fp
19c40     04 4E 05 F1 | 	add	fp, #4
19c44     A7 1E 62 FC | 	wrlong	local01, fp
19c48     04 4E 05 F1 | 	add	fp, #4
19c4c     A7 20 62 FC | 	wrlong	local02, fp
19c50     08 4E 85 F1 | 	sub	fp, #8
19c54     00 1E BF FD | 	call	#_pop
19c58     FD 20 02 F6 | 	mov	local02, result1
19c5c     0C 4E 05 F1 | 	add	fp, #12
19c60     A7 20 62 FC | 	wrlong	local02, fp
19c64     04 4E 05 F1 | 	add	fp, #4
19c68     A7 FC 61 FC | 	wrlong	result2, fp
19c6c     04 4E 05 F1 | 	add	fp, #4
19c70     A7 FE 61 FC | 	wrlong	result3, fp
19c74     08 4E 85 F1 | 	sub	fp, #8
19c78     A7 12 02 F6 | 	mov	arg01, fp
19c7c     0C 4E 85 F1 | 	sub	fp, #12
19c80     70 BF BF FD | 	call	#_converttoint
19c84     FD 20 02 F6 | 	mov	local02, result1
19c88     10 1F 02 F6 | 	mov	local01, local02
19c8c     01 1E 66 F0 | 	shl	local01, #1
19c90     10 1F 02 F1 | 	add	local01, local02
19c94     03 1E 66 F0 | 	shl	local01, #3
19c98     14 00 00 FF 
19c9c     38 E5 05 F1 | 	add	objptr, ##10552
19ca0     F2 1E 02 F1 | 	add	local01, objptr
19ca4     A7 12 02 F6 | 	mov	arg01, fp
19ca8     14 00 00 FF 
19cac     38 E5 85 F1 | 	sub	objptr, ##10552
19cb0     FC BF BF FD | 	call	#_converttofloat
19cb4     10 1E 06 F1 | 	add	local01, #16
19cb8     0F FB 61 FC | 	wrlong	result1, local01
19cbc     A7 F0 03 F6 | 	mov	ptra, fp
19cc0     B2 00 A0 FD | 	call	#popregs_
19cc4                 | _do_setpan_ret
19cc4     2D 00 64 FD | 	ret
19cc8                 | 
19cc8                 | ' 
19cc8                 | ' 
19cc8                 | ' sub do_pinwrite
19cc8                 | _do_pinwrite
19cc8     01 4A 05 F6 | 	mov	COUNT_, #1
19ccc     A8 00 A0 FD | 	call	#pushregs_
19cd0     18 F0 07 F1 | 	add	ptra, #24
19cd4     80 1D BF FD | 	call	#_pop
19cd8     FD 14 02 F6 | 	mov	arg02, result1
19cdc     FE 12 02 F6 | 	mov	arg01, result2
19ce0     FF 1E 02 F6 | 	mov	local01, result3
19ce4     A7 14 62 FC | 	wrlong	arg02, fp
19ce8     04 4E 05 F1 | 	add	fp, #4
19cec     A7 12 62 FC | 	wrlong	arg01, fp
19cf0     04 4E 05 F1 | 	add	fp, #4
19cf4     A7 1E 62 FC | 	wrlong	local01, fp
19cf8     08 4E 85 F1 | 	sub	fp, #8
19cfc     58 1D BF FD | 	call	#_pop
19d00     FF 1E 02 F6 | 	mov	local01, result3
19d04     0C 4E 05 F1 | 	add	fp, #12
19d08     A7 FA 61 FC | 	wrlong	result1, fp
19d0c     04 4E 05 F1 | 	add	fp, #4
19d10     A7 FC 61 FC | 	wrlong	result2, fp
19d14     04 4E 05 F1 | 	add	fp, #4
19d18     A7 1E 62 FC | 	wrlong	local01, fp
19d1c     08 4E 85 F1 | 	sub	fp, #8
19d20     A7 12 02 F6 | 	mov	arg01, fp
19d24     0C 4E 85 F1 | 	sub	fp, #12
19d28     C8 BE BF FD | 	call	#_converttoint
19d2c     FD 1E 02 F6 | 	mov	local01, result1
19d30     A7 12 02 F6 | 	mov	arg01, fp
19d34     BC BE BF FD | 	call	#_converttoint
19d38     FD 14 02 F6 | 	mov	arg02, result1
19d3c     0F 13 02 F6 | 	mov	arg01, local01
19d40     58 6F B0 FD | 	call	#__system___pinwrite
19d44     A7 F0 03 F6 | 	mov	ptra, fp
19d48     B2 00 A0 FD | 	call	#popregs_
19d4c                 | _do_pinwrite_ret
19d4c     2D 00 64 FD | 	ret
19d50                 | 
19d50                 | ' 
19d50                 | ' sub do_pinfloat
19d50                 | _do_pinfloat
19d50     00 4A 05 F6 | 	mov	COUNT_, #0
19d54     A8 00 A0 FD | 	call	#pushregs_
19d58     0C F0 07 F1 | 	add	ptra, #12
19d5c     F8 1C BF FD | 	call	#_pop
19d60     A7 FA 61 FC | 	wrlong	result1, fp
19d64     04 4E 05 F1 | 	add	fp, #4
19d68     A7 FC 61 FC | 	wrlong	result2, fp
19d6c     04 4E 05 F1 | 	add	fp, #4
19d70     A7 FE 61 FC | 	wrlong	result3, fp
19d74     08 4E 85 F1 | 	sub	fp, #8
19d78     A7 12 02 F6 | 	mov	arg01, fp
19d7c     74 BE BF FD | 	call	#_converttoint
19d80     50 FA 61 FD | 	fltl	result1
19d84     A7 F0 03 F6 | 	mov	ptra, fp
19d88     B2 00 A0 FD | 	call	#popregs_
19d8c                 | _do_pinfloat_ret
19d8c     2D 00 64 FD | 	ret
19d90                 | 
19d90                 | ' 
19d90                 | ' sub do_pinlo
19d90                 | _do_pinlo
19d90     00 4A 05 F6 | 	mov	COUNT_, #0
19d94     A8 00 A0 FD | 	call	#pushregs_
19d98     0C F0 07 F1 | 	add	ptra, #12
19d9c     B8 1C BF FD | 	call	#_pop
19da0     A7 FA 61 FC | 	wrlong	result1, fp
19da4     04 4E 05 F1 | 	add	fp, #4
19da8     A7 FC 61 FC | 	wrlong	result2, fp
19dac     04 4E 05 F1 | 	add	fp, #4
19db0     A7 FE 61 FC | 	wrlong	result3, fp
19db4     08 4E 85 F1 | 	sub	fp, #8
19db8     A7 12 02 F6 | 	mov	arg01, fp
19dbc     34 BE BF FD | 	call	#_converttoint
19dc0     58 FA 61 FD | 	drvl	result1
19dc4     A7 F0 03 F6 | 	mov	ptra, fp
19dc8     B2 00 A0 FD | 	call	#popregs_
19dcc                 | _do_pinlo_ret
19dcc     2D 00 64 FD | 	ret
19dd0                 | 
19dd0                 | ' 
19dd0                 | ' sub do_pinhi
19dd0                 | _do_pinhi
19dd0     00 4A 05 F6 | 	mov	COUNT_, #0
19dd4     A8 00 A0 FD | 	call	#pushregs_
19dd8     0C F0 07 F1 | 	add	ptra, #12
19ddc     78 1C BF FD | 	call	#_pop
19de0     A7 FA 61 FC | 	wrlong	result1, fp
19de4     04 4E 05 F1 | 	add	fp, #4
19de8     A7 FC 61 FC | 	wrlong	result2, fp
19dec     04 4E 05 F1 | 	add	fp, #4
19df0     A7 FE 61 FC | 	wrlong	result3, fp
19df4     08 4E 85 F1 | 	sub	fp, #8
19df8     A7 12 02 F6 | 	mov	arg01, fp
19dfc     F4 BD BF FD | 	call	#_converttoint
19e00     59 FA 61 FD | 	drvh	result1
19e04     A7 F0 03 F6 | 	mov	ptra, fp
19e08     B2 00 A0 FD | 	call	#popregs_
19e0c                 | _do_pinhi_ret
19e0c     2D 00 64 FD | 	ret
19e10                 | 
19e10                 | ' 
19e10                 | ' sub do_pintoggle
19e10                 | _do_pintoggle
19e10     00 4A 05 F6 | 	mov	COUNT_, #0
19e14     A8 00 A0 FD | 	call	#pushregs_
19e18     0C F0 07 F1 | 	add	ptra, #12
19e1c     38 1C BF FD | 	call	#_pop
19e20     A7 FA 61 FC | 	wrlong	result1, fp
19e24     04 4E 05 F1 | 	add	fp, #4
19e28     A7 FC 61 FC | 	wrlong	result2, fp
19e2c     04 4E 05 F1 | 	add	fp, #4
19e30     A7 FE 61 FC | 	wrlong	result3, fp
19e34     08 4E 85 F1 | 	sub	fp, #8
19e38     A7 12 02 F6 | 	mov	arg01, fp
19e3c     B4 BD BF FD | 	call	#_converttoint
19e40     5F FA 61 FD | 	drvnot	result1
19e44     A7 F0 03 F6 | 	mov	ptra, fp
19e48     B2 00 A0 FD | 	call	#popregs_
19e4c                 | _do_pintoggle_ret
19e4c     2D 00 64 FD | 	ret
19e50                 | 
19e50                 | ' 
19e50                 | ' 
19e50                 | ' sub do_pinstart
19e50                 | _do_pinstart
19e50     03 4A 05 F6 | 	mov	COUNT_, #3
19e54     A8 00 A0 FD | 	call	#pushregs_
19e58     30 F0 07 F1 | 	add	ptra, #48
19e5c     F8 1B BF FD | 	call	#_pop
19e60     FD 16 02 F6 | 	mov	arg03, result1
19e64     FE 14 02 F6 | 	mov	arg02, result2
19e68     FF 18 02 F6 | 	mov	arg04, result3
19e6c     A7 16 62 FC | 	wrlong	arg03, fp
19e70     04 4E 05 F1 | 	add	fp, #4
19e74     A7 14 62 FC | 	wrlong	arg02, fp
19e78     04 4E 05 F1 | 	add	fp, #4
19e7c     A7 18 62 FC | 	wrlong	arg04, fp
19e80     08 4E 85 F1 | 	sub	fp, #8
19e84     D0 1B BF FD | 	call	#_pop
19e88     FD 16 02 F6 | 	mov	arg03, result1
19e8c     FE 14 02 F6 | 	mov	arg02, result2
19e90     FF 18 02 F6 | 	mov	arg04, result3
19e94     0C 4E 05 F1 | 	add	fp, #12
19e98     A7 16 62 FC | 	wrlong	arg03, fp
19e9c     04 4E 05 F1 | 	add	fp, #4
19ea0     A7 14 62 FC | 	wrlong	arg02, fp
19ea4     04 4E 05 F1 | 	add	fp, #4
19ea8     A7 18 62 FC | 	wrlong	arg04, fp
19eac     14 4E 85 F1 | 	sub	fp, #20
19eb0     A4 1B BF FD | 	call	#_pop
19eb4     FD 16 02 F6 | 	mov	arg03, result1
19eb8     FE 14 02 F6 | 	mov	arg02, result2
19ebc     FF 18 02 F6 | 	mov	arg04, result3
19ec0     18 4E 05 F1 | 	add	fp, #24
19ec4     A7 16 62 FC | 	wrlong	arg03, fp
19ec8     04 4E 05 F1 | 	add	fp, #4
19ecc     A7 14 62 FC | 	wrlong	arg02, fp
19ed0     04 4E 05 F1 | 	add	fp, #4
19ed4     A7 18 62 FC | 	wrlong	arg04, fp
19ed8     20 4E 85 F1 | 	sub	fp, #32
19edc     78 1B BF FD | 	call	#_pop
19ee0     FF 16 02 F6 | 	mov	arg03, result3
19ee4     24 4E 05 F1 | 	add	fp, #36
19ee8     A7 FA 61 FC | 	wrlong	result1, fp
19eec     04 4E 05 F1 | 	add	fp, #4
19ef0     A7 FC 61 FC | 	wrlong	result2, fp
19ef4     04 4E 05 F1 | 	add	fp, #4
19ef8     A7 16 62 FC | 	wrlong	arg03, fp
19efc     08 4E 85 F1 | 	sub	fp, #8
19f00     A7 12 02 F6 | 	mov	arg01, fp
19f04     24 4E 85 F1 | 	sub	fp, #36
19f08     E8 BC BF FD | 	call	#_converttoint
19f0c     FD 1E 02 F6 | 	mov	local01, result1
19f10     18 4E 05 F1 | 	add	fp, #24
19f14     A7 12 02 F6 | 	mov	arg01, fp
19f18     18 4E 85 F1 | 	sub	fp, #24
19f1c     D4 BC BF FD | 	call	#_converttoint
19f20     FD 20 02 F6 | 	mov	local02, result1
19f24     0C 4E 05 F1 | 	add	fp, #12
19f28     A7 12 02 F6 | 	mov	arg01, fp
19f2c     0C 4E 85 F1 | 	sub	fp, #12
19f30     C0 BC BF FD | 	call	#_converttoint
19f34     FD 22 02 F6 | 	mov	local03, result1
19f38     A7 12 02 F6 | 	mov	arg01, fp
19f3c     B4 BC BF FD | 	call	#_converttoint
19f40     40 1E 62 FD | 	dirl	local01
19f44     0F 21 02 FC | 	wrpin	local02, local01
19f48     0F 23 12 FC | 	wxpin	local03, local01
19f4c     0F FB 21 FC | 	wypin	result1, local01
19f50     41 1E 62 FD | 	dirh	local01
19f54     A7 F0 03 F6 | 	mov	ptra, fp
19f58     B2 00 A0 FD | 	call	#popregs_
19f5c                 | _do_pinstart_ret
19f5c     2D 00 64 FD | 	ret
19f60                 | 
19f60                 | ' 
19f60                 | ' 
19f60                 | ' sub do_wrpin
19f60                 | _do_wrpin
19f60     01 4A 05 F6 | 	mov	COUNT_, #1
19f64     A8 00 A0 FD | 	call	#pushregs_
19f68     18 F0 07 F1 | 	add	ptra, #24
19f6c     E8 1A BF FD | 	call	#_pop
19f70     FD 14 02 F6 | 	mov	arg02, result1
19f74     FE 12 02 F6 | 	mov	arg01, result2
19f78     FF 1E 02 F6 | 	mov	local01, result3
19f7c     A7 14 62 FC | 	wrlong	arg02, fp
19f80     04 4E 05 F1 | 	add	fp, #4
19f84     A7 12 62 FC | 	wrlong	arg01, fp
19f88     04 4E 05 F1 | 	add	fp, #4
19f8c     A7 1E 62 FC | 	wrlong	local01, fp
19f90     08 4E 85 F1 | 	sub	fp, #8
19f94     C0 1A BF FD | 	call	#_pop
19f98     FF 1E 02 F6 | 	mov	local01, result3
19f9c     0C 4E 05 F1 | 	add	fp, #12
19fa0     A7 FA 61 FC | 	wrlong	result1, fp
19fa4     04 4E 05 F1 | 	add	fp, #4
19fa8     A7 FC 61 FC | 	wrlong	result2, fp
19fac     04 4E 05 F1 | 	add	fp, #4
19fb0     A7 1E 62 FC | 	wrlong	local01, fp
19fb4     08 4E 85 F1 | 	sub	fp, #8
19fb8     A7 12 02 F6 | 	mov	arg01, fp
19fbc     0C 4E 85 F1 | 	sub	fp, #12
19fc0     30 BC BF FD | 	call	#_converttoint
19fc4     FD 1E 02 F6 | 	mov	local01, result1
19fc8     A7 12 02 F6 | 	mov	arg01, fp
19fcc     24 BC BF FD | 	call	#_converttoint
19fd0     0F FB 01 FC | 	wrpin	result1, local01
19fd4     A7 F0 03 F6 | 	mov	ptra, fp
19fd8     B2 00 A0 FD | 	call	#popregs_
19fdc                 | _do_wrpin_ret
19fdc     2D 00 64 FD | 	ret
19fe0                 | 
19fe0                 | ' 
19fe0                 | ' sub do_wxpin
19fe0                 | _do_wxpin
19fe0     01 4A 05 F6 | 	mov	COUNT_, #1
19fe4     A8 00 A0 FD | 	call	#pushregs_
19fe8     18 F0 07 F1 | 	add	ptra, #24
19fec     68 1A BF FD | 	call	#_pop
19ff0     FD 14 02 F6 | 	mov	arg02, result1
19ff4     FE 12 02 F6 | 	mov	arg01, result2
19ff8     FF 1E 02 F6 | 	mov	local01, result3
19ffc     A7 14 62 FC | 	wrlong	arg02, fp
1a000     04 4E 05 F1 | 	add	fp, #4
1a004     A7 12 62 FC | 	wrlong	arg01, fp
1a008     04 4E 05 F1 | 	add	fp, #4
1a00c     A7 1E 62 FC | 	wrlong	local01, fp
1a010     08 4E 85 F1 | 	sub	fp, #8
1a014     40 1A BF FD | 	call	#_pop
1a018     FF 1E 02 F6 | 	mov	local01, result3
1a01c     0C 4E 05 F1 | 	add	fp, #12
1a020     A7 FA 61 FC | 	wrlong	result1, fp
1a024     04 4E 05 F1 | 	add	fp, #4
1a028     A7 FC 61 FC | 	wrlong	result2, fp
1a02c     04 4E 05 F1 | 	add	fp, #4
1a030     A7 1E 62 FC | 	wrlong	local01, fp
1a034     08 4E 85 F1 | 	sub	fp, #8
1a038     A7 12 02 F6 | 	mov	arg01, fp
1a03c     0C 4E 85 F1 | 	sub	fp, #12
1a040     B0 BB BF FD | 	call	#_converttoint
1a044     FD 1E 02 F6 | 	mov	local01, result1
1a048     A7 12 02 F6 | 	mov	arg01, fp
1a04c     A4 BB BF FD | 	call	#_converttoint
1a050     0F FB 11 FC | 	wxpin	result1, local01
1a054     A7 F0 03 F6 | 	mov	ptra, fp
1a058     B2 00 A0 FD | 	call	#popregs_
1a05c                 | _do_wxpin_ret
1a05c     2D 00 64 FD | 	ret
1a060                 | 
1a060                 | ' 
1a060                 | ' sub do_wypin
1a060                 | _do_wypin
1a060     01 4A 05 F6 | 	mov	COUNT_, #1
1a064     A8 00 A0 FD | 	call	#pushregs_
1a068     18 F0 07 F1 | 	add	ptra, #24
1a06c     E8 19 BF FD | 	call	#_pop
1a070     FD 14 02 F6 | 	mov	arg02, result1
1a074     FE 12 02 F6 | 	mov	arg01, result2
1a078     FF 1E 02 F6 | 	mov	local01, result3
1a07c     A7 14 62 FC | 	wrlong	arg02, fp
1a080     04 4E 05 F1 | 	add	fp, #4
1a084     A7 12 62 FC | 	wrlong	arg01, fp
1a088     04 4E 05 F1 | 	add	fp, #4
1a08c     A7 1E 62 FC | 	wrlong	local01, fp
1a090     08 4E 85 F1 | 	sub	fp, #8
1a094     C0 19 BF FD | 	call	#_pop
1a098     FF 1E 02 F6 | 	mov	local01, result3
1a09c     0C 4E 05 F1 | 	add	fp, #12
1a0a0     A7 FA 61 FC | 	wrlong	result1, fp
1a0a4     04 4E 05 F1 | 	add	fp, #4
1a0a8     A7 FC 61 FC | 	wrlong	result2, fp
1a0ac     04 4E 05 F1 | 	add	fp, #4
1a0b0     A7 1E 62 FC | 	wrlong	local01, fp
1a0b4     08 4E 85 F1 | 	sub	fp, #8
1a0b8     A7 12 02 F6 | 	mov	arg01, fp
1a0bc     0C 4E 85 F1 | 	sub	fp, #12
1a0c0     30 BB BF FD | 	call	#_converttoint
1a0c4     FD 1E 02 F6 | 	mov	local01, result1
1a0c8     A7 12 02 F6 | 	mov	arg01, fp
1a0cc     24 BB BF FD | 	call	#_converttoint
1a0d0     0F FB 21 FC | 	wypin	result1, local01
1a0d4     A7 F0 03 F6 | 	mov	ptra, fp
1a0d8     B2 00 A0 FD | 	call	#popregs_
1a0dc                 | _do_wypin_ret
1a0dc     2D 00 64 FD | 	ret
1a0e0                 | 
1a0e0                 | ' 
1a0e0                 | ' sub do_position
1a0e0                 | _do_position
1a0e0     01 4A 05 F6 | 	mov	COUNT_, #1
1a0e4     A8 00 A0 FD | 	call	#pushregs_
1a0e8     18 F0 07 F1 | 	add	ptra, #24
1a0ec     68 19 BF FD | 	call	#_pop
1a0f0     FD 14 02 F6 | 	mov	arg02, result1
1a0f4     FE 12 02 F6 | 	mov	arg01, result2
1a0f8     FF 1E 02 F6 | 	mov	local01, result3
1a0fc     A7 14 62 FC | 	wrlong	arg02, fp
1a100     04 4E 05 F1 | 	add	fp, #4
1a104     A7 12 62 FC | 	wrlong	arg01, fp
1a108     04 4E 05 F1 | 	add	fp, #4
1a10c     A7 1E 62 FC | 	wrlong	local01, fp
1a110     08 4E 85 F1 | 	sub	fp, #8
1a114     40 19 BF FD | 	call	#_pop
1a118     FF 1E 02 F6 | 	mov	local01, result3
1a11c     0C 4E 05 F1 | 	add	fp, #12
1a120     A7 FA 61 FC | 	wrlong	result1, fp
1a124     04 4E 05 F1 | 	add	fp, #4
1a128     A7 FC 61 FC | 	wrlong	result2, fp
1a12c     04 4E 05 F1 | 	add	fp, #4
1a130     A7 1E 62 FC | 	wrlong	local01, fp
1a134     08 4E 85 F1 | 	sub	fp, #8
1a138     A7 12 02 F6 | 	mov	arg01, fp
1a13c     0C 4E 85 F1 | 	sub	fp, #12
1a140     B0 BA BF FD | 	call	#_converttoint
1a144     FD 1E 02 F6 | 	mov	local01, result1
1a148     A7 12 02 F6 | 	mov	arg01, fp
1a14c     A4 BA BF FD | 	call	#_converttoint
1a150     FD 14 02 F6 | 	mov	arg02, result1
1a154     0F 13 02 F6 | 	mov	arg01, local01
1a158     A0 4F B0 FD | 	call	#_hg010b_spin2_setcursorpos
1a15c     A7 F0 03 F6 | 	mov	ptra, fp
1a160     B2 00 A0 FD | 	call	#popregs_
1a164                 | _do_position_ret
1a164     2D 00 64 FD | 	ret
1a168                 | 
1a168                 | ' 
1a168                 | ' sub do_poke
1a168                 | _do_poke
1a168     01 4A 05 F6 | 	mov	COUNT_, #1
1a16c     A8 00 A0 FD | 	call	#pushregs_
1a170     20 F0 07 F1 | 	add	ptra, #32
1a174     E0 18 BF FD | 	call	#_pop
1a178     FD 14 02 F6 | 	mov	arg02, result1
1a17c     FE 12 02 F6 | 	mov	arg01, result2
1a180     FF 1E 02 F6 | 	mov	local01, result3
1a184     A7 14 62 FC | 	wrlong	arg02, fp
1a188     04 4E 05 F1 | 	add	fp, #4
1a18c     A7 12 62 FC | 	wrlong	arg01, fp
1a190     04 4E 05 F1 | 	add	fp, #4
1a194     A7 1E 62 FC | 	wrlong	local01, fp
1a198     08 4E 85 F1 | 	sub	fp, #8
1a19c     B8 18 BF FD | 	call	#_pop
1a1a0     FF 1E 02 F6 | 	mov	local01, result3
1a1a4     0C 4E 05 F1 | 	add	fp, #12
1a1a8     A7 FA 61 FC | 	wrlong	result1, fp
1a1ac     04 4E 05 F1 | 	add	fp, #4
1a1b0     A7 FC 61 FC | 	wrlong	result2, fp
1a1b4     04 4E 05 F1 | 	add	fp, #4
1a1b8     A7 1E 62 FC | 	wrlong	local01, fp
1a1bc     08 4E 85 F1 | 	sub	fp, #8
1a1c0     A7 12 02 F6 | 	mov	arg01, fp
1a1c4     0C 4E 85 F1 | 	sub	fp, #12
1a1c8     28 BA BF FD | 	call	#_converttoint
1a1cc     18 4E 05 F1 | 	add	fp, #24
1a1d0     A7 FA 61 FC | 	wrlong	result1, fp
1a1d4     18 4E 85 F1 | 	sub	fp, #24
1a1d8     A7 12 02 F6 | 	mov	arg01, fp
1a1dc     14 BA BF FD | 	call	#_converttoint
1a1e0     1C 4E 05 F1 | 	add	fp, #28
1a1e4     A7 FA 61 FC | 	wrlong	result1, fp
1a1e8                 | ' t1=pop() 'value
1a1e8                 | ' t2=pop() 
1a1e8                 | ' a=converttoint(t2) : v=converttoint(t1)
1a1e8                 | ' if a<$80000 then poke a,v else pspoke a,v
1a1e8     04 4E 85 F1 | 	sub	fp, #4
1a1ec     A7 1E 02 FB | 	rdlong	local01, fp
1a1f0     18 4E 85 F1 | 	sub	fp, #24
1a1f4     00 04 00 FF 
1a1f8     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1a1fc     1C 00 90 3D |  if_ae	jmp	#LR__2120
1a200     18 4E 05 F1 | 	add	fp, #24
1a204     A7 12 02 FB | 	rdlong	arg01, fp
1a208     04 4E 05 F1 | 	add	fp, #4
1a20c     A7 14 02 FB | 	rdlong	arg02, fp
1a210     1C 4E 85 F1 | 	sub	fp, #28
1a214     09 15 42 FC | 	wrbyte	arg02, arg01
1a218     18 00 90 FD | 	jmp	#LR__2121
1a21c                 | LR__2120
1a21c     18 4E 05 F1 | 	add	fp, #24
1a220     A7 12 02 FB | 	rdlong	arg01, fp
1a224     04 4E 05 F1 | 	add	fp, #4
1a228     A7 14 02 FB | 	rdlong	arg02, fp
1a22c     1C 4E 85 F1 | 	sub	fp, #28
1a230     10 35 B0 FD | 	call	#_pspoke
1a234                 | LR__2121
1a234     A7 F0 03 F6 | 	mov	ptra, fp
1a238     B2 00 A0 FD | 	call	#popregs_
1a23c                 | _do_poke_ret
1a23c     2D 00 64 FD | 	ret
1a240                 | 
1a240                 | ' 
1a240                 | ' sub do_dpoke
1a240                 | _do_dpoke
1a240     01 4A 05 F6 | 	mov	COUNT_, #1
1a244     A8 00 A0 FD | 	call	#pushregs_
1a248     20 F0 07 F1 | 	add	ptra, #32
1a24c     08 18 BF FD | 	call	#_pop
1a250     FD 14 02 F6 | 	mov	arg02, result1
1a254     FE 12 02 F6 | 	mov	arg01, result2
1a258     FF 1E 02 F6 | 	mov	local01, result3
1a25c     A7 14 62 FC | 	wrlong	arg02, fp
1a260     04 4E 05 F1 | 	add	fp, #4
1a264     A7 12 62 FC | 	wrlong	arg01, fp
1a268     04 4E 05 F1 | 	add	fp, #4
1a26c     A7 1E 62 FC | 	wrlong	local01, fp
1a270     08 4E 85 F1 | 	sub	fp, #8
1a274     E0 17 BF FD | 	call	#_pop
1a278     FF 1E 02 F6 | 	mov	local01, result3
1a27c     0C 4E 05 F1 | 	add	fp, #12
1a280     A7 FA 61 FC | 	wrlong	result1, fp
1a284     04 4E 05 F1 | 	add	fp, #4
1a288     A7 FC 61 FC | 	wrlong	result2, fp
1a28c     04 4E 05 F1 | 	add	fp, #4
1a290     A7 1E 62 FC | 	wrlong	local01, fp
1a294     08 4E 85 F1 | 	sub	fp, #8
1a298     A7 12 02 F6 | 	mov	arg01, fp
1a29c     0C 4E 85 F1 | 	sub	fp, #12
1a2a0     50 B9 BF FD | 	call	#_converttoint
1a2a4     18 4E 05 F1 | 	add	fp, #24
1a2a8     A7 FA 61 FC | 	wrlong	result1, fp
1a2ac     18 4E 85 F1 | 	sub	fp, #24
1a2b0     A7 12 02 F6 | 	mov	arg01, fp
1a2b4     3C B9 BF FD | 	call	#_converttoint
1a2b8     1C 4E 05 F1 | 	add	fp, #28
1a2bc     A7 FA 61 FC | 	wrlong	result1, fp
1a2c0                 | ' t1=pop() 'value
1a2c0                 | ' t2=pop() 
1a2c0                 | ' a=converttoint(t2) : v=converttoint(t1)
1a2c0                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
1a2c0     04 4E 85 F1 | 	sub	fp, #4
1a2c4     A7 1E 02 FB | 	rdlong	local01, fp
1a2c8     18 4E 85 F1 | 	sub	fp, #24
1a2cc     00 04 00 FF 
1a2d0     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1a2d4     1C 00 90 3D |  if_ae	jmp	#LR__2130
1a2d8     18 4E 05 F1 | 	add	fp, #24
1a2dc     A7 12 02 FB | 	rdlong	arg01, fp
1a2e0     04 4E 05 F1 | 	add	fp, #4
1a2e4     A7 14 02 FB | 	rdlong	arg02, fp
1a2e8     1C 4E 85 F1 | 	sub	fp, #28
1a2ec     09 15 52 FC | 	wrword	arg02, arg01
1a2f0     18 00 90 FD | 	jmp	#LR__2131
1a2f4                 | LR__2130
1a2f4     18 4E 05 F1 | 	add	fp, #24
1a2f8     A7 12 02 FB | 	rdlong	arg01, fp
1a2fc     04 4E 05 F1 | 	add	fp, #4
1a300     A7 14 02 FB | 	rdlong	arg02, fp
1a304     1C 4E 85 F1 | 	sub	fp, #28
1a308     F0 33 B0 FD | 	call	#_psdpoke
1a30c                 | LR__2131
1a30c     A7 F0 03 F6 | 	mov	ptra, fp
1a310     B2 00 A0 FD | 	call	#popregs_
1a314                 | _do_dpoke_ret
1a314     2D 00 64 FD | 	ret
1a318                 | 
1a318                 | ' 
1a318                 | ' sub do_lpoke
1a318                 | _do_lpoke
1a318     01 4A 05 F6 | 	mov	COUNT_, #1
1a31c     A8 00 A0 FD | 	call	#pushregs_
1a320     20 F0 07 F1 | 	add	ptra, #32
1a324     30 17 BF FD | 	call	#_pop
1a328     FD 14 02 F6 | 	mov	arg02, result1
1a32c     FE 12 02 F6 | 	mov	arg01, result2
1a330     FF 1E 02 F6 | 	mov	local01, result3
1a334     A7 14 62 FC | 	wrlong	arg02, fp
1a338     04 4E 05 F1 | 	add	fp, #4
1a33c     A7 12 62 FC | 	wrlong	arg01, fp
1a340     04 4E 05 F1 | 	add	fp, #4
1a344     A7 1E 62 FC | 	wrlong	local01, fp
1a348     08 4E 85 F1 | 	sub	fp, #8
1a34c     08 17 BF FD | 	call	#_pop
1a350     FF 1E 02 F6 | 	mov	local01, result3
1a354     0C 4E 05 F1 | 	add	fp, #12
1a358     A7 FA 61 FC | 	wrlong	result1, fp
1a35c     04 4E 05 F1 | 	add	fp, #4
1a360     A7 FC 61 FC | 	wrlong	result2, fp
1a364     04 4E 05 F1 | 	add	fp, #4
1a368     A7 1E 62 FC | 	wrlong	local01, fp
1a36c     08 4E 85 F1 | 	sub	fp, #8
1a370     A7 12 02 F6 | 	mov	arg01, fp
1a374     0C 4E 85 F1 | 	sub	fp, #12
1a378     78 B8 BF FD | 	call	#_converttoint
1a37c     18 4E 05 F1 | 	add	fp, #24
1a380     A7 FA 61 FC | 	wrlong	result1, fp
1a384     18 4E 85 F1 | 	sub	fp, #24
1a388     A7 12 02 F6 | 	mov	arg01, fp
1a38c     64 B8 BF FD | 	call	#_converttoint
1a390     1C 4E 05 F1 | 	add	fp, #28
1a394     A7 FA 61 FC | 	wrlong	result1, fp
1a398                 | ' t1=pop() 'value
1a398                 | ' t2=pop() 
1a398                 | ' a=converttoint(t2) : v=converttoint(t1)
1a398                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
1a398     04 4E 85 F1 | 	sub	fp, #4
1a39c     A7 1E 02 FB | 	rdlong	local01, fp
1a3a0     18 4E 85 F1 | 	sub	fp, #24
1a3a4     00 04 00 FF 
1a3a8     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1a3ac     1C 00 90 3D |  if_ae	jmp	#LR__2140
1a3b0     18 4E 05 F1 | 	add	fp, #24
1a3b4     A7 12 02 FB | 	rdlong	arg01, fp
1a3b8     04 4E 05 F1 | 	add	fp, #4
1a3bc     A7 14 02 FB | 	rdlong	arg02, fp
1a3c0     1C 4E 85 F1 | 	sub	fp, #28
1a3c4     09 15 62 FC | 	wrlong	arg02, arg01
1a3c8     18 00 90 FD | 	jmp	#LR__2141
1a3cc                 | LR__2140
1a3cc     18 4E 05 F1 | 	add	fp, #24
1a3d0     A7 12 02 FB | 	rdlong	arg01, fp
1a3d4     04 4E 05 F1 | 	add	fp, #4
1a3d8     A7 14 02 FB | 	rdlong	arg02, fp
1a3dc     1C 4E 85 F1 | 	sub	fp, #28
1a3e0     D0 32 B0 FD | 	call	#_pslpoke
1a3e4                 | LR__2141
1a3e4     A7 F0 03 F6 | 	mov	ptra, fp
1a3e8     B2 00 A0 FD | 	call	#popregs_
1a3ec                 | _do_lpoke_ret
1a3ec     2D 00 64 FD | 	ret
1a3f0                 | 
1a3f0                 | ' 
1a3f0                 | ' sub do_peek
1a3f0                 | _do_peek
1a3f0     00 4A 05 F6 | 	mov	COUNT_, #0
1a3f4     A8 00 A0 FD | 	call	#pushregs_
1a3f8     14 F0 07 F1 | 	add	ptra, #20
1a3fc     58 16 BF FD | 	call	#_pop
1a400     A7 FA 61 FC | 	wrlong	result1, fp
1a404     04 4E 05 F1 | 	add	fp, #4
1a408     A7 FC 61 FC | 	wrlong	result2, fp
1a40c     04 4E 05 F1 | 	add	fp, #4
1a410     A7 FE 61 FC | 	wrlong	result3, fp
1a414     08 4E 85 F1 | 	sub	fp, #8
1a418     A7 12 02 F6 | 	mov	arg01, fp
1a41c     D4 B7 BF FD | 	call	#_converttoint
1a420     0C 4E 05 F1 | 	add	fp, #12
1a424     A7 FA 61 FC | 	wrlong	result1, fp
1a428                 | ' t1=pop()
1a428                 | ' a=converttoint(t1)
1a428                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
1a428     0C 4E 85 F1 | 	sub	fp, #12
1a42c     00 04 00 FF 
1a430     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1a434     1C 00 90 3D |  if_ae	jmp	#LR__2150
1a438     0C 4E 05 F1 | 	add	fp, #12
1a43c     A7 12 02 FB | 	rdlong	arg01, fp
1a440     09 FB C1 FA | 	rdbyte	result1, arg01
1a444     04 4E 05 F1 | 	add	fp, #4
1a448     A7 FA 61 FC | 	wrlong	result1, fp
1a44c     10 4E 85 F1 | 	sub	fp, #16
1a450     20 00 90 FD | 	jmp	#LR__2151
1a454                 | LR__2150
1a454     0C 4E 05 F1 | 	add	fp, #12
1a458     A7 12 02 FB | 	rdlong	arg01, fp
1a45c     0C 4E 85 F1 | 	sub	fp, #12
1a460     28 33 B0 FD | 	call	#_pspeek
1a464     FD FA E1 F8 | 	getbyte	result1, result1, #0
1a468     10 4E 05 F1 | 	add	fp, #16
1a46c     A7 FA 61 FC | 	wrlong	result1, fp
1a470     10 4E 85 F1 | 	sub	fp, #16
1a474                 | LR__2151
1a474     08 4E 05 F1 | 	add	fp, #8
1a478     A7 3A 68 FC | 	wrlong	#29, fp
1a47c     08 4E 05 F1 | 	add	fp, #8
1a480     A7 12 02 FB | 	rdlong	arg01, fp
1a484     10 4E 85 F1 | 	sub	fp, #16
1a488     A7 12 62 FC | 	wrlong	arg01, fp
1a48c     A7 12 02 F6 | 	mov	arg01, fp
1a490     5C 16 BF FD | 	call	#_push
1a494     A7 F0 03 F6 | 	mov	ptra, fp
1a498     B2 00 A0 FD | 	call	#popregs_
1a49c                 | _do_peek_ret
1a49c     2D 00 64 FD | 	ret
1a4a0                 | 
1a4a0                 | ' 
1a4a0                 | ' sub do_dpeek
1a4a0                 | _do_dpeek
1a4a0     00 4A 05 F6 | 	mov	COUNT_, #0
1a4a4     A8 00 A0 FD | 	call	#pushregs_
1a4a8     14 F0 07 F1 | 	add	ptra, #20
1a4ac     A8 15 BF FD | 	call	#_pop
1a4b0     A7 FA 61 FC | 	wrlong	result1, fp
1a4b4     04 4E 05 F1 | 	add	fp, #4
1a4b8     A7 FC 61 FC | 	wrlong	result2, fp
1a4bc     04 4E 05 F1 | 	add	fp, #4
1a4c0     A7 FE 61 FC | 	wrlong	result3, fp
1a4c4     08 4E 85 F1 | 	sub	fp, #8
1a4c8     A7 12 02 F6 | 	mov	arg01, fp
1a4cc     24 B7 BF FD | 	call	#_converttoint
1a4d0     0C 4E 05 F1 | 	add	fp, #12
1a4d4     A7 FA 61 FC | 	wrlong	result1, fp
1a4d8                 | ' t1=pop()
1a4d8                 | ' a=converttoint(t1)
1a4d8                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
1a4d8     0C 4E 85 F1 | 	sub	fp, #12
1a4dc     00 04 00 FF 
1a4e0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1a4e4     1C 00 90 3D |  if_ae	jmp	#LR__2160
1a4e8     0C 4E 05 F1 | 	add	fp, #12
1a4ec     A7 12 02 FB | 	rdlong	arg01, fp
1a4f0     09 FB E1 FA | 	rdword	result1, arg01
1a4f4     04 4E 05 F1 | 	add	fp, #4
1a4f8     A7 FA 61 FC | 	wrlong	result1, fp
1a4fc     10 4E 85 F1 | 	sub	fp, #16
1a500     1C 00 90 FD | 	jmp	#LR__2161
1a504                 | LR__2160
1a504     0C 4E 05 F1 | 	add	fp, #12
1a508     A7 12 02 FB | 	rdlong	arg01, fp
1a50c     0C 4E 85 F1 | 	sub	fp, #12
1a510     28 33 B0 FD | 	call	#_psdpeek
1a514     10 4E 05 F1 | 	add	fp, #16
1a518     A7 FA 61 FC | 	wrlong	result1, fp
1a51c     10 4E 85 F1 | 	sub	fp, #16
1a520                 | LR__2161
1a520     08 4E 05 F1 | 	add	fp, #8
1a524     A7 3A 68 FC | 	wrlong	#29, fp
1a528     08 4E 05 F1 | 	add	fp, #8
1a52c     A7 12 02 FB | 	rdlong	arg01, fp
1a530     10 4E 85 F1 | 	sub	fp, #16
1a534     A7 12 62 FC | 	wrlong	arg01, fp
1a538     A7 12 02 F6 | 	mov	arg01, fp
1a53c     B0 15 BF FD | 	call	#_push
1a540     A7 F0 03 F6 | 	mov	ptra, fp
1a544     B2 00 A0 FD | 	call	#popregs_
1a548                 | _do_dpeek_ret
1a548     2D 00 64 FD | 	ret
1a54c                 | 
1a54c                 | ' 
1a54c                 | ' 
1a54c                 | ' sub do_lpeek
1a54c                 | _do_lpeek
1a54c     00 4A 05 F6 | 	mov	COUNT_, #0
1a550     A8 00 A0 FD | 	call	#pushregs_
1a554     14 F0 07 F1 | 	add	ptra, #20
1a558     FC 14 BF FD | 	call	#_pop
1a55c     A7 FA 61 FC | 	wrlong	result1, fp
1a560     04 4E 05 F1 | 	add	fp, #4
1a564     A7 FC 61 FC | 	wrlong	result2, fp
1a568     04 4E 05 F1 | 	add	fp, #4
1a56c     A7 FE 61 FC | 	wrlong	result3, fp
1a570     08 4E 85 F1 | 	sub	fp, #8
1a574     A7 12 02 F6 | 	mov	arg01, fp
1a578     78 B6 BF FD | 	call	#_converttoint
1a57c     0C 4E 05 F1 | 	add	fp, #12
1a580     A7 FA 61 FC | 	wrlong	result1, fp
1a584                 | ' t1=pop()
1a584                 | ' a=converttoint(t1)
1a584                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
1a584     0C 4E 85 F1 | 	sub	fp, #12
1a588     00 04 00 FF 
1a58c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1a590     1C 00 90 3D |  if_ae	jmp	#LR__2170
1a594     0C 4E 05 F1 | 	add	fp, #12
1a598     A7 12 02 FB | 	rdlong	arg01, fp
1a59c     09 FB 01 FB | 	rdlong	result1, arg01
1a5a0     04 4E 05 F1 | 	add	fp, #4
1a5a4     A7 FA 61 FC | 	wrlong	result1, fp
1a5a8     10 4E 85 F1 | 	sub	fp, #16
1a5ac     1C 00 90 FD | 	jmp	#LR__2171
1a5b0                 | LR__2170
1a5b0     0C 4E 05 F1 | 	add	fp, #12
1a5b4     A7 12 02 FB | 	rdlong	arg01, fp
1a5b8     0C 4E 85 F1 | 	sub	fp, #12
1a5bc     24 32 B0 FD | 	call	#_pslpeek
1a5c0     10 4E 05 F1 | 	add	fp, #16
1a5c4     A7 FA 61 FC | 	wrlong	result1, fp
1a5c8     10 4E 85 F1 | 	sub	fp, #16
1a5cc                 | LR__2171
1a5cc     08 4E 05 F1 | 	add	fp, #8
1a5d0     A7 3A 68 FC | 	wrlong	#29, fp
1a5d4     08 4E 05 F1 | 	add	fp, #8
1a5d8     A7 12 02 FB | 	rdlong	arg01, fp
1a5dc     10 4E 85 F1 | 	sub	fp, #16
1a5e0     A7 12 62 FC | 	wrlong	arg01, fp
1a5e4     A7 12 02 F6 | 	mov	arg01, fp
1a5e8     04 15 BF FD | 	call	#_push
1a5ec     A7 F0 03 F6 | 	mov	ptra, fp
1a5f0     B2 00 A0 FD | 	call	#popregs_
1a5f4                 | _do_lpeek_ret
1a5f4     2D 00 64 FD | 	ret
1a5f8                 | 
1a5f8                 | ' 
1a5f8                 | ' sub do_fre
1a5f8                 | _do_fre
1a5f8     01 4A 05 F6 | 	mov	COUNT_, #1
1a5fc     A8 00 A0 FD | 	call	#pushregs_
1a600     0C F0 07 F1 | 	add	ptra, #12
1a604     51 00 00 FF 
1a608     A8 E5 05 F1 | 	add	objptr, ##41896
1a60c     F2 12 02 FB | 	rdlong	arg01, objptr
1a610     0E 00 00 FF 
1a614     4C E5 85 F1 | 	sub	objptr, ##7500
1a618     F2 1E 02 FB | 	rdlong	local01, objptr
1a61c     0F 13 82 F1 | 	sub	arg01, local01
1a620     0E 00 00 FF 
1a624     B8 E5 05 F1 | 	add	objptr, ##7608
1a628     F2 12 62 FC | 	wrlong	arg01, objptr
1a62c     08 4E 05 F1 | 	add	fp, #8
1a630     A7 3A 68 FC | 	wrlong	#29, fp
1a634     08 4E 85 F1 | 	sub	fp, #8
1a638     F2 1E 02 FB | 	rdlong	local01, objptr
1a63c     52 00 00 FF 
1a640     14 E4 85 F1 | 	sub	objptr, ##42004
1a644     A7 1E 62 FC | 	wrlong	local01, fp
1a648     A7 12 02 F6 | 	mov	arg01, fp
1a64c     A0 14 BF FD | 	call	#_push
1a650     A7 F0 03 F6 | 	mov	ptra, fp
1a654     B2 00 A0 FD | 	call	#popregs_
1a658                 | _do_fre_ret
1a658     2D 00 64 FD | 	ret
1a65c                 | 
1a65c                 | ' 
1a65c                 | ' sub do_adr
1a65c                 | _do_adr
1a65c                 | _do_adr_ret
1a65c     2D 00 64 FD | 	ret
1a660                 | 
1a660                 | ' 
1a660                 | ' sub do_getnotevalue
1a660                 | _do_getnotevalue
1a660     01 4A 05 F6 | 	mov	COUNT_, #1
1a664     A8 00 A0 FD | 	call	#pushregs_
1a668     1C F0 07 F1 | 	add	ptra, #28
1a66c     E8 13 BF FD | 	call	#_pop
1a670     FF 14 02 F6 | 	mov	arg02, result3
1a674     10 4E 05 F1 | 	add	fp, #16
1a678     A7 FA 61 FC | 	wrlong	result1, fp
1a67c     04 4E 05 F1 | 	add	fp, #4
1a680     A7 FC 61 FC | 	wrlong	result2, fp
1a684     04 4E 05 F1 | 	add	fp, #4
1a688     A7 14 62 FC | 	wrlong	arg02, fp
1a68c     08 4E 85 F1 | 	sub	fp, #8
1a690     A7 12 02 F6 | 	mov	arg01, fp
1a694     10 4E 85 F1 | 	sub	fp, #16
1a698     58 B5 BF FD | 	call	#_converttoint
1a69c     FD 14 52 F6 | 	abs	arg02, result1 wc
1a6a0     0C 14 16 FD | 	qdiv	arg02, #12
1a6a4     0C 4E 05 F1 | 	add	fp, #12
1a6a8     A7 FA 61 FC | 	wrlong	result1, fp
1a6ac     14 00 00 FF 
1a6b0     D8 E4 05 F1 | 	add	objptr, ##10456
1a6b4     08 4E 85 F1 | 	sub	fp, #8
1a6b8     19 14 62 FD | 	getqy	arg02
1a6bc     0A 15 82 F6 | 	negc	arg02, arg02
1a6c0     02 14 66 F0 | 	shl	arg02, #2
1a6c4     F2 14 02 F1 | 	add	arg02, objptr
1a6c8     0A 15 02 FB | 	rdlong	arg02, arg02
1a6cc     A7 14 62 FC | 	wrlong	arg02, fp
1a6d0     08 4E 05 F1 | 	add	fp, #8
1a6d4     A7 14 02 FB | 	rdlong	arg02, fp
1a6d8     0A 15 52 F6 | 	abs	arg02, arg02 wc
1a6dc     0C 14 16 FD | 	qdiv	arg02, #12
1a6e0     0C 4E 85 F1 | 	sub	fp, #12
1a6e4     14 00 00 FF 
1a6e8     D8 E4 85 F1 | 	sub	objptr, ##10456
1a6ec     18 14 62 FD | 	getqx	arg02
1a6f0     0A 13 82 F6 | 	negc	arg01, arg02
1a6f4     09 13 52 F6 | 	abs	arg01, arg01 wc
1a6f8     1F 1E C6 C9 |  if_b	decod	local01, #31
1a6fc     00 1E 06 36 |  if_ae	mov	local01, #0
1a700     94 8B B0 FD | 	call	#__system___float_fromuns
1a704     0F FB 61 F5 | 	xor	result1, local01
1a708     08 4E 05 F1 | 	add	fp, #8
1a70c     A7 FA 61 FC | 	wrlong	result1, fp
1a710     FD 14 02 F6 | 	mov	arg02, result1
1a714     08 4E 85 F1 | 	sub	fp, #8
1a718     1E 12 C6 F9 | 	decod	arg01, #30
1a71c     60 9E B0 FD | 	call	#__system____builtin_powf
1a720     FD 12 02 F6 | 	mov	arg01, result1
1a724     04 4E 05 F1 | 	add	fp, #4
1a728     A7 14 02 FB | 	rdlong	arg02, fp
1a72c     04 4E 85 F1 | 	sub	fp, #4
1a730     68 8F B0 FD | 	call	#__system___float_mul
1a734     A7 FA 61 FC | 	wrlong	result1, fp
1a738     10 4E 05 F1 | 	add	fp, #16
1a73c     A7 FA 61 FC | 	wrlong	result1, fp
1a740     08 4E 05 F1 | 	add	fp, #8
1a744     A7 3C 68 FC | 	wrlong	#30, fp
1a748     08 4E 85 F1 | 	sub	fp, #8
1a74c     A7 12 02 F6 | 	mov	arg01, fp
1a750     10 4E 85 F1 | 	sub	fp, #16
1a754     98 13 BF FD | 	call	#_push
1a758     A7 F0 03 F6 | 	mov	ptra, fp
1a75c     B2 00 A0 FD | 	call	#popregs_
1a760                 | _do_getnotevalue_ret
1a760     2D 00 64 FD | 	ret
1a764                 | 
1a764                 | ' 
1a764                 | ' 
1a764                 | ' sub do_waitms
1a764                 | _do_waitms
1a764     01 4A 05 F6 | 	mov	COUNT_, #1
1a768     A8 00 A0 FD | 	call	#pushregs_
1a76c     18 F0 07 F1 | 	add	ptra, #24
1a770     E4 12 BF FD | 	call	#_pop
1a774     A7 FA 61 FC | 	wrlong	result1, fp
1a778     04 4E 05 F1 | 	add	fp, #4
1a77c     A7 FC 61 FC | 	wrlong	result2, fp
1a780     04 4E 05 F1 | 	add	fp, #4
1a784     A7 FE 61 FC | 	wrlong	result3, fp
1a788                 | ' 
1a788                 | ' t1=pop() 'value
1a788                 | ' 
1a788                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
1a788     08 4E 85 F1 | 	sub	fp, #8
1a78c     1C FE 0D F2 | 	cmp	result3, #28 wz
1a790     08 4E 05 51 |  if_ne	add	fp, #8
1a794     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1a798     08 4E 85 51 |  if_ne	sub	fp, #8
1a79c     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
1a7a0     A7 12 02 AB |  if_e	rdlong	arg01, fp
1a7a4     0C 4E 05 A1 |  if_e	add	fp, #12
1a7a8     A7 12 62 AC |  if_e	wrlong	arg01, fp
1a7ac     0C 4E 85 A1 |  if_e	sub	fp, #12
1a7b0     14 00 90 AD |  if_e	jmp	#LR__2180
1a7b4     A7 12 02 F6 | 	mov	arg01, fp
1a7b8     38 B4 BF FD | 	call	#_converttoint
1a7bc     0C 4E 05 F1 | 	add	fp, #12
1a7c0     A7 FA 61 FC | 	wrlong	result1, fp
1a7c4     0C 4E 85 F1 | 	sub	fp, #12
1a7c8                 | LR__2180
1a7c8                 | ' if t<0 then return
1a7c8     0C 4E 05 F1 | 	add	fp, #12
1a7cc     A7 12 02 FB | 	rdlong	arg01, fp
1a7d0     0C 4E 85 F1 | 	sub	fp, #12
1a7d4     00 12 56 F2 | 	cmps	arg01, #0 wc
1a7d8     B8 00 90 CD |  if_b	jmp	#LR__2185
1a7dc                 | ' if t < 5000 then 
1a7dc     0C 4E 05 F1 | 	add	fp, #12
1a7e0     A7 12 02 FB | 	rdlong	arg01, fp
1a7e4     0C 4E 85 F1 | 	sub	fp, #12
1a7e8     09 00 00 FF 
1a7ec     88 13 56 F2 | 	cmps	arg01, ##5000 wc
1a7f0     14 00 90 3D |  if_ae	jmp	#LR__2181
1a7f4     0C 4E 05 F1 | 	add	fp, #12
1a7f8     A7 12 02 FB | 	rdlong	arg01, fp
1a7fc     0C 4E 85 F1 | 	sub	fp, #12
1a800     D8 65 B0 FD | 	call	#__system___waitms
1a804     8C 00 90 FD | 	jmp	#LR__2184
1a808                 | LR__2181
1a808     10 4E 05 F1 | 	add	fp, #16
1a80c     A7 02 68 FC | 	wrlong	#1, fp
1a810     04 4E 85 F1 | 	sub	fp, #4
1a814     A7 12 02 FB | 	rdlong	arg01, fp
1a818     09 13 52 F6 | 	abs	arg01, arg01 wc
1a81c     09 00 00 FF 
1a820     88 13 16 FD | 	qdiv	arg01, ##5000
1a824                 | '   for i=1 to t/5000
1a824     0C 4E 85 F1 | 	sub	fp, #12
1a828     18 1E 62 FD | 	getqx	local01
1a82c     0F 1F 82 F6 | 	negc	local01, local01
1a830     01 1E 06 F1 | 	add	local01, #1
1a834                 | LR__2182
1a834     10 4E 05 F1 | 	add	fp, #16
1a838     A7 12 02 FB | 	rdlong	arg01, fp
1a83c     10 4E 85 F1 | 	sub	fp, #16
1a840     0F 13 52 F2 | 	cmps	arg01, local01 wc
1a844     28 00 90 3D |  if_ae	jmp	#LR__2183
1a848     0C 4E 05 F1 | 	add	fp, #12
1a84c     A7 12 02 FB | 	rdlong	arg01, fp
1a850     0C 4E 85 F1 | 	sub	fp, #12
1a854     84 65 B0 FD | 	call	#__system___waitms
1a858     10 4E 05 F1 | 	add	fp, #16
1a85c     A7 12 02 FB | 	rdlong	arg01, fp
1a860     01 12 06 F1 | 	add	arg01, #1
1a864     A7 12 62 FC | 	wrlong	arg01, fp
1a868     10 4E 85 F1 | 	sub	fp, #16
1a86c     C4 FF 9F FD | 	jmp	#LR__2182
1a870                 | LR__2183
1a870     0C 4E 05 F1 | 	add	fp, #12
1a874     A7 1E 02 FB | 	rdlong	local01, fp
1a878     0F 1F 52 F6 | 	abs	local01, local01 wc
1a87c     09 00 00 FF 
1a880     88 1F 16 FD | 	qdiv	local01, ##5000
1a884     0C 4E 85 F1 | 	sub	fp, #12
1a888     19 1E 62 FD | 	getqy	local01
1a88c     0F 13 82 F6 | 	negc	arg01, local01
1a890     48 65 B0 FD | 	call	#__system___waitms
1a894                 | LR__2184
1a894                 | LR__2185
1a894     A7 F0 03 F6 | 	mov	ptra, fp
1a898     B2 00 A0 FD | 	call	#popregs_
1a89c                 | _do_waitms_ret
1a89c     2D 00 64 FD | 	ret
1a8a0                 | 
1a8a0                 | ' 
1a8a0                 | ' sub do_waitvbl
1a8a0                 | _do_waitvbl
1a8a0     01 12 06 F6 | 	mov	arg01, #1
1a8a4     F4 48 B0 FD | 	call	#_hg010b_spin2_waitvbl
1a8a8                 | _do_waitvbl_ret
1a8a8     2D 00 64 FD | 	ret
1a8ac                 | 
1a8ac                 | ' 
1a8ac                 | ' sub do_waitclock
1a8ac                 | _do_waitclock
1a8ac     51 00 00 FF 
1a8b0     A4 E5 05 F1 | 	add	objptr, ##41892
1a8b4     F2 00 02 FB | 	rdlong	_var01, objptr
1a8b8                 | ' c=hkcnt
1a8b8                 | ' do: loop until hkcnt<>c
1a8b8                 | LR__2190
1a8b8     F2 02 02 FB | 	rdlong	_var02, objptr
1a8bc     00 03 0A F2 | 	cmp	_var02, _var01 wz
1a8c0     F4 FF 9F AD |  if_e	jmp	#LR__2190
1a8c4     51 00 00 FF 
1a8c8     A4 E5 85 F1 | 	sub	objptr, ##41892
1a8cc                 | _do_waitclock_ret
1a8cc     2D 00 64 FD | 	ret
1a8d0                 | 
1a8d0                 | ' 
1a8d0                 | ' 
1a8d0                 | ' 
1a8d0                 | ' sub do_dir
1a8d0                 | _do_dir
1a8d0     13 4A 05 F6 | 	mov	COUNT_, #19
1a8d4     A8 00 A0 FD | 	call	#pushregs_
1a8d8     01 00 00 FF 
1a8dc     38 F0 07 F1 | 	add	ptra, ##568
1a8e0     85 01 00 FF 
1a8e4     C5 13 06 F6 | 	mov	arg01, ##@LR__5509
1a8e8     88 68 B0 FD | 	call	#__system___chdir
1a8ec                 | ' 
1a8ec                 | ' chdir("/sd/bas")       ' set working directory
1a8ec                 | ' print "Working directory: "; currentdir$ 
1a8ec     00 12 06 F6 | 	mov	arg01, #0
1a8f0     34 BC B0 FD | 	call	#__system___getiolock_0540
1a8f4     FD 12 02 F6 | 	mov	arg01, result1
1a8f8     EC 61 B0 FD | 	call	#__system___lockmem
1a8fc     85 01 00 FF 
1a900     CD 15 06 F6 | 	mov	arg02, ##@LR__5510
1a904     00 12 06 F6 | 	mov	arg01, #0
1a908     00 16 06 F6 | 	mov	arg03, #0
1a90c     CC 6E B0 FD | 	call	#__system___basic_print_string
1a910     4A 00 00 FF 
1a914     90 E4 05 F1 | 	add	objptr, ##38032
1a918     F2 14 02 FB | 	rdlong	arg02, objptr
1a91c     4A 00 00 FF 
1a920     90 E4 85 F1 | 	sub	objptr, ##38032
1a924     00 12 06 F6 | 	mov	arg01, #0
1a928     00 16 06 F6 | 	mov	arg03, #0
1a92c     AC 6E B0 FD | 	call	#__system___basic_print_string
1a930     00 12 06 F6 | 	mov	arg01, #0
1a934     0A 14 06 F6 | 	mov	arg02, #10
1a938     00 16 06 F6 | 	mov	arg03, #0
1a93c     44 6E B0 FD | 	call	#__system___basic_print_char
1a940     01 1E 06 F6 | 	mov	local01, #1
1a944     00 12 06 F6 | 	mov	arg01, #0
1a948     DC BB B0 FD | 	call	#__system___getiolock_0540
1a94c     FD 00 68 FC | 	wrlong	#0, result1
1a950     00 20 06 F6 | 	mov	local02, #0
1a954     00 22 06 F6 | 	mov	local03, #0
1a958                 | ' px=0
1a958                 | ' for i=0 to 127: filelist(i)="" : next i
1a958     00 24 06 F6 | 	mov	local04, #0
1a95c     1C 4E 05 F1 | 	add	fp, #28
1a960     97 12 48 FB | 	callpa	#(@LR__2201-@LR__2200)>>2,fcache_load_ptr_
1a964                 | LR__2200
1a964     12 27 02 F6 | 	mov	local05, local04
1a968     02 26 66 F0 | 	shl	local05, #2
1a96c     A7 26 02 F1 | 	add	local05, fp
1a970     85 01 00 FF 
1a974     E1 29 06 F6 | 	mov	local06, ##@LR__5511
1a978     13 29 62 FC | 	wrlong	local06, local05
1a97c     01 24 06 F1 | 	add	local04, #1
1a980     80 24 56 F2 | 	cmps	local04, #128 wc
1a984     DC FF 9F CD |  if_b	jmp	#LR__2200
1a988                 | LR__2201
1a988     1C 4E 85 F1 | 	sub	fp, #28
1a98c     85 01 00 FF 
1a990     E2 13 06 F6 | 	mov	arg01, ##@LR__5512
1a994     10 14 06 F6 | 	mov	arg02, #16
1a998     C4 BC B0 FD | 	call	#__system___basic_dir
1a99c     FD 2A 02 F6 | 	mov	local07, result1
1a9a0     00 2C 06 F6 | 	mov	local08, #0
1a9a4                 | ' filename=dir$("*", fbDirectory)
1a9a4                 | ' n=0
1a9a4                 | ' while filename <> "" andalso filename <> nil andalso n<128
1a9a4                 | LR__2202
1a9a4     85 01 00 FF 
1a9a8     E4 2F 06 F6 | 	mov	local09, ##@LR__5513
1a9ac     15 13 02 F6 | 	mov	arg01, local07
1a9b0     17 15 02 F6 | 	mov	arg02, local09
1a9b4     58 61 B0 FD | 	call	#__system___string_cmp
1a9b8     00 FA 0D F2 | 	cmp	result1, #0 wz
1a9bc     68 00 90 AD |  if_e	jmp	#LR__2203
1a9c0     00 2E 06 F6 | 	mov	local09, #0
1a9c4     15 13 02 F6 | 	mov	arg01, local07
1a9c8     00 14 06 F6 | 	mov	arg02, #0
1a9cc     40 61 B0 FD | 	call	#__system___string_cmp
1a9d0     00 FA 0D F2 | 	cmp	result1, #0 wz
1a9d4     50 00 90 AD |  if_e	jmp	#LR__2203
1a9d8     80 2C 56 F2 | 	cmps	local08, #128 wc
1a9dc     48 00 90 3D |  if_ae	jmp	#LR__2203
1a9e0     85 01 00 FF 
1a9e4     E5 13 06 F6 | 	mov	arg01, ##@LR__5514
1a9e8     15 15 02 F6 | 	mov	arg02, local07
1a9ec     54 61 B0 FD | 	call	#__system___string_concat
1a9f0     FD 2A 02 F6 | 	mov	local07, result1
1a9f4     16 27 02 F6 | 	mov	local05, local08
1a9f8     02 26 66 F0 | 	shl	local05, #2
1a9fc     1C 4E 05 F1 | 	add	fp, #28
1aa00     A7 26 02 F1 | 	add	local05, fp
1aa04     13 2B 62 FC | 	wrlong	local07, local05
1aa08     01 2C 06 F1 | 	add	local08, #1
1aa0c     00 26 06 F6 | 	mov	local05, #0
1aa10     00 12 06 F6 | 	mov	arg01, #0
1aa14     00 14 06 F6 | 	mov	arg02, #0
1aa18     1C 4E 85 F1 | 	sub	fp, #28
1aa1c     40 BC B0 FD | 	call	#__system___basic_dir
1aa20     FD 2A 02 F6 | 	mov	local07, result1
1aa24     7C FF 9F FD | 	jmp	#LR__2202
1aa28                 | LR__2203
1aa28                 | ' ' now sort this
1aa28                 | ' 
1aa28                 | ' for i =0 to n-1
1aa28     00 24 06 F6 | 	mov	local04, #0
1aa2c     16 31 02 F6 | 	mov	local10, local08
1aa30                 | LR__2204
1aa30     18 25 52 F2 | 	cmps	local04, local10 wc
1aa34     DC 00 90 3D |  if_ae	jmp	#LR__2208
1aa38     00 32 06 F6 | 	mov	local11, #0
1aa3c                 | '   swapped=false
1aa3c                 | '   for j=0 to n-i-2
1aa3c     00 34 06 F6 | 	mov	local12, #0
1aa40     16 37 02 F6 | 	mov	local13, local08
1aa44     12 37 82 F1 | 	sub	local13, local04
1aa48     01 36 86 F1 | 	sub	local13, #1
1aa4c                 | LR__2205
1aa4c     1B 35 52 F2 | 	cmps	local12, local13 wc
1aa50     B0 00 90 3D |  if_ae	jmp	#LR__2207
1aa54                 | '     if filelist(j) > filelist(j+1) then
1aa54     1A 2F 02 F6 | 	mov	local09, local12
1aa58     02 2E 66 F0 | 	shl	local09, #2
1aa5c     1C 4E 05 F1 | 	add	fp, #28
1aa60     A7 2E 02 F1 | 	add	local09, fp
1aa64     17 13 02 FB | 	rdlong	arg01, local09
1aa68     1A 2F 02 F6 | 	mov	local09, local12
1aa6c     01 2E 06 F1 | 	add	local09, #1
1aa70     17 29 02 F6 | 	mov	local06, local09
1aa74     02 28 66 F0 | 	shl	local06, #2
1aa78     A7 1E 02 F6 | 	mov	local01, fp
1aa7c     A7 28 02 F1 | 	add	local06, fp
1aa80     14 27 02 FB | 	rdlong	local05, local06
1aa84     13 15 02 F6 | 	mov	arg02, local05
1aa88     1C 4E 85 F1 | 	sub	fp, #28
1aa8c     80 60 B0 FD | 	call	#__system___string_cmp
1aa90     01 FA 55 F2 | 	cmps	result1, #1 wc
1aa94     64 00 90 CD |  if_b	jmp	#LR__2206
1aa98     1A 2F 02 F6 | 	mov	local09, local12
1aa9c     01 2E 06 F1 | 	add	local09, #1
1aaa0     02 2E 66 F0 | 	shl	local09, #2
1aaa4     1C 4E 05 F1 | 	add	fp, #28
1aaa8     A7 2E 02 F1 | 	add	local09, fp
1aaac     17 33 02 FB | 	rdlong	local11, local09
1aab0     1A 29 02 F6 | 	mov	local06, local12
1aab4     02 28 66 F0 | 	shl	local06, #2
1aab8     A7 28 02 F1 | 	add	local06, fp
1aabc     14 27 02 FB | 	rdlong	local05, local06
1aac0     1A 2F 02 F6 | 	mov	local09, local12
1aac4     17 29 02 F6 | 	mov	local06, local09
1aac8     02 28 66 F0 | 	shl	local06, #2
1aacc     A7 1E 02 F6 | 	mov	local01, fp
1aad0     A7 28 02 F1 | 	add	local06, fp
1aad4     14 33 62 FC | 	wrlong	local11, local06
1aad8     1A 21 02 F6 | 	mov	local02, local12
1aadc     01 20 06 F1 | 	add	local02, #1
1aae0     10 39 02 F6 | 	mov	local14, local02
1aae4     02 38 66 F0 | 	shl	local14, #2
1aae8     A7 3A 02 F6 | 	mov	local15, fp
1aaec     A7 38 02 F1 | 	add	local14, fp
1aaf0     1C 27 62 FC | 	wrlong	local05, local14
1aaf4     01 32 66 F6 | 	neg	local11, #1
1aaf8     1C 4E 85 F1 | 	sub	fp, #28
1aafc                 | LR__2206
1aafc     01 34 06 F1 | 	add	local12, #1
1ab00     48 FF 9F FD | 	jmp	#LR__2205
1ab04                 | LR__2207
1ab04                 | ' if not swapped then exit for
1ab04     19 3D 22 F6 | 	not	local16, local11
1ab08     00 3C 0E F2 | 	cmp	local16, #0 wz
1ab0c     01 24 06 A1 |  if_e	add	local04, #1
1ab10     1C FF 9F AD |  if_e	jmp	#LR__2204
1ab14                 | LR__2208
1ab14                 | ' for i=0 to n-1
1ab14     00 24 06 F6 | 	mov	local04, #0
1ab18     16 3F 02 F6 | 	mov	local17, local08
1ab1c                 | LR__2209
1ab1c     1F 25 52 F2 | 	cmps	local04, local17 wc
1ab20     94 00 90 3D |  if_ae	jmp	#LR__2211
1ab24                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
1ab24     00 12 06 F6 | 	mov	arg01, #0
1ab28     FC B9 B0 FD | 	call	#__system___getiolock_0540
1ab2c     FD 12 02 F6 | 	mov	arg01, result1
1ab30     B4 5F B0 FD | 	call	#__system___lockmem
1ab34     12 21 02 F6 | 	mov	local02, local04
1ab38     02 20 66 F0 | 	shl	local02, #2
1ab3c     1C 4E 05 F1 | 	add	fp, #28
1ab40     A7 38 02 F6 | 	mov	local14, fp
1ab44     A7 20 02 F1 | 	add	local02, fp
1ab48     10 15 02 FB | 	rdlong	arg02, local02
1ab4c     00 1E 06 F6 | 	mov	local01, #0
1ab50     00 12 06 F6 | 	mov	arg01, #0
1ab54     00 16 06 F6 | 	mov	arg03, #0
1ab58     1C 4E 85 F1 | 	sub	fp, #28
1ab5c     7C 6C B0 FD | 	call	#__system___basic_print_string
1ab60     00 12 06 F6 | 	mov	arg01, #0
1ab64     C0 B9 B0 FD | 	call	#__system___getiolock_0540
1ab68     FD 00 68 FC | 	wrlong	#0, result1
1ab6c     40 22 06 F1 | 	add	local03, #64
1ab70     11 13 02 F6 | 	mov	arg01, local03
1ab74     C0 45 B0 FD | 	call	#_hg010b_spin2_setcursorx
1ab78     00 23 56 F2 | 	cmps	local03, #256 wc
1ab7c     30 00 90 CD |  if_b	jmp	#LR__2210
1ab80     00 22 06 F6 | 	mov	local03, #0
1ab84     00 12 06 F6 | 	mov	arg01, #0
1ab88     9C B9 B0 FD | 	call	#__system___getiolock_0540
1ab8c     FD 12 02 F6 | 	mov	arg01, result1
1ab90     54 5F B0 FD | 	call	#__system___lockmem
1ab94     00 12 06 F6 | 	mov	arg01, #0
1ab98     0A 14 06 F6 | 	mov	arg02, #10
1ab9c     00 16 06 F6 | 	mov	arg03, #0
1aba0     E0 6B B0 FD | 	call	#__system___basic_print_char
1aba4     00 12 06 F6 | 	mov	arg01, #0
1aba8     7C B9 B0 FD | 	call	#__system___getiolock_0540
1abac     FD 00 68 FC | 	wrlong	#0, result1
1abb0                 | LR__2210
1abb0     01 24 06 F1 | 	add	local04, #1
1abb4     64 FF 9F FD | 	jmp	#LR__2209
1abb8                 | LR__2211
1abb8                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
1abb8     80 2C 56 F2 | 	cmps	local08, #128 wc
1abbc     44 00 90 CD |  if_b	jmp	#LR__2212
1abc0     00 12 06 F6 | 	mov	arg01, #0
1abc4     60 B9 B0 FD | 	call	#__system___getiolock_0540
1abc8     FD 12 02 F6 | 	mov	arg01, result1
1abcc     18 5F B0 FD | 	call	#__system___lockmem
1abd0     85 01 00 FF 
1abd4     EC 15 06 F6 | 	mov	arg02, ##@LR__5515
1abd8     00 12 06 F6 | 	mov	arg01, #0
1abdc     00 16 06 F6 | 	mov	arg03, #0
1abe0     F8 6B B0 FD | 	call	#__system___basic_print_string
1abe4     00 12 06 F6 | 	mov	arg01, #0
1abe8     0A 14 06 F6 | 	mov	arg02, #10
1abec     00 16 06 F6 | 	mov	arg03, #0
1abf0     90 6B B0 FD | 	call	#__system___basic_print_char
1abf4     00 12 06 F6 | 	mov	arg01, #0
1abf8     2C B9 B0 FD | 	call	#__system___getiolock_0540
1abfc     FD 00 68 FC | 	wrlong	#0, result1
1ac00     00 1E 06 F6 | 	mov	local01, #0
1ac04                 | LR__2212
1ac04                 | ' print
1ac04     00 12 06 F6 | 	mov	arg01, #0
1ac08     1C B9 B0 FD | 	call	#__system___getiolock_0540
1ac0c     FD 12 02 F6 | 	mov	arg01, result1
1ac10     D4 5E B0 FD | 	call	#__system___lockmem
1ac14     00 12 06 F6 | 	mov	arg01, #0
1ac18     0A 14 06 F6 | 	mov	arg02, #10
1ac1c     00 16 06 F6 | 	mov	arg03, #0
1ac20     60 6B B0 FD | 	call	#__system___basic_print_char
1ac24     00 12 06 F6 | 	mov	arg01, #0
1ac28     FC B8 B0 FD | 	call	#__system___getiolock_0540
1ac2c     FD 00 68 FC | 	wrlong	#0, result1
1ac30     00 28 06 F6 | 	mov	local06, #0
1ac34     00 2C 06 F6 | 	mov	local08, #0
1ac38     00 22 06 F6 | 	mov	local03, #0
1ac3c                 | ' return cursor_y
1ac3c     3E E4 05 F1 | 	add	objptr, #62
1ac40     F2 40 C2 FA | 	rdbyte	local18, objptr
1ac44     3E E4 85 F1 | 	sub	objptr, #62
1ac48     86 01 00 FF 
1ac4c     1E 12 06 F6 | 	mov	arg01, ##@LR__5516
1ac50     21 14 06 F6 | 	mov	arg02, #33
1ac54     08 BA B0 FD | 	call	#__system___basic_dir
1ac58     FD 2A 02 F6 | 	mov	local07, result1
1ac5c                 | ' n=0
1ac5c                 | ' 
1ac5c                 | ' px=0: py=v.getcursory()
1ac5c                 | ' 
1ac5c                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
1ac5c                 | ' do while filename <> "" andalso filename <> nil andalso n<128
1ac5c                 | LR__2213
1ac5c     86 01 00 FF 
1ac60     20 2E 06 F6 | 	mov	local09, ##@LR__5517
1ac64     15 13 02 F6 | 	mov	arg01, local07
1ac68     17 15 02 F6 | 	mov	arg02, local09
1ac6c     A0 5E B0 FD | 	call	#__system___string_cmp
1ac70     00 FA 0D F2 | 	cmp	result1, #0 wz
1ac74     54 00 90 AD |  if_e	jmp	#LR__2214
1ac78     00 2E 06 F6 | 	mov	local09, #0
1ac7c     15 13 02 F6 | 	mov	arg01, local07
1ac80     00 14 06 F6 | 	mov	arg02, #0
1ac84     88 5E B0 FD | 	call	#__system___string_cmp
1ac88     00 FA 0D F2 | 	cmp	result1, #0 wz
1ac8c     3C 00 90 AD |  if_e	jmp	#LR__2214
1ac90     80 2C 56 F2 | 	cmps	local08, #128 wc
1ac94     34 00 90 3D |  if_ae	jmp	#LR__2214
1ac98     16 27 02 F6 | 	mov	local05, local08
1ac9c     02 26 66 F0 | 	shl	local05, #2
1aca0     1C 4E 05 F1 | 	add	fp, #28
1aca4     A7 26 02 F1 | 	add	local05, fp
1aca8     13 2B 62 FC | 	wrlong	local07, local05
1acac     01 2C 06 F1 | 	add	local08, #1
1acb0     00 26 06 F6 | 	mov	local05, #0
1acb4     00 12 06 F6 | 	mov	arg01, #0
1acb8     00 14 06 F6 | 	mov	arg02, #0
1acbc     1C 4E 85 F1 | 	sub	fp, #28
1acc0     9C B9 B0 FD | 	call	#__system___basic_dir
1acc4     FD 2A 02 F6 | 	mov	local07, result1
1acc8     90 FF 9F FD | 	jmp	#LR__2213
1accc                 | LR__2214
1accc                 | ' 
1accc                 | ' for i =0 to n-1
1accc     00 24 06 F6 | 	mov	local04, #0
1acd0                 | LR__2215
1acd0     16 25 52 F2 | 	cmps	local04, local08 wc
1acd4     D8 00 90 3D |  if_ae	jmp	#LR__2219
1acd8     00 32 06 F6 | 	mov	local11, #0
1acdc                 | '   swapped=false
1acdc                 | '   for j=0 to n-i-2
1acdc     00 34 06 F6 | 	mov	local12, #0
1ace0     16 43 02 F6 | 	mov	local19, local08
1ace4     12 43 82 F1 | 	sub	local19, local04
1ace8     01 42 86 F1 | 	sub	local19, #1
1acec                 | LR__2216
1acec     21 35 52 F2 | 	cmps	local12, local19 wc
1acf0     AC 00 90 3D |  if_ae	jmp	#LR__2218
1acf4                 | '     if filelist(j) > filelist(j+1) then
1acf4     1A 2F 02 F6 | 	mov	local09, local12
1acf8     02 2E 66 F0 | 	shl	local09, #2
1acfc     1C 4E 05 F1 | 	add	fp, #28
1ad00     A7 2E 02 F1 | 	add	local09, fp
1ad04     17 13 02 FB | 	rdlong	arg01, local09
1ad08     1A 2F 02 F6 | 	mov	local09, local12
1ad0c     01 2E 06 F1 | 	add	local09, #1
1ad10     17 29 02 F6 | 	mov	local06, local09
1ad14     02 28 66 F0 | 	shl	local06, #2
1ad18     A7 1E 02 F6 | 	mov	local01, fp
1ad1c     A7 28 02 F1 | 	add	local06, fp
1ad20     14 27 02 FB | 	rdlong	local05, local06
1ad24     13 15 02 F6 | 	mov	arg02, local05
1ad28     1C 4E 85 F1 | 	sub	fp, #28
1ad2c     E0 5D B0 FD | 	call	#__system___string_cmp
1ad30     01 FA 55 F2 | 	cmps	result1, #1 wc
1ad34     60 00 90 CD |  if_b	jmp	#LR__2217
1ad38     1A 2F 02 F6 | 	mov	local09, local12
1ad3c     01 2E 06 F1 | 	add	local09, #1
1ad40     02 2E 66 F0 | 	shl	local09, #2
1ad44     1C 4E 05 F1 | 	add	fp, #28
1ad48     A7 2E 02 F1 | 	add	local09, fp
1ad4c     17 3D 02 FB | 	rdlong	local16, local09
1ad50     1A 29 02 F6 | 	mov	local06, local12
1ad54     02 28 66 F0 | 	shl	local06, #2
1ad58     A7 28 02 F1 | 	add	local06, fp
1ad5c     14 27 02 FB | 	rdlong	local05, local06
1ad60     1A 2F 02 F6 | 	mov	local09, local12
1ad64     17 29 02 F6 | 	mov	local06, local09
1ad68     02 28 66 F0 | 	shl	local06, #2
1ad6c     A7 1E 02 F6 | 	mov	local01, fp
1ad70     A7 28 02 F1 | 	add	local06, fp
1ad74     14 3D 62 FC | 	wrlong	local16, local06
1ad78     1A 39 02 F6 | 	mov	local14, local12
1ad7c     01 38 06 F1 | 	add	local14, #1
1ad80     02 38 66 F0 | 	shl	local14, #2
1ad84     A7 3A 02 F6 | 	mov	local15, fp
1ad88     A7 38 02 F1 | 	add	local14, fp
1ad8c     1C 27 62 FC | 	wrlong	local05, local14
1ad90     01 32 66 F6 | 	neg	local11, #1
1ad94     1C 4E 85 F1 | 	sub	fp, #28
1ad98                 | LR__2217
1ad98     01 34 06 F1 | 	add	local12, #1
1ad9c     4C FF 9F FD | 	jmp	#LR__2216
1ada0                 | LR__2218
1ada0                 | ' if not swapped then exit for
1ada0     19 3D 22 F6 | 	not	local16, local11
1ada4     00 3C 0E F2 | 	cmp	local16, #0 wz
1ada8     01 24 06 A1 |  if_e	add	local04, #1
1adac     20 FF 9F AD |  if_e	jmp	#LR__2215
1adb0                 | LR__2219
1adb0                 | ' for i=0 to n-1
1adb0     00 24 06 F6 | 	mov	local04, #0
1adb4                 | LR__2220
1adb4     16 25 52 F2 | 	cmps	local04, local08 wc
1adb8     8C 00 90 3D |  if_ae	jmp	#LR__2222
1adbc                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
1adbc     00 12 06 F6 | 	mov	arg01, #0
1adc0     64 B7 B0 FD | 	call	#__system___getiolock_0540
1adc4     FD 12 02 F6 | 	mov	arg01, result1
1adc8     1C 5D B0 FD | 	call	#__system___lockmem
1adcc     12 21 02 F6 | 	mov	local02, local04
1add0     02 20 66 F0 | 	shl	local02, #2
1add4     1C 4E 05 F1 | 	add	fp, #28
1add8     A7 20 02 F1 | 	add	local02, fp
1addc     10 15 02 FB | 	rdlong	arg02, local02
1ade0     00 12 06 F6 | 	mov	arg01, #0
1ade4     00 16 06 F6 | 	mov	arg03, #0
1ade8     1C 4E 85 F1 | 	sub	fp, #28
1adec     EC 69 B0 FD | 	call	#__system___basic_print_string
1adf0     00 12 06 F6 | 	mov	arg01, #0
1adf4     30 B7 B0 FD | 	call	#__system___getiolock_0540
1adf8     FD 00 68 FC | 	wrlong	#0, result1
1adfc     40 22 06 F1 | 	add	local03, #64
1ae00     11 13 02 F6 | 	mov	arg01, local03
1ae04     30 43 B0 FD | 	call	#_hg010b_spin2_setcursorx
1ae08     00 23 56 F2 | 	cmps	local03, #256 wc
1ae0c     30 00 90 CD |  if_b	jmp	#LR__2221
1ae10     00 22 06 F6 | 	mov	local03, #0
1ae14     00 12 06 F6 | 	mov	arg01, #0
1ae18     0C B7 B0 FD | 	call	#__system___getiolock_0540
1ae1c     FD 12 02 F6 | 	mov	arg01, result1
1ae20     C4 5C B0 FD | 	call	#__system___lockmem
1ae24     00 12 06 F6 | 	mov	arg01, #0
1ae28     0A 14 06 F6 | 	mov	arg02, #10
1ae2c     00 16 06 F6 | 	mov	arg03, #0
1ae30     50 69 B0 FD | 	call	#__system___basic_print_char
1ae34     00 12 06 F6 | 	mov	arg01, #0
1ae38     EC B6 B0 FD | 	call	#__system___getiolock_0540
1ae3c     FD 00 68 FC | 	wrlong	#0, result1
1ae40                 | LR__2221
1ae40     01 24 06 F1 | 	add	local04, #1
1ae44     6C FF 9F FD | 	jmp	#LR__2220
1ae48                 | LR__2222
1ae48                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
1ae48     80 2C 56 F2 | 	cmps	local08, #128 wc
1ae4c     40 00 90 CD |  if_b	jmp	#LR__2223
1ae50     00 12 06 F6 | 	mov	arg01, #0
1ae54     D0 B6 B0 FD | 	call	#__system___getiolock_0540
1ae58     FD 12 02 F6 | 	mov	arg01, result1
1ae5c     88 5C B0 FD | 	call	#__system___lockmem
1ae60     86 01 00 FF 
1ae64     21 14 06 F6 | 	mov	arg02, ##@LR__5518
1ae68     00 12 06 F6 | 	mov	arg01, #0
1ae6c     00 16 06 F6 | 	mov	arg03, #0
1ae70     68 69 B0 FD | 	call	#__system___basic_print_string
1ae74     00 12 06 F6 | 	mov	arg01, #0
1ae78     0A 14 06 F6 | 	mov	arg02, #10
1ae7c     00 16 06 F6 | 	mov	arg03, #0
1ae80     00 69 B0 FD | 	call	#__system___basic_print_char
1ae84     00 12 06 F6 | 	mov	arg01, #0
1ae88     9C B6 B0 FD | 	call	#__system___getiolock_0540
1ae8c     FD 00 68 FC | 	wrlong	#0, result1
1ae90                 | LR__2223
1ae90                 | ' print
1ae90     00 12 06 F6 | 	mov	arg01, #0
1ae94     90 B6 B0 FD | 	call	#__system___getiolock_0540
1ae98     FD 12 02 F6 | 	mov	arg01, result1
1ae9c     48 5C B0 FD | 	call	#__system___lockmem
1aea0     00 12 06 F6 | 	mov	arg01, #0
1aea4     0A 14 06 F6 | 	mov	arg02, #10
1aea8     00 16 06 F6 | 	mov	arg03, #0
1aeac     D4 68 B0 FD | 	call	#__system___basic_print_char
1aeb0     00 12 06 F6 | 	mov	arg01, #0
1aeb4     70 B6 B0 FD | 	call	#__system___getiolock_0540
1aeb8     FD 00 68 FC | 	wrlong	#0, result1
1aebc     A7 F0 03 F6 | 	mov	ptra, fp
1aec0     B2 00 A0 FD | 	call	#popregs_
1aec4                 | _do_dir_ret
1aec4     2D 00 64 FD | 	ret
1aec8                 | 
1aec8                 | ' 
1aec8                 | ' sub do_if
1aec8                 | _do_if
1aec8     05 4A 05 F6 | 	mov	COUNT_, #5
1aecc     A8 00 A0 FD | 	call	#pushregs_
1aed0     84 0B BF FD | 	call	#_pop
1aed4     FD 1E 0A F6 | 	mov	local01, result1 wz
1aed8     FE 20 02 F6 | 	mov	local02, result2
1aedc     FF 22 02 F6 | 	mov	local03, result3
1aee0                 | ' t1=pop()
1aee0                 | ' ' if uresult=0, jump over else
1aee0                 | ' if t1.result.uresult = 0 then 
1aee0     BC 00 90 5D |  if_ne	jmp	#LR__2232
1aee4                 | '   for i=lineptr_e to lineptr-1
1aee4     4A 00 00 FF 
1aee8     80 E4 05 F1 | 	add	objptr, ##38016
1aeec     F2 24 02 FB | 	rdlong	local04, objptr
1aef0     04 E4 85 F1 | 	sub	objptr, #4
1aef4     F2 26 02 FB | 	rdlong	local05, objptr
1aef8     4A 00 00 FF 
1aefc     7C E4 85 F1 | 	sub	objptr, ##38012
1af00                 | LR__2230
1af00     13 25 52 F2 | 	cmps	local04, local05 wc
1af04     78 00 90 3D |  if_ae	jmp	#LR__2231
1af08     12 FF 01 F6 | 	mov	result3, local04
1af0c     01 FE 65 F0 | 	shl	result3, #1
1af10     12 FF 01 F1 | 	add	result3, local04
1af14     02 FE 65 F0 | 	shl	result3, #2
1af18     47 00 00 FF 
1af1c     7C E4 05 F1 | 	add	objptr, ##36476
1af20     F2 FE 01 F1 | 	add	result3, objptr
1af24     FF 1E 02 FB | 	rdlong	local01, result3
1af28     04 FE 05 F1 | 	add	result3, #4
1af2c     FF FC 01 FB | 	rdlong	result2, result3
1af30     12 FF 01 F6 | 	mov	result3, local04
1af34     01 FE 65 F0 | 	shl	result3, #1
1af38     12 FF 01 F1 | 	add	result3, local04
1af3c     02 FE 65 F0 | 	shl	result3, #2
1af40     F2 FE 01 F1 | 	add	result3, objptr
1af44     08 FE 05 F1 | 	add	result3, #8
1af48     FF FE 01 FB | 	rdlong	result3, result3
1af4c     FE 20 02 F6 | 	mov	local02, result2
1af50     FF 22 02 F6 | 	mov	local03, result3
1af54                 | '     t1=compiledline(i)
1af54                 | '     if t1.result_type=token_else then lineptr_e=i : return
1af54     5A 22 0E F2 | 	cmp	local03, #90 wz
1af58     47 00 00 FF 
1af5c     7C E4 85 F1 | 	sub	objptr, ##36476
1af60     4A 00 00 AF 
1af64     80 E4 05 A1 |  if_e	add	objptr, ##38016
1af68     F2 24 62 AC |  if_e	wrlong	local04, objptr
1af6c     4A 00 00 AF 
1af70     80 E4 85 A1 |  if_e	sub	objptr, ##38016
1af74     28 00 90 AD |  if_e	jmp	#LR__2233
1af78     01 24 06 F1 | 	add	local04, #1
1af7c     80 FF 9F FD | 	jmp	#LR__2230
1af80                 | LR__2231
1af80     4A 00 00 FF 
1af84     7C E4 05 F1 | 	add	objptr, ##38012
1af88     F2 26 02 FB | 	rdlong	local05, objptr
1af8c     01 26 86 F1 | 	sub	local05, #1
1af90     04 E4 05 F1 | 	add	objptr, #4
1af94     F2 26 62 FC | 	wrlong	local05, objptr
1af98     4A 00 00 FF 
1af9c     80 E4 85 F1 | 	sub	objptr, ##38016
1afa0                 | LR__2232
1afa0                 | LR__2233
1afa0     A7 F0 03 F6 | 	mov	ptra, fp
1afa4     B2 00 A0 FD | 	call	#popregs_
1afa8                 | _do_if_ret
1afa8     2D 00 64 FD | 	ret
1afac                 | 
1afac                 | ' 
1afac                 | ' sub do_else
1afac                 | _do_else
1afac     4A 00 00 FF 
1afb0     7C E4 05 F1 | 	add	objptr, ##38012
1afb4     F2 00 02 FB | 	rdlong	_var01, objptr
1afb8     01 00 86 F1 | 	sub	_var01, #1
1afbc     04 E4 05 F1 | 	add	objptr, #4
1afc0     F2 00 62 FC | 	wrlong	_var01, objptr
1afc4     4A 00 00 FF 
1afc8     80 E4 85 F1 | 	sub	objptr, ##38016
1afcc                 | _do_else_ret
1afcc     2D 00 64 FD | 	ret
1afd0                 | 
1afd0                 | ' 
1afd0                 | ' sub do_rad
1afd0                 | _do_rad
1afd0     51 00 00 FF 
1afd4     B8 E5 05 F1 | 	add	objptr, ##41912
1afd8     00 C0 9F FF 
1afdc     F2 00 68 FC | 	wrlong	##1065353216, objptr
1afe0     04 E4 05 F1 | 	add	objptr, #4
1afe4     00 C0 9F FF 
1afe8     F2 00 68 FC | 	wrlong	##1065353216, objptr
1afec     51 00 00 FF 
1aff0     BC E5 85 F1 | 	sub	objptr, ##41916
1aff4                 | _do_rad_ret
1aff4     2D 00 64 FD | 	ret
1aff8                 | 
1aff8                 | ' 
1aff8                 | ' sub do_deg
1aff8                 | _do_deg
1aff8     51 00 00 FF 
1affc     B8 E5 05 F1 | 	add	objptr, ##41912
1b000     7D 47 9E FF 
1b004     F2 6A 68 FC | 	wrlong	##1016003125, objptr
1b008     04 E4 05 F1 | 	add	objptr, #4
1b00c     97 32 A1 FF 
1b010     F2 C2 69 FC | 	wrlong	##1113927393, objptr
1b014     51 00 00 FF 
1b018     BC E5 85 F1 | 	sub	objptr, ##41916
1b01c                 | _do_deg_ret
1b01c     2D 00 64 FD | 	ret
1b020                 | 
1b020                 | ' 
1b020                 | ' sub do_round
1b020                 | _do_round
1b020     00 4A 05 F6 | 	mov	COUNT_, #0
1b024     A8 00 A0 FD | 	call	#pushregs_
1b028     0C F0 07 F1 | 	add	ptra, #12
1b02c     28 0A BF FD | 	call	#_pop
1b030     A7 FA 61 FC | 	wrlong	result1, fp
1b034     04 4E 05 F1 | 	add	fp, #4
1b038     A7 FC 61 FC | 	wrlong	result2, fp
1b03c     04 4E 05 F1 | 	add	fp, #4
1b040     A7 FE 61 FC | 	wrlong	result3, fp
1b044     08 4E 85 F1 | 	sub	fp, #8
1b048     A7 12 02 F6 | 	mov	arg01, fp
1b04c     A4 AB BF FD | 	call	#_converttoint
1b050     A7 FA 61 FC | 	wrlong	result1, fp
1b054     08 4E 05 F1 | 	add	fp, #8
1b058     A7 38 68 FC | 	wrlong	#28, fp
1b05c     08 4E 85 F1 | 	sub	fp, #8
1b060     A7 12 02 F6 | 	mov	arg01, fp
1b064     88 0A BF FD | 	call	#_push
1b068     A7 F0 03 F6 | 	mov	ptra, fp
1b06c     B2 00 A0 FD | 	call	#popregs_
1b070                 | _do_round_ret
1b070     2D 00 64 FD | 	ret
1b074                 | 
1b074                 | ' 
1b074                 | ' sub do_int
1b074                 | _do_int
1b074     02 4A 05 F6 | 	mov	COUNT_, #2
1b078     A8 00 A0 FD | 	call	#pushregs_
1b07c     10 F0 07 F1 | 	add	ptra, #16
1b080     D4 09 BF FD | 	call	#_pop
1b084     FE 1E 02 F6 | 	mov	local01, result2
1b088     FF 20 02 F6 | 	mov	local02, result3
1b08c     A7 FA 61 FC | 	wrlong	result1, fp
1b090     04 4E 05 F1 | 	add	fp, #4
1b094     A7 1E 62 FC | 	wrlong	local01, fp
1b098     04 4E 05 F1 | 	add	fp, #4
1b09c     A7 20 62 FC | 	wrlong	local02, fp
1b0a0                 | ' 
1b0a0                 | ' t1=pop()
1b0a0                 | ' select case t1.result_type
1b0a0     08 4E 85 F1 | 	sub	fp, #8
1b0a4     1E 20 0E F2 | 	cmp	local02, #30 wz
1b0a8     14 00 90 AD |  if_e	jmp	#LR__2240
1b0ac     1F 20 0E F2 | 	cmp	local02, #31 wz
1b0b0     20 00 90 AD |  if_e	jmp	#LR__2241
1b0b4     2B 20 0E F2 | 	cmp	local02, #43 wz
1b0b8     34 00 90 AD |  if_e	jmp	#LR__2242
1b0bc     50 00 90 FD | 	jmp	#LR__2243
1b0c0                 | LR__2240
1b0c0     A7 12 02 FB | 	rdlong	arg01, fp
1b0c4     00 14 06 F6 | 	mov	arg02, #0
1b0c8     98 8A B0 FD | 	call	#__system___float_tointeger
1b0cc     A7 FA 61 FC | 	wrlong	result1, fp
1b0d0     3C 00 90 FD | 	jmp	#LR__2243
1b0d4                 | LR__2241
1b0d4     A7 12 02 FB | 	rdlong	arg01, fp
1b0d8     A8 8D B0 FD | 	call	#__system____builtin_atof
1b0dc     FD 12 02 F6 | 	mov	arg01, result1
1b0e0     00 14 06 F6 | 	mov	arg02, #0
1b0e4     7C 8A B0 FD | 	call	#__system___float_tointeger
1b0e8     A7 FA 61 FC | 	wrlong	result1, fp
1b0ec     20 00 90 FD | 	jmp	#LR__2243
1b0f0                 | LR__2242
1b0f0     A7 12 02 FB | 	rdlong	arg01, fp
1b0f4     D8 62 BF FD | 	call	#_convertstring
1b0f8     FD 12 02 F6 | 	mov	arg01, result1
1b0fc     84 8D B0 FD | 	call	#__system____builtin_atof
1b100     FD 12 02 F6 | 	mov	arg01, result1
1b104     00 14 06 F6 | 	mov	arg02, #0
1b108     58 8A B0 FD | 	call	#__system___float_tointeger
1b10c     A7 FA 61 FC | 	wrlong	result1, fp
1b110                 | LR__2243
1b110     08 4E 05 F1 | 	add	fp, #8
1b114     A7 38 68 FC | 	wrlong	#28, fp
1b118     08 4E 85 F1 | 	sub	fp, #8
1b11c     A7 12 02 F6 | 	mov	arg01, fp
1b120     CC 09 BF FD | 	call	#_push
1b124     A7 F0 03 F6 | 	mov	ptra, fp
1b128     B2 00 A0 FD | 	call	#popregs_
1b12c                 | _do_int_ret
1b12c     2D 00 64 FD | 	ret
1b130                 | 
1b130                 | ' 
1b130                 | ' 
1b130                 | ' sub do_nothing
1b130                 | _do_nothing
1b130                 | _do_nothing_ret
1b130     2D 00 64 FD | 	ret
1b134                 | 
1b134                 | ' 
1b134                 | ' sub do_brun
1b134                 | _do_brun
1b134     08 4A 05 F6 | 	mov	COUNT_, #8
1b138     A8 00 A0 FD | 	call	#pushregs_
1b13c     18 09 BF FD | 	call	#_pop
1b140     FE 1A 02 F6 | 	mov	arg05, result2
1b144     FF 18 02 F6 | 	mov	arg04, result3
1b148     FD 1E 02 F6 | 	mov	local01, result1
1b14c     0D 21 02 F6 | 	mov	local02, arg05
1b150     0C 23 02 F6 | 	mov	local03, arg04
1b154                 | ' 
1b154                 | ' t1=pop() 
1b154                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1b154     2B 22 0E F2 | 	cmp	local03, #43 wz
1b158     10 00 90 5D |  if_ne	jmp	#LR__2250
1b15c     0F 13 02 F6 | 	mov	arg01, local01
1b160     6C 62 BF FD | 	call	#_convertstring
1b164     FD 1E 02 F6 | 	mov	local01, result1
1b168     1F 22 06 F6 | 	mov	local03, #31
1b16c                 | LR__2250
1b16c                 | ' if t1.result_type=result_string then
1b16c     1F 22 0E F2 | 	cmp	local03, #31 wz
1b170     EC 01 90 5D |  if_ne	jmp	#LR__2254
1b174     0F 25 02 F6 | 	mov	local04, local01
1b178                 | '   filename=t1.result.sresult
1b178                 | '   if left$(filename,1)="/" then 
1b178     12 13 02 F6 | 	mov	arg01, local04
1b17c     01 14 06 F6 | 	mov	arg02, #1
1b180     E0 79 B0 FD | 	call	#__system__Left_S
1b184     FD 12 02 F6 | 	mov	arg01, result1
1b188     86 01 00 FF 
1b18c     53 14 06 F6 | 	mov	arg02, ##@LR__5519
1b190     7C 59 B0 FD | 	call	#__system___string_cmp
1b194     00 FA 0D F2 | 	cmp	result1, #0 wz
1b198     12 27 02 A6 |  if_e	mov	local05, local04
1b19c     14 00 90 AD |  if_e	jmp	#LR__2251
1b1a0     86 01 00 FF 
1b1a4     55 12 06 F6 | 	mov	arg01, ##@LR__5520
1b1a8     12 15 02 F6 | 	mov	arg02, local04
1b1ac     94 59 B0 FD | 	call	#__system___string_concat
1b1b0     FD 26 02 F6 | 	mov	local05, result1
1b1b4                 | LR__2251
1b1b4                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
1b1b4                 | '   open fullfilename for input as #9
1b1b4     09 12 06 F6 | 	mov	arg01, #9
1b1b8     13 15 02 F6 | 	mov	arg02, local05
1b1bc     00 16 06 F6 | 	mov	arg03, #0
1b1c0     28 65 B0 FD | 	call	#__system___basic_open_string
1b1c4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1b1c8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1b1cc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1b1d0     FD 28 0A F6 | 	mov	local06, result1 wz
1b1d4                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
1b1d4     8C 00 90 AD |  if_e	jmp	#LR__2252
1b1d8     00 12 06 F6 | 	mov	arg01, #0
1b1dc     48 B3 B0 FD | 	call	#__system___getiolock_0540
1b1e0     FD 12 02 F6 | 	mov	arg01, result1
1b1e4     00 59 B0 FD | 	call	#__system___lockmem
1b1e8     86 01 00 FF 
1b1ec     5E 14 06 F6 | 	mov	arg02, ##@LR__5521
1b1f0     00 12 06 F6 | 	mov	arg01, #0
1b1f4     00 16 06 F6 | 	mov	arg03, #0
1b1f8     E0 65 B0 FD | 	call	#__system___basic_print_string
1b1fc     00 12 06 F6 | 	mov	arg01, #0
1b200     14 15 02 F6 | 	mov	arg02, local06
1b204     00 16 06 F6 | 	mov	arg03, #0
1b208     0A 18 06 F6 | 	mov	arg04, #10
1b20c     10 66 B0 FD | 	call	#__system___basic_print_integer
1b210     86 01 00 FF 
1b214     6C 14 06 F6 | 	mov	arg02, ##@LR__5522
1b218     00 12 06 F6 | 	mov	arg01, #0
1b21c     00 16 06 F6 | 	mov	arg03, #0
1b220     B8 65 B0 FD | 	call	#__system___basic_print_string
1b224     14 13 02 F6 | 	mov	arg01, local06
1b228     84 7F B0 FD | 	call	#__system___strerror
1b22c     FD 14 02 F6 | 	mov	arg02, result1
1b230     00 12 06 F6 | 	mov	arg01, #0
1b234     00 16 06 F6 | 	mov	arg03, #0
1b238     A0 65 B0 FD | 	call	#__system___basic_print_string
1b23c     00 12 06 F6 | 	mov	arg01, #0
1b240     0A 14 06 F6 | 	mov	arg02, #10
1b244     00 16 06 F6 | 	mov	arg03, #0
1b248     38 65 B0 FD | 	call	#__system___basic_print_char
1b24c     00 12 06 F6 | 	mov	arg01, #0
1b250     D4 B2 B0 FD | 	call	#__system___getiolock_0540
1b254     FD 00 68 FC | 	wrlong	#0, result1
1b258     09 12 06 F6 | 	mov	arg01, #9
1b25c     F8 A8 B0 FD | 	call	#__system__close
1b260     FC 00 90 FD | 	jmp	#LR__2255
1b264                 | LR__2252
1b264     01 2A 06 F6 | 	mov	local07, #1
1b268     00 2C 06 F6 | 	mov	local08, #0
1b26c                 | '   do
1b26c                 | LR__2253
1b26c                 | '     get #9,pos,block(0),1024,r : pos+=r	
1b26c     4E 00 00 FF 
1b270     B0 E4 05 F1 | 	add	objptr, ##40112
1b274     F2 16 02 F6 | 	mov	arg03, objptr
1b278     4E 00 00 FF 
1b27c     B0 E4 85 F1 | 	sub	objptr, ##40112
1b280     09 12 06 F6 | 	mov	arg01, #9
1b284     15 15 02 F6 | 	mov	arg02, local07
1b288     0A 18 C6 F9 | 	decod	arg04, #10
1b28c     01 1A 06 F6 | 	mov	arg05, #1
1b290     C4 66 B0 FD | 	call	#__system___basic_get
1b294     FD 28 02 F6 | 	mov	local06, result1
1b298     FD 2A 02 F1 | 	add	local07, result1
1b29c     4E 00 00 FF 
1b2a0     B0 E4 05 F1 | 	add	objptr, ##40112
1b2a4     F2 12 02 F6 | 	mov	arg01, objptr
1b2a8     16 15 02 F6 | 	mov	arg02, local08
1b2ac     0A 16 C6 F9 | 	decod	arg03, #10
1b2b0     42 00 00 FF 
1b2b4     E4 E5 85 F1 | 	sub	objptr, ##34276
1b2b8     88 4C B0 FD | 	call	#_psram_spin2_write
1b2bc     0B 00 00 FF 
1b2c0     CC E4 85 F1 | 	sub	objptr, ##5836
1b2c4     14 2D 02 F1 | 	add	local08, local06
1b2c8     02 00 00 FF 
1b2cc     00 28 0E F2 | 	cmp	local06, ##1024 wz
1b2d0     E0 03 00 AF 
1b2d4     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
1b2d8     90 FF 9F 8D |  if_c_and_z	jmp	#LR__2253
1b2dc     36 00 00 FF 
1b2e0     FC E5 05 F1 | 	add	objptr, ##28156
1b2e4     F2 12 02 FB | 	rdlong	arg01, objptr
1b2e8     03 12 62 FD | 	cogstop	arg01
1b2ec     04 E4 05 F1 | 	add	objptr, #4
1b2f0     F2 12 02 FB | 	rdlong	arg01, objptr
1b2f4     03 12 62 FD | 	cogstop	arg01
1b2f8     04 E4 05 F1 | 	add	objptr, #4
1b2fc     F2 12 02 FB | 	rdlong	arg01, objptr
1b300     03 12 62 FD | 	cogstop	arg01
1b304     19 00 00 FF 
1b308     10 E5 05 F1 | 	add	objptr, ##13072
1b30c     F2 12 02 FB | 	rdlong	arg01, objptr
1b310     03 12 62 FD | 	cogstop	arg01
1b314     18 00 00 FF 
1b318     D8 EA 05 F1 | 	add	ptr__dat__, ##12504
1b31c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1b320     18 00 00 FF 
1b324     D8 EA 85 F1 | 	sub	ptr__dat__, ##12504
1b328     19 00 00 FF 
1b32c     08 E5 85 F1 | 	sub	objptr, ##13064
1b330     1E 2C 06 F6 | 	mov	local08, #30
1b334     28 E4 61 FD | 	setq	objptr
1b338     0A 2D F2 FC | 	coginit	local08, arg02 wc
1b33c     01 2C 66 C6 |  if_b	neg	local08, #1
1b340     1B 00 00 FF 
1b344     10 E4 05 F1 | 	add	objptr, ##13840
1b348     F2 2C 62 FC | 	wrlong	local08, objptr
1b34c     52 00 00 FF 
1b350     1C E4 85 F1 | 	sub	objptr, ##42012
1b354     00 12 06 F6 | 	mov	arg01, #0
1b358     01 12 62 FD | 	cogid	arg01
1b35c     03 12 62 FD | 	cogstop	arg01
1b360                 | LR__2254
1b360                 | LR__2255
1b360     A7 F0 03 F6 | 	mov	ptra, fp
1b364     B2 00 A0 FD | 	call	#popregs_
1b368                 | _do_brun_ret
1b368     2D 00 64 FD | 	ret
1b36c                 | 
1b36c                 | ' 
1b36c                 | ' 
1b36c                 | ' sub do_mouse
1b36c                 | _do_mouse
1b36c     E8 06 BF FD | 	call	#_pop
1b370     00 FA 4D F2 | 	cmps	result1, #0 wz
1b374                 | ' t1=pop()
1b374                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
1b374     14 00 90 5D |  if_ne	jmp	#LR__2260
1b378     10 12 06 F6 | 	mov	arg01, #16
1b37c     00 14 06 F6 | 	mov	arg02, #0
1b380     00 16 06 F6 | 	mov	arg03, #0
1b384     64 31 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b388     10 00 90 FD | 	jmp	#LR__2261
1b38c                 | LR__2260
1b38c     10 12 06 F6 | 	mov	arg01, #16
1b390     20 14 06 F6 | 	mov	arg02, #32
1b394     20 16 06 F6 | 	mov	arg03, #32
1b398     50 31 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b39c                 | LR__2261
1b39c                 | _do_mouse_ret
1b39c     2D 00 64 FD | 	ret
1b3a0                 | 
1b3a0                 | ' 
1b3a0                 | ' sub do_cursor
1b3a0                 | _do_cursor
1b3a0     B4 06 BF FD | 	call	#_pop
1b3a4     00 FA 4D F2 | 	cmps	result1, #0 wz
1b3a8                 | ' t1=pop()
1b3a8                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
1b3a8     14 00 90 5D |  if_ne	jmp	#LR__2270
1b3ac     11 12 06 F6 | 	mov	arg01, #17
1b3b0     00 14 06 F6 | 	mov	arg02, #0
1b3b4     00 16 06 F6 | 	mov	arg03, #0
1b3b8     30 31 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b3bc     10 00 90 FD | 	jmp	#LR__2271
1b3c0                 | LR__2270
1b3c0     11 12 06 F6 | 	mov	arg01, #17
1b3c4     08 14 06 F6 | 	mov	arg02, #8
1b3c8     10 16 06 F6 | 	mov	arg03, #16
1b3cc     1C 31 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b3d0                 | LR__2271
1b3d0                 | _do_cursor_ret
1b3d0     2D 00 64 FD | 	ret
1b3d4                 | 
1b3d4                 | ' 
1b3d4                 | ' 
1b3d4                 | ' sub do_click
1b3d4                 | _do_click
1b3d4     80 06 BF FD | 	call	#_pop
1b3d8     00 FA 4D F2 | 	cmps	result1, #0 wz
1b3dc                 | ' t1=pop()
1b3dc                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
1b3dc     50 00 00 AF 
1b3e0     10 E5 05 A1 |  if_e	add	objptr, ##41232
1b3e4     F2 00 68 AC |  if_e	wrlong	#0, objptr
1b3e8     50 00 00 FF 
1b3ec     10 E5 C5 F3 | 	sumz	objptr, ##41232
1b3f0     F2 02 68 5C |  if_ne	wrlong	#1, objptr
1b3f4     50 00 00 5F 
1b3f8     10 E5 85 51 |  if_ne	sub	objptr, ##41232
1b3fc                 | _do_click_ret
1b3fc     2D 00 64 FD | 	ret
1b400                 | 
1b400                 | ' 
1b400                 | ' 
1b400                 | ' sub do_beep
1b400                 | _do_beep
1b400     02 4A 05 F6 | 	mov	COUNT_, #2
1b404     A8 00 A0 FD | 	call	#pushregs_
1b408     20 F0 07 F1 | 	add	ptra, #32
1b40c     48 06 BF FD | 	call	#_pop
1b410     FD 1E 02 F6 | 	mov	local01, result1
1b414     FE 1C 02 F6 | 	mov	arg06, result2
1b418     FF 20 02 F6 | 	mov	local02, result3
1b41c     0C 4E 05 F1 | 	add	fp, #12
1b420     A7 1E 62 FC | 	wrlong	local01, fp
1b424     04 4E 05 F1 | 	add	fp, #4
1b428     A7 1C 62 FC | 	wrlong	arg06, fp
1b42c     04 4E 05 F1 | 	add	fp, #4
1b430     A7 20 62 FC | 	wrlong	local02, fp
1b434     14 4E 85 F1 | 	sub	fp, #20
1b438     1C 06 BF FD | 	call	#_pop
1b43c     A7 FA 61 FC | 	wrlong	result1, fp
1b440     04 4E 05 F1 | 	add	fp, #4
1b444     A7 FC 61 FC | 	wrlong	result2, fp
1b448     04 4E 05 F1 | 	add	fp, #4
1b44c     A7 FE 61 FC | 	wrlong	result3, fp
1b450                 | ' 
1b450                 | ' t2=pop()
1b450                 | ' t1=pop()
1b450                 | ' 
1b450                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
1b450     08 4E 85 F1 | 	sub	fp, #8
1b454     1C FE 0D F2 | 	cmp	result3, #28 wz
1b458     08 4E 05 51 |  if_ne	add	fp, #8
1b45c     A7 20 02 5B |  if_ne	rdlong	local02, fp
1b460     08 4E 85 51 |  if_ne	sub	fp, #8
1b464     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
1b468     A7 1E 02 AB |  if_e	rdlong	local01, fp
1b46c     18 4E 05 A1 |  if_e	add	fp, #24
1b470     A7 1E 62 AC |  if_e	wrlong	local01, fp
1b474     18 4E 85 A1 |  if_e	sub	fp, #24
1b478     14 00 90 AD |  if_e	jmp	#LR__2280
1b47c     A7 12 02 F6 | 	mov	arg01, fp
1b480     70 A7 BF FD | 	call	#_converttoint
1b484     18 4E 05 F1 | 	add	fp, #24
1b488     A7 FA 61 FC | 	wrlong	result1, fp
1b48c     18 4E 85 F1 | 	sub	fp, #24
1b490                 | LR__2280
1b490     1C 4E 05 F1 | 	add	fp, #28
1b494     A7 FE 48 FC | 	wrbyte	#127, fp
1b498     01 4E 05 F1 | 	add	fp, #1
1b49c     A7 00 49 FC | 	wrbyte	#128, fp
1b4a0     01 4E 85 F1 | 	sub	fp, #1
1b4a4     A7 14 02 F6 | 	mov	arg02, fp
1b4a8     04 4E 85 F1 | 	sub	fp, #4
1b4ac     A7 16 02 FB | 	rdlong	arg03, fp
1b4b0     18 4E 85 F1 | 	sub	fp, #24
1b4b4     01 16 66 F0 | 	shl	arg03, #1
1b4b8     07 12 06 F6 | 	mov	arg01, #7
1b4bc     0E 18 C6 F9 | 	decod	arg04, #14
1b4c0     02 1A 06 F6 | 	mov	arg05, #2
1b4c4     00 1C 06 F6 | 	mov	arg06, #0
1b4c8     0B 00 00 FF 
1b4cc     CC E4 05 F1 | 	add	objptr, ##5836
1b4d0     70 52 B0 FD | 	call	#_audio096_spin2_play8
1b4d4     0B 00 00 FF 
1b4d8     CC E4 85 F1 | 	sub	objptr, ##5836
1b4dc     0C 4E 05 F1 | 	add	fp, #12
1b4e0     A7 12 02 F6 | 	mov	arg01, fp
1b4e4     0C 4E 85 F1 | 	sub	fp, #12
1b4e8     04 06 BF FD | 	call	#_push
1b4ec     74 F2 BF FD | 	call	#_do_waitms
1b4f0     07 12 06 F6 | 	mov	arg01, #7
1b4f4     0B 00 00 FF 
1b4f8     CC E4 05 F1 | 	add	objptr, ##5836
1b4fc     E8 52 B0 FD | 	call	#_audio096_spin2_stop
1b500     0B 00 00 FF 
1b504     CC E4 85 F1 | 	sub	objptr, ##5836
1b508     A7 F0 03 F6 | 	mov	ptra, fp
1b50c     B2 00 A0 FD | 	call	#popregs_
1b510                 | _do_beep_ret
1b510     2D 00 64 FD | 	ret
1b514                 | 
1b514                 | ' 
1b514                 | ' sub do_no_command
1b514                 | _do_no_command
1b514     17 12 06 F6 | 	mov	arg01, #23
1b518     34 20 B0 FD | 	call	#_printerror
1b51c                 | _do_no_command_ret
1b51c     2D 00 64 FD | 	ret
1b520                 | 
1b520                 | ' 
1b520                 | ' sub do_negative
1b520                 | _do_negative
1b520     02 4A 05 F6 | 	mov	COUNT_, #2
1b524     A8 00 A0 FD | 	call	#pushregs_
1b528     0C F0 07 F1 | 	add	ptra, #12
1b52c     28 05 BF FD | 	call	#_pop
1b530     FF 1E 02 F6 | 	mov	local01, result3
1b534     A7 FA 61 FC | 	wrlong	result1, fp
1b538     04 4E 05 F1 | 	add	fp, #4
1b53c     A7 FC 61 FC | 	wrlong	result2, fp
1b540     04 4E 05 F1 | 	add	fp, #4
1b544     A7 1E 62 FC | 	wrlong	local01, fp
1b548                 | ' t1=pop()
1b548                 | ' if t1.result_type=result_int then 
1b548     08 4E 85 F1 | 	sub	fp, #8
1b54c     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b550     A7 20 02 AB |  if_e	rdlong	local02, fp
1b554     10 1F 62 A6 |  if_e	neg	local01, local02
1b558     A7 1E 62 AC |  if_e	wrlong	local01, fp
1b55c     5C 00 90 AD |  if_e	jmp	#LR__2292
1b560     08 4E 05 F1 | 	add	fp, #8
1b564     A7 1E 02 FB | 	rdlong	local01, fp
1b568     08 4E 85 F1 | 	sub	fp, #8
1b56c     1D 1E 0E F2 | 	cmp	local01, #29 wz
1b570     1C 00 90 5D |  if_ne	jmp	#LR__2290
1b574     A7 20 02 FB | 	rdlong	local02, fp
1b578     10 1F 62 F6 | 	neg	local01, local02
1b57c     A7 1E 62 FC | 	wrlong	local01, fp
1b580     08 4E 05 F1 | 	add	fp, #8
1b584     A7 38 68 FC | 	wrlong	#28, fp
1b588     08 4E 85 F1 | 	sub	fp, #8
1b58c     2C 00 90 FD | 	jmp	#LR__2291
1b590                 | LR__2290
1b590     08 4E 05 F1 | 	add	fp, #8
1b594     A7 1E 02 FB | 	rdlong	local01, fp
1b598     08 4E 85 F1 | 	sub	fp, #8
1b59c     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b5a0     A7 FA 01 AB |  if_e	rdlong	result1, fp
1b5a4     1F FA E5 A4 |  if_e	bitnot	result1, #31
1b5a8     A7 FA 61 AC |  if_e	wrlong	result1, fp
1b5ac     08 4E 05 51 |  if_ne	add	fp, #8
1b5b0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1b5b4     08 4E 85 51 |  if_ne	sub	fp, #8
1b5b8     A7 50 68 5C |  if_ne	wrlong	#40, fp
1b5bc                 | LR__2291
1b5bc                 | LR__2292
1b5bc     A7 12 02 F6 | 	mov	arg01, fp
1b5c0     2C 05 BF FD | 	call	#_push
1b5c4     A7 F0 03 F6 | 	mov	ptra, fp
1b5c8     B2 00 A0 FD | 	call	#popregs_
1b5cc                 | _do_negative_ret
1b5cc     2D 00 64 FD | 	ret
1b5d0                 | 
1b5d0                 | ' 
1b5d0                 | ' sub do_abs
1b5d0                 | _do_abs
1b5d0     01 4A 05 F6 | 	mov	COUNT_, #1
1b5d4     A8 00 A0 FD | 	call	#pushregs_
1b5d8     0C F0 07 F1 | 	add	ptra, #12
1b5dc     78 04 BF FD | 	call	#_pop
1b5e0     FF 1E 02 F6 | 	mov	local01, result3
1b5e4     A7 FA 61 FC | 	wrlong	result1, fp
1b5e8     04 4E 05 F1 | 	add	fp, #4
1b5ec     A7 FC 61 FC | 	wrlong	result2, fp
1b5f0     04 4E 05 F1 | 	add	fp, #4
1b5f4     A7 1E 62 FC | 	wrlong	local01, fp
1b5f8                 | ' t1=pop()
1b5f8                 | ' if t1.result_type=result_int then 
1b5f8     08 4E 85 F1 | 	sub	fp, #8
1b5fc     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b600     A7 12 02 AB |  if_e	rdlong	arg01, fp
1b604     09 1F 42 A6 |  if_e	abs	local01, arg01
1b608     A7 1E 62 AC |  if_e	wrlong	local01, fp
1b60c     2C 00 90 AD |  if_e	jmp	#LR__2300
1b610     08 4E 05 F1 | 	add	fp, #8
1b614     A7 1E 02 FB | 	rdlong	local01, fp
1b618     08 4E 85 F1 | 	sub	fp, #8
1b61c     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b620     A7 FA 01 AB |  if_e	rdlong	result1, fp
1b624     1F FA 05 A4 |  if_e	bitl	result1, #31
1b628     A7 FA 61 AC |  if_e	wrlong	result1, fp
1b62c     08 4E 05 51 |  if_ne	add	fp, #8
1b630     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1b634     08 4E 85 51 |  if_ne	sub	fp, #8
1b638     A7 50 68 5C |  if_ne	wrlong	#40, fp
1b63c                 | LR__2300
1b63c     A7 12 02 F6 | 	mov	arg01, fp
1b640     AC 04 BF FD | 	call	#_push
1b644     A7 F0 03 F6 | 	mov	ptra, fp
1b648     B2 00 A0 FD | 	call	#popregs_
1b64c                 | _do_abs_ret
1b64c     2D 00 64 FD | 	ret
1b650                 | 
1b650                 | ' 
1b650                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1b650                 | ' 
1b650                 | ' ''----------------------------------------------------------------------------------------------------
1b650                 | ' ''------------------ Initialization procedures -------------------------------------------------------
1b650                 | ' ''----------------------------------------------------------------------------------------------------
1b650                 | ' 
1b650                 | ' ''--------------------------- Command function pointers
1b650                 | ' 
1b650                 | ' sub init_commands
1b650                 | _init_commands
1b650                 | ' 
1b650                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1b650     00 00 06 F6 | 	mov	_var01, #0
1b654     97 16 48 FB | 	callpa	#(@LR__2311-@LR__2310)>>2,fcache_load_ptr_
1b658                 | LR__2310
1b658     00 FB 01 F6 | 	mov	result1, _var01
1b65c     02 FA 65 F0 | 	shl	result1, #2
1b660     43 00 00 FF 
1b664     60 E4 05 F1 | 	add	objptr, ##34400
1b668     F2 FA 01 F1 | 	add	result1, objptr
1b66c     43 00 00 FF 
1b670     60 E4 85 F1 | 	sub	objptr, ##34400
1b674     FD E4 61 FC | 	wrlong	objptr, result1
1b678     01 00 06 F1 | 	add	_var01, #1
1b67c     00 01 56 F2 | 	cmps	_var01, #256 wc
1b680     D4 FF 9F CD |  if_b	jmp	#LR__2310
1b684                 | LR__2311
1b684     F2 FA 01 F6 | 	mov	result1, objptr
1b688     14 FA 25 F4 | 	bith	result1, #20
1b68c     43 00 00 FF 
1b690     64 E4 05 F1 | 	add	objptr, ##34404
1b694     F2 FA 61 FC | 	wrlong	result1, objptr
1b698     43 00 00 FF 
1b69c     64 E4 85 F1 | 	sub	objptr, ##34404
1b6a0     F2 FA 01 F6 | 	mov	result1, objptr
1b6a4     15 FA 25 F4 | 	bith	result1, #21
1b6a8     43 00 00 FF 
1b6ac     68 E4 05 F1 | 	add	objptr, ##34408
1b6b0     F2 FA 61 FC | 	wrlong	result1, objptr
1b6b4     43 00 00 FF 
1b6b8     68 E4 85 F1 | 	sub	objptr, ##34408
1b6bc     F2 FA 01 F6 | 	mov	result1, objptr
1b6c0     34 FA 25 F4 | 	bith	result1, #52
1b6c4     43 00 00 FF 
1b6c8     6C E4 05 F1 | 	add	objptr, ##34412
1b6cc     F2 FA 61 FC | 	wrlong	result1, objptr
1b6d0     43 00 00 FF 
1b6d4     6C E4 85 F1 | 	sub	objptr, ##34412
1b6d8     F2 FA 01 F6 | 	mov	result1, objptr
1b6dc     16 FA 25 F4 | 	bith	result1, #22
1b6e0     43 00 00 FF 
1b6e4     74 E4 05 F1 | 	add	objptr, ##34420
1b6e8     F2 FA 61 FC | 	wrlong	result1, objptr
1b6ec     43 00 00 FF 
1b6f0     74 E4 85 F1 | 	sub	objptr, ##34420
1b6f4     F2 FA 01 F6 | 	mov	result1, objptr
1b6f8     00 28 00 FF 
1b6fc     00 FA 45 F5 | 	or	result1, ##5242880
1b700     43 00 00 FF 
1b704     78 E4 05 F1 | 	add	objptr, ##34424
1b708     F2 FA 61 FC | 	wrlong	result1, objptr
1b70c     43 00 00 FF 
1b710     78 E4 85 F1 | 	sub	objptr, ##34424
1b714     F2 FA 01 F6 | 	mov	result1, objptr
1b718     35 FA 25 F4 | 	bith	result1, #53
1b71c     43 00 00 FF 
1b720     7C E4 05 F1 | 	add	objptr, ##34428
1b724     F2 FA 61 FC | 	wrlong	result1, objptr
1b728     43 00 00 FF 
1b72c     7C E4 85 F1 | 	sub	objptr, ##34428
1b730     F2 FA 01 F6 | 	mov	result1, objptr
1b734     54 FA 25 F4 | 	bith	result1, #84
1b738     43 00 00 FF 
1b73c     80 E4 05 F1 | 	add	objptr, ##34432
1b740     F2 FA 61 FC | 	wrlong	result1, objptr
1b744     43 00 00 FF 
1b748     80 E4 85 F1 | 	sub	objptr, ##34432
1b74c     F2 FA 01 F6 | 	mov	result1, objptr
1b750     17 FA 25 F4 | 	bith	result1, #23
1b754     43 00 00 FF 
1b758     84 E4 05 F1 | 	add	objptr, ##34436
1b75c     F2 FA 61 FC | 	wrlong	result1, objptr
1b760     43 00 00 FF 
1b764     84 E4 85 F1 | 	sub	objptr, ##34436
1b768     F2 FA 01 F6 | 	mov	result1, objptr
1b76c     00 48 00 FF 
1b770     00 FA 45 F5 | 	or	result1, ##9437184
1b774     43 00 00 FF 
1b778     88 E4 05 F1 | 	add	objptr, ##34440
1b77c     F2 FA 61 FC | 	wrlong	result1, objptr
1b780     43 00 00 FF 
1b784     88 E4 85 F1 | 	sub	objptr, ##34440
1b788     F2 FA 01 F6 | 	mov	result1, objptr
1b78c     00 50 00 FF 
1b790     00 FA 45 F5 | 	or	result1, ##10485760
1b794     43 00 00 FF 
1b798     8C E4 05 F1 | 	add	objptr, ##34444
1b79c     F2 FA 61 FC | 	wrlong	result1, objptr
1b7a0     43 00 00 FF 
1b7a4     8C E4 85 F1 | 	sub	objptr, ##34444
1b7a8     F2 FA 01 F6 | 	mov	result1, objptr
1b7ac     00 58 00 FF 
1b7b0     00 FA 45 F5 | 	or	result1, ##11534336
1b7b4     43 00 00 FF 
1b7b8     90 E4 05 F1 | 	add	objptr, ##34448
1b7bc     F2 FA 61 FC | 	wrlong	result1, objptr
1b7c0     43 00 00 FF 
1b7c4     90 E4 85 F1 | 	sub	objptr, ##34448
1b7c8     F2 FA 01 F6 | 	mov	result1, objptr
1b7cc     36 FA 25 F4 | 	bith	result1, #54
1b7d0     43 00 00 FF 
1b7d4     A4 E4 05 F1 | 	add	objptr, ##34468
1b7d8     F2 FA 61 FC | 	wrlong	result1, objptr
1b7dc     43 00 00 FF 
1b7e0     A4 E4 85 F1 | 	sub	objptr, ##34468
1b7e4     F2 FA 01 F6 | 	mov	result1, objptr
1b7e8     00 68 00 FF 
1b7ec     00 FA 45 F5 | 	or	result1, ##13631488
1b7f0     43 00 00 FF 
1b7f4     D4 E4 05 F1 | 	add	objptr, ##34516
1b7f8     F2 FA 61 FC | 	wrlong	result1, objptr
1b7fc     43 00 00 FF 
1b800     D4 E4 85 F1 | 	sub	objptr, ##34516
1b804     F2 FA 01 F6 | 	mov	result1, objptr
1b808     00 68 00 FF 
1b80c     00 FA 45 F5 | 	or	result1, ##13631488
1b810     43 00 00 FF 
1b814     D0 E4 05 F1 | 	add	objptr, ##34512
1b818     F2 FA 61 FC | 	wrlong	result1, objptr
1b81c     43 00 00 FF 
1b820     D0 E4 85 F1 | 	sub	objptr, ##34512
1b824     F2 FA 01 F6 | 	mov	result1, objptr
1b828     00 68 00 FF 
1b82c     00 FA 45 F5 | 	or	result1, ##13631488
1b830     43 00 00 FF 
1b834     D8 E4 05 F1 | 	add	objptr, ##34520
1b838     F2 FA 61 FC | 	wrlong	result1, objptr
1b83c     43 00 00 FF 
1b840     D8 E4 85 F1 | 	sub	objptr, ##34520
1b844     F2 FA 01 F6 | 	mov	result1, objptr
1b848     00 68 00 FF 
1b84c     00 FA 45 F5 | 	or	result1, ##13631488
1b850     43 00 00 FF 
1b854     DC E4 05 F1 | 	add	objptr, ##34524
1b858     F2 FA 61 FC | 	wrlong	result1, objptr
1b85c     43 00 00 FF 
1b860     DC E4 85 F1 | 	sub	objptr, ##34524
1b864     F2 FA 01 F6 | 	mov	result1, objptr
1b868     00 68 00 FF 
1b86c     00 FA 45 F5 | 	or	result1, ##13631488
1b870     43 00 00 FF 
1b874     0C E5 05 F1 | 	add	objptr, ##34572
1b878     F2 FA 61 FC | 	wrlong	result1, objptr
1b87c     43 00 00 FF 
1b880     0C E5 85 F1 | 	sub	objptr, ##34572
1b884     F2 FA 01 F6 | 	mov	result1, objptr
1b888     55 FA 25 F4 | 	bith	result1, #85
1b88c     43 00 00 FF 
1b890     BC E4 05 F1 | 	add	objptr, ##34492
1b894     F2 FA 61 FC | 	wrlong	result1, objptr
1b898     43 00 00 FF 
1b89c     BC E4 85 F1 | 	sub	objptr, ##34492
1b8a0     F2 FA 01 F6 | 	mov	result1, objptr
1b8a4     00 68 00 FF 
1b8a8     00 FA 45 F5 | 	or	result1, ##13631488
1b8ac     43 00 00 FF 
1b8b0     10 E5 05 F1 | 	add	objptr, ##34576
1b8b4     F2 FA 61 FC | 	wrlong	result1, objptr
1b8b8     43 00 00 FF 
1b8bc     10 E5 85 F1 | 	sub	objptr, ##34576
1b8c0     F2 FA 01 F6 | 	mov	result1, objptr
1b8c4     00 68 00 FF 
1b8c8     00 FA 45 F5 | 	or	result1, ##13631488
1b8cc     43 00 00 FF 
1b8d0     E0 E4 05 F1 | 	add	objptr, ##34528
1b8d4     F2 FA 61 FC | 	wrlong	result1, objptr
1b8d8     43 00 00 FF 
1b8dc     E0 E4 85 F1 | 	sub	objptr, ##34528
1b8e0     F2 FA 01 F6 | 	mov	result1, objptr
1b8e4     00 68 00 FF 
1b8e8     00 FA 45 F5 | 	or	result1, ##13631488
1b8ec     43 00 00 FF 
1b8f0     E4 E4 05 F1 | 	add	objptr, ##34532
1b8f4     F2 FA 61 FC | 	wrlong	result1, objptr
1b8f8     43 00 00 FF 
1b8fc     E4 E4 85 F1 | 	sub	objptr, ##34532
1b900     F2 FA 01 F6 | 	mov	result1, objptr
1b904     00 68 00 FF 
1b908     00 FA 45 F5 | 	or	result1, ##13631488
1b90c     43 00 00 FF 
1b910     E8 E4 05 F1 | 	add	objptr, ##34536
1b914     F2 FA 61 FC | 	wrlong	result1, objptr
1b918     43 00 00 FF 
1b91c     E8 E4 85 F1 | 	sub	objptr, ##34536
1b920     F2 FA 01 F6 | 	mov	result1, objptr
1b924     74 FA 25 F4 | 	bith	result1, #116
1b928     43 00 00 FF 
1b92c     60 E5 05 F1 | 	add	objptr, ##34656
1b930     F2 FA 61 FC | 	wrlong	result1, objptr
1b934     43 00 00 FF 
1b938     60 E5 85 F1 | 	sub	objptr, ##34656
1b93c     F2 FA 01 F6 | 	mov	result1, objptr
1b940     18 FA 25 F4 | 	bith	result1, #24
1b944     43 00 00 FF 
1b948     64 E5 05 F1 | 	add	objptr, ##34660
1b94c     F2 FA 61 FC | 	wrlong	result1, objptr
1b950     43 00 00 FF 
1b954     64 E5 85 F1 | 	sub	objptr, ##34660
1b958     F2 FA 01 F6 | 	mov	result1, objptr
1b95c     00 88 00 FF 
1b960     00 FA 45 F5 | 	or	result1, ##17825792
1b964     43 00 00 FF 
1b968     68 E5 05 F1 | 	add	objptr, ##34664
1b96c     F2 FA 61 FC | 	wrlong	result1, objptr
1b970     43 00 00 FF 
1b974     68 E5 85 F1 | 	sub	objptr, ##34664
1b978     F2 FA 01 F6 | 	mov	result1, objptr
1b97c     00 90 00 FF 
1b980     00 FA 45 F5 | 	or	result1, ##18874368
1b984     43 00 00 FF 
1b988     6C E5 05 F1 | 	add	objptr, ##34668
1b98c     F2 FA 61 FC | 	wrlong	result1, objptr
1b990     43 00 00 FF 
1b994     6C E5 85 F1 | 	sub	objptr, ##34668
1b998     F2 FA 01 F6 | 	mov	result1, objptr
1b99c     00 98 00 FF 
1b9a0     00 FA 45 F5 | 	or	result1, ##19922944
1b9a4     43 00 00 FF 
1b9a8     70 E5 05 F1 | 	add	objptr, ##34672
1b9ac     F2 FA 61 FC | 	wrlong	result1, objptr
1b9b0     43 00 00 FF 
1b9b4     70 E5 85 F1 | 	sub	objptr, ##34672
1b9b8     F2 FA 01 F6 | 	mov	result1, objptr
1b9bc     00 A0 00 FF 
1b9c0     00 FA 45 F5 | 	or	result1, ##20971520
1b9c4     43 00 00 FF 
1b9c8     74 E5 05 F1 | 	add	objptr, ##34676
1b9cc     F2 FA 61 FC | 	wrlong	result1, objptr
1b9d0     43 00 00 FF 
1b9d4     74 E5 85 F1 | 	sub	objptr, ##34676
1b9d8     F2 FA 01 F6 | 	mov	result1, objptr
1b9dc     00 A8 00 FF 
1b9e0     00 FA 45 F5 | 	or	result1, ##22020096
1b9e4     43 00 00 FF 
1b9e8     78 E5 05 F1 | 	add	objptr, ##34680
1b9ec     F2 FA 61 FC | 	wrlong	result1, objptr
1b9f0     43 00 00 FF 
1b9f4     78 E5 85 F1 | 	sub	objptr, ##34680
1b9f8     F2 FA 01 F6 | 	mov	result1, objptr
1b9fc     00 B0 00 FF 
1ba00     00 FA 45 F5 | 	or	result1, ##23068672
1ba04     43 00 00 FF 
1ba08     7C E5 05 F1 | 	add	objptr, ##34684
1ba0c     F2 FA 61 FC | 	wrlong	result1, objptr
1ba10     43 00 00 FF 
1ba14     7C E5 85 F1 | 	sub	objptr, ##34684
1ba18     F2 FA 01 F6 | 	mov	result1, objptr
1ba1c     00 B8 00 FF 
1ba20     00 FA 45 F5 | 	or	result1, ##24117248
1ba24     43 00 00 FF 
1ba28     80 E5 05 F1 | 	add	objptr, ##34688
1ba2c     F2 FA 61 FC | 	wrlong	result1, objptr
1ba30     43 00 00 FF 
1ba34     80 E5 85 F1 | 	sub	objptr, ##34688
1ba38     F2 FA 01 F6 | 	mov	result1, objptr
1ba3c     37 FA 25 F4 | 	bith	result1, #55
1ba40     43 00 00 FF 
1ba44     84 E5 05 F1 | 	add	objptr, ##34692
1ba48     F2 FA 61 FC | 	wrlong	result1, objptr
1ba4c     43 00 00 FF 
1ba50     84 E5 85 F1 | 	sub	objptr, ##34692
1ba54     F2 FA 01 F6 | 	mov	result1, objptr
1ba58     00 C8 00 FF 
1ba5c     00 FA 45 F5 | 	or	result1, ##26214400
1ba60     43 00 00 FF 
1ba64     88 E5 05 F1 | 	add	objptr, ##34696
1ba68     F2 FA 61 FC | 	wrlong	result1, objptr
1ba6c     43 00 00 FF 
1ba70     88 E5 85 F1 | 	sub	objptr, ##34696
1ba74     F2 FA 01 F6 | 	mov	result1, objptr
1ba78     00 D0 00 FF 
1ba7c     00 FA 45 F5 | 	or	result1, ##27262976
1ba80     43 00 00 FF 
1ba84     8C E5 05 F1 | 	add	objptr, ##34700
1ba88     F2 FA 61 FC | 	wrlong	result1, objptr
1ba8c     43 00 00 FF 
1ba90     8C E5 85 F1 | 	sub	objptr, ##34700
1ba94     F2 FA 01 F6 | 	mov	result1, objptr
1ba98     00 D8 00 FF 
1ba9c     00 FA 45 F5 | 	or	result1, ##28311552
1baa0     43 00 00 FF 
1baa4     90 E5 05 F1 | 	add	objptr, ##34704
1baa8     F2 FA 61 FC | 	wrlong	result1, objptr
1baac     43 00 00 FF 
1bab0     90 E5 85 F1 | 	sub	objptr, ##34704
1bab4     F2 FA 01 F6 | 	mov	result1, objptr
1bab8     56 FA 25 F4 | 	bith	result1, #86
1babc     43 00 00 FF 
1bac0     94 E5 05 F1 | 	add	objptr, ##34708
1bac4     F2 FA 61 FC | 	wrlong	result1, objptr
1bac8     43 00 00 FF 
1bacc     94 E5 85 F1 | 	sub	objptr, ##34708
1bad0     F2 FA 01 F6 | 	mov	result1, objptr
1bad4     00 E8 00 FF 
1bad8     00 FA 45 F5 | 	or	result1, ##30408704
1badc     45 00 00 FF 
1bae0     5C E4 05 F1 | 	add	objptr, ##35420
1bae4     F2 FA 61 FC | 	wrlong	result1, objptr
1bae8     45 00 00 FF 
1baec     5C E4 85 F1 | 	sub	objptr, ##35420
1baf0     F2 FA 01 F6 | 	mov	result1, objptr
1baf4     75 FA 25 F4 | 	bith	result1, #117
1baf8     43 00 00 FF 
1bafc     98 E5 05 F1 | 	add	objptr, ##34712
1bb00     F2 FA 61 FC | 	wrlong	result1, objptr
1bb04     43 00 00 FF 
1bb08     98 E5 85 F1 | 	sub	objptr, ##34712
1bb0c     F2 FA 01 F6 | 	mov	result1, objptr
1bb10     94 FA 25 F4 | 	bith	result1, #148
1bb14     43 00 00 FF 
1bb18     AC E5 05 F1 | 	add	objptr, ##34732
1bb1c     F2 FA 61 FC | 	wrlong	result1, objptr
1bb20     43 00 00 FF 
1bb24     AC E5 85 F1 | 	sub	objptr, ##34732
1bb28     F2 FA 01 F6 | 	mov	result1, objptr
1bb2c     19 FA 25 F4 | 	bith	result1, #25
1bb30     43 00 00 FF 
1bb34     9C E5 05 F1 | 	add	objptr, ##34716
1bb38     F2 FA 61 FC | 	wrlong	result1, objptr
1bb3c     43 00 00 FF 
1bb40     9C E5 85 F1 | 	sub	objptr, ##34716
1bb44     F2 FA 01 F6 | 	mov	result1, objptr
1bb48     00 08 01 FF 
1bb4c     00 FA 45 F5 | 	or	result1, ##34603008
1bb50     43 00 00 FF 
1bb54     B8 E4 05 F1 | 	add	objptr, ##34488
1bb58     F2 FA 61 FC | 	wrlong	result1, objptr
1bb5c     43 00 00 FF 
1bb60     B8 E4 85 F1 | 	sub	objptr, ##34488
1bb64     F2 FA 01 F6 | 	mov	result1, objptr
1bb68     00 10 01 FF 
1bb6c     00 FA 45 F5 | 	or	result1, ##35651584
1bb70     43 00 00 FF 
1bb74     A0 E5 05 F1 | 	add	objptr, ##34720
1bb78     F2 FA 61 FC | 	wrlong	result1, objptr
1bb7c     43 00 00 FF 
1bb80     A0 E5 85 F1 | 	sub	objptr, ##34720
1bb84     F2 FA 01 F6 | 	mov	result1, objptr
1bb88     00 18 01 FF 
1bb8c     00 FA 45 F5 | 	or	result1, ##36700160
1bb90     43 00 00 FF 
1bb94     A4 E5 05 F1 | 	add	objptr, ##34724
1bb98     F2 FA 61 FC | 	wrlong	result1, objptr
1bb9c     43 00 00 FF 
1bba0     A4 E5 85 F1 | 	sub	objptr, ##34724
1bba4     F2 FA 01 F6 | 	mov	result1, objptr
1bba8     00 20 01 FF 
1bbac     00 FA 45 F5 | 	or	result1, ##37748736
1bbb0     43 00 00 FF 
1bbb4     A8 E5 05 F1 | 	add	objptr, ##34728
1bbb8     F2 FA 61 FC | 	wrlong	result1, objptr
1bbbc     43 00 00 FF 
1bbc0     A8 E5 85 F1 | 	sub	objptr, ##34728
1bbc4     F2 FA 01 F6 | 	mov	result1, objptr
1bbc8     00 28 01 FF 
1bbcc     00 FA 45 F5 | 	or	result1, ##38797312
1bbd0     43 00 00 FF 
1bbd4     B4 E5 05 F1 | 	add	objptr, ##34740
1bbd8     F2 FA 61 FC | 	wrlong	result1, objptr
1bbdc     43 00 00 FF 
1bbe0     B4 E5 85 F1 | 	sub	objptr, ##34740
1bbe4     F2 FA 01 F6 | 	mov	result1, objptr
1bbe8     00 30 01 FF 
1bbec     00 FA 45 F5 | 	or	result1, ##39845888
1bbf0     43 00 00 FF 
1bbf4     B8 E5 05 F1 | 	add	objptr, ##34744
1bbf8     F2 FA 61 FC | 	wrlong	result1, objptr
1bbfc     43 00 00 FF 
1bc00     B8 E5 85 F1 | 	sub	objptr, ##34744
1bc04     F2 FA 01 F6 | 	mov	result1, objptr
1bc08     00 38 01 FF 
1bc0c     00 FA 45 F5 | 	or	result1, ##40894464
1bc10     43 00 00 FF 
1bc14     BC E5 05 F1 | 	add	objptr, ##34748
1bc18     F2 FA 61 FC | 	wrlong	result1, objptr
1bc1c     43 00 00 FF 
1bc20     BC E5 85 F1 | 	sub	objptr, ##34748
1bc24     F2 FA 01 F6 | 	mov	result1, objptr
1bc28     00 40 01 FF 
1bc2c     00 FA 45 F5 | 	or	result1, ##41943040
1bc30     43 00 00 FF 
1bc34     C0 E5 05 F1 | 	add	objptr, ##34752
1bc38     F2 FA 61 FC | 	wrlong	result1, objptr
1bc3c     43 00 00 FF 
1bc40     C0 E5 85 F1 | 	sub	objptr, ##34752
1bc44     F2 FA 01 F6 | 	mov	result1, objptr
1bc48     00 48 01 FF 
1bc4c     00 FA 45 F5 | 	or	result1, ##42991616
1bc50     43 00 00 FF 
1bc54     C8 E5 05 F1 | 	add	objptr, ##34760
1bc58     F2 FA 61 FC | 	wrlong	result1, objptr
1bc5c     43 00 00 FF 
1bc60     C8 E5 85 F1 | 	sub	objptr, ##34760
1bc64     F2 FA 01 F6 | 	mov	result1, objptr
1bc68     00 08 01 FF 
1bc6c     00 FA 45 F5 | 	or	result1, ##34603008
1bc70     43 00 00 FF 
1bc74     CC E5 05 F1 | 	add	objptr, ##34764
1bc78     F2 FA 61 FC | 	wrlong	result1, objptr
1bc7c     43 00 00 FF 
1bc80     CC E5 85 F1 | 	sub	objptr, ##34764
1bc84     F2 FA 01 F6 | 	mov	result1, objptr
1bc88     00 50 01 FF 
1bc8c     00 FA 45 F5 | 	or	result1, ##44040192
1bc90     43 00 00 FF 
1bc94     CC E4 05 F1 | 	add	objptr, ##34508
1bc98     F2 FA 61 FC | 	wrlong	result1, objptr
1bc9c     43 00 00 FF 
1bca0     CC E4 85 F1 | 	sub	objptr, ##34508
1bca4     F2 FA 01 F6 | 	mov	result1, objptr
1bca8     00 58 01 FF 
1bcac     00 FA 45 F5 | 	or	result1, ##45088768
1bcb0     43 00 00 FF 
1bcb4     FC E4 05 F1 | 	add	objptr, ##34556
1bcb8     F2 FA 61 FC | 	wrlong	result1, objptr
1bcbc     43 00 00 FF 
1bcc0     FC E4 85 F1 | 	sub	objptr, ##34556
1bcc4     F2 FA 01 F6 | 	mov	result1, objptr
1bcc8     00 60 01 FF 
1bccc     00 FA 45 F5 | 	or	result1, ##46137344
1bcd0     43 00 00 FF 
1bcd4     F8 E4 05 F1 | 	add	objptr, ##34552
1bcd8     F2 FA 61 FC | 	wrlong	result1, objptr
1bcdc     43 00 00 FF 
1bce0     F8 E4 85 F1 | 	sub	objptr, ##34552
1bce4     F2 FA 01 F6 | 	mov	result1, objptr
1bce8     00 68 01 FF 
1bcec     00 FA 45 F5 | 	or	result1, ##47185920
1bcf0     43 00 00 FF 
1bcf4     9C E4 05 F1 | 	add	objptr, ##34460
1bcf8     F2 FA 61 FC | 	wrlong	result1, objptr
1bcfc     43 00 00 FF 
1bd00     9C E4 85 F1 | 	sub	objptr, ##34460
1bd04     F2 FA 01 F6 | 	mov	result1, objptr
1bd08     00 70 01 FF 
1bd0c     00 FA 45 F5 | 	or	result1, ##48234496
1bd10     43 00 00 FF 
1bd14     A0 E4 05 F1 | 	add	objptr, ##34464
1bd18     F2 FA 61 FC | 	wrlong	result1, objptr
1bd1c     43 00 00 FF 
1bd20     A0 E4 85 F1 | 	sub	objptr, ##34464
1bd24     F2 FA 01 F6 | 	mov	result1, objptr
1bd28     00 78 01 FF 
1bd2c     00 FA 45 F5 | 	or	result1, ##49283072
1bd30     43 00 00 FF 
1bd34     08 E5 05 F1 | 	add	objptr, ##34568
1bd38     F2 FA 61 FC | 	wrlong	result1, objptr
1bd3c     43 00 00 FF 
1bd40     08 E5 85 F1 | 	sub	objptr, ##34568
1bd44     F2 FA 01 F6 | 	mov	result1, objptr
1bd48     38 FA 25 F4 | 	bith	result1, #56
1bd4c     43 00 00 FF 
1bd50     B0 E5 05 F1 | 	add	objptr, ##34736
1bd54     F2 FA 61 FC | 	wrlong	result1, objptr
1bd58     43 00 00 FF 
1bd5c     B0 E5 85 F1 | 	sub	objptr, ##34736
1bd60     F2 FA 01 F6 | 	mov	result1, objptr
1bd64     00 88 01 FF 
1bd68     00 FA 45 F5 | 	or	result1, ##51380224
1bd6c     43 00 00 FF 
1bd70     C4 E5 05 F1 | 	add	objptr, ##34756
1bd74     F2 FA 61 FC | 	wrlong	result1, objptr
1bd78     43 00 00 FF 
1bd7c     C4 E5 85 F1 | 	sub	objptr, ##34756
1bd80     F2 FA 01 F6 | 	mov	result1, objptr
1bd84     00 90 01 FF 
1bd88     00 FA 45 F5 | 	or	result1, ##52428800
1bd8c     43 00 00 FF 
1bd90     D0 E5 05 F1 | 	add	objptr, ##34768
1bd94     F2 FA 61 FC | 	wrlong	result1, objptr
1bd98     43 00 00 FF 
1bd9c     D0 E5 85 F1 | 	sub	objptr, ##34768
1bda0     F2 FA 01 F6 | 	mov	result1, objptr
1bda4     00 98 01 FF 
1bda8     00 FA 45 F5 | 	or	result1, ##53477376
1bdac     43 00 00 FF 
1bdb0     D4 E5 05 F1 | 	add	objptr, ##34772
1bdb4     F2 FA 61 FC | 	wrlong	result1, objptr
1bdb8     43 00 00 FF 
1bdbc     D4 E5 85 F1 | 	sub	objptr, ##34772
1bdc0     F2 FA 01 F6 | 	mov	result1, objptr
1bdc4     00 A0 01 FF 
1bdc8     00 FA 45 F5 | 	or	result1, ##54525952
1bdcc     43 00 00 FF 
1bdd0     D8 E5 05 F1 | 	add	objptr, ##34776
1bdd4     F2 FA 61 FC | 	wrlong	result1, objptr
1bdd8     43 00 00 FF 
1bddc     D8 E5 85 F1 | 	sub	objptr, ##34776
1bde0     F2 FA 01 F6 | 	mov	result1, objptr
1bde4     00 A8 01 FF 
1bde8     00 FA 45 F5 | 	or	result1, ##55574528
1bdec     43 00 00 FF 
1bdf0     DC E5 05 F1 | 	add	objptr, ##34780
1bdf4     F2 FA 61 FC | 	wrlong	result1, objptr
1bdf8     43 00 00 FF 
1bdfc     DC E5 85 F1 | 	sub	objptr, ##34780
1be00     F2 FA 01 F6 | 	mov	result1, objptr
1be04     00 B0 01 FF 
1be08     00 FA 45 F5 | 	or	result1, ##56623104
1be0c     43 00 00 FF 
1be10     E0 E5 05 F1 | 	add	objptr, ##34784
1be14     F2 FA 61 FC | 	wrlong	result1, objptr
1be18     43 00 00 FF 
1be1c     E0 E5 85 F1 | 	sub	objptr, ##34784
1be20     F2 FA 01 F6 | 	mov	result1, objptr
1be24     00 B8 01 FF 
1be28     00 FA 45 F5 | 	or	result1, ##57671680
1be2c     43 00 00 FF 
1be30     E4 E5 05 F1 | 	add	objptr, ##34788
1be34     F2 FA 61 FC | 	wrlong	result1, objptr
1be38     43 00 00 FF 
1be3c     E4 E5 85 F1 | 	sub	objptr, ##34788
1be40     F2 FA 01 F6 | 	mov	result1, objptr
1be44     94 FA 25 F4 | 	bith	result1, #148
1be48     43 00 00 FF 
1be4c     AC E5 05 F1 | 	add	objptr, ##34732
1be50     F2 FA 61 FC | 	wrlong	result1, objptr
1be54     43 00 00 FF 
1be58     AC E5 85 F1 | 	sub	objptr, ##34732
1be5c     F2 FA 01 F6 | 	mov	result1, objptr
1be60     57 FA 25 F4 | 	bith	result1, #87
1be64     43 00 00 FF 
1be68     EC E5 05 F1 | 	add	objptr, ##34796
1be6c     F2 FA 61 FC | 	wrlong	result1, objptr
1be70     43 00 00 FF 
1be74     EC E5 85 F1 | 	sub	objptr, ##34796
1be78     F2 FA 01 F6 | 	mov	result1, objptr
1be7c     00 C8 01 FF 
1be80     00 FA 45 F5 | 	or	result1, ##59768832
1be84     43 00 00 FF 
1be88     E8 E5 05 F1 | 	add	objptr, ##34792
1be8c     F2 FA 61 FC | 	wrlong	result1, objptr
1be90     43 00 00 FF 
1be94     E8 E5 85 F1 | 	sub	objptr, ##34792
1be98     F2 FA 01 F6 | 	mov	result1, objptr
1be9c     00 D0 01 FF 
1bea0     00 FA 45 F5 | 	or	result1, ##60817408
1bea4     44 00 00 FF 
1bea8     00 E4 05 F1 | 	add	objptr, ##34816
1beac     F2 FA 61 FC | 	wrlong	result1, objptr
1beb0     44 00 00 FF 
1beb4     00 E4 85 F1 | 	sub	objptr, ##34816
1beb8     F2 FA 01 F6 | 	mov	result1, objptr
1bebc     00 D8 01 FF 
1bec0     00 FA 45 F5 | 	or	result1, ##61865984
1bec4     44 00 00 FF 
1bec8     04 E4 05 F1 | 	add	objptr, ##34820
1becc     F2 FA 61 FC | 	wrlong	result1, objptr
1bed0     44 00 00 FF 
1bed4     04 E4 85 F1 | 	sub	objptr, ##34820
1bed8     F2 FA 01 F6 | 	mov	result1, objptr
1bedc     76 FA 25 F4 | 	bith	result1, #118
1bee0     43 00 00 FF 
1bee4     F0 E5 05 F1 | 	add	objptr, ##34800
1bee8     F2 FA 61 FC | 	wrlong	result1, objptr
1beec     43 00 00 FF 
1bef0     F0 E5 85 F1 | 	sub	objptr, ##34800
1bef4     F2 FA 01 F6 | 	mov	result1, objptr
1bef8     00 E8 01 FF 
1befc     00 FA 45 F5 | 	or	result1, ##63963136
1bf00     43 00 00 FF 
1bf04     F4 E5 05 F1 | 	add	objptr, ##34804
1bf08     F2 FA 61 FC | 	wrlong	result1, objptr
1bf0c     43 00 00 FF 
1bf10     F4 E5 85 F1 | 	sub	objptr, ##34804
1bf14     F2 FA 01 F6 | 	mov	result1, objptr
1bf18     95 FA 25 F4 | 	bith	result1, #149
1bf1c     43 00 00 FF 
1bf20     F8 E5 05 F1 | 	add	objptr, ##34808
1bf24     F2 FA 61 FC | 	wrlong	result1, objptr
1bf28     43 00 00 FF 
1bf2c     F8 E5 85 F1 | 	sub	objptr, ##34808
1bf30     F2 FA 01 F6 | 	mov	result1, objptr
1bf34     B4 FA 25 F4 | 	bith	result1, #180
1bf38     43 00 00 FF 
1bf3c     FC E5 05 F1 | 	add	objptr, ##34812
1bf40     F2 FA 61 FC | 	wrlong	result1, objptr
1bf44     43 00 00 FF 
1bf48     FC E5 85 F1 | 	sub	objptr, ##34812
1bf4c     F2 FA 01 F6 | 	mov	result1, objptr
1bf50     1A FA 25 F4 | 	bith	result1, #26
1bf54     44 00 00 FF 
1bf58     0C E4 05 F1 | 	add	objptr, ##34828
1bf5c     F2 FA 61 FC | 	wrlong	result1, objptr
1bf60     44 00 00 FF 
1bf64     0C E4 85 F1 | 	sub	objptr, ##34828
1bf68     F2 FA 01 F6 | 	mov	result1, objptr
1bf6c     00 08 02 FF 
1bf70     00 FA 45 F5 | 	or	result1, ##68157440
1bf74     44 00 00 FF 
1bf78     08 E4 05 F1 | 	add	objptr, ##34824
1bf7c     F2 FA 61 FC | 	wrlong	result1, objptr
1bf80     44 00 00 FF 
1bf84     08 E4 85 F1 | 	sub	objptr, ##34824
1bf88     F2 FA 01 F6 | 	mov	result1, objptr
1bf8c     00 10 02 FF 
1bf90     00 FA 45 F5 | 	or	result1, ##69206016
1bf94     44 00 00 FF 
1bf98     18 E4 05 F1 | 	add	objptr, ##34840
1bf9c     F2 FA 61 FC | 	wrlong	result1, objptr
1bfa0     44 00 00 FF 
1bfa4     18 E4 85 F1 | 	sub	objptr, ##34840
1bfa8     F2 FA 01 F6 | 	mov	result1, objptr
1bfac     00 18 02 FF 
1bfb0     00 FA 45 F5 | 	or	result1, ##70254592
1bfb4     44 00 00 FF 
1bfb8     14 E4 05 F1 | 	add	objptr, ##34836
1bfbc     F2 FA 61 FC | 	wrlong	result1, objptr
1bfc0     44 00 00 FF 
1bfc4     14 E4 85 F1 | 	sub	objptr, ##34836
1bfc8     F2 FA 01 F6 | 	mov	result1, objptr
1bfcc     00 20 02 FF 
1bfd0     00 FA 45 F5 | 	or	result1, ##71303168
1bfd4     44 00 00 FF 
1bfd8     10 E4 05 F1 | 	add	objptr, ##34832
1bfdc     F2 FA 61 FC | 	wrlong	result1, objptr
1bfe0     44 00 00 FF 
1bfe4     10 E4 85 F1 | 	sub	objptr, ##34832
1bfe8     F2 FA 01 F6 | 	mov	result1, objptr
1bfec     00 28 02 FF 
1bff0     00 FA 45 F5 | 	or	result1, ##72351744
1bff4     44 00 00 FF 
1bff8     1C E4 05 F1 | 	add	objptr, ##34844
1bffc     F2 FA 61 FC | 	wrlong	result1, objptr
1c000     44 00 00 FF 
1c004     1C E4 85 F1 | 	sub	objptr, ##34844
1c008     F2 FA 01 F6 | 	mov	result1, objptr
1c00c     00 30 02 FF 
1c010     00 FA 45 F5 | 	or	result1, ##73400320
1c014     44 00 00 FF 
1c018     20 E4 05 F1 | 	add	objptr, ##34848
1c01c     F2 FA 61 FC | 	wrlong	result1, objptr
1c020     44 00 00 FF 
1c024     20 E4 85 F1 | 	sub	objptr, ##34848
1c028     F2 FA 01 F6 | 	mov	result1, objptr
1c02c     00 38 02 FF 
1c030     00 FA 45 F5 | 	or	result1, ##74448896
1c034     43 00 00 FF 
1c038     B4 E4 05 F1 | 	add	objptr, ##34484
1c03c     F2 FA 61 FC | 	wrlong	result1, objptr
1c040     43 00 00 FF 
1c044     B4 E4 85 F1 | 	sub	objptr, ##34484
1c048     F2 FA 01 F6 | 	mov	result1, objptr
1c04c     00 40 02 FF 
1c050     00 FA 45 F5 | 	or	result1, ##75497472
1c054     44 00 00 FF 
1c058     38 E4 05 F1 | 	add	objptr, ##34872
1c05c     F2 FA 61 FC | 	wrlong	result1, objptr
1c060     44 00 00 FF 
1c064     38 E4 85 F1 | 	sub	objptr, ##34872
1c068     F2 FA 01 F6 | 	mov	result1, objptr
1c06c     00 48 02 FF 
1c070     00 FA 45 F5 | 	or	result1, ##76546048
1c074     44 00 00 FF 
1c078     48 E4 05 F1 | 	add	objptr, ##34888
1c07c     F2 FA 61 FC | 	wrlong	result1, objptr
1c080     44 00 00 FF 
1c084     48 E4 85 F1 | 	sub	objptr, ##34888
1c088     F2 FA 01 F6 | 	mov	result1, objptr
1c08c     00 50 02 FF 
1c090     00 FA 45 F5 | 	or	result1, ##77594624
1c094     44 00 00 FF 
1c098     4C E4 05 F1 | 	add	objptr, ##34892
1c09c     F2 FA 61 FC | 	wrlong	result1, objptr
1c0a0     44 00 00 FF 
1c0a4     4C E4 85 F1 | 	sub	objptr, ##34892
1c0a8     F2 FA 01 F6 | 	mov	result1, objptr
1c0ac     00 58 02 FF 
1c0b0     00 FA 45 F5 | 	or	result1, ##78643200
1c0b4     44 00 00 FF 
1c0b8     44 E4 05 F1 | 	add	objptr, ##34884
1c0bc     F2 FA 61 FC | 	wrlong	result1, objptr
1c0c0     44 00 00 FF 
1c0c4     44 E4 85 F1 | 	sub	objptr, ##34884
1c0c8     F2 FA 01 F6 | 	mov	result1, objptr
1c0cc     00 60 02 FF 
1c0d0     00 FA 45 F5 | 	or	result1, ##79691776
1c0d4     44 00 00 FF 
1c0d8     3C E4 05 F1 | 	add	objptr, ##34876
1c0dc     F2 FA 61 FC | 	wrlong	result1, objptr
1c0e0     44 00 00 FF 
1c0e4     3C E4 85 F1 | 	sub	objptr, ##34876
1c0e8     F2 FA 01 F6 | 	mov	result1, objptr
1c0ec     00 68 02 FF 
1c0f0     00 FA 45 F5 | 	or	result1, ##80740352
1c0f4     44 00 00 FF 
1c0f8     40 E4 05 F1 | 	add	objptr, ##34880
1c0fc     F2 FA 61 FC | 	wrlong	result1, objptr
1c100     44 00 00 FF 
1c104     40 E4 85 F1 | 	sub	objptr, ##34880
1c108     F2 FA 01 F6 | 	mov	result1, objptr
1c10c     00 70 02 FF 
1c110     00 FA 45 F5 | 	or	result1, ##81788928
1c114     44 00 00 FF 
1c118     50 E4 05 F1 | 	add	objptr, ##34896
1c11c     F2 FA 61 FC | 	wrlong	result1, objptr
1c120     44 00 00 FF 
1c124     50 E4 85 F1 | 	sub	objptr, ##34896
1c128     F2 FA 01 F6 | 	mov	result1, objptr
1c12c     00 78 02 FF 
1c130     00 FA 45 F5 | 	or	result1, ##82837504
1c134     44 00 00 FF 
1c138     54 E4 05 F1 | 	add	objptr, ##34900
1c13c     F2 FA 61 FC | 	wrlong	result1, objptr
1c140     44 00 00 FF 
1c144     54 E4 85 F1 | 	sub	objptr, ##34900
1c148     F2 FA 01 F6 | 	mov	result1, objptr
1c14c     00 80 02 FF 
1c150     00 FA 45 F5 | 	or	result1, ##83886080
1c154     44 00 00 FF 
1c158     58 E4 05 F1 | 	add	objptr, ##34904
1c15c     F2 FA 61 FC | 	wrlong	result1, objptr
1c160     44 00 00 FF 
1c164     58 E4 85 F1 | 	sub	objptr, ##34904
1c168     F2 FA 01 F6 | 	mov	result1, objptr
1c16c     00 88 02 FF 
1c170     00 FA 45 F5 | 	or	result1, ##84934656
1c174     44 00 00 FF 
1c178     5C E4 05 F1 | 	add	objptr, ##34908
1c17c     F2 FA 61 FC | 	wrlong	result1, objptr
1c180     44 00 00 FF 
1c184     5C E4 85 F1 | 	sub	objptr, ##34908
1c188     F2 FA 01 F6 | 	mov	result1, objptr
1c18c     00 90 02 FF 
1c190     00 FA 45 F5 | 	or	result1, ##85983232
1c194     44 00 00 FF 
1c198     60 E4 05 F1 | 	add	objptr, ##34912
1c19c     F2 FA 61 FC | 	wrlong	result1, objptr
1c1a0     44 00 00 FF 
1c1a4     60 E4 85 F1 | 	sub	objptr, ##34912
1c1a8     F2 FA 01 F6 | 	mov	result1, objptr
1c1ac     00 98 02 FF 
1c1b0     00 FA 45 F5 | 	or	result1, ##87031808
1c1b4     44 00 00 FF 
1c1b8     64 E4 05 F1 | 	add	objptr, ##34916
1c1bc     F2 FA 61 FC | 	wrlong	result1, objptr
1c1c0     44 00 00 FF 
1c1c4     64 E4 85 F1 | 	sub	objptr, ##34916
1c1c8     F2 FA 01 F6 | 	mov	result1, objptr
1c1cc     00 A0 02 FF 
1c1d0     00 FA 45 F5 | 	or	result1, ##88080384
1c1d4     44 00 00 FF 
1c1d8     68 E4 05 F1 | 	add	objptr, ##34920
1c1dc     F2 FA 61 FC | 	wrlong	result1, objptr
1c1e0     44 00 00 FF 
1c1e4     68 E4 85 F1 | 	sub	objptr, ##34920
1c1e8     F2 FA 01 F6 | 	mov	result1, objptr
1c1ec     00 A8 02 FF 
1c1f0     00 FA 45 F5 | 	or	result1, ##89128960
1c1f4     44 00 00 FF 
1c1f8     6C E4 05 F1 | 	add	objptr, ##34924
1c1fc     F2 FA 61 FC | 	wrlong	result1, objptr
1c200     44 00 00 FF 
1c204     6C E4 85 F1 | 	sub	objptr, ##34924
1c208     F2 FA 01 F6 | 	mov	result1, objptr
1c20c     00 B0 02 FF 
1c210     00 FA 45 F5 | 	or	result1, ##90177536
1c214     44 00 00 FF 
1c218     78 E4 05 F1 | 	add	objptr, ##34936
1c21c     F2 FA 61 FC | 	wrlong	result1, objptr
1c220     44 00 00 FF 
1c224     78 E4 85 F1 | 	sub	objptr, ##34936
1c228     F2 FA 01 F6 | 	mov	result1, objptr
1c22c     00 B8 02 FF 
1c230     00 FA 45 F5 | 	or	result1, ##91226112
1c234     44 00 00 FF 
1c238     70 E4 05 F1 | 	add	objptr, ##34928
1c23c     F2 FA 61 FC | 	wrlong	result1, objptr
1c240     44 00 00 FF 
1c244     70 E4 85 F1 | 	sub	objptr, ##34928
1c248     F2 FA 01 F6 | 	mov	result1, objptr
1c24c     00 C0 02 FF 
1c250     00 FA 45 F5 | 	or	result1, ##92274688
1c254     44 00 00 FF 
1c258     74 E4 05 F1 | 	add	objptr, ##34932
1c25c     F2 FA 61 FC | 	wrlong	result1, objptr
1c260     44 00 00 FF 
1c264     74 E4 85 F1 | 	sub	objptr, ##34932
1c268     F2 FA 01 F6 | 	mov	result1, objptr
1c26c     00 C8 02 FF 
1c270     00 FA 45 F5 | 	or	result1, ##93323264
1c274     44 00 00 FF 
1c278     7C E4 05 F1 | 	add	objptr, ##34940
1c27c     F2 FA 61 FC | 	wrlong	result1, objptr
1c280     44 00 00 FF 
1c284     7C E4 85 F1 | 	sub	objptr, ##34940
1c288     F2 FA 01 F6 | 	mov	result1, objptr
1c28c     00 D0 02 FF 
1c290     00 FA 45 F5 | 	or	result1, ##94371840
1c294     44 00 00 FF 
1c298     24 E4 05 F1 | 	add	objptr, ##34852
1c29c     F2 FA 61 FC | 	wrlong	result1, objptr
1c2a0     44 00 00 FF 
1c2a4     24 E4 85 F1 | 	sub	objptr, ##34852
1c2a8     F2 FA 01 F6 | 	mov	result1, objptr
1c2ac     00 D8 02 FF 
1c2b0     00 FA 45 F5 | 	or	result1, ##95420416
1c2b4     44 00 00 FF 
1c2b8     2C E4 05 F1 | 	add	objptr, ##34860
1c2bc     F2 FA 61 FC | 	wrlong	result1, objptr
1c2c0     44 00 00 FF 
1c2c4     2C E4 85 F1 | 	sub	objptr, ##34860
1c2c8     F2 FA 01 F6 | 	mov	result1, objptr
1c2cc     00 E0 02 FF 
1c2d0     00 FA 45 F5 | 	or	result1, ##96468992
1c2d4     44 00 00 FF 
1c2d8     30 E4 05 F1 | 	add	objptr, ##34864
1c2dc     F2 FA 61 FC | 	wrlong	result1, objptr
1c2e0     44 00 00 FF 
1c2e4     30 E4 85 F1 | 	sub	objptr, ##34864
1c2e8     F2 FA 01 F6 | 	mov	result1, objptr
1c2ec     00 E8 02 FF 
1c2f0     00 FA 45 F5 | 	or	result1, ##97517568
1c2f4     44 00 00 FF 
1c2f8     80 E4 05 F1 | 	add	objptr, ##34944
1c2fc     F2 FA 61 FC | 	wrlong	result1, objptr
1c300     44 00 00 FF 
1c304     80 E4 85 F1 | 	sub	objptr, ##34944
1c308     F2 FA 01 F6 | 	mov	result1, objptr
1c30c     00 F0 02 FF 
1c310     00 FA 45 F5 | 	or	result1, ##98566144
1c314     44 00 00 FF 
1c318     84 E4 05 F1 | 	add	objptr, ##34948
1c31c     F2 FA 61 FC | 	wrlong	result1, objptr
1c320     44 00 00 FF 
1c324     84 E4 85 F1 | 	sub	objptr, ##34948
1c328     F2 FA 01 F6 | 	mov	result1, objptr
1c32c     00 F8 02 FF 
1c330     00 FA 45 F5 | 	or	result1, ##99614720
1c334     44 00 00 FF 
1c338     88 E4 05 F1 | 	add	objptr, ##34952
1c33c     F2 FA 61 FC | 	wrlong	result1, objptr
1c340     44 00 00 FF 
1c344     88 E4 85 F1 | 	sub	objptr, ##34952
1c348     F2 FA 01 F6 | 	mov	result1, objptr
1c34c     39 FA 25 F4 | 	bith	result1, #57
1c350     44 00 00 FF 
1c354     34 E4 05 F1 | 	add	objptr, ##34868
1c358     F2 FA 61 FC | 	wrlong	result1, objptr
1c35c     44 00 00 FF 
1c360     34 E4 85 F1 | 	sub	objptr, ##34868
1c364     F2 FA 01 F6 | 	mov	result1, objptr
1c368     00 08 03 FF 
1c36c     00 FA 45 F5 | 	or	result1, ##101711872
1c370     44 00 00 FF 
1c374     98 E4 05 F1 | 	add	objptr, ##34968
1c378     F2 FA 61 FC | 	wrlong	result1, objptr
1c37c     44 00 00 FF 
1c380     98 E4 85 F1 | 	sub	objptr, ##34968
1c384     F2 FA 01 F6 | 	mov	result1, objptr
1c388     00 10 03 FF 
1c38c     00 FA 45 F5 | 	or	result1, ##102760448
1c390     44 00 00 FF 
1c394     A0 E4 05 F1 | 	add	objptr, ##34976
1c398     F2 FA 61 FC | 	wrlong	result1, objptr
1c39c     44 00 00 FF 
1c3a0     A0 E4 85 F1 | 	sub	objptr, ##34976
1c3a4     F2 FA 01 F6 | 	mov	result1, objptr
1c3a8     00 18 03 FF 
1c3ac     00 FA 45 F5 | 	or	result1, ##103809024
1c3b0     44 00 00 FF 
1c3b4     94 E4 05 F1 | 	add	objptr, ##34964
1c3b8     F2 FA 61 FC | 	wrlong	result1, objptr
1c3bc     44 00 00 FF 
1c3c0     94 E4 85 F1 | 	sub	objptr, ##34964
1c3c4     F2 FA 01 F6 | 	mov	result1, objptr
1c3c8     00 20 03 FF 
1c3cc     00 FA 45 F5 | 	or	result1, ##104857600
1c3d0     44 00 00 FF 
1c3d4     90 E4 05 F1 | 	add	objptr, ##34960
1c3d8     F2 FA 61 FC | 	wrlong	result1, objptr
1c3dc     44 00 00 FF 
1c3e0     90 E4 85 F1 | 	sub	objptr, ##34960
1c3e4     F2 FA 01 F6 | 	mov	result1, objptr
1c3e8     00 28 03 FF 
1c3ec     00 FA 45 F5 | 	or	result1, ##105906176
1c3f0     44 00 00 FF 
1c3f4     8C E4 05 F1 | 	add	objptr, ##34956
1c3f8     F2 FA 61 FC | 	wrlong	result1, objptr
1c3fc     44 00 00 FF 
1c400     8C E4 85 F1 | 	sub	objptr, ##34956
1c404     F2 FA 01 F6 | 	mov	result1, objptr
1c408     00 30 03 FF 
1c40c     00 FA 45 F5 | 	or	result1, ##106954752
1c410     44 00 00 FF 
1c414     9C E4 05 F1 | 	add	objptr, ##34972
1c418     F2 FA 61 FC | 	wrlong	result1, objptr
1c41c     44 00 00 FF 
1c420     9C E4 85 F1 | 	sub	objptr, ##34972
1c424     F2 FA 01 F6 | 	mov	result1, objptr
1c428     00 38 03 FF 
1c42c     00 FA 45 F5 | 	or	result1, ##108003328
1c430     44 00 00 FF 
1c434     A4 E4 05 F1 | 	add	objptr, ##34980
1c438     F2 FA 61 FC | 	wrlong	result1, objptr
1c43c     44 00 00 FF 
1c440     A4 E4 85 F1 | 	sub	objptr, ##34980
1c444     F2 FA 01 F6 | 	mov	result1, objptr
1c448     00 40 03 FF 
1c44c     00 FA 45 F5 | 	or	result1, ##109051904
1c450     44 00 00 FF 
1c454     A8 E4 05 F1 | 	add	objptr, ##34984
1c458     F2 FA 61 FC | 	wrlong	result1, objptr
1c45c     44 00 00 FF 
1c460     A8 E4 85 F1 | 	sub	objptr, ##34984
1c464     F2 FA 01 F6 | 	mov	result1, objptr
1c468     00 48 03 FF 
1c46c     00 FA 45 F5 | 	or	result1, ##110100480
1c470     44 00 00 FF 
1c474     AC E4 05 F1 | 	add	objptr, ##34988
1c478     F2 FA 61 FC | 	wrlong	result1, objptr
1c47c     44 00 00 FF 
1c480     AC E4 85 F1 | 	sub	objptr, ##34988
1c484     F2 FA 01 F6 | 	mov	result1, objptr
1c488     00 50 03 FF 
1c48c     00 FA 45 F5 | 	or	result1, ##111149056
1c490     44 00 00 FF 
1c494     B4 E4 05 F1 | 	add	objptr, ##34996
1c498     F2 FA 61 FC | 	wrlong	result1, objptr
1c49c     44 00 00 FF 
1c4a0     B4 E4 85 F1 | 	sub	objptr, ##34996
1c4a4     F2 FA 01 F6 | 	mov	result1, objptr
1c4a8     00 58 03 FF 
1c4ac     00 FA 45 F5 | 	or	result1, ##112197632
1c4b0     44 00 00 FF 
1c4b4     B8 E4 05 F1 | 	add	objptr, ##35000
1c4b8     F2 FA 61 FC | 	wrlong	result1, objptr
1c4bc     44 00 00 FF 
1c4c0     B8 E4 85 F1 | 	sub	objptr, ##35000
1c4c4     F2 FA 01 F6 | 	mov	result1, objptr
1c4c8     00 60 03 FF 
1c4cc     00 FA 45 F5 | 	or	result1, ##113246208
1c4d0     44 00 00 FF 
1c4d4     BC E4 05 F1 | 	add	objptr, ##35004
1c4d8     F2 FA 61 FC | 	wrlong	result1, objptr
1c4dc     44 00 00 FF 
1c4e0     BC E4 85 F1 | 	sub	objptr, ##35004
1c4e4     F2 FA 01 F6 | 	mov	result1, objptr
1c4e8     00 68 03 FF 
1c4ec     00 FA 45 F5 | 	or	result1, ##114294784
1c4f0     44 00 00 FF 
1c4f4     C0 E4 05 F1 | 	add	objptr, ##35008
1c4f8     F2 FA 61 FC | 	wrlong	result1, objptr
1c4fc     44 00 00 FF 
1c500     C0 E4 85 F1 | 	sub	objptr, ##35008
1c504     F2 FA 01 F6 | 	mov	result1, objptr
1c508     00 70 03 FF 
1c50c     00 FA 45 F5 | 	or	result1, ##115343360
1c510     44 00 00 FF 
1c514     C4 E4 05 F1 | 	add	objptr, ##35012
1c518     F2 FA 61 FC | 	wrlong	result1, objptr
1c51c     44 00 00 FF 
1c520     C4 E4 85 F1 | 	sub	objptr, ##35012
1c524     F2 FA 01 F6 | 	mov	result1, objptr
1c528     00 78 03 FF 
1c52c     00 FA 45 F5 | 	or	result1, ##116391936
1c530     44 00 00 FF 
1c534     C8 E4 05 F1 | 	add	objptr, ##35016
1c538     F2 FA 61 FC | 	wrlong	result1, objptr
1c53c     44 00 00 FF 
1c540     C8 E4 85 F1 | 	sub	objptr, ##35016
1c544     F2 FA 01 F6 | 	mov	result1, objptr
1c548     58 FA 25 F4 | 	bith	result1, #88
1c54c     44 00 00 FF 
1c550     CC E4 05 F1 | 	add	objptr, ##35020
1c554     F2 FA 61 FC | 	wrlong	result1, objptr
1c558     44 00 00 FF 
1c55c     CC E4 85 F1 | 	sub	objptr, ##35020
1c560     F2 FA 01 F6 | 	mov	result1, objptr
1c564     00 88 03 FF 
1c568     00 FA 45 F5 | 	or	result1, ##118489088
1c56c     44 00 00 FF 
1c570     D0 E4 05 F1 | 	add	objptr, ##35024
1c574     F2 FA 61 FC | 	wrlong	result1, objptr
1c578     44 00 00 FF 
1c57c     D0 E4 85 F1 | 	sub	objptr, ##35024
1c580     F2 FA 01 F6 | 	mov	result1, objptr
1c584     00 90 03 FF 
1c588     00 FA 45 F5 | 	or	result1, ##119537664
1c58c     44 00 00 FF 
1c590     B0 E4 05 F1 | 	add	objptr, ##34992
1c594     F2 FA 61 FC | 	wrlong	result1, objptr
1c598     44 00 00 FF 
1c59c     B0 E4 85 F1 | 	sub	objptr, ##34992
1c5a0     F2 FA 01 F6 | 	mov	result1, objptr
1c5a4     00 98 03 FF 
1c5a8     00 FA 45 F5 | 	or	result1, ##120586240
1c5ac     43 00 00 FF 
1c5b0     A8 E4 05 F1 | 	add	objptr, ##34472
1c5b4     F2 FA 61 FC | 	wrlong	result1, objptr
1c5b8     43 00 00 FF 
1c5bc     A8 E4 85 F1 | 	sub	objptr, ##34472
1c5c0     F2 FA 01 F6 | 	mov	result1, objptr
1c5c4     00 A0 03 FF 
1c5c8     00 FA 45 F5 | 	or	result1, ##121634816
1c5cc     44 00 00 FF 
1c5d0     D4 E4 05 F1 | 	add	objptr, ##35028
1c5d4     F2 FA 61 FC | 	wrlong	result1, objptr
1c5d8     44 00 00 FF 
1c5dc     D4 E4 85 F1 | 	sub	objptr, ##35028
1c5e0     F2 FA 01 F6 | 	mov	result1, objptr
1c5e4     00 A8 03 FF 
1c5e8     00 FA 45 F5 | 	or	result1, ##122683392
1c5ec     44 00 00 FF 
1c5f0     D8 E4 05 F1 | 	add	objptr, ##35032
1c5f4     F2 FA 61 FC | 	wrlong	result1, objptr
1c5f8     44 00 00 FF 
1c5fc     D8 E4 85 F1 | 	sub	objptr, ##35032
1c600     F2 FA 01 F6 | 	mov	result1, objptr
1c604     00 B0 03 FF 
1c608     00 FA 45 F5 | 	or	result1, ##123731968
1c60c     44 00 00 FF 
1c610     EC E4 05 F1 | 	add	objptr, ##35052
1c614     F2 FA 61 FC | 	wrlong	result1, objptr
1c618     44 00 00 FF 
1c61c     EC E4 85 F1 | 	sub	objptr, ##35052
1c620     F2 FA 01 F6 | 	mov	result1, objptr
1c624     00 B8 03 FF 
1c628     00 FA 45 F5 | 	or	result1, ##124780544
1c62c     44 00 00 FF 
1c630     E8 E4 05 F1 | 	add	objptr, ##35048
1c634     F2 FA 61 FC | 	wrlong	result1, objptr
1c638     44 00 00 FF 
1c63c     E8 E4 85 F1 | 	sub	objptr, ##35048
1c640     F2 FA 01 F6 | 	mov	result1, objptr
1c644     77 FA 25 F4 | 	bith	result1, #119
1c648     44 00 00 FF 
1c64c     E0 E4 05 F1 | 	add	objptr, ##35040
1c650     F2 FA 61 FC | 	wrlong	result1, objptr
1c654     44 00 00 FF 
1c658     E0 E4 85 F1 | 	sub	objptr, ##35040
1c65c     F2 FA 01 F6 | 	mov	result1, objptr
1c660     00 C8 03 FF 
1c664     00 FA 45 F5 | 	or	result1, ##126877696
1c668     44 00 00 FF 
1c66c     DC E4 05 F1 | 	add	objptr, ##35036
1c670     F2 FA 61 FC | 	wrlong	result1, objptr
1c674     44 00 00 FF 
1c678     DC E4 85 F1 | 	sub	objptr, ##35036
1c67c     F2 FA 01 F6 | 	mov	result1, objptr
1c680     00 D0 03 FF 
1c684     00 FA 45 F5 | 	or	result1, ##127926272
1c688     44 00 00 FF 
1c68c     FC E4 05 F1 | 	add	objptr, ##35068
1c690     F2 FA 61 FC | 	wrlong	result1, objptr
1c694     44 00 00 FF 
1c698     FC E4 85 F1 | 	sub	objptr, ##35068
1c69c     F2 FA 01 F6 | 	mov	result1, objptr
1c6a0     00 D8 03 FF 
1c6a4     00 FA 45 F5 | 	or	result1, ##128974848
1c6a8     44 00 00 FF 
1c6ac     F0 E4 05 F1 | 	add	objptr, ##35056
1c6b0     F2 FA 61 FC | 	wrlong	result1, objptr
1c6b4     44 00 00 FF 
1c6b8     F0 E4 85 F1 | 	sub	objptr, ##35056
1c6bc     F2 FA 01 F6 | 	mov	result1, objptr
1c6c0     96 FA 25 F4 | 	bith	result1, #150
1c6c4     44 00 00 FF 
1c6c8     F4 E4 05 F1 | 	add	objptr, ##35060
1c6cc     F2 FA 61 FC | 	wrlong	result1, objptr
1c6d0     44 00 00 FF 
1c6d4     F4 E4 85 F1 | 	sub	objptr, ##35060
1c6d8     F2 FA 01 F6 | 	mov	result1, objptr
1c6dc     00 E8 03 FF 
1c6e0     00 FA 45 F5 | 	or	result1, ##131072000
1c6e4     44 00 00 FF 
1c6e8     F8 E4 05 F1 | 	add	objptr, ##35064
1c6ec     F2 FA 61 FC | 	wrlong	result1, objptr
1c6f0     44 00 00 FF 
1c6f4     F8 E4 85 F1 | 	sub	objptr, ##35064
1c6f8     F2 FA 01 F6 | 	mov	result1, objptr
1c6fc     B5 FA 25 F4 | 	bith	result1, #181
1c700     44 00 00 FF 
1c704     00 E5 05 F1 | 	add	objptr, ##35072
1c708     F2 FA 61 FC | 	wrlong	result1, objptr
1c70c     44 00 00 FF 
1c710     00 E5 85 F1 | 	sub	objptr, ##35072
1c714     F2 FA 01 F6 | 	mov	result1, objptr
1c718     D4 FA 25 F4 | 	bith	result1, #212
1c71c     44 00 00 FF 
1c720     04 E5 05 F1 | 	add	objptr, ##35076
1c724     F2 FA 61 FC | 	wrlong	result1, objptr
1c728     44 00 00 FF 
1c72c     04 E5 85 F1 | 	sub	objptr, ##35076
1c730     F2 FA 01 F6 | 	mov	result1, objptr
1c734     1B FA 25 F4 | 	bith	result1, #27
1c738     44 00 00 FF 
1c73c     08 E5 05 F1 | 	add	objptr, ##35080
1c740     F2 FA 61 FC | 	wrlong	result1, objptr
1c744     44 00 00 FF 
1c748     08 E5 85 F1 | 	sub	objptr, ##35080
1c74c     F2 FA 01 F6 | 	mov	result1, objptr
1c750     00 08 04 FF 
1c754     00 FA 45 F5 | 	or	result1, ##135266304
1c758     44 00 00 FF 
1c75c     0C E5 05 F1 | 	add	objptr, ##35084
1c760     F2 FA 61 FC | 	wrlong	result1, objptr
1c764     44 00 00 FF 
1c768     0C E5 85 F1 | 	sub	objptr, ##35084
1c76c     F2 FA 01 F6 | 	mov	result1, objptr
1c770     00 10 04 FF 
1c774     00 FA 45 F5 | 	or	result1, ##136314880
1c778     44 00 00 FF 
1c77c     10 E5 05 F1 | 	add	objptr, ##35088
1c780     F2 FA 61 FC | 	wrlong	result1, objptr
1c784     44 00 00 FF 
1c788     10 E5 85 F1 | 	sub	objptr, ##35088
1c78c     F2 FA 01 F6 | 	mov	result1, objptr
1c790     00 18 04 FF 
1c794     00 FA 45 F5 | 	or	result1, ##137363456
1c798     44 00 00 FF 
1c79c     14 E5 05 F1 | 	add	objptr, ##35092
1c7a0     F2 FA 61 FC | 	wrlong	result1, objptr
1c7a4     44 00 00 FF 
1c7a8     14 E5 85 F1 | 	sub	objptr, ##35092
1c7ac     F2 FA 01 F6 | 	mov	result1, objptr
1c7b0     00 20 04 FF 
1c7b4     00 FA 45 F5 | 	or	result1, ##138412032
1c7b8     44 00 00 FF 
1c7bc     1C E5 05 F1 | 	add	objptr, ##35100
1c7c0     F2 FA 61 FC | 	wrlong	result1, objptr
1c7c4     44 00 00 FF 
1c7c8     1C E5 85 F1 | 	sub	objptr, ##35100
1c7cc     F2 FA 01 F6 | 	mov	result1, objptr
1c7d0     00 28 04 FF 
1c7d4     00 FA 45 F5 | 	or	result1, ##139460608
1c7d8     44 00 00 FF 
1c7dc     20 E5 05 F1 | 	add	objptr, ##35104
1c7e0     F2 FA 61 FC | 	wrlong	result1, objptr
1c7e4     44 00 00 FF 
1c7e8     20 E5 85 F1 | 	sub	objptr, ##35104
1c7ec     F2 FA 01 F6 | 	mov	result1, objptr
1c7f0     00 30 04 FF 
1c7f4     00 FA 45 F5 | 	or	result1, ##140509184
1c7f8     44 00 00 FF 
1c7fc     24 E5 05 F1 | 	add	objptr, ##35108
1c800     F2 FA 61 FC | 	wrlong	result1, objptr
1c804     44 00 00 FF 
1c808     24 E5 85 F1 | 	sub	objptr, ##35108
1c80c     F2 FA 01 F6 | 	mov	result1, objptr
1c810     00 38 04 FF 
1c814     00 FA 45 F5 | 	or	result1, ##141557760
1c818     44 00 00 FF 
1c81c     18 E5 05 F1 | 	add	objptr, ##35096
1c820     F2 FA 61 FC | 	wrlong	result1, objptr
1c824     44 00 00 FF 
1c828     18 E5 85 F1 | 	sub	objptr, ##35096
1c82c     F2 FA 01 F6 | 	mov	result1, objptr
1c830     00 40 04 FF 
1c834     00 FA 45 F5 | 	or	result1, ##142606336
1c838     44 00 00 FF 
1c83c     28 E5 05 F1 | 	add	objptr, ##35112
1c840     F2 FA 61 FC | 	wrlong	result1, objptr
1c844     44 00 00 FF 
1c848     28 E5 85 F1 | 	sub	objptr, ##35112
1c84c     F2 FA 01 F6 | 	mov	result1, objptr
1c850     00 48 04 FF 
1c854     00 FA 45 F5 | 	or	result1, ##143654912
1c858     44 00 00 FF 
1c85c     5C E5 05 F1 | 	add	objptr, ##35164
1c860     F2 FA 61 FC | 	wrlong	result1, objptr
1c864     44 00 00 FF 
1c868     5C E5 85 F1 | 	sub	objptr, ##35164
1c86c     F2 FA 01 F6 | 	mov	result1, objptr
1c870     00 50 04 FF 
1c874     00 FA 45 F5 | 	or	result1, ##144703488
1c878     44 00 00 FF 
1c87c     54 E5 05 F1 | 	add	objptr, ##35156
1c880     F2 FA 61 FC | 	wrlong	result1, objptr
1c884     44 00 00 FF 
1c888     54 E5 85 F1 | 	sub	objptr, ##35156
1c88c     F2 FA 01 F6 | 	mov	result1, objptr
1c890     00 58 04 FF 
1c894     00 FA 45 F5 | 	or	result1, ##145752064
1c898     44 00 00 FF 
1c89c     2C E5 05 F1 | 	add	objptr, ##35116
1c8a0     F2 FA 61 FC | 	wrlong	result1, objptr
1c8a4     44 00 00 FF 
1c8a8     2C E5 85 F1 | 	sub	objptr, ##35116
1c8ac     F2 FA 01 F6 | 	mov	result1, objptr
1c8b0     00 60 04 FF 
1c8b4     00 FA 45 F5 | 	or	result1, ##146800640
1c8b8     44 00 00 FF 
1c8bc     30 E5 05 F1 | 	add	objptr, ##35120
1c8c0     F2 FA 61 FC | 	wrlong	result1, objptr
1c8c4     44 00 00 FF 
1c8c8     30 E5 85 F1 | 	sub	objptr, ##35120
1c8cc     F2 FA 01 F6 | 	mov	result1, objptr
1c8d0     00 68 04 FF 
1c8d4     00 FA 45 F5 | 	or	result1, ##147849216
1c8d8     44 00 00 FF 
1c8dc     4C E5 05 F1 | 	add	objptr, ##35148
1c8e0     F2 FA 61 FC | 	wrlong	result1, objptr
1c8e4     44 00 00 FF 
1c8e8     4C E5 85 F1 | 	sub	objptr, ##35148
1c8ec     F2 FA 01 F6 | 	mov	result1, objptr
1c8f0     00 70 04 FF 
1c8f4     00 FA 45 F5 | 	or	result1, ##148897792
1c8f8     44 00 00 FF 
1c8fc     50 E5 05 F1 | 	add	objptr, ##35152
1c900     F2 FA 61 FC | 	wrlong	result1, objptr
1c904     44 00 00 FF 
1c908     50 E5 85 F1 | 	sub	objptr, ##35152
1c90c                 | _init_commands_ret
1c90c     2D 00 64 FD | 	ret
1c910                 | 
1c910                 | ' 
1c910                 | ' ''--------------------------------Error strings -------------------------------------
1c910                 | ' sub init_audio
1c910                 | _init_audio
1c910     06 4A 05 F6 | 	mov	COUNT_, #6
1c914     A8 00 A0 FD | 	call	#pushregs_
1c918     00 C0 1F FF 
1c91c     00 1E 06 F6 | 	mov	local01, ##1065353216
1c920                 | ' 'for i=0 to 1023 : samplebuf(0,i)=round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1c920                 | ' 'for i=0 to 511  : samplebuf(1,i)= -32512+127*i: samplebuf(1,512+i)=-samplebuf(1,i) : next i   		' 1 : triangle 
1c920                 | ' 'for i=0 to 1023 : samplebuf(2,i)= -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1c920                 | ' 'for i=0 to 127  : samplebuf(3,i)= -32600 : next i : for i=128 to 1023 : samplebuf(3,i) =32600 : next i 	' 3 pulse 12.5%
1c920                 | ' 'for i=0 to 511  : samplebuf(4,i)= -32600 : next i : for i=512 to 1023 : samplebuf(4,i) =32600 : next i 	' 4 square
1c920                 | ' 'for i=0 to 255  : samplebuf(5,i)= -32600 : next i : for i=256 to 1023 : samplebuf(5,i) =32600 : next i 	' 5 pulse 25%
1c920                 | ' 'for i=0 to 1023 : samplebuf(6,i)= dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1c920                 | ' 'for i=0 to 1023 : samplebuf(7,i)= dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1c920                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1c920     00 20 06 F6 | 	mov	local02, #0
1c924                 | LR__2320
1c924     10 23 02 F6 | 	mov	local03, local02
1c928     01 22 66 F0 | 	shl	local03, #1
1c92c     58 7F 23 FF 
1c930     00 24 06 F6 | 	mov	local04, ##1191096320
1c934     10 13 52 F6 | 	abs	arg01, local02 wc
1c938     1F 26 C6 C9 |  if_b	decod	local05, #31
1c93c     00 26 06 36 |  if_ae	mov	local05, #0
1c940     54 69 B0 FD | 	call	#__system___float_fromuns
1c944     13 FB 61 F5 | 	xor	result1, local05
1c948     FD 12 02 F6 | 	mov	arg01, result1
1c94c     87 24 20 FF 
1c950     DB 15 06 F6 | 	mov	arg02, ##1078530011
1c954     44 6D B0 FD | 	call	#__system___float_mul
1c958     FD 12 02 F6 | 	mov	arg01, result1
1c95c     00 00 22 FF 
1c960     00 14 06 F6 | 	mov	arg02, ##1140850688
1c964     38 6F B0 FD | 	call	#__system___float_div
1c968     FD 12 02 F6 | 	mov	arg01, result1
1c96c     68 76 B0 FD | 	call	#__system____builtin_sinf
1c970     FD 14 02 F6 | 	mov	arg02, result1
1c974     12 13 02 F6 | 	mov	arg01, local04
1c978     20 6D B0 FD | 	call	#__system___float_mul
1c97c     FD 12 02 F6 | 	mov	arg01, result1
1c980     01 14 06 F6 | 	mov	arg02, #1
1c984     DC 71 B0 FD | 	call	#__system___float_tointeger
1c988     FD 14 02 F6 | 	mov	arg02, result1
1c98c     11 13 02 F6 | 	mov	arg01, local03
1c990     68 0D B0 FD | 	call	#_psdpoke
1c994     01 20 06 F1 | 	add	local02, #1
1c998     02 00 00 FF 
1c99c     00 20 56 F2 | 	cmps	local02, ##1024 wc
1c9a0     80 FF 9F CD |  if_b	jmp	#LR__2320
1c9a4                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
1c9a4     00 20 06 F6 | 	mov	local02, #0
1c9a8                 | LR__2321
1c9a8     10 15 02 F6 | 	mov	arg02, local02
1c9ac     01 14 66 F0 | 	shl	arg02, #1
1c9b0     0B 12 C6 F9 | 	decod	arg01, #11
1c9b4     0A 13 02 F1 | 	add	arg01, arg02
1c9b8     10 25 02 F6 | 	mov	local04, local02
1c9bc     07 24 66 F0 | 	shl	local04, #7
1c9c0     10 25 82 F1 | 	sub	local04, local02
1c9c4     C0 FF 7F FF 
1c9c8     00 15 06 F6 | 	mov	arg02, ##-32512
1c9cc     12 15 02 F1 | 	add	arg02, local04
1c9d0     28 0D B0 FD | 	call	#_psdpoke
1c9d4     09 24 C6 F9 | 	decod	local04, #9
1c9d8     10 25 02 F1 | 	add	local04, local02
1c9dc     01 24 66 F0 | 	shl	local04, #1
1c9e0     0B 12 C6 F9 | 	decod	arg01, #11
1c9e4     12 13 02 F1 | 	add	arg01, local04
1c9e8     10 27 02 F6 | 	mov	local05, local02
1c9ec     07 26 66 F0 | 	shl	local05, #7
1c9f0     10 27 82 F1 | 	sub	local05, local02
1c9f4     3F 00 00 FF 
1c9f8     00 15 06 F6 | 	mov	arg02, ##32512
1c9fc     13 15 82 F1 | 	sub	arg02, local05
1ca00     F8 0C B0 FD | 	call	#_psdpoke
1ca04     01 20 06 F1 | 	add	local02, #1
1ca08     01 00 00 FF 
1ca0c     00 20 56 F2 | 	cmps	local02, ##512 wc
1ca10     94 FF 9F CD |  if_b	jmp	#LR__2321
1ca14                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1ca14     00 20 06 F6 | 	mov	local02, #0
1ca18                 | LR__2322
1ca18     10 27 02 F6 | 	mov	local05, local02
1ca1c     01 26 66 F0 | 	shl	local05, #1
1ca20     0C 12 C6 F9 | 	decod	arg01, #12
1ca24     13 13 02 F1 | 	add	arg01, local05
1ca28     10 27 02 F6 | 	mov	local05, local02
1ca2c     06 26 66 F0 | 	shl	local05, #6
1ca30     10 27 82 F1 | 	sub	local05, local02
1ca34     C1 FF 7F FF 
1ca38     00 14 06 F6 | 	mov	arg02, ##-32256
1ca3c     13 15 02 F1 | 	add	arg02, local05
1ca40     B8 0C B0 FD | 	call	#_psdpoke
1ca44     01 20 06 F1 | 	add	local02, #1
1ca48     02 00 00 FF 
1ca4c     00 20 56 F2 | 	cmps	local02, ##1024 wc
1ca50     C4 FF 9F CD |  if_b	jmp	#LR__2322
1ca54                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
1ca54     00 20 06 F6 | 	mov	local02, #0
1ca58                 | LR__2323
1ca58     10 27 02 F6 | 	mov	local05, local02
1ca5c     01 26 66 F0 | 	shl	local05, #1
1ca60     0C 00 00 FF 
1ca64     00 12 06 F6 | 	mov	arg01, ##6144
1ca68     13 13 02 F1 | 	add	arg01, local05
1ca6c     C0 FF 7F FF 
1ca70     A8 14 06 F6 | 	mov	arg02, ##-32600
1ca74     84 0C B0 FD | 	call	#_psdpoke
1ca78     01 20 06 F1 | 	add	local02, #1
1ca7c     80 20 56 F2 | 	cmps	local02, #128 wc
1ca80     D4 FF 9F CD |  if_b	jmp	#LR__2323
1ca84     80 20 06 F6 | 	mov	local02, #128
1ca88                 | LR__2324
1ca88     10 27 02 F6 | 	mov	local05, local02
1ca8c     01 26 66 F0 | 	shl	local05, #1
1ca90     0C 00 00 FF 
1ca94     00 12 06 F6 | 	mov	arg01, ##6144
1ca98     13 13 02 F1 | 	add	arg01, local05
1ca9c     3F 00 00 FF 
1caa0     58 15 06 F6 | 	mov	arg02, ##32600
1caa4     54 0C B0 FD | 	call	#_psdpoke
1caa8     01 20 06 F1 | 	add	local02, #1
1caac     02 00 00 FF 
1cab0     00 20 16 F2 | 	cmp	local02, ##1024 wc
1cab4     D0 FF 9F CD |  if_b	jmp	#LR__2324
1cab8                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
1cab8     00 20 06 F6 | 	mov	local02, #0
1cabc                 | LR__2325
1cabc     10 27 02 F6 | 	mov	local05, local02
1cac0     01 26 66 F0 | 	shl	local05, #1
1cac4     0D 12 C6 F9 | 	decod	arg01, #13
1cac8     13 13 02 F1 | 	add	arg01, local05
1cacc     C0 FF 7F FF 
1cad0     A8 14 06 F6 | 	mov	arg02, ##-32600
1cad4     24 0C B0 FD | 	call	#_psdpoke
1cad8     01 20 06 F1 | 	add	local02, #1
1cadc     01 00 00 FF 
1cae0     00 20 56 F2 | 	cmps	local02, ##512 wc
1cae4     D4 FF 9F CD |  if_b	jmp	#LR__2325
1cae8     09 20 C6 F9 | 	decod	local02, #9
1caec                 | LR__2326
1caec     10 27 02 F6 | 	mov	local05, local02
1caf0     01 26 66 F0 | 	shl	local05, #1
1caf4     0D 12 C6 F9 | 	decod	arg01, #13
1caf8     13 13 02 F1 | 	add	arg01, local05
1cafc     3F 00 00 FF 
1cb00     58 15 06 F6 | 	mov	arg02, ##32600
1cb04     F4 0B B0 FD | 	call	#_psdpoke
1cb08     01 20 06 F1 | 	add	local02, #1
1cb0c     02 00 00 FF 
1cb10     00 20 16 F2 | 	cmp	local02, ##1024 wc
1cb14     D4 FF 9F CD |  if_b	jmp	#LR__2326
1cb18                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
1cb18     00 20 06 F6 | 	mov	local02, #0
1cb1c                 | LR__2327
1cb1c     10 27 02 F6 | 	mov	local05, local02
1cb20     01 26 66 F0 | 	shl	local05, #1
1cb24     14 00 00 FF 
1cb28     00 12 06 F6 | 	mov	arg01, ##10240
1cb2c     13 13 02 F1 | 	add	arg01, local05
1cb30     C0 FF 7F FF 
1cb34     A8 14 06 F6 | 	mov	arg02, ##-32600
1cb38     C0 0B B0 FD | 	call	#_psdpoke
1cb3c     01 20 06 F1 | 	add	local02, #1
1cb40     00 21 56 F2 | 	cmps	local02, #256 wc
1cb44     D4 FF 9F CD |  if_b	jmp	#LR__2327
1cb48     00 21 06 F6 | 	mov	local02, #256
1cb4c                 | LR__2328
1cb4c     10 27 02 F6 | 	mov	local05, local02
1cb50     01 26 66 F0 | 	shl	local05, #1
1cb54     14 00 00 FF 
1cb58     00 12 06 F6 | 	mov	arg01, ##10240
1cb5c     13 13 02 F1 | 	add	arg01, local05
1cb60     3F 00 00 FF 
1cb64     58 15 06 F6 | 	mov	arg02, ##32600
1cb68     90 0B B0 FD | 	call	#_psdpoke
1cb6c     01 20 06 F1 | 	add	local02, #1
1cb70     02 00 00 FF 
1cb74     00 20 16 F2 | 	cmp	local02, ##1024 wc
1cb78     D0 FF 9F CD |  if_b	jmp	#LR__2328
1cb7c                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
1cb7c     18 00 00 FF 
1cb80     00 20 06 F6 | 	mov	local02, ##12288
1cb84                 | LR__2329
1cb84     10 13 02 F6 | 	mov	arg01, local02
1cb88     00 14 06 F6 | 	mov	arg02, #0
1cb8c     24 0B B0 FD | 	call	#_pslpoke
1cb90     04 20 06 F1 | 	add	local02, #4
1cb94     77 00 00 FF 
1cb98     FD 21 56 F2 | 	cmps	local02, ##61437 wc
1cb9c     E4 FF 9F CD |  if_b	jmp	#LR__2329
1cba0                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1cba0     00 20 06 F6 | 	mov	local02, #0
1cba4                 | LR__2330
1cba4     10 27 02 F6 | 	mov	local05, local02
1cba8     01 26 66 F0 | 	shl	local05, #1
1cbac     78 00 00 FF 
1cbb0     00 22 06 F6 | 	mov	local03, ##61440
1cbb4     13 23 02 F1 | 	add	local03, local05
1cbb8     14 00 00 FF 
1cbbc     C6 EA 05 F1 | 	add	ptr__dat__, ##10438
1cbc0     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1cbc4     14 00 00 FF 
1cbc8     C6 EA 85 F1 | 	sub	ptr__dat__, ##10438
1cbcc     10 12 06 F1 | 	add	arg01, #16
1cbd0     10 15 02 F6 | 	mov	arg02, local02
1cbd4     01 14 66 F0 | 	shl	arg02, #1
1cbd8     0A 13 02 F1 | 	add	arg01, arg02
1cbdc     09 15 E2 FA | 	rdword	arg02, arg01
1cbe0     11 13 02 F6 | 	mov	arg01, local03
1cbe4     14 0B B0 FD | 	call	#_psdpoke
1cbe8     01 20 06 F1 | 	add	local02, #1
1cbec     02 00 00 FF 
1cbf0     00 20 56 F2 | 	cmps	local02, ##1024 wc
1cbf4     AC FF 9F CD |  if_b	jmp	#LR__2330
1cbf8                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1cbf8     00 20 06 F6 | 	mov	local02, #0
1cbfc                 | LR__2331
1cbfc     10 27 02 F6 | 	mov	local05, local02
1cc00     01 26 66 F0 | 	shl	local05, #1
1cc04     7C 00 00 FF 
1cc08     00 22 06 F6 | 	mov	local03, ##63488
1cc0c     13 23 02 F1 | 	add	local03, local05
1cc10     10 00 00 FF 
1cc14     B6 EA 05 F1 | 	add	ptr__dat__, ##8374
1cc18     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1cc1c     10 00 00 FF 
1cc20     B6 EA 85 F1 | 	sub	ptr__dat__, ##8374
1cc24     10 12 06 F1 | 	add	arg01, #16
1cc28     10 15 02 F6 | 	mov	arg02, local02
1cc2c     01 14 66 F0 | 	shl	arg02, #1
1cc30     0A 13 02 F1 | 	add	arg01, arg02
1cc34     09 15 E2 FA | 	rdword	arg02, arg01
1cc38     11 13 02 F6 | 	mov	arg01, local03
1cc3c     BC 0A B0 FD | 	call	#_psdpoke
1cc40     01 20 06 F1 | 	add	local02, #1
1cc44     02 00 00 FF 
1cc48     00 20 56 F2 | 	cmps	local02, ##1024 wc
1cc4c     AC FF 9F CD |  if_b	jmp	#LR__2331
1cc50                 | ' 
1cc50                 | ' 
1cc50                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
1cc50     00 20 06 F6 | 	mov	local02, #0
1cc54     0C 00 00 FF 
1cc58     D8 E4 05 F1 | 	add	objptr, ##6360
1cc5c     97 18 48 FB | 	callpa	#(@LR__2333-@LR__2332)>>2,fcache_load_ptr_
1cc60                 | LR__2332
1cc60     10 27 02 F6 | 	mov	local05, local02
1cc64     01 26 66 F0 | 	shl	local05, #1
1cc68     F2 26 02 F1 | 	add	local05, objptr
1cc6c     10 23 02 F6 | 	mov	local03, local02
1cc70     08 22 66 F0 | 	shl	local03, #8
1cc74     7F 00 00 FF 
1cc78     00 29 06 F6 | 	mov	local06, ##65280
1cc7c     11 29 82 F1 | 	sub	local06, local03
1cc80     13 29 52 FC | 	wrword	local06, local05
1cc84     01 20 06 F1 | 	add	local02, #1
1cc88     00 21 56 F2 | 	cmps	local02, #256 wc
1cc8c     D0 FF 9F CD |  if_b	jmp	#LR__2332
1cc90                 | LR__2333
1cc90     0C 00 00 FF 
1cc94     D8 E4 85 F1 | 	sub	objptr, ##6360
1cc98                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
1cc98     00 20 06 F6 | 	mov	local02, #0
1cc9c                 | LR__2334
1cc9c     10 27 02 F6 | 	mov	local05, local02
1cca0     01 26 66 F0 | 	shl	local05, #1
1cca4     0D 00 00 FF 
1cca8     D8 E4 05 F1 | 	add	objptr, ##6872
1ccac     F2 26 02 F1 | 	add	local05, objptr
1ccb0     80 BF 23 FF 
1ccb4     00 12 06 F6 | 	mov	arg01, ##1199505408
1ccb8     0F 15 02 F6 | 	mov	arg02, local01
1ccbc     0D 00 00 FF 
1ccc0     D8 E4 85 F1 | 	sub	objptr, ##6872
1ccc4     D4 69 B0 FD | 	call	#__system___float_mul
1ccc8     FD 12 02 F6 | 	mov	arg01, result1
1cccc     01 14 06 F6 | 	mov	arg02, #1
1ccd0     90 6E B0 FD | 	call	#__system___float_tointeger
1ccd4     13 FB 51 FC | 	wrword	result1, local05
1ccd8     0F 13 02 F6 | 	mov	arg01, local01
1ccdc     CC BC 1F FF 
1cce0     9A 15 06 F6 | 	mov	arg02, ##1064933786
1cce4     B4 69 B0 FD | 	call	#__system___float_mul
1cce8     FD 1E 02 F6 | 	mov	local01, result1
1ccec     01 20 06 F1 | 	add	local02, #1
1ccf0     00 21 56 F2 | 	cmps	local02, #256 wc
1ccf4     A4 FF 9F CD |  if_b	jmp	#LR__2334
1ccf8     0E 00 00 FF 
1ccfc     D6 E4 05 F1 | 	add	objptr, ##7382
1cd00     F2 00 58 FC | 	wrword	#0, objptr
1cd04                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
1cd04     00 20 06 F6 | 	mov	local02, #0
1cd08     02 E4 05 F1 | 	add	objptr, #2
1cd0c     97 10 48 FB | 	callpa	#(@LR__2336-@LR__2335)>>2,fcache_load_ptr_
1cd10                 | LR__2335
1cd10     10 27 02 F6 | 	mov	local05, local02
1cd14     01 26 66 F0 | 	shl	local05, #1
1cd18     F2 26 02 F1 | 	add	local05, objptr
1cd1c     7F 00 80 FF 
1cd20     13 01 5A FC | 	wrword	##65280, local05
1cd24     01 20 06 F1 | 	add	local02, #1
1cd28     FF 20 56 F2 | 	cmps	local02, #255 wc
1cd2c     E0 FF 9F CD |  if_b	jmp	#LR__2335
1cd30                 | LR__2336
1cd30     FE E5 05 F1 | 	add	objptr, #510
1cd34     F2 00 58 FC | 	wrword	#0, objptr
1cd38                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
1cd38     00 20 06 F6 | 	mov	local02, #0
1cd3c     02 E4 05 F1 | 	add	objptr, #2
1cd40     97 52 48 FB | 	callpa	#(@LR__2341-@LR__2337)>>2,fcache_load_ptr_
1cd44                 | LR__2337
1cd44     10 27 02 F6 | 	mov	local05, local02
1cd48     01 26 66 F0 | 	shl	local05, #1
1cd4c     F2 26 02 F1 | 	add	local05, objptr
1cd50     10 29 02 F6 | 	mov	local06, local02
1cd54     0C 28 66 F0 | 	shl	local06, #12
1cd58     13 29 52 FC | 	wrword	local06, local05
1cd5c     01 20 06 F1 | 	add	local02, #1
1cd60     10 20 56 F2 | 	cmps	local02, #16 wc
1cd64     DC FF 9F CD |  if_b	jmp	#LR__2337
1cd68                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
1cd68     10 20 06 F6 | 	mov	local02, #16
1cd6c                 | LR__2338
1cd6c     10 27 02 F6 | 	mov	local05, local02
1cd70     01 26 66 F0 | 	shl	local05, #1
1cd74     F2 26 02 F1 | 	add	local05, objptr
1cd78     7F 00 80 FF 
1cd7c     13 01 5A FC | 	wrword	##65280, local05
1cd80     01 20 06 F1 | 	add	local02, #1
1cd84     F0 20 16 F2 | 	cmp	local02, #240 wc
1cd88     E0 FF 9F CD |  if_b	jmp	#LR__2338
1cd8c                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
1cd8c     F0 20 06 F6 | 	mov	local02, #240
1cd90                 | LR__2339
1cd90     10 27 02 F6 | 	mov	local05, local02
1cd94     01 26 66 F0 | 	shl	local05, #1
1cd98     F2 26 02 F1 | 	add	local05, objptr
1cd9c     FF 22 06 F6 | 	mov	local03, #255
1cda0     10 23 82 F1 | 	sub	local03, local02
1cda4     0C 22 66 F0 | 	shl	local03, #12
1cda8     13 23 52 FC | 	wrword	local03, local05
1cdac     01 20 06 F1 | 	add	local02, #1
1cdb0     00 21 16 F2 | 	cmp	local02, #256 wc
1cdb4     D8 FF 9F CD |  if_b	jmp	#LR__2339
1cdb8                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
1cdb8     00 20 06 F6 | 	mov	local02, #0
1cdbc     01 00 00 FF 
1cdc0     00 E4 05 F1 | 	add	objptr, ##512
1cdc4                 | LR__2340
1cdc4     10 27 02 F6 | 	mov	local05, local02
1cdc8     01 26 66 F0 | 	shl	local05, #1
1cdcc     F2 26 02 F1 | 	add	local05, objptr
1cdd0     10 29 02 F6 | 	mov	local06, local02
1cdd4     08 28 66 F0 | 	shl	local06, #8
1cdd8     13 29 52 FC | 	wrword	local06, local05
1cddc     01 20 06 F1 | 	add	local02, #1
1cde0     00 21 56 F2 | 	cmps	local02, #256 wc
1cde4     DC FF 9F CD |  if_b	jmp	#LR__2340
1cde8                 | LR__2341
1cde8     FE E5 05 F1 | 	add	objptr, #510
1cdec     F2 00 58 FC | 	wrword	#0, objptr
1cdf0                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
1cdf0     00 20 06 F6 | 	mov	local02, #0
1cdf4     02 E4 05 F1 | 	add	objptr, #2
1cdf8     97 6A 48 FB | 	callpa	#(@LR__2346-@LR__2342)>>2,fcache_load_ptr_
1cdfc                 | LR__2342
1cdfc     10 27 02 F6 | 	mov	local05, local02
1ce00     01 26 66 F0 | 	shl	local05, #1
1ce04     F2 26 02 F1 | 	add	local05, objptr
1ce08     10 29 02 F6 | 	mov	local06, local02
1ce0c     04 28 66 F0 | 	shl	local06, #4
1ce10     10 29 02 F1 | 	add	local06, local02
1ce14     04 28 66 F0 | 	shl	local06, #4
1ce18     13 29 52 FC | 	wrword	local06, local05
1ce1c     01 20 06 F1 | 	add	local02, #1
1ce20     F0 20 56 F2 | 	cmps	local02, #240 wc
1ce24     D4 FF 9F CD |  if_b	jmp	#LR__2342
1ce28     F0 20 06 F6 | 	mov	local02, #240
1ce2c                 | LR__2343
1ce2c     10 27 02 F6 | 	mov	local05, local02
1ce30     01 26 66 F0 | 	shl	local05, #1
1ce34     F2 26 02 F1 | 	add	local05, objptr
1ce38     FF 22 06 F6 | 	mov	local03, #255
1ce3c     10 23 82 F1 | 	sub	local03, local02
1ce40     0C 22 66 F0 | 	shl	local03, #12
1ce44     13 23 52 FC | 	wrword	local03, local05
1ce48     01 20 06 F1 | 	add	local02, #1
1ce4c     00 21 16 F2 | 	cmp	local02, #256 wc
1ce50     D8 FF 9F CD |  if_b	jmp	#LR__2343
1ce54                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
1ce54     00 20 06 F6 | 	mov	local02, #0
1ce58     01 00 00 FF 
1ce5c     00 E4 05 F1 | 	add	objptr, ##512
1ce60                 | LR__2344
1ce60     10 27 02 F6 | 	mov	local05, local02
1ce64     01 26 66 F0 | 	shl	local05, #1
1ce68     F2 26 02 F1 | 	add	local05, objptr
1ce6c     10 29 02 F6 | 	mov	local06, local02
1ce70     09 28 66 F0 | 	shl	local06, #9
1ce74     13 29 52 FC | 	wrword	local06, local05
1ce78     FF 26 06 F6 | 	mov	local05, #255
1ce7c     10 27 82 F1 | 	sub	local05, local02
1ce80     01 26 66 F0 | 	shl	local05, #1
1ce84     F2 26 02 F1 | 	add	local05, objptr
1ce88     10 29 02 F6 | 	mov	local06, local02
1ce8c     09 28 66 F0 | 	shl	local06, #9
1ce90     13 29 52 FC | 	wrword	local06, local05
1ce94     01 20 06 F1 | 	add	local02, #1
1ce98     80 20 56 F2 | 	cmps	local02, #128 wc
1ce9c     C0 FF 9F CD |  if_b	jmp	#LR__2344
1cea0                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
1cea0     00 20 06 F6 | 	mov	local02, #0
1cea4     01 00 00 FF 
1cea8     00 E4 05 F1 | 	add	objptr, ##512
1ceac                 | LR__2345
1ceac     10 27 02 F6 | 	mov	local05, local02
1ceb0     01 26 66 F0 | 	shl	local05, #1
1ceb4     F2 26 02 F1 | 	add	local05, objptr
1ceb8     10 29 02 F6 | 	mov	local06, local02
1cebc     0D 28 66 F0 | 	shl	local06, #13
1cec0     13 29 52 FC | 	wrword	local06, local05
1cec4     01 20 06 F1 | 	add	local02, #1
1cec8     08 20 56 F2 | 	cmps	local02, #8 wc
1cecc     DC FF 9F CD |  if_b	jmp	#LR__2345
1ced0                 | LR__2346
1ced0                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
1ced0     08 20 06 F6 | 	mov	local02, #8
1ced4     97 42 48 FB | 	callpa	#(@LR__2350-@LR__2347)>>2,fcache_load_ptr_
1ced8                 | LR__2347
1ced8     10 27 02 F6 | 	mov	local05, local02
1cedc     01 26 66 F0 | 	shl	local05, #1
1cee0     F2 26 02 F1 | 	add	local05, objptr
1cee4     10 1F 02 F6 | 	mov	local01, local02
1cee8     08 1E 86 F1 | 	sub	local01, #8
1ceec     0B 1E 66 F0 | 	shl	local01, #11
1cef0     7F 00 00 FF 
1cef4     00 29 06 F6 | 	mov	local06, ##65280
1cef8     0F 29 82 F1 | 	sub	local06, local01
1cefc     13 29 52 FC | 	wrword	local06, local05
1cf00     01 20 06 F1 | 	add	local02, #1
1cf04     18 20 16 F2 | 	cmp	local02, #24 wc
1cf08     CC FF 9F CD |  if_b	jmp	#LR__2347
1cf0c                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
1cf0c     18 20 06 F6 | 	mov	local02, #24
1cf10                 | LR__2348
1cf10     10 27 02 F6 | 	mov	local05, local02
1cf14     01 26 66 F0 | 	shl	local05, #1
1cf18     F2 26 02 F1 | 	add	local05, objptr
1cf1c     40 00 80 FF 
1cf20     13 01 58 FC | 	wrword	##32768, local05
1cf24     01 20 06 F1 | 	add	local02, #1
1cf28     81 20 16 F2 | 	cmp	local02, #129 wc
1cf2c     E0 FF 9F CD |  if_b	jmp	#LR__2348
1cf30                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
1cf30     81 20 06 F6 | 	mov	local02, #129
1cf34                 | LR__2349
1cf34     10 27 02 F6 | 	mov	local05, local02
1cf38     01 26 66 F0 | 	shl	local05, #1
1cf3c     F2 26 02 F1 | 	add	local05, objptr
1cf40     FF 22 06 F6 | 	mov	local03, #255
1cf44     10 23 82 F1 | 	sub	local03, local02
1cf48     08 22 66 F0 | 	shl	local03, #8
1cf4c     13 23 52 FC | 	wrword	local03, local05
1cf50     01 20 06 F1 | 	add	local02, #1
1cf54     00 21 16 F2 | 	cmp	local02, #256 wc
1cf58     D8 FF 9F CD |  if_b	jmp	#LR__2349
1cf5c                 | LR__2350
1cf5c     3E 00 00 FF 
1cf60     FA E4 05 F1 | 	add	objptr, ##31994
1cf64     F2 00 59 FC | 	wrword	#128, objptr
1cf68     51 00 00 FF 
1cf6c     D2 E5 85 F1 | 	sub	objptr, ##41938
1cf70                 | ' for i=0 to 7
1cf70     00 20 06 F6 | 	mov	local02, #0
1cf74     97 8E 48 FB | 	callpa	#(@LR__2352-@LR__2351)>>2,fcache_load_ptr_
1cf78                 | LR__2351
1cf78     10 27 02 F6 | 	mov	local05, local02
1cf7c     01 26 66 F0 | 	shl	local05, #1
1cf80     10 27 02 F1 | 	add	local05, local02
1cf84     03 26 66 F0 | 	shl	local05, #3
1cf88     14 00 00 FF 
1cf8c     38 E5 05 F1 | 	add	objptr, ##10552
1cf90     F2 26 02 F1 | 	add	local05, objptr
1cf94     00 EE A1 FF 
1cf98     13 01 68 FC | 	wrlong	##1138491392, local05
1cf9c     10 27 02 F6 | 	mov	local05, local02
1cfa0     01 26 66 F0 | 	shl	local05, #1
1cfa4     10 27 02 F1 | 	add	local05, local02
1cfa8     03 26 66 F0 | 	shl	local05, #3
1cfac     F2 26 02 F1 | 	add	local05, objptr
1cfb0     04 26 06 F1 | 	add	local05, #4
1cfb4     13 21 42 FC | 	wrbyte	local02, local05
1cfb8     10 27 02 F6 | 	mov	local05, local02
1cfbc     01 26 66 F0 | 	shl	local05, #1
1cfc0     10 27 02 F1 | 	add	local05, local02
1cfc4     03 26 66 F0 | 	shl	local05, #3
1cfc8     F2 26 02 F1 | 	add	local05, objptr
1cfcc     05 26 06 F1 | 	add	local05, #5
1cfd0     13 21 42 FC | 	wrbyte	local02, local05
1cfd4     10 27 02 F6 | 	mov	local05, local02
1cfd8     01 26 66 F0 | 	shl	local05, #1
1cfdc     10 27 02 F1 | 	add	local05, local02
1cfe0     03 26 66 F0 | 	shl	local05, #3
1cfe4     F2 26 02 F1 | 	add	local05, objptr
1cfe8     06 26 06 F1 | 	add	local05, #6
1cfec     13 01 58 FC | 	wrword	#0, local05
1cff0     10 27 02 F6 | 	mov	local05, local02
1cff4     01 26 66 F0 | 	shl	local05, #1
1cff8     10 27 02 F1 | 	add	local05, local02
1cffc     03 26 66 F0 | 	shl	local05, #3
1d000     F2 26 02 F1 | 	add	local05, objptr
1d004     08 26 06 F1 | 	add	local05, #8
1d008     00 C0 9F FF 
1d00c     13 01 68 FC | 	wrlong	##1065353216, local05
1d010     10 27 02 F6 | 	mov	local05, local02
1d014     01 26 66 F0 | 	shl	local05, #1
1d018     10 27 02 F1 | 	add	local05, local02
1d01c     03 26 66 F0 | 	shl	local05, #3
1d020     F2 26 02 F1 | 	add	local05, objptr
1d024     0C 26 06 F1 | 	add	local05, #12
1d028     00 40 A0 FF 
1d02c     13 01 68 FC | 	wrlong	##1082130432, local05
1d030     10 27 02 F6 | 	mov	local05, local02
1d034     01 26 66 F0 | 	shl	local05, #1
1d038     10 27 02 F1 | 	add	local05, local02
1d03c     03 26 66 F0 | 	shl	local05, #3
1d040     F2 26 02 F1 | 	add	local05, objptr
1d044     10 26 06 F1 | 	add	local05, #16
1d048     13 01 68 FC | 	wrlong	#0, local05
1d04c     10 27 02 F6 | 	mov	local05, local02
1d050     01 26 66 F0 | 	shl	local05, #1
1d054     10 27 02 F1 | 	add	local05, local02
1d058     03 26 66 F0 | 	shl	local05, #3
1d05c     F2 26 02 F1 | 	add	local05, objptr
1d060     14 26 06 F1 | 	add	local05, #20
1d064     13 FF 59 FC | 	wrword	#255, local05
1d068     10 27 02 F6 | 	mov	local05, local02
1d06c     01 26 66 F0 | 	shl	local05, #1
1d070     3D 00 00 FF 
1d074     8C E4 05 F1 | 	add	objptr, ##31372
1d078     F2 26 02 F1 | 	add	local05, objptr
1d07c     13 FF 59 FC | 	wrword	#255, local05
1d080     01 20 06 F1 | 	add	local02, #1
1d084     08 20 56 F2 | 	cmps	local02, #8 wc
1d088     51 00 00 FF 
1d08c     C4 E5 85 F1 | 	sub	objptr, ##41924
1d090     E4 FE 9F CD |  if_b	jmp	#LR__2351
1d094                 | LR__2352
1d094     00 6E 20 FF 
1d098     00 28 06 F6 | 	mov	local06, ##1088159744
1d09c                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
1d09c     03 26 06 F6 | 	mov	local05, #3
1d0a0                 | LR__2353
1d0a0     14 13 02 F6 | 	mov	arg01, local06
1d0a4     CE C3 1F FF 
1d0a8     7D 14 06 F6 | 	mov	arg02, ##1065852029
1d0ac     EC 65 B0 FD | 	call	#__system___float_mul
1d0b0     FD 28 02 F6 | 	mov	local06, result1
1d0b4     FA 27 6E FB | 	djnz	local05, #LR__2353
1d0b8     00 20 06 F6 | 	mov	local02, #0
1d0bc                 | LR__2354
1d0bc     10 25 02 F6 | 	mov	local04, local02
1d0c0     02 24 66 F0 | 	shl	local04, #2
1d0c4     14 00 00 FF 
1d0c8     D8 E4 05 F1 | 	add	objptr, ##10456
1d0cc     F2 24 02 F1 | 	add	local04, objptr
1d0d0     12 29 62 FC | 	wrlong	local06, local04
1d0d4     14 13 02 F6 | 	mov	arg01, local06
1d0d8     CE C3 1F FF 
1d0dc     7D 14 06 F6 | 	mov	arg02, ##1065852029
1d0e0     14 00 00 FF 
1d0e4     D8 E4 85 F1 | 	sub	objptr, ##10456
1d0e8     B0 65 B0 FD | 	call	#__system___float_mul
1d0ec     FD 28 02 F6 | 	mov	local06, result1
1d0f0     01 20 06 F1 | 	add	local02, #1
1d0f4     0C 20 56 F2 | 	cmps	local02, #12 wc
1d0f8     C0 FF 9F CD |  if_b	jmp	#LR__2354
1d0fc     14 00 00 FF 
1d100     08 E5 05 F1 | 	add	objptr, ##10504
1d104     F2 50 6B FC | 	wrlong	#424, objptr
1d108     04 E4 05 F1 | 	add	objptr, #4
1d10c     F2 20 6B FC | 	wrlong	#400, objptr
1d110     04 E4 05 F1 | 	add	objptr, #4
1d114     F2 F2 6A FC | 	wrlong	#377, objptr
1d118     04 E4 05 F1 | 	add	objptr, #4
1d11c     F2 C8 6A FC | 	wrlong	#356, objptr
1d120     04 E4 05 F1 | 	add	objptr, #4
1d124     F2 A0 6A FC | 	wrlong	#336, objptr
1d128     04 E4 05 F1 | 	add	objptr, #4
1d12c     F2 7A 6A FC | 	wrlong	#317, objptr
1d130     04 E4 05 F1 | 	add	objptr, #4
1d134     F2 58 6A FC | 	wrlong	#300, objptr
1d138     04 E4 05 F1 | 	add	objptr, #4
1d13c     F2 36 6A FC | 	wrlong	#283, objptr
1d140     04 E4 05 F1 | 	add	objptr, #4
1d144     F2 16 6A FC | 	wrlong	#267, objptr
1d148     04 E4 05 F1 | 	add	objptr, #4
1d14c     F2 F8 69 FC | 	wrlong	#252, objptr
1d150     04 E4 05 F1 | 	add	objptr, #4
1d154     F2 DC 69 FC | 	wrlong	#238, objptr
1d158     04 E4 05 F1 | 	add	objptr, #4
1d15c     F2 C0 69 FC | 	wrlong	#224, objptr
1d160     3D 00 00 FF 
1d164     9E E4 05 F1 | 	add	objptr, ##31390
1d168     F2 00 59 FC | 	wrword	#128, objptr
1d16c     02 E4 85 F1 | 	sub	objptr, #2
1d170     F2 00 59 FC | 	wrword	#128, objptr
1d174     51 00 00 FF 
1d178     D0 E5 85 F1 | 	sub	objptr, ##41936
1d17c     A7 F0 03 F6 | 	mov	ptra, fp
1d180     B2 00 A0 FD | 	call	#popregs_
1d184                 | _init_audio_ret
1d184     2D 00 64 FD | 	ret
1d188                 | 
1d188                 | ' 
1d188                 | ' 
1d188                 | ' function getnoteval(token) as single
1d188                 | _getnoteval
1d188     02 4A 05 F6 | 	mov	COUNT_, #2
1d18c     A8 00 A0 FD | 	call	#pushregs_
1d190     01 00 00 FF 
1d194     00 13 86 F1 | 	sub	arg01, ##768
1d198     09 15 52 F6 | 	abs	arg02, arg01 wc
1d19c     0C 14 16 FD | 	qdiv	arg02, #12
1d1a0     14 00 00 FF 
1d1a4     D8 E4 05 F1 | 	add	objptr, ##10456
1d1a8     19 14 62 FD | 	getqy	arg02
1d1ac     0A 15 82 F6 | 	negc	arg02, arg02
1d1b0     02 14 66 F0 | 	shl	arg02, #2
1d1b4     F2 14 02 F1 | 	add	arg02, objptr
1d1b8     0A 1F 02 FB | 	rdlong	local01, arg02
1d1bc     09 15 52 F6 | 	abs	arg02, arg01 wc
1d1c0     0C 14 16 FD | 	qdiv	arg02, #12
1d1c4     14 00 00 FF 
1d1c8     D8 E4 85 F1 | 	sub	objptr, ##10456
1d1cc     01 12 06 F6 | 	mov	arg01, #1
1d1d0                 | ' noteexp=1+(note/12) 
1d1d0                 | ' return (2.0^noteexp)*notebase
1d1d0     18 14 62 FD | 	getqx	arg02
1d1d4     0A 13 82 F3 | 	sumc	arg01, arg02
1d1d8     09 13 52 F6 | 	abs	arg01, arg01 wc
1d1dc     1F 20 C6 C9 |  if_b	decod	local02, #31
1d1e0     00 20 06 36 |  if_ae	mov	local02, #0
1d1e4     B0 60 B0 FD | 	call	#__system___float_fromuns
1d1e8     10 FB 61 F5 | 	xor	result1, local02
1d1ec     FD 14 02 F6 | 	mov	arg02, result1
1d1f0     1E 12 C6 F9 | 	decod	arg01, #30
1d1f4     88 73 B0 FD | 	call	#__system____builtin_powf
1d1f8     FD 12 02 F6 | 	mov	arg01, result1
1d1fc     0F 15 02 F6 | 	mov	arg02, local01
1d200     98 64 B0 FD | 	call	#__system___float_mul
1d204     A7 F0 03 F6 | 	mov	ptra, fp
1d208     B2 00 A0 FD | 	call	#popregs_
1d20c                 | _getnoteval_ret
1d20c     2D 00 64 FD | 	ret
1d210                 | 
1d210                 | ' 
1d210                 | ' 
1d210                 | ' 
1d210                 | ' sub init_error_strings
1d210                 | _init_error_strings
1d210     86 01 00 FF 
1d214     6F 00 06 F6 | 	mov	_var01, ##@LR__5523
1d218     45 00 00 FF 
1d21c     7C E4 05 F1 | 	add	objptr, ##35452
1d220     F2 00 62 FC | 	wrlong	_var01, objptr
1d224     86 01 00 FF 
1d228     70 00 06 F6 | 	mov	_var01, ##@LR__5524
1d22c     04 E4 05 F1 | 	add	objptr, #4
1d230     F2 00 62 FC | 	wrlong	_var01, objptr
1d234     86 01 00 FF 
1d238     95 00 06 F6 | 	mov	_var01, ##@LR__5525
1d23c     04 E4 05 F1 | 	add	objptr, #4
1d240     F2 00 62 FC | 	wrlong	_var01, objptr
1d244     86 01 00 FF 
1d248     B6 00 06 F6 | 	mov	_var01, ##@LR__5526
1d24c     04 E4 05 F1 | 	add	objptr, #4
1d250     F2 00 62 FC | 	wrlong	_var01, objptr
1d254     86 01 00 FF 
1d258     D0 00 06 F6 | 	mov	_var01, ##@LR__5527
1d25c     04 E4 05 F1 | 	add	objptr, #4
1d260     F2 00 62 FC | 	wrlong	_var01, objptr
1d264     86 01 00 FF 
1d268     EC 00 06 F6 | 	mov	_var01, ##@LR__5528
1d26c     04 E4 05 F1 | 	add	objptr, #4
1d270     F2 00 62 FC | 	wrlong	_var01, objptr
1d274     86 01 00 FF 
1d278     0E 01 06 F6 | 	mov	_var01, ##@LR__5529
1d27c     04 E4 05 F1 | 	add	objptr, #4
1d280     F2 00 62 FC | 	wrlong	_var01, objptr
1d284     86 01 00 FF 
1d288     3C 01 06 F6 | 	mov	_var01, ##@LR__5530
1d28c     04 E4 05 F1 | 	add	objptr, #4
1d290     F2 00 62 FC | 	wrlong	_var01, objptr
1d294     86 01 00 FF 
1d298     67 01 06 F6 | 	mov	_var01, ##@LR__5531
1d29c     04 E4 05 F1 | 	add	objptr, #4
1d2a0     F2 00 62 FC | 	wrlong	_var01, objptr
1d2a4     86 01 00 FF 
1d2a8     80 01 06 F6 | 	mov	_var01, ##@LR__5532
1d2ac     04 E4 05 F1 | 	add	objptr, #4
1d2b0     F2 00 62 FC | 	wrlong	_var01, objptr
1d2b4     86 01 00 FF 
1d2b8     A1 01 06 F6 | 	mov	_var01, ##@LR__5533
1d2bc     04 E4 05 F1 | 	add	objptr, #4
1d2c0     F2 00 62 FC | 	wrlong	_var01, objptr
1d2c4     86 01 00 FF 
1d2c8     B8 01 06 F6 | 	mov	_var01, ##@LR__5534
1d2cc     04 E4 05 F1 | 	add	objptr, #4
1d2d0     F2 00 62 FC | 	wrlong	_var01, objptr
1d2d4     86 01 00 FF 
1d2d8     D6 01 06 F6 | 	mov	_var01, ##@LR__5535
1d2dc     04 E4 05 F1 | 	add	objptr, #4
1d2e0     F2 00 62 FC | 	wrlong	_var01, objptr
1d2e4     86 01 00 FF 
1d2e8     FA 01 06 F6 | 	mov	_var01, ##@LR__5536
1d2ec     04 E4 05 F1 | 	add	objptr, #4
1d2f0     F2 00 62 FC | 	wrlong	_var01, objptr
1d2f4     87 01 00 FF 
1d2f8     21 00 06 F6 | 	mov	_var01, ##@LR__5537
1d2fc     04 E4 05 F1 | 	add	objptr, #4
1d300     F2 00 62 FC | 	wrlong	_var01, objptr
1d304     87 01 00 FF 
1d308     3D 00 06 F6 | 	mov	_var01, ##@LR__5538
1d30c     04 E4 05 F1 | 	add	objptr, #4
1d310     F2 00 62 FC | 	wrlong	_var01, objptr
1d314     87 01 00 FF 
1d318     4E 00 06 F6 | 	mov	_var01, ##@LR__5539
1d31c     04 E4 05 F1 | 	add	objptr, #4
1d320     F2 00 62 FC | 	wrlong	_var01, objptr
1d324     87 01 00 FF 
1d328     5E 00 06 F6 | 	mov	_var01, ##@LR__5540
1d32c     04 E4 05 F1 | 	add	objptr, #4
1d330     F2 00 62 FC | 	wrlong	_var01, objptr
1d334     87 01 00 FF 
1d338     79 00 06 F6 | 	mov	_var01, ##@LR__5541
1d33c     04 E4 05 F1 | 	add	objptr, #4
1d340     F2 00 62 FC | 	wrlong	_var01, objptr
1d344     87 01 00 FF 
1d348     8B 00 06 F6 | 	mov	_var01, ##@LR__5542
1d34c     04 E4 05 F1 | 	add	objptr, #4
1d350     F2 00 62 FC | 	wrlong	_var01, objptr
1d354     87 01 00 FF 
1d358     A3 00 06 F6 | 	mov	_var01, ##@LR__5543
1d35c     04 E4 05 F1 | 	add	objptr, #4
1d360     F2 00 62 FC | 	wrlong	_var01, objptr
1d364     87 01 00 FF 
1d368     B7 00 06 F6 | 	mov	_var01, ##@LR__5544
1d36c     04 E4 05 F1 | 	add	objptr, #4
1d370     F2 00 62 FC | 	wrlong	_var01, objptr
1d374     87 01 00 FF 
1d378     C7 00 06 F6 | 	mov	_var01, ##@LR__5545
1d37c     04 E4 05 F1 | 	add	objptr, #4
1d380     F2 00 62 FC | 	wrlong	_var01, objptr
1d384     87 01 00 FF 
1d388     E4 00 06 F6 | 	mov	_var01, ##@LR__5546
1d38c     04 E4 05 F1 | 	add	objptr, #4
1d390     F2 00 62 FC | 	wrlong	_var01, objptr
1d394     87 01 00 FF 
1d398     F5 00 06 F6 | 	mov	_var01, ##@LR__5547
1d39c     04 E4 05 F1 | 	add	objptr, #4
1d3a0     F2 00 62 FC | 	wrlong	_var01, objptr
1d3a4     87 01 00 FF 
1d3a8     06 01 06 F6 | 	mov	_var01, ##@LR__5548
1d3ac     04 E4 05 F1 | 	add	objptr, #4
1d3b0     F2 00 62 FC | 	wrlong	_var01, objptr
1d3b4     87 01 00 FF 
1d3b8     31 01 06 F6 | 	mov	_var01, ##@LR__5549
1d3bc     04 E4 05 F1 | 	add	objptr, #4
1d3c0     F2 00 62 FC | 	wrlong	_var01, objptr
1d3c4     87 01 00 FF 
1d3c8     4D 01 06 F6 | 	mov	_var01, ##@LR__5550
1d3cc     04 E4 05 F1 | 	add	objptr, #4
1d3d0     F2 00 62 FC | 	wrlong	_var01, objptr
1d3d4     87 01 00 FF 
1d3d8     63 01 06 F6 | 	mov	_var01, ##@LR__5551
1d3dc     04 E4 05 F1 | 	add	objptr, #4
1d3e0     F2 00 62 FC | 	wrlong	_var01, objptr
1d3e4     87 01 00 FF 
1d3e8     70 01 06 F6 | 	mov	_var01, ##@LR__5552
1d3ec     04 E4 05 F1 | 	add	objptr, #4
1d3f0     F2 00 62 FC | 	wrlong	_var01, objptr
1d3f4     87 01 00 FF 
1d3f8     82 01 06 F6 | 	mov	_var01, ##@LR__5553
1d3fc     04 E4 05 F1 | 	add	objptr, #4
1d400     F2 00 62 FC | 	wrlong	_var01, objptr
1d404     87 01 00 FF 
1d408     93 01 06 F6 | 	mov	_var01, ##@LR__5554
1d40c     04 E4 05 F1 | 	add	objptr, #4
1d410     F2 00 62 FC | 	wrlong	_var01, objptr
1d414     87 01 00 FF 
1d418     AF 01 06 F6 | 	mov	_var01, ##@LR__5555
1d41c     04 E4 05 F1 | 	add	objptr, #4
1d420     F2 00 62 FC | 	wrlong	_var01, objptr
1d424     87 01 00 FF 
1d428     C0 01 06 F6 | 	mov	_var01, ##@LR__5556
1d42c     04 E4 05 F1 | 	add	objptr, #4
1d430     F2 00 62 FC | 	wrlong	_var01, objptr
1d434     87 01 00 FF 
1d438     CF 01 06 F6 | 	mov	_var01, ##@LR__5557
1d43c     04 E4 05 F1 | 	add	objptr, #4
1d440     F2 00 62 FC | 	wrlong	_var01, objptr
1d444     87 01 00 FF 
1d448     EA 01 06 F6 | 	mov	_var01, ##@LR__5558
1d44c     04 E4 05 F1 | 	add	objptr, #4
1d450     F2 00 62 FC | 	wrlong	_var01, objptr
1d454     88 01 00 FF 
1d458     1E 00 06 F6 | 	mov	_var01, ##@LR__5559
1d45c     04 E4 05 F1 | 	add	objptr, #4
1d460     F2 00 62 FC | 	wrlong	_var01, objptr
1d464     88 01 00 FF 
1d468     37 00 06 F6 | 	mov	_var01, ##@LR__5560
1d46c     04 E4 05 F1 | 	add	objptr, #4
1d470     F2 00 62 FC | 	wrlong	_var01, objptr
1d474     88 01 00 FF 
1d478     53 00 06 F6 | 	mov	_var01, ##@LR__5561
1d47c     04 E4 05 F1 | 	add	objptr, #4
1d480     F2 00 62 FC | 	wrlong	_var01, objptr
1d484     88 01 00 FF 
1d488     71 00 06 F6 | 	mov	_var01, ##@LR__5562
1d48c     04 E4 05 F1 | 	add	objptr, #4
1d490     F2 00 62 FC | 	wrlong	_var01, objptr
1d494     88 01 00 FF 
1d498     8A 00 06 F6 | 	mov	_var01, ##@LR__5563
1d49c     04 E4 05 F1 | 	add	objptr, #4
1d4a0     F2 00 62 FC | 	wrlong	_var01, objptr
1d4a4     88 01 00 FF 
1d4a8     A9 00 06 F6 | 	mov	_var01, ##@LR__5564
1d4ac     04 E4 05 F1 | 	add	objptr, #4
1d4b0     F2 00 62 FC | 	wrlong	_var01, objptr
1d4b4     88 01 00 FF 
1d4b8     B8 00 06 F6 | 	mov	_var01, ##@LR__5565
1d4bc     04 E4 05 F1 | 	add	objptr, #4
1d4c0     F2 00 62 FC | 	wrlong	_var01, objptr
1d4c4     88 01 00 FF 
1d4c8     E6 00 06 F6 | 	mov	_var01, ##@LR__5566
1d4cc     04 E4 05 F1 | 	add	objptr, #4
1d4d0     F2 00 62 FC | 	wrlong	_var01, objptr
1d4d4     88 01 00 FF 
1d4d8     F4 00 06 F6 | 	mov	_var01, ##@LR__5567
1d4dc     04 E4 05 F1 | 	add	objptr, #4
1d4e0     F2 00 62 FC | 	wrlong	_var01, objptr
1d4e4     88 01 00 FF 
1d4e8     09 01 06 F6 | 	mov	_var01, ##@LR__5568
1d4ec     04 E4 05 F1 | 	add	objptr, #4
1d4f0     F2 00 62 FC | 	wrlong	_var01, objptr
1d4f4     88 01 00 FF 
1d4f8     2D 01 06 F6 | 	mov	_var01, ##@LR__5569
1d4fc     04 E4 05 F1 | 	add	objptr, #4
1d500     F2 00 62 FC | 	wrlong	_var01, objptr
1d504     88 01 00 FF 
1d508     44 01 06 F6 | 	mov	_var01, ##@LR__5570
1d50c     04 E4 05 F1 | 	add	objptr, #4
1d510     F2 00 62 FC | 	wrlong	_var01, objptr
1d514     88 01 00 FF 
1d518     57 01 06 F6 | 	mov	_var01, ##@LR__5571
1d51c     04 E4 05 F1 | 	add	objptr, #4
1d520     F2 00 62 FC | 	wrlong	_var01, objptr
1d524     88 01 00 FF 
1d528     6E 01 06 F6 | 	mov	_var01, ##@LR__5572
1d52c     04 E4 05 F1 | 	add	objptr, #4
1d530     F2 00 62 FC | 	wrlong	_var01, objptr
1d534     88 01 00 FF 
1d538     87 01 06 F6 | 	mov	_var01, ##@LR__5573
1d53c     04 E4 05 F1 | 	add	objptr, #4
1d540     F2 00 62 FC | 	wrlong	_var01, objptr
1d544     45 00 00 FF 
1d548     44 E5 85 F1 | 	sub	objptr, ##35652
1d54c                 | _init_error_strings_ret
1d54c     2D 00 64 FD | 	ret
1d550                 | 
1d550                 | '         
1d550                 | ' sub printerror(err as integer)
1d550                 | _printerror
1d550     01 4A 05 F6 | 	mov	COUNT_, #1
1d554     A8 00 A0 FD | 	call	#pushregs_
1d558     09 1F 02 F6 | 	mov	local01, arg01
1d55c     88 01 00 FF 
1d560     A9 13 06 F6 | 	mov	arg01, ##@LR__5574
1d564     64 20 B0 FD | 	call	#_hg010b_spin2_write
1d568     0F 13 02 F6 | 	mov	arg01, local01
1d56c     00 26 B0 FD | 	call	#_hg010b_spin2_inttostr
1d570     FD 12 02 F6 | 	mov	arg01, result1
1d574     54 20 B0 FD | 	call	#_hg010b_spin2_write
1d578     88 01 00 FF 
1d57c     B0 13 06 F6 | 	mov	arg01, ##@LR__5575
1d580     48 20 B0 FD | 	call	#_hg010b_spin2_write
1d584     02 1E 66 F0 | 	shl	local01, #2
1d588     45 00 00 FF 
1d58c     7C E4 05 F1 | 	add	objptr, ##35452
1d590     F2 1E 02 F1 | 	add	local01, objptr
1d594     0F 13 02 FB | 	rdlong	arg01, local01
1d598     45 00 00 FF 
1d59c     7C E4 85 F1 | 	sub	objptr, ##35452
1d5a0                 | ' 
1d5a0                 | ' write(text)
1d5a0     28 20 B0 FD | 	call	#_hg010b_spin2_write
1d5a4                 | ' crlf
1d5a4     24 25 B0 FD | 	call	#_hg010b_spin2_crlf
1d5a8     A7 F0 03 F6 | 	mov	ptra, fp
1d5ac     B2 00 A0 FD | 	call	#popregs_
1d5b0                 | _printerror_ret
1d5b0     2D 00 64 FD | 	ret
1d5b4                 | 
1d5b4                 | ' 
1d5b4                 | ' '' ------------------------------- Hardware start/stop/initialization 
1d5b4                 | ' 
1d5b4                 | ' sub startpsram
1d5b4                 | _startpsram
1d5b4     00 12 06 F6 | 	mov	arg01, #0
1d5b8     0A 14 C6 F9 | 	decod	arg02, #10
1d5bc     0B 16 06 F6 | 	mov	arg03, #11
1d5c0     07 18 06 F6 | 	mov	arg04, #7
1d5c4     0B 00 00 FF 
1d5c8     CC E4 05 F1 | 	add	objptr, ##5836
1d5cc     AC 26 B0 FD | 	call	#_psram_spin2_startx
1d5d0     2B 00 00 FF 
1d5d4     3C E5 05 F1 | 	add	objptr, ##22332
1d5d8     F2 FA 61 FC | 	wrlong	result1, objptr
1d5dc                 | '     return $7FF00 + cog*12
1d5dc     0C E4 05 F1 | 	add	objptr, #12
1d5e0     FF 03 80 FF 
1d5e4     F2 00 6A FC | 	wrlong	##524032, objptr
1d5e8     37 00 00 FF 
1d5ec     14 E4 85 F1 | 	sub	objptr, ##28180
1d5f0                 | _startpsram_ret
1d5f0     2D 00 64 FD | 	ret
1d5f4                 | 
1d5f4                 | ' 
1d5f4                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
1d5f4                 | _startvideo
1d5f4     01 4A 05 F6 | 	mov	COUNT_, #1
1d5f8     A8 00 A0 FD | 	call	#pushregs_
1d5fc     37 00 00 FF 
1d600     14 E4 05 F1 | 	add	objptr, ##28180
1d604     F2 18 02 FB | 	rdlong	arg04, objptr
1d608     37 00 00 FF 
1d60c     14 E4 85 F1 | 	sub	objptr, ##28180
1d610     0A 13 02 F6 | 	mov	arg01, arg02
1d614     0C 15 02 F6 | 	mov	arg02, arg04
1d618     A8 07 B0 FD | 	call	#_hg010b_spin2_start
1d61c     37 00 00 FF 
1d620     00 E4 05 F1 | 	add	objptr, ##28160
1d624     F2 FA 61 FC | 	wrlong	result1, objptr
1d628                 | ' 
1d628                 | ' videocog=v.start(pin,mbox)
1d628                 | ' 
1d628                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1d628     00 1E 06 F6 | 	mov	local01, #0
1d62c     2B 00 00 FF 
1d630     34 E5 85 F1 | 	sub	objptr, ##22324
1d634                 | LR__2360
1d634     0F 13 02 F6 | 	mov	arg01, local01
1d638     00 28 00 FF 
1d63c     00 14 06 F6 | 	mov	arg02, ##5242880
1d640     90 2A B0 FD | 	call	#_psram_spin2_setQos
1d644     01 1E 06 F1 | 	add	local01, #1
1d648     08 1E 56 F2 | 	cmps	local01, #8 wc
1d64c     E4 FF 9F CD |  if_b	jmp	#LR__2360
1d650     2B 00 00 FF 
1d654     34 E5 05 F1 | 	add	objptr, ##22324
1d658     F2 12 02 FB | 	rdlong	arg01, objptr
1d65c     7A 00 02 FF 
1d660     00 14 06 F6 | 	mov	arg02, ##67171328
1d664     2B 00 00 FF 
1d668     34 E5 85 F1 | 	sub	objptr, ##22324
1d66c     64 2A B0 FD | 	call	#_psram_spin2_setQos
1d670     0B 00 00 FF 
1d674     CC E4 85 F1 | 	sub	objptr, ##5836
1d678                 | ' psram.setQoS(videocog, $0400f400) 
1d678                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
1d678     F2 14 02 F6 | 	mov	arg02, objptr
1d67c     00 78 04 FF 
1d680     00 14 46 F5 | 	or	arg02, ##149946368
1d684     00 16 06 F6 | 	mov	arg03, #0
1d688     00 18 06 F6 | 	mov	arg04, #0
1d68c     00 12 06 F6 | 	mov	arg01, #0
1d690     FC 3E B0 FD | 	call	#__system___basic_open
1d694                 | ' return videocog
1d694     37 00 00 FF 
1d698     00 E4 05 F1 | 	add	objptr, ##28160
1d69c     F2 FA 01 FB | 	rdlong	result1, objptr
1d6a0     37 00 00 FF 
1d6a4     00 E4 85 F1 | 	sub	objptr, ##28160
1d6a8     A7 F0 03 F6 | 	mov	ptra, fp
1d6ac     B2 00 A0 FD | 	call	#popregs_
1d6b0                 | _startvideo_ret
1d6b0     2D 00 64 FD | 	ret
1d6b4                 | 
1d6b4                 | ' 
1d6b4                 | ' 
1d6b4                 | ' 
1d6b4                 | ' 
1d6b4                 | ' '' ------------------------------- Convenient psram peek/poke
1d6b4                 | ' 
1d6b4                 | ' sub pslpoke(addr as ulong,value as ulong)
1d6b4                 | _pslpoke
1d6b4     00 4A 05 F6 | 	mov	COUNT_, #0
1d6b8     A8 00 A0 FD | 	call	#pushregs_
1d6bc     08 F0 07 F1 | 	add	ptra, #8
1d6c0     A7 12 62 FC | 	wrlong	arg01, fp
1d6c4     04 4E 05 F1 | 	add	fp, #4
1d6c8     A7 14 62 FC | 	wrlong	arg02, fp
1d6cc     A7 12 02 F6 | 	mov	arg01, fp
1d6d0     04 4E 85 F1 | 	sub	fp, #4
1d6d4     A7 14 02 FB | 	rdlong	arg02, fp
1d6d8     04 16 06 F6 | 	mov	arg03, #4
1d6dc     0B 00 00 FF 
1d6e0     CC E4 05 F1 | 	add	objptr, ##5836
1d6e4     5C 28 B0 FD | 	call	#_psram_spin2_write
1d6e8     0B 00 00 FF 
1d6ec     CC E4 85 F1 | 	sub	objptr, ##5836
1d6f0     A7 F0 03 F6 | 	mov	ptra, fp
1d6f4     B2 00 A0 FD | 	call	#popregs_
1d6f8                 | _pslpoke_ret
1d6f8     2D 00 64 FD | 	ret
1d6fc                 | 
1d6fc                 | ' 
1d6fc                 | ' sub psdpoke(addr as ulong,value as ulong)
1d6fc                 | _psdpoke
1d6fc     00 4A 05 F6 | 	mov	COUNT_, #0
1d700     A8 00 A0 FD | 	call	#pushregs_
1d704     08 F0 07 F1 | 	add	ptra, #8
1d708     A7 12 62 FC | 	wrlong	arg01, fp
1d70c     04 4E 05 F1 | 	add	fp, #4
1d710     A7 14 62 FC | 	wrlong	arg02, fp
1d714     A7 12 02 F6 | 	mov	arg01, fp
1d718     04 4E 85 F1 | 	sub	fp, #4
1d71c     A7 14 02 FB | 	rdlong	arg02, fp
1d720     02 16 06 F6 | 	mov	arg03, #2
1d724     0B 00 00 FF 
1d728     CC E4 05 F1 | 	add	objptr, ##5836
1d72c     14 28 B0 FD | 	call	#_psram_spin2_write
1d730     0B 00 00 FF 
1d734     CC E4 85 F1 | 	sub	objptr, ##5836
1d738     A7 F0 03 F6 | 	mov	ptra, fp
1d73c     B2 00 A0 FD | 	call	#popregs_
1d740                 | _psdpoke_ret
1d740     2D 00 64 FD | 	ret
1d744                 | 
1d744                 | ' 
1d744                 | ' sub pspoke(addr as ulong,value as ulong)
1d744                 | _pspoke
1d744     00 4A 05 F6 | 	mov	COUNT_, #0
1d748     A8 00 A0 FD | 	call	#pushregs_
1d74c     08 F0 07 F1 | 	add	ptra, #8
1d750     A7 12 62 FC | 	wrlong	arg01, fp
1d754     04 4E 05 F1 | 	add	fp, #4
1d758     A7 14 62 FC | 	wrlong	arg02, fp
1d75c     A7 12 02 F6 | 	mov	arg01, fp
1d760     04 4E 85 F1 | 	sub	fp, #4
1d764     A7 14 02 FB | 	rdlong	arg02, fp
1d768     01 16 06 F6 | 	mov	arg03, #1
1d76c     0B 00 00 FF 
1d770     CC E4 05 F1 | 	add	objptr, ##5836
1d774     CC 27 B0 FD | 	call	#_psram_spin2_write
1d778     0B 00 00 FF 
1d77c     CC E4 85 F1 | 	sub	objptr, ##5836
1d780     A7 F0 03 F6 | 	mov	ptra, fp
1d784     B2 00 A0 FD | 	call	#popregs_
1d788                 | _pspoke_ret
1d788     2D 00 64 FD | 	ret
1d78c                 | 
1d78c                 | ' 
1d78c                 | ' function pspeek(adr as ulong) as ubyte
1d78c                 | _pspeek
1d78c     00 4A 05 F6 | 	mov	COUNT_, #0
1d790     A8 00 A0 FD | 	call	#pushregs_
1d794     0C F0 07 F1 | 	add	ptra, #12
1d798     04 4E 05 F1 | 	add	fp, #4
1d79c     A7 12 62 FC | 	wrlong	arg01, fp
1d7a0     04 4E 05 F1 | 	add	fp, #4
1d7a4     A7 12 02 F6 | 	mov	arg01, fp
1d7a8     04 4E 85 F1 | 	sub	fp, #4
1d7ac     A7 14 02 FB | 	rdlong	arg02, fp
1d7b0     04 4E 85 F1 | 	sub	fp, #4
1d7b4     01 16 06 F6 | 	mov	arg03, #1
1d7b8     0B 00 00 FF 
1d7bc     CC E4 05 F1 | 	add	objptr, ##5836
1d7c0     E4 26 B0 FD | 	call	#_psram_spin2_read1
1d7c4     0B 00 00 FF 
1d7c8     CC E4 85 F1 | 	sub	objptr, ##5836
1d7cc                 | ' psram.read1(varptr(res),adr,1)
1d7cc                 | ' return res
1d7cc     08 4E 05 F1 | 	add	fp, #8
1d7d0     A7 FA C1 FA | 	rdbyte	result1, fp
1d7d4     08 4E 85 F1 | 	sub	fp, #8
1d7d8     A7 F0 03 F6 | 	mov	ptra, fp
1d7dc     B2 00 A0 FD | 	call	#popregs_
1d7e0                 | _pspeek_ret
1d7e0     2D 00 64 FD | 	ret
1d7e4                 | 
1d7e4                 | ' 
1d7e4                 | ' function pslpeek(adr as ulong) as ulong
1d7e4                 | _pslpeek
1d7e4     00 4A 05 F6 | 	mov	COUNT_, #0
1d7e8     A8 00 A0 FD | 	call	#pushregs_
1d7ec     0C F0 07 F1 | 	add	ptra, #12
1d7f0     04 4E 05 F1 | 	add	fp, #4
1d7f4     A7 12 62 FC | 	wrlong	arg01, fp
1d7f8     04 4E 05 F1 | 	add	fp, #4
1d7fc     A7 12 02 F6 | 	mov	arg01, fp
1d800     04 4E 85 F1 | 	sub	fp, #4
1d804     A7 14 02 FB | 	rdlong	arg02, fp
1d808     04 4E 85 F1 | 	sub	fp, #4
1d80c     04 16 06 F6 | 	mov	arg03, #4
1d810     0B 00 00 FF 
1d814     CC E4 05 F1 | 	add	objptr, ##5836
1d818     8C 26 B0 FD | 	call	#_psram_spin2_read1
1d81c     0B 00 00 FF 
1d820     CC E4 85 F1 | 	sub	objptr, ##5836
1d824                 | ' psram.read1(varptr(res),adr,4)
1d824                 | ' return res
1d824     08 4E 05 F1 | 	add	fp, #8
1d828     A7 FA 01 FB | 	rdlong	result1, fp
1d82c     08 4E 85 F1 | 	sub	fp, #8
1d830     A7 F0 03 F6 | 	mov	ptra, fp
1d834     B2 00 A0 FD | 	call	#popregs_
1d838                 | _pslpeek_ret
1d838     2D 00 64 FD | 	ret
1d83c                 | 
1d83c                 | ' 
1d83c                 | ' function psdpeek(adr as ulong) as ulong
1d83c                 | _psdpeek
1d83c     00 4A 05 F6 | 	mov	COUNT_, #0
1d840     A8 00 A0 FD | 	call	#pushregs_
1d844     0C F0 07 F1 | 	add	ptra, #12
1d848     04 4E 05 F1 | 	add	fp, #4
1d84c     A7 12 62 FC | 	wrlong	arg01, fp
1d850     04 4E 05 F1 | 	add	fp, #4
1d854     A7 12 02 F6 | 	mov	arg01, fp
1d858     04 4E 85 F1 | 	sub	fp, #4
1d85c     A7 14 02 FB | 	rdlong	arg02, fp
1d860     04 4E 85 F1 | 	sub	fp, #4
1d864     02 16 06 F6 | 	mov	arg03, #2
1d868     0B 00 00 FF 
1d86c     CC E4 05 F1 | 	add	objptr, ##5836
1d870     34 26 B0 FD | 	call	#_psram_spin2_read1
1d874     0B 00 00 FF 
1d878     CC E4 85 F1 | 	sub	objptr, ##5836
1d87c                 | ' psram.read1(varptr(res),adr,2)
1d87c                 | ' return res
1d87c     08 4E 05 F1 | 	add	fp, #8
1d880     A7 FA E1 FA | 	rdword	result1, fp
1d884     08 4E 85 F1 | 	sub	fp, #8
1d888     A7 F0 03 F6 | 	mov	ptra, fp
1d88c     B2 00 A0 FD | 	call	#popregs_
1d890                 | _psdpeek_ret
1d890     2D 00 64 FD | 	ret
1d894                 | 
1d894                 | ' 
1d894                 | ' '' ------------------------------- USB keyboard scan to char translator
1d894                 | ' 
1d894                 | ' function scantochar(key)
1d894                 | _scantochar
1d894                 | ' 
1d894                 | ' select case (key shr 8) and 255
1d894     09 01 02 F6 | 	mov	_var01, arg01
1d898     08 00 C6 F0 | 	sar	_var01, #8
1d89c     FF 00 0E F5 | 	and	_var01, #255 wz
1d8a0     24 00 90 AD |  if_e	jmp	#LR__2370
1d8a4     02 00 0E F2 | 	cmp	_var01, #2 wz
1d8a8     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
1d8ac     30 00 90 AD |  if_e	jmp	#LR__2371
1d8b0     40 00 0E F2 | 	cmp	_var01, #64 wz
1d8b4     44 00 90 AD |  if_e	jmp	#LR__2372
1d8b8     42 00 0E F2 | 	cmp	_var01, #66 wz
1d8bc     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
1d8c0     70 00 90 5D |  if_ne	jmp	#LR__2374
1d8c4     50 00 90 FD | 	jmp	#LR__2373
1d8c8                 | LR__2370
1d8c8     09 FB 01 F6 | 	mov	result1, arg01
1d8cc     7F FA 05 F5 | 	and	result1, #127
1d8d0     02 FA 65 F0 | 	shl	result1, #2
1d8d4     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d8d8     FD FA C1 FA | 	rdbyte	result1, result1
1d8dc     54 00 90 FD | 	jmp	#_scantochar_ret
1d8e0                 | LR__2371
1d8e0     09 FB 01 F6 | 	mov	result1, arg01
1d8e4     7F FA 05 F5 | 	and	result1, #127
1d8e8     02 FA 65 F0 | 	shl	result1, #2
1d8ec     01 FA 05 F1 | 	add	result1, #1
1d8f0     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d8f4     FD FA C1 FA | 	rdbyte	result1, result1
1d8f8     38 00 90 FD | 	jmp	#_scantochar_ret
1d8fc                 | LR__2372
1d8fc     09 FB 01 F6 | 	mov	result1, arg01
1d900     7F FA 05 F5 | 	and	result1, #127
1d904     02 FA 65 F0 | 	shl	result1, #2
1d908     02 FA 05 F1 | 	add	result1, #2
1d90c     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d910     FD FA C1 FA | 	rdbyte	result1, result1
1d914     1C 00 90 FD | 	jmp	#_scantochar_ret
1d918                 | LR__2373
1d918     09 FB 01 F6 | 	mov	result1, arg01
1d91c     7F FA 05 F5 | 	and	result1, #127
1d920     02 FA 65 F0 | 	shl	result1, #2
1d924     03 FA 05 F1 | 	add	result1, #3
1d928     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d92c     FD FA C1 FA | 	rdbyte	result1, result1
1d930     00 00 90 FD | 	jmp	#_scantochar_ret
1d934                 | LR__2374
1d934                 | _scantochar_ret
1d934     2D 00 64 FD | 	ret
1d938                 | 
1d938                 | _program
1d938     01 4A 05 F6 | 	mov	COUNT_, #1
1d93c     A8 00 A0 FD | 	call	#pushregs_
1d940     70 FC BF FD | 	call	#_startpsram
1d944     40 12 06 F6 | 	mov	arg01, #64
1d948     00 14 06 F6 | 	mov	arg02, #0
1d94c     00 16 06 F6 | 	mov	arg03, #0
1d950     A0 FC BF FD | 	call	#_startvideo
1d954     37 00 00 FF 
1d958     14 E4 05 F1 | 	add	objptr, ##28180
1d95c     F2 12 02 FB | 	rdlong	arg01, objptr
1d960     00 14 06 F6 | 	mov	arg02, #0
1d964     FB 03 00 FF 
1d968     00 17 06 F6 | 	mov	arg03, ##521984
1d96c     2B 00 00 FF 
1d970     48 E5 85 F1 | 	sub	objptr, ##22344
1d974     0C 2B B0 FD | 	call	#_audio096_spin2_start
1d978     FE 16 02 F6 | 	mov	arg03, result2
1d97c     2B 00 00 FF 
1d980     30 E5 05 F1 | 	add	objptr, ##22320
1d984     F2 FA 61 FC | 	wrlong	result1, objptr
1d988     14 E4 05 F1 | 	add	objptr, #20
1d98c     F2 16 62 FC | 	wrlong	arg03, objptr
1d990     37 00 00 FF 
1d994     10 E4 85 F1 | 	sub	objptr, ##28176
1d998     32 12 06 F6 | 	mov	arg01, #50
1d99c     3C 34 B0 FD | 	call	#__system___waitms
1d9a0     37 00 00 FF 
1d9a4     10 E4 05 F1 | 	add	objptr, ##28176
1d9a8     F2 12 02 FB | 	rdlong	arg01, objptr
1d9ac     37 00 00 FF 
1d9b0     10 E4 85 F1 | 	sub	objptr, ##28176
1d9b4     14 12 06 F1 | 	add	arg01, #20
1d9b8     20 00 80 FF 
1d9bc     09 01 58 FC | 	wrword	##16384, arg01
1d9c0     18 28 B0 FD | 	call	#_usbnew_spin2_start
1d9c4     37 00 00 FF 
1d9c8     04 E4 05 F1 | 	add	objptr, ##28164
1d9cc     F2 FA 61 FC | 	wrlong	result1, objptr
1d9d0                 | '   mouse_limits[0] := xlim
1d9d0     0F 00 00 FF 
1d9d4     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
1d9d8     01 00 80 FF 
1d9dc     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
1d9e0                 | '   mouse_limits[1] := ylim
1d9e0     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1d9e4     01 00 80 FF 
1d9e8     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
1d9ec     36 00 00 FF 
1d9f0     F3 E4 85 F1 | 	sub	objptr, ##27891
1d9f4     F2 12 02 F6 | 	mov	arg01, objptr
1d9f8     11 E5 85 F1 | 	sub	objptr, #273
1d9fc     C4 12 06 F1 | 	add	arg01, #196
1da00                 | '   mouse_outptr := ptr
1da00     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1da04     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
1da08     0F 00 00 FF 
1da0c     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1da10     0E 00 00 FF 
1da14     B6 EA 05 F1 | 	add	ptr__dat__, ##7350
1da18     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1da1c     0E 00 00 FF 
1da20     B6 EA 85 F1 | 	sub	ptr__dat__, ##7350
1da24     10 12 06 F6 | 	mov	arg01, #16
1da28     30 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
1da2c     10 12 06 F6 | 	mov	arg01, #16
1da30     20 14 06 F6 | 	mov	arg02, #32
1da34     20 16 06 F6 | 	mov	arg03, #32
1da38     B0 0A B0 FD | 	call	#_hg010b_spin2_setspritesize
1da3c     09 12 C6 F9 | 	decod	arg01, #9
1da40     2C 15 06 F6 | 	mov	arg02, #300
1da44     EC 28 B0 FD | 	call	#_usbnew_spin2_mouse_move
1da48     F2 16 02 F6 | 	mov	arg03, objptr
1da4c     50 00 00 FF 
1da50     18 E5 05 F1 | 	add	objptr, ##41240
1da54     F2 14 02 F6 | 	mov	arg02, objptr
1da58     0A 17 62 FC | 	wrlong	arg03, arg02
1da5c     04 14 06 F1 | 	add	arg02, #4
1da60     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
1da64     EF 14 02 F6 | 	mov	arg02, entryptr__
1da68     1E FA 05 F6 | 	mov	result1, #30
1da6c     28 E4 61 FD | 	setq	objptr
1da70     0A FB F1 FC | 	coginit	result1, arg02 wc
1da74     01 FA 65 C6 |  if_b	neg	result1, #1
1da78     04 E4 85 F1 | 	sub	objptr, #4
1da7c     F2 FA 61 FC | 	wrlong	result1, objptr
1da80     01 00 00 FF 
1da84     90 E4 05 F1 | 	add	objptr, ##656
1da88     F2 00 68 FC | 	wrlong	#0, objptr
1da8c     1A 00 00 FF 
1da90     70 E5 85 F1 | 	sub	objptr, ##13680
1da94     F2 04 68 FC | 	wrlong	#2, objptr
1da98     04 E4 05 F1 | 	add	objptr, #4
1da9c     F2 26 69 FC | 	wrlong	#147, objptr
1daa0     04 E4 05 F1 | 	add	objptr, #4
1daa4     F2 34 69 FC | 	wrlong	#154, objptr
1daa8     04 E4 05 F1 | 	add	objptr, #4
1daac     F2 08 68 FC | 	wrlong	#4, objptr
1dab0     04 E4 85 F1 | 	sub	objptr, #4
1dab4     F2 16 02 FB | 	rdlong	arg03, objptr
1dab8     14 E4 85 F1 | 	sub	objptr, #20
1dabc     F2 16 62 FC | 	wrlong	arg03, objptr
1dac0     04 E4 05 F1 | 	add	objptr, #4
1dac4     F2 00 68 FC | 	wrlong	#0, objptr
1dac8     04 E4 05 F1 | 	add	objptr, #4
1dacc     F2 00 68 FC | 	wrlong	#0, objptr
1dad0     19 00 00 FF 
1dad4     E0 E4 05 F1 | 	add	objptr, ##13024
1dad8     F2 02 68 FC | 	wrlong	#1, objptr
1dadc     01 00 00 FF 
1dae0     9C E4 05 F1 | 	add	objptr, ##668
1dae4     F2 00 68 FC | 	wrlong	#0, objptr
1dae8     01 00 00 FF 
1daec     00 EA 05 F1 | 	add	ptr__dat__, ##512
1daf0     08 E4 05 F1 | 	add	objptr, #8
1daf4     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1daf8     04 E4 85 F1 | 	sub	objptr, #4
1dafc     03 00 80 FF 
1db00     F2 3C 69 FC | 	wrlong	##1694, objptr
1db04     0C 00 00 FF 
1db08     4C E5 85 F1 | 	sub	objptr, ##6476
1db0c     F2 18 68 FC | 	wrlong	#12, objptr
1db10     45 00 00 FF 
1db14     64 E4 85 F1 | 	sub	objptr, ##35428
1db18     01 00 00 FF 
1db1c     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1db20     2C DB BF FD | 	call	#_init_commands
1db24     E8 F6 BF FD | 	call	#_init_error_strings
1db28     E4 ED BF FD | 	call	#_init_audio
1db2c     A0 22 BF FD | 	call	#_do_new
1db30     37 00 00 FF 
1db34     3C E4 05 F1 | 	add	objptr, ##28220
1db38     F2 12 02 FB | 	rdlong	arg01, objptr
1db3c     04 E4 85 F1 | 	sub	objptr, #4
1db40     F2 14 02 FB | 	rdlong	arg02, objptr
1db44     37 00 00 FF 
1db48     38 E4 85 F1 | 	sub	objptr, ##28216
1db4c     BC 16 B0 FD | 	call	#_hg010b_spin2_cls
1db50     37 00 00 FF 
1db54     40 E4 05 F1 | 	add	objptr, ##28224
1db58     F2 12 02 FB | 	rdlong	arg01, objptr
1db5c     37 00 00 FF 
1db60     40 E4 85 F1 | 	sub	objptr, ##28224
1db64     54 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1db68                 | ' 
1db68                 | ' leading_spaces:=amount
1db68     01 00 00 FF 
1db6c     B6 E4 05 F1 | 	add	objptr, ##694
1db70     F2 04 68 FC | 	wrlong	#2, objptr
1db74     01 00 00 FF 
1db78     B6 E4 85 F1 | 	sub	objptr, ##694
1db7c     88 01 00 FF 
1db80     B3 1F 06 F6 | 	mov	local01, ##@LR__5576
1db84     3D 12 06 F6 | 	mov	arg01, #61
1db88     3C 14 06 F6 | 	mov	arg02, #60
1db8c     3B 16 06 F6 | 	mov	arg03, #59
1db90     3A 18 06 F6 | 	mov	arg04, #58
1db94     EC 79 B0 FD | 	call	#__system___vfs_open_sdcardx
1db98     FD 14 02 F6 | 	mov	arg02, result1
1db9c     0F 13 02 F6 | 	mov	arg01, local01
1dba0     10 33 B0 FD | 	call	#__system___mount
1dba4     88 01 00 FF 
1dba8     B7 13 06 F6 | 	mov	arg01, ##@LR__5577
1dbac     C4 35 B0 FD | 	call	#__system___chdir
1dbb0     88 01 00 FF 
1dbb4     BF 1F 06 F6 | 	mov	local01, ##@LR__5578
1dbb8     4A 00 00 FF 
1dbbc     90 E4 05 F1 | 	add	objptr, ##38032
1dbc0     F2 1E 62 FC | 	wrlong	local01, objptr
1dbc4     13 00 00 FF 
1dbc8     5C E4 85 F1 | 	sub	objptr, ##9820
1dbcc     F2 12 02 FB | 	rdlong	arg01, objptr
1dbd0     37 00 00 FF 
1dbd4     34 E4 85 F1 | 	sub	objptr, ##28212
1dbd8     01 12 66 F0 | 	shl	arg01, #1
1dbdc     01 14 06 F6 | 	mov	arg02, #1
1dbe0     18 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1dbe4                 | ' init_commands
1dbe4                 | ' init_error_strings
1dbe4                 | ' init_audio
1dbe4                 | ' do_new
1dbe4                 | ' cls(ink, paper)
1dbe4                 | ' v.setfontfamily(font) 				' use ST Mono font
1dbe4                 | ' v.setleadingspaces(2)
1dbe4                 | ' mount "/sd", _vfs_open_sdcard()
1dbe4                 | ' chdir "/sd/bas"
1dbe4                 | ' currentdir$="/sd/bas"
1dbe4                 | ' position 2*editor_spaces,1 : print ver$
1dbe4     00 12 06 F6 | 	mov	arg01, #0
1dbe8     3C 89 B0 FD | 	call	#__system___getiolock_0540
1dbec     FD 12 02 F6 | 	mov	arg01, result1
1dbf0     F4 2E B0 FD | 	call	#__system___lockmem
1dbf4     18 00 00 FF 
1dbf8     4C EB 05 F1 | 	add	ptr__dat__, ##12620
1dbfc     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
1dc00     18 00 00 FF 
1dc04     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
1dc08     00 12 06 F6 | 	mov	arg01, #0
1dc0c     00 16 06 F6 | 	mov	arg03, #0
1dc10     C8 3B B0 FD | 	call	#__system___basic_print_string
1dc14     00 12 06 F6 | 	mov	arg01, #0
1dc18     0A 14 06 F6 | 	mov	arg02, #10
1dc1c     00 16 06 F6 | 	mov	arg03, #0
1dc20     60 3B B0 FD | 	call	#__system___basic_print_char
1dc24     00 12 06 F6 | 	mov	arg01, #0
1dc28     FC 88 B0 FD | 	call	#__system___getiolock_0540
1dc2c     FD 00 68 FC | 	wrlong	#0, result1
1dc30     51 00 00 FF 
1dc34     A8 E5 05 F1 | 	add	objptr, ##41896
1dc38     F2 12 02 FB | 	rdlong	arg01, objptr
1dc3c     0E 00 00 FF 
1dc40     4C E5 85 F1 | 	sub	objptr, ##7500
1dc44     F2 1E 02 FB | 	rdlong	local01, objptr
1dc48     43 00 00 FF 
1dc4c     5C E4 85 F1 | 	sub	objptr, ##34396
1dc50     0F 13 82 F1 | 	sub	arg01, local01
1dc54     00 14 06 F6 | 	mov	arg02, #0
1dc58     0A 16 06 F6 | 	mov	arg03, #10
1dc5c     58 51 B0 FD | 	call	#__system__Number_S
1dc60     FD 12 02 F6 | 	mov	arg01, result1
1dc64     88 01 00 FF 
1dc68     C7 15 06 F6 | 	mov	arg02, ##@LR__5579
1dc6c     D4 2E B0 FD | 	call	#__system___string_concat
1dc70     FD 1E 02 F6 | 	mov	local01, result1
1dc74     50 00 00 FF 
1dc78     0C E5 05 F1 | 	add	objptr, ##41228
1dc7c     F2 1E 62 FC | 	wrlong	local01, objptr
1dc80     50 00 00 FF 
1dc84     0C E5 85 F1 | 	sub	objptr, ##41228
1dc88                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
1dc88     00 12 06 F6 | 	mov	arg01, #0
1dc8c     98 88 B0 FD | 	call	#__system___getiolock_0540
1dc90     FD 12 02 F6 | 	mov	arg01, result1
1dc94     50 2E B0 FD | 	call	#__system___lockmem
1dc98     50 00 00 FF 
1dc9c     0C E5 05 F1 | 	add	objptr, ##41228
1dca0     F2 14 02 FB | 	rdlong	arg02, objptr
1dca4     50 00 00 FF 
1dca8     0C E5 85 F1 | 	sub	objptr, ##41228
1dcac     00 12 06 F6 | 	mov	arg01, #0
1dcb0     00 16 06 F6 | 	mov	arg03, #0
1dcb4     24 3B B0 FD | 	call	#__system___basic_print_string
1dcb8     00 12 06 F6 | 	mov	arg01, #0
1dcbc     0A 14 06 F6 | 	mov	arg02, #10
1dcc0     00 16 06 F6 | 	mov	arg03, #0
1dcc4     BC 3A B0 FD | 	call	#__system___basic_print_char
1dcc8     00 12 06 F6 | 	mov	arg01, #0
1dccc     58 88 B0 FD | 	call	#__system___getiolock_0540
1dcd0     FD 00 68 FC | 	wrlong	#0, result1
1dcd4     37 00 00 FF 
1dcd8     34 E4 05 F1 | 	add	objptr, ##28212
1dcdc     F2 12 02 FB | 	rdlong	arg01, objptr
1dce0     37 00 00 FF 
1dce4     34 E4 85 F1 | 	sub	objptr, ##28212
1dce8     01 12 66 F0 | 	shl	arg01, #1
1dcec     04 14 06 F6 | 	mov	arg02, #4
1dcf0     08 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1dcf4                 | ' position 2*editor_spaces,4 : print "Ready"
1dcf4     00 12 06 F6 | 	mov	arg01, #0
1dcf8     2C 88 B0 FD | 	call	#__system___getiolock_0540
1dcfc     FD 12 02 F6 | 	mov	arg01, result1
1dd00     E4 2D B0 FD | 	call	#__system___lockmem
1dd04     88 01 00 FF 
1dd08     D9 15 06 F6 | 	mov	arg02, ##@LR__5580
1dd0c     00 12 06 F6 | 	mov	arg01, #0
1dd10     00 16 06 F6 | 	mov	arg03, #0
1dd14     C4 3A B0 FD | 	call	#__system___basic_print_string
1dd18     00 12 06 F6 | 	mov	arg01, #0
1dd1c     0A 14 06 F6 | 	mov	arg02, #10
1dd20     00 16 06 F6 | 	mov	arg03, #0
1dd24     5C 3A B0 FD | 	call	#__system___basic_print_char
1dd28     00 12 06 F6 | 	mov	arg01, #0
1dd2c     F8 87 B0 FD | 	call	#__system___getiolock_0540
1dd30     FD 00 68 FC | 	wrlong	#0, result1
1dd34     00 14 06 F6 | 	mov	arg02, #0
1dd38     01 14 D6 F7 | 	test	arg02, #1 wc
1dd3c     5A 4C 64 FD | 	drvc	#38
1dd40     01 14 D6 F7 | 	test	arg02, #1 wc
1dd44     5A 4E 64 FD | 	drvc	#39
1dd48     88 01 00 FF 
1dd4c     DF 1F 06 F6 | 	mov	local01, ##@LR__5581
1dd50     51 00 00 FF 
1dd54     D4 E5 05 F1 | 	add	objptr, ##41940
1dd58     F2 1E 62 FC | 	wrlong	local01, objptr
1dd5c     04 E4 05 F1 | 	add	objptr, #4
1dd60     FF FF FF FF 
1dd64     F2 FE 6B FC | 	wrlong	##-1, objptr
1dd68     51 00 00 FF 
1dd6c     D8 E5 85 F1 | 	sub	objptr, ##41944
1dd70                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
1dd70                 | ' loadname="noname.bas"
1dd70                 | ' do_insert=-1
1dd70                 | ' 
1dd70                 | ' '-------------------------------------------------------------------------------------------------------- 
1dd70                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
1dd70                 | ' '--------------------------------------------------------------------------------------------------------
1dd70                 | ' 
1dd70                 | ' do
1dd70                 | LR__2380
1dd70     01 12 06 F6 | 	mov	arg01, #1
1dd74     24 14 B0 FD | 	call	#_hg010b_spin2_waitvbl
1dd78     88 2A BE FD | 	call	#_edit
1dd7c     FD 1E 02 F6 | 	mov	local01, result1
1dd80     37 00 00 FF 
1dd84     1C E4 05 F1 | 	add	objptr, ##28188
1dd88     F2 1E 62 FC | 	wrlong	local01, objptr
1dd8c     37 00 00 FF 
1dd90     1C E4 85 F1 | 	sub	objptr, ##28188
1dd94     E0 38 BE FD | 	call	#_interpret
1dd98     88 01 00 FF 
1dd9c     EA 1F 06 F6 | 	mov	local01, ##@LR__5582
1dda0     37 00 00 FF 
1dda4     1C E4 05 F1 | 	add	objptr, ##28188
1dda8     F2 1E 62 FC | 	wrlong	local01, objptr
1ddac     37 00 00 FF 
1ddb0     1C E4 85 F1 | 	sub	objptr, ##28188
1ddb4     B8 FF 9F FD | 	jmp	#LR__2380
1ddb8     A7 F0 03 F6 | 	mov	ptra, fp
1ddbc     B2 00 A0 FD | 	call	#popregs_
1ddc0                 | _program_ret
1ddc0     2D 00 64 FD | 	ret
1ddc4                 | 
1ddc4                 | ' '' this is not a main program.
1ddc4                 | ' 
1ddc4                 | ' '****************************************************************************************************************
1ddc4                 | ' '                                                                                                             	*
1ddc4                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
1ddc4                 | ' '                                                                                                            	*
1ddc4                 | ' ' base - HDMI base pin												*
1ddc4                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1ddc4                 | ' '														*
1ddc4                 | ' '														*
1ddc4                 | ' '****************************************************************************************************************
1ddc4                 | ' 
1ddc4                 | ' pub start(base,mb):result |i
1ddc4                 | _hg010b_spin2_start
1ddc4                 | ' 
1ddc4                 | ' '--------------------------- initialize pointers and variables
1ddc4                 | ' 
1ddc4                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1ddc4     34 E4 05 F1 | 	add	objptr, #52
1ddc8     F2 FA 01 F6 | 	mov	result1, objptr
1ddcc     28 E4 85 F1 | 	sub	objptr, #40
1ddd0     F2 FA 61 FC | 	wrlong	result1, objptr
1ddd4                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1ddd4                 | ' hdmibase:=base							' HDMI base pin, 8*n
1ddd4     18 E4 05 F1 | 	add	objptr, #24
1ddd8     F2 12 62 FC | 	wrlong	arg01, objptr
1dddc                 | ' mailbox_ptr:=mb		
1dddc     04 E4 05 F1 | 	add	objptr, #4
1dde0     F2 14 62 FC | 	wrlong	arg02, objptr
1dde4                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1dde4     C1 E5 05 F1 | 	add	objptr, #449
1dde8     F2 14 62 FC | 	wrlong	arg02, objptr
1ddec                 | ' sprite_ptr:=@spr1ptr
1ddec     D8 E4 85 F1 | 	sub	objptr, #216
1ddf0     F2 FA 01 F6 | 	mov	result1, objptr
1ddf4     E5 E4 85 F1 | 	sub	objptr, #229
1ddf8     F2 FA 61 FC | 	wrlong	result1, objptr
1ddfc                 | ' 
1ddfc                 | ' 		'
1ddfc                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1ddfc     E5 E4 05 F1 | 	add	objptr, #229
1de00     F2 FA 01 FB | 	rdlong	result1, objptr
1de04     D0 FA 05 F1 | 	add	result1, #208
1de08     FD 10 58 FC | 	wrword	#8, result1
1de0c                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1de0c     F2 16 02 FB | 	rdlong	arg03, objptr
1de10     D2 16 06 F1 | 	add	arg03, #210
1de14     0B 21 58 FC | 	wrword	#16, arg03
1de18                 | ' leading_spaces:=0				'
1de18     A5 E5 05 F1 | 	add	objptr, #421
1de1c     F2 00 68 FC | 	wrlong	#0, objptr
1de20                 | ' 
1de20                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1de20     99 E4 85 F1 | 	sub	objptr, #153
1de24     00 00 A0 FF 
1de28     F2 0E 68 FC | 	wrlong	##1073741831, objptr
1de2c                 | ' emptydl[1]:=0
1de2c     04 E4 05 F1 | 	add	objptr, #4
1de30     F2 00 68 FC | 	wrlong	#0, objptr
1de34                 | ' 
1de34                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1de34                 | ' 
1de34                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1de34     28 E5 85 F1 | 	sub	objptr, #296
1de38     F2 02 68 FC | 	wrlong	#1, objptr
1de3c                 | ' if s_debug<>0
1de3c                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
1de3c     20 00 80 FF 
1de40     F2 00 68 FC | 	wrlong	##16384, objptr
1de44     F9 E4 85 F1 | 	sub	objptr, #249
1de48                 | ' setmode()							' set the mode, see below
1de48     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
1de4c                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
1de4c     49 E4 05 F1 | 	add	objptr, #73
1de50     F2 FA 01 F6 | 	mov	result1, objptr
1de54     35 E4 85 F1 | 	sub	objptr, #53
1de58     F2 FA 61 FC | 	wrlong	result1, objptr
1de5c                 | ' cursor_ptr:=@cursor_x						
1de5c     28 E4 05 F1 | 	add	objptr, #40
1de60     F2 16 02 F6 | 	mov	arg03, objptr
1de64     2C E4 85 F1 | 	sub	objptr, #44
1de68     F2 16 62 FC | 	wrlong	arg03, objptr
1de6c                 | ' fontnum:=0  							' start with a PC type font 
1de6c     55 E4 05 F1 | 	add	objptr, #85
1de70     F2 00 68 FC | 	wrlong	#0, objptr
1de74                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1de74     1C E4 05 F1 | 	add	objptr, #28
1de78     F2 12 02 F6 | 	mov	arg01, objptr
1de7c     81 E4 85 F1 | 	sub	objptr, #129
1de80     10 00 00 FF 
1de84     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1de88     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1de8c     10 00 00 FF 
1de90     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1de94     10 16 06 F6 | 	mov	arg03, #16
1de98     6C 2B B0 FD | 	call	#__system____builtin_memmove
1de9c                 | ' leading_spaces:=0
1de9c     01 00 00 FF 
1dea0     B6 E4 05 F1 | 	add	objptr, ##694
1dea4     F2 00 68 FC | 	wrlong	#0, objptr
1dea8     01 00 00 FF 
1deac     B6 E4 85 F1 | 	sub	objptr, ##694
1deb0                 | ' '---------------------------- initialize a cursor (MSDOS type)
1deb0                 | ' 
1deb0                 | ' initcursor(154)
1deb0     9A 12 06 F6 | 	mov	arg01, #154
1deb4     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
1deb8                 | ' 
1deb8                 | ' '---------------------------- start the cog
1deb8                 | ' 
1deb8                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
1deb8     10 00 00 FF 
1debc     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1dec0     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1dec4     10 00 00 FF 
1dec8     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1decc     14 E4 05 F1 | 	add	objptr, #20
1ded0     10 FA 05 F6 | 	mov	result1, #16
1ded4     28 E4 61 FD | 	setq	objptr
1ded8     0A FB F1 FC | 	coginit	result1, arg02 wc
1dedc     01 FA 65 C6 |  if_b	neg	result1, #1
1dee0     1C E4 05 F1 | 	add	objptr, #28
1dee4     F2 FA 61 FC | 	wrlong	result1, objptr
1dee8     30 E4 85 F1 | 	sub	objptr, #48
1deec                 | ' waitms(40)							' wait for stabilize
1deec     28 12 06 F6 | 	mov	arg01, #40
1def0     E8 2E B0 FD | 	call	#__system___waitms
1def4                 | ' return cog							' return the driver's cog #
1def4     30 E4 05 F1 | 	add	objptr, #48
1def8     F2 FA 01 FB | 	rdlong	result1, objptr
1defc     30 E4 85 F1 | 	sub	objptr, #48
1df00                 | _hg010b_spin2_start_ret
1df00     2D 00 64 FD | 	ret
1df04                 | 
1df04                 | ' 
1df04                 | ' 
1df04                 | ' '**************************************************************************************************************** 
1df04                 | ' '                                                                                                             	*
1df04                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
1df04                 | ' '  Mode number - see start() above or bits below								*
1df04                 | ' '                                                                                                             	*
1df04                 | ' '****************************************************************************************************************
1df04                 | ' 
1df04                 | ' '---------------------------- initialize a cursor (MSDOS type)
1df04                 | ' pub initcursor(color) |i
1df04                 | _hg010b_spin2_initcursor
1df04     03 4A 05 F6 | 	mov	COUNT_, #3
1df08     A8 00 A0 FD | 	call	#pushregs_
1df0c     09 1F 02 F6 | 	mov	local01, arg01
1df10                 | ' 
1df10                 | ' cursor_x:=0							' place the cursor at 0:0
1df10     3C E4 05 F1 | 	add	objptr, #60
1df14     F2 00 58 FC | 	wrword	#0, objptr
1df18                 | ' cursor_y:=0
1df18     02 E4 05 F1 | 	add	objptr, #2
1df1c     F2 00 48 FC | 	wrbyte	#0, objptr
1df20                 | ' repeat i from 0 to 111
1df20     00 20 06 F6 | 	mov	local02, #0
1df24     F8 E5 05 F1 | 	add	objptr, #504
1df28     97 1A 48 FB | 	callpa	#(@LR__2392-@LR__2390)>>2,fcache_load_ptr_
1df2c                 | LR__2390
1df2c                 | '   cursor[i]:=0
1df2c     10 23 02 F6 | 	mov	local03, local02
1df30     F2 22 02 F1 | 	add	local03, objptr
1df34     11 01 48 FC | 	wrbyte	#0, local03
1df38     01 20 06 F1 | 	add	local02, #1
1df3c     70 20 56 F2 | 	cmps	local02, #112 wc
1df40     E8 FF 9F CD |  if_b	jmp	#LR__2390
1df44                 | ' repeat i from 112 to 127
1df44     70 20 06 F6 | 	mov	local02, #112
1df48                 | LR__2391
1df48                 | '   cursor[i]:=color  
1df48     10 23 02 F6 | 	mov	local03, local02
1df4c     F2 22 02 F1 | 	add	local03, objptr
1df50     11 1F 42 FC | 	wrbyte	local01, local03
1df54     01 20 06 F1 | 	add	local02, #1
1df58     80 20 16 F2 | 	cmp	local02, #128 wc
1df5c     E8 FF 9F CD |  if_b	jmp	#LR__2391
1df60                 | LR__2392
1df60                 | ' 'repeat i from 0 to 127
1df60                 | ' '  if ((i/8)//2)
1df60                 | ' '    cursor[i]:=15
1df60                 | ' '  else
1df60                 | ' '    cursor[i]:=0
1df60                 | ' '  if i>=120    
1df60                 | ' '    cursor[i]:=40
1df60                 | ' setspriteptr(17,@cursor)
1df60     F2 14 02 F6 | 	mov	arg02, objptr
1df64     01 00 00 FF 
1df68     36 E4 85 F1 | 	sub	objptr, ##566
1df6c     11 12 06 F6 | 	mov	arg01, #17
1df70     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1df74                 | ' setspritesize(17,8,16)
1df74     11 12 06 F6 | 	mov	arg01, #17
1df78     08 14 06 F6 | 	mov	arg02, #8
1df7c     10 16 06 F6 | 	mov	arg03, #16
1df80     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
1df84                 | ' setspritepos(17,0,0)
1df84     11 12 06 F6 | 	mov	arg01, #17
1df88     00 14 06 F6 | 	mov	arg02, #0
1df8c     00 16 06 F6 | 	mov	arg03, #0
1df90     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
1df94                 | ' cursorshape:=14
1df94     0B 00 00 FF 
1df98     C6 E4 05 F1 | 	add	objptr, ##5830
1df9c     F2 1C 68 FC | 	wrlong	#14, objptr
1dfa0                 | ' cursorcolor:=color
1dfa0     04 E4 85 F1 | 	sub	objptr, #4
1dfa4     F2 1E 62 FC | 	wrlong	local01, objptr
1dfa8     0B 00 00 FF 
1dfac     C2 E4 85 F1 | 	sub	objptr, ##5826
1dfb0     A7 F0 03 F6 | 	mov	ptra, fp
1dfb4     B2 00 A0 FD | 	call	#popregs_
1dfb8                 | _hg010b_spin2_initcursor_ret
1dfb8     2D 00 64 FD | 	ret
1dfbc                 | 
1dfbc                 | ' 
1dfbc                 | ' pub setcursorshape(shape) | i
1dfbc                 | _hg010b_spin2_setcursorshape
1dfbc                 | ' 
1dfbc                 | ' cursorshape:=shape
1dfbc     0B 00 00 FF 
1dfc0     C6 E4 05 F1 | 	add	objptr, ##5830
1dfc4     F2 12 62 FC | 	wrlong	arg01, objptr
1dfc8                 | ' repeat i from 0 to (8*cursorshape)-1
1dfc8     00 00 06 F6 | 	mov	_var01, #0
1dfcc     09 03 02 F6 | 	mov	_var02, arg01
1dfd0     03 02 66 F0 | 	shl	_var02, #3
1dfd4     01 02 86 F1 | 	sub	_var02, #1
1dfd8     00 02 56 F2 | 	cmps	_var02, #0 wc
1dfdc     01 04 86 F6 | 	negc	_var03, #1
1dfe0     02 07 02 F6 | 	mov	_var04, _var03
1dfe4     02 03 02 F1 | 	add	_var02, _var03
1dfe8     0A 00 00 FF 
1dfec     90 E4 85 F1 | 	sub	objptr, ##5264
1dff0     97 0C 48 FB | 	callpa	#(@LR__2401-@LR__2400)>>2,fcache_load_ptr_
1dff4                 | LR__2400
1dff4                 | '   cursor[i]:=0
1dff4     00 05 02 F6 | 	mov	_var03, _var01
1dff8     F2 04 02 F1 | 	add	_var03, objptr
1dffc     02 01 48 FC | 	wrbyte	#0, _var03
1e000     03 01 02 F1 | 	add	_var01, _var04
1e004     01 01 0A F2 | 	cmp	_var01, _var02 wz
1e008     E8 FF 9F 5D |  if_ne	jmp	#LR__2400
1e00c                 | LR__2401
1e00c                 | ' repeat i from 8*cursorshape to 127
1e00c     0A 00 00 FF 
1e010     90 E4 05 F1 | 	add	objptr, ##5264
1e014     F2 06 02 FB | 	rdlong	_var04, objptr
1e018     03 01 02 F6 | 	mov	_var01, _var04
1e01c     03 00 66 F0 | 	shl	_var01, #3
1e020     0B 00 00 FF 
1e024     C6 E4 85 F1 | 	sub	objptr, ##5830
1e028     03 06 66 F0 | 	shl	_var04, #3
1e02c     80 06 56 F2 | 	cmps	_var04, #128 wc
1e030     01 04 A6 F6 | 	negnc	_var03, #1
1e034     7F 02 06 F6 | 	mov	_var02, #127
1e038     02 03 02 F1 | 	add	_var02, _var03
1e03c     97 1A 48 FB | 	callpa	#(@LR__2403-@LR__2402)>>2,fcache_load_ptr_
1e040                 | LR__2402
1e040                 | '   cursor[i]:=cursorcolor
1e040     00 07 02 F6 | 	mov	_var04, _var01
1e044     01 00 00 FF 
1e048     36 E4 05 F1 | 	add	objptr, ##566
1e04c     F2 06 02 F1 | 	add	_var04, objptr
1e050     0A 00 00 FF 
1e054     8C E4 05 F1 | 	add	objptr, ##5260
1e058     F2 12 02 FB | 	rdlong	arg01, objptr
1e05c     0B 00 00 FF 
1e060     C2 E4 85 F1 | 	sub	objptr, ##5826
1e064     03 13 42 FC | 	wrbyte	arg01, _var04
1e068     02 01 02 F1 | 	add	_var01, _var03
1e06c     01 01 0A F2 | 	cmp	_var01, _var02 wz
1e070     CC FF 9F 5D |  if_ne	jmp	#LR__2402
1e074                 | LR__2403
1e074                 | _hg010b_spin2_setcursorshape_ret
1e074     2D 00 64 FD | 	ret
1e078                 | 
1e078                 | ' 
1e078                 | ' pub setcursorcolor(color) | i
1e078                 | _hg010b_spin2_setcursorcolor
1e078                 | ' 
1e078                 | ' cursorcolor:=color
1e078     0B 00 00 FF 
1e07c     C2 E4 05 F1 | 	add	objptr, ##5826
1e080     F2 12 62 FC | 	wrlong	arg01, objptr
1e084                 | ' repeat i from 0 to (8*cursorshape)-1
1e084     00 12 06 F6 | 	mov	arg01, #0
1e088     04 E4 05 F1 | 	add	objptr, #4
1e08c     F2 00 02 FB | 	rdlong	_var01, objptr
1e090     03 00 66 F0 | 	shl	_var01, #3
1e094     01 00 86 F1 | 	sub	_var01, #1
1e098     00 00 56 F2 | 	cmps	_var01, #0 wc
1e09c     01 02 86 F6 | 	negc	_var02, #1
1e0a0     01 05 02 F6 | 	mov	_var03, _var02
1e0a4     01 01 02 F1 | 	add	_var01, _var02
1e0a8     0A 00 00 FF 
1e0ac     90 E4 85 F1 | 	sub	objptr, ##5264
1e0b0     97 0C 48 FB | 	callpa	#(@LR__2411-@LR__2410)>>2,fcache_load_ptr_
1e0b4                 | LR__2410
1e0b4                 | '   cursor[i]:=0
1e0b4     09 03 02 F6 | 	mov	_var02, arg01
1e0b8     F2 02 02 F1 | 	add	_var02, objptr
1e0bc     01 01 48 FC | 	wrbyte	#0, _var02
1e0c0     02 13 02 F1 | 	add	arg01, _var03
1e0c4     00 13 0A F2 | 	cmp	arg01, _var01 wz
1e0c8     E8 FF 9F 5D |  if_ne	jmp	#LR__2410
1e0cc                 | LR__2411
1e0cc                 | ' repeat i from 8*cursorshape to 127
1e0cc     0A 00 00 FF 
1e0d0     90 E4 05 F1 | 	add	objptr, ##5264
1e0d4     F2 04 02 FB | 	rdlong	_var03, objptr
1e0d8     02 13 02 F6 | 	mov	arg01, _var03
1e0dc     03 12 66 F0 | 	shl	arg01, #3
1e0e0     0B 00 00 FF 
1e0e4     C6 E4 85 F1 | 	sub	objptr, ##5830
1e0e8     03 04 66 F0 | 	shl	_var03, #3
1e0ec     80 04 56 F2 | 	cmps	_var03, #128 wc
1e0f0     01 02 A6 F6 | 	negnc	_var02, #1
1e0f4     7F 00 06 F6 | 	mov	_var01, #127
1e0f8     01 01 02 F1 | 	add	_var01, _var02
1e0fc     97 1A 48 FB | 	callpa	#(@LR__2413-@LR__2412)>>2,fcache_load_ptr_
1e100                 | LR__2412
1e100                 | '   cursor[i]:=cursorcolor
1e100     09 05 02 F6 | 	mov	_var03, arg01
1e104     01 00 00 FF 
1e108     36 E4 05 F1 | 	add	objptr, ##566
1e10c     F2 04 02 F1 | 	add	_var03, objptr
1e110     0A 00 00 FF 
1e114     8C E4 05 F1 | 	add	objptr, ##5260
1e118     F2 06 02 FB | 	rdlong	_var04, objptr
1e11c     0B 00 00 FF 
1e120     C2 E4 85 F1 | 	sub	objptr, ##5826
1e124     02 07 42 FC | 	wrbyte	_var04, _var03
1e128     01 13 02 F1 | 	add	arg01, _var02
1e12c     00 13 0A F2 | 	cmp	arg01, _var01 wz
1e130     CC FF 9F 5D |  if_ne	jmp	#LR__2412
1e134                 | LR__2413
1e134                 | _hg010b_spin2_setcursorcolor_ret
1e134     2D 00 64 FD | 	ret
1e138                 | 
1e138                 | '   
1e138                 | '   
1e138                 | '   
1e138                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1e138                 | _hg010b_spin2_setmode
1e138     02 4A 05 F6 | 	mov	COUNT_, #2
1e13c     A8 00 A0 FD | 	call	#pushregs_
1e140                 | ' 
1e140                 | ' 
1e140                 | ' dl_ptr:=@emptydl[0]
1e140     01 00 00 FF 
1e144     1D E4 05 F1 | 	add	objptr, ##541
1e148     F2 1A 02 F6 | 	mov	arg05, objptr
1e14c     FD E5 85 F1 | 	sub	objptr, #509
1e150     F2 1A 62 FC | 	wrlong	arg05, objptr
1e154                 | ' 
1e154                 | ' if cog>0 
1e154     10 E4 05 F1 | 	add	objptr, #16
1e158     F2 1A 02 FB | 	rdlong	arg05, objptr
1e15c     30 E4 85 F1 | 	sub	objptr, #48
1e160     01 1A 56 F2 | 	cmps	arg05, #1 wc
1e164                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1e164     01 12 06 36 |  if_ae	mov	arg01, #1
1e168     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1e16c                 | ' xres:=1024
1e16c     01 00 00 FF 
1e170     26 E4 05 F1 | 	add	objptr, ##550
1e174     02 00 80 FF 
1e178     F2 00 68 FC | 	wrlong	##1024, objptr
1e17c                 | ' yres:=600
1e17c     04 E4 05 F1 | 	add	objptr, #4
1e180     01 00 80 FF 
1e184     F2 B0 68 FC | 	wrlong	##600, objptr
1e188                 | ' ppl:=(timings[3])
1e188     10 00 00 FF 
1e18c     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1e190     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1e194     51 E5 85 F1 | 	sub	objptr, #337
1e198     F2 1A 62 FC | 	wrlong	arg05, objptr
1e19c                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1e19c     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1e1a0     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1e1a4     01 1E 66 F0 | 	shl	local01, #1
1e1a8     80 E4 85 F1 | 	sub	objptr, #128
1e1ac     F2 1E 62 FC | 	wrlong	local01, objptr
1e1b0                 | ' cpl1:=cpl '' todo remove
1e1b0     04 E4 05 F1 | 	add	objptr, #4
1e1b4     F2 1E 62 FC | 	wrlong	local01, objptr
1e1b8                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1e1b8     02 00 00 FF 
1e1bc     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1e1c0     41 E4 85 F1 | 	sub	objptr, #65
1e1c4     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1e1c8                 | ' repeat i from 0 to 3
1e1c8     00 20 06 F6 | 	mov	local02, #0
1e1cc     02 00 00 FF 
1e1d0     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1e1d4     08 E4 05 F1 | 	add	objptr, #8
1e1d8     97 20 48 FB | 	callpa	#(@LR__2421-@LR__2420)>>2,fcache_load_ptr_
1e1dc                 | LR__2420
1e1dc                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1e1dc     10 1F 02 F6 | 	mov	local01, local02
1e1e0     02 1E 66 F0 | 	shl	local01, #2
1e1e4     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1e1e8     F2 1A 02 FB | 	rdlong	arg05, objptr
1e1ec     11 1A 66 F0 | 	shl	arg05, #17
1e1f0     0F 1F 02 FB | 	rdlong	local01, local01
1e1f4     0D 1F 02 F1 | 	add	local01, arg05
1e1f8     80 40 38 FF 
1e1fc     00 1E 06 F1 | 	add	local01, ##1887502336
1e200     10 1B 02 F6 | 	mov	arg05, local02
1e204     02 1A 66 F0 | 	shl	arg05, #2
1e208     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
1e20c     0D 1F 62 FC | 	wrlong	local01, arg05
1e210     01 20 06 F1 | 	add	local02, #1
1e214     04 20 56 F2 | 	cmps	local02, #4 wc
1e218     C0 FF 9F CD |  if_b	jmp	#LR__2420
1e21c                 | LR__2421
1e21c     24 E4 85 F1 | 	sub	objptr, #36
1e220                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
1e220     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1e224     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1e228     14 1E 66 FC | 	wrlong	local01, #20
1e22c                 | ' hubset(timings[10])
1e22c     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
1e230     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1e234     10 00 00 FF 
1e238     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
1e23c     00 12 62 FD | 	hubset	arg01
1e240                 | ' waitms(1)                                                   	' wait for stabilization
1e240     01 12 06 F6 | 	mov	arg01, #1
1e244     94 2B B0 FD | 	call	#__system___waitms
1e248     10 00 00 FF 
1e24c     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1e250     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1e254     61 E4 05 F1 | 	add	objptr, #97
1e258     F2 20 62 FC | 	wrlong	local02, objptr
1e25c     10 1F 52 F6 | 	abs	local01, local02 wc
1e260     04 1E 46 F0 | 	shr	local01, #4
1e264     0F 1F 82 F6 | 	negc	local01, local01
1e268     9C E4 05 F1 | 	add	objptr, #156
1e26c     F2 1E 62 FC | 	wrlong	local01, objptr
1e270     A4 E4 85 F1 | 	sub	objptr, #164
1e274     F2 20 02 FB | 	rdlong	local02, objptr
1e278     08 E4 05 F1 | 	add	objptr, #8
1e27c     F2 1E 02 FB | 	rdlong	local01, objptr
1e280     0F 21 02 FD | 	qmul	local02, local01
1e284                 | ' lines:=timings[11]
1e284                 | ' t_lines:=lines/16
1e284                 | ' buflen:=cpl*lines						' framebuffer length in longs
1e284     29 E4 85 F1 | 	sub	objptr, #41
1e288     19 1E C6 F9 | 	decod	local01, #25
1e28c     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
1e290     18 20 62 FD | 	getqx	local02
1e294     F2 20 62 FC | 	wrlong	local02, objptr
1e298     38 E4 85 F1 | 	sub	objptr, #56
1e29c     02 20 66 F0 | 	shl	local02, #2
1e2a0     10 1F 82 F1 | 	sub	local01, local02
1e2a4     F2 1E 62 FC | 	wrlong	local01, objptr
1e2a8     FD E4 05 F1 | 	add	objptr, #253
1e2ac     F2 20 02 FB | 	rdlong	local02, objptr
1e2b0     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1e2b4     0D 21 02 FD | 	qmul	local02, arg05
1e2b8                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1e2b8                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
1e2b8     F9 E4 85 F1 | 	sub	objptr, #249
1e2bc                 | ' mode_ptr:=@timings						' set pointers to timings
1e2bc     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
1e2c0                 | ' graphmode:=1024+512+192+48							' det global variable
1e2c0                 | ' makedl(graphmode)							' make a DL for the mode
1e2c0     03 00 00 FF 
1e2c4     F0 12 06 F6 | 	mov	arg01, ##1776
1e2c8     18 20 62 FD | 	getqx	local02
1e2cc     10 1F 82 F1 | 	sub	local01, local02
1e2d0     F2 1E 62 FC | 	wrlong	local01, objptr
1e2d4     14 E4 05 F1 | 	add	objptr, #20
1e2d8     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1e2dc     79 E4 05 F1 | 	add	objptr, #121
1e2e0     03 00 80 FF 
1e2e4     F2 E0 69 FC | 	wrlong	##1776, objptr
1e2e8     91 E4 85 F1 | 	sub	objptr, #145
1e2ec     10 00 00 FF 
1e2f0     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1e2f4     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
1e2f8                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1e2f8     F2 1E 02 FB | 	rdlong	local01, objptr
1e2fc     DD E4 05 F1 | 	add	objptr, #221
1e300     F2 1E 62 FC | 	wrlong	local01, objptr
1e304                 | ' s_font_ptr:=font_ptr
1e304     D5 E4 85 F1 | 	sub	objptr, #213
1e308     F2 1E 02 FB | 	rdlong	local01, objptr
1e30c     D9 E4 05 F1 | 	add	objptr, #217
1e310     F2 1E 62 FC | 	wrlong	local01, objptr
1e314                 | ' s_lines:=lines
1e314     80 E4 85 F1 | 	sub	objptr, #128
1e318     F2 1E 02 FB | 	rdlong	local01, objptr
1e31c     84 E4 05 F1 | 	add	objptr, #132
1e320     F2 1E 62 FC | 	wrlong	local01, objptr
1e324                 | ' s_buflen:=buflen
1e324     AD E4 85 F1 | 	sub	objptr, #173
1e328     F2 1E 02 FB | 	rdlong	local01, objptr
1e32c     B5 E4 05 F1 | 	add	objptr, #181
1e330     F2 1E 62 FC | 	wrlong	local01, objptr
1e334                 | ' s_cpl:=cpl
1e334     94 E4 85 F1 | 	sub	objptr, #148
1e338     F2 1E 02 FB | 	rdlong	local01, objptr
1e33c     90 E4 05 F1 | 	add	objptr, #144
1e340     F2 1E 62 FC | 	wrlong	local01, objptr
1e344                 | ' s_cpl1:=cpl
1e344     90 E4 85 F1 | 	sub	objptr, #144
1e348     F2 1E 02 FB | 	rdlong	local01, objptr
1e34c     98 E4 05 F1 | 	add	objptr, #152
1e350     F2 1E 62 FC | 	wrlong	local01, objptr
1e354                 | ' st_lines:=t_lines
1e354     0C E4 05 F1 | 	add	objptr, #12
1e358     F2 1E 02 FB | 	rdlong	local01, objptr
1e35c     04 E4 05 F1 | 	add	objptr, #4
1e360     F2 1E 62 FC | 	wrlong	local01, objptr
1e364                 | ' ppl:=ppl/xzoom  
1e364     28 E4 85 F1 | 	sub	objptr, #40
1e368     F2 7C 02 FB | 	rdlong	muldiva_, objptr
1e36c     2C E4 05 F1 | 	add	objptr, #44
1e370     F2 7E 02 FB | 	rdlong	muldivb_, objptr
1e374     05 E5 85 F1 | 	sub	objptr, #261
1e378     BA 00 A0 FD | 	call	#divide_
1e37c     D9 E4 05 F1 | 	add	objptr, #217
1e380     F2 7E 62 FC | 	wrlong	muldivb_, objptr
1e384                 | ' s_ppl:=ppl
1e384     1C E4 05 F1 | 	add	objptr, #28
1e388     F2 7E 62 FC | 	wrlong	muldivb_, objptr
1e38c     F5 E4 85 F1 | 	sub	objptr, #245
1e390                 | ' waitms(20)							' wait 
1e390     14 12 06 F6 | 	mov	arg01, #20
1e394     44 2A B0 FD | 	call	#__system___waitms
1e398                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1e398     04 E4 05 F1 | 	add	objptr, #4
1e39c     F2 12 02 FB | 	rdlong	arg01, objptr
1e3a0     04 E4 85 F1 | 	sub	objptr, #4
1e3a4     F2 16 02 FB | 	rdlong	arg03, objptr
1e3a8     09 17 82 F1 | 	sub	arg03, arg01
1e3ac     20 14 06 F6 | 	mov	arg02, #32
1e3b0     00 18 06 F6 | 	mov	arg04, #0
1e3b4     01 1A 06 F6 | 	mov	arg05, #1
1e3b8     0B 00 00 FF 
1e3bc     CC E4 05 F1 | 	add	objptr, ##5836
1e3c0     1C 1C B0 FD | 	call	#_psram_spin2_fill
1e3c4     0B 00 00 FF 
1e3c8     CC E4 85 F1 | 	sub	objptr, ##5836
1e3cc     A7 F0 03 F6 | 	mov	ptra, fp
1e3d0     B2 00 A0 FD | 	call	#popregs_
1e3d4                 | _hg010b_spin2_setmode_ret
1e3d4     2D 00 64 FD | 	ret
1e3d8                 | 
1e3d8                 | ' 
1e3d8                 | ' '****************************************************************************************************************
1e3d8                 | ' '                                                                                                             	*
1e3d8                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1e3d8                 | ' '                                                                                                             	*
1e3d8                 | ' '****************************************************************************************************************
1e3d8                 | ' 
1e3d8                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1e3d8                 | _hg010b_spin2_makedl
1e3d8                 | ' 
1e3d8                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1e3d8                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1e3d8                 | ' repeat i from 0 to 11                                                           ' clear DL
1e3d8     00 00 06 F6 | 	mov	_var01, #0
1e3dc     ED E5 05 F1 | 	add	objptr, #493
1e3e0     97 0E 48 FB | 	callpa	#(@LR__2431-@LR__2430)>>2,fcache_load_ptr_
1e3e4                 | LR__2430
1e3e4                 | '   displaylist[i]:=0 
1e3e4     00 03 02 F6 | 	mov	_var02, _var01
1e3e8     02 02 66 F0 | 	shl	_var02, #2
1e3ec     F2 02 02 F1 | 	add	_var02, objptr
1e3f0     01 01 68 FC | 	wrlong	#0, _var02
1e3f4     01 00 06 F1 | 	add	_var01, #1
1e3f8     0C 00 56 F2 | 	cmps	_var01, #12 wc
1e3fc     E4 FF 9F CD |  if_b	jmp	#LR__2430
1e400                 | LR__2431
1e400                 | '                         ' 
1e400                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1e400     8C E5 85 F1 | 	sub	objptr, #396
1e404     F2 02 02 FB | 	rdlong	_var02, objptr
1e408     14 02 66 F0 | 	shl	_var02, #20
1e40c     01 02 06 F1 | 	add	_var02, #1
1e410     04 E4 85 F1 | 	sub	objptr, #4
1e414     F2 00 02 FB | 	rdlong	_var01, objptr
1e418     02 00 66 F0 | 	shl	_var01, #2
1e41c     04 00 66 F0 | 	shl	_var01, #4
1e420     00 03 02 F1 | 	add	_var02, _var01
1e424     90 E5 05 F1 | 	add	objptr, #400
1e428     F2 02 62 FC | 	wrlong	_var02, objptr
1e42c     ED E5 85 F1 | 	sub	objptr, #493
1e430                 | ' displaylist[1]:=buf_ptr<<4+%10  
1e430     F2 02 02 FB | 	rdlong	_var02, objptr
1e434     04 02 66 F0 | 	shl	_var02, #4
1e438     02 02 06 F1 | 	add	_var02, #2
1e43c     F1 E5 05 F1 | 	add	objptr, #497
1e440     F2 02 62 FC | 	wrlong	_var02, objptr
1e444                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1e444     04 E4 85 F1 | 	sub	objptr, #4
1e448     F2 02 02 F6 | 	mov	_var02, objptr
1e44c     CD E5 85 F1 | 	sub	objptr, #461
1e450     F2 02 62 FC | 	wrlong	_var02, objptr
1e454     20 E4 85 F1 | 	sub	objptr, #32
1e458                 | _hg010b_spin2_makedl_ret
1e458     2D 00 64 FD | 	ret
1e45c                 | 
1e45c                 | ' 
1e45c                 | ' 
1e45c                 | ' '****************************************************************************************************************
1e45c                 | ' '                                                                        					*
1e45c                 | ' '  Graphic primitives                                                    					*
1e45c                 | ' '                                                                        					*
1e45c                 | ' '****************************************************************************************************************
1e45c                 | ' 
1e45c                 | ' pub setspriteptr(num,ptr)
1e45c                 | _hg010b_spin2_setspriteptr
1e45c                 | ' long[@spr1ptr+12*num]:=ptr
1e45c     11 E5 05 F1 | 	add	objptr, #273
1e460     F2 00 02 F6 | 	mov	_var01, objptr
1e464     09 03 02 F6 | 	mov	_var02, arg01
1e468     01 02 66 F0 | 	shl	_var02, #1
1e46c     09 03 02 F1 | 	add	_var02, arg01
1e470     02 02 66 F0 | 	shl	_var02, #2
1e474     01 01 02 F1 | 	add	_var01, _var02
1e478     00 15 62 FC | 	wrlong	arg02, _var01
1e47c     11 E5 85 F1 | 	sub	objptr, #273
1e480                 | _hg010b_spin2_setspriteptr_ret
1e480     2D 00 64 FD | 	ret
1e484                 | 
1e484                 | ' 
1e484                 | ' pub setspritepos(num,x,y)
1e484                 | _hg010b_spin2_setspritepos
1e484                 | ' if y>601
1e484     01 00 00 FF 
1e488     5A 16 56 F2 | 	cmps	arg03, ##602 wc
1e48c                 | '   y:=601
1e48c     01 00 00 3F 
1e490     59 16 06 36 |  if_ae	mov	arg03, ##601
1e494                 | ' if x>1024
1e494     02 00 00 FF 
1e498     01 14 56 F2 | 	cmps	arg02, ##1025 wc
1e49c                 | '   x:=1024
1e49c     0A 14 C6 39 |  if_ae	decod	arg02, #10
1e4a0                 | ' word[@spr1ptr+12*num+4]:=x
1e4a0     11 E5 05 F1 | 	add	objptr, #273
1e4a4     F2 00 02 F6 | 	mov	_var01, objptr
1e4a8     09 03 02 F6 | 	mov	_var02, arg01
1e4ac     01 02 66 F0 | 	shl	_var02, #1
1e4b0     09 03 02 F1 | 	add	_var02, arg01
1e4b4     02 02 66 F0 | 	shl	_var02, #2
1e4b8     01 01 02 F1 | 	add	_var01, _var02
1e4bc     04 00 06 F1 | 	add	_var01, #4
1e4c0     00 15 52 FC | 	wrword	arg02, _var01
1e4c4                 | ' word[@spr1ptr+12*num+6]:=y
1e4c4     F2 00 02 F6 | 	mov	_var01, objptr
1e4c8     09 03 02 F6 | 	mov	_var02, arg01
1e4cc     01 02 66 F0 | 	shl	_var02, #1
1e4d0     09 03 02 F1 | 	add	_var02, arg01
1e4d4     02 02 66 F0 | 	shl	_var02, #2
1e4d8     01 01 02 F1 | 	add	_var01, _var02
1e4dc     06 00 06 F1 | 	add	_var01, #6
1e4e0     00 17 52 FC | 	wrword	arg03, _var01
1e4e4     11 E5 85 F1 | 	sub	objptr, #273
1e4e8                 | _hg010b_spin2_setspritepos_ret
1e4e8     2D 00 64 FD | 	ret
1e4ec                 | 
1e4ec                 | ' 
1e4ec                 | ' pub setspritesize(num,w,h)
1e4ec                 | _hg010b_spin2_setspritesize
1e4ec                 | ' word[@spr1ptr+12*num+8]:=w
1e4ec     11 E5 05 F1 | 	add	objptr, #273
1e4f0     F2 00 02 F6 | 	mov	_var01, objptr
1e4f4     09 03 02 F6 | 	mov	_var02, arg01
1e4f8     01 02 66 F0 | 	shl	_var02, #1
1e4fc     09 03 02 F1 | 	add	_var02, arg01
1e500     02 02 66 F0 | 	shl	_var02, #2
1e504     01 01 02 F1 | 	add	_var01, _var02
1e508     08 00 06 F1 | 	add	_var01, #8
1e50c     00 15 52 FC | 	wrword	arg02, _var01
1e510                 | ' word[@spr1ptr+12*num+10]:=h
1e510     F2 00 02 F6 | 	mov	_var01, objptr
1e514     09 03 02 F6 | 	mov	_var02, arg01
1e518     01 02 66 F0 | 	shl	_var02, #1
1e51c     09 03 02 F1 | 	add	_var02, arg01
1e520     02 02 66 F0 | 	shl	_var02, #2
1e524     01 01 02 F1 | 	add	_var01, _var02
1e528     0A 00 06 F1 | 	add	_var01, #10
1e52c     00 17 52 FC | 	wrword	arg03, _var01
1e530     11 E5 85 F1 | 	sub	objptr, #273
1e534                 | _hg010b_spin2_setspritesize_ret
1e534     2D 00 64 FD | 	ret
1e538                 | 
1e538                 | ' 
1e538                 | ' 
1e538                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1e538                 | ' 
1e538                 | ' 
1e538                 | ' pub putpixel(x,y,c)
1e538                 | _hg010b_spin2_putpixel
1e538     04 4A 05 F6 | 	mov	COUNT_, #4
1e53c     A8 00 A0 FD | 	call	#pushregs_
1e540     09 1F 02 F6 | 	mov	local01, arg01
1e544                 | ' 
1e544                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1e544     00 20 06 F6 | 	mov	local02, #0
1e548     00 1E 56 F2 | 	cmps	local01, #0 wc
1e54c     01 20 66 36 |  if_ae	neg	local02, #1
1e550     E9 E4 05 F1 | 	add	objptr, #233
1e554     F2 1A 02 FB | 	rdlong	arg05, objptr
1e558     02 1A 66 F0 | 	shl	arg05, #2
1e55c     0D 1F 52 F2 | 	cmps	local01, arg05 wc
1e560     11 23 A2 F1 | 	subx	local03, local03
1e564     11 21 02 F5 | 	and	local02, local03
1e568     00 22 06 F6 | 	mov	local03, #0
1e56c     00 14 56 F2 | 	cmps	arg02, #0 wc
1e570     01 22 66 36 |  if_ae	neg	local03, #1
1e574     11 21 02 F5 | 	and	local02, local03
1e578     04 E4 85 F1 | 	sub	objptr, #4
1e57c     F2 22 02 FB | 	rdlong	local03, objptr
1e580     E5 E4 85 F1 | 	sub	objptr, #229
1e584     11 15 52 F2 | 	cmps	arg02, local03 wc
1e588     12 25 A2 F1 | 	subx	local04, local04
1e58c     12 21 CA F7 | 	test	local02, local04 wz
1e590     48 00 90 AD |  if_e	jmp	#LR__2440
1e594     DD E4 05 F1 | 	add	objptr, #221
1e598     F2 12 02 FB | 	rdlong	arg01, objptr
1e59c     14 E4 05 F1 | 	add	objptr, #20
1e5a0     F2 24 02 FB | 	rdlong	local04, objptr
1e5a4     02 24 66 F0 | 	shl	local04, #2
1e5a8     0A 25 02 FD | 	qmul	local04, arg02
1e5ac                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1e5ac     0B 15 02 F6 | 	mov	arg02, arg03
1e5b0     01 16 06 F6 | 	mov	arg03, #1
1e5b4     00 18 06 F6 | 	mov	arg04, #0
1e5b8     01 1A 06 F6 | 	mov	arg05, #1
1e5bc     0A 00 00 FF 
1e5c0     DB E5 05 F1 | 	add	objptr, ##5595
1e5c4     18 24 62 FD | 	getqx	local04
1e5c8     0F 25 02 F1 | 	add	local04, local01
1e5cc     12 13 02 F1 | 	add	arg01, local04
1e5d0     0C 1A B0 FD | 	call	#_psram_spin2_fill
1e5d4     0B 00 00 FF 
1e5d8     CC E4 85 F1 | 	sub	objptr, ##5836
1e5dc                 | LR__2440
1e5dc     A7 F0 03 F6 | 	mov	ptra, fp
1e5e0     B2 00 A0 FD | 	call	#popregs_
1e5e4                 | _hg010b_spin2_putpixel_ret
1e5e4     2D 00 64 FD | 	ret
1e5e8                 | 
1e5e8                 | ' 
1e5e8                 | ' pub putpixel2(x,y,c)
1e5e8                 | _hg010b_spin2_putpixel2
1e5e8     02 4A 05 F6 | 	mov	COUNT_, #2
1e5ec     A8 00 A0 FD | 	call	#pushregs_
1e5f0     DD E4 05 F1 | 	add	objptr, #221
1e5f4     F2 1E 02 FB | 	rdlong	local01, objptr
1e5f8     14 E4 05 F1 | 	add	objptr, #20
1e5fc     F2 1A 02 FB | 	rdlong	arg05, objptr
1e600     02 1A 66 F0 | 	shl	arg05, #2
1e604     0A 1B 02 FD | 	qmul	arg05, arg02
1e608                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1e608     0B 15 02 F6 | 	mov	arg02, arg03
1e60c     01 16 06 F6 | 	mov	arg03, #1
1e610     00 18 06 F6 | 	mov	arg04, #0
1e614     01 1A 06 F6 | 	mov	arg05, #1
1e618     0A 00 00 FF 
1e61c     DB E5 05 F1 | 	add	objptr, ##5595
1e620     18 20 62 FD | 	getqx	local02
1e624     09 21 02 F1 | 	add	local02, arg01
1e628     10 1F 02 F1 | 	add	local01, local02
1e62c     0F 13 02 F6 | 	mov	arg01, local01
1e630     AC 19 B0 FD | 	call	#_psram_spin2_fill
1e634     0B 00 00 FF 
1e638     CC E4 85 F1 | 	sub	objptr, ##5836
1e63c     A7 F0 03 F6 | 	mov	ptra, fp
1e640     B2 00 A0 FD | 	call	#popregs_
1e644                 | _hg010b_spin2_putpixel2_ret
1e644     2D 00 64 FD | 	ret
1e648                 | 
1e648                 | ' 
1e648                 | ' pub getpixel2(x,y): c 
1e648                 | _hg010b_spin2_getpixel2
1e648     02 4A 05 F6 | 	mov	COUNT_, #2
1e64c     A8 00 A0 FD | 	call	#pushregs_
1e650     0C F0 07 F1 | 	add	ptra, #12
1e654     04 4E 05 F1 | 	add	fp, #4
1e658     A7 12 62 FC | 	wrlong	arg01, fp
1e65c     04 4E 05 F1 | 	add	fp, #4
1e660     A7 14 62 FC | 	wrlong	arg02, fp
1e664     08 4E 85 F1 | 	sub	fp, #8
1e668     A7 00 68 FC | 	wrlong	#0, fp
1e66c     A7 12 02 F6 | 	mov	arg01, fp
1e670     DD E4 05 F1 | 	add	objptr, #221
1e674     F2 14 02 FB | 	rdlong	arg02, objptr
1e678     14 E4 05 F1 | 	add	objptr, #20
1e67c     F2 16 02 FB | 	rdlong	arg03, objptr
1e680     02 16 66 F0 | 	shl	arg03, #2
1e684     08 4E 05 F1 | 	add	fp, #8
1e688     A7 FA 01 FB | 	rdlong	result1, fp
1e68c     FD 16 02 FD | 	qmul	arg03, result1
1e690                 | ' 
1e690                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1e690     04 4E 85 F1 | 	sub	fp, #4
1e694     A7 1E 02 FB | 	rdlong	local01, fp
1e698     04 4E 85 F1 | 	sub	fp, #4
1e69c     01 16 06 F6 | 	mov	arg03, #1
1e6a0     0A 00 00 FF 
1e6a4     DB E5 05 F1 | 	add	objptr, ##5595
1e6a8     18 20 62 FD | 	getqx	local02
1e6ac     0F 21 02 F1 | 	add	local02, local01
1e6b0     10 15 02 F1 | 	add	arg02, local02
1e6b4     F0 17 B0 FD | 	call	#_psram_spin2_read1
1e6b8     0B 00 00 FF 
1e6bc     CC E4 85 F1 | 	sub	objptr, ##5836
1e6c0                 | ' return c
1e6c0     A7 FA 01 FB | 	rdlong	result1, fp
1e6c4     A7 F0 03 F6 | 	mov	ptra, fp
1e6c8     B2 00 A0 FD | 	call	#popregs_
1e6cc                 | _hg010b_spin2_getpixel2_ret
1e6cc     2D 00 64 FD | 	ret
1e6d0                 | 
1e6d0                 | '   
1e6d0                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1e6d0                 | ' 
1e6d0                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1e6d0                 | _hg010b_spin2_fastline
1e6d0     02 4A 05 F6 | 	mov	COUNT_, #2
1e6d4     A8 00 A0 FD | 	call	#pushregs_
1e6d8     09 1F 02 F6 | 	mov	local01, arg01
1e6dc     0A 21 02 F6 | 	mov	local02, arg02
1e6e0                 | ' 
1e6e0                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1e6e0     00 16 56 F2 | 	cmps	arg03, #0 wc
1e6e4     F4 00 90 CD |  if_b	jmp	#LR__2450
1e6e8     01 00 00 FF 
1e6ec     2A E4 05 F1 | 	add	objptr, ##554
1e6f0     F2 1A 02 FB | 	rdlong	arg05, objptr
1e6f4     01 00 00 FF 
1e6f8     2A E4 85 F1 | 	sub	objptr, ##554
1e6fc     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1e700     D8 00 90 3D |  if_ae	jmp	#LR__2450
1e704     00 1E 56 F2 | 	cmps	local01, #0 wc
1e708     00 20 56 C2 |  if_b	cmps	local02, #0 wc
1e70c     CC 00 90 CD |  if_b	jmp	#LR__2450
1e710     01 00 00 FF 
1e714     26 E4 05 F1 | 	add	objptr, ##550
1e718     F2 1A 02 FB | 	rdlong	arg05, objptr
1e71c     01 00 00 FF 
1e720     26 E4 85 F1 | 	sub	objptr, ##550
1e724     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1e728     01 00 00 1F 
1e72c     26 E4 05 11 |  if_a	add	objptr, ##550
1e730     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1e734     01 00 00 1F 
1e738     26 E4 85 11 |  if_a	sub	objptr, ##550
1e73c     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
1e740                 | '   return
1e740     98 00 90 1D |  if_a	jmp	#LR__2450
1e744     10 1F 5A F2 | 	cmps	local01, local02 wcz
1e748     0F 1B 02 16 |  if_a	mov	arg05, local01
1e74c     10 1F 02 16 |  if_a	mov	local01, local02
1e750     0D 21 02 16 |  if_a	mov	local02, arg05
1e754     00 1E 56 F2 | 	cmps	local01, #0 wc
1e758     00 1E 06 C6 |  if_b	mov	local01, #0
1e75c     01 00 00 FF 
1e760     26 E4 05 F1 | 	add	objptr, ##550
1e764     F2 1A 02 FB | 	rdlong	arg05, objptr
1e768     01 00 00 FF 
1e76c     26 E4 85 F1 | 	sub	objptr, ##550
1e770     0D 21 52 F2 | 	cmps	local02, arg05 wc
1e774     01 00 00 3F 
1e778     26 E4 05 31 |  if_ae	add	objptr, ##550
1e77c     F2 20 02 3B |  if_ae	rdlong	local02, objptr
1e780     01 00 00 3F 
1e784     26 E4 85 31 |  if_ae	sub	objptr, ##550
1e788     DD E4 05 F1 | 	add	objptr, #221
1e78c     F2 12 02 FB | 	rdlong	arg01, objptr
1e790     14 E4 05 F1 | 	add	objptr, #20
1e794     F2 1A 02 FB | 	rdlong	arg05, objptr
1e798     02 1A 66 F0 | 	shl	arg05, #2
1e79c     0B 1B 02 FD | 	qmul	arg05, arg03
1e7a0                 | ' if x1>x2
1e7a0                 | '   x1,x2:=x2,x1
1e7a0                 | ' if x1<0 
1e7a0                 | '   x1:=0
1e7a0                 | ' if x2>=xres
1e7a0                 | '   x2:=xres-1  
1e7a0     01 20 86 31 |  if_ae	sub	local02, #1
1e7a4                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1e7a4     01 16 06 F6 | 	mov	arg03, #1
1e7a8     10 17 02 F1 | 	add	arg03, local02
1e7ac     0F 17 82 F1 | 	sub	arg03, local01
1e7b0     0C 15 02 F6 | 	mov	arg02, arg04
1e7b4     00 18 06 F6 | 	mov	arg04, #0
1e7b8     01 1A 06 F6 | 	mov	arg05, #1
1e7bc     0A 00 00 FF 
1e7c0     DB E5 05 F1 | 	add	objptr, ##5595
1e7c4     18 20 62 FD | 	getqx	local02
1e7c8     0F 21 02 F1 | 	add	local02, local01
1e7cc     10 13 02 F1 | 	add	arg01, local02
1e7d0     0C 18 B0 FD | 	call	#_psram_spin2_fill
1e7d4     0B 00 00 FF 
1e7d8     CC E4 85 F1 | 	sub	objptr, ##5836
1e7dc                 | LR__2450
1e7dc     A7 F0 03 F6 | 	mov	ptra, fp
1e7e0     B2 00 A0 FD | 	call	#popregs_
1e7e4                 | _hg010b_spin2_fastline_ret
1e7e4     2D 00 64 FD | 	ret
1e7e8                 | 
1e7e8                 | ' 
1e7e8                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1e7e8                 | _hg010b_spin2_draw
1e7e8     0E 4A 05 F6 | 	mov	COUNT_, #14
1e7ec     A8 00 A0 FD | 	call	#pushregs_
1e7f0     09 1F 02 F6 | 	mov	local01, arg01
1e7f4     0A 21 02 F6 | 	mov	local02, arg02
1e7f8     0B 23 02 F6 | 	mov	local03, arg03
1e7fc     0C 25 02 F6 | 	mov	local04, arg04
1e800     0D 27 02 F6 | 	mov	local05, arg05
1e804                 | ' 
1e804                 | ' if (y1==y2)
1e804     12 21 0A F2 | 	cmp	local02, local04 wz
1e808     18 00 90 5D |  if_ne	jmp	#LR__2460
1e80c                 | '   fastline(x1,x2,y1,c)
1e80c     0F 13 02 F6 | 	mov	arg01, local01
1e810     11 15 02 F6 | 	mov	arg02, local03
1e814     10 17 02 F6 | 	mov	arg03, local02
1e818     13 19 02 F6 | 	mov	arg04, local05
1e81c     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1e820     F8 00 90 FD | 	jmp	#LR__2466
1e824                 | LR__2460
1e824                 | ' else  
1e824                 | '   x:=x1
1e824     0F 29 02 F6 | 	mov	local06, local01
1e828                 | '   y:=y1
1e828     10 2B 02 F6 | 	mov	local07, local02
1e82c                 | ' 
1e82c                 | '   if (x1<x2) 
1e82c     11 1F 52 F2 | 	cmps	local01, local03 wc
1e830                 | '     xi:=1
1e830     01 2C 06 C6 |  if_b	mov	local08, #1
1e834                 | '     dx:=x2-x1
1e834     11 2F 02 C6 |  if_b	mov	local09, local03
1e838     0F 2F 82 C1 |  if_b	sub	local09, local01
1e83c                 | '   else
1e83c                 | '     xi:=-1
1e83c     01 2C 66 36 |  if_ae	neg	local08, #1
1e840                 | '     dx:=x1-x2
1e840     11 1F 82 31 |  if_ae	sub	local01, local03
1e844     0F 2F 02 36 |  if_ae	mov	local09, local01
1e848                 | '   
1e848                 | '   if (y1<y2) 
1e848     12 21 52 F2 | 	cmps	local02, local04 wc
1e84c                 | '     yi:=1
1e84c     01 30 06 C6 |  if_b	mov	local10, #1
1e850                 | '     dy:=y2-y1
1e850     12 33 02 C6 |  if_b	mov	local11, local04
1e854     10 33 82 C1 |  if_b	sub	local11, local02
1e858                 | '   else
1e858                 | '     yi:=-1
1e858     01 30 66 36 |  if_ae	neg	local10, #1
1e85c                 | '     dy:=y1-y2
1e85c     12 21 82 31 |  if_ae	sub	local02, local04
1e860     10 33 02 36 |  if_ae	mov	local11, local02
1e864                 | ' 
1e864                 | '   putpixel(x,y,c)
1e864     13 17 02 F6 | 	mov	arg03, local05
1e868     14 13 02 F6 | 	mov	arg01, local06
1e86c     15 15 02 F6 | 	mov	arg02, local07
1e870     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e874                 | ' 
1e874                 | '   if (dx>dy)
1e874     19 2F 5A F2 | 	cmps	local09, local11 wcz
1e878     50 00 90 ED |  if_be	jmp	#LR__2462
1e87c                 | '     ai:=(dy-dx)*2
1e87c     19 35 02 F6 | 	mov	local12, local11
1e880     17 35 82 F1 | 	sub	local12, local09
1e884     01 34 66 F0 | 	shl	local12, #1
1e888                 | '     bi:=dy*2
1e888     01 32 66 F0 | 	shl	local11, #1
1e88c     19 37 02 F6 | 	mov	local13, local11
1e890                 | '     d:= bi-dx
1e890     1B 39 02 F6 | 	mov	local14, local13
1e894     17 39 82 F1 | 	sub	local14, local09
1e898                 | '     repeat while (x<>x2) 
1e898                 | LR__2461
1e898     11 29 0A F2 | 	cmp	local06, local03 wz
1e89c     7C 00 90 AD |  if_e	jmp	#LR__2465
1e8a0                 | '       if (d>=0) 
1e8a0     00 38 56 F2 | 	cmps	local14, #0 wc
1e8a4                 | '         x+=xi
1e8a4     16 29 02 31 |  if_ae	add	local06, local08
1e8a8                 | '         y+=yi
1e8a8     18 2B 02 31 |  if_ae	add	local07, local10
1e8ac                 | '         d+=ai
1e8ac     1A 39 02 31 |  if_ae	add	local14, local12
1e8b0                 | '       else
1e8b0                 | '         d+=bi
1e8b0     1B 39 02 C1 |  if_b	add	local14, local13
1e8b4                 | '         x+=xi
1e8b4     16 29 02 C1 |  if_b	add	local06, local08
1e8b8                 | '       putpixel(x,y,c)
1e8b8     14 13 02 F6 | 	mov	arg01, local06
1e8bc     15 15 02 F6 | 	mov	arg02, local07
1e8c0     13 17 02 F6 | 	mov	arg03, local05
1e8c4     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e8c8     CC FF 9F FD | 	jmp	#LR__2461
1e8cc                 | LR__2462
1e8cc                 | '   else
1e8cc                 | '     ai:=(dx-dy)*2
1e8cc     17 35 02 F6 | 	mov	local12, local09
1e8d0     19 35 82 F1 | 	sub	local12, local11
1e8d4     01 34 66 F0 | 	shl	local12, #1
1e8d8                 | '     bi:=dx*2
1e8d8     01 2E 66 F0 | 	shl	local09, #1
1e8dc     17 37 02 F6 | 	mov	local13, local09
1e8e0                 | '     d:=bi-dy
1e8e0     1B 39 02 F6 | 	mov	local14, local13
1e8e4     19 39 82 F1 | 	sub	local14, local11
1e8e8                 | '     repeat while (y<>y2)
1e8e8                 | LR__2463
1e8e8     12 2B 0A F2 | 	cmp	local07, local04 wz
1e8ec     2C 00 90 AD |  if_e	jmp	#LR__2464
1e8f0                 | '       if (d>=0)
1e8f0     00 38 56 F2 | 	cmps	local14, #0 wc
1e8f4                 | '         x+=xi
1e8f4     16 29 02 31 |  if_ae	add	local06, local08
1e8f8                 | '         y+=yi
1e8f8     18 2B 02 31 |  if_ae	add	local07, local10
1e8fc                 | '         d+=ai
1e8fc     1A 39 02 31 |  if_ae	add	local14, local12
1e900                 | '       else
1e900                 | '         d+=bi
1e900     1B 39 02 C1 |  if_b	add	local14, local13
1e904                 | '         y+=yi
1e904     18 2B 02 C1 |  if_b	add	local07, local10
1e908                 | '       putpixel(x, y,c)
1e908     14 13 02 F6 | 	mov	arg01, local06
1e90c     15 15 02 F6 | 	mov	arg02, local07
1e910     13 17 02 F6 | 	mov	arg03, local05
1e914     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e918     CC FF 9F FD | 	jmp	#LR__2463
1e91c                 | LR__2464
1e91c                 | LR__2465
1e91c                 | LR__2466
1e91c     A7 F0 03 F6 | 	mov	ptra, fp
1e920     B2 00 A0 FD | 	call	#popregs_
1e924                 | _hg010b_spin2_draw_ret
1e924     2D 00 64 FD | 	ret
1e928                 | 
1e928                 | '  
1e928                 | ' pub fillpush(val) 
1e928                 | _hg010b_spin2_fillpush
1e928                 | ' fillstack[fillptr]:=val
1e928     0B 00 00 FF 
1e92c     BA E4 05 F1 | 	add	objptr, ##5818
1e930     F2 00 02 FB | 	rdlong	_var01, objptr
1e934     02 00 66 F0 | 	shl	_var01, #2
1e938     0A 00 00 FF 
1e93c     00 E4 85 F1 | 	sub	objptr, ##5120
1e940     F2 00 02 F1 | 	add	_var01, objptr
1e944     00 13 62 FC | 	wrlong	arg01, _var01
1e948                 | ' fillptr+=1   
1e948     0A 00 00 FF 
1e94c     00 E4 05 F1 | 	add	objptr, ##5120
1e950     F2 00 02 FB | 	rdlong	_var01, objptr
1e954     01 00 06 F1 | 	add	_var01, #1
1e958     F2 00 62 FC | 	wrlong	_var01, objptr
1e95c     0B 00 00 FF 
1e960     BA E4 85 F1 | 	sub	objptr, ##5818
1e964                 | _hg010b_spin2_fillpush_ret
1e964     2D 00 64 FD | 	ret
1e968                 | 
1e968                 | ' 
1e968                 | '     
1e968                 | ' pub fillpop() : val
1e968                 | _hg010b_spin2_fillpop
1e968                 | ' 
1e968                 | ' fillptr-=1
1e968     0B 00 00 FF 
1e96c     BA E4 05 F1 | 	add	objptr, ##5818
1e970     F2 FA 01 FB | 	rdlong	result1, objptr
1e974     01 FA 85 F1 | 	sub	result1, #1
1e978     F2 FA 61 FC | 	wrlong	result1, objptr
1e97c                 | ' if fillptr<0
1e97c     0B 00 00 FF 
1e980     BA E4 85 F1 | 	sub	objptr, ##5818
1e984     00 FA 55 F2 | 	cmps	result1, #0 wc
1e988                 | '   fillptr:=0
1e988     0B 00 00 CF 
1e98c     BA E4 05 C1 |  if_b	add	objptr, ##5818
1e990     F2 00 68 CC |  if_b	wrlong	#0, objptr
1e994     0B 00 00 CF 
1e998     BA E4 85 C1 |  if_b	sub	objptr, ##5818
1e99c                 | '   val:=-12345
1e99c     E7 FF 7F CF 
1e9a0     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1e9a4     28 00 90 CD |  if_b	jmp	#LR__2470
1e9a8                 | ' else 
1e9a8                 | '   val:=fillstack[fillptr]
1e9a8     0B 00 00 FF 
1e9ac     BA E4 05 F1 | 	add	objptr, ##5818
1e9b0     F2 00 02 FB | 	rdlong	_var01, objptr
1e9b4     02 00 66 F0 | 	shl	_var01, #2
1e9b8     0A 00 00 FF 
1e9bc     00 E4 85 F1 | 	sub	objptr, ##5120
1e9c0     F2 00 02 F1 | 	add	_var01, objptr
1e9c4     00 01 02 FB | 	rdlong	_var01, _var01
1e9c8     01 00 00 FF 
1e9cc     BA E4 85 F1 | 	sub	objptr, ##698
1e9d0                 | LR__2470
1e9d0                 | ' return val
1e9d0     00 FB 01 F6 | 	mov	result1, _var01
1e9d4                 | _hg010b_spin2_fillpop_ret
1e9d4     2D 00 64 FD | 	ret
1e9d8                 | 
1e9d8                 | ' 
1e9d8                 | '       
1e9d8                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1e9d8                 | _hg010b_spin2_fill
1e9d8     0B 4A 05 F6 | 	mov	COUNT_, #11
1e9dc     A8 00 A0 FD | 	call	#pushregs_
1e9e0                 | ' 
1e9e0                 | ' newcolor:=newcolor & 255
1e9e0     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1e9e4                 | ' oldcolor:=oldcolor & 255
1e9e4     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1e9e8                 | ' 
1e9e8                 | ' if (oldcolor == newcolor) 
1e9e8     0F 21 0A F2 | 	cmp	local02, local01 wz
1e9ec                 | '   return
1e9ec     70 02 90 AD |  if_e	jmp	#LR__2489
1e9f0                 | ' 
1e9f0                 | ' fillptr:=0
1e9f0     0B 00 00 FF 
1e9f4     BA E4 05 F1 | 	add	objptr, ##5818
1e9f8     F2 00 68 FC | 	wrlong	#0, objptr
1e9fc                 | ' fillmax:=0
1e9fc     04 E4 05 F1 | 	add	objptr, #4
1ea00     F2 00 68 FC | 	wrlong	#0, objptr
1ea04     0B 00 00 FF 
1ea08     BE E4 85 F1 | 	sub	objptr, ##5822
1ea0c                 | ' fillpush(x)
1ea0c     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1ea10                 | ' fillpush(y)
1ea10     0A 13 02 F6 | 	mov	arg01, arg02
1ea14     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1ea18                 | ' y:=fillpop()
1ea18     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1ea1c     FD 22 02 F6 | 	mov	local03, result1
1ea20                 | ' x:=fillpop()
1ea20     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1ea24     FD 24 02 F6 | 	mov	local04, result1
1ea28                 | ' 'pinhigh(38)
1ea28                 | ' repeat while (x>-1)       
1ea28                 | LR__2480
1ea28     00 24 56 F2 | 	cmps	local04, #0 wc
1ea2c     30 02 90 CD |  if_b	jmp	#LR__2488
1ea30                 | '  ' pintoggle(39)
1ea30                 | '   x1 := x
1ea30     12 27 02 F6 | 	mov	local05, local04
1ea34                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1ea34                 | LR__2481
1ea34     00 28 06 F6 | 	mov	local06, #0
1ea38     00 2A 06 F6 | 	mov	local07, #0
1ea3c     00 26 56 F2 | 	cmps	local05, #0 wc
1ea40     01 2A 66 36 |  if_ae	neg	local07, #1
1ea44     00 2A 0E F2 | 	cmp	local07, #0 wz
1ea48     00 28 26 56 |  if_ne	not	local06, #0
1ea4c     00 2C 06 F6 | 	mov	local08, #0
1ea50     00 2E 06 F6 | 	mov	local09, #0
1ea54     11 15 02 F6 | 	mov	arg02, local03
1ea58     13 13 02 F6 | 	mov	arg01, local05
1ea5c     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1ea60     10 FB 09 F2 | 	cmp	result1, local02 wz
1ea64     00 2E 26 A6 |  if_e	not	local09, #0
1ea68     00 2E 0E F2 | 	cmp	local09, #0 wz
1ea6c     00 2C 26 56 |  if_ne	not	local08, #0
1ea70     16 29 CA F7 | 	test	local06, local08 wz
1ea74                 | '     x1--
1ea74     01 26 86 51 |  if_ne	sub	local05, #1
1ea78     B8 FF 9F 5D |  if_ne	jmp	#LR__2481
1ea7c                 | '   x1++
1ea7c     01 26 06 F1 | 	add	local05, #1
1ea80                 | '   spanabove := 0
1ea80     00 30 06 F6 | 	mov	local10, #0
1ea84                 | '   spanbelow := 0
1ea84     00 32 06 F6 | 	mov	local11, #0
1ea88                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1ea88                 | LR__2482
1ea88     00 28 06 F6 | 	mov	local06, #0
1ea8c     02 00 00 FF 
1ea90     00 26 56 F2 | 	cmps	local05, ##1024 wc
1ea94     00 28 26 C6 |  if_b	not	local06, #0
1ea98     00 2C 06 F6 | 	mov	local08, #0
1ea9c     00 2E 06 F6 | 	mov	local09, #0
1eaa0     11 15 02 F6 | 	mov	arg02, local03
1eaa4     13 13 02 F6 | 	mov	arg01, local05
1eaa8     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1eaac     10 FB 09 F2 | 	cmp	result1, local02 wz
1eab0     00 2E 26 A6 |  if_e	not	local09, #0
1eab4     00 2E 0E F2 | 	cmp	local09, #0 wz
1eab8     00 2C 26 56 |  if_ne	not	local08, #0
1eabc     16 29 CA F7 | 	test	local06, local08 wz
1eac0     88 01 90 AD |  if_e	jmp	#LR__2487
1eac4                 | '     putpixel2 (x1,y, newcolor & 255)
1eac4     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1eac8     13 13 02 F6 | 	mov	arg01, local05
1eacc     11 15 02 F6 | 	mov	arg02, local03
1ead0     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1ead4                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1ead4     00 28 06 F6 | 	mov	local06, #0
1ead8     00 2A 06 F6 | 	mov	local07, #0
1eadc     00 30 0E F2 | 	cmp	local10, #0 wz
1eae0     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1eae4     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1eae8     00 2A 0E F2 | 	cmp	local07, #0 wz
1eaec     00 28 26 56 |  if_ne	not	local06, #0
1eaf0     00 2C 06 F6 | 	mov	local08, #0
1eaf4     00 2E 06 F6 | 	mov	local09, #0
1eaf8     11 15 02 F6 | 	mov	arg02, local03
1eafc     01 14 86 F1 | 	sub	arg02, #1
1eb00     13 13 02 F6 | 	mov	arg01, local05
1eb04     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1eb08     10 FB 09 F2 | 	cmp	result1, local02 wz
1eb0c     00 2E 26 A6 |  if_e	not	local09, #0
1eb10     00 2E 0E F2 | 	cmp	local09, #0 wz
1eb14     00 2C 26 56 |  if_ne	not	local08, #0
1eb18     16 29 CA F7 | 	test	local06, local08 wz
1eb1c     1C 00 90 AD |  if_e	jmp	#LR__2483
1eb20                 | '       fillpush(x1)
1eb20     13 13 02 F6 | 	mov	arg01, local05
1eb24     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1eb28                 | '       fillpush(y-1)
1eb28     11 13 02 F6 | 	mov	arg01, local03
1eb2c     01 12 86 F1 | 	sub	arg01, #1
1eb30     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1eb34                 | '       spanabove := 1 
1eb34     01 30 06 F6 | 	mov	local10, #1
1eb38     4C 00 90 FD | 	jmp	#LR__2484
1eb3c                 | LR__2483
1eb3c                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1eb3c     00 28 06 F6 | 	mov	local06, #0
1eb40     00 2A 06 F6 | 	mov	local07, #0
1eb44     00 30 0E F2 | 	cmp	local10, #0 wz
1eb48     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1eb4c     01 2A 66 16 |  if_a	neg	local07, #1
1eb50     00 2A 0E F2 | 	cmp	local07, #0 wz
1eb54     00 28 26 56 |  if_ne	not	local06, #0
1eb58     00 2C 06 F6 | 	mov	local08, #0
1eb5c     00 2E 06 F6 | 	mov	local09, #0
1eb60     11 15 02 F6 | 	mov	arg02, local03
1eb64     01 14 86 F1 | 	sub	arg02, #1
1eb68     13 13 02 F6 | 	mov	arg01, local05
1eb6c     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1eb70     10 FB 09 F2 | 	cmp	result1, local02 wz
1eb74     00 2E 26 56 |  if_ne	not	local09, #0
1eb78     00 2E 0E F2 | 	cmp	local09, #0 wz
1eb7c     00 2C 26 56 |  if_ne	not	local08, #0
1eb80     16 29 CA F7 | 	test	local06, local08 wz
1eb84                 | '       spanabove := 0 
1eb84     00 30 06 56 |  if_ne	mov	local10, #0
1eb88                 | LR__2484
1eb88                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1eb88     00 28 06 F6 | 	mov	local06, #0
1eb8c     00 2A 06 F6 | 	mov	local07, #0
1eb90     00 32 0E F2 | 	cmp	local11, #0 wz
1eb94     01 00 00 AF 
1eb98     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1eb9c     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1eba0     00 2A 0E F2 | 	cmp	local07, #0 wz
1eba4     00 28 26 56 |  if_ne	not	local06, #0
1eba8     00 2C 06 F6 | 	mov	local08, #0
1ebac     00 2E 06 F6 | 	mov	local09, #0
1ebb0     11 15 02 F6 | 	mov	arg02, local03
1ebb4     01 14 06 F1 | 	add	arg02, #1
1ebb8     13 13 02 F6 | 	mov	arg01, local05
1ebbc     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1ebc0     10 FB 09 F2 | 	cmp	result1, local02 wz
1ebc4     00 2E 26 A6 |  if_e	not	local09, #0
1ebc8     00 2E 0E F2 | 	cmp	local09, #0 wz
1ebcc     00 2C 26 56 |  if_ne	not	local08, #0
1ebd0     16 29 CA F7 | 	test	local06, local08 wz
1ebd4     1C 00 90 AD |  if_e	jmp	#LR__2485
1ebd8                 | '       fillpush(x1)
1ebd8     13 13 02 F6 | 	mov	arg01, local05
1ebdc     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1ebe0                 | '       fillpush(y + 1)
1ebe0     11 13 02 F6 | 	mov	arg01, local03
1ebe4     01 12 06 F1 | 	add	arg01, #1
1ebe8     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1ebec                 | '       spanBelow := 1
1ebec     01 32 06 F6 | 	mov	local11, #1
1ebf0     50 00 90 FD | 	jmp	#LR__2486
1ebf4                 | LR__2485
1ebf4                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1ebf4     00 28 06 F6 | 	mov	local06, #0
1ebf8     00 2A 06 F6 | 	mov	local07, #0
1ebfc     00 32 0E F2 | 	cmp	local11, #0 wz
1ec00     01 00 00 5F 
1ec04     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
1ec08     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
1ec0c     00 2A 0E F2 | 	cmp	local07, #0 wz
1ec10     00 28 26 56 |  if_ne	not	local06, #0
1ec14     00 2C 06 F6 | 	mov	local08, #0
1ec18     00 2E 06 F6 | 	mov	local09, #0
1ec1c     11 15 02 F6 | 	mov	arg02, local03
1ec20     01 14 06 F1 | 	add	arg02, #1
1ec24     13 13 02 F6 | 	mov	arg01, local05
1ec28     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1ec2c     10 FB 09 F2 | 	cmp	result1, local02 wz
1ec30     00 2E 26 56 |  if_ne	not	local09, #0
1ec34     00 2E 0E F2 | 	cmp	local09, #0 wz
1ec38     00 2C 26 56 |  if_ne	not	local08, #0
1ec3c     16 29 CA F7 | 	test	local06, local08 wz
1ec40                 | '       spanbelow := 0
1ec40     00 32 06 56 |  if_ne	mov	local11, #0
1ec44                 | LR__2486
1ec44                 | '     x1++
1ec44     01 26 06 F1 | 	add	local05, #1
1ec48     3C FE 9F FD | 	jmp	#LR__2482
1ec4c                 | LR__2487
1ec4c                 | '   y:=fillpop()
1ec4c     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1ec50     FD 22 02 F6 | 	mov	local03, result1
1ec54                 | '   x:=fillpop()
1ec54     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1ec58     FD 24 02 F6 | 	mov	local04, result1
1ec5c     C8 FD 9F FD | 	jmp	#LR__2480
1ec60                 | LR__2488
1ec60                 | LR__2489
1ec60     A7 F0 03 F6 | 	mov	ptra, fp
1ec64     B2 00 A0 FD | 	call	#popregs_
1ec68                 | _hg010b_spin2_fill_ret
1ec68     2D 00 64 FD | 	ret
1ec6c                 | 
1ec6c                 | ' 'pinlow(38)    
1ec6c                 | ' 
1ec6c                 | ' '-- A filled circle -----------------------------------------------------
1ec6c                 | ' 
1ec6c                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1ec6c                 | _hg010b_spin2_fcircle
1ec6c     08 4A 05 F6 | 	mov	COUNT_, #8
1ec70     A8 00 A0 FD | 	call	#pushregs_
1ec74     0B 1F 02 F6 | 	mov	local01, arg03
1ec78     FF FF 7F FF 
1ec7c     FE 1F 06 FD | 	qmul	local01, ##-2
1ec80     09 21 02 F6 | 	mov	local02, arg01
1ec84     0A 23 02 F6 | 	mov	local03, arg02
1ec88     0C 25 02 F6 | 	mov	local04, arg04
1ec8c                 | ' 
1ec8c                 | ' d:=5-4*r
1ec8c     0F 19 02 F6 | 	mov	arg04, local01
1ec90     02 18 66 F0 | 	shl	arg04, #2
1ec94     05 26 06 F6 | 	mov	local05, #5
1ec98     0C 27 82 F1 | 	sub	local05, arg04
1ec9c                 | ' x:=0
1ec9c     00 28 06 F6 | 	mov	local06, #0
1eca0                 | ' y:=r
1eca0                 | ' da:=(-2*r+5)*4
1eca0                 | ' db:=3*4
1eca0     0C 2A 06 F6 | 	mov	local07, #12
1eca4                 | ' repeat while (x<=y) 
1eca4     18 2C 62 FD | 	getqx	local08
1eca8     05 2C 06 F1 | 	add	local08, #5
1ecac     02 2C 66 F0 | 	shl	local08, #2
1ecb0                 | LR__2490
1ecb0     0F 29 5A F2 | 	cmps	local06, local01 wcz
1ecb4     B4 00 90 1D |  if_a	jmp	#LR__2492
1ecb8                 | '   fastline(x0-x,x0+x,y0-y,c)
1ecb8     10 13 02 F6 | 	mov	arg01, local02
1ecbc     14 13 82 F1 | 	sub	arg01, local06
1ecc0     10 15 02 F6 | 	mov	arg02, local02
1ecc4     14 15 02 F1 | 	add	arg02, local06
1ecc8     11 17 02 F6 | 	mov	arg03, local03
1eccc     0F 17 82 F1 | 	sub	arg03, local01
1ecd0     12 19 02 F6 | 	mov	arg04, local04
1ecd4     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ecd8                 | '   fastline(x0-x,x0+x,y0+y,c)
1ecd8     10 13 02 F6 | 	mov	arg01, local02
1ecdc     14 13 82 F1 | 	sub	arg01, local06
1ece0     10 15 02 F6 | 	mov	arg02, local02
1ece4     14 15 02 F1 | 	add	arg02, local06
1ece8     11 17 02 F6 | 	mov	arg03, local03
1ecec     0F 17 02 F1 | 	add	arg03, local01
1ecf0     12 19 02 F6 | 	mov	arg04, local04
1ecf4     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ecf8                 | '   fastline(x0-y,x0+y,y0-x,c)
1ecf8     10 13 02 F6 | 	mov	arg01, local02
1ecfc     0F 13 82 F1 | 	sub	arg01, local01
1ed00     10 15 02 F6 | 	mov	arg02, local02
1ed04     0F 15 02 F1 | 	add	arg02, local01
1ed08     11 17 02 F6 | 	mov	arg03, local03
1ed0c     14 17 82 F1 | 	sub	arg03, local06
1ed10     12 19 02 F6 | 	mov	arg04, local04
1ed14     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ed18                 | '   fastline(x0-y,x0+y,y0+x,c)
1ed18     10 13 02 F6 | 	mov	arg01, local02
1ed1c     0F 13 82 F1 | 	sub	arg01, local01
1ed20     10 15 02 F6 | 	mov	arg02, local02
1ed24     0F 15 02 F1 | 	add	arg02, local01
1ed28     11 17 02 F6 | 	mov	arg03, local03
1ed2c     14 17 02 F1 | 	add	arg03, local06
1ed30     12 19 02 F6 | 	mov	arg04, local04
1ed34     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ed38                 | '   if d>0 
1ed38     01 26 56 F2 | 	cmps	local05, #1 wc
1ed3c     18 00 90 CD |  if_b	jmp	#LR__2491
1ed40                 | '     d+=da
1ed40     16 27 02 F1 | 	add	local05, local08
1ed44                 | '     y-=1
1ed44     01 1E 86 F1 | 	sub	local01, #1
1ed48                 | '     x+=1
1ed48     01 28 06 F1 | 	add	local06, #1
1ed4c                 | '     da+=4*4
1ed4c     10 2C 06 F1 | 	add	local08, #16
1ed50                 | '     db+=2*4
1ed50     08 2A 06 F1 | 	add	local07, #8
1ed54     58 FF 9F FD | 	jmp	#LR__2490
1ed58                 | LR__2491
1ed58                 | '   else
1ed58                 | '     d+=db
1ed58     15 27 02 F1 | 	add	local05, local07
1ed5c                 | '     x+=1
1ed5c     01 28 06 F1 | 	add	local06, #1
1ed60                 | '     da+=2*4
1ed60     08 2C 06 F1 | 	add	local08, #8
1ed64                 | '     db+=2*4
1ed64     08 2A 06 F1 | 	add	local07, #8
1ed68     44 FF 9F FD | 	jmp	#LR__2490
1ed6c                 | LR__2492
1ed6c     A7 F0 03 F6 | 	mov	ptra, fp
1ed70     B2 00 A0 FD | 	call	#popregs_
1ed74                 | _hg010b_spin2_fcircle_ret
1ed74     2D 00 64 FD | 	ret
1ed78                 | 
1ed78                 | '  
1ed78                 | ' '-- A circle ------------------------------------------------------------ 
1ed78                 | '  
1ed78                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1ed78                 | _hg010b_spin2_circle
1ed78     08 4A 05 F6 | 	mov	COUNT_, #8
1ed7c     A8 00 A0 FD | 	call	#pushregs_
1ed80     0B 1F 02 F6 | 	mov	local01, arg03
1ed84     FF FF 7F FF 
1ed88     FE 1F 06 FD | 	qmul	local01, ##-2
1ed8c     09 21 02 F6 | 	mov	local02, arg01
1ed90     0A 23 02 F6 | 	mov	local03, arg02
1ed94     0C 25 02 F6 | 	mov	local04, arg04
1ed98                 | ' 
1ed98                 | '  
1ed98                 | ' d:=5-4*r
1ed98     0F 19 02 F6 | 	mov	arg04, local01
1ed9c     02 18 66 F0 | 	shl	arg04, #2
1eda0     05 26 06 F6 | 	mov	local05, #5
1eda4     0C 27 82 F1 | 	sub	local05, arg04
1eda8                 | ' x:=0
1eda8     00 28 06 F6 | 	mov	local06, #0
1edac                 | ' y:=r
1edac                 | ' da:=(-2*r+5)*4
1edac                 | ' db:=3*4
1edac     0C 2A 06 F6 | 	mov	local07, #12
1edb0                 | ' repeat while (x<=y) 
1edb0     18 2C 62 FD | 	getqx	local08
1edb4     05 2C 06 F1 | 	add	local08, #5
1edb8     02 2C 66 F0 | 	shl	local08, #2
1edbc                 | LR__2500
1edbc     0F 29 5A F2 | 	cmps	local06, local01 wcz
1edc0     F4 00 90 1D |  if_a	jmp	#LR__2502
1edc4                 | '   putpixel(x0-x,y0-y,c)
1edc4     10 13 02 F6 | 	mov	arg01, local02
1edc8     14 13 82 F1 | 	sub	arg01, local06
1edcc     11 15 02 F6 | 	mov	arg02, local03
1edd0     0F 15 82 F1 | 	sub	arg02, local01
1edd4     12 17 02 F6 | 	mov	arg03, local04
1edd8     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1eddc                 | '   putpixel(x0-x,y0+y,c)
1eddc     10 13 02 F6 | 	mov	arg01, local02
1ede0     14 13 82 F1 | 	sub	arg01, local06
1ede4     11 15 02 F6 | 	mov	arg02, local03
1ede8     0F 15 02 F1 | 	add	arg02, local01
1edec     12 17 02 F6 | 	mov	arg03, local04
1edf0     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1edf4                 | '   putpixel(x0+x,y0-y,c)
1edf4     10 13 02 F6 | 	mov	arg01, local02
1edf8     14 13 02 F1 | 	add	arg01, local06
1edfc     11 15 02 F6 | 	mov	arg02, local03
1ee00     0F 15 82 F1 | 	sub	arg02, local01
1ee04     12 17 02 F6 | 	mov	arg03, local04
1ee08     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ee0c                 | '   putpixel(x0+x,y0+y,c)
1ee0c     10 13 02 F6 | 	mov	arg01, local02
1ee10     14 13 02 F1 | 	add	arg01, local06
1ee14     11 15 02 F6 | 	mov	arg02, local03
1ee18     0F 15 02 F1 | 	add	arg02, local01
1ee1c     12 17 02 F6 | 	mov	arg03, local04
1ee20     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ee24                 | '   putpixel(x0-y,y0-x,c)
1ee24     10 13 02 F6 | 	mov	arg01, local02
1ee28     0F 13 82 F1 | 	sub	arg01, local01
1ee2c     11 15 02 F6 | 	mov	arg02, local03
1ee30     14 15 82 F1 | 	sub	arg02, local06
1ee34     12 17 02 F6 | 	mov	arg03, local04
1ee38     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ee3c                 | '   putpixel(x0-y,y0+x,c)
1ee3c     10 13 02 F6 | 	mov	arg01, local02
1ee40     0F 13 82 F1 | 	sub	arg01, local01
1ee44     11 15 02 F6 | 	mov	arg02, local03
1ee48     14 15 02 F1 | 	add	arg02, local06
1ee4c     12 17 02 F6 | 	mov	arg03, local04
1ee50     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ee54                 | '   putpixel(x0+y,y0-x,c)
1ee54     10 13 02 F6 | 	mov	arg01, local02
1ee58     0F 13 02 F1 | 	add	arg01, local01
1ee5c     11 15 02 F6 | 	mov	arg02, local03
1ee60     14 15 82 F1 | 	sub	arg02, local06
1ee64     12 17 02 F6 | 	mov	arg03, local04
1ee68     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ee6c                 | '   putpixel(x0+y,y0+x,c)
1ee6c     10 13 02 F6 | 	mov	arg01, local02
1ee70     0F 13 02 F1 | 	add	arg01, local01
1ee74     11 15 02 F6 | 	mov	arg02, local03
1ee78     14 15 02 F1 | 	add	arg02, local06
1ee7c     12 17 02 F6 | 	mov	arg03, local04
1ee80     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ee84                 | '   if d>0 
1ee84     01 26 56 F2 | 	cmps	local05, #1 wc
1ee88     18 00 90 CD |  if_b	jmp	#LR__2501
1ee8c                 | '     d+=da
1ee8c     16 27 02 F1 | 	add	local05, local08
1ee90                 | '     y-=1
1ee90     01 1E 86 F1 | 	sub	local01, #1
1ee94                 | '     x+=1
1ee94     01 28 06 F1 | 	add	local06, #1
1ee98                 | '     da+=4*4
1ee98     10 2C 06 F1 | 	add	local08, #16
1ee9c                 | '     db+=2*4
1ee9c     08 2A 06 F1 | 	add	local07, #8
1eea0     18 FF 9F FD | 	jmp	#LR__2500
1eea4                 | LR__2501
1eea4                 | '   else
1eea4                 | '     d+=db
1eea4     15 27 02 F1 | 	add	local05, local07
1eea8                 | '     x+=1
1eea8     01 28 06 F1 | 	add	local06, #1
1eeac                 | '     da+=2*4
1eeac     08 2C 06 F1 | 	add	local08, #8
1eeb0                 | '     db+=2*4
1eeb0     08 2A 06 F1 | 	add	local07, #8
1eeb4     04 FF 9F FD | 	jmp	#LR__2500
1eeb8                 | LR__2502
1eeb8     A7 F0 03 F6 | 	mov	ptra, fp
1eebc     B2 00 A0 FD | 	call	#popregs_
1eec0                 | _hg010b_spin2_circle_ret
1eec0     2D 00 64 FD | 	ret
1eec4                 | 
1eec4                 | '     
1eec4                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1eec4                 | ' 
1eec4                 | ' pub frame(x1,y1,x2,y2,c)
1eec4                 | _hg010b_spin2_frame
1eec4     05 4A 05 F6 | 	mov	COUNT_, #5
1eec8     A8 00 A0 FD | 	call	#pushregs_
1eecc     09 1F 02 F6 | 	mov	local01, arg01
1eed0     0A 21 02 F6 | 	mov	local02, arg02
1eed4     0B 23 02 F6 | 	mov	local03, arg03
1eed8     0C 25 02 F6 | 	mov	local04, arg04
1eedc     0D 27 02 F6 | 	mov	local05, arg05
1eee0                 | ' 
1eee0                 | ' fastline(x1,x2,y1,c)
1eee0     0F 13 02 F6 | 	mov	arg01, local01
1eee4     11 15 02 F6 | 	mov	arg02, local03
1eee8     10 17 02 F6 | 	mov	arg03, local02
1eeec     13 19 02 F6 | 	mov	arg04, local05
1eef0     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1eef4                 | ' fastline(x1,x2,y2,c)
1eef4     0F 13 02 F6 | 	mov	arg01, local01
1eef8     11 15 02 F6 | 	mov	arg02, local03
1eefc     12 17 02 F6 | 	mov	arg03, local04
1ef00     13 19 02 F6 | 	mov	arg04, local05
1ef04     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1ef08                 | ' line(x1,y1,x1,y2,c)
1ef08     0F 13 02 F6 | 	mov	arg01, local01
1ef0c     10 15 02 F6 | 	mov	arg02, local02
1ef10     0F 17 02 F6 | 	mov	arg03, local01
1ef14     12 19 02 F6 | 	mov	arg04, local04
1ef18     13 1B 02 F6 | 	mov	arg05, local05
1ef1c                 | ' draw(x1,y1,x2,y2,c)
1ef1c     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1ef20                 | ' line(x2,y1,x2,y2,c)
1ef20     11 13 02 F6 | 	mov	arg01, local03
1ef24     10 15 02 F6 | 	mov	arg02, local02
1ef28     11 17 02 F6 | 	mov	arg03, local03
1ef2c     12 19 02 F6 | 	mov	arg04, local04
1ef30     13 1B 02 F6 | 	mov	arg05, local05
1ef34                 | ' draw(x1,y1,x2,y2,c)
1ef34     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1ef38     A7 F0 03 F6 | 	mov	ptra, fp
1ef3c     B2 00 A0 FD | 	call	#popregs_
1ef40                 | _hg010b_spin2_frame_ret
1ef40     2D 00 64 FD | 	ret
1ef44                 | 
1ef44                 | ' 
1ef44                 | ' '-- A box (a filled rectangle) ----------------------------------------
1ef44                 | ' 
1ef44                 | ' pub box(x1,y1,x2,y2,c) |yy
1ef44                 | _hg010b_spin2_box
1ef44     06 4A 05 F6 | 	mov	COUNT_, #6
1ef48     A8 00 A0 FD | 	call	#pushregs_
1ef4c     09 1F 02 F6 | 	mov	local01, arg01
1ef50     0A 21 02 F6 | 	mov	local02, arg02
1ef54     0B 23 02 F6 | 	mov	local03, arg03
1ef58     0C 25 02 F6 | 	mov	local04, arg04
1ef5c     0D 27 02 F6 | 	mov	local05, arg05
1ef60                 | ' 
1ef60                 | ' repeat yy from y1 to y2
1ef60     10 25 52 F2 | 	cmps	local04, local02 wc
1ef64     01 28 86 F6 | 	negc	local06, #1
1ef68     14 25 02 F1 | 	add	local04, local06
1ef6c                 | LR__2510
1ef6c                 | '   fastline(x1,x2,yy,c)
1ef6c     0F 13 02 F6 | 	mov	arg01, local01
1ef70     11 15 02 F6 | 	mov	arg02, local03
1ef74     13 19 02 F6 | 	mov	arg04, local05
1ef78     10 17 02 F6 | 	mov	arg03, local02
1ef7c     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1ef80     14 21 02 F1 | 	add	local02, local06
1ef84     12 21 0A F2 | 	cmp	local02, local04 wz
1ef88     E0 FF 9F 5D |  if_ne	jmp	#LR__2510
1ef8c     A7 F0 03 F6 | 	mov	ptra, fp
1ef90     B2 00 A0 FD | 	call	#popregs_
1ef94                 | _hg010b_spin2_box_ret
1ef94     2D 00 64 FD | 	ret
1ef98                 | 
1ef98                 | '       
1ef98                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1ef98                 | _hg010b_spin2_putcharxycgf
1ef98                 | ' 
1ef98                 | '  
1ef98                 | ' repeat yy from 0 to 15
1ef98     00 00 06 F6 | 	mov	_var01, #0
1ef9c     97 8C 48 FB | 	callpa	#(@LR__2522-@LR__2520)>>2,fcache_load_ptr_
1efa0                 | LR__2520
1efa0                 | ' 
1efa0                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1efa0     95 E4 05 F1 | 	add	objptr, #149
1efa4     F2 02 02 FB | 	rdlong	_var02, objptr
1efa8     0A 02 66 F0 | 	shl	_var02, #10
1efac     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1efb0     01 05 02 F1 | 	add	_var03, _var02
1efb4     0B 03 02 F6 | 	mov	_var02, arg03
1efb8     04 02 66 F0 | 	shl	_var02, #4
1efbc     01 05 02 F1 | 	add	_var03, _var02
1efc0     00 05 02 F1 | 	add	_var03, _var01
1efc4     02 05 C2 FA | 	rdbyte	_var03, _var03
1efc8                 | '   asm
1efc8     00 04 0E F4 | 	testb	_var03, #0 wz
1efcc     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1efd0     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1efd4     01 04 0E F4 | 	testb	_var03, #1 wz
1efd8     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1efdc     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1efe0     02 04 0E F4 | 	testb	_var03, #2 wz
1efe4     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1efe8     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1efec     03 04 0E F4 | 	testb	_var03, #3 wz
1eff0     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1eff4     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1eff8     04 04 0E F4 | 	testb	_var03, #4 wz
1effc     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1f000     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1f004     05 04 0E F4 | 	testb	_var03, #5 wz
1f008     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1f00c     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1f010     06 04 0E F4 | 	testb	_var03, #6 wz
1f014     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1f018     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1f01c     07 04 0E F4 | 	testb	_var03, #7 wz
1f020     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1f024     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1f028                 | '   
1f028                 | '   ccc[0]:=c1
1f028     99 E5 05 F1 | 	add	objptr, #409
1f02c     F2 06 62 FC | 	wrlong	_var04, objptr
1f030                 | '   ccc[1]:=c2 
1f030     04 E4 05 F1 | 	add	objptr, #4
1f034     F2 08 62 FC | 	wrlong	_var05, objptr
1f038                 | '   long[mailbox0][2]:=8
1f038     49 E4 85 F1 | 	sub	objptr, #73
1f03c     F2 04 02 FB | 	rdlong	_var03, objptr
1f040     08 04 06 F1 | 	add	_var03, #8
1f044     02 11 68 FC | 	wrlong	#8, _var03
1f048                 | '   long[mailbox0][1]:=@ccc
1f048     45 E4 05 F1 | 	add	objptr, #69
1f04c     F2 04 02 F6 | 	mov	_var03, objptr
1f050     45 E4 85 F1 | 	sub	objptr, #69
1f054     F2 02 02 FB | 	rdlong	_var02, objptr
1f058     04 02 06 F1 | 	add	_var02, #4
1f05c     01 05 62 FC | 	wrlong	_var03, _var02
1f060                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1f060     0C E5 85 F1 | 	sub	objptr, #268
1f064     F2 04 02 FB | 	rdlong	_var03, objptr
1f068     0A 03 02 F6 | 	mov	_var02, arg02
1f06c     00 03 02 F1 | 	add	_var02, _var01
1f070     0A 02 66 F0 | 	shl	_var02, #10
1f074     09 0B 02 F6 | 	mov	_var06, arg01
1f078     02 0A 66 F0 | 	shl	_var06, #2
1f07c     05 03 02 F1 | 	add	_var02, _var06
1f080     01 05 02 F1 | 	add	_var03, _var02
1f084     00 00 78 FF 
1f088     00 04 06 F1 | 	add	_var03, ##-268435456
1f08c     0C E5 05 F1 | 	add	objptr, #268
1f090     F2 0A 02 FB | 	rdlong	_var06, objptr
1f094     05 05 62 FC | 	wrlong	_var03, _var06
1f098                 | '   repeat
1f098                 | LR__2521
1f098     F2 04 02 FB | 	rdlong	_var03, objptr
1f09c     02 03 02 FB | 	rdlong	_var02, _var03
1f0a0     00 02 56 F2 | 	cmps	_var02, #0 wc
1f0a4     F0 FF 9F CD |  if_b	jmp	#LR__2521
1f0a8     E9 E5 85 F1 | 	sub	objptr, #489
1f0ac     01 00 06 F1 | 	add	_var01, #1
1f0b0     10 00 56 F2 | 	cmps	_var01, #16 wc
1f0b4     E8 FE 9F CD |  if_b	jmp	#LR__2520
1f0b8                 | LR__2522
1f0b8                 | _hg010b_spin2_putcharxycgf_ret
1f0b8     2D 00 64 FD | 	ret
1f0bc                 | 
1f0bc                 | ' 
1f0bc                 | ' 
1f0bc                 | ' '**********************************************************************r***
1f0bc                 | ' '                                                                        *
1f0bc                 | ' ' Font related functions                                                 *
1f0bc                 | ' '                                                                        *
1f0bc                 | ' '*************************************************************************
1f0bc                 | ' 
1f0bc                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1f0bc                 | ' 
1f0bc                 | ' pub setfontfamily(afontnum)
1f0bc                 | _hg010b_spin2_setfontfamily
1f0bc                 | ' 
1f0bc                 | ' font_family:=afontnum
1f0bc     95 E4 05 F1 | 	add	objptr, #149
1f0c0     F2 12 62 FC | 	wrlong	arg01, objptr
1f0c4     95 E4 85 F1 | 	sub	objptr, #149
1f0c8                 | ' 'if afontnum==8
1f0c8                 | ' '  font_ptr:=@amiga_font
1f0c8                 | ' 
1f0c8                 | ' if afontnum==4
1f0c8     04 12 0E F2 | 	cmp	arg01, #4 wz
1f0cc                 | '   font_ptr:=@st_font
1f0cc     08 00 00 AF 
1f0d0     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1f0d4     08 E4 05 A1 |  if_e	add	objptr, #8
1f0d8     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1f0dc     08 E4 85 A1 |  if_e	sub	objptr, #8
1f0e0     08 00 00 AF 
1f0e4     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1f0e8                 | ' if afontnum==0
1f0e8     00 12 0E F2 | 	cmp	arg01, #0 wz
1f0ec                 | '   font_ptr:=@vga_font
1f0ec     08 E4 05 A1 |  if_e	add	objptr, #8
1f0f0     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1f0f4     08 E4 85 A1 |  if_e	sub	objptr, #8
1f0f8                 | _hg010b_spin2_setfontfamily_ret
1f0f8     2D 00 64 FD | 	ret
1f0fc                 | 
1f0fc                 | ' 
1f0fc                 | ' '*************************************************************************
1f0fc                 | ' '                                                                        *
1f0fc                 | ' '  Cursor functions                                                      *
1f0fc                 | ' '                                                                        *
1f0fc                 | ' '*************************************************************************
1f0fc                 | ' 
1f0fc                 | ' 
1f0fc                 | ' pub setcursorpos(x,y)
1f0fc                 | _hg010b_spin2_setcursorpos
1f0fc                 | ' 
1f0fc                 | ' ''---------- Set the (x,y) position of cursor
1f0fc                 | ' 
1f0fc                 | ' cursor_x:=x
1f0fc     3C E4 05 F1 | 	add	objptr, #60
1f100     F2 12 52 FC | 	wrword	arg01, objptr
1f104                 | ' cursor_y:=y
1f104     02 E4 05 F1 | 	add	objptr, #2
1f108     F2 14 42 FC | 	wrbyte	arg02, objptr
1f10c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f10c     02 E4 85 F1 | 	sub	objptr, #2
1f110     F2 14 E2 FA | 	rdword	arg02, objptr
1f114     02 14 66 F0 | 	shl	arg02, #2
1f118     02 E4 05 F1 | 	add	objptr, #2
1f11c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f120     3E E4 85 F1 | 	sub	objptr, #62
1f124     04 16 66 F0 | 	shl	arg03, #4
1f128     04 16 06 F1 | 	add	arg03, #4
1f12c     11 12 06 F6 | 	mov	arg01, #17
1f130     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1f134                 | _hg010b_spin2_setcursorpos_ret
1f134     2D 00 64 FD | 	ret
1f138                 | 
1f138                 | ' 
1f138                 | ' pub setcursorx(x)
1f138                 | _hg010b_spin2_setcursorx
1f138                 | ' cursor_x:=x
1f138     3C E4 05 F1 | 	add	objptr, #60
1f13c     F2 12 52 FC | 	wrword	arg01, objptr
1f140                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f140     F2 14 E2 FA | 	rdword	arg02, objptr
1f144     02 14 66 F0 | 	shl	arg02, #2
1f148     02 E4 05 F1 | 	add	objptr, #2
1f14c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f150     3E E4 85 F1 | 	sub	objptr, #62
1f154     04 16 66 F0 | 	shl	arg03, #4
1f158     04 16 06 F1 | 	add	arg03, #4
1f15c     11 12 06 F6 | 	mov	arg01, #17
1f160     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1f164                 | _hg010b_spin2_setcursorx_ret
1f164     2D 00 64 FD | 	ret
1f168                 | 
1f168                 | ' 
1f168                 | ' pub setcursory(y) 
1f168                 | _hg010b_spin2_setcursory
1f168                 | ' cursor_y:=y
1f168     3E E4 05 F1 | 	add	objptr, #62
1f16c     F2 12 42 FC | 	wrbyte	arg01, objptr
1f170                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
1f170     02 E4 85 F1 | 	sub	objptr, #2
1f174     F2 14 E2 FA | 	rdword	arg02, objptr
1f178     02 14 66 F0 | 	shl	arg02, #2
1f17c     02 E4 05 F1 | 	add	objptr, #2
1f180     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f184     3E E4 85 F1 | 	sub	objptr, #62
1f188     04 16 66 F0 | 	shl	arg03, #4
1f18c     04 16 06 F1 | 	add	arg03, #4
1f190     11 12 06 F6 | 	mov	arg01, #17
1f194     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1f198                 | _hg010b_spin2_setcursory_ret
1f198     2D 00 64 FD | 	ret
1f19c                 | 
1f19c                 | ' 
1f19c                 | ' '*************************************************************************
1f19c                 | ' '                                                                        *
1f19c                 | ' '  VBlank functions                                                      *
1f19c                 | ' '                                                                        *
1f19c                 | ' '*************************************************************************
1f19c                 | ' 
1f19c                 | ' pub waitvbl(amount) | i
1f19c                 | _hg010b_spin2_waitvbl
1f19c     03 4A 05 F6 | 	mov	COUNT_, #3
1f1a0     A8 00 A0 FD | 	call	#pushregs_
1f1a4     09 1F 02 F6 | 	mov	local01, arg01
1f1a8                 | ' 
1f1a8                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1f1a8                 | ' 
1f1a8                 | ' repeat i from 1 to amount
1f1a8     01 20 06 F6 | 	mov	local02, #1
1f1ac     01 1E 56 F2 | 	cmps	local01, #1 wc
1f1b0     01 22 86 F6 | 	negc	local03, #1
1f1b4     11 1F 02 F1 | 	add	local01, local03
1f1b8                 | LR__2530
1f1b8                 | '   repeat until vblank==0
1f1b8                 | LR__2531
1f1b8     49 E4 05 F1 | 	add	objptr, #73
1f1bc     F2 12 0A FB | 	rdlong	arg01, objptr wz
1f1c0     49 E4 85 F1 | 	sub	objptr, #73
1f1c4     0C 00 90 AD |  if_e	jmp	#LR__2532
1f1c8                 | '     waitus(100)
1f1c8     64 12 06 F6 | 	mov	arg01, #100
1f1cc     78 1C B0 FD | 	call	#__system___waitus
1f1d0     E4 FF 9F FD | 	jmp	#LR__2531
1f1d4                 | LR__2532
1f1d4                 | '   repeat until vblank==1
1f1d4                 | LR__2533
1f1d4     49 E4 05 F1 | 	add	objptr, #73
1f1d8     F2 12 02 FB | 	rdlong	arg01, objptr
1f1dc     49 E4 85 F1 | 	sub	objptr, #73
1f1e0     01 12 0E F2 | 	cmp	arg01, #1 wz
1f1e4     0C 00 90 AD |  if_e	jmp	#LR__2534
1f1e8                 | '     waitus(100)
1f1e8     64 12 06 F6 | 	mov	arg01, #100
1f1ec     58 1C B0 FD | 	call	#__system___waitus
1f1f0     E0 FF 9F FD | 	jmp	#LR__2533
1f1f4                 | LR__2534
1f1f4     11 21 02 F1 | 	add	local02, local03
1f1f8     0F 21 0A F2 | 	cmp	local02, local01 wz
1f1fc     B8 FF 9F 5D |  if_ne	jmp	#LR__2530
1f200     A7 F0 03 F6 | 	mov	ptra, fp
1f204     B2 00 A0 FD | 	call	#popregs_
1f208                 | _hg010b_spin2_waitvbl_ret
1f208     2D 00 64 FD | 	ret
1f20c                 | 
1f20c                 | ' 
1f20c                 | ' 
1f20c                 | ' pub cls(fc,bc)   :c,i
1f20c                 | _hg010b_spin2_cls
1f20c     02 4A 05 F6 | 	mov	COUNT_, #2
1f210     A8 00 A0 FD | 	call	#pushregs_
1f214     09 1F 02 F6 | 	mov	local01, arg01
1f218     0A 21 02 F6 | 	mov	local02, arg02
1f21c                 | ' 
1f21c                 | ' c:=bc
1f21c                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1f21c     DD E4 05 F1 | 	add	objptr, #221
1f220     F2 12 02 FB | 	rdlong	arg01, objptr
1f224     A5 E4 85 F1 | 	sub	objptr, #165
1f228     F2 16 02 FB | 	rdlong	arg03, objptr
1f22c     02 16 66 F0 | 	shl	arg03, #2
1f230     10 15 02 F6 | 	mov	arg02, local02
1f234     00 18 06 F6 | 	mov	arg04, #0
1f238     01 1A 06 F6 | 	mov	arg05, #1
1f23c     0B 00 00 FF 
1f240     94 E4 05 F1 | 	add	objptr, ##5780
1f244     98 0D B0 FD | 	call	#_psram_spin2_fill
1f248                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1f248     0B 00 00 FF 
1f24c     C8 E4 85 F1 | 	sub	objptr, ##5832
1f250     F2 12 02 FB | 	rdlong	arg01, objptr
1f254     04 E4 85 F1 | 	sub	objptr, #4
1f258     F2 16 02 FB | 	rdlong	arg03, objptr
1f25c     09 17 82 F1 | 	sub	arg03, arg01
1f260     20 14 06 F6 | 	mov	arg02, #32
1f264     00 18 06 F6 | 	mov	arg04, #0
1f268     01 1A 06 F6 | 	mov	arg05, #1
1f26c     0B 00 00 FF 
1f270     CC E4 05 F1 | 	add	objptr, ##5836
1f274     68 0D B0 FD | 	call	#_psram_spin2_fill
1f278                 | ' setwritecolors(fc,bc)
1f278                 | ' 
1f278                 | ' write_color:=ff
1f278     0B 00 00 FF 
1f27c     8B E4 85 F1 | 	sub	objptr, ##5771
1f280     F2 1E 62 FC | 	wrlong	local01, objptr
1f284                 | ' write_background:=bb
1f284     04 E4 05 F1 | 	add	objptr, #4
1f288     F2 20 62 FC | 	wrlong	local02, objptr
1f28c                 | ' cursor_x:=0
1f28c     09 E4 85 F1 | 	sub	objptr, #9
1f290     F2 00 58 FC | 	wrword	#0, objptr
1f294                 | ' cursor_y:=0
1f294     02 E4 05 F1 | 	add	objptr, #2
1f298     F2 00 48 FC | 	wrbyte	#0, objptr
1f29c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f29c     02 E4 85 F1 | 	sub	objptr, #2
1f2a0     F2 14 E2 FA | 	rdword	arg02, objptr
1f2a4     02 14 66 F0 | 	shl	arg02, #2
1f2a8     02 E4 05 F1 | 	add	objptr, #2
1f2ac     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f2b0     3E E4 85 F1 | 	sub	objptr, #62
1f2b4     04 16 66 F0 | 	shl	arg03, #4
1f2b8     04 16 06 F1 | 	add	arg03, #4
1f2bc     11 12 06 F6 | 	mov	arg01, #17
1f2c0     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
1f2c4                 | ' setcursorcolor(fc)
1f2c4     0F 13 02 F6 | 	mov	arg01, local01
1f2c8     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
1f2cc     10 FB 01 F6 | 	mov	result1, local02
1f2d0     00 FC 05 F6 | 	mov	result2, #0
1f2d4     A7 F0 03 F6 | 	mov	ptra, fp
1f2d8     B2 00 A0 FD | 	call	#popregs_
1f2dc                 | _hg010b_spin2_cls_ret
1f2dc     2D 00 64 FD | 	ret
1f2e0                 | 
1f2e0                 | ' 
1f2e0                 | ' ''---------- Output a char at the cursor position, move the cursor 
1f2e0                 | ' 
1f2e0                 | ' pub putchar(achar) | c,x,y,l,newcpl
1f2e0                 | _hg010b_spin2_putchar
1f2e0     02 4A 05 F6 | 	mov	COUNT_, #2
1f2e4     A8 00 A0 FD | 	call	#pushregs_
1f2e8     09 1F 02 F6 | 	mov	local01, arg01
1f2ec                 | ' 
1f2ec                 | ' if achar==10
1f2ec     0A 1E 0E F2 | 	cmp	local01, #10 wz
1f2f0                 | '   crlf()
1f2f0     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1f2f4                 | ' if achar==9
1f2f4     09 1E 0E F2 | 	cmp	local01, #9 wz
1f2f8     18 00 90 5D |  if_ne	jmp	#LR__2540
1f2fc                 | '   cursor_x:=(cursor_x& %11110000)+16
1f2fc     3C E4 05 F1 | 	add	objptr, #60
1f300     F2 16 E2 FA | 	rdword	arg03, objptr
1f304     F0 16 06 F5 | 	and	arg03, #240
1f308     10 16 06 F1 | 	add	arg03, #16
1f30c     F2 16 52 FC | 	wrword	arg03, objptr
1f310     3C E4 85 F1 | 	sub	objptr, #60
1f314                 | LR__2540
1f314                 | '   
1f314                 | ' if (achar<>9) && (achar<>10) 
1f314     09 1E 0E F2 | 	cmp	local01, #9 wz
1f318     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1f31c     A8 00 90 AD |  if_e	jmp	#LR__2541
1f320                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1f320     3C E4 05 F1 | 	add	objptr, #60
1f324     F2 12 E2 FA | 	rdword	arg01, objptr
1f328     02 E4 05 F1 | 	add	objptr, #2
1f32c     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f330     04 14 66 F0 | 	shl	arg02, #4
1f334     04 14 06 F1 | 	add	arg02, #4
1f338     03 E4 05 F1 | 	add	objptr, #3
1f33c     F2 18 02 FB | 	rdlong	arg04, objptr
1f340     04 E4 05 F1 | 	add	objptr, #4
1f344     F2 1A 02 FB | 	rdlong	arg05, objptr
1f348     45 E4 85 F1 | 	sub	objptr, #69
1f34c     0F 17 02 F6 | 	mov	arg03, local01
1f350     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
1f354     04 E4 05 F1 | 	add	objptr, #4
1f358     F2 12 02 FB | 	rdlong	arg01, objptr
1f35c     10 00 00 FF 
1f360     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f364     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f368     3A E4 05 F1 | 	add	objptr, #58
1f36c     F2 1A C2 FA | 	rdbyte	arg05, objptr
1f370     0D 17 02 FD | 	qmul	arg03, arg05
1f374                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1f374     10 00 00 FF 
1f378     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f37c     02 E4 85 F1 | 	sub	objptr, #2
1f380     F2 20 E2 FA | 	rdword	local02, objptr
1f384     01 20 46 F0 | 	shr	local02, #1
1f388     0F 15 02 F6 | 	mov	arg02, local01
1f38c     01 16 06 F6 | 	mov	arg03, #1
1f390     00 18 06 F6 | 	mov	arg04, #0
1f394     01 1A 06 F6 | 	mov	arg05, #1
1f398     0B 00 00 FF 
1f39c     90 E4 05 F1 | 	add	objptr, ##5776
1f3a0     18 1E 62 FD | 	getqx	local01
1f3a4     10 1F 02 F1 | 	add	local01, local02
1f3a8     0F 13 02 F1 | 	add	arg01, local01
1f3ac     30 0C B0 FD | 	call	#_psram_spin2_fill
1f3b0                 | '   cursor_x+=2
1f3b0     0B 00 00 FF 
1f3b4     90 E4 85 F1 | 	sub	objptr, ##5776
1f3b8     F2 20 E2 FA | 	rdword	local02, objptr
1f3bc     02 20 06 F1 | 	add	local02, #2
1f3c0     F2 20 52 FC | 	wrword	local02, objptr
1f3c4     3C E4 85 F1 | 	sub	objptr, #60
1f3c8                 | LR__2541
1f3c8                 | ' 
1f3c8                 | ' if cursor_x>=256
1f3c8     3C E4 05 F1 | 	add	objptr, #60
1f3cc     F2 20 E2 FA | 	rdword	local02, objptr
1f3d0     3C E4 85 F1 | 	sub	objptr, #60
1f3d4     00 21 56 F2 | 	cmps	local02, #256 wc
1f3d8     64 00 90 CD |  if_b	jmp	#LR__2543
1f3dc                 | '   cursor_x:=0
1f3dc     3C E4 05 F1 | 	add	objptr, #60
1f3e0     F2 00 58 FC | 	wrword	#0, objptr
1f3e4                 | '   cursor_y+=1
1f3e4     02 E4 05 F1 | 	add	objptr, #2
1f3e8     F2 20 C2 FA | 	rdbyte	local02, objptr
1f3ec     01 20 06 F1 | 	add	local02, #1
1f3f0     F2 20 42 FC | 	wrbyte	local02, objptr
1f3f4                 | '   if cursor_y>st_lines-1
1f3f4     C3 E4 05 F1 | 	add	objptr, #195
1f3f8     F2 20 02 FB | 	rdlong	local02, objptr
1f3fc     01 20 86 F1 | 	sub	local02, #1
1f400     C3 E4 85 F1 | 	sub	objptr, #195
1f404     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f408     3E E4 85 F1 | 	sub	objptr, #62
1f40c     10 17 5A F2 | 	cmps	arg03, local02 wcz
1f410     2C 00 90 ED |  if_be	jmp	#LR__2542
1f414                 | '     scrollup2()
1f414     00 12 06 F6 | 	mov	arg01, #0
1f418     01 00 00 FF 
1f41c     58 14 06 F6 | 	mov	arg02, ##600
1f420     10 16 06 F6 | 	mov	arg03, #16
1f424     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
1f428                 | '     cursor_y:=st_lines-1
1f428     01 E5 05 F1 | 	add	objptr, #257
1f42c     F2 20 02 FB | 	rdlong	local02, objptr
1f430     01 20 86 F1 | 	sub	local02, #1
1f434     C3 E4 85 F1 | 	sub	objptr, #195
1f438     F2 20 42 FC | 	wrbyte	local02, objptr
1f43c     3E E4 85 F1 | 	sub	objptr, #62
1f440                 | LR__2542
1f440                 | LR__2543
1f440                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f440     3C E4 05 F1 | 	add	objptr, #60
1f444     F2 14 E2 FA | 	rdword	arg02, objptr
1f448     02 14 66 F0 | 	shl	arg02, #2
1f44c     02 E4 05 F1 | 	add	objptr, #2
1f450     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f454     3E E4 85 F1 | 	sub	objptr, #62
1f458     04 16 66 F0 | 	shl	arg03, #4
1f45c     04 16 06 F1 | 	add	arg03, #4
1f460     11 12 06 F6 | 	mov	arg01, #17
1f464     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1f468     A7 F0 03 F6 | 	mov	ptra, fp
1f46c     B2 00 A0 FD | 	call	#popregs_
1f470                 | _hg010b_spin2_putchar_ret
1f470     2D 00 64 FD | 	ret
1f474                 | 
1f474                 | '     
1f474                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1f474                 | ' 
1f474                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1f474                 | _hg010b_spin2_putchar2
1f474     02 4A 05 F6 | 	mov	COUNT_, #2
1f478     A8 00 A0 FD | 	call	#pushregs_
1f47c     09 1F 02 F6 | 	mov	local01, arg01
1f480                 | ' 
1f480                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1f480     3C E4 05 F1 | 	add	objptr, #60
1f484     F2 12 E2 FA | 	rdword	arg01, objptr
1f488     02 E4 05 F1 | 	add	objptr, #2
1f48c     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f490     04 14 66 F0 | 	shl	arg02, #4
1f494     04 14 06 F1 | 	add	arg02, #4
1f498     03 E4 05 F1 | 	add	objptr, #3
1f49c     F2 18 02 FB | 	rdlong	arg04, objptr
1f4a0     04 E4 05 F1 | 	add	objptr, #4
1f4a4     F2 1A 02 FB | 	rdlong	arg05, objptr
1f4a8     45 E4 85 F1 | 	sub	objptr, #69
1f4ac     0F 17 02 F6 | 	mov	arg03, local01
1f4b0     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
1f4b4     04 E4 05 F1 | 	add	objptr, #4
1f4b8     F2 12 02 FB | 	rdlong	arg01, objptr
1f4bc     10 00 00 FF 
1f4c0     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f4c4     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f4c8     3A E4 05 F1 | 	add	objptr, #58
1f4cc     F2 1A C2 FA | 	rdbyte	arg05, objptr
1f4d0     0D 17 02 FD | 	qmul	arg03, arg05
1f4d4                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1f4d4     10 00 00 FF 
1f4d8     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f4dc     02 E4 85 F1 | 	sub	objptr, #2
1f4e0     F2 20 E2 FA | 	rdword	local02, objptr
1f4e4     01 20 46 F0 | 	shr	local02, #1
1f4e8     0F 15 02 F6 | 	mov	arg02, local01
1f4ec     01 16 06 F6 | 	mov	arg03, #1
1f4f0     00 18 06 F6 | 	mov	arg04, #0
1f4f4     01 1A 06 F6 | 	mov	arg05, #1
1f4f8     0B 00 00 FF 
1f4fc     90 E4 05 F1 | 	add	objptr, ##5776
1f500     18 1E 62 FD | 	getqx	local01
1f504     10 1F 02 F1 | 	add	local01, local02
1f508     0F 13 02 F1 | 	add	arg01, local01
1f50c     D0 0A B0 FD | 	call	#_psram_spin2_fill
1f510                 | ' 
1f510                 | ' cursor_x+=2
1f510     0B 00 00 FF 
1f514     90 E4 85 F1 | 	sub	objptr, ##5776
1f518     F2 20 E2 FA | 	rdword	local02, objptr
1f51c     02 20 06 F1 | 	add	local02, #2
1f520     F2 20 52 FC | 	wrword	local02, objptr
1f524                 | ' if cursor_x>=256
1f524     F2 20 E2 FA | 	rdword	local02, objptr
1f528     3C E4 85 F1 | 	sub	objptr, #60
1f52c     00 21 56 F2 | 	cmps	local02, #256 wc
1f530     64 00 90 CD |  if_b	jmp	#LR__2551
1f534                 | '   cursor_x:=0
1f534     3C E4 05 F1 | 	add	objptr, #60
1f538     F2 00 58 FC | 	wrword	#0, objptr
1f53c                 | '   cursor_y+=1
1f53c     02 E4 05 F1 | 	add	objptr, #2
1f540     F2 20 C2 FA | 	rdbyte	local02, objptr
1f544     01 20 06 F1 | 	add	local02, #1
1f548     F2 20 42 FC | 	wrbyte	local02, objptr
1f54c                 | '   if cursor_y>st_lines-1
1f54c     C3 E4 05 F1 | 	add	objptr, #195
1f550     F2 20 02 FB | 	rdlong	local02, objptr
1f554     01 20 86 F1 | 	sub	local02, #1
1f558     C3 E4 85 F1 | 	sub	objptr, #195
1f55c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f560     3E E4 85 F1 | 	sub	objptr, #62
1f564     10 17 5A F2 | 	cmps	arg03, local02 wcz
1f568     2C 00 90 ED |  if_be	jmp	#LR__2550
1f56c                 | '     scrollup2()
1f56c     00 12 06 F6 | 	mov	arg01, #0
1f570     01 00 00 FF 
1f574     58 14 06 F6 | 	mov	arg02, ##600
1f578     10 16 06 F6 | 	mov	arg03, #16
1f57c     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
1f580                 | '     cursor_y:=st_lines-1
1f580     01 E5 05 F1 | 	add	objptr, #257
1f584     F2 20 02 FB | 	rdlong	local02, objptr
1f588     01 20 86 F1 | 	sub	local02, #1
1f58c     C3 E4 85 F1 | 	sub	objptr, #195
1f590     F2 20 42 FC | 	wrbyte	local02, objptr
1f594     3E E4 85 F1 | 	sub	objptr, #62
1f598                 | LR__2550
1f598                 | LR__2551
1f598                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
1f598     3C E4 05 F1 | 	add	objptr, #60
1f59c     F2 14 E2 FA | 	rdword	arg02, objptr
1f5a0     02 14 66 F0 | 	shl	arg02, #2
1f5a4     02 E4 05 F1 | 	add	objptr, #2
1f5a8     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f5ac     3E E4 85 F1 | 	sub	objptr, #62
1f5b0     04 16 66 F0 | 	shl	arg03, #4
1f5b4     04 16 06 F1 | 	add	arg03, #4
1f5b8     11 12 06 F6 | 	mov	arg01, #17
1f5bc     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
1f5c0     A7 F0 03 F6 | 	mov	ptra, fp
1f5c4     B2 00 A0 FD | 	call	#popregs_
1f5c8                 | _hg010b_spin2_putchar2_ret
1f5c8     2D 00 64 FD | 	ret
1f5cc                 | 
1f5cc                 | ' ''--------- Output a string at the cursor position, move the cursor  
1f5cc                 | ' 
1f5cc                 | ' pub write(text) | iii,c,ncx,ncy
1f5cc                 | _hg010b_spin2_write
1f5cc     04 4A 05 F6 | 	mov	COUNT_, #4
1f5d0     A8 00 A0 FD | 	call	#pushregs_
1f5d4     09 1F 02 F6 | 	mov	local01, arg01
1f5d8                 | ' 
1f5d8                 | ' repeat iii from 0 to strsize(text)-1
1f5d8     00 20 06 F6 | 	mov	local02, #0
1f5dc     0F 13 02 F6 | 	mov	arg01, local01
1f5e0     09 23 02 F6 | 	mov	local03, arg01
1f5e4     97 06 48 FB | 	callpa	#(@LR__2561-@LR__2560)>>2,fcache_load_ptr_
1f5e8                 | LR__2560
1f5e8     11 FB C9 FA | 	rdbyte	result1, local03 wz
1f5ec     01 22 06 51 |  if_ne	add	local03, #1
1f5f0     F4 FF 9F 5D |  if_ne	jmp	#LR__2560
1f5f4                 | LR__2561
1f5f4     09 23 82 F1 | 	sub	local03, arg01
1f5f8     01 22 86 F1 | 	sub	local03, #1
1f5fc     00 22 56 F2 | 	cmps	local03, #0 wc
1f600     01 24 86 F6 | 	negc	local04, #1
1f604     12 23 02 F1 | 	add	local03, local04
1f608                 | LR__2562
1f608                 | '   putchar2(byte[text+iii])
1f608     0F 13 02 F6 | 	mov	arg01, local01
1f60c     10 13 02 F1 | 	add	arg01, local02
1f610     09 13 C2 FA | 	rdbyte	arg01, arg01
1f614     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
1f618     12 21 02 F1 | 	add	local02, local04
1f61c     11 21 0A F2 | 	cmp	local02, local03 wz
1f620     E4 FF 9F 5D |  if_ne	jmp	#LR__2562
1f624     A7 F0 03 F6 | 	mov	ptra, fp
1f628     B2 00 A0 FD | 	call	#popregs_
1f62c                 | _hg010b_spin2_write_ret
1f62c     2D 00 64 FD | 	ret
1f630                 | 
1f630                 | '    
1f630                 | ' ' a version for text scrolling in Basic shifted 4 lines down
1f630                 | ' 
1f630                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
1f630                 | _hg010b_spin2_scrollup2
1f630     03 4A 05 F6 | 	mov	COUNT_, #3
1f634     A8 00 A0 FD | 	call	#pushregs_
1f638                 | ' 	
1f638                 | ' repeat i from 4 to 579 
1f638     04 1E 06 F6 | 	mov	local01, #4
1f63c                 | LR__2570
1f63c     F9 E4 05 F1 | 	add	objptr, #249
1f640     F2 1A 02 FB | 	rdlong	arg05, objptr
1f644     1C E4 85 F1 | 	sub	objptr, #28
1f648     F2 14 02 FB | 	rdlong	arg02, objptr
1f64c     0F 19 02 F6 | 	mov	arg04, local01
1f650     10 18 06 F1 | 	add	arg04, #16
1f654     02 18 66 F0 | 	shl	arg04, #2
1f658     14 E4 05 F1 | 	add	objptr, #20
1f65c     F2 16 02 FB | 	rdlong	arg03, objptr
1f660     0B 19 02 FD | 	qmul	arg04, arg03
1f664                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1f664     F6 03 00 FF 
1f668     00 12 06 F6 | 	mov	arg01, ##519168
1f66c     0D 13 82 F1 | 	sub	arg01, arg05
1f670     02 16 66 F0 | 	shl	arg03, #2
1f674     0A 00 00 FF 
1f678     DB E5 05 F1 | 	add	objptr, ##5595
1f67c     18 1A 62 FD | 	getqx	arg05
1f680     0D 15 02 F1 | 	add	arg02, arg05
1f684     20 08 B0 FD | 	call	#_psram_spin2_read1
1f688     0A 00 00 FF 
1f68c     D3 E5 85 F1 | 	sub	objptr, ##5587
1f690     F2 1A 02 FB | 	rdlong	arg05, objptr
1f694     1C E4 85 F1 | 	sub	objptr, #28
1f698     F2 14 02 FB | 	rdlong	arg02, objptr
1f69c     0F 19 02 F6 | 	mov	arg04, local01
1f6a0     02 18 66 F0 | 	shl	arg04, #2
1f6a4     14 E4 05 F1 | 	add	objptr, #20
1f6a8     F2 16 02 FB | 	rdlong	arg03, objptr
1f6ac     0B 19 02 FD | 	qmul	arg04, arg03
1f6b0                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1f6b0     F6 03 00 FF 
1f6b4     00 12 06 F6 | 	mov	arg01, ##519168
1f6b8     0D 13 82 F1 | 	sub	arg01, arg05
1f6bc     02 16 66 F0 | 	shl	arg03, #2
1f6c0     0A 00 00 FF 
1f6c4     DB E5 05 F1 | 	add	objptr, ##5595
1f6c8     18 1A 62 FD | 	getqx	arg05
1f6cc     0D 15 02 F1 | 	add	arg02, arg05
1f6d0     70 08 B0 FD | 	call	#_psram_spin2_write
1f6d4     0B 00 00 FF 
1f6d8     CC E4 85 F1 | 	sub	objptr, ##5836
1f6dc     01 1E 06 F1 | 	add	local01, #1
1f6e0     01 00 00 FF 
1f6e4     44 1E 16 F2 | 	cmp	local01, ##580 wc
1f6e8     50 FF 9F CD |  if_b	jmp	#LR__2570
1f6ec                 | ' 
1f6ec                 | ' repeat i from 580 to 599
1f6ec     01 00 00 FF 
1f6f0     44 1E 06 F6 | 	mov	local01, ##580
1f6f4                 | LR__2571
1f6f4                 | '    fastline(0,1023,i,write_background)   
1f6f4     45 E4 05 F1 | 	add	objptr, #69
1f6f8     F2 18 02 FB | 	rdlong	arg04, objptr
1f6fc     45 E4 85 F1 | 	sub	objptr, #69
1f700     00 12 06 F6 | 	mov	arg01, #0
1f704     09 14 CE F9 | 	bmask	arg02, #9
1f708     0F 17 02 F6 | 	mov	arg03, local01
1f70c     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
1f710     01 1E 06 F1 | 	add	local01, #1
1f714     01 00 00 FF 
1f718     58 1E 16 F2 | 	cmp	local01, ##600 wc
1f71c     D4 FF 9F CD |  if_b	jmp	#LR__2571
1f720                 | ' repeat i from 0 to 3
1f720     00 1E 06 F6 | 	mov	local01, #0
1f724                 | LR__2572
1f724                 | '    fastline(0,1023,i,write_background)      
1f724     45 E4 05 F1 | 	add	objptr, #69
1f728     F2 18 02 FB | 	rdlong	arg04, objptr
1f72c     45 E4 85 F1 | 	sub	objptr, #69
1f730     00 12 06 F6 | 	mov	arg01, #0
1f734     09 14 CE F9 | 	bmask	arg02, #9
1f738     0F 17 02 F6 | 	mov	arg03, local01
1f73c     90 EF BF FD | 	call	#_hg010b_spin2_fastline
1f740     01 1E 06 F1 | 	add	local01, #1
1f744     04 1E 56 F2 | 	cmps	local01, #4 wc
1f748     D8 FF 9F CD |  if_b	jmp	#LR__2572
1f74c                 | ' 
1f74c                 | ' repeat i from 0 to 35
1f74c     00 1E 06 F6 | 	mov	local01, #0
1f750                 | LR__2573
1f750     0F 1B 02 F6 | 	mov	arg05, local01
1f754     01 1A 06 F1 | 	add	arg05, #1
1f758     10 00 00 FF 
1f75c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f760     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f764     0B 1B 02 FD | 	qmul	arg05, arg03
1f768                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
1f768     F6 03 00 FF 
1f76c     00 12 06 F6 | 	mov	arg01, ##519168
1f770     F9 E4 05 F1 | 	add	objptr, #249
1f774     F2 1A 02 FB | 	rdlong	arg05, objptr
1f778     0D 13 82 F1 | 	sub	arg01, arg05
1f77c     F5 E4 85 F1 | 	sub	objptr, #245
1f780     F2 14 02 FB | 	rdlong	arg02, objptr
1f784     10 00 00 FF 
1f788     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f78c     0B 00 00 FF 
1f790     C8 E4 05 F1 | 	add	objptr, ##5832
1f794     18 1A 62 FD | 	getqx	arg05
1f798     0D 15 02 F1 | 	add	arg02, arg05
1f79c     08 07 B0 FD | 	call	#_psram_spin2_read1
1f7a0     10 00 00 FF 
1f7a4     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f7a8     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f7ac     0B 1F 02 FD | 	qmul	local01, arg03
1f7b0                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
1f7b0     F6 03 00 FF 
1f7b4     00 12 06 F6 | 	mov	arg01, ##519168
1f7b8     0A 00 00 FF 
1f7bc     D3 E5 85 F1 | 	sub	objptr, ##5587
1f7c0     F2 1A 02 FB | 	rdlong	arg05, objptr
1f7c4     0D 13 82 F1 | 	sub	arg01, arg05
1f7c8     F5 E4 85 F1 | 	sub	objptr, #245
1f7cc     F2 14 02 FB | 	rdlong	arg02, objptr
1f7d0     10 00 00 FF 
1f7d4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f7d8     0B 00 00 FF 
1f7dc     C8 E4 05 F1 | 	add	objptr, ##5832
1f7e0     18 1A 62 FD | 	getqx	arg05
1f7e4     0D 15 02 F1 | 	add	arg02, arg05
1f7e8     58 07 B0 FD | 	call	#_psram_spin2_write
1f7ec     0B 00 00 FF 
1f7f0     CC E4 85 F1 | 	sub	objptr, ##5836
1f7f4     01 1E 06 F1 | 	add	local01, #1
1f7f8     24 1E 56 F2 | 	cmps	local01, #36 wc
1f7fc     50 FF 9F CD |  if_b	jmp	#LR__2573
1f800                 | ' repeat i from 0 to timings[7]-1
1f800     00 1E 06 F6 | 	mov	local01, #0
1f804     10 00 00 FF 
1f808     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f80c     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1f810     10 00 00 FF 
1f814     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f818     01 20 86 F1 | 	sub	local02, #1
1f81c     00 20 56 F2 | 	cmps	local02, #0 wc
1f820     01 22 86 F6 | 	negc	local03, #1
1f824     11 21 02 F1 | 	add	local02, local03
1f828                 | LR__2574
1f828                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
1f828     04 E4 05 F1 | 	add	objptr, #4
1f82c     F2 12 02 FB | 	rdlong	arg01, objptr
1f830     10 00 00 FF 
1f834     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f838     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1f83c     10 00 00 FF 
1f840     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f844     0D 19 02 F6 | 	mov	arg04, arg05
1f848     03 18 66 F0 | 	shl	arg04, #3
1f84c     0D 19 02 F1 | 	add	arg04, arg05
1f850     02 18 66 F0 | 	shl	arg04, #2
1f854     0F 19 02 F1 | 	add	arg04, local01
1f858     0C 13 02 F1 | 	add	arg01, arg04
1f85c     20 14 06 F6 | 	mov	arg02, #32
1f860     01 16 06 F6 | 	mov	arg03, #1
1f864     00 18 06 F6 | 	mov	arg04, #0
1f868     01 1A 06 F6 | 	mov	arg05, #1
1f86c     0B 00 00 FF 
1f870     C8 E4 05 F1 | 	add	objptr, ##5832
1f874     68 07 B0 FD | 	call	#_psram_spin2_fill
1f878     0B 00 00 FF 
1f87c     CC E4 85 F1 | 	sub	objptr, ##5836
1f880     11 1F 02 F1 | 	add	local01, local03
1f884     10 1F 0A F2 | 	cmp	local01, local02 wz
1f888     9C FF 9F 5D |  if_ne	jmp	#LR__2574
1f88c     A7 F0 03 F6 | 	mov	ptra, fp
1f890     B2 00 A0 FD | 	call	#popregs_
1f894                 | _hg010b_spin2_scrollup2_ret
1f894     2D 00 64 FD | 	ret
1f898                 | 
1f898                 | '  
1f898                 | ' ''----------- Scroll the screen one line down 
1f898                 | ' 
1f898                 | ' pub scrolldown(start=0) | i
1f898                 | _hg010b_spin2_scrolldown
1f898     05 4A 05 F6 | 	mov	COUNT_, #5
1f89c     A8 00 A0 FD | 	call	#pushregs_
1f8a0     09 1F 02 F6 | 	mov	local01, arg01
1f8a4                 | ' 
1f8a4                 | ' repeat i from 579 to (start*16)+4
1f8a4     01 00 00 FF 
1f8a8     43 20 06 F6 | 	mov	local02, ##579
1f8ac     0F 23 02 F6 | 	mov	local03, local01
1f8b0     04 22 66 F0 | 	shl	local03, #4
1f8b4     04 22 06 F1 | 	add	local03, #4
1f8b8     01 00 00 FF 
1f8bc     43 22 56 F2 | 	cmps	local03, ##579 wc
1f8c0     01 24 86 F6 | 	negc	local04, #1
1f8c4     12 27 02 F6 | 	mov	local05, local04
1f8c8     12 23 02 F1 | 	add	local03, local04
1f8cc                 | LR__2580
1f8cc     F9 E4 05 F1 | 	add	objptr, #249
1f8d0     F2 24 02 FB | 	rdlong	local04, objptr
1f8d4     1C E4 85 F1 | 	sub	objptr, #28
1f8d8     F2 14 02 FB | 	rdlong	arg02, objptr
1f8dc     10 1B 02 F6 | 	mov	arg05, local02
1f8e0     02 1A 66 F0 | 	shl	arg05, #2
1f8e4     14 E4 05 F1 | 	add	objptr, #20
1f8e8     F2 16 02 FB | 	rdlong	arg03, objptr
1f8ec     0B 1B 02 FD | 	qmul	arg05, arg03
1f8f0                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1f8f0     F6 03 00 FF 
1f8f4     00 12 06 F6 | 	mov	arg01, ##519168
1f8f8     12 13 82 F1 | 	sub	arg01, local04
1f8fc     02 16 66 F0 | 	shl	arg03, #2
1f900     0A 00 00 FF 
1f904     DB E5 05 F1 | 	add	objptr, ##5595
1f908     18 24 62 FD | 	getqx	local04
1f90c     12 15 02 F1 | 	add	arg02, local04
1f910     94 05 B0 FD | 	call	#_psram_spin2_read1
1f914     0A 00 00 FF 
1f918     D3 E5 85 F1 | 	sub	objptr, ##5587
1f91c     F2 24 02 FB | 	rdlong	local04, objptr
1f920     1C E4 85 F1 | 	sub	objptr, #28
1f924     F2 14 02 FB | 	rdlong	arg02, objptr
1f928     10 1B 02 F6 | 	mov	arg05, local02
1f92c     10 1A 06 F1 | 	add	arg05, #16
1f930     02 1A 66 F0 | 	shl	arg05, #2
1f934     14 E4 05 F1 | 	add	objptr, #20
1f938     F2 16 02 FB | 	rdlong	arg03, objptr
1f93c     0B 1B 02 FD | 	qmul	arg05, arg03
1f940                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1f940     F6 03 00 FF 
1f944     00 12 06 F6 | 	mov	arg01, ##519168
1f948     12 13 82 F1 | 	sub	arg01, local04
1f94c     02 16 66 F0 | 	shl	arg03, #2
1f950     0A 00 00 FF 
1f954     DB E5 05 F1 | 	add	objptr, ##5595
1f958     18 24 62 FD | 	getqx	local04
1f95c     12 15 02 F1 | 	add	arg02, local04
1f960     E0 05 B0 FD | 	call	#_psram_spin2_write
1f964     0B 00 00 FF 
1f968     CC E4 85 F1 | 	sub	objptr, ##5836
1f96c     13 21 02 F1 | 	add	local02, local05
1f970     11 21 0A F2 | 	cmp	local02, local03 wz
1f974     54 FF 9F 5D |  if_ne	jmp	#LR__2580
1f978                 | ' 
1f978                 | ' repeat i from (start*16)+4 to (start*16)+19
1f978     0F 21 02 F6 | 	mov	local02, local01
1f97c     04 20 66 F0 | 	shl	local02, #4
1f980     04 20 06 F1 | 	add	local02, #4
1f984     0F 27 02 F6 | 	mov	local05, local01
1f988     04 26 66 F0 | 	shl	local05, #4
1f98c     13 26 06 F1 | 	add	local05, #19
1f990     0F 25 02 F6 | 	mov	local04, local01
1f994     04 24 66 F0 | 	shl	local04, #4
1f998     04 24 06 F1 | 	add	local04, #4
1f99c     12 27 52 F2 | 	cmps	local05, local04 wc
1f9a0     01 24 86 F6 | 	negc	local04, #1
1f9a4     12 23 02 F6 | 	mov	local03, local04
1f9a8     12 27 02 F1 | 	add	local05, local04
1f9ac                 | LR__2581
1f9ac                 | '    fastline(0,1023,i,write_background)    
1f9ac     45 E4 05 F1 | 	add	objptr, #69
1f9b0     F2 18 02 FB | 	rdlong	arg04, objptr
1f9b4     45 E4 85 F1 | 	sub	objptr, #69
1f9b8     00 12 06 F6 | 	mov	arg01, #0
1f9bc     09 14 CE F9 | 	bmask	arg02, #9
1f9c0     10 17 02 F6 | 	mov	arg03, local02
1f9c4     08 ED BF FD | 	call	#_hg010b_spin2_fastline
1f9c8     11 21 02 F1 | 	add	local02, local03
1f9cc     13 21 0A F2 | 	cmp	local02, local05 wz
1f9d0     D8 FF 9F 5D |  if_ne	jmp	#LR__2581
1f9d4                 | '    
1f9d4                 | ' repeat i from 35 to start
1f9d4     23 20 06 F6 | 	mov	local02, #35
1f9d8     23 1E 56 F2 | 	cmps	local01, #35 wc
1f9dc     01 24 86 F6 | 	negc	local04, #1
1f9e0     0F 27 02 F6 | 	mov	local05, local01
1f9e4     12 27 02 F1 | 	add	local05, local04
1f9e8                 | LR__2582
1f9e8                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
1f9e8     F6 03 00 FF 
1f9ec     00 12 06 F6 | 	mov	arg01, ##519168
1f9f0     F9 E4 05 F1 | 	add	objptr, #249
1f9f4     F2 22 02 FB | 	rdlong	local03, objptr
1f9f8     11 13 82 F1 | 	sub	arg01, local03
1f9fc     F5 E4 85 F1 | 	sub	objptr, #245
1fa00     F2 14 02 FB | 	rdlong	arg02, objptr
1fa04     10 23 02 F6 | 	mov	local03, local02
1fa08     07 22 66 F0 | 	shl	local03, #7
1fa0c     11 15 02 F1 | 	add	arg02, local03
1fa10     80 16 06 F6 | 	mov	arg03, #128
1fa14     0B 00 00 FF 
1fa18     C8 E4 05 F1 | 	add	objptr, ##5832
1fa1c     88 04 B0 FD | 	call	#_psram_spin2_read1
1fa20                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
1fa20     F6 03 00 FF 
1fa24     00 12 06 F6 | 	mov	arg01, ##519168
1fa28     0A 00 00 FF 
1fa2c     D3 E5 85 F1 | 	sub	objptr, ##5587
1fa30     F2 22 02 FB | 	rdlong	local03, objptr
1fa34     11 13 82 F1 | 	sub	arg01, local03
1fa38     F5 E4 85 F1 | 	sub	objptr, #245
1fa3c     F2 14 02 FB | 	rdlong	arg02, objptr
1fa40     10 23 02 F6 | 	mov	local03, local02
1fa44     01 22 06 F1 | 	add	local03, #1
1fa48     07 22 66 F0 | 	shl	local03, #7
1fa4c     11 15 02 F1 | 	add	arg02, local03
1fa50     80 16 06 F6 | 	mov	arg03, #128
1fa54     0B 00 00 FF 
1fa58     C8 E4 05 F1 | 	add	objptr, ##5832
1fa5c     E4 04 B0 FD | 	call	#_psram_spin2_write
1fa60     0B 00 00 FF 
1fa64     CC E4 85 F1 | 	sub	objptr, ##5836
1fa68     12 21 02 F1 | 	add	local02, local04
1fa6c     13 21 0A F2 | 	cmp	local02, local05 wz
1fa70     74 FF 9F 5D |  if_ne	jmp	#LR__2582
1fa74                 | ' repeat i from 0 to 127
1fa74     00 20 06 F6 | 	mov	local02, #0
1fa78                 | LR__2583
1fa78                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
1fa78     04 E4 05 F1 | 	add	objptr, #4
1fa7c     F2 12 02 FB | 	rdlong	arg01, objptr
1fa80     0F 27 02 F6 | 	mov	local05, local01
1fa84     07 26 66 F0 | 	shl	local05, #7
1fa88     13 13 02 F1 | 	add	arg01, local05
1fa8c     10 13 02 F1 | 	add	arg01, local02
1fa90     20 14 06 F6 | 	mov	arg02, #32
1fa94     01 16 06 F6 | 	mov	arg03, #1
1fa98     00 18 06 F6 | 	mov	arg04, #0
1fa9c     01 1A 06 F6 | 	mov	arg05, #1
1faa0     0B 00 00 FF 
1faa4     C8 E4 05 F1 | 	add	objptr, ##5832
1faa8     34 05 B0 FD | 	call	#_psram_spin2_fill
1faac     0B 00 00 FF 
1fab0     CC E4 85 F1 | 	sub	objptr, ##5836
1fab4     01 20 06 F1 | 	add	local02, #1
1fab8     80 20 56 F2 | 	cmps	local02, #128 wc
1fabc     B8 FF 9F CD |  if_b	jmp	#LR__2583
1fac0     A7 F0 03 F6 | 	mov	ptra, fp
1fac4     B2 00 A0 FD | 	call	#popregs_
1fac8                 | _hg010b_spin2_scrolldown_ret
1fac8     2D 00 64 FD | 	ret
1facc                 | 
1facc                 | ' 
1facc                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
1facc                 | ' 
1facc                 | ' pub crlf()
1facc                 | _hg010b_spin2_crlf
1facc                 | ' 
1facc                 | ' cursor_x:=leading_spaces*2
1facc     01 00 00 FF 
1fad0     B6 E4 05 F1 | 	add	objptr, ##694
1fad4     F2 16 02 FB | 	rdlong	arg03, objptr
1fad8     01 16 66 F0 | 	shl	arg03, #1
1fadc     01 00 00 FF 
1fae0     7A E4 85 F1 | 	sub	objptr, ##634
1fae4     F2 16 52 FC | 	wrword	arg03, objptr
1fae8                 | ' cursor_y+=1
1fae8     02 E4 05 F1 | 	add	objptr, #2
1faec     F2 16 C2 FA | 	rdbyte	arg03, objptr
1faf0     01 16 06 F1 | 	add	arg03, #1
1faf4     F2 16 42 FC | 	wrbyte	arg03, objptr
1faf8                 | ' if cursor_y>st_lines-1
1faf8     C3 E4 05 F1 | 	add	objptr, #195
1fafc     F2 16 02 FB | 	rdlong	arg03, objptr
1fb00     01 16 86 F1 | 	sub	arg03, #1
1fb04     C3 E4 85 F1 | 	sub	objptr, #195
1fb08     F2 14 C2 FA | 	rdbyte	arg02, objptr
1fb0c     3E E4 85 F1 | 	sub	objptr, #62
1fb10     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
1fb14     2C 00 90 ED |  if_be	jmp	#LR__2590
1fb18                 | '   scrollup2()
1fb18     00 12 06 F6 | 	mov	arg01, #0
1fb1c     01 00 00 FF 
1fb20     58 14 06 F6 | 	mov	arg02, ##600
1fb24     10 16 06 F6 | 	mov	arg03, #16
1fb28     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
1fb2c                 | '   cursor_y:=st_lines-1
1fb2c     01 E5 05 F1 | 	add	objptr, #257
1fb30     F2 16 02 FB | 	rdlong	arg03, objptr
1fb34     01 16 86 F1 | 	sub	arg03, #1
1fb38     C3 E4 85 F1 | 	sub	objptr, #195
1fb3c     F2 16 42 FC | 	wrbyte	arg03, objptr
1fb40     3E E4 85 F1 | 	sub	objptr, #62
1fb44                 | LR__2590
1fb44                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
1fb44     3C E4 05 F1 | 	add	objptr, #60
1fb48     F2 14 E2 FA | 	rdword	arg02, objptr
1fb4c     02 14 66 F0 | 	shl	arg02, #2
1fb50     02 E4 05 F1 | 	add	objptr, #2
1fb54     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fb58     3E E4 85 F1 | 	sub	objptr, #62
1fb5c     04 16 66 F0 | 	shl	arg03, #4
1fb60     04 16 06 F1 | 	add	arg03, #4
1fb64     11 12 06 F6 | 	mov	arg01, #17
1fb68     18 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
1fb6c                 | _hg010b_spin2_crlf_ret
1fb6c     2D 00 64 FD | 	ret
1fb70                 | 
1fb70                 | ' 
1fb70                 | ' 
1fb70                 | ' '*************************************************************************
1fb70                 | ' '                                                                        *
1fb70                 | ' '  Conversions                                                           *
1fb70                 | ' '                                                                        *
1fb70                 | ' '*************************************************************************
1fb70                 | ' 
1fb70                 | ' ''---------- Convert a integer to dec string, return a pointer
1fb70                 | ' 
1fb70                 | ' pub inttostr(i):result |q,pos,k,j
1fb70                 | _hg010b_spin2_inttostr
1fb70     03 4A 05 F6 | 	mov	COUNT_, #3
1fb74     A8 00 A0 FD | 	call	#pushregs_
1fb78     09 1F 0A F6 | 	mov	local01, arg01 wz
1fb7c                 | ' 
1fb7c                 | ' j:=i
1fb7c                 | ' pos:=10
1fb7c     0A 20 06 F6 | 	mov	local02, #10
1fb80                 | ' k:=0
1fb80     00 22 06 F6 | 	mov	local03, #0
1fb84                 | ' 
1fb84                 | ' if (j==0)
1fb84     18 00 90 5D |  if_ne	jmp	#LR__2600
1fb88                 | '   n_string[0]:=48
1fb88     4D E4 05 F1 | 	add	objptr, #77
1fb8c     F2 60 48 FC | 	wrbyte	#48, objptr
1fb90                 | '   n_string[1]:=0
1fb90     01 E4 05 F1 | 	add	objptr, #1
1fb94     F2 00 48 FC | 	wrbyte	#0, objptr
1fb98     4E E4 85 F1 | 	sub	objptr, #78
1fb9c     C4 00 90 FD | 	jmp	#LR__2607
1fba0                 | LR__2600
1fba0                 | ' 
1fba0                 | ' else
1fba0                 | '   if (j<0)
1fba0     0F 1F 52 F6 | 	abs	local01, local01 wc
1fba4                 | '     j:=0-j
1fba4                 | '     k:=45
1fba4     2D 22 06 C6 |  if_b	mov	local03, #45
1fba8                 | ' 
1fba8                 | '   n_string[11]:=0
1fba8     58 E4 05 F1 | 	add	objptr, #88
1fbac     F2 00 48 FC | 	wrbyte	#0, objptr
1fbb0     58 E4 85 F1 | 	sub	objptr, #88
1fbb4     97 24 48 FB | 	callpa	#(@LR__2602-@LR__2601)>>2,fcache_load_ptr_
1fbb8                 | '   repeat while (pos>-1)
1fbb8                 | LR__2601
1fbb8     00 20 56 F2 | 	cmps	local02, #0 wc
1fbbc     40 00 90 CD |  if_b	jmp	#LR__2603
1fbc0     0F FB 51 F6 | 	abs	result1, local01 wc
1fbc4     0A FA 15 FD | 	qdiv	result1, #10
1fbc8                 | '     q:=j//10
1fbc8     19 FA 61 FD | 	getqy	result1
1fbcc     FD FA 81 F6 | 	negc	result1, result1
1fbd0     0F 1F 52 F6 | 	abs	local01, local01 wc
1fbd4     0A 1E 16 FD | 	qdiv	local01, #10
1fbd8                 | '     q:=48+q
1fbd8     30 FA 05 F1 | 	add	result1, #48
1fbdc                 | '     n_string[pos]:=q
1fbdc     10 1F 02 F6 | 	mov	local01, local02
1fbe0     4D E4 05 F1 | 	add	objptr, #77
1fbe4     F2 1E 02 F1 | 	add	local01, objptr
1fbe8     0F FB 41 FC | 	wrbyte	result1, local01
1fbec                 | '     j:=j/10
1fbec     4D E4 85 F1 | 	sub	objptr, #77
1fbf0                 | '     pos-=1
1fbf0     01 20 86 F1 | 	sub	local02, #1
1fbf4     18 1E 62 FD | 	getqx	local01
1fbf8     0F 1F 82 F6 | 	negc	local01, local01
1fbfc     B8 FF 9F FD | 	jmp	#LR__2601
1fc00                 | LR__2602
1fc00                 | LR__2603
1fc00                 | '   repeat while n_string[0]==48
1fc00                 | LR__2604
1fc00     4D E4 05 F1 | 	add	objptr, #77
1fc04     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fc08     4D E4 85 F1 | 	sub	objptr, #77
1fc0c     30 16 0E F2 | 	cmp	arg03, #48 wz
1fc10     20 00 90 5D |  if_ne	jmp	#LR__2605
1fc14                 | '     bytemove(@n_string,@n_string+1,12)
1fc14     4D E4 05 F1 | 	add	objptr, #77
1fc18     F2 12 02 F6 | 	mov	arg01, objptr
1fc1c     F2 14 02 F6 | 	mov	arg02, objptr
1fc20     4D E4 85 F1 | 	sub	objptr, #77
1fc24     01 14 06 F1 | 	add	arg02, #1
1fc28     0C 16 06 F6 | 	mov	arg03, #12
1fc2c     D8 0D B0 FD | 	call	#__system____builtin_memmove
1fc30     CC FF 9F FD | 	jmp	#LR__2604
1fc34                 | LR__2605
1fc34                 | ' 
1fc34                 | '   if k==45
1fc34     2D 22 0E F2 | 	cmp	local03, #45 wz
1fc38     28 00 90 5D |  if_ne	jmp	#LR__2606
1fc3c                 | '      bytemove(@n_string+1,@n_string,12)
1fc3c     4D E4 05 F1 | 	add	objptr, #77
1fc40     F2 12 02 F6 | 	mov	arg01, objptr
1fc44     01 12 06 F1 | 	add	arg01, #1
1fc48     F2 14 02 F6 | 	mov	arg02, objptr
1fc4c     4D E4 85 F1 | 	sub	objptr, #77
1fc50     0C 16 06 F6 | 	mov	arg03, #12
1fc54     B0 0D B0 FD | 	call	#__system____builtin_memmove
1fc58                 | '      n_string[0]:=k
1fc58     4D E4 05 F1 | 	add	objptr, #77
1fc5c     F2 22 42 FC | 	wrbyte	local03, objptr
1fc60     4D E4 85 F1 | 	sub	objptr, #77
1fc64                 | LR__2606
1fc64                 | LR__2607
1fc64                 | ' 
1fc64                 | ' q:=@n_string
1fc64     4D E4 05 F1 | 	add	objptr, #77
1fc68     F2 FA 01 F6 | 	mov	result1, objptr
1fc6c     4D E4 85 F1 | 	sub	objptr, #77
1fc70                 | ' return q
1fc70     A7 F0 03 F6 | 	mov	ptra, fp
1fc74     B2 00 A0 FD | 	call	#popregs_
1fc78                 | _hg010b_spin2_inttostr_ret
1fc78     2D 00 64 FD | 	ret
1fc7c                 | 
1fc7c                 | ' 
1fc7c                 | ' '..............................................................................
1fc7c                 | ' 
1fc7c                 | ' {{
1fc7c                 | ' }}
1fc7c                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
1fc7c                 | _psram_spin2_startx
1fc7c     04 4A 05 F6 | 	mov	COUNT_, #4
1fc80     A8 00 A0 FD | 	call	#pushregs_
1fc84     09 1F 02 F6 | 	mov	local01, arg01
1fc88     0B 21 02 F6 | 	mov	local02, arg03
1fc8c     0C 23 02 F6 | 	mov	local03, arg04
1fc90                 | '     stop() ' restart driver if required
1fc90     54 01 B0 FD | 	call	#_psram_spin2_stop
1fc94     00 1E 0E F2 | 	cmp	local01, #0 wz
1fc98     14 1E 06 AB |  if_e	rdlong	local01, #20
1fc9c     0F 15 52 F6 | 	abs	arg02, local01 wc
1fca0     A1 07 00 FF 
1fca4     40 14 16 FD | 	qdiv	arg02, ##1000000
1fca8                 | ' 
1fca8                 | '     ' use current frequency if none specified
1fca8                 | ' 
1fca8                 | '     if freq == 0 
1fca8                 | '         freq := clkfreq 
1fca8                 | ' 
1fca8                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
1fca8                 | ' 
1fca8                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
1fca8                 | '     if burst < 0
1fca8                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
1fca8     18 14 62 FD | 	getqx	arg02
1fcac     0A 19 82 F6 | 	negc	arg04, arg02
1fcb0     03 18 66 F0 | 	shl	arg04, #3
1fcb4     84 18 86 F1 | 	sub	arg04, #132
1fcb8     04 18 46 F0 | 	shr	arg04, #4
1fcbc     04 18 66 F0 | 	shl	arg04, #4
1fcc0     00 18 56 F2 | 	cmps	arg04, #0 wc
1fcc4     0E FA 65 C6 |  if_b	neg	result1, #14
1fcc8     10 01 90 CD |  if_b	jmp	#LR__2613
1fccc                 | ' 
1fccc                 | '     ' compute the input delay
1fccc                 | ' 
1fccc                 | '     if delay <= 0
1fccc     01 20 56 F2 | 	cmps	local02, #1 wc
1fcd0     10 00 90 3D |  if_ae	jmp	#LR__2610
1fcd4                 | '         delay := lookupDelay(freq)
1fcd4     0F 13 02 F6 | 	mov	arg01, local01
1fcd8     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
1fcdc     FD 20 02 F6 | 	mov	local02, result1
1fce0     04 00 90 FD | 	jmp	#LR__2611
1fce4                 | LR__2610
1fce4                 | '     else
1fce4                 | '         delay <#= $f ' limit to 15
1fce4     0F 20 66 F3 | 	fles	local02, #15
1fce8                 | LR__2611
1fce8                 | ' 
1fce8                 | '     ' create our lock
1fce8                 | ' 
1fce8                 | '     driverlock := LOCKNEW()  
1fce8     00 FA 05 F6 | 	mov	result1, #0
1fcec     04 FA 61 FD | 	locknew	result1
1fcf0     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1fcf4     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
1fcf8                 | '     if driverlock == -1
1fcf8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1fcfc     FF FF 7F FF 
1fd00     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1fd04                 | '         return ERR_NO_LOCK
1fd04     1A FA 65 A6 |  if_e	neg	result1, #26
1fd08     D0 00 90 AD |  if_e	jmp	#LR__2613
1fd0c                 | ' 
1fd0c                 | '     ' patch in the proper data and HUB addresses to the startup structure
1fd0c                 | ' 
1fd0c                 | '     long[@startupData][0]:=clkfreq
1fd0c     14 1E 06 FB | 	rdlong	local01, #20
1fd10     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
1fd14     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
1fd18                 | ' '    long[@startupData][1]:=$1000_0000
1fd18                 | '     long[@startupData][5]:=@deviceData
1fd18     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1fd1c     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1fd20     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
1fd24     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1fd28     14 14 06 F1 | 	add	arg02, #20
1fd2c     0A 1F 62 FC | 	wrlong	local01, arg02
1fd30                 | '     long[@startupData][6]:=@qosData
1fd30     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
1fd34     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1fd38     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1fd3c     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1fd40     18 14 06 F1 | 	add	arg02, #24
1fd44     0A 1F 62 FC | 	wrlong	local01, arg02
1fd48                 | '     long[@startupData][7]:=$7FF00
1fd48     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1fd4c     1C 1E 06 F1 | 	add	local01, #28
1fd50     FF 03 80 FF 
1fd54     0F 01 6A FC | 	wrlong	##524032, local01
1fd58                 | ' 
1fd58                 | '     ' setup some default bank and QoS parameter values
1fd58                 | ' 
1fd58                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
1fd58     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1fd5c     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1fd60     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
1fd64     10 18 66 F0 | 	shl	arg04, #16
1fd68     0C 20 66 F0 | 	shl	local02, #12
1fd6c     10 19 42 F5 | 	or	arg04, local02
1fd70     18 18 46 F5 | 	or	arg04, #24
1fd74     0C 15 02 F6 | 	mov	arg02, arg04
1fd78     02 16 06 F6 | 	mov	arg03, #2
1fd7c     A0 00 A0 FD | 	call	#\builtin_longfill_
1fd80                 | '     longfill(@qosData, $FFFF0000, 8)
1fd80     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1fd84     07 16 06 F6 | 	mov	arg03, #7
1fd88     28 16 62 FD | 	setq	arg03
1fd8c     80 FF FF FF 
1fd90     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
1fd94                 | ' 
1fd94                 | '     ' get the address of the PSRAM memory driver so we can start it
1fd94                 | ' 
1fd94                 | '     driverAddr:= driver.getDriverAddr()
1fd94                 | '     return @driver_start
1fd94     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
1fd98     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1fd9c     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
1fda0                 | ' 
1fda0                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
1fda0                 | ' 
1fda0                 | '     if desiredcog < 0
1fda0     00 22 56 F2 | 	cmps	local03, #0 wc
1fda4                 | '         desiredcog := NEWCOG
1fda4     10 22 06 C6 |  if_b	mov	local03, #16
1fda8                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1fda8     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1fdac     11 25 02 F6 | 	mov	local04, local03
1fdb0     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
1fdb4     0A 25 F2 FC | 	coginit	local04, arg02 wc
1fdb8     01 24 66 C6 |  if_b	neg	local04, #1
1fdbc     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1fdc0     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
1fdc4                 | '     repeat until long[@startupData] == 0 
1fdc4     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1fdc8                 | LR__2612
1fdc8     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
1fdcc     F8 FF 9F 5D |  if_ne	jmp	#LR__2612
1fdd0                 | ' 
1fdd0                 | '     return drivercog
1fdd0     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1fdd4     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
1fdd8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fddc                 | LR__2613
1fddc     A7 F0 03 F6 | 	mov	ptra, fp
1fde0     B2 00 A0 FD | 	call	#popregs_
1fde4                 | _psram_spin2_startx_ret
1fde4     2D 00 64 FD | 	ret
1fde8                 | 
1fde8                 | ' 
1fde8                 | ' '..............................................................................
1fde8                 | ' 
1fde8                 | ' {{
1fde8                 | ' }}
1fde8                 | ' PUB stop() : i
1fde8                 | _psram_spin2_stop
1fde8     00 00 06 F6 | 	mov	_var01, #0
1fdec                 | '     if drivercog <> -1
1fdec     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fdf0     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1fdf4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fdf8     FF FF 7F FF 
1fdfc     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1fe00     70 00 90 AD |  if_e	jmp	#LR__2623
1fe04                 | '         cogstop(drivercog) ' a rather brutal stop
1fe04     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fe08     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1fe0c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fe10     03 12 62 FD | 	cogstop	arg01
1fe14     97 26 48 FB | 	callpa	#(@LR__2622-@LR__2620)>>2,fcache_load_ptr_
1fe18                 | '         repeat i from 0 to 7
1fe18                 | LR__2620
1fe18                 | '             if long[$7FF00][i*3] < 0
1fe18     00 FB 01 F6 | 	mov	result1, _var01
1fe1c     01 FA 65 F0 | 	shl	result1, #1
1fe20     00 FB 01 F1 | 	add	result1, _var01
1fe24     02 FA 65 F0 | 	shl	result1, #2
1fe28     FF 03 00 FF 
1fe2c     00 FB 05 F1 | 	add	result1, ##524032
1fe30     FD FA 01 FB | 	rdlong	result1, result1
1fe34     00 FA 55 F2 | 	cmps	result1, #0 wc
1fe38     1C 00 90 3D |  if_ae	jmp	#LR__2621
1fe3c                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1fe3c     00 FB 01 F6 | 	mov	result1, _var01
1fe40     01 FA 65 F0 | 	shl	result1, #1
1fe44     00 FB 01 F1 | 	add	result1, _var01
1fe48     02 FA 65 F0 | 	shl	result1, #2
1fe4c     FF 03 00 FF 
1fe50     00 FB 05 F1 | 	add	result1, ##524032
1fe54     FD 20 68 FC | 	wrlong	#16, result1
1fe58                 | LR__2621
1fe58     01 00 06 F1 | 	add	_var01, #1
1fe5c     08 00 56 F2 | 	cmps	_var01, #8 wc
1fe60     B4 FF 9F CD |  if_b	jmp	#LR__2620
1fe64                 | LR__2622
1fe64                 | '         drivercog := -1
1fe64     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fe68     FF FF FF FF 
1fe6c     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1fe70     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fe74                 | LR__2623
1fe74                 | '     if driverlock <> -1
1fe74     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1fe78     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1fe7c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1fe80     FF FF 7F FF 
1fe84     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1fe88                 | '         LOCKRET(driverlock)
1fe88     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1fe8c     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
1fe90     05 12 62 5D |  if_ne	lockret	arg01
1fe94                 | '         driverlock := -1
1fe94     FF FF FF 5F 
1fe98     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1fe9c     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
1fea0     00 FB 01 F6 | 	mov	result1, _var01
1fea4                 | _psram_spin2_stop_ret
1fea4     2D 00 64 FD | 	ret
1fea8                 | 
1fea8                 | ' 
1fea8                 | ' '..............................................................................
1fea8                 | ' 
1fea8                 | ' {{
1fea8                 | ' }}
1fea8                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1fea8                 | _psram_spin2_read1
1fea8                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1fea8                 | '     if drivercog == -1 ' driver must be running
1fea8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1feac     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1feb0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1feb4     FF FF 7F FF 
1feb8     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1febc                 | '         return ERR_INACTIVE
1febc     0F FA 65 A6 |  if_e	neg	result1, #15
1fec0     7C 00 90 AD |  if_e	jmp	#LR__2631
1fec4                 | '     if count == 0 ' don't even bother reading
1fec4     00 16 0E F2 | 	cmp	arg03, #0 wz
1fec8                 | '         return 0
1fec8     00 FA 05 A6 |  if_e	mov	result1, #0
1fecc     70 00 90 AD |  if_e	jmp	#LR__2631
1fed0                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1fed0     00 FA 05 F6 | 	mov	result1, #0
1fed4     01 FA 61 FD | 	cogid	result1
1fed8     FD 00 02 F6 | 	mov	_var01, result1
1fedc     01 00 66 F0 | 	shl	_var01, #1
1fee0     FD 00 02 F1 | 	add	_var01, result1
1fee4     02 00 66 F0 | 	shl	_var01, #2
1fee8     FF 03 00 FF 
1feec     00 03 06 F6 | 	mov	_var02, ##524032
1fef0     00 03 02 F1 | 	add	_var02, _var01
1fef4                 | '     if long[mailbox] < 0
1fef4     01 01 02 FB | 	rdlong	_var01, _var02
1fef8     00 00 56 F2 | 	cmps	_var01, #0 wc
1fefc                 | '         return ERR_MAILBOX_BUSY
1fefc     1C FA 65 C6 |  if_b	neg	result1, #28
1ff00     3C 00 90 CD |  if_b	jmp	#LR__2631
1ff04                 | '     long[mailbox][2] := count
1ff04     08 02 06 F1 | 	add	_var02, #8
1ff08     01 17 62 FC | 	wrlong	arg03, _var02
1ff0c                 | '     long[mailbox][1] := dstHubAddr
1ff0c     04 02 86 F1 | 	sub	_var02, #4
1ff10     01 13 62 FC | 	wrlong	arg01, _var02
1ff14     04 02 86 F1 | 	sub	_var02, #4
1ff18                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
1ff18     0A 05 02 F6 | 	mov	_var03, arg02
1ff1c     D9 04 06 F4 | 	bitl	_var03, #217
1ff20     00 00 58 FF 
1ff24     00 00 06 F6 | 	mov	_var01, ##-1342177280
1ff28     02 01 02 F1 | 	add	_var01, _var03
1ff2c     01 01 62 FC | 	wrlong	_var01, _var02
1ff30                 | '     repeat
1ff30                 | LR__2630
1ff30                 | '         result := long[mailbox]    
1ff30     01 05 02 FB | 	rdlong	_var03, _var02
1ff34     00 04 56 F2 | 	cmps	_var03, #0 wc
1ff38     F4 FF 9F CD |  if_b	jmp	#LR__2630
1ff3c                 | '     while result < 0   
1ff3c                 | '     return -result                       'return success or error
1ff3c     02 FB 61 F6 | 	neg	result1, _var03
1ff40                 | LR__2631
1ff40                 | _psram_spin2_read1_ret
1ff40     2D 00 64 FD | 	ret
1ff44                 | 
1ff44                 | ' 
1ff44                 | ' '..............................................................................
1ff44                 | ' 
1ff44                 | ' {{
1ff44                 | ' }}
1ff44                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
1ff44                 | _psram_spin2_write
1ff44                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1ff44                 | '     if drivercog == -1 ' driver must be running
1ff44     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1ff48     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1ff4c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1ff50     FF FF 7F FF 
1ff54     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1ff58                 | '         return ERR_INACTIVE
1ff58     0F FA 65 A6 |  if_e	neg	result1, #15
1ff5c     7C 00 90 AD |  if_e	jmp	#LR__2641
1ff60                 | '     if count == 0 ' don't even bother writing
1ff60     00 16 0E F2 | 	cmp	arg03, #0 wz
1ff64                 | '         return 0
1ff64     00 FA 05 A6 |  if_e	mov	result1, #0
1ff68     70 00 90 AD |  if_e	jmp	#LR__2641
1ff6c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1ff6c     00 FA 05 F6 | 	mov	result1, #0
1ff70     01 FA 61 FD | 	cogid	result1
1ff74     FD 00 02 F6 | 	mov	_var01, result1
1ff78     01 00 66 F0 | 	shl	_var01, #1
1ff7c     FD 00 02 F1 | 	add	_var01, result1
1ff80     02 00 66 F0 | 	shl	_var01, #2
1ff84     FF 03 00 FF 
1ff88     00 03 06 F6 | 	mov	_var02, ##524032
1ff8c     00 03 02 F1 | 	add	_var02, _var01
1ff90                 | '     if long[mailbox] < 0
1ff90     01 01 02 FB | 	rdlong	_var01, _var02
1ff94     00 00 56 F2 | 	cmps	_var01, #0 wc
1ff98                 | '         return ERR_MAILBOX_BUSY
1ff98     1C FA 65 C6 |  if_b	neg	result1, #28
1ff9c     3C 00 90 CD |  if_b	jmp	#LR__2641
1ffa0                 | '     long[mailbox][2] := count
1ffa0     08 02 06 F1 | 	add	_var02, #8
1ffa4     01 17 62 FC | 	wrlong	arg03, _var02
1ffa8                 | '     long[mailbox][1] := srcHubAddr
1ffa8     04 02 86 F1 | 	sub	_var02, #4
1ffac     01 13 62 FC | 	wrlong	arg01, _var02
1ffb0     04 02 86 F1 | 	sub	_var02, #4
1ffb4                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
1ffb4     0A 05 02 F6 | 	mov	_var03, arg02
1ffb8     D9 04 06 F4 | 	bitl	_var03, #217
1ffbc     00 00 78 FF 
1ffc0     00 00 06 F6 | 	mov	_var01, ##-268435456
1ffc4     02 01 02 F1 | 	add	_var01, _var03
1ffc8     01 01 62 FC | 	wrlong	_var01, _var02
1ffcc                 | '     repeat
1ffcc                 | LR__2640
1ffcc                 | '         result := long[mailbox]    
1ffcc     01 05 02 FB | 	rdlong	_var03, _var02
1ffd0     00 04 56 F2 | 	cmps	_var03, #0 wc
1ffd4     F4 FF 9F CD |  if_b	jmp	#LR__2640
1ffd8                 | '     while result < 0   
1ffd8                 | '     return -result                       'return success or error
1ffd8     02 FB 61 F6 | 	neg	result1, _var03
1ffdc                 | LR__2641
1ffdc                 | _psram_spin2_write_ret
1ffdc     2D 00 64 FD | 	ret
1ffe0                 | 
1ffe0                 | ' 
1ffe0                 | ' ' generalized fill
1ffe0                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
1ffe0                 | _psram_spin2_fill
1ffe0     09 01 02 F6 | 	mov	_var01, arg01
1ffe4     0A 03 02 F6 | 	mov	_var02, arg02
1ffe8     0B 05 02 F6 | 	mov	_var03, arg03
1ffec     0D 07 02 F6 | 	mov	_var04, arg05
1fff0                 | '     case datasize 
1fff0     01 06 86 F1 | 	sub	_var04, #1
1fff4     04 06 26 F3 | 	fle	_var04, #4
1fff8     30 06 62 FD | 	jmprel	_var04
1fffc                 | LR__2650
1fffc     10 00 90 FD | 	jmp	#LR__2651
20000     18 00 90 FD | 	jmp	#LR__2652
20004     2C 00 90 FD | 	jmp	#LR__2654
20008     1C 00 90 FD | 	jmp	#LR__2653
2000c     24 00 90 FD | 	jmp	#LR__2654
20010                 | LR__2651
20010                 | '         1: req := driver.R_WRITEBYTE
20010     00 00 60 FF 
20014     00 08 06 F6 | 	mov	_var05, ##-1073741824
20018     20 00 90 FD | 	jmp	#LR__2655
2001c                 | LR__2652
2001c                 | '         2: req := driver.R_WRITEWORD
2001c     00 00 68 FF 
20020     00 08 06 F6 | 	mov	_var05, ##-805306368
20024     14 00 90 FD | 	jmp	#LR__2655
20028                 | LR__2653
20028                 | '         4: req := driver.R_WRITELONG
20028     00 00 70 FF 
2002c     00 08 06 F6 | 	mov	_var05, ##-536870912
20030     08 00 90 FD | 	jmp	#LR__2655
20034                 | LR__2654
20034                 | '         other : return ERR_INVALID
20034     06 FA 65 F6 | 	neg	result1, #6
20038     94 00 90 FD | 	jmp	#LR__2657
2003c                 | LR__2655
2003c                 | '     if count == 0   ' nothing to do
2003c     00 04 0E F2 | 	cmp	_var03, #0 wz
20040                 | '         return 0
20040     00 FA 05 A6 |  if_e	mov	result1, #0
20044     88 00 90 AD |  if_e	jmp	#LR__2657
20048                 | '     if drivercog == -1
20048     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
2004c     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
20050     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20054     FF FF 7F FF 
20058     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
2005c                 | '         return ERR_INACTIVE
2005c     0F FA 65 A6 |  if_e	neg	result1, #15
20060     6C 00 90 AD |  if_e	jmp	#LR__2657
20064                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
20064     00 FA 05 F6 | 	mov	result1, #0
20068     01 FA 61 FD | 	cogid	result1
2006c     FD 06 02 F6 | 	mov	_var04, result1
20070     01 06 66 F0 | 	shl	_var04, #1
20074     FD 06 02 F1 | 	add	_var04, result1
20078     02 06 66 F0 | 	shl	_var04, #2
2007c     FF 03 00 FF 
20080     00 0B 06 F6 | 	mov	_var06, ##524032
20084     03 0B 02 F1 | 	add	_var06, _var04
20088                 | '     if long[mailbox] < 0
20088     05 07 02 FB | 	rdlong	_var04, _var06
2008c     00 06 56 F2 | 	cmps	_var04, #0 wc
20090                 | '         return ERR_MAILBOX_BUSY
20090     1C FA 65 C6 |  if_b	neg	result1, #28
20094     38 00 90 CD |  if_b	jmp	#LR__2657
20098                 | '     long[mailbox][2] := count
20098     08 0A 06 F1 | 	add	_var06, #8
2009c     05 05 62 FC | 	wrlong	_var03, _var06
200a0                 | '     long[mailbox][1] := pattern
200a0     04 0A 86 F1 | 	sub	_var06, #4
200a4     05 03 62 FC | 	wrlong	_var02, _var06
200a8     04 0A 86 F1 | 	sub	_var06, #4
200ac                 | '     long[mailbox] := req + (addr & $1ffffff)
200ac     04 0D 02 F6 | 	mov	_var07, _var05
200b0     00 0F 02 F6 | 	mov	_var08, _var01
200b4     D9 0E 06 F4 | 	bitl	_var08, #217
200b8     07 0D 02 F1 | 	add	_var07, _var08
200bc     05 0D 62 FC | 	wrlong	_var07, _var06
200c0                 | '     repeat
200c0                 | LR__2656
200c0                 | '         r := long[mailbox]
200c0     05 0F 02 FB | 	rdlong	_var08, _var06
200c4     00 0E 56 F2 | 	cmps	_var08, #0 wc
200c8     F4 FF 9F CD |  if_b	jmp	#LR__2656
200cc                 | '     while r < 0
200cc                 | '     return -r                  ' return 0 for success or negated error code
200cc     07 FB 61 F6 | 	neg	result1, _var08
200d0                 | LR__2657
200d0                 | _psram_spin2_fill_ret
200d0     2D 00 64 FD | 	ret
200d4                 | 
200d4                 | ' 
200d4                 | ' '..............................................................................
200d4                 | ' 
200d4                 | ' {{
200d4                 | ' }}
200d4                 | ' PUB setQos(cog, qos) : result | mailbox
200d4                 | _psram_spin2_setQos
200d4     09 01 02 F6 | 	mov	_var01, arg01
200d8                 | '     if drivercog == -1 ' driver must be running
200d8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
200dc     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
200e0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
200e4     FF FF 7F FF 
200e8     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
200ec                 | '         return ERR_INACTIVE
200ec     0F FA 65 A6 |  if_e	neg	result1, #15
200f0     9C 00 90 AD |  if_e	jmp	#LR__2664
200f4                 | '     if cog < 0 or cog > 7 ' enforce cog id range
200f4     00 00 56 F2 | 	cmps	_var01, #0 wc
200f8     08 00 90 CD |  if_b	jmp	#LR__2660
200fc     08 00 56 F2 | 	cmps	_var01, #8 wc
20100     08 00 90 CD |  if_b	jmp	#LR__2661
20104                 | LR__2660
20104                 | '         return ERR_INVALID
20104     06 FA 65 F6 | 	neg	result1, #6
20108     84 00 90 FD | 	jmp	#LR__2664
2010c                 | LR__2661
2010c                 | '     long[@qosData][cog] := qos & !$1ff
2010c     FF 15 26 F5 | 	andn	arg02, #511
20110     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
20114     02 00 66 F0 | 	shl	_var01, #2
20118     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
2011c     00 15 62 FC | 	wrlong	arg02, _var01
20120                 | '     mailbox := $7FF00 + drivercog*12
20120     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
20124     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
20128     02 07 02 F6 | 	mov	_var04, _var03
2012c     01 06 66 F0 | 	shl	_var04, #1
20130     02 07 02 F1 | 	add	_var04, _var03
20134     02 06 66 F0 | 	shl	_var04, #2
20138     FF 03 00 FF 
2013c     00 09 06 F6 | 	mov	_var05, ##524032
20140     03 09 02 F1 | 	add	_var05, _var04
20144                 | '     repeat until LOCKTRY(driverlock)
20144     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
20148                 | LR__2662
20148     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
2014c     06 12 72 FD | 	locktry	arg01 wc
20150     F4 FF 9F 3D |  if_ae	jmp	#LR__2662
20154     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
20158                 | '     long[mailbox] := driver.R_CONFIG + cogid()
20158     00 06 06 F6 | 	mov	_var04, #0
2015c     01 06 62 FD | 	cogid	_var04
20160     00 00 78 FF 
20164     00 02 06 F6 | 	mov	_var02, ##-268435456
20168     03 03 02 F1 | 	add	_var02, _var04
2016c     04 03 62 FC | 	wrlong	_var02, _var05
20170                 | '     repeat while long[mailbox] < 0
20170                 | LR__2663
20170     04 03 02 FB | 	rdlong	_var02, _var05
20174     00 02 56 F2 | 	cmps	_var02, #0 wc
20178     F4 FF 9F CD |  if_b	jmp	#LR__2663
2017c                 | '     LOCKREL(driverlock)
2017c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
20180     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
20184     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
20188     07 12 72 FD | 	lockrel	arg01 wc
2018c     00 FA 05 F6 | 	mov	result1, #0
20190                 | LR__2664
20190                 | _psram_spin2_setQos_ret
20190     2D 00 64 FD | 	ret
20194                 | 
20194                 | ' 
20194                 | ' '..............................................................................
20194                 | ' 
20194                 | ' {{
20194                 | ' }}
20194                 | ' PRI lookupDelay(freq) : delay | profile
20194                 | _psram_spin2_lookupDelay
20194                 | '     profile := @delayTable
20194     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
20198     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
2019c                 | '     delay := long[profile][0]
2019c     00 03 02 FB | 	rdlong	_var02, _var01
201a0                 | '     repeat while long[profile][1] 
201a0     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
201a4     97 16 48 FB | 	callpa	#(@LR__2671-@LR__2670)>>2,fcache_load_ptr_
201a8                 | LR__2670
201a8     04 00 06 F1 | 	add	_var01, #4
201ac     00 FB 09 FB | 	rdlong	result1, _var01 wz
201b0     04 00 86 F1 | 	sub	_var01, #4
201b4     1C 00 90 AD |  if_e	jmp	#LR__2672
201b8                 | '         if freq +< long[profile][1] 
201b8     04 00 06 F1 | 	add	_var01, #4
201bc     00 FB 01 FB | 	rdlong	result1, _var01
201c0     04 00 86 F1 | 	sub	_var01, #4
201c4     FD 12 12 F2 | 	cmp	arg01, result1 wc
201c8                 | '             quit
201c8                 | '         profile += 4
201c8     04 00 06 31 |  if_ae	add	_var01, #4
201cc                 | '         delay++
201cc     01 02 06 31 |  if_ae	add	_var02, #1
201d0     D4 FF 9F 3D |  if_ae	jmp	#LR__2670
201d4                 | LR__2671
201d4                 | LR__2672
201d4     01 FB 01 F6 | 	mov	result1, _var02
201d8                 | _psram_spin2_lookupDelay_ret
201d8     2D 00 64 FD | 	ret
201dc                 | 
201dc                 | ' 
201dc                 | ' PUB start() : r
201dc                 | _usbnew_spin2_start
201dc     00 00 06 F6 | 	mov	_var01, #0
201e0                 | '   ifnot driver_cog
201e0     15 00 00 FF 
201e4     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
201e8     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
201ec     15 00 00 FF 
201f0     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
201f4     38 00 90 5D |  if_ne	jmp	#LR__2680
201f8                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
201f8     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
201fc     10 00 06 F6 | 	mov	_var01, #16
20200     00 16 06 F6 | 	mov	arg03, #0
20204     28 16 62 FD | 	setq	arg03
20208     0A 01 F2 FC | 	coginit	_var01, arg02 wc
2020c     01 00 66 C6 |  if_b	neg	_var01, #1
20210                 | '     if r >= 0
20210     00 00 56 F2 | 	cmps	_var01, #0 wc
20214                 | '       driver_cog := r+1
20214     00 03 02 36 |  if_ae	mov	_var02, _var01
20218     01 02 06 31 |  if_ae	add	_var02, #1
2021c     15 00 00 3F 
20220     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
20224     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
20228     15 00 00 3F 
2022c     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
20230                 | LR__2680
20230     00 FB 01 F6 | 	mov	result1, _var01
20234                 | _usbnew_spin2_start_ret
20234     2D 00 64 FD | 	ret
20238                 | 
20238                 | '     '' (Always enabled)
20238                 | ' 
20238                 | ' '' Get current pressed state of a keyboard key
20238                 | ' PUB keystate(key) : r | buf[2],tmp
20238                 | _usbnew_spin2_keystate
20238     00 04 06 F6 | 	mov	_var03, #0
2023c                 | '   if key >= $E0 && key < $E8
2023c     E0 12 56 F2 | 	cmps	arg01, #224 wc
20240     34 00 90 CD |  if_b	jmp	#LR__2690
20244     E8 12 56 F2 | 	cmps	arg01, #232 wc
20248     2C 00 90 3D |  if_ae	jmp	#LR__2690
2024c                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
2024c     00 FA 05 F6 | 	mov	result1, #0
20250     13 00 00 FF 
20254     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
20258     09 07 02 F6 | 	mov	_var04, arg01
2025c     E0 06 86 F1 | 	sub	_var04, #224
20260     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
20264     03 09 4A F0 | 	shr	_var05, _var04 wz
20268     13 00 00 FF 
2026c     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
20270     01 FA 65 56 |  if_ne	neg	result1, #1
20274     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
20278                 | LR__2690
20278                 | '   else
20278                 | '     '' Do this in inline ASM to ensure atomicity
20278                 | '     tmp := @hkbd_report
20278     13 00 00 FF 
2027c     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
20280     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
20284                 | '     org
20284     13 00 00 FF 
20288     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
2028c     97 1E 48 FB | 	callpa	#(@LR__2692-@LR__2691)>>2,fcache_load_ptr_
20290                 | LR__2691
20290 000             | 	org	0
20290 000 28 02 64 FD | 	setq	#1
20294 001 04 01 02 FB | 	rdlong	_var01, _var05
20298 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
2029c 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
202a0 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
202a4 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
202a8 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
202ac 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
202b0 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
202b4 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
202b8 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
202bc 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
202c0 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
202c4 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
202c8 00e 01 04 66 A6 |  if_e	neg	_var03, #1
202cc 00f             | LR__2692
202cc                 | 	orgh
202cc     02 FB 01 F6 | 	mov	result1, _var03
202d0                 | _usbnew_spin2_keystate_ret
202d0     2D 00 64 FD | 	ret
202d4                 | 
202d4                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
202d4                 | ' 
202d4                 | ' '' Return key event from buffer if there is one
202d4                 | ' PUB get_key() : r | tail
202d4                 | _usbnew_spin2_get_key
202d4                 | '   tail := keyq_tail
202d4     0F 00 00 FF 
202d8     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
202dc     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
202e0                 | '   if keyq_head == tail
202e0     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
202e4     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
202e8     0F 00 00 FF 
202ec     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
202f0     00 03 0A F2 | 	cmp	_var02, _var01 wz
202f4                 | '     return 0 ' No event
202f4     00 FA 05 A6 |  if_e	mov	result1, #0
202f8     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
202fc                 | '   r := keyq_data[tail]
202fc     00 03 02 F6 | 	mov	_var02, _var01
20300     02 02 66 F0 | 	shl	_var02, #2
20304     0F 00 00 FF 
20308     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
2030c     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
20310     01 FB 01 FB | 	rdlong	result1, _var02
20314                 | '   if ++tail == KEYQUEUE_SIZE
20314     01 00 06 F1 | 	add	_var01, #1
20318     80 00 0E F2 | 	cmp	_var01, #128 wz
2031c                 | '     tail := 0
2031c     00 00 06 A6 |  if_e	mov	_var01, #0
20320                 | '   keyq_tail := tail
20320     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
20324     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
20328     0F 00 00 FF 
2032c     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
20330                 | _usbnew_spin2_get_key_ret
20330     2D 00 64 FD | 	ret
20334                 | 
20334                 | ' 
20334                 | ' '' Emulate mouse movement
20334                 | ' PUB mouse_move(x,y)
20334                 | _usbnew_spin2_mouse_move
20334     02 4A 05 F6 | 	mov	COUNT_, #2
20338     A8 00 A0 FD | 	call	#pushregs_
2033c     09 1F 02 F6 | 	mov	local01, arg01
20340     0A 21 02 F6 | 	mov	local02, arg02
20344                 | '   mouse_lock := 1
20344     14 00 00 FF 
20348     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
2034c     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
20350     14 00 00 FF 
20354     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
20358                 | '   waitus(2) ' hope driver is now done
20358     02 12 06 F6 | 	mov	arg01, #2
2035c     E8 0A B0 FD | 	call	#__system___waitus
20360                 | '   mouse_xacc := x
20360     14 00 00 FF 
20364     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
20368     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
2036c                 | '   mouse_yacc := y
2036c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
20370     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
20374                 | '   if mouse_outptr
20374     04 00 00 FF 
20378     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
2037c     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
20380     0F 00 00 FF 
20384     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
20388     24 00 90 AD |  if_e	jmp	#LR__2700
2038c                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
2038c     10 20 66 F0 | 	shl	local02, #16
20390     0F 1F 32 F9 | 	getword	local01, local01, #0
20394     0F 21 42 F5 | 	or	local02, local01
20398     0F 00 00 FF 
2039c     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
203a0     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
203a4     0F 00 00 FF 
203a8     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
203ac     0F 21 62 FC | 	wrlong	local02, local01
203b0                 | LR__2700
203b0                 | '   mouse_lock := 0
203b0     14 00 00 FF 
203b4     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
203b8     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
203bc     14 00 00 FF 
203c0     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
203c4     A7 F0 03 F6 | 	mov	ptra, fp
203c8     B2 00 A0 FD | 	call	#popregs_
203cc                 | _usbnew_spin2_mouse_move_ret
203cc     2D 00 64 FD | 	ret
203d0                 | 
203d0                 | '     '' Set HAVE_HIDPAD to enable.
203d0                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
203d0                 | ' 
203d0                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
203d0                 | ' PUB hidpad_id(dev) : r
203d0                 | _usbnew_spin2_hidpad_id
203d0                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
203d0     13 00 00 FF 
203d4     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
203d8     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
203dc     09 01 02 F6 | 	mov	_var01, arg01
203e0     03 00 66 F0 | 	shl	_var01, #3
203e4     09 01 82 F1 | 	sub	_var01, arg01
203e8     02 00 66 F0 | 	shl	_var01, #2
203ec     00 FB 01 F1 | 	add	result1, _var01
203f0     FD FA 01 FB | 	rdlong	result1, result1
203f4     13 00 00 FF 
203f8     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
203fc                 | _usbnew_spin2_hidpad_id_ret
203fc     2D 00 64 FD | 	ret
20400                 | 
20400                 | ' 
20400                 | ' '' Get all button states for a device
20400                 | ' PUB hidpad_buttons(dev) : r 
20400                 | _usbnew_spin2_hidpad_buttons
20400                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
20400     13 00 00 FF 
20404     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
20408     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
2040c     09 01 02 F6 | 	mov	_var01, arg01
20410     03 00 66 F0 | 	shl	_var01, #3
20414     09 01 82 F1 | 	sub	_var01, arg01
20418     02 00 66 F0 | 	shl	_var01, #2
2041c     00 FB 01 F1 | 	add	result1, _var01
20420     14 FA 05 F1 | 	add	result1, #20
20424     FD FA 01 FB | 	rdlong	result1, result1
20428     13 00 00 FF 
2042c     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
20430                 | _usbnew_spin2_hidpad_buttons_ret
20430     2D 00 64 FD | 	ret
20434                 | 
20434                 | ' 
20434                 | ' '' Get state of an axis (normalized between -32768 and 32767)
20434                 | ' PUB hidpad_axis(dev,axnum) : r
20434                 | _usbnew_spin2_hidpad_axis
20434                 | '   if axnum +>= 6
20434     06 14 16 F2 | 	cmp	arg02, #6 wc
20438                 | '     return 0
20438     00 FA 05 36 |  if_ae	mov	result1, #0
2043c     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
20440                 | '   else 
20440                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
20440     13 00 00 FF 
20444     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
20448     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
2044c     09 01 02 F6 | 	mov	_var01, arg01
20450     03 00 66 F0 | 	shl	_var01, #3
20454     09 01 82 F1 | 	sub	_var01, arg01
20458     02 00 66 F0 | 	shl	_var01, #2
2045c     00 FB 01 F1 | 	add	result1, _var01
20460     04 00 06 F6 | 	mov	_var01, #4
20464     0A 01 02 F1 | 	add	_var01, arg02
20468     01 00 66 F0 | 	shl	_var01, #1
2046c     FD 00 02 F1 | 	add	_var01, result1
20470     00 FB E1 FA | 	rdword	result1, _var01
20474     0F FA 65 F7 | 	signx	result1, #15
20478     13 00 00 FF 
2047c     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
20480                 | _usbnew_spin2_hidpad_axis_ret
20480     2D 00 64 FD | 	ret
20484                 | 
20484                 | ' 
20484                 | ' 
20484                 | ' '--------------------------------------------------------------
20484                 | ' '---------- Init the variables, start the cog. ----------------
20484                 | ' '--------------------------------------------------------------
20484                 | ' 
20484                 | ' pub start(mbox,scope,cache) :cog,base | iii
20484                 | _audio096_spin2_start
20484     04 4A 05 F6 | 	mov	COUNT_, #4
20488     A8 00 A0 FD | 	call	#pushregs_
2048c     09 1F 02 F6 | 	mov	local01, arg01
20490                 | ' 
20490                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
20490                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
20490                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
20490                 | ' 
20490                 | ' mailboxaddr:=mbox 
20490     F2 1E 62 FC | 	wrlong	local01, objptr
20494                 | ' scope_ptr:=scope
20494     04 E4 05 F1 | 	add	objptr, #4
20498     F2 14 62 FC | 	wrlong	arg02, objptr
2049c                 | ' cache_ptr:=cache
2049c     04 E4 05 F1 | 	add	objptr, #4
204a0     F2 16 62 FC | 	wrlong	arg03, objptr
204a4                 | ' base:=@channel1[0]
204a4     04 E4 05 F1 | 	add	objptr, #4
204a8     F2 20 02 F6 | 	mov	local02, objptr
204ac                 | ' long[$40]:=mbox
204ac     40 1E 66 FC | 	wrlong	local01, #64
204b0                 | ' repeat iii from 0 to 7
204b0     00 22 06 F6 | 	mov	local03, #0
204b4     02 00 00 FF 
204b8     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
204bc     0C E4 85 F1 | 	sub	objptr, #12
204c0     97 BC 48 FB | 	callpa	#(@LR__2711-@LR__2710)>>2,fcache_load_ptr_
204c4                 | LR__2710
204c4                 | '   long[base+64*iii]:=0
204c4     10 1F 02 F6 | 	mov	local01, local02
204c8     11 FD 01 F6 | 	mov	result2, local03
204cc     06 FC 65 F0 | 	shl	result2, #6
204d0     FE 1E 02 F1 | 	add	local01, result2
204d4     0F 01 68 FC | 	wrlong	#0, local01
204d8                 | '   long[base+64*iii+4]:=0
204d8     10 1F 02 F6 | 	mov	local01, local02
204dc     11 FD 01 F6 | 	mov	result2, local03
204e0     06 FC 65 F0 | 	shl	result2, #6
204e4     FE 1E 02 F1 | 	add	local01, result2
204e8     04 1E 06 F1 | 	add	local01, #4
204ec     0F 01 68 FC | 	wrlong	#0, local01
204f0                 | '   long[base+64*iii+12]:=0
204f0     10 25 02 F6 | 	mov	local04, local02
204f4     11 1F 02 F6 | 	mov	local01, local03
204f8     06 1E 66 F0 | 	shl	local01, #6
204fc     0F 25 02 F1 | 	add	local04, local01
20500     0C 24 06 F1 | 	add	local04, #12
20504     12 01 68 FC | 	wrlong	#0, local04
20508                 | '   long[base+64*iii+16]:=2 
20508     10 25 02 F6 | 	mov	local04, local02
2050c     11 1F 02 F6 | 	mov	local01, local03
20510     06 1E 66 F0 | 	shl	local01, #6
20514     0F 25 02 F1 | 	add	local04, local01
20518     10 24 06 F1 | 	add	local04, #16
2051c     12 05 68 FC | 	wrlong	#2, local04
20520                 | '   word[base+64*iii+20]:=0
20520     10 25 02 F6 | 	mov	local04, local02
20524     11 1F 02 F6 | 	mov	local01, local03
20528     06 1E 66 F0 | 	shl	local01, #6
2052c     0F 25 02 F1 | 	add	local04, local01
20530     14 24 06 F1 | 	add	local04, #20
20534     12 01 58 FC | 	wrword	#0, local04
20538                 | '   word[base+64*iii+22]:=8192
20538     10 25 02 F6 | 	mov	local04, local02
2053c     11 1F 02 F6 | 	mov	local01, local03
20540     06 1E 66 F0 | 	shl	local01, #6
20544     0F 25 02 F1 | 	add	local04, local01
20548     16 24 06 F1 | 	add	local04, #22
2054c     10 00 80 FF 
20550     12 01 58 FC | 	wrword	##8192, local04
20554                 | '   word[base+64*iii+24]:=4000+2*iii
20554     11 25 02 F6 | 	mov	local04, local03
20558     01 24 66 F0 | 	shl	local04, #1
2055c     07 00 00 FF 
20560     A0 1F 06 F6 | 	mov	local01, ##4000
20564     12 1F 02 F1 | 	add	local01, local04
20568     10 25 02 F6 | 	mov	local04, local02
2056c     11 FD 01 F6 | 	mov	result2, local03
20570     06 FC 65 F0 | 	shl	result2, #6
20574     FE 24 02 F1 | 	add	local04, result2
20578     18 24 06 F1 | 	add	local04, #24
2057c     12 1F 52 FC | 	wrword	local01, local04
20580                 | '   word[base+64*iii+26]:=2
20580     10 25 02 F6 | 	mov	local04, local02
20584     11 1F 02 F6 | 	mov	local01, local03
20588     06 1E 66 F0 | 	shl	local01, #6
2058c     0F 25 02 F1 | 	add	local04, local01
20590     1A 24 06 F1 | 	add	local04, #26
20594     12 05 58 FC | 	wrword	#2, local04
20598                 | '   long [base+64*iii+8]:=@null | $C0000000
20598     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
2059c     3E 1E 26 F4 | 	bith	local01, #62
205a0     10 25 02 F6 | 	mov	local04, local02
205a4     11 17 02 F6 | 	mov	arg03, local03
205a8     06 16 66 F0 | 	shl	arg03, #6
205ac     0B 25 02 F1 | 	add	local04, arg03
205b0     08 24 06 F1 | 	add	local04, #8
205b4     12 1F 62 FC | 	wrlong	local01, local04
205b8                 | '   long[base+64*iii+32]:=0
205b8     10 25 02 F6 | 	mov	local04, local02
205bc     11 1F 02 F6 | 	mov	local01, local03
205c0     06 1E 66 F0 | 	shl	local01, #6
205c4     0F 25 02 F1 | 	add	local04, local01
205c8     20 24 06 F1 | 	add	local04, #32
205cc     12 01 68 FC | 	wrlong	#0, local04
205d0                 | '   long[base+64*iii+36]:=0
205d0     10 25 02 F6 | 	mov	local04, local02
205d4     11 1F 02 F6 | 	mov	local01, local03
205d8     06 1E 66 F0 | 	shl	local01, #6
205dc     0F 25 02 F1 | 	add	local04, local01
205e0     24 24 06 F1 | 	add	local04, #36
205e4     12 01 68 FC | 	wrlong	#0, local04
205e8                 | '   long[base+64*iii+40]:=0
205e8     10 25 02 F6 | 	mov	local04, local02
205ec     11 1F 02 F6 | 	mov	local01, local03
205f0     06 1E 66 F0 | 	shl	local01, #6
205f4     0F 25 02 F1 | 	add	local04, local01
205f8     28 24 06 F1 | 	add	local04, #40
205fc     12 01 68 FC | 	wrlong	#0, local04
20600                 | '   long[base+64*iii+44]:=0
20600     10 25 02 F6 | 	mov	local04, local02
20604     11 1F 02 F6 | 	mov	local01, local03
20608     06 1E 66 F0 | 	shl	local01, #6
2060c     0F 25 02 F1 | 	add	local04, local01
20610     2C 24 06 F1 | 	add	local04, #44
20614     12 01 68 FC | 	wrlong	#0, local04
20618                 | '   long[base+64*iii+28]:=0
20618     10 25 02 F6 | 	mov	local04, local02
2061c     11 1F 02 F6 | 	mov	local01, local03
20620     06 1E 66 F0 | 	shl	local01, #6
20624     0F 25 02 F1 | 	add	local04, local01
20628     1C 24 06 F1 | 	add	local04, #28
2062c     12 01 68 FC | 	wrlong	#0, local04
20630     01 22 06 F1 | 	add	local03, #1
20634     08 22 56 F2 | 	cmps	local03, #8 wc
20638     88 FE 9F CD |  if_b	jmp	#LR__2710
2063c                 | LR__2711
2063c     02 00 00 FF 
20640     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
20644                 | '   
20644                 | ' cog:=coginit(16,@audio,@mailboxaddr)
20644     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
20648     F2 16 02 F6 | 	mov	arg03, objptr
2064c     10 24 06 F6 | 	mov	local04, #16
20650     28 16 62 FD | 	setq	arg03
20654     0A 25 F2 FC | 	coginit	local04, arg02 wc
20658     01 24 66 C6 |  if_b	neg	local04, #1
2065c                 | ' waitms(100)
2065c     64 12 06 F6 | 	mov	arg01, #100
20660     78 07 B0 FD | 	call	#__system___waitms
20664                 | ' return cog,base
20664     10 FD 01 F6 | 	mov	result2, local02
20668     12 FB 01 F6 | 	mov	result1, local04
2066c     A7 F0 03 F6 | 	mov	ptra, fp
20670     B2 00 A0 FD | 	call	#popregs_
20674                 | _audio096_spin2_start_ret
20674     2D 00 64 FD | 	ret
20678                 | 
20678                 | ' 
20678                 | ' ' a simple play procedure to not poke everything. 
20678                 | ' 
20678                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
20678                 | _audio096_spin2_play
20678     0C E4 05 F1 | 	add	objptr, #12
2067c     F2 00 02 F6 | 	mov	_var01, objptr
20680     06 12 66 F0 | 	shl	arg01, #6
20684     09 01 02 F1 | 	add	_var01, arg01
20688     00 13 02 F6 | 	mov	arg01, _var01
2068c     0C 12 06 F1 | 	add	arg01, #12
20690     09 1B 62 FC | 	wrlong	arg05, arg01
20694     00 1C 56 F2 | 	cmps	arg06, #0 wc
20698     00 13 02 36 |  if_ae	mov	arg01, _var01
2069c     10 12 06 31 |  if_ae	add	arg01, #16
206a0     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
206a4     02 1A 06 C1 |  if_b	add	arg05, #2
206a8     00 13 02 C6 |  if_b	mov	arg01, _var01
206ac     10 12 06 C1 |  if_b	add	arg01, #16
206b0     09 1B 62 CC |  if_b	wrlong	arg05, arg01
206b4     0B 13 52 F6 | 	abs	arg01, arg03 wc
206b8     0F 1B 80 FF 
206bc     09 1F 1A FD | 	qdiv	##3546895, arg01
206c0                 | ' 
206c0                 | ' base2:=@channel1[0]+64*channel
206c0                 | ' 
206c0                 | ' 
206c0                 | ' long[base2+12]:= len
206c0                 | ' if loop >=0 
206c0                 | '   long[base2+16]:= loop
206c0     0C E4 85 F1 | 	sub	objptr, #12
206c4                 | ' else
206c4                 | '   long[base2+16]:= len+2
206c4                 | ' word[base2+20]:=vol
206c4     00 13 02 F6 | 	mov	arg01, _var01
206c8     14 12 06 F1 | 	add	arg01, #20
206cc     09 19 52 FC | 	wrword	arg04, arg01
206d0                 | ' word[base2+24]:= 3546895/splfreq 
206d0     00 19 02 F6 | 	mov	arg04, _var01
206d4     18 18 06 F1 | 	add	arg04, #24
206d8                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
206d8                 | ' long[base2+28]:=$40000000    
206d8                 | ' long[base2+32]:=0    
206d8                 | ' long[base2+36]:=0    
206d8                 | ' long[base2+40]:=0    
206d8                 | ' long[base2+44]:=0    
206d8                 | ' long[base2+8]:=sample+$C0000000     
206d8     00 00 60 FF 
206dc     00 14 06 F1 | 	add	arg02, ##-1073741824
206e0     18 12 62 FD | 	getqx	arg01
206e4     09 13 82 F6 | 	negc	arg01, arg01
206e8     0C 13 52 FC | 	wrword	arg01, arg04
206ec     00 13 02 F6 | 	mov	arg01, _var01
206f0     1A 12 06 F1 | 	add	arg01, #26
206f4     09 01 5A FC | 	wrword	#256, arg01
206f8     00 13 02 F6 | 	mov	arg01, _var01
206fc     1C 12 06 F1 | 	add	arg01, #28
20700     00 00 A0 FF 
20704     09 01 68 FC | 	wrlong	##1073741824, arg01
20708     00 13 02 F6 | 	mov	arg01, _var01
2070c     20 12 06 F1 | 	add	arg01, #32
20710     09 01 68 FC | 	wrlong	#0, arg01
20714     00 13 02 F6 | 	mov	arg01, _var01
20718     24 12 06 F1 | 	add	arg01, #36
2071c     09 01 68 FC | 	wrlong	#0, arg01
20720     00 13 02 F6 | 	mov	arg01, _var01
20724     28 12 06 F1 | 	add	arg01, #40
20728     09 01 68 FC | 	wrlong	#0, arg01
2072c     00 13 02 F6 | 	mov	arg01, _var01
20730     2C 12 06 F1 | 	add	arg01, #44
20734     09 01 68 FC | 	wrlong	#0, arg01
20738     08 00 06 F1 | 	add	_var01, #8
2073c     00 15 62 FC | 	wrlong	arg02, _var01
20740                 | _audio096_spin2_play_ret
20740     2D 00 64 FD | 	ret
20744                 | 
20744                 | ' 
20744                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
20744                 | _audio096_spin2_play8
20744                 | ' 
20744                 | ' base2:=@channel1[0]+64*channel
20744     0C E4 05 F1 | 	add	objptr, #12
20748     F2 00 02 F6 | 	mov	_var01, objptr
2074c     06 12 66 F0 | 	shl	arg01, #6
20750     09 01 02 F1 | 	add	_var01, arg01
20754                 | ' long[base2]:=0
20754     00 01 68 FC | 	wrlong	#0, _var01
20758                 | ' long[base2+8]:=sample+$40000000 
20758     00 00 20 FF 
2075c     00 14 06 F1 | 	add	arg02, ##1073741824
20760     00 13 02 F6 | 	mov	arg01, _var01
20764     08 12 06 F1 | 	add	arg01, #8
20768     09 15 62 FC | 	wrlong	arg02, arg01
2076c                 | ' if loop>=0
2076c     00 1C 56 F2 | 	cmps	arg06, #0 wc
20770     0C E4 85 F1 | 	sub	objptr, #12
20774     1C 00 90 CD |  if_b	jmp	#LR__2720
20778                 | '   long[base2+12]:=loop
20778     00 15 02 F6 | 	mov	arg02, _var01
2077c     0C 14 06 F1 | 	add	arg02, #12
20780     0A 1D 62 FC | 	wrlong	arg06, arg02
20784                 | '   long[base2+16]:= len
20784     00 1D 02 F6 | 	mov	arg06, _var01
20788     10 1C 06 F1 | 	add	arg06, #16
2078c     0E 1B 62 FC | 	wrlong	arg05, arg06
20790     1C 00 90 FD | 	jmp	#LR__2721
20794                 | LR__2720
20794                 | ' else
20794                 | '   long[base2+12]:= len
20794     00 1D 02 F6 | 	mov	arg06, _var01
20798     0C 1C 06 F1 | 	add	arg06, #12
2079c     0E 1B 62 FC | 	wrlong	arg05, arg06
207a0                 | '   long[base2+16]:= len+1
207a0     01 1A 06 F1 | 	add	arg05, #1
207a4     00 13 02 F6 | 	mov	arg01, _var01
207a8     10 12 06 F1 | 	add	arg01, #16
207ac     09 1B 62 FC | 	wrlong	arg05, arg01
207b0                 | LR__2721
207b0     0B 17 52 F6 | 	abs	arg03, arg03 wc
207b4     0F 1B 80 FF 
207b8     0B 1F 1A FD | 	qdiv	##3546895, arg03
207bc                 | ' word[base2+20]:=vol
207bc     00 17 02 F6 | 	mov	arg03, _var01
207c0     14 16 06 F1 | 	add	arg03, #20
207c4     0B 19 52 FC | 	wrword	arg04, arg03
207c8                 | ' word[base2+24]:= 3546895 /splfreq 
207c8     00 13 02 F6 | 	mov	arg01, _var01
207cc     18 12 06 F1 | 	add	arg01, #24
207d0                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
207d0     1A 00 06 F1 | 	add	_var01, #26
207d4     18 18 62 FD | 	getqx	arg04
207d8     0C 19 82 F6 | 	negc	arg04, arg04
207dc     09 19 52 FC | 	wrword	arg04, arg01
207e0     00 01 5A FC | 	wrword	#256, _var01
207e4                 | _audio096_spin2_play8_ret
207e4     2D 00 64 FD | 	ret
207e8                 | 
207e8                 | ' 'long[base2+28]:=$40000000
207e8                 | ' 
207e8                 | '     
207e8                 | ' pub stop(channel) 'silence it
207e8                 | _audio096_spin2_stop
207e8                 | ' 
207e8                 | ' word[@channel1[0]+64*channel+20]:=0
207e8     0C E4 05 F1 | 	add	objptr, #12
207ec     F2 00 02 F6 | 	mov	_var01, objptr
207f0     09 03 02 F6 | 	mov	_var02, arg01
207f4     06 02 66 F0 | 	shl	_var02, #6
207f8     01 01 02 F1 | 	add	_var01, _var02
207fc     14 00 06 F1 | 	add	_var01, #20
20800     00 01 58 FC | 	wrword	#0, _var01
20804                 | ' word[@channel1[0]+64*channel+20]:=0
20804     F2 00 02 F6 | 	mov	_var01, objptr
20808     06 12 66 F0 | 	shl	arg01, #6
2080c     09 01 02 F1 | 	add	_var01, arg01
20810     14 00 06 F1 | 	add	_var01, #20
20814     00 01 58 FC | 	wrword	#0, _var01
20818     0C E4 85 F1 | 	sub	objptr, #12
2081c                 | _audio096_spin2_stop_ret
2081c     2D 00 64 FD | 	ret
20820                 | hubexit
20820     81 00 80 FD | 	jmp	#cogexit
20824                 | 
20824                 | __system___setbaud
20824     14 7C 06 FB | 	rdlong	muldiva_, #20
20828     09 7F 02 F6 | 	mov	muldivb_, arg01
2082c     BA 00 A0 FD | 	call	#divide_
20830     97 06 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
20834                 | LR__2730
20834     3E FA 9D FA | 	rdpin	result1, #62 wc
20838     FE FC A1 F1 | 	subx	result2, result2
2083c     F4 FF 9F CD |  if_b	jmp	#LR__2730
20840                 | LR__2731
20840     40 7C 64 FD | 	dirl	#62
20844     40 7E 64 FD | 	dirl	#63
20848     F3 7E 62 FC | 	wrlong	muldivb_, ptr___system__dat__
2084c     10 7E 66 F0 | 	shl	muldivb_, #16
20850     07 14 06 F6 | 	mov	arg02, #7
20854     3F 15 02 F1 | 	add	arg02, muldivb_
20858     3E F8 0C FC | 	wrpin	#124, #62
2085c     3E 14 16 FC | 	wxpin	arg02, #62
20860     3F 7C 0C FC | 	wrpin	#62, #63
20864     14 14 06 F1 | 	add	arg02, #20
20868     3F 14 16 FC | 	wxpin	arg02, #63
2086c     41 7C 64 FD | 	dirh	#62
20870     41 7E 64 FD | 	dirh	#63
20874                 | __system___setbaud_ret
20874     2D 00 64 FD | 	ret
20878                 | 
20878                 | __system___txraw
20878     01 4A 05 F6 | 	mov	COUNT_, #1
2087c     A8 00 A0 FD | 	call	#pushregs_
20880     09 1F 02 F6 | 	mov	local01, arg01
20884     97 06 48 FB | 	callpa	#(@LR__2741-@LR__2740)>>2,fcache_load_ptr_
20888                 | LR__2740
20888     3E FA 9D FA | 	rdpin	result1, #62 wc
2088c     FE FC A1 F1 | 	subx	result2, result2
20890     F4 FF 9F CD |  if_b	jmp	#LR__2740
20894                 | LR__2741
20894     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
20898     C2 01 00 AF 
2089c     00 12 06 A6 |  if_e	mov	arg01, ##230400
208a0     80 FF BF AD |  if_e	call	#__system___setbaud
208a4     58 7C 64 FD | 	drvl	#62
208a8     3E 1E 26 FC | 	wypin	local01, #62
208ac     01 FA 05 F6 | 	mov	result1, #1
208b0     A7 F0 03 F6 | 	mov	ptra, fp
208b4     B2 00 A0 FD | 	call	#popregs_
208b8                 | __system___txraw_ret
208b8     2D 00 64 FD | 	ret
208bc                 | 
208bc                 | __system___rxraw
208bc     0D 4A 05 F6 | 	mov	COUNT_, #13
208c0     A8 00 A0 FD | 	call	#pushregs_
208c4     09 1F 02 F6 | 	mov	local01, arg01
208c8     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
208cc     C2 01 00 AF 
208d0     00 12 06 A6 |  if_e	mov	arg01, ##230400
208d4     4C FF BF AD |  if_e	call	#__system___setbaud
208d8     00 1E 0E F2 | 	cmp	local01, #0 wz
208dc     20 00 90 AD |  if_e	jmp	#LR__2750
208e0     14 22 06 FB | 	rdlong	local03, #20
208e4     0A 22 46 F0 | 	shr	local03, #10
208e8     11 1F 02 FD | 	qmul	local01, local03
208ec     1A FA 61 FD | 	getct	result1
208f0     18 24 62 FD | 	getqx	local04
208f4     12 FB 01 F1 | 	add	result1, local04
208f8     FD 26 02 F6 | 	mov	local05, result1
208fc     04 00 90 FD | 	jmp	#LR__2751
20900                 | LR__2750
20900     00 26 06 F6 | 	mov	local05, #0
20904                 | LR__2751
20904     01 28 66 F6 | 	neg	local06, #1
20908     3F 2A 06 F6 | 	mov	local07, #63
2090c     00 2C 06 F6 | 	mov	local08, #0
20910     04 E6 05 F1 | 	add	ptr___system__dat__, #4
20914     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
20918     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
2091c                 | LR__2752
2091c     08 2E 16 F4 | 	testb	local09, #8 wc
20920     09 2E 76 F4 | 	testbn	local09, #9 andc
20924     0A 2E 46 F0 | 	shr	local09, #10
20928     01 2C 06 C6 |  if_b	mov	local08, #1
2092c     40 7E 6C 3D |  if_ae	testp	#63 wz
20930     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
20934     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
20938     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
2093c                 | LR__2753
2093c     00 20 06 F6 | 	mov	local02, #0
20940     00 2C 0E F2 | 	cmp	local08, #0 wz
20944     01 20 66 56 |  if_ne	neg	local02, #1
20948     00 30 06 F6 | 	mov	local10, #0
2094c     00 22 06 F6 | 	mov	local03, #0
20950     00 1E 0E F2 | 	cmp	local01, #0 wz
20954     01 22 66 56 |  if_ne	neg	local03, #1
20958     00 24 06 F6 | 	mov	local04, #0
2095c     00 32 06 F6 | 	mov	local11, #0
20960     1A FA 61 FD | 	getct	result1
20964     FD 34 02 F6 | 	mov	local12, result1
20968     1A 37 02 F6 | 	mov	local13, local12
2096c     13 37 82 F1 | 	sub	local13, local05
20970     00 36 56 F2 | 	cmps	local13, #0 wc
20974     00 32 26 C6 |  if_b	not	local11, #0
20978     00 32 0E F2 | 	cmp	local11, #0 wz
2097c     00 24 26 56 |  if_ne	not	local04, #0
20980     12 23 CA F7 | 	test	local03, local04 wz
20984     00 30 26 56 |  if_ne	not	local10, #0
20988     18 21 4A F5 | 	or	local02, local10 wz
2098c     8C FF 9F AD |  if_e	jmp	#LR__2752
20990     00 2C 0E F2 | 	cmp	local08, #0 wz
20994     17 29 02 56 |  if_ne	mov	local06, local09
20998     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
2099c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
209a0     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
209a4     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
209a8     14 FB 01 F6 | 	mov	result1, local06
209ac     A7 F0 03 F6 | 	mov	ptra, fp
209b0     B2 00 A0 FD | 	call	#popregs_
209b4                 | __system___rxraw_ret
209b4     2D 00 64 FD | 	ret
209b8                 | 
209b8                 | __system___getus
209b8     1A FC 71 FD | 	getct	result2 wc
209bc     1A 00 62 FD | 	getct	_var01
209c0     10 E6 05 F1 | 	add	ptr___system__dat__, #16
209c4     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
209c8     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
209cc     20 00 90 5D |  if_ne	jmp	#LR__2760
209d0     14 02 06 FB | 	rdlong	_var02, #20
209d4     A1 07 00 FF 
209d8     40 02 16 FD | 	qdiv	_var02, ##1000000
209dc     10 E6 05 F1 | 	add	ptr___system__dat__, #16
209e0     18 FA 61 FD | 	getqx	result1
209e4     FD 02 02 F6 | 	mov	_var02, result1
209e8     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
209ec     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
209f0                 | LR__2760
209f0     01 FD 11 FD | 	qdiv	result2, _var02
209f4     19 FC 61 FD | 	getqy	result2
209f8     28 FC 61 FD | 	setq	result2
209fc     01 01 12 FD | 	qdiv	_var01, _var02
20a00     18 FA 61 FD | 	getqx	result1
20a04                 | __system___getus_ret
20a04     2D 00 64 FD | 	ret
20a08                 | 
20a08                 | __system____builtin_memmove
20a08     09 01 02 F6 | 	mov	_var01, arg01
20a0c     0A 13 52 F2 | 	cmps	arg01, arg02 wc
20a10     10 00 90 CD |  if_b	jmp	#LR__2770
20a14     0A 03 02 F6 | 	mov	_var02, arg02
20a18     0B 03 02 F1 | 	add	_var02, arg03
20a1c     01 13 52 F2 | 	cmps	arg01, _var02 wc
20a20     48 00 90 CD |  if_b	jmp	#LR__2776
20a24                 | LR__2770
20a24     0B 05 02 F6 | 	mov	_var03, arg03
20a28     02 04 4E F0 | 	shr	_var03, #2 wz
20a2c     18 00 90 AD |  if_e	jmp	#LR__2775
20a30     97 0A 48 FB | 	callpa	#(@LR__2773-@LR__2771)>>2,fcache_load_ptr_
20a34                 | LR__2771
20a34     02 09 D8 FC | 	rep	@LR__2774, _var03
20a38                 | LR__2772
20a38     0A 05 02 FB | 	rdlong	_var03, arg02
20a3c     09 05 62 FC | 	wrlong	_var03, arg01
20a40     04 12 06 F1 | 	add	arg01, #4
20a44     04 14 06 F1 | 	add	arg02, #4
20a48                 | LR__2773
20a48                 | LR__2774
20a48                 | LR__2775
20a48     02 16 CE F7 | 	test	arg03, #2 wz
20a4c     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
20a50     09 03 52 5C |  if_ne	wrword	_var02, arg01
20a54     02 12 06 51 |  if_ne	add	arg01, #2
20a58     02 14 06 51 |  if_ne	add	arg02, #2
20a5c     01 16 CE F7 | 	test	arg03, #1 wz
20a60     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
20a64     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
20a68     28 00 90 FD | 	jmp	#LR__2782
20a6c                 | LR__2776
20a6c     0B 13 02 F1 | 	add	arg01, arg03
20a70     0B 15 02 F1 | 	add	arg02, arg03
20a74     0B 07 0A F6 | 	mov	_var04, arg03 wz
20a78     18 00 90 AD |  if_e	jmp	#LR__2781
20a7c     97 0A 48 FB | 	callpa	#(@LR__2779-@LR__2777)>>2,fcache_load_ptr_
20a80                 | LR__2777
20a80     03 09 D8 FC | 	rep	@LR__2780, _var04
20a84                 | LR__2778
20a84     01 12 86 F1 | 	sub	arg01, #1
20a88     01 14 86 F1 | 	sub	arg02, #1
20a8c     0A 03 C2 FA | 	rdbyte	_var02, arg02
20a90     09 03 42 FC | 	wrbyte	_var02, arg01
20a94                 | LR__2779
20a94                 | LR__2780
20a94                 | LR__2781
20a94                 | LR__2782
20a94     00 FB 01 F6 | 	mov	result1, _var01
20a98                 | __system____builtin_memmove_ret
20a98     2D 00 64 FD | 	ret
20a9c                 | 
20a9c                 | __system____builtin_strcpy
20a9c     09 01 02 F6 | 	mov	_var01, arg01
20aa0     97 0A 48 FB | 	callpa	#(@LR__2791-@LR__2790)>>2,fcache_load_ptr_
20aa4                 | LR__2790
20aa4     0A FB C9 FA | 	rdbyte	result1, arg02 wz
20aa8     09 FB 41 FC | 	wrbyte	result1, arg01
20aac     01 14 06 F1 | 	add	arg02, #1
20ab0     01 12 06 F1 | 	add	arg01, #1
20ab4     EC FF 9F 5D |  if_ne	jmp	#LR__2790
20ab8                 | LR__2791
20ab8     00 FB 01 F6 | 	mov	result1, _var01
20abc                 | __system____builtin_strcpy_ret
20abc     2D 00 64 FD | 	ret
20ac0                 | 
20ac0                 | __system____topofstack
20ac0     00 4A 05 F6 | 	mov	COUNT_, #0
20ac4     A8 00 A0 FD | 	call	#pushregs_
20ac8     08 F0 07 F1 | 	add	ptra, #8
20acc     04 4E 05 F1 | 	add	fp, #4
20ad0     A7 12 62 FC | 	wrlong	arg01, fp
20ad4     A7 FA 01 F6 | 	mov	result1, fp
20ad8     04 4E 85 F1 | 	sub	fp, #4
20adc     A7 F0 03 F6 | 	mov	ptra, fp
20ae0     B2 00 A0 FD | 	call	#popregs_
20ae4                 | __system____topofstack_ret
20ae4     2D 00 64 FD | 	ret
20ae8                 | 
20ae8                 | __system___lockmem
20ae8     00 FA 05 F6 | 	mov	result1, #0
20aec     01 FA 61 FD | 	cogid	result1
20af0     00 FB 05 F1 | 	add	result1, #256
20af4                 | LR__2800
20af4     09 01 0A FB | 	rdlong	_var01, arg01 wz
20af8     09 FB 61 AC |  if_e	wrlong	result1, arg01
20afc     09 01 02 AB |  if_e	rdlong	_var01, arg01
20b00     09 01 02 AB |  if_e	rdlong	_var01, arg01
20b04     FD 00 0A F2 | 	cmp	_var01, result1 wz
20b08     E8 FF 9F 5D |  if_ne	jmp	#LR__2800
20b0c                 | __system___lockmem_ret
20b0c     2D 00 64 FD | 	ret
20b10                 | 
20b10                 | __system___string_cmp
20b10     97 14 48 FB | 	callpa	#(@LR__2811-@LR__2810)>>2,fcache_load_ptr_
20b14                 | LR__2810
20b14     09 01 C2 FA | 	rdbyte	_var01, arg01
20b18     0A 03 C2 FA | 	rdbyte	_var02, arg02
20b1c     00 05 02 F6 | 	mov	_var03, _var01
20b20     01 05 8A F1 | 	sub	_var03, _var02 wz
20b24     01 12 06 F1 | 	add	arg01, #1
20b28     01 14 06 F1 | 	add	arg02, #1
20b2c     0C 00 90 5D |  if_ne	jmp	#LR__2812
20b30     00 00 0E F2 | 	cmp	_var01, #0 wz
20b34     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
20b38     D8 FF 9F 5D |  if_ne	jmp	#LR__2810
20b3c                 | LR__2811
20b3c                 | LR__2812
20b3c     02 FB 01 F6 | 	mov	result1, _var03
20b40                 | __system___string_cmp_ret
20b40     2D 00 64 FD | 	ret
20b44                 | 
20b44                 | __system___string_concat
20b44     05 4A 05 F6 | 	mov	COUNT_, #5
20b48     A8 00 A0 FD | 	call	#pushregs_
20b4c     09 1F 02 F6 | 	mov	local01, arg01
20b50     0A 21 02 F6 | 	mov	local02, arg02
20b54     0F 13 02 F6 | 	mov	arg01, local01
20b58     09 23 02 F6 | 	mov	local03, arg01
20b5c     97 06 48 FB | 	callpa	#(@LR__2821-@LR__2820)>>2,fcache_load_ptr_
20b60                 | LR__2820
20b60     11 FB C9 FA | 	rdbyte	result1, local03 wz
20b64     01 22 06 51 |  if_ne	add	local03, #1
20b68     F4 FF 9F 5D |  if_ne	jmp	#LR__2820
20b6c                 | LR__2821
20b6c     09 23 82 F1 | 	sub	local03, arg01
20b70     11 25 02 F6 | 	mov	local04, local03
20b74     10 13 02 F6 | 	mov	arg01, local02
20b78     09 23 02 F6 | 	mov	local03, arg01
20b7c     97 06 48 FB | 	callpa	#(@LR__2823-@LR__2822)>>2,fcache_load_ptr_
20b80                 | LR__2822
20b80     11 FB C9 FA | 	rdbyte	result1, local03 wz
20b84     01 22 06 51 |  if_ne	add	local03, #1
20b88     F4 FF 9F 5D |  if_ne	jmp	#LR__2822
20b8c                 | LR__2823
20b8c     09 23 82 F1 | 	sub	local03, arg01
20b90     12 13 02 F6 | 	mov	arg01, local04
20b94     11 13 02 F1 | 	add	arg01, local03
20b98     01 12 06 F1 | 	add	arg01, #1
20b9c     00 3E B0 FD | 	call	#__system___gc_alloc_managed
20ba0     FD 26 0A F6 | 	mov	local05, result1 wz
20ba4     28 00 90 AD |  if_e	jmp	#LR__2824
20ba8     13 13 02 F6 | 	mov	arg01, local05
20bac     0F 15 02 F6 | 	mov	arg02, local01
20bb0     12 17 02 F6 | 	mov	arg03, local04
20bb4     50 FE BF FD | 	call	#__system____builtin_memmove
20bb8     13 13 02 F6 | 	mov	arg01, local05
20bbc     12 13 02 F1 | 	add	arg01, local04
20bc0     01 22 06 F1 | 	add	local03, #1
20bc4     10 15 02 F6 | 	mov	arg02, local02
20bc8     11 17 02 F6 | 	mov	arg03, local03
20bcc     38 FE BF FD | 	call	#__system____builtin_memmove
20bd0                 | LR__2824
20bd0     13 FB 01 F6 | 	mov	result1, local05
20bd4     A7 F0 03 F6 | 	mov	ptra, fp
20bd8     B2 00 A0 FD | 	call	#popregs_
20bdc                 | __system___string_concat_ret
20bdc     2D 00 64 FD | 	ret
20be0                 | 
20be0                 | __system___tx
20be0     02 4A 05 F6 | 	mov	COUNT_, #2
20be4     A8 00 A0 FD | 	call	#pushregs_
20be8     09 1F 02 F6 | 	mov	local01, arg01
20bec     0A 1E 0E F2 | 	cmp	local01, #10 wz
20bf0     18 00 90 5D |  if_ne	jmp	#LR__2830
20bf4     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20bf8     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
20bfc     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20c00     02 20 CE F7 | 	test	local02, #2 wz
20c04     0D 12 06 56 |  if_ne	mov	arg01, #13
20c08     6C FC BF 5D |  if_ne	call	#__system___txraw
20c0c                 | LR__2830
20c0c     0F 13 02 F6 | 	mov	arg01, local01
20c10     64 FC BF FD | 	call	#__system___txraw
20c14     A7 F0 03 F6 | 	mov	ptra, fp
20c18     B2 00 A0 FD | 	call	#popregs_
20c1c                 | __system___tx_ret
20c1c     2D 00 64 FD | 	ret
20c20                 | 
20c20                 | __system___rx
20c20     01 4A 05 F6 | 	mov	COUNT_, #1
20c24     A8 00 A0 FD | 	call	#pushregs_
20c28                 | LR__2840
20c28     00 12 06 F6 | 	mov	arg01, #0
20c2c     8C FC BF FD | 	call	#__system___rxraw
20c30     FD 1E 02 F6 | 	mov	local01, result1
20c34     FF FF 7F FF 
20c38     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
20c3c     E8 FF 9F AD |  if_e	jmp	#LR__2840
20c40     0D 1E 0E F2 | 	cmp	local01, #13 wz
20c44     14 00 90 5D |  if_ne	jmp	#LR__2841
20c48     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20c4c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
20c50     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20c54     02 FA CD F7 | 	test	result1, #2 wz
20c58     0A 1E 06 56 |  if_ne	mov	local01, #10
20c5c                 | LR__2841
20c5c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20c60     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
20c64     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20c68     01 12 CE F7 | 	test	arg01, #1 wz
20c6c     1C 00 90 AD |  if_e	jmp	#LR__2844
20c70     7F 1E 0E F2 | 	cmp	local01, #127 wz
20c74     0C 00 90 5D |  if_ne	jmp	#LR__2842
20c78     08 12 06 F6 | 	mov	arg01, #8
20c7c     60 FF BF FD | 	call	#__system___tx
20c80     08 00 90 FD | 	jmp	#LR__2843
20c84                 | LR__2842
20c84     0F 13 02 F6 | 	mov	arg01, local01
20c88     54 FF BF FD | 	call	#__system___tx
20c8c                 | LR__2843
20c8c                 | LR__2844
20c8c     0F FB 01 F6 | 	mov	result1, local01
20c90     A7 F0 03 F6 | 	mov	ptra, fp
20c94     B2 00 A0 FD | 	call	#popregs_
20c98                 | __system___rx_ret
20c98     2D 00 64 FD | 	ret
20c9c                 | 
20c9c                 | __system___pinwrite
20c9c     09 01 02 F6 | 	mov	_var01, arg01
20ca0     1F 00 06 F5 | 	and	_var01, #31
20ca4     20 12 CE F7 | 	test	arg01, #32 wz
20ca8     06 12 46 F0 | 	shr	arg01, #6
20cac     09 13 CA F9 | 	bmask	arg01, arg01
20cb0     00 13 62 F0 | 	shl	arg01, _var01
20cb4     00 15 62 F0 | 	shl	arg02, _var01
20cb8     1C 00 90 AD |  if_e	jmp	#LR__2850
20cbc     09 F7 43 F5 | 	or	dirb, arg01
20cc0     FD 01 02 F6 | 	mov	_var01, outb
20cc4     09 01 22 F5 | 	andn	_var01, arg01
20cc8     09 15 02 F5 | 	and	arg02, arg01
20ccc     0A 01 42 F5 | 	or	_var01, arg02
20cd0     00 FB 03 F6 | 	mov	outb, _var01
20cd4     18 00 90 FD | 	jmp	#LR__2851
20cd8                 | LR__2850
20cd8     09 F5 43 F5 | 	or	dira, arg01
20cdc     FC 01 02 F6 | 	mov	_var01, outa
20ce0     09 01 22 F5 | 	andn	_var01, arg01
20ce4     09 15 02 F5 | 	and	arg02, arg01
20ce8     0A 01 42 F5 | 	or	_var01, arg02
20cec     00 F9 03 F6 | 	mov	outa, _var01
20cf0                 | LR__2851
20cf0                 | __system___pinwrite_ret
20cf0     2D 00 64 FD | 	ret
20cf4                 | 
20cf4                 | __system___basic_read_line
20cf4     06 4A 05 F6 | 	mov	COUNT_, #6
20cf8     A8 00 A0 FD | 	call	#pushregs_
20cfc     09 1F 02 F6 | 	mov	local01, arg01
20d00     00 20 06 F6 | 	mov	local02, #0
20d04     18 22 06 F6 | 	mov	local03, #24
20d08     00 24 06 F6 | 	mov	local04, #0
20d0c     18 12 06 F6 | 	mov	arg01, #24
20d10     8C 3C B0 FD | 	call	#__system___gc_alloc_managed
20d14     FD 26 0A F6 | 	mov	local05, result1 wz
20d18     13 FB 01 A6 |  if_e	mov	result1, local05
20d1c     B0 00 90 AD |  if_e	jmp	#LR__2863
20d20                 | LR__2860
20d20     0F 13 02 F6 | 	mov	arg01, local01
20d24     78 0B B0 FD | 	call	#__system___basic_get_char
20d28     FD 28 02 F6 | 	mov	local06, result1
20d2c     01 28 56 F2 | 	cmps	local06, #1 wc
20d30     8C 00 90 CD |  if_b	jmp	#LR__2862
20d34     0A 28 0E F2 | 	cmp	local06, #10 wz
20d38     10 00 90 5D |  if_ne	jmp	#LR__2861
20d3c     00 24 0E F2 | 	cmp	local04, #0 wz
20d40     01 20 56 52 |  if_ne	cmps	local02, #1 wc
20d44     01 20 86 11 |  if_a	sub	local02, #1
20d48     74 00 90 FD | 	jmp	#LR__2862
20d4c                 | LR__2861
20d4c     0D 28 0E F2 | 	cmp	local06, #13 wz
20d50     01 24 06 A6 |  if_e	mov	local04, #1
20d54     00 24 06 56 |  if_ne	mov	local04, #0
20d58     08 28 0E F2 | 	cmp	local06, #8 wz
20d5c     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
20d60     01 20 56 A2 |  if_e	cmps	local02, #1 wc
20d64     01 20 86 21 |  if_nc_and_z	sub	local02, #1
20d68     B4 FF 9F AD |  if_e	jmp	#LR__2860
20d6c     13 17 02 F6 | 	mov	arg03, local05
20d70     10 17 02 F1 | 	add	arg03, local02
20d74     0B 29 42 FC | 	wrbyte	local06, arg03
20d78     01 20 06 F1 | 	add	local02, #1
20d7c     11 21 0A F2 | 	cmp	local02, local03 wz
20d80     9C FF 9F 5D |  if_ne	jmp	#LR__2860
20d84     11 13 02 F6 | 	mov	arg01, local03
20d88     20 12 06 F1 | 	add	arg01, #32
20d8c     10 3C B0 FD | 	call	#__system___gc_alloc_managed
20d90     FD 28 0A F6 | 	mov	local06, result1 wz
20d94     14 FB 01 A6 |  if_e	mov	result1, local06
20d98     34 00 90 AD |  if_e	jmp	#LR__2863
20d9c     14 13 02 F6 | 	mov	arg01, local06
20da0     13 15 02 F6 | 	mov	arg02, local05
20da4     11 17 02 F6 | 	mov	arg03, local03
20da8     5C FC BF FD | 	call	#__system____builtin_memmove
20dac     20 22 06 F1 | 	add	local03, #32
20db0     13 13 02 F6 | 	mov	arg01, local05
20db4     24 3D B0 FD | 	call	#__system___gc_free
20db8     14 27 02 F6 | 	mov	local05, local06
20dbc     60 FF 9F FD | 	jmp	#LR__2860
20dc0                 | LR__2862
20dc0     13 29 02 F6 | 	mov	local06, local05
20dc4     10 29 02 F1 | 	add	local06, local02
20dc8     14 01 48 FC | 	wrbyte	#0, local06
20dcc     13 FB 01 F6 | 	mov	result1, local05
20dd0                 | LR__2863
20dd0     A7 F0 03 F6 | 	mov	ptra, fp
20dd4     B2 00 A0 FD | 	call	#popregs_
20dd8                 | __system___basic_read_line_ret
20dd8     2D 00 64 FD | 	ret
20ddc                 | 
20ddc                 | __system___waitms
20ddc     09 01 02 F6 | 	mov	_var01, arg01
20de0     1A 02 62 FD | 	getct	_var02
20de4     14 04 06 FB | 	rdlong	_var03, #20
20de8     97 14 48 FB | 	callpa	#(@LR__2871-@LR__2870)>>2,fcache_load_ptr_
20dec                 | LR__2870
20dec     01 00 00 FF 
20df0     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
20df4     1C 00 90 CD |  if_b	jmp	#LR__2872
20df8     02 03 02 F1 | 	add	_var02, _var03
20dfc     01 13 02 F6 | 	mov	arg01, _var02
20e00     00 12 66 FA | 	addct1	arg01, #0
20e04     24 22 60 FD | 	waitct1
20e08     01 00 00 FF 
20e0c     E8 01 86 F1 | 	sub	_var01, ##1000
20e10     D8 FF 9F FD | 	jmp	#LR__2870
20e14                 | LR__2871
20e14                 | LR__2872
20e14     01 00 56 F2 | 	cmps	_var01, #1 wc
20e18     28 00 90 CD |  if_b	jmp	#LR__2873
20e1c     02 01 02 FD | 	qmul	_var01, _var03
20e20     01 00 00 FF 
20e24     E8 17 06 F6 | 	mov	arg03, ##1000
20e28     19 FA 61 FD | 	getqy	result1
20e2c     18 12 62 FD | 	getqx	arg01
20e30     28 FA 61 FD | 	setq	result1
20e34     0B 13 12 FD | 	qdiv	arg01, arg03
20e38     18 12 62 FD | 	getqx	arg01
20e3c     01 13 62 FA | 	addct1	arg01, _var02
20e40     24 22 60 FD | 	waitct1
20e44                 | LR__2873
20e44                 | __system___waitms_ret
20e44     2D 00 64 FD | 	ret
20e48                 | 
20e48                 | __system___waitus
20e48     09 01 02 F6 | 	mov	_var01, arg01
20e4c     1A 02 62 FD | 	getct	_var02
20e50     14 04 06 FB | 	rdlong	_var03, #20
20e54     97 14 48 FB | 	callpa	#(@LR__2881-@LR__2880)>>2,fcache_load_ptr_
20e58                 | LR__2880
20e58     A1 07 00 FF 
20e5c     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
20e60     1C 00 90 CD |  if_b	jmp	#LR__2882
20e64     02 03 02 F1 | 	add	_var02, _var03
20e68     01 13 02 F6 | 	mov	arg01, _var02
20e6c     00 12 66 FA | 	addct1	arg01, #0
20e70     24 22 60 FD | 	waitct1
20e74     A1 07 00 FF 
20e78     40 00 86 F1 | 	sub	_var01, ##1000000
20e7c     D8 FF 9F FD | 	jmp	#LR__2880
20e80                 | LR__2881
20e80                 | LR__2882
20e80     01 00 56 F2 | 	cmps	_var01, #1 wc
20e84     28 00 90 CD |  if_b	jmp	#LR__2883
20e88     02 01 02 FD | 	qmul	_var01, _var03
20e8c     A1 07 00 FF 
20e90     40 16 06 F6 | 	mov	arg03, ##1000000
20e94     19 FA 61 FD | 	getqy	result1
20e98     18 12 62 FD | 	getqx	arg01
20e9c     28 FA 61 FD | 	setq	result1
20ea0     0B 13 12 FD | 	qdiv	arg01, arg03
20ea4     18 FA 61 FD | 	getqx	result1
20ea8     FD 02 62 FA | 	addct1	_var02, result1
20eac     24 22 60 FD | 	waitct1
20eb0                 | LR__2883
20eb0                 | __system___waitus_ret
20eb0     2D 00 64 FD | 	ret
20eb4                 | 
20eb4                 | __system___mount
20eb4     0B 4A 05 F6 | 	mov	COUNT_, #11
20eb8     A8 00 A0 FD | 	call	#pushregs_
20ebc     09 1F 02 F6 | 	mov	local01, arg01
20ec0     0A 21 0A F6 | 	mov	local02, arg02 wz
20ec4     01 22 66 F6 | 	neg	local03, #1
20ec8     01 FA 65 A6 |  if_e	neg	result1, #1
20ecc     98 02 90 AD |  if_e	jmp	#LR__2905
20ed0     0F FB C1 FA | 	rdbyte	result1, local01
20ed4     2F FA 0D F2 | 	cmp	result1, #47 wz
20ed8     28 00 90 5D |  if_ne	jmp	#LR__2892
20edc     0F 13 02 F6 | 	mov	arg01, local01
20ee0     09 25 02 F6 | 	mov	local04, arg01
20ee4     97 06 48 FB | 	callpa	#(@LR__2891-@LR__2890)>>2,fcache_load_ptr_
20ee8                 | LR__2890
20ee8     12 FB C9 FA | 	rdbyte	result1, local04 wz
20eec     01 24 06 51 |  if_ne	add	local04, #1
20ef0     F4 FF 9F 5D |  if_ne	jmp	#LR__2890
20ef4                 | LR__2891
20ef4     09 25 82 F1 | 	sub	local04, arg01
20ef8     12 FB 01 F6 | 	mov	result1, local04
20efc     10 FA 55 F2 | 	cmps	result1, #16 wc
20f00     14 00 90 CD |  if_b	jmp	#LR__2893
20f04                 | LR__2892
20f04     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20f08     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
20f0c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20f10     01 FA 65 F6 | 	neg	result1, #1
20f14     50 02 90 FD | 	jmp	#LR__2905
20f18                 | LR__2893
20f18     00 26 06 F6 | 	mov	local05, #0
20f1c                 | LR__2894
20f1c     04 26 56 F2 | 	cmps	local05, #4 wc
20f20     B0 00 90 3D |  if_ae	jmp	#LR__2899
20f24     13 13 02 F6 | 	mov	arg01, local05
20f28     02 12 66 F0 | 	shl	arg01, #2
20f2c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20f30     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
20f34     09 FB 09 FB | 	rdlong	result1, arg01 wz
20f38     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20f3c     00 22 56 A2 |  if_e	cmps	local03, #0 wc
20f40     13 23 02 86 |  if_c_and_z	mov	local03, local05
20f44     84 00 90 8D |  if_c_and_z	jmp	#LR__2898
20f48     13 13 02 F6 | 	mov	arg01, local05
20f4c     02 12 66 F0 | 	shl	arg01, #2
20f50     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20f54     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
20f58     09 13 02 FB | 	rdlong	arg01, arg01
20f5c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20f60     09 25 02 F6 | 	mov	local04, arg01
20f64     97 06 48 FB | 	callpa	#(@LR__2896-@LR__2895)>>2,fcache_load_ptr_
20f68                 | LR__2895
20f68     12 FB C9 FA | 	rdbyte	result1, local04 wz
20f6c     01 24 06 51 |  if_ne	add	local04, #1
20f70     F4 FF 9F 5D |  if_ne	jmp	#LR__2895
20f74                 | LR__2896
20f74     09 25 82 F1 | 	sub	local04, arg01
20f78     12 29 02 F6 | 	mov	local06, local04
20f7c     14 13 02 F6 | 	mov	arg01, local06
20f80     0F 13 02 F1 | 	add	arg01, local01
20f84     09 FB C1 FA | 	rdbyte	result1, arg01
20f88     2F FA 0D F2 | 	cmp	result1, #47 wz
20f8c     14 2B 02 56 |  if_ne	mov	local07, local06
20f90     0F 2B 02 51 |  if_ne	add	local07, local01
20f94     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
20f98     30 00 90 5D |  if_ne	jmp	#LR__2897
20f9c     13 17 02 F6 | 	mov	arg03, local05
20fa0     02 16 66 F0 | 	shl	arg03, #2
20fa4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20fa8     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
20fac     0B 15 02 FB | 	rdlong	arg02, arg03
20fb0     0F 13 02 F6 | 	mov	arg01, local01
20fb4     14 17 02 F6 | 	mov	arg03, local06
20fb8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20fbc     60 4E B0 FD | 	call	#__system__strncmp
20fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
20fc4     13 23 02 A6 |  if_e	mov	local03, local05
20fc8     08 00 90 AD |  if_e	jmp	#LR__2899
20fcc                 | LR__2897
20fcc                 | LR__2898
20fcc     01 26 06 F1 | 	add	local05, #1
20fd0     48 FF 9F FD | 	jmp	#LR__2894
20fd4                 | LR__2899
20fd4     FF FF 7F FF 
20fd8     FF 23 0E F2 | 	cmp	local03, ##-1 wz
20fdc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
20fe0     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
20fe4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
20fe8     01 FA 65 A6 |  if_e	neg	result1, #1
20fec     78 01 90 AD |  if_e	jmp	#LR__2905
20ff0     11 27 02 F6 | 	mov	local05, local03
20ff4     13 2B 02 F6 | 	mov	local07, local05
20ff8     02 2A 66 F0 | 	shl	local07, #2
20ffc     74 E6 05 F1 | 	add	ptr___system__dat__, #116
21000     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
21004     15 29 0A FB | 	rdlong	local06, local07 wz
21008     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2100c     58 00 90 AD |  if_e	jmp	#LR__2900
21010     4C 28 06 F1 | 	add	local06, #76
21014     14 2B 0A FB | 	rdlong	local07, local06 wz
21018     4C 28 86 F1 | 	sub	local06, #76
2101c     48 00 90 AD |  if_e	jmp	#LR__2900
21020     4C 28 06 F1 | 	add	local06, #76
21024     14 2B 02 FB | 	rdlong	local07, local06
21028     15 23 02 F6 | 	mov	local03, local07
2102c     13 2A 46 F7 | 	zerox	local07, #19
21030     14 22 46 F0 | 	shr	local03, #20
21034     02 22 66 F0 | 	shl	local03, #2
21038     ED 22 02 F1 | 	add	local03, __methods__
2103c     11 23 02 FB | 	rdlong	local03, local03
21040     13 29 02 F6 | 	mov	local06, local05
21044     02 28 66 F0 | 	shl	local06, #2
21048     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2104c     F3 28 02 F1 | 	add	local06, ptr___system__dat__
21050     14 13 02 FB | 	rdlong	arg01, local06
21054     F2 28 02 F6 | 	mov	local06, objptr
21058     15 E5 01 F6 | 	mov	objptr, local07
2105c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21060     2D 22 62 FD | 	call	local03
21064     14 E5 01 F6 | 	mov	objptr, local06
21068                 | LR__2900
21068     13 2D 02 F6 | 	mov	local08, local05
2106c     02 2C 66 F0 | 	shl	local08, #2
21070     74 E6 05 F1 | 	add	ptr___system__dat__, #116
21074     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
21078     16 21 62 FC | 	wrlong	local02, local08
2107c     00 20 0E F2 | 	cmp	local02, #0 wz
21080     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
21084     18 00 90 5D |  if_ne	jmp	#LR__2901
21088     02 26 66 F0 | 	shl	local05, #2
2108c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21090     F3 26 02 F1 | 	add	local05, ptr___system__dat__
21094     13 01 68 FC | 	wrlong	#0, local05
21098     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2109c     C4 00 90 FD | 	jmp	#LR__2904
210a0                 | LR__2901
210a0     13 2F 02 F6 | 	mov	local09, local05
210a4     04 2E 66 F0 | 	shl	local09, #4
210a8     24 E6 05 F1 | 	add	ptr___system__dat__, #36
210ac     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
210b0     17 13 02 F6 | 	mov	arg01, local09
210b4     0F 15 02 F6 | 	mov	arg02, local01
210b8     10 16 06 F6 | 	mov	arg03, #16
210bc     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
210c0     B0 4C B0 FD | 	call	#__system__strncpy
210c4     48 20 06 F1 | 	add	local02, #72
210c8     10 2D 0A FB | 	rdlong	local08, local02 wz
210cc     48 20 86 F1 | 	sub	local02, #72
210d0     7C 00 90 AD |  if_e	jmp	#LR__2903
210d4     48 20 06 F1 | 	add	local02, #72
210d8     10 2D 02 FB | 	rdlong	local08, local02
210dc     16 31 02 F6 | 	mov	local10, local08
210e0     13 2C 46 F7 | 	zerox	local08, #19
210e4     14 30 46 F0 | 	shr	local10, #20
210e8     02 30 66 F0 | 	shl	local10, #2
210ec     ED 30 02 F1 | 	add	local10, __methods__
210f0     18 31 02 FB | 	rdlong	local10, local10
210f4     17 13 02 F6 | 	mov	arg01, local09
210f8     F2 32 02 F6 | 	mov	local11, objptr
210fc     16 E5 01 F6 | 	mov	objptr, local08
21100     2D 30 62 FD | 	call	local10
21104     19 E5 01 F6 | 	mov	objptr, local11
21108     FD 12 0A F6 | 	mov	arg01, result1 wz
2110c     40 00 90 AD |  if_e	jmp	#LR__2902
21110     13 2D 02 F6 | 	mov	local08, local05
21114     02 2C 66 F0 | 	shl	local08, #2
21118     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2111c     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
21120     16 01 68 FC | 	wrlong	#0, local08
21124     02 26 66 F0 | 	shl	local05, #2
21128     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
2112c     F3 26 02 F1 | 	add	local05, ptr___system__dat__
21130     13 01 68 FC | 	wrlong	#0, local05
21134     09 13 6A F6 | 	neg	arg01, arg01 wz
21138     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
2113c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
21140     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
21144     01 FA 65 56 |  if_ne	neg	result1, #1
21148     00 FA 05 A6 |  if_e	mov	result1, #0
2114c     18 00 90 FD | 	jmp	#LR__2905
21150                 | LR__2902
21150                 | LR__2903
21150     02 26 66 F0 | 	shl	local05, #2
21154     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21158     F3 26 02 F1 | 	add	local05, ptr___system__dat__
2115c     13 2F 62 FC | 	wrlong	local09, local05
21160     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21164                 | LR__2904
21164     00 FA 05 F6 | 	mov	result1, #0
21168                 | LR__2905
21168     A7 F0 03 F6 | 	mov	ptra, fp
2116c     B2 00 A0 FD | 	call	#popregs_
21170                 | __system___mount_ret
21170     2D 00 64 FD | 	ret
21174                 | 
21174                 | __system___chdir
21174     00 4A 05 F6 | 	mov	COUNT_, #0
21178     A8 00 A0 FD | 	call	#pushregs_
2117c     40 F0 07 F1 | 	add	ptra, #64
21180     04 4E 05 F1 | 	add	fp, #4
21184     A7 12 62 FC | 	wrlong	arg01, fp
21188     04 4E 05 F1 | 	add	fp, #4
2118c     A7 14 02 F6 | 	mov	arg02, fp
21190     08 4E 85 F1 | 	sub	fp, #8
21194     80 48 B0 FD | 	call	#__system__stat
21198     3C 4E 05 F1 | 	add	fp, #60
2119c     A7 FA 61 FC | 	wrlong	result1, fp
211a0     3C 4E 85 F1 | 	sub	fp, #60
211a4     00 FA 0D F2 | 	cmp	result1, #0 wz
211a8     3C 4E 05 51 |  if_ne	add	fp, #60
211ac     A7 FA 01 5B |  if_ne	rdlong	result1, fp
211b0     3C 4E 85 51 |  if_ne	sub	fp, #60
211b4     BC 00 90 5D |  if_ne	jmp	#LR__2912
211b8     10 4E 05 F1 | 	add	fp, #16
211bc     A7 12 02 FB | 	rdlong	arg01, fp
211c0     10 4E 85 F1 | 	sub	fp, #16
211c4     78 00 00 FF 
211c8     00 12 06 F5 | 	and	arg01, ##61440
211cc     08 00 00 FF 
211d0     00 12 0E F2 | 	cmp	arg01, ##4096 wz
211d4     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
211d8     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
211dc     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
211e0     01 FA 65 56 |  if_ne	neg	result1, #1
211e4     8C 00 90 5D |  if_ne	jmp	#LR__2912
211e8     04 4E 05 F1 | 	add	fp, #4
211ec     A7 16 02 FB | 	rdlong	arg03, fp
211f0     04 4E 85 F1 | 	sub	fp, #4
211f4     0B 17 C2 FA | 	rdbyte	arg03, arg03
211f8     2F 16 0E F2 | 	cmp	arg03, #47 wz
211fc     24 00 90 5D |  if_ne	jmp	#LR__2910
21200     84 E6 05 F1 | 	add	ptr___system__dat__, #132
21204     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
21208     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
2120c     04 4E 05 F1 | 	add	fp, #4
21210     A7 14 02 FB | 	rdlong	arg02, fp
21214     04 4E 85 F1 | 	sub	fp, #4
21218     00 17 06 F6 | 	mov	arg03, #256
2121c     54 4B B0 FD | 	call	#__system__strncpy
21220     4C 00 90 FD | 	jmp	#LR__2911
21224                 | LR__2910
21224     84 E7 05 F1 | 	add	ptr___system__dat__, #388
21228     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2122c     38 4E 05 F1 | 	add	fp, #56
21230     A7 12 62 FC | 	wrlong	arg01, fp
21234     38 4E 85 F1 | 	sub	fp, #56
21238     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
2123c     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
21240     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21244     00 17 06 F6 | 	mov	arg03, #256
21248     28 4B B0 FD | 	call	#__system__strncpy
2124c     38 4E 05 F1 | 	add	fp, #56
21250     A7 12 02 FB | 	rdlong	arg01, fp
21254     34 4E 85 F1 | 	sub	fp, #52
21258     A7 14 02 FB | 	rdlong	arg02, fp
2125c     04 4E 85 F1 | 	sub	fp, #4
21260     84 E6 05 F1 | 	add	ptr___system__dat__, #132
21264     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
21268     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
2126c     10 00 B0 FD | 	call	#__system____getvfsforfile
21270                 | LR__2911
21270     00 FA 05 F6 | 	mov	result1, #0
21274                 | LR__2912
21274     A7 F0 03 F6 | 	mov	ptra, fp
21278     B2 00 A0 FD | 	call	#popregs_
2127c                 | __system___chdir_ret
2127c     2D 00 64 FD | 	ret
21280                 | 
21280                 | __system____getvfsforfile
21280     0E 4A 05 F6 | 	mov	COUNT_, #14
21284     A8 00 A0 FD | 	call	#pushregs_
21288     09 1F 02 F6 | 	mov	local01, arg01
2128c     0A 21 02 F6 | 	mov	local02, arg02
21290     0B 23 02 F6 | 	mov	local03, arg03
21294     97 10 48 FB | 	callpa	#(@LR__2921-@LR__2920)>>2,fcache_load_ptr_
21298                 | LR__2920
21298     10 FB C1 FA | 	rdbyte	result1, local02
2129c     2F FA 0D F2 | 	cmp	result1, #47 wz
212a0     01 20 06 A1 |  if_e	add	local02, #1
212a4     10 25 C2 AA |  if_e	rdbyte	local04, local02
212a8     01 20 86 A1 |  if_e	sub	local02, #1
212ac     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
212b0     01 20 06 A1 |  if_e	add	local02, #1
212b4     E0 FF 9F AD |  if_e	jmp	#LR__2920
212b8                 | LR__2921
212b8     10 25 C2 FA | 	rdbyte	local04, local02
212bc     2F 24 0E F2 | 	cmp	local04, #47 wz
212c0     14 00 90 5D |  if_ne	jmp	#LR__2922
212c4     0F 13 02 F6 | 	mov	arg01, local01
212c8     10 15 02 F6 | 	mov	arg02, local02
212cc     00 17 06 F6 | 	mov	arg03, #256
212d0     A0 4A B0 FD | 	call	#__system__strncpy
212d4     7C 00 90 FD | 	jmp	#LR__2924
212d8                 | LR__2922
212d8     84 E6 05 F1 | 	add	ptr___system__dat__, #132
212dc     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
212e0     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
212e4     0F 13 02 F6 | 	mov	arg01, local01
212e8     00 17 06 F6 | 	mov	arg03, #256
212ec     84 4A B0 FD | 	call	#__system__strncpy
212f0     10 25 CA FA | 	rdbyte	local04, local02 wz
212f4     5C 00 90 AD |  if_e	jmp	#LR__2923
212f8     10 25 C2 FA | 	rdbyte	local04, local02
212fc     2E 24 0E F2 | 	cmp	local04, #46 wz
21300     01 20 06 A1 |  if_e	add	local02, #1
21304     10 27 C2 AA |  if_e	rdbyte	local05, local02
21308     01 20 86 A1 |  if_e	sub	local02, #1
2130c     13 29 02 A6 |  if_e	mov	local06, local05
21310     07 28 4E A7 |  if_e	zerox	local06, #7 wz
21314     3C 00 90 AD |  if_e	jmp	#LR__2923
21318     0F 27 C2 FA | 	rdbyte	local05, local01
2131c     2F 26 0E F2 | 	cmp	local05, #47 wz
21320     01 1E 06 A1 |  if_e	add	local01, #1
21324     0F 25 C2 AA |  if_e	rdbyte	local04, local01
21328     01 1E 86 A1 |  if_e	sub	local01, #1
2132c     00 24 4E A2 |  if_e	cmps	local04, #0 wz
21330     81 01 00 5F 
21334     0C 15 06 56 |  if_ne	mov	arg02, ##@LR__5010
21338     0F 13 02 56 |  if_ne	mov	arg01, local01
2133c     00 17 06 56 |  if_ne	mov	arg03, #256
21340     7C 4A B0 5D |  if_ne	call	#__system__strncat
21344     0F 13 02 F6 | 	mov	arg01, local01
21348     10 15 02 F6 | 	mov	arg02, local02
2134c     00 17 06 F6 | 	mov	arg03, #256
21350     6C 4A B0 FD | 	call	#__system__strncat
21354                 | LR__2923
21354                 | LR__2924
21354     0F 13 02 F6 | 	mov	arg01, local01
21358     24 4C B0 FD | 	call	#__system___normalizeName
2135c     0F 25 CA FA | 	rdbyte	local04, local01 wz
21360     1C 00 90 AD |  if_e	jmp	#LR__2925
21364     0F 25 C2 FA | 	rdbyte	local04, local01
21368     2F 24 0E F2 | 	cmp	local04, #47 wz
2136c     01 1E 06 A1 |  if_e	add	local01, #1
21370     0F 29 C2 AA |  if_e	rdbyte	local06, local01
21374     01 1E 86 A1 |  if_e	sub	local01, #1
21378     00 28 4E A2 |  if_e	cmps	local06, #0 wz
2137c     18 00 90 5D |  if_ne	jmp	#LR__2926
21380                 | LR__2925
21380     01 00 00 FF 
21384     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
21388     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2138c     01 00 00 FF 
21390     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
21394     EC 01 90 FD | 	jmp	#LR__2940
21398                 | LR__2926
21398     00 2A 06 F6 | 	mov	local07, #0
2139c                 | LR__2927
2139c     04 2A 56 F2 | 	cmps	local07, #4 wc
213a0     CC 01 90 3D |  if_ae	jmp	#LR__2939
213a4     15 29 02 F6 | 	mov	local06, local07
213a8     02 28 66 F0 | 	shl	local06, #2
213ac     64 E6 05 F1 | 	add	ptr___system__dat__, #100
213b0     F3 28 02 F1 | 	add	local06, ptr___system__dat__
213b4     14 29 0A FB | 	rdlong	local06, local06 wz
213b8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
213bc     A8 01 90 AD |  if_e	jmp	#LR__2938
213c0     15 25 02 F6 | 	mov	local04, local07
213c4     02 24 66 F0 | 	shl	local04, #2
213c8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
213cc     F3 24 02 F1 | 	add	local04, ptr___system__dat__
213d0     12 13 02 FB | 	rdlong	arg01, local04
213d4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
213d8     09 2D 02 F6 | 	mov	local08, arg01
213dc     97 06 48 FB | 	callpa	#(@LR__2929-@LR__2928)>>2,fcache_load_ptr_
213e0                 | LR__2928
213e0     16 FB C9 FA | 	rdbyte	result1, local08 wz
213e4     01 2C 06 51 |  if_ne	add	local08, #1
213e8     F4 FF 9F 5D |  if_ne	jmp	#LR__2928
213ec                 | LR__2929
213ec     09 2D 82 F1 | 	sub	local08, arg01
213f0     16 2F 02 F6 | 	mov	local09, local08
213f4     17 25 02 F6 | 	mov	local04, local09
213f8     0F 25 02 F1 | 	add	local04, local01
213fc     12 29 C2 FA | 	rdbyte	local06, local04
21400     2F 28 0E F2 | 	cmp	local06, #47 wz
21404     17 31 02 56 |  if_ne	mov	local10, local09
21408     0F 31 02 51 |  if_ne	add	local10, local01
2140c     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
21410     54 01 90 5D |  if_ne	jmp	#LR__2937
21414     15 17 02 F6 | 	mov	arg03, local07
21418     02 16 66 F0 | 	shl	arg03, #2
2141c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21420     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
21424     0B 15 02 FB | 	rdlong	arg02, arg03
21428     17 17 02 F6 | 	mov	arg03, local09
2142c     0F 13 02 F6 | 	mov	arg01, local01
21430     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21434     E8 49 B0 FD | 	call	#__system__strncmp
21438     00 FA 4D F2 | 	cmps	result1, #0 wz
2143c     28 01 90 5D |  if_ne	jmp	#LR__2937
21440     15 33 02 F6 | 	mov	local11, local07
21444     02 32 66 F0 | 	shl	local11, #2
21448     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2144c     F3 32 02 F1 | 	add	local11, ptr___system__dat__
21450     19 35 02 FB | 	rdlong	local12, local11
21454     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
21458     97 22 48 FB | 	callpa	#(@LR__2931-@LR__2930)>>2,fcache_load_ptr_
2145c                 | LR__2930
2145c     17 29 02 F6 | 	mov	local06, local09
21460     01 28 06 F1 | 	add	local06, #1
21464     0F 29 02 F1 | 	add	local06, local01
21468     14 33 C2 FA | 	rdbyte	local11, local06
2146c     2E 32 0E F2 | 	cmp	local11, #46 wz
21470     2C 00 90 5D |  if_ne	jmp	#LR__2932
21474     17 33 02 F6 | 	mov	local11, local09
21478     02 32 06 F1 | 	add	local11, #2
2147c     0F 33 02 F1 | 	add	local11, local01
21480     19 31 C2 FA | 	rdbyte	local10, local11
21484     2F 30 0E F2 | 	cmp	local10, #47 wz
21488     17 37 02 56 |  if_ne	mov	local13, local09
2148c     02 36 06 51 |  if_ne	add	local13, #2
21490     0F 37 02 51 |  if_ne	add	local13, local01
21494     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
21498     01 2E 06 A1 |  if_e	add	local09, #1
2149c     BC FF 9F AD |  if_e	jmp	#LR__2930
214a0                 | LR__2931
214a0                 | LR__2932
214a0     00 22 0E F2 | 	cmp	local03, #0 wz
214a4     11 13 02 56 |  if_ne	mov	arg01, local03
214a8     0F 15 02 56 |  if_ne	mov	arg02, local01
214ac     00 17 06 56 |  if_ne	mov	arg03, #256
214b0     C0 48 B0 5D |  if_ne	call	#__system__strncpy
214b4     0F 15 02 F6 | 	mov	arg02, local01
214b8     17 15 02 F1 | 	add	arg02, local09
214bc     01 14 06 F1 | 	add	arg02, #1
214c0     0F 13 02 F6 | 	mov	arg01, local01
214c4     D4 F5 BF FD | 	call	#__system____builtin_strcpy
214c8     0F 13 02 F6 | 	mov	arg01, local01
214cc     09 2D 02 F6 | 	mov	local08, arg01
214d0     97 06 48 FB | 	callpa	#(@LR__2934-@LR__2933)>>2,fcache_load_ptr_
214d4                 | LR__2933
214d4     16 FB C9 FA | 	rdbyte	result1, local08 wz
214d8     01 2C 06 51 |  if_ne	add	local08, #1
214dc     F4 FF 9F 5D |  if_ne	jmp	#LR__2933
214e0                 | LR__2934
214e0     09 2D 82 F1 | 	sub	local08, arg01
214e4     16 2F 02 F6 | 	mov	local09, local08
214e8                 | LR__2935
214e8     01 2E 56 F2 | 	cmps	local09, #1 wc
214ec     70 00 90 CD |  if_b	jmp	#LR__2936
214f0     17 25 02 F6 | 	mov	local04, local09
214f4     0F 25 02 F1 | 	add	local04, local01
214f8     12 33 C2 FA | 	rdbyte	local11, local04
214fc     2F 32 0E F2 | 	cmp	local11, #47 wz
21500     17 33 02 A6 |  if_e	mov	local11, local09
21504     0F 33 02 A1 |  if_e	add	local11, local01
21508     19 01 48 AC |  if_e	wrbyte	#0, local11
2150c     01 2E 86 A1 |  if_e	sub	local09, #1
21510     D4 FF 9F AD |  if_e	jmp	#LR__2935
21514     17 25 02 F6 | 	mov	local04, local09
21518     0F 25 02 F1 | 	add	local04, local01
2151c     12 33 C2 FA | 	rdbyte	local11, local04
21520     2E 32 0E F2 | 	cmp	local11, #46 wz
21524     38 00 90 5D |  if_ne	jmp	#LR__2936
21528     02 2E 56 F2 | 	cmps	local09, #2 wc
2152c     30 00 90 CD |  if_b	jmp	#LR__2936
21530     17 39 02 F6 | 	mov	local14, local09
21534     01 38 86 F1 | 	sub	local14, #1
21538     0F 39 02 F1 | 	add	local14, local01
2153c     1C 27 C2 FA | 	rdbyte	local05, local14
21540     2F 26 0E F2 | 	cmp	local05, #47 wz
21544     18 00 90 5D |  if_ne	jmp	#LR__2936
21548     17 25 02 F6 | 	mov	local04, local09
2154c     01 24 86 F1 | 	sub	local04, #1
21550     0F 25 02 F1 | 	add	local04, local01
21554     12 01 48 FC | 	wrbyte	#0, local04
21558     02 2E 86 F1 | 	sub	local09, #2
2155c     88 FF 9F FD | 	jmp	#LR__2935
21560                 | LR__2936
21560     1A FB 01 F6 | 	mov	result1, local12
21564     1C 00 90 FD | 	jmp	#LR__2940
21568                 | LR__2937
21568                 | LR__2938
21568     01 2A 06 F1 | 	add	local07, #1
2156c     2C FE 9F FD | 	jmp	#LR__2927
21570                 | LR__2939
21570     03 00 00 FF 
21574     38 E7 05 F1 | 	add	ptr___system__dat__, ##1848
21578     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2157c     03 00 00 FF 
21580     38 E7 85 F1 | 	sub	ptr___system__dat__, ##1848
21584                 | LR__2940
21584     A7 F0 03 F6 | 	mov	ptra, fp
21588     B2 00 A0 FD | 	call	#popregs_
2158c                 | __system____getvfsforfile_ret
2158c     2D 00 64 FD | 	ret
21590                 | 
21590                 | __system___basic_open
21590     05 4A 05 F6 | 	mov	COUNT_, #5
21594     A8 00 A0 FD | 	call	#pushregs_
21598     0A 1F 02 F6 | 	mov	local01, arg02
2159c     0B 21 02 F6 | 	mov	local02, arg03
215a0     0C 23 02 F6 | 	mov	local03, arg04
215a4     00 24 06 F6 | 	mov	local04, #0
215a8     A0 47 B0 FD | 	call	#__system____getftab
215ac     FD 26 0A F6 | 	mov	local05, result1 wz
215b0     18 00 90 5D |  if_ne	jmp	#LR__2950
215b4     EE 12 02 F6 | 	mov	arg01, abortchain
215b8     0C 14 06 F6 | 	mov	arg02, #12
215bc     01 16 06 F6 | 	mov	arg03, #1
215c0     DA 00 A0 FD | 	call	#__longjmp
215c4     01 FA 65 F6 | 	neg	result1, #1
215c8     14 01 90 FD | 	jmp	#LR__2959
215cc                 | LR__2950
215cc     08 26 06 F1 | 	add	local05, #8
215d0     13 FB 09 FB | 	rdlong	result1, local05 wz
215d4     08 26 86 F1 | 	sub	local05, #8
215d8     13 13 02 56 |  if_ne	mov	arg01, local05
215dc     C0 3E B0 5D |  if_ne	call	#__system___closeraw
215e0     00 1E 0E F2 | 	cmp	local01, #0 wz
215e4     00 20 0E A2 |  if_e	cmp	local02, #0 wz
215e8     00 22 0E A2 |  if_e	cmp	local03, #0 wz
215ec     3C 00 90 AD |  if_e	jmp	#LR__2952
215f0     0C 12 06 F6 | 	mov	arg01, #12
215f4     A8 33 B0 FD | 	call	#__system___gc_alloc_managed
215f8     FD 24 0A F6 | 	mov	local04, result1 wz
215fc     18 00 90 5D |  if_ne	jmp	#LR__2951
21600     EE 12 02 F6 | 	mov	arg01, abortchain
21604     07 14 06 F6 | 	mov	arg02, #7
21608     01 16 06 F6 | 	mov	arg03, #1
2160c     DA 00 A0 FD | 	call	#__longjmp
21610     01 FA 65 F6 | 	neg	result1, #1
21614     C8 00 90 FD | 	jmp	#LR__2959
21618                 | LR__2951
21618     12 01 68 FC | 	wrlong	#0, local04
2161c     04 24 06 F1 | 	add	local04, #4
21620     12 01 68 FC | 	wrlong	#0, local04
21624     04 24 86 F1 | 	sub	local04, #4
21628     13 25 62 FC | 	wrlong	local04, local05
2162c                 | LR__2952
2162c     00 1E 0E F2 | 	cmp	local01, #0 wz
21630     20 00 90 AD |  if_e	jmp	#LR__2953
21634     12 1F 62 FC | 	wrlong	local01, local04
21638     12 FB 01 F6 | 	mov	result1, local04
2163c     00 80 04 FF 
21640     00 FA 45 F5 | 	or	result1, ##150994944
21644     1C 26 06 F1 | 	add	local05, #28
21648     13 FB 61 FC | 	wrlong	result1, local05
2164c     1C 26 86 F1 | 	sub	local05, #28
21650     0C 00 90 FD | 	jmp	#LR__2954
21654                 | LR__2953
21654     1C 26 06 F1 | 	add	local05, #28
21658     13 01 68 FC | 	wrlong	#0, local05
2165c     1C 26 86 F1 | 	sub	local05, #28
21660                 | LR__2954
21660     00 20 0E F2 | 	cmp	local02, #0 wz
21664     28 00 90 AD |  if_e	jmp	#LR__2955
21668     04 24 06 F1 | 	add	local04, #4
2166c     12 21 62 FC | 	wrlong	local02, local04
21670     04 24 86 F1 | 	sub	local04, #4
21674     12 FB 01 F6 | 	mov	result1, local04
21678     00 88 04 FF 
2167c     00 FA 45 F5 | 	or	result1, ##152043520
21680     20 26 06 F1 | 	add	local05, #32
21684     13 FB 61 FC | 	wrlong	result1, local05
21688     20 26 86 F1 | 	sub	local05, #32
2168c     0C 00 90 FD | 	jmp	#LR__2956
21690                 | LR__2955
21690     20 26 06 F1 | 	add	local05, #32
21694     13 01 68 FC | 	wrlong	#0, local05
21698     20 26 86 F1 | 	sub	local05, #32
2169c                 | LR__2956
2169c     00 22 0E F2 | 	cmp	local03, #0 wz
216a0     24 00 90 AD |  if_e	jmp	#LR__2957
216a4     08 24 06 F1 | 	add	local04, #8
216a8     12 23 62 FC | 	wrlong	local03, local04
216ac     08 24 86 F1 | 	sub	local04, #8
216b0     00 90 04 FF 
216b4     00 24 46 F5 | 	or	local04, ##153092096
216b8     24 26 06 F1 | 	add	local05, #36
216bc     13 25 62 FC | 	wrlong	local04, local05
216c0     24 26 86 F1 | 	sub	local05, #36
216c4     0C 00 90 FD | 	jmp	#LR__2958
216c8                 | LR__2957
216c8     24 26 06 F1 | 	add	local05, #36
216cc     13 01 68 FC | 	wrlong	#0, local05
216d0     24 26 86 F1 | 	sub	local05, #36
216d4                 | LR__2958
216d4     08 26 06 F1 | 	add	local05, #8
216d8     13 0F 68 FC | 	wrlong	#7, local05
216dc     00 FA 05 F6 | 	mov	result1, #0
216e0                 | LR__2959
216e0     A7 F0 03 F6 | 	mov	ptra, fp
216e4     B2 00 A0 FD | 	call	#popregs_
216e8                 | __system___basic_open_ret
216e8     2D 00 64 FD | 	ret
216ec                 | 
216ec                 | __system___basic_open_string
216ec     04 4A 05 F6 | 	mov	COUNT_, #4
216f0     A8 00 A0 FD | 	call	#pushregs_
216f4     0A 1F 02 F6 | 	mov	local01, arg02
216f8     0B 21 02 F6 | 	mov	local02, arg03
216fc     4C 46 B0 FD | 	call	#__system____getftab
21700     FD 22 0A F6 | 	mov	local03, result1 wz
21704     18 00 90 5D |  if_ne	jmp	#LR__2960
21708     EE 12 02 F6 | 	mov	arg01, abortchain
2170c     0C 14 06 F6 | 	mov	arg02, #12
21710     01 16 06 F6 | 	mov	arg03, #1
21714     DA 00 A0 FD | 	call	#__longjmp
21718     01 FA 65 F6 | 	neg	result1, #1
2171c     58 00 90 FD | 	jmp	#LR__2962
21720                 | LR__2960
21720     08 22 06 F1 | 	add	local03, #8
21724     11 19 0A FB | 	rdlong	arg04, local03 wz
21728     08 22 86 F1 | 	sub	local03, #8
2172c     11 13 02 56 |  if_ne	mov	arg01, local03
21730     6C 3D B0 5D |  if_ne	call	#__system___closeraw
21734     0F 15 02 F6 | 	mov	arg02, local01
21738     10 17 02 F6 | 	mov	arg03, local02
2173c     11 13 02 F6 | 	mov	arg01, local03
21740     B6 19 06 F6 | 	mov	arg04, #438
21744     54 3A B0 FD | 	call	#__system___openraw
21748     FD 24 02 F6 | 	mov	local04, result1
2174c     00 24 56 F2 | 	cmps	local04, #0 wc
21750     20 00 90 3D |  if_ae	jmp	#LR__2961
21754     20 E6 05 F1 | 	add	ptr___system__dat__, #32
21758     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
2175c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
21760     EE 12 02 F6 | 	mov	arg01, abortchain
21764     01 16 06 F6 | 	mov	arg03, #1
21768     DA 00 A0 FD | 	call	#__longjmp
2176c     01 FA 65 F6 | 	neg	result1, #1
21770     04 00 90 FD | 	jmp	#LR__2962
21774                 | LR__2961
21774     12 FB 01 F6 | 	mov	result1, local04
21778                 | LR__2962
21778     A7 F0 03 F6 | 	mov	ptra, fp
2177c     B2 00 A0 FD | 	call	#popregs_
21780                 | __system___basic_open_string_ret
21780     2D 00 64 FD | 	ret
21784                 | 
21784                 | __system___basic_print_char
21784     03 4A 05 F6 | 	mov	COUNT_, #3
21788     A8 00 A0 FD | 	call	#pushregs_
2178c     0A 1F 02 F6 | 	mov	local01, arg02
21790     0C 4D B0 FD | 	call	#__system___gettxfunc
21794     FD 20 0A F6 | 	mov	local02, result1 wz
21798     00 FA 05 A6 |  if_e	mov	result1, #0
2179c     30 00 90 AD |  if_e	jmp	#LR__2970
217a0     10 23 02 F6 | 	mov	local03, local02
217a4     13 20 46 F7 | 	zerox	local02, #19
217a8     14 22 46 F0 | 	shr	local03, #20
217ac     02 22 66 F0 | 	shl	local03, #2
217b0     ED 22 02 F1 | 	add	local03, __methods__
217b4     11 23 02 FB | 	rdlong	local03, local03
217b8     0F 13 02 F6 | 	mov	arg01, local01
217bc     F2 1E 02 F6 | 	mov	local01, objptr
217c0     10 E5 01 F6 | 	mov	objptr, local02
217c4     2D 22 62 FD | 	call	local03
217c8     0F E5 01 F6 | 	mov	objptr, local01
217cc     01 FA 05 F6 | 	mov	result1, #1
217d0                 | LR__2970
217d0     A7 F0 03 F6 | 	mov	ptra, fp
217d4     B2 00 A0 FD | 	call	#popregs_
217d8                 | __system___basic_print_char_ret
217d8     2D 00 64 FD | 	ret
217dc                 | 
217dc                 | __system___basic_print_string
217dc     03 4A 05 F6 | 	mov	COUNT_, #3
217e0     A8 00 A0 FD | 	call	#pushregs_
217e4     0A 1F 02 F6 | 	mov	local01, arg02
217e8     0B 21 02 F6 | 	mov	local02, arg03
217ec     B0 4C B0 FD | 	call	#__system___gettxfunc
217f0     FD 22 0A F6 | 	mov	local03, result1 wz
217f4     00 FA 05 A6 |  if_e	mov	result1, #0
217f8     18 00 90 AD |  if_e	jmp	#LR__2980
217fc     00 1E 0E F2 | 	cmp	local01, #0 wz
21800     00 FA 05 A6 |  if_e	mov	result1, #0
21804     11 13 02 56 |  if_ne	mov	arg01, local03
21808     10 15 02 56 |  if_ne	mov	arg02, local02
2180c     0F 17 02 56 |  if_ne	mov	arg03, local01
21810     08 02 B0 5D |  if_ne	call	#__system___fmtstr
21814                 | LR__2980
21814     A7 F0 03 F6 | 	mov	ptra, fp
21818     B2 00 A0 FD | 	call	#popregs_
2181c                 | __system___basic_print_string_ret
2181c     2D 00 64 FD | 	ret
21820                 | 
21820                 | __system___basic_print_integer
21820     04 4A 05 F6 | 	mov	COUNT_, #4
21824     A8 00 A0 FD | 	call	#pushregs_
21828     0A 1F 02 F6 | 	mov	local01, arg02
2182c     0B 21 02 F6 | 	mov	local02, arg03
21830     0C 23 02 F6 | 	mov	local03, arg04
21834     68 4C B0 FD | 	call	#__system___gettxfunc
21838     FD 24 0A F6 | 	mov	local04, result1 wz
2183c     00 FA 05 A6 |  if_e	mov	result1, #0
21840     12 13 02 56 |  if_ne	mov	arg01, local04
21844     10 15 02 56 |  if_ne	mov	arg02, local02
21848     0F 17 02 56 |  if_ne	mov	arg03, local01
2184c     11 19 02 56 |  if_ne	mov	arg04, local03
21850     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
21854     A7 F0 03 F6 | 	mov	ptra, fp
21858     B2 00 A0 FD | 	call	#popregs_
2185c                 | __system___basic_print_integer_ret
2185c     2D 00 64 FD | 	ret
21860                 | 
21860                 | __system___basic_print_unsigned
21860     03 4A 05 F6 | 	mov	COUNT_, #3
21864     A8 00 A0 FD | 	call	#pushregs_
21868     0A 1F 02 F6 | 	mov	local01, arg02
2186c     0B 21 02 F6 | 	mov	local02, arg03
21870     0C 23 02 F6 | 	mov	local03, arg04
21874     28 4C B0 FD | 	call	#__system___gettxfunc
21878     FD 12 0A F6 | 	mov	arg01, result1 wz
2187c     00 FA 05 A6 |  if_e	mov	result1, #0
21880     3A 20 26 54 |  if_ne	bith	local02, #58
21884     10 15 02 56 |  if_ne	mov	arg02, local02
21888     0F 17 02 56 |  if_ne	mov	arg03, local01
2188c     11 19 02 56 |  if_ne	mov	arg04, local03
21890     74 02 B0 5D |  if_ne	call	#__system___fmtnum
21894     A7 F0 03 F6 | 	mov	ptra, fp
21898     B2 00 A0 FD | 	call	#popregs_
2189c                 | __system___basic_print_unsigned_ret
2189c     2D 00 64 FD | 	ret
218a0                 | 
218a0                 | __system___basic_get_char
218a0     03 4A 05 F6 | 	mov	COUNT_, #3
218a4     A8 00 A0 FD | 	call	#pushregs_
218a8     38 4C B0 FD | 	call	#__system___getrxfunc
218ac     FD 1E 0A F6 | 	mov	local01, result1 wz
218b0     01 FA 65 A6 |  if_e	neg	result1, #1
218b4     28 00 90 AD |  if_e	jmp	#LR__2990
218b8     0F 21 02 F6 | 	mov	local02, local01
218bc     13 1E 46 F7 | 	zerox	local01, #19
218c0     14 20 46 F0 | 	shr	local02, #20
218c4     02 20 66 F0 | 	shl	local02, #2
218c8     ED 20 02 F1 | 	add	local02, __methods__
218cc     10 21 02 FB | 	rdlong	local02, local02
218d0     F2 22 02 F6 | 	mov	local03, objptr
218d4     0F E5 01 F6 | 	mov	objptr, local01
218d8     2D 20 62 FD | 	call	local02
218dc     11 E5 01 F6 | 	mov	objptr, local03
218e0                 | LR__2990
218e0     A7 F0 03 F6 | 	mov	ptra, fp
218e4     B2 00 A0 FD | 	call	#popregs_
218e8                 | __system___basic_get_char_ret
218e8     2D 00 64 FD | 	ret
218ec                 | 
218ec                 | __system___basic_put
218ec     04 4A 05 F6 | 	mov	COUNT_, #4
218f0     A8 00 A0 FD | 	call	#pushregs_
218f4     0D 1F 02 F6 | 	mov	local01, arg05
218f8     0F 19 02 FD | 	qmul	arg04, local01
218fc     09 21 02 F6 | 	mov	local02, arg01
21900     0B 23 02 F6 | 	mov	local03, arg03
21904     00 14 0E F2 | 	cmp	arg02, #0 wz
21908     01 14 86 51 |  if_ne	sub	arg02, #1
2190c     10 13 02 56 |  if_ne	mov	arg01, local02
21910     00 16 06 56 |  if_ne	mov	arg03, #0
21914     18 24 62 FD | 	getqx	local04
21918     78 42 B0 5D |  if_ne	call	#__system__lseek
2191c     11 15 02 F6 | 	mov	arg02, local03
21920     12 17 02 F6 | 	mov	arg03, local04
21924     10 13 02 F6 | 	mov	arg01, local02
21928     B4 41 B0 FD | 	call	#__system__write
2192c     FD 24 02 F6 | 	mov	local04, result1
21930     01 24 56 F2 | 	cmps	local04, #1 wc
21934     10 00 90 CD |  if_b	jmp	#LR__3000
21938     12 7D 02 F6 | 	mov	muldiva_, local04
2193c     0F 7F 02 F6 | 	mov	muldivb_, local01
21940     BA 00 A0 FD | 	call	#divide_
21944     3F 25 02 F6 | 	mov	local04, muldivb_
21948                 | LR__3000
21948     12 FB 01 F6 | 	mov	result1, local04
2194c     A7 F0 03 F6 | 	mov	ptra, fp
21950     B2 00 A0 FD | 	call	#popregs_
21954                 | __system___basic_put_ret
21954     2D 00 64 FD | 	ret
21958                 | 
21958                 | __system___basic_get
21958     04 4A 05 F6 | 	mov	COUNT_, #4
2195c     A8 00 A0 FD | 	call	#pushregs_
21960     0D 1F 02 F6 | 	mov	local01, arg05
21964     0F 19 02 FD | 	qmul	arg04, local01
21968     09 21 02 F6 | 	mov	local02, arg01
2196c     0B 23 02 F6 | 	mov	local03, arg03
21970     00 14 0E F2 | 	cmp	arg02, #0 wz
21974     01 14 86 51 |  if_ne	sub	arg02, #1
21978     10 13 02 56 |  if_ne	mov	arg01, local02
2197c     00 16 06 56 |  if_ne	mov	arg03, #0
21980     18 24 62 FD | 	getqx	local04
21984     0C 42 B0 5D |  if_ne	call	#__system__lseek
21988     11 15 02 F6 | 	mov	arg02, local03
2198c     12 17 02 F6 | 	mov	arg03, local04
21990     10 13 02 F6 | 	mov	arg01, local02
21994     84 41 B0 FD | 	call	#__system__read
21998     FD 24 02 F6 | 	mov	local04, result1
2199c     01 24 56 F2 | 	cmps	local04, #1 wc
219a0     10 00 90 CD |  if_b	jmp	#LR__3010
219a4     12 7D 02 F6 | 	mov	muldiva_, local04
219a8     0F 7F 02 F6 | 	mov	muldivb_, local01
219ac     BA 00 A0 FD | 	call	#divide_
219b0     3F 25 02 F6 | 	mov	local04, muldivb_
219b4                 | LR__3010
219b4     12 FB 01 F6 | 	mov	result1, local04
219b8     A7 F0 03 F6 | 	mov	ptra, fp
219bc     B2 00 A0 FD | 	call	#popregs_
219c0                 | __system___basic_get_ret
219c0     2D 00 64 FD | 	ret
219c4                 | 
219c4                 | __system___fmtchar
219c4     00 4A 05 F6 | 	mov	COUNT_, #0
219c8     A8 00 A0 FD | 	call	#pushregs_
219cc     10 F0 07 F1 | 	add	ptra, #16
219d0     04 4E 05 F1 | 	add	fp, #4
219d4     A7 12 62 FC | 	wrlong	arg01, fp
219d8     04 4E 05 F1 | 	add	fp, #4
219dc     A7 14 62 FC | 	wrlong	arg02, fp
219e0     04 4E 05 F1 | 	add	fp, #4
219e4     A7 16 62 FC | 	wrlong	arg03, fp
219e8     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
219ec     A7 16 62 FC | 	wrlong	arg03, fp
219f0     08 4E 85 F1 | 	sub	fp, #8
219f4     A7 12 02 FB | 	rdlong	arg01, fp
219f8     04 4E 05 F1 | 	add	fp, #4
219fc     A7 14 02 FB | 	rdlong	arg02, fp
21a00     04 4E 05 F1 | 	add	fp, #4
21a04     A7 16 02 F6 | 	mov	arg03, fp
21a08     0C 4E 85 F1 | 	sub	fp, #12
21a0c     0C 00 B0 FD | 	call	#__system___fmtstr
21a10     A7 F0 03 F6 | 	mov	ptra, fp
21a14     B2 00 A0 FD | 	call	#popregs_
21a18                 | __system___fmtchar_ret
21a18     2D 00 64 FD | 	ret
21a1c                 | 
21a1c                 | __system___fmtstr
21a1c     09 4A 05 F6 | 	mov	COUNT_, #9
21a20     A8 00 A0 FD | 	call	#pushregs_
21a24     09 1F 02 F6 | 	mov	local01, arg01
21a28     0A 21 02 F6 | 	mov	local02, arg02
21a2c     0B 23 02 F6 | 	mov	local03, arg03
21a30     10 19 E2 F8 | 	getbyte	arg04, local02, #0
21a34     11 13 02 F6 | 	mov	arg01, local03
21a38     09 25 02 F6 | 	mov	local04, arg01
21a3c     97 06 48 FB | 	callpa	#(@LR__3021-@LR__3020)>>2,fcache_load_ptr_
21a40                 | LR__3020
21a40     12 FB C9 FA | 	rdbyte	result1, local04 wz
21a44     01 24 06 51 |  if_ne	add	local04, #1
21a48     F4 FF 9F 5D |  if_ne	jmp	#LR__3020
21a4c                 | LR__3021
21a4c     09 25 82 F1 | 	sub	local04, arg01
21a50     00 18 0E F2 | 	cmp	arg04, #0 wz
21a54     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
21a58     10 15 02 F6 | 	mov	arg02, local02
21a5c     12 17 02 F6 | 	mov	arg03, local04
21a60     0F 13 02 F6 | 	mov	arg01, local01
21a64     02 18 06 F6 | 	mov	arg04, #2
21a68     D4 46 B0 FD | 	call	#__system___fmtpad
21a6c     FD 26 02 F6 | 	mov	local05, result1
21a70     00 26 56 F2 | 	cmps	local05, #0 wc
21a74     13 FB 01 C6 |  if_b	mov	result1, local05
21a78     80 00 90 CD |  if_b	jmp	#LR__3024
21a7c     01 24 56 F2 | 	cmps	local04, #1 wc
21a80     50 00 90 CD |  if_b	jmp	#LR__3023
21a84     12 29 02 F6 | 	mov	local06, local04
21a88                 | LR__3022
21a88     0F 2B 02 F6 | 	mov	local07, local01
21a8c     0F 2D 02 F6 | 	mov	local08, local01
21a90     13 2A 46 F7 | 	zerox	local07, #19
21a94     14 2C 46 F0 | 	shr	local08, #20
21a98     02 2C 66 F0 | 	shl	local08, #2
21a9c     ED 2C 02 F1 | 	add	local08, __methods__
21aa0     16 2D 02 FB | 	rdlong	local08, local08
21aa4     11 13 C2 FA | 	rdbyte	arg01, local03
21aa8     F2 2E 02 F6 | 	mov	local09, objptr
21aac     15 E5 01 F6 | 	mov	objptr, local07
21ab0     01 22 06 F1 | 	add	local03, #1
21ab4     2D 2C 62 FD | 	call	local08
21ab8     17 E5 01 F6 | 	mov	objptr, local09
21abc     FD 2E 02 F6 | 	mov	local09, result1
21ac0     00 2E 56 F2 | 	cmps	local09, #0 wc
21ac4     17 FB 01 C6 |  if_b	mov	result1, local09
21ac8     30 00 90 CD |  if_b	jmp	#LR__3024
21acc     17 27 02 F1 | 	add	local05, local09
21ad0     ED 29 6E FB | 	djnz	local06, #LR__3022
21ad4                 | LR__3023
21ad4     10 15 02 F6 | 	mov	arg02, local02
21ad8     12 17 02 F6 | 	mov	arg03, local04
21adc     0F 13 02 F6 | 	mov	arg01, local01
21ae0     01 18 06 F6 | 	mov	arg04, #1
21ae4     58 46 B0 FD | 	call	#__system___fmtpad
21ae8     FD 2E 02 F6 | 	mov	local09, result1
21aec     00 2E 56 F2 | 	cmps	local09, #0 wc
21af0     17 FB 01 C6 |  if_b	mov	result1, local09
21af4     17 27 02 31 |  if_ae	add	local05, local09
21af8     13 FB 01 36 |  if_ae	mov	result1, local05
21afc                 | LR__3024
21afc     A7 F0 03 F6 | 	mov	ptra, fp
21b00     B2 00 A0 FD | 	call	#popregs_
21b04                 | __system___fmtstr_ret
21b04     2D 00 64 FD | 	ret
21b08                 | 
21b08                 | __system___fmtnum
21b08     0B 4A 05 F6 | 	mov	COUNT_, #11
21b0c     A8 00 A0 FD | 	call	#pushregs_
21b10     09 1F 02 F6 | 	mov	local01, arg01
21b14     0A 21 02 F6 | 	mov	local02, arg02
21b18     0B 23 02 F6 | 	mov	local03, arg03
21b1c     0C 25 02 F6 | 	mov	local04, arg04
21b20     F8 27 02 F6 | 	mov	local05, ptra
21b24     13 29 02 F6 | 	mov	local06, local05
21b28     00 2A 06 F6 | 	mov	local07, #0
21b2c     10 2D 02 F6 | 	mov	local08, local02
21b30     10 2C 46 F0 | 	shr	local08, #16
21b34     3F 2C 06 F5 | 	and	local08, #63
21b38     10 2F E2 F8 | 	getbyte	local09, local02, #0
21b3c     10 31 02 F6 | 	mov	local10, local02
21b40     1A 30 46 F0 | 	shr	local10, #26
21b44     03 30 06 F5 | 	and	local10, #3
21b48     18 33 02 F6 | 	mov	local11, local10
21b4c     01 2C 56 F2 | 	cmps	local08, #1 wc
21b50     44 F0 07 F1 | 	add	ptra, #68
21b54     01 2C 86 31 |  if_ae	sub	local08, #1
21b58     41 2E 56 F2 | 	cmps	local09, #65 wc
21b5c     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
21b60     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
21b64     03 32 0E F2 | 	cmp	local11, #3 wz
21b68     00 32 06 A6 |  if_e	mov	local11, #0
21b6c     00 22 56 52 |  if_ne	cmps	local03, #0 wc
21b70     04 32 06 46 |  if_c_and_nz	mov	local11, #4
21b74     11 23 62 46 |  if_c_and_nz	neg	local03, local03
21b78     00 32 0E F2 | 	cmp	local11, #0 wz
21b7c     4C 00 90 AD |  if_e	jmp	#LR__3033
21b80     01 2A 06 F6 | 	mov	local07, #1
21b84     17 2D 0A F2 | 	cmp	local08, local09 wz
21b88     18 00 90 5D |  if_ne	jmp	#LR__3031
21b8c     05 2C 6E FB | 	djnz	local08, #LR__3030
21b90     0F 13 02 F6 | 	mov	arg01, local01
21b94     10 15 02 F6 | 	mov	arg02, local02
21b98     23 16 06 F6 | 	mov	arg03, #35
21b9c     24 FE BF FD | 	call	#__system___fmtchar
21ba0     88 00 90 FD | 	jmp	#LR__3037
21ba4                 | LR__3030
21ba4                 | LR__3031
21ba4     02 32 0E F2 | 	cmp	local11, #2 wz
21ba8     14 31 02 A6 |  if_e	mov	local10, local06
21bac     01 28 06 A1 |  if_e	add	local06, #1
21bb0     18 41 48 AC |  if_e	wrbyte	#32, local10
21bb4     14 00 90 AD |  if_e	jmp	#LR__3032
21bb8     04 32 0E F2 | 	cmp	local11, #4 wz
21bbc     14 5B 48 AC |  if_e	wrbyte	#45, local06
21bc0     01 28 06 A1 |  if_e	add	local06, #1
21bc4     14 57 48 5C |  if_ne	wrbyte	#43, local06
21bc8     01 28 06 51 |  if_ne	add	local06, #1
21bcc                 | LR__3032
21bcc                 | LR__3033
21bcc     14 13 02 F6 | 	mov	arg01, local06
21bd0     11 15 02 F6 | 	mov	arg02, local03
21bd4     12 17 02 F6 | 	mov	arg03, local04
21bd8     16 19 02 F6 | 	mov	arg04, local08
21bdc     00 1A 06 F6 | 	mov	arg05, #0
21be0     1D 20 2E F4 | 	testbn	local02, #29 wz
21be4     01 1A 06 56 |  if_ne	mov	arg05, #1
21be8     1C 46 B0 FD | 	call	#__system___uitoa
21bec     FD 2A 02 F1 | 	add	local07, result1
21bf0     17 2B 5A F2 | 	cmps	local07, local09 wcz
21bf4     24 00 90 ED |  if_be	jmp	#LR__3036
21bf8     97 0E 48 FB | 	callpa	#(@LR__3035-@LR__3034)>>2,fcache_load_ptr_
21bfc                 | LR__3034
21bfc     17 31 02 F6 | 	mov	local10, local09
21c00     01 30 56 F2 | 	cmps	local10, #1 wc
21c04     01 2E 86 F1 | 	sub	local09, #1
21c08     14 31 02 36 |  if_ae	mov	local10, local06
21c0c     01 28 06 31 |  if_ae	add	local06, #1
21c10     18 47 48 3C |  if_ae	wrbyte	#35, local10
21c14     E4 FF 9F 3D |  if_ae	jmp	#LR__3034
21c18                 | LR__3035
21c18     14 01 48 FC | 	wrbyte	#0, local06
21c1c                 | LR__3036
21c1c     0F 13 02 F6 | 	mov	arg01, local01
21c20     10 15 02 F6 | 	mov	arg02, local02
21c24     13 17 02 F6 | 	mov	arg03, local05
21c28     F0 FD BF FD | 	call	#__system___fmtstr
21c2c                 | LR__3037
21c2c     A7 F0 03 F6 | 	mov	ptra, fp
21c30     B2 00 A0 FD | 	call	#popregs_
21c34                 | __system___fmtnum_ret
21c34     2D 00 64 FD | 	ret
21c38                 | 
21c38                 | __system___fmtfloat
21c38     10 4A 05 F6 | 	mov	COUNT_, #16
21c3c     A8 00 A0 FD | 	call	#pushregs_
21c40     24 F1 07 F1 | 	add	ptra, #292
21c44     04 4E 05 F1 | 	add	fp, #4
21c48     A7 12 62 FC | 	wrlong	arg01, fp
21c4c     04 4E 05 F1 | 	add	fp, #4
21c50     A7 14 62 FC | 	wrlong	arg02, fp
21c54     04 4E 05 F1 | 	add	fp, #4
21c58     A7 16 62 FC | 	wrlong	arg03, fp
21c5c     04 4E 05 F1 | 	add	fp, #4
21c60     A7 18 62 FC | 	wrlong	arg04, fp
21c64     0C 4E 05 F1 | 	add	fp, #12
21c68     A7 14 68 FC | 	wrlong	#10, fp
21c6c     08 4E 05 F1 | 	add	fp, #8
21c70     A7 00 68 FC | 	wrlong	#0, fp
21c74     08 4E 05 F1 | 	add	fp, #8
21c78     A7 00 68 FC | 	wrlong	#0, fp
21c7c     08 4E 05 F1 | 	add	fp, #8
21c80     A7 00 68 FC | 	wrlong	#0, fp
21c84     04 4E 05 F1 | 	add	fp, #4
21c88     A7 04 68 FC | 	wrlong	#2, fp
21c8c     04 4E 05 F1 | 	add	fp, #4
21c90     A7 00 68 FC | 	wrlong	#0, fp
21c94     04 4E 05 F1 | 	add	fp, #4
21c98     A7 00 68 FC | 	wrlong	#0, fp
21c9c     04 4E 05 F1 | 	add	fp, #4
21ca0     A7 00 68 FC | 	wrlong	#0, fp
21ca4     04 4E 05 F1 | 	add	fp, #4
21ca8     A7 00 68 FC | 	wrlong	#0, fp
21cac     18 4E 05 F1 | 	add	fp, #24
21cb0     A7 00 68 FC | 	wrlong	#0, fp
21cb4     68 4E 05 F1 | 	add	fp, #104
21cb8     A7 1E 02 F6 | 	mov	local01, fp
21cbc     08 4E 85 F1 | 	sub	fp, #8
21cc0     A7 1E 62 FC | 	wrlong	local01, fp
21cc4     04 4E 05 F1 | 	add	fp, #4
21cc8     A7 1E 62 FC | 	wrlong	local01, fp
21ccc     BC 4E 85 F1 | 	sub	fp, #188
21cd0     A7 1E 02 FB | 	rdlong	local01, fp
21cd4     10 1E 46 F0 | 	shr	local01, #16
21cd8     3F 1E 06 F5 | 	and	local01, #63
21cdc     B0 4E 05 F1 | 	add	fp, #176
21ce0     A7 1E 62 FC | 	wrlong	local01, fp
21ce4     B0 4E 85 F1 | 	sub	fp, #176
21ce8     A7 1E 02 FB | 	rdlong	local01, fp
21cec     1C 1E 46 F0 | 	shr	local01, #28
21cf0     01 1E 06 F5 | 	and	local01, #1
21cf4     08 4F 05 F1 | 	add	fp, #264
21cf8     A7 1E 62 FC | 	wrlong	local01, fp
21cfc     58 4E 85 F1 | 	sub	fp, #88
21d00     A7 1E 0A FB | 	rdlong	local01, fp wz
21d04     B8 4E 85 F1 | 	sub	fp, #184
21d08     3C 00 90 5D |  if_ne	jmp	#LR__3041
21d0c     10 4E 05 F1 | 	add	fp, #16
21d10     A7 1E 02 FB | 	rdlong	local01, fp
21d14     10 4E 85 F1 | 	sub	fp, #16
21d18     61 1E 0E F2 | 	cmp	local01, #97 wz
21d1c     18 00 90 5D |  if_ne	jmp	#LR__3040
21d20     B8 4E 05 F1 | 	add	fp, #184
21d24     A7 1A 68 FC | 	wrlong	#13, fp
21d28     84 4E 85 F1 | 	sub	fp, #132
21d2c     A7 02 68 FC | 	wrlong	#1, fp
21d30     34 4E 85 F1 | 	sub	fp, #52
21d34     24 00 90 FD | 	jmp	#LR__3042
21d38                 | LR__3040
21d38     B8 4E 05 F1 | 	add	fp, #184
21d3c     A7 0C 68 FC | 	wrlong	#6, fp
21d40     B8 4E 85 F1 | 	sub	fp, #184
21d44     14 00 90 FD | 	jmp	#LR__3042
21d48                 | LR__3041
21d48     B8 4E 05 F1 | 	add	fp, #184
21d4c     A7 1E 02 FB | 	rdlong	local01, fp
21d50     01 1E 86 F1 | 	sub	local01, #1
21d54     A7 1E 62 FC | 	wrlong	local01, fp
21d58     B8 4E 85 F1 | 	sub	fp, #184
21d5c                 | LR__3042
21d5c     08 4E 05 F1 | 	add	fp, #8
21d60     A7 1E 02 FB | 	rdlong	local01, fp
21d64     16 1E 46 F0 | 	shr	local01, #22
21d68     03 1E 06 F5 | 	and	local01, #3
21d6c     04 4F 05 F1 | 	add	fp, #260
21d70     A7 1E 62 FC | 	wrlong	local01, fp
21d74     04 4F 85 F1 | 	sub	fp, #260
21d78     A7 1E 02 FB | 	rdlong	local01, fp
21d7c     1D 1E 46 F0 | 	shr	local01, #29
21d80     01 1E 06 F5 | 	and	local01, #1
21d84     B4 4E 05 F1 | 	add	fp, #180
21d88     A7 1E 62 FC | 	wrlong	local01, fp
21d8c     B4 4E 85 F1 | 	sub	fp, #180
21d90     A7 1E 02 FB | 	rdlong	local01, fp
21d94     0F 1F EA F8 | 	getbyte	local01, local01, #1
21d98     60 4E 05 F1 | 	add	fp, #96
21d9c     A7 1E 62 FC | 	wrlong	local01, fp
21da0     60 4E 85 F1 | 	sub	fp, #96
21da4     A7 1E 02 FB | 	rdlong	local01, fp
21da8     0F 1F E2 F8 | 	getbyte	local01, local01, #0
21dac     64 4E 05 F1 | 	add	fp, #100
21db0     A7 1E 62 FC | 	wrlong	local01, fp
21db4     00 1E 06 F6 | 	mov	local01, #0
21db8     5C 4E 85 F1 | 	sub	fp, #92
21dbc     A7 1A 02 FB | 	rdlong	arg05, fp
21dc0     65 1A 0E F2 | 	cmp	arg05, #101 wz
21dc4     01 1E 06 A6 |  if_e	mov	local01, #1
21dc8     14 4E 05 F1 | 	add	fp, #20
21dcc     A7 1E 62 FC | 	wrlong	local01, fp
21dd0     98 4E 05 F1 | 	add	fp, #152
21dd4     A7 20 0A FB | 	rdlong	local02, fp wz
21dd8     45 1E 06 56 |  if_ne	mov	local01, #69
21ddc     65 1E 06 A6 |  if_e	mov	local01, #101
21de0     8C 4E 85 F1 | 	sub	fp, #140
21de4     A7 1E 62 FC | 	wrlong	local01, fp
21de8     20 4E 85 F1 | 	sub	fp, #32
21dec     A7 1E 02 FB | 	rdlong	local01, fp
21df0     10 4E 85 F1 | 	sub	fp, #16
21df4     61 1E 0E F2 | 	cmp	local01, #97 wz
21df8     4C 00 90 5D |  if_ne	jmp	#LR__3043
21dfc     24 4E 05 F1 | 	add	fp, #36
21e00     A7 02 68 FC | 	wrlong	#1, fp
21e04     98 4E 05 F1 | 	add	fp, #152
21e08     A7 20 0A FB | 	rdlong	local02, fp wz
21e0c     50 1E 06 56 |  if_ne	mov	local01, #80
21e10     70 1E 06 A6 |  if_e	mov	local01, #112
21e14     8C 4E 85 F1 | 	sub	fp, #140
21e18     A7 1E 62 FC | 	wrlong	local01, fp
21e1c     14 4E 85 F1 | 	sub	fp, #20
21e20     A7 04 68 FC | 	wrlong	#2, fp
21e24     1C 4E 05 F1 | 	add	fp, #28
21e28     A7 02 68 FC | 	wrlong	#1, fp
21e2c     84 4E 05 F1 | 	add	fp, #132
21e30     A7 20 0A FB | 	rdlong	local02, fp wz
21e34     58 1E 06 56 |  if_ne	mov	local01, #88
21e38     78 1E 06 A6 |  if_e	mov	local01, #120
21e3c     7C 4E 85 F1 | 	sub	fp, #124
21e40     A7 1E 62 FC | 	wrlong	local01, fp
21e44     40 4E 85 F1 | 	sub	fp, #64
21e48                 | LR__3043
21e48     10 4E 05 F1 | 	add	fp, #16
21e4c     A7 1E 02 FB | 	rdlong	local01, fp
21e50     10 4E 85 F1 | 	sub	fp, #16
21e54     23 1E 0E F2 | 	cmp	local01, #35 wz
21e58     3C 00 90 5D |  if_ne	jmp	#LR__3046
21e5c     48 4E 05 F1 | 	add	fp, #72
21e60     A7 02 68 FC | 	wrlong	#1, fp
21e64     C8 4E 05 F1 | 	add	fp, #200
21e68     A7 1E 0A FB | 	rdlong	local01, fp wz
21e6c     10 4F 85 F1 | 	sub	fp, #272
21e70     18 00 90 AD |  if_e	jmp	#LR__3044
21e74     10 4E 05 F1 | 	add	fp, #16
21e78     A7 CC 68 FC | 	wrlong	#102, fp
21e7c     00 4F 05 F1 | 	add	fp, #256
21e80     A7 00 68 FC | 	wrlong	#0, fp
21e84     10 4F 85 F1 | 	sub	fp, #272
21e88     0C 00 90 FD | 	jmp	#LR__3045
21e8c                 | LR__3044
21e8c     10 4F 05 F1 | 	add	fp, #272
21e90     A7 02 68 FC | 	wrlong	#1, fp
21e94     10 4F 85 F1 | 	sub	fp, #272
21e98                 | LR__3045
21e98                 | LR__3046
21e98     08 4E 05 F1 | 	add	fp, #8
21e9c     A7 1E 02 FB | 	rdlong	local01, fp
21ea0     1A 1E 46 F0 | 	shr	local01, #26
21ea4     03 1E 06 F5 | 	and	local01, #3
21ea8     5C 4E 05 F1 | 	add	fp, #92
21eac     A7 1E 62 FC | 	wrlong	local01, fp
21eb0     58 4E 85 F1 | 	sub	fp, #88
21eb4     A7 FA 01 FB | 	rdlong	result1, fp
21eb8     0C 4E 85 F1 | 	sub	fp, #12
21ebc     1F FA 4D F0 | 	shr	result1, #31 wz
21ec0     20 00 90 AD |  if_e	jmp	#LR__3047
21ec4     2C 4E 05 F1 | 	add	fp, #44
21ec8     A7 5A 68 FC | 	wrlong	#45, fp
21ecc     20 4E 85 F1 | 	sub	fp, #32
21ed0     A7 FA 01 FB | 	rdlong	result1, fp
21ed4     1F FA E5 F4 | 	bitnot	result1, #31
21ed8     A7 FA 61 FC | 	wrlong	result1, fp
21edc     0C 4E 85 F1 | 	sub	fp, #12
21ee0     3C 00 90 FD | 	jmp	#LR__3049
21ee4                 | LR__3047
21ee4     64 4E 05 F1 | 	add	fp, #100
21ee8     A7 1E 02 FB | 	rdlong	local01, fp
21eec     64 4E 85 F1 | 	sub	fp, #100
21ef0     01 1E 0E F2 | 	cmp	local01, #1 wz
21ef4     2C 4E 05 A1 |  if_e	add	fp, #44
21ef8     A7 56 68 AC |  if_e	wrlong	#43, fp
21efc     2C 4E 85 A1 |  if_e	sub	fp, #44
21f00     1C 00 90 AD |  if_e	jmp	#LR__3048
21f04     64 4E 05 F1 | 	add	fp, #100
21f08     A7 1E 02 FB | 	rdlong	local01, fp
21f0c     64 4E 85 F1 | 	sub	fp, #100
21f10     02 1E 0E F2 | 	cmp	local01, #2 wz
21f14     2C 4E 05 A1 |  if_e	add	fp, #44
21f18     A7 40 68 AC |  if_e	wrlong	#32, fp
21f1c     2C 4E 85 A1 |  if_e	sub	fp, #44
21f20                 | LR__3048
21f20                 | LR__3049
21f20     08 4E 05 F1 | 	add	fp, #8
21f24     A7 1E 02 FB | 	rdlong	local01, fp
21f28     18 1E 46 F0 | 	shr	local01, #24
21f2c     03 1E 06 F5 | 	and	local01, #3
21f30     3C 4E 05 F1 | 	add	fp, #60
21f34     A7 1E 62 FC | 	wrlong	local01, fp
21f38     00 1E 06 F6 | 	mov	local01, #0
21f3c     18 4E 85 F1 | 	sub	fp, #24
21f40     A7 22 0A FB | 	rdlong	local03, fp wz
21f44     2C 4E 85 F1 | 	sub	fp, #44
21f48     18 00 90 5D |  if_ne	jmp	#LR__3050
21f4c     1C 4E 05 F1 | 	add	fp, #28
21f50     A7 24 02 FB | 	rdlong	local04, fp
21f54     1C 4E 85 F1 | 	sub	fp, #28
21f58     12 27 02 F6 | 	mov	local05, local04
21f5c     0A 26 0E F2 | 	cmp	local05, #10 wz
21f60     04 00 90 AD |  if_e	jmp	#LR__3051
21f64                 | LR__3050
21f64     01 1E 66 F5 | 	xor	local01, #1
21f68                 | LR__3051
21f68     3C 4E 05 F1 | 	add	fp, #60
21f6c     A7 1E 62 FC | 	wrlong	local01, fp
21f70     3C 4E 85 F1 | 	sub	fp, #60
21f74     00 1E 0E F2 | 	cmp	local01, #0 wz
21f78     0C 01 90 AD |  if_e	jmp	#LR__3053
21f7c     44 4E 05 F1 | 	add	fp, #68
21f80     A7 26 02 FB | 	rdlong	local05, fp
21f84     44 4E 85 F1 | 	sub	fp, #68
21f88     13 23 02 F6 | 	mov	local03, local05
21f8c     02 22 0E F2 | 	cmp	local03, #2 wz
21f90     F4 00 90 5D |  if_ne	jmp	#LR__3053
21f94     0C 4F 05 F1 | 	add	fp, #268
21f98     A7 28 02 FB | 	rdlong	local06, fp
21f9c     0C 4F 85 F1 | 	sub	fp, #268
21fa0     14 25 02 F6 | 	mov	local04, local06
21fa4     02 24 0E F2 | 	cmp	local04, #2 wz
21fa8     DC 00 90 AD |  if_e	jmp	#LR__3053
21fac     C0 4E 05 F1 | 	add	fp, #192
21fb0     A7 12 02 FB | 	rdlong	arg01, fp
21fb4     94 4E 85 F1 | 	sub	fp, #148
21fb8     A7 14 02 FB | 	rdlong	arg02, fp
21fbc     14 4E 05 F1 | 	add	fp, #20
21fc0     A7 16 02 FB | 	rdlong	arg03, fp
21fc4     40 4E 85 F1 | 	sub	fp, #64
21fc8     A4 44 B0 FD | 	call	#__system__emitsign_0500
21fcc     14 4F 05 F1 | 	add	fp, #276
21fd0     A7 FA 61 FC | 	wrlong	result1, fp
21fd4     14 4F 85 F1 | 	sub	fp, #276
21fd8     00 FA 55 F2 | 	cmps	result1, #0 wc
21fdc     14 4F 05 C1 |  if_b	add	fp, #276
21fe0     A7 FA 01 CB |  if_b	rdlong	result1, fp
21fe4     14 4F 85 C1 |  if_b	sub	fp, #276
21fe8     6C 0B 90 CD |  if_b	jmp	#LR__3103
21fec     C0 4E 05 F1 | 	add	fp, #192
21ff0     A7 1E 02 FB | 	rdlong	local01, fp
21ff4     54 4E 05 F1 | 	add	fp, #84
21ff8     A7 26 02 FB | 	rdlong	local05, fp
21ffc     13 23 02 F6 | 	mov	local03, local05
22000     13 1F 02 F1 | 	add	local01, local05
22004     54 4E 85 F1 | 	sub	fp, #84
22008     A7 1E 62 FC | 	wrlong	local01, fp
2200c     58 4E 85 F1 | 	sub	fp, #88
22010     A7 1E 0A FB | 	rdlong	local01, fp wz
22014     68 4E 85 F1 | 	sub	fp, #104
22018     60 00 90 AD |  if_e	jmp	#LR__3052
2201c     68 4E 05 F1 | 	add	fp, #104
22020     A7 1E 02 FB | 	rdlong	local01, fp
22024     AC 4E 05 F1 | 	add	fp, #172
22028     A7 22 02 FB | 	rdlong	local03, fp
2202c     11 1F 82 F1 | 	sub	local01, local03
22030     AC 4E 85 F1 | 	sub	fp, #172
22034     A7 1E 62 FC | 	wrlong	local01, fp
22038     68 4E 85 F1 | 	sub	fp, #104
2203c     00 1E 56 F2 | 	cmps	local01, #0 wc
22040     68 4E 05 C1 |  if_b	add	fp, #104
22044     A7 00 68 CC |  if_b	wrlong	#0, fp
22048     68 4E 85 C1 |  if_b	sub	fp, #104
2204c     08 4E 05 F1 | 	add	fp, #8
22050     A7 1E 02 FB | 	rdlong	local01, fp
22054     E8 1E 06 F4 | 	bitl	local01, #232
22058     A7 1E 62 FC | 	wrlong	local01, fp
2205c     60 4E 05 F1 | 	add	fp, #96
22060     A7 26 02 FB | 	rdlong	local05, fp
22064     13 23 02 F6 | 	mov	local03, local05
22068     08 22 66 F0 | 	shl	local03, #8
2206c     11 1F 42 F5 | 	or	local01, local03
22070     60 4E 85 F1 | 	sub	fp, #96
22074     A7 1E 62 FC | 	wrlong	local01, fp
22078     08 4E 85 F1 | 	sub	fp, #8
2207c                 | LR__3052
2207c     3C 4E 05 F1 | 	add	fp, #60
22080     A7 00 68 FC | 	wrlong	#0, fp
22084     3C 4E 85 F1 | 	sub	fp, #60
22088                 | LR__3053
22088     0C 4E 05 F1 | 	add	fp, #12
2208c     A7 12 02 FB | 	rdlong	arg01, fp
22090     0C 4E 85 F1 | 	sub	fp, #12
22094     04 1F B0 FD | 	call	#__system____builtin_ilogb
22098     FF FF 3F FF 
2209c     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
220a0     50 00 90 5D |  if_ne	jmp	#LR__3055
220a4     2C 4E 05 F1 | 	add	fp, #44
220a8     A7 1E 0A FB | 	rdlong	local01, fp wz
220ac     2C 4E 85 F1 | 	sub	fp, #44
220b0     24 00 90 AD |  if_e	jmp	#LR__3054
220b4     C0 4E 05 F1 | 	add	fp, #192
220b8     A7 20 02 FB | 	rdlong	local02, fp
220bc     10 23 02 F6 | 	mov	local03, local02
220c0     01 22 06 F1 | 	add	local03, #1
220c4     A7 22 62 FC | 	wrlong	local03, fp
220c8     94 4E 85 F1 | 	sub	fp, #148
220cc     A7 24 02 FB | 	rdlong	local04, fp
220d0     2C 4E 85 F1 | 	sub	fp, #44
220d4     10 25 42 FC | 	wrbyte	local04, local02
220d8                 | LR__3054
220d8     C0 4E 05 F1 | 	add	fp, #192
220dc     A7 12 02 FB | 	rdlong	arg01, fp
220e0     C0 4E 85 F1 | 	sub	fp, #192
220e4     81 01 00 FF 
220e8     0E 15 06 F6 | 	mov	arg02, ##@LR__5011
220ec     AC E9 BF FD | 	call	#__system____builtin_strcpy
220f0     A4 08 90 FD | 	jmp	#LR__3091
220f4                 | LR__3055
220f4     0C 4E 05 F1 | 	add	fp, #12
220f8     A7 20 02 FB | 	rdlong	local02, fp
220fc     0C 4E 85 F1 | 	sub	fp, #12
22100     10 13 02 F6 | 	mov	arg01, local02
22104     94 1E B0 FD | 	call	#__system____builtin_ilogb
22108     00 00 40 FF 
2210c     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
22110     50 00 90 5D |  if_ne	jmp	#LR__3057
22114     2C 4E 05 F1 | 	add	fp, #44
22118     A7 1E 0A FB | 	rdlong	local01, fp wz
2211c     2C 4E 85 F1 | 	sub	fp, #44
22120     24 00 90 AD |  if_e	jmp	#LR__3056
22124     C0 4E 05 F1 | 	add	fp, #192
22128     A7 20 02 FB | 	rdlong	local02, fp
2212c     10 23 02 F6 | 	mov	local03, local02
22130     01 22 06 F1 | 	add	local03, #1
22134     A7 22 62 FC | 	wrlong	local03, fp
22138     94 4E 85 F1 | 	sub	fp, #148
2213c     A7 24 02 FB | 	rdlong	local04, fp
22140     2C 4E 85 F1 | 	sub	fp, #44
22144     10 25 42 FC | 	wrbyte	local04, local02
22148                 | LR__3056
22148     C0 4E 05 F1 | 	add	fp, #192
2214c     A7 12 02 FB | 	rdlong	arg01, fp
22150     C0 4E 85 F1 | 	sub	fp, #192
22154     81 01 00 FF 
22158     12 15 06 F6 | 	mov	arg02, ##@LR__5012
2215c     3C E9 BF FD | 	call	#__system____builtin_strcpy
22160     34 08 90 FD | 	jmp	#LR__3091
22164                 | LR__3057
22164     10 4E 05 F1 | 	add	fp, #16
22168     A7 1E 02 FB | 	rdlong	local01, fp
2216c     10 4E 85 F1 | 	sub	fp, #16
22170     67 1E 0E F2 | 	cmp	local01, #103 wz
22174     10 4E 05 51 |  if_ne	add	fp, #16
22178     A7 22 02 5B |  if_ne	rdlong	local03, fp
2217c     10 4E 85 51 |  if_ne	sub	fp, #16
22180     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
22184     94 01 90 5D |  if_ne	jmp	#LR__3062
22188     0C 4E 05 F1 | 	add	fp, #12
2218c     A7 12 02 FB | 	rdlong	arg01, fp
22190     08 4E 05 F1 | 	add	fp, #8
22194     A7 14 02 F6 | 	mov	arg02, fp
22198     0C 4E 05 F1 | 	add	fp, #12
2219c     A7 16 02 F6 | 	mov	arg03, fp
221a0     98 4E 05 F1 | 	add	fp, #152
221a4     A7 18 02 FB | 	rdlong	arg04, fp
221a8     9C 4E 85 F1 | 	sub	fp, #156
221ac     A7 1A 02 FB | 	rdlong	arg05, fp
221b0     1C 4E 85 F1 | 	sub	fp, #28
221b4     C4 40 B0 FD | 	call	#__system__disassemble_0498
221b8     10 4E 05 F1 | 	add	fp, #16
221bc     A7 1E 02 FB | 	rdlong	local01, fp
221c0     10 4E 85 F1 | 	sub	fp, #16
221c4     23 1E 0E F2 | 	cmp	local01, #35 wz
221c8     A0 00 90 5D |  if_ne	jmp	#LR__3059
221cc     20 4E 05 F1 | 	add	fp, #32
221d0     A7 1E 02 FB | 	rdlong	local01, fp
221d4     98 4E 05 F1 | 	add	fp, #152
221d8     A7 22 02 FB | 	rdlong	local03, fp
221dc     B8 4E 85 F1 | 	sub	fp, #184
221e0     11 1F 5A F2 | 	cmps	local01, local03 wcz
221e4     24 4E 05 11 |  if_a	add	fp, #36
221e8     A7 02 68 1C |  if_a	wrlong	#1, fp
221ec     24 4E 85 11 |  if_a	sub	fp, #36
221f0     A4 01 90 1D |  if_a	jmp	#LR__3065
221f4     20 4E 05 F1 | 	add	fp, #32
221f8     A7 1E 02 FB | 	rdlong	local01, fp
221fc     20 4E 85 F1 | 	sub	fp, #32
22200     00 1E 56 F2 | 	cmps	local01, #0 wc
22204     2C 00 90 3D |  if_ae	jmp	#LR__3058
22208     B8 4E 05 F1 | 	add	fp, #184
2220c     A7 1E 02 FB | 	rdlong	local01, fp
22210     0F 1F 62 F6 | 	neg	local01, local01
22214     98 4E 85 F1 | 	sub	fp, #152
22218     A7 22 02 FB | 	rdlong	local03, fp
2221c     20 4E 85 F1 | 	sub	fp, #32
22220     0F 23 5A F2 | 	cmps	local03, local01 wcz
22224     24 4E 05 E1 |  if_be	add	fp, #36
22228     A7 02 68 EC |  if_be	wrlong	#1, fp
2222c     24 4E 85 E1 |  if_be	sub	fp, #36
22230     64 01 90 FD | 	jmp	#LR__3065
22234                 | LR__3058
22234     20 4E 05 F1 | 	add	fp, #32
22238     A7 1E 02 FB | 	rdlong	local01, fp
2223c     20 4E 85 F1 | 	sub	fp, #32
22240     01 1E 56 F2 | 	cmps	local01, #1 wc
22244     50 01 90 CD |  if_b	jmp	#LR__3065
22248     B8 4E 05 F1 | 	add	fp, #184
2224c     A7 1E 02 FB | 	rdlong	local01, fp
22250     98 4E 85 F1 | 	sub	fp, #152
22254     A7 22 02 FB | 	rdlong	local03, fp
22258     11 1F 82 F1 | 	sub	local01, local03
2225c     98 4E 05 F1 | 	add	fp, #152
22260     A7 1E 62 FC | 	wrlong	local01, fp
22264     B8 4E 85 F1 | 	sub	fp, #184
22268     2C 01 90 FD | 	jmp	#LR__3065
2226c                 | LR__3059
2226c     00 1E 06 F6 | 	mov	local01, #0
22270     08 4E 05 F1 | 	add	fp, #8
22274     A7 20 02 FB | 	rdlong	local02, fp
22278     1C 20 46 F0 | 	shr	local02, #28
2227c     01 20 0E F5 | 	and	local02, #1 wz
22280     01 1E 06 A6 |  if_e	mov	local01, #1
22284     2C 4E 05 F1 | 	add	fp, #44
22288     A7 1E 62 FC | 	wrlong	local01, fp
2228c     14 4E 85 F1 | 	sub	fp, #20
22290     A7 1E 02 FB | 	rdlong	local01, fp
22294     98 4E 05 F1 | 	add	fp, #152
22298     A7 22 02 FB | 	rdlong	local03, fp
2229c     B8 4E 85 F1 | 	sub	fp, #184
222a0     11 1F 52 F2 | 	cmps	local01, local03 wc
222a4     18 00 90 3D |  if_ae	jmp	#LR__3060
222a8     20 4E 05 F1 | 	add	fp, #32
222ac     A7 24 02 FB | 	rdlong	local04, fp
222b0     20 4E 85 F1 | 	sub	fp, #32
222b4     FF FF 7F FF 
222b8     FC 25 56 F2 | 	cmps	local04, ##-4 wc
222bc     10 00 90 3D |  if_ae	jmp	#LR__3061
222c0                 | LR__3060
222c0     24 4E 05 F1 | 	add	fp, #36
222c4     A7 02 68 FC | 	wrlong	#1, fp
222c8     24 4E 85 F1 | 	sub	fp, #36
222cc     C8 00 90 FD | 	jmp	#LR__3065
222d0                 | LR__3061
222d0     B8 4E 05 F1 | 	add	fp, #184
222d4     A7 24 02 FB | 	rdlong	local04, fp
222d8     98 4E 85 F1 | 	sub	fp, #152
222dc     A7 22 02 FB | 	rdlong	local03, fp
222e0     11 25 82 F1 | 	sub	local04, local03
222e4     98 4E 05 F1 | 	add	fp, #152
222e8     A7 24 62 FC | 	wrlong	local04, fp
222ec     AC 4E 85 F1 | 	sub	fp, #172
222f0     A7 12 02 FB | 	rdlong	arg01, fp
222f4     08 4E 05 F1 | 	add	fp, #8
222f8     A7 14 02 F6 | 	mov	arg02, fp
222fc     0C 4E 05 F1 | 	add	fp, #12
22300     A7 16 02 F6 | 	mov	arg03, fp
22304     12 19 62 F6 | 	neg	arg04, local04
22308     04 4E 85 F1 | 	sub	fp, #4
2230c     A7 1A 02 FB | 	rdlong	arg05, fp
22310     1C 4E 85 F1 | 	sub	fp, #28
22314     64 3F B0 FD | 	call	#__system__disassemble_0498
22318     7C 00 90 FD | 	jmp	#LR__3065
2231c                 | LR__3062
2231c     24 4E 05 F1 | 	add	fp, #36
22320     A7 1E 0A FB | 	rdlong	local01, fp wz
22324     24 4E 85 F1 | 	sub	fp, #36
22328     34 00 90 AD |  if_e	jmp	#LR__3063
2232c     0C 4E 05 F1 | 	add	fp, #12
22330     A7 12 02 FB | 	rdlong	arg01, fp
22334     08 4E 05 F1 | 	add	fp, #8
22338     A7 14 02 F6 | 	mov	arg02, fp
2233c     0C 4E 05 F1 | 	add	fp, #12
22340     A7 16 02 F6 | 	mov	arg03, fp
22344     98 4E 05 F1 | 	add	fp, #152
22348     A7 18 02 FB | 	rdlong	arg04, fp
2234c     9C 4E 85 F1 | 	sub	fp, #156
22350     A7 1A 02 FB | 	rdlong	arg05, fp
22354     1C 4E 85 F1 | 	sub	fp, #28
22358     20 3F B0 FD | 	call	#__system__disassemble_0498
2235c     38 00 90 FD | 	jmp	#LR__3064
22360                 | LR__3063
22360     0C 4E 05 F1 | 	add	fp, #12
22364     A7 12 02 FB | 	rdlong	arg01, fp
22368     08 4E 05 F1 | 	add	fp, #8
2236c     A7 14 02 F6 | 	mov	arg02, fp
22370     0C 4E 05 F1 | 	add	fp, #12
22374     A7 16 02 F6 | 	mov	arg03, fp
22378     98 4E 05 F1 | 	add	fp, #152
2237c     A7 24 02 FB | 	rdlong	local04, fp
22380     01 24 06 F1 | 	add	local04, #1
22384     12 19 62 F6 | 	neg	arg04, local04
22388     9C 4E 85 F1 | 	sub	fp, #156
2238c     A7 1A 02 FB | 	rdlong	arg05, fp
22390     1C 4E 85 F1 | 	sub	fp, #28
22394     E4 3E B0 FD | 	call	#__system__disassemble_0498
22398                 | LR__3064
22398                 | LR__3065
22398     1C 4E 05 F1 | 	add	fp, #28
2239c     A7 1E 02 FB | 	rdlong	local01, fp
223a0     1C 4E 85 F1 | 	sub	fp, #28
223a4     02 1E 0E F2 | 	cmp	local01, #2 wz
223a8     4C 00 90 5D |  if_ne	jmp	#LR__3068
223ac     1C 4E 05 F1 | 	add	fp, #28
223b0     A7 20 68 FC | 	wrlong	#16, fp
223b4     1C 4E 85 F1 | 	sub	fp, #28
223b8                 | LR__3066
223b8     14 4E 05 F1 | 	add	fp, #20
223bc     A7 1E 0A FB | 	rdlong	local01, fp wz
223c0     14 4E 85 F1 | 	sub	fp, #20
223c4     30 00 90 AD |  if_e	jmp	#LR__3067
223c8     14 4E 05 F1 | 	add	fp, #20
223cc     A7 22 02 FB | 	rdlong	local03, fp
223d0     14 4E 85 F1 | 	sub	fp, #20
223d4     00 80 00 FF 
223d8     00 22 16 F2 | 	cmp	local03, ##16777216 wc
223dc     18 00 90 3D |  if_ae	jmp	#LR__3067
223e0     14 4E 05 F1 | 	add	fp, #20
223e4     A7 1E 02 FB | 	rdlong	local01, fp
223e8     01 1E 66 F0 | 	shl	local01, #1
223ec     A7 1E 62 FC | 	wrlong	local01, fp
223f0     14 4E 85 F1 | 	sub	fp, #20
223f4     C0 FF 9F FD | 	jmp	#LR__3066
223f8                 | LR__3067
223f8                 | LR__3068
223f8     70 4E 05 F1 | 	add	fp, #112
223fc     A7 12 02 F6 | 	mov	arg01, fp
22400     5C 4E 85 F1 | 	sub	fp, #92
22404     A7 14 02 FB | 	rdlong	arg02, fp
22408     08 4E 05 F1 | 	add	fp, #8
2240c     A7 16 02 FB | 	rdlong	arg03, fp
22410     A0 4E 05 F1 | 	add	fp, #160
22414     A7 1A 02 FB | 	rdlong	arg05, fp
22418     BC 4E 85 F1 | 	sub	fp, #188
2241c     01 18 06 F6 | 	mov	arg04, #1
22420     E4 3D B0 FD | 	call	#__system___uitoa
22424     58 4E 05 F1 | 	add	fp, #88
22428     A7 FA 61 FC | 	wrlong	result1, fp
2242c     38 4E 85 F1 | 	sub	fp, #56
22430     A7 1E 02 FB | 	rdlong	local01, fp
22434     20 4E 85 F1 | 	sub	fp, #32
22438     00 1E 56 F2 | 	cmps	local01, #0 wc
2243c     50 00 90 3D |  if_ae	jmp	#LR__3069
22440     60 4E 05 F1 | 	add	fp, #96
22444     A7 5A 68 FC | 	wrlong	#45, fp
22448     50 4E 05 F1 | 	add	fp, #80
2244c     A7 12 02 F6 | 	mov	arg01, fp
22450     90 4E 85 F1 | 	sub	fp, #144
22454     A7 22 02 FB | 	rdlong	local03, fp
22458     11 15 62 F6 | 	neg	arg02, local03
2245c     18 4E 05 F1 | 	add	fp, #24
22460     A7 18 02 FB | 	rdlong	arg04, fp
22464     84 4E 05 F1 | 	add	fp, #132
22468     A7 28 02 FB | 	rdlong	local06, fp
2246c     BC 4E 85 F1 | 	sub	fp, #188
22470     14 25 02 F6 | 	mov	local04, local06
22474     0A 16 06 F6 | 	mov	arg03, #10
22478     12 1B 02 F6 | 	mov	arg05, local04
2247c     88 3D B0 FD | 	call	#__system___uitoa
22480     5C 4E 05 F1 | 	add	fp, #92
22484     A7 FA 61 FC | 	wrlong	result1, fp
22488     5C 4E 85 F1 | 	sub	fp, #92
2248c     48 00 90 FD | 	jmp	#LR__3070
22490                 | LR__3069
22490     60 4E 05 F1 | 	add	fp, #96
22494     A7 56 68 FC | 	wrlong	#43, fp
22498     50 4E 05 F1 | 	add	fp, #80
2249c     A7 12 02 F6 | 	mov	arg01, fp
224a0     90 4E 85 F1 | 	sub	fp, #144
224a4     A7 14 02 FB | 	rdlong	arg02, fp
224a8     18 4E 05 F1 | 	add	fp, #24
224ac     A7 18 02 FB | 	rdlong	arg04, fp
224b0     84 4E 05 F1 | 	add	fp, #132
224b4     A7 28 02 FB | 	rdlong	local06, fp
224b8     BC 4E 85 F1 | 	sub	fp, #188
224bc     14 25 02 F6 | 	mov	local04, local06
224c0     0A 16 06 F6 | 	mov	arg03, #10
224c4     12 1B 02 F6 | 	mov	arg05, local04
224c8     3C 3D B0 FD | 	call	#__system___uitoa
224cc     5C 4E 05 F1 | 	add	fp, #92
224d0     A7 FA 61 FC | 	wrlong	result1, fp
224d4     5C 4E 85 F1 | 	sub	fp, #92
224d8                 | LR__3070
224d8     24 4E 05 F1 | 	add	fp, #36
224dc     A7 1E 0A FB | 	rdlong	local01, fp wz
224e0     24 4E 85 F1 | 	sub	fp, #36
224e4     2C 00 90 AD |  if_e	jmp	#LR__3071
224e8     50 4E 05 F1 | 	add	fp, #80
224ec     A7 00 68 FC | 	wrlong	#0, fp
224f0     04 4E 85 F1 | 	sub	fp, #4
224f4     A7 00 68 FC | 	wrlong	#0, fp
224f8     6C 4E 05 F1 | 	add	fp, #108
224fc     A7 1E 02 FB | 	rdlong	local01, fp
22500     01 1E 06 F1 | 	add	local01, #1
22504     64 4E 85 F1 | 	sub	fp, #100
22508     A7 1E 62 FC | 	wrlong	local01, fp
2250c     54 4E 85 F1 | 	sub	fp, #84
22510     88 00 90 FD | 	jmp	#LR__3074
22514                 | LR__3071
22514     20 4E 05 F1 | 	add	fp, #32
22518     A7 1E 02 FB | 	rdlong	local01, fp
2251c     20 4E 85 F1 | 	sub	fp, #32
22520     00 1E 56 F2 | 	cmps	local01, #0 wc
22524     40 00 90 3D |  if_ae	jmp	#LR__3072
22528     20 4E 05 F1 | 	add	fp, #32
2252c     A7 20 02 FB | 	rdlong	local02, fp
22530     30 4E 05 F1 | 	add	fp, #48
22534     A7 20 62 FC | 	wrlong	local02, fp
22538     04 4E 85 F1 | 	sub	fp, #4
2253c     A7 20 62 FC | 	wrlong	local02, fp
22540     2C 4E 85 F1 | 	sub	fp, #44
22544     A7 1E 02 FB | 	rdlong	local01, fp
22548     98 4E 05 F1 | 	add	fp, #152
2254c     A7 22 02 FB | 	rdlong	local03, fp
22550     11 1F 02 F1 | 	add	local01, local03
22554     01 1E 06 F1 | 	add	local01, #1
22558     64 4E 85 F1 | 	sub	fp, #100
2255c     A7 1E 62 FC | 	wrlong	local01, fp
22560     54 4E 85 F1 | 	sub	fp, #84
22564     34 00 90 FD | 	jmp	#LR__3073
22568                 | LR__3072
22568     4C 4E 05 F1 | 	add	fp, #76
2256c     A7 00 68 FC | 	wrlong	#0, fp
22570     2C 4E 85 F1 | 	sub	fp, #44
22574     A7 1E 02 FB | 	rdlong	local01, fp
22578     30 4E 05 F1 | 	add	fp, #48
2257c     A7 1E 62 FC | 	wrlong	local01, fp
22580     68 4E 05 F1 | 	add	fp, #104
22584     A7 22 02 FB | 	rdlong	local03, fp
22588     11 1F 02 F1 | 	add	local01, local03
2258c     01 1E 06 F1 | 	add	local01, #1
22590     64 4E 85 F1 | 	sub	fp, #100
22594     A7 1E 62 FC | 	wrlong	local01, fp
22598     54 4E 85 F1 | 	sub	fp, #84
2259c                 | LR__3073
2259c                 | LR__3074
2259c     54 4E 05 F1 | 	add	fp, #84
225a0     A7 1E 02 FB | 	rdlong	local01, fp
225a4     08 4E 85 F1 | 	sub	fp, #8
225a8     A7 22 02 FB | 	rdlong	local03, fp
225ac     11 1F 82 F1 | 	sub	local01, local03
225b0     01 1E 06 F1 | 	add	local01, #1
225b4     24 4E 85 F1 | 	sub	fp, #36
225b8     A7 1E 62 FC | 	wrlong	local01, fp
225bc     04 4E 05 F1 | 	add	fp, #4
225c0     A7 1E 0A FB | 	rdlong	local01, fp wz
225c4     2C 4E 85 F1 | 	sub	fp, #44
225c8     28 4E 05 51 |  if_ne	add	fp, #40
225cc     A7 22 02 5B |  if_ne	rdlong	local03, fp
225d0     01 22 06 51 |  if_ne	add	local03, #1
225d4     A7 22 62 5C |  if_ne	wrlong	local03, fp
225d8     28 4E 85 51 |  if_ne	sub	fp, #40
225dc     1C 4E 05 F1 | 	add	fp, #28
225e0     A7 1E 02 FB | 	rdlong	local01, fp
225e4     1C 4E 85 F1 | 	sub	fp, #28
225e8     10 1E 0E F2 | 	cmp	local01, #16 wz
225ec     28 4E 05 A1 |  if_e	add	fp, #40
225f0     A7 1E 02 AB |  if_e	rdlong	local01, fp
225f4     02 1E 06 A1 |  if_e	add	local01, #2
225f8     A7 1E 62 AC |  if_e	wrlong	local01, fp
225fc     28 4E 85 A1 |  if_e	sub	fp, #40
22600     24 4E 05 F1 | 	add	fp, #36
22604     A7 1E 0A FB | 	rdlong	local01, fp wz
22608     24 4E 85 F1 | 	sub	fp, #36
2260c     28 00 90 AD |  if_e	jmp	#LR__3075
22610     28 4E 05 F1 | 	add	fp, #40
22614     A7 1E 02 FB | 	rdlong	local01, fp
22618     02 22 06 F6 | 	mov	local03, #2
2261c     34 4E 05 F1 | 	add	fp, #52
22620     A7 26 02 FB | 	rdlong	local05, fp
22624     13 23 02 F1 | 	add	local03, local05
22628     11 1F 02 F1 | 	add	local01, local03
2262c     34 4E 85 F1 | 	sub	fp, #52
22630     A7 1E 62 FC | 	wrlong	local01, fp
22634     28 4E 85 F1 | 	sub	fp, #40
22638                 | LR__3075
22638     28 4E 05 F1 | 	add	fp, #40
2263c     A7 1E 02 FB | 	rdlong	local01, fp
22640     28 4E 85 F1 | 	sub	fp, #40
22644     41 1E 56 F2 | 	cmps	local01, #65 wc
22648     01 FA 65 36 |  if_ae	neg	result1, #1
2264c     08 05 90 3D |  if_ae	jmp	#LR__3103
22650     3C 4E 05 F1 | 	add	fp, #60
22654     A7 1E 0A FB | 	rdlong	local01, fp wz
22658     3C 4E 85 F1 | 	sub	fp, #60
2265c     60 00 90 AD |  if_e	jmp	#LR__3076
22660     C0 4E 05 F1 | 	add	fp, #192
22664     A7 12 02 FB | 	rdlong	arg01, fp
22668     94 4E 85 F1 | 	sub	fp, #148
2266c     A7 14 02 FB | 	rdlong	arg02, fp
22670     14 4E 05 F1 | 	add	fp, #20
22674     A7 16 02 FB | 	rdlong	arg03, fp
22678     40 4E 85 F1 | 	sub	fp, #64
2267c     F0 3D B0 FD | 	call	#__system__emitsign_0500
22680     18 4F 05 F1 | 	add	fp, #280
22684     A7 FA 61 FC | 	wrlong	result1, fp
22688     18 4F 85 F1 | 	sub	fp, #280
2268c     00 FA 55 F2 | 	cmps	result1, #0 wc
22690     18 4F 05 C1 |  if_b	add	fp, #280
22694     A7 FA 01 CB |  if_b	rdlong	result1, fp
22698     18 4F 85 C1 |  if_b	sub	fp, #280
2269c     B8 04 90 CD |  if_b	jmp	#LR__3103
226a0     C0 4E 05 F1 | 	add	fp, #192
226a4     A7 1E 02 FB | 	rdlong	local01, fp
226a8     58 4E 05 F1 | 	add	fp, #88
226ac     A7 22 02 FB | 	rdlong	local03, fp
226b0     11 1F 02 F1 | 	add	local01, local03
226b4     58 4E 85 F1 | 	sub	fp, #88
226b8     A7 1E 62 FC | 	wrlong	local01, fp
226bc     C0 4E 85 F1 | 	sub	fp, #192
226c0                 | LR__3076
226c0     4C 4E 05 F1 | 	add	fp, #76
226c4     A7 1E 02 FB | 	rdlong	local01, fp
226c8     34 4E 85 F1 | 	sub	fp, #52
226cc     A7 1E 62 FC | 	wrlong	local01, fp
226d0     18 4E 85 F1 | 	sub	fp, #24
226d4     97 9E 48 FB | 	callpa	#(@LR__3082-@LR__3077)>>2,fcache_load_ptr_
226d8                 | LR__3077
226d8     18 4E 05 F1 | 	add	fp, #24
226dc     A7 20 02 FB | 	rdlong	local02, fp
226e0     3C 4E 05 F1 | 	add	fp, #60
226e4     A7 26 02 FB | 	rdlong	local05, fp
226e8     54 4E 85 F1 | 	sub	fp, #84
226ec     13 21 52 F2 | 	cmps	local02, local05 wc
226f0     20 01 90 3D |  if_ae	jmp	#LR__3083
226f4     18 4E 05 F1 | 	add	fp, #24
226f8     A7 28 02 FB | 	rdlong	local06, fp
226fc     18 4E 85 F1 | 	sub	fp, #24
22700     00 28 56 F2 | 	cmps	local06, #0 wc
22704     58 00 90 CD |  if_b	jmp	#LR__3078
22708     18 4E 05 F1 | 	add	fp, #24
2270c     A7 28 02 FB | 	rdlong	local06, fp
22710     40 4E 05 F1 | 	add	fp, #64
22714     A7 2A 02 FB | 	rdlong	local07, fp
22718     58 4E 85 F1 | 	sub	fp, #88
2271c     15 29 52 F2 | 	cmps	local06, local07 wc
22720     3C 00 90 3D |  if_ae	jmp	#LR__3078
22724     C0 4E 05 F1 | 	add	fp, #192
22728     A7 2C 02 FB | 	rdlong	local08, fp
2272c     16 2B 02 F6 | 	mov	local07, local08
22730     01 2A 06 F1 | 	add	local07, #1
22734     A7 2A 62 FC | 	wrlong	local07, fp
22738     A8 4E 85 F1 | 	sub	fp, #168
2273c     A7 2A 02 FB | 	rdlong	local07, fp
22740     15 2F 02 F6 | 	mov	local09, local07
22744     58 4E 05 F1 | 	add	fp, #88
22748     A7 30 02 F6 | 	mov	local10, fp
2274c     A7 2E 02 F1 | 	add	local09, fp
22750     17 33 C2 FA | 	rdbyte	local11, local09
22754     16 33 42 FC | 	wrbyte	local11, local08
22758     70 4E 85 F1 | 	sub	fp, #112
2275c     20 00 90 FD | 	jmp	#LR__3079
22760                 | LR__3078
22760     C0 4E 05 F1 | 	add	fp, #192
22764     A7 2C 02 FB | 	rdlong	local08, fp
22768     16 2F 02 F6 | 	mov	local09, local08
2276c     01 2E 06 F1 | 	add	local09, #1
22770     A7 2E 62 FC | 	wrlong	local09, fp
22774     C0 4E 85 F1 | 	sub	fp, #192
22778     30 2E 06 F6 | 	mov	local09, #48
2277c     16 61 48 FC | 	wrbyte	#48, local08
22780                 | LR__3079
22780     18 4E 05 F1 | 	add	fp, #24
22784     A7 28 02 FB | 	rdlong	local06, fp
22788     38 4E 05 F1 | 	add	fp, #56
2278c     A7 34 02 FB | 	rdlong	local12, fp
22790     50 4E 85 F1 | 	sub	fp, #80
22794     1A 29 0A F2 | 	cmp	local06, local12 wz
22798     5C 00 90 5D |  if_ne	jmp	#LR__3081
2279c     10 4F 05 F1 | 	add	fp, #272
227a0     A7 2A 02 FB | 	rdlong	local07, fp
227a4     10 4F 85 F1 | 	sub	fp, #272
227a8     15 2F 0A F6 | 	mov	local09, local07 wz
227ac     28 00 90 5D |  if_ne	jmp	#LR__3080
227b0     54 4E 05 F1 | 	add	fp, #84
227b4     A7 32 02 FB | 	rdlong	local11, fp
227b8     19 31 02 F6 | 	mov	local10, local11
227bc     01 30 86 F1 | 	sub	local10, #1
227c0     3C 4E 85 F1 | 	sub	fp, #60
227c4     A7 36 02 FB | 	rdlong	local13, fp
227c8     18 4E 85 F1 | 	sub	fp, #24
227cc     1B 39 02 F6 | 	mov	local14, local13
227d0     18 39 52 F2 | 	cmps	local14, local10 wc
227d4     20 00 90 3D |  if_ae	jmp	#LR__3081
227d8                 | LR__3080
227d8     C0 4E 05 F1 | 	add	fp, #192
227dc     A7 2C 02 FB | 	rdlong	local08, fp
227e0     16 35 02 F6 | 	mov	local12, local08
227e4     01 34 06 F1 | 	add	local12, #1
227e8     A7 34 62 FC | 	wrlong	local12, fp
227ec     C0 4E 85 F1 | 	sub	fp, #192
227f0     2E 2E 06 F6 | 	mov	local09, #46
227f4     16 5D 48 FC | 	wrbyte	#46, local08
227f8                 | LR__3081
227f8     18 4E 05 F1 | 	add	fp, #24
227fc     A7 3A 02 FB | 	rdlong	local15, fp
22800     1D 35 02 F6 | 	mov	local12, local15
22804     01 34 06 F1 | 	add	local12, #1
22808     A7 34 62 FC | 	wrlong	local12, fp
2280c     18 4E 85 F1 | 	sub	fp, #24
22810     C4 FE 9F FD | 	jmp	#LR__3077
22814                 | LR__3082
22814                 | LR__3083
22814     34 4E 05 F1 | 	add	fp, #52
22818     A7 1E 0A FB | 	rdlong	local01, fp wz
2281c     34 4E 85 F1 | 	sub	fp, #52
22820     A0 00 90 AD |  if_e	jmp	#LR__3087
22824     C0 4E 05 F1 | 	add	fp, #192
22828     A7 1E 02 FB | 	rdlong	local01, fp
2282c     01 1E 86 F1 | 	sub	local01, #1
22830     A7 1E 62 FC | 	wrlong	local01, fp
22834     C0 4E 85 F1 | 	sub	fp, #192
22838     97 26 48 FB | 	callpa	#(@LR__3085-@LR__3084)>>2,fcache_load_ptr_
2283c                 | LR__3084
2283c     C0 4E 05 F1 | 	add	fp, #192
22840     A7 1E 02 FB | 	rdlong	local01, fp
22844     04 4E 05 F1 | 	add	fp, #4
22848     A7 22 02 FB | 	rdlong	local03, fp
2284c     C4 4E 85 F1 | 	sub	fp, #196
22850     11 1F 5A F2 | 	cmps	local01, local03 wcz
22854     30 00 90 ED |  if_be	jmp	#LR__3086
22858     C0 4E 05 F1 | 	add	fp, #192
2285c     A7 28 02 FB | 	rdlong	local06, fp
22860     C0 4E 85 F1 | 	sub	fp, #192
22864     14 25 C2 FA | 	rdbyte	local04, local06
22868     30 24 0E F2 | 	cmp	local04, #48 wz
2286c     18 00 90 5D |  if_ne	jmp	#LR__3086
22870     C0 4E 05 F1 | 	add	fp, #192
22874     A7 1E 02 FB | 	rdlong	local01, fp
22878     01 1E 86 F1 | 	sub	local01, #1
2287c     A7 1E 62 FC | 	wrlong	local01, fp
22880     C0 4E 85 F1 | 	sub	fp, #192
22884     B4 FF 9F FD | 	jmp	#LR__3084
22888                 | LR__3085
22888                 | LR__3086
22888     C0 4E 05 F1 | 	add	fp, #192
2288c     A7 20 02 FB | 	rdlong	local02, fp
22890     C0 4E 85 F1 | 	sub	fp, #192
22894     10 1F C2 FA | 	rdbyte	local01, local02
22898     2E 1E 0E F2 | 	cmp	local01, #46 wz
2289c     C0 4E 05 A1 |  if_e	add	fp, #192
228a0     A7 1E 02 AB |  if_e	rdlong	local01, fp
228a4     01 1E 86 A1 |  if_e	sub	local01, #1
228a8     A7 1E 62 AC |  if_e	wrlong	local01, fp
228ac     C0 4E 85 A1 |  if_e	sub	fp, #192
228b0     C0 4E 05 F1 | 	add	fp, #192
228b4     A7 22 02 FB | 	rdlong	local03, fp
228b8     01 22 06 F1 | 	add	local03, #1
228bc     A7 22 62 FC | 	wrlong	local03, fp
228c0     C0 4E 85 F1 | 	sub	fp, #192
228c4                 | LR__3087
228c4     24 4E 05 F1 | 	add	fp, #36
228c8     A7 1E 0A FB | 	rdlong	local01, fp wz
228cc     24 4E 85 F1 | 	sub	fp, #36
228d0     B4 00 90 AD |  if_e	jmp	#LR__3090
228d4     C0 4E 05 F1 | 	add	fp, #192
228d8     A7 20 02 FB | 	rdlong	local02, fp
228dc     10 23 02 F6 | 	mov	local03, local02
228e0     01 22 06 F1 | 	add	local03, #1
228e4     A7 22 62 FC | 	wrlong	local03, fp
228e8     90 4E 85 F1 | 	sub	fp, #144
228ec     A7 24 02 FB | 	rdlong	local04, fp
228f0     10 25 42 FC | 	wrbyte	local04, local02
228f4     90 4E 05 F1 | 	add	fp, #144
228f8     A7 20 02 FB | 	rdlong	local02, fp
228fc     10 23 02 F6 | 	mov	local03, local02
22900     01 22 06 F1 | 	add	local03, #1
22904     A7 22 62 FC | 	wrlong	local03, fp
22908     60 4E 85 F1 | 	sub	fp, #96
2290c     A7 24 02 FB | 	rdlong	local04, fp
22910     10 25 42 FC | 	wrbyte	local04, local02
22914     48 4E 85 F1 | 	sub	fp, #72
22918     A7 00 68 FC | 	wrlong	#0, fp
2291c     18 4E 85 F1 | 	sub	fp, #24
22920                 | LR__3088
22920     18 4E 05 F1 | 	add	fp, #24
22924     A7 20 02 FB | 	rdlong	local02, fp
22928     44 4E 05 F1 | 	add	fp, #68
2292c     A7 26 02 FB | 	rdlong	local05, fp
22930     5C 4E 85 F1 | 	sub	fp, #92
22934     13 21 52 F2 | 	cmps	local02, local05 wc
22938     4C 00 90 3D |  if_ae	jmp	#LR__3089
2293c     C0 4E 05 F1 | 	add	fp, #192
22940     A7 2C 02 FB | 	rdlong	local08, fp
22944     16 35 02 F6 | 	mov	local12, local08
22948     01 34 06 F1 | 	add	local12, #1
2294c     A7 34 62 FC | 	wrlong	local12, fp
22950     A8 4E 85 F1 | 	sub	fp, #168
22954     A7 2A 02 FB | 	rdlong	local07, fp
22958     15 2F 02 F6 | 	mov	local09, local07
2295c     98 4E 05 F1 | 	add	fp, #152
22960     A7 30 02 F6 | 	mov	local10, fp
22964     A7 2E 02 F1 | 	add	local09, fp
22968     17 33 C2 FA | 	rdbyte	local11, local09
2296c     16 33 42 FC | 	wrbyte	local11, local08
22970     98 4E 85 F1 | 	sub	fp, #152
22974     A7 34 02 FB | 	rdlong	local12, fp
22978     01 34 06 F1 | 	add	local12, #1
2297c     A7 34 62 FC | 	wrlong	local12, fp
22980     18 4E 85 F1 | 	sub	fp, #24
22984     98 FF 9F FD | 	jmp	#LR__3088
22988                 | LR__3089
22988                 | LR__3090
22988     C0 4E 05 F1 | 	add	fp, #192
2298c     A7 1E 02 FB | 	rdlong	local01, fp
22990     C0 4E 85 F1 | 	sub	fp, #192
22994     0F 01 48 FC | 	wrbyte	#0, local01
22998                 | LR__3091
22998     6C 4E 05 F1 | 	add	fp, #108
2299c     A7 1E 0A FB | 	rdlong	local01, fp wz
229a0     6C 4E 85 F1 | 	sub	fp, #108
229a4     90 01 90 AD |  if_e	jmp	#LR__3102
229a8     48 4E 05 F1 | 	add	fp, #72
229ac     A7 22 0A FB | 	rdlong	local03, fp wz
229b0     48 4E 85 F1 | 	sub	fp, #72
229b4     80 01 90 AD |  if_e	jmp	#LR__3102
229b8     C4 4E 05 F1 | 	add	fp, #196
229bc     A7 12 02 FB | 	rdlong	arg01, fp
229c0     C4 4E 85 F1 | 	sub	fp, #196
229c4     09 3D 02 F6 | 	mov	local16, arg01
229c8     97 06 48 FB | 	callpa	#(@LR__3093-@LR__3092)>>2,fcache_load_ptr_
229cc                 | LR__3092
229cc     1E FB C9 FA | 	rdbyte	result1, local16 wz
229d0     01 3C 06 51 |  if_ne	add	local16, #1
229d4     F4 FF 9F 5D |  if_ne	jmp	#LR__3092
229d8                 | LR__3093
229d8     09 3D 82 F1 | 	sub	local16, arg01
229dc     1E 25 02 F6 | 	mov	local04, local16
229e0     6C 4E 05 F1 | 	add	fp, #108
229e4     A7 28 02 FB | 	rdlong	local06, fp
229e8     6C 4E 85 F1 | 	sub	fp, #108
229ec     14 25 5A F2 | 	cmps	local04, local06 wcz
229f0     44 01 90 ED |  if_be	jmp	#LR__3102
229f4     C4 4E 05 F1 | 	add	fp, #196
229f8     A7 1E 02 FB | 	rdlong	local01, fp
229fc     5C 4E 05 F1 | 	add	fp, #92
22a00     A7 1E 62 FC | 	wrlong	local01, fp
22a04     FC 4E 85 F1 | 	sub	fp, #252
22a08     A7 1E 0A FB | 	rdlong	local01, fp wz
22a0c     24 4E 85 F1 | 	sub	fp, #36
22a10     20 00 90 AD |  if_e	jmp	#LR__3094
22a14     B8 4E 05 F1 | 	add	fp, #184
22a18     A7 00 68 FC | 	wrlong	#0, fp
22a1c     4C 4E 85 F1 | 	sub	fp, #76
22a20     A7 1E 02 FB | 	rdlong	local01, fp
22a24     B0 4E 05 F1 | 	add	fp, #176
22a28     A7 1E 62 FC | 	wrlong	local01, fp
22a2c     1C 4F 85 F1 | 	sub	fp, #284
22a30     24 00 90 FD | 	jmp	#LR__3095
22a34                 | LR__3094
22a34     6C 4E 05 F1 | 	add	fp, #108
22a38     A7 1E 02 FB | 	rdlong	local01, fp
22a3c     01 1E 86 F1 | 	sub	local01, #1
22a40     4C 4E 05 F1 | 	add	fp, #76
22a44     A7 22 02 FB | 	rdlong	local03, fp
22a48     11 1F 82 F1 | 	sub	local01, local03
22a4c     64 4E 05 F1 | 	add	fp, #100
22a50     A7 1E 62 FC | 	wrlong	local01, fp
22a54     1C 4F 85 F1 | 	sub	fp, #284
22a58                 | LR__3095
22a58     97 20 48 FB | 	callpa	#(@LR__3097-@LR__3096)>>2,fcache_load_ptr_
22a5c                 | LR__3096
22a5c     1C 4F 05 F1 | 	add	fp, #284
22a60     A7 1E 0A FB | 	rdlong	local01, fp wz
22a64     1C 4F 85 F1 | 	sub	fp, #284
22a68     30 00 90 AD |  if_e	jmp	#LR__3098
22a6c     20 4F 05 F1 | 	add	fp, #288
22a70     A7 20 02 FB | 	rdlong	local02, fp
22a74     10 23 02 F6 | 	mov	local03, local02
22a78     01 22 06 F1 | 	add	local03, #1
22a7c     A7 22 62 FC | 	wrlong	local03, fp
22a80     10 55 48 FC | 	wrbyte	#42, local02
22a84     04 4E 85 F1 | 	sub	fp, #4
22a88     A7 1E 02 FB | 	rdlong	local01, fp
22a8c     01 1E 86 F1 | 	sub	local01, #1
22a90     A7 1E 62 FC | 	wrlong	local01, fp
22a94     1C 4F 85 F1 | 	sub	fp, #284
22a98     C0 FF 9F FD | 	jmp	#LR__3096
22a9c                 | LR__3097
22a9c                 | LR__3098
22a9c     B8 4E 05 F1 | 	add	fp, #184
22aa0     A7 1E 0A FB | 	rdlong	local01, fp wz
22aa4     B8 4E 85 F1 | 	sub	fp, #184
22aa8     70 00 90 AD |  if_e	jmp	#LR__3101
22aac     20 4F 05 F1 | 	add	fp, #288
22ab0     A7 20 02 FB | 	rdlong	local02, fp
22ab4     10 23 02 F6 | 	mov	local03, local02
22ab8     01 22 06 F1 | 	add	local03, #1
22abc     A7 22 62 FC | 	wrlong	local03, fp
22ac0     10 5D 48 FC | 	wrbyte	#46, local02
22ac4     04 4E 85 F1 | 	sub	fp, #4
22ac8     A7 00 68 FC | 	wrlong	#0, fp
22acc     1C 4F 85 F1 | 	sub	fp, #284
22ad0                 | LR__3099
22ad0     1C 4F 05 F1 | 	add	fp, #284
22ad4     A7 20 02 FB | 	rdlong	local02, fp
22ad8     64 4E 85 F1 | 	sub	fp, #100
22adc     A7 26 02 FB | 	rdlong	local05, fp
22ae0     B8 4E 85 F1 | 	sub	fp, #184
22ae4     13 21 52 F2 | 	cmps	local02, local05 wc
22ae8     30 00 90 3D |  if_ae	jmp	#LR__3100
22aec     20 4F 05 F1 | 	add	fp, #288
22af0     A7 2C 02 FB | 	rdlong	local08, fp
22af4     16 35 02 F6 | 	mov	local12, local08
22af8     01 34 06 F1 | 	add	local12, #1
22afc     A7 34 62 FC | 	wrlong	local12, fp
22b00     16 55 48 FC | 	wrbyte	#42, local08
22b04     04 4E 85 F1 | 	sub	fp, #4
22b08     A7 34 02 FB | 	rdlong	local12, fp
22b0c     01 34 06 F1 | 	add	local12, #1
22b10     A7 34 62 FC | 	wrlong	local12, fp
22b14     1C 4F 85 F1 | 	sub	fp, #284
22b18     B4 FF 9F FD | 	jmp	#LR__3099
22b1c                 | LR__3100
22b1c                 | LR__3101
22b1c     20 4F 05 F1 | 	add	fp, #288
22b20     A7 20 02 FB | 	rdlong	local02, fp
22b24     10 23 02 F6 | 	mov	local03, local02
22b28     01 22 06 F1 | 	add	local03, #1
22b2c     A7 22 62 FC | 	wrlong	local03, fp
22b30     20 4F 85 F1 | 	sub	fp, #288
22b34     10 01 48 FC | 	wrbyte	#0, local02
22b38                 | LR__3102
22b38     04 4E 05 F1 | 	add	fp, #4
22b3c     A7 12 02 FB | 	rdlong	arg01, fp
22b40     04 4E 05 F1 | 	add	fp, #4
22b44     A7 14 02 FB | 	rdlong	arg02, fp
22b48     BC 4E 05 F1 | 	add	fp, #188
22b4c     A7 16 02 FB | 	rdlong	arg03, fp
22b50     C4 4E 85 F1 | 	sub	fp, #196
22b54     C4 EE BF FD | 	call	#__system___fmtstr
22b58                 | LR__3103
22b58     A7 F0 03 F6 | 	mov	ptra, fp
22b5c     B2 00 A0 FD | 	call	#popregs_
22b60                 | __system___fmtfloat_ret
22b60     2D 00 64 FD | 	ret
22b64                 | 
22b64                 | __system__Left_S
22b64     04 4A 05 F6 | 	mov	COUNT_, #4
22b68     A8 00 A0 FD | 	call	#pushregs_
22b6c     09 1F 02 F6 | 	mov	local01, arg01
22b70     0A 21 02 F6 | 	mov	local02, arg02
22b74     01 20 56 F2 | 	cmps	local02, #1 wc
22b78     81 01 00 CF 
22b7c     16 FB 05 C6 |  if_b	mov	result1, ##@LR__5013
22b80     5C 00 90 CD |  if_b	jmp	#LR__3113
22b84     0F 13 02 F6 | 	mov	arg01, local01
22b88     09 23 02 F6 | 	mov	local03, arg01
22b8c     97 06 48 FB | 	callpa	#(@LR__3111-@LR__3110)>>2,fcache_load_ptr_
22b90                 | LR__3110
22b90     11 FB C9 FA | 	rdbyte	result1, local03 wz
22b94     01 22 06 51 |  if_ne	add	local03, #1
22b98     F4 FF 9F 5D |  if_ne	jmp	#LR__3110
22b9c                 | LR__3111
22b9c     09 23 82 F1 | 	sub	local03, arg01
22ba0     11 FB 01 F6 | 	mov	result1, local03
22ba4     10 FB 59 F2 | 	cmps	result1, local02 wcz
22ba8     0F FB 01 E6 |  if_be	mov	result1, local01
22bac     30 00 90 ED |  if_be	jmp	#LR__3113
22bb0     10 13 02 F6 | 	mov	arg01, local02
22bb4     02 12 06 F1 | 	add	arg01, #2
22bb8     E4 1D B0 FD | 	call	#__system___gc_alloc_managed
22bbc     FD 24 0A F6 | 	mov	local04, result1 wz
22bc0     18 00 90 AD |  if_e	jmp	#LR__3112
22bc4     12 13 02 F6 | 	mov	arg01, local04
22bc8     0F 15 02 F6 | 	mov	arg02, local01
22bcc     10 17 02 F6 | 	mov	arg03, local02
22bd0     34 DE BF FD | 	call	#__system____builtin_memmove
22bd4     12 21 02 F1 | 	add	local02, local04
22bd8     10 01 48 FC | 	wrbyte	#0, local02
22bdc                 | LR__3112
22bdc     12 FB 01 F6 | 	mov	result1, local04
22be0                 | LR__3113
22be0     A7 F0 03 F6 | 	mov	ptra, fp
22be4     B2 00 A0 FD | 	call	#popregs_
22be8                 | __system__Left_S_ret
22be8     2D 00 64 FD | 	ret
22bec                 | 
22bec                 | __system__Right_S
22bec     05 4A 05 F6 | 	mov	COUNT_, #5
22bf0     A8 00 A0 FD | 	call	#pushregs_
22bf4     09 1F 02 F6 | 	mov	local01, arg01
22bf8     0A 21 02 F6 | 	mov	local02, arg02
22bfc     01 20 56 F2 | 	cmps	local02, #1 wc
22c00     81 01 00 CF 
22c04     17 FB 05 C6 |  if_b	mov	result1, ##@LR__5014
22c08     64 00 90 CD |  if_b	jmp	#LR__3123
22c0c     0F 13 02 F6 | 	mov	arg01, local01
22c10     09 23 02 F6 | 	mov	local03, arg01
22c14     97 06 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
22c18                 | LR__3120
22c18     11 FB C9 FA | 	rdbyte	result1, local03 wz
22c1c     01 22 06 51 |  if_ne	add	local03, #1
22c20     F4 FF 9F 5D |  if_ne	jmp	#LR__3120
22c24                 | LR__3121
22c24     09 23 82 F1 | 	sub	local03, arg01
22c28     11 FB 01 F6 | 	mov	result1, local03
22c2c     FD 24 02 F6 | 	mov	local04, result1
22c30     10 25 5A F2 | 	cmps	local04, local02 wcz
22c34     0F FB 01 E6 |  if_be	mov	result1, local01
22c38     34 00 90 ED |  if_be	jmp	#LR__3123
22c3c     10 13 02 F6 | 	mov	arg01, local02
22c40     02 12 06 F1 | 	add	arg01, #2
22c44     58 1D B0 FD | 	call	#__system___gc_alloc_managed
22c48     FD 26 0A F6 | 	mov	local05, result1 wz
22c4c     1C 00 90 AD |  if_e	jmp	#LR__3122
22c50     10 25 82 F1 | 	sub	local04, local02
22c54     0F 25 02 F1 | 	add	local04, local01
22c58     01 20 06 F1 | 	add	local02, #1
22c5c     13 13 02 F6 | 	mov	arg01, local05
22c60     12 15 02 F6 | 	mov	arg02, local04
22c64     10 17 02 F6 | 	mov	arg03, local02
22c68     9C DD BF FD | 	call	#__system____builtin_memmove
22c6c                 | LR__3122
22c6c     13 FB 01 F6 | 	mov	result1, local05
22c70                 | LR__3123
22c70     A7 F0 03 F6 | 	mov	ptra, fp
22c74     B2 00 A0 FD | 	call	#popregs_
22c78                 | __system__Right_S_ret
22c78     2D 00 64 FD | 	ret
22c7c                 | 
22c7c                 | __system__Mid_S
22c7c     05 4A 05 F6 | 	mov	COUNT_, #5
22c80     A8 00 A0 FD | 	call	#pushregs_
22c84     09 1F 02 F6 | 	mov	local01, arg01
22c88     0A 21 02 F6 | 	mov	local02, arg02
22c8c     01 16 56 F2 | 	cmps	arg03, #1 wc
22c90     81 01 00 CF 
22c94     18 FB 05 C6 |  if_b	mov	result1, ##@LR__5015
22c98     80 00 90 CD |  if_b	jmp	#LR__3133
22c9c     01 20 86 F1 | 	sub	local02, #1
22ca0     00 20 56 F3 | 	fges	local02, #0 wc
22ca4     0F 13 02 F6 | 	mov	arg01, local01
22ca8     09 23 02 F6 | 	mov	local03, arg01
22cac     97 06 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
22cb0                 | LR__3130
22cb0     11 FB C9 FA | 	rdbyte	result1, local03 wz
22cb4     01 22 06 51 |  if_ne	add	local03, #1
22cb8     F4 FF 9F 5D |  if_ne	jmp	#LR__3130
22cbc                 | LR__3131
22cbc     09 23 82 F1 | 	sub	local03, arg01
22cc0     11 FB 01 F6 | 	mov	result1, local03
22cc4     FD 14 02 F6 | 	mov	arg02, result1
22cc8     10 15 52 F2 | 	cmps	arg02, local02 wc
22ccc     81 01 00 CF 
22cd0     19 FB 05 C6 |  if_b	mov	result1, ##@LR__5016
22cd4     44 00 90 CD |  if_b	jmp	#LR__3133
22cd8     0A 25 02 F6 | 	mov	local04, arg02
22cdc     10 25 82 F1 | 	sub	local04, local02
22ce0     0B 25 5A F2 | 	cmps	local04, arg03 wcz
22ce4     0B 25 02 16 |  if_a	mov	local04, arg03
22ce8     12 13 02 F6 | 	mov	arg01, local04
22cec     02 12 06 F1 | 	add	arg01, #2
22cf0     AC 1C B0 FD | 	call	#__system___gc_alloc_managed
22cf4     FD 26 0A F6 | 	mov	local05, result1 wz
22cf8     1C 00 90 AD |  if_e	jmp	#LR__3132
22cfc     0F 21 02 F1 | 	add	local02, local01
22d00     13 13 02 F6 | 	mov	arg01, local05
22d04     10 15 02 F6 | 	mov	arg02, local02
22d08     12 17 02 F6 | 	mov	arg03, local04
22d0c     F8 DC BF FD | 	call	#__system____builtin_memmove
22d10     13 25 02 F1 | 	add	local04, local05
22d14     12 01 48 FC | 	wrbyte	#0, local04
22d18                 | LR__3132
22d18     13 FB 01 F6 | 	mov	result1, local05
22d1c                 | LR__3133
22d1c     A7 F0 03 F6 | 	mov	ptra, fp
22d20     B2 00 A0 FD | 	call	#popregs_
22d24                 | __system__Mid_S_ret
22d24     2D 00 64 FD | 	ret
22d28                 | 
22d28                 | __system__Chr_S
22d28     01 4A 05 F6 | 	mov	COUNT_, #1
22d2c     A8 00 A0 FD | 	call	#pushregs_
22d30     09 1F 02 F6 | 	mov	local01, arg01
22d34     03 12 06 F6 | 	mov	arg01, #3
22d38     64 1C B0 FD | 	call	#__system___gc_alloc_managed
22d3c     00 FA 4D F2 | 	cmps	result1, #0 wz
22d40     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
22d44     01 FA 05 51 |  if_ne	add	result1, #1
22d48     FD 00 48 5C |  if_ne	wrbyte	#0, result1
22d4c     01 FA 85 51 |  if_ne	sub	result1, #1
22d50     A7 F0 03 F6 | 	mov	ptra, fp
22d54     B2 00 A0 FD | 	call	#popregs_
22d58                 | __system__Chr_S_ret
22d58     2D 00 64 FD | 	ret
22d5c                 | 
22d5c                 | __system__str_S
22d5c     02 4A 05 F6 | 	mov	COUNT_, #2
22d60     A8 00 A0 FD | 	call	#pushregs_
22d64     09 1F 02 F6 | 	mov	local01, arg01
22d68     10 12 06 F6 | 	mov	arg01, #16
22d6c     30 1C B0 FD | 	call	#__system___gc_alloc_managed
22d70     FD 20 0A F6 | 	mov	local02, result1 wz
22d74     30 00 90 AD |  if_e	jmp	#LR__3140
22d78     F8 13 02 F6 | 	mov	arg01, ptra
22d7c     08 F0 07 F1 | 	add	ptra, #8
22d80     09 21 62 FC | 	wrlong	local02, arg01
22d84     04 12 06 F1 | 	add	arg01, #4
22d88     09 01 68 FC | 	wrlong	#0, arg01
22d8c     04 12 86 F1 | 	sub	arg01, #4
22d90     00 A8 04 FF 
22d94     00 12 46 F5 | 	or	arg01, ##156237824
22d98     00 14 06 F6 | 	mov	arg02, #0
22d9c     0F 17 02 F6 | 	mov	arg03, local01
22da0     67 18 06 F6 | 	mov	arg04, #103
22da4     90 EE BF FD | 	call	#__system___fmtfloat
22da8                 | LR__3140
22da8     10 FB 01 F6 | 	mov	result1, local02
22dac     A7 F0 03 F6 | 	mov	ptra, fp
22db0     B2 00 A0 FD | 	call	#popregs_
22db4                 | __system__str_S_ret
22db4     2D 00 64 FD | 	ret
22db8                 | 
22db8                 | __system__Number_S
22db8     08 4A 05 F6 | 	mov	COUNT_, #8
22dbc     A8 00 A0 FD | 	call	#pushregs_
22dc0     09 1F 02 F6 | 	mov	local01, arg01
22dc4     0A 21 0A F6 | 	mov	local02, arg02 wz
22dc8     0B 23 02 F6 | 	mov	local03, arg03
22dcc     3C 00 90 5D |  if_ne	jmp	#LR__3152
22dd0     01 20 06 F6 | 	mov	local02, #1
22dd4     11 25 02 F6 | 	mov	local04, local03
22dd8     01 26 06 F6 | 	mov	local05, #1
22ddc     97 16 48 FB | 	callpa	#(@LR__3151-@LR__3150)>>2,fcache_load_ptr_
22de0                 | LR__3150
22de0     00 28 06 F6 | 	mov	local06, #0
22de4     0F 25 1A F2 | 	cmp	local04, local01 wcz
22de8     01 28 66 E6 |  if_be	neg	local06, #1
22dec     12 27 12 F2 | 	cmp	local05, local04 wc
22df0     15 2B A2 F1 | 	subx	local07, local07
22df4     15 29 CA F7 | 	test	local06, local07 wz
22df8     11 25 02 5D |  if_ne	qmul	local04, local03
22dfc     12 27 02 56 |  if_ne	mov	local05, local04
22e00     01 20 06 51 |  if_ne	add	local02, #1
22e04     18 24 62 5D |  if_ne	getqx	local04
22e08     D4 FF 9F 5D |  if_ne	jmp	#LR__3150
22e0c                 | LR__3151
22e0c                 | LR__3152
22e0c     20 20 36 F3 | 	fle	local02, #32 wc
22e10     10 13 02 F6 | 	mov	arg01, local02
22e14     02 12 06 F1 | 	add	arg01, #2
22e18     84 1B B0 FD | 	call	#__system___gc_alloc_managed
22e1c     FD 28 02 F6 | 	mov	local06, result1
22e20     10 2B 02 F6 | 	mov	local07, local02
22e24     14 2B 02 F1 | 	add	local07, local06
22e28     15 01 48 FC | 	wrbyte	#0, local07
22e2c     97 1A 48 FB | 	callpa	#(@LR__3154-@LR__3153)>>2,fcache_load_ptr_
22e30                 | LR__3153
22e30     01 20 16 F2 | 	cmp	local02, #1 wc
22e34     2C 00 90 CD |  if_b	jmp	#LR__3155
22e38     11 1F 12 FD | 	qdiv	local01, local03
22e3c     01 20 86 F1 | 	sub	local02, #1
22e40     10 2B 02 F6 | 	mov	local07, local02
22e44     14 2B 02 F1 | 	add	local07, local06
22e48     19 2C 62 FD | 	getqy	local08
22e4c     0A 2C 16 F2 | 	cmp	local08, #10 wc
22e50     30 2C 06 C1 |  if_b	add	local08, #48
22e54     37 2C 06 31 |  if_ae	add	local08, #55
22e58     15 2D 42 FC | 	wrbyte	local08, local07
22e5c     18 1E 62 FD | 	getqx	local01
22e60     CC FF 9F FD | 	jmp	#LR__3153
22e64                 | LR__3154
22e64                 | LR__3155
22e64     14 FB 01 F6 | 	mov	result1, local06
22e68     A7 F0 03 F6 | 	mov	ptra, fp
22e6c     B2 00 A0 FD | 	call	#popregs_
22e70                 | __system__Number_S_ret
22e70     2D 00 64 FD | 	ret
22e74                 | 
22e74                 | __system__LCase_S
22e74     07 4A 05 F6 | 	mov	COUNT_, #7
22e78     A8 00 A0 FD | 	call	#pushregs_
22e7c     09 1F 02 F6 | 	mov	local01, arg01
22e80     09 21 02 F6 | 	mov	local02, arg01
22e84     97 06 48 FB | 	callpa	#(@LR__3161-@LR__3160)>>2,fcache_load_ptr_
22e88                 | LR__3160
22e88     10 FB C9 FA | 	rdbyte	result1, local02 wz
22e8c     01 20 06 51 |  if_ne	add	local02, #1
22e90     F4 FF 9F 5D |  if_ne	jmp	#LR__3160
22e94                 | LR__3161
22e94     09 21 82 F1 | 	sub	local02, arg01
22e98     10 FB 01 F6 | 	mov	result1, local02
22e9c     FD 20 0A F6 | 	mov	local02, result1 wz
22ea0     81 01 00 AF 
22ea4     1A FB 05 A6 |  if_e	mov	result1, ##@LR__5017
22ea8     7C 00 90 AD |  if_e	jmp	#LR__3167
22eac     10 13 02 F6 | 	mov	arg01, local02
22eb0     02 12 06 F1 | 	add	arg01, #2
22eb4     E8 1A B0 FD | 	call	#__system___gc_alloc_managed
22eb8     FD 22 0A F6 | 	mov	local03, result1 wz
22ebc     64 00 90 AD |  if_e	jmp	#LR__3166
22ec0     01 24 66 F6 | 	neg	local04, #1
22ec4     97 26 48 FB | 	callpa	#(@LR__3165-@LR__3162)>>2,fcache_load_ptr_
22ec8                 | LR__3162
22ec8     01 24 06 F1 | 	add	local04, #1
22ecc     12 27 02 F6 | 	mov	local05, local04
22ed0     0F 27 02 F1 | 	add	local05, local01
22ed4     13 29 C2 FA | 	rdbyte	local06, local05
22ed8     41 28 56 F2 | 	cmps	local06, #65 wc
22edc     18 00 90 CD |  if_b	jmp	#LR__3163
22ee0     5B 28 56 F2 | 	cmps	local06, #91 wc
22ee4     12 2B 02 C6 |  if_b	mov	local07, local04
22ee8     11 2B 02 C1 |  if_b	add	local07, local03
22eec     20 28 06 C1 |  if_b	add	local06, #32
22ef0     15 29 42 CC |  if_b	wrbyte	local06, local07
22ef4     0C 00 90 CD |  if_b	jmp	#LR__3164
22ef8                 | LR__3163
22ef8     12 2B 02 F6 | 	mov	local07, local04
22efc     11 2B 02 F1 | 	add	local07, local03
22f00     15 29 42 FC | 	wrbyte	local06, local07
22f04                 | LR__3164
22f04     10 29 02 F6 | 	mov	local06, local02
22f08     01 28 86 F1 | 	sub	local06, #1
22f0c     14 25 0A F2 | 	cmp	local04, local06 wz
22f10     B4 FF 9F 5D |  if_ne	jmp	#LR__3162
22f14                 | LR__3165
22f14     11 21 02 F1 | 	add	local02, local03
22f18     10 01 48 FC | 	wrbyte	#0, local02
22f1c     11 FB 01 F6 | 	mov	result1, local03
22f20     04 00 90 FD | 	jmp	#LR__3167
22f24                 | LR__3166
22f24     11 FB 01 F6 | 	mov	result1, local03
22f28                 | LR__3167
22f28     A7 F0 03 F6 | 	mov	ptra, fp
22f2c     B2 00 A0 FD | 	call	#popregs_
22f30                 | __system__LCase_S_ret
22f30     2D 00 64 FD | 	ret
22f34                 | 
22f34                 | __system__LTrim_S
22f34     05 4A 05 F6 | 	mov	COUNT_, #5
22f38     A8 00 A0 FD | 	call	#pushregs_
22f3c     09 1F 02 F6 | 	mov	local01, arg01
22f40     09 21 02 F6 | 	mov	local02, arg01
22f44     97 06 48 FB | 	callpa	#(@LR__3171-@LR__3170)>>2,fcache_load_ptr_
22f48                 | LR__3170
22f48     10 FB C9 FA | 	rdbyte	result1, local02 wz
22f4c     01 20 06 51 |  if_ne	add	local02, #1
22f50     F4 FF 9F 5D |  if_ne	jmp	#LR__3170
22f54                 | LR__3171
22f54     09 21 82 F1 | 	sub	local02, arg01
22f58     10 FB 01 F6 | 	mov	result1, local02
22f5c     FD 20 0A F6 | 	mov	local02, result1 wz
22f60     81 01 00 AF 
22f64     1B FB 05 A6 |  if_e	mov	result1, ##@LR__5018
22f68     7C 00 90 AD |  if_e	jmp	#LR__3176
22f6c     00 22 06 F6 | 	mov	local03, #0
22f70     10 25 02 F6 | 	mov	local04, local02
22f74                 | LR__3172
22f74     12 23 52 F2 | 	cmps	local03, local04 wc
22f78     68 00 90 3D |  if_ae	jmp	#LR__3175
22f7c     11 17 02 F6 | 	mov	arg03, local03
22f80     0F 17 02 F1 | 	add	arg03, local01
22f84     0B 17 C2 FA | 	rdbyte	arg03, arg03
22f88     20 16 0E F2 | 	cmp	arg03, #32 wz
22f8c     4C 00 90 AD |  if_e	jmp	#LR__3174
22f90     10 13 02 F6 | 	mov	arg01, local02
22f94     11 13 82 F1 | 	sub	arg01, local03
22f98     02 12 06 F1 | 	add	arg01, #2
22f9c     00 1A B0 FD | 	call	#__system___gc_alloc_managed
22fa0     FD 26 0A F6 | 	mov	local05, result1 wz
22fa4     2C 00 90 AD |  if_e	jmp	#LR__3173
22fa8     11 15 02 F6 | 	mov	arg02, local03
22fac     0F 15 02 F1 | 	add	arg02, local01
22fb0     10 17 02 F6 | 	mov	arg03, local02
22fb4     11 17 82 F1 | 	sub	arg03, local03
22fb8     13 13 02 F6 | 	mov	arg01, local05
22fbc     48 DA BF FD | 	call	#__system____builtin_memmove
22fc0     11 21 82 F1 | 	sub	local02, local03
22fc4     13 21 02 F1 | 	add	local02, local05
22fc8     10 01 48 FC | 	wrbyte	#0, local02
22fcc     13 FB 01 F6 | 	mov	result1, local05
22fd0     14 00 90 FD | 	jmp	#LR__3176
22fd4                 | LR__3173
22fd4     13 FB 01 F6 | 	mov	result1, local05
22fd8     0C 00 90 FD | 	jmp	#LR__3176
22fdc                 | LR__3174
22fdc     01 22 06 F1 | 	add	local03, #1
22fe0     90 FF 9F FD | 	jmp	#LR__3172
22fe4                 | LR__3175
22fe4     0F FB 01 F6 | 	mov	result1, local01
22fe8                 | LR__3176
22fe8     A7 F0 03 F6 | 	mov	ptra, fp
22fec     B2 00 A0 FD | 	call	#popregs_
22ff0                 | __system__LTrim_S_ret
22ff0     2D 00 64 FD | 	ret
22ff4                 | 
22ff4                 | __system__RTrim_S
22ff4     04 4A 05 F6 | 	mov	COUNT_, #4
22ff8     A8 00 A0 FD | 	call	#pushregs_
22ffc     09 1F 02 F6 | 	mov	local01, arg01
23000     09 21 02 F6 | 	mov	local02, arg01
23004     97 06 48 FB | 	callpa	#(@LR__3181-@LR__3180)>>2,fcache_load_ptr_
23008                 | LR__3180
23008     10 FB C9 FA | 	rdbyte	result1, local02 wz
2300c     01 20 06 51 |  if_ne	add	local02, #1
23010     F4 FF 9F 5D |  if_ne	jmp	#LR__3180
23014                 | LR__3181
23014     09 21 82 F1 | 	sub	local02, arg01
23018     10 FB 01 F6 | 	mov	result1, local02
2301c     FD 20 0A F6 | 	mov	local02, result1 wz
23020     81 01 00 AF 
23024     1C FB 05 A6 |  if_e	mov	result1, ##@LR__5019
23028     74 00 90 AD |  if_e	jmp	#LR__3185
2302c     10 23 02 F6 | 	mov	local03, local02
23030     01 22 86 F1 | 	sub	local03, #1
23034                 | LR__3182
23034     11 15 02 F6 | 	mov	arg02, local03
23038     0F 15 02 F1 | 	add	arg02, local01
2303c     0A 21 C2 FA | 	rdbyte	local02, arg02
23040     20 20 0E F2 | 	cmp	local02, #32 wz
23044     44 00 90 AD |  if_e	jmp	#LR__3184
23048     11 13 02 F6 | 	mov	arg01, local03
2304c     02 12 06 F1 | 	add	arg01, #2
23050     4C 19 B0 FD | 	call	#__system___gc_alloc_managed
23054     FD 24 0A F6 | 	mov	local04, result1 wz
23058     28 00 90 AD |  if_e	jmp	#LR__3183
2305c     11 17 02 F6 | 	mov	arg03, local03
23060     01 16 06 F1 | 	add	arg03, #1
23064     12 13 02 F6 | 	mov	arg01, local04
23068     0F 15 02 F6 | 	mov	arg02, local01
2306c     98 D9 BF FD | 	call	#__system____builtin_memmove
23070     01 22 06 F1 | 	add	local03, #1
23074     12 23 02 F1 | 	add	local03, local04
23078     11 01 48 FC | 	wrbyte	#0, local03
2307c     12 FB 01 F6 | 	mov	result1, local04
23080     1C 00 90 FD | 	jmp	#LR__3185
23084                 | LR__3183
23084     12 FB 01 F6 | 	mov	result1, local04
23088     14 00 90 FD | 	jmp	#LR__3185
2308c                 | LR__3184
2308c     01 22 86 F1 | 	sub	local03, #1
23090     00 22 56 F2 | 	cmps	local03, #0 wc
23094     9C FF 9F 3D |  if_ae	jmp	#LR__3182
23098     81 01 00 FF 
2309c     1D FB 05 F6 | 	mov	result1, ##@LR__5020
230a0                 | LR__3185
230a0     A7 F0 03 F6 | 	mov	ptra, fp
230a4     B2 00 A0 FD | 	call	#popregs_
230a8                 | __system__RTrim_S_ret
230a8     2D 00 64 FD | 	ret
230ac                 | 
230ac                 | __system__Instr
230ac     07 4A 05 F6 | 	mov	COUNT_, #7
230b0     A8 00 A0 FD | 	call	#pushregs_
230b4     09 1F 02 F6 | 	mov	local01, arg01
230b8     0A 21 02 F6 | 	mov	local02, arg02
230bc     0B 23 02 F6 | 	mov	local03, arg03
230c0     11 13 02 F6 | 	mov	arg01, local03
230c4     09 25 02 F6 | 	mov	local04, arg01
230c8     97 06 48 FB | 	callpa	#(@LR__3191-@LR__3190)>>2,fcache_load_ptr_
230cc                 | LR__3190
230cc     12 FB C9 FA | 	rdbyte	result1, local04 wz
230d0     01 24 06 51 |  if_ne	add	local04, #1
230d4     F4 FF 9F 5D |  if_ne	jmp	#LR__3190
230d8                 | LR__3191
230d8     09 25 82 F1 | 	sub	local04, arg01
230dc     12 27 02 F6 | 	mov	local05, local04
230e0     10 13 02 F6 | 	mov	arg01, local02
230e4     09 25 02 F6 | 	mov	local04, arg01
230e8     97 06 48 FB | 	callpa	#(@LR__3193-@LR__3192)>>2,fcache_load_ptr_
230ec                 | LR__3192
230ec     12 FB C9 FA | 	rdbyte	result1, local04 wz
230f0     01 24 06 51 |  if_ne	add	local04, #1
230f4     F4 FF 9F 5D |  if_ne	jmp	#LR__3192
230f8                 | LR__3193
230f8     09 25 82 F1 | 	sub	local04, arg01
230fc     12 FB 01 F6 | 	mov	result1, local04
23100     FD 18 0A F6 | 	mov	arg04, result1 wz
23104     00 FA 05 A6 |  if_e	mov	result1, #0
23108     98 00 90 AD |  if_e	jmp	#LR__3197
2310c     00 26 0E F2 | 	cmp	local05, #0 wz
23110     00 FA 05 A6 |  if_e	mov	result1, #0
23114     8C 00 90 AD |  if_e	jmp	#LR__3197
23118     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
2311c     00 FA 05 16 |  if_a	mov	result1, #0
23120     80 00 90 1D |  if_a	jmp	#LR__3197
23124     01 1E 56 F2 | 	cmps	local01, #1 wc
23128     01 1E 06 C6 |  if_b	mov	local01, #1
2312c     11 29 C2 FA | 	rdbyte	local06, local03
23130     01 26 0E F2 | 	cmp	local05, #1 wz
23134     18 00 90 5D |  if_ne	jmp	#LR__3194
23138     10 13 02 F6 | 	mov	arg01, local02
2313c     14 15 02 F6 | 	mov	arg02, local06
23140     0F 17 02 F6 | 	mov	arg03, local01
23144     00 18 06 F6 | 	mov	arg04, #0
23148     2C 34 B0 FD | 	call	#__system____ScanForChar
2314c     54 00 90 FD | 	jmp	#LR__3197
23150                 | LR__3194
23150     0F 2B 02 F6 | 	mov	local07, local01
23154                 | LR__3195
23154     10 13 02 F6 | 	mov	arg01, local02
23158     14 15 02 F6 | 	mov	arg02, local06
2315c     15 17 02 F6 | 	mov	arg03, local07
23160     00 18 06 F6 | 	mov	arg04, #0
23164     10 34 B0 FD | 	call	#__system____ScanForChar
23168     FD 2A 0A F6 | 	mov	local07, result1 wz
2316c     30 00 90 AD |  if_e	jmp	#LR__3196
23170     13 17 02 F6 | 	mov	arg03, local05
23174     10 13 02 F6 | 	mov	arg01, local02
23178     15 15 02 F6 | 	mov	arg02, local07
2317c     FC FA BF FD | 	call	#__system__Mid_S
23180     FD 12 02 F6 | 	mov	arg01, result1
23184     11 15 02 F6 | 	mov	arg02, local03
23188     84 D9 BF FD | 	call	#__system___string_cmp
2318c     00 FA 0D F2 | 	cmp	result1, #0 wz
23190     15 FB 01 A6 |  if_e	mov	result1, local07
23194     0C 00 90 AD |  if_e	jmp	#LR__3197
23198     13 2B 02 F1 | 	add	local07, local05
2319c     B4 FF 9F FD | 	jmp	#LR__3195
231a0                 | LR__3196
231a0     00 FA 05 F6 | 	mov	result1, #0
231a4                 | LR__3197
231a4     A7 F0 03 F6 | 	mov	ptra, fp
231a8     B2 00 A0 FD | 	call	#popregs_
231ac                 | __system__Instr_ret
231ac     2D 00 64 FD | 	ret
231b0                 | 
231b0                 | __system___strerror
231b0     00 12 56 F2 | 	cmps	arg01, #0 wc
231b4     08 00 90 CD |  if_b	jmp	#LR__3200
231b8     1A 12 56 F2 | 	cmps	arg01, #26 wc
231bc     04 00 90 CD |  if_b	jmp	#LR__3201
231c0                 | LR__3200
231c0     19 12 06 F6 | 	mov	arg01, #25
231c4                 | LR__3201
231c4     02 12 66 F0 | 	shl	arg01, #2
231c8     01 00 00 FF 
231cc     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
231d0     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
231d4     09 FB 01 FB | 	rdlong	result1, arg01
231d8     01 00 00 FF 
231dc     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
231e0                 | __system___strerror_ret
231e0     2D 00 64 FD | 	ret
231e4                 | 
231e4                 | __system___int64_shl
231e4     20 16 CE F7 | 	test	arg03, #32 wz
231e8     09 15 02 56 |  if_ne	mov	arg02, arg01
231ec     00 12 06 56 |  if_ne	mov	arg01, #0
231f0     1F 16 CE F7 | 	test	arg03, #31 wz
231f4     18 00 90 AD |  if_e	jmp	#LR__3210
231f8     0B 15 62 F0 | 	shl	arg02, arg03
231fc     09 FB 01 F6 | 	mov	result1, arg01
23200     0B FD 61 F6 | 	neg	result2, arg03
23204     FE FA 41 F0 | 	shr	result1, result2
23208     FD 14 42 F5 | 	or	arg02, result1
2320c     0B 13 62 F0 | 	shl	arg01, arg03
23210                 | LR__3210
23210     0A FD 01 F6 | 	mov	result2, arg02
23214     09 FB 01 F6 | 	mov	result1, arg01
23218                 | __system___int64_shl_ret
23218     2D 00 64 FD | 	ret
2321c                 | 
2321c                 | __system___usepins
2321c     14 E6 05 F1 | 	add	ptr___system__dat__, #20
23220     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
23224     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
23228     00 13 CA F7 | 	test	arg01, _var01 wz
2322c     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
23230     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
23234     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
23238     01 15 CA A7 |  if_e	test	arg02, _var02 wz
2323c     00 FA 05 56 |  if_ne	mov	result1, #0
23240     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
23244     14 E6 05 F1 | 	add	ptr___system__dat__, #20
23248     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
2324c     09 03 42 F5 | 	or	_var02, arg01
23250     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
23254     04 E6 05 F1 | 	add	ptr___system__dat__, #4
23258     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
2325c     0A 03 42 F5 | 	or	_var02, arg02
23260     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
23264     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
23268     01 FA 65 F6 | 	neg	result1, #1
2326c                 | __system___usepins_ret
2326c     2D 00 64 FD | 	ret
23270                 | 
23270                 | __system___freepins
23270     14 E6 05 F1 | 	add	ptr___system__dat__, #20
23274     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
23278     09 01 22 F5 | 	andn	_var01, arg01
2327c     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
23280     04 E6 05 F1 | 	add	ptr___system__dat__, #4
23284     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
23288     0A 01 22 F5 | 	andn	_var01, arg02
2328c     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
23290     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
23294                 | __system___freepins_ret
23294     2D 00 64 FD | 	ret
23298                 | 
23298                 | __system___float_fromuns
23298     09 17 0A F6 | 	mov	arg03, arg01 wz
2329c     0B FB 01 A6 |  if_e	mov	result1, arg03
232a0     24 00 90 AD |  if_e	jmp	#LR__3220
232a4     0B 15 92 F7 | 	encod	arg02, arg03 wc
232a8     01 14 06 C1 |  if_b	add	arg02, #1
232ac     01 14 86 F1 | 	sub	arg02, #1
232b0     1F 12 06 F6 | 	mov	arg01, #31
232b4     0A 13 82 F1 | 	sub	arg01, arg02
232b8     09 17 62 F0 | 	shl	arg03, arg01
232bc     02 16 46 F0 | 	shr	arg03, #2
232c0     00 12 06 F6 | 	mov	arg01, #0
232c4     4C 09 B0 FD | 	call	#__system___float_Pack
232c8                 | LR__3220
232c8                 | __system___float_fromuns_ret
232c8     2D 00 64 FD | 	ret
232cc                 | 
232cc                 | __system___float_add
232cc     0F 4A 05 F6 | 	mov	COUNT_, #15
232d0     A8 00 A0 FD | 	call	#pushregs_
232d4     09 1F 02 F6 | 	mov	local01, arg01
232d8     0A 21 02 F6 | 	mov	local02, arg02
232dc     00 22 06 F6 | 	mov	local03, #0
232e0     0F 25 02 F6 | 	mov	local04, local01
232e4     12 27 02 F6 | 	mov	local05, local04
232e8     16 26 46 F7 | 	zerox	local05, #22
232ec     12 29 02 F6 | 	mov	local06, local04
232f0     01 28 66 F0 | 	shl	local06, #1
232f4     18 28 46 F0 | 	shr	local06, #24
232f8     1F 24 46 F0 | 	shr	local04, #31
232fc     10 13 02 F6 | 	mov	arg01, local02
23300     09 FB 01 F6 | 	mov	result1, arg01
23304     FD 2A 02 F6 | 	mov	local07, result1
23308     15 2D 02 F6 | 	mov	local08, local07
2330c     16 2C 46 F7 | 	zerox	local08, #22
23310     15 2F 02 F6 | 	mov	local09, local07
23314     01 2E 66 F0 | 	shl	local09, #1
23318     18 2E 46 F0 | 	shr	local09, #24
2331c     17 31 02 F6 | 	mov	local10, local09
23320     1F 2A 46 F0 | 	shr	local07, #31
23324     00 32 06 F6 | 	mov	local11, #0
23328     00 34 06 F6 | 	mov	local12, #0
2332c     18 29 12 F2 | 	cmp	local06, local10 wc
23330     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
23334     2C 00 90 1D |  if_a	jmp	#LR__3230
23338     16 27 12 32 |  if_ae	cmp	local05, local08 wc
2333c     24 00 90 3D |  if_ae	jmp	#LR__3230
23340     13 37 02 F6 | 	mov	local13, local05
23344     16 27 02 F6 | 	mov	local05, local08
23348     1B 2D 02 F6 | 	mov	local08, local13
2334c     14 37 02 F6 | 	mov	local13, local06
23350     18 29 02 F6 | 	mov	local06, local10
23354     1B 31 02 F6 | 	mov	local10, local13
23358     12 37 02 F6 | 	mov	local13, local04
2335c     15 25 02 F6 | 	mov	local04, local07
23360     1B 2B 02 F6 | 	mov	local07, local13
23364                 | LR__3230
23364     FF 28 0E F2 | 	cmp	local06, #255 wz
23368     70 01 90 AD |  if_e	jmp	#LR__3245
2336c     00 28 0E F2 | 	cmp	local06, #0 wz
23370     AC 01 90 AD |  if_e	jmp	#LR__3247
23374     17 26 26 F4 | 	bith	local05, #23
23378                 | LR__3231
23378     00 30 0E F2 | 	cmp	local10, #0 wz
2337c     F0 01 90 AD |  if_e	jmp	#LR__3251
23380     17 2C 26 F4 | 	bith	local08, #23
23384                 | LR__3232
23384     7F 28 86 F1 | 	sub	local06, #127
23388     7F 30 86 F1 | 	sub	local10, #127
2338c     14 39 02 F6 | 	mov	local14, local06
23390     18 39 82 F1 | 	sub	local14, local10
23394     97 14 48 FB | 	callpa	#(@LR__3234-@LR__3233)>>2,fcache_load_ptr_
23398                 | LR__3233
23398     20 38 56 F2 | 	cmps	local14, #32 wc
2339c     20 00 90 CD |  if_b	jmp	#LR__3235
233a0     16 2F 02 F6 | 	mov	local09, local08
233a4     00 32 0E F2 | 	cmp	local11, #0 wz
233a8     6F 32 62 FD | 	wrnz	local11
233ac     19 2F 42 F5 | 	or	local09, local11
233b0     17 33 02 F6 | 	mov	local11, local09
233b4     00 2C 06 F6 | 	mov	local08, #0
233b8     20 38 86 F1 | 	sub	local14, #32
233bc     D8 FF 9F FD | 	jmp	#LR__3233
233c0                 | LR__3234
233c0                 | LR__3235
233c0     00 38 0E F2 | 	cmp	local14, #0 wz
233c4     38 00 90 AD |  if_e	jmp	#LR__3236
233c8     16 37 02 F6 | 	mov	local13, local08
233cc     20 30 06 F6 | 	mov	local10, #32
233d0     1C 31 82 F1 | 	sub	local10, local14
233d4     18 37 62 F0 | 	shl	local13, local10
233d8     19 31 02 F6 | 	mov	local10, local11
233dc     20 2E 06 F6 | 	mov	local09, #32
233e0     1C 2F 82 F1 | 	sub	local09, local14
233e4     17 31 6A F0 | 	shl	local10, local09 wz
233e8     1C 33 42 F0 | 	shr	local11, local14
233ec     1C 2D 42 F0 | 	shr	local08, local14
233f0     1B 33 42 F5 | 	or	local11, local13
233f4     00 3A 06 F6 | 	mov	local15, #0
233f8     01 3A 06 56 |  if_ne	mov	local15, #1
233fc     1D 33 42 F5 | 	or	local11, local15
23400                 | LR__3236
23400     12 3B 02 F6 | 	mov	local15, local04
23404     15 3B 62 F5 | 	xor	local15, local07
23408     01 3A CE F7 | 	test	local15, #1 wz
2340c     18 00 90 AD |  if_e	jmp	#LR__3237
23410     16 2D 22 F6 | 	not	local08, local08
23414     19 33 22 F6 | 	not	local11, local11
23418     01 32 0E F1 | 	add	local11, #1 wz
2341c     00 3A 06 F6 | 	mov	local15, #0
23420     01 3A 06 A6 |  if_e	mov	local15, #1
23424     1D 2D 02 F1 | 	add	local08, local15
23428                 | LR__3237
23428     19 35 12 F1 | 	add	local12, local11 wc
2342c     16 27 22 F1 | 	addx	local05, local08
23430     00 26 56 F2 | 	cmps	local05, #0 wc
23434     1C 00 90 3D |  if_ae	jmp	#LR__3238
23438     01 24 66 F5 | 	xor	local04, #1
2343c     13 27 22 F6 | 	not	local05, local05
23440     1A 35 22 F6 | 	not	local12, local12
23444     01 34 0E F1 | 	add	local12, #1 wz
23448     00 3A 06 F6 | 	mov	local15, #0
2344c     01 3A 06 A6 |  if_e	mov	local15, #1
23450     1D 27 02 F1 | 	add	local05, local15
23454                 | LR__3238
23454     00 80 00 FF 
23458     00 26 16 F2 | 	cmp	local05, ##16777216 wc
2345c     28 00 90 CD |  if_b	jmp	#LR__3239
23460     01 28 06 F1 | 	add	local06, #1
23464     1A 39 02 F6 | 	mov	local14, local12
23468     01 38 06 F5 | 	and	local14, #1
2346c     01 34 46 F0 | 	shr	local12, #1
23470     13 3B 02 F6 | 	mov	local15, local05
23474     1F 3A 66 F0 | 	shl	local15, #31
23478     1D 35 42 F5 | 	or	local12, local15
2347c     1C 35 42 F5 | 	or	local12, local14
23480     01 26 46 F0 | 	shr	local05, #1
23484     3C 00 90 FD | 	jmp	#LR__3244
23488                 | LR__3239
23488     00 40 00 FF 
2348c     00 26 16 F2 | 	cmp	local05, ##8388608 wc
23490     30 00 90 3D |  if_ae	jmp	#LR__3243
23494     00 26 0E F2 | 	cmp	local05, #0 wz
23498     00 34 0E A2 |  if_e	cmp	local12, #0 wz
2349c     08 24 46 A5 |  if_e	or	local04, #8
234a0     01 24 26 A5 |  if_e	andn	local04, #1
234a4     1C 00 90 AD |  if_e	jmp	#LR__3242
234a8                 | LR__3240
234a8     00 40 00 FF 
234ac     00 26 16 F2 | 	cmp	local05, ##8388608 wc
234b0     10 00 90 3D |  if_ae	jmp	#LR__3241
234b4     1A 35 12 F1 | 	add	local12, local12 wc
234b8     13 27 22 F1 | 	addx	local05, local05
234bc     01 28 86 F1 | 	sub	local06, #1
234c0     E4 FF 9F FD | 	jmp	#LR__3240
234c4                 | LR__3241
234c4                 | LR__3242
234c4                 | LR__3243
234c4                 | LR__3244
234c4     13 13 02 F6 | 	mov	arg01, local05
234c8     1A 15 02 F6 | 	mov	arg02, local12
234cc     14 17 02 F6 | 	mov	arg03, local06
234d0     12 19 02 F6 | 	mov	arg04, local04
234d4     E4 34 B0 FD | 	call	#__system__pack_0606
234d8     DC 00 90 FD | 	jmp	#LR__3255
234dc                 | LR__3245
234dc     FF 30 0E F2 | 	cmp	local10, #255 wz
234e0     10 00 90 5D |  if_ne	jmp	#LR__3246
234e4     12 2B 0A F2 | 	cmp	local07, local04 wz
234e8     00 F8 3F 5F 
234ec     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
234f0     C4 00 90 5D |  if_ne	jmp	#LR__3255
234f4                 | LR__3246
234f4     00 26 0E F2 | 	cmp	local05, #0 wz
234f8     00 F8 3F 5F 
234fc     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
23500     B4 00 90 5D |  if_ne	jmp	#LR__3255
23504     1A 15 02 F6 | 	mov	arg02, local12
23508     14 17 02 F6 | 	mov	arg03, local06
2350c     12 19 02 F6 | 	mov	arg04, local04
23510     02 18 46 F5 | 	or	arg04, #2
23514     13 13 02 F6 | 	mov	arg01, local05
23518     A0 34 B0 FD | 	call	#__system__pack_0606
2351c     98 00 90 FD | 	jmp	#LR__3255
23520                 | LR__3247
23520     00 26 0E F2 | 	cmp	local05, #0 wz
23524     28 00 90 AD |  if_e	jmp	#LR__3250
23528     01 26 66 F0 | 	shl	local05, #1
2352c     97 0E 48 FB | 	callpa	#(@LR__3249-@LR__3248)>>2,fcache_load_ptr_
23530                 | LR__3248
23530     00 40 00 FF 
23534     00 26 16 F2 | 	cmp	local05, ##8388608 wc
23538     14 3B 02 C6 |  if_b	mov	local15, local06
2353c     01 3A 86 C1 |  if_b	sub	local15, #1
23540     1D 29 02 C6 |  if_b	mov	local06, local15
23544     01 26 66 C0 |  if_b	shl	local05, #1
23548     E4 FF 9F CD |  if_b	jmp	#LR__3248
2354c                 | LR__3249
2354c     28 FE 9F FD | 	jmp	#LR__3231
23550                 | LR__3250
23550     15 25 02 F5 | 	and	local04, local07
23554     12 19 02 F6 | 	mov	arg04, local04
23558     08 18 46 F5 | 	or	arg04, #8
2355c     00 12 06 F6 | 	mov	arg01, #0
23560     00 14 06 F6 | 	mov	arg02, #0
23564     00 16 06 F6 | 	mov	arg03, #0
23568     50 34 B0 FD | 	call	#__system__pack_0606
2356c     48 00 90 FD | 	jmp	#LR__3255
23570                 | LR__3251
23570     00 2C 0E F2 | 	cmp	local08, #0 wz
23574     28 00 90 AD |  if_e	jmp	#LR__3254
23578     01 2C 66 F0 | 	shl	local08, #1
2357c     97 0E 48 FB | 	callpa	#(@LR__3253-@LR__3252)>>2,fcache_load_ptr_
23580                 | LR__3252
23580     00 40 00 FF 
23584     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
23588     18 3B 02 C6 |  if_b	mov	local15, local10
2358c     01 3A 86 C1 |  if_b	sub	local15, #1
23590     1D 31 02 C6 |  if_b	mov	local10, local15
23594     01 2C 66 C0 |  if_b	shl	local08, #1
23598     E4 FF 9F CD |  if_b	jmp	#LR__3252
2359c                 | LR__3253
2359c     E4 FD 9F FD | 	jmp	#LR__3232
235a0                 | LR__3254
235a0     7F 28 86 F1 | 	sub	local06, #127
235a4     13 13 02 F6 | 	mov	arg01, local05
235a8     1A 15 02 F6 | 	mov	arg02, local12
235ac     14 17 02 F6 | 	mov	arg03, local06
235b0     12 19 02 F6 | 	mov	arg04, local04
235b4     04 34 B0 FD | 	call	#__system__pack_0606
235b8                 | LR__3255
235b8     A7 F0 03 F6 | 	mov	ptra, fp
235bc     B2 00 A0 FD | 	call	#popregs_
235c0                 | __system___float_add_ret
235c0     2D 00 64 FD | 	ret
235c4                 | 
235c4                 | __system___float_sqrt
235c4     04 4A 05 F6 | 	mov	COUNT_, #4
235c8     A8 00 A0 FD | 	call	#pushregs_
235cc     09 1F 02 F6 | 	mov	local01, arg01
235d0     09 FB 01 F6 | 	mov	result1, arg01
235d4     FD 20 02 F6 | 	mov	local02, result1
235d8     10 23 02 F6 | 	mov	local03, local02
235dc     16 22 46 F7 | 	zerox	local03, #22
235e0     10 25 02 F6 | 	mov	local04, local02
235e4     01 24 66 F0 | 	shl	local04, #1
235e8     18 24 4E F0 | 	shr	local04, #24 wz
235ec     1F 20 46 F0 | 	shr	local02, #31
235f0     70 00 90 AD |  if_e	jmp	#LR__3261
235f4     17 22 26 F4 | 	bith	local03, #23
235f8                 | LR__3260
235f8     00 20 0E F2 | 	cmp	local02, #0 wz
235fc     00 F8 3F 5F 
23600     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
23604     88 00 90 5D |  if_ne	jmp	#LR__3264
23608     FF 24 0E F2 | 	cmp	local04, #255 wz
2360c     0F FB 01 A6 |  if_e	mov	result1, local01
23610     7C 00 90 AD |  if_e	jmp	#LR__3264
23614     7F 24 86 F1 | 	sub	local04, #127
23618     01 24 CE F7 | 	test	local04, #1 wz
2361c     01 22 66 50 |  if_ne	shl	local03, #1
23620     05 22 66 F0 | 	shl	local03, #5
23624     11 01 38 FD | 	qsqrt	#0, local03
23628     01 24 86 51 |  if_ne	sub	local04, #1
2362c     12 25 52 F6 | 	abs	local04, local04 wc
23630     01 24 46 F0 | 	shr	local04, #1
23634     12 17 82 F6 | 	negc	arg03, local04
23638     10 19 02 F6 | 	mov	arg04, local02
2363c     18 12 62 FD | 	getqx	arg01
23640     09 15 02 F6 | 	mov	arg02, arg01
23644     19 14 66 F0 | 	shl	arg02, #25
23648     07 12 46 F0 | 	shr	arg01, #7
2364c     00 80 00 FF 
23650     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
23654     01 16 06 31 |  if_ae	add	arg03, #1
23658     01 12 46 30 |  if_ae	shr	arg01, #1
2365c     5C 33 B0 FD | 	call	#__system__pack_0606
23660     2C 00 90 FD | 	jmp	#LR__3264
23664                 | LR__3261
23664     00 22 0E F2 | 	cmp	local03, #0 wz
23668     0F FB 01 A6 |  if_e	mov	result1, local01
2366c     20 00 90 AD |  if_e	jmp	#LR__3264
23670     01 22 66 F0 | 	shl	local03, #1
23674     97 0A 48 FB | 	callpa	#(@LR__3263-@LR__3262)>>2,fcache_load_ptr_
23678                 | LR__3262
23678     00 40 00 FF 
2367c     00 22 16 F2 | 	cmp	local03, ##8388608 wc
23680     01 24 86 C1 |  if_b	sub	local04, #1
23684     01 22 66 C0 |  if_b	shl	local03, #1
23688     EC FF 9F CD |  if_b	jmp	#LR__3262
2368c                 | LR__3263
2368c     68 FF 9F FD | 	jmp	#LR__3260
23690                 | LR__3264
23690     A7 F0 03 F6 | 	mov	ptra, fp
23694     B2 00 A0 FD | 	call	#popregs_
23698                 | __system___float_sqrt_ret
23698     2D 00 64 FD | 	ret
2369c                 | 
2369c                 | __system___float_mul
2369c     0B 4A 05 F6 | 	mov	COUNT_, #11
236a0     A8 00 A0 FD | 	call	#pushregs_
236a4     09 1F 02 F6 | 	mov	local01, arg01
236a8     0A 21 02 F6 | 	mov	local02, arg02
236ac     0F 23 02 F6 | 	mov	local03, local01
236b0     11 25 02 F6 | 	mov	local04, local03
236b4     16 24 46 F7 | 	zerox	local04, #22
236b8     11 27 02 F6 | 	mov	local05, local03
236bc     01 26 66 F0 | 	shl	local05, #1
236c0     18 26 46 F0 | 	shr	local05, #24
236c4     1F 22 46 F0 | 	shr	local03, #31
236c8     10 FB 01 F6 | 	mov	result1, local02
236cc     FD 28 02 F6 | 	mov	local06, result1
236d0     14 2B 02 F6 | 	mov	local07, local06
236d4     16 2A 46 F7 | 	zerox	local07, #22
236d8     14 2D 02 F6 | 	mov	local08, local06
236dc     01 2C 66 F0 | 	shl	local08, #1
236e0     18 2C 46 F0 | 	shr	local08, #24
236e4     1F 28 46 F0 | 	shr	local06, #31
236e8     14 23 62 F5 | 	xor	local03, local06
236ec     FF 26 0E F2 | 	cmp	local05, #255 wz
236f0     90 00 90 AD |  if_e	jmp	#LR__3273
236f4     FF 2C 0E F2 | 	cmp	local08, #255 wz
236f8     D8 00 90 AD |  if_e	jmp	#LR__3275
236fc     00 26 0E F2 | 	cmp	local05, #0 wz
23700     0C 01 90 AD |  if_e	jmp	#LR__3276
23704     17 24 26 F4 | 	bith	local04, #23
23708                 | LR__3270
23708     00 2C 0E F2 | 	cmp	local08, #0 wz
2370c     44 01 90 AD |  if_e	jmp	#LR__3280
23710     17 2A 26 F4 | 	bith	local07, #23
23714                 | LR__3271
23714     12 21 02 F6 | 	mov	local02, local04
23718     04 20 66 F0 | 	shl	local02, #4
2371c     15 29 02 F6 | 	mov	local06, local07
23720     05 28 66 F0 | 	shl	local06, #5
23724     14 21 02 FD | 	qmul	local02, local06
23728     16 27 02 F1 | 	add	local05, local08
2372c     FE 26 86 F1 | 	sub	local05, #254
23730     13 2F 02 F6 | 	mov	local09, local05
23734     04 24 66 F0 | 	shl	local04, #4
23738     05 2A 66 F0 | 	shl	local07, #5
2373c     18 30 62 FD | 	getqx	local10
23740     15 25 02 FD | 	qmul	local04, local07
23744     19 32 62 FD | 	getqy	local11
23748     00 80 00 FF 
2374c     00 32 16 F2 | 	cmp	local11, ##16777216 wc
23750     18 00 90 CD |  if_b	jmp	#LR__3272
23754     01 2E 06 F1 | 	add	local09, #1
23758     01 30 46 F0 | 	shr	local10, #1
2375c     19 2D 02 F6 | 	mov	local08, local11
23760     1F 2C 66 F0 | 	shl	local08, #31
23764     16 31 42 F5 | 	or	local10, local08
23768     01 32 46 F0 | 	shr	local11, #1
2376c                 | LR__3272
2376c     19 13 02 F6 | 	mov	arg01, local11
23770     18 15 02 F6 | 	mov	arg02, local10
23774     17 17 02 F6 | 	mov	arg03, local09
23778     11 19 02 F6 | 	mov	arg04, local03
2377c     3C 32 B0 FD | 	call	#__system__pack_0606
23780     10 01 90 FD | 	jmp	#LR__3284
23784                 | LR__3273
23784     00 24 0E F2 | 	cmp	local04, #0 wz
23788     0F FB 01 56 |  if_ne	mov	result1, local01
2378c     04 01 90 5D |  if_ne	jmp	#LR__3284
23790     FF 2C 56 F2 | 	cmps	local08, #255 wc
23794     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
23798     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
2379c     18 00 90 4D |  if_c_and_nz	jmp	#LR__3274
237a0     00 F8 3F CF 
237a4     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
237a8     E8 00 90 CD |  if_b	jmp	#LR__3284
237ac     00 2A 0E F2 | 	cmp	local07, #0 wz
237b0     10 FB 01 56 |  if_ne	mov	result1, local02
237b4     DC 00 90 5D |  if_ne	jmp	#LR__3284
237b8                 | LR__3274
237b8     02 22 46 F5 | 	or	local03, #2
237bc     00 12 06 F6 | 	mov	arg01, #0
237c0     00 14 06 F6 | 	mov	arg02, #0
237c4     13 17 02 F6 | 	mov	arg03, local05
237c8     11 19 02 F6 | 	mov	arg04, local03
237cc     EC 31 B0 FD | 	call	#__system__pack_0606
237d0     C0 00 90 FD | 	jmp	#LR__3284
237d4                 | LR__3275
237d4     00 26 0E F2 | 	cmp	local05, #0 wz
237d8     00 24 0E A2 |  if_e	cmp	local04, #0 wz
237dc     00 F8 3F AF 
237e0     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
237e4     AC 00 90 AD |  if_e	jmp	#LR__3284
237e8     00 2A 0E F2 | 	cmp	local07, #0 wz
237ec     10 FB 01 56 |  if_ne	mov	result1, local02
237f0     A0 00 90 5D |  if_ne	jmp	#LR__3284
237f4     16 17 02 F6 | 	mov	arg03, local08
237f8     11 19 02 F6 | 	mov	arg04, local03
237fc     02 18 46 F5 | 	or	arg04, #2
23800     00 12 06 F6 | 	mov	arg01, #0
23804     00 14 06 F6 | 	mov	arg02, #0
23808     B0 31 B0 FD | 	call	#__system__pack_0606
2380c     84 00 90 FD | 	jmp	#LR__3284
23810                 | LR__3276
23810     00 24 0E F2 | 	cmp	local04, #0 wz
23814     20 00 90 AD |  if_e	jmp	#LR__3279
23818     01 24 66 F0 | 	shl	local04, #1
2381c     97 0A 48 FB | 	callpa	#(@LR__3278-@LR__3277)>>2,fcache_load_ptr_
23820                 | LR__3277
23820     00 40 00 FF 
23824     00 24 16 F2 | 	cmp	local04, ##8388608 wc
23828     01 26 86 C1 |  if_b	sub	local05, #1
2382c     01 24 66 C0 |  if_b	shl	local04, #1
23830     EC FF 9F CD |  if_b	jmp	#LR__3277
23834                 | LR__3278
23834     D0 FE 9F FD | 	jmp	#LR__3270
23838                 | LR__3279
23838     08 22 46 F5 | 	or	local03, #8
2383c     00 12 06 F6 | 	mov	arg01, #0
23840     00 14 06 F6 | 	mov	arg02, #0
23844     00 16 06 F6 | 	mov	arg03, #0
23848     11 19 02 F6 | 	mov	arg04, local03
2384c     6C 31 B0 FD | 	call	#__system__pack_0606
23850     40 00 90 FD | 	jmp	#LR__3284
23854                 | LR__3280
23854     00 2A 0E F2 | 	cmp	local07, #0 wz
23858     20 00 90 AD |  if_e	jmp	#LR__3283
2385c     01 2A 66 F0 | 	shl	local07, #1
23860     97 0A 48 FB | 	callpa	#(@LR__3282-@LR__3281)>>2,fcache_load_ptr_
23864                 | LR__3281
23864     00 40 00 FF 
23868     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
2386c     01 2C 86 C1 |  if_b	sub	local08, #1
23870     01 2A 66 C0 |  if_b	shl	local07, #1
23874     EC FF 9F CD |  if_b	jmp	#LR__3281
23878                 | LR__3282
23878     98 FE 9F FD | 	jmp	#LR__3271
2387c                 | LR__3283
2387c     08 22 46 F5 | 	or	local03, #8
23880     00 12 06 F6 | 	mov	arg01, #0
23884     00 14 06 F6 | 	mov	arg02, #0
23888     00 16 06 F6 | 	mov	arg03, #0
2388c     11 19 02 F6 | 	mov	arg04, local03
23890     28 31 B0 FD | 	call	#__system__pack_0606
23894                 | LR__3284
23894     A7 F0 03 F6 | 	mov	ptra, fp
23898     B2 00 A0 FD | 	call	#popregs_
2389c                 | __system___float_mul_ret
2389c     2D 00 64 FD | 	ret
238a0                 | 
238a0                 | __system___float_div
238a0     0E 4A 05 F6 | 	mov	COUNT_, #14
238a4     A8 00 A0 FD | 	call	#pushregs_
238a8     09 23 02 F6 | 	mov	local03, arg01
238ac     0A 25 02 F6 | 	mov	local04, arg02
238b0     11 27 02 F6 | 	mov	local05, local03
238b4     13 29 02 F6 | 	mov	local06, local05
238b8     16 28 46 F7 | 	zerox	local06, #22
238bc     13 2B 02 F6 | 	mov	local07, local05
238c0     01 2A 66 F0 | 	shl	local07, #1
238c4     18 2A 46 F0 | 	shr	local07, #24
238c8     1F 26 46 F0 | 	shr	local05, #31
238cc     12 FB 01 F6 | 	mov	result1, local04
238d0     FD 2C 02 F6 | 	mov	local08, result1
238d4     16 2F 02 F6 | 	mov	local09, local08
238d8     16 2E 46 F7 | 	zerox	local09, #22
238dc     16 31 02 F6 | 	mov	local10, local08
238e0     01 30 66 F0 | 	shl	local10, #1
238e4     18 30 46 F0 | 	shr	local10, #24
238e8     1F 2C 46 F0 | 	shr	local08, #31
238ec     16 27 62 F5 | 	xor	local05, local08
238f0     FF 2A 0E F2 | 	cmp	local07, #255 wz
238f4     D4 00 90 AD |  if_e	jmp	#LR__3295
238f8     FF 30 0E F2 | 	cmp	local10, #255 wz
238fc     04 01 90 AD |  if_e	jmp	#LR__3296
23900     00 2A 0E F2 | 	cmp	local07, #0 wz
23904     24 01 90 AD |  if_e	jmp	#LR__3297
23908     17 28 26 F4 | 	bith	local06, #23
2390c                 | LR__3290
2390c     00 30 0E F2 | 	cmp	local10, #0 wz
23910     70 01 90 AD |  if_e	jmp	#LR__3301
23914     17 2E 26 F4 | 	bith	local09, #23
23918                 | LR__3291
23918     18 2B 82 F1 | 	sub	local07, local10
2391c     15 33 02 F6 | 	mov	local11, local07
23920     14 13 02 F6 | 	mov	arg01, local06
23924     02 12 46 F0 | 	shr	arg01, #2
23928     1E 28 66 F0 | 	shl	local06, #30
2392c     14 15 02 F6 | 	mov	arg02, local06
23930     17 17 02 F6 | 	mov	arg03, local09
23934     28 12 62 FD | 	setq	arg01
23938     0B 15 12 FD | 	qdiv	arg02, arg03
2393c     00 34 06 F6 | 	mov	local12, #0
23940     18 1E 62 FD | 	getqx	local01
23944     19 FC 61 FD | 	getqy	result2
23948     FE 20 02 F6 | 	mov	local02, result2
2394c     0F 37 02 F6 | 	mov	local13, local01
23950     00 20 4E F2 | 	cmps	local02, #0 wz
23954     1B 39 02 F6 | 	mov	local14, local13
23958     19 38 66 F0 | 	shl	local14, #25
2395c     01 34 06 56 |  if_ne	mov	local12, #1
23960     1A 39 42 F5 | 	or	local14, local12
23964     07 36 46 F0 | 	shr	local13, #7
23968     00 80 00 FF 
2396c     00 36 16 F2 | 	cmp	local13, ##16777216 wc
23970     1C 00 90 CD |  if_b	jmp	#LR__3292
23974     01 32 06 F1 | 	add	local11, #1
23978     01 38 46 F0 | 	shr	local14, #1
2397c     1B 35 02 F6 | 	mov	local12, local13
23980     1F 34 66 F0 | 	shl	local12, #31
23984     1A 39 42 F5 | 	or	local14, local12
23988     01 36 46 F0 | 	shr	local13, #1
2398c     24 00 90 FD | 	jmp	#LR__3294
23990                 | LR__3292
23990     00 40 00 FF 
23994     00 36 16 F2 | 	cmp	local13, ##8388608 wc
23998     18 00 90 3D |  if_ae	jmp	#LR__3293
2399c     01 32 86 F1 | 	sub	local11, #1
239a0     01 36 66 F0 | 	shl	local13, #1
239a4     1C 35 02 F6 | 	mov	local12, local14
239a8     1F 34 46 F0 | 	shr	local12, #31
239ac     1A 37 42 F5 | 	or	local13, local12
239b0     01 38 66 F0 | 	shl	local14, #1
239b4                 | LR__3293
239b4                 | LR__3294
239b4     1B 13 02 F6 | 	mov	arg01, local13
239b8     1C 15 02 F6 | 	mov	arg02, local14
239bc     19 17 02 F6 | 	mov	arg03, local11
239c0     13 19 02 F6 | 	mov	arg04, local05
239c4     F4 2F B0 FD | 	call	#__system__pack_0606
239c8     F8 00 90 FD | 	jmp	#LR__3305
239cc                 | LR__3295
239cc     00 28 0E F2 | 	cmp	local06, #0 wz
239d0     11 FB 01 56 |  if_ne	mov	result1, local03
239d4     EC 00 90 5D |  if_ne	jmp	#LR__3305
239d8     FF 30 0E F2 | 	cmp	local10, #255 wz
239dc     00 F8 3F AF 
239e0     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
239e4     DC 00 90 AD |  if_e	jmp	#LR__3305
239e8     02 26 46 F5 | 	or	local05, #2
239ec     00 12 06 F6 | 	mov	arg01, #0
239f0     00 14 06 F6 | 	mov	arg02, #0
239f4     15 17 02 F6 | 	mov	arg03, local07
239f8     13 19 02 F6 | 	mov	arg04, local05
239fc     BC 2F B0 FD | 	call	#__system__pack_0606
23a00     C0 00 90 FD | 	jmp	#LR__3305
23a04                 | LR__3296
23a04     00 2E 0E F2 | 	cmp	local09, #0 wz
23a08     12 FB 01 56 |  if_ne	mov	result1, local04
23a0c     B4 00 90 5D |  if_ne	jmp	#LR__3305
23a10     13 19 02 F6 | 	mov	arg04, local05
23a14     08 18 46 F5 | 	or	arg04, #8
23a18     00 12 06 F6 | 	mov	arg01, #0
23a1c     00 14 06 F6 | 	mov	arg02, #0
23a20     00 16 06 F6 | 	mov	arg03, #0
23a24     94 2F B0 FD | 	call	#__system__pack_0606
23a28     98 00 90 FD | 	jmp	#LR__3305
23a2c                 | LR__3297
23a2c     00 28 0E F2 | 	cmp	local06, #0 wz
23a30     20 00 90 AD |  if_e	jmp	#LR__3300
23a34     01 28 66 F0 | 	shl	local06, #1
23a38     97 0A 48 FB | 	callpa	#(@LR__3299-@LR__3298)>>2,fcache_load_ptr_
23a3c                 | LR__3298
23a3c     00 40 00 FF 
23a40     00 28 16 F2 | 	cmp	local06, ##8388608 wc
23a44     01 2A 86 C1 |  if_b	sub	local07, #1
23a48     01 28 66 C0 |  if_b	shl	local06, #1
23a4c     EC FF 9F CD |  if_b	jmp	#LR__3298
23a50                 | LR__3299
23a50     B8 FE 9F FD | 	jmp	#LR__3290
23a54                 | LR__3300
23a54     00 30 0E F2 | 	cmp	local10, #0 wz
23a58     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
23a5c     00 F8 3F AF 
23a60     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
23a64     5C 00 90 AD |  if_e	jmp	#LR__3305
23a68     13 19 02 F6 | 	mov	arg04, local05
23a6c     08 18 46 F5 | 	or	arg04, #8
23a70     00 12 06 F6 | 	mov	arg01, #0
23a74     00 14 06 F6 | 	mov	arg02, #0
23a78     00 16 06 F6 | 	mov	arg03, #0
23a7c     3C 2F B0 FD | 	call	#__system__pack_0606
23a80     40 00 90 FD | 	jmp	#LR__3305
23a84                 | LR__3301
23a84     00 2E 0E F2 | 	cmp	local09, #0 wz
23a88     20 00 90 AD |  if_e	jmp	#LR__3304
23a8c     01 2E 66 F0 | 	shl	local09, #1
23a90     97 0A 48 FB | 	callpa	#(@LR__3303-@LR__3302)>>2,fcache_load_ptr_
23a94                 | LR__3302
23a94     00 40 00 FF 
23a98     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
23a9c     01 30 86 C1 |  if_b	sub	local10, #1
23aa0     01 2E 66 C0 |  if_b	shl	local09, #1
23aa4     EC FF 9F CD |  if_b	jmp	#LR__3302
23aa8                 | LR__3303
23aa8     6C FE 9F FD | 	jmp	#LR__3291
23aac                 | LR__3304
23aac     02 26 46 F5 | 	or	local05, #2
23ab0     00 12 06 F6 | 	mov	arg01, #0
23ab4     00 14 06 F6 | 	mov	arg02, #0
23ab8     00 16 06 F6 | 	mov	arg03, #0
23abc     13 19 02 F6 | 	mov	arg04, local05
23ac0     F8 2E B0 FD | 	call	#__system__pack_0606
23ac4                 | LR__3305
23ac4     A7 F0 03 F6 | 	mov	ptra, fp
23ac8     B2 00 A0 FD | 	call	#popregs_
23acc                 | __system___float_div_ret
23acc     2D 00 64 FD | 	ret
23ad0                 | 
23ad0                 | __system___float_cmp
23ad0     00 C0 3F FF 
23ad4     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
23ad8     00 C0 3F CF 
23adc     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
23ae0     0B FB 01 36 |  if_ae	mov	result1, arg03
23ae4     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
23ae8     00 C0 7F FF 
23aec     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
23af0     00 C0 7F CF 
23af4     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
23af8     0B FB 01 36 |  if_ae	mov	result1, arg03
23afc     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
23b00     00 12 56 F2 | 	cmps	arg01, #0 wc
23b04     2C 00 90 3D |  if_ae	jmp	#LR__3310
23b08     00 14 56 F2 | 	cmps	arg02, #0 wc
23b0c     0A FB 01 C6 |  if_b	mov	result1, arg02
23b10     09 FB 81 C1 |  if_b	sub	result1, arg01
23b14     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
23b18     00 14 0E F2 | 	cmp	arg02, #0 wz
23b1c     00 00 40 AF 
23b20     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
23b24     00 FA 05 A6 |  if_e	mov	result1, #0
23b28     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
23b2c     01 FA 65 F6 | 	neg	result1, #1
23b30     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
23b34                 | LR__3310
23b34     00 14 56 F2 | 	cmps	arg02, #0 wc
23b38     1C 00 90 3D |  if_ae	jmp	#LR__3311
23b3c     00 12 0E F2 | 	cmp	arg01, #0 wz
23b40     00 00 40 AF 
23b44     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
23b48     00 FA 05 A6 |  if_e	mov	result1, #0
23b4c     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
23b50     01 FA 05 F6 | 	mov	result1, #1
23b54     08 00 90 FD | 	jmp	#__system___float_cmp_ret
23b58                 | LR__3311
23b58     0A 13 82 F1 | 	sub	arg01, arg02
23b5c     09 FB 01 F6 | 	mov	result1, arg01
23b60                 | __system___float_cmp_ret
23b60     2D 00 64 FD | 	ret
23b64                 | 
23b64                 | __system___float_tointeger
23b64     02 4A 05 F6 | 	mov	COUNT_, #2
23b68     A8 00 A0 FD | 	call	#pushregs_
23b6c     50 00 B0 FD | 	call	#__system___float_Unpack
23b70     FF FF 7F FF 
23b74     FF FD 55 F2 | 	cmps	result2, ##-1 wc
23b78     34 00 90 CD |  if_b	jmp	#LR__3320
23b7c     1F FC 55 F2 | 	cmps	result2, #31 wc
23b80     2C 00 90 3D |  if_ae	jmp	#LR__3320
23b84     02 FE 65 F0 | 	shl	result3, #2
23b88     1E 1E 06 F6 | 	mov	local01, #30
23b8c     FE 1E 82 F1 | 	sub	local01, result2
23b90     0F FF 41 F0 | 	shr	result3, local01
23b94     FF 20 02 F6 | 	mov	local02, result3
23b98     0A 21 02 F1 | 	add	local02, arg02
23b9c     01 20 46 F0 | 	shr	local02, #1
23ba0     00 FA 0D F2 | 	cmp	result1, #0 wz
23ba4     10 21 62 56 |  if_ne	neg	local02, local02
23ba8     10 FB 01 F6 | 	mov	result1, local02
23bac     04 00 90 FD | 	jmp	#LR__3321
23bb0                 | LR__3320
23bb0     00 FA 05 F6 | 	mov	result1, #0
23bb4                 | LR__3321
23bb4     A7 F0 03 F6 | 	mov	ptra, fp
23bb8     B2 00 A0 FD | 	call	#popregs_
23bbc                 | __system___float_tointeger_ret
23bbc     2D 00 64 FD | 	ret
23bc0                 | 
23bc0                 | __system___float_Unpack
23bc0     09 01 02 F6 | 	mov	_var01, arg01
23bc4     1F 00 46 F0 | 	shr	_var01, #31
23bc8     09 03 02 F6 | 	mov	_var02, arg01
23bcc     01 02 66 F0 | 	shl	_var02, #1
23bd0     18 02 4E F0 | 	shr	_var02, #24 wz
23bd4     17 13 06 F4 | 	bitl	arg01, #279
23bd8     06 12 66 50 |  if_ne	shl	arg01, #6
23bdc     1D 12 26 54 |  if_ne	bith	arg01, #29
23be0     1C 00 90 5D |  if_ne	jmp	#LR__3330
23be4     09 05 92 F7 | 	encod	_var03, arg01 wc
23be8     01 04 06 C1 |  if_b	add	_var03, #1
23bec     17 04 86 F1 | 	sub	_var03, #23
23bf0     02 03 02 F6 | 	mov	_var02, _var03
23bf4     07 FC 05 F6 | 	mov	result2, #7
23bf8     02 FD 81 F1 | 	sub	result2, _var03
23bfc     FE 12 62 F0 | 	shl	arg01, result2
23c00                 | LR__3330
23c00     7F 02 86 F1 | 	sub	_var02, #127
23c04     09 FF 01 F6 | 	mov	result3, arg01
23c08     00 FB 01 F6 | 	mov	result1, _var01
23c0c     01 FD 01 F6 | 	mov	result2, _var02
23c10                 | __system___float_Unpack_ret
23c10     2D 00 64 FD | 	ret
23c14                 | 
23c14                 | __system___float_Pack
23c14     00 00 06 F6 | 	mov	_var01, #0
23c18     00 16 0E F2 | 	cmp	arg03, #0 wz
23c1c     8C 00 90 AD |  if_e	jmp	#LR__3341
23c20     0B 03 92 F7 | 	encod	_var02, arg03 wc
23c24     01 02 06 C1 |  if_b	add	_var02, #1
23c28     21 00 06 F6 | 	mov	_var01, #33
23c2c     01 01 82 F1 | 	sub	_var01, _var02
23c30     00 17 62 F0 | 	shl	arg03, _var01
23c34     03 02 06 F6 | 	mov	_var02, #3
23c38     00 03 82 F1 | 	sub	_var02, _var01
23c3c     01 15 02 F1 | 	add	arg02, _var02
23c40     0A 05 02 F6 | 	mov	_var03, arg02
23c44     00 17 06 F1 | 	add	arg03, #256
23c48     0B 03 02 F6 | 	mov	_var02, arg03
23c4c     FF 02 2E F5 | 	andn	_var02, #255 wz
23c50     01 04 06 A1 |  if_e	add	_var03, #1
23c54     7F 04 06 F1 | 	add	_var03, #127
23c58     FF FF 7F FF 
23c5c     E9 05 46 F3 | 	fges	_var03, ##-23
23c60     FF 04 66 F3 | 	fles	_var03, #255
23c64     01 04 56 F2 | 	cmps	_var03, #1 wc
23c68     1C 00 90 3D |  if_ae	jmp	#LR__3340
23c6c     01 16 46 F0 | 	shr	arg03, #1
23c70     1F 02 C6 F9 | 	decod	_var02, #31
23c74     0B 03 02 F1 | 	add	_var02, arg03
23c78     02 05 62 F6 | 	neg	_var03, _var03
23c7c     02 03 42 F0 | 	shr	_var02, _var03
23c80     01 17 02 F6 | 	mov	arg03, _var02
23c84     00 04 06 F6 | 	mov	_var03, #0
23c88                 | LR__3340
23c88     09 FB 01 F6 | 	mov	result1, arg01
23c8c     1F FA 65 F0 | 	shl	result1, #31
23c90     02 03 02 F6 | 	mov	_var02, _var03
23c94     17 02 66 F0 | 	shl	_var02, #23
23c98     01 FB 41 F5 | 	or	result1, _var02
23c9c     0B 07 02 F6 | 	mov	_var04, arg03
23ca0     09 06 46 F0 | 	shr	_var04, #9
23ca4     03 FB 41 F5 | 	or	result1, _var04
23ca8     04 00 90 FD | 	jmp	#__system___float_Pack_ret
23cac                 | LR__3341
23cac     00 FB 01 F6 | 	mov	result1, _var01
23cb0                 | __system___float_Pack_ret
23cb0     2D 00 64 FD | 	ret
23cb4                 | 
23cb4                 | __system___basic_print_float
23cb4     05 4A 05 F6 | 	mov	COUNT_, #5
23cb8     A8 00 A0 FD | 	call	#pushregs_
23cbc     09 1F 02 F6 | 	mov	local01, arg01
23cc0     0A 21 02 F6 | 	mov	local02, arg02
23cc4     0B 23 0A F6 | 	mov	local03, arg03 wz
23cc8     0C 25 02 F6 | 	mov	local04, arg04
23ccc     14 00 90 5D |  if_ne	jmp	#LR__3350
23cd0     23 24 0E F2 | 	cmp	local04, #35 wz
23cd4     80 02 10 AF 
23cd8     00 26 06 A6 |  if_e	mov	local05, ##537198592
23cdc     1D 26 C6 59 |  if_ne	decod	local05, #29
23ce0     13 23 02 F6 | 	mov	local03, local05
23ce4                 | LR__3350
23ce4     0F 13 02 F6 | 	mov	arg01, local01
23ce8     B4 27 B0 FD | 	call	#__system___gettxfunc
23cec     FD 26 0A F6 | 	mov	local05, result1 wz
23cf0     00 FA 05 A6 |  if_e	mov	result1, #0
23cf4     13 13 02 56 |  if_ne	mov	arg01, local05
23cf8     11 15 02 56 |  if_ne	mov	arg02, local03
23cfc     10 17 02 56 |  if_ne	mov	arg03, local02
23d00     12 19 02 56 |  if_ne	mov	arg04, local04
23d04     30 DF BF 5D |  if_ne	call	#__system___fmtfloat
23d08     A7 F0 03 F6 | 	mov	ptra, fp
23d0c     B2 00 A0 FD | 	call	#popregs_
23d10                 | __system___basic_print_float_ret
23d10     2D 00 64 FD | 	ret
23d14                 | 
23d14                 | __system____builtin_atoi
23d14     07 4A 05 F6 | 	mov	COUNT_, #7
23d18     A8 00 A0 FD | 	call	#pushregs_
23d1c                 | __system____builtin_atoi_enter
23d1c     09 1F 02 F6 | 	mov	local01, arg01
23d20     0A 21 02 F6 | 	mov	local02, arg02
23d24     00 22 06 F6 | 	mov	local03, #0
23d28     00 24 06 F6 | 	mov	local04, #0
23d2c     00 26 06 F6 | 	mov	local05, #0
23d30     97 08 48 FB | 	callpa	#(@LR__3361-@LR__3360)>>2,fcache_load_ptr_
23d34                 | LR__3360
23d34     0F 29 C2 FA | 	rdbyte	local06, local01
23d38     20 28 0E F2 | 	cmp	local06, #32 wz
23d3c     01 1E 06 A1 |  if_e	add	local01, #1
23d40     F0 FF 9F AD |  if_e	jmp	#LR__3360
23d44                 | LR__3361
23d44     0F 2B C2 FA | 	rdbyte	local07, local01
23d48                 | LR__3362
23d48     2D 2A 0E F2 | 	cmp	local07, #45 wz
23d4c     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
23d50     18 00 90 5D |  if_ne	jmp	#LR__3363
23d54     01 1E 06 F1 | 	add	local01, #1
23d58     2D 2A 0E F2 | 	cmp	local07, #45 wz
23d5c     01 28 06 A6 |  if_e	mov	local06, #1
23d60     14 27 C2 A2 |  if_e	subr	local05, local06
23d64     0F 2B C2 FA | 	rdbyte	local07, local01
23d68     DC FF 9F FD | 	jmp	#LR__3362
23d6c                 | LR__3363
23d6c     97 48 48 FB | 	callpa	#(@LR__3371-@LR__3364)>>2,fcache_load_ptr_
23d70                 | LR__3364
23d70                 | LR__3365
23d70     0F 2B C2 FA | 	rdbyte	local07, local01
23d74     5F 2A 0E F2 | 	cmp	local07, #95 wz
23d78     01 1E 06 F1 | 	add	local01, #1
23d7c     F0 FF 9F AD |  if_e	jmp	#LR__3365
23d80     30 2A 0E F2 | 	cmp	local07, #48 wz
23d84     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
23d88     00 24 06 A6 |  if_e	mov	local04, #0
23d8c     60 00 90 AD |  if_e	jmp	#LR__3370
23d90     31 2A 56 F2 | 	cmps	local07, #49 wc
23d94     18 00 90 CD |  if_b	jmp	#LR__3366
23d98     3A 2A 56 F2 | 	cmps	local07, #58 wc
23d9c     15 25 02 C6 |  if_b	mov	local04, local07
23da0     30 24 86 C1 |  if_b	sub	local04, #48
23da4     00 20 0E C2 |  if_b	cmp	local02, #0 wz
23da8     0A 20 06 86 |  if_c_and_z	mov	local02, #10
23dac     40 00 90 CD |  if_b	jmp	#LR__3369
23db0                 | LR__3366
23db0     0B 20 56 F2 | 	cmps	local02, #11 wc
23db4     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
23db8     14 00 90 CD |  if_b	jmp	#LR__3367
23dbc     67 2A 56 F2 | 	cmps	local07, #103 wc
23dc0     61 2A 86 C1 |  if_b	sub	local07, #97
23dc4     0A 24 06 C6 |  if_b	mov	local04, #10
23dc8     15 25 02 C1 |  if_b	add	local04, local07
23dcc     20 00 90 CD |  if_b	jmp	#LR__3368
23dd0                 | LR__3367
23dd0     0B 20 56 F2 | 	cmps	local02, #11 wc
23dd4     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
23dd8     24 00 90 CD |  if_b	jmp	#LR__3372
23ddc     47 2A 56 F2 | 	cmps	local07, #71 wc
23de0     41 2A 86 C1 |  if_b	sub	local07, #65
23de4     0A 24 06 C6 |  if_b	mov	local04, #10
23de8     15 25 02 C1 |  if_b	add	local04, local07
23dec     10 00 90 3D |  if_ae	jmp	#LR__3372
23df0                 | LR__3368
23df0                 | LR__3369
23df0                 | LR__3370
23df0     11 21 02 FD | 	qmul	local02, local03
23df4     18 22 62 FD | 	getqx	local03
23df8     12 23 02 F1 | 	add	local03, local04
23dfc     70 FF 9F FD | 	jmp	#LR__3364
23e00                 | LR__3371
23e00                 | LR__3372
23e00     00 20 0E F2 | 	cmp	local02, #0 wz
23e04     64 00 90 5D |  if_ne	jmp	#LR__3378
23e08     78 2A 0E F2 | 	cmp	local07, #120 wz
23e0c     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
23e10     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
23e14     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
23e18     14 00 90 5D |  if_ne	jmp	#LR__3373
23e1c     0F 13 02 F6 | 	mov	arg01, local01
23e20     10 14 06 F6 | 	mov	arg02, #16
23e24     EC FE BF FD | 	call	#__system____builtin_atoi
23e28     FD 22 02 F6 | 	mov	local03, result1
23e2c     3C 00 90 FD | 	jmp	#LR__3377
23e30                 | LR__3373
23e30     62 2A 0E F2 | 	cmp	local07, #98 wz
23e34     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
23e38     14 00 90 5D |  if_ne	jmp	#LR__3374
23e3c     0F 13 02 F6 | 	mov	arg01, local01
23e40     02 14 06 F6 | 	mov	arg02, #2
23e44     CC FE BF FD | 	call	#__system____builtin_atoi
23e48     FD 22 02 F6 | 	mov	local03, result1
23e4c     1C 00 90 FD | 	jmp	#LR__3376
23e50                 | LR__3374
23e50     6F 2A 0E F2 | 	cmp	local07, #111 wz
23e54     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
23e58     10 00 90 5D |  if_ne	jmp	#LR__3375
23e5c     0F 13 02 F6 | 	mov	arg01, local01
23e60     08 14 06 F6 | 	mov	arg02, #8
23e64     AC FE BF FD | 	call	#__system____builtin_atoi
23e68     FD 22 02 F6 | 	mov	local03, result1
23e6c                 | LR__3375
23e6c                 | LR__3376
23e6c                 | LR__3377
23e6c                 | LR__3378
23e6c     00 26 0E F2 | 	cmp	local05, #0 wz
23e70     11 23 62 56 |  if_ne	neg	local03, local03
23e74     11 FB 01 F6 | 	mov	result1, local03
23e78     A7 F0 03 F6 | 	mov	ptra, fp
23e7c     B2 00 A0 FD | 	call	#popregs_
23e80                 | __system____builtin_atoi_ret
23e80     2D 00 64 FD | 	ret
23e84                 | 
23e84                 | __system____builtin_atof
23e84     07 4A 05 F6 | 	mov	COUNT_, #7
23e88     A8 00 A0 FD | 	call	#pushregs_
23e8c     09 1F 02 F6 | 	mov	local01, arg01
23e90     00 20 06 F6 | 	mov	local02, #0
23e94     00 22 06 F6 | 	mov	local03, #0
23e98     00 24 06 F6 | 	mov	local04, #0
23e9c     00 26 06 F6 | 	mov	local05, #0
23ea0     97 08 48 FB | 	callpa	#(@LR__3381-@LR__3380)>>2,fcache_load_ptr_
23ea4                 | LR__3380
23ea4     0F 17 C2 FA | 	rdbyte	arg03, local01
23ea8     20 16 0E F2 | 	cmp	arg03, #32 wz
23eac     01 1E 06 A1 |  if_e	add	local01, #1
23eb0     F0 FF 9F AD |  if_e	jmp	#LR__3380
23eb4                 | LR__3381
23eb4     0F 29 C2 FA | 	rdbyte	local06, local01
23eb8                 | LR__3382
23eb8     2B 28 0E F2 | 	cmp	local06, #43 wz
23ebc     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
23ec0     14 00 90 5D |  if_ne	jmp	#LR__3383
23ec4     2D 28 0E F2 | 	cmp	local06, #45 wz
23ec8     1F 24 E6 A4 |  if_e	bitnot	local04, #31
23ecc     01 1E 06 F1 | 	add	local01, #1
23ed0     0F 29 C2 FA | 	rdbyte	local06, local01
23ed4     E0 FF 9F FD | 	jmp	#LR__3382
23ed8                 | LR__3383
23ed8                 | LR__3384
23ed8     97 08 48 FB | 	callpa	#(@LR__3386-@LR__3385)>>2,fcache_load_ptr_
23edc                 | LR__3385
23edc     0F 29 C2 FA | 	rdbyte	local06, local01
23ee0     5F 28 0E F2 | 	cmp	local06, #95 wz
23ee4     01 1E 06 F1 | 	add	local01, #1
23ee8     F0 FF 9F AD |  if_e	jmp	#LR__3385
23eec                 | LR__3386
23eec     00 28 0E F2 | 	cmp	local06, #0 wz
23ef0     5C 00 90 AD |  if_e	jmp	#LR__3388
23ef4     30 28 56 F2 | 	cmps	local06, #48 wc
23ef8     44 00 90 CD |  if_b	jmp	#LR__3387
23efc     3A 28 56 F2 | 	cmps	local06, #58 wc
23f00     3C 00 90 3D |  if_ae	jmp	#LR__3387
23f04     10 13 02 F6 | 	mov	arg01, local02
23f08     00 90 20 FF 
23f0c     00 14 06 F6 | 	mov	arg02, ##1092616192
23f10     88 F7 BF FD | 	call	#__system___float_mul
23f14     FD 20 02 F6 | 	mov	local02, result1
23f18     30 28 86 F1 | 	sub	local06, #48
23f1c     14 13 02 F6 | 	mov	arg01, local06
23f20     74 F3 BF FD | 	call	#__system___float_fromuns
23f24     FD 14 02 F6 | 	mov	arg02, result1
23f28     10 13 02 F6 | 	mov	arg01, local02
23f2c     9C F3 BF FD | 	call	#__system___float_add
23f30     FD 20 02 F6 | 	mov	local02, result1
23f34     00 26 0E F2 | 	cmp	local05, #0 wz
23f38     01 22 86 51 |  if_ne	sub	local03, #1
23f3c     98 FF 9F FD | 	jmp	#LR__3384
23f40                 | LR__3387
23f40     2E 28 0E F2 | 	cmp	local06, #46 wz
23f44     00 26 0E A2 |  if_e	cmp	local05, #0 wz
23f48     01 26 06 A6 |  if_e	mov	local05, #1
23f4c     88 FF 9F AD |  if_e	jmp	#LR__3384
23f50                 | LR__3388
23f50     45 28 0E F2 | 	cmp	local06, #69 wz
23f54     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
23f58     18 00 90 5D |  if_ne	jmp	#LR__3389
23f5c     0F 13 02 F6 | 	mov	arg01, local01
23f60     00 14 06 F6 | 	mov	arg02, #0
23f64     AC FD BF FD | 	call	#__system____builtin_atoi
23f68     11 FB 01 F1 | 	add	result1, local03
23f6c     FD 2A 02 F6 | 	mov	local07, result1
23f70     04 00 90 FD | 	jmp	#LR__3390
23f74                 | LR__3389
23f74     11 2B 02 F6 | 	mov	local07, local03
23f78                 | LR__3390
23f78     15 17 02 F6 | 	mov	arg03, local07
23f7c     10 13 02 F6 | 	mov	arg01, local02
23f80     00 90 20 FF 
23f84     00 14 06 F6 | 	mov	arg02, ##1092616192
23f88     F4 06 B0 FD | 	call	#__system___float_pow_n
23f8c     12 FB 61 F5 | 	xor	result1, local04
23f90     A7 F0 03 F6 | 	mov	ptra, fp
23f94     B2 00 A0 FD | 	call	#popregs_
23f98                 | __system____builtin_atof_ret
23f98     2D 00 64 FD | 	ret
23f9c                 | 
23f9c                 | __system____builtin_ilogb
23f9c     20 FC BF FD | 	call	#__system___float_Unpack
23fa0     00 FE 0D F2 | 	cmp	result3, #0 wz
23fa4     00 00 40 AF 
23fa8     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
23fac     24 00 90 AD |  if_e	jmp	#LR__3401
23fb0     80 FC 0D F2 | 	cmp	result2, #128 wz
23fb4     18 00 90 5D |  if_ne	jmp	#LR__3400
23fb8     00 00 10 FF 
23fbc     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
23fc0     1E FA CD A9 |  if_e	bmask	result1, #30
23fc4     0C 00 90 AD |  if_e	jmp	#LR__3401
23fc8     1F FA C5 F9 | 	decod	result1, #31
23fcc     04 00 90 FD | 	jmp	#LR__3401
23fd0                 | LR__3400
23fd0     FE FA 01 F6 | 	mov	result1, result2
23fd4                 | LR__3401
23fd4                 | __system____builtin_ilogb_ret
23fd4     2D 00 64 FD | 	ret
23fd8                 | 
23fd8                 | __system____builtin_sinf
23fd8     03 4A 05 F6 | 	mov	COUNT_, #3
23fdc     A8 00 A0 FD | 	call	#pushregs_
23fe0     09 1F 02 F6 | 	mov	local01, arg01
23fe4     87 64 20 FF 
23fe8     DB 15 06 F6 | 	mov	arg02, ##1086918619
23fec     B0 F8 BF FD | 	call	#__system___float_div
23ff0     FD 12 02 F6 | 	mov	arg01, result1
23ff4     00 14 06 F6 | 	mov	arg02, #0
23ff8     68 FB BF FD | 	call	#__system___float_tointeger
23ffc     FD 16 0A F6 | 	mov	arg03, result1 wz
24000     44 00 90 AD |  if_e	jmp	#LR__3410
24004     0B 13 52 F6 | 	abs	arg01, arg03 wc
24008     1F 20 C6 C9 |  if_b	decod	local02, #31
2400c     00 20 06 36 |  if_ae	mov	local02, #0
24010     84 F2 BF FD | 	call	#__system___float_fromuns
24014     10 FB 61 F5 | 	xor	result1, local02
24018     FD 12 02 F6 | 	mov	arg01, result1
2401c     1E 14 C6 F9 | 	decod	arg02, #30
24020     78 F6 BF FD | 	call	#__system___float_mul
24024     FD 12 02 F6 | 	mov	arg01, result1
24028     87 24 20 FF 
2402c     DB 15 06 F6 | 	mov	arg02, ##1078530011
24030     68 F6 BF FD | 	call	#__system___float_mul
24034     FD 14 02 F6 | 	mov	arg02, result1
24038     0F 13 02 F6 | 	mov	arg01, local01
2403c     1F 14 E6 F4 | 	bitnot	arg02, #31
24040     88 F2 BF FD | 	call	#__system___float_add
24044     FD 1E 02 F6 | 	mov	local01, result1
24048                 | LR__3410
24048     0F 13 02 F6 | 	mov	arg01, local01
2404c     66 E6 1E FF 
24050     CD 14 06 F6 | 	mov	arg02, ##1036831949
24054     01 16 06 F6 | 	mov	arg03, #1
24058     74 FA BF FD | 	call	#__system___float_cmp
2405c     00 FA 55 F2 | 	cmps	result1, #0 wc
24060     5C 00 90 3D |  if_ae	jmp	#LR__3411
24064     0F 13 02 F6 | 	mov	arg01, local01
24068     66 E6 5E FF 
2406c     CD 14 06 F6 | 	mov	arg02, ##-1110651699
24070     01 16 66 F6 | 	neg	arg03, #1
24074     58 FA BF FD | 	call	#__system___float_cmp
24078     01 FA 55 F2 | 	cmps	result1, #1 wc
2407c     40 00 90 CD |  if_b	jmp	#LR__3411
24080     0F 13 02 F6 | 	mov	arg01, local01
24084     0F 15 02 F6 | 	mov	arg02, local01
24088     10 F6 BF FD | 	call	#__system___float_mul
2408c     FD 12 02 F6 | 	mov	arg01, result1
24090     0F 15 02 F6 | 	mov	arg02, local01
24094     04 F6 BF FD | 	call	#__system___float_mul
24098     FD 12 02 F6 | 	mov	arg01, result1
2409c     00 60 20 FF 
240a0     00 14 06 F6 | 	mov	arg02, ##1086324736
240a4     F8 F7 BF FD | 	call	#__system___float_div
240a8     FD 14 02 F6 | 	mov	arg02, result1
240ac     0F 13 02 F6 | 	mov	arg01, local01
240b0     1F 14 E6 F4 | 	bitnot	arg02, #31
240b4     14 F2 BF FD | 	call	#__system___float_add
240b8     FD 22 02 F6 | 	mov	local03, result1
240bc     54 00 90 FD | 	jmp	#LR__3412
240c0                 | LR__3411
240c0     0F 13 02 F6 | 	mov	arg01, local01
240c4     7C 91 26 FF 
240c8     83 15 06 F6 | 	mov	arg02, ##1294137731
240cc     CC F5 BF FD | 	call	#__system___float_mul
240d0     FD 12 02 F6 | 	mov	arg01, result1
240d4     00 14 06 F6 | 	mov	arg02, #0
240d8     88 FA BF FD | 	call	#__system___float_tointeger
240dc     02 FA 65 F0 | 	shl	result1, #2
240e0     00 00 A0 FF 
240e4     FD 00 48 FD | 	qrotate	##1073741824, result1
240e8     19 12 62 FD | 	getqy	arg01
240ec     09 13 52 F6 | 	abs	arg01, arg01 wc
240f0     1F 20 C6 C9 |  if_b	decod	local02, #31
240f4     00 20 06 36 |  if_ae	mov	local02, #0
240f8     9C F1 BF FD | 	call	#__system___float_fromuns
240fc     10 FB 61 F5 | 	xor	result1, local02
24100     FD 12 02 F6 | 	mov	arg01, result1
24104     00 40 27 FF 
24108     00 14 06 F6 | 	mov	arg02, ##1317011456
2410c     90 F7 BF FD | 	call	#__system___float_div
24110     FD 22 02 F6 | 	mov	local03, result1
24114                 | LR__3412
24114     11 FB 01 F6 | 	mov	result1, local03
24118     A7 F0 03 F6 | 	mov	ptra, fp
2411c     B2 00 A0 FD | 	call	#popregs_
24120                 | __system____builtin_sinf_ret
24120     2D 00 64 FD | 	ret
24124                 | 
24124                 | __system____builtin_tanf
24124     02 4A 05 F6 | 	mov	COUNT_, #2
24128     A8 00 A0 FD | 	call	#pushregs_
2412c     09 1F 02 F6 | 	mov	local01, arg01
24130     A4 FE BF FD | 	call	#__system____builtin_sinf
24134     FD 20 02 F6 | 	mov	local02, result1
24138     0F 15 02 F6 | 	mov	arg02, local01
2413c     87 E4 1F FF 
24140     DB 13 06 F6 | 	mov	arg01, ##1070141403
24144     1F 14 E6 F4 | 	bitnot	arg02, #31
24148     80 F1 BF FD | 	call	#__system___float_add
2414c     FD 12 02 F6 | 	mov	arg01, result1
24150     84 FE BF FD | 	call	#__system____builtin_sinf
24154     FD 14 02 F6 | 	mov	arg02, result1
24158     10 13 02 F6 | 	mov	arg01, local02
2415c     40 F7 BF FD | 	call	#__system___float_div
24160     A7 F0 03 F6 | 	mov	ptra, fp
24164     B2 00 A0 FD | 	call	#popregs_
24168                 | __system____builtin_tanf_ret
24168     2D 00 64 FD | 	ret
2416c                 | 
2416c                 | __system____builtin_asinf
2416c     01 4A 05 F6 | 	mov	COUNT_, #1
24170     A8 00 A0 FD | 	call	#pushregs_
24174     09 1F 02 F6 | 	mov	local01, arg01
24178     0F 15 02 F6 | 	mov	arg02, local01
2417c     0F 13 02 F6 | 	mov	arg01, local01
24180     18 F5 BF FD | 	call	#__system___float_mul
24184     FD 14 02 F6 | 	mov	arg02, result1
24188     00 C0 1F FF 
2418c     00 12 06 F6 | 	mov	arg01, ##1065353216
24190     1F 14 E6 F4 | 	bitnot	arg02, #31
24194     34 F1 BF FD | 	call	#__system___float_add
24198     FD 12 02 F6 | 	mov	arg01, result1
2419c     24 F4 BF FD | 	call	#__system___float_sqrt
241a0     FD 14 02 F6 | 	mov	arg02, result1
241a4     0F 13 02 F6 | 	mov	arg01, local01
241a8     58 00 B0 FD | 	call	#__system____builtin_atan2f
241ac     A7 F0 03 F6 | 	mov	ptra, fp
241b0     B2 00 A0 FD | 	call	#popregs_
241b4                 | __system____builtin_asinf_ret
241b4     2D 00 64 FD | 	ret
241b8                 | 
241b8                 | __system____builtin_acosf
241b8     01 4A 05 F6 | 	mov	COUNT_, #1
241bc     A8 00 A0 FD | 	call	#pushregs_
241c0     09 1F 02 F6 | 	mov	local01, arg01
241c4     0F 15 02 F6 | 	mov	arg02, local01
241c8     0F 13 02 F6 | 	mov	arg01, local01
241cc     CC F4 BF FD | 	call	#__system___float_mul
241d0     FD 14 02 F6 | 	mov	arg02, result1
241d4     00 C0 1F FF 
241d8     00 12 06 F6 | 	mov	arg01, ##1065353216
241dc     1F 14 E6 F4 | 	bitnot	arg02, #31
241e0     E8 F0 BF FD | 	call	#__system___float_add
241e4     FD 12 02 F6 | 	mov	arg01, result1
241e8     D8 F3 BF FD | 	call	#__system___float_sqrt
241ec     FD 12 02 F6 | 	mov	arg01, result1
241f0     0F 15 02 F6 | 	mov	arg02, local01
241f4     0C 00 B0 FD | 	call	#__system____builtin_atan2f
241f8     A7 F0 03 F6 | 	mov	ptra, fp
241fc     B2 00 A0 FD | 	call	#popregs_
24200                 | __system____builtin_acosf_ret
24200     2D 00 64 FD | 	ret
24204                 | 
24204                 | __system____builtin_atan2f
24204     04 4A 05 F6 | 	mov	COUNT_, #4
24208     A8 00 A0 FD | 	call	#pushregs_
2420c     09 1F 02 F6 | 	mov	local01, arg01
24210     0A 21 02 F6 | 	mov	local02, arg02
24214     0F 13 02 F6 | 	mov	arg01, local01
24218     00 14 06 F6 | 	mov	arg02, #0
2421c     01 16 06 F6 | 	mov	arg03, #1
24220     AC F8 BF FD | 	call	#__system___float_cmp
24224     00 FA 0D F2 | 	cmp	result1, #0 wz
24228     28 00 90 5D |  if_ne	jmp	#LR__3420
2422c     10 13 02 F6 | 	mov	arg01, local02
24230     00 14 06 F6 | 	mov	arg02, #0
24234     01 16 06 F6 | 	mov	arg03, #1
24238     94 F8 BF FD | 	call	#__system___float_cmp
2423c     00 FA 55 F2 | 	cmps	result1, #0 wc
24240     87 24 60 CF 
24244     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
24248     DC 00 90 CD |  if_b	jmp	#LR__3421
2424c     00 FA 05 F6 | 	mov	result1, #0
24250     D4 00 90 FD | 	jmp	#LR__3421
24254                 | LR__3420
24254     10 13 02 F6 | 	mov	arg01, local02
24258     10 15 02 F6 | 	mov	arg02, local02
2425c     3C F4 BF FD | 	call	#__system___float_mul
24260     FD 22 02 F6 | 	mov	local03, result1
24264     0F 13 02 F6 | 	mov	arg01, local01
24268     0F 15 02 F6 | 	mov	arg02, local01
2426c     2C F4 BF FD | 	call	#__system___float_mul
24270     FD 14 02 F6 | 	mov	arg02, result1
24274     11 13 02 F6 | 	mov	arg01, local03
24278     50 F0 BF FD | 	call	#__system___float_add
2427c     FD 12 02 F6 | 	mov	arg01, result1
24280     40 F3 BF FD | 	call	#__system___float_sqrt
24284     FD 22 02 F6 | 	mov	local03, result1
24288     10 13 02 F6 | 	mov	arg01, local02
2428c     11 15 02 F6 | 	mov	arg02, local03
24290     0C F6 BF FD | 	call	#__system___float_div
24294     FD 20 02 F6 | 	mov	local02, result1
24298     0F 13 02 F6 | 	mov	arg01, local01
2429c     11 15 02 F6 | 	mov	arg02, local03
242a0     FC F5 BF FD | 	call	#__system___float_div
242a4     FD 1E 02 F6 | 	mov	local01, result1
242a8     00 40 27 FF 
242ac     00 12 06 F6 | 	mov	arg01, ##1317011456
242b0     10 15 02 F6 | 	mov	arg02, local02
242b4     E4 F3 BF FD | 	call	#__system___float_mul
242b8     FD 12 02 F6 | 	mov	arg01, result1
242bc     00 14 06 F6 | 	mov	arg02, #0
242c0     A0 F8 BF FD | 	call	#__system___float_tointeger
242c4     FD 22 02 F6 | 	mov	local03, result1
242c8     00 40 27 FF 
242cc     00 12 06 F6 | 	mov	arg01, ##1317011456
242d0     0F 15 02 F6 | 	mov	arg02, local01
242d4     C4 F3 BF FD | 	call	#__system___float_mul
242d8     FD 12 02 F6 | 	mov	arg01, result1
242dc     00 14 06 F6 | 	mov	arg02, #0
242e0     80 F8 BF FD | 	call	#__system___float_tointeger
242e4     FD 22 52 FD | 	qvector	local03, result1
242e8     87 24 20 FF 
242ec     DB 23 06 F6 | 	mov	local03, ##1078530011
242f0     19 12 62 FD | 	getqy	arg01
242f4     01 12 C6 F0 | 	sar	arg01, #1
242f8     09 13 52 F6 | 	abs	arg01, arg01 wc
242fc     1F 24 C6 C9 |  if_b	decod	local04, #31
24300     00 24 06 36 |  if_ae	mov	local04, #0
24304     90 EF BF FD | 	call	#__system___float_fromuns
24308     12 FB 61 F5 | 	xor	result1, local04
2430c     FD 12 02 F6 | 	mov	arg01, result1
24310     00 40 27 FF 
24314     00 14 06 F6 | 	mov	arg02, ##1317011456
24318     84 F5 BF FD | 	call	#__system___float_div
2431c     FD 14 02 F6 | 	mov	arg02, result1
24320     11 13 02 F6 | 	mov	arg01, local03
24324     74 F3 BF FD | 	call	#__system___float_mul
24328                 | LR__3421
24328     A7 F0 03 F6 | 	mov	ptra, fp
2432c     B2 00 A0 FD | 	call	#popregs_
24330                 | __system____builtin_atan2f_ret
24330     2D 00 64 FD | 	ret
24334                 | 
24334                 | __system____builtin_exp2f
24334     04 4A 05 F6 | 	mov	COUNT_, #4
24338     A8 00 A0 FD | 	call	#pushregs_
2433c     09 1F 02 F6 | 	mov	local01, arg01
24340     00 7F 21 FF 
24344     00 14 06 F6 | 	mov	arg02, ##1123942400
24348     01 16 66 F6 | 	neg	arg03, #1
2434c     80 F7 BF FD | 	call	#__system___float_cmp
24350     00 FA 55 F2 | 	cmps	result1, #0 wc
24354     00 C0 3F 3F 
24358     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
2435c     DC 00 90 3D |  if_ae	jmp	#LR__3431
24360     0F 13 02 F6 | 	mov	arg01, local01
24364     00 7F 61 FF 
24368     00 14 06 F6 | 	mov	arg02, ##-1023541248
2436c     01 16 06 F6 | 	mov	arg03, #1
24370     5C F7 BF FD | 	call	#__system___float_cmp
24374     00 FA 55 F2 | 	cmps	result1, #0 wc
24378     00 FA 05 C6 |  if_b	mov	result1, #0
2437c     BC 00 90 CD |  if_b	jmp	#LR__3431
24380     0F 13 02 F6 | 	mov	arg01, local01
24384     00 14 06 F6 | 	mov	arg02, #0
24388     D8 F7 BF FD | 	call	#__system___float_tointeger
2438c     FD 20 02 F6 | 	mov	local02, result1
24390     10 13 52 F6 | 	abs	arg01, local02 wc
24394     1F 22 C6 C9 |  if_b	decod	local03, #31
24398     00 22 06 36 |  if_ae	mov	local03, #0
2439c     F8 EE BF FD | 	call	#__system___float_fromuns
243a0     11 FB 61 F5 | 	xor	result1, local03
243a4     FD 14 02 F6 | 	mov	arg02, result1
243a8     0F 13 02 F6 | 	mov	arg01, local01
243ac     1F 14 E6 F4 | 	bitnot	arg02, #31
243b0     18 EF BF FD | 	call	#__system___float_add
243b4     FD 24 02 F6 | 	mov	local04, result1
243b8     12 13 02 F6 | 	mov	arg01, local04
243bc     00 14 06 F6 | 	mov	arg02, #0
243c0     01 16 06 F6 | 	mov	arg03, #1
243c4     08 F7 BF FD | 	call	#__system___float_cmp
243c8     00 FA 55 F2 | 	cmps	result1, #0 wc
243cc     18 00 90 3D |  if_ae	jmp	#LR__3430
243d0     12 13 02 F6 | 	mov	arg01, local04
243d4     00 C0 1F FF 
243d8     00 14 06 F6 | 	mov	arg02, ##1065353216
243dc     EC EE BF FD | 	call	#__system___float_add
243e0     FD 24 02 F6 | 	mov	local04, result1
243e4     01 20 86 F1 | 	sub	local02, #1
243e8                 | LR__3430
243e8     7F 20 06 F1 | 	add	local02, #127
243ec     17 20 66 F0 | 	shl	local02, #23
243f0     12 13 02 F6 | 	mov	arg01, local04
243f4     00 80 26 FF 
243f8     00 14 06 F6 | 	mov	arg02, ##1291845632
243fc     9C F2 BF FD | 	call	#__system___float_mul
24400     FD 12 02 F6 | 	mov	arg01, result1
24404     00 14 06 F6 | 	mov	arg02, #0
24408     58 F7 BF FD | 	call	#__system___float_tointeger
2440c     FD 24 0A F6 | 	mov	local04, result1 wz
24410     10 FB 01 A6 |  if_e	mov	result1, local02
24414     24 00 90 AD |  if_e	jmp	#LR__3431
24418     3E 24 26 F4 | 	bith	local04, #62
2441c     0F 24 62 FD | 	qexp	local04
24420     10 13 02 F6 | 	mov	arg01, local02
24424     18 14 62 FD | 	getqx	arg02
24428     01 14 06 F1 | 	add	arg02, #1
2442c     01 14 46 F0 | 	shr	arg02, #1
24430     00 80 1F FF 
24434     00 14 06 F1 | 	add	arg02, ##1056964608
24438     60 F2 BF FD | 	call	#__system___float_mul
2443c                 | LR__3431
2443c     A7 F0 03 F6 | 	mov	ptra, fp
24440     B2 00 A0 FD | 	call	#popregs_
24444                 | __system____builtin_exp2f_ret
24444     2D 00 64 FD | 	ret
24448                 | 
24448                 | __system____builtin_log2f
24448     06 4A 05 F6 | 	mov	COUNT_, #6
2444c     A8 00 A0 FD | 	call	#pushregs_
24450     09 1F 02 F6 | 	mov	local01, arg01
24454     09 21 0A F6 | 	mov	local02, arg01 wz
24458     00 00 40 5F 
2445c     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
24460     00 40 00 AF 
24464     00 FA 65 A6 |  if_e	neg	result1, ##8388608
24468     08 01 90 AD |  if_e	jmp	#LR__3444
2446c     00 20 56 F2 | 	cmps	local02, #0 wc
24470     00 E0 3F CF 
24474     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
24478     F8 00 90 CD |  if_b	jmp	#LR__3444
2447c     0F 13 02 F6 | 	mov	arg01, local01
24480     00 90 20 FF 
24484     00 14 06 F6 | 	mov	arg02, ##1092616192
24488     01 16 06 F6 | 	mov	arg03, #1
2448c     40 F6 BF FD | 	call	#__system___float_cmp
24490     00 FA 0D F2 | 	cmp	result1, #0 wz
24494     4D 2A 20 AF 
24498     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
2449c     D4 00 90 AD |  if_e	jmp	#LR__3444
244a0     0F 13 02 F6 | 	mov	arg01, local01
244a4     FC 16 20 FF 
244a8     54 14 06 F6 | 	mov	arg02, ##1076754516
244ac     01 16 06 F6 | 	mov	arg03, #1
244b0     1C F6 BF FD | 	call	#__system___float_cmp
244b4     00 FA 0D F2 | 	cmp	result1, #0 wz
244b8     55 DC 1F AF 
244bc     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
244c0     B0 00 90 AD |  if_e	jmp	#LR__3444
244c4     10 23 02 F6 | 	mov	local03, local02
244c8     17 22 46 F0 | 	shr	local03, #23
244cc     11 23 E2 F8 | 	getbyte	local03, local03, #0
244d0     17 21 06 F4 | 	bitl	local02, #279
244d4     10 25 02 F6 | 	mov	local04, local02
244d8     FF 22 0E F2 | 	cmp	local03, #255 wz
244dc     1C 00 90 5D |  if_ne	jmp	#LR__3440
244e0     00 24 0E F2 | 	cmp	local04, #0 wz
244e4     00 C0 3F 5F 
244e8     00 26 06 56 |  if_ne	mov	local05, ##2139095040
244ec     00 E0 3F AF 
244f0     00 26 06 A6 |  if_e	mov	local05, ##2143289344
244f4     13 FB 01 F6 | 	mov	result1, local05
244f8     78 00 90 FD | 	jmp	#LR__3444
244fc                 | LR__3440
244fc     00 22 0E F2 | 	cmp	local03, #0 wz
24500     17 24 26 54 |  if_ne	bith	local04, #23
24504     7F 22 86 51 |  if_ne	sub	local03, #127
24508     28 00 90 5D |  if_ne	jmp	#LR__3443
2450c     00 24 0E F2 | 	cmp	local04, #0 wz
24510     00 40 00 AF 
24514     00 FA 65 A6 |  if_e	neg	result1, ##8388608
24518     58 00 90 AD |  if_e	jmp	#LR__3444
2451c     7E 22 66 F6 | 	neg	local03, #126
24520     97 08 48 FB | 	callpa	#(@LR__3442-@LR__3441)>>2,fcache_load_ptr_
24524                 | LR__3441
24524     17 24 2E F4 | 	testbn	local04, #23 wz
24528     01 24 66 A0 |  if_e	shl	local04, #1
2452c     01 22 06 A1 |  if_e	add	local03, #1
24530     F0 FF 9F AD |  if_e	jmp	#LR__3441
24534                 | LR__3442
24534                 | LR__3443
24534     0E 24 62 FD | 	qlog	local04
24538     01 22 86 F1 | 	sub	local03, #1
2453c     11 13 52 F6 | 	abs	arg01, local03 wc
24540     1F 28 C6 C9 |  if_b	decod	local06, #31
24544     00 28 06 36 |  if_ae	mov	local06, #0
24548     18 26 62 FD | 	getqx	local05
2454c     9B 26 06 F4 | 	bitl	local05, #155
24550     08 26 06 F1 | 	add	local05, #8
24554     04 26 46 F0 | 	shr	local05, #4
24558     00 C0 1F FF 
2455c     00 26 06 F1 | 	add	local05, ##1065353216
24560     34 ED BF FD | 	call	#__system___float_fromuns
24564     14 FB 61 F5 | 	xor	result1, local06
24568     FD 14 02 F6 | 	mov	arg02, result1
2456c     13 13 02 F6 | 	mov	arg01, local05
24570     58 ED BF FD | 	call	#__system___float_add
24574                 | LR__3444
24574     A7 F0 03 F6 | 	mov	ptra, fp
24578     B2 00 A0 FD | 	call	#popregs_
2457c                 | __system____builtin_log2f_ret
2457c     2D 00 64 FD | 	ret
24580                 | 
24580                 | __system____builtin_powf
24580     04 4A 05 F6 | 	mov	COUNT_, #4
24584     A8 00 A0 FD | 	call	#pushregs_
24588     09 1F 02 F6 | 	mov	local01, arg01
2458c     0A 21 02 F6 | 	mov	local02, arg02
24590     10 13 02 F6 | 	mov	arg01, local02
24594     00 14 06 F6 | 	mov	arg02, #0
24598     C8 F5 BF FD | 	call	#__system___float_tointeger
2459c     FD 22 02 F6 | 	mov	local03, result1
245a0     11 13 52 F6 | 	abs	arg01, local03 wc
245a4     1F 24 C6 C9 |  if_b	decod	local04, #31
245a8     00 24 06 36 |  if_ae	mov	local04, #0
245ac     E8 EC BF FD | 	call	#__system___float_fromuns
245b0     12 FB 61 F5 | 	xor	result1, local04
245b4     FD 12 02 F6 | 	mov	arg01, result1
245b8     10 15 02 F6 | 	mov	arg02, local02
245bc     01 16 06 F6 | 	mov	arg03, #1
245c0     0C F5 BF FD | 	call	#__system___float_cmp
245c4     00 FA 0D F2 | 	cmp	result1, #0 wz
245c8     18 00 90 5D |  if_ne	jmp	#LR__3450
245cc     00 C0 1F FF 
245d0     00 12 06 F6 | 	mov	arg01, ##1065353216
245d4     0F 15 02 F6 | 	mov	arg02, local01
245d8     11 17 02 F6 | 	mov	arg03, local03
245dc     A0 00 B0 FD | 	call	#__system___float_pow_n
245e0     58 00 90 FD | 	jmp	#LR__3451
245e4                 | LR__3450
245e4     0F 13 02 F6 | 	mov	arg01, local01
245e8     00 14 06 F6 | 	mov	arg02, #0
245ec     01 16 06 F6 | 	mov	arg03, #1
245f0     DC F4 BF FD | 	call	#__system___float_cmp
245f4     00 FA 55 F2 | 	cmps	result1, #0 wc
245f8     00 E0 3F CF 
245fc     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
24600     38 00 90 CD |  if_b	jmp	#LR__3451
24604     0F 13 02 F6 | 	mov	arg01, local01
24608     00 14 06 F6 | 	mov	arg02, #0
2460c     01 16 06 F6 | 	mov	arg03, #1
24610     BC F4 BF FD | 	call	#__system___float_cmp
24614     00 FA 0D F2 | 	cmp	result1, #0 wz
24618     00 FA 05 A6 |  if_e	mov	result1, #0
2461c     1C 00 90 AD |  if_e	jmp	#LR__3451
24620     0F 13 02 F6 | 	mov	arg01, local01
24624     20 FE BF FD | 	call	#__system____builtin_log2f
24628     FD 12 02 F6 | 	mov	arg01, result1
2462c     10 15 02 F6 | 	mov	arg02, local02
24630     68 F0 BF FD | 	call	#__system___float_mul
24634     FD 12 02 F6 | 	mov	arg01, result1
24638     F8 FC BF FD | 	call	#__system____builtin_exp2f
2463c                 | LR__3451
2463c     A7 F0 03 F6 | 	mov	ptra, fp
24640     B2 00 A0 FD | 	call	#popregs_
24644                 | __system____builtin_powf_ret
24644     2D 00 64 FD | 	ret
24648                 | 
24648                 | __system____builtin_logbase
24648     02 4A 05 F6 | 	mov	COUNT_, #2
2464c     A8 00 A0 FD | 	call	#pushregs_
24650     09 1F 02 F6 | 	mov	local01, arg01
24654     0A 13 02 F6 | 	mov	arg01, arg02
24658     EC FD BF FD | 	call	#__system____builtin_log2f
2465c     FD 20 02 F6 | 	mov	local02, result1
24660     0F 13 02 F6 | 	mov	arg01, local01
24664     E0 FD BF FD | 	call	#__system____builtin_log2f
24668     FD 14 02 F6 | 	mov	arg02, result1
2466c     10 13 02 F6 | 	mov	arg01, local02
24670     2C F2 BF FD | 	call	#__system___float_div
24674     A7 F0 03 F6 | 	mov	ptra, fp
24678     B2 00 A0 FD | 	call	#popregs_
2467c                 | __system____builtin_logbase_ret
2467c     2D 00 64 FD | 	ret
24680                 | 
24680                 | __system___float_pow_n
24680     05 4A 05 F6 | 	mov	COUNT_, #5
24684     A8 00 A0 FD | 	call	#pushregs_
24688     09 1F 02 F6 | 	mov	local01, arg01
2468c     0A 21 02 F6 | 	mov	local02, arg02
24690     0B 23 02 F6 | 	mov	local03, arg03
24694     00 22 56 F2 | 	cmps	local03, #0 wc
24698     18 00 90 3D |  if_ae	jmp	#LR__3460
2469c     01 24 06 F6 | 	mov	local04, #1
246a0     11 23 62 F6 | 	neg	local03, local03
246a4     00 22 56 F2 | 	cmps	local03, #0 wc
246a8     00 FA 05 C6 |  if_b	mov	result1, #0
246ac     94 00 90 CD |  if_b	jmp	#LR__3468
246b0     04 00 90 FD | 	jmp	#LR__3461
246b4                 | LR__3460
246b4     00 24 06 F6 | 	mov	local04, #0
246b8                 | LR__3461
246b8     00 C0 1F FF 
246bc     00 26 06 F6 | 	mov	local05, ##1065353216
246c0                 | LR__3462
246c0     01 22 56 F2 | 	cmps	local03, #1 wc
246c4     30 00 90 CD |  if_b	jmp	#LR__3464
246c8     01 22 CE F7 | 	test	local03, #1 wz
246cc     10 00 90 AD |  if_e	jmp	#LR__3463
246d0     13 13 02 F6 | 	mov	arg01, local05
246d4     10 15 02 F6 | 	mov	arg02, local02
246d8     C0 EF BF FD | 	call	#__system___float_mul
246dc     FD 26 02 F6 | 	mov	local05, result1
246e0                 | LR__3463
246e0     01 22 C6 F0 | 	sar	local03, #1
246e4     10 13 02 F6 | 	mov	arg01, local02
246e8     10 15 02 F6 | 	mov	arg02, local02
246ec     AC EF BF FD | 	call	#__system___float_mul
246f0     FD 20 02 F6 | 	mov	local02, result1
246f4     C8 FF 9F FD | 	jmp	#LR__3462
246f8                 | LR__3464
246f8     00 24 0E F2 | 	cmp	local04, #0 wz
246fc     14 00 90 AD |  if_e	jmp	#LR__3465
24700     0F 13 02 F6 | 	mov	arg01, local01
24704     13 15 02 F6 | 	mov	arg02, local05
24708     94 F1 BF FD | 	call	#__system___float_div
2470c     FD 26 02 F6 | 	mov	local05, result1
24710     2C 00 90 FD | 	jmp	#LR__3467
24714                 | LR__3465
24714     0F 13 02 F6 | 	mov	arg01, local01
24718     00 C0 1F FF 
2471c     00 14 06 F6 | 	mov	arg02, ##1065353216
24720     01 16 06 F6 | 	mov	arg03, #1
24724     A8 F3 BF FD | 	call	#__system___float_cmp
24728     00 FA 0D F2 | 	cmp	result1, #0 wz
2472c     10 00 90 AD |  if_e	jmp	#LR__3466
24730     0F 13 02 F6 | 	mov	arg01, local01
24734     13 15 02 F6 | 	mov	arg02, local05
24738     60 EF BF FD | 	call	#__system___float_mul
2473c     FD 26 02 F6 | 	mov	local05, result1
24740                 | LR__3466
24740                 | LR__3467
24740     13 FB 01 F6 | 	mov	result1, local05
24744                 | LR__3468
24744     A7 F0 03 F6 | 	mov	ptra, fp
24748     B2 00 A0 FD | 	call	#popregs_
2474c                 | __system___float_pow_n_ret
2474c     2D 00 64 FD | 	ret
24750                 | 
24750                 | __system___gc_ptrs
24750     EC 00 02 F6 | 	mov	_var01, __heap_ptr
24754     00 03 02 F6 | 	mov	_var02, _var01
24758     76 01 00 FF 
2475c     F8 03 06 F1 | 	add	_var02, ##191992
24760     00 FD 09 FB | 	rdlong	result2, _var01 wz
24764     74 00 90 5D |  if_ne	jmp	#LR__3470
24768     01 FD 01 F6 | 	mov	result2, _var02
2476c     00 FD 81 F1 | 	sub	result2, _var01
24770     00 03 58 FC | 	wrword	#1, _var01
24774     00 FB 01 F6 | 	mov	result1, _var01
24778     02 FA 05 F1 | 	add	result1, #2
2477c     36 00 80 FF 
24780     FD 20 59 FC | 	wrword	##27792, result1
24784     00 FB 01 F6 | 	mov	result1, _var01
24788     04 FA 05 F1 | 	add	result1, #4
2478c     FD 00 58 FC | 	wrword	#0, result1
24790     00 FB 01 F6 | 	mov	result1, _var01
24794     06 FA 05 F1 | 	add	result1, #6
24798     FD 02 58 FC | 	wrword	#1, result1
2479c     10 00 06 F1 | 	add	_var01, #16
247a0     FE FC 51 F6 | 	abs	result2, result2 wc
247a4     04 FC 45 F0 | 	shr	result2, #4
247a8     FE FC 81 F6 | 	negc	result2, result2
247ac     00 FD 51 FC | 	wrword	result2, _var01
247b0     00 FD 01 F6 | 	mov	result2, _var01
247b4     02 FC 05 F1 | 	add	result2, #2
247b8     36 00 80 FF 
247bc     FE 1E 59 FC | 	wrword	##27791, result2
247c0     00 FD 01 F6 | 	mov	result2, _var01
247c4     04 FC 05 F1 | 	add	result2, #4
247c8     FE 00 58 FC | 	wrword	#0, result2
247cc     00 FD 01 F6 | 	mov	result2, _var01
247d0     06 FC 05 F1 | 	add	result2, #6
247d4     FE 00 58 FC | 	wrword	#0, result2
247d8     10 00 86 F1 | 	sub	_var01, #16
247dc                 | LR__3470
247dc     00 FB 01 F6 | 	mov	result1, _var01
247e0     01 FD 01 F6 | 	mov	result2, _var02
247e4                 | __system___gc_ptrs_ret
247e4     2D 00 64 FD | 	ret
247e8                 | 
247e8                 | __system___gc_tryalloc
247e8     0B 4A 05 F6 | 	mov	COUNT_, #11
247ec     A8 00 A0 FD | 	call	#pushregs_
247f0     09 1F 02 F6 | 	mov	local01, arg01
247f4     0A 21 02 F6 | 	mov	local02, arg02
247f8     54 FF BF FD | 	call	#__system___gc_ptrs
247fc     FD 22 02 F6 | 	mov	local03, result1
24800     FE 24 02 F6 | 	mov	local04, result2
24804     11 27 02 F6 | 	mov	local05, local03
24808     00 28 06 F6 | 	mov	local06, #0
2480c     97 1E 48 FB | 	callpa	#(@LR__3481-@LR__3480)>>2,fcache_load_ptr_
24810                 | LR__3480
24810     13 2B 02 F6 | 	mov	local07, local05
24814     06 26 06 F1 | 	add	local05, #6
24818     13 15 EA FA | 	rdword	arg02, local05 wz
2481c     11 13 02 F6 | 	mov	arg01, local03
24820     00 FA 05 A6 |  if_e	mov	result1, #0
24824     04 14 66 50 |  if_ne	shl	arg02, #4
24828     0A 13 02 51 |  if_ne	add	arg01, arg02
2482c     09 FB 01 56 |  if_ne	mov	result1, arg01
24830     FD 26 0A F6 | 	mov	local05, result1 wz
24834     13 29 E2 5A |  if_ne	rdword	local06, local05
24838     00 26 0E F2 | 	cmp	local05, #0 wz
2483c     12 27 52 52 |  if_ne	cmps	local05, local04 wc
24840     08 00 90 1D |  if_a	jmp	#LR__3482
24844     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
24848     C4 FF 9F 1D |  if_a	jmp	#LR__3480
2484c                 | LR__3481
2484c                 | LR__3482
2484c     00 26 0E F2 | 	cmp	local05, #0 wz
24850     13 FB 01 A6 |  if_e	mov	result1, local05
24854     3C 01 90 AD |  if_e	jmp	#LR__3485
24858     13 FD 01 F6 | 	mov	result2, local05
2485c     06 FC 05 F1 | 	add	result2, #6
24860     FE 2C E2 FA | 	rdword	local08, result2
24864     14 1F 52 F2 | 	cmps	local01, local06 wc
24868     C0 00 90 3D |  if_ae	jmp	#LR__3484
2486c     13 1F 52 FC | 	wrword	local01, local05
24870     13 13 02 F6 | 	mov	arg01, local05
24874     0F 2D 02 F6 | 	mov	local08, local01
24878     04 2C 66 F0 | 	shl	local08, #4
2487c     16 13 02 F1 | 	add	arg01, local08
24880     0F 29 82 F1 | 	sub	local06, local01
24884     09 29 52 FC | 	wrword	local06, arg01
24888     09 2D 02 F6 | 	mov	local08, arg01
2488c     02 2C 06 F1 | 	add	local08, #2
24890     36 00 80 FF 
24894     16 1F 59 FC | 	wrword	##27791, local08
24898     13 15 0A F6 | 	mov	arg02, local05 wz
2489c     00 FA 05 A6 |  if_e	mov	result1, #0
248a0     11 15 82 51 |  if_ne	sub	arg02, local03
248a4     04 14 46 50 |  if_ne	shr	arg02, #4
248a8     0A FB 01 56 |  if_ne	mov	result1, arg02
248ac     09 2D 02 F6 | 	mov	local08, arg01
248b0     04 2C 06 F1 | 	add	local08, #4
248b4     16 FB 51 FC | 	wrword	result1, local08
248b8     13 2D 02 F6 | 	mov	local08, local05
248bc     06 2C 06 F1 | 	add	local08, #6
248c0     09 15 02 F6 | 	mov	arg02, arg01
248c4     16 2D E2 FA | 	rdword	local08, local08
248c8     06 14 06 F1 | 	add	arg02, #6
248cc     0A 2D 52 FC | 	wrword	local08, arg02
248d0     09 2F 02 F6 | 	mov	local09, arg01
248d4     17 15 0A F6 | 	mov	arg02, local09 wz
248d8     00 FA 05 A6 |  if_e	mov	result1, #0
248dc     11 15 82 51 |  if_ne	sub	arg02, local03
248e0     04 14 46 50 |  if_ne	shr	arg02, #4
248e4     0A FB 01 56 |  if_ne	mov	result1, arg02
248e8     FD 2C 02 F6 | 	mov	local08, result1
248ec     09 31 EA FA | 	rdword	local10, arg01 wz
248f0     00 FA 05 A6 |  if_e	mov	result1, #0
248f4     04 30 66 50 |  if_ne	shl	local10, #4
248f8     18 13 02 51 |  if_ne	add	arg01, local10
248fc     09 FB 01 56 |  if_ne	mov	result1, arg01
24900     FD 32 0A F6 | 	mov	local11, result1 wz
24904     24 00 90 AD |  if_e	jmp	#LR__3483
24908     12 33 52 F2 | 	cmps	local11, local04 wc
2490c     1C 00 90 3D |  if_ae	jmp	#LR__3483
24910     17 15 0A F6 | 	mov	arg02, local09 wz
24914     00 FA 05 A6 |  if_e	mov	result1, #0
24918     11 15 82 51 |  if_ne	sub	arg02, local03
2491c     04 14 46 50 |  if_ne	shr	arg02, #4
24920     0A FB 01 56 |  if_ne	mov	result1, arg02
24924     04 32 06 F1 | 	add	local11, #4
24928     19 FB 51 FC | 	wrword	result1, local11
2492c                 | LR__3483
2492c                 | LR__3484
2492c     06 2A 06 F1 | 	add	local07, #6
24930     15 2D 52 FC | 	wrword	local08, local07
24934     36 00 00 FF 
24938     80 2E 06 F6 | 	mov	local09, ##27776
2493c     10 2F 42 F5 | 	or	local09, local02
24940     00 FA 05 F6 | 	mov	result1, #0
24944     01 FA 61 FD | 	cogid	result1
24948     FD 2E 42 F5 | 	or	local09, result1
2494c     13 33 02 F6 | 	mov	local11, local05
24950     02 32 06 F1 | 	add	local11, #2
24954     19 2F 52 FC | 	wrword	local09, local11
24958     11 2F 02 F6 | 	mov	local09, local03
2495c     08 2E 06 F1 | 	add	local09, #8
24960     13 33 02 F6 | 	mov	local11, local05
24964     17 2F E2 FA | 	rdword	local09, local09
24968     06 32 06 F1 | 	add	local11, #6
2496c     19 2F 52 FC | 	wrword	local09, local11
24970     13 15 0A F6 | 	mov	arg02, local05 wz
24974     00 FA 05 A6 |  if_e	mov	result1, #0
24978     11 15 82 51 |  if_ne	sub	arg02, local03
2497c     04 14 46 50 |  if_ne	shr	arg02, #4
24980     0A FB 01 56 |  if_ne	mov	result1, arg02
24984     08 22 06 F1 | 	add	local03, #8
24988     11 FB 51 FC | 	wrword	result1, local03
2498c     08 26 06 F1 | 	add	local05, #8
24990     13 FB 01 F6 | 	mov	result1, local05
24994                 | LR__3485
24994     A7 F0 03 F6 | 	mov	ptra, fp
24998     B2 00 A0 FD | 	call	#popregs_
2499c                 | __system___gc_tryalloc_ret
2499c     2D 00 64 FD | 	ret
249a0                 | 
249a0                 | __system___gc_alloc_managed
249a0     01 4A 05 F6 | 	mov	COUNT_, #1
249a4     A8 00 A0 FD | 	call	#pushregs_
249a8     09 1F 02 F6 | 	mov	local01, arg01
249ac     00 14 06 F6 | 	mov	arg02, #0
249b0     1C 00 B0 FD | 	call	#__system___gc_doalloc
249b4     FD 14 0A F6 | 	mov	arg02, result1 wz
249b8     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
249bc     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
249c0     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
249c4     A7 F0 03 F6 | 	mov	ptra, fp
249c8     B2 00 A0 FD | 	call	#popregs_
249cc                 | __system___gc_alloc_managed_ret
249cc     2D 00 64 FD | 	ret
249d0                 | 
249d0                 | __system___gc_doalloc
249d0     06 4A 05 F6 | 	mov	COUNT_, #6
249d4     A8 00 A0 FD | 	call	#pushregs_
249d8     09 1F 0A F6 | 	mov	local01, arg01 wz
249dc     0A 21 02 F6 | 	mov	local02, arg02
249e0     00 FA 05 A6 |  if_e	mov	result1, #0
249e4     8C 00 90 AD |  if_e	jmp	#LR__3497
249e8     17 1E 06 F1 | 	add	local01, #23
249ec     0F 1E 26 F5 | 	andn	local01, #15
249f0     04 1E 46 F0 | 	shr	local01, #4
249f4     1C E6 05 F1 | 	add	ptr___system__dat__, #28
249f8     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
249fc     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
24a00     E4 C0 BF FD | 	call	#__system___lockmem
24a04     0F 13 02 F6 | 	mov	arg01, local01
24a08     10 15 02 F6 | 	mov	arg02, local02
24a0c     D8 FD BF FD | 	call	#__system___gc_tryalloc
24a10     FD 22 0A F6 | 	mov	local03, result1 wz
24a14     14 00 90 5D |  if_ne	jmp	#LR__3490
24a18     70 03 B0 FD | 	call	#__system___gc_docollect
24a1c     0F 13 02 F6 | 	mov	arg01, local01
24a20     10 15 02 F6 | 	mov	arg02, local02
24a24     C0 FD BF FD | 	call	#__system___gc_tryalloc
24a28     FD 22 02 F6 | 	mov	local03, result1
24a2c                 | LR__3490
24a2c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24a30     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24a34     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
24a38     09 01 68 FC | 	wrlong	#0, arg01
24a3c     00 22 0E F2 | 	cmp	local03, #0 wz
24a40     2C 00 90 AD |  if_e	jmp	#LR__3496
24a44     04 1E 66 F0 | 	shl	local01, #4
24a48     08 1E 86 F1 | 	sub	local01, #8
24a4c     0F 25 52 F6 | 	abs	local04, local01 wc
24a50     02 24 46 F0 | 	shr	local04, #2
24a54     12 27 8A F6 | 	negc	local05, local04 wz
24a58     11 29 02 F6 | 	mov	local06, local03
24a5c     10 00 90 AD |  if_e	jmp	#LR__3495
24a60     97 06 48 FB | 	callpa	#(@LR__3493-@LR__3491)>>2,fcache_load_ptr_
24a64                 | LR__3491
24a64     13 05 D8 FC | 	rep	@LR__3494, local05
24a68                 | LR__3492
24a68     14 01 68 FC | 	wrlong	#0, local06
24a6c     04 28 06 F1 | 	add	local06, #4
24a70                 | LR__3493
24a70                 | LR__3494
24a70                 | LR__3495
24a70                 | LR__3496
24a70     11 FB 01 F6 | 	mov	result1, local03
24a74                 | LR__3497
24a74     A7 F0 03 F6 | 	mov	ptra, fp
24a78     B2 00 A0 FD | 	call	#popregs_
24a7c                 | __system___gc_doalloc_ret
24a7c     2D 00 64 FD | 	ret
24a80                 | 
24a80                 | __system___gc_isvalidptr
24a80     F8 16 06 F4 | 	bitl	arg03, #248
24a84     08 16 86 F1 | 	sub	arg03, #8
24a88     09 17 52 F2 | 	cmps	arg03, arg01 wc
24a8c     08 00 90 CD |  if_b	jmp	#LR__3500
24a90     0A 17 52 F2 | 	cmps	arg03, arg02 wc
24a94     08 00 90 CD |  if_b	jmp	#LR__3501
24a98                 | LR__3500
24a98     00 FA 05 F6 | 	mov	result1, #0
24a9c     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
24aa0                 | LR__3501
24aa0     0B 01 02 F6 | 	mov	_var01, arg03
24aa4     09 01 62 F5 | 	xor	_var01, arg01
24aa8     0F 00 CE F7 | 	test	_var01, #15 wz
24aac     00 FA 05 56 |  if_ne	mov	result1, #0
24ab0     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
24ab4     0B 01 02 F6 | 	mov	_var01, arg03
24ab8     02 00 06 F1 | 	add	_var01, #2
24abc     00 01 E2 FA | 	rdword	_var01, _var01
24ac0     7F 00 00 FF 
24ac4     C0 01 06 F5 | 	and	_var01, ##65472
24ac8     36 00 00 FF 
24acc     80 00 0E F2 | 	cmp	_var01, ##27776 wz
24ad0     00 FA 05 56 |  if_ne	mov	result1, #0
24ad4     0B FB 01 A6 |  if_e	mov	result1, arg03
24ad8                 | __system___gc_isvalidptr_ret
24ad8     2D 00 64 FD | 	ret
24adc                 | 
24adc                 | __system___gc_free
24adc     09 17 02 F6 | 	mov	arg03, arg01
24ae0     6C FC BF FD | 	call	#__system___gc_ptrs
24ae4     FD 12 02 F6 | 	mov	arg01, result1
24ae8     FE 14 02 F6 | 	mov	arg02, result2
24aec     90 FF BF FD | 	call	#__system___gc_isvalidptr
24af0     FD 14 0A F6 | 	mov	arg02, result1 wz
24af4     28 00 90 AD |  if_e	jmp	#LR__3510
24af8     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24afc     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24b00     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
24b04     E0 BF BF FD | 	call	#__system___lockmem
24b08     0A 13 02 F6 | 	mov	arg01, arg02
24b0c     14 00 B0 FD | 	call	#__system___gc_dofree
24b10     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24b14     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24b18     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
24b1c     09 01 68 FC | 	wrlong	#0, arg01
24b20                 | LR__3510
24b20                 | __system___gc_free_ret
24b20     2D 00 64 FD | 	ret
24b24                 | 
24b24                 | __system___gc_dofree
24b24     06 4A 05 F6 | 	mov	COUNT_, #6
24b28     A8 00 A0 FD | 	call	#pushregs_
24b2c     09 1F 02 F6 | 	mov	local01, arg01
24b30     1C FC BF FD | 	call	#__system___gc_ptrs
24b34     FD 20 02 F6 | 	mov	local02, result1
24b38     FE 22 02 F6 | 	mov	local03, result2
24b3c     0F 15 02 F6 | 	mov	arg02, local01
24b40     02 14 06 F1 | 	add	arg02, #2
24b44     36 00 80 FF 
24b48     0A 1F 59 FC | 	wrword	##27791, arg02
24b4c     0F 25 02 F6 | 	mov	local04, local01
24b50     0F 13 02 F6 | 	mov	arg01, local01
24b54     09 27 EA FA | 	rdword	local05, arg01 wz
24b58     00 FA 05 A6 |  if_e	mov	result1, #0
24b5c     04 26 66 50 |  if_ne	shl	local05, #4
24b60     13 13 02 51 |  if_ne	add	arg01, local05
24b64     09 FB 01 56 |  if_ne	mov	result1, arg01
24b68     FD 28 02 F6 | 	mov	local06, result1
24b6c     97 24 48 FB | 	callpa	#(@LR__3521-@LR__3520)>>2,fcache_load_ptr_
24b70                 | LR__3520
24b70     04 24 06 F1 | 	add	local04, #4
24b74     12 15 EA FA | 	rdword	arg02, local04 wz
24b78     10 13 02 F6 | 	mov	arg01, local02
24b7c     00 FA 05 A6 |  if_e	mov	result1, #0
24b80     04 14 66 50 |  if_ne	shl	arg02, #4
24b84     0A 13 02 51 |  if_ne	add	arg01, arg02
24b88     09 FB 01 56 |  if_ne	mov	result1, arg01
24b8c     FD 24 0A F6 | 	mov	local04, result1 wz
24b90     24 00 90 AD |  if_e	jmp	#LR__3522
24b94     12 13 02 F6 | 	mov	arg01, local04
24b98     00 FA 05 F6 | 	mov	result1, #0
24b9c     02 12 06 F1 | 	add	arg01, #2
24ba0     09 13 E2 FA | 	rdword	arg01, arg01
24ba4     36 00 00 FF 
24ba8     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24bac     01 FA 65 A6 |  if_e	neg	result1, #1
24bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
24bb4     B8 FF 9F AD |  if_e	jmp	#LR__3520
24bb8                 | LR__3521
24bb8                 | LR__3522
24bb8     00 24 0E F2 | 	cmp	local04, #0 wz
24bbc     10 25 02 A6 |  if_e	mov	local04, local02
24bc0     12 15 02 F6 | 	mov	arg02, local04
24bc4     06 14 06 F1 | 	add	arg02, #6
24bc8     0F 13 02 F6 | 	mov	arg01, local01
24bcc     0A 15 E2 FA | 	rdword	arg02, arg02
24bd0     06 12 06 F1 | 	add	arg01, #6
24bd4     09 15 52 FC | 	wrword	arg02, arg01
24bd8     0F 15 0A F6 | 	mov	arg02, local01 wz
24bdc     00 FA 05 A6 |  if_e	mov	result1, #0
24be0     10 15 82 51 |  if_ne	sub	arg02, local02
24be4     04 14 46 50 |  if_ne	shr	arg02, #4
24be8     0A FB 01 56 |  if_ne	mov	result1, arg02
24bec     12 15 02 F6 | 	mov	arg02, local04
24bf0     06 14 06 F1 | 	add	arg02, #6
24bf4     0A FB 51 FC | 	wrword	result1, arg02
24bf8     10 25 0A F2 | 	cmp	local04, local02 wz
24bfc     A4 00 90 AD |  if_e	jmp	#LR__3525
24c00     12 13 02 F6 | 	mov	arg01, local04
24c04     09 27 EA FA | 	rdword	local05, arg01 wz
24c08     00 FA 05 A6 |  if_e	mov	result1, #0
24c0c     04 26 66 50 |  if_ne	shl	local05, #4
24c10     13 13 02 51 |  if_ne	add	arg01, local05
24c14     09 FB 01 56 |  if_ne	mov	result1, arg01
24c18     0F FB 09 F2 | 	cmp	result1, local01 wz
24c1c     84 00 90 5D |  if_ne	jmp	#LR__3524
24c20     12 29 E2 FA | 	rdword	local06, local04
24c24     0F 15 E2 FA | 	rdword	arg02, local01
24c28     0A 29 02 F1 | 	add	local06, arg02
24c2c     12 29 52 FC | 	wrword	local06, local04
24c30     0F 29 02 F6 | 	mov	local06, local01
24c34     02 28 06 F1 | 	add	local06, #2
24c38     14 01 58 FC | 	wrword	#0, local06
24c3c     0F 13 02 F6 | 	mov	arg01, local01
24c40     09 27 EA FA | 	rdword	local05, arg01 wz
24c44     00 FA 05 A6 |  if_e	mov	result1, #0
24c48     04 26 66 50 |  if_ne	shl	local05, #4
24c4c     13 13 02 51 |  if_ne	add	arg01, local05
24c50     09 FB 01 56 |  if_ne	mov	result1, arg01
24c54     FD 28 02 F6 | 	mov	local06, result1
24c58     11 29 52 F2 | 	cmps	local06, local03 wc
24c5c     20 00 90 3D |  if_ae	jmp	#LR__3523
24c60     12 15 0A F6 | 	mov	arg02, local04 wz
24c64     00 FA 05 A6 |  if_e	mov	result1, #0
24c68     10 15 82 51 |  if_ne	sub	arg02, local02
24c6c     04 14 46 50 |  if_ne	shr	arg02, #4
24c70     0A FB 01 56 |  if_ne	mov	result1, arg02
24c74     14 15 02 F6 | 	mov	arg02, local06
24c78     04 14 06 F1 | 	add	arg02, #4
24c7c     0A FB 51 FC | 	wrword	result1, arg02
24c80                 | LR__3523
24c80     0F 15 02 F6 | 	mov	arg02, local01
24c84     06 14 06 F1 | 	add	arg02, #6
24c88     12 FD 01 F6 | 	mov	result2, local04
24c8c     0A 15 E2 FA | 	rdword	arg02, arg02
24c90     06 FC 05 F1 | 	add	result2, #6
24c94     FE 14 52 FC | 	wrword	arg02, result2
24c98     06 1E 06 F1 | 	add	local01, #6
24c9c     0F 01 58 FC | 	wrword	#0, local01
24ca0     12 1F 02 F6 | 	mov	local01, local04
24ca4                 | LR__3524
24ca4                 | LR__3525
24ca4     0F 13 02 F6 | 	mov	arg01, local01
24ca8     09 27 EA FA | 	rdword	local05, arg01 wz
24cac     00 FA 05 A6 |  if_e	mov	result1, #0
24cb0     04 26 66 50 |  if_ne	shl	local05, #4
24cb4     13 13 02 51 |  if_ne	add	arg01, local05
24cb8     09 FB 01 56 |  if_ne	mov	result1, arg01
24cbc     FD 14 0A F6 | 	mov	arg02, result1 wz
24cc0     B8 00 90 AD |  if_e	jmp	#LR__3527
24cc4     11 15 52 F2 | 	cmps	arg02, local03 wc
24cc8     B0 00 90 3D |  if_ae	jmp	#LR__3527
24ccc     0A 13 02 F6 | 	mov	arg01, arg02
24cd0     00 FA 05 F6 | 	mov	result1, #0
24cd4     02 12 06 F1 | 	add	arg01, #2
24cd8     09 13 E2 FA | 	rdword	arg01, arg01
24cdc     36 00 00 FF 
24ce0     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24ce4     01 FA 65 A6 |  if_e	neg	result1, #1
24ce8     00 FA 0D F2 | 	cmp	result1, #0 wz
24cec     8C 00 90 AD |  if_e	jmp	#LR__3527
24cf0     0F 25 02 F6 | 	mov	local04, local01
24cf4     12 29 E2 FA | 	rdword	local06, local04
24cf8     0A 13 02 F6 | 	mov	arg01, arg02
24cfc     09 1F E2 FA | 	rdword	local01, arg01
24d00     0F 29 02 F1 | 	add	local06, local01
24d04     12 29 52 FC | 	wrword	local06, local04
24d08     09 29 02 F6 | 	mov	local06, arg01
24d0c     06 28 06 F1 | 	add	local06, #6
24d10     12 1F 02 F6 | 	mov	local01, local04
24d14     14 29 E2 FA | 	rdword	local06, local06
24d18     06 1E 06 F1 | 	add	local01, #6
24d1c     0F 29 52 FC | 	wrword	local06, local01
24d20     09 29 02 F6 | 	mov	local06, arg01
24d24     02 28 06 F1 | 	add	local06, #2
24d28     14 55 59 FC | 	wrword	#170, local06
24d2c     09 29 02 F6 | 	mov	local06, arg01
24d30     06 28 06 F1 | 	add	local06, #6
24d34     14 01 58 FC | 	wrword	#0, local06
24d38     09 27 EA FA | 	rdword	local05, arg01 wz
24d3c     00 FA 05 A6 |  if_e	mov	result1, #0
24d40     04 26 66 50 |  if_ne	shl	local05, #4
24d44     13 13 02 51 |  if_ne	add	arg01, local05
24d48     09 FB 01 56 |  if_ne	mov	result1, arg01
24d4c     FD 28 0A F6 | 	mov	local06, result1 wz
24d50     28 00 90 AD |  if_e	jmp	#LR__3526
24d54     11 29 52 F2 | 	cmps	local06, local03 wc
24d58     20 00 90 3D |  if_ae	jmp	#LR__3526
24d5c     12 15 0A F6 | 	mov	arg02, local04 wz
24d60     00 FA 05 A6 |  if_e	mov	result1, #0
24d64     10 15 82 51 |  if_ne	sub	arg02, local02
24d68     04 14 46 50 |  if_ne	shr	arg02, #4
24d6c     0A FB 01 56 |  if_ne	mov	result1, arg02
24d70     14 25 02 F6 | 	mov	local04, local06
24d74     04 24 06 F1 | 	add	local04, #4
24d78     12 FB 51 FC | 	wrword	result1, local04
24d7c                 | LR__3526
24d7c                 | LR__3527
24d7c     14 FB 01 F6 | 	mov	result1, local06
24d80     A7 F0 03 F6 | 	mov	ptra, fp
24d84     B2 00 A0 FD | 	call	#popregs_
24d88                 | __system___gc_dofree_ret
24d88     2D 00 64 FD | 	ret
24d8c                 | 
24d8c                 | __system___gc_docollect
24d8c     05 4A 05 F6 | 	mov	COUNT_, #5
24d90     A8 00 A0 FD | 	call	#pushregs_
24d94     B8 F9 BF FD | 	call	#__system___gc_ptrs
24d98     FE 1E 02 F6 | 	mov	local01, result2
24d9c     FD 20 02 F6 | 	mov	local02, result1
24da0     10 13 02 F6 | 	mov	arg01, local02
24da4     09 23 EA FA | 	rdword	local03, arg01 wz
24da8     00 FA 05 A6 |  if_e	mov	result1, #0
24dac     04 22 66 50 |  if_ne	shl	local03, #4
24db0     11 13 02 51 |  if_ne	add	arg01, local03
24db4     09 FB 01 56 |  if_ne	mov	result1, arg01
24db8     FD 24 0A F6 | 	mov	local04, result1 wz
24dbc     00 FA 05 F6 | 	mov	result1, #0
24dc0     01 FA 61 FD | 	cogid	result1
24dc4     FD 26 02 F6 | 	mov	local05, result1
24dc8     48 00 90 AD |  if_e	jmp	#LR__3532
24dcc     97 22 48 FB | 	callpa	#(@LR__3531-@LR__3530)>>2,fcache_load_ptr_
24dd0                 | LR__3530
24dd0     0F 25 52 F2 | 	cmps	local04, local01 wc
24dd4     3C 00 90 3D |  if_ae	jmp	#LR__3532
24dd8     12 15 02 F6 | 	mov	arg02, local04
24ddc     02 14 06 F1 | 	add	arg02, #2
24de0     0A 15 E2 FA | 	rdword	arg02, arg02
24de4     20 14 26 F5 | 	andn	arg02, #32
24de8     12 13 02 F6 | 	mov	arg01, local04
24dec     02 12 06 F1 | 	add	arg01, #2
24df0     09 15 52 FC | 	wrword	arg02, arg01
24df4     12 13 02 F6 | 	mov	arg01, local04
24df8     09 23 EA FA | 	rdword	local03, arg01 wz
24dfc     00 FA 05 A6 |  if_e	mov	result1, #0
24e00     04 22 66 50 |  if_ne	shl	local03, #4
24e04     11 13 02 51 |  if_ne	add	arg01, local03
24e08     09 FB 01 56 |  if_ne	mov	result1, arg01
24e0c     FD 24 0A F6 | 	mov	local04, result1 wz
24e10     BC FF 9F 5D |  if_ne	jmp	#LR__3530
24e14                 | LR__3531
24e14                 | LR__3532
24e14     00 22 06 F6 | 	mov	local03, #0
24e18     00 12 06 F6 | 	mov	arg01, #0
24e1c     A0 BC BF FD | 	call	#__system____topofstack
24e20     FD 14 02 F6 | 	mov	arg02, result1
24e24     11 13 02 F6 | 	mov	arg01, local03
24e28     90 00 B0 FD | 	call	#__system___gc_markhub
24e2c     1C 01 B0 FD | 	call	#__system___gc_markcog
24e30     10 13 02 F6 | 	mov	arg01, local02
24e34     09 23 EA FA | 	rdword	local03, arg01 wz
24e38     00 FA 05 A6 |  if_e	mov	result1, #0
24e3c     04 22 66 50 |  if_ne	shl	local03, #4
24e40     11 13 02 51 |  if_ne	add	arg01, local03
24e44     09 FB 01 56 |  if_ne	mov	result1, arg01
24e48     FD 20 0A F6 | 	mov	local02, result1 wz
24e4c     60 00 90 AD |  if_e	jmp	#LR__3536
24e50                 | LR__3533
24e50     10 25 02 F6 | 	mov	local04, local02
24e54     12 13 02 F6 | 	mov	arg01, local04
24e58     09 23 EA FA | 	rdword	local03, arg01 wz
24e5c     00 FA 05 A6 |  if_e	mov	result1, #0
24e60     04 22 66 50 |  if_ne	shl	local03, #4
24e64     11 13 02 51 |  if_ne	add	arg01, local03
24e68     09 FB 01 56 |  if_ne	mov	result1, arg01
24e6c     FD 20 02 F6 | 	mov	local02, result1
24e70     12 15 02 F6 | 	mov	arg02, local04
24e74     02 14 06 F1 | 	add	arg02, #2
24e78     0A 15 E2 FA | 	rdword	arg02, arg02
24e7c     20 14 CE F7 | 	test	arg02, #32 wz
24e80     10 14 CE A7 |  if_e	test	arg02, #16 wz
24e84     1C 00 90 5D |  if_ne	jmp	#LR__3535
24e88     0A 15 42 F8 | 	getnib	arg02, arg02, #0
24e8c     13 15 0A F2 | 	cmp	arg02, local05 wz
24e90     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
24e94     0C 00 90 5D |  if_ne	jmp	#LR__3534
24e98     12 13 02 F6 | 	mov	arg01, local04
24e9c     84 FC BF FD | 	call	#__system___gc_dofree
24ea0     FD 20 02 F6 | 	mov	local02, result1
24ea4                 | LR__3534
24ea4                 | LR__3535
24ea4     00 20 0E F2 | 	cmp	local02, #0 wz
24ea8     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
24eac     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3533
24eb0                 | LR__3536
24eb0     A7 F0 03 F6 | 	mov	ptra, fp
24eb4     B2 00 A0 FD | 	call	#popregs_
24eb8                 | __system___gc_docollect_ret
24eb8     2D 00 64 FD | 	ret
24ebc                 | 
24ebc                 | __system___gc_markhub
24ebc     04 4A 05 F6 | 	mov	COUNT_, #4
24ec0     A8 00 A0 FD | 	call	#pushregs_
24ec4     09 1F 02 F6 | 	mov	local01, arg01
24ec8     0A 21 02 F6 | 	mov	local02, arg02
24ecc     80 F8 BF FD | 	call	#__system___gc_ptrs
24ed0     FD 22 02 F6 | 	mov	local03, result1
24ed4     FE 24 02 F6 | 	mov	local04, result2
24ed8                 | LR__3540
24ed8     10 1F 52 F2 | 	cmps	local01, local02 wc
24edc     60 00 90 3D |  if_ae	jmp	#LR__3541
24ee0     0F 17 02 FB | 	rdlong	arg03, local01
24ee4     04 1E 06 F1 | 	add	local01, #4
24ee8     12 15 02 F6 | 	mov	arg02, local04
24eec     11 13 02 F6 | 	mov	arg01, local03
24ef0     8C FB BF FD | 	call	#__system___gc_isvalidptr
24ef4     FD 16 0A F6 | 	mov	arg03, result1 wz
24ef8     DC FF 9F AD |  if_e	jmp	#LR__3540
24efc     0B 13 02 F6 | 	mov	arg01, arg03
24f00     00 FA 05 F6 | 	mov	result1, #0
24f04     02 12 06 F1 | 	add	arg01, #2
24f08     09 13 E2 FA | 	rdword	arg01, arg01
24f0c     36 00 00 FF 
24f10     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24f14     01 FA 65 A6 |  if_e	neg	result1, #1
24f18     00 FA 0D F2 | 	cmp	result1, #0 wz
24f1c     B8 FF 9F 5D |  if_ne	jmp	#LR__3540
24f20     0B FD 01 F6 | 	mov	result2, arg03
24f24     02 FC 05 F1 | 	add	result2, #2
24f28     FE FC E1 FA | 	rdword	result2, result2
24f2c     0F FC 25 F5 | 	andn	result2, #15
24f30     2E FC 45 F5 | 	or	result2, #46
24f34     02 16 06 F1 | 	add	arg03, #2
24f38     0B FD 51 FC | 	wrword	result2, arg03
24f3c     98 FF 9F FD | 	jmp	#LR__3540
24f40                 | LR__3541
24f40     A7 F0 03 F6 | 	mov	ptra, fp
24f44     B2 00 A0 FD | 	call	#popregs_
24f48                 | __system___gc_markhub_ret
24f48     2D 00 64 FD | 	ret
24f4c                 | 
24f4c                 | __system___gc_markcog
24f4c     04 4A 05 F6 | 	mov	COUNT_, #4
24f50     A8 00 A0 FD | 	call	#pushregs_
24f54     F8 F7 BF FD | 	call	#__system___gc_ptrs
24f58     FD 1E 02 F6 | 	mov	local01, result1
24f5c     FE 20 02 F6 | 	mov	local02, result2
24f60     EF 23 06 F6 | 	mov	local03, #495
24f64                 | LR__3550
24f64                 | 	'.live	local03
24f64     00 22 96 F9 | 	alts	local03, #0
24f68     11 25 02 F6 | 	mov	local04, local03
24f6c     0F 13 02 F6 | 	mov	arg01, local01
24f70     10 15 02 F6 | 	mov	arg02, local02
24f74     12 17 02 F6 | 	mov	arg03, local04
24f78     04 FB BF FD | 	call	#__system___gc_isvalidptr
24f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
24f80     18 00 90 AD |  if_e	jmp	#LR__3551
24f84     FD 24 02 F6 | 	mov	local04, result1
24f88     02 24 06 F1 | 	add	local04, #2
24f8c     12 25 E2 FA | 	rdword	local04, local04
24f90     20 24 46 F5 | 	or	local04, #32
24f94     02 FA 05 F1 | 	add	result1, #2
24f98     FD 24 52 FC | 	wrword	local04, result1
24f9c                 | LR__3551
24f9c     01 22 86 F1 | 	sub	local03, #1
24fa0     00 22 56 F2 | 	cmps	local03, #0 wc
24fa4     BC FF 9F 3D |  if_ae	jmp	#LR__3550
24fa8     A7 F0 03 F6 | 	mov	ptra, fp
24fac     B2 00 A0 FD | 	call	#popregs_
24fb0                 | __system___gc_markcog_ret
24fb0     2D 00 64 FD | 	ret
24fb4                 | 
24fb4                 | __system__opendir
24fb4     06 4A 05 F6 | 	mov	COUNT_, #6
24fb8     A8 00 A0 FD | 	call	#pushregs_
24fbc     84 E7 05 F1 | 	add	ptr___system__dat__, #388
24fc0     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
24fc4     09 15 02 F6 | 	mov	arg02, arg01
24fc8     0F 13 02 F6 | 	mov	arg01, local01
24fcc     00 16 06 F6 | 	mov	arg03, #0
24fd0     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
24fd4     A8 C2 BF FD | 	call	#__system____getvfsforfile
24fd8     FD 20 0A F6 | 	mov	local02, result1 wz
24fdc     10 00 90 AD |  if_e	jmp	#LR__3560
24fe0     28 20 06 F1 | 	add	local02, #40
24fe4     10 17 0A FB | 	rdlong	arg03, local02 wz
24fe8     28 20 86 F1 | 	sub	local02, #40
24fec     14 00 90 5D |  if_ne	jmp	#LR__3561
24ff0                 | LR__3560
24ff0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24ff4     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
24ff8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24ffc     00 FA 05 F6 | 	mov	result1, #0
25000     90 00 90 FD | 	jmp	#LR__3563
25004                 | LR__3561
25004     5C 12 06 F6 | 	mov	arg01, #92
25008     10 14 06 F6 | 	mov	arg02, #16
2500c     C0 F9 BF FD | 	call	#__system___gc_doalloc
25010     FD 22 0A F6 | 	mov	local03, result1 wz
25014     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25018     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2501c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25020     00 FA 05 A6 |  if_e	mov	result1, #0
25024     6C 00 90 AD |  if_e	jmp	#LR__3563
25028     28 20 06 F1 | 	add	local02, #40
2502c     10 25 02 FB | 	rdlong	local04, local02
25030     12 27 02 F6 | 	mov	local05, local04
25034     28 20 86 F1 | 	sub	local02, #40
25038     13 26 46 F7 | 	zerox	local05, #19
2503c     14 24 46 F0 | 	shr	local04, #20
25040     02 24 66 F0 | 	shl	local04, #2
25044     ED 24 02 F1 | 	add	local04, __methods__
25048     12 25 02 FB | 	rdlong	local04, local04
2504c     11 13 02 F6 | 	mov	arg01, local03
25050     0F 15 02 F6 | 	mov	arg02, local01
25054     F2 28 02 F6 | 	mov	local06, objptr
25058     13 E5 01 F6 | 	mov	objptr, local05
2505c     2D 24 62 FD | 	call	local04
25060     14 E5 01 F6 | 	mov	objptr, local06
25064     FD 16 0A F6 | 	mov	arg03, result1 wz
25068     20 00 90 AD |  if_e	jmp	#LR__3562
2506c     00 16 4E F2 | 	cmps	arg03, #0 wz
25070     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25074     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
25078     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2507c     11 13 02 F6 | 	mov	arg01, local03
25080     58 FA BF FD | 	call	#__system___gc_free
25084     00 FA 05 F6 | 	mov	result1, #0
25088     08 00 90 FD | 	jmp	#LR__3563
2508c                 | LR__3562
2508c     11 21 62 FC | 	wrlong	local02, local03
25090     11 FB 01 F6 | 	mov	result1, local03
25094                 | LR__3563
25094     A7 F0 03 F6 | 	mov	ptra, fp
25098     B2 00 A0 FD | 	call	#popregs_
2509c                 | __system__opendir_ret
2509c     2D 00 64 FD | 	ret
250a0                 | 
250a0                 | __system__closedir
250a0     04 4A 05 F6 | 	mov	COUNT_, #4
250a4     A8 00 A0 FD | 	call	#pushregs_
250a8     09 1F 02 F6 | 	mov	local01, arg01
250ac     0F 13 02 FB | 	rdlong	arg01, local01
250b0     2C 12 06 F1 | 	add	arg01, #44
250b4     09 21 02 FB | 	rdlong	local02, arg01
250b8     10 23 02 F6 | 	mov	local03, local02
250bc     13 22 46 F7 | 	zerox	local03, #19
250c0     14 20 46 F0 | 	shr	local02, #20
250c4     02 20 66 F0 | 	shl	local02, #2
250c8     ED 20 02 F1 | 	add	local02, __methods__
250cc     10 21 02 FB | 	rdlong	local02, local02
250d0     0F 13 02 F6 | 	mov	arg01, local01
250d4     F2 24 02 F6 | 	mov	local04, objptr
250d8     11 E5 01 F6 | 	mov	objptr, local03
250dc     2D 20 62 FD | 	call	local02
250e0     12 E5 01 F6 | 	mov	objptr, local04
250e4     FD 24 02 F6 | 	mov	local04, result1
250e8     0F 13 02 F6 | 	mov	arg01, local01
250ec     EC F9 BF FD | 	call	#__system___gc_free
250f0     00 24 4E F2 | 	cmps	local04, #0 wz
250f4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
250f8     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
250fc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25100     01 FA 65 56 |  if_ne	neg	result1, #1
25104     00 FA 05 A6 |  if_e	mov	result1, #0
25108     A7 F0 03 F6 | 	mov	ptra, fp
2510c     B2 00 A0 FD | 	call	#popregs_
25110                 | __system__closedir_ret
25110     2D 00 64 FD | 	ret
25114                 | 
25114                 | __system__readdir
25114     04 4A 05 F6 | 	mov	COUNT_, #4
25118     A8 00 A0 FD | 	call	#pushregs_
2511c     09 15 0A FB | 	rdlong	arg02, arg01 wz
25120     08 12 06 F1 | 	add	arg01, #8
25124     09 1F 02 F6 | 	mov	local01, arg01
25128     08 12 86 F1 | 	sub	arg01, #8
2512c     00 FA 05 A6 |  if_e	mov	result1, #0
25130     5C 00 90 AD |  if_e	jmp	#LR__3571
25134     30 14 06 F1 | 	add	arg02, #48
25138     0A 21 02 FB | 	rdlong	local02, arg02
2513c     10 23 02 F6 | 	mov	local03, local02
25140     13 22 46 F7 | 	zerox	local03, #19
25144     14 20 46 F0 | 	shr	local02, #20
25148     02 20 66 F0 | 	shl	local02, #2
2514c     ED 20 02 F1 | 	add	local02, __methods__
25150     10 21 02 FB | 	rdlong	local02, local02
25154     0F 15 02 F6 | 	mov	arg02, local01
25158     F2 24 02 F6 | 	mov	local04, objptr
2515c     11 E5 01 F6 | 	mov	objptr, local03
25160     2D 20 62 FD | 	call	local02
25164     12 E5 01 F6 | 	mov	objptr, local04
25168     00 FA 4D F2 | 	cmps	result1, #0 wz
2516c     1C 00 90 AD |  if_e	jmp	#LR__3570
25170     01 FA 55 F2 | 	cmps	result1, #1 wc
25174     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
25178     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2517c     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
25180     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25184     00 FA 05 F6 | 	mov	result1, #0
25188     04 00 90 FD | 	jmp	#LR__3571
2518c                 | LR__3570
2518c     0F FB 01 F6 | 	mov	result1, local01
25190                 | LR__3571
25190     A7 F0 03 F6 | 	mov	ptra, fp
25194     B2 00 A0 FD | 	call	#popregs_
25198                 | __system__readdir_ret
25198     2D 00 64 FD | 	ret
2519c                 | 
2519c                 | __system___openraw
2519c     15 4A 05 F6 | 	mov	COUNT_, #21
251a0     A8 00 A0 FD | 	call	#pushregs_
251a4     09 1F 02 F6 | 	mov	local01, arg01
251a8     0A 21 02 F6 | 	mov	local02, arg02
251ac     0B 23 02 F6 | 	mov	local03, arg03
251b0     0C 25 02 F6 | 	mov	local04, arg04
251b4     04 26 06 F6 | 	mov	local05, #4
251b8     0F 29 02 F6 | 	mov	local06, local01
251bc     00 2A 06 F6 | 	mov	local07, #0
251c0     84 E7 05 F1 | 	add	ptr___system__dat__, #388
251c4     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
251c8     16 13 02 F6 | 	mov	arg01, local08
251cc     10 15 02 F6 | 	mov	arg02, local02
251d0     00 16 06 F6 | 	mov	arg03, #0
251d4     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
251d8     A4 C0 BF FD | 	call	#__system____getvfsforfile
251dc     FD 2E 0A F6 | 	mov	local09, result1 wz
251e0     10 00 90 AD |  if_e	jmp	#LR__3580
251e4     20 2E 06 F1 | 	add	local09, #32
251e8     17 FB 09 FB | 	rdlong	result1, local09 wz
251ec     20 2E 86 F1 | 	sub	local09, #32
251f0     14 00 90 5D |  if_ne	jmp	#LR__3581
251f4                 | LR__3580
251f4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
251f8     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
251fc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25200     01 FA 65 F6 | 	neg	result1, #1
25204     8C 02 90 FD | 	jmp	#LR__3594
25208                 | LR__3581
25208     14 13 02 F6 | 	mov	arg01, local06
2520c     00 14 06 F6 | 	mov	arg02, #0
25210     34 16 06 F6 | 	mov	arg03, #52
25214     09 31 02 F6 | 	mov	local10, arg01
25218     98 00 A0 FD | 	call	#\builtin_bytefill_
2521c     20 2E 06 F1 | 	add	local09, #32
25220     17 33 02 FB | 	rdlong	local11, local09
25224     19 35 02 F6 | 	mov	local12, local11
25228     19 37 02 F6 | 	mov	local13, local11
2522c     20 2E 86 F1 | 	sub	local09, #32
25230     1B 39 02 F6 | 	mov	local14, local13
25234     13 34 46 F7 | 	zerox	local12, #19
25238     14 38 46 F0 | 	shr	local14, #20
2523c     02 38 66 F0 | 	shl	local14, #2
25240     ED 38 02 F1 | 	add	local14, __methods__
25244     1C 39 02 FB | 	rdlong	local14, local14
25248     14 3B 02 F6 | 	mov	local15, local06
2524c     16 3D 02 F6 | 	mov	local16, local08
25250     11 3F 02 F6 | 	mov	local17, local03
25254     1D 13 02 F6 | 	mov	arg01, local15
25258     1E 15 02 F6 | 	mov	arg02, local16
2525c     1F 17 02 F6 | 	mov	arg03, local17
25260     F2 40 02 F6 | 	mov	local18, objptr
25264     1A E5 01 F6 | 	mov	objptr, local12
25268     2D 38 62 FD | 	call	local14
2526c     20 E5 01 F6 | 	mov	objptr, local18
25270     FD 42 0A F6 | 	mov	local19, result1 wz
25274     04 22 CE 57 |  if_ne	test	local03, #4 wz
25278     58 00 90 AD |  if_e	jmp	#LR__3582
2527c     24 2E 06 F1 | 	add	local09, #36
25280     17 33 02 FB | 	rdlong	local11, local09
25284     19 35 02 F6 | 	mov	local12, local11
25288     19 37 02 F6 | 	mov	local13, local11
2528c     24 2E 86 F1 | 	sub	local09, #36
25290     1B 39 02 F6 | 	mov	local14, local13
25294     13 34 46 F7 | 	zerox	local12, #19
25298     14 38 46 F0 | 	shr	local14, #20
2529c     02 38 66 F0 | 	shl	local14, #2
252a0     ED 38 02 F1 | 	add	local14, __methods__
252a4     1C 39 02 FB | 	rdlong	local14, local14
252a8     14 3B 02 F6 | 	mov	local15, local06
252ac     16 3D 02 F6 | 	mov	local16, local08
252b0     12 3F 02 F6 | 	mov	local17, local04
252b4     1D 13 02 F6 | 	mov	arg01, local15
252b8     1E 15 02 F6 | 	mov	arg02, local16
252bc     1F 17 02 F6 | 	mov	arg03, local17
252c0     F2 40 02 F6 | 	mov	local18, objptr
252c4     1A E5 01 F6 | 	mov	objptr, local12
252c8     2D 38 62 FD | 	call	local14
252cc     20 E5 01 F6 | 	mov	objptr, local18
252d0     FD 42 02 F6 | 	mov	local19, result1
252d4                 | LR__3582
252d4     00 42 0E F2 | 	cmp	local19, #0 wz
252d8     8C 01 90 5D |  if_ne	jmp	#LR__3592
252dc     11 45 02 F6 | 	mov	local20, local03
252e0     03 44 0E F5 | 	and	local20, #3 wz
252e4     02 26 46 55 |  if_ne	or	local05, #2
252e8     01 44 0E F2 | 	cmp	local20, #1 wz
252ec     01 26 46 55 |  if_ne	or	local05, #1
252f0     20 22 CE F7 | 	test	local03, #32 wz
252f4     C0 26 46 55 |  if_ne	or	local05, #192
252f8     08 28 06 F1 | 	add	local06, #8
252fc     14 27 62 FC | 	wrlong	local05, local06
25300     0C 28 06 F1 | 	add	local06, #12
25304     14 47 0A FB | 	rdlong	local21, local06 wz
25308     14 28 86 F1 | 	sub	local06, #20
2530c     18 00 90 5D |  if_ne	jmp	#LR__3583
25310     04 2E 06 F1 | 	add	local09, #4
25314     17 47 02 FB | 	rdlong	local21, local09
25318     04 2E 86 F1 | 	sub	local09, #4
2531c     14 28 06 F1 | 	add	local06, #20
25320     14 47 62 FC | 	wrlong	local21, local06
25324     14 28 86 F1 | 	sub	local06, #20
25328                 | LR__3583
25328     18 28 06 F1 | 	add	local06, #24
2532c     14 47 0A FB | 	rdlong	local21, local06 wz
25330     18 28 86 F1 | 	sub	local06, #24
25334     18 00 90 5D |  if_ne	jmp	#LR__3584
25338     08 2E 06 F1 | 	add	local09, #8
2533c     17 47 02 FB | 	rdlong	local21, local09
25340     08 2E 86 F1 | 	sub	local09, #8
25344     18 28 06 F1 | 	add	local06, #24
25348     14 47 62 FC | 	wrlong	local21, local06
2534c     18 28 86 F1 | 	sub	local06, #24
25350                 | LR__3584
25350     24 28 06 F1 | 	add	local06, #36
25354     14 47 0A FB | 	rdlong	local21, local06 wz
25358     24 28 86 F1 | 	sub	local06, #36
2535c     17 47 02 AB |  if_e	rdlong	local21, local09
25360     24 28 06 A1 |  if_e	add	local06, #36
25364     14 47 62 AC |  if_e	wrlong	local21, local06
25368     24 28 86 A1 |  if_e	sub	local06, #36
2536c     28 28 06 F1 | 	add	local06, #40
25370     14 47 0A FB | 	rdlong	local21, local06 wz
25374     28 28 86 F1 | 	sub	local06, #40
25378     18 00 90 5D |  if_ne	jmp	#LR__3585
2537c     10 2E 06 F1 | 	add	local09, #16
25380     17 47 02 FB | 	rdlong	local21, local09
25384     10 2E 86 F1 | 	sub	local09, #16
25388     28 28 06 F1 | 	add	local06, #40
2538c     14 47 62 FC | 	wrlong	local21, local06
25390     28 28 86 F1 | 	sub	local06, #40
25394                 | LR__3585
25394     30 28 06 F1 | 	add	local06, #48
25398     14 47 0A FB | 	rdlong	local21, local06 wz
2539c     30 28 86 F1 | 	sub	local06, #48
253a0     18 00 90 5D |  if_ne	jmp	#LR__3586
253a4     0C 2E 06 F1 | 	add	local09, #12
253a8     17 47 02 FB | 	rdlong	local21, local09
253ac     0C 2E 86 F1 | 	sub	local09, #12
253b0     30 28 06 F1 | 	add	local06, #48
253b4     14 47 62 FC | 	wrlong	local21, local06
253b8     30 28 86 F1 | 	sub	local06, #48
253bc                 | LR__3586
253bc     1C 28 06 F1 | 	add	local06, #28
253c0     14 47 0A FB | 	rdlong	local21, local06 wz
253c4     1C 28 86 F1 | 	sub	local06, #28
253c8     1C 00 90 5D |  if_ne	jmp	#LR__3587
253cc     01 2A 06 F6 | 	mov	local07, #1
253d0     F2 12 02 F6 | 	mov	arg01, objptr
253d4     00 D0 04 FF 
253d8     00 12 46 F5 | 	or	arg01, ##161480704
253dc     1C 28 06 F1 | 	add	local06, #28
253e0     14 13 62 FC | 	wrlong	arg01, local06
253e4     1C 28 86 F1 | 	sub	local06, #28
253e8                 | LR__3587
253e8     20 28 06 F1 | 	add	local06, #32
253ec     14 47 0A FB | 	rdlong	local21, local06 wz
253f0     20 28 86 F1 | 	sub	local06, #32
253f4     1C 00 90 5D |  if_ne	jmp	#LR__3588
253f8     01 2A 06 F6 | 	mov	local07, #1
253fc     F2 12 02 F6 | 	mov	arg01, objptr
25400     00 D8 04 FF 
25404     00 12 46 F5 | 	or	arg01, ##162529280
25408     20 28 06 F1 | 	add	local06, #32
2540c     14 13 62 FC | 	wrlong	arg01, local06
25410     20 28 86 F1 | 	sub	local06, #32
25414                 | LR__3588
25414     2C 28 06 F1 | 	add	local06, #44
25418     14 47 0A FB | 	rdlong	local21, local06 wz
2541c     2C 28 86 F1 | 	sub	local06, #44
25420     44 00 90 5D |  if_ne	jmp	#LR__3591
25424     14 2E 06 F1 | 	add	local09, #20
25428     17 47 0A FB | 	rdlong	local21, local09 wz
2542c     14 2E 86 F1 | 	sub	local09, #20
25430     18 00 90 AD |  if_e	jmp	#LR__3589
25434     14 2E 06 F1 | 	add	local09, #20
25438     17 47 02 FB | 	rdlong	local21, local09
2543c     2C 28 06 F1 | 	add	local06, #44
25440     14 47 62 FC | 	wrlong	local21, local06
25444     2C 28 86 F1 | 	sub	local06, #44
25448     1C 00 90 FD | 	jmp	#LR__3590
2544c                 | LR__3589
2544c     01 2A 06 F6 | 	mov	local07, #1
25450     F2 12 02 F6 | 	mov	arg01, objptr
25454     00 E0 04 FF 
25458     00 12 46 F5 | 	or	arg01, ##163577856
2545c     2C 28 06 F1 | 	add	local06, #44
25460     14 13 62 FC | 	wrlong	arg01, local06
25464     2C 28 86 F1 | 	sub	local06, #44
25468                 | LR__3590
25468                 | LR__3591
25468                 | LR__3592
25468     00 2A 0E F2 | 	cmp	local07, #0 wz
2546c     14 13 02 56 |  if_ne	mov	arg01, local06
25470     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
25474     00 42 0E F2 | 	cmp	local19, #0 wz
25478     00 12 06 A6 |  if_e	mov	arg01, #0
2547c     10 00 90 5D |  if_ne	jmp	#LR__3593
25480     00 12 4E F2 | 	cmps	arg01, #0 wz
25484     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25488     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2548c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25490                 | LR__3593
25490     21 FB 01 F6 | 	mov	result1, local19
25494                 | LR__3594
25494     A7 F0 03 F6 | 	mov	ptra, fp
25498     B2 00 A0 FD | 	call	#popregs_
2549c                 | __system___openraw_ret
2549c     2D 00 64 FD | 	ret
254a0                 | 
254a0                 | __system___closeraw
254a0     05 4A 05 F6 | 	mov	COUNT_, #5
254a4     A8 00 A0 FD | 	call	#pushregs_
254a8     09 1F 02 F6 | 	mov	local01, arg01
254ac     00 20 06 F6 | 	mov	local02, #0
254b0     08 1E 06 F1 | 	add	local01, #8
254b4     0F FB 09 FB | 	rdlong	result1, local01 wz
254b8     08 1E 86 F1 | 	sub	local01, #8
254bc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
254c0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
254c4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
254c8     01 FA 65 A6 |  if_e	neg	result1, #1
254cc     A8 00 90 AD |  if_e	jmp	#LR__3602
254d0     2C 1E 06 F1 | 	add	local01, #44
254d4     0F FB 09 FB | 	rdlong	result1, local01 wz
254d8     2C 1E 86 F1 | 	sub	local01, #44
254dc     38 00 90 AD |  if_e	jmp	#LR__3600
254e0     2C 1E 06 F1 | 	add	local01, #44
254e4     0F 23 02 FB | 	rdlong	local03, local01
254e8     11 25 02 F6 | 	mov	local04, local03
254ec     2C 1E 86 F1 | 	sub	local01, #44
254f0     13 24 46 F7 | 	zerox	local04, #19
254f4     14 22 46 F0 | 	shr	local03, #20
254f8     02 22 66 F0 | 	shl	local03, #2
254fc     ED 22 02 F1 | 	add	local03, __methods__
25500     11 23 02 FB | 	rdlong	local03, local03
25504     0F 13 02 F6 | 	mov	arg01, local01
25508     F2 26 02 F6 | 	mov	local05, objptr
2550c     12 E5 01 F6 | 	mov	objptr, local04
25510     2D 22 62 FD | 	call	local03
25514     13 E5 01 F6 | 	mov	objptr, local05
25518                 | LR__3600
25518     24 1E 06 F1 | 	add	local01, #36
2551c     0F 27 0A FB | 	rdlong	local05, local01 wz
25520     24 1E 86 F1 | 	sub	local01, #36
25524     3C 00 90 AD |  if_e	jmp	#LR__3601
25528     24 1E 06 F1 | 	add	local01, #36
2552c     0F 23 02 FB | 	rdlong	local03, local01
25530     11 25 02 F6 | 	mov	local04, local03
25534     24 1E 86 F1 | 	sub	local01, #36
25538     13 24 46 F7 | 	zerox	local04, #19
2553c     14 22 46 F0 | 	shr	local03, #20
25540     02 22 66 F0 | 	shl	local03, #2
25544     ED 22 02 F1 | 	add	local03, __methods__
25548     11 23 02 FB | 	rdlong	local03, local03
2554c     0F 13 02 F6 | 	mov	arg01, local01
25550     F2 26 02 F6 | 	mov	local05, objptr
25554     12 E5 01 F6 | 	mov	objptr, local04
25558     2D 22 62 FD | 	call	local03
2555c     13 E5 01 F6 | 	mov	objptr, local05
25560     FD 20 02 F6 | 	mov	local02, result1
25564                 | LR__3601
25564     0F 13 02 F6 | 	mov	arg01, local01
25568     00 14 06 F6 | 	mov	arg02, #0
2556c     34 16 06 F6 | 	mov	arg03, #52
25570     98 00 A0 FD | 	call	#\builtin_bytefill_
25574     10 FB 01 F6 | 	mov	result1, local02
25578                 | LR__3602
25578     A7 F0 03 F6 | 	mov	ptra, fp
2557c     B2 00 A0 FD | 	call	#popregs_
25580                 | __system___closeraw_ret
25580     2D 00 64 FD | 	ret
25584                 | 
25584                 | __system___vfs_open_sdcardx
25584     0B 4A 05 F6 | 	mov	COUNT_, #11
25588     A8 00 A0 FD | 	call	#pushregs_
2558c     09 23 02 F6 | 	mov	local03, arg01
25590     0A 25 02 F6 | 	mov	local04, arg02
25594     0B 27 02 F6 | 	mov	local05, arg03
25598     0C 29 02 F6 | 	mov	local06, arg04
2559c     01 00 00 FF 
255a0     24 12 06 F6 | 	mov	arg01, ##548
255a4     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
255a8     FD 2A 02 F6 | 	mov	local07, result1
255ac     01 00 00 FF 
255b0     34 12 06 F6 | 	mov	arg01, ##564
255b4     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
255b8     FD 2C 02 F6 | 	mov	local08, result1
255bc     11 19 02 F6 | 	mov	arg04, local03
255c0     1F 18 C6 F0 | 	sar	arg04, #31
255c4     11 17 02 F6 | 	mov	arg03, local03
255c8     01 12 06 F6 | 	mov	arg01, #1
255cc     00 14 06 F6 | 	mov	arg02, #0
255d0     10 DC BF FD | 	call	#__system___int64_shl
255d4     FD 1E 02 F6 | 	mov	local01, result1
255d8     FE 2E 02 F6 | 	mov	local09, result2
255dc     12 19 02 F6 | 	mov	arg04, local04
255e0     1F 18 C6 F0 | 	sar	arg04, #31
255e4     12 17 02 F6 | 	mov	arg03, local04
255e8     01 12 06 F6 | 	mov	arg01, #1
255ec     00 14 06 F6 | 	mov	arg02, #0
255f0     F0 DB BF FD | 	call	#__system___int64_shl
255f4     FD 1E 42 F5 | 	or	local01, result1
255f8     FE 2E 42 F5 | 	or	local09, result2
255fc     13 19 02 F6 | 	mov	arg04, local05
25600     1F 18 C6 F0 | 	sar	arg04, #31
25604     13 17 02 F6 | 	mov	arg03, local05
25608     01 12 06 F6 | 	mov	arg01, #1
2560c     00 14 06 F6 | 	mov	arg02, #0
25610     D0 DB BF FD | 	call	#__system___int64_shl
25614     FD 1E 42 F5 | 	or	local01, result1
25618     FE 2E 42 F5 | 	or	local09, result2
2561c     14 19 02 F6 | 	mov	arg04, local06
25620     1F 18 C6 F0 | 	sar	arg04, #31
25624     14 17 02 F6 | 	mov	arg03, local06
25628     01 12 06 F6 | 	mov	arg01, #1
2562c     00 14 06 F6 | 	mov	arg02, #0
25630     B0 DB BF FD | 	call	#__system___int64_shl
25634     17 15 02 F6 | 	mov	arg02, local09
25638     FD 1E 42 F5 | 	or	local01, result1
2563c     0A FD 41 F5 | 	or	result2, arg02
25640     FE 20 02 F6 | 	mov	local02, result2
25644     0F 13 02 F6 | 	mov	arg01, local01
25648     10 15 02 F6 | 	mov	arg02, local02
2564c     CC DB BF FD | 	call	#__system___usepins
25650     00 FA 0D F2 | 	cmp	result1, #0 wz
25654     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25658     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
2565c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25660     00 FA 05 A6 |  if_e	mov	result1, #0
25664     B4 00 90 AD |  if_e	jmp	#LR__3612
25668     0F 31 02 F6 | 	mov	local10, local01
2566c     10 2F 02 F6 | 	mov	local09, local02
25670     01 00 00 FF 
25674     08 2A 06 F1 | 	add	local07, ##520
25678     15 31 62 FC | 	wrlong	local10, local07
2567c     04 2A 06 F1 | 	add	local07, #4
25680     15 2F 62 FC | 	wrlong	local09, local07
25684     01 00 00 FF 
25688     0C 2A 86 F1 | 	sub	local07, ##524
2568c     14 1B 02 F6 | 	mov	arg05, local06
25690     00 12 06 F6 | 	mov	arg01, #0
25694     11 15 02 F6 | 	mov	arg02, local03
25698     12 17 02 F6 | 	mov	arg03, local04
2569c     13 19 02 F6 | 	mov	arg04, local05
256a0     F2 30 02 F6 | 	mov	local10, objptr
256a4     15 E5 01 F6 | 	mov	objptr, local07
256a8     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
256ac     18 E5 01 F6 | 	mov	objptr, local10
256b0     FD 32 0A F6 | 	mov	local11, result1 wz
256b4     24 00 90 5D |  if_ne	jmp	#LR__3610
256b8     81 01 00 FF 
256bc     76 15 06 F6 | 	mov	arg02, ##@LR__5027
256c0     16 13 02 F6 | 	mov	arg01, local08
256c4     00 16 06 F6 | 	mov	arg03, #0
256c8     F2 32 02 F6 | 	mov	local11, objptr
256cc     15 E5 01 F6 | 	mov	objptr, local07
256d0     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
256d4     19 E5 01 F6 | 	mov	objptr, local11
256d8     FD 32 02 F6 | 	mov	local11, result1
256dc                 | LR__3610
256dc     00 32 0E F2 | 	cmp	local11, #0 wz
256e0     24 00 90 AD |  if_e	jmp	#LR__3611
256e4     0F 13 02 F6 | 	mov	arg01, local01
256e8     10 15 02 F6 | 	mov	arg02, local02
256ec     80 DB BF FD | 	call	#__system___freepins
256f0     19 13 6A F6 | 	neg	arg01, local11 wz
256f4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
256f8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
256fc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25700     00 FA 05 F6 | 	mov	result1, #0
25704     14 00 90 FD | 	jmp	#LR__3612
25708                 | LR__3611
25708     15 13 02 F6 | 	mov	arg01, local07
2570c     F2 32 02 F6 | 	mov	local11, objptr
25710     15 E5 01 F6 | 	mov	objptr, local07
25714     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
25718     19 E5 01 F6 | 	mov	objptr, local11
2571c                 | LR__3612
2571c     A7 F0 03 F6 | 	mov	ptra, fp
25720     B2 00 A0 FD | 	call	#popregs_
25724                 | __system___vfs_open_sdcardx_ret
25724     2D 00 64 FD | 	ret
25728                 | 
25728                 | __system____default_getc
25728     03 4A 05 F6 | 	mov	COUNT_, #3
2572c     A8 00 A0 FD | 	call	#pushregs_
25730     09 1F 02 F6 | 	mov	local01, arg01
25734     0F 21 02 FB | 	rdlong	local02, local01
25738     08 20 06 F1 | 	add	local02, #8
2573c     10 23 02 FB | 	rdlong	local03, local02
25740     02 22 CE F7 | 	test	local03, #2 wz
25744     0F 13 02 56 |  if_ne	mov	arg01, local01
25748     00 01 B0 5D |  if_ne	call	#__system____default_flush
2574c     10 23 02 FB | 	rdlong	local03, local02
25750     01 22 46 F5 | 	or	local03, #1
25754     10 23 62 FC | 	wrlong	local03, local02
25758     08 20 86 F1 | 	sub	local02, #8
2575c     10 23 0A FB | 	rdlong	local03, local02 wz
25760     0C 00 90 5D |  if_ne	jmp	#LR__3620
25764     0F 13 02 F6 | 	mov	arg01, local01
25768     68 18 B0 FD | 	call	#__system____default_filbuf
2576c     FD 22 02 F6 | 	mov	local03, result1
25770                 | LR__3620
25770     01 22 56 F2 | 	cmps	local03, #1 wc
25774     01 FA 65 C6 |  if_b	neg	result1, #1
25778     1C 00 90 CD |  if_b	jmp	#LR__3621
2577c     01 22 86 F1 | 	sub	local03, #1
25780     10 23 62 FC | 	wrlong	local03, local02
25784     04 20 06 F1 | 	add	local02, #4
25788     10 23 02 FB | 	rdlong	local03, local02
2578c     11 FB C1 FA | 	rdbyte	result1, local03
25790     01 22 06 F1 | 	add	local03, #1
25794     10 23 62 FC | 	wrlong	local03, local02
25798                 | LR__3621
25798     A7 F0 03 F6 | 	mov	ptra, fp
2579c     B2 00 A0 FD | 	call	#popregs_
257a0                 | __system____default_getc_ret
257a0     2D 00 64 FD | 	ret
257a4                 | 
257a4                 | __system____default_putc
257a4     06 4A 05 F6 | 	mov	COUNT_, #6
257a8     A8 00 A0 FD | 	call	#pushregs_
257ac     09 1F 02 F6 | 	mov	local01, arg01
257b0     0A 21 02 F6 | 	mov	local02, arg02
257b4     10 23 02 FB | 	rdlong	local03, local02
257b8     08 22 06 F1 | 	add	local03, #8
257bc     11 FB 01 FB | 	rdlong	result1, local03
257c0     01 FA CD F7 | 	test	result1, #1 wz
257c4     10 13 02 56 |  if_ne	mov	arg01, local02
257c8     80 00 B0 5D |  if_ne	call	#__system____default_flush
257cc     11 25 02 FB | 	rdlong	local04, local03
257d0     02 24 46 F5 | 	or	local04, #2
257d4     11 25 62 FC | 	wrlong	local04, local03
257d8     08 22 86 F1 | 	sub	local03, #8
257dc     11 27 02 FB | 	rdlong	local05, local03
257e0     10 22 06 F1 | 	add	local03, #16
257e4     11 15 02 FB | 	rdlong	arg02, local03
257e8     10 22 86 F1 | 	sub	local03, #16
257ec     13 FB 01 F6 | 	mov	result1, local05
257f0     0A FB 01 F1 | 	add	result1, arg02
257f4     FD 1E 42 FC | 	wrbyte	local01, result1
257f8     0F 1F E2 F8 | 	getbyte	local01, local01, #0
257fc     01 26 06 F1 | 	add	local05, #1
25800     11 27 62 FC | 	wrlong	local05, local03
25804     06 20 06 F1 | 	add	local02, #6
25808     10 29 EA FA | 	rdword	local06, local02 wz
2580c     06 20 86 F1 | 	sub	local02, #6
25810     0C 22 06 51 |  if_ne	add	local03, #12
25814     11 25 02 5B |  if_ne	rdlong	local04, local03
25818     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
2581c     0C 00 90 AD |  if_e	jmp	#LR__3630
25820     0A 1E 0E F2 | 	cmp	local01, #10 wz
25824     01 28 0E A2 |  if_e	cmp	local06, #1 wz
25828     10 00 90 5D |  if_ne	jmp	#LR__3631
2582c                 | LR__3630
2582c     10 13 02 F6 | 	mov	arg01, local02
25830     18 00 B0 FD | 	call	#__system____default_flush
25834     00 FA 0D F2 | 	cmp	result1, #0 wz
25838     01 1E 66 56 |  if_ne	neg	local01, #1
2583c                 | LR__3631
2583c     0F FB 01 F6 | 	mov	result1, local01
25840     A7 F0 03 F6 | 	mov	ptra, fp
25844     B2 00 A0 FD | 	call	#popregs_
25848                 | __system____default_putc_ret
25848     2D 00 64 FD | 	ret
2584c                 | 
2584c                 | __system____default_flush
2584c     06 4A 05 F6 | 	mov	COUNT_, #6
25850     A8 00 A0 FD | 	call	#pushregs_
25854     09 1F 02 F6 | 	mov	local01, arg01
25858     0F 21 02 FB | 	rdlong	local02, local01
2585c     10 23 02 FB | 	rdlong	local03, local02
25860     08 20 06 F1 | 	add	local02, #8
25864     10 FB 01 FB | 	rdlong	result1, local02
25868     08 20 86 F1 | 	sub	local02, #8
2586c     02 FA CD F7 | 	test	result1, #2 wz
25870     D0 00 90 AD |  if_e	jmp	#LR__3642
25874     01 22 56 F2 | 	cmps	local03, #1 wc
25878     20 01 90 CD |  if_b	jmp	#LR__3644
2587c     08 1E 06 F1 | 	add	local01, #8
25880     0F FB 01 FB | 	rdlong	result1, local01
25884     08 1E 86 F1 | 	sub	local01, #8
25888     40 FA CD F7 | 	test	result1, #64 wz
2588c     68 00 90 AD |  if_e	jmp	#LR__3641
25890     08 1E 06 F1 | 	add	local01, #8
25894     0F 17 02 FB | 	rdlong	arg03, local01
25898     08 1E 86 F1 | 	sub	local01, #8
2589c     80 16 CE F7 | 	test	arg03, #128 wz
258a0     54 00 90 AD |  if_e	jmp	#LR__3640
258a4     30 1E 06 F1 | 	add	local01, #48
258a8     0F 25 02 FB | 	rdlong	local04, local01
258ac     12 27 02 F6 | 	mov	local05, local04
258b0     30 1E 86 F1 | 	sub	local01, #48
258b4     13 26 46 F7 | 	zerox	local05, #19
258b8     14 24 46 F0 | 	shr	local04, #20
258bc     02 24 66 F0 | 	shl	local04, #2
258c0     ED 24 02 F1 | 	add	local04, __methods__
258c4     12 25 02 FB | 	rdlong	local04, local04
258c8     0F 13 02 F6 | 	mov	arg01, local01
258cc     00 14 06 F6 | 	mov	arg02, #0
258d0     02 16 06 F6 | 	mov	arg03, #2
258d4     F2 28 02 F6 | 	mov	local06, objptr
258d8     13 E5 01 F6 | 	mov	objptr, local05
258dc     2D 24 62 FD | 	call	local04
258e0     14 E5 01 F6 | 	mov	objptr, local06
258e4     08 1E 06 F1 | 	add	local01, #8
258e8     0F 29 02 FB | 	rdlong	local06, local01
258ec     80 28 26 F5 | 	andn	local06, #128
258f0     0F 29 62 FC | 	wrlong	local06, local01
258f4     08 1E 86 F1 | 	sub	local01, #8
258f8                 | LR__3640
258f8                 | LR__3641
258f8     18 1E 06 F1 | 	add	local01, #24
258fc     0F 25 02 FB | 	rdlong	local04, local01
25900     12 27 02 F6 | 	mov	local05, local04
25904     18 1E 86 F1 | 	sub	local01, #24
25908     13 26 46 F7 | 	zerox	local05, #19
2590c     14 24 46 F0 | 	shr	local04, #20
25910     02 24 66 F0 | 	shl	local04, #2
25914     ED 24 02 F1 | 	add	local04, __methods__
25918     12 25 02 FB | 	rdlong	local04, local04
2591c     10 20 06 F1 | 	add	local02, #16
25920     10 15 02 FB | 	rdlong	arg02, local02
25924     10 20 86 F1 | 	sub	local02, #16
25928     0F 13 02 F6 | 	mov	arg01, local01
2592c     11 17 02 F6 | 	mov	arg03, local03
25930     F2 28 02 F6 | 	mov	local06, objptr
25934     13 E5 01 F6 | 	mov	objptr, local05
25938     2D 24 62 FD | 	call	local04
2593c     14 E5 01 F6 | 	mov	objptr, local06
25940     58 00 90 FD | 	jmp	#LR__3644
25944                 | LR__3642
25944     08 20 06 F1 | 	add	local02, #8
25948     10 29 02 FB | 	rdlong	local06, local02
2594c     08 20 86 F1 | 	sub	local02, #8
25950     01 28 CE F7 | 	test	local06, #1 wz
25954     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
25958     40 00 90 AD |  if_e	jmp	#LR__3643
2595c     30 1E 06 F1 | 	add	local01, #48
25960     0F 25 02 FB | 	rdlong	local04, local01
25964     12 27 02 F6 | 	mov	local05, local04
25968     30 1E 86 F1 | 	sub	local01, #48
2596c     13 26 46 F7 | 	zerox	local05, #19
25970     14 24 46 F0 | 	shr	local04, #20
25974     02 24 66 F0 | 	shl	local04, #2
25978     ED 24 02 F1 | 	add	local04, __methods__
2597c     12 25 02 FB | 	rdlong	local04, local04
25980     0F 13 02 F6 | 	mov	arg01, local01
25984     11 15 62 F6 | 	neg	arg02, local03
25988     01 16 06 F6 | 	mov	arg03, #1
2598c     F2 28 02 F6 | 	mov	local06, objptr
25990     13 E5 01 F6 | 	mov	objptr, local05
25994     2D 24 62 FD | 	call	local04
25998     14 E5 01 F6 | 	mov	objptr, local06
2599c                 | LR__3643
2599c                 | LR__3644
2599c     10 01 68 FC | 	wrlong	#0, local02
259a0     04 20 06 F1 | 	add	local02, #4
259a4     10 01 68 FC | 	wrlong	#0, local02
259a8     04 20 06 F1 | 	add	local02, #4
259ac     10 01 68 FC | 	wrlong	#0, local02
259b0     00 FA 05 F6 | 	mov	result1, #0
259b4     A7 F0 03 F6 | 	mov	ptra, fp
259b8     B2 00 A0 FD | 	call	#popregs_
259bc                 | __system____default_flush_ret
259bc     2D 00 64 FD | 	ret
259c0                 | 
259c0                 | __system____default_buffer_init
259c0     02 4A 05 F6 | 	mov	COUNT_, #2
259c4     A8 00 A0 FD | 	call	#pushregs_
259c8     09 1F 02 F6 | 	mov	local01, arg01
259cc     0F 21 02 FB | 	rdlong	local02, local01
259d0     0F 13 02 F6 | 	mov	arg01, local01
259d4     34 03 B0 FD | 	call	#__system___isatty
259d8     00 FA 0D F2 | 	cmp	result1, #0 wz
259dc     06 1E 06 51 |  if_ne	add	local01, #6
259e0     0F 0B 58 5C |  if_ne	wrword	#5, local01
259e4     06 1E 06 A1 |  if_e	add	local01, #6
259e8     0F 0D 58 AC |  if_e	wrword	#6, local01
259ec     14 20 06 F1 | 	add	local02, #20
259f0     10 1F 02 F6 | 	mov	local01, local02
259f4     04 20 86 F1 | 	sub	local02, #4
259f8     10 1F 62 FC | 	wrlong	local01, local02
259fc     04 20 86 F1 | 	sub	local02, #4
25a00     02 00 80 FF 
25a04     10 01 68 FC | 	wrlong	##1024, local02
25a08     00 FA 05 F6 | 	mov	result1, #0
25a0c     A7 F0 03 F6 | 	mov	ptra, fp
25a10     B2 00 A0 FD | 	call	#popregs_
25a14                 | __system____default_buffer_init_ret
25a14     2D 00 64 FD | 	ret
25a18                 | 
25a18                 | __system__stat
25a18     04 4A 05 F6 | 	mov	COUNT_, #4
25a1c     A8 00 A0 FD | 	call	#pushregs_
25a20     0A 1F 02 F6 | 	mov	local01, arg02
25a24     84 E7 05 F1 | 	add	ptr___system__dat__, #388
25a28     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
25a2c     09 15 02 F6 | 	mov	arg02, arg01
25a30     10 13 02 F6 | 	mov	arg01, local02
25a34     00 16 06 F6 | 	mov	arg03, #0
25a38     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
25a3c     40 B8 BF FD | 	call	#__system____getvfsforfile
25a40     FD 22 0A F6 | 	mov	local03, result1 wz
25a44     10 00 90 AD |  if_e	jmp	#LR__3650
25a48     34 22 06 F1 | 	add	local03, #52
25a4c     11 17 0A FB | 	rdlong	arg03, local03 wz
25a50     34 22 86 F1 | 	sub	local03, #52
25a54     14 00 90 5D |  if_ne	jmp	#LR__3651
25a58                 | LR__3650
25a58     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25a5c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
25a60     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25a64     01 FA 65 F6 | 	neg	result1, #1
25a68     68 00 90 FD | 	jmp	#LR__3652
25a6c                 | LR__3651
25a6c     0F 13 02 F6 | 	mov	arg01, local01
25a70     00 14 06 F6 | 	mov	arg02, #0
25a74     30 16 06 F6 | 	mov	arg03, #48
25a78     09 25 02 F6 | 	mov	local04, arg01
25a7c     98 00 A0 FD | 	call	#\builtin_bytefill_
25a80     12 FB 01 F6 | 	mov	result1, local04
25a84     10 13 CA FA | 	rdbyte	arg01, local02 wz
25a88     08 1E 06 A1 |  if_e	add	local01, #8
25a8c     08 00 80 AF 
25a90     0F FF 6B AC |  if_e	wrlong	##4607, local01
25a94     00 FA 05 A6 |  if_e	mov	result1, #0
25a98     38 00 90 AD |  if_e	jmp	#LR__3652
25a9c     34 22 06 F1 | 	add	local03, #52
25aa0     11 23 02 FB | 	rdlong	local03, local03
25aa4     11 25 02 F6 | 	mov	local04, local03
25aa8     13 22 46 F7 | 	zerox	local03, #19
25aac     14 24 46 F0 | 	shr	local04, #20
25ab0     02 24 66 F0 | 	shl	local04, #2
25ab4     ED 24 02 F1 | 	add	local04, __methods__
25ab8     12 25 02 FB | 	rdlong	local04, local04
25abc     10 13 02 F6 | 	mov	arg01, local02
25ac0     0F 15 02 F6 | 	mov	arg02, local01
25ac4     F2 20 02 F6 | 	mov	local02, objptr
25ac8     11 E5 01 F6 | 	mov	objptr, local03
25acc     2D 24 62 FD | 	call	local04
25ad0     10 E5 01 F6 | 	mov	objptr, local02
25ad4                 | LR__3652
25ad4     A7 F0 03 F6 | 	mov	ptra, fp
25ad8     B2 00 A0 FD | 	call	#popregs_
25adc                 | __system__stat_ret
25adc     2D 00 64 FD | 	ret
25ae0                 | 
25ae0                 | __system__write
25ae0     0A 12 16 F2 | 	cmp	arg01, #10 wc
25ae4     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25ae8     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25aec     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25af0     01 FA 65 36 |  if_ae	neg	result1, #1
25af4     20 00 90 3D |  if_ae	jmp	#LR__3660
25af8     34 12 06 FD | 	qmul	arg01, #52
25afc     02 00 00 FF 
25b00     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25b04     18 12 62 FD | 	getqx	arg01
25b08     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
25b0c     02 00 00 FF 
25b10     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25b14     0C 10 B0 FD | 	call	#__system___vfswrite
25b18                 | LR__3660
25b18                 | __system__write_ret
25b18     2D 00 64 FD | 	ret
25b1c                 | 
25b1c                 | __system__read
25b1c     0A 12 16 F2 | 	cmp	arg01, #10 wc
25b20     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25b24     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25b28     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25b2c     01 FA 65 36 |  if_ae	neg	result1, #1
25b30     20 00 90 3D |  if_ae	jmp	#LR__3670
25b34     34 12 06 FD | 	qmul	arg01, #52
25b38     02 00 00 FF 
25b3c     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25b40     18 12 62 FD | 	getqx	arg01
25b44     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
25b48     02 00 00 FF 
25b4c     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25b50     98 11 B0 FD | 	call	#__system___vfsread
25b54                 | LR__3670
25b54                 | __system__read_ret
25b54     2D 00 64 FD | 	ret
25b58                 | 
25b58                 | __system__close
25b58     0A 12 16 F2 | 	cmp	arg01, #10 wc
25b5c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25b60     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25b64     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25b68     01 FA 65 36 |  if_ae	neg	result1, #1
25b6c     20 00 90 3D |  if_ae	jmp	#LR__3680
25b70     34 12 06 FD | 	qmul	arg01, #52
25b74     02 00 00 FF 
25b78     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25b7c     18 12 62 FD | 	getqx	arg01
25b80     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
25b84     02 00 00 FF 
25b88     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25b8c     10 F9 BF FD | 	call	#__system___closeraw
25b90                 | LR__3680
25b90                 | __system__close_ret
25b90     2D 00 64 FD | 	ret
25b94                 | 
25b94                 | __system__lseek
25b94     06 4A 05 F6 | 	mov	COUNT_, #6
25b98     A8 00 A0 FD | 	call	#pushregs_
25b9c     0A 12 16 F2 | 	cmp	arg01, #10 wc
25ba0     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25ba4     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25ba8     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25bac     01 FA 65 36 |  if_ae	neg	result1, #1
25bb0     C4 00 90 3D |  if_ae	jmp	#LR__3691
25bb4     34 12 06 FD | 	qmul	arg01, #52
25bb8     02 00 00 FF 
25bbc     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25bc0     18 1E 62 FD | 	getqx	local01
25bc4     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
25bc8     30 1E 06 F1 | 	add	local01, #48
25bcc     0F 13 0A FB | 	rdlong	arg01, local01 wz
25bd0     30 1E 86 F1 | 	sub	local01, #48
25bd4     02 00 00 FF 
25bd8     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25bdc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25be0     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
25be4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25be8     01 FA 65 A6 |  if_e	neg	result1, #1
25bec     88 00 90 AD |  if_e	jmp	#LR__3691
25bf0     08 1E 06 F1 | 	add	local01, #8
25bf4     0F 21 02 FB | 	rdlong	local02, local01
25bf8     08 1E 86 F1 | 	sub	local01, #8
25bfc     40 20 CE F7 | 	test	local02, #64 wz
25c00     08 1E 06 51 |  if_ne	add	local01, #8
25c04     0F 21 02 5B |  if_ne	rdlong	local02, local01
25c08     80 20 46 55 |  if_ne	or	local02, #128
25c0c     0F 21 62 5C |  if_ne	wrlong	local02, local01
25c10     08 1E 86 51 |  if_ne	sub	local01, #8
25c14     30 1E 06 F1 | 	add	local01, #48
25c18     0F 23 02 FB | 	rdlong	local03, local01
25c1c     11 25 02 F6 | 	mov	local04, local03
25c20     30 1E 86 F1 | 	sub	local01, #48
25c24     13 24 46 F7 | 	zerox	local04, #19
25c28     14 22 46 F0 | 	shr	local03, #20
25c2c     02 22 66 F0 | 	shl	local03, #2
25c30     ED 22 02 F1 | 	add	local03, __methods__
25c34     11 23 02 FB | 	rdlong	local03, local03
25c38     0F 13 02 F6 | 	mov	arg01, local01
25c3c     F2 26 02 F6 | 	mov	local05, objptr
25c40     12 E5 01 F6 | 	mov	objptr, local04
25c44     2D 22 62 FD | 	call	local03
25c48     13 E5 01 F6 | 	mov	objptr, local05
25c4c     FD 28 02 F6 | 	mov	local06, result1
25c50     00 28 56 F2 | 	cmps	local06, #0 wc
25c54     1C 00 90 3D |  if_ae	jmp	#LR__3690
25c58     14 13 6A F6 | 	neg	arg01, local06 wz
25c5c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25c60     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25c64     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25c68     01 FA 65 56 |  if_ne	neg	result1, #1
25c6c     00 FA 05 A6 |  if_e	mov	result1, #0
25c70     04 00 90 FD | 	jmp	#LR__3691
25c74                 | LR__3690
25c74     14 FB 01 F6 | 	mov	result1, local06
25c78                 | LR__3691
25c78     A7 F0 03 F6 | 	mov	ptra, fp
25c7c     B2 00 A0 FD | 	call	#popregs_
25c80                 | __system__lseek_ret
25c80     2D 00 64 FD | 	ret
25c84                 | 
25c84                 | __system___ioctl
25c84     03 4A 05 F6 | 	mov	COUNT_, #3
25c88     A8 00 A0 FD | 	call	#pushregs_
25c8c     00 12 4E F2 | 	cmps	arg01, #0 wz
25c90     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25c94     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
25c98     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25c9c     01 FA 65 A6 |  if_e	neg	result1, #1
25ca0     5C 00 90 AD |  if_e	jmp	#LR__3701
25ca4     28 12 06 F1 | 	add	arg01, #40
25ca8     09 1F 02 FB | 	rdlong	local01, arg01
25cac     0F 21 02 F6 | 	mov	local02, local01
25cb0     28 12 86 F1 | 	sub	arg01, #40
25cb4     13 20 46 F7 | 	zerox	local02, #19
25cb8     14 1E 46 F0 | 	shr	local01, #20
25cbc     02 1E 66 F0 | 	shl	local01, #2
25cc0     ED 1E 02 F1 | 	add	local01, __methods__
25cc4     0F 1F 02 FB | 	rdlong	local01, local01
25cc8     F2 22 02 F6 | 	mov	local03, objptr
25ccc     10 E5 01 F6 | 	mov	objptr, local02
25cd0     2D 1E 62 FD | 	call	local01
25cd4     11 E5 01 F6 | 	mov	objptr, local03
25cd8     FD 12 0A F6 | 	mov	arg01, result1 wz
25cdc     1C 00 90 AD |  if_e	jmp	#LR__3700
25ce0     00 12 4E F2 | 	cmps	arg01, #0 wz
25ce4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25ce8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25cec     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25cf0     01 FA 65 56 |  if_ne	neg	result1, #1
25cf4     00 FA 05 A6 |  if_e	mov	result1, #0
25cf8     04 00 90 FD | 	jmp	#LR__3701
25cfc                 | LR__3700
25cfc     00 FA 05 F6 | 	mov	result1, #0
25d00                 | LR__3701
25d00     A7 F0 03 F6 | 	mov	ptra, fp
25d04     B2 00 A0 FD | 	call	#popregs_
25d08                 | __system___ioctl_ret
25d08     2D 00 64 FD | 	ret
25d0c                 | 
25d0c                 | __system___isatty
25d0c     00 4A 05 F6 | 	mov	COUNT_, #0
25d10     A8 00 A0 FD | 	call	#pushregs_
25d14     0C F0 07 F1 | 	add	ptra, #12
25d18     04 4E 05 F1 | 	add	fp, #4
25d1c     A7 12 62 FC | 	wrlong	arg01, fp
25d20     04 4E 05 F1 | 	add	fp, #4
25d24     A7 16 02 F6 | 	mov	arg03, fp
25d28     08 4E 85 F1 | 	sub	fp, #8
25d2c     00 15 06 F6 | 	mov	arg02, #256
25d30     50 FF BF FD | 	call	#__system___ioctl
25d34     00 FA 0D F2 | 	cmp	result1, #0 wz
25d38     01 FA 05 A6 |  if_e	mov	result1, #1
25d3c     00 FA 05 56 |  if_ne	mov	result1, #0
25d40     A7 F0 03 F6 | 	mov	ptra, fp
25d44     B2 00 A0 FD | 	call	#popregs_
25d48                 | __system___isatty_ret
25d48     2D 00 64 FD | 	ret
25d4c                 | 
25d4c                 | __system____getftab
25d4c     0A 12 16 F2 | 	cmp	arg01, #10 wc
25d50     34 12 06 CD |  if_b	qmul	arg01, #52
25d54     00 FA 05 36 |  if_ae	mov	result1, #0
25d58     02 00 00 CF 
25d5c     20 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1312
25d60     18 FA 61 CD |  if_b	getqx	result1
25d64     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
25d68     02 00 00 CF 
25d6c     20 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
25d70                 | __system____getftab_ret
25d70     2D 00 64 FD | 	ret
25d74                 | 
25d74                 | __system__strncpy
25d74     09 01 02 F6 | 	mov	_var01, arg01
25d78                 | LR__3710
25d78     01 16 86 F1 | 	sub	arg03, #1
25d7c     00 16 56 F2 | 	cmps	arg03, #0 wc
25d80     18 00 90 CD |  if_b	jmp	#LR__3711
25d84     0A FB C1 FA | 	rdbyte	result1, arg02
25d88     00 FB 41 FC | 	wrbyte	result1, _var01
25d8c     01 14 06 F1 | 	add	arg02, #1
25d90     00 FB C9 FA | 	rdbyte	result1, _var01 wz
25d94     01 00 06 F1 | 	add	_var01, #1
25d98     DC FF 9F 5D |  if_ne	jmp	#LR__3710
25d9c                 | LR__3711
25d9c     97 0C 48 FB | 	callpa	#(@LR__3713-@LR__3712)>>2,fcache_load_ptr_
25da0                 | LR__3712
25da0     01 16 86 F1 | 	sub	arg03, #1
25da4     00 16 56 F2 | 	cmps	arg03, #0 wc
25da8     00 03 02 36 |  if_ae	mov	_var02, _var01
25dac     01 00 06 31 |  if_ae	add	_var01, #1
25db0     01 01 48 3C |  if_ae	wrbyte	#0, _var02
25db4     E8 FF 9F 3D |  if_ae	jmp	#LR__3712
25db8                 | LR__3713
25db8     09 FB 01 F6 | 	mov	result1, arg01
25dbc                 | __system__strncpy_ret
25dbc     2D 00 64 FD | 	ret
25dc0                 | 
25dc0                 | __system__strncat
25dc0     00 14 4E F2 | 	cmps	arg02, #0 wz
25dc4     50 00 90 AD |  if_e	jmp	#LR__3724
25dc8     01 16 16 F2 | 	cmp	arg03, #1 wc
25dcc     48 00 90 CD |  if_b	jmp	#LR__3724
25dd0     09 01 02 F6 | 	mov	_var01, arg01
25dd4     97 1E 48 FB | 	callpa	#(@LR__3722-@LR__3720)>>2,fcache_load_ptr_
25dd8                 | LR__3720
25dd8     00 FB C9 FA | 	rdbyte	result1, _var01 wz
25ddc     01 00 06 51 |  if_ne	add	_var01, #1
25de0     F4 FF 9F 5D |  if_ne	jmp	#LR__3720
25de4     0B 03 02 F6 | 	mov	_var02, arg03
25de8                 | LR__3721
25de8     0A 05 C2 FA | 	rdbyte	_var03, arg02
25dec     02 07 02 F6 | 	mov	_var04, _var03
25df0     07 06 4E F7 | 	zerox	_var04, #7 wz
25df4     01 14 06 F1 | 	add	arg02, #1
25df8     18 00 90 AD |  if_e	jmp	#LR__3723
25dfc     01 02 86 F1 | 	sub	_var02, #1
25e00     00 02 56 F2 | 	cmps	_var02, #0 wc
25e04     00 07 02 36 |  if_ae	mov	_var04, _var01
25e08     01 00 06 31 |  if_ae	add	_var01, #1
25e0c     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
25e10     D4 FF 9F 3D |  if_ae	jmp	#LR__3721
25e14                 | LR__3722
25e14                 | LR__3723
25e14     00 01 48 FC | 	wrbyte	#0, _var01
25e18                 | LR__3724
25e18     09 FB 01 F6 | 	mov	result1, arg01
25e1c                 | __system__strncat_ret
25e1c     2D 00 64 FD | 	ret
25e20                 | 
25e20                 | __system__strncmp
25e20     09 01 0A F6 | 	mov	_var01, arg01 wz
25e24     14 00 90 5D |  if_ne	jmp	#LR__3730
25e28     00 14 0E F2 | 	cmp	arg02, #0 wz
25e2c     01 02 66 56 |  if_ne	neg	_var02, #1
25e30     00 02 06 A6 |  if_e	mov	_var02, #0
25e34     01 FB 01 F6 | 	mov	result1, _var02
25e38     74 00 90 FD | 	jmp	#__system__strncmp_ret
25e3c                 | LR__3730
25e3c     00 14 0E F2 | 	cmp	arg02, #0 wz
25e40     01 FA 05 A6 |  if_e	mov	result1, #1
25e44     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25e48     0B 05 02 F6 | 	mov	_var03, arg03
25e4c     97 16 48 FB | 	callpa	#(@LR__3732-@LR__3731)>>2,fcache_load_ptr_
25e50                 | LR__3731
25e50     00 07 C2 FA | 	rdbyte	_var04, _var01
25e54     0A 09 02 F6 | 	mov	_var05, arg02
25e58     04 0B C2 FA | 	rdbyte	_var06, _var05
25e5c     01 04 86 F1 | 	sub	_var03, #1
25e60     00 04 56 F2 | 	cmps	_var03, #0 wc
25e64     01 00 06 F1 | 	add	_var01, #1
25e68     01 14 06 F1 | 	add	arg02, #1
25e6c     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
25e70     08 00 90 2D |  if_nc_and_z	jmp	#LR__3733
25e74     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
25e78     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3731
25e7c                 | LR__3732
25e7c                 | LR__3733
25e7c     00 04 56 F2 | 	cmps	_var03, #0 wc
25e80     00 FA 05 C6 |  if_b	mov	result1, #0
25e84     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
25e88     05 07 0A F2 | 	cmp	_var04, _var06 wz
25e8c     00 FA 05 A6 |  if_e	mov	result1, #0
25e90     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25e94     00 06 0E F2 | 	cmp	_var04, #0 wz
25e98     01 FA 65 A6 |  if_e	neg	result1, #1
25e9c     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25ea0     00 0A 0E F2 | 	cmp	_var06, #0 wz
25ea4     01 FA 05 A6 |  if_e	mov	result1, #1
25ea8     03 FB 01 56 |  if_ne	mov	result1, _var04
25eac     05 FB 81 51 |  if_ne	sub	result1, _var06
25eb0                 | __system__strncmp_ret
25eb0     2D 00 64 FD | 	ret
25eb4                 | 
25eb4                 | __system____root_opendir
25eb4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
25eb8     04 12 06 F1 | 	add	arg01, #4
25ebc     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
25ec0     00 FA 05 F6 | 	mov	result1, #0
25ec4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
25ec8                 | __system____root_opendir_ret
25ec8     2D 00 64 FD | 	ret
25ecc                 | 
25ecc                 | __system____root_readdir
25ecc     03 4A 05 F6 | 	mov	COUNT_, #3
25ed0     A8 00 A0 FD | 	call	#pushregs_
25ed4     09 1F 02 F6 | 	mov	local01, arg01
25ed8     0A 21 02 F6 | 	mov	local02, arg02
25edc     04 1E 06 F1 | 	add	local01, #4
25ee0     0F 23 02 FB | 	rdlong	local03, local01
25ee4     04 1E 86 F1 | 	sub	local01, #4
25ee8                 | LR__3740
25ee8     74 E6 05 F1 | 	add	ptr___system__dat__, #116
25eec     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
25ef0     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
25ef4     01 FA 65 A6 |  if_e	neg	result1, #1
25ef8     48 00 90 AD |  if_e	jmp	#LR__3741
25efc     11 17 0A FB | 	rdlong	arg03, local03 wz
25f00     04 22 06 A1 |  if_e	add	local03, #4
25f04     E0 FF 9F AD |  if_e	jmp	#LR__3740
25f08     11 15 02 FB | 	rdlong	arg02, local03
25f0c     01 14 06 F1 | 	add	arg02, #1
25f10     10 13 02 F6 | 	mov	arg01, local02
25f14     40 16 06 F6 | 	mov	arg03, #64
25f18     58 FE BF FD | 	call	#__system__strncpy
25f1c     50 20 06 F1 | 	add	local02, #80
25f20     10 03 48 FC | 	wrbyte	#1, local02
25f24     08 20 86 F1 | 	sub	local02, #8
25f28     10 01 68 FC | 	wrlong	#0, local02
25f2c     04 20 06 F1 | 	add	local02, #4
25f30     10 01 68 FC | 	wrlong	#0, local02
25f34     04 22 06 F1 | 	add	local03, #4
25f38     04 1E 06 F1 | 	add	local01, #4
25f3c     0F 23 62 FC | 	wrlong	local03, local01
25f40     00 FA 05 F6 | 	mov	result1, #0
25f44                 | LR__3741
25f44     A7 F0 03 F6 | 	mov	ptra, fp
25f48     B2 00 A0 FD | 	call	#popregs_
25f4c                 | __system____root_readdir_ret
25f4c     2D 00 64 FD | 	ret
25f50                 | 
25f50                 | __system____root_closedir
25f50     00 FA 05 F6 | 	mov	result1, #0
25f54                 | __system____root_closedir_ret
25f54     2D 00 64 FD | 	ret
25f58                 | 
25f58                 | __system____root_stat
25f58     0A 01 02 F6 | 	mov	_var01, arg02
25f5c     00 13 02 F6 | 	mov	arg01, _var01
25f60     00 14 06 F6 | 	mov	arg02, #0
25f64     30 16 06 F6 | 	mov	arg03, #48
25f68     98 00 A0 FD | 	call	#\builtin_bytefill_
25f6c     08 00 06 F1 | 	add	_var01, #8
25f70     08 00 80 FF 
25f74     00 FF 6B FC | 	wrlong	##4607, _var01
25f78     00 FA 05 F6 | 	mov	result1, #0
25f7c                 | __system____root_stat_ret
25f7c     2D 00 64 FD | 	ret
25f80                 | 
25f80                 | __system___normalizeName
25f80     00 00 06 F6 | 	mov	_var01, #0
25f84     09 03 02 F6 | 	mov	_var02, arg01
25f88     01 05 02 F6 | 	mov	_var03, _var02
25f8c                 | LR__3750
25f8c     01 07 CA FA | 	rdbyte	_var04, _var02 wz
25f90     5C 01 90 AD |  if_e	jmp	#LR__3769
25f94     00 00 0E F2 | 	cmp	_var01, #0 wz
25f98     02 07 02 56 |  if_ne	mov	_var04, _var03
25f9c     01 04 06 51 |  if_ne	add	_var03, #1
25fa0     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
25fa4     00 00 06 56 |  if_ne	mov	_var01, #0
25fa8     01 07 C2 FA | 	rdbyte	_var04, _var02
25fac     2E 06 0E F2 | 	cmp	_var04, #46 wz
25fb0     D8 00 90 5D |  if_ne	jmp	#LR__3762
25fb4     01 02 06 F1 | 	add	_var02, #1
25fb8     01 07 C2 FA | 	rdbyte	_var04, _var02
25fbc     01 02 86 F1 | 	sub	_var02, #1
25fc0     2F 06 0E F2 | 	cmp	_var04, #47 wz
25fc4     18 00 90 AD |  if_e	jmp	#LR__3751
25fc8     01 02 06 F1 | 	add	_var02, #1
25fcc     01 09 C2 FA | 	rdbyte	_var05, _var02
25fd0     01 02 86 F1 | 	sub	_var02, #1
25fd4     04 0B 02 F6 | 	mov	_var06, _var05
25fd8     07 0A 4E F7 | 	zerox	_var06, #7 wz
25fdc     10 00 90 5D |  if_ne	jmp	#LR__3752
25fe0                 | LR__3751
25fe0     01 0D 02 F6 | 	mov	_var07, _var02
25fe4     01 0C 06 F1 | 	add	_var07, #1
25fe8     06 03 02 F6 | 	mov	_var02, _var07
25fec     E0 00 90 FD | 	jmp	#LR__3766
25ff0                 | LR__3752
25ff0     01 02 06 F1 | 	add	_var02, #1
25ff4     01 0D C2 FA | 	rdbyte	_var07, _var02
25ff8     01 02 86 F1 | 	sub	_var02, #1
25ffc     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
26000     2E 06 0E F2 | 	cmp	_var04, #46 wz
26004     84 00 90 5D |  if_ne	jmp	#LR__3761
26008     02 02 06 F1 | 	add	_var02, #2
2600c     01 0D C2 FA | 	rdbyte	_var07, _var02
26010     02 02 86 F1 | 	sub	_var02, #2
26014     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
26018     2F 06 0E F2 | 	cmp	_var04, #47 wz
2601c     18 00 90 AD |  if_e	jmp	#LR__3753
26020     02 02 06 F1 | 	add	_var02, #2
26024     01 09 C2 FA | 	rdbyte	_var05, _var02
26028     02 02 86 F1 | 	sub	_var02, #2
2602c     04 0B 02 F6 | 	mov	_var06, _var05
26030     07 0A 4E F7 | 	zerox	_var06, #7 wz
26034     54 00 90 5D |  if_ne	jmp	#LR__3760
26038                 | LR__3753
26038     02 02 06 F1 | 	add	_var02, #2
2603c     09 05 5A F2 | 	cmps	_var03, arg01 wcz
26040     40 00 90 ED |  if_be	jmp	#LR__3759
26044     02 0F 02 F6 | 	mov	_var08, _var03
26048     01 0E 86 F1 | 	sub	_var08, #1
2604c                 | LR__3754
2604c     07 07 C2 FA | 	rdbyte	_var04, _var08
26050     2F 06 0E F2 | 	cmp	_var04, #47 wz
26054     0C 00 90 5D |  if_ne	jmp	#LR__3755
26058     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2605c     01 0E 86 11 |  if_a	sub	_var08, #1
26060     E8 FF 9F 1D |  if_a	jmp	#LR__3754
26064                 | LR__3755
26064     97 0C 48 FB | 	callpa	#(@LR__3757-@LR__3756)>>2,fcache_load_ptr_
26068                 | LR__3756
26068     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2606c     10 00 90 ED |  if_be	jmp	#LR__3758
26070     07 07 C2 FA | 	rdbyte	_var04, _var08
26074     2F 06 0E F2 | 	cmp	_var04, #47 wz
26078     01 0E 86 51 |  if_ne	sub	_var08, #1
2607c     E8 FF 9F 5D |  if_ne	jmp	#LR__3756
26080                 | LR__3757
26080                 | LR__3758
26080     07 05 02 F6 | 	mov	_var03, _var08
26084                 | LR__3759
26084     01 00 06 F6 | 	mov	_var01, #1
26088     44 00 90 FD | 	jmp	#LR__3766
2608c                 | LR__3760
2608c                 | LR__3761
2608c                 | LR__3762
2608c     97 18 48 FB | 	callpa	#(@LR__3764-@LR__3763)>>2,fcache_load_ptr_
26090                 | LR__3763
26090     01 07 CA FA | 	rdbyte	_var04, _var02 wz
26094     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
26098     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
2609c     20 00 90 AD |  if_e	jmp	#LR__3765
260a0     01 0B 02 F6 | 	mov	_var06, _var02
260a4     01 09 02 F6 | 	mov	_var05, _var02
260a8     01 08 06 F1 | 	add	_var05, #1
260ac     05 11 C2 FA | 	rdbyte	_var09, _var06
260b0     04 03 02 F6 | 	mov	_var02, _var05
260b4     02 11 42 FC | 	wrbyte	_var09, _var03
260b8     01 04 06 F1 | 	add	_var03, #1
260bc     D0 FF 9F FD | 	jmp	#LR__3763
260c0                 | LR__3764
260c0                 | LR__3765
260c0     01 07 C2 FA | 	rdbyte	_var04, _var02
260c4     2F 06 0E F2 | 	cmp	_var04, #47 wz
260c8     C0 FE 9F 5D |  if_ne	jmp	#LR__3750
260cc     01 00 06 F6 | 	mov	_var01, #1
260d0                 | LR__3766
260d0     97 0C 48 FB | 	callpa	#(@LR__3768-@LR__3767)>>2,fcache_load_ptr_
260d4                 | LR__3767
260d4     01 07 C2 FA | 	rdbyte	_var04, _var02
260d8     2F 06 0E F2 | 	cmp	_var04, #47 wz
260dc     01 0D 02 A6 |  if_e	mov	_var07, _var02
260e0     01 0C 06 A1 |  if_e	add	_var07, #1
260e4     06 03 02 A6 |  if_e	mov	_var02, _var07
260e8     E8 FF 9F AD |  if_e	jmp	#LR__3767
260ec                 | LR__3768
260ec     9C FE 9F FD | 	jmp	#LR__3750
260f0                 | LR__3769
260f0     02 01 48 FC | 	wrbyte	#0, _var03
260f4                 | __system___normalizeName_ret
260f4     2D 00 64 FD | 	ret
260f8                 | 
260f8                 | __system___strrev
260f8     09 01 CA FA | 	rdbyte	_var01, arg01 wz
260fc     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
26100     09 03 02 F6 | 	mov	_var02, arg01
26104     97 1A 48 FB | 	callpa	#(@LR__3772-@LR__3770)>>2,fcache_load_ptr_
26108                 | LR__3770
26108     01 01 CA FA | 	rdbyte	_var01, _var02 wz
2610c     01 02 06 51 |  if_ne	add	_var02, #1
26110     F4 FF 9F 5D |  if_ne	jmp	#LR__3770
26114     01 02 86 F1 | 	sub	_var02, #1
26118                 | LR__3771
26118     09 03 5A F2 | 	cmps	_var02, arg01 wcz
2611c     1C 00 90 ED |  if_be	jmp	#LR__3773
26120     09 01 C2 FA | 	rdbyte	_var01, arg01
26124     01 05 C2 FA | 	rdbyte	_var03, _var02
26128     09 05 42 FC | 	wrbyte	_var03, arg01
2612c     01 01 42 FC | 	wrbyte	_var01, _var02
26130     01 12 06 F1 | 	add	arg01, #1
26134     01 02 86 F1 | 	sub	_var02, #1
26138     DC FF 9F FD | 	jmp	#LR__3771
2613c                 | LR__3772
2613c                 | LR__3773
2613c                 | __system___strrev_ret
2613c     2D 00 64 FD | 	ret
26140                 | 
26140                 | __system___fmtpad
26140     06 4A 05 F6 | 	mov	COUNT_, #6
26144     A8 00 A0 FD | 	call	#pushregs_
26148     09 1F 02 F6 | 	mov	local01, arg01
2614c     0A 21 02 F6 | 	mov	local02, arg02
26150     0B 23 02 F6 | 	mov	local03, arg03
26154     10 13 EA F8 | 	getbyte	arg01, local02, #1
26158     16 20 46 F0 | 	shr	local02, #22
2615c     03 20 0E F5 | 	and	local02, #3 wz
26160     00 24 06 F6 | 	mov	local04, #0
26164     01 20 06 A6 |  if_e	mov	local02, #1
26168     0C 21 CA F7 | 	test	local02, arg04 wz
2616c     00 FA 05 A6 |  if_e	mov	result1, #0
26170     88 00 90 AD |  if_e	jmp	#LR__3783
26174     09 23 C2 F2 | 	subr	local03, arg01
26178     01 22 56 F2 | 	cmps	local03, #1 wc
2617c     00 FA 05 C6 |  if_b	mov	result1, #0
26180     78 00 90 CD |  if_b	jmp	#LR__3783
26184     03 20 0E F2 | 	cmp	local02, #3 wz
26188     18 00 90 5D |  if_ne	jmp	#LR__3780
2618c     01 18 0E F2 | 	cmp	arg04, #1 wz
26190     6E 20 62 FD | 	wrz	local02
26194     10 23 02 F1 | 	add	local03, local02
26198     11 23 52 F6 | 	abs	local03, local03 wc
2619c     01 22 46 F0 | 	shr	local03, #1
261a0     11 23 82 F6 | 	negc	local03, local03
261a4                 | LR__3780
261a4     01 22 56 F2 | 	cmps	local03, #1 wc
261a8     4C 00 90 CD |  if_b	jmp	#LR__3782
261ac     11 27 02 F6 | 	mov	local05, local03
261b0                 | LR__3781
261b0     0F 21 02 F6 | 	mov	local02, local01
261b4     0F 29 02 F6 | 	mov	local06, local01
261b8     13 20 46 F7 | 	zerox	local02, #19
261bc     14 28 46 F0 | 	shr	local06, #20
261c0     02 28 66 F0 | 	shl	local06, #2
261c4     ED 28 02 F1 | 	add	local06, __methods__
261c8     14 29 02 FB | 	rdlong	local06, local06
261cc     20 12 06 F6 | 	mov	arg01, #32
261d0     F2 22 02 F6 | 	mov	local03, objptr
261d4     10 E5 01 F6 | 	mov	objptr, local02
261d8     2D 28 62 FD | 	call	local06
261dc     11 E5 01 F6 | 	mov	objptr, local03
261e0     FD 28 02 F6 | 	mov	local06, result1
261e4     00 28 56 F2 | 	cmps	local06, #0 wc
261e8     14 FB 01 C6 |  if_b	mov	result1, local06
261ec     0C 00 90 CD |  if_b	jmp	#LR__3783
261f0     14 25 02 F1 | 	add	local04, local06
261f4     EE 27 6E FB | 	djnz	local05, #LR__3781
261f8                 | LR__3782
261f8     12 FB 01 F6 | 	mov	result1, local04
261fc                 | LR__3783
261fc     A7 F0 03 F6 | 	mov	ptra, fp
26200     B2 00 A0 FD | 	call	#popregs_
26204                 | __system___fmtpad_ret
26204     2D 00 64 FD | 	ret
26208                 | 
26208                 | __system___uitoa
26208     04 4A 05 F6 | 	mov	COUNT_, #4
2620c     A8 00 A0 FD | 	call	#pushregs_
26210     09 1F 02 F6 | 	mov	local01, arg01
26214     00 1A 4E F2 | 	cmps	arg05, #0 wz
26218     0F 1B 02 F6 | 	mov	arg05, local01
2621c     00 20 06 F6 | 	mov	local02, #0
26220     37 22 06 56 |  if_ne	mov	local03, #55
26224     57 22 06 A6 |  if_e	mov	local03, #87
26228                 | LR__3790
26228     0B 15 12 FD | 	qdiv	arg02, arg03
2622c     19 24 62 FD | 	getqy	local04
26230     0B 15 12 FD | 	qdiv	arg02, arg03
26234     0A 24 16 F2 | 	cmp	local04, #10 wc
26238     30 24 06 C1 |  if_b	add	local04, #48
2623c     11 25 02 31 |  if_ae	add	local04, local03
26240     0D 25 42 FC | 	wrbyte	local04, arg05
26244     01 1A 06 F1 | 	add	arg05, #1
26248     01 20 06 F1 | 	add	local02, #1
2624c     18 14 62 FD | 	getqx	arg02
26250     00 14 0E F2 | 	cmp	arg02, #0 wz
26254     D0 FF 9F 5D |  if_ne	jmp	#LR__3790
26258     0C 21 12 F2 | 	cmp	local02, arg04 wc
2625c     C8 FF 9F CD |  if_b	jmp	#LR__3790
26260     0D 01 48 FC | 	wrbyte	#0, arg05
26264     0F 13 02 F6 | 	mov	arg01, local01
26268     8C FE BF FD | 	call	#__system___strrev
2626c     10 FB 01 F6 | 	mov	result1, local02
26270     A7 F0 03 F6 | 	mov	ptra, fp
26274     B2 00 A0 FD | 	call	#popregs_
26278                 | __system___uitoa_ret
26278     2D 00 64 FD | 	ret
2627c                 | 
2627c                 | __system__disassemble_0498
2627c     10 4A 05 F6 | 	mov	COUNT_, #16
26280     A8 00 A0 FD | 	call	#pushregs_
26284     09 1F 02 F6 | 	mov	local01, arg01
26288     0A 21 02 F6 | 	mov	local02, arg02
2628c     0B 23 02 F6 | 	mov	local03, arg03
26290     0C 25 02 F6 | 	mov	local04, arg04
26294     0D 27 02 F6 | 	mov	local05, arg05
26298     13 13 52 F6 | 	abs	arg01, local05 wc
2629c     1F 28 C6 C9 |  if_b	decod	local06, #31
262a0     00 28 06 36 |  if_ae	mov	local06, #0
262a4     F0 CF BF FD | 	call	#__system___float_fromuns
262a8     14 FB 61 F5 | 	xor	result1, local06
262ac     FD 2A 02 F6 | 	mov	local07, result1
262b0     00 2C 06 F6 | 	mov	local08, #0
262b4     0F 13 02 F6 | 	mov	arg01, local01
262b8     00 14 06 F6 | 	mov	arg02, #0
262bc     01 16 06 F6 | 	mov	arg03, #1
262c0     0C D8 BF FD | 	call	#__system___float_cmp
262c4     00 FA 0D F2 | 	cmp	result1, #0 wz
262c8     00 2E 06 A6 |  if_e	mov	local09, #0
262cc     10 01 68 AC |  if_e	wrlong	#0, local02
262d0     11 2F 62 AC |  if_e	wrlong	local09, local03
262d4     8C 01 90 AD |  if_e	jmp	#LR__3812
262d8     0F 13 02 F6 | 	mov	arg01, local01
262dc     BC DC BF FD | 	call	#__system____builtin_ilogb
262e0     FD 30 02 F6 | 	mov	local10, result1
262e4     0A 26 0E F2 | 	cmp	local05, #10 wz
262e8     24 00 90 5D |  if_ne	jmp	#LR__3800
262ec     18 2F 02 F6 | 	mov	local09, local10
262f0     01 2E 66 F0 | 	shl	local09, #1
262f4     18 2F 02 F1 | 	add	local09, local10
262f8     17 31 52 F6 | 	abs	local10, local09 wc
262fc     0A 30 16 FD | 	qdiv	local10, #10
26300     09 32 06 F6 | 	mov	local11, #9
26304     18 30 62 FD | 	getqx	local10
26308     18 31 82 F6 | 	negc	local10, local10
2630c     04 00 90 FD | 	jmp	#LR__3801
26310                 | LR__3800
26310     18 32 06 F6 | 	mov	local11, #24
26314                 | LR__3801
26314                 | LR__3802
26314     08 2C 56 F2 | 	cmps	local08, #8 wc
26318     01 2C 06 F1 | 	add	local08, #1
2631c     60 00 90 3D |  if_ae	jmp	#LR__3803
26320     00 C0 1F FF 
26324     00 12 06 F6 | 	mov	arg01, ##1065353216
26328     15 15 02 F6 | 	mov	arg02, local07
2632c     18 17 02 F6 | 	mov	arg03, local10
26330     4C E3 BF FD | 	call	#__system___float_pow_n
26334     FD 14 02 F6 | 	mov	arg02, result1
26338     0F 13 02 F6 | 	mov	arg01, local01
2633c     60 D5 BF FD | 	call	#__system___float_div
26340     FD 34 02 F6 | 	mov	local12, result1
26344     1A 13 02 F6 | 	mov	arg01, local12
26348     00 C0 1F FF 
2634c     00 14 06 F6 | 	mov	arg02, ##1065353216
26350     01 16 06 F6 | 	mov	arg03, #1
26354     78 D7 BF FD | 	call	#__system___float_cmp
26358     00 FA 55 F2 | 	cmps	result1, #0 wc
2635c     01 30 86 C1 |  if_b	sub	local10, #1
26360     B0 FF 9F CD |  if_b	jmp	#LR__3802
26364     15 15 02 F6 | 	mov	arg02, local07
26368     1A 13 02 F6 | 	mov	arg01, local12
2636c     01 16 66 F6 | 	neg	arg03, #1
26370     5C D7 BF FD | 	call	#__system___float_cmp
26374     00 FA 55 F2 | 	cmps	result1, #0 wc
26378     01 30 06 31 |  if_ae	add	local10, #1
2637c     94 FF 9F 3D |  if_ae	jmp	#LR__3802
26380                 | LR__3803
26380     1A 13 02 F6 | 	mov	arg01, local12
26384     14 DC BF FD | 	call	#__system____builtin_ilogb
26388     FD 36 02 F6 | 	mov	local13, result1
2638c     1A 39 02 F6 | 	mov	local14, local12
26390     17 39 06 F4 | 	bitl	local14, #279
26394     17 38 26 F4 | 	bith	local14, #23
26398     1B 39 62 F0 | 	shl	local14, local13
2639c     02 26 0E F2 | 	cmp	local05, #2 wz
263a0     02 24 66 A0 |  if_e	shl	local04, #2
263a4     00 3A 06 F6 | 	mov	local15, #0
263a8     00 24 56 F2 | 	cmps	local04, #0 wc
263ac     10 00 90 3D |  if_ae	jmp	#LR__3804
263b0     18 25 C2 F2 | 	subr	local04, local10
263b4     00 24 56 F2 | 	cmps	local04, #0 wc
263b8     A0 00 90 CD |  if_b	jmp	#LR__3811
263bc     04 00 90 FD | 	jmp	#LR__3805
263c0                 | LR__3804
263c0     01 24 06 F1 | 	add	local04, #1
263c4                 | LR__3805
263c4     19 25 7A F3 | 	fles	local04, local11 wcz
263c8     01 3C 06 F6 | 	mov	local16, #1
263cc     97 22 48 FB | 	callpa	#(@LR__3807-@LR__3806)>>2,fcache_load_ptr_
263d0                 | LR__3806
263d0     00 40 00 FF 
263d4     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
263d8     38 00 90 3D |  if_ae	jmp	#LR__3808
263dc     01 24 56 F2 | 	cmps	local04, #1 wc
263e0     01 24 86 F1 | 	sub	local04, #1
263e4     2C 00 90 CD |  if_b	jmp	#LR__3808
263e8     13 3B 02 FD | 	qmul	local15, local05
263ec     1C 37 02 F6 | 	mov	local13, local14
263f0     17 36 46 F0 | 	shr	local13, #23
263f4     17 39 06 F4 | 	bitl	local14, #279
263f8     18 3A 62 FD | 	getqx	local15
263fc     13 3D 02 FD | 	qmul	local16, local05
26400     18 3C 62 FD | 	getqx	local16
26404     13 39 02 FD | 	qmul	local14, local05
26408     1B 3B 02 F1 | 	add	local15, local13
2640c     18 38 62 FD | 	getqx	local14
26410     BC FF 9F FD | 	jmp	#LR__3806
26414                 | LR__3807
26414                 | LR__3808
26414     13 2F 02 F6 | 	mov	local09, local05
26418     17 2E 66 F0 | 	shl	local09, #23
2641c     17 37 52 F6 | 	abs	local13, local09 wc
26420     01 36 46 F0 | 	shr	local13, #1
26424     1B 37 82 F6 | 	negc	local13, local13
26428     1B 39 1A F2 | 	cmp	local14, local13 wcz
2642c     20 00 90 1D |  if_a	jmp	#LR__3809
26430     17 26 66 F0 | 	shl	local05, #23
26434     13 37 52 F6 | 	abs	local13, local05 wc
26438     01 36 46 F0 | 	shr	local13, #1
2643c     1B 37 82 F6 | 	negc	local13, local13
26440     1B 39 0A F2 | 	cmp	local14, local13 wz
26444     14 00 90 5D |  if_ne	jmp	#LR__3810
26448     01 3A CE F7 | 	test	local15, #1 wz
2644c     0C 00 90 AD |  if_e	jmp	#LR__3810
26450                 | LR__3809
26450     01 3A 06 F1 | 	add	local15, #1
26454     1E 3B 0A F2 | 	cmp	local15, local16 wz
26458     01 30 06 A1 |  if_e	add	local10, #1
2645c                 | LR__3810
2645c                 | LR__3811
2645c     10 3B 62 FC | 	wrlong	local15, local02
26460     11 31 62 FC | 	wrlong	local10, local03
26464                 | LR__3812
26464     A7 F0 03 F6 | 	mov	ptra, fp
26468     B2 00 A0 FD | 	call	#popregs_
2646c                 | __system__disassemble_0498_ret
2646c     2D 00 64 FD | 	ret
26470                 | 
26470                 | __system__emitsign_0500
26470     00 FA 05 F6 | 	mov	result1, #0
26474     00 14 0E F2 | 	cmp	arg02, #0 wz
26478     09 01 02 56 |  if_ne	mov	_var01, arg01
2647c     01 12 06 51 |  if_ne	add	arg01, #1
26480     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
26484     01 FA 05 56 |  if_ne	mov	result1, #1
26488     00 16 0E F2 | 	cmp	arg03, #0 wz
2648c     09 61 48 5C |  if_ne	wrbyte	#48, arg01
26490     01 12 06 51 |  if_ne	add	arg01, #1
26494     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
26498     02 FA 05 51 |  if_ne	add	result1, #2
2649c                 | __system__emitsign_0500_ret
2649c     2D 00 64 FD | 	ret
264a0                 | 
264a0                 | __system___gettxfunc
264a0     01 4A 05 F6 | 	mov	COUNT_, #1
264a4     A8 00 A0 FD | 	call	#pushregs_
264a8     A0 F8 BF FD | 	call	#__system____getftab
264ac     FD 1E 0A F6 | 	mov	local01, result1 wz
264b0     10 00 90 AD |  if_e	jmp	#LR__3820
264b4     08 1E 06 F1 | 	add	local01, #8
264b8     0F 15 0A FB | 	rdlong	arg02, local01 wz
264bc     08 1E 86 F1 | 	sub	local01, #8
264c0     08 00 90 5D |  if_ne	jmp	#LR__3821
264c4                 | LR__3820
264c4     00 FA 05 F6 | 	mov	result1, #0
264c8     0C 00 90 FD | 	jmp	#LR__3822
264cc                 | LR__3821
264cc     00 98 04 FF 
264d0     00 1E 46 F5 | 	or	local01, ##154140672
264d4     0F FB 01 F6 | 	mov	result1, local01
264d8                 | LR__3822
264d8     A7 F0 03 F6 | 	mov	ptra, fp
264dc     B2 00 A0 FD | 	call	#popregs_
264e0                 | __system___gettxfunc_ret
264e0     2D 00 64 FD | 	ret
264e4                 | 
264e4                 | __system___getrxfunc
264e4     01 4A 05 F6 | 	mov	COUNT_, #1
264e8     A8 00 A0 FD | 	call	#pushregs_
264ec     5C F8 BF FD | 	call	#__system____getftab
264f0     FD 1E 0A F6 | 	mov	local01, result1 wz
264f4     10 00 90 AD |  if_e	jmp	#LR__3830
264f8     08 1E 06 F1 | 	add	local01, #8
264fc     0F 15 0A FB | 	rdlong	arg02, local01 wz
26500     08 1E 86 F1 | 	sub	local01, #8
26504     08 00 90 5D |  if_ne	jmp	#LR__3831
26508                 | LR__3830
26508     00 FA 05 F6 | 	mov	result1, #0
2650c     0C 00 90 FD | 	jmp	#LR__3832
26510                 | LR__3831
26510     00 A0 04 FF 
26514     00 1E 46 F5 | 	or	local01, ##155189248
26518     0F FB 01 F6 | 	mov	result1, local01
2651c                 | LR__3832
2651c     A7 F0 03 F6 | 	mov	ptra, fp
26520     B2 00 A0 FD | 	call	#popregs_
26524                 | __system___getrxfunc_ret
26524     2D 00 64 FD | 	ret
26528                 | 
26528                 | __system___getiolock_0540
26528     01 4A 05 F6 | 	mov	COUNT_, #1
2652c     A8 00 A0 FD | 	call	#pushregs_
26530     18 F8 BF FD | 	call	#__system____getftab
26534     FD 1E 0A F6 | 	mov	local01, result1 wz
26538     10 00 90 AD |  if_e	jmp	#LR__3840
2653c     08 1E 06 F1 | 	add	local01, #8
26540     0F FB 09 FB | 	rdlong	result1, local01 wz
26544     08 1E 86 F1 | 	sub	local01, #8
26548     18 00 90 5D |  if_ne	jmp	#LR__3841
2654c                 | LR__3840
2654c     01 00 00 FF 
26550     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
26554     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
26558     01 00 00 FF 
2655c     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
26560     08 00 90 FD | 	jmp	#LR__3842
26564                 | LR__3841
26564     0C 1E 06 F1 | 	add	local01, #12
26568     0F FB 01 F6 | 	mov	result1, local01
2656c                 | LR__3842
2656c     A7 F0 03 F6 | 	mov	ptra, fp
26570     B2 00 A0 FD | 	call	#popregs_
26574                 | __system___getiolock_0540_ret
26574     2D 00 64 FD | 	ret
26578                 | 
26578                 | __system____ScanForChar
26578     09 01 02 F6 | 	mov	_var01, arg01
2657c     09 03 02 F6 | 	mov	_var02, arg01
26580     97 06 48 FB | 	callpa	#(@LR__3851-@LR__3850)>>2,fcache_load_ptr_
26584                 | LR__3850
26584     01 FB C9 FA | 	rdbyte	result1, _var02 wz
26588     01 02 06 51 |  if_ne	add	_var02, #1
2658c     F4 FF 9F 5D |  if_ne	jmp	#LR__3850
26590                 | LR__3851
26590     09 03 82 F1 | 	sub	_var02, arg01
26594     01 FB 01 F6 | 	mov	result1, _var02
26598     FD 12 0A F6 | 	mov	arg01, result1 wz
2659c     00 FA 05 A6 |  if_e	mov	result1, #0
265a0     B8 00 90 AD |  if_e	jmp	#LR__3858
265a4     0A 05 02 F6 | 	mov	_var03, arg02
265a8     07 04 4E F7 | 	zerox	_var03, #7 wz
265ac     00 FA 05 A6 |  if_e	mov	result1, #0
265b0     A8 00 90 AD |  if_e	jmp	#LR__3858
265b4     01 16 16 F2 | 	cmp	arg03, #1 wc
265b8     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
265bc     01 16 06 86 |  if_c_and_z	mov	arg03, #1
265c0     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
265c4     94 00 90 4D |  if_c_and_nz	jmp	#LR__3858
265c8     09 17 1A F2 | 	cmp	arg03, arg01 wcz
265cc     10 00 90 ED |  if_be	jmp	#LR__3852
265d0     00 18 0E F2 | 	cmp	arg04, #0 wz
265d4     00 FA 05 A6 |  if_e	mov	result1, #0
265d8     80 00 90 AD |  if_e	jmp	#LR__3858
265dc     09 17 02 F6 | 	mov	arg03, arg01
265e0                 | LR__3852
265e0     01 16 86 F1 | 	sub	arg03, #1
265e4     00 18 0E F2 | 	cmp	arg04, #0 wz
265e8     38 00 90 5D |  if_ne	jmp	#LR__3854
265ec     0B 07 02 F6 | 	mov	_var04, arg03
265f0     09 09 02 F6 | 	mov	_var05, arg01
265f4                 | LR__3853
265f4     04 07 12 F2 | 	cmp	_var04, _var05 wc
265f8     5C 00 90 3D |  if_ae	jmp	#LR__3857
265fc     03 05 02 F6 | 	mov	_var03, _var04
26600     00 05 02 F1 | 	add	_var03, _var01
26604     02 05 C2 FA | 	rdbyte	_var03, _var03
26608     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
2660c     0C 05 0A F2 | 	cmp	_var03, arg04 wz
26610     01 06 06 A1 |  if_e	add	_var04, #1
26614     03 FB 01 A6 |  if_e	mov	result1, _var04
26618     40 00 90 AD |  if_e	jmp	#LR__3858
2661c     01 06 06 F1 | 	add	_var04, #1
26620     D0 FF 9F FD | 	jmp	#LR__3853
26624                 | LR__3854
26624     0B 07 02 F6 | 	mov	_var04, arg03
26628                 | LR__3855
26628     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
2662c     28 00 90 1D |  if_a	jmp	#LR__3856
26630     03 09 02 F6 | 	mov	_var05, _var04
26634     00 09 02 F1 | 	add	_var05, _var01
26638     04 05 C2 FA | 	rdbyte	_var03, _var05
2663c     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
26640     04 05 0A F2 | 	cmp	_var03, _var05 wz
26644     01 06 06 A1 |  if_e	add	_var04, #1
26648     03 FB 01 A6 |  if_e	mov	result1, _var04
2664c     0C 00 90 AD |  if_e	jmp	#LR__3858
26650     01 06 86 F1 | 	sub	_var04, #1
26654     D0 FF 9F FD | 	jmp	#LR__3855
26658                 | LR__3856
26658                 | LR__3857
26658     00 FA 05 F6 | 	mov	result1, #0
2665c                 | LR__3858
2665c                 | __system____ScanForChar_ret
2665c     2D 00 64 FD | 	ret
26660                 | 
26660                 | __system___basic_dir
26660     05 4A 05 F6 | 	mov	COUNT_, #5
26664     A8 00 A0 FD | 	call	#pushregs_
26668     4C F0 07 F1 | 	add	ptra, #76
2666c     04 4E 05 F1 | 	add	fp, #4
26670     A7 12 62 FC | 	wrlong	arg01, fp
26674     04 4E 05 F1 | 	add	fp, #4
26678     A7 14 62 FC | 	wrlong	arg02, fp
2667c     04 4E 85 F1 | 	sub	fp, #4
26680     A7 14 0A FB | 	rdlong	arg02, fp wz
26684     04 4E 85 F1 | 	sub	fp, #4
26688     04 4E 05 51 |  if_ne	add	fp, #4
2668c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
26690     04 4E 85 51 |  if_ne	sub	fp, #4
26694     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
26698     70 00 90 AD |  if_e	jmp	#LR__3860
2669c     03 00 00 FF 
266a0     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
266a4     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
266a8     03 00 00 FF 
266ac     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
266b0     03 00 00 5F 
266b4     28 E7 05 51 |  if_ne	add	ptr___system__dat__, ##1832
266b8     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
266bc     03 00 00 5F 
266c0     28 E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
266c4     D8 E9 BF 5D |  if_ne	call	#__system__closedir
266c8     81 01 00 FF 
266cc     78 13 06 F6 | 	mov	arg01, ##@LR__5028
266d0     E0 E8 BF FD | 	call	#__system__opendir
266d4     03 00 00 FF 
266d8     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
266dc     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
266e0     08 4E 05 F1 | 	add	fp, #8
266e4     A7 20 02 FB | 	rdlong	local02, fp
266e8     04 E6 05 F1 | 	add	ptr___system__dat__, #4
266ec     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
266f0     04 4E 85 F1 | 	sub	fp, #4
266f4     A7 20 02 FB | 	rdlong	local02, fp
266f8     04 4E 85 F1 | 	sub	fp, #4
266fc     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26700     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
26704     03 00 00 FF 
26708     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2670c                 | LR__3860
2670c     03 00 00 FF 
26710     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
26714     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
26718     03 00 00 FF 
2671c     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
26720     81 01 00 AF 
26724     7A FB 05 A6 |  if_e	mov	result1, ##@LR__5029
26728     84 02 90 AD |  if_e	jmp	#LR__3873
2672c                 | LR__3861
2672c     03 00 00 FF 
26730     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
26734     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
26738     03 00 00 FF 
2673c     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
26740     D0 E9 BF FD | 	call	#__system__readdir
26744     0C 4E 05 F1 | 	add	fp, #12
26748     A7 FA 61 FC | 	wrlong	result1, fp
2674c     0C 4E 85 F1 | 	sub	fp, #12
26750     00 FA 0D F2 | 	cmp	result1, #0 wz
26754     38 00 90 5D |  if_ne	jmp	#LR__3862
26758     03 00 00 FF 
2675c     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
26760     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
26764     03 00 00 FF 
26768     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
2676c     30 E9 BF FD | 	call	#__system__closedir
26770     03 00 00 FF 
26774     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
26778     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
2677c     03 00 00 FF 
26780     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
26784     81 01 00 FF 
26788     7C FB 05 F6 | 	mov	result1, ##@LR__5030
2678c     20 02 90 FD | 	jmp	#LR__3873
26790                 | LR__3862
26790     0C 4E 05 F1 | 	add	fp, #12
26794     A7 12 02 FB | 	rdlong	arg01, fp
26798     0C 4E 85 F1 | 	sub	fp, #12
2679c     03 00 00 FF 
267a0     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
267a4     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
267a8     03 00 00 FF 
267ac     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
267b0     10 09 B0 FD | 	call	#__system___pat_match
267b4     00 FA 0D F2 | 	cmp	result1, #0 wz
267b8     70 FF 9F AD |  if_e	jmp	#LR__3861
267bc     03 00 00 FF 
267c0     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
267c4     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
267c8     03 00 00 FF 
267cc     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
267d0     78 01 90 AD |  if_e	jmp	#LR__3869
267d4     0C 4E 05 F1 | 	add	fp, #12
267d8     A7 12 02 FB | 	rdlong	arg01, fp
267dc     04 4E 05 F1 | 	add	fp, #4
267e0     A7 14 02 F6 | 	mov	arg02, fp
267e4     10 4E 85 F1 | 	sub	fp, #16
267e8     2C F2 BF FD | 	call	#__system__stat
267ec     40 4E 05 F1 | 	add	fp, #64
267f0     A7 FA 61 FC | 	wrlong	result1, fp
267f4     40 4E 85 F1 | 	sub	fp, #64
267f8     00 FA 0D F2 | 	cmp	result1, #0 wz
267fc     81 01 00 5F 
26800     7E FB 05 56 |  if_ne	mov	result1, ##@LR__5031
26804     A8 01 90 5D |  if_ne	jmp	#LR__3873
26808     18 4E 05 F1 | 	add	fp, #24
2680c     A7 20 02 FB | 	rdlong	local02, fp
26810     78 00 00 FF 
26814     00 20 06 F5 | 	and	local02, ##61440
26818     2C 4E 05 F1 | 	add	fp, #44
2681c     A7 20 62 FC | 	wrlong	local02, fp
26820     38 4E 85 F1 | 	sub	fp, #56
26824     A7 20 02 FB | 	rdlong	local02, fp
26828     0C 4E 85 F1 | 	sub	fp, #12
2682c     10 21 C2 FA | 	rdbyte	local02, local02
26830     2E 20 0E F2 | 	cmp	local02, #46 wz
26834     08 4E 05 A1 |  if_e	add	fp, #8
26838     A7 04 68 AC |  if_e	wrlong	#2, fp
2683c     08 4E C5 F3 | 	sumz	fp, #8
26840     A7 00 68 5C |  if_ne	wrlong	#0, fp
26844     08 4E 85 51 |  if_ne	sub	fp, #8
26848     44 4E 05 F1 | 	add	fp, #68
2684c     A7 20 02 FB | 	rdlong	local02, fp
26850     44 4E 85 F1 | 	sub	fp, #68
26854     08 00 00 FF 
26858     00 20 0E F2 | 	cmp	local02, ##4096 wz
2685c     18 00 90 5D |  if_ne	jmp	#LR__3863
26860     08 4E 05 F1 | 	add	fp, #8
26864     A7 20 02 FB | 	rdlong	local02, fp
26868     10 20 46 F5 | 	or	local02, #16
2686c     A7 20 62 FC | 	wrlong	local02, fp
26870     08 4E 85 F1 | 	sub	fp, #8
26874     AC 00 90 FD | 	jmp	#LR__3868
26878                 | LR__3863
26878     44 4E 05 F1 | 	add	fp, #68
2687c     A7 20 02 FB | 	rdlong	local02, fp
26880     44 4E 85 F1 | 	sub	fp, #68
26884     10 00 00 FF 
26888     00 20 0E F2 | 	cmp	local02, ##8192 wz
2688c     44 4E 05 51 |  if_ne	add	fp, #68
26890     A7 1E 02 5B |  if_ne	rdlong	local01, fp
26894     44 4E 85 51 |  if_ne	sub	fp, #68
26898     18 00 00 5F 
2689c     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
268a0     44 4E 05 51 |  if_ne	add	fp, #68
268a4     0F 23 02 56 |  if_ne	mov	local03, local01
268a8     44 4E 85 51 |  if_ne	sub	fp, #68
268ac     20 00 00 5F 
268b0     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
268b4     18 00 90 5D |  if_ne	jmp	#LR__3864
268b8     08 4E 05 F1 | 	add	fp, #8
268bc     A7 20 02 FB | 	rdlong	local02, fp
268c0     04 20 46 F5 | 	or	local02, #4
268c4     A7 20 62 FC | 	wrlong	local02, fp
268c8     08 4E 85 F1 | 	sub	fp, #8
268cc     54 00 90 FD | 	jmp	#LR__3867
268d0                 | LR__3864
268d0     18 4E 05 F1 | 	add	fp, #24
268d4     A7 20 02 FB | 	rdlong	local02, fp
268d8     18 4E 85 F1 | 	sub	fp, #24
268dc     92 20 CE F7 | 	test	local02, #146 wz
268e0     18 00 90 5D |  if_ne	jmp	#LR__3865
268e4     08 4E 05 F1 | 	add	fp, #8
268e8     A7 20 02 FB | 	rdlong	local02, fp
268ec     01 20 46 F5 | 	or	local02, #1
268f0     A7 20 62 FC | 	wrlong	local02, fp
268f4     08 4E 85 F1 | 	sub	fp, #8
268f8     28 00 90 FD | 	jmp	#LR__3866
268fc                 | LR__3865
268fc     44 4E 05 F1 | 	add	fp, #68
26900     A7 24 02 FB | 	rdlong	local04, fp
26904     44 4E 85 F1 | 	sub	fp, #68
26908     08 00 00 FF 
2690c     00 24 0E F2 | 	cmp	local04, ##4096 wz
26910     08 4E 05 51 |  if_ne	add	fp, #8
26914     A7 24 02 5B |  if_ne	rdlong	local04, fp
26918     20 24 46 55 |  if_ne	or	local04, #32
2691c     A7 24 62 5C |  if_ne	wrlong	local04, fp
26920     08 4E 85 51 |  if_ne	sub	fp, #8
26924                 | LR__3866
26924                 | LR__3867
26924                 | LR__3868
26924     08 4E 05 F1 | 	add	fp, #8
26928     A7 24 02 FB | 	rdlong	local04, fp
2692c     08 4E 85 F1 | 	sub	fp, #8
26930     03 00 00 FF 
26934     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
26938     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
2693c     03 00 00 FF 
26940     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
26944     0F 25 CA F7 | 	test	local04, local01 wz
26948     E0 FD 9F AD |  if_e	jmp	#LR__3861
2694c                 | LR__3869
2694c     0C 4E 05 F1 | 	add	fp, #12
26950     A7 12 02 FB | 	rdlong	arg01, fp
26954     0C 4E 85 F1 | 	sub	fp, #12
26958     09 27 02 F6 | 	mov	local05, arg01
2695c     97 06 48 FB | 	callpa	#(@LR__3871-@LR__3870)>>2,fcache_load_ptr_
26960                 | LR__3870
26960     13 FB C9 FA | 	rdbyte	result1, local05 wz
26964     01 26 06 51 |  if_ne	add	local05, #1
26968     F4 FF 9F 5D |  if_ne	jmp	#LR__3870
2696c                 | LR__3871
2696c     13 13 C2 F2 | 	subr	arg01, local05
26970     01 12 06 F1 | 	add	arg01, #1
26974     28 E0 BF FD | 	call	#__system___gc_alloc_managed
26978     48 4E 05 F1 | 	add	fp, #72
2697c     A7 FA 61 FC | 	wrlong	result1, fp
26980     48 4E 85 F1 | 	sub	fp, #72
26984     00 FA 0D F2 | 	cmp	result1, #0 wz
26988     18 00 90 AD |  if_e	jmp	#LR__3872
2698c     48 4E 05 F1 | 	add	fp, #72
26990     A7 12 02 FB | 	rdlong	arg01, fp
26994     3C 4E 85 F1 | 	sub	fp, #60
26998     A7 14 02 FB | 	rdlong	arg02, fp
2699c     0C 4E 85 F1 | 	sub	fp, #12
269a0     F8 A0 BF FD | 	call	#__system____builtin_strcpy
269a4                 | LR__3872
269a4     48 4E 05 F1 | 	add	fp, #72
269a8     A7 FA 01 FB | 	rdlong	result1, fp
269ac     48 4E 85 F1 | 	sub	fp, #72
269b0                 | LR__3873
269b0     A7 F0 03 F6 | 	mov	ptra, fp
269b4     B2 00 A0 FD | 	call	#popregs_
269b8                 | __system___basic_dir_ret
269b8     2D 00 64 FD | 	ret
269bc                 | 
269bc                 | __system__pack_0606
269bc     09 01 02 F6 | 	mov	_var01, arg01
269c0     7F 16 06 F1 | 	add	arg03, #127
269c4     04 18 CE F7 | 	test	arg04, #4 wz
269c8     10 00 90 AD |  if_e	jmp	#LR__3880
269cc     00 00 0E F2 | 	cmp	_var01, #0 wz
269d0     16 00 C6 A9 |  if_e	decod	_var01, #22
269d4     F7 00 26 F4 | 	bith	_var01, #247
269d8     B4 00 90 FD | 	jmp	#LR__3889
269dc                 | LR__3880
269dc     02 18 CE F7 | 	test	arg04, #2 wz
269e0     00 C0 3F 5F 
269e4     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
269e8     00 14 06 56 |  if_ne	mov	arg02, #0
269ec     A0 00 90 5D |  if_ne	jmp	#LR__3888
269f0     08 18 CE F7 | 	test	arg04, #8 wz
269f4     00 00 06 56 |  if_ne	mov	_var01, #0
269f8     94 00 90 5D |  if_ne	jmp	#LR__3887
269fc     FF 16 56 F2 | 	cmps	arg03, #255 wc
26a00     00 C0 3F 3F 
26a04     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
26a08     00 14 06 36 |  if_ae	mov	arg02, #0
26a0c     80 00 90 3D |  if_ae	jmp	#LR__3886
26a10     01 16 56 F2 | 	cmps	arg03, #1 wc
26a14     6C 00 90 3D |  if_ae	jmp	#LR__3884
26a18     01 14 46 F0 | 	shr	arg02, #1
26a1c     00 03 02 F6 | 	mov	_var02, _var01
26a20     01 02 06 F5 | 	and	_var02, #1
26a24     1F 02 66 F0 | 	shl	_var02, #31
26a28     01 15 42 F5 | 	or	arg02, _var02
26a2c     01 00 46 F0 | 	shr	_var01, #1
26a30     97 1E 48 FB | 	callpa	#(@LR__3882-@LR__3881)>>2,fcache_load_ptr_
26a34                 | LR__3881
26a34     00 16 56 F2 | 	cmps	arg03, #0 wc
26a38     34 00 90 3D |  if_ae	jmp	#LR__3883
26a3c     00 00 0E F2 | 	cmp	_var01, #0 wz
26a40     2C 00 90 AD |  if_e	jmp	#LR__3883
26a44     0A 13 02 F6 | 	mov	arg01, arg02
26a48     01 12 06 F5 | 	and	arg01, #1
26a4c     01 16 06 F1 | 	add	arg03, #1
26a50     01 14 46 F0 | 	shr	arg02, #1
26a54     00 03 02 F6 | 	mov	_var02, _var01
26a58     01 02 06 F5 | 	and	_var02, #1
26a5c     1F 02 66 F0 | 	shl	_var02, #31
26a60     01 15 42 F5 | 	or	arg02, _var02
26a64     09 15 42 F5 | 	or	arg02, arg01
26a68     01 00 46 F0 | 	shr	_var01, #1
26a6c     C4 FF 9F FD | 	jmp	#LR__3881
26a70                 | LR__3882
26a70                 | LR__3883
26a70     00 16 56 F2 | 	cmps	arg03, #0 wc
26a74     18 00 90 3D |  if_ae	jmp	#LR__3885
26a78     00 14 0E F2 | 	cmp	arg02, #0 wz
26a7c     6F 14 62 FD | 	wrnz	arg02
26a80     0C 00 90 FD | 	jmp	#LR__3885
26a84                 | LR__3884
26a84     17 01 06 F4 | 	bitl	_var01, #279
26a88     17 16 66 F0 | 	shl	arg03, #23
26a8c     0B 01 42 F5 | 	or	_var01, arg03
26a90                 | LR__3885
26a90                 | LR__3886
26a90                 | LR__3887
26a90                 | LR__3888
26a90                 | LR__3889
26a90     01 00 CE F7 | 	test	_var01, #1 wz
26a94     01 14 46 55 |  if_ne	or	arg02, #1
26a98     0A 17 02 F6 | 	mov	arg03, arg02
26a9c     00 02 06 F6 | 	mov	_var02, #0
26aa0     FF FF 3F FF 
26aa4     FF 15 06 F1 | 	add	arg02, ##2147483647
26aa8     0B 15 12 F2 | 	cmp	arg02, arg03 wc
26aac     01 02 06 C6 |  if_b	mov	_var02, #1
26ab0     01 01 02 F1 | 	add	_var01, _var02
26ab4     01 18 CE F7 | 	test	arg04, #1 wz
26ab8     1F 00 26 54 |  if_ne	bith	_var01, #31
26abc     00 FB 01 F6 | 	mov	result1, _var01
26ac0                 | __system__pack_0606_ret
26ac0     2D 00 64 FD | 	ret
26ac4                 | 
26ac4                 | __system___rxtxioctl_0696
26ac4     00 15 0E F2 | 	cmp	arg02, #256 wz
26ac8     0C 00 90 AD |  if_e	jmp	#LR__3890
26acc     01 15 0E F2 | 	cmp	arg02, #257 wz
26ad0     1C 00 90 AD |  if_e	jmp	#LR__3891
26ad4     30 00 90 FD | 	jmp	#LR__3892
26ad8                 | LR__3890
26ad8     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26adc     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
26ae0     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26ae4     0B FB 61 FC | 	wrlong	result1, arg03
26ae8     00 FA 05 F6 | 	mov	result1, #0
26aec     28 00 90 FD | 	jmp	#LR__3893
26af0                 | LR__3891
26af0     0B 13 02 FB | 	rdlong	arg01, arg03
26af4     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26af8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26afc     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26b00     00 FA 05 F6 | 	mov	result1, #0
26b04     10 00 90 FD | 	jmp	#LR__3893
26b08                 | LR__3892
26b08     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26b0c     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
26b10     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26b14     01 FA 65 F6 | 	neg	result1, #1
26b18                 | LR__3893
26b18                 | __system___rxtxioctl_0696_ret
26b18     2D 00 64 FD | 	ret
26b1c                 | 
26b1c                 | __system____dummy_flush_0697
26b1c     00 FA 05 F6 | 	mov	result1, #0
26b20                 | __system____dummy_flush_0697_ret
26b20     2D 00 64 FD | 	ret
26b24                 | 
26b24                 | __system___vfswrite
26b24     09 4A 05 F6 | 	mov	COUNT_, #9
26b28     A8 00 A0 FD | 	call	#pushregs_
26b2c     09 1F 02 F6 | 	mov	local01, arg01
26b30     0A 21 02 F6 | 	mov	local02, arg02
26b34     0B 23 02 F6 | 	mov	local03, arg03
26b38     10 25 02 F6 | 	mov	local04, local02
26b3c     08 1E 06 F1 | 	add	local01, #8
26b40     0F 13 02 FB | 	rdlong	arg01, local01
26b44     08 1E 86 F1 | 	sub	local01, #8
26b48     02 12 CE F7 | 	test	arg01, #2 wz
26b4c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26b50     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26b54     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26b58     01 FA 65 A6 |  if_e	neg	result1, #1
26b5c     80 01 90 AD |  if_e	jmp	#LR__3906
26b60     08 1E 06 F1 | 	add	local01, #8
26b64     0F FB 01 FB | 	rdlong	result1, local01
26b68     08 1E 86 F1 | 	sub	local01, #8
26b6c     40 FA CD F7 | 	test	result1, #64 wz
26b70     68 00 90 AD |  if_e	jmp	#LR__3901
26b74     08 1E 06 F1 | 	add	local01, #8
26b78     0F 15 02 FB | 	rdlong	arg02, local01
26b7c     08 1E 86 F1 | 	sub	local01, #8
26b80     80 14 CE F7 | 	test	arg02, #128 wz
26b84     54 00 90 AD |  if_e	jmp	#LR__3900
26b88     30 1E 06 F1 | 	add	local01, #48
26b8c     0F 27 02 FB | 	rdlong	local05, local01
26b90     13 29 02 F6 | 	mov	local06, local05
26b94     30 1E 86 F1 | 	sub	local01, #48
26b98     13 28 46 F7 | 	zerox	local06, #19
26b9c     14 26 46 F0 | 	shr	local05, #20
26ba0     02 26 66 F0 | 	shl	local05, #2
26ba4     ED 26 02 F1 | 	add	local05, __methods__
26ba8     13 27 02 FB | 	rdlong	local05, local05
26bac     0F 13 02 F6 | 	mov	arg01, local01
26bb0     00 14 06 F6 | 	mov	arg02, #0
26bb4     02 16 06 F6 | 	mov	arg03, #2
26bb8     F2 2A 02 F6 | 	mov	local07, objptr
26bbc     14 E5 01 F6 | 	mov	objptr, local06
26bc0     2D 26 62 FD | 	call	local05
26bc4     15 E5 01 F6 | 	mov	objptr, local07
26bc8     08 1E 06 F1 | 	add	local01, #8
26bcc     0F 2B 02 FB | 	rdlong	local07, local01
26bd0     80 2A 26 F5 | 	andn	local07, #128
26bd4     0F 2B 62 FC | 	wrlong	local07, local01
26bd8     08 1E 86 F1 | 	sub	local01, #8
26bdc                 | LR__3900
26bdc                 | LR__3901
26bdc     18 1E 06 F1 | 	add	local01, #24
26be0     0F 2B 0A FB | 	rdlong	local07, local01 wz
26be4     18 1E 86 F1 | 	sub	local01, #24
26be8     80 00 90 AD |  if_e	jmp	#LR__3903
26bec     18 1E 06 F1 | 	add	local01, #24
26bf0     0F 27 02 FB | 	rdlong	local05, local01
26bf4     13 29 02 F6 | 	mov	local06, local05
26bf8     18 1E 86 F1 | 	sub	local01, #24
26bfc     13 28 46 F7 | 	zerox	local06, #19
26c00     14 26 46 F0 | 	shr	local05, #20
26c04     02 26 66 F0 | 	shl	local05, #2
26c08     ED 26 02 F1 | 	add	local05, __methods__
26c0c     13 27 02 FB | 	rdlong	local05, local05
26c10     10 15 02 F6 | 	mov	arg02, local02
26c14     11 17 02 F6 | 	mov	arg03, local03
26c18     0F 13 02 F6 | 	mov	arg01, local01
26c1c     F2 2A 02 F6 | 	mov	local07, objptr
26c20     14 E5 01 F6 | 	mov	objptr, local06
26c24     2D 26 62 FD | 	call	local05
26c28     15 E5 01 F6 | 	mov	objptr, local07
26c2c     FD 2C 02 F6 | 	mov	local08, result1
26c30     00 2C 56 F2 | 	cmps	local08, #0 wc
26c34     2C 00 90 3D |  if_ae	jmp	#LR__3902
26c38     08 1E 06 F1 | 	add	local01, #8
26c3c     0F 2B 02 FB | 	rdlong	local07, local01
26c40     20 2A 46 F5 | 	or	local07, #32
26c44     0F 2B 62 FC | 	wrlong	local07, local01
26c48     00 2C 4E F2 | 	cmps	local08, #0 wz
26c4c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26c50     F3 2C 62 FC | 	wrlong	local08, ptr___system__dat__
26c54     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26c58     01 FA 65 56 |  if_ne	neg	result1, #1
26c5c     00 FA 05 A6 |  if_e	mov	result1, #0
26c60     7C 00 90 FD | 	jmp	#LR__3906
26c64                 | LR__3902
26c64     16 FB 01 F6 | 	mov	result1, local08
26c68     74 00 90 FD | 	jmp	#LR__3906
26c6c                 | LR__3903
26c6c     1C 1E 06 F1 | 	add	local01, #28
26c70     0F 2F 0A FB | 	rdlong	local09, local01 wz
26c74     1C 1E 86 F1 | 	sub	local01, #28
26c78     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26c7c     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26c80     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26c84     01 FA 65 A6 |  if_e	neg	result1, #1
26c88     54 00 90 AD |  if_e	jmp	#LR__3906
26c8c     00 2C 06 F6 | 	mov	local08, #0
26c90                 | LR__3904
26c90     01 22 16 F2 | 	cmp	local03, #1 wc
26c94     44 00 90 CD |  if_b	jmp	#LR__3905
26c98     17 29 02 F6 | 	mov	local06, local09
26c9c     17 27 02 F6 | 	mov	local05, local09
26ca0     13 28 46 F7 | 	zerox	local06, #19
26ca4     14 26 46 F0 | 	shr	local05, #20
26ca8     02 26 66 F0 | 	shl	local05, #2
26cac     ED 26 02 F1 | 	add	local05, __methods__
26cb0     13 27 02 FB | 	rdlong	local05, local05
26cb4     12 13 C2 FA | 	rdbyte	arg01, local04
26cb8     0F 15 02 F6 | 	mov	arg02, local01
26cbc     F2 2A 02 F6 | 	mov	local07, objptr
26cc0     14 E5 01 F6 | 	mov	objptr, local06
26cc4     01 24 06 F1 | 	add	local04, #1
26cc8     2D 26 62 FD | 	call	local05
26ccc     15 E5 01 F6 | 	mov	objptr, local07
26cd0     FD 2C 02 F1 | 	add	local08, result1
26cd4     01 22 86 F1 | 	sub	local03, #1
26cd8     B4 FF 9F FD | 	jmp	#LR__3904
26cdc                 | LR__3905
26cdc     16 FB 01 F6 | 	mov	result1, local08
26ce0                 | LR__3906
26ce0     A7 F0 03 F6 | 	mov	ptra, fp
26ce4     B2 00 A0 FD | 	call	#popregs_
26ce8                 | __system___vfswrite_ret
26ce8     2D 00 64 FD | 	ret
26cec                 | 
26cec                 | __system___vfsread
26cec     03 4A 05 F6 | 	mov	COUNT_, #3
26cf0     A8 00 A0 FD | 	call	#pushregs_
26cf4     28 F0 07 F1 | 	add	ptra, #40
26cf8     04 4E 05 F1 | 	add	fp, #4
26cfc     A7 12 62 FC | 	wrlong	arg01, fp
26d00     04 4E 05 F1 | 	add	fp, #4
26d04     A7 14 62 FC | 	wrlong	arg02, fp
26d08     04 4E 05 F1 | 	add	fp, #4
26d0c     A7 16 62 FC | 	wrlong	arg03, fp
26d10     04 4E 85 F1 | 	sub	fp, #4
26d14     A7 FA 01 FB | 	rdlong	result1, fp
26d18     14 4E 05 F1 | 	add	fp, #20
26d1c     A7 FA 61 FC | 	wrlong	result1, fp
26d20     04 4E 05 F1 | 	add	fp, #4
26d24     A7 00 68 FC | 	wrlong	#0, fp
26d28     1C 4E 85 F1 | 	sub	fp, #28
26d2c     A7 12 02 FB | 	rdlong	arg01, fp
26d30     04 4E 85 F1 | 	sub	fp, #4
26d34     08 12 06 F1 | 	add	arg01, #8
26d38     09 FB 01 FB | 	rdlong	result1, arg01
26d3c     01 FA CD F7 | 	test	result1, #1 wz
26d40     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26d44     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26d48     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26d4c     01 FA 65 A6 |  if_e	neg	result1, #1
26d50     74 02 90 AD |  if_e	jmp	#LR__3916
26d54     04 4E 05 F1 | 	add	fp, #4
26d58     A7 12 02 FB | 	rdlong	arg01, fp
26d5c     04 4E 85 F1 | 	sub	fp, #4
26d60     14 12 06 F1 | 	add	arg01, #20
26d64     09 FB 09 FB | 	rdlong	result1, arg01 wz
26d68     B8 00 90 AD |  if_e	jmp	#LR__3911
26d6c     04 4E 05 F1 | 	add	fp, #4
26d70     A7 12 02 FB | 	rdlong	arg01, fp
26d74     09 17 02 F6 | 	mov	arg03, arg01
26d78     14 16 06 F1 | 	add	arg03, #20
26d7c     0B 1F 02 FB | 	rdlong	local01, arg03
26d80     0F 21 02 F6 | 	mov	local02, local01
26d84     13 1E 46 F7 | 	zerox	local01, #19
26d88     14 20 46 F0 | 	shr	local02, #20
26d8c     02 20 66 F0 | 	shl	local02, #2
26d90     ED 20 02 F1 | 	add	local02, __methods__
26d94     10 21 02 FB | 	rdlong	local02, local02
26d98     04 4E 05 F1 | 	add	fp, #4
26d9c     A7 14 02 FB | 	rdlong	arg02, fp
26da0     04 4E 05 F1 | 	add	fp, #4
26da4     A7 16 02 FB | 	rdlong	arg03, fp
26da8     0C 4E 85 F1 | 	sub	fp, #12
26dac     F2 22 02 F6 | 	mov	local03, objptr
26db0     0F E5 01 F6 | 	mov	objptr, local01
26db4     2D 20 62 FD | 	call	local02
26db8     11 E5 01 F6 | 	mov	objptr, local03
26dbc     10 4E 05 F1 | 	add	fp, #16
26dc0     A7 FA 61 FC | 	wrlong	result1, fp
26dc4     10 4E 85 F1 | 	sub	fp, #16
26dc8     00 FA 55 F2 | 	cmps	result1, #0 wc
26dcc     44 00 90 3D |  if_ae	jmp	#LR__3910
26dd0     04 4E 05 F1 | 	add	fp, #4
26dd4     A7 22 02 FB | 	rdlong	local03, fp
26dd8     11 1F 02 F6 | 	mov	local01, local03
26ddc     08 22 06 F1 | 	add	local03, #8
26de0     11 21 02 FB | 	rdlong	local02, local03
26de4     20 20 46 F5 | 	or	local02, #32
26de8     08 1E 06 F1 | 	add	local01, #8
26dec     0F 21 62 FC | 	wrlong	local02, local01
26df0     0C 4E 05 F1 | 	add	fp, #12
26df4     A7 12 0A FB | 	rdlong	arg01, fp wz
26df8     10 4E 85 F1 | 	sub	fp, #16
26dfc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26e00     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26e04     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26e08     01 FA 65 56 |  if_ne	neg	result1, #1
26e0c     00 FA 05 A6 |  if_e	mov	result1, #0
26e10     B4 01 90 FD | 	jmp	#LR__3916
26e14                 | LR__3910
26e14     10 4E 05 F1 | 	add	fp, #16
26e18     A7 FA 01 FB | 	rdlong	result1, fp
26e1c     10 4E 85 F1 | 	sub	fp, #16
26e20     A4 01 90 FD | 	jmp	#LR__3916
26e24                 | LR__3911
26e24     04 4E 05 F1 | 	add	fp, #4
26e28     A7 12 02 FB | 	rdlong	arg01, fp
26e2c     20 12 06 F1 | 	add	arg01, #32
26e30     09 13 0A FB | 	rdlong	arg01, arg01 wz
26e34     14 4E 05 F1 | 	add	fp, #20
26e38     A7 12 62 FC | 	wrlong	arg01, fp
26e3c     18 4E 85 F1 | 	sub	fp, #24
26e40     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26e44     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26e48     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26e4c     01 FA 65 A6 |  if_e	neg	result1, #1
26e50     74 01 90 AD |  if_e	jmp	#LR__3916
26e54     04 4E 05 F1 | 	add	fp, #4
26e58     A7 22 02 FB | 	rdlong	local03, fp
26e5c     04 4E 85 F1 | 	sub	fp, #4
26e60     28 22 06 F1 | 	add	local03, #40
26e64     11 21 0A FB | 	rdlong	local02, local03 wz
26e68     7C 00 90 AD |  if_e	jmp	#LR__3913
26e6c     04 4E 05 F1 | 	add	fp, #4
26e70     A7 12 02 FB | 	rdlong	arg01, fp
26e74     09 23 02 F6 | 	mov	local03, arg01
26e78     28 22 06 F1 | 	add	local03, #40
26e7c     11 1F 02 FB | 	rdlong	local01, local03
26e80     0F 21 02 F6 | 	mov	local02, local01
26e84     13 1E 46 F7 | 	zerox	local01, #19
26e88     14 20 46 F0 | 	shr	local02, #20
26e8c     02 20 66 F0 | 	shl	local02, #2
26e90     ED 20 02 F1 | 	add	local02, __methods__
26e94     10 21 02 FB | 	rdlong	local02, local02
26e98     20 4E 05 F1 | 	add	fp, #32
26e9c     A7 16 02 F6 | 	mov	arg03, fp
26ea0     24 4E 85 F1 | 	sub	fp, #36
26ea4     00 15 06 F6 | 	mov	arg02, #256
26ea8     F2 22 02 F6 | 	mov	local03, objptr
26eac     0F E5 01 F6 | 	mov	objptr, local01
26eb0     2D 20 62 FD | 	call	local02
26eb4     11 E5 01 F6 | 	mov	objptr, local03
26eb8     10 4E 05 F1 | 	add	fp, #16
26ebc     A7 FA 61 FC | 	wrlong	result1, fp
26ec0     00 FA 4D F2 | 	cmps	result1, #0 wz
26ec4     10 4E 85 F1 | 	sub	fp, #16
26ec8     1C 00 90 5D |  if_ne	jmp	#LR__3912
26ecc     24 4E 05 F1 | 	add	fp, #36
26ed0     A7 20 02 FB | 	rdlong	local02, fp
26ed4     24 4E 85 F1 | 	sub	fp, #36
26ed8     02 20 CE F7 | 	test	local02, #2 wz
26edc     20 4E 05 51 |  if_ne	add	fp, #32
26ee0     A7 02 68 5C |  if_ne	wrlong	#1, fp
26ee4     20 4E 85 51 |  if_ne	sub	fp, #32
26ee8                 | LR__3912
26ee8                 | LR__3913
26ee8     10 4E 05 F1 | 	add	fp, #16
26eec     A7 00 68 FC | 	wrlong	#0, fp
26ef0     10 4E 85 F1 | 	sub	fp, #16
26ef4                 | LR__3914
26ef4     0C 4E 05 F1 | 	add	fp, #12
26ef8     A7 22 02 FB | 	rdlong	local03, fp
26efc     0C 4E 85 F1 | 	sub	fp, #12
26f00     01 22 16 F2 | 	cmp	local03, #1 wc
26f04     B4 00 90 CD |  if_b	jmp	#LR__3915
26f08     18 4E 05 F1 | 	add	fp, #24
26f0c     A7 20 02 FB | 	rdlong	local02, fp
26f10     10 23 02 F6 | 	mov	local03, local02
26f14     13 22 46 F7 | 	zerox	local03, #19
26f18     14 20 46 F0 | 	shr	local02, #20
26f1c     02 20 66 F0 | 	shl	local02, #2
26f20     ED 20 02 F1 | 	add	local02, __methods__
26f24     10 21 02 FB | 	rdlong	local02, local02
26f28     14 4E 85 F1 | 	sub	fp, #20
26f2c     A7 12 02 FB | 	rdlong	arg01, fp
26f30     04 4E 85 F1 | 	sub	fp, #4
26f34     F2 1E 02 F6 | 	mov	local01, objptr
26f38     11 E5 01 F6 | 	mov	objptr, local03
26f3c     2D 20 62 FD | 	call	local02
26f40     0F E5 01 F6 | 	mov	objptr, local01
26f44     14 4E 05 F1 | 	add	fp, #20
26f48     A7 FA 61 FC | 	wrlong	result1, fp
26f4c     14 4E 85 F1 | 	sub	fp, #20
26f50     00 FA 55 F2 | 	cmps	result1, #0 wc
26f54     64 00 90 CD |  if_b	jmp	#LR__3915
26f58     1C 4E 05 F1 | 	add	fp, #28
26f5c     A7 22 02 FB | 	rdlong	local03, fp
26f60     11 21 02 F6 | 	mov	local02, local03
26f64     01 20 06 F1 | 	add	local02, #1
26f68     A7 20 62 FC | 	wrlong	local02, fp
26f6c     08 4E 85 F1 | 	sub	fp, #8
26f70     A7 20 02 FB | 	rdlong	local02, fp
26f74     11 21 42 FC | 	wrbyte	local02, local03
26f78     04 4E 85 F1 | 	sub	fp, #4
26f7c     A7 22 02 FB | 	rdlong	local03, fp
26f80     01 22 06 F1 | 	add	local03, #1
26f84     A7 22 62 FC | 	wrlong	local03, fp
26f88     04 4E 85 F1 | 	sub	fp, #4
26f8c     A7 22 02 FB | 	rdlong	local03, fp
26f90     01 22 86 F1 | 	sub	local03, #1
26f94     A7 22 62 FC | 	wrlong	local03, fp
26f98     14 4E 05 F1 | 	add	fp, #20
26f9c     A7 22 0A FB | 	rdlong	local03, fp wz
26fa0     20 4E 85 F1 | 	sub	fp, #32
26fa4     4C FF 9F AD |  if_e	jmp	#LR__3914
26fa8     14 4E 05 F1 | 	add	fp, #20
26fac     A7 20 02 FB | 	rdlong	local02, fp
26fb0     14 4E 85 F1 | 	sub	fp, #20
26fb4     0A 20 0E F2 | 	cmp	local02, #10 wz
26fb8     38 FF 9F 5D |  if_ne	jmp	#LR__3914
26fbc                 | LR__3915
26fbc     10 4E 05 F1 | 	add	fp, #16
26fc0     A7 FA 01 FB | 	rdlong	result1, fp
26fc4     10 4E 85 F1 | 	sub	fp, #16
26fc8                 | LR__3916
26fc8     A7 F0 03 F6 | 	mov	ptra, fp
26fcc     B2 00 A0 FD | 	call	#popregs_
26fd0                 | __system___vfsread_ret
26fd0     2D 00 64 FD | 	ret
26fd4                 | 
26fd4                 | __system____default_filbuf
26fd4     04 4A 05 F6 | 	mov	COUNT_, #4
26fd8     A8 00 A0 FD | 	call	#pushregs_
26fdc     09 1F 02 F6 | 	mov	local01, arg01
26fe0     0F 21 02 FB | 	rdlong	local02, local01
26fe4     0C 20 06 F1 | 	add	local02, #12
26fe8     10 FB 09 FB | 	rdlong	result1, local02 wz
26fec     0C 20 86 F1 | 	sub	local02, #12
26ff0     20 00 90 5D |  if_ne	jmp	#LR__3920
26ff4     14 20 06 F1 | 	add	local02, #20
26ff8     10 FB 01 F6 | 	mov	result1, local02
26ffc     04 20 86 F1 | 	sub	local02, #4
27000     10 FB 61 FC | 	wrlong	result1, local02
27004     04 20 86 F1 | 	sub	local02, #4
27008     02 00 80 FF 
2700c     10 01 68 FC | 	wrlong	##1024, local02
27010     0C 20 86 F1 | 	sub	local02, #12
27014                 | LR__3920
27014     14 1E 06 F1 | 	add	local01, #20
27018     0F 23 02 FB | 	rdlong	local03, local01
2701c     11 25 02 F6 | 	mov	local04, local03
27020     14 1E 86 F1 | 	sub	local01, #20
27024     13 24 46 F7 | 	zerox	local04, #19
27028     14 22 46 F0 | 	shr	local03, #20
2702c     02 22 66 F0 | 	shl	local03, #2
27030     ED 22 02 F1 | 	add	local03, __methods__
27034     11 23 02 FB | 	rdlong	local03, local03
27038     10 20 06 F1 | 	add	local02, #16
2703c     10 15 02 FB | 	rdlong	arg02, local02
27040     04 20 86 F1 | 	sub	local02, #4
27044     10 17 02 FB | 	rdlong	arg03, local02
27048     0C 20 86 F1 | 	sub	local02, #12
2704c     0F 13 02 F6 | 	mov	arg01, local01
27050     F2 1E 02 F6 | 	mov	local01, objptr
27054     12 E5 01 F6 | 	mov	objptr, local04
27058     2D 22 62 FD | 	call	local03
2705c     0F E5 01 F6 | 	mov	objptr, local01
27060     FD 24 02 F6 | 	mov	local04, result1
27064     00 24 56 F2 | 	cmps	local04, #0 wc
27068     01 FA 65 C6 |  if_b	neg	result1, #1
2706c     28 00 90 CD |  if_b	jmp	#LR__3921
27070     10 25 62 FC | 	wrlong	local04, local02
27074     10 20 06 F1 | 	add	local02, #16
27078     10 23 02 FB | 	rdlong	local03, local02
2707c     0C 20 86 F1 | 	sub	local02, #12
27080     10 23 62 FC | 	wrlong	local03, local02
27084     04 20 06 F1 | 	add	local02, #4
27088     10 23 02 FB | 	rdlong	local03, local02
2708c     01 22 46 F5 | 	or	local03, #1
27090     10 23 62 FC | 	wrlong	local03, local02
27094     12 FB 01 F6 | 	mov	result1, local04
27098                 | LR__3921
27098     A7 F0 03 F6 | 	mov	ptra, fp
2709c     B2 00 A0 FD | 	call	#popregs_
270a0                 | __system____default_filbuf_ret
270a0     2D 00 64 FD | 	ret
270a4                 | 
270a4                 | __system__getlower_1082
270a4     41 12 56 F2 | 	cmps	arg01, #65 wc
270a8     10 00 90 CD |  if_b	jmp	#LR__3930
270ac     5B 12 56 F2 | 	cmps	arg01, #91 wc
270b0     09 FB 01 C6 |  if_b	mov	result1, arg01
270b4     20 FA 05 C1 |  if_b	add	result1, #32
270b8     04 00 90 CD |  if_b	jmp	#__system__getlower_1082_ret
270bc                 | LR__3930
270bc     09 FB 01 F6 | 	mov	result1, arg01
270c0                 | __system__getlower_1082_ret
270c0     2D 00 64 FD | 	ret
270c4                 | 
270c4                 | __system___pat_match
270c4     08 4A 05 F6 | 	mov	COUNT_, #8
270c8     A8 00 A0 FD | 	call	#pushregs_
270cc     09 1F 02 F6 | 	mov	local01, arg01
270d0                 | LR__3940
270d0     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
270d4     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
270d8     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
270dc     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
270e0     2C 00 90 AD |  if_e	jmp	#LR__3941
270e4     0A 13 C2 FA | 	rdbyte	arg01, arg02
270e8     B8 FF BF FD | 	call	#__system__getlower_1082
270ec     FD 22 02 F6 | 	mov	local03, result1
270f0     0F 13 C2 FA | 	rdbyte	arg01, local01
270f4     AC FF BF FD | 	call	#__system__getlower_1082
270f8     11 FB 09 F2 | 	cmp	result1, local03 wz
270fc     00 FA 05 56 |  if_ne	mov	result1, #0
27100     FC 00 90 5D |  if_ne	jmp	#LR__3949
27104     01 1E 06 F1 | 	add	local01, #1
27108     01 14 06 F1 | 	add	arg02, #1
2710c     C0 FF 9F FD | 	jmp	#LR__3940
27110                 | LR__3941
27110     0A 23 C2 FA | 	rdbyte	local03, arg02
27114     2A 22 0E F2 | 	cmp	local03, #42 wz
27118     D4 00 90 5D |  if_ne	jmp	#LR__3948
2711c     01 14 06 F1 | 	add	arg02, #1
27120     0A 21 C2 FA | 	rdbyte	local02, arg02
27124     01 14 86 F1 | 	sub	arg02, #1
27128     2E 20 0E F2 | 	cmp	local02, #46 wz
2712c     28 00 90 5D |  if_ne	jmp	#LR__3942
27130     02 14 06 F1 | 	add	arg02, #2
27134     0A 21 C2 FA | 	rdbyte	local02, arg02
27138     02 14 86 F1 | 	sub	arg02, #2
2713c     2A 20 0E F2 | 	cmp	local02, #42 wz
27140     03 14 06 A1 |  if_e	add	arg02, #3
27144     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
27148     03 14 86 A1 |  if_e	sub	arg02, #3
2714c     12 27 0A A6 |  if_e	mov	local05, local04 wz
27150     01 FA 05 A6 |  if_e	mov	result1, #1
27154     A8 00 90 AD |  if_e	jmp	#LR__3949
27158                 | LR__3942
27158     01 14 06 F1 | 	add	arg02, #1
2715c     00 28 06 F6 | 	mov	local06, #0
27160     97 1E 48 FB | 	callpa	#(@LR__3945-@LR__3943)>>2,fcache_load_ptr_
27164                 | LR__3943
27164     14 2B 02 F6 | 	mov	local07, local06
27168     0A 2B 02 F1 | 	add	local07, arg02
2716c     15 2B CA FA | 	rdbyte	local07, local07 wz
27170     14 27 02 56 |  if_ne	mov	local05, local06
27174     01 26 06 51 |  if_ne	add	local05, #1
27178     13 29 02 56 |  if_ne	mov	local06, local05
2717c     E4 FF 9F 5D |  if_ne	jmp	#LR__3943
27180     00 2C 06 F6 | 	mov	local08, #0
27184                 | LR__3944
27184     16 2B 02 F6 | 	mov	local07, local08
27188     0F 2B 02 F1 | 	add	local07, local01
2718c     15 2B CA FA | 	rdbyte	local07, local07 wz
27190     16 27 02 56 |  if_ne	mov	local05, local08
27194     01 26 06 51 |  if_ne	add	local05, #1
27198     13 2D 02 56 |  if_ne	mov	local08, local05
2719c     E4 FF 9F 5D |  if_ne	jmp	#LR__3944
271a0                 | LR__3945
271a0     14 2D 52 F2 | 	cmps	local08, local06 wc
271a4     00 FA 05 C6 |  if_b	mov	result1, #0
271a8     54 00 90 CD |  if_b	jmp	#LR__3949
271ac     16 21 02 F6 | 	mov	local02, local08
271b0     14 21 82 F1 | 	sub	local02, local06
271b4     10 1F 02 F1 | 	add	local01, local02
271b8                 | LR__3946
271b8     01 28 56 F2 | 	cmps	local06, #1 wc
271bc     30 00 90 CD |  if_b	jmp	#LR__3947
271c0     0F 13 C2 FA | 	rdbyte	arg01, local01
271c4     DC FE BF FD | 	call	#__system__getlower_1082
271c8     FD 2C 02 F6 | 	mov	local08, result1
271cc     0A 13 C2 FA | 	rdbyte	arg01, arg02
271d0     D0 FE BF FD | 	call	#__system__getlower_1082
271d4     FD 2C 0A F2 | 	cmp	local08, result1 wz
271d8     00 FA 05 56 |  if_ne	mov	result1, #0
271dc     20 00 90 5D |  if_ne	jmp	#LR__3949
271e0     01 1E 06 F1 | 	add	local01, #1
271e4     01 14 06 F1 | 	add	arg02, #1
271e8     01 28 86 F1 | 	sub	local06, #1
271ec     C8 FF 9F FD | 	jmp	#LR__3946
271f0                 | LR__3947
271f0                 | LR__3948
271f0     0A 2D CA FA | 	rdbyte	local08, arg02 wz
271f4     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
271f8     01 FA 05 A6 |  if_e	mov	result1, #1
271fc     00 FA 05 56 |  if_ne	mov	result1, #0
27200                 | LR__3949
27200     A7 F0 03 F6 | 	mov	ptra, fp
27204     B2 00 A0 FD | 	call	#popregs_
27208                 | __system___pat_match_ret
27208     2D 00 64 FD | 	ret
2720c                 | 
2720c                 | _fatfs_cc_ff_uni2oem
2720c     00 00 06 F6 | 	mov	_var01, #0
27210     80 12 16 F2 | 	cmp	arg01, #128 wc
27214     09 01 02 C6 |  if_b	mov	_var01, arg01
27218     58 00 90 CD |  if_b	jmp	#LR__3954
2721c     80 00 00 FF 
27220     00 12 16 F2 | 	cmp	arg01, ##65536 wc
27224     4C 00 90 3D |  if_ae	jmp	#LR__3953
27228     0A FB 31 F9 | 	getword	result1, arg02, #0
2722c     01 00 00 FF 
27230     52 FB 0D F2 | 	cmp	result1, ##850 wz
27234     3C 00 90 5D |  if_ne	jmp	#LR__3953
27238                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
27238     00 00 06 F6 | 	mov	_var01, #0
2723c     97 14 48 FB | 	callpa	#(@LR__3951-@LR__3950)>>2,fcache_load_ptr_
27240                 | LR__3950
27240     00 FB 31 F9 | 	getword	result1, _var01, #0
27244     80 FA 15 F2 | 	cmp	result1, #128 wc
27248     1C 00 90 3D |  if_ae	jmp	#LR__3952
2724c     00 FB 31 F9 | 	getword	result1, _var01, #0
27250     01 FA 65 F0 | 	shl	result1, #1
27254     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
27258     FD FA E1 FA | 	rdword	result1, result1
2725c     FD 12 0A F2 | 	cmp	arg01, result1 wz
27260     01 00 06 51 |  if_ne	add	_var01, #1
27264     D8 FF 9F 5D |  if_ne	jmp	#LR__3950
27268                 | LR__3951
27268                 | LR__3952
27268     00 01 32 F9 | 	getword	_var01, _var01, #0
2726c     80 00 06 F1 | 	add	_var01, #128
27270     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
27274                 | LR__3953
27274                 | LR__3954
27274                 | ' 			c = (c + 0x80) & 0xFF;
27274                 | ' 		}
27274                 | ' 	}
27274                 | ' 
27274                 | ' 	return c;
27274     00 FB 01 F6 | 	mov	result1, _var01
27278                 | _fatfs_cc_ff_uni2oem_ret
27278     2D 00 64 FD | 	ret
2727c                 | 
2727c                 | _fatfs_cc_ff_oem2uni
2727c     00 00 06 F6 | 	mov	_var01, #0
27280     09 FB 31 F9 | 	getword	result1, arg01, #0
27284     80 FA 15 F2 | 	cmp	result1, #128 wc
27288     09 01 02 C6 |  if_b	mov	_var01, arg01
2728c     2C 00 90 CD |  if_b	jmp	#LR__3961
27290     0A 15 32 F9 | 	getword	arg02, arg02, #0
27294     01 00 00 FF 
27298     52 15 0E F2 | 	cmp	arg02, ##850 wz
2729c     1C 00 90 5D |  if_ne	jmp	#LR__3960
272a0     09 FB 31 F9 | 	getword	result1, arg01, #0
272a4     00 FB 15 F2 | 	cmp	result1, #256 wc
272a8     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
272ac     80 12 86 C1 |  if_b	sub	arg01, #128
272b0     01 12 66 C0 |  if_b	shl	arg01, #1
272b4     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
272b8     09 01 E2 CA |  if_b	rdword	_var01, arg01
272bc                 | LR__3960
272bc                 | LR__3961
272bc                 | ' 		}
272bc                 | ' 	}
272bc                 | ' 
272bc                 | ' 	return c;
272bc     00 FB 01 F6 | 	mov	result1, _var01
272c0                 | _fatfs_cc_ff_oem2uni_ret
272c0     2D 00 64 FD | 	ret
272c4                 | 
272c4                 | _fatfs_cc_ff_wtoupper
272c4     09 01 02 F6 | 	mov	_var01, arg01
272c8     80 00 00 FF 
272cc     00 00 16 F2 | 	cmp	_var01, ##65536 wc
272d0     60 01 90 3D |  if_ae	jmp	#LR__3983
272d4     00 03 02 F6 | 	mov	_var02, _var01
272d8     01 01 32 F9 | 	getword	_var01, _var02, #0
272dc     08 00 00 FF 
272e0     00 00 16 F2 | 	cmp	_var01, ##4096 wc
272e4     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
272e8     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
272ec     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
272f0     01 00 00 3F 
272f4     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
272f8     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
272fc     01 00 00 3F 
27300     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
27304     02 07 02 F6 | 	mov	_var04, _var03
27308                 | ' 		uc = (WORD)uni;
27308                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
27308                 | ' 		for (;;) {
27308                 | LR__3970
27308     03 09 E2 FA | 	rdword	_var05, _var04
2730c     04 05 02 F6 | 	mov	_var03, _var05
27310     0F 04 4E F7 | 	zerox	_var03, #15 wz
27314     02 06 06 F1 | 	add	_var04, #2
27318     14 01 90 AD |  if_e	jmp	#LR__3982
2731c     01 05 32 F9 | 	getword	_var03, _var02, #0
27320     04 01 32 F9 | 	getword	_var01, _var05, #0
27324     00 05 12 F2 | 	cmp	_var03, _var01 wc
27328     04 01 90 CD |  if_b	jmp	#LR__3982
2732c     03 0B E2 FA | 	rdword	_var06, _var04
27330     05 0D 32 F9 | 	getword	_var07, _var06, #0
27334     08 0C 46 F0 | 	shr	_var07, #8
27338     05 0B 32 F9 | 	getword	_var06, _var06, #0
2733c     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
27340     01 05 32 F9 | 	getword	_var03, _var02, #0
27344     04 0F 32 F9 | 	getword	_var08, _var05, #0
27348     05 01 32 F9 | 	getword	_var01, _var06, #0
2734c     00 0F 02 F1 | 	add	_var08, _var01
27350     07 05 52 F2 | 	cmps	_var03, _var08 wc
27354     02 06 06 F1 | 	add	_var04, #2
27358     C4 00 90 3D |  if_ae	jmp	#LR__3981
2735c                 | ' 				switch (cmd) {
2735c     06 11 32 F9 | 	getword	_var09, _var07, #0
27360     09 10 26 F3 | 	fle	_var09, #9
27364     30 10 62 FD | 	jmprel	_var09
27368                 | LR__3971
27368     24 00 90 FD | 	jmp	#LR__3972
2736c     3C 00 90 FD | 	jmp	#LR__3973
27370     54 00 90 FD | 	jmp	#LR__3974
27374     5C 00 90 FD | 	jmp	#LR__3975
27378     64 00 90 FD | 	jmp	#LR__3976
2737c     6C 00 90 FD | 	jmp	#LR__3977
27380     74 00 90 FD | 	jmp	#LR__3978
27384     7C 00 90 FD | 	jmp	#LR__3979
27388     84 00 90 FD | 	jmp	#LR__3980
2738c     A0 00 90 FD | 	jmp	#LR__3982
27390                 | LR__3972
27390     01 03 32 F9 | 	getword	_var02, _var02, #0
27394     04 09 32 F9 | 	getword	_var05, _var05, #0
27398     04 03 82 F1 | 	sub	_var02, _var05
2739c     01 02 66 F0 | 	shl	_var02, #1
273a0     03 03 02 F1 | 	add	_var02, _var04
273a4     01 03 E2 FA | 	rdword	_var02, _var02
273a8     84 00 90 FD | 	jmp	#LR__3982
273ac                 | LR__3973
273ac     01 05 32 F9 | 	getword	_var03, _var02, #0
273b0     01 03 32 F9 | 	getword	_var02, _var02, #0
273b4     04 09 32 F9 | 	getword	_var05, _var05, #0
273b8     04 03 82 F1 | 	sub	_var02, _var05
273bc     01 02 06 F5 | 	and	_var02, #1
273c0     02 03 C2 F2 | 	subr	_var02, _var03
273c4     68 00 90 FD | 	jmp	#LR__3982
273c8                 | LR__3974
273c8     01 03 32 F9 | 	getword	_var02, _var02, #0
273cc     10 02 86 F1 | 	sub	_var02, #16
273d0     5C 00 90 FD | 	jmp	#LR__3982
273d4                 | LR__3975
273d4     01 03 32 F9 | 	getword	_var02, _var02, #0
273d8     20 02 86 F1 | 	sub	_var02, #32
273dc     50 00 90 FD | 	jmp	#LR__3982
273e0                 | LR__3976
273e0     01 03 32 F9 | 	getword	_var02, _var02, #0
273e4     30 02 86 F1 | 	sub	_var02, #48
273e8     44 00 90 FD | 	jmp	#LR__3982
273ec                 | LR__3977
273ec     01 03 32 F9 | 	getword	_var02, _var02, #0
273f0     1A 02 86 F1 | 	sub	_var02, #26
273f4     38 00 90 FD | 	jmp	#LR__3982
273f8                 | LR__3978
273f8     01 03 32 F9 | 	getword	_var02, _var02, #0
273fc     08 02 06 F1 | 	add	_var02, #8
27400     2C 00 90 FD | 	jmp	#LR__3982
27404                 | LR__3979
27404     01 03 32 F9 | 	getword	_var02, _var02, #0
27408     50 02 86 F1 | 	sub	_var02, #80
2740c     20 00 90 FD | 	jmp	#LR__3982
27410                 | LR__3980
27410     01 03 32 F9 | 	getword	_var02, _var02, #0
27414     0E 00 00 FF 
27418     60 02 86 F1 | 	sub	_var02, ##7264
2741c                 | ' 				}
2741c                 | ' 				break;
2741c     10 00 90 FD | 	jmp	#LR__3982
27420                 | LR__3981
27420     0F 0C 4E F7 | 	zerox	_var07, #15 wz
27424     02 0A 06 AA |  if_e	mul	_var06, #2
27428     05 07 02 A1 |  if_e	add	_var04, _var06
2742c     D8 FE 9F FD | 	jmp	#LR__3970
27430                 | LR__3982
27430     01 01 32 F9 | 	getword	_var01, _var02, #0
27434                 | LR__3983
27434                 | ' 		}
27434                 | ' 		uni = uc;
27434                 | ' 	}
27434                 | ' 
27434                 | ' 	return uni;
27434     00 FB 01 F6 | 	mov	result1, _var01
27438                 | _fatfs_cc_ff_wtoupper_ret
27438     2D 00 64 FD | 	ret
2743c                 | 
2743c                 | _fatfs_cc_strncpy
2743c     09 01 02 F6 | 	mov	_var01, arg01
27440     97 12 48 FB | 	callpa	#(@LR__3991-@LR__3990)>>2,fcache_load_ptr_
27444                 | ' 
27444                 | ' 	dscan = dst;
27444                 | ' 	sscan = src;
27444                 | ' 	count = n;
27444                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
27444                 | LR__3990
27444     01 16 86 F1 | 	sub	arg03, #1
27448     00 16 56 F2 | 	cmps	arg03, #0 wc
2744c     18 00 90 CD |  if_b	jmp	#LR__3992
27450     0A FB C1 FA | 	rdbyte	result1, arg02
27454     00 FB 41 FC | 	wrbyte	result1, _var01
27458     01 14 06 F1 | 	add	arg02, #1
2745c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
27460                 | ' 		continue;
27460     01 00 06 F1 | 	add	_var01, #1
27464     DC FF 9F 5D |  if_ne	jmp	#LR__3990
27468                 | LR__3991
27468                 | LR__3992
27468     97 0C 48 FB | 	callpa	#(@LR__3994-@LR__3993)>>2,fcache_load_ptr_
2746c                 | ' 	while (--count >= 0)
2746c                 | LR__3993
2746c     01 16 86 F1 | 	sub	arg03, #1
27470     00 16 56 F2 | 	cmps	arg03, #0 wc
27474     00 03 02 36 |  if_ae	mov	_var02, _var01
27478     01 00 06 31 |  if_ae	add	_var01, #1
2747c     01 01 48 3C |  if_ae	wrbyte	#0, _var02
27480     E8 FF 9F 3D |  if_ae	jmp	#LR__3993
27484                 | LR__3994
27484                 | ' 		*dscan++ = '\0';
27484                 | ' 	return(dst);
27484     09 FB 01 F6 | 	mov	result1, arg01
27488                 | _fatfs_cc_strncpy_ret
27488     2D 00 64 FD | 	ret
2748c                 | 
2748c                 | _fatfs_cc_memcmp
2748c                 | ' 	for (n = size; n > 0; n--)
2748c     00 16 0E F2 | 	cmp	arg03, #0 wz
27490     28 00 90 AD |  if_e	jmp	#LR__4001
27494                 | LR__4000
27494     09 01 C2 FA | 	rdbyte	_var01, arg01
27498     0A 03 C2 FA | 	rdbyte	_var02, arg02
2749c     01 01 0A F2 | 	cmp	_var01, _var02 wz
274a0     01 12 06 A1 |  if_e	add	arg01, #1
274a4     01 14 06 A1 |  if_e	add	arg02, #1
274a8                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
274a8     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
274ac     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
274b0     01 FB 81 51 |  if_ne	sub	result1, _var02
274b4     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
274b8     F6 17 6E FB | 	djnz	arg03, #LR__4000
274bc                 | LR__4001
274bc                 | ' 
274bc                 | ' 	return(0);
274bc     00 FA 05 F6 | 	mov	result1, #0
274c0                 | _fatfs_cc_memcmp_ret
274c0     2D 00 64 FD | 	ret
274c4                 | 
274c4                 | _fatfs_cc_strncmp
274c4     09 01 0A F6 | 	mov	_var01, arg01 wz
274c8     14 00 90 5D |  if_ne	jmp	#LR__4010
274cc                 | ' 		return scan2 ? -1 : 0;
274cc     00 14 0E F2 | 	cmp	arg02, #0 wz
274d0     01 02 66 56 |  if_ne	neg	_var02, #1
274d4     00 02 06 A6 |  if_e	mov	_var02, #0
274d8     01 FB 01 F6 | 	mov	result1, _var02
274dc     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
274e0                 | LR__4010
274e0     00 14 0E F2 | 	cmp	arg02, #0 wz
274e4     01 FA 05 A6 |  if_e	mov	result1, #1
274e8     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
274ec     0B 05 02 F6 | 	mov	_var03, arg03
274f0     97 16 48 FB | 	callpa	#(@LR__4012-@LR__4011)>>2,fcache_load_ptr_
274f4                 | ' 	count = n;
274f4                 | ' 	do {
274f4                 | LR__4011
274f4     00 07 C2 FA | 	rdbyte	_var04, _var01
274f8     0A 09 02 F6 | 	mov	_var05, arg02
274fc     04 0B C2 FA | 	rdbyte	_var06, _var05
27500     01 04 86 F1 | 	sub	_var03, #1
27504     00 04 56 F2 | 	cmps	_var03, #0 wc
27508     01 00 06 F1 | 	add	_var01, #1
2750c     01 14 06 F1 | 	add	arg02, #1
27510     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
27514     08 00 90 2D |  if_nc_and_z	jmp	#LR__4013
27518     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2751c     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4011
27520                 | LR__4012
27520                 | LR__4013
27520     00 04 56 F2 | 	cmps	_var03, #0 wc
27524                 | ' 		return(0);
27524     00 FA 05 C6 |  if_b	mov	result1, #0
27528     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2752c     05 07 0A F2 | 	cmp	_var04, _var06 wz
27530                 | ' 		return(0);
27530     00 FA 05 A6 |  if_e	mov	result1, #0
27534     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
27538     00 06 0E F2 | 	cmp	_var04, #0 wz
2753c                 | ' 		return(-1);
2753c     01 FA 65 A6 |  if_e	neg	result1, #1
27540     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
27544     00 0A 0E F2 | 	cmp	_var06, #0 wz
27548                 | ' 		return(1);
27548     01 FA 05 A6 |  if_e	mov	result1, #1
2754c                 | ' 		return(c1 - c2);
2754c     03 FB 01 56 |  if_ne	mov	result1, _var04
27550     05 FB 81 51 |  if_ne	sub	result1, _var06
27554                 | _fatfs_cc_strncmp_ret
27554     2D 00 64 FD | 	ret
27558                 | 
27558                 | _fatfs_cc_strchr
27558                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
27558                 | ' 	while ((c = *s++) != (char) charwanted)
27558                 | LR__4020
27558     09 01 02 F6 | 	mov	_var01, arg01
2755c     00 03 C2 FA | 	rdbyte	_var02, _var01
27560     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
27564     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
27568     03 05 0A F2 | 	cmp	_var03, _var04 wz
2756c     01 12 06 F1 | 	add	arg01, #1
27570     14 00 90 AD |  if_e	jmp	#LR__4021
27574     01 05 02 F6 | 	mov	_var03, _var02
27578     07 04 4E F7 | 	zerox	_var03, #7 wz
2757c     00 FA 05 A6 |  if_e	mov	result1, #0
27580     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
27584     D0 FF 9F FD | 	jmp	#LR__4020
27588                 | LR__4021
27588                 | ' 	return((char *)--s);
27588     01 12 86 F1 | 	sub	arg01, #1
2758c     09 FB 01 F6 | 	mov	result1, arg01
27590                 | _fatfs_cc_strchr_ret
27590     2D 00 64 FD | 	ret
27594                 | 
27594                 | _fatfs_cc_disk_initialize
27594     04 4A 05 F6 | 	mov	COUNT_, #4
27598     A8 00 A0 FD | 	call	#pushregs_
2759c     40 F0 07 F1 | 	add	ptra, #64
275a0     04 4E 05 F1 | 	add	fp, #4
275a4     A7 12 42 FC | 	wrbyte	arg01, fp
275a8     01 00 00 FF 
275ac     14 E4 05 F1 | 	add	objptr, ##532
275b0     F2 18 02 FB | 	rdlong	arg04, objptr
275b4     2C 4E 05 F1 | 	add	fp, #44
275b8     A7 18 62 FC | 	wrlong	arg04, fp
275bc     04 E4 85 F1 | 	sub	objptr, #4
275c0     F2 18 02 FB | 	rdlong	arg04, objptr
275c4     04 4E 05 F1 | 	add	fp, #4
275c8     A7 18 62 FC | 	wrlong	arg04, fp
275cc     08 E4 05 F1 | 	add	objptr, #8
275d0     F2 18 02 FB | 	rdlong	arg04, objptr
275d4     04 4E 05 F1 | 	add	fp, #4
275d8     A7 18 62 FC | 	wrlong	arg04, fp
275dc     04 E4 05 F1 | 	add	objptr, #4
275e0     F2 18 02 FB | 	rdlong	arg04, objptr
275e4     04 4E 05 F1 | 	add	fp, #4
275e8     A7 18 62 FC | 	wrlong	arg04, fp
275ec     04 E4 05 F1 | 	add	objptr, #4
275f0     F2 02 48 FC | 	wrbyte	#1, objptr
275f4     01 00 00 FF 
275f8     20 E4 85 F1 | 	sub	objptr, ##544
275fc     38 4E 85 F1 | 	sub	fp, #56
27600     A7 18 CA FA | 	rdbyte	arg04, fp wz
27604     04 4E 85 F1 | 	sub	fp, #4
27608                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
27608                 | '             return RES_NOTRDY;
27608     03 FA 05 56 |  if_ne	mov	result1, #3
2760c     D8 05 90 5D |  if_ne	jmp	#LR__4048
27610     13 00 00 FF 
27614     10 13 06 F6 | 	mov	arg01, ##10000
27618     2C 98 BF FD | 	call	#__system___waitus
2761c     30 4E 05 F1 | 	add	fp, #48
27620     A7 12 02 FB | 	rdlong	arg01, fp
27624     09 01 08 FC | 	wrpin	#0, arg01
27628     04 4E 05 F1 | 	add	fp, #4
2762c     A7 12 02 FB | 	rdlong	arg01, fp
27630     09 01 08 FC | 	wrpin	#0, arg01
27634     04 4E 05 F1 | 	add	fp, #4
27638     A7 12 02 FB | 	rdlong	arg01, fp
2763c     09 01 08 FC | 	wrpin	#0, arg01
27640     04 4E 05 F1 | 	add	fp, #4
27644     A7 12 02 FB | 	rdlong	arg01, fp
27648     09 00 80 FF 
2764c     09 01 08 FC | 	wrpin	##4608, arg01
27650     0C 4E 85 F1 | 	sub	fp, #12
27654     A7 12 02 FB | 	rdlong	arg01, fp
27658     59 12 62 FD | 	drvh	arg01
2765c     04 4E 05 F1 | 	add	fp, #4
27660     A7 12 02 FB | 	rdlong	arg01, fp
27664     59 12 62 FD | 	drvh	arg01
27668     04 4E 05 F1 | 	add	fp, #4
2766c     A7 12 02 FB | 	rdlong	arg01, fp
27670     59 12 62 FD | 	drvh	arg01
27674     04 4E 05 F1 | 	add	fp, #4
27678     A7 12 02 FB | 	rdlong	arg01, fp
2767c     59 12 62 FD | 	drvh	arg01
27680     20 4E 85 F1 | 	sub	fp, #32
27684     00 04 80 FF 
27688     A7 20 68 FC | 	wrlong	##524304, fp
2768c     04 4E 05 F1 | 	add	fp, #4
27690     20 03 80 FF 
27694     A7 90 68 FC | 	wrlong	##409672, fp
27698     14 4E 05 F1 | 	add	fp, #20
2769c     A7 1E 02 FB | 	rdlong	local01, fp
276a0     18 4E 85 F1 | 	sub	fp, #24
276a4     A7 16 02 FB | 	rdlong	arg03, fp
276a8     40 1E 62 FD | 	dirl	local01
276ac     A0 03 80 FF 
276b0     0F 91 08 FC | 	wrpin	##475208, local01
276b4     0F 17 12 FC | 	wxpin	arg03, local01
276b8     0F 01 28 FC | 	wypin	#0, local01
276bc     41 1E 62 FD | 	dirh	local01
276c0     1C 4E 05 F1 | 	add	fp, #28
276c4     A7 20 02 FB | 	rdlong	local02, fp
276c8     10 1F 82 F1 | 	sub	local01, local02
276cc     07 1E 06 F5 | 	and	local01, #7
276d0     18 1E 66 F0 | 	shl	local01, #24
276d4     78 14 06 F6 | 	mov	arg02, #120
276d8     0F 15 42 F5 | 	or	arg02, local01
276dc     14 4E 85 F1 | 	sub	fp, #20
276e0     A7 14 62 FC | 	wrlong	arg02, fp
276e4     14 4E 05 F1 | 	add	fp, #20
276e8     A7 12 02 FB | 	rdlong	arg01, fp
276ec     10 14 26 F4 | 	bith	arg02, #16
276f0     40 12 62 FD | 	dirl	arg01
276f4     09 15 02 FC | 	wrpin	arg02, arg01
276f8     09 3F 18 FC | 	wxpin	#31, arg01
276fc     FF FF FF FF 
27700     09 FF 2B FC | 	wypin	##-1, arg01
27704     41 12 62 FD | 	dirh	arg01
27708     04 4E 85 F1 | 	sub	fp, #4
2770c     A7 14 02 FB | 	rdlong	arg02, fp
27710     08 4E 05 F1 | 	add	fp, #8
27714     A7 22 02 FB | 	rdlong	local03, fp
27718     11 15 82 F1 | 	sub	arg02, local03
2771c     07 14 06 F5 | 	and	arg02, #7
27720     18 14 66 F0 | 	shl	arg02, #24
27724     14 4E 85 F1 | 	sub	fp, #20
27728     A7 14 62 FC | 	wrlong	arg02, fp
2772c     29 00 00 FF 
27730     7A 14 46 F5 | 	or	arg02, ##21114
27734     A7 14 62 FC | 	wrlong	arg02, fp
27738     14 4E 05 F1 | 	add	fp, #20
2773c     A7 12 02 FB | 	rdlong	arg01, fp
27740     40 12 62 FD | 	dirl	arg01
27744     09 15 02 FC | 	wrpin	arg02, arg01
27748     09 4F 18 FC | 	wxpin	#39, arg01
2774c     09 01 28 FC | 	wypin	#0, arg01
27750     41 12 62 FD | 	dirh	arg01
27754     28 4E 85 F1 | 	sub	fp, #40
27758     A7 12 02 F6 | 	mov	arg01, fp
2775c     14 4E 85 F1 | 	sub	fp, #20
27760     0A 14 06 F6 | 	mov	arg02, #10
27764     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
27768     00 12 06 F6 | 	mov	arg01, #0
2776c     00 14 06 F6 | 	mov	arg02, #0
27770     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27774     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1126
27778     64 12 06 F6 | 	mov	arg01, #100
2777c     C8 96 BF FD | 	call	#__system___waitus
27780     14 4E 05 F1 | 	add	fp, #20
27784     A7 12 02 F6 | 	mov	arg01, fp
27788     14 4E 85 F1 | 	sub	fp, #20
2778c     0A 14 06 F6 | 	mov	arg02, #10
27790     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
27794     0C 4E 05 F1 | 	add	fp, #12
27798     A7 00 48 FC | 	wrbyte	#0, fp
2779c     0C 4E 85 F1 | 	sub	fp, #12
277a0     00 12 06 F6 | 	mov	arg01, #0
277a4     00 14 06 F6 | 	mov	arg02, #0
277a8     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
277ac     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
277b0     01 18 0E F2 | 	cmp	arg04, #1 wz
277b4     B8 03 90 5D |  if_ne	jmp	#LR__4047
277b8     08 12 06 F6 | 	mov	arg01, #8
277bc     AA 15 06 F6 | 	mov	arg02, #426
277c0     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
277c4     FD FA E1 F8 | 	getbyte	result1, result1, #0
277c8     01 FA 0D F2 | 	cmp	result1, #1 wz
277cc     98 01 90 5D |  if_ne	jmp	#LR__4033
277d0     14 4E 05 F1 | 	add	fp, #20
277d4     A7 12 02 F6 | 	mov	arg01, fp
277d8     14 4E 85 F1 | 	sub	fp, #20
277dc     04 14 06 F6 | 	mov	arg02, #4
277e0     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
277e4     16 4E 05 F1 | 	add	fp, #22
277e8     A7 24 C2 FA | 	rdbyte	local04, fp
277ec     16 4E 85 F1 | 	sub	fp, #22
277f0     01 24 0E F2 | 	cmp	local04, #1 wz
277f4     17 4E 05 A1 |  if_e	add	fp, #23
277f8     A7 22 C2 AA |  if_e	rdbyte	local03, fp
277fc     17 4E 85 A1 |  if_e	sub	fp, #23
27800     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
27804     68 03 90 5D |  if_ne	jmp	#LR__4046
27808                 | ' 				for (tmr = 1000; tmr; tmr--) {
27808     18 4E 05 F1 | 	add	fp, #24
2780c     01 00 80 FF 
27810     A7 D0 6B FC | 	wrlong	##1000, fp
27814     18 4E 85 F1 | 	sub	fp, #24
27818                 | LR__4030
27818     18 4E 05 F1 | 	add	fp, #24
2781c     A7 1E 0A FB | 	rdlong	local01, fp wz
27820     18 4E 85 F1 | 	sub	fp, #24
27824     3C 00 90 AD |  if_e	jmp	#LR__4031
27828     A9 12 06 F6 | 	mov	arg01, #169
2782c     1E 14 C6 F9 | 	decod	arg02, #30
27830     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27834     FD 24 02 F6 | 	mov	local04, result1
27838     07 24 4E F7 | 	zerox	local04, #7 wz
2783c     24 00 90 AD |  if_e	jmp	#LR__4031
27840     01 00 00 FF 
27844     E8 13 06 F6 | 	mov	arg01, ##1000
27848     FC 95 BF FD | 	call	#__system___waitus
2784c     18 4E 05 F1 | 	add	fp, #24
27850     A7 24 02 FB | 	rdlong	local04, fp
27854     01 24 86 F1 | 	sub	local04, #1
27858     A7 24 62 FC | 	wrlong	local04, fp
2785c     18 4E 85 F1 | 	sub	fp, #24
27860     B4 FF 9F FD | 	jmp	#LR__4030
27864                 | LR__4031
27864     18 4E 05 F1 | 	add	fp, #24
27868     A7 24 0A FB | 	rdlong	local04, fp wz
2786c     18 4E 85 F1 | 	sub	fp, #24
27870     4C 00 90 AD |  if_e	jmp	#LR__4032
27874     3A 12 06 F6 | 	mov	arg01, #58
27878     00 14 06 F6 | 	mov	arg02, #0
2787c     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27880     FD 22 02 F6 | 	mov	local03, result1
27884     07 22 4E F7 | 	zerox	local03, #7 wz
27888     34 00 90 5D |  if_ne	jmp	#LR__4032
2788c     14 4E 05 F1 | 	add	fp, #20
27890     A7 12 02 F6 | 	mov	arg01, fp
27894     14 4E 85 F1 | 	sub	fp, #20
27898     04 14 06 F6 | 	mov	arg02, #4
2789c     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
278a0     14 4E 05 F1 | 	add	fp, #20
278a4     A7 1E C2 FA | 	rdbyte	local01, fp
278a8     40 1E CE F7 | 	test	local01, #64 wz
278ac     0C 24 06 56 |  if_ne	mov	local04, #12
278b0     04 24 06 A6 |  if_e	mov	local04, #4
278b4     08 4E 85 F1 | 	sub	fp, #8
278b8     A7 24 42 FC | 	wrbyte	local04, fp
278bc     0C 4E 85 F1 | 	sub	fp, #12
278c0                 | LR__4032
278c0     14 24 06 FB | 	rdlong	local04, #20
278c4     18 4E 05 F1 | 	add	fp, #24
278c8     A7 24 62 FC | 	wrlong	local04, fp
278cc     0C 4E 05 F1 | 	add	fp, #12
278d0     A7 24 02 FB | 	rdlong	local04, fp
278d4     1B 24 26 F4 | 	bith	local04, #27
278d8     A7 24 62 FC | 	wrlong	local04, fp
278dc     0C 4E 85 F1 | 	sub	fp, #12
278e0     A7 24 02 FB | 	rdlong	local04, fp
278e4     18 4E 85 F1 | 	sub	fp, #24
278e8     68 78 04 FF 
278ec     81 25 16 F2 | 	cmp	local04, ##150000001 wc
278f0     1C 4E 05 C1 |  if_b	add	fp, #28
278f4     00 01 80 CF 
278f8     A7 08 68 CC |  if_b	wrlong	##131076, fp
278fc     1C 4E 85 C1 |  if_b	sub	fp, #28
27900     6C 02 90 CD |  if_b	jmp	#LR__4046
27904     18 4E 05 F1 | 	add	fp, #24
27908     A7 24 02 FB | 	rdlong	local04, fp
2790c     18 4E 85 F1 | 	sub	fp, #24
27910     E1 F5 05 FF 
27914     01 24 16 F2 | 	cmp	local04, ##200000001 wc
27918     1C 4E 05 C1 |  if_b	add	fp, #28
2791c     00 01 80 CF 
27920     A7 0A 68 CC |  if_b	wrlong	##131077, fp
27924     1C 4E 85 C1 |  if_b	sub	fp, #28
27928     44 02 90 CD |  if_b	jmp	#LR__4046
2792c     18 4E 05 F1 | 	add	fp, #24
27930     A7 24 02 FB | 	rdlong	local04, fp
27934     18 4E 85 F1 | 	sub	fp, #24
27938     3B 58 08 FF 
2793c     01 24 16 F2 | 	cmp	local04, ##280000001 wc
27940     1C 4E 05 C1 |  if_b	add	fp, #28
27944     00 01 80 CF 
27948     A7 0C 68 CC |  if_b	wrlong	##131078, fp
2794c     1C 4E 85 C1 |  if_b	sub	fp, #28
27950     1C 02 90 CD |  if_b	jmp	#LR__4046
27954     1C 4E 05 F1 | 	add	fp, #28
27958     80 01 80 FF 
2795c     A7 10 68 FC | 	wrlong	##196616, fp
27960     1C 4E 85 F1 | 	sub	fp, #28
27964     08 02 90 FD | 	jmp	#LR__4046
27968                 | LR__4033
27968     A9 12 06 F6 | 	mov	arg01, #169
2796c     00 14 06 F6 | 	mov	arg02, #0
27970     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27974     FD 24 E2 F8 | 	getbyte	local04, result1, #0
27978     02 24 16 F2 | 	cmp	local04, #2 wc
2797c     18 00 90 3D |  if_ae	jmp	#LR__4034
27980     0C 4E 05 F1 | 	add	fp, #12
27984     A7 04 48 FC | 	wrbyte	#2, fp
27988     04 4E 05 F1 | 	add	fp, #4
2798c     A7 52 49 FC | 	wrbyte	#169, fp
27990     10 4E 85 F1 | 	sub	fp, #16
27994     14 00 90 FD | 	jmp	#LR__4035
27998                 | LR__4034
27998     0C 4E 05 F1 | 	add	fp, #12
2799c     A7 02 48 FC | 	wrbyte	#1, fp
279a0     04 4E 05 F1 | 	add	fp, #4
279a4     A7 02 48 FC | 	wrbyte	#1, fp
279a8     10 4E 85 F1 | 	sub	fp, #16
279ac                 | LR__4035
279ac                 | ' 				ty =  0x01 ; cmd =  (1) ;
279ac                 | ' 			}
279ac                 | ' 			for (tmr = 1000; tmr; tmr--) {
279ac     18 4E 05 F1 | 	add	fp, #24
279b0     01 00 80 FF 
279b4     A7 D0 6B FC | 	wrlong	##1000, fp
279b8     18 4E 85 F1 | 	sub	fp, #24
279bc                 | LR__4036
279bc     18 4E 05 F1 | 	add	fp, #24
279c0     A7 22 0A FB | 	rdlong	local03, fp wz
279c4     18 4E 85 F1 | 	sub	fp, #24
279c8     44 00 90 AD |  if_e	jmp	#LR__4037
279cc     10 4E 05 F1 | 	add	fp, #16
279d0     A7 12 C2 FA | 	rdbyte	arg01, fp
279d4     10 4E 85 F1 | 	sub	fp, #16
279d8     00 14 06 F6 | 	mov	arg02, #0
279dc     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
279e0     FD 24 02 F6 | 	mov	local04, result1
279e4     07 24 4E F7 | 	zerox	local04, #7 wz
279e8     24 00 90 AD |  if_e	jmp	#LR__4037
279ec     01 00 00 FF 
279f0     E8 13 06 F6 | 	mov	arg01, ##1000
279f4     50 94 BF FD | 	call	#__system___waitus
279f8     18 4E 05 F1 | 	add	fp, #24
279fc     A7 24 02 FB | 	rdlong	local04, fp
27a00     01 24 86 F1 | 	sub	local04, #1
27a04     A7 24 62 FC | 	wrlong	local04, fp
27a08     18 4E 85 F1 | 	sub	fp, #24
27a0c     AC FF 9F FD | 	jmp	#LR__4036
27a10                 | LR__4037
27a10     18 4E 05 F1 | 	add	fp, #24
27a14     A7 24 0A FB | 	rdlong	local04, fp wz
27a18     18 4E 85 F1 | 	sub	fp, #24
27a1c     14 00 90 AD |  if_e	jmp	#LR__4038
27a20     10 12 06 F6 | 	mov	arg01, #16
27a24     09 14 C6 F9 | 	decod	arg02, #9
27a28     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27a2c     07 FA 4D F7 | 	zerox	result1, #7 wz
27a30     0C 00 90 AD |  if_e	jmp	#LR__4039
27a34                 | LR__4038
27a34     0C 4E 05 F1 | 	add	fp, #12
27a38     A7 00 48 FC | 	wrbyte	#0, fp
27a3c     0C 4E 85 F1 | 	sub	fp, #12
27a40                 | LR__4039
27a40     14 24 06 FB | 	rdlong	local04, #20
27a44     18 4E 05 F1 | 	add	fp, #24
27a48     A7 24 62 FC | 	wrlong	local04, fp
27a4c     18 4E 85 F1 | 	sub	fp, #24
27a50     F0 FA 02 FF 
27a54     01 25 16 F2 | 	cmp	local04, ##100000001 wc
27a58     18 00 90 3D |  if_ae	jmp	#LR__4040
27a5c     24 4E 05 F1 | 	add	fp, #36
27a60     A7 24 02 FB | 	rdlong	local04, fp
27a64     1B 24 26 F4 | 	bith	local04, #27
27a68     A7 24 62 FC | 	wrlong	local04, fp
27a6c     24 4E 85 F1 | 	sub	fp, #36
27a70     2C 00 90 FD | 	jmp	#LR__4041
27a74                 | LR__4040
27a74     18 4E 05 F1 | 	add	fp, #24
27a78     A7 24 02 FB | 	rdlong	local04, fp
27a7c     18 4E 85 F1 | 	sub	fp, #24
27a80     E1 F5 05 FF 
27a84     01 24 16 F2 | 	cmp	local04, ##200000001 wc
27a88     24 4E 05 C1 |  if_b	add	fp, #36
27a8c     A7 24 02 CB |  if_b	rdlong	local04, fp
27a90     80 00 04 CF 
27a94     00 24 46 C5 |  if_b	or	local04, ##134283264
27a98     A7 24 62 CC |  if_b	wrlong	local04, fp
27a9c     24 4E 85 C1 |  if_b	sub	fp, #36
27aa0                 | LR__4041
27aa0     18 4E 05 F1 | 	add	fp, #24
27aa4     A7 24 02 FB | 	rdlong	local04, fp
27aa8     18 4E 85 F1 | 	sub	fp, #24
27aac     F0 FA 02 FF 
27ab0     01 25 16 F2 | 	cmp	local04, ##100000001 wc
27ab4     1C 4E 05 C1 |  if_b	add	fp, #28
27ab8     00 01 80 CF 
27abc     A7 08 68 CC |  if_b	wrlong	##131076, fp
27ac0     1C 4E 85 C1 |  if_b	sub	fp, #28
27ac4     A8 00 90 CD |  if_b	jmp	#LR__4045
27ac8     18 4E 05 F1 | 	add	fp, #24
27acc     A7 24 02 FB | 	rdlong	local04, fp
27ad0     18 4E 85 F1 | 	sub	fp, #24
27ad4     68 78 04 FF 
27ad8     81 25 16 F2 | 	cmp	local04, ##150000001 wc
27adc     1C 4E 05 C1 |  if_b	add	fp, #28
27ae0     80 01 80 CF 
27ae4     A7 0C 68 CC |  if_b	wrlong	##196614, fp
27ae8     1C 4E 85 C1 |  if_b	sub	fp, #28
27aec     80 00 90 CD |  if_b	jmp	#LR__4044
27af0     18 4E 05 F1 | 	add	fp, #24
27af4     A7 24 02 FB | 	rdlong	local04, fp
27af8     18 4E 85 F1 | 	sub	fp, #24
27afc     E1 F5 05 FF 
27b00     01 24 16 F2 | 	cmp	local04, ##200000001 wc
27b04     1C 4E 05 C1 |  if_b	add	fp, #28
27b08     00 02 80 CF 
27b0c     A7 10 68 CC |  if_b	wrlong	##262152, fp
27b10     1C 4E 85 C1 |  if_b	sub	fp, #28
27b14     58 00 90 CD |  if_b	jmp	#LR__4043
27b18     18 4E 05 F1 | 	add	fp, #24
27b1c     A7 24 02 FB | 	rdlong	local04, fp
27b20     18 4E 85 F1 | 	sub	fp, #24
27b24     59 73 07 FF 
27b28     81 24 16 F2 | 	cmp	local04, ##250000001 wc
27b2c     1C 4E 05 C1 |  if_b	add	fp, #28
27b30     80 02 80 CF 
27b34     A7 14 68 CC |  if_b	wrlong	##327690, fp
27b38     1C 4E 85 C1 |  if_b	sub	fp, #28
27b3c     30 00 90 CD |  if_b	jmp	#LR__4042
27b40     18 4E 05 F1 | 	add	fp, #24
27b44     A7 24 02 FB | 	rdlong	local04, fp
27b48     18 4E 85 F1 | 	sub	fp, #24
27b4c     D1 F0 08 FF 
27b50     01 25 16 F2 | 	cmp	local04, ##300000001 wc
27b54     1C 4E 05 C1 |  if_b	add	fp, #28
27b58     00 03 80 CF 
27b5c     A7 18 68 CC |  if_b	wrlong	##393228, fp
27b60     1C 4E 85 F3 | 	sumc	fp, #28
27b64     80 03 80 3F 
27b68     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
27b6c     1C 4E 85 31 |  if_ae	sub	fp, #28
27b70                 | LR__4042
27b70                 | LR__4043
27b70                 | LR__4044
27b70                 | LR__4045
27b70                 | LR__4046
27b70                 | LR__4047
27b70     0C 4E 05 F1 | 	add	fp, #12
27b74     A7 24 C2 FA | 	rdbyte	local04, fp
27b78     01 00 00 FF 
27b7c     21 E4 05 F1 | 	add	objptr, ##545
27b80     F2 24 42 FC | 	wrbyte	local04, objptr
27b84     A7 1E CA FA | 	rdbyte	local01, fp wz
27b88     00 24 06 56 |  if_ne	mov	local04, #0
27b8c     01 24 06 A6 |  if_e	mov	local04, #1
27b90     20 4E 05 F1 | 	add	fp, #32
27b94     A7 24 42 FC | 	wrbyte	local04, fp
27b98     A7 24 C2 FA | 	rdbyte	local04, fp
27b9c     2C 4E 85 F1 | 	sub	fp, #44
27ba0     01 E4 85 F1 | 	sub	objptr, #1
27ba4     F2 24 42 FC | 	wrbyte	local04, objptr
27ba8     01 00 00 FF 
27bac     20 E4 85 F1 | 	sub	objptr, ##544
27bb0     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1126
27bb4     34 4E 05 F1 | 	add	fp, #52
27bb8     A7 12 02 FB | 	rdlong	arg01, fp
27bbc     18 4E 85 F1 | 	sub	fp, #24
27bc0     A7 14 02 FB | 	rdlong	arg02, fp
27bc4     09 15 12 FC | 	wxpin	arg02, arg01
27bc8     1C 4E 05 F1 | 	add	fp, #28
27bcc     A7 12 02 FB | 	rdlong	arg01, fp
27bd0     14 4E 85 F1 | 	sub	fp, #20
27bd4     A7 14 02 FB | 	rdlong	arg02, fp
27bd8     09 15 02 FC | 	wrpin	arg02, arg01
27bdc                 | ' 
27bdc                 | ' 		}
27bdc                 | ' 	}
27bdc                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
27bdc                 | ' 	CardType = ty;
27bdc                 | ' 	s = ty ? 0 :  0x01 ;
27bdc                 | ' 	Stat = s;
27bdc                 | ' 
27bdc                 | ' 	deselect();
27bdc                 | ' 
27bdc                 | ' 
27bdc                 | ' 	_wxpin( PIN_CLK, ck_div );
27bdc                 | ' 	_wrpin( PIN_DI, spm_tx );
27bdc                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
27bdc                 | ' 	return s;
27bdc     08 4E 05 F1 | 	add	fp, #8
27be0     A7 FA C1 FA | 	rdbyte	result1, fp
27be4     2C 4E 85 F1 | 	sub	fp, #44
27be8                 | LR__4048
27be8     A7 F0 03 F6 | 	mov	ptra, fp
27bec     B2 00 A0 FD | 	call	#popregs_
27bf0                 | _fatfs_cc_disk_initialize_ret
27bf0     2D 00 64 FD | 	ret
27bf4                 | 
27bf4                 | _fatfs_cc_disk_read
27bf4     05 4A 05 F6 | 	mov	COUNT_, #5
27bf8     A8 00 A0 FD | 	call	#pushregs_
27bfc     0A 1F 02 F6 | 	mov	local01, arg02
27c00     0B 21 02 F6 | 	mov	local02, arg03
27c04     0C 23 02 F6 | 	mov	local03, arg04
27c08     00 12 0E F2 | 	cmp	arg01, #0 wz
27c0c     01 FA 05 56 |  if_ne	mov	result1, #1
27c10                 | ' 
27c10                 | ' 	return Stat;
27c10     01 00 00 AF 
27c14     20 E4 05 A1 |  if_e	add	objptr, ##544
27c18     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27c1c     01 00 00 AF 
27c20     20 E4 85 A1 |  if_e	sub	objptr, ##544
27c24     FD FA E1 F8 | 	getbyte	result1, result1, #0
27c28     01 FA CD F7 | 	test	result1, #1 wz
27c2c     03 FA 05 56 |  if_ne	mov	result1, #3
27c30     84 00 90 5D |  if_ne	jmp	#LR__4052
27c34     01 00 00 FF 
27c38     21 E4 05 F1 | 	add	objptr, ##545
27c3c     F2 24 C2 FA | 	rdbyte	local04, objptr
27c40     01 00 00 FF 
27c44     21 E4 85 F1 | 	sub	objptr, ##545
27c48     08 24 CE F7 | 	test	local04, #8 wz
27c4c     09 20 66 A0 |  if_e	shl	local02, #9
27c50     02 22 16 F2 | 	cmp	local03, #2 wc
27c54     12 24 06 36 |  if_ae	mov	local04, #18
27c58     11 24 06 C6 |  if_b	mov	local04, #17
27c5c     10 15 02 F6 | 	mov	arg02, local02
27c60     12 13 02 F6 | 	mov	arg01, local04
27c64     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27c68     FD 26 02 F6 | 	mov	local05, result1
27c6c     07 26 4E F7 | 	zerox	local05, #7 wz
27c70     30 00 90 5D |  if_ne	jmp	#LR__4051
27c74                 | ' 		do {
27c74                 | LR__4050
27c74     0F 13 02 F6 | 	mov	arg01, local01
27c78     09 14 C6 F9 | 	decod	arg02, #9
27c7c     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1134
27c80     00 FA 0D F2 | 	cmp	result1, #0 wz
27c84     01 00 00 5F 
27c88     00 1E 06 51 |  if_ne	add	local01, ##512
27c8c     F9 23 6E 5B |  if_ne	djnz	local03, #LR__4050
27c90     12 25 E2 F8 | 	getbyte	local04, local04, #0
27c94     12 24 0E F2 | 	cmp	local04, #18 wz
27c98     0C 12 06 A6 |  if_e	mov	arg01, #12
27c9c     00 14 06 A6 |  if_e	mov	arg02, #0
27ca0     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1140
27ca4                 | LR__4051
27ca4     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1126
27ca8                 | ' 	}
27ca8                 | ' 	deselect();
27ca8                 | ' 
27ca8                 | ' 	return count ? RES_ERROR : RES_OK;
27ca8     00 22 0E F2 | 	cmp	local03, #0 wz
27cac     01 26 06 56 |  if_ne	mov	local05, #1
27cb0     00 26 06 A6 |  if_e	mov	local05, #0
27cb4     13 FB 01 F6 | 	mov	result1, local05
27cb8                 | LR__4052
27cb8     A7 F0 03 F6 | 	mov	ptra, fp
27cbc     B2 00 A0 FD | 	call	#popregs_
27cc0                 | _fatfs_cc_disk_read_ret
27cc0     2D 00 64 FD | 	ret
27cc4                 | 
27cc4                 | _fatfs_cc_disk_write
27cc4     04 4A 05 F6 | 	mov	COUNT_, #4
27cc8     A8 00 A0 FD | 	call	#pushregs_
27ccc     0A 1F 02 F6 | 	mov	local01, arg02
27cd0     0C 21 02 F6 | 	mov	local02, arg04
27cd4     0B 23 02 F6 | 	mov	local03, arg03
27cd8     00 12 0E F2 | 	cmp	arg01, #0 wz
27cdc     01 FA 05 56 |  if_ne	mov	result1, #1
27ce0                 | ' 
27ce0                 | ' 	return Stat;
27ce0     01 00 00 AF 
27ce4     20 E4 05 A1 |  if_e	add	objptr, ##544
27ce8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27cec     01 00 00 AF 
27cf0     20 E4 85 A1 |  if_e	sub	objptr, ##544
27cf4     FD FA E1 F8 | 	getbyte	result1, result1, #0
27cf8     01 FA CD F7 | 	test	result1, #1 wz
27cfc     03 FA 05 56 |  if_ne	mov	result1, #3
27d00     D4 00 90 5D |  if_ne	jmp	#LR__4064
27d04     01 00 00 FF 
27d08     21 E4 05 F1 | 	add	objptr, ##545
27d0c     F2 16 C2 FA | 	rdbyte	arg03, objptr
27d10     01 00 00 FF 
27d14     21 E4 85 F1 | 	sub	objptr, ##545
27d18     08 16 CE F7 | 	test	arg03, #8 wz
27d1c     09 22 66 A0 |  if_e	shl	local03, #9
27d20     01 20 0E F2 | 	cmp	local02, #1 wz
27d24     30 00 90 5D |  if_ne	jmp	#LR__4060
27d28     18 12 06 F6 | 	mov	arg01, #24
27d2c     11 15 02 F6 | 	mov	arg02, local03
27d30     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27d34     FD 24 02 F6 | 	mov	local04, result1
27d38     07 24 4E F7 | 	zerox	local04, #7 wz
27d3c     84 00 90 5D |  if_ne	jmp	#LR__4063
27d40     0F 13 02 F6 | 	mov	arg01, local01
27d44     FE 14 06 F6 | 	mov	arg02, #254
27d48     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1136
27d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
27d50     00 20 06 56 |  if_ne	mov	local02, #0
27d54     6C 00 90 FD | 	jmp	#LR__4063
27d58                 | LR__4060
27d58     01 00 00 FF 
27d5c     21 E4 05 F1 | 	add	objptr, ##545
27d60     F2 24 C2 FA | 	rdbyte	local04, objptr
27d64     01 00 00 FF 
27d68     21 E4 85 F1 | 	sub	objptr, ##545
27d6c     06 24 CE F7 | 	test	local04, #6 wz
27d70     97 12 06 56 |  if_ne	mov	arg01, #151
27d74     10 15 02 56 |  if_ne	mov	arg02, local02
27d78     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1140
27d7c     11 15 02 F6 | 	mov	arg02, local03
27d80     19 12 06 F6 | 	mov	arg01, #25
27d84     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27d88     FD 24 02 F6 | 	mov	local04, result1
27d8c     07 24 4E F7 | 	zerox	local04, #7 wz
27d90     30 00 90 5D |  if_ne	jmp	#LR__4062
27d94                 | ' 			do {
27d94                 | LR__4061
27d94     0F 13 02 F6 | 	mov	arg01, local01
27d98     FC 14 06 F6 | 	mov	arg02, #252
27d9c     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1136
27da0     00 FA 0D F2 | 	cmp	result1, #0 wz
27da4     01 00 00 5F 
27da8     00 1E 06 51 |  if_ne	add	local01, ##512
27dac     F9 21 6E 5B |  if_ne	djnz	local02, #LR__4061
27db0     00 12 06 F6 | 	mov	arg01, #0
27db4     FD 14 06 F6 | 	mov	arg02, #253
27db8     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1136
27dbc     00 FA 0D F2 | 	cmp	result1, #0 wz
27dc0     01 20 06 A6 |  if_e	mov	local02, #1
27dc4                 | LR__4062
27dc4                 | LR__4063
27dc4     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1126
27dc8                 | ' 				count = 1;
27dc8                 | ' 		}
27dc8                 | ' 	}
27dc8                 | ' 	deselect();
27dc8                 | ' 
27dc8                 | ' 	return count ? RES_ERROR : RES_OK;
27dc8     00 20 0E F2 | 	cmp	local02, #0 wz
27dcc     01 24 06 56 |  if_ne	mov	local04, #1
27dd0     00 24 06 A6 |  if_e	mov	local04, #0
27dd4     12 FB 01 F6 | 	mov	result1, local04
27dd8                 | LR__4064
27dd8     A7 F0 03 F6 | 	mov	ptra, fp
27ddc     B2 00 A0 FD | 	call	#popregs_
27de0                 | _fatfs_cc_disk_write_ret
27de0     2D 00 64 FD | 	ret
27de4                 | 
27de4                 | _fatfs_cc_disk_ioctl
27de4     01 4A 05 F6 | 	mov	COUNT_, #1
27de8     A8 00 A0 FD | 	call	#pushregs_
27dec     30 F0 07 F1 | 	add	ptra, #48
27df0     04 4E 05 F1 | 	add	fp, #4
27df4     A7 12 42 FC | 	wrbyte	arg01, fp
27df8     04 4E 05 F1 | 	add	fp, #4
27dfc     A7 14 42 FC | 	wrbyte	arg02, fp
27e00     04 4E 05 F1 | 	add	fp, #4
27e04     A7 16 62 FC | 	wrlong	arg03, fp
27e08     08 4E 85 F1 | 	sub	fp, #8
27e0c     A7 12 CA FA | 	rdbyte	arg01, fp wz
27e10     04 4E 85 F1 | 	sub	fp, #4
27e14     01 FA 05 56 |  if_ne	mov	result1, #1
27e18                 | ' 
27e18                 | ' 	return Stat;
27e18     01 00 00 AF 
27e1c     20 E4 05 A1 |  if_e	add	objptr, ##544
27e20     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27e24     01 00 00 AF 
27e28     20 E4 85 A1 |  if_e	sub	objptr, ##544
27e2c     FD FA E1 F8 | 	getbyte	result1, result1, #0
27e30     01 FA CD F7 | 	test	result1, #1 wz
27e34     03 FA 05 56 |  if_ne	mov	result1, #3
27e38     E4 01 90 5D |  if_ne	jmp	#LR__4078
27e3c     10 4E 05 F1 | 	add	fp, #16
27e40     A7 02 68 FC | 	wrlong	#1, fp
27e44                 | ' 
27e44                 | ' 	res = RES_ERROR;
27e44                 | ' 	switch (ctrl) {
27e44     08 4E 85 F1 | 	sub	fp, #8
27e48     A7 1E C2 FA | 	rdbyte	local01, fp
27e4c     08 4E 85 F1 | 	sub	fp, #8
27e50     04 1E 26 F3 | 	fle	local01, #4
27e54     30 1E 62 FD | 	jmprel	local01
27e58                 | LR__4070
27e58     10 00 90 FD | 	jmp	#LR__4071
27e5c     24 00 90 FD | 	jmp	#LR__4072
27e60     A0 01 90 FD | 	jmp	#LR__4076
27e64     80 01 90 FD | 	jmp	#LR__4075
27e68     98 01 90 FD | 	jmp	#LR__4076
27e6c                 | LR__4071
27e6c     B4 79 B0 FD | 	call	#_fatfs_cc_select_1130
27e70     00 FA 0D F2 | 	cmp	result1, #0 wz
27e74     10 4E 05 51 |  if_ne	add	fp, #16
27e78     A7 00 68 5C |  if_ne	wrlong	#0, fp
27e7c     10 4E 85 51 |  if_ne	sub	fp, #16
27e80                 | ' 			break;
27e80     8C 01 90 FD | 	jmp	#LR__4077
27e84                 | LR__4072
27e84     09 12 06 F6 | 	mov	arg01, #9
27e88     00 14 06 F6 | 	mov	arg02, #0
27e8c     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27e90     FD 1E 02 F6 | 	mov	local01, result1
27e94     07 1E 4E F7 | 	zerox	local01, #7 wz
27e98     74 01 90 5D |  if_ne	jmp	#LR__4077
27e9c     18 4E 05 F1 | 	add	fp, #24
27ea0     A7 12 02 F6 | 	mov	arg01, fp
27ea4     18 4E 85 F1 | 	sub	fp, #24
27ea8     10 14 06 F6 | 	mov	arg02, #16
27eac     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1134
27eb0     00 FA 0D F2 | 	cmp	result1, #0 wz
27eb4     58 01 90 AD |  if_e	jmp	#LR__4077
27eb8     18 4E 05 F1 | 	add	fp, #24
27ebc     A7 1E C2 FA | 	rdbyte	local01, fp
27ec0     18 4E 85 F1 | 	sub	fp, #24
27ec4     06 1E 46 F0 | 	shr	local01, #6
27ec8     01 1E 0E F2 | 	cmp	local01, #1 wz
27ecc     5C 00 90 5D |  if_ne	jmp	#LR__4073
27ed0     21 4E 05 F1 | 	add	fp, #33
27ed4     A7 1E C2 FA | 	rdbyte	local01, fp
27ed8     01 4E 85 F1 | 	sub	fp, #1
27edc     A7 FA C1 FA | 	rdbyte	result1, fp
27ee0     FD FA 31 F9 | 	getword	result1, result1, #0
27ee4     08 FA 65 F0 | 	shl	result1, #8
27ee8     FD 1E 02 F1 | 	add	local01, result1
27eec     01 4E 85 F1 | 	sub	fp, #1
27ef0     A7 FA C1 FA | 	rdbyte	result1, fp
27ef4     3F FA 05 F5 | 	and	result1, #63
27ef8     10 FA 65 F0 | 	shl	result1, #16
27efc     FD 1E 02 F1 | 	add	local01, result1
27f00     01 1E 06 F1 | 	add	local01, #1
27f04     09 4E 05 F1 | 	add	fp, #9
27f08     A7 1E 62 FC | 	wrlong	local01, fp
27f0c     1C 4E 85 F1 | 	sub	fp, #28
27f10     A7 1E 02 FB | 	rdlong	local01, fp
27f14     1C 4E 05 F1 | 	add	fp, #28
27f18     A7 FA 01 FB | 	rdlong	result1, fp
27f1c     28 4E 85 F1 | 	sub	fp, #40
27f20     0A FA 65 F0 | 	shl	result1, #10
27f24     0F FB 61 FC | 	wrlong	result1, local01
27f28     AC 00 90 FD | 	jmp	#LR__4074
27f2c                 | LR__4073
27f2c     1D 4E 05 F1 | 	add	fp, #29
27f30     A7 1E C2 FA | 	rdbyte	local01, fp
27f34     0F 1F 42 F8 | 	getnib	local01, local01, #0
27f38     05 4E 05 F1 | 	add	fp, #5
27f3c     A7 FA C1 FA | 	rdbyte	result1, fp
27f40     80 FA 05 F5 | 	and	result1, #128
27f44     07 FA C5 F0 | 	sar	result1, #7
27f48     FD 1E 02 F1 | 	add	local01, result1
27f4c     01 4E 85 F1 | 	sub	fp, #1
27f50     A7 FA C1 FA | 	rdbyte	result1, fp
27f54     03 FA 05 F5 | 	and	result1, #3
27f58     01 FA 65 F0 | 	shl	result1, #1
27f5c     FD 1E 02 F1 | 	add	local01, result1
27f60     02 1E 06 F1 | 	add	local01, #2
27f64     0D 4E 85 F1 | 	sub	fp, #13
27f68     A7 1E 42 FC | 	wrbyte	local01, fp
27f6c     0C 4E 05 F1 | 	add	fp, #12
27f70     A7 1E C2 FA | 	rdbyte	local01, fp
27f74     06 1E 46 F0 | 	shr	local01, #6
27f78     01 4E 85 F1 | 	sub	fp, #1
27f7c     A7 FA C1 FA | 	rdbyte	result1, fp
27f80     FD FA 31 F9 | 	getword	result1, result1, #0
27f84     02 FA 65 F0 | 	shl	result1, #2
27f88     FD 1E 02 F1 | 	add	local01, result1
27f8c     01 4E 85 F1 | 	sub	fp, #1
27f90     A7 FA C1 FA | 	rdbyte	result1, fp
27f94     03 FA 05 F5 | 	and	result1, #3
27f98     FD FA 31 F9 | 	getword	result1, result1, #0
27f9c     0A FA 65 F0 | 	shl	result1, #10
27fa0     FD 1E 02 F1 | 	add	local01, result1
27fa4     01 1E 06 F1 | 	add	local01, #1
27fa8     0A 4E 05 F1 | 	add	fp, #10
27fac     A7 1E 62 FC | 	wrlong	local01, fp
27fb0     1C 4E 85 F1 | 	sub	fp, #28
27fb4     A7 1E 02 FB | 	rdlong	local01, fp
27fb8     1C 4E 05 F1 | 	add	fp, #28
27fbc     A7 FA 01 FB | 	rdlong	result1, fp
27fc0     14 4E 85 F1 | 	sub	fp, #20
27fc4     A7 16 C2 FA | 	rdbyte	arg03, fp
27fc8     14 4E 85 F1 | 	sub	fp, #20
27fcc     09 16 86 F1 | 	sub	arg03, #9
27fd0     0B FB 61 F0 | 	shl	result1, arg03
27fd4     0F FB 61 FC | 	wrlong	result1, local01
27fd8                 | LR__4074
27fd8     10 4E 05 F1 | 	add	fp, #16
27fdc     A7 00 68 FC | 	wrlong	#0, fp
27fe0     10 4E 85 F1 | 	sub	fp, #16
27fe4                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
27fe4                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
27fe4                 | ' 					*(LBA_t*)buff = cs << (n - 9);
27fe4                 | ' 				}
27fe4                 | ' 				res = RES_OK;
27fe4                 | ' 			}
27fe4                 | ' 			break;
27fe4     28 00 90 FD | 	jmp	#LR__4077
27fe8                 | LR__4075
27fe8     0C 4E 05 F1 | 	add	fp, #12
27fec     A7 1E 02 FB | 	rdlong	local01, fp
27ff0     0F 01 69 FC | 	wrlong	#128, local01
27ff4     04 4E 05 F1 | 	add	fp, #4
27ff8     A7 00 68 FC | 	wrlong	#0, fp
27ffc     10 4E 85 F1 | 	sub	fp, #16
28000                 | ' 			*(DWORD*)buff = 128;
28000                 | ' 			res = RES_OK;
28000                 | ' 			break;
28000     0C 00 90 FD | 	jmp	#LR__4077
28004                 | LR__4076
28004     10 4E 05 F1 | 	add	fp, #16
28008     A7 08 68 FC | 	wrlong	#4, fp
2800c     10 4E 85 F1 | 	sub	fp, #16
28010                 | LR__4077
28010     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1126
28014                 | ' 			res = RES_PARERR;
28014                 | ' 	}
28014                 | ' 
28014                 | ' 	deselect();
28014                 | ' 
28014                 | ' 	return res;
28014     10 4E 05 F1 | 	add	fp, #16
28018     A7 FA 01 FB | 	rdlong	result1, fp
2801c     10 4E 85 F1 | 	sub	fp, #16
28020                 | LR__4078
28020     A7 F0 03 F6 | 	mov	ptra, fp
28024     B2 00 A0 FD | 	call	#popregs_
28028                 | _fatfs_cc_disk_ioctl_ret
28028     2D 00 64 FD | 	ret
2802c                 | 
2802c                 | _fatfs_cc_disk_setpins
2802c     00 12 0E F2 | 	cmp	arg01, #0 wz
28030     01 FA 65 56 |  if_ne	neg	result1, #1
28034     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
28038     01 00 00 FF 
2803c     10 E4 05 F1 | 	add	objptr, ##528
28040     F2 14 62 FC | 	wrlong	arg02, objptr
28044     04 E4 05 F1 | 	add	objptr, #4
28048     F2 16 62 FC | 	wrlong	arg03, objptr
2804c     04 E4 05 F1 | 	add	objptr, #4
28050     F2 18 62 FC | 	wrlong	arg04, objptr
28054     04 E4 05 F1 | 	add	objptr, #4
28058     F2 1A 62 FC | 	wrlong	arg05, objptr
2805c     01 00 00 FF 
28060     1C E4 85 F1 | 	sub	objptr, ##540
28064     00 FA 05 F6 | 	mov	result1, #0
28068                 | _fatfs_cc_disk_setpins_ret
28068     2D 00 64 FD | 	ret
2806c                 | 
2806c                 | _fatfs_cc_tchar2uni
2806c     09 01 02 FB | 	rdlong	_var01, arg01
28070     00 03 02 F6 | 	mov	_var02, _var01
28074     01 00 06 F1 | 	add	_var01, #1
28078     00 05 02 F6 | 	mov	_var03, _var01
2807c     01 07 C2 FA | 	rdbyte	_var04, _var02
28080     80 06 CE F7 | 	test	_var04, #128 wz
28084     E8 00 90 AD |  if_e	jmp	#LR__4087
28088     03 09 02 F6 | 	mov	_var05, _var04
2808c     E0 08 06 F5 | 	and	_var05, #224
28090     C0 08 0E F2 | 	cmp	_var05, #192 wz
28094     1F 06 06 A5 |  if_e	and	_var04, #31
28098     01 0A 06 A6 |  if_e	mov	_var06, #1
2809c     34 00 90 AD |  if_e	jmp	#LR__4081
280a0     03 09 02 F6 | 	mov	_var05, _var04
280a4     F0 08 06 F5 | 	and	_var05, #240
280a8     E0 08 0E F2 | 	cmp	_var05, #224 wz
280ac     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
280b0     02 0A 06 A6 |  if_e	mov	_var06, #2
280b4     1C 00 90 AD |  if_e	jmp	#LR__4080
280b8     03 09 02 F6 | 	mov	_var05, _var04
280bc     F8 08 06 F5 | 	and	_var05, #248
280c0     F0 08 0E F2 | 	cmp	_var05, #240 wz
280c4     07 06 06 A5 |  if_e	and	_var04, #7
280c8     03 0A 06 A6 |  if_e	mov	_var06, #3
280cc                 | ' 			return 0xFFFFFFFF;
280cc     01 FA 65 56 |  if_ne	neg	result1, #1
280d0     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
280d4                 | LR__4080
280d4                 | LR__4081
280d4                 | ' 		}
280d4                 | ' 		do {
280d4                 | LR__4082
280d4     02 0D C2 FA | 	rdbyte	_var07, _var03
280d8     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
280dc     C0 08 06 F5 | 	and	_var05, #192
280e0     80 08 0E F2 | 	cmp	_var05, #128 wz
280e4     01 04 06 F1 | 	add	_var03, #1
280e8     01 FA 65 56 |  if_ne	neg	result1, #1
280ec     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
280f0     06 06 66 F0 | 	shl	_var04, #6
280f4     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
280f8     3F 02 06 F5 | 	and	_var02, #63
280fc     01 07 42 F5 | 	or	_var04, _var02
28100     F4 0B 6E FB | 	djnz	_var06, #LR__4082
28104     80 06 16 F2 | 	cmp	_var04, #128 wc
28108     24 00 90 CD |  if_b	jmp	#LR__4084
2810c     6C 00 00 FF 
28110     00 06 16 F2 | 	cmp	_var04, ##55296 wc
28114     0C 00 90 CD |  if_b	jmp	#LR__4083
28118     70 00 00 FF 
2811c     00 06 16 F2 | 	cmp	_var04, ##57344 wc
28120     0C 00 90 CD |  if_b	jmp	#LR__4084
28124                 | LR__4083
28124     80 08 00 FF 
28128     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
2812c     08 00 90 CD |  if_b	jmp	#LR__4085
28130                 | LR__4084
28130     01 FA 65 F6 | 	neg	result1, #1
28134     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
28138                 | LR__4085
28138     80 00 00 FF 
2813c     00 06 16 F2 | 	cmp	_var04, ##65536 wc
28140     2C 00 90 CD |  if_b	jmp	#LR__4086
28144     03 03 02 F6 | 	mov	_var02, _var04
28148     80 00 00 FF 
2814c     00 02 86 F1 | 	sub	_var02, ##65536
28150     06 02 66 F0 | 	shl	_var02, #6
28154     80 FF 01 FF 
28158     00 02 06 F5 | 	and	_var02, ##67043328
2815c     6E 00 6C FF 
28160     00 08 06 F6 | 	mov	_var05, ##-671032320
28164     01 09 42 F5 | 	or	_var05, _var02
28168     09 06 46 F7 | 	zerox	_var04, #9
2816c     04 07 42 F5 | 	or	_var04, _var05
28170                 | LR__4086
28170                 | LR__4087
28170     09 05 62 FC | 	wrlong	_var03, arg01
28174                 | ' 	}
28174                 | ' #line 811 "ff.c"
28174                 | ' 	*str = p;
28174                 | ' 	return uc;
28174     03 FB 01 F6 | 	mov	result1, _var04
28178                 | _fatfs_cc_tchar2uni_ret
28178     2D 00 64 FD | 	ret
2817c                 | 
2817c                 | _fatfs_cc_put_utf
2817c     80 12 16 F2 | 	cmp	arg01, #128 wc
28180     18 00 90 3D |  if_ae	jmp	#LR__4090
28184     01 16 16 F2 | 	cmp	arg03, #1 wc
28188     00 FA 05 C6 |  if_b	mov	result1, #0
2818c     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
28190     0A 13 42 FC | 	wrbyte	arg01, arg02
28194                 | ' 		*buf = (TCHAR)chr;
28194                 | ' 		return 1;
28194     01 FA 05 F6 | 	mov	result1, #1
28198     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2819c                 | LR__4090
2819c     04 00 00 FF 
281a0     00 12 16 F2 | 	cmp	arg01, ##2048 wc
281a4     40 00 90 3D |  if_ae	jmp	#LR__4091
281a8     02 16 16 F2 | 	cmp	arg03, #2 wc
281ac     00 FA 05 C6 |  if_b	mov	result1, #0
281b0     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
281b4     09 FB 01 F6 | 	mov	result1, arg01
281b8     06 FA 45 F0 | 	shr	result1, #6
281bc     1F FA 05 F5 | 	and	result1, #31
281c0     C0 16 06 F6 | 	mov	arg03, #192
281c4     FD 16 42 F5 | 	or	arg03, result1
281c8     0A 17 42 FC | 	wrbyte	arg03, arg02
281cc     01 14 06 F1 | 	add	arg02, #1
281d0     3F 12 06 F5 | 	and	arg01, #63
281d4     80 FA 05 F6 | 	mov	result1, #128
281d8     09 FB 41 F5 | 	or	result1, arg01
281dc     0A FB 41 FC | 	wrbyte	result1, arg02
281e0                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
281e0                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
281e0                 | ' 		return 2;
281e0     02 FA 05 F6 | 	mov	result1, #2
281e4     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
281e8                 | LR__4091
281e8     80 00 00 FF 
281ec     00 12 16 F2 | 	cmp	arg01, ##65536 wc
281f0     70 00 90 3D |  if_ae	jmp	#LR__4094
281f4     03 16 16 F2 | 	cmp	arg03, #3 wc
281f8     18 00 90 CD |  if_b	jmp	#LR__4092
281fc     6C 00 00 FF 
28200     00 12 16 F2 | 	cmp	arg01, ##55296 wc
28204     14 00 90 CD |  if_b	jmp	#LR__4093
28208     70 00 00 FF 
2820c     00 12 16 F2 | 	cmp	arg01, ##57344 wc
28210     08 00 90 3D |  if_ae	jmp	#LR__4093
28214                 | LR__4092
28214     00 FA 05 F6 | 	mov	result1, #0
28218     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2821c                 | LR__4093
2821c     09 FB 59 F8 | 	getnib	result1, arg01, #3
28220     E0 16 06 F6 | 	mov	arg03, #224
28224     FD 16 42 F5 | 	or	arg03, result1
28228     0A 17 42 FC | 	wrbyte	arg03, arg02
2822c     01 14 06 F1 | 	add	arg02, #1
28230     09 FB 01 F6 | 	mov	result1, arg01
28234     06 FA 45 F0 | 	shr	result1, #6
28238     3F FA 05 F5 | 	and	result1, #63
2823c     80 16 06 F6 | 	mov	arg03, #128
28240     FD 16 42 F5 | 	or	arg03, result1
28244     0A 17 42 FC | 	wrbyte	arg03, arg02
28248     01 14 06 F1 | 	add	arg02, #1
2824c     3F 12 06 F5 | 	and	arg01, #63
28250     80 FA 05 F6 | 	mov	result1, #128
28254     09 FB 41 F5 | 	or	result1, arg01
28258     0A FB 41 FC | 	wrbyte	result1, arg02
2825c                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2825c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2825c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2825c                 | ' 		return 3;
2825c     03 FA 05 F6 | 	mov	result1, #3
28260     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
28264                 | LR__4094
28264     04 16 16 F2 | 	cmp	arg03, #4 wc
28268     00 FA 05 C6 |  if_b	mov	result1, #0
2826c     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
28270     09 01 02 F6 | 	mov	_var01, arg01
28274     E0 01 06 F4 | 	bitl	_var01, #480
28278     00 00 6C FF 
2827c     00 00 86 F1 | 	sub	_var01, ##-671088640
28280     06 00 46 F0 | 	shr	_var01, #6
28284     09 13 32 F9 | 	getword	arg01, arg01, #0
28288     6E 00 00 FF 
2828c     00 12 86 F1 | 	sub	arg01, ##56320
28290     00 08 00 FF 
28294     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
28298     02 00 00 CF 
2829c     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
282a0     00 FA 05 36 |  if_ae	mov	result1, #0
282a4     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
282a8     09 01 42 F5 | 	or	_var01, arg01
282ac     80 00 00 FF 
282b0     00 00 06 F1 | 	add	_var01, ##65536
282b4     00 FB 01 F6 | 	mov	result1, _var01
282b8     12 FA 45 F0 | 	shr	result1, #18
282bc     07 FA 05 F5 | 	and	result1, #7
282c0     F0 16 06 F6 | 	mov	arg03, #240
282c4     FD 16 42 F5 | 	or	arg03, result1
282c8     0A 17 42 FC | 	wrbyte	arg03, arg02
282cc     01 14 06 F1 | 	add	arg02, #1
282d0     00 FB 01 F6 | 	mov	result1, _var01
282d4     0C FA 45 F0 | 	shr	result1, #12
282d8     3F FA 05 F5 | 	and	result1, #63
282dc     80 16 06 F6 | 	mov	arg03, #128
282e0     FD 16 42 F5 | 	or	arg03, result1
282e4     0A 17 42 FC | 	wrbyte	arg03, arg02
282e8     01 14 06 F1 | 	add	arg02, #1
282ec     00 FB 01 F6 | 	mov	result1, _var01
282f0     06 FA 45 F0 | 	shr	result1, #6
282f4     3F FA 05 F5 | 	and	result1, #63
282f8     80 16 06 F6 | 	mov	arg03, #128
282fc     FD 16 42 F5 | 	or	arg03, result1
28300     0A 17 42 FC | 	wrbyte	arg03, arg02
28304     01 14 06 F1 | 	add	arg02, #1
28308     3F 00 06 F5 | 	and	_var01, #63
2830c     80 FA 05 F6 | 	mov	result1, #128
28310     00 FB 41 F5 | 	or	result1, _var01
28314     0A FB 41 FC | 	wrbyte	result1, arg02
28318                 | ' 	chr = (hc | chr) + 0x10000;
28318                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
28318                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
28318                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
28318                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
28318                 | ' 	return 4;
28318     04 FA 05 F6 | 	mov	result1, #4
2831c                 | _fatfs_cc_put_utf_ret
2831c     2D 00 64 FD | 	ret
28320                 | 
28320                 | _fatfs_cc_sync_window
28320     02 4A 05 F6 | 	mov	COUNT_, #2
28324     A8 00 A0 FD | 	call	#pushregs_
28328     09 1F 02 F6 | 	mov	local01, arg01
2832c     00 20 06 F6 | 	mov	local02, #0
28330     03 1E 06 F1 | 	add	local01, #3
28334     0F FB C9 FA | 	rdbyte	result1, local01 wz
28338     03 1E 86 F1 | 	sub	local01, #3
2833c     A4 00 90 AD |  if_e	jmp	#LR__4102
28340     01 1E 06 F1 | 	add	local01, #1
28344     0F 13 C2 FA | 	rdbyte	arg01, local01
28348     33 1E 06 F1 | 	add	local01, #51
2834c     0F 15 02 F6 | 	mov	arg02, local01
28350     04 1E 86 F1 | 	sub	local01, #4
28354     0F 17 02 FB | 	rdlong	arg03, local01
28358     30 1E 86 F1 | 	sub	local01, #48
2835c     01 18 06 F6 | 	mov	arg04, #1
28360     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
28364     00 FA 0D F2 | 	cmp	result1, #0 wz
28368     74 00 90 5D |  if_ne	jmp	#LR__4100
2836c     03 1E 06 F1 | 	add	local01, #3
28370     0F 01 48 FC | 	wrbyte	#0, local01
28374     2D 1E 06 F1 | 	add	local01, #45
28378     0F FB 01 FB | 	rdlong	result1, local01
2837c     0C 1E 86 F1 | 	sub	local01, #12
28380     0F 19 02 FB | 	rdlong	arg04, local01
28384     0C FB 81 F1 | 	sub	result1, arg04
28388     08 1E 86 F1 | 	sub	local01, #8
2838c     0F 19 02 FB | 	rdlong	arg04, local01
28390     1C 1E 86 F1 | 	sub	local01, #28
28394     0C FB 11 F2 | 	cmp	result1, arg04 wc
28398     48 00 90 3D |  if_ae	jmp	#LR__4101
2839c     02 1E 06 F1 | 	add	local01, #2
283a0     0F 19 C2 FA | 	rdbyte	arg04, local01
283a4     02 1E 86 F1 | 	sub	local01, #2
283a8     02 18 0E F2 | 	cmp	arg04, #2 wz
283ac     34 00 90 5D |  if_ne	jmp	#LR__4101
283b0     01 1E 06 F1 | 	add	local01, #1
283b4     0F 13 C2 FA | 	rdbyte	arg01, local01
283b8     33 1E 06 F1 | 	add	local01, #51
283bc     0F 15 02 F6 | 	mov	arg02, local01
283c0     04 1E 86 F1 | 	sub	local01, #4
283c4     0F 17 02 FB | 	rdlong	arg03, local01
283c8     14 1E 86 F1 | 	sub	local01, #20
283cc     0F 1F 02 FB | 	rdlong	local01, local01
283d0     0F 17 02 F1 | 	add	arg03, local01
283d4     01 18 06 F6 | 	mov	arg04, #1
283d8     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
283dc     04 00 90 FD | 	jmp	#LR__4101
283e0                 | LR__4100
283e0     01 20 06 F6 | 	mov	local02, #1
283e4                 | LR__4101
283e4                 | LR__4102
283e4                 | ' 			res = FR_DISK_ERR;
283e4                 | ' 		}
283e4                 | ' 	}
283e4                 | ' 	return res;
283e4     10 FB 01 F6 | 	mov	result1, local02
283e8     A7 F0 03 F6 | 	mov	ptra, fp
283ec     B2 00 A0 FD | 	call	#popregs_
283f0                 | _fatfs_cc_sync_window_ret
283f0     2D 00 64 FD | 	ret
283f4                 | 
283f4                 | _fatfs_cc_move_window
283f4     03 4A 05 F6 | 	mov	COUNT_, #3
283f8     A8 00 A0 FD | 	call	#pushregs_
283fc     09 1F 02 F6 | 	mov	local01, arg01
28400     0A 21 02 F6 | 	mov	local02, arg02
28404     00 22 06 F6 | 	mov	local03, #0
28408     30 1E 06 F1 | 	add	local01, #48
2840c     0F 19 02 FB | 	rdlong	arg04, local01
28410     30 1E 86 F1 | 	sub	local01, #48
28414     0C 21 0A F2 | 	cmp	local02, arg04 wz
28418     40 00 90 AD |  if_e	jmp	#LR__4111
2841c     0F 13 02 F6 | 	mov	arg01, local01
28420     FC FE BF FD | 	call	#_fatfs_cc_sync_window
28424     FD 22 0A F6 | 	mov	local03, result1 wz
28428     30 00 90 5D |  if_ne	jmp	#LR__4110
2842c     01 1E 06 F1 | 	add	local01, #1
28430     0F 13 C2 FA | 	rdbyte	arg01, local01
28434     33 1E 06 F1 | 	add	local01, #51
28438     0F 15 02 F6 | 	mov	arg02, local01
2843c     10 17 02 F6 | 	mov	arg03, local02
28440     01 18 06 F6 | 	mov	arg04, #1
28444     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
28448     00 FA 0D F2 | 	cmp	result1, #0 wz
2844c     01 20 66 56 |  if_ne	neg	local02, #1
28450     01 22 06 56 |  if_ne	mov	local03, #1
28454     04 1E 86 F1 | 	sub	local01, #4
28458     0F 21 62 FC | 	wrlong	local02, local01
2845c                 | LR__4110
2845c                 | LR__4111
2845c                 | ' 				sect = (LBA_t)0 - 1;
2845c                 | ' 				res = FR_DISK_ERR;
2845c                 | ' 			}
2845c                 | ' 			fs->winsect = sect;
2845c                 | ' 		}
2845c                 | ' 	}
2845c                 | ' 	return res;
2845c     11 FB 01 F6 | 	mov	result1, local03
28460     A7 F0 03 F6 | 	mov	ptra, fp
28464     B2 00 A0 FD | 	call	#popregs_
28468                 | _fatfs_cc_move_window_ret
28468     2D 00 64 FD | 	ret
2846c                 | 
2846c                 | _fatfs_cc_sync_fs
2846c     02 4A 05 F6 | 	mov	COUNT_, #2
28470     A8 00 A0 FD | 	call	#pushregs_
28474     09 1F 02 F6 | 	mov	local01, arg01
28478     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2847c     FD 20 0A F6 | 	mov	local02, result1 wz
28480     D8 00 90 5D |  if_ne	jmp	#LR__4121
28484     0F 19 C2 FA | 	rdbyte	arg04, local01
28488     03 18 0E F2 | 	cmp	arg04, #3 wz
2848c     04 1E 06 A1 |  if_e	add	local01, #4
28490     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
28494     04 1E 86 A1 |  if_e	sub	local01, #4
28498     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
2849c     A0 00 90 5D |  if_ne	jmp	#LR__4120
284a0     34 1E 06 F1 | 	add	local01, #52
284a4     0F 13 02 F6 | 	mov	arg01, local01
284a8     00 14 06 F6 | 	mov	arg02, #0
284ac     09 16 C6 F9 | 	decod	arg03, #9
284b0     98 00 A0 FD | 	call	#\builtin_bytefill_
284b4     0F 13 02 F6 | 	mov	arg01, local01
284b8     FE 13 06 F1 | 	add	arg01, #510
284bc     55 00 80 FF 
284c0     09 AB 58 FC | 	wrword	##43605, arg01
284c4     A9 B0 A0 FF 
284c8     0F A5 68 FC | 	wrlong	##1096897106, local01
284cc     0F 13 02 F6 | 	mov	arg01, local01
284d0     E4 13 06 F1 | 	add	arg01, #484
284d4     B9 A0 B0 FF 
284d8     09 E5 68 FC | 	wrlong	##1631679090, arg01
284dc     0F 13 02 F6 | 	mov	arg01, local01
284e0     E8 13 06 F1 | 	add	arg01, #488
284e4     20 1E 86 F1 | 	sub	local01, #32
284e8     0F 15 02 FB | 	rdlong	arg02, local01
284ec     09 15 62 FC | 	wrlong	arg02, arg01
284f0     20 1E 06 F1 | 	add	local01, #32
284f4     0F 13 02 F6 | 	mov	arg01, local01
284f8     EC 13 06 F1 | 	add	arg01, #492
284fc     24 1E 86 F1 | 	sub	local01, #36
28500     0F 15 02 FB | 	rdlong	arg02, local01
28504     09 15 62 FC | 	wrlong	arg02, arg01
28508     10 1E 06 F1 | 	add	local01, #16
2850c     0F 17 02 FB | 	rdlong	arg03, local01
28510     01 16 06 F1 | 	add	arg03, #1
28514     10 1E 06 F1 | 	add	local01, #16
28518     0F 17 62 FC | 	wrlong	arg03, local01
2851c     2F 1E 86 F1 | 	sub	local01, #47
28520     0F 13 C2 FA | 	rdbyte	arg01, local01
28524     33 1E 06 F1 | 	add	local01, #51
28528     0F 15 02 F6 | 	mov	arg02, local01
2852c     01 18 06 F6 | 	mov	arg04, #1
28530     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
28534     30 1E 86 F1 | 	sub	local01, #48
28538     0F 01 48 FC | 	wrbyte	#0, local01
2853c     04 1E 86 F1 | 	sub	local01, #4
28540                 | LR__4120
28540     01 1E 06 F1 | 	add	local01, #1
28544     0F 13 C2 FA | 	rdbyte	arg01, local01
28548     00 14 06 F6 | 	mov	arg02, #0
2854c     00 16 06 F6 | 	mov	arg03, #0
28550     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
28554     00 FA 0D F2 | 	cmp	result1, #0 wz
28558     01 20 06 56 |  if_ne	mov	local02, #1
2855c                 | LR__4121
2855c                 | ' 	}
2855c                 | ' 
2855c                 | ' 	return res;
2855c     10 FB 01 F6 | 	mov	result1, local02
28560     A7 F0 03 F6 | 	mov	ptra, fp
28564     B2 00 A0 FD | 	call	#popregs_
28568                 | _fatfs_cc_sync_fs_ret
28568     2D 00 64 FD | 	ret
2856c                 | 
2856c                 | _fatfs_cc_clst2sect
2856c     02 14 86 F1 | 	sub	arg02, #2
28570     18 12 06 F1 | 	add	arg01, #24
28574     09 01 02 FB | 	rdlong	_var01, arg01
28578     18 12 86 F1 | 	sub	arg01, #24
2857c     02 00 86 F1 | 	sub	_var01, #2
28580     00 15 12 F2 | 	cmp	arg02, _var01 wc
28584     00 FA 05 36 |  if_ae	mov	result1, #0
28588     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2858c     0A 12 06 F1 | 	add	arg01, #10
28590     09 01 E2 FA | 	rdword	_var01, arg01
28594     0A 01 02 FD | 	qmul	_var01, arg02
28598                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
28598     22 12 06 F1 | 	add	arg01, #34
2859c     09 FB 01 FB | 	rdlong	result1, arg01
285a0     18 00 62 FD | 	getqx	_var01
285a4     00 FB 01 F1 | 	add	result1, _var01
285a8                 | _fatfs_cc_clst2sect_ret
285a8     2D 00 64 FD | 	ret
285ac                 | 
285ac                 | _fatfs_cc_get_fat
285ac     07 4A 05 F6 | 	mov	COUNT_, #7
285b0     A8 00 A0 FD | 	call	#pushregs_
285b4     0A 1F 02 F6 | 	mov	local01, arg02
285b8     09 21 02 FB | 	rdlong	local02, arg01
285bc     02 1E 16 F2 | 	cmp	local01, #2 wc
285c0     14 00 90 CD |  if_b	jmp	#LR__4130
285c4     18 20 06 F1 | 	add	local02, #24
285c8     10 23 02 FB | 	rdlong	local03, local02
285cc     18 20 86 F1 | 	sub	local02, #24
285d0     11 1F 12 F2 | 	cmp	local01, local03 wc
285d4     08 00 90 CD |  if_b	jmp	#LR__4131
285d8                 | LR__4130
285d8     01 24 06 F6 | 	mov	local04, #1
285dc     60 01 90 FD | 	jmp	#LR__4138
285e0                 | LR__4131
285e0     01 24 66 F6 | 	neg	local04, #1
285e4                 | ' 		val = 0xFFFFFFFF;
285e4                 | ' 
285e4                 | ' 		switch (fs->fs_type) {
285e4     10 27 C2 FA | 	rdbyte	local05, local02
285e8     01 26 86 F1 | 	sub	local05, #1
285ec     03 26 26 F3 | 	fle	local05, #3
285f0     30 26 62 FD | 	jmprel	local05
285f4                 | LR__4132
285f4     0C 00 90 FD | 	jmp	#LR__4133
285f8     B8 00 90 FD | 	jmp	#LR__4134
285fc     F8 00 90 FD | 	jmp	#LR__4135
28600     38 01 90 FD | 	jmp	#LR__4136
28604                 | LR__4133
28604     0F 27 02 F6 | 	mov	local05, local01
28608     0F 13 02 F6 | 	mov	arg01, local01
2860c     01 12 46 F0 | 	shr	arg01, #1
28610     09 27 02 F1 | 	add	local05, arg01
28614     10 13 02 F6 | 	mov	arg01, local02
28618     13 29 02 F6 | 	mov	local06, local05
2861c     09 28 46 F0 | 	shr	local06, #9
28620     24 20 06 F1 | 	add	local02, #36
28624     10 15 02 FB | 	rdlong	arg02, local02
28628     24 20 86 F1 | 	sub	local02, #36
2862c     14 15 02 F1 | 	add	arg02, local06
28630     C0 FD BF FD | 	call	#_fatfs_cc_move_window
28634     00 FA 0D F2 | 	cmp	result1, #0 wz
28638     04 01 90 5D |  if_ne	jmp	#LR__4137
2863c     13 29 02 F6 | 	mov	local06, local05
28640     FF 29 06 F5 | 	and	local06, #511
28644     34 20 06 F1 | 	add	local02, #52
28648     10 29 02 F1 | 	add	local06, local02
2864c     14 2B C2 FA | 	rdbyte	local07, local06
28650     34 20 86 F1 | 	sub	local02, #52
28654     10 13 02 F6 | 	mov	arg01, local02
28658     01 26 06 F1 | 	add	local05, #1
2865c     13 29 02 F6 | 	mov	local06, local05
28660     09 28 46 F0 | 	shr	local06, #9
28664     24 20 06 F1 | 	add	local02, #36
28668     10 15 02 FB | 	rdlong	arg02, local02
2866c     24 20 86 F1 | 	sub	local02, #36
28670     14 15 02 F1 | 	add	arg02, local06
28674     7C FD BF FD | 	call	#_fatfs_cc_move_window
28678     00 FA 0D F2 | 	cmp	result1, #0 wz
2867c     C0 00 90 5D |  if_ne	jmp	#LR__4137
28680     FF 27 06 F5 | 	and	local05, #511
28684     34 20 06 F1 | 	add	local02, #52
28688     10 27 02 F1 | 	add	local05, local02
2868c     13 29 C2 FA | 	rdbyte	local06, local05
28690     08 28 66 F0 | 	shl	local06, #8
28694     14 2B 42 F5 | 	or	local07, local06
28698     01 1E CE F7 | 	test	local01, #1 wz
2869c     04 2A 46 50 |  if_ne	shr	local07, #4
286a0     15 23 02 56 |  if_ne	mov	local03, local07
286a4     0B 2A 46 A7 |  if_e	zerox	local07, #11
286a8     15 23 02 A6 |  if_e	mov	local03, local07
286ac     11 25 02 F6 | 	mov	local04, local03
286b0                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
286b0                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
286b0                 | ' 			break;
286b0     8C 00 90 FD | 	jmp	#LR__4137
286b4                 | LR__4134
286b4     10 13 02 F6 | 	mov	arg01, local02
286b8     0F 29 02 F6 | 	mov	local06, local01
286bc     08 28 46 F0 | 	shr	local06, #8
286c0     24 20 06 F1 | 	add	local02, #36
286c4     10 15 02 FB | 	rdlong	arg02, local02
286c8     24 20 86 F1 | 	sub	local02, #36
286cc     14 15 02 F1 | 	add	arg02, local06
286d0     20 FD BF FD | 	call	#_fatfs_cc_move_window
286d4     00 FA 0D F2 | 	cmp	result1, #0 wz
286d8     64 00 90 5D |  if_ne	jmp	#LR__4137
286dc     34 20 06 F1 | 	add	local02, #52
286e0     01 1E 66 F0 | 	shl	local01, #1
286e4     FF 1F 06 F5 | 	and	local01, #511
286e8     0F 21 02 F1 | 	add	local02, local01
286ec                 | ' {
286ec                 | ' 
286ec                 | ' 	return *((WORD*)ptr);
286ec     10 FB E1 FA | 	rdword	result1, local02
286f0     FD 24 32 F9 | 	getword	local04, result1, #0
286f4                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
286f4                 | ' 			break;
286f4     48 00 90 FD | 	jmp	#LR__4137
286f8                 | LR__4135
286f8     10 13 02 F6 | 	mov	arg01, local02
286fc     0F 29 02 F6 | 	mov	local06, local01
28700     07 28 46 F0 | 	shr	local06, #7
28704     24 20 06 F1 | 	add	local02, #36
28708     10 15 02 FB | 	rdlong	arg02, local02
2870c     24 20 86 F1 | 	sub	local02, #36
28710     14 15 02 F1 | 	add	arg02, local06
28714     DC FC BF FD | 	call	#_fatfs_cc_move_window
28718     00 FA 0D F2 | 	cmp	result1, #0 wz
2871c     20 00 90 5D |  if_ne	jmp	#LR__4137
28720     34 20 06 F1 | 	add	local02, #52
28724     02 1E 66 F0 | 	shl	local01, #2
28728     FF 1F 06 F5 | 	and	local01, #511
2872c     0F 21 02 F1 | 	add	local02, local01
28730                 | ' {
28730                 | ' 
28730                 | ' 	return *((DWORD*)ptr);
28730     10 25 02 FB | 	rdlong	local04, local02
28734     7C 24 06 F4 | 	bitl	local04, #124
28738                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
28738                 | ' 			break;
28738     04 00 90 FD | 	jmp	#LR__4137
2873c                 | LR__4136
2873c     01 24 06 F6 | 	mov	local04, #1
28740                 | LR__4137
28740                 | LR__4138
28740                 | ' 			val = 1;
28740                 | ' 		}
28740                 | ' 	}
28740                 | ' 
28740                 | ' 	return val;
28740     12 FB 01 F6 | 	mov	result1, local04
28744     A7 F0 03 F6 | 	mov	ptra, fp
28748     B2 00 A0 FD | 	call	#popregs_
2874c                 | _fatfs_cc_get_fat_ret
2874c     2D 00 64 FD | 	ret
28750                 | 
28750                 | _fatfs_cc_put_fat
28750     08 4A 05 F6 | 	mov	COUNT_, #8
28754     A8 00 A0 FD | 	call	#pushregs_
28758     09 1F 02 F6 | 	mov	local01, arg01
2875c     0A 21 02 F6 | 	mov	local02, arg02
28760     0B 23 02 F6 | 	mov	local03, arg03
28764     02 24 06 F6 | 	mov	local04, #2
28768     02 20 16 F2 | 	cmp	local02, #2 wc
2876c     E0 01 90 CD |  if_b	jmp	#LR__4147
28770     18 1E 06 F1 | 	add	local01, #24
28774     0F 27 02 FB | 	rdlong	local05, local01
28778     18 1E 86 F1 | 	sub	local01, #24
2877c     13 21 12 F2 | 	cmp	local02, local05 wc
28780     CC 01 90 3D |  if_ae	jmp	#LR__4147
28784                 | ' 		switch (fs->fs_type) {
28784     0F 29 C2 FA | 	rdbyte	local06, local01
28788     01 28 86 F1 | 	sub	local06, #1
2878c     03 28 26 F3 | 	fle	local06, #3
28790     30 28 62 FD | 	jmprel	local06
28794                 | LR__4140
28794     0C 00 90 FD | 	jmp	#LR__4141
28798     F8 00 90 FD | 	jmp	#LR__4144
2879c     40 01 90 FD | 	jmp	#LR__4145
287a0     AC 01 90 FD | 	jmp	#LR__4146
287a4                 | LR__4141
287a4     10 2B 02 F6 | 	mov	local07, local02
287a8     10 27 02 F6 | 	mov	local05, local02
287ac     01 26 46 F0 | 	shr	local05, #1
287b0     13 2B 02 F1 | 	add	local07, local05
287b4     0F 13 02 F6 | 	mov	arg01, local01
287b8     15 29 02 F6 | 	mov	local06, local07
287bc     09 28 46 F0 | 	shr	local06, #9
287c0     24 1E 06 F1 | 	add	local01, #36
287c4     0F 15 02 FB | 	rdlong	arg02, local01
287c8     24 1E 86 F1 | 	sub	local01, #36
287cc     14 15 02 F1 | 	add	arg02, local06
287d0     20 FC BF FD | 	call	#_fatfs_cc_move_window
287d4     FD 24 0A F6 | 	mov	local04, result1 wz
287d8     74 01 90 5D |  if_ne	jmp	#LR__4146
287dc     34 1E 06 F1 | 	add	local01, #52
287e0     0F 2D 02 F6 | 	mov	local08, local01
287e4     15 27 02 F6 | 	mov	local05, local07
287e8     FF 27 06 F5 | 	and	local05, #511
287ec     13 2D 02 F1 | 	add	local08, local05
287f0     01 20 CE F7 | 	test	local02, #1 wz
287f4     34 1E 86 F1 | 	sub	local01, #52
287f8     01 2A 06 F1 | 	add	local07, #1
287fc     18 00 90 AD |  if_e	jmp	#LR__4142
28800     16 27 C2 FA | 	rdbyte	local05, local08
28804     13 27 42 F8 | 	getnib	local05, local05, #0
28808     11 29 E2 F8 | 	getbyte	local06, local03, #0
2880c     04 28 66 F0 | 	shl	local06, #4
28810     14 27 42 F5 | 	or	local05, local06
28814     04 00 90 FD | 	jmp	#LR__4143
28818                 | LR__4142
28818     11 27 02 F6 | 	mov	local05, local03
2881c                 | LR__4143
2881c     16 27 42 FC | 	wrbyte	local05, local08
28820     03 1E 06 F1 | 	add	local01, #3
28824     0F 03 48 FC | 	wrbyte	#1, local01
28828     03 1E 86 F1 | 	sub	local01, #3
2882c     0F 13 02 F6 | 	mov	arg01, local01
28830     15 2D 02 F6 | 	mov	local08, local07
28834     09 2C 46 F0 | 	shr	local08, #9
28838     24 1E 06 F1 | 	add	local01, #36
2883c     0F 15 02 FB | 	rdlong	arg02, local01
28840     24 1E 86 F1 | 	sub	local01, #36
28844     16 15 02 F1 | 	add	arg02, local08
28848     A8 FB BF FD | 	call	#_fatfs_cc_move_window
2884c     FD 24 0A F6 | 	mov	local04, result1 wz
28850     FC 00 90 5D |  if_ne	jmp	#LR__4146
28854     34 1E 06 F1 | 	add	local01, #52
28858     0F 2D 02 F6 | 	mov	local08, local01
2885c     FF 2B 06 F5 | 	and	local07, #511
28860     15 2D 02 F1 | 	add	local08, local07
28864     01 20 CE F7 | 	test	local02, #1 wz
28868     04 22 46 50 |  if_ne	shr	local03, #4
2886c     11 27 02 56 |  if_ne	mov	local05, local03
28870     16 27 C2 AA |  if_e	rdbyte	local05, local08
28874     F0 26 06 A5 |  if_e	and	local05, #240
28878     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
2887c     11 23 42 A8 |  if_e	getnib	local03, local03, #0
28880     11 27 42 A5 |  if_e	or	local05, local03
28884     16 27 42 FC | 	wrbyte	local05, local08
28888     31 1E 86 F1 | 	sub	local01, #49
2888c     0F 03 48 FC | 	wrbyte	#1, local01
28890                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
28890                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
28890                 | ' 			fs->wflag = 1;
28890                 | ' 			break;
28890     BC 00 90 FD | 	jmp	#LR__4146
28894                 | LR__4144
28894     0F 13 02 F6 | 	mov	arg01, local01
28898     10 2D 02 F6 | 	mov	local08, local02
2889c     08 2C 46 F0 | 	shr	local08, #8
288a0     24 1E 06 F1 | 	add	local01, #36
288a4     0F 15 02 FB | 	rdlong	arg02, local01
288a8     24 1E 86 F1 | 	sub	local01, #36
288ac     16 15 02 F1 | 	add	arg02, local08
288b0     40 FB BF FD | 	call	#_fatfs_cc_move_window
288b4     FD 24 0A F6 | 	mov	local04, result1 wz
288b8     94 00 90 5D |  if_ne	jmp	#LR__4146
288bc     34 1E 06 F1 | 	add	local01, #52
288c0     0F 13 02 F6 | 	mov	arg01, local01
288c4     01 20 66 F0 | 	shl	local02, #1
288c8     FF 21 06 F5 | 	and	local02, #511
288cc     10 13 02 F1 | 	add	arg01, local02
288d0     09 23 52 FC | 	wrword	local03, arg01
288d4     31 1E 86 F1 | 	sub	local01, #49
288d8     0F 03 48 FC | 	wrbyte	#1, local01
288dc                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
288dc                 | ' 			fs->wflag = 1;
288dc                 | ' 			break;
288dc     70 00 90 FD | 	jmp	#LR__4146
288e0                 | LR__4145
288e0     0F 13 02 F6 | 	mov	arg01, local01
288e4     10 2D 02 F6 | 	mov	local08, local02
288e8     07 2C 46 F0 | 	shr	local08, #7
288ec     24 1E 06 F1 | 	add	local01, #36
288f0     0F 15 02 FB | 	rdlong	arg02, local01
288f4     24 1E 86 F1 | 	sub	local01, #36
288f8     16 15 02 F1 | 	add	arg02, local08
288fc     F4 FA BF FD | 	call	#_fatfs_cc_move_window
28900     FD 24 0A F6 | 	mov	local04, result1 wz
28904     48 00 90 5D |  if_ne	jmp	#LR__4146
28908     7C 22 06 F4 | 	bitl	local03, #124
2890c     34 1E 06 F1 | 	add	local01, #52
28910     10 2D 02 F6 | 	mov	local08, local02
28914     02 2C 66 F0 | 	shl	local08, #2
28918     FF 2D 06 F5 | 	and	local08, #511
2891c     0F 13 02 F6 | 	mov	arg01, local01
28920     16 13 02 F1 | 	add	arg01, local08
28924                 | ' {
28924                 | ' 
28924                 | ' 	return *((DWORD*)ptr);
28924     09 2D 02 FB | 	rdlong	local08, arg01
28928     00 00 78 FF 
2892c     00 2C 06 F5 | 	and	local08, ##-268435456
28930     16 23 42 F5 | 	or	local03, local08
28934     0F 13 02 F6 | 	mov	arg01, local01
28938     02 20 66 F0 | 	shl	local02, #2
2893c     FF 21 06 F5 | 	and	local02, #511
28940     10 13 02 F1 | 	add	arg01, local02
28944     09 23 62 FC | 	wrlong	local03, arg01
28948     31 1E 86 F1 | 	sub	local01, #49
2894c     0F 03 48 FC | 	wrbyte	#1, local01
28950                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
28950                 | ' 			}
28950                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
28950                 | ' 			fs->wflag = 1;
28950                 | ' 			break;
28950                 | LR__4146
28950                 | LR__4147
28950                 | ' 		}
28950                 | ' 	}
28950                 | ' 	return res;
28950     12 FB 01 F6 | 	mov	result1, local04
28954     A7 F0 03 F6 | 	mov	ptra, fp
28958     B2 00 A0 FD | 	call	#popregs_
2895c                 | _fatfs_cc_put_fat_ret
2895c     2D 00 64 FD | 	ret
28960                 | 
28960                 | _fatfs_cc_remove_chain
28960     05 4A 05 F6 | 	mov	COUNT_, #5
28964     A8 00 A0 FD | 	call	#pushregs_
28968     09 1F 02 F6 | 	mov	local01, arg01
2896c     0A 21 02 F6 | 	mov	local02, arg02
28970     0B 23 02 F6 | 	mov	local03, arg03
28974     0F 25 02 FB | 	rdlong	local04, local01
28978     02 20 16 F2 | 	cmp	local02, #2 wc
2897c     14 00 90 CD |  if_b	jmp	#LR__4150
28980     18 24 06 F1 | 	add	local04, #24
28984     12 FB 01 FB | 	rdlong	result1, local04
28988     18 24 86 F1 | 	sub	local04, #24
2898c     FD 20 12 F2 | 	cmp	local02, result1 wc
28990     08 00 90 CD |  if_b	jmp	#LR__4151
28994                 | LR__4150
28994     02 FA 05 F6 | 	mov	result1, #2
28998     CC 00 90 FD | 	jmp	#LR__4156
2899c                 | LR__4151
2899c     00 22 0E F2 | 	cmp	local03, #0 wz
289a0     18 00 90 AD |  if_e	jmp	#LR__4152
289a4     11 15 02 F6 | 	mov	arg02, local03
289a8     12 13 02 F6 | 	mov	arg01, local04
289ac     01 16 66 F6 | 	neg	arg03, #1
289b0     9C FD BF FD | 	call	#_fatfs_cc_put_fat
289b4     00 FA 0D F2 | 	cmp	result1, #0 wz
289b8     AC 00 90 5D |  if_ne	jmp	#LR__4156
289bc                 | LR__4152
289bc                 | ' 	}
289bc                 | ' 
289bc                 | ' 
289bc                 | ' 	do {
289bc                 | LR__4153
289bc     10 15 02 F6 | 	mov	arg02, local02
289c0     0F 13 02 F6 | 	mov	arg01, local01
289c4     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
289c8     FD 26 0A F6 | 	mov	local05, result1 wz
289cc     94 00 90 AD |  if_e	jmp	#LR__4155
289d0     01 26 0E F2 | 	cmp	local05, #1 wz
289d4     02 FA 05 A6 |  if_e	mov	result1, #2
289d8     8C 00 90 AD |  if_e	jmp	#LR__4156
289dc     FF FF 7F FF 
289e0     FF 27 0E F2 | 	cmp	local05, ##-1 wz
289e4     01 FA 05 A6 |  if_e	mov	result1, #1
289e8     7C 00 90 AD |  if_e	jmp	#LR__4156
289ec     10 15 02 F6 | 	mov	arg02, local02
289f0     12 13 02 F6 | 	mov	arg01, local04
289f4     00 16 06 F6 | 	mov	arg03, #0
289f8     54 FD BF FD | 	call	#_fatfs_cc_put_fat
289fc     FD 22 0A F6 | 	mov	local03, result1 wz
28a00     11 FB 01 56 |  if_ne	mov	result1, local03
28a04     60 00 90 5D |  if_ne	jmp	#LR__4156
28a08     18 24 06 F1 | 	add	local04, #24
28a0c     12 23 02 FB | 	rdlong	local03, local04
28a10     02 22 86 F1 | 	sub	local03, #2
28a14     04 24 86 F1 | 	sub	local04, #4
28a18     12 21 02 FB | 	rdlong	local02, local04
28a1c     14 24 86 F1 | 	sub	local04, #20
28a20     11 21 12 F2 | 	cmp	local02, local03 wc
28a24     24 00 90 3D |  if_ae	jmp	#LR__4154
28a28     14 24 06 F1 | 	add	local04, #20
28a2c     12 23 02 FB | 	rdlong	local03, local04
28a30     01 22 06 F1 | 	add	local03, #1
28a34     12 23 62 FC | 	wrlong	local03, local04
28a38     10 24 86 F1 | 	sub	local04, #16
28a3c     12 23 C2 FA | 	rdbyte	local03, local04
28a40     01 22 46 F5 | 	or	local03, #1
28a44     12 23 42 FC | 	wrbyte	local03, local04
28a48     04 24 86 F1 | 	sub	local04, #4
28a4c                 | LR__4154
28a4c     13 21 02 F6 | 	mov	local02, local05
28a50     18 24 06 F1 | 	add	local04, #24
28a54     12 27 02 FB | 	rdlong	local05, local04
28a58     18 24 86 F1 | 	sub	local04, #24
28a5c     13 21 12 F2 | 	cmp	local02, local05 wc
28a60     58 FF 9F CD |  if_b	jmp	#LR__4153
28a64                 | LR__4155
28a64                 | ' #line 1500 "ff.c"
28a64                 | ' 	return FR_OK;
28a64     00 FA 05 F6 | 	mov	result1, #0
28a68                 | LR__4156
28a68     A7 F0 03 F6 | 	mov	ptra, fp
28a6c     B2 00 A0 FD | 	call	#popregs_
28a70                 | _fatfs_cc_remove_chain_ret
28a70     2D 00 64 FD | 	ret
28a74                 | 
28a74                 | _fatfs_cc_create_chain
28a74     09 4A 05 F6 | 	mov	COUNT_, #9
28a78     A8 00 A0 FD | 	call	#pushregs_
28a7c     09 1F 02 F6 | 	mov	local01, arg01
28a80     0A 21 0A F6 | 	mov	local02, arg02 wz
28a84     0F 23 02 FB | 	rdlong	local03, local01
28a88     28 00 90 5D |  if_ne	jmp	#LR__4160
28a8c     10 22 06 F1 | 	add	local03, #16
28a90     11 25 0A FB | 	rdlong	local04, local03 wz
28a94     10 22 86 F1 | 	sub	local03, #16
28a98     18 22 06 51 |  if_ne	add	local03, #24
28a9c     11 27 02 5B |  if_ne	rdlong	local05, local03
28aa0     18 22 86 51 |  if_ne	sub	local03, #24
28aa4     13 25 12 52 |  if_ne	cmp	local04, local05 wc
28aa8     50 00 90 4D |  if_c_and_nz	jmp	#LR__4161
28aac     01 24 06 F6 | 	mov	local04, #1
28ab0     48 00 90 FD | 	jmp	#LR__4161
28ab4                 | LR__4160
28ab4     10 15 02 F6 | 	mov	arg02, local02
28ab8     0F 13 02 F6 | 	mov	arg01, local01
28abc     EC FA BF FD | 	call	#_fatfs_cc_get_fat
28ac0     FD 24 02 F6 | 	mov	local04, result1
28ac4     02 24 16 F2 | 	cmp	local04, #2 wc
28ac8     01 FA 05 C6 |  if_b	mov	result1, #1
28acc     BC 01 90 CD |  if_b	jmp	#LR__4171
28ad0     FF FF 7F FF 
28ad4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
28ad8     12 FB 01 A6 |  if_e	mov	result1, local04
28adc     AC 01 90 AD |  if_e	jmp	#LR__4171
28ae0     18 22 06 F1 | 	add	local03, #24
28ae4     11 27 02 FB | 	rdlong	local05, local03
28ae8     18 22 86 F1 | 	sub	local03, #24
28aec     13 25 12 F2 | 	cmp	local04, local05 wc
28af0     12 FB 01 C6 |  if_b	mov	result1, local04
28af4     94 01 90 CD |  if_b	jmp	#LR__4171
28af8     10 25 02 F6 | 	mov	local04, local02
28afc                 | LR__4161
28afc     14 22 06 F1 | 	add	local03, #20
28b00     11 27 0A FB | 	rdlong	local05, local03 wz
28b04     14 22 86 F1 | 	sub	local03, #20
28b08     00 FA 05 A6 |  if_e	mov	result1, #0
28b0c     7C 01 90 AD |  if_e	jmp	#LR__4171
28b10     00 28 06 F6 | 	mov	local06, #0
28b14     10 25 0A F2 | 	cmp	local04, local02 wz
28b18     74 00 90 5D |  if_ne	jmp	#LR__4164
28b1c     12 29 02 F6 | 	mov	local06, local04
28b20     01 28 06 F1 | 	add	local06, #1
28b24     18 22 06 F1 | 	add	local03, #24
28b28     11 27 02 FB | 	rdlong	local05, local03
28b2c     18 22 86 F1 | 	sub	local03, #24
28b30     13 29 12 F2 | 	cmp	local06, local05 wc
28b34     02 28 06 36 |  if_ae	mov	local06, #2
28b38     14 15 02 F6 | 	mov	arg02, local06
28b3c     0F 13 02 F6 | 	mov	arg01, local01
28b40     68 FA BF FD | 	call	#_fatfs_cc_get_fat
28b44     FD 26 02 F6 | 	mov	local05, result1
28b48     01 26 0E F2 | 	cmp	local05, #1 wz
28b4c     FF FF 7F 5F 
28b50     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
28b54     13 FB 01 A6 |  if_e	mov	result1, local05
28b58     30 01 90 AD |  if_e	jmp	#LR__4171
28b5c     00 26 0E F2 | 	cmp	local05, #0 wz
28b60     2C 00 90 AD |  if_e	jmp	#LR__4163
28b64     10 22 06 F1 | 	add	local03, #16
28b68     11 2B 02 FB | 	rdlong	local07, local03
28b6c     10 22 86 F1 | 	sub	local03, #16
28b70     02 2A 16 F2 | 	cmp	local07, #2 wc
28b74     14 00 90 CD |  if_b	jmp	#LR__4162
28b78     18 22 06 F1 | 	add	local03, #24
28b7c     11 27 02 FB | 	rdlong	local05, local03
28b80     18 22 86 F1 | 	sub	local03, #24
28b84     13 2B 12 F2 | 	cmp	local07, local05 wc
28b88     15 25 02 C6 |  if_b	mov	local04, local07
28b8c                 | LR__4162
28b8c     00 28 06 F6 | 	mov	local06, #0
28b90                 | LR__4163
28b90                 | LR__4164
28b90     00 28 0E F2 | 	cmp	local06, #0 wz
28b94     60 00 90 5D |  if_ne	jmp	#LR__4167
28b98     12 29 02 F6 | 	mov	local06, local04
28b9c                 | ' 			ncl = scl;
28b9c                 | ' 			for (;;) {
28b9c                 | LR__4165
28b9c     01 28 06 F1 | 	add	local06, #1
28ba0     18 22 06 F1 | 	add	local03, #24
28ba4     11 27 02 FB | 	rdlong	local05, local03
28ba8     18 22 86 F1 | 	sub	local03, #24
28bac     13 29 12 F2 | 	cmp	local06, local05 wc
28bb0     02 28 06 36 |  if_ae	mov	local06, #2
28bb4     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
28bb8     00 FA 05 16 |  if_a	mov	result1, #0
28bbc     CC 00 90 1D |  if_a	jmp	#LR__4171
28bc0     14 15 02 F6 | 	mov	arg02, local06
28bc4     0F 13 02 F6 | 	mov	arg01, local01
28bc8     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
28bcc     FD 2A 0A F6 | 	mov	local07, result1 wz
28bd0     24 00 90 AD |  if_e	jmp	#LR__4166
28bd4     01 2A 0E F2 | 	cmp	local07, #1 wz
28bd8     FF FF 7F 5F 
28bdc     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
28be0     15 FB 01 A6 |  if_e	mov	result1, local07
28be4     A4 00 90 AD |  if_e	jmp	#LR__4171
28be8     12 29 0A F2 | 	cmp	local06, local04 wz
28bec     00 FA 05 A6 |  if_e	mov	result1, #0
28bf0     98 00 90 AD |  if_e	jmp	#LR__4171
28bf4     A4 FF 9F FD | 	jmp	#LR__4165
28bf8                 | LR__4166
28bf8                 | LR__4167
28bf8     11 13 02 F6 | 	mov	arg01, local03
28bfc     14 15 02 F6 | 	mov	arg02, local06
28c00     01 16 66 F6 | 	neg	arg03, #1
28c04     48 FB BF FD | 	call	#_fatfs_cc_put_fat
28c08     FD 2C 0A F6 | 	mov	local08, result1 wz
28c0c     1C 00 90 5D |  if_ne	jmp	#LR__4168
28c10     00 20 0E F2 | 	cmp	local02, #0 wz
28c14     14 00 90 AD |  if_e	jmp	#LR__4168
28c18     11 13 02 F6 | 	mov	arg01, local03
28c1c     10 15 02 F6 | 	mov	arg02, local02
28c20     14 17 02 F6 | 	mov	arg03, local06
28c24     28 FB BF FD | 	call	#_fatfs_cc_put_fat
28c28     FD 2C 02 F6 | 	mov	local08, result1
28c2c                 | LR__4168
28c2c     00 2C 0E F2 | 	cmp	local08, #0 wz
28c30     4C 00 90 5D |  if_ne	jmp	#LR__4169
28c34     10 22 06 F1 | 	add	local03, #16
28c38     11 29 62 FC | 	wrlong	local06, local03
28c3c     08 22 06 F1 | 	add	local03, #8
28c40     11 27 02 FB | 	rdlong	local05, local03
28c44     02 26 86 F1 | 	sub	local05, #2
28c48     04 22 86 F1 | 	sub	local03, #4
28c4c     11 2F 02 FB | 	rdlong	local09, local03
28c50     14 22 86 F1 | 	sub	local03, #20
28c54     13 2F 1A F2 | 	cmp	local09, local05 wcz
28c58     14 22 06 E1 |  if_be	add	local03, #20
28c5c     11 2F 02 EB |  if_be	rdlong	local09, local03
28c60     01 2E 86 E1 |  if_be	sub	local09, #1
28c64     11 2F 62 EC |  if_be	wrlong	local09, local03
28c68     14 22 86 E1 |  if_be	sub	local03, #20
28c6c     04 22 06 F1 | 	add	local03, #4
28c70     11 27 C2 FA | 	rdbyte	local05, local03
28c74     01 26 46 F5 | 	or	local05, #1
28c78     11 27 42 FC | 	wrbyte	local05, local03
28c7c     08 00 90 FD | 	jmp	#LR__4170
28c80                 | LR__4169
28c80     01 2C 0E F2 | 	cmp	local08, #1 wz
28c84     01 28 C6 F6 | 	negz	local06, #1
28c88                 | LR__4170
28c88                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
28c88                 | ' 	}
28c88                 | ' 
28c88                 | ' 	return ncl;
28c88     14 FB 01 F6 | 	mov	result1, local06
28c8c                 | LR__4171
28c8c     A7 F0 03 F6 | 	mov	ptra, fp
28c90     B2 00 A0 FD | 	call	#popregs_
28c94                 | _fatfs_cc_create_chain_ret
28c94     2D 00 64 FD | 	ret
28c98                 | 
28c98                 | _fatfs_cc_dir_clear
28c98     06 4A 05 F6 | 	mov	COUNT_, #6
28c9c     A8 00 A0 FD | 	call	#pushregs_
28ca0     09 1F 02 F6 | 	mov	local01, arg01
28ca4     0A 21 02 F6 | 	mov	local02, arg02
28ca8     0F 13 02 F6 | 	mov	arg01, local01
28cac     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
28cb0     00 FA 0D F2 | 	cmp	result1, #0 wz
28cb4     01 FA 05 56 |  if_ne	mov	result1, #1
28cb8     90 00 90 5D |  if_ne	jmp	#LR__4182
28cbc     0F 13 02 F6 | 	mov	arg01, local01
28cc0     10 15 02 F6 | 	mov	arg02, local02
28cc4     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
28cc8     FD 22 02 F6 | 	mov	local03, result1
28ccc     30 1E 06 F1 | 	add	local01, #48
28cd0     0F 23 62 FC | 	wrlong	local03, local01
28cd4     04 1E 06 F1 | 	add	local01, #4
28cd8     0F 13 02 F6 | 	mov	arg01, local01
28cdc     00 14 06 F6 | 	mov	arg02, #0
28ce0     09 16 C6 F9 | 	decod	arg03, #9
28ce4     98 00 A0 FD | 	call	#\builtin_bytefill_
28ce8     0F 25 02 F6 | 	mov	local04, local01
28cec                 | ' #line 1667 "ff.c"
28cec                 | ' 	{
28cec                 | ' 		ibuf = fs->win; szb = 1;
28cec                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
28cec     00 26 06 F6 | 	mov	local05, #0
28cf0     34 1E 86 F1 | 	sub	local01, #52
28cf4                 | LR__4180
28cf4     0A 1E 06 F1 | 	add	local01, #10
28cf8     0F 29 E2 FA | 	rdword	local06, local01
28cfc     0A 1E 86 F1 | 	sub	local01, #10
28d00     14 27 12 F2 | 	cmp	local05, local06 wc
28d04     2C 00 90 3D |  if_ae	jmp	#LR__4181
28d08     01 1E 06 F1 | 	add	local01, #1
28d0c     0F 13 C2 FA | 	rdbyte	arg01, local01
28d10     01 1E 86 F1 | 	sub	local01, #1
28d14     12 15 02 F6 | 	mov	arg02, local04
28d18     11 17 02 F6 | 	mov	arg03, local03
28d1c     13 17 02 F1 | 	add	arg03, local05
28d20     01 18 06 F6 | 	mov	arg04, #1
28d24     9C EF BF FD | 	call	#_fatfs_cc_disk_write
28d28     00 FA 0D F2 | 	cmp	result1, #0 wz
28d2c     01 26 06 A1 |  if_e	add	local05, #1
28d30     C0 FF 9F AD |  if_e	jmp	#LR__4180
28d34                 | LR__4181
28d34                 | ' 	}
28d34                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
28d34     0A 1E 06 F1 | 	add	local01, #10
28d38     0F 25 E2 FA | 	rdword	local04, local01
28d3c     12 27 0A F2 | 	cmp	local05, local04 wz
28d40     00 28 06 A6 |  if_e	mov	local06, #0
28d44     01 28 06 56 |  if_ne	mov	local06, #1
28d48     14 FB 01 F6 | 	mov	result1, local06
28d4c                 | LR__4182
28d4c     A7 F0 03 F6 | 	mov	ptra, fp
28d50     B2 00 A0 FD | 	call	#popregs_
28d54                 | _fatfs_cc_dir_clear_ret
28d54     2D 00 64 FD | 	ret
28d58                 | 
28d58                 | _fatfs_cc_dir_sdi
28d58     06 4A 05 F6 | 	mov	COUNT_, #6
28d5c     A8 00 A0 FD | 	call	#pushregs_
28d60     09 1F 02 F6 | 	mov	local01, arg01
28d64     0A 21 02 F6 | 	mov	local02, arg02
28d68     0F 23 02 FB | 	rdlong	local03, local01
28d6c     00 10 00 FF 
28d70     00 20 16 F2 | 	cmp	local02, ##2097152 wc
28d74     1F 20 CE C7 |  if_b	test	local02, #31 wz
28d78                 | ' 		return FR_INT_ERR;
28d78     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
28d7c     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4196
28d80     10 1E 06 F1 | 	add	local01, #16
28d84     0F 21 62 FC | 	wrlong	local02, local01
28d88     08 1E 86 F1 | 	sub	local01, #8
28d8c     0F 25 0A FB | 	rdlong	local04, local01 wz
28d90     08 1E 86 F1 | 	sub	local01, #8
28d94     11 27 C2 AA |  if_e	rdbyte	local05, local03
28d98     03 26 16 A2 |  if_e	cmp	local05, #3 wc
28d9c     28 22 06 21 |  if_nc_and_z	add	local03, #40
28da0     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
28da4     28 22 86 21 |  if_nc_and_z	sub	local03, #40
28da8     00 24 0E F2 | 	cmp	local04, #0 wz
28dac     3C 00 90 5D |  if_ne	jmp	#LR__4190
28db0     10 27 02 F6 | 	mov	local05, local02
28db4     05 26 46 F0 | 	shr	local05, #5
28db8     08 22 06 F1 | 	add	local03, #8
28dbc     11 15 E2 FA | 	rdword	arg02, local03
28dc0     08 22 86 F1 | 	sub	local03, #8
28dc4     0A 27 12 F2 | 	cmp	local05, arg02 wc
28dc8     02 FA 05 36 |  if_ae	mov	result1, #2
28dcc     E4 00 90 3D |  if_ae	jmp	#LR__4196
28dd0     28 22 06 F1 | 	add	local03, #40
28dd4     11 27 02 FB | 	rdlong	local05, local03
28dd8     28 22 86 F1 | 	sub	local03, #40
28ddc     18 1E 06 F1 | 	add	local01, #24
28de0     0F 27 62 FC | 	wrlong	local05, local01
28de4     18 1E 86 F1 | 	sub	local01, #24
28de8     7C 00 90 FD | 	jmp	#LR__4195
28dec                 | LR__4190
28dec     0A 22 06 F1 | 	add	local03, #10
28df0     11 29 E2 FA | 	rdword	local06, local03
28df4     0A 22 86 F1 | 	sub	local03, #10
28df8     09 28 66 F0 | 	shl	local06, #9
28dfc                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
28dfc                 | ' 		while (ofs >= csz) {
28dfc                 | LR__4191
28dfc     14 21 12 F2 | 	cmp	local02, local06 wc
28e00     4C 00 90 CD |  if_b	jmp	#LR__4194
28e04     0F 13 02 F6 | 	mov	arg01, local01
28e08     12 15 02 F6 | 	mov	arg02, local04
28e0c     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
28e10     FD 24 02 F6 | 	mov	local04, result1
28e14     FF FF 7F FF 
28e18     FF 25 0E F2 | 	cmp	local04, ##-1 wz
28e1c     01 FA 05 A6 |  if_e	mov	result1, #1
28e20     90 00 90 AD |  if_e	jmp	#LR__4196
28e24     02 24 16 F2 | 	cmp	local04, #2 wc
28e28     14 00 90 CD |  if_b	jmp	#LR__4192
28e2c     18 22 06 F1 | 	add	local03, #24
28e30     11 27 02 FB | 	rdlong	local05, local03
28e34     18 22 86 F1 | 	sub	local03, #24
28e38     13 25 12 F2 | 	cmp	local04, local05 wc
28e3c     08 00 90 CD |  if_b	jmp	#LR__4193
28e40                 | LR__4192
28e40     02 FA 05 F6 | 	mov	result1, #2
28e44     6C 00 90 FD | 	jmp	#LR__4196
28e48                 | LR__4193
28e48     14 21 82 F1 | 	sub	local02, local06
28e4c     AC FF 9F FD | 	jmp	#LR__4191
28e50                 | LR__4194
28e50     11 13 02 F6 | 	mov	arg01, local03
28e54     12 15 02 F6 | 	mov	arg02, local04
28e58     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
28e5c     18 1E 06 F1 | 	add	local01, #24
28e60     0F FB 61 FC | 	wrlong	result1, local01
28e64     18 1E 86 F1 | 	sub	local01, #24
28e68                 | LR__4195
28e68     14 1E 06 F1 | 	add	local01, #20
28e6c     0F 25 62 FC | 	wrlong	local04, local01
28e70     04 1E 06 F1 | 	add	local01, #4
28e74     0F 27 0A FB | 	rdlong	local05, local01 wz
28e78     18 1E 86 F1 | 	sub	local01, #24
28e7c     02 FA 05 A6 |  if_e	mov	result1, #2
28e80     30 00 90 AD |  if_e	jmp	#LR__4196
28e84     10 29 02 F6 | 	mov	local06, local02
28e88     09 28 46 F0 | 	shr	local06, #9
28e8c     18 1E 06 F1 | 	add	local01, #24
28e90     0F 27 02 FB | 	rdlong	local05, local01
28e94     14 27 02 F1 | 	add	local05, local06
28e98     0F 27 62 FC | 	wrlong	local05, local01
28e9c     34 22 06 F1 | 	add	local03, #52
28ea0     FF 21 06 F5 | 	and	local02, #511
28ea4     10 23 02 F1 | 	add	local03, local02
28ea8     04 1E 06 F1 | 	add	local01, #4
28eac     0F 23 62 FC | 	wrlong	local03, local01
28eb0                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
28eb0                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
28eb0                 | ' 
28eb0                 | ' 	return FR_OK;
28eb0     00 FA 05 F6 | 	mov	result1, #0
28eb4                 | LR__4196
28eb4     A7 F0 03 F6 | 	mov	ptra, fp
28eb8     B2 00 A0 FD | 	call	#popregs_
28ebc                 | _fatfs_cc_dir_sdi_ret
28ebc     2D 00 64 FD | 	ret
28ec0                 | 
28ec0                 | _fatfs_cc_dir_next
28ec0     05 4A 05 F6 | 	mov	COUNT_, #5
28ec4     A8 00 A0 FD | 	call	#pushregs_
28ec8     09 1F 02 F6 | 	mov	local01, arg01
28ecc     0A 21 02 F6 | 	mov	local02, arg02
28ed0     0F 23 02 FB | 	rdlong	local03, local01
28ed4     10 1E 06 F1 | 	add	local01, #16
28ed8     0F 25 02 FB | 	rdlong	local04, local01
28edc     10 1E 86 F1 | 	sub	local01, #16
28ee0     20 24 06 F1 | 	add	local04, #32
28ee4     00 10 00 FF 
28ee8     00 24 16 F2 | 	cmp	local04, ##2097152 wc
28eec     18 1E 06 31 |  if_ae	add	local01, #24
28ef0     0F 01 68 3C |  if_ae	wrlong	#0, local01
28ef4     18 1E 86 31 |  if_ae	sub	local01, #24
28ef8     18 1E 06 F1 | 	add	local01, #24
28efc     0F 15 0A FB | 	rdlong	arg02, local01 wz
28f00     18 1E 86 F1 | 	sub	local01, #24
28f04     04 FA 05 A6 |  if_e	mov	result1, #4
28f08     64 01 90 AD |  if_e	jmp	#LR__4205
28f0c     FF 25 CE F7 | 	test	local04, #511 wz
28f10     3C 01 90 5D |  if_ne	jmp	#LR__4204
28f14     18 1E 06 F1 | 	add	local01, #24
28f18     0F 15 02 FB | 	rdlong	arg02, local01
28f1c     01 14 06 F1 | 	add	arg02, #1
28f20     0F 15 62 FC | 	wrlong	arg02, local01
28f24     04 1E 86 F1 | 	sub	local01, #4
28f28     0F 15 0A FB | 	rdlong	arg02, local01 wz
28f2c     14 1E 86 F1 | 	sub	local01, #20
28f30     2C 00 90 5D |  if_ne	jmp	#LR__4200
28f34     12 15 02 F6 | 	mov	arg02, local04
28f38     05 14 46 F0 | 	shr	arg02, #5
28f3c     08 22 06 F1 | 	add	local03, #8
28f40     11 21 E2 FA | 	rdword	local02, local03
28f44     08 22 86 F1 | 	sub	local03, #8
28f48     10 15 12 F2 | 	cmp	arg02, local02 wc
28f4c     18 1E 06 31 |  if_ae	add	local01, #24
28f50     0F 01 68 3C |  if_ae	wrlong	#0, local01
28f54                 | ' 				dp->sect = 0; return FR_NO_FILE;
28f54     04 FA 05 36 |  if_ae	mov	result1, #4
28f58     14 01 90 3D |  if_ae	jmp	#LR__4205
28f5c     F0 00 90 FD | 	jmp	#LR__4203
28f60                 | LR__4200
28f60     12 13 02 F6 | 	mov	arg01, local04
28f64     09 12 46 F0 | 	shr	arg01, #9
28f68     0A 22 06 F1 | 	add	local03, #10
28f6c     11 15 E2 FA | 	rdword	arg02, local03
28f70     0A 22 86 F1 | 	sub	local03, #10
28f74     01 14 86 F1 | 	sub	arg02, #1
28f78     0A 13 CA F7 | 	test	arg01, arg02 wz
28f7c     D0 00 90 5D |  if_ne	jmp	#LR__4202
28f80     0F 13 02 F6 | 	mov	arg01, local01
28f84     14 1E 06 F1 | 	add	local01, #20
28f88     0F 15 02 FB | 	rdlong	arg02, local01
28f8c     14 1E 86 F1 | 	sub	local01, #20
28f90     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
28f94     FD 26 02 F6 | 	mov	local05, result1
28f98     02 26 16 F2 | 	cmp	local05, #2 wc
28f9c     02 FA 05 C6 |  if_b	mov	result1, #2
28fa0     CC 00 90 CD |  if_b	jmp	#LR__4205
28fa4     FF FF 7F FF 
28fa8     FF 27 0E F2 | 	cmp	local05, ##-1 wz
28fac     01 FA 05 A6 |  if_e	mov	result1, #1
28fb0     BC 00 90 AD |  if_e	jmp	#LR__4205
28fb4     18 22 06 F1 | 	add	local03, #24
28fb8     11 15 02 FB | 	rdlong	arg02, local03
28fbc     18 22 86 F1 | 	sub	local03, #24
28fc0     0A 27 12 F2 | 	cmp	local05, arg02 wc
28fc4     68 00 90 CD |  if_b	jmp	#LR__4201
28fc8     00 20 0E F2 | 	cmp	local02, #0 wz
28fcc     18 1E 06 A1 |  if_e	add	local01, #24
28fd0     0F 01 68 AC |  if_e	wrlong	#0, local01
28fd4                 | ' 						dp->sect = 0; return FR_NO_FILE;
28fd4     04 FA 05 A6 |  if_e	mov	result1, #4
28fd8     94 00 90 AD |  if_e	jmp	#LR__4205
28fdc     0F 13 02 F6 | 	mov	arg01, local01
28fe0     14 1E 06 F1 | 	add	local01, #20
28fe4     0F 15 02 FB | 	rdlong	arg02, local01
28fe8     14 1E 86 F1 | 	sub	local01, #20
28fec     84 FA BF FD | 	call	#_fatfs_cc_create_chain
28ff0     FD 26 0A F6 | 	mov	local05, result1 wz
28ff4     07 FA 05 A6 |  if_e	mov	result1, #7
28ff8     74 00 90 AD |  if_e	jmp	#LR__4205
28ffc     01 26 0E F2 | 	cmp	local05, #1 wz
29000     02 FA 05 A6 |  if_e	mov	result1, #2
29004     68 00 90 AD |  if_e	jmp	#LR__4205
29008     FF FF 7F FF 
2900c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
29010     01 FA 05 A6 |  if_e	mov	result1, #1
29014     58 00 90 AD |  if_e	jmp	#LR__4205
29018     13 15 02 F6 | 	mov	arg02, local05
2901c     11 13 02 F6 | 	mov	arg01, local03
29020     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
29024     00 FA 0D F2 | 	cmp	result1, #0 wz
29028     01 FA 05 56 |  if_ne	mov	result1, #1
2902c     40 00 90 5D |  if_ne	jmp	#LR__4205
29030                 | LR__4201
29030     14 1E 06 F1 | 	add	local01, #20
29034     0F 27 62 FC | 	wrlong	local05, local01
29038     11 13 02 F6 | 	mov	arg01, local03
2903c     13 15 02 F6 | 	mov	arg02, local05
29040     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
29044     04 1E 06 F1 | 	add	local01, #4
29048     0F FB 61 FC | 	wrlong	result1, local01
2904c     18 1E 86 F1 | 	sub	local01, #24
29050                 | LR__4202
29050                 | LR__4203
29050                 | LR__4204
29050     10 1E 06 F1 | 	add	local01, #16
29054     0F 25 62 FC | 	wrlong	local04, local01
29058     34 22 06 F1 | 	add	local03, #52
2905c     FF 25 06 F5 | 	and	local04, #511
29060     12 23 02 F1 | 	add	local03, local04
29064     0C 1E 06 F1 | 	add	local01, #12
29068     0F 23 62 FC | 	wrlong	local03, local01
2906c                 | ' #line 1771 "ff.c"
2906c                 | ' 				}
2906c                 | ' 				dp->clust = clst;
2906c                 | ' 				dp->sect = clst2sect(fs, clst);
2906c                 | ' 			}
2906c                 | ' 		}
2906c                 | ' 	}
2906c                 | ' 	dp->dptr = ofs;
2906c                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2906c                 | ' 
2906c                 | ' 	return FR_OK;
2906c     00 FA 05 F6 | 	mov	result1, #0
29070                 | LR__4205
29070     A7 F0 03 F6 | 	mov	ptra, fp
29074     B2 00 A0 FD | 	call	#popregs_
29078                 | _fatfs_cc_dir_next_ret
29078     2D 00 64 FD | 	ret
2907c                 | 
2907c                 | _fatfs_cc_dir_alloc
2907c     08 4A 05 F6 | 	mov	COUNT_, #8
29080     A8 00 A0 FD | 	call	#pushregs_
29084     09 1F 02 F6 | 	mov	local01, arg01
29088     0A 21 02 F6 | 	mov	local02, arg02
2908c     0F 23 02 FB | 	rdlong	local03, local01
29090     0F 13 02 F6 | 	mov	arg01, local01
29094     00 14 06 F6 | 	mov	arg02, #0
29098     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2909c     FD 24 0A F6 | 	mov	local04, result1 wz
290a0     70 00 90 5D |  if_ne	jmp	#LR__4214
290a4     00 26 06 F6 | 	mov	local05, #0
290a8                 | ' 		n = 0;
290a8                 | ' 		do {
290a8                 | LR__4210
290a8     18 1E 06 F1 | 	add	local01, #24
290ac     0F 15 02 FB | 	rdlong	arg02, local01
290b0     18 1E 86 F1 | 	sub	local01, #24
290b4     11 13 02 F6 | 	mov	arg01, local03
290b8     38 F3 BF FD | 	call	#_fatfs_cc_move_window
290bc     FD 24 0A F6 | 	mov	local04, result1 wz
290c0     50 00 90 5D |  if_ne	jmp	#LR__4213
290c4     1C 1E 06 F1 | 	add	local01, #28
290c8     0F 29 02 FB | 	rdlong	local06, local01
290cc     1C 1E 86 F1 | 	sub	local01, #28
290d0     14 29 C2 FA | 	rdbyte	local06, local06
290d4     E5 28 0E F2 | 	cmp	local06, #229 wz
290d8     1C 1E 06 51 |  if_ne	add	local01, #28
290dc     0F 2B 02 5B |  if_ne	rdlong	local07, local01
290e0     1C 1E 86 51 |  if_ne	sub	local01, #28
290e4     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
290e8     10 00 90 5D |  if_ne	jmp	#LR__4211
290ec     01 26 06 F1 | 	add	local05, #1
290f0     10 27 0A F2 | 	cmp	local05, local02 wz
290f4     1C 00 90 AD |  if_e	jmp	#LR__4213
290f8     04 00 90 FD | 	jmp	#LR__4212
290fc                 | LR__4211
290fc     00 26 06 F6 | 	mov	local05, #0
29100                 | LR__4212
29100     0F 13 02 F6 | 	mov	arg01, local01
29104     01 14 06 F6 | 	mov	arg02, #1
29108     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2910c     FD 24 0A F6 | 	mov	local04, result1 wz
29110     94 FF 9F AD |  if_e	jmp	#LR__4210
29114                 | LR__4213
29114                 | LR__4214
29114     04 24 0E F2 | 	cmp	local04, #4 wz
29118     07 24 06 A6 |  if_e	mov	local04, #7
2911c                 | ' 	return res;
2911c     12 FB 01 F6 | 	mov	result1, local04
29120     A7 F0 03 F6 | 	mov	ptra, fp
29124     B2 00 A0 FD | 	call	#popregs_
29128                 | _fatfs_cc_dir_alloc_ret
29128     2D 00 64 FD | 	ret
2912c                 | 
2912c                 | _fatfs_cc_ld_clust
2912c     09 01 02 F6 | 	mov	_var01, arg01
29130     0A 13 02 F6 | 	mov	arg01, arg02
29134     1A 12 06 F1 | 	add	arg01, #26
29138                 | ' {
29138                 | ' 
29138                 | ' 	return *((WORD*)ptr);
29138     09 FB E1 FA | 	rdword	result1, arg01
2913c     FD 12 32 F9 | 	getword	arg01, result1, #0
29140     00 01 C2 FA | 	rdbyte	_var01, _var01
29144     03 00 0E F2 | 	cmp	_var01, #3 wz
29148     14 14 06 A1 |  if_e	add	arg02, #20
2914c                 | ' {
2914c                 | ' 
2914c                 | ' 	return *((WORD*)ptr);
2914c     0A FB E1 AA |  if_e	rdword	result1, arg02
29150     10 FA 65 A0 |  if_e	shl	result1, #16
29154     FD 12 42 A5 |  if_e	or	arg01, result1
29158                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
29158                 | ' 	}
29158                 | ' 
29158                 | ' 	return cl;
29158     09 FB 01 F6 | 	mov	result1, arg01
2915c                 | _fatfs_cc_ld_clust_ret
2915c     2D 00 64 FD | 	ret
29160                 | 
29160                 | _fatfs_cc_st_clust
29160     09 01 02 F6 | 	mov	_var01, arg01
29164     0A 13 02 F6 | 	mov	arg01, arg02
29168     1A 12 06 F1 | 	add	arg01, #26
2916c     09 17 52 FC | 	wrword	arg03, arg01
29170     00 01 C2 FA | 	rdbyte	_var01, _var01
29174     03 00 0E F2 | 	cmp	_var01, #3 wz
29178     14 14 06 A1 |  if_e	add	arg02, #20
2917c     10 16 46 A0 |  if_e	shr	arg03, #16
29180     0A 17 52 AC |  if_e	wrword	arg03, arg02
29184                 | _fatfs_cc_st_clust_ret
29184     2D 00 64 FD | 	ret
29188                 | 
29188                 | _fatfs_cc_cmp_lfn
29188     07 4A 05 F6 | 	mov	COUNT_, #7
2918c     A8 00 A0 FD | 	call	#pushregs_
29190     09 1F 02 F6 | 	mov	local01, arg01
29194     0A 13 02 F6 | 	mov	arg01, arg02
29198     1A 12 06 F1 | 	add	arg01, #26
2919c                 | ' {
2919c                 | ' 
2919c                 | ' 	return *((WORD*)ptr);
2919c     09 FB E9 FA | 	rdword	result1, arg01 wz
291a0     00 FA 05 56 |  if_ne	mov	result1, #0
291a4     E0 00 90 5D |  if_ne	jmp	#LR__4226
291a8     0A 21 C2 FA | 	rdbyte	local02, arg02
291ac     3F 20 06 F5 | 	and	local02, #63
291b0     01 20 86 F1 | 	sub	local02, #1
291b4     0D 20 06 FD | 	qmul	local02, #13
291b8                 | ' 
291b8                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
291b8                 | ' 
291b8                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
291b8     01 22 06 F6 | 	mov	local03, #1
291bc     00 24 06 F6 | 	mov	local04, #0
291c0     18 26 62 FD | 	getqx	local05
291c4                 | LR__4220
291c4     0D 24 16 F2 | 	cmp	local04, #13 wc
291c8     9C 00 90 3D |  if_ae	jmp	#LR__4225
291cc     0A 13 02 F6 | 	mov	arg01, arg02
291d0     12 21 02 F6 | 	mov	local02, local04
291d4     01 00 00 FF 
291d8     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
291dc     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
291e0     10 21 C2 FA | 	rdbyte	local02, local02
291e4     01 20 06 FA | 	mul	local02, #1
291e8     10 13 02 F1 | 	add	arg01, local02
291ec     01 00 00 FF 
291f0     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
291f4                 | ' {
291f4                 | ' 
291f4                 | ' 	return *((WORD*)ptr);
291f4     09 FB E1 FA | 	rdword	result1, arg01
291f8     FD 28 02 F6 | 	mov	local06, result1
291fc     11 21 02 F6 | 	mov	local02, local03
29200     0F 20 4E F7 | 	zerox	local02, #15 wz
29204     44 00 90 AD |  if_e	jmp	#LR__4223
29208     00 27 16 F2 | 	cmp	local05, #256 wc
2920c     2C 00 90 3D |  if_ae	jmp	#LR__4221
29210     14 13 32 F9 | 	getword	arg01, local06, #0
29214     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
29218     FD 20 02 F6 | 	mov	local02, result1
2921c     13 23 02 F6 | 	mov	local03, local05
29220     01 22 66 F0 | 	shl	local03, #1
29224     0F 23 02 F1 | 	add	local03, local01
29228     11 13 E2 FA | 	rdword	arg01, local03
2922c     01 26 06 F1 | 	add	local05, #1
29230     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
29234     FD 20 0A F2 | 	cmp	local02, result1 wz
29238     08 00 90 AD |  if_e	jmp	#LR__4222
2923c                 | LR__4221
2923c                 | ' 				return 0;
2923c     00 FA 05 F6 | 	mov	result1, #0
29240     44 00 90 FD | 	jmp	#LR__4226
29244                 | LR__4222
29244     14 23 02 F6 | 	mov	local03, local06
29248     14 00 90 FD | 	jmp	#LR__4224
2924c                 | LR__4223
2924c     14 29 32 F9 | 	getword	local06, local06, #0
29250     7F 00 00 FF 
29254     FF 29 0E F2 | 	cmp	local06, ##65535 wz
29258     00 FA 05 56 |  if_ne	mov	result1, #0
2925c     28 00 90 5D |  if_ne	jmp	#LR__4226
29260                 | LR__4224
29260     01 24 06 F1 | 	add	local04, #1
29264     5C FF 9F FD | 	jmp	#LR__4220
29268                 | LR__4225
29268     0A 21 C2 FA | 	rdbyte	local02, arg02
2926c     40 20 CE F7 | 	test	local02, #64 wz
29270     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
29274     01 26 66 50 |  if_ne	shl	local05, #1
29278     0F 27 02 51 |  if_ne	add	local05, local01
2927c     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
29280     00 FA 05 56 |  if_ne	mov	result1, #0
29284                 | ' 
29284                 | ' 	return 1;
29284     01 FA 05 A6 |  if_e	mov	result1, #1
29288                 | LR__4226
29288     A7 F0 03 F6 | 	mov	ptra, fp
2928c     B2 00 A0 FD | 	call	#popregs_
29290                 | _fatfs_cc_cmp_lfn_ret
29290     2D 00 64 FD | 	ret
29294                 | 
29294                 | _fatfs_cc_pick_lfn
29294     09 01 02 F6 | 	mov	_var01, arg01
29298     0A 13 02 F6 | 	mov	arg01, arg02
2929c     1A 12 06 F1 | 	add	arg01, #26
292a0                 | ' {
292a0                 | ' 
292a0                 | ' 	return *((WORD*)ptr);
292a0     09 FB E9 FA | 	rdword	result1, arg01 wz
292a4     00 FA 05 56 |  if_ne	mov	result1, #0
292a8     D4 00 90 5D |  if_ne	jmp	#LR__4235
292ac     0A 03 C2 FA | 	rdbyte	_var02, arg02
292b0     40 02 26 F5 | 	andn	_var02, #64
292b4     01 02 86 F1 | 	sub	_var02, #1
292b8     0D 02 06 FD | 	qmul	_var02, #13
292bc                 | ' 
292bc                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
292bc                 | ' 
292bc                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
292bc     01 04 06 F6 | 	mov	_var03, #1
292c0     00 06 06 F6 | 	mov	_var04, #0
292c4     18 08 62 FD | 	getqx	_var05
292c8                 | LR__4230
292c8     0D 06 16 F2 | 	cmp	_var04, #13 wc
292cc     80 00 90 3D |  if_ae	jmp	#LR__4233
292d0     0A 13 02 F6 | 	mov	arg01, arg02
292d4     03 03 02 F6 | 	mov	_var02, _var04
292d8     01 00 00 FF 
292dc     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
292e0     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
292e4     01 03 C2 FA | 	rdbyte	_var02, _var02
292e8     01 02 06 FA | 	mul	_var02, #1
292ec     01 13 02 F1 | 	add	arg01, _var02
292f0     01 00 00 FF 
292f4     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
292f8                 | ' {
292f8                 | ' 
292f8                 | ' 	return *((WORD*)ptr);
292f8     09 FB E1 FA | 	rdword	result1, arg01
292fc     FD 0A 02 F6 | 	mov	_var06, result1
29300     02 03 02 F6 | 	mov	_var02, _var03
29304     0F 02 4E F7 | 	zerox	_var02, #15 wz
29308     28 00 90 AD |  if_e	jmp	#LR__4231
2930c     00 09 16 F2 | 	cmp	_var05, #256 wc
29310     00 FA 05 36 |  if_ae	mov	result1, #0
29314     68 00 90 3D |  if_ae	jmp	#LR__4235
29318     04 03 02 F6 | 	mov	_var02, _var05
2931c     01 02 66 F0 | 	shl	_var02, #1
29320     00 03 02 F1 | 	add	_var02, _var01
29324     05 05 02 F6 | 	mov	_var03, _var06
29328     01 05 52 FC | 	wrword	_var03, _var02
2932c     01 08 06 F1 | 	add	_var05, #1
29330     14 00 90 FD | 	jmp	#LR__4232
29334                 | LR__4231
29334     05 0B 32 F9 | 	getword	_var06, _var06, #0
29338     7F 00 00 FF 
2933c     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
29340     00 FA 05 56 |  if_ne	mov	result1, #0
29344     38 00 90 5D |  if_ne	jmp	#LR__4235
29348                 | LR__4232
29348     01 06 06 F1 | 	add	_var04, #1
2934c     78 FF 9F FD | 	jmp	#LR__4230
29350                 | LR__4233
29350     0A 03 C2 FA | 	rdbyte	_var02, arg02
29354     40 02 CE F7 | 	test	_var02, #64 wz
29358     02 0D 02 56 |  if_ne	mov	_var07, _var03
2935c     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
29360     18 00 90 AD |  if_e	jmp	#LR__4234
29364     00 09 16 F2 | 	cmp	_var05, #256 wc
29368     00 FA 05 36 |  if_ae	mov	result1, #0
2936c     10 00 90 3D |  if_ae	jmp	#LR__4235
29370     01 08 66 F0 | 	shl	_var05, #1
29374     00 09 02 F1 | 	add	_var05, _var01
29378     04 01 58 FC | 	wrword	#0, _var05
2937c                 | LR__4234
2937c                 | ' 		lfnbuf[i] = 0;
2937c                 | ' 	}
2937c                 | ' 
2937c                 | ' 	return 1;
2937c     01 FA 05 F6 | 	mov	result1, #1
29380                 | LR__4235
29380                 | _fatfs_cc_pick_lfn_ret
29380     2D 00 64 FD | 	ret
29384                 | 
29384                 | _fatfs_cc_put_lfn
29384     0D 14 06 F1 | 	add	arg02, #13
29388     0A 19 42 FC | 	wrbyte	arg04, arg02
2938c     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
29390     01 18 86 F1 | 	sub	arg04, #1
29394     0D 18 06 FD | 	qmul	arg04, #13
29398     09 01 02 F6 | 	mov	_var01, arg01
2939c     02 14 86 F1 | 	sub	arg02, #2
293a0     0A 1F 48 FC | 	wrbyte	#15, arg02
293a4     01 14 06 F1 | 	add	arg02, #1
293a8     0A 01 48 FC | 	wrbyte	#0, arg02
293ac     0C 14 86 F1 | 	sub	arg02, #12
293b0     0A 13 02 F6 | 	mov	arg01, arg02
293b4     1A 12 06 F1 | 	add	arg01, #26
293b8     09 01 58 FC | 	wrword	#0, arg01
293bc     00 02 06 F6 | 	mov	_var02, #0
293c0     00 04 06 F6 | 	mov	_var03, #0
293c4                 | ' 	BYTE* dir,
293c4                 | ' 	BYTE ord,
293c4                 | ' 	BYTE sum
293c4                 | ' )
293c4                 | ' {
293c4                 | ' 	UINT i, s;
293c4                 | ' 	WCHAR wc;
293c4                 | ' 
293c4                 | ' 
293c4                 | ' 	dir[ 13 ] = sum;
293c4                 | ' 	dir[ 11 ] =  0x0F ;
293c4                 | ' 	dir[ 12 ] = 0;
293c4                 | ' 	st_word(dir +  26 , 0);
293c4                 | ' 
293c4                 | ' 	i = (ord - 1) * 13;
293c4                 | ' 	s = wc = 0;
293c4                 | ' 	do {
293c4     01 00 00 FF 
293c8     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
293cc     18 06 62 FD | 	getqx	_var04
293d0     97 2A 48 FB | 	callpa	#(@LR__4241-@LR__4240)>>2,fcache_load_ptr_
293d4                 | LR__4240
293d4     01 19 32 F9 | 	getword	arg04, _var02, #0
293d8     7F 00 00 FF 
293dc     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
293e0     03 13 02 56 |  if_ne	mov	arg01, _var04
293e4     01 06 06 51 |  if_ne	add	_var04, #1
293e8     01 12 66 50 |  if_ne	shl	arg01, #1
293ec     00 13 02 51 |  if_ne	add	arg01, _var01
293f0     09 03 E2 5A |  if_ne	rdword	_var02, arg01
293f4     0A 13 02 F6 | 	mov	arg01, arg02
293f8     02 19 02 F6 | 	mov	arg04, _var03
293fc     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
29400     0C 19 C2 FA | 	rdbyte	arg04, arg04
29404     01 18 06 FA | 	mul	arg04, #1
29408     0C 13 02 F1 | 	add	arg01, arg04
2940c     09 03 52 FC | 	wrword	_var02, arg01
29410     01 19 02 F6 | 	mov	arg04, _var02
29414     0F 18 4E F7 | 	zerox	arg04, #15 wz
29418     0F 02 CE A9 |  if_e	bmask	_var02, #15
2941c     01 04 06 F1 | 	add	_var03, #1
29420     0D 04 16 F2 | 	cmp	_var03, #13 wc
29424     AC FF 9F CD |  if_b	jmp	#LR__4240
29428                 | LR__4241
29428     01 00 00 FF 
2942c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
29430     01 03 32 F9 | 	getword	_var02, _var02, #0
29434     7F 00 00 FF 
29438     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
2943c     01 06 66 50 |  if_ne	shl	_var04, #1
29440     00 07 02 51 |  if_ne	add	_var04, _var01
29444     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
29448     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2944c     40 16 46 A5 |  if_e	or	arg03, #64
29450     0A 17 42 FC | 	wrbyte	arg03, arg02
29454                 | _fatfs_cc_put_lfn_ret
29454     2D 00 64 FD | 	ret
29458                 | 
29458                 | _fatfs_cc_gen_numname
29458     08 4A 05 F6 | 	mov	COUNT_, #8
2945c     A8 00 A0 FD | 	call	#pushregs_
29460     2C F0 07 F1 | 	add	ptra, #44
29464     09 1F 02 F6 | 	mov	local01, arg01
29468     0A 21 02 F6 | 	mov	local02, arg02
2946c     0B 23 02 F6 | 	mov	local03, arg03
29470     0C 25 02 F6 | 	mov	local04, arg04
29474     0F 13 02 F6 | 	mov	arg01, local01
29478     10 15 02 F6 | 	mov	arg02, local02
2947c     0B 16 06 F6 | 	mov	arg03, #11
29480     84 75 BF FD | 	call	#__system____builtin_memmove
29484     06 24 16 F2 | 	cmp	local04, #6 wc
29488     48 00 90 CD |  if_b	jmp	#LR__4255
2948c     12 27 02 F6 | 	mov	local05, local04
29490     97 1E 48 FB | 	callpa	#(@LR__4253-@LR__4250)>>2,fcache_load_ptr_
29494                 | ' 		sreg = seq;
29494                 | ' 		while (*lfn) {
29494                 | LR__4250
29494     11 29 EA FA | 	rdword	local06, local03 wz
29498     34 00 90 AD |  if_e	jmp	#LR__4254
2949c     11 2B E2 FA | 	rdword	local07, local03
294a0                 | ' 			wc = *lfn++;
294a0                 | ' 			for (i = 0; i < 16; i++) {
294a0     02 22 06 F1 | 	add	local03, #2
294a4     10 12 DC FC | 	rep	@LR__4252, #16
294a8                 | LR__4251
294a8     01 26 66 F0 | 	shl	local05, #1
294ac     15 29 32 F9 | 	getword	local06, local07, #0
294b0     01 28 06 F5 | 	and	local06, #1
294b4     14 27 02 F1 | 	add	local05, local06
294b8     15 2B 32 F9 | 	getword	local07, local07, #0
294bc     01 2A 46 F0 | 	shr	local07, #1
294c0     10 26 2E F4 | 	testbn	local05, #16 wz
294c4     88 00 00 5F 
294c8     21 26 66 55 |  if_ne	xor	local05, ##69665
294cc                 | LR__4252
294cc     C4 FF 9F FD | 	jmp	#LR__4250
294d0                 | LR__4253
294d0                 | LR__4254
294d0     13 25 02 F6 | 	mov	local04, local05
294d4                 | LR__4255
294d4     07 2A 06 F6 | 	mov	local07, #7
294d8                 | ' 			}
294d8                 | ' 		}
294d8                 | ' 		seq = (UINT)sreg;
294d8                 | ' 	}
294d8                 | ' 
294d8                 | ' 
294d8                 | ' 	i = 7;
294d8                 | ' 	do {
294d8     10 4E 05 F1 | 	add	fp, #16
294dc     97 1A 48 FB | 	callpa	#(@LR__4257-@LR__4256)>>2,fcache_load_ptr_
294e0                 | LR__4256
294e0     12 27 42 F8 | 	getnib	local05, local04, #0
294e4     30 26 06 F1 | 	add	local05, #48
294e8     04 24 46 F0 | 	shr	local04, #4
294ec     13 29 E2 F8 | 	getbyte	local06, local05, #0
294f0     3A 28 16 F2 | 	cmp	local06, #58 wc
294f4     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
294f8     07 26 06 31 |  if_ae	add	local05, #7
294fc     15 29 02 F6 | 	mov	local06, local07
29500     01 2A 8E F1 | 	sub	local07, #1 wz
29504     A7 28 02 F1 | 	add	local06, fp
29508     14 27 42 FC | 	wrbyte	local05, local06
2950c     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
29510     CC FF 9F 5D |  if_ne	jmp	#LR__4256
29514                 | LR__4257
29514     15 29 02 F6 | 	mov	local06, local07
29518     A7 28 02 F1 | 	add	local06, fp
2951c     14 FD 48 FC | 	wrbyte	#126, local06
29520                 | ' 	ns[i] = '~';
29520                 | ' 
29520                 | ' 
29520                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
29520     00 26 06 F6 | 	mov	local05, #0
29524     10 4E 85 F1 | 	sub	fp, #16
29528     97 2A 48 FB | 	callpa	#(@LR__4260-@LR__4258)>>2,fcache_load_ptr_
2952c                 | LR__4258
2952c     15 27 12 F2 | 	cmp	local05, local07 wc
29530     4C 00 90 3D |  if_ae	jmp	#LR__4261
29534     13 29 02 F6 | 	mov	local06, local05
29538     0F 29 02 F1 | 	add	local06, local01
2953c     14 29 C2 FA | 	rdbyte	local06, local06
29540     20 28 0E F2 | 	cmp	local06, #32 wz
29544     38 00 90 AD |  if_e	jmp	#LR__4261
29548     13 13 02 F6 | 	mov	arg01, local05
2954c     0F 13 02 F1 | 	add	arg01, local01
29550     09 13 CA FA | 	rdbyte	arg01, arg01 wz
29554     00 FA 05 56 |  if_ne	mov	result1, #0
29558                 | ' 
29558                 | ' 	return 0;
29558     00 FA 05 A6 |  if_e	mov	result1, #0
2955c     00 FA 0D F2 | 	cmp	result1, #0 wz
29560     14 00 90 AD |  if_e	jmp	#LR__4259
29564     15 29 02 F6 | 	mov	local06, local07
29568     01 28 86 F1 | 	sub	local06, #1
2956c     14 27 0A F2 | 	cmp	local05, local06 wz
29570     0C 00 90 AD |  if_e	jmp	#LR__4261
29574     01 26 06 F1 | 	add	local05, #1
29578                 | LR__4259
29578     01 26 06 F1 | 	add	local05, #1
2957c     AC FF 9F FD | 	jmp	#LR__4258
29580                 | LR__4260
29580                 | LR__4261
29580     97 20 48 FB | 	callpa	#(@LR__4265-@LR__4262)>>2,fcache_load_ptr_
29584                 | ' 			j++;
29584                 | ' 		}
29584                 | ' 	}
29584                 | ' 	do {
29584                 | LR__4262
29584     13 29 02 F6 | 	mov	local06, local05
29588     0F 29 02 F1 | 	add	local06, local01
2958c     08 2A 16 F2 | 	cmp	local07, #8 wc
29590     01 26 06 F1 | 	add	local05, #1
29594     1C 00 90 3D |  if_ae	jmp	#LR__4263
29598     15 25 02 F6 | 	mov	local04, local07
2959c     10 4E 05 F1 | 	add	fp, #16
295a0     A7 24 02 F1 | 	add	local04, fp
295a4     12 2D C2 FA | 	rdbyte	local08, local04
295a8     01 2A 06 F1 | 	add	local07, #1
295ac     10 4E 85 F1 | 	sub	fp, #16
295b0     04 00 90 FD | 	jmp	#LR__4264
295b4                 | LR__4263
295b4     20 2C 06 F6 | 	mov	local08, #32
295b8                 | LR__4264
295b8     14 2D 42 FC | 	wrbyte	local08, local06
295bc     08 26 16 F2 | 	cmp	local05, #8 wc
295c0     C0 FF 9F CD |  if_b	jmp	#LR__4262
295c4                 | LR__4265
295c4     A7 F0 03 F6 | 	mov	ptra, fp
295c8     B2 00 A0 FD | 	call	#popregs_
295cc                 | _fatfs_cc_gen_numname_ret
295cc     2D 00 64 FD | 	ret
295d0                 | 
295d0                 | _fatfs_cc_sum_sfn
295d0     00 00 06 F6 | 	mov	_var01, #0
295d4                 | ' )
295d4                 | ' {
295d4                 | ' 	BYTE sum = 0;
295d4                 | ' 	UINT n = 11;
295d4                 | ' 
295d4                 | ' 	do {
295d4     97 12 48 FB | 	callpa	#(@LR__4272-@LR__4270)>>2,fcache_load_ptr_
295d8                 | LR__4270
295d8     0B 10 DC FC | 	rep	@LR__4273, #11
295dc                 | LR__4271
295dc     00 FB E1 F8 | 	getbyte	result1, _var01, #0
295e0     01 FA 45 F0 | 	shr	result1, #1
295e4     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
295e8     07 00 66 F0 | 	shl	_var01, #7
295ec     00 FB 01 F1 | 	add	result1, _var01
295f0     09 01 C2 FA | 	rdbyte	_var01, arg01
295f4     FD 00 02 F1 | 	add	_var01, result1
295f8     01 12 06 F1 | 	add	arg01, #1
295fc                 | LR__4272
295fc                 | LR__4273
295fc                 | ' 	return sum;
295fc     00 FB 01 F6 | 	mov	result1, _var01
29600                 | _fatfs_cc_sum_sfn_ret
29600     2D 00 64 FD | 	ret
29604                 | 
29604                 | _fatfs_cc_dir_read
29604     0C 4A 05 F6 | 	mov	COUNT_, #12
29608     A8 00 A0 FD | 	call	#pushregs_
2960c     09 1F 02 F6 | 	mov	local01, arg01
29610     0A 21 02 F6 | 	mov	local02, arg02
29614     04 22 06 F6 | 	mov	local03, #4
29618     0F 25 02 FB | 	rdlong	local04, local01
2961c     FF 26 06 F6 | 	mov	local05, #255
29620     FF 28 06 F6 | 	mov	local06, #255
29624                 | ' )
29624                 | ' {
29624                 | ' 	FRESULT res = FR_NO_FILE;
29624                 | ' 	FATFS *fs = dp->obj.fs;
29624                 | ' 	BYTE attr, b;
29624                 | ' 
29624                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
29624                 | ' 
29624                 | ' 
29624                 | ' 	while (dp->sect) {
29624                 | LR__4280
29624     18 1E 06 F1 | 	add	local01, #24
29628     0F FB 09 FB | 	rdlong	result1, local01 wz
2962c     18 1E 86 F1 | 	sub	local01, #24
29630     AC 01 90 AD |  if_e	jmp	#LR__4290
29634     18 1E 06 F1 | 	add	local01, #24
29638     0F 15 02 FB | 	rdlong	arg02, local01
2963c     18 1E 86 F1 | 	sub	local01, #24
29640     12 13 02 F6 | 	mov	arg01, local04
29644     AC ED BF FD | 	call	#_fatfs_cc_move_window
29648     FD 22 0A F6 | 	mov	local03, result1 wz
2964c     90 01 90 5D |  if_ne	jmp	#LR__4290
29650     1C 1E 06 F1 | 	add	local01, #28
29654     0F FB 01 FB | 	rdlong	result1, local01
29658     1C 1E 86 F1 | 	sub	local01, #28
2965c     FD 2A C2 FA | 	rdbyte	local07, result1
29660     15 FB 01 F6 | 	mov	result1, local07
29664     07 FA 4D F7 | 	zerox	result1, #7 wz
29668     04 22 06 A6 |  if_e	mov	local03, #4
2966c                 | ' 			res = FR_NO_FILE; break;
2966c     70 01 90 AD |  if_e	jmp	#LR__4290
29670     1C 1E 06 F1 | 	add	local01, #28
29674     0F 2D 02 FB | 	rdlong	local08, local01
29678     0B 2C 06 F1 | 	add	local08, #11
2967c     16 2F C2 FA | 	rdbyte	local09, local08
29680     3F 2E 06 F5 | 	and	local09, #63
29684     16 1E 86 F1 | 	sub	local01, #22
29688     0F 2F 42 FC | 	wrbyte	local09, local01
2968c     06 1E 86 F1 | 	sub	local01, #6
29690     15 FB E1 F8 | 	getbyte	result1, local07, #0
29694     E5 FA 0D F2 | 	cmp	result1, #229 wz
29698     15 2D 02 56 |  if_ne	mov	local08, local07
2969c     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
296a0     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
296a4     1C 00 90 AD |  if_e	jmp	#LR__4281
296a8     00 30 06 F6 | 	mov	local10, #0
296ac     17 2D E2 F8 | 	getbyte	local08, local09, #0
296b0     20 2C 26 F5 | 	andn	local08, #32
296b4     08 2C 0E F2 | 	cmp	local08, #8 wz
296b8     01 30 06 A6 |  if_e	mov	local10, #1
296bc     10 31 0A F2 | 	cmp	local10, local02 wz
296c0     08 00 90 AD |  if_e	jmp	#LR__4282
296c4                 | LR__4281
296c4     FF 26 06 F6 | 	mov	local05, #255
296c8     00 01 90 FD | 	jmp	#LR__4289
296cc                 | LR__4282
296cc     17 2F E2 F8 | 	getbyte	local09, local09, #0
296d0     0F 2E 0E F2 | 	cmp	local09, #15 wz
296d4     B4 00 90 5D |  if_ne	jmp	#LR__4286
296d8     15 33 E2 F8 | 	getbyte	local11, local07, #0
296dc     40 32 CE F7 | 	test	local11, #64 wz
296e0     30 00 90 AD |  if_e	jmp	#LR__4283
296e4     1C 1E 06 F1 | 	add	local01, #28
296e8     0F 33 02 FB | 	rdlong	local11, local01
296ec     0D 32 06 F1 | 	add	local11, #13
296f0     19 29 C2 FA | 	rdbyte	local06, local11
296f4     15 2B E2 F8 | 	getbyte	local07, local07, #0
296f8     BF 2A 06 F5 | 	and	local07, #191
296fc     15 27 02 F6 | 	mov	local05, local07
29700     0C 1E 86 F1 | 	sub	local01, #12
29704     0F 33 02 FB | 	rdlong	local11, local01
29708     1C 1E 06 F1 | 	add	local01, #28
2970c     0F 33 62 FC | 	wrlong	local11, local01
29710     2C 1E 86 F1 | 	sub	local01, #44
29714                 | LR__4283
29714     15 2D E2 F8 | 	getbyte	local08, local07, #0
29718     13 31 E2 F8 | 	getbyte	local10, local05, #0
2971c     18 2D 0A F2 | 	cmp	local08, local10 wz
29720     5C 00 90 5D |  if_ne	jmp	#LR__4284
29724     14 31 E2 F8 | 	getbyte	local10, local06, #0
29728     1C 1E 06 F1 | 	add	local01, #28
2972c     0F 2F 02 FB | 	rdlong	local09, local01
29730     1C 1E 86 F1 | 	sub	local01, #28
29734     0D 2E 06 F1 | 	add	local09, #13
29738     17 2D C2 FA | 	rdbyte	local08, local09
2973c     16 2F E2 F8 | 	getbyte	local09, local08, #0
29740     17 31 0A F2 | 	cmp	local10, local09 wz
29744     38 00 90 5D |  if_ne	jmp	#LR__4284
29748     0C 24 06 F1 | 	add	local04, #12
2974c     12 13 02 FB | 	rdlong	arg01, local04
29750     0C 24 86 F1 | 	sub	local04, #12
29754     1C 1E 06 F1 | 	add	local01, #28
29758     0F 35 02 FB | 	rdlong	local12, local01
2975c     1C 1E 86 F1 | 	sub	local01, #28
29760     1A 15 02 F6 | 	mov	arg02, local12
29764     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
29768     00 FA 4D F2 | 	cmps	result1, #0 wz
2976c     13 35 02 56 |  if_ne	mov	local12, local05
29770     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
29774     01 34 86 51 |  if_ne	sub	local12, #1
29778     1A 33 02 56 |  if_ne	mov	local11, local12
2977c     04 00 90 5D |  if_ne	jmp	#LR__4285
29780                 | LR__4284
29780     FF 32 06 F6 | 	mov	local11, #255
29784                 | LR__4285
29784     19 27 02 F6 | 	mov	local05, local11
29788     40 00 90 FD | 	jmp	#LR__4288
2978c                 | LR__4286
2978c     13 33 02 F6 | 	mov	local11, local05
29790     07 32 4E F7 | 	zerox	local11, #7 wz
29794     20 00 90 5D |  if_ne	jmp	#LR__4287
29798     14 29 E2 F8 | 	getbyte	local06, local06, #0
2979c     1C 1E 06 F1 | 	add	local01, #28
297a0     0F 13 02 FB | 	rdlong	arg01, local01
297a4     1C 1E 86 F1 | 	sub	local01, #28
297a8     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
297ac     FD FA E1 F8 | 	getbyte	result1, result1, #0
297b0     FD 28 0A F2 | 	cmp	local06, result1 wz
297b4     28 00 90 AD |  if_e	jmp	#LR__4290
297b8                 | LR__4287
297b8     2C 1E 06 F1 | 	add	local01, #44
297bc     FF FF FF FF 
297c0     0F FF 6B FC | 	wrlong	##-1, local01
297c4     2C 1E 86 F1 | 	sub	local01, #44
297c8                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
297c8                 | ' 					}
297c8                 | ' 					break;
297c8     14 00 90 FD | 	jmp	#LR__4290
297cc                 | LR__4288
297cc                 | LR__4289
297cc     0F 13 02 F6 | 	mov	arg01, local01
297d0     00 14 06 F6 | 	mov	arg02, #0
297d4     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
297d8     FD 22 0A F6 | 	mov	local03, result1 wz
297dc     44 FE 9F AD |  if_e	jmp	#LR__4280
297e0                 | LR__4290
297e0     00 22 0E F2 | 	cmp	local03, #0 wz
297e4     18 1E 06 51 |  if_ne	add	local01, #24
297e8     0F 01 68 5C |  if_ne	wrlong	#0, local01
297ec                 | ' 	return res;
297ec     11 FB 01 F6 | 	mov	result1, local03
297f0     A7 F0 03 F6 | 	mov	ptra, fp
297f4     B2 00 A0 FD | 	call	#popregs_
297f8                 | _fatfs_cc_dir_read_ret
297f8     2D 00 64 FD | 	ret
297fc                 | 
297fc                 | _fatfs_cc_dir_find
297fc     0B 4A 05 F6 | 	mov	COUNT_, #11
29800     A8 00 A0 FD | 	call	#pushregs_
29804     09 1F 02 F6 | 	mov	local01, arg01
29808     0F 21 02 FB | 	rdlong	local02, local01
2980c     0F 13 02 F6 | 	mov	arg01, local01
29810     00 14 06 F6 | 	mov	arg02, #0
29814     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
29818     00 FA 0D F2 | 	cmp	result1, #0 wz
2981c     18 02 90 5D |  if_ne	jmp	#LR__4312
29820     FF 22 06 F6 | 	mov	local03, #255
29824     FF 24 06 F6 | 	mov	local04, #255
29828     2C 1E 06 F1 | 	add	local01, #44
2982c     FF FF FF FF 
29830     0F FF 6B FC | 	wrlong	##-1, local01
29834     2C 1E 86 F1 | 	sub	local01, #44
29838                 | ' #line 2404 "ff.c"
29838                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
29838                 | ' 
29838                 | ' 	do {
29838                 | LR__4300
29838     18 1E 06 F1 | 	add	local01, #24
2983c     0F 15 02 FB | 	rdlong	arg02, local01
29840     18 1E 86 F1 | 	sub	local01, #24
29844     10 13 02 F6 | 	mov	arg01, local02
29848     A8 EB BF FD | 	call	#_fatfs_cc_move_window
2984c     FD 26 0A F6 | 	mov	local05, result1 wz
29850     E0 01 90 5D |  if_ne	jmp	#LR__4311
29854     1C 1E 06 F1 | 	add	local01, #28
29858     0F 17 02 FB | 	rdlong	arg03, local01
2985c     1C 1E 86 F1 | 	sub	local01, #28
29860     0B 29 C2 FA | 	rdbyte	local06, arg03
29864     14 17 02 F6 | 	mov	arg03, local06
29868     07 16 4E F7 | 	zerox	arg03, #7 wz
2986c     04 26 06 A6 |  if_e	mov	local05, #4
29870     C0 01 90 AD |  if_e	jmp	#LR__4311
29874     1C 1E 06 F1 | 	add	local01, #28
29878     0F 2B 02 FB | 	rdlong	local07, local01
2987c     15 17 02 F6 | 	mov	arg03, local07
29880     0B 16 06 F1 | 	add	arg03, #11
29884     0B 2D C2 FA | 	rdbyte	local08, arg03
29888     3F 2C 06 F5 | 	and	local08, #63
2988c     16 1E 86 F1 | 	sub	local01, #22
29890     0F 2D 42 FC | 	wrbyte	local08, local01
29894     06 1E 86 F1 | 	sub	local01, #6
29898     14 17 E2 F8 | 	getbyte	arg03, local06, #0
2989c     E5 16 0E F2 | 	cmp	arg03, #229 wz
298a0     18 00 90 AD |  if_e	jmp	#LR__4301
298a4     16 17 E2 F8 | 	getbyte	arg03, local08, #0
298a8     08 16 CE F7 | 	test	arg03, #8 wz
298ac     16 2B 02 56 |  if_ne	mov	local07, local08
298b0     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
298b4     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
298b8     18 00 90 AD |  if_e	jmp	#LR__4302
298bc                 | LR__4301
298bc     FF 24 06 F6 | 	mov	local04, #255
298c0     2C 1E 06 F1 | 	add	local01, #44
298c4     FF FF FF FF 
298c8     0F FF 6B FC | 	wrlong	##-1, local01
298cc     2C 1E 86 F1 | 	sub	local01, #44
298d0     4C 01 90 FD | 	jmp	#LR__4310
298d4                 | LR__4302
298d4     16 2D E2 F8 | 	getbyte	local08, local08, #0
298d8     0F 2C 0E F2 | 	cmp	local08, #15 wz
298dc     C8 00 90 5D |  if_ne	jmp	#LR__4306
298e0     2B 1E 06 F1 | 	add	local01, #43
298e4     0F 2D C2 FA | 	rdbyte	local08, local01
298e8     2B 1E 86 F1 | 	sub	local01, #43
298ec     40 2C CE F7 | 	test	local08, #64 wz
298f0     2C 01 90 5D |  if_ne	jmp	#LR__4309
298f4     14 2F E2 F8 | 	getbyte	local09, local06, #0
298f8     40 2E CE F7 | 	test	local09, #64 wz
298fc     30 00 90 AD |  if_e	jmp	#LR__4303
29900     1C 1E 06 F1 | 	add	local01, #28
29904     0F 2F 02 FB | 	rdlong	local09, local01
29908     0D 2E 06 F1 | 	add	local09, #13
2990c     17 23 C2 FA | 	rdbyte	local03, local09
29910     14 29 E2 F8 | 	getbyte	local06, local06, #0
29914     BF 28 06 F5 | 	and	local06, #191
29918     14 25 02 F6 | 	mov	local04, local06
2991c     0C 1E 86 F1 | 	sub	local01, #12
29920     0F 2F 02 FB | 	rdlong	local09, local01
29924     1C 1E 06 F1 | 	add	local01, #28
29928     0F 2F 62 FC | 	wrlong	local09, local01
2992c     2C 1E 86 F1 | 	sub	local01, #44
29930                 | LR__4303
29930     14 31 E2 F8 | 	getbyte	local10, local06, #0
29934     12 2B E2 F8 | 	getbyte	local07, local04, #0
29938     15 31 0A F2 | 	cmp	local10, local07 wz
2993c     5C 00 90 5D |  if_ne	jmp	#LR__4304
29940     11 2D E2 F8 | 	getbyte	local08, local03, #0
29944     1C 1E 06 F1 | 	add	local01, #28
29948     0F 2B 02 FB | 	rdlong	local07, local01
2994c     1C 1E 86 F1 | 	sub	local01, #28
29950     0D 2A 06 F1 | 	add	local07, #13
29954     15 29 C2 FA | 	rdbyte	local06, local07
29958     14 2B E2 F8 | 	getbyte	local07, local06, #0
2995c     15 2D 0A F2 | 	cmp	local08, local07 wz
29960     38 00 90 5D |  if_ne	jmp	#LR__4304
29964     0C 20 06 F1 | 	add	local02, #12
29968     10 13 02 FB | 	rdlong	arg01, local02
2996c     0C 20 86 F1 | 	sub	local02, #12
29970     1C 1E 06 F1 | 	add	local01, #28
29974     0F 33 02 FB | 	rdlong	local11, local01
29978     1C 1E 86 F1 | 	sub	local01, #28
2997c     19 15 02 F6 | 	mov	arg02, local11
29980     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
29984     00 FA 4D F2 | 	cmps	result1, #0 wz
29988     12 33 02 56 |  if_ne	mov	local11, local04
2998c     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
29990     01 32 86 51 |  if_ne	sub	local11, #1
29994     19 2F 02 56 |  if_ne	mov	local09, local11
29998     04 00 90 5D |  if_ne	jmp	#LR__4305
2999c                 | LR__4304
2999c     FF 2E 06 F6 | 	mov	local09, #255
299a0                 | LR__4305
299a0     17 25 02 F6 | 	mov	local04, local09
299a4     78 00 90 FD | 	jmp	#LR__4309
299a8                 | LR__4306
299a8     12 2F 02 F6 | 	mov	local09, local04
299ac     07 2E 4E F7 | 	zerox	local09, #7 wz
299b0     20 00 90 5D |  if_ne	jmp	#LR__4307
299b4     11 31 E2 F8 | 	getbyte	local10, local03, #0
299b8     1C 1E 06 F1 | 	add	local01, #28
299bc     0F 13 02 FB | 	rdlong	arg01, local01
299c0     1C 1E 86 F1 | 	sub	local01, #28
299c4     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
299c8     FD FA E1 F8 | 	getbyte	result1, result1, #0
299cc     FD 30 0A F2 | 	cmp	local10, result1 wz
299d0     60 00 90 AD |  if_e	jmp	#LR__4311
299d4                 | LR__4307
299d4     2B 1E 06 F1 | 	add	local01, #43
299d8     0F 2F C2 FA | 	rdbyte	local09, local01
299dc     2B 1E 86 F1 | 	sub	local01, #43
299e0     01 2E CE F7 | 	test	local09, #1 wz
299e4     24 00 90 5D |  if_ne	jmp	#LR__4308
299e8     1C 1E 06 F1 | 	add	local01, #28
299ec     0F 13 02 FB | 	rdlong	arg01, local01
299f0     04 1E 06 F1 | 	add	local01, #4
299f4     0F 15 02 F6 | 	mov	arg02, local01
299f8     20 1E 86 F1 | 	sub	local01, #32
299fc     0B 16 06 F6 | 	mov	arg03, #11
29a00     88 DA BF FD | 	call	#_fatfs_cc_memcmp
29a04     00 FA 0D F2 | 	cmp	result1, #0 wz
29a08     28 00 90 AD |  if_e	jmp	#LR__4311
29a0c                 | LR__4308
29a0c     FF 24 06 F6 | 	mov	local04, #255
29a10     2C 1E 06 F1 | 	add	local01, #44
29a14     FF FF FF FF 
29a18     0F FF 6B FC | 	wrlong	##-1, local01
29a1c     2C 1E 86 F1 | 	sub	local01, #44
29a20                 | LR__4309
29a20                 | LR__4310
29a20     0F 13 02 F6 | 	mov	arg01, local01
29a24     00 14 06 F6 | 	mov	arg02, #0
29a28     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
29a2c     FD 26 0A F6 | 	mov	local05, result1 wz
29a30     04 FE 9F AD |  if_e	jmp	#LR__4300
29a34                 | LR__4311
29a34                 | ' 
29a34                 | ' 	return res;
29a34     13 FB 01 F6 | 	mov	result1, local05
29a38                 | LR__4312
29a38     A7 F0 03 F6 | 	mov	ptra, fp
29a3c     B2 00 A0 FD | 	call	#popregs_
29a40                 | _fatfs_cc_dir_find_ret
29a40     2D 00 64 FD | 	ret
29a44                 | 
29a44                 | _fatfs_cc_dir_register
29a44     0A 4A 05 F6 | 	mov	COUNT_, #10
29a48     A8 00 A0 FD | 	call	#pushregs_
29a4c     2C F0 07 F1 | 	add	ptra, #44
29a50     04 4E 05 F1 | 	add	fp, #4
29a54     A7 12 62 FC | 	wrlong	arg01, fp
29a58     09 1F 02 FB | 	rdlong	local01, arg01
29a5c     08 4E 05 F1 | 	add	fp, #8
29a60     A7 1E 62 FC | 	wrlong	local01, fp
29a64     08 4E 85 F1 | 	sub	fp, #8
29a68     A7 20 02 FB | 	rdlong	local02, fp
29a6c     04 4E 85 F1 | 	sub	fp, #4
29a70     2B 20 06 F1 | 	add	local02, #43
29a74     10 21 C2 FA | 	rdbyte	local02, local02
29a78     A0 20 CE F7 | 	test	local02, #160 wz
29a7c     06 FA 05 56 |  if_ne	mov	result1, #6
29a80     F8 03 90 5D |  if_ne	jmp	#LR__4335
29a84                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
29a84     14 4E 05 F1 | 	add	fp, #20
29a88     A7 00 68 FC | 	wrlong	#0, fp
29a8c     14 4E 85 F1 | 	sub	fp, #20
29a90     97 28 48 FB | 	callpa	#(@LR__4321-@LR__4320)>>2,fcache_load_ptr_
29a94                 | LR__4320
29a94     0C 4E 05 F1 | 	add	fp, #12
29a98     A7 20 02 FB | 	rdlong	local02, fp
29a9c     0C 20 06 F1 | 	add	local02, #12
29aa0     10 23 02 FB | 	rdlong	local03, local02
29aa4     08 4E 05 F1 | 	add	fp, #8
29aa8     A7 24 02 FB | 	rdlong	local04, fp
29aac     14 4E 85 F1 | 	sub	fp, #20
29ab0     01 24 66 F0 | 	shl	local04, #1
29ab4     11 25 02 F1 | 	add	local04, local03
29ab8     12 21 EA FA | 	rdword	local02, local04 wz
29abc     24 00 90 AD |  if_e	jmp	#LR__4322
29ac0     14 4E 05 F1 | 	add	fp, #20
29ac4     A7 26 02 FB | 	rdlong	local05, fp
29ac8     13 29 02 F6 | 	mov	local06, local05
29acc     13 2B 02 F6 | 	mov	local07, local05
29ad0     15 2D 02 F6 | 	mov	local08, local07
29ad4     01 2C 06 F1 | 	add	local08, #1
29ad8     A7 2C 62 FC | 	wrlong	local08, fp
29adc     14 4E 85 F1 | 	sub	fp, #20
29ae0     B0 FF 9F FD | 	jmp	#LR__4320
29ae4                 | LR__4321
29ae4                 | LR__4322
29ae4     1C 4E 05 F1 | 	add	fp, #28
29ae8     A7 12 02 F6 | 	mov	arg01, fp
29aec     18 4E 85 F1 | 	sub	fp, #24
29af0     A7 14 02 FB | 	rdlong	arg02, fp
29af4     04 4E 85 F1 | 	sub	fp, #4
29af8     20 14 06 F1 | 	add	arg02, #32
29afc     0C 16 06 F6 | 	mov	arg03, #12
29b00     04 6F BF FD | 	call	#__system____builtin_memmove
29b04     27 4E 05 F1 | 	add	fp, #39
29b08     A7 2E C2 FA | 	rdbyte	local09, fp
29b0c     27 4E 85 F1 | 	sub	fp, #39
29b10     01 2E CE F7 | 	test	local09, #1 wz
29b14     F4 00 90 AD |  if_e	jmp	#LR__4325
29b18     04 4E 05 F1 | 	add	fp, #4
29b1c     A7 30 02 FB | 	rdlong	local10, fp
29b20     2B 30 06 F1 | 	add	local10, #43
29b24     18 81 48 FC | 	wrbyte	#64, local10
29b28                 | ' 		dp->fn[ 11 ] =  0x40 ;
29b28                 | ' 		for (n = 1; n < 100; n++) {
29b28     0C 4E 05 F1 | 	add	fp, #12
29b2c     A7 02 68 FC | 	wrlong	#1, fp
29b30     10 4E 85 F1 | 	sub	fp, #16
29b34                 | LR__4323
29b34     10 4E 05 F1 | 	add	fp, #16
29b38     A7 20 02 FB | 	rdlong	local02, fp
29b3c     10 4E 85 F1 | 	sub	fp, #16
29b40     64 20 16 F2 | 	cmp	local02, #100 wc
29b44     70 00 90 3D |  if_ae	jmp	#LR__4324
29b48     04 4E 05 F1 | 	add	fp, #4
29b4c     A7 12 02 FB | 	rdlong	arg01, fp
29b50     20 12 06 F1 | 	add	arg01, #32
29b54     18 4E 05 F1 | 	add	fp, #24
29b58     A7 14 02 F6 | 	mov	arg02, fp
29b5c     10 4E 85 F1 | 	sub	fp, #16
29b60     A7 30 02 FB | 	rdlong	local10, fp
29b64     0C 30 06 F1 | 	add	local10, #12
29b68     18 17 02 FB | 	rdlong	arg03, local10
29b6c     04 4E 05 F1 | 	add	fp, #4
29b70     A7 18 02 FB | 	rdlong	arg04, fp
29b74     10 4E 85 F1 | 	sub	fp, #16
29b78     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
29b7c     04 4E 05 F1 | 	add	fp, #4
29b80     A7 12 02 FB | 	rdlong	arg01, fp
29b84     04 4E 85 F1 | 	sub	fp, #4
29b88     70 FC BF FD | 	call	#_fatfs_cc_dir_find
29b8c     08 4E 05 F1 | 	add	fp, #8
29b90     A7 FA 61 FC | 	wrlong	result1, fp
29b94     00 FA 4D F2 | 	cmps	result1, #0 wz
29b98     08 4E 85 F1 | 	sub	fp, #8
29b9c     18 00 90 5D |  if_ne	jmp	#LR__4324
29ba0     10 4E 05 F1 | 	add	fp, #16
29ba4     A7 30 02 FB | 	rdlong	local10, fp
29ba8     01 30 06 F1 | 	add	local10, #1
29bac     A7 30 62 FC | 	wrlong	local10, fp
29bb0     10 4E 85 F1 | 	sub	fp, #16
29bb4     7C FF 9F FD | 	jmp	#LR__4323
29bb8                 | LR__4324
29bb8     10 4E 05 F1 | 	add	fp, #16
29bbc     A7 30 02 FB | 	rdlong	local10, fp
29bc0     10 4E 85 F1 | 	sub	fp, #16
29bc4     64 30 0E F2 | 	cmp	local10, #100 wz
29bc8     07 FA 05 A6 |  if_e	mov	result1, #7
29bcc     AC 02 90 AD |  if_e	jmp	#LR__4335
29bd0     08 4E 05 F1 | 	add	fp, #8
29bd4     A7 30 02 FB | 	rdlong	local10, fp
29bd8     08 4E 85 F1 | 	sub	fp, #8
29bdc     04 30 0E F2 | 	cmp	local10, #4 wz
29be0     08 4E 05 51 |  if_ne	add	fp, #8
29be4     A7 FA 01 5B |  if_ne	rdlong	result1, fp
29be8     08 4E 85 51 |  if_ne	sub	fp, #8
29bec     8C 02 90 5D |  if_ne	jmp	#LR__4335
29bf0     04 4E 05 F1 | 	add	fp, #4
29bf4     A7 30 02 FB | 	rdlong	local10, fp
29bf8     23 4E 05 F1 | 	add	fp, #35
29bfc     A7 1E C2 FA | 	rdbyte	local01, fp
29c00     27 4E 85 F1 | 	sub	fp, #39
29c04     2B 30 06 F1 | 	add	local10, #43
29c08     18 1F 42 FC | 	wrbyte	local01, local10
29c0c                 | LR__4325
29c0c     27 4E 05 F1 | 	add	fp, #39
29c10     A7 20 C2 FA | 	rdbyte	local02, fp
29c14     27 4E 85 F1 | 	sub	fp, #39
29c18     02 20 CE F7 | 	test	local02, #2 wz
29c1c     20 00 90 AD |  if_e	jmp	#LR__4326
29c20     14 4E 05 F1 | 	add	fp, #20
29c24     A7 30 02 FB | 	rdlong	local10, fp
29c28     0C 30 06 F1 | 	add	local10, #12
29c2c     0D 30 16 FD | 	qdiv	local10, #13
29c30     14 4E 85 F1 | 	sub	fp, #20
29c34     18 30 62 FD | 	getqx	local10
29c38     01 30 06 F1 | 	add	local10, #1
29c3c     04 00 90 FD | 	jmp	#LR__4327
29c40                 | LR__4326
29c40     01 30 06 F6 | 	mov	local10, #1
29c44                 | LR__4327
29c44     18 4E 05 F1 | 	add	fp, #24
29c48     A7 30 62 FC | 	wrlong	local10, fp
29c4c     14 4E 85 F1 | 	sub	fp, #20
29c50     A7 12 02 FB | 	rdlong	arg01, fp
29c54     18 15 02 F6 | 	mov	arg02, local10
29c58     04 4E 85 F1 | 	sub	fp, #4
29c5c     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
29c60     08 4E 05 F1 | 	add	fp, #8
29c64     A7 FA 61 FC | 	wrlong	result1, fp
29c68     08 4E 85 F1 | 	sub	fp, #8
29c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
29c70     38 01 90 5D |  if_ne	jmp	#LR__4332
29c74     18 4E 05 F1 | 	add	fp, #24
29c78     A7 30 02 FB | 	rdlong	local10, fp
29c7c     01 30 8E F1 | 	sub	local10, #1 wz
29c80     A7 30 62 FC | 	wrlong	local10, fp
29c84     18 4E 85 F1 | 	sub	fp, #24
29c88     20 01 90 AD |  if_e	jmp	#LR__4332
29c8c     04 4E 05 F1 | 	add	fp, #4
29c90     A7 30 02 FB | 	rdlong	local10, fp
29c94     18 13 02 F6 | 	mov	arg01, local10
29c98     14 4E 05 F1 | 	add	fp, #20
29c9c     A7 18 02 FB | 	rdlong	arg04, fp
29ca0     18 4E 85 F1 | 	sub	fp, #24
29ca4     05 18 66 F0 | 	shl	arg04, #5
29ca8     10 30 06 F1 | 	add	local10, #16
29cac     18 15 02 FB | 	rdlong	arg02, local10
29cb0     0C 15 82 F1 | 	sub	arg02, arg04
29cb4     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
29cb8     08 4E 05 F1 | 	add	fp, #8
29cbc     A7 FA 61 FC | 	wrlong	result1, fp
29cc0     08 4E 85 F1 | 	sub	fp, #8
29cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
29cc8     E0 00 90 5D |  if_ne	jmp	#LR__4331
29ccc     04 4E 05 F1 | 	add	fp, #4
29cd0     A7 12 02 FB | 	rdlong	arg01, fp
29cd4     04 4E 85 F1 | 	sub	fp, #4
29cd8     20 12 06 F1 | 	add	arg01, #32
29cdc     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
29ce0     FD 30 02 F6 | 	mov	local10, result1
29ce4     28 4E 05 F1 | 	add	fp, #40
29ce8     A7 30 42 FC | 	wrbyte	local10, fp
29cec     28 4E 85 F1 | 	sub	fp, #40
29cf0                 | ' 			sum = sum_sfn(dp->fn);
29cf0                 | ' 			do {
29cf0                 | LR__4328
29cf0     0C 4E 05 F1 | 	add	fp, #12
29cf4     A7 12 02 FB | 	rdlong	arg01, fp
29cf8     08 4E 85 F1 | 	sub	fp, #8
29cfc     A7 1E 02 FB | 	rdlong	local01, fp
29d00     04 4E 85 F1 | 	sub	fp, #4
29d04     18 1E 06 F1 | 	add	local01, #24
29d08     0F 15 02 FB | 	rdlong	arg02, local01
29d0c     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
29d10     08 4E 05 F1 | 	add	fp, #8
29d14     A7 FA 61 FC | 	wrlong	result1, fp
29d18     00 FA 4D F2 | 	cmps	result1, #0 wz
29d1c     08 4E 85 F1 | 	sub	fp, #8
29d20     88 00 90 5D |  if_ne	jmp	#LR__4330
29d24     0C 4E 05 F1 | 	add	fp, #12
29d28     A7 20 02 FB | 	rdlong	local02, fp
29d2c     0C 20 06 F1 | 	add	local02, #12
29d30     10 13 02 FB | 	rdlong	arg01, local02
29d34     08 4E 85 F1 | 	sub	fp, #8
29d38     A7 1E 02 FB | 	rdlong	local01, fp
29d3c     1C 1E 06 F1 | 	add	local01, #28
29d40     0F 15 02 FB | 	rdlong	arg02, local01
29d44     14 4E 05 F1 | 	add	fp, #20
29d48     A7 16 02 FB | 	rdlong	arg03, fp
29d4c     10 4E 05 F1 | 	add	fp, #16
29d50     A7 18 C2 FA | 	rdbyte	arg04, fp
29d54     28 4E 85 F1 | 	sub	fp, #40
29d58     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
29d5c     0C 4E 05 F1 | 	add	fp, #12
29d60     A7 30 02 FB | 	rdlong	local10, fp
29d64     03 30 06 F1 | 	add	local10, #3
29d68     18 03 48 FC | 	wrbyte	#1, local10
29d6c     08 4E 85 F1 | 	sub	fp, #8
29d70     A7 12 02 FB | 	rdlong	arg01, fp
29d74     04 4E 85 F1 | 	sub	fp, #4
29d78     00 14 06 F6 | 	mov	arg02, #0
29d7c     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
29d80     08 4E 05 F1 | 	add	fp, #8
29d84     A7 FA 61 FC | 	wrlong	result1, fp
29d88     00 FA 4D F2 | 	cmps	result1, #0 wz
29d8c     08 4E 85 F1 | 	sub	fp, #8
29d90     18 00 90 5D |  if_ne	jmp	#LR__4329
29d94     18 4E 05 F1 | 	add	fp, #24
29d98     A7 30 02 FB | 	rdlong	local10, fp
29d9c     01 30 8E F1 | 	sub	local10, #1 wz
29da0     A7 30 62 FC | 	wrlong	local10, fp
29da4     18 4E 85 F1 | 	sub	fp, #24
29da8     44 FF 9F 5D |  if_ne	jmp	#LR__4328
29dac                 | LR__4329
29dac                 | LR__4330
29dac                 | LR__4331
29dac                 | LR__4332
29dac     08 4E 05 F1 | 	add	fp, #8
29db0     A7 30 0A FB | 	rdlong	local10, fp wz
29db4     08 4E 85 F1 | 	sub	fp, #8
29db8     B4 00 90 5D |  if_ne	jmp	#LR__4334
29dbc     0C 4E 05 F1 | 	add	fp, #12
29dc0     A7 12 02 FB | 	rdlong	arg01, fp
29dc4     08 4E 85 F1 | 	sub	fp, #8
29dc8     A7 1E 02 FB | 	rdlong	local01, fp
29dcc     04 4E 85 F1 | 	sub	fp, #4
29dd0     18 1E 06 F1 | 	add	local01, #24
29dd4     0F 15 02 FB | 	rdlong	arg02, local01
29dd8     18 E6 BF FD | 	call	#_fatfs_cc_move_window
29ddc     08 4E 05 F1 | 	add	fp, #8
29de0     A7 FA 61 FC | 	wrlong	result1, fp
29de4     08 4E 85 F1 | 	sub	fp, #8
29de8     00 FA 0D F2 | 	cmp	result1, #0 wz
29dec     80 00 90 5D |  if_ne	jmp	#LR__4333
29df0     04 4E 05 F1 | 	add	fp, #4
29df4     A7 20 02 FB | 	rdlong	local02, fp
29df8     04 4E 85 F1 | 	sub	fp, #4
29dfc     1C 20 06 F1 | 	add	local02, #28
29e00     10 13 02 FB | 	rdlong	arg01, local02
29e04     00 14 06 F6 | 	mov	arg02, #0
29e08     20 16 06 F6 | 	mov	arg03, #32
29e0c     98 00 A0 FD | 	call	#\builtin_bytefill_
29e10     04 4E 05 F1 | 	add	fp, #4
29e14     A7 14 02 FB | 	rdlong	arg02, fp
29e18     0A 1F 02 F6 | 	mov	local01, arg02
29e1c     1C 1E 06 F1 | 	add	local01, #28
29e20     0F 13 02 FB | 	rdlong	arg01, local01
29e24     04 4E 85 F1 | 	sub	fp, #4
29e28     20 14 06 F1 | 	add	arg02, #32
29e2c     0B 16 06 F6 | 	mov	arg03, #11
29e30     D4 6B BF FD | 	call	#__system____builtin_memmove
29e34     04 4E 05 F1 | 	add	fp, #4
29e38     A7 2E 02 FB | 	rdlong	local09, fp
29e3c     17 31 02 F6 | 	mov	local10, local09
29e40     1C 30 06 F1 | 	add	local10, #28
29e44     18 1F 02 FB | 	rdlong	local01, local10
29e48     2B 2E 06 F1 | 	add	local09, #43
29e4c     17 31 C2 FA | 	rdbyte	local10, local09
29e50     18 30 06 F5 | 	and	local10, #24
29e54     0C 1E 06 F1 | 	add	local01, #12
29e58     0F 31 42 FC | 	wrbyte	local10, local01
29e5c     08 4E 05 F1 | 	add	fp, #8
29e60     A7 30 02 FB | 	rdlong	local10, fp
29e64     0C 4E 85 F1 | 	sub	fp, #12
29e68     03 30 06 F1 | 	add	local10, #3
29e6c     18 03 48 FC | 	wrbyte	#1, local10
29e70                 | LR__4333
29e70                 | LR__4334
29e70                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
29e70                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
29e70                 | ' 
29e70                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
29e70                 | ' 
29e70                 | ' 			fs->wflag = 1;
29e70                 | ' 		}
29e70                 | ' 	}
29e70                 | ' 
29e70                 | ' 	return res;
29e70     08 4E 05 F1 | 	add	fp, #8
29e74     A7 FA 01 FB | 	rdlong	result1, fp
29e78     08 4E 85 F1 | 	sub	fp, #8
29e7c                 | LR__4335
29e7c     A7 F0 03 F6 | 	mov	ptra, fp
29e80     B2 00 A0 FD | 	call	#popregs_
29e84                 | _fatfs_cc_dir_register_ret
29e84     2D 00 64 FD | 	ret
29e88                 | 
29e88                 | _fatfs_cc_dir_remove
29e88     05 4A 05 F6 | 	mov	COUNT_, #5
29e8c     A8 00 A0 FD | 	call	#pushregs_
29e90     09 1F 02 F6 | 	mov	local01, arg01
29e94     0F 21 02 FB | 	rdlong	local02, local01
29e98     10 1E 06 F1 | 	add	local01, #16
29e9c     0F 23 02 FB | 	rdlong	local03, local01
29ea0     1C 1E 06 F1 | 	add	local01, #28
29ea4     0F 15 02 FB | 	rdlong	arg02, local01
29ea8     2C 1E 86 F1 | 	sub	local01, #44
29eac     FF FF 7F FF 
29eb0     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
29eb4     00 24 06 A6 |  if_e	mov	local04, #0
29eb8     18 00 90 AD |  if_e	jmp	#LR__4340
29ebc     0F 13 02 F6 | 	mov	arg01, local01
29ec0     2C 1E 06 F1 | 	add	local01, #44
29ec4     0F 15 02 FB | 	rdlong	arg02, local01
29ec8     2C 1E 86 F1 | 	sub	local01, #44
29ecc     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
29ed0     FD 24 02 F6 | 	mov	local04, result1
29ed4                 | LR__4340
29ed4     12 27 0A F6 | 	mov	local05, local04 wz
29ed8     64 00 90 5D |  if_ne	jmp	#LR__4343
29edc                 | ' 		do {
29edc                 | LR__4341
29edc     18 1E 06 F1 | 	add	local01, #24
29ee0     0F 15 02 FB | 	rdlong	arg02, local01
29ee4     18 1E 86 F1 | 	sub	local01, #24
29ee8     10 13 02 F6 | 	mov	arg01, local02
29eec     04 E5 BF FD | 	call	#_fatfs_cc_move_window
29ef0     FD 26 0A F6 | 	mov	local05, result1 wz
29ef4     40 00 90 5D |  if_ne	jmp	#LR__4342
29ef8     1C 1E 06 F1 | 	add	local01, #28
29efc     0F 25 02 FB | 	rdlong	local04, local01
29f00     12 CB 49 FC | 	wrbyte	#229, local04
29f04     03 20 06 F1 | 	add	local02, #3
29f08     10 03 48 FC | 	wrbyte	#1, local02
29f0c     03 20 86 F1 | 	sub	local02, #3
29f10     0C 1E 86 F1 | 	sub	local01, #12
29f14     0F 25 02 FB | 	rdlong	local04, local01
29f18     10 1E 86 F1 | 	sub	local01, #16
29f1c     11 25 12 F2 | 	cmp	local04, local03 wc
29f20     14 00 90 3D |  if_ae	jmp	#LR__4342
29f24     0F 13 02 F6 | 	mov	arg01, local01
29f28     00 14 06 F6 | 	mov	arg02, #0
29f2c     90 EF BF FD | 	call	#_fatfs_cc_dir_next
29f30     FD 26 0A F6 | 	mov	local05, result1 wz
29f34     A4 FF 9F AD |  if_e	jmp	#LR__4341
29f38                 | LR__4342
29f38     04 26 0E F2 | 	cmp	local05, #4 wz
29f3c     02 26 06 A6 |  if_e	mov	local05, #2
29f40                 | LR__4343
29f40                 | ' 	}
29f40                 | ' #line 2590 "ff.c"
29f40                 | ' 	return res;
29f40     13 FB 01 F6 | 	mov	result1, local05
29f44     A7 F0 03 F6 | 	mov	ptra, fp
29f48     B2 00 A0 FD | 	call	#popregs_
29f4c                 | _fatfs_cc_dir_remove_ret
29f4c     2D 00 64 FD | 	ret
29f50                 | 
29f50                 | _fatfs_cc_get_fileinfo
29f50     0F 4A 05 F6 | 	mov	COUNT_, #15
29f54     A8 00 A0 FD | 	call	#pushregs_
29f58     09 1F 02 F6 | 	mov	local01, arg01
29f5c     0A 21 02 F6 | 	mov	local02, arg02
29f60     0F 23 02 FB | 	rdlong	local03, local01
29f64     1C 20 06 F1 | 	add	local02, #28
29f68     10 01 48 FC | 	wrbyte	#0, local02
29f6c     1C 20 86 F1 | 	sub	local02, #28
29f70     18 1E 06 F1 | 	add	local01, #24
29f74     0F 25 0A FB | 	rdlong	local04, local01 wz
29f78     18 1E 86 F1 | 	sub	local01, #24
29f7c     90 03 90 AD |  if_e	jmp	#LR__4364
29f80     2C 1E 06 F1 | 	add	local01, #44
29f84     0F 25 02 FB | 	rdlong	local04, local01
29f88     2C 1E 86 F1 | 	sub	local01, #44
29f8c     FF FF 7F FF 
29f90     FF 25 0E F2 | 	cmp	local04, ##-1 wz
29f94     D8 00 90 AD |  if_e	jmp	#LR__4353
29f98     00 26 06 F6 | 	mov	local05, #0
29f9c     00 28 06 F6 | 	mov	local06, #0
29fa0     00 2A 06 F6 | 	mov	local07, #0
29fa4                 | ' 			si = di = 0;
29fa4                 | ' 			hs = 0;
29fa4                 | ' 			while (fs->lfnbuf[si] != 0) {
29fa4                 | LR__4350
29fa4     0C 22 06 F1 | 	add	local03, #12
29fa8     11 25 02 FB | 	rdlong	local04, local03
29fac     0C 22 86 F1 | 	sub	local03, #12
29fb0     14 2D 02 F6 | 	mov	local08, local06
29fb4     01 2C 66 F0 | 	shl	local08, #1
29fb8     12 2D 02 F1 | 	add	local08, local04
29fbc     16 25 EA FA | 	rdword	local04, local08 wz
29fc0     90 00 90 AD |  if_e	jmp	#LR__4352
29fc4     0C 22 06 F1 | 	add	local03, #12
29fc8     11 2F 02 FB | 	rdlong	local09, local03
29fcc     0C 22 86 F1 | 	sub	local03, #12
29fd0     14 31 02 F6 | 	mov	local10, local06
29fd4     01 30 66 F0 | 	shl	local10, #1
29fd8     17 31 02 F1 | 	add	local10, local09
29fdc     18 33 E2 FA | 	rdword	local11, local10
29fe0     15 25 02 F6 | 	mov	local04, local07
29fe4     0F 24 4E F7 | 	zerox	local04, #15 wz
29fe8     01 28 06 F1 | 	add	local06, #1
29fec     24 00 90 5D |  if_ne	jmp	#LR__4351
29ff0     19 35 32 F9 | 	getword	local12, local11, #0
29ff4     6C 00 00 FF 
29ff8     00 34 16 F2 | 	cmp	local12, ##55296 wc
29ffc     14 00 90 CD |  if_b	jmp	#LR__4351
2a000     19 37 32 F9 | 	getword	local13, local11, #0
2a004     70 00 00 FF 
2a008     00 36 16 F2 | 	cmp	local13, ##57344 wc
2a00c     19 2B 02 C6 |  if_b	mov	local07, local11
2a010                 | ' 					hs = wc; continue;
2a010     90 FF 9F CD |  if_b	jmp	#LR__4350
2a014                 | LR__4351
2a014     15 13 32 F9 | 	getword	arg01, local07, #0
2a018     10 12 66 F0 | 	shl	arg01, #16
2a01c     19 33 32 F9 | 	getword	local11, local11, #0
2a020     19 13 42 F5 | 	or	arg01, local11
2a024     13 15 02 F6 | 	mov	arg02, local05
2a028     1C 20 06 F1 | 	add	local02, #28
2a02c     10 15 02 F1 | 	add	arg02, local02
2a030     FF 16 06 F6 | 	mov	arg03, #255
2a034     13 17 82 F1 | 	sub	arg03, local05
2a038     1C 20 86 F1 | 	sub	local02, #28
2a03c     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
2a040     FD 38 0A F6 | 	mov	local14, result1 wz
2a044     00 26 06 A6 |  if_e	mov	local05, #0
2a048     1C 27 02 51 |  if_ne	add	local05, local14
2a04c     00 2A 06 56 |  if_ne	mov	local07, #0
2a050     50 FF 9F 5D |  if_ne	jmp	#LR__4350
2a054                 | LR__4352
2a054     15 25 02 F6 | 	mov	local04, local07
2a058     0F 24 4E F7 | 	zerox	local04, #15 wz
2a05c     00 26 06 56 |  if_ne	mov	local05, #0
2a060     1C 20 06 F1 | 	add	local02, #28
2a064     10 27 02 F1 | 	add	local05, local02
2a068     13 01 48 FC | 	wrbyte	#0, local05
2a06c     1C 20 86 F1 | 	sub	local02, #28
2a070                 | LR__4353
2a070     00 26 06 F6 | 	mov	local05, #0
2a074     00 28 06 F6 | 	mov	local06, #0
2a078                 | ' 			fno->fname[di] = 0;
2a078                 | ' 		}
2a078                 | ' 	}
2a078                 | ' 
2a078                 | ' 	si = di = 0;
2a078                 | ' 	while (si < 11) {
2a078                 | LR__4354
2a078     0B 28 16 F2 | 	cmp	local06, #11 wc
2a07c     20 01 90 3D |  if_ae	jmp	#LR__4357
2a080     1C 1E 06 F1 | 	add	local01, #28
2a084     0F 2F 02 FB | 	rdlong	local09, local01
2a088     1C 1E 86 F1 | 	sub	local01, #28
2a08c     14 31 02 F6 | 	mov	local10, local06
2a090     17 31 02 F1 | 	add	local10, local09
2a094     18 33 C2 FA | 	rdbyte	local11, local10
2a098     19 25 32 F9 | 	getword	local04, local11, #0
2a09c     20 24 0E F2 | 	cmp	local04, #32 wz
2a0a0     01 28 06 F1 | 	add	local06, #1
2a0a4     D0 FF 9F AD |  if_e	jmp	#LR__4354
2a0a8     19 25 32 F9 | 	getword	local04, local11, #0
2a0ac     05 24 0E F2 | 	cmp	local04, #5 wz
2a0b0     E5 32 06 A6 |  if_e	mov	local11, #229
2a0b4     09 28 0E F2 | 	cmp	local06, #9 wz
2a0b8     20 00 90 5D |  if_ne	jmp	#LR__4355
2a0bc     0C 26 16 F2 | 	cmp	local05, #12 wc
2a0c0     18 00 90 3D |  if_ae	jmp	#LR__4355
2a0c4     13 37 02 F6 | 	mov	local13, local05
2a0c8     0C 20 06 F1 | 	add	local02, #12
2a0cc     10 37 02 F1 | 	add	local13, local02
2a0d0     1B 5D 48 FC | 	wrbyte	#46, local13
2a0d4     01 26 06 F1 | 	add	local05, #1
2a0d8     0C 20 86 F1 | 	sub	local02, #12
2a0dc                 | LR__4355
2a0dc     19 13 32 F9 | 	getword	arg01, local11, #0
2a0e0     07 12 4E F7 | 	zerox	arg01, #7 wz
2a0e4     00 FA 05 56 |  if_ne	mov	result1, #0
2a0e8                 | ' 
2a0e8                 | ' 	return 0;
2a0e8     00 FA 05 A6 |  if_e	mov	result1, #0
2a0ec     00 FA 0D F2 | 	cmp	result1, #0 wz
2a0f0     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
2a0f4     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
2a0f8     50 00 90 AD |  if_e	jmp	#LR__4356
2a0fc     1C 1E 06 F1 | 	add	local01, #28
2a100     0F 31 02 FB | 	rdlong	local10, local01
2a104     1C 1E 86 F1 | 	sub	local01, #28
2a108     14 2D 02 F6 | 	mov	local08, local06
2a10c     18 2D 02 F1 | 	add	local08, local10
2a110     16 13 CA FA | 	rdbyte	arg01, local08 wz
2a114     00 FA 05 56 |  if_ne	mov	result1, #0
2a118                 | ' 
2a118                 | ' 	return 0;
2a118     00 FA 05 A6 |  if_e	mov	result1, #0
2a11c     00 FA 0D F2 | 	cmp	result1, #0 wz
2a120     28 00 90 AD |  if_e	jmp	#LR__4356
2a124     19 33 32 F9 | 	getword	local11, local11, #0
2a128     08 32 66 F0 | 	shl	local11, #8
2a12c     1C 1E 06 F1 | 	add	local01, #28
2a130     0F 39 02 FB | 	rdlong	local14, local01
2a134     1C 1E 86 F1 | 	sub	local01, #28
2a138     14 2F 02 F6 | 	mov	local09, local06
2a13c     1C 2F 02 F1 | 	add	local09, local14
2a140     17 35 C2 FA | 	rdbyte	local12, local09
2a144     1A 33 42 F5 | 	or	local11, local12
2a148     01 28 06 F1 | 	add	local06, #1
2a14c                 | LR__4356
2a14c     19 13 02 F6 | 	mov	arg01, local11
2a150     01 00 00 FF 
2a154     52 15 06 F6 | 	mov	arg02, ##850
2a158     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
2a15c     FD 32 02 F6 | 	mov	local11, result1
2a160     19 25 02 F6 | 	mov	local04, local11
2a164     0F 24 4E F7 | 	zerox	local04, #15 wz
2a168     00 26 06 A6 |  if_e	mov	local05, #0
2a16c     30 00 90 AD |  if_e	jmp	#LR__4357
2a170     19 13 32 F9 | 	getword	arg01, local11, #0
2a174     13 15 02 F6 | 	mov	arg02, local05
2a178     0C 20 06 F1 | 	add	local02, #12
2a17c     10 15 02 F1 | 	add	arg02, local02
2a180     0C 16 06 F6 | 	mov	arg03, #12
2a184     13 17 82 F1 | 	sub	arg03, local05
2a188     0C 20 86 F1 | 	sub	local02, #12
2a18c     EC DF BF FD | 	call	#_fatfs_cc_put_utf
2a190     FD 38 0A F6 | 	mov	local14, result1 wz
2a194     00 26 06 A6 |  if_e	mov	local05, #0
2a198     1C 27 02 51 |  if_ne	add	local05, local14
2a19c     D8 FE 9F 5D |  if_ne	jmp	#LR__4354
2a1a0                 | LR__4357
2a1a0     13 25 02 F6 | 	mov	local04, local05
2a1a4     0C 20 06 F1 | 	add	local02, #12
2a1a8     10 25 02 F1 | 	add	local04, local02
2a1ac     12 01 48 FC | 	wrbyte	#0, local04
2a1b0     10 20 06 F1 | 	add	local02, #16
2a1b4     10 25 CA FA | 	rdbyte	local04, local02 wz
2a1b8     1C 20 86 F1 | 	sub	local02, #28
2a1bc     F8 00 90 5D |  if_ne	jmp	#LR__4363
2a1c0     00 26 0E F2 | 	cmp	local05, #0 wz
2a1c4     1C 00 90 5D |  if_ne	jmp	#LR__4358
2a1c8     13 37 02 F6 | 	mov	local13, local05
2a1cc     1C 20 06 F1 | 	add	local02, #28
2a1d0     10 37 02 F1 | 	add	local13, local02
2a1d4     1B 7F 48 FC | 	wrbyte	#63, local13
2a1d8     01 26 06 F1 | 	add	local05, #1
2a1dc     1C 20 86 F1 | 	sub	local02, #28
2a1e0     A4 00 90 FD | 	jmp	#LR__4362
2a1e4                 | LR__4358
2a1e4                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2a1e4     00 26 06 F6 | 	mov	local05, #0
2a1e8     00 28 06 F6 | 	mov	local06, #0
2a1ec     08 3A 06 F6 | 	mov	local15, #8
2a1f0                 | LR__4359
2a1f0     14 25 02 F6 | 	mov	local04, local06
2a1f4     0C 20 06 F1 | 	add	local02, #12
2a1f8     10 25 02 F1 | 	add	local04, local02
2a1fc     12 37 CA FA | 	rdbyte	local13, local04 wz
2a200     0C 20 86 F1 | 	sub	local02, #12
2a204     80 00 90 AD |  if_e	jmp	#LR__4361
2a208     14 2D 02 F6 | 	mov	local08, local06
2a20c     0C 20 06 F1 | 	add	local02, #12
2a210     10 2D 02 F1 | 	add	local08, local02
2a214     16 33 C2 FA | 	rdbyte	local11, local08
2a218     19 39 32 F9 | 	getword	local14, local11, #0
2a21c     2E 38 0E F2 | 	cmp	local14, #46 wz
2a220     0C 20 86 F1 | 	sub	local02, #12
2a224     10 3A 06 A6 |  if_e	mov	local15, #16
2a228     19 39 32 F9 | 	getword	local14, local11, #0
2a22c     41 38 16 F2 | 	cmp	local14, #65 wc
2a230     30 00 90 CD |  if_b	jmp	#LR__4360
2a234     19 2D 32 F9 | 	getword	local08, local11, #0
2a238     5B 2C 16 F2 | 	cmp	local08, #91 wc
2a23c     24 00 90 3D |  if_ae	jmp	#LR__4360
2a240     1C 1E 06 F1 | 	add	local01, #28
2a244     0F 2F 02 FB | 	rdlong	local09, local01
2a248     1C 1E 86 F1 | 	sub	local01, #28
2a24c     0C 2E 06 F1 | 	add	local09, #12
2a250     17 31 C2 FA | 	rdbyte	local10, local09
2a254     1D 39 E2 F8 | 	getbyte	local14, local15, #0
2a258     1C 31 CA F7 | 	test	local10, local14 wz
2a25c     19 33 32 59 |  if_ne	getword	local11, local11, #0
2a260     20 32 06 51 |  if_ne	add	local11, #32
2a264                 | LR__4360
2a264     13 39 02 F6 | 	mov	local14, local05
2a268     1C 20 06 F1 | 	add	local02, #28
2a26c     10 39 02 F1 | 	add	local14, local02
2a270     19 33 32 F9 | 	getword	local11, local11, #0
2a274     1C 33 42 FC | 	wrbyte	local11, local14
2a278     01 28 06 F1 | 	add	local06, #1
2a27c     01 26 06 F1 | 	add	local05, #1
2a280     1C 20 86 F1 | 	sub	local02, #28
2a284     68 FF 9F FD | 	jmp	#LR__4359
2a288                 | LR__4361
2a288                 | LR__4362
2a288     1C 20 06 F1 | 	add	local02, #28
2a28c     10 27 02 F1 | 	add	local05, local02
2a290     13 01 48 FC | 	wrbyte	#0, local05
2a294     1C 1E 06 F1 | 	add	local01, #28
2a298     0F 25 02 FB | 	rdlong	local04, local01
2a29c     1C 1E 86 F1 | 	sub	local01, #28
2a2a0     0C 24 06 F1 | 	add	local04, #12
2a2a4     12 37 CA FA | 	rdbyte	local13, local04 wz
2a2a8     1C 20 86 F1 | 	sub	local02, #28
2a2ac     0C 20 06 A1 |  if_e	add	local02, #12
2a2b0     10 01 48 AC |  if_e	wrbyte	#0, local02
2a2b4     0C 20 86 A1 |  if_e	sub	local02, #12
2a2b8                 | LR__4363
2a2b8     1C 1E 06 F1 | 	add	local01, #28
2a2bc     0F 35 02 FB | 	rdlong	local12, local01
2a2c0     0B 34 06 F1 | 	add	local12, #11
2a2c4     1A 25 C2 FA | 	rdbyte	local04, local12
2a2c8     3F 24 06 F5 | 	and	local04, #63
2a2cc     08 20 06 F1 | 	add	local02, #8
2a2d0     10 25 42 FC | 	wrbyte	local04, local02
2a2d4     08 20 86 F1 | 	sub	local02, #8
2a2d8     0F 13 02 FB | 	rdlong	arg01, local01
2a2dc     1C 12 06 F1 | 	add	arg01, #28
2a2e0                 | ' {
2a2e0                 | ' 
2a2e0                 | ' 	return *((DWORD*)ptr);
2a2e0     09 FB 01 FB | 	rdlong	result1, arg01
2a2e4     10 FB 61 FC | 	wrlong	result1, local02
2a2e8     0F 13 02 FB | 	rdlong	arg01, local01
2a2ec     16 12 06 F1 | 	add	arg01, #22
2a2f0                 | ' {
2a2f0                 | ' 
2a2f0                 | ' 	return *((WORD*)ptr);
2a2f0     09 FB E1 FA | 	rdword	result1, arg01
2a2f4     06 20 06 F1 | 	add	local02, #6
2a2f8     10 FB 51 FC | 	wrword	result1, local02
2a2fc     0F 13 02 FB | 	rdlong	arg01, local01
2a300     18 12 06 F1 | 	add	arg01, #24
2a304                 | ' {
2a304                 | ' 
2a304                 | ' 	return *((WORD*)ptr);
2a304     09 FB E1 FA | 	rdword	result1, arg01
2a308     02 20 86 F1 | 	sub	local02, #2
2a30c     10 FB 51 FC | 	wrword	result1, local02
2a310                 | LR__4364
2a310     A7 F0 03 F6 | 	mov	ptra, fp
2a314     B2 00 A0 FD | 	call	#popregs_
2a318                 | _fatfs_cc_get_fileinfo_ret
2a318     2D 00 64 FD | 	ret
2a31c                 | 
2a31c                 | _fatfs_cc_create_name
2a31c     0D 4A 05 F6 | 	mov	COUNT_, #13
2a320     A8 00 A0 FD | 	call	#pushregs_
2a324     34 F0 07 F1 | 	add	ptra, #52
2a328     04 4E 05 F1 | 	add	fp, #4
2a32c     A7 12 62 FC | 	wrlong	arg01, fp
2a330     04 4E 05 F1 | 	add	fp, #4
2a334     A7 14 62 FC | 	wrlong	arg02, fp
2a338     0A FB 01 FB | 	rdlong	result1, arg02
2a33c     28 4E 05 F1 | 	add	fp, #40
2a340     A7 FA 61 FC | 	wrlong	result1, fp
2a344     2C 4E 85 F1 | 	sub	fp, #44
2a348     A7 FA 01 FB | 	rdlong	result1, fp
2a34c     FD 1E 02 FB | 	rdlong	local01, result1
2a350     0C 1E 06 F1 | 	add	local01, #12
2a354     0F 21 02 FB | 	rdlong	local02, local01
2a358     14 4E 05 F1 | 	add	fp, #20
2a35c     A7 20 62 FC | 	wrlong	local02, fp
2a360     14 4E 05 F1 | 	add	fp, #20
2a364     A7 00 68 FC | 	wrlong	#0, fp
2a368     2C 4E 85 F1 | 	sub	fp, #44
2a36c                 | ' 
2a36c                 | ' 
2a36c                 | ' 
2a36c                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2a36c                 | ' 	for (;;) {
2a36c                 | LR__4370
2a36c     30 4E 05 F1 | 	add	fp, #48
2a370     A7 12 02 F6 | 	mov	arg01, fp
2a374     30 4E 85 F1 | 	sub	fp, #48
2a378     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
2a37c     1C 4E 05 F1 | 	add	fp, #28
2a380     A7 FA 61 FC | 	wrlong	result1, fp
2a384     1C 4E 85 F1 | 	sub	fp, #28
2a388     FF FF 7F FF 
2a38c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2a390     06 FA 05 A6 |  if_e	mov	result1, #6
2a394     74 08 90 AD |  if_e	jmp	#LR__4410
2a398     1C 4E 05 F1 | 	add	fp, #28
2a39c     A7 1E 02 FB | 	rdlong	local01, fp
2a3a0     1C 4E 85 F1 | 	sub	fp, #28
2a3a4     80 00 00 FF 
2a3a8     00 1E 16 F2 | 	cmp	local01, ##65536 wc
2a3ac     3C 00 90 CD |  if_b	jmp	#LR__4371
2a3b0     18 4E 05 F1 | 	add	fp, #24
2a3b4     A7 22 02 FB | 	rdlong	local03, fp
2a3b8     14 4E 05 F1 | 	add	fp, #20
2a3bc     A7 1E 02 FB | 	rdlong	local01, fp
2a3c0     0F 25 02 F6 | 	mov	local04, local01
2a3c4     01 24 06 F1 | 	add	local04, #1
2a3c8     A7 24 62 FC | 	wrlong	local04, fp
2a3cc     01 1E 66 F0 | 	shl	local01, #1
2a3d0     11 1F 02 F1 | 	add	local01, local03
2a3d4     10 4E 85 F1 | 	sub	fp, #16
2a3d8     A7 26 02 FB | 	rdlong	local05, fp
2a3dc     1C 4E 85 F1 | 	sub	fp, #28
2a3e0     13 29 02 F6 | 	mov	local06, local05
2a3e4     10 28 46 F0 | 	shr	local06, #16
2a3e8     0F 29 52 FC | 	wrword	local06, local01
2a3ec                 | LR__4371
2a3ec     1C 4E 05 F1 | 	add	fp, #28
2a3f0     A7 1E 02 FB | 	rdlong	local01, fp
2a3f4     08 4E 85 F1 | 	sub	fp, #8
2a3f8     A7 1E 52 FC | 	wrword	local01, fp
2a3fc     A7 1E E2 FA | 	rdword	local01, fp
2a400     14 4E 85 F1 | 	sub	fp, #20
2a404     20 1E 16 F2 | 	cmp	local01, #32 wc
2a408     B0 00 90 CD |  if_b	jmp	#LR__4373
2a40c     14 4E 05 F1 | 	add	fp, #20
2a410     A7 1E E2 FA | 	rdword	local01, fp
2a414     14 4E 85 F1 | 	sub	fp, #20
2a418     2F 1E 0E F2 | 	cmp	local01, #47 wz
2a41c     14 4E 05 51 |  if_ne	add	fp, #20
2a420     A7 24 E2 5A |  if_ne	rdword	local04, fp
2a424     14 4E 85 51 |  if_ne	sub	fp, #20
2a428     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
2a42c     8C 00 90 AD |  if_e	jmp	#LR__4373
2a430     14 4E 05 F1 | 	add	fp, #20
2a434     A7 12 E2 FA | 	rdword	arg01, fp
2a438     14 4E 85 F1 | 	sub	fp, #20
2a43c     80 12 16 F2 | 	cmp	arg01, #128 wc
2a440     24 00 90 3D |  if_ae	jmp	#LR__4372
2a444     81 01 00 FF 
2a448     80 13 06 F6 | 	mov	arg01, ##@LR__5032
2a44c     14 4E 05 F1 | 	add	fp, #20
2a450     A7 14 E2 FA | 	rdword	arg02, fp
2a454     14 4E 85 F1 | 	sub	fp, #20
2a458     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2a45c     00 FA 0D F2 | 	cmp	result1, #0 wz
2a460     06 FA 05 56 |  if_ne	mov	result1, #6
2a464     A4 07 90 5D |  if_ne	jmp	#LR__4410
2a468                 | LR__4372
2a468     2C 4E 05 F1 | 	add	fp, #44
2a46c     A7 28 02 FB | 	rdlong	local06, fp
2a470     2C 4E 85 F1 | 	sub	fp, #44
2a474     FF 28 16 F2 | 	cmp	local06, #255 wc
2a478     06 FA 05 36 |  if_ae	mov	result1, #6
2a47c     8C 07 90 3D |  if_ae	jmp	#LR__4410
2a480     18 4E 05 F1 | 	add	fp, #24
2a484     A7 22 02 FB | 	rdlong	local03, fp
2a488     14 4E 05 F1 | 	add	fp, #20
2a48c     A7 20 02 FB | 	rdlong	local02, fp
2a490     10 25 02 F6 | 	mov	local04, local02
2a494     01 24 06 F1 | 	add	local04, #1
2a498     A7 24 62 FC | 	wrlong	local04, fp
2a49c     10 1F 02 F6 | 	mov	local01, local02
2a4a0     01 1E 66 F0 | 	shl	local01, #1
2a4a4     11 1F 02 F1 | 	add	local01, local03
2a4a8     18 4E 85 F1 | 	sub	fp, #24
2a4ac     A7 28 E2 FA | 	rdword	local06, fp
2a4b0     14 4E 85 F1 | 	sub	fp, #20
2a4b4     0F 29 52 FC | 	wrword	local06, local01
2a4b8     B0 FE 9F FD | 	jmp	#LR__4370
2a4bc                 | LR__4373
2a4bc     14 4E 05 F1 | 	add	fp, #20
2a4c0     A7 2A E2 FA | 	rdword	local07, fp
2a4c4     14 4E 85 F1 | 	sub	fp, #20
2a4c8     20 2A 16 F2 | 	cmp	local07, #32 wc
2a4cc     10 4E 05 C1 |  if_b	add	fp, #16
2a4d0     A7 08 48 CC |  if_b	wrbyte	#4, fp
2a4d4     10 4E 85 C1 |  if_b	sub	fp, #16
2a4d8     74 00 90 CD |  if_b	jmp	#LR__4378
2a4dc     97 24 48 FB | 	callpa	#(@LR__4376-@LR__4374)>>2,fcache_load_ptr_
2a4e0                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2a4e0                 | LR__4374
2a4e0     30 4E 05 F1 | 	add	fp, #48
2a4e4     A7 24 02 FB | 	rdlong	local04, fp
2a4e8     30 4E 85 F1 | 	sub	fp, #48
2a4ec     12 2B C2 FA | 	rdbyte	local07, local04
2a4f0     2F 2A 0E F2 | 	cmp	local07, #47 wz
2a4f4     18 00 90 AD |  if_e	jmp	#LR__4375
2a4f8     30 4E 05 F1 | 	add	fp, #48
2a4fc     A7 24 02 FB | 	rdlong	local04, fp
2a500     30 4E 85 F1 | 	sub	fp, #48
2a504     12 21 C2 FA | 	rdbyte	local02, local04
2a508     5C 20 0E F2 | 	cmp	local02, #92 wz
2a50c     18 00 90 5D |  if_ne	jmp	#LR__4377
2a510                 | LR__4375
2a510     30 4E 05 F1 | 	add	fp, #48
2a514     A7 1E 02 FB | 	rdlong	local01, fp
2a518     01 1E 06 F1 | 	add	local01, #1
2a51c     A7 1E 62 FC | 	wrlong	local01, fp
2a520     30 4E 85 F1 | 	sub	fp, #48
2a524     B8 FF 9F FD | 	jmp	#LR__4374
2a528                 | LR__4376
2a528                 | LR__4377
2a528     10 4E 05 F1 | 	add	fp, #16
2a52c     A7 00 48 FC | 	wrbyte	#0, fp
2a530     20 4E 05 F1 | 	add	fp, #32
2a534     A7 28 02 FB | 	rdlong	local06, fp
2a538     30 4E 85 F1 | 	sub	fp, #48
2a53c     14 2B C2 FA | 	rdbyte	local07, local06
2a540     20 2A 16 F2 | 	cmp	local07, #32 wc
2a544     10 4E 05 C1 |  if_b	add	fp, #16
2a548     A7 08 48 CC |  if_b	wrbyte	#4, fp
2a54c     10 4E 85 C1 |  if_b	sub	fp, #16
2a550                 | LR__4378
2a550     08 4E 05 F1 | 	add	fp, #8
2a554     A7 2A 02 FB | 	rdlong	local07, fp
2a558     28 4E 05 F1 | 	add	fp, #40
2a55c     A7 1E 02 FB | 	rdlong	local01, fp
2a560     30 4E 85 F1 | 	sub	fp, #48
2a564     15 1F 62 FC | 	wrlong	local01, local07
2a568     97 38 48 FB | 	callpa	#(@LR__4380-@LR__4379)>>2,fcache_load_ptr_
2a56c                 | ' 	}
2a56c                 | ' 	*path = p;
2a56c                 | ' #line 2862 "ff.c"
2a56c                 | ' 	while (di) {
2a56c                 | LR__4379
2a56c     2C 4E 05 F1 | 	add	fp, #44
2a570     A7 2A 0A FB | 	rdlong	local07, fp wz
2a574     2C 4E 85 F1 | 	sub	fp, #44
2a578     60 00 90 AD |  if_e	jmp	#LR__4381
2a57c     18 4E 05 F1 | 	add	fp, #24
2a580     A7 28 02 FB | 	rdlong	local06, fp
2a584     14 4E 05 F1 | 	add	fp, #20
2a588     A7 24 02 FB | 	rdlong	local04, fp
2a58c     01 24 86 F1 | 	sub	local04, #1
2a590     01 24 66 F0 | 	shl	local04, #1
2a594     14 25 02 F1 | 	add	local04, local06
2a598     12 29 E2 FA | 	rdword	local06, local04
2a59c     18 4E 85 F1 | 	sub	fp, #24
2a5a0     A7 28 52 FC | 	wrword	local06, fp
2a5a4     A7 2A E2 FA | 	rdword	local07, fp
2a5a8     14 4E 85 F1 | 	sub	fp, #20
2a5ac     20 2A 0E F2 | 	cmp	local07, #32 wz
2a5b0     14 4E 05 51 |  if_ne	add	fp, #20
2a5b4     A7 1E E2 5A |  if_ne	rdword	local01, fp
2a5b8     14 4E 85 51 |  if_ne	sub	fp, #20
2a5bc     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
2a5c0     18 00 90 5D |  if_ne	jmp	#LR__4381
2a5c4     2C 4E 05 F1 | 	add	fp, #44
2a5c8     A7 1E 02 FB | 	rdlong	local01, fp
2a5cc     01 1E 86 F1 | 	sub	local01, #1
2a5d0     A7 1E 62 FC | 	wrlong	local01, fp
2a5d4     2C 4E 85 F1 | 	sub	fp, #44
2a5d8     90 FF 9F FD | 	jmp	#LR__4379
2a5dc                 | LR__4380
2a5dc                 | LR__4381
2a5dc     18 4E 05 F1 | 	add	fp, #24
2a5e0     A7 2C 02 FB | 	rdlong	local08, fp
2a5e4     14 4E 05 F1 | 	add	fp, #20
2a5e8     A7 24 02 FB | 	rdlong	local04, fp
2a5ec     01 24 66 F0 | 	shl	local04, #1
2a5f0     16 25 02 F1 | 	add	local04, local08
2a5f4     12 01 58 FC | 	wrword	#0, local04
2a5f8     A7 2A 0A FB | 	rdlong	local07, fp wz
2a5fc     2C 4E 85 F1 | 	sub	fp, #44
2a600     06 FA 05 A6 |  if_e	mov	result1, #6
2a604     04 06 90 AD |  if_e	jmp	#LR__4410
2a608                 | ' 
2a608                 | ' 
2a608                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2a608     28 4E 05 F1 | 	add	fp, #40
2a60c     A7 00 68 FC | 	wrlong	#0, fp
2a610     28 4E 85 F1 | 	sub	fp, #40
2a614     97 22 48 FB | 	callpa	#(@LR__4383-@LR__4382)>>2,fcache_load_ptr_
2a618                 | LR__4382
2a618     18 4E 05 F1 | 	add	fp, #24
2a61c     A7 2E 02 FB | 	rdlong	local09, fp
2a620     10 4E 05 F1 | 	add	fp, #16
2a624     A7 30 02 FB | 	rdlong	local10, fp
2a628     28 4E 85 F1 | 	sub	fp, #40
2a62c     01 30 66 F0 | 	shl	local10, #1
2a630     17 31 02 F1 | 	add	local10, local09
2a634     18 33 E2 FA | 	rdword	local11, local10
2a638     20 32 0E F2 | 	cmp	local11, #32 wz
2a63c     1C 00 90 5D |  if_ne	jmp	#LR__4384
2a640     28 4E 05 F1 | 	add	fp, #40
2a644     A7 34 02 FB | 	rdlong	local12, fp
2a648     1A 27 02 F6 | 	mov	local05, local12
2a64c     01 26 06 F1 | 	add	local05, #1
2a650     A7 26 62 FC | 	wrlong	local05, fp
2a654     28 4E 85 F1 | 	sub	fp, #40
2a658     BC FF 9F FD | 	jmp	#LR__4382
2a65c                 | LR__4383
2a65c                 | LR__4384
2a65c     28 4E 05 F1 | 	add	fp, #40
2a660     A7 2A 02 FB | 	rdlong	local07, fp
2a664     28 4E 85 F1 | 	sub	fp, #40
2a668     01 2A 16 F2 | 	cmp	local07, #1 wc
2a66c     28 00 90 3D |  if_ae	jmp	#LR__4385
2a670     18 4E 05 F1 | 	add	fp, #24
2a674     A7 22 02 FB | 	rdlong	local03, fp
2a678     10 4E 05 F1 | 	add	fp, #16
2a67c     A7 2E 02 FB | 	rdlong	local09, fp
2a680     28 4E 85 F1 | 	sub	fp, #40
2a684     01 2E 66 F0 | 	shl	local09, #1
2a688     11 2F 02 F1 | 	add	local09, local03
2a68c     17 1F E2 FA | 	rdword	local01, local09
2a690     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a694     14 00 90 5D |  if_ne	jmp	#LR__4386
2a698                 | LR__4385
2a698     10 4E 05 F1 | 	add	fp, #16
2a69c     A7 2A C2 FA | 	rdbyte	local07, fp
2a6a0     03 2A 46 F5 | 	or	local07, #3
2a6a4     A7 2A 42 FC | 	wrbyte	local07, fp
2a6a8     10 4E 85 F1 | 	sub	fp, #16
2a6ac                 | LR__4386
2a6ac     97 2C 48 FB | 	callpa	#(@LR__4388-@LR__4387)>>2,fcache_load_ptr_
2a6b0                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2a6b0                 | LR__4387
2a6b0     2C 4E 05 F1 | 	add	fp, #44
2a6b4     A7 2A 02 FB | 	rdlong	local07, fp
2a6b8     2C 4E 85 F1 | 	sub	fp, #44
2a6bc     01 2A 16 F2 | 	cmp	local07, #1 wc
2a6c0     44 00 90 CD |  if_b	jmp	#LR__4389
2a6c4     18 4E 05 F1 | 	add	fp, #24
2a6c8     A7 28 02 FB | 	rdlong	local06, fp
2a6cc     14 4E 05 F1 | 	add	fp, #20
2a6d0     A7 22 02 FB | 	rdlong	local03, fp
2a6d4     2C 4E 85 F1 | 	sub	fp, #44
2a6d8     01 22 86 F1 | 	sub	local03, #1
2a6dc     01 22 66 F0 | 	shl	local03, #1
2a6e0     14 23 02 F1 | 	add	local03, local06
2a6e4     11 1F E2 FA | 	rdword	local01, local03
2a6e8     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a6ec     18 00 90 AD |  if_e	jmp	#LR__4389
2a6f0     2C 4E 05 F1 | 	add	fp, #44
2a6f4     A7 1E 02 FB | 	rdlong	local01, fp
2a6f8     01 1E 86 F1 | 	sub	local01, #1
2a6fc     A7 1E 62 FC | 	wrlong	local01, fp
2a700     2C 4E 85 F1 | 	sub	fp, #44
2a704     A8 FF 9F FD | 	jmp	#LR__4387
2a708                 | LR__4388
2a708                 | LR__4389
2a708     04 4E 05 F1 | 	add	fp, #4
2a70c     A7 12 02 FB | 	rdlong	arg01, fp
2a710     04 4E 85 F1 | 	sub	fp, #4
2a714     20 12 06 F1 | 	add	arg01, #32
2a718     20 14 06 F6 | 	mov	arg02, #32
2a71c     0B 16 06 F6 | 	mov	arg03, #11
2a720     09 37 02 F6 | 	mov	local13, arg01
2a724     98 00 A0 FD | 	call	#\builtin_bytefill_
2a728     1B FB 01 F6 | 	mov	result1, local13
2a72c     0C 4E 05 F1 | 	add	fp, #12
2a730     A7 00 48 FC | 	wrbyte	#0, fp
2a734     A7 2A C2 FA | 	rdbyte	local07, fp
2a738     14 4E 05 F1 | 	add	fp, #20
2a73c     A7 2A 62 FC | 	wrlong	local07, fp
2a740     04 4E 05 F1 | 	add	fp, #4
2a744     A7 10 68 FC | 	wrlong	#8, fp
2a748     24 4E 85 F1 | 	sub	fp, #36
2a74c                 | ' 
2a74c                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2a74c                 | ' 	i = b = 0; ni = 8;
2a74c                 | ' 	for (;;) {
2a74c                 | LR__4390
2a74c     18 4E 05 F1 | 	add	fp, #24
2a750     A7 22 02 FB | 	rdlong	local03, fp
2a754     10 4E 05 F1 | 	add	fp, #16
2a758     A7 2E 02 FB | 	rdlong	local09, fp
2a75c     17 25 02 F6 | 	mov	local04, local09
2a760     01 24 06 F1 | 	add	local04, #1
2a764     A7 24 62 FC | 	wrlong	local04, fp
2a768     01 2E 66 F0 | 	shl	local09, #1
2a76c     11 2F 02 F1 | 	add	local09, local03
2a770     17 29 E2 FA | 	rdword	local06, local09
2a774     14 4E 85 F1 | 	sub	fp, #20
2a778     A7 28 52 FC | 	wrword	local06, fp
2a77c     A7 2A EA FA | 	rdword	local07, fp wz
2a780     14 4E 85 F1 | 	sub	fp, #20
2a784     74 03 90 AD |  if_e	jmp	#LR__4406
2a788     14 4E 05 F1 | 	add	fp, #20
2a78c     A7 2A E2 FA | 	rdword	local07, fp
2a790     14 4E 85 F1 | 	sub	fp, #20
2a794     20 2A 0E F2 | 	cmp	local07, #32 wz
2a798     30 00 90 AD |  if_e	jmp	#LR__4391
2a79c     14 4E 05 F1 | 	add	fp, #20
2a7a0     A7 1E E2 FA | 	rdword	local01, fp
2a7a4     14 4E 85 F1 | 	sub	fp, #20
2a7a8     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a7ac     34 00 90 5D |  if_ne	jmp	#LR__4392
2a7b0     28 4E 05 F1 | 	add	fp, #40
2a7b4     A7 24 02 FB | 	rdlong	local04, fp
2a7b8     04 4E 05 F1 | 	add	fp, #4
2a7bc     A7 30 02 FB | 	rdlong	local10, fp
2a7c0     2C 4E 85 F1 | 	sub	fp, #44
2a7c4     18 25 0A F2 | 	cmp	local04, local10 wz
2a7c8     18 00 90 AD |  if_e	jmp	#LR__4392
2a7cc                 | LR__4391
2a7cc     10 4E 05 F1 | 	add	fp, #16
2a7d0     A7 2A C2 FA | 	rdbyte	local07, fp
2a7d4     03 2A 46 F5 | 	or	local07, #3
2a7d8     A7 2A 42 FC | 	wrbyte	local07, fp
2a7dc     10 4E 85 F1 | 	sub	fp, #16
2a7e0                 | ' 			cf |=  0x01  |  0x02 ;
2a7e0                 | ' 			continue;
2a7e0     68 FF 9F FD | 	jmp	#LR__4390
2a7e4                 | LR__4392
2a7e4     20 4E 05 F1 | 	add	fp, #32
2a7e8     A7 2A 02 FB | 	rdlong	local07, fp
2a7ec     04 4E 05 F1 | 	add	fp, #4
2a7f0     A7 1E 02 FB | 	rdlong	local01, fp
2a7f4     24 4E 85 F1 | 	sub	fp, #36
2a7f8     0F 2B 12 F2 | 	cmp	local07, local01 wc
2a7fc     1C 00 90 3D |  if_ae	jmp	#LR__4393
2a800     28 4E 05 F1 | 	add	fp, #40
2a804     A7 2C 02 FB | 	rdlong	local08, fp
2a808     04 4E 05 F1 | 	add	fp, #4
2a80c     A7 30 02 FB | 	rdlong	local10, fp
2a810     2C 4E 85 F1 | 	sub	fp, #44
2a814     18 2D 0A F2 | 	cmp	local08, local10 wz
2a818     B0 00 90 5D |  if_ne	jmp	#LR__4395
2a81c                 | LR__4393
2a81c     24 4E 05 F1 | 	add	fp, #36
2a820     A7 2A 02 FB | 	rdlong	local07, fp
2a824     24 4E 85 F1 | 	sub	fp, #36
2a828     0B 2A 0E F2 | 	cmp	local07, #11 wz
2a82c     18 00 90 5D |  if_ne	jmp	#LR__4394
2a830     10 4E 05 F1 | 	add	fp, #16
2a834     A7 2A C2 FA | 	rdbyte	local07, fp
2a838     03 2A 46 F5 | 	or	local07, #3
2a83c     A7 2A 42 FC | 	wrbyte	local07, fp
2a840     10 4E 85 F1 | 	sub	fp, #16
2a844                 | ' 				cf |=  0x01  |  0x02 ;
2a844                 | ' 				break;
2a844     B4 02 90 FD | 	jmp	#LR__4406
2a848                 | LR__4394
2a848     28 4E 05 F1 | 	add	fp, #40
2a84c     A7 2A 02 FB | 	rdlong	local07, fp
2a850     04 4E 05 F1 | 	add	fp, #4
2a854     A7 1E 02 FB | 	rdlong	local01, fp
2a858     2C 4E 85 F1 | 	sub	fp, #44
2a85c     0F 2B 0A F2 | 	cmp	local07, local01 wz
2a860     10 4E 05 51 |  if_ne	add	fp, #16
2a864     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2a868     03 2A 46 55 |  if_ne	or	local07, #3
2a86c     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2a870     10 4E 85 51 |  if_ne	sub	fp, #16
2a874     28 4E 05 F1 | 	add	fp, #40
2a878     A7 2A 02 FB | 	rdlong	local07, fp
2a87c     04 4E 05 F1 | 	add	fp, #4
2a880     A7 20 02 FB | 	rdlong	local02, fp
2a884     2C 4E 85 F1 | 	sub	fp, #44
2a888     10 2B 1A F2 | 	cmp	local07, local02 wcz
2a88c     6C 02 90 1D |  if_a	jmp	#LR__4406
2a890     2C 4E 05 F1 | 	add	fp, #44
2a894     A7 2A 02 FB | 	rdlong	local07, fp
2a898     04 4E 85 F1 | 	sub	fp, #4
2a89c     A7 2A 62 FC | 	wrlong	local07, fp
2a8a0     08 4E 85 F1 | 	sub	fp, #8
2a8a4     A7 10 68 FC | 	wrlong	#8, fp
2a8a8     04 4E 05 F1 | 	add	fp, #4
2a8ac     A7 16 68 FC | 	wrlong	#11, fp
2a8b0     18 4E 85 F1 | 	sub	fp, #24
2a8b4     A7 32 C2 FA | 	rdbyte	local11, fp
2a8b8     19 2B E2 F8 | 	getbyte	local07, local11, #0
2a8bc     02 2A 66 F0 | 	shl	local07, #2
2a8c0     A7 2A 42 FC | 	wrbyte	local07, fp
2a8c4     0C 4E 85 F1 | 	sub	fp, #12
2a8c8                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2a8c8                 | ' 			continue;
2a8c8     80 FE 9F FD | 	jmp	#LR__4390
2a8cc                 | LR__4395
2a8cc     14 4E 05 F1 | 	add	fp, #20
2a8d0     A7 2A E2 FA | 	rdword	local07, fp
2a8d4     14 4E 85 F1 | 	sub	fp, #20
2a8d8     80 2A 16 F2 | 	cmp	local07, #128 wc
2a8dc     6C 00 90 CD |  if_b	jmp	#LR__4397
2a8e0     10 4E 05 F1 | 	add	fp, #16
2a8e4     A7 2A C2 FA | 	rdbyte	local07, fp
2a8e8     02 2A 46 F5 | 	or	local07, #2
2a8ec     A7 2A 42 FC | 	wrbyte	local07, fp
2a8f0     04 4E 05 F1 | 	add	fp, #4
2a8f4     A7 12 E2 FA | 	rdword	arg01, fp
2a8f8     14 4E 85 F1 | 	sub	fp, #20
2a8fc     01 00 00 FF 
2a900     52 15 06 F6 | 	mov	arg02, ##850
2a904     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2a908     14 4E 05 F1 | 	add	fp, #20
2a90c     A7 FA 51 FC | 	wrword	result1, fp
2a910     A7 2A E2 FA | 	rdword	local07, fp
2a914     14 4E 85 F1 | 	sub	fp, #20
2a918     80 2A CE F7 | 	test	local07, #128 wz
2a91c     2C 00 90 AD |  if_e	jmp	#LR__4396
2a920     14 4E 05 F1 | 	add	fp, #20
2a924     A7 20 E2 FA | 	rdword	local02, fp
2a928     7F 20 06 F5 | 	and	local02, #127
2a92c     01 00 00 FF 
2a930     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
2a934     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2a938     10 2B C2 FA | 	rdbyte	local07, local02
2a93c     A7 2A 52 FC | 	wrword	local07, fp
2a940     14 4E 85 F1 | 	sub	fp, #20
2a944     01 00 00 FF 
2a948     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
2a94c                 | LR__4396
2a94c                 | LR__4397
2a94c     14 4E 05 F1 | 	add	fp, #20
2a950     A7 2A E2 FA | 	rdword	local07, fp
2a954     14 4E 85 F1 | 	sub	fp, #20
2a958     00 2B 16 F2 | 	cmp	local07, #256 wc
2a95c     88 00 90 CD |  if_b	jmp	#LR__4399
2a960     24 4E 05 F1 | 	add	fp, #36
2a964     A7 2A 02 FB | 	rdlong	local07, fp
2a968     01 2A 86 F1 | 	sub	local07, #1
2a96c     04 4E 85 F1 | 	sub	fp, #4
2a970     A7 20 02 FB | 	rdlong	local02, fp
2a974     20 4E 85 F1 | 	sub	fp, #32
2a978     15 21 12 F2 | 	cmp	local02, local07 wc
2a97c     2C 00 90 CD |  if_b	jmp	#LR__4398
2a980     10 4E 05 F1 | 	add	fp, #16
2a984     A7 32 C2 FA | 	rdbyte	local11, fp
2a988     19 2B E2 F8 | 	getbyte	local07, local11, #0
2a98c     03 2A 46 F5 | 	or	local07, #3
2a990     A7 2A 42 FC | 	wrbyte	local07, fp
2a994     14 4E 05 F1 | 	add	fp, #20
2a998     A7 2A 02 FB | 	rdlong	local07, fp
2a99c     04 4E 85 F1 | 	sub	fp, #4
2a9a0     A7 2A 62 FC | 	wrlong	local07, fp
2a9a4     20 4E 85 F1 | 	sub	fp, #32
2a9a8                 | ' 				cf |=  0x01  |  0x02 ;
2a9a8                 | ' 				i = ni; continue;
2a9a8     A0 FD 9F FD | 	jmp	#LR__4390
2a9ac                 | LR__4398
2a9ac     04 4E 05 F1 | 	add	fp, #4
2a9b0     A7 2E 02 FB | 	rdlong	local09, fp
2a9b4     1C 4E 05 F1 | 	add	fp, #28
2a9b8     A7 30 02 FB | 	rdlong	local10, fp
2a9bc     18 25 02 F6 | 	mov	local04, local10
2a9c0     01 24 06 F1 | 	add	local04, #1
2a9c4     A7 24 62 FC | 	wrlong	local04, fp
2a9c8     20 2E 06 F1 | 	add	local09, #32
2a9cc     17 31 02 F1 | 	add	local10, local09
2a9d0     0C 4E 85 F1 | 	sub	fp, #12
2a9d4     A7 22 E2 FA | 	rdword	local03, fp
2a9d8     14 4E 85 F1 | 	sub	fp, #20
2a9dc     08 22 46 F0 | 	shr	local03, #8
2a9e0     18 23 42 FC | 	wrbyte	local03, local10
2a9e4     D4 00 90 FD | 	jmp	#LR__4405
2a9e8                 | LR__4399
2a9e8     14 4E 05 F1 | 	add	fp, #20
2a9ec     A7 2A EA FA | 	rdword	local07, fp wz
2a9f0     14 4E 85 F1 | 	sub	fp, #20
2a9f4     20 00 90 AD |  if_e	jmp	#LR__4400
2a9f8     81 01 00 FF 
2a9fc     89 13 06 F6 | 	mov	arg01, ##@LR__5033
2aa00     14 4E 05 F1 | 	add	fp, #20
2aa04     A7 14 E2 FA | 	rdword	arg02, fp
2aa08     14 4E 85 F1 | 	sub	fp, #20
2aa0c     48 CB BF FD | 	call	#_fatfs_cc_strchr
2aa10     00 FA 0D F2 | 	cmp	result1, #0 wz
2aa14     20 00 90 AD |  if_e	jmp	#LR__4401
2aa18                 | LR__4400
2aa18     14 4E 05 F1 | 	add	fp, #20
2aa1c     A7 BE 58 FC | 	wrword	#95, fp
2aa20     04 4E 85 F1 | 	sub	fp, #4
2aa24     A7 2A C2 FA | 	rdbyte	local07, fp
2aa28     03 2A 46 F5 | 	or	local07, #3
2aa2c     A7 2A 42 FC | 	wrbyte	local07, fp
2aa30     10 4E 85 F1 | 	sub	fp, #16
2aa34     84 00 90 FD | 	jmp	#LR__4404
2aa38                 | LR__4401
2aa38     14 4E 05 F1 | 	add	fp, #20
2aa3c     A7 2A E2 FA | 	rdword	local07, fp
2aa40     14 4E 85 F1 | 	sub	fp, #20
2aa44     41 2A 16 F2 | 	cmp	local07, #65 wc
2aa48     24 00 90 CD |  if_b	jmp	#LR__4402
2aa4c     14 4E 05 F1 | 	add	fp, #20
2aa50     A7 1E E2 FA | 	rdword	local01, fp
2aa54     14 4E 85 F1 | 	sub	fp, #20
2aa58     5B 1E 16 F2 | 	cmp	local01, #91 wc
2aa5c     0C 4E 05 C1 |  if_b	add	fp, #12
2aa60     A7 2A C2 CA |  if_b	rdbyte	local07, fp
2aa64     02 2A 46 C5 |  if_b	or	local07, #2
2aa68     A7 2A 42 CC |  if_b	wrbyte	local07, fp
2aa6c     0C 4E 85 C1 |  if_b	sub	fp, #12
2aa70                 | LR__4402
2aa70     14 4E 05 F1 | 	add	fp, #20
2aa74     A7 2A E2 FA | 	rdword	local07, fp
2aa78     14 4E 85 F1 | 	sub	fp, #20
2aa7c     61 2A 16 F2 | 	cmp	local07, #97 wc
2aa80     38 00 90 CD |  if_b	jmp	#LR__4403
2aa84     14 4E 05 F1 | 	add	fp, #20
2aa88     A7 1E E2 FA | 	rdword	local01, fp
2aa8c     14 4E 85 F1 | 	sub	fp, #20
2aa90     7B 1E 16 F2 | 	cmp	local01, #123 wc
2aa94     24 00 90 3D |  if_ae	jmp	#LR__4403
2aa98     0C 4E 05 F1 | 	add	fp, #12
2aa9c     A7 2A C2 FA | 	rdbyte	local07, fp
2aaa0     01 2A 46 F5 | 	or	local07, #1
2aaa4     A7 2A 42 FC | 	wrbyte	local07, fp
2aaa8     08 4E 05 F1 | 	add	fp, #8
2aaac     A7 2A E2 FA | 	rdword	local07, fp
2aab0     20 2A 86 F1 | 	sub	local07, #32
2aab4     A7 2A 52 FC | 	wrword	local07, fp
2aab8     14 4E 85 F1 | 	sub	fp, #20
2aabc                 | LR__4403
2aabc                 | LR__4404
2aabc                 | LR__4405
2aabc     04 4E 05 F1 | 	add	fp, #4
2aac0     A7 32 02 FB | 	rdlong	local11, fp
2aac4     19 2F 02 F6 | 	mov	local09, local11
2aac8     1C 4E 05 F1 | 	add	fp, #28
2aacc     A7 20 02 FB | 	rdlong	local02, fp
2aad0     10 25 02 F6 | 	mov	local04, local02
2aad4     01 24 06 F1 | 	add	local04, #1
2aad8     A7 24 62 FC | 	wrlong	local04, fp
2aadc     10 31 02 F6 | 	mov	local10, local02
2aae0     20 2E 06 F1 | 	add	local09, #32
2aae4     17 31 02 F1 | 	add	local10, local09
2aae8     0C 4E 85 F1 | 	sub	fp, #12
2aaec     A7 22 E2 FA | 	rdword	local03, fp
2aaf0     14 4E 85 F1 | 	sub	fp, #20
2aaf4     18 23 42 FC | 	wrbyte	local03, local10
2aaf8     50 FC 9F FD | 	jmp	#LR__4390
2aafc                 | LR__4406
2aafc     04 4E 05 F1 | 	add	fp, #4
2ab00     A7 32 02 FB | 	rdlong	local11, fp
2ab04     04 4E 85 F1 | 	sub	fp, #4
2ab08     20 32 06 F1 | 	add	local11, #32
2ab0c     19 2B C2 FA | 	rdbyte	local07, local11
2ab10     E5 2A 0E F2 | 	cmp	local07, #229 wz
2ab14     04 4E 05 A1 |  if_e	add	fp, #4
2ab18     A7 2A 02 AB |  if_e	rdlong	local07, fp
2ab1c     04 4E 85 A1 |  if_e	sub	fp, #4
2ab20     20 2A 06 A1 |  if_e	add	local07, #32
2ab24     15 0B 48 AC |  if_e	wrbyte	#5, local07
2ab28     24 4E 05 F1 | 	add	fp, #36
2ab2c     A7 2A 02 FB | 	rdlong	local07, fp
2ab30     24 4E 85 F1 | 	sub	fp, #36
2ab34     08 2A 0E F2 | 	cmp	local07, #8 wz
2ab38     0C 4E 05 A1 |  if_e	add	fp, #12
2ab3c     A7 2A C2 AA |  if_e	rdbyte	local07, fp
2ab40     02 2A 66 A0 |  if_e	shl	local07, #2
2ab44     A7 2A 42 AC |  if_e	wrbyte	local07, fp
2ab48     0C 4E 85 A1 |  if_e	sub	fp, #12
2ab4c     0C 4E 05 F1 | 	add	fp, #12
2ab50     A7 2A C2 FA | 	rdbyte	local07, fp
2ab54     0C 4E 85 F1 | 	sub	fp, #12
2ab58     0C 2A 06 F5 | 	and	local07, #12
2ab5c     0C 2A 0E F2 | 	cmp	local07, #12 wz
2ab60     18 00 90 AD |  if_e	jmp	#LR__4407
2ab64     0C 4E 05 F1 | 	add	fp, #12
2ab68     A7 1E C2 FA | 	rdbyte	local01, fp
2ab6c     0C 4E 85 F1 | 	sub	fp, #12
2ab70     03 1E 06 F5 | 	and	local01, #3
2ab74     03 1E 0E F2 | 	cmp	local01, #3 wz
2ab78     14 00 90 5D |  if_ne	jmp	#LR__4408
2ab7c                 | LR__4407
2ab7c     10 4E 05 F1 | 	add	fp, #16
2ab80     A7 2A C2 FA | 	rdbyte	local07, fp
2ab84     02 2A 46 F5 | 	or	local07, #2
2ab88     A7 2A 42 FC | 	wrbyte	local07, fp
2ab8c     10 4E 85 F1 | 	sub	fp, #16
2ab90                 | LR__4408
2ab90     10 4E 05 F1 | 	add	fp, #16
2ab94     A7 2A C2 FA | 	rdbyte	local07, fp
2ab98     10 4E 85 F1 | 	sub	fp, #16
2ab9c     02 2A CE F7 | 	test	local07, #2 wz
2aba0     48 00 90 5D |  if_ne	jmp	#LR__4409
2aba4     0C 4E 05 F1 | 	add	fp, #12
2aba8     A7 2A C2 FA | 	rdbyte	local07, fp
2abac     0C 4E 85 F1 | 	sub	fp, #12
2abb0     01 2A CE F7 | 	test	local07, #1 wz
2abb4     10 4E 05 51 |  if_ne	add	fp, #16
2abb8     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2abbc     10 2A 46 55 |  if_ne	or	local07, #16
2abc0     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2abc4     10 4E 85 51 |  if_ne	sub	fp, #16
2abc8     0C 4E 05 F1 | 	add	fp, #12
2abcc     A7 2A C2 FA | 	rdbyte	local07, fp
2abd0     0C 4E 85 F1 | 	sub	fp, #12
2abd4     04 2A CE F7 | 	test	local07, #4 wz
2abd8     10 4E 05 51 |  if_ne	add	fp, #16
2abdc     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2abe0     08 2A 46 55 |  if_ne	or	local07, #8
2abe4     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2abe8     10 4E 85 51 |  if_ne	sub	fp, #16
2abec                 | LR__4409
2abec     04 4E 05 F1 | 	add	fp, #4
2abf0     A7 2A 02 FB | 	rdlong	local07, fp
2abf4     0C 4E 05 F1 | 	add	fp, #12
2abf8     A7 1E C2 FA | 	rdbyte	local01, fp
2abfc     10 4E 85 F1 | 	sub	fp, #16
2ac00     2B 2A 06 F1 | 	add	local07, #43
2ac04     15 1F 42 FC | 	wrbyte	local01, local07
2ac08                 | ' 	}
2ac08                 | ' 
2ac08                 | ' 	dp->fn[ 11 ] = cf;
2ac08                 | ' 
2ac08                 | ' 	return FR_OK;
2ac08     00 FA 05 F6 | 	mov	result1, #0
2ac0c                 | LR__4410
2ac0c     A7 F0 03 F6 | 	mov	ptra, fp
2ac10     B2 00 A0 FD | 	call	#popregs_
2ac14                 | _fatfs_cc_create_name_ret
2ac14     2D 00 64 FD | 	ret
2ac18                 | 
2ac18                 | _fatfs_cc_follow_path
2ac18     02 4A 05 F6 | 	mov	COUNT_, #2
2ac1c     A8 00 A0 FD | 	call	#pushregs_
2ac20     18 F0 07 F1 | 	add	ptra, #24
2ac24     04 4E 05 F1 | 	add	fp, #4
2ac28     A7 12 62 FC | 	wrlong	arg01, fp
2ac2c     04 4E 05 F1 | 	add	fp, #4
2ac30     A7 14 62 FC | 	wrlong	arg02, fp
2ac34     04 4E 85 F1 | 	sub	fp, #4
2ac38     A7 FA 01 FB | 	rdlong	result1, fp
2ac3c     FD 1E 02 FB | 	rdlong	local01, result1
2ac40     10 4E 05 F1 | 	add	fp, #16
2ac44     A7 1E 62 FC | 	wrlong	local01, fp
2ac48     14 4E 85 F1 | 	sub	fp, #20
2ac4c     97 24 48 FB | 	callpa	#(@LR__4422-@LR__4420)>>2,fcache_load_ptr_
2ac50                 | ' )
2ac50                 | ' {
2ac50                 | ' 	FRESULT res;
2ac50                 | ' 	BYTE ns;
2ac50                 | ' 	FATFS *fs = dp->obj.fs;
2ac50                 | ' #line 3034 "ff.c"
2ac50                 | ' 	{
2ac50                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2ac50                 | LR__4420
2ac50     08 4E 05 F1 | 	add	fp, #8
2ac54     A7 1E 02 FB | 	rdlong	local01, fp
2ac58     08 4E 85 F1 | 	sub	fp, #8
2ac5c     0F 1F C2 FA | 	rdbyte	local01, local01
2ac60     2F 1E 0E F2 | 	cmp	local01, #47 wz
2ac64     18 00 90 AD |  if_e	jmp	#LR__4421
2ac68     08 4E 05 F1 | 	add	fp, #8
2ac6c     A7 1E 02 FB | 	rdlong	local01, fp
2ac70     08 4E 85 F1 | 	sub	fp, #8
2ac74     0F 1F C2 FA | 	rdbyte	local01, local01
2ac78     5C 1E 0E F2 | 	cmp	local01, #92 wz
2ac7c     18 00 90 5D |  if_ne	jmp	#LR__4423
2ac80                 | LR__4421
2ac80     08 4E 05 F1 | 	add	fp, #8
2ac84     A7 1E 02 FB | 	rdlong	local01, fp
2ac88     01 1E 06 F1 | 	add	local01, #1
2ac8c     A7 1E 62 FC | 	wrlong	local01, fp
2ac90     08 4E 85 F1 | 	sub	fp, #8
2ac94     B8 FF 9F FD | 	jmp	#LR__4420
2ac98                 | LR__4422
2ac98                 | LR__4423
2ac98     04 4E 05 F1 | 	add	fp, #4
2ac9c     A7 1E 02 FB | 	rdlong	local01, fp
2aca0     08 1E 06 F1 | 	add	local01, #8
2aca4     0F 01 68 FC | 	wrlong	#0, local01
2aca8     04 4E 05 F1 | 	add	fp, #4
2acac     A7 1E 02 FB | 	rdlong	local01, fp
2acb0     08 4E 85 F1 | 	sub	fp, #8
2acb4     0F 1F C2 FA | 	rdbyte	local01, local01
2acb8     20 1E 16 F2 | 	cmp	local01, #32 wc
2acbc     30 00 90 3D |  if_ae	jmp	#LR__4424
2acc0     04 4E 05 F1 | 	add	fp, #4
2acc4     A7 1E 02 FB | 	rdlong	local01, fp
2acc8     2B 1E 06 F1 | 	add	local01, #43
2accc     0F 01 49 FC | 	wrbyte	#128, local01
2acd0     A7 12 02 FB | 	rdlong	arg01, fp
2acd4     04 4E 85 F1 | 	sub	fp, #4
2acd8     00 14 06 F6 | 	mov	arg02, #0
2acdc     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
2ace0     0C 4E 05 F1 | 	add	fp, #12
2ace4     A7 FA 61 FC | 	wrlong	result1, fp
2ace8     0C 4E 85 F1 | 	sub	fp, #12
2acec     1C 01 90 FD | 	jmp	#LR__4428
2acf0                 | LR__4424
2acf0                 | ' 		for (;;) {
2acf0                 | LR__4425
2acf0     04 4E 05 F1 | 	add	fp, #4
2acf4     A7 12 02 FB | 	rdlong	arg01, fp
2acf8     04 4E 05 F1 | 	add	fp, #4
2acfc     A7 14 02 F6 | 	mov	arg02, fp
2ad00     08 4E 85 F1 | 	sub	fp, #8
2ad04     14 F6 BF FD | 	call	#_fatfs_cc_create_name
2ad08     0C 4E 05 F1 | 	add	fp, #12
2ad0c     A7 FA 61 FC | 	wrlong	result1, fp
2ad10     00 FA 4D F2 | 	cmps	result1, #0 wz
2ad14     0C 4E 85 F1 | 	sub	fp, #12
2ad18     F0 00 90 5D |  if_ne	jmp	#LR__4427
2ad1c     04 4E 05 F1 | 	add	fp, #4
2ad20     A7 12 02 FB | 	rdlong	arg01, fp
2ad24     04 4E 85 F1 | 	sub	fp, #4
2ad28     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
2ad2c     0C 4E 05 F1 | 	add	fp, #12
2ad30     A7 FA 61 FC | 	wrlong	result1, fp
2ad34     08 4E 85 F1 | 	sub	fp, #8
2ad38     A7 1E 02 FB | 	rdlong	local01, fp
2ad3c     2B 1E 06 F1 | 	add	local01, #43
2ad40     0F 1F C2 FA | 	rdbyte	local01, local01
2ad44     0C 4E 05 F1 | 	add	fp, #12
2ad48     A7 1E 42 FC | 	wrbyte	local01, fp
2ad4c     04 4E 85 F1 | 	sub	fp, #4
2ad50     A7 1E 0A FB | 	rdlong	local01, fp wz
2ad54     0C 4E 85 F1 | 	sub	fp, #12
2ad58     34 00 90 AD |  if_e	jmp	#LR__4426
2ad5c     0C 4E 05 F1 | 	add	fp, #12
2ad60     A7 1E 02 FB | 	rdlong	local01, fp
2ad64     0C 4E 85 F1 | 	sub	fp, #12
2ad68     04 1E 0E F2 | 	cmp	local01, #4 wz
2ad6c     9C 00 90 5D |  if_ne	jmp	#LR__4427
2ad70     10 4E 05 F1 | 	add	fp, #16
2ad74     A7 1E C2 FA | 	rdbyte	local01, fp
2ad78     10 4E 85 F1 | 	sub	fp, #16
2ad7c     04 1E CE F7 | 	test	local01, #4 wz
2ad80     0C 4E 05 A1 |  if_e	add	fp, #12
2ad84     A7 0A 68 AC |  if_e	wrlong	#5, fp
2ad88     0C 4E 85 A1 |  if_e	sub	fp, #12
2ad8c                 | ' 					}
2ad8c                 | ' 				}
2ad8c                 | ' 				break;
2ad8c     7C 00 90 FD | 	jmp	#LR__4427
2ad90                 | LR__4426
2ad90     10 4E 05 F1 | 	add	fp, #16
2ad94     A7 1E C2 FA | 	rdbyte	local01, fp
2ad98     10 4E 85 F1 | 	sub	fp, #16
2ad9c     04 1E CE F7 | 	test	local01, #4 wz
2ada0     68 00 90 5D |  if_ne	jmp	#LR__4427
2ada4     04 4E 05 F1 | 	add	fp, #4
2ada8     A7 1E 02 FB | 	rdlong	local01, fp
2adac     04 4E 85 F1 | 	sub	fp, #4
2adb0     06 1E 06 F1 | 	add	local01, #6
2adb4     0F 1F C2 FA | 	rdbyte	local01, local01
2adb8     10 1E CE F7 | 	test	local01, #16 wz
2adbc     0C 4E 05 A1 |  if_e	add	fp, #12
2adc0     A7 0A 68 AC |  if_e	wrlong	#5, fp
2adc4     0C 4E 85 A1 |  if_e	sub	fp, #12
2adc8                 | ' 				res = FR_NO_PATH; break;
2adc8     40 00 90 AD |  if_e	jmp	#LR__4427
2adcc     04 4E 05 F1 | 	add	fp, #4
2add0     A7 20 02 FB | 	rdlong	local02, fp
2add4     10 1F 02 F6 | 	mov	local01, local02
2add8     10 4E 05 F1 | 	add	fp, #16
2addc     A7 14 02 FB | 	rdlong	arg02, fp
2ade0     0A 13 02 F6 | 	mov	arg01, arg02
2ade4     34 14 06 F1 | 	add	arg02, #52
2ade8     14 4E 85 F1 | 	sub	fp, #20
2adec     10 20 06 F1 | 	add	local02, #16
2adf0     10 21 02 FB | 	rdlong	local02, local02
2adf4     FF 21 06 F5 | 	and	local02, #511
2adf8     10 15 02 F1 | 	add	arg02, local02
2adfc     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
2ae00     08 1E 06 F1 | 	add	local01, #8
2ae04     0F FB 61 FC | 	wrlong	result1, local01
2ae08     E4 FE 9F FD | 	jmp	#LR__4425
2ae0c                 | LR__4427
2ae0c                 | LR__4428
2ae0c                 | ' 			}
2ae0c                 | ' #line 3090 "ff.c"
2ae0c                 | ' 			{
2ae0c                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2ae0c                 | ' 			}
2ae0c                 | ' 		}
2ae0c                 | ' 	}
2ae0c                 | ' 
2ae0c                 | ' 	return res;
2ae0c     0C 4E 05 F1 | 	add	fp, #12
2ae10     A7 FA 01 FB | 	rdlong	result1, fp
2ae14     0C 4E 85 F1 | 	sub	fp, #12
2ae18     A7 F0 03 F6 | 	mov	ptra, fp
2ae1c     B2 00 A0 FD | 	call	#popregs_
2ae20                 | _fatfs_cc_follow_path_ret
2ae20     2D 00 64 FD | 	ret
2ae24                 | 
2ae24                 | _fatfs_cc_get_ldnumber
2ae24     01 00 66 F6 | 	neg	_var01, #1
2ae28     09 03 0A FB | 	rdlong	_var02, arg01 wz
2ae2c     01 05 02 F6 | 	mov	_var03, _var02
2ae30     01 FA 65 A6 |  if_e	neg	result1, #1
2ae34     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2ae38     97 10 48 FB | 	callpa	#(@LR__4431-@LR__4430)>>2,fcache_load_ptr_
2ae3c                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2ae3c                 | LR__4430
2ae3c     02 07 C2 FA | 	rdbyte	_var04, _var03
2ae40     03 FB E1 F8 | 	getbyte	result1, _var04, #0
2ae44     20 FA 15 F2 | 	cmp	result1, #32 wc
2ae48     01 04 06 F1 | 	add	_var03, #1
2ae4c     03 09 02 36 |  if_ae	mov	_var05, _var04
2ae50     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2ae54     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
2ae58     E0 FF 9F 1D |  if_a	jmp	#LR__4430
2ae5c                 | LR__4431
2ae5c     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
2ae60     3A 06 0E F2 | 	cmp	_var04, #58 wz
2ae64     40 00 90 5D |  if_ne	jmp	#LR__4433
2ae68     01 0A 06 F6 | 	mov	_var06, #1
2ae6c     01 09 C2 FA | 	rdbyte	_var05, _var02
2ae70     30 08 16 F2 | 	cmp	_var05, #48 wc
2ae74     1C 00 90 CD |  if_b	jmp	#LR__4432
2ae78     01 09 C2 FA | 	rdbyte	_var05, _var02
2ae7c     3A 08 16 F2 | 	cmp	_var05, #58 wc
2ae80     01 0D 02 C6 |  if_b	mov	_var07, _var02
2ae84     02 0C 06 C1 |  if_b	add	_var07, #2
2ae88     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
2ae8c     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
2ae90     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
2ae94                 | LR__4432
2ae94     01 0A 56 F2 | 	cmps	_var06, #1 wc
2ae98     05 01 02 C6 |  if_b	mov	_var01, _var06
2ae9c     09 05 62 CC |  if_b	wrlong	_var03, arg01
2aea0                 | ' 			vol = i;
2aea0                 | ' 			*path = tt;
2aea0                 | ' 		}
2aea0                 | ' 		return vol;
2aea0     00 FB 01 F6 | 	mov	result1, _var01
2aea4     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2aea8                 | LR__4433
2aea8                 | ' 	}
2aea8                 | ' #line 3170 "ff.c"
2aea8                 | ' 	vol = 0;
2aea8                 | ' 
2aea8                 | ' 	return vol;
2aea8     00 FA 05 F6 | 	mov	result1, #0
2aeac                 | _fatfs_cc_get_ldnumber_ret
2aeac     2D 00 64 FD | 	ret
2aeb0                 | 
2aeb0                 | _fatfs_cc_check_fs
2aeb0     04 4A 05 F6 | 	mov	COUNT_, #4
2aeb4     A8 00 A0 FD | 	call	#pushregs_
2aeb8     09 1F 02 F6 | 	mov	local01, arg01
2aebc     03 1E 06 F1 | 	add	local01, #3
2aec0     0F 01 48 FC | 	wrbyte	#0, local01
2aec4     2D 1E 06 F1 | 	add	local01, #45
2aec8     FF FF FF FF 
2aecc     0F FF 6B FC | 	wrlong	##-1, local01
2aed0     30 1E 86 F1 | 	sub	local01, #48
2aed4     0F 13 02 F6 | 	mov	arg01, local01
2aed8     18 D5 BF FD | 	call	#_fatfs_cc_move_window
2aedc     00 FA 0D F2 | 	cmp	result1, #0 wz
2aee0     04 FA 05 56 |  if_ne	mov	result1, #4
2aee4     94 01 90 5D |  if_ne	jmp	#LR__4444
2aee8     34 1E 06 F1 | 	add	local01, #52
2aeec     0F 13 02 F6 | 	mov	arg01, local01
2aef0     FE 13 06 F1 | 	add	arg01, #510
2aef4                 | ' {
2aef4                 | ' 
2aef4                 | ' 	return *((WORD*)ptr);
2aef4     09 21 E2 FA | 	rdword	local02, arg01
2aef8     0F 23 C2 FA | 	rdbyte	local03, local01
2aefc     34 1E 86 F1 | 	sub	local01, #52
2af00     11 25 E2 F8 | 	getbyte	local04, local03, #0
2af04     EB 24 0E F2 | 	cmp	local04, #235 wz
2af08     11 17 02 56 |  if_ne	mov	arg03, local03
2af0c     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2af10     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
2af14     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
2af18     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
2af1c     44 01 90 5D |  if_ne	jmp	#LR__4443
2af20     10 25 32 F9 | 	getword	local04, local02, #0
2af24     55 00 00 FF 
2af28     55 24 0E F2 | 	cmp	local04, ##43605 wz
2af2c     2C 00 90 5D |  if_ne	jmp	#LR__4440
2af30     34 1E 06 F1 | 	add	local01, #52
2af34     0F 13 02 F6 | 	mov	arg01, local01
2af38     34 1E 86 F1 | 	sub	local01, #52
2af3c     52 12 06 F1 | 	add	arg01, #82
2af40     81 01 00 FF 
2af44     90 15 06 F6 | 	mov	arg02, ##@LR__5034
2af48     08 16 06 F6 | 	mov	arg03, #8
2af4c     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
2af50     00 FA 0D F2 | 	cmp	result1, #0 wz
2af54                 | ' 			return 0;
2af54     00 FA 05 A6 |  if_e	mov	result1, #0
2af58     20 01 90 AD |  if_e	jmp	#LR__4444
2af5c                 | LR__4440
2af5c     34 1E 06 F1 | 	add	local01, #52
2af60     0F 13 02 F6 | 	mov	arg01, local01
2af64     0B 12 06 F1 | 	add	arg01, #11
2af68                 | ' {
2af68                 | ' 
2af68                 | ' 	return *((WORD*)ptr);
2af68     09 FB E1 FA | 	rdword	result1, arg01
2af6c     0D 1E 06 F1 | 	add	local01, #13
2af70     0F 23 C2 FA | 	rdbyte	local03, local01
2af74     41 1E 86 F1 | 	sub	local01, #65
2af78     FD 24 32 F9 | 	getword	local04, result1, #0
2af7c     FD 14 32 F9 | 	getword	arg02, result1, #0
2af80     01 14 86 F1 | 	sub	arg02, #1
2af84     0A 25 CA F7 | 	test	local04, arg02 wz
2af88     D8 00 90 5D |  if_ne	jmp	#LR__4442
2af8c     FD 14 32 F9 | 	getword	arg02, result1, #0
2af90     01 00 00 FF 
2af94     00 14 16 F2 | 	cmp	arg02, ##512 wc
2af98     C8 00 90 CD |  if_b	jmp	#LR__4442
2af9c     FD 14 32 F9 | 	getword	arg02, result1, #0
2afa0     01 00 00 FF 
2afa4     01 14 16 F2 | 	cmp	arg02, ##513 wc
2afa8     B8 00 90 3D |  if_ae	jmp	#LR__4442
2afac     11 13 02 F6 | 	mov	arg01, local03
2afb0     07 12 4E F7 | 	zerox	arg01, #7 wz
2afb4     AC 00 90 AD |  if_e	jmp	#LR__4442
2afb8     11 13 E2 F8 | 	getbyte	arg01, local03, #0
2afbc     11 23 E2 F8 | 	getbyte	local03, local03, #0
2afc0     01 22 86 F1 | 	sub	local03, #1
2afc4     11 13 CA F7 | 	test	arg01, local03 wz
2afc8     98 00 90 5D |  if_ne	jmp	#LR__4442
2afcc     34 1E 06 F1 | 	add	local01, #52
2afd0     0F 13 02 F6 | 	mov	arg01, local01
2afd4     34 1E 86 F1 | 	sub	local01, #52
2afd8     0E 12 06 F1 | 	add	arg01, #14
2afdc                 | ' {
2afdc                 | ' 
2afdc                 | ' 	return *((WORD*)ptr);
2afdc     09 FB E9 FA | 	rdword	result1, arg01 wz
2afe0     80 00 90 AD |  if_e	jmp	#LR__4442
2afe4     44 1E 06 F1 | 	add	local01, #68
2afe8     0F 13 C2 FA | 	rdbyte	arg01, local01
2afec     44 1E 86 F1 | 	sub	local01, #68
2aff0     01 12 86 F1 | 	sub	arg01, #1
2aff4     02 12 16 F2 | 	cmp	arg01, #2 wc
2aff8     68 00 90 3D |  if_ae	jmp	#LR__4442
2affc     34 1E 06 F1 | 	add	local01, #52
2b000     0F 13 02 F6 | 	mov	arg01, local01
2b004     34 1E 86 F1 | 	sub	local01, #52
2b008     11 12 06 F1 | 	add	arg01, #17
2b00c                 | ' {
2b00c                 | ' 
2b00c                 | ' 	return *((WORD*)ptr);
2b00c     09 FB E9 FA | 	rdword	result1, arg01 wz
2b010     50 00 90 AD |  if_e	jmp	#LR__4442
2b014     34 1E 06 F1 | 	add	local01, #52
2b018     0F 13 02 F6 | 	mov	arg01, local01
2b01c     34 1E 86 F1 | 	sub	local01, #52
2b020     13 12 06 F1 | 	add	arg01, #19
2b024                 | ' {
2b024                 | ' 
2b024                 | ' 	return *((WORD*)ptr);
2b024     09 FB E1 FA | 	rdword	result1, arg01
2b028     FD 22 32 F9 | 	getword	local03, result1, #0
2b02c     80 22 16 F2 | 	cmp	local03, #128 wc
2b030     20 00 90 3D |  if_ae	jmp	#LR__4441
2b034     34 1E 06 F1 | 	add	local01, #52
2b038     0F 13 02 F6 | 	mov	arg01, local01
2b03c     34 1E 86 F1 | 	sub	local01, #52
2b040     20 12 06 F1 | 	add	arg01, #32
2b044                 | ' {
2b044                 | ' 
2b044                 | ' 	return *((DWORD*)ptr);
2b044     09 FB 01 FB | 	rdlong	result1, arg01
2b048     80 00 00 FF 
2b04c     00 FA 15 F2 | 	cmp	result1, ##65536 wc
2b050     10 00 90 CD |  if_b	jmp	#LR__4442
2b054                 | LR__4441
2b054     4A 1E 06 F1 | 	add	local01, #74
2b058                 | ' {
2b058                 | ' 
2b058                 | ' 	return *((WORD*)ptr);
2b058     0F FB E9 FA | 	rdword	result1, local01 wz
2b05c                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2b05c                 | ' 			&& ld_word(fs->win +  14 ) != 0
2b05c                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2b05c                 | ' 			&& ld_word(fs->win +  17 ) != 0
2b05c                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2b05c                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2b05c                 | ' 				return 0;
2b05c     00 FA 05 56 |  if_ne	mov	result1, #0
2b060     18 00 90 5D |  if_ne	jmp	#LR__4444
2b064                 | LR__4442
2b064                 | LR__4443
2b064                 | ' 		}
2b064                 | ' 	}
2b064                 | ' 	return sign == 0xAA55 ? 2 : 3;
2b064     10 23 32 F9 | 	getword	local03, local02, #0
2b068     55 00 00 FF 
2b06c     55 22 0E F2 | 	cmp	local03, ##43605 wz
2b070     02 24 06 A6 |  if_e	mov	local04, #2
2b074     03 24 06 56 |  if_ne	mov	local04, #3
2b078     12 FB 01 F6 | 	mov	result1, local04
2b07c                 | LR__4444
2b07c     A7 F0 03 F6 | 	mov	ptra, fp
2b080     B2 00 A0 FD | 	call	#popregs_
2b084                 | _fatfs_cc_check_fs_ret
2b084     2D 00 64 FD | 	ret
2b088                 | 
2b088                 | _fatfs_cc_find_volume
2b088     05 4A 05 F6 | 	mov	COUNT_, #5
2b08c     A8 00 A0 FD | 	call	#pushregs_
2b090     24 F0 07 F1 | 	add	ptra, #36
2b094     09 1F 02 F6 | 	mov	local01, arg01
2b098     0A 21 02 F6 | 	mov	local02, arg02
2b09c     0F 13 02 F6 | 	mov	arg01, local01
2b0a0     00 14 06 F6 | 	mov	arg02, #0
2b0a4     08 FE BF FD | 	call	#_fatfs_cc_check_fs
2b0a8     02 FA 0D F2 | 	cmp	result1, #2 wz
2b0ac     0C 00 90 AD |  if_e	jmp	#LR__4450
2b0b0     03 FA 15 F2 | 	cmp	result1, #3 wc
2b0b4     00 20 0E C2 |  if_b	cmp	local02, #0 wz
2b0b8     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4458
2b0bc                 | LR__4450
2b0bc                 | ' 	for (i = 0; i < 4; i++) {
2b0bc     00 22 06 F6 | 	mov	local03, #0
2b0c0     97 26 48 FB | 	callpa	#(@LR__4452-@LR__4451)>>2,fcache_load_ptr_
2b0c4                 | LR__4451
2b0c4     04 22 16 F2 | 	cmp	local03, #4 wc
2b0c8     44 00 90 3D |  if_ae	jmp	#LR__4453
2b0cc     11 25 02 F6 | 	mov	local04, local03
2b0d0     02 24 66 F0 | 	shl	local04, #2
2b0d4     14 4E 05 F1 | 	add	fp, #20
2b0d8     A7 24 02 F1 | 	add	local04, fp
2b0dc     34 1E 06 F1 | 	add	local01, #52
2b0e0     0F 13 02 F6 | 	mov	arg01, local01
2b0e4     34 1E 86 F1 | 	sub	local01, #52
2b0e8     BE 13 06 F1 | 	add	arg01, #446
2b0ec     11 15 02 F6 | 	mov	arg02, local03
2b0f0     04 14 66 F0 | 	shl	arg02, #4
2b0f4     0A 13 02 F1 | 	add	arg01, arg02
2b0f8     08 12 06 F1 | 	add	arg01, #8
2b0fc                 | ' {
2b0fc                 | ' 
2b0fc                 | ' 	return *((DWORD*)ptr);
2b0fc     09 FB 01 FB | 	rdlong	result1, arg01
2b100     14 4E 85 F1 | 	sub	fp, #20
2b104     12 FB 61 FC | 	wrlong	result1, local04
2b108     01 22 06 F1 | 	add	local03, #1
2b10c     B4 FF 9F FD | 	jmp	#LR__4451
2b110                 | LR__4452
2b110                 | LR__4453
2b110     00 20 0E F2 | 	cmp	local02, #0 wz
2b114     10 25 02 56 |  if_ne	mov	local04, local02
2b118     01 24 86 51 |  if_ne	sub	local04, #1
2b11c     00 24 06 A6 |  if_e	mov	local04, #0
2b120     12 23 02 F6 | 	mov	local03, local04
2b124                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2b124                 | ' 	}
2b124                 | ' 	i = part ? part - 1 : 0;
2b124                 | ' 	do {
2b124                 | LR__4454
2b124     11 25 02 F6 | 	mov	local04, local03
2b128     02 24 66 F0 | 	shl	local04, #2
2b12c     14 4E 05 F1 | 	add	fp, #20
2b130     A7 24 02 F1 | 	add	local04, fp
2b134     12 25 0A FB | 	rdlong	local04, local04 wz
2b138     14 4E 85 F1 | 	sub	fp, #20
2b13c     28 00 90 AD |  if_e	jmp	#LR__4455
2b140     11 25 02 F6 | 	mov	local04, local03
2b144     02 24 66 F0 | 	shl	local04, #2
2b148     14 4E 05 F1 | 	add	fp, #20
2b14c     A7 24 02 F1 | 	add	local04, fp
2b150     12 15 02 FB | 	rdlong	arg02, local04
2b154     0F 13 02 F6 | 	mov	arg01, local01
2b158     14 4E 85 F1 | 	sub	fp, #20
2b15c     50 FD BF FD | 	call	#_fatfs_cc_check_fs
2b160     FD 24 02 F6 | 	mov	local04, result1
2b164     04 00 90 FD | 	jmp	#LR__4456
2b168                 | LR__4455
2b168     03 24 06 F6 | 	mov	local04, #3
2b16c                 | LR__4456
2b16c     12 27 02 F6 | 	mov	local05, local04
2b170     00 20 0E F2 | 	cmp	local02, #0 wz
2b174     02 26 16 A2 |  if_e	cmp	local05, #2 wc
2b178     0C 00 90 8D |  if_c_and_z	jmp	#LR__4457
2b17c     01 22 06 A1 |  if_e	add	local03, #1
2b180     04 22 16 A2 |  if_e	cmp	local03, #4 wc
2b184     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4454
2b188                 | LR__4457
2b188                 | ' 	return fmt;
2b188     13 FB 01 F6 | 	mov	result1, local05
2b18c                 | LR__4458
2b18c     A7 F0 03 F6 | 	mov	ptra, fp
2b190     B2 00 A0 FD | 	call	#popregs_
2b194                 | _fatfs_cc_find_volume_ret
2b194     2D 00 64 FD | 	ret
2b198                 | 
2b198                 | _fatfs_cc_mount_volume
2b198     0B 4A 05 F6 | 	mov	COUNT_, #11
2b19c     A8 00 A0 FD | 	call	#pushregs_
2b1a0     0A 1F 02 F6 | 	mov	local01, arg02
2b1a4     0B 21 02 F6 | 	mov	local02, arg03
2b1a8     0F 01 68 FC | 	wrlong	#0, local01
2b1ac     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2b1b0     FD 22 02 F6 | 	mov	local03, result1
2b1b4     00 22 56 F2 | 	cmps	local03, #0 wc
2b1b8     0B FA 05 C6 |  if_b	mov	result1, #11
2b1bc     3C 05 90 CD |  if_b	jmp	#LR__4470
2b1c0     11 17 02 F6 | 	mov	arg03, local03
2b1c4     02 16 66 F0 | 	shl	arg03, #2
2b1c8     F2 16 02 F1 | 	add	arg03, objptr
2b1cc     0B 25 0A FB | 	rdlong	local04, arg03 wz
2b1d0     0C FA 05 A6 |  if_e	mov	result1, #12
2b1d4     24 05 90 AD |  if_e	jmp	#LR__4470
2b1d8     0F 25 62 FC | 	wrlong	local04, local01
2b1dc     10 21 E2 F8 | 	getbyte	local02, local02, #0
2b1e0     FE 20 06 F5 | 	and	local02, #254
2b1e4     12 17 CA FA | 	rdbyte	arg03, local04 wz
2b1e8     4C 00 90 AD |  if_e	jmp	#LR__4461
2b1ec     01 24 06 F1 | 	add	local04, #1
2b1f0     12 13 CA FA | 	rdbyte	arg01, local04 wz
2b1f4     01 24 86 F1 | 	sub	local04, #1
2b1f8     01 FA 05 56 |  if_ne	mov	result1, #1
2b1fc                 | ' 
2b1fc                 | ' 	return Stat;
2b1fc     01 00 00 AF 
2b200     20 E4 05 A1 |  if_e	add	objptr, ##544
2b204     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2b208     01 00 00 AF 
2b20c     20 E4 85 A1 |  if_e	sub	objptr, ##544
2b210     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
2b214     01 16 CE F7 | 	test	arg03, #1 wz
2b218     1C 00 90 5D |  if_ne	jmp	#LR__4460
2b21c     00 20 0E F2 | 	cmp	local02, #0 wz
2b220     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
2b224     04 FA CD 57 |  if_ne	test	result1, #4 wz
2b228                 | ' 				return FR_WRITE_PROTECTED;
2b228     0A FA 05 56 |  if_ne	mov	result1, #10
2b22c     CC 04 90 5D |  if_ne	jmp	#LR__4470
2b230                 | ' 			}
2b230                 | ' 			return FR_OK;
2b230     00 FA 05 F6 | 	mov	result1, #0
2b234     C4 04 90 FD | 	jmp	#LR__4470
2b238                 | LR__4460
2b238                 | LR__4461
2b238     12 01 48 FC | 	wrbyte	#0, local04
2b23c     01 24 06 F1 | 	add	local04, #1
2b240     12 23 42 FC | 	wrbyte	local03, local04
2b244     12 13 C2 FA | 	rdbyte	arg01, local04
2b248     01 24 86 F1 | 	sub	local04, #1
2b24c     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
2b250     FD 16 02 F6 | 	mov	arg03, result1
2b254     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
2b258     01 26 CE F7 | 	test	local05, #1 wz
2b25c                 | ' 		return FR_NOT_READY;
2b25c     03 FA 05 56 |  if_ne	mov	result1, #3
2b260     98 04 90 5D |  if_ne	jmp	#LR__4470
2b264     00 20 0E F2 | 	cmp	local02, #0 wz
2b268     0B 27 02 56 |  if_ne	mov	local05, arg03
2b26c     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
2b270     04 26 CE 57 |  if_ne	test	local05, #4 wz
2b274                 | ' 		return FR_WRITE_PROTECTED;
2b274     0A FA 05 56 |  if_ne	mov	result1, #10
2b278     80 04 90 5D |  if_ne	jmp	#LR__4470
2b27c     12 13 02 F6 | 	mov	arg01, local04
2b280     00 14 06 F6 | 	mov	arg02, #0
2b284     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2b288     FD 12 02 F6 | 	mov	arg01, result1
2b28c     04 12 0E F2 | 	cmp	arg01, #4 wz
2b290     01 FA 05 A6 |  if_e	mov	result1, #1
2b294     64 04 90 AD |  if_e	jmp	#LR__4470
2b298     02 12 16 F2 | 	cmp	arg01, #2 wc
2b29c     0D FA 05 36 |  if_ae	mov	result1, #13
2b2a0     58 04 90 3D |  if_ae	jmp	#LR__4470
2b2a4     30 24 06 F1 | 	add	local04, #48
2b2a8     12 29 02 FB | 	rdlong	local06, local04
2b2ac     04 24 06 F1 | 	add	local04, #4
2b2b0     12 13 02 F6 | 	mov	arg01, local04
2b2b4     34 24 86 F1 | 	sub	local04, #52
2b2b8     0B 12 06 F1 | 	add	arg01, #11
2b2bc                 | ' {
2b2bc                 | ' 
2b2bc                 | ' 	return *((WORD*)ptr);
2b2bc     09 FB E1 FA | 	rdword	result1, arg01
2b2c0     01 00 00 FF 
2b2c4     00 FA 0D F2 | 	cmp	result1, ##512 wz
2b2c8     0D FA 05 56 |  if_ne	mov	result1, #13
2b2cc     2C 04 90 5D |  if_ne	jmp	#LR__4470
2b2d0     34 24 06 F1 | 	add	local04, #52
2b2d4     12 13 02 F6 | 	mov	arg01, local04
2b2d8     34 24 86 F1 | 	sub	local04, #52
2b2dc     16 12 06 F1 | 	add	arg01, #22
2b2e0                 | ' {
2b2e0                 | ' 
2b2e0                 | ' 	return *((WORD*)ptr);
2b2e0     09 FB E1 FA | 	rdword	result1, arg01
2b2e4     FD 2A 0A F6 | 	mov	local07, result1 wz
2b2e8     18 00 90 5D |  if_ne	jmp	#LR__4462
2b2ec     34 24 06 F1 | 	add	local04, #52
2b2f0     12 13 02 F6 | 	mov	arg01, local04
2b2f4     34 24 86 F1 | 	sub	local04, #52
2b2f8     24 12 06 F1 | 	add	arg01, #36
2b2fc                 | ' {
2b2fc                 | ' 
2b2fc                 | ' 	return *((DWORD*)ptr);
2b2fc     09 FB 01 FB | 	rdlong	result1, arg01
2b300     FD 2A 02 F6 | 	mov	local07, result1
2b304                 | LR__4462
2b304     1C 24 06 F1 | 	add	local04, #28
2b308     12 2B 62 FC | 	wrlong	local07, local04
2b30c     28 24 06 F1 | 	add	local04, #40
2b310     12 27 C2 FA | 	rdbyte	local05, local04
2b314     42 24 86 F1 | 	sub	local04, #66
2b318     12 27 42 FC | 	wrbyte	local05, local04
2b31c     12 27 C2 FA | 	rdbyte	local05, local04
2b320     02 24 86 F1 | 	sub	local04, #2
2b324     01 26 0E F2 | 	cmp	local05, #1 wz
2b328     02 24 06 51 |  if_ne	add	local04, #2
2b32c     12 27 C2 5A |  if_ne	rdbyte	local05, local04
2b330     02 24 86 51 |  if_ne	sub	local04, #2
2b334     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
2b338     0D FA 05 56 |  if_ne	mov	result1, #13
2b33c     BC 03 90 5D |  if_ne	jmp	#LR__4470
2b340     02 24 06 F1 | 	add	local04, #2
2b344     12 27 C2 FA | 	rdbyte	local05, local04
2b348     13 2B 02 FD | 	qmul	local07, local05
2b34c     3F 24 06 F1 | 	add	local04, #63
2b350     12 27 C2 FA | 	rdbyte	local05, local04
2b354     37 24 86 F1 | 	sub	local04, #55
2b358     12 27 52 FC | 	wrword	local05, local04
2b35c     12 27 EA FA | 	rdword	local05, local04 wz
2b360     0A 24 86 F1 | 	sub	local04, #10
2b364     18 2A 62 FD | 	getqx	local07
2b368     20 00 90 AD |  if_e	jmp	#LR__4463
2b36c     0A 24 06 F1 | 	add	local04, #10
2b370     12 27 E2 FA | 	rdword	local05, local04
2b374     13 23 32 F9 | 	getword	local03, local05, #0
2b378     0A 24 86 F1 | 	sub	local04, #10
2b37c     13 27 32 F9 | 	getword	local05, local05, #0
2b380     01 26 86 F1 | 	sub	local05, #1
2b384     13 23 CA F7 | 	test	local03, local05 wz
2b388     08 00 90 AD |  if_e	jmp	#LR__4464
2b38c                 | LR__4463
2b38c     0D FA 05 F6 | 	mov	result1, #13
2b390     68 03 90 FD | 	jmp	#LR__4470
2b394                 | LR__4464
2b394     34 24 06 F1 | 	add	local04, #52
2b398     12 13 02 F6 | 	mov	arg01, local04
2b39c     11 12 06 F1 | 	add	arg01, #17
2b3a0                 | ' {
2b3a0                 | ' 
2b3a0                 | ' 	return *((WORD*)ptr);
2b3a0     09 FB E1 FA | 	rdword	result1, arg01
2b3a4     2C 24 86 F1 | 	sub	local04, #44
2b3a8     12 FB 51 FC | 	wrword	result1, local04
2b3ac     12 27 E2 FA | 	rdword	local05, local04
2b3b0     08 24 86 F1 | 	sub	local04, #8
2b3b4     13 13 52 F6 | 	abs	arg01, local05 wc
2b3b8     09 13 42 F8 | 	getnib	arg01, arg01, #0
2b3bc     09 13 8A F6 | 	negc	arg01, arg01 wz
2b3c0     0D FA 05 56 |  if_ne	mov	result1, #13
2b3c4     34 03 90 5D |  if_ne	jmp	#LR__4470
2b3c8     34 24 06 F1 | 	add	local04, #52
2b3cc     12 13 02 F6 | 	mov	arg01, local04
2b3d0     34 24 86 F1 | 	sub	local04, #52
2b3d4     13 12 06 F1 | 	add	arg01, #19
2b3d8                 | ' {
2b3d8                 | ' 
2b3d8                 | ' 	return *((WORD*)ptr);
2b3d8     09 FB E1 FA | 	rdword	result1, arg01
2b3dc     FD 2C 0A F6 | 	mov	local08, result1 wz
2b3e0     34 24 06 A1 |  if_e	add	local04, #52
2b3e4     12 13 02 A6 |  if_e	mov	arg01, local04
2b3e8     34 24 86 A1 |  if_e	sub	local04, #52
2b3ec     20 12 06 A1 |  if_e	add	arg01, #32
2b3f0                 | ' {
2b3f0                 | ' 
2b3f0                 | ' 	return *((DWORD*)ptr);
2b3f0     09 2D 02 AB |  if_e	rdlong	local08, arg01
2b3f4     34 24 06 F1 | 	add	local04, #52
2b3f8     12 13 02 F6 | 	mov	arg01, local04
2b3fc     34 24 86 F1 | 	sub	local04, #52
2b400     0E 12 06 F1 | 	add	arg01, #14
2b404                 | ' {
2b404                 | ' 
2b404                 | ' 	return *((WORD*)ptr);
2b404     09 FB E1 FA | 	rdword	result1, arg01
2b408     FD 12 02 F6 | 	mov	arg01, result1
2b40c     09 27 02 F6 | 	mov	local05, arg01
2b410     0F 26 4E F7 | 	zerox	local05, #15 wz
2b414     0D FA 05 A6 |  if_e	mov	result1, #13
2b418     E0 02 90 AD |  if_e	jmp	#LR__4470
2b41c     09 2F 32 F9 | 	getword	local09, arg01, #0
2b420     15 2F 02 F1 | 	add	local09, local07
2b424     08 24 06 F1 | 	add	local04, #8
2b428     12 27 E2 FA | 	rdword	local05, local04
2b42c     08 24 86 F1 | 	sub	local04, #8
2b430     13 27 52 F6 | 	abs	local05, local05 wc
2b434     04 26 46 F0 | 	shr	local05, #4
2b438     13 2F 82 F3 | 	sumc	local09, local05
2b43c     17 2D 12 F2 | 	cmp	local08, local09 wc
2b440     0D FA 05 C6 |  if_b	mov	result1, #13
2b444     B4 02 90 CD |  if_b	jmp	#LR__4470
2b448     17 2D 82 F1 | 	sub	local08, local09
2b44c     0A 24 06 F1 | 	add	local04, #10
2b450     12 27 E2 FA | 	rdword	local05, local04
2b454     13 2D 12 FD | 	qdiv	local08, local05
2b458     0A 24 86 F1 | 	sub	local04, #10
2b45c     18 26 62 FD | 	getqx	local05
2b460     00 26 0E F2 | 	cmp	local05, #0 wz
2b464     0D FA 05 A6 |  if_e	mov	result1, #13
2b468     90 02 90 AD |  if_e	jmp	#LR__4470
2b46c     00 30 06 F6 | 	mov	local10, #0
2b470     FF FF 07 FF 
2b474     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
2b478     03 30 06 C6 |  if_b	mov	local10, #3
2b47c     7F 00 00 FF 
2b480     F6 27 16 F2 | 	cmp	local05, ##65526 wc
2b484     02 30 06 C6 |  if_b	mov	local10, #2
2b488     07 00 00 FF 
2b48c     F6 27 16 F2 | 	cmp	local05, ##4086 wc
2b490     01 30 06 C6 |  if_b	mov	local10, #1
2b494     00 30 0E F2 | 	cmp	local10, #0 wz
2b498     0D FA 05 A6 |  if_e	mov	result1, #13
2b49c     5C 02 90 AD |  if_e	jmp	#LR__4470
2b4a0     02 26 06 F1 | 	add	local05, #2
2b4a4     18 24 06 F1 | 	add	local04, #24
2b4a8     12 27 62 FC | 	wrlong	local05, local04
2b4ac     08 24 06 F1 | 	add	local04, #8
2b4b0     12 29 62 FC | 	wrlong	local06, local04
2b4b4     14 27 02 F6 | 	mov	local05, local06
2b4b8     09 13 32 F9 | 	getword	arg01, arg01, #0
2b4bc     09 27 02 F1 | 	add	local05, arg01
2b4c0     04 24 06 F1 | 	add	local04, #4
2b4c4     12 27 62 FC | 	wrlong	local05, local04
2b4c8     14 27 02 F6 | 	mov	local05, local06
2b4cc     17 27 02 F1 | 	add	local05, local09
2b4d0     08 24 06 F1 | 	add	local04, #8
2b4d4     12 27 62 FC | 	wrlong	local05, local04
2b4d8     2C 24 86 F1 | 	sub	local04, #44
2b4dc     03 30 0E F2 | 	cmp	local10, #3 wz
2b4e0     5C 00 90 5D |  if_ne	jmp	#LR__4465
2b4e4     34 24 06 F1 | 	add	local04, #52
2b4e8     12 13 02 F6 | 	mov	arg01, local04
2b4ec     34 24 86 F1 | 	sub	local04, #52
2b4f0     2A 12 06 F1 | 	add	arg01, #42
2b4f4                 | ' {
2b4f4                 | ' 
2b4f4                 | ' 	return *((WORD*)ptr);
2b4f4     09 FB E9 FA | 	rdword	result1, arg01 wz
2b4f8     0D FA 05 56 |  if_ne	mov	result1, #13
2b4fc     FC 01 90 5D |  if_ne	jmp	#LR__4470
2b500     08 24 06 F1 | 	add	local04, #8
2b504     12 27 EA FA | 	rdword	local05, local04 wz
2b508     08 24 86 F1 | 	sub	local04, #8
2b50c     0D FA 05 56 |  if_ne	mov	result1, #13
2b510     E8 01 90 5D |  if_ne	jmp	#LR__4470
2b514     34 24 06 F1 | 	add	local04, #52
2b518     12 13 02 F6 | 	mov	arg01, local04
2b51c     2C 12 06 F1 | 	add	arg01, #44
2b520                 | ' {
2b520                 | ' 
2b520                 | ' 	return *((DWORD*)ptr);
2b520     09 FB 01 FB | 	rdlong	result1, arg01
2b524     0C 24 86 F1 | 	sub	local04, #12
2b528     12 FB 61 FC | 	wrlong	result1, local04
2b52c     10 24 86 F1 | 	sub	local04, #16
2b530     12 33 02 FB | 	rdlong	local11, local04
2b534     18 24 86 F1 | 	sub	local04, #24
2b538     02 32 66 F0 | 	shl	local11, #2
2b53c     6C 00 90 FD | 	jmp	#LR__4467
2b540                 | LR__4465
2b540     08 24 06 F1 | 	add	local04, #8
2b544     12 27 EA FA | 	rdword	local05, local04 wz
2b548     08 24 86 F1 | 	sub	local04, #8
2b54c     0D FA 05 A6 |  if_e	mov	result1, #13
2b550     A8 01 90 AD |  if_e	jmp	#LR__4470
2b554     24 24 06 F1 | 	add	local04, #36
2b558     12 27 02 FB | 	rdlong	local05, local04
2b55c     15 27 02 F1 | 	add	local05, local07
2b560     04 24 06 F1 | 	add	local04, #4
2b564     12 27 62 FC | 	wrlong	local05, local04
2b568     28 24 86 F1 | 	sub	local04, #40
2b56c     02 30 0E F2 | 	cmp	local10, #2 wz
2b570     18 24 06 A1 |  if_e	add	local04, #24
2b574     12 27 02 AB |  if_e	rdlong	local05, local04
2b578     18 24 86 A1 |  if_e	sub	local04, #24
2b57c     01 26 66 A0 |  if_e	shl	local05, #1
2b580     24 00 90 AD |  if_e	jmp	#LR__4466
2b584     18 24 06 F1 | 	add	local04, #24
2b588     12 33 02 FB | 	rdlong	local11, local04
2b58c     19 27 02 F6 | 	mov	local05, local11
2b590     01 26 66 F0 | 	shl	local05, #1
2b594     19 27 02 F1 | 	add	local05, local11
2b598     01 26 46 F0 | 	shr	local05, #1
2b59c     18 24 86 F1 | 	sub	local04, #24
2b5a0     01 32 06 F5 | 	and	local11, #1
2b5a4     19 27 02 F1 | 	add	local05, local11
2b5a8                 | LR__4466
2b5a8     13 33 02 F6 | 	mov	local11, local05
2b5ac                 | LR__4467
2b5ac     FF 33 06 F1 | 	add	local11, #511
2b5b0     09 32 46 F0 | 	shr	local11, #9
2b5b4     1C 24 06 F1 | 	add	local04, #28
2b5b8     12 17 02 FB | 	rdlong	arg03, local04
2b5bc     1C 24 86 F1 | 	sub	local04, #28
2b5c0     19 17 12 F2 | 	cmp	arg03, local11 wc
2b5c4     0D FA 05 C6 |  if_b	mov	result1, #13
2b5c8     30 01 90 CD |  if_b	jmp	#LR__4470
2b5cc     14 24 06 F1 | 	add	local04, #20
2b5d0     FF FF FF FF 
2b5d4     12 FF 6B FC | 	wrlong	##-1, local04
2b5d8     04 24 86 F1 | 	sub	local04, #4
2b5dc     FF FF FF FF 
2b5e0     12 FF 6B FC | 	wrlong	##-1, local04
2b5e4     0C 24 86 F1 | 	sub	local04, #12
2b5e8     12 01 49 FC | 	wrbyte	#128, local04
2b5ec     04 24 86 F1 | 	sub	local04, #4
2b5f0     03 30 0E F2 | 	cmp	local10, #3 wz
2b5f4     D0 00 90 5D |  if_ne	jmp	#LR__4469
2b5f8     34 24 06 F1 | 	add	local04, #52
2b5fc     12 13 02 F6 | 	mov	arg01, local04
2b600     34 24 86 F1 | 	sub	local04, #52
2b604     30 12 06 F1 | 	add	arg01, #48
2b608                 | ' {
2b608                 | ' 
2b608                 | ' 	return *((WORD*)ptr);
2b608     09 FB E1 FA | 	rdword	result1, arg01
2b60c     FD 26 32 F9 | 	getword	local05, result1, #0
2b610     01 26 0E F2 | 	cmp	local05, #1 wz
2b614     B0 00 90 5D |  if_ne	jmp	#LR__4469
2b618     01 28 06 F1 | 	add	local06, #1
2b61c     12 13 02 F6 | 	mov	arg01, local04
2b620     14 15 02 F6 | 	mov	arg02, local06
2b624     CC CD BF FD | 	call	#_fatfs_cc_move_window
2b628     00 FA 0D F2 | 	cmp	result1, #0 wz
2b62c     98 00 90 5D |  if_ne	jmp	#LR__4469
2b630     04 24 06 F1 | 	add	local04, #4
2b634     12 01 48 FC | 	wrbyte	#0, local04
2b638     30 24 06 F1 | 	add	local04, #48
2b63c     12 13 02 F6 | 	mov	arg01, local04
2b640     34 24 86 F1 | 	sub	local04, #52
2b644     FE 13 06 F1 | 	add	arg01, #510
2b648                 | ' {
2b648                 | ' 
2b648                 | ' 	return *((WORD*)ptr);
2b648     09 FB E1 FA | 	rdword	result1, arg01
2b64c     FD 26 32 F9 | 	getword	local05, result1, #0
2b650     55 00 00 FF 
2b654     55 26 0E F2 | 	cmp	local05, ##43605 wz
2b658     34 24 06 A1 |  if_e	add	local04, #52
2b65c     12 13 02 A6 |  if_e	mov	arg01, local04
2b660     34 24 86 A1 |  if_e	sub	local04, #52
2b664                 | ' {
2b664                 | ' 
2b664                 | ' 	return *((DWORD*)ptr);
2b664     09 FB 01 AB |  if_e	rdlong	result1, arg01
2b668     A9 B0 20 AF 
2b66c     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
2b670     54 00 90 5D |  if_ne	jmp	#LR__4468
2b674     34 24 06 F1 | 	add	local04, #52
2b678     12 13 02 F6 | 	mov	arg01, local04
2b67c     34 24 86 F1 | 	sub	local04, #52
2b680     E4 13 06 F1 | 	add	arg01, #484
2b684                 | ' {
2b684                 | ' 
2b684                 | ' 	return *((DWORD*)ptr);
2b684     09 FB 01 FB | 	rdlong	result1, arg01
2b688     B9 A0 30 FF 
2b68c     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
2b690     34 00 90 5D |  if_ne	jmp	#LR__4468
2b694     34 24 06 F1 | 	add	local04, #52
2b698     12 13 02 F6 | 	mov	arg01, local04
2b69c     E8 13 06 F1 | 	add	arg01, #488
2b6a0                 | ' {
2b6a0                 | ' 
2b6a0                 | ' 	return *((DWORD*)ptr);
2b6a0     09 FB 01 FB | 	rdlong	result1, arg01
2b6a4     20 24 86 F1 | 	sub	local04, #32
2b6a8     12 FB 61 FC | 	wrlong	result1, local04
2b6ac     20 24 06 F1 | 	add	local04, #32
2b6b0     12 13 02 F6 | 	mov	arg01, local04
2b6b4     EC 13 06 F1 | 	add	arg01, #492
2b6b8                 | ' {
2b6b8                 | ' 
2b6b8                 | ' 	return *((DWORD*)ptr);
2b6b8     09 FB 01 FB | 	rdlong	result1, arg01
2b6bc     24 24 86 F1 | 	sub	local04, #36
2b6c0     12 FB 61 FC | 	wrlong	result1, local04
2b6c4     10 24 86 F1 | 	sub	local04, #16
2b6c8                 | LR__4468
2b6c8                 | LR__4469
2b6c8     12 31 42 FC | 	wrbyte	local10, local04
2b6cc     04 E4 05 F1 | 	add	objptr, #4
2b6d0     F2 26 E2 FA | 	rdword	local05, objptr
2b6d4     01 26 06 F1 | 	add	local05, #1
2b6d8     F2 26 52 FC | 	wrword	local05, objptr
2b6dc     F2 32 E2 FA | 	rdword	local11, objptr
2b6e0     06 24 06 F1 | 	add	local04, #6
2b6e4     12 33 52 FC | 	wrword	local11, local04
2b6e8     04 E4 05 F1 | 	add	objptr, #4
2b6ec     06 24 06 F1 | 	add	local04, #6
2b6f0     12 E5 61 FC | 	wrlong	objptr, local04
2b6f4                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2b6f4                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2b6f4                 | ' 			{
2b6f4                 | ' 
2b6f4                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2b6f4                 | ' 
2b6f4                 | ' 
2b6f4                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2b6f4                 | ' 
2b6f4                 | ' 			}
2b6f4                 | ' 		}
2b6f4                 | ' 
2b6f4                 | ' 
2b6f4                 | ' 	}
2b6f4                 | ' 
2b6f4                 | ' 	fs->fs_type = (BYTE)fmt;
2b6f4                 | ' 	fs->id = ++Fsid;
2b6f4                 | ' 
2b6f4                 | ' 	fs->lfnbuf = LfnBuf;
2b6f4                 | ' #line 3567 "ff.c"
2b6f4                 | ' 	return FR_OK;
2b6f4     00 FA 05 F6 | 	mov	result1, #0
2b6f8     08 E4 85 F1 | 	sub	objptr, #8
2b6fc                 | LR__4470
2b6fc     A7 F0 03 F6 | 	mov	ptra, fp
2b700     B2 00 A0 FD | 	call	#popregs_
2b704                 | _fatfs_cc_mount_volume_ret
2b704     2D 00 64 FD | 	ret
2b708                 | 
2b708                 | _fatfs_cc_validate
2b708     09 01 0A F6 | 	mov	_var01, arg01 wz
2b70c     09 02 06 F6 | 	mov	_var02, #9
2b710     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2b714     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2b718     50 00 90 AD |  if_e	jmp	#LR__4480
2b71c     04 00 06 F1 | 	add	_var01, #4
2b720     00 07 E2 FA | 	rdword	_var04, _var01
2b724     04 00 86 F1 | 	sub	_var01, #4
2b728     00 13 02 FB | 	rdlong	arg01, _var01
2b72c     06 12 06 F1 | 	add	arg01, #6
2b730     09 FB E1 FA | 	rdword	result1, arg01
2b734     FD 06 0A F2 | 	cmp	_var04, result1 wz
2b738     30 00 90 5D |  if_ne	jmp	#LR__4480
2b73c     00 07 02 FB | 	rdlong	_var04, _var01
2b740     01 06 06 F1 | 	add	_var04, #1
2b744     03 13 CA FA | 	rdbyte	arg01, _var04 wz
2b748     01 FA 05 56 |  if_ne	mov	result1, #1
2b74c                 | ' 
2b74c                 | ' 	return Stat;
2b74c     01 00 00 AF 
2b750     20 E4 05 A1 |  if_e	add	objptr, ##544
2b754     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2b758     01 00 00 AF 
2b75c     20 E4 85 A1 |  if_e	sub	objptr, ##544
2b760     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
2b764     01 04 CE F7 | 	test	_var03, #1 wz
2b768     00 02 06 A6 |  if_e	mov	_var02, #0
2b76c                 | LR__4480
2b76c     00 02 0E F2 | 	cmp	_var02, #0 wz
2b770     00 05 02 AB |  if_e	rdlong	_var03, _var01
2b774     00 04 06 56 |  if_ne	mov	_var03, #0
2b778     0A 05 62 FC | 	wrlong	_var03, arg02
2b77c                 | ' 			res = FR_OK;
2b77c                 | ' 		}
2b77c                 | ' 
2b77c                 | ' 	}
2b77c                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2b77c                 | ' 	return res;
2b77c     01 FB 01 F6 | 	mov	result1, _var02
2b780                 | _fatfs_cc_validate_ret
2b780     2D 00 64 FD | 	ret
2b784                 | 
2b784                 | _fatfs_cc_f_mount
2b784     01 4A 05 F6 | 	mov	COUNT_, #1
2b788     A8 00 A0 FD | 	call	#pushregs_
2b78c     20 F0 07 F1 | 	add	ptra, #32
2b790     04 4E 05 F1 | 	add	fp, #4
2b794     A7 12 62 FC | 	wrlong	arg01, fp
2b798     04 4E 05 F1 | 	add	fp, #4
2b79c     A7 14 62 FC | 	wrlong	arg02, fp
2b7a0     04 4E 05 F1 | 	add	fp, #4
2b7a4     A7 16 42 FC | 	wrbyte	arg03, fp
2b7a8     04 4E 85 F1 | 	sub	fp, #4
2b7ac     A7 16 02 FB | 	rdlong	arg03, fp
2b7b0     14 4E 05 F1 | 	add	fp, #20
2b7b4     A7 16 62 FC | 	wrlong	arg03, fp
2b7b8     A7 12 02 F6 | 	mov	arg01, fp
2b7bc     1C 4E 85 F1 | 	sub	fp, #28
2b7c0     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2b7c4     14 4E 05 F1 | 	add	fp, #20
2b7c8     A7 FA 61 FC | 	wrlong	result1, fp
2b7cc     14 4E 85 F1 | 	sub	fp, #20
2b7d0     00 FA 55 F2 | 	cmps	result1, #0 wc
2b7d4     0B FA 05 C6 |  if_b	mov	result1, #11
2b7d8     C0 00 90 CD |  if_b	jmp	#LR__4491
2b7dc     14 4E 05 F1 | 	add	fp, #20
2b7e0     A7 16 02 FB | 	rdlong	arg03, fp
2b7e4     02 16 66 F0 | 	shl	arg03, #2
2b7e8     F2 16 02 F1 | 	add	arg03, objptr
2b7ec     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2b7f0     04 4E 85 F1 | 	sub	fp, #4
2b7f4     A7 16 62 FC | 	wrlong	arg03, fp
2b7f8     10 4E 85 F1 | 	sub	fp, #16
2b7fc     28 00 90 AD |  if_e	jmp	#LR__4490
2b800     10 4E 05 F1 | 	add	fp, #16
2b804     A7 16 02 FB | 	rdlong	arg03, fp
2b808     10 4E 85 F1 | 	sub	fp, #16
2b80c     01 16 06 F1 | 	add	arg03, #1
2b810     0B 13 C2 FA | 	rdbyte	arg01, arg03
2b814     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2b818     10 4E 05 F1 | 	add	fp, #16
2b81c     A7 16 02 FB | 	rdlong	arg03, fp
2b820     10 4E 85 F1 | 	sub	fp, #16
2b824     0B 01 48 FC | 	wrbyte	#0, arg03
2b828                 | LR__4490
2b828     04 4E 05 F1 | 	add	fp, #4
2b82c     A7 1E 0A FB | 	rdlong	local01, fp wz
2b830     04 4E 85 F1 | 	sub	fp, #4
2b834     04 4E 05 51 |  if_ne	add	fp, #4
2b838     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2b83c     04 4E 85 51 |  if_ne	sub	fp, #4
2b840     0F 01 48 5C |  if_ne	wrbyte	#0, local01
2b844     14 4E 05 F1 | 	add	fp, #20
2b848     A7 1E 02 FB | 	rdlong	local01, fp
2b84c     02 1E 66 F0 | 	shl	local01, #2
2b850     F2 1E 02 F1 | 	add	local01, objptr
2b854     10 4E 85 F1 | 	sub	fp, #16
2b858     A7 16 02 FB | 	rdlong	arg03, fp
2b85c     0F 17 62 FC | 	wrlong	arg03, local01
2b860     08 4E 05 F1 | 	add	fp, #8
2b864     A7 1E CA FA | 	rdbyte	local01, fp wz
2b868     0C 4E 85 F1 | 	sub	fp, #12
2b86c     00 FA 05 A6 |  if_e	mov	result1, #0
2b870     28 00 90 AD |  if_e	jmp	#LR__4491
2b874     08 4E 05 F1 | 	add	fp, #8
2b878     A7 12 02 F6 | 	mov	arg01, fp
2b87c     04 4E 85 F1 | 	sub	fp, #4
2b880     A7 14 02 F6 | 	mov	arg02, fp
2b884     04 4E 85 F1 | 	sub	fp, #4
2b888     00 16 06 F6 | 	mov	arg03, #0
2b88c     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2b890     18 4E 05 F1 | 	add	fp, #24
2b894     A7 FA 61 FC | 	wrlong	result1, fp
2b898                 | ' 
2b898                 | ' 	res = mount_volume(&path, &fs, 0);
2b898                 | ' 	return res ;
2b898     18 4E 85 F1 | 	sub	fp, #24
2b89c                 | LR__4491
2b89c     A7 F0 03 F6 | 	mov	ptra, fp
2b8a0     B2 00 A0 FD | 	call	#popregs_
2b8a4                 | _fatfs_cc_f_mount_ret
2b8a4     2D 00 64 FD | 	ret
2b8a8                 | 
2b8a8                 | _fatfs_cc_f_open
2b8a8     02 4A 05 F6 | 	mov	COUNT_, #2
2b8ac     A8 00 A0 FD | 	call	#pushregs_
2b8b0     60 F0 07 F1 | 	add	ptra, #96
2b8b4     04 4E 05 F1 | 	add	fp, #4
2b8b8     A7 12 62 FC | 	wrlong	arg01, fp
2b8bc     04 4E 05 F1 | 	add	fp, #4
2b8c0     A7 14 62 FC | 	wrlong	arg02, fp
2b8c4     04 4E 05 F1 | 	add	fp, #4
2b8c8     A7 16 42 FC | 	wrbyte	arg03, fp
2b8cc     08 4E 85 F1 | 	sub	fp, #8
2b8d0     A7 18 0A FB | 	rdlong	arg04, fp wz
2b8d4     04 4E 85 F1 | 	sub	fp, #4
2b8d8     09 FA 05 A6 |  if_e	mov	result1, #9
2b8dc     98 06 90 AD |  if_e	jmp	#LR__4517
2b8e0     0C 4E 05 F1 | 	add	fp, #12
2b8e4     A7 18 C2 FA | 	rdbyte	arg04, fp
2b8e8     3F 18 06 F5 | 	and	arg04, #63
2b8ec     A7 18 42 FC | 	wrbyte	arg04, fp
2b8f0     04 4E 85 F1 | 	sub	fp, #4
2b8f4     A7 12 02 F6 | 	mov	arg01, fp
2b8f8     3C 4E 05 F1 | 	add	fp, #60
2b8fc     A7 14 02 F6 | 	mov	arg02, fp
2b900     38 4E 85 F1 | 	sub	fp, #56
2b904     A7 16 C2 FA | 	rdbyte	arg03, fp
2b908     0C 4E 85 F1 | 	sub	fp, #12
2b90c     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
2b910     10 4E 05 F1 | 	add	fp, #16
2b914     A7 FA 61 FC | 	wrlong	result1, fp
2b918     10 4E 85 F1 | 	sub	fp, #16
2b91c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b920     2C 06 90 5D |  if_ne	jmp	#LR__4516
2b924     44 4E 05 F1 | 	add	fp, #68
2b928     A7 18 02 FB | 	rdlong	arg04, fp
2b92c     30 4E 85 F1 | 	sub	fp, #48
2b930     A7 18 62 FC | 	wrlong	arg04, fp
2b934     A7 12 02 F6 | 	mov	arg01, fp
2b938     0C 4E 85 F1 | 	sub	fp, #12
2b93c     A7 1E 02 FB | 	rdlong	local01, fp
2b940     08 4E 85 F1 | 	sub	fp, #8
2b944     0F 15 02 F6 | 	mov	arg02, local01
2b948     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
2b94c     10 4E 05 F1 | 	add	fp, #16
2b950     A7 FA 61 FC | 	wrlong	result1, fp
2b954     10 4E 85 F1 | 	sub	fp, #16
2b958     00 FA 0D F2 | 	cmp	result1, #0 wz
2b95c     1C 00 90 5D |  if_ne	jmp	#LR__4500
2b960     3F 4E 05 F1 | 	add	fp, #63
2b964     A7 18 C2 FA | 	rdbyte	arg04, fp
2b968     3F 4E 85 F1 | 	sub	fp, #63
2b96c     80 18 CE F7 | 	test	arg04, #128 wz
2b970     10 4E 05 51 |  if_ne	add	fp, #16
2b974     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2b978     10 4E 85 51 |  if_ne	sub	fp, #16
2b97c                 | LR__4500
2b97c     0C 4E 05 F1 | 	add	fp, #12
2b980     A7 18 C2 FA | 	rdbyte	arg04, fp
2b984     0C 4E 85 F1 | 	sub	fp, #12
2b988     1C 18 CE F7 | 	test	arg04, #28 wz
2b98c     F0 01 90 AD |  if_e	jmp	#LR__4505
2b990     10 4E 05 F1 | 	add	fp, #16
2b994     A7 1E 0A FB | 	rdlong	local01, fp wz
2b998     10 4E 85 F1 | 	sub	fp, #16
2b99c     48 00 90 AD |  if_e	jmp	#LR__4502
2b9a0     10 4E 05 F1 | 	add	fp, #16
2b9a4     A7 18 02 FB | 	rdlong	arg04, fp
2b9a8     10 4E 85 F1 | 	sub	fp, #16
2b9ac     04 18 0E F2 | 	cmp	arg04, #4 wz
2b9b0     1C 00 90 5D |  if_ne	jmp	#LR__4501
2b9b4     14 4E 05 F1 | 	add	fp, #20
2b9b8     A7 12 02 F6 | 	mov	arg01, fp
2b9bc     14 4E 85 F1 | 	sub	fp, #20
2b9c0     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
2b9c4     10 4E 05 F1 | 	add	fp, #16
2b9c8     A7 FA 61 FC | 	wrlong	result1, fp
2b9cc     10 4E 85 F1 | 	sub	fp, #16
2b9d0                 | LR__4501
2b9d0     0C 4E 05 F1 | 	add	fp, #12
2b9d4     A7 1E C2 FA | 	rdbyte	local01, fp
2b9d8     08 1E 46 F5 | 	or	local01, #8
2b9dc     A7 1E 42 FC | 	wrbyte	local01, fp
2b9e0     0C 4E 85 F1 | 	sub	fp, #12
2b9e4     3C 00 90 FD | 	jmp	#LR__4504
2b9e8                 | LR__4502
2b9e8     1A 4E 05 F1 | 	add	fp, #26
2b9ec     A7 1E C2 FA | 	rdbyte	local01, fp
2b9f0     1A 4E 85 F1 | 	sub	fp, #26
2b9f4     11 1E CE F7 | 	test	local01, #17 wz
2b9f8     10 4E 05 51 |  if_ne	add	fp, #16
2b9fc     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2ba00     10 4E 85 51 |  if_ne	sub	fp, #16
2ba04     1C 00 90 5D |  if_ne	jmp	#LR__4503
2ba08     0C 4E 05 F1 | 	add	fp, #12
2ba0c     A7 1E C2 FA | 	rdbyte	local01, fp
2ba10     0C 4E 85 F1 | 	sub	fp, #12
2ba14     04 1E CE F7 | 	test	local01, #4 wz
2ba18     10 4E 05 51 |  if_ne	add	fp, #16
2ba1c     A7 10 68 5C |  if_ne	wrlong	#8, fp
2ba20     10 4E 85 51 |  if_ne	sub	fp, #16
2ba24                 | LR__4503
2ba24                 | LR__4504
2ba24     10 4E 05 F1 | 	add	fp, #16
2ba28     A7 1E 0A FB | 	rdlong	local01, fp wz
2ba2c     10 4E 85 F1 | 	sub	fp, #16
2ba30     A8 01 90 5D |  if_ne	jmp	#LR__4508
2ba34     0C 4E 05 F1 | 	add	fp, #12
2ba38     A7 1E C2 FA | 	rdbyte	local01, fp
2ba3c     0C 4E 85 F1 | 	sub	fp, #12
2ba40     08 1E CE F7 | 	test	local01, #8 wz
2ba44     94 01 90 AD |  if_e	jmp	#LR__4508
2ba48     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
2ba4c     54 4E 05 F1 | 	add	fp, #84
2ba50     A7 FA 61 FC | 	wrlong	result1, fp
2ba54     24 4E 85 F1 | 	sub	fp, #36
2ba58     A7 12 02 FB | 	rdlong	arg01, fp
2ba5c     0E 12 06 F1 | 	add	arg01, #14
2ba60     09 FB 61 FC | 	wrlong	result1, arg01
2ba64     A7 12 02 FB | 	rdlong	arg01, fp
2ba68     16 12 06 F1 | 	add	arg01, #22
2ba6c     24 4E 05 F1 | 	add	fp, #36
2ba70     A7 14 02 FB | 	rdlong	arg02, fp
2ba74     09 15 62 FC | 	wrlong	arg02, arg01
2ba78     10 4E 85 F1 | 	sub	fp, #16
2ba7c     A7 12 02 FB | 	rdlong	arg01, fp
2ba80     14 4E 85 F1 | 	sub	fp, #20
2ba84     A7 14 02 FB | 	rdlong	arg02, fp
2ba88     30 4E 85 F1 | 	sub	fp, #48
2ba8c     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
2ba90     48 4E 05 F1 | 	add	fp, #72
2ba94     A7 FA 61 FC | 	wrlong	result1, fp
2ba98     18 4E 85 F1 | 	sub	fp, #24
2ba9c     A7 1E 02 FB | 	rdlong	local01, fp
2baa0     0B 1E 06 F1 | 	add	local01, #11
2baa4     0F 41 48 FC | 	wrbyte	#32, local01
2baa8     14 4E 05 F1 | 	add	fp, #20
2baac     A7 12 02 FB | 	rdlong	arg01, fp
2bab0     14 4E 85 F1 | 	sub	fp, #20
2bab4     A7 14 02 FB | 	rdlong	arg02, fp
2bab8     30 4E 85 F1 | 	sub	fp, #48
2babc     00 16 06 F6 | 	mov	arg03, #0
2bac0     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
2bac4     30 4E 05 F1 | 	add	fp, #48
2bac8     A7 12 02 FB | 	rdlong	arg01, fp
2bacc     1C 12 06 F1 | 	add	arg01, #28
2bad0     09 01 68 FC | 	wrlong	#0, arg01
2bad4     14 4E 05 F1 | 	add	fp, #20
2bad8     A7 1E 02 FB | 	rdlong	local01, fp
2badc     03 1E 06 F1 | 	add	local01, #3
2bae0     0F 03 48 FC | 	wrbyte	#1, local01
2bae4     04 4E 05 F1 | 	add	fp, #4
2bae8     A7 1E 0A FB | 	rdlong	local01, fp wz
2baec     48 4E 85 F1 | 	sub	fp, #72
2baf0     E8 00 90 AD |  if_e	jmp	#LR__4508
2baf4     44 4E 05 F1 | 	add	fp, #68
2baf8     A7 1E 02 FB | 	rdlong	local01, fp
2bafc     30 1E 06 F1 | 	add	local01, #48
2bb00     0F 1F 02 FB | 	rdlong	local01, local01
2bb04     14 4E 05 F1 | 	add	fp, #20
2bb08     A7 1E 62 FC | 	wrlong	local01, fp
2bb0c     44 4E 85 F1 | 	sub	fp, #68
2bb10     A7 12 02 F6 | 	mov	arg01, fp
2bb14     34 4E 05 F1 | 	add	fp, #52
2bb18     A7 14 02 FB | 	rdlong	arg02, fp
2bb1c     48 4E 85 F1 | 	sub	fp, #72
2bb20     00 16 06 F6 | 	mov	arg03, #0
2bb24     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
2bb28     10 4E 05 F1 | 	add	fp, #16
2bb2c     A7 FA 61 FC | 	wrlong	result1, fp
2bb30     10 4E 85 F1 | 	sub	fp, #16
2bb34     00 FA 0D F2 | 	cmp	result1, #0 wz
2bb38     A0 00 90 5D |  if_ne	jmp	#LR__4508
2bb3c     44 4E 05 F1 | 	add	fp, #68
2bb40     A7 12 02 FB | 	rdlong	arg01, fp
2bb44     14 4E 05 F1 | 	add	fp, #20
2bb48     A7 14 02 FB | 	rdlong	arg02, fp
2bb4c     58 4E 85 F1 | 	sub	fp, #88
2bb50     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
2bb54     10 4E 05 F1 | 	add	fp, #16
2bb58     A7 FA 61 FC | 	wrlong	result1, fp
2bb5c     34 4E 05 F1 | 	add	fp, #52
2bb60     A7 18 02 FB | 	rdlong	arg04, fp
2bb64     04 4E 05 F1 | 	add	fp, #4
2bb68     A7 1E 02 FB | 	rdlong	local01, fp
2bb6c     48 4E 85 F1 | 	sub	fp, #72
2bb70     01 1E 86 F1 | 	sub	local01, #1
2bb74     10 18 06 F1 | 	add	arg04, #16
2bb78     0C 1F 62 FC | 	wrlong	local01, arg04
2bb7c     5C 00 90 FD | 	jmp	#LR__4508
2bb80                 | LR__4505
2bb80     10 4E 05 F1 | 	add	fp, #16
2bb84     A7 18 0A FB | 	rdlong	arg04, fp wz
2bb88     10 4E 85 F1 | 	sub	fp, #16
2bb8c     4C 00 90 5D |  if_ne	jmp	#LR__4507
2bb90     1A 4E 05 F1 | 	add	fp, #26
2bb94     A7 18 C2 FA | 	rdbyte	arg04, fp
2bb98     1A 4E 85 F1 | 	sub	fp, #26
2bb9c     10 18 CE F7 | 	test	arg04, #16 wz
2bba0     10 4E 05 51 |  if_ne	add	fp, #16
2bba4     A7 08 68 5C |  if_ne	wrlong	#4, fp
2bba8     10 4E 85 51 |  if_ne	sub	fp, #16
2bbac     2C 00 90 5D |  if_ne	jmp	#LR__4506
2bbb0     0C 4E 05 F1 | 	add	fp, #12
2bbb4     A7 18 C2 FA | 	rdbyte	arg04, fp
2bbb8     0C 4E 85 F1 | 	sub	fp, #12
2bbbc     02 18 CE F7 | 	test	arg04, #2 wz
2bbc0     1A 4E 05 51 |  if_ne	add	fp, #26
2bbc4     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
2bbc8     1A 4E 85 51 |  if_ne	sub	fp, #26
2bbcc     01 1E CE 57 |  if_ne	test	local01, #1 wz
2bbd0     10 4E 05 51 |  if_ne	add	fp, #16
2bbd4     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2bbd8     10 4E 85 51 |  if_ne	sub	fp, #16
2bbdc                 | LR__4506
2bbdc                 | LR__4507
2bbdc                 | LR__4508
2bbdc     10 4E 05 F1 | 	add	fp, #16
2bbe0     A7 1E 0A FB | 	rdlong	local01, fp wz
2bbe4     10 4E 85 F1 | 	sub	fp, #16
2bbe8     60 00 90 5D |  if_ne	jmp	#LR__4509
2bbec     0C 4E 05 F1 | 	add	fp, #12
2bbf0     A7 20 C2 FA | 	rdbyte	local02, fp
2bbf4     0C 4E 85 F1 | 	sub	fp, #12
2bbf8     08 20 CE F7 | 	test	local02, #8 wz
2bbfc     0C 4E 05 51 |  if_ne	add	fp, #12
2bc00     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
2bc04     40 20 46 55 |  if_ne	or	local02, #64
2bc08     A7 20 42 5C |  if_ne	wrbyte	local02, fp
2bc0c     0C 4E 85 51 |  if_ne	sub	fp, #12
2bc10     04 4E 05 F1 | 	add	fp, #4
2bc14     A7 20 02 FB | 	rdlong	local02, fp
2bc18     40 4E 05 F1 | 	add	fp, #64
2bc1c     A7 1E 02 FB | 	rdlong	local01, fp
2bc20     30 1E 06 F1 | 	add	local01, #48
2bc24     0F 1F 02 FB | 	rdlong	local01, local01
2bc28     20 20 06 F1 | 	add	local02, #32
2bc2c     10 1F 62 FC | 	wrlong	local01, local02
2bc30     40 4E 85 F1 | 	sub	fp, #64
2bc34     A7 20 02 FB | 	rdlong	local02, fp
2bc38     2C 4E 05 F1 | 	add	fp, #44
2bc3c     A7 1E 02 FB | 	rdlong	local01, fp
2bc40     30 4E 85 F1 | 	sub	fp, #48
2bc44     24 20 06 F1 | 	add	local02, #36
2bc48     10 1F 62 FC | 	wrlong	local01, local02
2bc4c                 | LR__4509
2bc4c     10 4E 05 F1 | 	add	fp, #16
2bc50     A7 20 0A FB | 	rdlong	local02, fp wz
2bc54     10 4E 85 F1 | 	sub	fp, #16
2bc58     F4 02 90 5D |  if_ne	jmp	#LR__4515
2bc5c     04 4E 05 F1 | 	add	fp, #4
2bc60     A7 20 02 FB | 	rdlong	local02, fp
2bc64     40 4E 05 F1 | 	add	fp, #64
2bc68     A7 12 02 FB | 	rdlong	arg01, fp
2bc6c     14 4E 85 F1 | 	sub	fp, #20
2bc70     A7 14 02 FB | 	rdlong	arg02, fp
2bc74     30 4E 85 F1 | 	sub	fp, #48
2bc78     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
2bc7c     08 20 06 F1 | 	add	local02, #8
2bc80     10 FB 61 FC | 	wrlong	result1, local02
2bc84     04 4E 05 F1 | 	add	fp, #4
2bc88     A7 20 02 FB | 	rdlong	local02, fp
2bc8c     2C 4E 05 F1 | 	add	fp, #44
2bc90     A7 12 02 FB | 	rdlong	arg01, fp
2bc94     1C 12 06 F1 | 	add	arg01, #28
2bc98                 | ' {
2bc98                 | ' 
2bc98                 | ' 	return *((DWORD*)ptr);
2bc98     09 FB 01 FB | 	rdlong	result1, arg01
2bc9c     0C 20 06 F1 | 	add	local02, #12
2bca0     10 FB 61 FC | 	wrlong	result1, local02
2bca4     2C 4E 85 F1 | 	sub	fp, #44
2bca8     A7 20 02 FB | 	rdlong	local02, fp
2bcac     40 4E 05 F1 | 	add	fp, #64
2bcb0     A7 1E 02 FB | 	rdlong	local01, fp
2bcb4     10 1F 62 FC | 	wrlong	local01, local02
2bcb8     40 4E 85 F1 | 	sub	fp, #64
2bcbc     A7 20 02 FB | 	rdlong	local02, fp
2bcc0     40 4E 05 F1 | 	add	fp, #64
2bcc4     A7 1E 02 FB | 	rdlong	local01, fp
2bcc8     06 1E 06 F1 | 	add	local01, #6
2bccc     0F 1F E2 FA | 	rdword	local01, local01
2bcd0     04 20 06 F1 | 	add	local02, #4
2bcd4     10 1F 52 FC | 	wrword	local01, local02
2bcd8     40 4E 85 F1 | 	sub	fp, #64
2bcdc     A7 20 02 FB | 	rdlong	local02, fp
2bce0     08 4E 05 F1 | 	add	fp, #8
2bce4     A7 1E C2 FA | 	rdbyte	local01, fp
2bce8     10 20 06 F1 | 	add	local02, #16
2bcec     10 1F 42 FC | 	wrbyte	local01, local02
2bcf0     08 4E 85 F1 | 	sub	fp, #8
2bcf4     A7 20 02 FB | 	rdlong	local02, fp
2bcf8     11 20 06 F1 | 	add	local02, #17
2bcfc     10 01 48 FC | 	wrbyte	#0, local02
2bd00     A7 20 02 FB | 	rdlong	local02, fp
2bd04     1C 20 06 F1 | 	add	local02, #28
2bd08     10 01 68 FC | 	wrlong	#0, local02
2bd0c     A7 20 02 FB | 	rdlong	local02, fp
2bd10     14 20 06 F1 | 	add	local02, #20
2bd14     10 01 68 FC | 	wrlong	#0, local02
2bd18     A7 12 02 FB | 	rdlong	arg01, fp
2bd1c     04 4E 85 F1 | 	sub	fp, #4
2bd20     28 12 06 F1 | 	add	arg01, #40
2bd24     00 14 06 F6 | 	mov	arg02, #0
2bd28     09 16 C6 F9 | 	decod	arg03, #9
2bd2c     98 00 A0 FD | 	call	#\builtin_bytefill_
2bd30     0C 4E 05 F1 | 	add	fp, #12
2bd34     A7 20 C2 FA | 	rdbyte	local02, fp
2bd38     0C 4E 85 F1 | 	sub	fp, #12
2bd3c     20 20 CE F7 | 	test	local02, #32 wz
2bd40     0C 02 90 AD |  if_e	jmp	#LR__4514
2bd44     04 4E 05 F1 | 	add	fp, #4
2bd48     A7 1E 02 FB | 	rdlong	local01, fp
2bd4c     04 4E 85 F1 | 	sub	fp, #4
2bd50     0C 1E 06 F1 | 	add	local01, #12
2bd54     0F 21 02 FB | 	rdlong	local02, local01
2bd58     01 20 16 F2 | 	cmp	local02, #1 wc
2bd5c     F0 01 90 CD |  if_b	jmp	#LR__4514
2bd60     04 4E 05 F1 | 	add	fp, #4
2bd64     A7 1E 02 FB | 	rdlong	local01, fp
2bd68     0F 21 02 F6 | 	mov	local02, local01
2bd6c     0C 1E 06 F1 | 	add	local01, #12
2bd70     0F 1F 02 FB | 	rdlong	local01, local01
2bd74     14 20 06 F1 | 	add	local02, #20
2bd78     10 1F 62 FC | 	wrlong	local01, local02
2bd7c     40 4E 05 F1 | 	add	fp, #64
2bd80     A7 20 02 FB | 	rdlong	local02, fp
2bd84     0A 20 06 F1 | 	add	local02, #10
2bd88     10 21 E2 FA | 	rdword	local02, local02
2bd8c     09 20 66 F0 | 	shl	local02, #9
2bd90     08 4E 05 F1 | 	add	fp, #8
2bd94     A7 20 62 FC | 	wrlong	local02, fp
2bd98     48 4E 85 F1 | 	sub	fp, #72
2bd9c     A7 20 02 FB | 	rdlong	local02, fp
2bda0     08 20 06 F1 | 	add	local02, #8
2bda4     10 1F 02 FB | 	rdlong	local01, local02
2bda8     4C 4E 05 F1 | 	add	fp, #76
2bdac     A7 1E 62 FC | 	wrlong	local01, fp
2bdb0                 | ' 				fp->fptr = fp->obj.objsize;
2bdb0                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2bdb0                 | ' 				clst = fp->obj.sclust;
2bdb0                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2bdb0     4C 4E 85 F1 | 	sub	fp, #76
2bdb4     A7 20 02 FB | 	rdlong	local02, fp
2bdb8     0C 20 06 F1 | 	add	local02, #12
2bdbc     10 1F 02 FB | 	rdlong	local01, local02
2bdc0     58 4E 05 F1 | 	add	fp, #88
2bdc4     A7 1E 62 FC | 	wrlong	local01, fp
2bdc8     5C 4E 85 F1 | 	sub	fp, #92
2bdcc                 | LR__4510
2bdcc     10 4E 05 F1 | 	add	fp, #16
2bdd0     A7 20 0A FB | 	rdlong	local02, fp wz
2bdd4     10 4E 85 F1 | 	sub	fp, #16
2bdd8     94 00 90 5D |  if_ne	jmp	#LR__4511
2bddc     5C 4E 05 F1 | 	add	fp, #92
2bde0     A7 20 02 FB | 	rdlong	local02, fp
2bde4     10 4E 85 F1 | 	sub	fp, #16
2bde8     A7 1E 02 FB | 	rdlong	local01, fp
2bdec     4C 4E 85 F1 | 	sub	fp, #76
2bdf0     0F 21 1A F2 | 	cmp	local02, local01 wcz
2bdf4     78 00 90 ED |  if_be	jmp	#LR__4511
2bdf8     04 4E 05 F1 | 	add	fp, #4
2bdfc     A7 12 02 FB | 	rdlong	arg01, fp
2be00     4C 4E 05 F1 | 	add	fp, #76
2be04     A7 14 02 FB | 	rdlong	arg02, fp
2be08     50 4E 85 F1 | 	sub	fp, #80
2be0c     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
2be10     50 4E 05 F1 | 	add	fp, #80
2be14     A7 FA 61 FC | 	wrlong	result1, fp
2be18     50 4E 85 F1 | 	sub	fp, #80
2be1c     02 FA 15 F2 | 	cmp	result1, #2 wc
2be20     10 4E 05 C1 |  if_b	add	fp, #16
2be24     A7 04 68 CC |  if_b	wrlong	#2, fp
2be28     10 4E 85 C1 |  if_b	sub	fp, #16
2be2c     50 4E 05 F1 | 	add	fp, #80
2be30     A7 20 02 FB | 	rdlong	local02, fp
2be34     50 4E 85 F1 | 	sub	fp, #80
2be38     FF FF 7F FF 
2be3c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
2be40     10 4E 05 A1 |  if_e	add	fp, #16
2be44     A7 02 68 AC |  if_e	wrlong	#1, fp
2be48     10 4E 85 A1 |  if_e	sub	fp, #16
2be4c     5C 4E 05 F1 | 	add	fp, #92
2be50     A7 20 02 FB | 	rdlong	local02, fp
2be54     10 4E 85 F1 | 	sub	fp, #16
2be58     A7 1E 02 FB | 	rdlong	local01, fp
2be5c     0F 21 82 F1 | 	sub	local02, local01
2be60     10 4E 05 F1 | 	add	fp, #16
2be64     A7 20 62 FC | 	wrlong	local02, fp
2be68     5C 4E 85 F1 | 	sub	fp, #92
2be6c     5C FF 9F FD | 	jmp	#LR__4510
2be70                 | LR__4511
2be70     04 4E 05 F1 | 	add	fp, #4
2be74     A7 20 02 FB | 	rdlong	local02, fp
2be78     4C 4E 05 F1 | 	add	fp, #76
2be7c     A7 1E 02 FB | 	rdlong	local01, fp
2be80     18 20 06 F1 | 	add	local02, #24
2be84     10 1F 62 FC | 	wrlong	local01, local02
2be88     40 4E 85 F1 | 	sub	fp, #64
2be8c     A7 20 0A FB | 	rdlong	local02, fp wz
2be90     10 4E 85 F1 | 	sub	fp, #16
2be94     B8 00 90 5D |  if_ne	jmp	#LR__4513
2be98     5C 4E 05 F1 | 	add	fp, #92
2be9c     A7 1E 02 FB | 	rdlong	local01, fp
2bea0     5C 4E 85 F1 | 	sub	fp, #92
2bea4     FF 1F CE F7 | 	test	local01, #511 wz
2bea8     A4 00 90 AD |  if_e	jmp	#LR__4513
2beac     44 4E 05 F1 | 	add	fp, #68
2beb0     A7 12 02 FB | 	rdlong	arg01, fp
2beb4     0C 4E 05 F1 | 	add	fp, #12
2beb8     A7 14 02 FB | 	rdlong	arg02, fp
2bebc     50 4E 85 F1 | 	sub	fp, #80
2bec0     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
2bec4     58 4E 05 F1 | 	add	fp, #88
2bec8     A7 FA 61 FC | 	wrlong	result1, fp
2becc     00 FA 4D F2 | 	cmps	result1, #0 wz
2bed0     58 4E 85 F1 | 	sub	fp, #88
2bed4     10 4E 05 A1 |  if_e	add	fp, #16
2bed8     A7 04 68 AC |  if_e	wrlong	#2, fp
2bedc     10 4E 85 A1 |  if_e	sub	fp, #16
2bee0     6C 00 90 AD |  if_e	jmp	#LR__4512
2bee4     04 4E 05 F1 | 	add	fp, #4
2bee8     A7 20 02 FB | 	rdlong	local02, fp
2beec     54 4E 05 F1 | 	add	fp, #84
2bef0     A7 1E 02 FB | 	rdlong	local01, fp
2bef4     04 4E 05 F1 | 	add	fp, #4
2bef8     A7 18 02 FB | 	rdlong	arg04, fp
2befc     09 18 46 F0 | 	shr	arg04, #9
2bf00     0C 1F 02 F1 | 	add	local01, arg04
2bf04     1C 20 06 F1 | 	add	local02, #28
2bf08     10 1F 62 FC | 	wrlong	local01, local02
2bf0c     18 4E 85 F1 | 	sub	fp, #24
2bf10     A7 20 02 FB | 	rdlong	local02, fp
2bf14     01 20 06 F1 | 	add	local02, #1
2bf18     10 13 C2 FA | 	rdbyte	arg01, local02
2bf1c     40 4E 85 F1 | 	sub	fp, #64
2bf20     A7 20 02 FB | 	rdlong	local02, fp
2bf24     10 15 02 F6 | 	mov	arg02, local02
2bf28     28 14 06 F1 | 	add	arg02, #40
2bf2c     04 4E 85 F1 | 	sub	fp, #4
2bf30     1C 20 06 F1 | 	add	local02, #28
2bf34     10 17 02 FB | 	rdlong	arg03, local02
2bf38     01 18 06 F6 | 	mov	arg04, #1
2bf3c     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
2bf40     00 FA 0D F2 | 	cmp	result1, #0 wz
2bf44     10 4E 05 51 |  if_ne	add	fp, #16
2bf48     A7 02 68 5C |  if_ne	wrlong	#1, fp
2bf4c     10 4E 85 51 |  if_ne	sub	fp, #16
2bf50                 | LR__4512
2bf50                 | LR__4513
2bf50                 | LR__4514
2bf50                 | LR__4515
2bf50                 | LR__4516
2bf50     10 4E 05 F1 | 	add	fp, #16
2bf54     A7 20 0A FB | 	rdlong	local02, fp wz
2bf58     10 4E 85 F1 | 	sub	fp, #16
2bf5c     04 4E 05 51 |  if_ne	add	fp, #4
2bf60     A7 20 02 5B |  if_ne	rdlong	local02, fp
2bf64     04 4E 85 51 |  if_ne	sub	fp, #4
2bf68     10 01 68 5C |  if_ne	wrlong	#0, local02
2bf6c                 | ' 
2bf6c                 | ' 	return res ;
2bf6c     10 4E 05 F1 | 	add	fp, #16
2bf70     A7 FA 01 FB | 	rdlong	result1, fp
2bf74     10 4E 85 F1 | 	sub	fp, #16
2bf78                 | LR__4517
2bf78     A7 F0 03 F6 | 	mov	ptra, fp
2bf7c     B2 00 A0 FD | 	call	#popregs_
2bf80                 | _fatfs_cc_f_open_ret
2bf80     2D 00 64 FD | 	ret
2bf84                 | 
2bf84                 | _fatfs_cc_f_read
2bf84     0E 4A 05 F6 | 	mov	COUNT_, #14
2bf88     A8 00 A0 FD | 	call	#pushregs_
2bf8c     38 F0 07 F1 | 	add	ptra, #56
2bf90     04 4E 05 F1 | 	add	fp, #4
2bf94     A7 12 62 FC | 	wrlong	arg01, fp
2bf98     04 4E 05 F1 | 	add	fp, #4
2bf9c     A7 14 62 FC | 	wrlong	arg02, fp
2bfa0     04 4E 05 F1 | 	add	fp, #4
2bfa4     A7 16 62 FC | 	wrlong	arg03, fp
2bfa8     04 4E 05 F1 | 	add	fp, #4
2bfac     A7 18 62 FC | 	wrlong	arg04, fp
2bfb0     08 4E 85 F1 | 	sub	fp, #8
2bfb4     A7 FA 01 FB | 	rdlong	result1, fp
2bfb8     2C 4E 05 F1 | 	add	fp, #44
2bfbc     A7 FA 61 FC | 	wrlong	result1, fp
2bfc0     24 4E 85 F1 | 	sub	fp, #36
2bfc4     A7 FA 01 FB | 	rdlong	result1, fp
2bfc8     FD 00 68 FC | 	wrlong	#0, result1
2bfcc     0C 4E 85 F1 | 	sub	fp, #12
2bfd0     A7 12 02 FB | 	rdlong	arg01, fp
2bfd4     14 4E 05 F1 | 	add	fp, #20
2bfd8     A7 14 02 F6 | 	mov	arg02, fp
2bfdc     18 4E 85 F1 | 	sub	fp, #24
2bfe0     24 F7 BF FD | 	call	#_fatfs_cc_validate
2bfe4     14 4E 05 F1 | 	add	fp, #20
2bfe8     A7 FA 61 FC | 	wrlong	result1, fp
2bfec     00 FA 4D F2 | 	cmps	result1, #0 wz
2bff0     14 4E 85 F1 | 	sub	fp, #20
2bff4     20 00 90 5D |  if_ne	jmp	#LR__4520
2bff8     04 4E 05 F1 | 	add	fp, #4
2bffc     A7 14 02 FB | 	rdlong	arg02, fp
2c000     11 14 06 F1 | 	add	arg02, #17
2c004     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2c008     10 4E 05 F1 | 	add	fp, #16
2c00c     A7 14 62 FC | 	wrlong	arg02, fp
2c010     14 4E 85 F1 | 	sub	fp, #20
2c014     10 00 90 AD |  if_e	jmp	#LR__4521
2c018                 | LR__4520
2c018     14 4E 05 F1 | 	add	fp, #20
2c01c     A7 FA 01 FB | 	rdlong	result1, fp
2c020     14 4E 85 F1 | 	sub	fp, #20
2c024     EC 05 90 FD | 	jmp	#LR__4540
2c028                 | LR__4521
2c028     04 4E 05 F1 | 	add	fp, #4
2c02c     A7 18 02 FB | 	rdlong	arg04, fp
2c030     04 4E 85 F1 | 	sub	fp, #4
2c034     10 18 06 F1 | 	add	arg04, #16
2c038     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c03c     01 18 CE F7 | 	test	arg04, #1 wz
2c040     07 FA 05 A6 |  if_e	mov	result1, #7
2c044     CC 05 90 AD |  if_e	jmp	#LR__4540
2c048     04 4E 05 F1 | 	add	fp, #4
2c04c     A7 1E 02 FB | 	rdlong	local01, fp
2c050     0F 21 02 F6 | 	mov	local02, local01
2c054     0C 20 06 F1 | 	add	local02, #12
2c058     10 23 02 FB | 	rdlong	local03, local02
2c05c     14 1E 06 F1 | 	add	local01, #20
2c060     0F 1F 02 FB | 	rdlong	local01, local01
2c064     0F 23 82 F1 | 	sub	local03, local01
2c068     20 4E 05 F1 | 	add	fp, #32
2c06c     A7 22 62 FC | 	wrlong	local03, fp
2c070     18 4E 85 F1 | 	sub	fp, #24
2c074     A7 24 02 FB | 	rdlong	local04, fp
2c078     0C 4E 85 F1 | 	sub	fp, #12
2c07c     11 25 1A F2 | 	cmp	local04, local03 wcz
2c080     24 4E 05 11 |  if_a	add	fp, #36
2c084     A7 24 02 1B |  if_a	rdlong	local04, fp
2c088     18 4E 85 11 |  if_a	sub	fp, #24
2c08c     A7 24 62 1C |  if_a	wrlong	local04, fp
2c090     0C 4E 85 11 |  if_a	sub	fp, #12
2c094                 | ' 
2c094                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2c094                 | LR__4522
2c094     0C 4E 05 F1 | 	add	fp, #12
2c098     A7 20 02 FB | 	rdlong	local02, fp
2c09c     0C 4E 85 F1 | 	sub	fp, #12
2c0a0     10 25 02 F6 | 	mov	local04, local02
2c0a4     01 24 16 F2 | 	cmp	local04, #1 wc
2c0a8     64 05 90 CD |  if_b	jmp	#LR__4539
2c0ac     04 4E 05 F1 | 	add	fp, #4
2c0b0     A7 22 02 FB | 	rdlong	local03, fp
2c0b4     04 4E 85 F1 | 	sub	fp, #4
2c0b8     14 22 06 F1 | 	add	local03, #20
2c0bc     11 23 02 FB | 	rdlong	local03, local03
2c0c0     FF 23 CE F7 | 	test	local03, #511 wz
2c0c4     3C 04 90 5D |  if_ne	jmp	#LR__4537
2c0c8     04 4E 05 F1 | 	add	fp, #4
2c0cc     A7 1E 02 FB | 	rdlong	local01, fp
2c0d0     14 1E 06 F1 | 	add	local01, #20
2c0d4     0F 23 02 FB | 	rdlong	local03, local01
2c0d8     09 22 46 F0 | 	shr	local03, #9
2c0dc     14 4E 05 F1 | 	add	fp, #20
2c0e0     A7 26 02 FB | 	rdlong	local05, fp
2c0e4     13 29 02 F6 | 	mov	local06, local05
2c0e8     0A 28 06 F1 | 	add	local06, #10
2c0ec     14 2B E2 FA | 	rdword	local07, local06
2c0f0     0A 28 86 F1 | 	sub	local06, #10
2c0f4     15 2D 32 F9 | 	getword	local08, local07, #0
2c0f8     01 2C 86 F1 | 	sub	local08, #1
2c0fc     16 23 0A F5 | 	and	local03, local08 wz
2c100     18 4E 05 F1 | 	add	fp, #24
2c104     A7 22 62 FC | 	wrlong	local03, fp
2c108     30 4E 85 F1 | 	sub	fp, #48
2c10c     E0 00 90 5D |  if_ne	jmp	#LR__4527
2c110     04 4E 05 F1 | 	add	fp, #4
2c114     A7 22 02 FB | 	rdlong	local03, fp
2c118     04 4E 85 F1 | 	sub	fp, #4
2c11c     14 22 06 F1 | 	add	local03, #20
2c120     11 23 0A FB | 	rdlong	local03, local03 wz
2c124     20 00 90 5D |  if_ne	jmp	#LR__4523
2c128     04 4E 05 F1 | 	add	fp, #4
2c12c     A7 22 02 FB | 	rdlong	local03, fp
2c130     08 22 06 F1 | 	add	local03, #8
2c134     11 23 02 FB | 	rdlong	local03, local03
2c138     18 4E 05 F1 | 	add	fp, #24
2c13c     A7 22 62 FC | 	wrlong	local03, fp
2c140     1C 4E 85 F1 | 	sub	fp, #28
2c144     28 00 90 FD | 	jmp	#LR__4524
2c148                 | LR__4523
2c148     04 4E 05 F1 | 	add	fp, #4
2c14c     A7 2C 02 FB | 	rdlong	local08, fp
2c150     16 13 02 F6 | 	mov	arg01, local08
2c154     04 4E 85 F1 | 	sub	fp, #4
2c158     18 2C 06 F1 | 	add	local08, #24
2c15c     16 15 02 FB | 	rdlong	arg02, local08
2c160     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
2c164     1C 4E 05 F1 | 	add	fp, #28
2c168     A7 FA 61 FC | 	wrlong	result1, fp
2c16c     1C 4E 85 F1 | 	sub	fp, #28
2c170                 | LR__4524
2c170     1C 4E 05 F1 | 	add	fp, #28
2c174     A7 22 02 FB | 	rdlong	local03, fp
2c178     1C 4E 85 F1 | 	sub	fp, #28
2c17c     02 22 16 F2 | 	cmp	local03, #2 wc
2c180     1C 00 90 3D |  if_ae	jmp	#LR__4525
2c184     04 4E 05 F1 | 	add	fp, #4
2c188     A7 22 02 FB | 	rdlong	local03, fp
2c18c     04 4E 85 F1 | 	sub	fp, #4
2c190     11 22 06 F1 | 	add	local03, #17
2c194     11 05 48 FC | 	wrbyte	#2, local03
2c198     02 FA 05 F6 | 	mov	result1, #2
2c19c     74 04 90 FD | 	jmp	#LR__4540
2c1a0                 | LR__4525
2c1a0     1C 4E 05 F1 | 	add	fp, #28
2c1a4     A7 22 02 FB | 	rdlong	local03, fp
2c1a8     1C 4E 85 F1 | 	sub	fp, #28
2c1ac     FF FF 7F FF 
2c1b0     FF 23 0E F2 | 	cmp	local03, ##-1 wz
2c1b4     1C 00 90 5D |  if_ne	jmp	#LR__4526
2c1b8     04 4E 05 F1 | 	add	fp, #4
2c1bc     A7 22 02 FB | 	rdlong	local03, fp
2c1c0     04 4E 85 F1 | 	sub	fp, #4
2c1c4     11 22 06 F1 | 	add	local03, #17
2c1c8     11 03 48 FC | 	wrbyte	#1, local03
2c1cc     01 FA 05 F6 | 	mov	result1, #1
2c1d0     40 04 90 FD | 	jmp	#LR__4540
2c1d4                 | LR__4526
2c1d4     04 4E 05 F1 | 	add	fp, #4
2c1d8     A7 22 02 FB | 	rdlong	local03, fp
2c1dc     18 4E 05 F1 | 	add	fp, #24
2c1e0     A7 2C 02 FB | 	rdlong	local08, fp
2c1e4     1C 4E 85 F1 | 	sub	fp, #28
2c1e8     18 22 06 F1 | 	add	local03, #24
2c1ec     11 2D 62 FC | 	wrlong	local08, local03
2c1f0                 | LR__4527
2c1f0     18 4E 05 F1 | 	add	fp, #24
2c1f4     A7 12 02 FB | 	rdlong	arg01, fp
2c1f8     14 4E 85 F1 | 	sub	fp, #20
2c1fc     A7 22 02 FB | 	rdlong	local03, fp
2c200     04 4E 85 F1 | 	sub	fp, #4
2c204     18 22 06 F1 | 	add	local03, #24
2c208     11 15 02 FB | 	rdlong	arg02, local03
2c20c     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
2c210     20 4E 05 F1 | 	add	fp, #32
2c214     A7 FA 61 FC | 	wrlong	result1, fp
2c218     20 4E 85 F1 | 	sub	fp, #32
2c21c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c220     1C 00 90 5D |  if_ne	jmp	#LR__4528
2c224     04 4E 05 F1 | 	add	fp, #4
2c228     A7 22 02 FB | 	rdlong	local03, fp
2c22c     04 4E 85 F1 | 	sub	fp, #4
2c230     11 22 06 F1 | 	add	local03, #17
2c234     11 05 48 FC | 	wrbyte	#2, local03
2c238     02 FA 05 F6 | 	mov	result1, #2
2c23c     D4 03 90 FD | 	jmp	#LR__4540
2c240                 | LR__4528
2c240     20 4E 05 F1 | 	add	fp, #32
2c244     A7 22 02 FB | 	rdlong	local03, fp
2c248     10 4E 05 F1 | 	add	fp, #16
2c24c     A7 2C 02 FB | 	rdlong	local08, fp
2c250     16 23 02 F1 | 	add	local03, local08
2c254     10 4E 85 F1 | 	sub	fp, #16
2c258     A7 22 62 FC | 	wrlong	local03, fp
2c25c     14 4E 85 F1 | 	sub	fp, #20
2c260     A7 22 02 FB | 	rdlong	local03, fp
2c264     09 22 46 F0 | 	shr	local03, #9
2c268     20 4E 05 F1 | 	add	fp, #32
2c26c     A7 22 62 FC | 	wrlong	local03, fp
2c270     2C 4E 85 F1 | 	sub	fp, #44
2c274     01 22 16 F2 | 	cmp	local03, #1 wc
2c278     5C 01 90 CD |  if_b	jmp	#LR__4532
2c27c     30 4E 05 F1 | 	add	fp, #48
2c280     A7 22 02 FB | 	rdlong	local03, fp
2c284     04 4E 85 F1 | 	sub	fp, #4
2c288     A7 2C 02 FB | 	rdlong	local08, fp
2c28c     16 23 02 F1 | 	add	local03, local08
2c290     14 4E 85 F1 | 	sub	fp, #20
2c294     A7 2C 02 FB | 	rdlong	local08, fp
2c298     18 4E 85 F1 | 	sub	fp, #24
2c29c     0A 2C 06 F1 | 	add	local08, #10
2c2a0     16 2D E2 FA | 	rdword	local08, local08
2c2a4     16 23 1A F2 | 	cmp	local03, local08 wcz
2c2a8     28 00 90 ED |  if_be	jmp	#LR__4529
2c2ac     18 4E 05 F1 | 	add	fp, #24
2c2b0     A7 1E 02 FB | 	rdlong	local01, fp
2c2b4     0A 1E 06 F1 | 	add	local01, #10
2c2b8     0F 23 E2 FA | 	rdword	local03, local01
2c2bc     18 4E 05 F1 | 	add	fp, #24
2c2c0     A7 2C 02 FB | 	rdlong	local08, fp
2c2c4     16 23 82 F1 | 	sub	local03, local08
2c2c8     04 4E 85 F1 | 	sub	fp, #4
2c2cc     A7 22 62 FC | 	wrlong	local03, fp
2c2d0     2C 4E 85 F1 | 	sub	fp, #44
2c2d4                 | LR__4529
2c2d4     18 4E 05 F1 | 	add	fp, #24
2c2d8     A7 1E 02 FB | 	rdlong	local01, fp
2c2dc     01 1E 06 F1 | 	add	local01, #1
2c2e0     0F 13 C2 FA | 	rdbyte	arg01, local01
2c2e4     1C 4E 05 F1 | 	add	fp, #28
2c2e8     A7 14 02 FB | 	rdlong	arg02, fp
2c2ec     14 4E 85 F1 | 	sub	fp, #20
2c2f0     A7 16 02 FB | 	rdlong	arg03, fp
2c2f4     0C 4E 05 F1 | 	add	fp, #12
2c2f8     A7 18 02 FB | 	rdlong	arg04, fp
2c2fc     2C 4E 85 F1 | 	sub	fp, #44
2c300     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
2c304     00 FA 0D F2 | 	cmp	result1, #0 wz
2c308     1C 00 90 AD |  if_e	jmp	#LR__4530
2c30c     04 4E 05 F1 | 	add	fp, #4
2c310     A7 22 02 FB | 	rdlong	local03, fp
2c314     04 4E 85 F1 | 	sub	fp, #4
2c318     11 22 06 F1 | 	add	local03, #17
2c31c     11 03 48 FC | 	wrbyte	#1, local03
2c320     01 FA 05 F6 | 	mov	result1, #1
2c324     EC 02 90 FD | 	jmp	#LR__4540
2c328                 | LR__4530
2c328     04 4E 05 F1 | 	add	fp, #4
2c32c     A7 1E 02 FB | 	rdlong	local01, fp
2c330     04 4E 85 F1 | 	sub	fp, #4
2c334     10 1E 06 F1 | 	add	local01, #16
2c338     0F 23 C2 FA | 	rdbyte	local03, local01
2c33c     80 22 CE F7 | 	test	local03, #128 wz
2c340     78 00 90 AD |  if_e	jmp	#LR__4531
2c344     04 4E 05 F1 | 	add	fp, #4
2c348     A7 2C 02 FB | 	rdlong	local08, fp
2c34c     1C 2C 06 F1 | 	add	local08, #28
2c350     16 2D 02 FB | 	rdlong	local08, local08
2c354     1C 4E 05 F1 | 	add	fp, #28
2c358     A7 2E 02 FB | 	rdlong	local09, fp
2c35c     17 2D 82 F1 | 	sub	local08, local09
2c360     0C 4E 05 F1 | 	add	fp, #12
2c364     A7 30 02 FB | 	rdlong	local10, fp
2c368     2C 4E 85 F1 | 	sub	fp, #44
2c36c     18 33 02 F6 | 	mov	local11, local10
2c370     19 2D 12 F2 | 	cmp	local08, local11 wc
2c374     44 00 90 3D |  if_ae	jmp	#LR__4531
2c378     34 4E 05 F1 | 	add	fp, #52
2c37c     A7 12 02 FB | 	rdlong	arg01, fp
2c380     30 4E 85 F1 | 	sub	fp, #48
2c384     A7 14 02 FB | 	rdlong	arg02, fp
2c388     0A 33 02 F6 | 	mov	local11, arg02
2c38c     1C 32 06 F1 | 	add	local11, #28
2c390     19 2F 02 FB | 	rdlong	local09, local11
2c394     1C 4E 05 F1 | 	add	fp, #28
2c398     A7 26 02 FB | 	rdlong	local05, fp
2c39c     13 2F 82 F1 | 	sub	local09, local05
2c3a0     09 2E 66 F0 | 	shl	local09, #9
2c3a4     17 33 02 F6 | 	mov	local11, local09
2c3a8     17 13 02 F1 | 	add	arg01, local09
2c3ac     20 4E 85 F1 | 	sub	fp, #32
2c3b0     28 14 06 F1 | 	add	arg02, #40
2c3b4     09 16 C6 F9 | 	decod	arg03, #9
2c3b8     4C 46 BF FD | 	call	#__system____builtin_memmove
2c3bc                 | LR__4531
2c3bc     2C 4E 05 F1 | 	add	fp, #44
2c3c0     A7 22 02 FB | 	rdlong	local03, fp
2c3c4     09 22 66 F0 | 	shl	local03, #9
2c3c8     04 4E 85 F1 | 	sub	fp, #4
2c3cc     A7 22 62 FC | 	wrlong	local03, fp
2c3d0     28 4E 85 F1 | 	sub	fp, #40
2c3d4                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2c3d4                 | ' 				}
2c3d4                 | ' 
2c3d4                 | ' 
2c3d4                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2c3d4                 | ' 				continue;
2c3d4     B4 01 90 FD | 	jmp	#LR__4538
2c3d8                 | LR__4532
2c3d8     04 4E 05 F1 | 	add	fp, #4
2c3dc     A7 22 02 FB | 	rdlong	local03, fp
2c3e0     1C 22 06 F1 | 	add	local03, #28
2c3e4     11 23 02 FB | 	rdlong	local03, local03
2c3e8     1C 4E 05 F1 | 	add	fp, #28
2c3ec     A7 1E 02 FB | 	rdlong	local01, fp
2c3f0     20 4E 85 F1 | 	sub	fp, #32
2c3f4     0F 23 0A F2 | 	cmp	local03, local01 wz
2c3f8     EC 00 90 AD |  if_e	jmp	#LR__4536
2c3fc     04 4E 05 F1 | 	add	fp, #4
2c400     A7 1E 02 FB | 	rdlong	local01, fp
2c404     04 4E 85 F1 | 	sub	fp, #4
2c408     10 1E 06 F1 | 	add	local01, #16
2c40c     0F 23 C2 FA | 	rdbyte	local03, local01
2c410     80 22 CE F7 | 	test	local03, #128 wz
2c414     7C 00 90 AD |  if_e	jmp	#LR__4534
2c418     18 4E 05 F1 | 	add	fp, #24
2c41c     A7 1E 02 FB | 	rdlong	local01, fp
2c420     01 1E 06 F1 | 	add	local01, #1
2c424     0F 13 C2 FA | 	rdbyte	arg01, local01
2c428     14 4E 85 F1 | 	sub	fp, #20
2c42c     A7 22 02 FB | 	rdlong	local03, fp
2c430     11 15 02 F6 | 	mov	arg02, local03
2c434     28 14 06 F1 | 	add	arg02, #40
2c438     04 4E 85 F1 | 	sub	fp, #4
2c43c     1C 22 06 F1 | 	add	local03, #28
2c440     11 17 02 FB | 	rdlong	arg03, local03
2c444     01 18 06 F6 | 	mov	arg04, #1
2c448     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
2c44c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c450     1C 00 90 AD |  if_e	jmp	#LR__4533
2c454     04 4E 05 F1 | 	add	fp, #4
2c458     A7 22 02 FB | 	rdlong	local03, fp
2c45c     04 4E 85 F1 | 	sub	fp, #4
2c460     11 22 06 F1 | 	add	local03, #17
2c464     11 03 48 FC | 	wrbyte	#1, local03
2c468     01 FA 05 F6 | 	mov	result1, #1
2c46c     A4 01 90 FD | 	jmp	#LR__4540
2c470                 | LR__4533
2c470     04 4E 05 F1 | 	add	fp, #4
2c474     A7 32 02 FB | 	rdlong	local11, fp
2c478     19 23 02 F6 | 	mov	local03, local11
2c47c     04 4E 85 F1 | 	sub	fp, #4
2c480     10 32 06 F1 | 	add	local11, #16
2c484     19 33 C2 FA | 	rdbyte	local11, local11
2c488     7F 32 06 F5 | 	and	local11, #127
2c48c     10 22 06 F1 | 	add	local03, #16
2c490     11 33 42 FC | 	wrbyte	local11, local03
2c494                 | LR__4534
2c494     18 4E 05 F1 | 	add	fp, #24
2c498     A7 1E 02 FB | 	rdlong	local01, fp
2c49c     01 1E 06 F1 | 	add	local01, #1
2c4a0     0F 13 C2 FA | 	rdbyte	arg01, local01
2c4a4     14 4E 85 F1 | 	sub	fp, #20
2c4a8     A7 14 02 FB | 	rdlong	arg02, fp
2c4ac     28 14 06 F1 | 	add	arg02, #40
2c4b0     1C 4E 05 F1 | 	add	fp, #28
2c4b4     A7 16 02 FB | 	rdlong	arg03, fp
2c4b8     20 4E 85 F1 | 	sub	fp, #32
2c4bc     01 18 06 F6 | 	mov	arg04, #1
2c4c0     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
2c4c4     00 FA 0D F2 | 	cmp	result1, #0 wz
2c4c8     1C 00 90 AD |  if_e	jmp	#LR__4535
2c4cc     04 4E 05 F1 | 	add	fp, #4
2c4d0     A7 22 02 FB | 	rdlong	local03, fp
2c4d4     04 4E 85 F1 | 	sub	fp, #4
2c4d8     11 22 06 F1 | 	add	local03, #17
2c4dc     11 03 48 FC | 	wrbyte	#1, local03
2c4e0     01 FA 05 F6 | 	mov	result1, #1
2c4e4     2C 01 90 FD | 	jmp	#LR__4540
2c4e8                 | LR__4535
2c4e8                 | LR__4536
2c4e8     04 4E 05 F1 | 	add	fp, #4
2c4ec     A7 22 02 FB | 	rdlong	local03, fp
2c4f0     1C 4E 05 F1 | 	add	fp, #28
2c4f4     A7 32 02 FB | 	rdlong	local11, fp
2c4f8     20 4E 85 F1 | 	sub	fp, #32
2c4fc     1C 22 06 F1 | 	add	local03, #28
2c500     11 33 62 FC | 	wrlong	local11, local03
2c504                 | LR__4537
2c504     04 4E 05 F1 | 	add	fp, #4
2c508     A7 1E 02 FB | 	rdlong	local01, fp
2c50c     14 1E 06 F1 | 	add	local01, #20
2c510     0F 33 02 FB | 	rdlong	local11, local01
2c514     FF 33 06 F5 | 	and	local11, #511
2c518     09 22 C6 F9 | 	decod	local03, #9
2c51c     19 23 82 F1 | 	sub	local03, local11
2c520     24 4E 05 F1 | 	add	fp, #36
2c524     A7 22 62 FC | 	wrlong	local03, fp
2c528     1C 4E 85 F1 | 	sub	fp, #28
2c52c     A7 32 02 FB | 	rdlong	local11, fp
2c530     0C 4E 85 F1 | 	sub	fp, #12
2c534     19 23 1A F2 | 	cmp	local03, local11 wcz
2c538     0C 4E 05 11 |  if_a	add	fp, #12
2c53c     A7 22 02 1B |  if_a	rdlong	local03, fp
2c540     1C 4E 05 11 |  if_a	add	fp, #28
2c544     A7 22 62 1C |  if_a	wrlong	local03, fp
2c548     28 4E 85 11 |  if_a	sub	fp, #40
2c54c     34 4E 05 F1 | 	add	fp, #52
2c550     A7 12 02 FB | 	rdlong	arg01, fp
2c554     30 4E 85 F1 | 	sub	fp, #48
2c558     A7 28 02 FB | 	rdlong	local06, fp
2c55c     14 15 02 F6 | 	mov	arg02, local06
2c560     28 14 06 F1 | 	add	arg02, #40
2c564     14 28 06 F1 | 	add	local06, #20
2c568     14 33 02 FB | 	rdlong	local11, local06
2c56c     19 2F 02 F6 | 	mov	local09, local11
2c570     17 31 02 F6 | 	mov	local10, local09
2c574     FF 31 06 F5 | 	and	local10, #511
2c578     18 15 02 F1 | 	add	arg02, local10
2c57c     24 4E 05 F1 | 	add	fp, #36
2c580     A7 16 02 FB | 	rdlong	arg03, fp
2c584     28 4E 85 F1 | 	sub	fp, #40
2c588     7C 44 BF FD | 	call	#__system____builtin_memmove
2c58c                 | LR__4538
2c58c     0C 4E 05 F1 | 	add	fp, #12
2c590     A7 22 02 FB | 	rdlong	local03, fp
2c594     1C 4E 05 F1 | 	add	fp, #28
2c598     A7 2C 02 FB | 	rdlong	local08, fp
2c59c     16 23 82 F1 | 	sub	local03, local08
2c5a0     1C 4E 85 F1 | 	sub	fp, #28
2c5a4     A7 22 62 FC | 	wrlong	local03, fp
2c5a8     04 4E 05 F1 | 	add	fp, #4
2c5ac     A7 1E 02 FB | 	rdlong	local01, fp
2c5b0     0F 2B 02 FB | 	rdlong	local07, local01
2c5b4     18 4E 05 F1 | 	add	fp, #24
2c5b8     A7 2C 02 FB | 	rdlong	local08, fp
2c5bc     16 2B 02 F1 | 	add	local07, local08
2c5c0     0F 2B 62 FC | 	wrlong	local07, local01
2c5c4     0C 4E 05 F1 | 	add	fp, #12
2c5c8     A7 22 02 FB | 	rdlong	local03, fp
2c5cc     0C 4E 85 F1 | 	sub	fp, #12
2c5d0     A7 34 02 FB | 	rdlong	local12, fp
2c5d4     1A 23 02 F1 | 	add	local03, local12
2c5d8     0C 4E 05 F1 | 	add	fp, #12
2c5dc     A7 22 62 FC | 	wrlong	local03, fp
2c5e0     30 4E 85 F1 | 	sub	fp, #48
2c5e4     A7 36 02 FB | 	rdlong	local13, fp
2c5e8     1B 23 02 F6 | 	mov	local03, local13
2c5ec     14 36 06 F1 | 	add	local13, #20
2c5f0     1B 39 02 FB | 	rdlong	local14, local13
2c5f4     24 4E 05 F1 | 	add	fp, #36
2c5f8     A7 28 02 FB | 	rdlong	local06, fp
2c5fc     28 4E 85 F1 | 	sub	fp, #40
2c600     14 39 02 F1 | 	add	local14, local06
2c604     14 22 06 F1 | 	add	local03, #20
2c608     11 39 62 FC | 	wrlong	local14, local03
2c60c     84 FA 9F FD | 	jmp	#LR__4522
2c610                 | LR__4539
2c610                 | ' 
2c610                 | ' 
2c610                 | ' 
2c610                 | ' 
2c610                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2c610                 | ' 
2c610                 | ' 	}
2c610                 | ' 
2c610                 | ' 	return FR_OK ;
2c610     00 FA 05 F6 | 	mov	result1, #0
2c614                 | LR__4540
2c614     A7 F0 03 F6 | 	mov	ptra, fp
2c618     B2 00 A0 FD | 	call	#popregs_
2c61c                 | _fatfs_cc_f_read_ret
2c61c     2D 00 64 FD | 	ret
2c620                 | 
2c620                 | _fatfs_cc_f_write
2c620     15 4A 05 F6 | 	mov	COUNT_, #21
2c624     A8 00 A0 FD | 	call	#pushregs_
2c628     34 F0 07 F1 | 	add	ptra, #52
2c62c     04 4E 05 F1 | 	add	fp, #4
2c630     A7 12 62 FC | 	wrlong	arg01, fp
2c634     04 4E 05 F1 | 	add	fp, #4
2c638     A7 14 62 FC | 	wrlong	arg02, fp
2c63c     04 4E 05 F1 | 	add	fp, #4
2c640     A7 16 62 FC | 	wrlong	arg03, fp
2c644     04 4E 05 F1 | 	add	fp, #4
2c648     A7 18 62 FC | 	wrlong	arg04, fp
2c64c     08 4E 85 F1 | 	sub	fp, #8
2c650     A7 FA 01 FB | 	rdlong	result1, fp
2c654     28 4E 05 F1 | 	add	fp, #40
2c658     A7 FA 61 FC | 	wrlong	result1, fp
2c65c     20 4E 85 F1 | 	sub	fp, #32
2c660     A7 FA 01 FB | 	rdlong	result1, fp
2c664     FD 00 68 FC | 	wrlong	#0, result1
2c668     0C 4E 85 F1 | 	sub	fp, #12
2c66c     A7 12 02 FB | 	rdlong	arg01, fp
2c670     14 4E 05 F1 | 	add	fp, #20
2c674     A7 14 02 F6 | 	mov	arg02, fp
2c678     18 4E 85 F1 | 	sub	fp, #24
2c67c     88 F0 BF FD | 	call	#_fatfs_cc_validate
2c680     14 4E 05 F1 | 	add	fp, #20
2c684     A7 FA 61 FC | 	wrlong	result1, fp
2c688     00 FA 4D F2 | 	cmps	result1, #0 wz
2c68c     14 4E 85 F1 | 	sub	fp, #20
2c690     20 00 90 5D |  if_ne	jmp	#LR__4550
2c694     04 4E 05 F1 | 	add	fp, #4
2c698     A7 14 02 FB | 	rdlong	arg02, fp
2c69c     11 14 06 F1 | 	add	arg02, #17
2c6a0     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2c6a4     10 4E 05 F1 | 	add	fp, #16
2c6a8     A7 14 62 FC | 	wrlong	arg02, fp
2c6ac     14 4E 85 F1 | 	sub	fp, #20
2c6b0     10 00 90 AD |  if_e	jmp	#LR__4551
2c6b4                 | LR__4550
2c6b4     14 4E 05 F1 | 	add	fp, #20
2c6b8     A7 FA 01 FB | 	rdlong	result1, fp
2c6bc     14 4E 85 F1 | 	sub	fp, #20
2c6c0     44 07 90 FD | 	jmp	#LR__4573
2c6c4                 | LR__4551
2c6c4     04 4E 05 F1 | 	add	fp, #4
2c6c8     A7 14 02 FB | 	rdlong	arg02, fp
2c6cc     04 4E 85 F1 | 	sub	fp, #4
2c6d0     10 14 06 F1 | 	add	arg02, #16
2c6d4     0A 15 C2 FA | 	rdbyte	arg02, arg02
2c6d8     02 14 CE F7 | 	test	arg02, #2 wz
2c6dc     07 FA 05 A6 |  if_e	mov	result1, #7
2c6e0     24 07 90 AD |  if_e	jmp	#LR__4573
2c6e4     04 4E 05 F1 | 	add	fp, #4
2c6e8     A7 14 02 FB | 	rdlong	arg02, fp
2c6ec     0A 13 02 F6 | 	mov	arg01, arg02
2c6f0     14 12 06 F1 | 	add	arg01, #20
2c6f4     09 13 02 FB | 	rdlong	arg01, arg01
2c6f8     08 4E 05 F1 | 	add	fp, #8
2c6fc     A7 FA 01 FB | 	rdlong	result1, fp
2c700     FD 12 02 F1 | 	add	arg01, result1
2c704     0C 4E 85 F1 | 	sub	fp, #12
2c708     14 14 06 F1 | 	add	arg02, #20
2c70c     0A FB 01 FB | 	rdlong	result1, arg02
2c710     FD 12 12 F2 | 	cmp	arg01, result1 wc
2c714     24 00 90 3D |  if_ae	jmp	#LR__4552
2c718     04 4E 05 F1 | 	add	fp, #4
2c71c     A7 14 02 FB | 	rdlong	arg02, fp
2c720     01 FA 65 F6 | 	neg	result1, #1
2c724     14 14 06 F1 | 	add	arg02, #20
2c728     0A 15 02 FB | 	rdlong	arg02, arg02
2c72c     0A FB 81 F1 | 	sub	result1, arg02
2c730     08 4E 05 F1 | 	add	fp, #8
2c734     A7 FA 61 FC | 	wrlong	result1, fp
2c738     0C 4E 85 F1 | 	sub	fp, #12
2c73c                 | LR__4552
2c73c                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2c73c                 | ' 	}
2c73c                 | ' 
2c73c                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2c73c                 | LR__4553
2c73c     0C 4E 05 F1 | 	add	fp, #12
2c740     A7 FA 01 FB | 	rdlong	result1, fp
2c744     0C 4E 85 F1 | 	sub	fp, #12
2c748     01 FA 15 F2 | 	cmp	result1, #1 wc
2c74c     90 06 90 CD |  if_b	jmp	#LR__4572
2c750     04 4E 05 F1 | 	add	fp, #4
2c754     A7 FA 01 FB | 	rdlong	result1, fp
2c758     04 4E 85 F1 | 	sub	fp, #4
2c75c     14 FA 05 F1 | 	add	result1, #20
2c760     FD FA 01 FB | 	rdlong	result1, result1
2c764     FF FB CD F7 | 	test	result1, #511 wz
2c768     D8 04 90 5D |  if_ne	jmp	#LR__4568
2c76c     04 4E 05 F1 | 	add	fp, #4
2c770     A7 FA 01 FB | 	rdlong	result1, fp
2c774     14 FA 05 F1 | 	add	result1, #20
2c778     FD FA 01 FB | 	rdlong	result1, result1
2c77c     09 FA 45 F0 | 	shr	result1, #9
2c780     14 4E 05 F1 | 	add	fp, #20
2c784     A7 14 02 FB | 	rdlong	arg02, fp
2c788     0A 14 06 F1 | 	add	arg02, #10
2c78c     0A 19 E2 FA | 	rdword	arg04, arg02
2c790     0C 15 32 F9 | 	getword	arg02, arg04, #0
2c794     01 14 86 F1 | 	sub	arg02, #1
2c798     0A FB 09 F5 | 	and	result1, arg02 wz
2c79c     14 4E 05 F1 | 	add	fp, #20
2c7a0     A7 FA 61 FC | 	wrlong	result1, fp
2c7a4     2C 4E 85 F1 | 	sub	fp, #44
2c7a8     44 01 90 5D |  if_ne	jmp	#LR__4559
2c7ac     04 4E 05 F1 | 	add	fp, #4
2c7b0     A7 FA 01 FB | 	rdlong	result1, fp
2c7b4     04 4E 85 F1 | 	sub	fp, #4
2c7b8     14 FA 05 F1 | 	add	result1, #20
2c7bc     FD 14 0A FB | 	rdlong	arg02, result1 wz
2c7c0     44 00 90 5D |  if_ne	jmp	#LR__4554
2c7c4     04 4E 05 F1 | 	add	fp, #4
2c7c8     A7 14 02 FB | 	rdlong	arg02, fp
2c7cc     08 14 06 F1 | 	add	arg02, #8
2c7d0     0A 15 0A FB | 	rdlong	arg02, arg02 wz
2c7d4     18 4E 05 F1 | 	add	fp, #24
2c7d8     A7 14 62 FC | 	wrlong	arg02, fp
2c7dc     1C 4E 85 F1 | 	sub	fp, #28
2c7e0     4C 00 90 5D |  if_ne	jmp	#LR__4555
2c7e4     04 4E 05 F1 | 	add	fp, #4
2c7e8     A7 12 02 FB | 	rdlong	arg01, fp
2c7ec     04 4E 85 F1 | 	sub	fp, #4
2c7f0     00 14 06 F6 | 	mov	arg02, #0
2c7f4     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
2c7f8     1C 4E 05 F1 | 	add	fp, #28
2c7fc     A7 FA 61 FC | 	wrlong	result1, fp
2c800     1C 4E 85 F1 | 	sub	fp, #28
2c804     28 00 90 FD | 	jmp	#LR__4555
2c808                 | LR__4554
2c808     04 4E 05 F1 | 	add	fp, #4
2c80c     A7 18 02 FB | 	rdlong	arg04, fp
2c810     0C 13 02 F6 | 	mov	arg01, arg04
2c814     04 4E 85 F1 | 	sub	fp, #4
2c818     18 18 06 F1 | 	add	arg04, #24
2c81c     0C 15 02 FB | 	rdlong	arg02, arg04
2c820     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2c824     1C 4E 05 F1 | 	add	fp, #28
2c828     A7 FA 61 FC | 	wrlong	result1, fp
2c82c     1C 4E 85 F1 | 	sub	fp, #28
2c830                 | LR__4555
2c830     1C 4E 05 F1 | 	add	fp, #28
2c834     A7 FA 09 FB | 	rdlong	result1, fp wz
2c838     1C 4E 85 F1 | 	sub	fp, #28
2c83c     A0 05 90 AD |  if_e	jmp	#LR__4572
2c840     1C 4E 05 F1 | 	add	fp, #28
2c844     A7 FA 01 FB | 	rdlong	result1, fp
2c848     1C 4E 85 F1 | 	sub	fp, #28
2c84c     01 FA 0D F2 | 	cmp	result1, #1 wz
2c850     1C 00 90 5D |  if_ne	jmp	#LR__4556
2c854     04 4E 05 F1 | 	add	fp, #4
2c858     A7 FA 01 FB | 	rdlong	result1, fp
2c85c     04 4E 85 F1 | 	sub	fp, #4
2c860     11 FA 05 F1 | 	add	result1, #17
2c864     FD 04 48 FC | 	wrbyte	#2, result1
2c868     02 FA 05 F6 | 	mov	result1, #2
2c86c     98 05 90 FD | 	jmp	#LR__4573
2c870                 | LR__4556
2c870     1C 4E 05 F1 | 	add	fp, #28
2c874     A7 FA 01 FB | 	rdlong	result1, fp
2c878     1C 4E 85 F1 | 	sub	fp, #28
2c87c     FF FF 7F FF 
2c880     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2c884     1C 00 90 5D |  if_ne	jmp	#LR__4557
2c888     04 4E 05 F1 | 	add	fp, #4
2c88c     A7 FA 01 FB | 	rdlong	result1, fp
2c890     04 4E 85 F1 | 	sub	fp, #4
2c894     11 FA 05 F1 | 	add	result1, #17
2c898     FD 02 48 FC | 	wrbyte	#1, result1
2c89c     01 FA 05 F6 | 	mov	result1, #1
2c8a0     64 05 90 FD | 	jmp	#LR__4573
2c8a4                 | LR__4557
2c8a4     04 4E 05 F1 | 	add	fp, #4
2c8a8     A7 FA 01 FB | 	rdlong	result1, fp
2c8ac     18 4E 05 F1 | 	add	fp, #24
2c8b0     A7 18 02 FB | 	rdlong	arg04, fp
2c8b4     18 FA 05 F1 | 	add	result1, #24
2c8b8     FD 18 62 FC | 	wrlong	arg04, result1
2c8bc     18 4E 85 F1 | 	sub	fp, #24
2c8c0     A7 FA 01 FB | 	rdlong	result1, fp
2c8c4     04 4E 85 F1 | 	sub	fp, #4
2c8c8     08 FA 05 F1 | 	add	result1, #8
2c8cc     FD FA 09 FB | 	rdlong	result1, result1 wz
2c8d0     1C 00 90 5D |  if_ne	jmp	#LR__4558
2c8d4     04 4E 05 F1 | 	add	fp, #4
2c8d8     A7 18 02 FB | 	rdlong	arg04, fp
2c8dc     18 4E 05 F1 | 	add	fp, #24
2c8e0     A7 FA 01 FB | 	rdlong	result1, fp
2c8e4     1C 4E 85 F1 | 	sub	fp, #28
2c8e8     08 18 06 F1 | 	add	arg04, #8
2c8ec     0C FB 61 FC | 	wrlong	result1, arg04
2c8f0                 | LR__4558
2c8f0                 | LR__4559
2c8f0     04 4E 05 F1 | 	add	fp, #4
2c8f4     A7 18 02 FB | 	rdlong	arg04, fp
2c8f8     04 4E 85 F1 | 	sub	fp, #4
2c8fc     10 18 06 F1 | 	add	arg04, #16
2c900     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c904     80 18 CE F7 | 	test	arg04, #128 wz
2c908     7C 00 90 AD |  if_e	jmp	#LR__4561
2c90c     18 4E 05 F1 | 	add	fp, #24
2c910     A7 18 02 FB | 	rdlong	arg04, fp
2c914     01 18 06 F1 | 	add	arg04, #1
2c918     0C 13 C2 FA | 	rdbyte	arg01, arg04
2c91c     14 4E 85 F1 | 	sub	fp, #20
2c920     A7 18 02 FB | 	rdlong	arg04, fp
2c924     0C 15 02 F6 | 	mov	arg02, arg04
2c928     28 14 06 F1 | 	add	arg02, #40
2c92c     04 4E 85 F1 | 	sub	fp, #4
2c930     1C 18 06 F1 | 	add	arg04, #28
2c934     0C 17 02 FB | 	rdlong	arg03, arg04
2c938     01 18 06 F6 | 	mov	arg04, #1
2c93c     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2c940     00 FA 0D F2 | 	cmp	result1, #0 wz
2c944     1C 00 90 AD |  if_e	jmp	#LR__4560
2c948     04 4E 05 F1 | 	add	fp, #4
2c94c     A7 FA 01 FB | 	rdlong	result1, fp
2c950     04 4E 85 F1 | 	sub	fp, #4
2c954     11 FA 05 F1 | 	add	result1, #17
2c958     FD 02 48 FC | 	wrbyte	#1, result1
2c95c     01 FA 05 F6 | 	mov	result1, #1
2c960     A4 04 90 FD | 	jmp	#LR__4573
2c964                 | LR__4560
2c964     04 4E 05 F1 | 	add	fp, #4
2c968     A7 18 02 FB | 	rdlong	arg04, fp
2c96c     0C FB 01 F6 | 	mov	result1, arg04
2c970     04 4E 85 F1 | 	sub	fp, #4
2c974     10 18 06 F1 | 	add	arg04, #16
2c978     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c97c     7F 18 06 F5 | 	and	arg04, #127
2c980     10 FA 05 F1 | 	add	result1, #16
2c984     FD 18 42 FC | 	wrbyte	arg04, result1
2c988                 | LR__4561
2c988     18 4E 05 F1 | 	add	fp, #24
2c98c     A7 12 02 FB | 	rdlong	arg01, fp
2c990     14 4E 85 F1 | 	sub	fp, #20
2c994     A7 14 02 FB | 	rdlong	arg02, fp
2c998     04 4E 85 F1 | 	sub	fp, #4
2c99c     18 14 06 F1 | 	add	arg02, #24
2c9a0     0A 15 02 FB | 	rdlong	arg02, arg02
2c9a4     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
2c9a8     20 4E 05 F1 | 	add	fp, #32
2c9ac     A7 FA 61 FC | 	wrlong	result1, fp
2c9b0     20 4E 85 F1 | 	sub	fp, #32
2c9b4     00 FA 0D F2 | 	cmp	result1, #0 wz
2c9b8     1C 00 90 5D |  if_ne	jmp	#LR__4562
2c9bc     04 4E 05 F1 | 	add	fp, #4
2c9c0     A7 FA 01 FB | 	rdlong	result1, fp
2c9c4     04 4E 85 F1 | 	sub	fp, #4
2c9c8     11 FA 05 F1 | 	add	result1, #17
2c9cc     FD 04 48 FC | 	wrbyte	#2, result1
2c9d0     02 FA 05 F6 | 	mov	result1, #2
2c9d4     30 04 90 FD | 	jmp	#LR__4573
2c9d8                 | LR__4562
2c9d8     20 4E 05 F1 | 	add	fp, #32
2c9dc     A7 FA 01 FB | 	rdlong	result1, fp
2c9e0     0C 4E 05 F1 | 	add	fp, #12
2c9e4     A7 1E 02 FB | 	rdlong	local01, fp
2c9e8     0F FB 01 F1 | 	add	result1, local01
2c9ec     0C 4E 85 F1 | 	sub	fp, #12
2c9f0     A7 FA 61 FC | 	wrlong	result1, fp
2c9f4     14 4E 85 F1 | 	sub	fp, #20
2c9f8     A7 FA 01 FB | 	rdlong	result1, fp
2c9fc     09 FA 45 F0 | 	shr	result1, #9
2ca00     1C 4E 05 F1 | 	add	fp, #28
2ca04     A7 FA 61 FC | 	wrlong	result1, fp
2ca08     28 4E 85 F1 | 	sub	fp, #40
2ca0c     01 FA 15 F2 | 	cmp	result1, #1 wc
2ca10     60 01 90 CD |  if_b	jmp	#LR__4566
2ca14     2C 4E 05 F1 | 	add	fp, #44
2ca18     A7 FA 01 FB | 	rdlong	result1, fp
2ca1c     04 4E 85 F1 | 	sub	fp, #4
2ca20     A7 18 02 FB | 	rdlong	arg04, fp
2ca24     0C FB 01 F1 | 	add	result1, arg04
2ca28     10 4E 85 F1 | 	sub	fp, #16
2ca2c     A7 18 02 FB | 	rdlong	arg04, fp
2ca30     18 4E 85 F1 | 	sub	fp, #24
2ca34     0A 18 06 F1 | 	add	arg04, #10
2ca38     0C 19 E2 FA | 	rdword	arg04, arg04
2ca3c     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2ca40     28 00 90 ED |  if_be	jmp	#LR__4563
2ca44     18 4E 05 F1 | 	add	fp, #24
2ca48     A7 FA 01 FB | 	rdlong	result1, fp
2ca4c     0A FA 05 F1 | 	add	result1, #10
2ca50     FD FA E1 FA | 	rdword	result1, result1
2ca54     14 4E 05 F1 | 	add	fp, #20
2ca58     A7 18 02 FB | 	rdlong	arg04, fp
2ca5c     0C FB 81 F1 | 	sub	result1, arg04
2ca60     04 4E 85 F1 | 	sub	fp, #4
2ca64     A7 FA 61 FC | 	wrlong	result1, fp
2ca68     28 4E 85 F1 | 	sub	fp, #40
2ca6c                 | LR__4563
2ca6c     18 4E 05 F1 | 	add	fp, #24
2ca70     A7 18 02 FB | 	rdlong	arg04, fp
2ca74     01 18 06 F1 | 	add	arg04, #1
2ca78     0C 13 C2 FA | 	rdbyte	arg01, arg04
2ca7c     18 4E 05 F1 | 	add	fp, #24
2ca80     A7 14 02 FB | 	rdlong	arg02, fp
2ca84     10 4E 85 F1 | 	sub	fp, #16
2ca88     A7 16 02 FB | 	rdlong	arg03, fp
2ca8c     08 4E 05 F1 | 	add	fp, #8
2ca90     A7 18 02 FB | 	rdlong	arg04, fp
2ca94     28 4E 85 F1 | 	sub	fp, #40
2ca98     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
2ca9c     00 FA 0D F2 | 	cmp	result1, #0 wz
2caa0     1C 00 90 AD |  if_e	jmp	#LR__4564
2caa4     04 4E 05 F1 | 	add	fp, #4
2caa8     A7 1E 02 FB | 	rdlong	local01, fp
2caac     04 4E 85 F1 | 	sub	fp, #4
2cab0     11 1E 06 F1 | 	add	local01, #17
2cab4     0F 03 48 FC | 	wrbyte	#1, local01
2cab8     01 FA 05 F6 | 	mov	result1, #1
2cabc     48 03 90 FD | 	jmp	#LR__4573
2cac0                 | LR__4564
2cac0     04 4E 05 F1 | 	add	fp, #4
2cac4     A7 FA 01 FB | 	rdlong	result1, fp
2cac8     1C FA 05 F1 | 	add	result1, #28
2cacc     FD FA 01 FB | 	rdlong	result1, result1
2cad0     1C 4E 05 F1 | 	add	fp, #28
2cad4     A7 20 02 FB | 	rdlong	local02, fp
2cad8     10 FB 81 F1 | 	sub	result1, local02
2cadc     08 4E 05 F1 | 	add	fp, #8
2cae0     A7 18 02 FB | 	rdlong	arg04, fp
2cae4     28 4E 85 F1 | 	sub	fp, #40
2cae8     0C FB 11 F2 | 	cmp	result1, arg04 wc
2caec     68 00 90 3D |  if_ae	jmp	#LR__4565
2caf0     04 4E 05 F1 | 	add	fp, #4
2caf4     A7 12 02 FB | 	rdlong	arg01, fp
2caf8     28 12 06 F1 | 	add	arg01, #40
2cafc     2C 4E 05 F1 | 	add	fp, #44
2cb00     A7 14 02 FB | 	rdlong	arg02, fp
2cb04     2C 4E 85 F1 | 	sub	fp, #44
2cb08     A7 FA 01 FB | 	rdlong	result1, fp
2cb0c     1C FA 05 F1 | 	add	result1, #28
2cb10     FD 22 02 FB | 	rdlong	local03, result1
2cb14     1C 4E 05 F1 | 	add	fp, #28
2cb18     A7 18 02 FB | 	rdlong	arg04, fp
2cb1c     20 4E 85 F1 | 	sub	fp, #32
2cb20     0C 23 82 F1 | 	sub	local03, arg04
2cb24     09 22 66 F0 | 	shl	local03, #9
2cb28     11 15 02 F1 | 	add	arg02, local03
2cb2c     09 16 C6 F9 | 	decod	arg03, #9
2cb30     D4 3E BF FD | 	call	#__system____builtin_memmove
2cb34     04 4E 05 F1 | 	add	fp, #4
2cb38     A7 18 02 FB | 	rdlong	arg04, fp
2cb3c     0C FB 01 F6 | 	mov	result1, arg04
2cb40     04 4E 85 F1 | 	sub	fp, #4
2cb44     10 18 06 F1 | 	add	arg04, #16
2cb48     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cb4c     7F 18 06 F5 | 	and	arg04, #127
2cb50     10 FA 05 F1 | 	add	result1, #16
2cb54     FD 18 42 FC | 	wrbyte	arg04, result1
2cb58                 | LR__4565
2cb58     28 4E 05 F1 | 	add	fp, #40
2cb5c     A7 FA 01 FB | 	rdlong	result1, fp
2cb60     09 FA 65 F0 | 	shl	result1, #9
2cb64     04 4E 85 F1 | 	sub	fp, #4
2cb68     A7 FA 61 FC | 	wrlong	result1, fp
2cb6c     24 4E 85 F1 | 	sub	fp, #36
2cb70                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2cb70                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2cb70                 | ' 				}
2cb70                 | ' 
2cb70                 | ' 
2cb70                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2cb70                 | ' 				continue;
2cb70     74 01 90 FD | 	jmp	#LR__4569
2cb74                 | LR__4566
2cb74     04 4E 05 F1 | 	add	fp, #4
2cb78     A7 20 02 FB | 	rdlong	local02, fp
2cb7c     1C 20 06 F1 | 	add	local02, #28
2cb80     10 FB 01 FB | 	rdlong	result1, local02
2cb84     1C 4E 05 F1 | 	add	fp, #28
2cb88     A7 20 02 FB | 	rdlong	local02, fp
2cb8c     20 4E 85 F1 | 	sub	fp, #32
2cb90     10 FB 09 F2 | 	cmp	result1, local02 wz
2cb94     90 00 90 AD |  if_e	jmp	#LR__4567
2cb98     04 4E 05 F1 | 	add	fp, #4
2cb9c     A7 FA 01 FB | 	rdlong	result1, fp
2cba0     FD 22 02 F6 | 	mov	local03, result1
2cba4     04 4E 85 F1 | 	sub	fp, #4
2cba8     14 22 06 F1 | 	add	local03, #20
2cbac     11 23 02 FB | 	rdlong	local03, local03
2cbb0     0C FA 05 F1 | 	add	result1, #12
2cbb4     FD 24 02 FB | 	rdlong	local04, result1
2cbb8     12 27 02 F6 | 	mov	local05, local04
2cbbc     13 23 12 F2 | 	cmp	local03, local05 wc
2cbc0     64 00 90 3D |  if_ae	jmp	#LR__4567
2cbc4     18 4E 05 F1 | 	add	fp, #24
2cbc8     A7 18 02 FB | 	rdlong	arg04, fp
2cbcc     01 18 06 F1 | 	add	arg04, #1
2cbd0     0C 13 C2 FA | 	rdbyte	arg01, arg04
2cbd4     14 4E 85 F1 | 	sub	fp, #20
2cbd8     A7 28 02 FB | 	rdlong	local06, fp
2cbdc     28 28 06 F1 | 	add	local06, #40
2cbe0     14 2B 02 F6 | 	mov	local07, local06
2cbe4     1C 4E 05 F1 | 	add	fp, #28
2cbe8     A7 2C 02 FB | 	rdlong	local08, fp
2cbec     20 4E 85 F1 | 	sub	fp, #32
2cbf0     01 2E 06 F6 | 	mov	local09, #1
2cbf4     15 15 02 F6 | 	mov	arg02, local07
2cbf8     16 17 02 F6 | 	mov	arg03, local08
2cbfc     01 18 06 F6 | 	mov	arg04, #1
2cc00     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
2cc04     FD 30 0A F6 | 	mov	local10, result1 wz
2cc08     1C 00 90 AD |  if_e	jmp	#LR__4567
2cc0c     04 4E 05 F1 | 	add	fp, #4
2cc10     A7 30 02 FB | 	rdlong	local10, fp
2cc14     04 4E 85 F1 | 	sub	fp, #4
2cc18     11 30 06 F1 | 	add	local10, #17
2cc1c     18 03 48 FC | 	wrbyte	#1, local10
2cc20                 | ' 				fp->fptr < fp->obj.objsize &&
2cc20                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2cc20                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2cc20     01 FA 05 F6 | 	mov	result1, #1
2cc24     E0 01 90 FD | 	jmp	#LR__4573
2cc28                 | LR__4567
2cc28     04 4E 05 F1 | 	add	fp, #4
2cc2c     A7 18 02 FB | 	rdlong	arg04, fp
2cc30     1C 4E 05 F1 | 	add	fp, #28
2cc34     A7 FA 01 FB | 	rdlong	result1, fp
2cc38     20 4E 85 F1 | 	sub	fp, #32
2cc3c     1C 18 06 F1 | 	add	arg04, #28
2cc40     0C FB 61 FC | 	wrlong	result1, arg04
2cc44                 | LR__4568
2cc44     04 4E 05 F1 | 	add	fp, #4
2cc48     A7 FA 01 FB | 	rdlong	result1, fp
2cc4c     14 FA 05 F1 | 	add	result1, #20
2cc50     FD FA 01 FB | 	rdlong	result1, result1
2cc54     FF FB 05 F5 | 	and	result1, #511
2cc58     09 32 C6 F9 | 	decod	local11, #9
2cc5c     FD 32 82 F1 | 	sub	local11, result1
2cc60     20 4E 05 F1 | 	add	fp, #32
2cc64     A7 32 62 FC | 	wrlong	local11, fp
2cc68     18 4E 85 F1 | 	sub	fp, #24
2cc6c     A7 FA 01 FB | 	rdlong	result1, fp
2cc70     0C 4E 85 F1 | 	sub	fp, #12
2cc74     FD 32 1A F2 | 	cmp	local11, result1 wcz
2cc78     0C 4E 05 11 |  if_a	add	fp, #12
2cc7c     A7 32 02 1B |  if_a	rdlong	local11, fp
2cc80     18 4E 05 11 |  if_a	add	fp, #24
2cc84     A7 32 62 1C |  if_a	wrlong	local11, fp
2cc88     24 4E 85 11 |  if_a	sub	fp, #36
2cc8c     04 4E 05 F1 | 	add	fp, #4
2cc90     A7 32 02 FB | 	rdlong	local11, fp
2cc94     19 13 02 F6 | 	mov	arg01, local11
2cc98     28 12 06 F1 | 	add	arg01, #40
2cc9c     14 32 06 F1 | 	add	local11, #20
2cca0     19 33 02 FB | 	rdlong	local11, local11
2cca4     FF 33 06 F5 | 	and	local11, #511
2cca8     19 13 02 F1 | 	add	arg01, local11
2ccac     2C 4E 05 F1 | 	add	fp, #44
2ccb0     A7 14 02 FB | 	rdlong	arg02, fp
2ccb4     0C 4E 85 F1 | 	sub	fp, #12
2ccb8     A7 16 02 FB | 	rdlong	arg03, fp
2ccbc     24 4E 85 F1 | 	sub	fp, #36
2ccc0     44 3D BF FD | 	call	#__system____builtin_memmove
2ccc4     04 4E 05 F1 | 	add	fp, #4
2ccc8     A7 FA 01 FB | 	rdlong	result1, fp
2cccc     FD 32 02 F6 | 	mov	local11, result1
2ccd0     04 4E 85 F1 | 	sub	fp, #4
2ccd4     10 FA 05 F1 | 	add	result1, #16
2ccd8     FD FA C1 FA | 	rdbyte	result1, result1
2ccdc     80 FA 45 F5 | 	or	result1, #128
2cce0     10 32 06 F1 | 	add	local11, #16
2cce4     19 FB 41 FC | 	wrbyte	result1, local11
2cce8                 | LR__4569
2cce8     0C 4E 05 F1 | 	add	fp, #12
2ccec     A7 32 02 FB | 	rdlong	local11, fp
2ccf0     18 4E 05 F1 | 	add	fp, #24
2ccf4     A7 FA 01 FB | 	rdlong	result1, fp
2ccf8     FD 32 82 F1 | 	sub	local11, result1
2ccfc     18 4E 85 F1 | 	sub	fp, #24
2cd00     A7 32 62 FC | 	wrlong	local11, fp
2cd04     04 4E 05 F1 | 	add	fp, #4
2cd08     A7 34 02 FB | 	rdlong	local12, fp
2cd0c     1A 33 02 FB | 	rdlong	local11, local12
2cd10     14 4E 05 F1 | 	add	fp, #20
2cd14     A7 36 02 FB | 	rdlong	local13, fp
2cd18     1B 33 02 F1 | 	add	local11, local13
2cd1c     1A 33 62 FC | 	wrlong	local11, local12
2cd20     0C 4E 05 F1 | 	add	fp, #12
2cd24     A7 32 02 FB | 	rdlong	local11, fp
2cd28     0C 4E 85 F1 | 	sub	fp, #12
2cd2c     A7 38 02 FB | 	rdlong	local14, fp
2cd30     1C 33 02 F1 | 	add	local11, local14
2cd34     0C 4E 05 F1 | 	add	fp, #12
2cd38     A7 32 62 FC | 	wrlong	local11, fp
2cd3c     2C 4E 85 F1 | 	sub	fp, #44
2cd40     A7 3A 02 FB | 	rdlong	local15, fp
2cd44     1D 33 02 F6 | 	mov	local11, local15
2cd48     14 3A 06 F1 | 	add	local15, #20
2cd4c     1D 3B 02 FB | 	rdlong	local15, local15
2cd50     20 4E 05 F1 | 	add	fp, #32
2cd54     A7 3C 02 FB | 	rdlong	local16, fp
2cd58     1E 3B 02 F1 | 	add	local15, local16
2cd5c     14 32 06 F1 | 	add	local11, #20
2cd60     19 3B 62 FC | 	wrlong	local15, local11
2cd64     20 4E 85 F1 | 	sub	fp, #32
2cd68     A7 3E 02 FB | 	rdlong	local17, fp
2cd6c     1F 33 02 F6 | 	mov	local11, local17
2cd70     1F 41 02 F6 | 	mov	local18, local17
2cd74     04 4E 85 F1 | 	sub	fp, #4
2cd78     14 3E 06 F1 | 	add	local17, #20
2cd7c     1F 43 02 FB | 	rdlong	local19, local17
2cd80     0C 40 06 F1 | 	add	local18, #12
2cd84     20 45 02 FB | 	rdlong	local20, local18
2cd88     22 43 1A F2 | 	cmp	local19, local20 wcz
2cd8c     24 00 90 ED |  if_be	jmp	#LR__4570
2cd90     04 4E 05 F1 | 	add	fp, #4
2cd94     A7 26 02 FB | 	rdlong	local05, fp
2cd98     04 4E 85 F1 | 	sub	fp, #4
2cd9c     13 23 02 F6 | 	mov	local03, local05
2cda0     14 22 06 F1 | 	add	local03, #20
2cda4     11 25 02 FB | 	rdlong	local04, local03
2cda8     14 22 86 F1 | 	sub	local03, #20
2cdac     12 47 02 F6 | 	mov	local21, local04
2cdb0     20 00 90 FD | 	jmp	#LR__4571
2cdb4                 | LR__4570
2cdb4     04 4E 05 F1 | 	add	fp, #4
2cdb8     A7 2A 02 FB | 	rdlong	local07, fp
2cdbc     04 4E 85 F1 | 	sub	fp, #4
2cdc0     15 31 02 F6 | 	mov	local10, local07
2cdc4     0C 30 06 F1 | 	add	local10, #12
2cdc8     18 2D 02 FB | 	rdlong	local08, local10
2cdcc     0C 30 86 F1 | 	sub	local10, #12
2cdd0     16 47 02 F6 | 	mov	local21, local08
2cdd4                 | LR__4571
2cdd4     0C 32 06 F1 | 	add	local11, #12
2cdd8     19 47 62 FC | 	wrlong	local21, local11
2cddc     5C F9 9F FD | 	jmp	#LR__4553
2cde0                 | LR__4572
2cde0     04 4E 05 F1 | 	add	fp, #4
2cde4     A7 34 02 FB | 	rdlong	local12, fp
2cde8     1A 1F 02 F6 | 	mov	local01, local12
2cdec     04 4E 85 F1 | 	sub	fp, #4
2cdf0     10 34 06 F1 | 	add	local12, #16
2cdf4     1A 33 C2 FA | 	rdbyte	local11, local12
2cdf8     40 32 46 F5 | 	or	local11, #64
2cdfc     10 1E 06 F1 | 	add	local01, #16
2ce00     0F 33 42 FC | 	wrbyte	local11, local01
2ce04                 | ' 
2ce04                 | ' 
2ce04                 | ' 
2ce04                 | ' 
2ce04                 | ' 
2ce04                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
2ce04                 | ' 		fp->flag |=  0x80 ;
2ce04                 | ' 
2ce04                 | ' 	}
2ce04                 | ' 
2ce04                 | ' 	fp->flag |=  0x40 ;
2ce04                 | ' 
2ce04                 | ' 	return FR_OK ;
2ce04     00 FA 05 F6 | 	mov	result1, #0
2ce08                 | LR__4573
2ce08     A7 F0 03 F6 | 	mov	ptra, fp
2ce0c     B2 00 A0 FD | 	call	#popregs_
2ce10                 | _fatfs_cc_f_write_ret
2ce10     2D 00 64 FD | 	ret
2ce14                 | 
2ce14                 | _fatfs_cc_f_sync
2ce14     00 4A 05 F6 | 	mov	COUNT_, #0
2ce18     A8 00 A0 FD | 	call	#pushregs_
2ce1c     18 F0 07 F1 | 	add	ptra, #24
2ce20     04 4E 05 F1 | 	add	fp, #4
2ce24     A7 12 62 FC | 	wrlong	arg01, fp
2ce28     08 4E 05 F1 | 	add	fp, #8
2ce2c     A7 14 02 F6 | 	mov	arg02, fp
2ce30     0C 4E 85 F1 | 	sub	fp, #12
2ce34     D0 E8 BF FD | 	call	#_fatfs_cc_validate
2ce38     08 4E 05 F1 | 	add	fp, #8
2ce3c     A7 FA 61 FC | 	wrlong	result1, fp
2ce40     08 4E 85 F1 | 	sub	fp, #8
2ce44     00 FA 0D F2 | 	cmp	result1, #0 wz
2ce48     C0 01 90 5D |  if_ne	jmp	#LR__4583
2ce4c     04 4E 05 F1 | 	add	fp, #4
2ce50     A7 18 02 FB | 	rdlong	arg04, fp
2ce54     04 4E 85 F1 | 	sub	fp, #4
2ce58     10 18 06 F1 | 	add	arg04, #16
2ce5c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ce60     40 18 CE F7 | 	test	arg04, #64 wz
2ce64     A4 01 90 AD |  if_e	jmp	#LR__4582
2ce68     04 4E 05 F1 | 	add	fp, #4
2ce6c     A7 18 02 FB | 	rdlong	arg04, fp
2ce70     04 4E 85 F1 | 	sub	fp, #4
2ce74     10 18 06 F1 | 	add	arg04, #16
2ce78     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ce7c     80 18 CE F7 | 	test	arg04, #128 wz
2ce80     64 00 90 AD |  if_e	jmp	#LR__4580
2ce84     0C 4E 05 F1 | 	add	fp, #12
2ce88     A7 18 02 FB | 	rdlong	arg04, fp
2ce8c     01 18 06 F1 | 	add	arg04, #1
2ce90     0C 13 C2 FA | 	rdbyte	arg01, arg04
2ce94     08 4E 85 F1 | 	sub	fp, #8
2ce98     A7 18 02 FB | 	rdlong	arg04, fp
2ce9c     0C 15 02 F6 | 	mov	arg02, arg04
2cea0     28 14 06 F1 | 	add	arg02, #40
2cea4     04 4E 85 F1 | 	sub	fp, #4
2cea8     1C 18 06 F1 | 	add	arg04, #28
2ceac     0C 17 02 FB | 	rdlong	arg03, arg04
2ceb0     01 18 06 F6 | 	mov	arg04, #1
2ceb4     0C AE BF FD | 	call	#_fatfs_cc_disk_write
2ceb8     00 FA 0D F2 | 	cmp	result1, #0 wz
2cebc     01 FA 05 56 |  if_ne	mov	result1, #1
2cec0     54 01 90 5D |  if_ne	jmp	#LR__4584
2cec4     04 4E 05 F1 | 	add	fp, #4
2cec8     A7 18 02 FB | 	rdlong	arg04, fp
2cecc     0C 17 02 F6 | 	mov	arg03, arg04
2ced0     04 4E 85 F1 | 	sub	fp, #4
2ced4     10 18 06 F1 | 	add	arg04, #16
2ced8     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cedc     7F 18 06 F5 | 	and	arg04, #127
2cee0     10 16 06 F1 | 	add	arg03, #16
2cee4     0B 19 42 FC | 	wrbyte	arg04, arg03
2cee8                 | LR__4580
2cee8     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2ceec     10 4E 05 F1 | 	add	fp, #16
2cef0     A7 FA 61 FC | 	wrlong	result1, fp
2cef4     04 4E 85 F1 | 	sub	fp, #4
2cef8     A7 12 02 FB | 	rdlong	arg01, fp
2cefc     08 4E 85 F1 | 	sub	fp, #8
2cf00     A7 18 02 FB | 	rdlong	arg04, fp
2cf04     04 4E 85 F1 | 	sub	fp, #4
2cf08     20 18 06 F1 | 	add	arg04, #32
2cf0c     0C 15 02 FB | 	rdlong	arg02, arg04
2cf10     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
2cf14     08 4E 05 F1 | 	add	fp, #8
2cf18     A7 FA 61 FC | 	wrlong	result1, fp
2cf1c     08 4E 85 F1 | 	sub	fp, #8
2cf20     00 FA 0D F2 | 	cmp	result1, #0 wz
2cf24     E4 00 90 5D |  if_ne	jmp	#LR__4581
2cf28     04 4E 05 F1 | 	add	fp, #4
2cf2c     A7 18 02 FB | 	rdlong	arg04, fp
2cf30     24 18 06 F1 | 	add	arg04, #36
2cf34     0C 19 02 FB | 	rdlong	arg04, arg04
2cf38     10 4E 05 F1 | 	add	fp, #16
2cf3c     A7 18 62 FC | 	wrlong	arg04, fp
2cf40     0C 17 02 F6 | 	mov	arg03, arg04
2cf44     0B 16 06 F1 | 	add	arg03, #11
2cf48     0B 17 C2 FA | 	rdbyte	arg03, arg03
2cf4c     20 16 46 F5 | 	or	arg03, #32
2cf50     0B 18 06 F1 | 	add	arg04, #11
2cf54     0C 17 42 FC | 	wrbyte	arg03, arg04
2cf58     10 4E 85 F1 | 	sub	fp, #16
2cf5c     A7 18 02 FB | 	rdlong	arg04, fp
2cf60     0C 13 02 FB | 	rdlong	arg01, arg04
2cf64     10 4E 05 F1 | 	add	fp, #16
2cf68     A7 14 02 FB | 	rdlong	arg02, fp
2cf6c     14 4E 85 F1 | 	sub	fp, #20
2cf70     08 18 06 F1 | 	add	arg04, #8
2cf74     0C 17 02 FB | 	rdlong	arg03, arg04
2cf78     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
2cf7c     14 4E 05 F1 | 	add	fp, #20
2cf80     A7 12 02 FB | 	rdlong	arg01, fp
2cf84     1C 12 06 F1 | 	add	arg01, #28
2cf88     10 4E 85 F1 | 	sub	fp, #16
2cf8c     A7 18 02 FB | 	rdlong	arg04, fp
2cf90     0C 18 06 F1 | 	add	arg04, #12
2cf94     0C 15 02 FB | 	rdlong	arg02, arg04
2cf98     09 15 62 FC | 	wrlong	arg02, arg01
2cf9c     10 4E 05 F1 | 	add	fp, #16
2cfa0     A7 12 02 FB | 	rdlong	arg01, fp
2cfa4     16 12 06 F1 | 	add	arg01, #22
2cfa8     04 4E 85 F1 | 	sub	fp, #4
2cfac     A7 14 02 FB | 	rdlong	arg02, fp
2cfb0     09 15 62 FC | 	wrlong	arg02, arg01
2cfb4     04 4E 05 F1 | 	add	fp, #4
2cfb8     A7 12 02 FB | 	rdlong	arg01, fp
2cfbc     12 12 06 F1 | 	add	arg01, #18
2cfc0     09 01 58 FC | 	wrword	#0, arg01
2cfc4     08 4E 85 F1 | 	sub	fp, #8
2cfc8     A7 18 02 FB | 	rdlong	arg04, fp
2cfcc     03 18 06 F1 | 	add	arg04, #3
2cfd0     0C 03 48 FC | 	wrbyte	#1, arg04
2cfd4     A7 12 02 FB | 	rdlong	arg01, fp
2cfd8     0C 4E 85 F1 | 	sub	fp, #12
2cfdc     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
2cfe0     08 4E 05 F1 | 	add	fp, #8
2cfe4     A7 FA 61 FC | 	wrlong	result1, fp
2cfe8     04 4E 85 F1 | 	sub	fp, #4
2cfec     A7 18 02 FB | 	rdlong	arg04, fp
2cff0     0C 17 02 F6 | 	mov	arg03, arg04
2cff4     04 4E 85 F1 | 	sub	fp, #4
2cff8     10 18 06 F1 | 	add	arg04, #16
2cffc     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d000     BF 18 06 F5 | 	and	arg04, #191
2d004     10 16 06 F1 | 	add	arg03, #16
2d008     0B 19 42 FC | 	wrbyte	arg04, arg03
2d00c                 | LR__4581
2d00c                 | LR__4582
2d00c                 | LR__4583
2d00c                 | ' 					dir = fp->dir_ptr;
2d00c                 | ' 					dir[ 11 ] |=  0x20 ;
2d00c                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2d00c                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2d00c                 | ' 					st_dword(dir +  22 , tm);
2d00c                 | ' 					st_word(dir +  18 , 0);
2d00c                 | ' 					fs->wflag = 1;
2d00c                 | ' 					res = sync_fs(fs);
2d00c                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2d00c                 | ' 				}
2d00c                 | ' 			}
2d00c                 | ' 		}
2d00c                 | ' 	}
2d00c                 | ' 
2d00c                 | ' 	return res ;
2d00c     08 4E 05 F1 | 	add	fp, #8
2d010     A7 FA 01 FB | 	rdlong	result1, fp
2d014     08 4E 85 F1 | 	sub	fp, #8
2d018                 | LR__4584
2d018     A7 F0 03 F6 | 	mov	ptra, fp
2d01c     B2 00 A0 FD | 	call	#popregs_
2d020                 | _fatfs_cc_f_sync_ret
2d020     2D 00 64 FD | 	ret
2d024                 | 
2d024                 | _fatfs_cc_f_close
2d024     01 4A 05 F6 | 	mov	COUNT_, #1
2d028     A8 00 A0 FD | 	call	#pushregs_
2d02c     10 F0 07 F1 | 	add	ptra, #16
2d030     04 4E 05 F1 | 	add	fp, #4
2d034     A7 12 62 FC | 	wrlong	arg01, fp
2d038     04 4E 85 F1 | 	sub	fp, #4
2d03c     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2d040     08 4E 05 F1 | 	add	fp, #8
2d044     A7 FA 61 FC | 	wrlong	result1, fp
2d048     08 4E 85 F1 | 	sub	fp, #8
2d04c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d050     38 00 90 5D |  if_ne	jmp	#LR__4590
2d054     04 4E 05 F1 | 	add	fp, #4
2d058     A7 12 02 FB | 	rdlong	arg01, fp
2d05c     08 4E 05 F1 | 	add	fp, #8
2d060     A7 14 02 F6 | 	mov	arg02, fp
2d064     0C 4E 85 F1 | 	sub	fp, #12
2d068     9C E6 BF FD | 	call	#_fatfs_cc_validate
2d06c     08 4E 05 F1 | 	add	fp, #8
2d070     A7 FA 61 FC | 	wrlong	result1, fp
2d074     08 4E 85 F1 | 	sub	fp, #8
2d078     00 FA 0D F2 | 	cmp	result1, #0 wz
2d07c     04 4E 05 A1 |  if_e	add	fp, #4
2d080     A7 1E 02 AB |  if_e	rdlong	local01, fp
2d084     04 4E 85 A1 |  if_e	sub	fp, #4
2d088     0F 01 68 AC |  if_e	wrlong	#0, local01
2d08c                 | LR__4590
2d08c                 | ' 
2d08c                 | ' 
2d08c                 | ' 
2d08c                 | ' 
2d08c                 | ' 			fp->obj.fs = 0;
2d08c                 | ' #line 4192 "ff.c"
2d08c                 | ' 		}
2d08c                 | ' 	}
2d08c                 | ' 	return res;
2d08c     08 4E 05 F1 | 	add	fp, #8
2d090     A7 FA 01 FB | 	rdlong	result1, fp
2d094     08 4E 85 F1 | 	sub	fp, #8
2d098     A7 F0 03 F6 | 	mov	ptra, fp
2d09c     B2 00 A0 FD | 	call	#popregs_
2d0a0                 | _fatfs_cc_f_close_ret
2d0a0     2D 00 64 FD | 	ret
2d0a4                 | 
2d0a4                 | _fatfs_cc_f_lseek
2d0a4     00 4A 05 F6 | 	mov	COUNT_, #0
2d0a8     A8 00 A0 FD | 	call	#pushregs_
2d0ac     24 F0 07 F1 | 	add	ptra, #36
2d0b0     04 4E 05 F1 | 	add	fp, #4
2d0b4     A7 12 62 FC | 	wrlong	arg01, fp
2d0b8     04 4E 05 F1 | 	add	fp, #4
2d0bc     A7 14 62 FC | 	wrlong	arg02, fp
2d0c0     04 4E 85 F1 | 	sub	fp, #4
2d0c4     A7 12 02 FB | 	rdlong	arg01, fp
2d0c8     0C 4E 05 F1 | 	add	fp, #12
2d0cc     A7 14 02 F6 | 	mov	arg02, fp
2d0d0     10 4E 85 F1 | 	sub	fp, #16
2d0d4     30 E6 BF FD | 	call	#_fatfs_cc_validate
2d0d8     0C 4E 05 F1 | 	add	fp, #12
2d0dc     A7 FA 61 FC | 	wrlong	result1, fp
2d0e0     0C 4E 85 F1 | 	sub	fp, #12
2d0e4     00 FA 0D F2 | 	cmp	result1, #0 wz
2d0e8     1C 00 90 5D |  if_ne	jmp	#LR__4600
2d0ec     04 4E 05 F1 | 	add	fp, #4
2d0f0     A7 18 02 FB | 	rdlong	arg04, fp
2d0f4     11 18 06 F1 | 	add	arg04, #17
2d0f8     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d0fc     08 4E 05 F1 | 	add	fp, #8
2d100     A7 18 62 FC | 	wrlong	arg04, fp
2d104     0C 4E 85 F1 | 	sub	fp, #12
2d108                 | LR__4600
2d108     0C 4E 05 F1 | 	add	fp, #12
2d10c     A7 18 0A FB | 	rdlong	arg04, fp wz
2d110     0C 4E 85 F1 | 	sub	fp, #12
2d114     0C 4E 05 51 |  if_ne	add	fp, #12
2d118     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2d11c     0C 4E 85 51 |  if_ne	sub	fp, #12
2d120     40 06 90 5D |  if_ne	jmp	#LR__4623
2d124     04 4E 05 F1 | 	add	fp, #4
2d128     A7 18 02 FB | 	rdlong	arg04, fp
2d12c     04 4E 05 F1 | 	add	fp, #4
2d130     A7 16 02 FB | 	rdlong	arg03, fp
2d134     08 4E 85 F1 | 	sub	fp, #8
2d138     0C 18 06 F1 | 	add	arg04, #12
2d13c     0C 19 02 FB | 	rdlong	arg04, arg04
2d140     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2d144     3C 00 90 ED |  if_be	jmp	#LR__4601
2d148     04 4E 05 F1 | 	add	fp, #4
2d14c     A7 16 02 FB | 	rdlong	arg03, fp
2d150     04 4E 85 F1 | 	sub	fp, #4
2d154     10 16 06 F1 | 	add	arg03, #16
2d158     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d15c     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2d160     02 16 CE F7 | 	test	arg03, #2 wz
2d164     1C 00 90 5D |  if_ne	jmp	#LR__4601
2d168     04 4E 05 F1 | 	add	fp, #4
2d16c     A7 16 02 FB | 	rdlong	arg03, fp
2d170     0C 16 06 F1 | 	add	arg03, #12
2d174     0B 17 02 FB | 	rdlong	arg03, arg03
2d178     04 4E 05 F1 | 	add	fp, #4
2d17c     A7 16 62 FC | 	wrlong	arg03, fp
2d180     08 4E 85 F1 | 	sub	fp, #8
2d184                 | LR__4601
2d184     04 4E 05 F1 | 	add	fp, #4
2d188     A7 16 02 FB | 	rdlong	arg03, fp
2d18c     14 16 06 F1 | 	add	arg03, #20
2d190     0B 17 02 FB | 	rdlong	arg03, arg03
2d194     1C 4E 05 F1 | 	add	fp, #28
2d198     A7 16 62 FC | 	wrlong	arg03, fp
2d19c     1C 4E 85 F1 | 	sub	fp, #28
2d1a0     A7 16 02 FB | 	rdlong	arg03, fp
2d1a4     18 4E 05 F1 | 	add	fp, #24
2d1a8     A7 00 68 FC | 	wrlong	#0, fp
2d1ac     14 16 06 F1 | 	add	arg03, #20
2d1b0     0B 01 68 FC | 	wrlong	#0, arg03
2d1b4     14 4E 85 F1 | 	sub	fp, #20
2d1b8     A7 16 02 FB | 	rdlong	arg03, fp
2d1bc     08 4E 85 F1 | 	sub	fp, #8
2d1c0     01 16 16 F2 | 	cmp	arg03, #1 wc
2d1c4     E4 03 90 CD |  if_b	jmp	#LR__4617
2d1c8     10 4E 05 F1 | 	add	fp, #16
2d1cc     A7 16 02 FB | 	rdlong	arg03, fp
2d1d0     0A 16 06 F1 | 	add	arg03, #10
2d1d4     0B 19 E2 FA | 	rdword	arg04, arg03
2d1d8     09 18 66 F0 | 	shl	arg04, #9
2d1dc     08 4E 05 F1 | 	add	fp, #8
2d1e0     A7 18 62 FC | 	wrlong	arg04, fp
2d1e4     08 4E 05 F1 | 	add	fp, #8
2d1e8     A7 18 02 FB | 	rdlong	arg04, fp
2d1ec     20 4E 85 F1 | 	sub	fp, #32
2d1f0     01 18 16 F2 | 	cmp	arg04, #1 wc
2d1f4     AC 00 90 CD |  if_b	jmp	#LR__4602
2d1f8     08 4E 05 F1 | 	add	fp, #8
2d1fc     A7 18 02 FB | 	rdlong	arg04, fp
2d200     01 18 86 F1 | 	sub	arg04, #1
2d204     10 4E 05 F1 | 	add	fp, #16
2d208     A7 16 02 FB | 	rdlong	arg03, fp
2d20c     0B 19 12 FD | 	qdiv	arg04, arg03
2d210     08 4E 05 F1 | 	add	fp, #8
2d214     A7 FA 01 FB | 	rdlong	result1, fp
2d218     01 FA 85 F1 | 	sub	result1, #1
2d21c     18 18 62 FD | 	getqx	arg04
2d220     0B FB 11 FD | 	qdiv	result1, arg03
2d224     20 4E 85 F1 | 	sub	fp, #32
2d228     18 16 62 FD | 	getqx	arg03
2d22c     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2d230     70 00 90 CD |  if_b	jmp	#LR__4602
2d234     04 4E 05 F1 | 	add	fp, #4
2d238     A7 16 02 FB | 	rdlong	arg03, fp
2d23c     1C 4E 05 F1 | 	add	fp, #28
2d240     A7 FA 01 FB | 	rdlong	result1, fp
2d244     01 FA 85 F1 | 	sub	result1, #1
2d248     08 4E 85 F1 | 	sub	fp, #8
2d24c     A7 18 02 FB | 	rdlong	arg04, fp
2d250     01 18 86 F1 | 	sub	arg04, #1
2d254     0C FB 21 F5 | 	andn	result1, arg04
2d258     14 16 06 F1 | 	add	arg03, #20
2d25c     0B FB 61 FC | 	wrlong	result1, arg03
2d260     10 4E 85 F1 | 	sub	fp, #16
2d264     A7 16 02 FB | 	rdlong	arg03, fp
2d268     04 4E 85 F1 | 	sub	fp, #4
2d26c     A7 18 02 FB | 	rdlong	arg04, fp
2d270     14 18 06 F1 | 	add	arg04, #20
2d274     0C 19 02 FB | 	rdlong	arg04, arg04
2d278     0C 17 82 F1 | 	sub	arg03, arg04
2d27c     04 4E 05 F1 | 	add	fp, #4
2d280     A7 16 62 FC | 	wrlong	arg03, fp
2d284     04 4E 85 F1 | 	sub	fp, #4
2d288     A7 16 02 FB | 	rdlong	arg03, fp
2d28c     18 16 06 F1 | 	add	arg03, #24
2d290     0B 17 02 FB | 	rdlong	arg03, arg03
2d294     10 4E 05 F1 | 	add	fp, #16
2d298     A7 16 62 FC | 	wrlong	arg03, fp
2d29c     14 4E 85 F1 | 	sub	fp, #20
2d2a0     D0 00 90 FD | 	jmp	#LR__4606
2d2a4                 | LR__4602
2d2a4     04 4E 05 F1 | 	add	fp, #4
2d2a8     A7 16 02 FB | 	rdlong	arg03, fp
2d2ac     08 16 06 F1 | 	add	arg03, #8
2d2b0     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2d2b4     10 4E 05 F1 | 	add	fp, #16
2d2b8     A7 16 62 FC | 	wrlong	arg03, fp
2d2bc     14 4E 85 F1 | 	sub	fp, #20
2d2c0     94 00 90 5D |  if_ne	jmp	#LR__4605
2d2c4     04 4E 05 F1 | 	add	fp, #4
2d2c8     A7 12 02 FB | 	rdlong	arg01, fp
2d2cc     04 4E 85 F1 | 	sub	fp, #4
2d2d0     00 14 06 F6 | 	mov	arg02, #0
2d2d4     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
2d2d8     14 4E 05 F1 | 	add	fp, #20
2d2dc     A7 FA 61 FC | 	wrlong	result1, fp
2d2e0     14 4E 85 F1 | 	sub	fp, #20
2d2e4     01 FA 0D F2 | 	cmp	result1, #1 wz
2d2e8     1C 00 90 5D |  if_ne	jmp	#LR__4603
2d2ec     04 4E 05 F1 | 	add	fp, #4
2d2f0     A7 16 02 FB | 	rdlong	arg03, fp
2d2f4     04 4E 85 F1 | 	sub	fp, #4
2d2f8     11 16 06 F1 | 	add	arg03, #17
2d2fc     0B 05 48 FC | 	wrbyte	#2, arg03
2d300     02 FA 05 F6 | 	mov	result1, #2
2d304     5C 04 90 FD | 	jmp	#LR__4623
2d308                 | LR__4603
2d308     14 4E 05 F1 | 	add	fp, #20
2d30c     A7 FA 01 FB | 	rdlong	result1, fp
2d310     14 4E 85 F1 | 	sub	fp, #20
2d314     FF FF 7F FF 
2d318     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2d31c     1C 00 90 5D |  if_ne	jmp	#LR__4604
2d320     04 4E 05 F1 | 	add	fp, #4
2d324     A7 16 02 FB | 	rdlong	arg03, fp
2d328     04 4E 85 F1 | 	sub	fp, #4
2d32c     11 16 06 F1 | 	add	arg03, #17
2d330     0B 03 48 FC | 	wrbyte	#1, arg03
2d334     01 FA 05 F6 | 	mov	result1, #1
2d338     28 04 90 FD | 	jmp	#LR__4623
2d33c                 | LR__4604
2d33c     04 4E 05 F1 | 	add	fp, #4
2d340     A7 16 02 FB | 	rdlong	arg03, fp
2d344     10 4E 05 F1 | 	add	fp, #16
2d348     A7 18 02 FB | 	rdlong	arg04, fp
2d34c     14 4E 85 F1 | 	sub	fp, #20
2d350     08 16 06 F1 | 	add	arg03, #8
2d354     0B 19 62 FC | 	wrlong	arg04, arg03
2d358                 | LR__4605
2d358     04 4E 05 F1 | 	add	fp, #4
2d35c     A7 16 02 FB | 	rdlong	arg03, fp
2d360     10 4E 05 F1 | 	add	fp, #16
2d364     A7 18 02 FB | 	rdlong	arg04, fp
2d368     14 4E 85 F1 | 	sub	fp, #20
2d36c     18 16 06 F1 | 	add	arg03, #24
2d370     0B 19 62 FC | 	wrlong	arg04, arg03
2d374                 | LR__4606
2d374     14 4E 05 F1 | 	add	fp, #20
2d378     A7 16 0A FB | 	rdlong	arg03, fp wz
2d37c     14 4E 85 F1 | 	sub	fp, #20
2d380     28 02 90 AD |  if_e	jmp	#LR__4616
2d384                 | ' 				while (ofs > bcs) {
2d384                 | LR__4607
2d384     08 4E 05 F1 | 	add	fp, #8
2d388     A7 18 02 FB | 	rdlong	arg04, fp
2d38c     10 4E 05 F1 | 	add	fp, #16
2d390     A7 16 02 FB | 	rdlong	arg03, fp
2d394     18 4E 85 F1 | 	sub	fp, #24
2d398     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
2d39c     68 01 90 ED |  if_be	jmp	#LR__4613
2d3a0     08 4E 05 F1 | 	add	fp, #8
2d3a4     A7 18 02 FB | 	rdlong	arg04, fp
2d3a8     10 4E 05 F1 | 	add	fp, #16
2d3ac     A7 16 02 FB | 	rdlong	arg03, fp
2d3b0     0B 19 82 F1 | 	sub	arg04, arg03
2d3b4     10 4E 85 F1 | 	sub	fp, #16
2d3b8     A7 18 62 FC | 	wrlong	arg04, fp
2d3bc     04 4E 85 F1 | 	sub	fp, #4
2d3c0     A7 18 02 FB | 	rdlong	arg04, fp
2d3c4     0C FB 01 F6 | 	mov	result1, arg04
2d3c8     14 18 06 F1 | 	add	arg04, #20
2d3cc     0C 19 02 FB | 	rdlong	arg04, arg04
2d3d0     14 4E 05 F1 | 	add	fp, #20
2d3d4     A7 16 02 FB | 	rdlong	arg03, fp
2d3d8     0B 19 02 F1 | 	add	arg04, arg03
2d3dc     14 FA 05 F1 | 	add	result1, #20
2d3e0     FD 18 62 FC | 	wrlong	arg04, result1
2d3e4     14 4E 85 F1 | 	sub	fp, #20
2d3e8     A7 16 02 FB | 	rdlong	arg03, fp
2d3ec     04 4E 85 F1 | 	sub	fp, #4
2d3f0     10 16 06 F1 | 	add	arg03, #16
2d3f4     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d3f8     02 16 CE F7 | 	test	arg03, #2 wz
2d3fc     3C 00 90 AD |  if_e	jmp	#LR__4608
2d400     04 4E 05 F1 | 	add	fp, #4
2d404     A7 12 02 FB | 	rdlong	arg01, fp
2d408     10 4E 05 F1 | 	add	fp, #16
2d40c     A7 14 02 FB | 	rdlong	arg02, fp
2d410     14 4E 85 F1 | 	sub	fp, #20
2d414     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
2d418     14 4E 05 F1 | 	add	fp, #20
2d41c     A7 FA 61 FC | 	wrlong	result1, fp
2d420     00 FA 4D F2 | 	cmps	result1, #0 wz
2d424     14 4E 85 F1 | 	sub	fp, #20
2d428     08 4E 05 A1 |  if_e	add	fp, #8
2d42c     A7 00 68 AC |  if_e	wrlong	#0, fp
2d430     08 4E 85 A1 |  if_e	sub	fp, #8
2d434                 | ' 							ofs = 0; break;
2d434     D0 00 90 AD |  if_e	jmp	#LR__4613
2d438     24 00 90 FD | 	jmp	#LR__4609
2d43c                 | LR__4608
2d43c     04 4E 05 F1 | 	add	fp, #4
2d440     A7 12 02 FB | 	rdlong	arg01, fp
2d444     10 4E 05 F1 | 	add	fp, #16
2d448     A7 14 02 FB | 	rdlong	arg02, fp
2d44c     14 4E 85 F1 | 	sub	fp, #20
2d450     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
2d454     14 4E 05 F1 | 	add	fp, #20
2d458     A7 FA 61 FC | 	wrlong	result1, fp
2d45c     14 4E 85 F1 | 	sub	fp, #20
2d460                 | LR__4609
2d460     14 4E 05 F1 | 	add	fp, #20
2d464     A7 16 02 FB | 	rdlong	arg03, fp
2d468     14 4E 85 F1 | 	sub	fp, #20
2d46c     FF FF 7F FF 
2d470     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2d474     1C 00 90 5D |  if_ne	jmp	#LR__4610
2d478     04 4E 05 F1 | 	add	fp, #4
2d47c     A7 16 02 FB | 	rdlong	arg03, fp
2d480     04 4E 85 F1 | 	sub	fp, #4
2d484     11 16 06 F1 | 	add	arg03, #17
2d488     0B 03 48 FC | 	wrbyte	#1, arg03
2d48c     01 FA 05 F6 | 	mov	result1, #1
2d490     D0 02 90 FD | 	jmp	#LR__4623
2d494                 | LR__4610
2d494     14 4E 05 F1 | 	add	fp, #20
2d498     A7 16 02 FB | 	rdlong	arg03, fp
2d49c     14 4E 85 F1 | 	sub	fp, #20
2d4a0     02 16 16 F2 | 	cmp	arg03, #2 wc
2d4a4     24 00 90 CD |  if_b	jmp	#LR__4611
2d4a8     10 4E 05 F1 | 	add	fp, #16
2d4ac     A7 18 02 FB | 	rdlong	arg04, fp
2d4b0     04 4E 05 F1 | 	add	fp, #4
2d4b4     A7 16 02 FB | 	rdlong	arg03, fp
2d4b8     14 4E 85 F1 | 	sub	fp, #20
2d4bc     18 18 06 F1 | 	add	arg04, #24
2d4c0     0C 19 02 FB | 	rdlong	arg04, arg04
2d4c4     0C 17 12 F2 | 	cmp	arg03, arg04 wc
2d4c8     1C 00 90 CD |  if_b	jmp	#LR__4612
2d4cc                 | LR__4611
2d4cc     04 4E 05 F1 | 	add	fp, #4
2d4d0     A7 16 02 FB | 	rdlong	arg03, fp
2d4d4     04 4E 85 F1 | 	sub	fp, #4
2d4d8     11 16 06 F1 | 	add	arg03, #17
2d4dc     0B 05 48 FC | 	wrbyte	#2, arg03
2d4e0     02 FA 05 F6 | 	mov	result1, #2
2d4e4     7C 02 90 FD | 	jmp	#LR__4623
2d4e8                 | LR__4612
2d4e8     04 4E 05 F1 | 	add	fp, #4
2d4ec     A7 18 02 FB | 	rdlong	arg04, fp
2d4f0     10 4E 05 F1 | 	add	fp, #16
2d4f4     A7 16 02 FB | 	rdlong	arg03, fp
2d4f8     14 4E 85 F1 | 	sub	fp, #20
2d4fc     18 18 06 F1 | 	add	arg04, #24
2d500     0C 17 62 FC | 	wrlong	arg03, arg04
2d504     7C FE 9F FD | 	jmp	#LR__4607
2d508                 | LR__4613
2d508     04 4E 05 F1 | 	add	fp, #4
2d50c     A7 16 02 FB | 	rdlong	arg03, fp
2d510     0B 13 02 F6 | 	mov	arg01, arg03
2d514     14 16 06 F1 | 	add	arg03, #20
2d518     0B 15 02 FB | 	rdlong	arg02, arg03
2d51c     04 4E 05 F1 | 	add	fp, #4
2d520     A7 16 02 FB | 	rdlong	arg03, fp
2d524     0B 15 02 F1 | 	add	arg02, arg03
2d528     14 12 06 F1 | 	add	arg01, #20
2d52c     09 15 62 FC | 	wrlong	arg02, arg01
2d530     A7 16 02 FB | 	rdlong	arg03, fp
2d534     08 4E 85 F1 | 	sub	fp, #8
2d538     FF 17 CE F7 | 	test	arg03, #511 wz
2d53c     6C 00 90 AD |  if_e	jmp	#LR__4615
2d540     10 4E 05 F1 | 	add	fp, #16
2d544     A7 12 02 FB | 	rdlong	arg01, fp
2d548     04 4E 05 F1 | 	add	fp, #4
2d54c     A7 14 02 FB | 	rdlong	arg02, fp
2d550     14 4E 85 F1 | 	sub	fp, #20
2d554     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2d558     1C 4E 05 F1 | 	add	fp, #28
2d55c     A7 FA 61 FC | 	wrlong	result1, fp
2d560     1C 4E 85 F1 | 	sub	fp, #28
2d564     00 FA 0D F2 | 	cmp	result1, #0 wz
2d568     1C 00 90 5D |  if_ne	jmp	#LR__4614
2d56c     04 4E 05 F1 | 	add	fp, #4
2d570     A7 16 02 FB | 	rdlong	arg03, fp
2d574     04 4E 85 F1 | 	sub	fp, #4
2d578     11 16 06 F1 | 	add	arg03, #17
2d57c     0B 05 48 FC | 	wrbyte	#2, arg03
2d580     02 FA 05 F6 | 	mov	result1, #2
2d584     DC 01 90 FD | 	jmp	#LR__4623
2d588                 | LR__4614
2d588     1C 4E 05 F1 | 	add	fp, #28
2d58c     A7 18 02 FB | 	rdlong	arg04, fp
2d590     14 4E 85 F1 | 	sub	fp, #20
2d594     A7 16 02 FB | 	rdlong	arg03, fp
2d598     09 16 46 F0 | 	shr	arg03, #9
2d59c     0B 19 02 F1 | 	add	arg04, arg03
2d5a0     14 4E 05 F1 | 	add	fp, #20
2d5a4     A7 18 62 FC | 	wrlong	arg04, fp
2d5a8     1C 4E 85 F1 | 	sub	fp, #28
2d5ac                 | LR__4615
2d5ac                 | LR__4616
2d5ac                 | LR__4617
2d5ac     04 4E 05 F1 | 	add	fp, #4
2d5b0     A7 18 02 FB | 	rdlong	arg04, fp
2d5b4     0C 17 02 F6 | 	mov	arg03, arg04
2d5b8     04 4E 85 F1 | 	sub	fp, #4
2d5bc     14 16 06 F1 | 	add	arg03, #20
2d5c0     0B 17 02 FB | 	rdlong	arg03, arg03
2d5c4     0C 18 06 F1 | 	add	arg04, #12
2d5c8     0C 19 02 FB | 	rdlong	arg04, arg04
2d5cc     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2d5d0     3C 00 90 ED |  if_be	jmp	#LR__4618
2d5d4     04 4E 05 F1 | 	add	fp, #4
2d5d8     A7 18 02 FB | 	rdlong	arg04, fp
2d5dc     0C 17 02 F6 | 	mov	arg03, arg04
2d5e0     14 18 06 F1 | 	add	arg04, #20
2d5e4     0C 19 02 FB | 	rdlong	arg04, arg04
2d5e8     0C 16 06 F1 | 	add	arg03, #12
2d5ec     0B 19 62 FC | 	wrlong	arg04, arg03
2d5f0     A7 18 02 FB | 	rdlong	arg04, fp
2d5f4     0C 17 02 F6 | 	mov	arg03, arg04
2d5f8     04 4E 85 F1 | 	sub	fp, #4
2d5fc     10 18 06 F1 | 	add	arg04, #16
2d600     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d604     40 18 46 F5 | 	or	arg04, #64
2d608     10 16 06 F1 | 	add	arg03, #16
2d60c     0B 19 42 FC | 	wrbyte	arg04, arg03
2d610                 | LR__4618
2d610     04 4E 05 F1 | 	add	fp, #4
2d614     A7 16 02 FB | 	rdlong	arg03, fp
2d618     04 4E 85 F1 | 	sub	fp, #4
2d61c     14 16 06 F1 | 	add	arg03, #20
2d620     0B 17 02 FB | 	rdlong	arg03, arg03
2d624     FF 17 CE F7 | 	test	arg03, #511 wz
2d628     2C 01 90 AD |  if_e	jmp	#LR__4622
2d62c     04 4E 05 F1 | 	add	fp, #4
2d630     A7 18 02 FB | 	rdlong	arg04, fp
2d634     18 4E 05 F1 | 	add	fp, #24
2d638     A7 16 02 FB | 	rdlong	arg03, fp
2d63c     1C 4E 85 F1 | 	sub	fp, #28
2d640     1C 18 06 F1 | 	add	arg04, #28
2d644     0C 19 02 FB | 	rdlong	arg04, arg04
2d648     0C 17 0A F2 | 	cmp	arg03, arg04 wz
2d64c     08 01 90 AD |  if_e	jmp	#LR__4622
2d650     04 4E 05 F1 | 	add	fp, #4
2d654     A7 16 02 FB | 	rdlong	arg03, fp
2d658     04 4E 85 F1 | 	sub	fp, #4
2d65c     10 16 06 F1 | 	add	arg03, #16
2d660     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d664     80 16 CE F7 | 	test	arg03, #128 wz
2d668     7C 00 90 AD |  if_e	jmp	#LR__4620
2d66c     10 4E 05 F1 | 	add	fp, #16
2d670     A7 16 02 FB | 	rdlong	arg03, fp
2d674     01 16 06 F1 | 	add	arg03, #1
2d678     0B 13 C2 FA | 	rdbyte	arg01, arg03
2d67c     0C 4E 85 F1 | 	sub	fp, #12
2d680     A7 16 02 FB | 	rdlong	arg03, fp
2d684     0B 15 02 F6 | 	mov	arg02, arg03
2d688     28 14 06 F1 | 	add	arg02, #40
2d68c     04 4E 85 F1 | 	sub	fp, #4
2d690     1C 16 06 F1 | 	add	arg03, #28
2d694     0B 17 02 FB | 	rdlong	arg03, arg03
2d698     01 18 06 F6 | 	mov	arg04, #1
2d69c     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
2d6a0     00 FA 0D F2 | 	cmp	result1, #0 wz
2d6a4     1C 00 90 AD |  if_e	jmp	#LR__4619
2d6a8     04 4E 05 F1 | 	add	fp, #4
2d6ac     A7 16 02 FB | 	rdlong	arg03, fp
2d6b0     04 4E 85 F1 | 	sub	fp, #4
2d6b4     11 16 06 F1 | 	add	arg03, #17
2d6b8     0B 03 48 FC | 	wrbyte	#1, arg03
2d6bc     01 FA 05 F6 | 	mov	result1, #1
2d6c0     A0 00 90 FD | 	jmp	#LR__4623
2d6c4                 | LR__4619
2d6c4     04 4E 05 F1 | 	add	fp, #4
2d6c8     A7 18 02 FB | 	rdlong	arg04, fp
2d6cc     0C 17 02 F6 | 	mov	arg03, arg04
2d6d0     04 4E 85 F1 | 	sub	fp, #4
2d6d4     10 18 06 F1 | 	add	arg04, #16
2d6d8     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d6dc     7F 18 06 F5 | 	and	arg04, #127
2d6e0     10 16 06 F1 | 	add	arg03, #16
2d6e4     0B 19 42 FC | 	wrbyte	arg04, arg03
2d6e8                 | LR__4620
2d6e8     10 4E 05 F1 | 	add	fp, #16
2d6ec     A7 16 02 FB | 	rdlong	arg03, fp
2d6f0     01 16 06 F1 | 	add	arg03, #1
2d6f4     0B 13 C2 FA | 	rdbyte	arg01, arg03
2d6f8     0C 4E 85 F1 | 	sub	fp, #12
2d6fc     A7 14 02 FB | 	rdlong	arg02, fp
2d700     28 14 06 F1 | 	add	arg02, #40
2d704     18 4E 05 F1 | 	add	fp, #24
2d708     A7 16 02 FB | 	rdlong	arg03, fp
2d70c     1C 4E 85 F1 | 	sub	fp, #28
2d710     01 18 06 F6 | 	mov	arg04, #1
2d714     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
2d718     00 FA 0D F2 | 	cmp	result1, #0 wz
2d71c     1C 00 90 AD |  if_e	jmp	#LR__4621
2d720     04 4E 05 F1 | 	add	fp, #4
2d724     A7 16 02 FB | 	rdlong	arg03, fp
2d728     04 4E 85 F1 | 	sub	fp, #4
2d72c     11 16 06 F1 | 	add	arg03, #17
2d730     0B 03 48 FC | 	wrbyte	#1, arg03
2d734     01 FA 05 F6 | 	mov	result1, #1
2d738     28 00 90 FD | 	jmp	#LR__4623
2d73c                 | LR__4621
2d73c     04 4E 05 F1 | 	add	fp, #4
2d740     A7 18 02 FB | 	rdlong	arg04, fp
2d744     18 4E 05 F1 | 	add	fp, #24
2d748     A7 16 02 FB | 	rdlong	arg03, fp
2d74c     1C 4E 85 F1 | 	sub	fp, #28
2d750     1C 18 06 F1 | 	add	arg04, #28
2d754     0C 17 62 FC | 	wrlong	arg03, arg04
2d758                 | LR__4622
2d758                 | ' 
2d758                 | ' 			fp->sect = nsect;
2d758                 | ' 		}
2d758                 | ' 	}
2d758                 | ' 
2d758                 | ' 	return res ;
2d758     0C 4E 05 F1 | 	add	fp, #12
2d75c     A7 FA 01 FB | 	rdlong	result1, fp
2d760     0C 4E 85 F1 | 	sub	fp, #12
2d764                 | LR__4623
2d764     A7 F0 03 F6 | 	mov	ptra, fp
2d768     B2 00 A0 FD | 	call	#popregs_
2d76c                 | _fatfs_cc_f_lseek_ret
2d76c     2D 00 64 FD | 	ret
2d770                 | 
2d770                 | _fatfs_cc_f_opendir
2d770     01 4A 05 F6 | 	mov	COUNT_, #1
2d774     A8 00 A0 FD | 	call	#pushregs_
2d778     14 F0 07 F1 | 	add	ptra, #20
2d77c     04 4E 05 F1 | 	add	fp, #4
2d780     A7 12 62 FC | 	wrlong	arg01, fp
2d784     04 4E 05 F1 | 	add	fp, #4
2d788     A7 14 62 FC | 	wrlong	arg02, fp
2d78c     04 4E 85 F1 | 	sub	fp, #4
2d790     A7 16 0A FB | 	rdlong	arg03, fp wz
2d794     04 4E 85 F1 | 	sub	fp, #4
2d798     09 FA 05 A6 |  if_e	mov	result1, #9
2d79c     78 01 90 AD |  if_e	jmp	#LR__4636
2d7a0     08 4E 05 F1 | 	add	fp, #8
2d7a4     A7 12 02 F6 | 	mov	arg01, fp
2d7a8     08 4E 05 F1 | 	add	fp, #8
2d7ac     A7 14 02 F6 | 	mov	arg02, fp
2d7b0     10 4E 85 F1 | 	sub	fp, #16
2d7b4     00 16 06 F6 | 	mov	arg03, #0
2d7b8     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
2d7bc     0C 4E 05 F1 | 	add	fp, #12
2d7c0     A7 FA 61 FC | 	wrlong	result1, fp
2d7c4     0C 4E 85 F1 | 	sub	fp, #12
2d7c8     00 FA 0D F2 | 	cmp	result1, #0 wz
2d7cc     20 01 90 5D |  if_ne	jmp	#LR__4635
2d7d0     04 4E 05 F1 | 	add	fp, #4
2d7d4     A7 16 02 FB | 	rdlong	arg03, fp
2d7d8     0C 4E 05 F1 | 	add	fp, #12
2d7dc     A7 FA 01 FB | 	rdlong	result1, fp
2d7e0     0B FB 61 FC | 	wrlong	result1, arg03
2d7e4     0C 4E 85 F1 | 	sub	fp, #12
2d7e8     A7 12 02 FB | 	rdlong	arg01, fp
2d7ec     04 4E 05 F1 | 	add	fp, #4
2d7f0     A7 14 02 FB | 	rdlong	arg02, fp
2d7f4     08 4E 85 F1 | 	sub	fp, #8
2d7f8     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
2d7fc     0C 4E 05 F1 | 	add	fp, #12
2d800     A7 FA 61 FC | 	wrlong	result1, fp
2d804     0C 4E 85 F1 | 	sub	fp, #12
2d808     00 FA 0D F2 | 	cmp	result1, #0 wz
2d80c     C4 00 90 5D |  if_ne	jmp	#LR__4634
2d810     04 4E 05 F1 | 	add	fp, #4
2d814     A7 16 02 FB | 	rdlong	arg03, fp
2d818     04 4E 85 F1 | 	sub	fp, #4
2d81c     2B 16 06 F1 | 	add	arg03, #43
2d820     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d824     80 16 CE F7 | 	test	arg03, #128 wz
2d828     58 00 90 5D |  if_ne	jmp	#LR__4632
2d82c     04 4E 05 F1 | 	add	fp, #4
2d830     A7 16 02 FB | 	rdlong	arg03, fp
2d834     04 4E 85 F1 | 	sub	fp, #4
2d838     06 16 06 F1 | 	add	arg03, #6
2d83c     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d840     10 16 CE F7 | 	test	arg03, #16 wz
2d844     30 00 90 AD |  if_e	jmp	#LR__4630
2d848     04 4E 05 F1 | 	add	fp, #4
2d84c     A7 16 02 FB | 	rdlong	arg03, fp
2d850     0B 1F 02 F6 | 	mov	local01, arg03
2d854     0C 4E 05 F1 | 	add	fp, #12
2d858     A7 12 02 FB | 	rdlong	arg01, fp
2d85c     10 4E 85 F1 | 	sub	fp, #16
2d860     1C 16 06 F1 | 	add	arg03, #28
2d864     0B 15 02 FB | 	rdlong	arg02, arg03
2d868     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
2d86c     08 1E 06 F1 | 	add	local01, #8
2d870     0F FB 61 FC | 	wrlong	result1, local01
2d874     0C 00 90 FD | 	jmp	#LR__4631
2d878                 | LR__4630
2d878     0C 4E 05 F1 | 	add	fp, #12
2d87c     A7 0A 68 FC | 	wrlong	#5, fp
2d880     0C 4E 85 F1 | 	sub	fp, #12
2d884                 | LR__4631
2d884                 | LR__4632
2d884     0C 4E 05 F1 | 	add	fp, #12
2d888     A7 1E 0A FB | 	rdlong	local01, fp wz
2d88c     0C 4E 85 F1 | 	sub	fp, #12
2d890     40 00 90 5D |  if_ne	jmp	#LR__4633
2d894     04 4E 05 F1 | 	add	fp, #4
2d898     A7 1E 02 FB | 	rdlong	local01, fp
2d89c     0C 4E 05 F1 | 	add	fp, #12
2d8a0     A7 16 02 FB | 	rdlong	arg03, fp
2d8a4     06 16 06 F1 | 	add	arg03, #6
2d8a8     0B 17 E2 FA | 	rdword	arg03, arg03
2d8ac     04 1E 06 F1 | 	add	local01, #4
2d8b0     0F 17 52 FC | 	wrword	arg03, local01
2d8b4     0C 4E 85 F1 | 	sub	fp, #12
2d8b8     A7 12 02 FB | 	rdlong	arg01, fp
2d8bc     04 4E 85 F1 | 	sub	fp, #4
2d8c0     00 14 06 F6 | 	mov	arg02, #0
2d8c4     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
2d8c8     0C 4E 05 F1 | 	add	fp, #12
2d8cc     A7 FA 61 FC | 	wrlong	result1, fp
2d8d0     0C 4E 85 F1 | 	sub	fp, #12
2d8d4                 | LR__4633
2d8d4                 | LR__4634
2d8d4     0C 4E 05 F1 | 	add	fp, #12
2d8d8     A7 1E 02 FB | 	rdlong	local01, fp
2d8dc     0C 4E 85 F1 | 	sub	fp, #12
2d8e0     04 1E 0E F2 | 	cmp	local01, #4 wz
2d8e4     0C 4E 05 A1 |  if_e	add	fp, #12
2d8e8     A7 0A 68 AC |  if_e	wrlong	#5, fp
2d8ec     0C 4E 85 A1 |  if_e	sub	fp, #12
2d8f0                 | LR__4635
2d8f0     0C 4E 05 F1 | 	add	fp, #12
2d8f4     A7 1E 0A FB | 	rdlong	local01, fp wz
2d8f8     0C 4E 85 F1 | 	sub	fp, #12
2d8fc     04 4E 05 51 |  if_ne	add	fp, #4
2d900     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2d904     04 4E 85 51 |  if_ne	sub	fp, #4
2d908     0F 01 68 5C |  if_ne	wrlong	#0, local01
2d90c                 | ' 
2d90c                 | ' 	return res ;
2d90c     0C 4E 05 F1 | 	add	fp, #12
2d910     A7 FA 01 FB | 	rdlong	result1, fp
2d914     0C 4E 85 F1 | 	sub	fp, #12
2d918                 | LR__4636
2d918     A7 F0 03 F6 | 	mov	ptra, fp
2d91c     B2 00 A0 FD | 	call	#popregs_
2d920                 | _fatfs_cc_f_opendir_ret
2d920     2D 00 64 FD | 	ret
2d924                 | 
2d924                 | _fatfs_cc_f_closedir
2d924     00 4A 05 F6 | 	mov	COUNT_, #0
2d928     A8 00 A0 FD | 	call	#pushregs_
2d92c     10 F0 07 F1 | 	add	ptra, #16
2d930     04 4E 05 F1 | 	add	fp, #4
2d934     A7 12 62 FC | 	wrlong	arg01, fp
2d938     08 4E 05 F1 | 	add	fp, #8
2d93c     A7 14 02 F6 | 	mov	arg02, fp
2d940     0C 4E 85 F1 | 	sub	fp, #12
2d944     C0 DD BF FD | 	call	#_fatfs_cc_validate
2d948     08 4E 05 F1 | 	add	fp, #8
2d94c     A7 FA 61 FC | 	wrlong	result1, fp
2d950     08 4E 85 F1 | 	sub	fp, #8
2d954     00 FA 0D F2 | 	cmp	result1, #0 wz
2d958     04 4E 05 A1 |  if_e	add	fp, #4
2d95c     A7 FA 01 AB |  if_e	rdlong	result1, fp
2d960     04 4E 85 A1 |  if_e	sub	fp, #4
2d964     FD 00 68 AC |  if_e	wrlong	#0, result1
2d968                 | ' 
2d968                 | ' 
2d968                 | ' 
2d968                 | ' 
2d968                 | ' 		dp->obj.fs = 0;
2d968                 | ' #line 4633 "ff.c"
2d968                 | ' 	}
2d968                 | ' 	return res;
2d968     08 4E 05 F1 | 	add	fp, #8
2d96c     A7 FA 01 FB | 	rdlong	result1, fp
2d970     08 4E 85 F1 | 	sub	fp, #8
2d974     A7 F0 03 F6 | 	mov	ptra, fp
2d978     B2 00 A0 FD | 	call	#popregs_
2d97c                 | _fatfs_cc_f_closedir_ret
2d97c     2D 00 64 FD | 	ret
2d980                 | 
2d980                 | _fatfs_cc_f_readdir
2d980     00 4A 05 F6 | 	mov	COUNT_, #0
2d984     A8 00 A0 FD | 	call	#pushregs_
2d988     14 F0 07 F1 | 	add	ptra, #20
2d98c     04 4E 05 F1 | 	add	fp, #4
2d990     A7 12 62 FC | 	wrlong	arg01, fp
2d994     04 4E 05 F1 | 	add	fp, #4
2d998     A7 14 62 FC | 	wrlong	arg02, fp
2d99c     04 4E 85 F1 | 	sub	fp, #4
2d9a0     A7 12 02 FB | 	rdlong	arg01, fp
2d9a4     0C 4E 05 F1 | 	add	fp, #12
2d9a8     A7 14 02 F6 | 	mov	arg02, fp
2d9ac     10 4E 85 F1 | 	sub	fp, #16
2d9b0     54 DD BF FD | 	call	#_fatfs_cc_validate
2d9b4     0C 4E 05 F1 | 	add	fp, #12
2d9b8     A7 FA 61 FC | 	wrlong	result1, fp
2d9bc     0C 4E 85 F1 | 	sub	fp, #12
2d9c0     00 FA 0D F2 | 	cmp	result1, #0 wz
2d9c4     BC 00 90 5D |  if_ne	jmp	#LR__4643
2d9c8     08 4E 05 F1 | 	add	fp, #8
2d9cc     A7 FA 09 FB | 	rdlong	result1, fp wz
2d9d0     08 4E 85 F1 | 	sub	fp, #8
2d9d4     24 00 90 5D |  if_ne	jmp	#LR__4640
2d9d8     04 4E 05 F1 | 	add	fp, #4
2d9dc     A7 12 02 FB | 	rdlong	arg01, fp
2d9e0     04 4E 85 F1 | 	sub	fp, #4
2d9e4     00 14 06 F6 | 	mov	arg02, #0
2d9e8     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
2d9ec     0C 4E 05 F1 | 	add	fp, #12
2d9f0     A7 FA 61 FC | 	wrlong	result1, fp
2d9f4     0C 4E 85 F1 | 	sub	fp, #12
2d9f8     88 00 90 FD | 	jmp	#LR__4642
2d9fc                 | LR__4640
2d9fc     04 4E 05 F1 | 	add	fp, #4
2da00     A7 12 02 FB | 	rdlong	arg01, fp
2da04     04 4E 85 F1 | 	sub	fp, #4
2da08     00 14 06 F6 | 	mov	arg02, #0
2da0c     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
2da10     0C 4E 05 F1 | 	add	fp, #12
2da14     A7 FA 61 FC | 	wrlong	result1, fp
2da18     0C 4E 85 F1 | 	sub	fp, #12
2da1c     04 FA 0D F2 | 	cmp	result1, #4 wz
2da20     0C 4E 05 A1 |  if_e	add	fp, #12
2da24     A7 00 68 AC |  if_e	wrlong	#0, fp
2da28     0C 4E 85 A1 |  if_e	sub	fp, #12
2da2c     0C 4E 05 F1 | 	add	fp, #12
2da30     A7 FA 09 FB | 	rdlong	result1, fp wz
2da34     0C 4E 85 F1 | 	sub	fp, #12
2da38     48 00 90 5D |  if_ne	jmp	#LR__4641
2da3c     04 4E 05 F1 | 	add	fp, #4
2da40     A7 12 02 FB | 	rdlong	arg01, fp
2da44     04 4E 05 F1 | 	add	fp, #4
2da48     A7 14 02 FB | 	rdlong	arg02, fp
2da4c     08 4E 85 F1 | 	sub	fp, #8
2da50     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
2da54     04 4E 05 F1 | 	add	fp, #4
2da58     A7 12 02 FB | 	rdlong	arg01, fp
2da5c     04 4E 85 F1 | 	sub	fp, #4
2da60     00 14 06 F6 | 	mov	arg02, #0
2da64     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
2da68     0C 4E 05 F1 | 	add	fp, #12
2da6c     A7 FA 61 FC | 	wrlong	result1, fp
2da70     0C 4E 85 F1 | 	sub	fp, #12
2da74     04 FA 0D F2 | 	cmp	result1, #4 wz
2da78     0C 4E 05 A1 |  if_e	add	fp, #12
2da7c     A7 00 68 AC |  if_e	wrlong	#0, fp
2da80     0C 4E 85 A1 |  if_e	sub	fp, #12
2da84                 | LR__4641
2da84                 | LR__4642
2da84                 | LR__4643
2da84                 | ' 			}
2da84                 | ' 			;
2da84                 | ' 		}
2da84                 | ' 	}
2da84                 | ' 	return res ;
2da84     0C 4E 05 F1 | 	add	fp, #12
2da88     A7 FA 01 FB | 	rdlong	result1, fp
2da8c     0C 4E 85 F1 | 	sub	fp, #12
2da90     A7 F0 03 F6 | 	mov	ptra, fp
2da94     B2 00 A0 FD | 	call	#popregs_
2da98                 | _fatfs_cc_f_readdir_ret
2da98     2D 00 64 FD | 	ret
2da9c                 | 
2da9c                 | _fatfs_cc_f_stat
2da9c     00 4A 05 F6 | 	mov	COUNT_, #0
2daa0     A8 00 A0 FD | 	call	#pushregs_
2daa4     40 F0 07 F1 | 	add	ptra, #64
2daa8     04 4E 05 F1 | 	add	fp, #4
2daac     A7 12 62 FC | 	wrlong	arg01, fp
2dab0     04 4E 05 F1 | 	add	fp, #4
2dab4     A7 14 62 FC | 	wrlong	arg02, fp
2dab8     04 4E 85 F1 | 	sub	fp, #4
2dabc     A7 12 02 F6 | 	mov	arg01, fp
2dac0     0C 4E 05 F1 | 	add	fp, #12
2dac4     A7 14 02 F6 | 	mov	arg02, fp
2dac8     10 4E 85 F1 | 	sub	fp, #16
2dacc     00 16 06 F6 | 	mov	arg03, #0
2dad0     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
2dad4     0C 4E 05 F1 | 	add	fp, #12
2dad8     A7 FA 61 FC | 	wrlong	result1, fp
2dadc     0C 4E 85 F1 | 	sub	fp, #12
2dae0     00 FA 0D F2 | 	cmp	result1, #0 wz
2dae4     74 00 90 5D |  if_ne	jmp	#LR__4653
2dae8     10 4E 05 F1 | 	add	fp, #16
2daec     A7 12 02 F6 | 	mov	arg01, fp
2daf0     0C 4E 85 F1 | 	sub	fp, #12
2daf4     A7 14 02 FB | 	rdlong	arg02, fp
2daf8     04 4E 85 F1 | 	sub	fp, #4
2dafc     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
2db00     0C 4E 05 F1 | 	add	fp, #12
2db04     A7 FA 61 FC | 	wrlong	result1, fp
2db08     0C 4E 85 F1 | 	sub	fp, #12
2db0c     00 FA 0D F2 | 	cmp	result1, #0 wz
2db10     48 00 90 5D |  if_ne	jmp	#LR__4652
2db14     3B 4E 05 F1 | 	add	fp, #59
2db18     A7 FA C1 FA | 	rdbyte	result1, fp
2db1c     3B 4E 85 F1 | 	sub	fp, #59
2db20     80 FA CD F7 | 	test	result1, #128 wz
2db24     0C 4E 05 51 |  if_ne	add	fp, #12
2db28     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2db2c     0C 4E 85 51 |  if_ne	sub	fp, #12
2db30     28 00 90 5D |  if_ne	jmp	#LR__4651
2db34     08 4E 05 F1 | 	add	fp, #8
2db38     A7 FA 09 FB | 	rdlong	result1, fp wz
2db3c     08 4E 85 F1 | 	sub	fp, #8
2db40     18 00 90 AD |  if_e	jmp	#LR__4650
2db44     10 4E 05 F1 | 	add	fp, #16
2db48     A7 12 02 F6 | 	mov	arg01, fp
2db4c     08 4E 85 F1 | 	sub	fp, #8
2db50     A7 14 02 FB | 	rdlong	arg02, fp
2db54     08 4E 85 F1 | 	sub	fp, #8
2db58     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
2db5c                 | LR__4650
2db5c                 | LR__4651
2db5c                 | LR__4652
2db5c                 | LR__4653
2db5c                 | ' 			}
2db5c                 | ' 		}
2db5c                 | ' 		;
2db5c                 | ' 	}
2db5c                 | ' 
2db5c                 | ' 	return res ;
2db5c     0C 4E 05 F1 | 	add	fp, #12
2db60     A7 FA 01 FB | 	rdlong	result1, fp
2db64     0C 4E 85 F1 | 	sub	fp, #12
2db68     A7 F0 03 F6 | 	mov	ptra, fp
2db6c     B2 00 A0 FD | 	call	#popregs_
2db70                 | _fatfs_cc_f_stat_ret
2db70     2D 00 64 FD | 	ret
2db74                 | 
2db74                 | _fatfs_cc_f_unlink
2db74     00 4A 05 F6 | 	mov	COUNT_, #0
2db78     A8 00 A0 FD | 	call	#pushregs_
2db7c     74 F0 07 F1 | 	add	ptra, #116
2db80     04 4E 05 F1 | 	add	fp, #4
2db84     A7 12 62 FC | 	wrlong	arg01, fp
2db88     68 4E 05 F1 | 	add	fp, #104
2db8c     A7 00 68 FC | 	wrlong	#0, fp
2db90     68 4E 85 F1 | 	sub	fp, #104
2db94     A7 12 02 F6 | 	mov	arg01, fp
2db98     6C 4E 05 F1 | 	add	fp, #108
2db9c     A7 14 02 F6 | 	mov	arg02, fp
2dba0     70 4E 85 F1 | 	sub	fp, #112
2dba4     02 16 06 F6 | 	mov	arg03, #2
2dba8     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
2dbac     08 4E 05 F1 | 	add	fp, #8
2dbb0     A7 FA 61 FC | 	wrlong	result1, fp
2dbb4     08 4E 85 F1 | 	sub	fp, #8
2dbb8     00 FA 0D F2 | 	cmp	result1, #0 wz
2dbbc     E4 01 90 5D |  if_ne	jmp	#LR__4668
2dbc0     70 4E 05 F1 | 	add	fp, #112
2dbc4     A7 16 02 FB | 	rdlong	arg03, fp
2dbc8     64 4E 85 F1 | 	sub	fp, #100
2dbcc     A7 16 62 FC | 	wrlong	arg03, fp
2dbd0     A7 12 02 F6 | 	mov	arg01, fp
2dbd4     08 4E 85 F1 | 	sub	fp, #8
2dbd8     A7 14 02 FB | 	rdlong	arg02, fp
2dbdc     04 4E 85 F1 | 	sub	fp, #4
2dbe0     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
2dbe4     08 4E 05 F1 | 	add	fp, #8
2dbe8     A7 FA 61 FC | 	wrlong	result1, fp
2dbec     00 FA 4D F2 | 	cmps	result1, #0 wz
2dbf0     08 4E 85 F1 | 	sub	fp, #8
2dbf4     AC 01 90 5D |  if_ne	jmp	#LR__4667
2dbf8     37 4E 05 F1 | 	add	fp, #55
2dbfc     A7 FA C1 FA | 	rdbyte	result1, fp
2dc00     37 4E 85 F1 | 	sub	fp, #55
2dc04     80 FA CD F7 | 	test	result1, #128 wz
2dc08     08 4E 05 51 |  if_ne	add	fp, #8
2dc0c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2dc10     08 4E 85 51 |  if_ne	sub	fp, #8
2dc14     1C 00 90 5D |  if_ne	jmp	#LR__4660
2dc18     12 4E 05 F1 | 	add	fp, #18
2dc1c     A7 FA C1 FA | 	rdbyte	result1, fp
2dc20     12 4E 85 F1 | 	sub	fp, #18
2dc24     01 FA CD F7 | 	test	result1, #1 wz
2dc28     08 4E 05 51 |  if_ne	add	fp, #8
2dc2c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2dc30     08 4E 85 51 |  if_ne	sub	fp, #8
2dc34                 | LR__4660
2dc34     08 4E 05 F1 | 	add	fp, #8
2dc38     A7 FA 09 FB | 	rdlong	result1, fp wz
2dc3c     08 4E 85 F1 | 	sub	fp, #8
2dc40     C8 00 90 5D |  if_ne	jmp	#LR__4663
2dc44     70 4E 05 F1 | 	add	fp, #112
2dc48     A7 12 02 FB | 	rdlong	arg01, fp
2dc4c     48 4E 85 F1 | 	sub	fp, #72
2dc50     A7 14 02 FB | 	rdlong	arg02, fp
2dc54     28 4E 85 F1 | 	sub	fp, #40
2dc58     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
2dc5c     6C 4E 05 F1 | 	add	fp, #108
2dc60     A7 FA 61 FC | 	wrlong	result1, fp
2dc64     5A 4E 85 F1 | 	sub	fp, #90
2dc68     A7 FA C1 FA | 	rdbyte	result1, fp
2dc6c     12 4E 85 F1 | 	sub	fp, #18
2dc70     10 FA CD F7 | 	test	result1, #16 wz
2dc74     94 00 90 AD |  if_e	jmp	#LR__4662
2dc78     70 4E 05 F1 | 	add	fp, #112
2dc7c     A7 FA 01 FB | 	rdlong	result1, fp
2dc80     34 4E 85 F1 | 	sub	fp, #52
2dc84     A7 FA 61 FC | 	wrlong	result1, fp
2dc88     30 4E 05 F1 | 	add	fp, #48
2dc8c     A7 16 02 FB | 	rdlong	arg03, fp
2dc90     28 4E 85 F1 | 	sub	fp, #40
2dc94     A7 16 62 FC | 	wrlong	arg03, fp
2dc98     08 4E 85 F1 | 	sub	fp, #8
2dc9c     A7 12 02 F6 | 	mov	arg01, fp
2dca0     3C 4E 85 F1 | 	sub	fp, #60
2dca4     00 14 06 F6 | 	mov	arg02, #0
2dca8     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
2dcac     08 4E 05 F1 | 	add	fp, #8
2dcb0     A7 FA 61 FC | 	wrlong	result1, fp
2dcb4     08 4E 85 F1 | 	sub	fp, #8
2dcb8     00 FA 0D F2 | 	cmp	result1, #0 wz
2dcbc     4C 00 90 5D |  if_ne	jmp	#LR__4661
2dcc0     3C 4E 05 F1 | 	add	fp, #60
2dcc4     A7 12 02 F6 | 	mov	arg01, fp
2dcc8     3C 4E 85 F1 | 	sub	fp, #60
2dccc     00 14 06 F6 | 	mov	arg02, #0
2dcd0     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
2dcd4     08 4E 05 F1 | 	add	fp, #8
2dcd8     A7 FA 61 FC | 	wrlong	result1, fp
2dcdc     00 FA 4D F2 | 	cmps	result1, #0 wz
2dce0     08 4E 85 F1 | 	sub	fp, #8
2dce4     08 4E 05 A1 |  if_e	add	fp, #8
2dce8     A7 0E 68 AC |  if_e	wrlong	#7, fp
2dcec     08 4E 85 A1 |  if_e	sub	fp, #8
2dcf0     08 4E 05 F1 | 	add	fp, #8
2dcf4     A7 FA 01 FB | 	rdlong	result1, fp
2dcf8     08 4E 85 F1 | 	sub	fp, #8
2dcfc     04 FA 0D F2 | 	cmp	result1, #4 wz
2dd00     08 4E 05 A1 |  if_e	add	fp, #8
2dd04     A7 00 68 AC |  if_e	wrlong	#0, fp
2dd08     08 4E 85 A1 |  if_e	sub	fp, #8
2dd0c                 | LR__4661
2dd0c                 | LR__4662
2dd0c                 | LR__4663
2dd0c     08 4E 05 F1 | 	add	fp, #8
2dd10     A7 FA 09 FB | 	rdlong	result1, fp wz
2dd14     08 4E 85 F1 | 	sub	fp, #8
2dd18     88 00 90 5D |  if_ne	jmp	#LR__4666
2dd1c     0C 4E 05 F1 | 	add	fp, #12
2dd20     A7 12 02 F6 | 	mov	arg01, fp
2dd24     0C 4E 85 F1 | 	sub	fp, #12
2dd28     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
2dd2c     08 4E 05 F1 | 	add	fp, #8
2dd30     A7 FA 61 FC | 	wrlong	result1, fp
2dd34     08 4E 85 F1 | 	sub	fp, #8
2dd38     00 FA 0D F2 | 	cmp	result1, #0 wz
2dd3c     38 00 90 5D |  if_ne	jmp	#LR__4664
2dd40     6C 4E 05 F1 | 	add	fp, #108
2dd44     A7 FA 09 FB | 	rdlong	result1, fp wz
2dd48     6C 4E 85 F1 | 	sub	fp, #108
2dd4c     28 00 90 AD |  if_e	jmp	#LR__4664
2dd50     0C 4E 05 F1 | 	add	fp, #12
2dd54     A7 12 02 F6 | 	mov	arg01, fp
2dd58     60 4E 05 F1 | 	add	fp, #96
2dd5c     A7 14 02 FB | 	rdlong	arg02, fp
2dd60     6C 4E 85 F1 | 	sub	fp, #108
2dd64     00 16 06 F6 | 	mov	arg03, #0
2dd68     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
2dd6c     08 4E 05 F1 | 	add	fp, #8
2dd70     A7 FA 61 FC | 	wrlong	result1, fp
2dd74     08 4E 85 F1 | 	sub	fp, #8
2dd78                 | LR__4664
2dd78     08 4E 05 F1 | 	add	fp, #8
2dd7c     A7 FA 09 FB | 	rdlong	result1, fp wz
2dd80     08 4E 85 F1 | 	sub	fp, #8
2dd84     1C 00 90 5D |  if_ne	jmp	#LR__4665
2dd88     70 4E 05 F1 | 	add	fp, #112
2dd8c     A7 12 02 FB | 	rdlong	arg01, fp
2dd90     70 4E 85 F1 | 	sub	fp, #112
2dd94     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
2dd98     08 4E 05 F1 | 	add	fp, #8
2dd9c     A7 FA 61 FC | 	wrlong	result1, fp
2dda0     08 4E 85 F1 | 	sub	fp, #8
2dda4                 | LR__4665
2dda4                 | LR__4666
2dda4                 | LR__4667
2dda4                 | LR__4668
2dda4                 | ' 			}
2dda4                 | ' 		}
2dda4                 | ' 		;
2dda4                 | ' 	}
2dda4                 | ' 
2dda4                 | ' 	return res ;
2dda4     08 4E 05 F1 | 	add	fp, #8
2dda8     A7 FA 01 FB | 	rdlong	result1, fp
2ddac     08 4E 85 F1 | 	sub	fp, #8
2ddb0     A7 F0 03 F6 | 	mov	ptra, fp
2ddb4     B2 00 A0 FD | 	call	#popregs_
2ddb8                 | _fatfs_cc_f_unlink_ret
2ddb8     2D 00 64 FD | 	ret
2ddbc                 | 
2ddbc                 | _fatfs_cc_f_mkdir
2ddbc     00 4A 05 F6 | 	mov	COUNT_, #0
2ddc0     A8 00 A0 FD | 	call	#pushregs_
2ddc4     5C F0 07 F1 | 	add	ptra, #92
2ddc8     04 4E 05 F1 | 	add	fp, #4
2ddcc     A7 12 62 FC | 	wrlong	arg01, fp
2ddd0     A7 12 02 F6 | 	mov	arg01, fp
2ddd4     48 4E 05 F1 | 	add	fp, #72
2ddd8     A7 14 02 F6 | 	mov	arg02, fp
2dddc     4C 4E 85 F1 | 	sub	fp, #76
2dde0     02 16 06 F6 | 	mov	arg03, #2
2dde4     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
2dde8     08 4E 05 F1 | 	add	fp, #8
2ddec     A7 FA 61 FC | 	wrlong	result1, fp
2ddf0     08 4E 85 F1 | 	sub	fp, #8
2ddf4     00 FA 0D F2 | 	cmp	result1, #0 wz
2ddf8     C4 02 90 5D |  if_ne	jmp	#LR__4675
2ddfc     4C 4E 05 F1 | 	add	fp, #76
2de00     A7 16 02 FB | 	rdlong	arg03, fp
2de04     40 4E 85 F1 | 	sub	fp, #64
2de08     A7 16 62 FC | 	wrlong	arg03, fp
2de0c     A7 12 02 F6 | 	mov	arg01, fp
2de10     08 4E 85 F1 | 	sub	fp, #8
2de14     A7 14 02 FB | 	rdlong	arg02, fp
2de18     04 4E 85 F1 | 	sub	fp, #4
2de1c     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2de20     08 4E 05 F1 | 	add	fp, #8
2de24     A7 FA 61 FC | 	wrlong	result1, fp
2de28     00 FA 4D F2 | 	cmps	result1, #0 wz
2de2c     08 4E 85 F1 | 	sub	fp, #8
2de30     08 4E 05 A1 |  if_e	add	fp, #8
2de34     A7 10 68 AC |  if_e	wrlong	#8, fp
2de38     08 4E 85 A1 |  if_e	sub	fp, #8
2de3c     08 4E 05 F1 | 	add	fp, #8
2de40     A7 FA 01 FB | 	rdlong	result1, fp
2de44     08 4E 85 F1 | 	sub	fp, #8
2de48     04 FA 0D F2 | 	cmp	result1, #4 wz
2de4c     70 02 90 5D |  if_ne	jmp	#LR__4674
2de50     4C 4E 05 F1 | 	add	fp, #76
2de54     A7 16 02 FB | 	rdlong	arg03, fp
2de58     10 4E 85 F1 | 	sub	fp, #16
2de5c     A7 16 62 FC | 	wrlong	arg03, fp
2de60     A7 12 02 F6 | 	mov	arg01, fp
2de64     3C 4E 85 F1 | 	sub	fp, #60
2de68     00 14 06 F6 | 	mov	arg02, #0
2de6c     04 AC BF FD | 	call	#_fatfs_cc_create_chain
2de70     50 4E 05 F1 | 	add	fp, #80
2de74     A7 FA 61 FC | 	wrlong	result1, fp
2de78     48 4E 85 F1 | 	sub	fp, #72
2de7c     A7 00 68 FC | 	wrlong	#0, fp
2de80     48 4E 05 F1 | 	add	fp, #72
2de84     A7 FA 09 FB | 	rdlong	result1, fp wz
2de88     50 4E 85 F1 | 	sub	fp, #80
2de8c     08 4E 05 A1 |  if_e	add	fp, #8
2de90     A7 0E 68 AC |  if_e	wrlong	#7, fp
2de94     08 4E 85 A1 |  if_e	sub	fp, #8
2de98     50 4E 05 F1 | 	add	fp, #80
2de9c     A7 FA 01 FB | 	rdlong	result1, fp
2dea0     50 4E 85 F1 | 	sub	fp, #80
2dea4     01 FA 0D F2 | 	cmp	result1, #1 wz
2dea8     08 4E 05 A1 |  if_e	add	fp, #8
2deac     A7 04 68 AC |  if_e	wrlong	#2, fp
2deb0     08 4E 85 A1 |  if_e	sub	fp, #8
2deb4     50 4E 05 F1 | 	add	fp, #80
2deb8     A7 16 02 FB | 	rdlong	arg03, fp
2debc     50 4E 85 F1 | 	sub	fp, #80
2dec0     FF FF 7F FF 
2dec4     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2dec8     08 4E 05 A1 |  if_e	add	fp, #8
2decc     A7 02 68 AC |  if_e	wrlong	#1, fp
2ded0     08 4E 85 A1 |  if_e	sub	fp, #8
2ded4     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
2ded8     58 4E 05 F1 | 	add	fp, #88
2dedc     A7 FA 61 FC | 	wrlong	result1, fp
2dee0     50 4E 85 F1 | 	sub	fp, #80
2dee4     A7 FA 09 FB | 	rdlong	result1, fp wz
2dee8     08 4E 85 F1 | 	sub	fp, #8
2deec     1C 01 90 5D |  if_ne	jmp	#LR__4671
2def0     4C 4E 05 F1 | 	add	fp, #76
2def4     A7 12 02 FB | 	rdlong	arg01, fp
2def8     04 4E 05 F1 | 	add	fp, #4
2defc     A7 14 02 FB | 	rdlong	arg02, fp
2df00     50 4E 85 F1 | 	sub	fp, #80
2df04     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
2df08     08 4E 05 F1 | 	add	fp, #8
2df0c     A7 FA 61 FC | 	wrlong	result1, fp
2df10     00 FA 4D F2 | 	cmps	result1, #0 wz
2df14     08 4E 85 F1 | 	sub	fp, #8
2df18     F0 00 90 5D |  if_ne	jmp	#LR__4670
2df1c     4C 4E 05 F1 | 	add	fp, #76
2df20     A7 12 02 FB | 	rdlong	arg01, fp
2df24     4C 4E 85 F1 | 	sub	fp, #76
2df28     34 12 06 F1 | 	add	arg01, #52
2df2c     20 14 06 F6 | 	mov	arg02, #32
2df30     0B 16 06 F6 | 	mov	arg03, #11
2df34     98 00 A0 FD | 	call	#\builtin_bytefill_
2df38     4C 4E 05 F1 | 	add	fp, #76
2df3c     A7 FA 01 FB | 	rdlong	result1, fp
2df40     34 FA 05 F1 | 	add	result1, #52
2df44     FD 5C 48 FC | 	wrbyte	#46, result1
2df48     A7 16 02 FB | 	rdlong	arg03, fp
2df4c     3F 16 06 F1 | 	add	arg03, #63
2df50     0B 21 48 FC | 	wrbyte	#16, arg03
2df54     A7 12 02 FB | 	rdlong	arg01, fp
2df58     4A 12 06 F1 | 	add	arg01, #74
2df5c     0C 4E 05 F1 | 	add	fp, #12
2df60     A7 14 02 FB | 	rdlong	arg02, fp
2df64     09 15 62 FC | 	wrlong	arg02, arg01
2df68     0C 4E 85 F1 | 	sub	fp, #12
2df6c     A7 14 02 FB | 	rdlong	arg02, fp
2df70     0A 13 02 F6 | 	mov	arg01, arg02
2df74     34 14 06 F1 | 	add	arg02, #52
2df78     04 4E 05 F1 | 	add	fp, #4
2df7c     A7 16 02 FB | 	rdlong	arg03, fp
2df80     50 4E 85 F1 | 	sub	fp, #80
2df84     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
2df88     4C 4E 05 F1 | 	add	fp, #76
2df8c     A7 14 02 FB | 	rdlong	arg02, fp
2df90     0A 13 02 F6 | 	mov	arg01, arg02
2df94     54 12 06 F1 | 	add	arg01, #84
2df98     4C 4E 85 F1 | 	sub	fp, #76
2df9c     34 14 06 F1 | 	add	arg02, #52
2dfa0     20 16 06 F6 | 	mov	arg03, #32
2dfa4     60 2A BF FD | 	call	#__system____builtin_memmove
2dfa8     4C 4E 05 F1 | 	add	fp, #76
2dfac     A7 16 02 FB | 	rdlong	arg03, fp
2dfb0     55 16 06 F1 | 	add	arg03, #85
2dfb4     0B 5D 48 FC | 	wrbyte	#46, arg03
2dfb8     38 4E 85 F1 | 	sub	fp, #56
2dfbc     A7 16 02 FB | 	rdlong	arg03, fp
2dfc0     40 4E 05 F1 | 	add	fp, #64
2dfc4     A7 16 62 FC | 	wrlong	arg03, fp
2dfc8     08 4E 85 F1 | 	sub	fp, #8
2dfcc     A7 14 02 FB | 	rdlong	arg02, fp
2dfd0     0A 13 02 F6 | 	mov	arg01, arg02
2dfd4     54 14 06 F1 | 	add	arg02, #84
2dfd8     4C 4E 85 F1 | 	sub	fp, #76
2dfdc     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
2dfe0     4C 4E 05 F1 | 	add	fp, #76
2dfe4     A7 16 02 FB | 	rdlong	arg03, fp
2dfe8     03 16 06 F1 | 	add	arg03, #3
2dfec     0B 03 48 FC | 	wrbyte	#1, arg03
2dff0     40 4E 85 F1 | 	sub	fp, #64
2dff4     A7 12 02 F6 | 	mov	arg01, fp
2dff8     0C 4E 85 F1 | 	sub	fp, #12
2dffc     44 BA BF FD | 	call	#_fatfs_cc_dir_register
2e000     08 4E 05 F1 | 	add	fp, #8
2e004     A7 FA 61 FC | 	wrlong	result1, fp
2e008     08 4E 85 F1 | 	sub	fp, #8
2e00c                 | LR__4670
2e00c                 | LR__4671
2e00c     08 4E 05 F1 | 	add	fp, #8
2e010     A7 FA 09 FB | 	rdlong	result1, fp wz
2e014     08 4E 85 F1 | 	sub	fp, #8
2e018     88 00 90 5D |  if_ne	jmp	#LR__4672
2e01c     28 4E 05 F1 | 	add	fp, #40
2e020     A7 12 02 FB | 	rdlong	arg01, fp
2e024     16 12 06 F1 | 	add	arg01, #22
2e028     30 4E 05 F1 | 	add	fp, #48
2e02c     A7 14 02 FB | 	rdlong	arg02, fp
2e030     09 15 62 FC | 	wrlong	arg02, arg01
2e034     0C 4E 85 F1 | 	sub	fp, #12
2e038     A7 12 02 FB | 	rdlong	arg01, fp
2e03c     24 4E 85 F1 | 	sub	fp, #36
2e040     A7 14 02 FB | 	rdlong	arg02, fp
2e044     28 4E 05 F1 | 	add	fp, #40
2e048     A7 16 02 FB | 	rdlong	arg03, fp
2e04c     50 4E 85 F1 | 	sub	fp, #80
2e050     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
2e054     28 4E 05 F1 | 	add	fp, #40
2e058     A7 FA 01 FB | 	rdlong	result1, fp
2e05c     0B FA 05 F1 | 	add	result1, #11
2e060     FD 20 48 FC | 	wrbyte	#16, result1
2e064     24 4E 05 F1 | 	add	fp, #36
2e068     A7 FA 01 FB | 	rdlong	result1, fp
2e06c     03 FA 05 F1 | 	add	result1, #3
2e070     FD 02 48 FC | 	wrbyte	#1, result1
2e074     44 4E 85 F1 | 	sub	fp, #68
2e078     A7 FA 09 FB | 	rdlong	result1, fp wz
2e07c     08 4E 85 F1 | 	sub	fp, #8
2e080     3C 00 90 5D |  if_ne	jmp	#LR__4673
2e084     4C 4E 05 F1 | 	add	fp, #76
2e088     A7 12 02 FB | 	rdlong	arg01, fp
2e08c     4C 4E 85 F1 | 	sub	fp, #76
2e090     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
2e094     08 4E 05 F1 | 	add	fp, #8
2e098     A7 FA 61 FC | 	wrlong	result1, fp
2e09c     08 4E 85 F1 | 	sub	fp, #8
2e0a0     1C 00 90 FD | 	jmp	#LR__4673
2e0a4                 | LR__4672
2e0a4     3C 4E 05 F1 | 	add	fp, #60
2e0a8     A7 12 02 F6 | 	mov	arg01, fp
2e0ac     14 4E 05 F1 | 	add	fp, #20
2e0b0     A7 14 02 FB | 	rdlong	arg02, fp
2e0b4     50 4E 85 F1 | 	sub	fp, #80
2e0b8     00 16 06 F6 | 	mov	arg03, #0
2e0bc     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2e0c0                 | LR__4673
2e0c0                 | LR__4674
2e0c0                 | LR__4675
2e0c0                 | ' 				remove_chain(&sobj, dcl, 0);
2e0c0                 | ' 			}
2e0c0                 | ' 		}
2e0c0                 | ' 		;
2e0c0                 | ' 	}
2e0c0                 | ' 
2e0c0                 | ' 	return res ;
2e0c0     08 4E 05 F1 | 	add	fp, #8
2e0c4     A7 FA 01 FB | 	rdlong	result1, fp
2e0c8     08 4E 85 F1 | 	sub	fp, #8
2e0cc     A7 F0 03 F6 | 	mov	ptra, fp
2e0d0     B2 00 A0 FD | 	call	#popregs_
2e0d4                 | _fatfs_cc_f_mkdir_ret
2e0d4     2D 00 64 FD | 	ret
2e0d8                 | 
2e0d8                 | _fatfs_cc_f_rename
2e0d8     01 4A 05 F6 | 	mov	COUNT_, #1
2e0dc     A8 00 A0 FD | 	call	#pushregs_
2e0e0     9C F0 07 F1 | 	add	ptra, #156
2e0e4     04 4E 05 F1 | 	add	fp, #4
2e0e8     A7 12 62 FC | 	wrlong	arg01, fp
2e0ec     04 4E 05 F1 | 	add	fp, #4
2e0f0     A7 14 62 FC | 	wrlong	arg02, fp
2e0f4     A7 12 02 F6 | 	mov	arg01, fp
2e0f8     08 4E 85 F1 | 	sub	fp, #8
2e0fc     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2e100     04 4E 05 F1 | 	add	fp, #4
2e104     A7 12 02 F6 | 	mov	arg01, fp
2e108     6C 4E 05 F1 | 	add	fp, #108
2e10c     A7 14 02 F6 | 	mov	arg02, fp
2e110     70 4E 85 F1 | 	sub	fp, #112
2e114     02 16 06 F6 | 	mov	arg03, #2
2e118     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2e11c     0C 4E 05 F1 | 	add	fp, #12
2e120     A7 FA 61 FC | 	wrlong	result1, fp
2e124     0C 4E 85 F1 | 	sub	fp, #12
2e128     00 FA 0D F2 | 	cmp	result1, #0 wz
2e12c     44 03 90 5D |  if_ne	jmp	#LR__4693
2e130     70 4E 05 F1 | 	add	fp, #112
2e134     A7 16 02 FB | 	rdlong	arg03, fp
2e138     60 4E 85 F1 | 	sub	fp, #96
2e13c     A7 16 62 FC | 	wrlong	arg03, fp
2e140     A7 12 02 F6 | 	mov	arg01, fp
2e144     0C 4E 85 F1 | 	sub	fp, #12
2e148     A7 14 02 FB | 	rdlong	arg02, fp
2e14c     04 4E 85 F1 | 	sub	fp, #4
2e150     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
2e154     0C 4E 05 F1 | 	add	fp, #12
2e158     A7 FA 61 FC | 	wrlong	result1, fp
2e15c     00 FA 4D F2 | 	cmps	result1, #0 wz
2e160     0C 4E 85 F1 | 	sub	fp, #12
2e164     1C 00 90 5D |  if_ne	jmp	#LR__4680
2e168     3B 4E 05 F1 | 	add	fp, #59
2e16c     A7 FA C1 FA | 	rdbyte	result1, fp
2e170     3B 4E 85 F1 | 	sub	fp, #59
2e174     A0 FA CD F7 | 	test	result1, #160 wz
2e178     0C 4E 05 51 |  if_ne	add	fp, #12
2e17c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2e180     0C 4E 85 51 |  if_ne	sub	fp, #12
2e184                 | LR__4680
2e184     0C 4E 05 F1 | 	add	fp, #12
2e188     A7 1E 0A FB | 	rdlong	local01, fp wz
2e18c     0C 4E 85 F1 | 	sub	fp, #12
2e190     E0 02 90 5D |  if_ne	jmp	#LR__4692
2e194     74 4E 05 F1 | 	add	fp, #116
2e198     A7 12 02 F6 | 	mov	arg01, fp
2e19c     48 4E 85 F1 | 	sub	fp, #72
2e1a0     A7 14 02 FB | 	rdlong	arg02, fp
2e1a4     2C 4E 85 F1 | 	sub	fp, #44
2e1a8     20 16 06 F6 | 	mov	arg03, #32
2e1ac     58 28 BF FD | 	call	#__system____builtin_memmove
2e1b0     40 4E 05 F1 | 	add	fp, #64
2e1b4     A7 12 02 F6 | 	mov	arg01, fp
2e1b8     30 4E 85 F1 | 	sub	fp, #48
2e1bc     A7 14 02 F6 | 	mov	arg02, fp
2e1c0     10 4E 85 F1 | 	sub	fp, #16
2e1c4     30 16 06 F6 | 	mov	arg03, #48
2e1c8     3C 28 BF FD | 	call	#__system____builtin_memmove
2e1cc     40 4E 05 F1 | 	add	fp, #64
2e1d0     A7 12 02 F6 | 	mov	arg01, fp
2e1d4     38 4E 85 F1 | 	sub	fp, #56
2e1d8     A7 14 02 FB | 	rdlong	arg02, fp
2e1dc     08 4E 85 F1 | 	sub	fp, #8
2e1e0     34 CA BF FD | 	call	#_fatfs_cc_follow_path
2e1e4     0C 4E 05 F1 | 	add	fp, #12
2e1e8     A7 FA 61 FC | 	wrlong	result1, fp
2e1ec     0C 4E 85 F1 | 	sub	fp, #12
2e1f0     00 FA 0D F2 | 	cmp	result1, #0 wz
2e1f4     4C 00 90 5D |  if_ne	jmp	#LR__4683
2e1f8     48 4E 05 F1 | 	add	fp, #72
2e1fc     A7 FA 01 FB | 	rdlong	result1, fp
2e200     30 4E 85 F1 | 	sub	fp, #48
2e204     A7 16 02 FB | 	rdlong	arg03, fp
2e208     18 4E 85 F1 | 	sub	fp, #24
2e20c     0B FB 09 F2 | 	cmp	result1, arg03 wz
2e210     20 00 90 5D |  if_ne	jmp	#LR__4681
2e214     50 4E 05 F1 | 	add	fp, #80
2e218     A7 FA 01 FB | 	rdlong	result1, fp
2e21c     30 4E 85 F1 | 	sub	fp, #48
2e220     A7 16 02 FB | 	rdlong	arg03, fp
2e224     20 4E 85 F1 | 	sub	fp, #32
2e228     0B FB 09 F2 | 	cmp	result1, arg03 wz
2e22c     04 1E 06 A6 |  if_e	mov	local01, #4
2e230     04 00 90 AD |  if_e	jmp	#LR__4682
2e234                 | LR__4681
2e234     08 1E 06 F6 | 	mov	local01, #8
2e238                 | LR__4682
2e238     0C 4E 05 F1 | 	add	fp, #12
2e23c     A7 1E 62 FC | 	wrlong	local01, fp
2e240     0C 4E 85 F1 | 	sub	fp, #12
2e244                 | LR__4683
2e244     0C 4E 05 F1 | 	add	fp, #12
2e248     A7 1E 02 FB | 	rdlong	local01, fp
2e24c     0C 4E 85 F1 | 	sub	fp, #12
2e250     04 1E 0E F2 | 	cmp	local01, #4 wz
2e254     CC 01 90 5D |  if_ne	jmp	#LR__4689
2e258     40 4E 05 F1 | 	add	fp, #64
2e25c     A7 12 02 F6 | 	mov	arg01, fp
2e260     40 4E 85 F1 | 	sub	fp, #64
2e264     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
2e268     0C 4E 05 F1 | 	add	fp, #12
2e26c     A7 FA 61 FC | 	wrlong	result1, fp
2e270     0C 4E 85 F1 | 	sub	fp, #12
2e274     00 FA 0D F2 | 	cmp	result1, #0 wz
2e278     A8 01 90 5D |  if_ne	jmp	#LR__4688
2e27c     5C 4E 05 F1 | 	add	fp, #92
2e280     A7 12 02 FB | 	rdlong	arg01, fp
2e284     38 4E 05 F1 | 	add	fp, #56
2e288     A7 12 62 FC | 	wrlong	arg01, fp
2e28c     0D 12 06 F1 | 	add	arg01, #13
2e290     20 4E 85 F1 | 	sub	fp, #32
2e294     A7 14 02 F6 | 	mov	arg02, fp
2e298     74 4E 85 F1 | 	sub	fp, #116
2e29c     0D 14 06 F1 | 	add	arg02, #13
2e2a0     13 16 06 F6 | 	mov	arg03, #19
2e2a4     60 27 BF FD | 	call	#__system____builtin_memmove
2e2a8     94 4E 05 F1 | 	add	fp, #148
2e2ac     A7 1E 02 FB | 	rdlong	local01, fp
2e2b0     15 4E 85 F1 | 	sub	fp, #21
2e2b4     A7 FA C1 FA | 	rdbyte	result1, fp
2e2b8     0B 1E 06 F1 | 	add	local01, #11
2e2bc     0F FB 41 FC | 	wrbyte	result1, local01
2e2c0     15 4E 05 F1 | 	add	fp, #21
2e2c4     A7 1E 02 FB | 	rdlong	local01, fp
2e2c8     94 4E 85 F1 | 	sub	fp, #148
2e2cc     0B 1E 06 F1 | 	add	local01, #11
2e2d0     0F 1F C2 FA | 	rdbyte	local01, local01
2e2d4     10 1E CE F7 | 	test	local01, #16 wz
2e2d8     24 00 90 5D |  if_ne	jmp	#LR__4684
2e2dc     94 4E 05 F1 | 	add	fp, #148
2e2e0     A7 FA 01 FB | 	rdlong	result1, fp
2e2e4     FD 1E 02 F6 | 	mov	local01, result1
2e2e8     94 4E 85 F1 | 	sub	fp, #148
2e2ec     0B FA 05 F1 | 	add	result1, #11
2e2f0     FD FA C1 FA | 	rdbyte	result1, result1
2e2f4     20 FA 45 F5 | 	or	result1, #32
2e2f8     0B 1E 06 F1 | 	add	local01, #11
2e2fc     0F FB 41 FC | 	wrbyte	result1, local01
2e300                 | LR__4684
2e300     70 4E 05 F1 | 	add	fp, #112
2e304     A7 1E 02 FB | 	rdlong	local01, fp
2e308     03 1E 06 F1 | 	add	local01, #3
2e30c     0F 03 48 FC | 	wrbyte	#1, local01
2e310     24 4E 05 F1 | 	add	fp, #36
2e314     A7 1E 02 FB | 	rdlong	local01, fp
2e318     94 4E 85 F1 | 	sub	fp, #148
2e31c     0B 1E 06 F1 | 	add	local01, #11
2e320     0F 1F C2 FA | 	rdbyte	local01, local01
2e324     10 1E CE F7 | 	test	local01, #16 wz
2e328     F8 00 90 AD |  if_e	jmp	#LR__4687
2e32c     18 4E 05 F1 | 	add	fp, #24
2e330     A7 16 02 FB | 	rdlong	arg03, fp
2e334     30 4E 05 F1 | 	add	fp, #48
2e338     A7 1E 02 FB | 	rdlong	local01, fp
2e33c     48 4E 85 F1 | 	sub	fp, #72
2e340     0F 17 0A F2 | 	cmp	arg03, local01 wz
2e344     DC 00 90 AD |  if_e	jmp	#LR__4687
2e348     70 4E 05 F1 | 	add	fp, #112
2e34c     A7 12 02 FB | 	rdlong	arg01, fp
2e350     09 1F 02 F6 | 	mov	local01, arg01
2e354     24 4E 05 F1 | 	add	fp, #36
2e358     A7 14 02 FB | 	rdlong	arg02, fp
2e35c     94 4E 85 F1 | 	sub	fp, #148
2e360     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
2e364     FD 14 02 F6 | 	mov	arg02, result1
2e368     0F 13 02 F6 | 	mov	arg01, local01
2e36c     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
2e370     98 4E 05 F1 | 	add	fp, #152
2e374     A7 FA 61 FC | 	wrlong	result1, fp
2e378     00 FA 4D F2 | 	cmps	result1, #0 wz
2e37c     98 4E 85 F1 | 	sub	fp, #152
2e380     0C 4E 05 A1 |  if_e	add	fp, #12
2e384     A7 04 68 AC |  if_e	wrlong	#2, fp
2e388     0C 4E 85 A1 |  if_e	sub	fp, #12
2e38c     94 00 90 AD |  if_e	jmp	#LR__4686
2e390     70 4E 05 F1 | 	add	fp, #112
2e394     A7 12 02 FB | 	rdlong	arg01, fp
2e398     28 4E 05 F1 | 	add	fp, #40
2e39c     A7 14 02 FB | 	rdlong	arg02, fp
2e3a0     98 4E 85 F1 | 	sub	fp, #152
2e3a4     4C A0 BF FD | 	call	#_fatfs_cc_move_window
2e3a8     0C 4E 05 F1 | 	add	fp, #12
2e3ac     A7 FA 61 FC | 	wrlong	result1, fp
2e3b0     64 4E 05 F1 | 	add	fp, #100
2e3b4     A7 1E 02 FB | 	rdlong	local01, fp
2e3b8     54 1E 06 F1 | 	add	local01, #84
2e3bc     24 4E 05 F1 | 	add	fp, #36
2e3c0     A7 1E 62 FC | 	wrlong	local01, fp
2e3c4     88 4E 85 F1 | 	sub	fp, #136
2e3c8     A7 1E 0A FB | 	rdlong	local01, fp wz
2e3cc     0C 4E 85 F1 | 	sub	fp, #12
2e3d0     50 00 90 5D |  if_ne	jmp	#LR__4685
2e3d4     94 4E 05 F1 | 	add	fp, #148
2e3d8     A7 1E 02 FB | 	rdlong	local01, fp
2e3dc     94 4E 85 F1 | 	sub	fp, #148
2e3e0     01 1E 06 F1 | 	add	local01, #1
2e3e4     0F 1F C2 FA | 	rdbyte	local01, local01
2e3e8     2E 1E 0E F2 | 	cmp	local01, #46 wz
2e3ec     34 00 90 5D |  if_ne	jmp	#LR__4685
2e3f0     70 4E 05 F1 | 	add	fp, #112
2e3f4     A7 12 02 FB | 	rdlong	arg01, fp
2e3f8     24 4E 05 F1 | 	add	fp, #36
2e3fc     A7 14 02 FB | 	rdlong	arg02, fp
2e400     4C 4E 85 F1 | 	sub	fp, #76
2e404     A7 16 02 FB | 	rdlong	arg03, fp
2e408     48 4E 85 F1 | 	sub	fp, #72
2e40c     50 AD BF FD | 	call	#_fatfs_cc_st_clust
2e410     70 4E 05 F1 | 	add	fp, #112
2e414     A7 1E 02 FB | 	rdlong	local01, fp
2e418     70 4E 85 F1 | 	sub	fp, #112
2e41c     03 1E 06 F1 | 	add	local01, #3
2e420     0F 03 48 FC | 	wrbyte	#1, local01
2e424                 | LR__4685
2e424                 | LR__4686
2e424                 | LR__4687
2e424                 | LR__4688
2e424                 | LR__4689
2e424     0C 4E 05 F1 | 	add	fp, #12
2e428     A7 1E 0A FB | 	rdlong	local01, fp wz
2e42c     0C 4E 85 F1 | 	sub	fp, #12
2e430     40 00 90 5D |  if_ne	jmp	#LR__4691
2e434     10 4E 05 F1 | 	add	fp, #16
2e438     A7 12 02 F6 | 	mov	arg01, fp
2e43c     10 4E 85 F1 | 	sub	fp, #16
2e440     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
2e444     0C 4E 05 F1 | 	add	fp, #12
2e448     A7 FA 61 FC | 	wrlong	result1, fp
2e44c     0C 4E 85 F1 | 	sub	fp, #12
2e450     00 FA 0D F2 | 	cmp	result1, #0 wz
2e454     1C 00 90 5D |  if_ne	jmp	#LR__4690
2e458     70 4E 05 F1 | 	add	fp, #112
2e45c     A7 12 02 FB | 	rdlong	arg01, fp
2e460     70 4E 85 F1 | 	sub	fp, #112
2e464     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
2e468     0C 4E 05 F1 | 	add	fp, #12
2e46c     A7 FA 61 FC | 	wrlong	result1, fp
2e470     0C 4E 85 F1 | 	sub	fp, #12
2e474                 | LR__4690
2e474                 | LR__4691
2e474                 | LR__4692
2e474                 | LR__4693
2e474                 | ' 					res = sync_fs(fs);
2e474                 | ' 				}
2e474                 | ' 			}
2e474                 | ' 
2e474                 | ' 		}
2e474                 | ' 		;
2e474                 | ' 	}
2e474                 | ' 
2e474                 | ' 	return res ;
2e474     0C 4E 05 F1 | 	add	fp, #12
2e478     A7 FA 01 FB | 	rdlong	result1, fp
2e47c     0C 4E 85 F1 | 	sub	fp, #12
2e480     A7 F0 03 F6 | 	mov	ptra, fp
2e484     B2 00 A0 FD | 	call	#popregs_
2e488                 | _fatfs_cc_f_rename_ret
2e488     2D 00 64 FD | 	ret
2e48c                 | 
2e48c                 | _fatfs_cc_time
2e48c     00 4A 05 F6 | 	mov	COUNT_, #0
2e490     A8 00 A0 FD | 	call	#pushregs_
2e494     14 F0 07 F1 | 	add	ptra, #20
2e498     04 4E 05 F1 | 	add	fp, #4
2e49c     A7 12 62 FC | 	wrlong	arg01, fp
2e4a0     04 4E 05 F1 | 	add	fp, #4
2e4a4     A7 12 02 F6 | 	mov	arg01, fp
2e4a8     08 4E 85 F1 | 	sub	fp, #8
2e4ac     00 14 06 F6 | 	mov	arg02, #0
2e4b0     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
2e4b4     08 4E 05 F1 | 	add	fp, #8
2e4b8     A7 FA 01 FB | 	rdlong	result1, fp
2e4bc     08 4E 05 F1 | 	add	fp, #8
2e4c0     A7 FA 61 FC | 	wrlong	result1, fp
2e4c4     0C 4E 85 F1 | 	sub	fp, #12
2e4c8     A7 FA 09 FB | 	rdlong	result1, fp wz
2e4cc     04 4E 85 F1 | 	sub	fp, #4
2e4d0     18 00 90 AD |  if_e	jmp	#LR__4700
2e4d4     04 4E 05 F1 | 	add	fp, #4
2e4d8     A7 FA 01 FB | 	rdlong	result1, fp
2e4dc     0C 4E 05 F1 | 	add	fp, #12
2e4e0     A7 14 02 FB | 	rdlong	arg02, fp
2e4e4     10 4E 85 F1 | 	sub	fp, #16
2e4e8     FD 14 62 FC | 	wrlong	arg02, result1
2e4ec                 | LR__4700
2e4ec                 | '         *tp = now;
2e4ec                 | '     return now;
2e4ec     10 4E 05 F1 | 	add	fp, #16
2e4f0     A7 FA 01 FB | 	rdlong	result1, fp
2e4f4     10 4E 85 F1 | 	sub	fp, #16
2e4f8     A7 F0 03 F6 | 	mov	ptra, fp
2e4fc     B2 00 A0 FD | 	call	#popregs_
2e500                 | _fatfs_cc_time_ret
2e500     2D 00 64 FD | 	ret
2e504                 | 
2e504                 | _fatfs_cc_mktime
2e504     06 4A 05 F6 | 	mov	COUNT_, #6
2e508     A8 00 A0 FD | 	call	#pushregs_
2e50c     09 1F 02 F6 | 	mov	local01, arg01
2e510     14 1E 06 F1 | 	add	local01, #20
2e514     0F 13 02 FB | 	rdlong	arg01, local01
2e518     14 1E 86 F1 | 	sub	local01, #20
2e51c     46 12 56 F2 | 	cmps	arg01, #70 wc
2e520                 | '                 return (time_t) -1;
2e520     01 FA 65 C6 |  if_b	neg	result1, #1
2e524     7C 01 90 CD |  if_b	jmp	#LR__4714
2e528     03 00 00 FF 
2e52c     6C 21 06 F6 | 	mov	local02, ##1900
2e530     14 1E 06 F1 | 	add	local01, #20
2e534     0F FB 01 FB | 	rdlong	result1, local01
2e538     FD 20 02 F1 | 	add	local02, result1
2e53c     08 1E 86 F1 | 	sub	local01, #8
2e540     0F 23 02 FB | 	rdlong	local03, local01
2e544     01 22 86 F1 | 	sub	local03, #1
2e548     04 1E 06 F1 | 	add	local01, #4
2e54c     0F 13 02 FB | 	rdlong	arg01, local01
2e550     10 1E 86 F1 | 	sub	local01, #16
2e554     02 12 66 F0 | 	shl	arg01, #2
2e558     02 00 00 FF 
2e55c     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
2e560     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2e564     09 FB 01 FB | 	rdlong	result1, arg01
2e568     FD 22 02 F1 | 	add	local03, result1
2e56c     10 13 02 F6 | 	mov	arg01, local02
2e570     02 00 00 FF 
2e574     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
2e578     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e57c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e580     1C 00 90 AD |  if_e	jmp	#LR__4710
2e584     00 24 06 F6 | 	mov	local04, #0
2e588     10 1E 06 F1 | 	add	local01, #16
2e58c     0F FB 01 FB | 	rdlong	result1, local01
2e590     10 1E 86 F1 | 	sub	local01, #16
2e594     02 FA 55 F2 | 	cmps	result1, #2 wc
2e598     01 24 06 36 |  if_ae	mov	local04, #1
2e59c     04 00 90 FD | 	jmp	#LR__4711
2e5a0                 | LR__4710
2e5a0     00 24 06 F6 | 	mov	local04, #0
2e5a4                 | LR__4711
2e5a4     04 1E 06 F1 | 	add	local01, #4
2e5a8     0F FB 01 FB | 	rdlong	result1, local01
2e5ac     04 1E 86 F1 | 	sub	local01, #4
2e5b0     0F 27 02 FB | 	rdlong	local05, local01
2e5b4     08 1E 06 F1 | 	add	local01, #8
2e5b8     0F 13 02 FB | 	rdlong	arg01, local01
2e5bc     07 00 00 FF 
2e5c0     10 12 06 FD | 	qmul	arg01, ##3600
2e5c4     12 23 02 F1 | 	add	local03, local04
2e5c8     FD 24 02 F6 | 	mov	local04, result1
2e5cc     04 24 66 F0 | 	shl	local04, #4
2e5d0     FD 24 82 F1 | 	sub	local04, result1
2e5d4     02 24 66 F0 | 	shl	local04, #2
2e5d8     12 27 02 F1 | 	add	local05, local04
2e5dc     08 1E 86 F1 | 	sub	local01, #8
2e5e0     18 24 62 FD | 	getqx	local04
2e5e4     A8 00 00 FF 
2e5e8     80 23 06 FD | 	qmul	local03, ##86400
2e5ec     12 27 02 F1 | 	add	local05, local04
2e5f0     10 23 02 F6 | 	mov	local03, local02
2e5f4     03 00 00 FF 
2e5f8     B2 23 86 F1 | 	sub	local03, ##1970
2e5fc     18 24 62 FD | 	getqx	local04
2e600     99 F0 00 FF 
2e604     80 23 06 FD | 	qmul	local03, ##31536000
2e608     12 27 02 F1 | 	add	local05, local04
2e60c     10 23 02 F6 | 	mov	local03, local02
2e610     03 00 00 FF 
2e614     B1 23 86 F1 | 	sub	local03, ##1969
2e618     11 29 52 F6 | 	abs	local06, local03 wc
2e61c     02 28 46 F0 | 	shr	local06, #2
2e620     14 29 82 F6 | 	negc	local06, local06
2e624     03 00 00 FF 
2e628     D1 21 56 F2 | 	cmps	local02, ##2001 wc
2e62c     18 24 62 FD | 	getqx	local04
2e630     12 27 02 F1 | 	add	local05, local04
2e634     18 00 90 CD |  if_b	jmp	#LR__4712
2e638     03 00 00 FF 
2e63c     D0 21 86 F1 | 	sub	local02, ##2000
2e640     10 25 52 F6 | 	abs	local04, local02 wc
2e644     64 24 16 FD | 	qdiv	local04, #100
2e648     18 24 62 FD | 	getqx	local04
2e64c     12 29 A2 F3 | 	sumnc	local06, local04
2e650                 | LR__4712
2e650     A8 00 00 FF 
2e654     80 29 06 FD | 	qmul	local06, ##86400
2e658     18 28 62 FD | 	getqx	local06
2e65c     14 27 02 F1 | 	add	local05, local06
2e660     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2e664     02 00 00 FF 
2e668     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2e66c     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2e670     14 27 02 F1 | 	add	local05, local06
2e674     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2e678     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2e67c     02 00 00 FF 
2e680     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2e684     01 22 0E F2 | 	cmp	local03, #1 wz
2e688     14 00 90 5D |  if_ne	jmp	#LR__4713
2e68c     0F 13 02 F6 | 	mov	arg01, local01
2e690     DC 19 B0 FD | 	call	#_fatfs_cc___indst
2e694     00 FA 0D F2 | 	cmp	result1, #0 wz
2e698     07 00 00 5F 
2e69c     10 26 86 51 |  if_ne	sub	local05, ##3600
2e6a0                 | LR__4713
2e6a0                 | '                 s -=  (3600L) ;
2e6a0                 | ' 
2e6a0                 | '         return s;
2e6a0     13 FB 01 F6 | 	mov	result1, local05
2e6a4                 | LR__4714
2e6a4     A7 F0 03 F6 | 	mov	ptra, fp
2e6a8     B2 00 A0 FD | 	call	#popregs_
2e6ac                 | _fatfs_cc_mktime_ret
2e6ac     2D 00 64 FD | 	ret
2e6b0                 | 
2e6b0                 | _fatfs_cc__gmtime_r
2e6b0     03 4A 05 F6 | 	mov	COUNT_, #3
2e6b4     A8 00 A0 FD | 	call	#pushregs_
2e6b8     09 1F 02 FB | 	rdlong	local01, arg01
2e6bc     A8 00 00 FF 
2e6c0     80 1F 16 FD | 	qdiv	local01, ##86400
2e6c4     18 FA 61 FD | 	getqx	result1
2e6c8     04 FA 05 F1 | 	add	result1, #4
2e6cc     07 FA 15 FD | 	qdiv	result1, #7
2e6d0     18 14 06 F1 | 	add	arg02, #24
2e6d4     D1 7F 27 FF 
2e6d8     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
2e6dc     D1 7F 27 3F 
2e6e0     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
2e6e4     03 00 00 3F 
2e6e8     DC 21 06 36 |  if_ae	mov	local02, ##2012
2e6ec     03 00 00 CF 
2e6f0     B2 21 06 C6 |  if_b	mov	local02, ##1970
2e6f4                 | ' 	  year = 1970;
2e6f4                 | ' 	}
2e6f4                 | ' 
2e6f4                 | ' 	for(;;) {
2e6f4     19 FA 61 FD | 	getqy	result1
2e6f8     0A FB 61 FC | 	wrlong	result1, arg02
2e6fc     18 14 86 F1 | 	sub	arg02, #24
2e700                 | LR__4720
2e700     10 13 02 F6 | 	mov	arg01, local02
2e704     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e708     00 FA 0D F2 | 	cmp	result1, #0 wz
2e70c     42 F1 00 5F 
2e710     00 23 06 56 |  if_ne	mov	local03, ##31622400
2e714     99 F0 00 AF 
2e718     80 23 06 A6 |  if_e	mov	local03, ##31536000
2e71c     11 1F 12 F2 | 	cmp	local01, local03 wc
2e720                 | ' 	    break;
2e720     01 20 06 31 |  if_ae	add	local02, #1
2e724     11 1F 82 31 |  if_ae	sub	local01, local03
2e728     D4 FF 9F 3D |  if_ae	jmp	#LR__4720
2e72c     A8 00 00 FF 
2e730     80 1F 16 FD | 	qdiv	local01, ##86400
2e734     10 23 02 F6 | 	mov	local03, local02
2e738     03 00 00 FF 
2e73c     6C 23 86 F1 | 	sub	local03, ##1900
2e740     14 14 06 F1 | 	add	arg02, #20
2e744     0A 23 62 FC | 	wrlong	local03, arg02
2e748     08 14 06 F1 | 	add	arg02, #8
2e74c     10 13 02 F6 | 	mov	arg01, local02
2e750     18 20 62 FD | 	getqx	local02
2e754     0A 21 62 FC | 	wrlong	local02, arg02
2e758     1C 14 86 F1 | 	sub	arg02, #28
2e75c     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e760     00 FA 0D F2 | 	cmp	result1, #0 wz
2e764     1D 22 06 56 |  if_ne	mov	local03, #29
2e768     1C 22 06 A6 |  if_e	mov	local03, #28
2e76c     02 00 00 FF 
2e770     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2e774     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2e778     02 00 00 FF 
2e77c     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2e780                 | ' 
2e780                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2e780                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2e780     00 12 06 F6 | 	mov	arg01, #0
2e784     97 2A 48 FB | 	callpa	#(@LR__4722-@LR__4721)>>2,fcache_load_ptr_
2e788                 | LR__4721
2e788     09 23 02 F6 | 	mov	local03, arg01
2e78c     02 22 66 F0 | 	shl	local03, #2
2e790     02 00 00 FF 
2e794     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2e798     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2e79c     11 23 02 FB | 	rdlong	local03, local03
2e7a0     11 21 52 F2 | 	cmps	local02, local03 wc
2e7a4     02 00 00 FF 
2e7a8     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2e7ac     2C 00 90 CD |  if_b	jmp	#LR__4723
2e7b0     09 23 02 F6 | 	mov	local03, arg01
2e7b4     02 22 66 F0 | 	shl	local03, #2
2e7b8     02 00 00 FF 
2e7bc     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2e7c0     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2e7c4     11 23 02 FB | 	rdlong	local03, local03
2e7c8     11 21 82 F1 | 	sub	local02, local03
2e7cc     01 12 06 F1 | 	add	arg01, #1
2e7d0     02 00 00 FF 
2e7d4     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2e7d8     AC FF 9F FD | 	jmp	#LR__4721
2e7dc                 | LR__4722
2e7dc                 | LR__4723
2e7dc     A8 00 00 FF 
2e7e0     80 1F 16 FD | 	qdiv	local01, ##86400
2e7e4     10 14 06 F1 | 	add	arg02, #16
2e7e8     0A 13 62 FC | 	wrlong	arg01, arg02
2e7ec     01 20 06 F1 | 	add	local02, #1
2e7f0     04 14 86 F1 | 	sub	arg02, #4
2e7f4     0A 21 62 FC | 	wrlong	local02, arg02
2e7f8     19 1E 62 FD | 	getqy	local01
2e7fc     07 00 00 FF 
2e800     10 1E 16 FD | 	qdiv	local01, ##3600
2e804     18 22 62 FD | 	getqx	local03
2e808     07 00 00 FF 
2e80c     10 1E 16 FD | 	qdiv	local01, ##3600
2e810     04 14 86 F1 | 	sub	arg02, #4
2e814     0A 23 62 FC | 	wrlong	local03, arg02
2e818     19 1E 62 FD | 	getqy	local01
2e81c     3C 1E 16 FD | 	qdiv	local01, #60
2e820     18 22 62 FD | 	getqx	local03
2e824     3C 1E 16 FD | 	qdiv	local01, #60
2e828     04 14 86 F1 | 	sub	arg02, #4
2e82c     0A 23 62 FC | 	wrlong	local03, arg02
2e830     04 14 86 F1 | 	sub	arg02, #4
2e834                 | '         stm->tm_isdst = 0;
2e834                 | ' 
2e834                 | ' ;
2e834                 | '         return stm;
2e834     0A FB 01 F6 | 	mov	result1, arg02
2e838     19 22 62 FD | 	getqy	local03
2e83c     0A 23 62 FC | 	wrlong	local03, arg02
2e840     20 14 06 F1 | 	add	arg02, #32
2e844     0A 01 68 FC | 	wrlong	#0, arg02
2e848     A7 F0 03 F6 | 	mov	ptra, fp
2e84c     B2 00 A0 FD | 	call	#popregs_
2e850                 | _fatfs_cc__gmtime_r_ret
2e850     2D 00 64 FD | 	ret
2e854                 | 
2e854                 | _fatfs_cc__tzset
2e854     81 01 00 FF 
2e858     99 13 06 F6 | 	mov	arg01, ##@LR__5035
2e85c     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2e860     FD 12 02 F6 | 	mov	arg01, result1
2e864     02 00 00 FF 
2e868     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
2e86c     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2e870     02 00 00 FF 
2e874     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2e878     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
2e87c     02 00 00 FF 
2e880     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2e884     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2e888     02 00 00 FF 
2e88c     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2e890                 | _fatfs_cc__tzset_ret
2e890     2D 00 64 FD | 	ret
2e894                 | 
2e894                 | _fatfs_cc_getenv
2e894     06 4A 05 F6 | 	mov	COUNT_, #6
2e898     A8 00 A0 FD | 	call	#pushregs_
2e89c     09 1F 02 F6 | 	mov	local01, arg01
2e8a0     09 21 02 F6 | 	mov	local02, arg01
2e8a4     97 06 48 FB | 	callpa	#(@LR__4731-@LR__4730)>>2,fcache_load_ptr_
2e8a8                 | LR__4730
2e8a8     10 FB C9 FA | 	rdbyte	result1, local02 wz
2e8ac     01 20 06 51 |  if_ne	add	local02, #1
2e8b0     F4 FF 9F 5D |  if_ne	jmp	#LR__4730
2e8b4                 | LR__4731
2e8b4     09 21 82 F1 | 	sub	local02, arg01
2e8b8     10 FB 01 F6 | 	mov	result1, local02
2e8bc     02 00 00 FF 
2e8c0     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2e8c4     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
2e8c8     02 00 00 FF 
2e8cc     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2e8d0                 | '             return 0;
2e8d0     00 FA 05 A6 |  if_e	mov	result1, #0
2e8d4     5C 00 90 AD |  if_e	jmp	#LR__4734
2e8d8                 | ' 
2e8d8                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
2e8d8     02 00 00 FF 
2e8dc     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2e8e0     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2e8e4     02 00 00 FF 
2e8e8     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2e8ec                 | LR__4732
2e8ec     11 25 0A FB | 	rdlong	local04, local03 wz
2e8f0     3C 00 90 AD |  if_e	jmp	#LR__4733
2e8f4     12 13 02 F6 | 	mov	arg01, local04
2e8f8     0F 15 02 F6 | 	mov	arg02, local01
2e8fc     10 17 02 F6 | 	mov	arg03, local02
2e900     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
2e904     00 FA 0D F2 | 	cmp	result1, #0 wz
2e908     10 27 02 A6 |  if_e	mov	local05, local02
2e90c     12 27 02 A1 |  if_e	add	local05, local04
2e910     13 29 C2 AA |  if_e	rdbyte	local06, local05
2e914     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
2e918                 | ' 			return name+len+1;
2e918     10 25 02 A1 |  if_e	add	local04, local02
2e91c     01 24 06 A1 |  if_e	add	local04, #1
2e920     12 FB 01 A6 |  if_e	mov	result1, local04
2e924     0C 00 90 AD |  if_e	jmp	#LR__4734
2e928     04 22 06 F1 | 	add	local03, #4
2e92c     BC FF 9F FD | 	jmp	#LR__4732
2e930                 | LR__4733
2e930                 | ' 	}
2e930                 | ' 	return 0;
2e930     00 FA 05 F6 | 	mov	result1, #0
2e934                 | LR__4734
2e934     A7 F0 03 F6 | 	mov	ptra, fp
2e938     B2 00 A0 FD | 	call	#popregs_
2e93c                 | _fatfs_cc_getenv_ret
2e93c     2D 00 64 FD | 	ret
2e940                 | 
2e940                 | _fatfs_cc__get_fattime
2e940     00 4A 05 F6 | 	mov	COUNT_, #0
2e944     A8 00 A0 FD | 	call	#pushregs_
2e948     34 F0 07 F1 | 	add	ptra, #52
2e94c     00 12 06 F6 | 	mov	arg01, #0
2e950     38 FB BF FD | 	call	#_fatfs_cc_time
2e954     04 4E 05 F1 | 	add	fp, #4
2e958     A7 FA 61 FC | 	wrlong	result1, fp
2e95c     A7 12 02 F6 | 	mov	arg01, fp
2e960     0C 4E 05 F1 | 	add	fp, #12
2e964     A7 14 02 F6 | 	mov	arg02, fp
2e968     10 4E 85 F1 | 	sub	fp, #16
2e96c     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2e970     24 4E 05 F1 | 	add	fp, #36
2e974     A7 14 02 FB | 	rdlong	arg02, fp
2e978     50 14 86 F1 | 	sub	arg02, #80
2e97c     09 14 66 F0 | 	shl	arg02, #9
2e980     04 4E 85 F1 | 	sub	fp, #4
2e984     A7 FA 01 FB | 	rdlong	result1, fp
2e988     01 FA 05 F1 | 	add	result1, #1
2e98c     05 FA 65 F0 | 	shl	result1, #5
2e990     FD 14 42 F5 | 	or	arg02, result1
2e994     04 4E 85 F1 | 	sub	fp, #4
2e998     A7 FA 01 FB | 	rdlong	result1, fp
2e99c     FD 14 42 F5 | 	or	arg02, result1
2e9a0     14 4E 85 F1 | 	sub	fp, #20
2e9a4     A7 14 62 FC | 	wrlong	arg02, fp
2e9a8     10 4E 05 F1 | 	add	fp, #16
2e9ac     A7 14 02 FB | 	rdlong	arg02, fp
2e9b0     0B 14 66 F0 | 	shl	arg02, #11
2e9b4     04 4E 85 F1 | 	sub	fp, #4
2e9b8     A7 FA 01 FB | 	rdlong	result1, fp
2e9bc     05 FA 65 F0 | 	shl	result1, #5
2e9c0     FD 14 42 F5 | 	or	arg02, result1
2e9c4     04 4E 85 F1 | 	sub	fp, #4
2e9c8     A7 FA 01 FB | 	rdlong	result1, fp
2e9cc     FD 14 42 F5 | 	or	arg02, result1
2e9d0     04 4E 85 F1 | 	sub	fp, #4
2e9d4     A7 14 62 FC | 	wrlong	arg02, fp
2e9d8                 | ' 
2e9d8                 | '     now = time(0);
2e9d8                 | '     _gmtime_r (&now, &date);
2e9d8                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
2e9d8                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
2e9d8                 | '     return (ffdate << 16) | fftime;
2e9d8     04 4E 85 F1 | 	sub	fp, #4
2e9dc     A7 FA 01 FB | 	rdlong	result1, fp
2e9e0     10 FA 65 F0 | 	shl	result1, #16
2e9e4     08 4E 85 F1 | 	sub	fp, #8
2e9e8     0A FB 41 F5 | 	or	result1, arg02
2e9ec     A7 F0 03 F6 | 	mov	ptra, fp
2e9f0     B2 00 A0 FD | 	call	#popregs_
2e9f4                 | _fatfs_cc__get_fattime_ret
2e9f4     2D 00 64 FD | 	ret
2e9f8                 | 
2e9f8                 | _fatfs_cc_unixtime_0960
2e9f8     00 4A 05 F6 | 	mov	COUNT_, #0
2e9fc     A8 00 A0 FD | 	call	#pushregs_
2ea00     34 F0 07 F1 | 	add	ptra, #52
2ea04     04 4E 05 F1 | 	add	fp, #4
2ea08     A7 12 62 FC | 	wrlong	arg01, fp
2ea0c     04 4E 05 F1 | 	add	fp, #4
2ea10     A7 14 62 FC | 	wrlong	arg02, fp
2ea14     04 4E 85 F1 | 	sub	fp, #4
2ea18     A7 14 02 FB | 	rdlong	arg02, fp
2ea1c     09 14 46 F0 | 	shr	arg02, #9
2ea20     7F 14 06 F5 | 	and	arg02, #127
2ea24     50 FA 05 F6 | 	mov	result1, #80
2ea28     0A FB 01 F1 | 	add	result1, arg02
2ea2c     20 4E 05 F1 | 	add	fp, #32
2ea30     A7 FA 61 FC | 	wrlong	result1, fp
2ea34     20 4E 85 F1 | 	sub	fp, #32
2ea38     A7 FA 01 FB | 	rdlong	result1, fp
2ea3c     05 FA 45 F0 | 	shr	result1, #5
2ea40     FD FA 41 F8 | 	getnib	result1, result1, #0
2ea44     01 FA 85 F1 | 	sub	result1, #1
2ea48     1C 4E 05 F1 | 	add	fp, #28
2ea4c     A7 FA 61 FC | 	wrlong	result1, fp
2ea50     1C 4E 85 F1 | 	sub	fp, #28
2ea54     A7 FA 01 FB | 	rdlong	result1, fp
2ea58     1F FA 05 F5 | 	and	result1, #31
2ea5c     18 4E 05 F1 | 	add	fp, #24
2ea60     A7 FA 61 FC | 	wrlong	result1, fp
2ea64     14 4E 85 F1 | 	sub	fp, #20
2ea68     A7 FA 01 FB | 	rdlong	result1, fp
2ea6c     0B FA 45 F0 | 	shr	result1, #11
2ea70     1F FA 05 F5 | 	and	result1, #31
2ea74     10 4E 05 F1 | 	add	fp, #16
2ea78     A7 FA 61 FC | 	wrlong	result1, fp
2ea7c     10 4E 85 F1 | 	sub	fp, #16
2ea80     A7 FA 01 FB | 	rdlong	result1, fp
2ea84     05 FA 45 F0 | 	shr	result1, #5
2ea88     3F FA 05 F5 | 	and	result1, #63
2ea8c     0C 4E 05 F1 | 	add	fp, #12
2ea90     A7 FA 61 FC | 	wrlong	result1, fp
2ea94     0C 4E 85 F1 | 	sub	fp, #12
2ea98     A7 14 02 FB | 	rdlong	arg02, fp
2ea9c     1F 14 06 F5 | 	and	arg02, #31
2eaa0     01 14 66 F0 | 	shl	arg02, #1
2eaa4     08 4E 05 F1 | 	add	fp, #8
2eaa8     A7 14 62 FC | 	wrlong	arg02, fp
2eaac     A7 12 02 F6 | 	mov	arg01, fp
2eab0     10 4E 85 F1 | 	sub	fp, #16
2eab4     4C FA BF FD | 	call	#_fatfs_cc_mktime
2eab8     0C 4E 05 F1 | 	add	fp, #12
2eabc     A7 FA 61 FC | 	wrlong	result1, fp
2eac0                 | ' 
2eac0                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2eac0                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2eac0                 | '     date.tm_mday = (dosdate & 0x1f);
2eac0                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2eac0                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2eac0                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2eac0                 | ' 
2eac0                 | '     t = mktime(&date);
2eac0                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2eac0                 | '     return t;
2eac0     0C 4E 85 F1 | 	sub	fp, #12
2eac4     A7 F0 03 F6 | 	mov	ptra, fp
2eac8     B2 00 A0 FD | 	call	#popregs_
2eacc                 | _fatfs_cc_unixtime_0960_ret
2eacc     2D 00 64 FD | 	ret
2ead0                 | 
2ead0                 | _fatfs_cc__set_dos_error_0962
2ead0     09 01 02 F6 | 	mov	_var01, arg01
2ead4                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ead4                 | '     switch (derr) {
2ead4     14 00 26 F3 | 	fle	_var01, #20
2ead8     30 00 62 FD | 	jmprel	_var01
2eadc                 | LR__4740
2eadc     50 00 90 FD | 	jmp	#LR__4741
2eae0     84 00 90 FD | 	jmp	#LR__4755
2eae4     80 00 90 FD | 	jmp	#LR__4756
2eae8     7C 00 90 FD | 	jmp	#LR__4757
2eaec     48 00 90 FD | 	jmp	#LR__4742
2eaf0     44 00 90 FD | 	jmp	#LR__4743
2eaf4     40 00 90 FD | 	jmp	#LR__4744
2eaf8     44 00 90 FD | 	jmp	#LR__4745
2eafc     48 00 90 FD | 	jmp	#LR__4747
2eb00     54 00 90 FD | 	jmp	#LR__4750
2eb04     38 00 90 FD | 	jmp	#LR__4746
2eb08     4C 00 90 FD | 	jmp	#LR__4751
2eb0c     48 00 90 FD | 	jmp	#LR__4752
2eb10     44 00 90 FD | 	jmp	#LR__4753
2eb14     50 00 90 FD | 	jmp	#LR__4758
2eb18     4C 00 90 FD | 	jmp	#LR__4758
2eb1c     48 00 90 FD | 	jmp	#LR__4758
2eb20     2C 00 90 FD | 	jmp	#LR__4748
2eb24     38 00 90 FD | 	jmp	#LR__4754
2eb28     2C 00 90 FD | 	jmp	#LR__4749
2eb2c     38 00 90 FD | 	jmp	#LR__4758
2eb30                 | LR__4741
2eb30     00 02 06 F6 | 	mov	_var02, #0
2eb34                 | '         r = 0;
2eb34                 | '         break;
2eb34     34 00 90 FD | 	jmp	#LR__4759
2eb38                 | LR__4742
2eb38                 | LR__4743
2eb38                 | LR__4744
2eb38     04 02 06 F6 | 	mov	_var02, #4
2eb3c                 | '         r =  4 ;
2eb3c                 | '         break;
2eb3c     2C 00 90 FD | 	jmp	#LR__4759
2eb40                 | LR__4745
2eb40                 | LR__4746
2eb40     06 02 06 F6 | 	mov	_var02, #6
2eb44                 | '         r =  6 ;
2eb44                 | '         break;
2eb44     24 00 90 FD | 	jmp	#LR__4759
2eb48                 | LR__4747
2eb48     09 02 06 F6 | 	mov	_var02, #9
2eb4c                 | '         r =  9 ;
2eb4c                 | '         break;
2eb4c     1C 00 90 FD | 	jmp	#LR__4759
2eb50                 | LR__4748
2eb50     07 02 06 F6 | 	mov	_var02, #7
2eb54                 | '         r =  7 ;
2eb54                 | '         break;
2eb54     14 00 90 FD | 	jmp	#LR__4759
2eb58                 | LR__4749
2eb58                 | LR__4750
2eb58                 | LR__4751
2eb58                 | LR__4752
2eb58                 | LR__4753
2eb58     0A 02 06 F6 | 	mov	_var02, #10
2eb5c                 | '         r =  10 ;
2eb5c                 | '         break;
2eb5c     0C 00 90 FD | 	jmp	#LR__4759
2eb60                 | LR__4754
2eb60     0B 02 06 F6 | 	mov	_var02, #11
2eb64                 | '         r =  11 ;
2eb64                 | '         break;
2eb64     04 00 90 FD | 	jmp	#LR__4759
2eb68                 | LR__4755
2eb68                 | LR__4756
2eb68                 | LR__4757
2eb68                 | LR__4758
2eb68     0C 02 06 F6 | 	mov	_var02, #12
2eb6c                 | '         r =  12 ;
2eb6c                 | '         break;
2eb6c                 | LR__4759
2eb6c                 | '     }
2eb6c                 | '     return _seterror(r);
2eb6c     00 02 4E F2 | 	cmps	_var02, #0 wz
2eb70     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2eb74     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2eb78     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2eb7c     01 FA 65 56 |  if_ne	neg	result1, #1
2eb80     00 FA 05 A6 |  if_e	mov	result1, #0
2eb84                 | _fatfs_cc__set_dos_error_0962_ret
2eb84     2D 00 64 FD | 	ret
2eb88                 | 
2eb88                 | _fatfs_cc_v_creat
2eb88     04 4A 05 F6 | 	mov	COUNT_, #4
2eb8c     A8 00 A0 FD | 	call	#pushregs_
2eb90     09 1F 02 F6 | 	mov	local01, arg01
2eb94     0A 21 02 F6 | 	mov	local02, arg02
2eb98     03 00 00 FF 
2eb9c     3C 12 06 F6 | 	mov	arg01, ##1596
2eba0                 | '     return _gc_alloc(size);
2eba0     10 14 06 F6 | 	mov	arg02, #16
2eba4     28 5E BF FD | 	call	#__system___gc_doalloc
2eba8     FD 22 0A F6 | 	mov	local03, result1 wz
2ebac                 | '       return _seterror( 7 );
2ebac     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ebb0     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2ebb4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ebb8     01 FA 65 A6 |  if_e	neg	result1, #1
2ebbc     58 00 90 AD |  if_e	jmp	#LR__4761
2ebc0     11 13 02 F6 | 	mov	arg01, local03
2ebc4     00 14 06 F6 | 	mov	arg02, #0
2ebc8     03 00 00 FF 
2ebcc     3C 16 06 F6 | 	mov	arg03, ##1596
2ebd0     98 00 A0 FD | 	call	#\builtin_bytefill_
2ebd4     02 00 00 FF 
2ebd8     14 22 06 F1 | 	add	local03, ##1044
2ebdc     11 13 02 F6 | 	mov	arg01, local03
2ebe0     02 00 00 FF 
2ebe4     14 22 86 F1 | 	sub	local03, ##1044
2ebe8     10 15 02 F6 | 	mov	arg02, local02
2ebec     07 16 06 F6 | 	mov	arg03, #7
2ebf0     B4 CC BF FD | 	call	#_fatfs_cc_f_open
2ebf4     FD 24 0A F6 | 	mov	local04, result1 wz
2ebf8     14 00 90 AD |  if_e	jmp	#LR__4760
2ebfc     11 13 02 F6 | 	mov	arg01, local03
2ec00                 | '     return _gc_free(ptr);
2ec00     D8 5E BF FD | 	call	#__system___gc_free
2ec04                 | '     free(f);
2ec04                 | '     return _set_dos_error(r);
2ec04     12 13 02 F6 | 	mov	arg01, local04
2ec08     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ec0c     08 00 90 FD | 	jmp	#LR__4761
2ec10                 | LR__4760
2ec10     0F 23 62 FC | 	wrlong	local03, local01
2ec14                 | '   }
2ec14                 | '   fil->vfsdata = f;
2ec14                 | '   return 0;
2ec14     00 FA 05 F6 | 	mov	result1, #0
2ec18                 | LR__4761
2ec18     A7 F0 03 F6 | 	mov	ptra, fp
2ec1c     B2 00 A0 FD | 	call	#popregs_
2ec20                 | _fatfs_cc_v_creat_ret
2ec20     2D 00 64 FD | 	ret
2ec24                 | 
2ec24                 | _fatfs_cc_v_close
2ec24     02 4A 05 F6 | 	mov	COUNT_, #2
2ec28     A8 00 A0 FD | 	call	#pushregs_
2ec2c     09 1F 02 FB | 	rdlong	local01, arg01
2ec30     02 00 00 FF 
2ec34     14 1E 06 F1 | 	add	local01, ##1044
2ec38     0F 13 02 F6 | 	mov	arg01, local01
2ec3c     02 00 00 FF 
2ec40     14 1E 86 F1 | 	sub	local01, ##1044
2ec44     DC E3 BF FD | 	call	#_fatfs_cc_f_close
2ec48     FD 20 02 F6 | 	mov	local02, result1
2ec4c     0F 13 02 F6 | 	mov	arg01, local01
2ec50                 | '     return _gc_free(ptr);
2ec50     88 5E BF FD | 	call	#__system___gc_free
2ec54                 | '     FAT_FIL *f = fil->vfsdata;
2ec54                 | '     r=f_close(&f->fil);
2ec54                 | '     free(f);
2ec54                 | '     return _set_dos_error(r);
2ec54     10 13 02 F6 | 	mov	arg01, local02
2ec58     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ec5c     A7 F0 03 F6 | 	mov	ptra, fp
2ec60     B2 00 A0 FD | 	call	#popregs_
2ec64                 | _fatfs_cc_v_close_ret
2ec64     2D 00 64 FD | 	ret
2ec68                 | 
2ec68                 | _fatfs_cc_v_opendir
2ec68     04 4A 05 F6 | 	mov	COUNT_, #4
2ec6c     A8 00 A0 FD | 	call	#pushregs_
2ec70     09 1F 02 F6 | 	mov	local01, arg01
2ec74     0A 21 02 F6 | 	mov	local02, arg02
2ec78     30 12 06 F6 | 	mov	arg01, #48
2ec7c                 | '     return _gc_alloc(size);
2ec7c     10 14 06 F6 | 	mov	arg02, #16
2ec80     4C 5D BF FD | 	call	#__system___gc_doalloc
2ec84     FD 22 0A F6 | 	mov	local03, result1 wz
2ec88                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ec88                 | '       return _seterror( 7 );
2ec88     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ec8c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2ec90     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ec94     01 FA 65 A6 |  if_e	neg	result1, #1
2ec98     34 00 90 AD |  if_e	jmp	#LR__4771
2ec9c     10 15 02 F6 | 	mov	arg02, local02
2eca0     11 13 02 F6 | 	mov	arg01, local03
2eca4     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
2eca8     FD 24 0A F6 | 	mov	local04, result1 wz
2ecac     14 00 90 AD |  if_e	jmp	#LR__4770
2ecb0     11 13 02 F6 | 	mov	arg01, local03
2ecb4                 | '     return _gc_free(ptr);
2ecb4     24 5E BF FD | 	call	#__system___gc_free
2ecb8                 | '         free(f);
2ecb8                 | '         return _set_dos_error(r);
2ecb8     12 13 02 F6 | 	mov	arg01, local04
2ecbc     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ecc0     0C 00 90 FD | 	jmp	#LR__4771
2ecc4                 | LR__4770
2ecc4     04 1E 06 F1 | 	add	local01, #4
2ecc8     0F 23 62 FC | 	wrlong	local03, local01
2eccc                 | '     }
2eccc                 | '     dir->vfsdata = f;
2eccc                 | '     return 0;
2eccc     00 FA 05 F6 | 	mov	result1, #0
2ecd0                 | LR__4771
2ecd0     A7 F0 03 F6 | 	mov	ptra, fp
2ecd4     B2 00 A0 FD | 	call	#popregs_
2ecd8                 | _fatfs_cc_v_opendir_ret
2ecd8     2D 00 64 FD | 	ret
2ecdc                 | 
2ecdc                 | _fatfs_cc_v_closedir
2ecdc     02 4A 05 F6 | 	mov	COUNT_, #2
2ece0     A8 00 A0 FD | 	call	#pushregs_
2ece4     04 12 06 F1 | 	add	arg01, #4
2ece8     09 1F 02 FB | 	rdlong	local01, arg01
2ecec     0F 13 02 F6 | 	mov	arg01, local01
2ecf0     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
2ecf4     FD 20 02 F6 | 	mov	local02, result1
2ecf8     0F 13 02 F6 | 	mov	arg01, local01
2ecfc                 | '     return _gc_free(ptr);
2ecfc     DC 5D BF FD | 	call	#__system___gc_free
2ed00     00 20 0E F2 | 	cmp	local02, #0 wz
2ed04     10 13 02 56 |  if_ne	mov	arg01, local02
2ed08     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0962
2ed0c                 | '     return r;
2ed0c     10 FB 01 F6 | 	mov	result1, local02
2ed10     A7 F0 03 F6 | 	mov	ptra, fp
2ed14     B2 00 A0 FD | 	call	#popregs_
2ed18                 | _fatfs_cc_v_closedir_ret
2ed18     2D 00 64 FD | 	ret
2ed1c                 | 
2ed1c                 | _fatfs_cc_v_readdir
2ed1c     01 4A 05 F6 | 	mov	COUNT_, #1
2ed20     A8 00 A0 FD | 	call	#pushregs_
2ed24     2C F1 07 F1 | 	add	ptra, #300
2ed28     04 4E 05 F1 | 	add	fp, #4
2ed2c     A7 12 62 FC | 	wrlong	arg01, fp
2ed30     04 4E 05 F1 | 	add	fp, #4
2ed34     A7 14 62 FC | 	wrlong	arg02, fp
2ed38     04 4E 85 F1 | 	sub	fp, #4
2ed3c     A7 16 02 FB | 	rdlong	arg03, fp
2ed40     04 16 06 F1 | 	add	arg03, #4
2ed44     0B 13 02 FB | 	rdlong	arg01, arg03
2ed48     08 4E 05 F1 | 	add	fp, #8
2ed4c     A7 14 02 F6 | 	mov	arg02, fp
2ed50     0C 4E 85 F1 | 	sub	fp, #12
2ed54     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
2ed58     28 4F 05 F1 | 	add	fp, #296
2ed5c     A7 FA 61 FC | 	wrlong	result1, fp
2ed60     28 4F 85 F1 | 	sub	fp, #296
2ed64     00 FA 0D F2 | 	cmp	result1, #0 wz
2ed68     14 00 90 AD |  if_e	jmp	#LR__4780
2ed6c                 | '         return _set_dos_error(r);
2ed6c     28 4F 05 F1 | 	add	fp, #296
2ed70     A7 12 02 FB | 	rdlong	arg01, fp
2ed74     28 4F 85 F1 | 	sub	fp, #296
2ed78     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ed7c     C4 00 90 FD | 	jmp	#LR__4783
2ed80                 | LR__4780
2ed80     28 4E 05 F1 | 	add	fp, #40
2ed84     A7 16 CA FA | 	rdbyte	arg03, fp wz
2ed88     28 4E 85 F1 | 	sub	fp, #40
2ed8c                 | '         return -1;
2ed8c     01 FA 65 A6 |  if_e	neg	result1, #1
2ed90     B0 00 90 AD |  if_e	jmp	#LR__4783
2ed94     08 4E 05 F1 | 	add	fp, #8
2ed98     A7 12 02 FB | 	rdlong	arg01, fp
2ed9c     20 4E 05 F1 | 	add	fp, #32
2eda0     A7 14 02 F6 | 	mov	arg02, fp
2eda4     28 4E 85 F1 | 	sub	fp, #40
2eda8     3F 16 06 F6 | 	mov	arg03, #63
2edac     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
2edb0     08 4E 05 F1 | 	add	fp, #8
2edb4     A7 16 02 FB | 	rdlong	arg03, fp
2edb8     3F 16 06 F1 | 	add	arg03, #63
2edbc     0B 01 48 FC | 	wrbyte	#0, arg03
2edc0     0C 4E 05 F1 | 	add	fp, #12
2edc4     A7 16 C2 FA | 	rdbyte	arg03, fp
2edc8     14 4E 85 F1 | 	sub	fp, #20
2edcc     10 16 CE F7 | 	test	arg03, #16 wz
2edd0     18 00 90 AD |  if_e	jmp	#LR__4781
2edd4     08 4E 05 F1 | 	add	fp, #8
2edd8     A7 16 02 FB | 	rdlong	arg03, fp
2eddc     08 4E 85 F1 | 	sub	fp, #8
2ede0     50 16 06 F1 | 	add	arg03, #80
2ede4     0B 03 48 FC | 	wrbyte	#1, arg03
2ede8     14 00 90 FD | 	jmp	#LR__4782
2edec                 | LR__4781
2edec     08 4E 05 F1 | 	add	fp, #8
2edf0     A7 16 02 FB | 	rdlong	arg03, fp
2edf4     08 4E 85 F1 | 	sub	fp, #8
2edf8     50 16 06 F1 | 	add	arg03, #80
2edfc     0B 01 48 FC | 	wrbyte	#0, arg03
2ee00                 | LR__4782
2ee00     08 4E 05 F1 | 	add	fp, #8
2ee04     A7 16 02 FB | 	rdlong	arg03, fp
2ee08     04 4E 05 F1 | 	add	fp, #4
2ee0c     A7 14 02 FB | 	rdlong	arg02, fp
2ee10     48 16 06 F1 | 	add	arg03, #72
2ee14     0B 15 62 FC | 	wrlong	arg02, arg03
2ee18     04 4E 85 F1 | 	sub	fp, #4
2ee1c     A7 1E 02 FB | 	rdlong	local01, fp
2ee20     08 4E 05 F1 | 	add	fp, #8
2ee24     A7 12 E2 FA | 	rdword	arg01, fp
2ee28     02 4E 05 F1 | 	add	fp, #2
2ee2c     A7 14 E2 FA | 	rdword	arg02, fp
2ee30     12 4E 85 F1 | 	sub	fp, #18
2ee34     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0960
2ee38     4C 1E 06 F1 | 	add	local01, #76
2ee3c     0F FB 61 FC | 	wrlong	result1, local01
2ee40                 | '         ent->d_type =  (0) ;
2ee40                 | '     }
2ee40                 | '     ent->d_size = finfo.fsize;
2ee40                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2ee40                 | '     return 0;
2ee40     00 FA 05 F6 | 	mov	result1, #0
2ee44                 | LR__4783
2ee44     A7 F0 03 F6 | 	mov	ptra, fp
2ee48     B2 00 A0 FD | 	call	#popregs_
2ee4c                 | _fatfs_cc_v_readdir_ret
2ee4c     2D 00 64 FD | 	ret
2ee50                 | 
2ee50                 | _fatfs_cc_v_stat
2ee50     03 4A 05 F6 | 	mov	COUNT_, #3
2ee54     A8 00 A0 FD | 	call	#pushregs_
2ee58     30 F1 07 F1 | 	add	ptra, #304
2ee5c     04 4E 05 F1 | 	add	fp, #4
2ee60     A7 12 62 FC | 	wrlong	arg01, fp
2ee64     04 4E 05 F1 | 	add	fp, #4
2ee68     A7 14 62 FC | 	wrlong	arg02, fp
2ee6c     08 4E 85 F1 | 	sub	fp, #8
2ee70     0A 13 02 F6 | 	mov	arg01, arg02
2ee74     00 14 06 F6 | 	mov	arg02, #0
2ee78     30 16 06 F6 | 	mov	arg03, #48
2ee7c     98 00 A0 FD | 	call	#\builtin_bytefill_
2ee80     04 4E 05 F1 | 	add	fp, #4
2ee84     A7 FA 01 FB | 	rdlong	result1, fp
2ee88     04 4E 85 F1 | 	sub	fp, #4
2ee8c     FD FA C9 FA | 	rdbyte	result1, result1 wz
2ee90     2C 00 90 AD |  if_e	jmp	#LR__4790
2ee94     04 4E 05 F1 | 	add	fp, #4
2ee98     A7 FA 01 FB | 	rdlong	result1, fp
2ee9c     04 4E 85 F1 | 	sub	fp, #4
2eea0     FD FA C1 FA | 	rdbyte	result1, result1
2eea4     2E FA 0D F2 | 	cmp	result1, #46 wz
2eea8     04 4E 05 A1 |  if_e	add	fp, #4
2eeac     A7 1E 02 AB |  if_e	rdlong	local01, fp
2eeb0     04 4E 85 A1 |  if_e	sub	fp, #4
2eeb4     01 1E 06 A1 |  if_e	add	local01, #1
2eeb8     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2eebc     18 00 90 5D |  if_ne	jmp	#LR__4791
2eec0                 | LR__4790
2eec0     18 4E 05 F1 | 	add	fp, #24
2eec4     A7 20 48 FC | 	wrbyte	#16, fp
2eec8     0C 4E 85 F1 | 	sub	fp, #12
2eecc     A7 00 68 FC | 	wrlong	#0, fp
2eed0     0C 4E 85 F1 | 	sub	fp, #12
2eed4     24 00 90 FD | 	jmp	#LR__4792
2eed8                 | LR__4791
2eed8     04 4E 05 F1 | 	add	fp, #4
2eedc     A7 12 02 FB | 	rdlong	arg01, fp
2eee0     0C 4E 05 F1 | 	add	fp, #12
2eee4     A7 14 02 F6 | 	mov	arg02, fp
2eee8     10 4E 85 F1 | 	sub	fp, #16
2eeec     AC EB BF FD | 	call	#_fatfs_cc_f_stat
2eef0     0C 4E 05 F1 | 	add	fp, #12
2eef4     A7 FA 61 FC | 	wrlong	result1, fp
2eef8     0C 4E 85 F1 | 	sub	fp, #12
2eefc                 | LR__4792
2eefc     0C 4E 05 F1 | 	add	fp, #12
2ef00     A7 20 0A FB | 	rdlong	local02, fp wz
2ef04     0C 4E 85 F1 | 	sub	fp, #12
2ef08     14 00 90 AD |  if_e	jmp	#LR__4793
2ef0c                 | '         return _set_dos_error(r);
2ef0c     0C 4E 05 F1 | 	add	fp, #12
2ef10     A7 12 02 FB | 	rdlong	arg01, fp
2ef14     0C 4E 85 F1 | 	sub	fp, #12
2ef18     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ef1c     14 01 90 FD | 	jmp	#LR__4794
2ef20                 | LR__4793
2ef20     2C 4F 05 F1 | 	add	fp, #300
2ef24     A7 48 6A FC | 	wrlong	#292, fp
2ef28     14 4F 85 F1 | 	sub	fp, #276
2ef2c     A7 22 C2 FA | 	rdbyte	local03, fp
2ef30     18 4E 85 F1 | 	sub	fp, #24
2ef34     01 22 CE F7 | 	test	local03, #1 wz
2ef38     2C 4F 05 A1 |  if_e	add	fp, #300
2ef3c     A7 22 02 AB |  if_e	rdlong	local03, fp
2ef40     92 22 46 A5 |  if_e	or	local03, #146
2ef44     A7 22 62 AC |  if_e	wrlong	local03, fp
2ef48     2C 4F 85 A1 |  if_e	sub	fp, #300
2ef4c     18 4E 05 F1 | 	add	fp, #24
2ef50     A7 22 C2 FA | 	rdbyte	local03, fp
2ef54     18 4E 85 F1 | 	sub	fp, #24
2ef58     10 22 CE F7 | 	test	local03, #16 wz
2ef5c     2C 4F 05 51 |  if_ne	add	fp, #300
2ef60     A7 22 02 5B |  if_ne	rdlong	local03, fp
2ef64     08 00 00 5F 
2ef68     49 22 46 55 |  if_ne	or	local03, ##4169
2ef6c     A7 22 62 5C |  if_ne	wrlong	local03, fp
2ef70     2C 4F 85 51 |  if_ne	sub	fp, #300
2ef74     08 4E 05 F1 | 	add	fp, #8
2ef78     A7 22 02 FB | 	rdlong	local03, fp
2ef7c     24 4F 05 F1 | 	add	fp, #292
2ef80     A7 20 02 FB | 	rdlong	local02, fp
2ef84     08 22 06 F1 | 	add	local03, #8
2ef88     11 21 62 FC | 	wrlong	local02, local03
2ef8c     24 4F 85 F1 | 	sub	fp, #292
2ef90     A7 22 02 FB | 	rdlong	local03, fp
2ef94     0C 22 06 F1 | 	add	local03, #12
2ef98     11 03 68 FC | 	wrlong	#1, local03
2ef9c     A7 22 02 FB | 	rdlong	local03, fp
2efa0     08 4E 05 F1 | 	add	fp, #8
2efa4     A7 20 02 FB | 	rdlong	local02, fp
2efa8     18 22 06 F1 | 	add	local03, #24
2efac     11 21 62 FC | 	wrlong	local02, local03
2efb0     08 4E 85 F1 | 	sub	fp, #8
2efb4     A7 22 02 FB | 	rdlong	local03, fp
2efb8     1C 22 06 F1 | 	add	local03, #28
2efbc     01 00 80 FF 
2efc0     11 01 68 FC | 	wrlong	##512, local03
2efc4     A7 20 02 FB | 	rdlong	local02, fp
2efc8     10 23 02 F6 | 	mov	local03, local02
2efcc     18 20 06 F1 | 	add	local02, #24
2efd0     10 21 02 FB | 	rdlong	local02, local02
2efd4     FF 21 06 F1 | 	add	local02, #511
2efd8     10 21 52 F6 | 	abs	local02, local02 wc
2efdc     09 20 46 F0 | 	shr	local02, #9
2efe0     10 21 82 F6 | 	negc	local02, local02
2efe4     20 22 06 F1 | 	add	local03, #32
2efe8     11 21 62 FC | 	wrlong	local02, local03
2efec     A7 20 02 FB | 	rdlong	local02, fp
2eff0     10 23 02 F6 | 	mov	local03, local02
2eff4     10 1F 02 F6 | 	mov	local01, local02
2eff8     0C 4E 05 F1 | 	add	fp, #12
2effc     A7 12 E2 FA | 	rdword	arg01, fp
2f000     02 4E 05 F1 | 	add	fp, #2
2f004     A7 14 E2 FA | 	rdword	arg02, fp
2f008     16 4E 85 F1 | 	sub	fp, #22
2f00c     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0960
2f010     2C 1E 06 F1 | 	add	local01, #44
2f014     0F FB 61 FC | 	wrlong	result1, local01
2f018     28 20 06 F1 | 	add	local02, #40
2f01c     10 FB 61 FC | 	wrlong	result1, local02
2f020     24 22 06 F1 | 	add	local03, #36
2f024     11 FB 61 FC | 	wrlong	result1, local03
2f028                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
2f028                 | '     }
2f028                 | '     buf->st_mode = mode;
2f028                 | '     buf->st_nlink = 1;
2f028                 | '     buf->st_size = finfo.fsize;
2f028                 | '     buf->st_blksize = 512;
2f028                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
2f028                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
2f028                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f028                 | '     return r;
2f028     0C 4E 05 F1 | 	add	fp, #12
2f02c     A7 FA 01 FB | 	rdlong	result1, fp
2f030     0C 4E 85 F1 | 	sub	fp, #12
2f034                 | LR__4794
2f034     A7 F0 03 F6 | 	mov	ptra, fp
2f038     B2 00 A0 FD | 	call	#popregs_
2f03c                 | _fatfs_cc_v_stat_ret
2f03c     2D 00 64 FD | 	ret
2f040                 | 
2f040                 | _fatfs_cc_v_read
2f040     00 4A 05 F6 | 	mov	COUNT_, #0
2f044     A8 00 A0 FD | 	call	#pushregs_
2f048     1C F0 07 F1 | 	add	ptra, #28
2f04c     04 4E 05 F1 | 	add	fp, #4
2f050     A7 12 62 FC | 	wrlong	arg01, fp
2f054     04 4E 05 F1 | 	add	fp, #4
2f058     A7 14 62 FC | 	wrlong	arg02, fp
2f05c     04 4E 05 F1 | 	add	fp, #4
2f060     A7 16 62 FC | 	wrlong	arg03, fp
2f064     08 4E 85 F1 | 	sub	fp, #8
2f068     A7 12 02 FB | 	rdlong	arg01, fp
2f06c     09 13 0A FB | 	rdlong	arg01, arg01 wz
2f070     0C 4E 05 F1 | 	add	fp, #12
2f074     A7 12 62 FC | 	wrlong	arg01, fp
2f078     10 4E 85 F1 | 	sub	fp, #16
2f07c                 | '         return _seterror( 5 );
2f07c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f080     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f084     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f088     01 FA 65 A6 |  if_e	neg	result1, #1
2f08c     B8 00 90 AD |  if_e	jmp	#LR__4802
2f090     10 4E 05 F1 | 	add	fp, #16
2f094     A7 12 02 FB | 	rdlong	arg01, fp
2f098     02 00 00 FF 
2f09c     14 12 06 F1 | 	add	arg01, ##1044
2f0a0     08 4E 85 F1 | 	sub	fp, #8
2f0a4     A7 14 02 FB | 	rdlong	arg02, fp
2f0a8     04 4E 05 F1 | 	add	fp, #4
2f0ac     A7 16 02 FB | 	rdlong	arg03, fp
2f0b0     0C 4E 05 F1 | 	add	fp, #12
2f0b4     A7 18 02 F6 | 	mov	arg04, fp
2f0b8     18 4E 85 F1 | 	sub	fp, #24
2f0bc     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2f0c0     14 4E 05 F1 | 	add	fp, #20
2f0c4     A7 FA 61 FC | 	wrlong	result1, fp
2f0c8     14 4E 85 F1 | 	sub	fp, #20
2f0cc     00 FA 0D F2 | 	cmp	result1, #0 wz
2f0d0     34 00 90 AD |  if_e	jmp	#LR__4800
2f0d4     04 4E 05 F1 | 	add	fp, #4
2f0d8     A7 18 02 FB | 	rdlong	arg04, fp
2f0dc     0C 17 02 F6 | 	mov	arg03, arg04
2f0e0     08 18 06 F1 | 	add	arg04, #8
2f0e4     0C 19 02 FB | 	rdlong	arg04, arg04
2f0e8     20 18 46 F5 | 	or	arg04, #32
2f0ec     08 16 06 F1 | 	add	arg03, #8
2f0f0     0B 19 62 FC | 	wrlong	arg04, arg03
2f0f4                 | '         fil->state |=  (0x20) ;
2f0f4                 | '         return _set_dos_error(r);
2f0f4     10 4E 05 F1 | 	add	fp, #16
2f0f8     A7 12 02 FB | 	rdlong	arg01, fp
2f0fc     14 4E 85 F1 | 	sub	fp, #20
2f100     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f104     40 00 90 FD | 	jmp	#LR__4802
2f108                 | LR__4800
2f108     18 4E 05 F1 | 	add	fp, #24
2f10c     A7 FA 09 FB | 	rdlong	result1, fp wz
2f110     18 4E 85 F1 | 	sub	fp, #24
2f114     24 00 90 5D |  if_ne	jmp	#LR__4801
2f118     04 4E 05 F1 | 	add	fp, #4
2f11c     A7 FA 01 FB | 	rdlong	result1, fp
2f120     FD 18 02 F6 | 	mov	arg04, result1
2f124     04 4E 85 F1 | 	sub	fp, #4
2f128     08 FA 05 F1 | 	add	result1, #8
2f12c     FD FA 01 FB | 	rdlong	result1, result1
2f130     10 FA 45 F5 | 	or	result1, #16
2f134     08 18 06 F1 | 	add	arg04, #8
2f138     0C FB 61 FC | 	wrlong	result1, arg04
2f13c                 | LR__4801
2f13c                 | '         fil->state |=  (0x10) ;
2f13c                 | '     }
2f13c                 | '     return x;
2f13c     18 4E 05 F1 | 	add	fp, #24
2f140     A7 FA 01 FB | 	rdlong	result1, fp
2f144     18 4E 85 F1 | 	sub	fp, #24
2f148                 | LR__4802
2f148     A7 F0 03 F6 | 	mov	ptra, fp
2f14c     B2 00 A0 FD | 	call	#popregs_
2f150                 | _fatfs_cc_v_read_ret
2f150     2D 00 64 FD | 	ret
2f154                 | 
2f154                 | _fatfs_cc_v_write
2f154     00 4A 05 F6 | 	mov	COUNT_, #0
2f158     A8 00 A0 FD | 	call	#pushregs_
2f15c     1C F0 07 F1 | 	add	ptra, #28
2f160     04 4E 05 F1 | 	add	fp, #4
2f164     A7 12 62 FC | 	wrlong	arg01, fp
2f168     04 4E 05 F1 | 	add	fp, #4
2f16c     A7 14 62 FC | 	wrlong	arg02, fp
2f170     04 4E 05 F1 | 	add	fp, #4
2f174     A7 16 62 FC | 	wrlong	arg03, fp
2f178     08 4E 85 F1 | 	sub	fp, #8
2f17c     A7 12 02 FB | 	rdlong	arg01, fp
2f180     09 13 0A FB | 	rdlong	arg01, arg01 wz
2f184     0C 4E 05 F1 | 	add	fp, #12
2f188     A7 12 62 FC | 	wrlong	arg01, fp
2f18c     10 4E 85 F1 | 	sub	fp, #16
2f190                 | '         return _seterror( 5 );
2f190     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f194     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f198     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f19c     01 FA 65 A6 |  if_e	neg	result1, #1
2f1a0     84 00 90 AD |  if_e	jmp	#LR__4811
2f1a4     10 4E 05 F1 | 	add	fp, #16
2f1a8     A7 12 02 FB | 	rdlong	arg01, fp
2f1ac     02 00 00 FF 
2f1b0     14 12 06 F1 | 	add	arg01, ##1044
2f1b4     08 4E 85 F1 | 	sub	fp, #8
2f1b8     A7 14 02 FB | 	rdlong	arg02, fp
2f1bc     04 4E 05 F1 | 	add	fp, #4
2f1c0     A7 16 02 FB | 	rdlong	arg03, fp
2f1c4     0C 4E 05 F1 | 	add	fp, #12
2f1c8     A7 18 02 F6 | 	mov	arg04, fp
2f1cc     18 4E 85 F1 | 	sub	fp, #24
2f1d0     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2f1d4     14 4E 05 F1 | 	add	fp, #20
2f1d8     A7 FA 61 FC | 	wrlong	result1, fp
2f1dc     14 4E 85 F1 | 	sub	fp, #20
2f1e0     00 FA 0D F2 | 	cmp	result1, #0 wz
2f1e4     34 00 90 AD |  if_e	jmp	#LR__4810
2f1e8     04 4E 05 F1 | 	add	fp, #4
2f1ec     A7 18 02 FB | 	rdlong	arg04, fp
2f1f0     0C 17 02 F6 | 	mov	arg03, arg04
2f1f4     08 18 06 F1 | 	add	arg04, #8
2f1f8     0C 19 02 FB | 	rdlong	arg04, arg04
2f1fc     20 18 46 F5 | 	or	arg04, #32
2f200     08 16 06 F1 | 	add	arg03, #8
2f204     0B 19 62 FC | 	wrlong	arg04, arg03
2f208                 | '         fil->state |=  (0x20) ;
2f208                 | '         return _set_dos_error(r);
2f208     10 4E 05 F1 | 	add	fp, #16
2f20c     A7 12 02 FB | 	rdlong	arg01, fp
2f210     14 4E 85 F1 | 	sub	fp, #20
2f214     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f218     0C 00 90 FD | 	jmp	#LR__4811
2f21c                 | LR__4810
2f21c                 | '     }
2f21c                 | '     return x;
2f21c     18 4E 05 F1 | 	add	fp, #24
2f220     A7 FA 01 FB | 	rdlong	result1, fp
2f224     18 4E 85 F1 | 	sub	fp, #24
2f228                 | LR__4811
2f228     A7 F0 03 F6 | 	mov	ptra, fp
2f22c     B2 00 A0 FD | 	call	#popregs_
2f230                 | _fatfs_cc_v_write_ret
2f230     2D 00 64 FD | 	ret
2f234                 | 
2f234                 | _fatfs_cc_v_lseek
2f234     04 4A 05 F6 | 	mov	COUNT_, #4
2f238     A8 00 A0 FD | 	call	#pushregs_
2f23c     0A 1F 02 F6 | 	mov	local01, arg02
2f240     0B 21 02 F6 | 	mov	local02, arg03
2f244     09 23 02 FB | 	rdlong	local03, arg01
2f248     02 00 00 FF 
2f24c     14 22 0E F1 | 	add	local03, ##1044 wz
2f250                 | '         return _seterror( 5 );
2f250     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f254     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f258     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f25c     01 FA 65 A6 |  if_e	neg	result1, #1
2f260     4C 00 90 AD |  if_e	jmp	#LR__4822
2f264     00 20 0E F2 | 	cmp	local02, #0 wz
2f268     24 00 90 AD |  if_e	jmp	#LR__4820
2f26c     01 20 0E F2 | 	cmp	local02, #1 wz
2f270     14 22 06 A1 |  if_e	add	local03, #20
2f274     11 25 02 AB |  if_e	rdlong	local04, local03
2f278     14 22 86 A1 |  if_e	sub	local03, #20
2f27c     12 1F 02 A1 |  if_e	add	local01, local04
2f280     0C 22 06 51 |  if_ne	add	local03, #12
2f284     11 25 02 5B |  if_ne	rdlong	local04, local03
2f288     0C 22 86 51 |  if_ne	sub	local03, #12
2f28c     12 1F 02 51 |  if_ne	add	local01, local04
2f290                 | LR__4820
2f290     0F 15 02 F6 | 	mov	arg02, local01
2f294     11 13 02 F6 | 	mov	arg01, local03
2f298     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2f29c     FD 12 0A F6 | 	mov	arg01, result1 wz
2f2a0     08 00 90 AD |  if_e	jmp	#LR__4821
2f2a4                 | '         return _set_dos_error(result);
2f2a4     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f2a8     04 00 90 FD | 	jmp	#LR__4822
2f2ac                 | LR__4821
2f2ac                 | '     }
2f2ac                 | '     return offset;
2f2ac     0F FB 01 F6 | 	mov	result1, local01
2f2b0                 | LR__4822
2f2b0     A7 F0 03 F6 | 	mov	ptra, fp
2f2b4     B2 00 A0 FD | 	call	#popregs_
2f2b8                 | _fatfs_cc_v_lseek_ret
2f2b8     2D 00 64 FD | 	ret
2f2bc                 | 
2f2bc                 | _fatfs_cc_v_ioctl
2f2bc                 | ' {
2f2bc                 | '     return _seterror( 10 );
2f2bc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2f2c0     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2f2c4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2f2c8     01 FA 65 F6 | 	neg	result1, #1
2f2cc                 | _fatfs_cc_v_ioctl_ret
2f2cc     2D 00 64 FD | 	ret
2f2d0                 | 
2f2d0                 | _fatfs_cc_v_mkdir
2f2d0     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
2f2d4     FD 12 02 F6 | 	mov	arg01, result1
2f2d8                 | ' 
2f2d8                 | '     r = f_mkdir(name);
2f2d8                 | '     return _set_dos_error(r);
2f2d8     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f2dc                 | _fatfs_cc_v_mkdir_ret
2f2dc     2D 00 64 FD | 	ret
2f2e0                 | 
2f2e0                 | _fatfs_cc_v_remove
2f2e0     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2f2e4     FD 12 02 F6 | 	mov	arg01, result1
2f2e8                 | ' 
2f2e8                 | '     r = f_unlink(name);
2f2e8                 | '     return _set_dos_error(r);
2f2e8     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f2ec                 | _fatfs_cc_v_remove_ret
2f2ec     2D 00 64 FD | 	ret
2f2f0                 | 
2f2f0                 | _fatfs_cc_v_rmdir
2f2f0     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2f2f4     FD 12 02 F6 | 	mov	arg01, result1
2f2f8                 | ' 
2f2f8                 | '     r = f_unlink(name);
2f2f8                 | '     return _set_dos_error(r);
2f2f8     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f2fc                 | _fatfs_cc_v_rmdir_ret
2f2fc     2D 00 64 FD | 	ret
2f300                 | 
2f300                 | _fatfs_cc_v_rename
2f300     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
2f304     FD 12 02 F6 | 	mov	arg01, result1
2f308                 | '     return _set_dos_error(r);
2f308     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f30c                 | _fatfs_cc_v_rename_ret
2f30c     2D 00 64 FD | 	ret
2f310                 | 
2f310                 | _fatfs_cc_v_open
2f310     07 4A 05 F6 | 	mov	COUNT_, #7
2f314     A8 00 A0 FD | 	call	#pushregs_
2f318     09 1F 02 F6 | 	mov	local01, arg01
2f31c     0A 21 02 F6 | 	mov	local02, arg02
2f320     0B 23 02 F6 | 	mov	local03, arg03
2f324     03 00 00 FF 
2f328     3C 12 06 F6 | 	mov	arg01, ##1596
2f32c                 | '     return _gc_alloc(size);
2f32c     10 14 06 F6 | 	mov	arg02, #16
2f330     9C 56 BF FD | 	call	#__system___gc_doalloc
2f334     FD 24 0A F6 | 	mov	local04, result1 wz
2f338                 | '       return _seterror( 7 );
2f338     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f33c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2f340     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f344     01 FA 65 A6 |  if_e	neg	result1, #1
2f348     98 00 90 AD |  if_e	jmp	#LR__4836
2f34c     12 13 02 F6 | 	mov	arg01, local04
2f350     00 14 06 F6 | 	mov	arg02, #0
2f354     03 00 00 FF 
2f358     3C 16 06 F6 | 	mov	arg03, ##1596
2f35c     98 00 A0 FD | 	call	#\builtin_bytefill_
2f360                 | '   switch (flags & 3) {
2f360     11 27 02 F6 | 	mov	local05, local03
2f364     03 26 0E F5 | 	and	local05, #3 wz
2f368     0C 00 90 AD |  if_e	jmp	#LR__4830
2f36c     01 26 0E F2 | 	cmp	local05, #1 wz
2f370     0C 00 90 AD |  if_e	jmp	#LR__4831
2f374     10 00 90 FD | 	jmp	#LR__4832
2f378                 | LR__4830
2f378     01 28 06 F6 | 	mov	local06, #1
2f37c                 | '       fs_flags =  0x01 ;
2f37c                 | '       break;
2f37c     0C 00 90 FD | 	jmp	#LR__4833
2f380                 | LR__4831
2f380     02 28 06 F6 | 	mov	local06, #2
2f384                 | '       fs_flags =  0x02 ;
2f384                 | '       break;
2f384     04 00 90 FD | 	jmp	#LR__4833
2f388                 | LR__4832
2f388     03 28 06 F6 | 	mov	local06, #3
2f38c                 | '       fs_flags =  0x01  |  0x02 ;
2f38c                 | '       break;
2f38c                 | LR__4833
2f38c     08 22 CE F7 | 	test	local03, #8 wz
2f390     18 28 46 55 |  if_ne	or	local06, #24
2f394     08 00 90 5D |  if_ne	jmp	#LR__4834
2f398     20 22 CE F7 | 	test	local03, #32 wz
2f39c     30 28 46 55 |  if_ne	or	local06, #48
2f3a0                 | LR__4834
2f3a0     02 00 00 FF 
2f3a4     14 24 06 F1 | 	add	local04, ##1044
2f3a8     12 13 02 F6 | 	mov	arg01, local04
2f3ac     02 00 00 FF 
2f3b0     14 24 86 F1 | 	sub	local04, ##1044
2f3b4     10 15 02 F6 | 	mov	arg02, local02
2f3b8     14 17 02 F6 | 	mov	arg03, local06
2f3bc     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
2f3c0     FD 2A 0A F6 | 	mov	local07, result1 wz
2f3c4     14 00 90 AD |  if_e	jmp	#LR__4835
2f3c8     12 13 02 F6 | 	mov	arg01, local04
2f3cc                 | '     return _gc_free(ptr);
2f3cc     0C 57 BF FD | 	call	#__system___gc_free
2f3d0                 | '     free(f);
2f3d0                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f3d0                 | '     return _set_dos_error(r);
2f3d0     15 13 02 F6 | 	mov	arg01, local07
2f3d4     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f3d8     08 00 90 FD | 	jmp	#LR__4836
2f3dc                 | LR__4835
2f3dc     0F 25 62 FC | 	wrlong	local04, local01
2f3e0                 | '   }
2f3e0                 | '   fil->vfsdata = f;
2f3e0                 | '   return 0;
2f3e0     00 FA 05 F6 | 	mov	result1, #0
2f3e4                 | LR__4836
2f3e4     A7 F0 03 F6 | 	mov	ptra, fp
2f3e8     B2 00 A0 FD | 	call	#popregs_
2f3ec                 | _fatfs_cc_v_open_ret
2f3ec     2D 00 64 FD | 	ret
2f3f0                 | 
2f3f0                 | _fatfs_cc_v_flush
2f3f0     09 13 02 FB | 	rdlong	arg01, arg01
2f3f4     02 00 00 FF 
2f3f8     14 12 0E F1 | 	add	arg01, ##1044 wz
2f3fc                 | '         return _seterror( 5 );
2f3fc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f400     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f404     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f408     01 FA 65 A6 |  if_e	neg	result1, #1
2f40c     0C 00 90 AD |  if_e	jmp	#LR__4840
2f410     00 DA BF FD | 	call	#_fatfs_cc_f_sync
2f414     FD 12 02 F6 | 	mov	arg01, result1
2f418                 | '     }
2f418                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f418                 | '     result = f_sync(f);
2f418                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f418                 | '     return _set_dos_error(result);
2f418     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f41c                 | LR__4840
2f41c                 | _fatfs_cc_v_flush_ret
2f41c     2D 00 64 FD | 	ret
2f420                 | 
2f420                 | _fatfs_cc_v_init
2f420                 | ' {
2f420                 | '     return 0;
2f420     00 FA 05 F6 | 	mov	result1, #0
2f424                 | _fatfs_cc_v_init_ret
2f424     2D 00 64 FD | 	ret
2f428                 | 
2f428                 | _fatfs_cc_v_deinit
2f428     81 01 00 FF 
2f42c     9C 15 06 F6 | 	mov	arg02, ##@LR__5036
2f430     00 12 06 F6 | 	mov	arg01, #0
2f434     00 16 06 F6 | 	mov	arg03, #0
2f438     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
2f43c     01 00 00 FF 
2f440     08 E4 05 F1 | 	add	objptr, ##520
2f444     F2 12 02 FB | 	rdlong	arg01, objptr
2f448     04 E4 05 F1 | 	add	objptr, #4
2f44c     F2 14 02 FB | 	rdlong	arg02, objptr
2f450     01 00 00 FF 
2f454     0C E4 85 F1 | 	sub	objptr, ##524
2f458     14 3E BF FD | 	call	#__system___freepins
2f45c                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f45c                 | '     _freepins(f_pinmask);
2f45c                 | '     return 0;
2f45c     00 FA 05 F6 | 	mov	result1, #0
2f460                 | _fatfs_cc_v_deinit_ret
2f460     2D 00 64 FD | 	ret
2f464                 | 
2f464                 | _fatfs_cc_get_vfs
2f464     01 4A 05 F6 | 	mov	COUNT_, #1
2f468     A8 00 A0 FD | 	call	#pushregs_
2f46c     09 1F 02 F6 | 	mov	local01, arg01
2f470     50 12 06 F6 | 	mov	arg01, #80
2f474     28 55 BF FD | 	call	#__system___gc_alloc_managed
2f478     FD 12 02 F6 | 	mov	arg01, result1
2f47c     F2 FA 01 F6 | 	mov	result1, objptr
2f480     00 E8 04 FF 
2f484     00 FA 45 F5 | 	or	result1, ##164626432
2f488     09 FB 61 FC | 	wrlong	result1, arg01
2f48c     F2 FA 01 F6 | 	mov	result1, objptr
2f490     00 F0 04 FF 
2f494     00 FA 45 F5 | 	or	result1, ##165675008
2f498     04 12 06 F1 | 	add	arg01, #4
2f49c     09 FB 61 FC | 	wrlong	result1, arg01
2f4a0     F2 FA 01 F6 | 	mov	result1, objptr
2f4a4     00 F8 04 FF 
2f4a8     00 FA 45 F5 | 	or	result1, ##166723584
2f4ac     04 12 06 F1 | 	add	arg01, #4
2f4b0     09 FB 61 FC | 	wrlong	result1, arg01
2f4b4     F2 FA 01 F6 | 	mov	result1, objptr
2f4b8     00 00 05 FF 
2f4bc     00 FA 45 F5 | 	or	result1, ##167772160
2f4c0     04 12 06 F1 | 	add	arg01, #4
2f4c4     09 FB 61 FC | 	wrlong	result1, arg01
2f4c8     F2 FA 01 F6 | 	mov	result1, objptr
2f4cc     00 08 05 FF 
2f4d0     00 FA 45 F5 | 	or	result1, ##168820736
2f4d4     04 12 06 F1 | 	add	arg01, #4
2f4d8     09 FB 61 FC | 	wrlong	result1, arg01
2f4dc     04 12 06 F1 | 	add	arg01, #4
2f4e0     09 01 68 FC | 	wrlong	#0, arg01
2f4e4     04 12 06 F1 | 	add	arg01, #4
2f4e8     09 1F 62 FC | 	wrlong	local01, arg01
2f4ec     04 12 06 F1 | 	add	arg01, #4
2f4f0     09 01 68 FC | 	wrlong	#0, arg01
2f4f4     F2 FA 01 F6 | 	mov	result1, objptr
2f4f8     00 10 05 FF 
2f4fc     00 FA 45 F5 | 	or	result1, ##169869312
2f500     04 12 06 F1 | 	add	arg01, #4
2f504     09 FB 61 FC | 	wrlong	result1, arg01
2f508     F2 FA 01 F6 | 	mov	result1, objptr
2f50c     00 18 05 FF 
2f510     00 FA 45 F5 | 	or	result1, ##170917888
2f514     04 12 06 F1 | 	add	arg01, #4
2f518     09 FB 61 FC | 	wrlong	result1, arg01
2f51c     F2 FA 01 F6 | 	mov	result1, objptr
2f520     00 20 05 FF 
2f524     00 FA 45 F5 | 	or	result1, ##171966464
2f528     04 12 06 F1 | 	add	arg01, #4
2f52c     09 FB 61 FC | 	wrlong	result1, arg01
2f530     F2 FA 01 F6 | 	mov	result1, objptr
2f534     00 28 05 FF 
2f538     00 FA 45 F5 | 	or	result1, ##173015040
2f53c     04 12 06 F1 | 	add	arg01, #4
2f540     09 FB 61 FC | 	wrlong	result1, arg01
2f544     F2 FA 01 F6 | 	mov	result1, objptr
2f548     00 30 05 FF 
2f54c     00 FA 45 F5 | 	or	result1, ##174063616
2f550     04 12 06 F1 | 	add	arg01, #4
2f554     09 FB 61 FC | 	wrlong	result1, arg01
2f558     F2 FA 01 F6 | 	mov	result1, objptr
2f55c     00 38 05 FF 
2f560     00 FA 45 F5 | 	or	result1, ##175112192
2f564     04 12 06 F1 | 	add	arg01, #4
2f568     09 FB 61 FC | 	wrlong	result1, arg01
2f56c     F2 FA 01 F6 | 	mov	result1, objptr
2f570     00 40 05 FF 
2f574     00 FA 45 F5 | 	or	result1, ##176160768
2f578     04 12 06 F1 | 	add	arg01, #4
2f57c     09 FB 61 FC | 	wrlong	result1, arg01
2f580     F2 FA 01 F6 | 	mov	result1, objptr
2f584     00 48 05 FF 
2f588     00 FA 45 F5 | 	or	result1, ##177209344
2f58c     04 12 06 F1 | 	add	arg01, #4
2f590     09 FB 61 FC | 	wrlong	result1, arg01
2f594     F2 FA 01 F6 | 	mov	result1, objptr
2f598     00 50 05 FF 
2f59c     00 FA 45 F5 | 	or	result1, ##178257920
2f5a0     04 12 06 F1 | 	add	arg01, #4
2f5a4     09 FB 61 FC | 	wrlong	result1, arg01
2f5a8     F2 FA 01 F6 | 	mov	result1, objptr
2f5ac     00 58 05 FF 
2f5b0     00 FA 45 F5 | 	or	result1, ##179306496
2f5b4     04 12 06 F1 | 	add	arg01, #4
2f5b8     09 FB 61 FC | 	wrlong	result1, arg01
2f5bc     F2 FA 01 F6 | 	mov	result1, objptr
2f5c0     00 60 05 FF 
2f5c4     00 FA 45 F5 | 	or	result1, ##180355072
2f5c8     04 12 06 F1 | 	add	arg01, #4
2f5cc     09 FB 61 FC | 	wrlong	result1, arg01
2f5d0     F2 FA 01 F6 | 	mov	result1, objptr
2f5d4     00 68 05 FF 
2f5d8     00 FA 45 F5 | 	or	result1, ##181403648
2f5dc     04 12 06 F1 | 	add	arg01, #4
2f5e0     09 FB 61 FC | 	wrlong	result1, arg01
2f5e4     4C 12 86 F1 | 	sub	arg01, #76
2f5e8                 | ' 
2f5e8                 | '     v->close = &v_close;
2f5e8                 | '     v->read = &v_read;
2f5e8                 | '     v->write = &v_write;
2f5e8                 | '     v->lseek = &v_lseek;
2f5e8                 | '     v->ioctl = &v_ioctl;
2f5e8                 | '     v->flush = 0;
2f5e8                 | '     v->vfs_data = ptr;
2f5e8                 | '     v->reserved = 0;
2f5e8                 | ' 
2f5e8                 | '     v->open = &v_open;
2f5e8                 | '     v->creat = &v_creat;
2f5e8                 | '     v->opendir = &v_opendir;
2f5e8                 | '     v->closedir = &v_closedir;
2f5e8                 | '     v->readdir = &v_readdir;
2f5e8                 | '     v->stat = &v_stat;
2f5e8                 | ' 
2f5e8                 | '     v->mkdir = &v_mkdir;
2f5e8                 | '     v->rmdir = &v_rmdir;
2f5e8                 | ' 
2f5e8                 | '     v->remove = &v_remove;
2f5e8                 | '     v->rename = &v_rename;
2f5e8                 | ' 
2f5e8                 | '     v->init = &v_init;
2f5e8                 | '     v->deinit = &v_deinit;
2f5e8                 | ' 
2f5e8                 | '     return v;
2f5e8     09 FB 01 F6 | 	mov	result1, arg01
2f5ec     A7 F0 03 F6 | 	mov	ptra, fp
2f5f0     B2 00 A0 FD | 	call	#popregs_
2f5f4                 | _fatfs_cc_get_vfs_ret
2f5f4     2D 00 64 FD | 	ret
2f5f8                 | 
2f5f8                 | _fatfs_cc_xmit_mmc_1109
2f5f8     01 00 00 FF 
2f5fc     10 E4 05 F1 | 	add	objptr, ##528
2f600     F2 00 02 FB | 	rdlong	_var01, objptr
2f604     08 E4 05 F1 | 	add	objptr, #8
2f608     F2 02 02 FB | 	rdlong	_var02, objptr
2f60c     01 00 00 FF 
2f610     18 E4 85 F1 | 	sub	objptr, ##536
2f614     40 02 62 FD | 	dirl	_var02
2f618     28 02 64 FD | 	setq	#1
2f61c     09 05 02 FB | 	rdlong	_var03, arg01
2f620     69 04 62 FD | 	rev	_var03
2f624     1B 04 FE F9 | 	movbyts	_var03, #27
2f628     01 05 22 FC | 	wypin	_var03, _var02
2f62c     0A 05 02 F6 | 	mov	_var03, arg02
2f630     02 14 4E F0 | 	shr	arg02, #2 wz
2f634     03 04 66 F0 | 	shl	_var03, #3
2f638     00 05 22 FC | 	wypin	_var03, _var01
2f63c     41 02 62 FD | 	dirh	_var02
2f640     08 12 06 F1 | 	add	arg01, #8
2f644     69 06 62 FD | 	rev	_var04
2f648     1B 06 FE F9 | 	movbyts	_var04, #27
2f64c                 | LR__4850
2f64c     01 07 22 5C |  if_ne	wypin	_var04, _var02
2f650     09 07 02 5B |  if_ne	rdlong	_var04, arg01
2f654     04 12 06 51 |  if_ne	add	arg01, #4
2f658     69 06 62 5D |  if_ne	rev	_var04
2f65c     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
2f660                 | LR__4851
2f660     40 02 72 5D |  if_ne	testp	_var02 wc
2f664     F8 FF 9F 1D |  if_a	jmp	#LR__4851
2f668     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4850
2f66c                 | LR__4852
2f66c     40 00 72 FD | 	testp	_var01 wc
2f670     F8 FF 9F 3D |  if_ae	jmp	#LR__4852
2f674     40 02 62 FD | 	dirl	_var02
2f678     FF FF FF FF 
2f67c     01 FF 2B FC | 	wypin	##-1, _var02
2f680     41 02 62 FD | 	dirh	_var02
2f684                 | _fatfs_cc_xmit_mmc_1109_ret
2f684     2D 00 64 FD | 	ret
2f688                 | 
2f688                 | _fatfs_cc_rcvr_mmc_1116
2f688     01 00 00 FF 
2f68c     10 E4 05 F1 | 	add	objptr, ##528
2f690     F2 00 02 FB | 	rdlong	_var01, objptr
2f694     0C E4 05 F1 | 	add	objptr, #12
2f698     F2 02 02 FB | 	rdlong	_var02, objptr
2f69c     01 00 00 FF 
2f6a0     1C E4 85 F1 | 	sub	objptr, ##540
2f6a4     01 03 08 FC | 	akpin	_var02
2f6a8     0A 05 0A F6 | 	mov	_var03, arg02 wz
2f6ac     02 04 4E F0 | 	shr	_var03, #2 wz
2f6b0     30 00 90 AD |  if_e	jmp	#LR__4862
2f6b4     02 07 02 F6 | 	mov	_var04, _var03
2f6b8     05 06 66 F0 | 	shl	_var04, #5
2f6bc     00 07 22 FC | 	wypin	_var04, _var01
2f6c0     01 7F 18 FC | 	wxpin	#63, _var02
2f6c4                 | LR__4860
2f6c4                 | LR__4861
2f6c4     40 02 72 FD | 	testp	_var02 wc
2f6c8     F8 FF 9F 3D |  if_ae	jmp	#LR__4861
2f6cc     01 07 8A FA | 	rdpin	_var04, _var02
2f6d0     69 06 62 FD | 	rev	_var04
2f6d4     1B 06 FE F9 | 	movbyts	_var04, #27
2f6d8     09 07 62 FC | 	wrlong	_var04, arg01
2f6dc     04 12 06 F1 | 	add	arg01, #4
2f6e0     F8 05 6E FB | 	djnz	_var03, #LR__4860
2f6e4                 | LR__4862
2f6e4     03 14 0E F5 | 	and	arg02, #3 wz
2f6e8     24 00 90 AD |  if_e	jmp	#LR__4865
2f6ec     01 4F 18 FC | 	wxpin	#39, _var02
2f6f0                 | LR__4863
2f6f0     00 11 28 FC | 	wypin	#8, _var01
2f6f4                 | LR__4864
2f6f4     40 02 72 FD | 	testp	_var02 wc
2f6f8     F8 FF 9F 3D |  if_ae	jmp	#LR__4864
2f6fc     01 07 8A FA | 	rdpin	_var04, _var02
2f700     69 06 62 FD | 	rev	_var04
2f704     09 07 42 FC | 	wrbyte	_var04, arg01
2f708     01 12 06 F1 | 	add	arg01, #1
2f70c     F8 15 6E FB | 	djnz	arg02, #LR__4863
2f710                 | LR__4865
2f710                 | _fatfs_cc_rcvr_mmc_1116_ret
2f710     2D 00 64 FD | 	ret
2f714                 | 
2f714                 | _fatfs_cc_wait_ready_1120
2f714     01 4A 05 F6 | 	mov	COUNT_, #1
2f718     A8 00 A0 FD | 	call	#pushregs_
2f71c     10 F0 07 F1 | 	add	ptra, #16
2f720     1A FA 61 FD | 	getct	result1
2f724     08 4E 05 F1 | 	add	fp, #8
2f728     A7 FA 61 FC | 	wrlong	result1, fp
2f72c     14 1E 06 FB | 	rdlong	local01, #20
2f730     01 1E 46 F0 | 	shr	local01, #1
2f734     04 4E 05 F1 | 	add	fp, #4
2f738     A7 1E 62 FC | 	wrlong	local01, fp
2f73c     0C 4E 85 F1 | 	sub	fp, #12
2f740                 | ' {
2f740                 | ' 	BYTE d;
2f740                 | ' 	UINT tmr, tmout;
2f740                 | ' 
2f740                 | ' 	tmr = _cnt();
2f740                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2f740                 | ' 	for(;;) {
2f740                 | LR__4870
2f740     04 4E 05 F1 | 	add	fp, #4
2f744     A7 12 02 F6 | 	mov	arg01, fp
2f748     04 4E 85 F1 | 	sub	fp, #4
2f74c     01 14 06 F6 | 	mov	arg02, #1
2f750     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f754     04 4E 05 F1 | 	add	fp, #4
2f758     A7 1E C2 FA | 	rdbyte	local01, fp
2f75c     04 4E 85 F1 | 	sub	fp, #4
2f760     FF 1E 0E F2 | 	cmp	local01, #255 wz
2f764     01 FA 05 A6 |  if_e	mov	result1, #1
2f768     28 00 90 AD |  if_e	jmp	#LR__4871
2f76c     1A FA 61 FD | 	getct	result1
2f770     08 4E 05 F1 | 	add	fp, #8
2f774     A7 1E 02 FB | 	rdlong	local01, fp
2f778     0F FB 81 F1 | 	sub	result1, local01
2f77c     04 4E 05 F1 | 	add	fp, #4
2f780     A7 1E 02 FB | 	rdlong	local01, fp
2f784     0C 4E 85 F1 | 	sub	fp, #12
2f788     0F FB 11 F2 | 	cmp	result1, local01 wc
2f78c     00 FA 05 36 |  if_ae	mov	result1, #0
2f790     AC FF 9F CD |  if_b	jmp	#LR__4870
2f794                 | LR__4871
2f794     A7 F0 03 F6 | 	mov	ptra, fp
2f798     B2 00 A0 FD | 	call	#popregs_
2f79c                 | _fatfs_cc_wait_ready_1120_ret
2f79c     2D 00 64 FD | 	ret
2f7a0                 | 
2f7a0                 | _fatfs_cc_deselect_1126
2f7a0     00 4A 05 F6 | 	mov	COUNT_, #0
2f7a4     A8 00 A0 FD | 	call	#pushregs_
2f7a8     14 F0 07 F1 | 	add	ptra, #20
2f7ac     01 00 00 FF 
2f7b0     14 E4 05 F1 | 	add	objptr, ##532
2f7b4     F2 14 02 FB | 	rdlong	arg02, objptr
2f7b8     04 4E 05 F1 | 	add	fp, #4
2f7bc     A7 14 62 FC | 	wrlong	arg02, fp
2f7c0     04 E4 85 F1 | 	sub	objptr, #4
2f7c4     F2 14 02 FB | 	rdlong	arg02, objptr
2f7c8     04 4E 05 F1 | 	add	fp, #4
2f7cc     A7 14 62 FC | 	wrlong	arg02, fp
2f7d0     08 E4 05 F1 | 	add	objptr, #8
2f7d4     F2 14 02 FB | 	rdlong	arg02, objptr
2f7d8     04 4E 05 F1 | 	add	fp, #4
2f7dc     A7 14 62 FC | 	wrlong	arg02, fp
2f7e0     04 E4 05 F1 | 	add	objptr, #4
2f7e4     F2 14 02 FB | 	rdlong	arg02, objptr
2f7e8     01 00 00 FF 
2f7ec     1C E4 85 F1 | 	sub	objptr, ##540
2f7f0     04 4E 05 F1 | 	add	fp, #4
2f7f4     A7 14 62 FC | 	wrlong	arg02, fp
2f7f8     0C 4E 85 F1 | 	sub	fp, #12
2f7fc     A7 12 02 FB | 	rdlong	arg01, fp
2f800     04 4E 85 F1 | 	sub	fp, #4
2f804     59 12 62 FD | 	drvh	arg01
2f808     1F 20 64 FD | 	waitx	#16
2f80c     A7 12 02 F6 | 	mov	arg01, fp
2f810     01 14 06 F6 | 	mov	arg02, #1
2f814     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f818     A7 F0 03 F6 | 	mov	ptra, fp
2f81c     B2 00 A0 FD | 	call	#popregs_
2f820                 | _fatfs_cc_deselect_1126_ret
2f820     2D 00 64 FD | 	ret
2f824                 | 
2f824                 | _fatfs_cc_select_1130
2f824     00 4A 05 F6 | 	mov	COUNT_, #0
2f828     A8 00 A0 FD | 	call	#pushregs_
2f82c     10 F0 07 F1 | 	add	ptra, #16
2f830     01 00 00 FF 
2f834     14 E4 05 F1 | 	add	objptr, ##532
2f838     F2 14 02 FB | 	rdlong	arg02, objptr
2f83c     08 4E 05 F1 | 	add	fp, #8
2f840     A7 14 62 FC | 	wrlong	arg02, fp
2f844     08 E4 05 F1 | 	add	objptr, #8
2f848     F2 12 02 FB | 	rdlong	arg01, objptr
2f84c     01 00 00 FF 
2f850     1C E4 85 F1 | 	sub	objptr, ##540
2f854     04 4E 05 F1 | 	add	fp, #4
2f858     A7 12 62 FC | 	wrlong	arg01, fp
2f85c     50 12 62 FD | 	fltl	arg01
2f860     04 4E 85 F1 | 	sub	fp, #4
2f864     A7 12 02 FB | 	rdlong	arg01, fp
2f868     58 12 62 FD | 	drvl	arg01
2f86c     1F 20 64 FD | 	waitx	#16
2f870     04 4E 05 F1 | 	add	fp, #4
2f874     A7 12 02 FB | 	rdlong	arg01, fp
2f878     41 12 62 FD | 	dirh	arg01
2f87c     08 4E 85 F1 | 	sub	fp, #8
2f880     A7 12 02 F6 | 	mov	arg01, fp
2f884     04 4E 85 F1 | 	sub	fp, #4
2f888     01 14 06 F6 | 	mov	arg02, #1
2f88c     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f890     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1120
2f894     00 FA 0D F2 | 	cmp	result1, #0 wz
2f898     01 FA 05 56 |  if_ne	mov	result1, #1
2f89c     08 00 90 5D |  if_ne	jmp	#LR__4880
2f8a0     FC FE BF FD | 	call	#_fatfs_cc_deselect_1126
2f8a4                 | ' 
2f8a4                 | ' 	deselect();
2f8a4                 | ' 	return 0;
2f8a4     00 FA 05 F6 | 	mov	result1, #0
2f8a8                 | LR__4880
2f8a8     A7 F0 03 F6 | 	mov	ptra, fp
2f8ac     B2 00 A0 FD | 	call	#popregs_
2f8b0                 | _fatfs_cc_select_1130_ret
2f8b0     2D 00 64 FD | 	ret
2f8b4                 | 
2f8b4                 | _fatfs_cc_rcvr_datablock_1134
2f8b4     01 4A 05 F6 | 	mov	COUNT_, #1
2f8b8     A8 00 A0 FD | 	call	#pushregs_
2f8bc     18 F0 07 F1 | 	add	ptra, #24
2f8c0     04 4E 05 F1 | 	add	fp, #4
2f8c4     A7 12 62 FC | 	wrlong	arg01, fp
2f8c8     04 4E 05 F1 | 	add	fp, #4
2f8cc     A7 14 62 FC | 	wrlong	arg02, fp
2f8d0     1A FA 61 FD | 	getct	result1
2f8d4     08 4E 05 F1 | 	add	fp, #8
2f8d8     A7 FA 61 FC | 	wrlong	result1, fp
2f8dc     14 1E 06 FB | 	rdlong	local01, #20
2f8e0     03 1E 46 F0 | 	shr	local01, #3
2f8e4     04 4E 05 F1 | 	add	fp, #4
2f8e8     A7 1E 62 FC | 	wrlong	local01, fp
2f8ec     14 4E 85 F1 | 	sub	fp, #20
2f8f0                 | ' 	BYTE *buff,
2f8f0                 | ' 	UINT btr
2f8f0                 | ' )
2f8f0                 | ' {
2f8f0                 | ' 	BYTE d[2];
2f8f0                 | ' 	UINT tmr, tmout;
2f8f0                 | ' 
2f8f0                 | ' 	tmr = _cnt();
2f8f0                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2f8f0                 | ' 	for(;;) {
2f8f0                 | LR__4890
2f8f0     0C 4E 05 F1 | 	add	fp, #12
2f8f4     A7 12 02 F6 | 	mov	arg01, fp
2f8f8     0C 4E 85 F1 | 	sub	fp, #12
2f8fc     01 14 06 F6 | 	mov	arg02, #1
2f900     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f904     0C 4E 05 F1 | 	add	fp, #12
2f908     A7 1E C2 FA | 	rdbyte	local01, fp
2f90c     0C 4E 85 F1 | 	sub	fp, #12
2f910     FF 1E 0E F2 | 	cmp	local01, #255 wz
2f914     28 00 90 5D |  if_ne	jmp	#LR__4891
2f918     1A FA 61 FD | 	getct	result1
2f91c     FD 1E 02 F6 | 	mov	local01, result1
2f920     10 4E 05 F1 | 	add	fp, #16
2f924     A7 14 02 FB | 	rdlong	arg02, fp
2f928     0A 1F 82 F1 | 	sub	local01, arg02
2f92c     04 4E 05 F1 | 	add	fp, #4
2f930     A7 14 02 FB | 	rdlong	arg02, fp
2f934     14 4E 85 F1 | 	sub	fp, #20
2f938     0A 1F 12 F2 | 	cmp	local01, arg02 wc
2f93c     B0 FF 9F CD |  if_b	jmp	#LR__4890
2f940                 | LR__4891
2f940     0C 4E 05 F1 | 	add	fp, #12
2f944     A7 1E C2 FA | 	rdbyte	local01, fp
2f948     0C 4E 85 F1 | 	sub	fp, #12
2f94c     FE 1E 0E F2 | 	cmp	local01, #254 wz
2f950     00 FA 05 56 |  if_ne	mov	result1, #0
2f954     30 00 90 5D |  if_ne	jmp	#LR__4892
2f958     04 4E 05 F1 | 	add	fp, #4
2f95c     A7 12 02 FB | 	rdlong	arg01, fp
2f960     04 4E 05 F1 | 	add	fp, #4
2f964     A7 14 02 FB | 	rdlong	arg02, fp
2f968     08 4E 85 F1 | 	sub	fp, #8
2f96c     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f970     0C 4E 05 F1 | 	add	fp, #12
2f974     A7 12 02 F6 | 	mov	arg01, fp
2f978     0C 4E 85 F1 | 	sub	fp, #12
2f97c     02 14 06 F6 | 	mov	arg02, #2
2f980     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f984                 | ' 
2f984                 | ' 	rcvr_mmc(buff, btr);
2f984                 | ' 	rcvr_mmc(d, 2);
2f984                 | ' 
2f984                 | ' 	return 1;
2f984     01 FA 05 F6 | 	mov	result1, #1
2f988                 | LR__4892
2f988     A7 F0 03 F6 | 	mov	ptra, fp
2f98c     B2 00 A0 FD | 	call	#popregs_
2f990                 | _fatfs_cc_rcvr_datablock_1134_ret
2f990     2D 00 64 FD | 	ret
2f994                 | 
2f994                 | _fatfs_cc_xmit_datablock_1136
2f994     00 4A 05 F6 | 	mov	COUNT_, #0
2f998     A8 00 A0 FD | 	call	#pushregs_
2f99c     10 F0 07 F1 | 	add	ptra, #16
2f9a0     04 4E 05 F1 | 	add	fp, #4
2f9a4     A7 12 62 FC | 	wrlong	arg01, fp
2f9a8     04 4E 05 F1 | 	add	fp, #4
2f9ac     A7 14 42 FC | 	wrbyte	arg02, fp
2f9b0     08 4E 85 F1 | 	sub	fp, #8
2f9b4     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1120
2f9b8     00 FA 0D F2 | 	cmp	result1, #0 wz
2f9bc     00 FA 05 A6 |  if_e	mov	result1, #0
2f9c0     90 00 90 AD |  if_e	jmp	#LR__4901
2f9c4     08 4E 05 F1 | 	add	fp, #8
2f9c8     A7 14 C2 FA | 	rdbyte	arg02, fp
2f9cc     04 4E 05 F1 | 	add	fp, #4
2f9d0     A7 14 42 FC | 	wrbyte	arg02, fp
2f9d4     A7 12 02 F6 | 	mov	arg01, fp
2f9d8     0C 4E 85 F1 | 	sub	fp, #12
2f9dc     01 14 06 F6 | 	mov	arg02, #1
2f9e0     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1109
2f9e4     08 4E 05 F1 | 	add	fp, #8
2f9e8     A7 14 C2 FA | 	rdbyte	arg02, fp
2f9ec     08 4E 85 F1 | 	sub	fp, #8
2f9f0     FD 14 0E F2 | 	cmp	arg02, #253 wz
2f9f4     58 00 90 AD |  if_e	jmp	#LR__4900
2f9f8     04 4E 05 F1 | 	add	fp, #4
2f9fc     A7 12 02 FB | 	rdlong	arg01, fp
2fa00     04 4E 85 F1 | 	sub	fp, #4
2fa04     09 14 C6 F9 | 	decod	arg02, #9
2fa08     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1109
2fa0c     0C 4E 05 F1 | 	add	fp, #12
2fa10     A7 12 02 F6 | 	mov	arg01, fp
2fa14     0C 4E 85 F1 | 	sub	fp, #12
2fa18     02 14 06 F6 | 	mov	arg02, #2
2fa1c     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2fa20     0C 4E 05 F1 | 	add	fp, #12
2fa24     A7 12 02 F6 | 	mov	arg01, fp
2fa28     0C 4E 85 F1 | 	sub	fp, #12
2fa2c     01 14 06 F6 | 	mov	arg02, #1
2fa30     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2fa34     0C 4E 05 F1 | 	add	fp, #12
2fa38     A7 14 C2 FA | 	rdbyte	arg02, fp
2fa3c     0C 4E 85 F1 | 	sub	fp, #12
2fa40     1F 14 06 F5 | 	and	arg02, #31
2fa44     05 14 0E F2 | 	cmp	arg02, #5 wz
2fa48                 | ' 			return 0;
2fa48     00 FA 05 56 |  if_ne	mov	result1, #0
2fa4c     04 00 90 5D |  if_ne	jmp	#LR__4901
2fa50                 | LR__4900
2fa50                 | ' 	}
2fa50                 | ' 
2fa50                 | ' 	return 1;
2fa50     01 FA 05 F6 | 	mov	result1, #1
2fa54                 | LR__4901
2fa54     A7 F0 03 F6 | 	mov	ptra, fp
2fa58     B2 00 A0 FD | 	call	#popregs_
2fa5c                 | _fatfs_cc_xmit_datablock_1136_ret
2fa5c     2D 00 64 FD | 	ret
2fa60                 | 
2fa60                 | _fatfs_cc_send_cmd_1140
2fa60     01 4A 05 F6 | 	mov	COUNT_, #1
2fa64     A8 00 A0 FD | 	call	#pushregs_
2fa68     1C F0 07 F1 | 	add	ptra, #28
2fa6c                 | _fatfs_cc_send_cmd_1140_enter
2fa6c     04 4E 05 F1 | 	add	fp, #4
2fa70     A7 12 42 FC | 	wrbyte	arg01, fp
2fa74     04 4E 05 F1 | 	add	fp, #4
2fa78     A7 14 62 FC | 	wrlong	arg02, fp
2fa7c     04 4E 85 F1 | 	sub	fp, #4
2fa80     A7 FA C1 FA | 	rdbyte	result1, fp
2fa84     04 4E 85 F1 | 	sub	fp, #4
2fa88     80 FA CD F7 | 	test	result1, #128 wz
2fa8c     44 00 90 AD |  if_e	jmp	#LR__4910
2fa90     04 4E 05 F1 | 	add	fp, #4
2fa94     A7 14 C2 FA | 	rdbyte	arg02, fp
2fa98     7F 14 06 F5 | 	and	arg02, #127
2fa9c     A7 14 42 FC | 	wrbyte	arg02, fp
2faa0     04 4E 85 F1 | 	sub	fp, #4
2faa4     37 12 06 F6 | 	mov	arg01, #55
2faa8     00 14 06 F6 | 	mov	arg02, #0
2faac     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1140
2fab0     0C 4E 05 F1 | 	add	fp, #12
2fab4     A7 FA 41 FC | 	wrbyte	result1, fp
2fab8     A7 14 C2 FA | 	rdbyte	arg02, fp
2fabc     0C 4E 85 F1 | 	sub	fp, #12
2fac0     02 14 16 F2 | 	cmp	arg02, #2 wc
2fac4     0C 4E 05 31 |  if_ae	add	fp, #12
2fac8     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
2facc     0C 4E 85 31 |  if_ae	sub	fp, #12
2fad0     6C 01 90 3D |  if_ae	jmp	#LR__4914
2fad4                 | LR__4910
2fad4     04 4E 05 F1 | 	add	fp, #4
2fad8     A7 14 C2 FA | 	rdbyte	arg02, fp
2fadc     04 4E 85 F1 | 	sub	fp, #4
2fae0     0C 14 0E F2 | 	cmp	arg02, #12 wz
2fae4     14 00 90 AD |  if_e	jmp	#LR__4911
2fae8     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1126
2faec     34 FD BF FD | 	call	#_fatfs_cc_select_1130
2faf0     00 FA 0D F2 | 	cmp	result1, #0 wz
2faf4     FF FA 05 A6 |  if_e	mov	result1, #255
2faf8     44 01 90 AD |  if_e	jmp	#LR__4914
2fafc                 | LR__4911
2fafc     04 4E 05 F1 | 	add	fp, #4
2fb00     A7 14 C2 FA | 	rdbyte	arg02, fp
2fb04     40 FA 05 F6 | 	mov	result1, #64
2fb08     0A FB 41 F5 | 	or	result1, arg02
2fb0c     10 4E 05 F1 | 	add	fp, #16
2fb10     A7 FA 41 FC | 	wrbyte	result1, fp
2fb14     0C 4E 85 F1 | 	sub	fp, #12
2fb18     A7 FA 01 FB | 	rdlong	result1, fp
2fb1c     18 FA 45 F0 | 	shr	result1, #24
2fb20     0D 4E 05 F1 | 	add	fp, #13
2fb24     A7 FA 41 FC | 	wrbyte	result1, fp
2fb28     0D 4E 85 F1 | 	sub	fp, #13
2fb2c     A7 FA 01 FB | 	rdlong	result1, fp
2fb30     10 FA 45 F0 | 	shr	result1, #16
2fb34     0E 4E 05 F1 | 	add	fp, #14
2fb38     A7 FA 41 FC | 	wrbyte	result1, fp
2fb3c     0E 4E 85 F1 | 	sub	fp, #14
2fb40     A7 FA 01 FB | 	rdlong	result1, fp
2fb44     08 FA 45 F0 | 	shr	result1, #8
2fb48     0F 4E 05 F1 | 	add	fp, #15
2fb4c     A7 FA 41 FC | 	wrbyte	result1, fp
2fb50     0F 4E 85 F1 | 	sub	fp, #15
2fb54     A7 FA 01 FB | 	rdlong	result1, fp
2fb58     10 4E 05 F1 | 	add	fp, #16
2fb5c     A7 FA 41 FC | 	wrbyte	result1, fp
2fb60     0C 4E 85 F1 | 	sub	fp, #12
2fb64     A7 02 48 FC | 	wrbyte	#1, fp
2fb68     08 4E 85 F1 | 	sub	fp, #8
2fb6c     A7 FA C9 FA | 	rdbyte	result1, fp wz
2fb70     04 4E 85 F1 | 	sub	fp, #4
2fb74     0C 4E 05 A1 |  if_e	add	fp, #12
2fb78     A7 2A 49 AC |  if_e	wrbyte	#149, fp
2fb7c     0C 4E 85 A1 |  if_e	sub	fp, #12
2fb80     04 4E 05 F1 | 	add	fp, #4
2fb84     A7 FA C1 FA | 	rdbyte	result1, fp
2fb88     04 4E 85 F1 | 	sub	fp, #4
2fb8c     08 FA 0D F2 | 	cmp	result1, #8 wz
2fb90     0C 4E 05 A1 |  if_e	add	fp, #12
2fb94     A7 0E 49 AC |  if_e	wrbyte	#135, fp
2fb98     0C 4E 85 A1 |  if_e	sub	fp, #12
2fb9c     0C 4E 05 F1 | 	add	fp, #12
2fba0     A7 14 C2 FA | 	rdbyte	arg02, fp
2fba4     0D 4E 05 F1 | 	add	fp, #13
2fba8     A7 14 42 FC | 	wrbyte	arg02, fp
2fbac     05 4E 85 F1 | 	sub	fp, #5
2fbb0     A7 12 02 F6 | 	mov	arg01, fp
2fbb4     14 4E 85 F1 | 	sub	fp, #20
2fbb8     06 14 06 F6 | 	mov	arg02, #6
2fbbc     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1109
2fbc0     04 4E 05 F1 | 	add	fp, #4
2fbc4     A7 1E C2 FA | 	rdbyte	local01, fp
2fbc8     04 4E 85 F1 | 	sub	fp, #4
2fbcc     0C 1E 0E F2 | 	cmp	local01, #12 wz
2fbd0     10 4E 05 A1 |  if_e	add	fp, #16
2fbd4     A7 12 02 A6 |  if_e	mov	arg01, fp
2fbd8     10 4E 85 A1 |  if_e	sub	fp, #16
2fbdc     01 14 06 A6 |  if_e	mov	arg02, #1
2fbe0     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1116
2fbe4     0C 4E 05 F1 | 	add	fp, #12
2fbe8     A7 14 48 FC | 	wrbyte	#10, fp
2fbec     0C 4E 85 F1 | 	sub	fp, #12
2fbf0                 | ' 	n = 10;
2fbf0                 | ' 	do
2fbf0                 | LR__4912
2fbf0     10 4E 05 F1 | 	add	fp, #16
2fbf4     A7 12 02 F6 | 	mov	arg01, fp
2fbf8     10 4E 85 F1 | 	sub	fp, #16
2fbfc     01 14 06 F6 | 	mov	arg02, #1
2fc00     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2fc04     10 4E 05 F1 | 	add	fp, #16
2fc08     A7 1E C2 FA | 	rdbyte	local01, fp
2fc0c     10 4E 85 F1 | 	sub	fp, #16
2fc10     80 1E CE F7 | 	test	local01, #128 wz
2fc14     1C 00 90 AD |  if_e	jmp	#LR__4913
2fc18     0C 4E 05 F1 | 	add	fp, #12
2fc1c     A7 1E C2 FA | 	rdbyte	local01, fp
2fc20     01 1E 86 F1 | 	sub	local01, #1
2fc24     A7 1E 42 FC | 	wrbyte	local01, fp
2fc28     A7 1E CA FA | 	rdbyte	local01, fp wz
2fc2c     0C 4E 85 F1 | 	sub	fp, #12
2fc30     BC FF 9F 5D |  if_ne	jmp	#LR__4912
2fc34                 | LR__4913
2fc34                 | ' 
2fc34                 | ' 	return d;
2fc34     10 4E 05 F1 | 	add	fp, #16
2fc38     A7 FA C1 FA | 	rdbyte	result1, fp
2fc3c     10 4E 85 F1 | 	sub	fp, #16
2fc40                 | LR__4914
2fc40     A7 F0 03 F6 | 	mov	ptra, fp
2fc44     B2 00 A0 FD | 	call	#popregs_
2fc48                 | _fatfs_cc_send_cmd_1140_ret
2fc48     2D 00 64 FD | 	ret
2fc4c                 | 
2fc4c                 | _fatfs_cc_disk_deinitialize
2fc4c     03 4A 05 F6 | 	mov	COUNT_, #3
2fc50     A8 00 A0 FD | 	call	#pushregs_
2fc54     00 12 4E F2 | 	cmps	arg01, #0 wz
2fc58     01 00 00 FF 
2fc5c     14 E4 05 F1 | 	add	objptr, ##532
2fc60     F2 12 02 FB | 	rdlong	arg01, objptr
2fc64     04 E4 85 F1 | 	sub	objptr, #4
2fc68     F2 1E 02 FB | 	rdlong	local01, objptr
2fc6c     08 E4 05 F1 | 	add	objptr, #8
2fc70     F2 20 02 FB | 	rdlong	local02, objptr
2fc74     04 E4 05 F1 | 	add	objptr, #4
2fc78     F2 22 02 FB | 	rdlong	local03, objptr
2fc7c     01 00 00 FF 
2fc80     1C E4 85 F1 | 	sub	objptr, ##540
2fc84                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2fc84                 | '         return RES_NOTRDY;
2fc84     03 FA 05 56 |  if_ne	mov	result1, #3
2fc88     2C 00 90 5D |  if_ne	jmp	#LR__4920
2fc8c     50 12 62 FD | 	fltl	arg01
2fc90     09 01 08 FC | 	wrpin	#0, arg01
2fc94     50 1E 62 FD | 	fltl	local01
2fc98     0F 01 08 FC | 	wrpin	#0, local01
2fc9c     50 20 62 FD | 	fltl	local02
2fca0     10 01 08 FC | 	wrpin	#0, local02
2fca4     50 22 62 FD | 	fltl	local03
2fca8     11 01 08 FC | 	wrpin	#0, local03
2fcac     0A 12 06 F6 | 	mov	arg01, #10
2fcb0     28 11 BF FD | 	call	#__system___waitms
2fcb4                 | '     }
2fcb4                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2fcb4                 | '     _pinclear(PIN_SS);
2fcb4                 | '     _pinclear(PIN_CLK);
2fcb4                 | '     _pinclear(PIN_DI);
2fcb4                 | '     _pinclear(PIN_DO);
2fcb4                 | ' 
2fcb4                 | '     _waitms(10);
2fcb4                 | ' 
2fcb4                 | '     return 0;
2fcb4     00 FA 05 F6 | 	mov	result1, #0
2fcb8                 | LR__4920
2fcb8     A7 F0 03 F6 | 	mov	ptra, fp
2fcbc     B2 00 A0 FD | 	call	#popregs_
2fcc0                 | _fatfs_cc_disk_deinitialize_ret
2fcc0     2D 00 64 FD | 	ret
2fcc4                 | 
2fcc4                 | _fatfs_cc_gettimeofday
2fcc4     04 4A 05 F6 | 	mov	COUNT_, #4
2fcc8     A8 00 A0 FD | 	call	#pushregs_
2fccc     09 1F 02 F6 | 	mov	local01, arg01
2fcd0     E4 0C BF FD | 	call	#__system___getus
2fcd4     FD 12 02 F6 | 	mov	arg01, result1
2fcd8     02 00 00 FF 
2fcdc     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
2fce0     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
2fce4     09 FB 01 F6 | 	mov	result1, arg01
2fce8     10 FB 81 F1 | 	sub	result1, local02
2fcec     A1 07 00 FF 
2fcf0     40 FA 15 FD | 	qdiv	result1, ##1000000
2fcf4     02 00 00 FF 
2fcf8     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2fcfc     18 20 62 FD | 	getqx	local02
2fd00     A1 07 00 FF 
2fd04     40 FA 15 FD | 	qdiv	result1, ##1000000
2fd08     00 20 0E F2 | 	cmp	local02, #0 wz
2fd0c     19 22 62 FD | 	getqy	local03
2fd10     28 00 90 AD |  if_e	jmp	#LR__4930
2fd14     02 00 00 FF 
2fd18     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2fd1c     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2fd20     10 25 02 F1 | 	add	local04, local02
2fd24     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2fd28     11 13 82 F1 | 	sub	arg01, local03
2fd2c     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
2fd30     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
2fd34     02 00 00 FF 
2fd38     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2fd3c                 | LR__4930
2fd3c     02 00 00 FF 
2fd40     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2fd44     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2fd48     02 00 00 FF 
2fd4c     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
2fd50     0F 25 62 FC | 	wrlong	local04, local01
2fd54     04 1E 06 F1 | 	add	local01, #4
2fd58     0F 23 62 FC | 	wrlong	local03, local01
2fd5c                 | '         lastsec += secs;
2fd5c                 | '         lastus = now - leftover;
2fd5c                 | '     }
2fd5c                 | '     tv->tv_sec = lastsec;
2fd5c                 | '     tv->tv_usec = leftover;
2fd5c                 | '     return 0;
2fd5c     00 FA 05 F6 | 	mov	result1, #0
2fd60     A7 F0 03 F6 | 	mov	ptra, fp
2fd64     B2 00 A0 FD | 	call	#popregs_
2fd68                 | _fatfs_cc_gettimeofday_ret
2fd68     2D 00 64 FD | 	ret
2fd6c                 | 
2fd6c                 | _fatfs_cc__is_leap_year
2fd6c     09 FB 51 F6 | 	abs	result1, arg01 wc
2fd70     03 FA 05 F5 | 	and	result1, #3
2fd74     FD FA 89 F6 | 	negc	result1, result1 wz
2fd78     38 00 90 5D |  if_ne	jmp	#LR__4941
2fd7c     09 FB 51 F6 | 	abs	result1, arg01 wc
2fd80     64 FA 15 FD | 	qdiv	result1, #100
2fd84     19 FA 61 FD | 	getqy	result1
2fd88     FD FA 89 F6 | 	negc	result1, result1 wz
2fd8c     1C 00 90 5D |  if_ne	jmp	#LR__4940
2fd90     09 FB 51 F6 | 	abs	result1, arg01 wc
2fd94     90 FB 15 FD | 	qdiv	result1, #400
2fd98                 | '       return (0 == y % 400);
2fd98     00 FA 05 F6 | 	mov	result1, #0
2fd9c     19 00 62 FD | 	getqy	_var01
2fda0     00 01 8A F6 | 	negc	_var01, _var01 wz
2fda4     01 FA 05 A6 |  if_e	mov	result1, #1
2fda8     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2fdac                 | LR__4940
2fdac                 | '     return 1;
2fdac     01 FA 05 F6 | 	mov	result1, #1
2fdb0     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2fdb4                 | LR__4941
2fdb4                 | '   }
2fdb4                 | '   return 0;
2fdb4     00 FA 05 F6 | 	mov	result1, #0
2fdb8                 | _fatfs_cc__is_leap_year_ret
2fdb8     2D 00 64 FD | 	ret
2fdbc                 | 
2fdbc                 | _fatfs_cc___tzoffset
2fdbc     09 01 0A F6 | 	mov	_var01, arg01 wz
2fdc0     FF FF FF FF 
2fdc4     0A FF 6B FC | 	wrlong	##-1, arg02
2fdc8     01 02 06 F6 | 	mov	_var02, #1
2fdcc     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
2fdd0                 | '                 return 0;
2fdd0     00 FA 05 A6 |  if_e	mov	result1, #0
2fdd4     94 02 90 AD |  if_e	jmp	#LR__4967
2fdd8     0A 01 68 FC | 	wrlong	#0, arg02
2fddc     02 00 00 FF 
2fde0     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fde4     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2fde8                 | ' 
2fde8                 | '        *hasdst = 0;
2fde8                 | ' 
2fde8                 | ' 	n = stdname;
2fde8                 | '         while (*s && isalpha(*s)) {
2fde8     02 00 00 FF 
2fdec     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2fdf0     97 28 48 FB | 	callpa	#(@LR__4951-@LR__4950)>>2,fcache_load_ptr_
2fdf4                 | LR__4950
2fdf4     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2fdf8     48 00 90 AD |  if_e	jmp	#LR__4952
2fdfc     00 13 C2 FA | 	rdbyte	arg01, _var01
2fe00                 | ' {
2fe00                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2fe00     80 12 36 F3 | 	fle	arg01, #128 wc
2fe04                 | '     return __ctype[c];
2fe04     02 00 00 FF 
2fe08     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fe0c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fe10     09 FB C1 FA | 	rdbyte	result1, arg01
2fe14     02 00 00 FF 
2fe18     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fe1c     0C FA CD F7 | 	test	result1, #12 wz
2fe20     20 00 90 AD |  if_e	jmp	#LR__4952
2fe24     00 09 02 F6 | 	mov	_var05, _var01
2fe28     00 0B 02 F6 | 	mov	_var06, _var01
2fe2c     01 0A 06 F1 | 	add	_var06, #1
2fe30     04 0D C2 FA | 	rdbyte	_var07, _var05
2fe34     05 01 02 F6 | 	mov	_var01, _var06
2fe38     03 0D 42 FC | 	wrbyte	_var07, _var04
2fe3c     01 06 06 F1 | 	add	_var04, #1
2fe40     B0 FF 9F FD | 	jmp	#LR__4950
2fe44                 | LR__4951
2fe44                 | LR__4952
2fe44     03 01 48 FC | 	wrbyte	#0, _var04
2fe48     00 0E 06 F6 | 	mov	_var08, #0
2fe4c     00 05 C2 FA | 	rdbyte	_var03, _var01
2fe50     2D 04 0E F2 | 	cmp	_var03, #45 wz
2fe54     01 02 66 A6 |  if_e	neg	_var02, #1
2fe58     01 00 06 A1 |  if_e	add	_var01, #1
2fe5c     97 28 48 FB | 	callpa	#(@LR__4954-@LR__4953)>>2,fcache_load_ptr_
2fe60                 | '                 sgn = -1;
2fe60                 | '                 s++;
2fe60                 | '         }
2fe60                 | '         while (isdigit(*s)) {
2fe60                 | LR__4953
2fe60     00 13 C2 FA | 	rdbyte	arg01, _var01
2fe64                 | ' {
2fe64                 | '   return  (__ctype_get(c) & 0x02 ) ;
2fe64     80 12 36 F3 | 	fle	arg01, #128 wc
2fe68                 | '     return __ctype[c];
2fe68     02 00 00 FF 
2fe6c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fe70     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fe74     09 FB C1 FA | 	rdbyte	result1, arg01
2fe78     02 00 00 FF 
2fe7c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fe80     02 FA CD F7 | 	test	result1, #2 wz
2fe84     28 00 90 AD |  if_e	jmp	#LR__4955
2fe88     07 05 02 F6 | 	mov	_var03, _var08
2fe8c     02 04 66 F0 | 	shl	_var03, #2
2fe90     07 05 02 F1 | 	add	_var03, _var08
2fe94     01 04 66 F0 | 	shl	_var03, #1
2fe98     00 09 C2 FA | 	rdbyte	_var05, _var01
2fe9c     30 08 86 F1 | 	sub	_var05, #48
2fea0     04 05 02 F1 | 	add	_var03, _var05
2fea4     02 0F 02 F6 | 	mov	_var08, _var03
2fea8     01 00 06 F1 | 	add	_var01, #1
2feac     B0 FF 9F FD | 	jmp	#LR__4953
2feb0                 | LR__4954
2feb0                 | LR__4955
2feb0     07 00 00 FF 
2feb4     10 0E 06 FD | 	qmul	_var08, ##3600
2feb8     00 05 C2 FA | 	rdbyte	_var03, _var01
2febc     3A 04 0E F2 | 	cmp	_var03, #58 wz
2fec0     18 10 62 FD | 	getqx	_var09
2fec4     70 00 90 5D |  if_ne	jmp	#LR__4959
2fec8     00 0E 06 F6 | 	mov	_var08, #0
2fecc     01 00 06 F1 | 	add	_var01, #1
2fed0     97 28 48 FB | 	callpa	#(@LR__4957-@LR__4956)>>2,fcache_load_ptr_
2fed4                 | '                 x = 0;
2fed4                 | '                 s++;
2fed4                 | '                 while (isdigit(*s)) {
2fed4                 | LR__4956
2fed4     00 13 C2 FA | 	rdbyte	arg01, _var01
2fed8                 | ' {
2fed8                 | '   return  (__ctype_get(c) & 0x02 ) ;
2fed8     80 12 36 F3 | 	fle	arg01, #128 wc
2fedc                 | '     return __ctype[c];
2fedc     02 00 00 FF 
2fee0     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fee4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fee8     09 FB C1 FA | 	rdbyte	result1, arg01
2feec     02 00 00 FF 
2fef0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fef4     02 FA CD F7 | 	test	result1, #2 wz
2fef8     28 00 90 AD |  if_e	jmp	#LR__4958
2fefc     07 05 02 F6 | 	mov	_var03, _var08
2ff00     02 04 66 F0 | 	shl	_var03, #2
2ff04     07 05 02 F1 | 	add	_var03, _var08
2ff08     01 04 66 F0 | 	shl	_var03, #1
2ff0c     00 09 C2 FA | 	rdbyte	_var05, _var01
2ff10     30 08 86 F1 | 	sub	_var05, #48
2ff14     04 05 02 F1 | 	add	_var03, _var05
2ff18     02 0F 02 F6 | 	mov	_var08, _var03
2ff1c     01 00 06 F1 | 	add	_var01, #1
2ff20     B0 FF 9F FD | 	jmp	#LR__4956
2ff24                 | LR__4957
2ff24                 | LR__4958
2ff24     07 0D 02 F6 | 	mov	_var07, _var08
2ff28     04 0C 66 F0 | 	shl	_var07, #4
2ff2c     07 0D 82 F1 | 	sub	_var07, _var08
2ff30     02 0C 66 F0 | 	shl	_var07, #2
2ff34     06 11 02 F1 | 	add	_var09, _var07
2ff38                 | LR__4959
2ff38     02 00 00 FF 
2ff3c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2ff40     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2ff44     00 13 C2 FA | 	rdbyte	arg01, _var01
2ff48                 | ' {
2ff48                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2ff48     80 12 36 F3 | 	fle	arg01, #128 wc
2ff4c                 | '     return __ctype[c];
2ff4c     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
2ff50     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2ff54     09 FB C1 FA | 	rdbyte	result1, arg01
2ff58     02 00 00 FF 
2ff5c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2ff60     0C FA CD F7 | 	test	result1, #12 wz
2ff64     50 00 90 AD |  if_e	jmp	#LR__4962
2ff68     0A 03 68 FC | 	wrlong	#1, arg02
2ff6c                 | '                 *hasdst = 1;
2ff6c                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
2ff6c                 | LR__4960
2ff6c     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2ff70     44 00 90 AD |  if_e	jmp	#LR__4961
2ff74     00 13 C2 FA | 	rdbyte	arg01, _var01
2ff78                 | ' {
2ff78                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2ff78     80 12 36 F3 | 	fle	arg01, #128 wc
2ff7c                 | '     return __ctype[c];
2ff7c     02 00 00 FF 
2ff80     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2ff84     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2ff88     09 FB C1 FA | 	rdbyte	result1, arg01
2ff8c     02 00 00 FF 
2ff90     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2ff94     0C FA CD F7 | 	test	result1, #12 wz
2ff98     1C 00 90 AD |  if_e	jmp	#LR__4961
2ff9c     00 0B 02 F6 | 	mov	_var06, _var01
2ffa0     01 0A 06 F1 | 	add	_var06, #1
2ffa4     00 0D C2 FA | 	rdbyte	_var07, _var01
2ffa8     05 01 02 F6 | 	mov	_var01, _var06
2ffac     03 0D 42 FC | 	wrbyte	_var07, _var04
2ffb0     01 06 06 F1 | 	add	_var04, #1
2ffb4     B4 FF 9F FD | 	jmp	#LR__4960
2ffb8                 | LR__4961
2ffb8                 | LR__4962
2ffb8     03 01 48 FC | 	wrbyte	#0, _var04
2ffbc     02 00 00 FF 
2ffc0     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2ffc4     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2ffc8     02 00 00 FF 
2ffcc     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2ffd0     20 00 90 AD |  if_e	jmp	#LR__4963
2ffd4     02 00 00 FF 
2ffd8     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2ffdc     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2ffe0     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
2ffe4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2ffe8     02 00 00 FF 
2ffec     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2fff0     1C 00 90 FD | 	jmp	#LR__4964
2fff4                 | LR__4963
2fff4     02 00 00 FF 
2fff8     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
2fffc     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
30000     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
30004     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
30008     02 00 00 FF 
3000c     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
30010                 | LR__4964
30010     02 00 00 FF 
30014     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
30018     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
3001c     02 00 00 FF 
30020     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
30024     20 00 90 AD |  if_e	jmp	#LR__4965
30028     02 00 00 FF 
3002c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
30030     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
30034     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
30038     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
3003c     02 00 00 FF 
30040     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
30044     1C 00 90 FD | 	jmp	#LR__4966
30048                 | LR__4965
30048     02 00 00 FF 
3004c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
30050     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
30054     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
30058     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
3005c     02 00 00 FF 
30060     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
30064                 | LR__4966
30064     08 03 02 FD | 	qmul	_var02, _var09
30068                 | ' 		_tzname[1] = stdname;
30068                 | ' 
30068                 | '         return sgn * off;
30068     18 FA 61 FD | 	getqx	result1
3006c                 | LR__4967
3006c                 | _fatfs_cc___tzoffset_ret
3006c     2D 00 64 FD | 	ret
30070                 | 
30070                 | _fatfs_cc___indst
30070     10 12 06 F1 | 	add	arg01, #16
30074     09 01 02 FB | 	rdlong	_var01, arg01
30078     10 12 86 F1 | 	sub	arg01, #16
3007c     02 00 0E F2 | 	cmp	_var01, #2 wz
30080     30 00 90 5D |  if_ne	jmp	#LR__4970
30084     07 00 06 F6 | 	mov	_var01, #7
30088     18 12 06 F1 | 	add	arg01, #24
3008c     09 03 02 FB | 	rdlong	_var02, arg01
30090     01 01 02 F1 | 	add	_var01, _var02
30094     0C 12 86 F1 | 	sub	arg01, #12
30098     09 05 02 FB | 	rdlong	_var03, arg01
3009c     02 01 82 F1 | 	sub	_var01, _var03
300a0     00 00 56 F2 | 	cmps	_var01, #0 wc
300a4                 | '                         return 1;
300a4     01 FA 05 C6 |  if_b	mov	result1, #1
300a8     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
300ac                 | '                 return 0;
300ac     00 FA 05 F6 | 	mov	result1, #0
300b0     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
300b4                 | LR__4970
300b4     10 12 06 F1 | 	add	arg01, #16
300b8     09 01 02 FB | 	rdlong	_var01, arg01
300bc     10 12 86 F1 | 	sub	arg01, #16
300c0     0A 00 0E F2 | 	cmp	_var01, #10 wz
300c4     28 00 90 5D |  if_ne	jmp	#LR__4971
300c8     18 12 06 F1 | 	add	arg01, #24
300cc     09 01 02 FB | 	rdlong	_var01, arg01
300d0     0C 12 86 F1 | 	sub	arg01, #12
300d4     09 07 02 FB | 	rdlong	_var04, arg01
300d8     03 01 82 F1 | 	sub	_var01, _var04
300dc     00 00 56 F2 | 	cmps	_var01, #0 wc
300e0                 | '                         return 0;
300e0     00 FA 05 C6 |  if_b	mov	result1, #0
300e4     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
300e8                 | '                 return 1;
300e8     01 FA 05 F6 | 	mov	result1, #1
300ec     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
300f0                 | LR__4971
300f0                 | '         }
300f0                 | ' 
300f0                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
300f0     00 00 06 F6 | 	mov	_var01, #0
300f4     10 12 06 F1 | 	add	arg01, #16
300f8     09 03 02 FB | 	rdlong	_var02, arg01
300fc     10 12 86 F1 | 	sub	arg01, #16
30100     03 02 56 F2 | 	cmps	_var02, #3 wc
30104     10 00 90 CD |  if_b	jmp	#LR__4972
30108     10 12 06 F1 | 	add	arg01, #16
3010c     09 05 02 FB | 	rdlong	_var03, arg01
30110     0A 04 56 F2 | 	cmps	_var03, #10 wc
30114     01 00 06 C6 |  if_b	mov	_var01, #1
30118                 | LR__4972
30118     00 FB 01 F6 | 	mov	result1, _var01
3011c                 | _fatfs_cc___indst_ret
3011c     2D 00 64 FD | 	ret
30120                 | 
30120                 | ' 	
30120                 | ' 	FUNCTION pfunc(c as integer) as integer
30120                 | ___strs_cl_pfunc
30120                 | ' 		if (i < 16) then
30120     04 E4 05 F1 | 	add	objptr, #4
30124     F2 FA 01 FB | 	rdlong	result1, objptr
30128     04 E4 85 F1 | 	sub	objptr, #4
3012c     10 FA 55 F2 | 	cmps	result1, #16 wc
30130     2C 00 90 3D |  if_ae	jmp	#LR__4980
30134     F2 FA 01 FB | 	rdlong	result1, objptr
30138     04 E4 05 F1 | 	add	objptr, #4
3013c     F2 00 02 FB | 	rdlong	_var01, objptr
30140     FD 00 02 F1 | 	add	_var01, result1
30144     00 13 42 FC | 	wrbyte	arg01, _var01
30148     F2 FA 01 FB | 	rdlong	result1, objptr
3014c     01 FA 05 F1 | 	add	result1, #1
30150     F2 FA 61 FC | 	wrlong	result1, objptr
30154     04 E4 85 F1 | 	sub	objptr, #4
30158                 | ' 			p(i) = c
30158                 | ' 			i = i+1
30158                 | ' 			return 1
30158     01 FA 05 F6 | 	mov	result1, #1
3015c     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
30160                 | LR__4980
30160                 | ' 			return -1
30160     01 FA 65 F6 | 	neg	result1, #1
30164                 | ___strs_cl_pfunc_ret
30164     2D 00 64 FD | 	ret
30168                 | 
30168                 | __struct__s_vfs_file_t_putchar
30168     04 4A 05 F6 | 	mov	COUNT_, #4
3016c     A8 00 A0 FD | 	call	#pushregs_
30170     1C E4 05 F1 | 	add	objptr, #28
30174     F2 1E 0A FB | 	rdlong	local01, objptr wz
30178     1C E4 85 F1 | 	sub	objptr, #28
3017c     00 FA 05 A6 |  if_e	mov	result1, #0
30180     48 00 90 AD |  if_e	jmp	#LR__4990
30184     1C E4 05 F1 | 	add	objptr, #28
30188     F2 20 02 FB | 	rdlong	local02, objptr
3018c     10 23 02 F6 | 	mov	local03, local02
30190     1C E4 85 F1 | 	sub	objptr, #28
30194     13 22 46 F7 | 	zerox	local03, #19
30198     14 20 46 F0 | 	shr	local02, #20
3019c     02 20 66 F0 | 	shl	local02, #2
301a0     ED 20 02 F1 | 	add	local02, __methods__
301a4     10 21 02 FB | 	rdlong	local02, local02
301a8     F2 14 02 F6 | 	mov	arg02, objptr
301ac     F2 24 02 F6 | 	mov	local04, objptr
301b0     11 E5 01 F6 | 	mov	objptr, local03
301b4     2D 20 62 FD | 	call	local02
301b8     12 E5 01 F6 | 	mov	objptr, local04
301bc                 | '     return (i < 0) ? 0 : 1;
301bc     00 FA 55 F2 | 	cmps	result1, #0 wc
301c0     00 1E 06 C6 |  if_b	mov	local01, #0
301c4     01 1E 06 36 |  if_ae	mov	local01, #1
301c8     0F FB 01 F6 | 	mov	result1, local01
301cc                 | LR__4990
301cc     A7 F0 03 F6 | 	mov	ptra, fp
301d0     B2 00 A0 FD | 	call	#popregs_
301d4                 | __struct__s_vfs_file_t_putchar_ret
301d4     2D 00 64 FD | 	ret
301d8                 | 
301d8                 | __struct__s_vfs_file_t_getchar
301d8     03 4A 05 F6 | 	mov	COUNT_, #3
301dc     A8 00 A0 FD | 	call	#pushregs_
301e0     20 E4 05 F1 | 	add	objptr, #32
301e4     F2 12 0A FB | 	rdlong	arg01, objptr wz
301e8     20 E4 85 F1 | 	sub	objptr, #32
301ec     01 FA 65 A6 |  if_e	neg	result1, #1
301f0     38 00 90 AD |  if_e	jmp	#LR__5000
301f4                 | '     return getcf(__this);
301f4     20 E4 05 F1 | 	add	objptr, #32
301f8     F2 1E 02 FB | 	rdlong	local01, objptr
301fc     0F 21 02 F6 | 	mov	local02, local01
30200     20 E4 85 F1 | 	sub	objptr, #32
30204     13 20 46 F7 | 	zerox	local02, #19
30208     14 1E 46 F0 | 	shr	local01, #20
3020c     02 1E 66 F0 | 	shl	local01, #2
30210     ED 1E 02 F1 | 	add	local01, __methods__
30214     0F 1F 02 FB | 	rdlong	local01, local01
30218     F2 12 02 F6 | 	mov	arg01, objptr
3021c     F2 22 02 F6 | 	mov	local03, objptr
30220     10 E5 01 F6 | 	mov	objptr, local02
30224     2D 1E 62 FD | 	call	local01
30228     11 E5 01 F6 | 	mov	objptr, local03
3022c                 | LR__5000
3022c     A7 F0 03 F6 | 	mov	ptra, fp
30230     B2 00 A0 FD | 	call	#popregs_
30234                 | __struct__s_vfs_file_t_getchar_ret
30234     2D 00 64 FD | 	ret
30238                 | 
30238                 | __struct___bas_wrap_sender_tx
30238     03 4A 05 F6 | 	mov	COUNT_, #3
3023c     A8 00 A0 FD | 	call	#pushregs_
30240     F2 1E 02 FB | 	rdlong	local01, objptr
30244     0F 21 02 F6 | 	mov	local02, local01
30248     13 1E 46 F7 | 	zerox	local01, #19
3024c     14 20 46 F0 | 	shr	local02, #20
30250     02 20 66 F0 | 	shl	local02, #2
30254     ED 20 02 F1 | 	add	local02, __methods__
30258     10 21 02 FB | 	rdlong	local02, local02
3025c     F2 22 02 F6 | 	mov	local03, objptr
30260     0F E5 01 F6 | 	mov	objptr, local01
30264     2D 20 62 FD | 	call	local02
30268     11 E5 01 F6 | 	mov	objptr, local03
3026c     01 FA 05 F6 | 	mov	result1, #1
30270     A7 F0 03 F6 | 	mov	ptra, fp
30274     B2 00 A0 FD | 	call	#popregs_
30278                 | __struct___bas_wrap_sender_tx_ret
30278     2D 00 64 FD | 	ret
3027c                 | 
3027c                 | __struct___bas_wrap_sender_rx
3027c     03 4A 05 F6 | 	mov	COUNT_, #3
30280     A8 00 A0 FD | 	call	#pushregs_
30284     04 E4 05 F1 | 	add	objptr, #4
30288     F2 1E 02 FB | 	rdlong	local01, objptr
3028c     0F 21 02 F6 | 	mov	local02, local01
30290     04 E4 85 F1 | 	sub	objptr, #4
30294     13 20 46 F7 | 	zerox	local02, #19
30298     14 1E 46 F0 | 	shr	local01, #20
3029c     02 1E 66 F0 | 	shl	local01, #2
302a0     ED 1E 02 F1 | 	add	local01, __methods__
302a4     0F 1F 02 FB | 	rdlong	local01, local01
302a8     F2 22 02 F6 | 	mov	local03, objptr
302ac     10 E5 01 F6 | 	mov	objptr, local02
302b0     2D 1E 62 FD | 	call	local01
302b4     11 E5 01 F6 | 	mov	objptr, local03
302b8     A7 F0 03 F6 | 	mov	ptra, fp
302bc     B2 00 A0 FD | 	call	#popregs_
302c0                 | __struct___bas_wrap_sender_rx_ret
302c0     2D 00 64 FD | 	ret
302c4                 | 
302c4                 | __struct___bas_wrap_sender_close
302c4     03 4A 05 F6 | 	mov	COUNT_, #3
302c8     A8 00 A0 FD | 	call	#pushregs_
302cc     08 E4 05 F1 | 	add	objptr, #8
302d0     F2 1E 02 FB | 	rdlong	local01, objptr
302d4     0F 21 02 F6 | 	mov	local02, local01
302d8     08 E4 85 F1 | 	sub	objptr, #8
302dc     13 20 46 F7 | 	zerox	local02, #19
302e0     14 1E 46 F0 | 	shr	local01, #20
302e4     02 1E 66 F0 | 	shl	local01, #2
302e8     ED 1E 02 F1 | 	add	local01, __methods__
302ec     0F 1F 02 FB | 	rdlong	local01, local01
302f0     F2 22 02 F6 | 	mov	local03, objptr
302f4     10 E5 01 F6 | 	mov	objptr, local02
302f8     2D 1E 62 FD | 	call	local01
302fc     11 E5 01 F6 | 	mov	objptr, local03
30300     A7 F0 03 F6 | 	mov	ptra, fp
30304     B2 00 A0 FD | 	call	#popregs_
30308                 | __struct___bas_wrap_sender_close_ret
30308     2D 00 64 FD | 	ret
3030c                 | 
3030c                 | LR__5010
3030c     2F          | 	byte	"/"
3030d     00          | 	byte	0
3030e                 | LR__5011
3030e     69 6E 66    | 	byte	"inf"
30311     00          | 	byte	0
30312                 | LR__5012
30312     6E 61 6E    | 	byte	"nan"
30315     00          | 	byte	0
30316                 | LR__5013
30316                 | 	byte	
30316     00          | 	byte	0
30317                 | LR__5014
30317                 | 	byte	
30317     00          | 	byte	0
30318                 | LR__5015
30318                 | 	byte	
30318     00          | 	byte	0
30319                 | LR__5016
30319                 | 	byte	
30319     00          | 	byte	0
3031a                 | LR__5017
3031a                 | 	byte	
3031a     00          | 	byte	0
3031b                 | LR__5018
3031b                 | 	byte	
3031b     00          | 	byte	0
3031c                 | LR__5019
3031c                 | 	byte	
3031c     00          | 	byte	0
3031d                 | LR__5020
3031d                 | 	byte	
3031d     00          | 	byte	0
3031e                 | LR__5021
3031e     00          | 	byte	0
3031f     00          | 	byte	0
30320                 | LR__5022
30320     00          | 	byte	0
30321     00          | 	byte	0
30322                 | LR__5023
30322     00          | 	byte	0
30323     00          | 	byte	0
30324                 | LR__5024
30324     20 21 21 21 
30328     20 63 6F 72 
3032c     72 75 70 74 
30330     65 64 20 68 
30334     65 61 70 3F 
30338     3F 3F 20 21 
3033c     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
3033f     00          | 	byte	0
30340                 | LR__5025
30340     20 21 21 21 
30344     20 6F 75 74 
30348     20 6F 66 20 
3034c     68 65 61 70 
30350     20 6D 65 6D 
30354     6F 72 79 20 
30358     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
3035c     00          | 	byte	0
3035d                 | LR__5026
3035d     20 21 21 21 
30361     20 63 6F 72 
30365     72 75 70 74 
30369     65 64 20 68 
3036d     65 61 70 20 
30371     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
30375     00          | 	byte	0
30376                 | LR__5027
30376     00          | 	byte	0
30377     00          | 	byte	0
30378                 | LR__5028
30378     2E          | 	byte	"."
30379     00          | 	byte	0
3037a                 | LR__5029
3037a     00          | 	byte	0
3037b     00          | 	byte	0
3037c                 | LR__5030
3037c     00          | 	byte	0
3037d     00          | 	byte	0
3037e                 | LR__5031
3037e     00          | 	byte	0
3037f     00          | 	byte	0
30380                 | LR__5032
30380     2A 3A 3C 3E 
30384     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
30388     00          | 	byte	0
30389                 | LR__5033
30389     2B 2C 3B 3D 
3038d     5B 5D       | 	byte	"+,;=[]"
3038f     00          | 	byte	0
30390                 | LR__5034
30390     46 41 54 33 
30394     32 20 20 20 | 	byte	"FAT32   "
30398     00          | 	byte	0
30399                 | LR__5035
30399     54 5A       | 	byte	"TZ"
3039b     00          | 	byte	0
3039c                 | LR__5036
3039c     00          | 	byte	0
3039d     00          | 	byte	0
3039e                 | LR__5037
3039e                 | 	byte	
3039e     00          | 	byte	0
3039f                 | LR__5038
3039f                 | 	byte	
3039f     00          | 	byte	0
303a0                 | LR__5039
303a0                 | 	byte	
303a0     00          | 	byte	0
303a1                 | LR__5040
303a1                 | 	byte	
303a1     00          | 	byte	0
303a2                 | LR__5041
303a2     22          | 	byte	34
303a3     00          | 	byte	0
303a4                 | LR__5042
303a4     22          | 	byte	34
303a5     00          | 	byte	0
303a6                 | LR__5043
303a6     3A          | 	byte	":"
303a7     00          | 	byte	0
303a8                 | LR__5044
303a8                 | 	byte	
303a8     00          | 	byte	0
303a9                 | LR__5045
303a9                 | 	byte	
303a9     00          | 	byte	0
303aa                 | LR__5046
303aa                 | 	byte	
303aa     00          | 	byte	0
303ab                 | LR__5047
303ab                 | 	byte	
303ab     00          | 	byte	0
303ac                 | LR__5048
303ac                 | 	byte	
303ac     00          | 	byte	0
303ad                 | LR__5049
303ad                 | 	byte	
303ad     00          | 	byte	0
303ae                 | LR__5050
303ae                 | 	byte	
303ae     00          | 	byte	0
303af                 | LR__5051
303af     30          | 	byte	"0"
303b0     00          | 	byte	0
303b1                 | LR__5052
303b1     22          | 	byte	34
303b2     00          | 	byte	0
303b3                 | LR__5053
303b3     22          | 	byte	34
303b4     00          | 	byte	0
303b5                 | LR__5054
303b5     22          | 	byte	34
303b6     00          | 	byte	0
303b7                 | LR__5055
303b7     22          | 	byte	34
303b8     00          | 	byte	0
303b9                 | LR__5056
303b9     22          | 	byte	34
303ba     00          | 	byte	0
303bb                 | LR__5057
303bb     3E          | 	byte	">"
303bc     00          | 	byte	0
303bd                 | LR__5058
303bd     3C          | 	byte	"<"
303be     00          | 	byte	0
303bf                 | LR__5059
303bf     2B          | 	byte	"+"
303c0     00          | 	byte	0
303c1                 | LR__5060
303c1     2D          | 	byte	"-"
303c2     00          | 	byte	0
303c3                 | LR__5061
303c3     2A          | 	byte	"*"
303c4     00          | 	byte	0
303c5                 | LR__5062
303c5     2F          | 	byte	"/"
303c6     00          | 	byte	0
303c7                 | LR__5063
303c7     5E          | 	byte	"^"
303c8     00          | 	byte	0
303c9                 | LR__5064
303c9     3D          | 	byte	"="
303ca     00          | 	byte	0
303cb                 | LR__5065
303cb     2B          | 	byte	"+"
303cc     00          | 	byte	0
303cd                 | LR__5066
303cd     2B          | 	byte	"+"
303ce     00          | 	byte	0
303cf                 | LR__5067
303cf     2D          | 	byte	"-"
303d0     00          | 	byte	0
303d1                 | LR__5068
303d1     2D          | 	byte	"-"
303d2     00          | 	byte	0
303d3                 | LR__5069
303d3     3C          | 	byte	"<"
303d4     00          | 	byte	0
303d5                 | LR__5070
303d5     3E          | 	byte	">"
303d6     00          | 	byte	0
303d7                 | LR__5071
303d7     22          | 	byte	34
303d8     00          | 	byte	0
303d9                 | LR__5072
303d9     22          | 	byte	34
303da     00          | 	byte	0
303db                 | LR__5073
303db     65 6C 73 65 | 	byte	"else"
303df     00          | 	byte	0
303e0                 | LR__5074
303e0     74 68 65 6E | 	byte	"then"
303e4     00          | 	byte	0
303e5                 | LR__5075
303e5     2E          | 	byte	"."
303e6     00          | 	byte	0
303e7                 | LR__5076
303e7     3F          | 	byte	"?"
303e8     00          | 	byte	0
303e9                 | LR__5077
303e9     3F          | 	byte	"?"
303ea     00          | 	byte	0
303eb                 | LR__5078
303eb     6D 6F 75 73 
303ef     65          | 	byte	"mouse"
303f0     00          | 	byte	0
303f1                 | LR__5079
303f1     63 75 72 73 
303f5     6F 72       | 	byte	"cursor"
303f7     00          | 	byte	0
303f8                 | LR__5080
303f8     63 6C 69 63 
303fc     6B          | 	byte	"click"
303fd     00          | 	byte	0
303fe                 | LR__5081
303fe     6F 6E       | 	byte	"on"
30400     00          | 	byte	0
30401                 | LR__5082
30401     31          | 	byte	"1"
30402     00          | 	byte	0
30403                 | LR__5083
30403     6F 66 66    | 	byte	"off"
30406     00          | 	byte	0
30407                 | LR__5084
30407     30          | 	byte	"0"
30408     00          | 	byte	0
30409                 | LR__5085
30409     6D 6F 64 65 | 	byte	"mode"
3040d     00          | 	byte	0
3040e                 | LR__5086
3040e     6D 2E       | 	byte	"m."
30410     00          | 	byte	0
30411                 | LR__5087
30411     61 74 61 72 
30415     69          | 	byte	"atari"
30416     00          | 	byte	0
30417                 | LR__5088
30417     30          | 	byte	"0"
30418     00          | 	byte	0
30419                 | LR__5089
30419     70 63 5F 61 
3041d     6D 62 65 72 | 	byte	"pc_amber"
30421     00          | 	byte	0
30422                 | LR__5090
30422     31          | 	byte	"1"
30423     00          | 	byte	0
30424                 | LR__5091
30424     70 63 5F 67 
30428     72 65 65 6E | 	byte	"pc_green"
3042c     00          | 	byte	0
3042d                 | LR__5092
3042d     32          | 	byte	"2"
3042e     00          | 	byte	0
3042f                 | LR__5093
3042f     70 63 5F 77 
30433     68 69 74 65 | 	byte	"pc_white"
30437     00          | 	byte	0
30438                 | LR__5094
30438     33          | 	byte	"3"
30439     00          | 	byte	0
3043a                 | LR__5095
3043a     73 74       | 	byte	"st"
3043c     00          | 	byte	0
3043d                 | LR__5096
3043d     34          | 	byte	"4"
3043e     00          | 	byte	0
3043f                 | LR__5097
3043f                 | 	byte	
3043f     00          | 	byte	0
30440                 | LR__5098
30440     6C 6F 61 64 | 	byte	"load"
30444     00          | 	byte	0
30445                 | LR__5099
30445     73 61 76 65 | 	byte	"save"
30449     00          | 	byte	0
3044a                 | LR__5100
3044a     62 72 75 6E | 	byte	"brun"
3044e     00          | 	byte	0
3044f                 | LR__5101
3044f     72 75 6E    | 	byte	"run"
30452     00          | 	byte	0
30453                 | LR__5102
30453     6C 6F 2E    | 	byte	"lo."
30456     00          | 	byte	0
30457                 | LR__5103
30457     73 2E       | 	byte	"s."
30459     00          | 	byte	0
3045a                 | LR__5104
3045a     62 72 2E    | 	byte	"br."
3045d     00          | 	byte	0
3045e                 | LR__5105
3045e     65 6E 74 65 
30462     72          | 	byte	"enter"
30463     00          | 	byte	0
30464                 | LR__5106
30464     65 2E       | 	byte	"e."
30466     00          | 	byte	0
30467                 | LR__5107
30467                 | 	byte	
30467     00          | 	byte	0
30468                 | LR__5108
30468                 | 	byte	
30468     00          | 	byte	0
30469                 | LR__5109
30469                 | 	byte	
30469     00          | 	byte	0
3046a                 | LR__5110
3046a                 | 	byte	
3046a     00          | 	byte	0
3046b                 | LR__5111
3046b                 | 	byte	
3046b     00          | 	byte	0
3046c                 | LR__5112
3046c     52 65 61 64 
30470     79          | 	byte	"Ready"
30471     00          | 	byte	0
30472                 | LR__5113
30472     2B          | 	byte	"+"
30473     00          | 	byte	0
30474                 | LR__5114
30474     2D          | 	byte	"-"
30475     00          | 	byte	0
30476                 | LR__5115
30476     6F 72       | 	byte	"or"
30478     00          | 	byte	0
30479                 | LR__5116
30479     78 6F 72    | 	byte	"xor"
3047c     00          | 	byte	0
3047d                 | LR__5117
3047d     2A          | 	byte	"*"
3047e     00          | 	byte	0
3047f                 | LR__5118
3047f     2F          | 	byte	"/"
30480     00          | 	byte	0
30481                 | LR__5119
30481     61 6E 64    | 	byte	"and"
30484     00          | 	byte	0
30485                 | LR__5120
30485     64 69 76    | 	byte	"div"
30488     00          | 	byte	0
30489                 | LR__5121
30489     6D 6F 64    | 	byte	"mod"
3048c     00          | 	byte	0
3048d                 | LR__5122
3048d     73 68 6C    | 	byte	"shl"
30490     00          | 	byte	0
30491                 | LR__5123
30491     73 68 72    | 	byte	"shr"
30494     00          | 	byte	0
30495                 | LR__5124
30495     5E          | 	byte	"^"
30496     00          | 	byte	0
30497                 | LR__5125
30497     6E 6F 74    | 	byte	"not"
3049a     00          | 	byte	0
3049b                 | LR__5126
3049b     40          | 	byte	"@"
3049c     00          | 	byte	0
3049d                 | LR__5127
3049d     3D          | 	byte	"="
3049e     00          | 	byte	0
3049f                 | LR__5128
3049f     3E 3D       | 	byte	">="
304a1     00          | 	byte	0
304a2                 | LR__5129
304a2     3C 3D       | 	byte	"<="
304a4     00          | 	byte	0
304a5                 | LR__5130
304a5     3C          | 	byte	"<"
304a6     00          | 	byte	0
304a7                 | LR__5131
304a7     3E          | 	byte	">"
304a8     00          | 	byte	0
304a9                 | LR__5132
304a9     3C 3E       | 	byte	"<>"
304ab     00          | 	byte	0
304ac                 | LR__5133
304ac     2B 2B       | 	byte	"++"
304ae     00          | 	byte	0
304af                 | LR__5134
304af     2D 2D       | 	byte	"--"
304b1     00          | 	byte	0
304b2                 | LR__5135
304b2     23          | 	byte	"#"
304b3     00          | 	byte	0
304b4                 | LR__5136
304b4     30          | 	byte	"0"
304b5     00          | 	byte	0
304b6                 | LR__5137
304b6     39          | 	byte	"9"
304b7     00          | 	byte	0
304b8                 | LR__5138
304b8     23 72 65 61 
304bc     64          | 	byte	"#read"
304bd     00          | 	byte	0
304be                 | LR__5139
304be     23 77 72 69 
304c2     74 65       | 	byte	"#write"
304c4     00          | 	byte	0
304c5                 | LR__5140
304c5     23 61 70 70 
304c9     65 6E 64    | 	byte	"#append"
304cc     00          | 	byte	0
304cd                 | LR__5141
304cd     23          | 	byte	"#"
304ce     00          | 	byte	0
304cf                 | LR__5142
304cf     23          | 	byte	"#"
304d0     00          | 	byte	0
304d1                 | LR__5143
304d1     2D          | 	byte	"-"
304d2     00          | 	byte	0
304d3                 | LR__5144
304d3     30          | 	byte	"0"
304d4     00          | 	byte	0
304d5                 | LR__5145
304d5     63          | 	byte	"c"
304d6     00          | 	byte	0
304d7                 | LR__5146
304d7     63 23       | 	byte	"c#"
304d9     00          | 	byte	0
304da                 | LR__5147
304da     64          | 	byte	"d"
304db     00          | 	byte	0
304dc                 | LR__5148
304dc     64 23       | 	byte	"d#"
304de     00          | 	byte	0
304df                 | LR__5149
304df     65          | 	byte	"e"
304e0     00          | 	byte	0
304e1                 | LR__5150
304e1     66          | 	byte	"f"
304e2     00          | 	byte	0
304e3                 | LR__5151
304e3     66 23       | 	byte	"f#"
304e5     00          | 	byte	0
304e6                 | LR__5152
304e6     67          | 	byte	"g"
304e7     00          | 	byte	0
304e8                 | LR__5153
304e8     67 23       | 	byte	"g#"
304ea     00          | 	byte	0
304eb                 | LR__5154
304eb     61          | 	byte	"a"
304ec     00          | 	byte	0
304ed                 | LR__5155
304ed     61 23       | 	byte	"a#"
304ef     00          | 	byte	0
304f0                 | LR__5156
304f0     68          | 	byte	"h"
304f1     00          | 	byte	0
304f2                 | LR__5157
304f2     62          | 	byte	"b"
304f3     00          | 	byte	0
304f4                 | LR__5158
304f4     2B          | 	byte	"+"
304f5     00          | 	byte	0
304f6                 | LR__5159
304f6     2D          | 	byte	"-"
304f7     00          | 	byte	0
304f8                 | LR__5160
304f8     3D          | 	byte	"="
304f9     00          | 	byte	0
304fa                 | LR__5161
304fa     2C          | 	byte	","
304fb     00          | 	byte	0
304fc                 | LR__5162
304fc     2A          | 	byte	"*"
304fd     00          | 	byte	0
304fe                 | LR__5163
304fe     2F          | 	byte	"/"
304ff     00          | 	byte	0
30500                 | LR__5164
30500     3B          | 	byte	";"
30501     00          | 	byte	0
30502                 | LR__5165
30502     22          | 	byte	34
30503     00          | 	byte	0
30504                 | LR__5166
30504     5E          | 	byte	"^"
30505     00          | 	byte	0
30506                 | LR__5167
30506     29          | 	byte	")"
30507     00          | 	byte	0
30508                 | LR__5168
30508     28          | 	byte	"("
30509     00          | 	byte	0
3050a                 | LR__5169
3050a     3A          | 	byte	":"
3050b     00          | 	byte	0
3050c                 | LR__5170
3050c     20          | 	byte	" "
3050d     00          | 	byte	0
3050e                 | LR__5171
3050e     3E          | 	byte	">"
3050f     00          | 	byte	0
30510                 | LR__5172
30510     3C          | 	byte	"<"
30511     00          | 	byte	0
30512                 | LR__5173
30512     3D          | 	byte	"="
30513     00          | 	byte	0
30514                 | LR__5174
30514     62 65 65 70 | 	byte	"beep"
30518     00          | 	byte	0
30519                 | LR__5175
30519     62 2E       | 	byte	"b."
3051b     00          | 	byte	0
3051c                 | LR__5176
3051c     62 6F 78    | 	byte	"box"
3051f     00          | 	byte	0
30520                 | LR__5177
30520     62 72 75 6E | 	byte	"brun"
30524     00          | 	byte	0
30525                 | LR__5178
30525     62 72 2E    | 	byte	"br."
30528     00          | 	byte	0
30529                 | LR__5179
30529     63 68 61 6E 
3052d     67 65 66 72 
30531     65 71       | 	byte	"changefreq"
30533     00          | 	byte	0
30534                 | LR__5180
30534     63 66 2E    | 	byte	"cf."
30537     00          | 	byte	0
30538                 | LR__5181
30538     63 68 61 6E 
3053c     67 65 70 61 
30540     6E          | 	byte	"changepan"
30541     00          | 	byte	0
30542                 | LR__5182
30542     63 70 2E    | 	byte	"cp."
30545     00          | 	byte	0
30546                 | LR__5183
30546     63 68 61 6E 
3054a     67 65 76 6F 
3054e     6C          | 	byte	"changevol"
3054f     00          | 	byte	0
30550                 | LR__5184
30550     63 76 2E    | 	byte	"cv."
30553     00          | 	byte	0
30554                 | LR__5185
30554     63 68 61 6E 
30558     67 65 77 61 
3055c     76 65       | 	byte	"changewave"
3055e     00          | 	byte	0
3055f                 | LR__5186
3055f     63 77 2E    | 	byte	"cw."
30562     00          | 	byte	0
30563                 | LR__5187
30563     63 69 72 63 
30567     6C 65       | 	byte	"circle"
30569     00          | 	byte	0
3056a                 | LR__5188
3056a     63 69 2E    | 	byte	"ci."
3056d     00          | 	byte	0
3056e                 | LR__5189
3056e     63 6C 69 63 
30572     6B          | 	byte	"click"
30573     00          | 	byte	0
30574                 | LR__5190
30574     63 6C 6F 73 
30578     65          | 	byte	"close"
30579     00          | 	byte	0
3057a                 | LR__5191
3057a     63 6C 73    | 	byte	"cls"
3057d     00          | 	byte	0
3057e                 | LR__5192
3057e     63 6F 6C 6F 
30582     72          | 	byte	"color"
30583     00          | 	byte	0
30584                 | LR__5193
30584     63 2E       | 	byte	"c."
30586     00          | 	byte	0
30587                 | LR__5194
30587     63 73 61 76 
3058b     65          | 	byte	"csave"
3058c     00          | 	byte	0
3058d                 | LR__5195
3058d     63 73 2E    | 	byte	"cs."
30590     00          | 	byte	0
30591                 | LR__5196
30591     63 75 72 73 
30595     6F 72       | 	byte	"cursor"
30597     00          | 	byte	0
30598                 | LR__5197
30598     64 65 66 73 
3059c     6E 64       | 	byte	"defsnd"
3059e     00          | 	byte	0
3059f                 | LR__5198
3059f     64 65 66 65 
305a3     6E 76       | 	byte	"defenv"
305a5     00          | 	byte	0
305a6                 | LR__5199
305a6     64 65 66 73 
305aa     70 72 69 74 
305ae     65          | 	byte	"defsprite"
305af     00          | 	byte	0
305b0                 | LR__5200
305b0     64 73 2E    | 	byte	"ds."
305b3     00          | 	byte	0
305b4                 | LR__5201
305b4     64 65 67    | 	byte	"deg"
305b7     00          | 	byte	0
305b8                 | LR__5202
305b8     64 69 6D    | 	byte	"dim"
305bb     00          | 	byte	0
305bc                 | LR__5203
305bc     64 69 72    | 	byte	"dir"
305bf     00          | 	byte	0
305c0                 | LR__5204
305c0     64 70 6F 6B 
305c4     65          | 	byte	"dpoke"
305c5     00          | 	byte	0
305c6                 | LR__5205
305c6     64 72 61 77 | 	byte	"draw"
305ca     00          | 	byte	0
305cb                 | LR__5206
305cb     64 72 2E    | 	byte	"dr."
305ce     00          | 	byte	0
305cf                 | LR__5207
305cf     65 6C 73 65 | 	byte	"else"
305d3     00          | 	byte	0
305d4                 | LR__5208
305d4     65 6E 64    | 	byte	"end"
305d7     00          | 	byte	0
305d8                 | LR__5209
305d8     65 6E 74 65 
305dc     72          | 	byte	"enter"
305dd     00          | 	byte	0
305de                 | LR__5210
305de     65 2E       | 	byte	"e."
305e0     00          | 	byte	0
305e1                 | LR__5211
305e1     66 63 69 72 
305e5     63 6C 65    | 	byte	"fcircle"
305e8     00          | 	byte	0
305e9                 | LR__5212
305e9     66 63 2E    | 	byte	"fc."
305ec     00          | 	byte	0
305ed                 | LR__5213
305ed     66 69 6C 6C | 	byte	"fill"
305f1     00          | 	byte	0
305f2                 | LR__5214
305f2     66 69 2E    | 	byte	"fi."
305f5     00          | 	byte	0
305f6                 | LR__5215
305f6     66 6F 6E 74 | 	byte	"font"
305fa     00          | 	byte	0
305fb                 | LR__5216
305fb     66 6F 72    | 	byte	"for"
305fe     00          | 	byte	0
305ff                 | LR__5217
305ff     66 2E       | 	byte	"f."
30601     00          | 	byte	0
30602                 | LR__5218
30602     66 72 61 6D 
30606     65          | 	byte	"frame"
30607     00          | 	byte	0
30608                 | LR__5219
30608     66 72 2E    | 	byte	"fr."
3060b     00          | 	byte	0
3060c                 | LR__5220
3060c     67 65 74    | 	byte	"get"
3060f     00          | 	byte	0
30610                 | LR__5221
30610     67 6F 73 75 
30614     62          | 	byte	"gosub"
30615     00          | 	byte	0
30616                 | LR__5222
30616     67 6F 74 6F | 	byte	"goto"
3061a     00          | 	byte	0
3061b                 | LR__5223
3061b     67 2E       | 	byte	"g."
3061d     00          | 	byte	0
3061e                 | LR__5224
3061e     69 66       | 	byte	"if"
30620     00          | 	byte	0
30621                 | LR__5225
30621     69 6E 6B    | 	byte	"ink"
30624     00          | 	byte	0
30625                 | LR__5226
30625     69 2E       | 	byte	"i."
30627     00          | 	byte	0
30628                 | LR__5227
30628     6C 69 73 74 | 	byte	"list"
3062c     00          | 	byte	0
3062d                 | LR__5228
3062d     6C 2E       | 	byte	"l."
3062f     00          | 	byte	0
30630                 | LR__5229
30630     6C 6F 61 64 | 	byte	"load"
30634     00          | 	byte	0
30635                 | LR__5230
30635     6C 6F 2E    | 	byte	"lo."
30638     00          | 	byte	0
30639                 | LR__5231
30639     6C 70 6F 6B 
3063d     65          | 	byte	"lpoke"
3063e     00          | 	byte	0
3063f                 | LR__5232
3063f     6D 6F 64 65 | 	byte	"mode"
30643     00          | 	byte	0
30644                 | LR__5233
30644     6D 2E       | 	byte	"m."
30646     00          | 	byte	0
30647                 | LR__5234
30647     6D 6F 75 73 
3064b     65          | 	byte	"mouse"
3064c     00          | 	byte	0
3064d                 | LR__5235
3064d     6E 65 77    | 	byte	"new"
30650     00          | 	byte	0
30651                 | LR__5236
30651     6E 65 78 74 | 	byte	"next"
30655     00          | 	byte	0
30656                 | LR__5237
30656     6E 2E       | 	byte	"n."
30658     00          | 	byte	0
30659                 | LR__5238
30659     6F 70 65 6E | 	byte	"open"
3065d     00          | 	byte	0
3065e                 | LR__5239
3065e     70 61 70 65 
30662     72          | 	byte	"paper"
30663     00          | 	byte	0
30664                 | LR__5240
30664     70 61 2E    | 	byte	"pa."
30667     00          | 	byte	0
30668                 | LR__5241
30668     70 69 6E 66 
3066c     6C 6F 61 74 | 	byte	"pinfloat"
30670     00          | 	byte	0
30671                 | LR__5242
30671     70 69 6E 68 
30675     69          | 	byte	"pinhi"
30676     00          | 	byte	0
30677                 | LR__5243
30677     70 69 6E 6C 
3067b     6F          | 	byte	"pinlo"
3067c     00          | 	byte	0
3067d                 | LR__5244
3067d     70 69 6E 73 
30681     74 61 72 74 | 	byte	"pinstart"
30685     00          | 	byte	0
30686                 | LR__5245
30686     70 69 6E 74 
3068a     6F 67 67 6C 
3068e     65          | 	byte	"pintoggle"
3068f     00          | 	byte	0
30690                 | LR__5246
30690     70 69 6E 77 
30694     72 69 74 65 | 	byte	"pinwrite"
30698     00          | 	byte	0
30699                 | LR__5247
30699     70 6C 61 79 | 	byte	"play"
3069d     00          | 	byte	0
3069e                 | LR__5248
3069e     70 2E       | 	byte	"p."
306a0     00          | 	byte	0
306a1                 | LR__5249
306a1     70 6C 6F 74 | 	byte	"plot"
306a5     00          | 	byte	0
306a6                 | LR__5250
306a6     70 6C 2E    | 	byte	"pl."
306a9     00          | 	byte	0
306aa                 | LR__5251
306aa     70 6F 6B 65 | 	byte	"poke"
306ae     00          | 	byte	0
306af                 | LR__5252
306af     70 6F 70    | 	byte	"pop"
306b2     00          | 	byte	0
306b3                 | LR__5253
306b3     70 6F 73 69 
306b7     74 69 6F 6E | 	byte	"position"
306bb     00          | 	byte	0
306bc                 | LR__5254
306bc     70 6F 73 2E | 	byte	"pos."
306c0     00          | 	byte	0
306c1                 | LR__5255
306c1     70 72 69 6E 
306c5     74          | 	byte	"print"
306c6     00          | 	byte	0
306c7                 | LR__5256
306c7     3F          | 	byte	"?"
306c8     00          | 	byte	0
306c9                 | LR__5257
306c9     70 75 74    | 	byte	"put"
306cc     00          | 	byte	0
306cd                 | LR__5258
306cd     72 61 64    | 	byte	"rad"
306d0     00          | 	byte	0
306d1                 | LR__5259
306d1     72 65 6C 65 
306d5     61 73 65    | 	byte	"release"
306d8     00          | 	byte	0
306d9                 | LR__5260
306d9     72 65 6D    | 	byte	"rem"
306dc     00          | 	byte	0
306dd                 | LR__5261
306dd     27          | 	byte	"'"
306de     00          | 	byte	0
306df                 | LR__5262
306df     72 65 74 75 
306e3     72 6E       | 	byte	"return"
306e5     00          | 	byte	0
306e6                 | LR__5263
306e6     72 75 6E    | 	byte	"run"
306e9     00          | 	byte	0
306ea                 | LR__5264
306ea     73 61 76 65 | 	byte	"save"
306ee     00          | 	byte	0
306ef                 | LR__5265
306ef     73 2E       | 	byte	"s."
306f1     00          | 	byte	0
306f2                 | LR__5266
306f2     73 65 74 64 
306f6     65 6C 61 79 | 	byte	"setdelay"
306fa     00          | 	byte	0
306fb                 | LR__5267
306fb     73 64 2E    | 	byte	"sd."
306fe     00          | 	byte	0
306ff                 | LR__5268
306ff     73 65 74 65 
30703     6E 76       | 	byte	"setenv"
30705     00          | 	byte	0
30706                 | LR__5269
30706     73 65 2E    | 	byte	"se."
30709     00          | 	byte	0
3070a                 | LR__5270
3070a     73 65 74 6C 
3070e     65 6E       | 	byte	"setlen"
30710     00          | 	byte	0
30711                 | LR__5271
30711     73 6C 2E    | 	byte	"sl."
30714     00          | 	byte	0
30715                 | LR__5272
30715     73 65 74 70 
30719     61 6E       | 	byte	"setpan"
3071b     00          | 	byte	0
3071c                 | LR__5273
3071c     73 70       | 	byte	"sp"
3071e     00          | 	byte	0
3071f                 | LR__5274
3071f     73 65 74 73 
30723     75 73 74 61 
30727     69 6E       | 	byte	"setsustain"
30729     00          | 	byte	0
3072a                 | LR__5275
3072a     73 73 2E    | 	byte	"ss."
3072d     00          | 	byte	0
3072e                 | LR__5276
3072e     73 65 74 76 
30732     6F 6C       | 	byte	"setvol"
30734     00          | 	byte	0
30735                 | LR__5277
30735     73 76 2E    | 	byte	"sv."
30738     00          | 	byte	0
30739                 | LR__5278
30739     73 65 74 77 
3073d     61 76 65    | 	byte	"setwave"
30740     00          | 	byte	0
30741                 | LR__5279
30741     73 77 2E    | 	byte	"sw."
30744     00          | 	byte	0
30745                 | LR__5280
30745     73 65 74 77 
30749     61 76       | 	byte	"setwav"
3074b     00          | 	byte	0
3074c                 | LR__5281
3074c     73 68 75 74 
30750     75 70       | 	byte	"shutup"
30752     00          | 	byte	0
30753                 | LR__5282
30753     73 68 2E    | 	byte	"sh."
30756     00          | 	byte	0
30757                 | LR__5283
30757     73 6F 75 6E 
3075b     64          | 	byte	"sound"
3075c     00          | 	byte	0
3075d                 | LR__5284
3075d     73 6F 2E    | 	byte	"so."
30760     00          | 	byte	0
30761                 | LR__5285
30761     73 70 72 69 
30765     74 65       | 	byte	"sprite"
30767     00          | 	byte	0
30768                 | LR__5286
30768     73 70 72 2E | 	byte	"spr."
3076c     00          | 	byte	0
3076d                 | LR__5287
3076d     74 68 65 6E | 	byte	"then"
30771     00          | 	byte	0
30772                 | LR__5288
30772     77 61 69 74 
30776     6D 73       | 	byte	"waitms"
30778     00          | 	byte	0
30779                 | LR__5289
30779     77 61 69 74 
3077d     63 6C 6F 63 
30781     6B          | 	byte	"waitclock"
30782     00          | 	byte	0
30783                 | LR__5290
30783     77 63 2E    | 	byte	"wc."
30786     00          | 	byte	0
30787                 | LR__5291
30787     77 61 69 74 
3078b     76 62 6C    | 	byte	"waitvbl"
3078e     00          | 	byte	0
3078f                 | LR__5292
3078f     77 76 2E    | 	byte	"wv."
30792     00          | 	byte	0
30793                 | LR__5293
30793     77 78 70 69 
30797     6E          | 	byte	"wxpin"
30798     00          | 	byte	0
30799                 | LR__5294
30799     77 79 70 69 
3079d     6E          | 	byte	"wypin"
3079e     00          | 	byte	0
3079f                 | LR__5295
3079f     61 62 73    | 	byte	"abs"
307a2     00          | 	byte	0
307a3                 | LR__5296
307a3     61 63 6F 73 | 	byte	"acos"
307a7     00          | 	byte	0
307a8                 | LR__5297
307a8     61 64 72    | 	byte	"adr"
307ab     00          | 	byte	0
307ac                 | LR__5298
307ac     61 64 64 72 | 	byte	"addr"
307b0     00          | 	byte	0
307b1                 | LR__5299
307b1     61 73 63    | 	byte	"asc"
307b4     00          | 	byte	0
307b5                 | LR__5300
307b5     61 73 69 6E | 	byte	"asin"
307b9     00          | 	byte	0
307ba                 | LR__5301
307ba     61 74 6E    | 	byte	"atn"
307bd     00          | 	byte	0
307be                 | LR__5302
307be     62 69 6E 24 | 	byte	"bin$"
307c2     00          | 	byte	0
307c3                 | LR__5303
307c3     63 68 72 24 | 	byte	"chr$"
307c7     00          | 	byte	0
307c8                 | LR__5304
307c8     63 6F 73    | 	byte	"cos"
307cb     00          | 	byte	0
307cc                 | LR__5305
307cc     64 70 65 65 
307d0     6B          | 	byte	"dpeek"
307d1     00          | 	byte	0
307d2                 | LR__5306
307d2     66 72 65    | 	byte	"fre"
307d5     00          | 	byte	0
307d6                 | LR__5307
307d6     67 65 74 70 
307da     69 78 65 6C | 	byte	"getpixel"
307de     00          | 	byte	0
307df                 | LR__5308
307df     67 65 2E    | 	byte	"ge."
307e2     00          | 	byte	0
307e3                 | LR__5309
307e3     67 65 74 65 
307e7     6E 76 73 75 
307eb     73 74 61 69 
307ef     6E          | 	byte	"getenvsustain"
307f0     00          | 	byte	0
307f1                 | LR__5310
307f1     67 65 74 6E 
307f5     6F 74 65 76 
307f9     61 6C 75 65 | 	byte	"getnotevalue"
307fd     00          | 	byte	0
307fe                 | LR__5311
307fe     67 65 74 74 
30802     69 6D 65    | 	byte	"gettime"
30805     00          | 	byte	0
30806                 | LR__5312
30806     68 65 78 24 | 	byte	"hex$"
3080a     00          | 	byte	0
3080b                 | LR__5313
3080b     69 6E 6B 65 
3080f     79 24       | 	byte	"inkey$"
30811     00          | 	byte	0
30812                 | LR__5314
30812     69 6E 74    | 	byte	"int"
30815     00          | 	byte	0
30816                 | LR__5315
30816     6C 65 66 74 
3081a     24          | 	byte	"left$"
3081b     00          | 	byte	0
3081c                 | LR__5316
3081c     6C 65 6E    | 	byte	"len"
3081f     00          | 	byte	0
30820                 | LR__5317
30820     6C 6F 67    | 	byte	"log"
30823     00          | 	byte	0
30824                 | LR__5318
30824     6C 70 65 65 
30828     6B          | 	byte	"lpeek"
30829     00          | 	byte	0
3082a                 | LR__5319
3082a     6D 69 64 24 | 	byte	"mid$"
3082e     00          | 	byte	0
3082f                 | LR__5320
3082f     6D 6F 75 73 
30833     65 6B       | 	byte	"mousek"
30835     00          | 	byte	0
30836                 | LR__5321
30836     6D 6F 75 73 
3083a     65 77       | 	byte	"mousew"
3083c     00          | 	byte	0
3083d                 | LR__5322
3083d     6D 6F 75 73 
30841     65 78       | 	byte	"mousex"
30843     00          | 	byte	0
30844                 | LR__5323
30844     6D 6F 75 73 
30848     65 79       | 	byte	"mousey"
3084a     00          | 	byte	0
3084b                 | LR__5324
3084b     70 65 65 6B | 	byte	"peek"
3084f     00          | 	byte	0
30850                 | LR__5325
30850     70 69 6E 72 
30854     65 61 64    | 	byte	"pinread"
30857     00          | 	byte	0
30858                 | LR__5326
30858     72 64 70 69 
3085c     6E          | 	byte	"rdpin"
3085d     00          | 	byte	0
3085e                 | LR__5327
3085e     72 69 67 68 
30862     74 24       | 	byte	"right$"
30864     00          | 	byte	0
30865                 | LR__5328
30865     72 71 70 69 
30869     6E          | 	byte	"rqpin"
3086a     00          | 	byte	0
3086b                 | LR__5329
3086b     72 6F 75 6E 
3086f     64          | 	byte	"round"
30870     00          | 	byte	0
30871                 | LR__5330
30871     72 6E 64    | 	byte	"rnd"
30874     00          | 	byte	0
30875                 | LR__5331
30875     73 69 6E    | 	byte	"sin"
30878     00          | 	byte	0
30879                 | LR__5332
30879     73 71 72    | 	byte	"sqr"
3087c     00          | 	byte	0
3087d                 | LR__5333
3087d     73 74 69 63 
30881     6B          | 	byte	"stick"
30882     00          | 	byte	0
30883                 | LR__5334
30883     73 74 72 69 
30887     67          | 	byte	"strig"
30888     00          | 	byte	0
30889                 | LR__5335
30889     73 74 72 24 | 	byte	"str$"
3088d     00          | 	byte	0
3088e                 | LR__5336
3088e     74 61 6E    | 	byte	"tan"
30891     00          | 	byte	0
30892                 | LR__5337
30892     76 61 6C    | 	byte	"val"
30895     00          | 	byte	0
30896                 | LR__5338
30896     76 61 72 70 
3089a     74 72       | 	byte	"varptr"
3089c     00          | 	byte	0
3089d                 | LR__5339
3089d     61          | 	byte	"a"
3089e     00          | 	byte	0
3089f                 | LR__5340
3089f     7A          | 	byte	"z"
308a0     00          | 	byte	0
308a1                 | LR__5341
308a1     5F          | 	byte	"_"
308a2     00          | 	byte	0
308a3                 | LR__5342
308a3     61          | 	byte	"a"
308a4     00          | 	byte	0
308a5                 | LR__5343
308a5     7A          | 	byte	"z"
308a6     00          | 	byte	0
308a7                 | LR__5344
308a7     30          | 	byte	"0"
308a8     00          | 	byte	0
308a9                 | LR__5345
308a9     39          | 	byte	"9"
308aa     00          | 	byte	0
308ab                 | LR__5346
308ab     5F          | 	byte	"_"
308ac     00          | 	byte	0
308ad                 | LR__5347
308ad     2E          | 	byte	"."
308ae     00          | 	byte	0
308af                 | LR__5348
308af     61          | 	byte	"a"
308b0     00          | 	byte	0
308b1                 | LR__5349
308b1     7A          | 	byte	"z"
308b2     00          | 	byte	0
308b3                 | LR__5350
308b3     30          | 	byte	"0"
308b4     00          | 	byte	0
308b5                 | LR__5351
308b5     39          | 	byte	"9"
308b6     00          | 	byte	0
308b7                 | LR__5352
308b7     5F          | 	byte	"_"
308b8     00          | 	byte	0
308b9                 | LR__5353
308b9     24          | 	byte	"$"
308ba     00          | 	byte	0
308bb                 | LR__5354
308bb     25          | 	byte	"%"
308bc     00          | 	byte	0
308bd                 | LR__5355
308bd     21          | 	byte	"!"
308be     00          | 	byte	0
308bf                 | LR__5356
308bf     30          | 	byte	"0"
308c0     00          | 	byte	0
308c1                 | LR__5357
308c1     39          | 	byte	"9"
308c2     00          | 	byte	0
308c3                 | LR__5358
308c3     2E          | 	byte	"."
308c4     00          | 	byte	0
308c5                 | LR__5359
308c5     24          | 	byte	"$"
308c6     00          | 	byte	0
308c7                 | LR__5360
308c7     25          | 	byte	"%"
308c8     00          | 	byte	0
308c9                 | LR__5361
308c9     2D          | 	byte	"-"
308ca     00          | 	byte	0
308cb                 | LR__5362
308cb     2E          | 	byte	"."
308cc     00          | 	byte	0
308cd                 | LR__5363
308cd     24          | 	byte	"$"
308ce     00          | 	byte	0
308cf                 | LR__5364
308cf     25          | 	byte	"%"
308d0     00          | 	byte	0
308d1                 | LR__5365
308d1     30          | 	byte	"0"
308d2     00          | 	byte	0
308d3                 | LR__5366
308d3     39          | 	byte	"9"
308d4     00          | 	byte	0
308d5                 | LR__5367
308d5     5F          | 	byte	"_"
308d6     00          | 	byte	0
308d7                 | LR__5368
308d7     2E          | 	byte	"."
308d8     00          | 	byte	0
308d9                 | LR__5369
308d9     45          | 	byte	"E"
308da     00          | 	byte	0
308db                 | LR__5370
308db     65          | 	byte	"e"
308dc     00          | 	byte	0
308dd                 | LR__5371
308dd     2D          | 	byte	"-"
308de     00          | 	byte	0
308df                 | LR__5372
308df     61          | 	byte	"a"
308e0     00          | 	byte	0
308e1                 | LR__5373
308e1     66          | 	byte	"f"
308e2     00          | 	byte	0
308e3                 | LR__5374
308e3     30          | 	byte	"0"
308e4     00          | 	byte	0
308e5                 | LR__5375
308e5     31          | 	byte	"1"
308e6     00          | 	byte	0
308e7                 | LR__5376
308e7     5F          | 	byte	"_"
308e8     00          | 	byte	0
308e9                 | LR__5377
308e9     2D          | 	byte	"-"
308ea     00          | 	byte	0
308eb                 | LR__5378
308eb     65          | 	byte	"e"
308ec     00          | 	byte	0
308ed                 | LR__5379
308ed     2E          | 	byte	"."
308ee     00          | 	byte	0
308ef                 | LR__5380
308ef     45          | 	byte	"E"
308f0     00          | 	byte	0
308f1                 | LR__5381
308f1     65          | 	byte	"e"
308f2     00          | 	byte	0
308f3                 | LR__5382
308f3     30          | 	byte	"0"
308f4     00          | 	byte	0
308f5                 | LR__5383
308f5     39          | 	byte	"9"
308f6     00          | 	byte	0
308f7                 | LR__5384
308f7     24          | 	byte	"$"
308f8     00          | 	byte	0
308f9                 | LR__5385
308f9     25          | 	byte	"%"
308fa     00          | 	byte	0
308fb                 | LR__5386
308fb     2D          | 	byte	"-"
308fc     00          | 	byte	0
308fd                 | LR__5387
308fd     24          | 	byte	"$"
308fe     00          | 	byte	0
308ff                 | LR__5388
308ff     25          | 	byte	"%"
30900     00          | 	byte	0
30901                 | LR__5389
30901     30          | 	byte	"0"
30902     00          | 	byte	0
30903                 | LR__5390
30903     39          | 	byte	"9"
30904     00          | 	byte	0
30905                 | LR__5391
30905     5F          | 	byte	"_"
30906     00          | 	byte	0
30907                 | LR__5392
30907     30          | 	byte	"0"
30908     00          | 	byte	0
30909                 | LR__5393
30909     39          | 	byte	"9"
3090a     00          | 	byte	0
3090b                 | LR__5394
3090b     61          | 	byte	"a"
3090c     00          | 	byte	0
3090d                 | LR__5395
3090d     66          | 	byte	"f"
3090e     00          | 	byte	0
3090f                 | LR__5396
3090f     5F          | 	byte	"_"
30910     00          | 	byte	0
30911                 | LR__5397
30911     30          | 	byte	"0"
30912     00          | 	byte	0
30913                 | LR__5398
30913     31          | 	byte	"1"
30914     00          | 	byte	0
30915                 | LR__5399
30915     5F          | 	byte	"_"
30916     00          | 	byte	0
30917                 | LR__5400
30917     30          | 	byte	"0"
30918     00          | 	byte	0
30919                 | LR__5401
30919     39          | 	byte	"9"
3091a     00          | 	byte	0
3091b                 | LR__5402
3091b     5F          | 	byte	"_"
3091c     00          | 	byte	0
3091d                 | LR__5403
3091d     22          | 	byte	34
3091e     00          | 	byte	0
3091f                 | LR__5404
3091f     22          | 	byte	34
30920     00          | 	byte	0
30921                 | LR__5405
30921     44 69 6D 3A 
30925     20 61 74 20 
30929     6C 69 6E 65 
3092d     20          | 	byte	"Dim: at line "
3092e     00          | 	byte	0
3092f                 | LR__5406
3092f     3A 20 77 61 
30933     72 6E 69 6E 
30937     67 3A 20 74 
3093b     68 65 20 76 
3093f     61 72 69 61 
30943     62 6C 65 20 
30947     65 78 69 73 
3094b     74 65 64 2E | 	byte	": warning: the variable existed."
3094f     00          | 	byte	0
30950                 | LR__5407
30950     28          | 	byte	"("
30951     00          | 	byte	0
30952                 | LR__5408
30952     61 73       | 	byte	"as"
30954     00          | 	byte	0
30955                 | LR__5409
30955     61 73       | 	byte	"as"
30957     00          | 	byte	0
30958                 | LR__5410
30958     2C          | 	byte	","
30959     00          | 	byte	0
3095a                 | LR__5411
3095a     29          | 	byte	")"
3095b     00          | 	byte	0
3095c                 | LR__5412
3095c     29          | 	byte	")"
3095d     00          | 	byte	0
3095e                 | LR__5413
3095e     61 73       | 	byte	"as"
30960     00          | 	byte	0
30961                 | LR__5414
30961     62 79 74 65 | 	byte	"byte"
30965     00          | 	byte	0
30966                 | LR__5415
30966     75 62 79 74 
3096a     65          | 	byte	"ubyte"
3096b     00          | 	byte	0
3096c                 | LR__5416
3096c     73 68 6F 72 
30970     74          | 	byte	"short"
30971     00          | 	byte	0
30972                 | LR__5417
30972     75 73 68 6F 
30976     72 74       | 	byte	"ushort"
30978     00          | 	byte	0
30979                 | LR__5418
30979     6C 6F 6E 67 | 	byte	"long"
3097d     00          | 	byte	0
3097e                 | LR__5419
3097e     69 6E 74 65 
30982     67 65 72    | 	byte	"integer"
30985     00          | 	byte	0
30986                 | LR__5420
30986     75 6C 6F 6E 
3098a     67          | 	byte	"ulong"
3098b     00          | 	byte	0
3098c                 | LR__5421
3098c     69 6E 74 36 
30990     34          | 	byte	"int64"
30991     00          | 	byte	0
30992                 | LR__5422
30992     75 69 6E 74 
30996     36 34       | 	byte	"uint64"
30998     00          | 	byte	0
30999                 | LR__5423
30999     73 69 6E 67 
3099d     6C 65       | 	byte	"single"
3099f     00          | 	byte	0
309a0                 | LR__5424
309a0     64 6F 75 62 
309a4     6C 65       | 	byte	"double"
309a6     00          | 	byte	0
309a7                 | LR__5425
309a7     73 74 72 69 
309ab     6E 67       | 	byte	"string"
309ad     00          | 	byte	0
309ae                 | LR__5426
309ae     74 6F       | 	byte	"to"
309b0     00          | 	byte	0
309b1                 | LR__5427
309b1     73 74 65 70 | 	byte	"step"
309b5     00          | 	byte	0
309b6                 | LR__5428
309b6     73 2E       | 	byte	"s."
309b8     00          | 	byte	0
309b9                 | LR__5429
309b9     24          | 	byte	"$"
309ba     00          | 	byte	0
309bb                 | LR__5430
309bb     26 68       | 	byte	"&h"
309bd     00          | 	byte	0
309be                 | LR__5431
309be     25          | 	byte	"%"
309bf     00          | 	byte	0
309c0                 | LR__5432
309c0     26 62       | 	byte	"&b"
309c2     00          | 	byte	0
309c3                 | LR__5433
309c3                 | 	byte	
309c3     00          | 	byte	0
309c4                 | LR__5434
309c4     2F          | 	byte	"/"
309c5     00          | 	byte	0
309c6                 | LR__5435
309c6                 | 	byte	
309c6     00          | 	byte	0
309c7                 | LR__5436
309c7     53 61 76 65 
309cb     64 20 61 73 
309cf     20          | 	byte	"Saved as "
309d0     00          | 	byte	0
309d1                 | LR__5437
309d1     2F          | 	byte	"/"
309d2     00          | 	byte	0
309d3                 | LR__5438
309d3                 | 	byte	
309d3     00          | 	byte	0
309d4                 | LR__5439
309d4     2F          | 	byte	"/"
309d5     00          | 	byte	0
309d6                 | LR__5440
309d6     2F          | 	byte	"/"
309d7     00          | 	byte	0
309d8                 | LR__5441
309d8     2E 62 61 73 | 	byte	".bas"
309dc     00          | 	byte	0
309dd                 | LR__5442
309dd     53 79 73 74 
309e1     65 6D 20 65 
309e5     72 72 6F 72 
309e9     20          | 	byte	"System error "
309ea     00          | 	byte	0
309eb                 | LR__5443
309eb     3A 20       | 	byte	": "
309ed     00          | 	byte	0
309ee                 | LR__5444
309ee     2E 62 61 73 | 	byte	".bas"
309f2     00          | 	byte	0
309f3                 | LR__5445
309f3     2F          | 	byte	"/"
309f4     00          | 	byte	0
309f5                 | LR__5446
309f5                 | 	byte	
309f5     00          | 	byte	0
309f6                 | LR__5447
309f6     4C 6F 61 64 
309fa     65 64 20    | 	byte	"Loaded "
309fd     00          | 	byte	0
309fe                 | LR__5448
309fe     2F          | 	byte	"/"
309ff     00          | 	byte	0
30a00                 | LR__5449
30a00     53 74 6F 70 
30a04     70 65 64 20 
30a08     61 74 20 6C 
30a0c     69 6E 65 20 | 	byte	"Stopped at line "
30a10     00          | 	byte	0
30a11                 | LR__5450
30a11                 | 	byte	
30a11     00          | 	byte	0
30a12                 | LR__5451
30a12                 | 	byte	
30a12     00          | 	byte	0
30a13                 | LR__5452
30a13     2F 73 64 2F 
30a17     6D 65 64 69 
30a1b     61 2F 68 2F | 	byte	"/sd/media/h/"
30a1f     00          | 	byte	0
30a20                 | LR__5453
30a20     53 79 73 74 
30a24     65 6D 20 65 
30a28     72 72 6F 72 
30a2c     20          | 	byte	"System error "
30a2d     00          | 	byte	0
30a2e                 | LR__5454
30a2e     3A 20       | 	byte	": "
30a30     00          | 	byte	0
30a31                 | LR__5455
30a31                 | 	byte	
30a31     00          | 	byte	0
30a32                 | LR__5456
30a32                 | 	byte	
30a32     00          | 	byte	0
30a33                 | LR__5457
30a33     2F 73 64 2F 
30a37     6D 65 64 69 
30a3b     61 2F 73 2F | 	byte	"/sd/media/s/"
30a3f     00          | 	byte	0
30a40                 | LR__5458
30a40     53 79 73 74 
30a44     65 6D 20 65 
30a48     72 72 6F 72 
30a4c     20          | 	byte	"System error "
30a4d     00          | 	byte	0
30a4e                 | LR__5459
30a4e     3A 20       | 	byte	": "
30a50     00          | 	byte	0
30a51                 | LR__5460
30a51                 | 	byte	
30a51     00          | 	byte	0
30a52                 | LR__5461
30a52     6E 6F 6E 61 
30a56     6D 65 2E 62 
30a5a     61 73       | 	byte	"noname.bas"
30a5c     00          | 	byte	0
30a5d                 | LR__5462
30a5d     66 69 6C 65 
30a61     6E 61 6D 65 
30a65     20 65 78 70 
30a69     65 63 74 65 
30a6d     64          | 	byte	"filename expected"
30a6e     00          | 	byte	0
30a6f                 | LR__5463
30a6f     72 65 61 64 | 	byte	"read"
30a73     00          | 	byte	0
30a74                 | LR__5464
30a74     77 72 69 74 
30a78     65          | 	byte	"write"
30a79     00          | 	byte	0
30a7a                 | LR__5465
30a7a     61 70 70 65 
30a7e     6E 64       | 	byte	"append"
30a80     00          | 	byte	0
30a81                 | LR__5466
30a81     63 68 61 6E 
30a85     6E 65 6C 23 
30a89     20 65 78 70 
30a8d     65 63 74 65 
30a91     64          | 	byte	"channel# expected"
30a92     00          | 	byte	0
30a93                 | LR__5467
30a93     4F 70 65 6E 
30a97     3A 20 69 6E 
30a9b     76 61 6C 69 
30a9f     64 20 6D 6F 
30aa3     64 65       | 	byte	"Open: invalid mode"
30aa5     00          | 	byte	0
30aa6                 | LR__5468
30aa6     63 68 61 6E 
30aaa     6E 65 6C 23 
30aae     20 65 78 70 
30ab2     65 63 74 65 
30ab6     64          | 	byte	"channel# expected"
30ab7     00          | 	byte	0
30ab8                 | LR__5469
30ab8     45 72 72 6F 
30abc     72 20       | 	byte	"Error "
30abe     00          | 	byte	0
30abf                 | LR__5470
30abf     3A 20       | 	byte	": "
30ac1     00          | 	byte	0
30ac2                 | LR__5471
30ac2                 | 	byte	
30ac2     00          | 	byte	0
30ac3                 | LR__5472
30ac3                 | 	byte	
30ac3     00          | 	byte	0
30ac4                 | LR__5473
30ac4     72 6E 64 3A 
30ac8     20          | 	byte	"rnd: "
30ac9     00          | 	byte	0
30aca                 | LR__5474
30aca     72 6E 64 3A 
30ace     20          | 	byte	"rnd: "
30acf     00          | 	byte	0
30ad0                 | LR__5475
30ad0     67 65 74 65 
30ad4     6E 76 73 75 
30ad8     73 74 61 69 
30adc     6E 3A 20    | 	byte	"getenvsustain: "
30adf     00          | 	byte	0
30ae0                 | LR__5476
30ae0     73 69 6E 3A 
30ae4     20          | 	byte	"sin: "
30ae5     00          | 	byte	0
30ae6                 | LR__5477
30ae6     6D 69 64 24 
30aea     3A 20       | 	byte	"mid$: "
30aec     00          | 	byte	0
30aed                 | LR__5478
30aed     6D 69 64 24 
30af1     3A 20       | 	byte	"mid$: "
30af3     00          | 	byte	0
30af4                 | LR__5479
30af4     72 69 67 68 
30af8     74 24 3A 20 | 	byte	"right$: "
30afc     00          | 	byte	0
30afd                 | LR__5480
30afd     72 69 67 68 
30b01     74 24 3A 20 | 	byte	"right$: "
30b05     00          | 	byte	0
30b06                 | LR__5481
30b06     6C 65 66 74 
30b0a     24 3A 20    | 	byte	"left$: "
30b0d     00          | 	byte	0
30b0e                 | LR__5482
30b0e     6C 65 66 74 
30b12     24 3A 20    | 	byte	"left$: "
30b15     00          | 	byte	0
30b16                 | LR__5483
30b16     61 73 63 3A 
30b1a     20          | 	byte	"asc: "
30b1b     00          | 	byte	0
30b1c                 | LR__5484
30b1c     61 73 63 3A 
30b20     20          | 	byte	"asc: "
30b21     00          | 	byte	0
30b22                 | LR__5485
30b22     6C 65 6E 3A 
30b26     20          | 	byte	"len: "
30b27     00          | 	byte	0
30b28                 | LR__5486
30b28     6C 65 6E 3A 
30b2c     20          | 	byte	"len: "
30b2d     00          | 	byte	0
30b2e                 | LR__5487
30b2e     63 68 72 24 
30b32     3A 20       | 	byte	"chr$: "
30b34     00          | 	byte	0
30b35                 | LR__5488
30b35     76 61 6C 3A 
30b39     20          | 	byte	"val: "
30b3a     00          | 	byte	0
30b3b                 | LR__5489
30b3b     76 61 6C 3A 
30b3f     20          | 	byte	"val: "
30b40     00          | 	byte	0
30b41                 | LR__5490
30b41     24          | 	byte	"$"
30b42     00          | 	byte	0
30b43                 | LR__5491
30b43     26 68       | 	byte	"&h"
30b45     00          | 	byte	0
30b46                 | LR__5492
30b46     25          | 	byte	"%"
30b47     00          | 	byte	0
30b48                 | LR__5493
30b48     26 62       | 	byte	"&b"
30b4a     00          | 	byte	0
30b4b                 | LR__5494
30b4b     68 65 78 24 
30b4f     3A 20       | 	byte	"hex$: "
30b51     00          | 	byte	0
30b52                 | LR__5495
30b52     62 69 6E 24 
30b56     3A 20       | 	byte	"bin$: "
30b58     00          | 	byte	0
30b59                 | LR__5496
30b59     63 6F 73 3A 
30b5d     20          | 	byte	"cos: "
30b5e     00          | 	byte	0
30b5f                 | LR__5497
30b5f     74 61 6E 3A 
30b63     20          | 	byte	"tan: "
30b64     00          | 	byte	0
30b65                 | LR__5498
30b65     61 73 69 6E 
30b69     3A 20       | 	byte	"asin: "
30b6b     00          | 	byte	0
30b6c                 | LR__5499
30b6c     61 63 6F 73 
30b70     3A 20       | 	byte	"acos: "
30b72     00          | 	byte	0
30b73                 | LR__5500
30b73     61 74 6E 3A 
30b77     20          | 	byte	"atn: "
30b78     00          | 	byte	0
30b79                 | LR__5501
30b79     73 71 72 3A 
30b7d     20          | 	byte	"sqr: "
30b7e     00          | 	byte	0
30b7f                 | LR__5502
30b7f     73 74 69 63 
30b83     6B 3A 20    | 	byte	"stick: "
30b86     00          | 	byte	0
30b87                 | LR__5503
30b87     73 74 72 69 
30b8b     67 3A 20    | 	byte	"strig: "
30b8e     00          | 	byte	0
30b8f                 | LR__5504
30b8f     67 65 74 70 
30b93     69 78 65 6C 
30b97     3A 20       | 	byte	"getpixel: "
30b99     00          | 	byte	0
30b9a                 | LR__5505
30b9a     6C 6F 67 3A 
30b9e     20          | 	byte	"log: "
30b9f     00          | 	byte	0
30ba0                 | LR__5506
30ba0     50 72 69 6E 
30ba4     74 20 74 6F 
30ba8     20 63 68 61 
30bac     6E 6E 65 6C 
30bb0     20          | 	byte	"Print to channel "
30bb1     00          | 	byte	0
30bb2                 | LR__5507
30bb2     20 42 41 53 
30bb6     49 43 20 62 
30bba     79 74 65 73 
30bbe     20 66 72 65 
30bc2     65          | 	byte	" BASIC bytes free"
30bc3     00          | 	byte	0
30bc4                 | LR__5508
30bc4                 | 	byte	
30bc4     00          | 	byte	0
30bc5                 | LR__5509
30bc5     2F 73 64 2F 
30bc9     62 61 73    | 	byte	"/sd/bas"
30bcc     00          | 	byte	0
30bcd                 | LR__5510
30bcd     57 6F 72 6B 
30bd1     69 6E 67 20 
30bd5     64 69 72 65 
30bd9     63 74 6F 72 
30bdd     79 3A 20    | 	byte	"Working directory: "
30be0     00          | 	byte	0
30be1                 | LR__5511
30be1                 | 	byte	
30be1     00          | 	byte	0
30be2                 | LR__5512
30be2     2A          | 	byte	"*"
30be3     00          | 	byte	0
30be4                 | LR__5513
30be4                 | 	byte	
30be4     00          | 	byte	0
30be5                 | LR__5514
30be5     5B 64 69 72 
30be9     5D 20       | 	byte	"[dir] "
30beb     00          | 	byte	0
30bec                 | LR__5515
30bec     4D 6F 72 65 
30bf0     20 74 68 61 
30bf4     6E 20 31 32 
30bf8     38 20 65 6E 
30bfc     74 72 69 65 
30c00     73 20 66 6F 
30c04     75 6E 64 3A 
30c08     20 63 6C 65 
30c0c     61 6E 20 79 
30c10     6F 75 72 20 
30c14     64 69 72 65 
30c18     63 74 6F 72 
30c1c     79          | 	byte	"More than 128 entries found: clean your directory"
30c1d     00          | 	byte	0
30c1e                 | LR__5516
30c1e     2A          | 	byte	"*"
30c1f     00          | 	byte	0
30c20                 | LR__5517
30c20                 | 	byte	
30c20     00          | 	byte	0
30c21                 | LR__5518
30c21     4D 6F 72 65 
30c25     20 74 68 61 
30c29     6E 20 31 32 
30c2d     38 20 65 6E 
30c31     74 72 69 65 
30c35     73 20 66 6F 
30c39     75 6E 64 3A 
30c3d     20 63 6C 65 
30c41     61 6E 20 79 
30c45     6F 75 72 20 
30c49     64 69 72 65 
30c4d     63 74 6F 72 
30c51     79          | 	byte	"More than 128 entries found: clean your directory"
30c52     00          | 	byte	0
30c53                 | LR__5519
30c53     2F          | 	byte	"/"
30c54     00          | 	byte	0
30c55                 | LR__5520
30c55     2F 73 64 2F 
30c59     62 69 6E 2F | 	byte	"/sd/bin/"
30c5d     00          | 	byte	0
30c5e                 | LR__5521
30c5e     53 79 73 74 
30c62     65 6D 20 65 
30c66     72 72 6F 72 
30c6a     20          | 	byte	"System error "
30c6b     00          | 	byte	0
30c6c                 | LR__5522
30c6c     3A 20       | 	byte	": "
30c6e     00          | 	byte	0
30c6f                 | LR__5523
30c6f                 | 	byte	
30c6f     00          | 	byte	0
30c70                 | LR__5524
30c70     45 78 70 65 
30c74     63 74 65 64 
30c78     20 6E 75 6D 
30c7c     62 65 72 2C 
30c80     20 67 6F 74 
30c84     20 73 6F 6D 
30c88     65 74 68 69 
30c8c     6E 67 20 65 
30c90     6C 73 65 2E | 	byte	"Expected number, got something else."
30c94     00          | 	byte	0
30c95                 | LR__5525
30c95     43 61 6E 6E 
30c99     6F 74 20 61 
30c9d     64 64 20 61 
30ca1     20 6E 75 6D 
30ca5     62 65 72 20 
30ca9     74 6F 20 61 
30cad     20 73 74 72 
30cb1     69 6E 67 2E | 	byte	"Cannot add a number to a string."
30cb5     00          | 	byte	0
30cb6                 | LR__5526
30cb6     43 61 6E 6E 
30cba     6F 74 20 73 
30cbe     75 62 73 74 
30cc2     72 61 63 74 
30cc6     20 73 74 72 
30cca     69 6E 67 73 
30cce     2E          | 	byte	"Cannot substract strings."
30ccf     00          | 	byte	0
30cd0                 | LR__5527
30cd0     55 6E 6B 6E 
30cd4     6F 77 6E 20 
30cd8     65 72 72 6F 
30cdc     72 20 77 68 
30ce0     69 6C 65 20 
30ce4     61 64 64 69 
30ce8     6E 67 2E    | 	byte	"Unknown error while adding."
30ceb     00          | 	byte	0
30cec                 | LR__5528
30cec     55 6E 6B 6E 
30cf0     6F 77 6E 20 
30cf4     65 72 72 6F 
30cf8     72 20 77 68 
30cfc     69 6C 65 20 
30d00     73 75 62 73 
30d04     74 72 61 63 
30d08     74 69 6E 67 
30d0c     2E          | 	byte	"Unknown error while substracting."
30d0d     00          | 	byte	0
30d0e                 | LR__5529
30d0e     43 61 6E 6E 
30d12     6F 74 20 64 
30d16     6F 20 6C 6F 
30d1a     67 69 63 20 
30d1e     6F 70 65 72 
30d22     61 74 69 6F 
30d26     6E 20 6F 6E 
30d2a     20 73 74 72 
30d2e     69 6E 67 20 
30d32     6F 72 20 66 
30d36     6C 6F 61 74 
30d3a     2E          | 	byte	"Cannot do logic operation on string or float."
30d3b     00          | 	byte	0
30d3c                 | LR__5530
30d3c     55 6E 6B 6E 
30d40     6F 77 6E 20 
30d44     65 72 72 6F 
30d48     72 20 77 68 
30d4c     69 6C 65 20 
30d50     64 6F 69 6E 
30d54     67 20 6C 6F 
30d58     67 69 63 20 
30d5c     6F 70 65 72 
30d60     61 74 69 6F 
30d64     6E 2E       | 	byte	"Unknown error while doing logic operation."
30d66     00          | 	byte	0
30d67                 | LR__5531
30d67     43 61 6E 6E 
30d6b     6F 74 20 6D 
30d6f     75 6C 74 69 
30d73     70 6C 79 20 
30d77     73 74 72 69 
30d7b     6E 67 73 2E | 	byte	"Cannot multiply strings."
30d7f     00          | 	byte	0
30d80                 | LR__5532
30d80     55 6E 6B 6E 
30d84     6F 77 6E 20 
30d88     65 72 72 6F 
30d8c     72 20 77 68 
30d90     69 6C 65 20 
30d94     6D 75 6C 74 
30d98     69 70 6C 79 
30d9c     69 6E 67 2E | 	byte	"Unknown error while multiplying."
30da0     00          | 	byte	0
30da1                 | LR__5533
30da1     43 61 6E 6E 
30da5     6F 74 20 64 
30da9     69 76 69 64 
30dad     65 20 73 74 
30db1     72 69 6E 67 
30db5     73 2E       | 	byte	"Cannot divide strings."
30db7     00          | 	byte	0
30db8                 | LR__5534
30db8     55 6E 6B 6E 
30dbc     6F 77 6E 20 
30dc0     65 72 72 6F 
30dc4     72 20 77 68 
30dc8     69 6C 65 20 
30dcc     64 69 76 69 
30dd0     64 69 6E 67 
30dd4     2E          | 	byte	"Unknown error while dividing."
30dd5     00          | 	byte	0
30dd6                 | LR__5535
30dd6     43 61 6E 6E 
30dda     6F 74 20 63 
30dde     6F 6D 70 75 
30de2     74 65 20 61 
30de6     20 70 6F 77 
30dea     65 72 20 6F 
30dee     66 20 61 20 
30df2     73 74 72 69 
30df6     6E 67 2E    | 	byte	"Cannot compute a power of a string."
30df9     00          | 	byte	0
30dfa                 | LR__5536
30dfa     55 6E 6B 6E 
30dfe     6F 77 6E 20 
30e02     65 72 72 6F 
30e06     72 20 77 68 
30e0a     69 6C 65 20 
30e0e     63 6F 6D 70 
30e12     75 74 69 6E 
30e16     67 20 61 20 
30e1a     70 6F 77 65 
30e1e     72 2E       | 	byte	"Unknown error while computing a power."
30e20     00          | 	byte	0
30e21                 | LR__5537
30e21     52 69 67 68 
30e25     74 20 70 61 
30e29     72 65 6E 74 
30e2d     68 65 73 69 
30e31     73 20 65 78 
30e35     70 65 63 74 
30e39     65 64 2E    | 	byte	"Right parenthesis expected."
30e3c     00          | 	byte	0
30e3d                 | LR__5538
30e3d     45 78 70 65 
30e41     63 74 65 64 
30e45     20 73 74 72 
30e49     69 6E 67 2E | 	byte	"Expected string."
30e4d     00          | 	byte	0
30e4e                 | LR__5539
30e4e     45 78 70 65 
30e52     63 74 65 64 
30e56     20 66 6C 6F 
30e5a     61 74 2E    | 	byte	"Expected float."
30e5d     00          | 	byte	0
30e5e                 | LR__5540
30e5e     45 78 70 65 
30e62     63 74 65 64 
30e66     20 75 6E 73 
30e6a     69 67 6E 65 
30e6e     64 20 69 6E 
30e72     74 65 67 65 
30e76     72 2E       | 	byte	"Expected unsigned integer."
30e78     00          | 	byte	0
30e79                 | LR__5541
30e79     45 78 70 65 
30e7d     63 74 65 64 
30e81     20 69 6E 74 
30e85     65 67 65 72 
30e89     2E          | 	byte	"Expected integer."
30e8a     00          | 	byte	0
30e8b                 | LR__5542
30e8b     4E 6F 20 6D 
30e8f     6F 72 65 20 
30e93     76 61 72 69 
30e97     61 62 6C 65 
30e9b     20 73 6C 6F 
30e9f     74 73 2E    | 	byte	"No more variable slots."
30ea2     00          | 	byte	0
30ea3                 | LR__5543
30ea3     56 61 72 69 
30ea7     61 62 6C 65 
30eab     20 6E 6F 74 
30eaf     20 66 6F 75 
30eb3     6E 64 2E    | 	byte	"Variable not found."
30eb6     00          | 	byte	0
30eb7                 | LR__5544
30eb7     43 6F 6D 6D 
30ebb     61 20 65 78 
30ebf     70 65 63 74 
30ec3     65 64 2E    | 	byte	"Comma expected."
30ec6     00          | 	byte	0
30ec7                 | LR__5545
30ec7     43 6F 6D 6D 
30ecb     61 20 6F 72 
30ecf     20 73 65 6D 
30ed3     69 63 6F 6C 
30ed7     6F 6E 20 65 
30edb     78 70 65 63 
30edf     74 65 64 2E | 	byte	"Comma or semicolon expected."
30ee3     00          | 	byte	0
30ee4                 | LR__5546
30ee4     55 6E 6B 6E 
30ee8     6F 77 6E 20 
30eec     63 6F 6D 6D 
30ef0     61 6E 64 2E | 	byte	"Unknown command."
30ef4     00          | 	byte	0
30ef5                 | LR__5547
30ef5     53 74 61 63 
30ef9     6B 20 75 6E 
30efd     64 65 72 66 
30f01     6C 6F 77 2E | 	byte	"Stack underflow."
30f05     00          | 	byte	0
30f06                 | LR__5548
30f06     43 61 6E 6E 
30f0a     6F 74 20 65 
30f0e     78 65 63 75 
30f12     74 65 20 67 
30f16     6F 74 6F 20 
30f1a     69 6E 20 74 
30f1e     68 65 20 69 
30f22     6D 6D 65 64 
30f26     69 61 74 65 
30f2a     20 6D 6F 64 
30f2e     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
30f30     00          | 	byte	0
30f31                 | LR__5549
30f31     43 61 6E 6E 
30f35     6F 74 20 6C 
30f39     6F 61 64 20 
30f3d     66 72 6F 6D 
30f41     20 74 68 69 
30f45     73 20 66 69 
30f49     6C 65 2E    | 	byte	"Cannot load from this file."
30f4c     00          | 	byte	0
30f4d                 | LR__5550
30f4d     54 68 65 20 
30f51     70 72 6F 67 
30f55     72 61 6D 20 
30f59     69 73 20 65 
30f5d     6D 70 74 79 
30f61     2E          | 	byte	"The program is empty."
30f62     00          | 	byte	0
30f63                 | LR__5551
30f63     49 66 20 61 
30f67     66 74 65 72 
30f6b     20 69 66 2E | 	byte	"If after if."
30f6f     00          | 	byte	0
30f70                 | LR__5552
30f70     45 6D 70 74 
30f74     79 20 65 78 
30f78     70 72 65 73 
30f7c     73 69 6F 6E 
30f80     2E          | 	byte	"Empty expression."
30f81     00          | 	byte	0
30f82                 | LR__5553
30f82     53 74 72 69 
30f86     6E 67 20 65 
30f8a     78 70 65 63 
30f8e     74 65 64 2E | 	byte	"String expected."
30f92     00          | 	byte	0
30f93                 | LR__5554
30f93     49 6E 74 65 
30f97     72 70 72 65 
30f9b     74 65 72 20 
30f9f     69 6E 74 65 
30fa3     72 6E 61 6C 
30fa7     20 65 72 72 
30fab     6F 72 2E    | 	byte	"Interpreter internal error."
30fae     00          | 	byte	0
30faf                 | LR__5555
30faf     45 78 70 65 
30fb3     63 74 65 64 
30fb7     20 61 73 73 
30fbb     69 67 6E 2E | 	byte	"Expected assign."
30fbf     00          | 	byte	0
30fc0                 | LR__5556
30fc0     45 78 70 65 
30fc4     63 74 65 64 
30fc8     20 27 74 6F 
30fcc     27 2E       | 	byte	"Expected 'to'."
30fce     00          | 	byte	0
30fcf                 | LR__5557
30fcf     45 78 70 65 
30fd3     63 74 65 64 
30fd7     20 69 6E 74 
30fdb     65 67 65 72 
30fdf     20 76 61 72 
30fe3     69 61 62 6C 
30fe7     65 2E       | 	byte	"Expected integer variable."
30fe9     00          | 	byte	0
30fea                 | LR__5558
30fea     55 6E 69 6E 
30fee     69 74 69 61 
30ff2     6C 69 7A 65 
30ff6     64 20 76 61 
30ffa     72 69 61 62 
30ffe     6C 65 20 69 
31002     6E 20 27 6E 
31006     65 78 74 27 
3100a     2C 20 75 73 
3100e     65 20 27 66 
31012     6F 72 27 20 
31016     62 65 66 6F 
3101a     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
3101d     00          | 	byte	0
3101e                 | LR__5559
3101e     4E 6F 20 6D 
31022     6F 72 65 20 
31026     73 6C 6F 74 
3102a     73 20 66 6F 
3102e     72 20 27 66 
31032     6F 72 27 2E | 	byte	"No more slots for 'for'."
31036     00          | 	byte	0
31037                 | LR__5560
31037     27 4E 65 78 
3103b     74 27 20 64 
3103f     6F 65 73 6E 
31043     27 74 20 6D 
31047     61 74 63 68 
3104b     20 27 66 6F 
3104f     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
31052     00          | 	byte	0
31053                 | LR__5561
31053     27 47 6F 74 
31057     6F 27 20 74 
3105b     61 72 67 65 
3105f     74 20 6C 69 
31063     6E 65 20 6E 
31067     6F 74 20 66 
3106b     6F 75 6E 64 
3106f     2E          | 	byte	"'Goto' target line not found."
31070     00          | 	byte	0
31071                 | LR__5562
31071     42 61 64 20 
31075     6E 75 6D 62 
31079     65 72 20 6F 
3107d     66 20 70 61 
31081     72 61 6D 65 
31085     74 65 72 73 | 	byte	"Bad number of parameters"
31089     00          | 	byte	0
3108a                 | LR__5563
3108a     46 75 6E 63 
3108e     74 69 6F 6E 
31092     20 75 6E 64 
31096     65 66 69 6E 
3109a     65 64 20 66 
3109e     6F 72 20 73 
310a2     74 72 69 6E 
310a6     67 73       | 	byte	"Function undefined for strings"
310a8     00          | 	byte	0
310a9                 | LR__5564
310a9     42 61 64 20 
310ad     70 61 72 61 
310b1     6D 65 74 65 
310b5     72 2E       | 	byte	"Bad parameter."
310b7     00          | 	byte	0
310b8                 | LR__5565
310b8     43 61 6E 6E 
310bc     6F 74 20 64 
310c0     65 63 6C 61 
310c4     72 65 20 61 
310c8     6E 20 61 72 
310cc     72 61 79 3A 
310d0     20 74 68 65 
310d4     20 76 61 72 
310d8     69 61 62 6C 
310dc     65 20 65 78 
310e0     69 73 74 73 
310e4     2E          | 	byte	"Cannot declare an array: the variable exists."
310e5     00          | 	byte	0
310e6                 | LR__5566
310e6     45 78 70 65 
310ea     63 74 65 64 
310ee     20 27 28 27 
310f2     2E          | 	byte	"Expected '('."
310f3     00          | 	byte	0
310f4                 | LR__5567
310f4     45 78 70 65 
310f8     63 74 65 64 
310fc     20 27 29 27 
31100     20 6F 72 20 
31104     27 2C 27 2E | 	byte	"Expected ')' or ','."
31108     00          | 	byte	0
31109                 | LR__5568
31109     4E 6F 20 6D 
3110d     6F 72 65 20 
31111     74 68 61 6E 
31115     20 33 20 64 
31119     69 6D 65 6E 
3111d     73 69 6F 6E 
31121     73 20 73 75 
31125     70 70 6F 72 
31129     74 65 64    | 	byte	"No more than 3 dimensions supported"
3112c     00          | 	byte	0
3112d                 | LR__5569
3112d     56 61 72 69 
31131     61 62 6C 65 
31135     20 6E 61 6D 
31139     65 20 65 78 
3113d     70 65 63 74 
31141     65 64       | 	byte	"Variable name expected"
31143     00          | 	byte	0
31144                 | LR__5570
31144     54 79 70 65 
31148     20 6E 61 6D 
3114c     65 20 65 78 
31150     70 65 63 74 
31154     65 64       | 	byte	"Type name expected"
31156     00          | 	byte	0
31157                 | LR__5571
31157     54 79 70 65 
3115b     20 6E 6F 74 
3115f     20 73 75 70 
31163     70 6F 72 74 
31167     65 64 20 79 
3116b     65 74       | 	byte	"Type not supported yet"
3116d     00          | 	byte	0
3116e                 | LR__5572
3116e     41 72 72 61 
31172     79 20 69 6E 
31176     64 65 78 20 
3117a     6F 75 74 20 
3117e     6F 66 20 72 
31182     61 6E 67 65 | 	byte	"Array index out of range"
31186     00          | 	byte	0
31187                 | LR__5573
31187     42 61 64 20 
3118b     74 79 70 65 
3118f     20 77 68 69 
31193     6C 65 20 61 
31197     73 73 69 67 
3119b     6E 69 6E 67 
3119f     20 74 6F 20 
311a3     61 72 72 61 
311a7     79          | 	byte	"Bad type while assigning to array"
311a8     00          | 	byte	0
311a9                 | LR__5574
311a9     45 72 72 6F 
311ad     72 20       | 	byte	"Error "
311af     00          | 	byte	0
311b0                 | LR__5575
311b0     3A 20       | 	byte	": "
311b2     00          | 	byte	0
311b3                 | LR__5576
311b3     2F 73 64    | 	byte	"/sd"
311b6     00          | 	byte	0
311b7                 | LR__5577
311b7     2F 73 64 2F 
311bb     62 61 73    | 	byte	"/sd/bas"
311be     00          | 	byte	0
311bf                 | LR__5578
311bf     2F 73 64 2F 
311c3     62 61 73    | 	byte	"/sd/bas"
311c6     00          | 	byte	0
311c7                 | LR__5579
311c7     20 42 41 53 
311cb     49 43 20 62 
311cf     79 74 65 73 
311d3     20 66 72 65 
311d7     65          | 	byte	" BASIC bytes free"
311d8     00          | 	byte	0
311d9                 | LR__5580
311d9     52 65 61 64 
311dd     79          | 	byte	"Ready"
311de     00          | 	byte	0
311df                 | LR__5581
311df     6E 6F 6E 61 
311e3     6D 65 2E 62 
311e7     61 73       | 	byte	"noname.bas"
311e9     00          | 	byte	0
311ea                 | LR__5582
311ea                 | 	byte	
311ea     00          | 	byte	0
311eb     00          | 	alignl
311ec                 | _dat_
311ec     00 00 00 00 
311f0     00 00 00 00 
311f4     00 00 00 00 
311f8     00 00 00 00 | 	byte	$00[16]
311fc     61 41 17 0E 
31200     62 42 00 00 
31204     63 43 19 10 
31208     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
3120c     65 45 18 0F 
31210     66 46 00 00 
31214     67 47 00 00 
31218     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
3121c     69 49 00 00 
31220     6A 4A 00 00 
31224     6B 4B 00 00 
31228     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
3122c     6D 4D 00 00 
31230     6E 4E 1A 11 
31234     6F 4F 1E 15 
31238     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
3123c     71 51 00 00 
31240     72 52 00 00 
31244     73 53 1B 12 
31248     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
3124c     75 55 00 00 
31250     76 56 00 00 
31254     77 57 00 00 
31258     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
3125c     79 59 00 00 
31260     7A 5A 1D 14 
31264     31 21 04 00 
31268     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
3126c     33 23 06 00 
31270     34 24 07 00 
31274     35 25 08 00 
31278     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
3127c     37 26 0A 00 
31280     38 2A 0B 00 
31284     39 28 0C 00 
31288     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
3128c     8D 8D 00 00 
31290     9B 9B 00 00 
31294     88 88 00 00 
31298     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
3129c     20 20 00 00 
312a0     2D 5F 00 00 
312a4     3D 2B 00 00 
312a8     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
312ac     5D 7D 00 00 
312b0     5C 7C 00 00 
312b4     23 7E 00 00 
312b8     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
312bc     27 22 00 00 
312c0     60 7E 03 00 
312c4     2C 3C 00 00 
312c8     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
312cc     2F 3F 00 00 
312d0     B9 B9 00 00 
312d4     BA 00 00 00 
312d8     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
312dc     BC 00 00 00 
312e0     BD 00 00 00 
312e4     BE 00 00 00 
312e8     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
312ec     C0 00 00 00 
312f0     C1 00 00 00 
312f4     C2 00 00 00 
312f8     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
312fc     C4 00 00 00 
31300     C5 00 00 00 
31304     C6 00 00 00 
31308     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
3130c     C8 00 00 00 
31310     C9 00 00 00 
31314     CA 00 00 00 
31318     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
3131c     7F 7F 00 00 
31320     CC 00 00 00 
31324     CD 00 00 00 
31328     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
3132c     CF 00 00 00 
31330     D0 00 00 00 
31334     D1 00 00 00 
31338     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
3133c     2F 2F 00 00 
31340     2A 2A 00 00 
31344     2D 2D 00 00 
31348     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
3134c     8D 8D 00 00 
31350     31 31 00 00 
31354     32 32 00 00 
31358     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
3135c     34 34 00 00 
31360     35 35 00 00 
31364     36 36 00 00 
31368     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
3136c     38 38 00 00 
31370     39 39 00 00 
31374     30 30 00 00 
31378     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
3137c     5C 7C 00 00 
31380     00 00 00 00 
31384     00 00 00 00 
31388     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
3138c     00 00 00 00 
      ...             
313e4     00 00 00 00 
313e8     00 00 00 00 | 	byte	$00[96]
313ec     2B 00 A6 F2 
313f0     24 A7 09 80 
313f4     5B 88 4D 89 
313f8     80 88 A5 88 | atari_spl file "atari.spl"
313fc     6D 88 B8 88 
31400     80 88 CB 88 
31404     92 88 A5 88 
31408     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
3140c     A5 88 CA 88 
31410     A6 88 DD 88 
31414     B8 88 AB 89 
31418     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
3141c     C8 AD C6 F1 
31420     91 06 B6 FF 
31424     13 00 4A 00 
31428     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
3142c     5D 00 5E 00 
31430     5D 00 5E 00 
31434     5E 00 5D 00 
31438     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
3143c     38 00 83 00 
31440     25 00 83 00 
31444     C3 FE D1 04 
31448     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
3144c     48 88 38 85 
31450     41 8A CB 88 
31454     28 89 B8 88 
31458     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
3145c     15 89 03 89 
31460     02 89 15 89 
31464     16 89 15 89 
31468     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
3146c     15 89 3A 89 
31470     72 89 E3 89 
31474     52 83 AD 97 
31478     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
3147c     0C 02 B6 FF 
31480     E1 00 A8 00 
31484     F3 00 A8 00 
31488     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
3148c     CE 00 CD 00 
31490     CD 00 BA 00 
31494     E1 00 BB 00 
31498     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
3149c     DF 00 C9 FF 
314a0     E6 01 B6 06 
314a4     EE DD 8D 98 
314a8     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
314ac     97 89 73 89 
314b0     3B 89 60 89 
314b4     60 89 60 89 
314b8     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
314bc     73 89 72 89 
314c0     85 89 73 89 
314c4     AA 89 60 89 
314c8     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
314cc     E8 8A 18 86 
314d0     92 88 A5 C2 
314d4     E0 00 C3 05 
314d8     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
314dc     F2 00 64 01 
314e0     06 01 3E 01 
314e4     2B 01 2B 01 
314e8     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
314ec     2B 01 2A 01 
314f0     2B 01 2B 01 
314f4     2B 01 18 01 
314f8     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
314fc     39 07 61 F3 
31500     C0 AF 37 85 
31504     0F 88 8B 8A 
31508     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
3150c     AB 89 D0 89 
31510     AB 89 D0 89 
31514     D0 89 CF 89 
31518     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
3151c     D0 89 F5 89 
31520     BD 89 08 8A 
31524     CF 89 E8 8A 
31528     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
3152c     53 B3 0D F8 
31530     F4 07 38 00 
31534     63 01 63 01 
31538     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
3153c     88 01 88 01 
31540     76 01 88 01 
31544     88 01 89 01 
31548     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
3154c     75 01 AE 01 
31550     76 01 88 01 
31554     4A 00 46 06 
31558     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
3155c     08 8A 9A 86 
31560     33 8B 08 8A 
31564     2D 8A F5 89 
31568     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
3156c     2D 8A 2D 8A 
31570     2E 8A 1B 8A 
31574     40 8A 2D 8A 
31578     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
3157c     2E 8A 79 8A 
31580     66 8A C8 8B 
31584     72 82 2B 97 
31588     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
3158c     1D 02 05 01 
31590     F8 01 C0 01 
31594     0B 02 C0 01 
31598     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
3159c     F9 01 D3 01 
315a0     F8 01 D3 01 
315a4     F8 01 D2 01 
315a8     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
315ac     E6 01 2B 01 
315b0     8E 02 5F 07 
315b4     F7 E2 ED 9C 
315b8     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
315bc     E8 8A 78 8A 
315c0     78 8A 65 8A 
315c4     8B 8A 78 8A 
315c8     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
315cc     8B 8A 9D 8A 
315d0     9D 8A 8B 8A 
315d4     C2 8A 78 8A 
315d8     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
315dc     70 8C 18 86 
315e0     8B 8A 23 C9 
315e4     CB 03 C4 05 
315e8     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
315ec     0B 02 7B 02 
315f0     1E 02 55 02 
315f4     30 02 43 02 
315f8     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
315fc     43 02 44 02 
31600     43 02 30 02 
31604     68 02 31 02 
31608     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
3160c     07 08 3F F7 
31610     73 B2 13 85 
31614     15 89 ED 8B 
31618     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
3161c     B0 8A FB 8A 
31620     D5 8A FA 8A 
31624     E8 8A FB 8A 
31628     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
3162c     E8 8A 21 8B 
31630     E7 8A 33 8B 
31634     E8 8A 26 8C 
31638     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
3163c     8D B0 27 F6 
31640     9C 08 AD 01 
31644     7B 02 8D 02 
31648     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
3164c     A1 02 A0 02 
31650     A1 02 A0 02 
31654     A0 02 A0 02 
31658     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
3165c     7B 02 D8 02 
31660     7B 02 C6 02 
31664     3E 01 C3 05 
31668     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
3166c     00 8C 2A 86 
31670     E0 8C FA 8A 
31674     6A 8B FB 8A 
31678     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
3167c     45 8B 45 8B 
31680     45 8B 6B 8B 
31684     46 8B 59 8B 
31688     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
3168c     6B 8B 6B 8B 
31690     6B 8B 6B 8B 
31694     7D 8B 7D 8B 
31698     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
3169c     90 8B 91 8B 
316a0     90 8B 90 8B 
316a4     A3 8B A3 8B 
316a8     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
316ac     B5 8B B6 8B 
316b0     B5 8B B5 8B 
316b4     B6 8B C8 8B 
316b8     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
316bc     C8 8B DA 8B 
316c0     DB 8B DB 8B 
316c4     DB 8B DC 8B 
316c8     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
316cc     EE 8B EE 8B 
316d0     00 8C 01 8C 
316d4     00 8C 01 8C 
316d8     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
316dc     12 8C 13 8C 
316e0     13 8C 26 8C 
316e4     26 8C 26 8C 
316e8     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
316ec     38 8C 38 8C 
316f0     38 8C 38 8C 
316f4     4B 8C 4B 8C 
316f8     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
316fc     5E 8C 5E 8C 
31700     5E 8C 5E 8C 
31704     70 8C 70 8C 
31708     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
3170c     70 8C 83 8C 
31710     83 8C 83 8C 
31714     83 8C 96 8C 
31718     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
3171c     95 8C A9 8C 
31720     A9 8C A8 8C 
31724     A8 8C A8 8C 
31728     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
3172c     BB 8C BB 8C 
31730     BB 8C CE 8C 
31734     CE 8C CE 8C 
31738     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
3173c     E0 8C E1 8C 
31740     E1 8C E0 8C 
31744     F4 8C F2 8C 
31748     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
3174c     05 8D 05 8D 
31750     06 8D 06 8D 
31754     19 8D 19 8D 
31758     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
3175c     18 8D 2B 8D 
31760     2B 8D 2B 8D 
31764     2A 8D 3E 8D 
31768     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
3176c     3E 8D 51 8D 
31770     50 8D 50 8D 
31774     50 8D 51 8D 
31778     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
3177c     63 8D 64 8D 
31780     76 8D 75 8D 
31784     75 8D 76 8D 
31788     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
3178c     88 8D 88 8D 
31790     89 8D 9B 8D 
31794     9A 8D 9B 8D 
31798     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
3179c     AD 8D AE 8D 
317a0     AD 8D AE 8D 
317a4     C1 8D C1 8D 
317a8     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
317ac     D3 8D D3 8D 
317b0     D3 8D D3 8D 
317b4     D3 8D E6 8D 
317b8     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
317bc     E6 8D E6 8D 
317c0     F9 8D F9 8D 
317c4     F9 8D F8 8D 
317c8     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
317cc     0B 8E 0B 8E 
317d0     1D 8E 1D 8E 
317d4     1E 8E 1E 8E 
317d8     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
317dc     31 8E 31 8E 
317e0     31 8E 42 8E 
317e4     43 8E 43 8E 
317e8     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
317ec     56 8E 56 8E 
317f0     55 8E 56 8E 
317f4     68 8E 69 8E 
317f8     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
317fc     69 8E 7B 8E 
31800     7C 8E 7B 8E 
31804     7B 8E 8D 8E 
31808     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
3180c     8D 8E A1 8E 
31810     A0 8E A1 8E 
31814     A1 8E A0 8E 
31818     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
3181c     B3 8E B3 8E 
31820     C6 8E C5 8E 
31824     C6 8E C6 8E 
31828     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
3182c     D8 8E D9 8E 
31830     D8 8E EC 8E 
31834     EB 8E EC 8E 
31838     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
3183c     FE 8E FE 8E 
31840     FE 8E FE 8E 
31844     10 8F 10 8F 
31848     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
3184c     11 8F 23 8F 
31850     24 8F 23 8F 
31854     24 8F 37 8F 
31858     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
3185c     36 8F 36 8F 
31860     48 8F 49 8F 
31864     49 8F 49 8F 
31868     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
3186c     5B 8F 5C 8F 
31870     5B 8F 6E 8F 
31874     6E 8F 6E 8F 
31878     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
3187c     81 8F 81 8F 
31880     81 8F 81 8F 
31884     93 8F 93 8F 
31888     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
3188c     93 8F A6 8F 
31890     A6 8F A6 8F 
31894     A6 8F B9 8F 
31898     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
3189c     B9 8F B9 8F 
318a0     CC 8F CB 8F 
318a4     CB 8F CC 8F 
318a8     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
318ac     DF 8F DE 8F 
318b0     DE 8F F1 8F 
318b4     F1 8F F1 8F 
318b8     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
318bc     03 90 04 90 
318c0     04 90 04 90 
318c4     16 90 17 90 
318c8     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
318cc     29 90 28 90 
318d0     29 90 28 90 
318d4     29 90 3C 90 
318d8     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
318dc     3C 90 4F 90 
318e0     4E 90 4E 90 
318e4     4E 90 4E 90 
318e8     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
318ec     61 90 61 90 
318f0     73 90 74 90 
318f4     74 90 74 90 
318f8     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
318fc     87 90 86 90 
31900     87 90 86 90 
31904     99 90 99 90 
31908     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
3190c     AB 90 AB 90 
31910     AC 90 AB 90 
31914     AB 90 BF 90 
31918     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
3191c     BE 90 D1 90 
31920     D0 90 D1 90 
31924     D1 90 D1 90 
31928     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
3192c     E3 90 E4 90 
31930     F6 90 F6 90 
31934     F6 90 F6 90 
31938     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
3193c     09 91 0A 91 
31940     0A 91 1C 91 
31944     1C 91 1C 91 
31948     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
3194c     2F 91 2E 91 
31950     2F 91 2F 91 
31954     2E 91 41 91 
31958     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
3195c     41 91 53 91 
31960     54 91 54 91 
31964     53 91 54 91 
31968     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
3196c     67 91 67 91 
31970     79 91 7A 91 
31974     79 91 78 91 
31978     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
3197c     8C 91 8B 91 
31980     8C 91 8C 91 
31984     9E 91 9E 91 
31988     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
3198c     B1 91 B1 91 
31990     B2 91 B1 91 
31994     B1 91 C4 91 
31998     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
3199c     C4 91 D6 91 
319a0     D7 91 D7 91 
319a4     D7 91 D6 91 
319a8     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
319ac     EA 91 EA 91 
319b0     EA 91 FC 91 
319b4     FC 91 FB 91 
319b8     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
319bc     0E 92 0F 92 
319c0     0F 92 0E 92 
319c4     21 92 21 92 
319c8     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
319cc     21 92 34 92 
319d0     33 92 34 92 
319d4     34 92 47 92 
319d8     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
319dc     46 92 47 92 
319e0     59 92 59 92 
319e4     59 92 59 92 
319e8     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
319ec     6C 92 6C 92 
319f0     6B 92 7E 92 
319f4     7E 92 7E 92 
319f8     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
319fc     92 92 91 92 
31a00     91 92 90 92 
31a04     91 92 A4 92 
31a08     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
31a0c     A3 92 B6 92 
31a10     B6 92 B7 92 
31a14     B7 92 B6 92 
31a18     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
31a1c     CA 92 C9 92 
31a20     CA 92 DC 92 
31a24     DC 92 DC 92 
31a28     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
31a2c     EF 92 EF 92 
31a30     EF 92 EF 92 
31a34     01 93 01 93 
31a38     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
31a3c     15 93 14 93 
31a40     14 93 14 93 
31a44     14 93 27 93 
31a48     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
31a4c     27 93 39 93 
31a50     3A 93 39 93 
31a54     39 93 39 93 
31a58     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
31a5c     4B 93 4C 93 
31a60     5F 93 5F 93 
31a64     5F 93 5E 93 
31a68     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
31a6c     5F 93 84 93 
31a70     4C 93 96 93 
31a74     5F 93 AE 94 
31a78     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
31a7c     7B C1 00 00 
31a80     00 00 00 00 
31a84     00 00 00 00 
31a88     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31a8c     00 00 00 00 | 	byte	$00, $00, $00, $00
31a90     00 00 00 00 | zero long 0
31a94     7A D7 00 80 
31a98     87 8A 48 8F 
31a9c     EC 8C 76 8D 
31aa0     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
31aa4     3C 8D 82 8D 
31aa8     42 8D 88 8D 
31aac     8C 8D 8E 8D 
31ab0     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
31ab4     97 8D DE 8D 
31ab8     E1 8D F1 8E 
31abc     D8 8C A3 83 
31ac0     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
31ac4     65 71 C9 65 
31ac8     FC 64 C4 65 
31acc     C1 65 BF 65 
31ad0     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
31ad4     B6 65 B4 65 
31ad8     B2 65 AE 65 
31adc     AC 65 ED 65 
31ae0     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
31ae4     5E 65 25 66 
31ae8     FA 62 23 6B 
31aec     B5 6C 61 0A 
31af0     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
31af4     5D 90 BE 8D 
31af8     47 8E C3 8D 
31afc     09 8E C9 8D 
31b00     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
31b04     15 8E 19 8E 
31b08     1B 8E 62 8E 
31b0c     64 8E 68 8E 
31b10     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
31b14     B5 8E 4C 90 
31b18     FA 84 3C 9D 
31b1c     98 13 79 6D 
31b20     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
31b24     D9 66 50 66 
31b28     D4 66 4B 66 
31b2c     8C 66 46 66 
31b30     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
31b34     81 66 3A 66 
31b38     7C 66 36 66 
31b3c     76 66 30 66 
31b40     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
31b44     6B 66 88 72 
31b48     BF 37 E7 B7 
31b4c     75 83 8B 8E 
31b50     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
31b54     94 8E 96 8E 
31b58     DD 8E 9C 8E 
31b5c     E2 8E A2 8E 
31b60     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
31b64     EE 8E AE 8E 
31b68     38 8F B5 8E 
31b6c     3F 8F FD 8E 
31b70     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
31b74     A5 87 1E E3 
31b78     6D 5D FA 71 
31b7c     41 64 25 67 
31b80     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
31b84     D9 66 1A 67 
31b88     18 67 15 67 
31b8c     12 67 0F 67 
31b90     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
31b94     07 67 C0 66 
31b98     01 67 BC 66 
31b9c     B8 66 DE 64 
31ba0     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
31ba4     43 E5 1F 8B 
31ba8     14 8A F1 90 
31bac     1C 8F 63 8F 
31bb0     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
31bb4     29 8F 6E 8F 
31bb8     72 8F 75 8F 
31bbc     34 8F BE 8F 
31bc0     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
31bc4     84 8F 87 8F 
31bc8     CC 8F 56 90 
31bcc     67 91 49 80 
31bd0     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
31bd4     46 77 A6 66 
31bd8     E8 66 B0 67 
31bdc     AD 67 ED 67 
31be0     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
31be4     A2 67 E3 67 
31be8     9D 67 9A 67 
31bec     98 67 94 67 
31bf0     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
31bf4     49 67 CD 67 
31bf8     28 65 5F 6E 
31bfc     82 67 3A 01 
31c00     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
31c04     C2 91 A9 8F 
31c08     EF 8F AE 8F 
31c0c     F4 8F B5 8F 
31c10     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
31c14     01 90 03 90 
31c18     07 90 09 90 
31c1c     0C 90 53 90 
31c20     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
31c24     18 90 44 93 
31c28     85 84 D6 9D 
31c2c     87 1F 2F 75 
31c30     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
31c34     C4 68 F6 67 
31c38     BE 68 F1 67 
31c3c     76 68 2E 68 
31c40     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
31c44     27 68 24 68 
31c48     64 68 1E 68 
31c4c     5F 68 19 68 
31c50     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
31c54     DC 68 56 72 
31c58     7E 36 C2 B8 
31c5c     D7 84 73 90 
31c60     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
31c64     7B 90 7F 90 
31c68     82 90 84 90 
31c6c     CB 90 8B 90 
31c70     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
31c74     D7 90 96 90 
31c78     20 91 59 90 
31c7c     25 91 A2 90 
31c80     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
31c84     D0 89 40 EE 
31c88     12 64 C4 71 
31c8c     29 66 0C 69 
31c90     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
31c94     C0 68 02 69 
31c98     FE 68 FB 68 
31c9c     F9 68 F6 68 
31ca0     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
31ca4     EE 68 A8 68 
31ca8     2C 69 5F 68 
31cac     E2 68 81 66 
31cb0     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
31cb4     1E EB A6 8A 
31cb8     73 8B 5E 93 
31cbc     7B 90 48 91 
31cc0     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
31cc4     0D 91 11 91 
31cc8     14 91 16 91 
31ccc     5C 91 1C 91 
31cd0     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
31cd4     68 91 AF 91 
31cd8     2A 91 B5 91 
31cdc     75 91 1A 94 
31ce0     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
31ce4     70 0E CB 6C 
31ce8     5D 6E C4 67 
31cec     99 69 54 69 
31cf0     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
31cf4     D2 69 49 69 
31cf8     89 69 86 69 
31cfc     40 69 C4 69 
31d00     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
31d04     35 69 76 69 
31d08     58 67 EB 6D 
31d0c     E9 6D 89 0F 
31d10     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
31d14     33 94 94 91 
31d18     D9 91 56 91 
31d1c     E0 91 9F 91 
31d20     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
31d24     EC 91 EE 91 
31d28     F1 91 F4 91 
31d2c     F7 91 3D 92 
31d30     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
31d34     46 92 21 94 
31d38     11 89 A4 9D 
31d3c     FD 0E 8F 6C 
31d40     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
31d44     28 6A E1 69 
31d48     65 6A 1F 6A 
31d4c     5F 6A 1A 6A 
31d50     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
31d54     54 6A 0F 6A 
31d58     4F 6A 09 6A 
31d5c     06 6A 03 6A 
31d60     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
31d64     23 68 69 77 
31d68     3A 4D 38 CA 
31d6c     38 86 4E 91 
31d70     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
31d74     64 92 24 92 
31d78     6A 92 2A 92 
31d7c     70 92 30 92 
31d80     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
31d84     7B 92 7E 92 
31d88     C5 92 84 92 
31d8c     CB 92 8A 92 
31d90     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
31d94     4D 8D F9 E2 
31d98     97 59 FE 74 
31d9c     DB 68 6D 6A 
31da0     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
31da4     A8 6A A5 6A 
31da8     A3 6A 9F 6A 
31dac     9D 6A 9B 6A 
31db0     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
31db4     D6 6A 8F 6A 
31db8     CF 6A 46 6A 
31dbc     CA 6A E1 67 
31dc0     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
31dc4     D3 F7 15 92 
31dc8     90 8C BF 94 
31dcc     A6 92 EB 92 
31dd0     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
31dd4     B1 92 F7 92 
31dd8     FA 92 FD 92 
31ddc     00 93 02 93 
31de0     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
31de4     4F 93 52 93 
31de8     54 93 22 94 
31dec     5A 93 8F 88 
31df0     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
31df4     1C 77 07 6C 
31df8     E8 69 7A 6B 
31dfc     34 6B 75 6B 
31e00     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
31e04     29 6B 26 6B 
31e08     24 6B 21 6B 
31e0c     1D 6B 5E 6B 
31e10     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
31e14     12 6B 52 6B 
31e18     34 69 34 6E 
31e1c     BA 73 A4 24 
31e20     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
31e24     7A 94 B3 93 
31e28     72 93 31 93 
31e2c     78 93 7A 93 
31e30     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
31e34     83 93 86 93 
31e38     89 93 D0 93 
31e3c     D2 93 D5 93 
31e40     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
31e44     DD 93 40 96 
31e48     30 8B 99 9C 
31e4c     52 10 94 71 
31e50     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
31e54     46 6C 79 6B 
31e58     40 6C B7 6B 
31e5c     F7 6B B1 6B 
31e60     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
31e64     EC 6B A5 6B 
31e68     A2 6B 9F 6B 
31e6c     9D 6B 9A 6B 
31e70     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
31e74     C8 6A E4 76 
31e78     20 4B F9 CE 
31e7c     2E 8A 1A 92 
31e80     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
31e84     FB 93 BA 93 
31e88     01 94 03 94 
31e8c     4A 94 09 94 
31e90     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
31e94     55 94 14 94 
31e98     9E 94 1A 94 
31e9c     61 94 20 94 
31ea0     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
31ea4     3E 87 E5 CD 
31ea8     5F 50 6C 78 
31eac     B5 6A 04 6C 
31eb0     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
31eb4     83 6C 7F 6C 
31eb8     7C 6C 36 6C 
31ebc     76 6C 74 6C 
31ec0     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
31ec4     6B 6C 25 6C 
31ec8     66 6C 1F 6C 
31ecc     1D 6C 41 6A 
31ed0     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
31ed4     BA FA FC 94 
31ed8     5B 8D 97 96 
31edc     3B 94 C5 94 
31ee0     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
31ee4     89 94 8C 94 
31ee8     8F 94 92 94 
31eec     94 94 DB 94 
31ef0     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
31ef4     E4 94 E7 94 
31ef8     2D 95 74 95 
31efc     C8 96 15 89 
31f00     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
31f04     CB 75 31 6F 
31f08     7E 6B 10 6D 
31f0c     C9 6C 0A 6D 
31f10     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
31f14     BD 6C FF 6C 
31f18     FB 6C F9 6C 
31f1c     B2 6C F3 6C 
31f20     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
31f24     A7 6C E8 6C 
31f28     0D 6B 85 6F 
31f2c     C7 74 10 28 
31f30     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
31f34     96 96 47 95 
31f38     06 95 0A 95 
31f3c     0C 95 0F 95 
31f40     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
31f44     17 95 5E 95 
31f48     61 95 63 95 
31f4c     22 95 AC 95 
31f50     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
31f54     72 95 17 98 
31f58     59 8E 01 96 
31f5c     CF FC 5A 68 
31f60     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
31f64     96 6D 50 6D 
31f68     D5 6D 4A 6D 
31f6c     8C 6D 89 6D 
31f70     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
31f74     80 6D 3A 6D 
31f78     7A 6D 77 6D 
31f7c     75 6D 71 6D 
31f80     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
31f84     18 6C BC 78 
31f88     9A 4F 7E CF 
31f8c     1F 89 F1 93 
31f90     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
31f94     D2 95 4E 95 
31f98     D7 95 53 95 
31f9c     DD 95 E0 95 
31fa0     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
31fa4     A5 95 EB 95 
31fa8     EE 95 F0 95 
31fac     37 96 B3 95 
31fb0     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
31fb4     1A 98 D5 8D 
31fb8     C5 9F CD 0F 
31fbc     0F 71 F3 73 
31fc0     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
31fc4     D9 6D 5E 6E 
31fc8     D3 6D 58 6E 
31fcc     12 6E 0F 6E 
31fd0     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
31fd4     49 6E BF 6D 
31fd8     87 6E 76 6D 
31fdc     81 6E 11 6B 
31fe0     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
31fe4     3F 09 44 95 
31fe8     E5 8D 3F 99 
31fec     D4 95 A2 96 
31ff0     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
31ff4     23 96 69 96 
31ff8     6B 96 6E 96 
31ffc     71 96 74 96 
32000     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
32004     BF 96 3C 96 
32008     C6 96 C8 96 
3200c     A3 98 51 8D 
32010     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
32014     CF 75 29 73 
32018     90 6C EC 6E 
3201c     62 6E E7 6E 
32020     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
32024     9A 6E 98 6E 
32028     95 6E 91 6E 
3202c     8E 6E CF 6E 
32030     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
32034     40 6E C3 6E 
32038     E8 6C 45 6F 
3203c     A5 7B C9 35 
32040     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
32044     2D 98 23 97 
32048     E1 96 A0 96 
3204c     A4 96 EA 96 
32050     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
32054     AF 96 F4 96 
32058     F8 96 3E 97 
3205c     FD 96 43 97 
32060     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
32064     08 97 6B 99 
32068     D6 92 88 91 
3206c     D8 EE 84 66 
32070     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
32074     2E 6F E7 6E 
32078     6C 6F 24 6F 
3207c     21 6F 1F 6F 
32080     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
32084     17 6F 13 6F 
32088     54 6F 0E 6F 
3208c     0B 6F 4B 6F 
32090     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
32094     27 6D 1C 7B 
32098     19 59 9F DB 
3209c     66 8E BC 94 
320a0     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
320a4     67 97 26 97 
320a8     6D 97 2B 97 
320ac     72 97 32 97 
320b0     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
320b4     C1 97 7F 97 
320b8     C6 97 85 97 
320bc     CB 97 CE 97 
320c0     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
320c4     EC 8A C4 C6 
320c8     68 4C F4 7D 
320cc     63 6E E8 6E 
320d0     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
320d4     ED 6F A7 6F 
320d8     E7 6F A0 6F 
320dc     E1 6F 9B 6F 
320e0     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
320e4     D5 6F 8F 6F 
320e8     CE 6F 45 6F 
320ec     86 6F 68 6D 
320f0     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
320f4     C0 13 AD A2 
320f8     A7 8E 79 99 
320fc     E6 97 E8 97 
32100     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
32104     F1 97 F3 97 
32108     F6 97 F9 97 
3210c     FB 97 FE 97 
32110     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
32114     4A 98 0A 98 
32118     93 98 0F 98 
3211c     7F 9B BF 8C 
32120     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
32124     91 7B 62 73 
32128     1A 6E B9 70 
3212c     EB 6F B3 70 
32130     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
32134     25 70 20 70 
32138     1E 70 1B 70 
3213c     18 70 15 70 
32140     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
32144     0D 70 09 70 
32148     07 70 03 70 
3214c     01 70 FD 6F 
32150     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
32154     F6 6F F2 6F 
32158     EF 6F EC 6F 
3215c     2C 70 E6 6F 
32160     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
32164     DD 6F 97 6F 
32168     D7 6F 84 6E 
3216c     8F 6F 3F 7D 
32170     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
32172     00 00 00 00 | zero1 long 0
32176     FF FF FF FF 
3217a     FF FF       | atarist_spl file "atarist.spl" '512
3217c     00 00 00 00 
32180     00 00 00 00 
32184     00 00       | 	byte	$00[10]
32186     17 7F F2 7F 
3218a     B2 7F 72 7F 
3218e     33 7F F4 7E 
32192     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
32196     36 7E F5 7D 
3219a     E9 51 F2 0D 
3219e     8E 00 F3 FD 
321a2     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
321a6     57 FD 58 FD 
321aa     5B FD 5C FD 
321ae     5C FD 60 7D 
321b2     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
321b6     D6 7C 98 7C 
321ba     59 7C 1A 7C 
321be     DC 7B 9E 7B 
321c2     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
321c6     F3 05 00 FD 
321ca     41 FB EA FA 
321ce     D9 FA DB FA 
321d2     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
321d6     E4 FA 9B 36 
321da     F8 7A C0 7A 
321de     84 7A 45 7A 
321e2     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
321e6     8E 79 51 79 
321ea     15 79 D7 78 
321ee     3C 1F EB FF 
321f2     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
321f6     6D F8 65 F8 
321fa     68 F8 6D F8 
321fe     70 F8 74 F8 
32202     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
32206     AB 60 79 60 
3220a     4B 60 1A 60 
3220e     E9 5F B9 5F 
32212     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
32216     FB 59 B2 0B 
3221a     92 FA 3A F7 
3221e     96 F6 79 F6 
32222     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
32226     82 F6 86 F6 
3222a     8C F6 DB 5D 
3222e     F1 5E C1 5E 
32232     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
32236     34 5E 04 5E 
3223a     D6 5D A6 5D 
3223e     78 5D D4 3E 
32242     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
32246     27 F5 BA F4 
3224a     AB F4 AD F4 
3224e     B2 F4 B8 F4 
32252     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
32256     26 5D 2B 5D 
3225a     FC 5C CD 5C 
3225e     9F 5C 70 5C 
32262     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
32266     E5 5B B8 5B 
3226a     DB 24 A7 FC 
3226e     D1 F4 4D F3 
32272     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
32276     04 F3 0B F3 
3227a     11 F3 16 F3 
3227e     DE 18 98 5B 
32282     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
32286     4E 4A 29 48 
3228a     A0 47 6A 47 
3228e     43 47 20 47 
32292     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
32296     E2 F6 98 F2 
3229a     C5 F1 A3 F1 
3229e     A3 F1 A8 F1 
322a2     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
322a6     BF F1 00 3D 
322aa     EF 46 CD 46 
322ae     AA 46 86 46 
322b2     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
322b6     1C 46 F9 45 
322ba     D7 45 EE 43 
322be     DE 02 E8 F3 
322c2     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
322c6     61 F0 65 F0 
322ca     6D F0 74 F0 
322ce     7C F0 84 F0 
322d2     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
322d6     8E 45 6D 45 
322da     49 45 27 45 
322de     05 45 E1 44 
322e2     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
322e6     F1 2F A9 FB 
322ea     8B F1 9B EF 
322ee     40 EF 36 EF 
322f2     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
322f6     4D EF 56 EF 
322fa     5E EF 7B 44 
322fe     8C 44 69 44 
32302     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
32306     03 44 E1 43 
3230a     C0 43 F5 37 
3230e     69 33 0F 11 
32312     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
32316     66 EE 37 EE 
3231a     38 EE 40 EE 
3231e     48 EE 51 EE 
32322     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
32326     7D 32 6A 32 
3232a     51 32 37 32 
3232e     1F 32 05 32 
32332     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
32336     B9 31 A1 31 
3233a     F1 04 F4 F1 
3233e     50 EE A0 ED 
32342     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
32346     93 ED 9A ED 
3234a     A4 ED AD ED 
3234e     F4 27 C1 31 
32352     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
32356     78 31 5F 31 
3235a     46 31 2E 31 
3235e     15 31 FC 30 
32362     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
32366     C4 EF 4A ED 
3236a     DC EC CB EC 
3236e     D2 EC DA EC 
32372     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
32376     F9 EC 64 2F 
3237a     0A 31 F1 30 
3237e     D9 30 C0 30 
32382     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
32386     78 30 5F 30 
3238a     46 30 38 23 
3238e     A6 F6 19 EE 
32392     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
32396     20 EC 28 EC 
3239a     32 EC 3C EC 
3239e     47 EC 51 EC 
323a2     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
323a6     A3 22 93 22 
323aa     7F 22 6E 22 
323ae     5D 22 4C 22 
323b2     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
323b6     77 09 76 F1 
323ba     CC EC F0 EB 
323be     CD EB CE EB 
323c2     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
323c6     ED EB F5 EB 
323ca     3E F6 6B 22 
323ce     5F 22 4E 22 
323d2     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
323d6     1B 22 0B 22 
323da     FA 21 E9 21 
323de     D8 21 4D FF 
323e2     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
323e6     92 EB 7B EB 
323ea     82 EB 8C EB 
323ee     97 EB A1 EB 
323f2     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
323f6     15 22 04 22 
323fa     F3 21 E3 21 
323fe     D2 21 C0 21 
32402     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
32406     8E 21 7D 21 
3240a     9A F8 A4 ED 
3240e     8E EB 2F EB 
32412     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
32416     37 EB 42 EB 
3241a     4C EB 57 EB 
3241e     B2 17 22 19 
32422     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
32426     FD 18 EF 18 
3242a     E3 18 D6 18 
3242e     CA 18 BD 18 
32432     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
32436     60 EC 35 EB 
3243a     01 EB 01 EB 
3243e     0C EB 16 EB 
32442     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
32446     34 EB D0 18 
3244a     00 19 F4 18 
3244e     E8 18 DA 18 
32452     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
32456     B6 18 A9 18 
3245a     9D 18 91 05 
3245e     F0 EF CA EB 
32462     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
32466     E8 EA F2 EA 
3246a     FE EA 07 EB 
3246e     12 EB C2 EF 
32472     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
32476     D9 18 CD 18 
3247a     C0 18 B3 18 
3247e     A7 18 9B 18 
32482     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
32486     B8 FC 30 EE 
3248a     61 EB DC EA 
3248e     CD EA D2 EA 
32492     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
32496     F3 EA FE EA 
3249a     D2 09 D1 18 
3249e     C3 18 17 18 
324a2     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
324a6     66 11 52 11 
324aa     49 11 41 11 
324ae     38 11 E0 F4 
324b2     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
324b6     C9 EA C5 EA 
324ba     CF EA DB EA 
324be     E6 EA EF EA 
324c2     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
324c6     89 11 80 11 
324ca     78 11 6E 11 
324ce     67 11 5D 11 
324d2     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
324d6     43 11 32 0D 
324da     9C F1 07 EC 
324de     F8 EA CD EA 
324e2     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
324e6     E4 EA ED EA 
324ea     F8 EA 02 EB 
324ee     55 11 91 11 
324f2     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
324f6     75 11 6E 11 
324fa     64 11 5E 11 
324fe     54 11 4A 11 
32502     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
32506     A8 EB F1 EA 
3250a     D9 EA DC EA 
3250e     E8 EA F1 EA 
32512     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
32516     A6 EB 9E 11 
3251a     A0 11 96 11 
3251e     8D 11 85 11 
32522     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
32526     6A 11 CA 0D 
3252a     36 0B 57 F8 
3252e     6C ED 57 EB 
32532     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
32536     F4 EA FF EA 
3253a     09 EB 15 EB 
3253e     1E EB 1A FD 
32542     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
32546     ED 0A E8 0A 
3254a     E2 0A DC 0A 
3254e     D6 0A D1 0A 
32552     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
32556     F8 F3 BC EC 
3255a     57 EB 1E EB 
3255e     18 EB 24 EB 
32562     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
32566     42 EB 4D EB 
3256a     08 09 20 0B 
3256e     1A 0B 14 0B 
32572     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
32576     04 0B FE 0A 
3257a     F9 0A F2 0A 
3257e     84 08 3A F1 
32582     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
32586     42 EB 42 EB 
3258a     4E EB 57 EB 
3258e     62 EB 6B EB 
32592     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
32596     48 0B 43 0B 
3259a     3C 0B 36 0B 
3259e     31 0B 2C 0B 
325a2     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
325a6     1B 0B 5C 00 
325aa     6A EF 1B EC 
325ae     81 EB 6A EB 
325b2     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
325b6     85 EB 8E EB 
325ba     99 EB A3 EB 
325be     DD 05 E5 05 
325c2     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
325c6     DB 05 D8 05 
325ca     D5 05 D1 05 
325ce     D0 05 CB 05 
325d2     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
325d6     0C EC BB EB 
325da     B3 EB BB EB 
325de     C5 EB D0 EB 
325e2     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
325e6     E4 F7 2C 06 
325ea     28 06 24 06 
325ee     22 06 1F 06 
325f2     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
325f6     16 06 14 06 
325fa     0F 06 D0 F3 
325fe     65 ED 2D EC 
32602     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
32606     01 EC 0A EC 
3260a     14 EC 1E EC 
3260e     29 EC FB 03 
32612     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
32616     63 06 60 06 
3261a     5E 06 59 06 
3261e     58 06 54 06 
32622     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
32626     69 F1 21 ED 
3262a     55 EC 33 EC 
3262e     36 EC 40 EC 
32632     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
32636     5C EC 68 EC 
3263a     92 02 D9 02 
3263e     D7 02 D7 02 
32642     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
32646     D1 02 D1 02 
3264a     CE 02 CD 02 
3264e     5D FC 80 EF 
32652     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
32656     83 EC 8A EC 
3265a     93 EC 9C EC 
3265e     A5 EC B1 EC 
32662     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
32666     2B 03 2A 03 
3266a     29 03 26 03 
3266e     25 03 24 03 
32672     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
32676     1F 03 70 F7 
3267a     D0 EE 27 ED 
3267e     DB EC D4 EC 
32682     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
32686     F0 EC FA EC 
3268a     02 ED F9 F4 
3268e     7B 03 7C 03 
32692     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
32696     75 03 73 03 
3269a     72 03 70 03 
3269e     6D 03 6C 03 
326a2     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
326a6     54 ED 22 ED 
326aa     22 ED 2C ED 
326ae     35 ED 3F ED 
326b2     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
326b6     14 01 C3 03 
326ba     C1 03 C0 03 
326be     5F 01 A5 00 
326c2     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
326c6     7B 00 7C 00 
326ca     20 00 85 F1 
326ce     2A EE 89 ED 
326d2     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
326d6     80 ED 87 ED 
326da     90 ED 9A ED 
326de     A3 ED 73 00 
326e2     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
326e6     D0 00 D0 00 
326ea     D0 00 D0 00 
326ee     D0 00 CF 00 
326f2     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
326f6     80 F0 3D EE 
326fa     D5 ED C7 ED 
326fe     CD ED D6 ED 
32702     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
32706     F2 ED FA ED 
3270a     1D 01 29 01 
3270e     27 01 27 01 
32712     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
32716     25 01 26 01 
3271a     26 01 23 01 
3271e     D0 F7 EC EF 
32722     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
32726     1C EE 24 EE 
3272a     2D EE 37 EE 
3272e     40 EE 47 EE 
32732     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
32736     7D 01 7B 01 
3273a     7A 01 7A 01 
3273e     79 01 78 01 
32742     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
32746     84 FE DE F3 
3274a     6C EF 93 EE 
3274e     72 EE 72 EE 
32752     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
32756     8B EE 95 EE 
3275a     9E EE 15 FC 
3275e     67 FE 67 FE 
32762     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
32766     6B FE 6B FE 
3276a     6D FE 6D FE 
3276e     6D FE 6F FE 
32772     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
32776     DF EE CC EE 
3277a     CF EE D9 EE 
3277e     E1 EE EA EE 
32782     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
32786     5A FE C4 FE 
3278a     C3 FE C5 FE 
3278e     C6 FE C6 FE 
32792     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
32796     C8 FE C7 FE 
3279a     DA FB 85 F1 
3279e     8D EF 31 EF 
327a2     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
327a6     34 EF 3E EF 
327aa     46 EF 4F EF 
327ae     57 EF 0D FF 
327b2     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
327b6     1F FF 1F FF 
327ba     21 FF 21 FF 
327be     21 FF 21 FF 
327c2     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
327c6     15 F1 BE EF 
327ca     84 EF 7E EF 
327ce     88 EF 8F EF 
327d2     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
327d6     A9 EF 06 F2 
327da     A6 FC AB FC 
327de     AD FC AE FC 
327e2     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
327e6     B2 FC B4 FC 
327ea     B6 FC B7 FC 
327ee     8B F4 BD F0 
327f2     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
327f6     E4 EF EE EF 
327fa     F6 EF FD EF 
327fe     04 F0 0E F0 
32802     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
32806     0B FD 0D FD 
3280a     0F FD 11 FD 
3280e     11 FD 13 FD 
32812     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
32816     17 FD 64 F3 
3281a     CD F0 52 F0 
3281e     41 F0 45 F0 
32822     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
32826     5B F0 64 F0 
3282a     6D F0 FB FC 
3282e     65 FD 68 FD 
32832     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
32836     6C FD 6D FD 
3283a     6F FD 70 FD 
3283e     72 FD B3 FB 
32842     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
32846     A4 F0 99 F0 
3284a     A0 F0 A8 F0 
3284e     AE F0 B9 F0 
32852     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
32856     CB FB DD FB 
3285a     DE FB E0 FB 
3285e     E3 FB E3 FB 
32862     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
32866     E9 FB EC FB 
3286a     62 F7 27 F2 
3286e     2A F1 FF F0 
32872     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
32876     0C F1 13 F1 
3287a     1B F1 23 F1 
3287e     33 F2 3C FC 
32882     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
32886     42 FC 45 FC 
3288a     47 FC 48 FC 
3288e     4A FC 4C FC 
32892     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
32896     20 F2 77 F1 
3289a     5C F1 5F F1 
3289e     64 F1 6C F1 
328a2     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
328a6     83 F1 DC F8 
328aa     9A FC 9A FC 
328ae     9B FC 9E FC 
328b2     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
328b6     A3 FC A4 FC 
328ba     A6 FC A9 FC 
328be     90 F4 33 F2 
328c2     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
328c6     BA F1 BF F1 
328ca     C7 F1 CE F1 
328ce     D6 F1 DC F1 
328d2     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
328d6     F3 FC F5 FC 
328da     FE FB 79 FB 
328de     62 FB 5F FB 
328e2     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
328e6     6F FA AF F3 
328ea     53 F2 12 F2 
328ee     0F F2 15 F2 
328f2     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
328f6     2A F2 32 F2 
328fa     38 F2 9A FB 
328fe     AF FB B1 FB 
32902     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
32906     B7 FB B8 FB 
3290a     BA FB BC FB 
3290e     C1 FB 3B F8 
32912     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
32916     6E F2 6C F2 
3291a     74 F2 7A F2 
3291e     81 F2 87 F2 
32922     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
32926     06 FC 09 FC 
3292a     0C FC 0E FC 
3292e     0F FC 12 FC 
32932     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
32936     17 FC 1A FC 
3293a     B2 F6 7B F3 
3293e     DD F2 C5 F2 
32942     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
32946     D4 F2 DB F2 
3294a     E0 F2 E8 F2 
3294e     28 F8 60 FC 
32952     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
32956     64 FC 66 FC 
3295a     68 FC 6A FC 
3295e     6D FC 52 FC 
32962     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
32966     78 F3 24 F3 
3296a     1A F3 1E F3 
3296e     24 F3 2A F3 
32972     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
32976     3D F3 80 FA 
3297a     0C FB 0F FB 
3297e     10 FB 14 FB 
32982     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
32986     1B FB 1D FB 
3298a     1F FB 92 FA 
3298e     DE F4 AE F3 
32992     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
32996     79 F3 7E F3 
3299a     84 F3 8C F3 
3299e     92 F3 97 F3 
329a2     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
329a6     67 FB 69 FB 
329aa     6B FB 6F FB 
329ae     71 FB 72 FB 
329b2     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
329b6     E3 F8 BA F4 
329ba     EE F3 CC F3 
329be     CA F3 CF F3 
329c2     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
329c6     E2 F3 E8 F3 
329ca     ED F3 B7 FB 
329ce     BC FB BE FB 
329d2     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
329d6     C4 FB C6 FB 
329da     C8 FB C9 FB 
329de     CC FB 8F F7 
329e2     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
329e6     1E F4 1E F4 
329ea     24 F4 2A F4 
329ee     30 F4 38 F4 
329f2     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
329f6     AD FA B1 FA 
329fa     B4 FA B6 FA 
329fe     BA FA BB FA 
32a02     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
32a06     C2 FA C6 FA 
32a0a     55 F6 C6 F4 
32a0e     7D F4 72 F4 
32a12     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
32a16     83 F4 89 F4 
32a1a     8F F4 94 F4 
32a1e     66 FA 03 FB 
32a22     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
32a26     0A FB 0E FB 
32a2a     10 FB 11 FB 
32a2e     16 FB 18 FB 
32a32     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
32a36     F9 F4 CA F4 
32a3a     C5 F4 CB F4 
32a3e     D1 F4 D7 F4 
32a42     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
32a46     E8 F4 3F FB 
32a4a     56 FB 58 FB 
32a4e     5A FB 5E FB 
32a52     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
32a56     64 FB 64 FB 
32a5a     69 FB 99 F9 
32a5e     E9 F5 33 F5 
32a62     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
32a66     1D F5 22 F5 
32a6a     27 F5 2E F5 
32a6e     32 F5 37 F5 
32a72     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
32a76     BC FA BC FA 
32a7a     C1 FA C2 FA 
32a7e     C4 FA C8 FA 
32a82     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
32a86     F9 F7 DB F5 
32a8a     78 F5 69 F5 
32a8e     6A F5 70 F5 
32a92     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
32a96     7F F5 85 F5 
32a9a     6E F7 06 FB 
32a9e     0A FB 0B FB 
32aa2     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
32aa6     14 FB 15 FB 
32aaa     18 FB 1B FB 
32aae     1D FB 70 F7 
32ab2     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
32ab6     B6 F5 BB F5 
32aba     C0 F5 C6 F5 
32abe     CA F5 CF F5 
32ac2     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
32ac6     54 FB 56 FB 
32aca     5A FB 5B FB 
32ace     5E FB 5F FB 
32ad2     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
32ad6     67 FB 52 FB 
32ada     29 F7 33 F6 
32ade     06 F6 02 F6 
32ae2     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
32ae6     10 F6 16 F6 
32aea     1A F6 1F F6 
32aee     81 FB 9F FB 
32af2     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
32af6     51 FB F2 FA 
32afa     E3 FA E3 FA 
32afe     E5 FA E9 FA 
32b02     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
32b06     64 F6 4D F6 
32b0a     4D F6 53 F6 
32b0e     57 F6 5C F6 
32b12     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
32b16     6A F6 19 FB 
32b1a     1E FB 22 FB 
32b1e     23 FB 24 FB 
32b22     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
32b26     2C FB 2E FB 
32b2a     32 FB F0 F8 
32b2e     01 F7 A5 F6 
32b32     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
32b36     9F F6 A3 F6 
32b3a     A6 F6 AC F6 
32b3e     B0 F6 EB F7 
32b42     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
32b46     68 FB 6C FB 
32b4a     6E FB 71 FB 
32b4e     72 FB 74 FB 
32b52     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
32b56     71 F8 21 F7 
32b5a     E5 F6 DD F6 
32b5e     E1 F6 E6 F6 
32b62     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
32b66     F5 F6 F7 F6 
32b6a     F7 FA AB FB 
32b6e     AD FB AF FB 
32b72     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
32b76     B6 FB B9 FB 
32b7a     BB FB BC FB 
32b7e     21 FB 07 F8 
32b82     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
32b86     22 F7 26 F7 
32b8a     2B F7 2E F7 
32b8e     34 F7 38 F7 
32b92     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
32b96     13 FB 16 FB 
32b9a     17 FB 1B FB 
32b9e     1E FB 20 FB 
32ba2     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
32ba6     26 FB 77 FA 
32baa     F3 F7 7C F7 
32bae     67 F7 6A F7 
32bb2     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
32bb6     74 F7 7A F7 
32bba     7E F7 82 F7 
32bbe     53 FB 5A FB 
32bc2     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
32bc6     5F FB 63 FB 
32bca     65 FB 67 FB 
32bce     69 FB 6A FB 
32bd2     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
32bd6     B5 F7 A9 F7 
32bda     AD F7 B0 F7 
32bde     B5 F7 B8 F7 
32be2     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
32be6     6E F8 99 FB 
32bea     9C FB 9D FB 
32bee     9F FB A4 FB 
32bf2     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
32bf6     A9 FB AB FB 
32bfa     AD FB 46 F9 
32bfe     26 F8 F0 F7 
32c02     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
32c06     F4 F7 F8 F7 
32c0a     FB F7 FF F7 
32c0e     03 F8 65 FA 
32c12     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
32c16     2B FB 2F FB 
32c1a     30 FB 32 FB 
32c1e     34 FB 38 FB 
32c22     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
32c26     E9 F8 4A F8 
32c2a     2E F8 2C F8 
32c2e     2F F8 36 F8 
32c32     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
32c36     41 F8 44 F8 
32c3a     4A FB 67 FB 
32c3e     68 FB 6B FB 
32c42     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
32c46     73 FB 74 FB 
32c4a     78 FB 7A FB 
32c4e     14 FB E7 F8 
32c52     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
32c56     6D F8 70 F8 
32c5a     73 F8 78 F8 
32c5e     7C F8 80 F8 
32c62     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
32c66     A6 FB A7 FB 
32c6a     A9 FB AC FB 
32c6e     AF FB B1 FB 
32c72     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
32c76     B7 FB 73 FA 
32c7a     F8 F8 B4 F8 
32c7e     A9 F8 AB F8 
32c82     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
32c86     B4 F8 B8 F8 
32c8a     BB F8 FA F8 
32c8e     64 FB 65 FB 
32c92     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
32c96     6D FB 6F FB 
32c9a     70 FB 74 FB 
32c9e     77 FB 77 FB 
32ca2     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
32ca6     E9 F8 E4 F8 
32caa     E8 F8 EB F8 
32cae     EE F8 F2 F8 
32cb2     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
32cb6     B5 FA 9F FB 
32cba     A1 FB A4 FB 
32cbe     A5 FB A9 FB 
32cc2     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
32cc6     AE FB B1 FB 
32cca     B2 FB C7 F9 
32cce     39 F9 22 F9 
32cd2     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
32cd6     26 F9 2A F9 
32cda     2E F9 32 F9 
32cde     33 F9 BA FB 
32ce2     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
32ce6     DE FB E1 FB 
32cea     E2 FB E4 FB 
32cee     E5 FB E7 FB 
32cf2     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
32cf6     C5 F9 67 F9 
32cfa     57 F9 56 F9 
32cfe     5B F9 5F F9 
32d02     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
32d06     68 F9 6C F9 
32d0a     0B FC 11 FC 
32d0e     14 FC 15 FC 
32d12     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
32d16     B5 FB B5 FB 
32d1a     B6 FB B8 FB 
32d1e     E9 FA C8 F9 
32d22     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
32d26     90 F9 94 F9 
32d2a     95 F9 99 F9 
32d2e     9D F9 9F F9 
32d32     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
32d36     DE FB DF FB 
32d3a     E2 FB E4 FB 
32d3e     E6 FB E8 FB 
32d42     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
32d46     EF FB AC FA 
32d4a     E9 F9 C7 F9 
32d4e     C3 F9 C8 F9 
32d52     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
32d56     D0 F9 D4 F9 
32d5a     D6 F9 0E FB 
32d5e     11 FC 13 FC 
32d62     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
32d66     19 FC 1B FC 
32d6a     1D FC 1E FC 
32d6e     21 FC 22 FC 
32d72     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
32d76     F7 F9 F7 F9 
32d7a     FB F9 FE F9 
32d7e     00 FA 03 FA 
32d82     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
32d86     1B FC 45 FC 
32d8a     46 FC 48 FC 
32d8e     4A FC 4B FC 
32d92     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
32d96     52 FC 54 FC 
32d9a     F3 FB 82 FA 
32d9e     35 FA 28 FA 
32da2     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
32da6     31 FA 32 FA 
32daa     37 FA 37 FA 
32dae     3C FA 00 FC 
32db2     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
32db6     09 FC 0B FC 
32dba     0F FC 12 FC 
32dbe     12 FC 15 FC 
32dc2     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
32dc6     8D FA 60 FA 
32dca     5B FA 5C FA 
32dce     60 FA 61 FA 
32dd2     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
32dd6     6C FA 6D FA 
32dda     37 FC 3A FC 
32dde     3B FC 3D FC 
32de2     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
32de6     43 FC 44 FC 
32dea     45 FC 47 FC 
32dee     51 FB AB FA 
32df2     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
32df6     8E FA 91 FA 
32dfa     93 FA 95 FA 
32dfe     98 FA 9B FA 
32e02     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
32e06     68 FC 6A FC 
32e0a     6C FC 6E FC 
32e0e     70 FC 72 FC 
32e12     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
32e16     76 FC 3B FB 
32e1a     D0 FA BB FA 
32e1e     B9 FA BD FA 
32e22     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
32e26     C4 FA C6 FA 
32e2a     CA FA 13 FC 
32e2e     3A FC 3A FC 
32e32     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
32e36     41 FC 43 FC 
32e3a     44 FC 47 FC 
32e3e     48 FC 3C FC 
32e42     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
32e46     E6 FA E8 FA 
32e4a     EB FA EE FA 
32e4e     F0 FA F2 FA 
32e52     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
32e56     61 FC 66 FC 
32e5a     68 FC 6B FC 
32e5e     6C FC 6E FC 
32e62     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
32e66     73 FC 75 FC 
32e6a     13 FC 3F FB 
32e6e     17 FB 12 FB 
32e72     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
32e76     1A FB 1D FB 
32e7a     1F FB 20 FB 
32e7e     23 FB 92 FC 
32e82     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
32e86     96 FC 97 FC 
32e8a     9A FC 9C FC 
32e8e     9E FC 9F FC 
32e92     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
32e96     5A FB 41 FB 
32e9a     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
32e9e     00 00 00 00 | zero2 long 0
32ea2     01 00 00 00 
32ea6     00 00 00 00 
32eaa     00 00 00 00 
32eae     00 00 00 00 | mouse  file "mouse2.def"
32eb2     00 00 00 00 
32eb6     00 00 00 00 
32eba     00 00 00 00 
32ebe     00 00 00 00 | 	byte	$00[16]
32ec2     01 01 00 00 
32ec6     00 00 00 00 
32eca     00 00 00 00 
32ece     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32ed2     00 00 00 00 
32ed6     00 00 00 00 
32eda     00 00 00 00 
32ede     00 00 00 00 | 	byte	$00[16]
32ee2     01 0D 01 00 
32ee6     00 00 00 00 
32eea     00 00 00 00 
32eee     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32ef2     00 00 00 00 
32ef6     00 00 00 00 
32efa     00 00 00 00 
32efe     00 00 00 00 | 	byte	$00[16]
32f02     01 0D 0D 01 
32f06     00 00 00 00 
32f0a     00 00 00 00 
32f0e     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32f12     00 00 00 00 
32f16     00 00 00 00 
32f1a     00 00 00 00 
32f1e     00 00 00 00 | 	byte	$00[16]
32f22     01 0D 0D 0D 
32f26     01 00 00 00 
32f2a     00 00 00 00 
32f2e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32f32     00 00 00 00 
32f36     00 00 00 00 
32f3a     00 00 00 00 
32f3e     00 00 00 00 | 	byte	$00[16]
32f42     01 0D 0D 0D 
32f46     0D 01 00 00 
32f4a     00 00 00 00 
32f4e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32f52     00 00 00 00 
32f56     00 00 00 00 
32f5a     00 00 00 00 
32f5e     00 00 00 00 | 	byte	$00[16]
32f62     01 0D 0D 0D 
32f66     0D 0D 01 00 
32f6a     00 00 00 00 
32f6e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
32f72     00 00 00 00 
32f76     00 00 00 00 
32f7a     00 00 00 00 
32f7e     00 00 00 00 | 	byte	$00[16]
32f82     01 0D 0D 0D 
32f86     0D 0D 0D 01 
32f8a     00 00 00 00 
32f8e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
32f92     00 00 00 00 
32f96     00 00 00 00 
32f9a     00 00 00 00 
32f9e     00 00 00 00 | 	byte	$00[16]
32fa2     01 0D 0D 0D 
32fa6     0D 0D 0D 0C 
32faa     01 00 00 00 
32fae     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
32fb2     00 00 00 00 
32fb6     00 00 00 00 
32fba     00 00 00 00 
32fbe     00 00 00 00 | 	byte	$00[16]
32fc2     01 0D 0D 0D 
32fc6     0D 0D 0D 0D 
32fca     0C 01 00 00 
32fce     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
32fd2     00 00 00 00 
32fd6     00 00 00 00 
32fda     00 00 00 00 
32fde     00 00 00 00 | 	byte	$00[16]
32fe2     01 0D 0D 0D 
32fe6     0D 0D 0D 0D 
32fea     0D 0C 01 00 
32fee     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
32ff2     00 00 00 00 
32ff6     00 00 00 00 
32ffa     00 00 00 00 
32ffe     00 00 00 00 | 	byte	$00[16]
33002     01 0D 0D 0D 
33006     0D 0D 0D 0D 
3300a     0D 0D 0B 01 
3300e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
33012     00 00 00 00 
33016     00 00 00 00 
3301a     00 00 00 00 
3301e     00 00 00 00 | 	byte	$00[16]
33022     01 0D 0D 0D 
33026     0C 0D 0D 03 
3302a     01 01 01 01 
3302e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
33032     00 00 00 00 
33036     00 00 00 00 
3303a     00 00 00 00 
3303e     00 00 00 00 | 	byte	$00[16]
33042     01 0D 0D 0C 
33046     01 09 0D 03 
3304a     00 00 00 00 
3304e     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
33052     00 00 00 00 
33056     00 00 00 00 
3305a     00 00 00 00 
3305e     00 00 00 00 | 	byte	$00[16]
33062     01 0D 0C 01 
33066     00 01 0D 0B 
3306a     01 00 00 00 
3306e     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
33072     00 00 00 00 
33076     00 00 00 00 
3307a     00 00 00 00 
3307e     00 00 00 00 | 	byte	$00[16]
33082     01 0C 01 00 
33086     00 01 0A 0D 
3308a     01 00 00 00 
3308e     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
33092     00 00 00 00 
33096     00 00 00 00 
3309a     00 00 00 00 
3309e     00 00 00 00 | 	byte	$00[16]
330a2     01 01 00 00 
330a6     00 00 01 0D 
330aa     0B 01 00 00 
330ae     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
330b2     00 00 00 00 
330b6     00 00 00 00 
330ba     00 00 00 00 
330be     00 00 00 00 
330c2     00 00 00 00 
330c6     00 00       | 	byte	$00[22]
330c8     01 0B 0D 01 
330cc     00 00 00 00 
330d0     00 00 00 00 
330d4     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
330d8     00 00 00 00 
330dc     00 00 00 00 
330e0     00 00 00 00 
330e4     00 00 00 00 
330e8     00          | 	byte	$00[17]
330e9     01 01 00 00 
330ed     00 00 00 00 
330f1     00 00 00 00 
330f5     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
330f9     00 00 00 00 
      ...             
3329d     00 00 00 00 
332a1     00          | 	byte	$00[425]
332a2     73 32 00 04 
332a6     00 00 10 00 
332aa     00 00 00 00 
332ae     00 00 00 00 | atari2 file "atari2.s2"
332b2     43 87 43 87 
332b6     43 87 44 87 
332ba     43 87 44 87 
332be     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
332c2     43 87 43 87 
332c6     43 87 44 87 
332ca     43 87 43 87 
332ce     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
332d2     44 87 43 87 
332d6     44 87 43 87 
332da     43 87 43 87 
332de     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
332e2     43 87 43 87 
332e6     44 87 43 87 
332ea     44 87 44 87 
332ee     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
332f2     43 87 43 87 
332f6     44 87 43 87 
332fa     43 87 42 87 
332fe     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
33302     43 87 43 87 
33306     43 87 43 87 
3330a     44 87 43 87 
3330e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
33312     44 87 44 87 
33316     43 87 44 87 
3331a     43 87 44 87 
3331e     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
33322     44 87 43 87 
33326     44 87 44 87 
3332a     43 87 43 87 
3332e     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
33332     43 87 44 87 
33336     44 87 43 87 
3333a     43 87 44 87 
3333e     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
33342     43 87 43 87 
33346     43 87 43 87 
3334a     43 87 43 87 
3334e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
33352     42 87 43 87 
33356     44 87 42 87 
3335a     43 87 43 87 
3335e     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
33362     43 87 44 87 
33366     44 87 43 87 
3336a     43 87 43 87 
3336e     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
33372     43 87 5C 87 
33376     EE 86 AC 87 
3337a     4C 7C A3 78 
3337e     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
33382     BC 78 BB 78 
33386     BD 78 BC 78 
3338a     BB 78 BD 78 
3338e     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
33392     BB 78 BB 78 
33396     BC 78 BC 78 
3339a     BC 78 BB 78 
3339e     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
333a2     BC 78 BC 78 
333a6     BC 78 BC 78 
333aa     BC 78 BC 78 
333ae     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
333b2     BB 78 BC 78 
333b6     A0 78 4C 7C 
333ba     11 7A 29 89 
333be     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
333c2     44 87 43 87 
333c6     44 87 43 87 
333ca     43 87 42 87 
333ce     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
333d2     43 87 43 87 
333d6     44 87 ED 85 
333da     71 85 52 79 
333de     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
333e2     BC 78 BC 78 
333e6     BC 78 BC 78 
333ea     BC 78 BC 78 
333ee     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
333f2     BC 78 BC 78 
333f6     BC 78 A0 78 
333fa     CF 7A B9 81 
333fe     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
33402     44 87 43 87 
33406     43 87 44 87 
3340a     43 87 44 87 
3340e     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
33412     43 87 43 87 
33416     43 87 43 87 
3341a     44 87 43 87 
3341e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
33422     43 87 43 87 
33426     44 87 43 87 
3342a     44 87 43 87 
3342e     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
33432     44 87 43 87 
33436     43 87 43 87 
3343a     5A 87 39 81 
3343e     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
33442     A5 78 BC 78 
33446     BB 78 BC 78 
3344a     BB 78 BC 78 
3344e     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
33452     BC 78 BC 78 
33456     BC 78 BC 78 
3345a     BC 78 8F 79 
3345e     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
33462     09 85 47 87 
33466     43 87 43 87 
3346a     42 87 42 87 
3346e     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
33472     43 87 43 87 
33476     43 87 43 87 
3347a     43 87 44 87 
3347e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
33482     43 87 43 87 
33486     44 87 43 87 
3348a     42 87 43 87 
3348e     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
33492     44 87 43 87 
33496     43 87 43 87 
3349a     44 87 44 87 
3349e     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
334a2     94 78 55 7A 
334a6     B9 78 BC 78 
334aa     BC 78 BC 78 
334ae     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
334b2     BC 78 BB 78 
334b6     BC 78 BC 78 
334ba     BC 78 BC 78 
334be     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
334c2     BB 78 BC 78 
334c6     BC 78 BC 78 
334ca     BB 78 BC 78 
334ce     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
334d2     BC 78 BC 78 
334d6     BD 78 BC 78 
334da     BC 78 BB 78 
334de     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
334e2     94 78 B3 84 
334e6     36 84 4A 87 
334ea     43 87 43 87 
334ee     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
334f2     43 87 44 87 
334f6     43 87 43 87 
334fa     43 87 43 87 
334fe     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
33502     43 87 44 87 
33506     43 87 44 87 
3350a     43 87 43 87 
3350e     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
33512     43 87 43 87 
33516     43 87 45 87 
3351a     43 87 43 87 
3351e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
33522     43 87 44 87 
33526     44 87 44 87 
3352a     43 87 43 87 
3352e     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
33532     43 87 42 87 
33536     43 87 43 87 
3353a     44 87 43 87 
3353e     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
33542     54 87 3C 82 
33546     36 83 52 79 
3354a     C6 78 BC 78 
3354e     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
33552     BB 78 BB 78 
33556     BC 78 BC 78 
3355a     BC 78 BC 78 
3355e     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33562     BD 78 ED 78 
33566     1B 79 F4 83 
3356a     4D 83 4E 87 
3356e     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
33572     44 87 43 87 
33576     42 87 44 87 
3357a     43 87 42 87 
3357e     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
33582     43 87 54 87 
33586     26 82 B3 84 
3358a     D6 77 BB 78 
3358e     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
33592     BC 78 BB 78 
33596     BB 78 BB 78 
3359a     BB 78 BB 78 
3359e     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
335a2     BC 78 BC 78 
335a6     26 79 18 75 
335aa     36 83 1F 84 
335ae     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
335b2     43 87 43 87 
335b6     43 87 43 87 
335ba     43 87 44 87 
335be     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
335c2     43 87 44 87 
335c6     44 87 43 87 
335ca     43 87 43 87 
335ce     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
335d2     43 87 43 87 
335d6     43 87 43 87 
335da     44 87 44 87 
335de     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
335e2     44 87 43 87 
335e6     43 87 43 87 
335ea     43 87 44 87 
335ee     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
335f2     44 87 44 87 
335f6     44 87 43 87 
335fa     44 87 43 87 
335fe     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
33602     43 87 43 87 
33606     43 87 44 87 
3360a     44 87 43 87 
3360e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
33612     43 87 43 87 
33616     43 87 43 87 
3361a     43 87 44 87 
3361e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
33622     43 87 44 87 
33626     43 87 44 87 
3362a     19 87 7D 86 
3362e     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
33632     B1 78 BC 78 
33636     BC 78 BC 78 
3363a     BC 78 BC 78 
3363e     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33642     BC 78 BC 78 
33646     BD 78 BC 78 
3364a     B7 78 3B 7B 
3364e     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
33652     96 86 44 87 
33656     43 87 43 87 
3365a     43 87 43 87 
3365e     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
33662     44 87 44 87 
33666     43 87 44 87 
3366a     43 87 44 87 
3366e     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
33672     43 87 44 87 
33676     43 87 44 87 
3367a     43 87 44 87 
3367e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
33682     43 87 44 87 
33686     43 87 43 87 
3368a     44 87 43 87 
3368e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
33692     44 87 44 87 
33696     43 87 43 87 
3369a     43 87 44 87 
3369e     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
336a2     43 87 43 87 
336a6     43 87 43 87 
336aa     44 87 44 87 
336ae     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
336b2     36 83 CF 7A 
336b6     AB 78 BB 78 
336ba     BC 78 BC 78 
336be     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
336c2     BB 78 BC 78 
336c6     BC 78 BC 78 
336ca     BC 78 BC 78 
336ce     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
336d2     BC 78 BC 78 
336d6     BC 78 BB 78 
336da     BC 78 BC 78 
336de     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
336e2     BB 78 BC 78 
336e6     BB 78 BC 78 
336ea     BC 78 BD 78 
336ee     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
336f2     BC 78 BC 78 
336f6     BC 78 BC 78 
336fa     BC 78 BD 78 
336fe     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
33702     BC 78 BB 78 
33706     BC 78 BB 78 
3370a     BB 78 BC 78 
3370e     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
33712     BC 78 BC 78 
33716     BC 78 BC 78 
3371a     BC 78 BB 78 
3371e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
33722     BC 78 BC 78 
33726     BC 78 BD 78 
3372a     BB 78 BC 78 
3372e     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
33732     BC 78 BC 78 
33736     BC 78 BB 78 
3373a     BC 78 BB 78 
3373e     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
33742     BB 78 BC 78 
33746     BC 78 BC 78 
3374a     BC 78 BB 78 
3374e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33752     BC 78 BC 78 
33756     BC 78 BB 78 
3375a     BC 78 BB 78 
3375e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33762     BC 78 BC 78 
33766     BC 78 BC 78 
3376a     BB 78 BC 78 
3376e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
33772     BC 78 9F 78 
33776     52 79 B3 84 
3377a     2F 86 60 87 
3377e     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
33782     44 87 43 87 
33786     43 87 43 87 
3378a     43 87 43 87 
3378e     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
33792     43 87 43 87 
33796     43 87 44 87 
3379a     43 87 43 87 
3379e     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
337a2     43 87 43 87 
337a6     43 87 43 87 
337aa     43 87 44 87 
337ae     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
337b2     44 87 44 87 
337b6     5E 87 BC 80 
337ba     FB 80 94 78 
337be     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
337c2     BD 78 BC 78 
337c6     BB 78 BC 78 
337ca     BB 78 BB 78 
337ce     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
337d2     BC 78 BB 78 
337d6     BB 78 6B 79 
337da     D6 77 AC 87 
337de     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
337e2     43 87 44 87 
337e6     43 87 43 87 
337ea     44 87 43 87 
337ee     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
337f2     43 87 44 87 
337f6     43 87 5C 87 
337fa     E7 80 00 80 
337fe     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
33802     BC 78 BD 78 
33806     BC 78 BC 78 
3380a     BC 78 BB 78 
3380e     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33812     BC 78 BC 78 
33816     BB 78 BC 78 
3381a     BB 78 BC 78 
3381e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33822     BB 78 BC 78 
33826     BC 78 BC 78 
3382a     BC 78 BC 78 
3382e     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33832     BC 78 BC 78 
33836     BC 78 BC 78 
3383a     A0 78 8D 7B 
3383e     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
33842     60 87 43 87 
33846     44 87 44 87 
3384a     43 87 43 87 
3384e     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
33852     44 87 43 87 
33856     43 87 43 87 
3385a     44 87 73 86 
3385e     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
33862     51 7B B6 78 
33866     BC 78 BD 78 
3386a     BC 78 BC 78 
3386e     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33872     BB 78 BC 78 
33876     BD 78 BB 78 
3387a     BC 78 BB 78 
3387e     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
33882     BC 78 BC 78 
33886     BC 78 BC 78 
3388a     BB 78 BC 78 
3388e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33892     BC 78 BB 78 
33896     BB 78 BC 78 
3389a     BC 78 BB 78 
3389e     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
338a2     22 8C AF 84 
338a6     48 87 43 87 
338aa     44 87 43 87 
338ae     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
338b2     43 87 42 87 
338b6     43 87 43 87 
338ba     44 87 43 87 
338be     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
338c2     43 87 43 87 
338c6     44 87 44 87 
338ca     43 87 43 87 
338ce     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
338d2     43 87 43 87 
338d6     43 87 43 87 
338da     44 87 43 87 
338de     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
338e2     9F 8B D6 77 
338e6     16 7C B3 78 
338ea     BC 78 BB 78 
338ee     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
338f2     BB 78 BC 78 
338f6     BB 78 BC 78 
338fa     BC 78 BC 78 
338fe     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
33902     BC 78 BB 78 
33906     BB 78 BC 78 
3390a     BB 78 BC 78 
3390e     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
33912     BB 78 BB 78 
33916     BC 78 BC 78 
3391a     BC 78 BB 78 
3391e     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
33922     BC 78 BC 78 
33926     BC 78 BD 78 
3392a     BB 78 BC 78 
3392e     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
33932     BC 78 BC 78 
33936     BC 78 BB 78 
3393a     BC 78 BC 78 
3393e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
33942     A8 78 54 7E 
33946     F4 83 17 82 
3394a     50 87 43 87 
3394e     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
33952     44 87 43 87 
33956     44 87 43 87 
3395a     43 87 44 87 
3395e     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
33962     43 87 28 87 
33966     20 85 CF 7A 
3396a     70 7D AD 78 
3396e     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
33972     BB 78 BC 78 
33976     BC 78 BC 78 
3397a     BB 78 BB 78 
3397e     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
33982     BB 78 B2 78 
33986     9A 7C CF 7A 
3398a     4A 87 0D 87 
3398e     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
33992     43 87 44 87 
33996     43 87 44 87 
3399a     43 87 43 87 
3399e     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
339a2     44 87 43 87 
339a6     28 87 51 85 
339aa     11 7A 1E 7D 
339ae     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
339b2     BC 78 BB 78 
339b6     BC 78 BC 78 
339ba     BC 78 BC 78 
339be     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
339c2     BB 78 BC 78 
339c6     BB 78 BC 78 
339ca     BC 78 BC 78 
339ce     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
339d2     BB 78 BC 78 
339d6     BC 78 BC 78 
339da     BD 78 BB 78 
339de     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
339e2     BC 78 BB 78 
339e6     BC 78 BC 78 
339ea     BC 78 BB 78 
339ee     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
339f2     BC 78 BC 78 
339f6     BC 78 BC 78 
339fa     BB 78 BC 78 
339fe     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33a02     BC 78 BD 78 
33a06     BC 78 BC 78 
33a0a     BC 78 BB 78 
33a0e     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33a12     BC 78 BB 78 
33a16     BB 78 BC 78 
33a1a     BC 78 BB 78 
33a1e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33a22     BB 78 BB 78 
33a26     BB 78 BC 78 
33a2a     B6 78 48 7D 
33a2e     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
33a32     56 87 43 87 
33a36     42 87 44 87 
33a3a     44 87 43 87 
33a3e     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
33a42     43 87 44 87 
33a46     43 87 44 87 
33a4a     4C 87 7E 83 
33a4e     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
33a52     F7 78 BC 78 
33a56     BC 78 BB 78 
33a5a     BB 78 BC 78 
33a5e     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33a62     BC 78 BB 78 
33a66     BC 78 BC 78 
33a6a     BB 78 BC 78 
33a6e     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
33a72     BB 78 BC 78 
33a76     BC 78 BC 78 
33a7a     BC 78 BB 78 
33a7e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33a82     BC 78 BC 78 
33a86     BC 78 BC 78 
33a8a     BC 78 BB 78 
33a8e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33a92     BC 78 BB 78 
33a96     BB 78 BC 78 
33a9a     BC 78 BB 78 
33a9e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33aa2     BC 78 BC 78 
33aa6     BB 78 BC 78 
33aaa     BC 78 BC 78 
33aae     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
33ab2     73 32 00 04 
33ab6     00 00 10 00 
33aba     00 00 00 00 
33abe     00 00 00 00 | atari12 file "atari12.s2"
33ac2     00 6D 00 6D 
33ac6     00 6D 00 6D 
33aca     00 6D 00 6D 
33ace     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33ad2     00 6D 00 6D 
33ad6     00 6D 00 6D 
33ada     00 6D 00 6D 
33ade     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33ae2     00 6D 00 6D 
33ae6     00 6D 00 6D 
33aea     00 6D 00 6D 
33aee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33af2     00 6D 00 6D 
33af6     00 6D 00 6D 
33afa     00 6D 00 6D 
33afe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33b02     00 6D 00 6D 
33b06     00 6D 00 6D 
33b0a     00 6D 00 6D 
33b0e     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
33b12     00 6C 00 6C 
33b16     00 6C 00 6C 
33b1a     00 6C 00 6C 
33b1e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33b22     00 6C 00 6C 
33b26     00 6C 00 6C 
33b2a     00 6C 00 6C 
33b2e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33b32     00 6C 00 6C 
33b36     00 6C 00 6C 
33b3a     00 6C 00 6C 
33b3e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33b42     00 6C 00 6C 
33b46     00 6C 00 6C 
33b4a     00 6C 00 6C 
33b4e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33b52     00 6C 00 6C 
33b56     00 6C 00 6C 
33b5a     00 6C 00 6C 
33b5e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33b62     00 6C 00 6C 
33b66     00 6C 00 6C 
33b6a     00 6C 00 6C 
33b6e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33b72     00 6C 00 6C 
33b76     00 6C 00 6C 
33b7a     00 6C 00 6C 
33b7e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33b82     00 6C 00 6C 
33b86     00 6C 00 6C 
33b8a     00 6C 00 6C 
33b8e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33b92     00 6C 00 6C 
33b96     00 6C 00 6C 
33b9a     00 6C 00 6C 
33b9e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33ba2     00 6C 00 6C 
33ba6     00 6C 00 6C 
33baa     00 6C 00 6C 
33bae     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33bb2     00 6C 00 6C 
33bb6     00 6C 00 6C 
33bba     00 6C 00 6C 
33bbe     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33bc2     00 6C 00 6B 
33bc6     00 6B 00 6B 
33bca     00 6B 00 6B 
33bce     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33bd2     00 6B 00 6B 
33bd6     00 6B 00 6B 
33bda     00 6B 00 6B 
33bde     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33be2     00 6B 00 6B 
33be6     00 6B 00 6B 
33bea     00 6B 00 6B 
33bee     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33bf2     00 6B 00 6B 
33bf6     00 6B 00 6B 
33bfa     00 6B 00 6B 
33bfe     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33c02     00 6B 00 6B 
33c06     00 6B 00 6B 
33c0a     00 6B 00 6B 
33c0e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33c12     00 6B 00 6B 
33c16     00 6B 00 6B 
33c1a     00 6B 00 6B 
33c1e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33c22     00 6B 00 6B 
33c26     00 6B 00 6B 
33c2a     00 6B 00 6B 
33c2e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33c32     00 6B 00 6B 
33c36     00 6B 00 6B 
33c3a     00 6B 00 6B 
33c3e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33c42     00 6B 00 6B 
33c46     00 6B 00 6B 
33c4a     00 6B 00 6B 
33c4e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33c52     00 6B 00 6B 
33c56     00 6B 00 6B 
33c5a     00 6A 00 9D 
33c5e     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
33c62     00 9E 00 9E 
33c66     00 9E 00 9E 
33c6a     00 9E 00 9E 
33c6e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33c72     00 9E 00 9E 
33c76     00 9E 00 9E 
33c7a     00 9E 00 9E 
33c7e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33c82     00 9E 00 9E 
33c86     00 9E 00 9E 
33c8a     00 9E 00 9E 
33c8e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33c92     00 9E 00 9E 
33c96     00 9E 00 9E 
33c9a     00 9E 00 9E 
33c9e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33ca2     00 9E 00 9E 
33ca6     00 9E 00 9E 
33caa     00 9E 00 9E 
33cae     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33cb2     00 9E 00 9E 
33cb6     00 9E 00 9E 
33cba     00 9E 00 9E 
33cbe     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33cc2     00 9E 00 9E 
33cc6     00 9E 00 9E 
33cca     00 9E 00 9E 
33cce     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33cd2     00 9E 00 9E 
33cd6     00 9E 00 9E 
33cda     00 9E 00 9E 
33cde     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33ce2     00 9E 00 9E 
33ce6     00 9E 00 9E 
33cea     00 9E 00 9E 
33cee     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
33cf2     00 9F 00 9F 
33cf6     00 9F 00 9F 
33cfa     00 9F 00 9F 
33cfe     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33d02     00 9F 00 9F 
33d06     00 9F 00 9F 
33d0a     00 9F 00 9F 
33d0e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33d12     00 9F 00 9F 
33d16     00 9F 00 9F 
33d1a     00 9F 00 9F 
33d1e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33d22     00 9F 00 9F 
33d26     00 9F 00 9F 
33d2a     00 9F 00 9F 
33d2e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33d32     00 9F 00 9F 
33d36     00 9F 00 9F 
33d3a     00 9F 00 9F 
33d3e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33d42     00 9F 00 9F 
33d46     00 9F 00 9F 
33d4a     00 9F 00 9F 
33d4e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33d52     00 9F 00 9F 
33d56     00 9F 00 9F 
33d5a     00 9F 00 9F 
33d5e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33d62     00 9F 00 9F 
33d66     00 9F 00 9F 
33d6a     00 9F 00 9F 
33d6e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33d72     00 9F 00 9F 
33d76     00 9F 00 9F 
33d7a     00 9F 00 9F 
33d7e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33d82     00 9F 00 9F 
33d86     00 9F 00 9F 
33d8a     00 9F 00 9F 
33d8e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33d92     00 9F 00 9F 
33d96     00 9F 00 9F 
33d9a     00 9F 00 9F 
33d9e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33da2     00 9F 00 9F 
33da6     00 9F 00 9F 
33daa     00 9F 00 9F 
33dae     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33db2     00 9F 00 9F 
33db6     00 9F 00 A0 
33dba     00 A0 00 A0 
33dbe     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33dc2     00 A0 00 A0 
33dc6     00 A0 00 A0 
33dca     00 A0 00 A0 
33dce     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33dd2     00 A0 00 A0 
33dd6     00 A0 00 A0 
33dda     00 A0 00 A0 
33dde     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33de2     00 A0 00 A0 
33de6     00 A0 00 A0 
33dea     00 A0 00 A0 
33dee     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33df2     00 A0 00 A0 
33df6     00 A0 00 A0 
33dfa     00 A0 00 A0 
33dfe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e02     00 A0 00 A0 
33e06     00 A0 00 A0 
33e0a     00 A0 00 A0 
33e0e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e12     00 A0 00 A0 
33e16     00 A0 00 A0 
33e1a     00 A0 00 A0 
33e1e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e22     00 A0 00 A0 
33e26     00 A0 00 A0 
33e2a     00 A0 00 A0 
33e2e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e32     00 A0 00 A0 
33e36     00 A0 00 A0 
33e3a     00 A0 00 A0 
33e3e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e42     00 A0 00 A0 
33e46     00 A0 00 A0 
33e4a     00 A0 00 A0 
33e4e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e52     00 A0 00 A0 
33e56     00 A0 00 A0 
33e5a     00 A0 00 A0 
33e5e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e62     00 A0 00 A0 
33e66     00 A0 00 A0 
33e6a     00 A0 00 A0 
33e6e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e72     00 A0 00 A0 
33e76     00 A0 00 A0 
33e7a     00 A0 00 A0 
33e7e     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
33e82     00 6D 00 6D 
33e86     00 6D 00 6D 
33e8a     00 6D 00 6D 
33e8e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33e92     00 6D 00 6D 
33e96     00 6D 00 6D 
33e9a     00 6D 00 6D 
33e9e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33ea2     00 6D 00 6D 
33ea6     00 6D 00 6D 
33eaa     00 6D 00 6D 
33eae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33eb2     00 6D 00 6D 
33eb6     00 6D 00 6D 
33eba     00 6D 00 6D 
33ebe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33ec2     00 6D 00 6D 
33ec6     00 6D 00 6D 
33eca     00 6D 00 6D 
33ece     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33ed2     00 6D 00 6D 
33ed6     00 6D 00 6D 
33eda     00 6D 00 6D 
33ede     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33ee2     00 6D 00 6D 
33ee6     00 6D 00 6D 
33eea     00 6D 00 6D 
33eee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33ef2     00 6D 00 6D 
33ef6     00 6D 00 6D 
33efa     00 6D 00 6D 
33efe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33f02     00 6D 00 6D 
33f06     00 A0 00 A0 
33f0a     00 A0 00 A0 
33f0e     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f12     00 A0 00 A0 
33f16     00 A0 00 A0 
33f1a     00 A0 00 A0 
33f1e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f22     00 A0 00 A0 
33f26     00 A0 00 A0 
33f2a     00 A0 00 A0 
33f2e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f32     00 A0 00 A0 
33f36     00 A0 00 A0 
33f3a     00 A0 00 A0 
33f3e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f42     00 A0 00 A0 
33f46     00 A0 00 A0 
33f4a     00 A0 00 A0 
33f4e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f52     00 A0 00 A0 
33f56     00 A0 00 A0 
33f5a     00 A0 00 A0 
33f5e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f62     00 A0 00 A0 
33f66     00 A0 00 A0 
33f6a     00 A0 00 A0 
33f6e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f72     00 A0 00 A0 
33f76     00 A0 00 A0 
33f7a     00 A0 00 A0 
33f7e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f82     00 A0 00 A0 
33f86     00 A0 00 A0 
33f8a     00 A0 00 A0 
33f8e     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
33f92     00 6D 00 6D 
33f96     00 6D 00 6D 
33f9a     00 6D 00 6D 
33f9e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33fa2     00 6D 00 6D 
33fa6     00 6D 00 6D 
33faa     00 6D 00 6D 
33fae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33fb2     00 6D 00 6D 
33fb6     00 6D 00 6D 
33fba     00 6D 00 6D 
33fbe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33fc2     00 6D 00 6D 
33fc6     00 6D 00 6D 
33fca     00 6D 00 6D 
33fce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33fd2     00 6D 00 6D 
33fd6     00 6D 00 6D 
33fda     00 6D 00 6D 
33fde     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33fe2     00 6D 00 6D 
33fe6     00 6D 00 6D 
33fea     00 6D 00 6D 
33fee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33ff2     00 6D 00 6D 
33ff6     00 6D 00 6D 
33ffa     00 6D 00 6D 
33ffe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34002     00 6D 00 6D 
34006     00 6D 00 6D 
3400a     00 6D 00 6D 
3400e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34012     00 6D 00 6D 
34016     00 6C 00 A0 
3401a     00 9F 00 A0 
3401e     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
34022     00 A0 00 A0 
34026     00 A0 00 A0 
3402a     00 A0 00 A0 
3402e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34032     00 A0 00 A0 
34036     00 A0 00 A0 
3403a     00 A0 00 A0 
3403e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34042     00 A0 00 A0 
34046     00 A0 00 A0 
3404a     00 A0 00 A0 
3404e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34052     00 A0 00 A0 
34056     00 A0 00 A0 
3405a     00 A0 00 A0 
3405e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34062     00 A0 00 A0 
34066     00 A0 00 A0 
3406a     00 A0 00 A0 
3406e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34072     00 A0 00 A0 
34076     00 A0 00 A0 
3407a     00 A0 00 A0 
3407e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34082     00 A0 00 A0 
34086     00 A0 00 A0 
3408a     00 A0 00 A0 
3408e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34092     00 A0 00 A0 
34096     00 A0 00 A0 
3409a     00 A0 00 A0 
3409e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
340a2     00 A0 00 A0 
340a6     00 A0 00 A0 
340aa     00 A0 00 A0 
340ae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
340b2     00 A0 00 A0 
340b6     00 A0 00 A0 
340ba     00 A0 00 A0 
340be     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
340c2     00 A0 00 A0 
340c6     00 A0 00 A0 
340ca     00 A0 00 A0 
340ce     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
340d2     00 A1 00 A1 
340d6     00 A1 00 A1 
340da     00 A1 00 A1 
340de     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
340e2     00 A1 00 A1 
340e6     00 A1 00 A1 
340ea     00 A1 00 A1 
340ee     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
340f2     00 A1 00 A1 
340f6     00 A1 00 A1 
340fa     00 A1 00 A1 
340fe     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
34102     00 A1 00 A1 
34106     00 A1 00 A1 
3410a     00 A1 00 A1 
3410e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
34112     00 A1 00 A1 
34116     00 A1 00 A1 
3411a     00 A1 00 A1 
3411e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
34122     00 A1 00 A1 
34126     00 A1 00 A1 
3412a     00 6E 00 6E 
3412e     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
34132     00 6E 00 6E 
34136     00 6E 00 6E 
3413a     00 6E 00 6E 
3413e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
34142     00 6E 00 6E 
34146     00 6E 00 6E 
3414a     00 6E 00 6E 
3414e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
34152     00 6E 00 6E 
34156     00 6E 00 6E 
3415a     00 6E 00 6E 
3415e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
34162     00 6E 00 6D 
34166     00 6D 00 6D 
3416a     00 6D 00 6D 
3416e     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34172     00 6D 00 6D 
34176     00 6D 00 6D 
3417a     00 6D 00 6D 
3417e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34182     00 6D 00 6D 
34186     00 6D 00 6D 
3418a     00 6D 00 6D 
3418e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34192     00 6D 00 6D 
34196     00 6D 00 6D 
3419a     00 6D 00 6D 
3419e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
341a2     00 6D 00 6D 
341a6     00 6D 00 6D 
341aa     00 6D 00 6D 
341ae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
341b2     00 6D 00 6D 
341b6     00 6D 00 6D 
341ba     00 6D 00 6D 
341be     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
341c2     00 6D 00 6D 
341c6     00 6D 00 6D 
341ca     00 6D 00 6D 
341ce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
341d2     00 6D 00 6D 
341d6     00 6D 00 6D 
341da     00 6D 00 6D 
341de     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
341e2     00 6D 00 6D 
341e6     00 6D 00 6D 
341ea     00 6D 00 6D 
341ee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
341f2     00 6D 00 6D 
341f6     00 6D 00 6D 
341fa     00 6D 00 6D 
341fe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34202     00 6D 00 6D 
34206     00 6D 00 6D 
3420a     00 6D 00 6D 
3420e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34212     00 6D 00 6D 
34216     00 6C 00 6C 
3421a     00 6C 00 6C 
3421e     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34222     00 6C 00 6C 
34226     00 6C 00 6C 
3422a     00 6C 00 6C 
3422e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34232     00 6C 00 6C 
34236     00 6C 00 6C 
3423a     00 9D 00 9F 
3423e     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
34242     00 9F 00 9F 
34246     00 9F 00 9F 
3424a     00 A0 00 A0 
3424e     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34252     00 A0 00 A0 
34256     00 A0 00 A0 
3425a     00 A0 00 A0 
3425e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34262     00 A0 00 A0 
34266     00 A0 00 A0 
3426a     00 A0 00 A0 
3426e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34272     00 A0 00 A0 
34276     00 A0 00 A0 
3427a     00 A0 00 A0 
3427e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34282     00 A0 00 A0 
34286     00 A0 00 A0 
3428a     00 A0 00 A0 
3428e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34292     00 A0 00 A0 
34296     00 A0 00 A0 
3429a     00 A0 00 A0 
3429e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
342a2     00 A0 00 A0 
342a6     00 A0 00 A0 
342aa     00 A0 00 A0 
342ae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
342b2     00 A0 00 A0 
342b6     00 A0 00 A0 
342ba     00 A0 00 A0 
342be     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
342c2                 | 
342c2     00 00       |              	org
342c4 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
342c8 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
342cc 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
342d0 003             | 
342d0 003 00 30 04 F6 |                 mov     psramaddr,#0
342d4 004             | 
342d4 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
342d8 005 20 00 00 FF 
342dc 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
342e0 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
342e4 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
342e8 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
342ec 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
342f0 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
342f4 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
342f8 00d             | 
342f8 00d 20 00 00 FF 
342fc 00e 00 30 04 F1 |                 add 	psramaddr,##16384
34300 00f E0 03 00 FF 
34304 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
34308 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
3430c 012             | 
3430c 012             |                 
3430c 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
34310 013             |     
34310 013 01 2C 60 FD |                 cogid 	t11				' get id
34314 014 00 00 EC FC |                 coginit #0,#0				' start the new program
34318 015 03 2C 60 FD |                 cogstop t11				' stop the loader
3431c 016             | 
3431c 016 00 00 00 00 | t11 		long 	0
34320 017 00 FF 07 00 | mailbox 	long 	$7FF00
34324 018 00 00 00 00 | psramaddr 	long 	0
34328 019 00 00 00 00 | pslockval	long 	0
3432c 01a 00 00 00 00 | cmd             long    0
34330 01b 00 00 00 00 | buf1            long    0
34334 01c 00 40 00 00 | buf2            long    16384
34338 01d 3C 43 03 00 | 	long	@@@_dat_ + 12624
3433c 01e 50 32 20 52 
34340 01f 65 74 72 6F 
34344 020 6D 61 63 68 
34348 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
3434c 022 42 41 53 49 
34350 023 43 20 76 65 
34354 024 72 73 69 6F 
34358 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
3435c 026 33 30 00 00 | 	byte	$33, $30, $00, $00
34360 027             | 	alignl
34360 027             | _hg010b_spin2_dat_
34360 027             | 
34360 027 00 00 00 00 
34364 028 00 00 00 00 
34368 029 00 00 00 00 
3436c 02a 00 00 00 00 
34370 02b 00 00 00    | vga_font       file "vgafont.def"
34373 02b 7E 81 A5 81 
34377 02c 81 BD 99 81 
3437b 02d 81 7E 00 00 
3437f 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
34383 02f 7E FF DB FF 
34387 030 FF C3 E7 FF 
3438b 031 FF 7E 00 00 
3438f 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
34393 033 00 36 7F 7F 
34397 034 7F 7F 3E 1C 
3439b 035 08 00 00 00 
3439f 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
343a3 037 00 08 1C 3E 
343a7 038 7F 3E 1C 08 
343ab 039 00 00 00 00 
343af 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
343b3 03b 18 3C 3C E7 
343b7 03c E7 E7 18 18 
343bb 03d 3C 00 00 00 
343bf 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
343c3 03f 18 3C 7E FF 
343c7 040 FF 7E 18 18 
343cb 041 3C 00 00 00 
343cf 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
343d3 043 00 00 00 18 
343d7 044 3C 3C 18 00 
343db 045 00 00 00 00 
343df 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
343e3 047 FF FF FF E7 
343e7 048 C3 C3 E7 FF 
343eb 049 FF FF FF FF 
343ef 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
343f3 04b 00 00 3C 66 
343f7 04c 42 42 66 3C 
343fb 04d 00 00 00 00 
343ff 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
34403 04f FF FF C3 99 
34407 050 BD BD 99 C3 
3440b 051 FF FF FF FF 
3440f 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
34413 053 78 70 58 4C 
34417 054 1E 33 33 33 
3441b 055 33 1E 00 00 
3441f 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
34423 057 3C 66 66 66 
34427 058 66 3C 18 7E 
3442b 059 18 18 00 00 
3442f 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
34433 05b FC CC FC 0C 
34437 05c 0C 0C 0C 0E 
3443b 05d 0F 07 00 00 
3443f 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
34443 05f FE C6 FE C6 
34447 060 C6 C6 C6 E6 
3444b 061 E7 67 03 00 
3444f 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
34453 063 18 18 DB 3C 
34457 064 E7 3C DB 18 
3445b 065 18 00 00 00 
3445f 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
34463 067 03 07 0F 1F 
34467 068 7F 1F 0F 07 
3446b 069 03 01 00 00 
3446f 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
34473 06b 60 70 78 7C 
34477 06c 7F 7C 78 70 
3447b 06d 60 40 00 00 
3447f 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
34483 06f 18 3C 7E 18 
34487 070 18 18 7E 3C 
3448b 071 18 00 00 00 
3448f 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
34493 073 66 66 66 66 
34497 074 66 66 66    | 	byte	$66[7]
3449a 075 00 66 66 00 
3449e 076 00 00 00 00 
344a2 077 00 FE DB DB 
344a6 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
344aa 079 D8 D8 D8 00 
344ae 07a 00 00 00 3E 
344b2 07b 63 06 1C 36 
344b6 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
344ba 07d 30 63 3E 00 
344be 07e 00 00 00 00 
344c2 07f 00 00 00 00 
344c6 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
344ca 081 7F 7F 7F 00 
344ce 082 00 00 00 00 
344d2 083 00 18 3C 7E 
344d6 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
344da 085 3C 18 7E 00 
344de 086 00 00 00 00 
344e2 087 00 18 3C 7E 
344e6 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
344ea 089 18 18 18 00 
344ee 08a 00 00 00 00 
344f2 08b 00 18 18 18 
344f6 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
344fa 08d 7E 3C 18 00 
344fe 08e 00 00 00 00 
34502 08f 00 00 00 18 
34506 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
3450a 091 00 00 00 00 
3450e 092 00 00 00 00 
34512 093 00 00 00    | 	byte	$00[11]
34515 094 0C 06 7F 06 
34519 095 0C 00 00 00 
3451d 096 00 00 00 00 
34521 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34525 098 00 03 03 03 
34529 099 7F 00 00 00 
3452d 09a 00 00 00 00 
34531 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34535 09c 14 36 7F 36 
34539 09d 14 00 00 00 
3453d 09e 00 00 00 00 
34541 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
34545 0a0 1C 1C 3E 3E 
34549 0a1 7F 7F 00 00 
3454d 0a2 00 00 00 00 
34551 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
34555 0a4 7F 3E 3E 1C 
34559 0a5 1C 08 00 00 
3455d 0a6 00 00 00 00 
34561 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34565 0a8 00 00 00 00 
34569 0a9 00 00 00 00 
3456d 0aa 00 00 00 00 
34571 0ab 00 00       | 	byte	$00[14]
34573 0ab 18 3C 3C 3C 
34577 0ac 18 18 18 00 
3457b 0ad 18 18 00 00 
3457f 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
34583 0af 66 24 00 00 
34587 0b0 00 00 00 00 
3458b 0b1 00 00 00 00 
3458f 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34593 0b3 00 36 36 7F 
34597 0b4 36 36 36 7F 
3459b 0b5 36 36 00 00 
3459f 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
345a3 0b7 3E 63 43 03 
345a7 0b8 3E 60 60 61 
345ab 0b9 63 3E 18 18 
345af 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
345b3 0bb 00 00 43 63 
345b7 0bc 30 18 0C 06 
345bb 0bd 63 61 00 00 
345bf 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
345c3 0bf 1C 36 36 1C 
345c7 0c0 6E 3B 33 33 
345cb 0c1 33 6E 00 00 
345cf 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
345d3 0c3 0C 0C 0C 06 
345d7 0c4 00 00 00 00 
345db 0c5 00 00 00 00 
345df 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
345e3 0c7 30 18 0C 0C 
345e7 0c8 0C 0C 0C 0C 
345eb 0c9 18 30 00 00 
345ef 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
345f3 0cb 0C 18 30 30 
345f7 0cc 30 30 30 30 
345fb 0cd 18 0C 00 00 
345ff 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
34603 0cf 00 00 00 66 
34607 0d0 3C FF 3C 66 
3460b 0d1 00 00 00 00 
3460f 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
34613 0d3 00 00 00 18 
34617 0d4 18 7E 18 18 
3461b 0d5 00 00 00 00 
3461f 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
34623 0d7 00 00 00 00 
34627 0d8 00 00 00 00 | 	byte	$00[8]
3462b 0d9 18 18 18 0C 
3462f 0da 00 00 00 00 
34633 0db 00 00 00 00 
34637 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
3463b 0dd 00 00 00 00 
3463f 0de 00 00 00 00 
34643 0df 00 00 00 00 
34647 0e0 00 00 00 00 | 	byte	$00[16]
3464b 0e1 18 18 00 00 
3464f 0e2 00 00 00 00 
34653 0e3 00 00 40 60 
34657 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
3465b 0e5 03 01 00 00 
3465f 0e6 00 00 00 00 
34663 0e7 1C 36 63 63 
34667 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
3466b 0e9 36 1C 00 00 
3466f 0ea 00 00 00 00 
34673 0eb 18 1C 1E 18 
34677 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
3467b 0ed 18 7E 00 00 
3467f 0ee 00 00 00 00 
34683 0ef 3E 63 60 30 
34687 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
3468b 0f1 63 7F 00 00 
3468f 0f2 00 00 00 00 
34693 0f3 3E 63 60 60 
34697 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
3469b 0f5 63 3E 00 00 
3469f 0f6 00 00 00 00 
346a3 0f7 30 38 3C 36 
346a7 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
346ab 0f9 30 78 00 00 
346af 0fa 00 00 00 00 
346b3 0fb 7F 03 03 03 
346b7 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
346bb 0fd 63 3E 00 00 
346bf 0fe 00 00 00 00 
346c3 0ff 1C 06 03 03 
346c7 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
346cb 101 63 3E 00 00 
346cf 102 00 00 00 00 
346d3 103 7F 63 60 60 
346d7 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
346db 105 0C 0C 00 00 
346df 106 00 00 00 00 
346e3 107 3E 63 63 63 
346e7 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
346eb 109 63 3E 00 00 
346ef 10a 00 00 00 00 
346f3 10b 3E 63 63 63 
346f7 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
346fb 10d 30 1E 00 00 
346ff 10e 00 00 00 00 
34703 10f 00 00 00 18 
34707 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3470b 111 18 18 00 00 
3470f 112 00 00 00 00 
34713 113 00 00 00 18 
34717 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3471b 115 18 18 0C 00 
3471f 116 00 00 00 00 
34723 117 00 60 30 18 
34727 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
3472b 119 30 60 00 00 
3472f 11a 00 00 00 00 
34733 11b 00 00 00 7E 
34737 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
3473b 11d 00 00 00 00 
3473f 11e 00 00 00 00 
34743 11f 00          | 	byte	$00[9]
34744 120 06 0C 18 30 
34748 121 60 30 18 0C 
3474c 122 06 00 00 00 
34750 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
34754 124 63 63 30 18 
34758 125 18 18 00 18 
3475c 126 18 00 00 00 
34760 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
34764 128 3E 63 63 7B 
34768 129 7B 7B 3B 03 
3476c 12a 3E 00 00 00 
34770 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
34774 12c 1C 36 63 63 
34778 12d 7F 63 63 63 
3477c 12e 63 00 00 00 
34780 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
34784 130 66 66 66 3E 
34788 131 66 66 66 66 
3478c 132 3F 00 00 00 
34790 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
34794 134 66 43 03 03 
34798 135 03 03 43 66 
3479c 136 3C 00 00 00 
347a0 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
347a4 138 36 66 66 66 
347a8 139 66 66 66 36 
347ac 13a 1F 00 00 00 
347b0 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
347b4 13c 66 46 16 1E 
347b8 13d 16 06 46 66 
347bc 13e 7F 00 00 00 
347c0 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
347c4 140 66 46 16 1E 
347c8 141 16 06 06 06 
347cc 142 0F 00 00 00 
347d0 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
347d4 144 66 43 03 03 
347d8 145 7B 63 63 66 
347dc 146 5C 00 00 00 
347e0 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
347e4 148 63 63 63 7F 
347e8 149 63 63 63 63 
347ec 14a 63 00 00 00 
347f0 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
347f4 14c 18 18 18 18 
347f8 14d 18 18 18 18 | 	byte	$18[8]
347fc 14e 3C 00 00 00 
34800 14f 00 00 00 78 
34804 150 30 30 30 30 
34808 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
3480c 152 1E 00 00 00 
34810 153 00 00 00 67 
34814 154 66 66 36 1E 
34818 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
3481c 156 67 00 00 00 
34820 157 00 00 00 0F 
34824 158 06 06 06 06 
34828 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3482c 15a 7F 00 00 00 
34830 15b 00 00 00 63 
34834 15c 77 7F 7F 6B 
34838 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
3483c 15e 63 00 00 00 
34840 15f 00 00 00 63 
34844 160 67 6F 7F 7B 
34848 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
3484c 162 63 00 00 00 
34850 163 00 00 00 3E 
34854 164 63 63 63 63 
34858 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3485c 166 3E 00 00 00 
34860 167 00 00 00 3F 
34864 168 66 66 66 3E 
34868 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
3486c 16a 0F 00 00 00 
34870 16b 00 00 00 3E 
34874 16c 63 63 63 63 
34878 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
3487c 16e 3E 30 70 00 
34880 16f 00 00 00 3F 
34884 170 66 66 66 3E 
34888 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
3488c 172 67 00 00 00 
34890 173 00 00 00 3E 
34894 174 63 63 06 1C 
34898 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3489c 176 3E 00 00 00 
348a0 177 00 00 00 7E 
348a4 178 7E 5A 18 18 
348a8 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
348ac 17a 3C 00 00 00 
348b0 17b 00 00 00 63 
348b4 17c 63 63 63 63 
348b8 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
348bc 17e 3E 00 00 00 
348c0 17f 00 00 00 63 
348c4 180 63 63 63 63 
348c8 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
348cc 182 08 00 00 00 
348d0 183 00 00 00 63 
348d4 184 63 63 63 6B 
348d8 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
348dc 186 36 00 00 00 
348e0 187 00 00 00 63 
348e4 188 63 36 3E 1C 
348e8 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
348ec 18a 63 00 00 00 
348f0 18b 00 00 00 66 
348f4 18c 66 66 66 3C 
348f8 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
348fc 18e 3C 00 00 00 
34900 18f 00 00 00 7F 
34904 190 63 61 30 18 
34908 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3490c 192 7F 00 00 00 
34910 193 00 00 00 3C 
34914 194 0C 0C 0C 0C 
34918 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
3491c 196 3C 00 00 00 
34920 197 00 00 00 00 
34924 198 01 03 07 0E 
34928 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
3492c 19a 40 00 00 00 
34930 19b 00 00 00 3C 
34934 19c 30 30 30 30 
34938 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
3493c 19e 3C 00 00 00 
34940 19f 1C 36 00 00 
34944 1a0 00 00 00 00 
34948 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3494c 1a2 00 00 00 00 
34950 1a3 00 00 00 00 
34954 1a4 00 00 00 00 
34958 1a5 00 00 00 00 
3495c 1a6 00          | 	byte	$00[17]
3495d 1a6 FF 00 00 0C 
34961 1a7 18 00 00 00 
34965 1a8 00 00 00 00 
34969 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3496d 1aa 00 00 00 00 
34971 1ab 00 00 00 00 
34975 1ac 00          | 	byte	$00[9]
34976 1ac 1E 30 3E 33 
3497a 1ad 33 33 6E 00 
3497e 1ae 00 00 00 00 
34982 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
34986 1b0 1E 36 66 66 
3498a 1b1 66 66 3E 00 
3498e 1b2 00 00 00 00 
34992 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
34996 1b4 3E 63 03 03 
3499a 1b5 03 63 3E 00 
3499e 1b6 00 00 00 00 
349a2 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
349a6 1b8 3C 36 33 33 
349aa 1b9 33 33 6E 00 
349ae 1ba 00 00 00 00 
349b2 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
349b6 1bc 3E 63 7F 03 
349ba 1bd 03 63 3E 00 
349be 1be 00 00 00 00 
349c2 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
349c6 1c0 0C 1E 0C 0C 
349ca 1c1 0C 0C 1E 00 
349ce 1c2 00 00 00 00 
349d2 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
349d6 1c4 6E 33 33 33 
349da 1c5 33 33 3E 30 
349de 1c6 33 1E 00 00 
349e2 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
349e6 1c8 36 6E 66 66 
349ea 1c9 66 66 67 00 
349ee 1ca 00 00 00 00 
349f2 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
349f6 1cc 1C 18 18 18 
349fa 1cd 18 18 3C 00 
349fe 1ce 00 00 00 00 
34a02 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
34a06 1d0 70 60 60 60 
34a0a 1d1 60 60 60 66 
34a0e 1d2 66 3C 00 00 
34a12 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
34a16 1d4 66 36 1E 1E 
34a1a 1d5 36 66 67 00 
34a1e 1d6 00 00 00 00 
34a22 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
34a26 1d8 18 18 18 18 
34a2a 1d9 18 18       | 	byte	$18[6]
34a2c 1da 3C 00 00 00 
34a30 1db 00 00 00 00 
34a34 1dc 00 00 37 7F 
34a38 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
34a3c 1de 63 00 00 00 
34a40 1df 00 00 00 00 
34a44 1e0 00 00 3B 66 
34a48 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
34a4c 1e2 66 00 00 00 
34a50 1e3 00 00 00 00 
34a54 1e4 00 00 3E 63 
34a58 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
34a5c 1e6 3E 00 00 00 
34a60 1e7 00 00 00 00 
34a64 1e8 00 00 3B 66 
34a68 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
34a6c 1ea 3E 06 06 0F 
34a70 1eb 00 00 00 00 
34a74 1ec 00 00 6E 33 
34a78 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
34a7c 1ee 3E 30 30 78 
34a80 1ef 00 00 00 00 
34a84 1f0 00 00 3B 6E 
34a88 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
34a8c 1f2 0F 00 00 00 
34a90 1f3 00 00 00 00 
34a94 1f4 00 00 3E 63 
34a98 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
34a9c 1f6 3E 00 00 00 
34aa0 1f7 00 00 00 08 
34aa4 1f8 0C 0C 3F 0C 
34aa8 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
34aac 1fa 38 00 00 00 
34ab0 1fb 00 00 00 00 
34ab4 1fc 00 00 33 33 
34ab8 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
34abc 1fe 6E 00 00 00 
34ac0 1ff 00 00 00 00 
34ac4 200 00 00 63 63 
34ac8 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
34acc 202 1C 00 00 00 
34ad0 203 00 00 00 00 
34ad4 204 00 00 63 63 
34ad8 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
34adc 206 36 00 00 00 
34ae0 207 00 00 00 00 
34ae4 208 00 00 63 36 
34ae8 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
34aec 20a 63 00 00 00 
34af0 20b 00 00 00 00 
34af4 20c 00 00 63 63 
34af8 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
34afc 20e 7E 60 30 1F 
34b00 20f 00 00 00 00 
34b04 210 00 00 7F 33 
34b08 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
34b0c 212 7F 00 00 00 
34b10 213 00 00 00 70 
34b14 214 18 18 18 0E 
34b18 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
34b1c 216 70 00 00 00 
34b20 217 00 00 00 18 
34b24 218 18 18 18 18 
34b28 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
34b2c 21a 18 00 00 00 
34b30 21b 00 00 00 0E 
34b34 21c 18 18 18 70 
34b38 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
34b3c 21e 0E 00 00 00 
34b40 21f 6E 3B 00 00 
34b44 220 00 00 00 00 
34b48 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34b4c 222 00 00 00 00 
34b50 223 00 00 00 00 
34b54 224 00 00       | 	byte	$00[10]
34b56 224 08 1C 36 63 
34b5a 225 63 63 7F 00 
34b5e 226 00 00 00 00 
34b62 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
34b66 228 03 03 03 03 
34b6a 229 43 66 3C 18 
34b6e 22a 30 1E 00 00 
34b72 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
34b76 22c 33 33 33 33 
34b7a 22d 33 33       | 	byte	$33[6]
34b7c 22e 6E 00 00 00 
34b80 22f 00 00 60 30 
34b84 230 18 00 3E 63 
34b88 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
34b8c 232 3E 00 00 00 
34b90 233 00 00 08 1C 
34b94 234 36 00 1E 30 
34b98 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
34b9c 236 6E 00 00 00 
34ba0 237 00 00 00 00 
34ba4 238 33 00 1E 30 
34ba8 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
34bac 23a 6E 00 00 00 
34bb0 23b 00 00 1C 36 
34bb4 23c 1C 00 33 33 
34bb8 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
34bbc 23e 6E 00 00 00 
34bc0 23f 00 00 60 30 
34bc4 240 18 00 3E 63 
34bc8 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
34bcc 242 3E 00 00 00 
34bd0 243 00 00 00 00 
34bd4 244 00 00 3E 63 
34bd8 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
34bdc 246 3E 18 30 1E 
34be0 247 00 00 00 1C 
34be4 248 58 78 38 18 
34be8 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
34bec 24a 3C 00 00 00 
34bf0 24b 00 00 00 00 
34bf4 24c 63 00 3E 63 
34bf8 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
34bfc 24e 3E 00 00 00 
34c00 24f 66 33 00 3E 
34c04 250 63 63 63 63 
34c08 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
34c0c 252 3E 00 00 00 
34c10 253 00 00 CC 66 
34c14 254 33 00 3E 63 
34c18 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
34c1c 256 3E 00 00 00 
34c20 257 00 00 18 3C 
34c24 258 66 00 1C 18 
34c28 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
34c2c 25a 3C 00 00 00 
34c30 25b 30 18 00 7F 
34c34 25c 63 61 30 18 
34c38 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
34c3c 25e 7F 00 00 00 
34c40 25f 00 63 00 08 
34c44 260 1C 36 63 63 
34c48 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
34c4c 262 63 00 00 00 
34c50 263 30 18 00 3C 
34c54 264 66 43 03 03 
34c58 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
34c5c 266 3C 00 00 00 
34c60 267 30 18 00 7F 
34c64 268 66 46 16 1E 
34c68 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
34c6c 26a 7F 00 00 00 
34c70 26b 0C 06 00 0F 
34c74 26c 06 06 06 06 
34c78 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
34c7c 26e 7F 00 00 00 
34c80 26f 30 18 00 1C 
34c84 270 18 18 18 18 
34c88 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
34c8c 272 3C 00 00 00 
34c90 273 00 00 08 1C 
34c94 274 36 00 3E 63 
34c98 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
34c9c 276 3E 00 00 00 
34ca0 277 00 00 00 00 
34ca4 278 63 00 3E 63 
34ca8 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
34cac 27a 3E 00 00 00 
34cb0 27b 00 00 00 6F 
34cb4 27c 46 26 06 06 
34cb8 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
34cbc 27e 7F 00 00 00 
34cc0 27f 00 00 00 6E 
34cc4 280 4C 2C 0C 0C 
34cc8 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
34ccc 282 1E 00 00 00 
34cd0 283 30 18 00 3E 
34cd4 284 63 63 06 1C 
34cd8 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
34cdc 286 3E 00 00 00 
34ce0 287 00 00 60 30 
34ce4 288 18 00 3E 63 
34ce8 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
34cec 28a 3E 00 00 00 
34cf0 28b 00 63 00 3E 
34cf4 28c 63 63 63 63 
34cf8 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
34cfc 28e 3E 00 00 00 
34d00 28f 00 63 00 63 
34d04 290 63 63 63 63 
34d08 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
34d0c 292 3E 00 00 00 
34d10 293 6C 38 00 7E 
34d14 294 7E 5A 18 18 
34d18 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
34d1c 296 3C 00 00 00 
34d20 297 00 00 60 48 
34d24 298 2C 0C 3F 0C 
34d28 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
34d2c 29a 38 00 00 00 
34d30 29b 00 00 00 0F 
34d34 29c 26 36 1E 0E 
34d38 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
34d3c 29e 7F 00 00 00 
34d40 29f 00 00 00 00 
34d44 2a0 00 63 36 1C 
34d48 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
34d4c 2a2 00 00 00 00 
34d50 2a3 00 00       | 	byte	$00[6]
34d52 2a3 36 1C 08 00 
34d56 2a4 3E 63 03 03 
34d5a 2a5 03 63 3E 00 
34d5e 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
34d62 2a7 30 18 0C 00 
34d66 2a8 1E 30 3E 33 
34d6a 2a9 33 33 6E 00 
34d6e 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
34d72 2ab 60 30 18 00 
34d76 2ac 1C 18 18 18 
34d7a 2ad 18 18 3C 00 
34d7e 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
34d82 2af 60 30 18 00 
34d86 2b0 3E 63 63 63 
34d8a 2b1 63 63 3E 00 
34d8e 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
34d92 2b3 30 18 0C 00 
34d96 2b4 33 33 33 33 
34d9a 2b5 33 33 6E 00 
34d9e 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
34da2 2b7 00 08 1C 36 
34da6 2b8 63 63 7F 63 
34daa 2b9 63 63 63 18 
34dae 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
34db2 2bb 00 00 00 00 
34db6 2bc 1E 30 3E 33 
34dba 2bd 33 33 6E 18 
34dbe 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
34dc2 2bf 00 7F 63 61 
34dc6 2c0 30 18 0C 06 
34dca 2c1 43 63 7F 00 
34dce 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
34dd2 2c3 36 1C 08 00 
34dd6 2c4 7F 33 18 0C 
34dda 2c5 06 63 7F 00 
34dde 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
34de2 2c7 00 7F 66 46 
34de6 2c8 16 1E 16 06 
34dea 2c9 46 66 7F 18 
34dee 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
34df2 2cb 00 00 00 00 
34df6 2cc 3E 63 7F 03 
34dfa 2cd 03 63 3E 18 
34dfe 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
34e02 2cf 00 3C 66 03 
34e06 2d0 1F 03 0F 03 
34e0a 2d1 03 66 3C 00 
34e0e 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
34e12 2d3 60 30 18 00 
34e16 2d4 7F 33 18 0C 
34e1a 2d5 06 63 7F 00 
34e1e 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
34e22 2d7 00 3C 66 43 
34e26 2d8 03 03 03 03 
34e2a 2d9 43 66 3C 00 
34e2e 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
34e32 2db 00 00 00 00 
34e36 2dc 3E 63 06 1C 
34e3a 2dd 30 63 3E 18 
34e3e 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
34e42 2df 00 00 00 00 
34e46 2e0 00 00       | 	byte	$00[6]
34e48 2e1 6C 36 1B 36 
34e4c 2e2 6C 00 00 00 
34e50 2e3 00 00 00 00 
34e54 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34e58 2e5 1B 36 6C 36 
34e5c 2e6 1B 00 00 00 
34e60 2e7 88 22 88 22 
34e64 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
34e68 2e9 88 22 88 22 
34e6c 2ea 88 22 88 22 
34e70 2eb AA 55 AA 55 
34e74 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
34e78 2ed AA 55 AA 55 
34e7c 2ee AA 55 AA 55 
34e80 2ef BB EE BB EE 
34e84 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
34e88 2f1 BB EE BB EE 
34e8c 2f2 BB EE BB EE 
34e90 2f3 18 18 18 18 
34e94 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
34e98 2f5 18 18 18 18 
34e9c 2f6 18 18 18 18 
34ea0 2f7 18 18 18 18 
34ea4 2f8 18 18 18    | 	byte	$18[15]
34ea7 2f8 1F 18 18 18 
34eab 2f9 18 18 18 18 
34eaf 2fa 18 30 18 00 
34eb3 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
34eb7 2fc 63 7F 63 63 
34ebb 2fd 63 63 00 00 
34ebf 2fe 00 1C 36 00 
34ec3 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
34ec7 300 63 7F 63 63 
34ecb 301 63 63 00 00 
34ecf 302 00 36 1C 00 
34ed3 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
34ed7 304 1E 16 06 46 
34edb 305 66 7F 00 00 
34edf 306 00 00 00 00 
34ee3 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
34ee7 308 1C 30 60 63 
34eeb 309 63 3E 18 30 
34eef 30a 1E 6C 6C 6C 
34ef3 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
34ef7 30c 6F 6C 6C 6C 
34efb 30d 6C 6C 6C 6C 
34eff 30e 6C 6C 6C 6C 
34f03 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34f07 310 6C 6C 6C 6C 
34f0b 311 6C 6C 6C 6C 
34f0f 312 6C          | 	byte	$6c[9]
34f10 313 00 00 00 00 
34f14 314 00          | 	byte	$00[5]
34f15 314 7F 60 6F 6C 
34f19 315 6C 6C 6C 6C 
34f1d 316 6C 6C 6C 6C 
34f21 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34f25 318 6F 60 7F 00 
34f29 319 00 00 00 00 
34f2d 31a 00 00 00 18 
34f31 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
34f35 31c 61 30 18 0C 
34f39 31d 06 43 63 7F 
34f3d 31e 00 00 00 00 
34f41 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
34f45 320 00 7F 33 18 
34f49 321 0C 06 63 7F 
34f4d 322 00 00 00 00 
34f51 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
34f55 324 00 00 1F 18 
34f59 325 18 18 18 18 
34f5d 326 18 18 18 18 
34f61 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
34f65 328 18 18 F8 00 
34f69 329 00 00 00 00 
34f6d 32a 00 00 00 18 
34f71 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
34f75 32c 18 18 FF 00 
34f79 32d 00 00 00 00 
34f7d 32e 00 00 00 00 
34f81 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34f85 330 00 00 FF 18 
34f89 331 18 18 18 18 
34f8d 332 18 18 18 18 
34f91 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
34f95 334 18 18 F8 18 
34f99 335 18 18 18 18 
34f9d 336 18 18 18 00 
34fa1 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
34fa5 338 00 00 FF 00 
34fa9 339 00 00 00 00 
34fad 33a 00 00 00 18 
34fb1 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
34fb5 33c 18 18 FF 18 
34fb9 33d 18 18 18 18 
34fbd 33e 18 18 18 63 
34fc1 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
34fc5 340 36 63 63 7F 
34fc9 341 63 63 63 63 
34fcd 342 00 00 00 00 
34fd1 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
34fd5 344 00 1E 30 3E 
34fd9 345 33 33 33 6E 
34fdd 346 00 00 00 6C 
34fe1 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
34fe5 348 EC 0C FC 00 
34fe9 349 00 00 00 00 
34fed 34a 00 00 00 00 
34ff1 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34ff5 34c FC 0C EC 6C 
34ff9 34d 6C 6C 6C 6C 
34ffd 34e 6C 6C 6C 6C 
35001 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
35005 350 EF 00 FF 00 
35009 351 00 00 00 00 
3500d 352 00 00 00 00 
35011 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35015 354 FF 00 EF 6C 
35019 355 6C 6C 6C 6C 
3501d 356 6C 6C 6C 6C 
35021 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
35025 358 EC 0C EC 6C 
35029 359 6C 6C 6C 6C 
3502d 35a 6C 6C 6C 00 
35031 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
35035 35c FF 00 FF 00 
35039 35d 00 00 00 00 
3503d 35e 00 00 00 6C 
35041 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
35045 360 EF 00 EF 6C 
35049 361 6C 6C 6C 6C 
3504d 362 6C 6C 6C 00 
35051 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
35055 364 63 3E 63 63 
35059 365 63 63 3E 63 
3505d 366 00 00 00 00 
35061 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
35065 368 30 3C 36 33 
35069 369 33 33 33 6E 
3506d 36a 00 00 00 00 
35071 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
35075 36c 66 66 6F 66 
35079 36d 66 66 36 1F 
3507d 36e 00 00 00 36 
35081 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
35085 370 66 66 66 66 
35089 371 66 66       | 	byte	$66[6]
3508b 371 36 1F 00 00 
3508f 372 00 00 63 00 
35093 373 7F 66 46 16 
35097 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
3509b 375 66 7F 00 00 
3509f 376 00 6C 38 00 
350a3 377 38 30 30 3C 
350a7 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
350ab 379 33 6E 00 00 
350af 37a 00 36 1C 00 
350b3 37b 63 67 6F 7F 
350b7 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
350bb 37d 63 63 00 00 
350bf 37e 00 30 18 00 
350c3 37f 3C 18 18 18 
350c7 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
350cb 381 18 3C 00 00 
350cf 382 00 3C 66 00 
350d3 383 3C 18 18 18 
350d7 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
350db 385 18 3C 00 00 
350df 386 00 00 00 36 
350e3 387 1C 08 00 3E 
350e7 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
350eb 389 63 3E 00 00 
350ef 38a 00 18 18 18 
350f3 38b 18 18 18 18 
350f7 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
350fb 38d 00 00 00 00 
350ff 38e 00 00 00 00 
35103 38f 00 00 00 00 | 	byte	$00[12]
35107 390 F8 18 18 18 
3510b 391 18 18 18 18 
3510f 392 18 FF FF FF 
35113 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
35117 394 FF FF FF FF 
3511b 395 FF FF FF FF 
3511f 396 FF          | 	byte	$ff[9]
35120 397 00 00 00 00 
35124 398 00 00 00    | 	byte	$00[7]
35127 398 FF FF FF FF 
3512b 399 FF FF FF FF 
3512f 39a FF          | 	byte	$ff[9]
35130 39b 00 00 00 7E 
35134 39c 7E 5A 18 18 
35138 39d 18 18 18 18 
3513c 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
35140 39f 1C 36 1C 63 
35144 3a0 63 63 63 63 
35148 3a1 63 63 63 63 
3514c 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
35150 3a3 FF FF FF FF 
35154 3a4 FF FF FF    | 	byte	$ff[7]
35157 3a4 00 00 00 00 
3515b 3a5 00 00 00 00 
3515f 3a6 00          | 	byte	$00[9]
35160 3a7 30 18 00 3E 
35164 3a8 63 63 63 63 
35168 3a9 63 63 63 63 
3516c 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
35170 3ab 00 00 00 1E 
35174 3ac 33 33 33 1B 
35178 3ad 33 63 63 63 
3517c 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
35180 3af 1C 36 00 3E 
35184 3b0 63 63 63 63 
35188 3b1 63 63 63 63 
3518c 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
35190 3b3 30 18 00 63 
35194 3b4 67 6F 7F 7B 
35198 3b5 73 63 63 63 
3519c 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
351a0 3b7 00 00 60 30 
351a4 3b8 18 00 3B 66 
351a8 3b9 66 66 66 66 
351ac 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
351b0 3bb 00 00 36 1C 
351b4 3bc 08 00 3B 66 
351b8 3bd 66 66 66 66 
351bc 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
351c0 3bf 36 1C 00 3E 
351c4 3c0 63 63 06 1C 
351c8 3c1 30 60 63 63 
351cc 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
351d0 3c3 00 00 36 1C 
351d4 3c4 08 00 3E 63 
351d8 3c5 06 1C 30 63 
351dc 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
351e0 3c7 30 18 00 3F 
351e4 3c8 66 66 66 3E 
351e8 3c9 36 66 66 66 
351ec 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
351f0 3cb 30 18 00 63 
351f4 3cc 63 63 63 63 
351f8 3cd 63 63 63 63 
351fc 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
35200 3cf 00 00 60 30 
35204 3d0 18 00 3B 6E 
35208 3d1 66 06 06 06 
3520c 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
35210 3d3 66 33 00 63 
35214 3d4 63 63 63 63 
35218 3d5 63 63 63 63 
3521c 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
35220 3d7 00 00 60 30 
35224 3d8 18 00 63 63 
35228 3d9 63 63 63 63 
3522c 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
35230 3db 30 18 00 66 
35234 3dc 66 66 66 3C 
35238 3dd 18 18 18 18 
3523c 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
35240 3df 00 00 00 08 
35244 3e0 0C 0C 3F 0C 
35248 3e1 0C 0C 0C 6C 
3524c 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
35250 3e3 30 18 00 00 
35254 3e4 00 00 00 00 
35258 3e5 00 00 00 00 
3525c 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35260 3e7 00 00 00 00 
35264 3e8 00 00 00 00 | 	byte	$00[8]
35268 3e9 7F 00 00 00 
3526c 3ea 00 00 00 00 
35270 3eb 66 33 00 00 
35274 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
35278 3ed 00 00 00 00 
3527c 3ee 00 00 00 00 
35280 3ef 00 00 00 00 
35284 3f0 00 00 00 00 
35288 3f1 00 00 00 00 
3528c 3f2 00          | 	byte	$00[21]
3528d 3f2 0C 06 3C 36 
35291 3f3 1C 00 00 00 
35295 3f4 00 00 00 00 
35299 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3529d 3f6 00 00 00 63 
352a1 3f7 3E 00 00 00 
352a5 3f8 00 00 00 00 
352a9 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
352ad 3fa 00 00 00 00 
352b1 3fb 3E 63 06 1C 
352b5 3fc 36 63 63 36 
352b9 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
352bd 3fe 00 00 00 00 
352c1 3ff 00 00 00 00 | 	byte	$00[8]
352c5 400 18 00 7E 00 
352c9 401 18 00 00 00 
352cd 402 00 00 00 00 
352d1 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
352d5 404 00 00 00 00 
352d9 405 00 00 00 00 | 	byte	$00[8]
352dd 406 18 30 1E 00 
352e1 407 00 00 1C 36 
352e5 408 36 1C 00 00 
352e9 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
352ed 40a 00 00 00 00 
352f1 40b 63 00 00 00 
352f5 40c 00 00 00 00 
352f9 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
352fd 40e 00 00 00 18 
35301 40f 18 00 00 00 
35305 410 00 00 00 00 
35309 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3530d 412 00 00 00 00 
35311 413 00          | 	byte	$00[5]
35312 413 CC 66 33 00 
35316 414 33 33 33 33 
3531a 415 33 33 6E 00 
3531e 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
35322 417 00 3F 66 66 
35326 418 66 3E 36 66 
3532a 419 66 66 6F 00 
3532e 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
35332 41b 36 1C 08 00 
35336 41c 3B 6E 66 06 
3533a 41d 06 06 0F 00 
3533e 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
35342 41f 00 00 00 7E 
35346 420 7E 7E 7E 7E 
3534a 421 7E 7E 00 00 
3534e 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
35352 423 00 00 00 00 
35356 424 00 00 00 00 
3535a 425 00 00 00 00 
3535e 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35360 427             | 'vga_font       file "vgafont.def"
35360 427 00 00 00 00 
      ...             
35390 433 00 00 00 00 
35394 434 00 00 00    | st_font        file "st4font.def"
35397 434 FF FF 00 00 
3539b 435 00 00 00 00 
3539f 436 00 18 18 18 
353a3 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
353a7 438 18 18 18 18 
353ab 439 18 18 18 18 
353af 43a 18          | 	byte	$18[9]
353b0 43b 00 00 00 00 
353b4 43c 00 00 00    | 	byte	$00[7]
353b7 43c FF FF 18 18 
353bb 43d 18 18 18 18 
353bf 43e 18 18 18 18 
353c3 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
353c7 440 FF FF 00 00 
353cb 441 00 00 00 00 
353cf 442 00 18 18 18 
353d3 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
353d7 444 1F 1F 18 18 
353db 445 18 18 18 18 
353df 446 18 18 18 18 
353e3 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
353e7 448 F8 F8 18 18 
353eb 449 18 18 18 18 
353ef 44a 18 00 00 00 
353f3 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
353f7 44c 1F 1F 18 18 
353fb 44d 18 18 18 18 
353ff 44e 18 00 00 00 
35403 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
35407 450 F8 F8 18 18 
3540b 451 18 18 18 18 
3540f 452 18 18 18 18 
35413 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
35417 454 1F 1F 00 00 
3541b 455 00 00 00 00 
3541f 456 00 18 18 18 
35423 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
35427 458 F8 F8 00 00 
3542b 459 00 00 00 00 
3542f 45a 00 18 18 18 
35433 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
35437 45c FF FF 18 18 
3543b 45d 18 18 18 18 
3543f 45e 18 00 00 18 
35443 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
35447 460 66 7E 7E 66 
3544b 461 66 66 66 30 
3544f 462 18 00 00 7E 
35453 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
35457 464 3E 06 06 06 
3545b 465 06 7E 7E 18 
3545f 466 0C 30 18 3C 
35463 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
35467 468 06 06 06 66 
3546b 469 66 7E 3C 00 
3546f 46a 00 30 18 66 
35473 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
35477 46c 7E 7E 76 76 
3547b 46d 66 66 66 00 
3547f 46e 00 30 18 7C 
35483 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
35487 470 1C 38 70 60 
3548b 471 60 7E 3E 00 
3548f 472 00 30 18 7E 
35493 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
35497 474 18 0C 0C 06 
3549b 475 06 7E 7E 00 
3549f 476 00 18 18 00 
354a3 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
354a7 478 18 18 0C 0C 
354ab 479 06 7E 7E 00 
354af 47a 00 30 18 3C 
354b3 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
354b7 47c 66 66 66 66 
354bb 47d 66          | 	byte	$66[5]
354bc 47e 7E 3C 00 00 
354c0 47f 00 00 06 06 
354c4 480 06 06 16 1E 
354c8 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
354cc 482 7E 7E 00 00 
354d0 483 00 00 00 00 
354d4 484 00 3C 7C 60 
354d8 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
354dc 486 7E 7C 30 18 
354e0 487 00 00 00 00 
354e4 488 00 3C 7E 66 
354e8 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
354ec 48a 7E 7C 18 0C 
354f0 48b 00 00 30 18 
354f4 48c 00 3C 3E 06 
354f8 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
354fc 48e 7E 7C 00 00 
35500 48f 00 00 30 18 
35504 490 00 3E 7E 66 
35508 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
3550c 492 66 66 00 00 
35510 493 00 00 30 18 
35514 494 00 7C 7E 06 
35518 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
3551c 496 7E 3E 00 00 
35520 497 00 00 30 18 
35524 498 00 7E 7E 30 
35528 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3552c 49a 7E 7E 00 00 
35530 49b 00 00 18 18 
35534 49c 00 7E 7E 30 
35538 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3553c 49e 7E 7E 00 00 
35540 49f 00 00 30 18 
35544 4a0 00 3C 7E 66 
35548 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
3554c 4a2 7E 3C 00 00 
35550 4a3 00 00 1C 1C 
35554 4a4 18 18 38 3C 
35558 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
3555c 4a6 3C 3C 00 00 
35560 4a7 00 00 00 00 
35564 4a8 00 00 00 00 
35568 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3556c 4aa 00 00 00 00 
35570 4ab 00 00       | 	byte	$00[6]
35572 4ab 18 18 18 18 
35576 4ac 18 18 18 18 | 	byte	$18[8]
3557a 4ad 00 00 18 18 
3557e 4ae 00 00 00 00 
35582 4af 66 66 66 66 
35586 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
3558a 4b1 00 00 00 00 
3558e 4b2 00 00 00 00 
35592 4b3 00          | 	byte	$00[9]
35593 4b3 66 66 FF FF 
35597 4b4 66 66 FF FF 
3559b 4b5 66 66 00 00 
3559f 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
355a3 4b7 7C 7E 06 06 
355a7 4b8 3E 7C 60 60 
355ab 4b9 7E 3E 18 18 
355af 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
355b3 4bb 66 30 30 18 
355b7 4bc 18 0C 0C 66 
355bb 4bd 66 00 00 00 
355bf 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
355c3 4bf 66 66 3C 1C 
355c7 4c0 1C FC FE 66 
355cb 4c1 66 FE FC 00 
355cf 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
355d3 4c3 18 18 18 18 
355d7 4c4 00 00 00 00 
355db 4c5 00 00 00 00 
355df 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
355e3 4c7 18 1C 0C 0C 
355e7 4c8 0C 0C 0C 0C 
355eb 4c9 1C 18 30 00 
355ef 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
355f3 4cb 18 38 30 30 
355f7 4cc 30 30 30 30 
355fb 4cd 38 18 0C 00 
355ff 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
35603 4cf 66 66 3C 3C 
35607 4d0 FF FF 3C 3C 
3560b 4d1 66 66 00 00 
3560f 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
35613 4d3 00 18 18 18 
35617 4d4 7E 7E 18 18 
3561b 4d5 18 00 00 00 
3561f 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
35623 4d7 00 00 00 00 
35627 4d8 00 00       | 	byte	$00[6]
35629 4d9 18 18 18 18 
3562d 4da 18          | 	byte	$18[5]
3562e 4da 0C 04 00 00 
35632 4db 00 00 00 00 
35636 4dc 7E 7E 00 00 
3563a 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
3563e 4de 00 00 00 00 
35642 4df 00 00 00 00 
35646 4e0 00 00 00 00 
3564a 4e1 00          | 	byte	$00[13]
3564b 4e1 18 18 18 00 
3564f 4e2 00 00 00 60 
35653 4e3 60 60 30 30 
35657 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3565b 4e5 06 06 06 00 
3565f 4e6 00 00 00 3C 
35663 4e7 7E 66 66 66 
35667 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3566b 4e9 66 7E 3C 00 
3566f 4ea 00 00 00 18 
35673 4eb 18 1C 1C 18 
35677 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
3567b 4ed 18 7E 7E 00 
3567f 4ee 00 00 00 3C 
35683 4ef 7E 66 66 30 
35687 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
3568b 4f1 0C 7E 7E 00 
3568f 4f2 00 00 00 7E 
35693 4f3 7E 30 30 18 
35697 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
3569b 4f5 66 7E 3C 00 
3569f 4f6 00 00 00 30 
356a3 4f7 30 38 38 3C 
356a7 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
356ab 4f9 7E 30 30 00 
356af 4fa 00 00 00 7E 
356b3 4fb 7E 06 06 3E 
356b7 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
356bb 4fd 66 7E 3C 00 
356bf 4fe 00 00 00 38 
356c3 4ff 3C 0E 06 06 
356c7 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
356cb 501 66 7E 3C 00 
356cf 502 00 00 00 7E 
356d3 503 7E 60 60 30 
356d7 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
356db 505 0C 0C 0C 00 
356df 506 00 00 00 3C 
356e3 507 7E 66 66 3C 
356e7 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
356eb 509 66 7E 3C 00 
356ef 50a 00 00 00 3C 
356f3 50b 7E 66 66 7E 
356f7 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
356fb 50d 70 3C 1C 00 
356ff 50e 00 00 00 00 
35703 50f 00 00 18 18 
35707 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
3570b 511 18 18 18 00 
3570f 512 00 00 00 00 
35713 513 00 00 18 18 
35717 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
3571b 515 18 18 18 0C 
3571f 516 04 00 00 00 
35723 517 70 38 1C 0E 
35727 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
3572b 519 70 00 00 00 
3572f 51a 00 00 00 00 
35733 51b 00 00 7E 7E 
35737 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
3573b 51d 00 00 00 00 
3573f 51e 00 00 00 00 | 	byte	$00[8]
35743 51f 0E 1C 38 70 
35747 520 E0 70 38 1C 
3574b 521 0E 00 00 00 
3574f 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
35753 523 7E 66 66 30 
35757 524 30 18 18 18 
3575b 525 00 18 18 00 
3575f 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
35763 527 7E 66 66 66 
35767 528 66 36 06 66 
3576b 529 66 7E 3C 00 
3576f 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
35773 52b 3C 7E 66 66 
35777 52c 66 7E 7E 66 
3577b 52d 66 66 66 00 
3577f 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
35783 52f 7E 66 66 7E 
35787 530 3E 66 66 66 
3578b 531 66 7E 3E 00 
3578f 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
35793 533 7E 66 66 06 
35797 534 06 06 06 66 
3579b 535 66 7E 3C 00 
3579f 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
357a3 537 7E 66 66 66 
357a7 538 66 66 66 66 
357ab 539 66 7E 3E 00 
357af 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
357b3 53b 7E 06 06 3E 
357b7 53c 3E 06 06 06 
357bb 53d 06 7E 7E 00 
357bf 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
357c3 53f 7E 06 06 3E 
357c7 540 3E 06 06 06 
357cb 541 06 06 06 00 
357cf 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
357d3 543 7E 06 06 76 
357d7 544 76 66 66 66 
357db 545 66 7E 3C 00 
357df 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
357e3 547 66 66 66 7E 
357e7 548 7E 66 66 66 
357eb 549 66 66 66 00 
357ef 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
357f3 54b 7E 18 18 18 
357f7 54c 18 18 18 18 
357fb 54d 18 7E 7E 00 
357ff 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
35803 54f 60 60 60 60 
35807 550 60 60 60    | 	byte	$60[7]
3580a 551 66 66 7E 3C 
3580e 552 00 00 00 00 
35812 553 66 66 36 36 
35816 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
3581a 555 66 66 C6 C6 
3581e 556 00 00 00 00 
35822 557 06 06 06 06 
35826 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
3582a 559 06 06 7E 7E 
3582e 55a 00 00 00 00 
35832 55b C6 C6 EE EE 
35836 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
3583a 55d C6 C6 C6 C6 
3583e 55e 00 00 00 00 
35842 55f 66 66 66 6E 
35846 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3584a 561 76 66 66 66 
3584e 562 00 00 00 00 
35852 563 3C 7E 66 66 
35856 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3585a 565 66 66 7E 3C 
3585e 566 00 00 00 00 
35862 567 3E 7E 66 66 
35866 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3586a 569 06 06 06 06 
3586e 56a 00 00 00 00 
35872 56b 3C 7E 66 66 
35876 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3587a 56d 66 56 3E 6C 
3587e 56e 00 00 00 00 
35882 56f 3E 7E 66 66 
35886 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3588a 571 66 66 C6 C6 
3588e 572 00 00 00 00 
35892 573 7C 7E 06 06 
35896 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
3589a 575 60 60 7E 3E 
3589e 576 00 00 00 00 
358a2 577 7E 7E 18 18 
358a6 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
358aa 579 18 18 18 18 
358ae 57a 00 00 00 00 
358b2 57b 66 66 66 66 
358b6 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
358ba 57d 66 66 7E 3C 
358be 57e 00 00 00 00 
358c2 57f 66 66 66 66 
358c6 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
358ca 581 3C 3C 18 18 
358ce 582 00 00 00 00 
358d2 583 C6 C6 C6 C6 
358d6 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
358da 585 FE EE C6 82 
358de 586 00 00 00 00 
358e2 587 66 66 66 3C 
358e6 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
358ea 589 3C 66 66 66 
358ee 58a 00 00 00 00 
358f2 58b 66 66 66 66 
358f6 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
358fa 58d 18 18 18 18 
358fe 58e 00 00 00 00 
35902 58f 7E 7E 30 30 
35906 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
3590a 591 06 06 7E 7E 
3590e 592 00 00 00 00 
35912 593 3C 3C 0C 0C 
35916 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
3591a 595 0C 0C 3C 3C 
3591e 596 00 00 00 00 
35922 597 06 06 0C 0C 
35926 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
3592a 599 60 60 C0 C0 
3592e 59a 00 00 00 00 
35932 59b 3C 3C 30 30 
35936 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
3593a 59d 30 30 3C 3C 
3593e 59e 00 00 00 00 
35942 59f 18 18 3C 3C 
35946 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3594a 5a1 00 00 00 00 
3594e 5a2 00 00 00 00 
35952 5a3 00 00 00 00 
35956 5a4 00 00 00 00 
3595a 5a5 00 00       | 	byte	$00[18]
3595c 5a6 FE FE 00 00 
35960 5a7 00 00 0C 0C 
35964 5a8 18 18 00 00 
35968 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
3596c 5aa 00 00 00 00 
35970 5ab 00 00 00 00 
35974 5ac 00          | 	byte	$00[9]
35975 5ac 3C 7C 60 7C 
35979 5ad 7E 66 66 7E 
3597d 5ae 7C 00 00 00 
35981 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
35985 5b0 3E 7E 66 66 
35989 5b1 66 66 66 7E 
3598d 5b2 3E 00 00 00 
35991 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
35995 5b4 3C 3E 06 06 
35999 5b5 06 06 06 7E 
3599d 5b6 7C 00 00 00 
359a1 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
359a5 5b8 7C 7E 66 66 
359a9 5b9 66 66 66 7E 
359ad 5ba 7C 00 00 00 
359b1 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
359b5 5bc 3C 7E 66 66 
359b9 5bd 7E 06 06 7E 
359bd 5be 7C 00 00 00 
359c1 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
359c5 5c0 18 7E 7E 18 
359c9 5c1 18 18 18 18 
359cd 5c2 18 00 00 00 
359d1 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
359d5 5c4 7C 7E 66 66 
359d9 5c5 66 66 7E 7C 
359dd 5c6 60 7E 3E 00 
359e1 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
359e5 5c8 3E 7E 66 66 
359e9 5c9 66 66 66 66 
359ed 5ca 66 00 00 00 
359f1 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
359f5 5cc 1C 1C 18 18 
359f9 5cd 18 18 18 3C 
359fd 5ce 3C 00 00 00 
35a01 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
35a05 5d0 30 30 30 30 
35a09 5d1 30 30 30 30 
35a0d 5d2 30          | 	byte	$30[9]
35a0e 5d2 3E 1E 00 00 
35a12 5d3 06 06 06 36 
35a16 5d4 36 1E 1E 1E 
35a1a 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
35a1e 5d6 00 00 00 00 
35a22 5d7 1C 1C 18 18 
35a26 5d8 18 18 18 18 
35a2a 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
35a2e 5da 00 00 00 00 
35a32 5db 00 00 00    | 	byte	$00[7]
35a35 5dc 6C FE FE D6 
35a39 5dd D6 C6 C6 C6 
35a3d 5de C6 00 00 00 
35a41 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
35a45 5e0 3E 7E 66 66 
35a49 5e1 66 66 66 66 
35a4d 5e2 66 00 00 00 
35a51 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
35a55 5e4 3C 7E 66 66 
35a59 5e5 66 66 66 7E 
35a5d 5e6 3C 00 00 00 
35a61 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
35a65 5e8 3E 7E 66 66 
35a69 5e9 66 66 66 7E 
35a6d 5ea 3E 06 06 00 
35a71 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
35a75 5ec 7C 7E 66 66 
35a79 5ed 66 66 66 7E 
35a7d 5ee 7C 60 60 00 
35a81 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
35a85 5f0 3E 7E 66 06 
35a89 5f1 06 06 06 06 
35a8d 5f2 06 00 00 00 
35a91 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
35a95 5f4 7C 7E 06 0E 
35a99 5f5 3C 70 60 7E 
35a9d 5f6 3E 00 00 00 
35aa1 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
35aa5 5f8 7E 7E 18 18 
35aa9 5f9 18 18 18 78 
35aad 5fa 70 00 00 00 
35ab1 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
35ab5 5fc 66 66 66 66 
35ab9 5fd 66 66 66    | 	byte	$66[7]
35abc 5fe 7E 7C 00 00 
35ac0 5ff 00 00 00 00 
35ac4 600 00 66 66 66 
35ac8 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
35acc 602 18 18 00 00 
35ad0 603 00 00 00 00 
35ad4 604 00 C6 C6 D6 
35ad8 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
35adc 606 C6 82 00 00 
35ae0 607 00 00 00 00 
35ae4 608 00 66 66 3C 
35ae8 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
35aec 60a 66 66 00 00 
35af0 60b 00 00 00 00 
35af4 60c 00 66 66 66 
35af8 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
35afc 60e 7C 60 7E 3E 
35b00 60f 00 00 00 00 
35b04 610 00 7E 7E 30 
35b08 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
35b0c 612 7E 7E 00 00 
35b10 613 00 00 30 18 
35b14 614 18 18 18 0C 
35b18 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
35b1c 616 18 30 00 00 
35b20 617 00 00 18 18 
35b24 618 18 18 18 18 
35b28 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
35b2c 61a 18 18 00 00 
35b30 61b 00 00 0C 18 
35b34 61c 18 18 18 30 
35b38 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
35b3c 61e 18 0C 00 00 
35b40 61f 00 00 6C 7E 
35b44 620 36 00 00 00 
35b48 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
35b4c 622 00 00 00 00 
35b50 623 00 00 00 00 
35b54 624 00          | 	byte	$00[9]
35b55 624 18 18 18 18 
35b59 625 18 18 00 00 
35b5d 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
35b60 627             | 'amiga_font     file "amigafont.def"
35b60 627 00 6C FE FE 
35b64 628 7C 38 10 00 
35b68 629 18 18 18 F8 
35b6c 62a F8 18 18 18 | a8_font        file "atari8.fnt"
35b70 62b C0 C0 C0 C0 
35b74 62c C0 C0 C0 C0 | 	byte	$c0[8]
35b78 62d 18 18 18 1F 
35b7c 62e 1F 00 00 00 
35b80 62f 18 18 18 1F 
35b84 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
35b88 631 00 00 00 1F 
35b8c 632 1F 18 18 18 
35b90 633 C0 E0 70 38 
35b94 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
35b98 635 03 07 0E 1C 
35b9c 636 38 70 E0 C0 
35ba0 637 80 C0 E0 F0 
35ba4 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
35ba8 639 00 00 00 00 
35bac 63a F0 F0 F0 F0 
35bb0 63b 01 03 07 0F 
35bb4 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
35bb8 63d F0 F0 F0 F0 
35bbc 63e 00 00 00 00 
35bc0 63f 0F 0F 0F 0F 
35bc4 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
35bc8 641 FF FF 00 00 
35bcc 642 00 00 00 00 
35bd0 643 00 00 00 00 
35bd4 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
35bd8 645 00 00 00 00 
35bdc 646 0F 0F 0F 0F 
35be0 647 00 38 38 EE 
35be4 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
35be8 649 00 00 00 F8 
35bec 64a F8 18 18 18 
35bf0 64b 00 00 00 FF 
35bf4 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
35bf8 64d 18 18 18 FF 
35bfc 64e FF 18 18 18 
35c00 64f 00 00 3C 7E 
35c04 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
35c08 651 00 00 00 00 
35c0c 652 FF FF FF FF 
35c10 653 03 03 03 03 
35c14 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
35c18 655 00 00 00 FF 
35c1c 656 FF 18 18 18 
35c20 657 18 18 18 FF 
35c24 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
35c28 659 0F 0F 0F 0F 
35c2c 65a 0F 0F 0F 0F | 	byte	$0f[8]
35c30 65b 18 18 18 F8 
35c34 65c F8 00 00 00 
35c38 65d 1E 06 1E 06 
35c3c 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
35c40 65f 00 18 3C 7E 
35c44 660 18 18 18 00 
35c48 661 00 18 18 18 
35c4c 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
35c50 663 00 18 0C 7E 
35c54 664 0C 18 00 00 
35c58 665 00 18 30 7E 
35c5c 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
35c60 667 00 00 00 00 
35c64 668 00 00 00 00 
35c68 669 00          | 	byte	$00[9]
35c69 669 18 18 18 18 
35c6d 66a 00 18 00 00 
35c71 66b 66 66 66 00 
35c75 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
35c79 66d 66 FF 66 66 
35c7d 66e FF 66 00 18 
35c81 66f 7C 06 3C 60 
35c85 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
35c89 671 66 36 18 0C 
35c8d 672 66 62 00 38 
35c91 673 6C 38 1C F6 
35c95 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
35c99 675 18 18 18 00 
35c9d 676 00 00 00 00 
35ca1 677 70 38 18 18 
35ca5 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
35ca9 679 0E 1C 18 18 
35cad 67a 1C 0E 00 00 
35cb1 67b 66 3C FF 3C 
35cb5 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
35cb9 67d 18 18 7E 18 
35cbd 67e 18 00 00 00 
35cc1 67f 00 00 00 00 
35cc5 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
35cc9 681 00 00 7E 00 
35ccd 682 00 00 00 00 
35cd1 683 00 00 00 00 
35cd5 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
35cd9 685 60 30 18 0C 
35cdd 686 06 02 00 00 
35ce1 687 3C 66 76 6E 
35ce5 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
35ce9 689 18 1C 18 18 
35ced 68a 18 7E 00 00 
35cf1 68b 3C 66 30 18 
35cf5 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
35cf9 68d 7E 30 18 30 
35cfd 68e 66 3C 00 00 
35d01 68f 30 38 3C 36 
35d05 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
35d09 691 7E 06 3E 60 
35d0d 692 66 3C 00 00 
35d11 693 3C 06 3E 66 
35d15 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
35d19 695 7E 60 30 18 
35d1d 696 0C 0C 00 00 
35d21 697 3C 66 3C 66 
35d25 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
35d29 699 3C 66 7C 60 
35d2d 69a 30 1C 00 00 
35d31 69b 00 18 18 00 
35d35 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
35d39 69d 00 18 18 00 
35d3d 69e 18 18 0C 60 
35d41 69f 30 18 0C 18 
35d45 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
35d49 6a1 00 7E 00 00 
35d4d 6a2 7E 00 00 06 
35d51 6a3 0C 18 30 18 
35d55 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
35d59 6a5 3C 66 30 18 
35d5d 6a6 00 18 00 00 
35d61 6a7 3C 66 76 76 
35d65 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
35d69 6a9 18 3C 66 66 
35d6d 6aa 7E 66 00 00 
35d71 6ab 3E 66 3E 66 
35d75 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
35d79 6ad 3C 66 06 06 
35d7d 6ae 66 3C 00 00 
35d81 6af 1E 36 66 66 
35d85 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
35d89 6b1 7E 06 3E 06 
35d8d 6b2 06 7E 00 00 
35d91 6b3 7E 06 3E 06 
35d95 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
35d99 6b5 7C 06 06 76 
35d9d 6b6 66 7C 00 00 
35da1 6b7 66 66 7E 66 
35da5 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
35da9 6b9 7E 18 18 18 
35dad 6ba 18 7E 00 00 
35db1 6bb 60 60 60 60 
35db5 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
35db9 6bd 66 36 1E 1E 
35dbd 6be 36 66 00 00 
35dc1 6bf 06 06 06 06 
35dc5 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
35dc9 6c1 C6 EE FE D6 
35dcd 6c2 C6 C6 00 00 
35dd1 6c3 66 6E 7E 7E 
35dd5 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
35dd9 6c5 3C 66 66 66 
35ddd 6c6 66 3C 00 00 
35de1 6c7 3E 66 66 3E 
35de5 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
35de9 6c9 3C 66 66 66 
35ded 6ca 36 6C 00 00 
35df1 6cb 3E 66 66 3E 
35df5 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
35df9 6cd 3C 06 3C 60 
35dfd 6ce 60 3C 00 00 
35e01 6cf 7E 18 18 18 
35e05 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
35e09 6d1 66 66 66 66 
35e0d 6d2 66          | 	byte	$66[5]
35e0e 6d2 7E 00 00 66 
35e12 6d3 66 66 66 3C 
35e16 6d4 18 00 00 C6 
35e1a 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
35e1e 6d6 C6 00 00 66 
35e22 6d7 66 3C 3C 66 
35e26 6d8 66 00 00 66 
35e2a 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
35e2e 6da 18 00 00 7E 
35e32 6db 30 18 0C 06 
35e36 6dc 7E 00 00 78 
35e3a 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
35e3e 6de 78 00 00 02 
35e42 6df 06 0C 18 30 
35e46 6e0 60 00 00 1E 
35e4a 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
35e4e 6e2 1E 00 00 10 
35e52 6e3 38 6C C6 00 
35e56 6e4 00 00 00 00 
35e5a 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
35e5e 6e6 FF 00 00 18 
35e62 6e7 3C 7E 7E 3C 
35e66 6e8 18 00 00 00 
35e6a 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
35e6e 6ea 7C 00 00 06 
35e72 6eb 06 3E 66 66 
35e76 6ec 3E 00 00 00 
35e7a 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
35e7e 6ee 3C 00 00 60 
35e82 6ef 60 7C 66 66 
35e86 6f0 7C 00 00 00 
35e8a 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
35e8e 6f2 3C 00 00 70 
35e92 6f3 18 7C 18 18 
35e96 6f4 18 00 00 00 
35e9a 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
35e9e 6f6 60 3E 00 06 
35ea2 6f7 06 3E 66 66 
35ea6 6f8 66 00 00 18 
35eaa 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
35eae 6fa 3C 00 00 60 
35eb2 6fb 00 60 60 60 
35eb6 6fc 60 3C 00 06 
35eba 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
35ebe 6fe 66 00 00 1C 
35ec2 6ff 18 18 18 18 
35ec6 700 3C 00 00 00 
35eca 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
35ece 702 C6 00 00 00 
35ed2 703 3E 66 66 66 
35ed6 704 66 00 00 00 
35eda 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
35ede 706 3C 00 00 00 
35ee2 707 3E 66 66 3E 
35ee6 708 06 06 00 00 
35eea 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
35eee 70a 60 60 00 00 
35ef2 70b 3E 66 06 06 
35ef6 70c 06 00 00 00 
35efa 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
35efe 70e 3E 00 00 18 
35f02 70f 7E 18 18 18 
35f06 710 70 00 00 00 
35f0a 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
35f0e 712 7C 00 00 00 
35f12 713 66 66 66 3C 
35f16 714 18 00 00 00 
35f1a 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
35f1e 716 6C 00 00 00 
35f22 717 66 3C 18 3C 
35f26 718 66 00 00 00 
35f2a 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
35f2e 71a 30 1E 00 00 
35f32 71b 7E 30 18 0C 
35f36 71c 7E 00 00 18 
35f3a 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
35f3e 71e 3C 00 18 18 
35f42 71f 18 18 18 18 
35f46 720 18 18 00 7E 
35f4a 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
35f4e 722 60 00 10 18 
35f52 723 1C 1E 1C 18 
35f56 724 10 00 08 18 
35f5a 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
35f5e 726 08 00       | 	byte	$08, $00
35f60 727 00 00 00 00 
35f64 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
35f65 728 80 00 00 00 
35f69 729 00 80 00 00 
35f6d 72a 80 80 00 00 
35f71 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
35f75 72c 80 00 80 00 
35f79 72d 00 40 80 00 
35f7d 72e AA AA AA 00 
35f81 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
35f85 730 FF 00 00 00 
35f89 731 00 FF 00 00 
35f8d 732 FF FF 00 00 
35f91 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
35f95 734 FF 00 FF 00 
35f99 735 00 FF FF 00 
35f9d 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
35fa0 737 00 00 00 00 
35fa4 738 00          | ataripalette   file "ataripalettep2.def"
35fa5 738 11 11 11 00 
35fa9 739 22 22 22 00 
35fad 73a 33 33 33 00 
35fb1 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
35fb5 73c 55 55 55 00 
35fb9 73d 66 66 66 00 
35fbd 73e 77 77 77 00 
35fc1 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
35fc5 740 99 99 99 00 
35fc9 741 AA AA AA 00 
35fcd 742 BB BB BB 00 
35fd1 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
35fd5 744 DD DD DD 00 
35fd9 745 EE EE EE 00 
35fdd 746 FF FF FF 00 
35fe1 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
35fe5 748 00 14 40 00 
35fe9 749 00 1E 60 00 
35fed 74a 00 28 80 00 
35ff1 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
35ff5 74c 00 3C BF 00 
35ff9 74d 00 46 DF 00 
35ffd 74e 00 50 FF 00 
36001 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
36005 750 39 77 FF 00 
36009 751 55 8A FF 00 
3600d 752 71 9E FF 00 
36011 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
36015 754 AA C5 FF 00 
36019 755 C6 D8 FF 00 
3601d 756 E3 EC FF 00 
36021 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
36025 758 00 00 40 00 
36029 759 00 00 60 00 
3602d 75a 00 00 80 00 
36031 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
36035 75c 00 00 BF 00 
36039 75d 00 00 DF 00 
3603d 75e 00 00 FF 00 
36041 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
36045 760 39 39 FF 00 
36049 761 55 55 FF 00 
3604d 762 71 71 FF 00 
36051 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
36055 764 AA AA FF 00 
36059 765 C6 C6 FF 00 
3605d 766 E3 E3 FF 00 
36061 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
36065 768 20 00 40 00 
36069 769 30 00 60 00 
3606d 76a 40 00 80 00 
36071 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
36075 76c 60 00 BF 00 
36079 76d 70 00 DF 00 
3607d 76e 80 00 FF 00 
36081 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
36085 770 9C 39 FF 00 
36089 771 AA 55 FF 00 
3608d 772 B8 71 FF 00 
36091 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
36095 774 D5 AA FF 00 
36099 775 E3 C6 FF 00 
3609d 776 F1 E3 FF 00 
360a1 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
360a5 778 40 00 40 00 
360a9 779 60 00 60 00 
360ad 77a 80 00 80 00 
360b1 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
360b5 77c BF 00 BF 00 
360b9 77d DF 00 DF 00 
360bd 77e FF 00 FF 00 
360c1 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
360c5 780 FF 39 FF 00 
360c9 781 FF 55 FF 00 
360cd 782 FF 71 FF 00 
360d1 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
360d5 784 FF AA FF 00 
360d9 785 FF C6 FF 00 
360dd 786 FF E3 FF 00 
360e1 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
360e5 788 40 00 20 00 
360e9 789 60 00 30 00 
360ed 78a 80 00 40 00 
360f1 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
360f5 78c BF 00 60 00 
360f9 78d DF 00 70 00 
360fd 78e FF 00 80 00 
36101 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
36105 790 FF 39 9C 00 
36109 791 FF 55 AA 00 
3610d 792 FF 71 B8 00 
36111 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
36115 794 FF AA D5 00 
36119 795 FF C6 E3 00 
3611d 796 FF E3 F1 00 
36121 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
36125 798 40 00 00 00 
36129 799 60 00 00 00 
3612d 79a 80 00 00 00 
36131 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
36135 79c BF 00 00 00 
36139 79d DF 00 00 00 
3613d 79e FF 00 00 00 
36141 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
36145 7a0 FF 39 39 00 
36149 7a1 FF 55 55 00 
3614d 7a2 FF 71 71 00 
36151 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
36155 7a4 FF AA AA 00 
36159 7a5 FF C6 C6 00 
3615d 7a6 FF E3 E3 00 
36161 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
36165 7a8 40 10 00 00 
36169 7a9 60 18 00 00 
3616d 7aa 80 20 00 00 
36171 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
36175 7ac BF 30 00 00 
36179 7ad DF 38 00 00 
3617d 7ae FF 40 00 00 
36181 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
36185 7b0 FF 6A 39 00 
36189 7b1 FF 80 55 00 
3618d 7b2 FF 95 71 00 
36191 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
36195 7b4 FF BF AA 00 
36199 7b5 FF D5 C6 00 
3619d 7b6 FF EA E3 00 
361a1 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
361a5 7b8 40 20 00 00 
361a9 7b9 60 30 00 00 
361ad 7ba 80 40 00 00 
361b1 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
361b5 7bc BF 60 00 00 
361b9 7bd DF 70 00 00 
361bd 7be FF 80 00 00 
361c1 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
361c5 7c0 FF 9C 39 00 
361c9 7c1 FF AA 55 00 
361cd 7c2 FF B8 71 00 
361d1 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
361d5 7c4 FF D5 AA 00 
361d9 7c5 FF E3 C6 00 
361dd 7c6 FF F1 E3 00 
361e1 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
361e5 7c8 40 30 00 00 
361e9 7c9 60 48 00 00 
361ed 7ca 80 60 00 00 
361f1 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
361f5 7cc BF 90 00 00 
361f9 7cd DF A8 00 00 
361fd 7ce FF C0 00 00 
36201 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
36205 7d0 FF CE 39 00 
36209 7d1 FF D5 55 00 
3620d 7d2 FF DC 71 00 
36211 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
36215 7d4 FF EA AA 00 
36219 7d5 FF F1 C6 00 
3621d 7d6 FF F8 E3 00 
36221 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
36225 7d8 30 40 00 00 
36229 7d9 48 60 00 00 
3622d 7da 60 80 00 00 
36231 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
36235 7dc 90 BF 00 00 
36239 7dd A8 DF 00 00 
3623d 7de C0 FF 00 00 
36241 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
36245 7e0 CE FF 39 00 
36249 7e1 D5 FF 55 00 
3624d 7e2 DC FF 71 00 
36251 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
36255 7e4 EA FF AA 00 
36259 7e5 F1 FF C6 00 
3625d 7e6 F8 FF E3 00 
36261 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
36265 7e8 00 40 00 00 
36269 7e9 00 60 00 00 
3626d 7ea 00 80 00 00 
36271 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
36275 7ec 00 BF 00 00 
36279 7ed 00 DF 00 00 
3627d 7ee 00 FF 00 00 
36281 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
36285 7f0 39 FF 39 00 
36289 7f1 55 FF 55 00 
3628d 7f2 71 FF 71 00 
36291 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
36295 7f4 AA FF AA 00 
36299 7f5 C6 FF C6 00 
3629d 7f6 E3 FF E3 00 
362a1 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
362a5 7f8 00 40 14 00 
362a9 7f9 00 60 1E 00 
362ad 7fa 00 80 28 00 
362b1 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
362b5 7fc 00 BF 3C 00 
362b9 7fd 00 DF 46 00 
362bd 7fe 00 FF 50 00 
362c1 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
362c5 800 39 FF 77 00 
362c9 801 55 FF 8A 00 
362cd 802 71 FF 9E 00 
362d1 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
362d5 804 AA FF C5 00 
362d9 805 C6 FF D8 00 
362dd 806 E3 FF EC 00 
362e1 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
362e5 808 00 40 28 00 
362e9 809 00 60 3C 00 
362ed 80a 00 80 50 00 
362f1 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
362f5 80c 00 BF 78 00 
362f9 80d 00 DF 8C 00 
362fd 80e 00 FF A0 00 
36301 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
36305 810 39 FF B5 00 
36309 811 55 FF C0 00 
3630d 812 71 FF CA 00 
36311 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
36315 814 AA FF DF 00 
36319 815 C6 FF EA 00 
3631d 816 E3 FF F4 00 
36321 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
36325 818 00 40 40 00 
36329 819 00 60 60 00 
3632d 81a 00 80 80 00 
36331 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
36335 81c 00 BF BF 00 
36339 81d 00 DF DF 00 
3633d 81e 00 FF FF 00 
36341 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
36345 820 39 FF FF 00 
36349 821 55 FF FF 00 
3634d 822 71 FF FF 00 
36351 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
36355 824 AA FF FF 00 
36359 825 C6 FF FF 00 
3635d 826 E3 FF FF 00 
36361 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
36365 828 00 28 40 00 
36369 829 00 3C 60 00 
3636d 82a 00 50 80 00 
36371 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
36375 82c 00 78 BF 00 
36379 82d 00 8C DF 00 
3637d 82e 00 A0 FF 00 
36381 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
36385 830 39 B5 FF 00 
36389 831 55 C0 FF 00 
3638d 832 71 CA FF 00 
36391 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
36395 834 AA DF FF 00 
36399 835 C6 EA FF 00 
3639d 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
363a0 837             | 
363a0 837             | '**********************************************************************************
363a0 837             | '
363a0 837             | '        Timings and colors definitions
363a0 837             | '
363a0 837             | '**********************************************************************************
363a0 837             | 
363a0 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
363a0 837 08 00 00 00 
363a4 838 3C 00 00 00 
363a8 839 08 00 00 00 
363ac 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
363b0 83b 07 00 00 00 
363b4 83c 04 00 00 00 
363b8 83d 01 00 00 00 
363bc 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
363c0 83f 58 02 00 00 
363c4 840 20 9E 4B 14 
363c8 841 FB A8 9E 01 
363cc 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
363d0 843 00 00 00 00 
363d4 844 C0 00 00 00 
363d8 845 00 00 00 00 
363dc 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
363e0 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
363e0 847 00 75 C7 97 
363e4 848 27 47 F6 0A 
363e8 849 05 79 CB 9B 
363ec 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
363f0 84b             | 
363f0 84b             | ''--------  Initialization  ----------------------------------------------------------------
363f0 84b             | 
363f0 84b 28 0C 64 FD | hdmi            setq    #6
363f4 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
363f8 84d 28 10 64 FD |                 setq    #8
363fc 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
36400 84f             | 
36400 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
36404 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
36408 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
3640c 852 D6 C6 01 F1 |                 add     t1,hbase
36410 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
36414 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
36418 855 7B 0B 80 5F 
3641c 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
36420 857 66 66 86 FF 
36424 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
36428 859             | '
36428 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
3642c 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
36430 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
36434 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
36438 85d             | 
36438 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3643c 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
36440 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
36444 860             | 
36444 860             | ''--------  frame rendering main loop  ---------------------------------------------------
36444 860             | 
36444 860 28 06 64 FD | p101            setq 	#3
36448 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
3644c 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
36450 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
36454 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
36458 865 00 A0 05 F6 |                 mov     dlinum, #0
3645c 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
36460 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
36464 868             | 
36464 868             | 
36464 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
36468 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3646c 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
36470 86b             |                 
36470 86b             | 
36470 86b             | 
36470 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
36470 86b             |   
36470 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
36474 86c 29 FE 65 3D |          if_nc  setq2   #255
36478 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
3647c 86e             | 
3647c 86e             | '' -----   up porch (before the picture)
3647c 86e             | 
3647c 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
36480 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
36484 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
36488 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
3648c 872             |  
3648c 872             |    
3648c 872             |  
3648c 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
36490 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
36494 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
36498 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3649c 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
364a0 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
364a4 878             | 
364a4 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
364a8 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
364ac 87a 48 00 B0 FD | 		call    #dli
364b0 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
364b4 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
364b8 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
364bc 87e             |                 	
364bc 87e             |                 
364bc 87e             | 
364bc 87e             |  
364bc 87e             | '' ------- the main screen drawing starts here
364bc 87e             | 
364bc 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
364c0 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
364c4 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
364c8 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
364cc 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
364d0 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
364d4 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
364d8 885             |               
364d8 885             | 
364d8 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
364dc 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
364e0 887             | 
364e0 887             | ' ---------------- All visible lines displayed now, start vblank  
364e0 887             | 
364e0 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
364e4 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
364e8 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
364ec 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
364f0 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
364f4 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
364f8 88d             | 
364f8 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
364f8 88d             | 
364f8 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
364f8 88d             | 
364f8 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
364fc 88e             | 
364fc 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
36500 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
36504 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
36508 891             | 
36508 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3650c 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
36510 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
36514 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
36518 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3651c 896             | 
3651c 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
36520 897 DD C6 41 F8 |                 getnib  t1,dl,#0
36524 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
36528 899 70 00 90 AD |     if_z        jmp     #preload
3652c 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
36530 89b 94 00 90 AD |     if_z        jmp     #preload2
36534 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
36538 89d 0C 00 90 AD |     if_z        jmp     #p390
3653c 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
36540 89f 28 00 90 AD |     if_z        jmp     #p391  
36544 8a0             | 
36544 8a0 2D 00 64 FD | p308            ret
36548 8a1             |    
36548 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3654c 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
36550 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
36554 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
36558 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3655c 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
36560 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
36564 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
36568 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3656c 8aa             |  
3656c 8aa             | '' --------  Reload palette. To do 
3656c 8aa             | 
3656c 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
36570 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
36574 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
36578 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3657c 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
36580 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
36584 8b0 70 FF 9F FD |         	jmp     #dli                
36588 8b1             |       
36588 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
36588 8b1             | 
36588 8b1             | 
36588 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
36588 8b1             | 
36588 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3658c 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
36590 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
36594 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
36598 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
3659c 8b6             |         
3659c 8b6             | '' -------------- Preload a line from PSRAM        
3659c 8b6             |         
3659c 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
365a0 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
365a4 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
365a8 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
365ac 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
365b0 8bb             | 
365b0 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
365b4 8bc 32 B7 01 F6 |                 mov     buf2,a1024
365b8 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
365bc 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
365c0 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
365c4 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
365c8 8c1             |  
365c8 8c1             |  
365c8 8c1             | preload2      '  incmod  dlinum,#3
365c8 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
365cc 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
365d0 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
365d4 8c4 28 02 64 FD |                 setq	#1
365d8 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
365dc 8c6             |                 
365dc 8c6             | 
365dc 8c6             | '' -------------- Draw sprites
365dc 8c6             | 
365dc 8c6 CF 5C 02 F6 | sprite          mov t8,frames
365e0 8c7 10 5C 0E F5 | 		and t8,#16 wz
365e4 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
365e8 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
365ec 8ca             | 		
365ec 8ca             | 
365ec 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
365f0 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
365f4 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
365f8 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
365fc 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
36600 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
36604 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
36608 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
3660c 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
36610 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
36614 8d4 01 52 86 F1 |                 sub     sprite_h,#1
36618 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
3661c 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
36620 8d7             | 
36620 8d7             | 
36620 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
36624 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
36628 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3662c 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
36630 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
36634 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
36638 8dd 00 5E 06 F6 |                 mov 	t9,#0
3663c 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
36640 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
36644 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
36648 8e1             |      
36648 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3664c 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
36650 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
36654 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
36658 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3665c 8e6             |                 
3665c 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
36660 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
36664 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
36668 8e9             |   		
36668 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3666c 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
36670 8eb             | 
36670 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
36674 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
36678 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3667c 8ee             |  
3667c 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
36680 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
36684 8f0 10 00 90 CD |      if_c 	jmp     #p899		
36688 8f1             | 	
36688 8f1             | 	
36688 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3668c 8f2 28 CD 01 F1 | 		add	t4,sprite_w
36690 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
36694 8f4             | 
36694 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
36698 8f5             | 
36698 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
3669c 8f6 01 58 86 F1 | 	 	sub     t6,#1
366a0 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
366a4 8f8             | 
366a4 8f8 28 58 62 FD |                 setq   	t6
366a8 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
366ac 8fa 28 5D 02 F6 |                 mov t8,sprite_w
366b0 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
366b4 8fc 24 00 90 AD |         if_z    jmp #p898
366b8 8fd             |          
366b8 8fd             |         
366b8 8fd 70 5F 06 F6 |                 mov  t9,#368
366bc 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
366c0 8ff             | 
366c0 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
366c4 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
366c8 901 FF FF 7F FF 
366cc 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
366d0 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
366d4 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
366d8 905 2D 01 00 F5 |                 and 0-0, t7
366dc 906             |                
366dc 906             | 
366dc 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
366e0 907 E5 E0 7A FA |                 wmlong 368,t3				
366e4 908             |                 
366e4 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
366e8 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
366ec 90a 2D 00 64 FD |                 ret
366f0 90b             | 	
366f0 90b             | 	
366f0 90b             |                
366f0 90b             |  
366f0 90b             | '' -------------- Graphics line ------------------------------------------------------------
366f0 90b             |  
366f0 90b             | 
366f0 90b             | '' consts and vars
366f0 90b             | 
366f0 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
366f4 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
366f8 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
366fc 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
36700 90f             | 
36700 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
36704 910             | 
36704 910             | '------ these longs will be set by setmode function
36704 910             | 
36704 910 00 00 00 00 | m_bs            long    0        'blanks before sync
36708 911 00 00 00 00 | m_sn            long    0        'sync
3670c 912 00 00 00 00 | m_bv            long    0        'blanks before visible
36710 913 00 00 00 00 | m_vi            long    0        'visible pixels #
36714 914             | 'm_border        long    0        'left/right borders
36714 914 00 00 00 00 | i_upporch       long    0        'up porch lines
36718 915 00 00 00 00 | i_vsync         long    0        'vsync lines
3671c 916 00 00 00 00 | i_downporch     long    0        'down porch lines
36720 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
36724 918 00 00 00 00 | i_totalvis      long    0
36728 919             | 
36728 919             | '-------------------------------------
36728 919             |  
36728 919 00 00 00 00 | linenum         long    0
3672c 91a 00 00 00 00 | frames          long    0
36730 91b 00 00 00 00 | dlinum long 0
36734 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
36738 91d             | 
36738 91d 00 00 00 00 | vblankptr       long    0
3673c 91e 00 00 00 00 | modeptr         long    0
36740 91f 00 00 00 00 | paletteptr      long    0
36744 920 00 00 00 00 | dlptr           long    0
36748 921 01 00 00 00 | hbase           long    1
3674c 922 00 00 00 00 | mailbox         long    0
36750 923 00 00 00 00 | spriteptr          long 0
36754 924             | 
36754 924 00 00 00 00 | cmd             long    0
36758 925 00 B0 07 00 | buf1            long    $80000-16384-4096
3675c 926 00 04 00 00 | buf2            long    1024
36760 927 01 00 00 00 | dlptr2          long    1
36764 928 01 00 00 00 | dl              long    1
36768 929             | 
36768 929 00 00 00 00 | buf1c long 0
3676c 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
36770 92b 01 00 00 00 | framebuf2       long    1
36774 92c 01 00 00 00 | hsync0          long    1
36778 92d 01 00 00 00 | hsync1          long    1
3677c 92e             | 
3677c 92e 01 00 00 00 | t1              long    1
36780 92f 00 00 00 00 | t2 long 0
36784 930 00 00 00 00 | t3 long 0
36788 931 00 00 00 00 | t4 long 0
3678c 932             | 
3678c 932 00 00 00 00 | rcnt            long    0  'dl repeat count
36790 933 00 00 00 00 | rcnt2           long    0
36794 934 00 00 00 00 | rcnt2a          long    0
36798 935 00 00 00 00 | roffset         long    0
3679c 936 00 00 00 00 | rdl             long    0  'dl repeat line
367a0 937 00 00 00 00 | dlc             long    0  'dl command
367a4 938             | 
367a4 938 FF FF FF FF | affffffff       long    $ffffffff
367a8 939 00 00 00 00 | sprite1pointer long 0
367ac 93a 00 00 00 00 | sprite1xy      long 0
367b0 93b 00 00 00 00 | sprite1wh      long 0
367b4 93c 00 00 00 00 | sprite2pointer long 0
367b8 93d 00 00 00 00 | sprite2xy      long 0
367bc 93e 00 00 00 00 | sprite2wh      long 0
367c0 93f 00 00 00 00 | sprite3pointer long 0
367c4 940 00 00 00 00 | sprite3xy      long 0
367c8 941 00 00 00 00 | sprite3wh      long 0
367cc 942 00 00 00 00 | sprite4pointer long 0
367d0 943 00 00 00 00 | sprite4xy      long 0
367d4 944 00 00 00 00 | sprite4wh      long 0
367d8 945 00 00 00 00 | sprite5pointer long 0
367dc 946 00 00 00 00 | sprite5xy      long 0
367e0 947 00 00 00 00 | sprite5wh      long 0
367e4 948 00 00 00 00 | sprite6pointer long 0
367e8 949 00 00 00 00 | sprite6xy      long 0
367ec 94a 00 00 00 00 | sprite6wh      long 0
367f0 94b 00 00 00 00 | sprite7pointer long 0
367f4 94c 00 00 00 00 | sprite7xy      long 0
367f8 94d 00 00 00 00 | sprite7wh      long 0
367fc 94e 00 00 00 00 | sprite8pointer long 0
36800 94f 00 00 00 00 | sprite8xy      long 0
36804 950 00 00 00 00 | sprite8wh      long 0
36808 951 00 00 00 00 | sprite9pointer long 0
3680c 952 00 00 00 00 | sprite9xy      long 0
36810 953 00 00 00 00 | sprite9wh      long 0
36814 954 00 00 00 00 | sprite10pointer long 0
36818 955 00 00 00 00 | sprite10xy      long 0
3681c 956 00 00 00 00 | sprite10wh      long 0
36820 957 00 00 00 00 | sprite11pointer long 0
36824 958 00 00 00 00 | sprite11xy      long 0
36828 959 00 00 00 00 | sprite11wh      long 0
3682c 95a 00 00 00 00 | sprite12pointer long 0
36830 95b 00 00 00 00 | sprite12xy      long 0
36834 95c 00 00 00 00 | sprite12wh      long 0
36838 95d 00 00 00 00 | sprite13pointer long 0
3683c 95e 00 00 00 00 | sprite13xy      long 0
36840 95f 00 00 00 00 | sprite13wh      long 0
36844 960 00 00 00 00 | sprite14pointer long 0
36848 961 00 00 00 00 | sprite14xy      long 0
3684c 962 00 00 00 00 | sprite14wh      long 0
36850 963 00 00 00 00 | sprite15pointer long 0
36854 964 00 00 00 00 | sprite15xy      long 0
36858 965 00 00 00 00 | sprite15wh      long 0
3685c 966 00 00 00 00 | sprite16pointer long 0
36860 967 00 00 00 00 | sprite16xy      long 0
36864 968 00 00 00 00 | sprite16wh      long 0
36868 969 00 00 00 00 | sprite17pointer long 0
3686c 96a 00 00 00 00 | sprite17xy      long 0
36870 96b 00 00 00 00 | sprite17wh      long 0
36874 96c 00 00 00 00 | sprite18pointer long 0
36878 96d 00 00 00 00 | sprite18xy      long 0
3687c 96e 00 00 00 00 | sprite18wh      long 0
36880 96f 00 00 00 00 | spritenum long 0
36884 970             | 
36884 970 00 00 00 00 | spriteline long 0
36888 971 84 03 00 00 | sprite_x long 900
3688c 972 00 00 00 00 | sprite_y long 0
36890 973 10 00 00 00 | sprite_w long 16
36894 974 40 00 00 00 | sprite_h long 64
36898 975 00 00 00 00 | l2 long 0
3689c 976 00 00 00 00 | t5 long 0
368a0 977 00 00 00 00 | t6 long 0
368a4 978 00 00 00 00 | t7 long 0
368a8 979 00 00 00 00 | t8 long 0
368ac 97a 00 00 00 00 | t9 long 0
368b0 97b 00 00 00 00 | preloadaddr long 0
368b4 97c 00 00 00 00 | preloadlineaddr long 0
368b8 97d 00 04 00 00 | a1024 long 1024
368bc 97e             | 
368bc 97e E0 03 00 00 | aa long 992
368c0 97f FF 03 00 00 | a1023 long 1023
368c4 980 00 10 00 00 | a4096 long 4096
368c8 981             |  fit 368
368c8 981             | _psram_spin2_dat_
368c8 981 00 00 00 00 
      ...             
369c0 9bf 00 00 00 00 
369c4 9c0 00 00 00 00 |     listdata long 0[8*8]
369c8 9c1             |             orgh
369c8                 | 
369c8                 | ' driver state
369c8     FF FF FF FF | drivercog   long    -1  ' COG id of driver
369cc     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
369d0                 | 
369d0                 | ' delay profile
369d0     07 00 00 00 
369d4     00 CF 7B 05 
369d8     80 D1 F0 08 
369dc     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
369e0     80 C4 60 0F 
369e4     80 39 7A 12 
369e8     40 2D D9 13 
369ec     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
369f0                 | 
369f0                 | ' data to be passed to driver when starting it
369f0                 | startupData
369f0     00 00 00 00 |     long    0           ' current frequency
369f4     00 00 00 00 |     long    FLAGS       ' optional flags for driver
369f8     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
369fc     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
36a00     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
36a04     10 6A 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
36a08     90 6A 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
36a0c     B0 6A 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
36a10                 | 
36a10                 | ' data for memory
36a10                 | deviceData
36a10                 |     ' 16 bank parameters follow (16MB per bank)
36a10     00 00 00 00 
      ...             
36a48     00 00 00 00 
36a4c     00 00 00 00 |     long    0[16]                               ' banks 0-15
36a50                 |     ' 16 banks of pin parameters follow
36a50     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
36a54     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
36a58     FF FF FF FF 
      ...             
36a88     FF FF FF FF 
36a8c     FF FF FF FF |     long    -1[14]                              ' banks 2-15
36a90                 | 
36a90                 | ' data for COG polling
36a90                 | qosData 
36a90     00 00 FF FF 
36a94     00 00 FF FF 
36a98     00 00 FF FF 
36a9c     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
36aa0     00 00 FF FF 
36aa4     00 00 FF FF 
36aa8     00 00 FF FF 
36aac     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
36ab0                 |     
36ab0                 | ' mailbox storage
36ab0                 | 
36ab0                 | mailboxes
36ab0     00 00 00 00 
      ...             
36b08     00 00 00 00 
36b0c     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
36b10                 | 	alignl
36b10                 | _psram16drv_spin2_dat_
36b10                 |                             orgh
36b10     00 00 00 00 
      ...             
36b28     00 00 00 00 
36b2c     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
36b30                 | 
36b30                 | driver_start
36b30                 |                             org
36b30 000             | '..................................................................................................
36b30 000             | ' Memory layout for COG RAM once operational:
36b30 000             | '
36b30 000             | '  COG RAM address      Usage
36b30 000             | '  ---------------      ----
36b30 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
36b30 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
36b30 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
36b30 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
36b30 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
36b30 000             | '  ~$198-$1F3           State and register variables
36b30 000             | '
36b30 000             | ' Also during driver COG startup:
36b30 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
36b30 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
36b30 000             | '..................................................................................................
36b30 000             |                             
36b30 000             | ' Mailbox storage after vector initialization
36b30 000             | 
36b30 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
36b34 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
36b38 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
36b3c 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
36b40 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
36b44 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
36b48 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
36b4c 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
36b50 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
36b54 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
36b58 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
36b5c 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
36b60 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
36b64 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
36b68 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
36b6c 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
36b70 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
36b74 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
36b78 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
36b7c 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
36b80 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
36b84 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
36b88 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
36b8c 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
36b90 018             | 
36b90 018             | ' Mailbox parameter addresses per COG once patched
36b90 018             |                             
36b90 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
36b94 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
36b98 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
36b9c 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
36ba0 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
36ba4 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
36ba8 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
36bac 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
36bb0 020             | 
36bb0 020             | '..................................................................................................
36bb0 020             | ' Per COG request and state setup and service branching
36bb0 020             |         
36bb0 020             | cog0                 
36bb0 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
36bb4 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
36bb8 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
36bbc 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
36bc0 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36bc4 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36bc8 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
36bcc 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
36bd0 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
36bd4 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36bd8 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36bdc 02b 33 CA 63 FD |                             execf   request-0               'jump to service
36be0 02c             | cog1                        
36be0 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
36be4 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
36be8 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
36bec 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
36bf0 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36bf4 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36bf8 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
36bfc 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
36c00 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
36c04 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36c08 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36c0c 037 33 CA 63 FD |                             execf   request-0               'jump to service
36c10 038             | cog2                         
36c10 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
36c14 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
36c18 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
36c1c 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
36c20 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36c24 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36c28 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
36c2c 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
36c30 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
36c34 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36c38 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36c3c 043 33 CA 63 FD |                             execf   request-0               'jump to service
36c40 044             | cog3                        
36c40 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
36c44 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
36c48 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
36c4c 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
36c50 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36c54 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36c58 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
36c5c 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
36c60 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
36c64 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36c68 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36c6c 04f 33 CA 63 FD |                             execf   request-0               'jump to service
36c70 050             | cog4                        
36c70 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
36c74 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
36c78 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
36c7c 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
36c80 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36c84 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36c88 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
36c8c 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
36c90 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
36c94 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36c98 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36c9c 05b 33 CA 63 FD |                             execf   request-0               'jump to service
36ca0 05c             | cog5                        
36ca0 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
36ca4 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
36ca8 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
36cac 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
36cb0 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36cb4 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36cb8 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
36cbc 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
36cc0 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
36cc4 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36cc8 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36ccc 067 33 CA 63 FD |                             execf   request-0               'jump to service
36cd0 068             | cog6                        
36cd0 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
36cd4 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
36cd8 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
36cdc 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
36ce0 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36ce4 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36ce8 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
36cec 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
36cf0 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
36cf4 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36cf8 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36cfc 073 33 CA 63 FD |                             execf   request-0               'jump to service
36d00 074             | cog7                        
36d00 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
36d04 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
36d08 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
36d0c 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
36d10 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36d14 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36d18 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
36d1c 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
36d20 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
36d24 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36d28 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36d2c 07f 33 CA 63 FD |                             execf   request-0               'jump to service
36d30 080             |                             fit     128
36d30 080             | 
36d30 080             |                             fit     128
36d30 080             | pad                         long    0[128-$]                'align init code to $80
36d30 080             | 
36d30 080             | '..................................................................................................
36d30 080             | 
36d30 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
36d30 080             | 
36d30 080             | init                        
36d30 080             |                             ' get driver scratch long address in hub
36d30 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
36d34 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
36d38 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
36d3c 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
36d40 084             |                     
36d40 084             |                             ' read in the additional LUT RAM code
36d40 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
36d44 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
36d48 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
36d4c 087             | 
36d4c 087             |                             ' read the startup parameters
36d4c 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
36d50 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
36d54 089             | 
36d54 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
36d54 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
36d58 08a             | 
36d58 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
36d5c 08b 01 00 00 5F 
36d60 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
36d64 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
36d68 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
36d6c 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
36d70 090             | 
36d70 090             |                             ' setup data pin modes and data bus pin group in streamer commands
36d70 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
36d74 091 01 00 00 FF 
36d78 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
36d7c 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
36d80 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
36d84 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
36d88 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
36d8c 097 08 DE 47 F5 |                             or      a, #8
36d90 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
36d94 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
36d98 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
36d9c 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
36da0 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
36da4 09d 01 DE 07 F1 |                             add     a, #1
36da8 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
36dac 09f             |  
36dac 09f             |                             ' setup device control pin states
36dac 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
36db0 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
36db4 0a1 01 00 00 FF 
36db8 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
36dbc 0a3             | 
36dbc 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
36dc0 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
36dc4 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
36dc8 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
36dcc 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
36dd0 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
36dd4 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
36dd8 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
36ddc 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
36de0 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
36de4 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
36de8 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
36dec 0af             | pinloop
36dec 0af             |                             ' generate minimum CE high time before access
36dec 0af A1 07 00 FF 
36df0 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
36df4 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
36df8 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
36dfc 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
36e00 0b4 1F DE 63 FD |                             waitx   a                       'delay
36e04 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
36e08 0b6             | 
36e08 0b6             |                             ' setup the COG mailboxes and addresses 
36e08 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
36e0c 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
36e10 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
36e14 0b9             | 
36e14 0b9 28 2E 64 FD |                             setq    #24-1
36e18 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
36e1c 0bb             | 
36e1c 0bb             |                             ' setup the polling loop for active COGs 
36e1c 0bb 01 C2 63 FD |                             cogid   id
36e20 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
36e24 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
36e28 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
36e2c 0bf 0A F0 07 F6 |                             mov     ptra, #10
36e30 0c0 E1 F1 03 FA |                             mul     ptra, id
36e34 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
36e38 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
36e3c 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
36e40 0c4 03 C2 07 FA |                             mul     id, #3
36e44 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
36e48 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
36e4c 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
36e50 0c8 D8 01 B0 FD |                             call    #reloadcogs
36e54 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
36e58 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
36e5c 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
36e5c 0cb D8 E5 B7 F9 |                             setd    d, #addr1
36e60 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
36e64 0cd 08 04 DC FC |                             rep     #2, #8
36e68 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
36e6c 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
36e70 0d0             | 
36e70 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
36e70 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
36e70 0d0 01 C2 63 FD |                             cogid   id
36e74 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
36e78 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
36e7c 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
36e80 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
36e84 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
36e88 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
36e8c 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
36e90 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
36e94 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
36e98 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
36e9c 0db 3F E4 A7 F9 |                             alti    d, #%111_111
36ea0 0dc 00 00 00 F6 |                             mov     0-0, 0-0
36ea4 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
36ea8 0de A5 E5 03 F1 |                             add     d, const512
36eac 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
36eb0 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
36eb4 0e1 00 00 00 F6 |                             mov     0-0, 0-0
36eb8 0e2             |                             
36eb8 0e2             |                             ' setup register values for control vector loop setup after we return
36eb8 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
36ebc 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
36ec0 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
36ec4 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
36ec8 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
36ecc 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
36ed0 0e8 D0 C3 8F F9 |                             altd    id, #id0
36ed4 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
36ed8 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
36edc 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
36ee0 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
36ee4 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
36ee8 0ee             |  
36ee8 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
36eec 0ef 07 CA 07 F5 |                             and     request, #7
36ef0 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
36ef4 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
36ef8 0f2             |                             fit     $100                    'ensure all init code fits this space
36ef8 0f2             | 
36ef8 0f2             |                             fit     $100                    'ensure all init code fits this space
36ef8 0f2             | 
36ef8 0f2 00 00 00 00 
      ...             
36f28 0fe 00 00 00 00 
36f2c 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
36f30 100             | 
36f30 100             | '..................................................................................................
36f30 100             | ' Error result handling and COG notification of request completion
36f30 100             | 
36f30 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
36f34 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
36f38 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
36f3c 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
36f40 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
36f44 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
36f48 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
36f4c 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
36f50 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
36f54 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
36f58 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
36f5c 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
36f60 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
36f64 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
36f68 10e             | ' Poller re-starts here after a COG is serviced
36f68 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
36f6c 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
36f70 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
36f74 111             | ' Main dynamic polling loop repeats until a request arrives
36f74 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
36f78 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
36f7c 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
36f80 114             | 
36f80 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
36f84 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
36f88 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
36f8c 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
36f90 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
36f94 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
36f98 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
36f9c 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
36fa0 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
36fa4 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
36fa8 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
36fac 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
36fb0 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
36fb4 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
36fb8 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
36fbc 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
36fc0 124             | 
36fc0 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
36fc4 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
36fc8 126             |  
36fc8 126             | '..................................................................................................
36fc8 126             | ' List handler                               
36fc8 126             | 
36fc8 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
36fcc 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
36fd0 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
36fd4 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
36fd8 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
36fdc 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
36fe0 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
36fe4 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
36fe8 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
36fec 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
36ff0 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
36ff4 131 33 00 60 FD |                             execf   0-0                     'process the request 
36ff8 132             | 
36ff8 132             | '..................................................................................................
36ff8 132             | ' Restoring per COG state and resuming where we left off
36ff8 132             | 
36ff8 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
36ffc 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
37000 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
37004 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
37008 136 D8 CB FB F8 |                             getbyte request, addr1, #3
3700c 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
37010 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
37014 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
37018 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
3701c 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
37020 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
37024 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
37028 13e             |                    
37028 13e             | '..................................................................................................
37028 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
37028 13e             | 
37028 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
3702c 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
37030 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
37034 141 D0 DF B7 F9 |                             setd    a, #id0
37038 142 D8 DF BF F9 |                             sets    a, #addr1
3703c 143 FE FF FF FF 
37040 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
37044 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
37048 146 3F DE A7 F9 |                             alti    a, #%111_111 
3704c 147 00 00 F0 F9 |                             muxq    0-0, 0-0
37050 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
37054 149 01 E2 63 FD |                             cogid   c
37058 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
3705c 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
37060 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
37064 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
37068 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
3706c 14f 00 E0 03 F6 |                             mov     b, 0-0
37070 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
37074 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
37078 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
3707c 153 0C 00 90 AD |             if_z            jmp     #excluded               
37080 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
37084 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
37088 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
3708c 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
37090 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
37094 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
37098 15a             | 
37098 15a             | 'determine priority cogs and build instructions for the polling sequence
37098 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
3709c 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
370a0 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
370a4 15d             | 
370a4 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
370a8 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
370ac 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
370b0 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
370b4 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
370b8 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
370bc 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
370c0 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
370c4 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
370c8 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
370cc 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
370d0 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
370d4 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
370d8 16a             | endprioloop
370d8 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
370dc 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
370e0 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
370e4 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
370e8 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
370ec 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
370f0 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
370f4 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
370f8 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
370fc 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
37100 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
37104 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
37108 176             | 
37108 176             | ' populate the round robin COG polling instructions
37108 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
3710c 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
37110 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
37114 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
37118 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
3711c 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
37120 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
37124 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
37128 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
3712c 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
37130 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
37134 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
37138 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
3713c 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
37140 184             | '..................................................................................................
37140 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
37140 184             | 
37140 184             | set_latency                                                 '            (a) set latency
37140 184             | get_latency                                                 '            (b) get latency
37140 184             | set_burst                                                   '            (c) set burst size of bank
37140 184             | get_burst                                                   '            (d) get burst size of bank
37140 184             |                                                             '            (e) dump state
37140 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
37144 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
37148 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
3714c 187             |                                                             ' | | | | e  account for following AUGS
3714c 187 04 00 00 FF 
37150 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
37154 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
37158 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
3715c 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
37160 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
37164 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
37168 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
3716c 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
37170 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
37174 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
37178 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
3717c 193             | 
3717c 193             | '..................................................................................................
3717c 193             | ' Misc EXECF code
3717c 193             | 
3717c 193 33 72 63 FD | start_read_exec             execf   newburstr
37180 194 33 7C 63 FD | start_write_exec            execf   resumewrites
37184 195 33 78 63 FD | continue_read_exec          execf   lockedreads
37188 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
3718c 197             | 
3718c 197             | '..................................................................................................
3718c 197             | ' Variables
3718c 197             | 
3718c 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
37190 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
37194 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
37198 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
3719c 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
371a0 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
371a4 19d             | 
371a4 19d 00 00 00 80 | xfreq1          long    $80000000
371a8 19e 00 00 00 40 | xfreq2          long    $40000000
371ac 19f 03 00 00 00 | delay           long    3
371b0 1a0             | 
371b0 1a0             | lutcodeaddr                 
371b0 1a0             | startupparams
371b0 1a0             | excludedcogs                                    'careful: shared register use!
371b0 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
371b4 1a1 00 00 00 00 | flags           long    0
371b8 1a2             | mask                                            'careful: shared register use!
371b8 1a2 00 00 00 00 | resetmaskA      long    0
371bc 1a3             | limit                                           'careful: shared register use!
371bc 1a3 00 00 00 00 | resetmaskB      long    0
371c0 1a4 00 00 00 00 | datapins        long    0
371c4 1a5             | const512                                        'careful: shared register use!
371c4 1a5 00 00 00 00 | devicelist      long    0
371c8 1a6 00 00 00 00 | coglist         long    0
371cc 1a7 00 00 00 00 | mbox            long    0 
371d0 1a8             | 
371d0 1a8             | clkpin                                          'shared with code patched during init
371d0 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
371d4 1a9             | cspin                                           'shared with code patched during init
371d4 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
371d8 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
371dc 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
371e0 1ac 01 00 00 00 | clkdelay        long    1
371e4 1ad 00 00 00 00 | regdatabus      long    0
371e8 1ae             | 
371e8 1ae 10 00 00 00 | deviceaddr      long    $10
371ec 1af             | rrcounter
371ec 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
371f0 1b0             | 
371f0 1b0             | ' jump addresses for the per COG handlers
371f0 1b0 20 00 00 00 | cog0_handler    long    cog0
371f4 1b1 2C 00 00 00 | cog1_handler    long    cog1
371f8 1b2 38 00 00 00 | cog2_handler    long    cog2
371fc 1b3 44 00 00 00 | cog3_handler    long    cog3
37200 1b4 50 00 00 00 | cog4_handler    long    cog4
37204 1b5 5C 00 00 00 | cog5_handler    long    cog5
37208 1b6 68 00 00 00 | cog6_handler    long    cog6
3720c 1b7 74 00 00 00 | cog7_handler    long    cog7
37210 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
37214 1b9             | 
37214 1b9             | ' EXECF sequences
37214 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
37218 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
3721c 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
37220 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
37224 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
37228 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
3722c 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
37230 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
37230 1c0             | 
37230 1c0             | 
37230 1c0             | ' SKIPF sequences
37230 1c0             | skiptable
37230 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
37234 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
37238 1c2 00 00 00 00 |                 long    0                      ' read modify write long
3723c 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
37240 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
37244 1c5 00 00 00 00 | pattern2        long    0
37248 1c6 00 00 00 00 | pattern3        long    0
3724c 1c7 77 02 00 00 | singlelong      long    %1001110111  
37250 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
37254 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
37258 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3725c 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
37260 1cc             | 
37260 1cc             | ' LUT RAM address values
37260 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
37264 1cd DD 02 00 00 | continue_read   long    continue_read_lut
37268 1ce DB 02 00 00 | continue_write  long    continue_write_lut
3726c 1cf F6 02 00 00 | noread          long    noread_lut
37270 1d0             | 
37270 1d0 00 00 00 00 | id0             long    0
37274 1d1 01 00 00 00 | id1             long    1
37278 1d2 02 00 00 00 | id2             long    2
3727c 1d3 03 00 00 00 | id3             long    3
37280 1d4 04 00 00 00 | id4             long    4
37284 1d5 05 00 00 00 | id5             long    5
37288 1d6 06 00 00 00 | id6             long    6
3728c 1d7 07 00 00 00 | id7             long    7
37290 1d8             | 
37290 1d8             | 'These next 10 request registers below are also temporarily reused during init 
37290 1d8             | 'and COG updates and need to follow immediately after id0-id7
37290 1d8 00 00 00 00 | addr1           long    0
37294 1d9 00 00 00 00 | hubdata         long    0
37298 1da 00 00 00 00 | count           long    0
3729c 1db 00 00 00 00 | addr2           long    0
372a0 1dc 00 00 00 00 | total           long    0
372a4 1dd 00 00 00 00 | offset1         long    0
372a8 1de 00 00 00 00 | offset2         long    0
372ac 1df 00 00 00 00 | link            long    0
372b0 1e0             | 
372b0 1e0             | burstwrite                                      'note shared register use during init
372b0 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
372b4 1e1 00 00 00 00 | id              long    0
372b8 1e2             | 
372b8 1e2 00 00 00 00 | header          long    0
372bc 1e3 00 00 00 00 | trailer         long    0
372c0 1e4 00 00 00 00 | cmdaddr         long    0
372c4 1e5 00 00 00 00 | request         long    0
372c8 1e6 00 00 00 00 | rrlimit         long    0
372cc 1e7 00 00 00 00 | pinconfig       long    0
372d0 1e8 00 00 00 00 | clks            long    0
372d4 1e9 00 00 00 00 | resume          long    0
372d8 1ea 00 00 00 00 | orighubsize     long    0
372dc 1eb 00 00 00 00 | wrclks          long    0
372e0 1ec             | 
372e0 1ec 00 00 00 00 | pattern         long    0
372e4 1ed 00 00 00 00 | hubscratch      long    0
372e8 1ee 00 10 00 00 | val4k           long    4096
372ec 1ef             | 
372ec 1ef             | ' temporary general purpose regs
372ec 1ef 00 00 00 00 | a               long    0
372f0 1f0 00 00 00 00 | b               long    0
372f4 1f1 00 00 00 00 | c               long    0
372f8 1f2 00 00 00 00 | d               long    0
372fc 1f3             |                 fit     502
372fc 1f3             | 
372fc 1f3             |                 fit     502
372fc 1f3             | 
372fc 1f3             | '..................................................................................................
372fc 1f3             | 
372fc 1f3             |             orgh
372fc                 | 
372fc                 | lut_code
372fc                 | 'HW init code up to 80 longs
372fc                 | 
372fc                 | '..................................................................................................
372fc                 | ' Memory layout for LUT RAM once operational:
372fc                 | '
372fc                 | '  LUT RAM address      Usage
372fc                 | '  ---------------      ----
372fc                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
372fc                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
372fc                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
372fc                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
372fc                 | '
372fc                 | ' Also during driver COG startup:
372fc                 | ' $230-$24F is used for HW init setup
372fc                 | ' $250-$26F is used as temporary vector storage 
372fc                 | '..................................................................................................
372fc                 | 
372fc                 |                 org $230    
372fc 230             | 
372fc 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
372fc 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
37300 231 24 16 60 FD |                             pollxfi
37304 232 FF AA 2A FF 
37308 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
3730c 234 28 00 B0 FD |                             call    #sendqspi
37310 235 07 F8 07 FF 
37314 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
37318 237 28 00 B0 FD |                             call    #sendspi
3731c 238 F8 07 78 FF 
37320 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
37324 23a 1C 00 B0 FD |                             call    #sendspi
37328 23b 7F 78 78 FF 
3732c 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
37330 23d 10 00 B0 FD |                             call    #sendspi 
37334 23e 2D 00 64 FD |                             ret
37338 23f             | 
37338 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
3733c 240 32 0C 64 FD |                             skipf   #%110
37340 241 9C EF 03 F6 |                             mov     pb, xsendimm
37344 242             | 
37344 242 10 D0 07 F6 | sendspi                     mov     clks, #16
37348 243 97 EF 03 F6 |                             mov     pb, ximm8lut
3734c 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
37350 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
37354 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
37358 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3735c 248 24 36 60 FD |                             waitxfi                         'wait for the completion
37360 249 50 48 63 FD |                             fltl    datapins                'float data bus
37364 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
37368 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3736c 24c             | 
3736c 24c 00 00 00 00 
37370 24d 00 00 00 00 
37374 24e 00 00 00 00 
37378 24f 00 00 00 00 |                 long    0[$270-32-$]
3737c 250             |                 fit     $270-32  ' keep room for 32 vector longs
3737c 250             |     
3737c 250             |                 fit     $270-32  ' keep room for 32 vector longs
3737c 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
3737c 250             | rw_vect ' PSRAM jump vectors
3737c 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37380 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37384 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
37388 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3738c 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
37390 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
37394 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
37398 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
3739c 258             | ro_vect ' R/O PSRAM jump vectors
3739c 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
373a0 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
373a4 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
373a8 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
373ac 25c 00 01 00 00 |                 long    unsupported
373b0 25d 00 01 00 00 |                 long    unsupported
373b4 25e 00 01 00 00 |                 long    unsupported
373b8 25f 00 01 00 00 |                 long    unsupported
373bc 260             | ctrl_vect ' Control jump vectors
373bc 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
373c0 261 00 01 00 00 |                 long    unsupported
373c4 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
373c8 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
373cc 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
373d0 265 00 01 00 00 |                 long    unsupported
373d4 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
373d8 267 3E 01 00 00 |                 long    reconfig 
373dc 268             | no_vect ' Invalid bank jump vectors
373dc 268 01 01 00 00 |                 long    invalidbank
373e0 269 01 01 00 00 |                 long    invalidbank
373e4 26a 01 01 00 00 |                 long    invalidbank
373e8 26b 01 01 00 00 |                 long    invalidbank
373ec 26c 01 01 00 00 |                 long    invalidbank
373f0 26d 01 01 00 00 |                 long    invalidbank
373f4 26e 01 01 00 00 |                 long    invalidbank
373f8 26f 01 01 00 00 |                 long    invalidbank
373fc 270             |                 fit     $270
373fc 270             | 
373fc 270             |                 fit     $270
373fc 270             | '..................................................................................................
373fc 270             | ' PSRAM READS
373fc 270             |                                                             ' a b c d e f
373fc 270             |                                                             ' B W L B R L  (a) byte read
373fc 270             |                                                             ' Y O O U E O  (b) word read
373fc 270             |                                                             ' T R N R S C  (c) long read
373fc 270             |                                                             ' E D G S U K  (d) new burst read
373fc 270             |                                                             '       T M E  (e) resumed sub-burst
373fc 270             |                                                             '         E D  (f) locked sub-burst
373fc 270             | 
373fc 270             | 
373fc 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
37400 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
37404 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
37408 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
3740c 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
37410 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
37414 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
37418 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3741c 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
37420 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
37424 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
37428 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3742c 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
37430 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
37434 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
37438 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3743c 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
37440 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
37444 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
37448 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3744c 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
37450 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
37454 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
37458 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3745c 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
37460 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
37464 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
37468 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3746c 28c             | 
3746c 28c             |                             ' fall through to read bursts
3746c 28c             |                         
3746c 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3746c 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
37470 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
37474 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
37478 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3747c 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
37480 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
37484 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
37488 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
3748c 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
37490 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
37494 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
37498 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
3749c 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
374a0 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
374a4 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
374a8 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
374ac 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
374b0 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
374b4 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
374b8 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
374bc 2a0 E8 D1 03 F1 |                             add     clks, clks
374c0 2a1             | readcommon
374c0 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
374c4 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
374c8 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
374cc 2a4             | 
374cc 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
374d0 2a5 69 C8 63 FD |                             rev     cmdaddr
374d4 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
374d8 2a7 61 C8 63 FD |                             mergeb  cmdaddr
374dc 2a8             | 
374dc 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
374e0 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
374e4 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
374e4 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
374e8 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
374ec 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
374f0 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
374f4 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
374f4 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
374f8 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
374fc 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
37500 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
37504 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
37508 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
3750c 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
3750c 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
37510 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
37514 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
37518 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
3751c 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
37520 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
37524 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
37528 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3752c 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
37530 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
37534 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
37538 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3753c 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
37540 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
37544 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
37544 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
37548 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3754c 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
37550 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
37554 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
37558 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3755c 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
37560 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
37564 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
37568 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3756c 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
37570 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
37574 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
37578 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
3757c 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
37580 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
37584 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
37588 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
3758c 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
37590 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
37594 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
37598 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
3759c 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
375a0 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
375a4 2da 10 03 90 FD |                             jmp     #writecommon
375a8 2db             | 
375a8 2db             | '..................................................................................................
375a8 2db             | ' Burst continuation testing
375a8 2db             | 
375a8 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
375ac 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
375b0 2dd             | continue_read_lut          
375b0 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
375b4 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
375b8 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
375bc 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
375c0 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
375c4 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
375c8 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
375cc 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
375d0 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
375d4 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
375d8 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
375dc 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
375e0 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
375e4 2ea             | 
375e4 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
375e8 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
375ec 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
375f0 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
375f4 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
375f8 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
375fc 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
37600 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
37604 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
37608 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3760c 2f4 2A 1C 66 0D |             _ret_           push    #poller
37610 2f5             | 
37610 2f5             | 
37610 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
37614 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
37614 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
37618 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3761c 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
37620 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
37624 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
37628 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3762c 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
37630 2fd 2D 00 64 FD |                             ret                             ' | continue processing
37634 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
37638 2ff             | '..................................................................................................
37638 2ff             | ' Completion of requests
37638 2ff             | 
37638 2ff             | complete_rw_lut             
37638 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3763c 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
37640 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
37644 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
37648 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3764c 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
37650 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
37654 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
37658 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3765c 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
37660 309 32 62 64 AD |             if_z            skipf   #%110001
37664 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
37668 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3766c 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
37670 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
37674 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
37678 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3767c 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
37680 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
37684 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
37688 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3768c 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
37690 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
37694 316             |                                                             ' skipcase (a) gfx copy to/from hub
37694 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
37694 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
37694 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
37698 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
3769c 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
376a0 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
376a4 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
376a8 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
376ac 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
376b0 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
376b4 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
376b8 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
376bc 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
376c0 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
376c4 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
376c8 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
376cc 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
376d0 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
376d4 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
376d8 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
376dc 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
376e0 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
376e4 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
376e8 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
376ec 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
376f0 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
376f4 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
376f8 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
376fc 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
37700 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
37704 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
37708 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3770c 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
37710 335 DF B7 03 A6 |             if_z            mov     addr2, link
37714 336 34 FF 9F AD |             if_z            jmp     #checknext
37718 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3771c 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
37720 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
37724 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
37728 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3772c 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
37730 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
37734 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
37738 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3773c 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
37740 341             | 
37740 341             | '..................................................................................................
37740 341             | ' PSRAM WRITES
37740 341             |                                                             '  a b c d e f g h
37740 341             | 
37740 341             |                                                             '  B W L F B R L L (a) byte write(s)
37740 341             |                                                             '  Y O O I U E O O (b) word write(s)
37740 341             |                                                             '  T R N L R S C C (c) long write(s)
37740 341             |                                                             '  E D G L S U K K (d) resumed fill
37740 341             |                                                             '          T M E E (e) new burst write
37740 341             |                                                             '            E D D (f) resumed burst
37740 341             |                                                             '              F B (g) locked fill
37740 341             |                                                             '              I U (h) locked burst write
37740 341             |                                                             '              L R 
37740 341             |                                                             '              L S 
37740 341             |                                                             '                T 
37740 341             | 
37740 341             | w_single                   
37740 341             | w_fill_cont           
37740 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
37744 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
37748 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3774c 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
37750 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
37754 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
37758 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3775c 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
37760 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
37764 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
37768 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3776c 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
37770 34d             |                ' disable call to r_resume_burst for single longs when z=0
37770 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
37774 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
37778 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3777c 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
37780 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
37784 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
37788 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3778c 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
37790 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
37794 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
37798 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
3779c 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
377a0 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
377a4 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
377a8 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
377ac 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
377b0 35d             |         
377b0 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
377b0 35d             |             '
377b0 35d             |             '  At least one of these 3 optional components will be sent
377b0 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
377b0 35d             |             '     body - N x full longs of data
377b0 35d             |             '     trailer - last partial long of data
377b0 35d             |             '
377b0 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
377b0 35d             |             '
377b0 35d             |             'Case    Type                           Sends
377b0 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
377b0 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
377b0 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
377b0 35d             |             ' 4)     Multiple long fill             body only
377b0 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
377b0 35d             | 
377b0 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
377b0 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
377b4 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
377b8 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
377bc 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
377c0 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
377c4 362 13 8C 07 F6 |                             mov     pattern3, #%10011
377c8 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
377cc 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
377d0 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
377d4 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
377d8 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
377dc 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
377e0 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
377e4 36a             |                             
377e4 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
377e8 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
377ec 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
377f0 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
377f4 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
377f8 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
377fc 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
37800 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
37804 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
37808 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
3780c 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
37810 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
37814 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
37818 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
3781c 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
37820 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
37824 37a             | 
37824 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
37828 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
3782c 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
37830 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
37834 37e             |                  
37834 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
37838 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
3783c 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
37840 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
37844 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
37848 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3784c 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
37850 385             | 
37850 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
37854 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
37858 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3785c 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
37860 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
37864 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
37868 38b             | 
37868 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
37868 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3786c 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
37870 38d 2A B0 63 FD |                             push    addr1                   'save address
37874 38e             | 
37874 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
37874 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
37878 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
3787c 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
37880 391             |             
37880 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
37884 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
37888 393 2B B0 63 FD |                             pop     addr1                   'restore address
3788c 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
37890 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
37894 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
37898 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
3789c 398             | 
3789c 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
378a0 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
378a4 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
378a8 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
378ac 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
378b0 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
378b4 39e             | 
378b4 39e             |                             'trailer is done
378b4 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
378b8 39f             | 
378b8 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
378bc 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
378c0 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
378c4 3a2             | 
378c4 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
378c8 3a3 69 C8 63 FD |                             rev     cmdaddr                 
378cc 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
378d0 3a5 61 C8 63 FD |                             mergeb  cmdaddr
378d4 3a6             |                             
378d4 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
378d8 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
378dc 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
378e0 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
378e4 3aa             |                                                          
378e4 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
378e8 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
378ec 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
378f0 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
378f4 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
378f8 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
378fc 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
37900 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
37904 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
37908 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
3790c 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
37910 3b5             |  
37910 3b5 59 52 63 FD |                             drvh    cspin
37914 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
37918 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
3791c 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
37920 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
37924 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
37928 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3792c 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
37930 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
37934 3be EA E5 03 F6 |                             mov     d, orighubsize
37938 3bf EF E5 63 F0 |                             shl     d, a
3793c 3c0 F2 E3 83 F1 |                             sub     c, d
37940 3c1 DD E3 03 F1 |                             add     c, offset1
37944 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
37948 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3794c 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
37950 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
37954 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
37958 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3795c 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
37960 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
37964 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
37968 3cb BB D3 03 F6 |                             mov     resume, restorefill
3796c 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
37970 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
37974 3ce 6C FC BF CD |             if_c            call    #yield
37978 3cf 2D 00 64 FD |                             ret
3797c 3d0             |                            
3797c 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
3797c 3d0             |                       '     rczl    pa                      'rotate left into address offset
3797c 3d0             |                       '     rczl    c wcz                   'restore count and flags
3797c 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
37980 3d1 02 EC 67 F0 |                             shl     pa, #2
37984 3d2 28 06 64 AD |             if_z            setq    #3
37988 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
3798c 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
37990 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
37994 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
37998 3d7             | 
37998 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
3799c 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
379a0 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
379a4 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
379a8 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
379ac 3dc             |                 fit 1024-32
379ac 3dc             |         
379ac 3dc             | 
379ac 3dc             | '..................................................................................................
379ac 3dc             | 
379ac 3dc             |                 fit 1024-32
379ac 3dc 00 00 00 00 
379b0 3dd 00 00 00 00 
379b4 3de 00 00 00 00 
379b8 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
379bc 3e0             |                 org 1024-32
379bc 000             | 
379bc 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
379bc 000 00 00 00 00 |                 long $0000
379c0 001 11 11 00 00 |                 long $1111
379c4 002 22 22 00 00 |                 long $2222
379c8 003 33 33 00 00 |                 long $3333
379cc 004 44 44 00 00 |                 long $4444
379d0 005 55 55 00 00 |                 long $5555
379d4 006 66 66 00 00 |                 long $6666
379d8 007 77 77 00 00 |                 long $7777
379dc 008 88 88 00 00 |                 long $8888
379e0 009 99 99 00 00 |                 long $9999
379e4 00a AA AA 00 00 |                 long $aaaa
379e8 00b BB BB 00 00 |                 long $bbbb
379ec 00c CC CC 00 00 |                 long $cccc
379f0 00d DD DD 00 00 |                 long $dddd
379f4 00e EE EE 00 00 |                 long $eeee
379f8 00f FF FF 00 00 |                 long $ffff
379fc 010             | 
379fc 010             | 'masks
379fc 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
37a00 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
37a04 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
37a08 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
37a0c 014             | 
37a0c 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
37a10 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
37a14 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
37a18 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
37a1c 018             | 
37a1c 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
37a20 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
37a24 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
37a28 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
37a2c 01c             | 
37a2c 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
37a30 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
37a34 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
37a38 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
37a3c 020             |         fit 1024
37a3c 020             | 
37a3c 020             |         fit 1024
37a3c 020             | 
37a3c 020             | '--------------------------------------------------------------------------------------------------
37a3c 020             |         orgh
37a3c                 | 
37a3c                 | gfxexpansion
37a3c                 |                             'simple line drawing graphics expansion of memory driver
37a3c                 |                             'jmp     #donerepeats                'just return for now
37a3c                 | 
37a3c     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
37a40     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
37a44     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
37a48     DD E1 03 F6 |                             mov     b, offset1              'get error term
37a4c     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
37a50     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
37a54     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
37a58     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
37a5c     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
37a60     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
37a64     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
37a68     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
37a6c     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
37a70     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
37a74     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
37a78     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
37a7c     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
37a80     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
37a84     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
37a88     DC E5 33 F9 |                             getword d, total, #0            'get line width
37a8c     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
37a90     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
37a94     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
37a98     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
37a9c     C3 03 80 FD |                             jmp     #readmask               'continue filling
37aa0                 | 	alignl
37aa0                 | _usbnew_spin2_dat_
37aa0                 |                 org     $000
37aa0 000             | 
37aa0 000             | usb_host_start
37aa0 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
37aa4 001             | 
37aa4 001 03 00 00 FF 
37aa8 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
37aac 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
37ab0 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
37ab4 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
37ab8 006 29 70 63 FD |                 setq2   htmp
37abc 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
37ac0 008             | 
37ac0 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
37ac4 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
37ac8 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
37acc 00b             | 
37acc 00b             | '------------------------------------------------------------------------------
37acc 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
37acc 00b             | ' special because the receiving function must not respond with either STALL or
37acc 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
37acc 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
37acc 00b             | ' corrupt packet, it must ignore the transaction
37acc 00b             | '------------------------------------------------------------------------------
37acc 00b             | ' On entry:
37acc 00b             | '   PTRA - start address of the SETUP data struct.
37acc 00b             | ' On exit:
37acc 00b             | '   retval - PID_ACK on success, otherwise error code.
37acc 00b             | '------------------------------------------------------------------------------
37acc 00b             | txn_setup
37acc 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
37ad0 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
37ad4 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
37ad8 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
37adc 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
37ae0 010             | .setup
37ae0 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
37ae4 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37ae8 012 2D 00 64 AD |         if_z    ret
37aec 013 7C 0B B0 FD |                 call    #retry_wait
37af0 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
37af4 015 2D 00 64 AD |         if_z    ret
37af8 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
37afc 017 E0 FF 9F FD |                 jmp     #.setup
37b00 018             | 
37b00 018             | '------------------------------------------------------------------------------
37b00 018             | ' IN/INTERRUPT transaction.
37b00 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
37b00 018             | '------------------------------------------------------------------------------
37b00 018             | ' On entry:
37b00 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
37b00 018             | '     CRC(b19..23).
37b00 018             | ' On exit:
37b00 018             | '------------------------------------------------------------------------------
37b00 018             | txn_in
37b00 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
37b04 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
37b08 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
37b0c 01b             | 
37b0c 01b             |                 ' Fall through to urx_packet
37b0c 01b             | 
37b0c 01b             | '------------------------------------------------------------------------------
37b0c 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
37b0c 01b             | ' received are handshakes and IN DATAx.
37b0c 01b             | '------------------------------------------------------------------------------
37b0c 01b             | ' On entry:
37b0c 01b             | ' On exit:
37b0c 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
37b0c 01b             | '     returned.
37b0c 01b             | '------------------------------------------------------------------------------
37b0c 01b             | urx_packet
37b0c 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
37b10 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37b14 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
37b18 01e 1A 92 63 FD |                 getct   hct2
37b1c 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
37b20 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
37b24 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
37b28 022             | .wait_sop
37b28 022 22 A7 8A FA |                 rdpin   urx, dm
37b2c 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37b30 024 08 00 90 CD |         if_c    jmp     #.get_pid
37b34 025 FC 25 CC FB |                 jnct2   #.wait_sop
37b38 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
37b3c 027             | .get_pid
37b3c 027 28 02 B0 FD |                 call    #urx_next
37b40 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
37b44 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
37b48 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
37b4c 02b             | .chk_pid
37b4c 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37b50 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
37b54 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
37b58 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
37b5c 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
37b60 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
37b64 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
37b68 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
37b6c 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
37b70 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
37b74 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
37b78 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
37b7c 037             | .ack_resend
37b7c 037 22 A7 82 FA |                 rqpin   urx, dm
37b80 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
37b84 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
37b88 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
37b8c 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
37b90 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
37b94 03d             | .chk_eop
37b94 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37b98 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
37b9c 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
37ba0 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
37ba4 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
37ba8 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
37bac 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
37bb0 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
37bb4 045 2D 00 64 FD |                 ret
37bb8 046             | .idle
37bb8 046 22 A7 82 FA |                 rqpin   urx, dm
37bbc 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37bc0 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
37bc4 049 2D 00 64 FD |                 ret
37bc8 04a             | 
37bc8 04a             | '------------------------------------------------------------------------------
37bc8 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
37bc8 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
37bc8 04a             | ' if one is required.
37bc8 04a             | '------------------------------------------------------------------------------
37bc8 04a             | ' On entry:
37bc8 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
37bc8 04a             | ' On exit:
37bc8 04a             | '------------------------------------------------------------------------------
37bc8 04a             | utx_token
37bc8 04a 22 A7 82 FA |                 rqpin   urx, dm
37bcc 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37bd0 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
37bd4 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
37bd8 04e 34 0D B0 CD |         if_c    call    #utx_pre
37bdc 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
37be0 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
37be4 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
37be8 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
37bec 053             | .next_byte
37bec 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
37bf0 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
37bf4 055             | .wait
37bf4 055 40 46 72 FD |                 testp   dp                      wc
37bf8 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
37bfc 057 23 03 08 FC |                 akpin   dp
37c00 058 22 A5 22 FC |                 wypin   utx, dm
37c04 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
37c08 05a             | 
37c08 05a             | '------------------------------------------------------------------------------
37c08 05a             | ' SETUP/OUT/INTERRUPT transaction.
37c08 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
37c08 05a             | '------------------------------------------------------------------------------
37c08 05a             | ' On entry:
37c08 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
37c08 05a             | '     CRC(b19..23).
37c08 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
37c08 05a             | '   pkt_data - count of DATAx payload bytes to send.
37c08 05a             | ' On exit:
37c08 05a             | '------------------------------------------------------------------------------
37c08 05a             | txn_out
37c08 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
37c0c 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
37c10 05c 00 00 C0 FF 
37c14 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
37c18 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
37c1c 05f             | 
37c1c 05f             |                 ' Fall through to utx_data
37c1c 05f             | 
37c1c 05f             | '------------------------------------------------------------------------------
37c1c 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
37c1c 05f             | ' calculated while the data byte is being shifted out. Since data stage
37c1c 05f             | ' success/fail is not determined until the status stage of the transaction,
37c1c 05f             | ' this routine is only concerned about the current DATAx packet.
37c1c 05f             | '------------------------------------------------------------------------------
37c1c 05f             | ' On entry:
37c1c 05f             | '   PTRA - hub start address of the data to read.
37c1c 05f             | '   pkt_cnt - data payload size.
37c1c 05f             | ' On exit:
37c1c 05f             | '------------------------------------------------------------------------------
37c1c 05f             | utx_data
37c1c 05f 22 A7 82 FA |                 rqpin   urx, dm
37c20 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37c24 061 F4 FF 9F CD |         if_c    jmp     #utx_data
37c28 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
37c2c 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
37c30 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
37c34 065 D8 0C B0 CD |         if_c    call    #utx_pre
37c38 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
37c3c 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
37c40 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
37c44 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
37c48 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
37c4c 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
37c50 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
37c54 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
37c58 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
37c5c 06f             | .read_byte
37c5c 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
37c60 070 F0 00 B0 FD |                 call    #utx_byte
37c64 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
37c68 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
37c6c 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
37c70 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
37c74 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
37c78 076             | .send_crc
37c78 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
37c7c 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
37c80 078 D0 00 B0 FD |                 call    #utx_byte
37c84 079 5D A5 EA F8 |                 getbyte utx, crc, #1
37c88 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
37c8c 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
37c90 07c             | 
37c90 07c             | '------------------------------------------------------------------------------
37c90 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
37c90 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
37c90 07c             | ' expects that the packet includes at least the CRC word.
37c90 07c             | '
37c90 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
37c90 07c             | ' was requested, which makes it difficult to determine where the data stops
37c90 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
37c90 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
37c90 07c             | ' USB-16 expected residual value of 0xB001.
37c90 07c             | '
37c90 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
37c90 07c             | ' so the caller can verify IN success before writing the data to its final
37c90 07c             | ' destination.
37c90 07c             | '------------------------------------------------------------------------------
37c90 07c             | ' On entry:
37c90 07c             | '   pkt_data - max byte count expected to be in the packet.
37c90 07c             | '   newb_flg - signals new byte ready when toggled.
37c90 07c             | ' On exit:
37c90 07c             | '   pkt_cnt - actual number of bytes read.
37c90 07c             | '------------------------------------------------------------------------------
37c90 07c             | urx_data
37c90 07c F7 75 03 F6 |                 mov     htmp2, pb
37c94 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
37c98 07e 00 00 C0 FF 
37c9c 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
37ca0 080 BA EF 03 F6 |                 mov     pb, htmp2
37ca4 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
37ca8 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
37cac 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
37cb0 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
37cb4 085             | .wait_byte
37cb4 085             | ' In-line rx for max speed
37cb4 085 22 A7 82 FA |                 rqpin   urx, dm
37cb8 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
37cbc 087 53 A5 02 F5 |                 and     utx, urx
37cc0 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
37cc4 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
37cc8 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
37ccc 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
37cd0 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
37cd4 08d DC FF 9F FD |                 jmp     #.wait_byte
37cd8 08e             | .get_byte
37cd8 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
37cdc 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
37ce0 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
37ce4 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
37ce8 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
37cec 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
37cf0 094             | .end_crc
37cf0 094 01 B8 06 F1 |                 add     pkt_cnt, #1
37cf4 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
37cf8 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
37cfc 097 2D 00 64 1D |         if_a    ret
37d00 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
37d00 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
37d00 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
37d00 098             | ' to miss it, so cheat a bit and look for SOP clear here.
37d00 098 22 A7 82 FA |                 rqpin   urx, dm
37d04 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
37d08 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
37d0c 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
37d0c 09b             | .chk_crc
37d0c 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
37d10 09c 58 00 00 FF 
37d14 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
37d18 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
37d1c 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
37d20 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
37d24 0a1 34 09 B0 FD |                 call    #poll_waitx
37d28 0a2             | 
37d28 0a2             |                 ' Fall through to utx_handshake
37d28 0a2             | 
37d28 0a2             | '------------------------------------------------------------------------------
37d28 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
37d28 0a2             | ' the appropriate IP delay has been inserted.
37d28 0a2             | '------------------------------------------------------------------------------
37d28 0a2             | ' On entry:
37d28 0a2             | '   retval - handshake PID to send.
37d28 0a2             | ' On exit:
37d28 0a2             | '   retval unchanged.
37d28 0a2             | '------------------------------------------------------------------------------
37d28 0a2             | utx_handshake
37d28 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
37d2c 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
37d30 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
37d34 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
37d38 0a6 5F A5 02 F6 |                 mov     utx, retval
37d3c 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
37d40 0a8             | .idle
37d40 0a8 22 A7 82 FA |                 rqpin   urx, dm
37d44 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37d48 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
37d4c 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
37d50 0ac 08 09 90 FD |                 jmp     #poll_waitx
37d54 0ad             | 
37d54 0ad             | '------------------------------------------------------------------------------
37d54 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
37d54 0ad             | '------------------------------------------------------------------------------
37d54 0ad             | ' On entry:
37d54 0ad             | '   utx - byte to transmit.
37d54 0ad             | ' On exit:
37d54 0ad             | '------------------------------------------------------------------------------
37d54 0ad             | utx_byte
37d54 0ad 40 46 72 FD |                 testp   dp                      wc
37d58 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
37d5c 0af 23 03 08 FC |                 akpin   dp
37d60 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
37d64 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
37d68 0b2             | 
37d68 0b2             | '------------------------------------------------------------------------------
37d68 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
37d68 0b2             | '------------------------------------------------------------------------------
37d68 0b2             | ' On entry:
37d68 0b2             | ' On exit:
37d68 0b2             | '   retval - the byte read.
37d68 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
37d68 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
37d68 0b2             | '     received.
37d68 0b2             | '------------------------------------------------------------------------------
37d68 0b2             | urx_next
37d68 0b2 22 A7 8A FA |                 rdpin   urx, dm
37d6c 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
37d70 0b4 53 A5 02 F5 |                 and     utx, urx
37d74 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
37d78 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
37d7c 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
37d80 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
37d84 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37d88 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
37d8c 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
37d90 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
37d94 0bd 2D 00 64 FD |                 ret
37d98 0be             | 
37d98 0be             | '------------------------------------------------------------------------------
37d98 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
37d98 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
37d98 0be             | ' length, and the PID is not included in the CRC calculation:
37d98 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
37d98 0be             | '  CRC5  ENDP ADDRESS PID
37d98 0be             | ' %00000_1111_1111111_xxxxxxxx
37d98 0be             | '------------------------------------------------------------------------------
37d98 0be             | ' On entry:
37d98 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
37d98 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
37d98 0be             | ' On exit:
37d98 0be             | '   ep_addr_pid - CRC value appended to the packet.
37d98 0be             | '------------------------------------------------------------------------------
37d98 0be             | calc_crc5
37d98 0be FF 03 00 FF 
37d9c 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
37da0 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
37da4 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
37da8 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
37dac 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
37db0 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
37db4 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
37db8 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
37dbc 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
37dc0 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
37dc4 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
37dc8 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
37dcc 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
37dd0 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
37dd4 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
37dd8 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
37ddc 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
37de0 0d0             | 
37de0 0d0             | '------------------------------------------------------------------------------
37de0 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
37de0 0d0             | '------------------------------------------------------------------------------
37de0 0d0             | isr1_fsframe
37de0 0d0 1A 92 62 FD |                 getct   iframe_ct_base
37de4 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37de8 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37dec 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
37df0 0d4             | .wait
37df0 0d4 40 46 72 FD |                 testp   dp                      wc
37df4 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
37df8 0d6 23 03 08 FC |                 akpin   dp
37dfc 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
37e00 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
37e04 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
37e08 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
37e0c 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
37e10 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
37e14 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
37e18 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
37e1c 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
37e20 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
37e24 0e1 2C FF BF FD |                 call    #utx_byte
37e28 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
37e2c 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
37e30 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
37e34 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
37e38 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
37e3c 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
37e40 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
37e44 0e9 5B A5 42 F5 |                 or      utx, icrc
37e48 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
37e4c 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
37e50 0ec 20 00 90 FD |                 jmp     #isr1_wait
37e54 0ed             | isr1_lsframe
37e54 0ed 1A 92 62 FD |                 getct   iframe_ct_base
37e58 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37e5c 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37e60 0f0             | .wait
37e60 0f0 40 46 72 FD |                 testp   dp                      wc
37e64 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
37e68 0f2 23 03 08 FC |                 akpin   dp
37e6c 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
37e70 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
37e74 0f5             | isr1_wait
37e74 0f5 22 A5 82 FA |                 rqpin   utx, dm
37e78 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
37e7c 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
37e80 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
37e84 0f9 03 00 00 FF 
37e88 0fa FF B3 06 F5 |                 and     frame, ##$7ff
37e8c 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
37e90 0fc F5 FF 3B FB |                 reti1
37e94 0fd             | 
37e94 0fd             | '------------------------------------------------------------------------------
37e94 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
37e94 0fd             | ' transaction will complete before the next frame is triggered.
37e94 0fd             | '------------------------------------------------------------------------------
37e94 0fd             | ' On entry:
37e94 0fd             | ' On exit:
37e94 0fd             | '------------------------------------------------------------------------------
37e94 0fd             | wait_txn_ok
37e94 0fd 1A 74 63 FD |                 getct   htmp2
37e98 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
37e9c 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37ea0 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
37ea4 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
37ea8 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
37eac 103 2D 00 64 FD |                 ret
37eb0 104             | 
37eb0 104             | '------------------------------------------------------------------------------
37eb0 104             | ' A device connection was detected, or a bus reset was requested by the USB
37eb0 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
37eb0 104             | ' and perform a reset sequence prior to device enumeration.
37eb0 104             | '------------------------------------------------------------------------------
37eb0 104             | dev_reset
37eb0 104 22 A7 82 FA |                 rqpin   urx, dm
37eb4 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
37eb8 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
37ebc 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
37ec0 108             | reset
37ec0 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
37ec4 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
37ec8 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
37ecc 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
37ed0 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
37ed4 10d 1A 92 62 FD |                 getct   iframe_ct_base
37ed8 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37edc 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37ee0 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
37ee4 111 24 70 07 F1 |                 add     htmp, #36
37ee8 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
37eec 113             | .framewait
37eec 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
37ef0 114 F8 FF 9F CD |         if_b    jmp     #.framewait
37ef4 115 2D 00 64 FD |                 ret
37ef8 116             | 
37ef8 116             | '------------------------------------------------------------------------------
37ef8 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
37ef8 116             | '------------------------------------------------------------------------------
37ef8 116             | ' On entry:
37ef8 116             | '   PTRA - source address.
37ef8 116             | '   PB - destination address.
37ef8 116             | '   hr0 - length of copy, in bytes.
37ef8 116             | ' On exit:
37ef8 116             | '------------------------------------------------------------------------------
37ef8 116             | hmemcpy
37ef8 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
37efc 117 F7 71 43 FC |                 wrbyte  htmp, pb
37f00 118 01 EE 07 F1 |                 add     pb, #1
37f04 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
37f08 11a             | 
37f08 11a             | '------------------------------------------------------------------------------
37f08 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
37f08 11a             | ' loop until the errant device is disconnected.
37f08 11a             | '------------------------------------------------------------------------------
37f08 11a             | ' On entry:
37f08 11a             | ' On exit:
37f08 11a             | '------------------------------------------------------------------------------
37f08 11a             | host_error
37f08 11a             |           if ERROR_LED >= 0
37f08 11a             |           end
37f08 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
37f0c 11b             | 
37f0c 11b             | '------------------------------------------------------------------------------
37f0c 11b             | ' Get HID descriptor buffer for current port
37f0c 11b             | '------------------------------------------------------------------------------
37f0c 11b             | ' On entry:
37f0c 11b             | ' On exit:
37f0c 11b             | '   PB - HID descriptor buffer pointer
37f0c 11b             | '------------------------------------------------------------------------------
37f0c 11b             | get_hid_descr_buffer
37f0c 11b 2D EF 03 F6 |                 mov     pb, hdev_port
37f10 11c 01 EE E7 F2 |                 cmpsub  pb, #1
37f14 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
37f18 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
37f1c 11f             | 
37f1c 11f             | 
37f1c 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
37f20 120             | 
37f20 120             | ' USB commands and error codes
37f20 120 00 00 00 00 | cmd_data        long    0
37f24 121 00 00 00 00 | usb_err_code    long    ERR_NONE
37f28 122             | 
37f28 122             | ' Parameters block assigned at cog startup
37f28 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
37f2c 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
37f30 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
37f34 125             | if ACTIVITY_LED >= 0
37f34 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
37f34 125             | end
37f34 125             | if ERROR_LED >= 0
37f34 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
37f34 125             | end
37f34 125 00 00 00 00 | hid_descr_p     long    0
37f38 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
37f38 126             | 'hkbd_report_p   long    0
37f38 126 00 00 00 00 | hub_descr_p     long    0
37f3c 127 00 00 00 00 | urx_buff_p      long    0
37f40 128 00 00 00 00 | dev_desc_buff_p long    0
37f44 129 00 00 00 00 | con_desc_buff_p long    0
37f48 12a 00 00 00 00 | cache_start_p   long    0
37f4c 12b 00 00 00 00 | cache_end_p     long    0
37f50 12c             | if EMUPAD_MAX_PLAYER > 0
37f50 12c             | emupad_out_ptr  long    0
37f50 12c             | end
37f50 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
37f54 12d             | 
37f54 12d             | hdev_init_start
37f54 12d             | hdev_port       res     1
37f54 12d             | hdev_port       res     1
37f54 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
37f54 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
37f54 12d             | kbm_next_datax  res     1
37f54 12d             | kbm_next_datax  res     1
37f54 12d             | hub_intf_num    res     1
37f54 12d             | hub_intf_num    res     1
37f54 12d             | hub_next_datax  res     1
37f54 12d             | hub_next_datax  res     1
37f54 12d             | hub_status_chg  res     1
37f54 12d             | hub_status_chg  res     1
37f54 12d             | hub_port_status res     1
37f54 12d             | hub_port_status res     1
37f54 12d             | if HAVE_MOUSE
37f54 12d             | ms_intf_num     res     1
37f54 12d             | ms_intf_num     res     1
37f54 12d             | ms_in_max_pkt   res     1
37f54 12d             | ms_in_max_pkt   res     1
37f54 12d             | end
37f54 12d             | kb_intf_num     res     1
37f54 12d             | kb_intf_num     res     1
37f54 12d             | kb_interval     res     1
37f54 12d             | kb_interval     res     1
37f54 12d             | kb_in_max_pkt   res     1
37f54 12d             | kb_in_max_pkt   res     1
37f54 12d             | kb_max_index    res     1
37f54 12d             | kb_max_index    res     1
37f54 12d             | kb_led_states   res     1
37f54 12d             | kb_led_states   res     1
37f54 12d             | gp_intf_num     res     1
37f54 12d             | gp_intf_num     res     1
37f54 12d             | gp_interval     res     1
37f54 12d             | gp_interval     res     1
37f54 12d             | gp_max_index    res     1
37f54 12d             | gp_max_index    res     1
37f54 12d             | gp_descr_len    res     1+MAX_DEVICES
37f54 12d             | gp_descr_len    res     1+MAX_DEVICES
37f54 12d             | hdev_init_end
37f54 12d             | 
37f54 12d             | ' Initialized at cog startup:
37f54 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
37f54 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
37f54 12d             | iframe_ct_new   res     1
37f54 12d             | iframe_ct_new   res     1
37f54 12d             | iframe_ct_base  res     1
37f54 12d             | iframe_ct_base  res     1
37f54 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
37f54 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
37f54 12d             | 
37f54 12d             | ' This register block is reset to zero when a USB device connects
37f54 12d             | hreg_init_start
37f54 12d             | hstatus         res     1         ' Host status flags
37f54 12d             | hstatus         res     1         ' Host status flags
37f54 12d             | hctwait         res     1         ' Poll-based wait clocks
37f54 12d             | hctwait         res     1         ' Poll-based wait clocks
37f54 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
37f54 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
37f54 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
37f54 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
37f54 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
37f54 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
37f54 12d             | xfer_retry      res     1         ' Control transfer retry count
37f54 12d             | xfer_retry      res     1         ' Control transfer retry count
37f54 12d             | retry           res     1         ' Transaction retry count
37f54 12d             | retry           res     1         ' Transaction retry count
37f54 12d             | utx             res     1         ' Byte to transmit on USB
37f54 12d             | utx             res     1         ' Byte to transmit on USB
37f54 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
37f54 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
37f54 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
37f54 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
37f54 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
37f54 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
37f54 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
37f54 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
37f54 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
37f54 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
37f54 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
37f54 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
37f54 12d             | frame           res     1         ' USB 1ms frame counter value
37f54 12d             | frame           res     1         ' USB 1ms frame counter value
37f54 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
37f54 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
37f54 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
37f54 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
37f54 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
37f54 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
37f54 12d             | crc             res     1         ' Used for CRC16 calculation
37f54 12d             | crc             res     1         ' Used for CRC16 calculation
37f54 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
37f54 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
37f54 12d             | retval          res     1         ' Global success/fail return parameter
37f54 12d             | retval          res     1         ' Global success/fail return parameter
37f54 12d             | context_retval  res     1         ' Operation contextual return parameter
37f54 12d             | context_retval  res     1         ' Operation contextual return parameter
37f54 12d             | ' Device stuff
37f54 12d             | hdev_id         res     1+MAX_DEVICES
37f54 12d             | hdev_id         res     1+MAX_DEVICES
37f54 12d             | hdev_bcd        res     1
37f54 12d             | hdev_bcd        res     1
37f54 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
37f54 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
37f54 12d             | ' Keyboard/mouse stuff
37f54 12d             | hctrl_ep_addr   res     1
37f54 12d             | hctrl_ep_addr   res     1
37f54 12d             | hctrl_max_pkt   res     1
37f54 12d             | hctrl_max_pkt   res     1
37f54 12d             | hconfig_base    res     1
37f54 12d             | hconfig_base    res     1
37f54 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
37f54 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
37f54 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
37f54 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
37f54 12d             | hdev_class      res     1
37f54 12d             | hdev_class      res     1
37f54 12d             | hdev_subclass   res     1
37f54 12d             | hdev_subclass   res     1
37f54 12d             | hdev_protocol   res     1
37f54 12d             | hdev_protocol   res     1
37f54 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
37f54 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
37f54 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
37f54 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
37f54 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
37f54 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
37f54 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
37f54 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
37f54 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
37f54 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
37f54 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
37f54 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
37f54 12d             | if HAVE_MOUSE
37f54 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
37f54 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
37f54 12d             | end
37f54 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
37f54 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
37f54 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
37f54 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
37f54 12d             | hdev_ep_addr    res     1+MAX_DEVICES
37f54 12d             | hdev_ep_addr    res     1+MAX_DEVICES
37f54 12d             | hdev_out_addr   res     1
37f54 12d             | hdev_out_addr   res     1
37f54 12d             | 
37f54 12d             | if EMUPAD_MAX_PLAYER > 0
37f54 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
37f54 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
37f54 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
37f54 12d             | end
37f54 12d             | 
37f54 12d             | hreg_init_end
37f54 12d             | 
37f54 12d             | hidr_start
37f54 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
37f54 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
37f54 12d             | hidr_flags      res     1
37f54 12d             | hidr_flags      res     1
37f54 12d             | hidr_axis       res     3
37f54 12d             | hidr_axis       res     3
37f54 12d             | hidr_buttons    res     1
37f54 12d             | hidr_buttons    res     1
37f54 12d             | hidr_hats       res     1
37f54 12d             | hidr_hats       res     1
37f54 12d             | '' Above are actually useful values, 6 longs
37f54 12d             | hidr_id         res     1
37f54 12d             | hidr_id         res     1
37f54 12d             | hidr_state      res     1
37f54 12d             | hidr_state      res     1
37f54 12d             | hidr_size       res     1
37f54 12d             | hidr_size       res     1
37f54 12d             | hidr_count      res     1
37f54 12d             | hidr_count      res     1
37f54 12d             | hidr_offset     res     1
37f54 12d             | hidr_offset     res     1
37f54 12d             | hidr_usage_idx  res     1
37f54 12d             | hidr_usage_idx  res     1
37f54 12d             | hidr_lminmax    res     1
37f54 12d             | hidr_lminmax    res     1
37f54 12d             | hidr_pminmax    res     1
37f54 12d             | hidr_pminmax    res     1
37f54 12d             | hidr_type       res     1
37f54 12d             | hidr_type       res     1
37f54 12d             | hidr_end
37f54 12d             | 
37f54 12d             | ' Variables dependent on the system freqency
37f54 12d             | _var_64_lower_  res     1
37f54 12d             | _var_64_lower_  res     1
37f54 12d             | _var_64_upper_  res     1
37f54 12d             | _var_64_upper_  res     1
37f54 12d             | _12Mbps_        res     1
37f54 12d             | _12Mbps_        res     1
37f54 12d             | _1_5Mbps_       res     1
37f54 12d             | _1_5Mbps_       res     1
37f54 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
37f54 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
37f54 12d             | _1us_           res     1         ' 1us
37f54 12d             | _1us_           res     1         ' 1us
37f54 12d             | _10us_          res     1         ' 10us
37f54 12d             | _10us_          res     1         ' 10us
37f54 12d             | _33us_          res     1         ' 33us
37f54 12d             | _33us_          res     1         ' 33us
37f54 12d             | _txn_err_       res     1         ' 250us
37f54 12d             | _txn_err_       res     1         ' 250us
37f54 12d             | _500us_         res     1         ' 500us
37f54 12d             | _500us_         res     1         ' 500us
37f54 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
37f54 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
37f54 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
37f54 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
37f54 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
37f54 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
37f54 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
37f54 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
37f54 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
37f54 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
37f54 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
37f54 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
37f54 12d             | _preamble_wait_ res     1
37f54 12d             | _preamble_wait_ res     1
37f54 12d             | _1ms_           res     1         ' 1ms
37f54 12d             | _1ms_           res     1         ' 1ms
37f54 12d             | _2ms_           res     1         ' 2ms
37f54 12d             | _2ms_           res     1         ' 2ms
37f54 12d             | _suspend_wait_  res     1         ' 3ms
37f54 12d             | _suspend_wait_  res     1         ' 3ms
37f54 12d             | _4ms_           res     1         ' 4ms
37f54 12d             | _4ms_           res     1         ' 4ms
37f54 12d             | _xfer_wait_     res     1         ' 5ms
37f54 12d             | _xfer_wait_     res     1         ' 5ms
37f54 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
37f54 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
37f54 12d             | _reset_hold_    res     1         ' 15ms
37f54 12d             | _reset_hold_    res     1         ' 15ms
37f54 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
37f54 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
37f54 12d             | _21ms_          res     1         ' 21ms
37f54 12d             | _21ms_          res     1         ' 21ms
37f54 12d             | _100ms_         res     1         ' 100ms
37f54 12d             | _100ms_         res     1         ' 100ms
37f54 12d             | _500ms_         res     1         ' 500ms
37f54 12d             | _500ms_         res     1         ' 500ms
37f54 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
37f54 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
37f54 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
37f54 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
37f54 12d             | '------------------------------------------------------------------------------
37f54 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
37f54 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
37f54 12d             | _usb_d_ls_nco_  res     1
37f54 12d             | _usb_d_ls_nco_  res     1
37f54 12d             | _usb_h_fs_nco_  res     1
37f54 12d             | _usb_h_fs_nco_  res     1
37f54 12d             | _usb_d_fs_nco_  res     1
37f54 12d             | _usb_d_fs_nco_  res     1
37f54 12d             | '------------------------------------------------------------------------------
37f54 12d             | ' Scratch registers
37f54 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
37f54 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
37f54 12d             | htmp1           res     1
37f54 12d             | htmp1           res     1
37f54 12d             | htmp2           res     1
37f54 12d             | htmp2           res     1
37f54 12d             | htmp3           res     1
37f54 12d             | htmp3           res     1
37f54 12d             | hrep            res     1         ' Repeat count
37f54 12d             | hrep            res     1         ' Repeat count
37f54 12d             | hsave0          res     1         ' Subroutine parameter saves
37f54 12d             | hsave0          res     1         ' Subroutine parameter saves
37f54 12d             | hsave1          res     1
37f54 12d             | hsave1          res     1
37f54 12d             | hsave2          res     1
37f54 12d             | hsave2          res     1
37f54 12d             | isrtmp1         res     1
37f54 12d             | isrtmp1         res     1
37f54 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
37f54 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
37f54 12d             | hr0             res     1         ' Multi-purpose registers
37f54 12d             | hr0             res     1         ' Multi-purpose registers
37f54 12d             | hr1             res     1
37f54 12d             | hr1             res     1
37f54 12d             | hr2             res     1
37f54 12d             | hr2             res     1
37f54 12d             | hr3             res     1
37f54 12d             | hr3             res     1
37f54 12d             | hpar1           res     1         ' Routine entry/exit parameters
37f54 12d             | hpar1           res     1         ' Routine entry/exit parameters
37f54 12d             | hpar2           res     1
37f54 12d             | hpar2           res     1
37f54 12d             | hpar3           res     1
37f54 12d             | hpar3           res     1
37f54 12d             | hct2            res     1         ' Function response bus turn-around timer
37f54 12d             | hct2            res     1         ' Function response bus turn-around timer
37f54 12d             | hct3            res     1         ' Keyboard/mouse poll timer
37f54 12d             | hct3            res     1         ' Keyboard/mouse poll timer
37f54 12d             | mod_cnt         res     1         ' Used in idle loops
37f54 12d             | mod_cnt         res     1         ' Used in idle loops
37f54 12d             |                 fit     $1F0
37f54 12d             |                 org     $200
37f54 200             | hlut_start
37f54 200             | 
37f54 200             | '------------------------------------------------------------------------------
37f54 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
37f54 200             | ' settings to startup defaults.
37f54 200             | '------------------------------------------------------------------------------
37f54 200             | ' On entry:
37f54 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
37f54 200             | '------------------------------------------------------------------------------
37f54 200             | set_speed_full
37f54 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
37f58 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
37f5c 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
37f60 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
37f64 204             | '                ret                             wcz     ' Restore caller flags on exit
37f64 204             | 
37f64 204             | '------------------------------------------------------------------------------
37f64 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
37f64 204             | ' is a downstream hub connected (not yet implemented), the baud generator
37f64 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
37f64 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
37f64 204             | ' putting the smart pins into reset.
37f64 204             | '------------------------------------------------------------------------------
37f64 204             | ' On entry:
37f64 204             | ' On exit: CZ flags restored to caller states
37f64 204             | '------------------------------------------------------------------------------
37f64 204             | set_speed_low
37f64 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
37f68 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
37f6c 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
37f70 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
37f74 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
37f78 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
37f7c 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
37f80 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
37f84 20c             | 
37f84 20c             | '------------------------------------------------------------------------------
37f84 20c             | ' Perform configuration stuff required when a device intitially connects.
37f84 20c             | '------------------------------------------------------------------------------
37f84 20c             | ' On entry:
37f84 20c             | ' On exit:
37f84 20c             | '------------------------------------------------------------------------------
37f84 20c             | on_connect
37f84 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
37f88 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
37f8c 20e             | .retry
37f8c 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37f90 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
37f94 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
37f98 211 00 08 00 FF 
37f9c 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
37fa0 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
37fa4 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37fa8 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
37fac 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
37fb0 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
37fb4 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37fb8 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
37fbc 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
37fc0 21b 4C 03 B0 FD |                 call    #poll_waitx
37fc4 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
37fc8 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
37fcc 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
37fd0 21f B8 FF 9F FD |                 jmp     #.retry
37fd4 220             | .get_dev_desc
37fd4 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
37fd8 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
37fdc 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
37fe0 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
37fe4 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
37fe8 225 88 FB BF FD |                 call    #reset
37fec 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
37ff0 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37ff4 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
37ff8 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
37ffc 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38000 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
38004 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
38008 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3800c 22e 04 00 00 FF 
38010 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
38014 230 34 FA BF FD |                 call    #calc_crc5
38018 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
3801c 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
38020 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
38024 234 F7 AD C2 FA |                 rdbyte  total_data, pb
38028 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3802c 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
38030 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38034 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
38038 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3803c 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
38040 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
38044 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
38048 23d C4 02 B0 FD |                 call    #poll_waitx
3804c 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
38050 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
38054 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
38058 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3805c 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
38060 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38064 244 2D 00 64 5D |         if_nz   ret
38068 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3806c 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
38070 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
38074 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
38078 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3807c 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
38080 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
38084 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
38088 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3808c 24e 2C FB 9F CD |         if_b    jmp     #host_error
38090 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
38094 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
38098 251 2D EC 63 FD |                 call    pa
3809c 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
380a0 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
380a4 254 2C EC 63 FD |                 jmp     pa
380a8 255             | 
380a8 255             | '------------------------------------------------------------------------------
380a8 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
380a8 255             | ' Status reporting is always in the function-to-host direction.
380a8 255             | '------------------------------------------------------------------------------
380a8 255             | ' On entry:
380a8 255             | '   PTRA - start address of the SETUP data in hub.
380a8 255             | '   PB - start address of the buffer/struct to be written to during the IN data
380a8 255             | '     stage.
380a8 255             | '   ep_addr_pid - device address, endpoint and CRC5.
380a8 255             | ' On exit:
380a8 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
380a8 255             | '     contains the count of data stage bytes actually received, which must
380a8 255             | '     always be <= the count requested.
380a8 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
380a8 255             | '     more specific USB operation error code.
380a8 255             | '------------------------------------------------------------------------------
380a8 255             | control_read
380a8 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
380ac 256 F8 8F 03 F6 |                 mov     hpar2, ptra
380b0 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
380b4 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
380b8 259             | .xfer_start
380b8 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
380bc 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
380c0 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
380c4 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
380c8 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
380cc 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
380d0 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
380d4 260 61 00 00 FF 
380d8 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
380dc 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
380e0 263             | .data
380e0 263 56 B1 02 F6 |                 mov     pkt_data, total_data
380e4 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
380e8 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
380ec 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
380f0 267             | .nak_retry
380f0 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
380f4 268             | .in_retry
380f4 268 BC F6 BF FD |                 call    #txn_in
380f8 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
380fc 26a 28 00 90 AD |         if_z    jmp     #.commit
38100 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
38104 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
38108 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3810c 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
38110 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
38114 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
38118 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3811c 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
38120 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
38124 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
38128 275             | .commit
38128 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
3812c 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
38130 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
38134 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
38138 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
3813c 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
38140 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
38144 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
38148 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
3814c 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
38150 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
38154 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
38158 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
3815c 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
38160 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
38164 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
38168 285             | .pre_status
38168 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
3816c 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
38170 287 00 B0 06 F6 |                 mov     pkt_data, #0
38174 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
38178 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3817c 28a 61 00 00 FF 
38180 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
38184 28c             | .out_retry
38184 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
38188 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3818c 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
38190 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
38194 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
38198 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3819c 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
381a0 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
381a4 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
381a8 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
381ac 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
381b0 297             | ' I've encountered transfer STALL, even though the data looks correct, and
381b0 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
381b0 297             | ' ControlRead() transfer gets things unstuck most of the time...
381b0 297             | .xfer_retry
381b0 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
381b4 298 58 01 B0 FD |                 call    #poll_waitx
381b8 299 8C F9 BF FD |                 call    #wait_txn_ok
381bc 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
381c0 29b C7 F1 03 F6 |                 mov     ptra, hpar2
381c4 29c C8 EF 03 F6 |                 mov     pb, hpar3
381c8 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
381cc 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
381d0 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
381d4 2a0             | 
381d4 2a0             | '------------------------------------------------------------------------------
381d4 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
381d4 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
381d4 2a0             | ' the SETUP data struct is filled with the required values.
381d4 2a0             | '------------------------------------------------------------------------------
381d4 2a0             | ' On entry:
381d4 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
381d4 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
381d4 2a0             | '     stage.
381d4 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
381d4 2a0             | ' On exit:
381d4 2a0             | '   retval - used to convey the success/failure of each stage.
381d4 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
381d4 2a0             | '     more specific USB operation error code.
381d4 2a0             | '------------------------------------------------------------------------------
381d4 2a0             | control_write
381d4 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
381d8 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
381dc 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
381e0 2a3             | 
381e0 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
381e4 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
381e8 2a5 F7 91 03 F6 |                 mov     hpar3, pb
381ec 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
381f0 2a7             | .xfer_start
381f0 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
381f4 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
381f8 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
381fc 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38200 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
38204 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
38208 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3820c 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
38210 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
38214 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
38218 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3821c 2b2             | .data
3821c 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
38220 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
38224 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
38228 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
3822c 2b6             | .out_retry
3822c 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
38230 2b7 88 F6 BF FD |                 call    #txn_out
38234 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38238 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
3823c 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
38240 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
38244 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
38248 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
3824c 2be             | .commit
3824c 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
38250 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
38254 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
38258 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3825c 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
38260 2c3             | pre_status_in
38260 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
38264 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
38268 2c5             | .status_retry
38268 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
3826c 2c6 44 F5 BF FD |                 call    #txn_in
38270 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
38274 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
38278 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
3827c 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
38280 2cb 2D 00 64 AD |         if_z    ret
38284 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
38288 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3828c 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
38290 2cf             | '               ret                                     ' Caller must handle transfer retirement
38290 2cf             | 
38290 2cf             | '------------------------------------------------------------------------------
38290 2cf             | ' Execute an IN interrupt transaction.
38290 2cf             | '------------------------------------------------------------------------------
38290 2cf             | ' On entry:
38290 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
38290 2cf             | '   hpar2 - Address of the IN data buffer
38290 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
38290 2cf             | ' On exit:
38290 2cf             | '   retval - the result of the operation.
38290 2cf             | '   hpar3 - the count of IN data bytes actually received.
38290 2cf             | '------------------------------------------------------------------------------
38290 2cf             | do_int_in
38290 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
38294 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
38298 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3829c 2d2             | 
3829c 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
382a0 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
382a4 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
382a8 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
382ac 2d6             | .retry
382ac 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
382b0 2d7 00 F5 BF FD |                 call    #txn_in
382b4 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
382b8 2d9 1C 00 90 AD |         if_z    jmp     #.commit
382bc 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
382c0 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
382c4 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
382c8 2dd 54 00 B0 FD |                 call    #retry_wait
382cc 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
382d0 2df 18 00 90 AD |         if_z    jmp     #.post_ret
382d4 2e0 D4 FF 9F FD |                 jmp     #.retry
382d8 2e1             | .commit
382d8 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
382dc 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
382e0 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
382e4 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
382e8 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
382ec 2e6             | .post_ret
382ec 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
382f0 2e7             | 
382f0 2e7             | 
382f0 2e7             | '------------------------------------------------------------------------------
382f0 2e7             | ' Resets the downstream hub port to FS
382f0 2e7             | '------------------------------------------------------------------------------
382f0 2e7             | dwnstream_reset
382f0 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
382f4 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
382f8 2e9             | 
382f8 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
382fc 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
38300 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
38304 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
38308 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3830c 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
38310 2ef             | 
38310 2ef             | '------------------------------------------------------------------------------
38310 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
38310 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
38310 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
38310 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
38310 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
38310 2ef             | '------------------------------------------------------------------------------
38310 2ef             | ' On entry:
38310 2ef             | '   hctwait - wait interval in sysclocks.
38310 2ef             | ' On exit:
38310 2ef             | '------------------------------------------------------------------------------
38310 2ef             | poll_waitx
38310 2ef 1A 92 63 FD |                 getct   hct2
38314 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
38318 2f1             | .wait
38318 2f1 FF 25 CC FB |                 jnct2   #.wait
3831c 2f2 2D 00 64 FD |                 ret
38320 2f3             | 
38320 2f3             | '------------------------------------------------------------------------------
38320 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
38320 2f3             | '------------------------------------------------------------------------------
38320 2f3             | ' On entry:
38320 2f3             | '   retval - transaction response PID or error code.
38320 2f3             | ' On exit:
38320 2f3             | '------------------------------------------------------------------------------
38320 2f3             | retry_wait
38320 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
38324 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
38328 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3832c 2f6 14 00 90 AD |         if_z    jmp     #.nak
38330 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
38334 2f8 D8 FF BF FD |                 call    #poll_waitx
38338 2f9             | .dec
38338 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
3833c 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
38340 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
38344 2fc             | .nak
38344 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
38348 2fd C4 FF BF FD |                 call    #poll_waitx
3834c 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
38350 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
38354 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
38358 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
3835c 302 2D 00 64 FD |                 ret
38360 303             | 
38360 303             | host_reset
38360 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
38364 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
38368 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
38368 305 BD 01 05 FF 
3836c 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
38370 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
38374 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
38378 309             | ' Check to see if the system clock has been changed.
38378 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3837c 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
38380 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
38384 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
38388 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3838c 30e 40 46 62 FD |                 dirl    dp
38390 30f             | 
38390 30f 28 02 64 FD |                 setq    #1
38394 310 80 00 80 FF 
38398 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3839c 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
383a0 313             | .enable
383a0 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
383a4 314 41 46 62 FD |                 dirh    dp
383a8 315 1F 36 63 FD |                 waitx   _1us_
383ac 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
383b0 317             | 
383b0 317             |                 ' Handle Port protection enable and startup delay
383b0 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
383b4 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
383b8 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
383bc 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
383c0 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
383c4 31c             | 
383c4 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
383c8 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
383cc 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
383d0 31f 00 00 04 F6 |                 mov     0-0, #0
383d4 320             | .regloop
383d4 320             | 
383d4 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
383d4 320             | 
383d4 320             | discon_entry
383d4 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
383d8 321             | 
383d8 321             |               
383d8 321             |         if HAVE_HIDPAD
383d8 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
383dc 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
383e0 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
383e4 324 F7 01 68 FC |                 wrlong  #0,pb
383e8 325             |         end
383e8 325             |         if EMUPAD_MAX_PLAYER > 0
383e8 325             |         end
383e8 325             | 
383e8 325             |                 ' Fall through to disconnected loop
383e8 325             | 
383e8 325             | '-----------------------------------------------------------------------------------------------------------------
383e8 325             | ' Device connect handling (Section 7.1.7.3).
383e8 325             | '-----------------------------------------------------------------------------------------------------------------
383e8 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
383e8 325             | ' device to connect (Section 7.1.7.3).
383e8 325             | '-----------------------------------------------------------------------------------------------------------------
383e8 325             | disconnected
383e8 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
383ec 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
383f0 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
383f4 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
383f8 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
383fc 32a             |         if ACTIVITY_LED >= 0
383fc 32a             |         end
383fc 32a 22 A7 82 FA |                 rqpin   urx, dm
38400 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
38404 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
38408 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
3840c 32e             | .se1_test
3840c 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
38410 32f FC FE BF FD |                 call    #poll_waitx
38414 330 22 A7 82 FA |                 rqpin   urx, dm
38418 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3841c 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
38420 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
38424 334             | .se1            'SE1 is a fatal error condition
38424 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
38428 335 E4 FE BF FD |                 call    #poll_waitx
3842c 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
38430 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
38434 338             | .connect_test                                           ' Test lines until stable J/K state seen
38434 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
38438 339 22 A7 82 FA |                 rqpin   urx, dm
3843c 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
38440 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
38444 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
38448 33d             | connected
38448 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3844c 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
38450 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
38454 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
38458 341             | .set_pulse
38458 341 1A 64 63 FD |                 getct   _pulse_time_
3845c 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
38460 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
38460 343             | ' of 1ms and make a correction, if necessary.
38460 343             | '                mov     htmp, _1ms_
38460 343             | '                subs    htmp, iframe_delta
38460 343             | '                adds    _frame1ms_clks_, htmp
38460 343             | '                debug(udec(_frame1ms_clks_))
38460 343             | 
38460 343             |                 ' Fall through to idle/processing loop
38460 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
38464 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
38468 345             | 
38468 345             | hidle
38468 345 22 A7 82 FA |                 rqpin   urx, dm
3846c 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
38470 347 98 00 90 CD |         if_c    jmp     #.se0_test
38474 348 24 06 70 FD |                 pollct3                         wc
38478 349 68 00 90 3D |         if_nc   jmp     #.nopoll
3847c 34a 1A 94 63 FD |                 getct   hct3
38480 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
38484 34c             | 
38484 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
38488 34d 00 70 E3 F8 |                 getbyte htmp
3848c 34e             | 
3848c 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
38490 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
38494 350 40 00 90 AD |         if_z    jmp     #.poll
38498 351             | 
38498 351             |         if _HAVE_GAMEPAD
38498 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
3849c 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
384a0 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
384a4 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
384a8 355 2C 00 90 AD |         if_z    jmp     #.poll
384ac 356             |         end
384ac 356             | 
384ac 356             |         if HAVE_MOUSE
384ac 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
384b0 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
384b4 358 20 00 90 AD |         if_z    jmp     #.poll
384b8 359             |         end
384b8 359             | 
384b8 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
384bc 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
384c0 35b 14 00 90 AD |         if_z    jmp     #.poll
384c4 35c             | 
384c4 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
384c8 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
384cc 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
384d0 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
384d4 360             |         if HAVE_MOUSE
384d4 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
384d8 361             |         else
384d8 361             |         end
384d8 361             | 
384d8 361             | .poll
384d8 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
384dc 362 2D EC 63 FD |                 call    pa
384e0 363             | .skip_poll
384e0 363             | 
384e0 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
384e4 364             | 
384e4 364             | .nopoll
384e4 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
384e8 365 44 00 90 AD |         if_z    jmp     #hsuspend
384ec 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
384f0 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
384f4 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
384f8 369 1A 84 63 FD |                 getct   hr0
384fc 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
38500 36b             |         if ACTIVITY_LED >= 0
38500 36b             |         end
38500 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
38504 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
38508 36d 5C FF 9F FD |                 jmp     #hidle
3850c 36e             | ' Check for extended SE0 state on the bus
3850c 36e             | .se0_test
3850c 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
38510 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
38514 370 22 A7 82 FA |                 rqpin   urx, dm
38518 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3851c 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
38520 373 24 F6 BF FD |                 call    #wait_txn_ok
38524 374 00 00 80 FF 
38528 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
3852c 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
3852c 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
38530 377             | 
38530 377             | hsuspend
38530 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
38534 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
38538 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
3853c 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
38540 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
38544 37c 00 96 07 F6 |                 mov     mod_cnt, #0
38548 37d             | 
38548 37d             |                 ' Fall through to resume wait loop
38548 37d             | 
38548 37d             | hwait_resume
38548 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3854c 37e 02 86 47 F0 |                 shr     hr1, #2
38550 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
38554 380             |         if ACTIVITY_LED >= 0
38554 380             |         end
38554 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
38558 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3855c 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
38560 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
38564 384 18 00 90 AD |         if_z    jmp     #.resume
38568 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3856c 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
38570 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
38574 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
38578 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
3857c 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
38580 38b             | .resume
38580 38b 22 05 28 FC |                 wypin   #OUT_K, dm
38584 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
38588 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
3858c 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
38590 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
38594 390 1F 70 63 FD |                 waitx   htmp
38598 391 22 07 28 FC |                 wypin   #OUT_J, dm
3859c 392 01 70 47 F0 |                 shr     htmp, #1
385a0 393 1F 70 63 FD |                 waitx   htmp
385a4 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
385a8 395 1A 92 62 FD |                 getct   iframe_ct_base
385ac 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
385b0 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
385b4 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
385b8 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
385bc 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
385c0 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
385c4 39c             | 
385c4 39c             | '------------------------------------------------------------------------------
385c4 39c             | ' Send preamble to enable low-speed HUB ports
385c4 39c             | '------------------------------------------------------------------------------
385c4 39c             | ' On entry:
385c4 39c             | ' On exit:
385c4 39c             | '   USB baud rate set to low-speed
385c4 39c             | '------------------------------------------------------------------------------
385c4 39c             | utx_pre
385c4 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
385c8 39d 40 46 62 FD |                 dirl    dp
385cc 39e 28 02 64 FD |                 setq    #1
385d0 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
385d4 3a0 58 44 62 FD |                 drvl    dm
385d8 3a1 59 46 62 FD |                 drvh    dp
385dc 3a2             | 
385dc 3a2 1E 00 00 FF 
385e0 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
385e4 3a4             | 
385e4 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
385e8 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
385ec 3a6 28 02 64 3D |         if_nc   setq    #1
385f0 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
385f4 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
385f8 3a9             | .l1
385f8 3a9             | 
385f8 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
385fc 3aa 40 46 62 FD |                 dirl    dp
38600 3ab 28 02 64 FD |                 setq    #1
38604 3ac 80 00 80 FF 
38608 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3860c 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
38610 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
38614 3b0 41 46 62 FD |                 dirh    dp
38618 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3861c 3b2             | 
3861c 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
38620 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
38624 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
38628 3b5             | 
38628 3b5             | hlut_end
38628 3b5             |                 fit     $400
38628 3b5             |                 orgh
38628                 | if OVERLAP_MEMORY
38628                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
38628                 | end
38628                 | '------------------------------------------------------------------------------
38628                 | ' Routines called from cog space.
38628                 | '------------------------------------------------------------------------------
38628                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
38628                 | '------------------------------------------------------------------------------
38628                 | 
38628                 | '------------------------------------------------------------------------------
38628                 | ' USB host cog initialization.
38628                 | '------------------------------------------------------------------------------
38628                 | usb_host_init
38628                 |                 ' Initialize buffer pointers
38628                 |         if OVERLAP_MEMORY
38628                 |         else
38628     40 15 B0 FE |                 loc     pb, #hid_descr
3862c                 |         end
3862c     F7 4B 02 F6 |                 mov     hid_descr_p, pb
38630                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
38630                 |                 {
38630                 |                 }
38630                 |         
38630                 |                 {
38630                 |                 }
38630                 |                 'loc     pb,#hkbd_report
38630                 |                 'mov     hkbd_report_p,pb
38630                 | 
38630     08 1D B0 FE |                 loc     pb, #hub_descr
38634     F7 4D 02 F6 |                 mov     hub_descr_p, pb
38638     1D 1D B0 FE |                 loc     pb, #urx_buff
3863c     F7 4F 02 F6 |                 mov     urx_buff_p, pb
38640     95 1D B0 FE |                 loc     pb, #dev_desc_buff
38644     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
38648     9F 1D B0 FE |                 loc     pb, #con_desc_buff
3864c     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
38650     18 15 B0 FE |                 loc     pb, #usb_cache_start
38654     F7 55 02 F6 |                 mov     cache_start_p, pb
38658     E9 1C B0 FE |                 loc     pb, #usb_cache_end
3865c     F7 57 02 F6 |                 mov     cache_end_p, pb
38660                 | 
38660                 |         if ERROR_LED >= 0
38660                 |         end
38660                 | 
38660                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
38660                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
38660                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
38660                 | ' Configure and enable the Serial Host USB port.
38660     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
38664                 | 
38664                 | '------------------------------------------------------------------------------
38664                 | ' Timing calculations happen before any interrupt(s) are enabled.
38664                 | '------------------------------------------------------------------------------
38664                 | ' On entry:
38664                 | '   htmp - current CLKFREQ value.
38664                 | '------------------------------------------------------------------------------
38664                 | hinit_usb_timings
38664                 | '                getct   htmp2
38664     B8 59 02 F6 |                 mov     save_sysclk, htmp
38668     8D 5B 80 FF 
3866c     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
38670     18 30 63 FD |                 getqx   _12Mbps_
38674     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
38678     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
3867c     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
38680     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
38684     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
38688     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
3868c     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
38690     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
38694     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
38698     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
3869c     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
386a0     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
386a4     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
386a8     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
386ac     80 00 00 FF 
386b0     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
386b4     18 2C 63 FD |                 getqx   _var_64_lower_
386b8     19 2E 63 FD |                 getqy   _var_64_upper_
386bc     28 2C 63 FD |                 setq    _var_64_lower_
386c0     65 CD 1D FF 
386c4     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
386c8     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
386cc     01 00 00 FF 
386d0     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
386d4     18 2C 63 FD |                 getqx   _var_64_lower_
386d8     19 2E 63 FD |                 getqy   _var_64_upper_
386dc     28 2C 63 FD |                 setq    _var_64_lower_
386e0     A1 07 00 FF 
386e4     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
386e8     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
386ec     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
386f0     09 36 57 F0 |                 shr     _1us_, #9               wc
386f4     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
386f8     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
386fc     18 38 63 FD |                 getqx   _10us_
38700     09 38 57 F0 |                 shr     _10us_, #9              wc
38704     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
38708     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
3870c     18 3A 63 FD |                 getqx   _33us_
38710     09 3A 57 F0 |                 shr     _33us_, #9              wc
38714     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
38718     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
3871c     18 3C 63 FD |                 getqx   _txn_err_
38720     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
38724     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
38728     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
3872c     18 3E 63 FD |                 getqx   _500us_
38730     09 3E 57 F0 |                 shr     _500us_, #9             wc
38734     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
38738     01 00 00 FF 
3873c     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
38740     18 40 63 FD |                 getqx   _txn_ok_ls_
38744     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
38748     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
3874c     01 00 00 FF 
38750     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
38754     18 42 63 FD |                 getqx   _txn_ok_fs_
38758     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
3875c     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
38760     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
38764     05 00 00 FF 
38768     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
3876c     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
38770     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
38774     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
38778     1C 00 00 FF 
3877c     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
38780     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
38784     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
38788     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
3878c     00 00 00 FF 
38790     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
38794     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
38798     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
3879c     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
387a0     04 00 00 FF 
387a4     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
387a8     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
387ac     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
387b0     8D 5B 00 FF 
387b4     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
387b8     18 4C 63 FD |                 getqx   _preamble_wait_
387bc     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
387c0     01 00 00 FF 
387c4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
387c8     18 2C 63 FD |                 getqx   _var_64_lower_
387cc     19 2E 63 FD |                 getqy   _var_64_upper_
387d0     28 2C 63 FD |                 setq    _var_64_lower_
387d4     01 00 00 FF 
387d8     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
387dc     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
387e0     09 4E 57 F0 |                 shr     _1ms_, #9               wc
387e4     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
387e8     FF FF 7F FF 
387ec     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
387f0     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
387f4     A7 51 03 F6 |                 mov     _2ms_, _1ms_
387f8     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
387fc     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
38800     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
38804     A7 55 03 F6 |                 mov     _4ms_, _1ms_
38808     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
3880c     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
38810     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
38814     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
38818     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
3881c     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
38820     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
38824     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
38828     A7 59 03 F6 |                 mov     _8ms_, _1ms_
3882c     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
38830     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
38834     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
38838     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
3883c     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
38840     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
38844     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
38848     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
3884c     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
38850     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
38854     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
38858                 | '        _ret_   mov     _1sec_, save_sysclk
38858                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
38858                 | '                ret
38858                 | {
38858                 | }
38858                 | 
38858                 | '------------------------------------------------------------------------------
38858                 | ' Parse a configuration descriptor chain to see if the device is a recognized
38858                 | ' one. If it is, start the task progression that will configure the device for
38858                 | ' use.
38858                 | '------------------------------------------------------------------------------
38858                 | ' On entry:
38858                 | '   hconfig_base - start address of the cached config descriptor chain.
38858                 | ' On exit:
38858                 | '------------------------------------------------------------------------------
38858                 | hparse_con_desc
38858     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
3885c     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
38860     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
38864     4E 70 FF F9 |                 movbyts htmp,#%%1032
38868     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
3886c                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
3886c                 | 
3886c     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
38870     6E ED 03 F1 |                 add     pa, hconfig_base
38874     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
38878                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
38878                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
38878                 | ' that defines a keyboard and/or mouse.
38878     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
3887c                 | .next_intf
3887c     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
38880     BC 01 90 3D |         if_ae   jmp     #hset_config
38884     6E F3 03 F6 |                 mov     ptrb, hconfig_base
38888     75 F3 03 F1 |                 add     ptrb, hnext_desc
3888c     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
38890     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
38894     0C 00 90 AD |         if_z    jmp     #.intf
38898     80 71 C7 FA |                 rdbyte  htmp, ptrb
3889c     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
388a0     D8 FF 9F FD |                 jmp     #.next_intf
388a4                 | .intf
388a4     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
388a8     00 90 07 F6 |                 mov     hpar3, #0
388ac     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
388b0     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
388b4     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
388b8     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
388bc                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
388bc                 | 
388bc                 | .endp
388bc     80 71 C7 FA |                 rdbyte  htmp, ptrb
388c0     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
388c4     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
388c8     78 00 90 3D |         if_ae   jmp     #.get_device
388cc     6E F3 03 F6 |                 mov     ptrb, hconfig_base
388d0     75 F3 03 F1 |                 add     ptrb, hnext_desc
388d4     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
388d8     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
388dc     64 00 90 AD |         if_z    jmp     #.get_device
388e0     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
388e4     04 00 90 AD |         if_z    jmp     #.get_ep
388e8     D0 FF 9F FD |                 jmp     #.endp
388ec                 | .get_ep
388ec     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
388f0     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
388f4     0F 86 67 F0 |                 shl     hr1, #8 + 7
388f8     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
388fc     3F 00 00 FF 
38900     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
38904     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
38908     00 8E 0F F2 |                 cmp     hpar2, #0               wz
3890c     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
38910     00 90 0F F2 |                 cmp     hpar3, #0               wz
38914     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
38918     A0 FF 9F FD |                 jmp     #.endp
3891c                 | .in_ep
3891c     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
38920     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
38924                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
38924     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
38928     C2 89 DB F8 |                 setbyte hr2, hr0, #3
3892c     8C FF 9F FD |                 jmp     #.endp
38930                 | .out_ep
38930     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
38934     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
38938                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
38938     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3893c     C2 8B DB F8 |                 setbyte hr3, hr0, #3
38940     78 FF 9F FD |                 jmp     #.endp
38944                 | 
38944                 | .get_device
38944     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
38948     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
3894c     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
38950     68 00 90 AD |         if_z    jmp     #.gamepad
38954     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
38958     AC 00 90 AD |         if_z    jmp     #.hub
3895c     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
38960     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
38964     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
38968     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3896c     4C 00 90 AD |         if_z    jmp     #.gamepad
38970     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
38974     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
38978                 | .keyboard
38978     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
3897c                 |         if HAVE_MOUSE
3897c     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
38980                 |         else
38980                 |         end
38980     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
38984     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
38988     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3898c     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
38990     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
38994     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
38998                 |                 'debug(udec(kb_intf_num))
38998                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
38998     E0 FE 9F FD |                 jmp     #.next_intf
3899c                 | if HAVE_MOUSE
3899c                 | .mouse
3899c     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
389a0     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
389a4     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
389a8     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
389ac     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
389b0                 |                 'getbyte ms_interval, hr2, #3
389b0     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
389b4     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
389b8                 |                 'debug(udec(kb_intf_num))
389b8                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
389b8     C0 FE 9F FD |                 jmp     #.next_intf
389bc                 | end
389bc                 | .gamepad
389bc     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
389c0     C7 71 63 F5 |                 xor     htmp, hpar2
389c4     3F 00 00 FF 
389c8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
389cc     AC FE 9F AD |         if_z    jmp     #.next_intf
389d0                 |         if HAVE_MOUSE
389d0     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
389d4     C7 71 63 F5 |                 xor     htmp, hpar2
389d8     3F 00 00 FF 
389dc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
389e0     98 FE 9F AD |         if_z    jmp     #.next_intf
389e4                 |         end
389e4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
389e8     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
389ec     8C FE 9F 5D |         if_nz   jmp     #.next_intf
389f0                 | 
389f0     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
389f4     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
389f8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
389fc     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
38a00     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
38a04                 |                 'debug(udec(gp_intf_num))
38a04                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
38a04     74 FE 9F FD |                 jmp     #.next_intf
38a08                 | .hub
38a08     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
38a0c     6C FE 9F 5D |         if_nz   jmp     #.next_intf
38a10     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
38a14     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
38a18     60 FE 9F 5D |         if_nz   jmp     #.next_intf
38a1c     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
38a20     58 FE 9F 5D |         if_nz   jmp     #.next_intf
38a24     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
38a28     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
38a2c     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
38a30     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38a34     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
38a38     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
38a3c                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
38a3c     3C FE 9F FD |                 jmp     #.next_intf
38a40                 | 
38a40                 | '------------------------------------------------------------------------------
38a40                 | ' If a newly-connected device is recognized, do whatever is needed to configure
38a40                 | ' it according to its function, or functions. In the case of this boot protocol
38a40                 | ' keyboard/mouse class driver:
38a40                 | ' - SetConfiguration(config_num)
38a40                 | ' - SetProtocol(boot)
38a40                 | ' - SetIdle(indefinite)
38a40                 | ' - Enter the device interrupt IN polling task stage.
38a40                 | '------------------------------------------------------------------------------
38a40                 | ' On entry:
38a40                 | ' On exit:
38a40                 | '------------------------------------------------------------------------------
38a40                 | hset_config
38a40                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
38a40                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
38a40     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
38a44     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
38a48     00 00 0C F2 |                 cmp     0-0, #0                 wz
38a4c     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
38a50                 |         if HAVE_MOUSE
38a50     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
38a54                 |         end
38a54     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
38a58     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
38a5c                 | .set_config
38a5c     6C 0E D0 FE |                 loc     ptra, #set_config
38a60     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
38a64     6E ED 03 F1 |                 add     pa, hconfig_base
38a68     F6 8D C3 FA |                 rdbyte  hpar1, pa
38a6c     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
38a70     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
38a74     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
38a78     A0 02 A0 FD |                 call    #control_write
38a7c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38a80     2D 00 64 5D |         if_nz   ret
38a84                 | .kbd_config
38a84     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
38a88     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
38a8c                 | 
38a8c     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
38a90     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38a94     3F 00 00 FF 
38a98     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38a9c     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
38aa0                 | 
38aa0     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
38aa4     34 0E D0 FE |                 loc     ptra, #set_protocol
38aa8     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
38aac     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38ab0     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
38ab4     A0 02 A0 FD |                 call    #control_write
38ab8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38abc     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
38ac0     E4 02 90 5D |         if_nz   jmp     #.notify_client
38ac4     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
38ac8     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
38acc     30 03 B0 FD |                 call    #hset_idle
38ad0                 |                 'cmp     retval, #PID_ACK        wz
38ad0                 |         'if_nz   mov     hkbd_ep_addr, #0
38ad0                 |         'if_nz   jmp     #.notify_client
38ad0     A8 99 02 F6 |                 mov     hctwait, _2ms_
38ad4     EF 02 A0 FD |                 call    #poll_waitx
38ad8     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
38adc     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
38ae0     90 17 90 FE |                 loc     pa, #hkbd_led_rep
38ae4     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
38ae8     2C 03 B0 FD |                 call    #hset_kbdled_report
38aec     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38af0     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
38af4     B0 02 90 5D |         if_nz   jmp     #.notify_client
38af8     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
38afc     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38b00     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38b04     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
38b08     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
38b0c     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
38b10     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
38b14     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
38b18     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
38b1c     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
38b20     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
38b24                 |         if !!HAVE_MOUSE
38b24                 |         end
38b24                 | 
38b24                 | .mouse_config
38b24                 | if HAVE_MOUSE
38b24     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
38b28     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
38b2c     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
38b30     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38b34     3F 00 00 FF 
38b38     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38b3c     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
38b40                 | 
38b40                 |                 debug("mouse passed addr check")
38b40                 | 
38b40     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
38b44     00 00 80 FF 
38b48     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
38b4c     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
38b50     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38b54     55 02 A0 FD |                 call    #control_read
38b58     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38b5c     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
38b60     44 02 90 5D |         if_nz   jmp     #.notify_client
38b64     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
38b68     56 01 00 F6 |                 mov     0-0, total_data
38b6c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38b70                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
38b70                 | 
38b70     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
38b74     64 0D D0 FE |                 loc     ptra, #set_protocol
38b78     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
38b7c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38b80     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
38b84     A0 02 A0 FD |                 call    #control_write
38b88     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38b8c     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
38b90     14 02 90 5D |         if_nz   jmp     #.notify_client
38b94                 |                 debug("mouse passed SetProtocol")
38b94     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
38b98     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
38b9c     60 02 B0 FD |                 call    #hset_idle
38ba0                 |                 'cmp     retval, #PID_ACK        wz
38ba0                 |         'if_nz   mov     hmouse_ep_addr, #0
38ba0                 |         'if_nz   jmp     #.notify_client
38ba0                 |                 debug("mouse passed SetIdle")
38ba0     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
38ba4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38ba8     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38bac     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
38bb0     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
38bb4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
38bb8     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
38bbc     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
38bc0     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
38bc4     3F 00 00 FF 
38bc8     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
38bcc     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
38bd0     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
38bd4     D0 01 90 FD |                 jmp     #.notify_client
38bd8                 | end
38bd8                 | .gamepad_config
38bd8                 | if _HAVE_GAMEPAD
38bd8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
38bdc     00 00 0C F2 |                 cmp     0-0, #0                 wz
38be0     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
38be4     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
38be8     00 70 03 F6 |                 mov     htmp, 0-0
38bec     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38bf0     3F 00 00 FF 
38bf4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38bf8     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
38bfc                 | 
38bfc     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
38c00     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
38c04     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38c08     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38c0c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
38c10     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
38c14     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
38c18     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
38c1c     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
38c20     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38c24     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38c28     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
38c2c     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
38c30     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
38c34                 | 
38c34                 |                 if EMUPAD_MAX_PLAYER > 0
38c34                 |                 
38c34                 | .rule_loop           
38c34                 |                 end
38c34                 | 
38c34     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
38c38     5C 00 90 AD |         if_e    jmp     #.xinput
38c3c     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
38c40     00 70 03 F6 |                 mov     htmp,0-0
38c44     01 A6 02 FF 
38c48     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
38c4c     7C 00 90 AD |         if_e    jmp     #.ps3
38c50                 | 
38c50     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
38c54     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
38c58     00 00 80 5F 
38c5c     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
38c60     03 00 80 AF 
38c64     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
38c68     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
38c6c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38c70     55 02 A0 FD |                 call    #control_read
38c74     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38c78     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
38c7c     00 00 04 56 |         if_nz   mov     0-0, #0
38c80     24 01 90 5D |         if_nz   jmp     #.notify_client
38c84     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
38c88     56 01 00 F6 |                 mov     0-0, total_data
38c8c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38c90                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
38c90                 | 
38c90     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
38c94     10 01 90 FD |                 jmp     #.notify_client
38c98                 | .xinput
38c98     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
38c9c     2D EF 03 F6 |                 mov     pb,hdev_port
38ca0     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
38ca4     03 EE 27 F3 |                 fle     pb,#3
38ca8     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
38cac     02 EF 47 FC |                 wrbyte  pb, ptra[2]
38cb0                 | 
38cb0     03 B0 06 F6 |                 mov     pkt_data, #3
38cb4     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
38cb8     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
38cbc     5A 00 A0 FD |                 call    #txn_out
38cc0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
38cc4                 | 
38cc4     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
38cc8     DC 00 90 FD |                 jmp     #.notify_client
38ccc                 | .ps3
38ccc     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
38cd0     2D EF 03 F6 |                 mov     pb,hdev_port
38cd4     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
38cd8     04 EE 27 F3 |                 fle     pb,#4
38cdc     F7 EF C3 F9 |                 decod   pb
38ce0     09 EF 47 FC |                 wrbyte  pb, ptra[9]
38ce4                 | 
38ce4     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
38ce8     00 0C D0 FE |                 loc     ptra, #set_report
38cec     01 00 80 FF 
38cf0     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
38cf4     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38cf8     03 61 5C FC |                 wrword  #48, ptra[wLength]
38cfc     20 0C B0 FE |                 loc     pb, #ps3_command_buff
38d00     A0 02 A0 FD |                 call    #control_write
38d04                 | 
38d04     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
38d08     E0 0B D0 FE |                 loc     ptra, #set_report
38d0c     01 00 80 FF 
38d10     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
38d14     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38d18     03 09 5C FC |                 wrword  #4, ptra[wLength]
38d1c     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
38d20     A0 02 A0 FD |                 call    #control_write
38d24     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
38d28     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
38d2c     00 00 04 56 |         if_nz   mov     0-0, #0
38d30     74 00 90 5D |         if_nz   jmp     #.notify_client
38d34                 | 
38d34     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
38d38     6C 00 90 FD |                 jmp     #.notify_client
38d3c                 | end
38d3c                 | 
38d3c                 | .hub_config
38d3c     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
38d40     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
38d44     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
38d48     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38d4c     3F 00 00 FF 
38d50     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38d54     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
38d58                 | 
38d58     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
38d5c     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
38d60     26 EF 03 F6 |                 mov     pb, hub_descr_p
38d64     55 02 A0 FD |                 call    #control_read
38d68     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38d6c     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
38d70     34 00 90 5D |         if_nz   jmp     #.notify_client
38d74                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
38d74                 | 
38d74     26 F1 03 F6 |                 mov     ptra, hub_descr_p
38d78     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
38d7c     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
38d80                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
38d80                 | .pwr_loop
38d80     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
38d84     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
38d88     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
38d8c     A0 02 A0 FD |                 call    #control_write
38d90     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
38d94                 | 
38d94     B1 99 02 F6 |                 mov     hctwait, _500ms_
38d98     B0 99 02 F1 |                 add     hctwait, _100ms_
38d9c     EF 02 A0 FD |                 call    #poll_waitx
38da0                 | 
38da0     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
38da4     00 00 90 FD |                 jmp     #.notify_client
38da8                 | 
38da8                 | .notify_client
38da8     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
38dac     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
38db0                 |                 debug(uhex_long(hdev_type,hdev_type+1))
38db0                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
38db0     2D 00 64 FD |                 ret
38db4                 | 
38db4                 | '------------------------------------------------------------------------------
38db4                 | ' Initialize the keyboard/mouse data area to start-up values.
38db4                 | '------------------------------------------------------------------------------
38db4                 | ' On entry:
38db4                 | ' On exit:
38db4                 | '------------------------------------------------------------------------------
38db4                 | init_kbdm_data
38db4     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
38db8     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
38dbc                 | 
38dbc     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
38dc0     2B ED 03 F6 |                 mov     pa, cache_end_p
38dc4                 | .loop
38dc4     61 01 4C FC |                 wrbyte  #0, ptra++
38dc8     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
38dcc     F4 FF 9F CD |         if_b    jmp     #.loop
38dd0                 |         
38dd0                 |         if EMUPAD_MAX_PLAYER > 0
38dd0                 |         end
38dd0                 | 
38dd0                 | 
38dd0     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
38dd4                 | .regloop
38dd4     00 EC 8F F9 |                 altd    pa
38dd8     00 00 04 F6 |                 mov     0-0, #0
38ddc     01 EC 07 F1 |                 add     pa, #1
38de0     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
38de4     EC FF 9F 5D |         if_nz   jmp     #.regloop
38de8                 | 
38de8     E1 E1 61 FF 
38dec     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
38df0     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
38df4     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
38df8     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
38dfc                 | 
38dfc     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
38e00                 | 
38e00                 | '------------------------------------------------------------------------------
38e00                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
38e00                 | ' function.
38e00                 | '------------------------------------------------------------------------------
38e00                 | ' On entry:
38e00                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
38e00                 | '   hpar2 - index number of the target interface.
38e00                 | ' On exit:
38e00                 | '------------------------------------------------------------------------------
38e00                 | hset_idle
38e00     A8 99 02 F6 |                 mov     hctwait, _2ms_
38e04     EF 02 A0 FD |                 call    #poll_waitx
38e08     D8 0A D0 FE |                 loc     ptra, #set_idle
38e0c     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
38e10     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
38e14     A0 02 80 FD |                 jmp     #control_write
38e18                 | 
38e18                 | '------------------------------------------------------------------------------
38e18                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
38e18                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
38e18                 | '------------------------------------------------------------------------------
38e18                 | ' On entry:
38e18                 | '   ep_addr_pid - device address and enpoint for the request.
38e18                 | ' On exit:
38e18                 | '   retval - transaction result.
38e18                 | '------------------------------------------------------------------------------
38e18                 | hset_kbdled_report
38e18     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
38e1c     CC 0A D0 FE |                 loc     ptra, #set_report
38e20     01 00 80 FF 
38e24     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
38e28     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38e2c     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
38e30     27 EF 03 F6 |                 mov     pb, urx_buff_p
38e34     F7 77 42 FC |                 wrbyte  kb_led_states, pb
38e38     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
38e3c                 | 
38e3c                 | '------------------------------------------------------------------------------
38e3c                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
38e3c                 | '------------------------------------------------------------------------------
38e3c                 | ' On entry:
38e3c                 | ' On exit:
38e3c                 | '------------------------------------------------------------------------------
38e3c                 | hget_kbd_in_report
38e3c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
38e40     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
38e44     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
38e48     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
38e4c     CF 02 A0 FD |                 call    #do_int_in
38e50     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38e54     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
38e58                 | 
38e58     00 90 0F F2 |                 cmp     hpar3, #0               wz
38e5c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
38e60                 | 
38e60     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
38e64     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
38e68     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
38e6c     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
38e70                 | 
38e70     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
38e74     18 00 B0 FD |                 call    #hkbd_compare
38e78                 |         if EMUPAD_MAX_PLAYER > 0
38e78                 |         end
38e78                 | 
38e78                 | .led_check
38e78     3B 71 03 F6 |                 mov     htmp, kb_led_states
38e7c     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
38e80     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
38e84     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
38e88     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
38e8c     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
38e90                 | 
38e90                 | '------------------------------------------------------------------------------
38e90                 | ' Compare current and previous keyboard data buffers for keypress changes.
38e90                 | '------------------------------------------------------------------------------
38e90                 | hkbd_compare
38e90     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38e94     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
38e98     61 73 07 FB |                 rdlong  htmp1, ptra++
38e9c     E1 75 07 FB |                 rdlong  htmp2, ptrb++
38ea0     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
38ea4     61 73 07 FB |                 rdlong  htmp1, ptra++
38ea8     E1 75 07 FB |                 rdlong  htmp2, ptrb++
38eac     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
38eb0     2D 00 64 AD |         if_z    ret
38eb4                 | 
38eb4     B4 13 D0 FE |                 loc     ptra, #hkbd_report
38eb8                 | 
38eb8                 |                 ' Handle modifiers
38eb8     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
38ebc     00 87 C7 FA |                 rdbyte  hr1, ptra
38ec0     C7 87 43 F9 |                 rolword hr1,hpar2,#0
38ec4     63 86 63 FD |                 mergew  hr1
38ec8     08 EC 07 F6 |                 mov     pa,#8
38ecc                 | .modloop
38ecc     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
38ed0     E8 8C 07 F6 |                 mov     hpar1,#$E8
38ed4     F6 8D 83 F1 |                 sub     hpar1,pa
38ed8     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
38edc     FB ED 6F FB |                 djnz    pa,#.modloop
38ee0                 | 
38ee0     6F E0 75 FD | .release        modc    _set    wc
38ee4                 |                 'alts    hdev_port, #hid_report_p
38ee4                 |                 'mov     ptra, hid_report_p
38ee4     02 F0 07 F1 |                 add     ptra, #2
38ee8     06 EC 07 F6 |                 mov     pa, #6
38eec     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
38ef0     20 00 90 AD |         if_z    jmp     #.rl3
38ef4     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
38ef8     02 F2 07 F1 |                 add     ptrb, #2
38efc     06 EE 07 F6 |                 mov     pb, #6
38f00     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
38f04     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
38f08     08 00 90 AD |         if_z    jmp     #.rl3
38f0c     FC EF 6F FB |                 djnz    pb, #.rl2
38f10     68 00 B0 FD |                 call    #hkbd_translate
38f14     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
38f18                 | 
38f18     00 90 07 F6 |                 mov     hpar3, #0
38f1c     1F 90 27 F4 |                 bith    hpar3, #31
38f20                 | 
38f20     6F 00 74 FD | .press          modc    _clr    wc
38f24     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38f28     02 F0 07 F1 |                 add     ptra, #2
38f2c     06 EC 07 F6 |                 mov     pa, #6
38f30     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
38f34     20 00 90 AD |         if_z    jmp     #.pl3
38f38     30 13 F0 FE |                 loc     ptrb, #hkbd_report
38f3c     02 F2 07 F1 |                 add     ptrb, #2
38f40     06 EE 07 F6 |                 mov     pb, #6
38f44     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
38f48     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
38f4c     08 00 90 AD |         if_z    jmp     #.pl3
38f50     FC EF 6F FB |                 djnz    pb, #.pl2
38f54     24 00 B0 FD |                 call    #hkbd_translate
38f58     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
38f5c                 | 
38f5c     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
38f60     08 13 F0 FE |                 loc     ptrb, #hkbd_report
38f64     28 02 64 FD |                 setq #1
38f68     61 73 07 FB |                 rdlong  htmp1, ptra++
38f6c     28 02 64 FD |                 setq #1
38f70     E1 73 67 FC |                 wrlong  htmp1, ptrb++
38f74     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
38f78                 | 
38f78     2D 00 64 FD |                 ret
38f7c                 | 
38f7c                 | '------------------------------------------------------------------------------
38f7c                 | ' Translate keyboard scancode to ASCII
38f7c                 | '------------------------------------------------------------------------------
38f7c                 | ' On entry:
38f7c                 | '   hpar1 - scancode
38f7c                 | '   hpar2 - key modifiers state
38f7c                 | '       c - pressed (0) or released (1) flag
38f7c                 | ' On exit:
38f7c                 | '   hpar1 - bit     31 = 0 pressed, 1 released
38f7c                 | '               30..17 = unused
38f7c                 | '                   18 = scroll-lock state 
38f7c                 | '                   17 = caps-lock state
38f7c                 | '                   16 = num-lock state 
38f7c                 | '                15..8 = key modifiers state
38f7c                 | '                 7..0 = scancode
38f7c                 | '------------------------------------------------------------------------------
38f7c                 | hkbd_translate
38f7c     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
38f80     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
38f84     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
38f88     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
38f8c     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
38f90     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
38f94                 | 
38f94                 |         if EMUPAD_MAX_PLAYER > 0
38f94                 | 
38f94                 |         if EMUPAD_BT0_BIT >= 0
38f94                 |         end
38f94                 |         if EMUPAD_BT1_BIT >= 0
38f94                 |         end
38f94                 |         if EMUPAD_BT2_BIT >= 0
38f94                 |         end
38f94                 |         if EMUPAD_BT3_BIT >= 0
38f94                 |         end
38f94                 |         if EMUPAD_BT4_BIT >= 0
38f94                 |         end
38f94                 |         if EMUPAD_BT5_BIT >= 0
38f94                 |         end
38f94                 |         if EMUPAD_BT6_BIT >= 0
38f94                 |         end
38f94                 |         if EMUPAD_BT7_BIT >= 0
38f94                 |         end
38f94                 |         if EMUPAD_BT8_BIT >= 0
38f94                 |         end
38f94                 |         if EMUPAD_BT9_BIT >= 0
38f94                 |         end
38f94                 | 
38f94                 |         end
38f94     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
38f98     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
38f9c     1F 8C 47 F4 |                 bitc    hpar1, #31
38fa0                 |         if KEYQUEUE_SIZE > 0
38fa0     C4 09 B0 FE |                 loc pb,#keyq_head
38fa4     F7 71 E3 FA |                 rdword htmp,pb
38fa8     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
38fac     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
38fb0     B8 75 03 F6 |                 mov htmp2,htmp
38fb4     04 74 07 FA |                 mul htmp2,#4
38fb8     F7 75 03 F1 |                 add htmp2,pb
38fbc     02 74 07 F1 |                 add htmp2,#2
38fc0     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
38fc4     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
38fc8     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
38fcc     F7 71 43 5C |         if_nz   wrbyte htmp,pb
38fd0                 |         end
38fd0     2D 00 7C FD |                 ret wcz
38fd4                 | 
38fd4                 | if HAVE_MOUSE
38fd4                 | '------------------------------------------------------------------------------
38fd4                 | ' Execute an IN interrupt transaction to poll for mouse activity.
38fd4                 | '------------------------------------------------------------------------------
38fd4                 | ' On entry:
38fd4                 | ' On exit:
38fd4                 | '------------------------------------------------------------------------------
38fd4                 | hget_mouse_in_report
38fd4     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
38fd8     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
38fdc     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
38fe0     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
38fe4     CF 02 A0 FD |                 call    #do_int_in
38fe8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38fec     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
38ff0                 | 
38ff0     00 90 0F F2 |                 cmp     hpar3, #0               wz
38ff4     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
38ff8                 | 
38ff8     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
38ffc     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
39000     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
39004     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
39008                 | 
39008     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3900c     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
39010     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
39014     01 90 87 31 |         if_ae   sub     hpar3, #1
39018                 | 
39018     40 09 90 FE |                 loc     pa, #mouse_limits
3901c     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
39020                 | 
39020                 |                 ' load xacc,yacc,zacc
39020     28 04 64 FD |                 setq    #3-1
39024     80 87 07 FB |                 rdlong  hr1,ptrb
39028                 |                 ' load limits and outptr
39028     28 04 64 FD |                 setq    #3-1
3902c     F6 73 03 FB |                 rdlong  htmp1,pa
39030                 | 
39030     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
39034     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
39038     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
3903c     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
39040     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
39044     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
39048     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
3904c     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
39050                 |               
39050                 | 
39050     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
39054     07 70 67 F7 |                 signx   htmp, #7
39058     B8 87 03 F1 |                 add     hr1,htmp
3905c     00 72 0F F2 |                 cmp     htmp1,#0 wz
39060     B9 87 63 53 |         if_ne   fles    hr1,htmp1
39064     00 86 47 53 |         if_ne   fges    hr1,#0
39068                 | 
39068     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
3906c     07 70 67 F7 |                 signx   htmp, #7
39070     B8 89 03 F1 |                 add     hr2,htmp
39074     00 74 0F F2 |                 cmp     htmp2,#0 wz
39078     BA 89 63 53 |         if_ne   fles    hr2,htmp2
3907c     00 88 47 53 |         if_ne   fges    hr2,#0
39080                 |                 
39080                 | 
39080     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
39084     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
39088     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
3908c     B8 8B 03 A1 |         if_z    add     hr3,htmp
39090                 | 
39090     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
39094     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
39098                 | 
39098                 |                 ' write back accumulators
39098     28 04 64 FD |                 setq    #3-1
3909c     80 87 67 FC |                 wrlong  hr1,ptrb
390a0                 |                 ' if outptr set, write X/Y words
390a0     00 76 0F F2 |                 cmp htmp3,#0                    wz
390a4     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
390a8     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
390ac     2D 00 64 FD |                 ret
390b0                 | end
390b0                 | 
390b0                 | '------------------------------------------------------------------------------
390b0                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
390b0                 | '------------------------------------------------------------------------------
390b0                 | ' On entry:
390b0                 | ' On exit:
390b0                 | '------------------------------------------------------------------------------
390b0                 | if _HAVE_GAMEPAD
390b0                 | hget_gp_in_report
390b0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
390b4     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
390b8                 | 
390b8     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
390bc     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
390c0     00 90 E3 F8 |                 getbyte hpar3
390c4     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
390c8     CF 02 A0 FD |                 call    #do_int_in
390cc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
390d0     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
390d4                 | 
390d4     00 90 0F F2 |                 cmp     hpar3, #0               wz
390d8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
390dc                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
390dc                 | 
390dc     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
390e0     00 70 E3 F8 |                 getbyte htmp                            ' |
390e4     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
390e8     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
390ec     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
390f0     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
390f4     B8 01 C0 F8 |                 setbyte htmp                            ' |
390f8                 | 
390f8                 | ' Note: the following code compares the current and previous reports
390f8                 | ' and process the data if there are changes to ease the debug output.
390f8                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
390f8                 | ' gpPreReport buffer.
390f8                 | 
390f8                 |                 ' ----- start of block to remove
390f8                 |                 {
390f8                 |                 }
390f8                 |                 ' ----- end of block to remove
390f8     F4 04 90 FE |                 loc pa,#hpad_translate
390fc     2A EC 63 FD |                 push pa
39100                 | 
39100                 |                 ' FALL THROUGH !!!!
39100                 | 
39100                 | '------------------------------------------------------------------------------
39100                 | ' Decode controller report
39100                 | '------------------------------------------------------------------------------
39100                 | hid_decode
39100                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
39100     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
39104     00 04 00 FF 
39108     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
3910c                 | 
3910c     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
39110                 | 
39110     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
39114     00 2A E3 F8 |                 getbyte hidr_type
39118     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
3911c     34 02 90 AD |         if_z    jmp     #hpad_xinput
39120     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
39124     1C 03 90 AD |         if_z    jmp     #hpad_ps3
39128     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
3912c     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
39130     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
39134                 |                 
39134                 | 
39134                 | '------------------------------------------------------------------------------
39134                 | ' Handle HID controller (or mouse now
39134                 | ' On entry:
39134                 | '   ptrb - controller report
39134                 | '------------------------------------------------------------------------------
39134                 | hpad_hid
39134     1B 01 A0 FD |                 call    #get_hid_descr_buffer
39138     F7 F1 03 F6 |                 mov     ptra, pb
3913c     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
39140     00 EC 03 F6 |                 mov     pa, 0-0
39144                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
39144     19 2A 3B FF 
39148     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
3914c                 | 
3914c                 | .next
3914c     00 EC 5F F2 |                 cmps    pa, #0      wcz
39150     2D 00 7C ED |         if_be   ret     wcz
39154                 | 
39154     61 8D C7 FA |                 rdbyte  hpar1, ptra++
39158     01 EC 87 F1 |                 sub     pa, #1
3915c     00 8E 07 F6 |                 mov     hpar2, #0
39160                 | 
39160     C6 71 03 F6 |                 mov     htmp, hpar1
39164     03 70 07 F5 |                 and     htmp, #$03
39168     01 70 0F F2 |                 cmp     htmp, #1    wz
3916c     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
39170     07 8E 67 A7 |         if_z    signx   hpar2,#7
39174     01 EC 87 A1 |         if_z    sub     pa, #1
39178     02 70 0F F2 |                 cmp     htmp, #2    wz
3917c     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
39180     0F 8E 67 A7 |         if_z    signx   hpar2,#15
39184     02 EC 87 A1 |         if_z    sub     pa, #2
39188     03 70 0F F2 |                 cmp     htmp, #3    wz
3918c     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
39190     04 EC 87 A1 |         if_z    sub     pa, #4
39194                 | 
39194     FC 8C 07 F5 |                 and     hpar1, #$FC
39198                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
39198                 | 
39198     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
3919c     0C 01 90 AD |         if_z    jmp     #.report_id
391a0     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
391a4     24 01 90 AD |         if_z    jmp     #.usage_page
391a8     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
391ac     2C 01 90 AD |         if_z    jmp     #.usage
391b0     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
391b4     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
391b8     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
391bc     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
391c0     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
391c4     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
391c8     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
391cc     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
391d0     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
391d4     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
391d8     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
391dc     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
391e0     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
391e4     64 FF 9F 5D |         if_nz   jmp     #.next
391e8                 | 
391e8     D8 1D A7 FB |                 tjf     hidr_state,#.next
391ec                 | 
391ec     03 8E 07 F5 |                 and     hpar2, #$03
391f0     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
391f4     18 00 90 5D |         if_nz   jmp     #.skip
391f8                 | 
391f8     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
391fc     20 00 90 AD |         if_z    jmp     #.axes
39200     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
39204     5C 00 90 AD |         if_z    jmp     #.hats
39208     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
3920c     70 00 90 AD |         if_z    jmp     #.buttons
39210                 | .skip
39210     8F 71 03 F6 |                 mov     htmp, hidr_size
39214     90 71 03 FA |                 mul     htmp, hidr_count
39218     B8 23 03 F1 |                 add     hidr_offset, htmp
3921c     2C FF 9F FD |                 jmp     #.next
39220                 | .axes
39220                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
39220     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
39224     90 87 03 F6 |                 mov     hr1, hidr_count
39228                 | .l1
39228     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3922c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
39230     04 03 B0 FD |                 call    #hpad_getbits
39234     64 03 B0 FD |                 call    #hpad_normalize
39238     06 84 1F F2 |                 cmp     hr0, #6         wcz
3923c     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
39240     00 88 43 C8 |         if_b    getnib  hr2
39244     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
39248     5F 01 20 C9 |         if_b    setword retval
3924c     01 84 07 C1 |         if_b    add     hr0, #1
39250     8F 23 03 F1 |                 add     hidr_offset, hidr_size
39254     F4 87 6F FB |                 djnz    hr1, #.l1
39258                 | 
39258     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3925c     01 1C 07 F6 |                 mov     hidr_state, #1
39260     E8 FE 9F FD |                 jmp     #.next
39264                 | .hats
39264                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
39264     91 8D 03 F6 |                 mov     hpar1, hidr_offset
39268     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3926c     C8 02 B0 FD |                 call    #hpad_getbits
39270     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
39274     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
39278     01 1C 07 F6 |                 mov     hidr_state, #1
3927c     90 FF 9F FD |                 jmp     #.skip
39280                 | .buttons
39280                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
39280     91 8D 03 F6 |                 mov     hpar1, hidr_offset
39284     8F 8F 03 F6 |                 mov     hpar2, hidr_size
39288     90 8F 03 FA |                 mul     hpar2, hidr_count
3928c     A8 02 B0 FD |                 call    #hpad_getbits
39290     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
39294     B8 BF 62 F0 |                 shl     retval, htmp
39298     5F 17 43 F5 |                 or      hidr_buttons, retval
3929c     90 71 03 F1 |                 add     htmp, hidr_count
392a0     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
392a4     01 1C 07 F6 |                 mov     hidr_state, #1
392a8     64 FF 9F FD |                 jmp     #.skip
392ac                 | .report_id
392ac     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
392b0     2D 00 7C 5D |         if_nz   ret     wcz
392b4     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
392b8     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
392bc     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
392c0     01 1C 67 56 |         if_nz   neg     hidr_state,#1
392c4     01 F2 87 51 |         if_nz   sub     ptrb,#1
392c8     80 FE 9F FD |                 jmp     #.next
392cc                 | .usage_page
392cc     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
392d0     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
392d4     04 1C 07 A6 |         if_z    mov     hidr_state, #4
392d8     70 FE 9F FD |                 jmp     #.next
392dc                 | .usage
392dc     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
392e0     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
392e4     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
392e8     01 1C 07 A6 |         if_z    mov     hidr_state, #1
392ec     5C FE 9F AD |         if_z    jmp     #.next
392f0     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
392f4     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
392f8     01 1C 07 A6 |         if_z    mov     hidr_state, #1
392fc     4C FE 9F AD |         if_z    jmp     #.next
39300     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
39304     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
39308     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
3930c     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
39310     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
39314     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
39318     10 00 90 AD |         if_z    jmp     #.usage_axis
3931c     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
39320     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
39324     03 1C 07 A6 |         if_z    mov     hidr_state, #3
39328     20 FE 9F FD |                 jmp     #.next
3932c                 | .usage_axis
3932c     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
39330     18 FE 9F CD |         if_b    jmp     #.next
39334     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
39338     C7 01 00 F8 |                 setnib  hpar2
3933c                 | 
3933c     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
39340     C7 8F C3 F9 |                 decod   hpar2
39344     C7 0F 43 F5 |                 or      hidr_flags, hpar2
39348                 | 
39348     01 24 07 F1 |                 add     hidr_usage_idx, #1
3934c     02 1C 07 F6 |                 mov     hidr_state, #2
39350     F8 FD 9F FD |                 jmp     #.next
39354                 | 
39354                 | '------------------------------------------------------------------------------
39354                 | ' Handle XInput controller
39354                 | ' On entry:
39354                 | '   ptrb - controller report
39354                 | '------------------------------------------------------------------------------
39354                 | '   Default implementation translates the report to a pseudo-defacto hid
39354                 | '   standard and jumps to hpad_translate for actions.
39354                 | '   Implementors may take specific actions for this kind of controller.
39354                 | '------------------------------------------------------------------------------
39354                 | hpad_xinput
39354     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
39358     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3935c     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
39360     14 70 0F F2 |                 cmp     htmp, #$14      wz
39364     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
39368                 | 
39368                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
39368                 | 
39368     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3936c     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
39370                 | 
39370     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
39374     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
39378     5F BF 22 F6 |                 not     retval
3937c     5F 11 2B F9 |                 setword hidr_axis, retval, #1
39380     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
39384     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
39388     5F BF 22 F6 |                 not     retval
3938c     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
39390                 | 
39390     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
39394     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
39398     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3939c     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
393a0     F8 01 B0 FD |                 call    #hpad_normalize
393a4     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
393a8     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
393ac     C0 BE 1E F2 |                 cmp     retval, #192    wcz
393b0     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
393b4     E4 01 B0 FD |                 call    #hpad_normalize
393b8     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
393bc                 | 
393bc     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
393c0     81 BF E6 FA |                 rdword  retval, ptrb[1]
393c4     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
393c8     00 16 47 F4 |                 bitc    hidr_buttons, #0
393cc     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
393d0     01 16 47 F4 |                 bitc    hidr_buttons, #1
393d4     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
393d8     02 16 47 F4 |                 bitc    hidr_buttons, #2
393dc     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
393e0     03 16 47 F4 |                 bitc    hidr_buttons, #3
393e4     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
393e8     04 16 47 F4 |                 bitc    hidr_buttons, #4
393ec     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
393f0     05 16 47 F4 |                 bitc    hidr_buttons, #5
393f4     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
393f8     08 16 47 F4 |                 bitc    hidr_buttons, #8
393fc     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
39400     09 16 47 F4 |                 bitc    hidr_buttons, #9
39404     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
39408     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3940c     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
39410     0B 16 47 F4 |                 bitc    hidr_buttons, #11
39414     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
39418     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3941c                 | 
3941c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
39420     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
39424     7A BB 7A FF 
39428     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
3942c     F9 FF 7F FF 
39430     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
39434     B9 71 5F F9 |                 altgn   htmp, #htmp1
39438     00 70 43 F8 |                 getnib  htmp
3943c     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
39440                 | 
39440     AC 01 90 FD |                 jmp     #hpad_translate
39444                 | 
39444                 | '------------------------------------------------------------------------------
39444                 | ' Handle PS3 controller
39444                 | ' On entry:
39444                 | '   ptrb - controller report
39444                 | '------------------------------------------------------------------------------
39444                 | '   Default implementation translates the report to a pseudo-defacto hid
39444                 | '   standard and jumps to hpad_translate for actions.
39444                 | '   Implementors may take specific actions for this kind of controller.
39444                 | '------------------------------------------------------------------------------
39444                 | hpad_ps3
39444     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
39448     01 70 0F F2 |                 cmp     htmp, #$01      wz
3944c     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
39450                 | 
39450                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
39450                 | 
39450     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
39454     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
39458     40 01 B0 FD |                 call    #hpad_normalize
3945c     5F 11 23 F9 |                 setword hidr_axis, retval, #0
39460     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
39464     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
39468     30 01 B0 FD |                 call    #hpad_normalize
3946c     5F 11 2B F9 |                 setword hidr_axis, retval, #1
39470     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
39474     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
39478     20 01 B0 FD |                 call    #hpad_normalize
3947c     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
39480     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
39484     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
39488     10 01 B0 FD |                 call    #hpad_normalize
3948c     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
39490     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
39494     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
39498                 | 
39498     08 8C 07 F6 |                 mov     hpar1, #8
3949c     13 8E 07 F6 |                 mov     hpar2, #19
394a0     94 00 B0 FD |                 call    #hpad_getbits
394a4                 | 
394a4     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
394a8     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
394ac     00 16 47 F4 |                 bitc    hidr_buttons, #0
394b0     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
394b4     01 16 47 F4 |                 bitc    hidr_buttons, #1
394b8     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
394bc     02 16 47 F4 |                 bitc    hidr_buttons, #2
394c0     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
394c4     03 16 47 F4 |                 bitc    hidr_buttons, #3
394c8     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
394cc     04 16 47 F4 |                 bitc    hidr_buttons, #4
394d0     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
394d4     05 16 47 F4 |                 bitc    hidr_buttons, #5
394d8     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
394dc     06 16 47 F4 |                 bitc    hidr_buttons, #6
394e0     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
394e4     07 16 47 F4 |                 bitc    hidr_buttons, #7
394e8     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
394ec     08 16 47 F4 |                 bitc    hidr_buttons, #8
394f0     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
394f4     09 16 47 F4 |                 bitc    hidr_buttons, #9
394f8     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
394fc     0A 16 47 F4 |                 bitc    hidr_buttons, #10
39500     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
39504     0B 16 47 F4 |                 bitc    hidr_buttons, #11
39508     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3950c     0C 16 47 F4 |                 bitc    hidr_buttons, #12
39510                 | 
39510     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
39514     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
39518     09 FA 79 FF 
3951c     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
39520     FF FA 7F FF 
39524     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
39528     B9 71 5F F9 |                 altgn   htmp, #htmp1
3952c     00 70 43 F8 |                 getnib  htmp
39530     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
39534                 | 
39534     B8 00 90 FD |                 jmp     #hpad_translate
39538                 | 
39538                 | '------------------------------------------------------------------------------
39538                 | ' Read bits from report data buffer
39538                 | '------------------------------------------------------------------------------
39538                 | ' On entry:
39538                 | '   PTRB - report buffer
39538                 | '   hpar1 - start bit
39538                 | '   hpar2 - number of bits
39538                 | ' On exit:
39538                 | '   retval - bits
39538                 | '------------------------------------------------------------------------------
39538                 | hpad_getbits
39538     C6 71 03 F6 |                 mov     htmp, hpar1
3953c     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
39540     F9 71 03 F1 |                 add     htmp, ptrb
39544     B8 BF 02 FB |                 rdlong  retval, htmp
39548                 | 
39548     C6 73 03 F6 |                 mov     htmp1, hpar1
3954c     07 72 07 F5 |                 and     htmp1, #$07     ' shift
39550     B9 BF 42 F0 |                 shr     retval, htmp1
39554                 | 
39554     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
39558     10 00 90 1D |         if_a    jmp     #.l1
3955c                 | 
3955c     C7 8F C3 F9 |                 decod   hpar2
39560     01 8E 87 F1 |                 sub     hpar2, #1
39564     C7 BF 02 F5 |                 and     retval, hpar2
39568     2D 00 64 FD |                 ret
3956c                 | .l1
3956c     FF 7F 00 FF 
39570     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
39574     03 70 07 F1 |                 add     htmp, #3
39578     B8 75 03 FB |                 rdlong  htmp2, htmp
3957c     18 8E 87 F1 |                 sub     hpar2, #24
39580     C7 8F C3 F9 |                 decod   hpar2
39584     01 8E 87 F1 |                 sub     hpar2, #1
39588     B9 75 43 F0 |                 shr     htmp2, htmp1
3958c     C7 75 03 F5 |                 and     htmp2, hpar2
39590     18 74 67 F0 |                 shl     htmp2, #24
39594     BA BF 42 F5 |                 or      retval, htmp2
39598     2D 00 64 FD |                 ret
3959c                 | 
3959c                 | '------------------------------------------------------------------------------
3959c                 | ' Normalize value to signed word (-32768 / 32767)
3959c                 | '------------------------------------------------------------------------------
3959c                 | ' On entry:
3959c                 | '   retval - value to normalize
3959c                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3959c                 | '   - or -
3959c                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3959c                 | '   hidr_size - value bits length
3959c                 | ' On exit:
3959c                 | '   retval - normalized value
3959c                 | '------------------------------------------------------------------------------
3959c                 | hpad_normalize
3959c     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
395a0     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
395a4     2D 00 64 AD |         if_z    ret
395a8     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
395ac     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
395b0     0F 72 77 F7 |                 signx   htmp1, #15      wc
395b4     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
395b8     00 BE 66 C7 |         if_c    signx   retval, #0-0
395bc     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
395c0     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
395c4     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
395c8     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
395cc     B8 71 53 F6 |                 abs     htmp            wc
395d0     1F BE 0E F4 |                 testb   retval, #31     wz
395d4     5F BF 42 F6 |                 abs     retval
395d8     B8 BF 12 FD |                 qdiv    retval, htmp
395dc     18 BE 62 FD |                 getqx   retval
395e0     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
395e4     C0 FF 7F FF 
395e8     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
395ec     2D 00 64 FD |                 ret
395f0                 | 
395f0                 | '------------------------------------------------------------------------------
395f0                 | ' Perform controller actions
395f0                 | ' On entry:
395f0                 | '    hidr_id        report id
395f0                 | '    hidr_axis      axis value (signed word, 2 axes per long)
395f0                 | '                      X = hidr_axis+0, #0
395f0                 | '                      Y = hidr_axis+0, #1
395f0                 | '                      Z = hidr_axis+1, #0
395f0                 | '                     RX = hidr_axis+1, #1
395f0                 | '                     RY = hidr_axis+2, #0
395f0                 | '                     RZ = hidr_axis+2, #1
395f0                 | '    hidr_buttons   buttons state (bits 0 to 31)
395f0                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
395f0                 | '
395f0                 | '                     -------3 -------2 -------1 -------0 byte
395f0                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
395f0                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
395f0                 | '                                zyx||| |||||||| ++++++++ n. buttons
395f0                 | '                                |||||| ||||++++--------- n. axes
395f0                 | '                                |||||| ++++------------- n. hats
395f0                 | '                                ++++++------------------ valid axes
395f0                 | '------------------------------------------------------------------------------
395f0                 | hpad_translate
395f0                 | 
395f0                 | 
395f0                 |         if HAVE_HIDPAD
395f0     84 0C F0 FE |                 loc     ptrb,#hidpad_report
395f4     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
395f8     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
395fc     01 70 E7 F2 |                 cmpsub  htmp,#1
39600     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
39604     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
39608     2D 00 7C 3D |         if_ae   ret     wcz
3960c     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
39610     B8 F3 03 F1 |                 add     ptrb,htmp
39614     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
39618     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3961c     28 0C 64 FD |                 setq    #7-1
39620     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
39624                 |         end
39624                 | 
39624                 | 
39624                 |         if EMUPAD_MAX_PLAYER > 0
39624                 | .emupad_no_hat
39624                 |         if EMUPAD_BT0_BIT >= 0
39624                 |         end
39624                 |         if EMUPAD_BT1_BIT >= 0
39624                 |         end
39624                 |         if EMUPAD_BT2_BIT >= 0
39624                 |         end
39624                 |         if EMUPAD_BT3_BIT >= 0
39624                 |         end
39624                 |         if EMUPAD_BT4_BIT >= 0
39624                 |         end
39624                 |         if EMUPAD_BT5_BIT >= 0
39624                 |         end
39624                 |         if EMUPAD_BT6_BIT >= 0
39624                 |         end
39624                 |         if EMUPAD_BT7_BIT >= 0
39624                 |         end
39624                 |         if EMUPAD_BT8_BIT >= 0
39624                 |         end
39624                 |         if EMUPAD_BT9_BIT >= 0
39624                 |         end
39624                 | .emupad_slot_over
39624                 |         end
39624                 | 
39624                 |         if 0
39624                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
39624                 | 
39624                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
39624                 | 
39624                 |         end
39624     2D 00 64 FD |                 ret
39628                 | end
39628                 | 
39628                 | if EMUPAD_MAX_PLAYER > 0
39628                 | '------------------------------------------------------------------------------
39628                 | ' Clear EmuPad state
39628                 | '------------------------------------------------------------------------------
39628                 | emupad_reset
39628                 | 
39628                 | '------------------------------------------------------------------------------
39628                 | ' Get EmuPad Player number for current device (into retval)
39628                 | ' Z flag is also set if current device is valid
39628                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
39628                 | '------------------------------------------------------------------------------
39628                 | emupad_getnum
39628                 | .loop
39628                 | '------------------------------------------------------------------------------
39628                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
39628                 | '------------------------------------------------------------------------------
39628                 | emupad_discon
39628                 | .loop         
39628                 |         
39628                 |         ' FALL THROUGH!!!
39628                 | 
39628                 | '------------------------------------------------------------------------------
39628                 | ' Update EmuPad reports (all of them...)
39628                 | '------------------------------------------------------------------------------
39628                 | emupad_write_reports
39628                 | .devloop
39628                 | 
39628                 | end
39628                 | 
39628                 | 
39628                 | '------------------------------------------------------------------------------
39628                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
39628                 | '------------------------------------------------------------------------------
39628                 | ' On entry:
39628                 | ' On exit:
39628                 | '------------------------------------------------------------------------------
39628                 | hget_hub_status
39628     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3962c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
39630     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
39634     01 90 2F F9 |                 setword hpar3, #1, #1
39638     CF 02 A0 FD |                 call    #do_int_in
3963c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39640     0C 00 90 AD |         if_z    jmp     #.data
39644     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
39648     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3964c     2D 00 64 FD |                 ret
39650                 | .data
39650     00 90 0F F2 |                 cmp     hpar3, #0               wz
39654     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
39658                 | 
39658     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3965c     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
39660     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
39664     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
39668                 |                 debug(ubin_long(hub_status_chg))
39668                 | 
39668     01 5A 06 F6 |                 mov     hdev_port, #1
3966c                 | .loop
3966c     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
39670     0C 00 B0 AD |         if_x1   call    #hub_port_handler
39674     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
39678     F0 FF 9F 3D |         if_nc   jmp     #.loop
3967c     2D 00 64 FD |                 ret
39680                 | 
39680                 | hub_port_handler
39680     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
39684     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
39688     27 EF 03 F6 |                 mov     pb, urx_buff_p
3968c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39690     55 02 A0 FD |                 call    #control_read
39694     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
39698                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
39698                 | 
39698     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3969c     50 01 90 5D |         if_x0   jmp     #.other
396a0     68 02 D0 FE |                 loc     ptra, #clr_port_feat
396a4     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
396a8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
396ac     A0 02 A0 FD |                 call    #control_write
396b0     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
396b4     7C 01 90 5D |         if_x0   jmp     #.disconnect
396b8     B0 99 02 F6 |                 mov     hctwait, _100ms_
396bc     EF 02 A0 FD |                 call    #poll_waitx
396c0                 | 
396c0     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
396c4     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
396c8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
396cc     A0 02 A0 FD |                 call    #control_write
396d0                 | 
396d0     02 76 07 F6 |                 mov     htmp3, #2
396d4                 | .wait_reset
396d4     AC 99 02 F6 |                 mov     hctwait, _8ms_
396d8     EF 02 A0 FD |                 call    #poll_waitx
396dc     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
396e0     27 EF 03 F6 |                 mov     pb, urx_buff_p
396e4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
396e8     55 02 A0 FD |                 call    #control_read
396ec     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
396f0     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
396f4     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
396f8                 | 
396f8     10 02 D0 FE |                 loc     ptra, #clr_port_feat
396fc     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
39700     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39704     A0 02 A0 FD |                 call    #control_write
39708                 | 
39708     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3970c                 | .wait_recover
3970c     A7 99 02 F6 |                 mov     hctwait, _1ms_
39710     EF 02 A0 FD |                 call    #poll_waitx
39714     FD 71 6F FB |                 djnz    htmp,#.wait_recover
39718                 | 
39718     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3971c     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
39720     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
39724                 | 
39724     00 08 00 FF 
39728     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3972c     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
39730     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
39734     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
39738     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3973c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39740     48 01 90 5D |         if_nz   jmp     #.done
39744                 | .get_dev_desc
39744     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
39748     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3974c     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
39750     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
39754     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
39758     01 71 57 FC |                 wrword  htmp, ptra[wValue]
3975c     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
39760     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39764     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
39768     AC 99 02 F6 |                 mov     hctwait, _8ms_
3976c     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
39770     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
39774     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
39778     BE 00 A0 FD |                 call    #calc_crc5
3977c     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
39780     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
39784     F7 AD C2 FA |                 rdbyte  total_data, pb
39788     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3978c     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
39790     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39794     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
39798     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3979c     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
397a0                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
397a0     9F 99 02 F6 |                 mov     hctwait, _500us_
397a4     EF 02 A0 FD |                 call    #poll_waitx
397a8     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
397ac     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
397b0     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
397b4     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
397b8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
397bc     CC 00 90 5D |         if_nz   jmp     #.done
397c0     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
397c4     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
397c8     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
397cc     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
397d0     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
397d4     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
397d8     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
397dc     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
397e0     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
397e4     A4 00 90 CD |         if_b    jmp     #.done
397e8     6C F0 BF FD |                 call    #hparse_con_desc
397ec     9C 00 90 FD |                 jmp     #.done
397f0                 | 
397f0                 | .other
397f0     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
397f4     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
397f8     28 00 90 AD |         if_x1   jmp     #.reset_feature
397fc     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
39800     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
39804     1C 00 90 AD |         if_x1   jmp     #.reset_feature
39808     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3980c     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
39810     10 00 90 AD |         if_x1   jmp     #.reset_feature
39814     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
39818     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3981c     04 00 90 AD |         if_x1   jmp     #.reset_feature
39820     68 00 90 FD |                 jmp     #.done
39824                 | .reset_feature
39824     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
39828     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3982c     A0 02 A0 FD |                 call    #control_write
39830     58 00 90 FD |                 jmp     #.done
39834                 | .disconnect
39834                 | 
39834     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
39838     00 70 E3 F8 |                 getbyte htmp
3983c     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
39840     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
39844     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
39848     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3984c     00 76 06 A6 |         if_z    mov     kb_led_states, #0
39850     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
39854                 |         if EMUPAD_MAX_PLAYER > 0
39854                 |         end
39854                 |         if HAVE_MOUSE
39854     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
39858     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3985c     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
39860                 |         end
39860                 |         if HAVE_HIDPAD
39860     14 0A F0 FE |                 loc ptrb,#hidpad_report
39864     2D 71 03 F6 |                 mov htmp,hdev_port
39868     01 70 E7 F2 |                 cmpsub htmp,#1
3986c     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
39870     B8 F3 03 F1 |                 add ptrb,htmp
39874     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
39878     80 01 6C FC |                 wrlong #0,ptrb
3987c                 |         end
3987c                 | 
3987c     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
39880     00 00 C4 F8 |                 setbyte #0
39884     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
39888     00 00 04 F6 |                 mov     0-0, #0
3988c                 | 
3988c                 | .done
3988c     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
39890     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
39894     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
39898     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3989c     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
398a0     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
398a4                 | 
398a4     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
398a8     27 EF 03 F6 |                 mov     pb, urx_buff_p
398ac     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
398b0     55 02 A0 FD |                 call    #control_read
398b4     00 69 06 FB |                 rdlong  hub_port_status, ptra
398b8                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
398b8     2D 00 64 FD |                 ret
398bc                 | 
398bc                 | '------------------------------------------------------------------------------
398bc                 | ' Partially populated SETUP packets
398bc                 | '------------------------------------------------------------------------------
398bc     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
398bd     06          |                 byte    REQ_GET_DESC
398be     00 01       |                 word    TYPE_DEVICE << 8
398c0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
398c2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
398c4     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
398c5     06          |                 byte    REQ_GET_DESC
398c6     00 02       |                 word    TYPE_CONFIG << 8
398c8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
398ca     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
398cc     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
398cd     09          |                 byte    REQ_SET_CONFIG
398ce     00 00       |                 word    0       ' Configuration value
398d0     00 00       |                 word    0       ' Zero
398d2     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
398d4     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
398d5     05          |                 byte    REQ_SET_ADDR
398d6     00 00       |                 word    0       ' Zero
398d8     00 00       |                 word    0       ' Zero
398da     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
398dc                 | '------------------------------------------------------------------------------
398dc                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
398dc                 | ' wValue field dictates which protocol should be used.
398dc                 | '
398dc                 | ' When initialized, all devices default to report protocol. However the host
398dc                 | ' should not make any assumptions about the device state and should set the
398dc                 | ' desired protocol whenever initializing a device.
398dc                 | '------------------------------------------------------------------------------
398dc     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
398dd     0B          |                 byte    HID_SET_PROTO
398de     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
398e0                 |                                                 ' (HID 1.11 Section 7.2.6).
398e0     00 00       |                 word    0               ' Interface index number.
398e2     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
398e4                 | '------------------------------------------------------------------------------
398e4     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
398e5     0A          |                 byte    HID_SET_IDLE
398e6     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
398e8                 |                                         ' reporting until a change is detected in the report data
398e8                 | 
398e8                 |                                         ' (HID 1.11 Section 7.2.4).
398e8     00 00       |                 word    0       ' Interface index number.
398ea     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
398ec     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
398ed     09          |                 byte    HID_SET_REPORT
398ee     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
398f0                 |                                         ' (HID 1.11 Section 7.2.2).
398f0     00 00       |                 word    0       ' Interface index number.
398f2     00 00       |                 word    0       ' Size of the report, in bytes.
398f4     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
398f5     06          |                 byte    REQ_GET_DESC
398f6     00 22       |                 word    TYPE_REPORT << 8
398f8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
398fa     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
398fc                 | '------------------------------------------------------------------------------
398fc     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
398fd     06          |                 byte    REQ_GET_DESC
398fe     00 29       |                 word    TYPE_HUB << 8
39900     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
39902     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39904     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
39905     03          |                 byte    REQ_SET_FEATURE
39906     00 00       |                 word    0       ' port power
39908     01 00       |                 word    1       ' Port index number (1+)
3990a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3990c     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3990d     01          |                 byte    REQ_CLEAR_FEATURE
3990e     00 00       |                 word    0       ' port power
39910     01 00       |                 word    1       ' Port index number (1+)
39912     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39914     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
39915     00          |                 byte    REQ_GET_STATUS
39916     00 00       |                 word    0
39918     01 00       |                 word    1       ' Port index number (1+)
3991a     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3991c                 | '------------------------------------------------------------------------------
3991c                 | if _HAVE_GAMEPAD
3991c     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
39920                 | ps3_command_buff
39920     00 00 00 00 
39924     00          |                 byte    $00, $00, $00, $00, $00
39925     00 00 00 00 
39929     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3992a     FF 27 10 00 
3992e     32          |                 byte    $FF, $27, $10, $00, $32
3992f     FF 27 10 00 
39933     32          |                 byte    $FF, $27, $10, $00, $32
39934     FF 27 10 00 
39938     32          |                 byte    $FF, $27, $10, $00, $32
39939     FF 27 10 00 
3993d     32          |                 byte    $FF, $27, $10, $00, $32
3993e     00 00 00 00 
39942     00          |                 byte    $00, $00, $00, $00, $00
39943     00 00 00 00 
39947     00          |                 byte    $00, $00, $00, $00, $00
39948     00 00 00 00 
3994c     00          |                 byte    $00, $00, $00, $00, $00
3994d     00 00 00    |                 byte    $00, $00, $00
39950                 | '------------------------------------------------------------------------------
39950     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
39953                 |                                         ' 0x01 All blinking
39953                 |                                         ' 0x02 1 flashes, then on
39953                 |                                         ' 0x03 2 flashes, then on
39953                 |                                         ' 0x04 3 flashes, then on
39953                 |                                         ' 0x05 4 flashes, then on
39953                 |                                         ' 0x06 1 on
39953                 |                                         ' 0x07 2 on
39953                 |                                         ' 0x08 3 on
39953                 |                                         ' 0x09 4 on
39953                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
39953                 |                                         ' 0x0B Blinking*
39953                 |                                         ' 0x0C Slow blinking*
39953                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
39953     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
39956     00          |                 byte    $00             ' Left rumble
39957     00          |                 byte    $00             ' Right rumble
39958     00 00 00    |                 byte    $00, $00, $00
3995b     00          | end
3995c                 | alignl
3995c                 | 
3995c                 | if HAVE_MOUSE
3995c     00 00 00 00 
39960     00 00 00 00 | mouse_limits long 0[2]
39964     00 00 00 00 | mouse_outptr long 0
39968                 | end
39968                 | 
39968                 | if KEYQUEUE_SIZE > 0
39968     00          | keyq_head byte 0
39969     00          | keyq_tail byte 0
3996a     00 00 00 00 
      ...             
39b66     00 00 00 00 
39b6a     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
39b6c                 | alignl
39b6c                 | end
39b6c                 | 
39b6c                 | if EMUPAD_MAX_PLAYER > 0
39b6c                 | emupad_rule_buffer
39b6c                 | if EMUPAD_BUILTIN_RULES
39b6c                 | file "padmap_builtin.dat"
39b6c                 | end
39b6c                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
39b6c                 | '' Default rule directly follows!
39b6c                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
39b6c                 | end
39b6c                 | 
39b6c                 | '------------------------------------------------------------------------------
39b6c                 | ' The USB data cache area gets zero-filled at every device disconnect
39b6c                 | '------------------------------------------------------------------------------
39b6c                 | usb_cache_start
39b6c                 | 
39b6c                 | ' HID descriptor and report buffers
39b6c                 | if !!OVERLAP_MEMORY
39b6c     00 00 00 00 
      ...             
3a264     00 00 00 00 
3a268     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3a26c                 | end
3a26c     00 00 00 00 
3a270     00 00 00 00 | hkbd_report     byte    0[8]
3a274     00 00 00 00 | hkbd_led_rep    byte    0
3a278                 | alignl
3a278                 | 
3a278                 | if HAVE_HIDPAD
3a278     00 00 00 00 
      ...             
3a334     00 00 00 00 
3a338     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3a33c                 | end
3a33c                 | 
3a33c                 | ' HUB descriptor
3a33c     00          | hub_descr       byte    0   ' bDescLength
3a33d     00          |                 byte    0   ' bDescriptorType
3a33e     00          |                 byte    0   ' bNbrPorts
3a33f     00 00       |                 word    0   ' wHubCharacteristics
3a341     00          |                 byte    0   ' bPwrOn2PwrGood
3a342     00          |                 byte    0   ' bHubContrCurrent
3a343     00          |                 byte    0   ' DeviceRemoveable
3a344     00          |                 byte    0   ' PortPwrCtrlMask
3a345                 | 
3a345                 | usb_cache_end
3a345                 | 
3a345                 | if HAVE_MOUSE
3a345     00 00 00 00 | mouse_xacc      long 0
3a349     00 00 00 00 | mouse_yacc      long 0
3a34d     00 00 00 00 | mouse_zacc      long 0
3a351     00          | mouse_bstate    byte 0
3a352     00          | mouse_lpending  byte 0
3a353     00          | mouse_rpending  byte 0
3a354     00          | mouse_mpending  byte 0
3a355     00          | mouse_lock      byte 0
3a356     00 00 00    |                 byte 0[3] ' padding
3a359                 | end
3a359                 | 
3a359     00 00 00 00 
      ...             
3a3d1     00 00 00 00 
3a3d5     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3a3d9     00 00 00 00 
3a3dd     00 00 00 00 
3a3e1     00 00 00 00 
3a3e5     00 00 00 00 
3a3e9     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3a3eb     00 00 00 00 
      ...             
3a4e3     00 00 00 00 
3a4e7     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3a4eb                 | 
3a4eb     00          | driver_cog      byte    0                       ' Current driver cog + 1
3a4ec                 | 	alignl
3a4ec                 | _audio096_spin2_dat_
3a4ec                 | 
3a4ec                 | audio       org     0
3a4ec                 | 
3a4ec     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3a4f0     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
3a4f4     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3a4f8                 |  
3a4f8     01 EC 63 FD |             cogid   pa                   ' compute cogid
3a4fc     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3a500     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3a504     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3a508                 | 
3a508     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
3a50c     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3a510     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3a514     0F 24 06 FC |             wrpin   dac2,#right
3a518     0F 00 1E FC |             wxpin   #256,#right    
3a51c     41 9C 64 FD |             dirh    #left addpins 1
3a520     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3a524     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3a528     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
3a52c                 |             
3a52c                 | '---------------------------------------------------------------------------------        
3a52c                 | '----------------- The main loop -------------------------------------------------
3a52c                 | '---------------------------------------------------------------------------------
3a52c                 | 
3a52c     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3a530     10 00 90 CD |       if_c  jmp     #loop1
3a534                 |   
3a534     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3a538     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
3a53c     D5 00 80 F1 |             sub     0-0,a40000000
3a540     FD 01 6E FB |             djnz    cn,#p402
3a544                 |     
3a544     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3a548     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
3a54c     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3a550     01 00 06 C6 |     if_c    mov     cn,#1
3a554     DA 02 3A F3 |             fle     ct,time3 wcz
3a558     02 00 06 C6 |     if_c    mov     cn,#2     
3a55c     DB 02 3A F3 |             fle     ct,time4 wcz
3a560     03 00 06 C6 |     if_c    mov     cn,#3
3a564     DC 02 3A F3 |             fle     ct,time5 wcz
3a568     04 00 06 C6 |     if_c    mov     cn,#4
3a56c     DD 02 3A F3 |             fle     ct,time6 wcz
3a570     05 00 06 C6 |     if_c    mov     cn,#5
3a574     DE 02 3A F3 |             fle     ct,time7 wcz
3a578     06 00 06 C6 |     if_c    mov     cn,#6
3a57c     DF 02 3A F3 |             fle     ct,time8 wcz
3a580     07 00 06 C6 |     if_c    mov     cn,#7
3a584                 | 
3a584                 | 
3a584                 | '----------------------------------------------------------------------------------
3a584                 | '------------- Compute channel samples --------------------------------------------
3a584                 | '----------------------------------------------------------------------------------
3a584                 | 
3a584                 | 
3a584     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
3a588     06 C0 65 F0 |             shl     channeladd,#6
3a58c     E0 F0 03 F1 |             add     ptra,channeladd
3a590                 | 
3a590     28 16 64 FD |             setq    #11                        	' read parameters
3a594     00 D7 05 FB |             rdlong  pointer0,ptra
3a598                 |     	    
3a598     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
3a59c     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3a5a0     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
3a5a4     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
3a5a8     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
3a5ac     00 C4 0D F2 |             cmp     qq,#0 wz                         
3a5b0     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3a5b4     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3a5b8                 |             
3a5b8     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
3a5bc     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3a5c0     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
3a5c4                 | 
3a5c4     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
3a5c8     EC 08 3A F9 |             getword oldrs,sample0,#1
3a5cc     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3a5d0     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
3a5d4     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
3a5d8     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
3a5dc                 | 
3a5dc     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3a5e0     00 04 02 F6 |             mov     dt0,0-0    
3a5e4     D7 04 82 F1 |             sub     dt0,time0
3a5e8                 |             
3a5e8     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
3a5ec     FB 00 00 F1 |             add     0-0,afreq0  	
3a5f0                 |             
3a5f0                 | '---- envelopes
3a5f0                 |             
3a5f0     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
3a5f4     20 00 00 AF 
3a5f8     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
3a5fc     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3a600                 | 
3a600     FB 48 02 F6 |             mov     envs1,afreq0
3a604     F5 48 02 FA |             mul     envs1,envspd0
3a608     24 E7 01 F1 |             add     envph0,envs1 
3a60c                 | 
3a60c     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3a610     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3a614     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
3a618     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
3a61c     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3a620     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
3a624     00 46 06 36 |     if_ge   mov     envlo,#0
3a628     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
3a62c     16 E6 65 30 |     if_ge   shl     envph0,#22
3a630                 | 
3a630     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
3a634     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
3a638     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
3a63c     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3a640     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
3a644     24 49 32 F9 |             getword envs1,envs1,#0		' current value
3a648     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
3a64c     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3a650     23 49 02 FA |             mul     envs1,envlo
3a654     25 49 02 F1 |             add     envs1,envs2
3a658     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
3a65c                 |             
3a65c     1B DA 0D F4 | p410        testb   sstart0, #27 wz
3a660     1B C6 61 AD |     if_z    getrnd  spl
3a664     58 00 90 AD |     if_z    jmp     #p406
3a668                 |  
3a668     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
3a66c     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
3a670     08 D6 45 F0 |             shr     pointer0,#8
3a674                 |          
3a674     1F DA 0D F4 |             testb   sstart0,#31 wz            
3a678     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3a67c     1C DA 0D F4 |             testb   sstart0,#28 wz            
3a680     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3a684                 |         
3a684     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
3a688     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
3a68c     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
3a690                 |             
3a690     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
3a694     ED C4 01 F1 |             add     qq,sstart0            
3a698                 | 
3a698     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3a69c     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
3a6a0     1C 01 B0 1D |     if_gt   call    #cache_read
3a6a4                 |          
3a6a4     1F DA 0D F4 |             testb   sstart0,#31 wz 
3a6a8     08 C6 65 50 |     if_nz   shl     spl,#8
3a6ac     08 D6 65 50 |     if_nz   shl     pointer0,#8
3a6b0     07 D6 65 A0 |     if_z    shl     pointer0,#7
3a6b4     1C DA 0D F4 |             testb   sstart0,#28 wz            
3a6b8     01 D6 45 A0 |     if_z    shr     pointer0,#1    
3a6bc     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3a6c0                 | 
3a6c0                 | 
3a6c0     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
3a6c4     00 C6 01 F6 |             mov     spl,0-0
3a6c8     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
3a6cc     00 C6 01 F6 |             mov     spl,0-0
3a6d0                 | 
3a6d0     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
3a6d4     00 0A 02 F6 |             mov     ls0,0-0
3a6d8     20 00 00 FF 
3a6dc     00 C4 05 F6 |             mov     qq,##16384
3a6e0     FE C4 81 F1 |             sub     qq,apan0
3a6e4     E2 C6 31 FA |             scas    spl,qq
3a6e8     00 0C 02 F6 |             mov     rs0, 0-0
3a6ec                 | 
3a6ec     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
3a6f0     06 11 02 F1 |             add     rs,rs0
3a6f4     03 0F 82 F1 |             sub     ls,oldls
3a6f8     05 0F 02 F1 |             add     ls,ls0
3a6fc                 |    
3a6fc     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
3a700     05 D9 21 F9 |             setword sample0,ls0,#0
3a704                 |             
3a704     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3a708     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
3a70c     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
3a710                 |   '  if_z    mov     sample0,#0
3a710     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
3a714     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
3a718     04 00 00 AF 
3a71c     00 B0 05 A1 |     if_z    add     time1,##2048
3a720     D8 B2 01 A6 |     if_z    mov     time2,time1
3a724     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
3a728                 | 
3a728     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
3a72c     00 D7 65 FC |             wrlong  pointer0,ptra
3a730     08 E7 65 FC |             wrlong  envph0,ptra[8]
3a734     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
3a738                 |                       
3a738     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
3a73c     FF C3 25 A7 |     if_z    decmod  front, #511          
3a740                 |          
3a740     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
3a744     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
3a748     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
3a74c     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
3a750                 | 	    
3a750                 | 		    
3a750     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
3a754     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
3a758     04 15 02 F6 |             mov     newsample, oldrs       
3a75c                 | 
3a75c     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
3a760     02 AF 01 F1 |             add     time0,dt0    
3a764                 |                                      
3a764     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
3a768     D8 FD 9F AD |     if_z    jmp     #loop1
3a76c     02 C5 01 F6 |             mov     qq,dt0
3a770                 | 
3a770                 |     
3a770                 |             
3a770     01 4E 36 F0 | p301        rol     dropper,#1 wc
3a774     40 00 90 3D |     if_nc   jmp     #p399
3a778     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3a77c     00 C2 9D F2 |             cmpr    front, #0-0 wcz
3a780     F4 FF 9F AD |     if_e    jmp     #p398   
3a784                 | 		
3a784     00 1A 0E F2 | 	    cmp     scbase,#0 wz
3a788     20 00 90 AD |     if_z    jmp     #p302	   
3a78c                 |   
3a78c     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
3a790     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
3a794     02 1E 66 C0 |     if_c    shl     scptr2,#2
3a798     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
3a79c     60 1E 66 FC |             wrlong  scptr2,#$60
3a7a0     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
3a7a4     01 00 00 CF 
3a7a8     7F 1C 06 C7 |     if_c    incmod  scptr,##639
3a7ac                 | 			    
3a7ac     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
3a7b0     00 00 00 FF 
3a7b4     FF C3 05 F7 |             incmod  front, ##511
3a7b8     ED C5 6D FB | p399        djnz    qq,#p301
3a7bc                 |             
3a7bc     6C FD 9F FD |             jmp     #loop            'loop
3a7c0                 | 
3a7c0                 | '----------------------------------------------------------------------------------
3a7c0                 | '------------- This is the end of the main loop -----------------------------------
3a7c0                 | '----------------------------------------------------------------------------------
3a7c0                 | 
3a7c0                 | '----------------------------------------------------------------------------------
3a7c0                 | '------------- PSRAM cache ----------- --------------------------------------------
3a7c0                 | '----------------------------------------------------------------------------------
3a7c0                 | 
3a7c0                 | ' There are 8 cache pointers for 8 channels
3a7c0                 | ' if 24 higher bits of address=cache, then get a word from the cache
3a7c0                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3a7c0                 | 
3a7c0                 | 
3a7c0     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
3a7c4                 |             
3a7c4     E2 40 02 F6 | 	    mov     addrhi,qq		
3a7c8     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
3a7cc     14 01 96 F9 | 	    alts    cn,#cache1            
3a7d0     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
3a7d4     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3a7d8                 | 	
3a7d8     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
3a7dc     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
3a7e0     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
3a7e4     08 38 66 F0 | 	    shl     cmd,#8
3a7e8     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3a7ec     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
3a7f0     08 3A 66 F0 |             shl     hubaddr,#8                  '
3a7f4     13 3B 02 F1 |             add     hubaddr,hubptr 
3a7f8     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
3a7fc     28 04 64 FD |             setq    #2                          ' write 3 longs
3a800     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
3a804     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3a808     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
3a80c                 |             
3a80c                 | 	
3a80c     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
3a810     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
3a814     13 C5 01 F1 | 	    add     qq,hubptr
3a818     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3a81c     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
3a820                 |           
3a820                 | 
3a820                 | '--------------------------------------------------------------------------
3a820                 | '------ Interrupt service -------------------------------------------------
3a820                 | '------ Output the sample, get the next one if exists ---------------------
3a820                 | '--------------------------------------------------------------------------
3a820                 | 
3a820     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
3a824     0F D0 25 FC |             wypin   rsample,#right       '4
3a828     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
3a82c     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
3a830     FF F3 07 57 |     if_ne   incmod  ptrb,#511
3a834     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
3a838     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
3a83c                 |     
3a83c     F5 FF 3B FB |             reti1                        '17/19 
3a840                 |           
3a840                 | '---------------------------------------------------------------------------
3a840                 | '-------- End of interrupt -------------------------------------------------
3a840                 | '---------------------------------------------------------------------------    
3a840                 | 
3a840                 | 
3a840                 | '---------------------------------------------------------------------------
3a840                 | '------- Variables ---------------------------------------------------------
3a840                 | '---------------------------------------------------------------------------
3a840                 | 
3a840                 | ' constants
3a840                 | 
3a840     00 00 00 40 | a40000000   long $40000000
3a844     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3a848                 | 
3a848                 | ' Time variables
3a848                 | 
3a848     00 00 00 00 | time0       long 0    ' Global sample computing time
3a84c     01 00 00 00 | time1       long 1    ' Local channels time
3a850     02 00 00 00 | time2       long 2
3a854     03 00 00 00 | time3       long 3
3a858     04 00 00 00 | time4       long 4
3a85c     05 00 00 00 | time5       long 5
3a860     06 00 00 00 | time6       long 6
3a864     07 00 00 00 | time7       long 7
3a868     08 00 00 00 | time8       long 8
3a86c                 | 
3a86c     00 00 00 00 | channeladd long 0
3a870                 | 
3a870     00 00 00 00 | front       long 0
3a874                 | 
3a874                 | ' temporary variables 
3a874     00 00 00 00 | qq          long 0
3a878     00 00 00 00 | spl         long 0
3a87c     00 00 00 00 | zero        long 0
3a880     00 00 00 00 | mailbox     long 0
3a884     00 00 00 00 | mailbox2 long 0
3a888                 | 
3a888                 | ' Interrupt ISR variables
3a888                 | 
3a888     00 00 00 00 | lsample     long 0
3a88c     00 00 00 00 | rsample     long 0
3a890     00 00 00 00 | lsnext      long 0
3a894     00 00 00 00 | rsnext      long 0 
3a898                 | 
3a898                 | ' channel parameter block
3a898                 | 
3a898     00 00 00 00 | pointer0    long 0     
3a89c     00 00 00 00 | sample0     long 0
3a8a0     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
3a8a4     00 00 00 00 | lstart0     long 0
3a8a8     00 00 00 00 | lend0       long 0
3a8ac     00 00 00 00 | volpan0     long 0
3a8b0     00 00 00 00 | freqskip0   long 0
3a8b4     00 00 00 00 | command0    long 0
3a8b8     00 00 00 00 | envph0	    long 0
3a8bc     00 00 00 00 | envptr0	    long 0
3a8c0     00 00 00 00 | envspd0	    long 0
3a8c4     00 00 00 00 | envlen0	    long 0
3a8c8     00 00 00 00 | res5	    long 0
3a8cc     00 00 00 00 | res6	    long 0
3a8d0     00 00 00 00 | res7	    long 0
3a8d4     00 00 00 00 | res8	    long 0
3a8d8                 | 
3a8d8     00 00 00 00 | afreq0      long 0
3a8dc     00 00 00 00 | askip0      long 0
3a8e0     00 00 00 00 | avol0       long 0
3a8e4     00 00 00 00 | apan0       long 0
3a8e8                 | 
3a8e8     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3a8ec     00 00 00 00 | cn          long 0
3a8f0     00 00 00 00 | ct          long 0
3a8f4     00 00 00 00 | dt0         long 0
3a8f8                 | 
3a8f8                 | ' Samples
3a8f8     00 00 00 00 | oldls       long 0
3a8fc     00 00 00 00 | oldrs       long 0
3a900                 | 
3a900     00 00 00 00 | ls0         long 0
3a904     00 00 00 00 | rs0         long 0
3a908                 | 
3a908     00 00 00 00 | ls          long 0    
3a90c     00 00 00 00 | rs          long 0
3a910                 | 
3a910     00 00 00 00 | oldsample   long 0
3a914     00 00 00 00 | newsample   long 0
3a918                 | 
3a918     00 00 00 00 | nrsample    long 0
3a91c     00 00 00 00 | nlsample    long 0
3a920                 | 
3a920     00 00 00 00 | scbase long 0
3a924     00 00 00 00 | scptr long 0
3a928     00 00 00 00 | scptr2 long 0
3a92c     00 00 00 00 | scope long 0
3a930                 | 
3a930     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
3a934     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3a938                 | 
3a938     00 18 07 00 | hubptr      long $71800
3a93c     00 00 00 00 | cache1      long 0
3a940     00 00 00 00 | cache2      long 0
3a944     00 00 00 00 | cache3      long 0
3a948     00 00 00 00 | cache4      long 0
3a94c     00 00 00 00 | cache5      long 0
3a950     00 00 00 00 | cache6      long 0
3a954     00 00 00 00 | cache7      long 0
3a958     00 00 00 00 | cache8      long 0
3a95c                 | 
3a95c                 | 
3a95c     00 00 00 00 | cmd         long 0
3a960     00 00 00 00 | hubaddr     long 0
3a964     00 01 00 00 | count       long 256
3a968     00 00 00 00 | addrlo long 0
3a96c     00 00 00 00 | addrhi long 0
3a970     00 00 00 00 | pointer00 long 0
3a974     00 00 00 00 | envhi long 0
3a978     00 00 00 00 | envlo long 0
3a97c     00 00 00 00 | envs1 long 0
3a980     00 00 00 00 | envs2 long 0
3a984     00 00 00 00 | noise0 long 0
3a988     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
3a98c     00 00 00 00 
3a990     00 00 00 00 | null  			long 	0,0           ' for channel reset
3a994                 | 	alignl
3a994                 | __system__dat_
3a994     00 00 00 00 
3a998     00 00 00 00 | 	byte	$00[8]
3a99c     03 00 00 00 
3a9a0     00 00 00 00 
3a9a4     00 00 00 00 
3a9a8     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a9ac     00 00 00 00 
      ...             
3ac38     00 00 00 00 
3ac3c     00 00 00 00 | 	byte	$00[660]
3ac40     00 00 60 09 | 	long	(150 {__system____root_opendir})<<20
3ac44     00 00 70 09 | 	long	(151 {__system____root_closedir})<<20
3ac48     00 00 80 09 | 	long	(152 {__system____root_readdir})<<20
3ac4c     00 00 90 09 | 	long	(153 {__system____root_stat})<<20
3ac50     00 00 00 00 
3ac54     00 00 00 00 
3ac58     00 00 00 00 
3ac5c     00 00 00 00 
3ac60     00 00 00 00 
3ac64     00 00 00 00 
3ac68     00 00 00 00 | 	byte	$00[28]
3ac6c     D4 AC 03 00 | 	long	@@@__system__dat_ + 832
3ac70     D7 AC 03 00 | 	long	@@@__system__dat_ + 835
3ac74     F8 AC 03 00 | 	long	@@@__system__dat_ + 868
3ac78     11 AD 03 00 | 	long	@@@__system__dat_ + 893
3ac7c     2C AD 03 00 | 	long	@@@__system__dat_ + 920
3ac80     46 AD 03 00 | 	long	@@@__system__dat_ + 946
3ac84     56 AD 03 00 | 	long	@@@__system__dat_ + 962
3ac88     68 AD 03 00 | 	long	@@@__system__dat_ + 980
3ac8c     7A AD 03 00 | 	long	@@@__system__dat_ + 998
3ac90     8C AD 03 00 | 	long	@@@__system__dat_ + 1016
3ac94     98 AD 03 00 | 	long	@@@__system__dat_ + 1028
3ac98     A9 AD 03 00 | 	long	@@@__system__dat_ + 1045
3ac9c     BD AD 03 00 | 	long	@@@__system__dat_ + 1065
3aca0     C7 AD 03 00 | 	long	@@@__system__dat_ + 1075
3aca4     D7 AD 03 00 | 	long	@@@__system__dat_ + 1091
3aca8     E6 AD 03 00 | 	long	@@@__system__dat_ + 1106
3acac     FC AD 03 00 | 	long	@@@__system__dat_ + 1128
3acb0     15 AE 03 00 | 	long	@@@__system__dat_ + 1153
3acb4     29 AE 03 00 | 	long	@@@__system__dat_ + 1173
3acb8     37 AE 03 00 | 	long	@@@__system__dat_ + 1187
3acbc     4B AE 03 00 | 	long	@@@__system__dat_ + 1207
3acc0     57 AE 03 00 | 	long	@@@__system__dat_ + 1219
3acc4     69 AE 03 00 | 	long	@@@__system__dat_ + 1237
3acc8     81 AE 03 00 | 	long	@@@__system__dat_ + 1261
3accc     93 AE 03 00 | 	long	@@@__system__dat_ + 1279
3acd0     A6 AE 03 00 | 	long	@@@__system__dat_ + 1298
3acd4     4F 4B 00 4E 
3acd8     75 6D 65 72 
3acdc     69 63 61 6C 
3ace0     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3ace4     75 6D 65 6E 
3ace8     74 20 6F 75 
3acec     74 20 6F 66 
3acf0     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3acf4     61 69 6E 00 
3acf8     52 65 73 75 
3acfc     6C 74 20 6E 
3ad00     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3ad04     65 70 72 65 
3ad08     73 65 6E 74 
3ad0c     61 62 6C 65 
3ad10     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3ad14     65 67 61 6C 
3ad18     20 6D 75 6C 
3ad1c     74 69 62 79 
3ad20     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3ad24     65 71 75 65 
3ad28     6E 63 65 00 
3ad2c     4E 6F 20 73 
3ad30     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3ad34     66 69 6C 65 
3ad38     20 6F 72 20 
3ad3c     64 69 72 65 
3ad40     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3ad44     79 00 42 61 
3ad48     64 20 66 69 
3ad4c     6C 65 20 6E 
3ad50     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3ad54     72 00 50 65 
3ad58     72 6D 69 73 
3ad5c     73 69 6F 6E 
3ad60     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3ad64     69 65 64 00 
3ad68     4E 6F 74 20 
3ad6c     65 6E 6F 75 
3ad70     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3ad74     65 6D 6F 72 
3ad78     79 00 54 65 
3ad7c     6D 70 6F 72 
3ad80     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3ad84     66 61 69 6C 
3ad88     75 72 65 00 
3ad8c     46 69 6C 65 
3ad90     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3ad94     73 74 73 00 
3ad98     49 6E 76 61 
3ad9c     6C 69 64 20 
3ada0     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3ada4     6D 65 6E 74 
3ada8     00 54 6F 6F 
3adac     20 6D 61 6E 
3adb0     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3adb4     65 6E 20 66 
3adb8     69 6C 65 73 
3adbc     00 49 2F 4F 
3adc0     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3adc4     6F 72 00 4E 
3adc8     6F 74 20 61 
3adcc     20 64 69 72 
3add0     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3add4     72 79 00 49 
3add8     73 20 61 20 
3addc     64 69 72 65 
3ade0     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3ade4     79 00 52 65 
3ade8     61 64 20 6F 
3adec     6E 6C 79 20 
3adf0     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3adf4     20 73 79 73 
3adf8     74 65 6D 00 
3adfc     46 75 6E 63 
3ae00     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3ae04     20 6E 6F 74 
3ae08     20 69 6D 70 
3ae0c     6C 65 6D 65 
3ae10     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3ae14     00 44 69 72 
3ae18     65 63 74 6F 
3ae1c     72 79 20 6E 
3ae20     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3ae24     6D 70 74 79 
3ae28     00 4E 61 6D 
3ae2c     65 20 74 6F 
3ae30     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3ae34     6E 67 00 44 
3ae38     65 76 69 63 
3ae3c     65 20 6E 6F 
3ae40     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3ae44     65 6B 61 62 
3ae48     6C 65 00 42 
3ae4c     61 64 20 61 
3ae50     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3ae54     73 73 00 42 
3ae58     72 6F 6B 65 
3ae5c     6E 20 63 6F 
3ae60     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3ae64     74 69 6F 6E 
3ae68     00 44 65 76 
3ae6c     69 63 65 20 
3ae70     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3ae74     65 73 6F 75 
3ae78     72 63 65 20 
3ae7c     62 75 73 79 
3ae80     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3ae84     73 73 20 64 
3ae88     65 76 69 63 
3ae8c     65 20 6C 69 
3ae90     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3ae94     6F 20 73 70 
3ae98     61 63 65 20 
3ae9c     6F 6E 20 64 
3aea0     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3aea4     65 00 55 6E 
3aea8     6B 6E 6F 77 
3aeac     6E 20 65 72 
3aeb0     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3aeb4     00 00 00 00 
3aeb8     00 00 00 00 | 	byte	$00[8]
3aebc     05 00 00 00 
3aec0     00 00 00 00 
3aec4     00 00 00 00 
3aec8     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aecc     00 00 00 00 | 	byte	$00, $00, $00, $00
3aed0     00 00 E0 0A | 	long	(174 {__system___tx})<<20
3aed4     00 00 F0 0A | 	long	(175 {__system___rx})<<20
3aed8     00 00 00 00 | 	byte	$00, $00, $00, $00
3aedc     00 00 00 0B | 	long	(176 {__system___rxtxioctl_0696})<<20
3aee0     00 00 10 0B | 	long	(177 {__system____dummy_flush_0697})<<20
3aee4     00 00 00 00 
3aee8     00 00 00 00 | 	byte	$00[8]
3aeec     01 00 00 00 
3aef0     06 00 00 00 
3aef4     00 00 00 00 
3aef8     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aefc     00 00 00 00 
3af00     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3af04     00 00 E0 0A | 	long	(174 {__system___tx})<<20
3af08     00 00 F0 0A | 	long	(175 {__system___rx})<<20
3af0c     00 00 00 00 | 	byte	$00, $00, $00, $00
3af10     00 00 00 0B | 	long	(176 {__system___rxtxioctl_0696})<<20
3af14     00 00 10 0B | 	long	(177 {__system____dummy_flush_0697})<<20
3af18     00 00 00 00 
3af1c     00 00 00 00 | 	byte	$00[8]
3af20     01 00 00 00 
3af24     06 00 00 00 
3af28     00 00 00 00 
3af2c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3af30     00 00 00 00 
3af34     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3af38     00 00 E0 0A | 	long	(174 {__system___tx})<<20
3af3c     00 00 F0 0A | 	long	(175 {__system___rx})<<20
3af40     00 00 00 00 | 	byte	$00, $00, $00, $00
3af44     00 00 00 0B | 	long	(176 {__system___rxtxioctl_0696})<<20
3af48     00 00 10 0B | 	long	(177 {__system____dummy_flush_0697})<<20
3af4c     00 00 00 00 
      ...             
3b0bc     00 00 00 00 
3b0c0     00 00 00 00 | 	byte	$00[376]
3b0c4     C8 B0 03 00 | 	long	@@@__system__dat_ + 1844
3b0c8     00 00 00 00 
3b0cc     00 00 00 00 
3b0d0     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b0d4                 | 	alignl
3b0d4                 | _fatfs_cc_dat_
3b0d4     C7 00 FC 00 
3b0d8     E9 00 E2 00 
3b0dc     E4 00 E0 00 
3b0e0     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3b0e4     EA 00 EB 00 
3b0e8     E8 00 EF 00 
3b0ec     EE 00 EC 00 
3b0f0     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3b0f4     C9 00 E6 00 
3b0f8     C6 00 F4 00 
3b0fc     F6 00 F2 00 
3b100     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3b104     FF 00 D6 00 
3b108     DC 00 F8 00 
3b10c     A3 00 D8 00 
3b110     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3b114     E1 00 ED 00 
3b118     F3 00 FA 00 
3b11c     F1 00 D1 00 
3b120     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3b124     BF 00 AE 00 
3b128     AC 00 BD 00 
3b12c     BC 00 A1 00 
3b130     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3b134     91 25 92 25 
3b138     93 25 02 25 
3b13c     24 25 C1 00 
3b140     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3b144     A9 00 63 25 
3b148     51 25 57 25 
3b14c     5D 25 A2 00 
3b150     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3b154     14 25 34 25 
3b158     2C 25 1C 25 
3b15c     00 25 3C 25 
3b160     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3b164     5A 25 54 25 
3b168     69 25 66 25 
3b16c     60 25 50 25 
3b170     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3b174     F0 00 D0 00 
3b178     CA 00 CB 00 
3b17c     C8 00 31 01 
3b180     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3b184     CF 00 18 25 
3b188     0C 25 88 25 
3b18c     84 25 A6 00 
3b190     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3b194     D3 00 DF 00 
3b198     D4 00 D2 00 
3b19c     F5 00 D5 00 
3b1a0     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3b1a4     DE 00 DA 00 
3b1a8     DB 00 D9 00 
3b1ac     FD 00 DD 00 
3b1b0     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3b1b4     AD 00 B1 00 
3b1b8     17 20 BE 00 
3b1bc     B6 00 A7 00 
3b1c0     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3b1c4     B0 00 A8 00 
3b1c8     B7 00 B9 00 
3b1cc     B3 00 B2 00 
3b1d0     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3b1d4     61 00 1A 03 
3b1d8     E0 00 17 03 
3b1dc     F8 00 07 03 
3b1e0     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3b1e4     78 01 00 01 
3b1e8     30 01 32 01 
3b1ec     06 01 39 01 
3b1f0     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3b1f4     2E 01 79 01 
3b1f8     06 01 80 01 
3b1fc     4D 00 43 02 
3b200     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3b204     82 01 84 01 
3b208     84 01 86 01 
3b20c     87 01 87 01 
3b210     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3b214     8B 01 8B 01 
3b218     8D 01 8E 01 
3b21c     8F 01 90 01 
3b220     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3b224     93 01 94 01 
3b228     F6 01 96 01 
3b22c     97 01 98 01 
3b230     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3b234     9B 01 9C 01 
3b238     9D 01 20 02 
3b23c     9F 01 A0 01 
3b240     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3b244     A2 01 A4 01 
3b248     A4 01 A6 01 
3b24c     A7 01 A7 01 
3b250     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3b254     AB 01 AC 01 
3b258     AC 01 AE 01 
3b25c     AF 01 AF 01 
3b260     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3b264     B3 01 B3 01 
3b268     B5 01 B5 01 
3b26c     B7 01 B8 01 
3b270     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3b274     BB 01 BC 01 
3b278     BC 01 BE 01 
3b27c     F7 01 C0 01 
3b280     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3b284     C3 01 C4 01 
3b288     C5 01 C4 01 
3b28c     C7 01 C8 01 
3b290     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3b294     CB 01 CA 01 
3b298     CD 01 10 01 
3b29c     DD 01 01 00 
3b2a0     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3b2a4     12 01 F3 01 
3b2a8     03 00 F1 01 
3b2ac     F4 01 F4 01 
3b2b0     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3b2b4     22 02 12 01 
3b2b8     3A 02 09 00 
3b2bc     65 2C 3B 02 
3b2c0     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3b2c4     66 2C 3F 02 
3b2c8     40 02 41 02 
3b2cc     41 02 46 02 
3b2d0     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3b2d4     40 00 81 01 
3b2d8     86 01 55 02 
3b2dc     89 01 8A 01 
3b2e0     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3b2e4     5A 02 90 01 
3b2e8     5C 02 5D 02 
3b2ec     5E 02 5F 02 
3b2f0     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3b2f4     62 02 94 01 
3b2f8     64 02 65 02 
3b2fc     66 02 67 02 
3b300     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3b304     6A 02 62 2C 
3b308     6C 02 6D 02 
3b30c     6E 02 9C 01 
3b310     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3b314     9D 01 73 02 
3b318     74 02 9F 01 
3b31c     76 02 77 02 
3b320     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3b324     7A 02 7B 02 
3b328     7C 02 64 2C 
3b32c     7E 02 7F 02 
3b330     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3b334     82 02 A9 01 
3b338     84 02 85 02 
3b33c     86 02 87 02 
3b340     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3b344     B1 01 B2 01 
3b348     45 02 8D 02 
3b34c     8E 02 8F 02 
3b350     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3b354     B7 01 7B 03 
3b358     03 00 FD 03 
3b35c     FE 03 FF 03 
3b360     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3b364     86 03 88 03 
3b368     89 03 8A 03 
3b36c     B1 03 11 03 
3b370     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3b374     A3 03 A3 03 
3b378     C4 03 08 03 
3b37c     CC 03 03 00 
3b380     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3b384     8F 03 D8 03 
3b388     18 01 F2 03 
3b38c     0A 00 F9 03 
3b390     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3b394     F5 03 F6 03 
3b398     F7 03 F7 03 
3b39c     F9 03 FA 03 
3b3a0     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3b3a4     20 03 50 04 
3b3a8     10 07 60 04 
3b3ac     22 01 8A 04 
3b3b0     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3b3b4     0E 01 CF 04 
3b3b8     01 00 C0 04 
3b3bc     D0 04 44 01 
3b3c0     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3b3c4     00 00 7D 1D 
3b3c8     01 00 63 2C 
3b3cc     00 1E 96 01 
3b3d0     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3b3d4     00 1F 08 06 
3b3d8     10 1F 06 06 
3b3dc     20 1F 08 06 
3b3e0     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3b3e4     40 1F 06 06 
3b3e8     51 1F 07 00 
3b3ec     59 1F 52 1F 
3b3f0     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3b3f4     5D 1F 56 1F 
3b3f8     5F 1F 60 1F 
3b3fc     08 06 70 1F 
3b400     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3b404     BB 1F C8 1F 
3b408     C9 1F CA 1F 
3b40c     CB 1F DA 1F 
3b410     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3b414     F9 1F EA 1F 
3b418     EB 1F FA 1F 
3b41c     FB 1F 80 1F 
3b420     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3b424     08 06 A0 1F 
3b428     08 06 B0 1F 
3b42c     04 00 B8 1F 
3b430     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3b434     BC 1F CC 1F 
3b438     01 00 C3 1F 
3b43c     D0 1F 02 06 
3b440     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3b444     E5 1F 01 00 
3b448     EC 1F F3 1F 
3b44c     01 00 FC 1F 
3b450     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3b454     32 21 70 21 
3b458     10 02 84 21 
3b45c     01 00 83 21 
3b460     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3b464     30 2C 2F 04 
3b468     60 2C 02 01 
3b46c     67 2C 06 01 
3b470     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3b474     80 2C 64 01 
3b478     00 2D 26 08 
3b47c     41 FF 1A 03 
3b480     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3b484     05 07 09 0E 
3b488     10 12 14 16 
3b48c     18 1C 1E 43 
3b490     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3b494     41 41 43 45 
3b498     45 45 49 49 
3b49c     49 41 41 45 
3b4a0     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3b4a4     4F 55 55 59 
3b4a8     4F 55 4F 9C 
3b4ac     4F 9E 9F 41 
3b4b0     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3b4b4     A5 A6 A7 A8 
3b4b8     A9 AA AB AC 
3b4bc     AD AE AF B0 
3b4c0     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3b4c4     41 41 41 B8 
3b4c8     B9 BA BB BC 
3b4cc     BD BE BF C0 
3b4d0     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3b4d4     C5 41 41 C8 
3b4d8     C9 CA CB CC 
3b4dc     CD CE CF D1 
3b4e0     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3b4e4     49 49 49 49 
3b4e8     D9 DA DB DC 
3b4ec     DD 49 DF 4F 
3b4f0     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3b4f4     4F E6 E8 E8 
3b4f8     55 55 55 59 
3b4fc     59 EE EF F0 
3b500     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3b504     F5 F6 F7 F8 
3b508     F9 FA FB FC 
3b50c     FD FE FF 00 
3b510     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3b514     00 00 00 00 | 	byte	$00, $00, $00, $00
3b518     00 00 D0 09 | 	long	(157 {_fatfs_cc_v_close})<<20
3b51c     00 00 E0 09 | 	long	(158 {_fatfs_cc_v_read})<<20
3b520     00 00 F0 09 | 	long	(159 {_fatfs_cc_v_write})<<20
3b524     00 00 00 0A | 	long	(160 {_fatfs_cc_v_lseek})<<20
3b528     00 00 10 0A | 	long	(161 {_fatfs_cc_v_ioctl})<<20
3b52c     00 00 20 0B | 	long	(178 {_fatfs_cc_v_flush})<<20
3b530     00 00 00 00 
3b534     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3b538     00 00 20 0A | 	long	(162 {_fatfs_cc_v_open})<<20
3b53c     00 00 30 0A | 	long	(163 {_fatfs_cc_v_creat})<<20
3b540     00 00 40 0A | 	long	(164 {_fatfs_cc_v_opendir})<<20
3b544     00 00 50 0A | 	long	(165 {_fatfs_cc_v_closedir})<<20
3b548     00 00 60 0A | 	long	(166 {_fatfs_cc_v_readdir})<<20
3b54c     00 00 70 0A | 	long	(167 {_fatfs_cc_v_stat})<<20
3b550     00 00 80 0A | 	long	(168 {_fatfs_cc_v_mkdir})<<20
3b554     00 00 90 0A | 	long	(169 {_fatfs_cc_v_rmdir})<<20
3b558     00 00 A0 0A | 	long	(170 {_fatfs_cc_v_remove})<<20
3b55c     00 00 B0 0A | 	long	(171 {_fatfs_cc_v_rename})<<20
3b560     00 00 C0 0A | 	long	(172 {_fatfs_cc_v_init})<<20
3b564     00 00 D0 0A | 	long	(173 {_fatfs_cc_v_deinit})<<20
3b568     FF FF FF FF 
3b56c     1F 00 00 00 
3b570     1C 00 00 00 
3b574     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
3b578     1E 00 00 00 
3b57c     1F 00 00 00 
3b580     1E 00 00 00 
3b584     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3b588     1F 00 00 00 
3b58c     1E 00 00 00 
3b590     1F 00 00 00 
3b594     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3b598     1F 00 00 00 
3b59c     00 00 00 00 
3b5a0     1F 00 00 00 
3b5a4     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
3b5a8     5A 00 00 00 
3b5ac     78 00 00 00 
3b5b0     97 00 00 00 
3b5b4     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
3b5b8     D4 00 00 00 
3b5bc     F3 00 00 00 
3b5c0     11 01 00 00 
3b5c4     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
3b5c8     4E 01 00 00 
3b5cc     6D 01 00 00 
3b5d0     FF FF FF FF 
3b5d4     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
3b5d8     00 00 00 00 
      ...             
3b5f0     00 00 00 00 
3b5f4     00 00 00 00 | 	byte	$00[32]
3b5f8     16 B6 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
3b5fc     1A B6 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
3b600     00 00 00 00 
3b604     00 00 00 00 
3b608     00 00 00 00 
3b60c     00 00 00 00 
3b610     00 00       | 	byte	$00[18]
3b612     3F 3F 3F 00 
3b616     55 43 54 00 
3b61a     55 43 54 00 
3b61e     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3b622     00 00 00 00 
3b626     00 00 00    | 	byte	$00[7]
3b629     CA 9A 3B 00 
3b62d     00 00 00 01 
3b631     01 01 01 01 
3b635     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3b639     91 11 11 11 
3b63d     11 01 01 01 
3b641     01 01 01 01 
3b645     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3b649     01 01 01 01 
3b64d     01 01 01    | 	byte	$01[7]
3b650     90 20 20 20 
3b654     20 20 20 20 
3b658     20 20 20 20 
3b65c     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3b660     42 42 42 42 
3b664     42 42 42 42 
3b668     42 42       | 	byte	$42[10]
3b66a     20 20 20 20 
3b66e     20 20 20    | 	byte	$20[7]
3b671     44 44 44 44 
3b675     44 44       | 	byte	$44[6]
3b677     04 04 04 04 
3b67b     04 04 04 04 
3b67f     04 04 04 04 
3b683     04 04 04 04 
3b687     04 04 04 04 | 	byte	$04[20]
3b68b     20 20 20 20 
3b68f     20 20       | 	byte	$20[6]
3b691     48 48 48 48 
3b695     48 48       | 	byte	$48[6]
3b697     08 08 08 08 
3b69b     08 08 08 08 
3b69f     08 08 08 08 
3b6a3     08 08 08 08 
3b6a7     08 08 08 08 | 	byte	$08[20]
3b6ab     20 20 20 20 
3b6af     01 00 00 00 
3b6b3     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3b6b4                 | __methodtable__
3b6b4     14 B5 01 00 | 	long	@_do_no_command
3b6b8     BC 26 01 00 | 	long	@_do_plus
3b6bc     A8 2B 01 00 | 	long	@_do_minus
3b6c0     70 30 01 00 | 	long	@_do_or
3b6c4     88 31 01 00 | 	long	@_do_mul
3b6c8     14 37 01 00 | 	long	@_do_fdiv
3b6cc     58 2F 01 00 | 	long	@_do_and
3b6d0     F4 34 01 00 | 	long	@_do_div
3b6d4     DC 38 01 00 | 	long	@_do_mod
3b6d8     FC 3A 01 00 | 	long	@_do_shl
3b6dc     14 3C 01 00 | 	long	@_do_shr
3b6e0     2C 3D 01 00 | 	long	@_do_power
3b6e4     3C 1A 01 00 | 	long	@_do_getvar
3b6e8     D0 BB 00 00 | 	long	@_do_push
3b6ec     3C 14 01 00 | 	long	@_do_assign
3b6f0     D8 82 01 00 | 	long	@_do_cls
3b6f4     D0 FD 00 00 | 	long	@_do_new
3b6f8     50 83 01 00 | 	long	@_do_plot
3b6fc     20 84 01 00 | 	long	@_do_draw
3b700     94 8D 01 00 | 	long	@_do_print
3b704     8C 86 01 00 | 	long	@_do_circle
3b708     14 85 01 00 | 	long	@_do_fcircle
3b70c     04 88 01 00 | 	long	@_do_box
3b710     AC 8B 01 00 | 	long	@_do_frame
3b714     18 83 01 00 | 	long	@_do_color
3b718     EC 95 00 00 | 	long	@_do_for
3b71c     40 99 00 00 | 	long	@_do_next
3b720     34 FB 00 00 | 	long	@_do_list
3b724     44 CE 00 00 | 	long	@_do_run
3b728     F8 12 01 00 | 	long	@_do_error
3b72c     F0 FF 00 00 | 	long	@_do_fast_goto
3b730     58 0F 01 00 | 	long	@_do_find_goto
3b734     68 11 01 00 | 	long	@_do_slow_goto
3b738     30 B1 01 00 | 	long	@_do_nothing
3b73c     14 C2 00 00 | 	long	@_test_csave
3b740     78 C5 00 00 | 	long	@_do_save
3b744     84 C9 00 00 | 	long	@_do_load
3b748     C8 9C 01 00 | 	long	@_do_pinwrite
3b74c     64 A7 01 00 | 	long	@_do_waitms
3b750     A0 A8 01 00 | 	long	@_do_waitvbl
3b754     C8 AE 01 00 | 	long	@_do_if
3b758     AC AF 01 00 | 	long	@_do_else
3b75c     F4 3E 01 00 | 	long	@_do_eq
3b760     6C 4D 01 00 | 	long	@_do_ge
3b764     44 52 01 00 | 	long	@_do_le
3b768     CC 43 01 00 | 	long	@_do_gt
3b76c     A4 48 01 00 | 	long	@_do_lt
3b770     1C 57 01 00 | 	long	@_do_ne
3b774     54 5D 01 00 | 	long	@_do_rnd
3b778     34 B1 01 00 | 	long	@_do_brun
3b77c     00 B4 01 00 | 	long	@_do_beep
3b780     D0 A8 01 00 | 	long	@_do_dir
3b784     E4 92 01 00 | 	long	@_do_paper
3b788     6C 93 01 00 | 	long	@_do_ink
3b78c     08 94 01 00 | 	long	@_do_font
3b790     84 94 01 00 | 	long	@_do_mode
3b794     6C B3 01 00 | 	long	@_do_mouse
3b798     70 82 01 00 | 	long	@_do_gettime
3b79c     A0 B3 01 00 | 	long	@_do_cursor
3b7a0     D4 B3 01 00 | 	long	@_do_click
3b7a4     FC 7F 01 00 | 	long	@_do_mousex
3b7a8     40 80 01 00 | 	long	@_do_mousey
3b7ac     C8 80 01 00 | 	long	@_do_mousek
3b7b0     84 80 01 00 | 	long	@_do_mousew
3b7b4     28 60 01 00 | 	long	@_do_sin
3b7b8     CC 75 01 00 | 	long	@_do_stick
3b7bc     50 77 01 00 | 	long	@_do_strig
3b7c0     10 7F 01 00 | 	long	@_do_sprite
3b7c4     9C 7B 01 00 | 	long	@_do_defsprite
3b7c8     D4 78 01 00 | 	long	@_do_getpixel
3b7cc     AC A8 01 00 | 	long	@_do_waitclock
3b7d0     20 B5 01 00 | 	long	@_do_negative
3b7d4     0C 81 01 00 | 	long	@_do_rdpin
3b7d8     78 81 01 00 | 	long	@_do_rqpin
3b7dc     EC 81 01 00 | 	long	@_do_pinread
3b7e0     60 9F 01 00 | 	long	@_do_wrpin
3b7e4     E0 9F 01 00 | 	long	@_do_wxpin
3b7e8     60 A0 01 00 | 	long	@_do_wypin
3b7ec     50 9D 01 00 | 	long	@_do_pinfloat
3b7f0     90 9D 01 00 | 	long	@_do_pinlo
3b7f4     D0 9D 01 00 | 	long	@_do_pinhi
3b7f8     50 9E 01 00 | 	long	@_do_pinstart
3b7fc     10 9E 01 00 | 	long	@_do_pintoggle
3b800     E0 A0 01 00 | 	long	@_do_position
3b804     84 6F 01 00 | 	long	@_do_cos
3b808     A4 70 01 00 | 	long	@_do_tan
3b80c     C8 73 01 00 | 	long	@_do_atn
3b810     B0 71 01 00 | 	long	@_do_asin
3b814     BC 72 01 00 | 	long	@_do_acos
3b818     DC 74 01 00 | 	long	@_do_sqr
3b81c     EC 89 01 00 | 	long	@_do_fill
3b820     48 F2 00 00 | 	long	@_do_defsnd
3b824     94 D1 00 00 | 	long	@_do_defenv
3b828     D0 AF 01 00 | 	long	@_do_rad
3b82c     F8 AF 01 00 | 	long	@_do_deg
3b830     74 B0 01 00 | 	long	@_do_int
3b834     28 DE 00 00 | 	long	@_do_play
3b838     28 9A 01 00 | 	long	@_do_setdelay
3b83c     80 99 01 00 | 	long	@_do_setenv
3b840     D0 9A 01 00 | 	long	@_do_setlen
3b844     20 9C 01 00 | 	long	@_do_setpan
3b848     78 9B 01 00 | 	long	@_do_setvol
3b84c     30 98 01 00 | 	long	@_do_setwave
3b850     D8 98 01 00 | 	long	@_do_setsustain
3b854     B0 F1 00 00 | 	long	@_do_release
3b858     1C 5F 01 00 | 	long	@_do_getenvsustain
3b85c     68 A1 01 00 | 	long	@_do_poke
3b860     40 A2 01 00 | 	long	@_do_dpoke
3b864     18 A3 01 00 | 	long	@_do_lpoke
3b868     F0 A3 01 00 | 	long	@_do_peek
3b86c     A0 A4 01 00 | 	long	@_do_dpeek
3b870     4C A5 01 00 | 	long	@_do_lpeek
3b874     5C A6 01 00 | 	long	@_do_adr
3b878     F8 A5 01 00 | 	long	@_do_fre
3b87c     60 A6 01 00 | 	long	@_do_getnotevalue
3b880     F4 1F 01 00 | 	long	@_do_getaddr
3b884     E4 23 01 00 | 	long	@_do_inkey
3b888     D0 B5 01 00 | 	long	@_do_abs
3b88c     C4 6C 01 00 | 	long	@_do_hex
3b890     24 6E 01 00 | 	long	@_do_bin
3b894     C0 69 01 00 | 	long	@_do_val
3b898     C4 68 01 00 | 	long	@_do_chr
3b89c     00 66 01 00 | 	long	@_do_asc
3b8a0     7C 64 01 00 | 	long	@_do_left
3b8a4     F8 62 01 00 | 	long	@_do_right
3b8a8     34 61 01 00 | 	long	@_do_mid
3b8ac     58 67 01 00 | 	long	@_do_len
3b8b0     D4 94 00 00 | 	long	@_do_gosub
3b8b4     5C 98 00 00 | 	long	@_do_return
3b8b8     10 CE 00 00 | 	long	@_do_end
3b8bc     08 99 00 00 | 	long	@_do_pop
3b8c0     24 7A 01 00 | 	long	@_do_log
3b8c4     60 EA 00 00 | 	long	@_do_changevol
3b8c8     74 EF 00 00 | 	long	@_do_changewav
3b8cc     40 EB 00 00 | 	long	@_do_changepan
3b8d0     50 EC 00 00 | 	long	@_do_changefreq
3b8d4     A0 F0 00 00 | 	long	@_do_shutup
3b8d8     20 B0 01 00 | 	long	@_do_round
3b8dc     74 C9 00 00 | 	long	@_do_enter
3b8e0     E0 00 01 00 | 	long	@_do_open
3b8e4     F8 03 01 00 | 	long	@_do_close
3b8e8     74 04 01 00 | 	long	@_do_get
3b8ec     18 0A 01 00 | 	long	@_do_put
3b8f0     E0 F2 01 00 | 	long	@_hg010b_spin2_putchar
3b8f4     38 02 03 00 | 	long	@__struct___bas_wrap_sender_tx
3b8f8     7C 02 03 00 | 	long	@__struct___bas_wrap_sender_rx
3b8fc     C4 02 03 00 | 	long	@__struct___bas_wrap_sender_close
3b900     68 01 03 00 | 	long	@__struct__s_vfs_file_t_putchar
3b904     D8 01 03 00 | 	long	@__struct__s_vfs_file_t_getchar
3b908     20 01 03 00 | 	long	@___strs_cl_pfunc
3b90c     B4 5E 02 00 | 	long	@__system____root_opendir
3b910     50 5F 02 00 | 	long	@__system____root_closedir
3b914     CC 5E 02 00 | 	long	@__system____root_readdir
3b918     58 5F 02 00 | 	long	@__system____root_stat
3b91c     A4 57 02 00 | 	long	@__system____default_putc
3b920     28 57 02 00 | 	long	@__system____default_getc
3b924     4C 58 02 00 | 	long	@__system____default_flush
3b928     24 EC 02 00 | 	long	@_fatfs_cc_v_close
3b92c     40 F0 02 00 | 	long	@_fatfs_cc_v_read
3b930     54 F1 02 00 | 	long	@_fatfs_cc_v_write
3b934     34 F2 02 00 | 	long	@_fatfs_cc_v_lseek
3b938     BC F2 02 00 | 	long	@_fatfs_cc_v_ioctl
3b93c     10 F3 02 00 | 	long	@_fatfs_cc_v_open
3b940     88 EB 02 00 | 	long	@_fatfs_cc_v_creat
3b944     68 EC 02 00 | 	long	@_fatfs_cc_v_opendir
3b948     DC EC 02 00 | 	long	@_fatfs_cc_v_closedir
3b94c     1C ED 02 00 | 	long	@_fatfs_cc_v_readdir
3b950     50 EE 02 00 | 	long	@_fatfs_cc_v_stat
3b954     D0 F2 02 00 | 	long	@_fatfs_cc_v_mkdir
3b958     F0 F2 02 00 | 	long	@_fatfs_cc_v_rmdir
3b95c     E0 F2 02 00 | 	long	@_fatfs_cc_v_remove
3b960     00 F3 02 00 | 	long	@_fatfs_cc_v_rename
3b964     20 F4 02 00 | 	long	@_fatfs_cc_v_init
3b968     28 F4 02 00 | 	long	@_fatfs_cc_v_deinit
3b96c     E0 0B 02 00 | 	long	@__system___tx
3b970     20 0C 02 00 | 	long	@__system___rx
3b974     C4 6A 02 00 | 	long	@__system___rxtxioctl_0696
3b978     1C 6B 02 00 | 	long	@__system____dummy_flush_0697
3b97c     F0 F3 02 00 | 	long	@_fatfs_cc_v_flush
3b980                 | __heap_base
3b980     00 00 00 00 
      ...             
6a780     00 00 00 00 
6a784     00 00 00 00 | 	long	0[48002]
6a788                 | objmem
6a788     00 00 00 00 
      ...             
74ba0     00 00 00 00 
74ba4     00 00 00 00 | 	long	0[10504]
74ba8                 | stackspace
74ba8     00 00 00 00 | 	long	0[1]
74bac 100             | 	org	COG_BSS_START
74bac 100             | _var01
74bac 100             | 	res	1
74bac 101             | _var02
74bac 101             | 	res	1
74bac 102             | _var03
74bac 102             | 	res	1
74bac 103             | _var04
74bac 103             | 	res	1
74bac 104             | _var05
74bac 104             | 	res	1
74bac 105             | _var06
74bac 105             | 	res	1
74bac 106             | _var07
74bac 106             | 	res	1
74bac 107             | _var08
74bac 107             | 	res	1
74bac 108             | _var09
74bac 108             | 	res	1
74bac 109             | arg01
74bac 109             | 	res	1
74bac 10a             | arg02
74bac 10a             | 	res	1
74bac 10b             | arg03
74bac 10b             | 	res	1
74bac 10c             | arg04
74bac 10c             | 	res	1
74bac 10d             | arg05
74bac 10d             | 	res	1
74bac 10e             | arg06
74bac 10e             | 	res	1
74bac 10f             | local01
74bac 10f             | 	res	1
74bac 110             | local02
74bac 110             | 	res	1
74bac 111             | local03
74bac 111             | 	res	1
74bac 112             | local04
74bac 112             | 	res	1
74bac 113             | local05
74bac 113             | 	res	1
74bac 114             | local06
74bac 114             | 	res	1
74bac 115             | local07
74bac 115             | 	res	1
74bac 116             | local08
74bac 116             | 	res	1
74bac 117             | local09
74bac 117             | 	res	1
74bac 118             | local10
74bac 118             | 	res	1
74bac 119             | local11
74bac 119             | 	res	1
74bac 11a             | local12
74bac 11a             | 	res	1
74bac 11b             | local13
74bac 11b             | 	res	1
74bac 11c             | local14
74bac 11c             | 	res	1
74bac 11d             | local15
74bac 11d             | 	res	1
74bac 11e             | local16
74bac 11e             | 	res	1
74bac 11f             | local17
74bac 11f             | 	res	1
74bac 120             | local18
74bac 120             | 	res	1
74bac 121             | local19
74bac 121             | 	res	1
74bac 122             | local20
74bac 122             | 	res	1
74bac 123             | local21
74bac 123             | 	res	1
74bac 124             | local22
74bac 124             | 	res	1
74bac 125             | local23
74bac 125             | 	res	1
74bac 126             | local24
74bac 126             | 	res	1
74bac 127             | local25
74bac 127             | 	res	1
74bac 128             | local26
74bac 128             | 	res	1
74bac 129             | local27
74bac 129             | 	res	1
74bac 12a             | local28
74bac 12a             | 	res	1
74bac 12b             | local29
74bac 12b             | 	res	1
74bac 12c             | local30
74bac 12c             | 	res	1
74bac 12d             | local31
74bac 12d             | 	res	1
74bac 12e             | local32
74bac 12e             | 	res	1
74bac 12f             | local33
74bac 12f             | 	res	1
74bac 130             | local34
74bac 130             | 	res	1
74bac 131             | local35
74bac 131             | 	res	1
74bac 132             | local36
74bac 132             | 	res	1
74bac 133             | local37
74bac 133             | 	res	1
74bac 134             | local38
74bac 134             | 	res	1
74bac 135             | local39
74bac 135             | 	res	1
74bac 136             | local40
74bac 136             | 	res	1
74bac 137             | local41
74bac 137             | 	res	1
74bac 138             | local42
74bac 138             | 	res	1
74bac 139             | local43
74bac 139             | 	res	1
74bac 13a             | local44
74bac 13a             | 	res	1
74bac 13b             | local45
74bac 13b             | 	res	1
74bac 13c             | local46
74bac 13c             | 	res	1
74bac 13d             | local47
74bac 13d             | 	res	1
74bac 13e             | muldiva_
74bac 13e             | 	res	1
74bac 13f             | muldivb_
74bac 13f             | 	res	1
74bac 140             | 	fit	480
74bac 140             | 
