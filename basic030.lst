00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic030.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 30
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_cload = 184
00000                 | 	token_blit = 185
00000                 | 	token_playsample = 186
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 AC D9 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 33 67 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 32 65 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 33 65 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 66 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 64 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 32 65 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 33 67 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 80 B7 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed B4 B4 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 88 A5 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 94 A7 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 EC A2 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 EC 0F 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 D4 AE 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 60 41 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 24 14 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 10 69 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa C8 66 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb A0 78 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc D8 59 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1C 4A 05 F6 | 	mov	COUNT_, #28
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 1E 06 F6 | 	mov	local01, #0
00810     00 20 06 F6 | 	mov	local02, #0
00814     00 22 06 F6 | 	mov	local03, #0
00818     00 24 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     EC E9 B1 FD | 	call	#_hg010b_spin2_waitvbl
00824     EC F8 B1 FD | 	call	#_usbnew_spin2_get_key
00828     FD 26 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
00840     59 00 00 FF 
00844     E4 E5 05 F1 | 	add	objptr, ##46052
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     59 00 00 FF 
00850     E4 E5 85 F1 | 	sub	objptr, ##46052
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 26 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 26 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     58 00 00 FF 
00868     18 E5 05 F1 | 	add	objptr, ##45336
0086c     F2 28 02 FB | 	rdlong	local06, objptr
00870     58 00 00 FF 
00874     18 E5 85 F1 | 	sub	objptr, ##45336
00878     01 28 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
00888     56 00 00 FF 
0088c     44 2A 06 F6 | 	mov	local07, ##44100
00890     0C 2C C6 F9 | 	decod	local08, #12
00894     00 2E 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 30 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
008d0     E4 FB B1 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     38 03 B2 FD | 	call	#__system___waitms
008e4     07 28 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     30 FD B1 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 26 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 26 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     13 29 02 C6 |  if_b	mov	local06, local05
00914     14 29 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 28 16 C2 |  if_b	cmp	local06, #224 wc
0091c     13 23 02 C6 |  if_b	mov	local03, local05
00920     01 1E 06 C6 |  if_b	mov	local01, #1
00924     11 25 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 26 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 20 06 36 |  if_ae	mov	local02, #0
00934     00 1E 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 26 0E F2 | 	cmp	local05, #0 wz
0093c     01 1E 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 20 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 26 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 20 0E C2 |  if_b	cmp	local02, #25 wz
00950     11 25 02 86 |  if_c_and_z	mov	local04, local03
00954     15 20 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 24 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     58 00 00 FF 
00964     18 E5 05 F1 | 	add	objptr, ##45336
00968     F2 28 02 FB | 	rdlong	local06, objptr
0096c     58 00 00 FF 
00970     18 E5 85 F1 | 	sub	objptr, ##45336
00974     01 28 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     59 00 00 FF 
00980     BC E5 05 F1 | 	add	objptr, ##46012
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 2A 06 F6 | 	mov	local07, ##44100
00990     0C 2C C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 2E 02 FB | 	rdlong	local09, objptr
0099c     01 30 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     17 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     4E 00 00 FF 
009bc     EC E4 85 F1 | 	sub	objptr, ##40172
009c0     F4 FA B1 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     12 13 02 F6 | 	mov	arg01, local04
009d0     34 CF B1 FD | 	call	#_scantochar
009d4     FD 32 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     59 00 00 FF 
009dc     E4 E5 05 F1 | 	add	objptr, ##46052
009e0     F2 34 02 FB | 	rdlong	local12, objptr
009e4     59 00 00 FF 
009e8     E4 E5 85 F1 | 	sub	objptr, ##46052
009ec     1A 29 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 32 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 32 16 F2 | 	cmp	local11, #123 wc
00a00     20 32 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 32 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 32 16 F2 | 	cmp	local11, #91 wc
00a14     20 32 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 32 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 32 16 F2 | 	cmp	local11, #32 wc
00a28     09 32 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 32 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 32 16 F2 | 	cmp	local11, #23 wc
00a3c     27 32 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 32 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 32 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 28 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 28 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     59 00 00 FF 
00a64     E0 E5 05 F1 | 	add	objptr, ##46048
00a68     F2 28 0A FB | 	rdlong	local06, objptr wz
00a6c     59 00 00 FF 
00a70     E0 E5 85 F1 | 	sub	objptr, ##46048
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 2A C2 FA | 	rdbyte	local07, objptr
00a80     15 2D E2 F8 | 	getbyte	local08, local07, #0
00a84     80 2C 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 36 02 FB | 	rdlong	local13, objptr
00a90     1B 39 02 F6 | 	mov	local14, local13
00a94     16 39 02 F1 | 	add	local14, local08
00a98     7F 38 06 F1 | 	add	local14, #127
00a9c     15 2B E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 2A 06 FA | 	mul	local07, #128
00aa4     15 37 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 2E E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     17 3B 52 F6 | 	abs	local15, local09 wc
00ab8     01 3A 46 F0 | 	shr	local15, #1
00abc     1D 37 82 F3 | 	sumc	local13, local15
00ac0     01 36 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     1C 3D 02 F6 | 	mov	local16, local14
00ac8     01 3C 86 F1 | 	sub	local16, #1
00acc     1E 13 02 F6 | 	mov	arg01, local16
00ad0     2C CD B1 FD | 	call	#_pspeek
00ad4     FD 3E 02 F6 | 	mov	local17, result1
00ad8     1F 41 E2 F8 | 	getbyte	local18, local17, #0
00adc     20 43 02 F6 | 	mov	local19, local18
00ae0     1C 13 02 F6 | 	mov	arg01, local14
00ae4     21 15 02 F6 | 	mov	arg02, local19
00ae8     CC CC B1 FD | 	call	#_pspoke
00aec     01 38 86 F1 | 	sub	local14, #1
00af0     1B 39 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     59 00 00 FF 
00afc     EC E5 05 F1 | 	add	objptr, ##46060
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     59 00 00 FF 
00b08     AE E5 85 F1 | 	sub	objptr, ##45998
00b0c     F2 2A C2 FA | 	rdbyte	local07, objptr
00b10     15 2D E2 F8 | 	getbyte	local08, local07, #0
00b14     80 2C 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 2E 02 FB | 	rdlong	local09, objptr
00b20     17 39 02 F6 | 	mov	local14, local09
00b24     16 39 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 3A E2 FA | 	rdword	local15, objptr
00b30     1D 31 32 F9 | 	getword	local10, local15, #0
00b34     18 45 52 F6 | 	abs	local20, local10 wc
00b38     01 44 46 F0 | 	shr	local20, #1
00b3c     22 45 82 F6 | 	negc	local20, local20
00b40     22 39 02 F1 | 	add	local14, local20
00b44     15 2B E2 F8 | 	getbyte	local07, local07, #0
00b48     80 2A 06 FA | 	mul	local07, #128
00b4c     17 2D 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     16 47 02 F6 | 	mov	local21, local08
00b58     15 47 02 F1 | 	add	local21, local07
00b5c     80 46 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     23 39 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 28 E2 FA | 	rdword	local06, objptr
00b70     59 00 00 FF 
00b74     B0 E5 05 F1 | 	add	objptr, ##46000
00b78     F2 2C 02 FB | 	rdlong	local08, objptr
00b7c     01 2C 66 F0 | 	shl	local08, #1
00b80     16 29 02 F1 | 	add	local06, local08
00b84     59 00 00 FF 
00b88     AE E5 85 F1 | 	sub	objptr, ##45998
00b8c     F2 34 C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 34 06 FA | 	mul	local12, #16
00b98     04 34 06 F1 | 	add	local12, #4
00b9c     1C 13 02 F6 | 	mov	arg01, local14
00ba0     5C CC B1 FD | 	call	#_pspeek
00ba4     FD 2A E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 2C 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 30 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     18 2F 02 F6 | 	mov	local09, local10
00bc0     14 13 02 F6 | 	mov	arg01, local06
00bc4     1A 15 02 F6 | 	mov	arg02, local12
00bc8     15 17 02 F6 | 	mov	arg03, local07
00bcc     16 19 02 F6 | 	mov	arg04, local08
00bd0     17 1B 02 F6 | 	mov	arg05, local09
00bd4     34 E4 B1 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     59 00 00 FF 
00bdc     EC E5 05 F1 | 	add	objptr, ##46060
00be0     F2 28 02 FB | 	rdlong	local06, objptr
00be4     01 28 06 F1 | 	add	local06, #1
00be8     F2 28 62 FC | 	wrlong	local06, objptr
00bec     59 00 00 FF 
00bf0     EC E5 85 F1 | 	sub	objptr, ##46060
00bf4     01 38 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     19 13 02 F6 | 	mov	arg01, local11
00c00     50 E7 B1 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 32 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 32 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 28 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 28 0E F2 | 	cmp	local06, #254 wz
00c24     58 00 00 AF 
00c28     18 E5 05 A1 |  if_e	add	objptr, ##45336
00c2c     F2 2C 02 AB |  if_e	rdlong	local08, objptr
00c30     58 00 00 AF 
00c34     18 E5 85 A1 |  if_e	sub	objptr, ##45336
00c38     16 2B 02 A6 |  if_e	mov	local07, local08
00c3c     01 2A 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
00c58     56 00 00 FF 
00c5c     44 2A 06 F6 | 	mov	local07, ##44100
00c60     0C 2C C6 F9 | 	decod	local08, #12
00c64     00 2E 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 30 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     20 F8 B1 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     74 FF B1 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     70 F9 B1 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 32 0E F2 | 	cmp	local11, #141 wz
00cc4     74 00 90 5D |  if_ne	jmp	#LR__0021
00cc8     80 01 00 FF 
00ccc     DE 49 06 F6 | 	mov	local22, ##@LR__5007
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 38 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 38 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 3A C2 FA | 	rdbyte	local15, objptr
00cf4     80 3A 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     1D 13 02 F1 | 	add	arg01, local15
00d08     1C 13 02 F1 | 	add	arg01, local14
00d0c     F0 CA B1 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     50 1E B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     24 13 02 F6 | 	mov	arg01, local22
00d20     60 FC B1 FD | 	call	#__system___string_concat
00d24     FD 48 02 F6 | 	mov	local22, result1
00d28     01 38 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30     D8 EB B1 FD | 	call	#_hg010b_spin2_crlf
00d34                 | '     v.crlf() 
00d34                 | '     return  line$
00d34     24 FB 01 F6 | 	mov	result1, local22
00d38     DC 06 90 FD | 	jmp	#LR__0048
00d3c                 | LR__0021
00d3c     12 33 E2 F8 | 	getbyte	local11, local04, #0
00d40                 | '   
00d40                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d40     2B 32 0E F2 | 	cmp	local11, #43 wz
00d44     B0 00 90 5D |  if_ne	jmp	#LR__0022
00d48     3C E4 05 F1 | 	add	objptr, #60
00d4c     F2 28 E2 FA | 	rdword	local06, objptr
00d50     3C E4 85 F1 | 	sub	objptr, #60
00d54     F0 28 16 F2 | 	cmp	local06, #240 wc
00d58     9C 00 90 CD |  if_b	jmp	#LR__0022
00d5c     58 00 00 FF 
00d60     18 E5 05 F1 | 	add	objptr, ##45336
00d64     F2 2C 02 FB | 	rdlong	local08, objptr
00d68     58 00 00 FF 
00d6c     18 E5 85 F1 | 	sub	objptr, ##45336
00d70     16 2B 02 F6 | 	mov	local07, local08
00d74     01 2A 0E F2 | 	cmp	local07, #1 wz
00d78     7C 00 90 5D |  if_ne	jmp	#LR__0022
00d7c     04 00 00 FF 
00d80     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
00d84     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00d88     04 00 00 FF 
00d8c     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
00d90     56 00 00 FF 
00d94     44 2A 06 F6 | 	mov	local07, ##44100
00d98     0E 2C C6 F9 | 	decod	local08, #14
00d9c     00 2E 06 F6 | 	mov	local09, #0
00da0     03 00 00 FF 
00da4     DE 30 06 F6 | 	mov	local10, ##1758
00da8     00 12 06 F6 | 	mov	arg01, #0
00dac     56 00 00 FF 
00db0     44 16 06 F6 | 	mov	arg03, ##44100
00db4     0E 18 C6 F9 | 	decod	arg04, #14
00db8     00 1A 06 F6 | 	mov	arg05, #0
00dbc     03 00 00 FF 
00dc0     DE 1C 06 F6 | 	mov	arg06, ##1758
00dc4     0B 00 00 FF 
00dc8     CC E4 05 F1 | 	add	objptr, ##5836
00dcc     E8 F6 B1 FD | 	call	#_audio096_spin2_play
00dd0     0B 00 00 FF 
00dd4     CC E4 85 F1 | 	sub	objptr, ##5836
00dd8     2C 13 06 F6 | 	mov	arg01, #300
00ddc     3C FE B1 FD | 	call	#__system___waitms
00de0     00 12 06 F6 | 	mov	arg01, #0
00de4     0B 00 00 FF 
00de8     CC E4 05 F1 | 	add	objptr, ##5836
00dec     38 F8 B1 FD | 	call	#_audio096_spin2_stop
00df0     0B 00 00 FF 
00df4     CC E4 85 F1 | 	sub	objptr, ##5836
00df8                 | LR__0022
00df8                 | '   if key4=77 then i=127 : do: 															' end
00df8     4D 32 0E F2 | 	cmp	local11, #77 wz
00dfc     90 00 90 5D |  if_ne	jmp	#LR__0027
00e00     7F 38 06 F6 | 	mov	local14, #127
00e04                 | LR__0023
00e04                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e04     3E E4 05 F1 | 	add	objptr, #62
00e08     F2 2E C2 FA | 	rdbyte	local09, objptr
00e0c     17 2D E2 F8 | 	getbyte	local08, local09, #0
00e10     16 31 02 F6 | 	mov	local10, local08
00e14     80 30 06 FA | 	mul	local10, #128
00e18     3A E4 85 F1 | 	sub	objptr, #58
00e1c     F2 3A 02 FB | 	rdlong	local15, objptr
00e20     04 E4 85 F1 | 	sub	objptr, #4
00e24     1D 2B 02 F6 | 	mov	local07, local15
00e28     18 2B 02 F1 | 	add	local07, local10
00e2c     1C 2B 02 F1 | 	add	local07, local14
00e30     15 13 02 F6 | 	mov	arg01, local07
00e34     C8 C9 B1 FD | 	call	#_pspeek
00e38     FD 28 E2 F8 | 	getbyte	local06, result1, #0
00e3c     20 28 0E F2 | 	cmp	local06, #32 wz
00e40     2C 00 90 AD |  if_e	jmp	#LR__0025
00e44                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e44     7F 38 56 F2 | 	cmps	local14, #127 wc
00e48     18 00 90 3D |  if_ae	jmp	#LR__0024
00e4c     1C 2B 02 F6 | 	mov	local07, local14
00e50     01 2A 66 F0 | 	shl	local07, #1
00e54     15 13 02 F6 | 	mov	arg01, local07
00e58     02 12 06 F1 | 	add	arg01, #2
00e5c     4C E3 B1 FD | 	call	#_hg010b_spin2_setcursorx
00e60     2C 00 90 FD | 	jmp	#LR__0026
00e64                 | LR__0024
00e64     FE 12 06 F6 | 	mov	arg01, #254
00e68     40 E3 B1 FD | 	call	#_hg010b_spin2_setcursorx
00e6c     20 00 90 FD | 	jmp	#LR__0026
00e70                 | LR__0025
00e70     01 38 86 F1 | 	sub	local14, #1
00e74     37 00 00 FF 
00e78     34 E4 05 F1 | 	add	objptr, ##28212
00e7c     F2 28 02 FB | 	rdlong	local06, objptr
00e80     37 00 00 FF 
00e84     34 E4 85 F1 | 	sub	objptr, ##28212
00e88     14 39 0A F2 | 	cmp	local14, local06 wz
00e8c     74 FF 9F 5D |  if_ne	jmp	#LR__0023
00e90                 | LR__0026
00e90                 | LR__0027
00e90                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00e90     37 00 00 FF 
00e94     34 E4 05 F1 | 	add	objptr, ##28212
00e98     F2 34 02 FB | 	rdlong	local12, objptr
00e9c     37 00 00 FF 
00ea0     34 E4 85 F1 | 	sub	objptr, ##28212
00ea4     1A 29 02 F6 | 	mov	local06, local12
00ea8     14 39 0A F2 | 	cmp	local14, local06 wz
00eac     2C 00 90 5D |  if_ne	jmp	#LR__0028
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 2C 02 FB | 	rdlong	local08, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     16 2B 02 F6 | 	mov	local07, local08
00ec8     15 35 02 F6 | 	mov	local12, local07
00ecc     01 34 66 F0 | 	shl	local12, #1
00ed0     1A 29 02 F6 | 	mov	local06, local12
00ed4     14 13 02 F6 | 	mov	arg01, local06
00ed8     D0 E2 B1 FD | 	call	#_hg010b_spin2_setcursorx
00edc                 | LR__0028
00edc                 | '     
00edc                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00edc     4A 32 0E F2 | 	cmp	local11, #74 wz
00ee0     2C 00 90 5D |  if_ne	jmp	#LR__0029
00ee4     37 00 00 FF 
00ee8     34 E4 05 F1 | 	add	objptr, ##28212
00eec     F2 2C 02 FB | 	rdlong	local08, objptr
00ef0     37 00 00 FF 
00ef4     34 E4 85 F1 | 	sub	objptr, ##28212
00ef8     16 2B 02 F6 | 	mov	local07, local08
00efc     15 35 02 F6 | 	mov	local12, local07
00f00     01 34 66 F0 | 	shl	local12, #1
00f04     1A 29 02 F6 | 	mov	local06, local12
00f08     14 13 02 F6 | 	mov	arg01, local06
00f0c     9C E2 B1 FD | 	call	#_hg010b_spin2_setcursorx
00f10                 | LR__0029
00f10                 | '   if key4=75 then v.setcursory(0)														' pgup
00f10     4B 32 0E F2 | 	cmp	local11, #75 wz
00f14     00 28 06 A6 |  if_e	mov	local06, #0
00f18     00 12 06 A6 |  if_e	mov	arg01, #0
00f1c     BC E2 B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f20                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f20     4E 32 0E F2 | 	cmp	local11, #78 wz
00f24     24 28 06 A6 |  if_e	mov	local06, #36
00f28     24 12 06 A6 |  if_e	mov	arg01, #36
00f2c     AC E2 B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f30                 | '   if key4=76 then 																'del
00f30     4C 32 0E F2 | 	cmp	local11, #76 wz
00f34     AC 01 90 5D |  if_ne	jmp	#LR__0034
00f38                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f38     3E E4 05 F1 | 	add	objptr, #62
00f3c     F2 2A C2 FA | 	rdbyte	local07, objptr
00f40     15 2D E2 F8 | 	getbyte	local08, local07, #0
00f44     80 2C 06 FA | 	mul	local08, #128
00f48     3A E4 85 F1 | 	sub	objptr, #58
00f4c     F2 4A 02 FB | 	rdlong	local23, objptr
00f50     25 39 02 F6 | 	mov	local14, local23
00f54     16 39 02 F1 | 	add	local14, local08
00f58     38 E4 05 F1 | 	add	objptr, #56
00f5c     F2 30 E2 FA | 	rdword	local10, objptr
00f60     18 45 52 F6 | 	abs	local20, local10 wc
00f64     01 44 46 F0 | 	shr	local20, #1
00f68     22 39 82 F3 | 	sumc	local14, local20
00f6c     15 2B E2 F8 | 	getbyte	local07, local07, #0
00f70     80 2A 06 FA | 	mul	local07, #128
00f74     3C E4 85 F1 | 	sub	objptr, #60
00f78     15 4B 02 F1 | 	add	local23, local07
00f7c     80 4A 06 F1 | 	add	local23, #128
00f80                 | LR__0030
00f80     25 39 52 F2 | 	cmps	local14, local23 wc
00f84     20 00 90 3D |  if_ae	jmp	#LR__0031
00f88     1C 13 02 F6 | 	mov	arg01, local14
00f8c     01 12 06 F1 | 	add	arg01, #1
00f90     6C C8 B1 FD | 	call	#_pspeek
00f94     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00f98     1C 13 02 F6 | 	mov	arg01, local14
00f9c     18 C8 B1 FD | 	call	#_pspoke
00fa0     01 38 06 F1 | 	add	local14, #1
00fa4     D8 FF 9F FD | 	jmp	#LR__0030
00fa8                 | LR__0031
00fa8     3E E4 05 F1 | 	add	objptr, #62
00fac     F2 2E C2 FA | 	rdbyte	local09, objptr
00fb0     80 2E 06 FA | 	mul	local09, #128
00fb4     3A E4 85 F1 | 	sub	objptr, #58
00fb8     F2 12 02 FB | 	rdlong	arg01, objptr
00fbc     04 E4 85 F1 | 	sub	objptr, #4
00fc0     17 13 02 F1 | 	add	arg01, local09
00fc4     7F 12 06 F1 | 	add	arg01, #127
00fc8     20 14 06 F6 | 	mov	arg02, #32
00fcc     E8 C7 B1 FD | 	call	#_pspoke
00fd0     59 00 00 FF 
00fd4     EC E5 05 F1 | 	add	objptr, ##46060
00fd8     F2 00 68 FC | 	wrlong	#0, objptr
00fdc     59 00 00 FF 
00fe0     AE E5 85 F1 | 	sub	objptr, ##45998
00fe4     F2 34 C2 FA | 	rdbyte	local12, objptr
00fe8     1A 2D E2 F8 | 	getbyte	local08, local12, #0
00fec     80 2C 06 FA | 	mul	local08, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 2E 02 FB | 	rdlong	local09, objptr
00ff8     17 39 02 F6 | 	mov	local14, local09
00ffc     16 39 02 F1 | 	add	local14, local08
01000     38 E4 05 F1 | 	add	objptr, #56
01004     F2 3A E2 FA | 	rdword	local15, objptr
01008     1D 31 32 F9 | 	getword	local10, local15, #0
0100c     18 45 52 F6 | 	abs	local20, local10 wc
01010     01 44 46 F0 | 	shr	local20, #1
01014     22 45 82 F6 | 	negc	local20, local20
01018     22 39 02 F1 | 	add	local14, local20
0101c     1A 29 E2 F8 | 	getbyte	local06, local12, #0
01020     14 2B 02 F6 | 	mov	local07, local06
01024     80 2A 06 FA | 	mul	local07, #128
01028     17 2D 02 F6 | 	mov	local08, local09
0102c     3C E4 85 F1 | 	sub	objptr, #60
01030     16 4D 02 F6 | 	mov	local24, local08
01034     15 4D 02 F1 | 	add	local24, local07
01038     80 4C 06 F1 | 	add	local24, #128
0103c                 | LR__0032
0103c     26 39 52 F2 | 	cmps	local14, local24 wc
01040     A0 00 90 3D |  if_ae	jmp	#LR__0033
01044     3C E4 05 F1 | 	add	objptr, #60
01048     F2 28 E2 FA | 	rdword	local06, objptr
0104c     59 00 00 FF 
01050     B0 E5 05 F1 | 	add	objptr, ##46000
01054     F2 2C 02 FB | 	rdlong	local08, objptr
01058     01 2C 66 F0 | 	shl	local08, #1
0105c     16 29 02 F1 | 	add	local06, local08
01060     59 00 00 FF 
01064     AE E5 85 F1 | 	sub	objptr, ##45998
01068     F2 34 C2 FA | 	rdbyte	local12, objptr
0106c     3E E4 85 F1 | 	sub	objptr, #62
01070     10 34 06 FA | 	mul	local12, #16
01074     04 34 06 F1 | 	add	local12, #4
01078     1C 13 02 F6 | 	mov	arg01, local14
0107c     80 C7 B1 FD | 	call	#_pspeek
01080     FD 2A E2 F8 | 	getbyte	local07, result1, #0
01084     41 E4 05 F1 | 	add	objptr, #65
01088     F2 2C 02 FB | 	rdlong	local08, objptr
0108c     04 E4 05 F1 | 	add	objptr, #4
01090     F2 30 02 FB | 	rdlong	local10, objptr
01094     45 E4 85 F1 | 	sub	objptr, #69
01098     18 2F 02 F6 | 	mov	local09, local10
0109c     14 13 02 F6 | 	mov	arg01, local06
010a0     1A 15 02 F6 | 	mov	arg02, local12
010a4     15 17 02 F6 | 	mov	arg03, local07
010a8     16 19 02 F6 | 	mov	arg04, local08
010ac     17 1B 02 F6 | 	mov	arg05, local09
010b0     58 DF B1 FD | 	call	#_hg010b_spin2_putcharxycgf
010b4     59 00 00 FF 
010b8     EC E5 05 F1 | 	add	objptr, ##46060
010bc     F2 28 02 FB | 	rdlong	local06, objptr
010c0     01 28 06 F1 | 	add	local06, #1
010c4     F2 28 62 FC | 	wrlong	local06, objptr
010c8     59 00 00 FF 
010cc     EC E5 85 F1 | 	sub	objptr, ##46060
010d0     1C 29 02 F6 | 	mov	local06, local14
010d4     1C 35 02 F6 | 	mov	local12, local14
010d8     01 34 06 F1 | 	add	local12, #1
010dc     1A 39 02 F6 | 	mov	local14, local12
010e0     58 FF 9F FD | 	jmp	#LR__0032
010e4                 | LR__0033
010e4                 | LR__0034
010e4                 | ' 
010e4                 | '   if key4 = 42 then  'backspace
010e4     2A 32 0E F2 | 	cmp	local11, #42 wz
010e8     14 02 90 5D |  if_ne	jmp	#LR__0040
010ec                 | '     if v.cursor_x>editor_spaces*2 then 
010ec     3C E4 05 F1 | 	add	objptr, #60
010f0     F2 34 E2 FA | 	rdword	local12, objptr
010f4     1A 29 32 F9 | 	getword	local06, local12, #0
010f8     36 00 00 FF 
010fc     F8 E5 05 F1 | 	add	objptr, ##28152
01100     F2 2E 02 FB | 	rdlong	local09, objptr
01104     37 00 00 FF 
01108     34 E4 85 F1 | 	sub	objptr, ##28212
0110c     17 2D 02 F6 | 	mov	local08, local09
01110     16 2B 02 F6 | 	mov	local07, local08
01114     01 2A 66 F0 | 	shl	local07, #1
01118     15 29 5A F2 | 	cmps	local06, local07 wcz
0111c     C8 01 90 ED |  if_be	jmp	#LR__0038
01120     3C E4 05 F1 | 	add	objptr, #60
01124     F2 12 E2 FA | 	rdword	arg01, objptr
01128     02 12 86 F1 | 	sub	arg01, #2
0112c     02 E4 05 F1 | 	add	objptr, #2
01130     F2 14 C2 FA | 	rdbyte	arg02, objptr
01134     3E E4 85 F1 | 	sub	objptr, #62
01138     34 E0 B1 FD | 	call	#_hg010b_spin2_setcursorpos
0113c                 | '       position v.cursor_x-2,v.cursor_y
0113c                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
0113c     3E E4 05 F1 | 	add	objptr, #62
01140     F2 2A C2 FA | 	rdbyte	local07, objptr
01144     15 2D E2 F8 | 	getbyte	local08, local07, #0
01148     80 2C 06 FA | 	mul	local08, #128
0114c     3A E4 85 F1 | 	sub	objptr, #58
01150     F2 4E 02 FB | 	rdlong	local25, objptr
01154     27 39 02 F6 | 	mov	local14, local25
01158     16 39 02 F1 | 	add	local14, local08
0115c     38 E4 05 F1 | 	add	objptr, #56
01160     F2 30 E2 FA | 	rdword	local10, objptr
01164     18 45 52 F6 | 	abs	local20, local10 wc
01168     01 44 46 F0 | 	shr	local20, #1
0116c     22 39 82 F3 | 	sumc	local14, local20
01170     15 2B E2 F8 | 	getbyte	local07, local07, #0
01174     80 2A 06 FA | 	mul	local07, #128
01178     3C E4 85 F1 | 	sub	objptr, #60
0117c     15 4F 02 F1 | 	add	local25, local07
01180     80 4E 06 F1 | 	add	local25, #128
01184                 | LR__0035
01184     27 39 52 F2 | 	cmps	local14, local25 wc
01188     20 00 90 3D |  if_ae	jmp	#LR__0036
0118c     1C 13 02 F6 | 	mov	arg01, local14
01190     01 12 06 F1 | 	add	arg01, #1
01194     68 C6 B1 FD | 	call	#_pspeek
01198     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
0119c     1C 13 02 F6 | 	mov	arg01, local14
011a0     14 C6 B1 FD | 	call	#_pspoke
011a4     01 38 06 F1 | 	add	local14, #1
011a8     D8 FF 9F FD | 	jmp	#LR__0035
011ac                 | LR__0036
011ac     3E E4 05 F1 | 	add	objptr, #62
011b0     F2 2E C2 FA | 	rdbyte	local09, objptr
011b4     80 2E 06 FA | 	mul	local09, #128
011b8     3A E4 85 F1 | 	sub	objptr, #58
011bc     F2 12 02 FB | 	rdlong	arg01, objptr
011c0     04 E4 85 F1 | 	sub	objptr, #4
011c4     17 13 02 F1 | 	add	arg01, local09
011c8     7F 12 06 F1 | 	add	arg01, #127
011cc     20 14 06 F6 | 	mov	arg02, #32
011d0     E4 C5 B1 FD | 	call	#_pspoke
011d4     59 00 00 FF 
011d8     EC E5 05 F1 | 	add	objptr, ##46060
011dc     F2 00 68 FC | 	wrlong	#0, objptr
011e0     59 00 00 FF 
011e4     AE E5 85 F1 | 	sub	objptr, ##45998
011e8     F2 34 C2 FA | 	rdbyte	local12, objptr
011ec     1A 2D E2 F8 | 	getbyte	local08, local12, #0
011f0     80 2C 06 FA | 	mul	local08, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 2E 02 FB | 	rdlong	local09, objptr
011fc     17 39 02 F6 | 	mov	local14, local09
01200     16 39 02 F1 | 	add	local14, local08
01204     38 E4 05 F1 | 	add	objptr, #56
01208     F2 3A E2 FA | 	rdword	local15, objptr
0120c     1D 31 32 F9 | 	getword	local10, local15, #0
01210     18 45 52 F6 | 	abs	local20, local10 wc
01214     01 44 46 F0 | 	shr	local20, #1
01218     22 45 82 F6 | 	negc	local20, local20
0121c     22 39 02 F1 | 	add	local14, local20
01220     1A 29 E2 F8 | 	getbyte	local06, local12, #0
01224     14 2B 02 F6 | 	mov	local07, local06
01228     80 2A 06 FA | 	mul	local07, #128
0122c     17 2D 02 F6 | 	mov	local08, local09
01230     3C E4 85 F1 | 	sub	objptr, #60
01234     16 51 02 F6 | 	mov	local26, local08
01238     15 51 02 F1 | 	add	local26, local07
0123c     80 50 06 F1 | 	add	local26, #128
01240                 | LR__0037
01240     28 39 52 F2 | 	cmps	local14, local26 wc
01244     B8 00 90 3D |  if_ae	jmp	#LR__0039
01248     3C E4 05 F1 | 	add	objptr, #60
0124c     F2 28 E2 FA | 	rdword	local06, objptr
01250     59 00 00 FF 
01254     B0 E5 05 F1 | 	add	objptr, ##46000
01258     F2 2C 02 FB | 	rdlong	local08, objptr
0125c     01 2C 66 F0 | 	shl	local08, #1
01260     16 29 02 F1 | 	add	local06, local08
01264     59 00 00 FF 
01268     AE E5 85 F1 | 	sub	objptr, ##45998
0126c     F2 34 C2 FA | 	rdbyte	local12, objptr
01270     3E E4 85 F1 | 	sub	objptr, #62
01274     10 34 06 FA | 	mul	local12, #16
01278     04 34 06 F1 | 	add	local12, #4
0127c     1C 13 02 F6 | 	mov	arg01, local14
01280     7C C5 B1 FD | 	call	#_pspeek
01284     FD 2A E2 F8 | 	getbyte	local07, result1, #0
01288     41 E4 05 F1 | 	add	objptr, #65
0128c     F2 2C 02 FB | 	rdlong	local08, objptr
01290     04 E4 05 F1 | 	add	objptr, #4
01294     F2 30 02 FB | 	rdlong	local10, objptr
01298     45 E4 85 F1 | 	sub	objptr, #69
0129c     18 2F 02 F6 | 	mov	local09, local10
012a0     14 13 02 F6 | 	mov	arg01, local06
012a4     1A 15 02 F6 | 	mov	arg02, local12
012a8     15 17 02 F6 | 	mov	arg03, local07
012ac     16 19 02 F6 | 	mov	arg04, local08
012b0     17 1B 02 F6 | 	mov	arg05, local09
012b4     54 DD B1 FD | 	call	#_hg010b_spin2_putcharxycgf
012b8     59 00 00 FF 
012bc     EC E5 05 F1 | 	add	objptr, ##46060
012c0     F2 28 02 FB | 	rdlong	local06, objptr
012c4     01 28 06 F1 | 	add	local06, #1
012c8     F2 28 62 FC | 	wrlong	local06, objptr
012cc     59 00 00 FF 
012d0     EC E5 85 F1 | 	sub	objptr, ##46060
012d4     1C 29 02 F6 | 	mov	local06, local14
012d8     1C 35 02 F6 | 	mov	local12, local14
012dc     01 34 06 F1 | 	add	local12, #1
012e0     1A 39 02 F6 | 	mov	local14, local12
012e4     58 FF 9F FD | 	jmp	#LR__0037
012e8                 | LR__0038
012e8     80 01 00 FF 
012ec     DF 49 06 F6 | 	mov	local22, ##@LR__5008
012f0     04 28 06 F6 | 	mov	local06, #4
012f4     3C E4 05 F1 | 	add	objptr, #60
012f8     F2 08 58 FC | 	wrword	#4, objptr
012fc     3C E4 85 F1 | 	sub	objptr, #60
01300                 | LR__0039
01300                 | LR__0040
01300                 | ' 
01300                 | '   if key4=82 then 						' arrow up
01300     52 32 0E F2 | 	cmp	local11, #82 wz
01304     20 00 90 5D |  if_ne	jmp	#LR__0041
01308                 | ' return cursor_y
01308     3E E4 05 F1 | 	add	objptr, #62
0130c     F2 34 C2 FA | 	rdbyte	local12, objptr
01310     3E E4 85 F1 | 	sub	objptr, #62
01314     1A 53 02 F6 | 	mov	local27, local12
01318     01 52 86 F1 | 	sub	local27, #1
0131c     29 29 02 F6 | 	mov	local06, local27
01320     14 13 02 F6 | 	mov	arg01, local06
01324     B4 DE B1 FD | 	call	#_hg010b_spin2_setcursory
01328                 | LR__0041
01328                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
01328     51 32 0E F2 | 	cmp	local11, #81 wz
0132c     24 00 90 5D |  if_ne	jmp	#LR__0042
01330                 | ' return cursor_y
01330     3E E4 05 F1 | 	add	objptr, #62
01334     F2 34 C2 FA | 	rdbyte	local12, objptr
01338     3E E4 85 F1 | 	sub	objptr, #62
0133c     1A 53 02 F6 | 	mov	local27, local12
01340     01 52 06 F1 | 	add	local27, #1
01344     24 52 36 F3 | 	fle	local27, #36 wc
01348     29 29 02 F6 | 	mov	local06, local27
0134c     14 13 02 F6 | 	mov	arg01, local06
01350     88 DE B1 FD | 	call	#_hg010b_spin2_setcursory
01354                 | LR__0042
01354                 | '   if key4=80 then
01354     50 32 0E F2 | 	cmp	local11, #80 wz
01358     44 00 90 5D |  if_ne	jmp	#LR__0043
0135c                 | ' return cursor_x
0135c     3C E4 05 F1 | 	add	objptr, #60
01360     F2 54 E2 FA | 	rdword	local28, objptr
01364     02 54 86 F1 | 	sub	local28, #2
01368                 | '     cx=v.getcursorx()-2 					' arrow left
01368                 | '     if cx<editor_spaces then cx=editor_spaces			
01368     36 00 00 FF 
0136c     F8 E5 05 F1 | 	add	objptr, ##28152
01370     F2 34 02 FB | 	rdlong	local12, objptr
01374     37 00 00 FF 
01378     34 E4 85 F1 | 	sub	objptr, ##28212
0137c     1A 55 52 F2 | 	cmps	local28, local12 wc
01380     37 00 00 CF 
01384     34 E4 05 C1 |  if_b	add	objptr, ##28212
01388     F2 54 02 CB |  if_b	rdlong	local28, objptr
0138c     37 00 00 CF 
01390     34 E4 85 C1 |  if_b	sub	objptr, ##28212
01394     2A 29 02 F6 | 	mov	local06, local28
01398     14 13 02 F6 | 	mov	arg01, local06
0139c     0C DE B1 FD | 	call	#_hg010b_spin2_setcursorx
013a0                 | LR__0043
013a0                 | '   if key4=79 then						' arrow right
013a0     4F 32 0E F2 | 	cmp	local11, #79 wz
013a4     20 00 90 5D |  if_ne	jmp	#LR__0044
013a8                 | ' return cursor_x
013a8     3C E4 05 F1 | 	add	objptr, #60
013ac     F2 54 E2 FA | 	rdword	local28, objptr
013b0     3C E4 85 F1 | 	sub	objptr, #60
013b4     02 54 06 F1 | 	add	local28, #2
013b8                 | '     cx=v.getcursorx()+2 
013b8                 | '     if cx>254  then cx=254 
013b8     FE 54 36 F3 | 	fle	local28, #254 wc
013bc     2A 29 02 F6 | 	mov	local06, local28
013c0     14 13 02 F6 | 	mov	arg01, local06
013c4     E4 DD B1 FD | 	call	#_hg010b_spin2_setcursorx
013c8                 | LR__0044
013c8                 | ' 
013c8                 | '   if key4=73 then 						' ins
013c8     49 32 0E F2 | 	cmp	local11, #73 wz
013cc     40 00 90 5D |  if_ne	jmp	#LR__0047
013d0     59 00 00 FF 
013d4     E0 E5 05 F1 | 	add	objptr, ##46048
013d8     F2 28 02 FB | 	rdlong	local06, objptr
013dc     14 35 22 F6 | 	not	local12, local06
013e0     F2 34 62 FC | 	wrlong	local12, objptr
013e4                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
013e4     59 00 00 FF 
013e8     E0 E5 85 F1 | 	sub	objptr, ##46048
013ec     00 34 0E F2 | 	cmp	local12, #0 wz
013f0     10 00 90 AD |  if_e	jmp	#LR__0045
013f4     0E 28 06 F6 | 	mov	local06, #14
013f8     0E 12 06 F6 | 	mov	arg01, #14
013fc     30 CC B1 FD | 	call	#_hg010b_spin2_setcursorshape
01400     0C 00 90 FD | 	jmp	#LR__0046
01404                 | LR__0045
01404     00 28 06 F6 | 	mov	local06, #0
01408     00 12 06 F6 | 	mov	arg01, #0
0140c     20 CC B1 FD | 	call	#_hg010b_spin2_setcursorshape
01410                 | LR__0046
01410                 | LR__0047
01410     00 24 06 F6 | 	mov	local04, #0
01414     04 F4 9F FD | 	jmp	#LR__0001
01418                 | LR__0048
01418     A7 F0 03 F6 | 	mov	ptra, fp
0141c     B2 00 A0 FD | 	call	#popregs_
01420                 | _edit_ret
01420     2D 00 64 FD | 	ret
01424                 | 
01424                 | ' 
01424                 | ' ''-----------------------------------------------------------------------------------------------------------
01424                 | ' ' 					A housekeepeer.
01424                 | ' ' A deedicated cog that is intended to do things in the background, for example tracking GUI elements
01424                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01424                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01424                 | ' ''-----------------------------------------------------------------------------------------------------------
01424                 | ' 
01424                 | ' sub housekeeper
01424                 | _housekeeper
01424                 | ' 
01424                 | ' do
01424                 | LR__0050
01424                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01424     49 E4 05 F1 | 	add	objptr, #73
01428                 | LR__0051
01428     F2 12 02 FB | 	rdlong	arg01, objptr
0142c     01 12 0E F2 | 	cmp	arg01, #1 wz
01430     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01434     59 00 00 FF 
01438     63 E5 05 F1 | 	add	objptr, ##45923
0143c     F2 12 02 FB | 	rdlong	arg01, objptr
01440     01 12 06 F1 | 	add	arg01, #1
01444     F2 12 62 FC | 	wrlong	arg01, objptr
01448     59 00 00 FF 
0144c     AC E5 85 F1 | 	sub	objptr, ##45996
01450     80 00 B0 FD | 	call	#_gethdi
01454     05 12 06 F6 | 	mov	arg01, #5
01458     C0 F7 B1 FD | 	call	#__system___waitms
0145c     59 00 00 FF 
01460     AC E5 05 F1 | 	add	objptr, ##45996
01464     F2 12 02 FB | 	rdlong	arg01, objptr
01468     01 12 06 F1 | 	add	arg01, #1
0146c     F2 12 62 FC | 	wrlong	arg01, objptr
01470     59 00 00 FF 
01474     AC E5 85 F1 | 	sub	objptr, ##45996
01478     58 00 B0 FD | 	call	#_gethdi
0147c     05 12 06 F6 | 	mov	arg01, #5
01480     98 F7 B1 FD | 	call	#__system___waitms
01484     59 00 00 FF 
01488     AC E5 05 F1 | 	add	objptr, ##45996
0148c     F2 12 02 FB | 	rdlong	arg01, objptr
01490     01 12 06 F1 | 	add	arg01, #1
01494     F2 12 62 FC | 	wrlong	arg01, objptr
01498     59 00 00 FF 
0149c     AC E5 85 F1 | 	sub	objptr, ##45996
014a0     30 00 B0 FD | 	call	#_gethdi
014a4     05 12 06 F6 | 	mov	arg01, #5
014a8     70 F7 B1 FD | 	call	#__system___waitms
014ac     59 00 00 FF 
014b0     AC E5 05 F1 | 	add	objptr, ##45996
014b4     F2 12 02 FB | 	rdlong	arg01, objptr
014b8     01 12 06 F1 | 	add	arg01, #1
014bc     F2 12 62 FC | 	wrlong	arg01, objptr
014c0     59 00 00 FF 
014c4     AC E5 85 F1 | 	sub	objptr, ##45996
014c8     08 00 B0 FD | 	call	#_gethdi
014cc     54 FF 9F FD | 	jmp	#LR__0050
014d0                 | _housekeeper_ret
014d0     2D 00 64 FD | 	ret
014d4                 | 
014d4                 | ' 
014d4                 | ' '----------------------------------------------------------------------------------------------------------
014d4                 | ' ' gethdi is called from the houseekeeper to read HDI related values
014d4                 | ' '----------------------------------------------------------------------------------------------------------
014d4                 | ' 
014d4                 | ' sub gethdi
014d4                 | _gethdi
014d4     03 4A 05 F6 | 	mov	COUNT_, #3
014d8     A8 00 A0 FD | 	call	#pushregs_
014dc                 | '   x := mouse_xacc
014dc     14 00 00 FF 
014e0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
014e4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
014e8                 | '   y := mouse_yacc
014e8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
014ec     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
014f0     59 00 00 FF 
014f4     24 E5 05 F1 | 	add	objptr, ##45860
014f8     F2 14 62 FC | 	wrlong	arg02, objptr
014fc     04 E4 05 F1 | 	add	objptr, #4
01500     F2 12 62 FC | 	wrlong	arg01, objptr
01504                 | '   x := 0
01504                 | '   y := mouse_zacc
01504     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01508     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
0150c     08 E4 05 F1 | 	add	objptr, #8
01510     F2 FA 61 FC | 	wrlong	result1, objptr
01514                 | '   return mouse_bstate&7
01514     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01518     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
0151c     14 00 00 FF 
01520     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
01524     07 FA 05 F5 | 	and	result1, #7
01528     04 E4 85 F1 | 	sub	objptr, #4
0152c     F2 FA 61 FC | 	wrlong	result1, objptr
01530     59 00 00 FF 
01534     2C E5 85 F1 | 	sub	objptr, ##45868
01538     00 1E 06 F6 | 	mov	local01, #0
0153c                 | ' 
0153c                 | ' mousex,mousey=kbm.mouse_xy()
0153c                 | ' dummy,mousew=kbm.mouse_scroll()
0153c                 | ' mousek=kbm.mouse_buttons()
0153c                 | ' i=0:
0153c                 | ' for j=0 to 6
0153c     00 20 06 F6 | 	mov	local02, #0
01540                 | LR__0060
01540                 | '   if kbm.hidpad_id(j)>0 then
01540     10 13 02 F6 | 	mov	arg01, local02
01544     C8 EC B1 FD | 	call	#_usbnew_spin2_hidpad_id
01548     01 FA 55 F2 | 	cmps	result1, #1 wc
0154c     8C 00 90 CD |  if_b	jmp	#LR__0061
01550     10 13 02 F6 | 	mov	arg01, local02
01554     00 14 06 F6 | 	mov	arg02, #0
01558     18 ED B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0155c     FD 22 02 F6 | 	mov	local03, result1
01560     10 13 02 F6 | 	mov	arg01, local02
01564     01 14 06 F6 | 	mov	arg02, #1
01568     08 ED B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0156c     60 00 00 FF 
01570     00 22 06 F1 | 	add	local03, ##49152
01574     0F 22 46 F0 | 	shr	local03, #15
01578     01 14 06 F6 | 	mov	arg02, #1
0157c     11 15 02 F1 | 	add	arg02, local03
01580     60 00 00 FF 
01584     00 FA 05 F1 | 	add	result1, ##49152
01588     0F FA 45 F0 | 	shr	result1, #15
0158c     01 12 06 F6 | 	mov	arg01, #1
01590     FD 12 02 F1 | 	add	arg01, result1
01594     0F 23 02 F6 | 	mov	local03, local01
01598     02 22 66 F0 | 	shl	local03, #2
0159c     59 00 00 FF 
015a0     34 E5 05 F1 | 	add	objptr, ##45876
015a4     F2 22 02 F1 | 	add	local03, objptr
015a8     02 12 66 F0 | 	shl	arg01, #2
015ac     09 15 02 F1 | 	add	arg02, arg01
015b0     11 15 62 FC | 	wrlong	arg02, local03
015b4     0F 23 02 F6 | 	mov	local03, local01
015b8     02 22 66 F0 | 	shl	local03, #2
015bc     1C E4 05 F1 | 	add	objptr, #28
015c0     F2 22 02 F1 | 	add	local03, objptr
015c4     10 13 02 F6 | 	mov	arg01, local02
015c8     59 00 00 FF 
015cc     50 E5 85 F1 | 	sub	objptr, ##45904
015d0     6C EC B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
015d4     11 FB 61 FC | 	wrlong	result1, local03
015d8     01 1E 06 F1 | 	add	local01, #1
015dc                 | LR__0061
015dc     01 20 06 F1 | 	add	local02, #1
015e0     07 20 16 F2 | 	cmp	local02, #7 wc
015e4     58 FF 9F CD |  if_b	jmp	#LR__0060
015e8     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
015ec                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
015ec                 | LR__0062
015ec     07 1E 16 F2 | 	cmp	local01, #7 wc
015f0     3C 00 90 3D |  if_ae	jmp	#LR__0064
015f4     0F 23 02 F6 | 	mov	local03, local01
015f8     02 22 66 F0 | 	shl	local03, #2
015fc     59 00 00 FF 
01600     34 E5 05 F1 | 	add	objptr, ##45876
01604     F2 22 02 F1 | 	add	local03, objptr
01608     11 01 68 FC | 	wrlong	#0, local03
0160c     0F 23 02 F6 | 	mov	local03, local01
01610     02 22 66 F0 | 	shl	local03, #2
01614     1C E4 05 F1 | 	add	objptr, #28
01618     F2 22 02 F1 | 	add	local03, objptr
0161c     11 01 68 FC | 	wrlong	#0, local03
01620     01 1E 06 F1 | 	add	local01, #1
01624     59 00 00 FF 
01628     50 E5 85 F1 | 	sub	objptr, ##45904
0162c     BC FF 9F FD | 	jmp	#LR__0062
01630                 | LR__0063
01630                 | LR__0064
01630     A7 F0 03 F6 | 	mov	ptra, fp
01634     B2 00 A0 FD | 	call	#popregs_
01638                 | _gethdi_ret
01638     2D 00 64 FD | 	ret
0163c                 | 
0163c                 | ' 
0163c                 | ' '-------------------------------------------------------------------------------------------------------------
0163c                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
0163c                 | ' '-------------------------------------------------------------------------------------------------------------
0163c                 | ' 
0163c                 | ' '-------------------------------------------------------------------------------------------------------------
0163c                 | ' '
0163c                 | ' '                                     LINE INTERPRETER/TOKENIZER
0163c                 | ' '
0163c                 | ' '-------------------------------------------------------------------------------------------------------------
0163c                 | ' 
0163c                 | ' 
0163c                 | ' sub interpret
0163c                 | _interpret
0163c     23 4A 05 F6 | 	mov	COUNT_, #35
01640     A8 00 A0 FD | 	call	#pushregs_
01644     01 00 00 FF 
01648     50 F0 07 F1 | 	add	ptra, ##592
0164c     37 00 00 FF 
01650     1C E4 05 F1 | 	add	objptr, ##28188
01654     F2 12 02 FB | 	rdlong	arg01, objptr
01658     37 00 00 FF 
0165c     1C E4 85 F1 | 	sub	objptr, ##28188
01660     D0 17 B2 FD | 	call	#__system__RTrim_S
01664     FD 12 02 F6 | 	mov	arg01, result1
01668     08 17 B2 FD | 	call	#__system__LTrim_S
0166c     37 00 00 FF 
01670     20 E4 05 F1 | 	add	objptr, ##28192
01674     F2 FA 61 FC | 	wrlong	result1, objptr
01678     04 E4 05 F1 | 	add	objptr, #4
0167c     FF FF FF FF 
01680     F2 FC 6B FC | 	wrlong	##-2, objptr
01684     22 00 00 FF 
01688     A4 E5 05 F1 | 	add	objptr, ##17828
0168c     F2 00 68 FC | 	wrlong	#0, objptr
01690     0F 00 00 FF 
01694     4C E5 85 F1 | 	sub	objptr, ##8012
01698     F2 00 68 FC | 	wrlong	#0, objptr
0169c     4A 00 00 FF 
016a0     7C E4 85 F1 | 	sub	objptr, ##38012
016a4     00 1E 06 F6 | 	mov	local01, #0
016a8                 | LR__0070
016a8                 | ' 
016a8                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded case, lowercase parts, detect and concatenate strings
016a8                 | ' 
016a8                 | ' fullline$=trim$(line$): cont=-2  : linenum=0 : lineptr=0 : err=0
016a8                 | ' 
016a8                 | ' 108 for i=0 to 125: separators(i)=0 :next i
016a8     00 20 06 F6 | 	mov	local02, #0
016ac     20 4E 05 F1 | 	add	fp, #32
016b0     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
016b4                 | LR__0071
016b4     10 23 02 F6 | 	mov	local03, local02
016b8     02 22 66 F0 | 	shl	local03, #2
016bc     A7 22 02 F1 | 	add	local03, fp
016c0     11 01 68 FC | 	wrlong	#0, local03
016c4     01 20 06 F1 | 	add	local02, #1
016c8     7E 20 56 F2 | 	cmps	local02, #126 wc
016cc     E4 FF 9F CD |  if_b	jmp	#LR__0071
016d0                 | LR__0072
016d0     20 4E 85 F1 | 	sub	fp, #32
016d4                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
016d4     00 20 06 F6 | 	mov	local02, #0
016d8     35 00 00 FF 
016dc     0C E4 05 F1 | 	add	objptr, ##27148
016e0     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
016e4                 | LR__0073
016e4     10 25 02 F6 | 	mov	local04, local02
016e8     03 24 66 F0 | 	shl	local04, #3
016ec     F2 24 02 F1 | 	add	local04, objptr
016f0     80 01 00 FF 
016f4     E0 17 06 F6 | 	mov	arg03, ##@LR__5009
016f8     12 17 62 FC | 	wrlong	arg03, local04
016fc     10 25 02 F6 | 	mov	local04, local02
01700     03 24 66 F0 | 	shl	local04, #3
01704     F2 26 02 F6 | 	mov	local05, objptr
01708     F2 24 02 F1 | 	add	local04, objptr
0170c     00 28 06 F6 | 	mov	local06, #0
01710     04 24 06 F1 | 	add	local04, #4
01714     12 01 68 FC | 	wrlong	#0, local04
01718     01 20 06 F1 | 	add	local02, #1
0171c     7E 20 56 F2 | 	cmps	local02, #126 wc
01720     C0 FF 9F CD |  if_b	jmp	#LR__0073
01724                 | LR__0074
01724     02 00 00 FF 
01728     10 E4 05 F1 | 	add	objptr, ##1040
0172c     F2 12 02 FB | 	rdlong	arg01, objptr
01730     37 00 00 FF 
01734     1C E4 85 F1 | 	sub	objptr, ##28188
01738     F8 16 B2 FD | 	call	#__system__RTrim_S
0173c     FD 12 02 F6 | 	mov	arg01, result1
01740     30 16 B2 FD | 	call	#__system__LTrim_S
01744     37 00 00 FF 
01748     1C E4 05 F1 | 	add	objptr, ##28188
0174c     F2 FA 61 FC | 	wrlong	result1, objptr
01750     80 01 00 FF 
01754     E1 25 06 F6 | 	mov	local04, ##@LR__5010
01758     22 00 00 FF 
0175c     D8 E5 05 F1 | 	add	objptr, ##17880
01760     F2 24 62 FC | 	wrlong	local04, objptr
01764     22 00 00 FF 
01768     D8 E5 85 F1 | 	sub	objptr, ##17880
0176c     F2 12 02 FB | 	rdlong	arg01, objptr
01770     37 00 00 FF 
01774     1C E4 85 F1 | 	sub	objptr, ##28188
01778     09 2B 02 F6 | 	mov	local07, arg01
0177c     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
01780                 | LR__0075
01780     15 FB C9 FA | 	rdbyte	result1, local07 wz
01784     01 2A 06 51 |  if_ne	add	local07, #1
01788     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
0178c                 | LR__0076
0178c     09 2B 8A F1 | 	sub	local07, arg01 wz
01790     59 00 00 FF 
01794     F8 E5 05 F1 | 	add	objptr, ##46072
01798     F2 2A 62 FC | 	wrlong	local07, objptr
0179c                 | ' if l=0 then goto 101
0179c     59 00 00 FF 
017a0     F8 E5 85 F1 | 	sub	objptr, ##46072
017a4     30 28 90 AD |  if_e	jmp	#LR__0196
017a8     59 00 00 FF 
017ac     FC E5 05 F1 | 	add	objptr, ##46076
017b0     F2 00 68 FC | 	wrlong	#0, objptr
017b4                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
017b4                 | ' for i=1 to len(line$)
017b4     01 20 06 F6 | 	mov	local02, #1
017b8     22 00 00 FF 
017bc     E0 E5 85 F1 | 	sub	objptr, ##17888
017c0     F2 12 02 FB | 	rdlong	arg01, objptr
017c4     37 00 00 FF 
017c8     1C E4 85 F1 | 	sub	objptr, ##28188
017cc     09 2B 02 F6 | 	mov	local07, arg01
017d0     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
017d4                 | LR__0077
017d4     15 FB C9 FA | 	rdbyte	result1, local07 wz
017d8     01 2A 06 51 |  if_ne	add	local07, #1
017dc     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
017e0                 | LR__0078
017e0     09 2B 82 F1 | 	sub	local07, arg01
017e4     15 2D 02 F6 | 	mov	local08, local07
017e8     01 2C 06 F1 | 	add	local08, #1
017ec                 | LR__0079
017ec     16 21 52 F2 | 	cmps	local02, local08 wc
017f0     00 01 90 3D |  if_ae	jmp	#LR__0082
017f4                 | ' 
017f4                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
017f4     37 00 00 FF 
017f8     1C E4 05 F1 | 	add	objptr, ##28188
017fc     F2 12 02 FB | 	rdlong	arg01, objptr
01800     37 00 00 FF 
01804     1C E4 85 F1 | 	sub	objptr, ##28188
01808     10 15 02 F6 | 	mov	arg02, local02
0180c     01 16 06 F6 | 	mov	arg03, #1
01810     A8 12 B2 FD | 	call	#__system__Mid_S
01814     FD 12 02 F6 | 	mov	arg01, result1
01818     80 01 00 FF 
0181c     E2 15 06 F6 | 	mov	arg02, ##@LR__5011
01820     2C F1 B1 FD | 	call	#__system___string_cmp
01824     00 FA 0D F2 | 	cmp	result1, #0 wz
01828     2C 00 90 5D |  if_ne	jmp	#LR__0080
0182c     59 00 00 FF 
01830     FC E5 05 F1 | 	add	objptr, ##46076
01834     F2 22 0A FB | 	rdlong	local03, objptr wz
01838     59 00 00 FF 
0183c     FC E5 85 F1 | 	sub	objptr, ##46076
01840     59 00 00 AF 
01844     FC E5 05 A1 |  if_e	add	objptr, ##46076
01848     F2 02 68 AC |  if_e	wrlong	#1, objptr
0184c     59 00 00 AF 
01850     FC E5 85 A1 |  if_e	sub	objptr, ##46076
01854     60 00 90 AD |  if_e	jmp	#LR__0081
01858                 | LR__0080
01858     37 00 00 FF 
0185c     1C E4 05 F1 | 	add	objptr, ##28188
01860     F2 12 02 FB | 	rdlong	arg01, objptr
01864     37 00 00 FF 
01868     1C E4 85 F1 | 	sub	objptr, ##28188
0186c     10 15 02 F6 | 	mov	arg02, local02
01870     01 16 06 F6 | 	mov	arg03, #1
01874     44 12 B2 FD | 	call	#__system__Mid_S
01878     FD 12 02 F6 | 	mov	arg01, result1
0187c     80 01 00 FF 
01880     E4 15 06 F6 | 	mov	arg02, ##@LR__5012
01884     C8 F0 B1 FD | 	call	#__system___string_cmp
01888     00 FA 0D F2 | 	cmp	result1, #0 wz
0188c     59 00 00 AF 
01890     FC E5 05 A1 |  if_e	add	objptr, ##46076
01894     F2 22 02 AB |  if_e	rdlong	local03, objptr
01898     59 00 00 AF 
0189c     FC E5 85 A1 |  if_e	sub	objptr, ##46076
018a0     01 22 0E A2 |  if_e	cmp	local03, #1 wz
018a4     59 00 00 AF 
018a8     FC E5 05 A1 |  if_e	add	objptr, ##46076
018ac     F2 00 68 AC |  if_e	wrlong	#0, objptr
018b0     59 00 00 AF 
018b4     FC E5 85 A1 |  if_e	sub	objptr, ##46076
018b8                 | LR__0081
018b8     10 25 02 F6 | 	mov	local04, local02
018bc     03 24 66 F0 | 	shl	local04, #3
018c0     35 00 00 FF 
018c4     0C E4 05 F1 | 	add	objptr, ##27148
018c8     F2 26 02 F6 | 	mov	local05, objptr
018cc     F2 24 02 F1 | 	add	local04, objptr
018d0     24 00 00 FF 
018d4     F0 E5 05 F1 | 	add	objptr, ##18928
018d8     F2 28 02 FB | 	rdlong	local06, objptr
018dc     59 00 00 FF 
018e0     FC E5 85 F1 | 	sub	objptr, ##46076
018e4     04 24 06 F1 | 	add	local04, #4
018e8     12 29 62 FC | 	wrlong	local06, local04
018ec     01 20 06 F1 | 	add	local02, #1
018f0     F8 FE 9F FD | 	jmp	#LR__0079
018f4                 | LR__0082
018f4     01 20 06 F6 | 	mov	local02, #1
018f8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
018f8                 | LR__0083
018f8     37 00 00 FF 
018fc     1C E4 05 F1 | 	add	objptr, ##28188
01900     F2 12 02 FB | 	rdlong	arg01, objptr
01904     37 00 00 FF 
01908     1C E4 85 F1 | 	sub	objptr, ##28188
0190c     10 15 02 F6 | 	mov	arg02, local02
01910     01 16 06 F6 | 	mov	arg03, #1
01914     A4 11 B2 FD | 	call	#__system__Mid_S
01918     FD 12 02 F6 | 	mov	arg01, result1
0191c     80 01 00 FF 
01920     E6 2F 06 F6 | 	mov	local09, ##@LR__5013
01924     17 15 02 F6 | 	mov	arg02, local09
01928     24 F0 B1 FD | 	call	#__system___string_cmp
0192c     00 FA 0D F2 | 	cmp	result1, #0 wz
01930     34 00 90 5D |  if_ne	jmp	#LR__0084
01934     10 27 02 F6 | 	mov	local05, local02
01938     03 26 66 F0 | 	shl	local05, #3
0193c     35 00 00 FF 
01940     0C E4 05 F1 | 	add	objptr, ##27148
01944     F2 28 02 F6 | 	mov	local06, objptr
01948     F2 26 02 F1 | 	add	local05, objptr
0194c     04 26 06 F1 | 	add	local05, #4
01950     13 31 02 FB | 	rdlong	local10, local05
01954     04 26 86 F1 | 	sub	local05, #4
01958     18 33 0A F6 | 	mov	local11, local10 wz
0195c     35 00 00 FF 
01960     0C E4 85 F1 | 	sub	objptr, ##27148
01964     24 00 90 AD |  if_e	jmp	#LR__0085
01968                 | LR__0084
01968     59 00 00 FF 
0196c     F8 E5 05 F1 | 	add	objptr, ##46072
01970     F2 34 02 FB | 	rdlong	local12, objptr
01974     59 00 00 FF 
01978     F8 E5 85 F1 | 	sub	objptr, ##46072
0197c     1A 37 02 F6 | 	mov	local13, local12
01980     1B 21 52 F2 | 	cmps	local02, local13 wc
01984     01 20 06 C1 |  if_b	add	local02, #1
01988     6C FF 9F CD |  if_b	jmp	#LR__0083
0198c                 | LR__0085
0198c                 | ' 
0198c                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
0198c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
0198c     59 00 00 FF 
01990     F8 E5 05 F1 | 	add	objptr, ##46072
01994     F2 24 02 FB | 	rdlong	local04, objptr
01998     59 00 00 FF 
0199c     F8 E5 85 F1 | 	sub	objptr, ##46072
019a0     12 21 52 F2 | 	cmps	local02, local04 wc
019a4     A8 00 90 3D |  if_ae	jmp	#LR__0088
019a8     37 00 00 FF 
019ac     1C E4 05 F1 | 	add	objptr, ##28188
019b0     F2 28 02 FB | 	rdlong	local06, objptr
019b4     37 00 00 FF 
019b8     1C E4 85 F1 | 	sub	objptr, ##28188
019bc     14 13 02 F6 | 	mov	arg01, local06
019c0     09 2B 02 F6 | 	mov	local07, arg01
019c4     97 06 48 FB | 	callpa	#(@LR__0087-@LR__0086)>>2,fcache_load_ptr_
019c8                 | LR__0086
019c8     15 FB C9 FA | 	rdbyte	result1, local07 wz
019cc     01 2A 06 51 |  if_ne	add	local07, #1
019d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0086
019d4                 | LR__0087
019d4     09 2B 82 F1 | 	sub	local07, arg01
019d8     15 27 02 F6 | 	mov	local05, local07
019dc     13 15 02 F6 | 	mov	arg02, local05
019e0     10 15 82 F1 | 	sub	arg02, local02
019e4     14 13 02 F6 | 	mov	arg01, local06
019e8     40 10 B2 FD | 	call	#__system__Right_S
019ec     FD 12 02 F6 | 	mov	arg01, result1
019f0     40 14 B2 FD | 	call	#__system__RTrim_S
019f4     FD 12 02 F6 | 	mov	arg01, result1
019f8     78 13 B2 FD | 	call	#__system__LTrim_S
019fc     5A 00 00 FF 
01a00     00 E4 05 F1 | 	add	objptr, ##46080
01a04     F2 FA 61 FC | 	wrlong	result1, objptr
01a08     22 00 00 FF 
01a0c     E4 E5 85 F1 | 	sub	objptr, ##17892
01a10     F2 12 02 FB | 	rdlong	arg01, objptr
01a14     37 00 00 FF 
01a18     1C E4 85 F1 | 	sub	objptr, ##28188
01a1c     01 20 86 F1 | 	sub	local02, #1
01a20     10 15 02 F6 | 	mov	arg02, local02
01a24     7C 0F B2 FD | 	call	#__system__Left_S
01a28     FD 12 02 F6 | 	mov	arg01, result1
01a2c     04 14 B2 FD | 	call	#__system__RTrim_S
01a30     FD 12 02 F6 | 	mov	arg01, result1
01a34     3C 13 B2 FD | 	call	#__system__LTrim_S
01a38     37 00 00 FF 
01a3c     1C E4 05 F1 | 	add	objptr, ##28188
01a40     F2 FA 61 FC | 	wrlong	result1, objptr
01a44     37 00 00 FF 
01a48     1C E4 85 F1 | 	sub	objptr, ##28188
01a4c     1C 00 90 FD | 	jmp	#LR__0089
01a50                 | LR__0088
01a50     80 01 00 FF 
01a54     E8 25 06 F6 | 	mov	local04, ##@LR__5014
01a58     5A 00 00 FF 
01a5c     00 E4 05 F1 | 	add	objptr, ##46080
01a60     F2 24 62 FC | 	wrlong	local04, objptr
01a64     5A 00 00 FF 
01a68     00 E4 85 F1 | 	sub	objptr, ##46080
01a6c                 | LR__0089
01a6c                 | ' 'print "line$=";line$
01a6c                 | ' 'print "rest$=";rest$
01a6c                 | ' 
01a6c                 | ' 
01a6c                 | ' if cont=-2 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
01a6c     37 00 00 FF 
01a70     24 E4 05 F1 | 	add	objptr, ##28196
01a74     F2 24 02 FB | 	rdlong	local04, objptr
01a78     37 00 00 FF 
01a7c     24 E4 85 F1 | 	sub	objptr, ##28196
01a80     FF FF 7F FF 
01a84     FE 25 0E F2 | 	cmp	local04, ##-2 wz
01a88     40 00 90 5D |  if_ne	jmp	#LR__0090
01a8c     5A 00 00 FF 
01a90     00 E4 05 F1 | 	add	objptr, ##46080
01a94     F2 12 02 FB | 	rdlong	arg01, objptr
01a98     5A 00 00 FF 
01a9c     00 E4 85 F1 | 	sub	objptr, ##46080
01aa0     80 01 00 FF 
01aa4     E9 29 06 F6 | 	mov	local06, ##@LR__5015
01aa8     14 15 02 F6 | 	mov	arg02, local06
01aac     A0 EE B1 FD | 	call	#__system___string_cmp
01ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ab4     37 00 00 5F 
01ab8     24 E4 05 51 |  if_ne	add	objptr, ##28196
01abc     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01ac0     37 00 00 5F 
01ac4     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01ac8     08 01 90 5D |  if_ne	jmp	#LR__0094
01acc                 | LR__0090
01acc                 | ' if cont=-2 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
01acc     37 00 00 FF 
01ad0     24 E4 05 F1 | 	add	objptr, ##28196
01ad4     F2 24 02 FB | 	rdlong	local04, objptr
01ad8     37 00 00 FF 
01adc     24 E4 85 F1 | 	sub	objptr, ##28196
01ae0     FF FF 7F FF 
01ae4     FE 25 0E F2 | 	cmp	local04, ##-2 wz
01ae8     3C 00 90 5D |  if_ne	jmp	#LR__0091
01aec     5A 00 00 FF 
01af0     00 E4 05 F1 | 	add	objptr, ##46080
01af4     F2 12 02 FB | 	rdlong	arg01, objptr
01af8     5A 00 00 FF 
01afc     00 E4 85 F1 | 	sub	objptr, ##46080
01b00     80 01 00 FF 
01b04     EA 15 06 F6 | 	mov	arg02, ##@LR__5016
01b08     44 EE B1 FD | 	call	#__system___string_cmp
01b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
01b10     37 00 00 AF 
01b14     24 E4 05 A1 |  if_e	add	objptr, ##28196
01b18     F2 06 68 AC |  if_e	wrlong	#3, objptr
01b1c     37 00 00 AF 
01b20     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01b24     AC 00 90 AD |  if_e	jmp	#LR__0094
01b28                 | LR__0091
01b28                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01b28     37 00 00 FF 
01b2c     24 E4 05 F1 | 	add	objptr, ##28196
01b30     F2 24 02 FB | 	rdlong	local04, objptr
01b34     37 00 00 FF 
01b38     24 E4 85 F1 | 	sub	objptr, ##28196
01b3c     04 24 0E F2 | 	cmp	local04, #4 wz
01b40     3C 00 90 5D |  if_ne	jmp	#LR__0092
01b44     5A 00 00 FF 
01b48     00 E4 05 F1 | 	add	objptr, ##46080
01b4c     F2 12 02 FB | 	rdlong	arg01, objptr
01b50     5A 00 00 FF 
01b54     00 E4 85 F1 | 	sub	objptr, ##46080
01b58     80 01 00 FF 
01b5c     EB 15 06 F6 | 	mov	arg02, ##@LR__5017
01b60     EC ED B1 FD | 	call	#__system___string_cmp
01b64     00 FA 0D F2 | 	cmp	result1, #0 wz
01b68     37 00 00 5F 
01b6c     24 E4 05 51 |  if_ne	add	objptr, ##28196
01b70     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01b74     37 00 00 5F 
01b78     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01b7c     54 00 90 5D |  if_ne	jmp	#LR__0094
01b80                 | LR__0092
01b80                 | ' if cont=4 andalso rest$="" then cont=2 : goto 107		' this is the last, and not the first, part
01b80     37 00 00 FF 
01b84     24 E4 05 F1 | 	add	objptr, ##28196
01b88     F2 24 02 FB | 	rdlong	local04, objptr
01b8c     37 00 00 FF 
01b90     24 E4 85 F1 | 	sub	objptr, ##28196
01b94     04 24 0E F2 | 	cmp	local04, #4 wz
01b98     38 00 90 5D |  if_ne	jmp	#LR__0093
01b9c     5A 00 00 FF 
01ba0     00 E4 05 F1 | 	add	objptr, ##46080
01ba4     F2 12 02 FB | 	rdlong	arg01, objptr
01ba8     5A 00 00 FF 
01bac     00 E4 85 F1 | 	sub	objptr, ##46080
01bb0     80 01 00 FF 
01bb4     EC 15 06 F6 | 	mov	arg02, ##@LR__5018
01bb8     94 ED B1 FD | 	call	#__system___string_cmp
01bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc0     37 00 00 AF 
01bc4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01bc8     F2 04 68 AC |  if_e	wrlong	#2, objptr
01bcc     37 00 00 AF 
01bd0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01bd4                 | LR__0093
01bd4                 | LR__0094
01bd4     20 4E 05 F1 | 	add	fp, #32
01bd8     A7 00 68 FC | 	wrlong	#0, fp
01bdc     20 4E 85 F1 | 	sub	fp, #32
01be0     00 20 06 F6 | 	mov	local02, #0
01be4     01 38 06 F6 | 	mov	local14, #1
01be8                 | ' 
01be8                 | ' ' 1b: find separators
01be8                 | ' 
01be8                 | ' 107
01be8                 | ' separators(0)=0
01be8                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
01be8                 | LR__0095
01be8     01 20 06 F1 | 	add	local02, #1
01bec     37 00 00 FF 
01bf0     1C E4 05 F1 | 	add	objptr, ##28188
01bf4     F2 12 02 FB | 	rdlong	arg01, objptr
01bf8     37 00 00 FF 
01bfc     1C E4 85 F1 | 	sub	objptr, ##28188
01c00     10 15 02 F6 | 	mov	arg02, local02
01c04     01 16 06 F6 | 	mov	arg03, #1
01c08     B0 0E B2 FD | 	call	#__system__Mid_S
01c0c     5A 00 00 FF 
01c10     04 E4 05 F1 | 	add	objptr, ##46084
01c14     F2 FA 61 FC | 	wrlong	result1, objptr
01c18                 | ' if isseparator(c$) then separators(j)=i: j+=1 
01c18     FD 12 02 F6 | 	mov	arg01, result1
01c1c     5A 00 00 FF 
01c20     04 E4 85 F1 | 	sub	objptr, ##46084
01c24     10 2B B0 FD | 	call	#_isseparator
01c28     00 FA 0D F2 | 	cmp	result1, #0 wz
01c2c     1C 00 90 AD |  if_e	jmp	#LR__0096
01c30     1C 23 02 F6 | 	mov	local03, local14
01c34     02 22 66 F0 | 	shl	local03, #2
01c38     20 4E 05 F1 | 	add	fp, #32
01c3c     A7 22 02 F1 | 	add	local03, fp
01c40     11 21 62 FC | 	wrlong	local02, local03
01c44     01 38 06 F1 | 	add	local14, #1
01c48     20 4E 85 F1 | 	sub	fp, #32
01c4c                 | LR__0096
01c4c     59 00 00 FF 
01c50     F8 E5 05 F1 | 	add	objptr, ##46072
01c54     F2 24 02 FB | 	rdlong	local04, objptr
01c58     59 00 00 FF 
01c5c     F8 E5 85 F1 | 	sub	objptr, ##46072
01c60     12 21 5A F2 | 	cmps	local02, local04 wcz
01c64     80 FF 9F ED |  if_be	jmp	#LR__0095
01c68     1C 23 02 F6 | 	mov	local03, local14
01c6c     02 22 66 F0 | 	shl	local03, #2
01c70     20 4E 05 F1 | 	add	fp, #32
01c74     A7 2E 02 F6 | 	mov	local09, fp
01c78     A7 22 02 F1 | 	add	local03, fp
01c7c     11 21 62 FC | 	wrlong	local02, local03
01c80     00 3A 06 F6 | 	mov	local15, #0
01c84                 | ' for i=0 to j-1 
01c84     00 20 06 F6 | 	mov	local02, #0
01c88     1C 3D 02 F6 | 	mov	local16, local14
01c8c     20 4E 85 F1 | 	sub	fp, #32
01c90                 | LR__0097
01c90     1E 21 52 F2 | 	cmps	local02, local16 wc
01c94     88 01 90 3D |  if_ae	jmp	#LR__0101
01c98     10 23 02 F6 | 	mov	local03, local02
01c9c     02 22 66 F0 | 	shl	local03, #2
01ca0     20 4E 05 F1 | 	add	fp, #32
01ca4     A7 22 02 F1 | 	add	local03, fp
01ca8     11 27 02 FB | 	rdlong	local05, local03
01cac     5A 00 00 FF 
01cb0     0C E4 05 F1 | 	add	objptr, ##46092
01cb4     F2 26 62 FC | 	wrlong	local05, objptr
01cb8     10 23 02 F6 | 	mov	local03, local02
01cbc     01 22 06 F1 | 	add	local03, #1
01cc0     02 22 66 F0 | 	shl	local03, #2
01cc4     A7 2E 02 F6 | 	mov	local09, fp
01cc8     A7 22 02 F1 | 	add	local03, fp
01ccc     11 27 02 FB | 	rdlong	local05, local03
01cd0     04 E4 05 F1 | 	add	objptr, #4
01cd4     F2 26 62 FC | 	wrlong	local05, objptr
01cd8                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
01cd8     04 E4 85 F1 | 	sub	objptr, #4
01cdc     F2 24 02 FB | 	rdlong	local04, objptr
01ce0     5A 00 00 FF 
01ce4     0C E4 85 F1 | 	sub	objptr, ##46092
01ce8     01 24 56 F2 | 	cmps	local04, #1 wc
01cec     20 4E 85 F1 | 	sub	fp, #32
01cf0     84 00 90 CD |  if_b	jmp	#LR__0099
01cf4     37 00 00 FF 
01cf8     1C E4 05 F1 | 	add	objptr, ##28188
01cfc     F2 12 02 FB | 	rdlong	arg01, objptr
01d00     22 00 00 FF 
01d04     F0 E5 05 F1 | 	add	objptr, ##17904
01d08     F2 14 02 FB | 	rdlong	arg02, objptr
01d0c     5A 00 00 FF 
01d10     0C E4 85 F1 | 	sub	objptr, ##46092
01d14     01 16 06 F6 | 	mov	arg03, #1
01d18     A0 0D B2 FD | 	call	#__system__Mid_S
01d1c     5A 00 00 FF 
01d20     14 E4 05 F1 | 	add	objptr, ##46100
01d24     F2 FA 61 FC | 	wrlong	result1, objptr
01d28     5A 00 00 FF 
01d2c     14 E4 85 F1 | 	sub	objptr, ##46100
01d30     FD 12 02 F6 | 	mov	arg01, result1
01d34     80 01 00 FF 
01d38     ED 15 06 F6 | 	mov	arg02, ##@LR__5019
01d3c     10 EC B1 FD | 	call	#__system___string_cmp
01d40     00 FA 0D F2 | 	cmp	result1, #0 wz
01d44     30 00 90 AD |  if_e	jmp	#LR__0098
01d48     1D 2F 02 F6 | 	mov	local09, local15
01d4c     03 2E 66 F0 | 	shl	local09, #3
01d50     35 00 00 FF 
01d54     0C E4 05 F1 | 	add	objptr, ##27148
01d58     F2 2E 02 F1 | 	add	local09, objptr
01d5c     25 00 00 FF 
01d60     08 E4 05 F1 | 	add	objptr, ##18952
01d64     F2 28 02 FB | 	rdlong	local06, objptr
01d68     5A 00 00 FF 
01d6c     14 E4 85 F1 | 	sub	objptr, ##46100
01d70     17 29 62 FC | 	wrlong	local06, local09
01d74     01 3A 06 F1 | 	add	local15, #1
01d78                 | LR__0098
01d78                 | LR__0099
01d78     37 00 00 FF 
01d7c     1C E4 05 F1 | 	add	objptr, ##28188
01d80     F2 12 02 FB | 	rdlong	arg01, objptr
01d84     22 00 00 FF 
01d88     F0 E5 05 F1 | 	add	objptr, ##17904
01d8c     F2 14 02 FB | 	rdlong	arg02, objptr
01d90     01 14 06 F1 | 	add	arg02, #1
01d94     04 E4 05 F1 | 	add	objptr, #4
01d98     F2 16 02 FB | 	rdlong	arg03, objptr
01d9c     04 E4 85 F1 | 	sub	objptr, #4
01da0     F2 30 02 FB | 	rdlong	local10, objptr
01da4     5A 00 00 FF 
01da8     0C E4 85 F1 | 	sub	objptr, ##46092
01dac     18 33 02 F6 | 	mov	local11, local10
01db0     19 17 82 F1 | 	sub	arg03, local11
01db4     01 16 86 F1 | 	sub	arg03, #1
01db8     00 0D B2 FD | 	call	#__system__Mid_S
01dbc     5A 00 00 FF 
01dc0     14 E4 05 F1 | 	add	objptr, ##46100
01dc4     F2 FA 61 FC | 	wrlong	result1, objptr
01dc8     5A 00 00 FF 
01dcc     14 E4 85 F1 | 	sub	objptr, ##46100
01dd0     FD 12 02 F6 | 	mov	arg01, result1
01dd4     80 01 00 FF 
01dd8     EE 15 06 F6 | 	mov	arg02, ##@LR__5020
01ddc     70 EB B1 FD | 	call	#__system___string_cmp
01de0     00 FA 0D F2 | 	cmp	result1, #0 wz
01de4     30 00 90 AD |  if_e	jmp	#LR__0100
01de8     1D 2F 02 F6 | 	mov	local09, local15
01dec     03 2E 66 F0 | 	shl	local09, #3
01df0     35 00 00 FF 
01df4     0C E4 05 F1 | 	add	objptr, ##27148
01df8     F2 2E 02 F1 | 	add	local09, objptr
01dfc     25 00 00 FF 
01e00     08 E4 05 F1 | 	add	objptr, ##18952
01e04     F2 28 02 FB | 	rdlong	local06, objptr
01e08     5A 00 00 FF 
01e0c     14 E4 85 F1 | 	sub	objptr, ##46100
01e10     17 29 62 FC | 	wrlong	local06, local09
01e14     01 3A 06 F1 | 	add	local15, #1
01e18                 | LR__0100
01e18     01 20 06 F1 | 	add	local02, #1
01e1c     70 FE 9F FD | 	jmp	#LR__0097
01e20                 | LR__0101
01e20                 | ' 
01e20                 | ' ' first part has to be a line number, if not, add 0 
01e20                 | ' 
01e20                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01e20     37 00 00 FF 
01e24     24 E4 05 F1 | 	add	objptr, ##28196
01e28     F2 24 0A FB | 	rdlong	local04, objptr wz
01e2c     37 00 00 FF 
01e30     24 E4 85 F1 | 	sub	objptr, ##28196
01e34     37 00 00 5F 
01e38     24 E4 05 51 |  if_ne	add	objptr, ##28196
01e3c     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
01e40     37 00 00 5F 
01e44     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01e48     03 2E 0E 52 |  if_ne	cmp	local09, #3 wz
01e4c     B8 00 90 5D |  if_ne	jmp	#LR__0104
01e50     35 00 00 FF 
01e54     0C E4 05 F1 | 	add	objptr, ##27148
01e58     F2 30 02 FB | 	rdlong	local10, objptr
01e5c     35 00 00 FF 
01e60     0C E4 85 F1 | 	sub	objptr, ##27148
01e64     18 13 02 F6 | 	mov	arg01, local10
01e68     50 46 B0 FD | 	call	#_isdec
01e6c     FD 32 02 F6 | 	mov	local11, result1
01e70     19 29 22 F6 | 	not	local06, local11
01e74     00 28 0E F2 | 	cmp	local06, #0 wz
01e78     8C 00 90 AD |  if_e	jmp	#LR__0104
01e7c     1D 21 02 F6 | 	mov	local02, local15
01e80     35 00 00 FF 
01e84     0C E4 05 F1 | 	add	objptr, ##27148
01e88     97 32 48 FB | 	callpa	#(@LR__0103-@LR__0102)>>2,fcache_load_ptr_
01e8c                 | LR__0102
01e8c     10 27 02 F6 | 	mov	local05, local02
01e90     01 26 86 F1 | 	sub	local05, #1
01e94     03 26 66 F0 | 	shl	local05, #3
01e98     F2 26 02 F1 | 	add	local05, objptr
01e9c     13 25 02 FB | 	rdlong	local04, local05
01ea0     10 29 02 F6 | 	mov	local06, local02
01ea4     01 28 86 F1 | 	sub	local06, #1
01ea8     03 28 66 F0 | 	shl	local06, #3
01eac     F2 28 02 F1 | 	add	local06, objptr
01eb0     04 28 06 F1 | 	add	local06, #4
01eb4     14 23 02 FB | 	rdlong	local03, local06
01eb8     10 29 02 F6 | 	mov	local06, local02
01ebc     03 28 66 F0 | 	shl	local06, #3
01ec0     F2 32 02 F6 | 	mov	local11, objptr
01ec4     F2 28 02 F1 | 	add	local06, objptr
01ec8     14 25 62 FC | 	wrlong	local04, local06
01ecc     10 31 02 F6 | 	mov	local10, local02
01ed0     18 35 02 F6 | 	mov	local12, local10
01ed4     03 34 66 F0 | 	shl	local12, #3
01ed8     F2 34 02 F1 | 	add	local12, objptr
01edc     04 34 06 F1 | 	add	local12, #4
01ee0     1A 23 62 FC | 	wrlong	local03, local12
01ee4     01 20 86 F1 | 	sub	local02, #1
01ee8     01 20 56 F2 | 	cmps	local02, #1 wc
01eec     9C FF 9F 3D |  if_ae	jmp	#LR__0102
01ef0                 | LR__0103
01ef0     80 01 00 FF 
01ef4     EF 25 06 F6 | 	mov	local04, ##@LR__5021
01ef8     F2 24 62 FC | 	wrlong	local04, objptr
01efc     35 00 00 FF 
01f00     0C E4 85 F1 | 	sub	objptr, ##27148
01f04     01 3A 06 F1 | 	add	local15, #1
01f08                 | LR__0104
01f08     00 20 06 F6 | 	mov	local02, #0
01f0c                 | ' 
01f0c                 | ' ' 1d : find strings
01f0c                 | ' 
01f0c                 | ' i=0
01f0c                 | ' do
01f0c                 | LR__0105
01f0c                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
01f0c     10 27 02 F6 | 	mov	local05, local02
01f10     03 26 66 F0 | 	shl	local05, #3
01f14     35 00 00 FF 
01f18     0C E4 05 F1 | 	add	objptr, ##27148
01f1c     F2 26 02 F1 | 	add	local05, objptr
01f20     13 13 02 FB | 	rdlong	arg01, local05
01f24     80 01 00 FF 
01f28     F1 15 06 F6 | 	mov	arg02, ##@LR__5022
01f2c     35 00 00 FF 
01f30     0C E4 85 F1 | 	sub	objptr, ##27148
01f34     18 EA B1 FD | 	call	#__system___string_cmp
01f38     00 FA 0D F2 | 	cmp	result1, #0 wz
01f3c     01 20 06 51 |  if_ne	add	local02, #1
01f40     50 01 90 5D |  if_ne	jmp	#LR__0110
01f44     10 3F 02 F6 | 	mov	local17, local02
01f48                 | LR__0106
01f48     10 2F 02 F6 | 	mov	local09, local02
01f4c     01 2E 06 F1 | 	add	local09, #1
01f50     03 2E 66 F0 | 	shl	local09, #3
01f54     35 00 00 FF 
01f58     0C E4 05 F1 | 	add	objptr, ##27148
01f5c     F2 2E 02 F1 | 	add	local09, objptr
01f60     17 31 02 FB | 	rdlong	local10, local09
01f64     25 00 00 FF 
01f68     08 E4 05 F1 | 	add	objptr, ##18952
01f6c     F2 30 62 FC | 	wrlong	local10, objptr
01f70     1F 2F 02 F6 | 	mov	local09, local17
01f74     03 2E 66 F0 | 	shl	local09, #3
01f78     25 00 00 FF 
01f7c     08 E4 85 F1 | 	sub	objptr, ##18952
01f80     F2 2E 02 F1 | 	add	local09, objptr
01f84     1F 37 02 F6 | 	mov	local13, local17
01f88     03 36 66 F0 | 	shl	local13, #3
01f8c     F2 36 02 F1 | 	add	local13, objptr
01f90     1B 13 02 FB | 	rdlong	arg01, local13
01f94     35 00 00 FF 
01f98     0C E4 85 F1 | 	sub	objptr, ##27148
01f9c     18 33 02 F6 | 	mov	local11, local10
01fa0     19 15 02 F6 | 	mov	arg02, local11
01fa4     DC E9 B1 FD | 	call	#__system___string_concat
01fa8     17 FB 61 FC | 	wrlong	result1, local09
01fac     10 39 02 F6 | 	mov	local14, local02
01fb0     01 38 06 F1 | 	add	local14, #1
01fb4     1D 41 02 F6 | 	mov	local18, local15
01fb8     01 40 06 F1 | 	add	local18, #1
01fbc     97 3C 48 FB | 	callpa	#(@LR__0108-@LR__0107)>>2,fcache_load_ptr_
01fc0                 | LR__0107
01fc0     20 39 52 F2 | 	cmps	local14, local18 wc
01fc4     70 00 90 3D |  if_ae	jmp	#LR__0109
01fc8     1C 27 02 F6 | 	mov	local05, local14
01fcc     01 26 06 F1 | 	add	local05, #1
01fd0     03 26 66 F0 | 	shl	local05, #3
01fd4     35 00 00 FF 
01fd8     0C E4 05 F1 | 	add	objptr, ##27148
01fdc     F2 26 02 F1 | 	add	local05, objptr
01fe0     13 25 02 FB | 	rdlong	local04, local05
01fe4     1C 29 02 F6 | 	mov	local06, local14
01fe8     01 28 06 F1 | 	add	local06, #1
01fec     03 28 66 F0 | 	shl	local06, #3
01ff0     F2 28 02 F1 | 	add	local06, objptr
01ff4     04 28 06 F1 | 	add	local06, #4
01ff8     14 23 02 FB | 	rdlong	local03, local06
01ffc     1C 29 02 F6 | 	mov	local06, local14
02000     03 28 66 F0 | 	shl	local06, #3
02004     F2 32 02 F6 | 	mov	local11, objptr
02008     F2 28 02 F1 | 	add	local06, objptr
0200c     14 25 62 FC | 	wrlong	local04, local06
02010     1C 31 02 F6 | 	mov	local10, local14
02014     18 35 02 F6 | 	mov	local12, local10
02018     03 34 66 F0 | 	shl	local12, #3
0201c     F2 34 02 F1 | 	add	local12, objptr
02020     04 34 06 F1 | 	add	local12, #4
02024     1A 23 62 FC | 	wrlong	local03, local12
02028     01 38 06 F1 | 	add	local14, #1
0202c     35 00 00 FF 
02030     0C E4 85 F1 | 	sub	objptr, ##27148
02034     88 FF 9F FD | 	jmp	#LR__0107
02038                 | LR__0108
02038                 | LR__0109
02038     01 3A 86 F1 | 	sub	local15, #1
0203c     5A 00 00 FF 
02040     14 E4 05 F1 | 	add	objptr, ##46100
02044     F2 12 02 FB | 	rdlong	arg01, objptr
02048     5A 00 00 FF 
0204c     14 E4 85 F1 | 	sub	objptr, ##46100
02050     80 01 00 FF 
02054     F3 15 06 F6 | 	mov	arg02, ##@LR__5023
02058     F4 E8 B1 FD | 	call	#__system___string_cmp
0205c     00 FA 0D F2 | 	cmp	result1, #0 wz
02060     1D 21 52 52 |  if_ne	cmps	local02, local15 wc
02064     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0106
02068                 | '   if p$<>"""" then k+=1:i+=1
02068     5A 00 00 FF 
0206c     14 E4 05 F1 | 	add	objptr, ##46100
02070     F2 12 02 FB | 	rdlong	arg01, objptr
02074     5A 00 00 FF 
02078     14 E4 85 F1 | 	sub	objptr, ##46100
0207c     80 01 00 FF 
02080     F5 15 06 F6 | 	mov	arg02, ##@LR__5024
02084     C8 E8 B1 FD | 	call	#__system___string_cmp
02088     00 FA 0D F2 | 	cmp	result1, #0 wz
0208c     01 3A 06 51 |  if_ne	add	local15, #1
02090     01 20 06 51 |  if_ne	add	local02, #1
02094                 | LR__0110
02094     1D 21 52 F2 | 	cmps	local02, local15 wc
02098     70 FE 9F CD |  if_b	jmp	#LR__0105
0209c     00 20 06 F6 | 	mov	local02, #0
020a0                 | ' 
020a0                 | ' ' 1e : concatenate strings if "" detected between
020a0                 | '  
020a0                 | ' i=0 : do
020a0                 | LR__0111
020a0                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
020a0     10 27 02 F6 | 	mov	local05, local02
020a4     03 26 66 F0 | 	shl	local05, #3
020a8     35 00 00 FF 
020ac     0C E4 05 F1 | 	add	objptr, ##27148
020b0     F2 26 02 F1 | 	add	local05, objptr
020b4     13 13 02 FB | 	rdlong	arg01, local05
020b8     01 14 06 F6 | 	mov	arg02, #1
020bc     35 00 00 FF 
020c0     0C E4 85 F1 | 	sub	objptr, ##27148
020c4     64 09 B2 FD | 	call	#__system__Right_S
020c8     FD 12 02 F6 | 	mov	arg01, result1
020cc     80 01 00 FF 
020d0     F7 15 06 F6 | 	mov	arg02, ##@LR__5025
020d4     78 E8 B1 FD | 	call	#__system___string_cmp
020d8     00 FA 0D F2 | 	cmp	result1, #0 wz
020dc     78 01 90 5D |  if_ne	jmp	#LR__0117
020e0     10 29 02 F6 | 	mov	local06, local02
020e4     01 28 06 F1 | 	add	local06, #1
020e8     03 28 66 F0 | 	shl	local06, #3
020ec     35 00 00 FF 
020f0     0C E4 05 F1 | 	add	objptr, ##27148
020f4     F2 32 02 F6 | 	mov	local11, objptr
020f8     F2 28 02 F1 | 	add	local06, objptr
020fc     14 13 02 FB | 	rdlong	arg01, local06
02100     01 14 06 F6 | 	mov	arg02, #1
02104     35 00 00 FF 
02108     0C E4 85 F1 | 	sub	objptr, ##27148
0210c     94 08 B2 FD | 	call	#__system__Left_S
02110     FD 12 02 F6 | 	mov	arg01, result1
02114     80 01 00 FF 
02118     F9 15 06 F6 | 	mov	arg02, ##@LR__5026
0211c     30 E8 B1 FD | 	call	#__system___string_cmp
02120     00 FA 0D F2 | 	cmp	result1, #0 wz
02124     30 01 90 5D |  if_ne	jmp	#LR__0117
02128     10 2F 02 F6 | 	mov	local09, local02
0212c     03 2E 66 F0 | 	shl	local09, #3
02130     35 00 00 FF 
02134     0C E4 05 F1 | 	add	objptr, ##27148
02138     F2 2E 02 F1 | 	add	local09, objptr
0213c     10 37 02 F6 | 	mov	local13, local02
02140     03 36 66 F0 | 	shl	local13, #3
02144     F2 36 02 F1 | 	add	local13, objptr
02148     1B 29 02 FB | 	rdlong	local06, local13
0214c     10 35 02 F6 | 	mov	local12, local02
02150     01 34 06 F1 | 	add	local12, #1
02154     03 34 66 F0 | 	shl	local12, #3
02158     F2 34 02 F1 | 	add	local12, objptr
0215c     1A 33 02 FB | 	rdlong	local11, local12
02160     10 43 02 F6 | 	mov	local19, local02
02164     01 42 06 F1 | 	add	local19, #1
02168     21 45 02 F6 | 	mov	local20, local19
0216c     03 44 66 F0 | 	shl	local20, #3
02170     F2 46 02 F6 | 	mov	local21, objptr
02174     F2 44 02 F1 | 	add	local20, objptr
02178     22 13 02 FB | 	rdlong	arg01, local20
0217c     35 00 00 FF 
02180     0C E4 85 F1 | 	sub	objptr, ##27148
02184     09 2B 02 F6 | 	mov	local07, arg01
02188     97 06 48 FB | 	callpa	#(@LR__0113-@LR__0112)>>2,fcache_load_ptr_
0218c                 | LR__0112
0218c     15 FB C9 FA | 	rdbyte	result1, local07 wz
02190     01 2A 06 51 |  if_ne	add	local07, #1
02194     F4 FF 9F 5D |  if_ne	jmp	#LR__0112
02198                 | LR__0113
02198     09 2B 82 F1 | 	sub	local07, arg01
0219c     15 31 02 F6 | 	mov	local10, local07
021a0     01 30 86 F1 | 	sub	local10, #1
021a4     19 13 02 F6 | 	mov	arg01, local11
021a8     18 15 02 F6 | 	mov	arg02, local10
021ac     7C 08 B2 FD | 	call	#__system__Right_S
021b0     FD 32 02 F6 | 	mov	local11, result1
021b4     14 13 02 F6 | 	mov	arg01, local06
021b8     19 15 02 F6 | 	mov	arg02, local11
021bc     C4 E7 B1 FD | 	call	#__system___string_concat
021c0     17 FB 61 FC | 	wrlong	result1, local09
021c4                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
021c4     10 39 02 F6 | 	mov	local14, local02
021c8     01 38 06 F1 | 	add	local14, #1
021cc     1D 49 02 F6 | 	mov	local22, local15
021d0     01 48 06 F1 | 	add	local22, #1
021d4     97 3C 48 FB | 	callpa	#(@LR__0115-@LR__0114)>>2,fcache_load_ptr_
021d8                 | LR__0114
021d8     24 39 52 F2 | 	cmps	local14, local22 wc
021dc     70 00 90 3D |  if_ae	jmp	#LR__0116
021e0     1C 27 02 F6 | 	mov	local05, local14
021e4     01 26 06 F1 | 	add	local05, #1
021e8     03 26 66 F0 | 	shl	local05, #3
021ec     35 00 00 FF 
021f0     0C E4 05 F1 | 	add	objptr, ##27148
021f4     F2 26 02 F1 | 	add	local05, objptr
021f8     13 25 02 FB | 	rdlong	local04, local05
021fc     1C 29 02 F6 | 	mov	local06, local14
02200     01 28 06 F1 | 	add	local06, #1
02204     03 28 66 F0 | 	shl	local06, #3
02208     F2 28 02 F1 | 	add	local06, objptr
0220c     04 28 06 F1 | 	add	local06, #4
02210     14 23 02 FB | 	rdlong	local03, local06
02214     1C 29 02 F6 | 	mov	local06, local14
02218     03 28 66 F0 | 	shl	local06, #3
0221c     F2 32 02 F6 | 	mov	local11, objptr
02220     F2 28 02 F1 | 	add	local06, objptr
02224     14 25 62 FC | 	wrlong	local04, local06
02228     1C 31 02 F6 | 	mov	local10, local14
0222c     18 35 02 F6 | 	mov	local12, local10
02230     03 34 66 F0 | 	shl	local12, #3
02234     F2 34 02 F1 | 	add	local12, objptr
02238     04 34 06 F1 | 	add	local12, #4
0223c     1A 23 62 FC | 	wrlong	local03, local12
02240     01 38 06 F1 | 	add	local14, #1
02244     35 00 00 FF 
02248     0C E4 85 F1 | 	sub	objptr, ##27148
0224c     88 FF 9F FD | 	jmp	#LR__0114
02250                 | LR__0115
02250                 | LR__0116
02250     01 20 86 F1 | 	sub	local02, #1
02254     01 3A 86 F1 | 	sub	local15, #1
02258                 | LR__0117
02258     01 20 06 F1 | 	add	local02, #1
0225c     1D 21 52 F2 | 	cmps	local02, local15 wc
02260     3C FE 9F CD |  if_b	jmp	#LR__0111
02264     00 20 06 F6 | 	mov	local02, #0
02268                 | '  
02268                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
02268                 | '  
02268                 | ' i=0 : do
02268                 | LR__0118
02268     10 2F 02 F6 | 	mov	local09, local02
0226c     03 2E 66 F0 | 	shl	local09, #3
02270     35 00 00 FF 
02274     0C E4 05 F1 | 	add	objptr, ##27148
02278     F2 2E 02 F1 | 	add	local09, objptr
0227c     17 29 02 FB | 	rdlong	local06, local09
02280     25 00 00 FF 
02284     10 E4 05 F1 | 	add	objptr, ##18960
02288     F2 28 62 FC | 	wrlong	local06, objptr
0228c     10 2F 02 F6 | 	mov	local09, local02
02290     01 2E 06 F1 | 	add	local09, #1
02294     03 2E 66 F0 | 	shl	local09, #3
02298     25 00 00 FF 
0229c     10 E4 85 F1 | 	sub	objptr, ##18960
022a0     F2 2E 02 F1 | 	add	local09, objptr
022a4     17 29 02 FB | 	rdlong	local06, local09
022a8     25 00 00 FF 
022ac     14 E4 05 F1 | 	add	objptr, ##18964
022b0     F2 28 62 FC | 	wrlong	local06, objptr
022b4                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
022b4     04 E4 85 F1 | 	sub	objptr, #4
022b8     F2 12 02 FB | 	rdlong	arg01, objptr
022bc     5A 00 00 FF 
022c0     1C E4 85 F1 | 	sub	objptr, ##46108
022c4     80 01 00 FF 
022c8     FB 15 06 F6 | 	mov	arg02, ##@LR__5027
022cc     80 E6 B1 FD | 	call	#__system___string_cmp
022d0     00 FA 0D F2 | 	cmp	result1, #0 wz
022d4     04 01 90 AD |  if_e	jmp	#LR__0119
022d8     5A 00 00 FF 
022dc     1C E4 05 F1 | 	add	objptr, ##46108
022e0     F2 12 02 FB | 	rdlong	arg01, objptr
022e4     5A 00 00 FF 
022e8     1C E4 85 F1 | 	sub	objptr, ##46108
022ec     80 01 00 FF 
022f0     FD 15 06 F6 | 	mov	arg02, ##@LR__5028
022f4     58 E6 B1 FD | 	call	#__system___string_cmp
022f8     FD 22 0A F6 | 	mov	local03, result1 wz
022fc     DC 00 90 AD |  if_e	jmp	#LR__0119
02300     5A 00 00 FF 
02304     1C E4 05 F1 | 	add	objptr, ##46108
02308     F2 12 02 FB | 	rdlong	arg01, objptr
0230c     5A 00 00 FF 
02310     1C E4 85 F1 | 	sub	objptr, ##46108
02314     80 01 00 FF 
02318     FF 15 06 F6 | 	mov	arg02, ##@LR__5029
0231c     30 E6 B1 FD | 	call	#__system___string_cmp
02320     00 FA 0D F2 | 	cmp	result1, #0 wz
02324     B4 00 90 AD |  if_e	jmp	#LR__0119
02328     5A 00 00 FF 
0232c     1C E4 05 F1 | 	add	objptr, ##46108
02330     F2 12 02 FB | 	rdlong	arg01, objptr
02334     5A 00 00 FF 
02338     1C E4 85 F1 | 	sub	objptr, ##46108
0233c     81 01 00 FF 
02340     01 32 06 F6 | 	mov	local11, ##@LR__5030
02344     19 15 02 F6 | 	mov	arg02, local11
02348     04 E6 B1 FD | 	call	#__system___string_cmp
0234c     00 FA 0D F2 | 	cmp	result1, #0 wz
02350     88 00 90 AD |  if_e	jmp	#LR__0119
02354     5A 00 00 FF 
02358     1C E4 05 F1 | 	add	objptr, ##46108
0235c     F2 12 02 FB | 	rdlong	arg01, objptr
02360     5A 00 00 FF 
02364     1C E4 85 F1 | 	sub	objptr, ##46108
02368     81 01 00 FF 
0236c     03 30 06 F6 | 	mov	local10, ##@LR__5031
02370     18 33 02 F6 | 	mov	local11, local10
02374     19 15 02 F6 | 	mov	arg02, local11
02378     D4 E5 B1 FD | 	call	#__system___string_cmp
0237c     00 FA 0D F2 | 	cmp	result1, #0 wz
02380     58 00 90 AD |  if_e	jmp	#LR__0119
02384     5A 00 00 FF 
02388     1C E4 05 F1 | 	add	objptr, ##46108
0238c     F2 12 02 FB | 	rdlong	arg01, objptr
02390     5A 00 00 FF 
02394     1C E4 85 F1 | 	sub	objptr, ##46108
02398     81 01 00 FF 
0239c     05 30 06 F6 | 	mov	local10, ##@LR__5032
023a0     18 15 02 F6 | 	mov	arg02, local10
023a4     A8 E5 B1 FD | 	call	#__system___string_cmp
023a8     FD 32 0A F6 | 	mov	local11, result1 wz
023ac     2C 00 90 AD |  if_e	jmp	#LR__0119
023b0     5A 00 00 FF 
023b4     1C E4 05 F1 | 	add	objptr, ##46108
023b8     F2 12 02 FB | 	rdlong	arg01, objptr
023bc     5A 00 00 FF 
023c0     1C E4 85 F1 | 	sub	objptr, ##46108
023c4     81 01 00 FF 
023c8     07 36 06 F6 | 	mov	local13, ##@LR__5033
023cc     1B 15 02 F6 | 	mov	arg02, local13
023d0     7C E5 B1 FD | 	call	#__system___string_cmp
023d4     FD 30 0A F6 | 	mov	local10, result1 wz
023d8     30 00 90 5D |  if_ne	jmp	#LR__0120
023dc                 | LR__0119
023dc     5A 00 00 FF 
023e0     20 E4 05 F1 | 	add	objptr, ##46112
023e4     F2 12 02 FB | 	rdlong	arg01, objptr
023e8     5A 00 00 FF 
023ec     20 E4 85 F1 | 	sub	objptr, ##46112
023f0     81 01 00 FF 
023f4     09 4A 06 F6 | 	mov	local23, ##@LR__5034
023f8     25 35 02 F6 | 	mov	local12, local23
023fc     1A 15 02 F6 | 	mov	arg02, local12
02400     4C E5 B1 FD | 	call	#__system___string_cmp
02404     FD 36 0A F6 | 	mov	local13, result1 wz
02408     18 01 90 AD |  if_e	jmp	#LR__0123
0240c                 | LR__0120
0240c     5A 00 00 FF 
02410     1C E4 05 F1 | 	add	objptr, ##46108
02414     F2 12 02 FB | 	rdlong	arg01, objptr
02418     5A 00 00 FF 
0241c     1C E4 85 F1 | 	sub	objptr, ##46108
02420     81 01 00 FF 
02424     0B 4A 06 F6 | 	mov	local23, ##@LR__5035
02428     25 15 02 F6 | 	mov	arg02, local23
0242c     20 E5 B1 FD | 	call	#__system___string_cmp
02430     FD 34 0A F6 | 	mov	local12, result1 wz
02434     30 00 90 5D |  if_ne	jmp	#LR__0121
02438     5A 00 00 FF 
0243c     20 E4 05 F1 | 	add	objptr, ##46112
02440     F2 12 02 FB | 	rdlong	arg01, objptr
02444     5A 00 00 FF 
02448     20 E4 85 F1 | 	sub	objptr, ##46112
0244c     81 01 00 FF 
02450     0D 44 06 F6 | 	mov	local20, ##@LR__5036
02454     22 43 02 F6 | 	mov	local19, local20
02458     21 15 02 F6 | 	mov	arg02, local19
0245c     F0 E4 B1 FD | 	call	#__system___string_cmp
02460     FD 4A 0A F6 | 	mov	local23, result1 wz
02464     BC 00 90 AD |  if_e	jmp	#LR__0123
02468                 | LR__0121
02468     5A 00 00 FF 
0246c     1C E4 05 F1 | 	add	objptr, ##46108
02470     F2 12 02 FB | 	rdlong	arg01, objptr
02474     5A 00 00 FF 
02478     1C E4 85 F1 | 	sub	objptr, ##46108
0247c     81 01 00 FF 
02480     0F 44 06 F6 | 	mov	local20, ##@LR__5037
02484     22 15 02 F6 | 	mov	arg02, local20
02488     C4 E4 B1 FD | 	call	#__system___string_cmp
0248c     FD 42 0A F6 | 	mov	local19, result1 wz
02490     30 00 90 5D |  if_ne	jmp	#LR__0122
02494     5A 00 00 FF 
02498     20 E4 05 F1 | 	add	objptr, ##46112
0249c     F2 12 02 FB | 	rdlong	arg01, objptr
024a0     5A 00 00 FF 
024a4     20 E4 85 F1 | 	sub	objptr, ##46112
024a8     81 01 00 FF 
024ac     11 4C 06 F6 | 	mov	local24, ##@LR__5038
024b0     26 47 02 F6 | 	mov	local21, local24
024b4     23 15 02 F6 | 	mov	arg02, local21
024b8     94 E4 B1 FD | 	call	#__system___string_cmp
024bc     FD 44 0A F6 | 	mov	local20, result1 wz
024c0     60 00 90 AD |  if_e	jmp	#LR__0123
024c4                 | LR__0122
024c4     5A 00 00 FF 
024c8     1C E4 05 F1 | 	add	objptr, ##46108
024cc     F2 12 02 FB | 	rdlong	arg01, objptr
024d0     5A 00 00 FF 
024d4     1C E4 85 F1 | 	sub	objptr, ##46108
024d8     81 01 00 FF 
024dc     13 4E 06 F6 | 	mov	local25, ##@LR__5039
024e0     27 4D 02 F6 | 	mov	local24, local25
024e4     26 15 02 F6 | 	mov	arg02, local24
024e8     64 E4 B1 FD | 	call	#__system___string_cmp
024ec     FD 46 0A F6 | 	mov	local21, result1 wz
024f0     10 01 90 5D |  if_ne	jmp	#LR__0127
024f4     5A 00 00 FF 
024f8     20 E4 05 F1 | 	add	objptr, ##46112
024fc     F2 12 02 FB | 	rdlong	arg01, objptr
02500     5A 00 00 FF 
02504     20 E4 85 F1 | 	sub	objptr, ##46112
02508     81 01 00 FF 
0250c     15 50 06 F6 | 	mov	local26, ##@LR__5040
02510     28 4F 02 F6 | 	mov	local25, local26
02514     27 15 02 F6 | 	mov	arg02, local25
02518     34 E4 B1 FD | 	call	#__system___string_cmp
0251c     FD 4C 0A F6 | 	mov	local24, result1 wz
02520     E0 00 90 5D |  if_ne	jmp	#LR__0127
02524                 | LR__0123
02524     10 2F 02 F6 | 	mov	local09, local02
02528     03 2E 66 F0 | 	shl	local09, #3
0252c     35 00 00 FF 
02530     0C E4 05 F1 | 	add	objptr, ##27148
02534     F2 2E 02 F1 | 	add	local09, objptr
02538     25 00 00 FF 
0253c     10 E4 05 F1 | 	add	objptr, ##18960
02540     F2 12 02 FB | 	rdlong	arg01, objptr
02544     04 E4 05 F1 | 	add	objptr, #4
02548     F2 30 02 FB | 	rdlong	local10, objptr
0254c     5A 00 00 FF 
02550     20 E4 85 F1 | 	sub	objptr, ##46112
02554     18 33 02 F6 | 	mov	local11, local10
02558     19 15 02 F6 | 	mov	arg02, local11
0255c     24 E4 B1 FD | 	call	#__system___string_concat
02560     17 FB 61 FC | 	wrlong	result1, local09
02564                 | '     lparts(i).part$=s1$+s2$
02564                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
02564     10 39 02 F6 | 	mov	local14, local02
02568     01 38 06 F1 | 	add	local14, #1
0256c     1D 53 02 F6 | 	mov	local27, local15
02570     01 52 06 F1 | 	add	local27, #1
02574     97 42 48 FB | 	callpa	#(@LR__0125-@LR__0124)>>2,fcache_load_ptr_
02578                 | LR__0124
02578     29 39 52 F2 | 	cmps	local14, local27 wc
0257c     7C 00 90 3D |  if_ae	jmp	#LR__0126
02580     1C 27 02 F6 | 	mov	local05, local14
02584     01 26 06 F1 | 	add	local05, #1
02588     03 26 66 F0 | 	shl	local05, #3
0258c     35 00 00 FF 
02590     0C E4 05 F1 | 	add	objptr, ##27148
02594     F2 26 02 F1 | 	add	local05, objptr
02598     13 25 02 FB | 	rdlong	local04, local05
0259c     1C 29 02 F6 | 	mov	local06, local14
025a0     01 28 06 F1 | 	add	local06, #1
025a4     03 28 66 F0 | 	shl	local06, #3
025a8     F2 28 02 F1 | 	add	local06, objptr
025ac     04 28 06 F1 | 	add	local06, #4
025b0     14 23 02 FB | 	rdlong	local03, local06
025b4     1C 29 02 F6 | 	mov	local06, local14
025b8     03 28 66 F0 | 	shl	local06, #3
025bc     F2 32 02 F6 | 	mov	local11, objptr
025c0     F2 28 02 F1 | 	add	local06, objptr
025c4     14 25 62 FC | 	wrlong	local04, local06
025c8     1C 31 02 F6 | 	mov	local10, local14
025cc     18 37 02 F6 | 	mov	local13, local10
025d0     1B 35 02 F6 | 	mov	local12, local13
025d4     03 34 66 F0 | 	shl	local12, #3
025d8     F2 4A 02 F6 | 	mov	local23, objptr
025dc     F2 34 02 F1 | 	add	local12, objptr
025e0     04 34 06 F1 | 	add	local12, #4
025e4     1A 23 62 FC | 	wrlong	local03, local12
025e8     04 34 86 F1 | 	sub	local12, #4
025ec     01 38 06 F1 | 	add	local14, #1
025f0     35 00 00 FF 
025f4     0C E4 85 F1 | 	sub	objptr, ##27148
025f8     7C FF 9F FD | 	jmp	#LR__0124
025fc                 | LR__0125
025fc                 | LR__0126
025fc     01 20 86 F1 | 	sub	local02, #1
02600     01 3A 86 F1 | 	sub	local15, #1
02604                 | LR__0127
02604     01 20 06 F1 | 	add	local02, #1
02608     1D 21 52 F2 | 	cmps	local02, local15 wc
0260c     58 FC 9F CD |  if_b	jmp	#LR__0118
02610                 | '  
02610                 | ' ' 1f : now remove parts that are spaces
02610                 | ' 
02610                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02610     00 20 06 F6 | 	mov	local02, #0
02614     1D 55 02 F6 | 	mov	local28, local15
02618     01 54 06 F1 | 	add	local28, #1
0261c                 | LR__0128
0261c     2A 21 52 F2 | 	cmps	local02, local28 wc
02620     50 00 90 3D |  if_ae	jmp	#LR__0129
02624     10 2F 02 F6 | 	mov	local09, local02
02628     03 2E 66 F0 | 	shl	local09, #3
0262c     35 00 00 FF 
02630     0C E4 05 F1 | 	add	objptr, ##27148
02634     F2 2E 02 F1 | 	add	local09, objptr
02638     10 33 02 F6 | 	mov	local11, local02
0263c     19 31 02 F6 | 	mov	local10, local11
02640     18 37 02 F6 | 	mov	local13, local10
02644     03 36 66 F0 | 	shl	local13, #3
02648     F2 34 02 F6 | 	mov	local12, objptr
0264c     F2 36 02 F1 | 	add	local13, objptr
02650     1B 13 02 FB | 	rdlong	arg01, local13
02654     35 00 00 FF 
02658     0C E4 85 F1 | 	sub	objptr, ##27148
0265c     D4 07 B2 FD | 	call	#__system__RTrim_S
02660     FD 12 02 F6 | 	mov	arg01, result1
02664     0C 07 B2 FD | 	call	#__system__LTrim_S
02668     17 FB 61 FC | 	wrlong	result1, local09
0266c     01 20 06 F1 | 	add	local02, #1
02670     A8 FF 9F FD | 	jmp	#LR__0128
02674                 | LR__0129
02674     00 20 06 F6 | 	mov	local02, #0
02678     97 8A 48 FB | 	callpa	#(@LR__0136-@LR__0130)>>2,fcache_load_ptr_
0267c                 | ' 
0267c                 | ' i=0
0267c                 | ' do 
0267c                 | LR__0130
0267c                 | '   if len(lparts(i).part$)=0 then 
0267c     10 2F 02 F6 | 	mov	local09, local02
02680     17 27 02 F6 | 	mov	local05, local09
02684     03 26 66 F0 | 	shl	local05, #3
02688     35 00 00 FF 
0268c     0C E4 05 F1 | 	add	objptr, ##27148
02690     F2 26 02 F1 | 	add	local05, objptr
02694     13 13 02 FB | 	rdlong	arg01, local05
02698     35 00 00 FF 
0269c     0C E4 85 F1 | 	sub	objptr, ##27148
026a0     09 2B 02 F6 | 	mov	local07, arg01
026a4                 | LR__0131
026a4     15 FB C9 FA | 	rdbyte	result1, local07 wz
026a8     01 2A 06 51 |  if_ne	add	local07, #1
026ac     F4 FF 9F 5D |  if_ne	jmp	#LR__0131
026b0     09 2B 8A F1 | 	sub	local07, arg01 wz
026b4     C4 00 90 5D |  if_ne	jmp	#LR__0135
026b8                 | '     if i=k-1 then k-=1  :  exit
026b8     1D 25 02 F6 | 	mov	local04, local15
026bc     01 24 86 F1 | 	sub	local04, #1
026c0     12 21 0A F2 | 	cmp	local02, local04 wz
026c4     01 3A 86 A1 |  if_e	sub	local15, #1
026c8     C4 00 90 AD |  if_e	jmp	#LR__0137
026cc                 | '     if i<k-1 then 
026cc     1D 25 02 F6 | 	mov	local04, local15
026d0     01 24 86 F1 | 	sub	local04, #1
026d4     12 21 52 F2 | 	cmps	local02, local04 wc
026d8     A0 00 90 3D |  if_ae	jmp	#LR__0134
026dc                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
026dc     10 39 02 F6 | 	mov	local14, local02
026e0     1D 57 02 F6 | 	mov	local29, local15
026e4     01 56 86 F1 | 	sub	local29, #1
026e8                 | LR__0132
026e8     2B 39 52 F2 | 	cmps	local14, local29 wc
026ec     80 00 90 3D |  if_ae	jmp	#LR__0133
026f0     1C 27 02 F6 | 	mov	local05, local14
026f4     01 26 06 F1 | 	add	local05, #1
026f8     03 26 66 F0 | 	shl	local05, #3
026fc     35 00 00 FF 
02700     0C E4 05 F1 | 	add	objptr, ##27148
02704     F2 26 02 F1 | 	add	local05, objptr
02708     13 25 02 FB | 	rdlong	local04, local05
0270c     1C 29 02 F6 | 	mov	local06, local14
02710     01 28 06 F1 | 	add	local06, #1
02714     03 28 66 F0 | 	shl	local06, #3
02718     F2 28 02 F1 | 	add	local06, objptr
0271c     04 28 06 F1 | 	add	local06, #4
02720     14 23 02 FB | 	rdlong	local03, local06
02724     1C 2F 02 F6 | 	mov	local09, local14
02728     17 29 02 F6 | 	mov	local06, local09
0272c     03 28 66 F0 | 	shl	local06, #3
02730     F2 32 02 F6 | 	mov	local11, objptr
02734     F2 28 02 F1 | 	add	local06, objptr
02738     14 25 62 FC | 	wrlong	local04, local06
0273c     1C 31 02 F6 | 	mov	local10, local14
02740     18 37 02 F6 | 	mov	local13, local10
02744     1B 35 02 F6 | 	mov	local12, local13
02748     03 34 66 F0 | 	shl	local12, #3
0274c     F2 4A 02 F6 | 	mov	local23, objptr
02750     F2 34 02 F1 | 	add	local12, objptr
02754     04 34 06 F1 | 	add	local12, #4
02758     1A 23 62 FC | 	wrlong	local03, local12
0275c     04 34 86 F1 | 	sub	local12, #4
02760     01 38 06 F1 | 	add	local14, #1
02764     35 00 00 FF 
02768     0C E4 85 F1 | 	sub	objptr, ##27148
0276c     78 FF 9F FD | 	jmp	#LR__0132
02770                 | LR__0133
02770     01 3A 86 F1 | 	sub	local15, #1
02774                 | '       if i>0 then i-=1 
02774     01 20 56 F2 | 	cmps	local02, #1 wc
02778     01 20 86 31 |  if_ae	sub	local02, #1
0277c                 | LR__0134
0277c                 | LR__0135
0277c     01 20 06 F1 | 	add	local02, #1
02780     1D 25 02 F6 | 	mov	local04, local15
02784     01 24 86 F1 | 	sub	local04, #1
02788     12 21 5A F2 | 	cmps	local02, local04 wcz
0278c     EC FE 9F ED |  if_be	jmp	#LR__0130
02790                 | LR__0136
02790                 | LR__0137
02790                 | ' 
02790                 | ' ' 1g: lowercase all that is not a string
02790                 | ' 
02790                 | ' for j=0 to k-1
02790     00 38 06 F6 | 	mov	local14, #0
02794     1D 59 02 F6 | 	mov	local30, local15
02798                 | LR__0138
02798     2C 39 52 F2 | 	cmps	local14, local30 wc
0279c     C0 00 90 3D |  if_ae	jmp	#LR__0141
027a0                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
027a0     1C 27 02 F6 | 	mov	local05, local14
027a4     03 26 66 F0 | 	shl	local05, #3
027a8     35 00 00 FF 
027ac     0C E4 05 F1 | 	add	objptr, ##27148
027b0     F2 26 02 F1 | 	add	local05, objptr
027b4     13 13 02 FB | 	rdlong	arg01, local05
027b8     01 14 06 F6 | 	mov	arg02, #1
027bc     35 00 00 FF 
027c0     0C E4 85 F1 | 	sub	objptr, ##27148
027c4     DC 01 B2 FD | 	call	#__system__Left_S
027c8     FD 12 02 F6 | 	mov	arg01, result1
027cc     81 01 00 FF 
027d0     17 14 06 F6 | 	mov	arg02, ##@LR__5041
027d4     78 E1 B1 FD | 	call	#__system___string_cmp
027d8     00 FA 0D F2 | 	cmp	result1, #0 wz
027dc     40 00 90 5D |  if_ne	jmp	#LR__0139
027e0     1C 29 02 F6 | 	mov	local06, local14
027e4     03 28 66 F0 | 	shl	local06, #3
027e8     35 00 00 FF 
027ec     0C E4 05 F1 | 	add	objptr, ##27148
027f0     F2 28 02 F1 | 	add	local06, objptr
027f4     14 13 02 FB | 	rdlong	arg01, local06
027f8     01 14 06 F6 | 	mov	arg02, #1
027fc     35 00 00 FF 
02800     0C E4 85 F1 | 	sub	objptr, ##27148
02804     24 02 B2 FD | 	call	#__system__Right_S
02808     FD 12 02 F6 | 	mov	arg01, result1
0280c     81 01 00 FF 
02810     19 14 06 F6 | 	mov	arg02, ##@LR__5042
02814     38 E1 B1 FD | 	call	#__system___string_cmp
02818     00 FA 0D F2 | 	cmp	result1, #0 wz
0281c     38 00 90 AD |  if_e	jmp	#LR__0140
02820                 | LR__0139
02820     1C 2F 02 F6 | 	mov	local09, local14
02824     03 2E 66 F0 | 	shl	local09, #3
02828     35 00 00 FF 
0282c     0C E4 05 F1 | 	add	objptr, ##27148
02830     F2 2E 02 F1 | 	add	local09, objptr
02834     1C 37 02 F6 | 	mov	local13, local14
02838     03 36 66 F0 | 	shl	local13, #3
0283c     F2 34 02 F6 | 	mov	local12, objptr
02840     F2 36 02 F1 | 	add	local13, objptr
02844     1B 13 02 FB | 	rdlong	arg01, local13
02848     35 00 00 FF 
0284c     0C E4 85 F1 | 	sub	objptr, ##27148
02850     60 04 B2 FD | 	call	#__system__LCase_S
02854     17 FB 61 FC | 	wrlong	result1, local09
02858                 | LR__0140
02858     01 38 06 F1 | 	add	local14, #1
0285c     38 FF 9F FD | 	jmp	#LR__0138
02860                 | LR__0141
02860                 | ' 
02860                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
02860                 | ' 
02860                 | ' for i=0 to k: lparts(i).token=-1: next i
02860     00 20 06 F6 | 	mov	local02, #0
02864     1D 5B 02 F6 | 	mov	local31, local15
02868     01 5A 06 F1 | 	add	local31, #1
0286c     97 1C 48 FB | 	callpa	#(@LR__0143-@LR__0142)>>2,fcache_load_ptr_
02870                 | LR__0142
02870     2D 21 52 F2 | 	cmps	local02, local31 wc
02874     30 00 90 3D |  if_ae	jmp	#LR__0144
02878     10 2F 02 F6 | 	mov	local09, local02
0287c     03 2E 66 F0 | 	shl	local09, #3
02880     35 00 00 FF 
02884     0C E4 05 F1 | 	add	objptr, ##27148
02888     F2 2E 02 F1 | 	add	local09, objptr
0288c     04 2E 06 F1 | 	add	local09, #4
02890     FF FF FF FF 
02894     17 FF 6B FC | 	wrlong	##-1, local09
02898     01 20 06 F1 | 	add	local02, #1
0289c     35 00 00 FF 
028a0     0C E4 85 F1 | 	sub	objptr, ##27148
028a4     C8 FF 9F FD | 	jmp	#LR__0142
028a8                 | LR__0143
028a8                 | LR__0144
028a8                 | ' 
028a8                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
028a8                 | ' 
028a8                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
028a8     35 00 00 FF 
028ac     0C E4 05 F1 | 	add	objptr, ##27148
028b0     F2 12 02 FB | 	rdlong	arg01, objptr
028b4     35 00 00 FF 
028b8     0C E4 85 F1 | 	sub	objptr, ##27148
028bc     09 2B 02 F6 | 	mov	local07, arg01
028c0     97 06 48 FB | 	callpa	#(@LR__0146-@LR__0145)>>2,fcache_load_ptr_
028c4                 | LR__0145
028c4     15 FB C9 FA | 	rdbyte	result1, local07 wz
028c8     01 2A 06 51 |  if_ne	add	local07, #1
028cc     F4 FF 9F 5D |  if_ne	jmp	#LR__0145
028d0                 | LR__0146
028d0     09 2B 8A F1 | 	sub	local07, arg01 wz
028d4     00 17 90 AD |  if_e	jmp	#LR__0196
028d8                 | ' 
028d8                 | ' 
028d8                 | ' if isdec(lparts(0).part$) then let addptr=1 else let addptr=0
028d8     35 00 00 FF 
028dc     0C E4 05 F1 | 	add	objptr, ##27148
028e0     F2 12 02 FB | 	rdlong	arg01, objptr
028e4     35 00 00 FF 
028e8     0C E4 85 F1 | 	sub	objptr, ##27148
028ec     CC 3B B0 FD | 	call	#_isdec
028f0     00 FA 0D F2 | 	cmp	result1, #0 wz
028f4     5A 00 00 5F 
028f8     24 E4 05 51 |  if_ne	add	objptr, ##46116
028fc     F2 02 68 5C |  if_ne	wrlong	#1, objptr
02900     5A 00 00 FF 
02904     24 E4 E5 F3 | 	sumnz	objptr, ##46116
02908     F2 00 68 AC |  if_e	wrlong	#0, objptr
0290c     5A 00 00 AF 
02910     24 E4 85 A1 |  if_e	sub	objptr, ##46116
02914     5A 00 00 FF 
02918     24 E4 05 F1 | 	add	objptr, ##46116
0291c     F2 26 02 FB | 	rdlong	local05, objptr
02920     03 26 66 F0 | 	shl	local05, #3
02924     25 00 00 FF 
02928     18 E4 85 F1 | 	sub	objptr, ##18968
0292c     F2 26 02 F1 | 	add	local05, objptr
02930     13 33 02 FB | 	rdlong	local11, local05
02934     25 00 00 FF 
02938     1C E4 05 F1 | 	add	objptr, ##18972
0293c     F2 32 62 FC | 	wrlong	local11, objptr
02940     04 E4 85 F1 | 	sub	objptr, #4
02944     F2 32 02 FB | 	rdlong	local11, objptr
02948     03 32 66 F0 | 	shl	local11, #3
0294c     25 00 00 FF 
02950     18 E4 85 F1 | 	sub	objptr, ##18968
02954     F2 30 02 F6 | 	mov	local10, objptr
02958     F2 32 02 F1 | 	add	local11, objptr
0295c     19 15 02 FB | 	rdlong	arg02, local11
02960     81 01 00 FF 
02964     1B 16 06 F6 | 	mov	arg03, ##@LR__5043
02968     01 12 06 F6 | 	mov	arg01, #1
0296c     35 00 00 FF 
02970     0C E4 85 F1 | 	sub	objptr, ##27148
02974     74 05 B2 FD | 	call	#__system__Instr
02978     5A 00 00 FF 
0297c     2C E4 05 F1 | 	add	objptr, ##46124
02980     F2 FA 61 FC | 	wrlong	result1, objptr
02984                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 
02984     FD 24 02 F6 | 	mov	local04, result1
02988     5A 00 00 FF 
0298c     2C E4 85 F1 | 	sub	objptr, ##46124
02990     01 24 56 F2 | 	cmps	local04, #1 wc
02994     DC 01 90 CD |  if_b	jmp	#LR__0153
02998     5A 00 00 FF 
0299c     24 E4 05 F1 | 	add	objptr, ##46116
029a0     F2 30 02 FB | 	rdlong	local10, objptr
029a4     03 30 66 F0 | 	shl	local10, #3
029a8     25 00 00 FF 
029ac     18 E4 85 F1 | 	sub	objptr, ##18968
029b0     F2 36 02 F6 | 	mov	local13, objptr
029b4     F2 30 02 F1 | 	add	local10, objptr
029b8     18 13 02 FB | 	rdlong	arg01, local10
029bc     35 00 00 FF 
029c0     0C E4 85 F1 | 	sub	objptr, ##27148
029c4     09 2B 02 F6 | 	mov	local07, arg01
029c8     97 06 48 FB | 	callpa	#(@LR__0148-@LR__0147)>>2,fcache_load_ptr_
029cc                 | LR__0147
029cc     15 FB C9 FA | 	rdbyte	result1, local07 wz
029d0     01 2A 06 51 |  if_ne	add	local07, #1
029d4     F4 FF 9F 5D |  if_ne	jmp	#LR__0147
029d8                 | LR__0148
029d8     09 2B 82 F1 | 	sub	local07, arg01
029dc     15 2F 02 F6 | 	mov	local09, local07
029e0     5A 00 00 FF 
029e4     2C E4 05 F1 | 	add	objptr, ##46124
029e8     F2 26 02 FB | 	rdlong	local05, objptr
029ec     5A 00 00 FF 
029f0     2C E4 85 F1 | 	sub	objptr, ##46124
029f4     17 27 52 F2 | 	cmps	local05, local09 wc
029f8     78 01 90 3D |  if_ae	jmp	#LR__0153
029fc     01 3A 06 F1 | 	add	local15, #1
02a00                 | '   k+=1
02a00                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02a00     1D 21 02 F6 | 	mov	local02, local15
02a04     5A 00 00 FF 
02a08     24 E4 05 F1 | 	add	objptr, ##46116
02a0c     F2 5C 02 FB | 	rdlong	local32, objptr
02a10     01 5C 06 F1 | 	add	local32, #1
02a14     25 00 00 FF 
02a18     18 E4 85 F1 | 	sub	objptr, ##18968
02a1c     97 2E 48 FB | 	callpa	#(@LR__0150-@LR__0149)>>2,fcache_load_ptr_
02a20                 | LR__0149
02a20     10 29 02 F6 | 	mov	local06, local02
02a24     01 28 86 F1 | 	sub	local06, #1
02a28     03 28 66 F0 | 	shl	local06, #3
02a2c     F2 28 02 F1 | 	add	local06, objptr
02a30     14 23 02 FB | 	rdlong	local03, local06
02a34     10 33 02 F6 | 	mov	local11, local02
02a38     01 32 86 F1 | 	sub	local11, #1
02a3c     03 32 66 F0 | 	shl	local11, #3
02a40     F2 32 02 F1 | 	add	local11, objptr
02a44     04 32 06 F1 | 	add	local11, #4
02a48     19 2F 02 FB | 	rdlong	local09, local11
02a4c     10 33 02 F6 | 	mov	local11, local02
02a50     03 32 66 F0 | 	shl	local11, #3
02a54     F2 32 02 F1 | 	add	local11, objptr
02a58     19 23 62 FC | 	wrlong	local03, local11
02a5c     10 4B 02 F6 | 	mov	local23, local02
02a60     03 4A 66 F0 | 	shl	local23, #3
02a64     F2 4A 02 F1 | 	add	local23, objptr
02a68     04 4A 06 F1 | 	add	local23, #4
02a6c     25 2F 62 FC | 	wrlong	local09, local23
02a70     01 20 86 F1 | 	sub	local02, #1
02a74     2E 21 52 F2 | 	cmps	local02, local32 wc
02a78     A4 FF 9F 3D |  if_ae	jmp	#LR__0149
02a7c                 | LR__0150
02a7c     25 00 00 FF 
02a80     18 E4 05 F1 | 	add	objptr, ##18968
02a84     F2 4A 02 FB | 	rdlong	local23, objptr
02a88     25 27 02 F6 | 	mov	local05, local23
02a8c     01 26 06 F1 | 	add	local05, #1
02a90     03 26 66 F0 | 	shl	local05, #3
02a94     25 00 00 FF 
02a98     18 E4 85 F1 | 	sub	objptr, ##18968
02a9c     F2 26 02 F1 | 	add	local05, objptr
02aa0     03 4A 66 F0 | 	shl	local23, #3
02aa4     F2 4A 02 F1 | 	add	local23, objptr
02aa8     25 33 02 FB | 	rdlong	local11, local23
02aac     25 00 00 FF 
02ab0     18 E4 05 F1 | 	add	objptr, ##18968
02ab4     F2 44 02 FB | 	rdlong	local20, objptr
02ab8     22 47 02 F6 | 	mov	local21, local20
02abc     03 46 66 F0 | 	shl	local21, #3
02ac0     25 00 00 FF 
02ac4     18 E4 85 F1 | 	sub	objptr, ##18968
02ac8     F2 4C 02 F6 | 	mov	local24, objptr
02acc     F2 46 02 F1 | 	add	local21, objptr
02ad0     23 13 02 FB | 	rdlong	arg01, local21
02ad4     35 00 00 FF 
02ad8     0C E4 85 F1 | 	sub	objptr, ##27148
02adc     09 2B 02 F6 | 	mov	local07, arg01
02ae0     97 06 48 FB | 	callpa	#(@LR__0152-@LR__0151)>>2,fcache_load_ptr_
02ae4                 | LR__0151
02ae4     15 FB C9 FA | 	rdbyte	result1, local07 wz
02ae8     01 2A 06 51 |  if_ne	add	local07, #1
02aec     F4 FF 9F 5D |  if_ne	jmp	#LR__0151
02af0                 | LR__0152
02af0     09 2B 82 F1 | 	sub	local07, arg01
02af4     15 15 02 F6 | 	mov	arg02, local07
02af8     5A 00 00 FF 
02afc     2C E4 05 F1 | 	add	objptr, ##46124
02b00     F2 4A 02 FB | 	rdlong	local23, objptr
02b04     5A 00 00 FF 
02b08     2C E4 85 F1 | 	sub	objptr, ##46124
02b0c     25 15 82 F1 | 	sub	arg02, local23
02b10     19 13 02 F6 | 	mov	arg01, local11
02b14     14 FF B1 FD | 	call	#__system__Right_S
02b18     13 FB 61 FC | 	wrlong	result1, local05
02b1c     5A 00 00 FF 
02b20     24 E4 05 F1 | 	add	objptr, ##46116
02b24     F2 34 02 FB | 	rdlong	local12, objptr
02b28     1A 27 02 F6 | 	mov	local05, local12
02b2c     03 26 66 F0 | 	shl	local05, #3
02b30     25 00 00 FF 
02b34     18 E4 85 F1 | 	sub	objptr, ##18968
02b38     F2 26 02 F1 | 	add	local05, objptr
02b3c     1A 4B 02 F6 | 	mov	local23, local12
02b40     03 4A 66 F0 | 	shl	local23, #3
02b44     F2 42 02 F6 | 	mov	local19, objptr
02b48     F2 4A 02 F1 | 	add	local23, objptr
02b4c     25 13 02 FB | 	rdlong	arg01, local23
02b50     25 00 00 FF 
02b54     20 E4 05 F1 | 	add	objptr, ##18976
02b58     F2 36 02 FB | 	rdlong	local13, objptr
02b5c     5A 00 00 FF 
02b60     2C E4 85 F1 | 	sub	objptr, ##46124
02b64     1B 31 02 F6 | 	mov	local10, local13
02b68     18 15 02 F6 | 	mov	arg02, local10
02b6c     34 FE B1 FD | 	call	#__system__Left_S
02b70     13 FB 61 FC | 	wrlong	result1, local05
02b74                 | LR__0153
02b74                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then
02b74     5A 00 00 FF 
02b78     24 E4 05 F1 | 	add	objptr, ##46116
02b7c     F2 28 02 FB | 	rdlong	local06, objptr
02b80     03 28 66 F0 | 	shl	local06, #3
02b84     25 00 00 FF 
02b88     18 E4 85 F1 | 	sub	objptr, ##18968
02b8c     F2 28 02 F1 | 	add	local06, objptr
02b90     14 13 02 FB | 	rdlong	arg01, local06
02b94     01 14 06 F6 | 	mov	arg02, #1
02b98     35 00 00 FF 
02b9c     0C E4 85 F1 | 	sub	objptr, ##27148
02ba0     00 FE B1 FD | 	call	#__system__Left_S
02ba4     FD 12 02 F6 | 	mov	arg01, result1
02ba8     81 01 00 FF 
02bac     1D 14 06 F6 | 	mov	arg02, ##@LR__5044
02bb0     9C DD B1 FD | 	call	#__system___string_cmp
02bb4     00 FA 0D F2 | 	cmp	result1, #0 wz
02bb8     9C 01 90 5D |  if_ne	jmp	#LR__0160
02bbc     5A 00 00 FF 
02bc0     24 E4 05 F1 | 	add	objptr, ##46116
02bc4     F2 32 02 FB | 	rdlong	local11, objptr
02bc8     03 32 66 F0 | 	shl	local11, #3
02bcc     25 00 00 FF 
02bd0     18 E4 85 F1 | 	sub	objptr, ##18968
02bd4     F2 30 02 F6 | 	mov	local10, objptr
02bd8     F2 32 02 F1 | 	add	local11, objptr
02bdc     19 13 02 FB | 	rdlong	arg01, local11
02be0     35 00 00 FF 
02be4     0C E4 85 F1 | 	sub	objptr, ##27148
02be8     09 2B 02 F6 | 	mov	local07, arg01
02bec     97 06 48 FB | 	callpa	#(@LR__0155-@LR__0154)>>2,fcache_load_ptr_
02bf0                 | LR__0154
02bf0     15 FB C9 FA | 	rdbyte	result1, local07 wz
02bf4     01 2A 06 51 |  if_ne	add	local07, #1
02bf8     F4 FF 9F 5D |  if_ne	jmp	#LR__0154
02bfc                 | LR__0155
02bfc     09 2B 82 F1 | 	sub	local07, arg01
02c00     02 2A 56 F2 | 	cmps	local07, #2 wc
02c04     50 01 90 CD |  if_b	jmp	#LR__0160
02c08     01 3A 06 F1 | 	add	local15, #1
02c0c                 | '   k+=1
02c0c                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02c0c     1D 21 02 F6 | 	mov	local02, local15
02c10     5A 00 00 FF 
02c14     24 E4 05 F1 | 	add	objptr, ##46116
02c18     F2 5E 02 FB | 	rdlong	local33, objptr
02c1c     01 5E 06 F1 | 	add	local33, #1
02c20     25 00 00 FF 
02c24     18 E4 85 F1 | 	sub	objptr, ##18968
02c28     97 2E 48 FB | 	callpa	#(@LR__0157-@LR__0156)>>2,fcache_load_ptr_
02c2c                 | LR__0156
02c2c     10 29 02 F6 | 	mov	local06, local02
02c30     01 28 86 F1 | 	sub	local06, #1
02c34     03 28 66 F0 | 	shl	local06, #3
02c38     F2 28 02 F1 | 	add	local06, objptr
02c3c     14 23 02 FB | 	rdlong	local03, local06
02c40     10 33 02 F6 | 	mov	local11, local02
02c44     01 32 86 F1 | 	sub	local11, #1
02c48     03 32 66 F0 | 	shl	local11, #3
02c4c     F2 32 02 F1 | 	add	local11, objptr
02c50     04 32 06 F1 | 	add	local11, #4
02c54     19 2F 02 FB | 	rdlong	local09, local11
02c58     10 33 02 F6 | 	mov	local11, local02
02c5c     03 32 66 F0 | 	shl	local11, #3
02c60     F2 32 02 F1 | 	add	local11, objptr
02c64     19 23 62 FC | 	wrlong	local03, local11
02c68     10 4B 02 F6 | 	mov	local23, local02
02c6c     03 4A 66 F0 | 	shl	local23, #3
02c70     F2 4A 02 F1 | 	add	local23, objptr
02c74     04 4A 06 F1 | 	add	local23, #4
02c78     25 2F 62 FC | 	wrlong	local09, local23
02c7c     01 20 86 F1 | 	sub	local02, #1
02c80     2F 21 52 F2 | 	cmps	local02, local33 wc
02c84     A4 FF 9F 3D |  if_ae	jmp	#LR__0156
02c88                 | LR__0157
02c88     25 00 00 FF 
02c8c     18 E4 05 F1 | 	add	objptr, ##18968
02c90     F2 4A 02 FB | 	rdlong	local23, objptr
02c94     25 27 02 F6 | 	mov	local05, local23
02c98     01 26 06 F1 | 	add	local05, #1
02c9c     03 26 66 F0 | 	shl	local05, #3
02ca0     25 00 00 FF 
02ca4     18 E4 85 F1 | 	sub	objptr, ##18968
02ca8     F2 26 02 F1 | 	add	local05, objptr
02cac     03 4A 66 F0 | 	shl	local23, #3
02cb0     F2 4A 02 F1 | 	add	local23, objptr
02cb4     25 33 02 FB | 	rdlong	local11, local23
02cb8     25 00 00 FF 
02cbc     18 E4 05 F1 | 	add	objptr, ##18968
02cc0     F2 42 02 FB | 	rdlong	local19, objptr
02cc4     21 4B 02 F6 | 	mov	local23, local19
02cc8     25 45 02 F6 | 	mov	local20, local23
02ccc     22 47 02 F6 | 	mov	local21, local20
02cd0     03 46 66 F0 | 	shl	local21, #3
02cd4     25 00 00 FF 
02cd8     18 E4 85 F1 | 	sub	objptr, ##18968
02cdc     F2 4C 02 F6 | 	mov	local24, objptr
02ce0     F2 46 02 F1 | 	add	local21, objptr
02ce4     23 13 02 FB | 	rdlong	arg01, local21
02ce8     35 00 00 FF 
02cec     0C E4 85 F1 | 	sub	objptr, ##27148
02cf0     09 2B 02 F6 | 	mov	local07, arg01
02cf4     97 06 48 FB | 	callpa	#(@LR__0159-@LR__0158)>>2,fcache_load_ptr_
02cf8                 | LR__0158
02cf8     15 FB C9 FA | 	rdbyte	result1, local07 wz
02cfc     01 2A 06 51 |  if_ne	add	local07, #1
02d00     F4 FF 9F 5D |  if_ne	jmp	#LR__0158
02d04                 | LR__0159
02d04     09 2B 82 F1 | 	sub	local07, arg01
02d08     15 35 02 F6 | 	mov	local12, local07
02d0c     1A 37 02 F6 | 	mov	local13, local12
02d10     01 36 86 F1 | 	sub	local13, #1
02d14     1B 31 02 F6 | 	mov	local10, local13
02d18     19 13 02 F6 | 	mov	arg01, local11
02d1c     18 15 02 F6 | 	mov	arg02, local10
02d20     08 FD B1 FD | 	call	#__system__Right_S
02d24     13 FB 61 FC | 	wrlong	result1, local05
02d28     5A 00 00 FF 
02d2c     24 E4 05 F1 | 	add	objptr, ##46116
02d30     F2 26 02 FB | 	rdlong	local05, objptr
02d34     03 26 66 F0 | 	shl	local05, #3
02d38     25 00 00 FF 
02d3c     18 E4 85 F1 | 	sub	objptr, ##18968
02d40     F2 26 02 F1 | 	add	local05, objptr
02d44     81 01 00 FF 
02d48     1F 32 06 F6 | 	mov	local11, ##@LR__5045
02d4c     13 33 62 FC | 	wrlong	local11, local05
02d50     35 00 00 FF 
02d54     0C E4 85 F1 | 	sub	objptr, ##27148
02d58                 | LR__0160
02d58     5A 00 00 FF 
02d5c     24 E4 05 F1 | 	add	objptr, ##46116
02d60     F2 26 02 FB | 	rdlong	local05, objptr
02d64     03 26 66 F0 | 	shl	local05, #3
02d68     25 00 00 FF 
02d6c     18 E4 85 F1 | 	sub	objptr, ##18968
02d70     F2 26 02 F1 | 	add	local05, objptr
02d74     13 33 02 FB | 	rdlong	local11, local05
02d78     25 00 00 FF 
02d7c     1C E4 05 F1 | 	add	objptr, ##18972
02d80     F2 32 62 FC | 	wrlong	local11, objptr
02d84                 | ' 
02d84                 | ' ' process the case when simple load or save is called without ""
02d84                 | ' 
02d84                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02d84     5A 00 00 FF 
02d88     28 E4 85 F1 | 	sub	objptr, ##46120
02d8c     81 01 00 FF 
02d90     21 14 06 F6 | 	mov	arg02, ##@LR__5046
02d94     19 13 02 F6 | 	mov	arg01, local11
02d98     B4 DB B1 FD | 	call	#__system___string_cmp
02d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
02da0     50 00 90 AD |  if_e	jmp	#LR__0161
02da4     5A 00 00 FF 
02da8     28 E4 05 F1 | 	add	objptr, ##46120
02dac     F2 12 02 FB | 	rdlong	arg01, objptr
02db0     5A 00 00 FF 
02db4     28 E4 85 F1 | 	sub	objptr, ##46120
02db8     81 01 00 FF 
02dbc     27 14 06 F6 | 	mov	arg02, ##@LR__5047
02dc0     8C DB B1 FD | 	call	#__system___string_cmp
02dc4     00 FA 0D F2 | 	cmp	result1, #0 wz
02dc8     28 00 90 AD |  if_e	jmp	#LR__0161
02dcc     5A 00 00 FF 
02dd0     28 E4 05 F1 | 	add	objptr, ##46120
02dd4     F2 12 02 FB | 	rdlong	arg01, objptr
02dd8     5A 00 00 FF 
02ddc     28 E4 85 F1 | 	sub	objptr, ##46120
02de0     81 01 00 FF 
02de4     2E 14 06 F6 | 	mov	arg02, ##@LR__5048
02de8     64 DB B1 FD | 	call	#__system___string_cmp
02dec     00 FA 0D F2 | 	cmp	result1, #0 wz
02df0     48 01 90 5D |  if_ne	jmp	#LR__0164
02df4                 | LR__0161
02df4                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(addptr+1).token=token_decimal
02df4     5A 00 00 FF 
02df8     24 E4 05 F1 | 	add	objptr, ##46116
02dfc     F2 28 02 FB | 	rdlong	local06, objptr
02e00     01 28 06 F1 | 	add	local06, #1
02e04     03 28 66 F0 | 	shl	local06, #3
02e08     25 00 00 FF 
02e0c     18 E4 85 F1 | 	sub	objptr, ##18968
02e10     F2 28 02 F1 | 	add	local06, objptr
02e14     14 13 02 FB | 	rdlong	arg01, local06
02e18     81 01 00 FF 
02e1c     34 14 06 F6 | 	mov	arg02, ##@LR__5049
02e20     35 00 00 FF 
02e24     0C E4 85 F1 | 	sub	objptr, ##27148
02e28     24 DB B1 FD | 	call	#__system___string_cmp
02e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e30     60 00 90 5D |  if_ne	jmp	#LR__0162
02e34     5A 00 00 FF 
02e38     24 E4 05 F1 | 	add	objptr, ##46116
02e3c     F2 26 02 FB | 	rdlong	local05, objptr
02e40     01 26 06 F1 | 	add	local05, #1
02e44     03 26 66 F0 | 	shl	local05, #3
02e48     25 00 00 FF 
02e4c     18 E4 85 F1 | 	sub	objptr, ##18968
02e50     F2 26 02 F1 | 	add	local05, objptr
02e54     81 01 00 FF 
02e58     37 32 06 F6 | 	mov	local11, ##@LR__5050
02e5c     13 33 62 FC | 	wrlong	local11, local05
02e60     25 00 00 FF 
02e64     18 E4 05 F1 | 	add	objptr, ##18968
02e68     F2 26 02 FB | 	rdlong	local05, objptr
02e6c     01 26 06 F1 | 	add	local05, #1
02e70     03 26 66 F0 | 	shl	local05, #3
02e74     25 00 00 FF 
02e78     18 E4 85 F1 | 	sub	objptr, ##18968
02e7c     F2 26 02 F1 | 	add	local05, objptr
02e80     04 26 06 F1 | 	add	local05, #4
02e84     01 00 80 FF 
02e88     13 01 68 FC | 	wrlong	##512, local05
02e8c     35 00 00 FF 
02e90     0C E4 85 F1 | 	sub	objptr, ##27148
02e94                 | LR__0162
02e94                 | '   if lparts(addptr+1).part$="off" then   lparts(addptr+1).part$="0" :lparts(addptr+1).token=token_decimal
02e94     5A 00 00 FF 
02e98     24 E4 05 F1 | 	add	objptr, ##46116
02e9c     F2 28 02 FB | 	rdlong	local06, objptr
02ea0     01 28 06 F1 | 	add	local06, #1
02ea4     03 28 66 F0 | 	shl	local06, #3
02ea8     25 00 00 FF 
02eac     18 E4 85 F1 | 	sub	objptr, ##18968
02eb0     F2 32 02 F6 | 	mov	local11, objptr
02eb4     F2 28 02 F1 | 	add	local06, objptr
02eb8     14 13 02 FB | 	rdlong	arg01, local06
02ebc     81 01 00 FF 
02ec0     39 14 06 F6 | 	mov	arg02, ##@LR__5051
02ec4     35 00 00 FF 
02ec8     0C E4 85 F1 | 	sub	objptr, ##27148
02ecc     80 DA B1 FD | 	call	#__system___string_cmp
02ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ed4     64 00 90 5D |  if_ne	jmp	#LR__0163
02ed8     5A 00 00 FF 
02edc     24 E4 05 F1 | 	add	objptr, ##46116
02ee0     F2 26 02 FB | 	rdlong	local05, objptr
02ee4     01 26 06 F1 | 	add	local05, #1
02ee8     03 26 66 F0 | 	shl	local05, #3
02eec     25 00 00 FF 
02ef0     18 E4 85 F1 | 	sub	objptr, ##18968
02ef4     F2 26 02 F1 | 	add	local05, objptr
02ef8     81 01 00 FF 
02efc     3D 32 06 F6 | 	mov	local11, ##@LR__5052
02f00     13 33 62 FC | 	wrlong	local11, local05
02f04     25 00 00 FF 
02f08     18 E4 05 F1 | 	add	objptr, ##18968
02f0c     F2 26 02 FB | 	rdlong	local05, objptr
02f10     01 26 06 F1 | 	add	local05, #1
02f14     03 26 66 F0 | 	shl	local05, #3
02f18     25 00 00 FF 
02f1c     18 E4 85 F1 | 	sub	objptr, ##18968
02f20     F2 26 02 F1 | 	add	local05, objptr
02f24     09 32 C6 F9 | 	decod	local11, #9
02f28     04 26 06 F1 | 	add	local05, #4
02f2c     01 00 80 FF 
02f30     13 01 68 FC | 	wrlong	##512, local05
02f34     35 00 00 FF 
02f38     0C E4 85 F1 | 	sub	objptr, ##27148
02f3c                 | LR__0163
02f3c                 | LR__0164
02f3c                 | ' if (lp$="mode" orelse lp$="m.") then 
02f3c     5A 00 00 FF 
02f40     28 E4 05 F1 | 	add	objptr, ##46120
02f44     F2 12 02 FB | 	rdlong	arg01, objptr
02f48     5A 00 00 FF 
02f4c     28 E4 85 F1 | 	sub	objptr, ##46120
02f50     81 01 00 FF 
02f54     3F 14 06 F6 | 	mov	arg02, ##@LR__5053
02f58     F4 D9 B1 FD | 	call	#__system___string_cmp
02f5c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f60     28 00 90 AD |  if_e	jmp	#LR__0165
02f64     5A 00 00 FF 
02f68     28 E4 05 F1 | 	add	objptr, ##46120
02f6c     F2 12 02 FB | 	rdlong	arg01, objptr
02f70     5A 00 00 FF 
02f74     28 E4 85 F1 | 	sub	objptr, ##46120
02f78     81 01 00 FF 
02f7c     44 14 06 F6 | 	mov	arg02, ##@LR__5054
02f80     CC D9 B1 FD | 	call	#__system___string_cmp
02f84     00 FA 0D F2 | 	cmp	result1, #0 wz
02f88     48 02 90 5D |  if_ne	jmp	#LR__0171
02f8c                 | LR__0165
02f8c                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"  
02f8c     5A 00 00 FF 
02f90     24 E4 05 F1 | 	add	objptr, ##46116
02f94     F2 28 02 FB | 	rdlong	local06, objptr
02f98     01 28 06 F1 | 	add	local06, #1
02f9c     03 28 66 F0 | 	shl	local06, #3
02fa0     25 00 00 FF 
02fa4     18 E4 85 F1 | 	sub	objptr, ##18968
02fa8     F2 28 02 F1 | 	add	local06, objptr
02fac     14 13 02 FB | 	rdlong	arg01, local06
02fb0     81 01 00 FF 
02fb4     47 14 06 F6 | 	mov	arg02, ##@LR__5055
02fb8     35 00 00 FF 
02fbc     0C E4 85 F1 | 	sub	objptr, ##27148
02fc0     8C D9 B1 FD | 	call	#__system___string_cmp
02fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
02fc8     34 00 90 5D |  if_ne	jmp	#LR__0166
02fcc     5A 00 00 FF 
02fd0     24 E4 05 F1 | 	add	objptr, ##46116
02fd4     F2 26 02 FB | 	rdlong	local05, objptr
02fd8     01 26 06 F1 | 	add	local05, #1
02fdc     03 26 66 F0 | 	shl	local05, #3
02fe0     25 00 00 FF 
02fe4     18 E4 85 F1 | 	sub	objptr, ##18968
02fe8     F2 26 02 F1 | 	add	local05, objptr
02fec     81 01 00 FF 
02ff0     4D 32 06 F6 | 	mov	local11, ##@LR__5056
02ff4     13 33 62 FC | 	wrlong	local11, local05
02ff8     35 00 00 FF 
02ffc     0C E4 85 F1 | 	sub	objptr, ##27148
03000                 | LR__0166
03000                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
03000     5A 00 00 FF 
03004     24 E4 05 F1 | 	add	objptr, ##46116
03008     F2 28 02 FB | 	rdlong	local06, objptr
0300c     01 28 06 F1 | 	add	local06, #1
03010     03 28 66 F0 | 	shl	local06, #3
03014     25 00 00 FF 
03018     18 E4 85 F1 | 	sub	objptr, ##18968
0301c     F2 28 02 F1 | 	add	local06, objptr
03020     14 13 02 FB | 	rdlong	arg01, local06
03024     81 01 00 FF 
03028     4F 14 06 F6 | 	mov	arg02, ##@LR__5057
0302c     35 00 00 FF 
03030     0C E4 85 F1 | 	sub	objptr, ##27148
03034     18 D9 B1 FD | 	call	#__system___string_cmp
03038     00 FA 0D F2 | 	cmp	result1, #0 wz
0303c     34 00 90 5D |  if_ne	jmp	#LR__0167
03040     5A 00 00 FF 
03044     24 E4 05 F1 | 	add	objptr, ##46116
03048     F2 26 02 FB | 	rdlong	local05, objptr
0304c     01 26 06 F1 | 	add	local05, #1
03050     03 26 66 F0 | 	shl	local05, #3
03054     25 00 00 FF 
03058     18 E4 85 F1 | 	sub	objptr, ##18968
0305c     F2 26 02 F1 | 	add	local05, objptr
03060     81 01 00 FF 
03064     58 32 06 F6 | 	mov	local11, ##@LR__5058
03068     13 33 62 FC | 	wrlong	local11, local05
0306c     35 00 00 FF 
03070     0C E4 85 F1 | 	sub	objptr, ##27148
03074                 | LR__0167
03074                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
03074     5A 00 00 FF 
03078     24 E4 05 F1 | 	add	objptr, ##46116
0307c     F2 28 02 FB | 	rdlong	local06, objptr
03080     01 28 06 F1 | 	add	local06, #1
03084     03 28 66 F0 | 	shl	local06, #3
03088     25 00 00 FF 
0308c     18 E4 85 F1 | 	sub	objptr, ##18968
03090     F2 28 02 F1 | 	add	local06, objptr
03094     14 13 02 FB | 	rdlong	arg01, local06
03098     81 01 00 FF 
0309c     5A 14 06 F6 | 	mov	arg02, ##@LR__5059
030a0     35 00 00 FF 
030a4     0C E4 85 F1 | 	sub	objptr, ##27148
030a8     A4 D8 B1 FD | 	call	#__system___string_cmp
030ac     00 FA 0D F2 | 	cmp	result1, #0 wz
030b0     34 00 90 5D |  if_ne	jmp	#LR__0168
030b4     5A 00 00 FF 
030b8     24 E4 05 F1 | 	add	objptr, ##46116
030bc     F2 26 02 FB | 	rdlong	local05, objptr
030c0     01 26 06 F1 | 	add	local05, #1
030c4     03 26 66 F0 | 	shl	local05, #3
030c8     25 00 00 FF 
030cc     18 E4 85 F1 | 	sub	objptr, ##18968
030d0     F2 26 02 F1 | 	add	local05, objptr
030d4     81 01 00 FF 
030d8     63 32 06 F6 | 	mov	local11, ##@LR__5060
030dc     13 33 62 FC | 	wrlong	local11, local05
030e0     35 00 00 FF 
030e4     0C E4 85 F1 | 	sub	objptr, ##27148
030e8                 | LR__0168
030e8                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
030e8     5A 00 00 FF 
030ec     24 E4 05 F1 | 	add	objptr, ##46116
030f0     F2 28 02 FB | 	rdlong	local06, objptr
030f4     01 28 06 F1 | 	add	local06, #1
030f8     03 28 66 F0 | 	shl	local06, #3
030fc     25 00 00 FF 
03100     18 E4 85 F1 | 	sub	objptr, ##18968
03104     F2 28 02 F1 | 	add	local06, objptr
03108     14 13 02 FB | 	rdlong	arg01, local06
0310c     81 01 00 FF 
03110     65 14 06 F6 | 	mov	arg02, ##@LR__5061
03114     35 00 00 FF 
03118     0C E4 85 F1 | 	sub	objptr, ##27148
0311c     30 D8 B1 FD | 	call	#__system___string_cmp
03120     00 FA 0D F2 | 	cmp	result1, #0 wz
03124     34 00 90 5D |  if_ne	jmp	#LR__0169
03128     5A 00 00 FF 
0312c     24 E4 05 F1 | 	add	objptr, ##46116
03130     F2 26 02 FB | 	rdlong	local05, objptr
03134     01 26 06 F1 | 	add	local05, #1
03138     03 26 66 F0 | 	shl	local05, #3
0313c     25 00 00 FF 
03140     18 E4 85 F1 | 	sub	objptr, ##18968
03144     F2 26 02 F1 | 	add	local05, objptr
03148     81 01 00 FF 
0314c     6E 32 06 F6 | 	mov	local11, ##@LR__5062
03150     13 33 62 FC | 	wrlong	local11, local05
03154     35 00 00 FF 
03158     0C E4 85 F1 | 	sub	objptr, ##27148
0315c                 | LR__0169
0315c                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
0315c     5A 00 00 FF 
03160     24 E4 05 F1 | 	add	objptr, ##46116
03164     F2 28 02 FB | 	rdlong	local06, objptr
03168     01 28 06 F1 | 	add	local06, #1
0316c     03 28 66 F0 | 	shl	local06, #3
03170     25 00 00 FF 
03174     18 E4 85 F1 | 	sub	objptr, ##18968
03178     F2 32 02 F6 | 	mov	local11, objptr
0317c     F2 28 02 F1 | 	add	local06, objptr
03180     14 13 02 FB | 	rdlong	arg01, local06
03184     81 01 00 FF 
03188     70 14 06 F6 | 	mov	arg02, ##@LR__5063
0318c     35 00 00 FF 
03190     0C E4 85 F1 | 	sub	objptr, ##27148
03194     B8 D7 B1 FD | 	call	#__system___string_cmp
03198     00 FA 0D F2 | 	cmp	result1, #0 wz
0319c     34 00 90 5D |  if_ne	jmp	#LR__0170
031a0     5A 00 00 FF 
031a4     24 E4 05 F1 | 	add	objptr, ##46116
031a8     F2 26 02 FB | 	rdlong	local05, objptr
031ac     01 26 06 F1 | 	add	local05, #1
031b0     03 26 66 F0 | 	shl	local05, #3
031b4     25 00 00 FF 
031b8     18 E4 85 F1 | 	sub	objptr, ##18968
031bc     F2 26 02 F1 | 	add	local05, objptr
031c0     81 01 00 FF 
031c4     73 32 06 F6 | 	mov	local11, ##@LR__5064
031c8     13 33 62 FC | 	wrlong	local11, local05
031cc     35 00 00 FF 
031d0     0C E4 85 F1 | 	sub	objptr, ##27148
031d4                 | LR__0170
031d4                 | LR__0171
031d4                 | ' 
031d4                 | ' 
031d4                 | ' 
031d4                 | ' 
031d4                 | ' 
031d4                 | ' 
031d4                 | ' ' 2a find part types 
031d4                 | ' 
031d4                 | ' for i=0 to k-1
031d4     00 20 06 F6 | 	mov	local02, #0
031d8     1D 61 02 F6 | 	mov	local34, local15
031dc                 | LR__0172
031dc     30 21 52 F2 | 	cmps	local02, local34 wc
031e0     58 07 90 3D |  if_ae	jmp	#LR__0183
031e4     10 2F 02 F6 | 	mov	local09, local02
031e8     03 2E 66 F0 | 	shl	local09, #3
031ec     35 00 00 FF 
031f0     0C E4 05 F1 | 	add	objptr, ##27148
031f4     F2 2E 02 F1 | 	add	local09, objptr
031f8     10 31 02 F6 | 	mov	local10, local02
031fc     18 37 02 F6 | 	mov	local13, local10
03200     1B 35 02 F6 | 	mov	local12, local13
03204     03 34 66 F0 | 	shl	local12, #3
03208     F2 34 02 F1 | 	add	local12, objptr
0320c     1A 13 02 FB | 	rdlong	arg01, local12
03210     35 00 00 FF 
03214     0C E4 85 F1 | 	sub	objptr, ##27148
03218     1C 15 B0 FD | 	call	#_isseparator
0321c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03220     04 2E 06 F1 | 	add	local09, #4
03224     17 FB 61 FC | 	wrlong	result1, local09
03228                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
03228     10 2F 02 F6 | 	mov	local09, local02
0322c     03 2E 66 F0 | 	shl	local09, #3
03230     35 00 00 FF 
03234     0C E4 05 F1 | 	add	objptr, ##27148
03238     F2 2E 02 F1 | 	add	local09, objptr
0323c     04 2E 06 F1 | 	add	local09, #4
03240     17 33 02 FB | 	rdlong	local11, local09
03244     01 32 56 F2 | 	cmps	local11, #1 wc
03248     35 00 00 FF 
0324c     0C E4 85 F1 | 	sub	objptr, ##27148
03250     E0 06 90 3D |  if_ae	jmp	#LR__0182
03254     10 2F 02 F6 | 	mov	local09, local02
03258     03 2E 66 F0 | 	shl	local09, #3
0325c     35 00 00 FF 
03260     0C E4 05 F1 | 	add	objptr, ##27148
03264     F2 2E 02 F1 | 	add	local09, objptr
03268     10 31 02 F6 | 	mov	local10, local02
0326c     18 37 02 F6 | 	mov	local13, local10
03270     1B 35 02 F6 | 	mov	local12, local13
03274     03 34 66 F0 | 	shl	local12, #3
03278     F2 34 02 F1 | 	add	local12, objptr
0327c     1A 13 02 FB | 	rdlong	arg01, local12
03280     35 00 00 FF 
03284     0C E4 85 F1 | 	sub	objptr, ##27148
03288     78 0D B0 FD | 	call	#_isoperator
0328c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03290     04 2E 06 F1 | 	add	local09, #4
03294     17 FB 61 FC | 	wrlong	result1, local09
03298                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
03298     10 2F 02 F6 | 	mov	local09, local02
0329c     03 2E 66 F0 | 	shl	local09, #3
032a0     35 00 00 FF 
032a4     0C E4 05 F1 | 	add	objptr, ##27148
032a8     F2 2E 02 F1 | 	add	local09, objptr
032ac     04 2E 06 F1 | 	add	local09, #4
032b0     17 33 02 FB | 	rdlong	local11, local09
032b4     01 32 56 F2 | 	cmps	local11, #1 wc
032b8     35 00 00 FF 
032bc     0C E4 85 F1 | 	sub	objptr, ##27148
032c0     70 06 90 3D |  if_ae	jmp	#LR__0182
032c4     10 2F 02 F6 | 	mov	local09, local02
032c8     03 2E 66 F0 | 	shl	local09, #3
032cc     35 00 00 FF 
032d0     0C E4 05 F1 | 	add	objptr, ##27148
032d4     F2 2E 02 F1 | 	add	local09, objptr
032d8     10 31 02 F6 | 	mov	local10, local02
032dc     18 37 02 F6 | 	mov	local13, local10
032e0     1B 35 02 F6 | 	mov	local12, local13
032e4     03 34 66 F0 | 	shl	local12, #3
032e8     F2 34 02 F1 | 	add	local12, objptr
032ec     1A 13 02 FB | 	rdlong	arg01, local12
032f0     35 00 00 FF 
032f4     0C E4 85 F1 | 	sub	objptr, ##27148
032f8                 | ' 
032f8                 | ' select case s
032f8     81 01 00 FF 
032fc     33 15 06 F6 | 	mov	arg02, ##@LR__5138
03300     4C D6 B1 FD | 	call	#__system___string_cmp
03304     00 FA 0D F2 | 	cmp	result1, #0 wz
03308     1B FA 05 A6 |  if_e	mov	result1, #27
0330c     00 FA 05 56 |  if_ne	mov	result1, #0
03310     FD FA E1 F8 | 	getbyte	result1, result1, #0
03314     04 2E 06 F1 | 	add	local09, #4
03318     17 FB 61 FC | 	wrlong	result1, local09
0331c                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
0331c     10 2F 02 F6 | 	mov	local09, local02
03320     03 2E 66 F0 | 	shl	local09, #3
03324     35 00 00 FF 
03328     0C E4 05 F1 | 	add	objptr, ##27148
0332c     F2 2E 02 F1 | 	add	local09, objptr
03330     04 2E 06 F1 | 	add	local09, #4
03334     17 33 02 FB | 	rdlong	local11, local09
03338     01 32 56 F2 | 	cmps	local11, #1 wc
0333c     35 00 00 FF 
03340     0C E4 85 F1 | 	sub	objptr, ##27148
03344     EC 05 90 3D |  if_ae	jmp	#LR__0182
03348     10 2F 02 F6 | 	mov	local09, local02
0334c     03 2E 66 F0 | 	shl	local09, #3
03350     35 00 00 FF 
03354     0C E4 05 F1 | 	add	objptr, ##27148
03358     F2 2E 02 F1 | 	add	local09, objptr
0335c     10 31 02 F6 | 	mov	local10, local02
03360     18 37 02 F6 | 	mov	local13, local10
03364     1B 35 02 F6 | 	mov	local12, local13
03368     03 34 66 F0 | 	shl	local12, #3
0336c     F2 34 02 F1 | 	add	local12, objptr
03370     1A 13 02 FB | 	rdlong	arg01, local12
03374     35 00 00 FF 
03378     0C E4 85 F1 | 	sub	objptr, ##27148
0337c     B8 15 B0 FD | 	call	#_iscommand
03380     FD FA E1 F8 | 	getbyte	result1, result1, #0
03384     04 2E 06 F1 | 	add	local09, #4
03388     17 FB 61 FC | 	wrlong	result1, local09
0338c                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
0338c     10 2F 02 F6 | 	mov	local09, local02
03390     03 2E 66 F0 | 	shl	local09, #3
03394     35 00 00 FF 
03398     0C E4 05 F1 | 	add	objptr, ##27148
0339c     F2 2E 02 F1 | 	add	local09, objptr
033a0     04 2E 06 F1 | 	add	local09, #4
033a4     17 33 02 FB | 	rdlong	local11, local09
033a8     01 32 56 F2 | 	cmps	local11, #1 wc
033ac     35 00 00 FF 
033b0     0C E4 85 F1 | 	sub	objptr, ##27148
033b4     7C 05 90 3D |  if_ae	jmp	#LR__0182
033b8     10 2F 02 F6 | 	mov	local09, local02
033bc     03 2E 66 F0 | 	shl	local09, #3
033c0     35 00 00 FF 
033c4     0C E4 05 F1 | 	add	objptr, ##27148
033c8     F2 2E 02 F1 | 	add	local09, objptr
033cc     10 31 02 F6 | 	mov	local10, local02
033d0     18 37 02 F6 | 	mov	local13, local10
033d4     1B 35 02 F6 | 	mov	local12, local13
033d8     03 34 66 F0 | 	shl	local12, #3
033dc     F2 4A 02 F6 | 	mov	local23, objptr
033e0     F2 34 02 F1 | 	add	local12, objptr
033e4     1A 13 02 FB | 	rdlong	arg01, local12
033e8     35 00 00 FF 
033ec     0C E4 85 F1 | 	sub	objptr, ##27148
033f0     84 24 B0 FD | 	call	#_isfunction
033f4     FD FA E1 F8 | 	getbyte	result1, result1, #0
033f8     04 2E 06 F1 | 	add	local09, #4
033fc     17 FB 61 FC | 	wrlong	result1, local09
03400                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
03400     10 2F 02 F6 | 	mov	local09, local02
03404     03 2E 66 F0 | 	shl	local09, #3
03408     35 00 00 FF 
0340c     0C E4 05 F1 | 	add	objptr, ##27148
03410     F2 2E 02 F1 | 	add	local09, objptr
03414     04 2E 06 F1 | 	add	local09, #4
03418     17 33 02 FB | 	rdlong	local11, local09
0341c     01 32 56 F2 | 	cmps	local11, #1 wc
03420     35 00 00 FF 
03424     0C E4 85 F1 | 	sub	objptr, ##27148
03428     08 05 90 3D |  if_ae	jmp	#LR__0182
0342c     10 2F 02 F6 | 	mov	local09, local02
03430     03 2E 66 F0 | 	shl	local09, #3
03434     35 00 00 FF 
03438     0C E4 05 F1 | 	add	objptr, ##27148
0343c     F2 2E 02 F1 | 	add	local09, objptr
03440     10 31 02 F6 | 	mov	local10, local02
03444     18 37 02 F6 | 	mov	local13, local10
03448     03 36 66 F0 | 	shl	local13, #3
0344c     F2 34 02 F6 | 	mov	local12, objptr
03450     F2 36 02 F1 | 	add	local13, objptr
03454     1B 13 02 FB | 	rdlong	arg01, local13
03458     35 00 00 FF 
0345c     0C E4 85 F1 | 	sub	objptr, ##27148
03460     68 0F B0 FD | 	call	#_isnotename
03464     04 2E 06 F1 | 	add	local09, #4
03468     17 FB 61 FC | 	wrlong	result1, local09
0346c                 | ' lparts(i).token=isnotename(lparts(i).part$) 
0346c                 | ' if lparts(i).token>0 then 
0346c     10 2F 02 F6 | 	mov	local09, local02
03470     03 2E 66 F0 | 	shl	local09, #3
03474     35 00 00 FF 
03478     0C E4 05 F1 | 	add	objptr, ##27148
0347c     F2 2E 02 F1 | 	add	local09, objptr
03480     04 2E 06 F1 | 	add	local09, #4
03484     17 29 02 FB | 	rdlong	local06, local09
03488     01 28 56 F2 | 	cmps	local06, #1 wc
0348c     35 00 00 FF 
03490     0C E4 85 F1 | 	sub	objptr, ##27148
03494     88 00 90 CD |  if_b	jmp	#LR__0173
03498     10 27 02 F6 | 	mov	local05, local02
0349c     03 26 66 F0 | 	shl	local05, #3
034a0     35 00 00 FF 
034a4     0C E4 05 F1 | 	add	objptr, ##27148
034a8     F2 26 02 F1 | 	add	local05, objptr
034ac     04 26 06 F1 | 	add	local05, #4
034b0     13 33 02 FB | 	rdlong	local11, local05
034b4     19 13 02 F6 | 	mov	arg01, local11
034b8     35 00 00 FF 
034bc     0C E4 85 F1 | 	sub	objptr, ##27148
034c0     38 9D B1 FD | 	call	#_getnoteval
034c4     FD 62 02 F6 | 	mov	local35, result1
034c8     10 2F 02 F6 | 	mov	local09, local02
034cc     03 2E 66 F0 | 	shl	local09, #3
034d0     35 00 00 FF 
034d4     0C E4 05 F1 | 	add	objptr, ##27148
034d8     F2 2E 02 F1 | 	add	local09, objptr
034dc     31 13 02 F6 | 	mov	arg01, local35
034e0     35 00 00 FF 
034e4     0C E4 85 F1 | 	sub	objptr, ##27148
034e8     B0 F6 B1 FD | 	call	#__system__str_S
034ec     17 FB 61 FC | 	wrlong	result1, local09
034f0     10 23 02 F6 | 	mov	local03, local02
034f4     11 2F 02 F6 | 	mov	local09, local03
034f8     03 2E 66 F0 | 	shl	local09, #3
034fc     35 00 00 FF 
03500     0C E4 05 F1 | 	add	objptr, ##27148
03504     F2 2E 02 F1 | 	add	local09, objptr
03508     04 2E 06 F1 | 	add	local09, #4
0350c     01 00 80 FF 
03510     17 05 68 FC | 	wrlong	##514, local09
03514     35 00 00 FF 
03518     0C E4 85 F1 | 	sub	objptr, ##27148
0351c     14 04 90 FD | 	jmp	#LR__0182
03520                 | LR__0173
03520     10 2F 02 F6 | 	mov	local09, local02
03524     03 2E 66 F0 | 	shl	local09, #3
03528     35 00 00 FF 
0352c     0C E4 05 F1 | 	add	objptr, ##27148
03530     F2 2E 02 F1 | 	add	local09, objptr
03534     10 31 02 F6 | 	mov	local10, local02
03538     18 37 02 F6 | 	mov	local13, local10
0353c     03 36 66 F0 | 	shl	local13, #3
03540     F2 34 02 F6 | 	mov	local12, objptr
03544     F2 36 02 F1 | 	add	local13, objptr
03548     1B 13 02 FB | 	rdlong	arg01, local13
0354c     35 00 00 FF 
03550     0C E4 85 F1 | 	sub	objptr, ##27148
03554     8C 0D B0 FD | 	call	#_ischannel
03558     04 2E 06 F1 | 	add	local09, #4
0355c     17 FB 61 FC | 	wrlong	result1, local09
03560                 | ' lparts(i).token=ischannel(lparts(i).part$)  : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
03560     10 2F 02 F6 | 	mov	local09, local02
03564     03 2E 66 F0 | 	shl	local09, #3
03568     35 00 00 FF 
0356c     0C E4 05 F1 | 	add	objptr, ##27148
03570     F2 2E 02 F1 | 	add	local09, objptr
03574     04 2E 06 F1 | 	add	local09, #4
03578     17 33 02 FB | 	rdlong	local11, local09
0357c     01 32 56 F2 | 	cmps	local11, #1 wc
03580     35 00 00 FF 
03584     0C E4 85 F1 | 	sub	objptr, ##27148
03588     70 00 90 CD |  if_b	jmp	#LR__0174
0358c     10 2F 02 F6 | 	mov	local09, local02
03590     03 2E 66 F0 | 	shl	local09, #3
03594     35 00 00 FF 
03598     0C E4 05 F1 | 	add	objptr, ##27148
0359c     F2 2E 02 F1 | 	add	local09, objptr
035a0     10 31 02 F6 | 	mov	local10, local02
035a4     18 37 02 F6 | 	mov	local13, local10
035a8     03 36 66 F0 | 	shl	local13, #3
035ac     F2 34 02 F6 | 	mov	local12, objptr
035b0     F2 36 02 F1 | 	add	local13, objptr
035b4     1B 13 02 FB | 	rdlong	arg01, local13
035b8     01 32 06 F6 | 	mov	local11, #1
035bc     01 14 06 F6 | 	mov	arg02, #1
035c0     35 00 00 FF 
035c4     0C E4 85 F1 | 	sub	objptr, ##27148
035c8     60 F4 B1 FD | 	call	#__system__Right_S
035cc     17 FB 61 FC | 	wrlong	result1, local09
035d0     10 23 02 F6 | 	mov	local03, local02
035d4     11 2F 02 F6 | 	mov	local09, local03
035d8     03 2E 66 F0 | 	shl	local09, #3
035dc     35 00 00 FF 
035e0     0C E4 05 F1 | 	add	objptr, ##27148
035e4     F2 2E 02 F1 | 	add	local09, objptr
035e8     04 2E 06 F1 | 	add	local09, #4
035ec     17 59 68 FC | 	wrlong	#44, local09
035f0     35 00 00 FF 
035f4     0C E4 85 F1 | 	sub	objptr, ##27148
035f8     38 03 90 FD | 	jmp	#LR__0182
035fc                 | LR__0174
035fc     10 27 02 F6 | 	mov	local05, local02
03600     03 26 66 F0 | 	shl	local05, #3
03604     35 00 00 FF 
03608     0C E4 05 F1 | 	add	objptr, ##27148
0360c     F2 26 02 F1 | 	add	local05, objptr
03610     13 13 02 FB | 	rdlong	arg01, local05
03614     35 00 00 FF 
03618     0C E4 85 F1 | 	sub	objptr, ##27148
0361c     6C 2A B0 FD | 	call	#_isnum
03620     FD 24 02 F6 | 	mov	local04, result1
03624     5A 00 00 FF 
03628     30 E4 05 F1 | 	add	objptr, ##46128
0362c     F2 24 62 FC | 	wrlong	local04, objptr
03630     10 27 02 F6 | 	mov	local05, local02
03634     03 26 66 F0 | 	shl	local05, #3
03638     25 00 00 FF 
0363c     24 E4 85 F1 | 	sub	objptr, ##18980
03640     F2 26 02 F1 | 	add	local05, objptr
03644     13 13 02 FB | 	rdlong	arg01, local05
03648     35 00 00 FF 
0364c     0C E4 85 F1 | 	sub	objptr, ##27148
03650     10 2D B0 FD | 	call	#_isint
03654     FD 24 02 F6 | 	mov	local04, result1
03658     5A 00 00 FF 
0365c     34 E4 05 F1 | 	add	objptr, ##46132
03660     F2 24 62 FC | 	wrlong	local04, objptr
03664     10 27 02 F6 | 	mov	local05, local02
03668     03 26 66 F0 | 	shl	local05, #3
0366c     25 00 00 FF 
03670     28 E4 85 F1 | 	sub	objptr, ##18984
03674     F2 28 02 F6 | 	mov	local06, objptr
03678     F2 26 02 F1 | 	add	local05, objptr
0367c     13 13 02 FB | 	rdlong	arg01, local05
03680     35 00 00 FF 
03684     0C E4 85 F1 | 	sub	objptr, ##27148
03688     30 2E B0 FD | 	call	#_isdec
0368c     5A 00 00 FF 
03690     38 E4 05 F1 | 	add	objptr, ##46136
03694     F2 FA 61 FC | 	wrlong	result1, objptr
03698                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
03698     08 E4 85 F1 | 	sub	objptr, #8
0369c     F2 24 0A FB | 	rdlong	local04, objptr wz
036a0     5A 00 00 FF 
036a4     30 E4 85 F1 | 	sub	objptr, ##46128
036a8     60 00 90 AD |  if_e	jmp	#LR__0175
036ac     5A 00 00 FF 
036b0     34 E4 05 F1 | 	add	objptr, ##46132
036b4     F2 2E 0A FB | 	rdlong	local09, objptr wz
036b8     5A 00 00 FF 
036bc     34 E4 85 F1 | 	sub	objptr, ##46132
036c0     48 00 90 AD |  if_e	jmp	#LR__0175
036c4     5A 00 00 FF 
036c8     38 E4 05 F1 | 	add	objptr, ##46136
036cc     F2 32 0A FB | 	rdlong	local11, objptr wz
036d0     5A 00 00 FF 
036d4     38 E4 85 F1 | 	sub	objptr, ##46136
036d8     30 00 90 AD |  if_e	jmp	#LR__0175
036dc     10 23 02 F6 | 	mov	local03, local02
036e0     11 2F 02 F6 | 	mov	local09, local03
036e4     03 2E 66 F0 | 	shl	local09, #3
036e8     35 00 00 FF 
036ec     0C E4 05 F1 | 	add	objptr, ##27148
036f0     F2 2E 02 F1 | 	add	local09, objptr
036f4     04 2E 06 F1 | 	add	local09, #4
036f8     01 00 80 FF 
036fc     17 01 68 FC | 	wrlong	##512, local09
03700     35 00 00 FF 
03704     0C E4 85 F1 | 	sub	objptr, ##27148
03708     28 02 90 FD | 	jmp	#LR__0182
0370c                 | LR__0175
0370c                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
0370c     5A 00 00 FF 
03710     30 E4 05 F1 | 	add	objptr, ##46128
03714     F2 24 0A FB | 	rdlong	local04, objptr wz
03718     5A 00 00 FF 
0371c     30 E4 85 F1 | 	sub	objptr, ##46128
03720     64 00 90 AD |  if_e	jmp	#LR__0176
03724     5A 00 00 FF 
03728     34 E4 05 F1 | 	add	objptr, ##46132
0372c     F2 2E 0A FB | 	rdlong	local09, objptr wz
03730     5A 00 00 FF 
03734     34 E4 85 F1 | 	sub	objptr, ##46132
03738     5A 00 00 5F 
0373c     38 E4 05 51 |  if_ne	add	objptr, ##46136
03740     F2 32 02 5B |  if_ne	rdlong	local11, objptr
03744     5A 00 00 5F 
03748     38 E4 85 51 |  if_ne	sub	objptr, ##46136
0374c     19 29 22 56 |  if_ne	not	local06, local11
03750     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
03754     30 00 90 AD |  if_e	jmp	#LR__0176
03758     10 23 02 F6 | 	mov	local03, local02
0375c     11 2F 02 F6 | 	mov	local09, local03
03760     03 2E 66 F0 | 	shl	local09, #3
03764     35 00 00 FF 
03768     0C E4 05 F1 | 	add	objptr, ##27148
0376c     F2 2E 02 F1 | 	add	local09, objptr
03770     04 2E 06 F1 | 	add	local09, #4
03774     01 00 80 FF 
03778     17 03 68 FC | 	wrlong	##513, local09
0377c     35 00 00 FF 
03780     0C E4 85 F1 | 	sub	objptr, ##27148
03784     AC 01 90 FD | 	jmp	#LR__0182
03788                 | LR__0176
03788                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
03788     5A 00 00 FF 
0378c     30 E4 05 F1 | 	add	objptr, ##46128
03790     F2 24 0A FB | 	rdlong	local04, objptr wz
03794     5A 00 00 FF 
03798     30 E4 85 F1 | 	sub	objptr, ##46128
0379c     5A 00 00 5F 
037a0     34 E4 05 51 |  if_ne	add	objptr, ##46132
037a4     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
037a8     5A 00 00 5F 
037ac     34 E4 85 51 |  if_ne	sub	objptr, ##46132
037b0     17 2F 22 56 |  if_ne	not	local09, local09
037b4     00 2E 0E 52 |  if_ne	cmp	local09, #0 wz
037b8     5A 00 00 5F 
037bc     38 E4 05 51 |  if_ne	add	objptr, ##46136
037c0     F2 32 02 5B |  if_ne	rdlong	local11, objptr
037c4     5A 00 00 5F 
037c8     38 E4 85 51 |  if_ne	sub	objptr, ##46136
037cc     19 29 22 56 |  if_ne	not	local06, local11
037d0     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
037d4     30 00 90 AD |  if_e	jmp	#LR__0177
037d8     10 23 02 F6 | 	mov	local03, local02
037dc     11 2F 02 F6 | 	mov	local09, local03
037e0     03 2E 66 F0 | 	shl	local09, #3
037e4     35 00 00 FF 
037e8     0C E4 05 F1 | 	add	objptr, ##27148
037ec     F2 2E 02 F1 | 	add	local09, objptr
037f0     04 2E 06 F1 | 	add	local09, #4
037f4     01 00 80 FF 
037f8     17 05 68 FC | 	wrlong	##514, local09
037fc     35 00 00 FF 
03800     0C E4 85 F1 | 	sub	objptr, ##27148
03804     2C 01 90 FD | 	jmp	#LR__0182
03808                 | LR__0177
03808                 | ' 
03808                 | ' if isstring(lparts(i).part$) then 
03808     10 27 02 F6 | 	mov	local05, local02
0380c     03 26 66 F0 | 	shl	local05, #3
03810     35 00 00 FF 
03814     0C E4 05 F1 | 	add	objptr, ##27148
03818     F2 26 02 F1 | 	add	local05, objptr
0381c     13 13 02 FB | 	rdlong	arg01, local05
03820     35 00 00 FF 
03824     0C E4 85 F1 | 	sub	objptr, ##27148
03828     50 2D B0 FD | 	call	#_isstring
0382c     00 FA 0D F2 | 	cmp	result1, #0 wz
03830     A4 00 90 AD |  if_e	jmp	#LR__0180
03834     10 2F 02 F6 | 	mov	local09, local02
03838     03 2E 66 F0 | 	shl	local09, #3
0383c     35 00 00 FF 
03840     0C E4 05 F1 | 	add	objptr, ##27148
03844     F2 2E 02 F1 | 	add	local09, objptr
03848     04 2E 06 F1 | 	add	local09, #4
0384c     01 00 80 FF 
03850     17 07 68 FC | 	wrlong	##515, local09
03854     10 23 02 F6 | 	mov	local03, local02
03858     11 2F 02 F6 | 	mov	local09, local03
0385c     03 2E 66 F0 | 	shl	local09, #3
03860     F2 2E 02 F1 | 	add	local09, objptr
03864     10 37 02 F6 | 	mov	local13, local02
03868     03 36 66 F0 | 	shl	local13, #3
0386c     F2 36 02 F1 | 	add	local13, objptr
03870     1B 29 02 FB | 	rdlong	local06, local13
03874     02 32 06 F6 | 	mov	local11, #2
03878     10 43 02 F6 | 	mov	local19, local02
0387c     21 45 02 F6 | 	mov	local20, local19
03880     03 44 66 F0 | 	shl	local20, #3
03884     F2 46 02 F6 | 	mov	local21, objptr
03888     F2 44 02 F1 | 	add	local20, objptr
0388c     22 13 02 FB | 	rdlong	arg01, local20
03890     35 00 00 FF 
03894     0C E4 85 F1 | 	sub	objptr, ##27148
03898     09 2B 02 F6 | 	mov	local07, arg01
0389c     97 06 48 FB | 	callpa	#(@LR__0179-@LR__0178)>>2,fcache_load_ptr_
038a0                 | LR__0178
038a0     15 FB C9 FA | 	rdbyte	result1, local07 wz
038a4     01 2A 06 51 |  if_ne	add	local07, #1
038a8     F4 FF 9F 5D |  if_ne	jmp	#LR__0178
038ac                 | LR__0179
038ac     09 2B 82 F1 | 	sub	local07, arg01
038b0     15 35 02 F6 | 	mov	local12, local07
038b4     1A 37 02 F6 | 	mov	local13, local12
038b8     02 36 86 F1 | 	sub	local13, #2
038bc     1B 31 02 F6 | 	mov	local10, local13
038c0     14 13 02 F6 | 	mov	arg01, local06
038c4     19 15 02 F6 | 	mov	arg02, local11
038c8     18 17 02 F6 | 	mov	arg03, local10
038cc     EC F1 B1 FD | 	call	#__system__Mid_S
038d0     17 FB 61 FC | 	wrlong	result1, local09
038d4     5C 00 90 FD | 	jmp	#LR__0182
038d8                 | LR__0180
038d8                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
038d8     10 23 02 F6 | 	mov	local03, local02
038dc     11 27 02 F6 | 	mov	local05, local03
038e0     03 26 66 F0 | 	shl	local05, #3
038e4     35 00 00 FF 
038e8     0C E4 05 F1 | 	add	objptr, ##27148
038ec     F2 26 02 F1 | 	add	local05, objptr
038f0     13 13 02 FB | 	rdlong	arg01, local05
038f4     35 00 00 FF 
038f8     0C E4 85 F1 | 	sub	objptr, ##27148
038fc     18 25 B0 FD | 	call	#_isname
03900     00 FA 4D F2 | 	cmps	result1, #0 wz
03904     2C 00 90 AD |  if_e	jmp	#LR__0181
03908     10 23 02 F6 | 	mov	local03, local02
0390c     11 2F 02 F6 | 	mov	local09, local03
03910     03 2E 66 F0 | 	shl	local09, #3
03914     35 00 00 FF 
03918     0C E4 05 F1 | 	add	objptr, ##27148
0391c     F2 2E 02 F1 | 	add	local09, objptr
03920     04 2E 06 F1 | 	add	local09, #4
03924     01 00 80 FF 
03928     17 09 68 FC | 	wrlong	##516, local09
0392c     35 00 00 FF 
03930     0C E4 85 F1 | 	sub	objptr, ##27148
03934                 | LR__0181
03934                 | LR__0182
03934     01 20 06 F1 | 	add	local02, #1
03938     A0 F8 9F FD | 	jmp	#LR__0172
0393c                 | LR__0183
0393c     1D 2F 02 F6 | 	mov	local09, local15
03940     03 2E 66 F0 | 	shl	local09, #3
03944     35 00 00 FF 
03948     0C E4 05 F1 | 	add	objptr, ##27148
0394c     F2 2E 02 F1 | 	add	local09, objptr
03950     04 2E 06 F1 | 	add	local09, #4
03954     17 FD 6B FC | 	wrlong	#510, local09
03958     1D 2F 02 F6 | 	mov	local09, local15
0395c     03 2E 66 F0 | 	shl	local09, #3
03960     F2 26 02 F6 | 	mov	local05, objptr
03964     F2 2E 02 F1 | 	add	local09, objptr
03968     81 01 00 FF 
0396c     75 28 06 F6 | 	mov	local06, ##@LR__5065
03970     17 29 62 FC | 	wrlong	local06, local09
03974     10 00 00 FF 
03978     54 E4 05 F1 | 	add	objptr, ##8276
0397c     F2 3A 62 FC | 	wrlong	local15, objptr
03980                 | ' 
03980                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
03980                 | ' 
03980                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
03980                 | '  
03980                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
03980     14 00 00 FF 
03984     C8 E5 05 F1 | 	add	objptr, ##10696
03988     F2 12 02 FB | 	rdlong	arg01, objptr
0398c     5A 00 00 FF 
03990     28 E4 85 F1 | 	sub	objptr, ##46120
03994     81 01 00 FF 
03998     76 2E 06 F6 | 	mov	local09, ##@LR__5066
0399c     17 15 02 F6 | 	mov	arg02, local09
039a0     AC CF B1 FD | 	call	#__system___string_cmp
039a4     00 FA 0D F2 | 	cmp	result1, #0 wz
039a8     7C 01 90 AD |  if_e	jmp	#LR__0184
039ac     5A 00 00 FF 
039b0     28 E4 05 F1 | 	add	objptr, ##46120
039b4     F2 12 02 FB | 	rdlong	arg01, objptr
039b8     5A 00 00 FF 
039bc     28 E4 85 F1 | 	sub	objptr, ##46120
039c0     81 01 00 FF 
039c4     7B 26 06 F6 | 	mov	local05, ##@LR__5067
039c8     13 2F 02 F6 | 	mov	local09, local05
039cc     17 15 02 F6 | 	mov	arg02, local09
039d0     7C CF B1 FD | 	call	#__system___string_cmp
039d4     00 FA 0D F2 | 	cmp	result1, #0 wz
039d8     4C 01 90 AD |  if_e	jmp	#LR__0184
039dc     5A 00 00 FF 
039e0     28 E4 05 F1 | 	add	objptr, ##46120
039e4     F2 12 02 FB | 	rdlong	arg01, objptr
039e8     5A 00 00 FF 
039ec     28 E4 85 F1 | 	sub	objptr, ##46120
039f0     81 01 00 FF 
039f4     80 28 06 F6 | 	mov	local06, ##@LR__5068
039f8     14 27 02 F6 | 	mov	local05, local06
039fc     13 15 02 F6 | 	mov	arg02, local05
03a00     4C CF B1 FD | 	call	#__system___string_cmp
03a04     FD 2E 0A F6 | 	mov	local09, result1 wz
03a08     1C 01 90 AD |  if_e	jmp	#LR__0184
03a0c     5A 00 00 FF 
03a10     28 E4 05 F1 | 	add	objptr, ##46120
03a14     F2 12 02 FB | 	rdlong	arg01, objptr
03a18     5A 00 00 FF 
03a1c     28 E4 85 F1 | 	sub	objptr, ##46120
03a20     81 01 00 FF 
03a24     85 32 06 F6 | 	mov	local11, ##@LR__5069
03a28     19 29 02 F6 | 	mov	local06, local11
03a2c     14 15 02 F6 | 	mov	arg02, local06
03a30     1C CF B1 FD | 	call	#__system___string_cmp
03a34     FD 26 0A F6 | 	mov	local05, result1 wz
03a38     EC 00 90 AD |  if_e	jmp	#LR__0184
03a3c     5A 00 00 FF 
03a40     28 E4 05 F1 | 	add	objptr, ##46120
03a44     F2 12 02 FB | 	rdlong	arg01, objptr
03a48     5A 00 00 FF 
03a4c     28 E4 85 F1 | 	sub	objptr, ##46120
03a50     81 01 00 FF 
03a54     89 30 06 F6 | 	mov	local10, ##@LR__5070
03a58     18 33 02 F6 | 	mov	local11, local10
03a5c     19 15 02 F6 | 	mov	arg02, local11
03a60     EC CE B1 FD | 	call	#__system___string_cmp
03a64     FD 28 0A F6 | 	mov	local06, result1 wz
03a68     BC 00 90 AD |  if_e	jmp	#LR__0184
03a6c     5A 00 00 FF 
03a70     28 E4 05 F1 | 	add	objptr, ##46120
03a74     F2 12 02 FB | 	rdlong	arg01, objptr
03a78     5A 00 00 FF 
03a7c     28 E4 85 F1 | 	sub	objptr, ##46120
03a80     81 01 00 FF 
03a84     8D 36 06 F6 | 	mov	local13, ##@LR__5071
03a88     1B 31 02 F6 | 	mov	local10, local13
03a8c     18 15 02 F6 | 	mov	arg02, local10
03a90     BC CE B1 FD | 	call	#__system___string_cmp
03a94     FD 32 0A F6 | 	mov	local11, result1 wz
03a98     8C 00 90 AD |  if_e	jmp	#LR__0184
03a9c     5A 00 00 FF 
03aa0     28 E4 05 F1 | 	add	objptr, ##46120
03aa4     F2 12 02 FB | 	rdlong	arg01, objptr
03aa8     5A 00 00 FF 
03aac     28 E4 85 F1 | 	sub	objptr, ##46120
03ab0     81 01 00 FF 
03ab4     90 34 06 F6 | 	mov	local12, ##@LR__5072
03ab8     1A 37 02 F6 | 	mov	local13, local12
03abc     1B 15 02 F6 | 	mov	arg02, local13
03ac0     8C CE B1 FD | 	call	#__system___string_cmp
03ac4     FD 30 0A F6 | 	mov	local10, result1 wz
03ac8     5C 00 90 AD |  if_e	jmp	#LR__0184
03acc     5A 00 00 FF 
03ad0     28 E4 05 F1 | 	add	objptr, ##46120
03ad4     F2 12 02 FB | 	rdlong	arg01, objptr
03ad8     5A 00 00 FF 
03adc     28 E4 85 F1 | 	sub	objptr, ##46120
03ae0     81 01 00 FF 
03ae4     94 34 06 F6 | 	mov	local12, ##@LR__5073
03ae8     1A 15 02 F6 | 	mov	arg02, local12
03aec     60 CE B1 FD | 	call	#__system___string_cmp
03af0     FD 36 0A F6 | 	mov	local13, result1 wz
03af4     30 00 90 AD |  if_e	jmp	#LR__0184
03af8     5A 00 00 FF 
03afc     28 E4 05 F1 | 	add	objptr, ##46120
03b00     F2 12 02 FB | 	rdlong	arg01, objptr
03b04     5A 00 00 FF 
03b08     28 E4 85 F1 | 	sub	objptr, ##46120
03b0c     81 01 00 FF 
03b10     9A 42 06 F6 | 	mov	local19, ##@LR__5074
03b14     21 4B 02 F6 | 	mov	local23, local19
03b18     25 15 02 F6 | 	mov	arg02, local23
03b1c     30 CE B1 FD | 	call	#__system___string_cmp
03b20     FD 34 0A F6 | 	mov	local12, result1 wz
03b24     9C 00 90 5D |  if_ne	jmp	#LR__0185
03b28                 | LR__0184
03b28     5A 00 00 FF 
03b2c     24 E4 05 F1 | 	add	objptr, ##46116
03b30     F2 42 02 FB | 	rdlong	local19, objptr
03b34     21 4B 02 F6 | 	mov	local23, local19
03b38     01 4A 06 F1 | 	add	local23, #1
03b3c     25 45 02 F6 | 	mov	local20, local23
03b40     22 47 02 F6 | 	mov	local21, local20
03b44     03 46 66 F0 | 	shl	local21, #3
03b48     25 00 00 FF 
03b4c     18 E4 85 F1 | 	sub	objptr, ##18968
03b50     F2 4C 02 F6 | 	mov	local24, objptr
03b54     F2 46 02 F1 | 	add	local21, objptr
03b58     04 46 06 F1 | 	add	local21, #4
03b5c     23 51 02 FB | 	rdlong	local26, local21
03b60     04 46 86 F1 | 	sub	local21, #4
03b64     28 4F 02 F6 | 	mov	local25, local26
03b68     01 00 00 FF 
03b6c     04 4E 0E F2 | 	cmp	local25, ##516 wz
03b70     35 00 00 FF 
03b74     0C E4 85 F1 | 	sub	objptr, ##27148
03b78     48 00 90 5D |  if_ne	jmp	#LR__0185
03b7c     5A 00 00 FF 
03b80     24 E4 05 F1 | 	add	objptr, ##46116
03b84     F2 2E 02 FB | 	rdlong	local09, objptr
03b88     01 2E 06 F1 | 	add	local09, #1
03b8c     17 27 02 F6 | 	mov	local05, local09
03b90     03 26 66 F0 | 	shl	local05, #3
03b94     25 00 00 FF 
03b98     18 E4 85 F1 | 	sub	objptr, ##18968
03b9c     F2 28 02 F6 | 	mov	local06, objptr
03ba0     F2 26 02 F1 | 	add	local05, objptr
03ba4     01 00 00 FF 
03ba8     03 32 06 F6 | 	mov	local11, ##515
03bac     04 26 06 F1 | 	add	local05, #4
03bb0     01 00 80 FF 
03bb4     13 07 68 FC | 	wrlong	##515, local05
03bb8     04 26 86 F1 | 	sub	local05, #4
03bbc     35 00 00 FF 
03bc0     0C E4 85 F1 | 	sub	objptr, ##27148
03bc4                 | LR__0185
03bc4                 | ' 
03bc4                 | ' ' abbreviated command has to be at the position addptr
03bc4                 | ' 
03bc4                 | ' 
03bc4                 | ' 
03bc4                 | ' '2b determine a type of the line
03bc4                 | ' 
03bc4                 | ' 'for i=0 to k: print lparts(i).part$: next i : print cont
03bc4                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03bc4     35 00 00 FF 
03bc8     0C E4 05 F1 | 	add	objptr, ##27148
03bcc     F2 12 02 FB | 	rdlong	arg01, objptr
03bd0     35 00 00 FF 
03bd4     0C E4 85 F1 | 	sub	objptr, ##27148
03bd8     E0 28 B0 FD | 	call	#_isdec
03bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03be0     30 00 90 AD |  if_e	jmp	#LR__0186
03be4     35 00 00 FF 
03be8     0C E4 05 F1 | 	add	objptr, ##27148
03bec     F2 12 02 FB | 	rdlong	arg01, objptr
03bf0     35 00 00 FF 
03bf4     0C E4 85 F1 | 	sub	objptr, ##27148
03bf8     00 14 06 F6 | 	mov	arg02, #0
03bfc     54 FF B1 FD | 	call	#__system____builtin_atoi
03c00     59 00 00 FF 
03c04     C8 E5 05 F1 | 	add	objptr, ##46024
03c08     F2 FA 61 FC | 	wrlong	result1, objptr
03c0c     59 00 00 FF 
03c10     C8 E5 85 F1 | 	sub	objptr, ##46024
03c14                 | LR__0186
03c14                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
03c14     59 00 00 FF 
03c18     C8 E5 05 F1 | 	add	objptr, ##46024
03c1c     F2 24 02 FB | 	rdlong	local04, objptr
03c20     59 00 00 FF 
03c24     C8 E5 85 F1 | 	sub	objptr, ##46024
03c28     01 24 16 F2 | 	cmp	local04, #1 wc
03c2c     40 00 90 CD |  if_b	jmp	#LR__0187
03c30     01 3A 0E F2 | 	cmp	local15, #1 wz
03c34     37 00 00 AF 
03c38     24 E4 05 A1 |  if_e	add	objptr, ##28196
03c3c     F2 26 02 AB |  if_e	rdlong	local05, objptr
03c40     37 00 00 AF 
03c44     24 E4 85 A1 |  if_e	sub	objptr, ##28196
03c48     13 2F 02 A6 |  if_e	mov	local09, local05
03c4c     03 2E 0E A2 |  if_e	cmp	local09, #3 wz
03c50     1C 00 90 5D |  if_ne	jmp	#LR__0187
03c54     59 00 00 FF 
03c58     C8 E5 05 F1 | 	add	objptr, ##46024
03c5c     F2 12 02 FB | 	rdlong	arg01, objptr
03c60     59 00 00 FF 
03c64     C8 E5 85 F1 | 	sub	objptr, ##46024
03c68     74 29 B0 FD | 	call	#_deleteline
03c6c     48 03 90 FD | 	jmp	#LR__0195
03c70                 | LR__0187
03c70                 | ' 
03c70                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
03c70     37 00 00 FF 
03c74     24 E4 05 F1 | 	add	objptr, ##28196
03c78     F2 24 0A FB | 	rdlong	local04, objptr wz
03c7c     37 00 00 FF 
03c80     24 E4 85 F1 | 	sub	objptr, ##28196
03c84     37 00 00 5F 
03c88     24 E4 05 51 |  if_ne	add	objptr, ##28196
03c8c     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
03c90     37 00 00 5F 
03c94     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03c98     03 2E 0E 52 |  if_ne	cmp	local09, #3 wz
03c9c     AC 00 90 5D |  if_ne	jmp	#LR__0189
03ca0     35 00 00 FF 
03ca4     20 E4 05 F1 | 	add	objptr, ##27168
03ca8     F2 32 02 FB | 	rdlong	local11, objptr
03cac     35 00 00 FF 
03cb0     20 E4 85 F1 | 	sub	objptr, ##27168
03cb4     1B 32 0E F2 | 	cmp	local11, #27 wz
03cb8     90 00 90 AD |  if_e	jmp	#LR__0189
03cbc     59 00 00 FF 
03cc0     C8 E5 05 F1 | 	add	objptr, ##46024
03cc4     F2 12 02 FB | 	rdlong	arg01, objptr
03cc8     22 00 00 FF 
03ccc     A4 E5 85 F1 | 	sub	objptr, ##17828
03cd0     F2 16 02 FB | 	rdlong	arg03, objptr
03cd4     37 00 00 FF 
03cd8     24 E4 85 F1 | 	sub	objptr, ##28196
03cdc     00 14 06 F6 | 	mov	arg02, #0
03ce0     40 3E B0 FD | 	call	#_compile
03ce4     FD 1E 0A F6 | 	mov	local01, result1 wz
03ce8                 | '   err= compile(linenum,0,cont) : 'print "called compile with cont=";cont, "line$=";line$,"linenum=";linenum
03ce8                 | '   if err<>0 then printerror(err): goto 104
03ce8     0C 00 90 AD |  if_e	jmp	#LR__0188
03cec     0F 13 02 F6 | 	mov	arg01, local01
03cf0     D0 98 B1 FD | 	call	#_printerror
03cf4     C0 02 90 FD | 	jmp	#LR__0195
03cf8                 | LR__0188
03cf8                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
03cf8     5A 00 00 FF 
03cfc     00 E4 05 F1 | 	add	objptr, ##46080
03d00     F2 12 02 FB | 	rdlong	arg01, objptr
03d04     5A 00 00 FF 
03d08     00 E4 85 F1 | 	sub	objptr, ##46080
03d0c     81 01 00 FF 
03d10     9D 14 06 F6 | 	mov	arg02, ##@LR__5075
03d14     38 CC B1 FD | 	call	#__system___string_cmp
03d18     00 FA 0D F2 | 	cmp	result1, #0 wz
03d1c     98 02 90 AD |  if_e	jmp	#LR__0195
03d20     5A 00 00 FF 
03d24     00 E4 05 F1 | 	add	objptr, ##46080
03d28     F2 24 02 FB | 	rdlong	local04, objptr
03d2c     22 00 00 FF 
03d30     E4 E5 85 F1 | 	sub	objptr, ##17892
03d34     F2 24 62 FC | 	wrlong	local04, objptr
03d38     08 E4 05 F1 | 	add	objptr, #8
03d3c     F2 08 68 FC | 	wrlong	#4, objptr
03d40     37 00 00 FF 
03d44     24 E4 85 F1 | 	sub	objptr, ##28196
03d48     5C D9 9F FD | 	jmp	#LR__0070
03d4c                 | LR__0189
03d4c                 | '       							
03d4c                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
03d4c     37 00 00 FF 
03d50     24 E4 05 F1 | 	add	objptr, ##28196
03d54     F2 24 02 FB | 	rdlong	local04, objptr
03d58     37 00 00 FF 
03d5c     24 E4 85 F1 | 	sub	objptr, ##28196
03d60     01 24 0E F2 | 	cmp	local04, #1 wz
03d64     37 00 00 5F 
03d68     24 E4 05 51 |  if_ne	add	objptr, ##28196
03d6c     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
03d70     37 00 00 5F 
03d74     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03d78     02 2E 0E 52 |  if_ne	cmp	local09, #2 wz
03d7c     AC 00 90 5D |  if_ne	jmp	#LR__0191
03d80     35 00 00 FF 
03d84     18 E4 05 F1 | 	add	objptr, ##27160
03d88     F2 32 02 FB | 	rdlong	local11, objptr
03d8c     35 00 00 FF 
03d90     18 E4 85 F1 | 	sub	objptr, ##27160
03d94     1B 32 0E F2 | 	cmp	local11, #27 wz
03d98     90 00 90 AD |  if_e	jmp	#LR__0191
03d9c     59 00 00 FF 
03da0     C8 E5 05 F1 | 	add	objptr, ##46024
03da4     F2 12 02 FB | 	rdlong	arg01, objptr
03da8     22 00 00 FF 
03dac     A4 E5 85 F1 | 	sub	objptr, ##17828
03db0     F2 16 02 FB | 	rdlong	arg03, objptr
03db4     37 00 00 FF 
03db8     24 E4 85 F1 | 	sub	objptr, ##28196
03dbc     00 14 06 F6 | 	mov	arg02, #0
03dc0     60 3D B0 FD | 	call	#_compile
03dc4     FD 1E 0A F6 | 	mov	local01, result1 wz
03dc8                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
03dc8                 | '   if err<>0 then printerror(err): goto 104
03dc8     0C 00 90 AD |  if_e	jmp	#LR__0190
03dcc     0F 13 02 F6 | 	mov	arg01, local01
03dd0     F0 97 B1 FD | 	call	#_printerror
03dd4     E0 01 90 FD | 	jmp	#LR__0195
03dd8                 | LR__0190
03dd8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
03dd8     5A 00 00 FF 
03ddc     00 E4 05 F1 | 	add	objptr, ##46080
03de0     F2 12 02 FB | 	rdlong	arg01, objptr
03de4     5A 00 00 FF 
03de8     00 E4 85 F1 | 	sub	objptr, ##46080
03dec     81 01 00 FF 
03df0     9E 14 06 F6 | 	mov	arg02, ##@LR__5076
03df4     58 CB B1 FD | 	call	#__system___string_cmp
03df8     00 FA 0D F2 | 	cmp	result1, #0 wz
03dfc     B8 01 90 AD |  if_e	jmp	#LR__0195
03e00     5A 00 00 FF 
03e04     00 E4 05 F1 | 	add	objptr, ##46080
03e08     F2 24 02 FB | 	rdlong	local04, objptr
03e0c     22 00 00 FF 
03e10     E4 E5 85 F1 | 	sub	objptr, ##17892
03e14     F2 24 62 FC | 	wrlong	local04, objptr
03e18     08 E4 05 F1 | 	add	objptr, #8
03e1c     F2 08 68 FC | 	wrlong	#4, objptr
03e20     37 00 00 FF 
03e24     24 E4 85 F1 | 	sub	objptr, ##28196
03e28     7C D8 9F FD | 	jmp	#LR__0070
03e2c                 | LR__0191
03e2c                 | ' 							 
03e2c                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
03e2c     37 00 00 FF 
03e30     24 E4 05 F1 | 	add	objptr, ##28196
03e34     F2 24 0A FB | 	rdlong	local04, objptr wz
03e38     37 00 00 FF 
03e3c     24 E4 85 F1 | 	sub	objptr, ##28196
03e40     37 00 00 5F 
03e44     24 E4 05 51 |  if_ne	add	objptr, ##28196
03e48     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
03e4c     37 00 00 5F 
03e50     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03e54     03 2E 0E 52 |  if_ne	cmp	local09, #3 wz
03e58     35 00 00 AF 
03e5c     20 E4 05 A1 |  if_e	add	objptr, ##27168
03e60     F2 32 02 AB |  if_e	rdlong	local11, objptr
03e64     35 00 00 AF 
03e68     20 E4 85 A1 |  if_e	sub	objptr, ##27168
03e6c     1B 32 0E A2 |  if_e	cmp	local11, #27 wz
03e70     7C 00 90 5D |  if_ne	jmp	#LR__0192
03e74     59 00 00 FF 
03e78     C8 E5 05 F1 | 	add	objptr, ##46024
03e7c     F2 12 02 FB | 	rdlong	arg01, objptr
03e80     22 00 00 FF 
03e84     A4 E5 85 F1 | 	sub	objptr, ##17828
03e88     F2 16 02 FB | 	rdlong	arg03, objptr
03e8c     37 00 00 FF 
03e90     24 E4 85 F1 | 	sub	objptr, ##28196
03e94     00 14 06 F6 | 	mov	arg02, #0
03e98     4C 3D B0 FD | 	call	#_compile_assign
03e9c                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
03e9c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
03e9c     5A 00 00 FF 
03ea0     00 E4 05 F1 | 	add	objptr, ##46080
03ea4     F2 12 02 FB | 	rdlong	arg01, objptr
03ea8     5A 00 00 FF 
03eac     00 E4 85 F1 | 	sub	objptr, ##46080
03eb0     81 01 00 FF 
03eb4     9F 14 06 F6 | 	mov	arg02, ##@LR__5077
03eb8     94 CA B1 FD | 	call	#__system___string_cmp
03ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ec0     F4 00 90 AD |  if_e	jmp	#LR__0195
03ec4     5A 00 00 FF 
03ec8     00 E4 05 F1 | 	add	objptr, ##46080
03ecc     F2 24 02 FB | 	rdlong	local04, objptr
03ed0     22 00 00 FF 
03ed4     E4 E5 85 F1 | 	sub	objptr, ##17892
03ed8     F2 24 62 FC | 	wrlong	local04, objptr
03edc     08 E4 05 F1 | 	add	objptr, #8
03ee0     F2 08 68 FC | 	wrlong	#4, objptr
03ee4     37 00 00 FF 
03ee8     24 E4 85 F1 | 	sub	objptr, ##28196
03eec     B8 D7 9F FD | 	jmp	#LR__0070
03ef0                 | LR__0192
03ef0                 | '     							 
03ef0                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
03ef0     37 00 00 FF 
03ef4     24 E4 05 F1 | 	add	objptr, ##28196
03ef8     F2 24 02 FB | 	rdlong	local04, objptr
03efc     37 00 00 FF 
03f00     24 E4 85 F1 | 	sub	objptr, ##28196
03f04     01 24 0E F2 | 	cmp	local04, #1 wz
03f08     37 00 00 5F 
03f0c     24 E4 05 51 |  if_ne	add	objptr, ##28196
03f10     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
03f14     37 00 00 5F 
03f18     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03f1c     02 2E 0E 52 |  if_ne	cmp	local09, #2 wz
03f20     35 00 00 AF 
03f24     18 E4 05 A1 |  if_e	add	objptr, ##27160
03f28     F2 32 02 AB |  if_e	rdlong	local11, objptr
03f2c     35 00 00 AF 
03f30     18 E4 85 A1 |  if_e	sub	objptr, ##27160
03f34     1B 32 0E A2 |  if_e	cmp	local11, #27 wz
03f38     7C 00 90 5D |  if_ne	jmp	#LR__0194
03f3c     59 00 00 FF 
03f40     C8 E5 05 F1 | 	add	objptr, ##46024
03f44     F2 12 02 FB | 	rdlong	arg01, objptr
03f48     22 00 00 FF 
03f4c     A4 E5 85 F1 | 	sub	objptr, ##17828
03f50     F2 16 02 FB | 	rdlong	arg03, objptr
03f54     37 00 00 FF 
03f58     24 E4 85 F1 | 	sub	objptr, ##28196
03f5c     00 14 06 F6 | 	mov	arg02, #0
03f60     84 3C B0 FD | 	call	#_compile_assign
03f64                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
03f64                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
03f64     5A 00 00 FF 
03f68     00 E4 05 F1 | 	add	objptr, ##46080
03f6c     F2 12 02 FB | 	rdlong	arg01, objptr
03f70     5A 00 00 FF 
03f74     00 E4 85 F1 | 	sub	objptr, ##46080
03f78     81 01 00 FF 
03f7c     A0 14 06 F6 | 	mov	arg02, ##@LR__5078
03f80     CC C9 B1 FD | 	call	#__system___string_cmp
03f84     00 FA 4D F2 | 	cmps	result1, #0 wz
03f88     2C 00 90 AD |  if_e	jmp	#LR__0193
03f8c     5A 00 00 FF 
03f90     00 E4 05 F1 | 	add	objptr, ##46080
03f94     F2 24 02 FB | 	rdlong	local04, objptr
03f98     22 00 00 FF 
03f9c     E4 E5 85 F1 | 	sub	objptr, ##17892
03fa0     F2 24 62 FC | 	wrlong	local04, objptr
03fa4     08 E4 05 F1 | 	add	objptr, #8
03fa8     F2 08 68 FC | 	wrlong	#4, objptr
03fac     37 00 00 FF 
03fb0     24 E4 85 F1 | 	sub	objptr, ##28196
03fb4     F0 D6 9F FD | 	jmp	#LR__0070
03fb8                 | LR__0193
03fb8                 | LR__0194
03fb8                 | LR__0195
03fb8                 | ' 
03fb8                 | ' 
03fb8                 | ' 104 if linenum=0 then 
03fb8     59 00 00 FF 
03fbc     C8 E5 05 F1 | 	add	objptr, ##46024
03fc0     F2 24 0A FB | 	rdlong	local04, objptr wz
03fc4     59 00 00 FF 
03fc8     C8 E5 85 F1 | 	sub	objptr, ##46024
03fcc     28 00 90 5D |  if_ne	jmp	#LR__0197
03fd0     02 12 06 F6 | 	mov	arg01, #2
03fd4     BC 7A B0 FD | 	call	#_execute_line
03fd8                 | LR__0196
03fd8     81 01 00 FF 
03fdc     A1 12 06 F6 | 	mov	arg01, ##@LR__5079
03fe0                 | ' 
03fe0                 | ' write(text)
03fe0     5C B6 B1 FD | 	call	#_hg010b_spin2_write
03fe4                 | ' crlf
03fe4     24 B9 B1 FD | 	call	#_hg010b_spin2_crlf
03fe8     81 01 00 FF 
03fec     A2 12 06 F6 | 	mov	arg01, ##@LR__5080
03ff0                 | ' 
03ff0                 | ' write(text)
03ff0     4C B6 B1 FD | 	call	#_hg010b_spin2_write
03ff4                 | ' crlf
03ff4     14 B9 B1 FD | 	call	#_hg010b_spin2_crlf
03ff8                 | LR__0197
03ff8     A7 F0 03 F6 | 	mov	ptra, fp
03ffc     B2 00 A0 FD | 	call	#popregs_
04000                 | _interpret_ret
04000     2D 00 64 FD | 	ret
04004                 | 
04004                 | ' 
04004                 | ' 
04004                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
04004                 | ' 
04004                 | ' function isoperator(s as string) as ubyte
04004                 | _isoperator
04004     01 4A 05 F6 | 	mov	COUNT_, #1
04008     A8 00 A0 FD | 	call	#pushregs_
0400c                 | ' 
0400c                 | ' select case s
0400c     09 1F 02 F6 | 	mov	local01, arg01
04010     81 01 00 FF 
04014     A8 14 06 F6 | 	mov	arg02, ##@LR__5081
04018     0F 13 02 F6 | 	mov	arg01, local01
0401c     30 C9 B1 FD | 	call	#__system___string_cmp
04020     00 FA 0D F2 | 	cmp	result1, #0 wz
04024     FC 01 90 AD |  if_e	jmp	#LR__0200
04028     81 01 00 FF 
0402c     AA 14 06 F6 | 	mov	arg02, ##@LR__5082
04030     0F 13 02 F6 | 	mov	arg01, local01
04034     18 C9 B1 FD | 	call	#__system___string_cmp
04038     00 FA 0D F2 | 	cmp	result1, #0 wz
0403c     EC 01 90 AD |  if_e	jmp	#LR__0201
04040     81 01 00 FF 
04044     AC 14 06 F6 | 	mov	arg02, ##@LR__5083
04048     0F 13 02 F6 | 	mov	arg01, local01
0404c     00 C9 B1 FD | 	call	#__system___string_cmp
04050     00 FA 0D F2 | 	cmp	result1, #0 wz
04054     DC 01 90 AD |  if_e	jmp	#LR__0202
04058     81 01 00 FF 
0405c     AF 14 06 F6 | 	mov	arg02, ##@LR__5084
04060     0F 13 02 F6 | 	mov	arg01, local01
04064     E8 C8 B1 FD | 	call	#__system___string_cmp
04068     00 FA 0D F2 | 	cmp	result1, #0 wz
0406c     CC 01 90 AD |  if_e	jmp	#LR__0203
04070     81 01 00 FF 
04074     B3 14 06 F6 | 	mov	arg02, ##@LR__5085
04078     0F 13 02 F6 | 	mov	arg01, local01
0407c     D0 C8 B1 FD | 	call	#__system___string_cmp
04080     00 FA 0D F2 | 	cmp	result1, #0 wz
04084     BC 01 90 AD |  if_e	jmp	#LR__0204
04088     81 01 00 FF 
0408c     B5 14 06 F6 | 	mov	arg02, ##@LR__5086
04090     0F 13 02 F6 | 	mov	arg01, local01
04094     B8 C8 B1 FD | 	call	#__system___string_cmp
04098     00 FA 0D F2 | 	cmp	result1, #0 wz
0409c     AC 01 90 AD |  if_e	jmp	#LR__0205
040a0     81 01 00 FF 
040a4     B7 14 06 F6 | 	mov	arg02, ##@LR__5087
040a8     0F 13 02 F6 | 	mov	arg01, local01
040ac     A0 C8 B1 FD | 	call	#__system___string_cmp
040b0     00 FA 0D F2 | 	cmp	result1, #0 wz
040b4     9C 01 90 AD |  if_e	jmp	#LR__0206
040b8     81 01 00 FF 
040bc     BB 14 06 F6 | 	mov	arg02, ##@LR__5088
040c0     0F 13 02 F6 | 	mov	arg01, local01
040c4     88 C8 B1 FD | 	call	#__system___string_cmp
040c8     00 FA 0D F2 | 	cmp	result1, #0 wz
040cc     8C 01 90 AD |  if_e	jmp	#LR__0207
040d0     81 01 00 FF 
040d4     BF 14 06 F6 | 	mov	arg02, ##@LR__5089
040d8     0F 13 02 F6 | 	mov	arg01, local01
040dc     70 C8 B1 FD | 	call	#__system___string_cmp
040e0     00 FA 0D F2 | 	cmp	result1, #0 wz
040e4     7C 01 90 AD |  if_e	jmp	#LR__0208
040e8     81 01 00 FF 
040ec     C3 14 06 F6 | 	mov	arg02, ##@LR__5090
040f0     0F 13 02 F6 | 	mov	arg01, local01
040f4     58 C8 B1 FD | 	call	#__system___string_cmp
040f8     00 FA 0D F2 | 	cmp	result1, #0 wz
040fc     6C 01 90 AD |  if_e	jmp	#LR__0209
04100     81 01 00 FF 
04104     C7 14 06 F6 | 	mov	arg02, ##@LR__5091
04108     0F 13 02 F6 | 	mov	arg01, local01
0410c     40 C8 B1 FD | 	call	#__system___string_cmp
04110     00 FA 0D F2 | 	cmp	result1, #0 wz
04114     5C 01 90 AD |  if_e	jmp	#LR__0210
04118     81 01 00 FF 
0411c     CB 14 06 F6 | 	mov	arg02, ##@LR__5092
04120     0F 13 02 F6 | 	mov	arg01, local01
04124     28 C8 B1 FD | 	call	#__system___string_cmp
04128     00 FA 0D F2 | 	cmp	result1, #0 wz
0412c     4C 01 90 AD |  if_e	jmp	#LR__0211
04130     81 01 00 FF 
04134     CD 14 06 F6 | 	mov	arg02, ##@LR__5093
04138     0F 13 02 F6 | 	mov	arg01, local01
0413c     10 C8 B1 FD | 	call	#__system___string_cmp
04140     00 FA 0D F2 | 	cmp	result1, #0 wz
04144     3C 01 90 AD |  if_e	jmp	#LR__0212
04148     81 01 00 FF 
0414c     D1 14 06 F6 | 	mov	arg02, ##@LR__5094
04150     0F 13 02 F6 | 	mov	arg01, local01
04154     F8 C7 B1 FD | 	call	#__system___string_cmp
04158     00 FA 0D F2 | 	cmp	result1, #0 wz
0415c     2C 01 90 AD |  if_e	jmp	#LR__0213
04160     81 01 00 FF 
04164     D3 14 06 F6 | 	mov	arg02, ##@LR__5095
04168     0F 13 02 F6 | 	mov	arg01, local01
0416c     E0 C7 B1 FD | 	call	#__system___string_cmp
04170     00 FA 0D F2 | 	cmp	result1, #0 wz
04174     1C 01 90 AD |  if_e	jmp	#LR__0214
04178     81 01 00 FF 
0417c     D5 14 06 F6 | 	mov	arg02, ##@LR__5096
04180     0F 13 02 F6 | 	mov	arg01, local01
04184     C8 C7 B1 FD | 	call	#__system___string_cmp
04188     00 FA 0D F2 | 	cmp	result1, #0 wz
0418c     0C 01 90 AD |  if_e	jmp	#LR__0215
04190     81 01 00 FF 
04194     D8 14 06 F6 | 	mov	arg02, ##@LR__5097
04198     0F 13 02 F6 | 	mov	arg01, local01
0419c     B0 C7 B1 FD | 	call	#__system___string_cmp
041a0     00 FA 0D F2 | 	cmp	result1, #0 wz
041a4     FC 00 90 AD |  if_e	jmp	#LR__0216
041a8     81 01 00 FF 
041ac     DB 14 06 F6 | 	mov	arg02, ##@LR__5098
041b0     0F 13 02 F6 | 	mov	arg01, local01
041b4     98 C7 B1 FD | 	call	#__system___string_cmp
041b8     00 FA 0D F2 | 	cmp	result1, #0 wz
041bc     EC 00 90 AD |  if_e	jmp	#LR__0217
041c0     81 01 00 FF 
041c4     DD 14 06 F6 | 	mov	arg02, ##@LR__5099
041c8     0F 13 02 F6 | 	mov	arg01, local01
041cc     80 C7 B1 FD | 	call	#__system___string_cmp
041d0     00 FA 0D F2 | 	cmp	result1, #0 wz
041d4     DC 00 90 AD |  if_e	jmp	#LR__0218
041d8     81 01 00 FF 
041dc     DF 14 06 F6 | 	mov	arg02, ##@LR__5100
041e0     0F 13 02 F6 | 	mov	arg01, local01
041e4     68 C7 B1 FD | 	call	#__system___string_cmp
041e8     00 FA 0D F2 | 	cmp	result1, #0 wz
041ec     CC 00 90 AD |  if_e	jmp	#LR__0219
041f0     81 01 00 FF 
041f4     E2 14 06 F6 | 	mov	arg02, ##@LR__5101
041f8     0F 13 02 F6 | 	mov	arg01, local01
041fc     50 C7 B1 FD | 	call	#__system___string_cmp
04200     00 FA 0D F2 | 	cmp	result1, #0 wz
04204     BC 00 90 AD |  if_e	jmp	#LR__0220
04208     81 01 00 FF 
0420c     E5 14 06 F6 | 	mov	arg02, ##@LR__5102
04210     0F 13 02 F6 | 	mov	arg01, local01
04214     38 C7 B1 FD | 	call	#__system___string_cmp
04218     00 FA 0D F2 | 	cmp	result1, #0 wz
0421c     AC 00 90 AD |  if_e	jmp	#LR__0221
04220     B0 00 90 FD | 	jmp	#LR__0222
04224                 | LR__0200
04224     01 FA 05 F6 | 	mov	result1, #1
04228     AC 00 90 FD | 	jmp	#LR__0223
0422c                 | LR__0201
0422c     02 FA 05 F6 | 	mov	result1, #2
04230     A4 00 90 FD | 	jmp	#LR__0223
04234                 | LR__0202
04234     03 FA 05 F6 | 	mov	result1, #3
04238     9C 00 90 FD | 	jmp	#LR__0223
0423c                 | LR__0203
0423c     04 FA 05 F6 | 	mov	result1, #4
04240     94 00 90 FD | 	jmp	#LR__0223
04244                 | LR__0204
04244     05 FA 05 F6 | 	mov	result1, #5
04248     8C 00 90 FD | 	jmp	#LR__0223
0424c                 | LR__0205
0424c     06 FA 05 F6 | 	mov	result1, #6
04250     84 00 90 FD | 	jmp	#LR__0223
04254                 | LR__0206
04254     07 FA 05 F6 | 	mov	result1, #7
04258     7C 00 90 FD | 	jmp	#LR__0223
0425c                 | LR__0207
0425c     08 FA 05 F6 | 	mov	result1, #8
04260     74 00 90 FD | 	jmp	#LR__0223
04264                 | LR__0208
04264     09 FA 05 F6 | 	mov	result1, #9
04268     6C 00 90 FD | 	jmp	#LR__0223
0426c                 | LR__0209
0426c     0A FA 05 F6 | 	mov	result1, #10
04270     64 00 90 FD | 	jmp	#LR__0223
04274                 | LR__0210
04274     0B FA 05 F6 | 	mov	result1, #11
04278     5C 00 90 FD | 	jmp	#LR__0223
0427c                 | LR__0211
0427c     0C FA 05 F6 | 	mov	result1, #12
04280     54 00 90 FD | 	jmp	#LR__0223
04284                 | LR__0212
04284     0D FA 05 F6 | 	mov	result1, #13
04288     4C 00 90 FD | 	jmp	#LR__0223
0428c                 | LR__0213
0428c     0E FA 05 F6 | 	mov	result1, #14
04290     44 00 90 FD | 	jmp	#LR__0223
04294                 | LR__0214
04294     1B FA 05 F6 | 	mov	result1, #27
04298     3C 00 90 FD | 	jmp	#LR__0223
0429c                 | LR__0215
0429c     27 FA 05 F6 | 	mov	result1, #39
042a0     34 00 90 FD | 	jmp	#LR__0223
042a4                 | LR__0216
042a4     26 FA 05 F6 | 	mov	result1, #38
042a8     2C 00 90 FD | 	jmp	#LR__0223
042ac                 | LR__0217
042ac     10 FA 05 F6 | 	mov	result1, #16
042b0     24 00 90 FD | 	jmp	#LR__0223
042b4                 | LR__0218
042b4     0F FA 05 F6 | 	mov	result1, #15
042b8     1C 00 90 FD | 	jmp	#LR__0223
042bc                 | LR__0219
042bc     2A FA 05 F6 | 	mov	result1, #42
042c0     14 00 90 FD | 	jmp	#LR__0223
042c4                 | LR__0220
042c4     28 FA 05 F6 | 	mov	result1, #40
042c8     0C 00 90 FD | 	jmp	#LR__0223
042cc                 | LR__0221
042cc     29 FA 05 F6 | 	mov	result1, #41
042d0     04 00 90 FD | 	jmp	#LR__0223
042d4                 | LR__0222
042d4     00 FA 05 F6 | 	mov	result1, #0
042d8                 | LR__0223
042d8     A7 F0 03 F6 | 	mov	ptra, fp
042dc     B2 00 A0 FD | 	call	#popregs_
042e0                 | _isoperator_ret
042e0     2D 00 64 FD | 	ret
042e4                 | 
042e4                 | ' 
042e4                 | ' 
042e4                 | ' function ischannel(s as string) as ulong
042e4                 | _ischannel
042e4     02 4A 05 F6 | 	mov	COUNT_, #2
042e8     A8 00 A0 FD | 	call	#pushregs_
042ec                 | ' if left$(s,1)<>"#" then return 0
042ec     09 1F 02 F6 | 	mov	local01, arg01
042f0     01 14 06 F6 | 	mov	arg02, #1
042f4     AC E6 B1 FD | 	call	#__system__Left_S
042f8     FD 12 02 F6 | 	mov	arg01, result1
042fc     81 01 00 FF 
04300     E8 14 06 F6 | 	mov	arg02, ##@LR__5103
04304     48 C6 B1 FD | 	call	#__system___string_cmp
04308     00 FA 0D F2 | 	cmp	result1, #0 wz
0430c     00 FA 05 56 |  if_ne	mov	result1, #0
04310     AC 00 90 5D |  if_ne	jmp	#LR__0234
04314                 | ' if len(s)<>2 then return 0
04314     0F 13 02 F6 | 	mov	arg01, local01
04318     09 21 02 F6 | 	mov	local02, arg01
0431c     97 06 48 FB | 	callpa	#(@LR__0231-@LR__0230)>>2,fcache_load_ptr_
04320                 | LR__0230
04320     10 FB C9 FA | 	rdbyte	result1, local02 wz
04324     01 20 06 51 |  if_ne	add	local02, #1
04328     F4 FF 9F 5D |  if_ne	jmp	#LR__0230
0432c                 | LR__0231
0432c     09 21 82 F1 | 	sub	local02, arg01
04330     10 FB 01 F6 | 	mov	result1, local02
04334     02 FA 0D F2 | 	cmp	result1, #2 wz
04338     00 FA 05 56 |  if_ne	mov	result1, #0
0433c     80 00 90 5D |  if_ne	jmp	#LR__0234
04340                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
04340     0F 13 02 F6 | 	mov	arg01, local01
04344     01 14 06 F6 | 	mov	arg02, #1
04348     E0 E6 B1 FD | 	call	#__system__Right_S
0434c     FD 12 02 F6 | 	mov	arg01, result1
04350     81 01 00 FF 
04354     EA 14 06 F6 | 	mov	arg02, ##@LR__5104
04358     F4 C5 B1 FD | 	call	#__system___string_cmp
0435c     00 FA 55 F2 | 	cmps	result1, #0 wc
04360     24 00 90 CD |  if_b	jmp	#LR__0232
04364     0F 13 02 F6 | 	mov	arg01, local01
04368     01 14 06 F6 | 	mov	arg02, #1
0436c     BC E6 B1 FD | 	call	#__system__Right_S
04370     FD 12 02 F6 | 	mov	arg01, result1
04374     81 01 00 FF 
04378     EC 14 06 F6 | 	mov	arg02, ##@LR__5105
0437c     D0 C5 B1 FD | 	call	#__system___string_cmp
04380     01 FA 55 F2 | 	cmps	result1, #1 wc
04384     08 00 90 CD |  if_b	jmp	#LR__0233
04388                 | LR__0232
04388     00 FA 05 F6 | 	mov	result1, #0
0438c     30 00 90 FD | 	jmp	#LR__0234
04390                 | LR__0233
04390                 | ' return token_channel+val(right$(s,1))
04390     0F 13 02 F6 | 	mov	arg01, local01
04394     01 14 06 F6 | 	mov	arg02, #1
04398     90 E6 B1 FD | 	call	#__system__Right_S
0439c     FD 12 02 F6 | 	mov	arg01, result1
043a0     20 F9 B1 FD | 	call	#__system____builtin_atof
043a4     FD 14 02 F6 | 	mov	arg02, result1
043a8     00 18 21 FF 
043ac     00 12 06 F6 | 	mov	arg01, ##1110441984
043b0     58 ED B1 FD | 	call	#__system___float_add
043b4     FD 12 02 F6 | 	mov	arg01, result1
043b8     00 14 06 F6 | 	mov	arg02, #0
043bc     E4 F5 B1 FD | 	call	#__system___float_tointeger
043c0                 | LR__0234
043c0     A7 F0 03 F6 | 	mov	ptra, fp
043c4     B2 00 A0 FD | 	call	#popregs_
043c8                 | _ischannel_ret
043c8     2D 00 64 FD | 	ret
043cc                 | 
043cc                 | ' 
043cc                 | ' function isnotename(s as string) as ulong
043cc                 | _isnotename
043cc     07 4A 05 F6 | 	mov	COUNT_, #7
043d0     A8 00 A0 FD | 	call	#pushregs_
043d4                 | ' if left$(s,1)<>"#" then return 0
043d4     09 1F 02 F6 | 	mov	local01, arg01
043d8     01 14 06 F6 | 	mov	arg02, #1
043dc     C4 E5 B1 FD | 	call	#__system__Left_S
043e0     FD 12 02 F6 | 	mov	arg01, result1
043e4     81 01 00 FF 
043e8     EE 14 06 F6 | 	mov	arg02, ##@LR__5106
043ec     60 C5 B1 FD | 	call	#__system___string_cmp
043f0     00 FA 0D F2 | 	cmp	result1, #0 wz
043f4     00 FA 05 56 |  if_ne	mov	result1, #0
043f8     30 03 90 5D |  if_ne	jmp	#LR__0263
043fc                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
043fc     0F 13 02 F6 | 	mov	arg01, local01
04400     03 14 06 F6 | 	mov	arg02, #3
04404     01 16 06 F6 | 	mov	arg03, #1
04408     B0 E6 B1 FD | 	call	#__system__Mid_S
0440c     FD 12 02 F6 | 	mov	arg01, result1
04410     81 01 00 FF 
04414     F0 14 06 F6 | 	mov	arg02, ##@LR__5107
04418     34 C5 B1 FD | 	call	#__system___string_cmp
0441c     00 FA 0D F2 | 	cmp	result1, #0 wz
04420     18 00 90 5D |  if_ne	jmp	#LR__0240
04424     0F 13 02 F6 | 	mov	arg01, local01
04428     02 14 06 F6 | 	mov	arg02, #2
0442c     02 16 06 F6 | 	mov	arg03, #2
04430     88 E6 B1 FD | 	call	#__system__Mid_S
04434     FD 20 02 F6 | 	mov	local02, result1
04438     14 00 90 FD | 	jmp	#LR__0241
0443c                 | LR__0240
0443c     0F 13 02 F6 | 	mov	arg01, local01
04440     02 14 06 F6 | 	mov	arg02, #2
04444     01 16 06 F6 | 	mov	arg03, #1
04448     70 E6 B1 FD | 	call	#__system__Mid_S
0444c     FD 20 02 F6 | 	mov	local02, result1
04450                 | LR__0241
04450                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
04450     0F 13 02 F6 | 	mov	arg01, local01
04454     09 23 02 F6 | 	mov	local03, arg01
04458     97 06 48 FB | 	callpa	#(@LR__0243-@LR__0242)>>2,fcache_load_ptr_
0445c                 | LR__0242
0445c     11 FB C9 FA | 	rdbyte	result1, local03 wz
04460     01 22 06 51 |  if_ne	add	local03, #1
04464     F4 FF 9F 5D |  if_ne	jmp	#LR__0242
04468                 | LR__0243
04468     09 23 82 F1 | 	sub	local03, arg01
0446c     11 15 02 F6 | 	mov	arg02, local03
04470     01 14 86 F1 | 	sub	arg02, #1
04474     0F 13 02 F6 | 	mov	arg01, local01
04478     01 16 06 F6 | 	mov	arg03, #1
0447c     3C E6 B1 FD | 	call	#__system__Mid_S
04480     FD 12 02 F6 | 	mov	arg01, result1
04484     81 01 00 FF 
04488     F2 14 06 F6 | 	mov	arg02, ##@LR__5108
0448c     C0 C4 B1 FD | 	call	#__system___string_cmp
04490     00 FA 0D F2 | 	cmp	result1, #0 wz
04494     28 00 90 AD |  if_e	jmp	#LR__0244
04498     0F 13 02 F6 | 	mov	arg01, local01
0449c     01 14 06 F6 | 	mov	arg02, #1
044a0     88 E5 B1 FD | 	call	#__system__Right_S
044a4     FD 12 02 F6 | 	mov	arg01, result1
044a8     18 F8 B1 FD | 	call	#__system____builtin_atof
044ac     FD 12 02 F6 | 	mov	arg01, result1
044b0     00 14 06 F6 | 	mov	arg02, #0
044b4     EC F4 B1 FD | 	call	#__system___float_tointeger
044b8     FD 24 02 F6 | 	mov	local04, result1
044bc     34 00 90 FD | 	jmp	#LR__0245
044c0                 | LR__0244
044c0     0F 13 02 F6 | 	mov	arg01, local01
044c4     01 14 06 F6 | 	mov	arg02, #1
044c8     60 E5 B1 FD | 	call	#__system__Right_S
044cc     FD 12 02 F6 | 	mov	arg01, result1
044d0     F0 F7 B1 FD | 	call	#__system____builtin_atof
044d4     FD 14 02 F6 | 	mov	arg02, result1
044d8     00 C0 5F FF 
044dc     00 12 06 F6 | 	mov	arg01, ##-1082130432
044e0     F8 EF B1 FD | 	call	#__system___float_mul
044e4     FD 12 02 F6 | 	mov	arg01, result1
044e8     00 14 06 F6 | 	mov	arg02, #0
044ec     B4 F4 B1 FD | 	call	#__system___float_tointeger
044f0     FD 24 02 F6 | 	mov	local04, result1
044f4                 | LR__0245
044f4                 | ' 
044f4                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
044f4     00 24 0E F2 | 	cmp	local04, #0 wz
044f8     24 00 90 5D |  if_ne	jmp	#LR__0246
044fc     0F 13 02 F6 | 	mov	arg01, local01
04500     01 14 06 F6 | 	mov	arg02, #1
04504     24 E5 B1 FD | 	call	#__system__Right_S
04508     FD 12 02 F6 | 	mov	arg01, result1
0450c     81 01 00 FF 
04510     F4 14 06 F6 | 	mov	arg02, ##@LR__5109
04514     38 C4 B1 FD | 	call	#__system___string_cmp
04518     00 FA 0D F2 | 	cmp	result1, #0 wz
0451c     04 24 06 56 |  if_ne	mov	local04, #4
04520                 | LR__0246
04520                 | ' 
04520                 | ' select case s1
04520     10 27 02 F6 | 	mov	local05, local02
04524     81 01 00 FF 
04528     F6 14 06 F6 | 	mov	arg02, ##@LR__5110
0452c     13 13 02 F6 | 	mov	arg01, local05
04530     1C C4 B1 FD | 	call	#__system___string_cmp
04534     00 FA 0D F2 | 	cmp	result1, #0 wz
04538     24 01 90 AD |  if_e	jmp	#LR__0247
0453c     81 01 00 FF 
04540     F8 14 06 F6 | 	mov	arg02, ##@LR__5111
04544     13 13 02 F6 | 	mov	arg01, local05
04548     04 C4 B1 FD | 	call	#__system___string_cmp
0454c     00 FA 0D F2 | 	cmp	result1, #0 wz
04550     18 01 90 AD |  if_e	jmp	#LR__0248
04554     81 01 00 FF 
04558     FB 14 06 F6 | 	mov	arg02, ##@LR__5112
0455c     13 13 02 F6 | 	mov	arg01, local05
04560     EC C3 B1 FD | 	call	#__system___string_cmp
04564     00 FA 0D F2 | 	cmp	result1, #0 wz
04568     0C 01 90 AD |  if_e	jmp	#LR__0249
0456c     81 01 00 FF 
04570     FD 14 06 F6 | 	mov	arg02, ##@LR__5113
04574     13 13 02 F6 | 	mov	arg01, local05
04578     D4 C3 B1 FD | 	call	#__system___string_cmp
0457c     00 FA 0D F2 | 	cmp	result1, #0 wz
04580     00 01 90 AD |  if_e	jmp	#LR__0250
04584     81 01 00 FF 
04588     00 15 06 F6 | 	mov	arg02, ##@LR__5114
0458c     13 13 02 F6 | 	mov	arg01, local05
04590     BC C3 B1 FD | 	call	#__system___string_cmp
04594     00 FA 0D F2 | 	cmp	result1, #0 wz
04598     F4 00 90 AD |  if_e	jmp	#LR__0251
0459c     81 01 00 FF 
045a0     02 15 06 F6 | 	mov	arg02, ##@LR__5115
045a4     13 13 02 F6 | 	mov	arg01, local05
045a8     A4 C3 B1 FD | 	call	#__system___string_cmp
045ac     00 FA 0D F2 | 	cmp	result1, #0 wz
045b0     E8 00 90 AD |  if_e	jmp	#LR__0252
045b4     81 01 00 FF 
045b8     04 15 06 F6 | 	mov	arg02, ##@LR__5116
045bc     13 13 02 F6 | 	mov	arg01, local05
045c0     8C C3 B1 FD | 	call	#__system___string_cmp
045c4     00 FA 0D F2 | 	cmp	result1, #0 wz
045c8     DC 00 90 AD |  if_e	jmp	#LR__0253
045cc     81 01 00 FF 
045d0     07 15 06 F6 | 	mov	arg02, ##@LR__5117
045d4     13 13 02 F6 | 	mov	arg01, local05
045d8     74 C3 B1 FD | 	call	#__system___string_cmp
045dc     00 FA 0D F2 | 	cmp	result1, #0 wz
045e0     D0 00 90 AD |  if_e	jmp	#LR__0254
045e4     81 01 00 FF 
045e8     09 15 06 F6 | 	mov	arg02, ##@LR__5118
045ec     13 13 02 F6 | 	mov	arg01, local05
045f0     5C C3 B1 FD | 	call	#__system___string_cmp
045f4     00 FA 0D F2 | 	cmp	result1, #0 wz
045f8     C4 00 90 AD |  if_e	jmp	#LR__0255
045fc     81 01 00 FF 
04600     0C 15 06 F6 | 	mov	arg02, ##@LR__5119
04604     13 13 02 F6 | 	mov	arg01, local05
04608     44 C3 B1 FD | 	call	#__system___string_cmp
0460c     00 FA 0D F2 | 	cmp	result1, #0 wz
04610     B8 00 90 AD |  if_e	jmp	#LR__0256
04614     81 01 00 FF 
04618     0E 15 06 F6 | 	mov	arg02, ##@LR__5120
0461c     13 13 02 F6 | 	mov	arg01, local05
04620     2C C3 B1 FD | 	call	#__system___string_cmp
04624     00 FA 0D F2 | 	cmp	result1, #0 wz
04628     AC 00 90 AD |  if_e	jmp	#LR__0257
0462c     81 01 00 FF 
04630     11 15 06 F6 | 	mov	arg02, ##@LR__5121
04634     13 13 02 F6 | 	mov	arg01, local05
04638     14 C3 B1 FD | 	call	#__system___string_cmp
0463c     00 FA 0D F2 | 	cmp	result1, #0 wz
04640     A0 00 90 AD |  if_e	jmp	#LR__0258
04644     81 01 00 FF 
04648     13 15 06 F6 | 	mov	arg02, ##@LR__5122
0464c     13 13 02 F6 | 	mov	arg01, local05
04650     FC C2 B1 FD | 	call	#__system___string_cmp
04654     00 FA 0D F2 | 	cmp	result1, #0 wz
04658     94 00 90 AD |  if_e	jmp	#LR__0259
0465c     9C 00 90 FD | 	jmp	#LR__0260
04660                 | LR__0247
04660     01 00 00 FF 
04664     00 29 06 F6 | 	mov	local06, ##768
04668     98 00 90 FD | 	jmp	#LR__0261
0466c                 | LR__0248
0466c     01 00 00 FF 
04670     01 29 06 F6 | 	mov	local06, ##769
04674     8C 00 90 FD | 	jmp	#LR__0261
04678                 | LR__0249
04678     01 00 00 FF 
0467c     02 29 06 F6 | 	mov	local06, ##770
04680     80 00 90 FD | 	jmp	#LR__0261
04684                 | LR__0250
04684     01 00 00 FF 
04688     03 29 06 F6 | 	mov	local06, ##771
0468c     74 00 90 FD | 	jmp	#LR__0261
04690                 | LR__0251
04690     01 00 00 FF 
04694     04 29 06 F6 | 	mov	local06, ##772
04698     68 00 90 FD | 	jmp	#LR__0261
0469c                 | LR__0252
0469c     01 00 00 FF 
046a0     05 29 06 F6 | 	mov	local06, ##773
046a4     5C 00 90 FD | 	jmp	#LR__0261
046a8                 | LR__0253
046a8     01 00 00 FF 
046ac     06 29 06 F6 | 	mov	local06, ##774
046b0     50 00 90 FD | 	jmp	#LR__0261
046b4                 | LR__0254
046b4     01 00 00 FF 
046b8     07 29 06 F6 | 	mov	local06, ##775
046bc     44 00 90 FD | 	jmp	#LR__0261
046c0                 | LR__0255
046c0     01 00 00 FF 
046c4     08 29 06 F6 | 	mov	local06, ##776
046c8     38 00 90 FD | 	jmp	#LR__0261
046cc                 | LR__0256
046cc     01 00 00 FF 
046d0     09 29 06 F6 | 	mov	local06, ##777
046d4     2C 00 90 FD | 	jmp	#LR__0261
046d8                 | LR__0257
046d8     01 00 00 FF 
046dc     0A 29 06 F6 | 	mov	local06, ##778
046e0     20 00 90 FD | 	jmp	#LR__0261
046e4                 | LR__0258
046e4     01 00 00 FF 
046e8     0B 29 06 F6 | 	mov	local06, ##779
046ec     14 00 90 FD | 	jmp	#LR__0261
046f0                 | LR__0259
046f0     01 00 00 FF 
046f4     0B 29 06 F6 | 	mov	local06, ##779
046f8     08 00 90 FD | 	jmp	#LR__0261
046fc                 | LR__0260
046fc     00 FA 05 F6 | 	mov	result1, #0
04700     28 00 90 FD | 	jmp	#LR__0263
04704                 | LR__0261
04704                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04704     FF FF 7F FF 
04708     FF 25 56 F2 | 	cmps	local04, ##-1 wc
0470c     18 00 90 CD |  if_b	jmp	#LR__0262
04710     0A 24 56 F2 | 	cmps	local04, #10 wc
04714     12 2B 02 C6 |  if_b	mov	local07, local04
04718     01 2A 66 C0 |  if_b	shl	local07, #1
0471c     12 2B 02 C1 |  if_b	add	local07, local04
04720     02 2A 66 C0 |  if_b	shl	local07, #2
04724     15 29 02 C1 |  if_b	add	local06, local07
04728                 | LR__0262
04728                 | ' return token
04728     14 FB 01 F6 | 	mov	result1, local06
0472c                 | LR__0263
0472c     A7 F0 03 F6 | 	mov	ptra, fp
04730     B2 00 A0 FD | 	call	#popregs_
04734                 | _isnotename_ret
04734     2D 00 64 FD | 	ret
04738                 | 
04738                 | ' 
04738                 | ' 
04738                 | ' function isseparator(s as string) as ubyte
04738                 | _isseparator
04738     01 4A 05 F6 | 	mov	COUNT_, #1
0473c     A8 00 A0 FD | 	call	#pushregs_
04740                 | ' 
04740                 | ' select case s
04740     09 1F 02 F6 | 	mov	local01, arg01
04744     81 01 00 FF 
04748     15 15 06 F6 | 	mov	arg02, ##@LR__5123
0474c     0F 13 02 F6 | 	mov	arg01, local01
04750     FC C1 B1 FD | 	call	#__system___string_cmp
04754     00 FA 0D F2 | 	cmp	result1, #0 wz
04758     54 01 90 AD |  if_e	jmp	#LR__0270
0475c     81 01 00 FF 
04760     17 15 06 F6 | 	mov	arg02, ##@LR__5124
04764     0F 13 02 F6 | 	mov	arg01, local01
04768     E4 C1 B1 FD | 	call	#__system___string_cmp
0476c     00 FA 0D F2 | 	cmp	result1, #0 wz
04770     44 01 90 AD |  if_e	jmp	#LR__0271
04774     81 01 00 FF 
04778     19 15 06 F6 | 	mov	arg02, ##@LR__5125
0477c     0F 13 02 F6 | 	mov	arg01, local01
04780     CC C1 B1 FD | 	call	#__system___string_cmp
04784     00 FA 0D F2 | 	cmp	result1, #0 wz
04788     34 01 90 AD |  if_e	jmp	#LR__0272
0478c     81 01 00 FF 
04790     1B 15 06 F6 | 	mov	arg02, ##@LR__5126
04794     0F 13 02 F6 | 	mov	arg01, local01
04798     B4 C1 B1 FD | 	call	#__system___string_cmp
0479c     00 FA 0D F2 | 	cmp	result1, #0 wz
047a0     24 01 90 AD |  if_e	jmp	#LR__0273
047a4     81 01 00 FF 
047a8     1D 15 06 F6 | 	mov	arg02, ##@LR__5127
047ac     0F 13 02 F6 | 	mov	arg01, local01
047b0     9C C1 B1 FD | 	call	#__system___string_cmp
047b4     00 FA 0D F2 | 	cmp	result1, #0 wz
047b8     14 01 90 AD |  if_e	jmp	#LR__0274
047bc     81 01 00 FF 
047c0     1F 15 06 F6 | 	mov	arg02, ##@LR__5128
047c4     0F 13 02 F6 | 	mov	arg01, local01
047c8     84 C1 B1 FD | 	call	#__system___string_cmp
047cc     00 FA 0D F2 | 	cmp	result1, #0 wz
047d0     04 01 90 AD |  if_e	jmp	#LR__0275
047d4     81 01 00 FF 
047d8     21 15 06 F6 | 	mov	arg02, ##@LR__5129
047dc     0F 13 02 F6 | 	mov	arg01, local01
047e0     6C C1 B1 FD | 	call	#__system___string_cmp
047e4     00 FA 0D F2 | 	cmp	result1, #0 wz
047e8     F4 00 90 AD |  if_e	jmp	#LR__0276
047ec     81 01 00 FF 
047f0     23 15 06 F6 | 	mov	arg02, ##@LR__5130
047f4     0F 13 02 F6 | 	mov	arg01, local01
047f8     54 C1 B1 FD | 	call	#__system___string_cmp
047fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04800     E4 00 90 AD |  if_e	jmp	#LR__0277
04804     81 01 00 FF 
04808     25 15 06 F6 | 	mov	arg02, ##@LR__5131
0480c     0F 13 02 F6 | 	mov	arg01, local01
04810     3C C1 B1 FD | 	call	#__system___string_cmp
04814     00 FA 0D F2 | 	cmp	result1, #0 wz
04818     D4 00 90 AD |  if_e	jmp	#LR__0278
0481c     81 01 00 FF 
04820     27 15 06 F6 | 	mov	arg02, ##@LR__5132
04824     0F 13 02 F6 | 	mov	arg01, local01
04828     24 C1 B1 FD | 	call	#__system___string_cmp
0482c     00 FA 0D F2 | 	cmp	result1, #0 wz
04830     C4 00 90 AD |  if_e	jmp	#LR__0279
04834     81 01 00 FF 
04838     29 15 06 F6 | 	mov	arg02, ##@LR__5133
0483c     0F 13 02 F6 | 	mov	arg01, local01
04840     0C C1 B1 FD | 	call	#__system___string_cmp
04844     00 FA 0D F2 | 	cmp	result1, #0 wz
04848     B4 00 90 AD |  if_e	jmp	#LR__0280
0484c     81 01 00 FF 
04850     2B 15 06 F6 | 	mov	arg02, ##@LR__5134
04854     0F 13 02 F6 | 	mov	arg01, local01
04858     F4 C0 B1 FD | 	call	#__system___string_cmp
0485c     00 FA 0D F2 | 	cmp	result1, #0 wz
04860     A4 00 90 AD |  if_e	jmp	#LR__0281
04864     81 01 00 FF 
04868     2D 15 06 F6 | 	mov	arg02, ##@LR__5135
0486c     0F 13 02 F6 | 	mov	arg01, local01
04870     DC C0 B1 FD | 	call	#__system___string_cmp
04874     00 FA 0D F2 | 	cmp	result1, #0 wz
04878     94 00 90 AD |  if_e	jmp	#LR__0282
0487c     81 01 00 FF 
04880     2F 15 06 F6 | 	mov	arg02, ##@LR__5136
04884     0F 13 02 F6 | 	mov	arg01, local01
04888     C4 C0 B1 FD | 	call	#__system___string_cmp
0488c     00 FA 0D F2 | 	cmp	result1, #0 wz
04890     84 00 90 AD |  if_e	jmp	#LR__0283
04894     81 01 00 FF 
04898     31 15 06 F6 | 	mov	arg02, ##@LR__5137
0489c     0F 13 02 F6 | 	mov	arg01, local01
048a0     AC C0 B1 FD | 	call	#__system___string_cmp
048a4     00 FA 0D F2 | 	cmp	result1, #0 wz
048a8     74 00 90 AD |  if_e	jmp	#LR__0284
048ac     78 00 90 FD | 	jmp	#LR__0285
048b0                 | LR__0270
048b0     01 FA 05 F6 | 	mov	result1, #1
048b4     74 00 90 FD | 	jmp	#LR__0286
048b8                 | LR__0271
048b8     02 FA 05 F6 | 	mov	result1, #2
048bc     6C 00 90 FD | 	jmp	#LR__0286
048c0                 | LR__0272
048c0     1B FA 05 F6 | 	mov	result1, #27
048c4     64 00 90 FD | 	jmp	#LR__0286
048c8                 | LR__0273
048c8     11 FA 05 F6 | 	mov	result1, #17
048cc     5C 00 90 FD | 	jmp	#LR__0286
048d0                 | LR__0274
048d0     05 FA 05 F6 | 	mov	result1, #5
048d4     54 00 90 FD | 	jmp	#LR__0286
048d8                 | LR__0275
048d8     06 FA 05 F6 | 	mov	result1, #6
048dc     4C 00 90 FD | 	jmp	#LR__0286
048e0                 | LR__0276
048e0     12 FA 05 F6 | 	mov	result1, #18
048e4     44 00 90 FD | 	jmp	#LR__0286
048e8                 | LR__0277
048e8     13 FA 05 F6 | 	mov	result1, #19
048ec     3C 00 90 FD | 	jmp	#LR__0286
048f0                 | LR__0278
048f0     0C FA 05 F6 | 	mov	result1, #12
048f4     34 00 90 FD | 	jmp	#LR__0286
048f8                 | LR__0279
048f8     14 FA 05 F6 | 	mov	result1, #20
048fc     2C 00 90 FD | 	jmp	#LR__0286
04900                 | LR__0280
04900     15 FA 05 F6 | 	mov	result1, #21
04904     24 00 90 FD | 	jmp	#LR__0286
04908                 | LR__0281
04908     16 FA 05 F6 | 	mov	result1, #22
0490c     1C 00 90 FD | 	jmp	#LR__0286
04910                 | LR__0282
04910     FF FB 05 F6 | 	mov	result1, #511
04914     14 00 90 FD | 	jmp	#LR__0286
04918                 | LR__0283
04918     0F FA 05 F6 | 	mov	result1, #15
0491c     0C 00 90 FD | 	jmp	#LR__0286
04920                 | LR__0284
04920     10 FA 05 F6 | 	mov	result1, #16
04924     04 00 90 FD | 	jmp	#LR__0286
04928                 | LR__0285
04928     00 FA 05 F6 | 	mov	result1, #0
0492c                 | LR__0286
0492c     A7 F0 03 F6 | 	mov	ptra, fp
04930     B2 00 A0 FD | 	call	#popregs_
04934                 | _isseparator_ret
04934     2D 00 64 FD | 	ret
04938                 | 
04938                 | ' 
04938                 | ' 
04938                 | ' function iscommand(s as string) as ubyte
04938                 | _iscommand
04938     01 4A 05 F6 | 	mov	COUNT_, #1
0493c     A8 00 A0 FD | 	call	#pushregs_
04940                 | ' 
04940                 | ' select case s
04940     09 1F 02 F6 | 	mov	local01, arg01
04944     81 01 00 FF 
04948     35 15 06 F6 | 	mov	arg02, ##@LR__5139
0494c     0F 13 02 F6 | 	mov	arg01, local01
04950     FC BF B1 FD | 	call	#__system___string_cmp
04954     00 FA 0D F2 | 	cmp	result1, #0 wz
04958     44 0B 90 AD |  if_e	jmp	#LR__0290
0495c     81 01 00 FF 
04960     3A 15 06 F6 | 	mov	arg02, ##@LR__5140
04964     0F 13 02 F6 | 	mov	arg01, local01
04968     E4 BF B1 FD | 	call	#__system___string_cmp
0496c     00 FA 0D F2 | 	cmp	result1, #0 wz
04970     34 0B 90 AD |  if_e	jmp	#LR__0291
04974     81 01 00 FF 
04978     3D 15 06 F6 | 	mov	arg02, ##@LR__5141
0497c     0F 13 02 F6 | 	mov	arg01, local01
04980     CC BF B1 FD | 	call	#__system___string_cmp
04984     00 FA 0D F2 | 	cmp	result1, #0 wz
04988     24 0B 90 AD |  if_e	jmp	#LR__0292
0498c     81 01 00 FF 
04990     41 15 06 F6 | 	mov	arg02, ##@LR__5142
04994     0F 13 02 F6 | 	mov	arg01, local01
04998     B4 BF B1 FD | 	call	#__system___string_cmp
0499c     00 FA 0D F2 | 	cmp	result1, #0 wz
049a0     14 0B 90 AD |  if_e	jmp	#LR__0293
049a4     81 01 00 FF 
049a8     46 15 06 F6 | 	mov	arg02, ##@LR__5143
049ac     0F 13 02 F6 | 	mov	arg01, local01
049b0     9C BF B1 FD | 	call	#__system___string_cmp
049b4     00 FA 0D F2 | 	cmp	result1, #0 wz
049b8     04 0B 90 AD |  if_e	jmp	#LR__0294
049bc     81 01 00 FF 
049c0     4A 15 06 F6 | 	mov	arg02, ##@LR__5144
049c4     0F 13 02 F6 | 	mov	arg01, local01
049c8     84 BF B1 FD | 	call	#__system___string_cmp
049cc     00 FA 0D F2 | 	cmp	result1, #0 wz
049d0     F4 0A 90 AD |  if_e	jmp	#LR__0295
049d4     81 01 00 FF 
049d8     55 15 06 F6 | 	mov	arg02, ##@LR__5145
049dc     0F 13 02 F6 | 	mov	arg01, local01
049e0     6C BF B1 FD | 	call	#__system___string_cmp
049e4     00 FA 0D F2 | 	cmp	result1, #0 wz
049e8     E4 0A 90 AD |  if_e	jmp	#LR__0296
049ec     81 01 00 FF 
049f0     59 15 06 F6 | 	mov	arg02, ##@LR__5146
049f4     0F 13 02 F6 | 	mov	arg01, local01
049f8     54 BF B1 FD | 	call	#__system___string_cmp
049fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04a00     D4 0A 90 AD |  if_e	jmp	#LR__0297
04a04     81 01 00 FF 
04a08     63 15 06 F6 | 	mov	arg02, ##@LR__5147
04a0c     0F 13 02 F6 | 	mov	arg01, local01
04a10     3C BF B1 FD | 	call	#__system___string_cmp
04a14     00 FA 0D F2 | 	cmp	result1, #0 wz
04a18     C4 0A 90 AD |  if_e	jmp	#LR__0298
04a1c     81 01 00 FF 
04a20     67 15 06 F6 | 	mov	arg02, ##@LR__5148
04a24     0F 13 02 F6 | 	mov	arg01, local01
04a28     24 BF B1 FD | 	call	#__system___string_cmp
04a2c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a30     B4 0A 90 AD |  if_e	jmp	#LR__0299
04a34     81 01 00 FF 
04a38     71 15 06 F6 | 	mov	arg02, ##@LR__5149
04a3c     0F 13 02 F6 | 	mov	arg01, local01
04a40     0C BF B1 FD | 	call	#__system___string_cmp
04a44     00 FA 0D F2 | 	cmp	result1, #0 wz
04a48     A4 0A 90 AD |  if_e	jmp	#LR__0300
04a4c     81 01 00 FF 
04a50     75 15 06 F6 | 	mov	arg02, ##@LR__5150
04a54     0F 13 02 F6 | 	mov	arg01, local01
04a58     F4 BE B1 FD | 	call	#__system___string_cmp
04a5c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a60     94 0A 90 AD |  if_e	jmp	#LR__0301
04a64     81 01 00 FF 
04a68     80 15 06 F6 | 	mov	arg02, ##@LR__5151
04a6c     0F 13 02 F6 | 	mov	arg01, local01
04a70     DC BE B1 FD | 	call	#__system___string_cmp
04a74     00 FA 0D F2 | 	cmp	result1, #0 wz
04a78     84 0A 90 AD |  if_e	jmp	#LR__0302
04a7c     81 01 00 FF 
04a80     84 15 06 F6 | 	mov	arg02, ##@LR__5152
04a84     0F 13 02 F6 | 	mov	arg01, local01
04a88     C4 BE B1 FD | 	call	#__system___string_cmp
04a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a90     74 0A 90 AD |  if_e	jmp	#LR__0303
04a94     81 01 00 FF 
04a98     8B 15 06 F6 | 	mov	arg02, ##@LR__5153
04a9c     0F 13 02 F6 | 	mov	arg01, local01
04aa0     AC BE B1 FD | 	call	#__system___string_cmp
04aa4     00 FA 0D F2 | 	cmp	result1, #0 wz
04aa8     64 0A 90 AD |  if_e	jmp	#LR__0304
04aac     81 01 00 FF 
04ab0     8F 15 06 F6 | 	mov	arg02, ##@LR__5154
04ab4     0F 13 02 F6 | 	mov	arg01, local01
04ab8     94 BE B1 FD | 	call	#__system___string_cmp
04abc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ac0     54 0A 90 AD |  if_e	jmp	#LR__0305
04ac4     81 01 00 FF 
04ac8     95 15 06 F6 | 	mov	arg02, ##@LR__5155
04acc     0F 13 02 F6 | 	mov	arg01, local01
04ad0     7C BE B1 FD | 	call	#__system___string_cmp
04ad4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ad8     44 0A 90 AD |  if_e	jmp	#LR__0306
04adc     81 01 00 FF 
04ae0     9B 15 06 F6 | 	mov	arg02, ##@LR__5156
04ae4     0F 13 02 F6 | 	mov	arg01, local01
04ae8     64 BE B1 FD | 	call	#__system___string_cmp
04aec     00 FA 0D F2 | 	cmp	result1, #0 wz
04af0     34 0A 90 AD |  if_e	jmp	#LR__0307
04af4     81 01 00 FF 
04af8     9F 15 06 F6 | 	mov	arg02, ##@LR__5157
04afc     0F 13 02 F6 | 	mov	arg01, local01
04b00     4C BE B1 FD | 	call	#__system___string_cmp
04b04     00 FA 0D F2 | 	cmp	result1, #0 wz
04b08     24 0A 90 AD |  if_e	jmp	#LR__0308
04b0c     81 01 00 FF 
04b10     A5 15 06 F6 | 	mov	arg02, ##@LR__5158
04b14     0F 13 02 F6 | 	mov	arg01, local01
04b18     34 BE B1 FD | 	call	#__system___string_cmp
04b1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b20     14 0A 90 AD |  if_e	jmp	#LR__0309
04b24     81 01 00 FF 
04b28     A8 15 06 F6 | 	mov	arg02, ##@LR__5159
04b2c     0F 13 02 F6 | 	mov	arg01, local01
04b30     1C BE B1 FD | 	call	#__system___string_cmp
04b34     00 FA 0D F2 | 	cmp	result1, #0 wz
04b38     04 0A 90 AD |  if_e	jmp	#LR__0310
04b3c     81 01 00 FF 
04b40     AE 15 06 F6 | 	mov	arg02, ##@LR__5160
04b44     0F 13 02 F6 | 	mov	arg01, local01
04b48     04 BE B1 FD | 	call	#__system___string_cmp
04b4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b50     F4 09 90 AD |  if_e	jmp	#LR__0311
04b54     81 01 00 FF 
04b58     B2 15 06 F6 | 	mov	arg02, ##@LR__5161
04b5c     0F 13 02 F6 | 	mov	arg01, local01
04b60     EC BD B1 FD | 	call	#__system___string_cmp
04b64     00 FA 0D F2 | 	cmp	result1, #0 wz
04b68     E4 09 90 AD |  if_e	jmp	#LR__0312
04b6c     81 01 00 FF 
04b70     B9 15 06 F6 | 	mov	arg02, ##@LR__5162
04b74     0F 13 02 F6 | 	mov	arg01, local01
04b78     D4 BD B1 FD | 	call	#__system___string_cmp
04b7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b80     D4 09 90 AD |  if_e	jmp	#LR__0313
04b84     81 01 00 FF 
04b88     C0 15 06 F6 | 	mov	arg02, ##@LR__5163
04b8c     0F 13 02 F6 | 	mov	arg01, local01
04b90     BC BD B1 FD | 	call	#__system___string_cmp
04b94     00 FA 0D F2 | 	cmp	result1, #0 wz
04b98     C4 09 90 AD |  if_e	jmp	#LR__0314
04b9c     81 01 00 FF 
04ba0     C7 15 06 F6 | 	mov	arg02, ##@LR__5164
04ba4     0F 13 02 F6 | 	mov	arg01, local01
04ba8     A4 BD B1 FD | 	call	#__system___string_cmp
04bac     00 FA 0D F2 | 	cmp	result1, #0 wz
04bb0     B4 09 90 AD |  if_e	jmp	#LR__0315
04bb4     81 01 00 FF 
04bb8     D1 15 06 F6 | 	mov	arg02, ##@LR__5165
04bbc     0F 13 02 F6 | 	mov	arg01, local01
04bc0     8C BD B1 FD | 	call	#__system___string_cmp
04bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
04bc8     A4 09 90 AD |  if_e	jmp	#LR__0316
04bcc     81 01 00 FF 
04bd0     D5 15 06 F6 | 	mov	arg02, ##@LR__5166
04bd4     0F 13 02 F6 | 	mov	arg01, local01
04bd8     74 BD B1 FD | 	call	#__system___string_cmp
04bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
04be0     94 09 90 AD |  if_e	jmp	#LR__0317
04be4     81 01 00 FF 
04be8     D9 15 06 F6 | 	mov	arg02, ##@LR__5167
04bec     0F 13 02 F6 | 	mov	arg01, local01
04bf0     5C BD B1 FD | 	call	#__system___string_cmp
04bf4     00 FA 0D F2 | 	cmp	result1, #0 wz
04bf8     84 09 90 AD |  if_e	jmp	#LR__0318
04bfc     81 01 00 FF 
04c00     DD 15 06 F6 | 	mov	arg02, ##@LR__5168
04c04     0F 13 02 F6 | 	mov	arg01, local01
04c08     44 BD B1 FD | 	call	#__system___string_cmp
04c0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c10     74 09 90 AD |  if_e	jmp	#LR__0319
04c14     81 01 00 FF 
04c18     E1 15 06 F6 | 	mov	arg02, ##@LR__5169
04c1c     0F 13 02 F6 | 	mov	arg01, local01
04c20     2C BD B1 FD | 	call	#__system___string_cmp
04c24     00 FA 0D F2 | 	cmp	result1, #0 wz
04c28     64 09 90 AD |  if_e	jmp	#LR__0320
04c2c     81 01 00 FF 
04c30     E7 15 06 F6 | 	mov	arg02, ##@LR__5170
04c34     0F 13 02 F6 | 	mov	arg01, local01
04c38     14 BD B1 FD | 	call	#__system___string_cmp
04c3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c40     54 09 90 AD |  if_e	jmp	#LR__0321
04c44     81 01 00 FF 
04c48     EC 15 06 F6 | 	mov	arg02, ##@LR__5171
04c4c     0F 13 02 F6 | 	mov	arg01, local01
04c50     FC BC B1 FD | 	call	#__system___string_cmp
04c54     00 FA 0D F2 | 	cmp	result1, #0 wz
04c58     44 09 90 AD |  if_e	jmp	#LR__0322
04c5c     81 01 00 FF 
04c60     F0 15 06 F6 | 	mov	arg02, ##@LR__5172
04c64     0F 13 02 F6 | 	mov	arg01, local01
04c68     E4 BC B1 FD | 	call	#__system___string_cmp
04c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c70     34 09 90 AD |  if_e	jmp	#LR__0323
04c74     81 01 00 FF 
04c78     F5 15 06 F6 | 	mov	arg02, ##@LR__5173
04c7c     0F 13 02 F6 | 	mov	arg01, local01
04c80     CC BC B1 FD | 	call	#__system___string_cmp
04c84     00 FA 0D F2 | 	cmp	result1, #0 wz
04c88     24 09 90 AD |  if_e	jmp	#LR__0324
04c8c     81 01 00 FF 
04c90     F9 15 06 F6 | 	mov	arg02, ##@LR__5174
04c94     0F 13 02 F6 | 	mov	arg01, local01
04c98     B4 BC B1 FD | 	call	#__system___string_cmp
04c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04ca0     14 09 90 AD |  if_e	jmp	#LR__0325
04ca4     81 01 00 FF 
04ca8     FF 15 06 F6 | 	mov	arg02, ##@LR__5175
04cac     0F 13 02 F6 | 	mov	arg01, local01
04cb0     9C BC B1 FD | 	call	#__system___string_cmp
04cb4     00 FA 0D F2 | 	cmp	result1, #0 wz
04cb8     04 09 90 AD |  if_e	jmp	#LR__0326
04cbc     82 01 00 FF 
04cc0     02 14 06 F6 | 	mov	arg02, ##@LR__5176
04cc4     0F 13 02 F6 | 	mov	arg01, local01
04cc8     84 BC B1 FD | 	call	#__system___string_cmp
04ccc     00 FA 0D F2 | 	cmp	result1, #0 wz
04cd0     F4 08 90 AD |  if_e	jmp	#LR__0327
04cd4     82 01 00 FF 
04cd8     0A 14 06 F6 | 	mov	arg02, ##@LR__5177
04cdc     0F 13 02 F6 | 	mov	arg01, local01
04ce0     6C BC B1 FD | 	call	#__system___string_cmp
04ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ce8     E4 08 90 AD |  if_e	jmp	#LR__0328
04cec     82 01 00 FF 
04cf0     0E 14 06 F6 | 	mov	arg02, ##@LR__5178
04cf4     0F 13 02 F6 | 	mov	arg01, local01
04cf8     54 BC B1 FD | 	call	#__system___string_cmp
04cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
04d00     D4 08 90 AD |  if_e	jmp	#LR__0329
04d04     82 01 00 FF 
04d08     13 14 06 F6 | 	mov	arg02, ##@LR__5179
04d0c     0F 13 02 F6 | 	mov	arg01, local01
04d10     3C BC B1 FD | 	call	#__system___string_cmp
04d14     00 FA 0D F2 | 	cmp	result1, #0 wz
04d18     C4 08 90 AD |  if_e	jmp	#LR__0330
04d1c     82 01 00 FF 
04d20     17 14 06 F6 | 	mov	arg02, ##@LR__5180
04d24     0F 13 02 F6 | 	mov	arg01, local01
04d28     24 BC B1 FD | 	call	#__system___string_cmp
04d2c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d30     B4 08 90 AD |  if_e	jmp	#LR__0331
04d34     82 01 00 FF 
04d38     1C 14 06 F6 | 	mov	arg02, ##@LR__5181
04d3c     0F 13 02 F6 | 	mov	arg01, local01
04d40     0C BC B1 FD | 	call	#__system___string_cmp
04d44     00 FA 0D F2 | 	cmp	result1, #0 wz
04d48     A4 08 90 AD |  if_e	jmp	#LR__0332
04d4c     82 01 00 FF 
04d50     20 14 06 F6 | 	mov	arg02, ##@LR__5182
04d54     0F 13 02 F6 | 	mov	arg01, local01
04d58     F4 BB B1 FD | 	call	#__system___string_cmp
04d5c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d60     94 08 90 AD |  if_e	jmp	#LR__0333
04d64     82 01 00 FF 
04d68     23 14 06 F6 | 	mov	arg02, ##@LR__5183
04d6c     0F 13 02 F6 | 	mov	arg01, local01
04d70     DC BB B1 FD | 	call	#__system___string_cmp
04d74     00 FA 0D F2 | 	cmp	result1, #0 wz
04d78     84 08 90 AD |  if_e	jmp	#LR__0334
04d7c     82 01 00 FF 
04d80     29 14 06 F6 | 	mov	arg02, ##@LR__5184
04d84     0F 13 02 F6 | 	mov	arg01, local01
04d88     C4 BB B1 FD | 	call	#__system___string_cmp
04d8c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d90     74 08 90 AD |  if_e	jmp	#LR__0335
04d94     82 01 00 FF 
04d98     2D 14 06 F6 | 	mov	arg02, ##@LR__5185
04d9c     0F 13 02 F6 | 	mov	arg01, local01
04da0     AC BB B1 FD | 	call	#__system___string_cmp
04da4     00 FA 0D F2 | 	cmp	result1, #0 wz
04da8     64 08 90 AD |  if_e	jmp	#LR__0336
04dac     82 01 00 FF 
04db0     31 14 06 F6 | 	mov	arg02, ##@LR__5186
04db4     0F 13 02 F6 | 	mov	arg01, local01
04db8     94 BB B1 FD | 	call	#__system___string_cmp
04dbc     00 FA 0D F2 | 	cmp	result1, #0 wz
04dc0     54 08 90 AD |  if_e	jmp	#LR__0337
04dc4     82 01 00 FF 
04dc8     37 14 06 F6 | 	mov	arg02, ##@LR__5187
04dcc     0F 13 02 F6 | 	mov	arg01, local01
04dd0     7C BB B1 FD | 	call	#__system___string_cmp
04dd4     00 FA 0D F2 | 	cmp	result1, #0 wz
04dd8     44 08 90 AD |  if_e	jmp	#LR__0338
04ddc     82 01 00 FF 
04de0     3C 14 06 F6 | 	mov	arg02, ##@LR__5188
04de4     0F 13 02 F6 | 	mov	arg01, local01
04de8     64 BB B1 FD | 	call	#__system___string_cmp
04dec     00 FA 0D F2 | 	cmp	result1, #0 wz
04df0     34 08 90 AD |  if_e	jmp	#LR__0339
04df4     82 01 00 FF 
04df8     3F 14 06 F6 | 	mov	arg02, ##@LR__5189
04dfc     0F 13 02 F6 | 	mov	arg01, local01
04e00     4C BB B1 FD | 	call	#__system___string_cmp
04e04     00 FA 0D F2 | 	cmp	result1, #0 wz
04e08     24 08 90 AD |  if_e	jmp	#LR__0340
04e0c     82 01 00 FF 
04e10     42 14 06 F6 | 	mov	arg02, ##@LR__5190
04e14     0F 13 02 F6 | 	mov	arg01, local01
04e18     34 BB B1 FD | 	call	#__system___string_cmp
04e1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e20     14 08 90 AD |  if_e	jmp	#LR__0341
04e24     82 01 00 FF 
04e28     46 14 06 F6 | 	mov	arg02, ##@LR__5191
04e2c     0F 13 02 F6 | 	mov	arg01, local01
04e30     1C BB B1 FD | 	call	#__system___string_cmp
04e34     00 FA 0D F2 | 	cmp	result1, #0 wz
04e38     04 08 90 AD |  if_e	jmp	#LR__0342
04e3c     82 01 00 FF 
04e40     49 14 06 F6 | 	mov	arg02, ##@LR__5192
04e44     0F 13 02 F6 | 	mov	arg01, local01
04e48     04 BB B1 FD | 	call	#__system___string_cmp
04e4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e50     F4 07 90 AD |  if_e	jmp	#LR__0343
04e54     82 01 00 FF 
04e58     4E 14 06 F6 | 	mov	arg02, ##@LR__5193
04e5c     0F 13 02 F6 | 	mov	arg01, local01
04e60     EC BA B1 FD | 	call	#__system___string_cmp
04e64     00 FA 0D F2 | 	cmp	result1, #0 wz
04e68     E4 07 90 AD |  if_e	jmp	#LR__0344
04e6c     82 01 00 FF 
04e70     51 14 06 F6 | 	mov	arg02, ##@LR__5194
04e74     0F 13 02 F6 | 	mov	arg01, local01
04e78     D4 BA B1 FD | 	call	#__system___string_cmp
04e7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e80     D4 07 90 AD |  if_e	jmp	#LR__0345
04e84     82 01 00 FF 
04e88     56 14 06 F6 | 	mov	arg02, ##@LR__5195
04e8c     0F 13 02 F6 | 	mov	arg01, local01
04e90     BC BA B1 FD | 	call	#__system___string_cmp
04e94     00 FA 0D F2 | 	cmp	result1, #0 wz
04e98     C4 07 90 AD |  if_e	jmp	#LR__0346
04e9c     82 01 00 FF 
04ea0     5A 14 06 F6 | 	mov	arg02, ##@LR__5196
04ea4     0F 13 02 F6 | 	mov	arg01, local01
04ea8     A4 BA B1 FD | 	call	#__system___string_cmp
04eac     00 FA 0D F2 | 	cmp	result1, #0 wz
04eb0     B4 07 90 AD |  if_e	jmp	#LR__0347
04eb4     82 01 00 FF 
04eb8     60 14 06 F6 | 	mov	arg02, ##@LR__5197
04ebc     0F 13 02 F6 | 	mov	arg01, local01
04ec0     8C BA B1 FD | 	call	#__system___string_cmp
04ec4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ec8     A4 07 90 AD |  if_e	jmp	#LR__0348
04ecc     82 01 00 FF 
04ed0     65 14 06 F6 | 	mov	arg02, ##@LR__5198
04ed4     0F 13 02 F6 | 	mov	arg01, local01
04ed8     74 BA B1 FD | 	call	#__system___string_cmp
04edc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ee0     94 07 90 AD |  if_e	jmp	#LR__0349
04ee4     82 01 00 FF 
04ee8     68 14 06 F6 | 	mov	arg02, ##@LR__5199
04eec     0F 13 02 F6 | 	mov	arg01, local01
04ef0     5C BA B1 FD | 	call	#__system___string_cmp
04ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ef8     84 07 90 AD |  if_e	jmp	#LR__0350
04efc     82 01 00 FF 
04f00     6E 14 06 F6 | 	mov	arg02, ##@LR__5200
04f04     0F 13 02 F6 | 	mov	arg01, local01
04f08     44 BA B1 FD | 	call	#__system___string_cmp
04f0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f10     74 07 90 AD |  if_e	jmp	#LR__0351
04f14     82 01 00 FF 
04f18     72 14 06 F6 | 	mov	arg02, ##@LR__5201
04f1c     0F 13 02 F6 | 	mov	arg01, local01
04f20     2C BA B1 FD | 	call	#__system___string_cmp
04f24     00 FA 0D F2 | 	cmp	result1, #0 wz
04f28     64 07 90 AD |  if_e	jmp	#LR__0352
04f2c     82 01 00 FF 
04f30     77 14 06 F6 | 	mov	arg02, ##@LR__5202
04f34     0F 13 02 F6 | 	mov	arg01, local01
04f38     14 BA B1 FD | 	call	#__system___string_cmp
04f3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f40     54 07 90 AD |  if_e	jmp	#LR__0353
04f44     82 01 00 FF 
04f48     7A 14 06 F6 | 	mov	arg02, ##@LR__5203
04f4c     0F 13 02 F6 | 	mov	arg01, local01
04f50     FC B9 B1 FD | 	call	#__system___string_cmp
04f54     00 FA 0D F2 | 	cmp	result1, #0 wz
04f58     44 07 90 AD |  if_e	jmp	#LR__0354
04f5c     82 01 00 FF 
04f60     7F 14 06 F6 | 	mov	arg02, ##@LR__5204
04f64     0F 13 02 F6 | 	mov	arg01, local01
04f68     E4 B9 B1 FD | 	call	#__system___string_cmp
04f6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f70     34 07 90 AD |  if_e	jmp	#LR__0355
04f74     82 01 00 FF 
04f78     85 14 06 F6 | 	mov	arg02, ##@LR__5205
04f7c     0F 13 02 F6 | 	mov	arg01, local01
04f80     CC B9 B1 FD | 	call	#__system___string_cmp
04f84     00 FA 0D F2 | 	cmp	result1, #0 wz
04f88     24 07 90 AD |  if_e	jmp	#LR__0356
04f8c     82 01 00 FF 
04f90     89 14 06 F6 | 	mov	arg02, ##@LR__5206
04f94     0F 13 02 F6 | 	mov	arg01, local01
04f98     B4 B9 B1 FD | 	call	#__system___string_cmp
04f9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04fa0     14 07 90 AD |  if_e	jmp	#LR__0357
04fa4     82 01 00 FF 
04fa8     92 14 06 F6 | 	mov	arg02, ##@LR__5207
04fac     0F 13 02 F6 | 	mov	arg01, local01
04fb0     9C B9 B1 FD | 	call	#__system___string_cmp
04fb4     00 FA 0D F2 | 	cmp	result1, #0 wz
04fb8     04 07 90 AD |  if_e	jmp	#LR__0358
04fbc     82 01 00 FF 
04fc0     98 14 06 F6 | 	mov	arg02, ##@LR__5208
04fc4     0F 13 02 F6 | 	mov	arg01, local01
04fc8     84 B9 B1 FD | 	call	#__system___string_cmp
04fcc     00 FA 0D F2 | 	cmp	result1, #0 wz
04fd0     F4 06 90 AD |  if_e	jmp	#LR__0359
04fd4     82 01 00 FF 
04fd8     9E 14 06 F6 | 	mov	arg02, ##@LR__5209
04fdc     0F 13 02 F6 | 	mov	arg01, local01
04fe0     6C B9 B1 FD | 	call	#__system___string_cmp
04fe4     00 FA 0D F2 | 	cmp	result1, #0 wz
04fe8     E4 06 90 AD |  if_e	jmp	#LR__0360
04fec     82 01 00 FF 
04ff0     A7 14 06 F6 | 	mov	arg02, ##@LR__5210
04ff4     0F 13 02 F6 | 	mov	arg01, local01
04ff8     54 B9 B1 FD | 	call	#__system___string_cmp
04ffc     00 FA 0D F2 | 	cmp	result1, #0 wz
05000     D4 06 90 AD |  if_e	jmp	#LR__0361
05004     82 01 00 FF 
05008     B1 14 06 F6 | 	mov	arg02, ##@LR__5211
0500c     0F 13 02 F6 | 	mov	arg01, local01
05010     3C B9 B1 FD | 	call	#__system___string_cmp
05014     00 FA 0D F2 | 	cmp	result1, #0 wz
05018     C4 06 90 AD |  if_e	jmp	#LR__0362
0501c     82 01 00 FF 
05020     BA 14 06 F6 | 	mov	arg02, ##@LR__5212
05024     0F 13 02 F6 | 	mov	arg01, local01
05028     24 B9 B1 FD | 	call	#__system___string_cmp
0502c     00 FA 0D F2 | 	cmp	result1, #0 wz
05030     B4 06 90 AD |  if_e	jmp	#LR__0363
05034     82 01 00 FF 
05038     BF 14 06 F6 | 	mov	arg02, ##@LR__5213
0503c     0F 13 02 F6 | 	mov	arg01, local01
05040     0C B9 B1 FD | 	call	#__system___string_cmp
05044     00 FA 0D F2 | 	cmp	result1, #0 wz
05048     A4 06 90 AD |  if_e	jmp	#LR__0364
0504c     82 01 00 FF 
05050     C2 14 06 F6 | 	mov	arg02, ##@LR__5214
05054     0F 13 02 F6 | 	mov	arg01, local01
05058     F4 B8 B1 FD | 	call	#__system___string_cmp
0505c     00 FA 0D F2 | 	cmp	result1, #0 wz
05060     94 06 90 AD |  if_e	jmp	#LR__0365
05064     82 01 00 FF 
05068     C7 14 06 F6 | 	mov	arg02, ##@LR__5215
0506c     0F 13 02 F6 | 	mov	arg01, local01
05070     DC B8 B1 FD | 	call	#__system___string_cmp
05074     00 FA 0D F2 | 	cmp	result1, #0 wz
05078     84 06 90 AD |  if_e	jmp	#LR__0366
0507c     82 01 00 FF 
05080     CB 14 06 F6 | 	mov	arg02, ##@LR__5216
05084     0F 13 02 F6 | 	mov	arg01, local01
05088     C4 B8 B1 FD | 	call	#__system___string_cmp
0508c     00 FA 0D F2 | 	cmp	result1, #0 wz
05090     74 06 90 AD |  if_e	jmp	#LR__0367
05094     82 01 00 FF 
05098     D0 14 06 F6 | 	mov	arg02, ##@LR__5217
0509c     0F 13 02 F6 | 	mov	arg01, local01
050a0     AC B8 B1 FD | 	call	#__system___string_cmp
050a4     00 FA 0D F2 | 	cmp	result1, #0 wz
050a8     64 06 90 AD |  if_e	jmp	#LR__0368
050ac     82 01 00 FF 
050b0     D4 14 06 F6 | 	mov	arg02, ##@LR__5218
050b4     0F 13 02 F6 | 	mov	arg01, local01
050b8     94 B8 B1 FD | 	call	#__system___string_cmp
050bc     00 FA 0D F2 | 	cmp	result1, #0 wz
050c0     54 06 90 AD |  if_e	jmp	#LR__0369
050c4     82 01 00 FF 
050c8     DD 14 06 F6 | 	mov	arg02, ##@LR__5219
050cc     0F 13 02 F6 | 	mov	arg01, local01
050d0     7C B8 B1 FD | 	call	#__system___string_cmp
050d4     00 FA 0D F2 | 	cmp	result1, #0 wz
050d8     44 06 90 AD |  if_e	jmp	#LR__0370
050dc     82 01 00 FF 
050e0     E2 14 06 F6 | 	mov	arg02, ##@LR__5220
050e4     0F 13 02 F6 | 	mov	arg01, local01
050e8     64 B8 B1 FD | 	call	#__system___string_cmp
050ec     00 FA 0D F2 | 	cmp	result1, #0 wz
050f0     34 06 90 AD |  if_e	jmp	#LR__0371
050f4     82 01 00 FF 
050f8     E8 14 06 F6 | 	mov	arg02, ##@LR__5221
050fc     0F 13 02 F6 | 	mov	arg01, local01
05100     4C B8 B1 FD | 	call	#__system___string_cmp
05104     00 FA 0D F2 | 	cmp	result1, #0 wz
05108     24 06 90 AD |  if_e	jmp	#LR__0372
0510c     82 01 00 FF 
05110     EA 14 06 F6 | 	mov	arg02, ##@LR__5222
05114     0F 13 02 F6 | 	mov	arg01, local01
05118     34 B8 B1 FD | 	call	#__system___string_cmp
0511c     00 FA 0D F2 | 	cmp	result1, #0 wz
05120     14 06 90 AD |  if_e	jmp	#LR__0373
05124     82 01 00 FF 
05128     EE 14 06 F6 | 	mov	arg02, ##@LR__5223
0512c     0F 13 02 F6 | 	mov	arg01, local01
05130     1C B8 B1 FD | 	call	#__system___string_cmp
05134     00 FA 0D F2 | 	cmp	result1, #0 wz
05138     04 06 90 AD |  if_e	jmp	#LR__0374
0513c     82 01 00 FF 
05140     F2 14 06 F6 | 	mov	arg02, ##@LR__5224
05144     0F 13 02 F6 | 	mov	arg01, local01
05148     04 B8 B1 FD | 	call	#__system___string_cmp
0514c     00 FA 0D F2 | 	cmp	result1, #0 wz
05150     F4 05 90 AD |  if_e	jmp	#LR__0375
05154     82 01 00 FF 
05158     FA 14 06 F6 | 	mov	arg02, ##@LR__5225
0515c     0F 13 02 F6 | 	mov	arg01, local01
05160     EC B7 B1 FD | 	call	#__system___string_cmp
05164     00 FA 0D F2 | 	cmp	result1, #0 wz
05168     E4 05 90 AD |  if_e	jmp	#LR__0376
0516c     82 01 00 FF 
05170     FE 14 06 F6 | 	mov	arg02, ##@LR__5226
05174     0F 13 02 F6 | 	mov	arg01, local01
05178     D4 B7 B1 FD | 	call	#__system___string_cmp
0517c     00 FA 0D F2 | 	cmp	result1, #0 wz
05180     D4 05 90 AD |  if_e	jmp	#LR__0377
05184     82 01 00 FF 
05188     00 15 06 F6 | 	mov	arg02, ##@LR__5227
0518c     0F 13 02 F6 | 	mov	arg01, local01
05190     BC B7 B1 FD | 	call	#__system___string_cmp
05194     00 FA 0D F2 | 	cmp	result1, #0 wz
05198     C4 05 90 AD |  if_e	jmp	#LR__0378
0519c     82 01 00 FF 
051a0     07 15 06 F6 | 	mov	arg02, ##@LR__5228
051a4     0F 13 02 F6 | 	mov	arg01, local01
051a8     A4 B7 B1 FD | 	call	#__system___string_cmp
051ac     00 FA 0D F2 | 	cmp	result1, #0 wz
051b0     B4 05 90 AD |  if_e	jmp	#LR__0379
051b4     82 01 00 FF 
051b8     0B 15 06 F6 | 	mov	arg02, ##@LR__5229
051bc     0F 13 02 F6 | 	mov	arg01, local01
051c0     8C B7 B1 FD | 	call	#__system___string_cmp
051c4     00 FA 0D F2 | 	cmp	result1, #0 wz
051c8     A4 05 90 AD |  if_e	jmp	#LR__0380
051cc     82 01 00 FF 
051d0     10 15 06 F6 | 	mov	arg02, ##@LR__5230
051d4     0F 13 02 F6 | 	mov	arg01, local01
051d8     74 B7 B1 FD | 	call	#__system___string_cmp
051dc     00 FA 0D F2 | 	cmp	result1, #0 wz
051e0     94 05 90 AD |  if_e	jmp	#LR__0381
051e4     82 01 00 FF 
051e8     13 15 06 F6 | 	mov	arg02, ##@LR__5231
051ec     0F 13 02 F6 | 	mov	arg01, local01
051f0     5C B7 B1 FD | 	call	#__system___string_cmp
051f4     00 FA 0D F2 | 	cmp	result1, #0 wz
051f8     84 05 90 AD |  if_e	jmp	#LR__0382
051fc     82 01 00 FF 
05200     1C 15 06 F6 | 	mov	arg02, ##@LR__5232
05204     0F 13 02 F6 | 	mov	arg01, local01
05208     44 B7 B1 FD | 	call	#__system___string_cmp
0520c     00 FA 0D F2 | 	cmp	result1, #0 wz
05210     74 05 90 AD |  if_e	jmp	#LR__0383
05214     82 01 00 FF 
05218     20 15 06 F6 | 	mov	arg02, ##@LR__5233
0521c     0F 13 02 F6 | 	mov	arg01, local01
05220     2C B7 B1 FD | 	call	#__system___string_cmp
05224     00 FA 0D F2 | 	cmp	result1, #0 wz
05228     64 05 90 AD |  if_e	jmp	#LR__0384
0522c     82 01 00 FF 
05230     27 15 06 F6 | 	mov	arg02, ##@LR__5234
05234     0F 13 02 F6 | 	mov	arg01, local01
05238     14 B7 B1 FD | 	call	#__system___string_cmp
0523c     00 FA 0D F2 | 	cmp	result1, #0 wz
05240     54 05 90 AD |  if_e	jmp	#LR__0385
05244     82 01 00 FF 
05248     2B 15 06 F6 | 	mov	arg02, ##@LR__5235
0524c     0F 13 02 F6 | 	mov	arg01, local01
05250     FC B6 B1 FD | 	call	#__system___string_cmp
05254     00 FA 0D F2 | 	cmp	result1, #0 wz
05258     44 05 90 AD |  if_e	jmp	#LR__0386
0525c     82 01 00 FF 
05260     32 15 06 F6 | 	mov	arg02, ##@LR__5236
05264     0F 13 02 F6 | 	mov	arg01, local01
05268     E4 B6 B1 FD | 	call	#__system___string_cmp
0526c     00 FA 0D F2 | 	cmp	result1, #0 wz
05270     34 05 90 AD |  if_e	jmp	#LR__0387
05274     82 01 00 FF 
05278     36 15 06 F6 | 	mov	arg02, ##@LR__5237
0527c     0F 13 02 F6 | 	mov	arg01, local01
05280     CC B6 B1 FD | 	call	#__system___string_cmp
05284     00 FA 0D F2 | 	cmp	result1, #0 wz
05288     24 05 90 AD |  if_e	jmp	#LR__0388
0528c     82 01 00 FF 
05290     3D 15 06 F6 | 	mov	arg02, ##@LR__5238
05294     0F 13 02 F6 | 	mov	arg01, local01
05298     B4 B6 B1 FD | 	call	#__system___string_cmp
0529c     00 FA 0D F2 | 	cmp	result1, #0 wz
052a0     14 05 90 AD |  if_e	jmp	#LR__0389
052a4     82 01 00 FF 
052a8     40 15 06 F6 | 	mov	arg02, ##@LR__5239
052ac     0F 13 02 F6 | 	mov	arg01, local01
052b0     9C B6 B1 FD | 	call	#__system___string_cmp
052b4     00 FA 0D F2 | 	cmp	result1, #0 wz
052b8     04 05 90 AD |  if_e	jmp	#LR__0390
052bc     82 01 00 FF 
052c0     4B 15 06 F6 | 	mov	arg02, ##@LR__5240
052c4     0F 13 02 F6 | 	mov	arg01, local01
052c8     84 B6 B1 FD | 	call	#__system___string_cmp
052cc     00 FA 0D F2 | 	cmp	result1, #0 wz
052d0     F4 04 90 AD |  if_e	jmp	#LR__0391
052d4     82 01 00 FF 
052d8     4F 15 06 F6 | 	mov	arg02, ##@LR__5241
052dc     0F 13 02 F6 | 	mov	arg01, local01
052e0     6C B6 B1 FD | 	call	#__system___string_cmp
052e4     00 FA 0D F2 | 	cmp	result1, #0 wz
052e8     E4 04 90 AD |  if_e	jmp	#LR__0392
052ec     82 01 00 FF 
052f0     56 15 06 F6 | 	mov	arg02, ##@LR__5242
052f4     0F 13 02 F6 | 	mov	arg01, local01
052f8     54 B6 B1 FD | 	call	#__system___string_cmp
052fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05300     D4 04 90 AD |  if_e	jmp	#LR__0393
05304     82 01 00 FF 
05308     5A 15 06 F6 | 	mov	arg02, ##@LR__5243
0530c     0F 13 02 F6 | 	mov	arg01, local01
05310     3C B6 B1 FD | 	call	#__system___string_cmp
05314     00 FA 0D F2 | 	cmp	result1, #0 wz
05318     C4 04 90 AD |  if_e	jmp	#LR__0394
0531c     82 01 00 FF 
05320     62 15 06 F6 | 	mov	arg02, ##@LR__5244
05324     0F 13 02 F6 | 	mov	arg01, local01
05328     24 B6 B1 FD | 	call	#__system___string_cmp
0532c     00 FA 0D F2 | 	cmp	result1, #0 wz
05330     B4 04 90 AD |  if_e	jmp	#LR__0395
05334     82 01 00 FF 
05338     66 15 06 F6 | 	mov	arg02, ##@LR__5245
0533c     0F 13 02 F6 | 	mov	arg01, local01
05340     0C B6 B1 FD | 	call	#__system___string_cmp
05344     00 FA 0D F2 | 	cmp	result1, #0 wz
05348     A4 04 90 AD |  if_e	jmp	#LR__0396
0534c     82 01 00 FF 
05350     6D 15 06 F6 | 	mov	arg02, ##@LR__5246
05354     0F 13 02 F6 | 	mov	arg01, local01
05358     F4 B5 B1 FD | 	call	#__system___string_cmp
0535c     00 FA 0D F2 | 	cmp	result1, #0 wz
05360     94 04 90 AD |  if_e	jmp	#LR__0397
05364     82 01 00 FF 
05368     74 15 06 F6 | 	mov	arg02, ##@LR__5247
0536c     0F 13 02 F6 | 	mov	arg01, local01
05370     DC B5 B1 FD | 	call	#__system___string_cmp
05374     00 FA 0D F2 | 	cmp	result1, #0 wz
05378     84 04 90 AD |  if_e	jmp	#LR__0398
0537c     82 01 00 FF 
05380     78 15 06 F6 | 	mov	arg02, ##@LR__5248
05384     0F 13 02 F6 | 	mov	arg01, local01
05388     C4 B5 B1 FD | 	call	#__system___string_cmp
0538c     00 FA 0D F2 | 	cmp	result1, #0 wz
05390     74 04 90 AD |  if_e	jmp	#LR__0399
05394     82 01 00 FF 
05398     7E 15 06 F6 | 	mov	arg02, ##@LR__5249
0539c     0F 13 02 F6 | 	mov	arg01, local01
053a0     AC B5 B1 FD | 	call	#__system___string_cmp
053a4     00 FA 0D F2 | 	cmp	result1, #0 wz
053a8     64 04 90 AD |  if_e	jmp	#LR__0400
053ac     82 01 00 FF 
053b0     82 15 06 F6 | 	mov	arg02, ##@LR__5250
053b4     0F 13 02 F6 | 	mov	arg01, local01
053b8     94 B5 B1 FD | 	call	#__system___string_cmp
053bc     00 FA 0D F2 | 	cmp	result1, #0 wz
053c0     54 04 90 AD |  if_e	jmp	#LR__0401
053c4     82 01 00 FF 
053c8     89 15 06 F6 | 	mov	arg02, ##@LR__5251
053cc     0F 13 02 F6 | 	mov	arg01, local01
053d0     7C B5 B1 FD | 	call	#__system___string_cmp
053d4     00 FA 0D F2 | 	cmp	result1, #0 wz
053d8     44 04 90 AD |  if_e	jmp	#LR__0402
053dc     82 01 00 FF 
053e0     8E 15 06 F6 | 	mov	arg02, ##@LR__5252
053e4     0F 13 02 F6 | 	mov	arg01, local01
053e8     64 B5 B1 FD | 	call	#__system___string_cmp
053ec     00 FA 0D F2 | 	cmp	result1, #0 wz
053f0     34 04 90 AD |  if_e	jmp	#LR__0403
053f4     82 01 00 FF 
053f8     93 15 06 F6 | 	mov	arg02, ##@LR__5253
053fc     0F 13 02 F6 | 	mov	arg01, local01
05400     4C B5 B1 FD | 	call	#__system___string_cmp
05404     00 FA 0D F2 | 	cmp	result1, #0 wz
05408     24 04 90 AD |  if_e	jmp	#LR__0404
0540c     82 01 00 FF 
05410     9A 15 06 F6 | 	mov	arg02, ##@LR__5254
05414     0F 13 02 F6 | 	mov	arg01, local01
05418     34 B5 B1 FD | 	call	#__system___string_cmp
0541c     00 FA 0D F2 | 	cmp	result1, #0 wz
05420     14 04 90 AD |  if_e	jmp	#LR__0405
05424     82 01 00 FF 
05428     A4 15 06 F6 | 	mov	arg02, ##@LR__5255
0542c     0F 13 02 F6 | 	mov	arg01, local01
05430     1C B5 B1 FD | 	call	#__system___string_cmp
05434     00 FA 0D F2 | 	cmp	result1, #0 wz
05438     04 04 90 AD |  if_e	jmp	#LR__0406
0543c     82 01 00 FF 
05440     A8 15 06 F6 | 	mov	arg02, ##@LR__5256
05444     0F 13 02 F6 | 	mov	arg01, local01
05448     04 B5 B1 FD | 	call	#__system___string_cmp
0544c     00 FA 0D F2 | 	cmp	result1, #0 wz
05450     F4 03 90 AD |  if_e	jmp	#LR__0407
05454     82 01 00 FF 
05458     B0 15 06 F6 | 	mov	arg02, ##@LR__5257
0545c     0F 13 02 F6 | 	mov	arg01, local01
05460     EC B4 B1 FD | 	call	#__system___string_cmp
05464     00 FA 0D F2 | 	cmp	result1, #0 wz
05468     E4 03 90 AD |  if_e	jmp	#LR__0408
0546c     82 01 00 FF 
05470     B4 15 06 F6 | 	mov	arg02, ##@LR__5258
05474     0F 13 02 F6 | 	mov	arg01, local01
05478     D4 B4 B1 FD | 	call	#__system___string_cmp
0547c     00 FA 0D F2 | 	cmp	result1, #0 wz
05480     D4 03 90 AD |  if_e	jmp	#LR__0409
05484     82 01 00 FF 
05488     BA 15 06 F6 | 	mov	arg02, ##@LR__5259
0548c     0F 13 02 F6 | 	mov	arg01, local01
05490     BC B4 B1 FD | 	call	#__system___string_cmp
05494     00 FA 0D F2 | 	cmp	result1, #0 wz
05498     C4 03 90 AD |  if_e	jmp	#LR__0410
0549c     C8 03 90 FD | 	jmp	#LR__0411
054a0                 | LR__0290
054a0     5C FA 05 F6 | 	mov	result1, #92
054a4     C4 03 90 FD | 	jmp	#LR__0412
054a8                 | LR__0291
054a8     5C FA 05 F6 | 	mov	result1, #92
054ac     BC 03 90 FD | 	jmp	#LR__0412
054b0                 | LR__0292
054b0     47 FA 05 F6 | 	mov	result1, #71
054b4     B4 03 90 FD | 	jmp	#LR__0412
054b8                 | LR__0293
054b8     59 FA 05 F6 | 	mov	result1, #89
054bc     AC 03 90 FD | 	jmp	#LR__0412
054c0                 | LR__0294
054c0     59 FA 05 F6 | 	mov	result1, #89
054c4     A4 03 90 FD | 	jmp	#LR__0412
054c8                 | LR__0295
054c8     AE FA 05 F6 | 	mov	result1, #174
054cc     9C 03 90 FD | 	jmp	#LR__0412
054d0                 | LR__0296
054d0     AE FA 05 F6 | 	mov	result1, #174
054d4     94 03 90 FD | 	jmp	#LR__0412
054d8                 | LR__0297
054d8     B1 FA 05 F6 | 	mov	result1, #177
054dc     8C 03 90 FD | 	jmp	#LR__0412
054e0                 | LR__0298
054e0     B1 FA 05 F6 | 	mov	result1, #177
054e4     84 03 90 FD | 	jmp	#LR__0412
054e8                 | LR__0299
054e8     AF FA 05 F6 | 	mov	result1, #175
054ec     7C 03 90 FD | 	jmp	#LR__0412
054f0                 | LR__0300
054f0     AF FA 05 F6 | 	mov	result1, #175
054f4     74 03 90 FD | 	jmp	#LR__0412
054f8                 | LR__0301
054f8     B0 FA 05 F6 | 	mov	result1, #176
054fc     6C 03 90 FD | 	jmp	#LR__0412
05500                 | LR__0302
05500     B0 FA 05 F6 | 	mov	result1, #176
05504     64 03 90 FD | 	jmp	#LR__0412
05508                 | LR__0303
05508     45 FA 05 F6 | 	mov	result1, #69
0550c     5C 03 90 FD | 	jmp	#LR__0412
05510                 | LR__0304
05510     45 FA 05 F6 | 	mov	result1, #69
05514     54 03 90 FD | 	jmp	#LR__0412
05518                 | LR__0305
05518     69 FA 05 F6 | 	mov	result1, #105
0551c     4C 03 90 FD | 	jmp	#LR__0412
05520                 | LR__0306
05520     B4 FA 05 F6 | 	mov	result1, #180
05524     44 03 90 FD | 	jmp	#LR__0412
05528                 | LR__0307
05528     40 FA 05 F6 | 	mov	result1, #64
0552c     3C 03 90 FD | 	jmp	#LR__0412
05530                 | LR__0308
05530     49 FA 05 F6 | 	mov	result1, #73
05534     34 03 90 FD | 	jmp	#LR__0412
05538                 | LR__0309
05538     49 FA 05 F6 | 	mov	result1, #73
0553c     2C 03 90 FD | 	jmp	#LR__0412
05540                 | LR__0310
05540     50 FA 05 F6 | 	mov	result1, #80
05544     24 03 90 FD | 	jmp	#LR__0412
05548                 | LR__0311
05548     50 FA 05 F6 | 	mov	result1, #80
0554c     1C 03 90 FD | 	jmp	#LR__0412
05550                 | LR__0312
05550     68 FA 05 F6 | 	mov	result1, #104
05554     14 03 90 FD | 	jmp	#LR__0412
05558                 | LR__0313
05558     73 FA 05 F6 | 	mov	result1, #115
0555c     0C 03 90 FD | 	jmp	#LR__0412
05560                 | LR__0314
05560     74 FA 05 F6 | 	mov	result1, #116
05564     04 03 90 FD | 	jmp	#LR__0412
05568                 | LR__0315
05568     6C FA 05 F6 | 	mov	result1, #108
0556c     FC 02 90 FD | 	jmp	#LR__0412
05570                 | LR__0316
05570     6C FA 05 F6 | 	mov	result1, #108
05574     F4 02 90 FD | 	jmp	#LR__0412
05578                 | LR__0317
05578     89 FA 05 F6 | 	mov	result1, #137
0557c     EC 02 90 FD | 	jmp	#LR__0412
05580                 | LR__0318
05580     72 FA 05 F6 | 	mov	result1, #114
05584     E4 02 90 FD | 	jmp	#LR__0412
05588                 | LR__0319
05588     5D FA 05 F6 | 	mov	result1, #93
0558c     DC 02 90 FD | 	jmp	#LR__0412
05590                 | LR__0320
05590     96 FA 05 F6 | 	mov	result1, #150
05594     D4 02 90 FD | 	jmp	#LR__0412
05598                 | LR__0321
05598     43 FA 05 F6 | 	mov	result1, #67
0559c     CC 02 90 FD | 	jmp	#LR__0412
055a0                 | LR__0322
055a0     43 FA 05 F6 | 	mov	result1, #67
055a4     C4 02 90 FD | 	jmp	#LR__0412
055a8                 | LR__0323
055a8     5A FA 05 F6 | 	mov	result1, #90
055ac     BC 02 90 FD | 	jmp	#LR__0412
055b0                 | LR__0324
055b0     AB FA 05 F6 | 	mov	result1, #171
055b4     B4 02 90 FD | 	jmp	#LR__0412
055b8                 | LR__0325
055b8     BD FA 05 F6 | 	mov	result1, #189
055bc     AC 02 90 FD | 	jmp	#LR__0412
055c0                 | LR__0326
055c0     BD FA 05 F6 | 	mov	result1, #189
055c4     A4 02 90 FD | 	jmp	#LR__0412
055c8                 | LR__0327
055c8     46 FA 05 F6 | 	mov	result1, #70
055cc     9C 02 90 FD | 	jmp	#LR__0412
055d0                 | LR__0328
055d0     46 FA 05 F6 | 	mov	result1, #70
055d4     94 02 90 FD | 	jmp	#LR__0412
055d8                 | LR__0329
055d8     71 FA 05 F6 | 	mov	result1, #113
055dc     8C 02 90 FD | 	jmp	#LR__0412
055e0                 | LR__0330
055e0     71 FA 05 F6 | 	mov	result1, #113
055e4     84 02 90 FD | 	jmp	#LR__0412
055e8                 | LR__0331
055e8     60 FA 05 F6 | 	mov	result1, #96
055ec     7C 02 90 FD | 	jmp	#LR__0412
055f0                 | LR__0332
055f0     4A FA 05 F6 | 	mov	result1, #74
055f4     74 02 90 FD | 	jmp	#LR__0412
055f8                 | LR__0333
055f8     4A FA 05 F6 | 	mov	result1, #74
055fc     6C 02 90 FD | 	jmp	#LR__0412
05600                 | LR__0334
05600     48 FA 05 F6 | 	mov	result1, #72
05604     64 02 90 FD | 	jmp	#LR__0412
05608                 | LR__0335
05608     48 FA 05 F6 | 	mov	result1, #72
0560c     5C 02 90 FD | 	jmp	#LR__0412
05610                 | LR__0336
05610     BB FA 05 F6 | 	mov	result1, #187
05614     54 02 90 FD | 	jmp	#LR__0412
05618                 | LR__0337
05618     A9 FA 05 F6 | 	mov	result1, #169
0561c     4C 02 90 FD | 	jmp	#LR__0412
05620                 | LR__0338
05620     4E FA 05 F6 | 	mov	result1, #78
05624     44 02 90 FD | 	jmp	#LR__0412
05628                 | LR__0339
05628     4E FA 05 F6 | 	mov	result1, #78
0562c     3C 02 90 FD | 	jmp	#LR__0412
05630                 | LR__0340
05630     58 FA 05 F6 | 	mov	result1, #88
05634     34 02 90 FD | 	jmp	#LR__0412
05638                 | LR__0341
05638     5F FA 05 F6 | 	mov	result1, #95
0563c     2C 02 90 FD | 	jmp	#LR__0412
05640                 | LR__0342
05640     5F FA 05 F6 | 	mov	result1, #95
05644     24 02 90 FD | 	jmp	#LR__0412
05648                 | LR__0343
05648     4C FA 05 F6 | 	mov	result1, #76
0564c     1C 02 90 FD | 	jmp	#LR__0412
05650                 | LR__0344
05650     4C FA 05 F6 | 	mov	result1, #76
05654     14 02 90 FD | 	jmp	#LR__0412
05658                 | LR__0345
05658     52 FA 05 F6 | 	mov	result1, #82
0565c     0C 02 90 FD | 	jmp	#LR__0412
05660                 | LR__0346
05660     52 FA 05 F6 | 	mov	result1, #82
05664     04 02 90 FD | 	jmp	#LR__0412
05668                 | LR__0347
05668     97 FA 05 F6 | 	mov	result1, #151
0566c     FC 01 90 FD | 	jmp	#LR__0412
05670                 | LR__0348
05670     61 FA 05 F6 | 	mov	result1, #97
05674     F4 01 90 FD | 	jmp	#LR__0412
05678                 | LR__0349
05678     61 FA 05 F6 | 	mov	result1, #97
0567c     EC 01 90 FD | 	jmp	#LR__0412
05680                 | LR__0350
05680     63 FA 05 F6 | 	mov	result1, #99
05684     E4 01 90 FD | 	jmp	#LR__0412
05688                 | LR__0351
05688     41 FA 05 F6 | 	mov	result1, #65
0568c     DC 01 90 FD | 	jmp	#LR__0412
05690                 | LR__0352
05690     4B FA 05 F6 | 	mov	result1, #75
05694     D4 01 90 FD | 	jmp	#LR__0412
05698                 | LR__0353
05698     4B FA 05 F6 | 	mov	result1, #75
0569c     CC 01 90 FD | 	jmp	#LR__0412
056a0                 | LR__0354
056a0     B3 FA 05 F6 | 	mov	result1, #179
056a4     C4 01 90 FD | 	jmp	#LR__0412
056a8                 | LR__0355
056a8     5E FA 05 F6 | 	mov	result1, #94
056ac     BC 01 90 FD | 	jmp	#LR__0412
056b0                 | LR__0356
056b0     5E FA 05 F6 | 	mov	result1, #94
056b4     B4 01 90 FD | 	jmp	#LR__0412
056b8                 | LR__0357
056b8     7C FA 05 F6 | 	mov	result1, #124
056bc     AC 01 90 FD | 	jmp	#LR__0412
056c0                 | LR__0358
056c0     7E FA 05 F6 | 	mov	result1, #126
056c4     A4 01 90 FD | 	jmp	#LR__0412
056c8                 | LR__0359
056c8     7D FA 05 F6 | 	mov	result1, #125
056cc     9C 01 90 FD | 	jmp	#LR__0412
056d0                 | LR__0360
056d0     7F FA 05 F6 | 	mov	result1, #127
056d4     94 01 90 FD | 	jmp	#LR__0412
056d8                 | LR__0361
056d8     80 FA 05 F6 | 	mov	result1, #128
056dc     8C 01 90 FD | 	jmp	#LR__0412
056e0                 | LR__0362
056e0     55 FA 05 F6 | 	mov	result1, #85
056e4     84 01 90 FD | 	jmp	#LR__0412
056e8                 | LR__0363
056e8     75 FA 05 F6 | 	mov	result1, #117
056ec     7C 01 90 FD | 	jmp	#LR__0412
056f0                 | LR__0364
056f0     75 FA 05 F6 | 	mov	result1, #117
056f4     74 01 90 FD | 	jmp	#LR__0412
056f8                 | LR__0365
056f8     42 FA 05 F6 | 	mov	result1, #66
056fc     6C 01 90 FD | 	jmp	#LR__0412
05700                 | LR__0366
05700     42 FA 05 F6 | 	mov	result1, #66
05704     64 01 90 FD | 	jmp	#LR__0412
05708                 | LR__0367
05708     95 FA 05 F6 | 	mov	result1, #149
0570c     5C 01 90 FD | 	jmp	#LR__0412
05710                 | LR__0368
05710     AC FA 05 F6 | 	mov	result1, #172
05714     54 01 90 FD | 	jmp	#LR__0412
05718                 | LR__0369
05718     81 FA 05 F6 | 	mov	result1, #129
0571c     4C 01 90 FD | 	jmp	#LR__0412
05720                 | LR__0370
05720     81 FA 05 F6 | 	mov	result1, #129
05724     44 01 90 FD | 	jmp	#LR__0412
05728                 | LR__0371
05728     44 FA 05 F6 | 	mov	result1, #68
0572c     3C 01 90 FD | 	jmp	#LR__0412
05730                 | LR__0372
05730     44 FA 05 F6 | 	mov	result1, #68
05734     34 01 90 FD | 	jmp	#LR__0412
05738                 | LR__0373
05738     BC FA 05 F6 | 	mov	result1, #188
0573c     2C 01 90 FD | 	jmp	#LR__0412
05740                 | LR__0374
05740     88 FA 05 F6 | 	mov	result1, #136
05744     24 01 90 FD | 	jmp	#LR__0412
05748                 | LR__0375
05748     92 FA 05 F6 | 	mov	result1, #146
0574c     1C 01 90 FD | 	jmp	#LR__0412
05750                 | LR__0376
05750     BE FA 05 F6 | 	mov	result1, #190
05754     14 01 90 FD | 	jmp	#LR__0412
05758                 | LR__0377
05758     BE FA 05 F6 | 	mov	result1, #190
0575c     0C 01 90 FD | 	jmp	#LR__0412
05760                 | LR__0378
05760     AA FA 05 F6 | 	mov	result1, #170
05764     04 01 90 FD | 	jmp	#LR__0412
05768                 | LR__0379
05768     4D FA 05 F6 | 	mov	result1, #77
0576c     FC 00 90 FD | 	jmp	#LR__0412
05770                 | LR__0380
05770     51 FA 05 F6 | 	mov	result1, #81
05774     F4 00 90 FD | 	jmp	#LR__0412
05778                 | LR__0381
05778     51 FA 05 F6 | 	mov	result1, #81
0577c     EC 00 90 FD | 	jmp	#LR__0412
05780                 | LR__0382
05780     8E FA 05 F6 | 	mov	result1, #142
05784     E4 00 90 FD | 	jmp	#LR__0412
05788                 | LR__0383
05788     8E FA 05 F6 | 	mov	result1, #142
0578c     DC 00 90 FD | 	jmp	#LR__0412
05790                 | LR__0384
05790     90 FA 05 F6 | 	mov	result1, #144
05794     D4 00 90 FD | 	jmp	#LR__0412
05798                 | LR__0385
05798     90 FA 05 F6 | 	mov	result1, #144
0579c     CC 00 90 FD | 	jmp	#LR__0412
057a0                 | LR__0386
057a0     8D FA 05 F6 | 	mov	result1, #141
057a4     C4 00 90 FD | 	jmp	#LR__0412
057a8                 | LR__0387
057a8     8D FA 05 F6 | 	mov	result1, #141
057ac     BC 00 90 FD | 	jmp	#LR__0412
057b0                 | LR__0388
057b0     8C FA 05 F6 | 	mov	result1, #140
057b4     B4 00 90 FD | 	jmp	#LR__0412
057b8                 | LR__0389
057b8     8C FA 05 F6 | 	mov	result1, #140
057bc     AC 00 90 FD | 	jmp	#LR__0412
057c0                 | LR__0390
057c0     91 FA 05 F6 | 	mov	result1, #145
057c4     A4 00 90 FD | 	jmp	#LR__0412
057c8                 | LR__0391
057c8     91 FA 05 F6 | 	mov	result1, #145
057cc     9C 00 90 FD | 	jmp	#LR__0412
057d0                 | LR__0392
057d0     8B FA 05 F6 | 	mov	result1, #139
057d4     94 00 90 FD | 	jmp	#LR__0412
057d8                 | LR__0393
057d8     8B FA 05 F6 | 	mov	result1, #139
057dc     8C 00 90 FD | 	jmp	#LR__0412
057e0                 | LR__0394
057e0     8F FA 05 F6 | 	mov	result1, #143
057e4     84 00 90 FD | 	jmp	#LR__0412
057e8                 | LR__0395
057e8     8F FA 05 F6 | 	mov	result1, #143
057ec     7C 00 90 FD | 	jmp	#LR__0412
057f0                 | LR__0396
057f0     8F FA 05 F6 | 	mov	result1, #143
057f4     74 00 90 FD | 	jmp	#LR__0412
057f8                 | LR__0397
057f8     B2 FA 05 F6 | 	mov	result1, #178
057fc     6C 00 90 FD | 	jmp	#LR__0412
05800                 | LR__0398
05800     B2 FA 05 F6 | 	mov	result1, #178
05804     64 00 90 FD | 	jmp	#LR__0412
05808                 | LR__0399
05808     75 FA 05 F6 | 	mov	result1, #117
0580c     5C 00 90 FD | 	jmp	#LR__0412
05810                 | LR__0400
05810     75 FA 05 F6 | 	mov	result1, #117
05814     54 00 90 FD | 	jmp	#LR__0412
05818                 | LR__0401
05818     6D FA 05 F6 | 	mov	result1, #109
0581c     4C 00 90 FD | 	jmp	#LR__0412
05820                 | LR__0402
05820     6D FA 05 F6 | 	mov	result1, #109
05824     44 00 90 FD | 	jmp	#LR__0412
05828                 | LR__0403
05828     5B FA 05 F6 | 	mov	result1, #91
0582c     3C 00 90 FD | 	jmp	#LR__0412
05830                 | LR__0404
05830     56 FA 05 F6 | 	mov	result1, #86
05834     34 00 90 FD | 	jmp	#LR__0412
05838                 | LR__0405
05838     70 FA 05 F6 | 	mov	result1, #112
0583c     2C 00 90 FD | 	jmp	#LR__0412
05840                 | LR__0406
05840     70 FA 05 F6 | 	mov	result1, #112
05844     24 00 90 FD | 	jmp	#LR__0412
05848                 | LR__0407
05848     57 FA 05 F6 | 	mov	result1, #87
0584c     1C 00 90 FD | 	jmp	#LR__0412
05850                 | LR__0408
05850     57 FA 05 F6 | 	mov	result1, #87
05854     14 00 90 FD | 	jmp	#LR__0412
05858                 | LR__0409
05858     77 FA 05 F6 | 	mov	result1, #119
0585c     0C 00 90 FD | 	jmp	#LR__0412
05860                 | LR__0410
05860     78 FA 05 F6 | 	mov	result1, #120
05864     04 00 90 FD | 	jmp	#LR__0412
05868                 | LR__0411
05868     00 FA 05 F6 | 	mov	result1, #0
0586c                 | LR__0412
0586c     A7 F0 03 F6 | 	mov	ptra, fp
05870     B2 00 A0 FD | 	call	#popregs_
05874                 | _iscommand_ret
05874     2D 00 64 FD | 	ret
05878                 | 
05878                 | ' 
05878                 | ' function isfunction(s as string) as ubyte
05878                 | _isfunction
05878     01 4A 05 F6 | 	mov	COUNT_, #1
0587c     A8 00 A0 FD | 	call	#pushregs_
05880                 | ' 
05880                 | ' select case s
05880     09 1F 02 F6 | 	mov	local01, arg01
05884     82 01 00 FF 
05888     C0 15 06 F6 | 	mov	arg02, ##@LR__5260
0588c     0F 13 02 F6 | 	mov	arg01, local01
05890     BC B0 B1 FD | 	call	#__system___string_cmp
05894     00 FA 0D F2 | 	cmp	result1, #0 wz
05898     0C 04 90 AD |  if_e	jmp	#LR__0420
0589c     82 01 00 FF 
058a0     C4 15 06 F6 | 	mov	arg02, ##@LR__5261
058a4     0F 13 02 F6 | 	mov	arg01, local01
058a8     A4 B0 B1 FD | 	call	#__system___string_cmp
058ac     00 FA 0D F2 | 	cmp	result1, #0 wz
058b0     FC 03 90 AD |  if_e	jmp	#LR__0421
058b4     82 01 00 FF 
058b8     C9 15 06 F6 | 	mov	arg02, ##@LR__5262
058bc     0F 13 02 F6 | 	mov	arg01, local01
058c0     8C B0 B1 FD | 	call	#__system___string_cmp
058c4     00 FA 0D F2 | 	cmp	result1, #0 wz
058c8     EC 03 90 AD |  if_e	jmp	#LR__0422
058cc     82 01 00 FF 
058d0     CD 15 06 F6 | 	mov	arg02, ##@LR__5263
058d4     0F 13 02 F6 | 	mov	arg01, local01
058d8     74 B0 B1 FD | 	call	#__system___string_cmp
058dc     00 FA 0D F2 | 	cmp	result1, #0 wz
058e0     DC 03 90 AD |  if_e	jmp	#LR__0423
058e4     82 01 00 FF 
058e8     D2 15 06 F6 | 	mov	arg02, ##@LR__5264
058ec     0F 13 02 F6 | 	mov	arg01, local01
058f0     5C B0 B1 FD | 	call	#__system___string_cmp
058f4     00 FA 0D F2 | 	cmp	result1, #0 wz
058f8     CC 03 90 AD |  if_e	jmp	#LR__0424
058fc     82 01 00 FF 
05900     D6 15 06 F6 | 	mov	arg02, ##@LR__5265
05904     0F 13 02 F6 | 	mov	arg01, local01
05908     44 B0 B1 FD | 	call	#__system___string_cmp
0590c     00 FA 0D F2 | 	cmp	result1, #0 wz
05910     BC 03 90 AD |  if_e	jmp	#LR__0425
05914     82 01 00 FF 
05918     DB 15 06 F6 | 	mov	arg02, ##@LR__5266
0591c     0F 13 02 F6 | 	mov	arg01, local01
05920     2C B0 B1 FD | 	call	#__system___string_cmp
05924     00 FA 0D F2 | 	cmp	result1, #0 wz
05928     AC 03 90 AD |  if_e	jmp	#LR__0426
0592c     82 01 00 FF 
05930     DF 15 06 F6 | 	mov	arg02, ##@LR__5267
05934     0F 13 02 F6 | 	mov	arg01, local01
05938     14 B0 B1 FD | 	call	#__system___string_cmp
0593c     00 FA 0D F2 | 	cmp	result1, #0 wz
05940     9C 03 90 AD |  if_e	jmp	#LR__0427
05944     82 01 00 FF 
05948     E4 15 06 F6 | 	mov	arg02, ##@LR__5268
0594c     0F 13 02 F6 | 	mov	arg01, local01
05950     FC AF B1 FD | 	call	#__system___string_cmp
05954     00 FA 0D F2 | 	cmp	result1, #0 wz
05958     8C 03 90 AD |  if_e	jmp	#LR__0428
0595c     82 01 00 FF 
05960     E9 15 06 F6 | 	mov	arg02, ##@LR__5269
05964     0F 13 02 F6 | 	mov	arg01, local01
05968     E4 AF B1 FD | 	call	#__system___string_cmp
0596c     00 FA 0D F2 | 	cmp	result1, #0 wz
05970     7C 03 90 AD |  if_e	jmp	#LR__0429
05974     82 01 00 FF 
05978     ED 15 06 F6 | 	mov	arg02, ##@LR__5270
0597c     0F 13 02 F6 | 	mov	arg01, local01
05980     CC AF B1 FD | 	call	#__system___string_cmp
05984     00 FA 0D F2 | 	cmp	result1, #0 wz
05988     6C 03 90 AD |  if_e	jmp	#LR__0430
0598c     82 01 00 FF 
05990     F3 15 06 F6 | 	mov	arg02, ##@LR__5271
05994     0F 13 02 F6 | 	mov	arg01, local01
05998     B4 AF B1 FD | 	call	#__system___string_cmp
0599c     00 FA 0D F2 | 	cmp	result1, #0 wz
059a0     5C 03 90 AD |  if_e	jmp	#LR__0431
059a4     82 01 00 FF 
059a8     F7 15 06 F6 | 	mov	arg02, ##@LR__5272
059ac     0F 13 02 F6 | 	mov	arg01, local01
059b0     9C AF B1 FD | 	call	#__system___string_cmp
059b4     00 FA 0D F2 | 	cmp	result1, #0 wz
059b8     4C 03 90 AD |  if_e	jmp	#LR__0432
059bc     83 01 00 FF 
059c0     00 14 06 F6 | 	mov	arg02, ##@LR__5273
059c4     0F 13 02 F6 | 	mov	arg01, local01
059c8     84 AF B1 FD | 	call	#__system___string_cmp
059cc     00 FA 0D F2 | 	cmp	result1, #0 wz
059d0     3C 03 90 AD |  if_e	jmp	#LR__0433
059d4     83 01 00 FF 
059d8     04 14 06 F6 | 	mov	arg02, ##@LR__5274
059dc     0F 13 02 F6 | 	mov	arg01, local01
059e0     6C AF B1 FD | 	call	#__system___string_cmp
059e4     00 FA 0D F2 | 	cmp	result1, #0 wz
059e8     2C 03 90 AD |  if_e	jmp	#LR__0434
059ec     83 01 00 FF 
059f0     12 14 06 F6 | 	mov	arg02, ##@LR__5275
059f4     0F 13 02 F6 | 	mov	arg01, local01
059f8     54 AF B1 FD | 	call	#__system___string_cmp
059fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05a00     1C 03 90 AD |  if_e	jmp	#LR__0435
05a04     83 01 00 FF 
05a08     1F 14 06 F6 | 	mov	arg02, ##@LR__5276
05a0c     0F 13 02 F6 | 	mov	arg01, local01
05a10     3C AF B1 FD | 	call	#__system___string_cmp
05a14     00 FA 0D F2 | 	cmp	result1, #0 wz
05a18     0C 03 90 AD |  if_e	jmp	#LR__0436
05a1c     83 01 00 FF 
05a20     27 14 06 F6 | 	mov	arg02, ##@LR__5277
05a24     0F 13 02 F6 | 	mov	arg01, local01
05a28     24 AF B1 FD | 	call	#__system___string_cmp
05a2c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a30     FC 02 90 AD |  if_e	jmp	#LR__0437
05a34     83 01 00 FF 
05a38     2C 14 06 F6 | 	mov	arg02, ##@LR__5278
05a3c     0F 13 02 F6 | 	mov	arg01, local01
05a40     0C AF B1 FD | 	call	#__system___string_cmp
05a44     00 FA 0D F2 | 	cmp	result1, #0 wz
05a48     EC 02 90 AD |  if_e	jmp	#LR__0438
05a4c     83 01 00 FF 
05a50     33 14 06 F6 | 	mov	arg02, ##@LR__5279
05a54     0F 13 02 F6 | 	mov	arg01, local01
05a58     F4 AE B1 FD | 	call	#__system___string_cmp
05a5c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a60     DC 02 90 AD |  if_e	jmp	#LR__0439
05a64     83 01 00 FF 
05a68     37 14 06 F6 | 	mov	arg02, ##@LR__5280
05a6c     0F 13 02 F6 | 	mov	arg01, local01
05a70     DC AE B1 FD | 	call	#__system___string_cmp
05a74     00 FA 0D F2 | 	cmp	result1, #0 wz
05a78     CC 02 90 AD |  if_e	jmp	#LR__0440
05a7c     83 01 00 FF 
05a80     3D 14 06 F6 | 	mov	arg02, ##@LR__5281
05a84     0F 13 02 F6 | 	mov	arg01, local01
05a88     C4 AE B1 FD | 	call	#__system___string_cmp
05a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a90     BC 02 90 AD |  if_e	jmp	#LR__0441
05a94     83 01 00 FF 
05a98     41 14 06 F6 | 	mov	arg02, ##@LR__5282
05a9c     0F 13 02 F6 | 	mov	arg01, local01
05aa0     AC AE B1 FD | 	call	#__system___string_cmp
05aa4     00 FA 0D F2 | 	cmp	result1, #0 wz
05aa8     AC 02 90 AD |  if_e	jmp	#LR__0442
05aac     83 01 00 FF 
05ab0     45 14 06 F6 | 	mov	arg02, ##@LR__5283
05ab4     0F 13 02 F6 | 	mov	arg01, local01
05ab8     94 AE B1 FD | 	call	#__system___string_cmp
05abc     00 FA 0D F2 | 	cmp	result1, #0 wz
05ac0     9C 02 90 AD |  if_e	jmp	#LR__0443
05ac4     83 01 00 FF 
05ac8     4B 14 06 F6 | 	mov	arg02, ##@LR__5284
05acc     0F 13 02 F6 | 	mov	arg01, local01
05ad0     7C AE B1 FD | 	call	#__system___string_cmp
05ad4     00 FA 0D F2 | 	cmp	result1, #0 wz
05ad8     8C 02 90 AD |  if_e	jmp	#LR__0444
05adc     83 01 00 FF 
05ae0     50 14 06 F6 | 	mov	arg02, ##@LR__5285
05ae4     0F 13 02 F6 | 	mov	arg01, local01
05ae8     64 AE B1 FD | 	call	#__system___string_cmp
05aec     00 FA 0D F2 | 	cmp	result1, #0 wz
05af0     7C 02 90 AD |  if_e	jmp	#LR__0445
05af4     83 01 00 FF 
05af8     57 14 06 F6 | 	mov	arg02, ##@LR__5286
05afc     0F 13 02 F6 | 	mov	arg01, local01
05b00     4C AE B1 FD | 	call	#__system___string_cmp
05b04     00 FA 0D F2 | 	cmp	result1, #0 wz
05b08     6C 02 90 AD |  if_e	jmp	#LR__0446
05b0c     83 01 00 FF 
05b10     5E 14 06 F6 | 	mov	arg02, ##@LR__5287
05b14     0F 13 02 F6 | 	mov	arg01, local01
05b18     34 AE B1 FD | 	call	#__system___string_cmp
05b1c     00 FA 0D F2 | 	cmp	result1, #0 wz
05b20     5C 02 90 AD |  if_e	jmp	#LR__0447
05b24     83 01 00 FF 
05b28     65 14 06 F6 | 	mov	arg02, ##@LR__5288
05b2c     0F 13 02 F6 | 	mov	arg01, local01
05b30     1C AE B1 FD | 	call	#__system___string_cmp
05b34     00 FA 0D F2 | 	cmp	result1, #0 wz
05b38     4C 02 90 AD |  if_e	jmp	#LR__0448
05b3c     83 01 00 FF 
05b40     6C 14 06 F6 | 	mov	arg02, ##@LR__5289
05b44     0F 13 02 F6 | 	mov	arg01, local01
05b48     04 AE B1 FD | 	call	#__system___string_cmp
05b4c     00 FA 0D F2 | 	cmp	result1, #0 wz
05b50     3C 02 90 AD |  if_e	jmp	#LR__0449
05b54     83 01 00 FF 
05b58     71 14 06 F6 | 	mov	arg02, ##@LR__5290
05b5c     0F 13 02 F6 | 	mov	arg01, local01
05b60     EC AD B1 FD | 	call	#__system___string_cmp
05b64     00 FA 0D F2 | 	cmp	result1, #0 wz
05b68     2C 02 90 AD |  if_e	jmp	#LR__0450
05b6c     83 01 00 FF 
05b70     79 14 06 F6 | 	mov	arg02, ##@LR__5291
05b74     0F 13 02 F6 | 	mov	arg01, local01
05b78     D4 AD B1 FD | 	call	#__system___string_cmp
05b7c     00 FA 0D F2 | 	cmp	result1, #0 wz
05b80     1C 02 90 AD |  if_e	jmp	#LR__0451
05b84     83 01 00 FF 
05b88     7F 14 06 F6 | 	mov	arg02, ##@LR__5292
05b8c     0F 13 02 F6 | 	mov	arg01, local01
05b90     BC AD B1 FD | 	call	#__system___string_cmp
05b94     00 FA 0D F2 | 	cmp	result1, #0 wz
05b98     0C 02 90 AD |  if_e	jmp	#LR__0452
05b9c     83 01 00 FF 
05ba0     86 14 06 F6 | 	mov	arg02, ##@LR__5293
05ba4     0F 13 02 F6 | 	mov	arg01, local01
05ba8     A4 AD B1 FD | 	call	#__system___string_cmp
05bac     00 FA 0D F2 | 	cmp	result1, #0 wz
05bb0     FC 01 90 AD |  if_e	jmp	#LR__0453
05bb4     83 01 00 FF 
05bb8     8C 14 06 F6 | 	mov	arg02, ##@LR__5294
05bbc     0F 13 02 F6 | 	mov	arg01, local01
05bc0     8C AD B1 FD | 	call	#__system___string_cmp
05bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
05bc8     EC 01 90 AD |  if_e	jmp	#LR__0454
05bcc     83 01 00 FF 
05bd0     92 14 06 F6 | 	mov	arg02, ##@LR__5295
05bd4     0F 13 02 F6 | 	mov	arg01, local01
05bd8     74 AD B1 FD | 	call	#__system___string_cmp
05bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
05be0     DC 01 90 AD |  if_e	jmp	#LR__0455
05be4     83 01 00 FF 
05be8     96 14 06 F6 | 	mov	arg02, ##@LR__5296
05bec     0F 13 02 F6 | 	mov	arg01, local01
05bf0     5C AD B1 FD | 	call	#__system___string_cmp
05bf4     00 FA 0D F2 | 	cmp	result1, #0 wz
05bf8     CC 01 90 AD |  if_e	jmp	#LR__0456
05bfc     83 01 00 FF 
05c00     9A 14 06 F6 | 	mov	arg02, ##@LR__5297
05c04     0F 13 02 F6 | 	mov	arg01, local01
05c08     44 AD B1 FD | 	call	#__system___string_cmp
05c0c     00 FA 0D F2 | 	cmp	result1, #0 wz
05c10     BC 01 90 AD |  if_e	jmp	#LR__0457
05c14     83 01 00 FF 
05c18     9E 14 06 F6 | 	mov	arg02, ##@LR__5298
05c1c     0F 13 02 F6 | 	mov	arg01, local01
05c20     2C AD B1 FD | 	call	#__system___string_cmp
05c24     00 FA 0D F2 | 	cmp	result1, #0 wz
05c28     AC 01 90 AD |  if_e	jmp	#LR__0458
05c2c     83 01 00 FF 
05c30     A4 14 06 F6 | 	mov	arg02, ##@LR__5299
05c34     0F 13 02 F6 | 	mov	arg01, local01
05c38     14 AD B1 FD | 	call	#__system___string_cmp
05c3c     00 FA 0D F2 | 	cmp	result1, #0 wz
05c40     9C 01 90 AD |  if_e	jmp	#LR__0459
05c44     83 01 00 FF 
05c48     AA 14 06 F6 | 	mov	arg02, ##@LR__5300
05c4c     0F 13 02 F6 | 	mov	arg01, local01
05c50     FC AC B1 FD | 	call	#__system___string_cmp
05c54     00 FA 0D F2 | 	cmp	result1, #0 wz
05c58     8C 01 90 AD |  if_e	jmp	#LR__0460
05c5c     83 01 00 FF 
05c60     AF 14 06 F6 | 	mov	arg02, ##@LR__5301
05c64     0F 13 02 F6 | 	mov	arg01, local01
05c68     E4 AC B1 FD | 	call	#__system___string_cmp
05c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
05c70     7C 01 90 AD |  if_e	jmp	#LR__0461
05c74     83 01 00 FF 
05c78     B3 14 06 F6 | 	mov	arg02, ##@LR__5302
05c7c     0F 13 02 F6 | 	mov	arg01, local01
05c80     CC AC B1 FD | 	call	#__system___string_cmp
05c84     00 FA 0D F2 | 	cmp	result1, #0 wz
05c88     6C 01 90 AD |  if_e	jmp	#LR__0462
05c8c     83 01 00 FF 
05c90     B7 14 06 F6 | 	mov	arg02, ##@LR__5303
05c94     0F 13 02 F6 | 	mov	arg01, local01
05c98     B4 AC B1 FD | 	call	#__system___string_cmp
05c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
05ca0     5C 01 90 AD |  if_e	jmp	#LR__0463
05ca4     60 01 90 FD | 	jmp	#LR__0464
05ca8                 | LR__0420
05ca8     9E FA 05 F6 | 	mov	result1, #158
05cac     5C 01 90 FD | 	jmp	#LR__0465
05cb0                 | LR__0421
05cb0     85 FA 05 F6 | 	mov	result1, #133
05cb4     54 01 90 FD | 	jmp	#LR__0465
05cb8                 | LR__0422
05cb8     9B FA 05 F6 | 	mov	result1, #155
05cbc     4C 01 90 FD | 	jmp	#LR__0465
05cc0                 | LR__0423
05cc0     9B FA 05 F6 | 	mov	result1, #155
05cc4     44 01 90 FD | 	jmp	#LR__0465
05cc8                 | LR__0424
05cc8     A7 FA 05 F6 | 	mov	result1, #167
05ccc     3C 01 90 FD | 	jmp	#LR__0465
05cd0                 | LR__0425
05cd0     84 FA 05 F6 | 	mov	result1, #132
05cd4     34 01 90 FD | 	jmp	#LR__0465
05cd8                 | LR__0426
05cd8     86 FA 05 F6 | 	mov	result1, #134
05cdc     2C 01 90 FD | 	jmp	#LR__0465
05ce0                 | LR__0427
05ce0     A2 FA 05 F6 | 	mov	result1, #162
05ce4     24 01 90 FD | 	jmp	#LR__0465
05ce8                 | LR__0428
05ce8     9F FA 05 F6 | 	mov	result1, #159
05cec     1C 01 90 FD | 	jmp	#LR__0465
05cf0                 | LR__0429
05cf0     82 FA 05 F6 | 	mov	result1, #130
05cf4     14 01 90 FD | 	jmp	#LR__0465
05cf8                 | LR__0430
05cf8     99 FA 05 F6 | 	mov	result1, #153
05cfc     0C 01 90 FD | 	jmp	#LR__0465
05d00                 | LR__0431
05d00     9C FA 05 F6 | 	mov	result1, #156
05d04     04 01 90 FD | 	jmp	#LR__0465
05d08                 | LR__0432
05d08     6F FA 05 F6 | 	mov	result1, #111
05d0c     FC 00 90 FD | 	jmp	#LR__0465
05d10                 | LR__0433
05d10     6F FA 05 F6 | 	mov	result1, #111
05d14     F4 00 90 FD | 	jmp	#LR__0465
05d18                 | LR__0434
05d18     93 FA 05 F6 | 	mov	result1, #147
05d1c     EC 00 90 FD | 	jmp	#LR__0465
05d20                 | LR__0435
05d20     94 FA 05 F6 | 	mov	result1, #148
05d24     E4 00 90 FD | 	jmp	#LR__0465
05d28                 | LR__0436
05d28     62 FA 05 F6 | 	mov	result1, #98
05d2c     DC 00 90 FD | 	jmp	#LR__0465
05d30                 | LR__0437
05d30     A3 FA 05 F6 | 	mov	result1, #163
05d34     D4 00 90 FD | 	jmp	#LR__0465
05d38                 | LR__0438
05d38     9D FA 05 F6 | 	mov	result1, #157
05d3c     CC 00 90 FD | 	jmp	#LR__0465
05d40                 | LR__0439
05d40     8A FA 05 F6 | 	mov	result1, #138
05d44     C4 00 90 FD | 	jmp	#LR__0465
05d48                 | LR__0440
05d48     A4 FA 05 F6 | 	mov	result1, #164
05d4c     BC 00 90 FD | 	jmp	#LR__0465
05d50                 | LR__0441
05d50     A8 FA 05 F6 | 	mov	result1, #168
05d54     B4 00 90 FD | 	jmp	#LR__0465
05d58                 | LR__0442
05d58     AD FA 05 F6 | 	mov	result1, #173
05d5c     AC 00 90 FD | 	jmp	#LR__0465
05d60                 | LR__0443
05d60     9A FA 05 F6 | 	mov	result1, #154
05d64     A4 00 90 FD | 	jmp	#LR__0465
05d68                 | LR__0444
05d68     A6 FA 05 F6 | 	mov	result1, #166
05d6c     9C 00 90 FD | 	jmp	#LR__0465
05d70                 | LR__0445
05d70     66 FA 05 F6 | 	mov	result1, #102
05d74     94 00 90 FD | 	jmp	#LR__0465
05d78                 | LR__0446
05d78     67 FA 05 F6 | 	mov	result1, #103
05d7c     8C 00 90 FD | 	jmp	#LR__0465
05d80                 | LR__0447
05d80     64 FA 05 F6 | 	mov	result1, #100
05d84     84 00 90 FD | 	jmp	#LR__0465
05d88                 | LR__0448
05d88     65 FA 05 F6 | 	mov	result1, #101
05d8c     7C 00 90 FD | 	jmp	#LR__0465
05d90                 | LR__0449
05d90     98 FA 05 F6 | 	mov	result1, #152
05d94     74 00 90 FD | 	jmp	#LR__0465
05d98                 | LR__0450
05d98     7B FA 05 F6 | 	mov	result1, #123
05d9c     6C 00 90 FD | 	jmp	#LR__0465
05da0                 | LR__0451
05da0     76 FA 05 F6 | 	mov	result1, #118
05da4     64 00 90 FD | 	jmp	#LR__0465
05da8                 | LR__0452
05da8     A5 FA 05 F6 | 	mov	result1, #165
05dac     5C 00 90 FD | 	jmp	#LR__0465
05db0                 | LR__0453
05db0     7A FA 05 F6 | 	mov	result1, #122
05db4     54 00 90 FD | 	jmp	#LR__0465
05db8                 | LR__0454
05db8     BF FA 05 F6 | 	mov	result1, #191
05dbc     4C 00 90 FD | 	jmp	#LR__0465
05dc0                 | LR__0455
05dc0     54 FA 05 F6 | 	mov	result1, #84
05dc4     44 00 90 FD | 	jmp	#LR__0465
05dc8                 | LR__0456
05dc8     6B FA 05 F6 | 	mov	result1, #107
05dcc     3C 00 90 FD | 	jmp	#LR__0465
05dd0                 | LR__0457
05dd0     87 FA 05 F6 | 	mov	result1, #135
05dd4     34 00 90 FD | 	jmp	#LR__0465
05dd8                 | LR__0458
05dd8     6A FA 05 F6 | 	mov	result1, #106
05ddc     2C 00 90 FD | 	jmp	#LR__0465
05de0                 | LR__0459
05de0     6E FA 05 F6 | 	mov	result1, #110
05de4     24 00 90 FD | 	jmp	#LR__0465
05de8                 | LR__0460
05de8     A1 FA 05 F6 | 	mov	result1, #161
05dec     1C 00 90 FD | 	jmp	#LR__0465
05df0                 | LR__0461
05df0     83 FA 05 F6 | 	mov	result1, #131
05df4     14 00 90 FD | 	jmp	#LR__0465
05df8                 | LR__0462
05df8     A0 FA 05 F6 | 	mov	result1, #160
05dfc     0C 00 90 FD | 	jmp	#LR__0465
05e00                 | LR__0463
05e00     9B FA 05 F6 | 	mov	result1, #155
05e04     04 00 90 FD | 	jmp	#LR__0465
05e08                 | LR__0464
05e08     00 FA 05 F6 | 	mov	result1, #0
05e0c                 | LR__0465
05e0c     A7 F0 03 F6 | 	mov	ptra, fp
05e10     B2 00 A0 FD | 	call	#popregs_
05e14                 | _isfunction_ret
05e14     2D 00 64 FD | 	ret
05e18                 | 
05e18                 | ' 
05e18                 | ' function isname(s as string) as boolean
05e18                 | _isname
05e18     0D 4A 05 F6 | 	mov	COUNT_, #13
05e1c     A8 00 A0 FD | 	call	#pushregs_
05e20     09 1F 02 F6 | 	mov	local01, arg01
05e24     09 21 02 F6 | 	mov	local02, arg01
05e28     97 06 48 FB | 	callpa	#(@LR__0471-@LR__0470)>>2,fcache_load_ptr_
05e2c                 | LR__0470
05e2c     10 FB C9 FA | 	rdbyte	result1, local02 wz
05e30     01 20 06 51 |  if_ne	add	local02, #1
05e34     F4 FF 9F 5D |  if_ne	jmp	#LR__0470
05e38                 | LR__0471
05e38     09 21 82 F1 | 	sub	local02, arg01
05e3c     10 FB 01 F6 | 	mov	result1, local02
05e40     FD 22 0A F6 | 	mov	local03, result1 wz
05e44     00 FA 05 A6 |  if_e	mov	result1, #0
05e48     34 02 90 AD |  if_e	jmp	#LR__0483
05e4c     0F 13 02 F6 | 	mov	arg01, local01
05e50     01 14 06 F6 | 	mov	arg02, #1
05e54     01 16 06 F6 | 	mov	arg03, #1
05e58     60 CC B1 FD | 	call	#__system__Mid_S
05e5c     FD 24 02 F6 | 	mov	local04, result1
05e60                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
05e60     83 01 00 FF 
05e64     BE 14 06 F6 | 	mov	arg02, ##@LR__5304
05e68     12 13 02 F6 | 	mov	arg01, local04
05e6c     E0 AA B1 FD | 	call	#__system___string_cmp
05e70     00 FA 55 F2 | 	cmps	result1, #0 wc
05e74     18 00 90 CD |  if_b	jmp	#LR__0472
05e78     83 01 00 FF 
05e7c     C0 14 06 F6 | 	mov	arg02, ##@LR__5305
05e80     12 13 02 F6 | 	mov	arg01, local04
05e84     C8 AA B1 FD | 	call	#__system___string_cmp
05e88     01 FA 55 F2 | 	cmps	result1, #1 wc
05e8c     1C 00 90 CD |  if_b	jmp	#LR__0473
05e90                 | LR__0472
05e90     83 01 00 FF 
05e94     C2 14 06 F6 | 	mov	arg02, ##@LR__5306
05e98     12 13 02 F6 | 	mov	arg01, local04
05e9c     B0 AA B1 FD | 	call	#__system___string_cmp
05ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ea4     00 FA 05 56 |  if_ne	mov	result1, #0
05ea8     D4 01 90 5D |  if_ne	jmp	#LR__0483
05eac                 | LR__0473
05eac                 | ' if l>2 then 
05eac     03 22 56 F2 | 	cmps	local03, #3 wc
05eb0     C8 01 90 CD |  if_b	jmp	#LR__0482
05eb4                 | '   for i=2 to l
05eb4     02 26 06 F6 | 	mov	local05, #2
05eb8     11 29 02 F6 | 	mov	local06, local03
05ebc     01 28 06 F1 | 	add	local06, #1
05ec0                 | LR__0474
05ec0     14 27 52 F2 | 	cmps	local05, local06 wc
05ec4     B4 01 90 3D |  if_ae	jmp	#LR__0481
05ec8     0F 13 02 F6 | 	mov	arg01, local01
05ecc     13 15 02 F6 | 	mov	arg02, local05
05ed0     01 16 06 F6 | 	mov	arg03, #1
05ed4     E4 CB B1 FD | 	call	#__system__Mid_S
05ed8     FD 24 02 F6 | 	mov	local04, result1
05edc                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
05edc     11 27 52 F2 | 	cmps	local05, local03 wc
05ee0     9C 00 90 3D |  if_ae	jmp	#LR__0477
05ee4     83 01 00 FF 
05ee8     C4 14 06 F6 | 	mov	arg02, ##@LR__5307
05eec     12 13 02 F6 | 	mov	arg01, local04
05ef0     5C AA B1 FD | 	call	#__system___string_cmp
05ef4     00 FA 55 F2 | 	cmps	result1, #0 wc
05ef8     18 00 90 CD |  if_b	jmp	#LR__0475
05efc     83 01 00 FF 
05f00     C6 14 06 F6 | 	mov	arg02, ##@LR__5308
05f04     12 13 02 F6 | 	mov	arg01, local04
05f08     44 AA B1 FD | 	call	#__system___string_cmp
05f0c     01 FA 55 F2 | 	cmps	result1, #1 wc
05f10     6C 00 90 CD |  if_b	jmp	#LR__0477
05f14                 | LR__0475
05f14     83 01 00 FF 
05f18     C8 14 06 F6 | 	mov	arg02, ##@LR__5309
05f1c     12 13 02 F6 | 	mov	arg01, local04
05f20     2C AA B1 FD | 	call	#__system___string_cmp
05f24     00 FA 55 F2 | 	cmps	result1, #0 wc
05f28     18 00 90 CD |  if_b	jmp	#LR__0476
05f2c     83 01 00 FF 
05f30     CA 14 06 F6 | 	mov	arg02, ##@LR__5310
05f34     12 13 02 F6 | 	mov	arg01, local04
05f38     14 AA B1 FD | 	call	#__system___string_cmp
05f3c     01 FA 55 F2 | 	cmps	result1, #1 wc
05f40     3C 00 90 CD |  if_b	jmp	#LR__0477
05f44                 | LR__0476
05f44     83 01 00 FF 
05f48     CC 2A 06 F6 | 	mov	local07, ##@LR__5311
05f4c     12 13 02 F6 | 	mov	arg01, local04
05f50     15 15 02 F6 | 	mov	arg02, local07
05f54     F8 A9 B1 FD | 	call	#__system___string_cmp
05f58     00 FA 0D F2 | 	cmp	result1, #0 wz
05f5c     20 00 90 AD |  if_e	jmp	#LR__0477
05f60     83 01 00 FF 
05f64     CE 2C 06 F6 | 	mov	local08, ##@LR__5312
05f68     12 13 02 F6 | 	mov	arg01, local04
05f6c     16 15 02 F6 | 	mov	arg02, local08
05f70     DC A9 B1 FD | 	call	#__system___string_cmp
05f74     FD 2E 0A F6 | 	mov	local09, result1 wz
05f78     00 FA 05 56 |  if_ne	mov	result1, #0
05f7c     00 01 90 5D |  if_ne	jmp	#LR__0483
05f80                 | LR__0477
05f80                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
05f80     11 27 0A F2 | 	cmp	local05, local03 wz
05f84     EC 00 90 5D |  if_ne	jmp	#LR__0480
05f88     83 01 00 FF 
05f8c     D0 30 06 F6 | 	mov	local10, ##@LR__5313
05f90     12 13 02 F6 | 	mov	arg01, local04
05f94     18 15 02 F6 | 	mov	arg02, local10
05f98     B4 A9 B1 FD | 	call	#__system___string_cmp
05f9c     FD 32 02 F6 | 	mov	local11, result1
05fa0     00 32 56 F2 | 	cmps	local11, #0 wc
05fa4     1C 00 90 CD |  if_b	jmp	#LR__0478
05fa8     83 01 00 FF 
05fac     D2 14 06 F6 | 	mov	arg02, ##@LR__5314
05fb0     12 13 02 F6 | 	mov	arg01, local04
05fb4     98 A9 B1 FD | 	call	#__system___string_cmp
05fb8     FD 30 02 F6 | 	mov	local10, result1
05fbc     01 30 56 F2 | 	cmps	local10, #1 wc
05fc0     B0 00 90 CD |  if_b	jmp	#LR__0480
05fc4                 | LR__0478
05fc4     83 01 00 FF 
05fc8     D4 14 06 F6 | 	mov	arg02, ##@LR__5315
05fcc     12 13 02 F6 | 	mov	arg01, local04
05fd0     7C A9 B1 FD | 	call	#__system___string_cmp
05fd4     00 FA 55 F2 | 	cmps	result1, #0 wc
05fd8     1C 00 90 CD |  if_b	jmp	#LR__0479
05fdc     83 01 00 FF 
05fe0     D6 2E 06 F6 | 	mov	local09, ##@LR__5316
05fe4     12 13 02 F6 | 	mov	arg01, local04
05fe8     17 15 02 F6 | 	mov	arg02, local09
05fec     60 A9 B1 FD | 	call	#__system___string_cmp
05ff0     01 FA 55 F2 | 	cmps	result1, #1 wc
05ff4     7C 00 90 CD |  if_b	jmp	#LR__0480
05ff8                 | LR__0479
05ff8     83 01 00 FF 
05ffc     D8 2E 06 F6 | 	mov	local09, ##@LR__5317
06000     12 13 02 F6 | 	mov	arg01, local04
06004     17 15 02 F6 | 	mov	arg02, local09
06008     44 A9 B1 FD | 	call	#__system___string_cmp
0600c     00 FA 4D F2 | 	cmps	result1, #0 wz
06010     60 00 90 AD |  if_e	jmp	#LR__0480
06014     83 01 00 FF 
06018     DA 2C 06 F6 | 	mov	local08, ##@LR__5318
0601c     12 13 02 F6 | 	mov	arg01, local04
06020     16 15 02 F6 | 	mov	arg02, local08
06024     28 A9 B1 FD | 	call	#__system___string_cmp
06028     FD 2E 0A F6 | 	mov	local09, result1 wz
0602c     44 00 90 AD |  if_e	jmp	#LR__0480
06030     83 01 00 FF 
06034     DC 34 06 F6 | 	mov	local12, ##@LR__5319
06038     1A 2D 02 F6 | 	mov	local08, local12
0603c     12 13 02 F6 | 	mov	arg01, local04
06040     16 15 02 F6 | 	mov	arg02, local08
06044     08 A9 B1 FD | 	call	#__system___string_cmp
06048     FD 2A 0A F6 | 	mov	local07, result1 wz
0604c     24 00 90 AD |  if_e	jmp	#LR__0480
06050     83 01 00 FF 
06054     DE 36 06 F6 | 	mov	local13, ##@LR__5320
06058     1B 35 02 F6 | 	mov	local12, local13
0605c     12 13 02 F6 | 	mov	arg01, local04
06060     1A 15 02 F6 | 	mov	arg02, local12
06064     E8 A8 B1 FD | 	call	#__system___string_cmp
06068     FD 2C 0A F6 | 	mov	local08, result1 wz
0606c     00 FA 05 56 |  if_ne	mov	result1, #0
06070     0C 00 90 5D |  if_ne	jmp	#LR__0483
06074                 | LR__0480
06074     01 26 06 F1 | 	add	local05, #1
06078     44 FE 9F FD | 	jmp	#LR__0474
0607c                 | LR__0481
0607c                 | LR__0482
0607c                 | ' return true
0607c     01 FA 65 F6 | 	neg	result1, #1
06080                 | LR__0483
06080     A7 F0 03 F6 | 	mov	ptra, fp
06084     B2 00 A0 FD | 	call	#popregs_
06088                 | _isname_ret
06088     2D 00 64 FD | 	ret
0608c                 | 
0608c                 | ' 
0608c                 | ' function isnum(s as string) as boolean
0608c                 | _isnum
0608c     0D 4A 05 F6 | 	mov	COUNT_, #13
06090     A8 00 A0 FD | 	call	#pushregs_
06094     09 1F 02 F6 | 	mov	local01, arg01
06098     00 20 06 F6 | 	mov	local02, #0
0609c     00 22 06 F6 | 	mov	local03, #0
060a0     0F 13 02 F6 | 	mov	arg01, local01
060a4     09 25 02 F6 | 	mov	local04, arg01
060a8     97 06 48 FB | 	callpa	#(@LR__0491-@LR__0490)>>2,fcache_load_ptr_
060ac                 | LR__0490
060ac     12 FB C9 FA | 	rdbyte	result1, local04 wz
060b0     01 24 06 51 |  if_ne	add	local04, #1
060b4     F4 FF 9F 5D |  if_ne	jmp	#LR__0490
060b8                 | LR__0491
060b8     09 25 82 F1 | 	sub	local04, arg01
060bc     12 FB 01 F6 | 	mov	result1, local04
060c0     FD 26 0A F6 | 	mov	local05, result1 wz
060c4     00 FA 05 A6 |  if_e	mov	result1, #0
060c8     8C 02 90 AD |  if_e	jmp	#LR__0502
060cc     0F 13 02 F6 | 	mov	arg01, local01
060d0     01 14 06 F6 | 	mov	arg02, #1
060d4     01 16 06 F6 | 	mov	arg03, #1
060d8     E0 C9 B1 FD | 	call	#__system__Mid_S
060dc     FD 28 02 F6 | 	mov	local06, result1
060e0                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
060e0     83 01 00 FF 
060e4     E0 14 06 F6 | 	mov	arg02, ##@LR__5321
060e8     14 13 02 F6 | 	mov	arg01, local06
060ec     60 A8 B1 FD | 	call	#__system___string_cmp
060f0     00 FA 55 F2 | 	cmps	result1, #0 wc
060f4     18 00 90 CD |  if_b	jmp	#LR__0492
060f8     83 01 00 FF 
060fc     E2 14 06 F6 | 	mov	arg02, ##@LR__5322
06100     14 13 02 F6 | 	mov	arg01, local06
06104     48 A8 B1 FD | 	call	#__system___string_cmp
06108     01 FA 55 F2 | 	cmps	result1, #1 wc
0610c     78 00 90 CD |  if_b	jmp	#LR__0493
06110                 | LR__0492
06110     83 01 00 FF 
06114     E4 14 06 F6 | 	mov	arg02, ##@LR__5323
06118     14 13 02 F6 | 	mov	arg01, local06
0611c     30 A8 B1 FD | 	call	#__system___string_cmp
06120     00 FA 0D F2 | 	cmp	result1, #0 wz
06124     60 00 90 AD |  if_e	jmp	#LR__0493
06128     83 01 00 FF 
0612c     E6 2A 06 F6 | 	mov	local07, ##@LR__5324
06130     14 13 02 F6 | 	mov	arg01, local06
06134     15 15 02 F6 | 	mov	arg02, local07
06138     14 A8 B1 FD | 	call	#__system___string_cmp
0613c     00 FA 0D F2 | 	cmp	result1, #0 wz
06140     44 00 90 AD |  if_e	jmp	#LR__0493
06144     83 01 00 FF 
06148     E8 2C 06 F6 | 	mov	local08, ##@LR__5325
0614c     16 2B 02 F6 | 	mov	local07, local08
06150     14 13 02 F6 | 	mov	arg01, local06
06154     15 15 02 F6 | 	mov	arg02, local07
06158     F4 A7 B1 FD | 	call	#__system___string_cmp
0615c     00 FA 4D F2 | 	cmps	result1, #0 wz
06160     24 00 90 AD |  if_e	jmp	#LR__0493
06164     83 01 00 FF 
06168     EA 2E 06 F6 | 	mov	local09, ##@LR__5326
0616c     17 2D 02 F6 | 	mov	local08, local09
06170     14 13 02 F6 | 	mov	arg01, local06
06174     16 15 02 F6 | 	mov	arg02, local08
06178     D4 A7 B1 FD | 	call	#__system___string_cmp
0617c     FD 2A 0A F6 | 	mov	local07, result1 wz
06180     00 FA 05 56 |  if_ne	mov	result1, #0
06184     D0 01 90 5D |  if_ne	jmp	#LR__0502
06188                 | LR__0493
06188                 | ' if m$="." then ds=1
06188     83 01 00 FF 
0618c     EC 14 06 F6 | 	mov	arg02, ##@LR__5327
06190     14 13 02 F6 | 	mov	arg01, local06
06194     B8 A7 B1 FD | 	call	#__system___string_cmp
06198     00 FA 0D F2 | 	cmp	result1, #0 wz
0619c     01 20 06 A6 |  if_e	mov	local02, #1
061a0                 | ' if l>1 then 
061a0     02 26 56 F2 | 	cmps	local05, #2 wc
061a4     AC 01 90 CD |  if_b	jmp	#LR__0501
061a8                 | '   for i=2 to l
061a8     02 30 06 F6 | 	mov	local10, #2
061ac     13 33 02 F6 | 	mov	local11, local05
061b0     01 32 06 F1 | 	add	local11, #1
061b4                 | LR__0494
061b4     19 31 52 F2 | 	cmps	local10, local11 wc
061b8     98 01 90 3D |  if_ae	jmp	#LR__0500
061bc     0F 13 02 F6 | 	mov	arg01, local01
061c0     18 15 02 F6 | 	mov	arg02, local10
061c4     01 16 06 F6 | 	mov	arg03, #1
061c8     F0 C8 B1 FD | 	call	#__system__Mid_S
061cc     FD 28 02 F6 | 	mov	local06, result1
061d0                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
061d0     83 01 00 FF 
061d4     EE 14 06 F6 | 	mov	arg02, ##@LR__5328
061d8     14 13 02 F6 | 	mov	arg01, local06
061dc     70 A7 B1 FD | 	call	#__system___string_cmp
061e0     00 FA 55 F2 | 	cmps	result1, #0 wc
061e4     18 00 90 CD |  if_b	jmp	#LR__0495
061e8     83 01 00 FF 
061ec     F0 14 06 F6 | 	mov	arg02, ##@LR__5329
061f0     14 13 02 F6 | 	mov	arg01, local06
061f4     58 A7 B1 FD | 	call	#__system___string_cmp
061f8     01 FA 55 F2 | 	cmps	result1, #1 wc
061fc     98 00 90 CD |  if_b	jmp	#LR__0496
06200                 | LR__0495
06200     83 01 00 FF 
06204     F2 14 06 F6 | 	mov	arg02, ##@LR__5330
06208     14 13 02 F6 | 	mov	arg01, local06
0620c     40 A7 B1 FD | 	call	#__system___string_cmp
06210     00 FA 0D F2 | 	cmp	result1, #0 wz
06214     80 00 90 AD |  if_e	jmp	#LR__0496
06218     83 01 00 FF 
0621c     F4 2A 06 F6 | 	mov	local07, ##@LR__5331
06220     14 13 02 F6 | 	mov	arg01, local06
06224     15 15 02 F6 | 	mov	arg02, local07
06228     24 A7 B1 FD | 	call	#__system___string_cmp
0622c     00 FA 4D F2 | 	cmps	result1, #0 wz
06230     64 00 90 AD |  if_e	jmp	#LR__0496
06234     83 01 00 FF 
06238     F6 2C 06 F6 | 	mov	local08, ##@LR__5332
0623c     16 2B 02 F6 | 	mov	local07, local08
06240     14 13 02 F6 | 	mov	arg01, local06
06244     15 15 02 F6 | 	mov	arg02, local07
06248     04 A7 B1 FD | 	call	#__system___string_cmp
0624c     FD 34 0A F6 | 	mov	local12, result1 wz
06250     44 00 90 AD |  if_e	jmp	#LR__0496
06254     83 01 00 FF 
06258     F8 2E 06 F6 | 	mov	local09, ##@LR__5333
0625c     17 2D 02 F6 | 	mov	local08, local09
06260     14 13 02 F6 | 	mov	arg01, local06
06264     16 15 02 F6 | 	mov	arg02, local08
06268     E4 A6 B1 FD | 	call	#__system___string_cmp
0626c     FD 2A 0A F6 | 	mov	local07, result1 wz
06270     24 00 90 AD |  if_e	jmp	#LR__0496
06274     83 01 00 FF 
06278     FA 36 06 F6 | 	mov	local13, ##@LR__5334
0627c     1B 2F 02 F6 | 	mov	local09, local13
06280     14 13 02 F6 | 	mov	arg01, local06
06284     17 15 02 F6 | 	mov	arg02, local09
06288     C4 A6 B1 FD | 	call	#__system___string_cmp
0628c     FD 2C 0A F6 | 	mov	local08, result1 wz
06290     00 FA 05 56 |  if_ne	mov	result1, #0
06294     C0 00 90 5D |  if_ne	jmp	#LR__0502
06298                 | LR__0496
06298                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06298     83 01 00 FF 
0629c     FC 14 06 F6 | 	mov	arg02, ##@LR__5335
062a0     14 13 02 F6 | 	mov	arg01, local06
062a4     A8 A6 B1 FD | 	call	#__system___string_cmp
062a8     00 FA 0D F2 | 	cmp	result1, #0 wz
062ac     38 00 90 5D |  if_ne	jmp	#LR__0497
062b0     18 15 02 F6 | 	mov	arg02, local10
062b4     01 14 86 F1 | 	sub	arg02, #1
062b8     0F 13 02 F6 | 	mov	arg01, local01
062bc     01 16 06 F6 | 	mov	arg03, #1
062c0     F8 C7 B1 FD | 	call	#__system__Mid_S
062c4     FD 12 02 F6 | 	mov	arg01, result1
062c8     E8 C9 B1 FD | 	call	#__system__LCase_S
062cc     FD 12 02 F6 | 	mov	arg01, result1
062d0     83 01 00 FF 
062d4     FE 14 06 F6 | 	mov	arg02, ##@LR__5336
062d8     74 A6 B1 FD | 	call	#__system___string_cmp
062dc     00 FA 0D F2 | 	cmp	result1, #0 wz
062e0     00 FA 05 56 |  if_ne	mov	result1, #0
062e4     70 00 90 5D |  if_ne	jmp	#LR__0502
062e8                 | LR__0497
062e8                 | '     if m$="." then ds+=1: if ds>1 then return false
062e8     83 01 00 FF 
062ec     00 15 06 F6 | 	mov	arg02, ##@LR__5337
062f0     14 13 02 F6 | 	mov	arg01, local06
062f4     58 A6 B1 FD | 	call	#__system___string_cmp
062f8     00 FA 0D F2 | 	cmp	result1, #0 wz
062fc     01 20 06 A1 |  if_e	add	local02, #1
06300     02 20 56 A2 |  if_e	cmps	local02, #2 wc
06304     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06308     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0502
0630c                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
0630c     83 01 00 FF 
06310     02 15 06 F6 | 	mov	arg02, ##@LR__5338
06314     14 13 02 F6 | 	mov	arg01, local06
06318     34 A6 B1 FD | 	call	#__system___string_cmp
0631c     00 FA 4D F2 | 	cmps	result1, #0 wz
06320     18 00 90 AD |  if_e	jmp	#LR__0498
06324     83 01 00 FF 
06328     04 15 06 F6 | 	mov	arg02, ##@LR__5339
0632c     14 13 02 F6 | 	mov	arg01, local06
06330     1C A6 B1 FD | 	call	#__system___string_cmp
06334     00 FA 4D F2 | 	cmps	result1, #0 wz
06338     10 00 90 5D |  if_ne	jmp	#LR__0499
0633c                 | LR__0498
0633c     01 22 06 F1 | 	add	local03, #1
06340     02 22 56 F2 | 	cmps	local03, #2 wc
06344     00 FA 05 36 |  if_ae	mov	result1, #0
06348     0C 00 90 3D |  if_ae	jmp	#LR__0502
0634c                 | LR__0499
0634c     01 30 06 F1 | 	add	local10, #1
06350     60 FE 9F FD | 	jmp	#LR__0494
06354                 | LR__0500
06354                 | LR__0501
06354                 | ' return true
06354     01 FA 65 F6 | 	neg	result1, #1
06358                 | LR__0502
06358     A7 F0 03 F6 | 	mov	ptra, fp
0635c     B2 00 A0 FD | 	call	#popregs_
06360                 | _isnum_ret
06360     2D 00 64 FD | 	ret
06364                 | 
06364                 | '   
06364                 | ' function isint(s as string) as boolean
06364                 | _isint
06364     05 4A 05 F6 | 	mov	COUNT_, #5
06368     A8 00 A0 FD | 	call	#pushregs_
0636c     09 1F 02 F6 | 	mov	local01, arg01
06370     09 21 02 F6 | 	mov	local02, arg01
06374     97 06 48 FB | 	callpa	#(@LR__0511-@LR__0510)>>2,fcache_load_ptr_
06378                 | LR__0510
06378     10 FB C9 FA | 	rdbyte	result1, local02 wz
0637c     01 20 06 51 |  if_ne	add	local02, #1
06380     F4 FF 9F 5D |  if_ne	jmp	#LR__0510
06384                 | LR__0511
06384     09 21 82 F1 | 	sub	local02, arg01
06388     10 FB 01 F6 | 	mov	result1, local02
0638c     FD 20 0A F6 | 	mov	local02, result1 wz
06390     00 FA 05 A6 |  if_e	mov	result1, #0
06394     18 01 90 AD |  if_e	jmp	#LR__0519
06398     0F 13 02 F6 | 	mov	arg01, local01
0639c     01 14 06 F6 | 	mov	arg02, #1
063a0     01 16 06 F6 | 	mov	arg03, #1
063a4     14 C7 B1 FD | 	call	#__system__Mid_S
063a8     FD 22 02 F6 | 	mov	local03, result1
063ac                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
063ac     83 01 00 FF 
063b0     06 15 06 F6 | 	mov	arg02, ##@LR__5340
063b4     11 13 02 F6 | 	mov	arg01, local03
063b8     94 A5 B1 FD | 	call	#__system___string_cmp
063bc     00 FA 55 F2 | 	cmps	result1, #0 wc
063c0     18 00 90 CD |  if_b	jmp	#LR__0512
063c4     83 01 00 FF 
063c8     08 15 06 F6 | 	mov	arg02, ##@LR__5341
063cc     11 13 02 F6 | 	mov	arg01, local03
063d0     7C A5 B1 FD | 	call	#__system___string_cmp
063d4     01 FA 55 F2 | 	cmps	result1, #1 wc
063d8     4C 00 90 CD |  if_b	jmp	#LR__0513
063dc                 | LR__0512
063dc     83 01 00 FF 
063e0     0A 15 06 F6 | 	mov	arg02, ##@LR__5342
063e4     11 13 02 F6 | 	mov	arg01, local03
063e8     64 A5 B1 FD | 	call	#__system___string_cmp
063ec     00 FA 0D F2 | 	cmp	result1, #0 wz
063f0     34 00 90 AD |  if_e	jmp	#LR__0513
063f4     83 01 00 FF 
063f8     0C 15 06 F6 | 	mov	arg02, ##@LR__5343
063fc     11 13 02 F6 | 	mov	arg01, local03
06400     4C A5 B1 FD | 	call	#__system___string_cmp
06404     00 FA 0D F2 | 	cmp	result1, #0 wz
06408     1C 00 90 AD |  if_e	jmp	#LR__0513
0640c     83 01 00 FF 
06410     0E 15 06 F6 | 	mov	arg02, ##@LR__5344
06414     11 13 02 F6 | 	mov	arg01, local03
06418     34 A5 B1 FD | 	call	#__system___string_cmp
0641c     00 FA 0D F2 | 	cmp	result1, #0 wz
06420     00 FA 05 56 |  if_ne	mov	result1, #0
06424     88 00 90 5D |  if_ne	jmp	#LR__0519
06428                 | LR__0513
06428                 | ' 
06428                 | ' if l>1 then 
06428     02 20 56 F2 | 	cmps	local02, #2 wc
0642c     7C 00 90 CD |  if_b	jmp	#LR__0518
06430                 | '   for i=2 to l
06430     02 24 06 F6 | 	mov	local04, #2
06434     10 27 02 F6 | 	mov	local05, local02
06438     01 26 06 F1 | 	add	local05, #1
0643c                 | LR__0514
0643c     13 25 52 F2 | 	cmps	local04, local05 wc
06440     68 00 90 3D |  if_ae	jmp	#LR__0517
06444     0F 13 02 F6 | 	mov	arg01, local01
06448     12 15 02 F6 | 	mov	arg02, local04
0644c     01 16 06 F6 | 	mov	arg03, #1
06450     68 C6 B1 FD | 	call	#__system__Mid_S
06454     FD 22 02 F6 | 	mov	local03, result1
06458                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06458     83 01 00 FF 
0645c     10 15 06 F6 | 	mov	arg02, ##@LR__5345
06460     11 13 02 F6 | 	mov	arg01, local03
06464     E8 A4 B1 FD | 	call	#__system___string_cmp
06468     00 FA 55 F2 | 	cmps	result1, #0 wc
0646c     18 00 90 CD |  if_b	jmp	#LR__0515
06470     83 01 00 FF 
06474     12 15 06 F6 | 	mov	arg02, ##@LR__5346
06478     11 13 02 F6 | 	mov	arg01, local03
0647c     D0 A4 B1 FD | 	call	#__system___string_cmp
06480     01 FA 55 F2 | 	cmps	result1, #1 wc
06484     1C 00 90 CD |  if_b	jmp	#LR__0516
06488                 | LR__0515
06488     83 01 00 FF 
0648c     14 15 06 F6 | 	mov	arg02, ##@LR__5347
06490     11 13 02 F6 | 	mov	arg01, local03
06494     B8 A4 B1 FD | 	call	#__system___string_cmp
06498     00 FA 0D F2 | 	cmp	result1, #0 wz
0649c     00 FA 05 56 |  if_ne	mov	result1, #0
064a0     0C 00 90 5D |  if_ne	jmp	#LR__0519
064a4                 | LR__0516
064a4     01 24 06 F1 | 	add	local04, #1
064a8     90 FF 9F FD | 	jmp	#LR__0514
064ac                 | LR__0517
064ac                 | LR__0518
064ac                 | ' return true
064ac     01 FA 65 F6 | 	neg	result1, #1
064b0                 | LR__0519
064b0     A7 F0 03 F6 | 	mov	ptra, fp
064b4     B2 00 A0 FD | 	call	#popregs_
064b8                 | _isint_ret
064b8     2D 00 64 FD | 	ret
064bc                 | 
064bc                 | ' 
064bc                 | ' function isdec(s as string) as boolean
064bc                 | _isdec
064bc     05 4A 05 F6 | 	mov	COUNT_, #5
064c0     A8 00 A0 FD | 	call	#pushregs_
064c4     09 1F 02 F6 | 	mov	local01, arg01
064c8     09 21 02 F6 | 	mov	local02, arg01
064cc     97 06 48 FB | 	callpa	#(@LR__0521-@LR__0520)>>2,fcache_load_ptr_
064d0                 | LR__0520
064d0     10 FB C9 FA | 	rdbyte	result1, local02 wz
064d4     01 20 06 51 |  if_ne	add	local02, #1
064d8     F4 FF 9F 5D |  if_ne	jmp	#LR__0520
064dc                 | LR__0521
064dc     09 21 82 F1 | 	sub	local02, arg01
064e0     10 FB 01 F6 | 	mov	result1, local02
064e4     FD 20 0A F6 | 	mov	local02, result1 wz
064e8     00 FA 05 A6 |  if_e	mov	result1, #0
064ec     80 00 90 AD |  if_e	jmp	#LR__0526
064f0                 | ' for i=1 to l
064f0     01 22 06 F6 | 	mov	local03, #1
064f4     10 25 02 F6 | 	mov	local04, local02
064f8     01 24 06 F1 | 	add	local04, #1
064fc                 | LR__0522
064fc     12 23 52 F2 | 	cmps	local03, local04 wc
06500     68 00 90 3D |  if_ae	jmp	#LR__0525
06504     0F 13 02 F6 | 	mov	arg01, local01
06508     11 15 02 F6 | 	mov	arg02, local03
0650c     01 16 06 F6 | 	mov	arg03, #1
06510     A8 C5 B1 FD | 	call	#__system__Mid_S
06514     FD 26 02 F6 | 	mov	local05, result1
06518                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06518     83 01 00 FF 
0651c     16 15 06 F6 | 	mov	arg02, ##@LR__5348
06520     13 13 02 F6 | 	mov	arg01, local05
06524     28 A4 B1 FD | 	call	#__system___string_cmp
06528     00 FA 55 F2 | 	cmps	result1, #0 wc
0652c     18 00 90 CD |  if_b	jmp	#LR__0523
06530     83 01 00 FF 
06534     18 15 06 F6 | 	mov	arg02, ##@LR__5349
06538     13 13 02 F6 | 	mov	arg01, local05
0653c     10 A4 B1 FD | 	call	#__system___string_cmp
06540     01 FA 55 F2 | 	cmps	result1, #1 wc
06544     1C 00 90 CD |  if_b	jmp	#LR__0524
06548                 | LR__0523
06548     83 01 00 FF 
0654c     1A 15 06 F6 | 	mov	arg02, ##@LR__5350
06550     13 13 02 F6 | 	mov	arg01, local05
06554     F8 A3 B1 FD | 	call	#__system___string_cmp
06558     00 FA 0D F2 | 	cmp	result1, #0 wz
0655c     00 FA 05 56 |  if_ne	mov	result1, #0
06560     0C 00 90 5D |  if_ne	jmp	#LR__0526
06564                 | LR__0524
06564     01 22 06 F1 | 	add	local03, #1
06568     90 FF 9F FD | 	jmp	#LR__0522
0656c                 | LR__0525
0656c                 | ' return true
0656c     01 FA 65 F6 | 	neg	result1, #1
06570                 | LR__0526
06570     A7 F0 03 F6 | 	mov	ptra, fp
06574     B2 00 A0 FD | 	call	#popregs_
06578                 | _isdec_ret
06578     2D 00 64 FD | 	ret
0657c                 | 
0657c                 | ' 
0657c                 | ' function isstring(s as string) as boolean
0657c                 | _isstring
0657c     01 4A 05 F6 | 	mov	COUNT_, #1
06580     A8 00 A0 FD | 	call	#pushregs_
06584                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
06584     09 1F 02 F6 | 	mov	local01, arg01
06588     01 14 06 F6 | 	mov	arg02, #1
0658c     14 C4 B1 FD | 	call	#__system__Left_S
06590     FD 12 02 F6 | 	mov	arg01, result1
06594     83 01 00 FF 
06598     1C 15 06 F6 | 	mov	arg02, ##@LR__5351
0659c     B0 A3 B1 FD | 	call	#__system___string_cmp
065a0     00 FA 4D F2 | 	cmps	result1, #0 wz
065a4     28 00 90 5D |  if_ne	jmp	#LR__0530
065a8     0F 13 02 F6 | 	mov	arg01, local01
065ac     01 14 06 F6 | 	mov	arg02, #1
065b0     78 C4 B1 FD | 	call	#__system__Right_S
065b4     FD 12 02 F6 | 	mov	arg01, result1
065b8     83 01 00 FF 
065bc     1E 15 06 F6 | 	mov	arg02, ##@LR__5352
065c0     8C A3 B1 FD | 	call	#__system___string_cmp
065c4     00 FA 4D F2 | 	cmps	result1, #0 wz
065c8     01 FA 65 A6 |  if_e	neg	result1, #1
065cc     04 00 90 AD |  if_e	jmp	#LR__0531
065d0                 | LR__0530
065d0     00 FA 05 F6 | 	mov	result1, #0
065d4                 | LR__0531
065d4     A7 F0 03 F6 | 	mov	ptra, fp
065d8     B2 00 A0 FD | 	call	#popregs_
065dc                 | _isstring_ret
065dc     2D 00 64 FD | 	ret
065e0                 | 
065e0                 | ' 
065e0                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
065e0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
065e0                 | ' 
065e0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
065e0                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
065e0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
065e0                 | ' 
065e0                 | ' '----- delete a line from a program
065e0                 | ' 
065e0                 | ' function deleteline(aline as ulong) as integer
065e0                 | _deleteline
065e0     03 4A 05 F6 | 	mov	COUNT_, #3
065e4     A8 00 A0 FD | 	call	#pushregs_
065e8     2C F0 07 F1 | 	add	ptra, #44
065ec     04 4E 05 F1 | 	add	fp, #4
065f0     A7 12 62 FC | 	wrlong	arg01, fp
065f4     4A 00 00 FF 
065f8     84 E4 05 F1 | 	add	objptr, ##38020
065fc     F2 1E 02 FB | 	rdlong	local01, objptr
06600     0C 4E 05 F1 | 	add	fp, #12
06604     A7 1E 62 FC | 	wrlong	local01, fp
06608     10 4E 85 F1 | 	sub	fp, #16
0660c                 | ' 
0660c                 | ' 
0660c                 | ' searchptr=programstart
0660c                 | ' 
0660c                 | ' do
0660c     3E 00 00 FF 
06610     B8 E5 85 F1 | 	sub	objptr, ##32184
06614                 | LR__0540
06614     14 4E 05 F1 | 	add	fp, #20
06618     A7 12 02 F6 | 	mov	arg01, fp
0661c     04 4E 85 F1 | 	sub	fp, #4
06620     A7 14 02 FB | 	rdlong	arg02, fp
06624     10 4E 85 F1 | 	sub	fp, #16
06628     18 16 06 F6 | 	mov	arg03, #24
0662c     B8 96 B1 FD | 	call	#_psram_spin2_read1
06630     10 4E 05 F1 | 	add	fp, #16
06634     A7 1E 02 FB | 	rdlong	local01, fp
06638     08 4E 85 F1 | 	sub	fp, #8
0663c     A7 1E 62 FC | 	wrlong	local01, fp
06640     20 4E 05 F1 | 	add	fp, #32
06644     A7 1E 02 FB | 	rdlong	local01, fp
06648     18 4E 85 F1 | 	sub	fp, #24
0664c     A7 1E 62 FC | 	wrlong	local01, fp
06650     04 4E 05 F1 | 	add	fp, #4
06654     A7 1E 02 FB | 	rdlong	local01, fp
06658     10 4E 85 F1 | 	sub	fp, #16
0665c     A7 16 02 FB | 	rdlong	arg03, fp
06660     04 4E 85 F1 | 	sub	fp, #4
06664     0B 1F 12 F2 | 	cmp	local01, arg03 wc
06668     28 4E 05 C1 |  if_b	add	fp, #40
0666c     A7 20 02 CB |  if_b	rdlong	local02, fp
06670     28 4E 85 C1 |  if_b	sub	fp, #40
06674     FF FF 3F CF 
06678     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
0667c     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0540
06680     0B 00 00 FF 
06684     CC E4 85 F1 | 	sub	objptr, ##5836
06688                 | ' 
06688                 | ' 
06688                 | ' if header(0)<>aline then return -1
06688     14 4E 05 F1 | 	add	fp, #20
0668c     A7 1E 02 FB | 	rdlong	local01, fp
06690     10 4E 85 F1 | 	sub	fp, #16
06694     A7 22 02 FB | 	rdlong	local03, fp
06698     04 4E 85 F1 | 	sub	fp, #4
0669c     11 1F 0A F2 | 	cmp	local01, local03 wz
066a0     01 FA 65 56 |  if_ne	neg	result1, #1
066a4     D8 02 90 5D |  if_ne	jmp	#LR__0546
066a8     08 4E 05 F1 | 	add	fp, #8
066ac     A7 12 02 FB | 	rdlong	arg01, fp
066b0     08 4E 85 F1 | 	sub	fp, #8
066b4     01 14 66 F6 | 	neg	arg02, #1
066b8     6C 70 B1 FD | 	call	#_pslpoke
066bc                 | ' 
066bc                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
066bc                 | ' 
066bc                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  ' this is one and only line in the program
066bc     28 4E 05 F1 | 	add	fp, #40
066c0     A7 1E 02 FB | 	rdlong	local01, fp
066c4     28 4E 85 F1 | 	sub	fp, #40
066c8     FF FF 3F FF 
066cc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
066d0     24 4E 05 A1 |  if_e	add	fp, #36
066d4     A7 22 02 AB |  if_e	rdlong	local03, fp
066d8     24 4E 85 A1 |  if_e	sub	fp, #36
066dc     FF FF 7F AF 
066e0     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
066e4     88 00 90 5D |  if_ne	jmp	#LR__0541
066e8     4A 00 00 FF 
066ec     84 E4 05 F1 | 	add	objptr, ##38020
066f0     00 04 80 FF 
066f4     F2 00 68 FC | 	wrlong	##524288, objptr
066f8     07 00 00 FF 
066fc     28 E4 85 F1 | 	sub	objptr, ##3624
06700     00 04 80 FF 
06704     F2 00 68 FC | 	wrlong	##524288, objptr
06708     07 00 00 FF 
0670c     2C E4 05 F1 | 	add	objptr, ##3628
06710     F2 00 68 FC | 	wrlong	#0, objptr
06714     04 E4 05 F1 | 	add	objptr, #4
06718     FF FF FF FF 
0671c     F2 FE 6B FC | 	wrlong	##-1, objptr
06720     4A 00 00 FF 
06724     8C E4 85 F1 | 	sub	objptr, ##38028
06728     00 12 06 F6 | 	mov	arg01, #0
0672c     01 14 66 F6 | 	neg	arg02, #1
06730     F4 6F B1 FD | 	call	#_pslpoke
06734     10 12 06 F6 | 	mov	arg01, #16
06738     01 14 66 F6 | 	neg	arg02, #1
0673c     E8 6F B1 FD | 	call	#_pslpoke
06740     14 12 06 F6 | 	mov	arg01, #20
06744     1E 14 CE F9 | 	bmask	arg02, #30
06748     DC 6F B1 FD | 	call	#_pslpoke
0674c     58 00 00 FF 
06750     BC E4 05 F1 | 	add	objptr, ##45244
06754     00 04 80 FF 
06758     F2 00 68 FC | 	wrlong	##524288, objptr
0675c     04 E4 05 F1 | 	add	objptr, #4
06760     00 04 80 FF 
06764     F2 00 68 FC | 	wrlong	##524288, objptr
06768     58 00 00 FF 
0676c     C0 E4 85 F1 | 	sub	objptr, ##45248
06770                 | LR__0541
06770                 | ' 
06770                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
06770     28 4E 05 F1 | 	add	fp, #40
06774     A7 1E 02 FB | 	rdlong	local01, fp
06778     28 4E 85 F1 | 	sub	fp, #40
0677c     FF FF 3F FF 
06780     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
06784     74 00 90 5D |  if_ne	jmp	#LR__0542
06788     24 4E 05 F1 | 	add	fp, #36
0678c     A7 22 02 FB | 	rdlong	local03, fp
06790     24 4E 85 F1 | 	sub	fp, #36
06794     FF FF 7F FF 
06798     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0679c     5C 00 90 AD |  if_e	jmp	#LR__0542
067a0     24 4E 05 F1 | 	add	fp, #36
067a4     A7 12 02 FB | 	rdlong	arg01, fp
067a8     24 4E 85 F1 | 	sub	fp, #36
067ac     14 12 06 F1 | 	add	arg01, #20
067b0     1E 14 CE F9 | 	bmask	arg02, #30
067b4     70 6F B1 FD | 	call	#_pslpoke
067b8     24 4E 05 F1 | 	add	fp, #36
067bc     A7 1E 02 FB | 	rdlong	local01, fp
067c0     4A 00 00 FF 
067c4     8C E4 05 F1 | 	add	objptr, ##38028
067c8     F2 1E 62 FC | 	wrlong	local01, objptr
067cc     4A 00 00 FF 
067d0     8C E4 85 F1 | 	sub	objptr, ##38028
067d4     A7 12 02 FB | 	rdlong	arg01, fp
067d8     24 4E 85 F1 | 	sub	fp, #36
067dc     78 70 B1 FD | 	call	#_pslpeek
067e0     4A 00 00 FF 
067e4     88 E4 05 F1 | 	add	objptr, ##38024
067e8     F2 FA 61 FC | 	wrlong	result1, objptr
067ec     4A 00 00 FF 
067f0     88 E4 85 F1 | 	sub	objptr, ##38024
067f4                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
067f4                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
067f4                 | '   lastline=pslpeek(header(4))
067f4                 | '   return 0
067f4     00 FA 05 F6 | 	mov	result1, #0
067f8     84 01 90 FD | 	jmp	#LR__0546
067fc                 | LR__0542
067fc                 | ' 
067fc                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
067fc     28 4E 05 F1 | 	add	fp, #40
06800     A7 1E 02 FB | 	rdlong	local01, fp
06804     28 4E 85 F1 | 	sub	fp, #40
06808     FF FF 3F FF 
0680c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
06810     58 00 90 AD |  if_e	jmp	#LR__0543
06814     24 4E 05 F1 | 	add	fp, #36
06818     A7 22 02 FB | 	rdlong	local03, fp
0681c     24 4E 85 F1 | 	sub	fp, #36
06820     FF FF 7F FF 
06824     FF 23 0E F2 | 	cmp	local03, ##-1 wz
06828     40 00 90 5D |  if_ne	jmp	#LR__0543
0682c     28 4E 05 F1 | 	add	fp, #40
06830     A7 12 02 FB | 	rdlong	arg01, fp
06834     28 4E 85 F1 | 	sub	fp, #40
06838     10 12 06 F1 | 	add	arg01, #16
0683c     01 14 66 F6 | 	neg	arg02, #1
06840     E4 6E B1 FD | 	call	#_pslpoke
06844     28 4E 05 F1 | 	add	fp, #40
06848     A7 1E 02 FB | 	rdlong	local01, fp
0684c     28 4E 85 F1 | 	sub	fp, #40
06850     4A 00 00 FF 
06854     84 E4 05 F1 | 	add	objptr, ##38020
06858     F2 1E 62 FC | 	wrlong	local01, objptr
0685c     4A 00 00 FF 
06860     84 E4 85 F1 | 	sub	objptr, ##38020
06864                 | ' '   print "deleted first line"
06864                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
06864                 | '   programstart=header(5) ' adjust the program start to point on the first new line
06864                 | '   return 0
06864     00 FA 05 F6 | 	mov	result1, #0
06868     14 01 90 FD | 	jmp	#LR__0546
0686c                 | LR__0543
0686c                 | ' 
0686c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
0686c     28 4E 05 F1 | 	add	fp, #40
06870     A7 1E 02 FB | 	rdlong	local01, fp
06874     28 4E 85 F1 | 	sub	fp, #40
06878     FF FF 3F FF 
0687c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
06880     24 4E 05 51 |  if_ne	add	fp, #36
06884     A7 22 02 5B |  if_ne	rdlong	local03, fp
06888     24 4E 85 51 |  if_ne	sub	fp, #36
0688c     FF FF 7F 5F 
06890     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
06894     40 00 90 AD |  if_e	jmp	#LR__0544
06898     28 4E 05 F1 | 	add	fp, #40
0689c     A7 12 02 FB | 	rdlong	arg01, fp
068a0     10 12 06 F1 | 	add	arg01, #16
068a4     04 4E 85 F1 | 	sub	fp, #4
068a8     A7 14 02 FB | 	rdlong	arg02, fp
068ac     24 4E 85 F1 | 	sub	fp, #36
068b0     74 6E B1 FD | 	call	#_pslpoke
068b4     24 4E 05 F1 | 	add	fp, #36
068b8     A7 12 02 FB | 	rdlong	arg01, fp
068bc     14 12 06 F1 | 	add	arg01, #20
068c0     04 4E 05 F1 | 	add	fp, #4
068c4     A7 14 02 FB | 	rdlong	arg02, fp
068c8     28 4E 85 F1 | 	sub	fp, #40
068cc     58 6E B1 FD | 	call	#_pslpoke
068d0                 | '    pslpoke(header(5)+16,header(4))  
068d0                 | '    pslpoke(header(4)+20, header(5))
068d0                 | '    return 0
068d0     00 FA 05 F6 | 	mov	result1, #0
068d4     A8 00 90 FD | 	jmp	#LR__0546
068d8                 | LR__0544
068d8     10 4E 05 F1 | 	add	fp, #16
068dc     A7 1E 02 FB | 	rdlong	local01, fp
068e0     08 4E 85 F1 | 	sub	fp, #8
068e4     A7 1E 62 FC | 	wrlong	local01, fp
068e8     4A 00 00 FF 
068ec     84 E4 05 F1 | 	add	objptr, ##38020
068f0     F2 1E 02 FB | 	rdlong	local01, objptr
068f4     08 4E 05 F1 | 	add	fp, #8
068f8     A7 1E 62 FC | 	wrlong	local01, fp
068fc     10 4E 85 F1 | 	sub	fp, #16
06900                 | ' 
06900                 | ' 
06900                 | ' 
06900                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
06900                 | ' 
06900                 | ' lineptr2=searchptr
06900                 | ' searchptr=programstart
06900                 | ' 
06900                 | ' do
06900     3E 00 00 FF 
06904     B8 E5 85 F1 | 	sub	objptr, ##32184
06908                 | LR__0545
06908     14 4E 05 F1 | 	add	fp, #20
0690c     A7 12 02 F6 | 	mov	arg01, fp
06910     04 4E 85 F1 | 	sub	fp, #4
06914     A7 14 02 FB | 	rdlong	arg02, fp
06918     10 4E 85 F1 | 	sub	fp, #16
0691c     18 16 06 F6 | 	mov	arg03, #24
06920     C4 93 B1 FD | 	call	#_psram_spin2_read1
06924     10 4E 05 F1 | 	add	fp, #16
06928     A7 1E 02 FB | 	rdlong	local01, fp
0692c     08 4E 85 F1 | 	sub	fp, #8
06930     A7 1E 62 FC | 	wrlong	local01, fp
06934     20 4E 05 F1 | 	add	fp, #32
06938     A7 1E 02 FB | 	rdlong	local01, fp
0693c     18 4E 85 F1 | 	sub	fp, #24
06940     A7 1E 62 FC | 	wrlong	local01, fp
06944     04 4E 05 F1 | 	add	fp, #4
06948     A7 1E 02 FB | 	rdlong	local01, fp
0694c     10 4E 85 F1 | 	sub	fp, #16
06950     A7 22 02 FB | 	rdlong	local03, fp
06954     04 4E 85 F1 | 	sub	fp, #4
06958     11 1F 12 F2 | 	cmp	local01, local03 wc
0695c     28 4E 05 C1 |  if_b	add	fp, #40
06960     A7 20 02 CB |  if_b	rdlong	local02, fp
06964     28 4E 85 C1 |  if_b	sub	fp, #40
06968     FF FF 3F CF 
0696c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06970     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0545
06974     0B 00 00 FF 
06978     CC E4 85 F1 | 	sub	objptr, ##5836
0697c     00 FA 05 F6 | 	mov	result1, #0
06980                 | LR__0546
06980     A7 F0 03 F6 | 	mov	ptra, fp
06984     B2 00 A0 FD | 	call	#popregs_
06988                 | _deleteline_ret
06988     2D 00 64 FD | 	ret
0698c                 | 
0698c                 | ' 
0698c                 | ' sub save_line
0698c                 | _save_line
0698c     03 4A 05 F6 | 	mov	COUNT_, #3
06990     A8 00 A0 FD | 	call	#pushregs_
06994     4A 00 00 FF 
06998     7C E4 05 F1 | 	add	objptr, ##38012
0699c     F2 16 02 FB | 	rdlong	arg03, objptr
069a0     01 16 06 F1 | 	add	arg03, #1
069a4     05 00 00 FF 
069a8     18 E4 85 F1 | 	sub	objptr, ##2584
069ac     F2 14 02 FB | 	rdlong	arg02, objptr
069b0     0B 15 02 FD | 	qmul	arg02, arg03
069b4     0E 00 00 FF 
069b8     44 E4 85 F1 | 	sub	objptr, ##7236
069bc     F2 12 02 FB | 	rdlong	arg01, objptr
069c0     37 00 00 FF 
069c4     20 E4 85 F1 | 	sub	objptr, ##28192
069c8     09 1F 02 F6 | 	mov	local01, arg01
069cc     18 20 62 FD | 	getqx	local02
069d0     97 06 48 FB | 	callpa	#(@LR__0551-@LR__0550)>>2,fcache_load_ptr_
069d4                 | LR__0550
069d4     0F FB C9 FA | 	rdbyte	result1, local01 wz
069d8     01 1E 06 51 |  if_ne	add	local01, #1
069dc     F4 FF 9F 5D |  if_ne	jmp	#LR__0550
069e0                 | LR__0551
069e0     09 1F 82 F1 | 	sub	local01, arg01
069e4     03 1E CE F7 | 	test	local01, #3 wz
069e8     02 1E 46 50 |  if_ne	shr	local01, #2
069ec     01 1E 06 51 |  if_ne	add	local01, #1
069f0     02 1E 66 50 |  if_ne	shl	local01, #2
069f4     10 23 02 F6 | 	mov	local03, local02
069f8     0F 23 02 F1 | 	add	local03, local01
069fc     43 00 00 FF 
06a00     5C E4 05 F1 | 	add	objptr, ##34396
06a04     F2 16 02 FB | 	rdlong	arg03, objptr
06a08     10 17 02 F1 | 	add	arg03, local02
06a0c     04 00 00 FF 
06a10     28 E4 05 F1 | 	add	objptr, ##2088
06a14     F2 16 62 FC | 	wrlong	arg03, objptr
06a18     04 E4 05 F1 | 	add	objptr, #4
06a1c     F2 1E 62 FC | 	wrlong	local01, objptr
06a20     0C E4 85 F1 | 	sub	objptr, #12
06a24     F2 12 02 F6 | 	mov	arg01, objptr
06a28     04 00 00 FF 
06a2c     20 E4 85 F1 | 	sub	objptr, ##2080
06a30     F2 14 02 FB | 	rdlong	arg02, objptr
06a34     10 17 02 F6 | 	mov	arg03, local02
06a38     37 00 00 FF 
06a3c     90 E5 85 F1 | 	sub	objptr, ##28560
06a40     40 93 B1 FD | 	call	#_psram_spin2_write
06a44     2B 00 00 FF 
06a48     54 E5 05 F1 | 	add	objptr, ##22356
06a4c     F2 12 02 FB | 	rdlong	arg01, objptr
06a50     0C 00 00 FF 
06a54     3C E4 05 F1 | 	add	objptr, ##6204
06a58     F2 14 02 FB | 	rdlong	arg02, objptr
06a5c     10 15 02 F1 | 	add	arg02, local02
06a60     0F 17 02 F6 | 	mov	arg03, local01
06a64     37 00 00 FF 
06a68     90 E5 85 F1 | 	sub	objptr, ##28560
06a6c     14 93 B1 FD | 	call	#_psram_spin2_write
06a70     37 00 00 FF 
06a74     90 E5 05 F1 | 	add	objptr, ##28560
06a78     F2 1E 02 FB | 	rdlong	local01, objptr
06a7c     11 1F 02 F1 | 	add	local01, local03
06a80     F2 1E 62 FC | 	wrlong	local01, objptr
06a84     43 00 00 FF 
06a88     5C E4 85 F1 | 	sub	objptr, ##34396
06a8c     A7 F0 03 F6 | 	mov	ptra, fp
06a90     B2 00 A0 FD | 	call	#popregs_
06a94                 | _save_line_ret
06a94     2D 00 64 FD | 	ret
06a98                 | 
06a98                 | ' 
06a98                 | ' 
06a98                 | ' function insertline(aline as ulong) as integer
06a98                 | _insertline
06a98     02 4A 05 F6 | 	mov	COUNT_, #2
06a9c     A8 00 A0 FD | 	call	#pushregs_
06aa0     28 F0 07 F1 | 	add	ptra, #40
06aa4     04 4E 05 F1 | 	add	fp, #4
06aa8     A7 12 62 FC | 	wrlong	arg01, fp
06aac     4A 00 00 FF 
06ab0     84 E4 05 F1 | 	add	objptr, ##38020
06ab4     F2 1E 02 FB | 	rdlong	local01, objptr
06ab8     04 4E 05 F1 | 	add	fp, #4
06abc     A7 1E 62 FC | 	wrlong	local01, fp
06ac0     08 4E 85 F1 | 	sub	fp, #8
06ac4                 | ' 
06ac4                 | ' do
06ac4     3E 00 00 FF 
06ac8     B8 E5 85 F1 | 	sub	objptr, ##32184
06acc                 | LR__0560
06acc     10 4E 05 F1 | 	add	fp, #16
06ad0     A7 12 02 F6 | 	mov	arg01, fp
06ad4     08 4E 85 F1 | 	sub	fp, #8
06ad8     A7 14 02 FB | 	rdlong	arg02, fp
06adc     08 4E 85 F1 | 	sub	fp, #8
06ae0     18 16 06 F6 | 	mov	arg03, #24
06ae4     00 92 B1 FD | 	call	#_psram_spin2_read1
06ae8     08 4E 05 F1 | 	add	fp, #8
06aec     A7 1E 02 FB | 	rdlong	local01, fp
06af0     04 4E 05 F1 | 	add	fp, #4
06af4     A7 1E 62 FC | 	wrlong	local01, fp
06af8     18 4E 05 F1 | 	add	fp, #24
06afc     A7 1E 02 FB | 	rdlong	local01, fp
06b00     1C 4E 85 F1 | 	sub	fp, #28
06b04     A7 1E 62 FC | 	wrlong	local01, fp
06b08     08 4E 05 F1 | 	add	fp, #8
06b0c     A7 1E 02 FB | 	rdlong	local01, fp
06b10     0C 4E 85 F1 | 	sub	fp, #12
06b14     A7 16 02 FB | 	rdlong	arg03, fp
06b18     04 4E 85 F1 | 	sub	fp, #4
06b1c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
06b20     24 4E 05 C1 |  if_b	add	fp, #36
06b24     A7 20 02 CB |  if_b	rdlong	local02, fp
06b28     24 4E 85 C1 |  if_b	sub	fp, #36
06b2c     FF FF 3F CF 
06b30     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06b34     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0560
06b38     0B 00 00 FF 
06b3c     CC E4 85 F1 | 	sub	objptr, ##5836
06b40                 | ' 
06b40                 | ' if header(0)=aline then return -1 ' delete it first
06b40     10 4E 05 F1 | 	add	fp, #16
06b44     A7 1E 02 FB | 	rdlong	local01, fp
06b48     0C 4E 85 F1 | 	sub	fp, #12
06b4c     A7 20 02 FB | 	rdlong	local02, fp
06b50     04 4E 85 F1 | 	sub	fp, #4
06b54     10 1F 0A F2 | 	cmp	local01, local02 wz
06b58     01 FA 65 A6 |  if_e	neg	result1, #1
06b5c     48 01 90 AD |  if_e	jmp	#LR__0563
06b60                 | ' if header(0)<aline then return -2 ' end of program reached
06b60     10 4E 05 F1 | 	add	fp, #16
06b64     A7 1E 02 FB | 	rdlong	local01, fp
06b68     0C 4E 85 F1 | 	sub	fp, #12
06b6c     A7 16 02 FB | 	rdlong	arg03, fp
06b70     04 4E 85 F1 | 	sub	fp, #4
06b74     0B 1F 12 F2 | 	cmp	local01, arg03 wc
06b78     02 FA 65 C6 |  if_b	neg	result1, #2
06b7c     28 01 90 CD |  if_b	jmp	#LR__0563
06b80                 | ' 
06b80                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
06b80     20 4E 05 F1 | 	add	fp, #32
06b84     A7 1E 02 FB | 	rdlong	local01, fp
06b88     20 4E 85 F1 | 	sub	fp, #32
06b8c     FF FF 7F FF 
06b90     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
06b94     78 00 90 5D |  if_ne	jmp	#LR__0561
06b98     43 00 00 FF 
06b9c     5C E4 05 F1 | 	add	objptr, ##34396
06ba0     F2 1E 02 FB | 	rdlong	local01, objptr
06ba4     07 00 00 FF 
06ba8     28 E4 05 F1 | 	add	objptr, ##3624
06bac     F2 1E 62 FC | 	wrlong	local01, objptr
06bb0     0C 4E 05 F1 | 	add	fp, #12
06bb4     A7 12 02 FB | 	rdlong	arg01, fp
06bb8     0C 4E 85 F1 | 	sub	fp, #12
06bbc     10 12 06 F1 | 	add	arg01, #16
06bc0     07 00 00 FF 
06bc4     28 E4 85 F1 | 	sub	objptr, ##3624
06bc8     F2 14 02 FB | 	rdlong	arg02, objptr
06bcc     43 00 00 FF 
06bd0     5C E4 85 F1 | 	sub	objptr, ##34396
06bd4     50 6B B1 FD | 	call	#_pslpoke
06bd8     47 00 00 FF 
06bdc     8C E4 05 F1 | 	add	objptr, ##36492
06be0     FF FF FF FF 
06be4     F2 FE 6B FC | 	wrlong	##-1, objptr
06be8     0C 4E 05 F1 | 	add	fp, #12
06bec     A7 1E 02 FB | 	rdlong	local01, fp
06bf0     0C 4E 85 F1 | 	sub	fp, #12
06bf4     04 E4 05 F1 | 	add	objptr, #4
06bf8     F2 1E 62 FC | 	wrlong	local01, objptr
06bfc     47 00 00 FF 
06c00     90 E4 85 F1 | 	sub	objptr, ##36496
06c04     84 FD BF FD | 	call	#_save_line
06c08                 | '   programstart=programptr
06c08                 | '   pslpoke(lineptr2+16,programptr)
06c08                 | '   ucompiledline(4)=$FFFF_FFFF
06c08                 | '   ucompiledline(5)=lineptr2
06c08                 | '   save_line
06c08                 | '   return 0
06c08     00 FA 05 F6 | 	mov	result1, #0
06c0c     98 00 90 FD | 	jmp	#LR__0563
06c10                 | LR__0561
06c10                 | ' 
06c10                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
06c10     20 4E 05 F1 | 	add	fp, #32
06c14     A7 1E 02 FB | 	rdlong	local01, fp
06c18     20 4E 85 F1 | 	sub	fp, #32
06c1c     FF FF 7F FF 
06c20     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
06c24     7C 00 90 AD |  if_e	jmp	#LR__0562
06c28     20 4E 05 F1 | 	add	fp, #32
06c2c     A7 1E 02 FB | 	rdlong	local01, fp
06c30     47 00 00 FF 
06c34     8C E4 05 F1 | 	add	objptr, ##36492
06c38     F2 1E 62 FC | 	wrlong	local01, objptr
06c3c     14 4E 85 F1 | 	sub	fp, #20
06c40     A7 1E 02 FB | 	rdlong	local01, fp
06c44     04 E4 05 F1 | 	add	objptr, #4
06c48     F2 1E 62 FC | 	wrlong	local01, objptr
06c4c     A7 12 02 FB | 	rdlong	arg01, fp
06c50     0C 4E 85 F1 | 	sub	fp, #12
06c54     10 12 06 F1 | 	add	arg01, #16
06c58     04 00 00 FF 
06c5c     34 E4 85 F1 | 	sub	objptr, ##2100
06c60     F2 14 02 FB | 	rdlong	arg02, objptr
06c64     43 00 00 FF 
06c68     5C E4 85 F1 | 	sub	objptr, ##34396
06c6c     B8 6A B1 FD | 	call	#_pslpoke
06c70     20 4E 05 F1 | 	add	fp, #32
06c74     A7 12 02 FB | 	rdlong	arg01, fp
06c78     20 4E 85 F1 | 	sub	fp, #32
06c7c     14 12 06 F1 | 	add	arg01, #20
06c80     43 00 00 FF 
06c84     5C E4 05 F1 | 	add	objptr, ##34396
06c88     F2 14 02 FB | 	rdlong	arg02, objptr
06c8c     43 00 00 FF 
06c90     5C E4 85 F1 | 	sub	objptr, ##34396
06c94     90 6A B1 FD | 	call	#_pslpoke
06c98     F0 FC BF FD | 	call	#_save_line
06c9c                 | '   ucompiledline(4)=header(4)
06c9c                 | '   ucompiledline(5)=lineptr2
06c9c                 | '   pslpoke(lineptr2+16,programptr)
06c9c                 | '   pslpoke(header(4)+20,programptr)
06c9c                 | '   save_line
06c9c                 | '   return 0
06c9c     00 FA 05 F6 | 	mov	result1, #0
06ca0     04 00 90 FD | 	jmp	#LR__0563
06ca4                 | LR__0562
06ca4     00 FA 05 F6 | 	mov	result1, #0
06ca8                 | LR__0563
06ca8     A7 F0 03 F6 | 	mov	ptra, fp
06cac     B2 00 A0 FD | 	call	#popregs_
06cb0                 | _insertline_ret
06cb0     2D 00 64 FD | 	ret
06cb4                 | 
06cb4                 | ' 
06cb4                 | ' sub add_line_at_end(aline) 
06cb4                 | _add_line_at_end
06cb4     4A 00 00 FF 
06cb8     88 E4 05 F1 | 	add	objptr, ##38024
06cbc     F2 12 62 FC | 	wrlong	arg01, objptr
06cc0     04 E4 05 F1 | 	add	objptr, #4
06cc4     F2 14 02 FB | 	rdlong	arg02, objptr
06cc8     03 00 00 FF 
06ccc     00 E4 85 F1 | 	sub	objptr, ##1536
06cd0     F2 14 62 FC | 	wrlong	arg02, objptr
06cd4     03 00 00 FF 
06cd8     00 E4 05 F1 | 	add	objptr, ##1536
06cdc     F2 12 02 FB | 	rdlong	arg01, objptr
06ce0     14 12 06 F1 | 	add	arg01, #20
06ce4     07 00 00 FF 
06ce8     30 E4 85 F1 | 	sub	objptr, ##3632
06cec     F2 14 02 FB | 	rdlong	arg02, objptr
06cf0     43 00 00 FF 
06cf4     5C E4 85 F1 | 	sub	objptr, ##34396
06cf8     2C 6A B1 FD | 	call	#_pslpoke
06cfc     43 00 00 FF 
06d00     5C E4 05 F1 | 	add	objptr, ##34396
06d04     F2 14 02 FB | 	rdlong	arg02, objptr
06d08     07 00 00 FF 
06d0c     30 E4 05 F1 | 	add	objptr, ##3632
06d10     F2 14 62 FC | 	wrlong	arg02, objptr
06d14     02 00 00 FF 
06d18     FC E5 85 F1 | 	sub	objptr, ##1532
06d1c     FF FF BF FF 
06d20     F2 FE 6B FC | 	wrlong	##2147483647, objptr
06d24                 | ' 
06d24                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
06d24                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
06d24     04 00 00 FF 
06d28     34 E4 85 F1 | 	sub	objptr, ##2100
06d2c     F2 14 02 FB | 	rdlong	arg02, objptr
06d30     43 00 00 FF 
06d34     5C E4 85 F1 | 	sub	objptr, ##34396
06d38     00 04 00 FF 
06d3c     00 14 0E F2 | 	cmp	arg02, ##524288 wz
06d40     47 00 00 AF 
06d44     8C E4 05 A1 |  if_e	add	objptr, ##36492
06d48     FF FF FF AF 
06d4c     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
06d50     47 00 00 AF 
06d54     8C E4 85 A1 |  if_e	sub	objptr, ##36492
06d58     30 FC BF FD | 	call	#_save_line
06d5c     43 00 00 FF 
06d60     5C E4 05 F1 | 	add	objptr, ##34396
06d64     F2 12 02 FB | 	rdlong	arg01, objptr
06d68     43 00 00 FF 
06d6c     5C E4 85 F1 | 	sub	objptr, ##34396
06d70     01 14 66 F6 | 	neg	arg02, #1
06d74     B0 69 B1 FD | 	call	#_pslpoke
06d78                 | _add_line_at_end_ret
06d78     2D 00 64 FD | 	ret
06d7c                 | 
06d7c                 | ' 
06d7c                 | ' function compile_immediate(linetype as ulong) as integer
06d7c                 | _compile_immediate
06d7c     09 4A 05 F6 | 	mov	COUNT_, #9
06d80     A8 00 A0 FD | 	call	#pushregs_
06d84                 | _compile_immediate_enter
06d84     09 25 0A F6 | 	mov	local04, arg01 wz
06d88     00 26 06 F6 | 	mov	local05, #0
06d8c     00 28 06 F6 | 	mov	local06, #0
06d90                 | ' 
06d90                 | ' ' linetype=cont+1, linetype=0 immediate
06d90                 | ' '  : 1: this is the first part of the line that will continue
06d90                 | ' ' 2 - this is the continuation of the line
06d90                 | ' ' 3 - this is the last continued line
06d90                 | ' ' 4 - this is the one and only part
06d90                 | ' 
06d90                 | ' err=0
06d90                 | ' cmd=0
06d90                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
06d90     30 00 90 5D |  if_ne	jmp	#LR__0570
06d94     35 00 00 FF 
06d98     10 E4 05 F1 | 	add	objptr, ##27152
06d9c     F2 28 02 FB | 	rdlong	local06, objptr
06da0     02 00 00 FF 
06da4     34 E4 05 F1 | 	add	objptr, ##1076
06da8     F2 02 68 FC | 	wrlong	#1, objptr
06dac     00 2A 06 F6 | 	mov	local07, #0
06db0     13 00 00 FF 
06db4     38 E4 05 F1 | 	add	objptr, ##9784
06db8     F2 00 68 FC | 	wrlong	#0, objptr
06dbc     4A 00 00 FF 
06dc0     7C E4 85 F1 | 	sub	objptr, ##38012
06dc4                 | LR__0570
06dc4                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
06dc4     02 24 0E F2 | 	cmp	local04, #2 wz
06dc8     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
06dcc     24 00 90 5D |  if_ne	jmp	#LR__0571
06dd0     35 00 00 FF 
06dd4     10 E4 05 F1 | 	add	objptr, ##27152
06dd8     F2 28 02 FB | 	rdlong	local06, objptr
06ddc     01 2A 06 F6 | 	mov	local07, #1
06de0     02 00 00 FF 
06de4     34 E4 05 F1 | 	add	objptr, ##1076
06de8     F2 02 68 FC | 	wrlong	#1, objptr
06dec     37 00 00 FF 
06df0     44 E4 85 F1 | 	sub	objptr, ##28228
06df4                 | LR__0571
06df4                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
06df4     04 24 0E F2 | 	cmp	local04, #4 wz
06df8     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
06dfc     30 00 90 5D |  if_ne	jmp	#LR__0572
06e00     35 00 00 FF 
06e04     18 E4 05 F1 | 	add	objptr, ##27160
06e08     F2 28 02 FB | 	rdlong	local06, objptr
06e0c     02 2A 06 F6 | 	mov	local07, #2
06e10     02 00 00 FF 
06e14     2C E4 05 F1 | 	add	objptr, ##1068
06e18     F2 04 68 FC | 	wrlong	#2, objptr
06e1c     13 00 00 FF 
06e20     38 E4 05 F1 | 	add	objptr, ##9784
06e24     F2 04 68 FC | 	wrlong	#2, objptr
06e28     4A 00 00 FF 
06e2c     7C E4 85 F1 | 	sub	objptr, ##38012
06e30                 | LR__0572
06e30                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
06e30     05 24 0E F2 | 	cmp	local04, #5 wz
06e34     44 00 90 5D |  if_ne	jmp	#LR__0573
06e38     37 00 00 FF 
06e3c     44 E4 05 F1 | 	add	objptr, ##28228
06e40     F2 FA 01 FB | 	rdlong	result1, objptr
06e44     FD 2A 02 F6 | 	mov	local07, result1
06e48     03 2A 66 F0 | 	shl	local07, #3
06e4c     02 00 00 FF 
06e50     38 E4 85 F1 | 	sub	objptr, ##1080
06e54     F2 2A 02 F1 | 	add	local07, objptr
06e58     04 2A 06 F1 | 	add	local07, #4
06e5c     15 29 02 FB | 	rdlong	local06, local07
06e60     FD 2A 02 F6 | 	mov	local07, result1
06e64     01 2A 06 F1 | 	add	local07, #1
06e68     02 00 00 FF 
06e6c     38 E4 05 F1 | 	add	objptr, ##1080
06e70     F2 2A 62 FC | 	wrlong	local07, objptr
06e74     37 00 00 FF 
06e78     44 E4 85 F1 | 	sub	objptr, ##28228
06e7c                 | LR__0573
06e7c     00 2C 06 F6 | 	mov	local08, #0
06e80                 | ' vars=0
06e80                 | ' 'print  "In compile_immediate cmd=:", cmd
06e80                 | ' 451 select case cmd
06e80     5C 28 0E F2 | 	cmp	local06, #92 wz
06e84     80 02 90 AD |  if_e	jmp	#LR__0574
06e88     47 28 0E F2 | 	cmp	local06, #71 wz
06e8c     84 02 90 AD |  if_e	jmp	#LR__0575
06e90     59 28 0E F2 | 	cmp	local06, #89 wz
06e94     88 02 90 AD |  if_e	jmp	#LR__0576
06e98     45 28 0E F2 | 	cmp	local06, #69 wz
06e9c     8C 02 90 AD |  if_e	jmp	#LR__0577
06ea0     69 28 0E F2 | 	cmp	local06, #105 wz
06ea4     90 02 90 AD |  if_e	jmp	#LR__0578
06ea8     40 28 0E F2 | 	cmp	local06, #64 wz
06eac     84 05 90 AD |  if_e	jmp	#LR__0645
06eb0     B4 28 0E F2 | 	cmp	local06, #180 wz
06eb4     8C 02 90 AD |  if_e	jmp	#LR__0579
06eb8     49 28 0E F2 | 	cmp	local06, #73 wz
06ebc     8C 02 90 AD |  if_e	jmp	#LR__0580
06ec0     50 28 0E F2 | 	cmp	local06, #80 wz
06ec4     90 02 90 AD |  if_e	jmp	#LR__0581
06ec8     AE 28 0E F2 | 	cmp	local06, #174 wz
06ecc     94 02 90 AD |  if_e	jmp	#LR__0582
06ed0     B0 28 0E F2 | 	cmp	local06, #176 wz
06ed4     98 02 90 AD |  if_e	jmp	#LR__0583
06ed8     AF 28 0E F2 | 	cmp	local06, #175 wz
06edc     9C 02 90 AD |  if_e	jmp	#LR__0584
06ee0     B1 28 0E F2 | 	cmp	local06, #177 wz
06ee4     A0 02 90 AD |  if_e	jmp	#LR__0585
06ee8     68 28 0E F2 | 	cmp	local06, #104 wz
06eec     A4 02 90 AD |  if_e	jmp	#LR__0586
06ef0     74 28 0E F2 | 	cmp	local06, #116 wz
06ef4     A8 02 90 AD |  if_e	jmp	#LR__0587
06ef8     73 28 0E F2 | 	cmp	local06, #115 wz
06efc     AC 02 90 AD |  if_e	jmp	#LR__0588
06f00     6C 28 0E F2 | 	cmp	local06, #108 wz
06f04     B0 02 90 AD |  if_e	jmp	#LR__0589
06f08     89 28 0E F2 | 	cmp	local06, #137 wz
06f0c     24 05 90 AD |  if_e	jmp	#LR__0645
06f10     72 28 0E F2 | 	cmp	local06, #114 wz
06f14     AC 02 90 AD |  if_e	jmp	#LR__0590
06f18     5D 28 0E F2 | 	cmp	local06, #93 wz
06f1c     14 05 90 AD |  if_e	jmp	#LR__0645
06f20     96 28 0E F2 | 	cmp	local06, #150 wz
06f24     A4 02 90 AD |  if_e	jmp	#LR__0591
06f28     43 28 0E F2 | 	cmp	local06, #67 wz
06f2c     A4 02 90 AD |  if_e	jmp	#LR__0592
06f30     5A 28 0E F2 | 	cmp	local06, #90 wz
06f34     A8 02 90 AD |  if_e	jmp	#LR__0593
06f38     AB 28 0E F2 | 	cmp	local06, #171 wz
06f3c     F4 04 90 AD |  if_e	jmp	#LR__0645
06f40     BD 28 0E F2 | 	cmp	local06, #189 wz
06f44     A0 02 90 AD |  if_e	jmp	#LR__0594
06f48     BB 28 0E F2 | 	cmp	local06, #187 wz
06f4c     A4 02 90 AD |  if_e	jmp	#LR__0595
06f50     4E 28 0E F2 | 	cmp	local06, #78 wz
06f54     A8 02 90 AD |  if_e	jmp	#LR__0596
06f58     A9 28 0E F2 | 	cmp	local06, #169 wz
06f5c     BC 02 90 AD |  if_e	jmp	#LR__0598
06f60     46 28 0E F2 | 	cmp	local06, #70 wz
06f64     BC 02 90 AD |  if_e	jmp	#LR__0599
06f68     71 28 0E F2 | 	cmp	local06, #113 wz
06f6c     C0 02 90 AD |  if_e	jmp	#LR__0600
06f70     60 28 0E F2 | 	cmp	local06, #96 wz
06f74     C4 02 90 AD |  if_e	jmp	#LR__0601
06f78     4A 28 0E F2 | 	cmp	local06, #74 wz
06f7c     C8 02 90 AD |  if_e	jmp	#LR__0602
06f80     48 28 0E F2 | 	cmp	local06, #72 wz
06f84     C8 02 90 AD |  if_e	jmp	#LR__0603
06f88     58 28 0E F2 | 	cmp	local06, #88 wz
06f8c     CC 02 90 AD |  if_e	jmp	#LR__0604
06f90     5F 28 0E F2 | 	cmp	local06, #95 wz
06f94     CC 02 90 AD |  if_e	jmp	#LR__0605
06f98     8A 28 0E F2 | 	cmp	local06, #138 wz
06f9c     D0 02 90 AD |  if_e	jmp	#LR__0606
06fa0     4C 28 0E F2 | 	cmp	local06, #76 wz
06fa4     D4 02 90 AD |  if_e	jmp	#LR__0607
06fa8     52 28 0E F2 | 	cmp	local06, #82 wz
06fac     D8 02 90 AD |  if_e	jmp	#LR__0608
06fb0     97 28 0E F2 | 	cmp	local06, #151 wz
06fb4     DC 02 90 AD |  if_e	jmp	#LR__0609
06fb8     61 28 0E F2 | 	cmp	local06, #97 wz
06fbc     E0 02 90 AD |  if_e	jmp	#LR__0610
06fc0     63 28 0E F2 | 	cmp	local06, #99 wz
06fc4     E4 02 90 AD |  if_e	jmp	#LR__0611
06fc8     41 28 0E F2 | 	cmp	local06, #65 wz
06fcc     64 04 90 AD |  if_e	jmp	#LR__0645
06fd0     4B 28 0E F2 | 	cmp	local06, #75 wz
06fd4     E0 02 90 AD |  if_e	jmp	#LR__0612
06fd8     B3 28 0E F2 | 	cmp	local06, #179 wz
06fdc     E0 02 90 AD |  if_e	jmp	#LR__0613
06fe0     5E 28 0E F2 | 	cmp	local06, #94 wz
06fe4     E4 02 90 AD |  if_e	jmp	#LR__0614
06fe8     7C 28 0E F2 | 	cmp	local06, #124 wz
06fec     E8 02 90 AD |  if_e	jmp	#LR__0615
06ff0     7D 28 0E F2 | 	cmp	local06, #125 wz
06ff4     EC 02 90 AD |  if_e	jmp	#LR__0616
06ff8     7E 28 0E F2 | 	cmp	local06, #126 wz
06ffc     F0 02 90 AD |  if_e	jmp	#LR__0617
07000     7F 28 0E F2 | 	cmp	local06, #127 wz
07004     F4 02 90 AD |  if_e	jmp	#LR__0618
07008     80 28 0E F2 | 	cmp	local06, #128 wz
0700c     F8 02 90 AD |  if_e	jmp	#LR__0619
07010     55 28 0E F2 | 	cmp	local06, #85 wz
07014     FC 02 90 AD |  if_e	jmp	#LR__0620
07018     75 28 0E F2 | 	cmp	local06, #117 wz
0701c     00 03 90 AD |  if_e	jmp	#LR__0621
07020     42 28 0E F2 | 	cmp	local06, #66 wz
07024     04 03 90 AD |  if_e	jmp	#LR__0622
07028     95 28 0E F2 | 	cmp	local06, #149 wz
0702c     08 03 90 AD |  if_e	jmp	#LR__0623
07030     AC 28 0E F2 | 	cmp	local06, #172 wz
07034     FC 03 90 AD |  if_e	jmp	#LR__0645
07038     81 28 0E F2 | 	cmp	local06, #129 wz
0703c     04 03 90 AD |  if_e	jmp	#LR__0624
07040     44 28 0E F2 | 	cmp	local06, #68 wz
07044     08 03 90 AD |  if_e	jmp	#LR__0625
07048     BC 28 0E F2 | 	cmp	local06, #188 wz
0704c     0C 03 90 AD |  if_e	jmp	#LR__0626
07050     88 28 0E F2 | 	cmp	local06, #136 wz
07054     DC 03 90 AD |  if_e	jmp	#LR__0645
07058     92 28 0E F2 | 	cmp	local06, #146 wz
0705c     08 03 90 AD |  if_e	jmp	#LR__0627
07060     BE 28 0E F2 | 	cmp	local06, #190 wz
07064     88 04 90 AD |  if_e	jmp	#LR__0646
07068     AA 28 0E F2 | 	cmp	local06, #170 wz
0706c     C4 03 90 AD |  if_e	jmp	#LR__0645
07070     4D 28 0E F2 | 	cmp	local06, #77 wz
07074     F8 02 90 AD |  if_e	jmp	#LR__0628
07078     51 28 0E F2 | 	cmp	local06, #81 wz
0707c     FC 02 90 AD |  if_e	jmp	#LR__0629
07080     8E 28 0E F2 | 	cmp	local06, #142 wz
07084     00 03 90 AD |  if_e	jmp	#LR__0630
07088     90 28 0E F2 | 	cmp	local06, #144 wz
0708c     04 03 90 AD |  if_e	jmp	#LR__0631
07090     8D 28 0E F2 | 	cmp	local06, #141 wz
07094     08 03 90 AD |  if_e	jmp	#LR__0632
07098     8C 28 0E F2 | 	cmp	local06, #140 wz
0709c     0C 03 90 AD |  if_e	jmp	#LR__0633
070a0     91 28 0E F2 | 	cmp	local06, #145 wz
070a4     10 03 90 AD |  if_e	jmp	#LR__0634
070a8     8B 28 0E F2 | 	cmp	local06, #139 wz
070ac     14 03 90 AD |  if_e	jmp	#LR__0635
070b0     8F 28 0E F2 | 	cmp	local06, #143 wz
070b4     18 03 90 AD |  if_e	jmp	#LR__0636
070b8     B2 28 0E F2 | 	cmp	local06, #178 wz
070bc     1C 03 90 AD |  if_e	jmp	#LR__0637
070c0     6D 28 0E F2 | 	cmp	local06, #109 wz
070c4     20 03 90 AD |  if_e	jmp	#LR__0638
070c8     70 28 0E F2 | 	cmp	local06, #112 wz
070cc     64 03 90 AD |  if_e	jmp	#LR__0645
070d0     56 28 0E F2 | 	cmp	local06, #86 wz
070d4     1C 03 90 AD |  if_e	jmp	#LR__0639
070d8     57 28 0E F2 | 	cmp	local06, #87 wz
070dc     54 03 90 AD |  if_e	jmp	#LR__0645
070e0     79 28 0E F2 | 	cmp	local06, #121 wz
070e4     18 03 90 AD |  if_e	jmp	#LR__0640
070e8     77 28 0E F2 | 	cmp	local06, #119 wz
070ec     1C 03 90 AD |  if_e	jmp	#LR__0641
070f0     78 28 0E F2 | 	cmp	local06, #120 wz
070f4     20 03 90 AD |  if_e	jmp	#LR__0642
070f8     01 00 00 FF 
070fc     04 28 0E F2 | 	cmp	local06, ##516 wz
07100     20 03 90 AD |  if_e	jmp	#LR__0643
07104     24 03 90 FD | 	jmp	#LR__0644
07108                 | LR__0574
07108     08 0D B0 FD | 	call	#_compile_fun_2p
0710c     FD 26 02 F6 | 	mov	local05, result1
07110     20 03 90 FD | 	jmp	#LR__0645
07114                 | LR__0575
07114     3C 0E B0 FD | 	call	#_compile_fun_4p
07118     FD 26 02 F6 | 	mov	local05, result1
0711c     14 03 90 FD | 	jmp	#LR__0645
07120                 | LR__0576
07120     28 33 B0 FD | 	call	#_expr
07124                 | ' expr()
07124                 | ' return 0
07124     00 26 06 F6 | 	mov	local05, #0
07128     08 03 90 FD | 	jmp	#LR__0645
0712c                 | LR__0577
0712c     58 0D B0 FD | 	call	#_compile_fun_3p
07130     FD 26 02 F6 | 	mov	local05, result1
07134     FC 02 90 FD | 	jmp	#LR__0645
07138                 | LR__0578
07138     10 33 B0 FD | 	call	#_expr
0713c                 | ' expr()
0713c                 | ' return 0
0713c     00 26 06 F6 | 	mov	local05, #0
07140     F0 02 90 FD | 	jmp	#LR__0645
07144                 | LR__0579
07144     04 33 B0 FD | 	call	#_expr
07148                 | ' expr()
07148                 | ' return 0
07148     E8 02 90 FD | 	jmp	#LR__0645
0714c                 | LR__0580
0714c     FC 32 B0 FD | 	call	#_expr
07150                 | ' expr()
07150                 | ' return 0
07150     00 26 06 F6 | 	mov	local05, #0
07154     DC 02 90 FD | 	jmp	#LR__0645
07158                 | LR__0581
07158     98 10 B0 FD | 	call	#_compile_fun_varp
0715c     FD 2C 02 F6 | 	mov	local08, result1
07160     D0 02 90 FD | 	jmp	#LR__0645
07164                 | LR__0582
07164     8C 10 B0 FD | 	call	#_compile_fun_varp
07168     FD 2C 02 F6 | 	mov	local08, result1
0716c     C4 02 90 FD | 	jmp	#LR__0645
07170                 | LR__0583
07170     80 10 B0 FD | 	call	#_compile_fun_varp
07174     FD 2C 02 F6 | 	mov	local08, result1
07178     B8 02 90 FD | 	jmp	#LR__0645
0717c                 | LR__0584
0717c     74 10 B0 FD | 	call	#_compile_fun_varp
07180     FD 2C 02 F6 | 	mov	local08, result1
07184     AC 02 90 FD | 	jmp	#LR__0645
07188                 | LR__0585
07188     68 10 B0 FD | 	call	#_compile_fun_varp
0718c     FD 2C 02 F6 | 	mov	local08, result1
07190     A0 02 90 FD | 	jmp	#LR__0645
07194                 | LR__0586
07194     B4 32 B0 FD | 	call	#_expr
07198                 | ' expr()
07198                 | ' return 0
07198     00 26 06 F6 | 	mov	local05, #0
0719c     94 02 90 FD | 	jmp	#LR__0645
071a0                 | LR__0587
071a0     50 10 B0 FD | 	call	#_compile_fun_varp
071a4     FD 2C 02 F6 | 	mov	local08, result1
071a8     88 02 90 FD | 	jmp	#LR__0645
071ac                 | LR__0588
071ac     44 10 B0 FD | 	call	#_compile_fun_varp
071b0     FD 2C 02 F6 | 	mov	local08, result1
071b4     7C 02 90 FD | 	jmp	#LR__0645
071b8                 | LR__0589
071b8     BC 0E B0 FD | 	call	#_compile_fun_5p
071bc     FD 26 02 F6 | 	mov	local05, result1
071c0     70 02 90 FD | 	jmp	#LR__0645
071c4                 | LR__0590
071c4     18 1A B0 FD | 	call	#_compile_dim
071c8     24 03 90 FD | 	jmp	#LR__0646
071cc                 | LR__0591
071cc     44 0C B0 FD | 	call	#_compile_fun_2p
071d0     60 02 90 FD | 	jmp	#LR__0645
071d4                 | LR__0592
071d4     3C 0C B0 FD | 	call	#_compile_fun_2p
071d8     FD 26 02 F6 | 	mov	local05, result1
071dc     54 02 90 FD | 	jmp	#LR__0645
071e0                 | LR__0593
071e0     D4 18 B0 FD | 	call	#_compile_else
071e4     08 03 90 FD | 	jmp	#LR__0646
071e8                 | LR__0594
071e8     08 10 B0 FD | 	call	#_compile_fun_varp
071ec     FD 2C 02 F6 | 	mov	local08, result1
071f0     40 02 90 FD | 	jmp	#LR__0645
071f4                 | LR__0595
071f4     FC 0F B0 FD | 	call	#_compile_fun_varp
071f8     FD 2C 02 F6 | 	mov	local08, result1
071fc     34 02 90 FD | 	jmp	#LR__0645
07200                 | LR__0596
07200     01 24 16 F2 | 	cmp	local04, #1 wc
07204     08 00 90 CD |  if_b	jmp	#LR__0597
07208     50 2E B0 FD | 	call	#_compile_goto
0720c     E0 02 90 FD | 	jmp	#LR__0646
07210                 | LR__0597
07210     19 12 06 F6 | 	mov	arg01, #25
07214     AC 63 B1 FD | 	call	#_printerror
07218     D4 02 90 FD | 	jmp	#LR__0646
0721c                 | LR__0598
0721c     D4 2D B0 FD | 	call	#_compile_gosub
07220     CC 02 90 FD | 	jmp	#LR__0646
07224                 | LR__0599
07224     60 0C B0 FD | 	call	#_compile_fun_3p
07228     FD 26 02 F6 | 	mov	local05, result1
0722c     04 02 90 FD | 	jmp	#LR__0645
07230                 | LR__0600
07230     20 0D B0 FD | 	call	#_compile_fun_4p
07234     FD 26 02 F6 | 	mov	local05, result1
07238     F8 01 90 FD | 	jmp	#LR__0645
0723c                 | LR__0601
0723c     0C 32 B0 FD | 	call	#_expr
07240                 | ' expr()
07240                 | ' return 0
07240     00 26 06 F6 | 	mov	local05, #0
07244     EC 01 90 FD | 	jmp	#LR__0645
07248                 | LR__0602
07248     A4 20 B0 FD | 	call	#_compile_for
0724c     A0 02 90 FD | 	jmp	#LR__0646
07250                 | LR__0603
07250     00 0D B0 FD | 	call	#_compile_fun_4p
07254     FD 26 02 F6 | 	mov	local05, result1
07258     D8 01 90 FD | 	jmp	#LR__0645
0725c                 | LR__0604
0725c     18 17 B0 FD | 	call	#_compile_if
07260     8C 02 90 FD | 	jmp	#LR__0646
07264                 | LR__0605
07264     E4 31 B0 FD | 	call	#_expr
07268                 | ' expr()
07268                 | ' return 0
07268     00 26 06 F6 | 	mov	local05, #0
0726c     C4 01 90 FD | 	jmp	#LR__0645
07270                 | LR__0606
07270     D8 31 B0 FD | 	call	#_expr
07274                 | ' expr()
07274                 | ' return 0
07274     00 26 06 F6 | 	mov	local05, #0
07278     B8 01 90 FD | 	jmp	#LR__0645
0727c                 | LR__0607
0727c     74 0F B0 FD | 	call	#_compile_fun_varp
07280     FD 2C 02 F6 | 	mov	local08, result1
07284     AC 01 90 FD | 	jmp	#LR__0645
07288                 | LR__0608
07288     68 0F B0 FD | 	call	#_compile_fun_varp
0728c     FD 2C 02 F6 | 	mov	local08, result1
07290     A0 01 90 FD | 	jmp	#LR__0645
07294                 | LR__0609
07294     7C 0B B0 FD | 	call	#_compile_fun_2p
07298     FD 26 02 F6 | 	mov	local05, result1
0729c     94 01 90 FD | 	jmp	#LR__0645
072a0                 | LR__0610
072a0     A8 31 B0 FD | 	call	#_expr
072a4                 | ' expr()
072a4                 | ' return 0
072a4     00 26 06 F6 | 	mov	local05, #0
072a8     88 01 90 FD | 	jmp	#LR__0645
072ac                 | LR__0611
072ac     9C 31 B0 FD | 	call	#_expr
072b0                 | ' expr()
072b0                 | ' return 0
072b0     00 26 06 F6 | 	mov	local05, #0
072b4     7C 01 90 FD | 	jmp	#LR__0645
072b8                 | LR__0612
072b8     88 2B B0 FD | 	call	#_compile_next
072bc     30 02 90 FD | 	jmp	#LR__0646
072c0                 | LR__0613
072c0     C4 0B B0 FD | 	call	#_compile_fun_3p
072c4     FD 26 02 F6 | 	mov	local05, result1
072c8     68 01 90 FD | 	jmp	#LR__0645
072cc                 | LR__0614
072cc     7C 31 B0 FD | 	call	#_expr
072d0                 | ' expr()
072d0                 | ' return 0
072d0     00 26 06 F6 | 	mov	local05, #0
072d4     5C 01 90 FD | 	jmp	#LR__0645
072d8                 | LR__0615
072d8     70 31 B0 FD | 	call	#_expr
072dc                 | ' expr()
072dc                 | ' return 0
072dc     00 26 06 F6 | 	mov	local05, #0
072e0     50 01 90 FD | 	jmp	#LR__0645
072e4                 | LR__0616
072e4     64 31 B0 FD | 	call	#_expr
072e8                 | ' expr()
072e8                 | ' return 0
072e8     00 26 06 F6 | 	mov	local05, #0
072ec     44 01 90 FD | 	jmp	#LR__0645
072f0                 | LR__0617
072f0     58 31 B0 FD | 	call	#_expr
072f4                 | ' expr()
072f4                 | ' return 0
072f4     00 26 06 F6 | 	mov	local05, #0
072f8     38 01 90 FD | 	jmp	#LR__0645
072fc                 | LR__0618
072fc     54 0C B0 FD | 	call	#_compile_fun_4p
07300     FD 26 02 F6 | 	mov	local05, result1
07304     2C 01 90 FD | 	jmp	#LR__0645
07308                 | LR__0619
07308     40 31 B0 FD | 	call	#_expr
0730c                 | ' expr()
0730c                 | ' return 0
0730c     00 26 06 F6 | 	mov	local05, #0
07310     20 01 90 FD | 	jmp	#LR__0645
07314                 | LR__0620
07314     FC 0A B0 FD | 	call	#_compile_fun_2p
07318     FD 26 02 F6 | 	mov	local05, result1
0731c     14 01 90 FD | 	jmp	#LR__0645
07320                 | LR__0621
07320     D0 0E B0 FD | 	call	#_compile_fun_varp
07324     FD 2C 02 F6 | 	mov	local08, result1
07328     08 01 90 FD | 	jmp	#LR__0645
0732c                 | LR__0622
0732c     E4 0A B0 FD | 	call	#_compile_fun_2p
07330     FD 26 02 F6 | 	mov	local05, result1
07334     FC 00 90 FD | 	jmp	#LR__0645
07338                 | LR__0623
07338     D8 0A B0 FD | 	call	#_compile_fun_2p
0733c     FD 26 02 F6 | 	mov	local05, result1
07340     F0 00 90 FD | 	jmp	#LR__0645
07344                 | LR__0624
07344     CC 0A B0 FD | 	call	#_compile_fun_2p
07348     FD 26 02 F6 | 	mov	local05, result1
0734c     E4 00 90 FD | 	jmp	#LR__0645
07350                 | LR__0625
07350     4C 0F B0 FD | 	call	#_compile_print
07354     FD 26 02 F6 | 	mov	local05, result1
07358     94 01 90 FD | 	jmp	#LR__0646
0735c                 | LR__0626
0735c     94 0E B0 FD | 	call	#_compile_fun_varp
07360     FD 2C 02 F6 | 	mov	local08, result1
07364     CC 00 90 FD | 	jmp	#LR__0645
07368                 | LR__0627
07368     E0 30 B0 FD | 	call	#_expr
0736c                 | ' expr()
0736c                 | ' return 0
0736c     C4 00 90 FD | 	jmp	#LR__0645
07370                 | LR__0628
07370     80 0E B0 FD | 	call	#_compile_fun_varp
07374     FD 2C 02 F6 | 	mov	local08, result1
07378     B8 00 90 FD | 	jmp	#LR__0645
0737c                 | LR__0629
0737c     74 0E B0 FD | 	call	#_compile_fun_varp
07380     FD 2C 02 F6 | 	mov	local08, result1
07384     AC 00 90 FD | 	jmp	#LR__0645
07388                 | LR__0630
07388     88 0A B0 FD | 	call	#_compile_fun_2p
0738c     FD 26 02 F6 | 	mov	local05, result1
07390     A0 00 90 FD | 	jmp	#LR__0645
07394                 | LR__0631
07394     7C 0A B0 FD | 	call	#_compile_fun_2p
07398     FD 26 02 F6 | 	mov	local05, result1
0739c     94 00 90 FD | 	jmp	#LR__0645
073a0                 | LR__0632
073a0     70 0A B0 FD | 	call	#_compile_fun_2p
073a4     FD 26 02 F6 | 	mov	local05, result1
073a8     88 00 90 FD | 	jmp	#LR__0645
073ac                 | LR__0633
073ac     64 0A B0 FD | 	call	#_compile_fun_2p
073b0     FD 26 02 F6 | 	mov	local05, result1
073b4     7C 00 90 FD | 	jmp	#LR__0645
073b8                 | LR__0634
073b8     58 0A B0 FD | 	call	#_compile_fun_2p
073bc     FD 26 02 F6 | 	mov	local05, result1
073c0     70 00 90 FD | 	jmp	#LR__0645
073c4                 | LR__0635
073c4     4C 0A B0 FD | 	call	#_compile_fun_2p
073c8     FD 26 02 F6 | 	mov	local05, result1
073cc     64 00 90 FD | 	jmp	#LR__0645
073d0                 | LR__0636
073d0     40 0A B0 FD | 	call	#_compile_fun_2p
073d4     FD 26 02 F6 | 	mov	local05, result1
073d8     58 00 90 FD | 	jmp	#LR__0645
073dc                 | LR__0637
073dc     14 0E B0 FD | 	call	#_compile_fun_varp
073e0     FD 2C 02 F6 | 	mov	local08, result1
073e4     4C 00 90 FD | 	jmp	#LR__0645
073e8                 | LR__0638
073e8     9C 0A B0 FD | 	call	#_compile_fun_3p
073ec     FD 26 02 F6 | 	mov	local05, result1
073f0     40 00 90 FD | 	jmp	#LR__0645
073f4                 | LR__0639
073f4     54 30 B0 FD | 	call	#_expr
073f8                 | ' expr()
073f8                 | ' return 0
073f8     00 26 06 F6 | 	mov	local05, #0
073fc     34 00 90 FD | 	jmp	#LR__0645
07400                 | LR__0640
07400     10 0A B0 FD | 	call	#_compile_fun_2p
07404     FD 26 02 F6 | 	mov	local05, result1
07408     28 00 90 FD | 	jmp	#LR__0645
0740c                 | LR__0641
0740c     04 0A B0 FD | 	call	#_compile_fun_2p
07410     FD 26 02 F6 | 	mov	local05, result1
07414     1C 00 90 FD | 	jmp	#LR__0645
07418                 | LR__0642
07418     F8 09 B0 FD | 	call	#_compile_fun_2p
0741c     FD 26 02 F6 | 	mov	local05, result1
07420     10 00 90 FD | 	jmp	#LR__0645
07424                 | LR__0643
07424     E4 01 B0 FD | 	call	#_compile_array_assign
07428     C4 00 90 FD | 	jmp	#LR__0646
0742c                 | LR__0644
0742c     28 09 B0 FD | 	call	#_compile_unknown
07430     BC 00 90 FD | 	jmp	#LR__0646
07434                 | LR__0645
07434     14 23 02 F6 | 	mov	local03, local06
07438     16 1F 02 F6 | 	mov	local01, local08
0743c     0F 2B 02 F6 | 	mov	local07, local01
07440     10 2F 02 F6 | 	mov	local09, local02
07444     11 29 02 F6 | 	mov	local06, local03
07448     4A 00 00 FF 
0744c     7C E4 05 F1 | 	add	objptr, ##38012
07450     F2 1E 02 FB | 	rdlong	local01, objptr
07454     0F 2D 02 F6 | 	mov	local08, local01
07458     01 2C 66 F0 | 	shl	local08, #1
0745c     0F 2D 02 F1 | 	add	local08, local01
07460     02 2C 66 F0 | 	shl	local08, #2
07464     03 00 00 FF 
07468     00 E4 85 F1 | 	sub	objptr, ##1536
0746c     F2 2C 02 F1 | 	add	local08, objptr
07470     16 2B 62 FC | 	wrlong	local07, local08
07474     03 00 00 FF 
07478     00 E4 05 F1 | 	add	objptr, ##1536
0747c     F2 1E 02 FB | 	rdlong	local01, objptr
07480     0F 2D 02 F6 | 	mov	local08, local01
07484     01 2C 66 F0 | 	shl	local08, #1
07488     0F 2D 02 F1 | 	add	local08, local01
0748c     02 2C 66 F0 | 	shl	local08, #2
07490     03 00 00 FF 
07494     00 E4 85 F1 | 	sub	objptr, ##1536
07498     F2 2C 02 F1 | 	add	local08, objptr
0749c     04 2C 06 F1 | 	add	local08, #4
074a0     16 2F 62 FC | 	wrlong	local09, local08
074a4     03 00 00 FF 
074a8     00 E4 05 F1 | 	add	objptr, ##1536
074ac     F2 1E 02 FB | 	rdlong	local01, objptr
074b0     0F 2D 02 F6 | 	mov	local08, local01
074b4     01 2C 66 F0 | 	shl	local08, #1
074b8     0F 2D 02 F1 | 	add	local08, local01
074bc     02 2C 66 F0 | 	shl	local08, #2
074c0     03 00 00 FF 
074c4     00 E4 85 F1 | 	sub	objptr, ##1536
074c8     F2 2C 02 F1 | 	add	local08, objptr
074cc     08 2C 06 F1 | 	add	local08, #8
074d0     16 29 62 FC | 	wrlong	local06, local08
074d4     03 00 00 FF 
074d8     00 E4 05 F1 | 	add	objptr, ##1536
074dc     F2 2A 02 FB | 	rdlong	local07, objptr
074e0     01 2A 06 F1 | 	add	local07, #1
074e4     F2 2A 62 FC | 	wrlong	local07, objptr
074e8     4A 00 00 FF 
074ec     7C E4 85 F1 | 	sub	objptr, ##38012
074f0                 | LR__0646
074f0                 | ' 
074f0                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
074f0                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
074f0     03 24 0E F2 | 	cmp	local04, #3 wz
074f4     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
074f8     38 00 90 5D |  if_ne	jmp	#LR__0647
074fc     4A 00 00 FF 
07500     7C E4 05 F1 | 	add	objptr, ##38012
07504     F2 2C 02 FB | 	rdlong	local08, objptr
07508     16 1F 02 F6 | 	mov	local01, local08
0750c     01 1E 66 F0 | 	shl	local01, #1
07510     16 1F 02 F1 | 	add	local01, local08
07514     02 1E 66 F0 | 	shl	local01, #2
07518     03 00 00 FF 
0751c     00 E4 85 F1 | 	sub	objptr, ##1536
07520     F2 1E 02 F1 | 	add	local01, objptr
07524     08 1E 06 F1 | 	add	local01, #8
07528     0F FD 6B FC | 	wrlong	#510, local01
0752c     47 00 00 FF 
07530     7C E4 85 F1 | 	sub	objptr, ##36476
07534                 | LR__0647
07534                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07534     4A 00 00 FF 
07538     7C E4 05 F1 | 	add	objptr, ##38012
0753c     F2 1E 02 FB | 	rdlong	local01, objptr
07540     4A 00 00 FF 
07544     7C E4 85 F1 | 	sub	objptr, ##38012
07548     97 58 48 FB | 	callpa	#(@LR__0650-@LR__0648)>>2,fcache_load_ptr_
0754c                 | LR__0648
0754c     0F 2D 02 F6 | 	mov	local08, local01
07550     01 2C 66 F0 | 	shl	local08, #1
07554     0F 2D 02 F1 | 	add	local08, local01
07558     02 2C 66 F0 | 	shl	local08, #2
0755c     47 00 00 FF 
07560     7C E4 05 F1 | 	add	objptr, ##36476
07564     F2 2C 02 F1 | 	add	local08, objptr
07568     08 2C 06 F1 | 	add	local08, #8
0756c     16 2D 02 FB | 	rdlong	local08, local08
07570     9B 2C 0E F2 | 	cmp	local08, #155 wz
07574     47 00 00 FF 
07578     7C E4 85 F1 | 	sub	objptr, ##36476
0757c     70 00 90 5D |  if_ne	jmp	#LR__0649
07580     0F 2D 02 F6 | 	mov	local08, local01
07584     01 2C 86 F1 | 	sub	local08, #1
07588     16 2F 02 F6 | 	mov	local09, local08
0758c     01 2E 66 F0 | 	shl	local09, #1
07590     16 2F 02 F1 | 	add	local09, local08
07594     02 2E 66 F0 | 	shl	local09, #2
07598     47 00 00 FF 
0759c     7C E4 05 F1 | 	add	objptr, ##36476
075a0     F2 2E 02 F1 | 	add	local09, objptr
075a4     08 2E 06 F1 | 	add	local09, #8
075a8     17 2D 02 FB | 	rdlong	local08, local09
075ac     11 2C 0E F2 | 	cmp	local08, #17 wz
075b0     47 00 00 FF 
075b4     7C E4 85 F1 | 	sub	objptr, ##36476
075b8     34 00 90 5D |  if_ne	jmp	#LR__0649
075bc     0F 2F 02 F6 | 	mov	local09, local01
075c0     01 2E 86 F1 | 	sub	local09, #1
075c4     17 2D 02 F6 | 	mov	local08, local09
075c8     01 2C 66 F0 | 	shl	local08, #1
075cc     17 2D 02 F1 | 	add	local08, local09
075d0     02 2C 66 F0 | 	shl	local08, #2
075d4     47 00 00 FF 
075d8     7C E4 05 F1 | 	add	objptr, ##36476
075dc     F2 2C 02 F1 | 	add	local08, objptr
075e0     08 2C 06 F1 | 	add	local08, #8
075e4     16 25 68 FC | 	wrlong	#18, local08
075e8     47 00 00 FF 
075ec     7C E4 85 F1 | 	sub	objptr, ##36476
075f0                 | LR__0649
075f0     01 1E 86 F1 | 	sub	local01, #1
075f4     01 1E 56 F2 | 	cmps	local01, #1 wc
075f8     50 FF 9F 3D |  if_ae	jmp	#LR__0648
075fc                 | LR__0650
075fc                 | ' 'print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
075fc                 | ' return err
075fc     13 FB 01 F6 | 	mov	result1, local05
07600     A7 F0 03 F6 | 	mov	ptra, fp
07604     B2 00 A0 FD | 	call	#popregs_
07608                 | _compile_immediate_ret
07608     2D 00 64 FD | 	ret
0760c                 | 
0760c                 | ' 
0760c                 | ' sub compile_array_assign
0760c                 | _compile_array_assign
0760c     0A 4A 05 F6 | 	mov	COUNT_, #10
07610     A8 00 A0 FD | 	call	#pushregs_
07614     00 24 06 F6 | 	mov	local04, #0
07618     37 00 00 FF 
0761c     44 E4 05 F1 | 	add	objptr, ##28228
07620     F2 26 02 FB | 	rdlong	local05, objptr
07624     13 FB 01 F6 | 	mov	result1, local05
07628     01 FA 85 F1 | 	sub	result1, #1
0762c     03 FA 65 F0 | 	shl	result1, #3
07630     02 00 00 FF 
07634     38 E4 85 F1 | 	sub	objptr, ##1080
07638     F2 FA 01 F1 | 	add	result1, objptr
0763c     FD 28 02 FB | 	rdlong	local06, result1
07640                 | ' numpar=0
07640                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
07640                 | ' ' todo here: recognize params and t1.result.twowords=numpar
07640                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
07640                 | ' if lparts(ct).token=token_lpar then
07640     03 26 66 F0 | 	shl	local05, #3
07644     F2 26 02 F1 | 	add	local05, objptr
07648     04 26 06 F1 | 	add	local05, #4
0764c     13 27 02 FB | 	rdlong	local05, local05
07650     15 26 0E F2 | 	cmp	local05, #21 wz
07654     35 00 00 FF 
07658     0C E4 85 F1 | 	sub	objptr, ##27148
0765c     D4 01 90 5D |  if_ne	jmp	#LR__0664
07660     37 00 00 FF 
07664     44 E4 05 F1 | 	add	objptr, ##28228
07668     F2 2A 02 FB | 	rdlong	local07, objptr
0766c     01 2A 06 F1 | 	add	local07, #1
07670     F2 2A 62 FC | 	wrlong	local07, objptr
07674     37 00 00 FF 
07678     44 E4 85 F1 | 	sub	objptr, ##28228
0767c                 | '   ct+=1 											' omit this lpar, this is for expr list
0767c                 | '   do
0767c                 | LR__0660
0767c     CC 2D B0 FD | 	call	#_expr
07680     37 00 00 FF 
07684     44 E4 05 F1 | 	add	objptr, ##28228
07688     F2 26 02 FB | 	rdlong	local05, objptr
0768c     01 26 06 F1 | 	add	local05, #1
07690     F2 26 62 FC | 	wrlong	local05, objptr
07694     01 24 06 F1 | 	add	local04, #1
07698     01 26 86 F1 | 	sub	local05, #1
0769c     03 26 66 F0 | 	shl	local05, #3
076a0     02 00 00 FF 
076a4     38 E4 85 F1 | 	sub	objptr, ##1080
076a8     F2 26 02 F1 | 	add	local05, objptr
076ac     04 26 06 F1 | 	add	local05, #4
076b0     13 2B 02 FB | 	rdlong	local07, local05
076b4     14 2A 0E F2 | 	cmp	local07, #20 wz
076b8     35 00 00 FF 
076bc     0C E4 85 F1 | 	sub	objptr, ##27148
076c0     34 00 90 AD |  if_e	jmp	#LR__0661
076c4     37 00 00 FF 
076c8     44 E4 05 F1 | 	add	objptr, ##28228
076cc     F2 2A 02 FB | 	rdlong	local07, objptr
076d0     03 2A 66 F0 | 	shl	local07, #3
076d4     02 00 00 FF 
076d8     38 E4 85 F1 | 	sub	objptr, ##1080
076dc     F2 2A 02 F1 | 	add	local07, objptr
076e0     04 2A 06 F1 | 	add	local07, #4
076e4     15 2B 02 FB | 	rdlong	local07, local07
076e8     FE 2B 0E F2 | 	cmp	local07, #510 wz
076ec     35 00 00 FF 
076f0     0C E4 85 F1 | 	sub	objptr, ##27148
076f4     84 FF 9F 5D |  if_ne	jmp	#LR__0660
076f8                 | LR__0661
076f8     37 00 00 FF 
076fc     44 E4 05 F1 | 	add	objptr, ##28228
07700     F2 2A 02 FB | 	rdlong	local07, objptr
07704     01 2A 06 F1 | 	add	local07, #1
07708     F2 2A 62 FC | 	wrlong	local07, objptr
0770c     37 00 00 FF 
07710     44 E4 85 F1 | 	sub	objptr, ##28228
07714     34 2D B0 FD | 	call	#_expr
07718     01 2C 66 F6 | 	neg	local08, #1
0771c     00 2E 06 F6 | 	mov	local09, #0
07720                 | ' '   print "in array_assign, rpar found, numpar=",numpar
07720                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
07720                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
07720                 | ' ct+=1 : expr()
07720                 | ' ' now find the vae
07720                 | ' 
07720                 | ' j=-1 : i=0 : do : 
07720                 | LR__0662
07720                 | '   if variables(i).name=varname$ then j=i: exit loop
07720     17 27 02 F6 | 	mov	local05, local09
07724     04 26 66 F0 | 	shl	local05, #4
07728     14 00 00 FF 
0772c     F8 E5 05 F1 | 	add	objptr, ##10744
07730     F2 26 02 F1 | 	add	local05, objptr
07734     13 13 02 FB | 	rdlong	arg01, local05
07738     14 15 02 F6 | 	mov	arg02, local06
0773c     14 00 00 FF 
07740     F8 E5 85 F1 | 	sub	objptr, ##10744
07744     08 92 B1 FD | 	call	#__system___string_cmp
07748     00 FA 0D F2 | 	cmp	result1, #0 wz
0774c     17 2D 02 A6 |  if_e	mov	local08, local09
07750     20 00 90 AD |  if_e	jmp	#LR__0663
07754     01 2E 06 F1 | 	add	local09, #1
07758     35 00 00 FF 
0775c     08 E4 05 F1 | 	add	objptr, ##27144
07760     F2 2A 02 FB | 	rdlong	local07, objptr
07764     35 00 00 FF 
07768     08 E4 85 F1 | 	sub	objptr, ##27144
0776c     15 2F 5A F2 | 	cmps	local09, local07 wcz
07770     AC FF 9F ED |  if_be	jmp	#LR__0662
07774                 | LR__0663
07774     16 1F 02 F6 | 	mov	local01, local08
07778     12 21 02 F6 | 	mov	local02, local04
0777c     17 22 06 F6 | 	mov	local03, #23
07780     0F 2B 02 F6 | 	mov	local07, local01
07784     10 31 02 F6 | 	mov	local10, local02
07788     11 2D 02 F6 | 	mov	local08, local03
0778c     4A 00 00 FF 
07790     7C E4 05 F1 | 	add	objptr, ##38012
07794     F2 1E 02 FB | 	rdlong	local01, objptr
07798     0F 2F 02 F6 | 	mov	local09, local01
0779c     01 2E 66 F0 | 	shl	local09, #1
077a0     0F 2F 02 F1 | 	add	local09, local01
077a4     02 2E 66 F0 | 	shl	local09, #2
077a8     03 00 00 FF 
077ac     00 E4 85 F1 | 	sub	objptr, ##1536
077b0     F2 2E 02 F1 | 	add	local09, objptr
077b4     17 2B 62 FC | 	wrlong	local07, local09
077b8     03 00 00 FF 
077bc     00 E4 05 F1 | 	add	objptr, ##1536
077c0     F2 1E 02 FB | 	rdlong	local01, objptr
077c4     0F 2F 02 F6 | 	mov	local09, local01
077c8     01 2E 66 F0 | 	shl	local09, #1
077cc     0F 2F 02 F1 | 	add	local09, local01
077d0     02 2E 66 F0 | 	shl	local09, #2
077d4     03 00 00 FF 
077d8     00 E4 85 F1 | 	sub	objptr, ##1536
077dc     F2 2E 02 F1 | 	add	local09, objptr
077e0     04 2E 06 F1 | 	add	local09, #4
077e4     17 31 62 FC | 	wrlong	local10, local09
077e8     03 00 00 FF 
077ec     00 E4 05 F1 | 	add	objptr, ##1536
077f0     F2 30 02 FB | 	rdlong	local10, objptr
077f4     18 1F 02 F6 | 	mov	local01, local10
077f8     01 1E 66 F0 | 	shl	local01, #1
077fc     18 1F 02 F1 | 	add	local01, local10
07800     02 1E 66 F0 | 	shl	local01, #2
07804     03 00 00 FF 
07808     00 E4 85 F1 | 	sub	objptr, ##1536
0780c     F2 1E 02 F1 | 	add	local01, objptr
07810     08 1E 06 F1 | 	add	local01, #8
07814     0F 2D 62 FC | 	wrlong	local08, local01
07818     03 00 00 FF 
0781c     00 E4 05 F1 | 	add	objptr, ##1536
07820     F2 2A 02 FB | 	rdlong	local07, objptr
07824     01 2A 06 F1 | 	add	local07, #1
07828     F2 2A 62 FC | 	wrlong	local07, objptr
0782c     4A 00 00 FF 
07830     7C E4 85 F1 | 	sub	objptr, ##38012
07834                 | LR__0664
07834     A7 F0 03 F6 | 	mov	ptra, fp
07838     B2 00 A0 FD | 	call	#popregs_
0783c                 | _compile_array_assign_ret
0783c     2D 00 64 FD | 	ret
07840                 | 
07840                 | ' 
07840                 | ' 
07840                 | ' sub compile_immediate_assign(linetype as ulong)
07840                 | _compile_immediate_assign
07840     09 4A 05 F6 | 	mov	COUNT_, #9
07844     A8 00 A0 FD | 	call	#pushregs_
07848     09 25 0A F6 | 	mov	local04, arg01 wz
0784c     FF 22 06 F6 | 	mov	local03, #255
07850     01 26 66 F6 | 	neg	local05, #1
07854                 | ' 
07854                 | ' t1.result_type=result_error : t1.result.uresult=0
07854                 | ' i=-1: j=-1
07854                 | ' 
07854                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
07854     2C 00 90 5D |  if_ne	jmp	#LR__0670
07858     35 00 00 FF 
0785c     0C E4 05 F1 | 	add	objptr, ##27148
07860     F2 28 02 FB | 	rdlong	local06, objptr
07864     02 00 00 FF 
07868     38 E4 05 F1 | 	add	objptr, ##1080
0786c     F2 04 68 FC | 	wrlong	#2, objptr
07870     13 00 00 FF 
07874     38 E4 05 F1 | 	add	objptr, ##9784
07878     F2 00 68 FC | 	wrlong	#0, objptr
0787c     4A 00 00 FF 
07880     7C E4 85 F1 | 	sub	objptr, ##38012
07884                 | LR__0670
07884                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
07884     02 24 0E F2 | 	cmp	local04, #2 wz
07888     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
0788c     35 00 00 AF 
07890     0C E4 05 A1 |  if_e	add	objptr, ##27148
07894     F2 28 02 AB |  if_e	rdlong	local06, objptr
07898     02 00 00 AF 
0789c     38 E4 05 A1 |  if_e	add	objptr, ##1080
078a0     F2 04 68 AC |  if_e	wrlong	#2, objptr
078a4     37 00 00 AF 
078a8     44 E4 85 A1 |  if_e	sub	objptr, ##28228
078ac                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
078ac     04 24 0E F2 | 	cmp	local04, #4 wz
078b0     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
078b4     2C 00 90 5D |  if_ne	jmp	#LR__0671
078b8     35 00 00 FF 
078bc     14 E4 05 F1 | 	add	objptr, ##27156
078c0     F2 28 02 FB | 	rdlong	local06, objptr
078c4     02 00 00 FF 
078c8     30 E4 05 F1 | 	add	objptr, ##1072
078cc     F2 06 68 FC | 	wrlong	#3, objptr
078d0     13 00 00 FF 
078d4     38 E4 05 F1 | 	add	objptr, ##9784
078d8     F2 04 68 FC | 	wrlong	#2, objptr
078dc     4A 00 00 FF 
078e0     7C E4 85 F1 | 	sub	objptr, ##38012
078e4                 | LR__0671
078e4                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
078e4     05 24 0E F2 | 	cmp	local04, #5 wz
078e8     3C 00 90 5D |  if_ne	jmp	#LR__0672
078ec     37 00 00 FF 
078f0     44 E4 05 F1 | 	add	objptr, ##28228
078f4     F2 FA 01 FB | 	rdlong	result1, objptr
078f8     FD 28 02 F6 | 	mov	local06, result1
078fc     03 28 66 F0 | 	shl	local06, #3
07900     02 00 00 FF 
07904     38 E4 85 F1 | 	sub	objptr, ##1080
07908     F2 28 02 F1 | 	add	local06, objptr
0790c     14 29 02 FB | 	rdlong	local06, local06
07910     02 FA 05 F1 | 	add	result1, #2
07914     02 00 00 FF 
07918     38 E4 05 F1 | 	add	objptr, ##1080
0791c     F2 FA 61 FC | 	wrlong	result1, objptr
07920     37 00 00 FF 
07924     44 E4 85 F1 | 	sub	objptr, ##28228
07928                 | LR__0672
07928     14 13 02 F6 | 	mov	arg01, local06
0792c     01 14 06 F6 | 	mov	arg02, #1
07930     F8 B0 B1 FD | 	call	#__system__Right_S
07934     14 2B B0 FD | 	call	#_expr
07938                 | '  
07938                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
07938                 | ' 
07938                 | ' suffix2$=right$(varname2$,1)
07938                 | ' expr()
07938                 | ' 
07938                 | ' 
07938                 | ' if varnum>0 then
07938     35 00 00 FF 
0793c     08 E4 05 F1 | 	add	objptr, ##27144
07940     F2 2A 02 FB | 	rdlong	local07, objptr
07944     35 00 00 FF 
07948     08 E4 85 F1 | 	sub	objptr, ##27144
0794c     01 2A 56 F2 | 	cmps	local07, #1 wc
07950     58 00 90 CD |  if_b	jmp	#LR__0675
07954                 | '   for i=0 to varnum-1
07954     00 2C 06 F6 | 	mov	local08, #0
07958     35 00 00 FF 
0795c     08 E4 05 F1 | 	add	objptr, ##27144
07960     F2 2E 02 FB | 	rdlong	local09, objptr
07964     35 00 00 FF 
07968     08 E4 85 F1 | 	sub	objptr, ##27144
0796c                 | LR__0673
0796c     17 2D 52 F2 | 	cmps	local08, local09 wc
07970     38 00 90 3D |  if_ae	jmp	#LR__0674
07974                 | '     if variables(i).name=varname2$ then j=i : exit
07974     16 2B 02 F6 | 	mov	local07, local08
07978     04 2A 66 F0 | 	shl	local07, #4
0797c     14 00 00 FF 
07980     F8 E5 05 F1 | 	add	objptr, ##10744
07984     F2 2A 02 F1 | 	add	local07, objptr
07988     15 13 02 FB | 	rdlong	arg01, local07
0798c     14 15 02 F6 | 	mov	arg02, local06
07990     14 00 00 FF 
07994     F8 E5 85 F1 | 	sub	objptr, ##10744
07998     B4 8F B1 FD | 	call	#__system___string_cmp
0799c     00 FA 0D F2 | 	cmp	result1, #0 wz
079a0     16 27 02 A6 |  if_e	mov	local05, local08
079a4     01 2C 06 51 |  if_ne	add	local08, #1
079a8     C0 FF 9F 5D |  if_ne	jmp	#LR__0673
079ac                 | LR__0674
079ac                 | LR__0675
079ac                 | ' if  j=-1 andalso varnum<maxvars then   
079ac     FF FF 7F FF 
079b0     FF 27 0E F2 | 	cmp	local05, ##-1 wz
079b4     60 00 90 5D |  if_ne	jmp	#LR__0676
079b8     35 00 00 FF 
079bc     08 E4 05 F1 | 	add	objptr, ##27144
079c0     F2 2A 02 FB | 	rdlong	local07, objptr
079c4     35 00 00 FF 
079c8     08 E4 85 F1 | 	sub	objptr, ##27144
079cc     02 00 00 FF 
079d0     00 2A 56 F2 | 	cmps	local07, ##1024 wc
079d4     40 00 90 3D |  if_ae	jmp	#LR__0676
079d8     35 00 00 FF 
079dc     08 E4 05 F1 | 	add	objptr, ##27144
079e0     F2 2E 02 FB | 	rdlong	local09, objptr
079e4     04 2E 66 F0 | 	shl	local09, #4
079e8     20 00 00 FF 
079ec     10 E4 85 F1 | 	sub	objptr, ##16400
079f0     F2 2E 02 F1 | 	add	local09, objptr
079f4     17 29 62 FC | 	wrlong	local06, local09
079f8     20 00 00 FF 
079fc     10 E4 05 F1 | 	add	objptr, ##16400
07a00     F2 2A 02 FB | 	rdlong	local07, objptr
07a04     15 27 02 F6 | 	mov	local05, local07
07a08     01 2A 06 F1 | 	add	local07, #1
07a0c     F2 2A 62 FC | 	wrlong	local07, objptr
07a10     35 00 00 FF 
07a14     08 E4 85 F1 | 	sub	objptr, ##27144
07a18                 | LR__0676
07a18     13 1F 02 F6 | 	mov	local01, local05
07a1c     17 22 06 F6 | 	mov	local03, #23
07a20     0F 2B 02 F6 | 	mov	local07, local01
07a24     10 2F 02 F6 | 	mov	local09, local02
07a28     11 1F 02 F6 | 	mov	local01, local03
07a2c     4A 00 00 FF 
07a30     7C E4 05 F1 | 	add	objptr, ##38012
07a34     F2 2C 02 FB | 	rdlong	local08, objptr
07a38     16 29 02 F6 | 	mov	local06, local08
07a3c     01 28 66 F0 | 	shl	local06, #1
07a40     16 29 02 F1 | 	add	local06, local08
07a44     02 28 66 F0 | 	shl	local06, #2
07a48     03 00 00 FF 
07a4c     00 E4 85 F1 | 	sub	objptr, ##1536
07a50     F2 28 02 F1 | 	add	local06, objptr
07a54     14 2B 62 FC | 	wrlong	local07, local06
07a58     03 00 00 FF 
07a5c     00 E4 05 F1 | 	add	objptr, ##1536
07a60     F2 2C 02 FB | 	rdlong	local08, objptr
07a64     16 2B 02 F6 | 	mov	local07, local08
07a68     01 2A 66 F0 | 	shl	local07, #1
07a6c     16 2B 02 F1 | 	add	local07, local08
07a70     02 2A 66 F0 | 	shl	local07, #2
07a74     03 00 00 FF 
07a78     00 E4 85 F1 | 	sub	objptr, ##1536
07a7c     F2 2A 02 F1 | 	add	local07, objptr
07a80     04 2A 06 F1 | 	add	local07, #4
07a84     15 2F 62 FC | 	wrlong	local09, local07
07a88     03 00 00 FF 
07a8c     00 E4 05 F1 | 	add	objptr, ##1536
07a90     F2 2E 02 FB | 	rdlong	local09, objptr
07a94     17 2D 02 F6 | 	mov	local08, local09
07a98     01 2C 66 F0 | 	shl	local08, #1
07a9c     17 2D 02 F1 | 	add	local08, local09
07aa0     02 2C 66 F0 | 	shl	local08, #2
07aa4     03 00 00 FF 
07aa8     00 E4 85 F1 | 	sub	objptr, ##1536
07aac     F2 2C 02 F1 | 	add	local08, objptr
07ab0     08 2C 06 F1 | 	add	local08, #8
07ab4     16 1F 62 FC | 	wrlong	local01, local08
07ab8     03 00 00 FF 
07abc     00 E4 05 F1 | 	add	objptr, ##1536
07ac0     F2 2A 02 FB | 	rdlong	local07, objptr
07ac4     01 2A 06 F1 | 	add	local07, #1
07ac8     F2 2A 62 FC | 	wrlong	local07, objptr
07acc     4A 00 00 FF 
07ad0     7C E4 85 F1 | 	sub	objptr, ##38012
07ad4                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
07ad4                 | ' 
07ad4                 | ' 
07ad4                 | ' 
07ad4                 | ' 
07ad4                 | ' 
07ad4                 | ' 
07ad4                 | ' compiledline(lineptr)=t1:  lineptr+=1 
07ad4                 | '  if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
07ad4     03 24 0E F2 | 	cmp	local04, #3 wz
07ad8     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
07adc     38 00 90 5D |  if_ne	jmp	#LR__0677
07ae0     4A 00 00 FF 
07ae4     7C E4 05 F1 | 	add	objptr, ##38012
07ae8     F2 1E 02 FB | 	rdlong	local01, objptr
07aec     0F 2F 02 F6 | 	mov	local09, local01
07af0     01 2E 66 F0 | 	shl	local09, #1
07af4     0F 2F 02 F1 | 	add	local09, local01
07af8     02 2E 66 F0 | 	shl	local09, #2
07afc     03 00 00 FF 
07b00     00 E4 85 F1 | 	sub	objptr, ##1536
07b04     F2 2E 02 F1 | 	add	local09, objptr
07b08     08 2E 06 F1 | 	add	local09, #8
07b0c     17 FD 6B FC | 	wrlong	#510, local09
07b10     47 00 00 FF 
07b14     7C E4 85 F1 | 	sub	objptr, ##36476
07b18                 | LR__0677
07b18     A7 F0 03 F6 | 	mov	ptra, fp
07b1c     B2 00 A0 FD | 	call	#popregs_
07b20                 | _compile_immediate_assign_ret
07b20     2D 00 64 FD | 	ret
07b24                 | 
07b24                 | ' 
07b24                 | ' ' ------------------ compile the line that is calling a command 
07b24                 | ' 
07b24                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
07b24                 | _compile
07b24     03 4A 05 F6 | 	mov	COUNT_, #3
07b28     A8 00 A0 FD | 	call	#pushregs_
07b2c     09 1F 02 F6 | 	mov	local01, arg01
07b30     0B 21 02 F6 | 	mov	local02, arg03
07b34     47 00 00 FF 
07b38     7C E4 05 F1 | 	add	objptr, ##36476
07b3c     F2 1E 62 FC | 	wrlong	local01, objptr
07b40     04 E4 05 F1 | 	add	objptr, #4
07b44     F2 14 62 FC | 	wrlong	arg02, objptr
07b48     47 00 00 FF 
07b4c     80 E4 85 F1 | 	sub	objptr, ##36480
07b50     10 13 02 F6 | 	mov	arg01, local02
07b54     01 12 06 F1 | 	add	arg01, #1
07b58     20 F2 BF FD | 	call	#_compile_immediate
07b5c     FD 22 0A F6 | 	mov	local03, result1 wz
07b60                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
07b60                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
07b60                 | '  
07b60                 | ' ' print "called compile with line= "; alinemajor;" and cont= "; cont 
07b60                 | ' 'if alinemajor=0 then err=compile_immediate(0) : return err  
07b60                 | ' 
07b60                 | ' ucompiledline(0)=alinemajor
07b60                 | ' ucompiledline(1)=alineminor
07b60                 | ' 
07b60                 | ' 
07b60                 | ' ' cont: 0: this is the first part of the line that will continue
07b60                 | ' ' 1 - this is the continuation of the line
07b60                 | ' ' 2 - this is the last continued line
07b60                 | ' ' 3 - this is the ome and only part
07b60                 | ' 
07b60                 | ' err=compile_immediate(cont+1) 
07b60                 | ' if err=0 andalso alinemajor>0 then
07b60     74 00 90 5D |  if_ne	jmp	#LR__0685
07b64     01 1E 16 F2 | 	cmp	local01, #1 wc
07b68     6C 00 90 CD |  if_b	jmp	#LR__0685
07b6c                 | '   if cont=3 orelse cont=2 then 
07b6c     03 20 0E F2 | 	cmp	local02, #3 wz
07b70     02 20 0E 52 |  if_ne	cmp	local02, #2 wz
07b74     60 00 90 5D |  if_ne	jmp	#LR__0684
07b78                 | '     if alinemajor >lastline then 
07b78     4A 00 00 FF 
07b7c     88 E4 05 F1 | 	add	objptr, ##38024
07b80     F2 14 02 FB | 	rdlong	arg02, objptr
07b84     4A 00 00 FF 
07b88     88 E4 85 F1 | 	sub	objptr, ##38024
07b8c     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07b90     0C 00 90 ED |  if_be	jmp	#LR__0680
07b94     0F 13 02 F6 | 	mov	arg01, local01
07b98     18 F1 BF FD | 	call	#_add_line_at_end
07b9c     38 00 90 FD | 	jmp	#LR__0683
07ba0                 | LR__0680
07ba0     0F 13 02 F6 | 	mov	arg01, local01
07ba4     38 EA BF FD | 	call	#_deleteline
07ba8                 | '       deleteline(alinemajor)  
07ba8                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' yes I know that's not optimal    
07ba8     4A 00 00 FF 
07bac     88 E4 05 F1 | 	add	objptr, ##38024
07bb0     F2 14 02 FB | 	rdlong	arg02, objptr
07bb4     4A 00 00 FF 
07bb8     88 E4 85 F1 | 	sub	objptr, ##38024
07bbc     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07bc0     0C 00 90 ED |  if_be	jmp	#LR__0681
07bc4     0F 13 02 F6 | 	mov	arg01, local01
07bc8     E8 F0 BF FD | 	call	#_add_line_at_end
07bcc     08 00 90 FD | 	jmp	#LR__0682
07bd0                 | LR__0681
07bd0     0F 13 02 F6 | 	mov	arg01, local01
07bd4     C0 EE BF FD | 	call	#_insertline
07bd8                 | LR__0682
07bd8                 | LR__0683
07bd8                 | LR__0684
07bd8                 | LR__0685
07bd8                 | ' return err
07bd8     11 FB 01 F6 | 	mov	result1, local03
07bdc     A7 F0 03 F6 | 	mov	ptra, fp
07be0     B2 00 A0 FD | 	call	#popregs_
07be4                 | _compile_ret
07be4     2D 00 64 FD | 	ret
07be8                 | 
07be8                 | ' 
07be8                 | ' ' ------------------ compile the line that is assigning to a variable
07be8                 | ' 
07be8                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
07be8                 | _compile_assign
07be8     02 4A 05 F6 | 	mov	COUNT_, #2
07bec     A8 00 A0 FD | 	call	#pushregs_
07bf0     09 1F 02 F6 | 	mov	local01, arg01
07bf4     0B 21 02 F6 | 	mov	local02, arg03
07bf8     47 00 00 FF 
07bfc     7C E4 05 F1 | 	add	objptr, ##36476
07c00     F2 1E 62 FC | 	wrlong	local01, objptr
07c04     04 E4 05 F1 | 	add	objptr, #4
07c08     F2 14 62 FC | 	wrlong	arg02, objptr
07c0c     47 00 00 FF 
07c10     80 E4 85 F1 | 	sub	objptr, ##36480
07c14     10 13 02 F6 | 	mov	arg01, local02
07c18     01 12 06 F1 | 	add	arg01, #1
07c1c     20 FC BF FD | 	call	#_compile_immediate_assign
07c20                 | ' 
07c20                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
07c20                 | ' 'if alinemajor=0 then compile_immediate_assign(0) : return  
07c20                 | ' 
07c20                 | ' ucompiledline(0)=alinemajor
07c20                 | ' ucompiledline(1)=alineminor
07c20                 | ' 
07c20                 | ' compile_immediate_assign(cont+1) 
07c20                 | ' 
07c20                 | ' if alinemajor>0 then
07c20     01 1E 16 F2 | 	cmp	local01, #1 wc
07c24     6C 00 90 CD |  if_b	jmp	#LR__0695
07c28                 | '   if cont=3 orelse cont=2 then 
07c28     03 20 0E F2 | 	cmp	local02, #3 wz
07c2c     02 20 0E 52 |  if_ne	cmp	local02, #2 wz
07c30     60 00 90 5D |  if_ne	jmp	#LR__0694
07c34                 | '     if alinemajor >lastline then 
07c34     4A 00 00 FF 
07c38     88 E4 05 F1 | 	add	objptr, ##38024
07c3c     F2 14 02 FB | 	rdlong	arg02, objptr
07c40     4A 00 00 FF 
07c44     88 E4 85 F1 | 	sub	objptr, ##38024
07c48     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07c4c     0C 00 90 ED |  if_be	jmp	#LR__0690
07c50     0F 13 02 F6 | 	mov	arg01, local01
07c54     5C F0 BF FD | 	call	#_add_line_at_end
07c58     38 00 90 FD | 	jmp	#LR__0693
07c5c                 | LR__0690
07c5c     0F 13 02 F6 | 	mov	arg01, local01
07c60     7C E9 BF FD | 	call	#_deleteline
07c64                 | '       deleteline(alinemajor)  
07c64                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
07c64     4A 00 00 FF 
07c68     88 E4 05 F1 | 	add	objptr, ##38024
07c6c     F2 14 02 FB | 	rdlong	arg02, objptr
07c70     4A 00 00 FF 
07c74     88 E4 85 F1 | 	sub	objptr, ##38024
07c78     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07c7c     0C 00 90 ED |  if_be	jmp	#LR__0691
07c80     0F 13 02 F6 | 	mov	arg01, local01
07c84     2C F0 BF FD | 	call	#_add_line_at_end
07c88     08 00 90 FD | 	jmp	#LR__0692
07c8c                 | LR__0691
07c8c     0F 13 02 F6 | 	mov	arg01, local01
07c90     04 EE BF FD | 	call	#_insertline
07c94                 | LR__0692
07c94                 | LR__0693
07c94                 | LR__0694
07c94                 | LR__0695
07c94     A7 F0 03 F6 | 	mov	ptra, fp
07c98     B2 00 A0 FD | 	call	#popregs_
07c9c                 | _compile_assign_ret
07c9c     2D 00 64 FD | 	ret
07ca0                 | 
07ca0                 | ' 
07ca0                 | ' sub compile_error(errno)
07ca0                 | _compile_error
07ca0     FF 04 06 F6 | 	mov	_var03, #255
07ca4     01 07 02 F6 | 	mov	_var04, _var02
07ca8     02 09 02 F6 | 	mov	_var05, _var03
07cac     4A 00 00 FF 
07cb0     7C E4 05 F1 | 	add	objptr, ##38012
07cb4     F2 0A 02 FB | 	rdlong	_var06, objptr
07cb8     05 0D 02 F6 | 	mov	_var07, _var06
07cbc     01 0C 66 F0 | 	shl	_var07, #1
07cc0     05 0D 02 F1 | 	add	_var07, _var06
07cc4     02 0C 66 F0 | 	shl	_var07, #2
07cc8     03 00 00 FF 
07ccc     00 E4 85 F1 | 	sub	objptr, ##1536
07cd0     F2 0C 02 F1 | 	add	_var07, objptr
07cd4     06 13 62 FC | 	wrlong	arg01, _var07
07cd8     03 00 00 FF 
07cdc     00 E4 05 F1 | 	add	objptr, ##1536
07ce0     F2 0C 02 FB | 	rdlong	_var07, objptr
07ce4     06 0B 02 F6 | 	mov	_var06, _var07
07ce8     01 0A 66 F0 | 	shl	_var06, #1
07cec     06 0B 02 F1 | 	add	_var06, _var07
07cf0     02 0A 66 F0 | 	shl	_var06, #2
07cf4     03 00 00 FF 
07cf8     00 E4 85 F1 | 	sub	objptr, ##1536
07cfc     F2 0A 02 F1 | 	add	_var06, objptr
07d00     04 0A 06 F1 | 	add	_var06, #4
07d04     05 07 62 FC | 	wrlong	_var04, _var06
07d08     03 00 00 FF 
07d0c     00 E4 05 F1 | 	add	objptr, ##1536
07d10     F2 0C 02 FB | 	rdlong	_var07, objptr
07d14     06 0B 02 F6 | 	mov	_var06, _var07
07d18     01 0A 66 F0 | 	shl	_var06, #1
07d1c     06 0B 02 F1 | 	add	_var06, _var07
07d20     02 0A 66 F0 | 	shl	_var06, #2
07d24     03 00 00 FF 
07d28     00 E4 85 F1 | 	sub	objptr, ##1536
07d2c     F2 0A 02 F1 | 	add	_var06, objptr
07d30     08 0A 06 F1 | 	add	_var06, #8
07d34     05 09 62 FC | 	wrlong	_var05, _var06
07d38     03 00 00 FF 
07d3c     00 E4 05 F1 | 	add	objptr, ##1536
07d40     F2 12 02 FB | 	rdlong	arg01, objptr
07d44     01 12 06 F1 | 	add	arg01, #1
07d48     F2 12 62 FC | 	wrlong	arg01, objptr
07d4c     4A 00 00 FF 
07d50     7C E4 85 F1 | 	sub	objptr, ##38012
07d54                 | _compile_error_ret
07d54     2D 00 64 FD | 	ret
07d58                 | 
07d58                 | ' 
07d58                 | ' sub compile_unknown() 
07d58                 | _compile_unknown
07d58     FF 04 06 F6 | 	mov	_var03, #255
07d5c     17 00 06 F6 | 	mov	_var01, #23
07d60     01 07 02 F6 | 	mov	_var04, _var02
07d64     02 01 02 F6 | 	mov	_var01, _var03
07d68     4A 00 00 FF 
07d6c     7C E4 05 F1 | 	add	objptr, ##38012
07d70     F2 08 02 FB | 	rdlong	_var05, objptr
07d74     04 0B 02 F6 | 	mov	_var06, _var05
07d78     01 0A 66 F0 | 	shl	_var06, #1
07d7c     04 0B 02 F1 | 	add	_var06, _var05
07d80     02 0A 66 F0 | 	shl	_var06, #2
07d84     03 00 00 FF 
07d88     00 E4 85 F1 | 	sub	objptr, ##1536
07d8c     F2 0A 02 F1 | 	add	_var06, objptr
07d90     05 2F 68 FC | 	wrlong	#23, _var06
07d94     03 00 00 FF 
07d98     00 E4 05 F1 | 	add	objptr, ##1536
07d9c     F2 0A 02 FB | 	rdlong	_var06, objptr
07da0     05 09 02 F6 | 	mov	_var05, _var06
07da4     01 08 66 F0 | 	shl	_var05, #1
07da8     05 09 02 F1 | 	add	_var05, _var06
07dac     02 08 66 F0 | 	shl	_var05, #2
07db0     03 00 00 FF 
07db4     00 E4 85 F1 | 	sub	objptr, ##1536
07db8     F2 08 02 F1 | 	add	_var05, objptr
07dbc     04 08 06 F1 | 	add	_var05, #4
07dc0     04 07 62 FC | 	wrlong	_var04, _var05
07dc4     03 00 00 FF 
07dc8     00 E4 05 F1 | 	add	objptr, ##1536
07dcc     F2 0A 02 FB | 	rdlong	_var06, objptr
07dd0     05 09 02 F6 | 	mov	_var05, _var06
07dd4     01 08 66 F0 | 	shl	_var05, #1
07dd8     05 09 02 F1 | 	add	_var05, _var06
07ddc     02 08 66 F0 | 	shl	_var05, #2
07de0     03 00 00 FF 
07de4     00 E4 85 F1 | 	sub	objptr, ##1536
07de8     F2 08 02 F1 | 	add	_var05, objptr
07dec     08 08 06 F1 | 	add	_var05, #8
07df0     04 01 62 FC | 	wrlong	_var01, _var05
07df4     03 00 00 FF 
07df8     00 E4 05 F1 | 	add	objptr, ##1536
07dfc     F2 0A 02 FB | 	rdlong	_var06, objptr
07e00     01 0A 06 F1 | 	add	_var06, #1
07e04     F2 0A 62 FC | 	wrlong	_var06, objptr
07e08     4A 00 00 FF 
07e0c     7C E4 85 F1 | 	sub	objptr, ##38012
07e10                 | _compile_unknown_ret
07e10     2D 00 64 FD | 	ret
07e14                 | 
07e14                 | ' 
07e14                 | ' function compile_fun_2p() as ulong
07e14                 | _compile_fun_2p
07e14     01 4A 05 F6 | 	mov	COUNT_, #1
07e18     A8 00 A0 FD | 	call	#pushregs_
07e1c     2C 26 B0 FD | 	call	#_expr
07e20                 | ' 
07e20                 | ' expr()
07e20                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07e20     37 00 00 FF 
07e24     44 E4 05 F1 | 	add	objptr, ##28228
07e28     F2 1E 02 FB | 	rdlong	local01, objptr
07e2c     03 1E 66 F0 | 	shl	local01, #3
07e30     02 00 00 FF 
07e34     38 E4 85 F1 | 	sub	objptr, ##1080
07e38     F2 1E 02 F1 | 	add	local01, objptr
07e3c     04 1E 06 F1 | 	add	local01, #4
07e40     0F 1F 02 FB | 	rdlong	local01, local01
07e44     11 1E 0E F2 | 	cmp	local01, #17 wz
07e48     35 00 00 FF 
07e4c     0C E4 85 F1 | 	sub	objptr, ##27148
07e50     15 FA 05 56 |  if_ne	mov	result1, #21
07e54     24 00 90 5D |  if_ne	jmp	#LR__0700
07e58     37 00 00 FF 
07e5c     44 E4 05 F1 | 	add	objptr, ##28228
07e60     F2 1E 02 FB | 	rdlong	local01, objptr
07e64     01 1E 06 F1 | 	add	local01, #1
07e68     F2 1E 62 FC | 	wrlong	local01, objptr
07e6c     37 00 00 FF 
07e70     44 E4 85 F1 | 	sub	objptr, ##28228
07e74     D4 25 B0 FD | 	call	#_expr
07e78     00 FA 05 F6 | 	mov	result1, #0
07e7c                 | LR__0700
07e7c     A7 F0 03 F6 | 	mov	ptra, fp
07e80     B2 00 A0 FD | 	call	#popregs_
07e84                 | _compile_fun_2p_ret
07e84     2D 00 64 FD | 	ret
07e88                 | 
07e88                 | ' 
07e88                 | ' function compile_fun_3p() as ulong
07e88                 | _compile_fun_3p
07e88     01 4A 05 F6 | 	mov	COUNT_, #1
07e8c     A8 00 A0 FD | 	call	#pushregs_
07e90     B8 25 B0 FD | 	call	#_expr
07e94                 | ' 
07e94                 | ' expr()
07e94                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07e94     37 00 00 FF 
07e98     44 E4 05 F1 | 	add	objptr, ##28228
07e9c     F2 1E 02 FB | 	rdlong	local01, objptr
07ea0     03 1E 66 F0 | 	shl	local01, #3
07ea4     02 00 00 FF 
07ea8     38 E4 85 F1 | 	sub	objptr, ##1080
07eac     F2 1E 02 F1 | 	add	local01, objptr
07eb0     04 1E 06 F1 | 	add	local01, #4
07eb4     0F 1F 02 FB | 	rdlong	local01, local01
07eb8     11 1E 0E F2 | 	cmp	local01, #17 wz
07ebc     35 00 00 FF 
07ec0     0C E4 85 F1 | 	sub	objptr, ##27148
07ec4     15 FA 05 56 |  if_ne	mov	result1, #21
07ec8     7C 00 90 5D |  if_ne	jmp	#LR__0710
07ecc     37 00 00 FF 
07ed0     44 E4 05 F1 | 	add	objptr, ##28228
07ed4     F2 1E 02 FB | 	rdlong	local01, objptr
07ed8     01 1E 06 F1 | 	add	local01, #1
07edc     F2 1E 62 FC | 	wrlong	local01, objptr
07ee0     37 00 00 FF 
07ee4     44 E4 85 F1 | 	sub	objptr, ##28228
07ee8     60 25 B0 FD | 	call	#_expr
07eec                 | ' expr()
07eec                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07eec     37 00 00 FF 
07ef0     44 E4 05 F1 | 	add	objptr, ##28228
07ef4     F2 1E 02 FB | 	rdlong	local01, objptr
07ef8     03 1E 66 F0 | 	shl	local01, #3
07efc     02 00 00 FF 
07f00     38 E4 85 F1 | 	sub	objptr, ##1080
07f04     F2 1E 02 F1 | 	add	local01, objptr
07f08     04 1E 06 F1 | 	add	local01, #4
07f0c     0F 1F 02 FB | 	rdlong	local01, local01
07f10     11 1E 0E F2 | 	cmp	local01, #17 wz
07f14     35 00 00 FF 
07f18     0C E4 85 F1 | 	sub	objptr, ##27148
07f1c     15 FA 05 56 |  if_ne	mov	result1, #21
07f20     24 00 90 5D |  if_ne	jmp	#LR__0710
07f24     37 00 00 FF 
07f28     44 E4 05 F1 | 	add	objptr, ##28228
07f2c     F2 1E 02 FB | 	rdlong	local01, objptr
07f30     01 1E 06 F1 | 	add	local01, #1
07f34     F2 1E 62 FC | 	wrlong	local01, objptr
07f38     37 00 00 FF 
07f3c     44 E4 85 F1 | 	sub	objptr, ##28228
07f40     08 25 B0 FD | 	call	#_expr
07f44     00 FA 05 F6 | 	mov	result1, #0
07f48                 | LR__0710
07f48     A7 F0 03 F6 | 	mov	ptra, fp
07f4c     B2 00 A0 FD | 	call	#popregs_
07f50                 | _compile_fun_3p_ret
07f50     2D 00 64 FD | 	ret
07f54                 | 
07f54                 | ' 
07f54                 | ' function compile_fun_4p() as ulong
07f54                 | _compile_fun_4p
07f54     01 4A 05 F6 | 	mov	COUNT_, #1
07f58     A8 00 A0 FD | 	call	#pushregs_
07f5c     EC 24 B0 FD | 	call	#_expr
07f60                 | ' 
07f60                 | ' expr()
07f60                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07f60     37 00 00 FF 
07f64     44 E4 05 F1 | 	add	objptr, ##28228
07f68     F2 1E 02 FB | 	rdlong	local01, objptr
07f6c     03 1E 66 F0 | 	shl	local01, #3
07f70     02 00 00 FF 
07f74     38 E4 85 F1 | 	sub	objptr, ##1080
07f78     F2 1E 02 F1 | 	add	local01, objptr
07f7c     04 1E 06 F1 | 	add	local01, #4
07f80     0F 1F 02 FB | 	rdlong	local01, local01
07f84     11 1E 0E F2 | 	cmp	local01, #17 wz
07f88     35 00 00 FF 
07f8c     0C E4 85 F1 | 	sub	objptr, ##27148
07f90     15 FA 05 56 |  if_ne	mov	result1, #21
07f94     D4 00 90 5D |  if_ne	jmp	#LR__0720
07f98     37 00 00 FF 
07f9c     44 E4 05 F1 | 	add	objptr, ##28228
07fa0     F2 1E 02 FB | 	rdlong	local01, objptr
07fa4     01 1E 06 F1 | 	add	local01, #1
07fa8     F2 1E 62 FC | 	wrlong	local01, objptr
07fac     37 00 00 FF 
07fb0     44 E4 85 F1 | 	sub	objptr, ##28228
07fb4     94 24 B0 FD | 	call	#_expr
07fb8                 | ' expr()
07fb8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07fb8     37 00 00 FF 
07fbc     44 E4 05 F1 | 	add	objptr, ##28228
07fc0     F2 1E 02 FB | 	rdlong	local01, objptr
07fc4     03 1E 66 F0 | 	shl	local01, #3
07fc8     02 00 00 FF 
07fcc     38 E4 85 F1 | 	sub	objptr, ##1080
07fd0     F2 1E 02 F1 | 	add	local01, objptr
07fd4     04 1E 06 F1 | 	add	local01, #4
07fd8     0F 1F 02 FB | 	rdlong	local01, local01
07fdc     11 1E 0E F2 | 	cmp	local01, #17 wz
07fe0     35 00 00 FF 
07fe4     0C E4 85 F1 | 	sub	objptr, ##27148
07fe8     15 FA 05 56 |  if_ne	mov	result1, #21
07fec     7C 00 90 5D |  if_ne	jmp	#LR__0720
07ff0     37 00 00 FF 
07ff4     44 E4 05 F1 | 	add	objptr, ##28228
07ff8     F2 1E 02 FB | 	rdlong	local01, objptr
07ffc     01 1E 06 F1 | 	add	local01, #1
08000     F2 1E 62 FC | 	wrlong	local01, objptr
08004     37 00 00 FF 
08008     44 E4 85 F1 | 	sub	objptr, ##28228
0800c     3C 24 B0 FD | 	call	#_expr
08010                 | ' expr()
08010                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08010     37 00 00 FF 
08014     44 E4 05 F1 | 	add	objptr, ##28228
08018     F2 1E 02 FB | 	rdlong	local01, objptr
0801c     03 1E 66 F0 | 	shl	local01, #3
08020     02 00 00 FF 
08024     38 E4 85 F1 | 	sub	objptr, ##1080
08028     F2 1E 02 F1 | 	add	local01, objptr
0802c     04 1E 06 F1 | 	add	local01, #4
08030     0F 1F 02 FB | 	rdlong	local01, local01
08034     11 1E 0E F2 | 	cmp	local01, #17 wz
08038     35 00 00 FF 
0803c     0C E4 85 F1 | 	sub	objptr, ##27148
08040     15 FA 05 56 |  if_ne	mov	result1, #21
08044     24 00 90 5D |  if_ne	jmp	#LR__0720
08048     37 00 00 FF 
0804c     44 E4 05 F1 | 	add	objptr, ##28228
08050     F2 1E 02 FB | 	rdlong	local01, objptr
08054     01 1E 06 F1 | 	add	local01, #1
08058     F2 1E 62 FC | 	wrlong	local01, objptr
0805c     37 00 00 FF 
08060     44 E4 85 F1 | 	sub	objptr, ##28228
08064     E4 23 B0 FD | 	call	#_expr
08068     00 FA 05 F6 | 	mov	result1, #0
0806c                 | LR__0720
0806c     A7 F0 03 F6 | 	mov	ptra, fp
08070     B2 00 A0 FD | 	call	#popregs_
08074                 | _compile_fun_4p_ret
08074     2D 00 64 FD | 	ret
08078                 | 
08078                 | ' 
08078                 | ' 
08078                 | ' function compile_fun_5p() as ulong
08078                 | _compile_fun_5p
08078     01 4A 05 F6 | 	mov	COUNT_, #1
0807c     A8 00 A0 FD | 	call	#pushregs_
08080     C8 23 B0 FD | 	call	#_expr
08084                 | ' 
08084                 | ' expr()
08084                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08084     37 00 00 FF 
08088     44 E4 05 F1 | 	add	objptr, ##28228
0808c     F2 1E 02 FB | 	rdlong	local01, objptr
08090     03 1E 66 F0 | 	shl	local01, #3
08094     02 00 00 FF 
08098     38 E4 85 F1 | 	sub	objptr, ##1080
0809c     F2 1E 02 F1 | 	add	local01, objptr
080a0     04 1E 06 F1 | 	add	local01, #4
080a4     0F 1F 02 FB | 	rdlong	local01, local01
080a8     11 1E 0E F2 | 	cmp	local01, #17 wz
080ac     35 00 00 FF 
080b0     0C E4 85 F1 | 	sub	objptr, ##27148
080b4     15 FA 05 56 |  if_ne	mov	result1, #21
080b8     2C 01 90 5D |  if_ne	jmp	#LR__0730
080bc     37 00 00 FF 
080c0     44 E4 05 F1 | 	add	objptr, ##28228
080c4     F2 1E 02 FB | 	rdlong	local01, objptr
080c8     01 1E 06 F1 | 	add	local01, #1
080cc     F2 1E 62 FC | 	wrlong	local01, objptr
080d0     37 00 00 FF 
080d4     44 E4 85 F1 | 	sub	objptr, ##28228
080d8     70 23 B0 FD | 	call	#_expr
080dc                 | ' expr()
080dc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
080dc     37 00 00 FF 
080e0     44 E4 05 F1 | 	add	objptr, ##28228
080e4     F2 1E 02 FB | 	rdlong	local01, objptr
080e8     03 1E 66 F0 | 	shl	local01, #3
080ec     02 00 00 FF 
080f0     38 E4 85 F1 | 	sub	objptr, ##1080
080f4     F2 1E 02 F1 | 	add	local01, objptr
080f8     04 1E 06 F1 | 	add	local01, #4
080fc     0F 1F 02 FB | 	rdlong	local01, local01
08100     11 1E 0E F2 | 	cmp	local01, #17 wz
08104     35 00 00 FF 
08108     0C E4 85 F1 | 	sub	objptr, ##27148
0810c     15 FA 05 56 |  if_ne	mov	result1, #21
08110     D4 00 90 5D |  if_ne	jmp	#LR__0730
08114     37 00 00 FF 
08118     44 E4 05 F1 | 	add	objptr, ##28228
0811c     F2 1E 02 FB | 	rdlong	local01, objptr
08120     01 1E 06 F1 | 	add	local01, #1
08124     F2 1E 62 FC | 	wrlong	local01, objptr
08128     37 00 00 FF 
0812c     44 E4 85 F1 | 	sub	objptr, ##28228
08130     18 23 B0 FD | 	call	#_expr
08134                 | ' expr()
08134                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08134     37 00 00 FF 
08138     44 E4 05 F1 | 	add	objptr, ##28228
0813c     F2 1E 02 FB | 	rdlong	local01, objptr
08140     03 1E 66 F0 | 	shl	local01, #3
08144     02 00 00 FF 
08148     38 E4 85 F1 | 	sub	objptr, ##1080
0814c     F2 1E 02 F1 | 	add	local01, objptr
08150     04 1E 06 F1 | 	add	local01, #4
08154     0F 1F 02 FB | 	rdlong	local01, local01
08158     11 1E 0E F2 | 	cmp	local01, #17 wz
0815c     35 00 00 FF 
08160     0C E4 85 F1 | 	sub	objptr, ##27148
08164     15 FA 05 56 |  if_ne	mov	result1, #21
08168     7C 00 90 5D |  if_ne	jmp	#LR__0730
0816c     37 00 00 FF 
08170     44 E4 05 F1 | 	add	objptr, ##28228
08174     F2 1E 02 FB | 	rdlong	local01, objptr
08178     01 1E 06 F1 | 	add	local01, #1
0817c     F2 1E 62 FC | 	wrlong	local01, objptr
08180     37 00 00 FF 
08184     44 E4 85 F1 | 	sub	objptr, ##28228
08188     C0 22 B0 FD | 	call	#_expr
0818c                 | ' expr()
0818c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0818c     37 00 00 FF 
08190     44 E4 05 F1 | 	add	objptr, ##28228
08194     F2 1E 02 FB | 	rdlong	local01, objptr
08198     03 1E 66 F0 | 	shl	local01, #3
0819c     02 00 00 FF 
081a0     38 E4 85 F1 | 	sub	objptr, ##1080
081a4     F2 1E 02 F1 | 	add	local01, objptr
081a8     04 1E 06 F1 | 	add	local01, #4
081ac     0F 1F 02 FB | 	rdlong	local01, local01
081b0     11 1E 0E F2 | 	cmp	local01, #17 wz
081b4     35 00 00 FF 
081b8     0C E4 85 F1 | 	sub	objptr, ##27148
081bc     15 FA 05 56 |  if_ne	mov	result1, #21
081c0     24 00 90 5D |  if_ne	jmp	#LR__0730
081c4     37 00 00 FF 
081c8     44 E4 05 F1 | 	add	objptr, ##28228
081cc     F2 1E 02 FB | 	rdlong	local01, objptr
081d0     01 1E 06 F1 | 	add	local01, #1
081d4     F2 1E 62 FC | 	wrlong	local01, objptr
081d8     37 00 00 FF 
081dc     44 E4 85 F1 | 	sub	objptr, ##28228
081e0     68 22 B0 FD | 	call	#_expr
081e4     00 FA 05 F6 | 	mov	result1, #0
081e8                 | LR__0730
081e8     A7 F0 03 F6 | 	mov	ptra, fp
081ec     B2 00 A0 FD | 	call	#popregs_
081f0                 | _compile_fun_5p_ret
081f0     2D 00 64 FD | 	ret
081f4                 | 
081f4                 | ' 
081f4                 | ' function compile_fun_varp() as ulong 
081f4                 | _compile_fun_varp
081f4     02 4A 05 F6 | 	mov	COUNT_, #2
081f8     A8 00 A0 FD | 	call	#pushregs_
081fc     00 1E 06 F6 | 	mov	local01, #0
08200                 | ' i=0
08200                 | ' if lparts(ct).token<>token_end then
08200     37 00 00 FF 
08204     44 E4 05 F1 | 	add	objptr, ##28228
08208     F2 20 02 FB | 	rdlong	local02, objptr
0820c     03 20 66 F0 | 	shl	local02, #3
08210     02 00 00 FF 
08214     38 E4 85 F1 | 	sub	objptr, ##1080
08218     F2 20 02 F1 | 	add	local02, objptr
0821c     04 20 06 F1 | 	add	local02, #4
08220     10 21 02 FB | 	rdlong	local02, local02
08224     FE 21 0E F2 | 	cmp	local02, #510 wz
08228     35 00 00 FF 
0822c     0C E4 85 F1 | 	sub	objptr, ##27148
08230     5C 00 90 AD |  if_e	jmp	#LR__0742
08234                 | '   do
08234                 | LR__0740
08234     14 22 B0 FD | 	call	#_expr
08238     01 1E 06 F1 | 	add	local01, #1
0823c                 | '   expr()
0823c                 | '    i+=1
0823c                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
0823c     37 00 00 FF 
08240     44 E4 05 F1 | 	add	objptr, ##28228
08244     F2 20 02 FB | 	rdlong	local02, objptr
08248     03 20 66 F0 | 	shl	local02, #3
0824c     02 00 00 FF 
08250     38 E4 85 F1 | 	sub	objptr, ##1080
08254     F2 20 02 F1 | 	add	local02, objptr
08258     04 20 06 F1 | 	add	local02, #4
0825c     10 21 02 FB | 	rdlong	local02, local02
08260     11 20 0E F2 | 	cmp	local02, #17 wz
08264     35 00 00 FF 
08268     0C E4 85 F1 | 	sub	objptr, ##27148
0826c     20 00 90 5D |  if_ne	jmp	#LR__0741
08270     37 00 00 FF 
08274     44 E4 05 F1 | 	add	objptr, ##28228
08278     F2 20 02 FB | 	rdlong	local02, objptr
0827c     01 20 06 F1 | 	add	local02, #1
08280     F2 20 62 FC | 	wrlong	local02, objptr
08284     37 00 00 FF 
08288     44 E4 85 F1 | 	sub	objptr, ##28228
0828c     A4 FF 9F FD | 	jmp	#LR__0740
08290                 | LR__0741
08290                 | LR__0742
08290                 | ' return i
08290     0F FB 01 F6 | 	mov	result1, local01
08294     A7 F0 03 F6 | 	mov	ptra, fp
08298     B2 00 A0 FD | 	call	#popregs_
0829c                 | _compile_fun_varp_ret
0829c     2D 00 64 FD | 	ret
082a0                 | 
082a0                 | ' 
082a0                 | ' 
082a0                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
082a0                 | _compile_print
082a0     0B 4A 05 F6 | 	mov	COUNT_, #11
082a4     A8 00 A0 FD | 	call	#pushregs_
082a8     00 1E 06 F6 | 	mov	local01, #0
082ac     1D 22 06 F6 | 	mov	local03, #29
082b0                 | ' t1.result.uresult=0 : t1.result_type=result_uint
082b0                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
082b0     37 00 00 FF 
082b4     44 E4 05 F1 | 	add	objptr, ##28228
082b8     F2 24 02 FB | 	rdlong	local04, objptr
082bc     03 24 66 F0 | 	shl	local04, #3
082c0     02 00 00 FF 
082c4     38 E4 85 F1 | 	sub	objptr, ##1080
082c8     F2 24 02 F1 | 	add	local04, objptr
082cc     04 24 06 F1 | 	add	local04, #4
082d0     12 25 02 FB | 	rdlong	local04, local04
082d4     FE 25 0E F2 | 	cmp	local04, #510 wz
082d8     35 00 00 FF 
082dc     0C E4 85 F1 | 	sub	objptr, ##27148
082e0     68 01 90 5D |  if_ne	jmp	#LR__0750
082e4     20 22 06 F6 | 	mov	local03, #32
082e8     0F 27 02 F6 | 	mov	local05, local01
082ec     10 29 02 F6 | 	mov	local06, local02
082f0     11 2B 02 F6 | 	mov	local07, local03
082f4     4A 00 00 FF 
082f8     7C E4 05 F1 | 	add	objptr, ##38012
082fc     F2 2C 02 FB | 	rdlong	local08, objptr
08300     16 2F 02 F6 | 	mov	local09, local08
08304     01 2E 66 F0 | 	shl	local09, #1
08308     16 2F 02 F1 | 	add	local09, local08
0830c     02 2E 66 F0 | 	shl	local09, #2
08310     03 00 00 FF 
08314     00 E4 85 F1 | 	sub	objptr, ##1536
08318     F2 2E 02 F1 | 	add	local09, objptr
0831c     17 27 62 FC | 	wrlong	local05, local09
08320     03 00 00 FF 
08324     00 E4 05 F1 | 	add	objptr, ##1536
08328     F2 26 02 FB | 	rdlong	local05, objptr
0832c     13 31 02 F6 | 	mov	local10, local05
08330     01 30 66 F0 | 	shl	local10, #1
08334     13 31 02 F1 | 	add	local10, local05
08338     02 30 66 F0 | 	shl	local10, #2
0833c     03 00 00 FF 
08340     00 E4 85 F1 | 	sub	objptr, ##1536
08344     F2 30 02 F1 | 	add	local10, objptr
08348     04 30 06 F1 | 	add	local10, #4
0834c     18 29 62 FC | 	wrlong	local06, local10
08350     03 00 00 FF 
08354     00 E4 05 F1 | 	add	objptr, ##1536
08358     F2 26 02 FB | 	rdlong	local05, objptr
0835c     13 33 02 F6 | 	mov	local11, local05
08360     01 32 66 F0 | 	shl	local11, #1
08364     13 33 02 F1 | 	add	local11, local05
08368     02 32 66 F0 | 	shl	local11, #2
0836c     03 00 00 FF 
08370     00 E4 85 F1 | 	sub	objptr, ##1536
08374     F2 32 02 F1 | 	add	local11, objptr
08378     08 32 06 F1 | 	add	local11, #8
0837c     19 2B 62 FC | 	wrlong	local07, local11
08380     03 00 00 FF 
08384     00 E4 05 F1 | 	add	objptr, ##1536
08388     F2 26 02 FB | 	rdlong	local05, objptr
0838c     01 26 06 F1 | 	add	local05, #1
08390     F2 26 62 FC | 	wrlong	local05, objptr
08394     44 22 06 F6 | 	mov	local03, #68
08398     0F 27 02 F6 | 	mov	local05, local01
0839c     10 29 02 F6 | 	mov	local06, local02
083a0     11 2B 02 F6 | 	mov	local07, local03
083a4     F2 2C 02 FB | 	rdlong	local08, objptr
083a8     16 2F 02 F6 | 	mov	local09, local08
083ac     01 2E 66 F0 | 	shl	local09, #1
083b0     16 2F 02 F1 | 	add	local09, local08
083b4     02 2E 66 F0 | 	shl	local09, #2
083b8     03 00 00 FF 
083bc     00 E4 85 F1 | 	sub	objptr, ##1536
083c0     F2 2E 02 F1 | 	add	local09, objptr
083c4     17 27 62 FC | 	wrlong	local05, local09
083c8     03 00 00 FF 
083cc     00 E4 05 F1 | 	add	objptr, ##1536
083d0     F2 32 02 FB | 	rdlong	local11, objptr
083d4     19 31 02 F6 | 	mov	local10, local11
083d8     01 30 66 F0 | 	shl	local10, #1
083dc     19 31 02 F1 | 	add	local10, local11
083e0     02 30 66 F0 | 	shl	local10, #2
083e4     03 00 00 FF 
083e8     00 E4 85 F1 | 	sub	objptr, ##1536
083ec     F2 30 02 F1 | 	add	local10, objptr
083f0     04 30 06 F1 | 	add	local10, #4
083f4     18 29 62 FC | 	wrlong	local06, local10
083f8     03 00 00 FF 
083fc     00 E4 05 F1 | 	add	objptr, ##1536
08400     F2 30 02 FB | 	rdlong	local10, objptr
08404     18 33 02 F6 | 	mov	local11, local10
08408     01 32 66 F0 | 	shl	local11, #1
0840c     18 33 02 F1 | 	add	local11, local10
08410     02 32 66 F0 | 	shl	local11, #2
08414     03 00 00 FF 
08418     00 E4 85 F1 | 	sub	objptr, ##1536
0841c     F2 32 02 F1 | 	add	local11, objptr
08420     08 32 06 F1 | 	add	local11, #8
08424     19 2B 62 FC | 	wrlong	local07, local11
08428     03 00 00 FF 
0842c     00 E4 05 F1 | 	add	objptr, ##1536
08430     F2 26 02 FB | 	rdlong	local05, objptr
08434     01 26 06 F1 | 	add	local05, #1
08438     F2 26 62 FC | 	wrlong	local05, objptr
0843c     4A 00 00 FF 
08440     7C E4 85 F1 | 	sub	objptr, ##38012
08444     00 FA 05 F6 | 	mov	result1, #0
08448     20 05 90 FD | 	jmp	#LR__0757
0844c                 | LR__0750
0844c                 | ' do
0844c                 | LR__0751
0844c     FC 1F B0 FD | 	call	#_expr
08450                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
08450                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08450     37 00 00 FF 
08454     44 E4 05 F1 | 	add	objptr, ##28228
08458     F2 24 02 FB | 	rdlong	local04, objptr
0845c     03 24 66 F0 | 	shl	local04, #3
08460     02 00 00 FF 
08464     38 E4 85 F1 | 	sub	objptr, ##1080
08468     F2 24 02 F1 | 	add	local04, objptr
0846c     04 24 06 F1 | 	add	local04, #4
08470     12 2D 02 FB | 	rdlong	local08, local04
08474     11 2C 0E F2 | 	cmp	local08, #17 wz
08478     35 00 00 FF 
0847c     0C E4 85 F1 | 	sub	objptr, ##27148
08480     60 01 90 5D |  if_ne	jmp	#LR__0752
08484     21 22 06 F6 | 	mov	local03, #33
08488     0F 27 02 F6 | 	mov	local05, local01
0848c     10 29 02 F6 | 	mov	local06, local02
08490     11 2B 02 F6 | 	mov	local07, local03
08494     4A 00 00 FF 
08498     7C E4 05 F1 | 	add	objptr, ##38012
0849c     F2 2C 02 FB | 	rdlong	local08, objptr
084a0     16 2F 02 F6 | 	mov	local09, local08
084a4     01 2E 66 F0 | 	shl	local09, #1
084a8     16 2F 02 F1 | 	add	local09, local08
084ac     02 2E 66 F0 | 	shl	local09, #2
084b0     03 00 00 FF 
084b4     00 E4 85 F1 | 	sub	objptr, ##1536
084b8     F2 2E 02 F1 | 	add	local09, objptr
084bc     17 27 62 FC | 	wrlong	local05, local09
084c0     03 00 00 FF 
084c4     00 E4 05 F1 | 	add	objptr, ##1536
084c8     F2 32 02 FB | 	rdlong	local11, objptr
084cc     19 31 02 F6 | 	mov	local10, local11
084d0     01 30 66 F0 | 	shl	local10, #1
084d4     19 31 02 F1 | 	add	local10, local11
084d8     02 30 66 F0 | 	shl	local10, #2
084dc     03 00 00 FF 
084e0     00 E4 85 F1 | 	sub	objptr, ##1536
084e4     F2 30 02 F1 | 	add	local10, objptr
084e8     04 30 06 F1 | 	add	local10, #4
084ec     18 29 62 FC | 	wrlong	local06, local10
084f0     03 00 00 FF 
084f4     00 E4 05 F1 | 	add	objptr, ##1536
084f8     F2 26 02 FB | 	rdlong	local05, objptr
084fc     13 33 02 F6 | 	mov	local11, local05
08500     01 32 66 F0 | 	shl	local11, #1
08504     13 33 02 F1 | 	add	local11, local05
08508     02 32 66 F0 | 	shl	local11, #2
0850c     03 00 00 FF 
08510     00 E4 85 F1 | 	sub	objptr, ##1536
08514     F2 32 02 F1 | 	add	local11, objptr
08518     08 32 06 F1 | 	add	local11, #8
0851c     19 2B 62 FC | 	wrlong	local07, local11
08520     03 00 00 FF 
08524     00 E4 05 F1 | 	add	objptr, ##1536
08528     F2 26 02 FB | 	rdlong	local05, objptr
0852c     01 26 06 F1 | 	add	local05, #1
08530     F2 26 62 FC | 	wrlong	local05, objptr
08534     44 22 06 F6 | 	mov	local03, #68
08538     0F 27 02 F6 | 	mov	local05, local01
0853c     10 29 02 F6 | 	mov	local06, local02
08540     11 2B 02 F6 | 	mov	local07, local03
08544     F2 2C 02 FB | 	rdlong	local08, objptr
08548     16 2F 02 F6 | 	mov	local09, local08
0854c     01 2E 66 F0 | 	shl	local09, #1
08550     16 2F 02 F1 | 	add	local09, local08
08554     02 2E 66 F0 | 	shl	local09, #2
08558     03 00 00 FF 
0855c     00 E4 85 F1 | 	sub	objptr, ##1536
08560     F2 2E 02 F1 | 	add	local09, objptr
08564     17 27 62 FC | 	wrlong	local05, local09
08568     03 00 00 FF 
0856c     00 E4 05 F1 | 	add	objptr, ##1536
08570     F2 32 02 FB | 	rdlong	local11, objptr
08574     19 31 02 F6 | 	mov	local10, local11
08578     01 30 66 F0 | 	shl	local10, #1
0857c     19 31 02 F1 | 	add	local10, local11
08580     02 30 66 F0 | 	shl	local10, #2
08584     03 00 00 FF 
08588     00 E4 85 F1 | 	sub	objptr, ##1536
0858c     F2 30 02 F1 | 	add	local10, objptr
08590     04 30 06 F1 | 	add	local10, #4
08594     18 29 62 FC | 	wrlong	local06, local10
08598     03 00 00 FF 
0859c     00 E4 05 F1 | 	add	objptr, ##1536
085a0     F2 30 02 FB | 	rdlong	local10, objptr
085a4     18 33 02 F6 | 	mov	local11, local10
085a8     01 32 66 F0 | 	shl	local11, #1
085ac     18 33 02 F1 | 	add	local11, local10
085b0     02 32 66 F0 | 	shl	local11, #2
085b4     03 00 00 FF 
085b8     00 E4 85 F1 | 	sub	objptr, ##1536
085bc     F2 32 02 F1 | 	add	local11, objptr
085c0     08 32 06 F1 | 	add	local11, #8
085c4     19 2B 62 FC | 	wrlong	local07, local11
085c8     03 00 00 FF 
085cc     00 E4 05 F1 | 	add	objptr, ##1536
085d0     F2 26 02 FB | 	rdlong	local05, objptr
085d4     01 26 06 F1 | 	add	local05, #1
085d8     F2 26 62 FC | 	wrlong	local05, objptr
085dc     4A 00 00 FF 
085e0     7C E4 85 F1 | 	sub	objptr, ##38012
085e4                 | LR__0752
085e4                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
085e4     37 00 00 FF 
085e8     44 E4 05 F1 | 	add	objptr, ##28228
085ec     F2 24 02 FB | 	rdlong	local04, objptr
085f0     03 24 66 F0 | 	shl	local04, #3
085f4     02 00 00 FF 
085f8     38 E4 85 F1 | 	sub	objptr, ##1080
085fc     F2 24 02 F1 | 	add	local04, objptr
08600     04 24 06 F1 | 	add	local04, #4
08604     12 2D 02 FB | 	rdlong	local08, local04
08608     12 2C 0E F2 | 	cmp	local08, #18 wz
0860c     35 00 00 FF 
08610     0C E4 85 F1 | 	sub	objptr, ##27148
08614     60 01 90 5D |  if_ne	jmp	#LR__0753
08618     22 22 06 F6 | 	mov	local03, #34
0861c     0F 27 02 F6 | 	mov	local05, local01
08620     10 29 02 F6 | 	mov	local06, local02
08624     11 2B 02 F6 | 	mov	local07, local03
08628     4A 00 00 FF 
0862c     7C E4 05 F1 | 	add	objptr, ##38012
08630     F2 2C 02 FB | 	rdlong	local08, objptr
08634     16 2F 02 F6 | 	mov	local09, local08
08638     01 2E 66 F0 | 	shl	local09, #1
0863c     16 2F 02 F1 | 	add	local09, local08
08640     02 2E 66 F0 | 	shl	local09, #2
08644     03 00 00 FF 
08648     00 E4 85 F1 | 	sub	objptr, ##1536
0864c     F2 2E 02 F1 | 	add	local09, objptr
08650     17 27 62 FC | 	wrlong	local05, local09
08654     03 00 00 FF 
08658     00 E4 05 F1 | 	add	objptr, ##1536
0865c     F2 32 02 FB | 	rdlong	local11, objptr
08660     19 31 02 F6 | 	mov	local10, local11
08664     01 30 66 F0 | 	shl	local10, #1
08668     19 31 02 F1 | 	add	local10, local11
0866c     02 30 66 F0 | 	shl	local10, #2
08670     03 00 00 FF 
08674     00 E4 85 F1 | 	sub	objptr, ##1536
08678     F2 30 02 F1 | 	add	local10, objptr
0867c     04 30 06 F1 | 	add	local10, #4
08680     18 29 62 FC | 	wrlong	local06, local10
08684     03 00 00 FF 
08688     00 E4 05 F1 | 	add	objptr, ##1536
0868c     F2 26 02 FB | 	rdlong	local05, objptr
08690     13 33 02 F6 | 	mov	local11, local05
08694     01 32 66 F0 | 	shl	local11, #1
08698     13 33 02 F1 | 	add	local11, local05
0869c     02 32 66 F0 | 	shl	local11, #2
086a0     03 00 00 FF 
086a4     00 E4 85 F1 | 	sub	objptr, ##1536
086a8     F2 32 02 F1 | 	add	local11, objptr
086ac     08 32 06 F1 | 	add	local11, #8
086b0     19 2B 62 FC | 	wrlong	local07, local11
086b4     03 00 00 FF 
086b8     00 E4 05 F1 | 	add	objptr, ##1536
086bc     F2 26 02 FB | 	rdlong	local05, objptr
086c0     01 26 06 F1 | 	add	local05, #1
086c4     F2 26 62 FC | 	wrlong	local05, objptr
086c8     44 22 06 F6 | 	mov	local03, #68
086cc     0F 27 02 F6 | 	mov	local05, local01
086d0     10 29 02 F6 | 	mov	local06, local02
086d4     11 2B 02 F6 | 	mov	local07, local03
086d8     F2 2C 02 FB | 	rdlong	local08, objptr
086dc     16 2F 02 F6 | 	mov	local09, local08
086e0     01 2E 66 F0 | 	shl	local09, #1
086e4     16 2F 02 F1 | 	add	local09, local08
086e8     02 2E 66 F0 | 	shl	local09, #2
086ec     03 00 00 FF 
086f0     00 E4 85 F1 | 	sub	objptr, ##1536
086f4     F2 2E 02 F1 | 	add	local09, objptr
086f8     17 27 62 FC | 	wrlong	local05, local09
086fc     03 00 00 FF 
08700     00 E4 05 F1 | 	add	objptr, ##1536
08704     F2 32 02 FB | 	rdlong	local11, objptr
08708     19 31 02 F6 | 	mov	local10, local11
0870c     01 30 66 F0 | 	shl	local10, #1
08710     19 31 02 F1 | 	add	local10, local11
08714     02 30 66 F0 | 	shl	local10, #2
08718     03 00 00 FF 
0871c     00 E4 85 F1 | 	sub	objptr, ##1536
08720     F2 30 02 F1 | 	add	local10, objptr
08724     04 30 06 F1 | 	add	local10, #4
08728     18 29 62 FC | 	wrlong	local06, local10
0872c     03 00 00 FF 
08730     00 E4 05 F1 | 	add	objptr, ##1536
08734     F2 30 02 FB | 	rdlong	local10, objptr
08738     18 33 02 F6 | 	mov	local11, local10
0873c     01 32 66 F0 | 	shl	local11, #1
08740     18 33 02 F1 | 	add	local11, local10
08744     02 32 66 F0 | 	shl	local11, #2
08748     03 00 00 FF 
0874c     00 E4 85 F1 | 	sub	objptr, ##1536
08750     F2 32 02 F1 | 	add	local11, objptr
08754     08 32 06 F1 | 	add	local11, #8
08758     19 2B 62 FC | 	wrlong	local07, local11
0875c     03 00 00 FF 
08760     00 E4 05 F1 | 	add	objptr, ##1536
08764     F2 26 02 FB | 	rdlong	local05, objptr
08768     01 26 06 F1 | 	add	local05, #1
0876c     F2 26 62 FC | 	wrlong	local05, objptr
08770     4A 00 00 FF 
08774     7C E4 85 F1 | 	sub	objptr, ##38012
08778                 | LR__0753
08778                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08778     37 00 00 FF 
0877c     44 E4 05 F1 | 	add	objptr, ##28228
08780     F2 24 02 FB | 	rdlong	local04, objptr
08784     03 24 66 F0 | 	shl	local04, #3
08788     02 00 00 FF 
0878c     38 E4 85 F1 | 	sub	objptr, ##1080
08790     F2 24 02 F1 | 	add	local04, objptr
08794     04 24 06 F1 | 	add	local04, #4
08798     12 2D 02 FB | 	rdlong	local08, local04
0879c     FE 2D 0E F2 | 	cmp	local08, #510 wz
087a0     35 00 00 FF 
087a4     0C E4 85 F1 | 	sub	objptr, ##27148
087a8     B8 00 90 5D |  if_ne	jmp	#LR__0754
087ac     44 22 06 F6 | 	mov	local03, #68
087b0     0F 27 02 F6 | 	mov	local05, local01
087b4     10 29 02 F6 | 	mov	local06, local02
087b8     11 2B 02 F6 | 	mov	local07, local03
087bc     4A 00 00 FF 
087c0     7C E4 05 F1 | 	add	objptr, ##38012
087c4     F2 2C 02 FB | 	rdlong	local08, objptr
087c8     16 2F 02 F6 | 	mov	local09, local08
087cc     01 2E 66 F0 | 	shl	local09, #1
087d0     16 2F 02 F1 | 	add	local09, local08
087d4     02 2E 66 F0 | 	shl	local09, #2
087d8     03 00 00 FF 
087dc     00 E4 85 F1 | 	sub	objptr, ##1536
087e0     F2 2E 02 F1 | 	add	local09, objptr
087e4     17 27 62 FC | 	wrlong	local05, local09
087e8     03 00 00 FF 
087ec     00 E4 05 F1 | 	add	objptr, ##1536
087f0     F2 32 02 FB | 	rdlong	local11, objptr
087f4     19 31 02 F6 | 	mov	local10, local11
087f8     01 30 66 F0 | 	shl	local10, #1
087fc     19 31 02 F1 | 	add	local10, local11
08800     02 30 66 F0 | 	shl	local10, #2
08804     03 00 00 FF 
08808     00 E4 85 F1 | 	sub	objptr, ##1536
0880c     F2 30 02 F1 | 	add	local10, objptr
08810     04 30 06 F1 | 	add	local10, #4
08814     18 29 62 FC | 	wrlong	local06, local10
08818     03 00 00 FF 
0881c     00 E4 05 F1 | 	add	objptr, ##1536
08820     F2 30 02 FB | 	rdlong	local10, objptr
08824     18 33 02 F6 | 	mov	local11, local10
08828     01 32 66 F0 | 	shl	local11, #1
0882c     18 33 02 F1 | 	add	local11, local10
08830     02 32 66 F0 | 	shl	local11, #2
08834     03 00 00 FF 
08838     00 E4 85 F1 | 	sub	objptr, ##1536
0883c     F2 32 02 F1 | 	add	local11, objptr
08840     08 32 06 F1 | 	add	local11, #8
08844     19 2B 62 FC | 	wrlong	local07, local11
08848     03 00 00 FF 
0884c     00 E4 05 F1 | 	add	objptr, ##1536
08850     F2 26 02 FB | 	rdlong	local05, objptr
08854     01 26 06 F1 | 	add	local05, #1
08858     F2 26 62 FC | 	wrlong	local05, objptr
0885c     4A 00 00 FF 
08860     7C E4 85 F1 | 	sub	objptr, ##38012
08864                 | LR__0754
08864                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
08864     37 00 00 FF 
08868     44 E4 05 F1 | 	add	objptr, ##28228
0886c     F2 24 02 FB | 	rdlong	local04, objptr
08870     03 24 66 F0 | 	shl	local04, #3
08874     02 00 00 FF 
08878     38 E4 85 F1 | 	sub	objptr, ##1080
0887c     F2 24 02 F1 | 	add	local04, objptr
08880     04 24 06 F1 | 	add	local04, #4
08884     12 2D 02 FB | 	rdlong	local08, local04
08888     11 2C 0E F2 | 	cmp	local08, #17 wz
0888c     35 00 00 FF 
08890     0C E4 85 F1 | 	sub	objptr, ##27148
08894     6C 00 90 AD |  if_e	jmp	#LR__0755
08898     37 00 00 FF 
0889c     44 E4 05 F1 | 	add	objptr, ##28228
088a0     F2 2C 02 FB | 	rdlong	local08, objptr
088a4     03 2C 66 F0 | 	shl	local08, #3
088a8     02 00 00 FF 
088ac     38 E4 85 F1 | 	sub	objptr, ##1080
088b0     F2 2C 02 F1 | 	add	local08, objptr
088b4     04 2C 06 F1 | 	add	local08, #4
088b8     16 2D 02 FB | 	rdlong	local08, local08
088bc     12 2C 0E F2 | 	cmp	local08, #18 wz
088c0     35 00 00 FF 
088c4     0C E4 85 F1 | 	sub	objptr, ##27148
088c8     38 00 90 AD |  if_e	jmp	#LR__0755
088cc     37 00 00 FF 
088d0     44 E4 05 F1 | 	add	objptr, ##28228
088d4     F2 32 02 FB | 	rdlong	local11, objptr
088d8     03 32 66 F0 | 	shl	local11, #3
088dc     02 00 00 FF 
088e0     38 E4 85 F1 | 	sub	objptr, ##1080
088e4     F2 32 02 F1 | 	add	local11, objptr
088e8     04 32 06 F1 | 	add	local11, #4
088ec     19 33 02 FB | 	rdlong	local11, local11
088f0     FE 33 0E F2 | 	cmp	local11, #510 wz
088f4     35 00 00 FF 
088f8     0C E4 85 F1 | 	sub	objptr, ##27148
088fc     16 FA 05 56 |  if_ne	mov	result1, #22
08900     68 00 90 5D |  if_ne	jmp	#LR__0757
08904                 | LR__0755
08904     37 00 00 FF 
08908     44 E4 05 F1 | 	add	objptr, ##28228
0890c     F2 24 02 FB | 	rdlong	local04, objptr
08910     01 24 06 F1 | 	add	local04, #1
08914     F2 24 62 FC | 	wrlong	local04, objptr
08918     03 24 66 F0 | 	shl	local04, #3
0891c     02 00 00 FF 
08920     38 E4 85 F1 | 	sub	objptr, ##1080
08924     F2 24 02 F1 | 	add	local04, objptr
08928     04 24 06 F1 | 	add	local04, #4
0892c     12 2D 02 FB | 	rdlong	local08, local04
08930     FE 2D 0E F2 | 	cmp	local08, #510 wz
08934     35 00 00 FF 
08938     0C E4 85 F1 | 	sub	objptr, ##27148
0893c     28 00 90 AD |  if_e	jmp	#LR__0756
08940     37 00 00 FF 
08944     44 E4 05 F1 | 	add	objptr, ##28228
08948     F2 32 02 FB | 	rdlong	local11, objptr
0894c     0E 00 00 FF 
08950     1C E4 05 F1 | 	add	objptr, ##7196
08954     F2 30 02 FB | 	rdlong	local10, objptr
08958     45 00 00 FF 
0895c     60 E4 85 F1 | 	sub	objptr, ##35424
08960     18 33 52 F2 | 	cmps	local11, local10 wc
08964     E4 FA 9F CD |  if_b	jmp	#LR__0751
08968                 | LR__0756
08968                 | ' return 0
08968     00 FA 05 F6 | 	mov	result1, #0
0896c                 | LR__0757
0896c     A7 F0 03 F6 | 	mov	ptra, fp
08970     B2 00 A0 FD | 	call	#popregs_
08974                 | _compile_print_ret
08974     2D 00 64 FD | 	ret
08978                 | 
08978                 | ' 
08978                 | ' function compile_if() as ulong  
08978                 | _compile_if
08978     05 4A 05 F6 | 	mov	COUNT_, #5
0897c     A8 00 A0 FD | 	call	#pushregs_
08980                 | _compile_if_enter
08980     C8 1A B0 FD | 	call	#_expr
08984                 | ' expr()
08984                 | ' return 0
08984     37 00 00 FF 
08988     44 E4 05 F1 | 	add	objptr, ##28228
0898c     F2 FA 01 FB | 	rdlong	result1, objptr
08990     01 FA 05 F1 | 	add	result1, #1
08994     F2 FA 61 FC | 	wrlong	result1, objptr
08998     58 22 06 F6 | 	mov	local03, #88
0899c     0F 25 02 F6 | 	mov	local04, local01
089a0     10 27 02 F6 | 	mov	local05, local02
089a4     11 1F 02 F6 | 	mov	local01, local03
089a8     13 00 00 FF 
089ac     38 E4 05 F1 | 	add	objptr, ##9784
089b0     F2 12 02 FB | 	rdlong	arg01, objptr
089b4     09 FB 01 F6 | 	mov	result1, arg01
089b8     01 FA 65 F0 | 	shl	result1, #1
089bc     09 FB 01 F1 | 	add	result1, arg01
089c0     02 FA 65 F0 | 	shl	result1, #2
089c4     03 00 00 FF 
089c8     00 E4 85 F1 | 	sub	objptr, ##1536
089cc     F2 FA 01 F1 | 	add	result1, objptr
089d0     FD 24 62 FC | 	wrlong	local04, result1
089d4     03 00 00 FF 
089d8     00 E4 05 F1 | 	add	objptr, ##1536
089dc     F2 12 02 FB | 	rdlong	arg01, objptr
089e0     09 25 02 F6 | 	mov	local04, arg01
089e4     01 24 66 F0 | 	shl	local04, #1
089e8     09 25 02 F1 | 	add	local04, arg01
089ec     02 24 66 F0 | 	shl	local04, #2
089f0     03 00 00 FF 
089f4     00 E4 85 F1 | 	sub	objptr, ##1536
089f8     F2 24 02 F1 | 	add	local04, objptr
089fc     04 24 06 F1 | 	add	local04, #4
08a00     12 27 62 FC | 	wrlong	local05, local04
08a04     03 00 00 FF 
08a08     00 E4 05 F1 | 	add	objptr, ##1536
08a0c     F2 24 02 FB | 	rdlong	local04, objptr
08a10     12 27 02 F6 | 	mov	local05, local04
08a14     01 26 66 F0 | 	shl	local05, #1
08a18     12 27 02 F1 | 	add	local05, local04
08a1c     02 26 66 F0 | 	shl	local05, #2
08a20     03 00 00 FF 
08a24     00 E4 85 F1 | 	sub	objptr, ##1536
08a28     F2 26 02 F1 | 	add	local05, objptr
08a2c     08 26 06 F1 | 	add	local05, #8
08a30     13 1F 62 FC | 	wrlong	local01, local05
08a34     03 00 00 FF 
08a38     00 E4 05 F1 | 	add	objptr, ##1536
08a3c     F2 24 02 FB | 	rdlong	local04, objptr
08a40     01 24 06 F1 | 	add	local04, #1
08a44     F2 24 62 FC | 	wrlong	local04, objptr
08a48                 | ' 
08a48                 | ' 'print "In compile_if"
08a48                 | ' compile_fun_1p()
08a48                 | ' cmd=lparts(ct).token : ct+=1
08a48                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
08a48                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
08a48                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
08a48     13 00 00 FF 
08a4c     38 E4 85 F1 | 	sub	objptr, ##9784
08a50     F2 26 02 FB | 	rdlong	local05, objptr
08a54     01 26 06 F1 | 	add	local05, #1
08a58     03 26 66 F0 | 	shl	local05, #3
08a5c     02 00 00 FF 
08a60     38 E4 85 F1 | 	sub	objptr, ##1080
08a64     F2 26 02 F1 | 	add	local05, objptr
08a68     13 13 02 FB | 	rdlong	arg01, local05
08a6c     35 00 00 FF 
08a70     0C E4 85 F1 | 	sub	objptr, ##27148
08a74                 | ' 
08a74                 | ' select case s
08a74     81 01 00 FF 
08a78     33 15 06 F6 | 	mov	arg02, ##@LR__5138
08a7c     D0 7E B1 FD | 	call	#__system___string_cmp
08a80     00 FA 0D F2 | 	cmp	result1, #0 wz
08a84     1B FA 05 A6 |  if_e	mov	result1, #27
08a88     00 FA 05 56 |  if_ne	mov	result1, #0
08a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
08a90     0C 00 90 AD |  if_e	jmp	#LR__0760
08a94     05 12 06 F6 | 	mov	arg01, #5
08a98     A4 ED BF FD | 	call	#_compile_immediate_assign
08a9c     08 00 90 FD | 	jmp	#LR__0761
08aa0                 | LR__0760
08aa0     05 12 06 F6 | 	mov	arg01, #5
08aa4     D4 E2 BF FD | 	call	#_compile_immediate
08aa8                 | LR__0761
08aa8                 | ' 
08aa8                 | ' 
08aa8                 | ' return 0
08aa8     00 FA 05 F6 | 	mov	result1, #0
08aac     A7 F0 03 F6 | 	mov	ptra, fp
08ab0     B2 00 A0 FD | 	call	#popregs_
08ab4                 | _compile_if_ret
08ab4     2D 00 64 FD | 	ret
08ab8                 | 
08ab8                 | ' 
08ab8                 | ' function compile_else() as ulong  
08ab8                 | _compile_else
08ab8     05 4A 05 F6 | 	mov	COUNT_, #5
08abc     A8 00 A0 FD | 	call	#pushregs_
08ac0                 | _compile_else_enter
08ac0     5A 22 06 F6 | 	mov	local03, #90
08ac4     0F 25 02 F6 | 	mov	local04, local01
08ac8     10 27 02 F6 | 	mov	local05, local02
08acc     11 1F 02 F6 | 	mov	local01, local03
08ad0     4A 00 00 FF 
08ad4     7C E4 05 F1 | 	add	objptr, ##38012
08ad8     F2 12 02 FB | 	rdlong	arg01, objptr
08adc     09 FB 01 F6 | 	mov	result1, arg01
08ae0     01 FA 65 F0 | 	shl	result1, #1
08ae4     09 FB 01 F1 | 	add	result1, arg01
08ae8     02 FA 65 F0 | 	shl	result1, #2
08aec     03 00 00 FF 
08af0     00 E4 85 F1 | 	sub	objptr, ##1536
08af4     F2 FA 01 F1 | 	add	result1, objptr
08af8     FD 24 62 FC | 	wrlong	local04, result1
08afc     03 00 00 FF 
08b00     00 E4 05 F1 | 	add	objptr, ##1536
08b04     F2 FA 01 FB | 	rdlong	result1, objptr
08b08     FD 24 02 F6 | 	mov	local04, result1
08b0c     01 24 66 F0 | 	shl	local04, #1
08b10     FD 24 02 F1 | 	add	local04, result1
08b14     02 24 66 F0 | 	shl	local04, #2
08b18     03 00 00 FF 
08b1c     00 E4 85 F1 | 	sub	objptr, ##1536
08b20     F2 24 02 F1 | 	add	local04, objptr
08b24     04 24 06 F1 | 	add	local04, #4
08b28     12 27 62 FC | 	wrlong	local05, local04
08b2c     03 00 00 FF 
08b30     00 E4 05 F1 | 	add	objptr, ##1536
08b34     F2 24 02 FB | 	rdlong	local04, objptr
08b38     12 27 02 F6 | 	mov	local05, local04
08b3c     01 26 66 F0 | 	shl	local05, #1
08b40     12 27 02 F1 | 	add	local05, local04
08b44     02 26 66 F0 | 	shl	local05, #2
08b48     03 00 00 FF 
08b4c     00 E4 85 F1 | 	sub	objptr, ##1536
08b50     F2 26 02 F1 | 	add	local05, objptr
08b54     08 26 06 F1 | 	add	local05, #8
08b58     13 1F 62 FC | 	wrlong	local01, local05
08b5c     03 00 00 FF 
08b60     00 E4 05 F1 | 	add	objptr, ##1536
08b64     F2 24 02 FB | 	rdlong	local04, objptr
08b68     01 24 06 F1 | 	add	local04, #1
08b6c     F2 24 62 FC | 	wrlong	local04, objptr
08b70                 | ' 
08b70                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
08b70                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
08b70     13 00 00 FF 
08b74     38 E4 85 F1 | 	sub	objptr, ##9784
08b78     F2 26 02 FB | 	rdlong	local05, objptr
08b7c     01 26 06 F1 | 	add	local05, #1
08b80     03 26 66 F0 | 	shl	local05, #3
08b84     02 00 00 FF 
08b88     38 E4 85 F1 | 	sub	objptr, ##1080
08b8c     F2 26 02 F1 | 	add	local05, objptr
08b90     13 13 02 FB | 	rdlong	arg01, local05
08b94     35 00 00 FF 
08b98     0C E4 85 F1 | 	sub	objptr, ##27148
08b9c                 | ' 
08b9c                 | ' select case s
08b9c     81 01 00 FF 
08ba0     33 15 06 F6 | 	mov	arg02, ##@LR__5138
08ba4     A8 7D B1 FD | 	call	#__system___string_cmp
08ba8     00 FA 0D F2 | 	cmp	result1, #0 wz
08bac     1B FA 05 A6 |  if_e	mov	result1, #27
08bb0     00 FA 05 56 |  if_ne	mov	result1, #0
08bb4     00 FA 0D F2 | 	cmp	result1, #0 wz
08bb8     0C 00 90 AD |  if_e	jmp	#LR__0770
08bbc     05 12 06 F6 | 	mov	arg01, #5
08bc0     7C EC BF FD | 	call	#_compile_immediate_assign
08bc4     08 00 90 FD | 	jmp	#LR__0771
08bc8                 | LR__0770
08bc8     05 12 06 F6 | 	mov	arg01, #5
08bcc     AC E1 BF FD | 	call	#_compile_immediate
08bd0                 | LR__0771
08bd0                 | ' 
08bd0                 | ' 
08bd0                 | ' return 0
08bd0     00 FA 05 F6 | 	mov	result1, #0
08bd4     A7 F0 03 F6 | 	mov	ptra, fp
08bd8     B2 00 A0 FD | 	call	#popregs_
08bdc                 | _compile_else_ret
08bdc     2D 00 64 FD | 	ret
08be0                 | 
08be0                 | ' 
08be0                 | ' 
08be0                 | ' function compile_dim() as ulong  
08be0                 | _compile_dim
08be0     11 4A 05 F6 | 	mov	COUNT_, #17
08be4     A8 00 A0 FD | 	call	#pushregs_
08be8     01 1E 06 F6 | 	mov	local01, #1
08bec     01 20 06 F6 | 	mov	local02, #1
08bf0     01 22 06 F6 | 	mov	local03, #1
08bf4                 | ' 
08bf4                 | ' dims(0)=1: dims(1)=1: dims(2)=1
08bf4                 | ' 
08bf4                 | ' if isname(lparts(ct).part$) then 
08bf4     37 00 00 FF 
08bf8     44 E4 05 F1 | 	add	objptr, ##28228
08bfc     F2 18 02 FB | 	rdlong	arg04, objptr
08c00     03 18 66 F0 | 	shl	arg04, #3
08c04     02 00 00 FF 
08c08     38 E4 85 F1 | 	sub	objptr, ##1080
08c0c     F2 18 02 F1 | 	add	arg04, objptr
08c10     0C 13 02 FB | 	rdlong	arg01, arg04
08c14     35 00 00 FF 
08c18     0C E4 85 F1 | 	sub	objptr, ##27148
08c1c     F8 D1 BF FD | 	call	#_isname
08c20     00 FA 0D F2 | 	cmp	result1, #0 wz
08c24     AC 05 90 AD |  if_e	jmp	#LR__0804
08c28     37 00 00 FF 
08c2c     44 E4 05 F1 | 	add	objptr, ##28228
08c30     F2 24 02 FB | 	rdlong	local04, objptr
08c34     03 24 66 F0 | 	shl	local04, #3
08c38     02 00 00 FF 
08c3c     38 E4 85 F1 | 	sub	objptr, ##1080
08c40     F2 24 02 F1 | 	add	local04, objptr
08c44     12 27 02 FB | 	rdlong	local05, local04
08c48     01 28 66 F6 | 	neg	local06, #1
08c4c                 | '   varname2$=lparts(ct).part$ 
08c4c                 | '   j=-1
08c4c                 | '   if varnum>0 then
08c4c     04 E4 85 F1 | 	sub	objptr, #4
08c50     F2 2A 02 FB | 	rdlong	local07, objptr
08c54     35 00 00 FF 
08c58     08 E4 85 F1 | 	sub	objptr, ##27144
08c5c     01 2A 56 F2 | 	cmps	local07, #1 wc
08c60     58 00 90 CD |  if_b	jmp	#LR__0782
08c64                 | '  '   print "in dim, varnum=";varnum
08c64                 | '     for i=0 to varnum-1
08c64     00 2C 06 F6 | 	mov	local08, #0
08c68     35 00 00 FF 
08c6c     08 E4 05 F1 | 	add	objptr, ##27144
08c70     F2 2E 02 FB | 	rdlong	local09, objptr
08c74     35 00 00 FF 
08c78     08 E4 85 F1 | 	sub	objptr, ##27144
08c7c                 | LR__0780
08c7c     17 2D 52 F2 | 	cmps	local08, local09 wc
08c80     38 00 90 3D |  if_ae	jmp	#LR__0781
08c84                 | '       if variables(i).name=varname2$ then j=i : exit
08c84     16 25 02 F6 | 	mov	local04, local08
08c88     04 24 66 F0 | 	shl	local04, #4
08c8c     14 00 00 FF 
08c90     F8 E5 05 F1 | 	add	objptr, ##10744
08c94     F2 24 02 F1 | 	add	local04, objptr
08c98     12 13 02 FB | 	rdlong	arg01, local04
08c9c     13 15 02 F6 | 	mov	arg02, local05
08ca0     14 00 00 FF 
08ca4     F8 E5 85 F1 | 	sub	objptr, ##10744
08ca8     A4 7C B1 FD | 	call	#__system___string_cmp
08cac     00 FA 0D F2 | 	cmp	result1, #0 wz
08cb0     16 29 02 A6 |  if_e	mov	local06, local08
08cb4     01 2C 06 51 |  if_ne	add	local08, #1
08cb8     C0 FF 9F 5D |  if_ne	jmp	#LR__0780
08cbc                 | LR__0781
08cbc                 | LR__0782
08cbc                 | ' '  if j<>-1 then printerror (42) : return 42
08cbc                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
08cbc     FF FF 7F FF 
08cc0     FF 29 0E F2 | 	cmp	local06, ##-1 wz
08cc4     35 00 00 AF 
08cc8     08 E4 05 A1 |  if_e	add	objptr, ##27144
08ccc     F2 28 02 AB |  if_e	rdlong	local06, objptr
08cd0     35 00 00 AF 
08cd4     08 E4 85 A1 |  if_e	sub	objptr, ##27144
08cd8     78 00 90 AD |  if_e	jmp	#LR__0783
08cdc     00 12 06 F6 | 	mov	arg01, #0
08ce0     84 D6 B1 FD | 	call	#__system___getiolock_0540
08ce4     FD 12 02 F6 | 	mov	arg01, result1
08ce8     3C 7C B1 FD | 	call	#__system___lockmem
08cec     83 01 00 FF 
08cf0     20 15 06 F6 | 	mov	arg02, ##@LR__5353
08cf4     00 12 06 F6 | 	mov	arg01, #0
08cf8     00 16 06 F6 | 	mov	arg03, #0
08cfc     1C 89 B1 FD | 	call	#__system___basic_print_string
08d00     59 00 00 FF 
08d04     C8 E5 05 F1 | 	add	objptr, ##46024
08d08     F2 14 02 FB | 	rdlong	arg02, objptr
08d0c     59 00 00 FF 
08d10     C8 E5 85 F1 | 	sub	objptr, ##46024
08d14     00 12 06 F6 | 	mov	arg01, #0
08d18     00 16 06 F6 | 	mov	arg03, #0
08d1c     0A 18 06 F6 | 	mov	arg04, #10
08d20     7C 89 B1 FD | 	call	#__system___basic_print_unsigned
08d24     83 01 00 FF 
08d28     2E 15 06 F6 | 	mov	arg02, ##@LR__5354
08d2c     00 12 06 F6 | 	mov	arg01, #0
08d30     00 16 06 F6 | 	mov	arg03, #0
08d34     E4 88 B1 FD | 	call	#__system___basic_print_string
08d38     00 12 06 F6 | 	mov	arg01, #0
08d3c     0A 14 06 F6 | 	mov	arg02, #10
08d40     00 16 06 F6 | 	mov	arg03, #0
08d44     7C 88 B1 FD | 	call	#__system___basic_print_char
08d48     00 12 06 F6 | 	mov	arg01, #0
08d4c     18 D6 B1 FD | 	call	#__system___getiolock_0540
08d50     FD 00 68 FC | 	wrlong	#0, result1
08d54                 | LR__0783
08d54                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
08d54     37 00 00 FF 
08d58     44 E4 05 F1 | 	add	objptr, ##28228
08d5c     F2 18 02 FB | 	rdlong	arg04, objptr
08d60     01 18 06 F1 | 	add	arg04, #1
08d64     03 18 66 F0 | 	shl	arg04, #3
08d68     02 00 00 FF 
08d6c     38 E4 85 F1 | 	sub	objptr, ##1080
08d70     F2 18 02 F1 | 	add	arg04, objptr
08d74     0C 13 02 FB | 	rdlong	arg01, arg04
08d78     83 01 00 FF 
08d7c     4F 15 06 F6 | 	mov	arg02, ##@LR__5355
08d80     35 00 00 FF 
08d84     0C E4 85 F1 | 	sub	objptr, ##27148
08d88     C4 7B B1 FD | 	call	#__system___string_cmp
08d8c     00 FA 0D F2 | 	cmp	result1, #0 wz
08d90     50 00 90 AD |  if_e	jmp	#LR__0784
08d94     37 00 00 FF 
08d98     44 E4 05 F1 | 	add	objptr, ##28228
08d9c     F2 2E 02 FB | 	rdlong	local09, objptr
08da0     01 2E 06 F1 | 	add	local09, #1
08da4     03 2E 66 F0 | 	shl	local09, #3
08da8     02 00 00 FF 
08dac     38 E4 85 F1 | 	sub	objptr, ##1080
08db0     F2 2E 02 F1 | 	add	local09, objptr
08db4     17 13 02 FB | 	rdlong	arg01, local09
08db8     83 01 00 FF 
08dbc     51 15 06 F6 | 	mov	arg02, ##@LR__5356
08dc0     35 00 00 FF 
08dc4     0C E4 85 F1 | 	sub	objptr, ##27148
08dc8     84 7B B1 FD | 	call	#__system___string_cmp
08dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
08dd0     10 00 90 AD |  if_e	jmp	#LR__0784
08dd4     2B 12 06 F6 | 	mov	arg01, #43
08dd8     E8 47 B1 FD | 	call	#_printerror
08ddc     2B FA 05 F6 | 	mov	result1, #43
08de0     00 05 90 FD | 	jmp	#LR__0806
08de4                 | LR__0784
08de4                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
08de4     37 00 00 FF 
08de8     44 E4 05 F1 | 	add	objptr, ##28228
08dec     F2 14 02 FB | 	rdlong	arg02, objptr
08df0     01 14 06 F1 | 	add	arg02, #1
08df4     03 14 66 F0 | 	shl	arg02, #3
08df8     02 00 00 FF 
08dfc     38 E4 85 F1 | 	sub	objptr, ##1080
08e00     F2 14 02 F1 | 	add	arg02, objptr
08e04     0A 13 02 FB | 	rdlong	arg01, arg02
08e08     83 01 00 FF 
08e0c     54 15 06 F6 | 	mov	arg02, ##@LR__5357
08e10     35 00 00 FF 
08e14     0C E4 85 F1 | 	sub	objptr, ##27148
08e18     34 7B B1 FD | 	call	#__system___string_cmp
08e1c     00 FA 0D F2 | 	cmp	result1, #0 wz
08e20     37 00 00 AF 
08e24     44 E4 05 A1 |  if_e	add	objptr, ##28228
08e28     F2 30 02 AB |  if_e	rdlong	local10, objptr
08e2c     37 00 00 AF 
08e30     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08e34     01 30 06 A1 |  if_e	add	local10, #1
08e38     7C 01 90 AD |  if_e	jmp	#LR__0790
08e3c     37 00 00 FF 
08e40     44 E4 05 F1 | 	add	objptr, ##28228
08e44     F2 30 02 FB | 	rdlong	local10, objptr
08e48     37 00 00 FF 
08e4c     44 E4 85 F1 | 	sub	objptr, ##28228
08e50     02 30 06 F1 | 	add	local10, #2
08e54     00 32 06 F6 | 	mov	local11, #0
08e58                 | '   l=ct+2 : m=0 : do
08e58                 | LR__0785
08e58                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
08e58                 | '     if isdec(lparts(l).part$) then 
08e58     18 25 02 F6 | 	mov	local04, local10
08e5c     03 24 66 F0 | 	shl	local04, #3
08e60     35 00 00 FF 
08e64     0C E4 05 F1 | 	add	objptr, ##27148
08e68     F2 24 02 F1 | 	add	local04, objptr
08e6c     12 13 02 FB | 	rdlong	arg01, local04
08e70     35 00 00 FF 
08e74     0C E4 85 F1 | 	sub	objptr, ##27148
08e78     40 D6 BF FD | 	call	#_isdec
08e7c     00 FA 0D F2 | 	cmp	result1, #0 wz
08e80     44 00 90 AD |  if_e	jmp	#LR__0786
08e84     19 35 02 F6 | 	mov	local12, local11
08e88     0F 35 06 F1 | 	add	local12, #local01
08e8c     18 2F 02 F6 | 	mov	local09, local10
08e90     03 2E 66 F0 | 	shl	local09, #3
08e94     35 00 00 FF 
08e98     0C E4 05 F1 | 	add	objptr, ##27148
08e9c     F2 2E 02 F1 | 	add	local09, objptr
08ea0     17 13 02 FB | 	rdlong	arg01, local09
08ea4     00 14 06 F6 | 	mov	arg02, #0
08ea8     35 00 00 FF 
08eac     0C E4 85 F1 | 	sub	objptr, ##27148
08eb0     A0 AC B1 FD | 	call	#__system____builtin_atoi
08eb4     FD 36 02 F6 | 	mov	local13, result1
08eb8                 | 	'.live	local13
08eb8                 | 	'.live	local12
08eb8     00 34 8E F9 | 	altd	local12, #0
08ebc     1B 35 02 F6 | 	mov	local12, local13
08ec0     01 32 06 F1 | 	add	local11, #1
08ec4     10 00 90 FD | 	jmp	#LR__0787
08ec8                 | LR__0786
08ec8     11 12 06 F6 | 	mov	arg01, #17
08ecc     F4 46 B1 FD | 	call	#_printerror
08ed0                 | '       printerror (17)  : return(17)
08ed0     11 FA 05 F6 | 	mov	result1, #17
08ed4     0C 04 90 FD | 	jmp	#LR__0806
08ed8                 | LR__0787
08ed8                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
08ed8     18 25 02 F6 | 	mov	local04, local10
08edc     01 24 06 F1 | 	add	local04, #1
08ee0     03 24 66 F0 | 	shl	local04, #3
08ee4     35 00 00 FF 
08ee8     0C E4 05 F1 | 	add	objptr, ##27148
08eec     F2 24 02 F1 | 	add	local04, objptr
08ef0     12 13 02 FB | 	rdlong	arg01, local04
08ef4     83 01 00 FF 
08ef8     57 15 06 F6 | 	mov	arg02, ##@LR__5358
08efc     35 00 00 FF 
08f00     0C E4 85 F1 | 	sub	objptr, ##27148
08f04     48 7A B1 FD | 	call	#__system___string_cmp
08f08     00 FA 0D F2 | 	cmp	result1, #0 wz
08f0c     48 00 90 AD |  if_e	jmp	#LR__0788
08f10     18 37 02 F6 | 	mov	local13, local10
08f14     01 36 06 F1 | 	add	local13, #1
08f18     03 36 66 F0 | 	shl	local13, #3
08f1c     35 00 00 FF 
08f20     0C E4 05 F1 | 	add	objptr, ##27148
08f24     F2 36 02 F1 | 	add	local13, objptr
08f28     1B 13 02 FB | 	rdlong	arg01, local13
08f2c     83 01 00 FF 
08f30     59 15 06 F6 | 	mov	arg02, ##@LR__5359
08f34     35 00 00 FF 
08f38     0C E4 85 F1 | 	sub	objptr, ##27148
08f3c     10 7A B1 FD | 	call	#__system___string_cmp
08f40     00 FA 0D F2 | 	cmp	result1, #0 wz
08f44     10 00 90 AD |  if_e	jmp	#LR__0788
08f48     2C 12 06 F6 | 	mov	arg01, #44
08f4c     74 46 B1 FD | 	call	#_printerror
08f50     2C FA 05 F6 | 	mov	result1, #44
08f54     8C 03 90 FD | 	jmp	#LR__0806
08f58                 | LR__0788
08f58     02 30 06 F1 | 	add	local10, #2
08f5c     18 25 02 F6 | 	mov	local04, local10
08f60     01 24 86 F1 | 	sub	local04, #1
08f64     03 24 66 F0 | 	shl	local04, #3
08f68     35 00 00 FF 
08f6c     0C E4 05 F1 | 	add	objptr, ##27148
08f70     F2 24 02 F1 | 	add	local04, objptr
08f74     12 13 02 FB | 	rdlong	arg01, local04
08f78     83 01 00 FF 
08f7c     5B 15 06 F6 | 	mov	arg02, ##@LR__5360
08f80     35 00 00 FF 
08f84     0C E4 85 F1 | 	sub	objptr, ##27148
08f88     C4 79 B1 FD | 	call	#__system___string_cmp
08f8c     00 FA 0D F2 | 	cmp	result1, #0 wz
08f90     03 32 56 52 |  if_ne	cmps	local11, #3 wc
08f94     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0785
08f98                 | '   if m>3 then printerror(45): return(45)
08f98     04 32 56 F2 | 	cmps	local11, #4 wc
08f9c     10 00 90 CD |  if_b	jmp	#LR__0789
08fa0     2D 12 06 F6 | 	mov	arg01, #45
08fa4     1C 46 B1 FD | 	call	#_printerror
08fa8     2D FA 05 F6 | 	mov	result1, #45
08fac     34 03 90 FD | 	jmp	#LR__0806
08fb0                 | LR__0789
08fb0     00 39 06 F6 | 	mov	local14, #256
08fb4     0C 3A 06 F6 | 	mov	local15, #12
08fb8                 | LR__0790
08fb8                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
08fb8                 | '   arraytype=array_no_type : esize=12
08fb8                 | ' 1350 
08fb8                 | '   if lparts(l).part$="as" then
08fb8     18 25 02 F6 | 	mov	local04, local10
08fbc     03 24 66 F0 | 	shl	local04, #3
08fc0     35 00 00 FF 
08fc4     0C E4 05 F1 | 	add	objptr, ##27148
08fc8     F2 24 02 F1 | 	add	local04, objptr
08fcc     12 13 02 FB | 	rdlong	arg01, local04
08fd0     83 01 00 FF 
08fd4     5D 15 06 F6 | 	mov	arg02, ##@LR__5361
08fd8     35 00 00 FF 
08fdc     0C E4 85 F1 | 	sub	objptr, ##27148
08fe0     6C 79 B1 FD | 	call	#__system___string_cmp
08fe4     00 FA 0D F2 | 	cmp	result1, #0 wz
08fe8     F8 01 90 5D |  if_ne	jmp	#LR__0805
08fec                 | '     select case lparts(l+1).part$
08fec     18 35 02 F6 | 	mov	local12, local10
08ff0     01 34 06 F1 | 	add	local12, #1
08ff4     03 34 66 F0 | 	shl	local12, #3
08ff8     35 00 00 FF 
08ffc     0C E4 05 F1 | 	add	objptr, ##27148
09000     F2 34 02 F1 | 	add	local12, objptr
09004     1A 3D 02 FB | 	rdlong	local16, local12
09008     83 01 00 FF 
0900c     60 15 06 F6 | 	mov	arg02, ##@LR__5362
09010     1E 13 02 F6 | 	mov	arg01, local16
09014     35 00 00 FF 
09018     0C E4 85 F1 | 	sub	objptr, ##27148
0901c     30 79 B1 FD | 	call	#__system___string_cmp
09020     00 FA 0D F2 | 	cmp	result1, #0 wz
09024     0C 01 90 AD |  if_e	jmp	#LR__0791
09028     83 01 00 FF 
0902c     65 15 06 F6 | 	mov	arg02, ##@LR__5363
09030     1E 13 02 F6 | 	mov	arg01, local16
09034     18 79 B1 FD | 	call	#__system___string_cmp
09038     00 FA 0D F2 | 	cmp	result1, #0 wz
0903c     00 01 90 AD |  if_e	jmp	#LR__0792
09040     83 01 00 FF 
09044     6B 15 06 F6 | 	mov	arg02, ##@LR__5364
09048     1E 13 02 F6 | 	mov	arg01, local16
0904c     00 79 B1 FD | 	call	#__system___string_cmp
09050     00 FA 0D F2 | 	cmp	result1, #0 wz
09054     F4 00 90 AD |  if_e	jmp	#LR__0793
09058     83 01 00 FF 
0905c     71 15 06 F6 | 	mov	arg02, ##@LR__5365
09060     1E 13 02 F6 | 	mov	arg01, local16
09064     E8 78 B1 FD | 	call	#__system___string_cmp
09068     00 FA 0D F2 | 	cmp	result1, #0 wz
0906c     E8 00 90 AD |  if_e	jmp	#LR__0794
09070     83 01 00 FF 
09074     78 15 06 F6 | 	mov	arg02, ##@LR__5366
09078     1E 13 02 F6 | 	mov	arg01, local16
0907c     D0 78 B1 FD | 	call	#__system___string_cmp
09080     00 FA 0D F2 | 	cmp	result1, #0 wz
09084     DC 00 90 AD |  if_e	jmp	#LR__0795
09088     83 01 00 FF 
0908c     7D 15 06 F6 | 	mov	arg02, ##@LR__5367
09090     1E 13 02 F6 | 	mov	arg01, local16
09094     B8 78 B1 FD | 	call	#__system___string_cmp
09098     00 FA 0D F2 | 	cmp	result1, #0 wz
0909c     D0 00 90 AD |  if_e	jmp	#LR__0796
090a0     83 01 00 FF 
090a4     85 15 06 F6 | 	mov	arg02, ##@LR__5368
090a8     1E 13 02 F6 | 	mov	arg01, local16
090ac     A0 78 B1 FD | 	call	#__system___string_cmp
090b0     00 FA 0D F2 | 	cmp	result1, #0 wz
090b4     C4 00 90 AD |  if_e	jmp	#LR__0797
090b8     83 01 00 FF 
090bc     8B 15 06 F6 | 	mov	arg02, ##@LR__5369
090c0     1E 13 02 F6 | 	mov	arg01, local16
090c4     88 78 B1 FD | 	call	#__system___string_cmp
090c8     00 FA 0D F2 | 	cmp	result1, #0 wz
090cc     B8 00 90 AD |  if_e	jmp	#LR__0798
090d0     83 01 00 FF 
090d4     91 15 06 F6 | 	mov	arg02, ##@LR__5370
090d8     1E 13 02 F6 | 	mov	arg01, local16
090dc     70 78 B1 FD | 	call	#__system___string_cmp
090e0     00 FA 0D F2 | 	cmp	result1, #0 wz
090e4     AC 00 90 AD |  if_e	jmp	#LR__0799
090e8     83 01 00 FF 
090ec     98 15 06 F6 | 	mov	arg02, ##@LR__5371
090f0     1E 13 02 F6 | 	mov	arg01, local16
090f4     58 78 B1 FD | 	call	#__system___string_cmp
090f8     00 FA 0D F2 | 	cmp	result1, #0 wz
090fc     A0 00 90 AD |  if_e	jmp	#LR__0800
09100     83 01 00 FF 
09104     9F 15 06 F6 | 	mov	arg02, ##@LR__5372
09108     1E 13 02 F6 | 	mov	arg01, local16
0910c     40 78 B1 FD | 	call	#__system___string_cmp
09110     00 FA 0D F2 | 	cmp	result1, #0 wz
09114     94 00 90 AD |  if_e	jmp	#LR__0801
09118     83 01 00 FF 
0911c     A6 15 06 F6 | 	mov	arg02, ##@LR__5373
09120     1E 13 02 F6 | 	mov	arg01, local16
09124     28 78 B1 FD | 	call	#__system___string_cmp
09128     00 FA 0D F2 | 	cmp	result1, #0 wz
0912c     88 00 90 AD |  if_e	jmp	#LR__0802
09130     90 00 90 FD | 	jmp	#LR__0803
09134                 | LR__0791
09134     01 39 06 F6 | 	mov	local14, #257
09138     01 3A 06 F6 | 	mov	local15, #1
0913c     A4 00 90 FD | 	jmp	#LR__0805
09140                 | LR__0792
09140     02 39 06 F6 | 	mov	local14, #258
09144     01 3A 06 F6 | 	mov	local15, #1
09148     98 00 90 FD | 	jmp	#LR__0805
0914c                 | LR__0793
0914c     03 39 06 F6 | 	mov	local14, #259
09150     02 3A 06 F6 | 	mov	local15, #2
09154     8C 00 90 FD | 	jmp	#LR__0805
09158                 | LR__0794
09158     04 39 06 F6 | 	mov	local14, #260
0915c     02 3A 06 F6 | 	mov	local15, #2
09160     80 00 90 FD | 	jmp	#LR__0805
09164                 | LR__0795
09164     05 39 06 F6 | 	mov	local14, #261
09168     04 3A 06 F6 | 	mov	local15, #4
0916c     74 00 90 FD | 	jmp	#LR__0805
09170                 | LR__0796
09170     05 39 06 F6 | 	mov	local14, #261
09174     04 3A 06 F6 | 	mov	local15, #4
09178     68 00 90 FD | 	jmp	#LR__0805
0917c                 | LR__0797
0917c     06 39 06 F6 | 	mov	local14, #262
09180     04 3A 06 F6 | 	mov	local15, #4
09184     5C 00 90 FD | 	jmp	#LR__0805
09188                 | LR__0798
09188     07 39 06 F6 | 	mov	local14, #263
0918c     08 3A 06 F6 | 	mov	local15, #8
09190     50 00 90 FD | 	jmp	#LR__0805
09194                 | LR__0799
09194     08 39 06 F6 | 	mov	local14, #264
09198     08 3A 06 F6 | 	mov	local15, #8
0919c     44 00 90 FD | 	jmp	#LR__0805
091a0                 | LR__0800
091a0     09 39 06 F6 | 	mov	local14, #265
091a4     04 3A 06 F6 | 	mov	local15, #4
091a8     38 00 90 FD | 	jmp	#LR__0805
091ac                 | LR__0801
091ac     0A 39 06 F6 | 	mov	local14, #266
091b0     08 3A 06 F6 | 	mov	local15, #8
091b4     2C 00 90 FD | 	jmp	#LR__0805
091b8                 | LR__0802
091b8     0B 39 06 F6 | 	mov	local14, #267
091bc     04 3A 06 F6 | 	mov	local15, #4
091c0     20 00 90 FD | 	jmp	#LR__0805
091c4                 | LR__0803
091c4     2F 12 06 F6 | 	mov	arg01, #47
091c8     F8 43 B1 FD | 	call	#_printerror
091cc     2F FA 05 F6 | 	mov	result1, #47
091d0     10 01 90 FD | 	jmp	#LR__0806
091d4                 | LR__0804
091d4     2E 12 06 F6 | 	mov	arg01, #46
091d8     E8 43 B1 FD | 	call	#_printerror
091dc                 | '   printerror(46): return 46
091dc     2E FA 05 F6 | 	mov	result1, #46
091e0     00 01 90 FD | 	jmp	#LR__0806
091e4                 | LR__0805
091e4     0F 3B 02 FD | 	qmul	local15, local01
091e8     18 2A 62 FD | 	getqx	local07
091ec     10 2B 02 FD | 	qmul	local07, local02
091f0     18 3C 62 FD | 	getqx	local16
091f4     11 3D 02 FD | 	qmul	local16, local03
091f8     59 00 00 FF 
091fc     B0 E5 05 F1 | 	add	objptr, ##46000
09200     F2 3E 02 FB | 	rdlong	local17, objptr
09204     1C 15 02 F6 | 	mov	arg02, local14
09208     18 3C 62 FD | 	getqx	local16
0920c     1E 3F 82 F1 | 	sub	local17, local16
09210     10 3E 86 F1 | 	sub	local17, #16
09214     0F 3E 26 F5 | 	andn	local17, #15
09218     F2 3E 62 FC | 	wrlong	local17, objptr
0921c     59 00 00 FF 
09220     B0 E5 85 F1 | 	sub	objptr, ##46000
09224     1F 13 02 F6 | 	mov	arg01, local17
09228     44 45 B1 FD | 	call	#_psdpoke
0922c     1F 13 02 F6 | 	mov	arg01, local17
09230     02 12 06 F1 | 	add	arg01, #2
09234     1D 15 02 F6 | 	mov	arg02, local15
09238     34 45 B1 FD | 	call	#_psdpoke
0923c     1F 13 02 F6 | 	mov	arg01, local17
09240     04 12 06 F1 | 	add	arg01, #4
09244     0F 15 02 F6 | 	mov	arg02, local01
09248     DC 44 B1 FD | 	call	#_pslpoke
0924c     1F 13 02 F6 | 	mov	arg01, local17
09250     08 12 06 F1 | 	add	arg01, #8
09254     10 15 02 F6 | 	mov	arg02, local02
09258     CC 44 B1 FD | 	call	#_pslpoke
0925c     1F 13 02 F6 | 	mov	arg01, local17
09260     0C 12 06 F1 | 	add	arg01, #12
09264     11 15 02 F6 | 	mov	arg02, local03
09268     BC 44 B1 FD | 	call	#_pslpoke
0926c     14 35 02 F6 | 	mov	local12, local06
09270     04 34 66 F0 | 	shl	local12, #4
09274     14 00 00 FF 
09278     F8 E5 05 F1 | 	add	objptr, ##10744
0927c     F2 34 02 F1 | 	add	local12, objptr
09280     1A 27 62 FC | 	wrlong	local05, local12
09284     14 35 02 F6 | 	mov	local12, local06
09288     04 34 66 F0 | 	shl	local12, #4
0928c     F2 34 02 F1 | 	add	local12, objptr
09290     04 34 06 F1 | 	add	local12, #4
09294     1A 3F 62 FC | 	wrlong	local17, local12
09298     14 35 02 F6 | 	mov	local12, local06
0929c     04 34 66 F0 | 	shl	local12, #4
092a0     F2 34 02 F1 | 	add	local12, objptr
092a4     0C 34 06 F1 | 	add	local12, #12
092a8     1A 39 62 FC | 	wrlong	local14, local12
092ac                 | ' memtop=arrayptr
092ac                 | ' 
092ac                 | ' psdpoke arrayptr,arraytype ': print arraytype, arrayptr
092ac                 | ' psdpoke arrayptr+2,esize ': print esize , psdpeek(arrayptr+2)
092ac                 | ' pslpoke arrayptr+4,dims(0)
092ac                 | ' pslpoke arrayptr+8,dims(1)
092ac                 | ' pslpoke arrayptr+12,dims(2)
092ac                 | ' 'for i=0 to 15: print hex$(pspeek(arrayptr+i),2), : next i
092ac                 | ' 'for i=0 to 3: print hex$(pslpeek(arrayptr+4*i),2), : next i
092ac                 | ' 
092ac                 | ' 
092ac                 | ' variables(j).name=varname2$
092ac                 | ' variables(j).value.uresult=arrayptr
092ac                 | ' variables(j).vartype=arraytype
092ac                 | ' if j=varnum then varnum+=1
092ac     20 00 00 FF 
092b0     10 E4 05 F1 | 	add	objptr, ##16400
092b4     F2 2A 02 FB | 	rdlong	local07, objptr
092b8     35 00 00 FF 
092bc     08 E4 85 F1 | 	sub	objptr, ##27144
092c0     15 29 0A F2 | 	cmp	local06, local07 wz
092c4     35 00 00 AF 
092c8     08 E4 05 A1 |  if_e	add	objptr, ##27144
092cc     F2 2A 02 AB |  if_e	rdlong	local07, objptr
092d0     01 2A 06 A1 |  if_e	add	local07, #1
092d4     F2 2A 62 AC |  if_e	wrlong	local07, objptr
092d8     35 00 00 AF 
092dc     08 E4 85 A1 |  if_e	sub	objptr, ##27144
092e0                 | ' 
092e0                 | ' return 0
092e0     00 FA 05 F6 | 	mov	result1, #0
092e4                 | LR__0806
092e4     A7 F0 03 F6 | 	mov	ptra, fp
092e8     B2 00 A0 FD | 	call	#popregs_
092ec                 | _compile_dim_ret
092ec     2D 00 64 FD | 	ret
092f0                 | 
092f0                 | ' 
092f0                 | ' 
092f0                 | ' function compile_for() as ulong  
092f0                 | _compile_for
092f0     07 4A 05 F6 | 	mov	COUNT_, #7
092f4     A8 00 A0 FD | 	call	#pushregs_
092f8                 | ' 
092f8                 | ' 
092f8                 | ' 
092f8                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
092f8     37 00 00 FF 
092fc     44 E4 05 F1 | 	add	objptr, ##28228
09300     F2 14 02 FB | 	rdlong	arg02, objptr
09304     01 14 06 F1 | 	add	arg02, #1
09308     03 14 66 F0 | 	shl	arg02, #3
0930c     02 00 00 FF 
09310     38 E4 85 F1 | 	sub	objptr, ##1080
09314     F2 14 02 F1 | 	add	arg02, objptr
09318     0A 13 02 FB | 	rdlong	arg01, arg02
0931c     35 00 00 FF 
09320     0C E4 85 F1 | 	sub	objptr, ##27148
09324                 | ' 
09324                 | ' select case s
09324     81 01 00 FF 
09328     33 15 06 F6 | 	mov	arg02, ##@LR__5138
0932c     20 76 B1 FD | 	call	#__system___string_cmp
09330     00 FA 0D F2 | 	cmp	result1, #0 wz
09334     1B FA 05 A6 |  if_e	mov	result1, #27
09338     00 FA 05 56 |  if_ne	mov	result1, #0
0933c     00 FA 0D F2 | 	cmp	result1, #0 wz
09340     0C 00 90 AD |  if_e	jmp	#LR__0810
09344     05 12 06 F6 | 	mov	arg01, #5
09348     F4 E4 BF FD | 	call	#_compile_immediate_assign
0934c     10 00 90 FD | 	jmp	#LR__0811
09350                 | LR__0810
09350     20 12 06 F6 | 	mov	arg01, #32
09354     48 E9 BF FD | 	call	#_compile_error
09358     20 FA 05 F6 | 	mov	result1, #32
0935c     E8 02 90 FD | 	jmp	#LR__0817
09360                 | LR__0811
09360     4A 00 00 FF 
09364     7C E4 05 F1 | 	add	objptr, ##38012
09368     F2 12 02 FB | 	rdlong	arg01, objptr
0936c     09 25 02 F6 | 	mov	local04, arg01
09370     01 24 86 F1 | 	sub	local04, #1
09374     12 15 02 F6 | 	mov	arg02, local04
09378     01 14 66 F0 | 	shl	arg02, #1
0937c     12 15 02 F1 | 	add	arg02, local04
09380     02 14 66 F0 | 	shl	arg02, #2
09384     03 00 00 FF 
09388     00 E4 85 F1 | 	sub	objptr, ##1536
0938c     F2 14 02 F1 | 	add	arg02, objptr
09390     0A 1F 02 FB | 	rdlong	local01, arg02
09394     04 14 06 F1 | 	add	arg02, #4
09398     0A 27 02 FB | 	rdlong	local05, arg02
0939c     01 12 86 F1 | 	sub	arg01, #1
093a0     09 29 02 F6 | 	mov	local06, arg01
093a4     01 28 66 F0 | 	shl	local06, #1
093a8     09 29 02 F1 | 	add	local06, arg01
093ac     02 28 66 F0 | 	shl	local06, #2
093b0     F2 28 02 F1 | 	add	local06, objptr
093b4     08 28 06 F1 | 	add	local06, #8
093b8     14 13 02 FB | 	rdlong	arg01, local06
093bc     13 21 02 F6 | 	mov	local02, local05
093c0     09 23 02 F6 | 	mov	local03, arg01
093c4                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
093c4                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
093c4     17 22 0E F2 | 	cmp	local03, #23 wz
093c8     47 00 00 FF 
093cc     7C E4 85 F1 | 	sub	objptr, ##36476
093d0     10 00 90 AD |  if_e	jmp	#LR__0812
093d4     22 12 06 F6 | 	mov	arg01, #34
093d8     C4 E8 BF FD | 	call	#_compile_error
093dc     22 FA 05 F6 | 	mov	result1, #34
093e0     64 02 90 FD | 	jmp	#LR__0817
093e4                 | LR__0812
093e4     0F 2B 02 F6 | 	mov	local07, local01
093e8                 | ' varnum=t1.result.uresult
093e8                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
093e8     37 00 00 FF 
093ec     44 E4 05 F1 | 	add	objptr, ##28228
093f0     F2 24 02 FB | 	rdlong	local04, objptr
093f4     03 24 66 F0 | 	shl	local04, #3
093f8     02 00 00 FF 
093fc     38 E4 85 F1 | 	sub	objptr, ##1080
09400     F2 24 02 F1 | 	add	local04, objptr
09404     12 13 02 FB | 	rdlong	arg01, local04
09408     83 01 00 FF 
0940c     AD 15 06 F6 | 	mov	arg02, ##@LR__5374
09410     35 00 00 FF 
09414     0C E4 85 F1 | 	sub	objptr, ##27148
09418     34 75 B1 FD | 	call	#__system___string_cmp
0941c     00 FA 0D F2 | 	cmp	result1, #0 wz
09420     10 00 90 AD |  if_e	jmp	#LR__0813
09424     21 12 06 F6 | 	mov	arg01, #33
09428     74 E8 BF FD | 	call	#_compile_error
0942c     21 FA 05 F6 | 	mov	result1, #33
09430     14 02 90 FD | 	jmp	#LR__0817
09434                 | LR__0813
09434     37 00 00 FF 
09438     44 E4 05 F1 | 	add	objptr, ##28228
0943c     F2 24 02 FB | 	rdlong	local04, objptr
09440     01 24 06 F1 | 	add	local04, #1
09444     F2 24 62 FC | 	wrlong	local04, objptr
09448     37 00 00 FF 
0944c     44 E4 85 F1 | 	sub	objptr, ##28228
09450     F8 0F B0 FD | 	call	#_expr
09454                 | ' ct+=1
09454                 | ' expr()  ' there is "to" value pushed on the stack
09454                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
09454     37 00 00 FF 
09458     44 E4 05 F1 | 	add	objptr, ##28228
0945c     F2 24 02 FB | 	rdlong	local04, objptr
09460     03 24 66 F0 | 	shl	local04, #3
09464     02 00 00 FF 
09468     38 E4 85 F1 | 	sub	objptr, ##1080
0946c     F2 24 02 F1 | 	add	local04, objptr
09470     12 13 02 FB | 	rdlong	arg01, local04
09474     83 01 00 FF 
09478     B0 15 06 F6 | 	mov	arg02, ##@LR__5375
0947c     35 00 00 FF 
09480     0C E4 85 F1 | 	sub	objptr, ##27148
09484     C8 74 B1 FD | 	call	#__system___string_cmp
09488     00 FA 0D F2 | 	cmp	result1, #0 wz
0948c     3C 00 90 AD |  if_e	jmp	#LR__0814
09490     37 00 00 FF 
09494     44 E4 05 F1 | 	add	objptr, ##28228
09498     F2 28 02 FB | 	rdlong	local06, objptr
0949c     03 28 66 F0 | 	shl	local06, #3
094a0     02 00 00 FF 
094a4     38 E4 85 F1 | 	sub	objptr, ##1080
094a8     F2 28 02 F1 | 	add	local06, objptr
094ac     14 13 02 FB | 	rdlong	arg01, local06
094b0     83 01 00 FF 
094b4     B5 15 06 F6 | 	mov	arg02, ##@LR__5376
094b8     35 00 00 FF 
094bc     0C E4 85 F1 | 	sub	objptr, ##27148
094c0     8C 74 B1 FD | 	call	#__system___string_cmp
094c4     00 FA 0D F2 | 	cmp	result1, #0 wz
094c8     24 00 90 5D |  if_ne	jmp	#LR__0815
094cc                 | LR__0814
094cc     37 00 00 FF 
094d0     44 E4 05 F1 | 	add	objptr, ##28228
094d4     F2 28 02 FB | 	rdlong	local06, objptr
094d8     01 28 06 F1 | 	add	local06, #1
094dc     F2 28 62 FC | 	wrlong	local06, objptr
094e0     37 00 00 FF 
094e4     44 E4 85 F1 | 	sub	objptr, ##28228
094e8     60 0F B0 FD | 	call	#_expr
094ec     78 00 90 FD | 	jmp	#LR__0816
094f0                 | LR__0815
094f0     4A 00 00 FF 
094f4     7C E4 05 F1 | 	add	objptr, ##38012
094f8     F2 28 02 FB | 	rdlong	local06, objptr
094fc     14 27 02 F6 | 	mov	local05, local06
09500     01 26 66 F0 | 	shl	local05, #1
09504     14 27 02 F1 | 	add	local05, local06
09508     02 26 66 F0 | 	shl	local05, #2
0950c     03 00 00 FF 
09510     00 E4 85 F1 | 	sub	objptr, ##1536
09514     F2 26 02 F1 | 	add	local05, objptr
09518     08 26 06 F1 | 	add	local05, #8
0951c     13 39 68 FC | 	wrlong	#28, local05
09520     03 00 00 FF 
09524     00 E4 05 F1 | 	add	objptr, ##1536
09528     F2 28 02 FB | 	rdlong	local06, objptr
0952c     14 27 02 F6 | 	mov	local05, local06
09530     01 26 66 F0 | 	shl	local05, #1
09534     14 27 02 F1 | 	add	local05, local06
09538     02 26 66 F0 | 	shl	local05, #2
0953c     03 00 00 FF 
09540     00 E4 85 F1 | 	sub	objptr, ##1536
09544     F2 26 02 F1 | 	add	local05, objptr
09548     13 03 68 FC | 	wrlong	#1, local05
0954c     03 00 00 FF 
09550     00 E4 05 F1 | 	add	objptr, ##1536
09554     F2 28 02 FB | 	rdlong	local06, objptr
09558     01 28 06 F1 | 	add	local06, #1
0955c     F2 28 62 FC | 	wrlong	local06, objptr
09560     4A 00 00 FF 
09564     7C E4 85 F1 | 	sub	objptr, ##38012
09568                 | LR__0816
09568     4A 00 00 FF 
0956c     7C E4 05 F1 | 	add	objptr, ##38012
09570     F2 28 02 FB | 	rdlong	local06, objptr
09574     14 27 02 F6 | 	mov	local05, local06
09578     01 26 66 F0 | 	shl	local05, #1
0957c     14 27 02 F1 | 	add	local05, local06
09580     02 26 66 F0 | 	shl	local05, #2
09584     03 00 00 FF 
09588     00 E4 85 F1 | 	sub	objptr, ##1536
0958c     F2 26 02 F1 | 	add	local05, objptr
09590     08 26 06 F1 | 	add	local05, #8
09594     13 39 68 FC | 	wrlong	#28, local05
09598     03 00 00 FF 
0959c     00 E4 05 F1 | 	add	objptr, ##1536
095a0     F2 28 02 FB | 	rdlong	local06, objptr
095a4     14 27 02 F6 | 	mov	local05, local06
095a8     01 26 66 F0 | 	shl	local05, #1
095ac     14 27 02 F1 | 	add	local05, local06
095b0     02 26 66 F0 | 	shl	local05, #2
095b4     03 00 00 FF 
095b8     00 E4 85 F1 | 	sub	objptr, ##1536
095bc     F2 26 02 F1 | 	add	local05, objptr
095c0     13 2B 62 FC | 	wrlong	local07, local05
095c4     03 00 00 FF 
095c8     00 E4 05 F1 | 	add	objptr, ##1536
095cc     F2 2A 02 FB | 	rdlong	local07, objptr
095d0     01 2A 06 F1 | 	add	local07, #1
095d4     F2 2A 62 FC | 	wrlong	local07, objptr
095d8     15 29 02 F6 | 	mov	local06, local07
095dc     01 28 66 F0 | 	shl	local06, #1
095e0     15 29 02 F1 | 	add	local06, local07
095e4     02 28 66 F0 | 	shl	local06, #2
095e8     03 00 00 FF 
095ec     00 E4 85 F1 | 	sub	objptr, ##1536
095f0     F2 28 02 F1 | 	add	local06, objptr
095f4     08 28 06 F1 | 	add	local06, #8
095f8     14 95 68 FC | 	wrlong	#74, local06
095fc     03 00 00 FF 
09600     00 E4 05 F1 | 	add	objptr, ##1536
09604     F2 2A 02 FB | 	rdlong	local07, objptr
09608     15 29 02 F6 | 	mov	local06, local07
0960c     01 28 66 F0 | 	shl	local06, #1
09610     15 29 02 F1 | 	add	local06, local07
09614     02 28 66 F0 | 	shl	local06, #2
09618     03 00 00 FF 
0961c     00 E4 85 F1 | 	sub	objptr, ##1536
09620     F2 28 02 F1 | 	add	local06, objptr
09624     14 01 68 FC | 	wrlong	#0, local06
09628     03 00 00 FF 
0962c     00 E4 05 F1 | 	add	objptr, ##1536
09630     F2 2A 02 FB | 	rdlong	local07, objptr
09634     01 2A 06 F1 | 	add	local07, #1
09638     F2 2A 62 FC | 	wrlong	local07, objptr
0963c     4A 00 00 FF 
09640     7C E4 85 F1 | 	sub	objptr, ##38012
09644                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
09644                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
09644                 | ' 
09644                 | ' 
09644                 | ' return 0
09644     00 FA 05 F6 | 	mov	result1, #0
09648                 | LR__0817
09648     A7 F0 03 F6 | 	mov	ptra, fp
0964c     B2 00 A0 FD | 	call	#popregs_
09650                 | _compile_for_ret
09650     2D 00 64 FD | 	ret
09654                 | 
09654                 | ' 
09654                 | ' 
09654                 | ' sub do_gosub()
09654                 | _do_gosub
09654     58 00 00 FF 
09658     10 E5 05 F1 | 	add	objptr, ##45328
0965c     F2 00 02 FB | 	rdlong	_var01, objptr
09660     01 00 06 F1 | 	add	_var01, #1
09664     F2 00 62 FC | 	wrlong	_var01, objptr
09668                 | ' gosubtop+=1
09668                 | ' if compiledline(lineptr_e+1).result_type=token_end then
09668     0E 00 00 FF 
0966c     90 E4 85 F1 | 	sub	objptr, ##7312
09670     F2 00 02 FB | 	rdlong	_var01, objptr
09674     01 00 06 F1 | 	add	_var01, #1
09678     00 03 02 F6 | 	mov	_var02, _var01
0967c     01 02 66 F0 | 	shl	_var02, #1
09680     00 03 02 F1 | 	add	_var02, _var01
09684     02 02 66 F0 | 	shl	_var02, #2
09688     03 00 00 FF 
0968c     04 E4 85 F1 | 	sub	objptr, ##1540
09690     F2 02 02 F1 | 	add	_var02, objptr
09694     08 02 06 F1 | 	add	_var02, #8
09698     01 03 02 FB | 	rdlong	_var02, _var02
0969c     FE 03 0E F2 | 	cmp	_var02, #510 wz
096a0     47 00 00 FF 
096a4     7C E4 85 F1 | 	sub	objptr, ##36476
096a8     58 00 90 5D |  if_ne	jmp	#LR__0820
096ac     58 00 00 FF 
096b0     10 E5 05 F1 | 	add	objptr, ##45328
096b4     F2 02 02 FB | 	rdlong	_var02, objptr
096b8     03 02 66 F0 | 	shl	_var02, #3
096bc     03 00 00 FF 
096c0     60 E5 85 F1 | 	sub	objptr, ##1888
096c4     F2 02 02 F1 | 	add	_var02, objptr
096c8     03 00 00 FF 
096cc     0C E5 05 F1 | 	add	objptr, ##1804
096d0     F2 00 02 FB | 	rdlong	_var01, objptr
096d4     01 01 62 FC | 	wrlong	_var01, _var02
096d8     54 E4 05 F1 | 	add	objptr, #84
096dc     F2 02 02 FB | 	rdlong	_var02, objptr
096e0     03 02 66 F0 | 	shl	_var02, #3
096e4     03 00 00 FF 
096e8     60 E5 85 F1 | 	sub	objptr, ##1888
096ec     F2 02 02 F1 | 	add	_var02, objptr
096f0     04 02 06 F1 | 	add	_var02, #4
096f4     01 01 68 FC | 	wrlong	#0, _var02
096f8     54 00 00 FF 
096fc     B0 E5 85 F1 | 	sub	objptr, ##43440
09700     64 00 90 FD | 	jmp	#LR__0821
09704                 | LR__0820
09704     58 00 00 FF 
09708     10 E5 05 F1 | 	add	objptr, ##45328
0970c     F2 02 02 FB | 	rdlong	_var02, objptr
09710     03 02 66 F0 | 	shl	_var02, #3
09714     03 00 00 FF 
09718     60 E5 85 F1 | 	sub	objptr, ##1888
0971c     F2 02 02 F1 | 	add	_var02, objptr
09720     03 00 00 FF 
09724     14 E5 05 F1 | 	add	objptr, ##1812
09728     F2 00 02 FB | 	rdlong	_var01, objptr
0972c     01 01 62 FC | 	wrlong	_var01, _var02
09730     4C E4 05 F1 | 	add	objptr, #76
09734     F2 02 02 FB | 	rdlong	_var02, objptr
09738     03 02 66 F0 | 	shl	_var02, #3
0973c     03 00 00 FF 
09740     60 E5 85 F1 | 	sub	objptr, ##1888
09744     F2 02 02 F1 | 	add	_var02, objptr
09748     0A 00 00 FF 
0974c     30 E5 85 F1 | 	sub	objptr, ##5424
09750     F2 00 02 FB | 	rdlong	_var01, objptr
09754     4A 00 00 FF 
09758     80 E4 85 F1 | 	sub	objptr, ##38016
0975c     02 00 06 F1 | 	add	_var01, #2
09760     04 02 06 F1 | 	add	_var02, #4
09764     01 01 62 FC | 	wrlong	_var01, _var02
09768                 | LR__0821
09768                 | _do_gosub_ret
09768     2D 00 64 FD | 	ret
0976c                 | 
0976c                 | ' 
0976c                 | ' 
0976c                 | ' sub do_for()
0976c                 | _do_for
0976c     01 4A 05 F6 | 	mov	COUNT_, #1
09770     A8 00 A0 FD | 	call	#pushregs_
09774     10 F0 07 F1 | 	add	ptra, #16
09778     58 00 00 FF 
0977c     0C E5 05 F1 | 	add	objptr, ##45324
09780     F2 12 02 FB | 	rdlong	arg01, objptr
09784     01 12 06 F1 | 	add	arg01, #1
09788     F2 12 62 FC | 	wrlong	arg01, objptr
0978c     58 00 00 FF 
09790     0C E5 85 F1 | 	sub	objptr, ##45324
09794     00 24 B0 FD | 	call	#_pop
09798     A7 FA 61 FC | 	wrlong	result1, fp
0979c     04 4E 05 F1 | 	add	fp, #4
097a0     A7 FC 61 FC | 	wrlong	result2, fp
097a4     04 4E 05 F1 | 	add	fp, #4
097a8     A7 FE 61 FC | 	wrlong	result3, fp
097ac     08 4E 85 F1 | 	sub	fp, #8
097b0     58 00 00 FF 
097b4     0C E5 05 F1 | 	add	objptr, ##45324
097b8     F2 12 02 FB | 	rdlong	arg01, objptr
097bc     09 1F 02 F6 | 	mov	local01, arg01
097c0     02 1E 66 F0 | 	shl	local01, #2
097c4     09 1F 02 F1 | 	add	local01, arg01
097c8     02 1E 66 F0 | 	shl	local01, #2
097cc     06 00 00 FF 
097d0     70 E4 85 F1 | 	sub	objptr, ##3184
097d4     F2 1E 02 F1 | 	add	local01, objptr
097d8     A7 12 02 FB | 	rdlong	arg01, fp
097dc     08 1E 06 F1 | 	add	local01, #8
097e0     0F 13 62 FC | 	wrlong	arg01, local01
097e4     52 00 00 FF 
097e8     9C E4 85 F1 | 	sub	objptr, ##42140
097ec     A8 23 B0 FD | 	call	#_pop
097f0     A7 FA 61 FC | 	wrlong	result1, fp
097f4     04 4E 05 F1 | 	add	fp, #4
097f8     A7 FC 61 FC | 	wrlong	result2, fp
097fc     04 4E 05 F1 | 	add	fp, #4
09800     A7 FE 61 FC | 	wrlong	result3, fp
09804     08 4E 85 F1 | 	sub	fp, #8
09808     58 00 00 FF 
0980c     0C E5 05 F1 | 	add	objptr, ##45324
09810     F2 12 02 FB | 	rdlong	arg01, objptr
09814     09 1F 02 F6 | 	mov	local01, arg01
09818     02 1E 66 F0 | 	shl	local01, #2
0981c     09 1F 02 F1 | 	add	local01, arg01
09820     02 1E 66 F0 | 	shl	local01, #2
09824     06 00 00 FF 
09828     70 E4 85 F1 | 	sub	objptr, ##3184
0982c     F2 1E 02 F1 | 	add	local01, objptr
09830     A7 12 02 F6 | 	mov	arg01, fp
09834     52 00 00 FF 
09838     9C E4 85 F1 | 	sub	objptr, ##42140
0983c     28 C4 B0 FD | 	call	#_converttoint
09840     FD 12 02 F6 | 	mov	arg01, result1
09844     0C 1E 06 F1 | 	add	local01, #12
09848     0F 13 62 FC | 	wrlong	arg01, local01
0984c     48 23 B0 FD | 	call	#_pop
09850     A7 FA 61 FC | 	wrlong	result1, fp
09854     04 4E 05 F1 | 	add	fp, #4
09858     A7 FC 61 FC | 	wrlong	result2, fp
0985c     04 4E 05 F1 | 	add	fp, #4
09860     A7 FE 61 FC | 	wrlong	result3, fp
09864     08 4E 85 F1 | 	sub	fp, #8
09868     58 00 00 FF 
0986c     0C E5 05 F1 | 	add	objptr, ##45324
09870     F2 12 02 FB | 	rdlong	arg01, objptr
09874     09 1F 02 F6 | 	mov	local01, arg01
09878     02 1E 66 F0 | 	shl	local01, #2
0987c     09 1F 02 F1 | 	add	local01, arg01
09880     02 1E 66 F0 | 	shl	local01, #2
09884     06 00 00 FF 
09888     70 E4 85 F1 | 	sub	objptr, ##3184
0988c     F2 1E 02 F1 | 	add	local01, objptr
09890     A7 12 02 F6 | 	mov	arg01, fp
09894     52 00 00 FF 
09898     9C E4 85 F1 | 	sub	objptr, ##42140
0989c     C8 C3 B0 FD | 	call	#_converttoint
098a0     10 1E 06 F1 | 	add	local01, #16
098a4     0F FB 61 FC | 	wrlong	result1, local01
098a8                 | ' fortop+=1
098a8                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
098a8                 | ' 'if i> maxfor then printerror(36) : return
098a8                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
098a8                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
098a8                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
098a8                 | ' if compiledline(lineptr_e).result_type=token_end then
098a8     4A 00 00 FF 
098ac     80 E4 05 F1 | 	add	objptr, ##38016
098b0     F2 12 02 FB | 	rdlong	arg01, objptr
098b4     09 1F 02 F6 | 	mov	local01, arg01
098b8     01 1E 66 F0 | 	shl	local01, #1
098bc     09 1F 02 F1 | 	add	local01, arg01
098c0     02 1E 66 F0 | 	shl	local01, #2
098c4     03 00 00 FF 
098c8     04 E4 85 F1 | 	sub	objptr, ##1540
098cc     F2 1E 02 F1 | 	add	local01, objptr
098d0     08 1E 06 F1 | 	add	local01, #8
098d4     0F 1F 02 FB | 	rdlong	local01, local01
098d8     FE 1F 0E F2 | 	cmp	local01, #510 wz
098dc     47 00 00 FF 
098e0     7C E4 85 F1 | 	sub	objptr, ##36476
098e4     70 00 90 5D |  if_ne	jmp	#LR__0830
098e8     58 00 00 FF 
098ec     0C E5 05 F1 | 	add	objptr, ##45324
098f0     F2 12 02 FB | 	rdlong	arg01, objptr
098f4     09 1F 02 F6 | 	mov	local01, arg01
098f8     02 1E 66 F0 | 	shl	local01, #2
098fc     09 1F 02 F1 | 	add	local01, arg01
09900     02 1E 66 F0 | 	shl	local01, #2
09904     06 00 00 FF 
09908     70 E4 85 F1 | 	sub	objptr, ##3184
0990c     F2 1E 02 F1 | 	add	local01, objptr
09910     06 00 00 FF 
09914     20 E4 05 F1 | 	add	objptr, ##3104
09918     F2 12 02 FB | 	rdlong	arg01, objptr
0991c     0F 13 62 FC | 	wrlong	arg01, local01
09920     50 E4 05 F1 | 	add	objptr, #80
09924     F2 12 02 FB | 	rdlong	arg01, objptr
09928     09 1F 02 F6 | 	mov	local01, arg01
0992c     02 1E 66 F0 | 	shl	local01, #2
09930     09 1F 02 F1 | 	add	local01, arg01
09934     02 1E 66 F0 | 	shl	local01, #2
09938     06 00 00 FF 
0993c     70 E4 85 F1 | 	sub	objptr, ##3184
09940     F2 1E 02 F1 | 	add	local01, objptr
09944     04 1E 06 F1 | 	add	local01, #4
09948     0F 01 68 FC | 	wrlong	#0, local01
0994c     52 00 00 FF 
09950     9C E4 85 F1 | 	sub	objptr, ##42140
09954     7C 00 90 FD | 	jmp	#LR__0831
09958                 | LR__0830
09958     58 00 00 FF 
0995c     0C E5 05 F1 | 	add	objptr, ##45324
09960     F2 12 02 FB | 	rdlong	arg01, objptr
09964     09 1F 02 F6 | 	mov	local01, arg01
09968     02 1E 66 F0 | 	shl	local01, #2
0996c     09 1F 02 F1 | 	add	local01, arg01
09970     02 1E 66 F0 | 	shl	local01, #2
09974     06 00 00 FF 
09978     70 E4 85 F1 | 	sub	objptr, ##3184
0997c     F2 1E 02 F1 | 	add	local01, objptr
09980     06 00 00 FF 
09984     28 E4 05 F1 | 	add	objptr, ##3112
09988     F2 12 02 FB | 	rdlong	arg01, objptr
0998c     0F 13 62 FC | 	wrlong	arg01, local01
09990     48 E4 05 F1 | 	add	objptr, #72
09994     F2 12 02 FB | 	rdlong	arg01, objptr
09998     09 1F 02 F6 | 	mov	local01, arg01
0999c     02 1E 66 F0 | 	shl	local01, #2
099a0     09 1F 02 F1 | 	add	local01, arg01
099a4     02 1E 66 F0 | 	shl	local01, #2
099a8     06 00 00 FF 
099ac     70 E4 85 F1 | 	sub	objptr, ##3184
099b0     F2 1E 02 F1 | 	add	local01, objptr
099b4     08 00 00 FF 
099b8     1C E4 85 F1 | 	sub	objptr, ##4124
099bc     F2 12 02 FB | 	rdlong	arg01, objptr
099c0     4A 00 00 FF 
099c4     80 E4 85 F1 | 	sub	objptr, ##38016
099c8     01 12 06 F1 | 	add	arg01, #1
099cc     04 1E 06 F1 | 	add	local01, #4
099d0     0F 13 62 FC | 	wrlong	arg01, local01
099d4                 | LR__0831
099d4     A7 F0 03 F6 | 	mov	ptra, fp
099d8     B2 00 A0 FD | 	call	#popregs_
099dc                 | _do_for_ret
099dc     2D 00 64 FD | 	ret
099e0                 | 
099e0                 | ' 
099e0                 | ' ' now do_next todo
099e0                 | ' 
099e0                 | ' sub do_return()
099e0                 | _do_return
099e0                 | ' if gosubtop>0 then
099e0     58 00 00 FF 
099e4     10 E5 05 F1 | 	add	objptr, ##45328
099e8     F2 00 02 FB | 	rdlong	_var01, objptr
099ec     58 00 00 FF 
099f0     10 E5 85 F1 | 	sub	objptr, ##45328
099f4     01 00 56 F2 | 	cmps	_var01, #1 wc
099f8     8C 00 90 CD |  if_b	jmp	#LR__0840
099fc     58 00 00 FF 
09a00     10 E5 05 F1 | 	add	objptr, ##45328
09a04     F2 00 02 FB | 	rdlong	_var01, objptr
09a08     03 00 66 F0 | 	shl	_var01, #3
09a0c     03 00 00 FF 
09a10     60 E5 85 F1 | 	sub	objptr, ##1888
09a14     F2 00 02 F1 | 	add	_var01, objptr
09a18     00 01 02 FB | 	rdlong	_var01, _var01
09a1c     03 00 00 FF 
09a20     0C E5 05 F1 | 	add	objptr, ##1804
09a24     F2 00 62 FC | 	wrlong	_var01, objptr
09a28     54 E4 05 F1 | 	add	objptr, #84
09a2c     F2 00 02 FB | 	rdlong	_var01, objptr
09a30     03 00 66 F0 | 	shl	_var01, #3
09a34     03 00 00 FF 
09a38     60 E5 85 F1 | 	sub	objptr, ##1888
09a3c     F2 00 02 F1 | 	add	_var01, objptr
09a40     04 00 06 F1 | 	add	_var01, #4
09a44     00 01 02 FB | 	rdlong	_var01, _var01
09a48     03 00 00 FF 
09a4c     10 E5 05 F1 | 	add	objptr, ##1808
09a50     F2 00 62 FC | 	wrlong	_var01, objptr
09a54     0E 00 00 FF 
09a58     44 E4 85 F1 | 	sub	objptr, ##7236
09a5c     F2 00 02 FB | 	rdlong	_var01, objptr
09a60     01 00 86 F1 | 	sub	_var01, #1
09a64     04 E4 05 F1 | 	add	objptr, #4
09a68     F2 00 62 FC | 	wrlong	_var01, objptr
09a6c     0E 00 00 FF 
09a70     90 E4 05 F1 | 	add	objptr, ##7312
09a74     F2 00 02 FB | 	rdlong	_var01, objptr
09a78     01 00 86 F1 | 	sub	_var01, #1
09a7c     F2 00 62 FC | 	wrlong	_var01, objptr
09a80     58 00 00 FF 
09a84     10 E5 85 F1 | 	sub	objptr, ##45328
09a88                 | LR__0840
09a88                 | _do_return_ret
09a88     2D 00 64 FD | 	ret
09a8c                 | 
09a8c                 | ' 
09a8c                 | ' sub do_pop()
09a8c                 | _do_pop
09a8c                 | ' if gosubtop>0 then  gosubtop -=1 
09a8c     58 00 00 FF 
09a90     10 E5 05 F1 | 	add	objptr, ##45328
09a94     F2 00 02 FB | 	rdlong	_var01, objptr
09a98     58 00 00 FF 
09a9c     10 E5 85 F1 | 	sub	objptr, ##45328
09aa0     01 00 56 F2 | 	cmps	_var01, #1 wc
09aa4     58 00 00 3F 
09aa8     10 E5 05 31 |  if_ae	add	objptr, ##45328
09aac     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
09ab0     01 00 86 31 |  if_ae	sub	_var01, #1
09ab4     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
09ab8     58 00 00 3F 
09abc     10 E5 85 31 |  if_ae	sub	objptr, ##45328
09ac0                 | _do_pop_ret
09ac0     2D 00 64 FD | 	ret
09ac4                 | 
09ac4                 | ' 
09ac4                 | ' sub do_next()
09ac4                 | _do_next
09ac4     04 4A 05 F6 | 	mov	COUNT_, #4
09ac8     A8 00 A0 FD | 	call	#pushregs_
09acc     C8 20 B0 FD | 	call	#_pop
09ad0     FD 1E 02 F6 | 	mov	local01, result1
09ad4     FE 20 02 F6 | 	mov	local02, result2
09ad8     FF 22 02 F6 | 	mov	local03, result3
09adc                 | ' 
09adc                 | ' t1=pop() :varnum=t1.result.uresult
09adc                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
09adc     58 00 00 FF 
09ae0     0C E5 05 F1 | 	add	objptr, ##45324
09ae4     F2 12 02 FB | 	rdlong	arg01, objptr
09ae8     09 15 02 F6 | 	mov	arg02, arg01
09aec     02 14 66 F0 | 	shl	arg02, #2
09af0     09 15 02 F1 | 	add	arg02, arg01
09af4     02 14 66 F0 | 	shl	arg02, #2
09af8     06 00 00 FF 
09afc     70 E4 85 F1 | 	sub	objptr, ##3184
09b00     F2 14 02 F1 | 	add	arg02, objptr
09b04     08 14 06 F1 | 	add	arg02, #8
09b08     0A 15 02 FB | 	rdlong	arg02, arg02
09b0c     0F 15 0A F2 | 	cmp	arg02, local01 wz
09b10     52 00 00 FF 
09b14     9C E4 85 F1 | 	sub	objptr, ##42140
09b18     0C 00 90 AD |  if_e	jmp	#LR__0850
09b1c     25 12 06 F6 | 	mov	arg01, #37
09b20     A0 3A B1 FD | 	call	#_printerror
09b24     10 03 90 FD | 	jmp	#LR__0857
09b28                 | LR__0850
09b28                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
09b28     0F 15 02 F6 | 	mov	arg02, local01
09b2c     04 14 66 F0 | 	shl	arg02, #4
09b30     14 00 00 FF 
09b34     F8 E5 05 F1 | 	add	objptr, ##10744
09b38     F2 14 02 F1 | 	add	arg02, objptr
09b3c     0C 14 06 F1 | 	add	arg02, #12
09b40     0A 15 02 FB | 	rdlong	arg02, arg02
09b44     1E 14 0E F2 | 	cmp	arg02, #30 wz
09b48     14 00 00 FF 
09b4c     F8 E5 85 F1 | 	sub	objptr, ##10744
09b50     54 00 90 5D |  if_ne	jmp	#LR__0851
09b54     0F 15 02 F6 | 	mov	arg02, local01
09b58     04 14 66 F0 | 	shl	arg02, #4
09b5c     14 00 00 FF 
09b60     F8 E5 05 F1 | 	add	objptr, ##10744
09b64     F2 14 02 F1 | 	add	arg02, objptr
09b68     0C 14 06 F1 | 	add	arg02, #12
09b6c     0A 39 68 FC | 	wrlong	#28, arg02
09b70     0F 25 02 F6 | 	mov	local04, local01
09b74     04 24 66 F0 | 	shl	local04, #4
09b78     F2 24 02 F1 | 	add	local04, objptr
09b7c     0F 13 02 F6 | 	mov	arg01, local01
09b80     04 12 66 F0 | 	shl	arg01, #4
09b84     F2 12 02 F1 | 	add	arg01, objptr
09b88     04 12 06 F1 | 	add	arg01, #4
09b8c     09 13 02 FB | 	rdlong	arg01, arg01
09b90     14 00 00 FF 
09b94     F8 E5 85 F1 | 	sub	objptr, ##10744
09b98     01 14 06 F6 | 	mov	arg02, #1
09b9c     04 9E B1 FD | 	call	#__system___float_tointeger
09ba0     04 24 06 F1 | 	add	local04, #4
09ba4     12 FB 61 FC | 	wrlong	result1, local04
09ba8                 | LR__0851
09ba8     58 00 00 FF 
09bac     0C E5 05 F1 | 	add	objptr, ##45324
09bb0     F2 12 02 FB | 	rdlong	arg01, objptr
09bb4     09 25 02 F6 | 	mov	local04, arg01
09bb8     02 24 66 F0 | 	shl	local04, #2
09bbc     09 25 02 F1 | 	add	local04, arg01
09bc0     02 24 66 F0 | 	shl	local04, #2
09bc4     06 00 00 FF 
09bc8     70 E4 85 F1 | 	sub	objptr, ##3184
09bcc     F2 24 02 F1 | 	add	local04, objptr
09bd0     0C 24 06 F1 | 	add	local04, #12
09bd4     12 25 02 FB | 	rdlong	local04, local04
09bd8     0F 13 02 F6 | 	mov	arg01, local01
09bdc     04 12 66 F0 | 	shl	arg01, #4
09be0     3D 00 00 FF 
09be4     A4 E4 85 F1 | 	sub	objptr, ##31396
09be8     F2 12 02 F1 | 	add	arg01, objptr
09bec     0F FF 01 F6 | 	mov	result3, local01
09bf0     04 FE 65 F0 | 	shl	result3, #4
09bf4     F2 FE 01 F1 | 	add	result3, objptr
09bf8     04 FE 05 F1 | 	add	result3, #4
09bfc     FF FE 01 FB | 	rdlong	result3, result3
09c00     12 FF 01 F1 | 	add	result3, local04
09c04     04 12 06 F1 | 	add	arg01, #4
09c08     09 FF 61 FC | 	wrlong	result3, arg01
09c0c                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
09c0c                 | ' if fortable(fortop).stepval>=0 then
09c0c     43 00 00 FF 
09c10     14 E5 05 F1 | 	add	objptr, ##34580
09c14     F2 12 02 FB | 	rdlong	arg01, objptr
09c18     09 25 02 F6 | 	mov	local04, arg01
09c1c     02 24 66 F0 | 	shl	local04, #2
09c20     09 25 02 F1 | 	add	local04, arg01
09c24     02 24 66 F0 | 	shl	local04, #2
09c28     06 00 00 FF 
09c2c     70 E4 85 F1 | 	sub	objptr, ##3184
09c30     F2 24 02 F1 | 	add	local04, objptr
09c34     0C 24 06 F1 | 	add	local04, #12
09c38     12 25 02 FB | 	rdlong	local04, local04
09c3c     00 24 56 F2 | 	cmps	local04, #0 wc
09c40     52 00 00 FF 
09c44     9C E4 85 F1 | 	sub	objptr, ##42140
09c48     78 00 90 CD |  if_b	jmp	#LR__0852
09c4c                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
09c4c     04 1E 66 F0 | 	shl	local01, #4
09c50     14 00 00 FF 
09c54     F8 E5 05 F1 | 	add	objptr, ##10744
09c58     F2 1E 02 F1 | 	add	local01, objptr
09c5c     43 00 00 FF 
09c60     14 E5 05 F1 | 	add	objptr, ##34580
09c64     F2 24 02 FB | 	rdlong	local04, objptr
09c68     12 13 02 F6 | 	mov	arg01, local04
09c6c     02 12 66 F0 | 	shl	arg01, #2
09c70     12 13 02 F1 | 	add	arg01, local04
09c74     02 12 66 F0 | 	shl	arg01, #2
09c78     06 00 00 FF 
09c7c     70 E4 85 F1 | 	sub	objptr, ##3184
09c80     F2 12 02 F1 | 	add	arg01, objptr
09c84     04 1E 06 F1 | 	add	local01, #4
09c88     0F 25 02 FB | 	rdlong	local04, local01
09c8c     10 12 06 F1 | 	add	arg01, #16
09c90     09 13 02 FB | 	rdlong	arg01, arg01
09c94     09 25 5A F2 | 	cmps	local04, arg01 wcz
09c98     52 00 00 FF 
09c9c     9C E4 85 F1 | 	sub	objptr, ##42140
09ca0     9C 00 90 ED |  if_be	jmp	#LR__0854
09ca4     58 00 00 FF 
09ca8     0C E5 05 F1 | 	add	objptr, ##45324
09cac     F2 24 02 FB | 	rdlong	local04, objptr
09cb0     01 24 86 F1 | 	sub	local04, #1
09cb4     F2 24 62 FC | 	wrlong	local04, objptr
09cb8     58 00 00 FF 
09cbc     0C E5 85 F1 | 	sub	objptr, ##45324
09cc0     74 01 90 FD | 	jmp	#LR__0857
09cc4                 | LR__0852
09cc4                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
09cc4     0F 13 02 F6 | 	mov	arg01, local01
09cc8     04 12 66 F0 | 	shl	arg01, #4
09ccc     14 00 00 FF 
09cd0     F8 E5 05 F1 | 	add	objptr, ##10744
09cd4     F2 12 02 F1 | 	add	arg01, objptr
09cd8     43 00 00 FF 
09cdc     14 E5 05 F1 | 	add	objptr, ##34580
09ce0     F2 24 02 FB | 	rdlong	local04, objptr
09ce4     12 1F 02 F6 | 	mov	local01, local04
09ce8     02 1E 66 F0 | 	shl	local01, #2
09cec     12 1F 02 F1 | 	add	local01, local04
09cf0     02 1E 66 F0 | 	shl	local01, #2
09cf4     06 00 00 FF 
09cf8     70 E4 85 F1 | 	sub	objptr, ##3184
09cfc     F2 1E 02 F1 | 	add	local01, objptr
09d00     04 12 06 F1 | 	add	arg01, #4
09d04     09 13 02 FB | 	rdlong	arg01, arg01
09d08     10 1E 06 F1 | 	add	local01, #16
09d0c     0F 1F 02 FB | 	rdlong	local01, local01
09d10     0F 13 52 F2 | 	cmps	arg01, local01 wc
09d14     52 00 00 FF 
09d18     9C E4 85 F1 | 	sub	objptr, ##42140
09d1c     20 00 90 3D |  if_ae	jmp	#LR__0853
09d20     58 00 00 FF 
09d24     0C E5 05 F1 | 	add	objptr, ##45324
09d28     F2 24 02 FB | 	rdlong	local04, objptr
09d2c     01 24 86 F1 | 	sub	local04, #1
09d30     F2 24 62 FC | 	wrlong	local04, objptr
09d34     58 00 00 FF 
09d38     0C E5 85 F1 | 	sub	objptr, ##45324
09d3c     F8 00 90 FD | 	jmp	#LR__0857
09d40                 | LR__0853
09d40                 | LR__0854
09d40     47 00 00 FF 
09d44     7C E4 05 F1 | 	add	objptr, ##36476
09d48     F2 24 02 FB | 	rdlong	local04, objptr
09d4c     47 00 00 FF 
09d50     7C E4 85 F1 | 	sub	objptr, ##36476
09d54                 | ' ' if not returned, goto pointer
09d54                 | ' linenum=ucompiledline(0)
09d54                 | ' if linenum>0 then
09d54     01 24 56 F2 | 	cmps	local04, #1 wc
09d58     94 00 90 CD |  if_b	jmp	#LR__0855
09d5c     58 00 00 FF 
09d60     0C E5 05 F1 | 	add	objptr, ##45324
09d64     F2 1E 02 FB | 	rdlong	local01, objptr
09d68     0F 25 02 F6 | 	mov	local04, local01
09d6c     02 24 66 F0 | 	shl	local04, #2
09d70     0F 25 02 F1 | 	add	local04, local01
09d74     02 24 66 F0 | 	shl	local04, #2
09d78     06 00 00 FF 
09d7c     70 E4 85 F1 | 	sub	objptr, ##3184
09d80     F2 24 02 F1 | 	add	local04, objptr
09d84     12 25 02 FB | 	rdlong	local04, local04
09d88     06 00 00 FF 
09d8c     20 E4 05 F1 | 	add	objptr, ##3104
09d90     F2 24 62 FC | 	wrlong	local04, objptr
09d94     50 E4 05 F1 | 	add	objptr, #80
09d98     F2 1E 02 FB | 	rdlong	local01, objptr
09d9c     0F 25 02 F6 | 	mov	local04, local01
09da0     02 24 66 F0 | 	shl	local04, #2
09da4     0F 25 02 F1 | 	add	local04, local01
09da8     02 24 66 F0 | 	shl	local04, #2
09dac     06 00 00 FF 
09db0     70 E4 85 F1 | 	sub	objptr, ##3184
09db4     F2 24 02 F1 | 	add	local04, objptr
09db8     04 24 06 F1 | 	add	local04, #4
09dbc     12 25 02 FB | 	rdlong	local04, local04
09dc0     06 00 00 FF 
09dc4     24 E4 05 F1 | 	add	objptr, ##3108
09dc8     F2 24 62 FC | 	wrlong	local04, objptr
09dcc     0E 00 00 FF 
09dd0     44 E4 85 F1 | 	sub	objptr, ##7236
09dd4     F2 24 02 FB | 	rdlong	local04, objptr
09dd8     01 24 86 F1 | 	sub	local04, #1
09ddc     04 E4 05 F1 | 	add	objptr, #4
09de0     F2 24 62 FC | 	wrlong	local04, objptr
09de4     4A 00 00 FF 
09de8     80 E4 85 F1 | 	sub	objptr, ##38016
09dec     48 00 90 FD | 	jmp	#LR__0856
09df0                 | LR__0855
09df0     58 00 00 FF 
09df4     0C E5 05 F1 | 	add	objptr, ##45324
09df8     F2 24 02 FB | 	rdlong	local04, objptr
09dfc     12 1F 02 F6 | 	mov	local01, local04
09e00     02 1E 66 F0 | 	shl	local01, #2
09e04     12 1F 02 F1 | 	add	local01, local04
09e08     02 1E 66 F0 | 	shl	local01, #2
09e0c     06 00 00 FF 
09e10     70 E4 85 F1 | 	sub	objptr, ##3184
09e14     F2 1E 02 F1 | 	add	local01, objptr
09e18     04 1E 06 F1 | 	add	local01, #4
09e1c     0F 1F 02 FB | 	rdlong	local01, local01
09e20     01 1E 86 F1 | 	sub	local01, #1
09e24     08 00 00 FF 
09e28     1C E4 85 F1 | 	sub	objptr, ##4124
09e2c     F2 1E 62 FC | 	wrlong	local01, objptr
09e30     4A 00 00 FF 
09e34     80 E4 85 F1 | 	sub	objptr, ##38016
09e38                 | LR__0856
09e38                 | LR__0857
09e38     A7 F0 03 F6 | 	mov	ptra, fp
09e3c     B2 00 A0 FD | 	call	#popregs_
09e40                 | _do_next_ret
09e40     2D 00 64 FD | 	ret
09e44                 | 
09e44                 | ' 
09e44                 | ' 
09e44                 | ' function compile_next() as ulong
09e44                 | _compile_next
09e44     04 4A 05 F6 | 	mov	COUNT_, #4
09e48     A8 00 A0 FD | 	call	#pushregs_
09e4c     37 00 00 FF 
09e50     44 E4 05 F1 | 	add	objptr, ##28228
09e54     F2 12 02 FB | 	rdlong	arg01, objptr
09e58     03 12 66 F0 | 	shl	arg01, #3
09e5c     02 00 00 FF 
09e60     38 E4 85 F1 | 	sub	objptr, ##1080
09e64     F2 12 02 F1 | 	add	arg01, objptr
09e68     09 1F 02 FB | 	rdlong	local01, arg01
09e6c                 | ' 
09e6c                 | ' varname$=lparts(ct).part$ 
09e6c                 | ' 'suffix$=right$(varname$,1)
09e6c                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
09e6c                 | ' if varnum=0 then compile_error(35)  : return 35
09e6c     04 E4 85 F1 | 	sub	objptr, #4
09e70     F2 14 0A FB | 	rdlong	arg02, objptr wz
09e74     35 00 00 FF 
09e78     08 E4 85 F1 | 	sub	objptr, ##27144
09e7c     10 00 90 5D |  if_ne	jmp	#LR__0860
09e80     23 12 06 F6 | 	mov	arg01, #35
09e84     18 DE BF FD | 	call	#_compile_error
09e88     23 FA 05 F6 | 	mov	result1, #35
09e8c     58 01 90 FD | 	jmp	#LR__0864
09e90                 | LR__0860
09e90     01 20 66 F6 | 	neg	local02, #1
09e94                 | ' j=-1
09e94                 | ' for i=0 to varnum-1
09e94     00 22 06 F6 | 	mov	local03, #0
09e98     35 00 00 FF 
09e9c     08 E4 05 F1 | 	add	objptr, ##27144
09ea0     F2 24 02 FB | 	rdlong	local04, objptr
09ea4     35 00 00 FF 
09ea8     08 E4 85 F1 | 	sub	objptr, ##27144
09eac                 | LR__0861
09eac     12 23 12 F2 | 	cmp	local03, local04 wc
09eb0     38 00 90 3D |  if_ae	jmp	#LR__0862
09eb4                 | '   if variables(i).name=varname$ then j=i : exit
09eb4     11 15 02 F6 | 	mov	arg02, local03
09eb8     04 14 66 F0 | 	shl	arg02, #4
09ebc     14 00 00 FF 
09ec0     F8 E5 05 F1 | 	add	objptr, ##10744
09ec4     F2 14 02 F1 | 	add	arg02, objptr
09ec8     0A 13 02 FB | 	rdlong	arg01, arg02
09ecc     0F 15 02 F6 | 	mov	arg02, local01
09ed0     14 00 00 FF 
09ed4     F8 E5 85 F1 | 	sub	objptr, ##10744
09ed8     74 6A B1 FD | 	call	#__system___string_cmp
09edc     00 FA 0D F2 | 	cmp	result1, #0 wz
09ee0     11 21 02 A6 |  if_e	mov	local02, local03
09ee4     01 22 06 51 |  if_ne	add	local03, #1
09ee8     C0 FF 9F 5D |  if_ne	jmp	#LR__0861
09eec                 | LR__0862
09eec                 | ' if j=-1 then compile_error(35) : return 35
09eec     FF FF 7F FF 
09ef0     FF 21 0E F2 | 	cmp	local02, ##-1 wz
09ef4     10 00 90 5D |  if_ne	jmp	#LR__0863
09ef8     23 12 06 F6 | 	mov	arg01, #35
09efc     A0 DD BF FD | 	call	#_compile_error
09f00     23 FA 05 F6 | 	mov	result1, #35
09f04     E0 00 90 FD | 	jmp	#LR__0864
09f08                 | LR__0863
09f08     4A 00 00 FF 
09f0c     7C E4 05 F1 | 	add	objptr, ##38012
09f10     F2 24 02 FB | 	rdlong	local04, objptr
09f14     12 23 02 F6 | 	mov	local03, local04
09f18     01 22 66 F0 | 	shl	local03, #1
09f1c     12 23 02 F1 | 	add	local03, local04
09f20     02 22 66 F0 | 	shl	local03, #2
09f24     03 00 00 FF 
09f28     00 E4 85 F1 | 	sub	objptr, ##1536
09f2c     F2 22 02 F1 | 	add	local03, objptr
09f30     08 22 06 F1 | 	add	local03, #8
09f34     11 39 68 FC | 	wrlong	#28, local03
09f38     03 00 00 FF 
09f3c     00 E4 05 F1 | 	add	objptr, ##1536
09f40     F2 24 02 FB | 	rdlong	local04, objptr
09f44     12 23 02 F6 | 	mov	local03, local04
09f48     01 22 66 F0 | 	shl	local03, #1
09f4c     12 23 02 F1 | 	add	local03, local04
09f50     02 22 66 F0 | 	shl	local03, #2
09f54     03 00 00 FF 
09f58     00 E4 85 F1 | 	sub	objptr, ##1536
09f5c     F2 22 02 F1 | 	add	local03, objptr
09f60     11 21 62 FC | 	wrlong	local02, local03
09f64     03 00 00 FF 
09f68     00 E4 05 F1 | 	add	objptr, ##1536
09f6c     F2 24 02 FB | 	rdlong	local04, objptr
09f70     01 24 06 F1 | 	add	local04, #1
09f74     F2 24 62 FC | 	wrlong	local04, objptr
09f78     12 23 02 F6 | 	mov	local03, local04
09f7c     01 22 66 F0 | 	shl	local03, #1
09f80     12 23 02 F1 | 	add	local03, local04
09f84     02 22 66 F0 | 	shl	local03, #2
09f88     03 00 00 FF 
09f8c     00 E4 85 F1 | 	sub	objptr, ##1536
09f90     F2 22 02 F1 | 	add	local03, objptr
09f94     08 22 06 F1 | 	add	local03, #8
09f98     11 97 68 FC | 	wrlong	#75, local03
09f9c     03 00 00 FF 
09fa0     00 E4 05 F1 | 	add	objptr, ##1536
09fa4     F2 24 02 FB | 	rdlong	local04, objptr
09fa8     12 23 02 F6 | 	mov	local03, local04
09fac     01 22 66 F0 | 	shl	local03, #1
09fb0     12 23 02 F1 | 	add	local03, local04
09fb4     02 22 66 F0 | 	shl	local03, #2
09fb8     03 00 00 FF 
09fbc     00 E4 85 F1 | 	sub	objptr, ##1536
09fc0     F2 22 02 F1 | 	add	local03, objptr
09fc4     11 01 68 FC | 	wrlong	#0, local03
09fc8     03 00 00 FF 
09fcc     00 E4 05 F1 | 	add	objptr, ##1536
09fd0     F2 24 02 FB | 	rdlong	local04, objptr
09fd4     01 24 06 F1 | 	add	local04, #1
09fd8     F2 24 62 FC | 	wrlong	local04, objptr
09fdc     4A 00 00 FF 
09fe0     7C E4 85 F1 | 	sub	objptr, ##38012
09fe4                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
09fe4                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
09fe4                 | ' return 0
09fe4     00 FA 05 F6 | 	mov	result1, #0
09fe8                 | LR__0864
09fe8     A7 F0 03 F6 | 	mov	ptra, fp
09fec     B2 00 A0 FD | 	call	#popregs_
09ff0                 | _compile_next_ret
09ff0     2D 00 64 FD | 	ret
09ff4                 | 
09ff4                 | ' 
09ff4                 | ' 
09ff4                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
09ff4                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
09ff4                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
09ff4                 | ' 
09ff4                 | ' function compile_gosub() as ulong
09ff4                 | _compile_gosub
09ff4     01 4A 05 F6 | 	mov	COUNT_, #1
09ff8     A8 00 A0 FD | 	call	#pushregs_
09ffc     4A 00 00 FF 
0a000     7C E4 05 F1 | 	add	objptr, ##38012
0a004     F2 1E 02 FB | 	rdlong	local01, objptr
0a008     0F FB 01 F6 | 	mov	result1, local01
0a00c     01 FA 65 F0 | 	shl	result1, #1
0a010     0F FB 01 F1 | 	add	result1, local01
0a014     02 FA 65 F0 | 	shl	result1, #2
0a018     03 00 00 FF 
0a01c     00 E4 85 F1 | 	sub	objptr, ##1536
0a020     F2 FA 01 F1 | 	add	result1, objptr
0a024     08 FA 05 F1 | 	add	result1, #8
0a028     FD 52 69 FC | 	wrlong	#169, result1
0a02c     03 00 00 FF 
0a030     00 E4 05 F1 | 	add	objptr, ##1536
0a034     F2 1E 02 FB | 	rdlong	local01, objptr
0a038     01 1E 06 F1 | 	add	local01, #1
0a03c     F2 1E 62 FC | 	wrlong	local01, objptr
0a040     4A 00 00 FF 
0a044     7C E4 85 F1 | 	sub	objptr, ##38012
0a048     10 00 B0 FD | 	call	#_compile_goto
0a04c                 | ' 
0a04c                 | ' compiledline(lineptr).result_type=token_gosub
0a04c                 | ' lineptr+=1
0a04c                 | ' compile_goto()
0a04c                 | ' return 0
0a04c     00 FA 05 F6 | 	mov	result1, #0
0a050     A7 F0 03 F6 | 	mov	ptra, fp
0a054     B2 00 A0 FD | 	call	#popregs_
0a058                 | _compile_gosub_ret
0a058     2D 00 64 FD | 	ret
0a05c                 | 
0a05c                 | ' 
0a05c                 | ' function compile_goto( ) as ulong
0a05c                 | _compile_goto
0a05c     03 4A 05 F6 | 	mov	COUNT_, #3
0a060     A8 00 A0 FD | 	call	#pushregs_
0a064     34 F0 07 F1 | 	add	ptra, #52
0a068                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
0a068     37 00 00 FF 
0a06c     44 E4 05 F1 | 	add	objptr, ##28228
0a070     F2 16 02 FB | 	rdlong	arg03, objptr
0a074     03 16 66 F0 | 	shl	arg03, #3
0a078     02 00 00 FF 
0a07c     38 E4 85 F1 | 	sub	objptr, ##1080
0a080     F2 16 02 F1 | 	add	arg03, objptr
0a084     04 16 06 F1 | 	add	arg03, #4
0a088     0B 17 02 FB | 	rdlong	arg03, arg03
0a08c     01 00 00 FF 
0a090     00 16 0E F2 | 	cmp	arg03, ##512 wz
0a094     35 00 00 FF 
0a098     0C E4 85 F1 | 	sub	objptr, ##27148
0a09c     CC 02 90 5D |  if_ne	jmp	#LR__0875
0a0a0     37 00 00 FF 
0a0a4     44 E4 05 F1 | 	add	objptr, ##28228
0a0a8     F2 16 02 FB | 	rdlong	arg03, objptr
0a0ac     01 16 06 F1 | 	add	arg03, #1
0a0b0     03 16 66 F0 | 	shl	arg03, #3
0a0b4     02 00 00 FF 
0a0b8     38 E4 85 F1 | 	sub	objptr, ##1080
0a0bc     F2 16 02 F1 | 	add	arg03, objptr
0a0c0     04 16 06 F1 | 	add	arg03, #4
0a0c4     0B 17 02 FB | 	rdlong	arg03, arg03
0a0c8     FE 17 0E F2 | 	cmp	arg03, #510 wz
0a0cc     35 00 00 FF 
0a0d0     0C E4 85 F1 | 	sub	objptr, ##27148
0a0d4     94 02 90 5D |  if_ne	jmp	#LR__0875
0a0d8     37 00 00 FF 
0a0dc     44 E4 05 F1 | 	add	objptr, ##28228
0a0e0     F2 16 02 FB | 	rdlong	arg03, objptr
0a0e4     03 16 66 F0 | 	shl	arg03, #3
0a0e8     02 00 00 FF 
0a0ec     38 E4 85 F1 | 	sub	objptr, ##1080
0a0f0     F2 16 02 F1 | 	add	arg03, objptr
0a0f4     0B 13 02 FB | 	rdlong	arg01, arg03
0a0f8     00 14 06 F6 | 	mov	arg02, #0
0a0fc     35 00 00 FF 
0a100     0C E4 85 F1 | 	sub	objptr, ##27148
0a104     4C 9A B1 FD | 	call	#__system____builtin_atoi
0a108     04 4E 05 F1 | 	add	fp, #4
0a10c     A7 FA 61 FC | 	wrlong	result1, fp
0a110     4A 00 00 FF 
0a114     7C E4 05 F1 | 	add	objptr, ##38012
0a118     F2 1E 02 FB | 	rdlong	local01, objptr
0a11c     0F 21 02 F6 | 	mov	local02, local01
0a120     01 20 66 F0 | 	shl	local02, #1
0a124     0F 21 02 F1 | 	add	local02, local01
0a128     02 20 66 F0 | 	shl	local02, #2
0a12c     03 00 00 FF 
0a130     00 E4 85 F1 | 	sub	objptr, ##1536
0a134     F2 20 02 F1 | 	add	local02, objptr
0a138     08 20 06 F1 | 	add	local02, #8
0a13c     10 9D 68 FC | 	wrlong	#78, local02
0a140     03 00 00 FF 
0a144     08 E4 05 F1 | 	add	objptr, ##1544
0a148     F2 22 02 FB | 	rdlong	local03, objptr
0a14c     4A 00 00 FF 
0a150     84 E4 85 F1 | 	sub	objptr, ##38020
0a154     04 4E 05 F1 | 	add	fp, #4
0a158     A7 22 62 FC | 	wrlong	local03, fp
0a15c     08 4E 85 F1 | 	sub	fp, #8
0a160                 | ' 
0a160                 | '   gotoline=val%(lparts(ct).part$) 
0a160                 | '   compiledline(lineptr).result_type=token_fast_goto
0a160                 | ' ' now find a pointer to goto
0a160                 | '   gotoptr=programstart
0a160                 | '   do
0a160                 | LR__0870
0a160     10 4E 05 F1 | 	add	fp, #16
0a164     A7 12 02 F6 | 	mov	arg01, fp
0a168     08 4E 85 F1 | 	sub	fp, #8
0a16c     A7 14 02 FB | 	rdlong	arg02, fp
0a170     08 4E 85 F1 | 	sub	fp, #8
0a174     18 16 06 F6 | 	mov	arg03, #24
0a178     0B 00 00 FF 
0a17c     CC E4 05 F1 | 	add	objptr, ##5836
0a180     64 5B B1 FD | 	call	#_psram_spin2_read1
0a184     0B 00 00 FF 
0a188     CC E4 85 F1 | 	sub	objptr, ##5836
0a18c                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0a18c                 | '     if gotoheader(0)<>$FFFFFFFF then
0a18c     10 4E 05 F1 | 	add	fp, #16
0a190     A7 22 02 FB | 	rdlong	local03, fp
0a194     10 4E 85 F1 | 	sub	fp, #16
0a198     FF FF 7F FF 
0a19c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0a1a0     24 00 90 AD |  if_e	jmp	#LR__0871
0a1a4     08 4E 05 F1 | 	add	fp, #8
0a1a8     A7 22 02 FB | 	rdlong	local03, fp
0a1ac     04 4E 05 F1 | 	add	fp, #4
0a1b0     A7 22 62 FC | 	wrlong	local03, fp
0a1b4     18 4E 05 F1 | 	add	fp, #24
0a1b8     A7 22 02 FB | 	rdlong	local03, fp
0a1bc     1C 4E 85 F1 | 	sub	fp, #28
0a1c0     A7 22 62 FC | 	wrlong	local03, fp
0a1c4     08 4E 85 F1 | 	sub	fp, #8
0a1c8                 | LR__0871
0a1c8     24 4E 05 F1 | 	add	fp, #36
0a1cc     A7 22 02 FB | 	rdlong	local03, fp
0a1d0     24 4E 85 F1 | 	sub	fp, #36
0a1d4     FF FF 3F FF 
0a1d8     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0a1dc     10 4E 05 51 |  if_ne	add	fp, #16
0a1e0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0a1e4     10 4E 85 51 |  if_ne	sub	fp, #16
0a1e8     FF FF 7F 5F 
0a1ec     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0a1f0     1C 00 90 AD |  if_e	jmp	#LR__0872
0a1f4     10 4E 05 F1 | 	add	fp, #16
0a1f8     A7 22 02 FB | 	rdlong	local03, fp
0a1fc     0C 4E 85 F1 | 	sub	fp, #12
0a200     A7 20 02 FB | 	rdlong	local02, fp
0a204     04 4E 85 F1 | 	sub	fp, #4
0a208     10 23 0A F2 | 	cmp	local03, local02 wz
0a20c     50 FF 9F 5D |  if_ne	jmp	#LR__0870
0a210                 | LR__0872
0a210                 | '   if gotoheader(0)=gotoline then
0a210     10 4E 05 F1 | 	add	fp, #16
0a214     A7 22 02 FB | 	rdlong	local03, fp
0a218     0C 4E 85 F1 | 	sub	fp, #12
0a21c     A7 1E 02 FB | 	rdlong	local01, fp
0a220     04 4E 85 F1 | 	sub	fp, #4
0a224     0F 23 0A F2 | 	cmp	local03, local01 wz
0a228     7C 00 90 5D |  if_ne	jmp	#LR__0873
0a22c     4A 00 00 FF 
0a230     7C E4 05 F1 | 	add	objptr, ##38012
0a234     F2 1E 02 FB | 	rdlong	local01, objptr
0a238     0F 21 02 F6 | 	mov	local02, local01
0a23c     01 20 66 F0 | 	shl	local02, #1
0a240     0F 21 02 F1 | 	add	local02, local01
0a244     02 20 66 F0 | 	shl	local02, #2
0a248     03 00 00 FF 
0a24c     00 E4 85 F1 | 	sub	objptr, ##1536
0a250     F2 20 02 F1 | 	add	local02, objptr
0a254     0C 4E 05 F1 | 	add	fp, #12
0a258     A7 22 02 FB | 	rdlong	local03, fp
0a25c     10 23 62 FC | 	wrlong	local03, local02
0a260     03 00 00 FF 
0a264     00 E4 05 F1 | 	add	objptr, ##1536
0a268     F2 1E 02 FB | 	rdlong	local01, objptr
0a26c     0F 21 02 F6 | 	mov	local02, local01
0a270     01 20 66 F0 | 	shl	local02, #1
0a274     0F 21 02 F1 | 	add	local02, local01
0a278     02 20 66 F0 | 	shl	local02, #2
0a27c     03 00 00 FF 
0a280     00 E4 85 F1 | 	sub	objptr, ##1536
0a284     F2 20 02 F1 | 	add	local02, objptr
0a288     08 4E 85 F1 | 	sub	fp, #8
0a28c     A7 22 02 FB | 	rdlong	local03, fp
0a290     04 4E 85 F1 | 	sub	fp, #4
0a294     04 20 06 F1 | 	add	local02, #4
0a298     10 23 62 FC | 	wrlong	local03, local02
0a29c     47 00 00 FF 
0a2a0     7C E4 85 F1 | 	sub	objptr, ##36476
0a2a4     A4 00 90 FD | 	jmp	#LR__0874
0a2a8                 | LR__0873
0a2a8     4A 00 00 FF 
0a2ac     7C E4 05 F1 | 	add	objptr, ##38012
0a2b0     F2 1E 02 FB | 	rdlong	local01, objptr
0a2b4     0F 21 02 F6 | 	mov	local02, local01
0a2b8     01 20 66 F0 | 	shl	local02, #1
0a2bc     0F 21 02 F1 | 	add	local02, local01
0a2c0     02 20 66 F0 | 	shl	local02, #2
0a2c4     03 00 00 FF 
0a2c8     00 E4 85 F1 | 	sub	objptr, ##1536
0a2cc     F2 20 02 F1 | 	add	local02, objptr
0a2d0     00 00 C0 FF 
0a2d4     10 01 68 FC | 	wrlong	##-2147483648, local02
0a2d8     03 00 00 FF 
0a2dc     00 E4 05 F1 | 	add	objptr, ##1536
0a2e0     F2 1E 02 FB | 	rdlong	local01, objptr
0a2e4     0F 21 02 F6 | 	mov	local02, local01
0a2e8     01 20 66 F0 | 	shl	local02, #1
0a2ec     0F 21 02 F1 | 	add	local02, local01
0a2f0     02 20 66 F0 | 	shl	local02, #2
0a2f4     03 00 00 FF 
0a2f8     00 E4 85 F1 | 	sub	objptr, ##1536
0a2fc     F2 20 02 F1 | 	add	local02, objptr
0a300     04 4E 05 F1 | 	add	fp, #4
0a304     A7 22 02 FB | 	rdlong	local03, fp
0a308     04 4E 85 F1 | 	sub	fp, #4
0a30c     04 20 06 F1 | 	add	local02, #4
0a310     10 23 62 FC | 	wrlong	local03, local02
0a314     03 00 00 FF 
0a318     00 E4 05 F1 | 	add	objptr, ##1536
0a31c     F2 1E 02 FB | 	rdlong	local01, objptr
0a320     0F 21 02 F6 | 	mov	local02, local01
0a324     01 20 66 F0 | 	shl	local02, #1
0a328     0F 21 02 F1 | 	add	local02, local01
0a32c     02 20 66 F0 | 	shl	local02, #2
0a330     03 00 00 FF 
0a334     00 E4 85 F1 | 	sub	objptr, ##1536
0a338     F2 20 02 F1 | 	add	local02, objptr
0a33c     08 20 06 F1 | 	add	local02, #8
0a340     10 A7 68 FC | 	wrlong	#83, local02
0a344     47 00 00 FF 
0a348     7C E4 85 F1 | 	sub	objptr, ##36476
0a34c                 | LR__0874
0a34c     4A 00 00 FF 
0a350     7C E4 05 F1 | 	add	objptr, ##38012
0a354     F2 22 02 FB | 	rdlong	local03, objptr
0a358     01 22 06 F1 | 	add	local03, #1
0a35c     F2 22 62 FC | 	wrlong	local03, objptr
0a360     4A 00 00 FF 
0a364     7C E4 85 F1 | 	sub	objptr, ##38012
0a368     D0 00 90 FD | 	jmp	#LR__0876
0a36c                 | LR__0875
0a36c     DC 00 B0 FD | 	call	#_expr
0a370     30 4E 05 F1 | 	add	fp, #48
0a374     A7 9E 68 FC | 	wrlong	#79, fp
0a378     08 4E 85 F1 | 	sub	fp, #8
0a37c     A7 00 68 FC | 	wrlong	#0, fp
0a380     04 4E 05 F1 | 	add	fp, #4
0a384     A7 22 02 FB | 	rdlong	local03, fp
0a388     04 4E 05 F1 | 	add	fp, #4
0a38c     A7 1E 02 FB | 	rdlong	local01, fp
0a390     30 4E 85 F1 | 	sub	fp, #48
0a394     4A 00 00 FF 
0a398     7C E4 05 F1 | 	add	objptr, ##38012
0a39c     F2 20 02 FB | 	rdlong	local02, objptr
0a3a0     10 17 02 F6 | 	mov	arg03, local02
0a3a4     01 16 66 F0 | 	shl	arg03, #1
0a3a8     10 17 02 F1 | 	add	arg03, local02
0a3ac     02 16 66 F0 | 	shl	arg03, #2
0a3b0     03 00 00 FF 
0a3b4     00 E4 85 F1 | 	sub	objptr, ##1536
0a3b8     F2 16 02 F1 | 	add	arg03, objptr
0a3bc     0B 01 68 FC | 	wrlong	#0, arg03
0a3c0     03 00 00 FF 
0a3c4     00 E4 05 F1 | 	add	objptr, ##1536
0a3c8     F2 20 02 FB | 	rdlong	local02, objptr
0a3cc     10 17 02 F6 | 	mov	arg03, local02
0a3d0     01 16 66 F0 | 	shl	arg03, #1
0a3d4     10 17 02 F1 | 	add	arg03, local02
0a3d8     02 16 66 F0 | 	shl	arg03, #2
0a3dc     03 00 00 FF 
0a3e0     00 E4 85 F1 | 	sub	objptr, ##1536
0a3e4     F2 16 02 F1 | 	add	arg03, objptr
0a3e8     04 16 06 F1 | 	add	arg03, #4
0a3ec     0B 23 62 FC | 	wrlong	local03, arg03
0a3f0     03 00 00 FF 
0a3f4     00 E4 05 F1 | 	add	objptr, ##1536
0a3f8     F2 22 02 FB | 	rdlong	local03, objptr
0a3fc     11 21 02 F6 | 	mov	local02, local03
0a400     01 20 66 F0 | 	shl	local02, #1
0a404     11 21 02 F1 | 	add	local02, local03
0a408     02 20 66 F0 | 	shl	local02, #2
0a40c     03 00 00 FF 
0a410     00 E4 85 F1 | 	sub	objptr, ##1536
0a414     F2 20 02 F1 | 	add	local02, objptr
0a418     08 20 06 F1 | 	add	local02, #8
0a41c     10 1F 62 FC | 	wrlong	local01, local02
0a420     03 00 00 FF 
0a424     00 E4 05 F1 | 	add	objptr, ##1536
0a428     F2 22 02 FB | 	rdlong	local03, objptr
0a42c     01 22 06 F1 | 	add	local03, #1
0a430     F2 22 62 FC | 	wrlong	local03, objptr
0a434     4A 00 00 FF 
0a438     7C E4 85 F1 | 	sub	objptr, ##38012
0a43c                 | LR__0876
0a43c                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
0a43c                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
0a43c                 | ' return 0
0a43c     00 FA 05 F6 | 	mov	result1, #0
0a440     A7 F0 03 F6 | 	mov	ptra, fp
0a444     B2 00 A0 FD | 	call	#popregs_
0a448                 | _compile_goto_ret
0a448     2D 00 64 FD | 	ret
0a44c                 | 
0a44c                 | ' 
0a44c                 | ' 
0a44c                 | ' 
0a44c                 | ' 
0a44c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a44c                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
0a44c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a44c                 | ' 
0a44c                 | ' 
0a44c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a44c                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
0a44c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a44c                 | ' 
0a44c                 | ' 
0a44c                 | ' function expr() as integer 
0a44c                 | _expr
0a44c     07 4A 05 F6 | 	mov	COUNT_, #7
0a450     A8 00 A0 FD | 	call	#pushregs_
0a454                 | _expr_enter
0a454     37 00 00 FF 
0a458     44 E4 05 F1 | 	add	objptr, ##28228
0a45c     F2 24 02 FB | 	rdlong	local04, objptr
0a460     03 24 66 F0 | 	shl	local04, #3
0a464     02 00 00 FF 
0a468     38 E4 85 F1 | 	sub	objptr, ##1080
0a46c     F2 24 02 F1 | 	add	local04, objptr
0a470     04 24 06 F1 | 	add	local04, #4
0a474     12 27 02 FB | 	rdlong	local05, local04
0a478                 | ' 
0a478                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0a478     FE 27 0E F2 | 	cmp	local05, #510 wz
0a47c     35 00 00 FF 
0a480     0C E4 85 F1 | 	sub	objptr, ##27148
0a484     C4 00 90 5D |  if_ne	jmp	#LR__0880
0a488     1D 1E 06 F6 | 	mov	local01, #29
0a48c     FF 22 06 F6 | 	mov	local03, #255
0a490     0F 29 02 F6 | 	mov	local06, local01
0a494     10 2B 02 F6 | 	mov	local07, local02
0a498     11 1F 02 F6 | 	mov	local01, local03
0a49c     4A 00 00 FF 
0a4a0     7C E4 05 F1 | 	add	objptr, ##38012
0a4a4     F2 26 02 FB | 	rdlong	local05, objptr
0a4a8     13 25 02 F6 | 	mov	local04, local05
0a4ac     01 24 66 F0 | 	shl	local04, #1
0a4b0     13 25 02 F1 | 	add	local04, local05
0a4b4     02 24 66 F0 | 	shl	local04, #2
0a4b8     03 00 00 FF 
0a4bc     00 E4 85 F1 | 	sub	objptr, ##1536
0a4c0     F2 24 02 F1 | 	add	local04, objptr
0a4c4     12 29 62 FC | 	wrlong	local06, local04
0a4c8     03 00 00 FF 
0a4cc     00 E4 05 F1 | 	add	objptr, ##1536
0a4d0     F2 28 02 FB | 	rdlong	local06, objptr
0a4d4     14 27 02 F6 | 	mov	local05, local06
0a4d8     01 26 66 F0 | 	shl	local05, #1
0a4dc     14 27 02 F1 | 	add	local05, local06
0a4e0     02 26 66 F0 | 	shl	local05, #2
0a4e4     03 00 00 FF 
0a4e8     00 E4 85 F1 | 	sub	objptr, ##1536
0a4ec     F2 26 02 F1 | 	add	local05, objptr
0a4f0     04 26 06 F1 | 	add	local05, #4
0a4f4     13 2B 62 FC | 	wrlong	local07, local05
0a4f8     03 00 00 FF 
0a4fc     00 E4 05 F1 | 	add	objptr, ##1536
0a500     F2 2A 02 FB | 	rdlong	local07, objptr
0a504     15 29 02 F6 | 	mov	local06, local07
0a508     01 28 66 F0 | 	shl	local06, #1
0a50c     15 29 02 F1 | 	add	local06, local07
0a510     02 28 66 F0 | 	shl	local06, #2
0a514     03 00 00 FF 
0a518     00 E4 85 F1 | 	sub	objptr, ##1536
0a51c     F2 28 02 F1 | 	add	local06, objptr
0a520     08 28 06 F1 | 	add	local06, #8
0a524     14 1F 62 FC | 	wrlong	local01, local06
0a528     03 00 00 FF 
0a52c     00 E4 05 F1 | 	add	objptr, ##1536
0a530     F2 28 02 FB | 	rdlong	local06, objptr
0a534     01 28 06 F1 | 	add	local06, #1
0a538     F2 28 62 FC | 	wrlong	local06, objptr
0a53c     4A 00 00 FF 
0a540     7C E4 85 F1 | 	sub	objptr, ##38012
0a544     1D FA 05 F6 | 	mov	result1, #29
0a548     54 01 90 FD | 	jmp	#LR__0883
0a54c                 | LR__0880
0a54c     00 1E 06 F6 | 	mov	local01, #0
0a550     58 01 B0 FD | 	call	#_addsub
0a554     37 00 00 FF 
0a558     44 E4 05 F1 | 	add	objptr, ##28228
0a55c     F2 24 02 FB | 	rdlong	local04, objptr
0a560     03 24 66 F0 | 	shl	local04, #3
0a564     02 00 00 FF 
0a568     38 E4 85 F1 | 	sub	objptr, ##1080
0a56c     F2 24 02 F1 | 	add	local04, objptr
0a570     04 24 06 F1 | 	add	local04, #4
0a574     12 27 02 FB | 	rdlong	local05, local04
0a578                 | ' t3.result.uresult=0
0a578                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
0a578                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
0a578                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0a578     35 00 00 FF 
0a57c     0C E4 85 F1 | 	sub	objptr, ##27148
0a580                 | LR__0881
0a580     1B 26 0E F2 | 	cmp	local05, #27 wz
0a584     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
0a588     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
0a58c     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
0a590     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
0a594     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
0a598     00 01 90 5D |  if_ne	jmp	#LR__0882
0a59c     37 00 00 FF 
0a5a0     44 E4 05 F1 | 	add	objptr, ##28228
0a5a4     F2 28 02 FB | 	rdlong	local06, objptr
0a5a8     01 28 06 F1 | 	add	local06, #1
0a5ac     F2 28 62 FC | 	wrlong	local06, objptr
0a5b0     37 00 00 FF 
0a5b4     44 E4 85 F1 | 	sub	objptr, ##28228
0a5b8     F0 00 B0 FD | 	call	#_addsub
0a5bc     13 23 02 F6 | 	mov	local03, local05
0a5c0     0F 29 02 F6 | 	mov	local06, local01
0a5c4     10 2B 02 F6 | 	mov	local07, local02
0a5c8     11 27 02 F6 | 	mov	local05, local03
0a5cc     4A 00 00 FF 
0a5d0     7C E4 05 F1 | 	add	objptr, ##38012
0a5d4     F2 24 02 FB | 	rdlong	local04, objptr
0a5d8     12 FB 01 F6 | 	mov	result1, local04
0a5dc     01 FA 65 F0 | 	shl	result1, #1
0a5e0     12 FB 01 F1 | 	add	result1, local04
0a5e4     02 FA 65 F0 | 	shl	result1, #2
0a5e8     03 00 00 FF 
0a5ec     00 E4 85 F1 | 	sub	objptr, ##1536
0a5f0     F2 FA 01 F1 | 	add	result1, objptr
0a5f4     FD 28 62 FC | 	wrlong	local06, result1
0a5f8     03 00 00 FF 
0a5fc     00 E4 05 F1 | 	add	objptr, ##1536
0a600     F2 28 02 FB | 	rdlong	local06, objptr
0a604     14 25 02 F6 | 	mov	local04, local06
0a608     01 24 66 F0 | 	shl	local04, #1
0a60c     14 25 02 F1 | 	add	local04, local06
0a610     02 24 66 F0 | 	shl	local04, #2
0a614     03 00 00 FF 
0a618     00 E4 85 F1 | 	sub	objptr, ##1536
0a61c     F2 24 02 F1 | 	add	local04, objptr
0a620     04 24 06 F1 | 	add	local04, #4
0a624     12 2B 62 FC | 	wrlong	local07, local04
0a628     03 00 00 FF 
0a62c     00 E4 05 F1 | 	add	objptr, ##1536
0a630     F2 2A 02 FB | 	rdlong	local07, objptr
0a634     15 29 02 F6 | 	mov	local06, local07
0a638     01 28 66 F0 | 	shl	local06, #1
0a63c     15 29 02 F1 | 	add	local06, local07
0a640     02 28 66 F0 | 	shl	local06, #2
0a644     03 00 00 FF 
0a648     00 E4 85 F1 | 	sub	objptr, ##1536
0a64c     F2 28 02 F1 | 	add	local06, objptr
0a650     08 28 06 F1 | 	add	local06, #8
0a654     14 27 62 FC | 	wrlong	local05, local06
0a658     03 00 00 FF 
0a65c     00 E4 05 F1 | 	add	objptr, ##1536
0a660     F2 28 02 FB | 	rdlong	local06, objptr
0a664     01 28 06 F1 | 	add	local06, #1
0a668     F2 28 62 FC | 	wrlong	local06, objptr
0a66c     13 00 00 FF 
0a670     38 E4 85 F1 | 	sub	objptr, ##9784
0a674     F2 24 02 FB | 	rdlong	local04, objptr
0a678     03 24 66 F0 | 	shl	local04, #3
0a67c     02 00 00 FF 
0a680     38 E4 85 F1 | 	sub	objptr, ##1080
0a684     F2 24 02 F1 | 	add	local04, objptr
0a688     04 24 06 F1 | 	add	local04, #4
0a68c     12 27 02 FB | 	rdlong	local05, local04
0a690     35 00 00 FF 
0a694     0C E4 85 F1 | 	sub	objptr, ##27148
0a698     E4 FE 9F FD | 	jmp	#LR__0881
0a69c                 | LR__0882
0a69c                 | ' return 0  
0a69c     00 FA 05 F6 | 	mov	result1, #0
0a6a0                 | LR__0883
0a6a0     A7 F0 03 F6 | 	mov	ptra, fp
0a6a4     B2 00 A0 FD | 	call	#popregs_
0a6a8                 | _expr_ret
0a6a8     2D 00 64 FD | 	ret
0a6ac                 | 
0a6ac                 | ' 
0a6ac                 | ' 
0a6ac                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
0a6ac                 | ' 
0a6ac                 | ' function addsub() as integer 
0a6ac                 | _addsub
0a6ac     07 4A 05 F6 | 	mov	COUNT_, #7
0a6b0     A8 00 A0 FD | 	call	#pushregs_
0a6b4                 | _addsub_enter
0a6b4     00 1E 06 F6 | 	mov	local01, #0
0a6b8     50 01 B0 FD | 	call	#_muldiv
0a6bc     37 00 00 FF 
0a6c0     44 E4 05 F1 | 	add	objptr, ##28228
0a6c4     F2 24 02 FB | 	rdlong	local04, objptr
0a6c8     03 24 66 F0 | 	shl	local04, #3
0a6cc     02 00 00 FF 
0a6d0     38 E4 85 F1 | 	sub	objptr, ##1080
0a6d4     F2 24 02 F1 | 	add	local04, objptr
0a6d8     04 24 06 F1 | 	add	local04, #4
0a6dc     12 27 02 FB | 	rdlong	local05, local04
0a6e0                 | ' t3.result.uresult=0
0a6e0                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
0a6e0                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
0a6e0                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0a6e0     35 00 00 FF 
0a6e4     0C E4 85 F1 | 	sub	objptr, ##27148
0a6e8                 | LR__0890
0a6e8     01 26 0E F2 | 	cmp	local05, #1 wz
0a6ec     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
0a6f0     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
0a6f4     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
0a6f8     00 01 90 5D |  if_ne	jmp	#LR__0891
0a6fc     37 00 00 FF 
0a700     44 E4 05 F1 | 	add	objptr, ##28228
0a704     F2 24 02 FB | 	rdlong	local04, objptr
0a708     01 24 06 F1 | 	add	local04, #1
0a70c     F2 24 62 FC | 	wrlong	local04, objptr
0a710     37 00 00 FF 
0a714     44 E4 85 F1 | 	sub	objptr, ##28228
0a718     F0 00 B0 FD | 	call	#_muldiv
0a71c     13 23 02 F6 | 	mov	local03, local05
0a720     0F 29 02 F6 | 	mov	local06, local01
0a724     10 2B 02 F6 | 	mov	local07, local02
0a728     11 27 02 F6 | 	mov	local05, local03
0a72c     4A 00 00 FF 
0a730     7C E4 05 F1 | 	add	objptr, ##38012
0a734     F2 24 02 FB | 	rdlong	local04, objptr
0a738     12 FB 01 F6 | 	mov	result1, local04
0a73c     01 FA 65 F0 | 	shl	result1, #1
0a740     12 FB 01 F1 | 	add	result1, local04
0a744     02 FA 65 F0 | 	shl	result1, #2
0a748     03 00 00 FF 
0a74c     00 E4 85 F1 | 	sub	objptr, ##1536
0a750     F2 FA 01 F1 | 	add	result1, objptr
0a754     FD 28 62 FC | 	wrlong	local06, result1
0a758     03 00 00 FF 
0a75c     00 E4 05 F1 | 	add	objptr, ##1536
0a760     F2 28 02 FB | 	rdlong	local06, objptr
0a764     14 25 02 F6 | 	mov	local04, local06
0a768     01 24 66 F0 | 	shl	local04, #1
0a76c     14 25 02 F1 | 	add	local04, local06
0a770     02 24 66 F0 | 	shl	local04, #2
0a774     03 00 00 FF 
0a778     00 E4 85 F1 | 	sub	objptr, ##1536
0a77c     F2 24 02 F1 | 	add	local04, objptr
0a780     04 24 06 F1 | 	add	local04, #4
0a784     12 2B 62 FC | 	wrlong	local07, local04
0a788     03 00 00 FF 
0a78c     00 E4 05 F1 | 	add	objptr, ##1536
0a790     F2 2A 02 FB | 	rdlong	local07, objptr
0a794     15 29 02 F6 | 	mov	local06, local07
0a798     01 28 66 F0 | 	shl	local06, #1
0a79c     15 29 02 F1 | 	add	local06, local07
0a7a0     02 28 66 F0 | 	shl	local06, #2
0a7a4     03 00 00 FF 
0a7a8     00 E4 85 F1 | 	sub	objptr, ##1536
0a7ac     F2 28 02 F1 | 	add	local06, objptr
0a7b0     08 28 06 F1 | 	add	local06, #8
0a7b4     14 27 62 FC | 	wrlong	local05, local06
0a7b8     03 00 00 FF 
0a7bc     00 E4 05 F1 | 	add	objptr, ##1536
0a7c0     F2 28 02 FB | 	rdlong	local06, objptr
0a7c4     01 28 06 F1 | 	add	local06, #1
0a7c8     F2 28 62 FC | 	wrlong	local06, objptr
0a7cc     13 00 00 FF 
0a7d0     38 E4 85 F1 | 	sub	objptr, ##9784
0a7d4     F2 24 02 FB | 	rdlong	local04, objptr
0a7d8     03 24 66 F0 | 	shl	local04, #3
0a7dc     02 00 00 FF 
0a7e0     38 E4 85 F1 | 	sub	objptr, ##1080
0a7e4     F2 24 02 F1 | 	add	local04, objptr
0a7e8     04 24 06 F1 | 	add	local04, #4
0a7ec     12 27 02 FB | 	rdlong	local05, local04
0a7f0     35 00 00 FF 
0a7f4     0C E4 85 F1 | 	sub	objptr, ##27148
0a7f8     EC FE 9F FD | 	jmp	#LR__0890
0a7fc                 | LR__0891
0a7fc                 | '   return 0
0a7fc     00 FA 05 F6 | 	mov	result1, #0
0a800     A7 F0 03 F6 | 	mov	ptra, fp
0a804     B2 00 A0 FD | 	call	#popregs_
0a808                 | _addsub_ret
0a808     2D 00 64 FD | 	ret
0a80c                 | 
0a80c                 | ' 
0a80c                 | ' sub muldiv()
0a80c                 | _muldiv
0a80c     08 4A 05 F6 | 	mov	COUNT_, #8
0a810     A8 00 A0 FD | 	call	#pushregs_
0a814                 | _muldiv_enter
0a814     00 1E 06 F6 | 	mov	local01, #0
0a818     58 01 B0 FD | 	call	#_getvalue
0a81c     37 00 00 FF 
0a820     44 E4 05 F1 | 	add	objptr, ##28228
0a824     F2 24 02 FB | 	rdlong	local04, objptr
0a828     03 24 66 F0 | 	shl	local04, #3
0a82c     02 00 00 FF 
0a830     38 E4 85 F1 | 	sub	objptr, ##1080
0a834     F2 24 02 F1 | 	add	local04, objptr
0a838     04 24 06 F1 | 	add	local04, #4
0a83c     12 27 02 FB | 	rdlong	local05, local04
0a840                 | ' t3.result.uresult=0
0a840                 | ' getvalue()    
0a840                 | ' op = lparts(ct).token
0a840                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0a840     35 00 00 FF 
0a844     0C E4 85 F1 | 	sub	objptr, ##27148
0a848                 | LR__0900
0a848     05 26 0E F2 | 	cmp	local05, #5 wz
0a84c     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
0a850     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
0a854     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
0a858     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
0a85c     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
0a860     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
0a864     00 01 90 5D |  if_ne	jmp	#LR__0901
0a868     37 00 00 FF 
0a86c     44 E4 05 F1 | 	add	objptr, ##28228
0a870     F2 24 02 FB | 	rdlong	local04, objptr
0a874     01 24 06 F1 | 	add	local04, #1
0a878     F2 24 62 FC | 	wrlong	local04, objptr
0a87c     37 00 00 FF 
0a880     44 E4 85 F1 | 	sub	objptr, ##28228
0a884     EC 00 B0 FD | 	call	#_getvalue
0a888     13 23 02 F6 | 	mov	local03, local05
0a88c     0F 29 02 F6 | 	mov	local06, local01
0a890     10 2B 02 F6 | 	mov	local07, local02
0a894     11 27 02 F6 | 	mov	local05, local03
0a898     4A 00 00 FF 
0a89c     7C E4 05 F1 | 	add	objptr, ##38012
0a8a0     F2 24 02 FB | 	rdlong	local04, objptr
0a8a4     12 2D 02 F6 | 	mov	local08, local04
0a8a8     01 2C 66 F0 | 	shl	local08, #1
0a8ac     12 2D 02 F1 | 	add	local08, local04
0a8b0     02 2C 66 F0 | 	shl	local08, #2
0a8b4     03 00 00 FF 
0a8b8     00 E4 85 F1 | 	sub	objptr, ##1536
0a8bc     F2 2C 02 F1 | 	add	local08, objptr
0a8c0     16 29 62 FC | 	wrlong	local06, local08
0a8c4     03 00 00 FF 
0a8c8     00 E4 05 F1 | 	add	objptr, ##1536
0a8cc     F2 2C 02 FB | 	rdlong	local08, objptr
0a8d0     16 29 02 F6 | 	mov	local06, local08
0a8d4     01 28 66 F0 | 	shl	local06, #1
0a8d8     16 29 02 F1 | 	add	local06, local08
0a8dc     02 28 66 F0 | 	shl	local06, #2
0a8e0     03 00 00 FF 
0a8e4     00 E4 85 F1 | 	sub	objptr, ##1536
0a8e8     F2 28 02 F1 | 	add	local06, objptr
0a8ec     04 28 06 F1 | 	add	local06, #4
0a8f0     14 2B 62 FC | 	wrlong	local07, local06
0a8f4     03 00 00 FF 
0a8f8     00 E4 05 F1 | 	add	objptr, ##1536
0a8fc     F2 2C 02 FB | 	rdlong	local08, objptr
0a900     16 2B 02 F6 | 	mov	local07, local08
0a904     01 2A 66 F0 | 	shl	local07, #1
0a908     16 2B 02 F1 | 	add	local07, local08
0a90c     02 2A 66 F0 | 	shl	local07, #2
0a910     03 00 00 FF 
0a914     00 E4 85 F1 | 	sub	objptr, ##1536
0a918     F2 2A 02 F1 | 	add	local07, objptr
0a91c     08 2A 06 F1 | 	add	local07, #8
0a920     15 27 62 FC | 	wrlong	local05, local07
0a924     03 00 00 FF 
0a928     00 E4 05 F1 | 	add	objptr, ##1536
0a92c     F2 28 02 FB | 	rdlong	local06, objptr
0a930     01 28 06 F1 | 	add	local06, #1
0a934     F2 28 62 FC | 	wrlong	local06, objptr
0a938     13 00 00 FF 
0a93c     38 E4 85 F1 | 	sub	objptr, ##9784
0a940     F2 24 02 FB | 	rdlong	local04, objptr
0a944     03 24 66 F0 | 	shl	local04, #3
0a948     02 00 00 FF 
0a94c     38 E4 85 F1 | 	sub	objptr, ##1080
0a950     F2 24 02 F1 | 	add	local04, objptr
0a954     04 24 06 F1 | 	add	local04, #4
0a958     12 27 02 FB | 	rdlong	local05, local04
0a95c     35 00 00 FF 
0a960     0C E4 85 F1 | 	sub	objptr, ##27148
0a964     E0 FE 9F FD | 	jmp	#LR__0900
0a968                 | LR__0901
0a968     A7 F0 03 F6 | 	mov	ptra, fp
0a96c     B2 00 A0 FD | 	call	#popregs_
0a970                 | _muldiv_ret
0a970     2D 00 64 FD | 	ret
0a974                 | 
0a974                 | ' 
0a974                 | ' sub getvalue() 
0a974                 | _getvalue
0a974     0B 4A 05 F6 | 	mov	COUNT_, #11
0a978     A8 00 A0 FD | 	call	#pushregs_
0a97c                 | _getvalue_enter
0a97c     01 24 06 F6 | 	mov	local04, #1
0a980     00 1E 06 F6 | 	mov	local01, #0
0a984     1D 22 06 F6 | 	mov	local03, #29
0a988     37 00 00 FF 
0a98c     44 E4 05 F1 | 	add	objptr, ##28228
0a990     F2 16 02 FB | 	rdlong	arg03, objptr
0a994     03 16 66 F0 | 	shl	arg03, #3
0a998     02 00 00 FF 
0a99c     38 E4 85 F1 | 	sub	objptr, ##1080
0a9a0     F2 16 02 F1 | 	add	arg03, objptr
0a9a4     04 16 06 F1 | 	add	arg03, #4
0a9a8     0B 27 02 FB | 	rdlong	local05, arg03
0a9ac                 | ' m=1
0a9ac                 | ' t1.result.uresult=0: t1.result_type=result_uint
0a9ac                 | ' op=lparts(ct).token
0a9ac                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
0a9ac     02 26 0E F2 | 	cmp	local05, #2 wz
0a9b0     35 00 00 FF 
0a9b4     0C E4 85 F1 | 	sub	objptr, ##27148
0a9b8     38 00 90 5D |  if_ne	jmp	#LR__0910
0a9bc     01 24 66 F6 | 	neg	local04, #1
0a9c0     37 00 00 FF 
0a9c4     44 E4 05 F1 | 	add	objptr, ##28228
0a9c8     F2 26 02 FB | 	rdlong	local05, objptr
0a9cc     01 26 06 F1 | 	add	local05, #1
0a9d0     F2 26 62 FC | 	wrlong	local05, objptr
0a9d4     03 26 66 F0 | 	shl	local05, #3
0a9d8     02 00 00 FF 
0a9dc     38 E4 85 F1 | 	sub	objptr, ##1080
0a9e0     F2 26 02 F1 | 	add	local05, objptr
0a9e4     04 26 06 F1 | 	add	local05, #4
0a9e8     13 27 02 FB | 	rdlong	local05, local05
0a9ec     35 00 00 FF 
0a9f0     0C E4 85 F1 | 	sub	objptr, ##27148
0a9f4                 | LR__0910
0a9f4                 | ' select case op
0a9f4     01 00 00 FF 
0a9f8     00 26 0E F2 | 	cmp	local05, ##512 wz
0a9fc     44 00 90 AD |  if_e	jmp	#LR__0911
0aa00     01 00 00 FF 
0aa04     01 26 0E F2 | 	cmp	local05, ##513 wz
0aa08     90 01 90 AD |  if_e	jmp	#LR__0914
0aa0c     01 00 00 FF 
0aa10     02 26 0E F2 | 	cmp	local05, ##514 wz
0aa14     44 04 90 AD |  if_e	jmp	#LR__0921
0aa18     01 00 00 FF 
0aa1c     03 26 0E F2 | 	cmp	local05, ##515 wz
0aa20     A8 05 90 AD |  if_e	jmp	#LR__0924
0aa24     2C 26 0E F2 | 	cmp	local05, #44 wz
0aa28     7C 07 90 AD |  if_e	jmp	#LR__0929
0aa2c     01 00 00 FF 
0aa30     04 26 0E F2 | 	cmp	local05, ##516 wz
0aa34     74 08 90 AD |  if_e	jmp	#LR__0930
0aa38     15 26 0E F2 | 	cmp	local05, #21 wz
0aa3c     94 08 90 AD |  if_e	jmp	#LR__0931
0aa40     04 09 90 FD | 	jmp	#LR__0932
0aa44                 | LR__0911
0aa44                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
0aa44     01 24 0E F2 | 	cmp	local04, #1 wz
0aa48     3C 00 90 5D |  if_ne	jmp	#LR__0912
0aa4c     37 00 00 FF 
0aa50     44 E4 05 F1 | 	add	objptr, ##28228
0aa54     F2 26 02 FB | 	rdlong	local05, objptr
0aa58     03 26 66 F0 | 	shl	local05, #3
0aa5c     02 00 00 FF 
0aa60     38 E4 85 F1 | 	sub	objptr, ##1080
0aa64     F2 26 02 F1 | 	add	local05, objptr
0aa68     13 13 02 FB | 	rdlong	arg01, local05
0aa6c     00 14 06 F6 | 	mov	arg02, #0
0aa70     35 00 00 FF 
0aa74     0C E4 85 F1 | 	sub	objptr, ##27148
0aa78     D8 90 B1 FD | 	call	#__system____builtin_atoi
0aa7c     FD 24 02 FD | 	qmul	local04, result1
0aa80     18 1E 62 FD | 	getqx	local01
0aa84     1C 22 06 F6 | 	mov	local03, #28
0aa88                 | LR__0912
0aa88                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
0aa88     FF FF 7F FF 
0aa8c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0aa90     3C 00 90 5D |  if_ne	jmp	#LR__0913
0aa94     37 00 00 FF 
0aa98     44 E4 05 F1 | 	add	objptr, ##28228
0aa9c     F2 26 02 FB | 	rdlong	local05, objptr
0aaa0     03 26 66 F0 | 	shl	local05, #3
0aaa4     02 00 00 FF 
0aaa8     38 E4 85 F1 | 	sub	objptr, ##1080
0aaac     F2 26 02 F1 | 	add	local05, objptr
0aab0     13 13 02 FB | 	rdlong	arg01, local05
0aab4     00 14 06 F6 | 	mov	arg02, #0
0aab8     35 00 00 FF 
0aabc     0C E4 85 F1 | 	sub	objptr, ##27148
0aac0     90 90 B1 FD | 	call	#__system____builtin_atoi
0aac4     FD 24 02 FD | 	qmul	local04, result1
0aac8     18 1E 62 FD | 	getqx	local01
0aacc     1C 22 06 F6 | 	mov	local03, #28
0aad0                 | LR__0913
0aad0     0F 29 02 F6 | 	mov	local06, local01
0aad4     10 2B 02 F6 | 	mov	local07, local02
0aad8     11 27 02 F6 | 	mov	local05, local03
0aadc     4A 00 00 FF 
0aae0     7C E4 05 F1 | 	add	objptr, ##38012
0aae4     F2 1E 02 FB | 	rdlong	local01, objptr
0aae8     0F 25 02 F6 | 	mov	local04, local01
0aaec     01 24 66 F0 | 	shl	local04, #1
0aaf0     0F 25 02 F1 | 	add	local04, local01
0aaf4     02 24 66 F0 | 	shl	local04, #2
0aaf8     03 00 00 FF 
0aafc     00 E4 85 F1 | 	sub	objptr, ##1536
0ab00     F2 24 02 F1 | 	add	local04, objptr
0ab04     12 29 62 FC | 	wrlong	local06, local04
0ab08     03 00 00 FF 
0ab0c     00 E4 05 F1 | 	add	objptr, ##1536
0ab10     F2 28 02 FB | 	rdlong	local06, objptr
0ab14     14 1F 02 F6 | 	mov	local01, local06
0ab18     01 1E 66 F0 | 	shl	local01, #1
0ab1c     14 1F 02 F1 | 	add	local01, local06
0ab20     02 1E 66 F0 | 	shl	local01, #2
0ab24     03 00 00 FF 
0ab28     00 E4 85 F1 | 	sub	objptr, ##1536
0ab2c     F2 1E 02 F1 | 	add	local01, objptr
0ab30     04 1E 06 F1 | 	add	local01, #4
0ab34     0F 2B 62 FC | 	wrlong	local07, local01
0ab38     03 00 00 FF 
0ab3c     00 E4 05 F1 | 	add	objptr, ##1536
0ab40     F2 2A 02 FB | 	rdlong	local07, objptr
0ab44     15 29 02 F6 | 	mov	local06, local07
0ab48     01 28 66 F0 | 	shl	local06, #1
0ab4c     15 29 02 F1 | 	add	local06, local07
0ab50     02 28 66 F0 | 	shl	local06, #2
0ab54     03 00 00 FF 
0ab58     00 E4 85 F1 | 	sub	objptr, ##1536
0ab5c     F2 28 02 F1 | 	add	local06, objptr
0ab60     08 28 06 F1 | 	add	local06, #8
0ab64     14 27 62 FC | 	wrlong	local05, local06
0ab68     03 00 00 FF 
0ab6c     00 E4 05 F1 | 	add	objptr, ##1536
0ab70     F2 28 02 FB | 	rdlong	local06, objptr
0ab74     01 28 06 F1 | 	add	local06, #1
0ab78     F2 28 62 FC | 	wrlong	local06, objptr
0ab7c     13 00 00 FF 
0ab80     38 E4 85 F1 | 	sub	objptr, ##9784
0ab84     F2 28 02 FB | 	rdlong	local06, objptr
0ab88     01 28 06 F1 | 	add	local06, #1
0ab8c     F2 28 62 FC | 	wrlong	local06, objptr
0ab90     37 00 00 FF 
0ab94     44 E4 85 F1 | 	sub	objptr, ##28228
0ab98     D0 07 90 FD | 	jmp	#LR__0933
0ab9c                 | LR__0914
0ab9c                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0ab9c     37 00 00 FF 
0aba0     44 E4 05 F1 | 	add	objptr, ##28228
0aba4     F2 16 02 FB | 	rdlong	arg03, objptr
0aba8     03 16 66 F0 | 	shl	arg03, #3
0abac     02 00 00 FF 
0abb0     38 E4 85 F1 | 	sub	objptr, ##1080
0abb4     F2 16 02 F1 | 	add	arg03, objptr
0abb8     0B 13 02 FB | 	rdlong	arg01, arg03
0abbc     01 14 06 F6 | 	mov	arg02, #1
0abc0     35 00 00 FF 
0abc4     0C E4 85 F1 | 	sub	objptr, ##27148
0abc8     D8 7D B1 FD | 	call	#__system__Left_S
0abcc     FD 12 02 F6 | 	mov	arg01, result1
0abd0     83 01 00 FF 
0abd4     B8 15 06 F6 | 	mov	arg02, ##@LR__5377
0abd8     74 5D B1 FD | 	call	#__system___string_cmp
0abdc     00 FA 0D F2 | 	cmp	result1, #0 wz
0abe0     94 00 90 5D |  if_ne	jmp	#LR__0917
0abe4     37 00 00 FF 
0abe8     44 E4 05 F1 | 	add	objptr, ##28228
0abec     F2 2A 02 FB | 	rdlong	local07, objptr
0abf0     15 29 02 F6 | 	mov	local06, local07
0abf4     03 28 66 F0 | 	shl	local06, #3
0abf8     02 00 00 FF 
0abfc     38 E4 85 F1 | 	sub	objptr, ##1080
0ac00     F2 28 02 F1 | 	add	local06, objptr
0ac04     83 01 00 FF 
0ac08     BA 27 06 F6 | 	mov	local05, ##@LR__5378
0ac0c     03 2A 66 F0 | 	shl	local07, #3
0ac10     F2 2A 02 F1 | 	add	local07, objptr
0ac14     15 2B 02 FB | 	rdlong	local07, local07
0ac18     02 00 00 FF 
0ac1c     38 E4 05 F1 | 	add	objptr, ##1080
0ac20     F2 1E 02 FB | 	rdlong	local01, objptr
0ac24     03 1E 66 F0 | 	shl	local01, #3
0ac28     02 00 00 FF 
0ac2c     38 E4 85 F1 | 	sub	objptr, ##1080
0ac30     F2 1E 02 F1 | 	add	local01, objptr
0ac34     0F 13 02 FB | 	rdlong	arg01, local01
0ac38     35 00 00 FF 
0ac3c     0C E4 85 F1 | 	sub	objptr, ##27148
0ac40     09 2D 02 F6 | 	mov	local08, arg01
0ac44     97 06 48 FB | 	callpa	#(@LR__0916-@LR__0915)>>2,fcache_load_ptr_
0ac48                 | LR__0915
0ac48     16 FB C9 FA | 	rdbyte	result1, local08 wz
0ac4c     01 2C 06 51 |  if_ne	add	local08, #1
0ac50     F4 FF 9F 5D |  if_ne	jmp	#LR__0915
0ac54                 | LR__0916
0ac54     09 2D 82 F1 | 	sub	local08, arg01
0ac58     16 15 02 F6 | 	mov	arg02, local08
0ac5c     01 14 86 F1 | 	sub	arg02, #1
0ac60     15 13 02 F6 | 	mov	arg01, local07
0ac64     C4 7D B1 FD | 	call	#__system__Right_S
0ac68     FD 14 02 F6 | 	mov	arg02, result1
0ac6c     13 13 02 F6 | 	mov	arg01, local05
0ac70     10 5D B1 FD | 	call	#__system___string_concat
0ac74     14 FB 61 FC | 	wrlong	result1, local06
0ac78                 | LR__0917
0ac78                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0ac78     37 00 00 FF 
0ac7c     44 E4 05 F1 | 	add	objptr, ##28228
0ac80     F2 16 02 FB | 	rdlong	arg03, objptr
0ac84     03 16 66 F0 | 	shl	arg03, #3
0ac88     02 00 00 FF 
0ac8c     38 E4 85 F1 | 	sub	objptr, ##1080
0ac90     F2 16 02 F1 | 	add	arg03, objptr
0ac94     0B 13 02 FB | 	rdlong	arg01, arg03
0ac98     01 14 06 F6 | 	mov	arg02, #1
0ac9c     35 00 00 FF 
0aca0     0C E4 85 F1 | 	sub	objptr, ##27148
0aca4     FC 7C B1 FD | 	call	#__system__Left_S
0aca8     FD 12 02 F6 | 	mov	arg01, result1
0acac     83 01 00 FF 
0acb0     BD 15 06 F6 | 	mov	arg02, ##@LR__5379
0acb4     98 5C B1 FD | 	call	#__system___string_cmp
0acb8     00 FA 0D F2 | 	cmp	result1, #0 wz
0acbc     94 00 90 5D |  if_ne	jmp	#LR__0920
0acc0     37 00 00 FF 
0acc4     44 E4 05 F1 | 	add	objptr, ##28228
0acc8     F2 2A 02 FB | 	rdlong	local07, objptr
0accc     15 29 02 F6 | 	mov	local06, local07
0acd0     03 28 66 F0 | 	shl	local06, #3
0acd4     02 00 00 FF 
0acd8     38 E4 85 F1 | 	sub	objptr, ##1080
0acdc     F2 28 02 F1 | 	add	local06, objptr
0ace0     83 01 00 FF 
0ace4     BF 27 06 F6 | 	mov	local05, ##@LR__5380
0ace8     03 2A 66 F0 | 	shl	local07, #3
0acec     F2 2A 02 F1 | 	add	local07, objptr
0acf0     15 2B 02 FB | 	rdlong	local07, local07
0acf4     02 00 00 FF 
0acf8     38 E4 05 F1 | 	add	objptr, ##1080
0acfc     F2 1E 02 FB | 	rdlong	local01, objptr
0ad00     03 1E 66 F0 | 	shl	local01, #3
0ad04     02 00 00 FF 
0ad08     38 E4 85 F1 | 	sub	objptr, ##1080
0ad0c     F2 1E 02 F1 | 	add	local01, objptr
0ad10     0F 13 02 FB | 	rdlong	arg01, local01
0ad14     35 00 00 FF 
0ad18     0C E4 85 F1 | 	sub	objptr, ##27148
0ad1c     09 2D 02 F6 | 	mov	local08, arg01
0ad20     97 06 48 FB | 	callpa	#(@LR__0919-@LR__0918)>>2,fcache_load_ptr_
0ad24                 | LR__0918
0ad24     16 FB C9 FA | 	rdbyte	result1, local08 wz
0ad28     01 2C 06 51 |  if_ne	add	local08, #1
0ad2c     F4 FF 9F 5D |  if_ne	jmp	#LR__0918
0ad30                 | LR__0919
0ad30     09 2D 82 F1 | 	sub	local08, arg01
0ad34     16 15 02 F6 | 	mov	arg02, local08
0ad38     01 14 86 F1 | 	sub	arg02, #1
0ad3c     15 13 02 F6 | 	mov	arg01, local07
0ad40     E8 7C B1 FD | 	call	#__system__Right_S
0ad44     FD 14 02 F6 | 	mov	arg02, result1
0ad48     13 13 02 F6 | 	mov	arg01, local05
0ad4c     34 5C B1 FD | 	call	#__system___string_concat
0ad50     14 FB 61 FC | 	wrlong	result1, local06
0ad54                 | LR__0920
0ad54     37 00 00 FF 
0ad58     44 E4 05 F1 | 	add	objptr, ##28228
0ad5c     F2 28 02 FB | 	rdlong	local06, objptr
0ad60     03 28 66 F0 | 	shl	local06, #3
0ad64     02 00 00 FF 
0ad68     38 E4 85 F1 | 	sub	objptr, ##1080
0ad6c     F2 28 02 F1 | 	add	local06, objptr
0ad70     14 13 02 FB | 	rdlong	arg01, local06
0ad74     00 14 06 F6 | 	mov	arg02, #0
0ad78     35 00 00 FF 
0ad7c     0C E4 85 F1 | 	sub	objptr, ##27148
0ad80     D0 8D B1 FD | 	call	#__system____builtin_atoi
0ad84     FD 24 02 FD | 	qmul	local04, result1
0ad88     4A 00 00 FF 
0ad8c     7C E4 05 F1 | 	add	objptr, ##38012
0ad90     F2 28 02 FB | 	rdlong	local06, objptr
0ad94     14 2F 02 F6 | 	mov	local09, local06
0ad98     01 2E 66 F0 | 	shl	local09, #1
0ad9c     14 2F 02 F1 | 	add	local09, local06
0ada0     02 2E 66 F0 | 	shl	local09, #2
0ada4     03 00 00 FF 
0ada8     00 E4 85 F1 | 	sub	objptr, ##1536
0adac     F2 2E 02 F1 | 	add	local09, objptr
0adb0     03 00 00 FF 
0adb4     00 E4 05 F1 | 	add	objptr, ##1536
0adb8     18 1E 62 FD | 	getqx	local01
0adbc     1C 22 06 F6 | 	mov	local03, #28
0adc0     0F 29 02 F6 | 	mov	local06, local01
0adc4     10 2B 02 F6 | 	mov	local07, local02
0adc8     17 29 62 FC | 	wrlong	local06, local09
0adcc     11 2F 02 F6 | 	mov	local09, local03
0add0     F2 28 02 FB | 	rdlong	local06, objptr
0add4     14 27 02 F6 | 	mov	local05, local06
0add8     01 26 66 F0 | 	shl	local05, #1
0addc     14 27 02 F1 | 	add	local05, local06
0ade0     02 26 66 F0 | 	shl	local05, #2
0ade4     03 00 00 FF 
0ade8     00 E4 85 F1 | 	sub	objptr, ##1536
0adec     F2 26 02 F1 | 	add	local05, objptr
0adf0     04 26 06 F1 | 	add	local05, #4
0adf4     13 2B 62 FC | 	wrlong	local07, local05
0adf8     03 00 00 FF 
0adfc     00 E4 05 F1 | 	add	objptr, ##1536
0ae00     F2 2A 02 FB | 	rdlong	local07, objptr
0ae04     15 29 02 F6 | 	mov	local06, local07
0ae08     01 28 66 F0 | 	shl	local06, #1
0ae0c     15 29 02 F1 | 	add	local06, local07
0ae10     02 28 66 F0 | 	shl	local06, #2
0ae14     03 00 00 FF 
0ae18     00 E4 85 F1 | 	sub	objptr, ##1536
0ae1c     F2 28 02 F1 | 	add	local06, objptr
0ae20     08 28 06 F1 | 	add	local06, #8
0ae24     14 2F 62 FC | 	wrlong	local09, local06
0ae28     03 00 00 FF 
0ae2c     00 E4 05 F1 | 	add	objptr, ##1536
0ae30     F2 28 02 FB | 	rdlong	local06, objptr
0ae34     01 28 06 F1 | 	add	local06, #1
0ae38     F2 28 62 FC | 	wrlong	local06, objptr
0ae3c     13 00 00 FF 
0ae40     38 E4 85 F1 | 	sub	objptr, ##9784
0ae44     F2 28 02 FB | 	rdlong	local06, objptr
0ae48     01 28 06 F1 | 	add	local06, #1
0ae4c     F2 28 62 FC | 	wrlong	local06, objptr
0ae50     37 00 00 FF 
0ae54     44 E4 85 F1 | 	sub	objptr, ##28228
0ae58     10 05 90 FD | 	jmp	#LR__0933
0ae5c                 | LR__0921
0ae5c                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0ae5c     01 24 0E F2 | 	cmp	local04, #1 wz
0ae60     48 00 90 5D |  if_ne	jmp	#LR__0922
0ae64     00 C0 1F FF 
0ae68     00 28 06 F6 | 	mov	local06, ##1065353216
0ae6c     37 00 00 FF 
0ae70     44 E4 05 F1 | 	add	objptr, ##28228
0ae74     F2 2E 02 FB | 	rdlong	local09, objptr
0ae78     03 2E 66 F0 | 	shl	local09, #3
0ae7c     02 00 00 FF 
0ae80     38 E4 85 F1 | 	sub	objptr, ##1080
0ae84     F2 2E 02 F1 | 	add	local09, objptr
0ae88     17 13 02 FB | 	rdlong	arg01, local09
0ae8c     35 00 00 FF 
0ae90     0C E4 85 F1 | 	sub	objptr, ##27148
0ae94     2C 8E B1 FD | 	call	#__system____builtin_atof
0ae98     FD 14 02 F6 | 	mov	arg02, result1
0ae9c     14 13 02 F6 | 	mov	arg01, local06
0aea0     38 86 B1 FD | 	call	#__system___float_mul
0aea4     FD 1E 02 F6 | 	mov	local01, result1
0aea8     1E 22 06 F6 | 	mov	local03, #30
0aeac                 | LR__0922
0aeac                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0aeac     FF FF 7F FF 
0aeb0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0aeb4     48 00 90 5D |  if_ne	jmp	#LR__0923
0aeb8     00 C0 5F FF 
0aebc     00 28 06 F6 | 	mov	local06, ##-1082130432
0aec0     37 00 00 FF 
0aec4     44 E4 05 F1 | 	add	objptr, ##28228
0aec8     F2 2E 02 FB | 	rdlong	local09, objptr
0aecc     03 2E 66 F0 | 	shl	local09, #3
0aed0     02 00 00 FF 
0aed4     38 E4 85 F1 | 	sub	objptr, ##1080
0aed8     F2 2E 02 F1 | 	add	local09, objptr
0aedc     17 13 02 FB | 	rdlong	arg01, local09
0aee0     35 00 00 FF 
0aee4     0C E4 85 F1 | 	sub	objptr, ##27148
0aee8     D8 8D B1 FD | 	call	#__system____builtin_atof
0aeec     FD 14 02 F6 | 	mov	arg02, result1
0aef0     14 13 02 F6 | 	mov	arg01, local06
0aef4     E4 85 B1 FD | 	call	#__system___float_mul
0aef8     FD 1E 02 F6 | 	mov	local01, result1
0aefc     1E 22 06 F6 | 	mov	local03, #30
0af00                 | LR__0923
0af00     0F 29 02 F6 | 	mov	local06, local01
0af04     10 2B 02 F6 | 	mov	local07, local02
0af08     11 27 02 F6 | 	mov	local05, local03
0af0c     4A 00 00 FF 
0af10     7C E4 05 F1 | 	add	objptr, ##38012
0af14     F2 1E 02 FB | 	rdlong	local01, objptr
0af18     0F 2F 02 F6 | 	mov	local09, local01
0af1c     01 2E 66 F0 | 	shl	local09, #1
0af20     0F 2F 02 F1 | 	add	local09, local01
0af24     02 2E 66 F0 | 	shl	local09, #2
0af28     03 00 00 FF 
0af2c     00 E4 85 F1 | 	sub	objptr, ##1536
0af30     F2 2E 02 F1 | 	add	local09, objptr
0af34     17 29 62 FC | 	wrlong	local06, local09
0af38     03 00 00 FF 
0af3c     00 E4 05 F1 | 	add	objptr, ##1536
0af40     F2 2E 02 FB | 	rdlong	local09, objptr
0af44     17 29 02 F6 | 	mov	local06, local09
0af48     01 28 66 F0 | 	shl	local06, #1
0af4c     17 29 02 F1 | 	add	local06, local09
0af50     02 28 66 F0 | 	shl	local06, #2
0af54     03 00 00 FF 
0af58     00 E4 85 F1 | 	sub	objptr, ##1536
0af5c     F2 28 02 F1 | 	add	local06, objptr
0af60     04 28 06 F1 | 	add	local06, #4
0af64     14 2B 62 FC | 	wrlong	local07, local06
0af68     03 00 00 FF 
0af6c     00 E4 05 F1 | 	add	objptr, ##1536
0af70     F2 2E 02 FB | 	rdlong	local09, objptr
0af74     17 2B 02 F6 | 	mov	local07, local09
0af78     01 2A 66 F0 | 	shl	local07, #1
0af7c     17 2B 02 F1 | 	add	local07, local09
0af80     02 2A 66 F0 | 	shl	local07, #2
0af84     03 00 00 FF 
0af88     00 E4 85 F1 | 	sub	objptr, ##1536
0af8c     F2 2A 02 F1 | 	add	local07, objptr
0af90     08 2A 06 F1 | 	add	local07, #8
0af94     15 27 62 FC | 	wrlong	local05, local07
0af98     03 00 00 FF 
0af9c     00 E4 05 F1 | 	add	objptr, ##1536
0afa0     F2 28 02 FB | 	rdlong	local06, objptr
0afa4     01 28 06 F1 | 	add	local06, #1
0afa8     F2 28 62 FC | 	wrlong	local06, objptr
0afac     13 00 00 FF 
0afb0     38 E4 85 F1 | 	sub	objptr, ##9784
0afb4     F2 28 02 FB | 	rdlong	local06, objptr
0afb8     01 28 06 F1 | 	add	local06, #1
0afbc     F2 28 62 FC | 	wrlong	local06, objptr
0afc0     37 00 00 FF 
0afc4     44 E4 85 F1 | 	sub	objptr, ##28228
0afc8     A0 03 90 FD | 	jmp	#LR__0933
0afcc                 | LR__0924
0afcc     1F 22 06 F6 | 	mov	local03, #31
0afd0     37 00 00 FF 
0afd4     44 E4 05 F1 | 	add	objptr, ##28228
0afd8     F2 16 02 FB | 	rdlong	arg03, objptr
0afdc     03 16 66 F0 | 	shl	arg03, #3
0afe0     02 00 00 FF 
0afe4     38 E4 85 F1 | 	sub	objptr, ##1080
0afe8     F2 16 02 F1 | 	add	arg03, objptr
0afec     0B 13 02 FB | 	rdlong	arg01, arg03
0aff0     35 00 00 FF 
0aff4     0C E4 85 F1 | 	sub	objptr, ##27148
0aff8     09 2D 02 F6 | 	mov	local08, arg01
0affc     97 06 48 FB | 	callpa	#(@LR__0926-@LR__0925)>>2,fcache_load_ptr_
0b000                 | LR__0925
0b000     16 FB C9 FA | 	rdbyte	result1, local08 wz
0b004     01 2C 06 51 |  if_ne	add	local08, #1
0b008     F4 FF 9F 5D |  if_ne	jmp	#LR__0925
0b00c                 | LR__0926
0b00c     09 2D 82 F1 | 	sub	local08, arg01
0b010     16 FB 01 F6 | 	mov	result1, local08
0b014     59 00 00 FF 
0b018     F8 E5 05 F1 | 	add	objptr, ##46072
0b01c     F2 FA 61 FC | 	wrlong	result1, objptr
0b020     48 E4 85 F1 | 	sub	objptr, #72
0b024     F2 12 02 FB | 	rdlong	arg01, objptr
0b028     FD 12 82 F1 | 	sub	arg01, result1
0b02c     04 12 86 F1 | 	sub	arg01, #4
0b030     03 12 26 F5 | 	andn	arg01, #3
0b034     F2 12 62 FC | 	wrlong	arg01, objptr
0b038     48 E4 05 F1 | 	add	objptr, #72
0b03c     F2 14 02 FB | 	rdlong	arg02, objptr
0b040     59 00 00 FF 
0b044     F8 E5 85 F1 | 	sub	objptr, ##46072
0b048     DC 26 B1 FD | 	call	#_pslpoke
0b04c                 | '     pslpoke memtop,l
0b04c                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0b04c     01 30 06 F6 | 	mov	local10, #1
0b050     59 00 00 FF 
0b054     F8 E5 05 F1 | 	add	objptr, ##46072
0b058     F2 32 02 FB | 	rdlong	local11, objptr
0b05c     59 00 00 FF 
0b060     F8 E5 85 F1 | 	sub	objptr, ##46072
0b064     01 32 06 F1 | 	add	local11, #1
0b068                 | LR__0927
0b068     19 31 52 F2 | 	cmps	local10, local11 wc
0b06c     5C 00 90 3D |  if_ae	jmp	#LR__0928
0b070     59 00 00 FF 
0b074     B0 E5 05 F1 | 	add	objptr, ##46000
0b078     F2 2A 02 FB | 	rdlong	local07, objptr
0b07c     03 2A 06 F1 | 	add	local07, #3
0b080     18 2B 02 F1 | 	add	local07, local10
0b084     22 00 00 FF 
0b088     6C E5 85 F1 | 	sub	objptr, ##17772
0b08c     F2 2E 02 FB | 	rdlong	local09, objptr
0b090     03 2E 66 F0 | 	shl	local09, #3
0b094     02 00 00 FF 
0b098     38 E4 85 F1 | 	sub	objptr, ##1080
0b09c     F2 2E 02 F1 | 	add	local09, objptr
0b0a0     17 13 02 FB | 	rdlong	arg01, local09
0b0a4     18 15 02 F6 | 	mov	arg02, local10
0b0a8     01 16 06 F6 | 	mov	arg03, #1
0b0ac     35 00 00 FF 
0b0b0     0C E4 85 F1 | 	sub	objptr, ##27148
0b0b4     04 7A B1 FD | 	call	#__system__Mid_S
0b0b8     FD 14 C2 FA | 	rdbyte	arg02, result1
0b0bc     15 13 02 F6 | 	mov	arg01, local07
0b0c0     F4 26 B1 FD | 	call	#_pspoke
0b0c4     01 30 06 F1 | 	add	local10, #1
0b0c8     9C FF 9F FD | 	jmp	#LR__0927
0b0cc                 | LR__0928
0b0cc     59 00 00 FF 
0b0d0     B0 E5 05 F1 | 	add	objptr, ##46000
0b0d4     F2 1E 02 FB | 	rdlong	local01, objptr
0b0d8     2B 22 06 F6 | 	mov	local03, #43
0b0dc     0F 29 02 F6 | 	mov	local06, local01
0b0e0     10 2B 02 F6 | 	mov	local07, local02
0b0e4     11 33 02 F6 | 	mov	local11, local03
0b0e8     0F 00 00 FF 
0b0ec     34 E5 85 F1 | 	sub	objptr, ##7988
0b0f0     F2 30 02 FB | 	rdlong	local10, objptr
0b0f4     18 2F 02 F6 | 	mov	local09, local10
0b0f8     01 2E 66 F0 | 	shl	local09, #1
0b0fc     18 2F 02 F1 | 	add	local09, local10
0b100     02 2E 66 F0 | 	shl	local09, #2
0b104     03 00 00 FF 
0b108     00 E4 85 F1 | 	sub	objptr, ##1536
0b10c     F2 2E 02 F1 | 	add	local09, objptr
0b110     17 29 62 FC | 	wrlong	local06, local09
0b114     03 00 00 FF 
0b118     00 E4 05 F1 | 	add	objptr, ##1536
0b11c     F2 30 02 FB | 	rdlong	local10, objptr
0b120     18 2F 02 F6 | 	mov	local09, local10
0b124     01 2E 66 F0 | 	shl	local09, #1
0b128     18 2F 02 F1 | 	add	local09, local10
0b12c     02 2E 66 F0 | 	shl	local09, #2
0b130     03 00 00 FF 
0b134     00 E4 85 F1 | 	sub	objptr, ##1536
0b138     F2 2E 02 F1 | 	add	local09, objptr
0b13c     04 2E 06 F1 | 	add	local09, #4
0b140     17 2B 62 FC | 	wrlong	local07, local09
0b144     03 00 00 FF 
0b148     00 E4 05 F1 | 	add	objptr, ##1536
0b14c     F2 30 02 FB | 	rdlong	local10, objptr
0b150     18 2F 02 F6 | 	mov	local09, local10
0b154     01 2E 66 F0 | 	shl	local09, #1
0b158     18 2F 02 F1 | 	add	local09, local10
0b15c     02 2E 66 F0 | 	shl	local09, #2
0b160     03 00 00 FF 
0b164     00 E4 85 F1 | 	sub	objptr, ##1536
0b168     F2 2E 02 F1 | 	add	local09, objptr
0b16c     08 2E 06 F1 | 	add	local09, #8
0b170     17 33 62 FC | 	wrlong	local11, local09
0b174     03 00 00 FF 
0b178     00 E4 05 F1 | 	add	objptr, ##1536
0b17c     F2 28 02 FB | 	rdlong	local06, objptr
0b180     01 28 06 F1 | 	add	local06, #1
0b184     F2 28 62 FC | 	wrlong	local06, objptr
0b188     13 00 00 FF 
0b18c     38 E4 85 F1 | 	sub	objptr, ##9784
0b190     F2 28 02 FB | 	rdlong	local06, objptr
0b194     01 28 06 F1 | 	add	local06, #1
0b198     F2 28 62 FC | 	wrlong	local06, objptr
0b19c     37 00 00 FF 
0b1a0     44 E4 85 F1 | 	sub	objptr, ##28228
0b1a4     C4 01 90 FD | 	jmp	#LR__0933
0b1a8                 | LR__0929
0b1a8     2C 22 06 F6 | 	mov	local03, #44
0b1ac     37 00 00 FF 
0b1b0     44 E4 05 F1 | 	add	objptr, ##28228
0b1b4     F2 28 02 FB | 	rdlong	local06, objptr
0b1b8     03 28 66 F0 | 	shl	local06, #3
0b1bc     02 00 00 FF 
0b1c0     38 E4 85 F1 | 	sub	objptr, ##1080
0b1c4     F2 28 02 F1 | 	add	local06, objptr
0b1c8     14 13 02 FB | 	rdlong	arg01, local06
0b1cc     00 14 06 F6 | 	mov	arg02, #0
0b1d0     35 00 00 FF 
0b1d4     0C E4 85 F1 | 	sub	objptr, ##27148
0b1d8     78 89 B1 FD | 	call	#__system____builtin_atoi
0b1dc     FD 1E 02 F6 | 	mov	local01, result1
0b1e0     0F 29 02 F6 | 	mov	local06, local01
0b1e4     10 2B 02 F6 | 	mov	local07, local02
0b1e8     11 33 02 F6 | 	mov	local11, local03
0b1ec     4A 00 00 FF 
0b1f0     7C E4 05 F1 | 	add	objptr, ##38012
0b1f4     F2 30 02 FB | 	rdlong	local10, objptr
0b1f8     18 2F 02 F6 | 	mov	local09, local10
0b1fc     01 2E 66 F0 | 	shl	local09, #1
0b200     18 2F 02 F1 | 	add	local09, local10
0b204     02 2E 66 F0 | 	shl	local09, #2
0b208     03 00 00 FF 
0b20c     00 E4 85 F1 | 	sub	objptr, ##1536
0b210     F2 2E 02 F1 | 	add	local09, objptr
0b214     17 29 62 FC | 	wrlong	local06, local09
0b218     03 00 00 FF 
0b21c     00 E4 05 F1 | 	add	objptr, ##1536
0b220     F2 30 02 FB | 	rdlong	local10, objptr
0b224     18 2F 02 F6 | 	mov	local09, local10
0b228     01 2E 66 F0 | 	shl	local09, #1
0b22c     18 2F 02 F1 | 	add	local09, local10
0b230     02 2E 66 F0 | 	shl	local09, #2
0b234     03 00 00 FF 
0b238     00 E4 85 F1 | 	sub	objptr, ##1536
0b23c     F2 2E 02 F1 | 	add	local09, objptr
0b240     04 2E 06 F1 | 	add	local09, #4
0b244     17 2B 62 FC | 	wrlong	local07, local09
0b248     03 00 00 FF 
0b24c     00 E4 05 F1 | 	add	objptr, ##1536
0b250     F2 30 02 FB | 	rdlong	local10, objptr
0b254     18 2F 02 F6 | 	mov	local09, local10
0b258     01 2E 66 F0 | 	shl	local09, #1
0b25c     18 2F 02 F1 | 	add	local09, local10
0b260     02 2E 66 F0 | 	shl	local09, #2
0b264     03 00 00 FF 
0b268     00 E4 85 F1 | 	sub	objptr, ##1536
0b26c     F2 2E 02 F1 | 	add	local09, objptr
0b270     08 2E 06 F1 | 	add	local09, #8
0b274     17 33 62 FC | 	wrlong	local11, local09
0b278     03 00 00 FF 
0b27c     00 E4 05 F1 | 	add	objptr, ##1536
0b280     F2 28 02 FB | 	rdlong	local06, objptr
0b284     01 28 06 F1 | 	add	local06, #1
0b288     F2 28 62 FC | 	wrlong	local06, objptr
0b28c     13 00 00 FF 
0b290     38 E4 85 F1 | 	sub	objptr, ##9784
0b294     F2 28 02 FB | 	rdlong	local06, objptr
0b298     01 28 06 F1 | 	add	local06, #1
0b29c     F2 28 62 FC | 	wrlong	local06, objptr
0b2a0     37 00 00 FF 
0b2a4     44 E4 85 F1 | 	sub	objptr, ##28228
0b2a8     C0 00 90 FD | 	jmp	#LR__0933
0b2ac                 | LR__0930
0b2ac     12 13 02 F6 | 	mov	arg01, local04
0b2b0     B8 03 B0 FD | 	call	#_getvar
0b2b4     37 00 00 FF 
0b2b8     44 E4 05 F1 | 	add	objptr, ##28228
0b2bc     F2 28 02 FB | 	rdlong	local06, objptr
0b2c0     01 28 06 F1 | 	add	local06, #1
0b2c4     F2 28 62 FC | 	wrlong	local06, objptr
0b2c8     37 00 00 FF 
0b2cc     44 E4 85 F1 | 	sub	objptr, ##28228
0b2d0     98 00 90 FD | 	jmp	#LR__0933
0b2d4                 | LR__0931
0b2d4     37 00 00 FF 
0b2d8     44 E4 05 F1 | 	add	objptr, ##28228
0b2dc     F2 28 02 FB | 	rdlong	local06, objptr
0b2e0     01 28 06 F1 | 	add	local06, #1
0b2e4     F2 28 62 FC | 	wrlong	local06, objptr
0b2e8     37 00 00 FF 
0b2ec     44 E4 85 F1 | 	sub	objptr, ##28228
0b2f0     58 F1 BF FD | 	call	#_expr
0b2f4                 | '     ct+=1
0b2f4                 | '     expr() 
0b2f4                 | '     if lparts(ct).token=token_rpar then ct+=1
0b2f4     37 00 00 FF 
0b2f8     44 E4 05 F1 | 	add	objptr, ##28228
0b2fc     F2 32 02 FB | 	rdlong	local11, objptr
0b300     03 32 66 F0 | 	shl	local11, #3
0b304     02 00 00 FF 
0b308     38 E4 85 F1 | 	sub	objptr, ##1080
0b30c     F2 32 02 F1 | 	add	local11, objptr
0b310     04 32 06 F1 | 	add	local11, #4
0b314     19 33 02 FB | 	rdlong	local11, local11
0b318     14 32 0E F2 | 	cmp	local11, #20 wz
0b31c     35 00 00 FF 
0b320     0C E4 85 F1 | 	sub	objptr, ##27148
0b324     44 00 90 5D |  if_ne	jmp	#LR__0933
0b328     37 00 00 FF 
0b32c     44 E4 05 F1 | 	add	objptr, ##28228
0b330     F2 28 02 FB | 	rdlong	local06, objptr
0b334     01 28 06 F1 | 	add	local06, #1
0b338     F2 28 62 FC | 	wrlong	local06, objptr
0b33c     37 00 00 FF 
0b340     44 E4 85 F1 | 	sub	objptr, ##28228
0b344     24 00 90 FD | 	jmp	#LR__0933
0b348                 | LR__0932
0b348     12 13 02 F6 | 	mov	arg01, local04
0b34c     28 00 B0 FD | 	call	#_getfun
0b350     37 00 00 FF 
0b354     44 E4 05 F1 | 	add	objptr, ##28228
0b358     F2 28 02 FB | 	rdlong	local06, objptr
0b35c     01 28 06 F1 | 	add	local06, #1
0b360     F2 28 62 FC | 	wrlong	local06, objptr
0b364     37 00 00 FF 
0b368     44 E4 85 F1 | 	sub	objptr, ##28228
0b36c                 | LR__0933
0b36c     A7 F0 03 F6 | 	mov	ptra, fp
0b370     B2 00 A0 FD | 	call	#popregs_
0b374                 | _getvalue_ret
0b374     2D 00 64 FD | 	ret
0b378                 | 
0b378                 | ' 
0b378                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
0b378                 | _getfun
0b378     0A 4A 05 F6 | 	mov	COUNT_, #10
0b37c     A8 00 A0 FD | 	call	#pushregs_
0b380                 | _getfun_enter
0b380     09 25 02 F6 | 	mov	local04, arg01
0b384     37 00 00 FF 
0b388     44 E4 05 F1 | 	add	objptr, ##28228
0b38c     F2 26 02 FB | 	rdlong	local05, objptr
0b390     13 29 02 F6 | 	mov	local06, local05
0b394     00 2A 06 F6 | 	mov	local07, #0
0b398                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
0b398                 | ' oldct=ct
0b398                 | ' numpar=0
0b398                 | '   
0b398                 | ' if lparts(ct+1).token=token_lpar then
0b398     01 26 06 F1 | 	add	local05, #1
0b39c     03 26 66 F0 | 	shl	local05, #3
0b3a0     02 00 00 FF 
0b3a4     38 E4 85 F1 | 	sub	objptr, ##1080
0b3a8     F2 26 02 F1 | 	add	local05, objptr
0b3ac     04 26 06 F1 | 	add	local05, #4
0b3b0     13 27 02 FB | 	rdlong	local05, local05
0b3b4     15 26 0E F2 | 	cmp	local05, #21 wz
0b3b8     35 00 00 FF 
0b3bc     0C E4 85 F1 | 	sub	objptr, ##27148
0b3c0     08 01 90 5D |  if_ne	jmp	#LR__0944
0b3c4     37 00 00 FF 
0b3c8     44 E4 05 F1 | 	add	objptr, ##28228
0b3cc     F2 2C 02 FB | 	rdlong	local08, objptr
0b3d0     01 2C 06 F1 | 	add	local08, #1
0b3d4     F2 2C 62 FC | 	wrlong	local08, objptr
0b3d8     37 00 00 FF 
0b3dc     44 E4 85 F1 | 	sub	objptr, ##28228
0b3e0                 | '   ct+=1 											' omit this lpar, this is for expr list
0b3e0                 | '   do
0b3e0                 | LR__0940
0b3e0     37 00 00 FF 
0b3e4     44 E4 05 F1 | 	add	objptr, ##28228
0b3e8     F2 26 02 FB | 	rdlong	local05, objptr
0b3ec     01 26 06 F1 | 	add	local05, #1
0b3f0     F2 26 62 FC | 	wrlong	local05, objptr
0b3f4                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0b3f4                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0b3f4     03 26 66 F0 | 	shl	local05, #3
0b3f8     02 00 00 FF 
0b3fc     38 E4 85 F1 | 	sub	objptr, ##1080
0b400     F2 26 02 F1 | 	add	local05, objptr
0b404     04 26 06 F1 | 	add	local05, #4
0b408     13 2D 02 FB | 	rdlong	local08, local05
0b40c     15 2C 0E F2 | 	cmp	local08, #21 wz
0b410     35 00 00 FF 
0b414     0C E4 85 F1 | 	sub	objptr, ##27148
0b418     40 00 90 5D |  if_ne	jmp	#LR__0941
0b41c     37 00 00 FF 
0b420     44 E4 05 F1 | 	add	objptr, ##28228
0b424     F2 2C 02 FB | 	rdlong	local08, objptr
0b428     01 2C 06 F1 | 	add	local08, #1
0b42c     F2 2C 62 FC | 	wrlong	local08, objptr
0b430     37 00 00 FF 
0b434     44 E4 85 F1 | 	sub	objptr, ##28228
0b438     10 F0 BF FD | 	call	#_expr
0b43c     37 00 00 FF 
0b440     44 E4 05 F1 | 	add	objptr, ##28228
0b444     F2 2C 02 FB | 	rdlong	local08, objptr
0b448     01 2C 06 F1 | 	add	local08, #1
0b44c     F2 2C 62 FC | 	wrlong	local08, objptr
0b450     37 00 00 FF 
0b454     44 E4 85 F1 | 	sub	objptr, ##28228
0b458     04 00 90 FD | 	jmp	#LR__0942
0b45c                 | LR__0941
0b45c     EC EF BF FD | 	call	#_expr
0b460                 | LR__0942
0b460     01 2A 06 F1 | 	add	local07, #1
0b464     37 00 00 FF 
0b468     44 E4 05 F1 | 	add	objptr, ##28228
0b46c     F2 26 02 FB | 	rdlong	local05, objptr
0b470     03 26 66 F0 | 	shl	local05, #3
0b474     02 00 00 FF 
0b478     38 E4 85 F1 | 	sub	objptr, ##1080
0b47c     F2 26 02 F1 | 	add	local05, objptr
0b480     04 26 06 F1 | 	add	local05, #4
0b484     13 2D 02 FB | 	rdlong	local08, local05
0b488     14 2C 0E F2 | 	cmp	local08, #20 wz
0b48c     35 00 00 FF 
0b490     0C E4 85 F1 | 	sub	objptr, ##27148
0b494     34 00 90 AD |  if_e	jmp	#LR__0943
0b498     37 00 00 FF 
0b49c     44 E4 05 F1 | 	add	objptr, ##28228
0b4a0     F2 2C 02 FB | 	rdlong	local08, objptr
0b4a4     03 2C 66 F0 | 	shl	local08, #3
0b4a8     02 00 00 FF 
0b4ac     38 E4 85 F1 | 	sub	objptr, ##1080
0b4b0     F2 2C 02 F1 | 	add	local08, objptr
0b4b4     04 2C 06 F1 | 	add	local08, #4
0b4b8     16 2D 02 FB | 	rdlong	local08, local08
0b4bc     FE 2D 0E F2 | 	cmp	local08, #510 wz
0b4c0     35 00 00 FF 
0b4c4     0C E4 85 F1 | 	sub	objptr, ##27148
0b4c8     14 FF 9F 5D |  if_ne	jmp	#LR__0940
0b4cc                 | LR__0943
0b4cc                 | LR__0944
0b4cc     15 1F 02 F6 | 	mov	local01, local07
0b4d0     03 28 66 F0 | 	shl	local06, #3
0b4d4     35 00 00 FF 
0b4d8     0C E4 05 F1 | 	add	objptr, ##27148
0b4dc     F2 28 02 F1 | 	add	local06, objptr
0b4e0     04 28 06 F1 | 	add	local06, #4
0b4e4     14 23 02 FB | 	rdlong	local03, local06
0b4e8     0F 2D 02 F6 | 	mov	local08, local01
0b4ec     10 2B 02 F6 | 	mov	local07, local02
0b4f0     11 29 02 F6 | 	mov	local06, local03
0b4f4     15 00 00 FF 
0b4f8     70 E4 05 F1 | 	add	objptr, ##10864
0b4fc     F2 26 02 FB | 	rdlong	local05, objptr
0b500     13 13 02 F6 | 	mov	arg01, local05
0b504     01 12 66 F0 | 	shl	arg01, #1
0b508     13 13 02 F1 | 	add	arg01, local05
0b50c     02 12 66 F0 | 	shl	arg01, #2
0b510     03 00 00 FF 
0b514     00 E4 85 F1 | 	sub	objptr, ##1536
0b518     F2 12 02 F1 | 	add	arg01, objptr
0b51c     09 2D 62 FC | 	wrlong	local08, arg01
0b520     03 00 00 FF 
0b524     00 E4 05 F1 | 	add	objptr, ##1536
0b528     F2 2C 02 FB | 	rdlong	local08, objptr
0b52c     16 2F 02 F6 | 	mov	local09, local08
0b530     01 2E 66 F0 | 	shl	local09, #1
0b534     16 2F 02 F1 | 	add	local09, local08
0b538     02 2E 66 F0 | 	shl	local09, #2
0b53c     03 00 00 FF 
0b540     00 E4 85 F1 | 	sub	objptr, ##1536
0b544     F2 2E 02 F1 | 	add	local09, objptr
0b548     04 2E 06 F1 | 	add	local09, #4
0b54c     17 2B 62 FC | 	wrlong	local07, local09
0b550     03 00 00 FF 
0b554     00 E4 05 F1 | 	add	objptr, ##1536
0b558     F2 2C 02 FB | 	rdlong	local08, objptr
0b55c     16 31 02 F6 | 	mov	local10, local08
0b560     01 30 66 F0 | 	shl	local10, #1
0b564     16 31 02 F1 | 	add	local10, local08
0b568     02 30 66 F0 | 	shl	local10, #2
0b56c     03 00 00 FF 
0b570     00 E4 85 F1 | 	sub	objptr, ##1536
0b574     F2 30 02 F1 | 	add	local10, objptr
0b578     08 30 06 F1 | 	add	local10, #8
0b57c     18 29 62 FC | 	wrlong	local06, local10
0b580     03 00 00 FF 
0b584     00 E4 05 F1 | 	add	objptr, ##1536
0b588     F2 2C 02 FB | 	rdlong	local08, objptr
0b58c     01 2C 06 F1 | 	add	local08, #1
0b590     F2 2C 62 FC | 	wrlong	local08, objptr
0b594     4A 00 00 FF 
0b598     7C E4 85 F1 | 	sub	objptr, ##38012
0b59c                 | ' 
0b59c                 | ' t2.result.uresult=numpar
0b59c                 | ' 
0b59c                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0b59c                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b59c                 | ' 
0b59c                 | '   
0b59c                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0b59c     FF FF 7F FF 
0b5a0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0b5a4     B8 00 90 5D |  if_ne	jmp	#LR__0945
0b5a8     15 22 06 F6 | 	mov	local03, #21
0b5ac     0F 2D 02 F6 | 	mov	local08, local01
0b5b0     10 2B 02 F6 | 	mov	local07, local02
0b5b4     11 29 02 F6 | 	mov	local06, local03
0b5b8     4A 00 00 FF 
0b5bc     7C E4 05 F1 | 	add	objptr, ##38012
0b5c0     F2 26 02 FB | 	rdlong	local05, objptr
0b5c4     13 13 02 F6 | 	mov	arg01, local05
0b5c8     01 12 66 F0 | 	shl	arg01, #1
0b5cc     13 13 02 F1 | 	add	arg01, local05
0b5d0     02 12 66 F0 | 	shl	arg01, #2
0b5d4     03 00 00 FF 
0b5d8     00 E4 85 F1 | 	sub	objptr, ##1536
0b5dc     F2 12 02 F1 | 	add	arg01, objptr
0b5e0     09 2D 62 FC | 	wrlong	local08, arg01
0b5e4     03 00 00 FF 
0b5e8     00 E4 05 F1 | 	add	objptr, ##1536
0b5ec     F2 30 02 FB | 	rdlong	local10, objptr
0b5f0     18 2F 02 F6 | 	mov	local09, local10
0b5f4     01 2E 66 F0 | 	shl	local09, #1
0b5f8     18 2F 02 F1 | 	add	local09, local10
0b5fc     02 2E 66 F0 | 	shl	local09, #2
0b600     03 00 00 FF 
0b604     00 E4 85 F1 | 	sub	objptr, ##1536
0b608     F2 2E 02 F1 | 	add	local09, objptr
0b60c     04 2E 06 F1 | 	add	local09, #4
0b610     17 2B 62 FC | 	wrlong	local07, local09
0b614     03 00 00 FF 
0b618     00 E4 05 F1 | 	add	objptr, ##1536
0b61c     F2 2E 02 FB | 	rdlong	local09, objptr
0b620     17 31 02 F6 | 	mov	local10, local09
0b624     01 30 66 F0 | 	shl	local10, #1
0b628     17 31 02 F1 | 	add	local10, local09
0b62c     02 30 66 F0 | 	shl	local10, #2
0b630     03 00 00 FF 
0b634     00 E4 85 F1 | 	sub	objptr, ##1536
0b638     F2 30 02 F1 | 	add	local10, objptr
0b63c     08 30 06 F1 | 	add	local10, #8
0b640     18 29 62 FC | 	wrlong	local06, local10
0b644     03 00 00 FF 
0b648     00 E4 05 F1 | 	add	objptr, ##1536
0b64c     F2 2C 02 FB | 	rdlong	local08, objptr
0b650     01 2C 06 F1 | 	add	local08, #1
0b654     F2 2C 62 FC | 	wrlong	local08, objptr
0b658     4A 00 00 FF 
0b65c     7C E4 85 F1 | 	sub	objptr, ##38012
0b660                 | LR__0945
0b660     A7 F0 03 F6 | 	mov	ptra, fp
0b664     B2 00 A0 FD | 	call	#popregs_
0b668                 | _getfun_ret
0b668     2D 00 64 FD | 	ret
0b66c                 | 
0b66c                 | '   
0b66c                 | '   
0b66c                 | ' sub getvar(m as integer) 
0b66c                 | _getvar
0b66c     0A 4A 05 F6 | 	mov	COUNT_, #10
0b670     A8 00 A0 FD | 	call	#pushregs_
0b674                 | _getvar_enter
0b674     09 25 02 F6 | 	mov	local04, arg01
0b678     37 00 00 FF 
0b67c     44 E4 05 F1 | 	add	objptr, ##28228
0b680     F2 14 02 FB | 	rdlong	arg02, objptr
0b684     03 14 66 F0 | 	shl	arg02, #3
0b688     02 00 00 FF 
0b68c     38 E4 85 F1 | 	sub	objptr, ##1080
0b690     F2 14 02 F1 | 	add	arg02, objptr
0b694     0A 27 02 FB | 	rdlong	local05, arg02
0b698     13 13 02 F6 | 	mov	arg01, local05
0b69c     01 14 06 F6 | 	mov	arg02, #1
0b6a0     35 00 00 FF 
0b6a4     0C E4 85 F1 | 	sub	objptr, ##27148
0b6a8     80 73 B1 FD | 	call	#__system__Right_S
0b6ac     FD 28 02 F6 | 	mov	local06, result1
0b6b0     01 2A 66 F6 | 	neg	local07, #1
0b6b4                 | ' 
0b6b4                 | ' varname$=lparts(ct).part$
0b6b4                 | ' suffix$=right$(varname$,1)
0b6b4                 | ' j=-1
0b6b4                 | ' 
0b6b4                 | ' for i=0 to varnum-1
0b6b4     00 2C 06 F6 | 	mov	local08, #0
0b6b8     35 00 00 FF 
0b6bc     08 E4 05 F1 | 	add	objptr, ##27144
0b6c0     F2 2E 02 FB | 	rdlong	local09, objptr
0b6c4     35 00 00 FF 
0b6c8     08 E4 85 F1 | 	sub	objptr, ##27144
0b6cc                 | LR__0950
0b6cc     17 2D 52 F2 | 	cmps	local08, local09 wc
0b6d0     38 00 90 3D |  if_ae	jmp	#LR__0951
0b6d4                 | '   if variables(i).name=varname$ then j=i : exit
0b6d4     16 15 02 F6 | 	mov	arg02, local08
0b6d8     04 14 66 F0 | 	shl	arg02, #4
0b6dc     14 00 00 FF 
0b6e0     F8 E5 05 F1 | 	add	objptr, ##10744
0b6e4     F2 14 02 F1 | 	add	arg02, objptr
0b6e8     0A 13 02 FB | 	rdlong	arg01, arg02
0b6ec     13 15 02 F6 | 	mov	arg02, local05
0b6f0     14 00 00 FF 
0b6f4     F8 E5 85 F1 | 	sub	objptr, ##10744
0b6f8     54 52 B1 FD | 	call	#__system___string_cmp
0b6fc     00 FA 0D F2 | 	cmp	result1, #0 wz
0b700     16 2B 02 A6 |  if_e	mov	local07, local08
0b704     01 2C 06 51 |  if_ne	add	local08, #1
0b708     C0 FF 9F 5D |  if_ne	jmp	#LR__0950
0b70c                 | LR__0951
0b70c                 | ' if  j=-1 andalso varnum<maxvars then   
0b70c     FF FF 7F FF 
0b710     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
0b714     A8 00 90 5D |  if_ne	jmp	#LR__0952
0b718     35 00 00 FF 
0b71c     08 E4 05 F1 | 	add	objptr, ##27144
0b720     F2 2E 02 FB | 	rdlong	local09, objptr
0b724     35 00 00 FF 
0b728     08 E4 85 F1 | 	sub	objptr, ##27144
0b72c     02 00 00 FF 
0b730     00 2E 56 F2 | 	cmps	local09, ##1024 wc
0b734     88 00 90 3D |  if_ae	jmp	#LR__0952
0b738     35 00 00 FF 
0b73c     08 E4 05 F1 | 	add	objptr, ##27144
0b740     F2 2E 02 FB | 	rdlong	local09, objptr
0b744     04 2E 66 F0 | 	shl	local09, #4
0b748     20 00 00 FF 
0b74c     10 E4 85 F1 | 	sub	objptr, ##16400
0b750     F2 2E 02 F1 | 	add	local09, objptr
0b754     17 27 62 FC | 	wrlong	local05, local09
0b758     20 00 00 FF 
0b75c     10 E4 05 F1 | 	add	objptr, ##16400
0b760     F2 2E 02 FB | 	rdlong	local09, objptr
0b764     04 2E 66 F0 | 	shl	local09, #4
0b768     20 00 00 FF 
0b76c     10 E4 85 F1 | 	sub	objptr, ##16400
0b770     F2 2E 02 F1 | 	add	local09, objptr
0b774     04 2E 06 F1 | 	add	local09, #4
0b778     17 01 68 FC | 	wrlong	#0, local09
0b77c     20 00 00 FF 
0b780     10 E4 05 F1 | 	add	objptr, ##16400
0b784     F2 2E 02 FB | 	rdlong	local09, objptr
0b788     04 2E 66 F0 | 	shl	local09, #4
0b78c     20 00 00 FF 
0b790     10 E4 85 F1 | 	sub	objptr, ##16400
0b794     F2 2E 02 F1 | 	add	local09, objptr
0b798     0C 2E 06 F1 | 	add	local09, #12
0b79c     17 39 68 FC | 	wrlong	#28, local09
0b7a0     20 00 00 FF 
0b7a4     10 E4 05 F1 | 	add	objptr, ##16400
0b7a8     F2 2E 02 FB | 	rdlong	local09, objptr
0b7ac     17 2B 02 F6 | 	mov	local07, local09
0b7b0     01 2E 06 F1 | 	add	local09, #1
0b7b4     F2 2E 62 FC | 	wrlong	local09, objptr
0b7b8     35 00 00 FF 
0b7bc     08 E4 85 F1 | 	sub	objptr, ##27144
0b7c0                 | LR__0952
0b7c0     00 2E 06 F6 | 	mov	local09, #0
0b7c4                 | ' numpar=0
0b7c4                 | ' ' check if it is an array
0b7c4                 | ' 
0b7c4                 | ' if lparts(ct+1).token=token_lpar then
0b7c4     37 00 00 FF 
0b7c8     44 E4 05 F1 | 	add	objptr, ##28228
0b7cc     F2 2C 02 FB | 	rdlong	local08, objptr
0b7d0     01 2C 06 F1 | 	add	local08, #1
0b7d4     03 2C 66 F0 | 	shl	local08, #3
0b7d8     02 00 00 FF 
0b7dc     38 E4 85 F1 | 	sub	objptr, ##1080
0b7e0     F2 2C 02 F1 | 	add	local08, objptr
0b7e4     04 2C 06 F1 | 	add	local08, #4
0b7e8     16 2D 02 FB | 	rdlong	local08, local08
0b7ec     15 2C 0E F2 | 	cmp	local08, #21 wz
0b7f0     35 00 00 FF 
0b7f4     0C E4 85 F1 | 	sub	objptr, ##27148
0b7f8     08 01 90 5D |  if_ne	jmp	#LR__0957
0b7fc     37 00 00 FF 
0b800     44 E4 05 F1 | 	add	objptr, ##28228
0b804     F2 30 02 FB | 	rdlong	local10, objptr
0b808     01 30 06 F1 | 	add	local10, #1
0b80c     F2 30 62 FC | 	wrlong	local10, objptr
0b810     37 00 00 FF 
0b814     44 E4 85 F1 | 	sub	objptr, ##28228
0b818                 | '   ct+=1 											' omit this lpar, this is for expr list
0b818                 | '   do
0b818                 | LR__0953
0b818     37 00 00 FF 
0b81c     44 E4 05 F1 | 	add	objptr, ##28228
0b820     F2 2C 02 FB | 	rdlong	local08, objptr
0b824     01 2C 06 F1 | 	add	local08, #1
0b828     F2 2C 62 FC | 	wrlong	local08, objptr
0b82c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0b82c                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0b82c     03 2C 66 F0 | 	shl	local08, #3
0b830     02 00 00 FF 
0b834     38 E4 85 F1 | 	sub	objptr, ##1080
0b838     F2 2C 02 F1 | 	add	local08, objptr
0b83c     04 2C 06 F1 | 	add	local08, #4
0b840     16 31 02 FB | 	rdlong	local10, local08
0b844     15 30 0E F2 | 	cmp	local10, #21 wz
0b848     35 00 00 FF 
0b84c     0C E4 85 F1 | 	sub	objptr, ##27148
0b850     40 00 90 5D |  if_ne	jmp	#LR__0954
0b854     37 00 00 FF 
0b858     44 E4 05 F1 | 	add	objptr, ##28228
0b85c     F2 30 02 FB | 	rdlong	local10, objptr
0b860     01 30 06 F1 | 	add	local10, #1
0b864     F2 30 62 FC | 	wrlong	local10, objptr
0b868     37 00 00 FF 
0b86c     44 E4 85 F1 | 	sub	objptr, ##28228
0b870     D8 EB BF FD | 	call	#_expr
0b874     37 00 00 FF 
0b878     44 E4 05 F1 | 	add	objptr, ##28228
0b87c     F2 30 02 FB | 	rdlong	local10, objptr
0b880     01 30 06 F1 | 	add	local10, #1
0b884     F2 30 62 FC | 	wrlong	local10, objptr
0b888     37 00 00 FF 
0b88c     44 E4 85 F1 | 	sub	objptr, ##28228
0b890     04 00 90 FD | 	jmp	#LR__0955
0b894                 | LR__0954
0b894     B4 EB BF FD | 	call	#_expr
0b898                 | LR__0955
0b898     01 2E 06 F1 | 	add	local09, #1
0b89c     37 00 00 FF 
0b8a0     44 E4 05 F1 | 	add	objptr, ##28228
0b8a4     F2 2C 02 FB | 	rdlong	local08, objptr
0b8a8     03 2C 66 F0 | 	shl	local08, #3
0b8ac     02 00 00 FF 
0b8b0     38 E4 85 F1 | 	sub	objptr, ##1080
0b8b4     F2 2C 02 F1 | 	add	local08, objptr
0b8b8     04 2C 06 F1 | 	add	local08, #4
0b8bc     16 31 02 FB | 	rdlong	local10, local08
0b8c0     14 30 0E F2 | 	cmp	local10, #20 wz
0b8c4     35 00 00 FF 
0b8c8     0C E4 85 F1 | 	sub	objptr, ##27148
0b8cc     34 00 90 AD |  if_e	jmp	#LR__0956
0b8d0     37 00 00 FF 
0b8d4     44 E4 05 F1 | 	add	objptr, ##28228
0b8d8     F2 30 02 FB | 	rdlong	local10, objptr
0b8dc     03 30 66 F0 | 	shl	local10, #3
0b8e0     02 00 00 FF 
0b8e4     38 E4 85 F1 | 	sub	objptr, ##1080
0b8e8     F2 30 02 F1 | 	add	local10, objptr
0b8ec     04 30 06 F1 | 	add	local10, #4
0b8f0     18 31 02 FB | 	rdlong	local10, local10
0b8f4     FE 31 0E F2 | 	cmp	local10, #510 wz
0b8f8     35 00 00 FF 
0b8fc     0C E4 85 F1 | 	sub	objptr, ##27148
0b900     14 FF 9F 5D |  if_ne	jmp	#LR__0953
0b904                 | LR__0956
0b904                 | LR__0957
0b904     17 21 02 F6 | 	mov	local02, local09
0b908     11 22 06 F6 | 	mov	local03, #17
0b90c     15 1F 02 F6 | 	mov	local01, local07
0b910     0F 31 02 F6 | 	mov	local10, local01
0b914     10 2F 02 F6 | 	mov	local09, local02
0b918     11 2D 02 F6 | 	mov	local08, local03
0b91c     4A 00 00 FF 
0b920     7C E4 05 F1 | 	add	objptr, ##38012
0b924     F2 2A 02 FB | 	rdlong	local07, objptr
0b928     15 29 02 F6 | 	mov	local06, local07
0b92c     01 28 66 F0 | 	shl	local06, #1
0b930     15 29 02 F1 | 	add	local06, local07
0b934     02 28 66 F0 | 	shl	local06, #2
0b938     03 00 00 FF 
0b93c     00 E4 85 F1 | 	sub	objptr, ##1536
0b940     F2 28 02 F1 | 	add	local06, objptr
0b944     14 31 62 FC | 	wrlong	local10, local06
0b948     03 00 00 FF 
0b94c     00 E4 05 F1 | 	add	objptr, ##1536
0b950     F2 30 02 FB | 	rdlong	local10, objptr
0b954     18 27 02 F6 | 	mov	local05, local10
0b958     01 26 66 F0 | 	shl	local05, #1
0b95c     18 27 02 F1 | 	add	local05, local10
0b960     02 26 66 F0 | 	shl	local05, #2
0b964     03 00 00 FF 
0b968     00 E4 85 F1 | 	sub	objptr, ##1536
0b96c     F2 26 02 F1 | 	add	local05, objptr
0b970     04 26 06 F1 | 	add	local05, #4
0b974     13 2F 62 FC | 	wrlong	local09, local05
0b978     03 00 00 FF 
0b97c     00 E4 05 F1 | 	add	objptr, ##1536
0b980     F2 30 02 FB | 	rdlong	local10, objptr
0b984     18 FB 01 F6 | 	mov	result1, local10
0b988     01 FA 65 F0 | 	shl	result1, #1
0b98c     18 FB 01 F1 | 	add	result1, local10
0b990     02 FA 65 F0 | 	shl	result1, #2
0b994     03 00 00 FF 
0b998     00 E4 85 F1 | 	sub	objptr, ##1536
0b99c     F2 FA 01 F1 | 	add	result1, objptr
0b9a0     08 FA 05 F1 | 	add	result1, #8
0b9a4     FD 2C 62 FC | 	wrlong	local08, result1
0b9a8     03 00 00 FF 
0b9ac     00 E4 05 F1 | 	add	objptr, ##1536
0b9b0     F2 30 02 FB | 	rdlong	local10, objptr
0b9b4     01 30 06 F1 | 	add	local10, #1
0b9b8     F2 30 62 FC | 	wrlong	local10, objptr
0b9bc     4A 00 00 FF 
0b9c0     7C E4 85 F1 | 	sub	objptr, ##38012
0b9c4                 | ' 
0b9c4                 | ' t2.result.twowords(1)=numpar
0b9c4                 | ' 
0b9c4                 | ' 
0b9c4                 | ' 
0b9c4                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0b9c4                 | ' 
0b9c4                 | ' 
0b9c4                 | '  
0b9c4                 | ' 
0b9c4                 | ' 701 
0b9c4                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b9c4                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0b9c4     FF FF 7F FF 
0b9c8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0b9cc     B8 00 90 5D |  if_ne	jmp	#LR__0958
0b9d0     15 22 06 F6 | 	mov	local03, #21
0b9d4     0F 31 02 F6 | 	mov	local10, local01
0b9d8     10 2F 02 F6 | 	mov	local09, local02
0b9dc     11 2D 02 F6 | 	mov	local08, local03
0b9e0     4A 00 00 FF 
0b9e4     7C E4 05 F1 | 	add	objptr, ##38012
0b9e8     F2 2A 02 FB | 	rdlong	local07, objptr
0b9ec     15 29 02 F6 | 	mov	local06, local07
0b9f0     01 28 66 F0 | 	shl	local06, #1
0b9f4     15 29 02 F1 | 	add	local06, local07
0b9f8     02 28 66 F0 | 	shl	local06, #2
0b9fc     03 00 00 FF 
0ba00     00 E4 85 F1 | 	sub	objptr, ##1536
0ba04     F2 28 02 F1 | 	add	local06, objptr
0ba08     14 31 62 FC | 	wrlong	local10, local06
0ba0c     03 00 00 FF 
0ba10     00 E4 05 F1 | 	add	objptr, ##1536
0ba14     F2 1E 02 FB | 	rdlong	local01, objptr
0ba18     0F 27 02 F6 | 	mov	local05, local01
0ba1c     01 26 66 F0 | 	shl	local05, #1
0ba20     0F 27 02 F1 | 	add	local05, local01
0ba24     02 26 66 F0 | 	shl	local05, #2
0ba28     03 00 00 FF 
0ba2c     00 E4 85 F1 | 	sub	objptr, ##1536
0ba30     F2 26 02 F1 | 	add	local05, objptr
0ba34     04 26 06 F1 | 	add	local05, #4
0ba38     13 2F 62 FC | 	wrlong	local09, local05
0ba3c     03 00 00 FF 
0ba40     00 E4 05 F1 | 	add	objptr, ##1536
0ba44     F2 1E 02 FB | 	rdlong	local01, objptr
0ba48     0F FB 01 F6 | 	mov	result1, local01
0ba4c     01 FA 65 F0 | 	shl	result1, #1
0ba50     0F FB 01 F1 | 	add	result1, local01
0ba54     02 FA 65 F0 | 	shl	result1, #2
0ba58     03 00 00 FF 
0ba5c     00 E4 85 F1 | 	sub	objptr, ##1536
0ba60     F2 FA 01 F1 | 	add	result1, objptr
0ba64     08 FA 05 F1 | 	add	result1, #8
0ba68     FD 2C 62 FC | 	wrlong	local08, result1
0ba6c     03 00 00 FF 
0ba70     00 E4 05 F1 | 	add	objptr, ##1536
0ba74     F2 30 02 FB | 	rdlong	local10, objptr
0ba78     01 30 06 F1 | 	add	local10, #1
0ba7c     F2 30 62 FC | 	wrlong	local10, objptr
0ba80     4A 00 00 FF 
0ba84     7C E4 85 F1 | 	sub	objptr, ##38012
0ba88                 | LR__0958
0ba88     A7 F0 03 F6 | 	mov	ptra, fp
0ba8c     B2 00 A0 FD | 	call	#popregs_
0ba90                 | _getvar_ret
0ba90     2D 00 64 FD | 	ret
0ba94                 | 
0ba94                 | ' 
0ba94                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0ba94                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0ba94                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0ba94                 | ' 
0ba94                 | ' 
0ba94                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0ba94                 | ' '                                                                                                                                       -
0ba94                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0ba94                 | ' '                                                                                                                                       -
0ba94                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0ba94                 | ' 
0ba94                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0ba94                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0ba94                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0ba94                 | ' 
0ba94                 | ' function execute_line (astart=0 as integer) as integer
0ba94                 | _execute_line
0ba94     04 4A 05 F6 | 	mov	COUNT_, #4
0ba98     A8 00 A0 FD | 	call	#pushregs_
0ba9c     58 00 00 FF 
0baa0     C0 E4 05 F1 | 	add	objptr, ##45248
0baa4     F2 00 68 FC | 	wrlong	#0, objptr
0baa8                 | ' 
0baa8                 | ' runptr2=0
0baa8                 | ' for lineptr_e=astart to lineptr-1
0baa8     0E 00 00 FF 
0baac     40 E4 85 F1 | 	sub	objptr, ##7232
0bab0     F2 12 62 FC | 	wrlong	arg01, objptr
0bab4     04 E4 85 F1 | 	sub	objptr, #4
0bab8     F2 1E 02 FB | 	rdlong	local01, objptr
0babc     4A 00 00 FF 
0bac0     7C E4 85 F1 | 	sub	objptr, ##38012
0bac4                 | LR__0960
0bac4     4A 00 00 FF 
0bac8     80 E4 05 F1 | 	add	objptr, ##38016
0bacc     F2 FA 01 FB | 	rdlong	result1, objptr
0bad0     4A 00 00 FF 
0bad4     80 E4 85 F1 | 	sub	objptr, ##38016
0bad8     0F FB 51 F2 | 	cmps	result1, local01 wc
0badc     98 00 90 3D |  if_ae	jmp	#LR__0961
0bae0     4A 00 00 FF 
0bae4     80 E4 05 F1 | 	add	objptr, ##38016
0bae8     F2 FA 01 FB | 	rdlong	result1, objptr
0baec     FD 20 02 F6 | 	mov	local02, result1
0baf0     01 20 66 F0 | 	shl	local02, #1
0baf4     FD 20 02 F1 | 	add	local02, result1
0baf8     02 20 66 F0 | 	shl	local02, #2
0bafc     03 00 00 FF 
0bb00     04 E4 85 F1 | 	sub	objptr, ##1540
0bb04     F2 20 02 F1 | 	add	local02, objptr
0bb08     08 20 06 F1 | 	add	local02, #8
0bb0c     10 21 02 FB | 	rdlong	local02, local02
0bb10     10 21 E2 F8 | 	getbyte	local02, local02, #0
0bb14     02 20 66 F0 | 	shl	local02, #2
0bb18     04 00 00 FF 
0bb1c     1C E4 85 F1 | 	sub	objptr, ##2076
0bb20     F2 20 02 F1 | 	add	local02, objptr
0bb24     10 21 02 FB | 	rdlong	local02, local02
0bb28     10 23 02 F6 | 	mov	local03, local02
0bb2c     13 20 46 F7 | 	zerox	local02, #19
0bb30     14 22 46 F0 | 	shr	local03, #20
0bb34     02 22 66 F0 | 	shl	local03, #2
0bb38     ED 22 02 F1 | 	add	local03, __methods__
0bb3c     11 23 02 FB | 	rdlong	local03, local03
0bb40     43 00 00 FF 
0bb44     60 E4 85 F1 | 	sub	objptr, ##34400
0bb48     F2 24 02 F6 | 	mov	local04, objptr
0bb4c     10 E5 01 F6 | 	mov	objptr, local02
0bb50     2D 22 62 FD | 	call	local03
0bb54     12 E5 01 F6 | 	mov	objptr, local04
0bb58     4A 00 00 FF 
0bb5c     80 E4 05 F1 | 	add	objptr, ##38016
0bb60     F2 24 02 FB | 	rdlong	local04, objptr
0bb64     01 24 06 F1 | 	add	local04, #1
0bb68     F2 24 62 FC | 	wrlong	local04, objptr
0bb6c     4A 00 00 FF 
0bb70     80 E4 85 F1 | 	sub	objptr, ##38016
0bb74     4C FF 9F FD | 	jmp	#LR__0960
0bb78                 | LR__0961
0bb78                 | ' return runptr2
0bb78     58 00 00 FF 
0bb7c     C0 E4 05 F1 | 	add	objptr, ##45248
0bb80     F2 FA 01 FB | 	rdlong	result1, objptr
0bb84     58 00 00 FF 
0bb88     C0 E4 85 F1 | 	sub	objptr, ##45248
0bb8c     A7 F0 03 F6 | 	mov	ptra, fp
0bb90     B2 00 A0 FD | 	call	#popregs_
0bb94                 | _execute_line_ret
0bb94     2D 00 64 FD | 	ret
0bb98                 | 
0bb98                 | ' 
0bb98                 | ' 
0bb98                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0bb98                 | ' 
0bb98                 | ' function pop() as expr_result
0bb98                 | _pop
0bb98                 | ' 
0bb98                 | ' if stackpointer=0 then
0bb98     43 00 00 FF 
0bb9c     58 E4 05 F1 | 	add	objptr, ##34392
0bba0     F2 FA 09 FB | 	rdlong	result1, objptr wz
0bba4     43 00 00 FF 
0bba8     58 E4 85 F1 | 	sub	objptr, ##34392
0bbac     FF 04 06 A6 |  if_e	mov	_var03, #255
0bbb0     18 00 06 A6 |  if_e	mov	_var01, #24
0bbb4     68 00 90 AD |  if_e	jmp	#LR__0970
0bbb8     43 00 00 FF 
0bbbc     58 E4 05 F1 | 	add	objptr, ##34392
0bbc0     F2 FA 01 FB | 	rdlong	result1, objptr
0bbc4     01 FA 85 F1 | 	sub	result1, #1
0bbc8     F2 FA 61 FC | 	wrlong	result1, objptr
0bbcc     FD FE 01 F6 | 	mov	result3, result1
0bbd0     01 FE 65 F0 | 	shl	result3, #1
0bbd4     FD FE 01 F1 | 	add	result3, result1
0bbd8     02 FE 65 F0 | 	shl	result3, #2
0bbdc     0C 00 00 FF 
0bbe0     0C E4 85 F1 | 	sub	objptr, ##6156
0bbe4     F2 FE 01 F1 | 	add	result3, objptr
0bbe8     FF 00 02 FB | 	rdlong	_var01, result3
0bbec     04 FE 05 F1 | 	add	result3, #4
0bbf0     FF FE 01 FB | 	rdlong	result3, result3
0bbf4     FD FC 01 F6 | 	mov	result2, result1
0bbf8     01 FC 65 F0 | 	shl	result2, #1
0bbfc     FD FC 01 F1 | 	add	result2, result1
0bc00     02 FC 65 F0 | 	shl	result2, #2
0bc04     F2 FC 01 F1 | 	add	result2, objptr
0bc08     08 FC 05 F1 | 	add	result2, #8
0bc0c     FE FA 01 FB | 	rdlong	result1, result2
0bc10     FF 02 02 F6 | 	mov	_var02, result3
0bc14     FD 04 02 F6 | 	mov	_var03, result1
0bc18     37 00 00 FF 
0bc1c     4C E4 85 F1 | 	sub	objptr, ##28236
0bc20                 | LR__0970
0bc20                 | ' return t1
0bc20     01 FD 01 F6 | 	mov	result2, _var02
0bc24     02 FF 01 F6 | 	mov	result3, _var03
0bc28     00 FB 01 F6 | 	mov	result1, _var01
0bc2c                 | _pop_ret
0bc2c     2D 00 64 FD | 	ret
0bc30                 | 
0bc30                 | ' 
0bc30                 | ' sub push(t1 as expr_result )
0bc30                 | _push
0bc30                 | ' 
0bc30                 | ' 'print "In push: "; t1.result_type
0bc30                 | ' 'print "In push: "; t1.result.uresult
0bc30                 | ' 
0bc30                 | ' if stackpointer<maxstack then 
0bc30     43 00 00 FF 
0bc34     58 E4 05 F1 | 	add	objptr, ##34392
0bc38     F2 00 02 FB | 	rdlong	_var01, objptr
0bc3c     43 00 00 FF 
0bc40     58 E4 85 F1 | 	sub	objptr, ##34392
0bc44     01 00 00 FF 
0bc48     00 00 56 F2 | 	cmps	_var01, ##512 wc
0bc4c     BC 00 90 3D |  if_ae	jmp	#LR__0980
0bc50     09 01 02 FB | 	rdlong	_var01, arg01
0bc54     04 12 06 F1 | 	add	arg01, #4
0bc58     09 03 02 FB | 	rdlong	_var02, arg01
0bc5c     04 12 06 F1 | 	add	arg01, #4
0bc60     09 13 02 FB | 	rdlong	arg01, arg01
0bc64     43 00 00 FF 
0bc68     58 E4 05 F1 | 	add	objptr, ##34392
0bc6c     F2 04 02 FB | 	rdlong	_var03, objptr
0bc70     02 07 02 F6 | 	mov	_var04, _var03
0bc74     01 06 66 F0 | 	shl	_var04, #1
0bc78     02 07 02 F1 | 	add	_var04, _var03
0bc7c     02 06 66 F0 | 	shl	_var04, #2
0bc80     0C 00 00 FF 
0bc84     0C E4 85 F1 | 	sub	objptr, ##6156
0bc88     F2 06 02 F1 | 	add	_var04, objptr
0bc8c     03 01 62 FC | 	wrlong	_var01, _var04
0bc90     0C 00 00 FF 
0bc94     0C E4 05 F1 | 	add	objptr, ##6156
0bc98     F2 06 02 FB | 	rdlong	_var04, objptr
0bc9c     03 05 02 F6 | 	mov	_var03, _var04
0bca0     01 04 66 F0 | 	shl	_var03, #1
0bca4     03 05 02 F1 | 	add	_var03, _var04
0bca8     02 04 66 F0 | 	shl	_var03, #2
0bcac     0C 00 00 FF 
0bcb0     0C E4 85 F1 | 	sub	objptr, ##6156
0bcb4     F2 04 02 F1 | 	add	_var03, objptr
0bcb8     04 04 06 F1 | 	add	_var03, #4
0bcbc     02 03 62 FC | 	wrlong	_var02, _var03
0bcc0     0C 00 00 FF 
0bcc4     0C E4 05 F1 | 	add	objptr, ##6156
0bcc8     F2 06 02 FB | 	rdlong	_var04, objptr
0bccc     03 05 02 F6 | 	mov	_var03, _var04
0bcd0     01 04 66 F0 | 	shl	_var03, #1
0bcd4     03 05 02 F1 | 	add	_var03, _var04
0bcd8     02 04 66 F0 | 	shl	_var03, #2
0bcdc     0C 00 00 FF 
0bce0     0C E4 85 F1 | 	sub	objptr, ##6156
0bce4     F2 04 02 F1 | 	add	_var03, objptr
0bce8     08 04 06 F1 | 	add	_var03, #8
0bcec     02 13 62 FC | 	wrlong	arg01, _var03
0bcf0     0C 00 00 FF 
0bcf4     0C E4 05 F1 | 	add	objptr, ##6156
0bcf8     F2 00 02 FB | 	rdlong	_var01, objptr
0bcfc     01 00 06 F1 | 	add	_var01, #1
0bd00     F2 00 62 FC | 	wrlong	_var01, objptr
0bd04     43 00 00 FF 
0bd08     58 E4 85 F1 | 	sub	objptr, ##34392
0bd0c                 | LR__0980
0bd0c                 | _push_ret
0bd0c     2D 00 64 FD | 	ret
0bd10                 | 
0bd10                 | ' 
0bd10                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
0bd10                 | ' 
0bd10                 | ' sub do_push
0bd10                 | _do_push
0bd10                 | ' if stackpointer<maxstack then 
0bd10     43 00 00 FF 
0bd14     58 E4 05 F1 | 	add	objptr, ##34392
0bd18     F2 00 02 FB | 	rdlong	_var01, objptr
0bd1c     43 00 00 FF 
0bd20     58 E4 85 F1 | 	sub	objptr, ##34392
0bd24     01 00 00 FF 
0bd28     00 00 56 F2 | 	cmps	_var01, ##512 wc
0bd2c     F8 00 90 3D |  if_ae	jmp	#LR__0990
0bd30     4A 00 00 FF 
0bd34     80 E4 05 F1 | 	add	objptr, ##38016
0bd38     F2 02 02 FB | 	rdlong	_var02, objptr
0bd3c     01 05 02 F6 | 	mov	_var03, _var02
0bd40     01 04 66 F0 | 	shl	_var03, #1
0bd44     01 05 02 F1 | 	add	_var03, _var02
0bd48     02 04 66 F0 | 	shl	_var03, #2
0bd4c     03 00 00 FF 
0bd50     04 E4 85 F1 | 	sub	objptr, ##1540
0bd54     F2 04 02 F1 | 	add	_var03, objptr
0bd58     02 01 02 FB | 	rdlong	_var01, _var03
0bd5c     04 04 06 F1 | 	add	_var03, #4
0bd60     02 07 02 FB | 	rdlong	_var04, _var03
0bd64     01 05 02 F6 | 	mov	_var03, _var02
0bd68     01 04 66 F0 | 	shl	_var03, #1
0bd6c     01 05 02 F1 | 	add	_var03, _var02
0bd70     02 04 66 F0 | 	shl	_var03, #2
0bd74     F2 04 02 F1 | 	add	_var03, objptr
0bd78     08 04 06 F1 | 	add	_var03, #8
0bd7c     02 03 02 FB | 	rdlong	_var02, _var03
0bd80     04 00 00 FF 
0bd84     24 E4 85 F1 | 	sub	objptr, ##2084
0bd88     F2 04 02 FB | 	rdlong	_var03, objptr
0bd8c     02 09 02 F6 | 	mov	_var05, _var03
0bd90     01 08 66 F0 | 	shl	_var05, #1
0bd94     02 09 02 F1 | 	add	_var05, _var03
0bd98     02 08 66 F0 | 	shl	_var05, #2
0bd9c     0C 00 00 FF 
0bda0     0C E4 85 F1 | 	sub	objptr, ##6156
0bda4     F2 08 02 F1 | 	add	_var05, objptr
0bda8     04 01 62 FC | 	wrlong	_var01, _var05
0bdac     0C 00 00 FF 
0bdb0     0C E4 05 F1 | 	add	objptr, ##6156
0bdb4     F2 08 02 FB | 	rdlong	_var05, objptr
0bdb8     04 05 02 F6 | 	mov	_var03, _var05
0bdbc     01 04 66 F0 | 	shl	_var03, #1
0bdc0     04 05 02 F1 | 	add	_var03, _var05
0bdc4     02 04 66 F0 | 	shl	_var03, #2
0bdc8     0C 00 00 FF 
0bdcc     0C E4 85 F1 | 	sub	objptr, ##6156
0bdd0     F2 04 02 F1 | 	add	_var03, objptr
0bdd4     04 04 06 F1 | 	add	_var03, #4
0bdd8     02 07 62 FC | 	wrlong	_var04, _var03
0bddc     0C 00 00 FF 
0bde0     0C E4 05 F1 | 	add	objptr, ##6156
0bde4     F2 08 02 FB | 	rdlong	_var05, objptr
0bde8     04 07 02 F6 | 	mov	_var04, _var05
0bdec     01 06 66 F0 | 	shl	_var04, #1
0bdf0     04 07 02 F1 | 	add	_var04, _var05
0bdf4     02 06 66 F0 | 	shl	_var04, #2
0bdf8     0C 00 00 FF 
0bdfc     0C E4 85 F1 | 	sub	objptr, ##6156
0be00     F2 06 02 F1 | 	add	_var04, objptr
0be04     08 06 06 F1 | 	add	_var04, #8
0be08     03 03 62 FC | 	wrlong	_var02, _var04
0be0c     0C 00 00 FF 
0be10     0C E4 05 F1 | 	add	objptr, ##6156
0be14     F2 00 02 FB | 	rdlong	_var01, objptr
0be18     01 00 06 F1 | 	add	_var01, #1
0be1c     F2 00 62 FC | 	wrlong	_var01, objptr
0be20     43 00 00 FF 
0be24     58 E4 85 F1 | 	sub	objptr, ##34392
0be28                 | LR__0990
0be28                 | _do_push_ret
0be28     2D 00 64 FD | 	ret
0be2c                 | 
0be2c                 | ' 
0be2c                 | '   
0be2c                 | ' sub csave_block(address as ulong)
0be2c                 | _csave_block
0be2c     09 01 02 F6 | 	mov	_var01, arg01
0be30                 | ' 
0be30                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
0be30                 | ' ' we enter it at the state of playing 1 kHz header tone
0be30                 | ' 
0be30                 | ' for i=0 to 63 step 2
0be30     00 02 06 F6 | 	mov	_var02, #0
0be34                 | LR__1000
0be34                 | '   do: loop until lpeek(base+64*7)>32768
0be34     37 00 00 FF 
0be38     10 E4 05 F1 | 	add	objptr, ##28176
0be3c     97 0C 48 FB | 	callpa	#(@LR__1002-@LR__1001)>>2,fcache_load_ptr_
0be40                 | LR__1001
0be40     F2 12 02 FB | 	rdlong	arg01, objptr
0be44     C0 13 06 F1 | 	add	arg01, #448
0be48     09 FB 01 FB | 	rdlong	result1, arg01
0be4c     40 00 00 FF 
0be50     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0be54     E8 FF 9F CD |  if_b	jmp	#LR__1001
0be58                 | LR__1002
0be58     00 13 02 F6 | 	mov	arg01, _var01
0be5c     01 05 02 F6 | 	mov	_var03, _var02
0be60     02 04 66 F0 | 	shl	_var03, #2
0be64     02 13 02 F1 | 	add	arg01, _var03
0be68     09 07 02 FB | 	rdlong	_var04, arg01
0be6c     23 00 00 FF 
0be70     08 E4 05 F1 | 	add	objptr, ##17928
0be74     F2 06 62 FC | 	wrlong	_var04, objptr
0be78     5A 00 00 FF 
0be7c     18 E4 85 F1 | 	sub	objptr, ##46104
0be80                 | '   q=lpeek(address+4*i)
0be80                 | '      for bit=0 to 31
0be80     00 08 06 F6 | 	mov	_var05, #0
0be84     97 84 48 FB | 	callpa	#(@LR__1007-@LR__1003)>>2,fcache_load_ptr_
0be88                 | LR__1003
0be88                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0be88     5A 00 00 FF 
0be8c     18 E4 05 F1 | 	add	objptr, ##46104
0be90     F2 06 02 FB | 	rdlong	_var04, objptr
0be94     5A 00 00 FF 
0be98     18 E4 85 F1 | 	sub	objptr, ##46104
0be9c     04 05 C2 F9 | 	decod	_var03, _var05
0bea0     02 07 CA F7 | 	test	_var04, _var03 wz
0bea4     60 00 90 AD |  if_e	jmp	#LR__1004
0bea8     04 05 02 F6 | 	mov	_var03, _var05
0beac     02 04 66 F0 | 	shl	_var03, #2
0beb0     55 00 00 FF 
0beb4     B8 E5 05 F1 | 	add	objptr, ##43960
0beb8     F2 04 02 F1 | 	add	_var03, objptr
0bebc     02 FF 48 FC | 	wrbyte	#127, _var03
0bec0     04 05 02 F6 | 	mov	_var03, _var05
0bec4     02 04 66 F0 | 	shl	_var03, #2
0bec8     01 04 06 F1 | 	add	_var03, #1
0becc     F2 04 02 F1 | 	add	_var03, objptr
0bed0     02 01 49 FC | 	wrbyte	#128, _var03
0bed4     04 05 02 F6 | 	mov	_var03, _var05
0bed8     02 04 66 F0 | 	shl	_var03, #2
0bedc     02 04 06 F1 | 	add	_var03, #2
0bee0     F2 04 02 F1 | 	add	_var03, objptr
0bee4     02 FF 48 FC | 	wrbyte	#127, _var03
0bee8     04 05 02 F6 | 	mov	_var03, _var05
0beec     02 04 66 F0 | 	shl	_var03, #2
0bef0     03 04 06 F1 | 	add	_var03, #3
0bef4     F2 04 02 F1 | 	add	_var03, objptr
0bef8     02 01 49 FC | 	wrbyte	#128, _var03
0befc     55 00 00 FF 
0bf00     B8 E5 85 F1 | 	sub	objptr, ##43960
0bf04     5C 00 90 FD | 	jmp	#LR__1005
0bf08                 | LR__1004
0bf08     04 05 02 F6 | 	mov	_var03, _var05
0bf0c     02 04 66 F0 | 	shl	_var03, #2
0bf10     55 00 00 FF 
0bf14     B8 E5 05 F1 | 	add	objptr, ##43960
0bf18     F2 04 02 F1 | 	add	_var03, objptr
0bf1c     02 01 49 FC | 	wrbyte	#128, _var03
0bf20     04 05 02 F6 | 	mov	_var03, _var05
0bf24     02 04 66 F0 | 	shl	_var03, #2
0bf28     01 04 06 F1 | 	add	_var03, #1
0bf2c     F2 04 02 F1 | 	add	_var03, objptr
0bf30     02 01 49 FC | 	wrbyte	#128, _var03
0bf34     04 05 02 F6 | 	mov	_var03, _var05
0bf38     02 04 66 F0 | 	shl	_var03, #2
0bf3c     02 04 06 F1 | 	add	_var03, #2
0bf40     F2 04 02 F1 | 	add	_var03, objptr
0bf44     02 FF 48 FC | 	wrbyte	#127, _var03
0bf48     04 05 02 F6 | 	mov	_var03, _var05
0bf4c     02 04 66 F0 | 	shl	_var03, #2
0bf50     03 04 06 F1 | 	add	_var03, #3
0bf54     F2 04 02 F1 | 	add	_var03, objptr
0bf58     02 FF 48 FC | 	wrbyte	#127, _var03
0bf5c     55 00 00 FF 
0bf60     B8 E5 85 F1 | 	sub	objptr, ##43960
0bf64                 | LR__1005
0bf64     01 08 06 F1 | 	add	_var05, #1
0bf68     20 08 56 F2 | 	cmps	_var05, #32 wc
0bf6c     18 FF 9F CD |  if_b	jmp	#LR__1003
0bf70                 | '   do: loop until lpeek(base+64*7)<32768
0bf70     37 00 00 FF 
0bf74     10 E4 05 F1 | 	add	objptr, ##28176
0bf78                 | LR__1006
0bf78     F2 12 02 FB | 	rdlong	arg01, objptr
0bf7c     C0 13 06 F1 | 	add	arg01, #448
0bf80     09 FB 01 FB | 	rdlong	result1, arg01
0bf84     40 00 00 FF 
0bf88     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0bf8c     E8 FF 9F 3D |  if_ae	jmp	#LR__1006
0bf90                 | LR__1007
0bf90     00 13 02 F6 | 	mov	arg01, _var01
0bf94     04 12 06 F1 | 	add	arg01, #4
0bf98     01 05 02 F6 | 	mov	_var03, _var02
0bf9c     02 04 66 F0 | 	shl	_var03, #2
0bfa0     02 13 02 F1 | 	add	arg01, _var03
0bfa4     09 07 02 FB | 	rdlong	_var04, arg01
0bfa8     23 00 00 FF 
0bfac     08 E4 05 F1 | 	add	objptr, ##17928
0bfb0     F2 06 62 FC | 	wrlong	_var04, objptr
0bfb4     5A 00 00 FF 
0bfb8     18 E4 85 F1 | 	sub	objptr, ##46104
0bfbc                 | '   q=lpeek(address+4+4*i)
0bfbc                 | '      for bit=0 to 31
0bfbc     00 08 06 F6 | 	mov	_var05, #0
0bfc0     97 94 48 FB | 	callpa	#(@LR__1011-@LR__1008)>>2,fcache_load_ptr_
0bfc4                 | LR__1008
0bfc4                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0bfc4     5A 00 00 FF 
0bfc8     18 E4 05 F1 | 	add	objptr, ##46104
0bfcc     F2 06 02 FB | 	rdlong	_var04, objptr
0bfd0     5A 00 00 FF 
0bfd4     18 E4 85 F1 | 	sub	objptr, ##46104
0bfd8     04 05 C2 F9 | 	decod	_var03, _var05
0bfdc     02 07 CA F7 | 	test	_var04, _var03 wz
0bfe0     80 00 90 AD |  if_e	jmp	#LR__1009
0bfe4     04 0B 02 F6 | 	mov	_var06, _var05
0bfe8     02 0A 66 F0 | 	shl	_var06, #2
0bfec     80 04 06 F6 | 	mov	_var03, #128
0bff0     05 05 02 F1 | 	add	_var03, _var06
0bff4     55 00 00 FF 
0bff8     B8 E5 05 F1 | 	add	objptr, ##43960
0bffc     F2 04 02 F1 | 	add	_var03, objptr
0c000     02 FF 48 FC | 	wrbyte	#127, _var03
0c004     04 0B 02 F6 | 	mov	_var06, _var05
0c008     02 0A 66 F0 | 	shl	_var06, #2
0c00c     80 04 06 F6 | 	mov	_var03, #128
0c010     05 05 02 F1 | 	add	_var03, _var06
0c014     01 04 06 F1 | 	add	_var03, #1
0c018     F2 04 02 F1 | 	add	_var03, objptr
0c01c     02 01 49 FC | 	wrbyte	#128, _var03
0c020     04 0B 02 F6 | 	mov	_var06, _var05
0c024     02 0A 66 F0 | 	shl	_var06, #2
0c028     80 04 06 F6 | 	mov	_var03, #128
0c02c     05 05 02 F1 | 	add	_var03, _var06
0c030     02 04 06 F1 | 	add	_var03, #2
0c034     F2 04 02 F1 | 	add	_var03, objptr
0c038     02 FF 48 FC | 	wrbyte	#127, _var03
0c03c     04 0B 02 F6 | 	mov	_var06, _var05
0c040     02 0A 66 F0 | 	shl	_var06, #2
0c044     80 04 06 F6 | 	mov	_var03, #128
0c048     05 05 02 F1 | 	add	_var03, _var06
0c04c     03 04 06 F1 | 	add	_var03, #3
0c050     F2 04 02 F1 | 	add	_var03, objptr
0c054     02 01 49 FC | 	wrbyte	#128, _var03
0c058     55 00 00 FF 
0c05c     B8 E5 85 F1 | 	sub	objptr, ##43960
0c060     7C 00 90 FD | 	jmp	#LR__1010
0c064                 | LR__1009
0c064     04 0B 02 F6 | 	mov	_var06, _var05
0c068     02 0A 66 F0 | 	shl	_var06, #2
0c06c     80 04 06 F6 | 	mov	_var03, #128
0c070     05 05 02 F1 | 	add	_var03, _var06
0c074     55 00 00 FF 
0c078     B8 E5 05 F1 | 	add	objptr, ##43960
0c07c     F2 04 02 F1 | 	add	_var03, objptr
0c080     02 01 49 FC | 	wrbyte	#128, _var03
0c084     04 0B 02 F6 | 	mov	_var06, _var05
0c088     02 0A 66 F0 | 	shl	_var06, #2
0c08c     80 04 06 F6 | 	mov	_var03, #128
0c090     05 05 02 F1 | 	add	_var03, _var06
0c094     01 04 06 F1 | 	add	_var03, #1
0c098     F2 04 02 F1 | 	add	_var03, objptr
0c09c     02 01 49 FC | 	wrbyte	#128, _var03
0c0a0     04 0B 02 F6 | 	mov	_var06, _var05
0c0a4     02 0A 66 F0 | 	shl	_var06, #2
0c0a8     80 04 06 F6 | 	mov	_var03, #128
0c0ac     05 05 02 F1 | 	add	_var03, _var06
0c0b0     02 04 06 F1 | 	add	_var03, #2
0c0b4     F2 04 02 F1 | 	add	_var03, objptr
0c0b8     02 FF 48 FC | 	wrbyte	#127, _var03
0c0bc     04 0B 02 F6 | 	mov	_var06, _var05
0c0c0     02 0A 66 F0 | 	shl	_var06, #2
0c0c4     80 04 06 F6 | 	mov	_var03, #128
0c0c8     05 05 02 F1 | 	add	_var03, _var06
0c0cc     03 04 06 F1 | 	add	_var03, #3
0c0d0     F2 04 02 F1 | 	add	_var03, objptr
0c0d4     02 FF 48 FC | 	wrbyte	#127, _var03
0c0d8     55 00 00 FF 
0c0dc     B8 E5 85 F1 | 	sub	objptr, ##43960
0c0e0                 | LR__1010
0c0e0     01 08 06 F1 | 	add	_var05, #1
0c0e4     20 08 56 F2 | 	cmps	_var05, #32 wc
0c0e8     D8 FE 9F CD |  if_b	jmp	#LR__1008
0c0ec                 | LR__1011
0c0ec     02 02 06 F1 | 	add	_var02, #2
0c0f0     40 02 56 F2 | 	cmps	_var02, #64 wc
0c0f4     3C FD 9F CD |  if_b	jmp	#LR__1000
0c0f8                 | ' do: loop until lpeek(base+64*7)>32768
0c0f8     37 00 00 FF 
0c0fc     10 E4 05 F1 | 	add	objptr, ##28176
0c100     97 84 48 FB | 	callpa	#(@LR__1020-@LR__1012)>>2,fcache_load_ptr_
0c104                 | LR__1012
0c104     F2 12 02 FB | 	rdlong	arg01, objptr
0c108     C0 13 06 F1 | 	add	arg01, #448
0c10c     09 FB 01 FB | 	rdlong	result1, arg01
0c110     40 00 00 FF 
0c114     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0c118     E8 FF 9F CD |  if_b	jmp	#LR__1012
0c11c     37 00 00 FF 
0c120     10 E4 85 F1 | 	sub	objptr, ##28176
0c124                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0c124     00 02 06 F6 | 	mov	_var02, #0
0c128                 | LR__1013
0c128     01 07 52 F6 | 	abs	_var04, _var02 wc
0c12c     07 06 06 F5 | 	and	_var04, #7
0c130     03 07 82 F6 | 	negc	_var04, _var04
0c134     04 06 56 F2 | 	cmps	_var04, #4 wc
0c138     20 00 90 3D |  if_ae	jmp	#LR__1014
0c13c     01 0B 02 F6 | 	mov	_var06, _var02
0c140     55 00 00 FF 
0c144     B8 E5 05 F1 | 	add	objptr, ##43960
0c148     F2 0A 02 F1 | 	add	_var06, objptr
0c14c     05 FF 48 FC | 	wrbyte	#127, _var06
0c150     55 00 00 FF 
0c154     B8 E5 85 F1 | 	sub	objptr, ##43960
0c158     1C 00 90 FD | 	jmp	#LR__1015
0c15c                 | LR__1014
0c15c     01 0B 02 F6 | 	mov	_var06, _var02
0c160     55 00 00 FF 
0c164     B8 E5 05 F1 | 	add	objptr, ##43960
0c168     F2 0A 02 F1 | 	add	_var06, objptr
0c16c     05 01 49 FC | 	wrbyte	#128, _var06
0c170     55 00 00 FF 
0c174     B8 E5 85 F1 | 	sub	objptr, ##43960
0c178                 | LR__1015
0c178     01 02 06 F1 | 	add	_var02, #1
0c17c     80 02 56 F2 | 	cmps	_var02, #128 wc
0c180     A4 FF 9F CD |  if_b	jmp	#LR__1013
0c184                 | ' 
0c184                 | ' do: loop until lpeek(base+64*7)<32768
0c184     37 00 00 FF 
0c188     10 E4 05 F1 | 	add	objptr, ##28176
0c18c                 | LR__1016
0c18c     F2 12 02 FB | 	rdlong	arg01, objptr
0c190     C0 13 06 F1 | 	add	arg01, #448
0c194     09 FB 01 FB | 	rdlong	result1, arg01
0c198     40 00 00 FF 
0c19c     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0c1a0     E8 FF 9F 3D |  if_ae	jmp	#LR__1016
0c1a4     37 00 00 FF 
0c1a8     10 E4 85 F1 | 	sub	objptr, ##28176
0c1ac                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0c1ac     80 02 06 F6 | 	mov	_var02, #128
0c1b0                 | LR__1017
0c1b0     01 07 52 F6 | 	abs	_var04, _var02 wc
0c1b4     07 06 06 F5 | 	and	_var04, #7
0c1b8     03 07 82 F6 | 	negc	_var04, _var04
0c1bc     04 06 56 F2 | 	cmps	_var04, #4 wc
0c1c0     20 00 90 3D |  if_ae	jmp	#LR__1018
0c1c4     01 0B 02 F6 | 	mov	_var06, _var02
0c1c8     55 00 00 FF 
0c1cc     B8 E5 05 F1 | 	add	objptr, ##43960
0c1d0     F2 0A 02 F1 | 	add	_var06, objptr
0c1d4     05 FF 48 FC | 	wrbyte	#127, _var06
0c1d8     55 00 00 FF 
0c1dc     B8 E5 85 F1 | 	sub	objptr, ##43960
0c1e0     1C 00 90 FD | 	jmp	#LR__1019
0c1e4                 | LR__1018
0c1e4     01 0B 02 F6 | 	mov	_var06, _var02
0c1e8     55 00 00 FF 
0c1ec     B8 E5 05 F1 | 	add	objptr, ##43960
0c1f0     F2 0A 02 F1 | 	add	_var06, objptr
0c1f4     05 01 49 FC | 	wrbyte	#128, _var06
0c1f8     55 00 00 FF 
0c1fc     B8 E5 85 F1 | 	sub	objptr, ##43960
0c200                 | LR__1019
0c200     01 02 06 F1 | 	add	_var02, #1
0c204     00 03 16 F2 | 	cmp	_var02, #256 wc
0c208     A4 FF 9F CD |  if_b	jmp	#LR__1017
0c20c                 | LR__1020
0c20c                 | _csave_block_ret
0c20c     2D 00 64 FD | 	ret
0c210                 | 
0c210                 | ' 
0c210                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0c210                 | _csave_addtoblock
0c210     04 4A 05 F6 | 	mov	COUNT_, #4
0c214     A8 00 A0 FD | 	call	#pushregs_
0c218     09 1F 02 F6 | 	mov	local01, arg01
0c21c                 | ' 
0c21c                 | ' 
0c21c                 | ' if force=0 then
0c21c     07 14 4E F7 | 	zerox	arg02, #7 wz
0c220     78 00 90 5D |  if_ne	jmp	#LR__1030
0c224     58 00 00 FF 
0c228     B8 E4 05 F1 | 	add	objptr, ##45240
0c22c     F2 14 02 FB | 	rdlong	arg02, objptr
0c230     02 00 00 FF 
0c234     00 E4 85 F1 | 	sub	objptr, ##1024
0c238     F2 14 02 F1 | 	add	arg02, objptr
0c23c     0A 1F 42 FC | 	wrbyte	local01, arg02
0c240     02 00 00 FF 
0c244     00 E4 05 F1 | 	add	objptr, ##1024
0c248     F2 1E 02 FB | 	rdlong	local01, objptr
0c24c     01 1E 06 F1 | 	add	local01, #1
0c250     F2 1E 62 FC | 	wrlong	local01, objptr
0c254                 | '   block(blockptr)=d
0c254                 | '   blockptr+=1
0c254                 | '   if blockptr>=255 then
0c254     58 00 00 FF 
0c258     B8 E4 85 F1 | 	sub	objptr, ##45240
0c25c     FF 1E 16 F2 | 	cmp	local01, #255 wc
0c260     E4 00 90 CD |  if_b	jmp	#LR__1034
0c264     56 00 00 FF 
0c268     B8 E4 05 F1 | 	add	objptr, ##44216
0c26c     F2 12 02 F6 | 	mov	arg01, objptr
0c270     56 00 00 FF 
0c274     B8 E4 85 F1 | 	sub	objptr, ##44216
0c278     B0 FB BF FD | 	call	#_csave_block
0c27c     58 00 00 FF 
0c280     B8 E4 05 F1 | 	add	objptr, ##45240
0c284     F2 00 68 FC | 	wrlong	#0, objptr
0c288     58 00 00 FF 
0c28c     B8 E4 85 F1 | 	sub	objptr, ##45240
0c290     2C 13 06 F6 | 	mov	arg01, #300
0c294     84 49 B1 FD | 	call	#__system___waitms
0c298     AC 00 90 FD | 	jmp	#LR__1034
0c29c                 | LR__1030
0c29c     58 00 00 FF 
0c2a0     B8 E4 05 F1 | 	add	objptr, ##45240
0c2a4     F2 20 02 FB | 	rdlong	local02, objptr
0c2a8     02 00 00 FF 
0c2ac     00 E4 85 F1 | 	sub	objptr, ##1024
0c2b0     F2 20 02 F1 | 	add	local02, objptr
0c2b4     10 1F 42 FC | 	wrbyte	local01, local02
0c2b8                 | '   block(blockptr)=d
0c2b8                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0c2b8     02 00 00 FF 
0c2bc     00 E4 05 F1 | 	add	objptr, ##1024
0c2c0     F2 22 02 FB | 	rdlong	local03, objptr
0c2c4     58 00 00 FF 
0c2c8     B8 E4 85 F1 | 	sub	objptr, ##45240
0c2cc     FF 22 16 F2 | 	cmp	local03, #255 wc
0c2d0     40 00 90 3D |  if_ae	jmp	#LR__1033
0c2d4     58 00 00 FF 
0c2d8     B8 E4 05 F1 | 	add	objptr, ##45240
0c2dc     F2 24 02 FB | 	rdlong	local04, objptr
0c2e0     58 00 00 FF 
0c2e4     B8 E4 85 F1 | 	sub	objptr, ##45240
0c2e8                 | LR__1031
0c2e8     00 25 56 F2 | 	cmps	local04, #256 wc
0c2ec     24 00 90 3D |  if_ae	jmp	#LR__1032
0c2f0     12 21 02 F6 | 	mov	local02, local04
0c2f4     56 00 00 FF 
0c2f8     B8 E4 05 F1 | 	add	objptr, ##44216
0c2fc     F2 20 02 F1 | 	add	local02, objptr
0c300     10 01 48 FC | 	wrbyte	#0, local02
0c304     01 24 06 F1 | 	add	local04, #1
0c308     56 00 00 FF 
0c30c     B8 E4 85 F1 | 	sub	objptr, ##44216
0c310     D4 FF 9F FD | 	jmp	#LR__1031
0c314                 | LR__1032
0c314                 | LR__1033
0c314     56 00 00 FF 
0c318     B8 E4 05 F1 | 	add	objptr, ##44216
0c31c     F2 12 02 F6 | 	mov	arg01, objptr
0c320     56 00 00 FF 
0c324     B8 E4 85 F1 | 	sub	objptr, ##44216
0c328     00 FB BF FD | 	call	#_csave_block
0c32c     58 00 00 FF 
0c330     B8 E4 05 F1 | 	add	objptr, ##45240
0c334     F2 00 68 FC | 	wrlong	#0, objptr
0c338     58 00 00 FF 
0c33c     B8 E4 85 F1 | 	sub	objptr, ##45240
0c340     2C 13 06 F6 | 	mov	arg01, #300
0c344     D4 48 B1 FD | 	call	#__system___waitms
0c348                 | LR__1034
0c348     A7 F0 03 F6 | 	mov	ptra, fp
0c34c     B2 00 A0 FD | 	call	#popregs_
0c350                 | _csave_addtoblock_ret
0c350     2D 00 64 FD | 	ret
0c354                 | 
0c354                 | ' 
0c354                 | ' sub test_csave
0c354                 | _test_csave
0c354     04 4A 05 F6 | 	mov	COUNT_, #4
0c358     A8 00 A0 FD | 	call	#pushregs_
0c35c     C0 F0 07 F1 | 	add	ptra, #192
0c360                 | ' 'dim fileheader,savestart, saveptr as ulong
0c360                 | ' 
0c360                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0c360     4A 00 00 FF 
0c364     84 E4 05 F1 | 	add	objptr, ##38020
0c368     F2 12 02 FB | 	rdlong	arg01, objptr
0c36c     4A 00 00 FF 
0c370     84 E4 85 F1 | 	sub	objptr, ##38020
0c374     E0 14 B1 FD | 	call	#_pslpeek
0c378     FF FF 7F FF 
0c37c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0c380     0C 00 90 5D |  if_ne	jmp	#LR__1040
0c384     1B 12 06 F6 | 	mov	arg01, #27
0c388     38 12 B1 FD | 	call	#_printerror
0c38c     1C 03 90 FD | 	jmp	#LR__1054
0c390                 | LR__1040
0c390     04 F8 BF FD | 	call	#_pop
0c394     90 4E 05 F1 | 	add	fp, #144
0c398     A7 FA 61 FC | 	wrlong	result1, fp
0c39c     04 4E 05 F1 | 	add	fp, #4
0c3a0     A7 FC 61 FC | 	wrlong	result2, fp
0c3a4     04 4E 05 F1 | 	add	fp, #4
0c3a8     A7 FE 61 FC | 	wrlong	result3, fp
0c3ac                 | ' t1=pop()
0c3ac                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0c3ac     98 4E 85 F1 | 	sub	fp, #152
0c3b0     1F FE 0D F2 | 	cmp	result3, #31 wz
0c3b4     24 00 90 AD |  if_e	jmp	#LR__1041
0c3b8     59 00 00 FF 
0c3bc     DC E5 05 F1 | 	add	objptr, ##46044
0c3c0     F2 1C 02 FB | 	rdlong	arg06, objptr
0c3c4     59 00 00 FF 
0c3c8     DC E5 85 F1 | 	sub	objptr, ##46044
0c3cc     8C 4E 05 F1 | 	add	fp, #140
0c3d0     A7 1C 62 FC | 	wrlong	arg06, fp
0c3d4     8C 4E 85 F1 | 	sub	fp, #140
0c3d8     14 00 90 FD | 	jmp	#LR__1042
0c3dc                 | LR__1041
0c3dc     90 4E 05 F1 | 	add	fp, #144
0c3e0     A7 1C 02 FB | 	rdlong	arg06, fp
0c3e4     04 4E 85 F1 | 	sub	fp, #4
0c3e8     A7 1C 62 FC | 	wrlong	arg06, fp
0c3ec     8C 4E 85 F1 | 	sub	fp, #140
0c3f0                 | LR__1042
0c3f0                 | ' 
0c3f0                 | ' ' prepare 1 kHz header wave
0c3f0                 | ' 
0c3f0                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0c3f0     A7 00 68 FC | 	wrlong	#0, fp
0c3f4     97 34 48 FB | 	callpa	#(@LR__1046-@LR__1043)>>2,fcache_load_ptr_
0c3f8                 | LR__1043
0c3f8     A7 1C 02 FB | 	rdlong	arg06, fp
0c3fc     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0c400     07 1A 06 F5 | 	and	arg05, #7
0c404     0D 1B 82 F6 | 	negc	arg05, arg05
0c408     04 1A 56 F2 | 	cmps	arg05, #4 wc
0c40c     20 00 90 3D |  if_ae	jmp	#LR__1044
0c410     A7 1A 02 FB | 	rdlong	arg05, fp
0c414     55 00 00 FF 
0c418     B8 E5 05 F1 | 	add	objptr, ##43960
0c41c     F2 1A 02 F1 | 	add	arg05, objptr
0c420     0D FF 48 FC | 	wrbyte	#127, arg05
0c424     55 00 00 FF 
0c428     B8 E5 85 F1 | 	sub	objptr, ##43960
0c42c     1C 00 90 FD | 	jmp	#LR__1045
0c430                 | LR__1044
0c430     A7 1A 02 FB | 	rdlong	arg05, fp
0c434     55 00 00 FF 
0c438     B8 E5 05 F1 | 	add	objptr, ##43960
0c43c     F2 1A 02 F1 | 	add	arg05, objptr
0c440     0D 01 49 FC | 	wrbyte	#128, arg05
0c444     55 00 00 FF 
0c448     B8 E5 85 F1 | 	sub	objptr, ##43960
0c44c                 | LR__1045
0c44c     A7 1A 02 FB | 	rdlong	arg05, fp
0c450     01 1A 06 F1 | 	add	arg05, #1
0c454     A7 1A 62 FC | 	wrlong	arg05, fp
0c458     00 1B 56 F2 | 	cmps	arg05, #256 wc
0c45c     98 FF 9F CD |  if_b	jmp	#LR__1043
0c460                 | LR__1046
0c460     55 00 00 FF 
0c464     B8 E5 05 F1 | 	add	objptr, ##43960
0c468     F2 14 02 F6 | 	mov	arg02, objptr
0c46c     07 12 06 F6 | 	mov	arg01, #7
0c470     0F 00 00 FF 
0c474     40 17 06 F6 | 	mov	arg03, ##8000
0c478     0E 18 C6 F9 | 	decod	arg04, #14
0c47c     00 1B 06 F6 | 	mov	arg05, #256
0c480     00 1C 06 F6 | 	mov	arg06, #0
0c484     4A 00 00 FF 
0c488     EC E4 85 F1 | 	sub	objptr, ##38124
0c48c     F4 40 B1 FD | 	call	#_audio096_spin2_play8
0c490     0B 00 00 FF 
0c494     CC E4 85 F1 | 	sub	objptr, ##5836
0c498     05 00 00 FF 
0c49c     B8 13 06 F6 | 	mov	arg01, ##3000
0c4a0     78 47 B1 FD | 	call	#__system___waitms
0c4a4     58 00 00 FF 
0c4a8     B8 E4 05 F1 | 	add	objptr, ##45240
0c4ac     F2 00 68 FC | 	wrlong	#0, objptr
0c4b0     58 00 00 FF 
0c4b4     B8 E4 85 F1 | 	sub	objptr, ##45240
0c4b8     72 12 06 F6 | 	mov	arg01, #114
0c4bc     00 14 06 F6 | 	mov	arg02, #0
0c4c0     4C FD BF FD | 	call	#_csave_addtoblock
0c4c4     62 12 06 F6 | 	mov	arg01, #98
0c4c8     00 14 06 F6 | 	mov	arg02, #0
0c4cc     40 FD BF FD | 	call	#_csave_addtoblock
0c4d0     61 12 06 F6 | 	mov	arg01, #97
0c4d4     00 14 06 F6 | 	mov	arg02, #0
0c4d8     34 FD BF FD | 	call	#_csave_addtoblock
0c4dc     0D 12 06 F6 | 	mov	arg01, #13
0c4e0     00 14 06 F6 | 	mov	arg02, #0
0c4e4     28 FD BF FD | 	call	#_csave_addtoblock
0c4e8                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0c4e8                 | ' waitms 3000 
0c4e8                 | ' 
0c4e8                 | ' blockptr=0
0c4e8                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0c4e8                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0c4e8     A7 02 68 FC | 	wrlong	#1, fp
0c4ec     8C 4E 05 F1 | 	add	fp, #140
0c4f0     A7 12 02 FB | 	rdlong	arg01, fp
0c4f4     8C 4E 85 F1 | 	sub	fp, #140
0c4f8     09 1F 02 F6 | 	mov	local01, arg01
0c4fc     97 06 48 FB | 	callpa	#(@LR__1048-@LR__1047)>>2,fcache_load_ptr_
0c500                 | LR__1047
0c500     0F FB C9 FA | 	rdbyte	result1, local01 wz
0c504     01 1E 06 51 |  if_ne	add	local01, #1
0c508     F4 FF 9F 5D |  if_ne	jmp	#LR__1047
0c50c                 | LR__1048
0c50c     09 1F 82 F1 | 	sub	local01, arg01
0c510     0F 21 02 F6 | 	mov	local02, local01
0c514     01 20 06 F1 | 	add	local02, #1
0c518                 | LR__1049
0c518     A7 1A 02 FB | 	rdlong	arg05, fp
0c51c     10 1B 52 F2 | 	cmps	arg05, local02 wc
0c520     34 00 90 3D |  if_ae	jmp	#LR__1050
0c524     8C 4E 05 F1 | 	add	fp, #140
0c528     A7 12 02 FB | 	rdlong	arg01, fp
0c52c     8C 4E 85 F1 | 	sub	fp, #140
0c530     A7 14 02 FB | 	rdlong	arg02, fp
0c534     01 16 06 F6 | 	mov	arg03, #1
0c538     80 65 B1 FD | 	call	#__system__Mid_S
0c53c     FD 12 C2 FA | 	rdbyte	arg01, result1
0c540     00 14 06 F6 | 	mov	arg02, #0
0c544     C8 FC BF FD | 	call	#_csave_addtoblock
0c548     A7 1A 02 FB | 	rdlong	arg05, fp
0c54c     01 1A 06 F1 | 	add	arg05, #1
0c550     A7 1A 62 FC | 	wrlong	arg05, fp
0c554     C0 FF 9F FD | 	jmp	#LR__1049
0c558                 | LR__1050
0c558     00 12 06 F6 | 	mov	arg01, #0
0c55c     00 14 06 F6 | 	mov	arg02, #0
0c560     AC FC BF FD | 	call	#_csave_addtoblock
0c564     72 12 06 F6 | 	mov	arg01, #114
0c568     00 14 06 F6 | 	mov	arg02, #0
0c56c     A0 FC BF FD | 	call	#_csave_addtoblock
0c570     62 12 06 F6 | 	mov	arg01, #98
0c574     00 14 06 F6 | 	mov	arg02, #0
0c578     94 FC BF FD | 	call	#_csave_addtoblock
0c57c     73 12 06 F6 | 	mov	arg01, #115
0c580     00 14 06 F6 | 	mov	arg02, #0
0c584     88 FC BF FD | 	call	#_csave_addtoblock
0c588     0D 12 06 F6 | 	mov	arg01, #13
0c58c     00 14 06 F6 | 	mov	arg02, #0
0c590     7C FC BF FD | 	call	#_csave_addtoblock
0c594     4A 00 00 FF 
0c598     84 E4 05 F1 | 	add	objptr, ##38020
0c59c     F2 22 02 FB | 	rdlong	local03, objptr
0c5a0     4A 00 00 FF 
0c5a4     84 E4 85 F1 | 	sub	objptr, ##38020
0c5a8     9C 4E 05 F1 | 	add	fp, #156
0c5ac     A7 22 62 FC | 	wrlong	local03, fp
0c5b0     9C 4E 85 F1 | 	sub	fp, #156
0c5b4                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0c5b4                 | ' 
0c5b4                 | ' saveptr=programstart
0c5b4                 | ' do
0c5b4                 | LR__1051
0c5b4     A0 4E 05 F1 | 	add	fp, #160
0c5b8     A7 12 02 F6 | 	mov	arg01, fp
0c5bc     04 4E 85 F1 | 	sub	fp, #4
0c5c0     A7 14 02 FB | 	rdlong	arg02, fp
0c5c4     9C 4E 85 F1 | 	sub	fp, #156
0c5c8     18 16 06 F6 | 	mov	arg03, #24
0c5cc     0B 00 00 FF 
0c5d0     CC E4 05 F1 | 	add	objptr, ##5836
0c5d4     10 37 B1 FD | 	call	#_psram_spin2_read1
0c5d8     0C 4E 05 F1 | 	add	fp, #12
0c5dc     A7 12 02 F6 | 	mov	arg01, fp
0c5e0     9C 4E 05 F1 | 	add	fp, #156
0c5e4     A7 14 02 FB | 	rdlong	arg02, fp
0c5e8     04 4E 05 F1 | 	add	fp, #4
0c5ec     A7 16 02 FB | 	rdlong	arg03, fp
0c5f0     AC 4E 85 F1 | 	sub	fp, #172
0c5f4     F0 36 B1 FD | 	call	#_psram_spin2_read1
0c5f8     0B 00 00 FF 
0c5fc     CC E4 85 F1 | 	sub	objptr, ##5836
0c600     AC 4E 05 F1 | 	add	fp, #172
0c604     A7 12 02 FB | 	rdlong	arg01, fp
0c608     AC 4E 85 F1 | 	sub	fp, #172
0c60c     00 14 06 F6 | 	mov	arg02, #0
0c610     FC FB BF FD | 	call	#_csave_addtoblock
0c614                 | ' 
0c614                 | '   psram.read1(varptr(header(0)),saveptr,24)
0c614                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0c614                 | '   csave_addtoblock(header(3),0) ' that's always <255
0c614                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)  :next i
0c614     A7 00 68 FC | 	wrlong	#0, fp
0c618     AC 4E 05 F1 | 	add	fp, #172
0c61c     A7 24 02 FB | 	rdlong	local04, fp
0c620     AC 4E 85 F1 | 	sub	fp, #172
0c624                 | LR__1052
0c624     A7 22 02 FB | 	rdlong	local03, fp
0c628     12 23 52 F2 | 	cmps	local03, local04 wc
0c62c     2C 00 90 3D |  if_ae	jmp	#LR__1053
0c630     A7 22 02 FB | 	rdlong	local03, fp
0c634     0C 4E 05 F1 | 	add	fp, #12
0c638     A7 22 02 F1 | 	add	local03, fp
0c63c     11 13 C2 FA | 	rdbyte	arg01, local03
0c640     00 14 06 F6 | 	mov	arg02, #0
0c644     0C 4E 85 F1 | 	sub	fp, #12
0c648     C4 FB BF FD | 	call	#_csave_addtoblock
0c64c     A7 22 02 FB | 	rdlong	local03, fp
0c650     01 22 06 F1 | 	add	local03, #1
0c654     A7 22 62 FC | 	wrlong	local03, fp
0c658     C8 FF 9F FD | 	jmp	#LR__1052
0c65c                 | LR__1053
0c65c     B4 4E 05 F1 | 	add	fp, #180
0c660     A7 22 02 FB | 	rdlong	local03, fp
0c664     18 4E 85 F1 | 	sub	fp, #24
0c668     A7 22 62 FC | 	wrlong	local03, fp
0c66c     18 4E 05 F1 | 	add	fp, #24
0c670     A7 22 02 FB | 	rdlong	local03, fp
0c674     B4 4E 85 F1 | 	sub	fp, #180
0c678     FF FF 3F FF 
0c67c     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0c680     30 FF 9F 5D |  if_ne	jmp	#LR__1051
0c684     00 12 06 F6 | 	mov	arg01, #0
0c688     01 14 06 F6 | 	mov	arg02, #1
0c68c     80 FB BF FD | 	call	#_csave_addtoblock
0c690     37 00 00 FF 
0c694     10 E4 05 F1 | 	add	objptr, ##28176
0c698     F2 12 02 FB | 	rdlong	arg01, objptr
0c69c     37 00 00 FF 
0c6a0     10 E4 85 F1 | 	sub	objptr, ##28176
0c6a4     D4 13 06 F1 | 	add	arg01, #468
0c6a8     09 01 58 FC | 	wrword	#0, arg01
0c6ac                 | LR__1054
0c6ac     A7 F0 03 F6 | 	mov	ptra, fp
0c6b0     B2 00 A0 FD | 	call	#popregs_
0c6b4                 | _test_csave_ret
0c6b4     2D 00 64 FD | 	ret
0c6b8                 | 
0c6b8                 | ' 
0c6b8                 | ' ' ----------------- Save the program
0c6b8                 | ' 
0c6b8                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0c6b8                 | _do_save
0c6b8     04 4A 05 F6 | 	mov	COUNT_, #4
0c6bc     A8 00 A0 FD | 	call	#pushregs_
0c6c0     01 00 00 FF 
0c6c4     C0 F0 07 F1 | 	add	ptra, ##704
0c6c8     4A 00 00 FF 
0c6cc     80 E4 05 F1 | 	add	objptr, ##38016
0c6d0     F2 1E 02 FB | 	rdlong	local01, objptr
0c6d4     0F 21 02 F6 | 	mov	local02, local01
0c6d8     01 20 66 F0 | 	shl	local02, #1
0c6dc     0F 21 02 F1 | 	add	local02, local01
0c6e0     02 20 66 F0 | 	shl	local02, #2
0c6e4     03 00 00 FF 
0c6e8     04 E4 85 F1 | 	sub	objptr, ##1540
0c6ec     F2 20 02 F1 | 	add	local02, objptr
0c6f0     10 23 02 FB | 	rdlong	local03, local02
0c6f4     01 00 00 FF 
0c6f8     10 4E 05 F1 | 	add	fp, ##528
0c6fc     A7 22 62 FC | 	wrlong	local03, fp
0c700                 | ' 
0c700                 | ' numpar=compiledline(lineptr_e).result.uresult
0c700                 | ' 
0c700                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0c700     01 00 00 FF 
0c704     10 4E 85 F1 | 	sub	fp, ##528
0c708     01 22 56 F2 | 	cmps	local03, #1 wc
0c70c     47 00 00 FF 
0c710     7C E4 85 F1 | 	sub	objptr, ##36476
0c714     20 00 90 CD |  if_b	jmp	#LR__1060
0c718     7C F4 BF FD | 	call	#_pop
0c71c     A7 FA 61 FC | 	wrlong	result1, fp
0c720     04 4E 05 F1 | 	add	fp, #4
0c724     A7 FC 61 FC | 	wrlong	result2, fp
0c728     04 4E 05 F1 | 	add	fp, #4
0c72c     A7 FE 61 FC | 	wrlong	result3, fp
0c730     08 4E 85 F1 | 	sub	fp, #8
0c734     24 00 90 FD | 	jmp	#LR__1061
0c738                 | LR__1060
0c738     59 00 00 FF 
0c73c     DC E5 05 F1 | 	add	objptr, ##46044
0c740     F2 22 02 FB | 	rdlong	local03, objptr
0c744     59 00 00 FF 
0c748     DC E5 85 F1 | 	sub	objptr, ##46044
0c74c     A7 22 62 FC | 	wrlong	local03, fp
0c750     08 4E 05 F1 | 	add	fp, #8
0c754     A7 3E 68 FC | 	wrlong	#31, fp
0c758     08 4E 85 F1 | 	sub	fp, #8
0c75c                 | LR__1061
0c75c                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0c75c     4A 00 00 FF 
0c760     84 E4 05 F1 | 	add	objptr, ##38020
0c764     F2 12 02 FB | 	rdlong	arg01, objptr
0c768     4A 00 00 FF 
0c76c     84 E4 85 F1 | 	sub	objptr, ##38020
0c770     E4 10 B1 FD | 	call	#_pslpeek
0c774     FF FF 7F FF 
0c778     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0c77c     0C 00 90 5D |  if_ne	jmp	#LR__1062
0c780     1B 12 06 F6 | 	mov	arg01, #27
0c784     3C 0E B1 FD | 	call	#_printerror
0c788     1C 03 90 FD | 	jmp	#LR__1068
0c78c                 | LR__1062
0c78c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0c78c     08 4E 05 F1 | 	add	fp, #8
0c790     A7 22 02 FB | 	rdlong	local03, fp
0c794     08 4E 85 F1 | 	sub	fp, #8
0c798     2B 22 0E F2 | 	cmp	local03, #43 wz
0c79c     18 00 90 5D |  if_ne	jmp	#LR__1063
0c7a0     A7 12 02 FB | 	rdlong	arg01, fp
0c7a4     9C 4C B0 FD | 	call	#_convertstring
0c7a8     A7 FA 61 FC | 	wrlong	result1, fp
0c7ac     08 4E 05 F1 | 	add	fp, #8
0c7b0     A7 3E 68 FC | 	wrlong	#31, fp
0c7b4     08 4E 85 F1 | 	sub	fp, #8
0c7b8                 | LR__1063
0c7b8                 | ' if t1.result_type=result_string then
0c7b8     08 4E 05 F1 | 	add	fp, #8
0c7bc     A7 22 02 FB | 	rdlong	local03, fp
0c7c0     08 4E 85 F1 | 	sub	fp, #8
0c7c4     1F 22 0E F2 | 	cmp	local03, #31 wz
0c7c8     DC 02 90 5D |  if_ne	jmp	#LR__1067
0c7cc                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0c7cc     A7 12 02 FB | 	rdlong	arg01, fp
0c7d0     83 01 00 FF 
0c7d4     C2 15 06 F6 | 	mov	arg02, ##@LR__5381
0c7d8     74 41 B1 FD | 	call	#__system___string_cmp
0c7dc     00 FA 0D F2 | 	cmp	result1, #0 wz
0c7e0     59 00 00 AF 
0c7e4     DC E5 05 A1 |  if_e	add	objptr, ##46044
0c7e8     F2 22 02 AB |  if_e	rdlong	local03, objptr
0c7ec     A7 22 62 AC |  if_e	wrlong	local03, fp
0c7f0     59 00 00 AF 
0c7f4     DC E5 85 A1 |  if_e	sub	objptr, ##46044
0c7f8     A7 22 02 5B |  if_ne	rdlong	local03, fp
0c7fc     59 00 00 5F 
0c800     DC E5 05 51 |  if_ne	add	objptr, ##46044
0c804     F2 22 62 5C |  if_ne	wrlong	local03, objptr
0c808     59 00 00 5F 
0c80c     DC E5 85 51 |  if_ne	sub	objptr, ##46044
0c810                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0c810     09 12 06 F6 | 	mov	arg01, #9
0c814     80 91 B1 FD | 	call	#__system__close
0c818     09 22 06 F6 | 	mov	local03, #9
0c81c     52 00 00 FF 
0c820     98 E4 05 F1 | 	add	objptr, ##42136
0c824     F2 12 02 FB | 	rdlong	arg01, objptr
0c828     52 00 00 FF 
0c82c     98 E4 85 F1 | 	sub	objptr, ##42136
0c830     83 01 00 FF 
0c834     C3 15 06 F6 | 	mov	arg02, ##@LR__5382
0c838     48 41 B1 FD | 	call	#__system___string_concat
0c83c     FD 12 02 F6 | 	mov	arg01, result1
0c840     A7 14 02 FB | 	rdlong	arg02, fp
0c844     3C 41 B1 FD | 	call	#__system___string_concat
0c848     FD 14 02 F6 | 	mov	arg02, result1
0c84c     11 13 02 F6 | 	mov	arg01, local03
0c850     0D 16 06 F6 | 	mov	arg03, #13
0c854     D4 4C B1 FD | 	call	#__system___basic_open_string
0c858     01 00 00 FF 
0c85c     0C 4E 05 F1 | 	add	fp, ##524
0c860     A7 0A 68 FC | 	wrlong	#5, fp
0c864     4A 00 00 FF 
0c868     84 E4 05 F1 | 	add	objptr, ##38020
0c86c     F2 22 02 FB | 	rdlong	local03, objptr
0c870     4A 00 00 FF 
0c874     84 E4 85 F1 | 	sub	objptr, ##38020
0c878     10 4E 05 F1 | 	add	fp, #16
0c87c     A7 22 62 FC | 	wrlong	local03, fp
0c880     01 00 00 FF 
0c884     1C 4E 85 F1 | 	sub	fp, ##540
0c888                 | ' '  put #9,1,fileheader,1
0c888                 | '   i=5
0c888                 | '   saveptr=programstart
0c888                 | '   do
0c888                 | LR__1064
0c888     01 00 00 FF 
0c88c     20 4E 05 F1 | 	add	fp, ##544
0c890     A7 12 02 F6 | 	mov	arg01, fp
0c894     04 4E 85 F1 | 	sub	fp, #4
0c898     A7 14 02 FB | 	rdlong	arg02, fp
0c89c     01 00 00 FF 
0c8a0     1C 4E 85 F1 | 	sub	fp, ##540
0c8a4     18 16 06 F6 | 	mov	arg03, #24
0c8a8     0B 00 00 FF 
0c8ac     CC E4 05 F1 | 	add	objptr, ##5836
0c8b0     34 34 B1 FD | 	call	#_psram_spin2_read1
0c8b4     01 00 00 FF 
0c8b8     38 4E 05 F1 | 	add	fp, ##568
0c8bc     A7 12 02 F6 | 	mov	arg01, fp
0c8c0     10 4E 85 F1 | 	sub	fp, #16
0c8c4     A7 14 02 FB | 	rdlong	arg02, fp
0c8c8     04 4E 05 F1 | 	add	fp, #4
0c8cc     A7 16 02 FB | 	rdlong	arg03, fp
0c8d0     01 00 00 FF 
0c8d4     2C 4E 85 F1 | 	sub	fp, ##556
0c8d8     0C 34 B1 FD | 	call	#_psram_spin2_read1
0c8dc     0B 00 00 FF 
0c8e0     CC E4 85 F1 | 	sub	objptr, ##5836
0c8e4     83 01 00 FF 
0c8e8     C5 23 06 F6 | 	mov	local03, ##@LR__5383
0c8ec     01 00 00 FF 
0c8f0     B8 4E 05 F1 | 	add	fp, ##696
0c8f4     A7 22 62 FC | 	wrlong	local03, fp
0c8f8                 | '     psram.read1(varptr(header(0)),saveptr,24)
0c8f8                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0c8f8                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0c8f8     AC 4E 85 F1 | 	sub	fp, #172
0c8fc     A7 02 68 FC | 	wrlong	#1, fp
0c900     20 4E 05 F1 | 	add	fp, #32
0c904     A7 24 02 FB | 	rdlong	local04, fp
0c908     01 00 00 FF 
0c90c     2C 4E 85 F1 | 	sub	fp, ##556
0c910     01 24 06 F1 | 	add	local04, #1
0c914                 | LR__1065
0c914     01 00 00 FF 
0c918     0C 4E 05 F1 | 	add	fp, ##524
0c91c     A7 22 02 FB | 	rdlong	local03, fp
0c920     01 00 00 FF 
0c924     0C 4E 85 F1 | 	sub	fp, ##524
0c928     12 23 52 F2 | 	cmps	local03, local04 wc
0c92c     64 00 90 3D |  if_ae	jmp	#LR__1066
0c930     01 00 00 FF 
0c934     B8 4E 05 F1 | 	add	fp, ##696
0c938     A7 1E 02 FB | 	rdlong	local01, fp
0c93c     AC 4E 85 F1 | 	sub	fp, #172
0c940     A7 22 02 FB | 	rdlong	local03, fp
0c944     01 22 86 F1 | 	sub	local03, #1
0c948     2C 4E 05 F1 | 	add	fp, #44
0c94c     A7 22 02 F1 | 	add	local03, fp
0c950     11 13 C2 FA | 	rdbyte	arg01, local03
0c954     01 00 00 FF 
0c958     38 4E 85 F1 | 	sub	fp, ##568
0c95c     08 62 B1 FD | 	call	#__system__Chr_S
0c960     FD 14 02 F6 | 	mov	arg02, result1
0c964     0F 13 02 F6 | 	mov	arg01, local01
0c968     18 40 B1 FD | 	call	#__system___string_concat
0c96c     01 00 00 FF 
0c970     B8 4E 05 F1 | 	add	fp, ##696
0c974     A7 FA 61 FC | 	wrlong	result1, fp
0c978     AC 4E 85 F1 | 	sub	fp, #172
0c97c     A7 22 02 FB | 	rdlong	local03, fp
0c980     01 22 06 F1 | 	add	local03, #1
0c984     A7 22 62 FC | 	wrlong	local03, fp
0c988     01 00 00 FF 
0c98c     0C 4E 85 F1 | 	sub	fp, ##524
0c990     80 FF 9F FD | 	jmp	#LR__1065
0c994                 | LR__1066
0c994                 | '  '   put #9,i,header(3),1 : i+=4
0c994                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0c994                 | '      print #9, saveline$
0c994     09 12 06 F6 | 	mov	arg01, #9
0c998     CC 99 B1 FD | 	call	#__system___getiolock_0540
0c99c     FD 12 02 F6 | 	mov	arg01, result1
0c9a0     84 3F B1 FD | 	call	#__system___lockmem
0c9a4     01 00 00 FF 
0c9a8     B8 4E 05 F1 | 	add	fp, ##696
0c9ac     A7 14 02 FB | 	rdlong	arg02, fp
0c9b0     01 00 00 FF 
0c9b4     B8 4E 85 F1 | 	sub	fp, ##696
0c9b8     09 12 06 F6 | 	mov	arg01, #9
0c9bc     00 16 06 F6 | 	mov	arg03, #0
0c9c0     58 4C B1 FD | 	call	#__system___basic_print_string
0c9c4     09 12 06 F6 | 	mov	arg01, #9
0c9c8     0A 14 06 F6 | 	mov	arg02, #10
0c9cc     00 16 06 F6 | 	mov	arg03, #0
0c9d0     F0 4B B1 FD | 	call	#__system___basic_print_char
0c9d4     09 12 06 F6 | 	mov	arg01, #9
0c9d8     8C 99 B1 FD | 	call	#__system___getiolock_0540
0c9dc     FD 00 68 FC | 	wrlong	#0, result1
0c9e0     01 00 00 FF 
0c9e4     34 4E 05 F1 | 	add	fp, ##564
0c9e8     A7 22 02 FB | 	rdlong	local03, fp
0c9ec     18 4E 85 F1 | 	sub	fp, #24
0c9f0     A7 22 62 FC | 	wrlong	local03, fp
0c9f4     18 4E 05 F1 | 	add	fp, #24
0c9f8     A7 22 02 FB | 	rdlong	local03, fp
0c9fc     01 00 00 FF 
0ca00     34 4E 85 F1 | 	sub	fp, ##564
0ca04     FF FF 3F FF 
0ca08     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0ca0c     78 FE 9F 5D |  if_ne	jmp	#LR__1064
0ca10                 | '   close #9  
0ca10     09 12 06 F6 | 	mov	arg01, #9
0ca14     80 8F B1 FD | 	call	#__system__close
0ca18                 | '   print "Saved as ";currentdir$+"/"+loadname
0ca18     00 12 06 F6 | 	mov	arg01, #0
0ca1c     48 99 B1 FD | 	call	#__system___getiolock_0540
0ca20     FD 12 02 F6 | 	mov	arg01, result1
0ca24     00 3F B1 FD | 	call	#__system___lockmem
0ca28     83 01 00 FF 
0ca2c     C6 15 06 F6 | 	mov	arg02, ##@LR__5384
0ca30     00 12 06 F6 | 	mov	arg01, #0
0ca34     00 16 06 F6 | 	mov	arg03, #0
0ca38     E0 4B B1 FD | 	call	#__system___basic_print_string
0ca3c     00 20 06 F6 | 	mov	local02, #0
0ca40     52 00 00 FF 
0ca44     98 E4 05 F1 | 	add	objptr, ##42136
0ca48     F2 12 02 FB | 	rdlong	arg01, objptr
0ca4c     52 00 00 FF 
0ca50     98 E4 85 F1 | 	sub	objptr, ##42136
0ca54     83 01 00 FF 
0ca58     D0 15 06 F6 | 	mov	arg02, ##@LR__5385
0ca5c     24 3F B1 FD | 	call	#__system___string_concat
0ca60     FD 12 02 F6 | 	mov	arg01, result1
0ca64     59 00 00 FF 
0ca68     DC E5 05 F1 | 	add	objptr, ##46044
0ca6c     F2 14 02 FB | 	rdlong	arg02, objptr
0ca70     59 00 00 FF 
0ca74     DC E5 85 F1 | 	sub	objptr, ##46044
0ca78     08 3F B1 FD | 	call	#__system___string_concat
0ca7c     FD 14 02 F6 | 	mov	arg02, result1
0ca80     10 13 02 F6 | 	mov	arg01, local02
0ca84     00 16 06 F6 | 	mov	arg03, #0
0ca88     90 4B B1 FD | 	call	#__system___basic_print_string
0ca8c     00 12 06 F6 | 	mov	arg01, #0
0ca90     0A 14 06 F6 | 	mov	arg02, #10
0ca94     00 16 06 F6 | 	mov	arg03, #0
0ca98     28 4B B1 FD | 	call	#__system___basic_print_char
0ca9c     00 12 06 F6 | 	mov	arg01, #0
0caa0     C4 98 B1 FD | 	call	#__system___getiolock_0540
0caa4     FD 00 68 FC | 	wrlong	#0, result1
0caa8                 | LR__1067
0caa8                 | LR__1068
0caa8     A7 F0 03 F6 | 	mov	ptra, fp
0caac     B2 00 A0 FD | 	call	#popregs_
0cab0                 | _do_save_ret
0cab0     2D 00 64 FD | 	ret
0cab4                 | 
0cab4                 | ' 
0cab4                 | ' '----------------- Load the program
0cab4                 | ' 'lo todo: errors while loading
0cab4                 | ' 
0cab4                 | ' sub do_enter
0cab4                 | _do_enter
0cab4     01 12 06 F6 | 	mov	arg01, #1
0cab8     04 00 B0 FD | 	call	#_do_load
0cabc                 | _do_enter_ret
0cabc     2D 00 64 FD | 	ret
0cac0                 | 
0cac0                 | ' 
0cac0                 | ' 
0cac0                 | ' sub do_load(mode=0)
0cac0                 | _do_load
0cac0     01 4A 05 F6 | 	mov	COUNT_, #1
0cac4     A8 00 A0 FD | 	call	#pushregs_
0cac8     AC F0 07 F1 | 	add	ptra, #172
0cacc     A7 12 62 FC | 	wrlong	arg01, fp
0cad0     4A 00 00 FF 
0cad4     80 E4 05 F1 | 	add	objptr, ##38016
0cad8     F2 14 02 FB | 	rdlong	arg02, objptr
0cadc     0A 13 02 F6 | 	mov	arg01, arg02
0cae0     01 12 66 F0 | 	shl	arg01, #1
0cae4     0A 13 02 F1 | 	add	arg01, arg02
0cae8     02 12 66 F0 | 	shl	arg01, #2
0caec     03 00 00 FF 
0caf0     04 E4 85 F1 | 	sub	objptr, ##1540
0caf4     F2 12 02 F1 | 	add	arg01, objptr
0caf8     09 15 02 FB | 	rdlong	arg02, arg01
0cafc     1C 4E 05 F1 | 	add	fp, #28
0cb00     A7 14 62 FC | 	wrlong	arg02, fp
0cb04     8C 4E 05 F1 | 	add	fp, #140
0cb08     A7 12 02 F6 | 	mov	arg01, fp
0cb0c     47 00 00 FF 
0cb10     7C E4 85 F1 | 	sub	objptr, ##36476
0cb14     80 4E 85 F1 | 	sub	fp, #128
0cb18     09 4F 61 FC | 	wrlong	fp, arg01
0cb1c                 | ' numpar=compiledline(lineptr_e).result.uresult
0cb1c                 | ' lpoke varptr(line2$),varptr(line2)
0cb1c                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0cb1c     0C 4E 85 F1 | 	sub	fp, #12
0cb20     A7 1E 02 FB | 	rdlong	local01, fp
0cb24     1C 4E 85 F1 | 	sub	fp, #28
0cb28     01 1E 56 F2 | 	cmps	local01, #1 wc
0cb2c     24 00 90 CD |  if_b	jmp	#LR__1070
0cb30     64 F0 BF FD | 	call	#_pop
0cb34     04 4E 05 F1 | 	add	fp, #4
0cb38     A7 FA 61 FC | 	wrlong	result1, fp
0cb3c     04 4E 05 F1 | 	add	fp, #4
0cb40     A7 FC 61 FC | 	wrlong	result2, fp
0cb44     04 4E 05 F1 | 	add	fp, #4
0cb48     A7 FE 61 FC | 	wrlong	result3, fp
0cb4c     0C 4E 85 F1 | 	sub	fp, #12
0cb50     28 00 90 FD | 	jmp	#LR__1071
0cb54                 | LR__1070
0cb54     59 00 00 FF 
0cb58     DC E5 05 F1 | 	add	objptr, ##46044
0cb5c     F2 1E 02 FB | 	rdlong	local01, objptr
0cb60     59 00 00 FF 
0cb64     DC E5 85 F1 | 	sub	objptr, ##46044
0cb68     04 4E 05 F1 | 	add	fp, #4
0cb6c     A7 1E 62 FC | 	wrlong	local01, fp
0cb70     08 4E 05 F1 | 	add	fp, #8
0cb74     A7 3E 68 FC | 	wrlong	#31, fp
0cb78     0C 4E 85 F1 | 	sub	fp, #12
0cb7c                 | LR__1071
0cb7c                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0cb7c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0cb7c     0C 4E 05 F1 | 	add	fp, #12
0cb80     A7 1E 02 FB | 	rdlong	local01, fp
0cb84     0C 4E 85 F1 | 	sub	fp, #12
0cb88     2B 1E 0E F2 | 	cmp	local01, #43 wz
0cb8c     24 00 90 5D |  if_ne	jmp	#LR__1072
0cb90     04 4E 05 F1 | 	add	fp, #4
0cb94     A7 12 02 FB | 	rdlong	arg01, fp
0cb98     04 4E 85 F1 | 	sub	fp, #4
0cb9c     A4 48 B0 FD | 	call	#_convertstring
0cba0     04 4E 05 F1 | 	add	fp, #4
0cba4     A7 FA 61 FC | 	wrlong	result1, fp
0cba8     08 4E 05 F1 | 	add	fp, #8
0cbac     A7 3E 68 FC | 	wrlong	#31, fp
0cbb0     0C 4E 85 F1 | 	sub	fp, #12
0cbb4                 | LR__1072
0cbb4                 | ' if t1.result_type=result_string then
0cbb4     0C 4E 05 F1 | 	add	fp, #12
0cbb8     A7 1E 02 FB | 	rdlong	local01, fp
0cbbc     0C 4E 85 F1 | 	sub	fp, #12
0cbc0     1F 1E 0E F2 | 	cmp	local01, #31 wz
0cbc4     D8 02 90 5D |  if_ne	jmp	#LR__1078
0cbc8                 | '   if mode=0 then do_new
0cbc8     A7 1E 0A FB | 	rdlong	local01, fp wz
0cbcc     68 32 B0 AD |  if_e	call	#_do_new
0cbd0                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0cbd0     04 4E 05 F1 | 	add	fp, #4
0cbd4     A7 12 02 FB | 	rdlong	arg01, fp
0cbd8     04 4E 85 F1 | 	sub	fp, #4
0cbdc     83 01 00 FF 
0cbe0     D2 15 06 F6 | 	mov	arg02, ##@LR__5386
0cbe4     68 3D B1 FD | 	call	#__system___string_cmp
0cbe8     00 FA 0D F2 | 	cmp	result1, #0 wz
0cbec     24 00 90 5D |  if_ne	jmp	#LR__1073
0cbf0     59 00 00 FF 
0cbf4     DC E5 05 F1 | 	add	objptr, ##46044
0cbf8     F2 1E 02 FB | 	rdlong	local01, objptr
0cbfc     59 00 00 FF 
0cc00     DC E5 85 F1 | 	sub	objptr, ##46044
0cc04     04 4E 05 F1 | 	add	fp, #4
0cc08     A7 1E 62 FC | 	wrlong	local01, fp
0cc0c     04 4E 85 F1 | 	sub	fp, #4
0cc10     20 00 90 FD | 	jmp	#LR__1074
0cc14                 | LR__1073
0cc14     04 4E 05 F1 | 	add	fp, #4
0cc18     A7 1E 02 FB | 	rdlong	local01, fp
0cc1c     04 4E 85 F1 | 	sub	fp, #4
0cc20     59 00 00 FF 
0cc24     DC E5 05 F1 | 	add	objptr, ##46044
0cc28     F2 1E 62 FC | 	wrlong	local01, objptr
0cc2c     59 00 00 FF 
0cc30     DC E5 85 F1 | 	sub	objptr, ##46044
0cc34                 | LR__1074
0cc34                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0cc34     09 12 06 F6 | 	mov	arg01, #9
0cc38     5C 8D B1 FD | 	call	#__system__close
0cc3c     09 1E 06 F6 | 	mov	local01, #9
0cc40     52 00 00 FF 
0cc44     98 E4 05 F1 | 	add	objptr, ##42136
0cc48     F2 12 02 FB | 	rdlong	arg01, objptr
0cc4c     52 00 00 FF 
0cc50     98 E4 85 F1 | 	sub	objptr, ##42136
0cc54     83 01 00 FF 
0cc58     D3 15 06 F6 | 	mov	arg02, ##@LR__5387
0cc5c     24 3D B1 FD | 	call	#__system___string_concat
0cc60     FD 12 02 F6 | 	mov	arg01, result1
0cc64     04 4E 05 F1 | 	add	fp, #4
0cc68     A7 14 02 FB | 	rdlong	arg02, fp
0cc6c     04 4E 85 F1 | 	sub	fp, #4
0cc70     10 3D B1 FD | 	call	#__system___string_concat
0cc74     FD 14 02 F6 | 	mov	arg02, result1
0cc78     0F 13 02 F6 | 	mov	arg01, local01
0cc7c     00 16 06 F6 | 	mov	arg03, #0
0cc80     A8 48 B1 FD | 	call	#__system___basic_open_string
0cc84     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0cc88     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0cc8c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0cc90     14 4E 05 F1 | 	add	fp, #20
0cc94     A7 FA 61 FC | 	wrlong	result1, fp
0cc98                 | '   r=geterr() 
0cc98                 | '   if r then 
0cc98     14 4E 85 F1 | 	sub	fp, #20
0cc9c     50 01 90 AD |  if_e	jmp	#LR__1076
0cca0                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
0cca0     09 12 06 F6 | 	mov	arg01, #9
0cca4     F0 8C B1 FD | 	call	#__system__close
0cca8     09 1E 06 F6 | 	mov	local01, #9
0ccac     52 00 00 FF 
0ccb0     98 E4 05 F1 | 	add	objptr, ##42136
0ccb4     F2 12 02 FB | 	rdlong	arg01, objptr
0ccb8     52 00 00 FF 
0ccbc     98 E4 85 F1 | 	sub	objptr, ##42136
0ccc0     83 01 00 FF 
0ccc4     D5 15 06 F6 | 	mov	arg02, ##@LR__5388
0ccc8     B8 3C B1 FD | 	call	#__system___string_concat
0cccc     FD 12 02 F6 | 	mov	arg01, result1
0ccd0     04 4E 05 F1 | 	add	fp, #4
0ccd4     A7 14 02 FB | 	rdlong	arg02, fp
0ccd8     04 4E 85 F1 | 	sub	fp, #4
0ccdc     A4 3C B1 FD | 	call	#__system___string_concat
0cce0     FD 12 02 F6 | 	mov	arg01, result1
0cce4     83 01 00 FF 
0cce8     D7 15 06 F6 | 	mov	arg02, ##@LR__5389
0ccec     94 3C B1 FD | 	call	#__system___string_concat
0ccf0     FD 14 02 F6 | 	mov	arg02, result1
0ccf4     0F 13 02 F6 | 	mov	arg01, local01
0ccf8     00 16 06 F6 | 	mov	arg03, #0
0ccfc     2C 48 B1 FD | 	call	#__system___basic_open_string
0cd00     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0cd04     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0cd08     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0cd0c     14 4E 05 F1 | 	add	fp, #20
0cd10     A7 FA 61 FC | 	wrlong	result1, fp
0cd14                 | '     r=geterr() 
0cd14                 | '     if r then 
0cd14     14 4E 85 F1 | 	sub	fp, #20
0cd18     A0 00 90 AD |  if_e	jmp	#LR__1075
0cd1c                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
0cd1c     00 12 06 F6 | 	mov	arg01, #0
0cd20     44 96 B1 FD | 	call	#__system___getiolock_0540
0cd24     FD 12 02 F6 | 	mov	arg01, result1
0cd28     FC 3B B1 FD | 	call	#__system___lockmem
0cd2c     83 01 00 FF 
0cd30     DC 15 06 F6 | 	mov	arg02, ##@LR__5390
0cd34     00 12 06 F6 | 	mov	arg01, #0
0cd38     00 16 06 F6 | 	mov	arg03, #0
0cd3c     DC 48 B1 FD | 	call	#__system___basic_print_string
0cd40     14 4E 05 F1 | 	add	fp, #20
0cd44     A7 14 02 FB | 	rdlong	arg02, fp
0cd48     14 4E 85 F1 | 	sub	fp, #20
0cd4c     00 12 06 F6 | 	mov	arg01, #0
0cd50     00 16 06 F6 | 	mov	arg03, #0
0cd54     0A 18 06 F6 | 	mov	arg04, #10
0cd58     04 49 B1 FD | 	call	#__system___basic_print_integer
0cd5c     83 01 00 FF 
0cd60     EA 15 06 F6 | 	mov	arg02, ##@LR__5391
0cd64     00 12 06 F6 | 	mov	arg01, #0
0cd68     00 16 06 F6 | 	mov	arg03, #0
0cd6c     AC 48 B1 FD | 	call	#__system___basic_print_string
0cd70     00 1E 06 F6 | 	mov	local01, #0
0cd74     14 4E 05 F1 | 	add	fp, #20
0cd78     A7 12 02 FB | 	rdlong	arg01, fp
0cd7c     14 4E 85 F1 | 	sub	fp, #20
0cd80     6C 62 B1 FD | 	call	#__system___strerror
0cd84     FD 14 02 F6 | 	mov	arg02, result1
0cd88     0F 13 02 F6 | 	mov	arg01, local01
0cd8c     00 16 06 F6 | 	mov	arg03, #0
0cd90     88 48 B1 FD | 	call	#__system___basic_print_string
0cd94     00 12 06 F6 | 	mov	arg01, #0
0cd98     0A 14 06 F6 | 	mov	arg02, #10
0cd9c     00 16 06 F6 | 	mov	arg03, #0
0cda0     20 48 B1 FD | 	call	#__system___basic_print_char
0cda4     00 12 06 F6 | 	mov	arg01, #0
0cda8     BC 95 B1 FD | 	call	#__system___getiolock_0540
0cdac     FD 00 68 FC | 	wrlong	#0, result1
0cdb0     09 12 06 F6 | 	mov	arg01, #9
0cdb4     E0 8B B1 FD | 	call	#__system__close
0cdb8     7C 01 90 FD | 	jmp	#LR__1080
0cdbc                 | LR__1075
0cdbc     59 00 00 FF 
0cdc0     DC E5 05 F1 | 	add	objptr, ##46044
0cdc4     F2 12 02 FB | 	rdlong	arg01, objptr
0cdc8     59 00 00 FF 
0cdcc     DC E5 85 F1 | 	sub	objptr, ##46044
0cdd0     83 01 00 FF 
0cdd4     ED 15 06 F6 | 	mov	arg02, ##@LR__5392
0cdd8     A8 3B B1 FD | 	call	#__system___string_concat
0cddc     59 00 00 FF 
0cde0     DC E5 05 F1 | 	add	objptr, ##46044
0cde4     F2 FA 61 FC | 	wrlong	result1, objptr
0cde8     59 00 00 FF 
0cdec     DC E5 85 F1 | 	sub	objptr, ##46044
0cdf0                 | LR__1076
0cdf0                 | '   close #9: open currentdir$+"/"+loadname for input as #9
0cdf0     09 12 06 F6 | 	mov	arg01, #9
0cdf4     A0 8B B1 FD | 	call	#__system__close
0cdf8     09 1E 06 F6 | 	mov	local01, #9
0cdfc     52 00 00 FF 
0ce00     98 E4 05 F1 | 	add	objptr, ##42136
0ce04     F2 12 02 FB | 	rdlong	arg01, objptr
0ce08     52 00 00 FF 
0ce0c     98 E4 85 F1 | 	sub	objptr, ##42136
0ce10     83 01 00 FF 
0ce14     F2 15 06 F6 | 	mov	arg02, ##@LR__5393
0ce18     68 3B B1 FD | 	call	#__system___string_concat
0ce1c     FD 12 02 F6 | 	mov	arg01, result1
0ce20     59 00 00 FF 
0ce24     DC E5 05 F1 | 	add	objptr, ##46044
0ce28     F2 14 02 FB | 	rdlong	arg02, objptr
0ce2c     59 00 00 FF 
0ce30     DC E5 85 F1 | 	sub	objptr, ##46044
0ce34     4C 3B B1 FD | 	call	#__system___string_concat
0ce38     FD 14 02 F6 | 	mov	arg02, result1
0ce3c     0F 13 02 F6 | 	mov	arg01, local01
0ce40     00 16 06 F6 | 	mov	arg03, #0
0ce44     E4 46 B1 FD | 	call	#__system___basic_open_string
0ce48                 | '   do
0ce48                 | LR__1077
0ce48     09 12 06 F6 | 	mov	arg01, #9
0ce4c     E4 3C B1 FD | 	call	#__system___basic_read_line
0ce50     FD 1E 02 F6 | 	mov	local01, result1
0ce54     37 00 00 FF 
0ce58     1C E4 05 F1 | 	add	objptr, ##28188
0ce5c     F2 1E 62 FC | 	wrlong	local01, objptr
0ce60     37 00 00 FF 
0ce64     1C E4 85 F1 | 	sub	objptr, ##28188
0ce68     D0 47 BF FD | 	call	#_interpret
0ce6c     37 00 00 FF 
0ce70     1C E4 05 F1 | 	add	objptr, ##28188
0ce74     F2 12 02 FB | 	rdlong	arg01, objptr
0ce78     37 00 00 FF 
0ce7c     1C E4 85 F1 | 	sub	objptr, ##28188
0ce80     83 01 00 FF 
0ce84     F4 15 06 F6 | 	mov	arg02, ##@LR__5394
0ce88     C4 3A B1 FD | 	call	#__system___string_cmp
0ce8c     00 FA 0D F2 | 	cmp	result1, #0 wz
0ce90     B4 FF 9F 5D |  if_ne	jmp	#LR__1077
0ce94                 | '   close #9   
0ce94     09 12 06 F6 | 	mov	arg01, #9
0ce98     FC 8A B1 FD | 	call	#__system__close
0ce9c     08 00 90 FD | 	jmp	#LR__1079
0cea0                 | LR__1078
0cea0     1E 12 06 F6 | 	mov	arg01, #30
0cea4     1C 07 B1 FD | 	call	#_printerror
0cea8                 | LR__1079
0cea8                 | ' print "Loaded ";currentdir$+"/"+loadname
0cea8     00 12 06 F6 | 	mov	arg01, #0
0ceac     B8 94 B1 FD | 	call	#__system___getiolock_0540
0ceb0     FD 12 02 F6 | 	mov	arg01, result1
0ceb4     70 3A B1 FD | 	call	#__system___lockmem
0ceb8     83 01 00 FF 
0cebc     F5 15 06 F6 | 	mov	arg02, ##@LR__5395
0cec0     00 12 06 F6 | 	mov	arg01, #0
0cec4     00 16 06 F6 | 	mov	arg03, #0
0cec8     50 47 B1 FD | 	call	#__system___basic_print_string
0cecc     00 1E 06 F6 | 	mov	local01, #0
0ced0     52 00 00 FF 
0ced4     98 E4 05 F1 | 	add	objptr, ##42136
0ced8     F2 12 02 FB | 	rdlong	arg01, objptr
0cedc     52 00 00 FF 
0cee0     98 E4 85 F1 | 	sub	objptr, ##42136
0cee4     83 01 00 FF 
0cee8     FD 15 06 F6 | 	mov	arg02, ##@LR__5396
0ceec     94 3A B1 FD | 	call	#__system___string_concat
0cef0     FD 12 02 F6 | 	mov	arg01, result1
0cef4     59 00 00 FF 
0cef8     DC E5 05 F1 | 	add	objptr, ##46044
0cefc     F2 14 02 FB | 	rdlong	arg02, objptr
0cf00     59 00 00 FF 
0cf04     DC E5 85 F1 | 	sub	objptr, ##46044
0cf08     78 3A B1 FD | 	call	#__system___string_concat
0cf0c     FD 14 02 F6 | 	mov	arg02, result1
0cf10     0F 13 02 F6 | 	mov	arg01, local01
0cf14     00 16 06 F6 | 	mov	arg03, #0
0cf18     00 47 B1 FD | 	call	#__system___basic_print_string
0cf1c     00 12 06 F6 | 	mov	arg01, #0
0cf20     0A 14 06 F6 | 	mov	arg02, #10
0cf24     00 16 06 F6 | 	mov	arg03, #0
0cf28     98 46 B1 FD | 	call	#__system___basic_print_char
0cf2c     00 12 06 F6 | 	mov	arg01, #0
0cf30     34 94 B1 FD | 	call	#__system___getiolock_0540
0cf34     FD 00 68 FC | 	wrlong	#0, result1
0cf38                 | LR__1080
0cf38     A7 F0 03 F6 | 	mov	ptra, fp
0cf3c     B2 00 A0 FD | 	call	#popregs_
0cf40                 | _do_load_ret
0cf40     2D 00 64 FD | 	ret
0cf44                 | 
0cf44                 | ' 
0cf44                 | ' sub do_end
0cf44                 | _do_end
0cf44     4A 00 00 FF 
0cf48     7C E4 05 F1 | 	add	objptr, ##38012
0cf4c     F2 00 02 FB | 	rdlong	_var01, objptr
0cf50     01 00 86 F1 | 	sub	_var01, #1
0cf54     04 E4 05 F1 | 	add	objptr, #4
0cf58     F2 00 62 FC | 	wrlong	_var01, objptr
0cf5c     0E 00 00 FF 
0cf60     3C E4 05 F1 | 	add	objptr, ##7228
0cf64     FF FF BF FF 
0cf68     F2 FE 6B FC | 	wrlong	##2147483647, objptr
0cf6c     58 00 00 FF 
0cf70     BC E4 85 F1 | 	sub	objptr, ##45244
0cf74                 | _do_end_ret
0cf74     2D 00 64 FD | 	ret
0cf78                 | 
0cf78                 | ' 
0cf78                 | ' '----------------- Run the program 
0cf78                 | ' 
0cf78                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0cf78                 | ' 
0cf78                 | ' sub do_run
0cf78                 | _do_run
0cf78     01 4A 05 F6 | 	mov	COUNT_, #1
0cf7c     A8 00 A0 FD | 	call	#pushregs_
0cf80     4A 00 00 FF 
0cf84     80 E4 05 F1 | 	add	objptr, ##38016
0cf88     F2 18 02 FB | 	rdlong	arg04, objptr
0cf8c     0C 17 02 F6 | 	mov	arg03, arg04
0cf90     01 16 66 F0 | 	shl	arg03, #1
0cf94     0C 17 02 F1 | 	add	arg03, arg04
0cf98     02 16 66 F0 | 	shl	arg03, #2
0cf9c     03 00 00 FF 
0cfa0     04 E4 85 F1 | 	sub	objptr, ##1540
0cfa4     F2 16 02 F1 | 	add	arg03, objptr
0cfa8     0B 15 02 FB | 	rdlong	arg02, arg03
0cfac                 | ' numpar=compiledline(lineptr_e).result.uresult
0cfac                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
0cfac     01 14 0E F2 | 	cmp	arg02, #1 wz
0cfb0     47 00 00 FF 
0cfb4     7C E4 85 F1 | 	sub	objptr, ##36476
0cfb8     00 12 06 A6 |  if_e	mov	arg01, #0
0cfbc     00 FB BF AD |  if_e	call	#_do_load
0cfc0     4A 00 00 FF 
0cfc4     84 E4 05 F1 | 	add	objptr, ##38020
0cfc8     F2 18 02 FB | 	rdlong	arg04, objptr
0cfcc     0E 00 00 FF 
0cfd0     38 E4 05 F1 | 	add	objptr, ##7224
0cfd4     F2 18 62 FC | 	wrlong	arg04, objptr
0cfd8     04 E4 05 F1 | 	add	objptr, #4
0cfdc     F2 00 68 FC | 	wrlong	#0, objptr
0cfe0     04 E4 05 F1 | 	add	objptr, #4
0cfe4     FF FF FF FF 
0cfe8     F2 FE 6B FC | 	wrlong	##-1, objptr
0cfec                 | ' if inrun>0 then 
0cfec     2C E4 05 F1 | 	add	objptr, #44
0cff0     F2 18 02 FB | 	rdlong	arg04, objptr
0cff4     58 00 00 FF 
0cff8     F0 E4 85 F1 | 	sub	objptr, ##45296
0cffc     01 18 16 F2 | 	cmp	arg04, #1 wc
0d000     30 00 90 CD |  if_b	jmp	#LR__1090
0d004     58 00 00 FF 
0d008     F4 E4 05 F1 | 	add	objptr, ##45300
0d00c     F2 12 02 F6 | 	mov	arg01, objptr
0d010     38 E4 85 F1 | 	sub	objptr, #56
0d014     F2 14 02 FB | 	rdlong	arg02, objptr
0d018     18 16 06 F6 | 	mov	arg03, #24
0d01c     4C 00 00 FF 
0d020     F0 E5 85 F1 | 	sub	objptr, ##39408
0d024     C0 2C B1 FD | 	call	#_psram_spin2_read1
0d028     0B 00 00 FF 
0d02c     CC E4 85 F1 | 	sub	objptr, ##5836
0d030                 | '   psram.read1(varptr(runheader),runptr,24)  
0d030                 | '   return
0d030     88 02 90 FD | 	jmp	#LR__1096
0d034                 | LR__1090
0d034     58 00 00 FF 
0d038     F0 E4 05 F1 | 	add	objptr, ##45296
0d03c     F2 02 68 FC | 	wrlong	#1, objptr
0d040     04 E4 05 F1 | 	add	objptr, #4
0d044     F2 12 02 F6 | 	mov	arg01, objptr
0d048     38 E4 85 F1 | 	sub	objptr, #56
0d04c     F2 14 02 FB | 	rdlong	arg02, objptr
0d050     18 16 06 F6 | 	mov	arg03, #24
0d054     4C 00 00 FF 
0d058     F0 E5 85 F1 | 	sub	objptr, ##39408
0d05c     88 2C B1 FD | 	call	#_psram_spin2_read1
0d060                 | ' inrun=1
0d060                 | ' psram.read1(varptr(runheader),runptr,24) 
0d060                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0d060     4D 00 00 FF 
0d064     28 E4 05 F1 | 	add	objptr, ##39464
0d068     F2 1E 02 FB | 	rdlong	local01, objptr
0d06c     58 00 00 FF 
0d070     F4 E4 85 F1 | 	sub	objptr, ##45300
0d074     FF FF 7F FF 
0d078     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0d07c     58 00 00 AF 
0d080     F0 E4 05 A1 |  if_e	add	objptr, ##45296
0d084     F2 00 68 AC |  if_e	wrlong	#0, objptr
0d088     58 00 00 AF 
0d08c     F0 E4 85 A1 |  if_e	sub	objptr, ##45296
0d090     28 02 90 AD |  if_e	jmp	#LR__1096
0d094                 | ' do 
0d094                 | LR__1091
0d094                 | '   if runptr<>oldrunptr then
0d094     58 00 00 FF 
0d098     BC E4 05 F1 | 	add	objptr, ##45244
0d09c     F2 1E 02 FB | 	rdlong	local01, objptr
0d0a0     08 E4 05 F1 | 	add	objptr, #8
0d0a4     F2 18 02 FB | 	rdlong	arg04, objptr
0d0a8     58 00 00 FF 
0d0ac     C4 E4 85 F1 | 	sub	objptr, ##45252
0d0b0     0C 1F 0A F2 | 	cmp	local01, arg04 wz
0d0b4     CC 00 90 AD |  if_e	jmp	#LR__1092
0d0b8     58 00 00 FF 
0d0bc     F4 E4 05 F1 | 	add	objptr, ##45300
0d0c0     F2 12 02 F6 | 	mov	arg01, objptr
0d0c4     38 E4 85 F1 | 	sub	objptr, #56
0d0c8     F2 14 02 FB | 	rdlong	arg02, objptr
0d0cc     18 16 06 F6 | 	mov	arg03, #24
0d0d0     4C 00 00 FF 
0d0d4     F0 E5 85 F1 | 	sub	objptr, ##39408
0d0d8     0C 2C B1 FD | 	call	#_psram_spin2_read1
0d0dc     3B 00 00 FF 
0d0e0     B0 E5 05 F1 | 	add	objptr, ##30640
0d0e4     F2 12 02 F6 | 	mov	arg01, objptr
0d0e8     11 00 00 FF 
0d0ec     40 E4 05 F1 | 	add	objptr, ##8768
0d0f0     F2 14 02 FB | 	rdlong	arg02, objptr
0d0f4     13 00 00 FF 
0d0f8     58 E4 85 F1 | 	sub	objptr, ##9816
0d0fc     F2 1E 02 FB | 	rdlong	local01, objptr
0d100     01 1E 66 F0 | 	shl	local01, #1
0d104     0F 15 02 F1 | 	add	arg02, local01
0d108     13 00 00 FF 
0d10c     98 E4 05 F1 | 	add	objptr, ##9880
0d110     F2 16 02 FB | 	rdlong	arg03, objptr
0d114     40 E4 85 F1 | 	sub	objptr, #64
0d118     F2 1E 02 FB | 	rdlong	local01, objptr
0d11c     0F 17 82 F1 | 	sub	arg03, local01
0d120     4C 00 00 FF 
0d124     F0 E5 85 F1 | 	sub	objptr, ##39408
0d128     BC 2B B1 FD | 	call	#_psram_spin2_read1
0d12c     4D 00 00 FF 
0d130     30 E4 05 F1 | 	add	objptr, ##39472
0d134     F2 1E 02 FB | 	rdlong	local01, objptr
0d138     40 E4 85 F1 | 	sub	objptr, #64
0d13c     F2 FA 01 FB | 	rdlong	result1, objptr
0d140     FD 1E 82 F1 | 	sub	local01, result1
0d144     13 00 00 FF 
0d148     58 E4 85 F1 | 	sub	objptr, ##9816
0d14c     F2 FA 01 FB | 	rdlong	result1, objptr
0d150     FD 1E 12 FD | 	qdiv	local01, result1
0d154     05 00 00 FF 
0d158     18 E4 05 F1 | 	add	objptr, ##2584
0d15c     18 1E 62 FD | 	getqx	local01
0d160     03 1E 86 F1 | 	sub	local01, #3
0d164     F2 1E 62 FC | 	wrlong	local01, objptr
0d168     0E 00 00 FF 
0d16c     40 E4 05 F1 | 	add	objptr, ##7232
0d170     F2 1E 02 FB | 	rdlong	local01, objptr
0d174     08 E4 05 F1 | 	add	objptr, #8
0d178     F2 1E 62 FC | 	wrlong	local01, objptr
0d17c     58 00 00 FF 
0d180     C4 E4 85 F1 | 	sub	objptr, ##45252
0d184                 | LR__1092
0d184     58 00 00 FF 
0d188     08 E5 05 F1 | 	add	objptr, ##45320
0d18c     F2 1E 02 FB | 	rdlong	local01, objptr
0d190     4C E4 85 F1 | 	sub	objptr, #76
0d194     F2 1E 62 FC | 	wrlong	local01, objptr
0d198     04 E4 05 F1 | 	add	objptr, #4
0d19c     F2 12 02 FB | 	rdlong	arg01, objptr
0d1a0     58 00 00 FF 
0d1a4     C0 E4 85 F1 | 	sub	objptr, ##45248
0d1a8     E8 E8 BF FD | 	call	#_execute_line
0d1ac     58 00 00 FF 
0d1b0     C0 E4 05 F1 | 	add	objptr, ##45248
0d1b4     F2 FA 61 FC | 	wrlong	result1, objptr
0d1b8     04 E4 85 F1 | 	sub	objptr, #4
0d1bc     F2 1E 02 FB | 	rdlong	local01, objptr
0d1c0     58 00 00 FF 
0d1c4     BC E4 85 F1 | 	sub	objptr, ##45244
0d1c8     FF FF 3F FF 
0d1cc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0d1d0     30 00 90 AD |  if_e	jmp	#LR__1094
0d1d4     E0 12 06 F6 | 	mov	arg01, #224
0d1d8     9C 2E B1 FD | 	call	#_usbnew_spin2_keystate
0d1dc     00 FA 0D F2 | 	cmp	result1, #0 wz
0d1e0     10 00 90 5D |  if_ne	jmp	#LR__1093
0d1e4     E4 12 06 F6 | 	mov	arg01, #228
0d1e8     8C 2E B1 FD | 	call	#_usbnew_spin2_keystate
0d1ec     00 FA 0D F2 | 	cmp	result1, #0 wz
0d1f0     A0 FE 9F AD |  if_e	jmp	#LR__1091
0d1f4                 | LR__1093
0d1f4     06 12 06 F6 | 	mov	arg01, #6
0d1f8     7C 2E B1 FD | 	call	#_usbnew_spin2_keystate
0d1fc     00 FA 0D F2 | 	cmp	result1, #0 wz
0d200     90 FE 9F AD |  if_e	jmp	#LR__1091
0d204                 | LR__1094
0d204                 | '   ''do whatever kbm.peek_latest_key()=$106 
0d204                 | ' if runptr<>$7FFF_FFFF then 
0d204     58 00 00 FF 
0d208     BC E4 05 F1 | 	add	objptr, ##45244
0d20c     F2 1E 02 FB | 	rdlong	local01, objptr
0d210     58 00 00 FF 
0d214     BC E4 85 F1 | 	sub	objptr, ##45244
0d218     FF FF 3F FF 
0d21c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0d220     64 00 90 AD |  if_e	jmp	#LR__1095
0d224                 | '     print "Stopped at line ";runheader(0)
0d224     00 12 06 F6 | 	mov	arg01, #0
0d228     3C 91 B1 FD | 	call	#__system___getiolock_0540
0d22c     FD 12 02 F6 | 	mov	arg01, result1
0d230     F4 36 B1 FD | 	call	#__system___lockmem
0d234     83 01 00 FF 
0d238     FF 15 06 F6 | 	mov	arg02, ##@LR__5397
0d23c     00 12 06 F6 | 	mov	arg01, #0
0d240     00 16 06 F6 | 	mov	arg03, #0
0d244     D4 43 B1 FD | 	call	#__system___basic_print_string
0d248     58 00 00 FF 
0d24c     F4 E4 05 F1 | 	add	objptr, ##45300
0d250     F2 14 02 FB | 	rdlong	arg02, objptr
0d254     58 00 00 FF 
0d258     F4 E4 85 F1 | 	sub	objptr, ##45300
0d25c     00 12 06 F6 | 	mov	arg01, #0
0d260     00 16 06 F6 | 	mov	arg03, #0
0d264     0A 18 06 F6 | 	mov	arg04, #10
0d268     34 44 B1 FD | 	call	#__system___basic_print_unsigned
0d26c     00 12 06 F6 | 	mov	arg01, #0
0d270     0A 14 06 F6 | 	mov	arg02, #10
0d274     00 16 06 F6 | 	mov	arg03, #0
0d278     48 43 B1 FD | 	call	#__system___basic_print_char
0d27c     00 12 06 F6 | 	mov	arg01, #0
0d280     E4 90 B1 FD | 	call	#__system___getiolock_0540
0d284     FD 00 68 FC | 	wrlong	#0, result1
0d288                 | LR__1095
0d288     58 00 00 FF 
0d28c     F0 E4 05 F1 | 	add	objptr, ##45296
0d290     F2 00 68 FC | 	wrlong	#0, objptr
0d294     58 00 00 FF 
0d298     F0 E4 85 F1 | 	sub	objptr, ##45296
0d29c     11 12 06 F6 | 	mov	arg01, #17
0d2a0     08 14 06 F6 | 	mov	arg02, #8
0d2a4     10 16 06 F6 | 	mov	arg03, #16
0d2a8     B4 12 B1 FD | 	call	#_hg010b_spin2_setspritesize
0d2ac     10 12 06 F6 | 	mov	arg01, #16
0d2b0     20 14 06 F6 | 	mov	arg02, #32
0d2b4     20 16 06 F6 | 	mov	arg03, #32
0d2b8     A4 12 B1 FD | 	call	#_hg010b_spin2_setspritesize
0d2bc                 | LR__1096
0d2bc     A7 F0 03 F6 | 	mov	ptra, fp
0d2c0     B2 00 A0 FD | 	call	#popregs_
0d2c4                 | _do_run_ret
0d2c4     2D 00 64 FD | 	ret
0d2c8                 | 
0d2c8                 | ' 
0d2c8                 | ' 
0d2c8                 | ' 
0d2c8                 | ' 
0d2c8                 | ' 
0d2c8                 | ' 
0d2c8                 | ' 
0d2c8                 | ' sub do_defenv
0d2c8                 | _do_defenv
0d2c8     08 4A 05 F6 | 	mov	COUNT_, #8
0d2cc     A8 00 A0 FD | 	call	#pushregs_
0d2d0     B4 F0 07 F1 | 	add	ptra, #180
0d2d4     4A 00 00 FF 
0d2d8     80 E4 05 F1 | 	add	objptr, ##38016
0d2dc     F2 1E 02 FB | 	rdlong	local01, objptr
0d2e0     0F 1B 02 F6 | 	mov	arg05, local01
0d2e4     01 1A 66 F0 | 	shl	arg05, #1
0d2e8     0F 1B 02 F1 | 	add	arg05, local01
0d2ec     02 1A 66 F0 | 	shl	arg05, #2
0d2f0     03 00 00 FF 
0d2f4     04 E4 85 F1 | 	sub	objptr, ##1540
0d2f8     F2 20 02 F6 | 	mov	local02, objptr
0d2fc     F2 1A 02 F1 | 	add	arg05, objptr
0d300     0D 1B 02 FB | 	rdlong	arg05, arg05
0d304     10 4E 05 F1 | 	add	fp, #16
0d308     A7 1A 62 FC | 	wrlong	arg05, fp
0d30c                 | ' 
0d30c                 | ' numpar=compiledline(lineptr_e).result.uresult
0d30c                 | ' 
0d30c                 | ' 
0d30c                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0d30c                 | ' 'TODO for 2.0: ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0d30c                 | ' ' defsnd channel, a,d,s,r - defines ADSR attack time, decay time, sus level, release time. Sus point has to be returned - how?
0d30c                 | ' 
0d30c                 | ' 
0d30c                 | ' if numpar<>2 andalso numpar<>5 andalso numpar<>9 then return ' and print error
0d30c     10 4E 85 F1 | 	sub	fp, #16
0d310     02 1A 0E F2 | 	cmp	arg05, #2 wz
0d314     47 00 00 FF 
0d318     7C E4 85 F1 | 	sub	objptr, ##36476
0d31c     10 4E 05 51 |  if_ne	add	fp, #16
0d320     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0d324     10 4E 85 51 |  if_ne	sub	fp, #16
0d328     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0d32c     10 4E 05 51 |  if_ne	add	fp, #16
0d330     0F 21 02 56 |  if_ne	mov	local02, local01
0d334     10 4E 85 51 |  if_ne	sub	fp, #16
0d338     09 20 0E 52 |  if_ne	cmp	local02, #9 wz
0d33c     10 0C 90 5D |  if_ne	jmp	#LR__1121
0d340                 | ' 
0d340                 | '  
0d340                 | ' if numpar=2 then
0d340     10 4E 05 F1 | 	add	fp, #16
0d344     A7 20 02 FB | 	rdlong	local02, fp
0d348     10 4E 85 F1 | 	sub	fp, #16
0d34c     02 20 0E F2 | 	cmp	local02, #2 wz
0d350     24 04 90 5D |  if_ne	jmp	#LR__1113
0d354     40 E8 BF FD | 	call	#_pop
0d358     FF 1A 02 F6 | 	mov	arg05, result3
0d35c     5C 4E 05 F1 | 	add	fp, #92
0d360     A7 FA 61 FC | 	wrlong	result1, fp
0d364     04 4E 05 F1 | 	add	fp, #4
0d368     A7 FC 61 FC | 	wrlong	result2, fp
0d36c     04 4E 05 F1 | 	add	fp, #4
0d370     A7 1A 62 FC | 	wrlong	arg05, fp
0d374                 | '   t1=pop()
0d374                 | '   if t1.result_type=result_string2 then 
0d374     64 4E 85 F1 | 	sub	fp, #100
0d378     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0d37c     20 00 90 5D |  if_ne	jmp	#LR__1100
0d380     5C 4E 05 F1 | 	add	fp, #92
0d384     A7 12 02 FB | 	rdlong	arg01, fp
0d388     5C 4E 85 F1 | 	sub	fp, #92
0d38c     B4 40 B0 FD | 	call	#_convertstring
0d390     68 4E 05 F1 | 	add	fp, #104
0d394     A7 FA 61 FC | 	wrlong	result1, fp
0d398     68 4E 85 F1 | 	sub	fp, #104
0d39c     58 00 90 FD | 	jmp	#LR__1103
0d3a0                 | LR__1100
0d3a0     64 4E 05 F1 | 	add	fp, #100
0d3a4     A7 20 02 FB | 	rdlong	local02, fp
0d3a8     64 4E 85 F1 | 	sub	fp, #100
0d3ac     1F 20 0E F2 | 	cmp	local02, #31 wz
0d3b0     18 00 90 5D |  if_ne	jmp	#LR__1101
0d3b4     5C 4E 05 F1 | 	add	fp, #92
0d3b8     A7 20 02 FB | 	rdlong	local02, fp
0d3bc     0C 4E 05 F1 | 	add	fp, #12
0d3c0     A7 20 62 FC | 	wrlong	local02, fp
0d3c4     68 4E 85 F1 | 	sub	fp, #104
0d3c8     2C 00 90 FD | 	jmp	#LR__1102
0d3cc                 | LR__1101
0d3cc     84 01 00 FF 
0d3d0     10 20 06 F6 | 	mov	local02, ##@LR__5398
0d3d4     68 4E 05 F1 | 	add	fp, #104
0d3d8     A7 20 62 FC | 	wrlong	local02, fp
0d3dc     0C 4E 85 F1 | 	sub	fp, #12
0d3e0     A7 12 02 F6 | 	mov	arg01, fp
0d3e4     5C 4E 85 F1 | 	sub	fp, #92
0d3e8     7C 88 B0 FD | 	call	#_converttoint
0d3ec     24 4E 05 F1 | 	add	fp, #36
0d3f0     A7 FA 61 FC | 	wrlong	result1, fp
0d3f4     24 4E 85 F1 | 	sub	fp, #36
0d3f8                 | LR__1102
0d3f8                 | LR__1103
0d3f8                 | ' 
0d3f8                 | '     
0d3f8                 | '   if s1<>"" then 
0d3f8     68 4E 05 F1 | 	add	fp, #104
0d3fc     A7 12 02 FB | 	rdlong	arg01, fp
0d400     68 4E 85 F1 | 	sub	fp, #104
0d404     84 01 00 FF 
0d408     11 14 06 F6 | 	mov	arg02, ##@LR__5399
0d40c     40 35 B1 FD | 	call	#__system___string_cmp
0d410     00 FA 0D F2 | 	cmp	result1, #0 wz
0d414     24 02 90 AD |  if_e	jmp	#LR__1107
0d418     7C E7 BF FD | 	call	#_pop
0d41c     FF 1E 02 F6 | 	mov	local01, result3
0d420     5C 4E 05 F1 | 	add	fp, #92
0d424     A7 FA 61 FC | 	wrlong	result1, fp
0d428     04 4E 05 F1 | 	add	fp, #4
0d42c     A7 FC 61 FC | 	wrlong	result2, fp
0d430     04 4E 05 F1 | 	add	fp, #4
0d434     A7 1E 62 FC | 	wrlong	local01, fp
0d438     08 4E 85 F1 | 	sub	fp, #8
0d43c     A7 12 02 F6 | 	mov	arg01, fp
0d440     5C 4E 85 F1 | 	sub	fp, #92
0d444     20 88 B0 FD | 	call	#_converttoint
0d448     20 4E 05 F1 | 	add	fp, #32
0d44c     A7 FA 61 FC | 	wrlong	result1, fp
0d450     20 4E 85 F1 | 	sub	fp, #32
0d454                 | '     t1=pop()
0d454                 | '     channel=converttoint(t1) 
0d454                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0d454     09 12 06 F6 | 	mov	arg01, #9
0d458     3C 85 B1 FD | 	call	#__system__close
0d45c     09 20 06 F6 | 	mov	local02, #9
0d460     84 01 00 FF 
0d464     12 12 06 F6 | 	mov	arg01, ##@LR__5400
0d468     68 4E 05 F1 | 	add	fp, #104
0d46c     A7 14 02 FB | 	rdlong	arg02, fp
0d470     68 4E 85 F1 | 	sub	fp, #104
0d474     0C 35 B1 FD | 	call	#__system___string_concat
0d478     FD 14 02 F6 | 	mov	arg02, result1
0d47c     10 13 02 F6 | 	mov	arg01, local02
0d480     00 16 06 F6 | 	mov	arg03, #0
0d484     A4 40 B1 FD | 	call	#__system___basic_open_string
0d488     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d48c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0d490     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d494     0C 4E 05 F1 | 	add	fp, #12
0d498     A7 FA 61 FC | 	wrlong	result1, fp
0d49c                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0d49c     0C 4E 85 F1 | 	sub	fp, #12
0d4a0     A0 00 90 AD |  if_e	jmp	#LR__1104
0d4a4     00 12 06 F6 | 	mov	arg01, #0
0d4a8     BC 8E B1 FD | 	call	#__system___getiolock_0540
0d4ac     FD 12 02 F6 | 	mov	arg01, result1
0d4b0     74 34 B1 FD | 	call	#__system___lockmem
0d4b4     84 01 00 FF 
0d4b8     1F 14 06 F6 | 	mov	arg02, ##@LR__5401
0d4bc     00 12 06 F6 | 	mov	arg01, #0
0d4c0     00 16 06 F6 | 	mov	arg03, #0
0d4c4     54 41 B1 FD | 	call	#__system___basic_print_string
0d4c8     0C 4E 05 F1 | 	add	fp, #12
0d4cc     A7 14 02 FB | 	rdlong	arg02, fp
0d4d0     0C 4E 85 F1 | 	sub	fp, #12
0d4d4     00 12 06 F6 | 	mov	arg01, #0
0d4d8     00 16 06 F6 | 	mov	arg03, #0
0d4dc     0A 18 06 F6 | 	mov	arg04, #10
0d4e0     7C 41 B1 FD | 	call	#__system___basic_print_integer
0d4e4     84 01 00 FF 
0d4e8     2D 14 06 F6 | 	mov	arg02, ##@LR__5402
0d4ec     00 12 06 F6 | 	mov	arg01, #0
0d4f0     00 16 06 F6 | 	mov	arg03, #0
0d4f4     24 41 B1 FD | 	call	#__system___basic_print_string
0d4f8     00 20 06 F6 | 	mov	local02, #0
0d4fc     0C 4E 05 F1 | 	add	fp, #12
0d500     A7 12 02 FB | 	rdlong	arg01, fp
0d504     0C 4E 85 F1 | 	sub	fp, #12
0d508     E4 5A B1 FD | 	call	#__system___strerror
0d50c     FD 14 02 F6 | 	mov	arg02, result1
0d510     10 13 02 F6 | 	mov	arg01, local02
0d514     00 16 06 F6 | 	mov	arg03, #0
0d518     00 41 B1 FD | 	call	#__system___basic_print_string
0d51c     00 12 06 F6 | 	mov	arg01, #0
0d520     0A 14 06 F6 | 	mov	arg02, #10
0d524     00 16 06 F6 | 	mov	arg03, #0
0d528     98 40 B1 FD | 	call	#__system___basic_print_char
0d52c     00 12 06 F6 | 	mov	arg01, #0
0d530     34 8E B1 FD | 	call	#__system___getiolock_0540
0d534     FD 00 68 FC | 	wrlong	#0, result1
0d538     09 12 06 F6 | 	mov	arg01, #9
0d53c     58 84 B1 FD | 	call	#__system__close
0d540     0C 0A 90 FD | 	jmp	#LR__1121
0d544                 | LR__1104
0d544                 | '     get #9,17,envbuf8(channel,0),256
0d544     20 4E 05 F1 | 	add	fp, #32
0d548     A7 1A 02 FB | 	rdlong	arg05, fp
0d54c     20 4E 85 F1 | 	sub	fp, #32
0d550     0D 17 02 F6 | 	mov	arg03, arg05
0d554     09 16 66 F0 | 	shl	arg03, #9
0d558     0D 17 02 F1 | 	add	arg03, arg05
0d55c     0C 00 00 FF 
0d560     D8 E4 05 F1 | 	add	objptr, ##6360
0d564     F2 16 02 F1 | 	add	arg03, objptr
0d568     09 12 06 F6 | 	mov	arg01, #9
0d56c     11 14 06 F6 | 	mov	arg02, #17
0d570     00 19 06 F6 | 	mov	arg04, #256
0d574     01 1A 06 F6 | 	mov	arg05, #1
0d578     0C 00 00 FF 
0d57c     D8 E4 85 F1 | 	sub	objptr, ##6360
0d580     14 42 B1 FD | 	call	#__system___basic_get
0d584                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0d584     14 4E 05 F1 | 	add	fp, #20
0d588     A7 FE 69 FC | 	wrlong	#255, fp
0d58c     14 4E 85 F1 | 	sub	fp, #20
0d590     0C 00 00 FF 
0d594     D8 E4 05 F1 | 	add	objptr, ##6360
0d598     97 30 48 FB | 	callpa	#(@LR__1106-@LR__1105)>>2,fcache_load_ptr_
0d59c                 | LR__1105
0d59c     20 4E 05 F1 | 	add	fp, #32
0d5a0     A7 18 02 FB | 	rdlong	arg04, fp
0d5a4     0C 21 02 F6 | 	mov	local02, arg04
0d5a8     09 20 66 F0 | 	shl	local02, #9
0d5ac     F2 20 02 F1 | 	add	local02, objptr
0d5b0     0C 4E 85 F1 | 	sub	fp, #12
0d5b4     A7 1E 02 FB | 	rdlong	local01, fp
0d5b8     0F 1B 02 F6 | 	mov	arg05, local01
0d5bc     01 1A 66 F0 | 	shl	arg05, #1
0d5c0     10 1B 02 F1 | 	add	arg05, local02
0d5c4     0C 21 02 F6 | 	mov	local02, arg04
0d5c8     09 20 66 F0 | 	shl	local02, #9
0d5cc     0C 21 02 F1 | 	add	local02, arg04
0d5d0     F2 20 02 F1 | 	add	local02, objptr
0d5d4     10 1F 02 F1 | 	add	local01, local02
0d5d8     0F 21 C2 FA | 	rdbyte	local02, local01
0d5dc     00 21 06 FA | 	mul	local02, #256
0d5e0     0D 21 52 FC | 	wrword	local02, arg05
0d5e4     A7 20 02 FB | 	rdlong	local02, fp
0d5e8     01 20 86 F1 | 	sub	local02, #1
0d5ec     A7 20 62 FC | 	wrlong	local02, fp
0d5f0     14 4E 85 F1 | 	sub	fp, #20
0d5f4     00 20 56 F2 | 	cmps	local02, #0 wc
0d5f8     A0 FF 9F 3D |  if_ae	jmp	#LR__1105
0d5fc                 | LR__1106
0d5fc     0C 00 00 FF 
0d600     D8 E4 85 F1 | 	sub	objptr, ##6360
0d604                 | '     close #9
0d604     09 12 06 F6 | 	mov	arg01, #9
0d608     8C 83 B1 FD | 	call	#__system__close
0d60c     20 4E 05 F1 | 	add	fp, #32
0d610     A7 20 02 FB | 	rdlong	local02, fp
0d614     20 4E 85 F1 | 	sub	fp, #32
0d618     09 20 66 F0 | 	shl	local02, #9
0d61c     0C 00 00 FF 
0d620     D8 E4 05 F1 | 	add	objptr, ##6360
0d624     F2 20 02 F1 | 	add	local02, objptr
0d628     FE 21 06 F1 | 	add	local02, #510
0d62c     10 01 58 FC | 	wrword	#0, local02
0d630                 | '     envbuf(channel,255)=0                                                                   '  for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0d630                 | '     return
0d630     0C 00 00 FF 
0d634     D8 E4 85 F1 | 	sub	objptr, ##6360
0d638     14 09 90 FD | 	jmp	#LR__1121
0d63c                 | LR__1107
0d63c                 | '     if wptr < ($80000 - 2048) then 
0d63c     24 4E 05 F1 | 	add	fp, #36
0d640     A7 22 02 FB | 	rdlong	local03, fp
0d644     24 4E 85 F1 | 	sub	fp, #36
0d648     FC 03 00 FF 
0d64c     00 22 56 F2 | 	cmps	local03, ##522240 wc
0d650     7C 00 90 3D |  if_ae	jmp	#LR__1110
0d654                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0d654     14 4E 05 F1 | 	add	fp, #20
0d658     A7 00 68 FC | 	wrlong	#0, fp
0d65c     14 4E 85 F1 | 	sub	fp, #20
0d660     0C 00 00 FF 
0d664     D8 E4 05 F1 | 	add	objptr, ##6360
0d668     97 2C 48 FB | 	callpa	#(@LR__1109-@LR__1108)>>2,fcache_load_ptr_
0d66c                 | LR__1108
0d66c     20 4E 05 F1 | 	add	fp, #32
0d670     A7 22 02 FB | 	rdlong	local03, fp
0d674     09 22 66 F0 | 	shl	local03, #9
0d678     F2 22 02 F1 | 	add	local03, objptr
0d67c     0C 4E 85 F1 | 	sub	fp, #12
0d680     A7 20 02 FB | 	rdlong	local02, fp
0d684     10 1F 02 F6 | 	mov	local01, local02
0d688     01 1E 66 F0 | 	shl	local01, #1
0d68c     11 1F 02 F1 | 	add	local01, local03
0d690     10 4E 05 F1 | 	add	fp, #16
0d694     A7 12 02 FB | 	rdlong	arg01, fp
0d698     01 20 66 F0 | 	shl	local02, #1
0d69c     10 13 02 F1 | 	add	arg01, local02
0d6a0     09 FB E1 FA | 	rdword	result1, arg01
0d6a4     0F FB 51 FC | 	wrword	result1, local01
0d6a8     10 4E 85 F1 | 	sub	fp, #16
0d6ac     A7 22 02 FB | 	rdlong	local03, fp
0d6b0     01 22 06 F1 | 	add	local03, #1
0d6b4     A7 22 62 FC | 	wrlong	local03, fp
0d6b8     14 4E 85 F1 | 	sub	fp, #20
0d6bc     00 23 56 F2 | 	cmps	local03, #256 wc
0d6c0     A8 FF 9F CD |  if_b	jmp	#LR__1108
0d6c4                 | LR__1109
0d6c4     0C 00 00 FF 
0d6c8     D8 E4 85 F1 | 	sub	objptr, ##6360
0d6cc     78 00 90 FD | 	jmp	#LR__1112
0d6d0                 | LR__1110
0d6d0                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0d6d0     14 4E 05 F1 | 	add	fp, #20
0d6d4     A7 00 68 FC | 	wrlong	#0, fp
0d6d8     14 4E 85 F1 | 	sub	fp, #20
0d6dc                 | LR__1111
0d6dc     20 4E 05 F1 | 	add	fp, #32
0d6e0     A7 22 02 FB | 	rdlong	local03, fp
0d6e4     09 22 66 F0 | 	shl	local03, #9
0d6e8     0C 00 00 FF 
0d6ec     D8 E4 05 F1 | 	add	objptr, ##6360
0d6f0     F2 22 02 F1 | 	add	local03, objptr
0d6f4     0C 4E 85 F1 | 	sub	fp, #12
0d6f8     A7 20 02 FB | 	rdlong	local02, fp
0d6fc     10 1F 02 F6 | 	mov	local01, local02
0d700     01 1E 66 F0 | 	shl	local01, #1
0d704     11 1F 02 F1 | 	add	local01, local03
0d708     10 4E 05 F1 | 	add	fp, #16
0d70c     A7 12 02 FB | 	rdlong	arg01, fp
0d710     24 4E 85 F1 | 	sub	fp, #36
0d714     01 20 66 F0 | 	shl	local02, #1
0d718     10 13 02 F1 | 	add	arg01, local02
0d71c     0C 00 00 FF 
0d720     D8 E4 85 F1 | 	sub	objptr, ##6360
0d724     88 01 B1 FD | 	call	#_psdpeek
0d728     0F FB 51 FC | 	wrword	result1, local01
0d72c     14 4E 05 F1 | 	add	fp, #20
0d730     A7 22 02 FB | 	rdlong	local03, fp
0d734     01 22 06 F1 | 	add	local03, #1
0d738     A7 22 62 FC | 	wrlong	local03, fp
0d73c     14 4E 85 F1 | 	sub	fp, #20
0d740     00 23 56 F2 | 	cmps	local03, #256 wc
0d744     94 FF 9F CD |  if_b	jmp	#LR__1111
0d748                 | LR__1112
0d748     20 4E 05 F1 | 	add	fp, #32
0d74c     A7 22 02 FB | 	rdlong	local03, fp
0d750     20 4E 85 F1 | 	sub	fp, #32
0d754     09 22 66 F0 | 	shl	local03, #9
0d758     0C 00 00 FF 
0d75c     D8 E4 05 F1 | 	add	objptr, ##6360
0d760     F2 22 02 F1 | 	add	local03, objptr
0d764     FE 23 06 F1 | 	add	local03, #510
0d768     11 01 58 FC | 	wrword	#0, local03
0d76c                 | '     envbuf(channel,255)=0
0d76c                 | '     return   
0d76c     0C 00 00 FF 
0d770     D8 E4 85 F1 | 	sub	objptr, ##6360
0d774     D8 07 90 FD | 	jmp	#LR__1121
0d778                 | LR__1113
0d778                 | ' 
0d778                 | ' if numpar=5 then    'simple adsr
0d778     10 4E 05 F1 | 	add	fp, #16
0d77c     A7 22 02 FB | 	rdlong	local03, fp
0d780     10 4E 85 F1 | 	sub	fp, #16
0d784     05 22 0E F2 | 	cmp	local03, #5 wz
0d788     98 07 90 5D |  if_ne	jmp	#LR__1120
0d78c     08 E4 BF FD | 	call	#_pop
0d790     FF 1E 02 F6 | 	mov	local01, result3
0d794     5C 4E 05 F1 | 	add	fp, #92
0d798     A7 FA 61 FC | 	wrlong	result1, fp
0d79c     04 4E 05 F1 | 	add	fp, #4
0d7a0     A7 FC 61 FC | 	wrlong	result2, fp
0d7a4     04 4E 05 F1 | 	add	fp, #4
0d7a8     A7 1E 62 FC | 	wrlong	local01, fp
0d7ac     08 4E 85 F1 | 	sub	fp, #8
0d7b0     A7 12 02 F6 | 	mov	arg01, fp
0d7b4     5C 4E 85 F1 | 	sub	fp, #92
0d7b8     68 85 B0 FD | 	call	#_converttofloat
0d7bc     FD 22 02 F6 | 	mov	local03, result1
0d7c0     34 4E 05 F1 | 	add	fp, #52
0d7c4     A7 22 62 FC | 	wrlong	local03, fp
0d7c8     34 4E 85 F1 | 	sub	fp, #52
0d7cc     C8 E3 BF FD | 	call	#_pop
0d7d0     FF 1E 02 F6 | 	mov	local01, result3
0d7d4     5C 4E 05 F1 | 	add	fp, #92
0d7d8     A7 FA 61 FC | 	wrlong	result1, fp
0d7dc     04 4E 05 F1 | 	add	fp, #4
0d7e0     A7 FC 61 FC | 	wrlong	result2, fp
0d7e4     04 4E 05 F1 | 	add	fp, #4
0d7e8     A7 1E 62 FC | 	wrlong	local01, fp
0d7ec     08 4E 85 F1 | 	sub	fp, #8
0d7f0     A7 12 02 F6 | 	mov	arg01, fp
0d7f4     5C 4E 85 F1 | 	sub	fp, #92
0d7f8     28 85 B0 FD | 	call	#_converttofloat
0d7fc     FD 22 02 F6 | 	mov	local03, result1
0d800     30 4E 05 F1 | 	add	fp, #48
0d804     A7 22 62 FC | 	wrlong	local03, fp
0d808     30 4E 85 F1 | 	sub	fp, #48
0d80c     88 E3 BF FD | 	call	#_pop
0d810     FF 1E 02 F6 | 	mov	local01, result3
0d814     5C 4E 05 F1 | 	add	fp, #92
0d818     A7 FA 61 FC | 	wrlong	result1, fp
0d81c     04 4E 05 F1 | 	add	fp, #4
0d820     A7 FC 61 FC | 	wrlong	result2, fp
0d824     04 4E 05 F1 | 	add	fp, #4
0d828     A7 1E 62 FC | 	wrlong	local01, fp
0d82c     08 4E 85 F1 | 	sub	fp, #8
0d830     A7 12 02 F6 | 	mov	arg01, fp
0d834     5C 4E 85 F1 | 	sub	fp, #92
0d838     E8 84 B0 FD | 	call	#_converttofloat
0d83c     FD 22 02 F6 | 	mov	local03, result1
0d840     2C 4E 05 F1 | 	add	fp, #44
0d844     A7 22 62 FC | 	wrlong	local03, fp
0d848     2C 4E 85 F1 | 	sub	fp, #44
0d84c     48 E3 BF FD | 	call	#_pop
0d850     FF 1E 02 F6 | 	mov	local01, result3
0d854     5C 4E 05 F1 | 	add	fp, #92
0d858     A7 FA 61 FC | 	wrlong	result1, fp
0d85c     04 4E 05 F1 | 	add	fp, #4
0d860     A7 FC 61 FC | 	wrlong	result2, fp
0d864     04 4E 05 F1 | 	add	fp, #4
0d868     A7 1E 62 FC | 	wrlong	local01, fp
0d86c     08 4E 85 F1 | 	sub	fp, #8
0d870     A7 12 02 F6 | 	mov	arg01, fp
0d874     5C 4E 85 F1 | 	sub	fp, #92
0d878     A8 84 B0 FD | 	call	#_converttofloat
0d87c     FD 22 02 F6 | 	mov	local03, result1
0d880     28 4E 05 F1 | 	add	fp, #40
0d884     A7 22 62 FC | 	wrlong	local03, fp
0d888     28 4E 85 F1 | 	sub	fp, #40
0d88c     08 E3 BF FD | 	call	#_pop
0d890     FF 1E 02 F6 | 	mov	local01, result3
0d894     5C 4E 05 F1 | 	add	fp, #92
0d898     A7 FA 61 FC | 	wrlong	result1, fp
0d89c     04 4E 05 F1 | 	add	fp, #4
0d8a0     A7 FC 61 FC | 	wrlong	result2, fp
0d8a4     04 4E 05 F1 | 	add	fp, #4
0d8a8     A7 1E 62 FC | 	wrlong	local01, fp
0d8ac     08 4E 85 F1 | 	sub	fp, #8
0d8b0     A7 12 02 F6 | 	mov	arg01, fp
0d8b4     5C 4E 85 F1 | 	sub	fp, #92
0d8b8     AC 83 B0 FD | 	call	#_converttoint
0d8bc     20 4E 05 F1 | 	add	fp, #32
0d8c0     A7 FA 61 FC | 	wrlong	result1, fp
0d8c4                 | ' 
0d8c4                 | '   t1=pop() : rr=converttofloat(t1)
0d8c4                 | '   t1=pop() : ss=converttofloat(t1) 
0d8c4                 | '   t1=pop() : dd=converttofloat(t1)
0d8c4                 | '   t1=pop() : aa=converttofloat(t1)
0d8c4                 | '   t1=pop() : channel=converttoint(t1)
0d8c4                 | '   if ss<0.0 then ss=0.0 
0d8c4     10 4E 05 F1 | 	add	fp, #16
0d8c8     A7 12 02 FB | 	rdlong	arg01, fp
0d8cc     30 4E 85 F1 | 	sub	fp, #48
0d8d0     00 14 06 F6 | 	mov	arg02, #0
0d8d4     01 16 06 F6 | 	mov	arg03, #1
0d8d8     34 60 B1 FD | 	call	#__system___float_cmp
0d8dc     00 FA 55 F2 | 	cmps	result1, #0 wc
0d8e0     30 4E 05 C1 |  if_b	add	fp, #48
0d8e4     A7 00 68 CC |  if_b	wrlong	#0, fp
0d8e8     30 4E 85 C1 |  if_b	sub	fp, #48
0d8ec                 | '   if ss>1.0 then ss=1.0
0d8ec     30 4E 05 F1 | 	add	fp, #48
0d8f0     A7 12 02 FB | 	rdlong	arg01, fp
0d8f4     30 4E 85 F1 | 	sub	fp, #48
0d8f8     00 C0 1F FF 
0d8fc     00 14 06 F6 | 	mov	arg02, ##1065353216
0d900     01 16 66 F6 | 	neg	arg03, #1
0d904     08 60 B1 FD | 	call	#__system___float_cmp
0d908     01 FA 55 F2 | 	cmps	result1, #1 wc
0d90c     30 4E 05 31 |  if_ae	add	fp, #48
0d910     00 C0 9F 3F 
0d914     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0d918     30 4E 85 31 |  if_ae	sub	fp, #48
0d91c     28 4E 05 F1 | 	add	fp, #40
0d920     A7 12 02 FB | 	rdlong	arg01, fp
0d924     04 4E 05 F1 | 	add	fp, #4
0d928     A7 14 02 FB | 	rdlong	arg02, fp
0d92c     2C 4E 85 F1 | 	sub	fp, #44
0d930     D8 57 B1 FD | 	call	#__system___float_add
0d934     FD 12 02 F6 | 	mov	arg01, result1
0d938     34 4E 05 F1 | 	add	fp, #52
0d93c     A7 14 02 FB | 	rdlong	arg02, fp
0d940     34 4E 85 F1 | 	sub	fp, #52
0d944     C4 57 B1 FD | 	call	#__system___float_add
0d948     4C 4E 05 F1 | 	add	fp, #76
0d94c     A7 FA 61 FC | 	wrlong	result1, fp
0d950     FD 14 02 F6 | 	mov	arg02, result1
0d954     4C 4E 85 F1 | 	sub	fp, #76
0d958     00 C0 21 FF 
0d95c     00 12 06 F6 | 	mov	arg01, ##1132462080
0d960     7C 5D B1 FD | 	call	#__system___float_div
0d964     50 4E 05 F1 | 	add	fp, #80
0d968     A7 FA 61 FC | 	wrlong	result1, fp
0d96c     28 4E 85 F1 | 	sub	fp, #40
0d970     A7 12 02 FB | 	rdlong	arg01, fp
0d974     FD 14 02 F6 | 	mov	arg02, result1
0d978     28 4E 85 F1 | 	sub	fp, #40
0d97c     5C 5B B1 FD | 	call	#__system___float_mul
0d980     FD 12 02 F6 | 	mov	arg01, result1
0d984     01 14 06 F6 | 	mov	arg02, #1
0d988     18 60 B1 FD | 	call	#__system___float_tointeger
0d98c     A7 FA 61 FC | 	wrlong	result1, fp
0d990     2C 4E 05 F1 | 	add	fp, #44
0d994     A7 12 02 FB | 	rdlong	arg01, fp
0d998     24 4E 05 F1 | 	add	fp, #36
0d99c     A7 14 02 FB | 	rdlong	arg02, fp
0d9a0     50 4E 85 F1 | 	sub	fp, #80
0d9a4     34 5B B1 FD | 	call	#__system___float_mul
0d9a8     FD 12 02 F6 | 	mov	arg01, result1
0d9ac     01 14 06 F6 | 	mov	arg02, #1
0d9b0     F0 5F B1 FD | 	call	#__system___float_tointeger
0d9b4     04 4E 05 F1 | 	add	fp, #4
0d9b8     A7 FA 61 FC | 	wrlong	result1, fp
0d9bc     30 4E 05 F1 | 	add	fp, #48
0d9c0     A7 12 02 FB | 	rdlong	arg01, fp
0d9c4     1C 4E 05 F1 | 	add	fp, #28
0d9c8     A7 14 02 FB | 	rdlong	arg02, fp
0d9cc     50 4E 85 F1 | 	sub	fp, #80
0d9d0     08 5B B1 FD | 	call	#__system___float_mul
0d9d4     FD 12 02 F6 | 	mov	arg01, result1
0d9d8     01 14 06 F6 | 	mov	arg02, #1
0d9dc     C4 5F B1 FD | 	call	#__system___float_tointeger
0d9e0     FD 22 02 F6 | 	mov	local03, result1
0d9e4     0C 4E 05 F1 | 	add	fp, #12
0d9e8     A7 22 62 FC | 	wrlong	local03, fp
0d9ec     0C 4E 85 F1 | 	sub	fp, #12
0d9f0                 | '   fulltime=aa+dd+rr
0d9f0                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit) :print a,d,r,a+d+r
0d9f0     00 12 06 F6 | 	mov	arg01, #0
0d9f4     70 89 B1 FD | 	call	#__system___getiolock_0540
0d9f8     FD 12 02 F6 | 	mov	arg01, result1
0d9fc     28 2F B1 FD | 	call	#__system___lockmem
0da00     A7 14 02 FB | 	rdlong	arg02, fp
0da04     00 12 06 F6 | 	mov	arg01, #0
0da08     00 16 06 F6 | 	mov	arg03, #0
0da0c     0A 18 06 F6 | 	mov	arg04, #10
0da10     4C 3C B1 FD | 	call	#__system___basic_print_integer
0da14     00 12 06 F6 | 	mov	arg01, #0
0da18     09 14 06 F6 | 	mov	arg02, #9
0da1c     00 16 06 F6 | 	mov	arg03, #0
0da20     A0 3B B1 FD | 	call	#__system___basic_print_char
0da24     04 4E 05 F1 | 	add	fp, #4
0da28     A7 14 02 FB | 	rdlong	arg02, fp
0da2c     04 4E 85 F1 | 	sub	fp, #4
0da30     00 12 06 F6 | 	mov	arg01, #0
0da34     00 16 06 F6 | 	mov	arg03, #0
0da38     0A 18 06 F6 | 	mov	arg04, #10
0da3c     20 3C B1 FD | 	call	#__system___basic_print_integer
0da40     00 12 06 F6 | 	mov	arg01, #0
0da44     09 14 06 F6 | 	mov	arg02, #9
0da48     00 16 06 F6 | 	mov	arg03, #0
0da4c     74 3B B1 FD | 	call	#__system___basic_print_char
0da50     0C 4E 05 F1 | 	add	fp, #12
0da54     A7 14 02 FB | 	rdlong	arg02, fp
0da58     0C 4E 85 F1 | 	sub	fp, #12
0da5c     00 12 06 F6 | 	mov	arg01, #0
0da60     00 16 06 F6 | 	mov	arg03, #0
0da64     0A 18 06 F6 | 	mov	arg04, #10
0da68     F4 3B B1 FD | 	call	#__system___basic_print_integer
0da6c     00 12 06 F6 | 	mov	arg01, #0
0da70     09 14 06 F6 | 	mov	arg02, #9
0da74     00 16 06 F6 | 	mov	arg03, #0
0da78     48 3B B1 FD | 	call	#__system___basic_print_char
0da7c     A7 14 02 FB | 	rdlong	arg02, fp
0da80     04 4E 05 F1 | 	add	fp, #4
0da84     A7 22 02 FB | 	rdlong	local03, fp
0da88     11 15 02 F1 | 	add	arg02, local03
0da8c     08 4E 05 F1 | 	add	fp, #8
0da90     A7 22 02 FB | 	rdlong	local03, fp
0da94     0C 4E 85 F1 | 	sub	fp, #12
0da98     11 15 02 F1 | 	add	arg02, local03
0da9c     00 12 06 F6 | 	mov	arg01, #0
0daa0     00 16 06 F6 | 	mov	arg03, #0
0daa4     0A 18 06 F6 | 	mov	arg04, #10
0daa8     B4 3B B1 FD | 	call	#__system___basic_print_integer
0daac     00 12 06 F6 | 	mov	arg01, #0
0dab0     0A 14 06 F6 | 	mov	arg02, #10
0dab4     00 16 06 F6 | 	mov	arg03, #0
0dab8     08 3B B1 FD | 	call	#__system___basic_print_char
0dabc     00 12 06 F6 | 	mov	arg01, #0
0dac0     A4 88 B1 FD | 	call	#__system___getiolock_0540
0dac4     FD 00 68 FC | 	wrlong	#0, result1
0dac8     F8 BF 23 FF 
0dacc     00 22 06 F6 | 	mov	local03, ##1199566848
0dad0     A7 12 02 FB | 	rdlong	arg01, fp
0dad4     09 13 52 F6 | 	abs	arg01, arg01 wc
0dad8     1F 24 C6 C9 |  if_b	decod	local04, #31
0dadc     00 24 06 36 |  if_ae	mov	local04, #0
0dae0     F4 55 B1 FD | 	call	#__system___float_fromuns
0dae4     12 FB 61 F5 | 	xor	result1, local04
0dae8     FD 14 02 F6 | 	mov	arg02, result1
0daec     11 13 02 F6 | 	mov	arg01, local03
0daf0     EC 5B B1 FD | 	call	#__system___float_div
0daf4     54 4E 05 F1 | 	add	fp, #84
0daf8     A7 FA 61 FC | 	wrlong	result1, fp
0dafc     F8 BF 23 FF 
0db00     00 22 06 F6 | 	mov	local03, ##1199566848
0db04     24 4E 85 F1 | 	sub	fp, #36
0db08     A7 14 02 FB | 	rdlong	arg02, fp
0db0c     30 4E 85 F1 | 	sub	fp, #48
0db10     F8 BF 23 FF 
0db14     00 12 06 F6 | 	mov	arg01, ##1199566848
0db18     C0 59 B1 FD | 	call	#__system___float_mul
0db1c     FD 14 02 F6 | 	mov	arg02, result1
0db20     11 13 02 F6 | 	mov	arg01, local03
0db24     1F 14 E6 F4 | 	bitnot	arg02, #31
0db28     E0 55 B1 FD | 	call	#__system___float_add
0db2c     FD 22 02 F6 | 	mov	local03, result1
0db30     04 4E 05 F1 | 	add	fp, #4
0db34     A7 12 02 FB | 	rdlong	arg01, fp
0db38     04 4E 85 F1 | 	sub	fp, #4
0db3c     09 13 52 F6 | 	abs	arg01, arg01 wc
0db40     1F 24 C6 C9 |  if_b	decod	local04, #31
0db44     00 24 06 36 |  if_ae	mov	local04, #0
0db48     8C 55 B1 FD | 	call	#__system___float_fromuns
0db4c     12 FB 61 F5 | 	xor	result1, local04
0db50     FD 14 02 F6 | 	mov	arg02, result1
0db54     11 13 02 F6 | 	mov	arg01, local03
0db58     84 5B B1 FD | 	call	#__system___float_div
0db5c     2C 4E 05 F1 | 	add	fp, #44
0db60     A7 FA 61 FC | 	wrlong	result1, fp
0db64     04 4E 05 F1 | 	add	fp, #4
0db68     A7 14 02 FB | 	rdlong	arg02, fp
0db6c     30 4E 85 F1 | 	sub	fp, #48
0db70     F8 BF 23 FF 
0db74     00 12 06 F6 | 	mov	arg01, ##1199566848
0db78     60 59 B1 FD | 	call	#__system___float_mul
0db7c     FD 22 02 F6 | 	mov	local03, result1
0db80     0C 4E 05 F1 | 	add	fp, #12
0db84     A7 12 02 FB | 	rdlong	arg01, fp
0db88     0C 4E 85 F1 | 	sub	fp, #12
0db8c     09 13 52 F6 | 	abs	arg01, arg01 wc
0db90     1F 24 C6 C9 |  if_b	decod	local04, #31
0db94     00 24 06 36 |  if_ae	mov	local04, #0
0db98     3C 55 B1 FD | 	call	#__system___float_fromuns
0db9c     12 FB 61 F5 | 	xor	result1, local04
0dba0     FD 14 02 F6 | 	mov	arg02, result1
0dba4     11 13 02 F6 | 	mov	arg01, local03
0dba8     34 5B B1 FD | 	call	#__system___float_div
0dbac     FD 22 02 F6 | 	mov	local03, result1
0dbb0     58 4E 05 F1 | 	add	fp, #88
0dbb4     A7 22 62 FC | 	wrlong	local03, fp
0dbb8     58 4E 85 F1 | 	sub	fp, #88
0dbbc                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r : print da,dd,dr
0dbbc     00 12 06 F6 | 	mov	arg01, #0
0dbc0     A4 87 B1 FD | 	call	#__system___getiolock_0540
0dbc4     FD 12 02 F6 | 	mov	arg01, result1
0dbc8     5C 2D B1 FD | 	call	#__system___lockmem
0dbcc     54 4E 05 F1 | 	add	fp, #84
0dbd0     A7 14 02 FB | 	rdlong	arg02, fp
0dbd4     54 4E 85 F1 | 	sub	fp, #84
0dbd8     00 12 06 F6 | 	mov	arg01, #0
0dbdc     00 16 06 F6 | 	mov	arg03, #0
0dbe0     23 18 06 F6 | 	mov	arg04, #35
0dbe4     0C 5F B1 FD | 	call	#__system___basic_print_float
0dbe8     00 12 06 F6 | 	mov	arg01, #0
0dbec     09 14 06 F6 | 	mov	arg02, #9
0dbf0     00 16 06 F6 | 	mov	arg03, #0
0dbf4     CC 39 B1 FD | 	call	#__system___basic_print_char
0dbf8     2C 4E 05 F1 | 	add	fp, #44
0dbfc     A7 14 02 FB | 	rdlong	arg02, fp
0dc00     2C 4E 85 F1 | 	sub	fp, #44
0dc04     00 12 06 F6 | 	mov	arg01, #0
0dc08     00 16 06 F6 | 	mov	arg03, #0
0dc0c     23 18 06 F6 | 	mov	arg04, #35
0dc10     E0 5E B1 FD | 	call	#__system___basic_print_float
0dc14     00 12 06 F6 | 	mov	arg01, #0
0dc18     09 14 06 F6 | 	mov	arg02, #9
0dc1c     00 16 06 F6 | 	mov	arg03, #0
0dc20     A0 39 B1 FD | 	call	#__system___basic_print_char
0dc24     58 4E 05 F1 | 	add	fp, #88
0dc28     A7 14 02 FB | 	rdlong	arg02, fp
0dc2c     58 4E 85 F1 | 	sub	fp, #88
0dc30     00 12 06 F6 | 	mov	arg01, #0
0dc34     00 16 06 F6 | 	mov	arg03, #0
0dc38     23 18 06 F6 | 	mov	arg04, #35
0dc3c     B4 5E B1 FD | 	call	#__system___basic_print_float
0dc40     00 12 06 F6 | 	mov	arg01, #0
0dc44     0A 14 06 F6 | 	mov	arg02, #10
0dc48     00 16 06 F6 | 	mov	arg03, #0
0dc4c     74 39 B1 FD | 	call	#__system___basic_print_char
0dc50     00 12 06 F6 | 	mov	arg01, #0
0dc54     10 87 B1 FD | 	call	#__system___getiolock_0540
0dc58     FD 00 68 FC | 	wrlong	#0, result1
0dc5c     20 4E 05 F1 | 	add	fp, #32
0dc60     A7 26 02 FB | 	rdlong	local05, fp
0dc64     20 4E 85 F1 | 	sub	fp, #32
0dc68     01 26 66 F0 | 	shl	local05, #1
0dc6c     59 00 00 FF 
0dc70     CC E5 05 F1 | 	add	objptr, ##46028
0dc74     F2 26 02 F1 | 	add	local05, objptr
0dc78     A7 28 02 FB | 	rdlong	local06, fp
0dc7c     04 4E 05 F1 | 	add	fp, #4
0dc80     A7 22 02 FB | 	rdlong	local03, fp
0dc84     11 29 02 F1 | 	add	local06, local03
0dc88     13 29 52 FC | 	wrword	local06, local05
0dc8c     24 4E 05 F1 | 	add	fp, #36
0dc90     A7 00 68 FC | 	wrlong	#0, fp
0dc94                 | '   suspoints(channel)=a+d
0dc94                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0dc94     14 4E 85 F1 | 	sub	fp, #20
0dc98     A7 00 68 FC | 	wrlong	#0, fp
0dc9c     14 4E 85 F1 | 	sub	fp, #20
0dca0     A7 2A 02 FB | 	rdlong	local07, fp
0dca4     59 00 00 FF 
0dca8     CC E5 85 F1 | 	sub	objptr, ##46028
0dcac                 | LR__1114
0dcac     14 4E 05 F1 | 	add	fp, #20
0dcb0     A7 22 02 FB | 	rdlong	local03, fp
0dcb4     14 4E 85 F1 | 	sub	fp, #20
0dcb8     15 23 52 F2 | 	cmps	local03, local07 wc
0dcbc     80 00 90 3D |  if_ae	jmp	#LR__1115
0dcc0     20 4E 05 F1 | 	add	fp, #32
0dcc4     A7 28 02 FB | 	rdlong	local06, fp
0dcc8     09 28 66 F0 | 	shl	local06, #9
0dccc     0C 00 00 FF 
0dcd0     D8 E4 05 F1 | 	add	objptr, ##6360
0dcd4     F2 28 02 F1 | 	add	local06, objptr
0dcd8     0C 4E 85 F1 | 	sub	fp, #12
0dcdc     A7 26 02 FB | 	rdlong	local05, fp
0dce0     01 26 66 F0 | 	shl	local05, #1
0dce4     14 27 02 F1 | 	add	local05, local06
0dce8     14 4E 05 F1 | 	add	fp, #20
0dcec     A7 12 02 FB | 	rdlong	arg01, fp
0dcf0     28 4E 85 F1 | 	sub	fp, #40
0dcf4     0C 00 00 FF 
0dcf8     D8 E4 85 F1 | 	sub	objptr, ##6360
0dcfc     01 14 06 F6 | 	mov	arg02, #1
0dd00     A0 5C B1 FD | 	call	#__system___float_tointeger
0dd04     13 FB 51 FC | 	wrword	result1, local05
0dd08     28 4E 05 F1 | 	add	fp, #40
0dd0c     A7 12 02 FB | 	rdlong	arg01, fp
0dd10     2C 4E 05 F1 | 	add	fp, #44
0dd14     A7 14 02 FB | 	rdlong	arg02, fp
0dd18     54 4E 85 F1 | 	sub	fp, #84
0dd1c     EC 53 B1 FD | 	call	#__system___float_add
0dd20     28 4E 05 F1 | 	add	fp, #40
0dd24     A7 FA 61 FC | 	wrlong	result1, fp
0dd28     14 4E 85 F1 | 	sub	fp, #20
0dd2c     A7 20 02 FB | 	rdlong	local02, fp
0dd30     01 20 06 F1 | 	add	local02, #1
0dd34     A7 20 62 FC | 	wrlong	local02, fp
0dd38     14 4E 85 F1 | 	sub	fp, #20
0dd3c     6C FF 9F FD | 	jmp	#LR__1114
0dd40                 | LR__1115
0dd40                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0dd40     A7 22 02 FB | 	rdlong	local03, fp
0dd44     14 4E 05 F1 | 	add	fp, #20
0dd48     A7 22 62 FC | 	wrlong	local03, fp
0dd4c     14 4E 85 F1 | 	sub	fp, #20
0dd50     A7 2C 02 FB | 	rdlong	local08, fp
0dd54     04 4E 05 F1 | 	add	fp, #4
0dd58     A7 22 02 FB | 	rdlong	local03, fp
0dd5c     04 4E 85 F1 | 	sub	fp, #4
0dd60     11 2D 02 F1 | 	add	local08, local03
0dd64                 | LR__1116
0dd64     14 4E 05 F1 | 	add	fp, #20
0dd68     A7 22 02 FB | 	rdlong	local03, fp
0dd6c     14 4E 85 F1 | 	sub	fp, #20
0dd70     16 23 52 F2 | 	cmps	local03, local08 wc
0dd74     A8 00 90 3D |  if_ae	jmp	#LR__1117
0dd78     20 4E 05 F1 | 	add	fp, #32
0dd7c     A7 2A 02 FB | 	rdlong	local07, fp
0dd80     09 2A 66 F0 | 	shl	local07, #9
0dd84     0C 00 00 FF 
0dd88     D8 E4 05 F1 | 	add	objptr, ##6360
0dd8c     F2 2A 02 F1 | 	add	local07, objptr
0dd90     0C 4E 85 F1 | 	sub	fp, #12
0dd94     A7 28 02 FB | 	rdlong	local06, fp
0dd98     01 28 66 F0 | 	shl	local06, #1
0dd9c     15 29 02 F1 | 	add	local06, local07
0dda0     14 4E 05 F1 | 	add	fp, #20
0dda4     A7 12 02 FB | 	rdlong	arg01, fp
0dda8     28 4E 85 F1 | 	sub	fp, #40
0ddac     0C 00 00 FF 
0ddb0     D8 E4 85 F1 | 	sub	objptr, ##6360
0ddb4     01 14 06 F6 | 	mov	arg02, #1
0ddb8     E8 5B B1 FD | 	call	#__system___float_tointeger
0ddbc     14 FB 51 FC | 	wrword	result1, local06
0ddc0     28 4E 05 F1 | 	add	fp, #40
0ddc4     A7 12 02 FB | 	rdlong	arg01, fp
0ddc8     04 4E 05 F1 | 	add	fp, #4
0ddcc     A7 14 02 FB | 	rdlong	arg02, fp
0ddd0     2C 4E 85 F1 | 	sub	fp, #44
0ddd4     1F 14 E6 F4 | 	bitnot	arg02, #31
0ddd8     30 53 B1 FD | 	call	#__system___float_add
0dddc     28 4E 05 F1 | 	add	fp, #40
0dde0     A7 FA 61 FC | 	wrlong	result1, fp
0dde4     28 4E 85 F1 | 	sub	fp, #40
0dde8     FD 12 02 F6 | 	mov	arg01, result1
0ddec     00 14 06 F6 | 	mov	arg02, #0
0ddf0     01 16 06 F6 | 	mov	arg03, #1
0ddf4     18 5B B1 FD | 	call	#__system___float_cmp
0ddf8     00 FA 55 F2 | 	cmps	result1, #0 wc
0ddfc     28 4E 05 C1 |  if_b	add	fp, #40
0de00     A7 00 68 CC |  if_b	wrlong	#0, fp
0de04     28 4E 85 C1 |  if_b	sub	fp, #40
0de08     14 4E 05 F1 | 	add	fp, #20
0de0c     A7 20 02 FB | 	rdlong	local02, fp
0de10     01 20 06 F1 | 	add	local02, #1
0de14     A7 20 62 FC | 	wrlong	local02, fp
0de18     14 4E 85 F1 | 	sub	fp, #20
0de1c     44 FF 9F FD | 	jmp	#LR__1116
0de20                 | LR__1117
0de20                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0de20     A7 22 02 FB | 	rdlong	local03, fp
0de24     04 4E 05 F1 | 	add	fp, #4
0de28     A7 2C 02 FB | 	rdlong	local08, fp
0de2c     16 23 02 F1 | 	add	local03, local08
0de30     10 4E 05 F1 | 	add	fp, #16
0de34     A7 22 62 FC | 	wrlong	local03, fp
0de38     14 4E 85 F1 | 	sub	fp, #20
0de3c                 | LR__1118
0de3c     14 4E 05 F1 | 	add	fp, #20
0de40     A7 26 02 FB | 	rdlong	local05, fp
0de44     14 4E 85 F1 | 	sub	fp, #20
0de48     00 27 56 F2 | 	cmps	local05, #256 wc
0de4c     A8 00 90 3D |  if_ae	jmp	#LR__1119
0de50     20 4E 05 F1 | 	add	fp, #32
0de54     A7 2C 02 FB | 	rdlong	local08, fp
0de58     09 2C 66 F0 | 	shl	local08, #9
0de5c     0C 00 00 FF 
0de60     D8 E4 05 F1 | 	add	objptr, ##6360
0de64     F2 2C 02 F1 | 	add	local08, objptr
0de68     0C 4E 85 F1 | 	sub	fp, #12
0de6c     A7 2A 02 FB | 	rdlong	local07, fp
0de70     01 2A 66 F0 | 	shl	local07, #1
0de74     16 2B 02 F1 | 	add	local07, local08
0de78     14 4E 05 F1 | 	add	fp, #20
0de7c     A7 12 02 FB | 	rdlong	arg01, fp
0de80     28 4E 85 F1 | 	sub	fp, #40
0de84     0C 00 00 FF 
0de88     D8 E4 85 F1 | 	sub	objptr, ##6360
0de8c     01 14 06 F6 | 	mov	arg02, #1
0de90     10 5B B1 FD | 	call	#__system___float_tointeger
0de94     15 FB 51 FC | 	wrword	result1, local07
0de98     28 4E 05 F1 | 	add	fp, #40
0de9c     A7 12 02 FB | 	rdlong	arg01, fp
0dea0     30 4E 05 F1 | 	add	fp, #48
0dea4     A7 14 02 FB | 	rdlong	arg02, fp
0dea8     58 4E 85 F1 | 	sub	fp, #88
0deac     1F 14 E6 F4 | 	bitnot	arg02, #31
0deb0     58 52 B1 FD | 	call	#__system___float_add
0deb4     28 4E 05 F1 | 	add	fp, #40
0deb8     A7 FA 61 FC | 	wrlong	result1, fp
0debc     28 4E 85 F1 | 	sub	fp, #40
0dec0     FD 12 02 F6 | 	mov	arg01, result1
0dec4     00 14 06 F6 | 	mov	arg02, #0
0dec8     01 16 06 F6 | 	mov	arg03, #1
0decc     40 5A B1 FD | 	call	#__system___float_cmp
0ded0     00 FA 55 F2 | 	cmps	result1, #0 wc
0ded4     28 4E 05 C1 |  if_b	add	fp, #40
0ded8     A7 00 68 CC |  if_b	wrlong	#0, fp
0dedc     28 4E 85 C1 |  if_b	sub	fp, #40
0dee0     14 4E 05 F1 | 	add	fp, #20
0dee4     A7 2C 02 FB | 	rdlong	local08, fp
0dee8     01 2C 06 F1 | 	add	local08, #1
0deec     A7 2C 62 FC | 	wrlong	local08, fp
0def0     14 4E 85 F1 | 	sub	fp, #20
0def4     44 FF 9F FD | 	jmp	#LR__1118
0def8                 | LR__1119
0def8     20 4E 05 F1 | 	add	fp, #32
0defc     A7 26 02 FB | 	rdlong	local05, fp
0df00     20 4E 85 F1 | 	sub	fp, #32
0df04     09 26 66 F0 | 	shl	local05, #9
0df08     0C 00 00 FF 
0df0c     D8 E4 05 F1 | 	add	objptr, ##6360
0df10     F2 26 02 F1 | 	add	local05, objptr
0df14     FE 27 06 F1 | 	add	local05, #510
0df18     13 01 58 FC | 	wrword	#0, local05
0df1c     0C 00 00 FF 
0df20     D8 E4 85 F1 | 	sub	objptr, ##6360
0df24                 | LR__1120
0df24     20 4E 05 F1 | 	add	fp, #32
0df28     A7 26 02 FB | 	rdlong	local05, fp
0df2c     20 4E 85 F1 | 	sub	fp, #32
0df30     09 26 66 F0 | 	shl	local05, #9
0df34     0C 00 00 FF 
0df38     D8 E4 05 F1 | 	add	objptr, ##6360
0df3c     F2 26 02 F1 | 	add	local05, objptr
0df40     FE 27 06 F1 | 	add	local05, #510
0df44     13 01 58 FC | 	wrword	#0, local05
0df48     0C 00 00 FF 
0df4c     D8 E4 85 F1 | 	sub	objptr, ##6360
0df50                 | LR__1121
0df50     A7 F0 03 F6 | 	mov	ptra, fp
0df54     B2 00 A0 FD | 	call	#popregs_
0df58                 | _do_defenv_ret
0df58     2D 00 64 FD | 	ret
0df5c                 | 
0df5c                 | ' 
0df5c                 | ' 
0df5c                 | ' sub do_play
0df5c                 | _do_play
0df5c     06 4A 05 F6 | 	mov	COUNT_, #6
0df60     A8 00 A0 FD | 	call	#pushregs_
0df64     7C F0 07 F1 | 	add	ptra, #124
0df68     68 4E 05 F1 | 	add	fp, #104
0df6c     AB CB A1 FF 
0df70     A7 D6 6B FC | 	wrlong	##1133991915, fp
0df74                 | ' speed_coeff=815.6614449376854599406528189911*(95.0/256.0)
0df74                 | ' 
0df74                 | ' for i=0 to 8 : params(i)=-2.0 : next i
0df74     64 4E 85 F1 | 	sub	fp, #100
0df78     A7 00 68 FC | 	wrlong	#0, fp
0df7c     97 18 48 FB | 	callpa	#(@LR__1131-@LR__1130)>>2,fcache_load_ptr_
0df80                 | LR__1130
0df80     A7 16 02 FB | 	rdlong	arg03, fp
0df84     02 16 66 F0 | 	shl	arg03, #2
0df88     34 4E 05 F1 | 	add	fp, #52
0df8c     A7 16 02 F1 | 	add	arg03, fp
0df90     00 00 E0 FF 
0df94     0B 01 68 FC | 	wrlong	##-1073741824, arg03
0df98     34 4E 85 F1 | 	sub	fp, #52
0df9c     A7 1E 02 FB | 	rdlong	local01, fp
0dfa0     01 1E 06 F1 | 	add	local01, #1
0dfa4     A7 1E 62 FC | 	wrlong	local01, fp
0dfa8     09 1E 56 F2 | 	cmps	local01, #9 wc
0dfac     D0 FF 9F CD |  if_b	jmp	#LR__1130
0dfb0                 | LR__1131
0dfb0     04 4E 85 F1 | 	sub	fp, #4
0dfb4     4A 00 00 FF 
0dfb8     80 E4 05 F1 | 	add	objptr, ##38016
0dfbc     F2 20 02 FB | 	rdlong	local02, objptr
0dfc0     10 23 02 F6 | 	mov	local03, local02
0dfc4     01 22 66 F0 | 	shl	local03, #1
0dfc8     10 23 02 F1 | 	add	local03, local02
0dfcc     02 22 66 F0 | 	shl	local03, #2
0dfd0     03 00 00 FF 
0dfd4     04 E4 85 F1 | 	sub	objptr, ##1540
0dfd8     F2 22 02 F1 | 	add	local03, objptr
0dfdc     11 25 02 FB | 	rdlong	local04, local03
0dfe0     A7 24 62 FC | 	wrlong	local04, fp
0dfe4                 | ' 'params(0)=0: params(1)=440.0 : params(2)=16.0 : params(3)=0.0 : params(4)=0.0 : params(5)=1.0 : params(6)=0.0 : params(7)=0.0 : 
0dfe4                 | ' 'chn		freq		   vol		   wave#	   env#		   len		   delay	   pan		: sus 
0dfe4                 | ' numpar=compiledline(lineptr_e).result.uresult
0dfe4                 | ' for i=numpar to 1 step -1 
0dfe4     04 4E 05 F1 | 	add	fp, #4
0dfe8     A7 24 62 FC | 	wrlong	local04, fp
0dfec     04 4E 85 F1 | 	sub	fp, #4
0dff0     47 00 00 FF 
0dff4     7C E4 85 F1 | 	sub	objptr, ##36476
0dff8                 | LR__1132
0dff8     9C DB BF FD | 	call	#_pop
0dffc     5C 4E 05 F1 | 	add	fp, #92
0e000     A7 FA 61 FC | 	wrlong	result1, fp
0e004     04 4E 05 F1 | 	add	fp, #4
0e008     A7 FC 61 FC | 	wrlong	result2, fp
0e00c     04 4E 05 F1 | 	add	fp, #4
0e010     A7 FE 61 FC | 	wrlong	result3, fp
0e014     60 4E 85 F1 | 	sub	fp, #96
0e018     A7 22 02 FB | 	rdlong	local03, fp
0e01c     01 22 86 F1 | 	sub	local03, #1
0e020     02 22 66 F0 | 	shl	local03, #2
0e024     34 4E 05 F1 | 	add	fp, #52
0e028     A7 22 02 F1 | 	add	local03, fp
0e02c     24 4E 05 F1 | 	add	fp, #36
0e030     A7 26 02 F6 | 	mov	local05, fp
0e034     13 13 02 F6 | 	mov	arg01, local05
0e038     5C 4E 85 F1 | 	sub	fp, #92
0e03c     E4 7C B0 FD | 	call	#_converttofloat
0e040     11 FB 61 FC | 	wrlong	result1, local03
0e044     04 4E 05 F1 | 	add	fp, #4
0e048     A7 1E 02 FB | 	rdlong	local01, fp
0e04c     01 1E 86 F1 | 	sub	local01, #1
0e050     A7 1E 62 FC | 	wrlong	local01, fp
0e054     04 4E 85 F1 | 	sub	fp, #4
0e058     01 1E 56 F2 | 	cmps	local01, #1 wc
0e05c     98 FF 9F 3D |  if_ae	jmp	#LR__1132
0e060                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
0e060     38 4E 05 F1 | 	add	fp, #56
0e064     A7 12 02 FB | 	rdlong	arg01, fp
0e068     38 4E 85 F1 | 	sub	fp, #56
0e06c     00 14 06 F6 | 	mov	arg02, #0
0e070     01 16 06 F6 | 	mov	arg03, #1
0e074     98 58 B1 FD | 	call	#__system___float_cmp
0e078     00 FA 55 F2 | 	cmps	result1, #0 wc
0e07c     0C 4E 05 C1 |  if_b	add	fp, #12
0e080     A7 00 68 CC |  if_b	wrlong	#0, fp
0e084     0C 4E 85 C1 |  if_b	sub	fp, #12
0e088     2C 00 90 CD |  if_b	jmp	#LR__1133
0e08c     38 4E 05 F1 | 	add	fp, #56
0e090     A7 12 02 FB | 	rdlong	arg01, fp
0e094     38 4E 85 F1 | 	sub	fp, #56
0e098     01 14 06 F6 | 	mov	arg02, #1
0e09c     04 59 B1 FD | 	call	#__system___float_tointeger
0e0a0     FD 1E 52 F6 | 	abs	local01, result1 wc
0e0a4     07 1E 06 F5 | 	and	local01, #7
0e0a8     0F 1F 82 F6 | 	negc	local01, local01
0e0ac     0C 4E 05 F1 | 	add	fp, #12
0e0b0     A7 1E 62 FC | 	wrlong	local01, fp
0e0b4     0C 4E 85 F1 | 	sub	fp, #12
0e0b8                 | LR__1133
0e0b8                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
0e0b8     3C 4E 05 F1 | 	add	fp, #60
0e0bc     A7 12 02 FB | 	rdlong	arg01, fp
0e0c0     3C 4E 85 F1 | 	sub	fp, #60
0e0c4     00 14 06 F6 | 	mov	arg02, #0
0e0c8     01 16 06 F6 | 	mov	arg03, #1
0e0cc     40 58 B1 FD | 	call	#__system___float_cmp
0e0d0     00 FA 55 F2 | 	cmps	result1, #0 wc
0e0d4     40 00 90 3D |  if_ae	jmp	#LR__1134
0e0d8     0C 4E 05 F1 | 	add	fp, #12
0e0dc     A7 20 02 FB | 	rdlong	local02, fp
0e0e0     10 23 02 F6 | 	mov	local03, local02
0e0e4     01 22 66 F0 | 	shl	local03, #1
0e0e8     10 23 02 F1 | 	add	local03, local02
0e0ec     03 22 66 F0 | 	shl	local03, #3
0e0f0     14 00 00 FF 
0e0f4     38 E5 05 F1 | 	add	objptr, ##10552
0e0f8     F2 22 02 F1 | 	add	local03, objptr
0e0fc     11 23 02 FB | 	rdlong	local03, local03
0e100     60 4E 05 F1 | 	add	fp, #96
0e104     A7 22 62 FC | 	wrlong	local03, fp
0e108     6C 4E 85 F1 | 	sub	fp, #108
0e10c     14 00 00 FF 
0e110     38 E5 85 F1 | 	sub	objptr, ##10552
0e114     44 00 90 FD | 	jmp	#LR__1135
0e118                 | LR__1134
0e118     3C 4E 05 F1 | 	add	fp, #60
0e11c     A7 24 02 FB | 	rdlong	local04, fp
0e120     30 4E 05 F1 | 	add	fp, #48
0e124     A7 24 62 FC | 	wrlong	local04, fp
0e128     60 4E 85 F1 | 	sub	fp, #96
0e12c     A7 20 02 FB | 	rdlong	local02, fp
0e130     10 23 02 F6 | 	mov	local03, local02
0e134     01 22 66 F0 | 	shl	local03, #1
0e138     10 23 02 F1 | 	add	local03, local02
0e13c     03 22 66 F0 | 	shl	local03, #3
0e140     14 00 00 FF 
0e144     38 E5 05 F1 | 	add	objptr, ##10552
0e148     F2 22 02 F1 | 	add	local03, objptr
0e14c     0C 4E 85 F1 | 	sub	fp, #12
0e150     11 25 62 FC | 	wrlong	local04, local03
0e154     14 00 00 FF 
0e158     38 E5 85 F1 | 	sub	objptr, ##10552
0e15c                 | LR__1135
0e15c                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
0e15c     44 4E 05 F1 | 	add	fp, #68
0e160     A7 12 02 FB | 	rdlong	arg01, fp
0e164     44 4E 85 F1 | 	sub	fp, #68
0e168     00 14 06 F6 | 	mov	arg02, #0
0e16c     01 16 06 F6 | 	mov	arg03, #1
0e170     9C 57 B1 FD | 	call	#__system___float_cmp
0e174     00 FA 55 F2 | 	cmps	result1, #0 wc
0e178     24 00 90 CD |  if_b	jmp	#LR__1136
0e17c     44 4E 05 F1 | 	add	fp, #68
0e180     A7 12 02 FB | 	rdlong	arg01, fp
0e184     44 4E 85 F1 | 	sub	fp, #68
0e188     89 C1 20 FF 
0e18c     6F 14 06 F6 | 	mov	arg02, ##1099108975
0e190     01 16 66 F6 | 	neg	arg03, #1
0e194     78 57 B1 FD | 	call	#__system___float_cmp
0e198     01 FA 55 F2 | 	cmps	result1, #1 wc
0e19c     44 00 90 CD |  if_b	jmp	#LR__1137
0e1a0                 | LR__1136
0e1a0     0C 4E 05 F1 | 	add	fp, #12
0e1a4     A7 20 02 FB | 	rdlong	local02, fp
0e1a8     10 23 02 F6 | 	mov	local03, local02
0e1ac     01 22 66 F0 | 	shl	local03, #1
0e1b0     10 23 02 F1 | 	add	local03, local02
0e1b4     03 22 66 F0 | 	shl	local03, #3
0e1b8     14 00 00 FF 
0e1bc     38 E5 05 F1 | 	add	objptr, ##10552
0e1c0     F2 22 02 F1 | 	add	local03, objptr
0e1c4     0C 22 06 F1 | 	add	local03, #12
0e1c8     11 23 02 FB | 	rdlong	local03, local03
0e1cc     68 4E 05 F1 | 	add	fp, #104
0e1d0     A7 22 62 FC | 	wrlong	local03, fp
0e1d4     74 4E 85 F1 | 	sub	fp, #116
0e1d8     14 00 00 FF 
0e1dc     38 E5 85 F1 | 	sub	objptr, ##10552
0e1e0     48 00 90 FD | 	jmp	#LR__1138
0e1e4                 | LR__1137
0e1e4     44 4E 05 F1 | 	add	fp, #68
0e1e8     A7 24 02 FB | 	rdlong	local04, fp
0e1ec     30 4E 05 F1 | 	add	fp, #48
0e1f0     A7 24 62 FC | 	wrlong	local04, fp
0e1f4     68 4E 85 F1 | 	sub	fp, #104
0e1f8     A7 20 02 FB | 	rdlong	local02, fp
0e1fc     10 23 02 F6 | 	mov	local03, local02
0e200     01 22 66 F0 | 	shl	local03, #1
0e204     10 23 02 F1 | 	add	local03, local02
0e208     03 22 66 F0 | 	shl	local03, #3
0e20c     14 00 00 FF 
0e210     38 E5 05 F1 | 	add	objptr, ##10552
0e214     F2 22 02 F1 | 	add	local03, objptr
0e218     0C 4E 85 F1 | 	sub	fp, #12
0e21c     0C 22 06 F1 | 	add	local03, #12
0e220     11 25 62 FC | 	wrlong	local04, local03
0e224     14 00 00 FF 
0e228     38 E5 85 F1 | 	sub	objptr, ##10552
0e22c                 | LR__1138
0e22c                 | ' if params(4)<0 orelse params(4)>8.0 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
0e22c     48 4E 05 F1 | 	add	fp, #72
0e230     A7 12 02 FB | 	rdlong	arg01, fp
0e234     48 4E 85 F1 | 	sub	fp, #72
0e238     00 14 06 F6 | 	mov	arg02, #0
0e23c     01 16 06 F6 | 	mov	arg03, #1
0e240     CC 56 B1 FD | 	call	#__system___float_cmp
0e244     00 FA 55 F2 | 	cmps	result1, #0 wc
0e248     24 00 90 CD |  if_b	jmp	#LR__1139
0e24c     48 4E 05 F1 | 	add	fp, #72
0e250     A7 12 02 FB | 	rdlong	arg01, fp
0e254     48 4E 85 F1 | 	sub	fp, #72
0e258     00 80 20 FF 
0e25c     00 14 06 F6 | 	mov	arg02, ##1090519040
0e260     01 16 66 F6 | 	neg	arg03, #1
0e264     A8 56 B1 FD | 	call	#__system___float_cmp
0e268     01 FA 55 F2 | 	cmps	result1, #1 wc
0e26c     48 00 90 CD |  if_b	jmp	#LR__1140
0e270                 | LR__1139
0e270     0C 4E 05 F1 | 	add	fp, #12
0e274     A7 22 02 FB | 	rdlong	local03, fp
0e278     11 27 02 F6 | 	mov	local05, local03
0e27c     01 26 66 F0 | 	shl	local05, #1
0e280     11 27 02 F1 | 	add	local05, local03
0e284     03 26 66 F0 | 	shl	local05, #3
0e288     14 00 00 FF 
0e28c     38 E5 05 F1 | 	add	objptr, ##10552
0e290     F2 26 02 F1 | 	add	local05, objptr
0e294     04 26 06 F1 | 	add	local05, #4
0e298     13 27 C2 FA | 	rdbyte	local05, local05
0e29c     13 25 E2 F8 | 	getbyte	local04, local05, #0
0e2a0     14 4E 05 F1 | 	add	fp, #20
0e2a4     A7 24 62 FC | 	wrlong	local04, fp
0e2a8     20 4E 85 F1 | 	sub	fp, #32
0e2ac     14 00 00 FF 
0e2b0     38 E5 85 F1 | 	sub	objptr, ##10552
0e2b4     54 00 90 FD | 	jmp	#LR__1141
0e2b8                 | LR__1140
0e2b8     48 4E 05 F1 | 	add	fp, #72
0e2bc     A7 12 02 FB | 	rdlong	arg01, fp
0e2c0     48 4E 85 F1 | 	sub	fp, #72
0e2c4     01 14 06 F6 | 	mov	arg02, #1
0e2c8     D8 56 B1 FD | 	call	#__system___float_tointeger
0e2cc     20 4E 05 F1 | 	add	fp, #32
0e2d0     A7 FA 61 FC | 	wrlong	result1, fp
0e2d4     14 4E 85 F1 | 	sub	fp, #20
0e2d8     A7 20 02 FB | 	rdlong	local02, fp
0e2dc     10 23 02 F6 | 	mov	local03, local02
0e2e0     01 22 66 F0 | 	shl	local03, #1
0e2e4     10 23 02 F1 | 	add	local03, local02
0e2e8     03 22 66 F0 | 	shl	local03, #3
0e2ec     14 00 00 FF 
0e2f0     38 E5 05 F1 | 	add	objptr, ##10552
0e2f4     F2 22 02 F1 | 	add	local03, objptr
0e2f8     0C 4E 85 F1 | 	sub	fp, #12
0e2fc     04 22 06 F1 | 	add	local03, #4
0e300     11 FB 41 FC | 	wrbyte	result1, local03
0e304     14 00 00 FF 
0e308     38 E5 85 F1 | 	sub	objptr, ##10552
0e30c                 | LR__1141
0e30c                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
0e30c     4C 4E 05 F1 | 	add	fp, #76
0e310     A7 12 02 FB | 	rdlong	arg01, fp
0e314     4C 4E 85 F1 | 	sub	fp, #76
0e318     00 14 06 F6 | 	mov	arg02, #0
0e31c     01 16 06 F6 | 	mov	arg03, #1
0e320     EC 55 B1 FD | 	call	#__system___float_cmp
0e324     00 FA 55 F2 | 	cmps	result1, #0 wc
0e328     24 00 90 CD |  if_b	jmp	#LR__1142
0e32c     4C 4E 05 F1 | 	add	fp, #76
0e330     A7 12 02 FB | 	rdlong	arg01, fp
0e334     4C 4E 85 F1 | 	sub	fp, #76
0e338     00 80 20 FF 
0e33c     00 14 06 F6 | 	mov	arg02, ##1090519040
0e340     01 16 66 F6 | 	neg	arg03, #1
0e344     C8 55 B1 FD | 	call	#__system___float_cmp
0e348     01 FA 55 F2 | 	cmps	result1, #1 wc
0e34c     48 00 90 CD |  if_b	jmp	#LR__1143
0e350                 | LR__1142
0e350     0C 4E 05 F1 | 	add	fp, #12
0e354     A7 22 02 FB | 	rdlong	local03, fp
0e358     11 27 02 F6 | 	mov	local05, local03
0e35c     01 26 66 F0 | 	shl	local05, #1
0e360     11 27 02 F1 | 	add	local05, local03
0e364     03 26 66 F0 | 	shl	local05, #3
0e368     14 00 00 FF 
0e36c     38 E5 05 F1 | 	add	objptr, ##10552
0e370     F2 26 02 F1 | 	add	local05, objptr
0e374     05 26 06 F1 | 	add	local05, #5
0e378     13 27 C2 FA | 	rdbyte	local05, local05
0e37c     13 25 E2 F8 | 	getbyte	local04, local05, #0
0e380     18 4E 05 F1 | 	add	fp, #24
0e384     A7 24 62 FC | 	wrlong	local04, fp
0e388     24 4E 85 F1 | 	sub	fp, #36
0e38c     14 00 00 FF 
0e390     38 E5 85 F1 | 	sub	objptr, ##10552
0e394     54 00 90 FD | 	jmp	#LR__1144
0e398                 | LR__1143
0e398     4C 4E 05 F1 | 	add	fp, #76
0e39c     A7 12 02 FB | 	rdlong	arg01, fp
0e3a0     4C 4E 85 F1 | 	sub	fp, #76
0e3a4     01 14 06 F6 | 	mov	arg02, #1
0e3a8     F8 55 B1 FD | 	call	#__system___float_tointeger
0e3ac     24 4E 05 F1 | 	add	fp, #36
0e3b0     A7 FA 61 FC | 	wrlong	result1, fp
0e3b4     18 4E 85 F1 | 	sub	fp, #24
0e3b8     A7 20 02 FB | 	rdlong	local02, fp
0e3bc     10 23 02 F6 | 	mov	local03, local02
0e3c0     01 22 66 F0 | 	shl	local03, #1
0e3c4     10 23 02 F1 | 	add	local03, local02
0e3c8     03 22 66 F0 | 	shl	local03, #3
0e3cc     14 00 00 FF 
0e3d0     38 E5 05 F1 | 	add	objptr, ##10552
0e3d4     F2 22 02 F1 | 	add	local03, objptr
0e3d8     0C 4E 85 F1 | 	sub	fp, #12
0e3dc     05 22 06 F1 | 	add	local03, #5
0e3e0     11 FB 41 FC | 	wrbyte	result1, local03
0e3e4     14 00 00 FF 
0e3e8     38 E5 85 F1 | 	sub	objptr, ##10552
0e3ec                 | LR__1144
0e3ec                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
0e3ec     50 4E 05 F1 | 	add	fp, #80
0e3f0     A7 12 02 FB | 	rdlong	arg01, fp
0e3f4     50 4E 85 F1 | 	sub	fp, #80
0e3f8     00 14 06 F6 | 	mov	arg02, #0
0e3fc     01 16 06 F6 | 	mov	arg03, #1
0e400     0C 55 B1 FD | 	call	#__system___float_cmp
0e404     00 FA 55 F2 | 	cmps	result1, #0 wc
0e408     24 00 90 CD |  if_b	jmp	#LR__1145
0e40c     50 4E 05 F1 | 	add	fp, #80
0e410     A7 12 02 FB | 	rdlong	arg01, fp
0e414     50 4E 85 F1 | 	sub	fp, #80
0e418     00 3D 22 FF 
0e41c     00 14 06 F6 | 	mov	arg02, ##1148846080
0e420     01 16 66 F6 | 	neg	arg03, #1
0e424     E8 54 B1 FD | 	call	#__system___float_cmp
0e428     01 FA 55 F2 | 	cmps	result1, #1 wc
0e42c     44 00 90 CD |  if_b	jmp	#LR__1146
0e430                 | LR__1145
0e430     0C 4E 05 F1 | 	add	fp, #12
0e434     A7 20 02 FB | 	rdlong	local02, fp
0e438     10 23 02 F6 | 	mov	local03, local02
0e43c     01 22 66 F0 | 	shl	local03, #1
0e440     10 23 02 F1 | 	add	local03, local02
0e444     03 22 66 F0 | 	shl	local03, #3
0e448     14 00 00 FF 
0e44c     38 E5 05 F1 | 	add	objptr, ##10552
0e450     F2 22 02 F1 | 	add	local03, objptr
0e454     08 22 06 F1 | 	add	local03, #8
0e458     11 25 02 FB | 	rdlong	local04, local03
0e45c     6C 4E 05 F1 | 	add	fp, #108
0e460     A7 24 62 FC | 	wrlong	local04, fp
0e464     78 4E 85 F1 | 	sub	fp, #120
0e468     14 00 00 FF 
0e46c     38 E5 85 F1 | 	sub	objptr, ##10552
0e470     48 00 90 FD | 	jmp	#LR__1147
0e474                 | LR__1146
0e474     50 4E 05 F1 | 	add	fp, #80
0e478     A7 24 02 FB | 	rdlong	local04, fp
0e47c     28 4E 05 F1 | 	add	fp, #40
0e480     A7 24 62 FC | 	wrlong	local04, fp
0e484     6C 4E 85 F1 | 	sub	fp, #108
0e488     A7 20 02 FB | 	rdlong	local02, fp
0e48c     10 23 02 F6 | 	mov	local03, local02
0e490     01 22 66 F0 | 	shl	local03, #1
0e494     10 23 02 F1 | 	add	local03, local02
0e498     03 22 66 F0 | 	shl	local03, #3
0e49c     14 00 00 FF 
0e4a0     38 E5 05 F1 | 	add	objptr, ##10552
0e4a4     F2 22 02 F1 | 	add	local03, objptr
0e4a8     0C 4E 85 F1 | 	sub	fp, #12
0e4ac     08 22 06 F1 | 	add	local03, #8
0e4b0     11 25 62 FC | 	wrlong	local04, local03
0e4b4     14 00 00 FF 
0e4b8     38 E5 85 F1 | 	sub	objptr, ##10552
0e4bc                 | LR__1147
0e4bc                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
0e4bc     40 4E 05 F1 | 	add	fp, #64
0e4c0     A7 12 02 FB | 	rdlong	arg01, fp
0e4c4     40 4E 85 F1 | 	sub	fp, #64
0e4c8     00 14 06 F6 | 	mov	arg02, #0
0e4cc     01 16 06 F6 | 	mov	arg03, #1
0e4d0     3C 54 B1 FD | 	call	#__system___float_cmp
0e4d4     00 FA 55 F2 | 	cmps	result1, #0 wc
0e4d8     24 00 90 CD |  if_b	jmp	#LR__1148
0e4dc     40 4E 05 F1 | 	add	fp, #64
0e4e0     A7 12 02 FB | 	rdlong	arg01, fp
0e4e4     40 4E 85 F1 | 	sub	fp, #64
0e4e8     20 0E 23 FF 
0e4ec     00 14 06 F6 | 	mov	arg02, ##1176256512
0e4f0     01 16 66 F6 | 	neg	arg03, #1
0e4f4     18 54 B1 FD | 	call	#__system___float_cmp
0e4f8     01 FA 55 F2 | 	cmps	result1, #1 wc
0e4fc     44 00 90 CD |  if_b	jmp	#LR__1149
0e500                 | LR__1148
0e500     0C 4E 05 F1 | 	add	fp, #12
0e504     A7 22 02 FB | 	rdlong	local03, fp
0e508     11 25 02 F6 | 	mov	local04, local03
0e50c     01 24 66 F0 | 	shl	local04, #1
0e510     11 25 02 F1 | 	add	local04, local03
0e514     03 24 66 F0 | 	shl	local04, #3
0e518     14 00 00 FF 
0e51c     38 E5 05 F1 | 	add	objptr, ##10552
0e520     F2 24 02 F1 | 	add	local04, objptr
0e524     06 24 06 F1 | 	add	local04, #6
0e528     12 25 E2 FA | 	rdword	local04, local04
0e52c     1C 4E 05 F1 | 	add	fp, #28
0e530     A7 24 62 FC | 	wrlong	local04, fp
0e534     28 4E 85 F1 | 	sub	fp, #40
0e538     14 00 00 FF 
0e53c     38 E5 85 F1 | 	sub	objptr, ##10552
0e540     54 00 90 FD | 	jmp	#LR__1150
0e544                 | LR__1149
0e544     40 4E 05 F1 | 	add	fp, #64
0e548     A7 12 02 FB | 	rdlong	arg01, fp
0e54c     40 4E 85 F1 | 	sub	fp, #64
0e550     01 14 06 F6 | 	mov	arg02, #1
0e554     4C 54 B1 FD | 	call	#__system___float_tointeger
0e558     28 4E 05 F1 | 	add	fp, #40
0e55c     A7 FA 61 FC | 	wrlong	result1, fp
0e560     1C 4E 85 F1 | 	sub	fp, #28
0e564     A7 20 02 FB | 	rdlong	local02, fp
0e568     10 23 02 F6 | 	mov	local03, local02
0e56c     01 22 66 F0 | 	shl	local03, #1
0e570     10 23 02 F1 | 	add	local03, local02
0e574     03 22 66 F0 | 	shl	local03, #3
0e578     14 00 00 FF 
0e57c     38 E5 05 F1 | 	add	objptr, ##10552
0e580     F2 22 02 F1 | 	add	local03, objptr
0e584     0C 4E 85 F1 | 	sub	fp, #12
0e588     06 22 06 F1 | 	add	local03, #6
0e58c     11 FB 51 FC | 	wrword	result1, local03
0e590     14 00 00 FF 
0e594     38 E5 85 F1 | 	sub	objptr, ##10552
0e598                 | LR__1150
0e598                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
0e598     54 4E 05 F1 | 	add	fp, #84
0e59c     A7 12 02 FB | 	rdlong	arg01, fp
0e5a0     54 4E 85 F1 | 	sub	fp, #84
0e5a4     00 C0 5F FF 
0e5a8     00 14 06 F6 | 	mov	arg02, ##-1082130432
0e5ac     01 16 06 F6 | 	mov	arg03, #1
0e5b0     5C 53 B1 FD | 	call	#__system___float_cmp
0e5b4     00 FA 55 F2 | 	cmps	result1, #0 wc
0e5b8     24 00 90 CD |  if_b	jmp	#LR__1151
0e5bc     54 4E 05 F1 | 	add	fp, #84
0e5c0     A7 12 02 FB | 	rdlong	arg01, fp
0e5c4     54 4E 85 F1 | 	sub	fp, #84
0e5c8     00 C0 1F FF 
0e5cc     00 14 06 F6 | 	mov	arg02, ##1065353216
0e5d0     01 16 66 F6 | 	neg	arg03, #1
0e5d4     38 53 B1 FD | 	call	#__system___float_cmp
0e5d8     01 FA 55 F2 | 	cmps	result1, #1 wc
0e5dc     44 00 90 CD |  if_b	jmp	#LR__1152
0e5e0                 | LR__1151
0e5e0     0C 4E 05 F1 | 	add	fp, #12
0e5e4     A7 20 02 FB | 	rdlong	local02, fp
0e5e8     10 23 02 F6 | 	mov	local03, local02
0e5ec     01 22 66 F0 | 	shl	local03, #1
0e5f0     10 23 02 F1 | 	add	local03, local02
0e5f4     03 22 66 F0 | 	shl	local03, #3
0e5f8     14 00 00 FF 
0e5fc     38 E5 05 F1 | 	add	objptr, ##10552
0e600     F2 22 02 F1 | 	add	local03, objptr
0e604     10 22 06 F1 | 	add	local03, #16
0e608     11 25 02 FB | 	rdlong	local04, local03
0e60c     64 4E 05 F1 | 	add	fp, #100
0e610     A7 24 62 FC | 	wrlong	local04, fp
0e614     70 4E 85 F1 | 	sub	fp, #112
0e618     14 00 00 FF 
0e61c     38 E5 85 F1 | 	sub	objptr, ##10552
0e620     48 00 90 FD | 	jmp	#LR__1153
0e624                 | LR__1152
0e624     54 4E 05 F1 | 	add	fp, #84
0e628     A7 26 02 FB | 	rdlong	local05, fp
0e62c     1C 4E 05 F1 | 	add	fp, #28
0e630     A7 26 62 FC | 	wrlong	local05, fp
0e634     64 4E 85 F1 | 	sub	fp, #100
0e638     A7 20 02 FB | 	rdlong	local02, fp
0e63c     10 23 02 F6 | 	mov	local03, local02
0e640     01 22 66 F0 | 	shl	local03, #1
0e644     10 23 02 F1 | 	add	local03, local02
0e648     03 22 66 F0 | 	shl	local03, #3
0e64c     14 00 00 FF 
0e650     38 E5 05 F1 | 	add	objptr, ##10552
0e654     F2 22 02 F1 | 	add	local03, objptr
0e658     0C 4E 85 F1 | 	sub	fp, #12
0e65c     10 22 06 F1 | 	add	local03, #16
0e660     11 27 62 FC | 	wrlong	local05, local03
0e664     14 00 00 FF 
0e668     38 E5 85 F1 | 	sub	objptr, ##10552
0e66c                 | LR__1153
0e66c                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
0e66c     58 4E 05 F1 | 	add	fp, #88
0e670     A7 12 02 FB | 	rdlong	arg01, fp
0e674     58 4E 85 F1 | 	sub	fp, #88
0e678     00 14 06 F6 | 	mov	arg02, #0
0e67c     01 16 06 F6 | 	mov	arg03, #1
0e680     8C 52 B1 FD | 	call	#__system___float_cmp
0e684     00 FA 55 F2 | 	cmps	result1, #0 wc
0e688     24 00 90 CD |  if_b	jmp	#LR__1154
0e68c     58 4E 05 F1 | 	add	fp, #88
0e690     A7 12 02 FB | 	rdlong	arg01, fp
0e694     58 4E 85 F1 | 	sub	fp, #88
0e698     80 BF 21 FF 
0e69c     00 14 06 F6 | 	mov	arg02, ##1132396544
0e6a0     01 16 66 F6 | 	neg	arg03, #1
0e6a4     68 52 B1 FD | 	call	#__system___float_cmp
0e6a8     01 FA 55 F2 | 	cmps	result1, #1 wc
0e6ac     44 00 90 CD |  if_b	jmp	#LR__1155
0e6b0                 | LR__1154
0e6b0     0C 4E 05 F1 | 	add	fp, #12
0e6b4     A7 22 02 FB | 	rdlong	local03, fp
0e6b8     11 27 02 F6 | 	mov	local05, local03
0e6bc     01 26 66 F0 | 	shl	local05, #1
0e6c0     11 27 02 F1 | 	add	local05, local03
0e6c4     03 26 66 F0 | 	shl	local05, #3
0e6c8     14 00 00 FF 
0e6cc     38 E5 05 F1 | 	add	objptr, ##10552
0e6d0     F2 26 02 F1 | 	add	local05, objptr
0e6d4     14 26 06 F1 | 	add	local05, #20
0e6d8     13 25 E2 FA | 	rdword	local04, local05
0e6dc     20 4E 05 F1 | 	add	fp, #32
0e6e0     A7 24 62 FC | 	wrlong	local04, fp
0e6e4     2C 4E 85 F1 | 	sub	fp, #44
0e6e8     14 00 00 FF 
0e6ec     38 E5 85 F1 | 	sub	objptr, ##10552
0e6f0     54 00 90 FD | 	jmp	#LR__1156
0e6f4                 | LR__1155
0e6f4     58 4E 05 F1 | 	add	fp, #88
0e6f8     A7 12 02 FB | 	rdlong	arg01, fp
0e6fc     58 4E 85 F1 | 	sub	fp, #88
0e700     01 14 06 F6 | 	mov	arg02, #1
0e704     9C 52 B1 FD | 	call	#__system___float_tointeger
0e708     2C 4E 05 F1 | 	add	fp, #44
0e70c     A7 FA 61 FC | 	wrlong	result1, fp
0e710     20 4E 85 F1 | 	sub	fp, #32
0e714     A7 20 02 FB | 	rdlong	local02, fp
0e718     10 23 02 F6 | 	mov	local03, local02
0e71c     01 22 66 F0 | 	shl	local03, #1
0e720     10 23 02 F1 | 	add	local03, local02
0e724     03 22 66 F0 | 	shl	local03, #3
0e728     14 00 00 FF 
0e72c     38 E5 05 F1 | 	add	objptr, ##10552
0e730     F2 22 02 F1 | 	add	local03, objptr
0e734     0C 4E 85 F1 | 	sub	fp, #12
0e738     14 22 06 F1 | 	add	local03, #20
0e73c     11 FB 51 FC | 	wrword	result1, local03
0e740     14 00 00 FF 
0e744     38 E5 85 F1 | 	sub	objptr, ##10552
0e748                 | LR__1156
0e748     6C 4E 05 F1 | 	add	fp, #108
0e74c     A7 14 02 FB | 	rdlong	arg02, fp
0e750     6C 4E 85 F1 | 	sub	fp, #108
0e754     FC 16 20 FF 
0e758     54 12 06 F6 | 	mov	arg01, ##1076754516
0e75c     28 5D B1 FD | 	call	#__system____builtin_logbase
0e760     FD 24 02 F6 | 	mov	local04, result1
0e764     1E 14 C6 F9 | 	decod	arg02, #30
0e768     FC 16 20 FF 
0e76c     54 12 06 F6 | 	mov	arg01, ##1076754516
0e770     14 5D B1 FD | 	call	#__system____builtin_logbase
0e774     FD 14 02 F6 | 	mov	arg02, result1
0e778     12 13 02 F6 | 	mov	arg01, local04
0e77c     60 4F B1 FD | 	call	#__system___float_div
0e780     FD 12 02 F6 | 	mov	arg01, result1
0e784     00 14 06 F6 | 	mov	arg02, #0
0e788     18 52 B1 FD | 	call	#__system___float_tointeger
0e78c     30 4E 05 F1 | 	add	fp, #48
0e790     A7 FA 61 FC | 	wrlong	result1, fp
0e794     1E 24 C6 F9 | 	decod	local04, #30
0e798     FD 12 02 F6 | 	mov	arg01, result1
0e79c     30 4E 85 F1 | 	sub	fp, #48
0e7a0     05 12 06 F1 | 	add	arg01, #5
0e7a4     09 13 52 F6 | 	abs	arg01, arg01 wc
0e7a8     1F 28 C6 C9 |  if_b	decod	local06, #31
0e7ac     00 28 06 36 |  if_ae	mov	local06, #0
0e7b0     24 49 B1 FD | 	call	#__system___float_fromuns
0e7b4     14 FB 61 F5 | 	xor	result1, local06
0e7b8     FD 14 02 F6 | 	mov	arg02, result1
0e7bc     12 13 02 F6 | 	mov	arg01, local04
0e7c0     FC 5B B1 FD | 	call	#__system____builtin_powf
0e7c4     FD 12 02 F6 | 	mov	arg01, result1
0e7c8     01 14 06 F6 | 	mov	arg02, #1
0e7cc     D4 51 B1 FD | 	call	#__system___float_tointeger
0e7d0     10 4E 05 F1 | 	add	fp, #16
0e7d4     A7 FA 61 FC | 	wrlong	result1, fp
0e7d8                 | ' skip=round(2^(lfreq+5))
0e7d8                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0e7d8     10 4E 85 F1 | 	sub	fp, #16
0e7dc     40 00 00 FF 
0e7e0     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0e7e4     30 00 90 CD |  if_b	jmp	#LR__1157
0e7e8     10 4E 05 F1 | 	add	fp, #16
0e7ec     A7 1E 02 FB | 	rdlong	local01, fp
0e7f0     0F 25 52 F6 | 	abs	local04, local01 wc
0e7f4     0F 24 46 F0 | 	shr	local04, #15
0e7f8     12 25 82 F6 | 	negc	local04, local04
0e7fc     0C 4E 85 F1 | 	sub	fp, #12
0e800     A7 24 62 FC | 	wrlong	local04, fp
0e804     0C 4E 05 F1 | 	add	fp, #12
0e808     40 00 80 FF 
0e80c     A7 00 68 FC | 	wrlong	##32768, fp
0e810     10 4E 85 F1 | 	sub	fp, #16
0e814     0C 00 90 FD | 	jmp	#LR__1158
0e818                 | LR__1157
0e818     04 4E 05 F1 | 	add	fp, #4
0e81c     A7 02 68 FC | 	wrlong	#1, fp
0e820     04 4E 85 F1 | 	sub	fp, #4
0e824                 | LR__1158
0e824     6C 4E 05 F1 | 	add	fp, #108
0e828     A7 14 02 FB | 	rdlong	arg02, fp
0e82c     6C 4E 85 F1 | 	sub	fp, #108
0e830     3E 2C 25 FF 
0e834     3C 12 06 F6 | 	mov	arg01, ##1247312956
0e838     A4 4E B1 FD | 	call	#__system___float_div
0e83c     FD 24 02 F6 | 	mov	local04, result1
0e840     04 4E 05 F1 | 	add	fp, #4
0e844     A7 12 02 FB | 	rdlong	arg01, fp
0e848     04 4E 85 F1 | 	sub	fp, #4
0e84c     09 13 52 F6 | 	abs	arg01, arg01 wc
0e850     1F 28 C6 C9 |  if_b	decod	local06, #31
0e854     00 28 06 36 |  if_ae	mov	local06, #0
0e858     7C 48 B1 FD | 	call	#__system___float_fromuns
0e85c     14 FB 61 F5 | 	xor	result1, local06
0e860     FD 1E 02 F6 | 	mov	local01, result1
0e864     1E 20 C6 F9 | 	decod	local02, #30
0e868     0D 12 06 F6 | 	mov	arg01, #13
0e86c     30 4E 05 F1 | 	add	fp, #48
0e870     A7 26 02 FB | 	rdlong	local05, fp
0e874     30 4E 85 F1 | 	sub	fp, #48
0e878     13 13 82 F1 | 	sub	arg01, local05
0e87c     09 13 52 F6 | 	abs	arg01, arg01 wc
0e880     1F 28 C6 C9 |  if_b	decod	local06, #31
0e884     00 28 06 36 |  if_ae	mov	local06, #0
0e888     4C 48 B1 FD | 	call	#__system___float_fromuns
0e88c     14 FB 61 F5 | 	xor	result1, local06
0e890     FD 14 02 F6 | 	mov	arg02, result1
0e894     10 13 02 F6 | 	mov	arg01, local02
0e898     24 5B B1 FD | 	call	#__system____builtin_powf
0e89c     FD 14 02 F6 | 	mov	arg02, result1
0e8a0     0F 13 02 F6 | 	mov	arg01, local01
0e8a4     34 4C B1 FD | 	call	#__system___float_mul
0e8a8     FD 14 02 F6 | 	mov	arg02, result1
0e8ac     12 13 02 F6 | 	mov	arg01, local04
0e8b0     2C 4E B1 FD | 	call	#__system___float_div
0e8b4     FD 12 02 F6 | 	mov	arg01, result1
0e8b8     01 14 06 F6 | 	mov	arg02, #1
0e8bc     E4 50 B1 FD | 	call	#__system___float_tointeger
0e8c0     34 4E 05 F1 | 	add	fp, #52
0e8c4     A7 FA 61 FC | 	wrlong	result1, fp
0e8c8     34 4E 05 F1 | 	add	fp, #52
0e8cc     A7 12 02 FB | 	rdlong	arg01, fp
0e8d0     10 4E 05 F1 | 	add	fp, #16
0e8d4     A7 14 02 FB | 	rdlong	arg02, fp
0e8d8     78 4E 85 F1 | 	sub	fp, #120
0e8dc     00 4E B1 FD | 	call	#__system___float_div
0e8e0     FD 12 02 F6 | 	mov	arg01, result1
0e8e4     01 14 06 F6 | 	mov	arg02, #1
0e8e8     B8 50 B1 FD | 	call	#__system___float_tointeger
0e8ec     FD 24 02 F6 | 	mov	local04, result1
0e8f0     14 4E 05 F1 | 	add	fp, #20
0e8f4     A7 24 62 FC | 	wrlong	local04, fp
0e8f8     5C 4E 05 F1 | 	add	fp, #92
0e8fc     A7 14 02 FB | 	rdlong	arg02, fp
0e900     70 4E 85 F1 | 	sub	fp, #112
0e904     00 00 23 FF 
0e908     00 12 06 F6 | 	mov	arg01, ##1174405120
0e90c     CC 4B B1 FD | 	call	#__system___float_mul
0e910     FD 12 02 F6 | 	mov	arg01, result1
0e914     01 14 06 F6 | 	mov	arg02, #1
0e918     88 50 B1 FD | 	call	#__system___float_tointeger
0e91c     0D 24 C6 F9 | 	decod	local04, #13
0e920     FD 24 02 F1 | 	add	local04, result1
0e924     18 4E 05 F1 | 	add	fp, #24
0e928     A7 24 62 FC | 	wrlong	local04, fp
0e92c     5C 4E 05 F1 | 	add	fp, #92
0e930     A7 14 02 FB | 	rdlong	arg02, fp
0e934     74 4E 85 F1 | 	sub	fp, #116
0e938     00 3D 22 FF 
0e93c     00 12 06 F6 | 	mov	arg01, ##1148846080
0e940     98 4B B1 FD | 	call	#__system___float_mul
0e944     FD 12 02 F6 | 	mov	arg01, result1
0e948     01 14 06 F6 | 	mov	arg02, #1
0e94c     54 50 B1 FD | 	call	#__system___float_tointeger
0e950     1C 4E 05 F1 | 	add	fp, #28
0e954     A7 FA 61 FC | 	wrlong	result1, fp
0e958     37 00 00 FF 
0e95c     10 E4 05 F1 | 	add	objptr, ##28176
0e960     F2 24 02 FB | 	rdlong	local04, objptr
0e964     37 00 00 FF 
0e968     10 E4 85 F1 | 	sub	objptr, ##28176
0e96c     10 4E 85 F1 | 	sub	fp, #16
0e970     A7 20 02 FB | 	rdlong	local02, fp
0e974     06 20 66 F0 | 	shl	local02, #6
0e978     10 25 02 F1 | 	add	local04, local02
0e97c     04 4E 85 F1 | 	sub	fp, #4
0e980     A7 24 62 FC | 	wrlong	local04, fp
0e984                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
0e984                 | '  
0e984                 | '   
0e984                 | ' 'print period,skip
0e984                 | ' speed=round(speed_coeff/slen)
0e984                 | ' ipan=8192+round(8192*pan)
0e984                 | ' ivol=round(1000.0*vol)
0e984                 | ' base2=base+64*channel
0e984                 | ' 'skip=round(freq*3.9827219) 
0e984                 | ' if wave <32 then 
0e984     18 4E 05 F1 | 	add	fp, #24
0e988     A7 24 02 FB | 	rdlong	local04, fp
0e98c     20 4E 85 F1 | 	sub	fp, #32
0e990     20 24 56 F2 | 	cmps	local04, #32 wc
0e994     2C 00 90 3D |  if_ae	jmp	#LR__1159
0e998     08 4E 05 F1 | 	add	fp, #8
0e99c     A7 12 02 FB | 	rdlong	arg01, fp
0e9a0     08 12 06 F1 | 	add	arg01, #8
0e9a4     18 4E 05 F1 | 	add	fp, #24
0e9a8     A7 14 02 FB | 	rdlong	arg02, fp
0e9ac     20 4E 85 F1 | 	sub	fp, #32
0e9b0     0B 14 66 F0 | 	shl	arg02, #11
0e9b4     00 00 60 FF 
0e9b8     00 14 06 F1 | 	add	arg02, ##-1073741824
0e9bc     09 15 62 FC | 	wrlong	arg02, arg01
0e9c0     18 00 90 FD | 	jmp	#LR__1160
0e9c4                 | LR__1159
0e9c4     08 4E 05 F1 | 	add	fp, #8
0e9c8     A7 12 02 FB | 	rdlong	arg01, fp
0e9cc     08 4E 85 F1 | 	sub	fp, #8
0e9d0     08 12 06 F1 | 	add	arg01, #8
0e9d4     00 00 E4 FF 
0e9d8     09 01 68 FC | 	wrlong	##-939524096, arg01
0e9dc                 | LR__1160
0e9dc     08 4E 05 F1 | 	add	fp, #8
0e9e0     A7 12 02 FB | 	rdlong	arg01, fp
0e9e4     10 12 06 F1 | 	add	arg01, #16
0e9e8     04 00 80 FF 
0e9ec     09 01 68 FC | 	wrlong	##2048, arg01
0e9f0     A7 12 02 FB | 	rdlong	arg01, fp
0e9f4     0C 12 06 F1 | 	add	arg01, #12
0e9f8     09 01 68 FC | 	wrlong	#0, arg01
0e9fc     A7 12 02 FB | 	rdlong	arg01, fp
0ea00     14 12 06 F1 | 	add	arg01, #20
0ea04     14 4E 05 F1 | 	add	fp, #20
0ea08     A7 14 02 FB | 	rdlong	arg02, fp
0ea0c     09 15 52 FC | 	wrword	arg02, arg01
0ea10     14 4E 85 F1 | 	sub	fp, #20
0ea14     A7 12 02 FB | 	rdlong	arg01, fp
0ea18     16 12 06 F1 | 	add	arg01, #22
0ea1c     10 4E 05 F1 | 	add	fp, #16
0ea20     A7 14 02 FB | 	rdlong	arg02, fp
0ea24     09 15 52 FC | 	wrword	arg02, arg01
0ea28                 | ' lpoke base2+16,2048
0ea28                 | ' lpoke base2+12,0
0ea28                 | ' dpoke base2+20,ivol 
0ea28                 | ' dpoke base2+22,ipan 
0ea28                 | ' if wave<32 then
0ea28     08 4E 05 F1 | 	add	fp, #8
0ea2c     A7 24 02 FB | 	rdlong	local04, fp
0ea30     20 4E 85 F1 | 	sub	fp, #32
0ea34     20 24 56 F2 | 	cmps	local04, #32 wc
0ea38     38 00 90 3D |  if_ae	jmp	#LR__1161
0ea3c     08 4E 05 F1 | 	add	fp, #8
0ea40     A7 12 02 FB | 	rdlong	arg01, fp
0ea44     18 12 06 F1 | 	add	arg01, #24
0ea48     2C 4E 05 F1 | 	add	fp, #44
0ea4c     A7 14 02 FB | 	rdlong	arg02, fp
0ea50     09 15 52 FC | 	wrword	arg02, arg01
0ea54     2C 4E 85 F1 | 	sub	fp, #44
0ea58     A7 12 02 FB | 	rdlong	arg01, fp
0ea5c     1A 12 06 F1 | 	add	arg01, #26
0ea60     08 4E 05 F1 | 	add	fp, #8
0ea64     A7 14 02 FB | 	rdlong	arg02, fp
0ea68     10 4E 85 F1 | 	sub	fp, #16
0ea6c     09 15 52 FC | 	wrword	arg02, arg01
0ea70     48 00 90 FD | 	jmp	#LR__1162
0ea74                 | LR__1161
0ea74     08 4E 05 F1 | 	add	fp, #8
0ea78     A7 24 02 FB | 	rdlong	local04, fp
0ea7c     18 24 06 F1 | 	add	local04, #24
0ea80     64 4E 05 F1 | 	add	fp, #100
0ea84     A7 14 02 FB | 	rdlong	arg02, fp
0ea88     6C 4E 85 F1 | 	sub	fp, #108
0ea8c     3E 2C 25 FF 
0ea90     3C 12 06 F6 | 	mov	arg01, ##1247312956
0ea94     48 4C B1 FD | 	call	#__system___float_div
0ea98     FD 12 02 F6 | 	mov	arg01, result1
0ea9c     01 14 06 F6 | 	mov	arg02, #1
0eaa0     00 4F B1 FD | 	call	#__system___float_tointeger
0eaa4     12 FB 51 FC | 	wrword	result1, local04
0eaa8     08 4E 05 F1 | 	add	fp, #8
0eaac     A7 12 02 FB | 	rdlong	arg01, fp
0eab0     08 4E 85 F1 | 	sub	fp, #8
0eab4     1A 12 06 F1 | 	add	arg01, #26
0eab8     09 01 5A FC | 	wrword	#256, arg01
0eabc                 | LR__1162
0eabc     08 4E 05 F1 | 	add	fp, #8
0eac0     A7 12 02 FB | 	rdlong	arg01, fp
0eac4     1C 12 06 F1 | 	add	arg01, #28
0eac8     09 01 68 FC | 	wrlong	#0, arg01
0eacc     A7 12 02 FB | 	rdlong	arg01, fp
0ead0     20 12 06 F1 | 	add	arg01, #32
0ead4     09 01 68 FC | 	wrlong	#0, arg01
0ead8                 | ' lpoke base2+28,$0000_0000
0ead8                 | ' lpoke base2+32,0 
0ead8                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
0ead8     1C 4E 05 F1 | 	add	fp, #28
0eadc     A7 24 02 FB | 	rdlong	local04, fp
0eae0     24 4E 85 F1 | 	sub	fp, #36
0eae4     08 24 0E F2 | 	cmp	local04, #8 wz
0eae8     18 00 90 5D |  if_ne	jmp	#LR__1163
0eaec     08 4E 05 F1 | 	add	fp, #8
0eaf0     A7 12 02 FB | 	rdlong	arg01, fp
0eaf4     08 4E 85 F1 | 	sub	fp, #8
0eaf8     24 12 06 F1 | 	add	arg01, #36
0eafc     09 01 68 FC | 	wrlong	#0, arg01
0eb00     34 00 90 FD | 	jmp	#LR__1164
0eb04                 | LR__1163
0eb04     08 4E 05 F1 | 	add	fp, #8
0eb08     A7 12 02 FB | 	rdlong	arg01, fp
0eb0c     24 12 06 F1 | 	add	arg01, #36
0eb10     1C 4E 05 F1 | 	add	fp, #28
0eb14     A7 14 02 FB | 	rdlong	arg02, fp
0eb18     24 4E 85 F1 | 	sub	fp, #36
0eb1c     09 14 66 F0 | 	shl	arg02, #9
0eb20     0C 00 00 FF 
0eb24     D8 E4 05 F1 | 	add	objptr, ##6360
0eb28     F2 14 02 F1 | 	add	arg02, objptr
0eb2c     0C 00 00 FF 
0eb30     D8 E4 85 F1 | 	sub	objptr, ##6360
0eb34     09 15 62 FC | 	wrlong	arg02, arg01
0eb38                 | LR__1164
0eb38     08 4E 05 F1 | 	add	fp, #8
0eb3c     A7 12 02 FB | 	rdlong	arg01, fp
0eb40     28 12 06 F1 | 	add	arg01, #40
0eb44     0C 4E 05 F1 | 	add	fp, #12
0eb48     A7 14 02 FB | 	rdlong	arg02, fp
0eb4c     09 15 62 FC | 	wrlong	arg02, arg01
0eb50     0C 4E 85 F1 | 	sub	fp, #12
0eb54     A7 12 02 FB | 	rdlong	arg01, fp
0eb58     2C 12 06 F1 | 	add	arg01, #44
0eb5c     24 4E 05 F1 | 	add	fp, #36
0eb60     A7 14 02 FB | 	rdlong	arg02, fp
0eb64     09 15 62 FC | 	wrlong	arg02, arg01
0eb68                 | ' lpoke base2+40,speed' speed
0eb68                 | ' lpoke base2+44,sus 'len
0eb68                 | ' 
0eb68                 | ' if delay>0 then waitms(delay) ' : print "wait "; round(params(6)) : l
0eb68     04 4E 85 F1 | 	sub	fp, #4
0eb6c     A7 24 02 FB | 	rdlong	local04, fp
0eb70     28 4E 85 F1 | 	sub	fp, #40
0eb74     01 24 56 F2 | 	cmps	local04, #1 wc
0eb78     28 4E 05 31 |  if_ae	add	fp, #40
0eb7c     A7 12 02 3B |  if_ae	rdlong	arg01, fp
0eb80     28 4E 85 31 |  if_ae	sub	fp, #40
0eb84     94 20 B1 3D |  if_ae	call	#__system___waitms
0eb88     A7 F0 03 F6 | 	mov	ptra, fp
0eb8c     B2 00 A0 FD | 	call	#popregs_
0eb90                 | _do_play_ret
0eb90     2D 00 64 FD | 	ret
0eb94                 | 
0eb94                 | ' 
0eb94                 | ' sub do_changevol
0eb94                 | _do_changevol
0eb94     00 4A 05 F6 | 	mov	COUNT_, #0
0eb98     A8 00 A0 FD | 	call	#pushregs_
0eb9c     14 F0 07 F1 | 	add	ptra, #20
0eba0     F4 CF BF FD | 	call	#_pop
0eba4     FF 14 02 F6 | 	mov	arg02, result3
0eba8     A7 FA 61 FC | 	wrlong	result1, fp
0ebac     04 4E 05 F1 | 	add	fp, #4
0ebb0     A7 FC 61 FC | 	wrlong	result2, fp
0ebb4     04 4E 05 F1 | 	add	fp, #4
0ebb8     A7 14 62 FC | 	wrlong	arg02, fp
0ebbc     08 4E 85 F1 | 	sub	fp, #8
0ebc0     A7 12 02 F6 | 	mov	arg01, fp
0ebc4     5C 71 B0 FD | 	call	#_converttofloat
0ebc8     FD 12 02 F6 | 	mov	arg01, result1
0ebcc     00 3D 22 FF 
0ebd0     00 14 06 F6 | 	mov	arg02, ##1148846080
0ebd4     04 49 B1 FD | 	call	#__system___float_mul
0ebd8     FD 12 02 F6 | 	mov	arg01, result1
0ebdc     01 14 06 F6 | 	mov	arg02, #1
0ebe0     C0 4D B1 FD | 	call	#__system___float_tointeger
0ebe4     FD 14 52 F6 | 	abs	arg02, result1 wc
0ebe8     0D 14 46 F7 | 	zerox	arg02, #13
0ebec     0A 15 82 F6 | 	negc	arg02, arg02
0ebf0     10 4E 05 F1 | 	add	fp, #16
0ebf4     A7 14 62 FC | 	wrlong	arg02, fp
0ebf8     10 4E 85 F1 | 	sub	fp, #16
0ebfc     98 CF BF FD | 	call	#_pop
0ec00     FF 14 02 F6 | 	mov	arg02, result3
0ec04     A7 FA 61 FC | 	wrlong	result1, fp
0ec08     04 4E 05 F1 | 	add	fp, #4
0ec0c     A7 FC 61 FC | 	wrlong	result2, fp
0ec10     04 4E 05 F1 | 	add	fp, #4
0ec14     A7 14 62 FC | 	wrlong	arg02, fp
0ec18     08 4E 85 F1 | 	sub	fp, #8
0ec1c     A7 12 02 F6 | 	mov	arg01, fp
0ec20     44 70 B0 FD | 	call	#_converttoint
0ec24     FD 14 52 F6 | 	abs	arg02, result1 wc
0ec28     07 14 06 F5 | 	and	arg02, #7
0ec2c     0A 15 82 F6 | 	negc	arg02, arg02
0ec30     0C 4E 05 F1 | 	add	fp, #12
0ec34     A7 14 62 FC | 	wrlong	arg02, fp
0ec38     37 00 00 FF 
0ec3c     10 E4 05 F1 | 	add	objptr, ##28176
0ec40     F2 12 02 FB | 	rdlong	arg01, objptr
0ec44     37 00 00 FF 
0ec48     10 E4 85 F1 | 	sub	objptr, ##28176
0ec4c     06 14 66 F0 | 	shl	arg02, #6
0ec50     0A 13 02 F1 | 	add	arg01, arg02
0ec54     14 12 06 F1 | 	add	arg01, #20
0ec58     04 4E 05 F1 | 	add	fp, #4
0ec5c     A7 14 02 FB | 	rdlong	arg02, fp
0ec60     10 4E 85 F1 | 	sub	fp, #16
0ec64     09 15 52 FC | 	wrword	arg02, arg01
0ec68     A7 F0 03 F6 | 	mov	ptra, fp
0ec6c     B2 00 A0 FD | 	call	#popregs_
0ec70                 | _do_changevol_ret
0ec70     2D 00 64 FD | 	ret
0ec74                 | 
0ec74                 | ' 
0ec74                 | ' sub do_changepan
0ec74                 | _do_changepan
0ec74     01 4A 05 F6 | 	mov	COUNT_, #1
0ec78     A8 00 A0 FD | 	call	#pushregs_
0ec7c     14 F0 07 F1 | 	add	ptra, #20
0ec80     14 CF BF FD | 	call	#_pop
0ec84     A7 FA 61 FC | 	wrlong	result1, fp
0ec88     04 4E 05 F1 | 	add	fp, #4
0ec8c     A7 FC 61 FC | 	wrlong	result2, fp
0ec90     04 4E 05 F1 | 	add	fp, #4
0ec94     A7 FE 61 FC | 	wrlong	result3, fp
0ec98     08 4E 85 F1 | 	sub	fp, #8
0ec9c     00 00 23 FF 
0eca0     00 1E 06 F6 | 	mov	local01, ##1174405120
0eca4     A7 12 02 F6 | 	mov	arg01, fp
0eca8     78 70 B0 FD | 	call	#_converttofloat
0ecac     FD 14 02 F6 | 	mov	arg02, result1
0ecb0     0F 13 02 F6 | 	mov	arg01, local01
0ecb4     24 48 B1 FD | 	call	#__system___float_mul
0ecb8     FD 12 02 F6 | 	mov	arg01, result1
0ecbc     01 14 06 F6 | 	mov	arg02, #1
0ecc0     E0 4C B1 FD | 	call	#__system___float_tointeger
0ecc4     0D 1E C6 F9 | 	decod	local01, #13
0ecc8     FD 1E 02 F1 | 	add	local01, result1
0eccc     10 4E 05 F1 | 	add	fp, #16
0ecd0     A7 1E 62 FC | 	wrlong	local01, fp
0ecd4                 | ' t1=pop()
0ecd4                 | ' pan=8192+round(8192*converttofloat(t1)) 
0ecd4                 | ' if pan<0 then pan=0
0ecd4     10 4E 85 F1 | 	sub	fp, #16
0ecd8     00 1E 56 F2 | 	cmps	local01, #0 wc
0ecdc     10 4E 05 C1 |  if_b	add	fp, #16
0ece0     A7 00 68 CC |  if_b	wrlong	#0, fp
0ece4     10 4E 85 C1 |  if_b	sub	fp, #16
0ece8                 | ' if pan>16384 then pan=16384
0ece8     10 4E 05 F1 | 	add	fp, #16
0ecec     A7 1E 02 FB | 	rdlong	local01, fp
0ecf0     10 4E 85 F1 | 	sub	fp, #16
0ecf4     20 00 00 FF 
0ecf8     01 1E 56 F2 | 	cmps	local01, ##16385 wc
0ecfc     10 4E 05 31 |  if_ae	add	fp, #16
0ed00     20 00 80 3F 
0ed04     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0ed08     10 4E 85 31 |  if_ae	sub	fp, #16
0ed0c     88 CE BF FD | 	call	#_pop
0ed10     FF 1E 02 F6 | 	mov	local01, result3
0ed14     A7 FA 61 FC | 	wrlong	result1, fp
0ed18     04 4E 05 F1 | 	add	fp, #4
0ed1c     A7 FC 61 FC | 	wrlong	result2, fp
0ed20     04 4E 05 F1 | 	add	fp, #4
0ed24     A7 1E 62 FC | 	wrlong	local01, fp
0ed28     08 4E 85 F1 | 	sub	fp, #8
0ed2c     A7 12 02 F6 | 	mov	arg01, fp
0ed30     34 6F B0 FD | 	call	#_converttoint
0ed34     FD 1E 52 F6 | 	abs	local01, result1 wc
0ed38     07 1E 06 F5 | 	and	local01, #7
0ed3c     0F 1F 82 F6 | 	negc	local01, local01
0ed40     0C 4E 05 F1 | 	add	fp, #12
0ed44     A7 1E 62 FC | 	wrlong	local01, fp
0ed48     37 00 00 FF 
0ed4c     10 E4 05 F1 | 	add	objptr, ##28176
0ed50     F2 12 02 FB | 	rdlong	arg01, objptr
0ed54     37 00 00 FF 
0ed58     10 E4 85 F1 | 	sub	objptr, ##28176
0ed5c     06 1E 66 F0 | 	shl	local01, #6
0ed60     0F 13 02 F1 | 	add	arg01, local01
0ed64     16 12 06 F1 | 	add	arg01, #22
0ed68     04 4E 05 F1 | 	add	fp, #4
0ed6c     A7 14 02 FB | 	rdlong	arg02, fp
0ed70     10 4E 85 F1 | 	sub	fp, #16
0ed74     09 15 52 FC | 	wrword	arg02, arg01
0ed78     A7 F0 03 F6 | 	mov	ptra, fp
0ed7c     B2 00 A0 FD | 	call	#popregs_
0ed80                 | _do_changepan_ret
0ed80     2D 00 64 FD | 	ret
0ed84                 | 
0ed84                 | ' 
0ed84                 | ' sub do_changefreq
0ed84                 | _do_changefreq
0ed84     04 4A 05 F6 | 	mov	COUNT_, #4
0ed88     A8 00 A0 FD | 	call	#pushregs_
0ed8c     28 F0 07 F1 | 	add	ptra, #40
0ed90     04 CE BF FD | 	call	#_pop
0ed94     FF 14 02 F6 | 	mov	arg02, result3
0ed98     A7 FA 61 FC | 	wrlong	result1, fp
0ed9c     04 4E 05 F1 | 	add	fp, #4
0eda0     A7 FC 61 FC | 	wrlong	result2, fp
0eda4     04 4E 05 F1 | 	add	fp, #4
0eda8     A7 14 62 FC | 	wrlong	arg02, fp
0edac     08 4E 85 F1 | 	sub	fp, #8
0edb0     A7 12 02 F6 | 	mov	arg01, fp
0edb4     6C 6F B0 FD | 	call	#_converttofloat
0edb8     24 4E 05 F1 | 	add	fp, #36
0edbc     A7 FA 61 FC | 	wrlong	result1, fp
0edc0     24 4E 85 F1 | 	sub	fp, #36
0edc4     FD 14 02 F6 | 	mov	arg02, result1
0edc8     FC 16 20 FF 
0edcc     54 12 06 F6 | 	mov	arg01, ##1076754516
0edd0     B4 56 B1 FD | 	call	#__system____builtin_logbase
0edd4     FD 1E 02 F6 | 	mov	local01, result1
0edd8     1E 14 C6 F9 | 	decod	arg02, #30
0eddc     FC 16 20 FF 
0ede0     54 12 06 F6 | 	mov	arg01, ##1076754516
0ede4     A0 56 B1 FD | 	call	#__system____builtin_logbase
0ede8     FD 14 02 F6 | 	mov	arg02, result1
0edec     0F 13 02 F6 | 	mov	arg01, local01
0edf0     EC 48 B1 FD | 	call	#__system___float_div
0edf4     FD 12 02 F6 | 	mov	arg01, result1
0edf8     00 14 06 F6 | 	mov	arg02, #0
0edfc     A4 4B B1 FD | 	call	#__system___float_tointeger
0ee00     10 4E 05 F1 | 	add	fp, #16
0ee04     A7 FA 61 FC | 	wrlong	result1, fp
0ee08     1E 1E C6 F9 | 	decod	local01, #30
0ee0c     FD 12 02 F6 | 	mov	arg01, result1
0ee10     10 4E 85 F1 | 	sub	fp, #16
0ee14     05 12 06 F1 | 	add	arg01, #5
0ee18     09 13 52 F6 | 	abs	arg01, arg01 wc
0ee1c     1F 20 C6 C9 |  if_b	decod	local02, #31
0ee20     00 20 06 36 |  if_ae	mov	local02, #0
0ee24     B0 42 B1 FD | 	call	#__system___float_fromuns
0ee28     10 FB 61 F5 | 	xor	result1, local02
0ee2c     FD 14 02 F6 | 	mov	arg02, result1
0ee30     0F 13 02 F6 | 	mov	arg01, local01
0ee34     88 55 B1 FD | 	call	#__system____builtin_powf
0ee38     FD 12 02 F6 | 	mov	arg01, result1
0ee3c     01 14 06 F6 | 	mov	arg02, #1
0ee40     60 4B B1 FD | 	call	#__system___float_tointeger
0ee44     14 4E 05 F1 | 	add	fp, #20
0ee48     A7 FA 61 FC | 	wrlong	result1, fp
0ee4c                 | ' skip=round(2^(lfreq+5))
0ee4c                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0ee4c     14 4E 85 F1 | 	sub	fp, #20
0ee50     40 00 00 FF 
0ee54     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0ee58     30 00 90 CD |  if_b	jmp	#LR__1170
0ee5c     14 4E 05 F1 | 	add	fp, #20
0ee60     A7 1E 02 FB | 	rdlong	local01, fp
0ee64     0F 1F 52 F6 | 	abs	local01, local01 wc
0ee68     0F 1E 46 F0 | 	shr	local01, #15
0ee6c     0F 1F 82 F6 | 	negc	local01, local01
0ee70     04 4E 05 F1 | 	add	fp, #4
0ee74     A7 1E 62 FC | 	wrlong	local01, fp
0ee78     04 4E 85 F1 | 	sub	fp, #4
0ee7c     40 00 80 FF 
0ee80     A7 00 68 FC | 	wrlong	##32768, fp
0ee84     14 4E 85 F1 | 	sub	fp, #20
0ee88     0C 00 90 FD | 	jmp	#LR__1171
0ee8c                 | LR__1170
0ee8c     18 4E 05 F1 | 	add	fp, #24
0ee90     A7 02 68 FC | 	wrlong	#1, fp
0ee94     18 4E 85 F1 | 	sub	fp, #24
0ee98                 | LR__1171
0ee98     24 4E 05 F1 | 	add	fp, #36
0ee9c     A7 14 02 FB | 	rdlong	arg02, fp
0eea0     24 4E 85 F1 | 	sub	fp, #36
0eea4     3E 2C 25 FF 
0eea8     3C 12 06 F6 | 	mov	arg01, ##1247312956
0eeac     30 48 B1 FD | 	call	#__system___float_div
0eeb0     FD 1E 02 F6 | 	mov	local01, result1
0eeb4     18 4E 05 F1 | 	add	fp, #24
0eeb8     A7 12 02 FB | 	rdlong	arg01, fp
0eebc     18 4E 85 F1 | 	sub	fp, #24
0eec0     09 13 52 F6 | 	abs	arg01, arg01 wc
0eec4     1F 20 C6 C9 |  if_b	decod	local02, #31
0eec8     00 20 06 36 |  if_ae	mov	local02, #0
0eecc     08 42 B1 FD | 	call	#__system___float_fromuns
0eed0     10 FB 61 F5 | 	xor	result1, local02
0eed4     FD 22 02 F6 | 	mov	local03, result1
0eed8     1E 24 C6 F9 | 	decod	local04, #30
0eedc     0D 12 06 F6 | 	mov	arg01, #13
0eee0     10 4E 05 F1 | 	add	fp, #16
0eee4     A7 14 02 FB | 	rdlong	arg02, fp
0eee8     10 4E 85 F1 | 	sub	fp, #16
0eeec     0A 13 82 F1 | 	sub	arg01, arg02
0eef0     09 13 52 F6 | 	abs	arg01, arg01 wc
0eef4     1F 20 C6 C9 |  if_b	decod	local02, #31
0eef8     00 20 06 36 |  if_ae	mov	local02, #0
0eefc     D8 41 B1 FD | 	call	#__system___float_fromuns
0ef00     10 FB 61 F5 | 	xor	result1, local02
0ef04     FD 14 02 F6 | 	mov	arg02, result1
0ef08     12 13 02 F6 | 	mov	arg01, local04
0ef0c     B0 54 B1 FD | 	call	#__system____builtin_powf
0ef10     FD 14 02 F6 | 	mov	arg02, result1
0ef14     11 13 02 F6 | 	mov	arg01, local03
0ef18     C0 45 B1 FD | 	call	#__system___float_mul
0ef1c     FD 14 02 F6 | 	mov	arg02, result1
0ef20     0F 13 02 F6 | 	mov	arg01, local01
0ef24     B8 47 B1 FD | 	call	#__system___float_div
0ef28     FD 12 02 F6 | 	mov	arg01, result1
0ef2c     01 14 06 F6 | 	mov	arg02, #1
0ef30     70 4A B1 FD | 	call	#__system___float_tointeger
0ef34     FD 1E 02 F6 | 	mov	local01, result1
0ef38     1C 4E 05 F1 | 	add	fp, #28
0ef3c     A7 1E 62 FC | 	wrlong	local01, fp
0ef40     1C 4E 85 F1 | 	sub	fp, #28
0ef44     50 CC BF FD | 	call	#_pop
0ef48     FF 24 02 F6 | 	mov	local04, result3
0ef4c     A7 FA 61 FC | 	wrlong	result1, fp
0ef50     04 4E 05 F1 | 	add	fp, #4
0ef54     A7 FC 61 FC | 	wrlong	result2, fp
0ef58     04 4E 05 F1 | 	add	fp, #4
0ef5c     A7 24 62 FC | 	wrlong	local04, fp
0ef60     08 4E 85 F1 | 	sub	fp, #8
0ef64     A7 12 02 F6 | 	mov	arg01, fp
0ef68     FC 6C B0 FD | 	call	#_converttoint
0ef6c     FD 22 52 F6 | 	abs	local03, result1 wc
0ef70     07 22 06 F5 | 	and	local03, #7
0ef74     11 23 82 F6 | 	negc	local03, local03
0ef78     0C 4E 05 F1 | 	add	fp, #12
0ef7c     A7 22 62 FC | 	wrlong	local03, fp
0ef80     08 4E 05 F1 | 	add	fp, #8
0ef84     A7 14 02 FB | 	rdlong	arg02, fp
0ef88     10 14 66 F0 | 	shl	arg02, #16
0ef8c     08 4E 05 F1 | 	add	fp, #8
0ef90     A7 24 02 FB | 	rdlong	local04, fp
0ef94     12 15 02 F1 | 	add	arg02, local04
0ef98     04 4E 05 F1 | 	add	fp, #4
0ef9c     A7 14 62 FC | 	wrlong	arg02, fp
0efa0     37 00 00 FF 
0efa4     10 E4 05 F1 | 	add	objptr, ##28176
0efa8     F2 12 02 FB | 	rdlong	arg01, objptr
0efac     37 00 00 FF 
0efb0     10 E4 85 F1 | 	sub	objptr, ##28176
0efb4     14 4E 85 F1 | 	sub	fp, #20
0efb8     A7 24 02 FB | 	rdlong	local04, fp
0efbc     06 24 66 F0 | 	shl	local04, #6
0efc0     12 13 02 F1 | 	add	arg01, local04
0efc4     18 12 06 F1 | 	add	arg01, #24
0efc8     0C 4E 85 F1 | 	sub	fp, #12
0efcc     09 15 62 FC | 	wrlong	arg02, arg01
0efd0     A7 F0 03 F6 | 	mov	ptra, fp
0efd4     B2 00 A0 FD | 	call	#popregs_
0efd8                 | _do_changefreq_ret
0efd8     2D 00 64 FD | 	ret
0efdc                 | 
0efdc                 | ' 
0efdc                 | ' sub do_changewav
0efdc                 | _do_changewav
0efdc     00 4A 05 F6 | 	mov	COUNT_, #0
0efe0     A8 00 A0 FD | 	call	#pushregs_
0efe4     14 F0 07 F1 | 	add	ptra, #20
0efe8     AC CB BF FD | 	call	#_pop
0efec     FF 14 02 F6 | 	mov	arg02, result3
0eff0     A7 FA 61 FC | 	wrlong	result1, fp
0eff4     04 4E 05 F1 | 	add	fp, #4
0eff8     A7 FC 61 FC | 	wrlong	result2, fp
0effc     04 4E 05 F1 | 	add	fp, #4
0f000     A7 14 62 FC | 	wrlong	arg02, fp
0f004     08 4E 85 F1 | 	sub	fp, #8
0f008     A7 12 02 F6 | 	mov	arg01, fp
0f00c     58 6C B0 FD | 	call	#_converttoint
0f010     10 4E 05 F1 | 	add	fp, #16
0f014     A7 FA 61 FC | 	wrlong	result1, fp
0f018                 | ' t1=pop()
0f018                 | ' wave=converttoint(t1)
0f018                 | ' if wave<0 then wave=0
0f018     FD 14 02 F6 | 	mov	arg02, result1
0f01c     10 4E 85 F1 | 	sub	fp, #16
0f020     00 14 56 F2 | 	cmps	arg02, #0 wc
0f024     10 4E 05 C1 |  if_b	add	fp, #16
0f028     A7 00 68 CC |  if_b	wrlong	#0, fp
0f02c     10 4E 85 C1 |  if_b	sub	fp, #16
0f030     64 CB BF FD | 	call	#_pop
0f034     FF 14 02 F6 | 	mov	arg02, result3
0f038     A7 FA 61 FC | 	wrlong	result1, fp
0f03c     04 4E 05 F1 | 	add	fp, #4
0f040     A7 FC 61 FC | 	wrlong	result2, fp
0f044     04 4E 05 F1 | 	add	fp, #4
0f048     A7 14 62 FC | 	wrlong	arg02, fp
0f04c     08 4E 85 F1 | 	sub	fp, #8
0f050     A7 12 02 F6 | 	mov	arg01, fp
0f054     10 6C B0 FD | 	call	#_converttoint
0f058     FD 14 52 F6 | 	abs	arg02, result1 wc
0f05c     07 14 06 F5 | 	and	arg02, #7
0f060     0A 15 82 F6 | 	negc	arg02, arg02
0f064     0C 4E 05 F1 | 	add	fp, #12
0f068     A7 14 62 FC | 	wrlong	arg02, fp
0f06c                 | ' if wave <32 then 
0f06c     04 4E 05 F1 | 	add	fp, #4
0f070     A7 14 02 FB | 	rdlong	arg02, fp
0f074     10 4E 85 F1 | 	sub	fp, #16
0f078     20 14 56 F2 | 	cmps	arg02, #32 wc
0f07c     48 00 90 3D |  if_ae	jmp	#LR__1180
0f080     37 00 00 FF 
0f084     10 E4 05 F1 | 	add	objptr, ##28176
0f088     F2 12 02 FB | 	rdlong	arg01, objptr
0f08c     37 00 00 FF 
0f090     10 E4 85 F1 | 	sub	objptr, ##28176
0f094     0C 4E 05 F1 | 	add	fp, #12
0f098     A7 14 02 FB | 	rdlong	arg02, fp
0f09c     06 14 66 F0 | 	shl	arg02, #6
0f0a0     0A 13 02 F1 | 	add	arg01, arg02
0f0a4     08 12 06 F1 | 	add	arg01, #8
0f0a8     04 4E 05 F1 | 	add	fp, #4
0f0ac     A7 14 02 FB | 	rdlong	arg02, fp
0f0b0     10 4E 85 F1 | 	sub	fp, #16
0f0b4     0B 14 66 F0 | 	shl	arg02, #11
0f0b8     00 00 60 FF 
0f0bc     00 14 06 F1 | 	add	arg02, ##-1073741824
0f0c0     09 15 62 FC | 	wrlong	arg02, arg01
0f0c4     34 00 90 FD | 	jmp	#LR__1181
0f0c8                 | LR__1180
0f0c8     37 00 00 FF 
0f0cc     10 E4 05 F1 | 	add	objptr, ##28176
0f0d0     F2 12 02 FB | 	rdlong	arg01, objptr
0f0d4     37 00 00 FF 
0f0d8     10 E4 85 F1 | 	sub	objptr, ##28176
0f0dc     0C 4E 05 F1 | 	add	fp, #12
0f0e0     A7 14 02 FB | 	rdlong	arg02, fp
0f0e4     0C 4E 85 F1 | 	sub	fp, #12
0f0e8     06 14 66 F0 | 	shl	arg02, #6
0f0ec     0A 13 02 F1 | 	add	arg01, arg02
0f0f0     08 12 06 F1 | 	add	arg01, #8
0f0f4     00 00 E4 FF 
0f0f8     09 01 68 FC | 	wrlong	##-939524096, arg01
0f0fc                 | LR__1181
0f0fc     A7 F0 03 F6 | 	mov	ptra, fp
0f100     B2 00 A0 FD | 	call	#popregs_
0f104                 | _do_changewav_ret
0f104     2D 00 64 FD | 	ret
0f108                 | 
0f108                 | ' 
0f108                 | ' 
0f108                 | ' sub do_shutup
0f108                 | _do_shutup
0f108     03 4A 05 F6 | 	mov	COUNT_, #3
0f10c     A8 00 A0 FD | 	call	#pushregs_
0f110     18 F0 07 F1 | 	add	ptra, #24
0f114     4A 00 00 FF 
0f118     80 E4 05 F1 | 	add	objptr, ##38016
0f11c     F2 1E 02 FB | 	rdlong	local01, objptr
0f120     0F 21 02 F6 | 	mov	local02, local01
0f124     01 20 66 F0 | 	shl	local02, #1
0f128     0F 21 02 F1 | 	add	local02, local01
0f12c     02 20 66 F0 | 	shl	local02, #2
0f130     03 00 00 FF 
0f134     04 E4 85 F1 | 	sub	objptr, ##1540
0f138     F2 20 02 F1 | 	add	local02, objptr
0f13c     10 23 0A FB | 	rdlong	local03, local02 wz
0f140     14 4E 05 F1 | 	add	fp, #20
0f144     A7 22 62 FC | 	wrlong	local03, fp
0f148                 | ' 
0f148                 | ' numpar=compiledline(lineptr_e).result.uresult
0f148                 | ' if numpar=0 then
0f148     14 4E 85 F1 | 	sub	fp, #20
0f14c     47 00 00 FF 
0f150     7C E4 85 F1 | 	sub	objptr, ##36476
0f154     50 00 90 5D |  if_ne	jmp	#LR__1192
0f158                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
0f158     10 4E 05 F1 | 	add	fp, #16
0f15c     A7 00 68 FC | 	wrlong	#0, fp
0f160     37 00 00 FF 
0f164     10 E4 05 F1 | 	add	objptr, ##28176
0f168     97 16 48 FB | 	callpa	#(@LR__1191-@LR__1190)>>2,fcache_load_ptr_
0f16c                 | LR__1190
0f16c     F2 12 02 FB | 	rdlong	arg01, objptr
0f170     A7 22 02 FB | 	rdlong	local03, fp
0f174     06 22 66 F0 | 	shl	local03, #6
0f178     11 13 02 F1 | 	add	arg01, local03
0f17c     14 12 06 F1 | 	add	arg01, #20
0f180     09 01 58 FC | 	wrword	#0, arg01
0f184     A7 22 02 FB | 	rdlong	local03, fp
0f188     01 22 06 F1 | 	add	local03, #1
0f18c     A7 22 62 FC | 	wrlong	local03, fp
0f190     08 22 56 F2 | 	cmps	local03, #8 wc
0f194     D4 FF 9F CD |  if_b	jmp	#LR__1190
0f198                 | LR__1191
0f198     37 00 00 FF 
0f19c     10 E4 85 F1 | 	sub	objptr, ##28176
0f1a0     10 4E 85 F1 | 	sub	fp, #16
0f1a4     64 00 90 FD | 	jmp	#LR__1193
0f1a8                 | LR__1192
0f1a8     EC C9 BF FD | 	call	#_pop
0f1ac     FF 1E 02 F6 | 	mov	local01, result3
0f1b0     A7 FA 61 FC | 	wrlong	result1, fp
0f1b4     04 4E 05 F1 | 	add	fp, #4
0f1b8     A7 FC 61 FC | 	wrlong	result2, fp
0f1bc     04 4E 05 F1 | 	add	fp, #4
0f1c0     A7 1E 62 FC | 	wrlong	local01, fp
0f1c4     08 4E 85 F1 | 	sub	fp, #8
0f1c8     A7 12 02 F6 | 	mov	arg01, fp
0f1cc     98 6A B0 FD | 	call	#_converttoint
0f1d0     FD 22 52 F6 | 	abs	local03, result1 wc
0f1d4     07 22 06 F5 | 	and	local03, #7
0f1d8     11 21 82 F6 | 	negc	local02, local03
0f1dc     0C 4E 05 F1 | 	add	fp, #12
0f1e0     A7 20 62 FC | 	wrlong	local02, fp
0f1e4     37 00 00 FF 
0f1e8     10 E4 05 F1 | 	add	objptr, ##28176
0f1ec     F2 12 02 FB | 	rdlong	arg01, objptr
0f1f0     37 00 00 FF 
0f1f4     10 E4 85 F1 | 	sub	objptr, ##28176
0f1f8     0C 4E 85 F1 | 	sub	fp, #12
0f1fc     06 20 66 F0 | 	shl	local02, #6
0f200     10 13 02 F1 | 	add	arg01, local02
0f204     14 12 06 F1 | 	add	arg01, #20
0f208     09 01 58 FC | 	wrword	#0, arg01
0f20c                 | LR__1193
0f20c     A7 F0 03 F6 | 	mov	ptra, fp
0f210     B2 00 A0 FD | 	call	#popregs_
0f214                 | _do_shutup_ret
0f214     2D 00 64 FD | 	ret
0f218                 | 
0f218                 | ' 
0f218                 | ' 
0f218                 | ' sub do_release
0f218                 | _do_release
0f218     00 4A 05 F6 | 	mov	COUNT_, #0
0f21c     A8 00 A0 FD | 	call	#pushregs_
0f220     10 F0 07 F1 | 	add	ptra, #16
0f224     70 C9 BF FD | 	call	#_pop
0f228     FF 14 02 F6 | 	mov	arg02, result3
0f22c     A7 FA 61 FC | 	wrlong	result1, fp
0f230     04 4E 05 F1 | 	add	fp, #4
0f234     A7 FC 61 FC | 	wrlong	result2, fp
0f238     04 4E 05 F1 | 	add	fp, #4
0f23c     A7 14 62 FC | 	wrlong	arg02, fp
0f240     08 4E 85 F1 | 	sub	fp, #8
0f244     A7 12 02 F6 | 	mov	arg01, fp
0f248     1C 6A B0 FD | 	call	#_converttoint
0f24c     0C 4E 05 F1 | 	add	fp, #12
0f250     A7 FA 61 FC | 	wrlong	result1, fp
0f254                 | ' t1=pop()
0f254                 | ' channel=converttoint(t1)
0f254                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255 ' else printerror
0f254     0C 4E 85 F1 | 	sub	fp, #12
0f258     00 FA 55 F2 | 	cmps	result1, #0 wc
0f25c     44 00 90 CD |  if_b	jmp	#LR__1200
0f260     0C 4E 05 F1 | 	add	fp, #12
0f264     A7 14 02 FB | 	rdlong	arg02, fp
0f268     0C 4E 85 F1 | 	sub	fp, #12
0f26c     08 14 56 F2 | 	cmps	arg02, #8 wc
0f270     30 00 90 3D |  if_ae	jmp	#LR__1200
0f274     37 00 00 FF 
0f278     10 E4 05 F1 | 	add	objptr, ##28176
0f27c     F2 12 02 FB | 	rdlong	arg01, objptr
0f280     37 00 00 FF 
0f284     10 E4 85 F1 | 	sub	objptr, ##28176
0f288     0C 4E 05 F1 | 	add	fp, #12
0f28c     A7 14 02 FB | 	rdlong	arg02, fp
0f290     0C 4E 85 F1 | 	sub	fp, #12
0f294     06 14 66 F0 | 	shl	arg02, #6
0f298     0A 13 02 F1 | 	add	arg01, arg02
0f29c     2C 12 06 F1 | 	add	arg01, #44
0f2a0     09 FF 69 FC | 	wrlong	#255, arg01
0f2a4                 | LR__1200
0f2a4     A7 F0 03 F6 | 	mov	ptra, fp
0f2a8     B2 00 A0 FD | 	call	#popregs_
0f2ac                 | _do_release_ret
0f2ac     2D 00 64 FD | 	ret
0f2b0                 | 
0f2b0                 | ' 
0f2b0                 | ' 
0f2b0                 | ' sub do_defsnd
0f2b0                 | _do_defsnd
0f2b0     04 4A 05 F6 | 	mov	COUNT_, #4
0f2b4     A8 00 A0 FD | 	call	#pushregs_
0f2b8     88 F0 07 F1 | 	add	ptra, #136
0f2bc     4A 00 00 FF 
0f2c0     80 E4 05 F1 | 	add	objptr, ##38016
0f2c4     F2 1A 02 FB | 	rdlong	arg05, objptr
0f2c8     0D 19 02 F6 | 	mov	arg04, arg05
0f2cc     01 18 66 F0 | 	shl	arg04, #1
0f2d0     0D 19 02 F1 | 	add	arg04, arg05
0f2d4     02 18 66 F0 | 	shl	arg04, #2
0f2d8     03 00 00 FF 
0f2dc     04 E4 85 F1 | 	sub	objptr, ##1540
0f2e0     F2 18 02 F1 | 	add	arg04, objptr
0f2e4     0C 1B 02 FB | 	rdlong	arg05, arg04
0f2e8     A7 1A 62 FC | 	wrlong	arg05, fp
0f2ec                 | ' 
0f2ec                 | ' numpar=compiledline(lineptr_e).result.uresult
0f2ec                 | ' 
0f2ec                 | ' 
0f2ec                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0f2ec                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0f2ec                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0f2ec                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0f2ec                 | ' 
0f2ec                 | ' if numpar<2 then return
0f2ec     02 1A 56 F2 | 	cmps	arg05, #2 wc
0f2f0     47 00 00 FF 
0f2f4     7C E4 85 F1 | 	sub	objptr, ##36476
0f2f8     94 08 90 CD |  if_b	jmp	#LR__1233
0f2fc                 | ' 
0f2fc                 | '   
0f2fc                 | ' if numpar=2 then
0f2fc     A7 1A 02 FB | 	rdlong	arg05, fp
0f300     02 1A 0E F2 | 	cmp	arg05, #2 wz
0f304     A0 03 90 5D |  if_ne	jmp	#LR__1220
0f308     8C C8 BF FD | 	call	#_pop
0f30c     FF 1A 02 F6 | 	mov	arg05, result3
0f310     2C 4E 05 F1 | 	add	fp, #44
0f314     A7 FA 61 FC | 	wrlong	result1, fp
0f318     04 4E 05 F1 | 	add	fp, #4
0f31c     A7 FC 61 FC | 	wrlong	result2, fp
0f320     04 4E 05 F1 | 	add	fp, #4
0f324     A7 1A 62 FC | 	wrlong	arg05, fp
0f328                 | '   t1=pop()
0f328                 | '   if t1.result_type=result_string2 then 
0f328     34 4E 85 F1 | 	sub	fp, #52
0f32c     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0f330     20 00 90 5D |  if_ne	jmp	#LR__1210
0f334     2C 4E 05 F1 | 	add	fp, #44
0f338     A7 12 02 FB | 	rdlong	arg01, fp
0f33c     2C 4E 85 F1 | 	sub	fp, #44
0f340     00 21 B0 FD | 	call	#_convertstring
0f344     38 4E 05 F1 | 	add	fp, #56
0f348     A7 FA 61 FC | 	wrlong	result1, fp
0f34c     38 4E 85 F1 | 	sub	fp, #56
0f350     58 00 90 FD | 	jmp	#LR__1213
0f354                 | LR__1210
0f354     34 4E 05 F1 | 	add	fp, #52
0f358     A7 1A 02 FB | 	rdlong	arg05, fp
0f35c     34 4E 85 F1 | 	sub	fp, #52
0f360     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0f364     18 00 90 5D |  if_ne	jmp	#LR__1211
0f368     2C 4E 05 F1 | 	add	fp, #44
0f36c     A7 1A 02 FB | 	rdlong	arg05, fp
0f370     0C 4E 05 F1 | 	add	fp, #12
0f374     A7 1A 62 FC | 	wrlong	arg05, fp
0f378     38 4E 85 F1 | 	sub	fp, #56
0f37c     2C 00 90 FD | 	jmp	#LR__1212
0f380                 | LR__1211
0f380     84 01 00 FF 
0f384     30 1A 06 F6 | 	mov	arg05, ##@LR__5403
0f388     38 4E 05 F1 | 	add	fp, #56
0f38c     A7 1A 62 FC | 	wrlong	arg05, fp
0f390     0C 4E 85 F1 | 	sub	fp, #12
0f394     A7 12 02 F6 | 	mov	arg01, fp
0f398     2C 4E 85 F1 | 	sub	fp, #44
0f39c     C8 68 B0 FD | 	call	#_converttoint
0f3a0     14 4E 05 F1 | 	add	fp, #20
0f3a4     A7 FA 61 FC | 	wrlong	result1, fp
0f3a8     14 4E 85 F1 | 	sub	fp, #20
0f3ac                 | LR__1212
0f3ac                 | LR__1213
0f3ac                 | ' 
0f3ac                 | '     
0f3ac                 | '   if s<>"" then 
0f3ac     38 4E 05 F1 | 	add	fp, #56
0f3b0     A7 12 02 FB | 	rdlong	arg01, fp
0f3b4     38 4E 85 F1 | 	sub	fp, #56
0f3b8     84 01 00 FF 
0f3bc     31 14 06 F6 | 	mov	arg02, ##@LR__5404
0f3c0     8C 15 B1 FD | 	call	#__system___string_cmp
0f3c4     00 FA 0D F2 | 	cmp	result1, #0 wz
0f3c8     E0 01 90 AD |  if_e	jmp	#LR__1216
0f3cc     C8 C7 BF FD | 	call	#_pop
0f3d0     FF 1A 02 F6 | 	mov	arg05, result3
0f3d4     2C 4E 05 F1 | 	add	fp, #44
0f3d8     A7 FA 61 FC | 	wrlong	result1, fp
0f3dc     04 4E 05 F1 | 	add	fp, #4
0f3e0     A7 FC 61 FC | 	wrlong	result2, fp
0f3e4     04 4E 05 F1 | 	add	fp, #4
0f3e8     A7 1A 62 FC | 	wrlong	arg05, fp
0f3ec     08 4E 85 F1 | 	sub	fp, #8
0f3f0     A7 12 02 F6 | 	mov	arg01, fp
0f3f4     2C 4E 85 F1 | 	sub	fp, #44
0f3f8     6C 68 B0 FD | 	call	#_converttoint
0f3fc     10 4E 05 F1 | 	add	fp, #16
0f400     A7 FA 61 FC | 	wrlong	result1, fp
0f404                 | '     t1=pop()
0f404                 | '     channel=converttoint(t1) : if channel>31 then return
0f404     FD 1A 02 F6 | 	mov	arg05, result1
0f408     10 4E 85 F1 | 	sub	fp, #16
0f40c     20 1A 56 F2 | 	cmps	arg05, #32 wc
0f410     7C 07 90 3D |  if_ae	jmp	#LR__1233
0f414                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0f414     09 12 06 F6 | 	mov	arg01, #9
0f418     7C 65 B1 FD | 	call	#__system__close
0f41c     09 1E 06 F6 | 	mov	local01, #9
0f420     84 01 00 FF 
0f424     32 12 06 F6 | 	mov	arg01, ##@LR__5405
0f428     38 4E 05 F1 | 	add	fp, #56
0f42c     A7 14 02 FB | 	rdlong	arg02, fp
0f430     38 4E 85 F1 | 	sub	fp, #56
0f434     4C 15 B1 FD | 	call	#__system___string_concat
0f438     FD 14 02 F6 | 	mov	arg02, result1
0f43c     0F 13 02 F6 | 	mov	arg01, local01
0f440     00 16 06 F6 | 	mov	arg03, #0
0f444     E4 20 B1 FD | 	call	#__system___basic_open_string
0f448     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0f44c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0f450     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0f454     5A 00 00 FF 
0f458     44 E4 05 F1 | 	add	objptr, ##46148
0f45c     F2 FA 61 FC | 	wrlong	result1, objptr
0f460                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0f460     5A 00 00 FF 
0f464     44 E4 85 F1 | 	sub	objptr, ##46148
0f468     B0 00 90 AD |  if_e	jmp	#LR__1214
0f46c     00 12 06 F6 | 	mov	arg01, #0
0f470     F4 6E B1 FD | 	call	#__system___getiolock_0540
0f474     FD 12 02 F6 | 	mov	arg01, result1
0f478     AC 14 B1 FD | 	call	#__system___lockmem
0f47c     84 01 00 FF 
0f480     3F 14 06 F6 | 	mov	arg02, ##@LR__5406
0f484     00 12 06 F6 | 	mov	arg01, #0
0f488     00 16 06 F6 | 	mov	arg03, #0
0f48c     8C 21 B1 FD | 	call	#__system___basic_print_string
0f490     5A 00 00 FF 
0f494     44 E4 05 F1 | 	add	objptr, ##46148
0f498     F2 14 02 FB | 	rdlong	arg02, objptr
0f49c     5A 00 00 FF 
0f4a0     44 E4 85 F1 | 	sub	objptr, ##46148
0f4a4     00 12 06 F6 | 	mov	arg01, #0
0f4a8     00 16 06 F6 | 	mov	arg03, #0
0f4ac     0A 18 06 F6 | 	mov	arg04, #10
0f4b0     AC 21 B1 FD | 	call	#__system___basic_print_integer
0f4b4     84 01 00 FF 
0f4b8     4D 14 06 F6 | 	mov	arg02, ##@LR__5407
0f4bc     00 12 06 F6 | 	mov	arg01, #0
0f4c0     00 16 06 F6 | 	mov	arg03, #0
0f4c4     54 21 B1 FD | 	call	#__system___basic_print_string
0f4c8     00 1E 06 F6 | 	mov	local01, #0
0f4cc     5A 00 00 FF 
0f4d0     44 E4 05 F1 | 	add	objptr, ##46148
0f4d4     F2 12 02 FB | 	rdlong	arg01, objptr
0f4d8     5A 00 00 FF 
0f4dc     44 E4 85 F1 | 	sub	objptr, ##46148
0f4e0     0C 3B B1 FD | 	call	#__system___strerror
0f4e4     FD 14 02 F6 | 	mov	arg02, result1
0f4e8     0F 13 02 F6 | 	mov	arg01, local01
0f4ec     00 16 06 F6 | 	mov	arg03, #0
0f4f0     28 21 B1 FD | 	call	#__system___basic_print_string
0f4f4     00 12 06 F6 | 	mov	arg01, #0
0f4f8     0A 14 06 F6 | 	mov	arg02, #10
0f4fc     00 16 06 F6 | 	mov	arg03, #0
0f500     C0 20 B1 FD | 	call	#__system___basic_print_char
0f504     00 12 06 F6 | 	mov	arg01, #0
0f508     5C 6E B1 FD | 	call	#__system___getiolock_0540
0f50c     FD 00 68 FC | 	wrlong	#0, result1
0f510     09 12 06 F6 | 	mov	arg01, #9
0f514     80 64 B1 FD | 	call	#__system__close
0f518     74 06 90 FD | 	jmp	#LR__1233
0f51c                 | LR__1214
0f51c                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
0f51c     04 4E 05 F1 | 	add	fp, #4
0f520     A7 00 68 FC | 	wrlong	#0, fp
0f524                 | LR__1215
0f524     A7 1E 02 FB | 	rdlong	local01, fp
0f528     01 1E 66 F0 | 	shl	local01, #1
0f52c     11 14 06 F6 | 	mov	arg02, #17
0f530     0F 15 02 F1 | 	add	arg02, local01
0f534     78 4E 05 F1 | 	add	fp, #120
0f538     A7 16 02 F6 | 	mov	arg03, fp
0f53c     7C 4E 85 F1 | 	sub	fp, #124
0f540     09 12 06 F6 | 	mov	arg01, #9
0f544     01 18 06 F6 | 	mov	arg04, #1
0f548     02 1A 06 F6 | 	mov	arg05, #2
0f54c     48 22 B1 FD | 	call	#__system___basic_get
0f550     10 4E 05 F1 | 	add	fp, #16
0f554     A7 12 02 FB | 	rdlong	arg01, fp
0f558     0B 12 66 F0 | 	shl	arg01, #11
0f55c     0C 4E 85 F1 | 	sub	fp, #12
0f560     A7 1E 02 FB | 	rdlong	local01, fp
0f564     01 1E 66 F0 | 	shl	local01, #1
0f568     0F 13 02 F1 | 	add	arg01, local01
0f56c     78 4E 05 F1 | 	add	fp, #120
0f570     A7 14 E2 FA | 	rdword	arg02, fp
0f574     7C 4E 85 F1 | 	sub	fp, #124
0f578     0F 14 66 F7 | 	signx	arg02, #15
0f57c     F0 E1 B0 FD | 	call	#_psdpoke
0f580     04 4E 05 F1 | 	add	fp, #4
0f584     A7 1E 02 FB | 	rdlong	local01, fp
0f588     01 1E 06 F1 | 	add	local01, #1
0f58c     A7 1E 62 FC | 	wrlong	local01, fp
0f590     02 00 00 FF 
0f594     01 1E 56 F2 | 	cmps	local01, ##1025 wc
0f598     88 FF 9F CD |  if_b	jmp	#LR__1215
0f59c     04 4E 85 F1 | 	sub	fp, #4
0f5a0                 | '     close #9
0f5a0     09 12 06 F6 | 	mov	arg01, #9
0f5a4     F0 63 B1 FD | 	call	#__system__close
0f5a8                 | '                                                                        'for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0f5a8                 | '     return
0f5a8     E4 05 90 FD | 	jmp	#LR__1233
0f5ac                 | LR__1216
0f5ac                 | '     if wptr < ($80000 - 2048) then 
0f5ac     14 4E 05 F1 | 	add	fp, #20
0f5b0     A7 1E 02 FB | 	rdlong	local01, fp
0f5b4     14 4E 85 F1 | 	sub	fp, #20
0f5b8     FC 03 00 FF 
0f5bc     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0f5c0     70 00 90 3D |  if_ae	jmp	#LR__1218
0f5c4                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
0f5c4     04 4E 05 F1 | 	add	fp, #4
0f5c8     A7 00 68 FC | 	wrlong	#0, fp
0f5cc     04 4E 85 F1 | 	sub	fp, #4
0f5d0                 | LR__1217
0f5d0     10 4E 05 F1 | 	add	fp, #16
0f5d4     A7 1E 02 FB | 	rdlong	local01, fp
0f5d8     0B 1E 66 F0 | 	shl	local01, #11
0f5dc     0C 4E 85 F1 | 	sub	fp, #12
0f5e0     A7 1A 02 FB | 	rdlong	arg05, fp
0f5e4     0D 19 02 F6 | 	mov	arg04, arg05
0f5e8     01 18 66 F0 | 	shl	arg04, #1
0f5ec     0C 1F 02 F1 | 	add	local01, arg04
0f5f0     10 4E 05 F1 | 	add	fp, #16
0f5f4     A7 12 02 FB | 	rdlong	arg01, fp
0f5f8     14 4E 85 F1 | 	sub	fp, #20
0f5fc     01 1A 66 F0 | 	shl	arg05, #1
0f600     0D 13 02 F1 | 	add	arg01, arg05
0f604     09 15 E2 FA | 	rdword	arg02, arg01
0f608     0F 13 02 F6 | 	mov	arg01, local01
0f60c     60 E1 B0 FD | 	call	#_psdpoke
0f610     04 4E 05 F1 | 	add	fp, #4
0f614     A7 1E 02 FB | 	rdlong	local01, fp
0f618     01 1E 06 F1 | 	add	local01, #1
0f61c     A7 1E 62 FC | 	wrlong	local01, fp
0f620     04 4E 85 F1 | 	sub	fp, #4
0f624     02 00 00 FF 
0f628     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0f62c     A0 FF 9F CD |  if_b	jmp	#LR__1217
0f630     5C 05 90 FD | 	jmp	#LR__1233
0f634                 | LR__1218
0f634                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
0f634     04 4E 05 F1 | 	add	fp, #4
0f638     A7 00 68 FC | 	wrlong	#0, fp
0f63c     04 4E 85 F1 | 	sub	fp, #4
0f640                 | LR__1219
0f640     10 4E 05 F1 | 	add	fp, #16
0f644     A7 1E 02 FB | 	rdlong	local01, fp
0f648     0B 1E 66 F0 | 	shl	local01, #11
0f64c     0C 4E 85 F1 | 	sub	fp, #12
0f650     A7 1A 02 FB | 	rdlong	arg05, fp
0f654     0D 19 02 F6 | 	mov	arg04, arg05
0f658     01 18 66 F0 | 	shl	arg04, #1
0f65c     0C 1F 02 F1 | 	add	local01, arg04
0f660     10 4E 05 F1 | 	add	fp, #16
0f664     A7 12 02 FB | 	rdlong	arg01, fp
0f668     14 4E 85 F1 | 	sub	fp, #20
0f66c     01 1A 66 F0 | 	shl	arg05, #1
0f670     0D 13 02 F1 | 	add	arg01, arg05
0f674     38 E2 B0 FD | 	call	#_psdpeek
0f678     FD 14 02 F6 | 	mov	arg02, result1
0f67c     0F 13 02 F6 | 	mov	arg01, local01
0f680     EC E0 B0 FD | 	call	#_psdpoke
0f684     04 4E 05 F1 | 	add	fp, #4
0f688     A7 1E 02 FB | 	rdlong	local01, fp
0f68c     01 1E 06 F1 | 	add	local01, #1
0f690     A7 1E 62 FC | 	wrlong	local01, fp
0f694     04 4E 85 F1 | 	sub	fp, #4
0f698     02 00 00 FF 
0f69c     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0f6a0     9C FF 9F CD |  if_b	jmp	#LR__1219
0f6a4                 | '     return 
0f6a4     E8 04 90 FD | 	jmp	#LR__1233
0f6a8                 | '   
0f6a8                 | '                                                                         '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0f6a8                 | '   return
0f6a8                 | LR__1220
0f6a8                 | ' for i=0 to 15 : harm(i)=0: next i  
0f6a8     04 4E 05 F1 | 	add	fp, #4
0f6ac     A7 00 68 FC | 	wrlong	#0, fp
0f6b0     97 16 48 FB | 	callpa	#(@LR__1222-@LR__1221)>>2,fcache_load_ptr_
0f6b4                 | LR__1221
0f6b4     A7 1E 02 FB | 	rdlong	local01, fp
0f6b8     02 1E 66 F0 | 	shl	local01, #2
0f6bc     38 4E 05 F1 | 	add	fp, #56
0f6c0     A7 1E 02 F1 | 	add	local01, fp
0f6c4     0F 01 68 FC | 	wrlong	#0, local01
0f6c8     38 4E 85 F1 | 	sub	fp, #56
0f6cc     A7 1E 02 FB | 	rdlong	local01, fp
0f6d0     01 1E 06 F1 | 	add	local01, #1
0f6d4     A7 1E 62 FC | 	wrlong	local01, fp
0f6d8     10 1E 56 F2 | 	cmps	local01, #16 wc
0f6dc     D4 FF 9F CD |  if_b	jmp	#LR__1221
0f6e0                 | LR__1222
0f6e0     04 4E 85 F1 | 	sub	fp, #4
0f6e4                 | ' for i=numpar to 2 step -1 
0f6e4     A7 1E 02 FB | 	rdlong	local01, fp
0f6e8     04 4E 05 F1 | 	add	fp, #4
0f6ec     A7 1E 62 FC | 	wrlong	local01, fp
0f6f0     04 4E 85 F1 | 	sub	fp, #4
0f6f4                 | LR__1223
0f6f4     A0 C4 BF FD | 	call	#_pop
0f6f8     2C 4E 05 F1 | 	add	fp, #44
0f6fc     A7 FA 61 FC | 	wrlong	result1, fp
0f700     04 4E 05 F1 | 	add	fp, #4
0f704     A7 FC 61 FC | 	wrlong	result2, fp
0f708     04 4E 05 F1 | 	add	fp, #4
0f70c     A7 FE 61 FC | 	wrlong	result3, fp
0f710     30 4E 85 F1 | 	sub	fp, #48
0f714     A7 1E 02 FB | 	rdlong	local01, fp
0f718     02 1E 86 F1 | 	sub	local01, #2
0f71c     02 1E 66 F0 | 	shl	local01, #2
0f720     38 4E 05 F1 | 	add	fp, #56
0f724     A7 1E 02 F1 | 	add	local01, fp
0f728     10 4E 85 F1 | 	sub	fp, #16
0f72c     A7 12 02 F6 | 	mov	arg01, fp
0f730     2C 4E 85 F1 | 	sub	fp, #44
0f734     EC 65 B0 FD | 	call	#_converttofloat
0f738     0F FB 61 FC | 	wrlong	result1, local01
0f73c     04 4E 05 F1 | 	add	fp, #4
0f740     A7 1E 02 FB | 	rdlong	local01, fp
0f744     01 1E 86 F1 | 	sub	local01, #1
0f748     A7 1E 62 FC | 	wrlong	local01, fp
0f74c     04 4E 85 F1 | 	sub	fp, #4
0f750     02 1E 56 F2 | 	cmps	local01, #2 wc
0f754     9C FF 9F 3D |  if_ae	jmp	#LR__1223
0f758     3C C4 BF FD | 	call	#_pop
0f75c     FF 1E 02 F6 | 	mov	local01, result3
0f760     2C 4E 05 F1 | 	add	fp, #44
0f764     A7 FA 61 FC | 	wrlong	result1, fp
0f768     04 4E 05 F1 | 	add	fp, #4
0f76c     A7 FC 61 FC | 	wrlong	result2, fp
0f770     04 4E 05 F1 | 	add	fp, #4
0f774     A7 1E 62 FC | 	wrlong	local01, fp
0f778     08 4E 85 F1 | 	sub	fp, #8
0f77c     A7 12 02 F6 | 	mov	arg01, fp
0f780     2C 4E 85 F1 | 	sub	fp, #44
0f784     E0 64 B0 FD | 	call	#_converttoint
0f788     10 4E 05 F1 | 	add	fp, #16
0f78c     A7 FA 61 FC | 	wrlong	result1, fp
0f790                 | ' t1=pop()
0f790                 | ' channel=converttoint(t1) : : if channel>31 then return
0f790     FD 1E 02 F6 | 	mov	local01, result1
0f794     10 4E 85 F1 | 	sub	fp, #16
0f798     20 1E 56 F2 | 	cmps	local01, #32 wc
0f79c     F0 03 90 3D |  if_ae	jmp	#LR__1233
0f7a0     20 4E 05 F1 | 	add	fp, #32
0f7a4     A7 00 68 FC | 	wrlong	#0, fp
0f7a8                 | ' max=0
0f7a8                 | ' if harm(0)<0 then
0f7a8     1C 4E 05 F1 | 	add	fp, #28
0f7ac     A7 12 02 FB | 	rdlong	arg01, fp
0f7b0     3C 4E 85 F1 | 	sub	fp, #60
0f7b4     00 14 06 F6 | 	mov	arg02, #0
0f7b8     01 16 06 F6 | 	mov	arg03, #1
0f7bc     50 41 B1 FD | 	call	#__system___float_cmp
0f7c0     00 FA 55 F2 | 	cmps	result1, #0 wc
0f7c4     04 01 90 3D |  if_ae	jmp	#LR__1226
0f7c8     3C 4E 05 F1 | 	add	fp, #60
0f7cc     A7 FA 01 FB | 	rdlong	result1, fp
0f7d0     1F FA 05 F4 | 	bitl	result1, #31
0f7d4     24 4E 85 F1 | 	sub	fp, #36
0f7d8     A7 FA 61 FC | 	wrlong	result1, fp
0f7dc     28 4E 05 F1 | 	add	fp, #40
0f7e0     A7 FA 01 FB | 	rdlong	result1, fp
0f7e4     1F FA 05 F4 | 	bitl	result1, #31
0f7e8     24 4E 85 F1 | 	sub	fp, #36
0f7ec     A7 FA 61 FC | 	wrlong	result1, fp
0f7f0     20 4E 05 F1 | 	add	fp, #32
0f7f4     00 C0 9F FF 
0f7f8     A7 00 68 FC | 	wrlong	##1065353216, fp
0f7fc     24 4E 85 F1 | 	sub	fp, #36
0f800     A7 1E 02 FB | 	rdlong	local01, fp
0f804     28 4E 05 F1 | 	add	fp, #40
0f808     A7 1E 62 FC | 	wrlong	local01, fp
0f80c     24 4E 85 F1 | 	sub	fp, #36
0f810     A7 1E 02 FB | 	rdlong	local01, fp
0f814     28 4E 05 F1 | 	add	fp, #40
0f818     A7 1E 62 FC | 	wrlong	local01, fp
0f81c                 | '   harm(0)=1
0f81c                 | '   harm(1)=even
0f81c                 | '   harm(2)=odd
0f81c                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0f81c     40 4E 85 F1 | 	sub	fp, #64
0f820     A7 06 68 FC | 	wrlong	#3, fp
0f824                 | LR__1224
0f824     A7 1A 02 FB | 	rdlong	arg05, fp
0f828     0D 21 02 F6 | 	mov	local02, arg05
0f82c     02 20 66 F0 | 	shl	local02, #2
0f830     38 4E 05 F1 | 	add	fp, #56
0f834     A7 20 02 F1 | 	add	local02, fp
0f838     02 1A 86 F1 | 	sub	arg05, #2
0f83c     02 1A 66 F0 | 	shl	arg05, #2
0f840     A7 1A 02 F1 | 	add	arg05, fp
0f844     0D 13 02 FB | 	rdlong	arg01, arg05
0f848     24 4E 85 F1 | 	sub	fp, #36
0f84c     A7 14 02 FB | 	rdlong	arg02, fp
0f850     18 4E 85 F1 | 	sub	fp, #24
0f854     84 3C B1 FD | 	call	#__system___float_mul
0f858     10 FB 61 FC | 	wrlong	result1, local02
0f85c     04 4E 05 F1 | 	add	fp, #4
0f860     A7 22 02 FB | 	rdlong	local03, fp
0f864     02 22 06 F1 | 	add	local03, #2
0f868     A7 22 62 FC | 	wrlong	local03, fp
0f86c     10 22 56 F2 | 	cmps	local03, #16 wc
0f870     B0 FF 9F CD |  if_b	jmp	#LR__1224
0f874                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0f874     A7 08 68 FC | 	wrlong	#4, fp
0f878                 | LR__1225
0f878     A7 22 02 FB | 	rdlong	local03, fp
0f87c     11 21 02 F6 | 	mov	local02, local03
0f880     02 20 66 F0 | 	shl	local02, #2
0f884     38 4E 05 F1 | 	add	fp, #56
0f888     A7 20 02 F1 | 	add	local02, fp
0f88c     02 22 86 F1 | 	sub	local03, #2
0f890     02 22 66 F0 | 	shl	local03, #2
0f894     A7 22 02 F1 | 	add	local03, fp
0f898     11 13 02 FB | 	rdlong	arg01, local03
0f89c     20 4E 85 F1 | 	sub	fp, #32
0f8a0     A7 14 02 FB | 	rdlong	arg02, fp
0f8a4     1C 4E 85 F1 | 	sub	fp, #28
0f8a8     30 3C B1 FD | 	call	#__system___float_mul
0f8ac     10 FB 61 FC | 	wrlong	result1, local02
0f8b0     04 4E 05 F1 | 	add	fp, #4
0f8b4     A7 22 02 FB | 	rdlong	local03, fp
0f8b8     02 22 06 F1 | 	add	local03, #2
0f8bc     A7 22 62 FC | 	wrlong	local03, fp
0f8c0     0F 22 56 F2 | 	cmps	local03, #15 wc
0f8c4     B0 FF 9F CD |  if_b	jmp	#LR__1225
0f8c8     04 4E 85 F1 | 	sub	fp, #4
0f8cc                 | LR__1226
0f8cc                 | ' if harm(0)>=0 then ' synthesize with harmonics
0f8cc     3C 4E 05 F1 | 	add	fp, #60
0f8d0     A7 12 02 FB | 	rdlong	arg01, fp
0f8d4     3C 4E 85 F1 | 	sub	fp, #60
0f8d8     00 14 06 F6 | 	mov	arg02, #0
0f8dc     01 16 66 F6 | 	neg	arg03, #1
0f8e0     2C 40 B1 FD | 	call	#__system___float_cmp
0f8e4     00 FA 55 F2 | 	cmps	result1, #0 wc
0f8e8     A4 02 90 CD |  if_b	jmp	#LR__1232
0f8ec                 | '   for i=0 to 1023
0f8ec     04 4E 05 F1 | 	add	fp, #4
0f8f0     A7 00 68 FC | 	wrlong	#0, fp
0f8f4     04 4E 85 F1 | 	sub	fp, #4
0f8f8                 | LR__1227
0f8f8     24 4E 05 F1 | 	add	fp, #36
0f8fc     A7 00 68 FC | 	wrlong	#0, fp
0f900                 | '     spl=0
0f900                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0f900     1C 4E 85 F1 | 	sub	fp, #28
0f904     A7 00 68 FC | 	wrlong	#0, fp
0f908                 | LR__1228
0f908     A7 20 02 FB | 	rdlong	local02, fp
0f90c     02 20 66 F0 | 	shl	local02, #2
0f910     34 4E 05 F1 | 	add	fp, #52
0f914     A7 20 02 F1 | 	add	local02, fp
0f918     10 23 02 FB | 	rdlong	local03, local02
0f91c     87 E4 1D FF 
0f920     DB 21 06 F6 | 	mov	local02, ##1003032539
0f924     38 4E 85 F1 | 	sub	fp, #56
0f928     A7 12 02 FB | 	rdlong	arg01, fp
0f92c     04 4E 85 F1 | 	sub	fp, #4
0f930     09 13 52 F6 | 	abs	arg01, arg01 wc
0f934     1F 24 C6 C9 |  if_b	decod	local04, #31
0f938     00 24 06 36 |  if_ae	mov	local04, #0
0f93c     98 37 B1 FD | 	call	#__system___float_fromuns
0f940     12 FB 61 F5 | 	xor	result1, local04
0f944     FD 14 02 F6 | 	mov	arg02, result1
0f948     10 13 02 F6 | 	mov	arg01, local02
0f94c     8C 3B B1 FD | 	call	#__system___float_mul
0f950     FD 20 02 F6 | 	mov	local02, result1
0f954     08 4E 05 F1 | 	add	fp, #8
0f958     A7 12 02 FB | 	rdlong	arg01, fp
0f95c     08 4E 85 F1 | 	sub	fp, #8
0f960     01 12 06 F1 | 	add	arg01, #1
0f964     09 13 52 F6 | 	abs	arg01, arg01 wc
0f968     1F 24 C6 C9 |  if_b	decod	local04, #31
0f96c     00 24 06 36 |  if_ae	mov	local04, #0
0f970     64 37 B1 FD | 	call	#__system___float_fromuns
0f974     12 FB 61 F5 | 	xor	result1, local04
0f978     FD 14 02 F6 | 	mov	arg02, result1
0f97c     10 13 02 F6 | 	mov	arg01, local02
0f980     58 3B B1 FD | 	call	#__system___float_mul
0f984     FD 12 02 F6 | 	mov	arg01, result1
0f988     8C 44 B1 FD | 	call	#__system____builtin_sinf
0f98c     FD 14 02 F6 | 	mov	arg02, result1
0f990     11 13 02 F6 | 	mov	arg01, local03
0f994     44 3B B1 FD | 	call	#__system___float_mul
0f998     FD 14 02 F6 | 	mov	arg02, result1
0f99c     24 4E 05 F1 | 	add	fp, #36
0f9a0     A7 12 02 FB | 	rdlong	arg01, fp
0f9a4     24 4E 85 F1 | 	sub	fp, #36
0f9a8     60 37 B1 FD | 	call	#__system___float_add
0f9ac     24 4E 05 F1 | 	add	fp, #36
0f9b0     A7 FA 61 FC | 	wrlong	result1, fp
0f9b4     1C 4E 85 F1 | 	sub	fp, #28
0f9b8     A7 16 02 FB | 	rdlong	arg03, fp
0f9bc     01 16 06 F1 | 	add	arg03, #1
0f9c0     A7 16 62 FC | 	wrlong	arg03, fp
0f9c4     10 16 56 F2 | 	cmps	arg03, #16 wc
0f9c8     3C FF 9F CD |  if_b	jmp	#LR__1228
0f9cc                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0f9cc     1C 4E 05 F1 | 	add	fp, #28
0f9d0     A7 12 02 FB | 	rdlong	arg01, fp
0f9d4     1F 12 06 F4 | 	bitl	arg01, #31
0f9d8     04 4E 85 F1 | 	sub	fp, #4
0f9dc     A7 14 02 FB | 	rdlong	arg02, fp
0f9e0     20 4E 85 F1 | 	sub	fp, #32
0f9e4     01 16 66 F6 | 	neg	arg03, #1
0f9e8     24 3F B1 FD | 	call	#__system___float_cmp
0f9ec     01 FA 55 F2 | 	cmps	result1, #1 wc
0f9f0     18 00 90 CD |  if_b	jmp	#LR__1229
0f9f4     24 4E 05 F1 | 	add	fp, #36
0f9f8     A7 FA 01 FB | 	rdlong	result1, fp
0f9fc     1F FA 05 F4 | 	bitl	result1, #31
0fa00     04 4E 85 F1 | 	sub	fp, #4
0fa04     A7 FA 61 FC | 	wrlong	result1, fp
0fa08     20 4E 85 F1 | 	sub	fp, #32
0fa0c                 | LR__1229
0fa0c     04 4E 05 F1 | 	add	fp, #4
0fa10     A7 22 02 FB | 	rdlong	local03, fp
0fa14     01 22 06 F1 | 	add	local03, #1
0fa18     A7 22 62 FC | 	wrlong	local03, fp
0fa1c     04 4E 85 F1 | 	sub	fp, #4
0fa20     02 00 00 FF 
0fa24     00 22 56 F2 | 	cmps	local03, ##1024 wc
0fa28     CC FE 9F CD |  if_b	jmp	#LR__1227
0fa2c                 | '   for i=0 to 1023
0fa2c     04 4E 05 F1 | 	add	fp, #4
0fa30     A7 00 68 FC | 	wrlong	#0, fp
0fa34     04 4E 85 F1 | 	sub	fp, #4
0fa38                 | LR__1230
0fa38     24 4E 05 F1 | 	add	fp, #36
0fa3c     A7 00 68 FC | 	wrlong	#0, fp
0fa40                 | '     spl=0
0fa40                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0fa40     1C 4E 85 F1 | 	sub	fp, #28
0fa44     A7 00 68 FC | 	wrlong	#0, fp
0fa48                 | LR__1231
0fa48     A7 22 02 FB | 	rdlong	local03, fp
0fa4c     02 22 66 F0 | 	shl	local03, #2
0fa50     34 4E 05 F1 | 	add	fp, #52
0fa54     A7 22 02 F1 | 	add	local03, fp
0fa58     11 23 02 FB | 	rdlong	local03, local03
0fa5c     1C 4E 85 F1 | 	sub	fp, #28
0fa60     A7 14 02 FB | 	rdlong	arg02, fp
0fa64     20 4E 85 F1 | 	sub	fp, #32
0fa68     58 7F 23 FF 
0fa6c     00 12 06 F6 | 	mov	arg01, ##1191096320
0fa70     6C 3C B1 FD | 	call	#__system___float_div
0fa74     FD 14 02 F6 | 	mov	arg02, result1
0fa78     11 13 02 F6 | 	mov	arg01, local03
0fa7c     5C 3A B1 FD | 	call	#__system___float_mul
0fa80     FD 22 02 F6 | 	mov	local03, result1
0fa84     87 E4 1D FF 
0fa88     DB 21 06 F6 | 	mov	local02, ##1003032539
0fa8c     04 4E 05 F1 | 	add	fp, #4
0fa90     A7 12 02 FB | 	rdlong	arg01, fp
0fa94     04 4E 85 F1 | 	sub	fp, #4
0fa98     09 13 52 F6 | 	abs	arg01, arg01 wc
0fa9c     1F 24 C6 C9 |  if_b	decod	local04, #31
0faa0     00 24 06 36 |  if_ae	mov	local04, #0
0faa4     30 36 B1 FD | 	call	#__system___float_fromuns
0faa8     12 FB 61 F5 | 	xor	result1, local04
0faac     FD 14 02 F6 | 	mov	arg02, result1
0fab0     10 13 02 F6 | 	mov	arg01, local02
0fab4     24 3A B1 FD | 	call	#__system___float_mul
0fab8     FD 20 02 F6 | 	mov	local02, result1
0fabc     08 4E 05 F1 | 	add	fp, #8
0fac0     A7 12 02 FB | 	rdlong	arg01, fp
0fac4     08 4E 85 F1 | 	sub	fp, #8
0fac8     01 12 06 F1 | 	add	arg01, #1
0facc     09 13 52 F6 | 	abs	arg01, arg01 wc
0fad0     1F 24 C6 C9 |  if_b	decod	local04, #31
0fad4     00 24 06 36 |  if_ae	mov	local04, #0
0fad8     FC 35 B1 FD | 	call	#__system___float_fromuns
0fadc     12 FB 61 F5 | 	xor	result1, local04
0fae0     FD 14 02 F6 | 	mov	arg02, result1
0fae4     10 13 02 F6 | 	mov	arg01, local02
0fae8     F0 39 B1 FD | 	call	#__system___float_mul
0faec     FD 12 02 F6 | 	mov	arg01, result1
0faf0     24 43 B1 FD | 	call	#__system____builtin_sinf
0faf4     FD 14 02 F6 | 	mov	arg02, result1
0faf8     11 13 02 F6 | 	mov	arg01, local03
0fafc     DC 39 B1 FD | 	call	#__system___float_mul
0fb00     FD 14 02 F6 | 	mov	arg02, result1
0fb04     24 4E 05 F1 | 	add	fp, #36
0fb08     A7 12 02 FB | 	rdlong	arg01, fp
0fb0c     24 4E 85 F1 | 	sub	fp, #36
0fb10     F8 35 B1 FD | 	call	#__system___float_add
0fb14     24 4E 05 F1 | 	add	fp, #36
0fb18     A7 FA 61 FC | 	wrlong	result1, fp
0fb1c     1C 4E 85 F1 | 	sub	fp, #28
0fb20     A7 22 02 FB | 	rdlong	local03, fp
0fb24     01 22 06 F1 | 	add	local03, #1
0fb28     A7 22 62 FC | 	wrlong	local03, fp
0fb2c     10 22 56 F2 | 	cmps	local03, #16 wc
0fb30     14 FF 9F CD |  if_b	jmp	#LR__1231
0fb34     08 4E 05 F1 | 	add	fp, #8
0fb38     A7 22 02 FB | 	rdlong	local03, fp
0fb3c     0B 22 66 F0 | 	shl	local03, #11
0fb40     0C 4E 85 F1 | 	sub	fp, #12
0fb44     A7 20 02 FB | 	rdlong	local02, fp
0fb48     01 20 66 F0 | 	shl	local02, #1
0fb4c     10 23 02 F1 | 	add	local03, local02
0fb50     20 4E 05 F1 | 	add	fp, #32
0fb54     A7 12 02 FB | 	rdlong	arg01, fp
0fb58     24 4E 85 F1 | 	sub	fp, #36
0fb5c     01 14 06 F6 | 	mov	arg02, #1
0fb60     40 3E B1 FD | 	call	#__system___float_tointeger
0fb64     FD 14 02 F6 | 	mov	arg02, result1
0fb68     11 13 02 F6 | 	mov	arg01, local03
0fb6c     00 DC B0 FD | 	call	#_psdpoke
0fb70     04 4E 05 F1 | 	add	fp, #4
0fb74     A7 22 02 FB | 	rdlong	local03, fp
0fb78     01 22 06 F1 | 	add	local03, #1
0fb7c     A7 22 62 FC | 	wrlong	local03, fp
0fb80     04 4E 85 F1 | 	sub	fp, #4
0fb84     02 00 00 FF 
0fb88     00 22 56 F2 | 	cmps	local03, ##1024 wc
0fb8c     A8 FE 9F CD |  if_b	jmp	#LR__1230
0fb90                 | LR__1232
0fb90                 | LR__1233
0fb90     A7 F0 03 F6 | 	mov	ptra, fp
0fb94     B2 00 A0 FD | 	call	#popregs_
0fb98                 | _do_defsnd_ret
0fb98     2D 00 64 FD | 	ret
0fb9c                 | 
0fb9c                 | ' 
0fb9c                 | ' ' ---------------  List the program. 
0fb9c                 | ' 
0fb9c                 | ' sub do_list
0fb9c                 | _do_list
0fb9c     02 4A 05 F6 | 	mov	COUNT_, #2
0fba0     A8 00 A0 FD | 	call	#pushregs_
0fba4     B8 F0 07 F1 | 	add	ptra, #184
0fba8     04 4E 05 F1 | 	add	fp, #4
0fbac     A7 00 68 FC | 	wrlong	#0, fp
0fbb0     04 4E 05 F1 | 	add	fp, #4
0fbb4     FF FF BF FF 
0fbb8     A7 FE 6B FC | 	wrlong	##2147483647, fp
0fbbc     08 4E 85 F1 | 	sub	fp, #8
0fbc0     4A 00 00 FF 
0fbc4     80 E4 05 F1 | 	add	objptr, ##38016
0fbc8     F2 1E 02 FB | 	rdlong	local01, objptr
0fbcc     0F 17 02 F6 | 	mov	arg03, local01
0fbd0     01 16 66 F0 | 	shl	arg03, #1
0fbd4     0F 17 02 F1 | 	add	arg03, local01
0fbd8     02 16 66 F0 | 	shl	arg03, #2
0fbdc     03 00 00 FF 
0fbe0     04 E4 85 F1 | 	sub	objptr, ##1540
0fbe4     F2 16 02 F1 | 	add	arg03, objptr
0fbe8     0B 17 02 FB | 	rdlong	arg03, arg03
0fbec     A7 16 62 FC | 	wrlong	arg03, fp
0fbf0                 | ' 
0fbf0                 | ' startline=0 : endline=$7FFFFFFF
0fbf0                 | ' numpar=compiledline(lineptr_e).result.uresult
0fbf0                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0fbf0     01 16 0E F2 | 	cmp	arg03, #1 wz
0fbf4     47 00 00 FF 
0fbf8     7C E4 85 F1 | 	sub	objptr, ##36476
0fbfc     3C 00 90 5D |  if_ne	jmp	#LR__1240
0fc00     94 BF BF FD | 	call	#_pop
0fc04     FF 1E 02 F6 | 	mov	local01, result3
0fc08     0C 4E 05 F1 | 	add	fp, #12
0fc0c     A7 FA 61 FC | 	wrlong	result1, fp
0fc10     04 4E 05 F1 | 	add	fp, #4
0fc14     A7 FC 61 FC | 	wrlong	result2, fp
0fc18     04 4E 05 F1 | 	add	fp, #4
0fc1c     A7 1E 62 FC | 	wrlong	local01, fp
0fc20     08 4E 85 F1 | 	sub	fp, #8
0fc24     A7 12 02 F6 | 	mov	arg01, fp
0fc28     0C 4E 85 F1 | 	sub	fp, #12
0fc2c     38 60 B0 FD | 	call	#_converttoint
0fc30     04 4E 05 F1 | 	add	fp, #4
0fc34     A7 FA 61 FC | 	wrlong	result1, fp
0fc38     04 4E 85 F1 | 	sub	fp, #4
0fc3c                 | LR__1240
0fc3c                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0fc3c     A7 16 02 FB | 	rdlong	arg03, fp
0fc40     02 16 0E F2 | 	cmp	arg03, #2 wz
0fc44     7C 00 90 5D |  if_ne	jmp	#LR__1241
0fc48     4C BF BF FD | 	call	#_pop
0fc4c     FF 1E 02 F6 | 	mov	local01, result3
0fc50     0C 4E 05 F1 | 	add	fp, #12
0fc54     A7 FA 61 FC | 	wrlong	result1, fp
0fc58     04 4E 05 F1 | 	add	fp, #4
0fc5c     A7 FC 61 FC | 	wrlong	result2, fp
0fc60     04 4E 05 F1 | 	add	fp, #4
0fc64     A7 1E 62 FC | 	wrlong	local01, fp
0fc68     08 4E 85 F1 | 	sub	fp, #8
0fc6c     A7 12 02 F6 | 	mov	arg01, fp
0fc70     0C 4E 85 F1 | 	sub	fp, #12
0fc74     F0 5F B0 FD | 	call	#_converttoint
0fc78     FD 1E 02 F6 | 	mov	local01, result1
0fc7c     08 4E 05 F1 | 	add	fp, #8
0fc80     A7 1E 62 FC | 	wrlong	local01, fp
0fc84     08 4E 85 F1 | 	sub	fp, #8
0fc88     0C BF BF FD | 	call	#_pop
0fc8c     FF 1E 02 F6 | 	mov	local01, result3
0fc90     0C 4E 05 F1 | 	add	fp, #12
0fc94     A7 FA 61 FC | 	wrlong	result1, fp
0fc98     04 4E 05 F1 | 	add	fp, #4
0fc9c     A7 FC 61 FC | 	wrlong	result2, fp
0fca0     04 4E 05 F1 | 	add	fp, #4
0fca4     A7 1E 62 FC | 	wrlong	local01, fp
0fca8     08 4E 85 F1 | 	sub	fp, #8
0fcac     A7 12 02 F6 | 	mov	arg01, fp
0fcb0     0C 4E 85 F1 | 	sub	fp, #12
0fcb4     B0 5F B0 FD | 	call	#_converttoint
0fcb8     04 4E 05 F1 | 	add	fp, #4
0fcbc     A7 FA 61 FC | 	wrlong	result1, fp
0fcc0     04 4E 85 F1 | 	sub	fp, #4
0fcc4                 | LR__1241
0fcc4                 | ' 
0fcc4                 | ' 
0fcc4                 | ' print
0fcc4     00 12 06 F6 | 	mov	arg01, #0
0fcc8     9C 66 B1 FD | 	call	#__system___getiolock_0540
0fccc     FD 12 02 F6 | 	mov	arg01, result1
0fcd0     54 0C B1 FD | 	call	#__system___lockmem
0fcd4     00 12 06 F6 | 	mov	arg01, #0
0fcd8     0A 14 06 F6 | 	mov	arg02, #10
0fcdc     00 16 06 F6 | 	mov	arg03, #0
0fce0     E0 18 B1 FD | 	call	#__system___basic_print_char
0fce4     00 12 06 F6 | 	mov	arg01, #0
0fce8     7C 66 B1 FD | 	call	#__system___getiolock_0540
0fcec     FD 00 68 FC | 	wrlong	#0, result1
0fcf0     4A 00 00 FF 
0fcf4     84 E4 05 F1 | 	add	objptr, ##38020
0fcf8     F2 20 02 FB | 	rdlong	local02, objptr
0fcfc     0F 00 00 FF 
0fd00     B8 E5 05 F1 | 	add	objptr, ##8120
0fd04     F2 20 62 FC | 	wrlong	local02, objptr
0fd08     5A 00 00 FF 
0fd0c     3C E4 85 F1 | 	sub	objptr, ##46140
0fd10                 | ' do 
0fd10                 | LR__1242
0fd10     20 4E 05 F1 | 	add	fp, #32
0fd14     A7 12 02 F6 | 	mov	arg01, fp
0fd18     20 4E 85 F1 | 	sub	fp, #32
0fd1c     5A 00 00 FF 
0fd20     3C E4 05 F1 | 	add	objptr, ##46140
0fd24     F2 14 02 FB | 	rdlong	arg02, objptr
0fd28     18 16 06 F6 | 	mov	arg03, #24
0fd2c     4E 00 00 FF 
0fd30     70 E5 85 F1 | 	sub	objptr, ##40304
0fd34     B0 FF B0 FD | 	call	#_psram_spin2_read1
0fd38     0B 00 00 FF 
0fd3c     CC E4 85 F1 | 	sub	objptr, ##5836
0fd40                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
0fd40                 | '   
0fd40                 | '   if header(0)<> $FFFFFFFF then
0fd40     20 4E 05 F1 | 	add	fp, #32
0fd44     A7 20 02 FB | 	rdlong	local02, fp
0fd48     20 4E 85 F1 | 	sub	fp, #32
0fd4c     FF FF 7F FF 
0fd50     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0fd54     A8 00 90 AD |  if_e	jmp	#LR__1244
0fd58     38 4E 05 F1 | 	add	fp, #56
0fd5c     3F 16 06 F6 | 	mov	arg03, #63
0fd60     28 16 62 FD | 	setq	arg03
0fd64     A7 00 68 FC | 	wrlong	#0, fp
0fd68     A7 12 02 F6 | 	mov	arg01, fp
0fd6c     10 4E 85 F1 | 	sub	fp, #16
0fd70     A7 14 02 FB | 	rdlong	arg02, fp
0fd74     04 4E 05 F1 | 	add	fp, #4
0fd78     A7 16 02 FB | 	rdlong	arg03, fp
0fd7c     2C 4E 85 F1 | 	sub	fp, #44
0fd80     0B 00 00 FF 
0fd84     CC E4 05 F1 | 	add	objptr, ##5836
0fd88     5C FF B0 FD | 	call	#_psram_spin2_read1
0fd8c     0B 00 00 FF 
0fd90     CC E4 85 F1 | 	sub	objptr, ##5836
0fd94                 | '     longfill(linebuf,0,64)
0fd94                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0fd94                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0fd94     20 4E 05 F1 | 	add	fp, #32
0fd98     A7 20 02 FB | 	rdlong	local02, fp
0fd9c     1C 4E 85 F1 | 	sub	fp, #28
0fda0     A7 1E 02 FB | 	rdlong	local01, fp
0fda4     04 4E 85 F1 | 	sub	fp, #4
0fda8     0F 21 52 F2 | 	cmps	local02, local01 wc
0fdac     30 00 90 CD |  if_b	jmp	#LR__1243
0fdb0     20 4E 05 F1 | 	add	fp, #32
0fdb4     A7 20 02 FB | 	rdlong	local02, fp
0fdb8     18 4E 85 F1 | 	sub	fp, #24
0fdbc     A7 16 02 FB | 	rdlong	arg03, fp
0fdc0     08 4E 85 F1 | 	sub	fp, #8
0fdc4     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0fdc8     14 00 90 1D |  if_a	jmp	#LR__1243
0fdcc     38 4E 05 F1 | 	add	fp, #56
0fdd0     A7 12 02 F6 | 	mov	arg01, fp
0fdd4     38 4E 85 F1 | 	sub	fp, #56
0fdd8                 | ' 
0fdd8                 | ' write(text)
0fdd8     64 F8 B0 FD | 	call	#_hg010b_spin2_write
0fddc                 | ' crlf
0fddc     2C FB B0 FD | 	call	#_hg010b_spin2_crlf
0fde0                 | LR__1243
0fde0     34 4E 05 F1 | 	add	fp, #52
0fde4     A7 20 02 FB | 	rdlong	local02, fp
0fde8     34 4E 85 F1 | 	sub	fp, #52
0fdec     5A 00 00 FF 
0fdf0     3C E4 05 F1 | 	add	objptr, ##46140
0fdf4     F2 20 62 FC | 	wrlong	local02, objptr
0fdf8     5A 00 00 FF 
0fdfc     3C E4 85 F1 | 	sub	objptr, ##46140
0fe00                 | LR__1244
0fe00     34 4E 05 F1 | 	add	fp, #52
0fe04     A7 20 02 FB | 	rdlong	local02, fp
0fe08     34 4E 85 F1 | 	sub	fp, #52
0fe0c     FF FF 3F FF 
0fe10     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0fe14     20 4E 05 51 |  if_ne	add	fp, #32
0fe18     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0fe1c     20 4E 85 51 |  if_ne	sub	fp, #32
0fe20     FF FF 7F 5F 
0fe24     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0fe28     E4 FE 9F 5D |  if_ne	jmp	#LR__1242
0fe2c     A7 F0 03 F6 | 	mov	ptra, fp
0fe30     B2 00 A0 FD | 	call	#popregs_
0fe34                 | _do_list_ret
0fe34     2D 00 64 FD | 	ret
0fe38                 | 
0fe38                 | ' 
0fe38                 | ' '---------------- Clear the program
0fe38                 | ' 
0fe38                 | ' sub do_new
0fe38                 | _do_new
0fe38     03 4A 05 F6 | 	mov	COUNT_, #3
0fe3c     A8 00 A0 FD | 	call	#pushregs_
0fe40     13 12 C6 F9 | 	decod	arg01, #19
0fe44     01 14 66 F6 | 	neg	arg02, #1
0fe48     DC D8 B0 FD | 	call	#_pslpoke
0fe4c     35 00 00 FF 
0fe50     08 E4 05 F1 | 	add	objptr, ##27144
0fe54     F2 00 68 FC | 	wrlong	#0, objptr
0fe58                 | ' 
0fe58                 | ' pslpoke(memlo,$FFFFFFFF)
0fe58                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
0fe58     00 1E 06 F6 | 	mov	local01, #0
0fe5c     20 00 00 FF 
0fe60     10 E4 85 F1 | 	sub	objptr, ##16400
0fe64     97 1E 48 FB | 	callpa	#(@LR__1251-@LR__1250)>>2,fcache_load_ptr_
0fe68                 | LR__1250
0fe68     0F 17 02 F6 | 	mov	arg03, local01
0fe6c     04 16 66 F0 | 	shl	arg03, #4
0fe70     F2 16 02 F1 | 	add	arg03, objptr
0fe74     84 01 00 FF 
0fe78     50 14 06 F6 | 	mov	arg02, ##@LR__5408
0fe7c     0B 15 62 FC | 	wrlong	arg02, arg03
0fe80     0F 21 02 F6 | 	mov	local02, local01
0fe84     04 20 66 F0 | 	shl	local02, #4
0fe88     F2 20 02 F1 | 	add	local02, objptr
0fe8c     0C 20 06 F1 | 	add	local02, #12
0fe90     10 01 68 FC | 	wrlong	#0, local02
0fe94     01 1E 06 F1 | 	add	local01, #1
0fe98     02 00 00 FF 
0fe9c     01 1E 56 F2 | 	cmps	local01, ##1025 wc
0fea0     C4 FF 9F CD |  if_b	jmp	#LR__1250
0fea4                 | LR__1251
0fea4     35 00 00 FF 
0fea8     8C E4 05 F1 | 	add	objptr, ##27276
0feac     00 04 80 FF 
0feb0     F2 00 68 FC | 	wrlong	##524288, objptr
0feb4     0E 00 00 FF 
0feb8     38 E4 05 F1 | 	add	objptr, ##7224
0febc     00 04 80 FF 
0fec0     F2 00 68 FC | 	wrlong	##524288, objptr
0fec4     04 E4 05 F1 | 	add	objptr, #4
0fec8     00 04 80 FF 
0fecc     F2 00 68 FC | 	wrlong	##524288, objptr
0fed0     15 00 00 FF 
0fed4     68 E4 85 F1 | 	sub	objptr, ##10856
0fed8     F2 00 68 FC | 	wrlong	#0, objptr
0fedc     07 00 00 FF 
0fee0     24 E4 05 F1 | 	add	objptr, ##3620
0fee4     F2 00 68 FC | 	wrlong	#0, objptr
0fee8     07 00 00 FF 
0feec     20 E4 85 F1 | 	sub	objptr, ##3616
0fef0     00 04 80 FF 
0fef4     F2 00 68 FC | 	wrlong	##524288, objptr
0fef8     0F 00 00 FF 
0fefc     38 E4 05 F1 | 	add	objptr, ##7736
0ff00     F2 00 68 FC | 	wrlong	#0, objptr
0ff04     08 00 00 FF 
0ff08     0C E4 85 F1 | 	sub	objptr, ##4108
0ff0c     F2 00 68 FC | 	wrlong	#0, objptr
0ff10     04 E4 05 F1 | 	add	objptr, #4
0ff14     FF FF FF FF 
0ff18     F2 FE 6B FC | 	wrlong	##-1, objptr
0ff1c     0E 00 00 FF 
0ff20     80 E4 05 F1 | 	add	objptr, ##7296
0ff24     F2 00 68 FC | 	wrlong	#0, objptr
0ff28     04 E4 05 F1 | 	add	objptr, #4
0ff2c     F2 00 68 FC | 	wrlong	#0, objptr
0ff30                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
0ff30                 | ' stackpointer=0
0ff30                 | ' lineptr=0 
0ff30                 | ' programptr=memlo : stringptr=0
0ff30                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
0ff30                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0ff30     00 1E 06 F6 | 	mov	local01, #0
0ff34     06 00 00 FF 
0ff38     74 E4 85 F1 | 	sub	objptr, ##3188
0ff3c     97 16 48 FB | 	callpa	#(@LR__1253-@LR__1252)>>2,fcache_load_ptr_
0ff40                 | LR__1252
0ff40     0F 21 02 F6 | 	mov	local02, local01
0ff44     02 20 66 F0 | 	shl	local02, #2
0ff48     0F 21 02 F1 | 	add	local02, local01
0ff4c     02 20 66 F0 | 	shl	local02, #2
0ff50     F2 20 02 F1 | 	add	local02, objptr
0ff54     08 20 06 F1 | 	add	local02, #8
0ff58     FF FF FF FF 
0ff5c     10 FF 6B FC | 	wrlong	##-1, local02
0ff60     01 1E 06 F1 | 	add	local01, #1
0ff64     41 1E 56 F2 | 	cmps	local01, #65 wc
0ff68     D4 FF 9F CD |  if_b	jmp	#LR__1252
0ff6c                 | LR__1253
0ff6c     52 00 00 FF 
0ff70     9C E4 85 F1 | 	sub	objptr, ##42140
0ff74                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
0ff74     00 1E 06 F6 | 	mov	local01, #0
0ff78                 | LR__1254
0ff78     0F 21 02 F6 | 	mov	local02, local01
0ff7c     02 20 66 F0 | 	shl	local02, #2
0ff80     59 00 00 FF 
0ff84     6C E5 05 F1 | 	add	objptr, ##45932
0ff88     F2 20 02 F1 | 	add	local02, objptr
0ff8c     10 23 0A FB | 	rdlong	local03, local02 wz
0ff90     59 00 00 FF 
0ff94     6C E5 85 F1 | 	sub	objptr, ##45932
0ff98     34 00 90 AD |  if_e	jmp	#LR__1255
0ff9c     0F 13 02 F6 | 	mov	arg01, local01
0ffa0     00 14 06 F6 | 	mov	arg02, #0
0ffa4     00 16 06 F6 | 	mov	arg03, #0
0ffa8     B4 E5 B0 FD | 	call	#_hg010b_spin2_setspritesize
0ffac     0F 21 02 F6 | 	mov	local02, local01
0ffb0     02 20 66 F0 | 	shl	local02, #2
0ffb4     59 00 00 FF 
0ffb8     6C E5 05 F1 | 	add	objptr, ##45932
0ffbc     F2 20 02 F1 | 	add	local02, objptr
0ffc0     10 13 02 FB | 	rdlong	arg01, local02
0ffc4     59 00 00 FF 
0ffc8     6C E5 85 F1 | 	sub	objptr, ##45932
0ffcc     4C 49 B1 FD | 	call	#__system___gc_free
0ffd0                 | LR__1255
0ffd0     01 1E 06 F1 | 	add	local01, #1
0ffd4     10 1E 56 F2 | 	cmps	local01, #16 wc
0ffd8     9C FF 9F CD |  if_b	jmp	#LR__1254
0ffdc     59 00 00 FF 
0ffe0     C0 E5 05 F1 | 	add	objptr, ##46016
0ffe4     00 C0 9F FF 
0ffe8     F2 00 68 FC | 	wrlong	##1065353216, objptr
0ffec     04 E4 05 F1 | 	add	objptr, #4
0fff0     00 C0 9F FF 
0fff4     F2 00 68 FC | 	wrlong	##1065353216, objptr
0fff8     59 00 00 FF 
0fffc     C0 E5 85 F1 | 	sub	objptr, ##46016
10000     F2 22 02 FB | 	rdlong	local03, objptr
10004     59 00 00 FF 
10008     AC E5 05 F1 | 	add	objptr, ##45996
1000c     F2 22 62 FC | 	wrlong	local03, objptr
10010     59 00 00 FF 
10014     B0 E5 85 F1 | 	sub	objptr, ##46000
10018     11 12 06 F6 | 	mov	arg01, #17
1001c     08 14 06 F6 | 	mov	arg02, #8
10020     10 16 06 F6 | 	mov	arg03, #16
10024     38 E5 B0 FD | 	call	#_hg010b_spin2_setspritesize
10028     10 12 06 F6 | 	mov	arg01, #16
1002c     20 14 06 F6 | 	mov	arg02, #32
10030     20 16 06 F6 | 	mov	arg03, #32
10034     28 E5 B0 FD | 	call	#_hg010b_spin2_setspritesize
10038     84 01 00 FF 
1003c     51 22 06 F6 | 	mov	local03, ##@LR__5409
10040     59 00 00 FF 
10044     DC E5 05 F1 | 	add	objptr, ##46044
10048     F2 22 62 FC | 	wrlong	local03, objptr
1004c     59 00 00 FF 
10050     DC E5 85 F1 | 	sub	objptr, ##46044
10054     2C C9 B0 FD | 	call	#_init_audio
10058     A7 F0 03 F6 | 	mov	ptra, fp
1005c     B2 00 A0 FD | 	call	#popregs_
10060                 | _do_new_ret
10060     2D 00 64 FD | 	ret
10064                 | 
10064                 | ' 
10064                 | ' '----------------------- goto
10064                 | ' sub do_fast_goto
10064                 | _do_fast_goto
10064     02 4A 05 F6 | 	mov	COUNT_, #2
10068     A8 00 A0 FD | 	call	#pushregs_
1006c                 | _do_fast_goto_enter
1006c     4A 00 00 FF 
10070     80 E4 05 F1 | 	add	objptr, ##38016
10074     F2 12 02 FB | 	rdlong	arg01, objptr
10078     09 1F 02 F6 | 	mov	local01, arg01
1007c     01 1E 66 F0 | 	shl	local01, #1
10080     09 1F 02 F1 | 	add	local01, arg01
10084     02 1E 66 F0 | 	shl	local01, #2
10088     03 00 00 FF 
1008c     04 E4 85 F1 | 	sub	objptr, ##1540
10090     F2 1E 02 F1 | 	add	local01, objptr
10094     0F 21 02 FB | 	rdlong	local02, local01
10098     10 13 02 F6 | 	mov	arg01, local02
1009c     47 00 00 FF 
100a0     7C E4 85 F1 | 	sub	objptr, ##36476
100a4     B0 D7 B0 FD | 	call	#_pslpeek
100a8     FD 12 02 F6 | 	mov	arg01, result1
100ac                 | ' 
100ac                 | ' testptr=compiledline(lineptr_e).result.uresult
100ac                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
100ac                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
100ac     4A 00 00 FF 
100b0     80 E4 05 F1 | 	add	objptr, ##38016
100b4     F2 FA 01 FB | 	rdlong	result1, objptr
100b8     FD 1E 02 F6 | 	mov	local01, result1
100bc     01 1E 66 F0 | 	shl	local01, #1
100c0     FD 1E 02 F1 | 	add	local01, result1
100c4     02 1E 66 F0 | 	shl	local01, #2
100c8     03 00 00 FF 
100cc     04 E4 85 F1 | 	sub	objptr, ##1540
100d0     F2 1E 02 F1 | 	add	local01, objptr
100d4     04 1E 06 F1 | 	add	local01, #4
100d8     0F 1F 02 FB | 	rdlong	local01, local01
100dc     0F 13 0A F2 | 	cmp	arg01, local01 wz
100e0     47 00 00 FF 
100e4     7C E4 85 F1 | 	sub	objptr, ##36476
100e8     58 00 90 5D |  if_ne	jmp	#LR__1260
100ec     58 00 00 FF 
100f0     BC E4 05 F1 | 	add	objptr, ##45244
100f4     F2 20 62 FC | 	wrlong	local02, objptr
100f8     0E 00 00 FF 
100fc     40 E4 85 F1 | 	sub	objptr, ##7232
10100     F2 20 02 FB | 	rdlong	local02, objptr
10104     01 20 86 F1 | 	sub	local02, #1
10108     04 E4 05 F1 | 	add	objptr, #4
1010c     F2 20 62 FC | 	wrlong	local02, objptr
10110                 | '   runptr=testptr
10110                 | '   lineptr_e=lineptr-1
10110                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
10110     0E 00 00 FF 
10114     88 E4 05 F1 | 	add	objptr, ##7304
10118     F2 20 02 FB | 	rdlong	local02, objptr
1011c     58 00 00 FF 
10120     08 E5 85 F1 | 	sub	objptr, ##45320
10124     FF FF 3F FF 
10128     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
1012c     58 00 00 AF 
10130     08 E5 05 A1 |  if_e	add	objptr, ##45320
10134     F2 00 68 AC |  if_e	wrlong	#0, objptr
10138     58 00 00 AF 
1013c     08 E5 85 A1 |  if_e	sub	objptr, ##45320
10140     04 00 90 FD | 	jmp	#LR__1261
10144                 | LR__1260
10144     84 0E B0 FD | 	call	#_do_find_goto
10148                 | LR__1261
10148     A7 F0 03 F6 | 	mov	ptra, fp
1014c     B2 00 A0 FD | 	call	#popregs_
10150                 | _do_fast_goto_ret
10150     2D 00 64 FD | 	ret
10154                 | 
10154                 | ' 
10154                 | ' sub do_open
10154                 | _do_open
10154     02 4A 05 F6 | 	mov	COUNT_, #2
10158     A8 00 A0 FD | 	call	#pushregs_
1015c     20 F0 07 F1 | 	add	ptra, #32
10160     4A 00 00 FF 
10164     80 E4 05 F1 | 	add	objptr, ##38016
10168     F2 16 02 FB | 	rdlong	arg03, objptr
1016c     0B 15 02 F6 | 	mov	arg02, arg03
10170     01 14 66 F0 | 	shl	arg02, #1
10174     0B 15 02 F1 | 	add	arg02, arg03
10178     02 14 66 F0 | 	shl	arg02, #2
1017c     03 00 00 FF 
10180     04 E4 85 F1 | 	sub	objptr, ##1540
10184     F2 14 02 F1 | 	add	arg02, objptr
10188     0A 17 02 FB | 	rdlong	arg03, arg02
1018c     10 4E 05 F1 | 	add	fp, #16
10190     A7 16 62 FC | 	wrlong	arg03, fp
10194     10 4E 85 F1 | 	sub	fp, #16
10198     47 00 00 FF 
1019c     7C E4 85 F1 | 	sub	objptr, ##36476
101a0     F4 B9 BF FD | 	call	#_pop
101a4     FF 16 02 F6 | 	mov	arg03, result3
101a8     A7 FA 61 FC | 	wrlong	result1, fp
101ac     04 4E 05 F1 | 	add	fp, #4
101b0     A7 FC 61 FC | 	wrlong	result2, fp
101b4     04 4E 05 F1 | 	add	fp, #4
101b8     A7 16 62 FC | 	wrlong	arg03, fp
101bc                 | ' 
101bc                 | ' numpar=compiledline(lineptr_e).result.uresult
101bc                 | ' 
101bc                 | ' t1=pop()
101bc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
101bc     08 4E 85 F1 | 	sub	fp, #8
101c0     2B 16 0E F2 | 	cmp	arg03, #43 wz
101c4     18 00 90 5D |  if_ne	jmp	#LR__1270
101c8     A7 12 02 FB | 	rdlong	arg01, fp
101cc     74 12 B0 FD | 	call	#_convertstring
101d0     A7 FA 61 FC | 	wrlong	result1, fp
101d4     08 4E 05 F1 | 	add	fp, #8
101d8     A7 3E 68 FC | 	wrlong	#31, fp
101dc     08 4E 85 F1 | 	sub	fp, #8
101e0                 | LR__1270
101e0                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
101e0     08 4E 05 F1 | 	add	fp, #8
101e4     A7 16 02 FB | 	rdlong	arg03, fp
101e8     08 4E 85 F1 | 	sub	fp, #8
101ec     1F 16 0E F2 | 	cmp	arg03, #31 wz
101f0     44 00 90 AD |  if_e	jmp	#LR__1271
101f4     00 12 06 F6 | 	mov	arg01, #0
101f8     6C 61 B1 FD | 	call	#__system___getiolock_0540
101fc     FD 12 02 F6 | 	mov	arg01, result1
10200     24 07 B1 FD | 	call	#__system___lockmem
10204     84 01 00 FF 
10208     5C 14 06 F6 | 	mov	arg02, ##@LR__5410
1020c     00 12 06 F6 | 	mov	arg01, #0
10210     00 16 06 F6 | 	mov	arg03, #0
10214     04 14 B1 FD | 	call	#__system___basic_print_string
10218     00 12 06 F6 | 	mov	arg01, #0
1021c     0A 14 06 F6 | 	mov	arg02, #10
10220     00 16 06 F6 | 	mov	arg03, #0
10224     9C 13 B1 FD | 	call	#__system___basic_print_char
10228     00 12 06 F6 | 	mov	arg01, #0
1022c     38 61 B1 FD | 	call	#__system___getiolock_0540
10230     FD 00 68 FC | 	wrlong	#0, result1
10234     28 02 90 FD | 	jmp	#LR__1282
10238                 | LR__1271
10238     A7 16 02 FB | 	rdlong	arg03, fp
1023c     0C 4E 05 F1 | 	add	fp, #12
10240     A7 16 62 FC | 	wrlong	arg03, fp
10244     0C 4E 85 F1 | 	sub	fp, #12
10248     4C B9 BF FD | 	call	#_pop
1024c     FF 16 02 F6 | 	mov	arg03, result3
10250     A7 FA 61 FC | 	wrlong	result1, fp
10254     04 4E 05 F1 | 	add	fp, #4
10258     A7 FC 61 FC | 	wrlong	result2, fp
1025c     04 4E 05 F1 | 	add	fp, #4
10260     A7 16 62 FC | 	wrlong	arg03, fp
10264                 | ' filename=t1.result.sresult
10264                 | ' t1=pop()
10264                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
10264     08 4E 85 F1 | 	sub	fp, #8
10268     2B 16 0E F2 | 	cmp	arg03, #43 wz
1026c     18 00 90 5D |  if_ne	jmp	#LR__1272
10270     A7 12 02 FB | 	rdlong	arg01, fp
10274     CC 11 B0 FD | 	call	#_convertstring
10278     A7 FA 61 FC | 	wrlong	result1, fp
1027c     08 4E 05 F1 | 	add	fp, #8
10280     A7 3E 68 FC | 	wrlong	#31, fp
10284     08 4E 85 F1 | 	sub	fp, #8
10288                 | LR__1272
10288     14 4E 05 F1 | 	add	fp, #20
1028c     A7 00 68 FC | 	wrlong	#0, fp
10290                 | ' mode=0
10290                 | ' if t1.result_type=result_string then
10290     0C 4E 85 F1 | 	sub	fp, #12
10294     A7 14 02 FB | 	rdlong	arg02, fp
10298     08 4E 85 F1 | 	sub	fp, #8
1029c     1F 14 0E F2 | 	cmp	arg02, #31 wz
102a0     64 00 90 5D |  if_ne	jmp	#LR__1273
102a4                 | '   if t1.result.sresult="read" then mode=1
102a4     A7 12 02 FB | 	rdlong	arg01, fp
102a8     84 01 00 FF 
102ac     6E 14 06 F6 | 	mov	arg02, ##@LR__5411
102b0     9C 06 B1 FD | 	call	#__system___string_cmp
102b4     00 FA 0D F2 | 	cmp	result1, #0 wz
102b8     14 4E 05 A1 |  if_e	add	fp, #20
102bc     A7 02 68 AC |  if_e	wrlong	#1, fp
102c0     14 4E 85 A1 |  if_e	sub	fp, #20
102c4                 | '   if t1.result.sresult="write" then mode=2
102c4     A7 12 02 FB | 	rdlong	arg01, fp
102c8     84 01 00 FF 
102cc     73 14 06 F6 | 	mov	arg02, ##@LR__5412
102d0     7C 06 B1 FD | 	call	#__system___string_cmp
102d4     00 FA 0D F2 | 	cmp	result1, #0 wz
102d8     14 4E 05 A1 |  if_e	add	fp, #20
102dc     A7 04 68 AC |  if_e	wrlong	#2, fp
102e0     14 4E 85 A1 |  if_e	sub	fp, #20
102e4                 | '   if t1.result.sresult="append" then mode=4
102e4     A7 12 02 FB | 	rdlong	arg01, fp
102e8     84 01 00 FF 
102ec     79 14 06 F6 | 	mov	arg02, ##@LR__5413
102f0     5C 06 B1 FD | 	call	#__system___string_cmp
102f4     00 FA 0D F2 | 	cmp	result1, #0 wz
102f8     14 4E 05 A1 |  if_e	add	fp, #20
102fc     A7 08 68 AC |  if_e	wrlong	#4, fp
10300     14 4E 85 A1 |  if_e	sub	fp, #20
10304     14 00 90 FD | 	jmp	#LR__1274
10308                 | LR__1273
10308     A7 12 02 F6 | 	mov	arg01, fp
1030c     58 59 B0 FD | 	call	#_converttoint
10310     14 4E 05 F1 | 	add	fp, #20
10314     A7 FA 61 FC | 	wrlong	result1, fp
10318     14 4E 85 F1 | 	sub	fp, #20
1031c                 | LR__1274
1031c     78 B8 BF FD | 	call	#_pop
10320     FF 16 02 F6 | 	mov	arg03, result3
10324     A7 FA 61 FC | 	wrlong	result1, fp
10328     04 4E 05 F1 | 	add	fp, #4
1032c     A7 FC 61 FC | 	wrlong	result2, fp
10330     04 4E 05 F1 | 	add	fp, #4
10334     A7 16 62 FC | 	wrlong	arg03, fp
10338                 | ' t1=pop()
10338                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
10338     08 4E 85 F1 | 	sub	fp, #8
1033c     2C 16 0E F2 | 	cmp	arg03, #44 wz
10340     44 00 90 AD |  if_e	jmp	#LR__1275
10344     00 12 06 F6 | 	mov	arg01, #0
10348     1C 60 B1 FD | 	call	#__system___getiolock_0540
1034c     FD 12 02 F6 | 	mov	arg01, result1
10350     D4 05 B1 FD | 	call	#__system___lockmem
10354     84 01 00 FF 
10358     80 14 06 F6 | 	mov	arg02, ##@LR__5414
1035c     00 12 06 F6 | 	mov	arg01, #0
10360     00 16 06 F6 | 	mov	arg03, #0
10364     B4 12 B1 FD | 	call	#__system___basic_print_string
10368     00 12 06 F6 | 	mov	arg01, #0
1036c     0A 14 06 F6 | 	mov	arg02, #10
10370     00 16 06 F6 | 	mov	arg03, #0
10374     4C 12 B1 FD | 	call	#__system___basic_print_char
10378     00 12 06 F6 | 	mov	arg01, #0
1037c     E8 5F B1 FD | 	call	#__system___getiolock_0540
10380     FD 00 68 FC | 	wrlong	#0, result1
10384     D8 00 90 FD | 	jmp	#LR__1282
10388                 | LR__1275
10388     A7 1E 02 FB | 	rdlong	local01, fp
1038c     18 4E 05 F1 | 	add	fp, #24
10390     A7 1E 62 FC | 	wrlong	local01, fp
10394                 | ' channel  = t1.result.iresult
10394                 | ' 'print "Open,  channel=";channel; " mode=";mode;  " filename=";filename
10394                 | ' select case  mode
10394     04 4E 85 F1 | 	sub	fp, #4
10398     A7 20 02 FB | 	rdlong	local02, fp
1039c     14 4E 85 F1 | 	sub	fp, #20
103a0     01 20 86 F1 | 	sub	local02, #1
103a4     04 20 26 F3 | 	fle	local02, #4
103a8     30 20 62 FD | 	jmprel	local02
103ac                 | LR__1276
103ac     10 00 90 FD | 	jmp	#LR__1277
103b0     2C 00 90 FD | 	jmp	#LR__1278
103b4     68 00 90 FD | 	jmp	#LR__1280
103b8     44 00 90 FD | 	jmp	#LR__1279
103bc     60 00 90 FD | 	jmp	#LR__1280
103c0                 | LR__1277
103c0     18 4E 05 F1 | 	add	fp, #24
103c4     A7 12 02 FB | 	rdlong	arg01, fp
103c8     0C 4E 85 F1 | 	sub	fp, #12
103cc     A7 14 02 FB | 	rdlong	arg02, fp
103d0     0C 4E 85 F1 | 	sub	fp, #12
103d4     00 16 06 F6 | 	mov	arg03, #0
103d8     50 11 B1 FD | 	call	#__system___basic_open_string
103dc     80 00 90 FD | 	jmp	#LR__1281
103e0                 | LR__1278
103e0     18 4E 05 F1 | 	add	fp, #24
103e4     A7 12 02 FB | 	rdlong	arg01, fp
103e8     0C 4E 85 F1 | 	sub	fp, #12
103ec     A7 14 02 FB | 	rdlong	arg02, fp
103f0     0C 4E 85 F1 | 	sub	fp, #12
103f4     0D 16 06 F6 | 	mov	arg03, #13
103f8     30 11 B1 FD | 	call	#__system___basic_open_string
103fc     60 00 90 FD | 	jmp	#LR__1281
10400                 | LR__1279
10400     18 4E 05 F1 | 	add	fp, #24
10404     A7 12 02 FB | 	rdlong	arg01, fp
10408     0C 4E 85 F1 | 	sub	fp, #12
1040c     A7 14 02 FB | 	rdlong	arg02, fp
10410     0C 4E 85 F1 | 	sub	fp, #12
10414     25 16 06 F6 | 	mov	arg03, #37
10418     10 11 B1 FD | 	call	#__system___basic_open_string
1041c     40 00 90 FD | 	jmp	#LR__1281
10420                 | LR__1280
10420     00 12 06 F6 | 	mov	arg01, #0
10424     40 5F B1 FD | 	call	#__system___getiolock_0540
10428     FD 12 02 F6 | 	mov	arg01, result1
1042c     F8 04 B1 FD | 	call	#__system___lockmem
10430     84 01 00 FF 
10434     92 14 06 F6 | 	mov	arg02, ##@LR__5415
10438     00 12 06 F6 | 	mov	arg01, #0
1043c     00 16 06 F6 | 	mov	arg03, #0
10440     D8 11 B1 FD | 	call	#__system___basic_print_string
10444     00 12 06 F6 | 	mov	arg01, #0
10448     0A 14 06 F6 | 	mov	arg02, #10
1044c     00 16 06 F6 | 	mov	arg03, #0
10450     70 11 B1 FD | 	call	#__system___basic_print_char
10454     00 12 06 F6 | 	mov	arg01, #0
10458     0C 5F B1 FD | 	call	#__system___getiolock_0540
1045c     FD 00 68 FC | 	wrlong	#0, result1
10460                 | LR__1281
10460                 | LR__1282
10460     A7 F0 03 F6 | 	mov	ptra, fp
10464     B2 00 A0 FD | 	call	#popregs_
10468                 | _do_open_ret
10468     2D 00 64 FD | 	ret
1046c                 | 
1046c                 | ' 
1046c                 | ' 
1046c                 | ' sub do_close
1046c                 | _do_close
1046c     03 4A 05 F6 | 	mov	COUNT_, #3
10470     A8 00 A0 FD | 	call	#pushregs_
10474     20 B7 BF FD | 	call	#_pop
10478     FD 1E 02 F6 | 	mov	local01, result1
1047c     FF 16 02 F6 | 	mov	arg03, result3
10480     FE 20 02 F6 | 	mov	local02, result2
10484     0B 23 02 F6 | 	mov	local03, arg03
10488                 | ' numpar=compiledline(lineptr_e).result.uresult
10488                 | ' 
10488                 | ' t1=pop()
10488                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
10488     2C 22 0E F2 | 	cmp	local03, #44 wz
1048c     44 00 90 AD |  if_e	jmp	#LR__1290
10490     00 12 06 F6 | 	mov	arg01, #0
10494     D0 5E B1 FD | 	call	#__system___getiolock_0540
10498     FD 12 02 F6 | 	mov	arg01, result1
1049c     88 04 B1 FD | 	call	#__system___lockmem
104a0     84 01 00 FF 
104a4     A5 14 06 F6 | 	mov	arg02, ##@LR__5416
104a8     00 12 06 F6 | 	mov	arg01, #0
104ac     00 16 06 F6 | 	mov	arg03, #0
104b0     68 11 B1 FD | 	call	#__system___basic_print_string
104b4     00 12 06 F6 | 	mov	arg01, #0
104b8     0A 14 06 F6 | 	mov	arg02, #10
104bc     00 16 06 F6 | 	mov	arg03, #0
104c0     00 11 B1 FD | 	call	#__system___basic_print_char
104c4     00 12 06 F6 | 	mov	arg01, #0
104c8     9C 5E B1 FD | 	call	#__system___getiolock_0540
104cc     FD 00 68 FC | 	wrlong	#0, result1
104d0     08 00 90 FD | 	jmp	#LR__1291
104d4                 | LR__1290
104d4                 | ' channel  = t1.result.iresult
104d4                 | ' close #channel
104d4     0F 13 02 F6 | 	mov	arg01, local01
104d8     BC 54 B1 FD | 	call	#__system__close
104dc                 | LR__1291
104dc     A7 F0 03 F6 | 	mov	ptra, fp
104e0     B2 00 A0 FD | 	call	#popregs_
104e4                 | _do_close_ret
104e4     2D 00 64 FD | 	ret
104e8                 | 
104e8                 | ' 
104e8                 | ' sub  do_get
104e8                 | _do_get
104e8     09 4A 05 F6 | 	mov	COUNT_, #9
104ec     A8 00 A0 FD | 	call	#pushregs_
104f0     40 F0 07 F1 | 	add	ptra, #64
104f4     4A 00 00 FF 
104f8     80 E4 05 F1 | 	add	objptr, ##38016
104fc     F2 1A 02 FB | 	rdlong	arg05, objptr
10500     0D 19 02 F6 | 	mov	arg04, arg05
10504     01 18 66 F0 | 	shl	arg04, #1
10508     0D 19 02 F1 | 	add	arg04, arg05
1050c     02 18 66 F0 | 	shl	arg04, #2
10510     03 00 00 FF 
10514     04 E4 85 F1 | 	sub	objptr, ##1540
10518     F2 18 02 F1 | 	add	arg04, objptr
1051c     0C 1B 02 FB | 	rdlong	arg05, arg04
10520     A7 1A 62 FC | 	wrlong	arg05, fp
10524                 | ' numpar=compiledline(lineptr_e).result.uresult
10524                 | ' if  numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
10524     04 1A 0E F2 | 	cmp	arg05, #4 wz
10528     47 00 00 FF 
1052c     7C E4 85 F1 | 	sub	objptr, ##36476
10530     48 00 90 5D |  if_ne	jmp	#LR__1300
10534     60 B6 BF FD | 	call	#_pop
10538     FF 1A 02 F6 | 	mov	arg05, result3
1053c     1C 4E 05 F1 | 	add	fp, #28
10540     A7 FA 61 FC | 	wrlong	result1, fp
10544     04 4E 05 F1 | 	add	fp, #4
10548     A7 FC 61 FC | 	wrlong	result2, fp
1054c     04 4E 05 F1 | 	add	fp, #4
10550     A7 1A 62 FC | 	wrlong	arg05, fp
10554     08 4E 85 F1 | 	sub	fp, #8
10558     A7 12 02 F6 | 	mov	arg01, fp
1055c     1C 4E 85 F1 | 	sub	fp, #28
10560     04 57 B0 FD | 	call	#_converttoint
10564     5A 00 00 FF 
10568     40 E4 05 F1 | 	add	objptr, ##46144
1056c     F2 FA 61 FC | 	wrlong	result1, objptr
10570     5A 00 00 FF 
10574     40 E4 85 F1 | 	sub	objptr, ##46144
10578     18 00 90 FD | 	jmp	#LR__1301
1057c                 | LR__1300
1057c     5A 00 00 FF 
10580     40 E4 05 F1 | 	add	objptr, ##46144
10584     FF FF FF FF 
10588     F2 FE 6B FC | 	wrlong	##-1, objptr
1058c     5A 00 00 FF 
10590     40 E4 85 F1 | 	sub	objptr, ##46144
10594                 | LR__1301
10594                 | ' if  numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
10594     A7 16 02 FB | 	rdlong	arg03, fp
10598     03 16 56 F2 | 	cmps	arg03, #3 wc
1059c     40 00 90 CD |  if_b	jmp	#LR__1302
105a0     F4 B5 BF FD | 	call	#_pop
105a4     FF 16 02 F6 | 	mov	arg03, result3
105a8     1C 4E 05 F1 | 	add	fp, #28
105ac     A7 FA 61 FC | 	wrlong	result1, fp
105b0     04 4E 05 F1 | 	add	fp, #4
105b4     A7 FC 61 FC | 	wrlong	result2, fp
105b8     04 4E 05 F1 | 	add	fp, #4
105bc     A7 16 62 FC | 	wrlong	arg03, fp
105c0     08 4E 85 F1 | 	sub	fp, #8
105c4     A7 12 02 F6 | 	mov	arg01, fp
105c8     1C 4E 85 F1 | 	sub	fp, #28
105cc     98 56 B0 FD | 	call	#_converttoint
105d0     08 4E 05 F1 | 	add	fp, #8
105d4     A7 FA 61 FC | 	wrlong	result1, fp
105d8     08 4E 85 F1 | 	sub	fp, #8
105dc     0C 00 90 FD | 	jmp	#LR__1303
105e0                 | LR__1302
105e0     08 4E 05 F1 | 	add	fp, #8
105e4     A7 02 68 FC | 	wrlong	#1, fp
105e8     08 4E 85 F1 | 	sub	fp, #8
105ec                 | LR__1303
105ec                 | ' if  numpar>=2  then t1=pop() : adr=converttoint(t1)
105ec     A7 16 02 FB | 	rdlong	arg03, fp
105f0     02 16 56 F2 | 	cmps	arg03, #2 wc
105f4     3C 00 90 CD |  if_b	jmp	#LR__1304
105f8     9C B5 BF FD | 	call	#_pop
105fc     FF 16 02 F6 | 	mov	arg03, result3
10600     1C 4E 05 F1 | 	add	fp, #28
10604     A7 FA 61 FC | 	wrlong	result1, fp
10608     04 4E 05 F1 | 	add	fp, #4
1060c     A7 FC 61 FC | 	wrlong	result2, fp
10610     04 4E 05 F1 | 	add	fp, #4
10614     A7 16 62 FC | 	wrlong	arg03, fp
10618     08 4E 85 F1 | 	sub	fp, #8
1061c     A7 12 02 F6 | 	mov	arg01, fp
10620     1C 4E 85 F1 | 	sub	fp, #28
10624     40 56 B0 FD | 	call	#_converttoint
10628     0C 4E 05 F1 | 	add	fp, #12
1062c     A7 FA 61 FC | 	wrlong	result1, fp
10630     0C 4E 85 F1 | 	sub	fp, #12
10634                 | LR__1304
10634     60 B5 BF FD | 	call	#_pop
10638     FF 16 02 F6 | 	mov	arg03, result3
1063c     1C 4E 05 F1 | 	add	fp, #28
10640     A7 FA 61 FC | 	wrlong	result1, fp
10644     04 4E 05 F1 | 	add	fp, #4
10648     A7 FC 61 FC | 	wrlong	result2, fp
1064c     04 4E 05 F1 | 	add	fp, #4
10650     A7 16 62 FC | 	wrlong	arg03, fp
10654     08 4E 85 F1 | 	sub	fp, #8
10658     A7 12 02 F6 | 	mov	arg01, fp
1065c     1C 4E 85 F1 | 	sub	fp, #28
10660     04 56 B0 FD | 	call	#_converttoint
10664     04 4E 05 F1 | 	add	fp, #4
10668     A7 FA 61 FC | 	wrlong	result1, fp
1066c     10 4E 05 F1 | 	add	fp, #16
10670     A7 16 02 FB | 	rdlong	arg03, fp
10674     14 4E 85 F1 | 	sub	fp, #20
10678     02 16 66 F0 | 	shl	arg03, #2
1067c     58 00 00 FF 
10680     C8 E4 05 F1 | 	add	objptr, ##45256
10684     F2 1E 02 F6 | 	mov	local01, objptr
10688     F2 16 02 F1 | 	add	arg03, objptr
1068c     0B 01 68 FC | 	wrlong	#0, arg03
10690                 | ' t1=pop() : channel=converttoint(t1)
10690                 | ' 
10690                 | ' getres(j)=0
10690                 | ' if pos>=0 then
10690     01 00 00 FF 
10694     78 E5 05 F1 | 	add	objptr, ##888
10698     F2 20 02 FB | 	rdlong	local02, objptr
1069c     5A 00 00 FF 
106a0     40 E4 85 F1 | 	sub	objptr, ##46144
106a4     00 20 56 F2 | 	cmps	local02, #0 wc
106a8     F0 01 90 CD |  if_b	jmp	#LR__1311
106ac                 | '   for i=0 to  amount/1024
106ac     10 4E 05 F1 | 	add	fp, #16
106b0     A7 00 68 FC | 	wrlong	#0, fp
106b4     08 4E 85 F1 | 	sub	fp, #8
106b8     A7 22 02 FB | 	rdlong	local03, fp
106bc     08 4E 85 F1 | 	sub	fp, #8
106c0     11 25 52 F6 | 	abs	local04, local03 wc
106c4     0A 24 46 F0 | 	shr	local04, #10
106c8     12 25 82 F6 | 	negc	local04, local04
106cc     01 24 06 F1 | 	add	local04, #1
106d0                 | LR__1305
106d0     10 4E 05 F1 | 	add	fp, #16
106d4     A7 22 02 FB | 	rdlong	local03, fp
106d8     10 4E 85 F1 | 	sub	fp, #16
106dc     12 23 52 F2 | 	cmps	local03, local04 wc
106e0     9C 03 90 3D |  if_ae	jmp	#LR__1319
106e4                 | '     get #channel,pos+1,block(0),amount,r
106e4     04 4E 05 F1 | 	add	fp, #4
106e8     A7 12 02 FB | 	rdlong	arg01, fp
106ec     5A 00 00 FF 
106f0     40 E4 05 F1 | 	add	objptr, ##46144
106f4     F2 14 02 FB | 	rdlong	arg02, objptr
106f8     01 14 06 F1 | 	add	arg02, #1
106fc     03 00 00 FF 
10700     88 E5 85 F1 | 	sub	objptr, ##1928
10704     F2 16 02 F6 | 	mov	arg03, objptr
10708     56 00 00 FF 
1070c     B8 E4 85 F1 | 	sub	objptr, ##44216
10710     04 4E 05 F1 | 	add	fp, #4
10714     A7 18 02 FB | 	rdlong	arg04, fp
10718     08 4E 85 F1 | 	sub	fp, #8
1071c     01 1A 06 F6 | 	mov	arg05, #1
10720     74 10 B1 FD | 	call	#__system___basic_get
10724     18 4E 05 F1 | 	add	fp, #24
10728     A7 FA 61 FC | 	wrlong	result1, fp
1072c                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
1072c     0C 4E 85 F1 | 	sub	fp, #12
10730     A7 20 02 FB | 	rdlong	local02, fp
10734     0C 4E 85 F1 | 	sub	fp, #12
10738     00 04 00 FF 
1073c     00 20 56 F2 | 	cmps	local02, ##524288 wc
10740     7C 00 90 3D |  if_ae	jmp	#LR__1307
10744     14 4E 05 F1 | 	add	fp, #20
10748     A7 00 68 FC | 	wrlong	#0, fp
1074c     04 4E 05 F1 | 	add	fp, #4
10750     A7 26 02 FB | 	rdlong	local05, fp
10754     18 4E 85 F1 | 	sub	fp, #24
10758                 | LR__1306
10758     14 4E 05 F1 | 	add	fp, #20
1075c     A7 20 02 FB | 	rdlong	local02, fp
10760     14 4E 85 F1 | 	sub	fp, #20
10764     13 21 52 F2 | 	cmps	local02, local05 wc
10768     D8 00 90 3D |  if_ae	jmp	#LR__1310
1076c     0C 4E 05 F1 | 	add	fp, #12
10770     A7 12 02 FB | 	rdlong	arg01, fp
10774     04 4E 05 F1 | 	add	fp, #4
10778     A7 22 02 FB | 	rdlong	local03, fp
1077c     0A 22 66 F0 | 	shl	local03, #10
10780     11 13 02 F1 | 	add	arg01, local03
10784     04 4E 05 F1 | 	add	fp, #4
10788     A7 22 02 FB | 	rdlong	local03, fp
1078c     11 13 02 F1 | 	add	arg01, local03
10790     56 00 00 FF 
10794     B8 E4 05 F1 | 	add	objptr, ##44216
10798     F2 22 02 F1 | 	add	local03, objptr
1079c     11 15 C2 FA | 	rdbyte	arg02, local03
107a0     09 15 42 FC | 	wrbyte	arg02, arg01
107a4     56 00 00 FF 
107a8     B8 E4 85 F1 | 	sub	objptr, ##44216
107ac     A7 22 02 FB | 	rdlong	local03, fp
107b0     01 22 06 F1 | 	add	local03, #1
107b4     A7 22 62 FC | 	wrlong	local03, fp
107b8     14 4E 85 F1 | 	sub	fp, #20
107bc     98 FF 9F FD | 	jmp	#LR__1306
107c0                 | LR__1307
107c0     14 4E 05 F1 | 	add	fp, #20
107c4     A7 00 68 FC | 	wrlong	#0, fp
107c8     04 4E 05 F1 | 	add	fp, #4
107cc     A7 28 02 FB | 	rdlong	local06, fp
107d0     18 4E 85 F1 | 	sub	fp, #24
107d4                 | LR__1308
107d4     14 4E 05 F1 | 	add	fp, #20
107d8     A7 20 02 FB | 	rdlong	local02, fp
107dc     14 4E 85 F1 | 	sub	fp, #20
107e0     14 21 52 F2 | 	cmps	local02, local06 wc
107e4     5C 00 90 3D |  if_ae	jmp	#LR__1309
107e8     0C 4E 05 F1 | 	add	fp, #12
107ec     A7 12 02 FB | 	rdlong	arg01, fp
107f0     04 4E 05 F1 | 	add	fp, #4
107f4     A7 26 02 FB | 	rdlong	local05, fp
107f8     0A 26 66 F0 | 	shl	local05, #10
107fc     13 13 02 F1 | 	add	arg01, local05
10800     04 4E 05 F1 | 	add	fp, #4
10804     A7 26 02 FB | 	rdlong	local05, fp
10808     13 13 02 F1 | 	add	arg01, local05
1080c     14 4E 85 F1 | 	sub	fp, #20
10810     56 00 00 FF 
10814     B8 E4 05 F1 | 	add	objptr, ##44216
10818     F2 26 02 F1 | 	add	local05, objptr
1081c     13 15 C2 FA | 	rdbyte	arg02, local05
10820     56 00 00 FF 
10824     B8 E4 85 F1 | 	sub	objptr, ##44216
10828     8C CF B0 FD | 	call	#_pspoke
1082c     14 4E 05 F1 | 	add	fp, #20
10830     A7 26 02 FB | 	rdlong	local05, fp
10834     01 26 06 F1 | 	add	local05, #1
10838     A7 26 62 FC | 	wrlong	local05, fp
1083c     14 4E 85 F1 | 	sub	fp, #20
10840     90 FF 9F FD | 	jmp	#LR__1308
10844                 | LR__1309
10844                 | LR__1310
10844     14 4E 05 F1 | 	add	fp, #20
10848     A7 28 02 FB | 	rdlong	local06, fp
1084c     14 23 02 F6 | 	mov	local03, local06
10850     02 22 66 F0 | 	shl	local03, #2
10854     58 00 00 FF 
10858     C8 E4 05 F1 | 	add	objptr, ##45256
1085c     F2 22 02 F1 | 	add	local03, objptr
10860     02 28 66 F0 | 	shl	local06, #2
10864     F2 28 02 F1 | 	add	local06, objptr
10868     14 29 02 FB | 	rdlong	local06, local06
1086c     04 4E 05 F1 | 	add	fp, #4
10870     A7 26 02 FB | 	rdlong	local05, fp
10874     13 29 02 F1 | 	add	local06, local05
10878     11 29 62 FC | 	wrlong	local06, local03
1087c     08 4E 85 F1 | 	sub	fp, #8
10880     A7 28 02 FB | 	rdlong	local06, fp
10884     01 28 06 F1 | 	add	local06, #1
10888     A7 28 62 FC | 	wrlong	local06, fp
1088c     10 4E 85 F1 | 	sub	fp, #16
10890     58 00 00 FF 
10894     C8 E4 85 F1 | 	sub	objptr, ##45256
10898     34 FE 9F FD | 	jmp	#LR__1305
1089c                 | LR__1311
1089c                 | '   for i=0 to  amount/1024
1089c     10 4E 05 F1 | 	add	fp, #16
108a0     A7 00 68 FC | 	wrlong	#0, fp
108a4     08 4E 85 F1 | 	sub	fp, #8
108a8     A7 22 02 FB | 	rdlong	local03, fp
108ac     08 4E 85 F1 | 	sub	fp, #8
108b0     11 2B 52 F6 | 	abs	local07, local03 wc
108b4     0A 2A 46 F0 | 	shr	local07, #10
108b8     15 2B 82 F6 | 	negc	local07, local07
108bc     01 2A 06 F1 | 	add	local07, #1
108c0                 | LR__1312
108c0     10 4E 05 F1 | 	add	fp, #16
108c4     A7 22 02 FB | 	rdlong	local03, fp
108c8     10 4E 85 F1 | 	sub	fp, #16
108cc     15 23 52 F2 | 	cmps	local03, local07 wc
108d0     AC 01 90 3D |  if_ae	jmp	#LR__1318
108d4                 | '     get #channel,,block(0),amount,r
108d4     04 4E 05 F1 | 	add	fp, #4
108d8     A7 12 02 FB | 	rdlong	arg01, fp
108dc     56 00 00 FF 
108e0     B8 E4 05 F1 | 	add	objptr, ##44216
108e4     F2 16 02 F6 | 	mov	arg03, objptr
108e8     56 00 00 FF 
108ec     B8 E4 85 F1 | 	sub	objptr, ##44216
108f0     04 4E 05 F1 | 	add	fp, #4
108f4     A7 18 02 FB | 	rdlong	arg04, fp
108f8     08 4E 85 F1 | 	sub	fp, #8
108fc     00 14 06 F6 | 	mov	arg02, #0
10900     01 1A 06 F6 | 	mov	arg05, #1
10904     90 0E B1 FD | 	call	#__system___basic_get
10908     18 4E 05 F1 | 	add	fp, #24
1090c     A7 FA 61 FC | 	wrlong	result1, fp
10910                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
10910     0C 4E 85 F1 | 	sub	fp, #12
10914     A7 20 02 FB | 	rdlong	local02, fp
10918     0C 4E 85 F1 | 	sub	fp, #12
1091c     00 04 00 FF 
10920     00 20 56 F2 | 	cmps	local02, ##524288 wc
10924     7C 00 90 3D |  if_ae	jmp	#LR__1314
10928     14 4E 05 F1 | 	add	fp, #20
1092c     A7 00 68 FC | 	wrlong	#0, fp
10930     04 4E 05 F1 | 	add	fp, #4
10934     A7 2C 02 FB | 	rdlong	local08, fp
10938     18 4E 85 F1 | 	sub	fp, #24
1093c                 | LR__1313
1093c     14 4E 05 F1 | 	add	fp, #20
10940     A7 20 02 FB | 	rdlong	local02, fp
10944     14 4E 85 F1 | 	sub	fp, #20
10948     16 21 52 F2 | 	cmps	local02, local08 wc
1094c     D8 00 90 3D |  if_ae	jmp	#LR__1317
10950     0C 4E 05 F1 | 	add	fp, #12
10954     A7 12 02 FB | 	rdlong	arg01, fp
10958     04 4E 05 F1 | 	add	fp, #4
1095c     A7 28 02 FB | 	rdlong	local06, fp
10960     0A 28 66 F0 | 	shl	local06, #10
10964     14 13 02 F1 | 	add	arg01, local06
10968     04 4E 05 F1 | 	add	fp, #4
1096c     A7 28 02 FB | 	rdlong	local06, fp
10970     14 13 02 F1 | 	add	arg01, local06
10974     56 00 00 FF 
10978     B8 E4 05 F1 | 	add	objptr, ##44216
1097c     F2 28 02 F1 | 	add	local06, objptr
10980     14 15 C2 FA | 	rdbyte	arg02, local06
10984     09 15 42 FC | 	wrbyte	arg02, arg01
10988     56 00 00 FF 
1098c     B8 E4 85 F1 | 	sub	objptr, ##44216
10990     A7 28 02 FB | 	rdlong	local06, fp
10994     01 28 06 F1 | 	add	local06, #1
10998     A7 28 62 FC | 	wrlong	local06, fp
1099c     14 4E 85 F1 | 	sub	fp, #20
109a0     98 FF 9F FD | 	jmp	#LR__1313
109a4                 | LR__1314
109a4     14 4E 05 F1 | 	add	fp, #20
109a8     A7 00 68 FC | 	wrlong	#0, fp
109ac     04 4E 05 F1 | 	add	fp, #4
109b0     A7 2E 02 FB | 	rdlong	local09, fp
109b4     18 4E 85 F1 | 	sub	fp, #24
109b8                 | LR__1315
109b8     14 4E 05 F1 | 	add	fp, #20
109bc     A7 20 02 FB | 	rdlong	local02, fp
109c0     14 4E 85 F1 | 	sub	fp, #20
109c4     17 21 52 F2 | 	cmps	local02, local09 wc
109c8     5C 00 90 3D |  if_ae	jmp	#LR__1316
109cc     0C 4E 05 F1 | 	add	fp, #12
109d0     A7 12 02 FB | 	rdlong	arg01, fp
109d4     04 4E 05 F1 | 	add	fp, #4
109d8     A7 2C 02 FB | 	rdlong	local08, fp
109dc     0A 2C 66 F0 | 	shl	local08, #10
109e0     16 13 02 F1 | 	add	arg01, local08
109e4     04 4E 05 F1 | 	add	fp, #4
109e8     A7 2C 02 FB | 	rdlong	local08, fp
109ec     16 13 02 F1 | 	add	arg01, local08
109f0     14 4E 85 F1 | 	sub	fp, #20
109f4     56 00 00 FF 
109f8     B8 E4 05 F1 | 	add	objptr, ##44216
109fc     F2 2C 02 F1 | 	add	local08, objptr
10a00     16 15 C2 FA | 	rdbyte	arg02, local08
10a04     56 00 00 FF 
10a08     B8 E4 85 F1 | 	sub	objptr, ##44216
10a0c     A8 CD B0 FD | 	call	#_pspoke
10a10     14 4E 05 F1 | 	add	fp, #20
10a14     A7 2C 02 FB | 	rdlong	local08, fp
10a18     01 2C 06 F1 | 	add	local08, #1
10a1c     A7 2C 62 FC | 	wrlong	local08, fp
10a20     14 4E 85 F1 | 	sub	fp, #20
10a24     90 FF 9F FD | 	jmp	#LR__1315
10a28                 | LR__1316
10a28                 | LR__1317
10a28     14 4E 05 F1 | 	add	fp, #20
10a2c     A7 2E 02 FB | 	rdlong	local09, fp
10a30     17 29 02 F6 | 	mov	local06, local09
10a34     02 28 66 F0 | 	shl	local06, #2
10a38     58 00 00 FF 
10a3c     C8 E4 05 F1 | 	add	objptr, ##45256
10a40     F2 28 02 F1 | 	add	local06, objptr
10a44     02 2E 66 F0 | 	shl	local09, #2
10a48     F2 2E 02 F1 | 	add	local09, objptr
10a4c     17 2F 02 FB | 	rdlong	local09, local09
10a50     04 4E 05 F1 | 	add	fp, #4
10a54     A7 2C 02 FB | 	rdlong	local08, fp
10a58     16 2F 02 F1 | 	add	local09, local08
10a5c     14 2F 62 FC | 	wrlong	local09, local06
10a60     08 4E 85 F1 | 	sub	fp, #8
10a64     A7 2E 02 FB | 	rdlong	local09, fp
10a68     01 2E 06 F1 | 	add	local09, #1
10a6c     A7 2E 62 FC | 	wrlong	local09, fp
10a70     10 4E 85 F1 | 	sub	fp, #16
10a74     58 00 00 FF 
10a78     C8 E4 85 F1 | 	sub	objptr, ##45256
10a7c     40 FE 9F FD | 	jmp	#LR__1312
10a80                 | LR__1318
10a80                 | LR__1319
10a80     A7 F0 03 F6 | 	mov	ptra, fp
10a84     B2 00 A0 FD | 	call	#popregs_
10a88                 | _do_get_ret
10a88     2D 00 64 FD | 	ret
10a8c                 | 
10a8c                 | ' 
10a8c                 | ' sub  do_put
10a8c                 | _do_put
10a8c     03 4A 05 F6 | 	mov	COUNT_, #3
10a90     A8 00 A0 FD | 	call	#pushregs_
10a94     28 F0 07 F1 | 	add	ptra, #40
10a98     4A 00 00 FF 
10a9c     80 E4 05 F1 | 	add	objptr, ##38016
10aa0     F2 1A 02 FB | 	rdlong	arg05, objptr
10aa4     0D 19 02 F6 | 	mov	arg04, arg05
10aa8     01 18 66 F0 | 	shl	arg04, #1
10aac     0D 19 02 F1 | 	add	arg04, arg05
10ab0     02 18 66 F0 | 	shl	arg04, #2
10ab4     03 00 00 FF 
10ab8     04 E4 85 F1 | 	sub	objptr, ##1540
10abc     F2 18 02 F1 | 	add	arg04, objptr
10ac0     0C 1B 02 FB | 	rdlong	arg05, arg04
10ac4     A7 1A 62 FC | 	wrlong	arg05, fp
10ac8                 | ' numpar=compiledline(lineptr_e).result.uresult
10ac8                 | ' if  numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
10ac8     04 1A 0E F2 | 	cmp	arg05, #4 wz
10acc     47 00 00 FF 
10ad0     7C E4 85 F1 | 	sub	objptr, ##36476
10ad4     48 00 90 5D |  if_ne	jmp	#LR__1320
10ad8     BC B0 BF FD | 	call	#_pop
10adc     FF 1A 02 F6 | 	mov	arg05, result3
10ae0     1C 4E 05 F1 | 	add	fp, #28
10ae4     A7 FA 61 FC | 	wrlong	result1, fp
10ae8     04 4E 05 F1 | 	add	fp, #4
10aec     A7 FC 61 FC | 	wrlong	result2, fp
10af0     04 4E 05 F1 | 	add	fp, #4
10af4     A7 1A 62 FC | 	wrlong	arg05, fp
10af8     08 4E 85 F1 | 	sub	fp, #8
10afc     A7 12 02 F6 | 	mov	arg01, fp
10b00     1C 4E 85 F1 | 	sub	fp, #28
10b04     60 51 B0 FD | 	call	#_converttoint
10b08     5A 00 00 FF 
10b0c     40 E4 05 F1 | 	add	objptr, ##46144
10b10     F2 FA 61 FC | 	wrlong	result1, objptr
10b14     5A 00 00 FF 
10b18     40 E4 85 F1 | 	sub	objptr, ##46144
10b1c     18 00 90 FD | 	jmp	#LR__1321
10b20                 | LR__1320
10b20     5A 00 00 FF 
10b24     40 E4 05 F1 | 	add	objptr, ##46144
10b28     FF FF FF FF 
10b2c     F2 FE 6B FC | 	wrlong	##-1, objptr
10b30     5A 00 00 FF 
10b34     40 E4 85 F1 | 	sub	objptr, ##46144
10b38                 | LR__1321
10b38                 | ' if  numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
10b38     A7 1A 02 FB | 	rdlong	arg05, fp
10b3c     03 1A 56 F2 | 	cmps	arg05, #3 wc
10b40     40 00 90 CD |  if_b	jmp	#LR__1322
10b44     50 B0 BF FD | 	call	#_pop
10b48     FF 1A 02 F6 | 	mov	arg05, result3
10b4c     1C 4E 05 F1 | 	add	fp, #28
10b50     A7 FA 61 FC | 	wrlong	result1, fp
10b54     04 4E 05 F1 | 	add	fp, #4
10b58     A7 FC 61 FC | 	wrlong	result2, fp
10b5c     04 4E 05 F1 | 	add	fp, #4
10b60     A7 1A 62 FC | 	wrlong	arg05, fp
10b64     08 4E 85 F1 | 	sub	fp, #8
10b68     A7 12 02 F6 | 	mov	arg01, fp
10b6c     1C 4E 85 F1 | 	sub	fp, #28
10b70     F4 50 B0 FD | 	call	#_converttoint
10b74     08 4E 05 F1 | 	add	fp, #8
10b78     A7 FA 61 FC | 	wrlong	result1, fp
10b7c     08 4E 85 F1 | 	sub	fp, #8
10b80     0C 00 90 FD | 	jmp	#LR__1323
10b84                 | LR__1322
10b84     08 4E 05 F1 | 	add	fp, #8
10b88     A7 02 68 FC | 	wrlong	#1, fp
10b8c     08 4E 85 F1 | 	sub	fp, #8
10b90                 | LR__1323
10b90                 | ' if  numpar>=2  then t1=pop() : adr=converttoint(t1)
10b90     A7 18 02 FB | 	rdlong	arg04, fp
10b94     02 18 56 F2 | 	cmps	arg04, #2 wc
10b98     3C 00 90 CD |  if_b	jmp	#LR__1324
10b9c     F8 AF BF FD | 	call	#_pop
10ba0     FF 18 02 F6 | 	mov	arg04, result3
10ba4     1C 4E 05 F1 | 	add	fp, #28
10ba8     A7 FA 61 FC | 	wrlong	result1, fp
10bac     04 4E 05 F1 | 	add	fp, #4
10bb0     A7 FC 61 FC | 	wrlong	result2, fp
10bb4     04 4E 05 F1 | 	add	fp, #4
10bb8     A7 18 62 FC | 	wrlong	arg04, fp
10bbc     08 4E 85 F1 | 	sub	fp, #8
10bc0     A7 12 02 F6 | 	mov	arg01, fp
10bc4     1C 4E 85 F1 | 	sub	fp, #28
10bc8     9C 50 B0 FD | 	call	#_converttoint
10bcc     0C 4E 05 F1 | 	add	fp, #12
10bd0     A7 FA 61 FC | 	wrlong	result1, fp
10bd4     0C 4E 85 F1 | 	sub	fp, #12
10bd8                 | LR__1324
10bd8     BC AF BF FD | 	call	#_pop
10bdc     FF 18 02 F6 | 	mov	arg04, result3
10be0     1C 4E 05 F1 | 	add	fp, #28
10be4     A7 FA 61 FC | 	wrlong	result1, fp
10be8     04 4E 05 F1 | 	add	fp, #4
10bec     A7 FC 61 FC | 	wrlong	result2, fp
10bf0     04 4E 05 F1 | 	add	fp, #4
10bf4     A7 18 62 FC | 	wrlong	arg04, fp
10bf8     08 4E 85 F1 | 	sub	fp, #8
10bfc     A7 12 02 F6 | 	mov	arg01, fp
10c00     1C 4E 85 F1 | 	sub	fp, #28
10c04     60 50 B0 FD | 	call	#_converttoint
10c08     04 4E 05 F1 | 	add	fp, #4
10c0c     A7 FA 61 FC | 	wrlong	result1, fp
10c10     10 4E 05 F1 | 	add	fp, #16
10c14     A7 1E 02 FB | 	rdlong	local01, fp
10c18     14 4E 85 F1 | 	sub	fp, #20
10c1c     02 1E 66 F0 | 	shl	local01, #2
10c20     58 00 00 FF 
10c24     C8 E4 05 F1 | 	add	objptr, ##45256
10c28     F2 1E 02 F1 | 	add	local01, objptr
10c2c     0F 01 68 FC | 	wrlong	#0, local01
10c30                 | ' t1=pop() : channel=converttoint(t1)
10c30                 | ' 
10c30                 | ' getres(j)=0
10c30                 | ' if pos>=0 then
10c30     01 00 00 FF 
10c34     78 E5 05 F1 | 	add	objptr, ##888
10c38     F2 20 02 FB | 	rdlong	local02, objptr
10c3c     5A 00 00 FF 
10c40     40 E4 85 F1 | 	sub	objptr, ##46144
10c44     00 20 56 F2 | 	cmps	local02, #0 wc
10c48     C0 01 90 CD |  if_b	jmp	#LR__1330
10c4c     10 4E 05 F1 | 	add	fp, #16
10c50     A7 00 68 FC | 	wrlong	#0, fp
10c54     10 4E 85 F1 | 	sub	fp, #16
10c58                 | '    i=0: do
10c58                 | LR__1325
10c58     14 4E 05 F1 | 	add	fp, #20
10c5c     A7 00 68 FC | 	wrlong	#0, fp
10c60     14 4E 85 F1 | 	sub	fp, #20
10c64                 | '    j=0: do    
10c64                 | LR__1326
10c64                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
10c64     0C 4E 05 F1 | 	add	fp, #12
10c68     A7 20 02 FB | 	rdlong	local02, fp
10c6c     0C 4E 85 F1 | 	sub	fp, #12
10c70     00 04 00 FF 
10c74     00 20 56 F2 | 	cmps	local02, ##524288 wc
10c78     4C 00 90 3D |  if_ae	jmp	#LR__1327
10c7c     14 4E 05 F1 | 	add	fp, #20
10c80     A7 20 02 FB | 	rdlong	local02, fp
10c84     10 1F 02 F6 | 	mov	local01, local02
10c88     56 00 00 FF 
10c8c     B8 E4 05 F1 | 	add	objptr, ##44216
10c90     F2 1E 02 F1 | 	add	local01, objptr
10c94     08 4E 85 F1 | 	sub	fp, #8
10c98     A7 12 02 FB | 	rdlong	arg01, fp
10c9c     04 4E 05 F1 | 	add	fp, #4
10ca0     A7 18 02 FB | 	rdlong	arg04, fp
10ca4     0A 18 66 F0 | 	shl	arg04, #10
10ca8     0C 13 02 F1 | 	add	arg01, arg04
10cac     10 4E 85 F1 | 	sub	fp, #16
10cb0     10 13 02 F1 | 	add	arg01, local02
10cb4     09 FB C1 FA | 	rdbyte	result1, arg01
10cb8     56 00 00 FF 
10cbc     B8 E4 85 F1 | 	sub	objptr, ##44216
10cc0     0F FB 41 FC | 	wrbyte	result1, local01
10cc4     48 00 90 FD | 	jmp	#LR__1328
10cc8                 | LR__1327
10cc8     14 4E 05 F1 | 	add	fp, #20
10ccc     A7 20 02 FB | 	rdlong	local02, fp
10cd0     10 1F 02 F6 | 	mov	local01, local02
10cd4     56 00 00 FF 
10cd8     B8 E4 05 F1 | 	add	objptr, ##44216
10cdc     F2 1E 02 F1 | 	add	local01, objptr
10ce0     08 4E 85 F1 | 	sub	fp, #8
10ce4     A7 12 02 FB | 	rdlong	arg01, fp
10ce8     04 4E 05 F1 | 	add	fp, #4
10cec     A7 18 02 FB | 	rdlong	arg04, fp
10cf0     0A 18 66 F0 | 	shl	arg04, #10
10cf4     0C 13 02 F1 | 	add	arg01, arg04
10cf8     10 4E 85 F1 | 	sub	fp, #16
10cfc     10 13 02 F1 | 	add	arg01, local02
10d00     56 00 00 FF 
10d04     B8 E4 85 F1 | 	sub	objptr, ##44216
10d08     F4 CA B0 FD | 	call	#_pspeek
10d0c     0F FB 41 FC | 	wrbyte	result1, local01
10d10                 | LR__1328
10d10     14 4E 05 F1 | 	add	fp, #20
10d14     A7 20 02 FB | 	rdlong	local02, fp
10d18     01 20 06 F1 | 	add	local02, #1
10d1c     A7 20 62 FC | 	wrlong	local02, fp
10d20     14 4E 85 F1 | 	sub	fp, #20
10d24     02 00 00 FF 
10d28     00 20 56 F2 | 	cmps	local02, ##1024 wc
10d2c     2C 00 90 3D |  if_ae	jmp	#LR__1329
10d30     10 4E 05 F1 | 	add	fp, #16
10d34     A7 1E 02 FB | 	rdlong	local01, fp
10d38     0A 1E 66 F0 | 	shl	local01, #10
10d3c     04 4E 05 F1 | 	add	fp, #4
10d40     A7 20 02 FB | 	rdlong	local02, fp
10d44     10 1F 02 F1 | 	add	local01, local02
10d48     0C 4E 85 F1 | 	sub	fp, #12
10d4c     A7 20 02 FB | 	rdlong	local02, fp
10d50     08 4E 85 F1 | 	sub	fp, #8
10d54     10 1F 5A F2 | 	cmps	local01, local02 wcz
10d58     08 FF 9F ED |  if_be	jmp	#LR__1326
10d5c                 | LR__1329
10d5c                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
10d5c     04 4E 05 F1 | 	add	fp, #4
10d60     A7 12 02 FB | 	rdlong	arg01, fp
10d64     5A 00 00 FF 
10d68     40 E4 05 F1 | 	add	objptr, ##46144
10d6c     F2 14 02 FB | 	rdlong	arg02, objptr
10d70     01 14 06 F1 | 	add	arg02, #1
10d74     03 00 00 FF 
10d78     88 E5 85 F1 | 	sub	objptr, ##1928
10d7c     F2 16 02 F6 | 	mov	arg03, objptr
10d80     56 00 00 FF 
10d84     B8 E4 85 F1 | 	sub	objptr, ##44216
10d88     04 4E 05 F1 | 	add	fp, #4
10d8c     A7 18 02 FB | 	rdlong	arg04, fp
10d90     08 4E 85 F1 | 	sub	fp, #8
10d94     01 1A 06 F6 | 	mov	arg05, #1
10d98     90 09 B1 FD | 	call	#__system___basic_put
10d9c     18 4E 05 F1 | 	add	fp, #24
10da0     A7 FA 61 FC | 	wrlong	result1, fp
10da4     14 4E 85 F1 | 	sub	fp, #20
10da8     A7 1E 02 FB | 	rdlong	local01, fp
10dac     02 1E 66 F0 | 	shl	local01, #2
10db0     58 00 00 FF 
10db4     C8 E4 05 F1 | 	add	objptr, ##45256
10db8     F2 1E 02 F1 | 	add	local01, objptr
10dbc     0F FB 61 FC | 	wrlong	result1, local01
10dc0                 | '    if 1024*i+j>amount then exit loop
10dc0     0C 4E 05 F1 | 	add	fp, #12
10dc4     A7 20 02 FB | 	rdlong	local02, fp
10dc8     0A 20 66 F0 | 	shl	local02, #10
10dcc     04 4E 05 F1 | 	add	fp, #4
10dd0     A7 1E 02 FB | 	rdlong	local01, fp
10dd4     0F 21 02 F1 | 	add	local02, local01
10dd8     0C 4E 85 F1 | 	sub	fp, #12
10ddc     A7 1E 02 FB | 	rdlong	local01, fp
10de0     08 4E 85 F1 | 	sub	fp, #8
10de4     0F 21 5A F2 | 	cmps	local02, local01 wcz
10de8     58 00 00 FF 
10dec     C8 E4 85 F1 | 	sub	objptr, ##45256
10df0     CC 01 90 1D |  if_a	jmp	#LR__1337
10df4     10 4E 05 F1 | 	add	fp, #16
10df8     A7 20 02 FB | 	rdlong	local02, fp
10dfc     01 20 06 F1 | 	add	local02, #1
10e00     A7 20 62 FC | 	wrlong	local02, fp
10e04     10 4E 85 F1 | 	sub	fp, #16
10e08     4C FE 9F FD | 	jmp	#LR__1325
10e0c                 | LR__1330
10e0c     10 4E 05 F1 | 	add	fp, #16
10e10     A7 00 68 FC | 	wrlong	#0, fp
10e14     10 4E 85 F1 | 	sub	fp, #16
10e18                 | '    i=0: do
10e18                 | LR__1331
10e18     14 4E 05 F1 | 	add	fp, #20
10e1c     A7 00 68 FC | 	wrlong	#0, fp
10e20     14 4E 85 F1 | 	sub	fp, #20
10e24                 | '    j=0: do  
10e24                 | LR__1332
10e24                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
10e24     0C 4E 05 F1 | 	add	fp, #12
10e28     A7 20 02 FB | 	rdlong	local02, fp
10e2c     0C 4E 85 F1 | 	sub	fp, #12
10e30     00 04 00 FF 
10e34     00 20 56 F2 | 	cmps	local02, ##524288 wc
10e38     4C 00 90 3D |  if_ae	jmp	#LR__1333
10e3c     14 4E 05 F1 | 	add	fp, #20
10e40     A7 20 02 FB | 	rdlong	local02, fp
10e44     10 1F 02 F6 | 	mov	local01, local02
10e48     56 00 00 FF 
10e4c     B8 E4 05 F1 | 	add	objptr, ##44216
10e50     F2 1E 02 F1 | 	add	local01, objptr
10e54     08 4E 85 F1 | 	sub	fp, #8
10e58     A7 12 02 FB | 	rdlong	arg01, fp
10e5c     04 4E 05 F1 | 	add	fp, #4
10e60     A7 18 02 FB | 	rdlong	arg04, fp
10e64     0A 18 66 F0 | 	shl	arg04, #10
10e68     0C 13 02 F1 | 	add	arg01, arg04
10e6c     10 4E 85 F1 | 	sub	fp, #16
10e70     10 13 02 F1 | 	add	arg01, local02
10e74     09 FB C1 FA | 	rdbyte	result1, arg01
10e78     56 00 00 FF 
10e7c     B8 E4 85 F1 | 	sub	objptr, ##44216
10e80     0F FB 41 FC | 	wrbyte	result1, local01
10e84     48 00 90 FD | 	jmp	#LR__1334
10e88                 | LR__1333
10e88     14 4E 05 F1 | 	add	fp, #20
10e8c     A7 20 02 FB | 	rdlong	local02, fp
10e90     10 1F 02 F6 | 	mov	local01, local02
10e94     56 00 00 FF 
10e98     B8 E4 05 F1 | 	add	objptr, ##44216
10e9c     F2 1E 02 F1 | 	add	local01, objptr
10ea0     08 4E 85 F1 | 	sub	fp, #8
10ea4     A7 12 02 FB | 	rdlong	arg01, fp
10ea8     04 4E 05 F1 | 	add	fp, #4
10eac     A7 18 02 FB | 	rdlong	arg04, fp
10eb0     0A 18 66 F0 | 	shl	arg04, #10
10eb4     0C 13 02 F1 | 	add	arg01, arg04
10eb8     10 4E 85 F1 | 	sub	fp, #16
10ebc     10 13 02 F1 | 	add	arg01, local02
10ec0     56 00 00 FF 
10ec4     B8 E4 85 F1 | 	sub	objptr, ##44216
10ec8     34 C9 B0 FD | 	call	#_pspeek
10ecc     0F FB 41 FC | 	wrbyte	result1, local01
10ed0                 | LR__1334
10ed0     14 4E 05 F1 | 	add	fp, #20
10ed4     A7 20 02 FB | 	rdlong	local02, fp
10ed8     01 20 06 F1 | 	add	local02, #1
10edc     A7 20 62 FC | 	wrlong	local02, fp
10ee0     14 4E 85 F1 | 	sub	fp, #20
10ee4     02 00 00 FF 
10ee8     00 20 56 F2 | 	cmps	local02, ##1024 wc
10eec     2C 00 90 3D |  if_ae	jmp	#LR__1335
10ef0     10 4E 05 F1 | 	add	fp, #16
10ef4     A7 1E 02 FB | 	rdlong	local01, fp
10ef8     0A 1E 66 F0 | 	shl	local01, #10
10efc     04 4E 05 F1 | 	add	fp, #4
10f00     A7 20 02 FB | 	rdlong	local02, fp
10f04     10 1F 02 F1 | 	add	local01, local02
10f08     0C 4E 85 F1 | 	sub	fp, #12
10f0c     A7 20 02 FB | 	rdlong	local02, fp
10f10     08 4E 85 F1 | 	sub	fp, #8
10f14     10 1F 5A F2 | 	cmps	local01, local02 wcz
10f18     08 FF 9F ED |  if_be	jmp	#LR__1332
10f1c                 | LR__1335
10f1c                 | '    put #channel,,block(0),amount, r : getres(channel)=r
10f1c     04 4E 05 F1 | 	add	fp, #4
10f20     A7 12 02 FB | 	rdlong	arg01, fp
10f24     56 00 00 FF 
10f28     B8 E4 05 F1 | 	add	objptr, ##44216
10f2c     F2 16 02 F6 | 	mov	arg03, objptr
10f30     56 00 00 FF 
10f34     B8 E4 85 F1 | 	sub	objptr, ##44216
10f38     04 4E 05 F1 | 	add	fp, #4
10f3c     A7 18 02 FB | 	rdlong	arg04, fp
10f40     08 4E 85 F1 | 	sub	fp, #8
10f44     00 14 06 F6 | 	mov	arg02, #0
10f48     01 1A 06 F6 | 	mov	arg05, #1
10f4c     DC 07 B1 FD | 	call	#__system___basic_put
10f50     18 4E 05 F1 | 	add	fp, #24
10f54     A7 FA 61 FC | 	wrlong	result1, fp
10f58     14 4E 85 F1 | 	sub	fp, #20
10f5c     A7 1E 02 FB | 	rdlong	local01, fp
10f60     02 1E 66 F0 | 	shl	local01, #2
10f64     58 00 00 FF 
10f68     C8 E4 05 F1 | 	add	objptr, ##45256
10f6c     F2 1E 02 F1 | 	add	local01, objptr
10f70     0F FB 61 FC | 	wrlong	result1, local01
10f74                 | '    if 1024*i+j>amount then exit loop
10f74     0C 4E 05 F1 | 	add	fp, #12
10f78     A7 20 02 FB | 	rdlong	local02, fp
10f7c     0A 20 66 F0 | 	shl	local02, #10
10f80     04 4E 05 F1 | 	add	fp, #4
10f84     A7 1E 02 FB | 	rdlong	local01, fp
10f88     0F 21 02 F1 | 	add	local02, local01
10f8c     0C 4E 85 F1 | 	sub	fp, #12
10f90     A7 22 02 FB | 	rdlong	local03, fp
10f94     08 4E 85 F1 | 	sub	fp, #8
10f98     11 21 5A F2 | 	cmps	local02, local03 wcz
10f9c     58 00 00 FF 
10fa0     C8 E4 85 F1 | 	sub	objptr, ##45256
10fa4     18 00 90 1D |  if_a	jmp	#LR__1336
10fa8     10 4E 05 F1 | 	add	fp, #16
10fac     A7 20 02 FB | 	rdlong	local02, fp
10fb0     01 20 06 F1 | 	add	local02, #1
10fb4     A7 20 62 FC | 	wrlong	local02, fp
10fb8     10 4E 85 F1 | 	sub	fp, #16
10fbc     58 FE 9F FD | 	jmp	#LR__1331
10fc0                 | LR__1336
10fc0                 | LR__1337
10fc0     A7 F0 03 F6 | 	mov	ptra, fp
10fc4     B2 00 A0 FD | 	call	#popregs_
10fc8                 | _do_put_ret
10fc8     2D 00 64 FD | 	ret
10fcc                 | 
10fcc                 | '   
10fcc                 | ' sub do_find_goto
10fcc                 | _do_find_goto
10fcc     03 4A 05 F6 | 	mov	COUNT_, #3
10fd0     A8 00 A0 FD | 	call	#pushregs_
10fd4     24 F0 07 F1 | 	add	ptra, #36
10fd8                 | _do_find_goto_enter
10fd8     4A 00 00 FF 
10fdc     80 E4 05 F1 | 	add	objptr, ##38016
10fe0     F2 1E 02 FB | 	rdlong	local01, objptr
10fe4     0F 21 02 F6 | 	mov	local02, local01
10fe8     01 20 66 F0 | 	shl	local02, #1
10fec     0F 21 02 F1 | 	add	local02, local01
10ff0     02 20 66 F0 | 	shl	local02, #2
10ff4     03 00 00 FF 
10ff8     04 E4 85 F1 | 	sub	objptr, ##1540
10ffc     F2 20 02 F1 | 	add	local02, objptr
11000     04 20 06 F1 | 	add	local02, #4
11004     10 21 02 FB | 	rdlong	local02, local02
11008     A7 20 62 FC | 	wrlong	local02, fp
1100c     03 00 00 FF 
11010     08 E4 05 F1 | 	add	objptr, ##1544
11014     F2 22 02 FB | 	rdlong	local03, objptr
11018     4A 00 00 FF 
1101c     84 E4 85 F1 | 	sub	objptr, ##38020
11020     04 4E 05 F1 | 	add	fp, #4
11024     A7 22 62 FC | 	wrlong	local03, fp
11028     04 4E 85 F1 | 	sub	fp, #4
1102c                 | ' 
1102c                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
1102c                 | '  ' print "find goto"                                                                     'print gotoline 
1102c                 | ' gotoptr=programstart
1102c                 | ' do
1102c                 | LR__1340
1102c     0C 4E 05 F1 | 	add	fp, #12
11030     A7 12 02 F6 | 	mov	arg01, fp
11034     08 4E 85 F1 | 	sub	fp, #8
11038     A7 14 02 FB | 	rdlong	arg02, fp
1103c     04 4E 85 F1 | 	sub	fp, #4
11040     18 16 06 F6 | 	mov	arg03, #24
11044     0B 00 00 FF 
11048     CC E4 05 F1 | 	add	objptr, ##5836
1104c     98 EC B0 FD | 	call	#_psram_spin2_read1
11050     0B 00 00 FF 
11054     CC E4 85 F1 | 	sub	objptr, ##5836
11058                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
11058                 | '   if gotoheader(0)<>$FFFFFFFF then
11058     0C 4E 05 F1 | 	add	fp, #12
1105c     A7 22 02 FB | 	rdlong	local03, fp
11060     0C 4E 85 F1 | 	sub	fp, #12
11064     FF FF 7F FF 
11068     FF 23 0E F2 | 	cmp	local03, ##-1 wz
1106c     24 00 90 AD |  if_e	jmp	#LR__1341
11070     04 4E 05 F1 | 	add	fp, #4
11074     A7 22 02 FB | 	rdlong	local03, fp
11078     04 4E 05 F1 | 	add	fp, #4
1107c     A7 22 62 FC | 	wrlong	local03, fp
11080     18 4E 05 F1 | 	add	fp, #24
11084     A7 22 02 FB | 	rdlong	local03, fp
11088     1C 4E 85 F1 | 	sub	fp, #28
1108c     A7 22 62 FC | 	wrlong	local03, fp
11090     04 4E 85 F1 | 	sub	fp, #4
11094                 | LR__1341
11094     20 4E 05 F1 | 	add	fp, #32
11098     A7 22 02 FB | 	rdlong	local03, fp
1109c     20 4E 85 F1 | 	sub	fp, #32
110a0     FF FF 3F FF 
110a4     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
110a8     0C 4E 05 51 |  if_ne	add	fp, #12
110ac     A7 1E 02 5B |  if_ne	rdlong	local01, fp
110b0     0C 4E 85 51 |  if_ne	sub	fp, #12
110b4     FF FF 7F 5F 
110b8     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
110bc     18 00 90 AD |  if_e	jmp	#LR__1342
110c0     0C 4E 05 F1 | 	add	fp, #12
110c4     A7 22 02 FB | 	rdlong	local03, fp
110c8     0C 4E 85 F1 | 	sub	fp, #12
110cc     A7 20 02 FB | 	rdlong	local02, fp
110d0     10 23 0A F2 | 	cmp	local03, local02 wz
110d4     54 FF 9F 5D |  if_ne	jmp	#LR__1340
110d8                 | LR__1342
110d8                 | ' 
110d8                 | ' if gotoheader(0)=gotoline then
110d8     0C 4E 05 F1 | 	add	fp, #12
110dc     A7 22 02 FB | 	rdlong	local03, fp
110e0     0C 4E 85 F1 | 	sub	fp, #12
110e4     A7 1E 02 FB | 	rdlong	local01, fp
110e8     0F 23 0A F2 | 	cmp	local03, local01 wz
110ec     D8 00 90 5D |  if_ne	jmp	#LR__1343
110f0     4A 00 00 FF 
110f4     80 E4 05 F1 | 	add	objptr, ##38016
110f8     F2 1E 02 FB | 	rdlong	local01, objptr
110fc     0F 21 02 F6 | 	mov	local02, local01
11100     01 20 66 F0 | 	shl	local02, #1
11104     0F 21 02 F1 | 	add	local02, local01
11108     02 20 66 F0 | 	shl	local02, #2
1110c     03 00 00 FF 
11110     04 E4 85 F1 | 	sub	objptr, ##1540
11114     F2 20 02 F1 | 	add	local02, objptr
11118     08 4E 05 F1 | 	add	fp, #8
1111c     A7 22 02 FB | 	rdlong	local03, fp
11120     10 23 62 FC | 	wrlong	local03, local02
11124     03 00 00 FF 
11128     04 E4 05 F1 | 	add	objptr, ##1540
1112c     F2 1E 02 FB | 	rdlong	local01, objptr
11130     0F 21 02 F6 | 	mov	local02, local01
11134     01 20 66 F0 | 	shl	local02, #1
11138     0F 21 02 F1 | 	add	local02, local01
1113c     02 20 66 F0 | 	shl	local02, #2
11140     03 00 00 FF 
11144     04 E4 85 F1 | 	sub	objptr, ##1540
11148     F2 20 02 F1 | 	add	local02, objptr
1114c     08 20 06 F1 | 	add	local02, #8
11150     10 9D 68 FC | 	wrlong	#78, local02
11154     03 00 00 FF 
11158     04 E4 05 F1 | 	add	objptr, ##1540
1115c     F2 20 02 FB | 	rdlong	local02, objptr
11160     10 13 02 F6 | 	mov	arg01, local02
11164     01 12 66 F0 | 	shl	arg01, #1
11168     10 13 02 F1 | 	add	arg01, local02
1116c     02 12 66 F0 | 	shl	arg01, #2
11170     03 00 00 FF 
11174     04 E4 85 F1 | 	sub	objptr, ##1540
11178     F2 12 02 F1 | 	add	arg01, objptr
1117c     11 00 00 FF 
11180     48 E4 05 F1 | 	add	objptr, ##8776
11184     F2 14 02 FB | 	rdlong	arg02, objptr
11188     02 22 06 F6 | 	mov	local03, #2
1118c     10 23 02 F1 | 	add	local03, local02
11190     13 00 00 FF 
11194     60 E4 85 F1 | 	sub	objptr, ##9824
11198     F2 16 02 FB | 	rdlong	arg03, objptr
1119c     0B 23 02 FD | 	qmul	local03, arg03
111a0     08 4E 85 F1 | 	sub	fp, #8
111a4     39 00 00 FF 
111a8     98 E5 85 F1 | 	sub	objptr, ##29592
111ac     18 22 62 FD | 	getqx	local03
111b0     11 15 02 F1 | 	add	arg02, local03
111b4     CC EB B0 FD | 	call	#_psram_spin2_write
111b8     0B 00 00 FF 
111bc     CC E4 85 F1 | 	sub	objptr, ##5836
111c0     A0 EE BF FD | 	call	#_do_fast_goto
111c4     08 00 90 FD | 	jmp	#LR__1344
111c8                 | LR__1343
111c8     26 12 06 F6 | 	mov	arg01, #38
111cc     F4 C3 B0 FD | 	call	#_printerror
111d0                 | LR__1344
111d0     A7 F0 03 F6 | 	mov	ptra, fp
111d4     B2 00 A0 FD | 	call	#popregs_
111d8                 | _do_find_goto_ret
111d8     2D 00 64 FD | 	ret
111dc                 | 
111dc                 | ' 
111dc                 | ' sub do_slow_goto
111dc                 | _do_slow_goto
111dc     02 4A 05 F6 | 	mov	COUNT_, #2
111e0     A8 00 A0 FD | 	call	#pushregs_
111e4     30 F0 07 F1 | 	add	ptra, #48
111e8     AC A9 BF FD | 	call	#_pop
111ec     FF 1E 02 F6 | 	mov	local01, result3
111f0     24 4E 05 F1 | 	add	fp, #36
111f4     A7 FA 61 FC | 	wrlong	result1, fp
111f8     04 4E 05 F1 | 	add	fp, #4
111fc     A7 FC 61 FC | 	wrlong	result2, fp
11200     04 4E 05 F1 | 	add	fp, #4
11204     A7 1E 62 FC | 	wrlong	local01, fp
11208     08 4E 85 F1 | 	sub	fp, #8
1120c     A7 12 02 F6 | 	mov	arg01, fp
11210     24 4E 85 F1 | 	sub	fp, #36
11214     50 4A B0 FD | 	call	#_converttoint
11218     A7 FA 61 FC | 	wrlong	result1, fp
1121c     4A 00 00 FF 
11220     84 E4 05 F1 | 	add	objptr, ##38020
11224     F2 20 02 FB | 	rdlong	local02, objptr
11228     4A 00 00 FF 
1122c     84 E4 85 F1 | 	sub	objptr, ##38020
11230     04 4E 05 F1 | 	add	fp, #4
11234     A7 20 62 FC | 	wrlong	local02, fp
11238     04 4E 85 F1 | 	sub	fp, #4
1123c                 | ' 
1123c                 | ' t1=pop() : gotoline=converttoint(t1)
1123c                 | ' gotoptr=programstart
1123c                 | ' do
1123c                 | LR__1350
1123c     0C 4E 05 F1 | 	add	fp, #12
11240     A7 12 02 F6 | 	mov	arg01, fp
11244     08 4E 85 F1 | 	sub	fp, #8
11248     A7 14 02 FB | 	rdlong	arg02, fp
1124c     04 4E 85 F1 | 	sub	fp, #4
11250     18 16 06 F6 | 	mov	arg03, #24
11254     0B 00 00 FF 
11258     CC E4 05 F1 | 	add	objptr, ##5836
1125c     88 EA B0 FD | 	call	#_psram_spin2_read1
11260     0B 00 00 FF 
11264     CC E4 85 F1 | 	sub	objptr, ##5836
11268                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
11268                 | '   if gotoheader(0)<>$FFFFFFFF then
11268     0C 4E 05 F1 | 	add	fp, #12
1126c     A7 20 02 FB | 	rdlong	local02, fp
11270     0C 4E 85 F1 | 	sub	fp, #12
11274     FF FF 7F FF 
11278     FF 21 0E F2 | 	cmp	local02, ##-1 wz
1127c     24 00 90 AD |  if_e	jmp	#LR__1351
11280     04 4E 05 F1 | 	add	fp, #4
11284     A7 20 02 FB | 	rdlong	local02, fp
11288     04 4E 05 F1 | 	add	fp, #4
1128c     A7 20 62 FC | 	wrlong	local02, fp
11290     18 4E 05 F1 | 	add	fp, #24
11294     A7 20 02 FB | 	rdlong	local02, fp
11298     1C 4E 85 F1 | 	sub	fp, #28
1129c     A7 20 62 FC | 	wrlong	local02, fp
112a0     04 4E 85 F1 | 	sub	fp, #4
112a4                 | LR__1351
112a4     20 4E 05 F1 | 	add	fp, #32
112a8     A7 20 02 FB | 	rdlong	local02, fp
112ac     20 4E 85 F1 | 	sub	fp, #32
112b0     FF FF 3F FF 
112b4     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
112b8     0C 4E 05 51 |  if_ne	add	fp, #12
112bc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
112c0     0C 4E 85 51 |  if_ne	sub	fp, #12
112c4     FF FF 7F 5F 
112c8     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
112cc     18 00 90 AD |  if_e	jmp	#LR__1352
112d0     0C 4E 05 F1 | 	add	fp, #12
112d4     A7 20 02 FB | 	rdlong	local02, fp
112d8     0C 4E 85 F1 | 	sub	fp, #12
112dc     A7 16 02 FB | 	rdlong	arg03, fp
112e0     0B 21 0A F2 | 	cmp	local02, arg03 wz
112e4     54 FF 9F 5D |  if_ne	jmp	#LR__1350
112e8                 | LR__1352
112e8                 | ' if gotoheader(0)=gotoline then  
112e8     0C 4E 05 F1 | 	add	fp, #12
112ec     A7 20 02 FB | 	rdlong	local02, fp
112f0     0C 4E 85 F1 | 	sub	fp, #12
112f4     A7 1E 02 FB | 	rdlong	local01, fp
112f8     0F 21 0A F2 | 	cmp	local02, local01 wz
112fc     60 00 90 5D |  if_ne	jmp	#LR__1353
11300     08 4E 05 F1 | 	add	fp, #8
11304     A7 20 02 FB | 	rdlong	local02, fp
11308     08 4E 85 F1 | 	sub	fp, #8
1130c     58 00 00 FF 
11310     BC E4 05 F1 | 	add	objptr, ##45244
11314     F2 20 62 FC | 	wrlong	local02, objptr
11318     0E 00 00 FF 
1131c     40 E4 85 F1 | 	sub	objptr, ##7232
11320     F2 20 02 FB | 	rdlong	local02, objptr
11324     01 20 86 F1 | 	sub	local02, #1
11328     04 E4 05 F1 | 	add	objptr, #4
1132c     F2 20 62 FC | 	wrlong	local02, objptr
11330                 | '    runptr=oldgotoptr
11330                 | '    lineptr_e=lineptr-1
11330                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
11330     0E 00 00 FF 
11334     88 E4 05 F1 | 	add	objptr, ##7304
11338     F2 20 02 FB | 	rdlong	local02, objptr
1133c     58 00 00 FF 
11340     08 E5 85 F1 | 	sub	objptr, ##45320
11344     FF FF 3F FF 
11348     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
1134c     58 00 00 AF 
11350     08 E5 05 A1 |  if_e	add	objptr, ##45320
11354     F2 00 68 AC |  if_e	wrlong	#0, objptr
11358     58 00 00 AF 
1135c     08 E5 85 A1 |  if_e	sub	objptr, ##45320
11360                 | LR__1353
11360     A7 F0 03 F6 | 	mov	ptra, fp
11364     B2 00 A0 FD | 	call	#popregs_
11368                 | _do_slow_goto_ret
11368     2D 00 64 FD | 	ret
1136c                 | 
1136c                 | ' 
1136c                 | ' '----------------------- Error processing
1136c                 | ' 
1136c                 | ' sub do_error
1136c                 | _do_error
1136c     01 4A 05 F6 | 	mov	COUNT_, #1
11370     A8 00 A0 FD | 	call	#pushregs_
11374     4A 00 00 FF 
11378     80 E4 05 F1 | 	add	objptr, ##38016
1137c     F2 18 02 FB | 	rdlong	arg04, objptr
11380     0C 17 02 F6 | 	mov	arg03, arg04
11384     01 16 66 F0 | 	shl	arg03, #1
11388     0C 17 02 F1 | 	add	arg03, arg04
1138c     02 16 66 F0 | 	shl	arg03, #2
11390     03 00 00 FF 
11394     04 E4 85 F1 | 	sub	objptr, ##1540
11398     F2 16 02 F1 | 	add	arg03, objptr
1139c     0B 1F 02 FB | 	rdlong	local01, arg03
113a0                 | ' r=compiledline(lineptr_e).result.uresult
113a0                 | ' print "Error ";r;": ";errors$(r)
113a0     00 12 06 F6 | 	mov	arg01, #0
113a4     47 00 00 FF 
113a8     7C E4 85 F1 | 	sub	objptr, ##36476
113ac     B8 4F B1 FD | 	call	#__system___getiolock_0540
113b0     FD 12 02 F6 | 	mov	arg01, result1
113b4     70 F5 B0 FD | 	call	#__system___lockmem
113b8     84 01 00 FF 
113bc     B7 14 06 F6 | 	mov	arg02, ##@LR__5417
113c0     00 12 06 F6 | 	mov	arg01, #0
113c4     00 16 06 F6 | 	mov	arg03, #0
113c8     50 02 B1 FD | 	call	#__system___basic_print_string
113cc     00 12 06 F6 | 	mov	arg01, #0
113d0     0F 15 02 F6 | 	mov	arg02, local01
113d4     00 16 06 F6 | 	mov	arg03, #0
113d8     0A 18 06 F6 | 	mov	arg04, #10
113dc     C0 02 B1 FD | 	call	#__system___basic_print_unsigned
113e0     84 01 00 FF 
113e4     BE 14 06 F6 | 	mov	arg02, ##@LR__5418
113e8     00 12 06 F6 | 	mov	arg01, #0
113ec     00 16 06 F6 | 	mov	arg03, #0
113f0     28 02 B1 FD | 	call	#__system___basic_print_string
113f4     02 1E 66 F0 | 	shl	local01, #2
113f8     45 00 00 FF 
113fc     7C E4 05 F1 | 	add	objptr, ##35452
11400     F2 1E 02 F1 | 	add	local01, objptr
11404     0F 15 02 FB | 	rdlong	arg02, local01
11408     00 12 06 F6 | 	mov	arg01, #0
1140c     00 16 06 F6 | 	mov	arg03, #0
11410     45 00 00 FF 
11414     7C E4 85 F1 | 	sub	objptr, ##35452
11418     00 02 B1 FD | 	call	#__system___basic_print_string
1141c     00 12 06 F6 | 	mov	arg01, #0
11420     0A 14 06 F6 | 	mov	arg02, #10
11424     00 16 06 F6 | 	mov	arg03, #0
11428     98 01 B1 FD | 	call	#__system___basic_print_char
1142c     00 12 06 F6 | 	mov	arg01, #0
11430     34 4F B1 FD | 	call	#__system___getiolock_0540
11434     FD 00 68 FC | 	wrlong	#0, result1
11438     A7 F0 03 F6 | 	mov	ptra, fp
1143c     B2 00 A0 FD | 	call	#popregs_
11440                 | _do_error_ret
11440     2D 00 64 FD | 	ret
11444                 | 
11444                 | ' 
11444                 | ' 
11444                 | ' '------------------ Assigning to a variable  
11444                 | ' 
11444                 | ' function  convertstring(psaddr as ulong) as string
11444                 | _convertstring
11444     04 4A 05 F6 | 	mov	COUNT_, #4
11448     A8 00 A0 FD | 	call	#pushregs_
1144c     09 1F 02 F6 | 	mov	local01, arg01
11450     04 C4 B0 FD | 	call	#_pslpeek
11454     FD 20 02 F6 | 	mov	local02, result1
11458     84 01 00 FF 
1145c     C1 22 06 F6 | 	mov	local03, ##@LR__5419
11460                 | ' 'print "in convertstring: psaddr=";psaddr
11460                 | ' l=pslpeek(psaddr)
11460                 | ' 'print "in convertstring: len=";l
11460                 | ' s="" 
11460                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
11460     01 24 06 F6 | 	mov	local04, #1
11464     01 20 06 F1 | 	add	local02, #1
11468                 | LR__1360
11468     10 25 52 F2 | 	cmps	local04, local02 wc
1146c     30 00 90 3D |  if_ae	jmp	#LR__1361
11470     0F 13 02 F6 | 	mov	arg01, local01
11474     03 12 06 F1 | 	add	arg01, #3
11478     12 13 02 F1 | 	add	arg01, local04
1147c     80 C3 B0 FD | 	call	#_pspeek
11480     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
11484     E0 16 B1 FD | 	call	#__system__Chr_S
11488     FD 14 02 F6 | 	mov	arg02, result1
1148c     11 13 02 F6 | 	mov	arg01, local03
11490     F0 F4 B0 FD | 	call	#__system___string_concat
11494     FD 22 02 F6 | 	mov	local03, result1
11498     01 24 06 F1 | 	add	local04, #1
1149c     C8 FF 9F FD | 	jmp	#LR__1360
114a0                 | LR__1361
114a0                 | ' 'print "in convertstring: str=";s
114a0                 | ' return s
114a0     11 FB 01 F6 | 	mov	result1, local03
114a4     A7 F0 03 F6 | 	mov	ptra, fp
114a8     B2 00 A0 FD | 	call	#popregs_
114ac                 | _convertstring_ret
114ac     2D 00 64 FD | 	ret
114b0                 | 
114b0                 | ' 
114b0                 | ' sub do_assign
114b0                 | _do_assign
114b0     05 4A 05 F6 | 	mov	COUNT_, #5
114b4     A8 00 A0 FD | 	call	#pushregs_
114b8     44 F0 07 F1 | 	add	ptra, #68
114bc     4A 00 00 FF 
114c0     80 E4 05 F1 | 	add	objptr, ##38016
114c4     F2 16 02 FB | 	rdlong	arg03, objptr
114c8     0B 15 02 F6 | 	mov	arg02, arg03
114cc     01 14 66 F0 | 	shl	arg02, #1
114d0     0B 15 02 F1 | 	add	arg02, arg03
114d4     02 14 66 F0 | 	shl	arg02, #2
114d8     03 00 00 FF 
114dc     04 E4 85 F1 | 	sub	objptr, ##1540
114e0     F2 14 02 F1 | 	add	arg02, objptr
114e4     0A 15 02 FB | 	rdlong	arg02, arg02
114e8     18 4E 05 F1 | 	add	fp, #24
114ec     A7 14 62 FC | 	wrlong	arg02, fp
114f0                 | ' 
114f0                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
114f0                 | ' if variables(varnum).vartype<array_no_type then 
114f0     18 4E 85 F1 | 	sub	fp, #24
114f4     04 14 66 F0 | 	shl	arg02, #4
114f8     32 00 00 FF 
114fc     84 E4 85 F1 | 	sub	objptr, ##25732
11500     F2 14 02 F1 | 	add	arg02, objptr
11504     0C 14 06 F1 | 	add	arg02, #12
11508     0A 17 02 FB | 	rdlong	arg03, arg02
1150c     00 17 16 F2 | 	cmp	arg03, #256 wc
11510     14 00 00 FF 
11514     F8 E5 85 F1 | 	sub	objptr, ##10744
11518     18 01 90 3D |  if_ae	jmp	#LR__1370
1151c     78 A6 BF FD | 	call	#_pop
11520     A7 FA 61 FC | 	wrlong	result1, fp
11524     04 4E 05 F1 | 	add	fp, #4
11528     A7 FC 61 FC | 	wrlong	result2, fp
1152c     04 4E 05 F1 | 	add	fp, #4
11530     A7 FE 61 FC | 	wrlong	result3, fp
11534     08 4E 85 F1 | 	sub	fp, #8
11538     A7 16 02 FB | 	rdlong	arg03, fp
1153c     04 4E 05 F1 | 	add	fp, #4
11540     A7 14 02 FB | 	rdlong	arg02, fp
11544     14 4E 05 F1 | 	add	fp, #20
11548     A7 12 02 FB | 	rdlong	arg01, fp
1154c     04 12 66 F0 | 	shl	arg01, #4
11550     14 00 00 FF 
11554     F8 E5 05 F1 | 	add	objptr, ##10744
11558     F2 12 02 F1 | 	add	arg01, objptr
1155c     04 12 06 F1 | 	add	arg01, #4
11560     09 17 62 FC | 	wrlong	arg03, arg01
11564     A7 16 02 FB | 	rdlong	arg03, fp
11568     04 16 66 F0 | 	shl	arg03, #4
1156c     F2 16 02 F1 | 	add	arg03, objptr
11570     08 16 06 F1 | 	add	arg03, #8
11574     0B 15 62 FC | 	wrlong	arg02, arg03
11578     A7 16 02 FB | 	rdlong	arg03, fp
1157c     04 16 66 F0 | 	shl	arg03, #4
11580     F2 16 02 F1 | 	add	arg03, objptr
11584     10 4E 85 F1 | 	sub	fp, #16
11588     A7 14 02 FB | 	rdlong	arg02, fp
1158c     0C 16 06 F1 | 	add	arg03, #12
11590     0B 15 62 FC | 	wrlong	arg02, arg03
11594                 | '   t1=pop() 
11594                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
11594                 | '   if variables(varnum).vartype<>result_string2 then return
11594     10 4E 05 F1 | 	add	fp, #16
11598     A7 16 02 FB | 	rdlong	arg03, fp
1159c     18 4E 85 F1 | 	sub	fp, #24
115a0     04 16 66 F0 | 	shl	arg03, #4
115a4     F2 16 02 F1 | 	add	arg03, objptr
115a8     0C 16 06 F1 | 	add	arg03, #12
115ac     0B 17 02 FB | 	rdlong	arg03, arg03
115b0     2B 16 0E F2 | 	cmp	arg03, #43 wz
115b4     14 00 00 FF 
115b8     F8 E5 85 F1 | 	sub	objptr, ##10744
115bc     E4 04 90 5D |  if_ne	jmp	#LR__1393
115c0     18 4E 05 F1 | 	add	fp, #24
115c4     A7 16 02 FB | 	rdlong	arg03, fp
115c8     0B 1F 02 F6 | 	mov	local01, arg03
115cc     04 1E 66 F0 | 	shl	local01, #4
115d0     14 00 00 FF 
115d4     F8 E5 05 F1 | 	add	objptr, ##10744
115d8     F2 1E 02 F1 | 	add	local01, objptr
115dc     18 4E 85 F1 | 	sub	fp, #24
115e0     04 16 66 F0 | 	shl	arg03, #4
115e4     F2 16 02 F1 | 	add	arg03, objptr
115e8     04 16 06 F1 | 	add	arg03, #4
115ec     0B 13 02 FB | 	rdlong	arg01, arg03
115f0     14 00 00 FF 
115f4     F8 E5 85 F1 | 	sub	objptr, ##10744
115f8     48 FE BF FD | 	call	#_convertstring
115fc     04 1E 06 F1 | 	add	local01, #4
11600     0F FB 61 FC | 	wrlong	result1, local01
11604     18 4E 05 F1 | 	add	fp, #24
11608     A7 1E 02 FB | 	rdlong	local01, fp
1160c     18 4E 85 F1 | 	sub	fp, #24
11610     04 1E 66 F0 | 	shl	local01, #4
11614     14 00 00 FF 
11618     F8 E5 05 F1 | 	add	objptr, ##10744
1161c     F2 1E 02 F1 | 	add	local01, objptr
11620     0C 1E 06 F1 | 	add	local01, #12
11624     0F 3F 68 FC | 	wrlong	#31, local01
11628                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
11628                 | '   variables(varnum).vartype=result_string
11628                 | '   return
11628     14 00 00 FF 
1162c     F8 E5 85 F1 | 	sub	objptr, ##10744
11630     70 04 90 FD | 	jmp	#LR__1393
11634                 | LR__1370
11634                 | ' for i=0 to 2 : arrid(i)=0 : next i
11634     1C 4E 05 F1 | 	add	fp, #28
11638     A7 00 68 FC | 	wrlong	#0, fp
1163c     97 16 48 FB | 	callpa	#(@LR__1372-@LR__1371)>>2,fcache_load_ptr_
11640                 | LR__1371
11640     A7 1E 02 FB | 	rdlong	local01, fp
11644     02 1E 66 F0 | 	shl	local01, #2
11648     18 4E 05 F1 | 	add	fp, #24
1164c     A7 1E 02 F1 | 	add	local01, fp
11650     0F 01 68 FC | 	wrlong	#0, local01
11654     18 4E 85 F1 | 	sub	fp, #24
11658     A7 1E 02 FB | 	rdlong	local01, fp
1165c     01 1E 06 F1 | 	add	local01, #1
11660     A7 1E 62 FC | 	wrlong	local01, fp
11664     03 1E 16 F2 | 	cmp	local01, #3 wc
11668     D4 FF 9F CD |  if_b	jmp	#LR__1371
1166c                 | LR__1372
1166c     4A 00 00 FF 
11670     80 E4 05 F1 | 	add	objptr, ##38016
11674     F2 16 02 FB | 	rdlong	arg03, objptr
11678     0B 1F 02 F6 | 	mov	local01, arg03
1167c     01 1E 66 F0 | 	shl	local01, #1
11680     0B 1F 02 F1 | 	add	local01, arg03
11684     02 1E 66 F0 | 	shl	local01, #2
11688     03 00 00 FF 
1168c     04 E4 85 F1 | 	sub	objptr, ##1540
11690     F2 1E 02 F1 | 	add	local01, objptr
11694     04 1E 06 F1 | 	add	local01, #4
11698     0F 21 02 FB | 	rdlong	local02, local01
1169c     04 4E 05 F1 | 	add	fp, #4
116a0     A7 20 62 FC | 	wrlong	local02, fp
116a4     20 4E 85 F1 | 	sub	fp, #32
116a8     47 00 00 FF 
116ac     7C E4 85 F1 | 	sub	objptr, ##36476
116b0     E4 A4 BF FD | 	call	#_pop
116b4     A7 FA 61 FC | 	wrlong	result1, fp
116b8     04 4E 05 F1 | 	add	fp, #4
116bc     A7 FC 61 FC | 	wrlong	result2, fp
116c0     04 4E 05 F1 | 	add	fp, #4
116c4     A7 FE 61 FC | 	wrlong	result3, fp
116c8                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
116c8                 | ' t1=pop() ' var value
116c8                 | ' if numpar>0 then
116c8     18 4E 05 F1 | 	add	fp, #24
116cc     A7 22 02 FB | 	rdlong	local03, fp
116d0     20 4E 85 F1 | 	sub	fp, #32
116d4     01 22 16 F2 | 	cmp	local03, #1 wc
116d8     78 00 90 CD |  if_b	jmp	#LR__1375
116dc                 | '   for i=numpar to 1 step -1
116dc     20 4E 05 F1 | 	add	fp, #32
116e0     A7 24 0A FB | 	rdlong	local04, fp wz
116e4     04 4E 85 F1 | 	sub	fp, #4
116e8     A7 24 62 FC | 	wrlong	local04, fp
116ec     1C 4E 85 F1 | 	sub	fp, #28
116f0     60 00 90 AD |  if_e	jmp	#LR__1374
116f4                 | LR__1373
116f4     A0 A4 BF FD | 	call	#_pop
116f8     0C 4E 05 F1 | 	add	fp, #12
116fc     A7 FA 61 FC | 	wrlong	result1, fp
11700     04 4E 05 F1 | 	add	fp, #4
11704     A7 FC 61 FC | 	wrlong	result2, fp
11708     04 4E 05 F1 | 	add	fp, #4
1170c     A7 FE 61 FC | 	wrlong	result3, fp
11710     08 4E 05 F1 | 	add	fp, #8
11714     A7 22 02 FB | 	rdlong	local03, fp
11718     01 22 86 F1 | 	sub	local03, #1
1171c     02 22 66 F0 | 	shl	local03, #2
11720     18 4E 05 F1 | 	add	fp, #24
11724     A7 22 02 F1 | 	add	local03, fp
11728     28 4E 85 F1 | 	sub	fp, #40
1172c     A7 12 02 F6 | 	mov	arg01, fp
11730     0C 4E 85 F1 | 	sub	fp, #12
11734     30 45 B0 FD | 	call	#_converttoint
11738     11 FB 61 FC | 	wrlong	result1, local03
1173c     1C 4E 05 F1 | 	add	fp, #28
11740     A7 24 02 FB | 	rdlong	local04, fp
11744     01 24 8E F1 | 	sub	local04, #1 wz
11748     A7 24 62 FC | 	wrlong	local04, fp
1174c     1C 4E 85 F1 | 	sub	fp, #28
11750     A0 FF 9F 5D |  if_ne	jmp	#LR__1373
11754                 | LR__1374
11754                 | LR__1375
11754     18 4E 05 F1 | 	add	fp, #24
11758     A7 1E 02 FB | 	rdlong	local01, fp
1175c     04 1E 66 F0 | 	shl	local01, #4
11760     14 00 00 FF 
11764     F8 E5 05 F1 | 	add	objptr, ##10744
11768     F2 1E 02 F1 | 	add	local01, objptr
1176c     04 1E 06 F1 | 	add	local01, #4
11770     0F 13 02 FB | 	rdlong	arg01, local01
11774     0C 4E 05 F1 | 	add	fp, #12
11778     A7 12 62 FC | 	wrlong	arg01, fp
1177c     24 4E 85 F1 | 	sub	fp, #36
11780     14 00 00 FF 
11784     F8 E5 85 F1 | 	sub	objptr, ##10744
11788     CC C0 B0 FD | 	call	#_pslpeek
1178c     FD 24 32 F9 | 	getword	local04, result1, #0
11790     28 4E 05 F1 | 	add	fp, #40
11794     A7 24 62 FC | 	wrlong	local04, fp
11798     04 4E 85 F1 | 	sub	fp, #4
1179c     A7 12 02 FB | 	rdlong	arg01, fp
117a0     24 4E 85 F1 | 	sub	fp, #36
117a4     02 12 06 F1 | 	add	arg01, #2
117a8     54 C0 B0 FD | 	call	#_pspeek
117ac     FD FA E1 F8 | 	getbyte	result1, result1, #0
117b0     2C 4E 05 F1 | 	add	fp, #44
117b4     A7 FA 61 FC | 	wrlong	result1, fp
117b8                 | ' esize=pspeek(arrptr+2)
117b8                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
117b8     08 4E 85 F1 | 	sub	fp, #8
117bc     A7 12 02 FB | 	rdlong	arg01, fp
117c0     24 4E 85 F1 | 	sub	fp, #36
117c4     04 12 06 F1 | 	add	arg01, #4
117c8     8C C0 B0 FD | 	call	#_pslpeek
117cc     FD 24 02 F6 | 	mov	local04, result1
117d0     34 4E 05 F1 | 	add	fp, #52
117d4     A7 1E 02 FB | 	rdlong	local01, fp
117d8     34 4E 85 F1 | 	sub	fp, #52
117dc     12 1F 12 F2 | 	cmp	local01, local04 wc
117e0     54 00 90 3D |  if_ae	jmp	#LR__1376
117e4     24 4E 05 F1 | 	add	fp, #36
117e8     A7 12 02 FB | 	rdlong	arg01, fp
117ec     24 4E 85 F1 | 	sub	fp, #36
117f0     08 12 06 F1 | 	add	arg01, #8
117f4     60 C0 B0 FD | 	call	#_pslpeek
117f8     FD 1E 02 F6 | 	mov	local01, result1
117fc     38 4E 05 F1 | 	add	fp, #56
11800     A7 24 02 FB | 	rdlong	local04, fp
11804     38 4E 85 F1 | 	sub	fp, #56
11808     0F 25 12 F2 | 	cmp	local04, local01 wc
1180c     28 00 90 3D |  if_ae	jmp	#LR__1376
11810     24 4E 05 F1 | 	add	fp, #36
11814     A7 12 02 FB | 	rdlong	arg01, fp
11818     24 4E 85 F1 | 	sub	fp, #36
1181c     0C 12 06 F1 | 	add	arg01, #12
11820     34 C0 B0 FD | 	call	#_pslpeek
11824     3C 4E 05 F1 | 	add	fp, #60
11828     A7 24 02 FB | 	rdlong	local04, fp
1182c     3C 4E 85 F1 | 	sub	fp, #60
11830     FD 24 12 F2 | 	cmp	local04, result1 wc
11834     0C 00 90 CD |  if_b	jmp	#LR__1377
11838                 | LR__1376
11838     31 12 06 F6 | 	mov	arg01, #49
1183c     84 BD B0 FD | 	call	#_printerror
11840     60 02 90 FD | 	jmp	#LR__1393
11844                 | LR__1377
11844     24 4E 05 F1 | 	add	fp, #36
11848     A7 12 02 FB | 	rdlong	arg01, fp
1184c     09 25 02 F6 | 	mov	local04, arg01
11850     10 24 06 F1 | 	add	local04, #16
11854     24 4E 85 F1 | 	sub	fp, #36
11858     04 12 06 F1 | 	add	arg01, #4
1185c     F8 BF B0 FD | 	call	#_pslpeek
11860     FD 1E 02 F6 | 	mov	local01, result1
11864     38 4E 05 F1 | 	add	fp, #56
11868     A7 20 02 FB | 	rdlong	local02, fp
1186c     10 1F 02 FD | 	qmul	local01, local02
11870     04 4E 85 F1 | 	sub	fp, #4
11874     A7 22 02 FB | 	rdlong	local03, fp
11878     10 4E 85 F1 | 	sub	fp, #16
1187c     A7 12 02 FB | 	rdlong	arg01, fp
11880     24 4E 85 F1 | 	sub	fp, #36
11884     08 12 06 F1 | 	add	arg01, #8
11888     18 20 62 FD | 	getqx	local02
1188c     10 23 02 F1 | 	add	local03, local02
11890     C4 BF B0 FD | 	call	#_pslpeek
11894     FD 20 02 F6 | 	mov	local02, result1
11898     24 4E 05 F1 | 	add	fp, #36
1189c     A7 12 02 FB | 	rdlong	arg01, fp
118a0     24 4E 85 F1 | 	sub	fp, #36
118a4     04 12 06 F1 | 	add	arg01, #4
118a8     AC BF B0 FD | 	call	#_pslpeek
118ac     FD 20 02 FD | 	qmul	local02, result1
118b0     3C 4E 05 F1 | 	add	fp, #60
118b4     A7 20 02 FB | 	rdlong	local02, fp
118b8     18 1E 62 FD | 	getqx	local01
118bc     10 1F 02 FD | 	qmul	local01, local02
118c0     10 4E 85 F1 | 	sub	fp, #16
118c4     A7 20 02 FB | 	rdlong	local02, fp
118c8     18 1E 62 FD | 	getqx	local01
118cc     0F 23 02 F1 | 	add	local03, local01
118d0     11 21 02 FD | 	qmul	local02, local03
118d4     04 4E 05 F1 | 	add	fp, #4
118d8                 | ' 
118d8                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
118d8                 | ' select case arrtype
118d8     18 22 62 FD | 	getqx	local03
118dc     11 25 02 F1 | 	add	local04, local03
118e0     A7 24 62 FC | 	wrlong	local04, fp
118e4     08 4E 85 F1 | 	sub	fp, #8
118e8     A7 26 02 FB | 	rdlong	local05, fp
118ec     28 4E 85 F1 | 	sub	fp, #40
118f0     00 27 86 F1 | 	sub	local05, #256
118f4     0C 26 26 F3 | 	fle	local05, #12
118f8     30 26 62 FD | 	jmprel	local05
118fc                 | LR__1378
118fc     30 00 90 FD | 	jmp	#LR__1379
11900     58 00 90 FD | 	jmp	#LR__1380
11904     6C 00 90 FD | 	jmp	#LR__1381
11908     80 00 90 FD | 	jmp	#LR__1382
1190c     B0 00 90 FD | 	jmp	#LR__1383
11910     E0 00 90 FD | 	jmp	#LR__1384
11914     F4 00 90 FD | 	jmp	#LR__1385
11918     08 01 90 FD | 	jmp	#LR__1386
1191c     1C 01 90 FD | 	jmp	#LR__1387
11920     30 01 90 FD | 	jmp	#LR__1388
11924     44 01 90 FD | 	jmp	#LR__1389
11928     58 01 90 FD | 	jmp	#LR__1390
1192c     6C 01 90 FD | 	jmp	#LR__1391
11930                 | LR__1379
11930     A7 12 02 F6 | 	mov	arg01, fp
11934     30 4E 05 F1 | 	add	fp, #48
11938     A7 14 02 FB | 	rdlong	arg02, fp
1193c     30 4E 85 F1 | 	sub	fp, #48
11940     0C 16 06 F6 | 	mov	arg03, #12
11944     0B 00 00 FF 
11948     CC E4 05 F1 | 	add	objptr, ##5836
1194c     34 E4 B0 FD | 	call	#_psram_spin2_write
11950     0B 00 00 FF 
11954     CC E4 85 F1 | 	sub	objptr, ##5836
11958     48 01 90 FD | 	jmp	#LR__1392
1195c                 | LR__1380
1195c     30 4E 05 F1 | 	add	fp, #48
11960     A7 12 02 FB | 	rdlong	arg01, fp
11964     30 4E 85 F1 | 	sub	fp, #48
11968     A7 14 02 FB | 	rdlong	arg02, fp
1196c     48 BE B0 FD | 	call	#_pspoke
11970     30 01 90 FD | 	jmp	#LR__1392
11974                 | LR__1381
11974     30 4E 05 F1 | 	add	fp, #48
11978     A7 12 02 FB | 	rdlong	arg01, fp
1197c     30 4E 85 F1 | 	sub	fp, #48
11980     A7 14 02 FB | 	rdlong	arg02, fp
11984     30 BE B0 FD | 	call	#_pspoke
11988     18 01 90 FD | 	jmp	#LR__1392
1198c                 | LR__1382
1198c     30 4E 05 F1 | 	add	fp, #48
11990     A7 12 02 FB | 	rdlong	arg01, fp
11994     30 4E 85 F1 | 	sub	fp, #48
11998     A7 14 02 FB | 	rdlong	arg02, fp
1199c     18 BE B0 FD | 	call	#_pspoke
119a0     30 4E 05 F1 | 	add	fp, #48
119a4     A7 12 02 FB | 	rdlong	arg01, fp
119a8     30 4E 85 F1 | 	sub	fp, #48
119ac     01 12 06 F1 | 	add	arg01, #1
119b0     A7 14 02 FB | 	rdlong	arg02, fp
119b4     08 14 46 F0 | 	shr	arg02, #8
119b8     FC BD B0 FD | 	call	#_pspoke
119bc     E4 00 90 FD | 	jmp	#LR__1392
119c0                 | LR__1383
119c0     30 4E 05 F1 | 	add	fp, #48
119c4     A7 12 02 FB | 	rdlong	arg01, fp
119c8     30 4E 85 F1 | 	sub	fp, #48
119cc     A7 14 02 FB | 	rdlong	arg02, fp
119d0     E4 BD B0 FD | 	call	#_pspoke
119d4     30 4E 05 F1 | 	add	fp, #48
119d8     A7 12 02 FB | 	rdlong	arg01, fp
119dc     30 4E 85 F1 | 	sub	fp, #48
119e0     01 12 06 F1 | 	add	arg01, #1
119e4     A7 14 02 FB | 	rdlong	arg02, fp
119e8     08 14 46 F0 | 	shr	arg02, #8
119ec     C8 BD B0 FD | 	call	#_pspoke
119f0     B0 00 90 FD | 	jmp	#LR__1392
119f4                 | LR__1384
119f4     30 4E 05 F1 | 	add	fp, #48
119f8     A7 12 02 FB | 	rdlong	arg01, fp
119fc     30 4E 85 F1 | 	sub	fp, #48
11a00     A7 14 02 FB | 	rdlong	arg02, fp
11a04     20 BD B0 FD | 	call	#_pslpoke
11a08     98 00 90 FD | 	jmp	#LR__1392
11a0c                 | LR__1385
11a0c     30 4E 05 F1 | 	add	fp, #48
11a10     A7 12 02 FB | 	rdlong	arg01, fp
11a14     30 4E 85 F1 | 	sub	fp, #48
11a18     A7 14 02 FB | 	rdlong	arg02, fp
11a1c     08 BD B0 FD | 	call	#_pslpoke
11a20     80 00 90 FD | 	jmp	#LR__1392
11a24                 | LR__1386
11a24     30 4E 05 F1 | 	add	fp, #48
11a28     A7 12 02 FB | 	rdlong	arg01, fp
11a2c     30 4E 85 F1 | 	sub	fp, #48
11a30     A7 14 02 FB | 	rdlong	arg02, fp
11a34     F0 BC B0 FD | 	call	#_pslpoke
11a38     68 00 90 FD | 	jmp	#LR__1392
11a3c                 | LR__1387
11a3c     30 4E 05 F1 | 	add	fp, #48
11a40     A7 12 02 FB | 	rdlong	arg01, fp
11a44     30 4E 85 F1 | 	sub	fp, #48
11a48     A7 14 02 FB | 	rdlong	arg02, fp
11a4c     D8 BC B0 FD | 	call	#_pslpoke
11a50     50 00 90 FD | 	jmp	#LR__1392
11a54                 | LR__1388
11a54     30 4E 05 F1 | 	add	fp, #48
11a58     A7 12 02 FB | 	rdlong	arg01, fp
11a5c     30 4E 85 F1 | 	sub	fp, #48
11a60     A7 14 02 FB | 	rdlong	arg02, fp
11a64     C0 BC B0 FD | 	call	#_pslpoke
11a68     38 00 90 FD | 	jmp	#LR__1392
11a6c                 | LR__1389
11a6c     30 4E 05 F1 | 	add	fp, #48
11a70     A7 12 02 FB | 	rdlong	arg01, fp
11a74     30 4E 85 F1 | 	sub	fp, #48
11a78     A7 14 02 FB | 	rdlong	arg02, fp
11a7c     A8 BC B0 FD | 	call	#_pslpoke
11a80     20 00 90 FD | 	jmp	#LR__1392
11a84                 | LR__1390
11a84     30 4E 05 F1 | 	add	fp, #48
11a88     A7 12 02 FB | 	rdlong	arg01, fp
11a8c     30 4E 85 F1 | 	sub	fp, #48
11a90     A7 14 02 FB | 	rdlong	arg02, fp
11a94     90 BC B0 FD | 	call	#_pslpoke
11a98     08 00 90 FD | 	jmp	#LR__1392
11a9c                 | LR__1391
11a9c     32 12 06 F6 | 	mov	arg01, #50
11aa0     20 BB B0 FD | 	call	#_printerror
11aa4                 | LR__1392
11aa4                 | LR__1393
11aa4     A7 F0 03 F6 | 	mov	ptra, fp
11aa8     B2 00 A0 FD | 	call	#popregs_
11aac                 | _do_assign_ret
11aac     2D 00 64 FD | 	ret
11ab0                 | 
11ab0                 | ' 
11ab0                 | ' 
11ab0                 | ' ' --------------------- Read a variable and push to the stack
11ab0                 | ' 
11ab0                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
11ab0                 | ' 
11ab0                 | ' sub do_getvar
11ab0                 | _do_getvar
11ab0     04 4A 05 F6 | 	mov	COUNT_, #4
11ab4     A8 00 A0 FD | 	call	#pushregs_
11ab8     3C F0 07 F1 | 	add	ptra, #60
11abc                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
11abc                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
11abc     4A 00 00 FF 
11ac0     80 E4 05 F1 | 	add	objptr, ##38016
11ac4     F2 1E 02 FB | 	rdlong	local01, objptr
11ac8     0F 17 02 F6 | 	mov	arg03, local01
11acc     01 16 66 F0 | 	shl	arg03, #1
11ad0     0F 17 02 F1 | 	add	arg03, local01
11ad4     02 16 66 F0 | 	shl	arg03, #2
11ad8     03 00 00 FF 
11adc     04 E4 85 F1 | 	sub	objptr, ##1540
11ae0     F2 16 02 F1 | 	add	arg03, objptr
11ae4     04 16 06 F1 | 	add	arg03, #4
11ae8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
11aec     47 00 00 FF 
11af0     7C E4 85 F1 | 	sub	objptr, ##36476
11af4     C4 00 90 5D |  if_ne	jmp	#LR__1401
11af8     4A 00 00 FF 
11afc     80 E4 05 F1 | 	add	objptr, ##38016
11b00     F2 1E 02 FB | 	rdlong	local01, objptr
11b04     0F 13 02 F6 | 	mov	arg01, local01
11b08     01 12 66 F0 | 	shl	arg01, #1
11b0c     0F 13 02 F1 | 	add	arg01, local01
11b10     02 12 66 F0 | 	shl	arg01, #2
11b14     03 00 00 FF 
11b18     04 E4 85 F1 | 	sub	objptr, ##1540
11b1c     F2 12 02 F1 | 	add	arg01, objptr
11b20     09 1F 02 FB | 	rdlong	local01, arg01
11b24     04 1E 66 F0 | 	shl	local01, #4
11b28     32 00 00 FF 
11b2c     84 E4 85 F1 | 	sub	objptr, ##25732
11b30     F2 1E 02 F1 | 	add	local01, objptr
11b34     04 1E 06 F1 | 	add	local01, #4
11b38     0F 13 02 FB | 	rdlong	arg01, local01
11b3c     04 1E 06 F1 | 	add	local01, #4
11b40     0F 1F 02 FB | 	rdlong	local01, local01
11b44     A7 12 62 FC | 	wrlong	arg01, fp
11b48     04 4E 05 F1 | 	add	fp, #4
11b4c     A7 1E 62 FC | 	wrlong	local01, fp
11b50     35 00 00 FF 
11b54     88 E4 05 F1 | 	add	objptr, ##27272
11b58     F2 1E 02 FB | 	rdlong	local01, objptr
11b5c     0F 13 02 F6 | 	mov	arg01, local01
11b60     01 12 66 F0 | 	shl	arg01, #1
11b64     0F 13 02 F1 | 	add	arg01, local01
11b68     02 12 66 F0 | 	shl	arg01, #2
11b6c     03 00 00 FF 
11b70     04 E4 85 F1 | 	sub	objptr, ##1540
11b74     F2 12 02 F1 | 	add	arg01, objptr
11b78     09 1F 02 FB | 	rdlong	local01, arg01
11b7c     04 1E 66 F0 | 	shl	local01, #4
11b80     32 00 00 FF 
11b84     84 E4 85 F1 | 	sub	objptr, ##25732
11b88     F2 1E 02 F1 | 	add	local01, objptr
11b8c     0C 1E 06 F1 | 	add	local01, #12
11b90     0F 1F 02 FB | 	rdlong	local01, local01
11b94     04 4E 05 F1 | 	add	fp, #4
11b98     A7 1E 62 FC | 	wrlong	local01, fp
11b9c                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
11b9c                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
11b9c                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
11b9c     08 4E 85 F1 | 	sub	fp, #8
11ba0     00 1F 16 F2 | 	cmp	local01, #256 wc
11ba4     14 00 00 FF 
11ba8     F8 E5 85 F1 | 	sub	objptr, ##10744
11bac     0C 00 90 3D |  if_ae	jmp	#LR__1400
11bb0     A7 12 02 F6 | 	mov	arg01, fp
11bb4     78 A0 BF FD | 	call	#_push
11bb8     A0 04 90 FD | 	jmp	#LR__1422
11bbc                 | LR__1400
11bbc                 | LR__1401
11bbc     4A 00 00 FF 
11bc0     80 E4 05 F1 | 	add	objptr, ##38016
11bc4     F2 16 02 FB | 	rdlong	arg03, objptr
11bc8     0B 15 02 F6 | 	mov	arg02, arg03
11bcc     01 14 66 F0 | 	shl	arg02, #1
11bd0     0B 15 02 F1 | 	add	arg02, arg03
11bd4     02 14 66 F0 | 	shl	arg02, #2
11bd8     03 00 00 FF 
11bdc     04 E4 85 F1 | 	sub	objptr, ##1540
11be0     F2 14 02 F1 | 	add	arg02, objptr
11be4     0A 17 02 FB | 	rdlong	arg03, arg02
11be8     04 16 66 F0 | 	shl	arg03, #4
11bec     32 00 00 FF 
11bf0     84 E4 85 F1 | 	sub	objptr, ##25732
11bf4     F2 16 02 F1 | 	add	arg03, objptr
11bf8     04 16 06 F1 | 	add	arg03, #4
11bfc     0B 13 02 FB | 	rdlong	arg01, arg03
11c00     0C 4E 05 F1 | 	add	fp, #12
11c04     A7 12 62 FC | 	wrlong	arg01, fp
11c08     0C 4E 85 F1 | 	sub	fp, #12
11c0c     14 00 00 FF 
11c10     F8 E5 85 F1 | 	sub	objptr, ##10744
11c14     40 BC B0 FD | 	call	#_pslpeek
11c18     FD FA 31 F9 | 	getword	result1, result1, #0
11c1c     10 4E 05 F1 | 	add	fp, #16
11c20     A7 FA 61 FC | 	wrlong	result1, fp
11c24     4A 00 00 FF 
11c28     80 E4 05 F1 | 	add	objptr, ##38016
11c2c     F2 16 02 FB | 	rdlong	arg03, objptr
11c30     0B 15 02 F6 | 	mov	arg02, arg03
11c34     01 14 66 F0 | 	shl	arg02, #1
11c38     0B 15 02 F1 | 	add	arg02, arg03
11c3c     02 14 66 F0 | 	shl	arg02, #2
11c40     03 00 00 FF 
11c44     04 E4 85 F1 | 	sub	objptr, ##1540
11c48     F2 14 02 F1 | 	add	arg02, objptr
11c4c     04 14 06 F1 | 	add	arg02, #4
11c50     0A 17 02 FB | 	rdlong	arg03, arg02
11c54     04 4E 05 F1 | 	add	fp, #4
11c58     A7 16 62 FC | 	wrlong	arg03, fp
11c5c     08 4E 85 F1 | 	sub	fp, #8
11c60     A7 12 02 FB | 	rdlong	arg01, fp
11c64     0C 4E 85 F1 | 	sub	fp, #12
11c68     02 12 06 F1 | 	add	arg01, #2
11c6c     47 00 00 FF 
11c70     7C E4 85 F1 | 	sub	objptr, ##36476
11c74     88 BB B0 FD | 	call	#_pspeek
11c78     FD FA E1 F8 | 	getbyte	result1, result1, #0
11c7c     18 4E 05 F1 | 	add	fp, #24
11c80     A7 FA 61 FC | 	wrlong	result1, fp
11c84     0C 4E 85 F1 | 	sub	fp, #12
11c88     A7 12 02 FB | 	rdlong	arg01, fp
11c8c     0C 4E 85 F1 | 	sub	fp, #12
11c90     04 12 06 F1 | 	add	arg01, #4
11c94     C0 BB B0 FD | 	call	#_pslpeek
11c98     1C 4E 05 F1 | 	add	fp, #28
11c9c     A7 FA 61 FC | 	wrlong	result1, fp
11ca0     10 4E 85 F1 | 	sub	fp, #16
11ca4     A7 12 02 FB | 	rdlong	arg01, fp
11ca8     0C 4E 85 F1 | 	sub	fp, #12
11cac     08 12 06 F1 | 	add	arg01, #8
11cb0     A4 BB B0 FD | 	call	#_pslpeek
11cb4     20 4E 05 F1 | 	add	fp, #32
11cb8     A7 FA 61 FC | 	wrlong	result1, fp
11cbc     14 4E 85 F1 | 	sub	fp, #20
11cc0     A7 12 02 FB | 	rdlong	arg01, fp
11cc4     0C 4E 85 F1 | 	sub	fp, #12
11cc8     0C 12 06 F1 | 	add	arg01, #12
11ccc     88 BB B0 FD | 	call	#_pslpeek
11cd0     24 4E 05 F1 | 	add	fp, #36
11cd4     A7 FA 61 FC | 	wrlong	result1, fp
11cd8                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
11cd8                 | ' esize=pspeek(arrptr+2)
11cd8                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
11cd8                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
11cd8                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
11cd8                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
11cd8     10 4E 85 F1 | 	sub	fp, #16
11cdc     A7 16 02 FB | 	rdlong	arg03, fp
11ce0     14 4E 85 F1 | 	sub	fp, #20
11ce4     03 16 16 F2 | 	cmp	arg03, #3 wc
11ce8     38 00 90 CD |  if_b	jmp	#LR__1402
11cec     A8 9E BF FD | 	call	#_pop
11cf0     FF 16 02 F6 | 	mov	arg03, result3
11cf4     A7 FA 61 FC | 	wrlong	result1, fp
11cf8     04 4E 05 F1 | 	add	fp, #4
11cfc     A7 FC 61 FC | 	wrlong	result2, fp
11d00     04 4E 05 F1 | 	add	fp, #4
11d04     A7 16 62 FC | 	wrlong	arg03, fp
11d08     08 4E 85 F1 | 	sub	fp, #8
11d0c     A7 12 02 F6 | 	mov	arg01, fp
11d10     54 3F B0 FD | 	call	#_converttoint
11d14     30 4E 05 F1 | 	add	fp, #48
11d18     A7 FA 61 FC | 	wrlong	result1, fp
11d1c     30 4E 85 F1 | 	sub	fp, #48
11d20     0C 00 90 FD | 	jmp	#LR__1403
11d24                 | LR__1402
11d24     30 4E 05 F1 | 	add	fp, #48
11d28     A7 00 68 FC | 	wrlong	#0, fp
11d2c     30 4E 85 F1 | 	sub	fp, #48
11d30                 | LR__1403
11d30                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
11d30     14 4E 05 F1 | 	add	fp, #20
11d34     A7 16 02 FB | 	rdlong	arg03, fp
11d38     14 4E 85 F1 | 	sub	fp, #20
11d3c     02 16 16 F2 | 	cmp	arg03, #2 wc
11d40     38 00 90 CD |  if_b	jmp	#LR__1404
11d44     50 9E BF FD | 	call	#_pop
11d48     FF 16 02 F6 | 	mov	arg03, result3
11d4c     A7 FA 61 FC | 	wrlong	result1, fp
11d50     04 4E 05 F1 | 	add	fp, #4
11d54     A7 FC 61 FC | 	wrlong	result2, fp
11d58     04 4E 05 F1 | 	add	fp, #4
11d5c     A7 16 62 FC | 	wrlong	arg03, fp
11d60     08 4E 85 F1 | 	sub	fp, #8
11d64     A7 12 02 F6 | 	mov	arg01, fp
11d68     FC 3E B0 FD | 	call	#_converttoint
11d6c     2C 4E 05 F1 | 	add	fp, #44
11d70     A7 FA 61 FC | 	wrlong	result1, fp
11d74     2C 4E 85 F1 | 	sub	fp, #44
11d78     0C 00 90 FD | 	jmp	#LR__1405
11d7c                 | LR__1404
11d7c     2C 4E 05 F1 | 	add	fp, #44
11d80     A7 00 68 FC | 	wrlong	#0, fp
11d84     2C 4E 85 F1 | 	sub	fp, #44
11d88                 | LR__1405
11d88                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
11d88     14 4E 05 F1 | 	add	fp, #20
11d8c     A7 16 02 FB | 	rdlong	arg03, fp
11d90     14 4E 85 F1 | 	sub	fp, #20
11d94     01 16 16 F2 | 	cmp	arg03, #1 wc
11d98     38 00 90 CD |  if_b	jmp	#LR__1406
11d9c     F8 9D BF FD | 	call	#_pop
11da0     FF 16 02 F6 | 	mov	arg03, result3
11da4     A7 FA 61 FC | 	wrlong	result1, fp
11da8     04 4E 05 F1 | 	add	fp, #4
11dac     A7 FC 61 FC | 	wrlong	result2, fp
11db0     04 4E 05 F1 | 	add	fp, #4
11db4     A7 16 62 FC | 	wrlong	arg03, fp
11db8     08 4E 85 F1 | 	sub	fp, #8
11dbc     A7 12 02 F6 | 	mov	arg01, fp
11dc0     A4 3E B0 FD | 	call	#_converttoint
11dc4     28 4E 05 F1 | 	add	fp, #40
11dc8     A7 FA 61 FC | 	wrlong	result1, fp
11dcc     28 4E 85 F1 | 	sub	fp, #40
11dd0     0C 00 90 FD | 	jmp	#LR__1407
11dd4                 | LR__1406
11dd4     28 4E 05 F1 | 	add	fp, #40
11dd8     A7 00 68 FC | 	wrlong	#0, fp
11ddc     28 4E 85 F1 | 	sub	fp, #40
11de0                 | LR__1407
11de0     0C 4E 05 F1 | 	add	fp, #12
11de4     A7 20 02 FB | 	rdlong	local02, fp
11de8     1C 4E 05 F1 | 	add	fp, #28
11dec     A7 22 02 FB | 	rdlong	local03, fp
11df0     04 4E 05 F1 | 	add	fp, #4
11df4     A7 FC 01 FB | 	rdlong	result2, fp
11df8     10 4E 85 F1 | 	sub	fp, #16
11dfc     A7 FE 01 FB | 	rdlong	result3, fp
11e00     FF FC 01 FD | 	qmul	result2, result3
11e04     10 20 06 F1 | 	add	local02, #16
11e08     14 4E 05 F1 | 	add	fp, #20
11e0c     A7 FC 01 FB | 	rdlong	result2, fp
11e10     18 FA 61 FD | 	getqx	result1
11e14     FF FC 01 FD | 	qmul	result2, result3
11e18     FD 22 02 F1 | 	add	local03, result1
11e1c     10 4E 85 F1 | 	sub	fp, #16
11e20     A7 FE 01 FB | 	rdlong	result3, fp
11e24     18 FC 61 FD | 	getqx	result2
11e28     FF FC 01 FD | 	qmul	result2, result3
11e2c     08 4E 85 F1 | 	sub	fp, #8
11e30     A7 FE 01 FB | 	rdlong	result3, fp
11e34     18 FC 61 FD | 	getqx	result2
11e38     FE 22 02 F1 | 	add	local03, result2
11e3c     FF 22 02 FD | 	qmul	local03, result3
11e40     1C 4E 05 F1 | 	add	fp, #28
11e44                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
11e44                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
11e44                 | ' 
11e44                 | ' select case vartype
11e44     18 FC 61 FD | 	getqx	result2
11e48     FE 20 02 F1 | 	add	local02, result2
11e4c     A7 20 62 FC | 	wrlong	local02, fp
11e50     24 4E 85 F1 | 	sub	fp, #36
11e54     A7 24 02 FB | 	rdlong	local04, fp
11e58     10 4E 85 F1 | 	sub	fp, #16
11e5c     00 25 86 F1 | 	sub	local04, #256
11e60     0C 24 26 F3 | 	fle	local04, #12
11e64     30 24 62 FD | 	jmprel	local04
11e68                 | LR__1408
11e68     30 00 90 FD | 	jmp	#LR__1409
11e6c     58 00 90 FD | 	jmp	#LR__1410
11e70     8C 00 90 FD | 	jmp	#LR__1411
11e74     AC 00 90 FD | 	jmp	#LR__1412
11e78     E8 00 90 FD | 	jmp	#LR__1413
11e7c     08 01 90 FD | 	jmp	#LR__1414
11e80     24 01 90 FD | 	jmp	#LR__1415
11e84     40 01 90 FD | 	jmp	#LR__1416
11e88     50 01 90 FD | 	jmp	#LR__1417
11e8c     60 01 90 FD | 	jmp	#LR__1418
11e90     7C 01 90 FD | 	jmp	#LR__1419
11e94     8C 01 90 FD | 	jmp	#LR__1420
11e98     B8 01 90 FD | 	jmp	#LR__1421
11e9c                 | LR__1409
11e9c     A7 12 02 F6 | 	mov	arg01, fp
11ea0     34 4E 05 F1 | 	add	fp, #52
11ea4     A7 14 02 FB | 	rdlong	arg02, fp
11ea8     34 4E 85 F1 | 	sub	fp, #52
11eac     0C 16 06 F6 | 	mov	arg03, #12
11eb0     0B 00 00 FF 
11eb4     CC E4 05 F1 | 	add	objptr, ##5836
11eb8     2C DE B0 FD | 	call	#_psram_spin2_read1
11ebc     0B 00 00 FF 
11ec0     CC E4 85 F1 | 	sub	objptr, ##5836
11ec4     8C 01 90 FD | 	jmp	#LR__1421
11ec8                 | LR__1410
11ec8     08 4E 05 F1 | 	add	fp, #8
11ecc     A7 38 68 FC | 	wrlong	#28, fp
11ed0     2C 4E 05 F1 | 	add	fp, #44
11ed4     A7 12 02 FB | 	rdlong	arg01, fp
11ed8     34 4E 85 F1 | 	sub	fp, #52
11edc     20 B9 B0 FD | 	call	#_pspeek
11ee0     FD FA E1 F8 | 	getbyte	result1, result1, #0
11ee4     A7 FA 61 FC | 	wrlong	result1, fp
11ee8     80 FA 15 F2 | 	cmp	result1, #128 wc
11eec     00 1F 66 36 |  if_ae	neg	local01, #256
11ef0     A7 22 02 3B |  if_ae	rdlong	local03, fp
11ef4     11 1F 42 35 |  if_ae	or	local01, local03
11ef8     A7 1E 62 3C |  if_ae	wrlong	local01, fp
11efc     54 01 90 FD | 	jmp	#LR__1421
11f00                 | LR__1411
11f00     08 4E 05 F1 | 	add	fp, #8
11f04     A7 3A 68 FC | 	wrlong	#29, fp
11f08     2C 4E 05 F1 | 	add	fp, #44
11f0c     A7 12 02 FB | 	rdlong	arg01, fp
11f10     34 4E 85 F1 | 	sub	fp, #52
11f14     E8 B8 B0 FD | 	call	#_pspeek
11f18     FD FA E1 F8 | 	getbyte	result1, result1, #0
11f1c     A7 FA 61 FC | 	wrlong	result1, fp
11f20     30 01 90 FD | 	jmp	#LR__1421
11f24                 | LR__1412
11f24     08 4E 05 F1 | 	add	fp, #8
11f28     A7 38 68 FC | 	wrlong	#28, fp
11f2c     2C 4E 05 F1 | 	add	fp, #44
11f30     A7 12 02 FB | 	rdlong	arg01, fp
11f34     34 4E 85 F1 | 	sub	fp, #52
11f38     1C B9 B0 FD | 	call	#_pslpeek
11f3c     FD FA 31 F9 | 	getword	result1, result1, #0
11f40     A7 FA 61 FC | 	wrlong	result1, fp
11f44     40 00 00 FF 
11f48     00 FA 15 F2 | 	cmp	result1, ##32768 wc
11f4c     FF 7F 00 3F 
11f50     00 1F 06 36 |  if_ae	mov	local01, ##16776960
11f54     A7 22 02 3B |  if_ae	rdlong	local03, fp
11f58     11 1F 42 35 |  if_ae	or	local01, local03
11f5c     A7 1E 62 3C |  if_ae	wrlong	local01, fp
11f60     F0 00 90 FD | 	jmp	#LR__1421
11f64                 | LR__1413
11f64     08 4E 05 F1 | 	add	fp, #8
11f68     A7 3A 68 FC | 	wrlong	#29, fp
11f6c     2C 4E 05 F1 | 	add	fp, #44
11f70     A7 12 02 FB | 	rdlong	arg01, fp
11f74     34 4E 85 F1 | 	sub	fp, #52
11f78     DC B8 B0 FD | 	call	#_pslpeek
11f7c     FD FA 31 F9 | 	getword	result1, result1, #0
11f80     A7 FA 61 FC | 	wrlong	result1, fp
11f84     CC 00 90 FD | 	jmp	#LR__1421
11f88                 | LR__1414
11f88     08 4E 05 F1 | 	add	fp, #8
11f8c     A7 38 68 FC | 	wrlong	#28, fp
11f90     2C 4E 05 F1 | 	add	fp, #44
11f94     A7 12 02 FB | 	rdlong	arg01, fp
11f98     34 4E 85 F1 | 	sub	fp, #52
11f9c     B8 B8 B0 FD | 	call	#_pslpeek
11fa0     A7 FA 61 FC | 	wrlong	result1, fp
11fa4     AC 00 90 FD | 	jmp	#LR__1421
11fa8                 | LR__1415
11fa8     08 4E 05 F1 | 	add	fp, #8
11fac     A7 3A 68 FC | 	wrlong	#29, fp
11fb0     2C 4E 05 F1 | 	add	fp, #44
11fb4     A7 12 02 FB | 	rdlong	arg01, fp
11fb8     34 4E 85 F1 | 	sub	fp, #52
11fbc     98 B8 B0 FD | 	call	#_pslpeek
11fc0     A7 FA 61 FC | 	wrlong	result1, fp
11fc4     8C 00 90 FD | 	jmp	#LR__1421
11fc8                 | LR__1416
11fc8     08 4E 05 F1 | 	add	fp, #8
11fcc     A7 FE 69 FC | 	wrlong	#255, fp
11fd0     08 4E 85 F1 | 	sub	fp, #8
11fd4     A7 60 68 FC | 	wrlong	#48, fp
11fd8     78 00 90 FD | 	jmp	#LR__1421
11fdc                 | LR__1417
11fdc     08 4E 05 F1 | 	add	fp, #8
11fe0     A7 FE 69 FC | 	wrlong	#255, fp
11fe4     08 4E 85 F1 | 	sub	fp, #8
11fe8     A7 60 68 FC | 	wrlong	#48, fp
11fec     64 00 90 FD | 	jmp	#LR__1421
11ff0                 | LR__1418
11ff0     08 4E 05 F1 | 	add	fp, #8
11ff4     A7 3C 68 FC | 	wrlong	#30, fp
11ff8     2C 4E 05 F1 | 	add	fp, #44
11ffc     A7 12 02 FB | 	rdlong	arg01, fp
12000     34 4E 85 F1 | 	sub	fp, #52
12004     50 B8 B0 FD | 	call	#_pslpeek
12008     A7 FA 61 FC | 	wrlong	result1, fp
1200c     44 00 90 FD | 	jmp	#LR__1421
12010                 | LR__1419
12010     08 4E 05 F1 | 	add	fp, #8
12014     A7 FE 69 FC | 	wrlong	#255, fp
12018     08 4E 85 F1 | 	sub	fp, #8
1201c     A7 60 68 FC | 	wrlong	#48, fp
12020     30 00 90 FD | 	jmp	#LR__1421
12024                 | LR__1420
12024     08 4E 05 F1 | 	add	fp, #8
12028     A7 3E 68 FC | 	wrlong	#31, fp
1202c     2C 4E 05 F1 | 	add	fp, #44
12030     A7 12 02 FB | 	rdlong	arg01, fp
12034     34 4E 85 F1 | 	sub	fp, #52
12038     1C B8 B0 FD | 	call	#_pslpeek
1203c     A7 FA 61 FC | 	wrlong	result1, fp
12040     00 04 00 FF 
12044     00 FA 15 F2 | 	cmp	result1, ##524288 wc
12048     08 4E 05 31 |  if_ae	add	fp, #8
1204c     A7 56 68 3C |  if_ae	wrlong	#43, fp
12050     08 4E 85 31 |  if_ae	sub	fp, #8
12054                 | LR__1421
12054     A7 12 02 F6 | 	mov	arg01, fp
12058     D4 9B BF FD | 	call	#_push
1205c                 | LR__1422
1205c     A7 F0 03 F6 | 	mov	ptra, fp
12060     B2 00 A0 FD | 	call	#popregs_
12064                 | _do_getvar_ret
12064     2D 00 64 FD | 	ret
12068                 | 
12068                 | ' 
12068                 | ' 
12068                 | ' sub do_getaddr
12068                 | _do_getaddr
12068     01 4A 05 F6 | 	mov	COUNT_, #1
1206c     A8 00 A0 FD | 	call	#pushregs_
12070     38 F0 07 F1 | 	add	ptra, #56
12074                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
12074                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
12074     4A 00 00 FF 
12078     80 E4 05 F1 | 	add	objptr, ##38016
1207c     F2 12 02 FB | 	rdlong	arg01, objptr
12080     09 FD 01 F6 | 	mov	result2, arg01
12084     01 FC 65 F0 | 	shl	result2, #1
12088     09 FD 01 F1 | 	add	result2, arg01
1208c     02 FC 65 F0 | 	shl	result2, #2
12090     03 00 00 FF 
12094     04 E4 85 F1 | 	sub	objptr, ##1540
12098     F2 FC 01 F1 | 	add	result2, objptr
1209c     04 FC 05 F1 | 	add	result2, #4
120a0     FE FC 09 FB | 	rdlong	result2, result2 wz
120a4     47 00 00 FF 
120a8     7C E4 85 F1 | 	sub	objptr, ##36476
120ac     C4 00 90 5D |  if_ne	jmp	#LR__1430
120b0     4A 00 00 FF 
120b4     80 E4 05 F1 | 	add	objptr, ##38016
120b8     F2 12 02 FB | 	rdlong	arg01, objptr
120bc     09 FD 01 F6 | 	mov	result2, arg01
120c0     01 FC 65 F0 | 	shl	result2, #1
120c4     09 FD 01 F1 | 	add	result2, arg01
120c8     02 FC 65 F0 | 	shl	result2, #2
120cc     03 00 00 FF 
120d0     04 E4 85 F1 | 	sub	objptr, ##1540
120d4     F2 FC 01 F1 | 	add	result2, objptr
120d8     FE 12 02 FB | 	rdlong	arg01, result2
120dc     04 12 66 F0 | 	shl	arg01, #4
120e0     32 00 00 FF 
120e4     84 E4 85 F1 | 	sub	objptr, ##25732
120e8     F2 12 02 F1 | 	add	arg01, objptr
120ec     0C 12 06 F1 | 	add	arg01, #12
120f0     09 13 02 FB | 	rdlong	arg01, arg01
120f4     08 4E 05 F1 | 	add	fp, #8
120f8     A7 12 62 FC | 	wrlong	arg01, fp
120fc                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
120fc                 | '    if t1.result_type>=array_no_type then goto 2200
120fc     08 4E 85 F1 | 	sub	fp, #8
12100     00 13 16 F2 | 	cmp	arg01, #256 wc
12104     14 00 00 FF 
12108     F8 E5 85 F1 | 	sub	objptr, ##10744
1210c     64 00 90 3D |  if_ae	jmp	#LR__1431
12110     4A 00 00 FF 
12114     80 E4 05 F1 | 	add	objptr, ##38016
12118     F2 12 02 FB | 	rdlong	arg01, objptr
1211c     09 FB 01 F6 | 	mov	result1, arg01
12120     01 FA 65 F0 | 	shl	result1, #1
12124     09 FB 01 F1 | 	add	result1, arg01
12128     02 FA 65 F0 | 	shl	result1, #2
1212c     03 00 00 FF 
12130     04 E4 85 F1 | 	sub	objptr, ##1540
12134     F2 FA 01 F1 | 	add	result1, objptr
12138     FD FA 01 FB | 	rdlong	result1, result1
1213c     04 FA 65 F0 | 	shl	result1, #4
12140     32 00 00 FF 
12144     84 E4 85 F1 | 	sub	objptr, ##25732
12148     F2 FA 01 F1 | 	add	result1, objptr
1214c     04 FA 05 F1 | 	add	result1, #4
12150     14 00 00 FF 
12154     F8 E5 85 F1 | 	sub	objptr, ##10744
12158     A7 FA 61 FC | 	wrlong	result1, fp
1215c     08 4E 05 F1 | 	add	fp, #8
12160     A7 3A 68 FC | 	wrlong	#29, fp
12164     08 4E 85 F1 | 	sub	fp, #8
12168     A7 12 02 F6 | 	mov	arg01, fp
1216c     C0 9A BF FD | 	call	#_push
12170                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
12170                 | '   t1.result_type=result_uint
12170                 | '   push t1 : return
12170     D8 02 90 FD | 	jmp	#LR__1440
12174                 | LR__1430
12174                 | LR__1431
12174     4A 00 00 FF 
12178     80 E4 05 F1 | 	add	objptr, ##38016
1217c     F2 FE 01 FB | 	rdlong	result3, objptr
12180     FF 12 02 F6 | 	mov	arg01, result3
12184     01 12 66 F0 | 	shl	arg01, #1
12188     FF 12 02 F1 | 	add	arg01, result3
1218c     02 12 66 F0 | 	shl	arg01, #2
12190     03 00 00 FF 
12194     04 E4 85 F1 | 	sub	objptr, ##1540
12198     F2 12 02 F1 | 	add	arg01, objptr
1219c     09 13 02 FB | 	rdlong	arg01, arg01
121a0     04 12 66 F0 | 	shl	arg01, #4
121a4     32 00 00 FF 
121a8     84 E4 85 F1 | 	sub	objptr, ##25732
121ac     F2 12 02 F1 | 	add	arg01, objptr
121b0     04 12 06 F1 | 	add	arg01, #4
121b4     09 13 02 FB | 	rdlong	arg01, arg01
121b8     0C 4E 05 F1 | 	add	fp, #12
121bc     A7 12 62 FC | 	wrlong	arg01, fp
121c0     0C 4E 85 F1 | 	sub	fp, #12
121c4     14 00 00 FF 
121c8     F8 E5 85 F1 | 	sub	objptr, ##10744
121cc     88 B6 B0 FD | 	call	#_pslpeek
121d0     FD FA 31 F9 | 	getword	result1, result1, #0
121d4     10 4E 05 F1 | 	add	fp, #16
121d8     A7 FA 61 FC | 	wrlong	result1, fp
121dc     4A 00 00 FF 
121e0     80 E4 05 F1 | 	add	objptr, ##38016
121e4     F2 FE 01 FB | 	rdlong	result3, objptr
121e8     FF 12 02 F6 | 	mov	arg01, result3
121ec     01 12 66 F0 | 	shl	arg01, #1
121f0     FF 12 02 F1 | 	add	arg01, result3
121f4     02 12 66 F0 | 	shl	arg01, #2
121f8     03 00 00 FF 
121fc     04 E4 85 F1 | 	sub	objptr, ##1540
12200     F2 12 02 F1 | 	add	arg01, objptr
12204     04 12 06 F1 | 	add	arg01, #4
12208     09 13 02 FB | 	rdlong	arg01, arg01
1220c     04 4E 05 F1 | 	add	fp, #4
12210     A7 12 62 FC | 	wrlong	arg01, fp
12214     08 4E 85 F1 | 	sub	fp, #8
12218     A7 12 02 FB | 	rdlong	arg01, fp
1221c     0C 4E 85 F1 | 	sub	fp, #12
12220     02 12 06 F1 | 	add	arg01, #2
12224     47 00 00 FF 
12228     7C E4 85 F1 | 	sub	objptr, ##36476
1222c     D0 B5 B0 FD | 	call	#_pspeek
12230     FD FA E1 F8 | 	getbyte	result1, result1, #0
12234     18 4E 05 F1 | 	add	fp, #24
12238     A7 FA 61 FC | 	wrlong	result1, fp
1223c     0C 4E 85 F1 | 	sub	fp, #12
12240     A7 12 02 FB | 	rdlong	arg01, fp
12244     0C 4E 85 F1 | 	sub	fp, #12
12248     04 12 06 F1 | 	add	arg01, #4
1224c     08 B6 B0 FD | 	call	#_pslpeek
12250     1C 4E 05 F1 | 	add	fp, #28
12254     A7 FA 61 FC | 	wrlong	result1, fp
12258     10 4E 85 F1 | 	sub	fp, #16
1225c     A7 12 02 FB | 	rdlong	arg01, fp
12260     0C 4E 85 F1 | 	sub	fp, #12
12264     08 12 06 F1 | 	add	arg01, #8
12268     EC B5 B0 FD | 	call	#_pslpeek
1226c     20 4E 05 F1 | 	add	fp, #32
12270     A7 FA 61 FC | 	wrlong	result1, fp
12274     14 4E 85 F1 | 	sub	fp, #20
12278     A7 12 02 FB | 	rdlong	arg01, fp
1227c     0C 4E 85 F1 | 	sub	fp, #12
12280     0C 12 06 F1 | 	add	arg01, #12
12284     D0 B5 B0 FD | 	call	#_pslpeek
12288     24 4E 05 F1 | 	add	fp, #36
1228c     A7 FA 61 FC | 	wrlong	result1, fp
12290                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
12290                 | ' esize=pspeek(arrptr+2)
12290                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
12290                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
12290                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
12290                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
12290     10 4E 85 F1 | 	sub	fp, #16
12294     A7 12 02 FB | 	rdlong	arg01, fp
12298     14 4E 85 F1 | 	sub	fp, #20
1229c     03 12 16 F2 | 	cmp	arg01, #3 wc
122a0     34 00 90 CD |  if_b	jmp	#LR__1432
122a4     F0 98 BF FD | 	call	#_pop
122a8     A7 FA 61 FC | 	wrlong	result1, fp
122ac     04 4E 05 F1 | 	add	fp, #4
122b0     A7 FC 61 FC | 	wrlong	result2, fp
122b4     04 4E 05 F1 | 	add	fp, #4
122b8     A7 FE 61 FC | 	wrlong	result3, fp
122bc     08 4E 85 F1 | 	sub	fp, #8
122c0     A7 12 02 F6 | 	mov	arg01, fp
122c4     A0 39 B0 FD | 	call	#_converttoint
122c8     30 4E 05 F1 | 	add	fp, #48
122cc     A7 FA 61 FC | 	wrlong	result1, fp
122d0     30 4E 85 F1 | 	sub	fp, #48
122d4     0C 00 90 FD | 	jmp	#LR__1433
122d8                 | LR__1432
122d8     30 4E 05 F1 | 	add	fp, #48
122dc     A7 00 68 FC | 	wrlong	#0, fp
122e0     30 4E 85 F1 | 	sub	fp, #48
122e4                 | LR__1433
122e4                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
122e4     14 4E 05 F1 | 	add	fp, #20
122e8     A7 12 02 FB | 	rdlong	arg01, fp
122ec     14 4E 85 F1 | 	sub	fp, #20
122f0     02 12 16 F2 | 	cmp	arg01, #2 wc
122f4     34 00 90 CD |  if_b	jmp	#LR__1434
122f8     9C 98 BF FD | 	call	#_pop
122fc     A7 FA 61 FC | 	wrlong	result1, fp
12300     04 4E 05 F1 | 	add	fp, #4
12304     A7 FC 61 FC | 	wrlong	result2, fp
12308     04 4E 05 F1 | 	add	fp, #4
1230c     A7 FE 61 FC | 	wrlong	result3, fp
12310     08 4E 85 F1 | 	sub	fp, #8
12314     A7 12 02 F6 | 	mov	arg01, fp
12318     4C 39 B0 FD | 	call	#_converttoint
1231c     2C 4E 05 F1 | 	add	fp, #44
12320     A7 FA 61 FC | 	wrlong	result1, fp
12324     2C 4E 85 F1 | 	sub	fp, #44
12328     0C 00 90 FD | 	jmp	#LR__1435
1232c                 | LR__1434
1232c     2C 4E 05 F1 | 	add	fp, #44
12330     A7 00 68 FC | 	wrlong	#0, fp
12334     2C 4E 85 F1 | 	sub	fp, #44
12338                 | LR__1435
12338                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
12338     14 4E 05 F1 | 	add	fp, #20
1233c     A7 12 02 FB | 	rdlong	arg01, fp
12340     14 4E 85 F1 | 	sub	fp, #20
12344     01 12 16 F2 | 	cmp	arg01, #1 wc
12348     34 00 90 CD |  if_b	jmp	#LR__1436
1234c     48 98 BF FD | 	call	#_pop
12350     A7 FA 61 FC | 	wrlong	result1, fp
12354     04 4E 05 F1 | 	add	fp, #4
12358     A7 FC 61 FC | 	wrlong	result2, fp
1235c     04 4E 05 F1 | 	add	fp, #4
12360     A7 FE 61 FC | 	wrlong	result3, fp
12364     08 4E 85 F1 | 	sub	fp, #8
12368     A7 12 02 F6 | 	mov	arg01, fp
1236c     F8 38 B0 FD | 	call	#_converttoint
12370     28 4E 05 F1 | 	add	fp, #40
12374     A7 FA 61 FC | 	wrlong	result1, fp
12378     28 4E 85 F1 | 	sub	fp, #40
1237c     0C 00 90 FD | 	jmp	#LR__1437
12380                 | LR__1436
12380     28 4E 05 F1 | 	add	fp, #40
12384     A7 00 68 FC | 	wrlong	#0, fp
12388     28 4E 85 F1 | 	sub	fp, #40
1238c                 | LR__1437
1238c                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1238c                 | ' if numpar>0 then
1238c     14 4E 05 F1 | 	add	fp, #20
12390     A7 FE 01 FB | 	rdlong	result3, fp
12394     14 4E 85 F1 | 	sub	fp, #20
12398     01 FE 15 F2 | 	cmp	result3, #1 wc
1239c     8C 00 90 CD |  if_b	jmp	#LR__1438
123a0     0C 4E 05 F1 | 	add	fp, #12
123a4     A7 FC 01 FB | 	rdlong	result2, fp
123a8     1C 4E 05 F1 | 	add	fp, #28
123ac     A7 FE 01 FB | 	rdlong	result3, fp
123b0     04 4E 05 F1 | 	add	fp, #4
123b4     A7 12 02 FB | 	rdlong	arg01, fp
123b8     10 4E 85 F1 | 	sub	fp, #16
123bc     A7 FA 01 FB | 	rdlong	result1, fp
123c0     FD 12 02 FD | 	qmul	arg01, result1
123c4     10 FC 05 F1 | 	add	result2, #16
123c8     14 4E 05 F1 | 	add	fp, #20
123cc     A7 1E 02 FB | 	rdlong	local01, fp
123d0     18 12 62 FD | 	getqx	arg01
123d4     FD 1E 02 FD | 	qmul	local01, result1
123d8     09 FF 01 F1 | 	add	result3, arg01
123dc     10 4E 85 F1 | 	sub	fp, #16
123e0     A7 1E 02 FB | 	rdlong	local01, fp
123e4     18 FA 61 FD | 	getqx	result1
123e8     0F FB 01 FD | 	qmul	result1, local01
123ec     08 4E 85 F1 | 	sub	fp, #8
123f0     A7 1E 02 FB | 	rdlong	local01, fp
123f4     18 FA 61 FD | 	getqx	result1
123f8     FD FE 01 F1 | 	add	result3, result1
123fc     0F FF 01 FD | 	qmul	result3, local01
12400     1C 4E 05 F1 | 	add	fp, #28
12404     18 1E 62 FD | 	getqx	local01
12408     0F FD 01 F1 | 	add	result2, local01
1240c     A7 FC 61 FC | 	wrlong	result2, fp
12410     2C 4E 85 F1 | 	sub	fp, #44
12414     A7 3A 68 FC | 	wrlong	#29, fp
12418     2C 4E 05 F1 | 	add	fp, #44
1241c     A7 1E 02 FB | 	rdlong	local01, fp
12420     34 4E 85 F1 | 	sub	fp, #52
12424     A7 1E 62 FC | 	wrlong	local01, fp
12428     18 00 90 FD | 	jmp	#LR__1439
1242c                 | LR__1438
1242c     08 4E 05 F1 | 	add	fp, #8
12430     A7 3A 68 FC | 	wrlong	#29, fp
12434     04 4E 05 F1 | 	add	fp, #4
12438     A7 1E 02 FB | 	rdlong	local01, fp
1243c     0C 4E 85 F1 | 	sub	fp, #12
12440     A7 1E 62 FC | 	wrlong	local01, fp
12444                 | LR__1439
12444     A7 12 02 F6 | 	mov	arg01, fp
12448     E4 97 BF FD | 	call	#_push
1244c                 | LR__1440
1244c     A7 F0 03 F6 | 	mov	ptra, fp
12450     B2 00 A0 FD | 	call	#popregs_
12454                 | _do_getaddr_ret
12454     2D 00 64 FD | 	ret
12458                 | 
12458                 | ' 
12458                 | ' 
12458                 | ' sub do_inkey
12458                 | _do_inkey
12458     02 4A 05 F6 | 	mov	COUNT_, #2
1245c     A8 00 A0 FD | 	call	#pushregs_
12460     0C F0 07 F1 | 	add	ptra, #12
12464     AC DC B0 FD | 	call	#_usbnew_spin2_get_key
12468     45 00 00 FF 
1246c     74 E4 05 F1 | 	add	objptr, ##35444
12470     F2 FA 61 FC | 	wrlong	result1, objptr
12474                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
12474     45 00 00 FF 
12478     74 E4 85 F1 | 	sub	objptr, ##35444
1247c     00 FA 0D F2 | 	cmp	result1, #0 wz
12480     94 00 90 AD |  if_e	jmp	#LR__1451
12484     45 00 00 FF 
12488     74 E4 05 F1 | 	add	objptr, ##35444
1248c     F2 1C 02 FB | 	rdlong	arg06, objptr
12490     45 00 00 FF 
12494     74 E4 85 F1 | 	sub	objptr, ##35444
12498     00 00 40 FF 
1249c     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
124a0     45 00 00 CF 
124a4     74 E4 05 C1 |  if_b	add	objptr, ##35444
124a8     F2 1E 02 CB |  if_b	rdlong	local01, objptr
124ac     45 00 00 CF 
124b0     74 E4 85 C1 |  if_b	sub	objptr, ##35444
124b4     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
124b8     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
124bc     58 00 90 3D |  if_ae	jmp	#LR__1451
124c0                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
124c0     58 00 00 FF 
124c4     18 E5 05 F1 | 	add	objptr, ##45336
124c8     F2 1C 02 FB | 	rdlong	arg06, objptr
124cc     58 00 00 FF 
124d0     18 E5 85 F1 | 	sub	objptr, ##45336
124d4     01 1C 0E F2 | 	cmp	arg06, #1 wz
124d8     3C 00 90 5D |  if_ne	jmp	#LR__1450
124dc     59 00 00 FF 
124e0     BC E5 05 F1 | 	add	objptr, ##46012
124e4     F2 14 02 FB | 	rdlong	arg02, objptr
124e8     04 E4 85 F1 | 	sub	objptr, #4
124ec     F2 1A 02 FB | 	rdlong	arg05, objptr
124f0     07 12 06 F6 | 	mov	arg01, #7
124f4     56 00 00 FF 
124f8     44 16 06 F6 | 	mov	arg03, ##44100
124fc     0C 18 C6 F9 | 	decod	arg04, #12
12500     01 1C 66 F6 | 	neg	arg06, #1
12504     4E 00 00 FF 
12508     EC E4 85 F1 | 	sub	objptr, ##40172
1250c     A8 DF B0 FD | 	call	#_audio096_spin2_play
12510     0B 00 00 FF 
12514     CC E4 85 F1 | 	sub	objptr, ##5836
12518                 | LR__1450
12518                 | LR__1451
12518                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
12518     45 00 00 FF 
1251c     74 E4 05 F1 | 	add	objptr, ##35444
12520     F2 1C 0A FB | 	rdlong	arg06, objptr wz
12524     45 00 00 FF 
12528     74 E4 85 F1 | 	sub	objptr, ##35444
1252c     D4 01 90 AD |  if_e	jmp	#LR__1460
12530     45 00 00 FF 
12534     74 E4 05 F1 | 	add	objptr, ##35444
12538     F2 1C 02 FB | 	rdlong	arg06, objptr
1253c     45 00 00 FF 
12540     74 E4 85 F1 | 	sub	objptr, ##35444
12544     00 00 40 FF 
12548     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
1254c     45 00 00 CF 
12550     74 E4 05 C1 |  if_b	add	objptr, ##35444
12554     F2 1E 02 CB |  if_b	rdlong	local01, objptr
12558     45 00 00 CF 
1255c     74 E4 85 C1 |  if_b	sub	objptr, ##35444
12560     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
12564     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
12568     98 01 90 3D |  if_ae	jmp	#LR__1460
1256c                 | '   if leds and 2 = 2 then 
1256c     59 00 00 FF 
12570     E4 E5 05 F1 | 	add	objptr, ##46052
12574     F2 1E 0A FB | 	rdlong	local01, objptr wz
12578     59 00 00 FF 
1257c     E4 E5 85 F1 | 	sub	objptr, ##46052
12580     58 01 90 AD |  if_e	jmp	#LR__1459
12584                 | '     if key>96 andalso key<123 then
12584     45 00 00 FF 
12588     74 E4 05 F1 | 	add	objptr, ##35444
1258c     F2 1E 02 FB | 	rdlong	local01, objptr
12590     45 00 00 FF 
12594     74 E4 85 F1 | 	sub	objptr, ##35444
12598     61 1E 16 F2 | 	cmp	local01, #97 wc
1259c     3C 00 90 CD |  if_b	jmp	#LR__1452
125a0     45 00 00 FF 
125a4     74 E4 05 F1 | 	add	objptr, ##35444
125a8     F2 1E 02 FB | 	rdlong	local01, objptr
125ac     45 00 00 FF 
125b0     74 E4 85 F1 | 	sub	objptr, ##35444
125b4     7B 1E 16 F2 | 	cmp	local01, #123 wc
125b8     20 00 90 3D |  if_ae	jmp	#LR__1452
125bc     45 00 00 FF 
125c0     74 E4 05 F1 | 	add	objptr, ##35444
125c4     F2 1E 02 FB | 	rdlong	local01, objptr
125c8     20 1E 86 F1 | 	sub	local01, #32
125cc     F2 1E 62 FC | 	wrlong	local01, objptr
125d0     45 00 00 FF 
125d4     74 E4 85 F1 | 	sub	objptr, ##35444
125d8     00 01 90 FD | 	jmp	#LR__1458
125dc                 | LR__1452
125dc     45 00 00 FF 
125e0     74 E4 05 F1 | 	add	objptr, ##35444
125e4     F2 1E 02 FB | 	rdlong	local01, objptr
125e8     45 00 00 FF 
125ec     74 E4 85 F1 | 	sub	objptr, ##35444
125f0     41 1E 16 F2 | 	cmp	local01, #65 wc
125f4     3C 00 90 CD |  if_b	jmp	#LR__1453
125f8     45 00 00 FF 
125fc     74 E4 05 F1 | 	add	objptr, ##35444
12600     F2 1E 02 FB | 	rdlong	local01, objptr
12604     45 00 00 FF 
12608     74 E4 85 F1 | 	sub	objptr, ##35444
1260c     5B 1E 16 F2 | 	cmp	local01, #91 wc
12610     20 00 90 3D |  if_ae	jmp	#LR__1453
12614     45 00 00 FF 
12618     74 E4 05 F1 | 	add	objptr, ##35444
1261c     F2 1E 02 FB | 	rdlong	local01, objptr
12620     20 1E 06 F1 | 	add	local01, #32
12624     F2 1E 62 FC | 	wrlong	local01, objptr
12628     45 00 00 FF 
1262c     74 E4 85 F1 | 	sub	objptr, ##35444
12630     A8 00 90 FD | 	jmp	#LR__1457
12634                 | LR__1453
12634     45 00 00 FF 
12638     74 E4 05 F1 | 	add	objptr, ##35444
1263c     F2 1E 02 FB | 	rdlong	local01, objptr
12640     45 00 00 FF 
12644     74 E4 85 F1 | 	sub	objptr, ##35444
12648     17 1E 16 F2 | 	cmp	local01, #23 wc
1264c     3C 00 90 CD |  if_b	jmp	#LR__1454
12650     45 00 00 FF 
12654     74 E4 05 F1 | 	add	objptr, ##35444
12658     F2 1E 02 FB | 	rdlong	local01, objptr
1265c     45 00 00 FF 
12660     74 E4 85 F1 | 	sub	objptr, ##35444
12664     20 1E 16 F2 | 	cmp	local01, #32 wc
12668     20 00 90 3D |  if_ae	jmp	#LR__1454
1266c     45 00 00 FF 
12670     74 E4 05 F1 | 	add	objptr, ##35444
12674     F2 1E 02 FB | 	rdlong	local01, objptr
12678     09 1E 86 F1 | 	sub	local01, #9
1267c     F2 1E 62 FC | 	wrlong	local01, objptr
12680     45 00 00 FF 
12684     74 E4 85 F1 | 	sub	objptr, ##35444
12688     50 00 90 FD | 	jmp	#LR__1456
1268c                 | LR__1454
1268c     45 00 00 FF 
12690     74 E4 05 F1 | 	add	objptr, ##35444
12694     F2 20 02 FB | 	rdlong	local02, objptr
12698     45 00 00 FF 
1269c     74 E4 85 F1 | 	sub	objptr, ##35444
126a0     0E 20 16 F2 | 	cmp	local02, #14 wc
126a4     34 00 90 CD |  if_b	jmp	#LR__1455
126a8     45 00 00 FF 
126ac     74 E4 05 F1 | 	add	objptr, ##35444
126b0     F2 1E 02 FB | 	rdlong	local01, objptr
126b4     45 00 00 FF 
126b8     74 E4 85 F1 | 	sub	objptr, ##35444
126bc     17 1E 16 F2 | 	cmp	local01, #23 wc
126c0     59 00 00 CF 
126c4     E8 E5 05 C1 |  if_b	add	objptr, ##46056
126c8     F2 20 02 CB |  if_b	rdlong	local02, objptr
126cc     27 20 06 C1 |  if_b	add	local02, #39
126d0     F2 20 62 CC |  if_b	wrlong	local02, objptr
126d4     59 00 00 CF 
126d8     E8 E5 85 C1 |  if_b	sub	objptr, ##46056
126dc                 | LR__1455
126dc                 | LR__1456
126dc                 | LR__1457
126dc                 | LR__1458
126dc                 | LR__1459
126dc     45 00 00 FF 
126e0     74 E4 05 F1 | 	add	objptr, ##35444
126e4     F2 12 02 FB | 	rdlong	arg01, objptr
126e8     45 00 00 FF 
126ec     74 E4 85 F1 | 	sub	objptr, ##35444
126f0     14 B2 B0 FD | 	call	#_scantochar
126f4     FD 12 02 F6 | 	mov	arg01, result1
126f8     6C 04 B1 FD | 	call	#__system__Chr_S
126fc     A7 FA 61 FC | 	wrlong	result1, fp
12700     0C 00 90 FD | 	jmp	#LR__1461
12704                 | LR__1460
12704     84 01 00 FF 
12708     C2 20 06 F6 | 	mov	local02, ##@LR__5420
1270c     A7 20 62 FC | 	wrlong	local02, fp
12710                 | LR__1461
12710     08 4E 05 F1 | 	add	fp, #8
12714     A7 3E 68 FC | 	wrlong	#31, fp
12718     08 4E 85 F1 | 	sub	fp, #8
1271c     A7 12 02 F6 | 	mov	arg01, fp
12720     0C 95 BF FD | 	call	#_push
12724     A7 F0 03 F6 | 	mov	ptra, fp
12728     B2 00 A0 FD | 	call	#popregs_
1272c                 | _do_inkey_ret
1272c     2D 00 64 FD | 	ret
12730                 | 
12730                 | '  
12730                 | ' '------------------------ Operators 
12730                 | ' 
12730                 | ' sub do_plus 
12730                 | _do_plus
12730     05 4A 05 F6 | 	mov	COUNT_, #5
12734     A8 00 A0 FD | 	call	#pushregs_
12738     18 F0 07 F1 | 	add	ptra, #24
1273c     58 94 BF FD | 	call	#_pop
12740     FD 1E 02 F6 | 	mov	local01, result1
12744     FE 20 02 F6 | 	mov	local02, result2
12748     FF 22 02 F6 | 	mov	local03, result3
1274c     0C 4E 05 F1 | 	add	fp, #12
12750     A7 1E 62 FC | 	wrlong	local01, fp
12754     04 4E 05 F1 | 	add	fp, #4
12758     A7 20 62 FC | 	wrlong	local02, fp
1275c     04 4E 05 F1 | 	add	fp, #4
12760     A7 22 62 FC | 	wrlong	local03, fp
12764     14 4E 85 F1 | 	sub	fp, #20
12768     2C 94 BF FD | 	call	#_pop
1276c     FF 22 02 F6 | 	mov	local03, result3
12770     A7 FA 61 FC | 	wrlong	result1, fp
12774     04 4E 05 F1 | 	add	fp, #4
12778     A7 FC 61 FC | 	wrlong	result2, fp
1277c     04 4E 05 F1 | 	add	fp, #4
12780     A7 22 62 FC | 	wrlong	local03, fp
12784                 | ' 
12784                 | ' t2=pop()
12784                 | ' t1=pop()
12784                 | ' 
12784                 | ' 
12784                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
12784     08 4E 85 F1 | 	sub	fp, #8
12788     1D 22 0E F2 | 	cmp	local03, #29 wz
1278c     14 4E 05 A1 |  if_e	add	fp, #20
12790     A7 24 02 AB |  if_e	rdlong	local04, fp
12794     14 4E 85 A1 |  if_e	sub	fp, #20
12798     12 23 02 A6 |  if_e	mov	local03, local04
1279c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
127a0     1C 00 90 5D |  if_ne	jmp	#LR__1470
127a4     A7 1E 02 FB | 	rdlong	local01, fp
127a8     0C 4E 05 F1 | 	add	fp, #12
127ac     A7 20 02 FB | 	rdlong	local02, fp
127b0     0C 4E 85 F1 | 	sub	fp, #12
127b4     10 1F 02 F1 | 	add	local01, local02
127b8     A7 1E 62 FC | 	wrlong	local01, fp
127bc     48 04 90 FD | 	jmp	#LR__1485
127c0                 | LR__1470
127c0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
127c0     08 4E 05 F1 | 	add	fp, #8
127c4     A7 1E 02 FB | 	rdlong	local01, fp
127c8     08 4E 85 F1 | 	sub	fp, #8
127cc     1D 1E 0E F2 | 	cmp	local01, #29 wz
127d0     14 4E 05 A1 |  if_e	add	fp, #20
127d4     A7 24 02 AB |  if_e	rdlong	local04, fp
127d8     14 4E 85 A1 |  if_e	sub	fp, #20
127dc     12 23 02 A6 |  if_e	mov	local03, local04
127e0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
127e4     28 00 90 5D |  if_ne	jmp	#LR__1471
127e8     A7 1E 02 FB | 	rdlong	local01, fp
127ec     0C 4E 05 F1 | 	add	fp, #12
127f0     A7 20 02 FB | 	rdlong	local02, fp
127f4     0C 4E 85 F1 | 	sub	fp, #12
127f8     10 1F 02 F1 | 	add	local01, local02
127fc     A7 1E 62 FC | 	wrlong	local01, fp
12800     08 4E 05 F1 | 	add	fp, #8
12804     A7 38 68 FC | 	wrlong	#28, fp
12808     08 4E 85 F1 | 	sub	fp, #8
1280c     F8 03 90 FD | 	jmp	#LR__1485
12810                 | LR__1471
12810                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
12810     08 4E 05 F1 | 	add	fp, #8
12814     A7 1E 02 FB | 	rdlong	local01, fp
12818     08 4E 85 F1 | 	sub	fp, #8
1281c     1D 1E 0E F2 | 	cmp	local01, #29 wz
12820     14 4E 05 A1 |  if_e	add	fp, #20
12824     A7 24 02 AB |  if_e	rdlong	local04, fp
12828     14 4E 85 A1 |  if_e	sub	fp, #20
1282c     12 23 02 A6 |  if_e	mov	local03, local04
12830     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12834     30 00 90 5D |  if_ne	jmp	#LR__1472
12838     A7 12 02 FB | 	rdlong	arg01, fp
1283c     98 08 B1 FD | 	call	#__system___float_fromuns
12840     FD 12 02 F6 | 	mov	arg01, result1
12844     0C 4E 05 F1 | 	add	fp, #12
12848     A7 14 02 FB | 	rdlong	arg02, fp
1284c     0C 4E 85 F1 | 	sub	fp, #12
12850     B8 08 B1 FD | 	call	#__system___float_add
12854     A7 FA 61 FC | 	wrlong	result1, fp
12858     08 4E 05 F1 | 	add	fp, #8
1285c     A7 3C 68 FC | 	wrlong	#30, fp
12860     08 4E 85 F1 | 	sub	fp, #8
12864     A0 03 90 FD | 	jmp	#LR__1485
12868                 | LR__1472
12868                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
12868     08 4E 05 F1 | 	add	fp, #8
1286c     A7 1E 02 FB | 	rdlong	local01, fp
12870     08 4E 85 F1 | 	sub	fp, #8
12874     1C 1E 0E F2 | 	cmp	local01, #28 wz
12878     14 4E 05 A1 |  if_e	add	fp, #20
1287c     A7 24 02 AB |  if_e	rdlong	local04, fp
12880     14 4E 85 A1 |  if_e	sub	fp, #20
12884     12 23 02 A6 |  if_e	mov	local03, local04
12888     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1288c     1C 00 90 5D |  if_ne	jmp	#LR__1473
12890     A7 1E 02 FB | 	rdlong	local01, fp
12894     0C 4E 05 F1 | 	add	fp, #12
12898     A7 20 02 FB | 	rdlong	local02, fp
1289c     0C 4E 85 F1 | 	sub	fp, #12
128a0     10 1F 02 F1 | 	add	local01, local02
128a4     A7 1E 62 FC | 	wrlong	local01, fp
128a8     5C 03 90 FD | 	jmp	#LR__1485
128ac                 | LR__1473
128ac                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
128ac     08 4E 05 F1 | 	add	fp, #8
128b0     A7 1E 02 FB | 	rdlong	local01, fp
128b4     08 4E 85 F1 | 	sub	fp, #8
128b8     1C 1E 0E F2 | 	cmp	local01, #28 wz
128bc     14 4E 05 A1 |  if_e	add	fp, #20
128c0     A7 24 02 AB |  if_e	rdlong	local04, fp
128c4     14 4E 85 A1 |  if_e	sub	fp, #20
128c8     12 23 02 A6 |  if_e	mov	local03, local04
128cc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
128d0     1C 00 90 5D |  if_ne	jmp	#LR__1474
128d4     A7 1E 02 FB | 	rdlong	local01, fp
128d8     0C 4E 05 F1 | 	add	fp, #12
128dc     A7 20 02 FB | 	rdlong	local02, fp
128e0     0C 4E 85 F1 | 	sub	fp, #12
128e4     10 1F 02 F1 | 	add	local01, local02
128e8     A7 1E 62 FC | 	wrlong	local01, fp
128ec     18 03 90 FD | 	jmp	#LR__1485
128f0                 | LR__1474
128f0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
128f0     08 4E 05 F1 | 	add	fp, #8
128f4     A7 1E 02 FB | 	rdlong	local01, fp
128f8     08 4E 85 F1 | 	sub	fp, #8
128fc     1C 1E 0E F2 | 	cmp	local01, #28 wz
12900     14 4E 05 A1 |  if_e	add	fp, #20
12904     A7 24 02 AB |  if_e	rdlong	local04, fp
12908     14 4E 85 A1 |  if_e	sub	fp, #20
1290c     12 23 02 A6 |  if_e	mov	local03, local04
12910     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12914     40 00 90 5D |  if_ne	jmp	#LR__1475
12918     A7 12 02 FB | 	rdlong	arg01, fp
1291c     09 13 52 F6 | 	abs	arg01, arg01 wc
12920     1F 26 C6 C9 |  if_b	decod	local05, #31
12924     00 26 06 36 |  if_ae	mov	local05, #0
12928     AC 07 B1 FD | 	call	#__system___float_fromuns
1292c     13 FB 61 F5 | 	xor	result1, local05
12930     FD 12 02 F6 | 	mov	arg01, result1
12934     0C 4E 05 F1 | 	add	fp, #12
12938     A7 14 02 FB | 	rdlong	arg02, fp
1293c     0C 4E 85 F1 | 	sub	fp, #12
12940     C8 07 B1 FD | 	call	#__system___float_add
12944     A7 FA 61 FC | 	wrlong	result1, fp
12948     08 4E 05 F1 | 	add	fp, #8
1294c     A7 3C 68 FC | 	wrlong	#30, fp
12950     08 4E 85 F1 | 	sub	fp, #8
12954     B0 02 90 FD | 	jmp	#LR__1485
12958                 | LR__1475
12958                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
12958     08 4E 05 F1 | 	add	fp, #8
1295c     A7 1E 02 FB | 	rdlong	local01, fp
12960     08 4E 85 F1 | 	sub	fp, #8
12964     1E 1E 0E F2 | 	cmp	local01, #30 wz
12968     14 4E 05 A1 |  if_e	add	fp, #20
1296c     A7 24 02 AB |  if_e	rdlong	local04, fp
12970     14 4E 85 A1 |  if_e	sub	fp, #20
12974     12 23 02 A6 |  if_e	mov	local03, local04
12978     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1297c     28 00 90 5D |  if_ne	jmp	#LR__1476
12980     A7 1E 02 FB | 	rdlong	local01, fp
12984     0C 4E 05 F1 | 	add	fp, #12
12988     A7 12 02 FB | 	rdlong	arg01, fp
1298c     0C 4E 85 F1 | 	sub	fp, #12
12990     44 07 B1 FD | 	call	#__system___float_fromuns
12994     FD 14 02 F6 | 	mov	arg02, result1
12998     0F 13 02 F6 | 	mov	arg01, local01
1299c     6C 07 B1 FD | 	call	#__system___float_add
129a0     A7 FA 61 FC | 	wrlong	result1, fp
129a4     60 02 90 FD | 	jmp	#LR__1485
129a8                 | LR__1476
129a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
129a8     08 4E 05 F1 | 	add	fp, #8
129ac     A7 1E 02 FB | 	rdlong	local01, fp
129b0     08 4E 85 F1 | 	sub	fp, #8
129b4     1E 1E 0E F2 | 	cmp	local01, #30 wz
129b8     14 4E 05 A1 |  if_e	add	fp, #20
129bc     A7 24 02 AB |  if_e	rdlong	local04, fp
129c0     14 4E 85 A1 |  if_e	sub	fp, #20
129c4     12 23 02 A6 |  if_e	mov	local03, local04
129c8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
129cc     38 00 90 5D |  if_ne	jmp	#LR__1477
129d0     A7 1E 02 FB | 	rdlong	local01, fp
129d4     0C 4E 05 F1 | 	add	fp, #12
129d8     A7 12 02 FB | 	rdlong	arg01, fp
129dc     0C 4E 85 F1 | 	sub	fp, #12
129e0     09 13 52 F6 | 	abs	arg01, arg01 wc
129e4     1F 26 C6 C9 |  if_b	decod	local05, #31
129e8     00 26 06 36 |  if_ae	mov	local05, #0
129ec     E8 06 B1 FD | 	call	#__system___float_fromuns
129f0     13 FB 61 F5 | 	xor	result1, local05
129f4     FD 14 02 F6 | 	mov	arg02, result1
129f8     0F 13 02 F6 | 	mov	arg01, local01
129fc     0C 07 B1 FD | 	call	#__system___float_add
12a00     A7 FA 61 FC | 	wrlong	result1, fp
12a04     00 02 90 FD | 	jmp	#LR__1485
12a08                 | LR__1477
12a08                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
12a08     08 4E 05 F1 | 	add	fp, #8
12a0c     A7 1E 02 FB | 	rdlong	local01, fp
12a10     08 4E 85 F1 | 	sub	fp, #8
12a14     1E 1E 0E F2 | 	cmp	local01, #30 wz
12a18     14 4E 05 A1 |  if_e	add	fp, #20
12a1c     A7 24 02 AB |  if_e	rdlong	local04, fp
12a20     14 4E 85 A1 |  if_e	sub	fp, #20
12a24     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
12a28     1C 00 90 5D |  if_ne	jmp	#LR__1478
12a2c     A7 12 02 FB | 	rdlong	arg01, fp
12a30     0C 4E 05 F1 | 	add	fp, #12
12a34     A7 14 02 FB | 	rdlong	arg02, fp
12a38     0C 4E 85 F1 | 	sub	fp, #12
12a3c     CC 06 B1 FD | 	call	#__system___float_add
12a40     A7 FA 61 FC | 	wrlong	result1, fp
12a44     C0 01 90 FD | 	jmp	#LR__1485
12a48                 | LR__1478
12a48                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
12a48     08 4E 05 F1 | 	add	fp, #8
12a4c     A7 1E 02 FB | 	rdlong	local01, fp
12a50     08 4E 85 F1 | 	sub	fp, #8
12a54     1F 1E 0E F2 | 	cmp	local01, #31 wz
12a58     24 00 90 5D |  if_ne	jmp	#LR__1479
12a5c     14 4E 05 F1 | 	add	fp, #20
12a60     A7 22 02 FB | 	rdlong	local03, fp
12a64     14 4E 85 F1 | 	sub	fp, #20
12a68     1F 22 0E F2 | 	cmp	local03, #31 wz
12a6c     A7 04 68 5C |  if_ne	wrlong	#2, fp
12a70     08 4E 05 51 |  if_ne	add	fp, #8
12a74     A7 FE 69 5C |  if_ne	wrlong	#255, fp
12a78     08 4E 85 51 |  if_ne	sub	fp, #8
12a7c     88 01 90 5D |  if_ne	jmp	#LR__1485
12a80                 | LR__1479
12a80                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
12a80     14 4E 05 F1 | 	add	fp, #20
12a84     A7 1E 02 FB | 	rdlong	local01, fp
12a88     14 4E 85 F1 | 	sub	fp, #20
12a8c     1F 1E 0E F2 | 	cmp	local01, #31 wz
12a90     24 00 90 5D |  if_ne	jmp	#LR__1480
12a94     08 4E 05 F1 | 	add	fp, #8
12a98     A7 22 02 FB | 	rdlong	local03, fp
12a9c     08 4E 85 F1 | 	sub	fp, #8
12aa0     1F 22 0E F2 | 	cmp	local03, #31 wz
12aa4     A7 04 68 5C |  if_ne	wrlong	#2, fp
12aa8     08 4E 05 51 |  if_ne	add	fp, #8
12aac     A7 FE 69 5C |  if_ne	wrlong	#255, fp
12ab0     08 4E 85 51 |  if_ne	sub	fp, #8
12ab4     50 01 90 5D |  if_ne	jmp	#LR__1485
12ab8                 | LR__1480
12ab8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
12ab8     08 4E 05 F1 | 	add	fp, #8
12abc     A7 1E 02 FB | 	rdlong	local01, fp
12ac0     08 4E 85 F1 | 	sub	fp, #8
12ac4     1F 1E 0E F2 | 	cmp	local01, #31 wz
12ac8     14 4E 05 A1 |  if_e	add	fp, #20
12acc     A7 22 02 AB |  if_e	rdlong	local03, fp
12ad0     14 4E 85 A1 |  if_e	sub	fp, #20
12ad4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12ad8     1C 00 90 5D |  if_ne	jmp	#LR__1481
12adc     A7 12 02 FB | 	rdlong	arg01, fp
12ae0     0C 4E 05 F1 | 	add	fp, #12
12ae4     A7 14 02 FB | 	rdlong	arg02, fp
12ae8     0C 4E 85 F1 | 	sub	fp, #12
12aec     94 DE B0 FD | 	call	#__system___string_concat
12af0     A7 FA 61 FC | 	wrlong	result1, fp
12af4     10 01 90 FD | 	jmp	#LR__1485
12af8                 | LR__1481
12af8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
12af8     08 4E 05 F1 | 	add	fp, #8
12afc     A7 1E 02 FB | 	rdlong	local01, fp
12b00     08 4E 85 F1 | 	sub	fp, #8
12b04     2B 1E 0E F2 | 	cmp	local01, #43 wz
12b08     14 4E 05 A1 |  if_e	add	fp, #20
12b0c     A7 22 02 AB |  if_e	rdlong	local03, fp
12b10     14 4E 85 A1 |  if_e	sub	fp, #20
12b14     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12b18     30 00 90 5D |  if_ne	jmp	#LR__1482
12b1c     A7 12 02 FB | 	rdlong	arg01, fp
12b20     20 E9 BF FD | 	call	#_convertstring
12b24     FD 12 02 F6 | 	mov	arg01, result1
12b28     0C 4E 05 F1 | 	add	fp, #12
12b2c     A7 14 02 FB | 	rdlong	arg02, fp
12b30     0C 4E 85 F1 | 	sub	fp, #12
12b34     4C DE B0 FD | 	call	#__system___string_concat
12b38     A7 FA 61 FC | 	wrlong	result1, fp
12b3c     08 4E 05 F1 | 	add	fp, #8
12b40     A7 3E 68 FC | 	wrlong	#31, fp
12b44     08 4E 85 F1 | 	sub	fp, #8
12b48     BC 00 90 FD | 	jmp	#LR__1485
12b4c                 | LR__1482
12b4c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
12b4c     08 4E 05 F1 | 	add	fp, #8
12b50     A7 1E 02 FB | 	rdlong	local01, fp
12b54     08 4E 85 F1 | 	sub	fp, #8
12b58     1F 1E 0E F2 | 	cmp	local01, #31 wz
12b5c     14 4E 05 A1 |  if_e	add	fp, #20
12b60     A7 22 02 AB |  if_e	rdlong	local03, fp
12b64     14 4E 85 A1 |  if_e	sub	fp, #20
12b68     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12b6c     28 00 90 5D |  if_ne	jmp	#LR__1483
12b70     A7 1E 02 FB | 	rdlong	local01, fp
12b74     0C 4E 05 F1 | 	add	fp, #12
12b78     A7 12 02 FB | 	rdlong	arg01, fp
12b7c     0C 4E 85 F1 | 	sub	fp, #12
12b80     C0 E8 BF FD | 	call	#_convertstring
12b84     FD 14 02 F6 | 	mov	arg02, result1
12b88     0F 13 02 F6 | 	mov	arg01, local01
12b8c     F4 DD B0 FD | 	call	#__system___string_concat
12b90     A7 FA 61 FC | 	wrlong	result1, fp
12b94     70 00 90 FD | 	jmp	#LR__1485
12b98                 | LR__1483
12b98                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
12b98     08 4E 05 F1 | 	add	fp, #8
12b9c     A7 1E 02 FB | 	rdlong	local01, fp
12ba0     08 4E 85 F1 | 	sub	fp, #8
12ba4     2B 1E 0E F2 | 	cmp	local01, #43 wz
12ba8     14 4E 05 A1 |  if_e	add	fp, #20
12bac     A7 22 02 AB |  if_e	rdlong	local03, fp
12bb0     14 4E 85 A1 |  if_e	sub	fp, #20
12bb4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12bb8     3C 00 90 5D |  if_ne	jmp	#LR__1484
12bbc     A7 12 02 FB | 	rdlong	arg01, fp
12bc0     80 E8 BF FD | 	call	#_convertstring
12bc4     FD 1E 02 F6 | 	mov	local01, result1
12bc8     0C 4E 05 F1 | 	add	fp, #12
12bcc     A7 12 02 FB | 	rdlong	arg01, fp
12bd0     0C 4E 85 F1 | 	sub	fp, #12
12bd4     6C E8 BF FD | 	call	#_convertstring
12bd8     FD 14 02 F6 | 	mov	arg02, result1
12bdc     0F 13 02 F6 | 	mov	arg01, local01
12be0     A0 DD B0 FD | 	call	#__system___string_concat
12be4     A7 FA 61 FC | 	wrlong	result1, fp
12be8     08 4E 05 F1 | 	add	fp, #8
12bec     A7 3E 68 FC | 	wrlong	#31, fp
12bf0     08 4E 85 F1 | 	sub	fp, #8
12bf4     10 00 90 FD | 	jmp	#LR__1485
12bf8                 | LR__1484
12bf8     A7 08 68 FC | 	wrlong	#4, fp
12bfc     08 4E 05 F1 | 	add	fp, #8
12c00     A7 FE 69 FC | 	wrlong	#255, fp
12c04     08 4E 85 F1 | 	sub	fp, #8
12c08                 | LR__1485
12c08     A7 12 02 F6 | 	mov	arg01, fp
12c0c     20 90 BF FD | 	call	#_push
12c10     A7 F0 03 F6 | 	mov	ptra, fp
12c14     B2 00 A0 FD | 	call	#popregs_
12c18                 | _do_plus_ret
12c18     2D 00 64 FD | 	ret
12c1c                 | 
12c1c                 | ' 
12c1c                 | ' sub do_minus
12c1c                 | _do_minus
12c1c     05 4A 05 F6 | 	mov	COUNT_, #5
12c20     A8 00 A0 FD | 	call	#pushregs_
12c24     18 F0 07 F1 | 	add	ptra, #24
12c28     6C 8F BF FD | 	call	#_pop
12c2c     FD 1E 02 F6 | 	mov	local01, result1
12c30     FE 20 02 F6 | 	mov	local02, result2
12c34     FF 22 02 F6 | 	mov	local03, result3
12c38     0C 4E 05 F1 | 	add	fp, #12
12c3c     A7 1E 62 FC | 	wrlong	local01, fp
12c40     04 4E 05 F1 | 	add	fp, #4
12c44     A7 20 62 FC | 	wrlong	local02, fp
12c48     04 4E 05 F1 | 	add	fp, #4
12c4c     A7 22 62 FC | 	wrlong	local03, fp
12c50     14 4E 85 F1 | 	sub	fp, #20
12c54     40 8F BF FD | 	call	#_pop
12c58     FF 22 02 F6 | 	mov	local03, result3
12c5c     A7 FA 61 FC | 	wrlong	result1, fp
12c60     04 4E 05 F1 | 	add	fp, #4
12c64     A7 FC 61 FC | 	wrlong	result2, fp
12c68     04 4E 05 F1 | 	add	fp, #4
12c6c     A7 22 62 FC | 	wrlong	local03, fp
12c70                 | ' 
12c70                 | ' t2=pop()
12c70                 | ' t1=pop()
12c70                 | ' 
12c70                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
12c70     08 4E 85 F1 | 	sub	fp, #8
12c74     1D 22 0E F2 | 	cmp	local03, #29 wz
12c78     14 4E 05 A1 |  if_e	add	fp, #20
12c7c     A7 24 02 AB |  if_e	rdlong	local04, fp
12c80     14 4E 85 A1 |  if_e	sub	fp, #20
12c84     12 23 02 A6 |  if_e	mov	local03, local04
12c88     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12c8c     5C 00 90 5D |  if_ne	jmp	#LR__1491
12c90                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
12c90     0C 4E 05 F1 | 	add	fp, #12
12c94     A7 1E 02 FB | 	rdlong	local01, fp
12c98     0C 4E 85 F1 | 	sub	fp, #12
12c9c     A7 22 02 FB | 	rdlong	local03, fp
12ca0     11 1F 12 F2 | 	cmp	local01, local03 wc
12ca4     1C 00 90 3D |  if_ae	jmp	#LR__1490
12ca8     A7 1E 02 FB | 	rdlong	local01, fp
12cac     0C 4E 05 F1 | 	add	fp, #12
12cb0     A7 20 02 FB | 	rdlong	local02, fp
12cb4     0C 4E 85 F1 | 	sub	fp, #12
12cb8     10 1F 82 F1 | 	sub	local01, local02
12cbc     A7 1E 62 FC | 	wrlong	local01, fp
12cc0     F4 02 90 FD | 	jmp	#LR__1500
12cc4                 | LR__1490
12cc4     A7 1E 02 FB | 	rdlong	local01, fp
12cc8     0C 4E 05 F1 | 	add	fp, #12
12ccc     A7 20 02 FB | 	rdlong	local02, fp
12cd0     0C 4E 85 F1 | 	sub	fp, #12
12cd4     10 1F 82 F1 | 	sub	local01, local02
12cd8     A7 1E 62 FC | 	wrlong	local01, fp
12cdc     08 4E 05 F1 | 	add	fp, #8
12ce0     A7 38 68 FC | 	wrlong	#28, fp
12ce4     08 4E 85 F1 | 	sub	fp, #8
12ce8     CC 02 90 FD | 	jmp	#LR__1500
12cec                 | LR__1491
12cec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
12cec     08 4E 05 F1 | 	add	fp, #8
12cf0     A7 1E 02 FB | 	rdlong	local01, fp
12cf4     08 4E 85 F1 | 	sub	fp, #8
12cf8     1D 1E 0E F2 | 	cmp	local01, #29 wz
12cfc     14 4E 05 A1 |  if_e	add	fp, #20
12d00     A7 24 02 AB |  if_e	rdlong	local04, fp
12d04     14 4E 85 A1 |  if_e	sub	fp, #20
12d08     12 23 02 A6 |  if_e	mov	local03, local04
12d0c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12d10     28 00 90 5D |  if_ne	jmp	#LR__1492
12d14     A7 1E 02 FB | 	rdlong	local01, fp
12d18     0C 4E 05 F1 | 	add	fp, #12
12d1c     A7 20 02 FB | 	rdlong	local02, fp
12d20     0C 4E 85 F1 | 	sub	fp, #12
12d24     10 1F 82 F1 | 	sub	local01, local02
12d28     A7 1E 62 FC | 	wrlong	local01, fp
12d2c     08 4E 05 F1 | 	add	fp, #8
12d30     A7 38 68 FC | 	wrlong	#28, fp
12d34     08 4E 85 F1 | 	sub	fp, #8
12d38     7C 02 90 FD | 	jmp	#LR__1500
12d3c                 | LR__1492
12d3c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
12d3c     08 4E 05 F1 | 	add	fp, #8
12d40     A7 1E 02 FB | 	rdlong	local01, fp
12d44     08 4E 85 F1 | 	sub	fp, #8
12d48     1D 1E 0E F2 | 	cmp	local01, #29 wz
12d4c     14 4E 05 A1 |  if_e	add	fp, #20
12d50     A7 24 02 AB |  if_e	rdlong	local04, fp
12d54     14 4E 85 A1 |  if_e	sub	fp, #20
12d58     12 23 02 A6 |  if_e	mov	local03, local04
12d5c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12d60     34 00 90 5D |  if_ne	jmp	#LR__1493
12d64     A7 12 02 FB | 	rdlong	arg01, fp
12d68     6C 03 B1 FD | 	call	#__system___float_fromuns
12d6c     FD 12 02 F6 | 	mov	arg01, result1
12d70     0C 4E 05 F1 | 	add	fp, #12
12d74     A7 14 02 FB | 	rdlong	arg02, fp
12d78     0C 4E 85 F1 | 	sub	fp, #12
12d7c     1F 14 E6 F4 | 	bitnot	arg02, #31
12d80     88 03 B1 FD | 	call	#__system___float_add
12d84     A7 FA 61 FC | 	wrlong	result1, fp
12d88     08 4E 05 F1 | 	add	fp, #8
12d8c     A7 3C 68 FC | 	wrlong	#30, fp
12d90     08 4E 85 F1 | 	sub	fp, #8
12d94     20 02 90 FD | 	jmp	#LR__1500
12d98                 | LR__1493
12d98                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
12d98     08 4E 05 F1 | 	add	fp, #8
12d9c     A7 1E 02 FB | 	rdlong	local01, fp
12da0     08 4E 85 F1 | 	sub	fp, #8
12da4     1C 1E 0E F2 | 	cmp	local01, #28 wz
12da8     14 4E 05 A1 |  if_e	add	fp, #20
12dac     A7 24 02 AB |  if_e	rdlong	local04, fp
12db0     14 4E 85 A1 |  if_e	sub	fp, #20
12db4     12 23 02 A6 |  if_e	mov	local03, local04
12db8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12dbc     1C 00 90 5D |  if_ne	jmp	#LR__1494
12dc0     A7 1E 02 FB | 	rdlong	local01, fp
12dc4     0C 4E 05 F1 | 	add	fp, #12
12dc8     A7 20 02 FB | 	rdlong	local02, fp
12dcc     0C 4E 85 F1 | 	sub	fp, #12
12dd0     10 1F 82 F1 | 	sub	local01, local02
12dd4     A7 1E 62 FC | 	wrlong	local01, fp
12dd8     DC 01 90 FD | 	jmp	#LR__1500
12ddc                 | LR__1494
12ddc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
12ddc     08 4E 05 F1 | 	add	fp, #8
12de0     A7 1E 02 FB | 	rdlong	local01, fp
12de4     08 4E 85 F1 | 	sub	fp, #8
12de8     1C 1E 0E F2 | 	cmp	local01, #28 wz
12dec     14 4E 05 A1 |  if_e	add	fp, #20
12df0     A7 24 02 AB |  if_e	rdlong	local04, fp
12df4     14 4E 85 A1 |  if_e	sub	fp, #20
12df8     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
12dfc     1C 00 90 5D |  if_ne	jmp	#LR__1495
12e00     A7 1E 02 FB | 	rdlong	local01, fp
12e04     0C 4E 05 F1 | 	add	fp, #12
12e08     A7 20 02 FB | 	rdlong	local02, fp
12e0c     0C 4E 85 F1 | 	sub	fp, #12
12e10     10 1F 82 F1 | 	sub	local01, local02
12e14     A7 1E 62 FC | 	wrlong	local01, fp
12e18     9C 01 90 FD | 	jmp	#LR__1500
12e1c                 | LR__1495
12e1c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
12e1c     08 4E 05 F1 | 	add	fp, #8
12e20     A7 1E 02 FB | 	rdlong	local01, fp
12e24     08 4E 85 F1 | 	sub	fp, #8
12e28     1C 1E 0E F2 | 	cmp	local01, #28 wz
12e2c     14 4E 05 A1 |  if_e	add	fp, #20
12e30     A7 22 02 AB |  if_e	rdlong	local03, fp
12e34     14 4E 85 A1 |  if_e	sub	fp, #20
12e38     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12e3c     44 00 90 5D |  if_ne	jmp	#LR__1496
12e40     A7 12 02 FB | 	rdlong	arg01, fp
12e44     09 13 52 F6 | 	abs	arg01, arg01 wc
12e48     1F 26 C6 C9 |  if_b	decod	local05, #31
12e4c     00 26 06 36 |  if_ae	mov	local05, #0
12e50     84 02 B1 FD | 	call	#__system___float_fromuns
12e54     13 FB 61 F5 | 	xor	result1, local05
12e58     FD 12 02 F6 | 	mov	arg01, result1
12e5c     0C 4E 05 F1 | 	add	fp, #12
12e60     A7 14 02 FB | 	rdlong	arg02, fp
12e64     0C 4E 85 F1 | 	sub	fp, #12
12e68     1F 14 E6 F4 | 	bitnot	arg02, #31
12e6c     9C 02 B1 FD | 	call	#__system___float_add
12e70     A7 FA 61 FC | 	wrlong	result1, fp
12e74     08 4E 05 F1 | 	add	fp, #8
12e78     A7 3C 68 FC | 	wrlong	#30, fp
12e7c     08 4E 85 F1 | 	sub	fp, #8
12e80     34 01 90 FD | 	jmp	#LR__1500
12e84                 | LR__1496
12e84                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
12e84     08 4E 05 F1 | 	add	fp, #8
12e88     A7 1E 02 FB | 	rdlong	local01, fp
12e8c     08 4E 85 F1 | 	sub	fp, #8
12e90     1E 1E 0E F2 | 	cmp	local01, #30 wz
12e94     14 4E 05 A1 |  if_e	add	fp, #20
12e98     A7 22 02 AB |  if_e	rdlong	local03, fp
12e9c     14 4E 85 A1 |  if_e	sub	fp, #20
12ea0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12ea4     2C 00 90 5D |  if_ne	jmp	#LR__1497
12ea8     A7 1E 02 FB | 	rdlong	local01, fp
12eac     0C 4E 05 F1 | 	add	fp, #12
12eb0     A7 12 02 FB | 	rdlong	arg01, fp
12eb4     0C 4E 85 F1 | 	sub	fp, #12
12eb8     1C 02 B1 FD | 	call	#__system___float_fromuns
12ebc     FD 14 02 F6 | 	mov	arg02, result1
12ec0     0F 13 02 F6 | 	mov	arg01, local01
12ec4     1F 14 E6 F4 | 	bitnot	arg02, #31
12ec8     40 02 B1 FD | 	call	#__system___float_add
12ecc     A7 FA 61 FC | 	wrlong	result1, fp
12ed0     E4 00 90 FD | 	jmp	#LR__1500
12ed4                 | LR__1497
12ed4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
12ed4     08 4E 05 F1 | 	add	fp, #8
12ed8     A7 1E 02 FB | 	rdlong	local01, fp
12edc     08 4E 85 F1 | 	sub	fp, #8
12ee0     1E 1E 0E F2 | 	cmp	local01, #30 wz
12ee4     14 4E 05 A1 |  if_e	add	fp, #20
12ee8     A7 22 02 AB |  if_e	rdlong	local03, fp
12eec     14 4E 85 A1 |  if_e	sub	fp, #20
12ef0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12ef4     3C 00 90 5D |  if_ne	jmp	#LR__1498
12ef8     A7 1E 02 FB | 	rdlong	local01, fp
12efc     0C 4E 05 F1 | 	add	fp, #12
12f00     A7 12 02 FB | 	rdlong	arg01, fp
12f04     0C 4E 85 F1 | 	sub	fp, #12
12f08     09 13 52 F6 | 	abs	arg01, arg01 wc
12f0c     1F 26 C6 C9 |  if_b	decod	local05, #31
12f10     00 26 06 36 |  if_ae	mov	local05, #0
12f14     C0 01 B1 FD | 	call	#__system___float_fromuns
12f18     13 FB 61 F5 | 	xor	result1, local05
12f1c     FD 14 02 F6 | 	mov	arg02, result1
12f20     0F 13 02 F6 | 	mov	arg01, local01
12f24     1F 14 E6 F4 | 	bitnot	arg02, #31
12f28     E0 01 B1 FD | 	call	#__system___float_add
12f2c     A7 FA 61 FC | 	wrlong	result1, fp
12f30     84 00 90 FD | 	jmp	#LR__1500
12f34                 | LR__1498
12f34                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
12f34     08 4E 05 F1 | 	add	fp, #8
12f38     A7 1E 02 FB | 	rdlong	local01, fp
12f3c     08 4E 85 F1 | 	sub	fp, #8
12f40     1E 1E 0E F2 | 	cmp	local01, #30 wz
12f44     14 4E 05 A1 |  if_e	add	fp, #20
12f48     A7 22 02 AB |  if_e	rdlong	local03, fp
12f4c     14 4E 85 A1 |  if_e	sub	fp, #20
12f50     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12f54     20 00 90 5D |  if_ne	jmp	#LR__1499
12f58     A7 12 02 FB | 	rdlong	arg01, fp
12f5c     0C 4E 05 F1 | 	add	fp, #12
12f60     A7 14 02 FB | 	rdlong	arg02, fp
12f64     0C 4E 85 F1 | 	sub	fp, #12
12f68     1F 14 E6 F4 | 	bitnot	arg02, #31
12f6c     9C 01 B1 FD | 	call	#__system___float_add
12f70     A7 FA 61 FC | 	wrlong	result1, fp
12f74     40 00 90 FD | 	jmp	#LR__1500
12f78                 | LR__1499
12f78                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
12f78     08 4E 05 F1 | 	add	fp, #8
12f7c     A7 1E 02 FB | 	rdlong	local01, fp
12f80     08 4E 85 F1 | 	sub	fp, #8
12f84     1F 1E 0E F2 | 	cmp	local01, #31 wz
12f88     14 4E 05 51 |  if_ne	add	fp, #20
12f8c     A7 22 02 5B |  if_ne	rdlong	local03, fp
12f90     14 4E 85 51 |  if_ne	sub	fp, #20
12f94     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
12f98     A7 06 68 AC |  if_e	wrlong	#3, fp
12f9c     08 4E 05 A1 |  if_e	add	fp, #8
12fa0     A7 FE 69 AC |  if_e	wrlong	#255, fp
12fa4     08 4E 85 A1 |  if_e	sub	fp, #8
12fa8     A7 0A 68 5C |  if_ne	wrlong	#5, fp
12fac     08 4E 05 51 |  if_ne	add	fp, #8
12fb0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
12fb4     08 4E 85 51 |  if_ne	sub	fp, #8
12fb8                 | LR__1500
12fb8     A7 12 02 F6 | 	mov	arg01, fp
12fbc     70 8C BF FD | 	call	#_push
12fc0     A7 F0 03 F6 | 	mov	ptra, fp
12fc4     B2 00 A0 FD | 	call	#popregs_
12fc8                 | _do_minus_ret
12fc8     2D 00 64 FD | 	ret
12fcc                 | 
12fcc                 | ' 
12fcc                 | ' sub do_and 
12fcc                 | _do_and
12fcc     03 4A 05 F6 | 	mov	COUNT_, #3
12fd0     A8 00 A0 FD | 	call	#pushregs_
12fd4     18 F0 07 F1 | 	add	ptra, #24
12fd8     BC 8B BF FD | 	call	#_pop
12fdc     FD 12 02 F6 | 	mov	arg01, result1
12fe0     FE 1E 02 F6 | 	mov	local01, result2
12fe4     FF 20 02 F6 | 	mov	local02, result3
12fe8     0C 4E 05 F1 | 	add	fp, #12
12fec     A7 12 62 FC | 	wrlong	arg01, fp
12ff0     04 4E 05 F1 | 	add	fp, #4
12ff4     A7 1E 62 FC | 	wrlong	local01, fp
12ff8     04 4E 05 F1 | 	add	fp, #4
12ffc     A7 20 62 FC | 	wrlong	local02, fp
13000     14 4E 85 F1 | 	sub	fp, #20
13004     90 8B BF FD | 	call	#_pop
13008     FF 22 02 F6 | 	mov	local03, result3
1300c     A7 FA 61 FC | 	wrlong	result1, fp
13010     04 4E 05 F1 | 	add	fp, #4
13014     A7 FC 61 FC | 	wrlong	result2, fp
13018     04 4E 05 F1 | 	add	fp, #4
1301c     A7 22 62 FC | 	wrlong	local03, fp
13020                 | ' 
13020                 | ' t2=pop()
13020                 | ' t1=pop()
13020                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
13020     08 4E 85 F1 | 	sub	fp, #8
13024     1C 22 0E F2 | 	cmp	local03, #28 wz
13028     A7 22 02 AB |  if_e	rdlong	local03, fp
1302c     A7 22 62 AC |  if_e	wrlong	local03, fp
13030     08 4E 05 A1 |  if_e	add	fp, #8
13034     A7 3A 68 AC |  if_e	wrlong	#29, fp
13038     08 4E 85 A1 |  if_e	sub	fp, #8
1303c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1303c     14 4E 05 F1 | 	add	fp, #20
13040     A7 22 02 FB | 	rdlong	local03, fp
13044     14 4E 85 F1 | 	sub	fp, #20
13048     1C 22 0E F2 | 	cmp	local03, #28 wz
1304c     18 00 90 5D |  if_ne	jmp	#LR__1510
13050     0C 4E 05 F1 | 	add	fp, #12
13054     A7 22 02 FB | 	rdlong	local03, fp
13058     A7 22 62 FC | 	wrlong	local03, fp
1305c     08 4E 05 F1 | 	add	fp, #8
13060     A7 3A 68 FC | 	wrlong	#29, fp
13064     14 4E 85 F1 | 	sub	fp, #20
13068                 | LR__1510
13068                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
13068     08 4E 05 F1 | 	add	fp, #8
1306c     A7 22 02 FB | 	rdlong	local03, fp
13070     08 4E 85 F1 | 	sub	fp, #8
13074     1F 22 0E F2 | 	cmp	local03, #31 wz
13078     14 4E 05 51 |  if_ne	add	fp, #20
1307c     A7 20 02 5B |  if_ne	rdlong	local02, fp
13080     14 4E 85 51 |  if_ne	sub	fp, #20
13084     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
13088     08 4E 05 51 |  if_ne	add	fp, #8
1308c     A7 22 02 5B |  if_ne	rdlong	local03, fp
13090     08 4E 85 51 |  if_ne	sub	fp, #8
13094     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
13098     14 4E 05 51 |  if_ne	add	fp, #20
1309c     14 4E 85 51 |  if_ne	sub	fp, #20
130a0     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
130a4     A7 0C 68 AC |  if_e	wrlong	#6, fp
130a8     08 4E 05 A1 |  if_e	add	fp, #8
130ac     A7 FE 69 AC |  if_e	wrlong	#255, fp
130b0     08 4E 85 A1 |  if_e	sub	fp, #8
130b4     18 00 90 AD |  if_e	jmp	#LR__1511
130b8     A7 22 02 FB | 	rdlong	local03, fp
130bc     0C 4E 05 F1 | 	add	fp, #12
130c0     A7 1E 02 FB | 	rdlong	local01, fp
130c4     0C 4E 85 F1 | 	sub	fp, #12
130c8     0F 23 02 F5 | 	and	local03, local01
130cc     A7 22 62 FC | 	wrlong	local03, fp
130d0                 | LR__1511
130d0     A7 12 02 F6 | 	mov	arg01, fp
130d4     58 8B BF FD | 	call	#_push
130d8     A7 F0 03 F6 | 	mov	ptra, fp
130dc     B2 00 A0 FD | 	call	#popregs_
130e0                 | _do_and_ret
130e0     2D 00 64 FD | 	ret
130e4                 | 
130e4                 | ' 
130e4                 | ' sub do_or 
130e4                 | _do_or
130e4     03 4A 05 F6 | 	mov	COUNT_, #3
130e8     A8 00 A0 FD | 	call	#pushregs_
130ec     18 F0 07 F1 | 	add	ptra, #24
130f0     A4 8A BF FD | 	call	#_pop
130f4     FD 12 02 F6 | 	mov	arg01, result1
130f8     FE 1E 02 F6 | 	mov	local01, result2
130fc     FF 20 02 F6 | 	mov	local02, result3
13100     0C 4E 05 F1 | 	add	fp, #12
13104     A7 12 62 FC | 	wrlong	arg01, fp
13108     04 4E 05 F1 | 	add	fp, #4
1310c     A7 1E 62 FC | 	wrlong	local01, fp
13110     04 4E 05 F1 | 	add	fp, #4
13114     A7 20 62 FC | 	wrlong	local02, fp
13118     14 4E 85 F1 | 	sub	fp, #20
1311c     78 8A BF FD | 	call	#_pop
13120     FF 22 02 F6 | 	mov	local03, result3
13124     A7 FA 61 FC | 	wrlong	result1, fp
13128     04 4E 05 F1 | 	add	fp, #4
1312c     A7 FC 61 FC | 	wrlong	result2, fp
13130     04 4E 05 F1 | 	add	fp, #4
13134     A7 22 62 FC | 	wrlong	local03, fp
13138                 | ' 
13138                 | ' t2=pop()
13138                 | ' t1=pop()
13138                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
13138     08 4E 85 F1 | 	sub	fp, #8
1313c     1C 22 0E F2 | 	cmp	local03, #28 wz
13140     A7 22 02 AB |  if_e	rdlong	local03, fp
13144     A7 22 62 AC |  if_e	wrlong	local03, fp
13148     08 4E 05 A1 |  if_e	add	fp, #8
1314c     A7 3A 68 AC |  if_e	wrlong	#29, fp
13150     08 4E 85 A1 |  if_e	sub	fp, #8
13154                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
13154     14 4E 05 F1 | 	add	fp, #20
13158     A7 22 02 FB | 	rdlong	local03, fp
1315c     14 4E 85 F1 | 	sub	fp, #20
13160     1C 22 0E F2 | 	cmp	local03, #28 wz
13164     18 00 90 5D |  if_ne	jmp	#LR__1520
13168     0C 4E 05 F1 | 	add	fp, #12
1316c     A7 22 02 FB | 	rdlong	local03, fp
13170     A7 22 62 FC | 	wrlong	local03, fp
13174     08 4E 05 F1 | 	add	fp, #8
13178     A7 3A 68 FC | 	wrlong	#29, fp
1317c     14 4E 85 F1 | 	sub	fp, #20
13180                 | LR__1520
13180                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
13180     08 4E 05 F1 | 	add	fp, #8
13184     A7 22 02 FB | 	rdlong	local03, fp
13188     08 4E 85 F1 | 	sub	fp, #8
1318c     1F 22 0E F2 | 	cmp	local03, #31 wz
13190     14 4E 05 51 |  if_ne	add	fp, #20
13194     A7 20 02 5B |  if_ne	rdlong	local02, fp
13198     14 4E 85 51 |  if_ne	sub	fp, #20
1319c     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
131a0     08 4E 05 51 |  if_ne	add	fp, #8
131a4     A7 22 02 5B |  if_ne	rdlong	local03, fp
131a8     08 4E 85 51 |  if_ne	sub	fp, #8
131ac     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
131b0     14 4E 05 51 |  if_ne	add	fp, #20
131b4     14 4E 85 51 |  if_ne	sub	fp, #20
131b8     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
131bc     A7 0C 68 AC |  if_e	wrlong	#6, fp
131c0     08 4E 05 A1 |  if_e	add	fp, #8
131c4     A7 FE 69 AC |  if_e	wrlong	#255, fp
131c8     08 4E 85 A1 |  if_e	sub	fp, #8
131cc     18 00 90 AD |  if_e	jmp	#LR__1521
131d0     A7 22 02 FB | 	rdlong	local03, fp
131d4     0C 4E 05 F1 | 	add	fp, #12
131d8     A7 1E 02 FB | 	rdlong	local01, fp
131dc     0C 4E 85 F1 | 	sub	fp, #12
131e0     0F 23 42 F5 | 	or	local03, local01
131e4     A7 22 62 FC | 	wrlong	local03, fp
131e8                 | LR__1521
131e8     A7 12 02 F6 | 	mov	arg01, fp
131ec     40 8A BF FD | 	call	#_push
131f0     A7 F0 03 F6 | 	mov	ptra, fp
131f4     B2 00 A0 FD | 	call	#popregs_
131f8                 | _do_or_ret
131f8     2D 00 64 FD | 	ret
131fc                 | 
131fc                 | ' 
131fc                 | ' sub do_mul
131fc                 | _do_mul
131fc     05 4A 05 F6 | 	mov	COUNT_, #5
13200     A8 00 A0 FD | 	call	#pushregs_
13204     18 F0 07 F1 | 	add	ptra, #24
13208     8C 89 BF FD | 	call	#_pop
1320c     FD 1E 02 F6 | 	mov	local01, result1
13210     FE 20 02 F6 | 	mov	local02, result2
13214     FF 22 02 F6 | 	mov	local03, result3
13218     0C 4E 05 F1 | 	add	fp, #12
1321c     A7 1E 62 FC | 	wrlong	local01, fp
13220     04 4E 05 F1 | 	add	fp, #4
13224     A7 20 62 FC | 	wrlong	local02, fp
13228     04 4E 05 F1 | 	add	fp, #4
1322c     A7 22 62 FC | 	wrlong	local03, fp
13230     14 4E 85 F1 | 	sub	fp, #20
13234     60 89 BF FD | 	call	#_pop
13238     FF 22 02 F6 | 	mov	local03, result3
1323c     A7 FA 61 FC | 	wrlong	result1, fp
13240     04 4E 05 F1 | 	add	fp, #4
13244     A7 FC 61 FC | 	wrlong	result2, fp
13248     04 4E 05 F1 | 	add	fp, #4
1324c     A7 22 62 FC | 	wrlong	local03, fp
13250                 | ' 
13250                 | ' t2=pop()
13250                 | ' t1=pop()
13250                 | ' 
13250                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
13250     08 4E 85 F1 | 	sub	fp, #8
13254     1D 22 0E F2 | 	cmp	local03, #29 wz
13258     14 4E 05 A1 |  if_e	add	fp, #20
1325c     A7 24 02 AB |  if_e	rdlong	local04, fp
13260     14 4E 85 A1 |  if_e	sub	fp, #20
13264     12 23 02 A6 |  if_e	mov	local03, local04
13268     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1326c     20 00 90 5D |  if_ne	jmp	#LR__1530
13270     A7 20 02 FB | 	rdlong	local02, fp
13274     0C 4E 05 F1 | 	add	fp, #12
13278     A7 22 02 FB | 	rdlong	local03, fp
1327c     11 21 02 FD | 	qmul	local02, local03
13280     0C 4E 85 F1 | 	sub	fp, #12
13284     18 1E 62 FD | 	getqx	local01
13288     A7 1E 62 FC | 	wrlong	local01, fp
1328c     C4 02 90 FD | 	jmp	#LR__1539
13290                 | LR__1530
13290                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
13290     08 4E 05 F1 | 	add	fp, #8
13294     A7 1E 02 FB | 	rdlong	local01, fp
13298     08 4E 85 F1 | 	sub	fp, #8
1329c     1D 1E 0E F2 | 	cmp	local01, #29 wz
132a0     14 4E 05 A1 |  if_e	add	fp, #20
132a4     A7 24 02 AB |  if_e	rdlong	local04, fp
132a8     14 4E 85 A1 |  if_e	sub	fp, #20
132ac     12 23 02 A6 |  if_e	mov	local03, local04
132b0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
132b4     2C 00 90 5D |  if_ne	jmp	#LR__1531
132b8     A7 20 02 FB | 	rdlong	local02, fp
132bc     0C 4E 05 F1 | 	add	fp, #12
132c0     A7 22 02 FB | 	rdlong	local03, fp
132c4     11 21 02 FD | 	qmul	local02, local03
132c8     0C 4E 85 F1 | 	sub	fp, #12
132cc     18 1E 62 FD | 	getqx	local01
132d0     A7 1E 62 FC | 	wrlong	local01, fp
132d4     08 4E 05 F1 | 	add	fp, #8
132d8     A7 38 68 FC | 	wrlong	#28, fp
132dc     08 4E 85 F1 | 	sub	fp, #8
132e0     70 02 90 FD | 	jmp	#LR__1539
132e4                 | LR__1531
132e4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
132e4     08 4E 05 F1 | 	add	fp, #8
132e8     A7 1E 02 FB | 	rdlong	local01, fp
132ec     08 4E 85 F1 | 	sub	fp, #8
132f0     1D 1E 0E F2 | 	cmp	local01, #29 wz
132f4     14 4E 05 A1 |  if_e	add	fp, #20
132f8     A7 24 02 AB |  if_e	rdlong	local04, fp
132fc     14 4E 85 A1 |  if_e	sub	fp, #20
13300     12 23 02 A6 |  if_e	mov	local03, local04
13304     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13308     30 00 90 5D |  if_ne	jmp	#LR__1532
1330c     A7 12 02 FB | 	rdlong	arg01, fp
13310     C4 FD B0 FD | 	call	#__system___float_fromuns
13314     FD 12 02 F6 | 	mov	arg01, result1
13318     0C 4E 05 F1 | 	add	fp, #12
1331c     A7 14 02 FB | 	rdlong	arg02, fp
13320     0C 4E 85 F1 | 	sub	fp, #12
13324     B4 01 B1 FD | 	call	#__system___float_mul
13328     A7 FA 61 FC | 	wrlong	result1, fp
1332c     08 4E 05 F1 | 	add	fp, #8
13330     A7 3C 68 FC | 	wrlong	#30, fp
13334     08 4E 85 F1 | 	sub	fp, #8
13338     18 02 90 FD | 	jmp	#LR__1539
1333c                 | LR__1532
1333c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1333c     08 4E 05 F1 | 	add	fp, #8
13340     A7 1E 02 FB | 	rdlong	local01, fp
13344     08 4E 85 F1 | 	sub	fp, #8
13348     1C 1E 0E F2 | 	cmp	local01, #28 wz
1334c     14 4E 05 A1 |  if_e	add	fp, #20
13350     A7 24 02 AB |  if_e	rdlong	local04, fp
13354     14 4E 85 A1 |  if_e	sub	fp, #20
13358     12 23 02 A6 |  if_e	mov	local03, local04
1335c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
13360     20 00 90 5D |  if_ne	jmp	#LR__1533
13364     A7 20 02 FB | 	rdlong	local02, fp
13368     0C 4E 05 F1 | 	add	fp, #12
1336c     A7 22 02 FB | 	rdlong	local03, fp
13370     11 21 02 FD | 	qmul	local02, local03
13374     0C 4E 85 F1 | 	sub	fp, #12
13378     18 1E 62 FD | 	getqx	local01
1337c     A7 1E 62 FC | 	wrlong	local01, fp
13380     D0 01 90 FD | 	jmp	#LR__1539
13384                 | LR__1533
13384                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
13384     08 4E 05 F1 | 	add	fp, #8
13388     A7 1E 02 FB | 	rdlong	local01, fp
1338c     08 4E 85 F1 | 	sub	fp, #8
13390     1C 1E 0E F2 | 	cmp	local01, #28 wz
13394     14 4E 05 A1 |  if_e	add	fp, #20
13398     A7 24 02 AB |  if_e	rdlong	local04, fp
1339c     14 4E 85 A1 |  if_e	sub	fp, #20
133a0     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
133a4     20 00 90 5D |  if_ne	jmp	#LR__1534
133a8     A7 20 02 FB | 	rdlong	local02, fp
133ac     0C 4E 05 F1 | 	add	fp, #12
133b0     A7 22 02 FB | 	rdlong	local03, fp
133b4     11 21 02 FD | 	qmul	local02, local03
133b8     0C 4E 85 F1 | 	sub	fp, #12
133bc     18 1E 62 FD | 	getqx	local01
133c0     A7 1E 62 FC | 	wrlong	local01, fp
133c4     8C 01 90 FD | 	jmp	#LR__1539
133c8                 | LR__1534
133c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
133c8     08 4E 05 F1 | 	add	fp, #8
133cc     A7 1E 02 FB | 	rdlong	local01, fp
133d0     08 4E 85 F1 | 	sub	fp, #8
133d4     1C 1E 0E F2 | 	cmp	local01, #28 wz
133d8     14 4E 05 A1 |  if_e	add	fp, #20
133dc     A7 22 02 AB |  if_e	rdlong	local03, fp
133e0     14 4E 85 A1 |  if_e	sub	fp, #20
133e4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
133e8     40 00 90 5D |  if_ne	jmp	#LR__1535
133ec     A7 12 02 FB | 	rdlong	arg01, fp
133f0     09 13 52 F6 | 	abs	arg01, arg01 wc
133f4     1F 26 C6 C9 |  if_b	decod	local05, #31
133f8     00 26 06 36 |  if_ae	mov	local05, #0
133fc     D8 FC B0 FD | 	call	#__system___float_fromuns
13400     13 FB 61 F5 | 	xor	result1, local05
13404     FD 12 02 F6 | 	mov	arg01, result1
13408     0C 4E 05 F1 | 	add	fp, #12
1340c     A7 14 02 FB | 	rdlong	arg02, fp
13410     0C 4E 85 F1 | 	sub	fp, #12
13414     C4 00 B1 FD | 	call	#__system___float_mul
13418     A7 FA 61 FC | 	wrlong	result1, fp
1341c     08 4E 05 F1 | 	add	fp, #8
13420     A7 3C 68 FC | 	wrlong	#30, fp
13424     08 4E 85 F1 | 	sub	fp, #8
13428     28 01 90 FD | 	jmp	#LR__1539
1342c                 | LR__1535
1342c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1342c     08 4E 05 F1 | 	add	fp, #8
13430     A7 1E 02 FB | 	rdlong	local01, fp
13434     08 4E 85 F1 | 	sub	fp, #8
13438     1E 1E 0E F2 | 	cmp	local01, #30 wz
1343c     14 4E 05 A1 |  if_e	add	fp, #20
13440     A7 22 02 AB |  if_e	rdlong	local03, fp
13444     14 4E 85 A1 |  if_e	sub	fp, #20
13448     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1344c     28 00 90 5D |  if_ne	jmp	#LR__1536
13450     A7 1E 02 FB | 	rdlong	local01, fp
13454     0C 4E 05 F1 | 	add	fp, #12
13458     A7 12 02 FB | 	rdlong	arg01, fp
1345c     0C 4E 85 F1 | 	sub	fp, #12
13460     74 FC B0 FD | 	call	#__system___float_fromuns
13464     FD 14 02 F6 | 	mov	arg02, result1
13468     0F 13 02 F6 | 	mov	arg01, local01
1346c     6C 00 B1 FD | 	call	#__system___float_mul
13470     A7 FA 61 FC | 	wrlong	result1, fp
13474     DC 00 90 FD | 	jmp	#LR__1539
13478                 | LR__1536
13478                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
13478     08 4E 05 F1 | 	add	fp, #8
1347c     A7 1E 02 FB | 	rdlong	local01, fp
13480     08 4E 85 F1 | 	sub	fp, #8
13484     1E 1E 0E F2 | 	cmp	local01, #30 wz
13488     14 4E 05 A1 |  if_e	add	fp, #20
1348c     A7 22 02 AB |  if_e	rdlong	local03, fp
13490     14 4E 85 A1 |  if_e	sub	fp, #20
13494     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13498     38 00 90 5D |  if_ne	jmp	#LR__1537
1349c     A7 1E 02 FB | 	rdlong	local01, fp
134a0     0C 4E 05 F1 | 	add	fp, #12
134a4     A7 12 02 FB | 	rdlong	arg01, fp
134a8     0C 4E 85 F1 | 	sub	fp, #12
134ac     09 13 52 F6 | 	abs	arg01, arg01 wc
134b0     1F 26 C6 C9 |  if_b	decod	local05, #31
134b4     00 26 06 36 |  if_ae	mov	local05, #0
134b8     1C FC B0 FD | 	call	#__system___float_fromuns
134bc     13 FB 61 F5 | 	xor	result1, local05
134c0     FD 14 02 F6 | 	mov	arg02, result1
134c4     0F 13 02 F6 | 	mov	arg01, local01
134c8     10 00 B1 FD | 	call	#__system___float_mul
134cc     A7 FA 61 FC | 	wrlong	result1, fp
134d0     80 00 90 FD | 	jmp	#LR__1539
134d4                 | LR__1537
134d4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
134d4     08 4E 05 F1 | 	add	fp, #8
134d8     A7 1E 02 FB | 	rdlong	local01, fp
134dc     08 4E 85 F1 | 	sub	fp, #8
134e0     1E 1E 0E F2 | 	cmp	local01, #30 wz
134e4     14 4E 05 A1 |  if_e	add	fp, #20
134e8     A7 22 02 AB |  if_e	rdlong	local03, fp
134ec     14 4E 85 A1 |  if_e	sub	fp, #20
134f0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
134f4     1C 00 90 5D |  if_ne	jmp	#LR__1538
134f8     A7 12 02 FB | 	rdlong	arg01, fp
134fc     0C 4E 05 F1 | 	add	fp, #12
13500     A7 14 02 FB | 	rdlong	arg02, fp
13504     0C 4E 85 F1 | 	sub	fp, #12
13508     D0 FF B0 FD | 	call	#__system___float_mul
1350c     A7 FA 61 FC | 	wrlong	result1, fp
13510     40 00 90 FD | 	jmp	#LR__1539
13514                 | LR__1538
13514                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
13514     08 4E 05 F1 | 	add	fp, #8
13518     A7 1E 02 FB | 	rdlong	local01, fp
1351c     08 4E 85 F1 | 	sub	fp, #8
13520     1F 1E 0E F2 | 	cmp	local01, #31 wz
13524     14 4E 05 51 |  if_ne	add	fp, #20
13528     A7 22 02 5B |  if_ne	rdlong	local03, fp
1352c     14 4E 85 51 |  if_ne	sub	fp, #20
13530     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
13534     A7 10 68 AC |  if_e	wrlong	#8, fp
13538     08 4E 05 A1 |  if_e	add	fp, #8
1353c     A7 FE 69 AC |  if_e	wrlong	#255, fp
13540     08 4E 85 A1 |  if_e	sub	fp, #8
13544     A7 12 68 5C |  if_ne	wrlong	#9, fp
13548     08 4E 05 51 |  if_ne	add	fp, #8
1354c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
13550     08 4E 85 51 |  if_ne	sub	fp, #8
13554                 | LR__1539
13554     A7 12 02 F6 | 	mov	arg01, fp
13558     D4 86 BF FD | 	call	#_push
1355c     A7 F0 03 F6 | 	mov	ptra, fp
13560     B2 00 A0 FD | 	call	#popregs_
13564                 | _do_mul_ret
13564     2D 00 64 FD | 	ret
13568                 | 
13568                 | ' 
13568                 | ' sub do_div 
13568                 | _do_div
13568     01 4A 05 F6 | 	mov	COUNT_, #1
1356c     A8 00 A0 FD | 	call	#pushregs_
13570     18 F0 07 F1 | 	add	ptra, #24
13574     20 86 BF FD | 	call	#_pop
13578     FD 66 02 F6 | 	mov	muldivb_, result1
1357c     FE 64 02 F6 | 	mov	muldiva_, result2
13580     FF 1E 02 F6 | 	mov	local01, result3
13584     0C 4E 05 F1 | 	add	fp, #12
13588     A7 66 62 FC | 	wrlong	muldivb_, fp
1358c     04 4E 05 F1 | 	add	fp, #4
13590     A7 64 62 FC | 	wrlong	muldiva_, fp
13594     04 4E 05 F1 | 	add	fp, #4
13598     A7 1E 62 FC | 	wrlong	local01, fp
1359c     14 4E 85 F1 | 	sub	fp, #20
135a0     F4 85 BF FD | 	call	#_pop
135a4     A7 FA 61 FC | 	wrlong	result1, fp
135a8     04 4E 05 F1 | 	add	fp, #4
135ac     A7 FC 61 FC | 	wrlong	result2, fp
135b0     04 4E 05 F1 | 	add	fp, #4
135b4     A7 FE 61 FC | 	wrlong	result3, fp
135b8                 | ' 
135b8                 | ' t2=pop()
135b8                 | ' t1=pop()
135b8                 | ' 
135b8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
135b8     08 4E 85 F1 | 	sub	fp, #8
135bc     1F FE 0D F2 | 	cmp	result3, #31 wz
135c0     14 4E 05 51 |  if_ne	add	fp, #20
135c4     A7 12 02 5B |  if_ne	rdlong	arg01, fp
135c8     14 4E 85 51 |  if_ne	sub	fp, #20
135cc     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
135d0     A7 14 68 AC |  if_e	wrlong	#10, fp
135d4     08 4E 05 A1 |  if_e	add	fp, #8
135d8     A7 FE 69 AC |  if_e	wrlong	#255, fp
135dc     08 4E 85 A1 |  if_e	sub	fp, #8
135e0     90 01 90 AD |  if_e	jmp	#LR__1546
135e4                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
135e4     08 4E 05 F1 | 	add	fp, #8
135e8     A7 66 02 FB | 	rdlong	muldivb_, fp
135ec     08 4E 85 F1 | 	sub	fp, #8
135f0     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
135f4     1C 00 90 5D |  if_ne	jmp	#LR__1540
135f8     08 4E 05 F1 | 	add	fp, #8
135fc     A7 38 68 FC | 	wrlong	#28, fp
13600     08 4E 85 F1 | 	sub	fp, #8
13604     A7 12 02 FB | 	rdlong	arg01, fp
13608     00 14 06 F6 | 	mov	arg02, #0
1360c     94 03 B1 FD | 	call	#__system___float_tointeger
13610     A7 FA 61 FC | 	wrlong	result1, fp
13614                 | LR__1540
13614                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
13614     14 4E 05 F1 | 	add	fp, #20
13618     A7 66 02 FB | 	rdlong	muldivb_, fp
1361c     14 4E 85 F1 | 	sub	fp, #20
13620     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
13624     28 00 90 5D |  if_ne	jmp	#LR__1541
13628     14 4E 05 F1 | 	add	fp, #20
1362c     A7 38 68 FC | 	wrlong	#28, fp
13630     08 4E 85 F1 | 	sub	fp, #8
13634     A7 12 02 FB | 	rdlong	arg01, fp
13638     0C 4E 85 F1 | 	sub	fp, #12
1363c     00 14 06 F6 | 	mov	arg02, #0
13640     60 03 B1 FD | 	call	#__system___float_tointeger
13644     0C 4E 05 F1 | 	add	fp, #12
13648     A7 FA 61 FC | 	wrlong	result1, fp
1364c     0C 4E 85 F1 | 	sub	fp, #12
13650                 | LR__1541
13650                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
13650     08 4E 05 F1 | 	add	fp, #8
13654     A7 66 02 FB | 	rdlong	muldivb_, fp
13658     08 4E 85 F1 | 	sub	fp, #8
1365c     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
13660     14 4E 05 A1 |  if_e	add	fp, #20
13664     A7 1E 02 AB |  if_e	rdlong	local01, fp
13668     14 4E 85 A1 |  if_e	sub	fp, #20
1366c     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
13670     20 00 90 5D |  if_ne	jmp	#LR__1542
13674     0C 4E 05 F1 | 	add	fp, #12
13678     A7 1E 02 FB | 	rdlong	local01, fp
1367c     0C 4E 85 F1 | 	sub	fp, #12
13680     A7 66 02 FB | 	rdlong	muldivb_, fp
13684     0F 67 12 FD | 	qdiv	muldivb_, local01
13688     18 1E 62 FD | 	getqx	local01
1368c     A7 1E 62 FC | 	wrlong	local01, fp
13690     E0 00 90 FD | 	jmp	#LR__1546
13694                 | LR__1542
13694                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
13694     08 4E 05 F1 | 	add	fp, #8
13698     A7 66 02 FB | 	rdlong	muldivb_, fp
1369c     08 4E 85 F1 | 	sub	fp, #8
136a0     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
136a4     14 4E 05 A1 |  if_e	add	fp, #20
136a8     A7 1E 02 AB |  if_e	rdlong	local01, fp
136ac     14 4E 85 A1 |  if_e	sub	fp, #20
136b0     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
136b4     2C 00 90 5D |  if_ne	jmp	#LR__1543
136b8     0C 4E 05 F1 | 	add	fp, #12
136bc     A7 1E 02 FB | 	rdlong	local01, fp
136c0     0C 4E 85 F1 | 	sub	fp, #12
136c4     A7 66 02 FB | 	rdlong	muldivb_, fp
136c8     0F 67 12 FD | 	qdiv	muldivb_, local01
136cc     18 1E 62 FD | 	getqx	local01
136d0     A7 1E 62 FC | 	wrlong	local01, fp
136d4     08 4E 05 F1 | 	add	fp, #8
136d8     A7 38 68 FC | 	wrlong	#28, fp
136dc     08 4E 85 F1 | 	sub	fp, #8
136e0     90 00 90 FD | 	jmp	#LR__1546
136e4                 | LR__1543
136e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
136e4     08 4E 05 F1 | 	add	fp, #8
136e8     A7 66 02 FB | 	rdlong	muldivb_, fp
136ec     08 4E 85 F1 | 	sub	fp, #8
136f0     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
136f4     14 4E 05 A1 |  if_e	add	fp, #20
136f8     A7 1E 02 AB |  if_e	rdlong	local01, fp
136fc     14 4E 85 A1 |  if_e	sub	fp, #20
13700     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
13704     1C 00 90 5D |  if_ne	jmp	#LR__1544
13708     A7 64 02 FB | 	rdlong	muldiva_, fp
1370c     0C 4E 05 F1 | 	add	fp, #12
13710     A7 66 02 FB | 	rdlong	muldivb_, fp
13714     0C 4E 85 F1 | 	sub	fp, #12
13718     BA 00 A0 FD | 	call	#divide_
1371c     A7 66 62 FC | 	wrlong	muldivb_, fp
13720     50 00 90 FD | 	jmp	#LR__1546
13724                 | LR__1544
13724                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
13724     08 4E 05 F1 | 	add	fp, #8
13728     A7 66 02 FB | 	rdlong	muldivb_, fp
1372c     08 4E 85 F1 | 	sub	fp, #8
13730     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
13734     14 4E 05 A1 |  if_e	add	fp, #20
13738     A7 1E 02 AB |  if_e	rdlong	local01, fp
1373c     14 4E 85 A1 |  if_e	sub	fp, #20
13740     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
13744     1C 00 90 5D |  if_ne	jmp	#LR__1545
13748     A7 64 02 FB | 	rdlong	muldiva_, fp
1374c     0C 4E 05 F1 | 	add	fp, #12
13750     A7 66 02 FB | 	rdlong	muldivb_, fp
13754     0C 4E 85 F1 | 	sub	fp, #12
13758     BA 00 A0 FD | 	call	#divide_
1375c     A7 66 62 FC | 	wrlong	muldivb_, fp
13760     10 00 90 FD | 	jmp	#LR__1546
13764                 | LR__1545
13764     A7 16 68 FC | 	wrlong	#11, fp
13768     08 4E 05 F1 | 	add	fp, #8
1376c     A7 FE 69 FC | 	wrlong	#255, fp
13770     08 4E 85 F1 | 	sub	fp, #8
13774                 | LR__1546
13774     A7 12 02 F6 | 	mov	arg01, fp
13778     B4 84 BF FD | 	call	#_push
1377c     A7 F0 03 F6 | 	mov	ptra, fp
13780     B2 00 A0 FD | 	call	#popregs_
13784                 | _do_div_ret
13784     2D 00 64 FD | 	ret
13788                 | 
13788                 | ' 
13788                 | ' sub do_fdiv 
13788                 | _do_fdiv
13788     02 4A 05 F6 | 	mov	COUNT_, #2
1378c     A8 00 A0 FD | 	call	#pushregs_
13790     18 F0 07 F1 | 	add	ptra, #24
13794     00 84 BF FD | 	call	#_pop
13798     FD 14 02 F6 | 	mov	arg02, result1
1379c     FE 12 02 F6 | 	mov	arg01, result2
137a0     FF 1E 02 F6 | 	mov	local01, result3
137a4     0C 4E 05 F1 | 	add	fp, #12
137a8     A7 14 62 FC | 	wrlong	arg02, fp
137ac     04 4E 05 F1 | 	add	fp, #4
137b0     A7 12 62 FC | 	wrlong	arg01, fp
137b4     04 4E 05 F1 | 	add	fp, #4
137b8     A7 1E 62 FC | 	wrlong	local01, fp
137bc     14 4E 85 F1 | 	sub	fp, #20
137c0     D4 83 BF FD | 	call	#_pop
137c4     A7 FA 61 FC | 	wrlong	result1, fp
137c8     04 4E 05 F1 | 	add	fp, #4
137cc     A7 FC 61 FC | 	wrlong	result2, fp
137d0     04 4E 05 F1 | 	add	fp, #4
137d4     A7 FE 61 FC | 	wrlong	result3, fp
137d8                 | ' 
137d8                 | ' t2=pop()
137d8                 | ' t1=pop()
137d8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
137d8     08 4E 85 F1 | 	sub	fp, #8
137dc     1F FE 0D F2 | 	cmp	result3, #31 wz
137e0     14 4E 05 51 |  if_ne	add	fp, #20
137e4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
137e8     14 4E 85 51 |  if_ne	sub	fp, #20
137ec     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
137f0     A7 14 68 AC |  if_e	wrlong	#10, fp
137f4     08 4E 05 A1 |  if_e	add	fp, #8
137f8     A7 FE 69 AC |  if_e	wrlong	#255, fp
137fc     08 4E 85 A1 |  if_e	sub	fp, #8
13800     38 01 90 AD |  if_e	jmp	#LR__1555
13804                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
13804     08 4E 05 F1 | 	add	fp, #8
13808     A7 14 02 FB | 	rdlong	arg02, fp
1380c     08 4E 85 F1 | 	sub	fp, #8
13810     1C 14 0E F2 | 	cmp	arg02, #28 wz
13814     28 00 90 5D |  if_ne	jmp	#LR__1550
13818     08 4E 05 F1 | 	add	fp, #8
1381c     A7 3C 68 FC | 	wrlong	#30, fp
13820     08 4E 85 F1 | 	sub	fp, #8
13824     A7 12 02 FB | 	rdlong	arg01, fp
13828     09 13 52 F6 | 	abs	arg01, arg01 wc
1382c     1F 20 C6 C9 |  if_b	decod	local02, #31
13830     00 20 06 36 |  if_ae	mov	local02, #0
13834     A0 F8 B0 FD | 	call	#__system___float_fromuns
13838     10 FB 61 F5 | 	xor	result1, local02
1383c     A7 FA 61 FC | 	wrlong	result1, fp
13840                 | LR__1550
13840                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
13840     08 4E 05 F1 | 	add	fp, #8
13844     A7 14 02 FB | 	rdlong	arg02, fp
13848     08 4E 85 F1 | 	sub	fp, #8
1384c     1D 14 0E F2 | 	cmp	arg02, #29 wz
13850     18 00 90 5D |  if_ne	jmp	#LR__1551
13854     08 4E 05 F1 | 	add	fp, #8
13858     A7 3C 68 FC | 	wrlong	#30, fp
1385c     08 4E 85 F1 | 	sub	fp, #8
13860     A7 12 02 FB | 	rdlong	arg01, fp
13864     70 F8 B0 FD | 	call	#__system___float_fromuns
13868     A7 FA 61 FC | 	wrlong	result1, fp
1386c                 | LR__1551
1386c                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1386c     14 4E 05 F1 | 	add	fp, #20
13870     A7 14 02 FB | 	rdlong	arg02, fp
13874     14 4E 85 F1 | 	sub	fp, #20
13878     1C 14 0E F2 | 	cmp	arg02, #28 wz
1387c     34 00 90 5D |  if_ne	jmp	#LR__1552
13880     14 4E 05 F1 | 	add	fp, #20
13884     A7 3C 68 FC | 	wrlong	#30, fp
13888     08 4E 85 F1 | 	sub	fp, #8
1388c     A7 12 02 FB | 	rdlong	arg01, fp
13890     0C 4E 85 F1 | 	sub	fp, #12
13894     09 13 52 F6 | 	abs	arg01, arg01 wc
13898     1F 20 C6 C9 |  if_b	decod	local02, #31
1389c     00 20 06 36 |  if_ae	mov	local02, #0
138a0     34 F8 B0 FD | 	call	#__system___float_fromuns
138a4     10 FB 61 F5 | 	xor	result1, local02
138a8     0C 4E 05 F1 | 	add	fp, #12
138ac     A7 FA 61 FC | 	wrlong	result1, fp
138b0     0C 4E 85 F1 | 	sub	fp, #12
138b4                 | LR__1552
138b4                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
138b4     14 4E 05 F1 | 	add	fp, #20
138b8     A7 14 02 FB | 	rdlong	arg02, fp
138bc     14 4E 85 F1 | 	sub	fp, #20
138c0     1D 14 0E F2 | 	cmp	arg02, #29 wz
138c4     24 00 90 5D |  if_ne	jmp	#LR__1553
138c8     14 4E 05 F1 | 	add	fp, #20
138cc     A7 3C 68 FC | 	wrlong	#30, fp
138d0     08 4E 85 F1 | 	sub	fp, #8
138d4     A7 12 02 FB | 	rdlong	arg01, fp
138d8     0C 4E 85 F1 | 	sub	fp, #12
138dc     F8 F7 B0 FD | 	call	#__system___float_fromuns
138e0     0C 4E 05 F1 | 	add	fp, #12
138e4     A7 FA 61 FC | 	wrlong	result1, fp
138e8     0C 4E 85 F1 | 	sub	fp, #12
138ec                 | LR__1553
138ec                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
138ec     08 4E 05 F1 | 	add	fp, #8
138f0     A7 14 02 FB | 	rdlong	arg02, fp
138f4     08 4E 85 F1 | 	sub	fp, #8
138f8     1E 14 0E F2 | 	cmp	arg02, #30 wz
138fc     14 4E 05 A1 |  if_e	add	fp, #20
13900     A7 1E 02 AB |  if_e	rdlong	local01, fp
13904     14 4E 85 A1 |  if_e	sub	fp, #20
13908     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
1390c     1C 00 90 5D |  if_ne	jmp	#LR__1554
13910     A7 12 02 FB | 	rdlong	arg01, fp
13914     0C 4E 05 F1 | 	add	fp, #12
13918     A7 14 02 FB | 	rdlong	arg02, fp
1391c     0C 4E 85 F1 | 	sub	fp, #12
13920     BC FD B0 FD | 	call	#__system___float_div
13924     A7 FA 61 FC | 	wrlong	result1, fp
13928     10 00 90 FD | 	jmp	#LR__1555
1392c                 | LR__1554
1392c     A7 16 68 FC | 	wrlong	#11, fp
13930     08 4E 05 F1 | 	add	fp, #8
13934     A7 FE 69 FC | 	wrlong	#255, fp
13938     08 4E 85 F1 | 	sub	fp, #8
1393c                 | LR__1555
1393c     A7 12 02 F6 | 	mov	arg01, fp
13940     EC 82 BF FD | 	call	#_push
13944     A7 F0 03 F6 | 	mov	ptra, fp
13948     B2 00 A0 FD | 	call	#popregs_
1394c                 | _do_fdiv_ret
1394c     2D 00 64 FD | 	ret
13950                 | 
13950                 | ' 
13950                 | ' 
13950                 | ' sub do_mod 
13950                 | _do_mod
13950     01 4A 05 F6 | 	mov	COUNT_, #1
13954     A8 00 A0 FD | 	call	#pushregs_
13958     18 F0 07 F1 | 	add	ptra, #24
1395c     38 82 BF FD | 	call	#_pop
13960     FD 66 02 F6 | 	mov	muldivb_, result1
13964     FE 64 02 F6 | 	mov	muldiva_, result2
13968     FF 1E 02 F6 | 	mov	local01, result3
1396c     0C 4E 05 F1 | 	add	fp, #12
13970     A7 66 62 FC | 	wrlong	muldivb_, fp
13974     04 4E 05 F1 | 	add	fp, #4
13978     A7 64 62 FC | 	wrlong	muldiva_, fp
1397c     04 4E 05 F1 | 	add	fp, #4
13980     A7 1E 62 FC | 	wrlong	local01, fp
13984     14 4E 85 F1 | 	sub	fp, #20
13988     0C 82 BF FD | 	call	#_pop
1398c     A7 FA 61 FC | 	wrlong	result1, fp
13990     04 4E 05 F1 | 	add	fp, #4
13994     A7 FC 61 FC | 	wrlong	result2, fp
13998     04 4E 05 F1 | 	add	fp, #4
1399c     A7 FE 61 FC | 	wrlong	result3, fp
139a0                 | ' 
139a0                 | ' t2=pop()
139a0                 | ' t1=pop()
139a0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
139a0     08 4E 85 F1 | 	sub	fp, #8
139a4     1F FE 0D F2 | 	cmp	result3, #31 wz
139a8     14 4E 05 51 |  if_ne	add	fp, #20
139ac     A7 12 02 5B |  if_ne	rdlong	arg01, fp
139b0     14 4E 85 51 |  if_ne	sub	fp, #20
139b4     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
139b8     A7 14 68 AC |  if_e	wrlong	#10, fp
139bc     08 4E 05 A1 |  if_e	add	fp, #8
139c0     A7 FE 69 AC |  if_e	wrlong	#255, fp
139c4     08 4E 85 A1 |  if_e	sub	fp, #8
139c8     90 01 90 AD |  if_e	jmp	#LR__1566
139cc                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
139cc     08 4E 05 F1 | 	add	fp, #8
139d0     A7 66 02 FB | 	rdlong	muldivb_, fp
139d4     08 4E 85 F1 | 	sub	fp, #8
139d8     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
139dc     1C 00 90 5D |  if_ne	jmp	#LR__1560
139e0     08 4E 05 F1 | 	add	fp, #8
139e4     A7 38 68 FC | 	wrlong	#28, fp
139e8     08 4E 85 F1 | 	sub	fp, #8
139ec     A7 12 02 FB | 	rdlong	arg01, fp
139f0     00 14 06 F6 | 	mov	arg02, #0
139f4     AC FF B0 FD | 	call	#__system___float_tointeger
139f8     A7 FA 61 FC | 	wrlong	result1, fp
139fc                 | LR__1560
139fc                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
139fc     14 4E 05 F1 | 	add	fp, #20
13a00     A7 66 02 FB | 	rdlong	muldivb_, fp
13a04     14 4E 85 F1 | 	sub	fp, #20
13a08     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
13a0c     28 00 90 5D |  if_ne	jmp	#LR__1561
13a10     14 4E 05 F1 | 	add	fp, #20
13a14     A7 38 68 FC | 	wrlong	#28, fp
13a18     08 4E 85 F1 | 	sub	fp, #8
13a1c     A7 12 02 FB | 	rdlong	arg01, fp
13a20     0C 4E 85 F1 | 	sub	fp, #12
13a24     00 14 06 F6 | 	mov	arg02, #0
13a28     78 FF B0 FD | 	call	#__system___float_tointeger
13a2c     0C 4E 05 F1 | 	add	fp, #12
13a30     A7 FA 61 FC | 	wrlong	result1, fp
13a34     0C 4E 85 F1 | 	sub	fp, #12
13a38                 | LR__1561
13a38                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
13a38     08 4E 05 F1 | 	add	fp, #8
13a3c     A7 66 02 FB | 	rdlong	muldivb_, fp
13a40     08 4E 85 F1 | 	sub	fp, #8
13a44     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
13a48     14 4E 05 A1 |  if_e	add	fp, #20
13a4c     A7 1E 02 AB |  if_e	rdlong	local01, fp
13a50     14 4E 85 A1 |  if_e	sub	fp, #20
13a54     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
13a58     20 00 90 5D |  if_ne	jmp	#LR__1562
13a5c     0C 4E 05 F1 | 	add	fp, #12
13a60     A7 1E 02 FB | 	rdlong	local01, fp
13a64     0C 4E 85 F1 | 	sub	fp, #12
13a68     A7 66 02 FB | 	rdlong	muldivb_, fp
13a6c     0F 67 12 FD | 	qdiv	muldivb_, local01
13a70     19 1E 62 FD | 	getqy	local01
13a74     A7 1E 62 FC | 	wrlong	local01, fp
13a78     E0 00 90 FD | 	jmp	#LR__1566
13a7c                 | LR__1562
13a7c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
13a7c     08 4E 05 F1 | 	add	fp, #8
13a80     A7 66 02 FB | 	rdlong	muldivb_, fp
13a84     08 4E 85 F1 | 	sub	fp, #8
13a88     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
13a8c     14 4E 05 A1 |  if_e	add	fp, #20
13a90     A7 1E 02 AB |  if_e	rdlong	local01, fp
13a94     14 4E 85 A1 |  if_e	sub	fp, #20
13a98     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
13a9c     2C 00 90 5D |  if_ne	jmp	#LR__1563
13aa0     0C 4E 05 F1 | 	add	fp, #12
13aa4     A7 1E 02 FB | 	rdlong	local01, fp
13aa8     0C 4E 85 F1 | 	sub	fp, #12
13aac     A7 66 02 FB | 	rdlong	muldivb_, fp
13ab0     0F 67 12 FD | 	qdiv	muldivb_, local01
13ab4     19 1E 62 FD | 	getqy	local01
13ab8     A7 1E 62 FC | 	wrlong	local01, fp
13abc     08 4E 05 F1 | 	add	fp, #8
13ac0     A7 38 68 FC | 	wrlong	#28, fp
13ac4     08 4E 85 F1 | 	sub	fp, #8
13ac8     90 00 90 FD | 	jmp	#LR__1566
13acc                 | LR__1563
13acc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
13acc     08 4E 05 F1 | 	add	fp, #8
13ad0     A7 66 02 FB | 	rdlong	muldivb_, fp
13ad4     08 4E 85 F1 | 	sub	fp, #8
13ad8     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
13adc     14 4E 05 A1 |  if_e	add	fp, #20
13ae0     A7 1E 02 AB |  if_e	rdlong	local01, fp
13ae4     14 4E 85 A1 |  if_e	sub	fp, #20
13ae8     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
13aec     1C 00 90 5D |  if_ne	jmp	#LR__1564
13af0     A7 64 02 FB | 	rdlong	muldiva_, fp
13af4     0C 4E 05 F1 | 	add	fp, #12
13af8     A7 66 02 FB | 	rdlong	muldivb_, fp
13afc     0C 4E 85 F1 | 	sub	fp, #12
13b00     BA 00 A0 FD | 	call	#divide_
13b04     A7 64 62 FC | 	wrlong	muldiva_, fp
13b08     50 00 90 FD | 	jmp	#LR__1566
13b0c                 | LR__1564
13b0c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
13b0c     08 4E 05 F1 | 	add	fp, #8
13b10     A7 66 02 FB | 	rdlong	muldivb_, fp
13b14     08 4E 85 F1 | 	sub	fp, #8
13b18     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
13b1c     14 4E 05 A1 |  if_e	add	fp, #20
13b20     A7 1E 02 AB |  if_e	rdlong	local01, fp
13b24     14 4E 85 A1 |  if_e	sub	fp, #20
13b28     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
13b2c     1C 00 90 5D |  if_ne	jmp	#LR__1565
13b30     A7 64 02 FB | 	rdlong	muldiva_, fp
13b34     0C 4E 05 F1 | 	add	fp, #12
13b38     A7 66 02 FB | 	rdlong	muldivb_, fp
13b3c     0C 4E 85 F1 | 	sub	fp, #12
13b40     BA 00 A0 FD | 	call	#divide_
13b44     A7 64 62 FC | 	wrlong	muldiva_, fp
13b48     10 00 90 FD | 	jmp	#LR__1566
13b4c                 | LR__1565
13b4c     A7 16 68 FC | 	wrlong	#11, fp
13b50     08 4E 05 F1 | 	add	fp, #8
13b54     A7 FE 69 FC | 	wrlong	#255, fp
13b58     08 4E 85 F1 | 	sub	fp, #8
13b5c                 | LR__1566
13b5c     A7 12 02 F6 | 	mov	arg01, fp
13b60     CC 80 BF FD | 	call	#_push
13b64     A7 F0 03 F6 | 	mov	ptra, fp
13b68     B2 00 A0 FD | 	call	#popregs_
13b6c                 | _do_mod_ret
13b6c     2D 00 64 FD | 	ret
13b70                 | 
13b70                 | ' 
13b70                 | ' sub do_shl 
13b70                 | _do_shl
13b70     03 4A 05 F6 | 	mov	COUNT_, #3
13b74     A8 00 A0 FD | 	call	#pushregs_
13b78     18 F0 07 F1 | 	add	ptra, #24
13b7c     18 80 BF FD | 	call	#_pop
13b80     FD 12 02 F6 | 	mov	arg01, result1
13b84     FE 1E 02 F6 | 	mov	local01, result2
13b88     FF 20 02 F6 | 	mov	local02, result3
13b8c     0C 4E 05 F1 | 	add	fp, #12
13b90     A7 12 62 FC | 	wrlong	arg01, fp
13b94     04 4E 05 F1 | 	add	fp, #4
13b98     A7 1E 62 FC | 	wrlong	local01, fp
13b9c     04 4E 05 F1 | 	add	fp, #4
13ba0     A7 20 62 FC | 	wrlong	local02, fp
13ba4     14 4E 85 F1 | 	sub	fp, #20
13ba8     EC 7F BF FD | 	call	#_pop
13bac     FF 22 02 F6 | 	mov	local03, result3
13bb0     A7 FA 61 FC | 	wrlong	result1, fp
13bb4     04 4E 05 F1 | 	add	fp, #4
13bb8     A7 FC 61 FC | 	wrlong	result2, fp
13bbc     04 4E 05 F1 | 	add	fp, #4
13bc0     A7 22 62 FC | 	wrlong	local03, fp
13bc4                 | ' 
13bc4                 | ' t2=pop()
13bc4                 | ' t1=pop()
13bc4                 | ' 
13bc4                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
13bc4     08 4E 85 F1 | 	sub	fp, #8
13bc8     1C 22 0E F2 | 	cmp	local03, #28 wz
13bcc     A7 22 02 AB |  if_e	rdlong	local03, fp
13bd0     A7 22 62 AC |  if_e	wrlong	local03, fp
13bd4     08 4E 05 A1 |  if_e	add	fp, #8
13bd8     A7 3A 68 AC |  if_e	wrlong	#29, fp
13bdc     08 4E 85 A1 |  if_e	sub	fp, #8
13be0                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
13be0     14 4E 05 F1 | 	add	fp, #20
13be4     A7 22 02 FB | 	rdlong	local03, fp
13be8     14 4E 85 F1 | 	sub	fp, #20
13bec     1C 22 0E F2 | 	cmp	local03, #28 wz
13bf0     18 00 90 5D |  if_ne	jmp	#LR__1570
13bf4     0C 4E 05 F1 | 	add	fp, #12
13bf8     A7 22 02 FB | 	rdlong	local03, fp
13bfc     A7 22 62 FC | 	wrlong	local03, fp
13c00     08 4E 05 F1 | 	add	fp, #8
13c04     A7 3A 68 FC | 	wrlong	#29, fp
13c08     14 4E 85 F1 | 	sub	fp, #20
13c0c                 | LR__1570
13c0c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
13c0c     08 4E 05 F1 | 	add	fp, #8
13c10     A7 22 02 FB | 	rdlong	local03, fp
13c14     08 4E 85 F1 | 	sub	fp, #8
13c18     1F 22 0E F2 | 	cmp	local03, #31 wz
13c1c     14 4E 05 51 |  if_ne	add	fp, #20
13c20     A7 20 02 5B |  if_ne	rdlong	local02, fp
13c24     14 4E 85 51 |  if_ne	sub	fp, #20
13c28     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
13c2c     08 4E 05 51 |  if_ne	add	fp, #8
13c30     A7 22 02 5B |  if_ne	rdlong	local03, fp
13c34     08 4E 85 51 |  if_ne	sub	fp, #8
13c38     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
13c3c     14 4E 05 51 |  if_ne	add	fp, #20
13c40     14 4E 85 51 |  if_ne	sub	fp, #20
13c44     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
13c48     A7 0C 68 AC |  if_e	wrlong	#6, fp
13c4c     08 4E 05 A1 |  if_e	add	fp, #8
13c50     A7 FE 69 AC |  if_e	wrlong	#255, fp
13c54     08 4E 85 A1 |  if_e	sub	fp, #8
13c58     18 00 90 AD |  if_e	jmp	#LR__1571
13c5c     A7 22 02 FB | 	rdlong	local03, fp
13c60     0C 4E 05 F1 | 	add	fp, #12
13c64     A7 1E 02 FB | 	rdlong	local01, fp
13c68     0C 4E 85 F1 | 	sub	fp, #12
13c6c     0F 23 62 F0 | 	shl	local03, local01
13c70     A7 22 62 FC | 	wrlong	local03, fp
13c74                 | LR__1571
13c74     A7 12 02 F6 | 	mov	arg01, fp
13c78     B4 7F BF FD | 	call	#_push
13c7c     A7 F0 03 F6 | 	mov	ptra, fp
13c80     B2 00 A0 FD | 	call	#popregs_
13c84                 | _do_shl_ret
13c84     2D 00 64 FD | 	ret
13c88                 | 
13c88                 | ' 
13c88                 | ' sub do_shr 
13c88                 | _do_shr
13c88     03 4A 05 F6 | 	mov	COUNT_, #3
13c8c     A8 00 A0 FD | 	call	#pushregs_
13c90     18 F0 07 F1 | 	add	ptra, #24
13c94     00 7F BF FD | 	call	#_pop
13c98     FD 12 02 F6 | 	mov	arg01, result1
13c9c     FE 1E 02 F6 | 	mov	local01, result2
13ca0     FF 20 02 F6 | 	mov	local02, result3
13ca4     0C 4E 05 F1 | 	add	fp, #12
13ca8     A7 12 62 FC | 	wrlong	arg01, fp
13cac     04 4E 05 F1 | 	add	fp, #4
13cb0     A7 1E 62 FC | 	wrlong	local01, fp
13cb4     04 4E 05 F1 | 	add	fp, #4
13cb8     A7 20 62 FC | 	wrlong	local02, fp
13cbc     14 4E 85 F1 | 	sub	fp, #20
13cc0     D4 7E BF FD | 	call	#_pop
13cc4     FF 22 02 F6 | 	mov	local03, result3
13cc8     A7 FA 61 FC | 	wrlong	result1, fp
13ccc     04 4E 05 F1 | 	add	fp, #4
13cd0     A7 FC 61 FC | 	wrlong	result2, fp
13cd4     04 4E 05 F1 | 	add	fp, #4
13cd8     A7 22 62 FC | 	wrlong	local03, fp
13cdc                 | ' t2=pop()
13cdc                 | ' t1=pop()
13cdc                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
13cdc     08 4E 85 F1 | 	sub	fp, #8
13ce0     1C 22 0E F2 | 	cmp	local03, #28 wz
13ce4     A7 22 02 AB |  if_e	rdlong	local03, fp
13ce8     A7 22 62 AC |  if_e	wrlong	local03, fp
13cec     08 4E 05 A1 |  if_e	add	fp, #8
13cf0     A7 3A 68 AC |  if_e	wrlong	#29, fp
13cf4     08 4E 85 A1 |  if_e	sub	fp, #8
13cf8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
13cf8     14 4E 05 F1 | 	add	fp, #20
13cfc     A7 22 02 FB | 	rdlong	local03, fp
13d00     14 4E 85 F1 | 	sub	fp, #20
13d04     1C 22 0E F2 | 	cmp	local03, #28 wz
13d08     18 00 90 5D |  if_ne	jmp	#LR__1580
13d0c     0C 4E 05 F1 | 	add	fp, #12
13d10     A7 22 02 FB | 	rdlong	local03, fp
13d14     A7 22 62 FC | 	wrlong	local03, fp
13d18     08 4E 05 F1 | 	add	fp, #8
13d1c     A7 3A 68 FC | 	wrlong	#29, fp
13d20     14 4E 85 F1 | 	sub	fp, #20
13d24                 | LR__1580
13d24                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
13d24     08 4E 05 F1 | 	add	fp, #8
13d28     A7 22 02 FB | 	rdlong	local03, fp
13d2c     08 4E 85 F1 | 	sub	fp, #8
13d30     1F 22 0E F2 | 	cmp	local03, #31 wz
13d34     14 4E 05 51 |  if_ne	add	fp, #20
13d38     A7 20 02 5B |  if_ne	rdlong	local02, fp
13d3c     14 4E 85 51 |  if_ne	sub	fp, #20
13d40     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
13d44     08 4E 05 51 |  if_ne	add	fp, #8
13d48     A7 22 02 5B |  if_ne	rdlong	local03, fp
13d4c     08 4E 85 51 |  if_ne	sub	fp, #8
13d50     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
13d54     14 4E 05 51 |  if_ne	add	fp, #20
13d58     14 4E 85 51 |  if_ne	sub	fp, #20
13d5c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
13d60     A7 0C 68 AC |  if_e	wrlong	#6, fp
13d64     08 4E 05 A1 |  if_e	add	fp, #8
13d68     A7 FE 69 AC |  if_e	wrlong	#255, fp
13d6c     08 4E 85 A1 |  if_e	sub	fp, #8
13d70     18 00 90 AD |  if_e	jmp	#LR__1581
13d74     A7 22 02 FB | 	rdlong	local03, fp
13d78     0C 4E 05 F1 | 	add	fp, #12
13d7c     A7 1E 02 FB | 	rdlong	local01, fp
13d80     0C 4E 85 F1 | 	sub	fp, #12
13d84     0F 23 42 F0 | 	shr	local03, local01
13d88     A7 22 62 FC | 	wrlong	local03, fp
13d8c                 | LR__1581
13d8c     A7 12 02 F6 | 	mov	arg01, fp
13d90     9C 7E BF FD | 	call	#_push
13d94     A7 F0 03 F6 | 	mov	ptra, fp
13d98     B2 00 A0 FD | 	call	#popregs_
13d9c                 | _do_shr_ret
13d9c     2D 00 64 FD | 	ret
13da0                 | 
13da0                 | ' 
13da0                 | ' sub do_power 
13da0                 | _do_power
13da0     02 4A 05 F6 | 	mov	COUNT_, #2
13da4     A8 00 A0 FD | 	call	#pushregs_
13da8     18 F0 07 F1 | 	add	ptra, #24
13dac     E8 7D BF FD | 	call	#_pop
13db0     FD 14 02 F6 | 	mov	arg02, result1
13db4     FE 12 02 F6 | 	mov	arg01, result2
13db8     FF 1E 02 F6 | 	mov	local01, result3
13dbc     0C 4E 05 F1 | 	add	fp, #12
13dc0     A7 14 62 FC | 	wrlong	arg02, fp
13dc4     04 4E 05 F1 | 	add	fp, #4
13dc8     A7 12 62 FC | 	wrlong	arg01, fp
13dcc     04 4E 05 F1 | 	add	fp, #4
13dd0     A7 1E 62 FC | 	wrlong	local01, fp
13dd4     14 4E 85 F1 | 	sub	fp, #20
13dd8     BC 7D BF FD | 	call	#_pop
13ddc     A7 FA 61 FC | 	wrlong	result1, fp
13de0     04 4E 05 F1 | 	add	fp, #4
13de4     A7 FC 61 FC | 	wrlong	result2, fp
13de8     04 4E 05 F1 | 	add	fp, #4
13dec     A7 FE 61 FC | 	wrlong	result3, fp
13df0                 | ' t2=pop()
13df0                 | ' t1=pop()
13df0                 | ' 
13df0                 | ' 
13df0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
13df0     08 4E 85 F1 | 	sub	fp, #8
13df4     1F FE 0D F2 | 	cmp	result3, #31 wz
13df8     14 4E 05 51 |  if_ne	add	fp, #20
13dfc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
13e00     14 4E 85 51 |  if_ne	sub	fp, #20
13e04     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
13e08     A7 18 68 AC |  if_e	wrlong	#12, fp
13e0c     08 4E 05 A1 |  if_e	add	fp, #8
13e10     A7 FE 69 AC |  if_e	wrlong	#255, fp
13e14     08 4E 85 A1 |  if_e	sub	fp, #8
13e18     38 01 90 AD |  if_e	jmp	#LR__1595
13e1c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
13e1c     08 4E 05 F1 | 	add	fp, #8
13e20     A7 14 02 FB | 	rdlong	arg02, fp
13e24     08 4E 85 F1 | 	sub	fp, #8
13e28     1C 14 0E F2 | 	cmp	arg02, #28 wz
13e2c     28 00 90 5D |  if_ne	jmp	#LR__1590
13e30     08 4E 05 F1 | 	add	fp, #8
13e34     A7 3C 68 FC | 	wrlong	#30, fp
13e38     08 4E 85 F1 | 	sub	fp, #8
13e3c     A7 12 02 FB | 	rdlong	arg01, fp
13e40     09 13 52 F6 | 	abs	arg01, arg01 wc
13e44     1F 20 C6 C9 |  if_b	decod	local02, #31
13e48     00 20 06 36 |  if_ae	mov	local02, #0
13e4c     88 F2 B0 FD | 	call	#__system___float_fromuns
13e50     10 FB 61 F5 | 	xor	result1, local02
13e54     A7 FA 61 FC | 	wrlong	result1, fp
13e58                 | LR__1590
13e58                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
13e58     08 4E 05 F1 | 	add	fp, #8
13e5c     A7 14 02 FB | 	rdlong	arg02, fp
13e60     08 4E 85 F1 | 	sub	fp, #8
13e64     1D 14 0E F2 | 	cmp	arg02, #29 wz
13e68     18 00 90 5D |  if_ne	jmp	#LR__1591
13e6c     08 4E 05 F1 | 	add	fp, #8
13e70     A7 3C 68 FC | 	wrlong	#30, fp
13e74     08 4E 85 F1 | 	sub	fp, #8
13e78     A7 12 02 FB | 	rdlong	arg01, fp
13e7c     58 F2 B0 FD | 	call	#__system___float_fromuns
13e80     A7 FA 61 FC | 	wrlong	result1, fp
13e84                 | LR__1591
13e84                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
13e84     14 4E 05 F1 | 	add	fp, #20
13e88     A7 14 02 FB | 	rdlong	arg02, fp
13e8c     14 4E 85 F1 | 	sub	fp, #20
13e90     1C 14 0E F2 | 	cmp	arg02, #28 wz
13e94     34 00 90 5D |  if_ne	jmp	#LR__1592
13e98     14 4E 05 F1 | 	add	fp, #20
13e9c     A7 3C 68 FC | 	wrlong	#30, fp
13ea0     08 4E 85 F1 | 	sub	fp, #8
13ea4     A7 12 02 FB | 	rdlong	arg01, fp
13ea8     0C 4E 85 F1 | 	sub	fp, #12
13eac     09 13 52 F6 | 	abs	arg01, arg01 wc
13eb0     1F 20 C6 C9 |  if_b	decod	local02, #31
13eb4     00 20 06 36 |  if_ae	mov	local02, #0
13eb8     1C F2 B0 FD | 	call	#__system___float_fromuns
13ebc     10 FB 61 F5 | 	xor	result1, local02
13ec0     0C 4E 05 F1 | 	add	fp, #12
13ec4     A7 FA 61 FC | 	wrlong	result1, fp
13ec8     0C 4E 85 F1 | 	sub	fp, #12
13ecc                 | LR__1592
13ecc                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
13ecc     14 4E 05 F1 | 	add	fp, #20
13ed0     A7 14 02 FB | 	rdlong	arg02, fp
13ed4     14 4E 85 F1 | 	sub	fp, #20
13ed8     1D 14 0E F2 | 	cmp	arg02, #29 wz
13edc     24 00 90 5D |  if_ne	jmp	#LR__1593
13ee0     14 4E 05 F1 | 	add	fp, #20
13ee4     A7 3C 68 FC | 	wrlong	#30, fp
13ee8     08 4E 85 F1 | 	sub	fp, #8
13eec     A7 12 02 FB | 	rdlong	arg01, fp
13ef0     0C 4E 85 F1 | 	sub	fp, #12
13ef4     E0 F1 B0 FD | 	call	#__system___float_fromuns
13ef8     0C 4E 05 F1 | 	add	fp, #12
13efc     A7 FA 61 FC | 	wrlong	result1, fp
13f00     0C 4E 85 F1 | 	sub	fp, #12
13f04                 | LR__1593
13f04                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
13f04     08 4E 05 F1 | 	add	fp, #8
13f08     A7 14 02 FB | 	rdlong	arg02, fp
13f0c     08 4E 85 F1 | 	sub	fp, #8
13f10     1E 14 0E F2 | 	cmp	arg02, #30 wz
13f14     14 4E 05 A1 |  if_e	add	fp, #20
13f18     A7 1E 02 AB |  if_e	rdlong	local01, fp
13f1c     14 4E 85 A1 |  if_e	sub	fp, #20
13f20     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
13f24     1C 00 90 5D |  if_ne	jmp	#LR__1594
13f28     A7 12 02 FB | 	rdlong	arg01, fp
13f2c     0C 4E 05 F1 | 	add	fp, #12
13f30     A7 14 02 FB | 	rdlong	arg02, fp
13f34     0C 4E 85 F1 | 	sub	fp, #12
13f38     84 04 B1 FD | 	call	#__system____builtin_powf
13f3c     A7 FA 61 FC | 	wrlong	result1, fp
13f40     10 00 90 FD | 	jmp	#LR__1595
13f44                 | LR__1594
13f44     A7 1A 68 FC | 	wrlong	#13, fp
13f48     08 4E 05 F1 | 	add	fp, #8
13f4c     A7 FE 69 FC | 	wrlong	#255, fp
13f50     08 4E 85 F1 | 	sub	fp, #8
13f54                 | LR__1595
13f54     A7 12 02 F6 | 	mov	arg01, fp
13f58     D4 7C BF FD | 	call	#_push
13f5c     A7 F0 03 F6 | 	mov	ptra, fp
13f60     B2 00 A0 FD | 	call	#popregs_
13f64                 | _do_power_ret
13f64     2D 00 64 FD | 	ret
13f68                 | 
13f68                 | ' 
13f68                 | ' 
13f68                 | ' sub do_eq
13f68                 | _do_eq
13f68     05 4A 05 F6 | 	mov	COUNT_, #5
13f6c     A8 00 A0 FD | 	call	#pushregs_
13f70     18 F0 07 F1 | 	add	ptra, #24
13f74     20 7C BF FD | 	call	#_pop
13f78     FD 1E 02 F6 | 	mov	local01, result1
13f7c     FE 20 02 F6 | 	mov	local02, result2
13f80     FF 22 02 F6 | 	mov	local03, result3
13f84     0C 4E 05 F1 | 	add	fp, #12
13f88     A7 1E 62 FC | 	wrlong	local01, fp
13f8c     04 4E 05 F1 | 	add	fp, #4
13f90     A7 20 62 FC | 	wrlong	local02, fp
13f94     04 4E 05 F1 | 	add	fp, #4
13f98     A7 22 62 FC | 	wrlong	local03, fp
13f9c     14 4E 85 F1 | 	sub	fp, #20
13fa0     F4 7B BF FD | 	call	#_pop
13fa4     FF 22 02 F6 | 	mov	local03, result3
13fa8     A7 FA 61 FC | 	wrlong	result1, fp
13fac     04 4E 05 F1 | 	add	fp, #4
13fb0     A7 FC 61 FC | 	wrlong	result2, fp
13fb4     04 4E 05 F1 | 	add	fp, #4
13fb8     A7 22 62 FC | 	wrlong	local03, fp
13fbc                 | ' t2=pop()
13fbc                 | ' t1=pop()
13fbc                 | ' 
13fbc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
13fbc     08 4E 85 F1 | 	sub	fp, #8
13fc0     1F 22 0E F2 | 	cmp	local03, #31 wz
13fc4     14 4E 05 A1 |  if_e	add	fp, #20
13fc8     A7 24 02 AB |  if_e	rdlong	local04, fp
13fcc     14 4E 85 A1 |  if_e	sub	fp, #20
13fd0     12 23 02 A6 |  if_e	mov	local03, local04
13fd4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
13fd8     28 00 90 5D |  if_ne	jmp	#LR__1600
13fdc     00 1E 06 F6 | 	mov	local01, #0
13fe0     A7 12 02 FB | 	rdlong	arg01, fp
13fe4     0C 4E 05 F1 | 	add	fp, #12
13fe8     A7 14 02 FB | 	rdlong	arg02, fp
13fec     0C 4E 85 F1 | 	sub	fp, #12
13ff0     5C C9 B0 FD | 	call	#__system___string_cmp
13ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
13ff8     00 1E 26 A6 |  if_e	not	local01, #0
13ffc     A7 1E 62 FC | 	wrlong	local01, fp
14000     1C 04 90 FD | 	jmp	#LR__1613
14004                 | LR__1600
14004                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
14004     08 4E 05 F1 | 	add	fp, #8
14008     A7 1E 02 FB | 	rdlong	local01, fp
1400c     08 4E 85 F1 | 	sub	fp, #8
14010     1E 1E 0E F2 | 	cmp	local01, #30 wz
14014     14 4E 05 A1 |  if_e	add	fp, #20
14018     A7 24 02 AB |  if_e	rdlong	local04, fp
1401c     14 4E 85 A1 |  if_e	sub	fp, #20
14020     12 23 02 A6 |  if_e	mov	local03, local04
14024     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14028     2C 00 90 5D |  if_ne	jmp	#LR__1601
1402c     00 1E 06 F6 | 	mov	local01, #0
14030     A7 12 02 FB | 	rdlong	arg01, fp
14034     0C 4E 05 F1 | 	add	fp, #12
14038     A7 14 02 FB | 	rdlong	arg02, fp
1403c     0C 4E 85 F1 | 	sub	fp, #12
14040     01 16 06 F6 | 	mov	arg03, #1
14044     C8 F8 B0 FD | 	call	#__system___float_cmp
14048     00 FA 0D F2 | 	cmp	result1, #0 wz
1404c     00 1E 26 A6 |  if_e	not	local01, #0
14050     A7 1E 62 FC | 	wrlong	local01, fp
14054     C8 03 90 FD | 	jmp	#LR__1613
14058                 | LR__1601
14058                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
14058     08 4E 05 F1 | 	add	fp, #8
1405c     A7 1E 02 FB | 	rdlong	local01, fp
14060     08 4E 85 F1 | 	sub	fp, #8
14064     1E 1E 0E F2 | 	cmp	local01, #30 wz
14068     14 4E 05 A1 |  if_e	add	fp, #20
1406c     A7 24 02 AB |  if_e	rdlong	local04, fp
14070     14 4E 85 A1 |  if_e	sub	fp, #20
14074     12 23 02 A6 |  if_e	mov	local03, local04
14078     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1407c     48 00 90 5D |  if_ne	jmp	#LR__1602
14080     00 1E 06 F6 | 	mov	local01, #0
14084     A7 20 02 FB | 	rdlong	local02, fp
14088     0C 4E 05 F1 | 	add	fp, #12
1408c     A7 12 02 FB | 	rdlong	arg01, fp
14090     0C 4E 85 F1 | 	sub	fp, #12
14094     09 13 52 F6 | 	abs	arg01, arg01 wc
14098     1F 26 C6 C9 |  if_b	decod	local05, #31
1409c     00 26 06 36 |  if_ae	mov	local05, #0
140a0     34 F0 B0 FD | 	call	#__system___float_fromuns
140a4     13 FB 61 F5 | 	xor	result1, local05
140a8     FD 14 02 F6 | 	mov	arg02, result1
140ac     10 13 02 F6 | 	mov	arg01, local02
140b0     01 16 06 F6 | 	mov	arg03, #1
140b4     58 F8 B0 FD | 	call	#__system___float_cmp
140b8     00 FA 0D F2 | 	cmp	result1, #0 wz
140bc     00 1E 26 A6 |  if_e	not	local01, #0
140c0     A7 1E 62 FC | 	wrlong	local01, fp
140c4     58 03 90 FD | 	jmp	#LR__1613
140c8                 | LR__1602
140c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
140c8     08 4E 05 F1 | 	add	fp, #8
140cc     A7 1E 02 FB | 	rdlong	local01, fp
140d0     08 4E 85 F1 | 	sub	fp, #8
140d4     1E 1E 0E F2 | 	cmp	local01, #30 wz
140d8     14 4E 05 A1 |  if_e	add	fp, #20
140dc     A7 24 02 AB |  if_e	rdlong	local04, fp
140e0     14 4E 85 A1 |  if_e	sub	fp, #20
140e4     12 23 02 A6 |  if_e	mov	local03, local04
140e8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
140ec     38 00 90 5D |  if_ne	jmp	#LR__1603
140f0     00 1E 06 F6 | 	mov	local01, #0
140f4     A7 20 02 FB | 	rdlong	local02, fp
140f8     0C 4E 05 F1 | 	add	fp, #12
140fc     A7 12 02 FB | 	rdlong	arg01, fp
14100     0C 4E 85 F1 | 	sub	fp, #12
14104     D0 EF B0 FD | 	call	#__system___float_fromuns
14108     FD 14 02 F6 | 	mov	arg02, result1
1410c     10 13 02 F6 | 	mov	arg01, local02
14110     01 16 06 F6 | 	mov	arg03, #1
14114     F8 F7 B0 FD | 	call	#__system___float_cmp
14118     00 FA 0D F2 | 	cmp	result1, #0 wz
1411c     00 1E 26 A6 |  if_e	not	local01, #0
14120     A7 1E 62 FC | 	wrlong	local01, fp
14124     F8 02 90 FD | 	jmp	#LR__1613
14128                 | LR__1603
14128                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
14128     08 4E 05 F1 | 	add	fp, #8
1412c     A7 1E 02 FB | 	rdlong	local01, fp
14130     08 4E 85 F1 | 	sub	fp, #8
14134     1C 1E 0E F2 | 	cmp	local01, #28 wz
14138     14 4E 05 A1 |  if_e	add	fp, #20
1413c     A7 24 02 AB |  if_e	rdlong	local04, fp
14140     14 4E 85 A1 |  if_e	sub	fp, #20
14144     12 23 02 A6 |  if_e	mov	local03, local04
14148     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1414c     44 00 90 5D |  if_ne	jmp	#LR__1604
14150     00 1E 06 F6 | 	mov	local01, #0
14154     A7 12 02 FB | 	rdlong	arg01, fp
14158     09 13 52 F6 | 	abs	arg01, arg01 wc
1415c     1F 26 C6 C9 |  if_b	decod	local05, #31
14160     00 26 06 36 |  if_ae	mov	local05, #0
14164     70 EF B0 FD | 	call	#__system___float_fromuns
14168     13 FB 61 F5 | 	xor	result1, local05
1416c     FD 12 02 F6 | 	mov	arg01, result1
14170     0C 4E 05 F1 | 	add	fp, #12
14174     A7 14 02 FB | 	rdlong	arg02, fp
14178     0C 4E 85 F1 | 	sub	fp, #12
1417c     01 16 06 F6 | 	mov	arg03, #1
14180     8C F7 B0 FD | 	call	#__system___float_cmp
14184     00 FA 0D F2 | 	cmp	result1, #0 wz
14188     00 1E 26 A6 |  if_e	not	local01, #0
1418c     A7 1E 62 FC | 	wrlong	local01, fp
14190     8C 02 90 FD | 	jmp	#LR__1613
14194                 | LR__1604
14194                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
14194     08 4E 05 F1 | 	add	fp, #8
14198     A7 1E 02 FB | 	rdlong	local01, fp
1419c     08 4E 85 F1 | 	sub	fp, #8
141a0     1C 1E 0E F2 | 	cmp	local01, #28 wz
141a4     14 4E 05 A1 |  if_e	add	fp, #20
141a8     A7 24 02 AB |  if_e	rdlong	local04, fp
141ac     14 4E 85 A1 |  if_e	sub	fp, #20
141b0     12 23 02 A6 |  if_e	mov	local03, local04
141b4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
141b8     24 00 90 5D |  if_ne	jmp	#LR__1605
141bc     00 1E 06 F6 | 	mov	local01, #0
141c0     A7 20 02 FB | 	rdlong	local02, fp
141c4     0C 4E 05 F1 | 	add	fp, #12
141c8     A7 22 02 FB | 	rdlong	local03, fp
141cc     0C 4E 85 F1 | 	sub	fp, #12
141d0     11 21 0A F2 | 	cmp	local02, local03 wz
141d4     01 1E 66 A6 |  if_e	neg	local01, #1
141d8     A7 1E 62 FC | 	wrlong	local01, fp
141dc     40 02 90 FD | 	jmp	#LR__1613
141e0                 | LR__1605
141e0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
141e0     08 4E 05 F1 | 	add	fp, #8
141e4     A7 1E 02 FB | 	rdlong	local01, fp
141e8     08 4E 85 F1 | 	sub	fp, #8
141ec     1C 1E 0E F2 | 	cmp	local01, #28 wz
141f0     14 4E 05 A1 |  if_e	add	fp, #20
141f4     A7 24 02 AB |  if_e	rdlong	local04, fp
141f8     14 4E 85 A1 |  if_e	sub	fp, #20
141fc     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
14200     24 00 90 5D |  if_ne	jmp	#LR__1606
14204     00 1E 06 F6 | 	mov	local01, #0
14208     A7 20 02 FB | 	rdlong	local02, fp
1420c     0C 4E 05 F1 | 	add	fp, #12
14210     A7 22 02 FB | 	rdlong	local03, fp
14214     0C 4E 85 F1 | 	sub	fp, #12
14218     11 21 0A F2 | 	cmp	local02, local03 wz
1421c     01 1E 66 A6 |  if_e	neg	local01, #1
14220     A7 1E 62 FC | 	wrlong	local01, fp
14224     F8 01 90 FD | 	jmp	#LR__1613
14228                 | LR__1606
14228                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
14228     08 4E 05 F1 | 	add	fp, #8
1422c     A7 1E 02 FB | 	rdlong	local01, fp
14230     08 4E 85 F1 | 	sub	fp, #8
14234     1D 1E 0E F2 | 	cmp	local01, #29 wz
14238     14 4E 05 A1 |  if_e	add	fp, #20
1423c     A7 22 02 AB |  if_e	rdlong	local03, fp
14240     14 4E 85 A1 |  if_e	sub	fp, #20
14244     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14248     34 00 90 5D |  if_ne	jmp	#LR__1607
1424c     00 1E 06 F6 | 	mov	local01, #0
14250     A7 12 02 FB | 	rdlong	arg01, fp
14254     80 EE B0 FD | 	call	#__system___float_fromuns
14258     FD 12 02 F6 | 	mov	arg01, result1
1425c     0C 4E 05 F1 | 	add	fp, #12
14260     A7 14 02 FB | 	rdlong	arg02, fp
14264     0C 4E 85 F1 | 	sub	fp, #12
14268     01 16 06 F6 | 	mov	arg03, #1
1426c     A0 F6 B0 FD | 	call	#__system___float_cmp
14270     00 FA 0D F2 | 	cmp	result1, #0 wz
14274     00 1E 26 A6 |  if_e	not	local01, #0
14278     A7 1E 62 FC | 	wrlong	local01, fp
1427c     A0 01 90 FD | 	jmp	#LR__1613
14280                 | LR__1607
14280                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
14280     08 4E 05 F1 | 	add	fp, #8
14284     A7 1E 02 FB | 	rdlong	local01, fp
14288     08 4E 85 F1 | 	sub	fp, #8
1428c     1D 1E 0E F2 | 	cmp	local01, #29 wz
14290     14 4E 05 A1 |  if_e	add	fp, #20
14294     A7 22 02 AB |  if_e	rdlong	local03, fp
14298     14 4E 85 A1 |  if_e	sub	fp, #20
1429c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
142a0     24 00 90 5D |  if_ne	jmp	#LR__1608
142a4     00 1E 06 F6 | 	mov	local01, #0
142a8     A7 20 02 FB | 	rdlong	local02, fp
142ac     0C 4E 05 F1 | 	add	fp, #12
142b0     A7 22 02 FB | 	rdlong	local03, fp
142b4     0C 4E 85 F1 | 	sub	fp, #12
142b8     11 21 0A F2 | 	cmp	local02, local03 wz
142bc     01 1E 66 A6 |  if_e	neg	local01, #1
142c0     A7 1E 62 FC | 	wrlong	local01, fp
142c4     58 01 90 FD | 	jmp	#LR__1613
142c8                 | LR__1608
142c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
142c8     08 4E 05 F1 | 	add	fp, #8
142cc     A7 1E 02 FB | 	rdlong	local01, fp
142d0     08 4E 85 F1 | 	sub	fp, #8
142d4     1D 1E 0E F2 | 	cmp	local01, #29 wz
142d8     14 4E 05 A1 |  if_e	add	fp, #20
142dc     A7 22 02 AB |  if_e	rdlong	local03, fp
142e0     14 4E 85 A1 |  if_e	sub	fp, #20
142e4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
142e8     24 00 90 5D |  if_ne	jmp	#LR__1609
142ec     00 1E 06 F6 | 	mov	local01, #0
142f0     A7 20 02 FB | 	rdlong	local02, fp
142f4     0C 4E 05 F1 | 	add	fp, #12
142f8     A7 22 02 FB | 	rdlong	local03, fp
142fc     0C 4E 85 F1 | 	sub	fp, #12
14300     11 21 0A F2 | 	cmp	local02, local03 wz
14304     01 1E 66 A6 |  if_e	neg	local01, #1
14308     A7 1E 62 FC | 	wrlong	local01, fp
1430c     10 01 90 FD | 	jmp	#LR__1613
14310                 | LR__1609
14310                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
14310     08 4E 05 F1 | 	add	fp, #8
14314     A7 1E 02 FB | 	rdlong	local01, fp
14318     08 4E 85 F1 | 	sub	fp, #8
1431c     2B 1E 0E F2 | 	cmp	local01, #43 wz
14320     14 4E 05 A1 |  if_e	add	fp, #20
14324     A7 22 02 AB |  if_e	rdlong	local03, fp
14328     14 4E 85 A1 |  if_e	sub	fp, #20
1432c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14330     30 00 90 5D |  if_ne	jmp	#LR__1610
14334     00 1E 06 F6 | 	mov	local01, #0
14338     A7 12 02 FB | 	rdlong	arg01, fp
1433c     04 D1 BF FD | 	call	#_convertstring
14340     FD 12 02 F6 | 	mov	arg01, result1
14344     0C 4E 05 F1 | 	add	fp, #12
14348     A7 14 02 FB | 	rdlong	arg02, fp
1434c     0C 4E 85 F1 | 	sub	fp, #12
14350     FC C5 B0 FD | 	call	#__system___string_cmp
14354     00 FA 0D F2 | 	cmp	result1, #0 wz
14358     00 1E 26 A6 |  if_e	not	local01, #0
1435c     A7 1E 62 FC | 	wrlong	local01, fp
14360     BC 00 90 FD | 	jmp	#LR__1613
14364                 | LR__1610
14364                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
14364     08 4E 05 F1 | 	add	fp, #8
14368     A7 1E 02 FB | 	rdlong	local01, fp
1436c     08 4E 85 F1 | 	sub	fp, #8
14370     1F 1E 0E F2 | 	cmp	local01, #31 wz
14374     14 4E 05 A1 |  if_e	add	fp, #20
14378     A7 22 02 AB |  if_e	rdlong	local03, fp
1437c     14 4E 85 A1 |  if_e	sub	fp, #20
14380     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
14384     34 00 90 5D |  if_ne	jmp	#LR__1611
14388     00 1E 06 F6 | 	mov	local01, #0
1438c     A7 20 02 FB | 	rdlong	local02, fp
14390     0C 4E 05 F1 | 	add	fp, #12
14394     A7 12 02 FB | 	rdlong	arg01, fp
14398     0C 4E 85 F1 | 	sub	fp, #12
1439c     A4 D0 BF FD | 	call	#_convertstring
143a0     FD 14 02 F6 | 	mov	arg02, result1
143a4     10 13 02 F6 | 	mov	arg01, local02
143a8     A4 C5 B0 FD | 	call	#__system___string_cmp
143ac     00 FA 0D F2 | 	cmp	result1, #0 wz
143b0     00 1E 26 A6 |  if_e	not	local01, #0
143b4     A7 1E 62 FC | 	wrlong	local01, fp
143b8     64 00 90 FD | 	jmp	#LR__1613
143bc                 | LR__1611
143bc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
143bc     08 4E 05 F1 | 	add	fp, #8
143c0     A7 1E 02 FB | 	rdlong	local01, fp
143c4     08 4E 85 F1 | 	sub	fp, #8
143c8     2B 1E 0E F2 | 	cmp	local01, #43 wz
143cc     14 4E 05 A1 |  if_e	add	fp, #20
143d0     A7 22 02 AB |  if_e	rdlong	local03, fp
143d4     14 4E 85 A1 |  if_e	sub	fp, #20
143d8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
143dc     3C 00 90 5D |  if_ne	jmp	#LR__1612
143e0     00 1E 06 F6 | 	mov	local01, #0
143e4     A7 12 02 FB | 	rdlong	arg01, fp
143e8     58 D0 BF FD | 	call	#_convertstring
143ec     FD 20 02 F6 | 	mov	local02, result1
143f0     0C 4E 05 F1 | 	add	fp, #12
143f4     A7 12 02 FB | 	rdlong	arg01, fp
143f8     0C 4E 85 F1 | 	sub	fp, #12
143fc     44 D0 BF FD | 	call	#_convertstring
14400     FD 14 02 F6 | 	mov	arg02, result1
14404     10 13 02 F6 | 	mov	arg01, local02
14408     44 C5 B0 FD | 	call	#__system___string_cmp
1440c     00 FA 0D F2 | 	cmp	result1, #0 wz
14410     00 1E 26 A6 |  if_e	not	local01, #0
14414     A7 1E 62 FC | 	wrlong	local01, fp
14418     04 00 90 FD | 	jmp	#LR__1613
1441c                 | LR__1612
1441c     A7 00 68 FC | 	wrlong	#0, fp
14420                 | LR__1613
14420     08 4E 05 F1 | 	add	fp, #8
14424     A7 38 68 FC | 	wrlong	#28, fp
14428     08 4E 85 F1 | 	sub	fp, #8
1442c     A7 12 02 F6 | 	mov	arg01, fp
14430     FC 77 BF FD | 	call	#_push
14434     A7 F0 03 F6 | 	mov	ptra, fp
14438     B2 00 A0 FD | 	call	#popregs_
1443c                 | _do_eq_ret
1443c     2D 00 64 FD | 	ret
14440                 | 
14440                 | ' 
14440                 | ' sub do_gt
14440                 | _do_gt
14440     05 4A 05 F6 | 	mov	COUNT_, #5
14444     A8 00 A0 FD | 	call	#pushregs_
14448     18 F0 07 F1 | 	add	ptra, #24
1444c     48 77 BF FD | 	call	#_pop
14450     FD 1E 02 F6 | 	mov	local01, result1
14454     FE 20 02 F6 | 	mov	local02, result2
14458     FF 22 02 F6 | 	mov	local03, result3
1445c     0C 4E 05 F1 | 	add	fp, #12
14460     A7 1E 62 FC | 	wrlong	local01, fp
14464     04 4E 05 F1 | 	add	fp, #4
14468     A7 20 62 FC | 	wrlong	local02, fp
1446c     04 4E 05 F1 | 	add	fp, #4
14470     A7 22 62 FC | 	wrlong	local03, fp
14474     14 4E 85 F1 | 	sub	fp, #20
14478     1C 77 BF FD | 	call	#_pop
1447c     FF 22 02 F6 | 	mov	local03, result3
14480     A7 FA 61 FC | 	wrlong	result1, fp
14484     04 4E 05 F1 | 	add	fp, #4
14488     A7 FC 61 FC | 	wrlong	result2, fp
1448c     04 4E 05 F1 | 	add	fp, #4
14490     A7 22 62 FC | 	wrlong	local03, fp
14494                 | ' t2=pop()
14494                 | ' t1=pop()
14494                 | ' 
14494                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
14494     08 4E 85 F1 | 	sub	fp, #8
14498     1F 22 0E F2 | 	cmp	local03, #31 wz
1449c     14 4E 05 A1 |  if_e	add	fp, #20
144a0     A7 24 02 AB |  if_e	rdlong	local04, fp
144a4     14 4E 85 A1 |  if_e	sub	fp, #20
144a8     12 23 02 A6 |  if_e	mov	local03, local04
144ac     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
144b0     28 00 90 5D |  if_ne	jmp	#LR__1620
144b4     00 1E 06 F6 | 	mov	local01, #0
144b8     A7 12 02 FB | 	rdlong	arg01, fp
144bc     0C 4E 05 F1 | 	add	fp, #12
144c0     A7 14 02 FB | 	rdlong	arg02, fp
144c4     0C 4E 85 F1 | 	sub	fp, #12
144c8     84 C4 B0 FD | 	call	#__system___string_cmp
144cc     01 FA 55 F2 | 	cmps	result1, #1 wc
144d0     00 1E 26 36 |  if_ae	not	local01, #0
144d4     A7 1E 62 FC | 	wrlong	local01, fp
144d8     1C 04 90 FD | 	jmp	#LR__1633
144dc                 | LR__1620
144dc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
144dc     08 4E 05 F1 | 	add	fp, #8
144e0     A7 1E 02 FB | 	rdlong	local01, fp
144e4     08 4E 85 F1 | 	sub	fp, #8
144e8     1E 1E 0E F2 | 	cmp	local01, #30 wz
144ec     14 4E 05 A1 |  if_e	add	fp, #20
144f0     A7 24 02 AB |  if_e	rdlong	local04, fp
144f4     14 4E 85 A1 |  if_e	sub	fp, #20
144f8     12 23 02 A6 |  if_e	mov	local03, local04
144fc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14500     2C 00 90 5D |  if_ne	jmp	#LR__1621
14504     00 1E 06 F6 | 	mov	local01, #0
14508     A7 12 02 FB | 	rdlong	arg01, fp
1450c     0C 4E 05 F1 | 	add	fp, #12
14510     A7 14 02 FB | 	rdlong	arg02, fp
14514     0C 4E 85 F1 | 	sub	fp, #12
14518     01 16 66 F6 | 	neg	arg03, #1
1451c     F0 F3 B0 FD | 	call	#__system___float_cmp
14520     01 FA 55 F2 | 	cmps	result1, #1 wc
14524     00 1E 26 36 |  if_ae	not	local01, #0
14528     A7 1E 62 FC | 	wrlong	local01, fp
1452c     C8 03 90 FD | 	jmp	#LR__1633
14530                 | LR__1621
14530                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
14530     08 4E 05 F1 | 	add	fp, #8
14534     A7 1E 02 FB | 	rdlong	local01, fp
14538     08 4E 85 F1 | 	sub	fp, #8
1453c     1E 1E 0E F2 | 	cmp	local01, #30 wz
14540     14 4E 05 A1 |  if_e	add	fp, #20
14544     A7 24 02 AB |  if_e	rdlong	local04, fp
14548     14 4E 85 A1 |  if_e	sub	fp, #20
1454c     12 23 02 A6 |  if_e	mov	local03, local04
14550     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14554     48 00 90 5D |  if_ne	jmp	#LR__1622
14558     00 1E 06 F6 | 	mov	local01, #0
1455c     A7 20 02 FB | 	rdlong	local02, fp
14560     0C 4E 05 F1 | 	add	fp, #12
14564     A7 12 02 FB | 	rdlong	arg01, fp
14568     0C 4E 85 F1 | 	sub	fp, #12
1456c     09 13 52 F6 | 	abs	arg01, arg01 wc
14570     1F 26 C6 C9 |  if_b	decod	local05, #31
14574     00 26 06 36 |  if_ae	mov	local05, #0
14578     5C EB B0 FD | 	call	#__system___float_fromuns
1457c     13 FB 61 F5 | 	xor	result1, local05
14580     FD 14 02 F6 | 	mov	arg02, result1
14584     10 13 02 F6 | 	mov	arg01, local02
14588     01 16 66 F6 | 	neg	arg03, #1
1458c     80 F3 B0 FD | 	call	#__system___float_cmp
14590     01 FA 55 F2 | 	cmps	result1, #1 wc
14594     00 1E 26 36 |  if_ae	not	local01, #0
14598     A7 1E 62 FC | 	wrlong	local01, fp
1459c     58 03 90 FD | 	jmp	#LR__1633
145a0                 | LR__1622
145a0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
145a0     08 4E 05 F1 | 	add	fp, #8
145a4     A7 1E 02 FB | 	rdlong	local01, fp
145a8     08 4E 85 F1 | 	sub	fp, #8
145ac     1E 1E 0E F2 | 	cmp	local01, #30 wz
145b0     14 4E 05 A1 |  if_e	add	fp, #20
145b4     A7 24 02 AB |  if_e	rdlong	local04, fp
145b8     14 4E 85 A1 |  if_e	sub	fp, #20
145bc     12 23 02 A6 |  if_e	mov	local03, local04
145c0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
145c4     38 00 90 5D |  if_ne	jmp	#LR__1623
145c8     00 1E 06 F6 | 	mov	local01, #0
145cc     A7 20 02 FB | 	rdlong	local02, fp
145d0     0C 4E 05 F1 | 	add	fp, #12
145d4     A7 12 02 FB | 	rdlong	arg01, fp
145d8     0C 4E 85 F1 | 	sub	fp, #12
145dc     F8 EA B0 FD | 	call	#__system___float_fromuns
145e0     FD 14 02 F6 | 	mov	arg02, result1
145e4     10 13 02 F6 | 	mov	arg01, local02
145e8     01 16 66 F6 | 	neg	arg03, #1
145ec     20 F3 B0 FD | 	call	#__system___float_cmp
145f0     01 FA 55 F2 | 	cmps	result1, #1 wc
145f4     00 1E 26 36 |  if_ae	not	local01, #0
145f8     A7 1E 62 FC | 	wrlong	local01, fp
145fc     F8 02 90 FD | 	jmp	#LR__1633
14600                 | LR__1623
14600                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
14600     08 4E 05 F1 | 	add	fp, #8
14604     A7 1E 02 FB | 	rdlong	local01, fp
14608     08 4E 85 F1 | 	sub	fp, #8
1460c     1C 1E 0E F2 | 	cmp	local01, #28 wz
14610     14 4E 05 A1 |  if_e	add	fp, #20
14614     A7 24 02 AB |  if_e	rdlong	local04, fp
14618     14 4E 85 A1 |  if_e	sub	fp, #20
1461c     12 23 02 A6 |  if_e	mov	local03, local04
14620     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14624     44 00 90 5D |  if_ne	jmp	#LR__1624
14628     00 1E 06 F6 | 	mov	local01, #0
1462c     A7 12 02 FB | 	rdlong	arg01, fp
14630     09 13 52 F6 | 	abs	arg01, arg01 wc
14634     1F 26 C6 C9 |  if_b	decod	local05, #31
14638     00 26 06 36 |  if_ae	mov	local05, #0
1463c     98 EA B0 FD | 	call	#__system___float_fromuns
14640     13 FB 61 F5 | 	xor	result1, local05
14644     FD 12 02 F6 | 	mov	arg01, result1
14648     0C 4E 05 F1 | 	add	fp, #12
1464c     A7 14 02 FB | 	rdlong	arg02, fp
14650     0C 4E 85 F1 | 	sub	fp, #12
14654     01 16 66 F6 | 	neg	arg03, #1
14658     B4 F2 B0 FD | 	call	#__system___float_cmp
1465c     01 FA 55 F2 | 	cmps	result1, #1 wc
14660     00 1E 26 36 |  if_ae	not	local01, #0
14664     A7 1E 62 FC | 	wrlong	local01, fp
14668     8C 02 90 FD | 	jmp	#LR__1633
1466c                 | LR__1624
1466c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1466c     08 4E 05 F1 | 	add	fp, #8
14670     A7 1E 02 FB | 	rdlong	local01, fp
14674     08 4E 85 F1 | 	sub	fp, #8
14678     1C 1E 0E F2 | 	cmp	local01, #28 wz
1467c     14 4E 05 A1 |  if_e	add	fp, #20
14680     A7 24 02 AB |  if_e	rdlong	local04, fp
14684     14 4E 85 A1 |  if_e	sub	fp, #20
14688     12 23 02 A6 |  if_e	mov	local03, local04
1468c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14690     24 00 90 5D |  if_ne	jmp	#LR__1625
14694     00 1E 06 F6 | 	mov	local01, #0
14698     A7 20 02 FB | 	rdlong	local02, fp
1469c     0C 4E 05 F1 | 	add	fp, #12
146a0     A7 22 02 FB | 	rdlong	local03, fp
146a4     0C 4E 85 F1 | 	sub	fp, #12
146a8     11 21 5A F2 | 	cmps	local02, local03 wcz
146ac     01 1E 66 16 |  if_a	neg	local01, #1
146b0     A7 1E 62 FC | 	wrlong	local01, fp
146b4     40 02 90 FD | 	jmp	#LR__1633
146b8                 | LR__1625
146b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
146b8     08 4E 05 F1 | 	add	fp, #8
146bc     A7 1E 02 FB | 	rdlong	local01, fp
146c0     08 4E 85 F1 | 	sub	fp, #8
146c4     1C 1E 0E F2 | 	cmp	local01, #28 wz
146c8     14 4E 05 A1 |  if_e	add	fp, #20
146cc     A7 24 02 AB |  if_e	rdlong	local04, fp
146d0     14 4E 85 A1 |  if_e	sub	fp, #20
146d4     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
146d8     24 00 90 5D |  if_ne	jmp	#LR__1626
146dc     00 1E 06 F6 | 	mov	local01, #0
146e0     A7 20 02 FB | 	rdlong	local02, fp
146e4     0C 4E 05 F1 | 	add	fp, #12
146e8     A7 22 02 FB | 	rdlong	local03, fp
146ec     0C 4E 85 F1 | 	sub	fp, #12
146f0     11 21 5A F2 | 	cmps	local02, local03 wcz
146f4     01 1E 66 16 |  if_a	neg	local01, #1
146f8     A7 1E 62 FC | 	wrlong	local01, fp
146fc     F8 01 90 FD | 	jmp	#LR__1633
14700                 | LR__1626
14700                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
14700     08 4E 05 F1 | 	add	fp, #8
14704     A7 1E 02 FB | 	rdlong	local01, fp
14708     08 4E 85 F1 | 	sub	fp, #8
1470c     1D 1E 0E F2 | 	cmp	local01, #29 wz
14710     14 4E 05 A1 |  if_e	add	fp, #20
14714     A7 22 02 AB |  if_e	rdlong	local03, fp
14718     14 4E 85 A1 |  if_e	sub	fp, #20
1471c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14720     34 00 90 5D |  if_ne	jmp	#LR__1627
14724     00 1E 06 F6 | 	mov	local01, #0
14728     A7 12 02 FB | 	rdlong	arg01, fp
1472c     A8 E9 B0 FD | 	call	#__system___float_fromuns
14730     FD 12 02 F6 | 	mov	arg01, result1
14734     0C 4E 05 F1 | 	add	fp, #12
14738     A7 14 02 FB | 	rdlong	arg02, fp
1473c     0C 4E 85 F1 | 	sub	fp, #12
14740     01 16 66 F6 | 	neg	arg03, #1
14744     C8 F1 B0 FD | 	call	#__system___float_cmp
14748     01 FA 55 F2 | 	cmps	result1, #1 wc
1474c     00 1E 26 36 |  if_ae	not	local01, #0
14750     A7 1E 62 FC | 	wrlong	local01, fp
14754     A0 01 90 FD | 	jmp	#LR__1633
14758                 | LR__1627
14758                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
14758     08 4E 05 F1 | 	add	fp, #8
1475c     A7 1E 02 FB | 	rdlong	local01, fp
14760     08 4E 85 F1 | 	sub	fp, #8
14764     1D 1E 0E F2 | 	cmp	local01, #29 wz
14768     14 4E 05 A1 |  if_e	add	fp, #20
1476c     A7 22 02 AB |  if_e	rdlong	local03, fp
14770     14 4E 85 A1 |  if_e	sub	fp, #20
14774     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14778     24 00 90 5D |  if_ne	jmp	#LR__1628
1477c     00 1E 06 F6 | 	mov	local01, #0
14780     A7 20 02 FB | 	rdlong	local02, fp
14784     0C 4E 05 F1 | 	add	fp, #12
14788     A7 22 02 FB | 	rdlong	local03, fp
1478c     0C 4E 85 F1 | 	sub	fp, #12
14790     11 21 5A F2 | 	cmps	local02, local03 wcz
14794     01 1E 66 16 |  if_a	neg	local01, #1
14798     A7 1E 62 FC | 	wrlong	local01, fp
1479c     58 01 90 FD | 	jmp	#LR__1633
147a0                 | LR__1628
147a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
147a0     08 4E 05 F1 | 	add	fp, #8
147a4     A7 1E 02 FB | 	rdlong	local01, fp
147a8     08 4E 85 F1 | 	sub	fp, #8
147ac     1D 1E 0E F2 | 	cmp	local01, #29 wz
147b0     14 4E 05 A1 |  if_e	add	fp, #20
147b4     A7 22 02 AB |  if_e	rdlong	local03, fp
147b8     14 4E 85 A1 |  if_e	sub	fp, #20
147bc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
147c0     24 00 90 5D |  if_ne	jmp	#LR__1629
147c4     00 1E 06 F6 | 	mov	local01, #0
147c8     A7 20 02 FB | 	rdlong	local02, fp
147cc     0C 4E 05 F1 | 	add	fp, #12
147d0     A7 22 02 FB | 	rdlong	local03, fp
147d4     0C 4E 85 F1 | 	sub	fp, #12
147d8     11 21 1A F2 | 	cmp	local02, local03 wcz
147dc     01 1E 66 16 |  if_a	neg	local01, #1
147e0     A7 1E 62 FC | 	wrlong	local01, fp
147e4     10 01 90 FD | 	jmp	#LR__1633
147e8                 | LR__1629
147e8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
147e8     08 4E 05 F1 | 	add	fp, #8
147ec     A7 1E 02 FB | 	rdlong	local01, fp
147f0     08 4E 85 F1 | 	sub	fp, #8
147f4     2B 1E 0E F2 | 	cmp	local01, #43 wz
147f8     14 4E 05 A1 |  if_e	add	fp, #20
147fc     A7 22 02 AB |  if_e	rdlong	local03, fp
14800     14 4E 85 A1 |  if_e	sub	fp, #20
14804     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14808     30 00 90 5D |  if_ne	jmp	#LR__1630
1480c     00 1E 06 F6 | 	mov	local01, #0
14810     A7 12 02 FB | 	rdlong	arg01, fp
14814     2C CC BF FD | 	call	#_convertstring
14818     FD 12 02 F6 | 	mov	arg01, result1
1481c     0C 4E 05 F1 | 	add	fp, #12
14820     A7 14 02 FB | 	rdlong	arg02, fp
14824     0C 4E 85 F1 | 	sub	fp, #12
14828     24 C1 B0 FD | 	call	#__system___string_cmp
1482c     01 FA 55 F2 | 	cmps	result1, #1 wc
14830     00 1E 26 36 |  if_ae	not	local01, #0
14834     A7 1E 62 FC | 	wrlong	local01, fp
14838     BC 00 90 FD | 	jmp	#LR__1633
1483c                 | LR__1630
1483c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1483c     08 4E 05 F1 | 	add	fp, #8
14840     A7 1E 02 FB | 	rdlong	local01, fp
14844     08 4E 85 F1 | 	sub	fp, #8
14848     1F 1E 0E F2 | 	cmp	local01, #31 wz
1484c     14 4E 05 A1 |  if_e	add	fp, #20
14850     A7 22 02 AB |  if_e	rdlong	local03, fp
14854     14 4E 85 A1 |  if_e	sub	fp, #20
14858     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1485c     34 00 90 5D |  if_ne	jmp	#LR__1631
14860     00 1E 06 F6 | 	mov	local01, #0
14864     A7 20 02 FB | 	rdlong	local02, fp
14868     0C 4E 05 F1 | 	add	fp, #12
1486c     A7 12 02 FB | 	rdlong	arg01, fp
14870     0C 4E 85 F1 | 	sub	fp, #12
14874     CC CB BF FD | 	call	#_convertstring
14878     FD 14 02 F6 | 	mov	arg02, result1
1487c     10 13 02 F6 | 	mov	arg01, local02
14880     CC C0 B0 FD | 	call	#__system___string_cmp
14884     01 FA 55 F2 | 	cmps	result1, #1 wc
14888     00 1E 26 36 |  if_ae	not	local01, #0
1488c     A7 1E 62 FC | 	wrlong	local01, fp
14890     64 00 90 FD | 	jmp	#LR__1633
14894                 | LR__1631
14894                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
14894     08 4E 05 F1 | 	add	fp, #8
14898     A7 1E 02 FB | 	rdlong	local01, fp
1489c     08 4E 85 F1 | 	sub	fp, #8
148a0     2B 1E 0E F2 | 	cmp	local01, #43 wz
148a4     14 4E 05 A1 |  if_e	add	fp, #20
148a8     A7 22 02 AB |  if_e	rdlong	local03, fp
148ac     14 4E 85 A1 |  if_e	sub	fp, #20
148b0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
148b4     3C 00 90 5D |  if_ne	jmp	#LR__1632
148b8     00 1E 06 F6 | 	mov	local01, #0
148bc     A7 12 02 FB | 	rdlong	arg01, fp
148c0     80 CB BF FD | 	call	#_convertstring
148c4     FD 20 02 F6 | 	mov	local02, result1
148c8     0C 4E 05 F1 | 	add	fp, #12
148cc     A7 12 02 FB | 	rdlong	arg01, fp
148d0     0C 4E 85 F1 | 	sub	fp, #12
148d4     6C CB BF FD | 	call	#_convertstring
148d8     FD 14 02 F6 | 	mov	arg02, result1
148dc     10 13 02 F6 | 	mov	arg01, local02
148e0     6C C0 B0 FD | 	call	#__system___string_cmp
148e4     01 FA 55 F2 | 	cmps	result1, #1 wc
148e8     00 1E 26 36 |  if_ae	not	local01, #0
148ec     A7 1E 62 FC | 	wrlong	local01, fp
148f0     04 00 90 FD | 	jmp	#LR__1633
148f4                 | LR__1632
148f4     A7 00 68 FC | 	wrlong	#0, fp
148f8                 | LR__1633
148f8     08 4E 05 F1 | 	add	fp, #8
148fc     A7 38 68 FC | 	wrlong	#28, fp
14900     08 4E 85 F1 | 	sub	fp, #8
14904     A7 12 02 F6 | 	mov	arg01, fp
14908     24 73 BF FD | 	call	#_push
1490c     A7 F0 03 F6 | 	mov	ptra, fp
14910     B2 00 A0 FD | 	call	#popregs_
14914                 | _do_gt_ret
14914     2D 00 64 FD | 	ret
14918                 | 
14918                 | ' 
14918                 | ' sub do_lt
14918                 | _do_lt
14918     05 4A 05 F6 | 	mov	COUNT_, #5
1491c     A8 00 A0 FD | 	call	#pushregs_
14920     18 F0 07 F1 | 	add	ptra, #24
14924     70 72 BF FD | 	call	#_pop
14928     FD 1E 02 F6 | 	mov	local01, result1
1492c     FE 20 02 F6 | 	mov	local02, result2
14930     FF 22 02 F6 | 	mov	local03, result3
14934     0C 4E 05 F1 | 	add	fp, #12
14938     A7 1E 62 FC | 	wrlong	local01, fp
1493c     04 4E 05 F1 | 	add	fp, #4
14940     A7 20 62 FC | 	wrlong	local02, fp
14944     04 4E 05 F1 | 	add	fp, #4
14948     A7 22 62 FC | 	wrlong	local03, fp
1494c     14 4E 85 F1 | 	sub	fp, #20
14950     44 72 BF FD | 	call	#_pop
14954     FF 22 02 F6 | 	mov	local03, result3
14958     A7 FA 61 FC | 	wrlong	result1, fp
1495c     04 4E 05 F1 | 	add	fp, #4
14960     A7 FC 61 FC | 	wrlong	result2, fp
14964     04 4E 05 F1 | 	add	fp, #4
14968     A7 22 62 FC | 	wrlong	local03, fp
1496c                 | ' t2=pop()
1496c                 | ' t1=pop()
1496c                 | ' 
1496c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1496c     08 4E 85 F1 | 	sub	fp, #8
14970     1F 22 0E F2 | 	cmp	local03, #31 wz
14974     14 4E 05 A1 |  if_e	add	fp, #20
14978     A7 24 02 AB |  if_e	rdlong	local04, fp
1497c     14 4E 85 A1 |  if_e	sub	fp, #20
14980     12 23 02 A6 |  if_e	mov	local03, local04
14984     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14988     28 00 90 5D |  if_ne	jmp	#LR__1640
1498c     00 1E 06 F6 | 	mov	local01, #0
14990     A7 12 02 FB | 	rdlong	arg01, fp
14994     0C 4E 05 F1 | 	add	fp, #12
14998     A7 14 02 FB | 	rdlong	arg02, fp
1499c     0C 4E 85 F1 | 	sub	fp, #12
149a0     AC BF B0 FD | 	call	#__system___string_cmp
149a4     00 FA 55 F2 | 	cmps	result1, #0 wc
149a8     00 1E 26 C6 |  if_b	not	local01, #0
149ac     A7 1E 62 FC | 	wrlong	local01, fp
149b0     0C 04 90 FD | 	jmp	#LR__1653
149b4                 | LR__1640
149b4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
149b4     08 4E 05 F1 | 	add	fp, #8
149b8     A7 1E 02 FB | 	rdlong	local01, fp
149bc     08 4E 85 F1 | 	sub	fp, #8
149c0     1E 1E 0E F2 | 	cmp	local01, #30 wz
149c4     14 4E 05 A1 |  if_e	add	fp, #20
149c8     A7 24 02 AB |  if_e	rdlong	local04, fp
149cc     14 4E 85 A1 |  if_e	sub	fp, #20
149d0     12 23 02 A6 |  if_e	mov	local03, local04
149d4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
149d8     2C 00 90 5D |  if_ne	jmp	#LR__1641
149dc     00 1E 06 F6 | 	mov	local01, #0
149e0     A7 12 02 FB | 	rdlong	arg01, fp
149e4     0C 4E 05 F1 | 	add	fp, #12
149e8     A7 14 02 FB | 	rdlong	arg02, fp
149ec     0C 4E 85 F1 | 	sub	fp, #12
149f0     01 16 06 F6 | 	mov	arg03, #1
149f4     18 EF B0 FD | 	call	#__system___float_cmp
149f8     00 FA 55 F2 | 	cmps	result1, #0 wc
149fc     00 1E 26 C6 |  if_b	not	local01, #0
14a00     A7 1E 62 FC | 	wrlong	local01, fp
14a04     B8 03 90 FD | 	jmp	#LR__1653
14a08                 | LR__1641
14a08                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
14a08     08 4E 05 F1 | 	add	fp, #8
14a0c     A7 1E 02 FB | 	rdlong	local01, fp
14a10     08 4E 85 F1 | 	sub	fp, #8
14a14     1E 1E 0E F2 | 	cmp	local01, #30 wz
14a18     14 4E 05 A1 |  if_e	add	fp, #20
14a1c     A7 24 02 AB |  if_e	rdlong	local04, fp
14a20     14 4E 85 A1 |  if_e	sub	fp, #20
14a24     12 23 02 A6 |  if_e	mov	local03, local04
14a28     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14a2c     48 00 90 5D |  if_ne	jmp	#LR__1642
14a30     00 1E 06 F6 | 	mov	local01, #0
14a34     A7 20 02 FB | 	rdlong	local02, fp
14a38     0C 4E 05 F1 | 	add	fp, #12
14a3c     A7 12 02 FB | 	rdlong	arg01, fp
14a40     0C 4E 85 F1 | 	sub	fp, #12
14a44     09 13 52 F6 | 	abs	arg01, arg01 wc
14a48     1F 26 C6 C9 |  if_b	decod	local05, #31
14a4c     00 26 06 36 |  if_ae	mov	local05, #0
14a50     84 E6 B0 FD | 	call	#__system___float_fromuns
14a54     13 FB 61 F5 | 	xor	result1, local05
14a58     FD 14 02 F6 | 	mov	arg02, result1
14a5c     10 13 02 F6 | 	mov	arg01, local02
14a60     01 16 06 F6 | 	mov	arg03, #1
14a64     A8 EE B0 FD | 	call	#__system___float_cmp
14a68     00 FA 55 F2 | 	cmps	result1, #0 wc
14a6c     00 1E 26 C6 |  if_b	not	local01, #0
14a70     A7 1E 62 FC | 	wrlong	local01, fp
14a74     48 03 90 FD | 	jmp	#LR__1653
14a78                 | LR__1642
14a78                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
14a78     08 4E 05 F1 | 	add	fp, #8
14a7c     A7 1E 02 FB | 	rdlong	local01, fp
14a80     08 4E 85 F1 | 	sub	fp, #8
14a84     1E 1E 0E F2 | 	cmp	local01, #30 wz
14a88     14 4E 05 A1 |  if_e	add	fp, #20
14a8c     A7 24 02 AB |  if_e	rdlong	local04, fp
14a90     14 4E 85 A1 |  if_e	sub	fp, #20
14a94     12 23 02 A6 |  if_e	mov	local03, local04
14a98     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14a9c     38 00 90 5D |  if_ne	jmp	#LR__1643
14aa0     00 1E 06 F6 | 	mov	local01, #0
14aa4     A7 20 02 FB | 	rdlong	local02, fp
14aa8     0C 4E 05 F1 | 	add	fp, #12
14aac     A7 12 02 FB | 	rdlong	arg01, fp
14ab0     0C 4E 85 F1 | 	sub	fp, #12
14ab4     20 E6 B0 FD | 	call	#__system___float_fromuns
14ab8     FD 14 02 F6 | 	mov	arg02, result1
14abc     10 13 02 F6 | 	mov	arg01, local02
14ac0     01 16 06 F6 | 	mov	arg03, #1
14ac4     48 EE B0 FD | 	call	#__system___float_cmp
14ac8     00 FA 55 F2 | 	cmps	result1, #0 wc
14acc     00 1E 26 C6 |  if_b	not	local01, #0
14ad0     A7 1E 62 FC | 	wrlong	local01, fp
14ad4     E8 02 90 FD | 	jmp	#LR__1653
14ad8                 | LR__1643
14ad8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
14ad8     08 4E 05 F1 | 	add	fp, #8
14adc     A7 1E 02 FB | 	rdlong	local01, fp
14ae0     08 4E 85 F1 | 	sub	fp, #8
14ae4     1C 1E 0E F2 | 	cmp	local01, #28 wz
14ae8     14 4E 05 A1 |  if_e	add	fp, #20
14aec     A7 24 02 AB |  if_e	rdlong	local04, fp
14af0     14 4E 85 A1 |  if_e	sub	fp, #20
14af4     12 23 02 A6 |  if_e	mov	local03, local04
14af8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14afc     44 00 90 5D |  if_ne	jmp	#LR__1644
14b00     00 1E 06 F6 | 	mov	local01, #0
14b04     A7 12 02 FB | 	rdlong	arg01, fp
14b08     09 13 52 F6 | 	abs	arg01, arg01 wc
14b0c     1F 26 C6 C9 |  if_b	decod	local05, #31
14b10     00 26 06 36 |  if_ae	mov	local05, #0
14b14     C0 E5 B0 FD | 	call	#__system___float_fromuns
14b18     13 FB 61 F5 | 	xor	result1, local05
14b1c     FD 12 02 F6 | 	mov	arg01, result1
14b20     0C 4E 05 F1 | 	add	fp, #12
14b24     A7 14 02 FB | 	rdlong	arg02, fp
14b28     0C 4E 85 F1 | 	sub	fp, #12
14b2c     01 16 06 F6 | 	mov	arg03, #1
14b30     DC ED B0 FD | 	call	#__system___float_cmp
14b34     00 FA 55 F2 | 	cmps	result1, #0 wc
14b38     00 1E 26 C6 |  if_b	not	local01, #0
14b3c     A7 1E 62 FC | 	wrlong	local01, fp
14b40     7C 02 90 FD | 	jmp	#LR__1653
14b44                 | LR__1644
14b44                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
14b44     08 4E 05 F1 | 	add	fp, #8
14b48     A7 1E 02 FB | 	rdlong	local01, fp
14b4c     08 4E 85 F1 | 	sub	fp, #8
14b50     1C 1E 0E F2 | 	cmp	local01, #28 wz
14b54     14 4E 05 A1 |  if_e	add	fp, #20
14b58     A7 24 02 AB |  if_e	rdlong	local04, fp
14b5c     14 4E 85 A1 |  if_e	sub	fp, #20
14b60     12 23 02 A6 |  if_e	mov	local03, local04
14b64     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14b68     20 00 90 5D |  if_ne	jmp	#LR__1645
14b6c     A7 20 02 FB | 	rdlong	local02, fp
14b70     0C 4E 05 F1 | 	add	fp, #12
14b74     A7 22 02 FB | 	rdlong	local03, fp
14b78     0C 4E 85 F1 | 	sub	fp, #12
14b7c     11 21 52 F2 | 	cmps	local02, local03 wc
14b80     0F 1F A2 F1 | 	subx	local01, local01
14b84     A7 1E 62 FC | 	wrlong	local01, fp
14b88     34 02 90 FD | 	jmp	#LR__1653
14b8c                 | LR__1645
14b8c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
14b8c     08 4E 05 F1 | 	add	fp, #8
14b90     A7 1E 02 FB | 	rdlong	local01, fp
14b94     08 4E 85 F1 | 	sub	fp, #8
14b98     1C 1E 0E F2 | 	cmp	local01, #28 wz
14b9c     14 4E 05 A1 |  if_e	add	fp, #20
14ba0     A7 24 02 AB |  if_e	rdlong	local04, fp
14ba4     14 4E 85 A1 |  if_e	sub	fp, #20
14ba8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
14bac     20 00 90 5D |  if_ne	jmp	#LR__1646
14bb0     A7 20 02 FB | 	rdlong	local02, fp
14bb4     0C 4E 05 F1 | 	add	fp, #12
14bb8     A7 22 02 FB | 	rdlong	local03, fp
14bbc     0C 4E 85 F1 | 	sub	fp, #12
14bc0     11 21 52 F2 | 	cmps	local02, local03 wc
14bc4     0F 1F A2 F1 | 	subx	local01, local01
14bc8     A7 1E 62 FC | 	wrlong	local01, fp
14bcc     F0 01 90 FD | 	jmp	#LR__1653
14bd0                 | LR__1646
14bd0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
14bd0     08 4E 05 F1 | 	add	fp, #8
14bd4     A7 1E 02 FB | 	rdlong	local01, fp
14bd8     08 4E 85 F1 | 	sub	fp, #8
14bdc     1D 1E 0E F2 | 	cmp	local01, #29 wz
14be0     14 4E 05 A1 |  if_e	add	fp, #20
14be4     A7 22 02 AB |  if_e	rdlong	local03, fp
14be8     14 4E 85 A1 |  if_e	sub	fp, #20
14bec     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14bf0     34 00 90 5D |  if_ne	jmp	#LR__1647
14bf4     00 1E 06 F6 | 	mov	local01, #0
14bf8     A7 12 02 FB | 	rdlong	arg01, fp
14bfc     D8 E4 B0 FD | 	call	#__system___float_fromuns
14c00     FD 12 02 F6 | 	mov	arg01, result1
14c04     0C 4E 05 F1 | 	add	fp, #12
14c08     A7 14 02 FB | 	rdlong	arg02, fp
14c0c     0C 4E 85 F1 | 	sub	fp, #12
14c10     01 16 06 F6 | 	mov	arg03, #1
14c14     F8 EC B0 FD | 	call	#__system___float_cmp
14c18     00 FA 55 F2 | 	cmps	result1, #0 wc
14c1c     00 1E 26 C6 |  if_b	not	local01, #0
14c20     A7 1E 62 FC | 	wrlong	local01, fp
14c24     98 01 90 FD | 	jmp	#LR__1653
14c28                 | LR__1647
14c28                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
14c28     08 4E 05 F1 | 	add	fp, #8
14c2c     A7 1E 02 FB | 	rdlong	local01, fp
14c30     08 4E 85 F1 | 	sub	fp, #8
14c34     1D 1E 0E F2 | 	cmp	local01, #29 wz
14c38     14 4E 05 A1 |  if_e	add	fp, #20
14c3c     A7 22 02 AB |  if_e	rdlong	local03, fp
14c40     14 4E 85 A1 |  if_e	sub	fp, #20
14c44     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14c48     20 00 90 5D |  if_ne	jmp	#LR__1648
14c4c     A7 20 02 FB | 	rdlong	local02, fp
14c50     0C 4E 05 F1 | 	add	fp, #12
14c54     A7 22 02 FB | 	rdlong	local03, fp
14c58     0C 4E 85 F1 | 	sub	fp, #12
14c5c     11 21 52 F2 | 	cmps	local02, local03 wc
14c60     0F 1F A2 F1 | 	subx	local01, local01
14c64     A7 1E 62 FC | 	wrlong	local01, fp
14c68     54 01 90 FD | 	jmp	#LR__1653
14c6c                 | LR__1648
14c6c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
14c6c     08 4E 05 F1 | 	add	fp, #8
14c70     A7 1E 02 FB | 	rdlong	local01, fp
14c74     08 4E 85 F1 | 	sub	fp, #8
14c78     1D 1E 0E F2 | 	cmp	local01, #29 wz
14c7c     14 4E 05 A1 |  if_e	add	fp, #20
14c80     A7 22 02 AB |  if_e	rdlong	local03, fp
14c84     14 4E 85 A1 |  if_e	sub	fp, #20
14c88     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14c8c     20 00 90 5D |  if_ne	jmp	#LR__1649
14c90     A7 20 02 FB | 	rdlong	local02, fp
14c94     0C 4E 05 F1 | 	add	fp, #12
14c98     A7 22 02 FB | 	rdlong	local03, fp
14c9c     0C 4E 85 F1 | 	sub	fp, #12
14ca0     11 21 12 F2 | 	cmp	local02, local03 wc
14ca4     0F 1F A2 F1 | 	subx	local01, local01
14ca8     A7 1E 62 FC | 	wrlong	local01, fp
14cac     10 01 90 FD | 	jmp	#LR__1653
14cb0                 | LR__1649
14cb0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
14cb0     08 4E 05 F1 | 	add	fp, #8
14cb4     A7 1E 02 FB | 	rdlong	local01, fp
14cb8     08 4E 85 F1 | 	sub	fp, #8
14cbc     2B 1E 0E F2 | 	cmp	local01, #43 wz
14cc0     14 4E 05 A1 |  if_e	add	fp, #20
14cc4     A7 22 02 AB |  if_e	rdlong	local03, fp
14cc8     14 4E 85 A1 |  if_e	sub	fp, #20
14ccc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14cd0     30 00 90 5D |  if_ne	jmp	#LR__1650
14cd4     00 1E 06 F6 | 	mov	local01, #0
14cd8     A7 12 02 FB | 	rdlong	arg01, fp
14cdc     64 C7 BF FD | 	call	#_convertstring
14ce0     FD 12 02 F6 | 	mov	arg01, result1
14ce4     0C 4E 05 F1 | 	add	fp, #12
14ce8     A7 14 02 FB | 	rdlong	arg02, fp
14cec     0C 4E 85 F1 | 	sub	fp, #12
14cf0     5C BC B0 FD | 	call	#__system___string_cmp
14cf4     00 FA 55 F2 | 	cmps	result1, #0 wc
14cf8     00 1E 26 C6 |  if_b	not	local01, #0
14cfc     A7 1E 62 FC | 	wrlong	local01, fp
14d00     BC 00 90 FD | 	jmp	#LR__1653
14d04                 | LR__1650
14d04                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
14d04     08 4E 05 F1 | 	add	fp, #8
14d08     A7 1E 02 FB | 	rdlong	local01, fp
14d0c     08 4E 85 F1 | 	sub	fp, #8
14d10     1F 1E 0E F2 | 	cmp	local01, #31 wz
14d14     14 4E 05 A1 |  if_e	add	fp, #20
14d18     A7 22 02 AB |  if_e	rdlong	local03, fp
14d1c     14 4E 85 A1 |  if_e	sub	fp, #20
14d20     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
14d24     34 00 90 5D |  if_ne	jmp	#LR__1651
14d28     00 1E 06 F6 | 	mov	local01, #0
14d2c     A7 20 02 FB | 	rdlong	local02, fp
14d30     0C 4E 05 F1 | 	add	fp, #12
14d34     A7 12 02 FB | 	rdlong	arg01, fp
14d38     0C 4E 85 F1 | 	sub	fp, #12
14d3c     04 C7 BF FD | 	call	#_convertstring
14d40     FD 14 02 F6 | 	mov	arg02, result1
14d44     10 13 02 F6 | 	mov	arg01, local02
14d48     04 BC B0 FD | 	call	#__system___string_cmp
14d4c     00 FA 55 F2 | 	cmps	result1, #0 wc
14d50     00 1E 26 C6 |  if_b	not	local01, #0
14d54     A7 1E 62 FC | 	wrlong	local01, fp
14d58     64 00 90 FD | 	jmp	#LR__1653
14d5c                 | LR__1651
14d5c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
14d5c     08 4E 05 F1 | 	add	fp, #8
14d60     A7 1E 02 FB | 	rdlong	local01, fp
14d64     08 4E 85 F1 | 	sub	fp, #8
14d68     2B 1E 0E F2 | 	cmp	local01, #43 wz
14d6c     14 4E 05 A1 |  if_e	add	fp, #20
14d70     A7 22 02 AB |  if_e	rdlong	local03, fp
14d74     14 4E 85 A1 |  if_e	sub	fp, #20
14d78     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
14d7c     3C 00 90 5D |  if_ne	jmp	#LR__1652
14d80     00 1E 06 F6 | 	mov	local01, #0
14d84     A7 12 02 FB | 	rdlong	arg01, fp
14d88     B8 C6 BF FD | 	call	#_convertstring
14d8c     FD 20 02 F6 | 	mov	local02, result1
14d90     0C 4E 05 F1 | 	add	fp, #12
14d94     A7 12 02 FB | 	rdlong	arg01, fp
14d98     0C 4E 85 F1 | 	sub	fp, #12
14d9c     A4 C6 BF FD | 	call	#_convertstring
14da0     FD 14 02 F6 | 	mov	arg02, result1
14da4     10 13 02 F6 | 	mov	arg01, local02
14da8     A4 BB B0 FD | 	call	#__system___string_cmp
14dac     00 FA 55 F2 | 	cmps	result1, #0 wc
14db0     00 1E 26 C6 |  if_b	not	local01, #0
14db4     A7 1E 62 FC | 	wrlong	local01, fp
14db8     04 00 90 FD | 	jmp	#LR__1653
14dbc                 | LR__1652
14dbc     A7 00 68 FC | 	wrlong	#0, fp
14dc0                 | LR__1653
14dc0     08 4E 05 F1 | 	add	fp, #8
14dc4     A7 38 68 FC | 	wrlong	#28, fp
14dc8     08 4E 85 F1 | 	sub	fp, #8
14dcc     A7 12 02 F6 | 	mov	arg01, fp
14dd0     5C 6E BF FD | 	call	#_push
14dd4     A7 F0 03 F6 | 	mov	ptra, fp
14dd8     B2 00 A0 FD | 	call	#popregs_
14ddc                 | _do_lt_ret
14ddc     2D 00 64 FD | 	ret
14de0                 | 
14de0                 | ' 
14de0                 | ' sub do_ge
14de0                 | _do_ge
14de0     05 4A 05 F6 | 	mov	COUNT_, #5
14de4     A8 00 A0 FD | 	call	#pushregs_
14de8     18 F0 07 F1 | 	add	ptra, #24
14dec     A8 6D BF FD | 	call	#_pop
14df0     FD 1E 02 F6 | 	mov	local01, result1
14df4     FE 20 02 F6 | 	mov	local02, result2
14df8     FF 22 02 F6 | 	mov	local03, result3
14dfc     0C 4E 05 F1 | 	add	fp, #12
14e00     A7 1E 62 FC | 	wrlong	local01, fp
14e04     04 4E 05 F1 | 	add	fp, #4
14e08     A7 20 62 FC | 	wrlong	local02, fp
14e0c     04 4E 05 F1 | 	add	fp, #4
14e10     A7 22 62 FC | 	wrlong	local03, fp
14e14     14 4E 85 F1 | 	sub	fp, #20
14e18     7C 6D BF FD | 	call	#_pop
14e1c     FF 22 02 F6 | 	mov	local03, result3
14e20     A7 FA 61 FC | 	wrlong	result1, fp
14e24     04 4E 05 F1 | 	add	fp, #4
14e28     A7 FC 61 FC | 	wrlong	result2, fp
14e2c     04 4E 05 F1 | 	add	fp, #4
14e30     A7 22 62 FC | 	wrlong	local03, fp
14e34                 | ' t2=pop()
14e34                 | ' t1=pop()
14e34                 | ' 
14e34                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
14e34     08 4E 85 F1 | 	sub	fp, #8
14e38     1F 22 0E F2 | 	cmp	local03, #31 wz
14e3c     14 4E 05 A1 |  if_e	add	fp, #20
14e40     A7 24 02 AB |  if_e	rdlong	local04, fp
14e44     14 4E 85 A1 |  if_e	sub	fp, #20
14e48     12 23 02 A6 |  if_e	mov	local03, local04
14e4c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14e50     28 00 90 5D |  if_ne	jmp	#LR__1660
14e54     00 1E 06 F6 | 	mov	local01, #0
14e58     A7 12 02 FB | 	rdlong	arg01, fp
14e5c     0C 4E 05 F1 | 	add	fp, #12
14e60     A7 14 02 FB | 	rdlong	arg02, fp
14e64     0C 4E 85 F1 | 	sub	fp, #12
14e68     E4 BA B0 FD | 	call	#__system___string_cmp
14e6c     00 FA 55 F2 | 	cmps	result1, #0 wc
14e70     00 1E 26 36 |  if_ae	not	local01, #0
14e74     A7 1E 62 FC | 	wrlong	local01, fp
14e78     1C 04 90 FD | 	jmp	#LR__1673
14e7c                 | LR__1660
14e7c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
14e7c     08 4E 05 F1 | 	add	fp, #8
14e80     A7 1E 02 FB | 	rdlong	local01, fp
14e84     08 4E 85 F1 | 	sub	fp, #8
14e88     1E 1E 0E F2 | 	cmp	local01, #30 wz
14e8c     14 4E 05 A1 |  if_e	add	fp, #20
14e90     A7 24 02 AB |  if_e	rdlong	local04, fp
14e94     14 4E 85 A1 |  if_e	sub	fp, #20
14e98     12 23 02 A6 |  if_e	mov	local03, local04
14e9c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14ea0     2C 00 90 5D |  if_ne	jmp	#LR__1661
14ea4     00 1E 06 F6 | 	mov	local01, #0
14ea8     A7 12 02 FB | 	rdlong	arg01, fp
14eac     0C 4E 05 F1 | 	add	fp, #12
14eb0     A7 14 02 FB | 	rdlong	arg02, fp
14eb4     0C 4E 85 F1 | 	sub	fp, #12
14eb8     01 16 66 F6 | 	neg	arg03, #1
14ebc     50 EA B0 FD | 	call	#__system___float_cmp
14ec0     00 FA 55 F2 | 	cmps	result1, #0 wc
14ec4     00 1E 26 36 |  if_ae	not	local01, #0
14ec8     A7 1E 62 FC | 	wrlong	local01, fp
14ecc     C8 03 90 FD | 	jmp	#LR__1673
14ed0                 | LR__1661
14ed0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
14ed0     08 4E 05 F1 | 	add	fp, #8
14ed4     A7 1E 02 FB | 	rdlong	local01, fp
14ed8     08 4E 85 F1 | 	sub	fp, #8
14edc     1E 1E 0E F2 | 	cmp	local01, #30 wz
14ee0     14 4E 05 A1 |  if_e	add	fp, #20
14ee4     A7 24 02 AB |  if_e	rdlong	local04, fp
14ee8     14 4E 85 A1 |  if_e	sub	fp, #20
14eec     12 23 02 A6 |  if_e	mov	local03, local04
14ef0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14ef4     48 00 90 5D |  if_ne	jmp	#LR__1662
14ef8     00 1E 06 F6 | 	mov	local01, #0
14efc     A7 20 02 FB | 	rdlong	local02, fp
14f00     0C 4E 05 F1 | 	add	fp, #12
14f04     A7 12 02 FB | 	rdlong	arg01, fp
14f08     0C 4E 85 F1 | 	sub	fp, #12
14f0c     09 13 52 F6 | 	abs	arg01, arg01 wc
14f10     1F 26 C6 C9 |  if_b	decod	local05, #31
14f14     00 26 06 36 |  if_ae	mov	local05, #0
14f18     BC E1 B0 FD | 	call	#__system___float_fromuns
14f1c     13 FB 61 F5 | 	xor	result1, local05
14f20     FD 14 02 F6 | 	mov	arg02, result1
14f24     10 13 02 F6 | 	mov	arg01, local02
14f28     01 16 66 F6 | 	neg	arg03, #1
14f2c     E0 E9 B0 FD | 	call	#__system___float_cmp
14f30     00 FA 55 F2 | 	cmps	result1, #0 wc
14f34     00 1E 26 36 |  if_ae	not	local01, #0
14f38     A7 1E 62 FC | 	wrlong	local01, fp
14f3c     58 03 90 FD | 	jmp	#LR__1673
14f40                 | LR__1662
14f40                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
14f40     08 4E 05 F1 | 	add	fp, #8
14f44     A7 1E 02 FB | 	rdlong	local01, fp
14f48     08 4E 85 F1 | 	sub	fp, #8
14f4c     1E 1E 0E F2 | 	cmp	local01, #30 wz
14f50     14 4E 05 A1 |  if_e	add	fp, #20
14f54     A7 24 02 AB |  if_e	rdlong	local04, fp
14f58     14 4E 85 A1 |  if_e	sub	fp, #20
14f5c     12 23 02 A6 |  if_e	mov	local03, local04
14f60     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14f64     38 00 90 5D |  if_ne	jmp	#LR__1663
14f68     00 1E 06 F6 | 	mov	local01, #0
14f6c     A7 20 02 FB | 	rdlong	local02, fp
14f70     0C 4E 05 F1 | 	add	fp, #12
14f74     A7 12 02 FB | 	rdlong	arg01, fp
14f78     0C 4E 85 F1 | 	sub	fp, #12
14f7c     58 E1 B0 FD | 	call	#__system___float_fromuns
14f80     FD 14 02 F6 | 	mov	arg02, result1
14f84     10 13 02 F6 | 	mov	arg01, local02
14f88     01 16 66 F6 | 	neg	arg03, #1
14f8c     80 E9 B0 FD | 	call	#__system___float_cmp
14f90     00 FA 55 F2 | 	cmps	result1, #0 wc
14f94     00 1E 26 36 |  if_ae	not	local01, #0
14f98     A7 1E 62 FC | 	wrlong	local01, fp
14f9c     F8 02 90 FD | 	jmp	#LR__1673
14fa0                 | LR__1663
14fa0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
14fa0     08 4E 05 F1 | 	add	fp, #8
14fa4     A7 1E 02 FB | 	rdlong	local01, fp
14fa8     08 4E 85 F1 | 	sub	fp, #8
14fac     1C 1E 0E F2 | 	cmp	local01, #28 wz
14fb0     14 4E 05 A1 |  if_e	add	fp, #20
14fb4     A7 24 02 AB |  if_e	rdlong	local04, fp
14fb8     14 4E 85 A1 |  if_e	sub	fp, #20
14fbc     12 23 02 A6 |  if_e	mov	local03, local04
14fc0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14fc4     44 00 90 5D |  if_ne	jmp	#LR__1664
14fc8     00 1E 06 F6 | 	mov	local01, #0
14fcc     A7 12 02 FB | 	rdlong	arg01, fp
14fd0     09 13 52 F6 | 	abs	arg01, arg01 wc
14fd4     1F 26 C6 C9 |  if_b	decod	local05, #31
14fd8     00 26 06 36 |  if_ae	mov	local05, #0
14fdc     F8 E0 B0 FD | 	call	#__system___float_fromuns
14fe0     13 FB 61 F5 | 	xor	result1, local05
14fe4     FD 12 02 F6 | 	mov	arg01, result1
14fe8     0C 4E 05 F1 | 	add	fp, #12
14fec     A7 14 02 FB | 	rdlong	arg02, fp
14ff0     0C 4E 85 F1 | 	sub	fp, #12
14ff4     01 16 66 F6 | 	neg	arg03, #1
14ff8     14 E9 B0 FD | 	call	#__system___float_cmp
14ffc     00 FA 55 F2 | 	cmps	result1, #0 wc
15000     00 1E 26 36 |  if_ae	not	local01, #0
15004     A7 1E 62 FC | 	wrlong	local01, fp
15008     8C 02 90 FD | 	jmp	#LR__1673
1500c                 | LR__1664
1500c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1500c     08 4E 05 F1 | 	add	fp, #8
15010     A7 1E 02 FB | 	rdlong	local01, fp
15014     08 4E 85 F1 | 	sub	fp, #8
15018     1C 1E 0E F2 | 	cmp	local01, #28 wz
1501c     14 4E 05 A1 |  if_e	add	fp, #20
15020     A7 24 02 AB |  if_e	rdlong	local04, fp
15024     14 4E 85 A1 |  if_e	sub	fp, #20
15028     12 23 02 A6 |  if_e	mov	local03, local04
1502c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
15030     24 00 90 5D |  if_ne	jmp	#LR__1665
15034     00 1E 06 F6 | 	mov	local01, #0
15038     A7 20 02 FB | 	rdlong	local02, fp
1503c     0C 4E 05 F1 | 	add	fp, #12
15040     A7 22 02 FB | 	rdlong	local03, fp
15044     0C 4E 85 F1 | 	sub	fp, #12
15048     11 21 52 F2 | 	cmps	local02, local03 wc
1504c     01 1E 66 36 |  if_ae	neg	local01, #1
15050     A7 1E 62 FC | 	wrlong	local01, fp
15054     40 02 90 FD | 	jmp	#LR__1673
15058                 | LR__1665
15058                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
15058     08 4E 05 F1 | 	add	fp, #8
1505c     A7 1E 02 FB | 	rdlong	local01, fp
15060     08 4E 85 F1 | 	sub	fp, #8
15064     1C 1E 0E F2 | 	cmp	local01, #28 wz
15068     14 4E 05 A1 |  if_e	add	fp, #20
1506c     A7 24 02 AB |  if_e	rdlong	local04, fp
15070     14 4E 85 A1 |  if_e	sub	fp, #20
15074     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
15078     24 00 90 5D |  if_ne	jmp	#LR__1666
1507c     00 1E 06 F6 | 	mov	local01, #0
15080     A7 20 02 FB | 	rdlong	local02, fp
15084     0C 4E 05 F1 | 	add	fp, #12
15088     A7 22 02 FB | 	rdlong	local03, fp
1508c     0C 4E 85 F1 | 	sub	fp, #12
15090     11 21 52 F2 | 	cmps	local02, local03 wc
15094     01 1E 66 36 |  if_ae	neg	local01, #1
15098     A7 1E 62 FC | 	wrlong	local01, fp
1509c     F8 01 90 FD | 	jmp	#LR__1673
150a0                 | LR__1666
150a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
150a0     08 4E 05 F1 | 	add	fp, #8
150a4     A7 1E 02 FB | 	rdlong	local01, fp
150a8     08 4E 85 F1 | 	sub	fp, #8
150ac     1D 1E 0E F2 | 	cmp	local01, #29 wz
150b0     14 4E 05 A1 |  if_e	add	fp, #20
150b4     A7 22 02 AB |  if_e	rdlong	local03, fp
150b8     14 4E 85 A1 |  if_e	sub	fp, #20
150bc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
150c0     34 00 90 5D |  if_ne	jmp	#LR__1667
150c4     00 1E 06 F6 | 	mov	local01, #0
150c8     A7 12 02 FB | 	rdlong	arg01, fp
150cc     08 E0 B0 FD | 	call	#__system___float_fromuns
150d0     FD 12 02 F6 | 	mov	arg01, result1
150d4     0C 4E 05 F1 | 	add	fp, #12
150d8     A7 14 02 FB | 	rdlong	arg02, fp
150dc     0C 4E 85 F1 | 	sub	fp, #12
150e0     01 16 66 F6 | 	neg	arg03, #1
150e4     28 E8 B0 FD | 	call	#__system___float_cmp
150e8     00 FA 55 F2 | 	cmps	result1, #0 wc
150ec     00 1E 26 36 |  if_ae	not	local01, #0
150f0     A7 1E 62 FC | 	wrlong	local01, fp
150f4     A0 01 90 FD | 	jmp	#LR__1673
150f8                 | LR__1667
150f8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
150f8     08 4E 05 F1 | 	add	fp, #8
150fc     A7 1E 02 FB | 	rdlong	local01, fp
15100     08 4E 85 F1 | 	sub	fp, #8
15104     1D 1E 0E F2 | 	cmp	local01, #29 wz
15108     14 4E 05 A1 |  if_e	add	fp, #20
1510c     A7 22 02 AB |  if_e	rdlong	local03, fp
15110     14 4E 85 A1 |  if_e	sub	fp, #20
15114     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
15118     24 00 90 5D |  if_ne	jmp	#LR__1668
1511c     00 1E 06 F6 | 	mov	local01, #0
15120     A7 20 02 FB | 	rdlong	local02, fp
15124     0C 4E 05 F1 | 	add	fp, #12
15128     A7 22 02 FB | 	rdlong	local03, fp
1512c     0C 4E 85 F1 | 	sub	fp, #12
15130     11 21 52 F2 | 	cmps	local02, local03 wc
15134     01 1E 66 36 |  if_ae	neg	local01, #1
15138     A7 1E 62 FC | 	wrlong	local01, fp
1513c     58 01 90 FD | 	jmp	#LR__1673
15140                 | LR__1668
15140                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
15140     08 4E 05 F1 | 	add	fp, #8
15144     A7 1E 02 FB | 	rdlong	local01, fp
15148     08 4E 85 F1 | 	sub	fp, #8
1514c     1D 1E 0E F2 | 	cmp	local01, #29 wz
15150     14 4E 05 A1 |  if_e	add	fp, #20
15154     A7 22 02 AB |  if_e	rdlong	local03, fp
15158     14 4E 85 A1 |  if_e	sub	fp, #20
1515c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
15160     24 00 90 5D |  if_ne	jmp	#LR__1669
15164     00 1E 06 F6 | 	mov	local01, #0
15168     A7 20 02 FB | 	rdlong	local02, fp
1516c     0C 4E 05 F1 | 	add	fp, #12
15170     A7 22 02 FB | 	rdlong	local03, fp
15174     0C 4E 85 F1 | 	sub	fp, #12
15178     11 21 12 F2 | 	cmp	local02, local03 wc
1517c     01 1E 66 36 |  if_ae	neg	local01, #1
15180     A7 1E 62 FC | 	wrlong	local01, fp
15184     10 01 90 FD | 	jmp	#LR__1673
15188                 | LR__1669
15188                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
15188     08 4E 05 F1 | 	add	fp, #8
1518c     A7 1E 02 FB | 	rdlong	local01, fp
15190     08 4E 85 F1 | 	sub	fp, #8
15194     2B 1E 0E F2 | 	cmp	local01, #43 wz
15198     14 4E 05 A1 |  if_e	add	fp, #20
1519c     A7 22 02 AB |  if_e	rdlong	local03, fp
151a0     14 4E 85 A1 |  if_e	sub	fp, #20
151a4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
151a8     30 00 90 5D |  if_ne	jmp	#LR__1670
151ac     00 1E 06 F6 | 	mov	local01, #0
151b0     A7 12 02 FB | 	rdlong	arg01, fp
151b4     8C C2 BF FD | 	call	#_convertstring
151b8     FD 12 02 F6 | 	mov	arg01, result1
151bc     0C 4E 05 F1 | 	add	fp, #12
151c0     A7 14 02 FB | 	rdlong	arg02, fp
151c4     0C 4E 85 F1 | 	sub	fp, #12
151c8     84 B7 B0 FD | 	call	#__system___string_cmp
151cc     00 FA 55 F2 | 	cmps	result1, #0 wc
151d0     00 1E 26 36 |  if_ae	not	local01, #0
151d4     A7 1E 62 FC | 	wrlong	local01, fp
151d8     BC 00 90 FD | 	jmp	#LR__1673
151dc                 | LR__1670
151dc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
151dc     08 4E 05 F1 | 	add	fp, #8
151e0     A7 1E 02 FB | 	rdlong	local01, fp
151e4     08 4E 85 F1 | 	sub	fp, #8
151e8     1F 1E 0E F2 | 	cmp	local01, #31 wz
151ec     14 4E 05 A1 |  if_e	add	fp, #20
151f0     A7 22 02 AB |  if_e	rdlong	local03, fp
151f4     14 4E 85 A1 |  if_e	sub	fp, #20
151f8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
151fc     34 00 90 5D |  if_ne	jmp	#LR__1671
15200     00 1E 06 F6 | 	mov	local01, #0
15204     A7 20 02 FB | 	rdlong	local02, fp
15208     0C 4E 05 F1 | 	add	fp, #12
1520c     A7 12 02 FB | 	rdlong	arg01, fp
15210     0C 4E 85 F1 | 	sub	fp, #12
15214     2C C2 BF FD | 	call	#_convertstring
15218     FD 14 02 F6 | 	mov	arg02, result1
1521c     10 13 02 F6 | 	mov	arg01, local02
15220     2C B7 B0 FD | 	call	#__system___string_cmp
15224     00 FA 55 F2 | 	cmps	result1, #0 wc
15228     00 1E 26 36 |  if_ae	not	local01, #0
1522c     A7 1E 62 FC | 	wrlong	local01, fp
15230     64 00 90 FD | 	jmp	#LR__1673
15234                 | LR__1671
15234                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
15234     08 4E 05 F1 | 	add	fp, #8
15238     A7 1E 02 FB | 	rdlong	local01, fp
1523c     08 4E 85 F1 | 	sub	fp, #8
15240     2B 1E 0E F2 | 	cmp	local01, #43 wz
15244     14 4E 05 A1 |  if_e	add	fp, #20
15248     A7 22 02 AB |  if_e	rdlong	local03, fp
1524c     14 4E 85 A1 |  if_e	sub	fp, #20
15250     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
15254     3C 00 90 5D |  if_ne	jmp	#LR__1672
15258     00 1E 06 F6 | 	mov	local01, #0
1525c     A7 12 02 FB | 	rdlong	arg01, fp
15260     E0 C1 BF FD | 	call	#_convertstring
15264     FD 20 02 F6 | 	mov	local02, result1
15268     0C 4E 05 F1 | 	add	fp, #12
1526c     A7 12 02 FB | 	rdlong	arg01, fp
15270     0C 4E 85 F1 | 	sub	fp, #12
15274     CC C1 BF FD | 	call	#_convertstring
15278     FD 14 02 F6 | 	mov	arg02, result1
1527c     10 13 02 F6 | 	mov	arg01, local02
15280     CC B6 B0 FD | 	call	#__system___string_cmp
15284     00 FA 55 F2 | 	cmps	result1, #0 wc
15288     00 1E 26 36 |  if_ae	not	local01, #0
1528c     A7 1E 62 FC | 	wrlong	local01, fp
15290     04 00 90 FD | 	jmp	#LR__1673
15294                 | LR__1672
15294     A7 00 68 FC | 	wrlong	#0, fp
15298                 | LR__1673
15298     08 4E 05 F1 | 	add	fp, #8
1529c     A7 38 68 FC | 	wrlong	#28, fp
152a0     08 4E 85 F1 | 	sub	fp, #8
152a4     A7 12 02 F6 | 	mov	arg01, fp
152a8     84 69 BF FD | 	call	#_push
152ac     A7 F0 03 F6 | 	mov	ptra, fp
152b0     B2 00 A0 FD | 	call	#popregs_
152b4                 | _do_ge_ret
152b4     2D 00 64 FD | 	ret
152b8                 | 
152b8                 | ' 
152b8                 | ' sub do_le
152b8                 | _do_le
152b8     05 4A 05 F6 | 	mov	COUNT_, #5
152bc     A8 00 A0 FD | 	call	#pushregs_
152c0     18 F0 07 F1 | 	add	ptra, #24
152c4     D0 68 BF FD | 	call	#_pop
152c8     FD 1E 02 F6 | 	mov	local01, result1
152cc     FE 20 02 F6 | 	mov	local02, result2
152d0     FF 22 02 F6 | 	mov	local03, result3
152d4     0C 4E 05 F1 | 	add	fp, #12
152d8     A7 1E 62 FC | 	wrlong	local01, fp
152dc     04 4E 05 F1 | 	add	fp, #4
152e0     A7 20 62 FC | 	wrlong	local02, fp
152e4     04 4E 05 F1 | 	add	fp, #4
152e8     A7 22 62 FC | 	wrlong	local03, fp
152ec     14 4E 85 F1 | 	sub	fp, #20
152f0     A4 68 BF FD | 	call	#_pop
152f4     FF 22 02 F6 | 	mov	local03, result3
152f8     A7 FA 61 FC | 	wrlong	result1, fp
152fc     04 4E 05 F1 | 	add	fp, #4
15300     A7 FC 61 FC | 	wrlong	result2, fp
15304     04 4E 05 F1 | 	add	fp, #4
15308     A7 22 62 FC | 	wrlong	local03, fp
1530c                 | ' t2=pop()
1530c                 | ' t1=pop()
1530c                 | ' 
1530c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1530c     08 4E 85 F1 | 	sub	fp, #8
15310     1F 22 0E F2 | 	cmp	local03, #31 wz
15314     14 4E 05 A1 |  if_e	add	fp, #20
15318     A7 24 02 AB |  if_e	rdlong	local04, fp
1531c     14 4E 85 A1 |  if_e	sub	fp, #20
15320     12 23 02 A6 |  if_e	mov	local03, local04
15324     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
15328     28 00 90 5D |  if_ne	jmp	#LR__1680
1532c     00 1E 06 F6 | 	mov	local01, #0
15330     A7 12 02 FB | 	rdlong	arg01, fp
15334     0C 4E 05 F1 | 	add	fp, #12
15338     A7 14 02 FB | 	rdlong	arg02, fp
1533c     0C 4E 85 F1 | 	sub	fp, #12
15340     0C B6 B0 FD | 	call	#__system___string_cmp
15344     01 FA 55 F2 | 	cmps	result1, #1 wc
15348     00 1E 26 C6 |  if_b	not	local01, #0
1534c     A7 1E 62 FC | 	wrlong	local01, fp
15350     1C 04 90 FD | 	jmp	#LR__1693
15354                 | LR__1680
15354                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
15354     08 4E 05 F1 | 	add	fp, #8
15358     A7 1E 02 FB | 	rdlong	local01, fp
1535c     08 4E 85 F1 | 	sub	fp, #8
15360     1E 1E 0E F2 | 	cmp	local01, #30 wz
15364     14 4E 05 A1 |  if_e	add	fp, #20
15368     A7 24 02 AB |  if_e	rdlong	local04, fp
1536c     14 4E 85 A1 |  if_e	sub	fp, #20
15370     12 23 02 A6 |  if_e	mov	local03, local04
15374     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
15378     2C 00 90 5D |  if_ne	jmp	#LR__1681
1537c     00 1E 06 F6 | 	mov	local01, #0
15380     A7 12 02 FB | 	rdlong	arg01, fp
15384     0C 4E 05 F1 | 	add	fp, #12
15388     A7 14 02 FB | 	rdlong	arg02, fp
1538c     0C 4E 85 F1 | 	sub	fp, #12
15390     01 16 06 F6 | 	mov	arg03, #1
15394     78 E5 B0 FD | 	call	#__system___float_cmp
15398     01 FA 55 F2 | 	cmps	result1, #1 wc
1539c     00 1E 26 C6 |  if_b	not	local01, #0
153a0     A7 1E 62 FC | 	wrlong	local01, fp
153a4     C8 03 90 FD | 	jmp	#LR__1693
153a8                 | LR__1681
153a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
153a8     08 4E 05 F1 | 	add	fp, #8
153ac     A7 1E 02 FB | 	rdlong	local01, fp
153b0     08 4E 85 F1 | 	sub	fp, #8
153b4     1E 1E 0E F2 | 	cmp	local01, #30 wz
153b8     14 4E 05 A1 |  if_e	add	fp, #20
153bc     A7 24 02 AB |  if_e	rdlong	local04, fp
153c0     14 4E 85 A1 |  if_e	sub	fp, #20
153c4     12 23 02 A6 |  if_e	mov	local03, local04
153c8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
153cc     48 00 90 5D |  if_ne	jmp	#LR__1682
153d0     00 1E 06 F6 | 	mov	local01, #0
153d4     A7 20 02 FB | 	rdlong	local02, fp
153d8     0C 4E 05 F1 | 	add	fp, #12
153dc     A7 12 02 FB | 	rdlong	arg01, fp
153e0     0C 4E 85 F1 | 	sub	fp, #12
153e4     09 13 52 F6 | 	abs	arg01, arg01 wc
153e8     1F 26 C6 C9 |  if_b	decod	local05, #31
153ec     00 26 06 36 |  if_ae	mov	local05, #0
153f0     E4 DC B0 FD | 	call	#__system___float_fromuns
153f4     13 FB 61 F5 | 	xor	result1, local05
153f8     FD 14 02 F6 | 	mov	arg02, result1
153fc     10 13 02 F6 | 	mov	arg01, local02
15400     01 16 06 F6 | 	mov	arg03, #1
15404     08 E5 B0 FD | 	call	#__system___float_cmp
15408     01 FA 55 F2 | 	cmps	result1, #1 wc
1540c     00 1E 26 C6 |  if_b	not	local01, #0
15410     A7 1E 62 FC | 	wrlong	local01, fp
15414     58 03 90 FD | 	jmp	#LR__1693
15418                 | LR__1682
15418                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
15418     08 4E 05 F1 | 	add	fp, #8
1541c     A7 1E 02 FB | 	rdlong	local01, fp
15420     08 4E 85 F1 | 	sub	fp, #8
15424     1E 1E 0E F2 | 	cmp	local01, #30 wz
15428     14 4E 05 A1 |  if_e	add	fp, #20
1542c     A7 24 02 AB |  if_e	rdlong	local04, fp
15430     14 4E 85 A1 |  if_e	sub	fp, #20
15434     12 23 02 A6 |  if_e	mov	local03, local04
15438     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1543c     38 00 90 5D |  if_ne	jmp	#LR__1683
15440     00 1E 06 F6 | 	mov	local01, #0
15444     A7 20 02 FB | 	rdlong	local02, fp
15448     0C 4E 05 F1 | 	add	fp, #12
1544c     A7 12 02 FB | 	rdlong	arg01, fp
15450     0C 4E 85 F1 | 	sub	fp, #12
15454     80 DC B0 FD | 	call	#__system___float_fromuns
15458     FD 14 02 F6 | 	mov	arg02, result1
1545c     10 13 02 F6 | 	mov	arg01, local02
15460     01 16 06 F6 | 	mov	arg03, #1
15464     A8 E4 B0 FD | 	call	#__system___float_cmp
15468     01 FA 55 F2 | 	cmps	result1, #1 wc
1546c     00 1E 26 C6 |  if_b	not	local01, #0
15470     A7 1E 62 FC | 	wrlong	local01, fp
15474     F8 02 90 FD | 	jmp	#LR__1693
15478                 | LR__1683
15478                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
15478     08 4E 05 F1 | 	add	fp, #8
1547c     A7 1E 02 FB | 	rdlong	local01, fp
15480     08 4E 85 F1 | 	sub	fp, #8
15484     1C 1E 0E F2 | 	cmp	local01, #28 wz
15488     14 4E 05 A1 |  if_e	add	fp, #20
1548c     A7 24 02 AB |  if_e	rdlong	local04, fp
15490     14 4E 85 A1 |  if_e	sub	fp, #20
15494     12 23 02 A6 |  if_e	mov	local03, local04
15498     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1549c     44 00 90 5D |  if_ne	jmp	#LR__1684
154a0     00 1E 06 F6 | 	mov	local01, #0
154a4     A7 12 02 FB | 	rdlong	arg01, fp
154a8     09 13 52 F6 | 	abs	arg01, arg01 wc
154ac     1F 26 C6 C9 |  if_b	decod	local05, #31
154b0     00 26 06 36 |  if_ae	mov	local05, #0
154b4     20 DC B0 FD | 	call	#__system___float_fromuns
154b8     13 FB 61 F5 | 	xor	result1, local05
154bc     FD 12 02 F6 | 	mov	arg01, result1
154c0     0C 4E 05 F1 | 	add	fp, #12
154c4     A7 14 02 FB | 	rdlong	arg02, fp
154c8     0C 4E 85 F1 | 	sub	fp, #12
154cc     01 16 06 F6 | 	mov	arg03, #1
154d0     3C E4 B0 FD | 	call	#__system___float_cmp
154d4     01 FA 55 F2 | 	cmps	result1, #1 wc
154d8     00 1E 26 C6 |  if_b	not	local01, #0
154dc     A7 1E 62 FC | 	wrlong	local01, fp
154e0     8C 02 90 FD | 	jmp	#LR__1693
154e4                 | LR__1684
154e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
154e4     08 4E 05 F1 | 	add	fp, #8
154e8     A7 1E 02 FB | 	rdlong	local01, fp
154ec     08 4E 85 F1 | 	sub	fp, #8
154f0     1C 1E 0E F2 | 	cmp	local01, #28 wz
154f4     14 4E 05 A1 |  if_e	add	fp, #20
154f8     A7 24 02 AB |  if_e	rdlong	local04, fp
154fc     14 4E 85 A1 |  if_e	sub	fp, #20
15500     12 23 02 A6 |  if_e	mov	local03, local04
15504     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
15508     24 00 90 5D |  if_ne	jmp	#LR__1685
1550c     00 1E 06 F6 | 	mov	local01, #0
15510     A7 20 02 FB | 	rdlong	local02, fp
15514     0C 4E 05 F1 | 	add	fp, #12
15518     A7 22 02 FB | 	rdlong	local03, fp
1551c     0C 4E 85 F1 | 	sub	fp, #12
15520     11 21 5A F2 | 	cmps	local02, local03 wcz
15524     01 1E 66 E6 |  if_be	neg	local01, #1
15528     A7 1E 62 FC | 	wrlong	local01, fp
1552c     40 02 90 FD | 	jmp	#LR__1693
15530                 | LR__1685
15530                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
15530     08 4E 05 F1 | 	add	fp, #8
15534     A7 1E 02 FB | 	rdlong	local01, fp
15538     08 4E 85 F1 | 	sub	fp, #8
1553c     1C 1E 0E F2 | 	cmp	local01, #28 wz
15540     14 4E 05 A1 |  if_e	add	fp, #20
15544     A7 24 02 AB |  if_e	rdlong	local04, fp
15548     14 4E 85 A1 |  if_e	sub	fp, #20
1554c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
15550     24 00 90 5D |  if_ne	jmp	#LR__1686
15554     00 1E 06 F6 | 	mov	local01, #0
15558     A7 20 02 FB | 	rdlong	local02, fp
1555c     0C 4E 05 F1 | 	add	fp, #12
15560     A7 22 02 FB | 	rdlong	local03, fp
15564     0C 4E 85 F1 | 	sub	fp, #12
15568     11 21 5A F2 | 	cmps	local02, local03 wcz
1556c     01 1E 66 E6 |  if_be	neg	local01, #1
15570     A7 1E 62 FC | 	wrlong	local01, fp
15574     F8 01 90 FD | 	jmp	#LR__1693
15578                 | LR__1686
15578                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
15578     08 4E 05 F1 | 	add	fp, #8
1557c     A7 1E 02 FB | 	rdlong	local01, fp
15580     08 4E 85 F1 | 	sub	fp, #8
15584     1D 1E 0E F2 | 	cmp	local01, #29 wz
15588     14 4E 05 A1 |  if_e	add	fp, #20
1558c     A7 22 02 AB |  if_e	rdlong	local03, fp
15590     14 4E 85 A1 |  if_e	sub	fp, #20
15594     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
15598     34 00 90 5D |  if_ne	jmp	#LR__1687
1559c     00 1E 06 F6 | 	mov	local01, #0
155a0     A7 12 02 FB | 	rdlong	arg01, fp
155a4     30 DB B0 FD | 	call	#__system___float_fromuns
155a8     FD 12 02 F6 | 	mov	arg01, result1
155ac     0C 4E 05 F1 | 	add	fp, #12
155b0     A7 14 02 FB | 	rdlong	arg02, fp
155b4     0C 4E 85 F1 | 	sub	fp, #12
155b8     01 16 06 F6 | 	mov	arg03, #1
155bc     50 E3 B0 FD | 	call	#__system___float_cmp
155c0     01 FA 55 F2 | 	cmps	result1, #1 wc
155c4     00 1E 26 C6 |  if_b	not	local01, #0
155c8     A7 1E 62 FC | 	wrlong	local01, fp
155cc     A0 01 90 FD | 	jmp	#LR__1693
155d0                 | LR__1687
155d0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
155d0     08 4E 05 F1 | 	add	fp, #8
155d4     A7 1E 02 FB | 	rdlong	local01, fp
155d8     08 4E 85 F1 | 	sub	fp, #8
155dc     1D 1E 0E F2 | 	cmp	local01, #29 wz
155e0     14 4E 05 A1 |  if_e	add	fp, #20
155e4     A7 22 02 AB |  if_e	rdlong	local03, fp
155e8     14 4E 85 A1 |  if_e	sub	fp, #20
155ec     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
155f0     24 00 90 5D |  if_ne	jmp	#LR__1688
155f4     00 1E 06 F6 | 	mov	local01, #0
155f8     A7 20 02 FB | 	rdlong	local02, fp
155fc     0C 4E 05 F1 | 	add	fp, #12
15600     A7 22 02 FB | 	rdlong	local03, fp
15604     0C 4E 85 F1 | 	sub	fp, #12
15608     11 21 5A F2 | 	cmps	local02, local03 wcz
1560c     01 1E 66 E6 |  if_be	neg	local01, #1
15610     A7 1E 62 FC | 	wrlong	local01, fp
15614     58 01 90 FD | 	jmp	#LR__1693
15618                 | LR__1688
15618                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
15618     08 4E 05 F1 | 	add	fp, #8
1561c     A7 1E 02 FB | 	rdlong	local01, fp
15620     08 4E 85 F1 | 	sub	fp, #8
15624     1D 1E 0E F2 | 	cmp	local01, #29 wz
15628     14 4E 05 A1 |  if_e	add	fp, #20
1562c     A7 22 02 AB |  if_e	rdlong	local03, fp
15630     14 4E 85 A1 |  if_e	sub	fp, #20
15634     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
15638     24 00 90 5D |  if_ne	jmp	#LR__1689
1563c     00 1E 06 F6 | 	mov	local01, #0
15640     A7 20 02 FB | 	rdlong	local02, fp
15644     0C 4E 05 F1 | 	add	fp, #12
15648     A7 22 02 FB | 	rdlong	local03, fp
1564c     0C 4E 85 F1 | 	sub	fp, #12
15650     11 21 1A F2 | 	cmp	local02, local03 wcz
15654     01 1E 66 E6 |  if_be	neg	local01, #1
15658     A7 1E 62 FC | 	wrlong	local01, fp
1565c     10 01 90 FD | 	jmp	#LR__1693
15660                 | LR__1689
15660                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
15660     08 4E 05 F1 | 	add	fp, #8
15664     A7 1E 02 FB | 	rdlong	local01, fp
15668     08 4E 85 F1 | 	sub	fp, #8
1566c     2B 1E 0E F2 | 	cmp	local01, #43 wz
15670     14 4E 05 A1 |  if_e	add	fp, #20
15674     A7 22 02 AB |  if_e	rdlong	local03, fp
15678     14 4E 85 A1 |  if_e	sub	fp, #20
1567c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
15680     30 00 90 5D |  if_ne	jmp	#LR__1690
15684     00 1E 06 F6 | 	mov	local01, #0
15688     A7 12 02 FB | 	rdlong	arg01, fp
1568c     B4 BD BF FD | 	call	#_convertstring
15690     FD 12 02 F6 | 	mov	arg01, result1
15694     0C 4E 05 F1 | 	add	fp, #12
15698     A7 14 02 FB | 	rdlong	arg02, fp
1569c     0C 4E 85 F1 | 	sub	fp, #12
156a0     AC B2 B0 FD | 	call	#__system___string_cmp
156a4     01 FA 55 F2 | 	cmps	result1, #1 wc
156a8     00 1E 26 C6 |  if_b	not	local01, #0
156ac     A7 1E 62 FC | 	wrlong	local01, fp
156b0     BC 00 90 FD | 	jmp	#LR__1693
156b4                 | LR__1690
156b4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
156b4     08 4E 05 F1 | 	add	fp, #8
156b8     A7 1E 02 FB | 	rdlong	local01, fp
156bc     08 4E 85 F1 | 	sub	fp, #8
156c0     1F 1E 0E F2 | 	cmp	local01, #31 wz
156c4     14 4E 05 A1 |  if_e	add	fp, #20
156c8     A7 22 02 AB |  if_e	rdlong	local03, fp
156cc     14 4E 85 A1 |  if_e	sub	fp, #20
156d0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
156d4     34 00 90 5D |  if_ne	jmp	#LR__1691
156d8     00 1E 06 F6 | 	mov	local01, #0
156dc     A7 20 02 FB | 	rdlong	local02, fp
156e0     0C 4E 05 F1 | 	add	fp, #12
156e4     A7 12 02 FB | 	rdlong	arg01, fp
156e8     0C 4E 85 F1 | 	sub	fp, #12
156ec     54 BD BF FD | 	call	#_convertstring
156f0     FD 14 02 F6 | 	mov	arg02, result1
156f4     10 13 02 F6 | 	mov	arg01, local02
156f8     54 B2 B0 FD | 	call	#__system___string_cmp
156fc     01 FA 55 F2 | 	cmps	result1, #1 wc
15700     00 1E 26 C6 |  if_b	not	local01, #0
15704     A7 1E 62 FC | 	wrlong	local01, fp
15708     64 00 90 FD | 	jmp	#LR__1693
1570c                 | LR__1691
1570c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1570c     08 4E 05 F1 | 	add	fp, #8
15710     A7 1E 02 FB | 	rdlong	local01, fp
15714     08 4E 85 F1 | 	sub	fp, #8
15718     2B 1E 0E F2 | 	cmp	local01, #43 wz
1571c     14 4E 05 A1 |  if_e	add	fp, #20
15720     A7 22 02 AB |  if_e	rdlong	local03, fp
15724     14 4E 85 A1 |  if_e	sub	fp, #20
15728     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1572c     3C 00 90 5D |  if_ne	jmp	#LR__1692
15730     00 1E 06 F6 | 	mov	local01, #0
15734     A7 12 02 FB | 	rdlong	arg01, fp
15738     08 BD BF FD | 	call	#_convertstring
1573c     FD 20 02 F6 | 	mov	local02, result1
15740     0C 4E 05 F1 | 	add	fp, #12
15744     A7 12 02 FB | 	rdlong	arg01, fp
15748     0C 4E 85 F1 | 	sub	fp, #12
1574c     F4 BC BF FD | 	call	#_convertstring
15750     FD 14 02 F6 | 	mov	arg02, result1
15754     10 13 02 F6 | 	mov	arg01, local02
15758     F4 B1 B0 FD | 	call	#__system___string_cmp
1575c     01 FA 55 F2 | 	cmps	result1, #1 wc
15760     00 1E 26 C6 |  if_b	not	local01, #0
15764     A7 1E 62 FC | 	wrlong	local01, fp
15768     04 00 90 FD | 	jmp	#LR__1693
1576c                 | LR__1692
1576c     A7 00 68 FC | 	wrlong	#0, fp
15770                 | LR__1693
15770     08 4E 05 F1 | 	add	fp, #8
15774     A7 38 68 FC | 	wrlong	#28, fp
15778     08 4E 85 F1 | 	sub	fp, #8
1577c     A7 12 02 F6 | 	mov	arg01, fp
15780     AC 64 BF FD | 	call	#_push
15784     A7 F0 03 F6 | 	mov	ptra, fp
15788     B2 00 A0 FD | 	call	#popregs_
1578c                 | _do_le_ret
1578c     2D 00 64 FD | 	ret
15790                 | 
15790                 | ' 
15790                 | ' 
15790                 | ' sub do_ne
15790                 | _do_ne
15790     05 4A 05 F6 | 	mov	COUNT_, #5
15794     A8 00 A0 FD | 	call	#pushregs_
15798     18 F0 07 F1 | 	add	ptra, #24
1579c     F8 63 BF FD | 	call	#_pop
157a0     FD 1E 02 F6 | 	mov	local01, result1
157a4     FE 20 02 F6 | 	mov	local02, result2
157a8     FF 22 02 F6 | 	mov	local03, result3
157ac     0C 4E 05 F1 | 	add	fp, #12
157b0     A7 1E 62 FC | 	wrlong	local01, fp
157b4     04 4E 05 F1 | 	add	fp, #4
157b8     A7 20 62 FC | 	wrlong	local02, fp
157bc     04 4E 05 F1 | 	add	fp, #4
157c0     A7 22 62 FC | 	wrlong	local03, fp
157c4     14 4E 85 F1 | 	sub	fp, #20
157c8     CC 63 BF FD | 	call	#_pop
157cc     FF 22 02 F6 | 	mov	local03, result3
157d0     A7 FA 61 FC | 	wrlong	result1, fp
157d4     04 4E 05 F1 | 	add	fp, #4
157d8     A7 FC 61 FC | 	wrlong	result2, fp
157dc     04 4E 05 F1 | 	add	fp, #4
157e0     A7 22 62 FC | 	wrlong	local03, fp
157e4                 | ' t2=pop()
157e4                 | ' t1=pop()
157e4                 | ' 
157e4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
157e4     08 4E 85 F1 | 	sub	fp, #8
157e8     1F 22 0E F2 | 	cmp	local03, #31 wz
157ec     14 4E 05 A1 |  if_e	add	fp, #20
157f0     A7 24 02 AB |  if_e	rdlong	local04, fp
157f4     14 4E 85 A1 |  if_e	sub	fp, #20
157f8     12 23 02 A6 |  if_e	mov	local03, local04
157fc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
15800     28 00 90 5D |  if_ne	jmp	#LR__1700
15804     00 1E 06 F6 | 	mov	local01, #0
15808     A7 12 02 FB | 	rdlong	arg01, fp
1580c     0C 4E 05 F1 | 	add	fp, #12
15810     A7 14 02 FB | 	rdlong	arg02, fp
15814     0C 4E 85 F1 | 	sub	fp, #12
15818     34 B1 B0 FD | 	call	#__system___string_cmp
1581c     00 FA 0D F2 | 	cmp	result1, #0 wz
15820     00 1E 26 56 |  if_ne	not	local01, #0
15824     A7 1E 62 FC | 	wrlong	local01, fp
15828     1C 04 90 FD | 	jmp	#LR__1713
1582c                 | LR__1700
1582c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1582c     08 4E 05 F1 | 	add	fp, #8
15830     A7 1E 02 FB | 	rdlong	local01, fp
15834     08 4E 85 F1 | 	sub	fp, #8
15838     1E 1E 0E F2 | 	cmp	local01, #30 wz
1583c     14 4E 05 A1 |  if_e	add	fp, #20
15840     A7 24 02 AB |  if_e	rdlong	local04, fp
15844     14 4E 85 A1 |  if_e	sub	fp, #20
15848     12 23 02 A6 |  if_e	mov	local03, local04
1584c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
15850     2C 00 90 5D |  if_ne	jmp	#LR__1701
15854     00 1E 06 F6 | 	mov	local01, #0
15858     A7 12 02 FB | 	rdlong	arg01, fp
1585c     0C 4E 05 F1 | 	add	fp, #12
15860     A7 14 02 FB | 	rdlong	arg02, fp
15864     0C 4E 85 F1 | 	sub	fp, #12
15868     01 16 06 F6 | 	mov	arg03, #1
1586c     A0 E0 B0 FD | 	call	#__system___float_cmp
15870     00 FA 0D F2 | 	cmp	result1, #0 wz
15874     00 1E 26 56 |  if_ne	not	local01, #0
15878     A7 1E 62 FC | 	wrlong	local01, fp
1587c     C8 03 90 FD | 	jmp	#LR__1713
15880                 | LR__1701
15880                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
15880     08 4E 05 F1 | 	add	fp, #8
15884     A7 1E 02 FB | 	rdlong	local01, fp
15888     08 4E 85 F1 | 	sub	fp, #8
1588c     1E 1E 0E F2 | 	cmp	local01, #30 wz
15890     14 4E 05 A1 |  if_e	add	fp, #20
15894     A7 24 02 AB |  if_e	rdlong	local04, fp
15898     14 4E 85 A1 |  if_e	sub	fp, #20
1589c     12 23 02 A6 |  if_e	mov	local03, local04
158a0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
158a4     48 00 90 5D |  if_ne	jmp	#LR__1702
158a8     00 1E 06 F6 | 	mov	local01, #0
158ac     A7 20 02 FB | 	rdlong	local02, fp
158b0     0C 4E 05 F1 | 	add	fp, #12
158b4     A7 12 02 FB | 	rdlong	arg01, fp
158b8     0C 4E 85 F1 | 	sub	fp, #12
158bc     09 13 52 F6 | 	abs	arg01, arg01 wc
158c0     1F 26 C6 C9 |  if_b	decod	local05, #31
158c4     00 26 06 36 |  if_ae	mov	local05, #0
158c8     0C D8 B0 FD | 	call	#__system___float_fromuns
158cc     13 FB 61 F5 | 	xor	result1, local05
158d0     FD 14 02 F6 | 	mov	arg02, result1
158d4     10 13 02 F6 | 	mov	arg01, local02
158d8     01 16 06 F6 | 	mov	arg03, #1
158dc     30 E0 B0 FD | 	call	#__system___float_cmp
158e0     00 FA 0D F2 | 	cmp	result1, #0 wz
158e4     00 1E 26 56 |  if_ne	not	local01, #0
158e8     A7 1E 62 FC | 	wrlong	local01, fp
158ec     58 03 90 FD | 	jmp	#LR__1713
158f0                 | LR__1702
158f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
158f0     08 4E 05 F1 | 	add	fp, #8
158f4     A7 1E 02 FB | 	rdlong	local01, fp
158f8     08 4E 85 F1 | 	sub	fp, #8
158fc     1E 1E 0E F2 | 	cmp	local01, #30 wz
15900     14 4E 05 A1 |  if_e	add	fp, #20
15904     A7 24 02 AB |  if_e	rdlong	local04, fp
15908     14 4E 85 A1 |  if_e	sub	fp, #20
1590c     12 23 02 A6 |  if_e	mov	local03, local04
15910     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
15914     38 00 90 5D |  if_ne	jmp	#LR__1703
15918     00 1E 06 F6 | 	mov	local01, #0
1591c     A7 20 02 FB | 	rdlong	local02, fp
15920     0C 4E 05 F1 | 	add	fp, #12
15924     A7 12 02 FB | 	rdlong	arg01, fp
15928     0C 4E 85 F1 | 	sub	fp, #12
1592c     A8 D7 B0 FD | 	call	#__system___float_fromuns
15930     FD 14 02 F6 | 	mov	arg02, result1
15934     10 13 02 F6 | 	mov	arg01, local02
15938     01 16 06 F6 | 	mov	arg03, #1
1593c     D0 DF B0 FD | 	call	#__system___float_cmp
15940     00 FA 0D F2 | 	cmp	result1, #0 wz
15944     00 1E 26 56 |  if_ne	not	local01, #0
15948     A7 1E 62 FC | 	wrlong	local01, fp
1594c     F8 02 90 FD | 	jmp	#LR__1713
15950                 | LR__1703
15950                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
15950     08 4E 05 F1 | 	add	fp, #8
15954     A7 1E 02 FB | 	rdlong	local01, fp
15958     08 4E 85 F1 | 	sub	fp, #8
1595c     1C 1E 0E F2 | 	cmp	local01, #28 wz
15960     14 4E 05 A1 |  if_e	add	fp, #20
15964     A7 24 02 AB |  if_e	rdlong	local04, fp
15968     14 4E 85 A1 |  if_e	sub	fp, #20
1596c     12 23 02 A6 |  if_e	mov	local03, local04
15970     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
15974     44 00 90 5D |  if_ne	jmp	#LR__1704
15978     00 1E 06 F6 | 	mov	local01, #0
1597c     A7 12 02 FB | 	rdlong	arg01, fp
15980     09 13 52 F6 | 	abs	arg01, arg01 wc
15984     1F 26 C6 C9 |  if_b	decod	local05, #31
15988     00 26 06 36 |  if_ae	mov	local05, #0
1598c     48 D7 B0 FD | 	call	#__system___float_fromuns
15990     13 FB 61 F5 | 	xor	result1, local05
15994     FD 12 02 F6 | 	mov	arg01, result1
15998     0C 4E 05 F1 | 	add	fp, #12
1599c     A7 14 02 FB | 	rdlong	arg02, fp
159a0     0C 4E 85 F1 | 	sub	fp, #12
159a4     01 16 06 F6 | 	mov	arg03, #1
159a8     64 DF B0 FD | 	call	#__system___float_cmp
159ac     00 FA 0D F2 | 	cmp	result1, #0 wz
159b0     00 1E 26 56 |  if_ne	not	local01, #0
159b4     A7 1E 62 FC | 	wrlong	local01, fp
159b8     8C 02 90 FD | 	jmp	#LR__1713
159bc                 | LR__1704
159bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
159bc     08 4E 05 F1 | 	add	fp, #8
159c0     A7 1E 02 FB | 	rdlong	local01, fp
159c4     08 4E 85 F1 | 	sub	fp, #8
159c8     1C 1E 0E F2 | 	cmp	local01, #28 wz
159cc     14 4E 05 A1 |  if_e	add	fp, #20
159d0     A7 24 02 AB |  if_e	rdlong	local04, fp
159d4     14 4E 85 A1 |  if_e	sub	fp, #20
159d8     12 23 02 A6 |  if_e	mov	local03, local04
159dc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
159e0     24 00 90 5D |  if_ne	jmp	#LR__1705
159e4     00 1E 06 F6 | 	mov	local01, #0
159e8     A7 20 02 FB | 	rdlong	local02, fp
159ec     0C 4E 05 F1 | 	add	fp, #12
159f0     A7 22 02 FB | 	rdlong	local03, fp
159f4     0C 4E 85 F1 | 	sub	fp, #12
159f8     11 21 0A F2 | 	cmp	local02, local03 wz
159fc     01 1E 66 56 |  if_ne	neg	local01, #1
15a00     A7 1E 62 FC | 	wrlong	local01, fp
15a04     40 02 90 FD | 	jmp	#LR__1713
15a08                 | LR__1705
15a08                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
15a08     08 4E 05 F1 | 	add	fp, #8
15a0c     A7 1E 02 FB | 	rdlong	local01, fp
15a10     08 4E 85 F1 | 	sub	fp, #8
15a14     1C 1E 0E F2 | 	cmp	local01, #28 wz
15a18     14 4E 05 A1 |  if_e	add	fp, #20
15a1c     A7 24 02 AB |  if_e	rdlong	local04, fp
15a20     14 4E 85 A1 |  if_e	sub	fp, #20
15a24     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
15a28     24 00 90 5D |  if_ne	jmp	#LR__1706
15a2c     00 1E 06 F6 | 	mov	local01, #0
15a30     A7 20 02 FB | 	rdlong	local02, fp
15a34     0C 4E 05 F1 | 	add	fp, #12
15a38     A7 22 02 FB | 	rdlong	local03, fp
15a3c     0C 4E 85 F1 | 	sub	fp, #12
15a40     11 21 0A F2 | 	cmp	local02, local03 wz
15a44     01 1E 66 56 |  if_ne	neg	local01, #1
15a48     A7 1E 62 FC | 	wrlong	local01, fp
15a4c     F8 01 90 FD | 	jmp	#LR__1713
15a50                 | LR__1706
15a50                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
15a50     08 4E 05 F1 | 	add	fp, #8
15a54     A7 1E 02 FB | 	rdlong	local01, fp
15a58     08 4E 85 F1 | 	sub	fp, #8
15a5c     1D 1E 0E F2 | 	cmp	local01, #29 wz
15a60     14 4E 05 A1 |  if_e	add	fp, #20
15a64     A7 22 02 AB |  if_e	rdlong	local03, fp
15a68     14 4E 85 A1 |  if_e	sub	fp, #20
15a6c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
15a70     34 00 90 5D |  if_ne	jmp	#LR__1707
15a74     00 1E 06 F6 | 	mov	local01, #0
15a78     A7 12 02 FB | 	rdlong	arg01, fp
15a7c     58 D6 B0 FD | 	call	#__system___float_fromuns
15a80     FD 12 02 F6 | 	mov	arg01, result1
15a84     0C 4E 05 F1 | 	add	fp, #12
15a88     A7 14 02 FB | 	rdlong	arg02, fp
15a8c     0C 4E 85 F1 | 	sub	fp, #12
15a90     01 16 06 F6 | 	mov	arg03, #1
15a94     78 DE B0 FD | 	call	#__system___float_cmp
15a98     00 FA 0D F2 | 	cmp	result1, #0 wz
15a9c     00 1E 26 56 |  if_ne	not	local01, #0
15aa0     A7 1E 62 FC | 	wrlong	local01, fp
15aa4     A0 01 90 FD | 	jmp	#LR__1713
15aa8                 | LR__1707
15aa8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
15aa8     08 4E 05 F1 | 	add	fp, #8
15aac     A7 1E 02 FB | 	rdlong	local01, fp
15ab0     08 4E 85 F1 | 	sub	fp, #8
15ab4     1D 1E 0E F2 | 	cmp	local01, #29 wz
15ab8     14 4E 05 A1 |  if_e	add	fp, #20
15abc     A7 22 02 AB |  if_e	rdlong	local03, fp
15ac0     14 4E 85 A1 |  if_e	sub	fp, #20
15ac4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
15ac8     24 00 90 5D |  if_ne	jmp	#LR__1708
15acc     00 1E 06 F6 | 	mov	local01, #0
15ad0     A7 20 02 FB | 	rdlong	local02, fp
15ad4     0C 4E 05 F1 | 	add	fp, #12
15ad8     A7 22 02 FB | 	rdlong	local03, fp
15adc     0C 4E 85 F1 | 	sub	fp, #12
15ae0     11 21 0A F2 | 	cmp	local02, local03 wz
15ae4     01 1E 66 56 |  if_ne	neg	local01, #1
15ae8     A7 1E 62 FC | 	wrlong	local01, fp
15aec     58 01 90 FD | 	jmp	#LR__1713
15af0                 | LR__1708
15af0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
15af0     08 4E 05 F1 | 	add	fp, #8
15af4     A7 1E 02 FB | 	rdlong	local01, fp
15af8     08 4E 85 F1 | 	sub	fp, #8
15afc     1D 1E 0E F2 | 	cmp	local01, #29 wz
15b00     14 4E 05 A1 |  if_e	add	fp, #20
15b04     A7 22 02 AB |  if_e	rdlong	local03, fp
15b08     14 4E 85 A1 |  if_e	sub	fp, #20
15b0c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
15b10     24 00 90 5D |  if_ne	jmp	#LR__1709
15b14     00 1E 06 F6 | 	mov	local01, #0
15b18     A7 20 02 FB | 	rdlong	local02, fp
15b1c     0C 4E 05 F1 | 	add	fp, #12
15b20     A7 22 02 FB | 	rdlong	local03, fp
15b24     0C 4E 85 F1 | 	sub	fp, #12
15b28     11 21 0A F2 | 	cmp	local02, local03 wz
15b2c     01 1E 66 56 |  if_ne	neg	local01, #1
15b30     A7 1E 62 FC | 	wrlong	local01, fp
15b34     10 01 90 FD | 	jmp	#LR__1713
15b38                 | LR__1709
15b38                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
15b38     08 4E 05 F1 | 	add	fp, #8
15b3c     A7 1E 02 FB | 	rdlong	local01, fp
15b40     08 4E 85 F1 | 	sub	fp, #8
15b44     2B 1E 0E F2 | 	cmp	local01, #43 wz
15b48     14 4E 05 A1 |  if_e	add	fp, #20
15b4c     A7 22 02 AB |  if_e	rdlong	local03, fp
15b50     14 4E 85 A1 |  if_e	sub	fp, #20
15b54     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
15b58     30 00 90 5D |  if_ne	jmp	#LR__1710
15b5c     00 1E 06 F6 | 	mov	local01, #0
15b60     A7 12 02 FB | 	rdlong	arg01, fp
15b64     DC B8 BF FD | 	call	#_convertstring
15b68     FD 12 02 F6 | 	mov	arg01, result1
15b6c     0C 4E 05 F1 | 	add	fp, #12
15b70     A7 14 02 FB | 	rdlong	arg02, fp
15b74     0C 4E 85 F1 | 	sub	fp, #12
15b78     D4 AD B0 FD | 	call	#__system___string_cmp
15b7c     00 FA 0D F2 | 	cmp	result1, #0 wz
15b80     00 1E 26 56 |  if_ne	not	local01, #0
15b84     A7 1E 62 FC | 	wrlong	local01, fp
15b88     BC 00 90 FD | 	jmp	#LR__1713
15b8c                 | LR__1710
15b8c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
15b8c     08 4E 05 F1 | 	add	fp, #8
15b90     A7 1E 02 FB | 	rdlong	local01, fp
15b94     08 4E 85 F1 | 	sub	fp, #8
15b98     1F 1E 0E F2 | 	cmp	local01, #31 wz
15b9c     14 4E 05 A1 |  if_e	add	fp, #20
15ba0     A7 22 02 AB |  if_e	rdlong	local03, fp
15ba4     14 4E 85 A1 |  if_e	sub	fp, #20
15ba8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
15bac     34 00 90 5D |  if_ne	jmp	#LR__1711
15bb0     00 1E 06 F6 | 	mov	local01, #0
15bb4     A7 20 02 FB | 	rdlong	local02, fp
15bb8     0C 4E 05 F1 | 	add	fp, #12
15bbc     A7 12 02 FB | 	rdlong	arg01, fp
15bc0     0C 4E 85 F1 | 	sub	fp, #12
15bc4     7C B8 BF FD | 	call	#_convertstring
15bc8     FD 14 02 F6 | 	mov	arg02, result1
15bcc     10 13 02 F6 | 	mov	arg01, local02
15bd0     7C AD B0 FD | 	call	#__system___string_cmp
15bd4     00 FA 0D F2 | 	cmp	result1, #0 wz
15bd8     00 1E 26 56 |  if_ne	not	local01, #0
15bdc     A7 1E 62 FC | 	wrlong	local01, fp
15be0     64 00 90 FD | 	jmp	#LR__1713
15be4                 | LR__1711
15be4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
15be4     08 4E 05 F1 | 	add	fp, #8
15be8     A7 1E 02 FB | 	rdlong	local01, fp
15bec     08 4E 85 F1 | 	sub	fp, #8
15bf0     2B 1E 0E F2 | 	cmp	local01, #43 wz
15bf4     14 4E 05 A1 |  if_e	add	fp, #20
15bf8     A7 22 02 AB |  if_e	rdlong	local03, fp
15bfc     14 4E 85 A1 |  if_e	sub	fp, #20
15c00     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
15c04     3C 00 90 5D |  if_ne	jmp	#LR__1712
15c08     00 1E 06 F6 | 	mov	local01, #0
15c0c     A7 12 02 FB | 	rdlong	arg01, fp
15c10     30 B8 BF FD | 	call	#_convertstring
15c14     FD 20 02 F6 | 	mov	local02, result1
15c18     0C 4E 05 F1 | 	add	fp, #12
15c1c     A7 12 02 FB | 	rdlong	arg01, fp
15c20     0C 4E 85 F1 | 	sub	fp, #12
15c24     1C B8 BF FD | 	call	#_convertstring
15c28     FD 14 02 F6 | 	mov	arg02, result1
15c2c     10 13 02 F6 | 	mov	arg01, local02
15c30     1C AD B0 FD | 	call	#__system___string_cmp
15c34     00 FA 0D F2 | 	cmp	result1, #0 wz
15c38     00 1E 26 56 |  if_ne	not	local01, #0
15c3c     A7 1E 62 FC | 	wrlong	local01, fp
15c40     04 00 90 FD | 	jmp	#LR__1713
15c44                 | LR__1712
15c44     A7 00 68 FC | 	wrlong	#0, fp
15c48                 | LR__1713
15c48     08 4E 05 F1 | 	add	fp, #8
15c4c     A7 38 68 FC | 	wrlong	#28, fp
15c50     08 4E 85 F1 | 	sub	fp, #8
15c54     A7 12 02 F6 | 	mov	arg01, fp
15c58     D4 5F BF FD | 	call	#_push
15c5c     A7 F0 03 F6 | 	mov	ptra, fp
15c60     B2 00 A0 FD | 	call	#popregs_
15c64                 | _do_ne_ret
15c64     2D 00 64 FD | 	ret
15c68                 | 
15c68                 | ' 
15c68                 | ' 
15c68                 | ' 
15c68                 | ' function converttoint (t1 as expr_result) as integer 
15c68                 | _converttoint
15c68     02 4A 05 F6 | 	mov	COUNT_, #2
15c6c     A8 00 A0 FD | 	call	#pushregs_
15c70     09 1F 02 F6 | 	mov	local01, arg01
15c74                 | ' 
15c74                 | ' select case t1.result_type
15c74     08 1E 06 F1 | 	add	local01, #8
15c78     0F 21 02 FB | 	rdlong	local02, local01
15c7c     08 1E 86 F1 | 	sub	local01, #8
15c80     1C 20 0E F2 | 	cmp	local02, #28 wz
15c84     2C 00 90 AD |  if_e	jmp	#LR__1720
15c88     1D 20 0E F2 | 	cmp	local02, #29 wz
15c8c     2C 00 90 AD |  if_e	jmp	#LR__1721
15c90     1E 20 0E F2 | 	cmp	local02, #30 wz
15c94     2C 00 90 AD |  if_e	jmp	#LR__1722
15c98     1F 20 0E F2 | 	cmp	local02, #31 wz
15c9c     34 00 90 AD |  if_e	jmp	#LR__1723
15ca0     2B 20 0E F2 | 	cmp	local02, #43 wz
15ca4     44 00 90 AD |  if_e	jmp	#LR__1724
15ca8     2C 20 0E F2 | 	cmp	local02, #44 wz
15cac     5C 00 90 AD |  if_e	jmp	#LR__1725
15cb0     60 00 90 FD | 	jmp	#LR__1726
15cb4                 | LR__1720
15cb4     0F FB 01 FB | 	rdlong	result1, local01
15cb8     5C 00 90 FD | 	jmp	#LR__1727
15cbc                 | LR__1721
15cbc     0F FB 01 FB | 	rdlong	result1, local01
15cc0     54 00 90 FD | 	jmp	#LR__1727
15cc4                 | LR__1722
15cc4     0F 13 02 FB | 	rdlong	arg01, local01
15cc8     01 14 06 F6 | 	mov	arg02, #1
15ccc     D4 DC B0 FD | 	call	#__system___float_tointeger
15cd0     44 00 90 FD | 	jmp	#LR__1727
15cd4                 | LR__1723
15cd4     0F 13 02 FB | 	rdlong	arg01, local01
15cd8     E8 DF B0 FD | 	call	#__system____builtin_atof
15cdc     FD 12 02 F6 | 	mov	arg01, result1
15ce0     01 14 06 F6 | 	mov	arg02, #1
15ce4     BC DC B0 FD | 	call	#__system___float_tointeger
15ce8     2C 00 90 FD | 	jmp	#LR__1727
15cec                 | LR__1724
15cec     0F 13 02 FB | 	rdlong	arg01, local01
15cf0     50 B7 BF FD | 	call	#_convertstring
15cf4     FD 12 02 F6 | 	mov	arg01, result1
15cf8     C8 DF B0 FD | 	call	#__system____builtin_atof
15cfc     FD 12 02 F6 | 	mov	arg01, result1
15d00     01 14 06 F6 | 	mov	arg02, #1
15d04     9C DC B0 FD | 	call	#__system___float_tointeger
15d08     0C 00 90 FD | 	jmp	#LR__1727
15d0c                 | LR__1725
15d0c     0F FB 01 FB | 	rdlong	result1, local01
15d10     04 00 90 FD | 	jmp	#LR__1727
15d14                 | LR__1726
15d14     00 FA 05 F6 | 	mov	result1, #0
15d18                 | LR__1727
15d18     A7 F0 03 F6 | 	mov	ptra, fp
15d1c     B2 00 A0 FD | 	call	#popregs_
15d20                 | _converttoint_ret
15d20     2D 00 64 FD | 	ret
15d24                 | 
15d24                 | ' 
15d24                 | ' function converttofloat (t1 as expr_result) as single
15d24                 | _converttofloat
15d24     03 4A 05 F6 | 	mov	COUNT_, #3
15d28     A8 00 A0 FD | 	call	#pushregs_
15d2c     09 1F 02 F6 | 	mov	local01, arg01
15d30                 | ' 
15d30                 | ' select case t1.result_type
15d30     08 1E 06 F1 | 	add	local01, #8
15d34     0F 21 02 FB | 	rdlong	local02, local01
15d38     08 1E 86 F1 | 	sub	local01, #8
15d3c     1C 20 0E F2 | 	cmp	local02, #28 wz
15d40     24 00 90 AD |  if_e	jmp	#LR__1730
15d44     1D 20 0E F2 | 	cmp	local02, #29 wz
15d48     38 00 90 AD |  if_e	jmp	#LR__1731
15d4c     1E 20 0E F2 | 	cmp	local02, #30 wz
15d50     3C 00 90 AD |  if_e	jmp	#LR__1732
15d54     1F 20 0E F2 | 	cmp	local02, #31 wz
15d58     3C 00 90 AD |  if_e	jmp	#LR__1733
15d5c     2B 20 0E F2 | 	cmp	local02, #43 wz
15d60     40 00 90 AD |  if_e	jmp	#LR__1734
15d64     50 00 90 FD | 	jmp	#LR__1735
15d68                 | LR__1730
15d68     0F 13 02 FB | 	rdlong	arg01, local01
15d6c     09 13 52 F6 | 	abs	arg01, arg01 wc
15d70     1F 22 C6 C9 |  if_b	decod	local03, #31
15d74     00 22 06 36 |  if_ae	mov	local03, #0
15d78     5C D3 B0 FD | 	call	#__system___float_fromuns
15d7c     11 FB 61 F5 | 	xor	result1, local03
15d80     38 00 90 FD | 	jmp	#LR__1736
15d84                 | LR__1731
15d84     0F 13 02 FB | 	rdlong	arg01, local01
15d88     4C D3 B0 FD | 	call	#__system___float_fromuns
15d8c     2C 00 90 FD | 	jmp	#LR__1736
15d90                 | LR__1732
15d90     0F FB 01 FB | 	rdlong	result1, local01
15d94     24 00 90 FD | 	jmp	#LR__1736
15d98                 | LR__1733
15d98     0F 13 02 FB | 	rdlong	arg01, local01
15d9c     24 DF B0 FD | 	call	#__system____builtin_atof
15da0     18 00 90 FD | 	jmp	#LR__1736
15da4                 | LR__1734
15da4     0F 13 02 FB | 	rdlong	arg01, local01
15da8     98 B6 BF FD | 	call	#_convertstring
15dac     FD 12 02 F6 | 	mov	arg01, result1
15db0     10 DF B0 FD | 	call	#__system____builtin_atof
15db4     04 00 90 FD | 	jmp	#LR__1736
15db8                 | LR__1735
15db8     00 FA 05 F6 | 	mov	result1, #0
15dbc                 | LR__1736
15dbc     A7 F0 03 F6 | 	mov	ptra, fp
15dc0     B2 00 A0 FD | 	call	#popregs_
15dc4                 | _converttofloat_ret
15dc4     2D 00 64 FD | 	ret
15dc8                 | 
15dc8                 | ' 
15dc8                 | ' sub do_rnd
15dc8                 | _do_rnd
15dc8     01 4A 05 F6 | 	mov	COUNT_, #1
15dcc     A8 00 A0 FD | 	call	#pushregs_
15dd0     10 F0 07 F1 | 	add	ptra, #16
15dd4     4A 00 00 FF 
15dd8     80 E4 05 F1 | 	add	objptr, ##38016
15ddc     F2 1E 02 FB | 	rdlong	local01, objptr
15de0     0F 17 02 F6 | 	mov	arg03, local01
15de4     01 16 66 F0 | 	shl	arg03, #1
15de8     0F 17 02 F1 | 	add	arg03, local01
15dec     02 16 66 F0 | 	shl	arg03, #2
15df0     03 00 00 FF 
15df4     04 E4 85 F1 | 	sub	objptr, ##1540
15df8     F2 16 02 F1 | 	add	arg03, objptr
15dfc     0B 17 02 FB | 	rdlong	arg03, arg03
15e00     0C 4E 05 F1 | 	add	fp, #12
15e04     A7 16 62 FC | 	wrlong	arg03, fp
15e08                 | ' 
15e08                 | ' numpar=compiledline(lineptr_e).result.uresult
15e08                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
15e08     0C 4E 85 F1 | 	sub	fp, #12
15e0c     02 16 16 F2 | 	cmp	arg03, #2 wc
15e10     47 00 00 FF 
15e14     7C E4 85 F1 | 	sub	objptr, ##36476
15e18     3C 00 90 CD |  if_b	jmp	#LR__1740
15e1c     00 12 06 F6 | 	mov	arg01, #0
15e20     44 05 B1 FD | 	call	#__system___getiolock_0540
15e24     FD 12 02 F6 | 	mov	arg01, result1
15e28     FC AA B0 FD | 	call	#__system___lockmem
15e2c     84 01 00 FF 
15e30     C3 14 06 F6 | 	mov	arg02, ##@LR__5421
15e34     00 12 06 F6 | 	mov	arg01, #0
15e38     00 16 06 F6 | 	mov	arg03, #0
15e3c     DC B7 B0 FD | 	call	#__system___basic_print_string
15e40     00 12 06 F6 | 	mov	arg01, #0
15e44     20 05 B1 FD | 	call	#__system___getiolock_0540
15e48     FD 00 68 FC | 	wrlong	#0, result1
15e4c     27 12 06 F6 | 	mov	arg01, #39
15e50     70 77 B0 FD | 	call	#_printerror
15e54     2C 01 90 FD | 	jmp	#LR__1747
15e58                 | LR__1740
15e58                 | ' if numpar=0 then
15e58     0C 4E 05 F1 | 	add	fp, #12
15e5c     A7 FE 09 FB | 	rdlong	result3, fp wz
15e60     0C 4E 85 F1 | 	sub	fp, #12
15e64     20 00 90 5D |  if_ne	jmp	#LR__1741
15e68     08 4E 05 F1 | 	add	fp, #8
15e6c     A7 3A 68 FC | 	wrlong	#29, fp
15e70     08 4E 85 F1 | 	sub	fp, #8
15e74     1B FA 61 FD | 	getrnd	result1
15e78     A7 FA 61 FC | 	wrlong	result1, fp
15e7c     A7 12 02 F6 | 	mov	arg01, fp
15e80     AC 5D BF FD | 	call	#_push
15e84     FC 00 90 FD | 	jmp	#LR__1746
15e88                 | LR__1741
15e88     0C 5D BF FD | 	call	#_pop
15e8c     A7 FA 61 FC | 	wrlong	result1, fp
15e90     04 4E 05 F1 | 	add	fp, #4
15e94     A7 FC 61 FC | 	wrlong	result2, fp
15e98     04 4E 05 F1 | 	add	fp, #4
15e9c     A7 FE 61 FC | 	wrlong	result3, fp
15ea0                 | '   t1=pop()
15ea0                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
15ea0     08 4E 85 F1 | 	sub	fp, #8
15ea4     1C FE 0D F2 | 	cmp	result3, #28 wz
15ea8     08 4E 05 51 |  if_ne	add	fp, #8
15eac     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15eb0     08 4E 85 51 |  if_ne	sub	fp, #8
15eb4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15eb8     2C 00 90 5D |  if_ne	jmp	#LR__1742
15ebc     1B FA 61 FD | 	getrnd	result1
15ec0     A7 1E 02 FB | 	rdlong	local01, fp
15ec4     0F FB 11 FD | 	qdiv	result1, local01
15ec8     A7 12 02 F6 | 	mov	arg01, fp
15ecc     19 1E 62 FD | 	getqy	local01
15ed0     A7 1E 62 FC | 	wrlong	local01, fp
15ed4     08 4E 05 F1 | 	add	fp, #8
15ed8     A7 3A 68 FC | 	wrlong	#29, fp
15edc     08 4E 85 F1 | 	sub	fp, #8
15ee0     4C 5D BF FD | 	call	#_push
15ee4     9C 00 90 FD | 	jmp	#LR__1745
15ee8                 | LR__1742
15ee8     08 4E 05 F1 | 	add	fp, #8
15eec     A7 1E 02 FB | 	rdlong	local01, fp
15ef0     08 4E 85 F1 | 	sub	fp, #8
15ef4     1E 1E 0E F2 | 	cmp	local01, #30 wz
15ef8     48 00 90 5D |  if_ne	jmp	#LR__1743
15efc     A7 12 02 FB | 	rdlong	arg01, fp
15f00     00 C0 24 FF 
15f04     00 14 06 F6 | 	mov	arg02, ##1233125376
15f08     D4 D7 B0 FD | 	call	#__system___float_div
15f0c     FD 1E 02 F6 | 	mov	local01, result1
15f10     1B 12 62 FD | 	getrnd	arg01
15f14     74 13 06 F4 | 	bitl	arg01, #372
15f18     BC D1 B0 FD | 	call	#__system___float_fromuns
15f1c     FD 14 02 F6 | 	mov	arg02, result1
15f20     0F 13 02 F6 | 	mov	arg01, local01
15f24     B4 D5 B0 FD | 	call	#__system___float_mul
15f28     A7 FA 61 FC | 	wrlong	result1, fp
15f2c     08 4E 05 F1 | 	add	fp, #8
15f30     A7 3C 68 FC | 	wrlong	#30, fp
15f34     08 4E 85 F1 | 	sub	fp, #8
15f38     A7 12 02 F6 | 	mov	arg01, fp
15f3c     F0 5C BF FD | 	call	#_push
15f40     40 00 90 FD | 	jmp	#LR__1744
15f44                 | LR__1743
15f44                 | '     print "rnd: "; : printerror(40) 
15f44     00 12 06 F6 | 	mov	arg01, #0
15f48     1C 04 B1 FD | 	call	#__system___getiolock_0540
15f4c     FD 12 02 F6 | 	mov	arg01, result1
15f50     D4 A9 B0 FD | 	call	#__system___lockmem
15f54     84 01 00 FF 
15f58     C9 14 06 F6 | 	mov	arg02, ##@LR__5422
15f5c     00 12 06 F6 | 	mov	arg01, #0
15f60     00 16 06 F6 | 	mov	arg03, #0
15f64     B4 B6 B0 FD | 	call	#__system___basic_print_string
15f68     00 12 06 F6 | 	mov	arg01, #0
15f6c     F8 03 B1 FD | 	call	#__system___getiolock_0540
15f70     FD 00 68 FC | 	wrlong	#0, result1
15f74     28 12 06 F6 | 	mov	arg01, #40
15f78     48 76 B0 FD | 	call	#_printerror
15f7c     A7 12 02 F6 | 	mov	arg01, fp
15f80     AC 5C BF FD | 	call	#_push
15f84                 | LR__1744
15f84                 | LR__1745
15f84                 | LR__1746
15f84                 | LR__1747
15f84     A7 F0 03 F6 | 	mov	ptra, fp
15f88     B2 00 A0 FD | 	call	#popregs_
15f8c                 | _do_rnd_ret
15f8c     2D 00 64 FD | 	ret
15f90                 | 
15f90                 | ' 
15f90                 | ' sub do_getenvsustain
15f90                 | _do_getenvsustain
15f90     01 4A 05 F6 | 	mov	COUNT_, #1
15f94     A8 00 A0 FD | 	call	#pushregs_
15f98     10 F0 07 F1 | 	add	ptra, #16
15f9c     4A 00 00 FF 
15fa0     80 E4 05 F1 | 	add	objptr, ##38016
15fa4     F2 1E 02 FB | 	rdlong	local01, objptr
15fa8     0F 17 02 F6 | 	mov	arg03, local01
15fac     01 16 66 F0 | 	shl	arg03, #1
15fb0     0F 17 02 F1 | 	add	arg03, local01
15fb4     02 16 66 F0 | 	shl	arg03, #2
15fb8     03 00 00 FF 
15fbc     04 E4 85 F1 | 	sub	objptr, ##1540
15fc0     F2 16 02 F1 | 	add	arg03, objptr
15fc4     0B 17 02 FB | 	rdlong	arg03, arg03
15fc8     0C 4E 05 F1 | 	add	fp, #12
15fcc     A7 16 62 FC | 	wrlong	arg03, fp
15fd0                 | ' 
15fd0                 | ' numpar=compiledline(lineptr_e).result.uresult
15fd0                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
15fd0     0C 4E 85 F1 | 	sub	fp, #12
15fd4     02 16 16 F2 | 	cmp	arg03, #2 wc
15fd8     47 00 00 FF 
15fdc     7C E4 85 F1 | 	sub	objptr, ##36476
15fe0     0C 4E 05 C1 |  if_b	add	fp, #12
15fe4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
15fe8     0C 4E 85 C1 |  if_b	sub	fp, #12
15fec     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1750
15ff0     00 12 06 F6 | 	mov	arg01, #0
15ff4     70 03 B1 FD | 	call	#__system___getiolock_0540
15ff8     FD 12 02 F6 | 	mov	arg01, result1
15ffc     28 A9 B0 FD | 	call	#__system___lockmem
16000     84 01 00 FF 
16004     CF 14 06 F6 | 	mov	arg02, ##@LR__5423
16008     00 12 06 F6 | 	mov	arg01, #0
1600c     00 16 06 F6 | 	mov	arg03, #0
16010     08 B6 B0 FD | 	call	#__system___basic_print_string
16014     00 12 06 F6 | 	mov	arg01, #0
16018     4C 03 B1 FD | 	call	#__system___getiolock_0540
1601c     FD 00 68 FC | 	wrlong	#0, result1
16020     27 12 06 F6 | 	mov	arg01, #39
16024     9C 75 B0 FD | 	call	#_printerror
16028     64 00 90 FD | 	jmp	#LR__1751
1602c                 | LR__1750
1602c     68 5B BF FD | 	call	#_pop
16030     FD 1E 02 F6 | 	mov	local01, result1
16034     FE 16 02 F6 | 	mov	arg03, result2
16038     A7 1E 62 FC | 	wrlong	local01, fp
1603c     04 4E 05 F1 | 	add	fp, #4
16040     A7 16 62 FC | 	wrlong	arg03, fp
16044     04 4E 05 F1 | 	add	fp, #4
16048     A7 FE 61 FC | 	wrlong	result3, fp
1604c     08 4E 85 F1 | 	sub	fp, #8
16050     A7 12 02 F6 | 	mov	arg01, fp
16054     10 FC BF FD | 	call	#_converttoint
16058     FD 1E 02 F6 | 	mov	local01, result1
1605c     01 1E 66 F0 | 	shl	local01, #1
16060     59 00 00 FF 
16064     CC E5 05 F1 | 	add	objptr, ##46028
16068     F2 1E 02 F1 | 	add	local01, objptr
1606c     0F 1F E2 FA | 	rdword	local01, local01
16070     A7 1E 62 FC | 	wrlong	local01, fp
16074     08 4E 05 F1 | 	add	fp, #8
16078     A7 38 68 FC | 	wrlong	#28, fp
1607c     08 4E 85 F1 | 	sub	fp, #8
16080     A7 12 02 F6 | 	mov	arg01, fp
16084     59 00 00 FF 
16088     CC E5 85 F1 | 	sub	objptr, ##46028
1608c     A0 5B BF FD | 	call	#_push
16090                 | LR__1751
16090     A7 F0 03 F6 | 	mov	ptra, fp
16094     B2 00 A0 FD | 	call	#popregs_
16098                 | _do_getenvsustain_ret
16098     2D 00 64 FD | 	ret
1609c                 | 
1609c                 | ' 
1609c                 | ' sub do_sin
1609c                 | _do_sin
1609c     01 4A 05 F6 | 	mov	COUNT_, #1
160a0     A8 00 A0 FD | 	call	#pushregs_
160a4     10 F0 07 F1 | 	add	ptra, #16
160a8     4A 00 00 FF 
160ac     80 E4 05 F1 | 	add	objptr, ##38016
160b0     F2 1E 02 FB | 	rdlong	local01, objptr
160b4     0F 17 02 F6 | 	mov	arg03, local01
160b8     01 16 66 F0 | 	shl	arg03, #1
160bc     0F 17 02 F1 | 	add	arg03, local01
160c0     02 16 66 F0 | 	shl	arg03, #2
160c4     03 00 00 FF 
160c8     04 E4 85 F1 | 	sub	objptr, ##1540
160cc     F2 16 02 F1 | 	add	arg03, objptr
160d0     0B 17 02 FB | 	rdlong	arg03, arg03
160d4     0C 4E 05 F1 | 	add	fp, #12
160d8     A7 16 62 FC | 	wrlong	arg03, fp
160dc                 | ' 
160dc                 | ' numpar=compiledline(lineptr_e).result.uresult
160dc                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
160dc     0C 4E 85 F1 | 	sub	fp, #12
160e0     02 16 16 F2 | 	cmp	arg03, #2 wc
160e4     47 00 00 FF 
160e8     7C E4 85 F1 | 	sub	objptr, ##36476
160ec     0C 4E 05 C1 |  if_b	add	fp, #12
160f0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
160f4     0C 4E 85 C1 |  if_b	sub	fp, #12
160f8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1760
160fc     00 12 06 F6 | 	mov	arg01, #0
16100     64 02 B1 FD | 	call	#__system___getiolock_0540
16104     FD 12 02 F6 | 	mov	arg01, result1
16108     1C A8 B0 FD | 	call	#__system___lockmem
1610c     84 01 00 FF 
16110     DF 14 06 F6 | 	mov	arg02, ##@LR__5424
16114     00 12 06 F6 | 	mov	arg01, #0
16118     00 16 06 F6 | 	mov	arg03, #0
1611c     FC B4 B0 FD | 	call	#__system___basic_print_string
16120     00 12 06 F6 | 	mov	arg01, #0
16124     40 02 B1 FD | 	call	#__system___getiolock_0540
16128     FD 00 68 FC | 	wrlong	#0, result1
1612c     27 12 06 F6 | 	mov	arg01, #39
16130     90 74 B0 FD | 	call	#_printerror
16134     64 00 90 FD | 	jmp	#LR__1761
16138                 | LR__1760
16138     5C 5A BF FD | 	call	#_pop
1613c     A7 FA 61 FC | 	wrlong	result1, fp
16140     04 4E 05 F1 | 	add	fp, #4
16144     A7 FC 61 FC | 	wrlong	result2, fp
16148     04 4E 05 F1 | 	add	fp, #4
1614c     A7 FE 61 FC | 	wrlong	result3, fp
16150     08 4E 85 F1 | 	sub	fp, #8
16154     59 00 00 FF 
16158     C0 E5 05 F1 | 	add	objptr, ##46016
1615c     F2 1E 02 FB | 	rdlong	local01, objptr
16160     59 00 00 FF 
16164     C0 E5 85 F1 | 	sub	objptr, ##46016
16168     A7 12 02 F6 | 	mov	arg01, fp
1616c     B4 FB BF FD | 	call	#_converttofloat
16170     FD 14 02 F6 | 	mov	arg02, result1
16174     0F 13 02 F6 | 	mov	arg01, local01
16178     60 D3 B0 FD | 	call	#__system___float_mul
1617c     FD 12 02 F6 | 	mov	arg01, result1
16180     94 DC B0 FD | 	call	#__system____builtin_sinf
16184     A7 FA 61 FC | 	wrlong	result1, fp
16188     08 4E 05 F1 | 	add	fp, #8
1618c     A7 3C 68 FC | 	wrlong	#30, fp
16190     08 4E 85 F1 | 	sub	fp, #8
16194     A7 12 02 F6 | 	mov	arg01, fp
16198     94 5A BF FD | 	call	#_push
1619c                 | LR__1761
1619c     A7 F0 03 F6 | 	mov	ptra, fp
161a0     B2 00 A0 FD | 	call	#popregs_
161a4                 | _do_sin_ret
161a4     2D 00 64 FD | 	ret
161a8                 | 
161a8                 | ' 
161a8                 | ' 
161a8                 | ' sub do_mid
161a8                 | _do_mid
161a8     00 4A 05 F6 | 	mov	COUNT_, #0
161ac     A8 00 A0 FD | 	call	#pushregs_
161b0     18 F0 07 F1 | 	add	ptra, #24
161b4     4A 00 00 FF 
161b8     80 E4 05 F1 | 	add	objptr, ##38016
161bc     F2 16 02 FB | 	rdlong	arg03, objptr
161c0     0B 15 02 F6 | 	mov	arg02, arg03
161c4     01 14 66 F0 | 	shl	arg02, #1
161c8     0B 15 02 F1 | 	add	arg02, arg03
161cc     02 14 66 F0 | 	shl	arg02, #2
161d0     03 00 00 FF 
161d4     04 E4 85 F1 | 	sub	objptr, ##1540
161d8     F2 14 02 F1 | 	add	arg02, objptr
161dc     0A 17 02 FB | 	rdlong	arg03, arg02
161e0     0C 4E 05 F1 | 	add	fp, #12
161e4     A7 16 62 FC | 	wrlong	arg03, fp
161e8                 | ' 
161e8                 | ' numpar=compiledline(lineptr_e).result.uresult
161e8                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
161e8     0C 4E 85 F1 | 	sub	fp, #12
161ec     03 16 0E F2 | 	cmp	arg03, #3 wz
161f0     47 00 00 FF 
161f4     7C E4 85 F1 | 	sub	objptr, ##36476
161f8     3C 00 90 AD |  if_e	jmp	#LR__1770
161fc     00 12 06 F6 | 	mov	arg01, #0
16200     64 01 B1 FD | 	call	#__system___getiolock_0540
16204     FD 12 02 F6 | 	mov	arg01, result1
16208     1C A7 B0 FD | 	call	#__system___lockmem
1620c     84 01 00 FF 
16210     E5 14 06 F6 | 	mov	arg02, ##@LR__5425
16214     00 12 06 F6 | 	mov	arg01, #0
16218     00 16 06 F6 | 	mov	arg03, #0
1621c     FC B3 B0 FD | 	call	#__system___basic_print_string
16220     00 12 06 F6 | 	mov	arg01, #0
16224     40 01 B1 FD | 	call	#__system___getiolock_0540
16228     FD 00 68 FC | 	wrlong	#0, result1
1622c     27 12 06 F6 | 	mov	arg01, #39
16230     90 73 B0 FD | 	call	#_printerror
16234     28 01 90 FD | 	jmp	#LR__1773
16238                 | LR__1770
16238     5C 59 BF FD | 	call	#_pop
1623c     FF 16 02 F6 | 	mov	arg03, result3
16240     A7 FA 61 FC | 	wrlong	result1, fp
16244     04 4E 05 F1 | 	add	fp, #4
16248     A7 FC 61 FC | 	wrlong	result2, fp
1624c     04 4E 05 F1 | 	add	fp, #4
16250     A7 16 62 FC | 	wrlong	arg03, fp
16254     08 4E 85 F1 | 	sub	fp, #8
16258     A7 12 02 F6 | 	mov	arg01, fp
1625c     08 FA BF FD | 	call	#_converttoint
16260     FD 16 02 F6 | 	mov	arg03, result1
16264     14 4E 05 F1 | 	add	fp, #20
16268     A7 16 62 FC | 	wrlong	arg03, fp
1626c     14 4E 85 F1 | 	sub	fp, #20
16270     24 59 BF FD | 	call	#_pop
16274     FF 16 02 F6 | 	mov	arg03, result3
16278     A7 FA 61 FC | 	wrlong	result1, fp
1627c     04 4E 05 F1 | 	add	fp, #4
16280     A7 FC 61 FC | 	wrlong	result2, fp
16284     04 4E 05 F1 | 	add	fp, #4
16288     A7 16 62 FC | 	wrlong	arg03, fp
1628c     08 4E 85 F1 | 	sub	fp, #8
16290     A7 12 02 F6 | 	mov	arg01, fp
16294     D0 F9 BF FD | 	call	#_converttoint
16298     FD 16 02 F6 | 	mov	arg03, result1
1629c     10 4E 05 F1 | 	add	fp, #16
162a0     A7 16 62 FC | 	wrlong	arg03, fp
162a4     10 4E 85 F1 | 	sub	fp, #16
162a8     EC 58 BF FD | 	call	#_pop
162ac     FF 16 02 F6 | 	mov	arg03, result3
162b0     A7 FA 61 FC | 	wrlong	result1, fp
162b4     04 4E 05 F1 | 	add	fp, #4
162b8     A7 FC 61 FC | 	wrlong	result2, fp
162bc     04 4E 05 F1 | 	add	fp, #4
162c0     A7 16 62 FC | 	wrlong	arg03, fp
162c4                 | ' t1=pop() : arg2=converttoint(t1)
162c4                 | ' t1=pop() : arg1=converttoint(t1)
162c4                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
162c4     08 4E 85 F1 | 	sub	fp, #8
162c8     2B 16 0E F2 | 	cmp	arg03, #43 wz
162cc     18 00 90 5D |  if_ne	jmp	#LR__1771
162d0     A7 12 02 FB | 	rdlong	arg01, fp
162d4     6C B1 BF FD | 	call	#_convertstring
162d8     A7 FA 61 FC | 	wrlong	result1, fp
162dc     08 4E 05 F1 | 	add	fp, #8
162e0     A7 3E 68 FC | 	wrlong	#31, fp
162e4     08 4E 85 F1 | 	sub	fp, #8
162e8                 | LR__1771
162e8                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
162e8     08 4E 05 F1 | 	add	fp, #8
162ec     A7 16 02 FB | 	rdlong	arg03, fp
162f0     08 4E 85 F1 | 	sub	fp, #8
162f4     1F 16 0E F2 | 	cmp	arg03, #31 wz
162f8     3C 00 90 AD |  if_e	jmp	#LR__1772
162fc     00 12 06 F6 | 	mov	arg01, #0
16300     64 00 B1 FD | 	call	#__system___getiolock_0540
16304     FD 12 02 F6 | 	mov	arg01, result1
16308     1C A6 B0 FD | 	call	#__system___lockmem
1630c     84 01 00 FF 
16310     EC 14 06 F6 | 	mov	arg02, ##@LR__5426
16314     00 12 06 F6 | 	mov	arg01, #0
16318     00 16 06 F6 | 	mov	arg03, #0
1631c     FC B2 B0 FD | 	call	#__system___basic_print_string
16320     00 12 06 F6 | 	mov	arg01, #0
16324     40 00 B1 FD | 	call	#__system___getiolock_0540
16328     FD 00 68 FC | 	wrlong	#0, result1
1632c     0F 12 06 F6 | 	mov	arg01, #15
16330     90 72 B0 FD | 	call	#_printerror
16334     28 00 90 FD | 	jmp	#LR__1773
16338                 | LR__1772
16338     A7 12 02 FB | 	rdlong	arg01, fp
1633c     10 4E 05 F1 | 	add	fp, #16
16340     A7 14 02 FB | 	rdlong	arg02, fp
16344     04 4E 05 F1 | 	add	fp, #4
16348     A7 16 02 FB | 	rdlong	arg03, fp
1634c     14 4E 85 F1 | 	sub	fp, #20
16350     68 C7 B0 FD | 	call	#__system__Mid_S
16354     A7 FA 61 FC | 	wrlong	result1, fp
16358     A7 12 02 F6 | 	mov	arg01, fp
1635c     D0 58 BF FD | 	call	#_push
16360                 | LR__1773
16360     A7 F0 03 F6 | 	mov	ptra, fp
16364     B2 00 A0 FD | 	call	#popregs_
16368                 | _do_mid_ret
16368     2D 00 64 FD | 	ret
1636c                 | 
1636c                 | ' 
1636c                 | ' sub do_right
1636c                 | _do_right
1636c     00 4A 05 F6 | 	mov	COUNT_, #0
16370     A8 00 A0 FD | 	call	#pushregs_
16374     14 F0 07 F1 | 	add	ptra, #20
16378     4A 00 00 FF 
1637c     80 E4 05 F1 | 	add	objptr, ##38016
16380     F2 16 02 FB | 	rdlong	arg03, objptr
16384     0B 15 02 F6 | 	mov	arg02, arg03
16388     01 14 66 F0 | 	shl	arg02, #1
1638c     0B 15 02 F1 | 	add	arg02, arg03
16390     02 14 66 F0 | 	shl	arg02, #2
16394     03 00 00 FF 
16398     04 E4 85 F1 | 	sub	objptr, ##1540
1639c     F2 14 02 F1 | 	add	arg02, objptr
163a0     0A 17 02 FB | 	rdlong	arg03, arg02
163a4     0C 4E 05 F1 | 	add	fp, #12
163a8     A7 16 62 FC | 	wrlong	arg03, fp
163ac                 | ' 
163ac                 | ' numpar=compiledline(lineptr_e).result.uresult
163ac                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
163ac     0C 4E 85 F1 | 	sub	fp, #12
163b0     02 16 0E F2 | 	cmp	arg03, #2 wz
163b4     47 00 00 FF 
163b8     7C E4 85 F1 | 	sub	objptr, ##36476
163bc     3C 00 90 AD |  if_e	jmp	#LR__1780
163c0     00 12 06 F6 | 	mov	arg01, #0
163c4     A0 FF B0 FD | 	call	#__system___getiolock_0540
163c8     FD 12 02 F6 | 	mov	arg01, result1
163cc     58 A5 B0 FD | 	call	#__system___lockmem
163d0     84 01 00 FF 
163d4     F3 14 06 F6 | 	mov	arg02, ##@LR__5427
163d8     00 12 06 F6 | 	mov	arg01, #0
163dc     00 16 06 F6 | 	mov	arg03, #0
163e0     38 B2 B0 FD | 	call	#__system___basic_print_string
163e4     00 12 06 F6 | 	mov	arg01, #0
163e8     7C FF B0 FD | 	call	#__system___getiolock_0540
163ec     FD 00 68 FC | 	wrlong	#0, result1
163f0     27 12 06 F6 | 	mov	arg01, #39
163f4     CC 71 B0 FD | 	call	#_printerror
163f8     E8 00 90 FD | 	jmp	#LR__1783
163fc                 | LR__1780
163fc     98 57 BF FD | 	call	#_pop
16400     FF 16 02 F6 | 	mov	arg03, result3
16404     A7 FA 61 FC | 	wrlong	result1, fp
16408     04 4E 05 F1 | 	add	fp, #4
1640c     A7 FC 61 FC | 	wrlong	result2, fp
16410     04 4E 05 F1 | 	add	fp, #4
16414     A7 16 62 FC | 	wrlong	arg03, fp
16418     08 4E 85 F1 | 	sub	fp, #8
1641c     A7 12 02 F6 | 	mov	arg01, fp
16420     44 F8 BF FD | 	call	#_converttoint
16424     FD 16 02 F6 | 	mov	arg03, result1
16428     10 4E 05 F1 | 	add	fp, #16
1642c     A7 16 62 FC | 	wrlong	arg03, fp
16430     10 4E 85 F1 | 	sub	fp, #16
16434     60 57 BF FD | 	call	#_pop
16438     FF 16 02 F6 | 	mov	arg03, result3
1643c     A7 FA 61 FC | 	wrlong	result1, fp
16440     04 4E 05 F1 | 	add	fp, #4
16444     A7 FC 61 FC | 	wrlong	result2, fp
16448     04 4E 05 F1 | 	add	fp, #4
1644c     A7 16 62 FC | 	wrlong	arg03, fp
16450                 | ' t1=pop() : arg=converttoint(t1)
16450                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16450     08 4E 85 F1 | 	sub	fp, #8
16454     2B 16 0E F2 | 	cmp	arg03, #43 wz
16458     18 00 90 5D |  if_ne	jmp	#LR__1781
1645c     A7 12 02 FB | 	rdlong	arg01, fp
16460     E0 AF BF FD | 	call	#_convertstring
16464     A7 FA 61 FC | 	wrlong	result1, fp
16468     08 4E 05 F1 | 	add	fp, #8
1646c     A7 3E 68 FC | 	wrlong	#31, fp
16470     08 4E 85 F1 | 	sub	fp, #8
16474                 | LR__1781
16474                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
16474     08 4E 05 F1 | 	add	fp, #8
16478     A7 16 02 FB | 	rdlong	arg03, fp
1647c     08 4E 85 F1 | 	sub	fp, #8
16480     1F 16 0E F2 | 	cmp	arg03, #31 wz
16484     3C 00 90 AD |  if_e	jmp	#LR__1782
16488     00 12 06 F6 | 	mov	arg01, #0
1648c     D8 FE B0 FD | 	call	#__system___getiolock_0540
16490     FD 12 02 F6 | 	mov	arg01, result1
16494     90 A4 B0 FD | 	call	#__system___lockmem
16498     84 01 00 FF 
1649c     FC 14 06 F6 | 	mov	arg02, ##@LR__5428
164a0     00 12 06 F6 | 	mov	arg01, #0
164a4     00 16 06 F6 | 	mov	arg03, #0
164a8     70 B1 B0 FD | 	call	#__system___basic_print_string
164ac     00 12 06 F6 | 	mov	arg01, #0
164b0     B4 FE B0 FD | 	call	#__system___getiolock_0540
164b4     FD 00 68 FC | 	wrlong	#0, result1
164b8     0F 12 06 F6 | 	mov	arg01, #15
164bc     04 71 B0 FD | 	call	#_printerror
164c0     20 00 90 FD | 	jmp	#LR__1783
164c4                 | LR__1782
164c4     A7 12 02 FB | 	rdlong	arg01, fp
164c8     10 4E 05 F1 | 	add	fp, #16
164cc     A7 14 02 FB | 	rdlong	arg02, fp
164d0     10 4E 85 F1 | 	sub	fp, #16
164d4     54 C5 B0 FD | 	call	#__system__Right_S
164d8     A7 FA 61 FC | 	wrlong	result1, fp
164dc     A7 12 02 F6 | 	mov	arg01, fp
164e0     4C 57 BF FD | 	call	#_push
164e4                 | LR__1783
164e4     A7 F0 03 F6 | 	mov	ptra, fp
164e8     B2 00 A0 FD | 	call	#popregs_
164ec                 | _do_right_ret
164ec     2D 00 64 FD | 	ret
164f0                 | 
164f0                 | ' 
164f0                 | ' sub do_left
164f0                 | _do_left
164f0     00 4A 05 F6 | 	mov	COUNT_, #0
164f4     A8 00 A0 FD | 	call	#pushregs_
164f8     14 F0 07 F1 | 	add	ptra, #20
164fc     4A 00 00 FF 
16500     80 E4 05 F1 | 	add	objptr, ##38016
16504     F2 16 02 FB | 	rdlong	arg03, objptr
16508     0B 15 02 F6 | 	mov	arg02, arg03
1650c     01 14 66 F0 | 	shl	arg02, #1
16510     0B 15 02 F1 | 	add	arg02, arg03
16514     02 14 66 F0 | 	shl	arg02, #2
16518     03 00 00 FF 
1651c     04 E4 85 F1 | 	sub	objptr, ##1540
16520     F2 14 02 F1 | 	add	arg02, objptr
16524     0A 17 02 FB | 	rdlong	arg03, arg02
16528     0C 4E 05 F1 | 	add	fp, #12
1652c     A7 16 62 FC | 	wrlong	arg03, fp
16530                 | ' 
16530                 | ' numpar=compiledline(lineptr_e).result.uresult
16530                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
16530     0C 4E 85 F1 | 	sub	fp, #12
16534     02 16 0E F2 | 	cmp	arg03, #2 wz
16538     47 00 00 FF 
1653c     7C E4 85 F1 | 	sub	objptr, ##36476
16540     3C 00 90 AD |  if_e	jmp	#LR__1790
16544     00 12 06 F6 | 	mov	arg01, #0
16548     1C FE B0 FD | 	call	#__system___getiolock_0540
1654c     FD 12 02 F6 | 	mov	arg01, result1
16550     D4 A3 B0 FD | 	call	#__system___lockmem
16554     84 01 00 FF 
16558     05 15 06 F6 | 	mov	arg02, ##@LR__5429
1655c     00 12 06 F6 | 	mov	arg01, #0
16560     00 16 06 F6 | 	mov	arg03, #0
16564     B4 B0 B0 FD | 	call	#__system___basic_print_string
16568     00 12 06 F6 | 	mov	arg01, #0
1656c     F8 FD B0 FD | 	call	#__system___getiolock_0540
16570     FD 00 68 FC | 	wrlong	#0, result1
16574     27 12 06 F6 | 	mov	arg01, #39
16578     48 70 B0 FD | 	call	#_printerror
1657c     E8 00 90 FD | 	jmp	#LR__1793
16580                 | LR__1790
16580     14 56 BF FD | 	call	#_pop
16584     FF 16 02 F6 | 	mov	arg03, result3
16588     A7 FA 61 FC | 	wrlong	result1, fp
1658c     04 4E 05 F1 | 	add	fp, #4
16590     A7 FC 61 FC | 	wrlong	result2, fp
16594     04 4E 05 F1 | 	add	fp, #4
16598     A7 16 62 FC | 	wrlong	arg03, fp
1659c     08 4E 85 F1 | 	sub	fp, #8
165a0     A7 12 02 F6 | 	mov	arg01, fp
165a4     C0 F6 BF FD | 	call	#_converttoint
165a8     FD 16 02 F6 | 	mov	arg03, result1
165ac     10 4E 05 F1 | 	add	fp, #16
165b0     A7 16 62 FC | 	wrlong	arg03, fp
165b4     10 4E 85 F1 | 	sub	fp, #16
165b8     DC 55 BF FD | 	call	#_pop
165bc     FF 16 02 F6 | 	mov	arg03, result3
165c0     A7 FA 61 FC | 	wrlong	result1, fp
165c4     04 4E 05 F1 | 	add	fp, #4
165c8     A7 FC 61 FC | 	wrlong	result2, fp
165cc     04 4E 05 F1 | 	add	fp, #4
165d0     A7 16 62 FC | 	wrlong	arg03, fp
165d4                 | ' t1=pop() : arg=converttoint(t1)
165d4                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
165d4     08 4E 85 F1 | 	sub	fp, #8
165d8     2B 16 0E F2 | 	cmp	arg03, #43 wz
165dc     18 00 90 5D |  if_ne	jmp	#LR__1791
165e0     A7 12 02 FB | 	rdlong	arg01, fp
165e4     5C AE BF FD | 	call	#_convertstring
165e8     A7 FA 61 FC | 	wrlong	result1, fp
165ec     08 4E 05 F1 | 	add	fp, #8
165f0     A7 3E 68 FC | 	wrlong	#31, fp
165f4     08 4E 85 F1 | 	sub	fp, #8
165f8                 | LR__1791
165f8                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
165f8     08 4E 05 F1 | 	add	fp, #8
165fc     A7 16 02 FB | 	rdlong	arg03, fp
16600     08 4E 85 F1 | 	sub	fp, #8
16604     1F 16 0E F2 | 	cmp	arg03, #31 wz
16608     3C 00 90 AD |  if_e	jmp	#LR__1792
1660c     00 12 06 F6 | 	mov	arg01, #0
16610     54 FD B0 FD | 	call	#__system___getiolock_0540
16614     FD 12 02 F6 | 	mov	arg01, result1
16618     0C A3 B0 FD | 	call	#__system___lockmem
1661c     84 01 00 FF 
16620     0D 15 06 F6 | 	mov	arg02, ##@LR__5430
16624     00 12 06 F6 | 	mov	arg01, #0
16628     00 16 06 F6 | 	mov	arg03, #0
1662c     EC AF B0 FD | 	call	#__system___basic_print_string
16630     00 12 06 F6 | 	mov	arg01, #0
16634     30 FD B0 FD | 	call	#__system___getiolock_0540
16638     FD 00 68 FC | 	wrlong	#0, result1
1663c     0F 12 06 F6 | 	mov	arg01, #15
16640     80 6F B0 FD | 	call	#_printerror
16644     20 00 90 FD | 	jmp	#LR__1793
16648                 | LR__1792
16648     A7 12 02 FB | 	rdlong	arg01, fp
1664c     10 4E 05 F1 | 	add	fp, #16
16650     A7 14 02 FB | 	rdlong	arg02, fp
16654     10 4E 85 F1 | 	sub	fp, #16
16658     48 C3 B0 FD | 	call	#__system__Left_S
1665c     A7 FA 61 FC | 	wrlong	result1, fp
16660     A7 12 02 F6 | 	mov	arg01, fp
16664     C8 55 BF FD | 	call	#_push
16668                 | LR__1793
16668     A7 F0 03 F6 | 	mov	ptra, fp
1666c     B2 00 A0 FD | 	call	#popregs_
16670                 | _do_left_ret
16670     2D 00 64 FD | 	ret
16674                 | 
16674                 | ' 
16674                 | ' sub do_asc
16674                 | _do_asc
16674     01 4A 05 F6 | 	mov	COUNT_, #1
16678     A8 00 A0 FD | 	call	#pushregs_
1667c     14 F0 07 F1 | 	add	ptra, #20
16680     4A 00 00 FF 
16684     80 E4 05 F1 | 	add	objptr, ##38016
16688     F2 1E 02 FB | 	rdlong	local01, objptr
1668c     0F 17 02 F6 | 	mov	arg03, local01
16690     01 16 66 F0 | 	shl	arg03, #1
16694     0F 17 02 F1 | 	add	arg03, local01
16698     02 16 66 F0 | 	shl	arg03, #2
1669c     03 00 00 FF 
166a0     04 E4 85 F1 | 	sub	objptr, ##1540
166a4     F2 16 02 F1 | 	add	arg03, objptr
166a8     0B 17 02 FB | 	rdlong	arg03, arg03
166ac     0C 4E 05 F1 | 	add	fp, #12
166b0     A7 16 62 FC | 	wrlong	arg03, fp
166b4                 | ' 
166b4                 | ' numpar=compiledline(lineptr_e).result.uresult
166b4                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
166b4     0C 4E 85 F1 | 	sub	fp, #12
166b8     02 16 16 F2 | 	cmp	arg03, #2 wc
166bc     47 00 00 FF 
166c0     7C E4 85 F1 | 	sub	objptr, ##36476
166c4     0C 4E 05 C1 |  if_b	add	fp, #12
166c8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
166cc     0C 4E 85 C1 |  if_b	sub	fp, #12
166d0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1800
166d4     00 12 06 F6 | 	mov	arg01, #0
166d8     8C FC B0 FD | 	call	#__system___getiolock_0540
166dc     FD 12 02 F6 | 	mov	arg01, result1
166e0     44 A2 B0 FD | 	call	#__system___lockmem
166e4     84 01 00 FF 
166e8     15 15 06 F6 | 	mov	arg02, ##@LR__5431
166ec     00 12 06 F6 | 	mov	arg01, #0
166f0     00 16 06 F6 | 	mov	arg03, #0
166f4     24 AF B0 FD | 	call	#__system___basic_print_string
166f8     00 12 06 F6 | 	mov	arg01, #0
166fc     68 FC B0 FD | 	call	#__system___getiolock_0540
16700     FD 00 68 FC | 	wrlong	#0, result1
16704     27 12 06 F6 | 	mov	arg01, #39
16708     B8 6E B0 FD | 	call	#_printerror
1670c     B0 00 90 FD | 	jmp	#LR__1803
16710                 | LR__1800
16710     84 54 BF FD | 	call	#_pop
16714     FF 16 02 F6 | 	mov	arg03, result3
16718     A7 FA 61 FC | 	wrlong	result1, fp
1671c     04 4E 05 F1 | 	add	fp, #4
16720     A7 FC 61 FC | 	wrlong	result2, fp
16724     04 4E 05 F1 | 	add	fp, #4
16728     A7 16 62 FC | 	wrlong	arg03, fp
1672c                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1672c     08 4E 85 F1 | 	sub	fp, #8
16730     2B 16 0E F2 | 	cmp	arg03, #43 wz
16734     18 00 90 5D |  if_ne	jmp	#LR__1801
16738     A7 12 02 FB | 	rdlong	arg01, fp
1673c     04 AD BF FD | 	call	#_convertstring
16740     A7 FA 61 FC | 	wrlong	result1, fp
16744     08 4E 05 F1 | 	add	fp, #8
16748     A7 3E 68 FC | 	wrlong	#31, fp
1674c     08 4E 85 F1 | 	sub	fp, #8
16750                 | LR__1801
16750                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
16750     08 4E 05 F1 | 	add	fp, #8
16754     A7 16 02 FB | 	rdlong	arg03, fp
16758     08 4E 85 F1 | 	sub	fp, #8
1675c     1F 16 0E F2 | 	cmp	arg03, #31 wz
16760     3C 00 90 AD |  if_e	jmp	#LR__1802
16764     00 12 06 F6 | 	mov	arg01, #0
16768     FC FB B0 FD | 	call	#__system___getiolock_0540
1676c     FD 12 02 F6 | 	mov	arg01, result1
16770     B4 A1 B0 FD | 	call	#__system___lockmem
16774     84 01 00 FF 
16778     1B 15 06 F6 | 	mov	arg02, ##@LR__5432
1677c     00 12 06 F6 | 	mov	arg01, #0
16780     00 16 06 F6 | 	mov	arg03, #0
16784     94 AE B0 FD | 	call	#__system___basic_print_string
16788     00 12 06 F6 | 	mov	arg01, #0
1678c     D8 FB B0 FD | 	call	#__system___getiolock_0540
16790     FD 00 68 FC | 	wrlong	#0, result1
16794     0F 12 06 F6 | 	mov	arg01, #15
16798     28 6E B0 FD | 	call	#_printerror
1679c     20 00 90 FD | 	jmp	#LR__1803
167a0                 | LR__1802
167a0     A7 1E 02 FB | 	rdlong	local01, fp
167a4     0F 1F C2 FA | 	rdbyte	local01, local01
167a8     A7 1E 62 FC | 	wrlong	local01, fp
167ac     08 4E 05 F1 | 	add	fp, #8
167b0     A7 38 68 FC | 	wrlong	#28, fp
167b4     08 4E 85 F1 | 	sub	fp, #8
167b8     A7 12 02 F6 | 	mov	arg01, fp
167bc     70 54 BF FD | 	call	#_push
167c0                 | LR__1803
167c0     A7 F0 03 F6 | 	mov	ptra, fp
167c4     B2 00 A0 FD | 	call	#popregs_
167c8                 | _do_asc_ret
167c8     2D 00 64 FD | 	ret
167cc                 | 
167cc                 | ' 
167cc                 | ' sub do_len
167cc                 | _do_len
167cc     02 4A 05 F6 | 	mov	COUNT_, #2
167d0     A8 00 A0 FD | 	call	#pushregs_
167d4     14 F0 07 F1 | 	add	ptra, #20
167d8     4A 00 00 FF 
167dc     80 E4 05 F1 | 	add	objptr, ##38016
167e0     F2 1E 02 FB | 	rdlong	local01, objptr
167e4     0F 17 02 F6 | 	mov	arg03, local01
167e8     01 16 66 F0 | 	shl	arg03, #1
167ec     0F 17 02 F1 | 	add	arg03, local01
167f0     02 16 66 F0 | 	shl	arg03, #2
167f4     03 00 00 FF 
167f8     04 E4 85 F1 | 	sub	objptr, ##1540
167fc     F2 16 02 F1 | 	add	arg03, objptr
16800     0B 17 02 FB | 	rdlong	arg03, arg03
16804     0C 4E 05 F1 | 	add	fp, #12
16808     A7 16 62 FC | 	wrlong	arg03, fp
1680c                 | ' 
1680c                 | ' numpar=compiledline(lineptr_e).result.uresult
1680c                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
1680c     0C 4E 85 F1 | 	sub	fp, #12
16810     02 16 16 F2 | 	cmp	arg03, #2 wc
16814     47 00 00 FF 
16818     7C E4 85 F1 | 	sub	objptr, ##36476
1681c     0C 4E 05 C1 |  if_b	add	fp, #12
16820     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16824     0C 4E 85 C1 |  if_b	sub	fp, #12
16828     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1810
1682c     00 12 06 F6 | 	mov	arg01, #0
16830     34 FB B0 FD | 	call	#__system___getiolock_0540
16834     FD 12 02 F6 | 	mov	arg01, result1
16838     EC A0 B0 FD | 	call	#__system___lockmem
1683c     84 01 00 FF 
16840     21 15 06 F6 | 	mov	arg02, ##@LR__5433
16844     00 12 06 F6 | 	mov	arg01, #0
16848     00 16 06 F6 | 	mov	arg03, #0
1684c     CC AD B0 FD | 	call	#__system___basic_print_string
16850     00 12 06 F6 | 	mov	arg01, #0
16854     10 FB B0 FD | 	call	#__system___getiolock_0540
16858     FD 00 68 FC | 	wrlong	#0, result1
1685c     27 12 06 F6 | 	mov	arg01, #39
16860     60 6D B0 FD | 	call	#_printerror
16864     C4 00 90 FD | 	jmp	#LR__1815
16868                 | LR__1810
16868     2C 53 BF FD | 	call	#_pop
1686c     FF 16 02 F6 | 	mov	arg03, result3
16870     A7 FA 61 FC | 	wrlong	result1, fp
16874     04 4E 05 F1 | 	add	fp, #4
16878     A7 FC 61 FC | 	wrlong	result2, fp
1687c     04 4E 05 F1 | 	add	fp, #4
16880     A7 16 62 FC | 	wrlong	arg03, fp
16884                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16884     08 4E 85 F1 | 	sub	fp, #8
16888     2B 16 0E F2 | 	cmp	arg03, #43 wz
1688c     18 00 90 5D |  if_ne	jmp	#LR__1811
16890     A7 12 02 FB | 	rdlong	arg01, fp
16894     AC AB BF FD | 	call	#_convertstring
16898     A7 FA 61 FC | 	wrlong	result1, fp
1689c     08 4E 05 F1 | 	add	fp, #8
168a0     A7 3E 68 FC | 	wrlong	#31, fp
168a4     08 4E 85 F1 | 	sub	fp, #8
168a8                 | LR__1811
168a8                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
168a8     08 4E 05 F1 | 	add	fp, #8
168ac     A7 16 02 FB | 	rdlong	arg03, fp
168b0     08 4E 85 F1 | 	sub	fp, #8
168b4     1F 16 0E F2 | 	cmp	arg03, #31 wz
168b8     3C 00 90 AD |  if_e	jmp	#LR__1812
168bc     00 12 06 F6 | 	mov	arg01, #0
168c0     A4 FA B0 FD | 	call	#__system___getiolock_0540
168c4     FD 12 02 F6 | 	mov	arg01, result1
168c8     5C A0 B0 FD | 	call	#__system___lockmem
168cc     84 01 00 FF 
168d0     27 15 06 F6 | 	mov	arg02, ##@LR__5434
168d4     00 12 06 F6 | 	mov	arg01, #0
168d8     00 16 06 F6 | 	mov	arg03, #0
168dc     3C AD B0 FD | 	call	#__system___basic_print_string
168e0     00 12 06 F6 | 	mov	arg01, #0
168e4     80 FA B0 FD | 	call	#__system___getiolock_0540
168e8     FD 00 68 FC | 	wrlong	#0, result1
168ec     0F 12 06 F6 | 	mov	arg01, #15
168f0     D0 6C B0 FD | 	call	#_printerror
168f4     34 00 90 FD | 	jmp	#LR__1815
168f8                 | LR__1812
168f8     A7 12 02 FB | 	rdlong	arg01, fp
168fc     09 21 02 F6 | 	mov	local02, arg01
16900     97 06 48 FB | 	callpa	#(@LR__1814-@LR__1813)>>2,fcache_load_ptr_
16904                 | LR__1813
16904     10 FB C9 FA | 	rdbyte	result1, local02 wz
16908     01 20 06 51 |  if_ne	add	local02, #1
1690c     F4 FF 9F 5D |  if_ne	jmp	#LR__1813
16910                 | LR__1814
16910     09 21 82 F1 | 	sub	local02, arg01
16914     A7 20 62 FC | 	wrlong	local02, fp
16918     08 4E 05 F1 | 	add	fp, #8
1691c     A7 38 68 FC | 	wrlong	#28, fp
16920     08 4E 85 F1 | 	sub	fp, #8
16924     A7 12 02 F6 | 	mov	arg01, fp
16928     04 53 BF FD | 	call	#_push
1692c                 | LR__1815
1692c     A7 F0 03 F6 | 	mov	ptra, fp
16930     B2 00 A0 FD | 	call	#popregs_
16934                 | _do_len_ret
16934     2D 00 64 FD | 	ret
16938                 | 
16938                 | ' 
16938                 | ' sub do_chr
16938                 | _do_chr
16938     01 4A 05 F6 | 	mov	COUNT_, #1
1693c     A8 00 A0 FD | 	call	#pushregs_
16940     14 F0 07 F1 | 	add	ptra, #20
16944     4A 00 00 FF 
16948     80 E4 05 F1 | 	add	objptr, ##38016
1694c     F2 1E 02 FB | 	rdlong	local01, objptr
16950     0F 17 02 F6 | 	mov	arg03, local01
16954     01 16 66 F0 | 	shl	arg03, #1
16958     0F 17 02 F1 | 	add	arg03, local01
1695c     02 16 66 F0 | 	shl	arg03, #2
16960     03 00 00 FF 
16964     04 E4 85 F1 | 	sub	objptr, ##1540
16968     F2 16 02 F1 | 	add	arg03, objptr
1696c     0B 17 02 FB | 	rdlong	arg03, arg03
16970     0C 4E 05 F1 | 	add	fp, #12
16974     A7 16 62 FC | 	wrlong	arg03, fp
16978                 | ' 
16978                 | ' numpar=compiledline(lineptr_e).result.uresult
16978                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
16978     0C 4E 85 F1 | 	sub	fp, #12
1697c     02 16 16 F2 | 	cmp	arg03, #2 wc
16980     47 00 00 FF 
16984     7C E4 85 F1 | 	sub	objptr, ##36476
16988     0C 4E 05 C1 |  if_b	add	fp, #12
1698c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16990     0C 4E 85 C1 |  if_b	sub	fp, #12
16994     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1820
16998     00 12 06 F6 | 	mov	arg01, #0
1699c     C8 F9 B0 FD | 	call	#__system___getiolock_0540
169a0     FD 12 02 F6 | 	mov	arg01, result1
169a4     80 9F B0 FD | 	call	#__system___lockmem
169a8     84 01 00 FF 
169ac     2D 15 06 F6 | 	mov	arg02, ##@LR__5435
169b0     00 12 06 F6 | 	mov	arg01, #0
169b4     00 16 06 F6 | 	mov	arg03, #0
169b8     60 AC B0 FD | 	call	#__system___basic_print_string
169bc     00 12 06 F6 | 	mov	arg01, #0
169c0     A4 F9 B0 FD | 	call	#__system___getiolock_0540
169c4     FD 00 68 FC | 	wrlong	#0, result1
169c8     27 12 06 F6 | 	mov	arg01, #39
169cc     F4 6B B0 FD | 	call	#_printerror
169d0     54 00 90 FD | 	jmp	#LR__1821
169d4                 | LR__1820
169d4     C0 51 BF FD | 	call	#_pop
169d8     FF 1E 02 F6 | 	mov	local01, result3
169dc     A7 FA 61 FC | 	wrlong	result1, fp
169e0     04 4E 05 F1 | 	add	fp, #4
169e4     A7 FC 61 FC | 	wrlong	result2, fp
169e8     04 4E 05 F1 | 	add	fp, #4
169ec     A7 1E 62 FC | 	wrlong	local01, fp
169f0     08 4E 85 F1 | 	sub	fp, #8
169f4     A7 12 02 F6 | 	mov	arg01, fp
169f8     6C F2 BF FD | 	call	#_converttoint
169fc     10 4E 05 F1 | 	add	fp, #16
16a00     A7 FA 61 FC | 	wrlong	result1, fp
16a04     FD 12 02 F6 | 	mov	arg01, result1
16a08     10 4E 85 F1 | 	sub	fp, #16
16a0c     58 C1 B0 FD | 	call	#__system__Chr_S
16a10     A7 FA 61 FC | 	wrlong	result1, fp
16a14     08 4E 05 F1 | 	add	fp, #8
16a18     A7 3E 68 FC | 	wrlong	#31, fp
16a1c     08 4E 85 F1 | 	sub	fp, #8
16a20     A7 12 02 F6 | 	mov	arg01, fp
16a24     08 52 BF FD | 	call	#_push
16a28                 | LR__1821
16a28     A7 F0 03 F6 | 	mov	ptra, fp
16a2c     B2 00 A0 FD | 	call	#popregs_
16a30                 | _do_chr_ret
16a30     2D 00 64 FD | 	ret
16a34                 | 
16a34                 | ' 
16a34                 | ' sub do_val
16a34                 | _do_val
16a34     03 4A 05 F6 | 	mov	COUNT_, #3
16a38     A8 00 A0 FD | 	call	#pushregs_
16a3c     20 F0 07 F1 | 	add	ptra, #32
16a40     4A 00 00 FF 
16a44     80 E4 05 F1 | 	add	objptr, ##38016
16a48     F2 16 02 FB | 	rdlong	arg03, objptr
16a4c     0B 1F 02 F6 | 	mov	local01, arg03
16a50     01 1E 66 F0 | 	shl	local01, #1
16a54     0B 1F 02 F1 | 	add	local01, arg03
16a58     02 1E 66 F0 | 	shl	local01, #2
16a5c     03 00 00 FF 
16a60     04 E4 85 F1 | 	sub	objptr, ##1540
16a64     F2 1E 02 F1 | 	add	local01, objptr
16a68     0F 17 02 FB | 	rdlong	arg03, local01
16a6c     0C 4E 05 F1 | 	add	fp, #12
16a70     A7 16 62 FC | 	wrlong	arg03, fp
16a74                 | ' 
16a74                 | ' numpar=compiledline(lineptr_e).result.uresult
16a74                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
16a74     0C 4E 85 F1 | 	sub	fp, #12
16a78     02 16 16 F2 | 	cmp	arg03, #2 wc
16a7c     47 00 00 FF 
16a80     7C E4 85 F1 | 	sub	objptr, ##36476
16a84     0C 4E 05 C1 |  if_b	add	fp, #12
16a88     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16a8c     0C 4E 85 C1 |  if_b	sub	fp, #12
16a90     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1830
16a94     00 12 06 F6 | 	mov	arg01, #0
16a98     CC F8 B0 FD | 	call	#__system___getiolock_0540
16a9c     FD 12 02 F6 | 	mov	arg01, result1
16aa0     84 9E B0 FD | 	call	#__system___lockmem
16aa4     84 01 00 FF 
16aa8     34 15 06 F6 | 	mov	arg02, ##@LR__5436
16aac     00 12 06 F6 | 	mov	arg01, #0
16ab0     00 16 06 F6 | 	mov	arg03, #0
16ab4     64 AB B0 FD | 	call	#__system___basic_print_string
16ab8     00 12 06 F6 | 	mov	arg01, #0
16abc     A8 F8 B0 FD | 	call	#__system___getiolock_0540
16ac0     FD 00 68 FC | 	wrlong	#0, result1
16ac4     27 12 06 F6 | 	mov	arg01, #39
16ac8     F8 6A B0 FD | 	call	#_printerror
16acc     5C 02 90 FD | 	jmp	#LR__1843
16ad0                 | LR__1830
16ad0     C4 50 BF FD | 	call	#_pop
16ad4     FF 16 02 F6 | 	mov	arg03, result3
16ad8     A7 FA 61 FC | 	wrlong	result1, fp
16adc     04 4E 05 F1 | 	add	fp, #4
16ae0     A7 FC 61 FC | 	wrlong	result2, fp
16ae4     04 4E 05 F1 | 	add	fp, #4
16ae8     A7 16 62 FC | 	wrlong	arg03, fp
16aec                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16aec     08 4E 85 F1 | 	sub	fp, #8
16af0     2B 16 0E F2 | 	cmp	arg03, #43 wz
16af4     18 00 90 5D |  if_ne	jmp	#LR__1831
16af8     A7 12 02 FB | 	rdlong	arg01, fp
16afc     44 A9 BF FD | 	call	#_convertstring
16b00     A7 FA 61 FC | 	wrlong	result1, fp
16b04     08 4E 05 F1 | 	add	fp, #8
16b08     A7 3E 68 FC | 	wrlong	#31, fp
16b0c     08 4E 85 F1 | 	sub	fp, #8
16b10                 | LR__1831
16b10                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
16b10     08 4E 05 F1 | 	add	fp, #8
16b14     A7 16 02 FB | 	rdlong	arg03, fp
16b18     08 4E 85 F1 | 	sub	fp, #8
16b1c     1F 16 0E F2 | 	cmp	arg03, #31 wz
16b20     3C 00 90 AD |  if_e	jmp	#LR__1832
16b24     00 12 06 F6 | 	mov	arg01, #0
16b28     3C F8 B0 FD | 	call	#__system___getiolock_0540
16b2c     FD 12 02 F6 | 	mov	arg01, result1
16b30     F4 9D B0 FD | 	call	#__system___lockmem
16b34     84 01 00 FF 
16b38     3A 15 06 F6 | 	mov	arg02, ##@LR__5437
16b3c     00 12 06 F6 | 	mov	arg01, #0
16b40     00 16 06 F6 | 	mov	arg03, #0
16b44     D4 AA B0 FD | 	call	#__system___basic_print_string
16b48     00 12 06 F6 | 	mov	arg01, #0
16b4c     18 F8 B0 FD | 	call	#__system___getiolock_0540
16b50     FD 00 68 FC | 	wrlong	#0, result1
16b54     0F 12 06 F6 | 	mov	arg01, #15
16b58     68 6A B0 FD | 	call	#_printerror
16b5c     CC 01 90 FD | 	jmp	#LR__1843
16b60                 | LR__1832
16b60                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
16b60     A7 12 02 FB | 	rdlong	arg01, fp
16b64     01 14 06 F6 | 	mov	arg02, #1
16b68     38 BE B0 FD | 	call	#__system__Left_S
16b6c     FD 12 02 F6 | 	mov	arg01, result1
16b70     84 01 00 FF 
16b74     40 15 06 F6 | 	mov	arg02, ##@LR__5438
16b78     D4 9D B0 FD | 	call	#__system___string_cmp
16b7c     00 FA 0D F2 | 	cmp	result1, #0 wz
16b80     48 00 90 5D |  if_ne	jmp	#LR__1835
16b84     84 01 00 FF 
16b88     42 1F 06 F6 | 	mov	local01, ##@LR__5439
16b8c     A7 16 02 FB | 	rdlong	arg03, fp
16b90     0B 13 02 F6 | 	mov	arg01, arg03
16b94     09 21 02 F6 | 	mov	local02, arg01
16b98     97 06 48 FB | 	callpa	#(@LR__1834-@LR__1833)>>2,fcache_load_ptr_
16b9c                 | LR__1833
16b9c     10 FB C9 FA | 	rdbyte	result1, local02 wz
16ba0     01 20 06 51 |  if_ne	add	local02, #1
16ba4     F4 FF 9F 5D |  if_ne	jmp	#LR__1833
16ba8                 | LR__1834
16ba8     09 21 82 F1 | 	sub	local02, arg01
16bac     10 15 02 F6 | 	mov	arg02, local02
16bb0     01 14 86 F1 | 	sub	arg02, #1
16bb4     0B 13 02 F6 | 	mov	arg01, arg03
16bb8     70 BE B0 FD | 	call	#__system__Right_S
16bbc     FD 14 02 F6 | 	mov	arg02, result1
16bc0     0F 13 02 F6 | 	mov	arg01, local01
16bc4     BC 9D B0 FD | 	call	#__system___string_concat
16bc8     A7 FA 61 FC | 	wrlong	result1, fp
16bcc                 | LR__1835
16bcc                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
16bcc     A7 12 02 FB | 	rdlong	arg01, fp
16bd0     01 14 06 F6 | 	mov	arg02, #1
16bd4     CC BD B0 FD | 	call	#__system__Left_S
16bd8     FD 12 02 F6 | 	mov	arg01, result1
16bdc     84 01 00 FF 
16be0     45 15 06 F6 | 	mov	arg02, ##@LR__5440
16be4     68 9D B0 FD | 	call	#__system___string_cmp
16be8     00 FA 0D F2 | 	cmp	result1, #0 wz
16bec     48 00 90 5D |  if_ne	jmp	#LR__1838
16bf0     84 01 00 FF 
16bf4     47 1F 06 F6 | 	mov	local01, ##@LR__5441
16bf8     A7 16 02 FB | 	rdlong	arg03, fp
16bfc     0B 13 02 F6 | 	mov	arg01, arg03
16c00     09 21 02 F6 | 	mov	local02, arg01
16c04     97 06 48 FB | 	callpa	#(@LR__1837-@LR__1836)>>2,fcache_load_ptr_
16c08                 | LR__1836
16c08     10 FB C9 FA | 	rdbyte	result1, local02 wz
16c0c     01 20 06 51 |  if_ne	add	local02, #1
16c10     F4 FF 9F 5D |  if_ne	jmp	#LR__1836
16c14                 | LR__1837
16c14     09 21 82 F1 | 	sub	local02, arg01
16c18     10 15 02 F6 | 	mov	arg02, local02
16c1c     01 14 86 F1 | 	sub	arg02, #1
16c20     0B 13 02 F6 | 	mov	arg01, arg03
16c24     04 BE B0 FD | 	call	#__system__Right_S
16c28     FD 14 02 F6 | 	mov	arg02, result1
16c2c     0F 13 02 F6 | 	mov	arg01, local01
16c30     50 9D B0 FD | 	call	#__system___string_concat
16c34     A7 FA 61 FC | 	wrlong	result1, fp
16c38                 | LR__1838
16c38     A7 12 02 FB | 	rdlong	arg01, fp
16c3c     84 D0 B0 FD | 	call	#__system____builtin_atof
16c40     1C 4E 05 F1 | 	add	fp, #28
16c44     A7 FA 61 FC | 	wrlong	result1, fp
16c48     1C 4E 85 F1 | 	sub	fp, #28
16c4c     A7 12 02 FB | 	rdlong	arg01, fp
16c50     00 14 06 F6 | 	mov	arg02, #0
16c54     FC CE B0 FD | 	call	#__system____builtin_atoi
16c58     18 4E 05 F1 | 	add	fp, #24
16c5c     A7 FA 61 FC | 	wrlong	result1, fp
16c60                 | ' fval=val(t1.result.sresult)
16c60                 | ' ival=val%(t1.result.sresult)
16c60                 | ' if fval=ival then
16c60     04 4E 05 F1 | 	add	fp, #4
16c64     A7 1E 02 FB | 	rdlong	local01, fp
16c68     1C 4E 85 F1 | 	sub	fp, #28
16c6c     FD 12 52 F6 | 	abs	arg01, result1 wc
16c70     1F 22 C6 C9 |  if_b	decod	local03, #31
16c74     00 22 06 36 |  if_ae	mov	local03, #0
16c78     5C C4 B0 FD | 	call	#__system___float_fromuns
16c7c     11 FB 61 F5 | 	xor	result1, local03
16c80     FD 14 02 F6 | 	mov	arg02, result1
16c84     0F 13 02 F6 | 	mov	arg01, local01
16c88     01 16 06 F6 | 	mov	arg03, #1
16c8c     80 CC B0 FD | 	call	#__system___float_cmp
16c90     00 FA 0D F2 | 	cmp	result1, #0 wz
16c94     20 00 90 5D |  if_ne	jmp	#LR__1839
16c98     18 4E 05 F1 | 	add	fp, #24
16c9c     A7 1E 02 FB | 	rdlong	local01, fp
16ca0     18 4E 85 F1 | 	sub	fp, #24
16ca4     A7 1E 62 FC | 	wrlong	local01, fp
16ca8     08 4E 05 F1 | 	add	fp, #8
16cac     A7 38 68 FC | 	wrlong	#28, fp
16cb0     08 4E 85 F1 | 	sub	fp, #8
16cb4     6C 00 90 FD | 	jmp	#LR__1842
16cb8                 | LR__1839
16cb8                 | '   if fval=0 andalso ival<>0 then
16cb8     1C 4E 05 F1 | 	add	fp, #28
16cbc     A7 12 02 FB | 	rdlong	arg01, fp
16cc0     1C 4E 85 F1 | 	sub	fp, #28
16cc4     00 14 06 F6 | 	mov	arg02, #0
16cc8     01 16 06 F6 | 	mov	arg03, #1
16ccc     40 CC B0 FD | 	call	#__system___float_cmp
16cd0     00 FA 0D F2 | 	cmp	result1, #0 wz
16cd4     30 00 90 5D |  if_ne	jmp	#LR__1840
16cd8     18 4E 05 F1 | 	add	fp, #24
16cdc     A7 1E 0A FB | 	rdlong	local01, fp wz
16ce0     18 4E 85 F1 | 	sub	fp, #24
16ce4     20 00 90 AD |  if_e	jmp	#LR__1840
16ce8     18 4E 05 F1 | 	add	fp, #24
16cec     A7 1E 02 FB | 	rdlong	local01, fp
16cf0     18 4E 85 F1 | 	sub	fp, #24
16cf4     A7 1E 62 FC | 	wrlong	local01, fp
16cf8     08 4E 05 F1 | 	add	fp, #8
16cfc     A7 38 68 FC | 	wrlong	#28, fp
16d00     08 4E 85 F1 | 	sub	fp, #8
16d04     1C 00 90 FD | 	jmp	#LR__1841
16d08                 | LR__1840
16d08     1C 4E 05 F1 | 	add	fp, #28
16d0c     A7 1E 02 FB | 	rdlong	local01, fp
16d10     1C 4E 85 F1 | 	sub	fp, #28
16d14     A7 1E 62 FC | 	wrlong	local01, fp
16d18     08 4E 05 F1 | 	add	fp, #8
16d1c     A7 3C 68 FC | 	wrlong	#30, fp
16d20     08 4E 85 F1 | 	sub	fp, #8
16d24                 | LR__1841
16d24                 | LR__1842
16d24     A7 12 02 F6 | 	mov	arg01, fp
16d28     04 4F BF FD | 	call	#_push
16d2c                 | LR__1843
16d2c     A7 F0 03 F6 | 	mov	ptra, fp
16d30     B2 00 A0 FD | 	call	#popregs_
16d34                 | _do_val_ret
16d34     2D 00 64 FD | 	ret
16d38                 | 
16d38                 | ' 
16d38                 | ' 
16d38                 | ' sub do_hex
16d38                 | _do_hex
16d38     01 4A 05 F6 | 	mov	COUNT_, #1
16d3c     A8 00 A0 FD | 	call	#pushregs_
16d40     18 F0 07 F1 | 	add	ptra, #24
16d44     4A 00 00 FF 
16d48     80 E4 05 F1 | 	add	objptr, ##38016
16d4c     F2 1E 02 FB | 	rdlong	local01, objptr
16d50     0F 17 02 F6 | 	mov	arg03, local01
16d54     01 16 66 F0 | 	shl	arg03, #1
16d58     0F 17 02 F1 | 	add	arg03, local01
16d5c     02 16 66 F0 | 	shl	arg03, #2
16d60     03 00 00 FF 
16d64     04 E4 85 F1 | 	sub	objptr, ##1540
16d68     F2 16 02 F1 | 	add	arg03, objptr
16d6c     0B 17 02 FB | 	rdlong	arg03, arg03
16d70     0C 4E 05 F1 | 	add	fp, #12
16d74     A7 16 62 FC | 	wrlong	arg03, fp
16d78                 | ' 
16d78                 | ' numpar=compiledline(lineptr_e).result.uresult
16d78                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
16d78     0C 4E 85 F1 | 	sub	fp, #12
16d7c     03 16 16 F2 | 	cmp	arg03, #3 wc
16d80     47 00 00 FF 
16d84     7C E4 85 F1 | 	sub	objptr, ##36476
16d88     0C 4E 05 C1 |  if_b	add	fp, #12
16d8c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16d90     0C 4E 85 C1 |  if_b	sub	fp, #12
16d94     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1850
16d98     00 12 06 F6 | 	mov	arg01, #0
16d9c     C8 F5 B0 FD | 	call	#__system___getiolock_0540
16da0     FD 12 02 F6 | 	mov	arg01, result1
16da4     80 9B B0 FD | 	call	#__system___lockmem
16da8     84 01 00 FF 
16dac     4A 15 06 F6 | 	mov	arg02, ##@LR__5442
16db0     00 12 06 F6 | 	mov	arg01, #0
16db4     00 16 06 F6 | 	mov	arg03, #0
16db8     60 A8 B0 FD | 	call	#__system___basic_print_string
16dbc     00 12 06 F6 | 	mov	arg01, #0
16dc0     A4 F5 B0 FD | 	call	#__system___getiolock_0540
16dc4     FD 00 68 FC | 	wrlong	#0, result1
16dc8     27 12 06 F6 | 	mov	arg01, #39
16dcc     F4 67 B0 FD | 	call	#_printerror
16dd0     B8 00 90 FD | 	jmp	#LR__1853
16dd4                 | LR__1850
16dd4                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
16dd4     0C 4E 05 F1 | 	add	fp, #12
16dd8     A7 1E 02 FB | 	rdlong	local01, fp
16ddc     0C 4E 85 F1 | 	sub	fp, #12
16de0     02 1E 0E F2 | 	cmp	local01, #2 wz
16de4     38 00 90 5D |  if_ne	jmp	#LR__1851
16de8     AC 4D BF FD | 	call	#_pop
16dec     FF 1E 02 F6 | 	mov	local01, result3
16df0     A7 FA 61 FC | 	wrlong	result1, fp
16df4     04 4E 05 F1 | 	add	fp, #4
16df8     A7 FC 61 FC | 	wrlong	result2, fp
16dfc     04 4E 05 F1 | 	add	fp, #4
16e00     A7 1E 62 FC | 	wrlong	local01, fp
16e04     08 4E 85 F1 | 	sub	fp, #8
16e08     A7 12 02 F6 | 	mov	arg01, fp
16e0c     58 EE BF FD | 	call	#_converttoint
16e10     14 4E 05 F1 | 	add	fp, #20
16e14     A7 FA 61 FC | 	wrlong	result1, fp
16e18     14 4E 85 F1 | 	sub	fp, #20
16e1c     0C 00 90 FD | 	jmp	#LR__1852
16e20                 | LR__1851
16e20     14 4E 05 F1 | 	add	fp, #20
16e24     A7 10 68 FC | 	wrlong	#8, fp
16e28     14 4E 85 F1 | 	sub	fp, #20
16e2c                 | LR__1852
16e2c     68 4D BF FD | 	call	#_pop
16e30     FF 1E 02 F6 | 	mov	local01, result3
16e34     A7 FA 61 FC | 	wrlong	result1, fp
16e38     04 4E 05 F1 | 	add	fp, #4
16e3c     A7 FC 61 FC | 	wrlong	result2, fp
16e40     04 4E 05 F1 | 	add	fp, #4
16e44     A7 1E 62 FC | 	wrlong	local01, fp
16e48     08 4E 85 F1 | 	sub	fp, #8
16e4c     A7 12 02 F6 | 	mov	arg01, fp
16e50     14 EE BF FD | 	call	#_converttoint
16e54     10 4E 05 F1 | 	add	fp, #16
16e58     A7 FA 61 FC | 	wrlong	result1, fp
16e5c     FD 12 02 F6 | 	mov	arg01, result1
16e60     04 4E 05 F1 | 	add	fp, #4
16e64     A7 14 02 FB | 	rdlong	arg02, fp
16e68     14 4E 85 F1 | 	sub	fp, #20
16e6c     10 16 06 F6 | 	mov	arg03, #16
16e70     84 BD B0 FD | 	call	#__system__Number_S
16e74     A7 FA 61 FC | 	wrlong	result1, fp
16e78     08 4E 05 F1 | 	add	fp, #8
16e7c     A7 3E 68 FC | 	wrlong	#31, fp
16e80     08 4E 85 F1 | 	sub	fp, #8
16e84     A7 12 02 F6 | 	mov	arg01, fp
16e88     A4 4D BF FD | 	call	#_push
16e8c                 | LR__1853
16e8c     A7 F0 03 F6 | 	mov	ptra, fp
16e90     B2 00 A0 FD | 	call	#popregs_
16e94                 | _do_hex_ret
16e94     2D 00 64 FD | 	ret
16e98                 | 
16e98                 | ' 
16e98                 | ' sub do_bin
16e98                 | _do_bin
16e98     01 4A 05 F6 | 	mov	COUNT_, #1
16e9c     A8 00 A0 FD | 	call	#pushregs_
16ea0     18 F0 07 F1 | 	add	ptra, #24
16ea4     4A 00 00 FF 
16ea8     80 E4 05 F1 | 	add	objptr, ##38016
16eac     F2 1E 02 FB | 	rdlong	local01, objptr
16eb0     0F 17 02 F6 | 	mov	arg03, local01
16eb4     01 16 66 F0 | 	shl	arg03, #1
16eb8     0F 17 02 F1 | 	add	arg03, local01
16ebc     02 16 66 F0 | 	shl	arg03, #2
16ec0     03 00 00 FF 
16ec4     04 E4 85 F1 | 	sub	objptr, ##1540
16ec8     F2 16 02 F1 | 	add	arg03, objptr
16ecc     0B 17 02 FB | 	rdlong	arg03, arg03
16ed0     0C 4E 05 F1 | 	add	fp, #12
16ed4     A7 16 62 FC | 	wrlong	arg03, fp
16ed8                 | ' 
16ed8                 | ' numpar=compiledline(lineptr_e).result.uresult
16ed8                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
16ed8     0C 4E 85 F1 | 	sub	fp, #12
16edc     03 16 16 F2 | 	cmp	arg03, #3 wc
16ee0     47 00 00 FF 
16ee4     7C E4 85 F1 | 	sub	objptr, ##36476
16ee8     0C 4E 05 C1 |  if_b	add	fp, #12
16eec     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16ef0     0C 4E 85 C1 |  if_b	sub	fp, #12
16ef4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1860
16ef8     00 12 06 F6 | 	mov	arg01, #0
16efc     68 F4 B0 FD | 	call	#__system___getiolock_0540
16f00     FD 12 02 F6 | 	mov	arg01, result1
16f04     20 9A B0 FD | 	call	#__system___lockmem
16f08     84 01 00 FF 
16f0c     51 15 06 F6 | 	mov	arg02, ##@LR__5443
16f10     00 12 06 F6 | 	mov	arg01, #0
16f14     00 16 06 F6 | 	mov	arg03, #0
16f18     00 A7 B0 FD | 	call	#__system___basic_print_string
16f1c     00 12 06 F6 | 	mov	arg01, #0
16f20     44 F4 B0 FD | 	call	#__system___getiolock_0540
16f24     FD 00 68 FC | 	wrlong	#0, result1
16f28     27 12 06 F6 | 	mov	arg01, #39
16f2c     94 66 B0 FD | 	call	#_printerror
16f30     B8 00 90 FD | 	jmp	#LR__1863
16f34                 | LR__1860
16f34                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
16f34     0C 4E 05 F1 | 	add	fp, #12
16f38     A7 1E 02 FB | 	rdlong	local01, fp
16f3c     0C 4E 85 F1 | 	sub	fp, #12
16f40     02 1E 0E F2 | 	cmp	local01, #2 wz
16f44     38 00 90 5D |  if_ne	jmp	#LR__1861
16f48     4C 4C BF FD | 	call	#_pop
16f4c     FF 1E 02 F6 | 	mov	local01, result3
16f50     A7 FA 61 FC | 	wrlong	result1, fp
16f54     04 4E 05 F1 | 	add	fp, #4
16f58     A7 FC 61 FC | 	wrlong	result2, fp
16f5c     04 4E 05 F1 | 	add	fp, #4
16f60     A7 1E 62 FC | 	wrlong	local01, fp
16f64     08 4E 85 F1 | 	sub	fp, #8
16f68     A7 12 02 F6 | 	mov	arg01, fp
16f6c     F8 EC BF FD | 	call	#_converttoint
16f70     14 4E 05 F1 | 	add	fp, #20
16f74     A7 FA 61 FC | 	wrlong	result1, fp
16f78     14 4E 85 F1 | 	sub	fp, #20
16f7c     0C 00 90 FD | 	jmp	#LR__1862
16f80                 | LR__1861
16f80     14 4E 05 F1 | 	add	fp, #20
16f84     A7 00 68 FC | 	wrlong	#0, fp
16f88     14 4E 85 F1 | 	sub	fp, #20
16f8c                 | LR__1862
16f8c     08 4C BF FD | 	call	#_pop
16f90     FF 1E 02 F6 | 	mov	local01, result3
16f94     A7 FA 61 FC | 	wrlong	result1, fp
16f98     04 4E 05 F1 | 	add	fp, #4
16f9c     A7 FC 61 FC | 	wrlong	result2, fp
16fa0     04 4E 05 F1 | 	add	fp, #4
16fa4     A7 1E 62 FC | 	wrlong	local01, fp
16fa8     08 4E 85 F1 | 	sub	fp, #8
16fac     A7 12 02 F6 | 	mov	arg01, fp
16fb0     B4 EC BF FD | 	call	#_converttoint
16fb4     10 4E 05 F1 | 	add	fp, #16
16fb8     A7 FA 61 FC | 	wrlong	result1, fp
16fbc     FD 12 02 F6 | 	mov	arg01, result1
16fc0     04 4E 05 F1 | 	add	fp, #4
16fc4     A7 14 02 FB | 	rdlong	arg02, fp
16fc8     14 4E 85 F1 | 	sub	fp, #20
16fcc     02 16 06 F6 | 	mov	arg03, #2
16fd0     24 BC B0 FD | 	call	#__system__Number_S
16fd4     A7 FA 61 FC | 	wrlong	result1, fp
16fd8     08 4E 05 F1 | 	add	fp, #8
16fdc     A7 3E 68 FC | 	wrlong	#31, fp
16fe0     08 4E 85 F1 | 	sub	fp, #8
16fe4     A7 12 02 F6 | 	mov	arg01, fp
16fe8     44 4C BF FD | 	call	#_push
16fec                 | LR__1863
16fec     A7 F0 03 F6 | 	mov	ptra, fp
16ff0     B2 00 A0 FD | 	call	#popregs_
16ff4                 | _do_bin_ret
16ff4     2D 00 64 FD | 	ret
16ff8                 | 
16ff8                 | ' 
16ff8                 | ' sub do_cos
16ff8                 | _do_cos
16ff8     01 4A 05 F6 | 	mov	COUNT_, #1
16ffc     A8 00 A0 FD | 	call	#pushregs_
17000     10 F0 07 F1 | 	add	ptra, #16
17004     4A 00 00 FF 
17008     80 E4 05 F1 | 	add	objptr, ##38016
1700c     F2 1E 02 FB | 	rdlong	local01, objptr
17010     0F 17 02 F6 | 	mov	arg03, local01
17014     01 16 66 F0 | 	shl	arg03, #1
17018     0F 17 02 F1 | 	add	arg03, local01
1701c     02 16 66 F0 | 	shl	arg03, #2
17020     03 00 00 FF 
17024     04 E4 85 F1 | 	sub	objptr, ##1540
17028     F2 16 02 F1 | 	add	arg03, objptr
1702c     0B 17 02 FB | 	rdlong	arg03, arg03
17030     0C 4E 05 F1 | 	add	fp, #12
17034     A7 16 62 FC | 	wrlong	arg03, fp
17038                 | ' 
17038                 | ' numpar=compiledline(lineptr_e).result.uresult
17038                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
17038     0C 4E 85 F1 | 	sub	fp, #12
1703c     02 16 16 F2 | 	cmp	arg03, #2 wc
17040     47 00 00 FF 
17044     7C E4 85 F1 | 	sub	objptr, ##36476
17048     0C 4E 05 C1 |  if_b	add	fp, #12
1704c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
17050     0C 4E 85 C1 |  if_b	sub	fp, #12
17054     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1870
17058     00 12 06 F6 | 	mov	arg01, #0
1705c     08 F3 B0 FD | 	call	#__system___getiolock_0540
17060     FD 12 02 F6 | 	mov	arg01, result1
17064     C0 98 B0 FD | 	call	#__system___lockmem
17068     84 01 00 FF 
1706c     58 15 06 F6 | 	mov	arg02, ##@LR__5444
17070     00 12 06 F6 | 	mov	arg01, #0
17074     00 16 06 F6 | 	mov	arg03, #0
17078     A0 A5 B0 FD | 	call	#__system___basic_print_string
1707c     00 12 06 F6 | 	mov	arg01, #0
17080     E4 F2 B0 FD | 	call	#__system___getiolock_0540
17084     FD 00 68 FC | 	wrlong	#0, result1
17088     27 12 06 F6 | 	mov	arg01, #39
1708c     34 65 B0 FD | 	call	#_printerror
17090     78 00 90 FD | 	jmp	#LR__1871
17094                 | LR__1870
17094     00 4B BF FD | 	call	#_pop
17098     A7 FA 61 FC | 	wrlong	result1, fp
1709c     04 4E 05 F1 | 	add	fp, #4
170a0     A7 FC 61 FC | 	wrlong	result2, fp
170a4     04 4E 05 F1 | 	add	fp, #4
170a8     A7 FE 61 FC | 	wrlong	result3, fp
170ac     08 4E 85 F1 | 	sub	fp, #8
170b0     59 00 00 FF 
170b4     C0 E5 05 F1 | 	add	objptr, ##46016
170b8     F2 1E 02 FB | 	rdlong	local01, objptr
170bc     59 00 00 FF 
170c0     C0 E5 85 F1 | 	sub	objptr, ##46016
170c4     A7 12 02 F6 | 	mov	arg01, fp
170c8     58 EC BF FD | 	call	#_converttofloat
170cc     FD 14 02 F6 | 	mov	arg02, result1
170d0     0F 13 02 F6 | 	mov	arg01, local01
170d4     04 C4 B0 FD | 	call	#__system___float_mul
170d8     FD 14 02 F6 | 	mov	arg02, result1
170dc     87 E4 1F FF 
170e0     DB 13 06 F6 | 	mov	arg01, ##1070141403
170e4     1F 14 E6 F4 | 	bitnot	arg02, #31
170e8     20 C0 B0 FD | 	call	#__system___float_add
170ec     FD 12 02 F6 | 	mov	arg01, result1
170f0     24 CD B0 FD | 	call	#__system____builtin_sinf
170f4     A7 FA 61 FC | 	wrlong	result1, fp
170f8     08 4E 05 F1 | 	add	fp, #8
170fc     A7 3C 68 FC | 	wrlong	#30, fp
17100     08 4E 85 F1 | 	sub	fp, #8
17104     A7 12 02 F6 | 	mov	arg01, fp
17108     24 4B BF FD | 	call	#_push
1710c                 | LR__1871
1710c     A7 F0 03 F6 | 	mov	ptra, fp
17110     B2 00 A0 FD | 	call	#popregs_
17114                 | _do_cos_ret
17114     2D 00 64 FD | 	ret
17118                 | 
17118                 | ' 
17118                 | ' sub do_tan
17118                 | _do_tan
17118     01 4A 05 F6 | 	mov	COUNT_, #1
1711c     A8 00 A0 FD | 	call	#pushregs_
17120     10 F0 07 F1 | 	add	ptra, #16
17124     4A 00 00 FF 
17128     80 E4 05 F1 | 	add	objptr, ##38016
1712c     F2 1E 02 FB | 	rdlong	local01, objptr
17130     0F 17 02 F6 | 	mov	arg03, local01
17134     01 16 66 F0 | 	shl	arg03, #1
17138     0F 17 02 F1 | 	add	arg03, local01
1713c     02 16 66 F0 | 	shl	arg03, #2
17140     03 00 00 FF 
17144     04 E4 85 F1 | 	sub	objptr, ##1540
17148     F2 16 02 F1 | 	add	arg03, objptr
1714c     0B 17 02 FB | 	rdlong	arg03, arg03
17150     0C 4E 05 F1 | 	add	fp, #12
17154     A7 16 62 FC | 	wrlong	arg03, fp
17158                 | ' 
17158                 | ' numpar=compiledline(lineptr_e).result.uresult
17158                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
17158     0C 4E 85 F1 | 	sub	fp, #12
1715c     02 16 16 F2 | 	cmp	arg03, #2 wc
17160     47 00 00 FF 
17164     7C E4 85 F1 | 	sub	objptr, ##36476
17168     0C 4E 05 C1 |  if_b	add	fp, #12
1716c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
17170     0C 4E 85 C1 |  if_b	sub	fp, #12
17174     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1880
17178     00 12 06 F6 | 	mov	arg01, #0
1717c     E8 F1 B0 FD | 	call	#__system___getiolock_0540
17180     FD 12 02 F6 | 	mov	arg01, result1
17184     A0 97 B0 FD | 	call	#__system___lockmem
17188     84 01 00 FF 
1718c     5E 15 06 F6 | 	mov	arg02, ##@LR__5445
17190     00 12 06 F6 | 	mov	arg01, #0
17194     00 16 06 F6 | 	mov	arg03, #0
17198     80 A4 B0 FD | 	call	#__system___basic_print_string
1719c     00 12 06 F6 | 	mov	arg01, #0
171a0     C4 F1 B0 FD | 	call	#__system___getiolock_0540
171a4     FD 00 68 FC | 	wrlong	#0, result1
171a8     27 12 06 F6 | 	mov	arg01, #39
171ac     14 64 B0 FD | 	call	#_printerror
171b0     64 00 90 FD | 	jmp	#LR__1881
171b4                 | LR__1880
171b4     E0 49 BF FD | 	call	#_pop
171b8     A7 FA 61 FC | 	wrlong	result1, fp
171bc     04 4E 05 F1 | 	add	fp, #4
171c0     A7 FC 61 FC | 	wrlong	result2, fp
171c4     04 4E 05 F1 | 	add	fp, #4
171c8     A7 FE 61 FC | 	wrlong	result3, fp
171cc     08 4E 85 F1 | 	sub	fp, #8
171d0     59 00 00 FF 
171d4     C0 E5 05 F1 | 	add	objptr, ##46016
171d8     F2 1E 02 FB | 	rdlong	local01, objptr
171dc     59 00 00 FF 
171e0     C0 E5 85 F1 | 	sub	objptr, ##46016
171e4     A7 12 02 F6 | 	mov	arg01, fp
171e8     38 EB BF FD | 	call	#_converttofloat
171ec     FD 14 02 F6 | 	mov	arg02, result1
171f0     0F 13 02 F6 | 	mov	arg01, local01
171f4     E4 C2 B0 FD | 	call	#__system___float_mul
171f8     FD 12 02 F6 | 	mov	arg01, result1
171fc     64 CD B0 FD | 	call	#__system____builtin_tanf
17200     A7 FA 61 FC | 	wrlong	result1, fp
17204     08 4E 05 F1 | 	add	fp, #8
17208     A7 3C 68 FC | 	wrlong	#30, fp
1720c     08 4E 85 F1 | 	sub	fp, #8
17210     A7 12 02 F6 | 	mov	arg01, fp
17214     18 4A BF FD | 	call	#_push
17218                 | LR__1881
17218     A7 F0 03 F6 | 	mov	ptra, fp
1721c     B2 00 A0 FD | 	call	#popregs_
17220                 | _do_tan_ret
17220     2D 00 64 FD | 	ret
17224                 | 
17224                 | ' 
17224                 | ' sub do_asin
17224                 | _do_asin
17224     01 4A 05 F6 | 	mov	COUNT_, #1
17228     A8 00 A0 FD | 	call	#pushregs_
1722c     10 F0 07 F1 | 	add	ptra, #16
17230     4A 00 00 FF 
17234     80 E4 05 F1 | 	add	objptr, ##38016
17238     F2 1E 02 FB | 	rdlong	local01, objptr
1723c     0F 17 02 F6 | 	mov	arg03, local01
17240     01 16 66 F0 | 	shl	arg03, #1
17244     0F 17 02 F1 | 	add	arg03, local01
17248     02 16 66 F0 | 	shl	arg03, #2
1724c     03 00 00 FF 
17250     04 E4 85 F1 | 	sub	objptr, ##1540
17254     F2 16 02 F1 | 	add	arg03, objptr
17258     0B 17 02 FB | 	rdlong	arg03, arg03
1725c     0C 4E 05 F1 | 	add	fp, #12
17260     A7 16 62 FC | 	wrlong	arg03, fp
17264                 | ' 
17264                 | ' numpar=compiledline(lineptr_e).result.uresult
17264                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
17264     0C 4E 85 F1 | 	sub	fp, #12
17268     02 16 16 F2 | 	cmp	arg03, #2 wc
1726c     47 00 00 FF 
17270     7C E4 85 F1 | 	sub	objptr, ##36476
17274     0C 4E 05 C1 |  if_b	add	fp, #12
17278     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1727c     0C 4E 85 C1 |  if_b	sub	fp, #12
17280     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1890
17284     00 12 06 F6 | 	mov	arg01, #0
17288     DC F0 B0 FD | 	call	#__system___getiolock_0540
1728c     FD 12 02 F6 | 	mov	arg01, result1
17290     94 96 B0 FD | 	call	#__system___lockmem
17294     84 01 00 FF 
17298     64 15 06 F6 | 	mov	arg02, ##@LR__5446
1729c     00 12 06 F6 | 	mov	arg01, #0
172a0     00 16 06 F6 | 	mov	arg03, #0
172a4     74 A3 B0 FD | 	call	#__system___basic_print_string
172a8     00 12 06 F6 | 	mov	arg01, #0
172ac     B8 F0 B0 FD | 	call	#__system___getiolock_0540
172b0     FD 00 68 FC | 	wrlong	#0, result1
172b4     27 12 06 F6 | 	mov	arg01, #39
172b8     08 63 B0 FD | 	call	#_printerror
172bc     64 00 90 FD | 	jmp	#LR__1891
172c0                 | LR__1890
172c0     D4 48 BF FD | 	call	#_pop
172c4     FF 1E 02 F6 | 	mov	local01, result3
172c8     A7 FA 61 FC | 	wrlong	result1, fp
172cc     04 4E 05 F1 | 	add	fp, #4
172d0     A7 FC 61 FC | 	wrlong	result2, fp
172d4     04 4E 05 F1 | 	add	fp, #4
172d8     A7 1E 62 FC | 	wrlong	local01, fp
172dc     08 4E 85 F1 | 	sub	fp, #8
172e0     A7 12 02 F6 | 	mov	arg01, fp
172e4     3C EA BF FD | 	call	#_converttofloat
172e8     FD 12 02 F6 | 	mov	arg01, result1
172ec     BC CC B0 FD | 	call	#__system____builtin_asinf
172f0     FD 12 02 F6 | 	mov	arg01, result1
172f4     59 00 00 FF 
172f8     C4 E5 05 F1 | 	add	objptr, ##46020
172fc     F2 14 02 FB | 	rdlong	arg02, objptr
17300     59 00 00 FF 
17304     C4 E5 85 F1 | 	sub	objptr, ##46020
17308     D0 C1 B0 FD | 	call	#__system___float_mul
1730c     A7 FA 61 FC | 	wrlong	result1, fp
17310     08 4E 05 F1 | 	add	fp, #8
17314     A7 3C 68 FC | 	wrlong	#30, fp
17318     08 4E 85 F1 | 	sub	fp, #8
1731c     A7 12 02 F6 | 	mov	arg01, fp
17320     0C 49 BF FD | 	call	#_push
17324                 | LR__1891
17324     A7 F0 03 F6 | 	mov	ptra, fp
17328     B2 00 A0 FD | 	call	#popregs_
1732c                 | _do_asin_ret
1732c     2D 00 64 FD | 	ret
17330                 | 
17330                 | ' 
17330                 | ' sub do_acos
17330                 | _do_acos
17330     01 4A 05 F6 | 	mov	COUNT_, #1
17334     A8 00 A0 FD | 	call	#pushregs_
17338     10 F0 07 F1 | 	add	ptra, #16
1733c     4A 00 00 FF 
17340     80 E4 05 F1 | 	add	objptr, ##38016
17344     F2 1E 02 FB | 	rdlong	local01, objptr
17348     0F 17 02 F6 | 	mov	arg03, local01
1734c     01 16 66 F0 | 	shl	arg03, #1
17350     0F 17 02 F1 | 	add	arg03, local01
17354     02 16 66 F0 | 	shl	arg03, #2
17358     03 00 00 FF 
1735c     04 E4 85 F1 | 	sub	objptr, ##1540
17360     F2 16 02 F1 | 	add	arg03, objptr
17364     0B 17 02 FB | 	rdlong	arg03, arg03
17368     0C 4E 05 F1 | 	add	fp, #12
1736c     A7 16 62 FC | 	wrlong	arg03, fp
17370                 | ' 
17370                 | ' numpar=compiledline(lineptr_e).result.uresult
17370                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
17370     0C 4E 85 F1 | 	sub	fp, #12
17374     02 16 16 F2 | 	cmp	arg03, #2 wc
17378     47 00 00 FF 
1737c     7C E4 85 F1 | 	sub	objptr, ##36476
17380     0C 4E 05 C1 |  if_b	add	fp, #12
17384     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
17388     0C 4E 85 C1 |  if_b	sub	fp, #12
1738c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1900
17390     00 12 06 F6 | 	mov	arg01, #0
17394     D0 EF B0 FD | 	call	#__system___getiolock_0540
17398     FD 12 02 F6 | 	mov	arg01, result1
1739c     88 95 B0 FD | 	call	#__system___lockmem
173a0     84 01 00 FF 
173a4     6B 15 06 F6 | 	mov	arg02, ##@LR__5447
173a8     00 12 06 F6 | 	mov	arg01, #0
173ac     00 16 06 F6 | 	mov	arg03, #0
173b0     68 A2 B0 FD | 	call	#__system___basic_print_string
173b4     00 12 06 F6 | 	mov	arg01, #0
173b8     AC EF B0 FD | 	call	#__system___getiolock_0540
173bc     FD 00 68 FC | 	wrlong	#0, result1
173c0     27 12 06 F6 | 	mov	arg01, #39
173c4     FC 61 B0 FD | 	call	#_printerror
173c8     64 00 90 FD | 	jmp	#LR__1901
173cc                 | LR__1900
173cc     C8 47 BF FD | 	call	#_pop
173d0     FF 1E 02 F6 | 	mov	local01, result3
173d4     A7 FA 61 FC | 	wrlong	result1, fp
173d8     04 4E 05 F1 | 	add	fp, #4
173dc     A7 FC 61 FC | 	wrlong	result2, fp
173e0     04 4E 05 F1 | 	add	fp, #4
173e4     A7 1E 62 FC | 	wrlong	local01, fp
173e8     08 4E 85 F1 | 	sub	fp, #8
173ec     A7 12 02 F6 | 	mov	arg01, fp
173f0     30 E9 BF FD | 	call	#_converttofloat
173f4     FD 12 02 F6 | 	mov	arg01, result1
173f8     FC CB B0 FD | 	call	#__system____builtin_acosf
173fc     FD 12 02 F6 | 	mov	arg01, result1
17400     59 00 00 FF 
17404     C4 E5 05 F1 | 	add	objptr, ##46020
17408     F2 14 02 FB | 	rdlong	arg02, objptr
1740c     59 00 00 FF 
17410     C4 E5 85 F1 | 	sub	objptr, ##46020
17414     C4 C0 B0 FD | 	call	#__system___float_mul
17418     A7 FA 61 FC | 	wrlong	result1, fp
1741c     08 4E 05 F1 | 	add	fp, #8
17420     A7 3C 68 FC | 	wrlong	#30, fp
17424     08 4E 85 F1 | 	sub	fp, #8
17428     A7 12 02 F6 | 	mov	arg01, fp
1742c     00 48 BF FD | 	call	#_push
17430                 | LR__1901
17430     A7 F0 03 F6 | 	mov	ptra, fp
17434     B2 00 A0 FD | 	call	#popregs_
17438                 | _do_acos_ret
17438     2D 00 64 FD | 	ret
1743c                 | 
1743c                 | ' 
1743c                 | ' sub do_atn
1743c                 | _do_atn
1743c     01 4A 05 F6 | 	mov	COUNT_, #1
17440     A8 00 A0 FD | 	call	#pushregs_
17444     10 F0 07 F1 | 	add	ptra, #16
17448     4A 00 00 FF 
1744c     80 E4 05 F1 | 	add	objptr, ##38016
17450     F2 1E 02 FB | 	rdlong	local01, objptr
17454     0F 17 02 F6 | 	mov	arg03, local01
17458     01 16 66 F0 | 	shl	arg03, #1
1745c     0F 17 02 F1 | 	add	arg03, local01
17460     02 16 66 F0 | 	shl	arg03, #2
17464     03 00 00 FF 
17468     04 E4 85 F1 | 	sub	objptr, ##1540
1746c     F2 16 02 F1 | 	add	arg03, objptr
17470     0B 17 02 FB | 	rdlong	arg03, arg03
17474     0C 4E 05 F1 | 	add	fp, #12
17478     A7 16 62 FC | 	wrlong	arg03, fp
1747c                 | ' 
1747c                 | ' numpar=compiledline(lineptr_e).result.uresult
1747c                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
1747c     0C 4E 85 F1 | 	sub	fp, #12
17480     02 16 16 F2 | 	cmp	arg03, #2 wc
17484     47 00 00 FF 
17488     7C E4 85 F1 | 	sub	objptr, ##36476
1748c     0C 4E 05 C1 |  if_b	add	fp, #12
17490     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
17494     0C 4E 85 C1 |  if_b	sub	fp, #12
17498     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1910
1749c     00 12 06 F6 | 	mov	arg01, #0
174a0     C4 EE B0 FD | 	call	#__system___getiolock_0540
174a4     FD 12 02 F6 | 	mov	arg01, result1
174a8     7C 94 B0 FD | 	call	#__system___lockmem
174ac     84 01 00 FF 
174b0     72 15 06 F6 | 	mov	arg02, ##@LR__5448
174b4     00 12 06 F6 | 	mov	arg01, #0
174b8     00 16 06 F6 | 	mov	arg03, #0
174bc     5C A1 B0 FD | 	call	#__system___basic_print_string
174c0     00 12 06 F6 | 	mov	arg01, #0
174c4     A0 EE B0 FD | 	call	#__system___getiolock_0540
174c8     FD 00 68 FC | 	wrlong	#0, result1
174cc     27 12 06 F6 | 	mov	arg01, #39
174d0     F0 60 B0 FD | 	call	#_printerror
174d4     6C 00 90 FD | 	jmp	#LR__1911
174d8                 | LR__1910
174d8     BC 46 BF FD | 	call	#_pop
174dc     FF 1E 02 F6 | 	mov	local01, result3
174e0     A7 FA 61 FC | 	wrlong	result1, fp
174e4     04 4E 05 F1 | 	add	fp, #4
174e8     A7 FC 61 FC | 	wrlong	result2, fp
174ec     04 4E 05 F1 | 	add	fp, #4
174f0     A7 1E 62 FC | 	wrlong	local01, fp
174f4     08 4E 85 F1 | 	sub	fp, #8
174f8     A7 12 02 F6 | 	mov	arg01, fp
174fc     24 E8 BF FD | 	call	#_converttofloat
17500     FD 12 02 F6 | 	mov	arg01, result1
17504     00 C0 1F FF 
17508     00 14 06 F6 | 	mov	arg02, ##1065353216
1750c     34 CB B0 FD | 	call	#__system____builtin_atan2f
17510     FD 12 02 F6 | 	mov	arg01, result1
17514     59 00 00 FF 
17518     C4 E5 05 F1 | 	add	objptr, ##46020
1751c     F2 14 02 FB | 	rdlong	arg02, objptr
17520     59 00 00 FF 
17524     C4 E5 85 F1 | 	sub	objptr, ##46020
17528     B0 BF B0 FD | 	call	#__system___float_mul
1752c     A7 FA 61 FC | 	wrlong	result1, fp
17530     08 4E 05 F1 | 	add	fp, #8
17534     A7 3C 68 FC | 	wrlong	#30, fp
17538     08 4E 85 F1 | 	sub	fp, #8
1753c     A7 12 02 F6 | 	mov	arg01, fp
17540     EC 46 BF FD | 	call	#_push
17544                 | LR__1911
17544     A7 F0 03 F6 | 	mov	ptra, fp
17548     B2 00 A0 FD | 	call	#popregs_
1754c                 | _do_atn_ret
1754c     2D 00 64 FD | 	ret
17550                 | 
17550                 | ' 
17550                 | ' sub do_sqr
17550                 | _do_sqr
17550     01 4A 05 F6 | 	mov	COUNT_, #1
17554     A8 00 A0 FD | 	call	#pushregs_
17558     10 F0 07 F1 | 	add	ptra, #16
1755c     4A 00 00 FF 
17560     80 E4 05 F1 | 	add	objptr, ##38016
17564     F2 1E 02 FB | 	rdlong	local01, objptr
17568     0F 17 02 F6 | 	mov	arg03, local01
1756c     01 16 66 F0 | 	shl	arg03, #1
17570     0F 17 02 F1 | 	add	arg03, local01
17574     02 16 66 F0 | 	shl	arg03, #2
17578     03 00 00 FF 
1757c     04 E4 85 F1 | 	sub	objptr, ##1540
17580     F2 16 02 F1 | 	add	arg03, objptr
17584     0B 17 02 FB | 	rdlong	arg03, arg03
17588     0C 4E 05 F1 | 	add	fp, #12
1758c     A7 16 62 FC | 	wrlong	arg03, fp
17590                 | ' 
17590                 | ' numpar=compiledline(lineptr_e).result.uresult
17590                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
17590     0C 4E 85 F1 | 	sub	fp, #12
17594     02 16 16 F2 | 	cmp	arg03, #2 wc
17598     47 00 00 FF 
1759c     7C E4 85 F1 | 	sub	objptr, ##36476
175a0     0C 4E 05 C1 |  if_b	add	fp, #12
175a4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
175a8     0C 4E 85 C1 |  if_b	sub	fp, #12
175ac     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1920
175b0     00 12 06 F6 | 	mov	arg01, #0
175b4     B0 ED B0 FD | 	call	#__system___getiolock_0540
175b8     FD 12 02 F6 | 	mov	arg01, result1
175bc     68 93 B0 FD | 	call	#__system___lockmem
175c0     84 01 00 FF 
175c4     78 15 06 F6 | 	mov	arg02, ##@LR__5449
175c8     00 12 06 F6 | 	mov	arg01, #0
175cc     00 16 06 F6 | 	mov	arg03, #0
175d0     48 A0 B0 FD | 	call	#__system___basic_print_string
175d4     00 12 06 F6 | 	mov	arg01, #0
175d8     8C ED B0 FD | 	call	#__system___getiolock_0540
175dc     FD 00 68 FC | 	wrlong	#0, result1
175e0     27 12 06 F6 | 	mov	arg01, #39
175e4     DC 5F B0 FD | 	call	#_printerror
175e8     48 00 90 FD | 	jmp	#LR__1921
175ec                 | LR__1920
175ec     A8 45 BF FD | 	call	#_pop
175f0     FF 1E 02 F6 | 	mov	local01, result3
175f4     A7 FA 61 FC | 	wrlong	result1, fp
175f8     04 4E 05 F1 | 	add	fp, #4
175fc     A7 FC 61 FC | 	wrlong	result2, fp
17600     04 4E 05 F1 | 	add	fp, #4
17604     A7 1E 62 FC | 	wrlong	local01, fp
17608     08 4E 85 F1 | 	sub	fp, #8
1760c     A7 12 02 F6 | 	mov	arg01, fp
17610     10 E7 BF FD | 	call	#_converttofloat
17614     FD 12 02 F6 | 	mov	arg01, result1
17618     E8 BD B0 FD | 	call	#__system___float_sqrt
1761c     A7 FA 61 FC | 	wrlong	result1, fp
17620     08 4E 05 F1 | 	add	fp, #8
17624     A7 3C 68 FC | 	wrlong	#30, fp
17628     08 4E 85 F1 | 	sub	fp, #8
1762c     A7 12 02 F6 | 	mov	arg01, fp
17630     FC 45 BF FD | 	call	#_push
17634                 | LR__1921
17634     A7 F0 03 F6 | 	mov	ptra, fp
17638     B2 00 A0 FD | 	call	#popregs_
1763c                 | _do_sqr_ret
1763c     2D 00 64 FD | 	ret
17640                 | 
17640                 | ' 
17640                 | ' sub do_stick
17640                 | _do_stick
17640     01 4A 05 F6 | 	mov	COUNT_, #1
17644     A8 00 A0 FD | 	call	#pushregs_
17648     10 F0 07 F1 | 	add	ptra, #16
1764c     4A 00 00 FF 
17650     80 E4 05 F1 | 	add	objptr, ##38016
17654     F2 1E 02 FB | 	rdlong	local01, objptr
17658     0F 17 02 F6 | 	mov	arg03, local01
1765c     01 16 66 F0 | 	shl	arg03, #1
17660     0F 17 02 F1 | 	add	arg03, local01
17664     02 16 66 F0 | 	shl	arg03, #2
17668     03 00 00 FF 
1766c     04 E4 85 F1 | 	sub	objptr, ##1540
17670     F2 16 02 F1 | 	add	arg03, objptr
17674     0B 17 02 FB | 	rdlong	arg03, arg03
17678     0C 4E 05 F1 | 	add	fp, #12
1767c     A7 16 62 FC | 	wrlong	arg03, fp
17680                 | ' 
17680                 | ' numpar=compiledline(lineptr_e).result.uresult
17680                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
17680     0C 4E 85 F1 | 	sub	fp, #12
17684     02 16 16 F2 | 	cmp	arg03, #2 wc
17688     47 00 00 FF 
1768c     7C E4 85 F1 | 	sub	objptr, ##36476
17690     3C 00 90 CD |  if_b	jmp	#LR__1930
17694     00 12 06 F6 | 	mov	arg01, #0
17698     CC EC B0 FD | 	call	#__system___getiolock_0540
1769c     FD 12 02 F6 | 	mov	arg01, result1
176a0     84 92 B0 FD | 	call	#__system___lockmem
176a4     84 01 00 FF 
176a8     7E 15 06 F6 | 	mov	arg02, ##@LR__5450
176ac     00 12 06 F6 | 	mov	arg01, #0
176b0     00 16 06 F6 | 	mov	arg03, #0
176b4     64 9F B0 FD | 	call	#__system___basic_print_string
176b8     00 12 06 F6 | 	mov	arg01, #0
176bc     A8 EC B0 FD | 	call	#__system___getiolock_0540
176c0     FD 00 68 FC | 	wrlong	#0, result1
176c4     27 12 06 F6 | 	mov	arg01, #39
176c8     F8 5E B0 FD | 	call	#_printerror
176cc     E8 00 90 FD | 	jmp	#LR__1934
176d0                 | LR__1930
176d0                 | ' 
176d0                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
176d0     0C 4E 05 F1 | 	add	fp, #12
176d4     A7 FE 09 FB | 	rdlong	result3, fp wz
176d8     0C 4E 85 F1 | 	sub	fp, #12
176dc     30 00 90 5D |  if_ne	jmp	#LR__1931
176e0     59 00 00 FF 
176e4     34 E5 05 F1 | 	add	objptr, ##45876
176e8     F2 1E 02 FB | 	rdlong	local01, objptr
176ec     59 00 00 FF 
176f0     34 E5 85 F1 | 	sub	objptr, ##45876
176f4     A7 1E 62 FC | 	wrlong	local01, fp
176f8     08 4E 05 F1 | 	add	fp, #8
176fc     A7 3A 68 FC | 	wrlong	#29, fp
17700     08 4E 85 F1 | 	sub	fp, #8
17704     A7 12 02 F6 | 	mov	arg01, fp
17708     24 45 BF FD | 	call	#_push
1770c     A8 00 90 FD | 	jmp	#LR__1934
17710                 | LR__1931
17710     84 44 BF FD | 	call	#_pop
17714     A7 FA 61 FC | 	wrlong	result1, fp
17718     04 4E 05 F1 | 	add	fp, #4
1771c     A7 FC 61 FC | 	wrlong	result2, fp
17720     04 4E 05 F1 | 	add	fp, #4
17724     A7 FE 61 FC | 	wrlong	result3, fp
17728                 | ' 
17728                 | ' t1=pop()
17728                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17728     08 4E 85 F1 | 	sub	fp, #8
1772c     1C FE 0D F2 | 	cmp	result3, #28 wz
17730     08 4E 05 51 |  if_ne	add	fp, #8
17734     A7 1E 02 5B |  if_ne	rdlong	local01, fp
17738     08 4E 85 51 |  if_ne	sub	fp, #8
1773c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
17740     6C 00 90 5D |  if_ne	jmp	#LR__1933
17744     A7 1E 02 FB | 	rdlong	local01, fp
17748     5A 00 00 FF 
1774c     18 E4 05 F1 | 	add	objptr, ##46104
17750     F2 1E 62 FC | 	wrlong	local01, objptr
17754                 | '   q=t1.result.uresult
17754                 | '   if q<7 then 
17754     5A 00 00 FF 
17758     18 E4 85 F1 | 	sub	objptr, ##46104
1775c     07 1E 56 F2 | 	cmps	local01, #7 wc
17760     40 00 90 3D |  if_ae	jmp	#LR__1932
17764     5A 00 00 FF 
17768     18 E4 05 F1 | 	add	objptr, ##46104
1776c     F2 1E 02 FB | 	rdlong	local01, objptr
17770     02 1E 66 F0 | 	shl	local01, #2
17774     E4 E4 85 F1 | 	sub	objptr, #228
17778     F2 1E 02 F1 | 	add	local01, objptr
1777c     0F 1F 02 FB | 	rdlong	local01, local01
17780     A7 1E 62 FC | 	wrlong	local01, fp
17784     08 4E 05 F1 | 	add	fp, #8
17788     A7 3A 68 FC | 	wrlong	#29, fp
1778c     08 4E 85 F1 | 	sub	fp, #8
17790     A7 12 02 F6 | 	mov	arg01, fp
17794     59 00 00 FF 
17798     34 E5 85 F1 | 	sub	objptr, ##45876
1779c     90 44 BF FD | 	call	#_push
177a0                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
177a0     14 00 90 FD | 	jmp	#LR__1934
177a4                 | LR__1932
177a4     29 12 06 F6 | 	mov	arg01, #41
177a8     18 5E B0 FD | 	call	#_printerror
177ac                 | '      printerror(41) : return
177ac     08 00 90 FD | 	jmp	#LR__1934
177b0                 | LR__1933
177b0     29 12 06 F6 | 	mov	arg01, #41
177b4     0C 5E B0 FD | 	call	#_printerror
177b8                 | LR__1934
177b8     A7 F0 03 F6 | 	mov	ptra, fp
177bc     B2 00 A0 FD | 	call	#popregs_
177c0                 | _do_stick_ret
177c0     2D 00 64 FD | 	ret
177c4                 | 
177c4                 | ' 
177c4                 | ' sub do_strig
177c4                 | _do_strig
177c4     01 4A 05 F6 | 	mov	COUNT_, #1
177c8     A8 00 A0 FD | 	call	#pushregs_
177cc     10 F0 07 F1 | 	add	ptra, #16
177d0     4A 00 00 FF 
177d4     80 E4 05 F1 | 	add	objptr, ##38016
177d8     F2 1E 02 FB | 	rdlong	local01, objptr
177dc     0F 17 02 F6 | 	mov	arg03, local01
177e0     01 16 66 F0 | 	shl	arg03, #1
177e4     0F 17 02 F1 | 	add	arg03, local01
177e8     02 16 66 F0 | 	shl	arg03, #2
177ec     03 00 00 FF 
177f0     04 E4 85 F1 | 	sub	objptr, ##1540
177f4     F2 16 02 F1 | 	add	arg03, objptr
177f8     0B 17 02 FB | 	rdlong	arg03, arg03
177fc     0C 4E 05 F1 | 	add	fp, #12
17800     A7 16 62 FC | 	wrlong	arg03, fp
17804                 | ' 
17804                 | ' numpar=compiledline(lineptr_e).result.uresult
17804                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
17804     0C 4E 85 F1 | 	sub	fp, #12
17808     02 16 16 F2 | 	cmp	arg03, #2 wc
1780c     47 00 00 FF 
17810     7C E4 85 F1 | 	sub	objptr, ##36476
17814     3C 00 90 CD |  if_b	jmp	#LR__1940
17818     00 12 06 F6 | 	mov	arg01, #0
1781c     48 EB B0 FD | 	call	#__system___getiolock_0540
17820     FD 12 02 F6 | 	mov	arg01, result1
17824     00 91 B0 FD | 	call	#__system___lockmem
17828     84 01 00 FF 
1782c     86 15 06 F6 | 	mov	arg02, ##@LR__5451
17830     00 12 06 F6 | 	mov	arg01, #0
17834     00 16 06 F6 | 	mov	arg03, #0
17838     E0 9D B0 FD | 	call	#__system___basic_print_string
1783c     00 12 06 F6 | 	mov	arg01, #0
17840     24 EB B0 FD | 	call	#__system___getiolock_0540
17844     FD 00 68 FC | 	wrlong	#0, result1
17848     27 12 06 F6 | 	mov	arg01, #39
1784c     74 5D B0 FD | 	call	#_printerror
17850     E8 00 90 FD | 	jmp	#LR__1944
17854                 | LR__1940
17854                 | ' 
17854                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
17854     0C 4E 05 F1 | 	add	fp, #12
17858     A7 FE 09 FB | 	rdlong	result3, fp wz
1785c     0C 4E 85 F1 | 	sub	fp, #12
17860     30 00 90 5D |  if_ne	jmp	#LR__1941
17864     59 00 00 FF 
17868     50 E5 05 F1 | 	add	objptr, ##45904
1786c     F2 1E 02 FB | 	rdlong	local01, objptr
17870     59 00 00 FF 
17874     50 E5 85 F1 | 	sub	objptr, ##45904
17878     A7 1E 62 FC | 	wrlong	local01, fp
1787c     08 4E 05 F1 | 	add	fp, #8
17880     A7 3A 68 FC | 	wrlong	#29, fp
17884     08 4E 85 F1 | 	sub	fp, #8
17888     A7 12 02 F6 | 	mov	arg01, fp
1788c     A0 43 BF FD | 	call	#_push
17890     A8 00 90 FD | 	jmp	#LR__1944
17894                 | LR__1941
17894     00 43 BF FD | 	call	#_pop
17898     A7 FA 61 FC | 	wrlong	result1, fp
1789c     04 4E 05 F1 | 	add	fp, #4
178a0     A7 FC 61 FC | 	wrlong	result2, fp
178a4     04 4E 05 F1 | 	add	fp, #4
178a8     A7 FE 61 FC | 	wrlong	result3, fp
178ac                 | ' 
178ac                 | ' t1=pop()
178ac                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
178ac     08 4E 85 F1 | 	sub	fp, #8
178b0     1C FE 0D F2 | 	cmp	result3, #28 wz
178b4     08 4E 05 51 |  if_ne	add	fp, #8
178b8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
178bc     08 4E 85 51 |  if_ne	sub	fp, #8
178c0     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
178c4     6C 00 90 5D |  if_ne	jmp	#LR__1943
178c8     A7 1E 02 FB | 	rdlong	local01, fp
178cc     5A 00 00 FF 
178d0     18 E4 05 F1 | 	add	objptr, ##46104
178d4     F2 1E 62 FC | 	wrlong	local01, objptr
178d8                 | '   q=t1.result.uresult
178d8                 | '   if q<7 then 
178d8     5A 00 00 FF 
178dc     18 E4 85 F1 | 	sub	objptr, ##46104
178e0     07 1E 56 F2 | 	cmps	local01, #7 wc
178e4     40 00 90 3D |  if_ae	jmp	#LR__1942
178e8     5A 00 00 FF 
178ec     18 E4 05 F1 | 	add	objptr, ##46104
178f0     F2 1E 02 FB | 	rdlong	local01, objptr
178f4     02 1E 66 F0 | 	shl	local01, #2
178f8     C8 E4 85 F1 | 	sub	objptr, #200
178fc     F2 1E 02 F1 | 	add	local01, objptr
17900     0F 1F 02 FB | 	rdlong	local01, local01
17904     A7 1E 62 FC | 	wrlong	local01, fp
17908     08 4E 05 F1 | 	add	fp, #8
1790c     A7 3A 68 FC | 	wrlong	#29, fp
17910     08 4E 85 F1 | 	sub	fp, #8
17914     A7 12 02 F6 | 	mov	arg01, fp
17918     59 00 00 FF 
1791c     50 E5 85 F1 | 	sub	objptr, ##45904
17920     0C 43 BF FD | 	call	#_push
17924                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
17924     14 00 90 FD | 	jmp	#LR__1944
17928                 | LR__1942
17928     29 12 06 F6 | 	mov	arg01, #41
1792c     94 5C B0 FD | 	call	#_printerror
17930                 | '      printerror(41) : return
17930     08 00 90 FD | 	jmp	#LR__1944
17934                 | LR__1943
17934     29 12 06 F6 | 	mov	arg01, #41
17938     88 5C B0 FD | 	call	#_printerror
1793c                 | LR__1944
1793c     A7 F0 03 F6 | 	mov	ptra, fp
17940     B2 00 A0 FD | 	call	#popregs_
17944                 | _do_strig_ret
17944     2D 00 64 FD | 	ret
17948                 | 
17948                 | ' 
17948                 | ' sub do_getpixel
17948                 | _do_getpixel
17948     00 4A 05 F6 | 	mov	COUNT_, #0
1794c     A8 00 A0 FD | 	call	#pushregs_
17950     24 F0 07 F1 | 	add	ptra, #36
17954     4A 00 00 FF 
17958     80 E4 05 F1 | 	add	objptr, ##38016
1795c     F2 16 02 FB | 	rdlong	arg03, objptr
17960     0B 15 02 F6 | 	mov	arg02, arg03
17964     01 14 66 F0 | 	shl	arg02, #1
17968     0B 15 02 F1 | 	add	arg02, arg03
1796c     02 14 66 F0 | 	shl	arg02, #2
17970     03 00 00 FF 
17974     04 E4 85 F1 | 	sub	objptr, ##1540
17978     F2 14 02 F1 | 	add	arg02, objptr
1797c     0A 17 02 FB | 	rdlong	arg03, arg02
17980     18 4E 05 F1 | 	add	fp, #24
17984     A7 16 62 FC | 	wrlong	arg03, fp
17988                 | ' 
17988                 | ' numpar=compiledline(lineptr_e).result.uresult
17988                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
17988     18 4E 85 F1 | 	sub	fp, #24
1798c     02 16 0E F2 | 	cmp	arg03, #2 wz
17990     47 00 00 FF 
17994     7C E4 85 F1 | 	sub	objptr, ##36476
17998     3C 00 90 AD |  if_e	jmp	#LR__1950
1799c     00 12 06 F6 | 	mov	arg01, #0
179a0     C4 E9 B0 FD | 	call	#__system___getiolock_0540
179a4     FD 12 02 F6 | 	mov	arg01, result1
179a8     7C 8F B0 FD | 	call	#__system___lockmem
179ac     84 01 00 FF 
179b0     8E 15 06 F6 | 	mov	arg02, ##@LR__5452
179b4     00 12 06 F6 | 	mov	arg01, #0
179b8     00 16 06 F6 | 	mov	arg03, #0
179bc     5C 9C B0 FD | 	call	#__system___basic_print_string
179c0     00 12 06 F6 | 	mov	arg01, #0
179c4     A0 E9 B0 FD | 	call	#__system___getiolock_0540
179c8     FD 00 68 FC | 	wrlong	#0, result1
179cc     27 12 06 F6 | 	mov	arg01, #39
179d0     F0 5B B0 FD | 	call	#_printerror
179d4     B4 00 90 FD | 	jmp	#LR__1951
179d8                 | LR__1950
179d8     BC 41 BF FD | 	call	#_pop
179dc     FD 16 02 F6 | 	mov	arg03, result1
179e0     FE 14 02 F6 | 	mov	arg02, result2
179e4     FF 12 02 F6 | 	mov	arg01, result3
179e8     0C 4E 05 F1 | 	add	fp, #12
179ec     A7 16 62 FC | 	wrlong	arg03, fp
179f0     04 4E 05 F1 | 	add	fp, #4
179f4     A7 14 62 FC | 	wrlong	arg02, fp
179f8     04 4E 05 F1 | 	add	fp, #4
179fc     A7 12 62 FC | 	wrlong	arg01, fp
17a00     14 4E 85 F1 | 	sub	fp, #20
17a04     90 41 BF FD | 	call	#_pop
17a08     FF 16 02 F6 | 	mov	arg03, result3
17a0c     A7 FA 61 FC | 	wrlong	result1, fp
17a10     04 4E 05 F1 | 	add	fp, #4
17a14     A7 FC 61 FC | 	wrlong	result2, fp
17a18     04 4E 05 F1 | 	add	fp, #4
17a1c     A7 16 62 FC | 	wrlong	arg03, fp
17a20     08 4E 85 F1 | 	sub	fp, #8
17a24     A7 12 02 F6 | 	mov	arg01, fp
17a28     3C E2 BF FD | 	call	#_converttoint
17a2c     1C 4E 05 F1 | 	add	fp, #28
17a30     A7 FA 61 FC | 	wrlong	result1, fp
17a34     10 4E 85 F1 | 	sub	fp, #16
17a38     A7 12 02 F6 | 	mov	arg01, fp
17a3c     0C 4E 85 F1 | 	sub	fp, #12
17a40     24 E2 BF FD | 	call	#_converttoint
17a44     FD 16 02 F6 | 	mov	arg03, result1
17a48     20 4E 05 F1 | 	add	fp, #32
17a4c     A7 16 62 FC | 	wrlong	arg03, fp
17a50     F2 12 02 FB | 	rdlong	arg01, objptr
17a54     04 4E 85 F1 | 	sub	fp, #4
17a58     A7 FE 01 FB | 	rdlong	result3, fp
17a5c     FF 12 02 F1 | 	add	arg01, result3
17a60     1C 4E 85 F1 | 	sub	fp, #28
17a64     0A 16 66 F0 | 	shl	arg03, #10
17a68     0B 13 02 F1 | 	add	arg01, arg03
17a6c     90 5D B0 FD | 	call	#_pspeek
17a70     FD FA E1 F8 | 	getbyte	result1, result1, #0
17a74     A7 FA 61 FC | 	wrlong	result1, fp
17a78     08 4E 05 F1 | 	add	fp, #8
17a7c     A7 3A 68 FC | 	wrlong	#29, fp
17a80     08 4E 85 F1 | 	sub	fp, #8
17a84     A7 12 02 F6 | 	mov	arg01, fp
17a88     A4 41 BF FD | 	call	#_push
17a8c                 | LR__1951
17a8c     A7 F0 03 F6 | 	mov	ptra, fp
17a90     B2 00 A0 FD | 	call	#popregs_
17a94                 | _do_getpixel_ret
17a94     2D 00 64 FD | 	ret
17a98                 | 
17a98                 | ' 
17a98                 | ' sub do_log
17a98                 | _do_log
17a98     01 4A 05 F6 | 	mov	COUNT_, #1
17a9c     A8 00 A0 FD | 	call	#pushregs_
17aa0     14 F0 07 F1 | 	add	ptra, #20
17aa4     4A 00 00 FF 
17aa8     80 E4 05 F1 | 	add	objptr, ##38016
17aac     F2 1E 02 FB | 	rdlong	local01, objptr
17ab0     0F 17 02 F6 | 	mov	arg03, local01
17ab4     01 16 66 F0 | 	shl	arg03, #1
17ab8     0F 17 02 F1 | 	add	arg03, local01
17abc     02 16 66 F0 | 	shl	arg03, #2
17ac0     03 00 00 FF 
17ac4     04 E4 85 F1 | 	sub	objptr, ##1540
17ac8     F2 16 02 F1 | 	add	arg03, objptr
17acc     0B 17 0A FB | 	rdlong	arg03, arg03 wz
17ad0     0C 4E 05 F1 | 	add	fp, #12
17ad4     A7 16 62 FC | 	wrlong	arg03, fp
17ad8                 | ' 
17ad8                 | ' numpar=compiledline(lineptr_e).result.uresult
17ad8                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
17ad8     0C 4E 85 F1 | 	sub	fp, #12
17adc     47 00 00 FF 
17ae0     7C E4 85 F1 | 	sub	objptr, ##36476
17ae4     0C 4E 05 51 |  if_ne	add	fp, #12
17ae8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
17aec     0C 4E 85 51 |  if_ne	sub	fp, #12
17af0     03 1E 16 52 |  if_ne	cmp	local01, #3 wc
17af4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1960
17af8     00 12 06 F6 | 	mov	arg01, #0
17afc     68 E8 B0 FD | 	call	#__system___getiolock_0540
17b00     FD 12 02 F6 | 	mov	arg01, result1
17b04     20 8E B0 FD | 	call	#__system___lockmem
17b08     84 01 00 FF 
17b0c     99 15 06 F6 | 	mov	arg02, ##@LR__5453
17b10     00 12 06 F6 | 	mov	arg01, #0
17b14     00 16 06 F6 | 	mov	arg03, #0
17b18     00 9B B0 FD | 	call	#__system___basic_print_string
17b1c     00 12 06 F6 | 	mov	arg01, #0
17b20     44 E8 B0 FD | 	call	#__system___getiolock_0540
17b24     FD 00 68 FC | 	wrlong	#0, result1
17b28     27 12 06 F6 | 	mov	arg01, #39
17b2c     94 5A B0 FD | 	call	#_printerror
17b30     D0 00 90 FD | 	jmp	#LR__1963
17b34                 | LR__1960
17b34                 | ' 
17b34                 | ' if numpar=2 then 
17b34     0C 4E 05 F1 | 	add	fp, #12
17b38     A7 1E 02 FB | 	rdlong	local01, fp
17b3c     0C 4E 85 F1 | 	sub	fp, #12
17b40     02 1E 0E F2 | 	cmp	local01, #2 wz
17b44     48 00 90 5D |  if_ne	jmp	#LR__1961
17b48     4C 40 BF FD | 	call	#_pop
17b4c     FF 1E 02 F6 | 	mov	local01, result3
17b50     A7 FA 61 FC | 	wrlong	result1, fp
17b54     04 4E 05 F1 | 	add	fp, #4
17b58     A7 FC 61 FC | 	wrlong	result2, fp
17b5c     04 4E 05 F1 | 	add	fp, #4
17b60     A7 1E 62 FC | 	wrlong	local01, fp
17b64     08 4E 85 F1 | 	sub	fp, #8
17b68     A7 12 02 F6 | 	mov	arg01, fp
17b6c     B4 E1 BF FD | 	call	#_converttofloat
17b70     FD 14 02 F6 | 	mov	arg02, result1
17b74     FC 16 20 FF 
17b78     54 12 06 F6 | 	mov	arg01, ##1076754516
17b7c     08 C9 B0 FD | 	call	#__system____builtin_logbase
17b80     10 4E 05 F1 | 	add	fp, #16
17b84     A7 FA 61 FC | 	wrlong	result1, fp
17b88     10 4E 85 F1 | 	sub	fp, #16
17b8c     10 00 90 FD | 	jmp	#LR__1962
17b90                 | LR__1961
17b90     10 4E 05 F1 | 	add	fp, #16
17b94     00 C0 9F FF 
17b98     A7 00 68 FC | 	wrlong	##1065353216, fp
17b9c     10 4E 85 F1 | 	sub	fp, #16
17ba0                 | LR__1962
17ba0     F4 3F BF FD | 	call	#_pop
17ba4     FF 1E 02 F6 | 	mov	local01, result3
17ba8     A7 FA 61 FC | 	wrlong	result1, fp
17bac     04 4E 05 F1 | 	add	fp, #4
17bb0     A7 FC 61 FC | 	wrlong	result2, fp
17bb4     04 4E 05 F1 | 	add	fp, #4
17bb8     A7 1E 62 FC | 	wrlong	local01, fp
17bbc     08 4E 85 F1 | 	sub	fp, #8
17bc0     A7 12 02 F6 | 	mov	arg01, fp
17bc4     5C E1 BF FD | 	call	#_converttofloat
17bc8     FD 14 02 F6 | 	mov	arg02, result1
17bcc     FC 16 20 FF 
17bd0     54 12 06 F6 | 	mov	arg01, ##1076754516
17bd4     B0 C8 B0 FD | 	call	#__system____builtin_logbase
17bd8     FD 12 02 F6 | 	mov	arg01, result1
17bdc     10 4E 05 F1 | 	add	fp, #16
17be0     A7 14 02 FB | 	rdlong	arg02, fp
17be4     10 4E 85 F1 | 	sub	fp, #16
17be8     F4 BA B0 FD | 	call	#__system___float_div
17bec     A7 FA 61 FC | 	wrlong	result1, fp
17bf0     08 4E 05 F1 | 	add	fp, #8
17bf4     A7 3C 68 FC | 	wrlong	#30, fp
17bf8     08 4E 85 F1 | 	sub	fp, #8
17bfc     A7 12 02 F6 | 	mov	arg01, fp
17c00     2C 40 BF FD | 	call	#_push
17c04                 | LR__1963
17c04     A7 F0 03 F6 | 	mov	ptra, fp
17c08     B2 00 A0 FD | 	call	#popregs_
17c0c                 | _do_log_ret
17c0c     2D 00 64 FD | 	ret
17c10                 | 
17c10                 | ' 
17c10                 | ' sub do_defsprite
17c10                 | _do_defsprite
17c10     07 4A 05 F6 | 	mov	COUNT_, #7
17c14     A8 00 A0 FD | 	call	#pushregs_
17c18     60 F0 07 F1 | 	add	ptra, #96
17c1c     78 3F BF FD | 	call	#_pop
17c20     FD 16 02 F6 | 	mov	arg03, result1
17c24     FE 14 02 F6 | 	mov	arg02, result2
17c28     FF 12 02 F6 | 	mov	arg01, result3
17c2c     30 4E 05 F1 | 	add	fp, #48
17c30     A7 16 62 FC | 	wrlong	arg03, fp
17c34     04 4E 05 F1 | 	add	fp, #4
17c38     A7 14 62 FC | 	wrlong	arg02, fp
17c3c     04 4E 05 F1 | 	add	fp, #4
17c40     A7 12 62 FC | 	wrlong	arg01, fp
17c44     38 4E 85 F1 | 	sub	fp, #56
17c48     4C 3F BF FD | 	call	#_pop
17c4c     FD 16 02 F6 | 	mov	arg03, result1
17c50     FE 14 02 F6 | 	mov	arg02, result2
17c54     FF 12 02 F6 | 	mov	arg01, result3
17c58     24 4E 05 F1 | 	add	fp, #36
17c5c     A7 16 62 FC | 	wrlong	arg03, fp
17c60     04 4E 05 F1 | 	add	fp, #4
17c64     A7 14 62 FC | 	wrlong	arg02, fp
17c68     04 4E 05 F1 | 	add	fp, #4
17c6c     A7 12 62 FC | 	wrlong	arg01, fp
17c70     2C 4E 85 F1 | 	sub	fp, #44
17c74     20 3F BF FD | 	call	#_pop
17c78     FD 16 02 F6 | 	mov	arg03, result1
17c7c     FE 14 02 F6 | 	mov	arg02, result2
17c80     FF 12 02 F6 | 	mov	arg01, result3
17c84     18 4E 05 F1 | 	add	fp, #24
17c88     A7 16 62 FC | 	wrlong	arg03, fp
17c8c     04 4E 05 F1 | 	add	fp, #4
17c90     A7 14 62 FC | 	wrlong	arg02, fp
17c94     04 4E 05 F1 | 	add	fp, #4
17c98     A7 12 62 FC | 	wrlong	arg01, fp
17c9c     20 4E 85 F1 | 	sub	fp, #32
17ca0     F4 3E BF FD | 	call	#_pop
17ca4     FD 16 02 F6 | 	mov	arg03, result1
17ca8     FE 14 02 F6 | 	mov	arg02, result2
17cac     FF 12 02 F6 | 	mov	arg01, result3
17cb0     0C 4E 05 F1 | 	add	fp, #12
17cb4     A7 16 62 FC | 	wrlong	arg03, fp
17cb8     04 4E 05 F1 | 	add	fp, #4
17cbc     A7 14 62 FC | 	wrlong	arg02, fp
17cc0     04 4E 05 F1 | 	add	fp, #4
17cc4     A7 12 62 FC | 	wrlong	arg01, fp
17cc8     14 4E 85 F1 | 	sub	fp, #20
17ccc     C8 3E BF FD | 	call	#_pop
17cd0     FF 16 02 F6 | 	mov	arg03, result3
17cd4     A7 FA 61 FC | 	wrlong	result1, fp
17cd8     04 4E 05 F1 | 	add	fp, #4
17cdc     A7 FC 61 FC | 	wrlong	result2, fp
17ce0     04 4E 05 F1 | 	add	fp, #4
17ce4     A7 16 62 FC | 	wrlong	arg03, fp
17ce8     08 4E 85 F1 | 	sub	fp, #8
17cec     A7 12 02 F6 | 	mov	arg01, fp
17cf0     74 DF BF FD | 	call	#_converttoint
17cf4     3C 4E 05 F1 | 	add	fp, #60
17cf8     A7 FA 61 FC | 	wrlong	result1, fp
17cfc     30 4E 85 F1 | 	sub	fp, #48
17d00     A7 12 02 F6 | 	mov	arg01, fp
17d04     0C 4E 85 F1 | 	sub	fp, #12
17d08     5C DF BF FD | 	call	#_converttoint
17d0c     40 4E 05 F1 | 	add	fp, #64
17d10     A7 FA 61 FC | 	wrlong	result1, fp
17d14     28 4E 85 F1 | 	sub	fp, #40
17d18     A7 12 02 F6 | 	mov	arg01, fp
17d1c     18 4E 85 F1 | 	sub	fp, #24
17d20     44 DF BF FD | 	call	#_converttoint
17d24     44 4E 05 F1 | 	add	fp, #68
17d28     A7 FA 61 FC | 	wrlong	result1, fp
17d2c     20 4E 85 F1 | 	sub	fp, #32
17d30     A7 12 02 F6 | 	mov	arg01, fp
17d34     24 4E 85 F1 | 	sub	fp, #36
17d38     2C DF BF FD | 	call	#_converttoint
17d3c     48 4E 05 F1 | 	add	fp, #72
17d40     A7 FA 61 FC | 	wrlong	result1, fp
17d44     18 4E 85 F1 | 	sub	fp, #24
17d48     A7 12 02 F6 | 	mov	arg01, fp
17d4c     30 4E 85 F1 | 	sub	fp, #48
17d50     14 DF BF FD | 	call	#_converttoint
17d54     4C 4E 05 F1 | 	add	fp, #76
17d58     A7 FA 61 FC | 	wrlong	result1, fp
17d5c                 | ' 
17d5c                 | ' t5=pop()
17d5c                 | ' t4=pop()
17d5c                 | ' t3=pop()
17d5c                 | ' t2=pop()
17d5c                 | ' t1=pop()
17d5c                 | ' 
17d5c                 | ' ' do convert, defsprite is not a racing command
17d5c                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
17d5c                 | '  
17d5c                 | ' ' todo: check parameters for linits
17d5c                 | ' if sprite(a1)<> nil then delete(sprite(a1))
17d5c     10 4E 85 F1 | 	sub	fp, #16
17d60     A7 16 02 FB | 	rdlong	arg03, fp
17d64     3C 4E 85 F1 | 	sub	fp, #60
17d68     02 16 66 F0 | 	shl	arg03, #2
17d6c     59 00 00 FF 
17d70     6C E5 05 F1 | 	add	objptr, ##45932
17d74     F2 16 02 F1 | 	add	arg03, objptr
17d78     0B 17 0A FB | 	rdlong	arg03, arg03 wz
17d7c     59 00 00 FF 
17d80     6C E5 85 F1 | 	sub	objptr, ##45932
17d84     2C 00 90 AD |  if_e	jmp	#LR__1970
17d88     3C 4E 05 F1 | 	add	fp, #60
17d8c     A7 16 02 FB | 	rdlong	arg03, fp
17d90     3C 4E 85 F1 | 	sub	fp, #60
17d94     02 16 66 F0 | 	shl	arg03, #2
17d98     59 00 00 FF 
17d9c     6C E5 05 F1 | 	add	objptr, ##45932
17da0     F2 16 02 F1 | 	add	arg03, objptr
17da4     0B 13 02 FB | 	rdlong	arg01, arg03
17da8     59 00 00 FF 
17dac     6C E5 85 F1 | 	sub	objptr, ##45932
17db0     68 CB B0 FD | 	call	#__system___gc_free
17db4                 | LR__1970
17db4     3C 4E 05 F1 | 	add	fp, #60
17db8     A7 1E 02 FB | 	rdlong	local01, fp
17dbc     0C 4E 05 F1 | 	add	fp, #12
17dc0     A7 16 02 FB | 	rdlong	arg03, fp
17dc4     04 4E 05 F1 | 	add	fp, #4
17dc8     A7 14 02 FB | 	rdlong	arg02, fp
17dcc     0A 17 02 FD | 	qmul	arg03, arg02
17dd0     02 1E 66 F0 | 	shl	local01, #2
17dd4     59 00 00 FF 
17dd8     6C E5 05 F1 | 	add	objptr, ##45932
17ddc     F2 1E 02 F1 | 	add	local01, objptr
17de0     4C 4E 85 F1 | 	sub	fp, #76
17de4     59 00 00 FF 
17de8     6C E5 85 F1 | 	sub	objptr, ##45932
17dec     18 12 62 FD | 	getqx	arg01
17df0     EC C9 B0 FD | 	call	#__system___gc_alloc_managed
17df4     0F FB 61 FC | 	wrlong	result1, local01
17df8                 | ' for y=a3 to a3+a5-1
17df8     44 4E 05 F1 | 	add	fp, #68
17dfc     A7 20 02 FB | 	rdlong	local02, fp
17e00     0C 4E 05 F1 | 	add	fp, #12
17e04     A7 20 62 FC | 	wrlong	local02, fp
17e08     0C 4E 85 F1 | 	sub	fp, #12
17e0c     A7 22 02 FB | 	rdlong	local03, fp
17e10     08 4E 05 F1 | 	add	fp, #8
17e14     A7 24 02 FB | 	rdlong	local04, fp
17e18     4C 4E 85 F1 | 	sub	fp, #76
17e1c     12 23 02 F1 | 	add	local03, local04
17e20                 | LR__1971
17e20     50 4E 05 F1 | 	add	fp, #80
17e24     A7 20 02 FB | 	rdlong	local02, fp
17e28     50 4E 85 F1 | 	sub	fp, #80
17e2c     11 21 52 F2 | 	cmps	local02, local03 wc
17e30     F4 00 90 3D |  if_ae	jmp	#LR__1974
17e34                 | '   for x=a2 to a4+a2-1
17e34     40 4E 05 F1 | 	add	fp, #64
17e38     A7 1E 02 FB | 	rdlong	local01, fp
17e3c     14 4E 05 F1 | 	add	fp, #20
17e40     A7 1E 62 FC | 	wrlong	local01, fp
17e44     0C 4E 85 F1 | 	sub	fp, #12
17e48     A7 26 02 FB | 	rdlong	local05, fp
17e4c     08 4E 85 F1 | 	sub	fp, #8
17e50     A7 28 02 FB | 	rdlong	local06, fp
17e54     40 4E 85 F1 | 	sub	fp, #64
17e58     14 27 02 F1 | 	add	local05, local06
17e5c                 | LR__1972
17e5c     54 4E 05 F1 | 	add	fp, #84
17e60     A7 1E 02 FB | 	rdlong	local01, fp
17e64     54 4E 85 F1 | 	sub	fp, #84
17e68     13 1F 52 F2 | 	cmps	local01, local05 wc
17e6c     A0 00 90 3D |  if_ae	jmp	#LR__1973
17e70     3C 4E 05 F1 | 	add	fp, #60
17e74     A7 28 02 FB | 	rdlong	local06, fp
17e78     18 4E 05 F1 | 	add	fp, #24
17e7c     A7 24 02 FB | 	rdlong	local04, fp
17e80     14 4E 85 F1 | 	sub	fp, #20
17e84     A7 20 02 FB | 	rdlong	local02, fp
17e88     10 4E 05 F1 | 	add	fp, #16
17e8c     A7 1E 02 FB | 	rdlong	local01, fp
17e90     0F 17 02 F6 | 	mov	arg03, local01
17e94     0C 4E 85 F1 | 	sub	fp, #12
17e98     A7 14 02 FB | 	rdlong	arg02, fp
17e9c     0A 17 82 F1 | 	sub	arg03, arg02
17ea0     04 4E 05 F1 | 	add	fp, #4
17ea4     A7 14 02 FB | 	rdlong	arg02, fp
17ea8     0A 17 02 FD | 	qmul	arg03, arg02
17eac     02 28 66 F0 | 	shl	local06, #2
17eb0     59 00 00 FF 
17eb4     6C E5 05 F1 | 	add	objptr, ##45932
17eb8     F2 28 02 F1 | 	add	local06, objptr
17ebc     14 29 02 FB | 	rdlong	local06, local06
17ec0     12 2B 02 F6 | 	mov	local07, local04
17ec4     10 2B 82 F1 | 	sub	local07, local02
17ec8     59 00 00 FF 
17ecc     6C E5 85 F1 | 	sub	objptr, ##45932
17ed0     F2 12 02 FB | 	rdlong	arg01, objptr
17ed4     12 13 02 F1 | 	add	arg01, local04
17ed8     48 4E 85 F1 | 	sub	fp, #72
17edc     0A 1E 66 F0 | 	shl	local01, #10
17ee0     0F 13 02 F1 | 	add	arg01, local01
17ee4     18 24 62 FD | 	getqx	local04
17ee8     12 2B 02 F1 | 	add	local07, local04
17eec     14 2B 02 F1 | 	add	local07, local06
17ef0     0C 59 B0 FD | 	call	#_pspeek
17ef4     15 FB 41 FC | 	wrbyte	result1, local07
17ef8     54 4E 05 F1 | 	add	fp, #84
17efc     A7 2A 02 FB | 	rdlong	local07, fp
17f00     01 2A 06 F1 | 	add	local07, #1
17f04     A7 2A 62 FC | 	wrlong	local07, fp
17f08     54 4E 85 F1 | 	sub	fp, #84
17f0c     4C FF 9F FD | 	jmp	#LR__1972
17f10                 | LR__1973
17f10     50 4E 05 F1 | 	add	fp, #80
17f14     A7 2A 02 FB | 	rdlong	local07, fp
17f18     01 2A 06 F1 | 	add	local07, #1
17f1c     A7 2A 62 FC | 	wrlong	local07, fp
17f20     50 4E 85 F1 | 	sub	fp, #80
17f24     F8 FE 9F FD | 	jmp	#LR__1971
17f28                 | LR__1974
17f28     3C 4E 05 F1 | 	add	fp, #60
17f2c     A7 2A 02 FB | 	rdlong	local07, fp
17f30     15 13 02 F6 | 	mov	arg01, local07
17f34     3C 4E 85 F1 | 	sub	fp, #60
17f38     02 2A 66 F0 | 	shl	local07, #2
17f3c     59 00 00 FF 
17f40     6C E5 05 F1 | 	add	objptr, ##45932
17f44     F2 2A 02 F1 | 	add	local07, objptr
17f48     15 15 02 FB | 	rdlong	arg02, local07
17f4c     59 00 00 FF 
17f50     6C E5 85 F1 | 	sub	objptr, ##45932
17f54     78 65 B0 FD | 	call	#_hg010b_spin2_setspriteptr
17f58     3C 4E 05 F1 | 	add	fp, #60
17f5c     A7 12 02 FB | 	rdlong	arg01, fp
17f60     0C 4E 05 F1 | 	add	fp, #12
17f64     A7 14 02 FB | 	rdlong	arg02, fp
17f68     04 4E 05 F1 | 	add	fp, #4
17f6c     A7 16 02 FB | 	rdlong	arg03, fp
17f70     4C 4E 85 F1 | 	sub	fp, #76
17f74     E8 65 B0 FD | 	call	#_hg010b_spin2_setspritesize
17f78     A7 F0 03 F6 | 	mov	ptra, fp
17f7c     B2 00 A0 FD | 	call	#popregs_
17f80                 | _do_defsprite_ret
17f80     2D 00 64 FD | 	ret
17f84                 | 
17f84                 | ' 
17f84                 | ' sub do_sprite
17f84                 | _do_sprite
17f84     00 4A 05 F6 | 	mov	COUNT_, #0
17f88     A8 00 A0 FD | 	call	#pushregs_
17f8c     30 F0 07 F1 | 	add	ptra, #48
17f90     04 3C BF FD | 	call	#_pop
17f94     FD 16 02 F6 | 	mov	arg03, result1
17f98     FE 14 02 F6 | 	mov	arg02, result2
17f9c     FF 12 02 F6 | 	mov	arg01, result3
17fa0     18 4E 05 F1 | 	add	fp, #24
17fa4     A7 16 62 FC | 	wrlong	arg03, fp
17fa8     04 4E 05 F1 | 	add	fp, #4
17fac     A7 14 62 FC | 	wrlong	arg02, fp
17fb0     04 4E 05 F1 | 	add	fp, #4
17fb4     A7 12 62 FC | 	wrlong	arg01, fp
17fb8     20 4E 85 F1 | 	sub	fp, #32
17fbc     D8 3B BF FD | 	call	#_pop
17fc0     FD 16 02 F6 | 	mov	arg03, result1
17fc4     FE 14 02 F6 | 	mov	arg02, result2
17fc8     FF 12 02 F6 | 	mov	arg01, result3
17fcc     0C 4E 05 F1 | 	add	fp, #12
17fd0     A7 16 62 FC | 	wrlong	arg03, fp
17fd4     04 4E 05 F1 | 	add	fp, #4
17fd8     A7 14 62 FC | 	wrlong	arg02, fp
17fdc     04 4E 05 F1 | 	add	fp, #4
17fe0     A7 12 62 FC | 	wrlong	arg01, fp
17fe4     14 4E 85 F1 | 	sub	fp, #20
17fe8     AC 3B BF FD | 	call	#_pop
17fec     FF 16 02 F6 | 	mov	arg03, result3
17ff0     A7 FA 61 FC | 	wrlong	result1, fp
17ff4     04 4E 05 F1 | 	add	fp, #4
17ff8     A7 FC 61 FC | 	wrlong	result2, fp
17ffc     04 4E 05 F1 | 	add	fp, #4
18000     A7 16 62 FC | 	wrlong	arg03, fp
18004     08 4E 85 F1 | 	sub	fp, #8
18008     A7 12 02 F6 | 	mov	arg01, fp
1800c     58 DC BF FD | 	call	#_converttoint
18010     24 4E 05 F1 | 	add	fp, #36
18014     A7 FA 61 FC | 	wrlong	result1, fp
18018     18 4E 85 F1 | 	sub	fp, #24
1801c     A7 12 02 F6 | 	mov	arg01, fp
18020     0C 4E 85 F1 | 	sub	fp, #12
18024     40 DC BF FD | 	call	#_converttoint
18028     28 4E 05 F1 | 	add	fp, #40
1802c     A7 FA 61 FC | 	wrlong	result1, fp
18030     10 4E 85 F1 | 	sub	fp, #16
18034     A7 12 02 F6 | 	mov	arg01, fp
18038     18 4E 85 F1 | 	sub	fp, #24
1803c     28 DC BF FD | 	call	#_converttoint
18040     2C 4E 05 F1 | 	add	fp, #44
18044     A7 FA 61 FC | 	wrlong	result1, fp
18048     08 4E 85 F1 | 	sub	fp, #8
1804c     A7 12 02 FB | 	rdlong	arg01, fp
18050     04 4E 05 F1 | 	add	fp, #4
18054     A7 14 02 FB | 	rdlong	arg02, fp
18058     FD 16 02 F6 | 	mov	arg03, result1
1805c     28 4E 85 F1 | 	sub	fp, #40
18060     94 64 B0 FD | 	call	#_hg010b_spin2_setspritepos
18064     A7 F0 03 F6 | 	mov	ptra, fp
18068     B2 00 A0 FD | 	call	#popregs_
1806c                 | _do_sprite_ret
1806c     2D 00 64 FD | 	ret
18070                 | 
18070                 | ' 
18070                 | ' sub do_mousex
18070                 | _do_mousex
18070     00 4A 05 F6 | 	mov	COUNT_, #0
18074     A8 00 A0 FD | 	call	#pushregs_
18078     0C F0 07 F1 | 	add	ptra, #12
1807c     08 4E 05 F1 | 	add	fp, #8
18080     A7 3A 68 FC | 	wrlong	#29, fp
18084     08 4E 85 F1 | 	sub	fp, #8
18088     59 00 00 FF 
1808c     24 E5 05 F1 | 	add	objptr, ##45860
18090     F2 12 02 FB | 	rdlong	arg01, objptr
18094     59 00 00 FF 
18098     24 E5 85 F1 | 	sub	objptr, ##45860
1809c     A7 12 62 FC | 	wrlong	arg01, fp
180a0     A7 12 02 F6 | 	mov	arg01, fp
180a4     88 3B BF FD | 	call	#_push
180a8     A7 F0 03 F6 | 	mov	ptra, fp
180ac     B2 00 A0 FD | 	call	#popregs_
180b0                 | _do_mousex_ret
180b0     2D 00 64 FD | 	ret
180b4                 | 
180b4                 | ' 
180b4                 | ' sub do_mousey
180b4                 | _do_mousey
180b4     00 4A 05 F6 | 	mov	COUNT_, #0
180b8     A8 00 A0 FD | 	call	#pushregs_
180bc     0C F0 07 F1 | 	add	ptra, #12
180c0     08 4E 05 F1 | 	add	fp, #8
180c4     A7 3A 68 FC | 	wrlong	#29, fp
180c8     08 4E 85 F1 | 	sub	fp, #8
180cc     59 00 00 FF 
180d0     28 E5 05 F1 | 	add	objptr, ##45864
180d4     F2 12 02 FB | 	rdlong	arg01, objptr
180d8     59 00 00 FF 
180dc     28 E5 85 F1 | 	sub	objptr, ##45864
180e0     A7 12 62 FC | 	wrlong	arg01, fp
180e4     A7 12 02 F6 | 	mov	arg01, fp
180e8     44 3B BF FD | 	call	#_push
180ec     A7 F0 03 F6 | 	mov	ptra, fp
180f0     B2 00 A0 FD | 	call	#popregs_
180f4                 | _do_mousey_ret
180f4     2D 00 64 FD | 	ret
180f8                 | 
180f8                 | ' 
180f8                 | ' sub do_mousew
180f8                 | _do_mousew
180f8     00 4A 05 F6 | 	mov	COUNT_, #0
180fc     A8 00 A0 FD | 	call	#pushregs_
18100     0C F0 07 F1 | 	add	ptra, #12
18104     08 4E 05 F1 | 	add	fp, #8
18108     A7 38 68 FC | 	wrlong	#28, fp
1810c     08 4E 85 F1 | 	sub	fp, #8
18110     59 00 00 FF 
18114     30 E5 05 F1 | 	add	objptr, ##45872
18118     F2 12 02 FB | 	rdlong	arg01, objptr
1811c     59 00 00 FF 
18120     30 E5 85 F1 | 	sub	objptr, ##45872
18124     A7 12 62 FC | 	wrlong	arg01, fp
18128     A7 12 02 F6 | 	mov	arg01, fp
1812c     00 3B BF FD | 	call	#_push
18130     A7 F0 03 F6 | 	mov	ptra, fp
18134     B2 00 A0 FD | 	call	#popregs_
18138                 | _do_mousew_ret
18138     2D 00 64 FD | 	ret
1813c                 | 
1813c                 | ' 
1813c                 | ' sub do_mousek
1813c                 | _do_mousek
1813c     00 4A 05 F6 | 	mov	COUNT_, #0
18140     A8 00 A0 FD | 	call	#pushregs_
18144     0C F0 07 F1 | 	add	ptra, #12
18148     08 4E 05 F1 | 	add	fp, #8
1814c     A7 3A 68 FC | 	wrlong	#29, fp
18150     08 4E 85 F1 | 	sub	fp, #8
18154     59 00 00 FF 
18158     2C E5 05 F1 | 	add	objptr, ##45868
1815c     F2 12 02 FB | 	rdlong	arg01, objptr
18160     59 00 00 FF 
18164     2C E5 85 F1 | 	sub	objptr, ##45868
18168     A7 12 62 FC | 	wrlong	arg01, fp
1816c     A7 12 02 F6 | 	mov	arg01, fp
18170     BC 3A BF FD | 	call	#_push
18174     A7 F0 03 F6 | 	mov	ptra, fp
18178     B2 00 A0 FD | 	call	#popregs_
1817c                 | _do_mousek_ret
1817c     2D 00 64 FD | 	ret
18180                 | 
18180                 | ' 
18180                 | ' 
18180                 | ' sub do_rdpin
18180                 | _do_rdpin
18180     00 4A 05 F6 | 	mov	COUNT_, #0
18184     A8 00 A0 FD | 	call	#pushregs_
18188     0C F0 07 F1 | 	add	ptra, #12
1818c     08 3A BF FD | 	call	#_pop
18190     A7 FA 61 FC | 	wrlong	result1, fp
18194     04 4E 05 F1 | 	add	fp, #4
18198     A7 FC 61 FC | 	wrlong	result2, fp
1819c     04 4E 05 F1 | 	add	fp, #4
181a0     A7 FE 61 FC | 	wrlong	result3, fp
181a4     08 4E 85 F1 | 	sub	fp, #8
181a8     A7 12 02 F6 | 	mov	arg01, fp
181ac     B8 DA BF FD | 	call	#_converttoint
181b0     FD FA 89 FA | 	rdpin	result1, result1
181b4     5A 00 00 FF 
181b8     44 E4 05 F1 | 	add	objptr, ##46148
181bc     F2 FA 61 FC | 	wrlong	result1, objptr
181c0     5A 00 00 FF 
181c4     44 E4 85 F1 | 	sub	objptr, ##46148
181c8     08 4E 05 F1 | 	add	fp, #8
181cc     A7 3A 68 FC | 	wrlong	#29, fp
181d0     08 4E 85 F1 | 	sub	fp, #8
181d4     A7 08 68 FC | 	wrlong	#4, fp
181d8     A7 12 02 F6 | 	mov	arg01, fp
181dc     50 3A BF FD | 	call	#_push
181e0     A7 F0 03 F6 | 	mov	ptra, fp
181e4     B2 00 A0 FD | 	call	#popregs_
181e8                 | _do_rdpin_ret
181e8     2D 00 64 FD | 	ret
181ec                 | 
181ec                 | ' 
181ec                 | ' sub do_rqpin
181ec                 | _do_rqpin
181ec     00 4A 05 F6 | 	mov	COUNT_, #0
181f0     A8 00 A0 FD | 	call	#pushregs_
181f4     0C F0 07 F1 | 	add	ptra, #12
181f8     9C 39 BF FD | 	call	#_pop
181fc     A7 FA 61 FC | 	wrlong	result1, fp
18200     04 4E 05 F1 | 	add	fp, #4
18204     A7 FC 61 FC | 	wrlong	result2, fp
18208     04 4E 05 F1 | 	add	fp, #4
1820c     A7 FE 61 FC | 	wrlong	result3, fp
18210     08 4E 85 F1 | 	sub	fp, #8
18214     A7 12 02 F6 | 	mov	arg01, fp
18218     4C DA BF FD | 	call	#_converttoint
1821c     FD 12 02 F6 | 	mov	arg01, result1
18220     00 FA 05 F6 | 	mov	result1, #0
18224     09 FB 81 FA | 	rqpin	result1, arg01
18228     5A 00 00 FF 
1822c     44 E4 05 F1 | 	add	objptr, ##46148
18230     F2 FA 61 FC | 	wrlong	result1, objptr
18234     5A 00 00 FF 
18238     44 E4 85 F1 | 	sub	objptr, ##46148
1823c     08 4E 05 F1 | 	add	fp, #8
18240     A7 3A 68 FC | 	wrlong	#29, fp
18244     08 4E 85 F1 | 	sub	fp, #8
18248     A7 08 68 FC | 	wrlong	#4, fp
1824c     A7 12 02 F6 | 	mov	arg01, fp
18250     DC 39 BF FD | 	call	#_push
18254     A7 F0 03 F6 | 	mov	ptra, fp
18258     B2 00 A0 FD | 	call	#popregs_
1825c                 | _do_rqpin_ret
1825c     2D 00 64 FD | 	ret
18260                 | 
18260                 | ' 
18260                 | ' sub do_pinread
18260                 | _do_pinread
18260     00 4A 05 F6 | 	mov	COUNT_, #0
18264     A8 00 A0 FD | 	call	#pushregs_
18268     0C F0 07 F1 | 	add	ptra, #12
1826c     28 39 BF FD | 	call	#_pop
18270     A7 FA 61 FC | 	wrlong	result1, fp
18274     04 4E 05 F1 | 	add	fp, #4
18278     A7 FC 61 FC | 	wrlong	result2, fp
1827c     04 4E 05 F1 | 	add	fp, #4
18280     A7 FE 61 FC | 	wrlong	result3, fp
18284     08 4E 85 F1 | 	sub	fp, #8
18288     A7 12 02 F6 | 	mov	arg01, fp
1828c     D8 D9 BF FD | 	call	#_converttoint
18290     FD 12 02 F6 | 	mov	arg01, result1
18294     20 12 CE F7 | 	test	arg01, #32 wz
18298     FF FB 01 56 |  if_ne	mov	result1, inb
1829c     FE FB 01 A6 |  if_e	mov	result1, ina
182a0     09 FB 41 F0 | 	shr	result1, arg01
182a4     06 12 46 F0 | 	shr	arg01, #6
182a8     09 FB 41 F7 | 	zerox	result1, arg01
182ac     5A 00 00 FF 
182b0     44 E4 05 F1 | 	add	objptr, ##46148
182b4     F2 FA 61 FC | 	wrlong	result1, objptr
182b8     5A 00 00 FF 
182bc     44 E4 85 F1 | 	sub	objptr, ##46148
182c0     08 4E 05 F1 | 	add	fp, #8
182c4     A7 3A 68 FC | 	wrlong	#29, fp
182c8     08 4E 85 F1 | 	sub	fp, #8
182cc     A7 08 68 FC | 	wrlong	#4, fp
182d0     A7 12 02 F6 | 	mov	arg01, fp
182d4     58 39 BF FD | 	call	#_push
182d8     A7 F0 03 F6 | 	mov	ptra, fp
182dc     B2 00 A0 FD | 	call	#popregs_
182e0                 | _do_pinread_ret
182e0     2D 00 64 FD | 	ret
182e4                 | 
182e4                 | ' 
182e4                 | ' sub do_gettime
182e4                 | _do_gettime
182e4     02 4A 05 F6 | 	mov	COUNT_, #2
182e8     A8 00 A0 FD | 	call	#pushregs_
182ec     14 F0 07 F1 | 	add	ptra, #20
182f0                 | ' 
182f0                 | ' const asm 
182f0     1A 1E 72 FD | 	getct	local01 wc
182f4     1A 20 62 FD | 	getct	local02
182f8                 | ' 
182f8                 | ' return hi1, lo1
182f8     10 FD 01 F6 | 	mov	result2, local02
182fc     A7 1E 62 FC | 	wrlong	local01, fp
18300     04 4E 05 F1 | 	add	fp, #4
18304     A7 FC 61 FC | 	wrlong	result2, fp
18308     0C 4E 05 F1 | 	add	fp, #12
1830c     A7 3A 68 FC | 	wrlong	#29, fp
18310     0C 4E 85 F1 | 	sub	fp, #12
18314     A7 12 02 FB | 	rdlong	arg01, fp
18318     04 4E 05 F1 | 	add	fp, #4
1831c     A7 12 62 FC | 	wrlong	arg01, fp
18320     08 4E 85 F1 | 	sub	fp, #8
18324     A7 12 02 FB | 	rdlong	arg01, fp
18328     0C 4E 05 F1 | 	add	fp, #12
1832c     A7 12 62 FC | 	wrlong	arg01, fp
18330     04 4E 85 F1 | 	sub	fp, #4
18334     A7 12 02 F6 | 	mov	arg01, fp
18338     08 4E 85 F1 | 	sub	fp, #8
1833c     F0 38 BF FD | 	call	#_push
18340     A7 F0 03 F6 | 	mov	ptra, fp
18344     B2 00 A0 FD | 	call	#popregs_
18348                 | _do_gettime_ret
18348     2D 00 64 FD | 	ret
1834c                 | 
1834c                 | '    
1834c                 | ' 
1834c                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
1834c                 | ' 
1834c                 | ' '' ----------------------------- Clear the screen
1834c                 | ' 
1834c                 | ' sub do_cls
1834c                 | _do_cls
1834c     37 00 00 FF 
18350     3C E4 05 F1 | 	add	objptr, ##28220
18354     F2 12 02 FB | 	rdlong	arg01, objptr
18358     04 E4 85 F1 | 	sub	objptr, #4
1835c     F2 14 02 FB | 	rdlong	arg02, objptr
18360     37 00 00 FF 
18364     38 E4 85 F1 | 	sub	objptr, ##28216
18368     14 6F B0 FD | 	call	#_hg010b_spin2_cls
1836c     37 00 00 FF 
18370     3C E4 05 F1 | 	add	objptr, ##28220
18374     F2 14 02 FB | 	rdlong	arg02, objptr
18378     14 E4 85 F1 | 	sub	objptr, #20
1837c     F2 14 62 FC | 	wrlong	arg02, objptr
18380     37 00 00 FF 
18384     28 E4 85 F1 | 	sub	objptr, ##28200
18388                 | _do_cls_ret
18388     2D 00 64 FD | 	ret
1838c                 | 
1838c                 | ' 
1838c                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
1838c                 | ' 
1838c                 | ' sub do_color
1838c                 | _do_color
1838c     03 4A 05 F6 | 	mov	COUNT_, #3
18390     A8 00 A0 FD | 	call	#pushregs_
18394     00 38 BF FD | 	call	#_pop
18398     FD 1E 02 F6 | 	mov	local01, result1
1839c     FE 20 02 F6 | 	mov	local02, result2
183a0     FF 22 02 F6 | 	mov	local03, result3
183a4     37 00 00 FF 
183a8     28 E4 05 F1 | 	add	objptr, ##28200
183ac     F2 1E 62 FC | 	wrlong	local01, objptr
183b0     37 00 00 FF 
183b4     28 E4 85 F1 | 	sub	objptr, ##28200
183b8     A7 F0 03 F6 | 	mov	ptra, fp
183bc     B2 00 A0 FD | 	call	#popregs_
183c0                 | _do_color_ret
183c0     2D 00 64 FD | 	ret
183c4                 | 
183c4                 | ' 
183c4                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
183c4                 | ' 
183c4                 | ' sub do_plot
183c4                 | _do_plot
183c4     00 4A 05 F6 | 	mov	COUNT_, #0
183c8     A8 00 A0 FD | 	call	#pushregs_
183cc     20 F0 07 F1 | 	add	ptra, #32
183d0     C4 37 BF FD | 	call	#_pop
183d4     FD 16 02 F6 | 	mov	arg03, result1
183d8     FE 14 02 F6 | 	mov	arg02, result2
183dc     FF 12 02 F6 | 	mov	arg01, result3
183e0     0C 4E 05 F1 | 	add	fp, #12
183e4     A7 16 62 FC | 	wrlong	arg03, fp
183e8     04 4E 05 F1 | 	add	fp, #4
183ec     A7 14 62 FC | 	wrlong	arg02, fp
183f0     04 4E 05 F1 | 	add	fp, #4
183f4     A7 12 62 FC | 	wrlong	arg01, fp
183f8     14 4E 85 F1 | 	sub	fp, #20
183fc     98 37 BF FD | 	call	#_pop
18400     FF 16 02 F6 | 	mov	arg03, result3
18404     A7 FA 61 FC | 	wrlong	result1, fp
18408     04 4E 05 F1 | 	add	fp, #4
1840c     A7 FC 61 FC | 	wrlong	result2, fp
18410     04 4E 05 F1 | 	add	fp, #4
18414     A7 16 62 FC | 	wrlong	arg03, fp
18418     08 4E 85 F1 | 	sub	fp, #8
1841c     A7 12 02 F6 | 	mov	arg01, fp
18420     44 D8 BF FD | 	call	#_converttoint
18424     18 4E 05 F1 | 	add	fp, #24
18428     A7 FA 61 FC | 	wrlong	result1, fp
1842c     0C 4E 85 F1 | 	sub	fp, #12
18430     A7 12 02 F6 | 	mov	arg01, fp
18434     0C 4E 85 F1 | 	sub	fp, #12
18438     2C D8 BF FD | 	call	#_converttoint
1843c     1C 4E 05 F1 | 	add	fp, #28
18440     A7 FA 61 FC | 	wrlong	result1, fp
18444     04 4E 85 F1 | 	sub	fp, #4
18448     A7 16 02 FB | 	rdlong	arg03, fp
1844c     37 00 00 FF 
18450     2C E4 05 F1 | 	add	objptr, ##28204
18454     F2 16 62 FC | 	wrlong	arg03, objptr
18458     04 4E 05 F1 | 	add	fp, #4
1845c     A7 14 02 FB | 	rdlong	arg02, fp
18460     1C 4E 85 F1 | 	sub	fp, #28
18464     04 E4 05 F1 | 	add	objptr, #4
18468     F2 14 62 FC | 	wrlong	arg02, objptr
1846c     04 E4 85 F1 | 	sub	objptr, #4
18470     F2 12 02 FB | 	rdlong	arg01, objptr
18474     04 E4 85 F1 | 	sub	objptr, #4
18478     F2 16 02 FB | 	rdlong	arg03, objptr
1847c     37 00 00 FF 
18480     28 E4 85 F1 | 	sub	objptr, ##28200
18484     24 61 B0 FD | 	call	#_hg010b_spin2_putpixel
18488     A7 F0 03 F6 | 	mov	ptra, fp
1848c     B2 00 A0 FD | 	call	#popregs_
18490                 | _do_plot_ret
18490     2D 00 64 FD | 	ret
18494                 | 
18494                 | ' 
18494                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
18494                 | ' 
18494                 | ' sub do_draw
18494                 | _do_draw
18494     00 4A 05 F6 | 	mov	COUNT_, #0
18498     A8 00 A0 FD | 	call	#pushregs_
1849c     20 F0 07 F1 | 	add	ptra, #32
184a0     F4 36 BF FD | 	call	#_pop
184a4     FD 1A 02 F6 | 	mov	arg05, result1
184a8     FE 18 02 F6 | 	mov	arg04, result2
184ac     FF 16 02 F6 | 	mov	arg03, result3
184b0     0C 4E 05 F1 | 	add	fp, #12
184b4     A7 1A 62 FC | 	wrlong	arg05, fp
184b8     04 4E 05 F1 | 	add	fp, #4
184bc     A7 18 62 FC | 	wrlong	arg04, fp
184c0     04 4E 05 F1 | 	add	fp, #4
184c4     A7 16 62 FC | 	wrlong	arg03, fp
184c8     14 4E 85 F1 | 	sub	fp, #20
184cc     C8 36 BF FD | 	call	#_pop
184d0     FF 1A 02 F6 | 	mov	arg05, result3
184d4     A7 FA 61 FC | 	wrlong	result1, fp
184d8     04 4E 05 F1 | 	add	fp, #4
184dc     A7 FC 61 FC | 	wrlong	result2, fp
184e0     04 4E 05 F1 | 	add	fp, #4
184e4     A7 1A 62 FC | 	wrlong	arg05, fp
184e8     08 4E 85 F1 | 	sub	fp, #8
184ec     A7 12 02 F6 | 	mov	arg01, fp
184f0     74 D7 BF FD | 	call	#_converttoint
184f4     18 4E 05 F1 | 	add	fp, #24
184f8     A7 FA 61 FC | 	wrlong	result1, fp
184fc     0C 4E 85 F1 | 	sub	fp, #12
18500     A7 12 02 F6 | 	mov	arg01, fp
18504     0C 4E 85 F1 | 	sub	fp, #12
18508     5C D7 BF FD | 	call	#_converttoint
1850c     1C 4E 05 F1 | 	add	fp, #28
18510     A7 FA 61 FC | 	wrlong	result1, fp
18514     37 00 00 FF 
18518     2C E4 05 F1 | 	add	objptr, ##28204
1851c     F2 12 02 FB | 	rdlong	arg01, objptr
18520     04 E4 05 F1 | 	add	objptr, #4
18524     F2 14 02 FB | 	rdlong	arg02, objptr
18528     04 4E 85 F1 | 	sub	fp, #4
1852c     A7 16 02 FB | 	rdlong	arg03, fp
18530     FD 18 02 F6 | 	mov	arg04, result1
18534     18 4E 85 F1 | 	sub	fp, #24
18538     08 E4 85 F1 | 	sub	objptr, #8
1853c     F2 1A 02 FB | 	rdlong	arg05, objptr
18540     37 00 00 FF 
18544     28 E4 85 F1 | 	sub	objptr, ##28200
18548     10 63 B0 FD | 	call	#_hg010b_spin2_draw
1854c     18 4E 05 F1 | 	add	fp, #24
18550     A7 1A 02 FB | 	rdlong	arg05, fp
18554     37 00 00 FF 
18558     2C E4 05 F1 | 	add	objptr, ##28204
1855c     F2 1A 62 FC | 	wrlong	arg05, objptr
18560     04 4E 05 F1 | 	add	fp, #4
18564     A7 1A 02 FB | 	rdlong	arg05, fp
18568     1C 4E 85 F1 | 	sub	fp, #28
1856c     04 E4 05 F1 | 	add	objptr, #4
18570     F2 1A 62 FC | 	wrlong	arg05, objptr
18574     37 00 00 FF 
18578     30 E4 85 F1 | 	sub	objptr, ##28208
1857c     A7 F0 03 F6 | 	mov	ptra, fp
18580     B2 00 A0 FD | 	call	#popregs_
18584                 | _do_draw_ret
18584     2D 00 64 FD | 	ret
18588                 | 
18588                 | ' 
18588                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
18588                 | ' 
18588                 | ' sub do_fcircle
18588                 | _do_fcircle
18588     02 4A 05 F6 | 	mov	COUNT_, #2
1858c     A8 00 A0 FD | 	call	#pushregs_
18590     24 F0 07 F1 | 	add	ptra, #36
18594     00 36 BF FD | 	call	#_pop
18598     FD 18 02 F6 | 	mov	arg04, result1
1859c     FE 16 02 F6 | 	mov	arg03, result2
185a0     FF 14 02 F6 | 	mov	arg02, result3
185a4     18 4E 05 F1 | 	add	fp, #24
185a8     A7 18 62 FC | 	wrlong	arg04, fp
185ac     04 4E 05 F1 | 	add	fp, #4
185b0     A7 16 62 FC | 	wrlong	arg03, fp
185b4     04 4E 05 F1 | 	add	fp, #4
185b8     A7 14 62 FC | 	wrlong	arg02, fp
185bc     20 4E 85 F1 | 	sub	fp, #32
185c0     D4 35 BF FD | 	call	#_pop
185c4     FD 18 02 F6 | 	mov	arg04, result1
185c8     FE 16 02 F6 | 	mov	arg03, result2
185cc     FF 1E 02 F6 | 	mov	local01, result3
185d0     0C 4E 05 F1 | 	add	fp, #12
185d4     A7 18 62 FC | 	wrlong	arg04, fp
185d8     04 4E 05 F1 | 	add	fp, #4
185dc     A7 16 62 FC | 	wrlong	arg03, fp
185e0     04 4E 05 F1 | 	add	fp, #4
185e4     A7 1E 62 FC | 	wrlong	local01, fp
185e8     14 4E 85 F1 | 	sub	fp, #20
185ec     A8 35 BF FD | 	call	#_pop
185f0     A7 FA 61 FC | 	wrlong	result1, fp
185f4     04 4E 05 F1 | 	add	fp, #4
185f8     A7 FC 61 FC | 	wrlong	result2, fp
185fc     04 4E 05 F1 | 	add	fp, #4
18600     A7 FE 61 FC | 	wrlong	result3, fp
18604                 | ' 
18604                 | ' t3=pop()
18604                 | ' t2=pop()
18604                 | ' t1=pop()
18604                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
18604     FF 18 02 F6 | 	mov	arg04, result3
18608     08 4E 85 F1 | 	sub	fp, #8
1860c     1C 18 0E F2 | 	cmp	arg04, #28 wz
18610     08 4E 05 51 |  if_ne	add	fp, #8
18614     A7 1E 02 5B |  if_ne	rdlong	local01, fp
18618     08 4E 85 51 |  if_ne	sub	fp, #8
1861c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
18620     7C 00 90 5D |  if_ne	jmp	#LR__1980
18624     14 4E 05 F1 | 	add	fp, #20
18628     A7 1E 02 FB | 	rdlong	local01, fp
1862c     14 4E 85 F1 | 	sub	fp, #20
18630     1C 1E 0E F2 | 	cmp	local01, #28 wz
18634     14 4E 05 51 |  if_ne	add	fp, #20
18638     A7 18 02 5B |  if_ne	rdlong	arg04, fp
1863c     14 4E 85 51 |  if_ne	sub	fp, #20
18640     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18644     58 00 90 5D |  if_ne	jmp	#LR__1980
18648     20 4E 05 F1 | 	add	fp, #32
1864c     A7 1E 02 FB | 	rdlong	local01, fp
18650     20 4E 85 F1 | 	sub	fp, #32
18654     1C 1E 0E F2 | 	cmp	local01, #28 wz
18658     20 4E 05 51 |  if_ne	add	fp, #32
1865c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18660     20 4E 85 51 |  if_ne	sub	fp, #32
18664     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18668     34 00 90 5D |  if_ne	jmp	#LR__1980
1866c     A7 12 02 FB | 	rdlong	arg01, fp
18670     0C 4E 05 F1 | 	add	fp, #12
18674     A7 14 02 FB | 	rdlong	arg02, fp
18678     0C 4E 05 F1 | 	add	fp, #12
1867c     A7 16 02 FB | 	rdlong	arg03, fp
18680     18 4E 85 F1 | 	sub	fp, #24
18684     37 00 00 FF 
18688     28 E4 05 F1 | 	add	objptr, ##28200
1868c     F2 18 02 FB | 	rdlong	arg04, objptr
18690     37 00 00 FF 
18694     28 E4 85 F1 | 	sub	objptr, ##28200
18698     44 66 B0 FD | 	call	#_hg010b_spin2_fcircle
1869c                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
1869c     54 00 90 FD | 	jmp	#LR__1981
186a0                 | LR__1980
186a0     A7 12 02 F6 | 	mov	arg01, fp
186a4     C0 D5 BF FD | 	call	#_converttoint
186a8     FD 1E 02 F6 | 	mov	local01, result1
186ac     0C 4E 05 F1 | 	add	fp, #12
186b0     A7 12 02 F6 | 	mov	arg01, fp
186b4     0C 4E 85 F1 | 	sub	fp, #12
186b8     AC D5 BF FD | 	call	#_converttoint
186bc     FD 20 02 F6 | 	mov	local02, result1
186c0     18 4E 05 F1 | 	add	fp, #24
186c4     A7 12 02 F6 | 	mov	arg01, fp
186c8     18 4E 85 F1 | 	sub	fp, #24
186cc     98 D5 BF FD | 	call	#_converttoint
186d0     FD 16 02 F6 | 	mov	arg03, result1
186d4     37 00 00 FF 
186d8     28 E4 05 F1 | 	add	objptr, ##28200
186dc     F2 18 02 FB | 	rdlong	arg04, objptr
186e0     37 00 00 FF 
186e4     28 E4 85 F1 | 	sub	objptr, ##28200
186e8     0F 13 02 F6 | 	mov	arg01, local01
186ec     10 15 02 F6 | 	mov	arg02, local02
186f0     EC 65 B0 FD | 	call	#_hg010b_spin2_fcircle
186f4                 | LR__1981
186f4     A7 F0 03 F6 | 	mov	ptra, fp
186f8     B2 00 A0 FD | 	call	#popregs_
186fc                 | _do_fcircle_ret
186fc     2D 00 64 FD | 	ret
18700                 | 
18700                 | ' 
18700                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
18700                 | ' 
18700                 | ' sub do_circle
18700                 | _do_circle
18700     02 4A 05 F6 | 	mov	COUNT_, #2
18704     A8 00 A0 FD | 	call	#pushregs_
18708     24 F0 07 F1 | 	add	ptra, #36
1870c     88 34 BF FD | 	call	#_pop
18710     FD 18 02 F6 | 	mov	arg04, result1
18714     FE 16 02 F6 | 	mov	arg03, result2
18718     FF 14 02 F6 | 	mov	arg02, result3
1871c     18 4E 05 F1 | 	add	fp, #24
18720     A7 18 62 FC | 	wrlong	arg04, fp
18724     04 4E 05 F1 | 	add	fp, #4
18728     A7 16 62 FC | 	wrlong	arg03, fp
1872c     04 4E 05 F1 | 	add	fp, #4
18730     A7 14 62 FC | 	wrlong	arg02, fp
18734     20 4E 85 F1 | 	sub	fp, #32
18738     5C 34 BF FD | 	call	#_pop
1873c     FD 18 02 F6 | 	mov	arg04, result1
18740     FE 16 02 F6 | 	mov	arg03, result2
18744     FF 1E 02 F6 | 	mov	local01, result3
18748     0C 4E 05 F1 | 	add	fp, #12
1874c     A7 18 62 FC | 	wrlong	arg04, fp
18750     04 4E 05 F1 | 	add	fp, #4
18754     A7 16 62 FC | 	wrlong	arg03, fp
18758     04 4E 05 F1 | 	add	fp, #4
1875c     A7 1E 62 FC | 	wrlong	local01, fp
18760     14 4E 85 F1 | 	sub	fp, #20
18764     30 34 BF FD | 	call	#_pop
18768     A7 FA 61 FC | 	wrlong	result1, fp
1876c     04 4E 05 F1 | 	add	fp, #4
18770     A7 FC 61 FC | 	wrlong	result2, fp
18774     04 4E 05 F1 | 	add	fp, #4
18778     A7 FE 61 FC | 	wrlong	result3, fp
1877c                 | ' 
1877c                 | ' t3=pop()
1877c                 | ' t2=pop()
1877c                 | ' t1=pop()
1877c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
1877c     FF 18 02 F6 | 	mov	arg04, result3
18780     08 4E 85 F1 | 	sub	fp, #8
18784     1C 18 0E F2 | 	cmp	arg04, #28 wz
18788     08 4E 05 51 |  if_ne	add	fp, #8
1878c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
18790     08 4E 85 51 |  if_ne	sub	fp, #8
18794     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
18798     7C 00 90 5D |  if_ne	jmp	#LR__1990
1879c     14 4E 05 F1 | 	add	fp, #20
187a0     A7 1E 02 FB | 	rdlong	local01, fp
187a4     14 4E 85 F1 | 	sub	fp, #20
187a8     1C 1E 0E F2 | 	cmp	local01, #28 wz
187ac     14 4E 05 51 |  if_ne	add	fp, #20
187b0     A7 18 02 5B |  if_ne	rdlong	arg04, fp
187b4     14 4E 85 51 |  if_ne	sub	fp, #20
187b8     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
187bc     58 00 90 5D |  if_ne	jmp	#LR__1990
187c0     20 4E 05 F1 | 	add	fp, #32
187c4     A7 1E 02 FB | 	rdlong	local01, fp
187c8     20 4E 85 F1 | 	sub	fp, #32
187cc     1C 1E 0E F2 | 	cmp	local01, #28 wz
187d0     20 4E 05 51 |  if_ne	add	fp, #32
187d4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
187d8     20 4E 85 51 |  if_ne	sub	fp, #32
187dc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
187e0     34 00 90 5D |  if_ne	jmp	#LR__1990
187e4     A7 12 02 FB | 	rdlong	arg01, fp
187e8     0C 4E 05 F1 | 	add	fp, #12
187ec     A7 14 02 FB | 	rdlong	arg02, fp
187f0     0C 4E 05 F1 | 	add	fp, #12
187f4     A7 16 02 FB | 	rdlong	arg03, fp
187f8     18 4E 85 F1 | 	sub	fp, #24
187fc     37 00 00 FF 
18800     28 E4 05 F1 | 	add	objptr, ##28200
18804     F2 18 02 FB | 	rdlong	arg04, objptr
18808     37 00 00 FF 
1880c     28 E4 85 F1 | 	sub	objptr, ##28200
18810     D8 65 B0 FD | 	call	#_hg010b_spin2_circle
18814                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
18814     54 00 90 FD | 	jmp	#LR__1991
18818                 | LR__1990
18818     A7 12 02 F6 | 	mov	arg01, fp
1881c     48 D4 BF FD | 	call	#_converttoint
18820     FD 1E 02 F6 | 	mov	local01, result1
18824     0C 4E 05 F1 | 	add	fp, #12
18828     A7 12 02 F6 | 	mov	arg01, fp
1882c     0C 4E 85 F1 | 	sub	fp, #12
18830     34 D4 BF FD | 	call	#_converttoint
18834     FD 20 02 F6 | 	mov	local02, result1
18838     18 4E 05 F1 | 	add	fp, #24
1883c     A7 12 02 F6 | 	mov	arg01, fp
18840     18 4E 85 F1 | 	sub	fp, #24
18844     20 D4 BF FD | 	call	#_converttoint
18848     FD 16 02 F6 | 	mov	arg03, result1
1884c     37 00 00 FF 
18850     28 E4 05 F1 | 	add	objptr, ##28200
18854     F2 18 02 FB | 	rdlong	arg04, objptr
18858     37 00 00 FF 
1885c     28 E4 85 F1 | 	sub	objptr, ##28200
18860     0F 13 02 F6 | 	mov	arg01, local01
18864     10 15 02 F6 | 	mov	arg02, local02
18868     80 65 B0 FD | 	call	#_hg010b_spin2_circle
1886c                 | LR__1991
1886c     A7 F0 03 F6 | 	mov	ptra, fp
18870     B2 00 A0 FD | 	call	#popregs_
18874                 | _do_circle_ret
18874     2D 00 64 FD | 	ret
18878                 | 
18878                 | ' 
18878                 | ' ' -------------------------- Draw a rectangle
18878                 | ' 
18878                 | ' sub do_box
18878                 | _do_box
18878     03 4A 05 F6 | 	mov	COUNT_, #3
1887c     A8 00 A0 FD | 	call	#pushregs_
18880     30 F0 07 F1 | 	add	ptra, #48
18884     10 33 BF FD | 	call	#_pop
18888     FD 1A 02 F6 | 	mov	arg05, result1
1888c     FE 18 02 F6 | 	mov	arg04, result2
18890     FF 16 02 F6 | 	mov	arg03, result3
18894     24 4E 05 F1 | 	add	fp, #36
18898     A7 1A 62 FC | 	wrlong	arg05, fp
1889c     04 4E 05 F1 | 	add	fp, #4
188a0     A7 18 62 FC | 	wrlong	arg04, fp
188a4     04 4E 05 F1 | 	add	fp, #4
188a8     A7 16 62 FC | 	wrlong	arg03, fp
188ac     2C 4E 85 F1 | 	sub	fp, #44
188b0     E4 32 BF FD | 	call	#_pop
188b4     FD 1A 02 F6 | 	mov	arg05, result1
188b8     FE 18 02 F6 | 	mov	arg04, result2
188bc     FF 16 02 F6 | 	mov	arg03, result3
188c0     18 4E 05 F1 | 	add	fp, #24
188c4     A7 1A 62 FC | 	wrlong	arg05, fp
188c8     04 4E 05 F1 | 	add	fp, #4
188cc     A7 18 62 FC | 	wrlong	arg04, fp
188d0     04 4E 05 F1 | 	add	fp, #4
188d4     A7 16 62 FC | 	wrlong	arg03, fp
188d8     20 4E 85 F1 | 	sub	fp, #32
188dc     B8 32 BF FD | 	call	#_pop
188e0     FD 1A 02 F6 | 	mov	arg05, result1
188e4     FE 18 02 F6 | 	mov	arg04, result2
188e8     FF 1E 02 F6 | 	mov	local01, result3
188ec     0C 4E 05 F1 | 	add	fp, #12
188f0     A7 1A 62 FC | 	wrlong	arg05, fp
188f4     04 4E 05 F1 | 	add	fp, #4
188f8     A7 18 62 FC | 	wrlong	arg04, fp
188fc     04 4E 05 F1 | 	add	fp, #4
18900     A7 1E 62 FC | 	wrlong	local01, fp
18904     14 4E 85 F1 | 	sub	fp, #20
18908     8C 32 BF FD | 	call	#_pop
1890c     A7 FA 61 FC | 	wrlong	result1, fp
18910     04 4E 05 F1 | 	add	fp, #4
18914     A7 FC 61 FC | 	wrlong	result2, fp
18918     04 4E 05 F1 | 	add	fp, #4
1891c     A7 FE 61 FC | 	wrlong	result3, fp
18920                 | ' 
18920                 | ' t4=pop()
18920                 | ' t3=pop()
18920                 | ' t2=pop()
18920                 | ' t1=pop()
18920                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
18920     FF 1A 02 F6 | 	mov	arg05, result3
18924     08 4E 85 F1 | 	sub	fp, #8
18928     1C 1A 0E F2 | 	cmp	arg05, #28 wz
1892c     08 4E 05 51 |  if_ne	add	fp, #8
18930     A7 1E 02 5B |  if_ne	rdlong	local01, fp
18934     08 4E 85 51 |  if_ne	sub	fp, #8
18938     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
1893c     A8 00 90 5D |  if_ne	jmp	#LR__2000
18940     14 4E 05 F1 | 	add	fp, #20
18944     A7 1E 02 FB | 	rdlong	local01, fp
18948     14 4E 85 F1 | 	sub	fp, #20
1894c     1C 1E 0E F2 | 	cmp	local01, #28 wz
18950     14 4E 05 51 |  if_ne	add	fp, #20
18954     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18958     14 4E 85 51 |  if_ne	sub	fp, #20
1895c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18960     84 00 90 5D |  if_ne	jmp	#LR__2000
18964     20 4E 05 F1 | 	add	fp, #32
18968     A7 1E 02 FB | 	rdlong	local01, fp
1896c     20 4E 85 F1 | 	sub	fp, #32
18970     1C 1E 0E F2 | 	cmp	local01, #28 wz
18974     20 4E 05 51 |  if_ne	add	fp, #32
18978     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
1897c     20 4E 85 51 |  if_ne	sub	fp, #32
18980     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18984     60 00 90 5D |  if_ne	jmp	#LR__2000
18988     2C 4E 05 F1 | 	add	fp, #44
1898c     A7 1E 02 FB | 	rdlong	local01, fp
18990     2C 4E 85 F1 | 	sub	fp, #44
18994     1C 1E 0E F2 | 	cmp	local01, #28 wz
18998     2C 4E 05 51 |  if_ne	add	fp, #44
1899c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
189a0     2C 4E 85 51 |  if_ne	sub	fp, #44
189a4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
189a8     3C 00 90 5D |  if_ne	jmp	#LR__2000
189ac     A7 12 02 FB | 	rdlong	arg01, fp
189b0     0C 4E 05 F1 | 	add	fp, #12
189b4     A7 14 02 FB | 	rdlong	arg02, fp
189b8     0C 4E 05 F1 | 	add	fp, #12
189bc     A7 16 02 FB | 	rdlong	arg03, fp
189c0     0C 4E 05 F1 | 	add	fp, #12
189c4     A7 18 02 FB | 	rdlong	arg04, fp
189c8     24 4E 85 F1 | 	sub	fp, #36
189cc     37 00 00 FF 
189d0     28 E4 05 F1 | 	add	objptr, ##28200
189d4     F2 1A 02 FB | 	rdlong	arg05, objptr
189d8     37 00 00 FF 
189dc     28 E4 85 F1 | 	sub	objptr, ##28200
189e0     D4 65 B0 FD | 	call	#_hg010b_spin2_box
189e4                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
189e4     6C 00 90 FD | 	jmp	#LR__2001
189e8                 | LR__2000
189e8     A7 12 02 F6 | 	mov	arg01, fp
189ec     78 D2 BF FD | 	call	#_converttoint
189f0     FD 20 02 F6 | 	mov	local02, result1
189f4     0C 4E 05 F1 | 	add	fp, #12
189f8     A7 12 02 F6 | 	mov	arg01, fp
189fc     0C 4E 85 F1 | 	sub	fp, #12
18a00     64 D2 BF FD | 	call	#_converttoint
18a04     FD 22 02 F6 | 	mov	local03, result1
18a08     18 4E 05 F1 | 	add	fp, #24
18a0c     A7 12 02 F6 | 	mov	arg01, fp
18a10     18 4E 85 F1 | 	sub	fp, #24
18a14     50 D2 BF FD | 	call	#_converttoint
18a18     FD 1E 02 F6 | 	mov	local01, result1
18a1c     24 4E 05 F1 | 	add	fp, #36
18a20     A7 12 02 F6 | 	mov	arg01, fp
18a24     24 4E 85 F1 | 	sub	fp, #36
18a28     3C D2 BF FD | 	call	#_converttoint
18a2c     FD 18 02 F6 | 	mov	arg04, result1
18a30     37 00 00 FF 
18a34     28 E4 05 F1 | 	add	objptr, ##28200
18a38     F2 1A 02 FB | 	rdlong	arg05, objptr
18a3c     37 00 00 FF 
18a40     28 E4 85 F1 | 	sub	objptr, ##28200
18a44     10 13 02 F6 | 	mov	arg01, local02
18a48     11 15 02 F6 | 	mov	arg02, local03
18a4c     0F 17 02 F6 | 	mov	arg03, local01
18a50     64 65 B0 FD | 	call	#_hg010b_spin2_box
18a54                 | LR__2001
18a54     A7 F0 03 F6 | 	mov	ptra, fp
18a58     B2 00 A0 FD | 	call	#popregs_
18a5c                 | _do_box_ret
18a5c     2D 00 64 FD | 	ret
18a60                 | 
18a60                 | ' 
18a60                 | ' sub do_fill
18a60                 | _do_fill
18a60     03 4A 05 F6 | 	mov	COUNT_, #3
18a64     A8 00 A0 FD | 	call	#pushregs_
18a68     30 F0 07 F1 | 	add	ptra, #48
18a6c     28 31 BF FD | 	call	#_pop
18a70     FD 18 02 F6 | 	mov	arg04, result1
18a74     FE 16 02 F6 | 	mov	arg03, result2
18a78     FF 14 02 F6 | 	mov	arg02, result3
18a7c     24 4E 05 F1 | 	add	fp, #36
18a80     A7 18 62 FC | 	wrlong	arg04, fp
18a84     04 4E 05 F1 | 	add	fp, #4
18a88     A7 16 62 FC | 	wrlong	arg03, fp
18a8c     04 4E 05 F1 | 	add	fp, #4
18a90     A7 14 62 FC | 	wrlong	arg02, fp
18a94     2C 4E 85 F1 | 	sub	fp, #44
18a98     FC 30 BF FD | 	call	#_pop
18a9c     FD 18 02 F6 | 	mov	arg04, result1
18aa0     FE 16 02 F6 | 	mov	arg03, result2
18aa4     FF 14 02 F6 | 	mov	arg02, result3
18aa8     18 4E 05 F1 | 	add	fp, #24
18aac     A7 18 62 FC | 	wrlong	arg04, fp
18ab0     04 4E 05 F1 | 	add	fp, #4
18ab4     A7 16 62 FC | 	wrlong	arg03, fp
18ab8     04 4E 05 F1 | 	add	fp, #4
18abc     A7 14 62 FC | 	wrlong	arg02, fp
18ac0     20 4E 85 F1 | 	sub	fp, #32
18ac4     D0 30 BF FD | 	call	#_pop
18ac8     FD 18 02 F6 | 	mov	arg04, result1
18acc     FE 16 02 F6 | 	mov	arg03, result2
18ad0     FF 1E 02 F6 | 	mov	local01, result3
18ad4     0C 4E 05 F1 | 	add	fp, #12
18ad8     A7 18 62 FC | 	wrlong	arg04, fp
18adc     04 4E 05 F1 | 	add	fp, #4
18ae0     A7 16 62 FC | 	wrlong	arg03, fp
18ae4     04 4E 05 F1 | 	add	fp, #4
18ae8     A7 1E 62 FC | 	wrlong	local01, fp
18aec     14 4E 85 F1 | 	sub	fp, #20
18af0     A4 30 BF FD | 	call	#_pop
18af4     A7 FA 61 FC | 	wrlong	result1, fp
18af8     04 4E 05 F1 | 	add	fp, #4
18afc     A7 FC 61 FC | 	wrlong	result2, fp
18b00     04 4E 05 F1 | 	add	fp, #4
18b04     A7 FE 61 FC | 	wrlong	result3, fp
18b08                 | ' 
18b08                 | ' t4=pop()
18b08                 | ' t3=pop()
18b08                 | ' t2=pop()
18b08                 | ' t1=pop()
18b08                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
18b08     FF 18 02 F6 | 	mov	arg04, result3
18b0c     08 4E 85 F1 | 	sub	fp, #8
18b10     1C 18 0E F2 | 	cmp	arg04, #28 wz
18b14     08 4E 05 51 |  if_ne	add	fp, #8
18b18     A7 1E 02 5B |  if_ne	rdlong	local01, fp
18b1c     08 4E 85 51 |  if_ne	sub	fp, #8
18b20     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
18b24     94 00 90 5D |  if_ne	jmp	#LR__2010
18b28     14 4E 05 F1 | 	add	fp, #20
18b2c     A7 1E 02 FB | 	rdlong	local01, fp
18b30     14 4E 85 F1 | 	sub	fp, #20
18b34     1C 1E 0E F2 | 	cmp	local01, #28 wz
18b38     14 4E 05 51 |  if_ne	add	fp, #20
18b3c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18b40     14 4E 85 51 |  if_ne	sub	fp, #20
18b44     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18b48     70 00 90 5D |  if_ne	jmp	#LR__2010
18b4c     20 4E 05 F1 | 	add	fp, #32
18b50     A7 1E 02 FB | 	rdlong	local01, fp
18b54     20 4E 85 F1 | 	sub	fp, #32
18b58     1C 1E 0E F2 | 	cmp	local01, #28 wz
18b5c     20 4E 05 51 |  if_ne	add	fp, #32
18b60     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18b64     20 4E 85 51 |  if_ne	sub	fp, #32
18b68     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18b6c     4C 00 90 5D |  if_ne	jmp	#LR__2010
18b70     2C 4E 05 F1 | 	add	fp, #44
18b74     A7 1E 02 FB | 	rdlong	local01, fp
18b78     2C 4E 85 F1 | 	sub	fp, #44
18b7c     1C 1E 0E F2 | 	cmp	local01, #28 wz
18b80     2C 4E 05 51 |  if_ne	add	fp, #44
18b84     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18b88     2C 4E 85 51 |  if_ne	sub	fp, #44
18b8c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18b90     28 00 90 5D |  if_ne	jmp	#LR__2010
18b94     A7 12 02 FB | 	rdlong	arg01, fp
18b98     0C 4E 05 F1 | 	add	fp, #12
18b9c     A7 14 02 FB | 	rdlong	arg02, fp
18ba0     0C 4E 05 F1 | 	add	fp, #12
18ba4     A7 16 02 FB | 	rdlong	arg03, fp
18ba8     0C 4E 05 F1 | 	add	fp, #12
18bac     A7 18 02 FB | 	rdlong	arg04, fp
18bb0     24 4E 85 F1 | 	sub	fp, #36
18bb4     94 5E B0 FD | 	call	#_hg010b_spin2_fill
18bb8                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
18bb8     58 00 90 FD | 	jmp	#LR__2011
18bbc                 | LR__2010
18bbc     A7 12 02 F6 | 	mov	arg01, fp
18bc0     A4 D0 BF FD | 	call	#_converttoint
18bc4     FD 20 02 F6 | 	mov	local02, result1
18bc8     0C 4E 05 F1 | 	add	fp, #12
18bcc     A7 12 02 F6 | 	mov	arg01, fp
18bd0     0C 4E 85 F1 | 	sub	fp, #12
18bd4     90 D0 BF FD | 	call	#_converttoint
18bd8     FD 22 02 F6 | 	mov	local03, result1
18bdc     18 4E 05 F1 | 	add	fp, #24
18be0     A7 12 02 F6 | 	mov	arg01, fp
18be4     18 4E 85 F1 | 	sub	fp, #24
18be8     7C D0 BF FD | 	call	#_converttoint
18bec     FD 1E 02 F6 | 	mov	local01, result1
18bf0     24 4E 05 F1 | 	add	fp, #36
18bf4     A7 12 02 F6 | 	mov	arg01, fp
18bf8     24 4E 85 F1 | 	sub	fp, #36
18bfc     68 D0 BF FD | 	call	#_converttoint
18c00     FD 18 02 F6 | 	mov	arg04, result1
18c04     10 13 02 F6 | 	mov	arg01, local02
18c08     11 15 02 F6 | 	mov	arg02, local03
18c0c     0F 17 02 F6 | 	mov	arg03, local01
18c10     38 5E B0 FD | 	call	#_hg010b_spin2_fill
18c14                 | LR__2011
18c14     A7 F0 03 F6 | 	mov	ptra, fp
18c18     B2 00 A0 FD | 	call	#popregs_
18c1c                 | _do_fill_ret
18c1c     2D 00 64 FD | 	ret
18c20                 | 
18c20                 | ' 
18c20                 | ' ' -------------------------- Draw a frane
18c20                 | ' 
18c20                 | ' sub do_frame
18c20                 | _do_frame
18c20     03 4A 05 F6 | 	mov	COUNT_, #3
18c24     A8 00 A0 FD | 	call	#pushregs_
18c28     30 F0 07 F1 | 	add	ptra, #48
18c2c     68 2F BF FD | 	call	#_pop
18c30     FD 1A 02 F6 | 	mov	arg05, result1
18c34     FE 18 02 F6 | 	mov	arg04, result2
18c38     FF 16 02 F6 | 	mov	arg03, result3
18c3c     24 4E 05 F1 | 	add	fp, #36
18c40     A7 1A 62 FC | 	wrlong	arg05, fp
18c44     04 4E 05 F1 | 	add	fp, #4
18c48     A7 18 62 FC | 	wrlong	arg04, fp
18c4c     04 4E 05 F1 | 	add	fp, #4
18c50     A7 16 62 FC | 	wrlong	arg03, fp
18c54     2C 4E 85 F1 | 	sub	fp, #44
18c58     3C 2F BF FD | 	call	#_pop
18c5c     FD 1A 02 F6 | 	mov	arg05, result1
18c60     FE 18 02 F6 | 	mov	arg04, result2
18c64     FF 16 02 F6 | 	mov	arg03, result3
18c68     18 4E 05 F1 | 	add	fp, #24
18c6c     A7 1A 62 FC | 	wrlong	arg05, fp
18c70     04 4E 05 F1 | 	add	fp, #4
18c74     A7 18 62 FC | 	wrlong	arg04, fp
18c78     04 4E 05 F1 | 	add	fp, #4
18c7c     A7 16 62 FC | 	wrlong	arg03, fp
18c80     20 4E 85 F1 | 	sub	fp, #32
18c84     10 2F BF FD | 	call	#_pop
18c88     FD 1A 02 F6 | 	mov	arg05, result1
18c8c     FE 18 02 F6 | 	mov	arg04, result2
18c90     FF 1E 02 F6 | 	mov	local01, result3
18c94     0C 4E 05 F1 | 	add	fp, #12
18c98     A7 1A 62 FC | 	wrlong	arg05, fp
18c9c     04 4E 05 F1 | 	add	fp, #4
18ca0     A7 18 62 FC | 	wrlong	arg04, fp
18ca4     04 4E 05 F1 | 	add	fp, #4
18ca8     A7 1E 62 FC | 	wrlong	local01, fp
18cac     14 4E 85 F1 | 	sub	fp, #20
18cb0     E4 2E BF FD | 	call	#_pop
18cb4     A7 FA 61 FC | 	wrlong	result1, fp
18cb8     04 4E 05 F1 | 	add	fp, #4
18cbc     A7 FC 61 FC | 	wrlong	result2, fp
18cc0     04 4E 05 F1 | 	add	fp, #4
18cc4     A7 FE 61 FC | 	wrlong	result3, fp
18cc8                 | ' 
18cc8                 | ' t4=pop()
18cc8                 | ' t3=pop()
18cc8                 | ' t2=pop()
18cc8                 | ' t1=pop()
18cc8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
18cc8     FF 1A 02 F6 | 	mov	arg05, result3
18ccc     08 4E 85 F1 | 	sub	fp, #8
18cd0     1C 1A 0E F2 | 	cmp	arg05, #28 wz
18cd4     08 4E 05 51 |  if_ne	add	fp, #8
18cd8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
18cdc     08 4E 85 51 |  if_ne	sub	fp, #8
18ce0     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
18ce4     A8 00 90 5D |  if_ne	jmp	#LR__2020
18ce8     14 4E 05 F1 | 	add	fp, #20
18cec     A7 1E 02 FB | 	rdlong	local01, fp
18cf0     14 4E 85 F1 | 	sub	fp, #20
18cf4     1C 1E 0E F2 | 	cmp	local01, #28 wz
18cf8     14 4E 05 51 |  if_ne	add	fp, #20
18cfc     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18d00     14 4E 85 51 |  if_ne	sub	fp, #20
18d04     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18d08     84 00 90 5D |  if_ne	jmp	#LR__2020
18d0c     20 4E 05 F1 | 	add	fp, #32
18d10     A7 1E 02 FB | 	rdlong	local01, fp
18d14     20 4E 85 F1 | 	sub	fp, #32
18d18     1C 1E 0E F2 | 	cmp	local01, #28 wz
18d1c     20 4E 05 51 |  if_ne	add	fp, #32
18d20     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18d24     20 4E 85 51 |  if_ne	sub	fp, #32
18d28     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18d2c     60 00 90 5D |  if_ne	jmp	#LR__2020
18d30     2C 4E 05 F1 | 	add	fp, #44
18d34     A7 1E 02 FB | 	rdlong	local01, fp
18d38     2C 4E 85 F1 | 	sub	fp, #44
18d3c     1C 1E 0E F2 | 	cmp	local01, #28 wz
18d40     2C 4E 05 51 |  if_ne	add	fp, #44
18d44     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18d48     2C 4E 85 51 |  if_ne	sub	fp, #44
18d4c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18d50     3C 00 90 5D |  if_ne	jmp	#LR__2020
18d54     A7 12 02 FB | 	rdlong	arg01, fp
18d58     0C 4E 05 F1 | 	add	fp, #12
18d5c     A7 14 02 FB | 	rdlong	arg02, fp
18d60     0C 4E 05 F1 | 	add	fp, #12
18d64     A7 16 02 FB | 	rdlong	arg03, fp
18d68     0C 4E 05 F1 | 	add	fp, #12
18d6c     A7 18 02 FB | 	rdlong	arg04, fp
18d70     24 4E 85 F1 | 	sub	fp, #36
18d74     37 00 00 FF 
18d78     28 E4 05 F1 | 	add	objptr, ##28200
18d7c     F2 1A 02 FB | 	rdlong	arg05, objptr
18d80     37 00 00 FF 
18d84     28 E4 85 F1 | 	sub	objptr, ##28200
18d88     AC 61 B0 FD | 	call	#_hg010b_spin2_frame
18d8c                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
18d8c     6C 00 90 FD | 	jmp	#LR__2021
18d90                 | LR__2020
18d90     A7 12 02 F6 | 	mov	arg01, fp
18d94     D0 CE BF FD | 	call	#_converttoint
18d98     FD 20 02 F6 | 	mov	local02, result1
18d9c     0C 4E 05 F1 | 	add	fp, #12
18da0     A7 12 02 F6 | 	mov	arg01, fp
18da4     0C 4E 85 F1 | 	sub	fp, #12
18da8     BC CE BF FD | 	call	#_converttoint
18dac     FD 22 02 F6 | 	mov	local03, result1
18db0     18 4E 05 F1 | 	add	fp, #24
18db4     A7 12 02 F6 | 	mov	arg01, fp
18db8     18 4E 85 F1 | 	sub	fp, #24
18dbc     A8 CE BF FD | 	call	#_converttoint
18dc0     FD 1E 02 F6 | 	mov	local01, result1
18dc4     24 4E 05 F1 | 	add	fp, #36
18dc8     A7 12 02 F6 | 	mov	arg01, fp
18dcc     24 4E 85 F1 | 	sub	fp, #36
18dd0     94 CE BF FD | 	call	#_converttoint
18dd4     FD 18 02 F6 | 	mov	arg04, result1
18dd8     37 00 00 FF 
18ddc     28 E4 05 F1 | 	add	objptr, ##28200
18de0     F2 1A 02 FB | 	rdlong	arg05, objptr
18de4     37 00 00 FF 
18de8     28 E4 85 F1 | 	sub	objptr, ##28200
18dec     10 13 02 F6 | 	mov	arg01, local02
18df0     11 15 02 F6 | 	mov	arg02, local03
18df4     0F 17 02 F6 | 	mov	arg03, local01
18df8     3C 61 B0 FD | 	call	#_hg010b_spin2_frame
18dfc                 | LR__2021
18dfc     A7 F0 03 F6 | 	mov	ptra, fp
18e00     B2 00 A0 FD | 	call	#popregs_
18e04                 | _do_frame_ret
18e04     2D 00 64 FD | 	ret
18e08                 | 
18e08                 | ' 
18e08                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
18e08                 | ' 
18e08                 | ' ' ------------------------- Print to the screem
18e08                 | ' 
18e08                 | ' sub do_print  
18e08                 | _do_print
18e08     0B 4A 05 F6 | 	mov	COUNT_, #11
18e0c     A8 00 A0 FD | 	call	#pushregs_
18e10     00 24 06 F6 | 	mov	local04, #0
18e14     80 2D BF FD | 	call	#_pop
18e18     FD 26 02 F6 | 	mov	local05, result1
18e1c     FE 28 02 F6 | 	mov	local06, result2
18e20     FF 2A 02 F6 | 	mov	local07, result3
18e24     13 1F 02 F6 | 	mov	local01, local05
18e28     14 21 02 F6 | 	mov	local02, local06
18e2c     15 23 02 F6 | 	mov	local03, local07
18e30                 | '  
18e30                 | ' r=0
18e30                 | ' t1=pop() 
18e30                 | ' 'print t1.result_type,t1.result.uresult
18e30                 | ' 
18e30                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
18e30     21 22 0E F2 | 	cmp	local03, #33 wz
18e34     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
18e38     20 00 90 5D |  if_ne	jmp	#LR__2030
18e3c     11 25 02 F6 | 	mov	local04, local03
18e40     54 2D BF FD | 	call	#_pop
18e44     FD 26 02 F6 | 	mov	local05, result1
18e48     FE 28 02 F6 | 	mov	local06, result2
18e4c     FF 2A 02 F6 | 	mov	local07, result3
18e50     13 1F 02 F6 | 	mov	local01, local05
18e54     14 21 02 F6 | 	mov	local02, local06
18e58     15 23 02 F6 | 	mov	local03, local07
18e5c                 | LR__2030
18e5c                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
18e5c     20 22 0E F2 | 	cmp	local03, #32 wz
18e60     11 25 02 A6 |  if_e	mov	local04, local03
18e64                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
18e64     FF 22 0E F2 | 	cmp	local03, #255 wz
18e68     0C 00 90 5D |  if_ne	jmp	#LR__2031
18e6c     0F 13 02 F6 | 	mov	arg01, local01
18e70     50 47 B0 FD | 	call	#_printerror
18e74     D4 04 90 FD | 	jmp	#LR__2050
18e78                 | LR__2031
18e78                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
18e78     2B 22 0E F2 | 	cmp	local03, #43 wz
18e7c     14 00 90 5D |  if_ne	jmp	#LR__2032
18e80     0F 13 02 F6 | 	mov	arg01, local01
18e84     BC 85 BF FD | 	call	#_convertstring
18e88     FD 26 02 F6 | 	mov	local05, result1
18e8c     13 1F 02 F6 | 	mov	local01, local05
18e90     1F 22 06 F6 | 	mov	local03, #31
18e94                 | LR__2032
18e94                 | ' 
18e94                 | ' if t1.result_type=token_channel then print "Print to channel "; t1.result.iresult : t1=pop()
18e94     2C 22 0E F2 | 	cmp	local03, #44 wz
18e98     80 00 90 5D |  if_ne	jmp	#LR__2033
18e9c     00 12 06 F6 | 	mov	arg01, #0
18ea0     C4 D4 B0 FD | 	call	#__system___getiolock_0540
18ea4     FD 12 02 F6 | 	mov	arg01, result1
18ea8     7C 7A B0 FD | 	call	#__system___lockmem
18eac     84 01 00 FF 
18eb0     9F 15 06 F6 | 	mov	arg02, ##@LR__5454
18eb4     00 12 06 F6 | 	mov	arg01, #0
18eb8     00 16 06 F6 | 	mov	arg03, #0
18ebc     5C 87 B0 FD | 	call	#__system___basic_print_string
18ec0     0A 2C 06 F6 | 	mov	local08, #10
18ec4     00 12 06 F6 | 	mov	arg01, #0
18ec8     0F 15 02 F6 | 	mov	arg02, local01
18ecc     00 16 06 F6 | 	mov	arg03, #0
18ed0     0A 18 06 F6 | 	mov	arg04, #10
18ed4     88 87 B0 FD | 	call	#__system___basic_print_integer
18ed8     FD 2E 02 F6 | 	mov	local09, result1
18edc     00 12 06 F6 | 	mov	arg01, #0
18ee0     0A 14 06 F6 | 	mov	arg02, #10
18ee4     00 16 06 F6 | 	mov	arg03, #0
18ee8     D8 86 B0 FD | 	call	#__system___basic_print_char
18eec     01 30 06 F6 | 	mov	local10, #1
18ef0     00 12 06 F6 | 	mov	arg01, #0
18ef4     70 D4 B0 FD | 	call	#__system___getiolock_0540
18ef8     FD 00 68 FC | 	wrlong	#0, result1
18efc     00 32 06 F6 | 	mov	local11, #0
18f00     94 2C BF FD | 	call	#_pop
18f04     FD 26 02 F6 | 	mov	local05, result1
18f08     FE 28 02 F6 | 	mov	local06, result2
18f0c     FF 2A 02 F6 | 	mov	local07, result3
18f10     13 1F 02 F6 | 	mov	local01, local05
18f14     14 21 02 F6 | 	mov	local02, local06
18f18     15 23 02 F6 | 	mov	local03, local07
18f1c                 | LR__2033
18f1c                 | ' 
18f1c                 | ' if r=print_mod_comma  then
18f1c     21 24 0E F2 | 	cmp	local04, #33 wz
18f20     AC 01 90 5D |  if_ne	jmp	#LR__2038
18f24                 | '   if t1.result_type=result_int then print t1.result.iresult,
18f24     1C 22 0E F2 | 	cmp	local03, #28 wz
18f28     64 00 90 5D |  if_ne	jmp	#LR__2034
18f2c     00 12 06 F6 | 	mov	arg01, #0
18f30     34 D4 B0 FD | 	call	#__system___getiolock_0540
18f34     FD 12 02 F6 | 	mov	arg01, result1
18f38     EC 79 B0 FD | 	call	#__system___lockmem
18f3c     00 28 06 F6 | 	mov	local06, #0
18f40     00 12 06 F6 | 	mov	arg01, #0
18f44     0F 15 02 F6 | 	mov	arg02, local01
18f48     00 16 06 F6 | 	mov	arg03, #0
18f4c     0A 18 06 F6 | 	mov	arg04, #10
18f50     0C 87 B0 FD | 	call	#__system___basic_print_integer
18f54     FD 2A 02 F6 | 	mov	local07, result1
18f58     14 27 02 F6 | 	mov	local05, local06
18f5c     15 27 02 F1 | 	add	local05, local07
18f60     00 32 06 F6 | 	mov	local11, #0
18f64     00 12 06 F6 | 	mov	arg01, #0
18f68     09 14 06 F6 | 	mov	arg02, #9
18f6c     00 16 06 F6 | 	mov	arg03, #0
18f70     50 86 B0 FD | 	call	#__system___basic_print_char
18f74     FD 2E 02 F6 | 	mov	local09, result1
18f78     FD 26 02 F1 | 	add	local05, result1
18f7c     00 12 06 F6 | 	mov	arg01, #0
18f80     E4 D3 B0 FD | 	call	#__system___getiolock_0540
18f84     FD 00 68 FC | 	wrlong	#0, result1
18f88     00 FA 05 F6 | 	mov	result1, #0
18f8c     00 30 06 F6 | 	mov	local10, #0
18f90                 | LR__2034
18f90                 | '   if t1.result_type=result_uint then print t1.result.uresult,
18f90     1D 22 0E F2 | 	cmp	local03, #29 wz
18f94     64 00 90 5D |  if_ne	jmp	#LR__2035
18f98     00 12 06 F6 | 	mov	arg01, #0
18f9c     C8 D3 B0 FD | 	call	#__system___getiolock_0540
18fa0     FD 12 02 F6 | 	mov	arg01, result1
18fa4     80 79 B0 FD | 	call	#__system___lockmem
18fa8     00 28 06 F6 | 	mov	local06, #0
18fac     00 12 06 F6 | 	mov	arg01, #0
18fb0     0F 15 02 F6 | 	mov	arg02, local01
18fb4     00 16 06 F6 | 	mov	arg03, #0
18fb8     0A 18 06 F6 | 	mov	arg04, #10
18fbc     E0 86 B0 FD | 	call	#__system___basic_print_unsigned
18fc0     FD 2A 02 F6 | 	mov	local07, result1
18fc4     14 27 02 F6 | 	mov	local05, local06
18fc8     15 27 02 F1 | 	add	local05, local07
18fcc     00 32 06 F6 | 	mov	local11, #0
18fd0     00 12 06 F6 | 	mov	arg01, #0
18fd4     09 14 06 F6 | 	mov	arg02, #9
18fd8     00 16 06 F6 | 	mov	arg03, #0
18fdc     E4 85 B0 FD | 	call	#__system___basic_print_char
18fe0     FD 2E 02 F6 | 	mov	local09, result1
18fe4     FD 26 02 F1 | 	add	local05, result1
18fe8     00 12 06 F6 | 	mov	arg01, #0
18fec     78 D3 B0 FD | 	call	#__system___getiolock_0540
18ff0     FD 00 68 FC | 	wrlong	#0, result1
18ff4     00 FA 05 F6 | 	mov	result1, #0
18ff8     00 30 06 F6 | 	mov	local10, #0
18ffc                 | LR__2035
18ffc                 | '   if t1.result_type=result_float then print t1.result.fresult,
18ffc     1E 22 0E F2 | 	cmp	local03, #30 wz
19000     64 00 90 5D |  if_ne	jmp	#LR__2036
19004     00 12 06 F6 | 	mov	arg01, #0
19008     5C D3 B0 FD | 	call	#__system___getiolock_0540
1900c     FD 12 02 F6 | 	mov	arg01, result1
19010     14 79 B0 FD | 	call	#__system___lockmem
19014     00 28 06 F6 | 	mov	local06, #0
19018     00 12 06 F6 | 	mov	arg01, #0
1901c     0F 15 02 F6 | 	mov	arg02, local01
19020     00 16 06 F6 | 	mov	arg03, #0
19024     23 18 06 F6 | 	mov	arg04, #35
19028     C8 AA B0 FD | 	call	#__system___basic_print_float
1902c     FD 2A 02 F6 | 	mov	local07, result1
19030     14 27 02 F6 | 	mov	local05, local06
19034     15 27 02 F1 | 	add	local05, local07
19038     00 32 06 F6 | 	mov	local11, #0
1903c     00 12 06 F6 | 	mov	arg01, #0
19040     09 14 06 F6 | 	mov	arg02, #9
19044     00 16 06 F6 | 	mov	arg03, #0
19048     78 85 B0 FD | 	call	#__system___basic_print_char
1904c     FD 2E 02 F6 | 	mov	local09, result1
19050     FD 26 02 F1 | 	add	local05, result1
19054     00 12 06 F6 | 	mov	arg01, #0
19058     0C D3 B0 FD | 	call	#__system___getiolock_0540
1905c     FD 00 68 FC | 	wrlong	#0, result1
19060     00 FA 05 F6 | 	mov	result1, #0
19064     00 30 06 F6 | 	mov	local10, #0
19068                 | LR__2036
19068                 | '   if t1.result_type=result_string then print t1.result.sresult,
19068     1F 22 0E F2 | 	cmp	local03, #31 wz
1906c     60 00 90 5D |  if_ne	jmp	#LR__2037
19070     00 12 06 F6 | 	mov	arg01, #0
19074     F0 D2 B0 FD | 	call	#__system___getiolock_0540
19078     FD 12 02 F6 | 	mov	arg01, result1
1907c     A8 78 B0 FD | 	call	#__system___lockmem
19080     00 28 06 F6 | 	mov	local06, #0
19084     00 12 06 F6 | 	mov	arg01, #0
19088     0F 15 02 F6 | 	mov	arg02, local01
1908c     00 16 06 F6 | 	mov	arg03, #0
19090     88 85 B0 FD | 	call	#__system___basic_print_string
19094     FD 2A 02 F6 | 	mov	local07, result1
19098     14 27 02 F6 | 	mov	local05, local06
1909c     15 27 02 F1 | 	add	local05, local07
190a0     00 32 06 F6 | 	mov	local11, #0
190a4     00 12 06 F6 | 	mov	arg01, #0
190a8     09 14 06 F6 | 	mov	arg02, #9
190ac     00 16 06 F6 | 	mov	arg03, #0
190b0     10 85 B0 FD | 	call	#__system___basic_print_char
190b4     FD 2E 02 F6 | 	mov	local09, result1
190b8     FD 26 02 F1 | 	add	local05, result1
190bc     00 12 06 F6 | 	mov	arg01, #0
190c0     A4 D2 B0 FD | 	call	#__system___getiolock_0540
190c4     FD 00 68 FC | 	wrlong	#0, result1
190c8     00 FA 05 F6 | 	mov	result1, #0
190cc     00 30 06 F6 | 	mov	local10, #0
190d0                 | LR__2037
190d0                 | LR__2038
190d0                 | ' if r=print_mod_semicolon then 
190d0     22 24 0E F2 | 	cmp	local04, #34 wz
190d4     1C 01 90 5D |  if_ne	jmp	#LR__2043
190d8                 | '   if t1.result_type=result_int then print t1.result.iresult;
190d8     1C 22 0E F2 | 	cmp	local03, #28 wz
190dc     50 00 90 5D |  if_ne	jmp	#LR__2039
190e0     00 12 06 F6 | 	mov	arg01, #0
190e4     80 D2 B0 FD | 	call	#__system___getiolock_0540
190e8     FD 12 02 F6 | 	mov	arg01, result1
190ec     38 78 B0 FD | 	call	#__system___lockmem
190f0     00 28 06 F6 | 	mov	local06, #0
190f4     00 30 06 F6 | 	mov	local10, #0
190f8     0A 32 06 F6 | 	mov	local11, #10
190fc     00 12 06 F6 | 	mov	arg01, #0
19100     0F 15 02 F6 | 	mov	arg02, local01
19104     00 16 06 F6 | 	mov	arg03, #0
19108     0A 18 06 F6 | 	mov	arg04, #10
1910c     50 85 B0 FD | 	call	#__system___basic_print_integer
19110     FD 2A 02 F6 | 	mov	local07, result1
19114     14 27 02 F6 | 	mov	local05, local06
19118     15 27 02 F1 | 	add	local05, local07
1911c     00 12 06 F6 | 	mov	arg01, #0
19120     44 D2 B0 FD | 	call	#__system___getiolock_0540
19124     FD 00 68 FC | 	wrlong	#0, result1
19128     00 FA 05 F6 | 	mov	result1, #0
1912c     00 2E 06 F6 | 	mov	local09, #0
19130                 | LR__2039
19130                 | '   if t1.result_type=result_uint then print t1.result.uresult;
19130     1D 22 0E F2 | 	cmp	local03, #29 wz
19134     50 00 90 5D |  if_ne	jmp	#LR__2040
19138     00 12 06 F6 | 	mov	arg01, #0
1913c     28 D2 B0 FD | 	call	#__system___getiolock_0540
19140     FD 12 02 F6 | 	mov	arg01, result1
19144     E0 77 B0 FD | 	call	#__system___lockmem
19148     00 28 06 F6 | 	mov	local06, #0
1914c     00 30 06 F6 | 	mov	local10, #0
19150     0A 32 06 F6 | 	mov	local11, #10
19154     00 12 06 F6 | 	mov	arg01, #0
19158     0F 15 02 F6 | 	mov	arg02, local01
1915c     00 16 06 F6 | 	mov	arg03, #0
19160     0A 18 06 F6 | 	mov	arg04, #10
19164     38 85 B0 FD | 	call	#__system___basic_print_unsigned
19168     FD 2A 02 F6 | 	mov	local07, result1
1916c     14 27 02 F6 | 	mov	local05, local06
19170     15 27 02 F1 | 	add	local05, local07
19174     00 12 06 F6 | 	mov	arg01, #0
19178     EC D1 B0 FD | 	call	#__system___getiolock_0540
1917c     FD 00 68 FC | 	wrlong	#0, result1
19180     00 FA 05 F6 | 	mov	result1, #0
19184     00 2E 06 F6 | 	mov	local09, #0
19188                 | LR__2040
19188                 | '   if t1.result_type=result_float then print t1.result.fresult;
19188     1E 22 0E F2 | 	cmp	local03, #30 wz
1918c     30 00 90 5D |  if_ne	jmp	#LR__2041
19190     00 12 06 F6 | 	mov	arg01, #0
19194     D0 D1 B0 FD | 	call	#__system___getiolock_0540
19198     FD 12 02 F6 | 	mov	arg01, result1
1919c     88 77 B0 FD | 	call	#__system___lockmem
191a0     00 12 06 F6 | 	mov	arg01, #0
191a4     0F 15 02 F6 | 	mov	arg02, local01
191a8     00 16 06 F6 | 	mov	arg03, #0
191ac     23 18 06 F6 | 	mov	arg04, #35
191b0     40 A9 B0 FD | 	call	#__system___basic_print_float
191b4     00 12 06 F6 | 	mov	arg01, #0
191b8     AC D1 B0 FD | 	call	#__system___getiolock_0540
191bc     FD 00 68 FC | 	wrlong	#0, result1
191c0                 | LR__2041
191c0                 | '   if t1.result_type=result_string then print t1.result.sresult;
191c0     1F 22 0E F2 | 	cmp	local03, #31 wz
191c4     2C 00 90 5D |  if_ne	jmp	#LR__2042
191c8     00 12 06 F6 | 	mov	arg01, #0
191cc     98 D1 B0 FD | 	call	#__system___getiolock_0540
191d0     FD 12 02 F6 | 	mov	arg01, result1
191d4     50 77 B0 FD | 	call	#__system___lockmem
191d8     00 12 06 F6 | 	mov	arg01, #0
191dc     0F 15 02 F6 | 	mov	arg02, local01
191e0     00 16 06 F6 | 	mov	arg03, #0
191e4     34 84 B0 FD | 	call	#__system___basic_print_string
191e8     00 12 06 F6 | 	mov	arg01, #0
191ec     78 D1 B0 FD | 	call	#__system___getiolock_0540
191f0     FD 00 68 FC | 	wrlong	#0, result1
191f4                 | LR__2042
191f4                 | LR__2043
191f4                 | ' if r=0 then 
191f4     00 24 0E F2 | 	cmp	local04, #0 wz
191f8     1C 01 90 5D |  if_ne	jmp	#LR__2048
191fc                 | '   if t1.result_type=result_int then print t1.result.iresult
191fc     1C 22 0E F2 | 	cmp	local03, #28 wz
19200     40 00 90 5D |  if_ne	jmp	#LR__2044
19204     00 12 06 F6 | 	mov	arg01, #0
19208     5C D1 B0 FD | 	call	#__system___getiolock_0540
1920c     FD 12 02 F6 | 	mov	arg01, result1
19210     14 77 B0 FD | 	call	#__system___lockmem
19214     00 12 06 F6 | 	mov	arg01, #0
19218     0F 15 02 F6 | 	mov	arg02, local01
1921c     00 16 06 F6 | 	mov	arg03, #0
19220     0A 18 06 F6 | 	mov	arg04, #10
19224     38 84 B0 FD | 	call	#__system___basic_print_integer
19228     00 12 06 F6 | 	mov	arg01, #0
1922c     0A 14 06 F6 | 	mov	arg02, #10
19230     00 16 06 F6 | 	mov	arg03, #0
19234     8C 83 B0 FD | 	call	#__system___basic_print_char
19238     00 12 06 F6 | 	mov	arg01, #0
1923c     28 D1 B0 FD | 	call	#__system___getiolock_0540
19240     FD 00 68 FC | 	wrlong	#0, result1
19244                 | LR__2044
19244                 | '   if t1.result_type=result_uint then print t1.result.uresult
19244     1D 22 0E F2 | 	cmp	local03, #29 wz
19248     40 00 90 5D |  if_ne	jmp	#LR__2045
1924c     00 12 06 F6 | 	mov	arg01, #0
19250     14 D1 B0 FD | 	call	#__system___getiolock_0540
19254     FD 12 02 F6 | 	mov	arg01, result1
19258     CC 76 B0 FD | 	call	#__system___lockmem
1925c     00 12 06 F6 | 	mov	arg01, #0
19260     0F 15 02 F6 | 	mov	arg02, local01
19264     00 16 06 F6 | 	mov	arg03, #0
19268     0A 18 06 F6 | 	mov	arg04, #10
1926c     30 84 B0 FD | 	call	#__system___basic_print_unsigned
19270     00 12 06 F6 | 	mov	arg01, #0
19274     0A 14 06 F6 | 	mov	arg02, #10
19278     00 16 06 F6 | 	mov	arg03, #0
1927c     44 83 B0 FD | 	call	#__system___basic_print_char
19280     00 12 06 F6 | 	mov	arg01, #0
19284     E0 D0 B0 FD | 	call	#__system___getiolock_0540
19288     FD 00 68 FC | 	wrlong	#0, result1
1928c                 | LR__2045
1928c                 | '   if t1.result_type=result_float then print t1.result.fresult
1928c     1E 22 0E F2 | 	cmp	local03, #30 wz
19290     40 00 90 5D |  if_ne	jmp	#LR__2046
19294     00 12 06 F6 | 	mov	arg01, #0
19298     CC D0 B0 FD | 	call	#__system___getiolock_0540
1929c     FD 12 02 F6 | 	mov	arg01, result1
192a0     84 76 B0 FD | 	call	#__system___lockmem
192a4     00 12 06 F6 | 	mov	arg01, #0
192a8     0F 15 02 F6 | 	mov	arg02, local01
192ac     00 16 06 F6 | 	mov	arg03, #0
192b0     23 18 06 F6 | 	mov	arg04, #35
192b4     3C A8 B0 FD | 	call	#__system___basic_print_float
192b8     00 12 06 F6 | 	mov	arg01, #0
192bc     0A 14 06 F6 | 	mov	arg02, #10
192c0     00 16 06 F6 | 	mov	arg03, #0
192c4     FC 82 B0 FD | 	call	#__system___basic_print_char
192c8     00 12 06 F6 | 	mov	arg01, #0
192cc     98 D0 B0 FD | 	call	#__system___getiolock_0540
192d0     FD 00 68 FC | 	wrlong	#0, result1
192d4                 | LR__2046
192d4                 | '   if t1.result_type=result_string then print t1.result.sresult
192d4     1F 22 0E F2 | 	cmp	local03, #31 wz
192d8     3C 00 90 5D |  if_ne	jmp	#LR__2047
192dc     00 12 06 F6 | 	mov	arg01, #0
192e0     84 D0 B0 FD | 	call	#__system___getiolock_0540
192e4     FD 12 02 F6 | 	mov	arg01, result1
192e8     3C 76 B0 FD | 	call	#__system___lockmem
192ec     00 12 06 F6 | 	mov	arg01, #0
192f0     0F 15 02 F6 | 	mov	arg02, local01
192f4     00 16 06 F6 | 	mov	arg03, #0
192f8     20 83 B0 FD | 	call	#__system___basic_print_string
192fc     00 12 06 F6 | 	mov	arg01, #0
19300     0A 14 06 F6 | 	mov	arg02, #10
19304     00 16 06 F6 | 	mov	arg03, #0
19308     B8 82 B0 FD | 	call	#__system___basic_print_char
1930c     00 12 06 F6 | 	mov	arg01, #0
19310     54 D0 B0 FD | 	call	#__system___getiolock_0540
19314     FD 00 68 FC | 	wrlong	#0, result1
19318                 | LR__2047
19318                 | LR__2048
19318                 | ' if r=print_mod_empty then print
19318     20 24 0E F2 | 	cmp	local04, #32 wz
1931c     2C 00 90 5D |  if_ne	jmp	#LR__2049
19320     00 12 06 F6 | 	mov	arg01, #0
19324     40 D0 B0 FD | 	call	#__system___getiolock_0540
19328     FD 12 02 F6 | 	mov	arg01, result1
1932c     F8 75 B0 FD | 	call	#__system___lockmem
19330     00 12 06 F6 | 	mov	arg01, #0
19334     0A 14 06 F6 | 	mov	arg02, #10
19338     00 16 06 F6 | 	mov	arg03, #0
1933c     84 82 B0 FD | 	call	#__system___basic_print_char
19340     00 12 06 F6 | 	mov	arg01, #0
19344     20 D0 B0 FD | 	call	#__system___getiolock_0540
19348     FD 00 68 FC | 	wrlong	#0, result1
1934c                 | LR__2049
1934c                 | LR__2050
1934c     A7 F0 03 F6 | 	mov	ptra, fp
19350     B2 00 A0 FD | 	call	#popregs_
19354                 | _do_print_ret
19354     2D 00 64 FD | 	ret
19358                 | 
19358                 | ' 
19358                 | ' 
19358                 | ' sub do_paper
19358                 | _do_paper
19358     03 4A 05 F6 | 	mov	COUNT_, #3
1935c     A8 00 A0 FD | 	call	#pushregs_
19360     34 28 BF FD | 	call	#_pop
19364     FD 1E 02 F6 | 	mov	local01, result1
19368     FE 20 02 F6 | 	mov	local02, result2
1936c     FF 22 02 F6 | 	mov	local03, result3
19370                 | ' t1=pop() 
19370                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
19370     1E 22 0E F2 | 	cmp	local03, #30 wz
19374     10 00 90 5D |  if_ne	jmp	#LR__2060
19378     0F 13 02 F6 | 	mov	arg01, local01
1937c     00 14 06 F6 | 	mov	arg02, #0
19380     20 A6 B0 FD | 	call	#__system___float_tointeger
19384     FD 1E 02 F6 | 	mov	local01, result1
19388                 | LR__2060
19388                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
19388     1F 22 0E F2 | 	cmp	local03, #31 wz
1938c     18 00 90 5D |  if_ne	jmp	#LR__2061
19390     0F 13 02 F6 | 	mov	arg01, local01
19394     2C A9 B0 FD | 	call	#__system____builtin_atof
19398     FD 12 02 F6 | 	mov	arg01, result1
1939c     00 14 06 F6 | 	mov	arg02, #0
193a0     00 A6 B0 FD | 	call	#__system___float_tointeger
193a4     FD 1E 02 F6 | 	mov	local01, result1
193a8                 | LR__2061
193a8     37 00 00 FF 
193ac     38 E4 05 F1 | 	add	objptr, ##28216
193b0     F2 1E 62 FC | 	wrlong	local01, objptr
193b4     04 E4 05 F1 | 	add	objptr, #4
193b8     F2 12 02 FB | 	rdlong	arg01, objptr
193bc                 | ' 
193bc                 | ' write_color:=ff
193bc     36 00 00 FF 
193c0     FB E5 85 F1 | 	sub	objptr, ##28155
193c4     F2 12 62 FC | 	wrlong	arg01, objptr
193c8                 | ' write_background:=bb
193c8     04 E4 05 F1 | 	add	objptr, #4
193cc     F2 1E 62 FC | 	wrlong	local01, objptr
193d0     45 E4 85 F1 | 	sub	objptr, #69
193d4     A7 F0 03 F6 | 	mov	ptra, fp
193d8     B2 00 A0 FD | 	call	#popregs_
193dc                 | _do_paper_ret
193dc     2D 00 64 FD | 	ret
193e0                 | 
193e0                 | ' 
193e0                 | ' sub do_ink
193e0                 | _do_ink
193e0     03 4A 05 F6 | 	mov	COUNT_, #3
193e4     A8 00 A0 FD | 	call	#pushregs_
193e8     AC 27 BF FD | 	call	#_pop
193ec     FD 1E 02 F6 | 	mov	local01, result1
193f0     FE 20 02 F6 | 	mov	local02, result2
193f4     FF 22 02 F6 | 	mov	local03, result3
193f8                 | ' t1=pop() 
193f8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
193f8     1E 22 0E F2 | 	cmp	local03, #30 wz
193fc     10 00 90 5D |  if_ne	jmp	#LR__2070
19400     0F 13 02 F6 | 	mov	arg01, local01
19404     00 14 06 F6 | 	mov	arg02, #0
19408     98 A5 B0 FD | 	call	#__system___float_tointeger
1940c     FD 1E 02 F6 | 	mov	local01, result1
19410                 | LR__2070
19410                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
19410     1F 22 0E F2 | 	cmp	local03, #31 wz
19414     18 00 90 5D |  if_ne	jmp	#LR__2071
19418     0F 13 02 F6 | 	mov	arg01, local01
1941c     A4 A8 B0 FD | 	call	#__system____builtin_atof
19420     FD 12 02 F6 | 	mov	arg01, result1
19424     00 14 06 F6 | 	mov	arg02, #0
19428     78 A5 B0 FD | 	call	#__system___float_tointeger
1942c     FD 1E 02 F6 | 	mov	local01, result1
19430                 | LR__2071
19430     37 00 00 FF 
19434     3C E4 05 F1 | 	add	objptr, ##28220
19438     F2 1E 62 FC | 	wrlong	local01, objptr
1943c     04 E4 85 F1 | 	sub	objptr, #4
19440     F2 14 02 FB | 	rdlong	arg02, objptr
19444                 | ' 
19444                 | ' write_color:=ff
19444     36 00 00 FF 
19448     F7 E5 85 F1 | 	sub	objptr, ##28151
1944c     F2 1E 62 FC | 	wrlong	local01, objptr
19450                 | ' write_background:=bb
19450     04 E4 05 F1 | 	add	objptr, #4
19454     F2 14 62 FC | 	wrlong	arg02, objptr
19458     36 00 00 FF 
1945c     F7 E5 05 F1 | 	add	objptr, ##28151
19460     F2 12 02 FB | 	rdlong	arg01, objptr
19464     37 00 00 FF 
19468     3C E4 85 F1 | 	sub	objptr, ##28220
1946c     7C 4C B0 FD | 	call	#_hg010b_spin2_setcursorcolor
19470     A7 F0 03 F6 | 	mov	ptra, fp
19474     B2 00 A0 FD | 	call	#popregs_
19478                 | _do_ink_ret
19478     2D 00 64 FD | 	ret
1947c                 | 
1947c                 | ' 
1947c                 | ' 
1947c                 | ' sub do_font
1947c                 | _do_font
1947c     03 4A 05 F6 | 	mov	COUNT_, #3
19480     A8 00 A0 FD | 	call	#pushregs_
19484     10 27 BF FD | 	call	#_pop
19488     FD 1E 02 F6 | 	mov	local01, result1
1948c     FE 20 02 F6 | 	mov	local02, result2
19490     FF 22 02 F6 | 	mov	local03, result3
19494                 | ' t1=pop() 
19494                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
19494     1E 22 0E F2 | 	cmp	local03, #30 wz
19498     10 00 90 5D |  if_ne	jmp	#LR__2080
1949c     0F 13 02 F6 | 	mov	arg01, local01
194a0     00 14 06 F6 | 	mov	arg02, #0
194a4     FC A4 B0 FD | 	call	#__system___float_tointeger
194a8     FD 1E 02 F6 | 	mov	local01, result1
194ac                 | LR__2080
194ac                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
194ac     1F 22 0E F2 | 	cmp	local03, #31 wz
194b0     18 00 90 5D |  if_ne	jmp	#LR__2081
194b4     0F 13 02 F6 | 	mov	arg01, local01
194b8     08 A8 B0 FD | 	call	#__system____builtin_atof
194bc     FD 12 02 F6 | 	mov	arg01, result1
194c0     00 14 06 F6 | 	mov	arg02, #0
194c4     DC A4 B0 FD | 	call	#__system___float_tointeger
194c8     FD 1E 02 F6 | 	mov	local01, result1
194cc                 | LR__2081
194cc     37 00 00 FF 
194d0     40 E4 05 F1 | 	add	objptr, ##28224
194d4     F2 1E 62 FC | 	wrlong	local01, objptr
194d8     37 00 00 FF 
194dc     40 E4 85 F1 | 	sub	objptr, ##28224
194e0     02 1E 66 F0 | 	shl	local01, #2
194e4     0F 13 02 F6 | 	mov	arg01, local01
194e8     44 5C B0 FD | 	call	#_hg010b_spin2_setfontfamily
194ec     A7 F0 03 F6 | 	mov	ptra, fp
194f0     B2 00 A0 FD | 	call	#popregs_
194f4                 | _do_font_ret
194f4     2D 00 64 FD | 	ret
194f8                 | 
194f8                 | ' 
194f8                 | ' sub do_mode
194f8                 | _do_mode
194f8     05 4A 05 F6 | 	mov	COUNT_, #5
194fc     A8 00 A0 FD | 	call	#pushregs_
19500     94 26 BF FD | 	call	#_pop
19504     FD 1E 02 F6 | 	mov	local01, result1
19508     FE 20 02 F6 | 	mov	local02, result2
1950c     FF 22 02 F6 | 	mov	local03, result3
19510                 | ' t1=pop() 
19510                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
19510     1E 22 0E F2 | 	cmp	local03, #30 wz
19514     10 00 90 5D |  if_ne	jmp	#LR__2090
19518     0F 13 02 F6 | 	mov	arg01, local01
1951c     00 14 06 F6 | 	mov	arg02, #0
19520     80 A4 B0 FD | 	call	#__system___float_tointeger
19524     FD 1E 02 F6 | 	mov	local01, result1
19528                 | LR__2090
19528                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
19528     1F 22 0E F2 | 	cmp	local03, #31 wz
1952c     18 00 90 5D |  if_ne	jmp	#LR__2091
19530     0F 13 02 F6 | 	mov	arg01, local01
19534     8C A7 B0 FD | 	call	#__system____builtin_atof
19538     FD 12 02 F6 | 	mov	arg01, result1
1953c     00 14 06 F6 | 	mov	arg02, #0
19540     60 A4 B0 FD | 	call	#__system___float_tointeger
19544     FD 1E 02 F6 | 	mov	local01, result1
19548                 | LR__2091
19548                 | ' select case t1.result.iresult
19548     0F 25 02 F6 | 	mov	local04, local01
1954c     05 24 26 F3 | 	fle	local04, #5
19550     30 24 62 FD | 	jmprel	local04
19554                 | LR__2092
19554     14 00 90 FD | 	jmp	#LR__2093
19558     A8 00 90 FD | 	jmp	#LR__2094
1955c     10 01 90 FD | 	jmp	#LR__2095
19560     78 01 90 FD | 	jmp	#LR__2096
19564     E0 01 90 FD | 	jmp	#LR__2097
19568     70 02 90 FD | 	jmp	#LR__2098
1956c                 | LR__2093
1956c     37 00 00 FF 
19570     40 E4 05 F1 | 	add	objptr, ##28224
19574     F2 02 68 FC | 	wrlong	#1, objptr
19578     04 E4 85 F1 | 	sub	objptr, #4
1957c     F2 34 69 FC | 	wrlong	#154, objptr
19580     21 00 00 FF 
19584     DC E4 05 F1 | 	add	objptr, ##17116
19588     F2 02 68 FC | 	wrlong	#1, objptr
1958c     21 00 00 FF 
19590     E0 E4 85 F1 | 	sub	objptr, ##17120
19594     F2 26 69 FC | 	wrlong	#147, objptr
19598     37 00 00 FF 
1959c     38 E4 85 F1 | 	sub	objptr, ##28216
195a0     04 12 06 F6 | 	mov	arg01, #4
195a4     88 5B B0 FD | 	call	#_hg010b_spin2_setfontfamily
195a8     37 00 00 FF 
195ac     3C E4 05 F1 | 	add	objptr, ##28220
195b0     F2 12 02 FB | 	rdlong	arg01, objptr
195b4     04 E4 85 F1 | 	sub	objptr, #4
195b8     F2 14 02 FB | 	rdlong	arg02, objptr
195bc                 | ' 
195bc                 | ' write_color:=ff
195bc     36 00 00 FF 
195c0     F7 E5 85 F1 | 	sub	objptr, ##28151
195c4     F2 12 62 FC | 	wrlong	arg01, objptr
195c8                 | ' write_background:=bb
195c8     04 E4 05 F1 | 	add	objptr, #4
195cc     F2 14 62 FC | 	wrlong	arg02, objptr
195d0     01 00 00 FF 
195d4     00 EA 05 F1 | 	add	ptr__dat__, ##512
195d8     59 00 00 FF 
195dc     77 E5 05 F1 | 	add	objptr, ##45943
195e0     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
195e4     04 E4 85 F1 | 	sub	objptr, #4
195e8     03 00 80 FF 
195ec     F2 30 69 FC | 	wrlong	##1688, objptr
195f0     59 00 00 FF 
195f4     B8 E5 85 F1 | 	sub	objptr, ##46008
195f8     01 00 00 FF 
195fc     00 EA 85 F1 | 	sub	ptr__dat__, ##512
19600     D8 01 90 FD | 	jmp	#LR__2098
19604                 | LR__2094
19604     37 00 00 FF 
19608     40 E4 05 F1 | 	add	objptr, ##28224
1960c     F2 00 68 FC | 	wrlong	#0, objptr
19610     04 E4 85 F1 | 	sub	objptr, #4
19614     F2 2E 68 FC | 	wrlong	#23, objptr
19618     21 00 00 FF 
1961c     DC E4 05 F1 | 	add	objptr, ##17116
19620     F2 00 68 FC | 	wrlong	#0, objptr
19624     21 00 00 FF 
19628     E0 E4 85 F1 | 	sub	objptr, ##17120
1962c     F2 00 68 FC | 	wrlong	#0, objptr
19630     37 00 00 FF 
19634     38 E4 85 F1 | 	sub	objptr, ##28216
19638     00 12 06 F6 | 	mov	arg01, #0
1963c     F0 5A B0 FD | 	call	#_hg010b_spin2_setfontfamily
19640     37 00 00 FF 
19644     3C E4 05 F1 | 	add	objptr, ##28220
19648     F2 12 02 FB | 	rdlong	arg01, objptr
1964c     04 E4 85 F1 | 	sub	objptr, #4
19650     F2 14 02 FB | 	rdlong	arg02, objptr
19654                 | ' 
19654                 | ' write_color:=ff
19654     36 00 00 FF 
19658     F7 E5 85 F1 | 	sub	objptr, ##28151
1965c     F2 12 62 FC | 	wrlong	arg01, objptr
19660                 | ' write_background:=bb
19660     04 E4 05 F1 | 	add	objptr, #4
19664     F2 14 62 FC | 	wrlong	arg02, objptr
19668     45 E4 85 F1 | 	sub	objptr, #69
1966c     6C 01 90 FD | 	jmp	#LR__2098
19670                 | LR__2095
19670     37 00 00 FF 
19674     40 E4 05 F1 | 	add	objptr, ##28224
19678     F2 00 68 FC | 	wrlong	#0, objptr
1967c     04 E4 85 F1 | 	sub	objptr, #4
19680     F2 6A 69 FC | 	wrlong	#181, objptr
19684     21 00 00 FF 
19688     DC E4 05 F1 | 	add	objptr, ##17116
1968c     F2 00 68 FC | 	wrlong	#0, objptr
19690     21 00 00 FF 
19694     E0 E4 85 F1 | 	sub	objptr, ##17120
19698     F2 00 68 FC | 	wrlong	#0, objptr
1969c     37 00 00 FF 
196a0     38 E4 85 F1 | 	sub	objptr, ##28216
196a4     00 12 06 F6 | 	mov	arg01, #0
196a8     84 5A B0 FD | 	call	#_hg010b_spin2_setfontfamily
196ac     37 00 00 FF 
196b0     3C E4 05 F1 | 	add	objptr, ##28220
196b4     F2 12 02 FB | 	rdlong	arg01, objptr
196b8     04 E4 85 F1 | 	sub	objptr, #4
196bc     F2 14 02 FB | 	rdlong	arg02, objptr
196c0                 | ' 
196c0                 | ' write_color:=ff
196c0     36 00 00 FF 
196c4     F7 E5 85 F1 | 	sub	objptr, ##28151
196c8     F2 12 62 FC | 	wrlong	arg01, objptr
196cc                 | ' write_background:=bb
196cc     04 E4 05 F1 | 	add	objptr, #4
196d0     F2 14 62 FC | 	wrlong	arg02, objptr
196d4     45 E4 85 F1 | 	sub	objptr, #69
196d8     00 01 90 FD | 	jmp	#LR__2098
196dc                 | LR__2096
196dc     37 00 00 FF 
196e0     40 E4 05 F1 | 	add	objptr, ##28224
196e4     F2 00 68 FC | 	wrlong	#0, objptr
196e8     04 E4 85 F1 | 	sub	objptr, #4
196ec     F2 1E 68 FC | 	wrlong	#15, objptr
196f0     21 00 00 FF 
196f4     DC E4 05 F1 | 	add	objptr, ##17116
196f8     F2 00 68 FC | 	wrlong	#0, objptr
196fc     21 00 00 FF 
19700     E0 E4 85 F1 | 	sub	objptr, ##17120
19704     F2 00 68 FC | 	wrlong	#0, objptr
19708     37 00 00 FF 
1970c     38 E4 85 F1 | 	sub	objptr, ##28216
19710     00 12 06 F6 | 	mov	arg01, #0
19714     18 5A B0 FD | 	call	#_hg010b_spin2_setfontfamily
19718     37 00 00 FF 
1971c     3C E4 05 F1 | 	add	objptr, ##28220
19720     F2 12 02 FB | 	rdlong	arg01, objptr
19724     04 E4 85 F1 | 	sub	objptr, #4
19728     F2 14 02 FB | 	rdlong	arg02, objptr
1972c                 | ' 
1972c                 | ' write_color:=ff
1972c     36 00 00 FF 
19730     F7 E5 85 F1 | 	sub	objptr, ##28151
19734     F2 12 62 FC | 	wrlong	arg01, objptr
19738                 | ' write_background:=bb
19738     04 E4 05 F1 | 	add	objptr, #4
1973c     F2 14 62 FC | 	wrlong	arg02, objptr
19740     45 E4 85 F1 | 	sub	objptr, #69
19744     94 00 90 FD | 	jmp	#LR__2098
19748                 | LR__2097
19748     37 00 00 FF 
1974c     40 E4 05 F1 | 	add	objptr, ##28224
19750     F2 02 68 FC | 	wrlong	#1, objptr
19754     04 E4 85 F1 | 	sub	objptr, #4
19758     F2 02 68 FC | 	wrlong	#1, objptr
1975c     21 00 00 FF 
19760     DC E4 05 F1 | 	add	objptr, ##17116
19764     F2 02 68 FC | 	wrlong	#1, objptr
19768     21 00 00 FF 
1976c     E0 E4 85 F1 | 	sub	objptr, ##17120
19770     F2 1C 68 FC | 	wrlong	#14, objptr
19774     37 00 00 FF 
19778     38 E4 85 F1 | 	sub	objptr, ##28216
1977c     04 12 06 F6 | 	mov	arg01, #4
19780     AC 59 B0 FD | 	call	#_hg010b_spin2_setfontfamily
19784     37 00 00 FF 
19788     3C E4 05 F1 | 	add	objptr, ##28220
1978c     F2 12 02 FB | 	rdlong	arg01, objptr
19790     04 E4 85 F1 | 	sub	objptr, #4
19794     F2 14 02 FB | 	rdlong	arg02, objptr
19798                 | ' 
19798                 | ' write_color:=ff
19798     36 00 00 FF 
1979c     F7 E5 85 F1 | 	sub	objptr, ##28151
197a0     F2 12 62 FC | 	wrlong	arg01, objptr
197a4                 | ' write_background:=bb
197a4     04 E4 05 F1 | 	add	objptr, #4
197a8     F2 14 62 FC | 	wrlong	arg02, objptr
197ac     07 00 00 FF 
197b0     8A EB 05 F1 | 	add	ptr__dat__, ##3978
197b4     59 00 00 FF 
197b8     77 E5 05 F1 | 	add	objptr, ##45943
197bc     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
197c0     04 E4 85 F1 | 	sub	objptr, #4
197c4     03 00 80 FF 
197c8     F2 30 69 FC | 	wrlong	##1688, objptr
197cc     59 00 00 FF 
197d0     B8 E5 85 F1 | 	sub	objptr, ##46008
197d4     07 00 00 FF 
197d8     8A EB 85 F1 | 	sub	ptr__dat__, ##3978
197dc                 | LR__2098
197dc     59 00 00 FF 
197e0     B4 E5 05 F1 | 	add	objptr, ##46004
197e4     F2 1E 62 FC | 	wrlong	local01, objptr
197e8     04 E4 85 F1 | 	sub	objptr, #4
197ec     F2 12 02 FB | 	rdlong	arg01, objptr
197f0     16 00 00 FF 
197f4     54 E5 85 F1 | 	sub	objptr, ##11604
197f8     F2 26 02 FB | 	rdlong	local05, objptr
197fc     43 00 00 FF 
19800     5C E4 85 F1 | 	sub	objptr, ##34396
19804     13 13 82 F1 | 	sub	arg01, local05
19808     00 14 06 F6 | 	mov	arg02, #0
1980c     0A 16 06 F6 | 	mov	arg03, #10
19810     E4 93 B0 FD | 	call	#__system__Number_S
19814     FD 12 02 F6 | 	mov	arg01, result1
19818     84 01 00 FF 
1981c     B1 15 06 F6 | 	mov	arg02, ##@LR__5455
19820     60 71 B0 FD | 	call	#__system___string_concat
19824     58 00 00 FF 
19828     14 E5 05 F1 | 	add	objptr, ##45332
1982c     F2 FA 61 FC | 	wrlong	result1, objptr
19830     21 00 00 FF 
19834     D8 E4 85 F1 | 	sub	objptr, ##17112
19838     F2 12 02 FB | 	rdlong	arg01, objptr
1983c     04 E4 85 F1 | 	sub	objptr, #4
19840     F2 14 02 FB | 	rdlong	arg02, objptr
19844     37 00 00 FF 
19848     38 E4 85 F1 | 	sub	objptr, ##28216
1984c     30 5A B0 FD | 	call	#_hg010b_spin2_cls
19850     84 01 00 FF 
19854     C3 13 06 F6 | 	mov	arg01, ##@LR__5456
19858                 | ' 
19858                 | ' write(text)
19858     E4 5D B0 FD | 	call	#_hg010b_spin2_write
1985c                 | ' crlf
1985c     AC 60 B0 FD | 	call	#_hg010b_spin2_crlf
19860     18 00 00 FF 
19864     4C EB 05 F1 | 	add	ptr__dat__, ##12620
19868     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
1986c     18 00 00 FF 
19870     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
19874                 | ' 
19874                 | ' write(text)
19874     C8 5D B0 FD | 	call	#_hg010b_spin2_write
19878                 | ' crlf
19878     90 60 B0 FD | 	call	#_hg010b_spin2_crlf
1987c     58 00 00 FF 
19880     14 E5 05 F1 | 	add	objptr, ##45332
19884     F2 12 02 FB | 	rdlong	arg01, objptr
19888     58 00 00 FF 
1988c     14 E5 85 F1 | 	sub	objptr, ##45332
19890                 | ' 
19890                 | ' write(text)
19890     AC 5D B0 FD | 	call	#_hg010b_spin2_write
19894                 | ' crlf
19894     74 60 B0 FD | 	call	#_hg010b_spin2_crlf
19898     A7 F0 03 F6 | 	mov	ptra, fp
1989c     B2 00 A0 FD | 	call	#popregs_
198a0                 | _do_mode_ret
198a0     2D 00 64 FD | 	ret
198a4                 | 
198a4                 | ' 
198a4                 | ' sub do_setwave
198a4                 | _do_setwave
198a4     02 4A 05 F6 | 	mov	COUNT_, #2
198a8     A8 00 A0 FD | 	call	#pushregs_
198ac     18 F0 07 F1 | 	add	ptra, #24
198b0     E4 22 BF FD | 	call	#_pop
198b4     FD 12 02 F6 | 	mov	arg01, result1
198b8     FE 1E 02 F6 | 	mov	local01, result2
198bc     FF 20 02 F6 | 	mov	local02, result3
198c0     A7 12 62 FC | 	wrlong	arg01, fp
198c4     04 4E 05 F1 | 	add	fp, #4
198c8     A7 1E 62 FC | 	wrlong	local01, fp
198cc     04 4E 05 F1 | 	add	fp, #4
198d0     A7 20 62 FC | 	wrlong	local02, fp
198d4     08 4E 85 F1 | 	sub	fp, #8
198d8     BC 22 BF FD | 	call	#_pop
198dc     FD 20 02 F6 | 	mov	local02, result1
198e0     0C 4E 05 F1 | 	add	fp, #12
198e4     A7 20 62 FC | 	wrlong	local02, fp
198e8     04 4E 05 F1 | 	add	fp, #4
198ec     A7 FC 61 FC | 	wrlong	result2, fp
198f0     04 4E 05 F1 | 	add	fp, #4
198f4     A7 FE 61 FC | 	wrlong	result3, fp
198f8     08 4E 85 F1 | 	sub	fp, #8
198fc     A7 12 02 F6 | 	mov	arg01, fp
19900     0C 4E 85 F1 | 	sub	fp, #12
19904     60 C3 BF FD | 	call	#_converttoint
19908     FD 20 02 F6 | 	mov	local02, result1
1990c     10 1F 02 F6 | 	mov	local01, local02
19910     01 1E 66 F0 | 	shl	local01, #1
19914     10 1F 02 F1 | 	add	local01, local02
19918     03 1E 66 F0 | 	shl	local01, #3
1991c     14 00 00 FF 
19920     38 E5 05 F1 | 	add	objptr, ##10552
19924     F2 1E 02 F1 | 	add	local01, objptr
19928     A7 12 02 F6 | 	mov	arg01, fp
1992c     14 00 00 FF 
19930     38 E5 85 F1 | 	sub	objptr, ##10552
19934     30 C3 BF FD | 	call	#_converttoint
19938     04 1E 06 F1 | 	add	local01, #4
1993c     0F FB 41 FC | 	wrbyte	result1, local01
19940     A7 F0 03 F6 | 	mov	ptra, fp
19944     B2 00 A0 FD | 	call	#popregs_
19948                 | _do_setwave_ret
19948     2D 00 64 FD | 	ret
1994c                 | 
1994c                 | ' 
1994c                 | ' sub do_setsustain
1994c                 | _do_setsustain
1994c     02 4A 05 F6 | 	mov	COUNT_, #2
19950     A8 00 A0 FD | 	call	#pushregs_
19954     18 F0 07 F1 | 	add	ptra, #24
19958     3C 22 BF FD | 	call	#_pop
1995c     FD 12 02 F6 | 	mov	arg01, result1
19960     FE 1E 02 F6 | 	mov	local01, result2
19964     FF 20 02 F6 | 	mov	local02, result3
19968     A7 12 62 FC | 	wrlong	arg01, fp
1996c     04 4E 05 F1 | 	add	fp, #4
19970     A7 1E 62 FC | 	wrlong	local01, fp
19974     04 4E 05 F1 | 	add	fp, #4
19978     A7 20 62 FC | 	wrlong	local02, fp
1997c     08 4E 85 F1 | 	sub	fp, #8
19980     14 22 BF FD | 	call	#_pop
19984     FD 20 02 F6 | 	mov	local02, result1
19988     0C 4E 05 F1 | 	add	fp, #12
1998c     A7 20 62 FC | 	wrlong	local02, fp
19990     04 4E 05 F1 | 	add	fp, #4
19994     A7 FC 61 FC | 	wrlong	result2, fp
19998     04 4E 05 F1 | 	add	fp, #4
1999c     A7 FE 61 FC | 	wrlong	result3, fp
199a0     08 4E 85 F1 | 	sub	fp, #8
199a4     A7 12 02 F6 | 	mov	arg01, fp
199a8     0C 4E 85 F1 | 	sub	fp, #12
199ac     B8 C2 BF FD | 	call	#_converttoint
199b0     FD 20 02 F6 | 	mov	local02, result1
199b4     10 1F 02 F6 | 	mov	local01, local02
199b8     01 1E 66 F0 | 	shl	local01, #1
199bc     10 1F 02 F1 | 	add	local01, local02
199c0     03 1E 66 F0 | 	shl	local01, #3
199c4     14 00 00 FF 
199c8     38 E5 05 F1 | 	add	objptr, ##10552
199cc     F2 1E 02 F1 | 	add	local01, objptr
199d0     A7 12 02 F6 | 	mov	arg01, fp
199d4     14 00 00 FF 
199d8     38 E5 85 F1 | 	sub	objptr, ##10552
199dc     88 C2 BF FD | 	call	#_converttoint
199e0     14 1E 06 F1 | 	add	local01, #20
199e4     0F FB 51 FC | 	wrword	result1, local01
199e8     A7 F0 03 F6 | 	mov	ptra, fp
199ec     B2 00 A0 FD | 	call	#popregs_
199f0                 | _do_setsustain_ret
199f0     2D 00 64 FD | 	ret
199f4                 | 
199f4                 | ' 
199f4                 | ' sub do_setenv
199f4                 | _do_setenv
199f4     02 4A 05 F6 | 	mov	COUNT_, #2
199f8     A8 00 A0 FD | 	call	#pushregs_
199fc     18 F0 07 F1 | 	add	ptra, #24
19a00     94 21 BF FD | 	call	#_pop
19a04     FD 12 02 F6 | 	mov	arg01, result1
19a08     FE 1E 02 F6 | 	mov	local01, result2
19a0c     FF 20 02 F6 | 	mov	local02, result3
19a10     A7 12 62 FC | 	wrlong	arg01, fp
19a14     04 4E 05 F1 | 	add	fp, #4
19a18     A7 1E 62 FC | 	wrlong	local01, fp
19a1c     04 4E 05 F1 | 	add	fp, #4
19a20     A7 20 62 FC | 	wrlong	local02, fp
19a24     08 4E 85 F1 | 	sub	fp, #8
19a28     6C 21 BF FD | 	call	#_pop
19a2c     FD 20 02 F6 | 	mov	local02, result1
19a30     0C 4E 05 F1 | 	add	fp, #12
19a34     A7 20 62 FC | 	wrlong	local02, fp
19a38     04 4E 05 F1 | 	add	fp, #4
19a3c     A7 FC 61 FC | 	wrlong	result2, fp
19a40     04 4E 05 F1 | 	add	fp, #4
19a44     A7 FE 61 FC | 	wrlong	result3, fp
19a48     08 4E 85 F1 | 	sub	fp, #8
19a4c     A7 12 02 F6 | 	mov	arg01, fp
19a50     0C 4E 85 F1 | 	sub	fp, #12
19a54     10 C2 BF FD | 	call	#_converttoint
19a58     FD 20 02 F6 | 	mov	local02, result1
19a5c     10 1F 02 F6 | 	mov	local01, local02
19a60     01 1E 66 F0 | 	shl	local01, #1
19a64     10 1F 02 F1 | 	add	local01, local02
19a68     03 1E 66 F0 | 	shl	local01, #3
19a6c     14 00 00 FF 
19a70     38 E5 05 F1 | 	add	objptr, ##10552
19a74     F2 1E 02 F1 | 	add	local01, objptr
19a78     A7 12 02 F6 | 	mov	arg01, fp
19a7c     14 00 00 FF 
19a80     38 E5 85 F1 | 	sub	objptr, ##10552
19a84     E0 C1 BF FD | 	call	#_converttoint
19a88     05 1E 06 F1 | 	add	local01, #5
19a8c     0F FB 41 FC | 	wrbyte	result1, local01
19a90     A7 F0 03 F6 | 	mov	ptra, fp
19a94     B2 00 A0 FD | 	call	#popregs_
19a98                 | _do_setenv_ret
19a98     2D 00 64 FD | 	ret
19a9c                 | 
19a9c                 | ' 
19a9c                 | ' sub do_setdelay
19a9c                 | _do_setdelay
19a9c     02 4A 05 F6 | 	mov	COUNT_, #2
19aa0     A8 00 A0 FD | 	call	#pushregs_
19aa4     18 F0 07 F1 | 	add	ptra, #24
19aa8     EC 20 BF FD | 	call	#_pop
19aac     FD 12 02 F6 | 	mov	arg01, result1
19ab0     FE 1E 02 F6 | 	mov	local01, result2
19ab4     FF 20 02 F6 | 	mov	local02, result3
19ab8     A7 12 62 FC | 	wrlong	arg01, fp
19abc     04 4E 05 F1 | 	add	fp, #4
19ac0     A7 1E 62 FC | 	wrlong	local01, fp
19ac4     04 4E 05 F1 | 	add	fp, #4
19ac8     A7 20 62 FC | 	wrlong	local02, fp
19acc     08 4E 85 F1 | 	sub	fp, #8
19ad0     C4 20 BF FD | 	call	#_pop
19ad4     FD 20 02 F6 | 	mov	local02, result1
19ad8     0C 4E 05 F1 | 	add	fp, #12
19adc     A7 20 62 FC | 	wrlong	local02, fp
19ae0     04 4E 05 F1 | 	add	fp, #4
19ae4     A7 FC 61 FC | 	wrlong	result2, fp
19ae8     04 4E 05 F1 | 	add	fp, #4
19aec     A7 FE 61 FC | 	wrlong	result3, fp
19af0     08 4E 85 F1 | 	sub	fp, #8
19af4     A7 12 02 F6 | 	mov	arg01, fp
19af8     0C 4E 85 F1 | 	sub	fp, #12
19afc     68 C1 BF FD | 	call	#_converttoint
19b00     FD 20 02 F6 | 	mov	local02, result1
19b04     10 1F 02 F6 | 	mov	local01, local02
19b08     01 1E 66 F0 | 	shl	local01, #1
19b0c     10 1F 02 F1 | 	add	local01, local02
19b10     03 1E 66 F0 | 	shl	local01, #3
19b14     14 00 00 FF 
19b18     38 E5 05 F1 | 	add	objptr, ##10552
19b1c     F2 1E 02 F1 | 	add	local01, objptr
19b20     A7 12 02 F6 | 	mov	arg01, fp
19b24     14 00 00 FF 
19b28     38 E5 85 F1 | 	sub	objptr, ##10552
19b2c     38 C1 BF FD | 	call	#_converttoint
19b30     06 1E 06 F1 | 	add	local01, #6
19b34     0F FB 51 FC | 	wrword	result1, local01
19b38     A7 F0 03 F6 | 	mov	ptra, fp
19b3c     B2 00 A0 FD | 	call	#popregs_
19b40                 | _do_setdelay_ret
19b40     2D 00 64 FD | 	ret
19b44                 | 
19b44                 | ' 
19b44                 | ' sub do_setlen
19b44                 | _do_setlen
19b44     02 4A 05 F6 | 	mov	COUNT_, #2
19b48     A8 00 A0 FD | 	call	#pushregs_
19b4c     18 F0 07 F1 | 	add	ptra, #24
19b50     44 20 BF FD | 	call	#_pop
19b54     FD 12 02 F6 | 	mov	arg01, result1
19b58     FE 1E 02 F6 | 	mov	local01, result2
19b5c     FF 20 02 F6 | 	mov	local02, result3
19b60     A7 12 62 FC | 	wrlong	arg01, fp
19b64     04 4E 05 F1 | 	add	fp, #4
19b68     A7 1E 62 FC | 	wrlong	local01, fp
19b6c     04 4E 05 F1 | 	add	fp, #4
19b70     A7 20 62 FC | 	wrlong	local02, fp
19b74     08 4E 85 F1 | 	sub	fp, #8
19b78     1C 20 BF FD | 	call	#_pop
19b7c     FD 20 02 F6 | 	mov	local02, result1
19b80     0C 4E 05 F1 | 	add	fp, #12
19b84     A7 20 62 FC | 	wrlong	local02, fp
19b88     04 4E 05 F1 | 	add	fp, #4
19b8c     A7 FC 61 FC | 	wrlong	result2, fp
19b90     04 4E 05 F1 | 	add	fp, #4
19b94     A7 FE 61 FC | 	wrlong	result3, fp
19b98     08 4E 85 F1 | 	sub	fp, #8
19b9c     A7 12 02 F6 | 	mov	arg01, fp
19ba0     0C 4E 85 F1 | 	sub	fp, #12
19ba4     C0 C0 BF FD | 	call	#_converttoint
19ba8     FD 20 02 F6 | 	mov	local02, result1
19bac     10 1F 02 F6 | 	mov	local01, local02
19bb0     01 1E 66 F0 | 	shl	local01, #1
19bb4     10 1F 02 F1 | 	add	local01, local02
19bb8     03 1E 66 F0 | 	shl	local01, #3
19bbc     14 00 00 FF 
19bc0     38 E5 05 F1 | 	add	objptr, ##10552
19bc4     F2 1E 02 F1 | 	add	local01, objptr
19bc8     A7 12 02 F6 | 	mov	arg01, fp
19bcc     14 00 00 FF 
19bd0     38 E5 85 F1 | 	sub	objptr, ##10552
19bd4     4C C1 BF FD | 	call	#_converttofloat
19bd8     08 1E 06 F1 | 	add	local01, #8
19bdc     0F FB 61 FC | 	wrlong	result1, local01
19be0     A7 F0 03 F6 | 	mov	ptra, fp
19be4     B2 00 A0 FD | 	call	#popregs_
19be8                 | _do_setlen_ret
19be8     2D 00 64 FD | 	ret
19bec                 | 
19bec                 | ' 
19bec                 | ' sub do_setvol
19bec                 | _do_setvol
19bec     02 4A 05 F6 | 	mov	COUNT_, #2
19bf0     A8 00 A0 FD | 	call	#pushregs_
19bf4     18 F0 07 F1 | 	add	ptra, #24
19bf8     9C 1F BF FD | 	call	#_pop
19bfc     FD 12 02 F6 | 	mov	arg01, result1
19c00     FE 1E 02 F6 | 	mov	local01, result2
19c04     FF 20 02 F6 | 	mov	local02, result3
19c08     A7 12 62 FC | 	wrlong	arg01, fp
19c0c     04 4E 05 F1 | 	add	fp, #4
19c10     A7 1E 62 FC | 	wrlong	local01, fp
19c14     04 4E 05 F1 | 	add	fp, #4
19c18     A7 20 62 FC | 	wrlong	local02, fp
19c1c     08 4E 85 F1 | 	sub	fp, #8
19c20     74 1F BF FD | 	call	#_pop
19c24     FD 20 02 F6 | 	mov	local02, result1
19c28     0C 4E 05 F1 | 	add	fp, #12
19c2c     A7 20 62 FC | 	wrlong	local02, fp
19c30     04 4E 05 F1 | 	add	fp, #4
19c34     A7 FC 61 FC | 	wrlong	result2, fp
19c38     04 4E 05 F1 | 	add	fp, #4
19c3c     A7 FE 61 FC | 	wrlong	result3, fp
19c40     08 4E 85 F1 | 	sub	fp, #8
19c44     A7 12 02 F6 | 	mov	arg01, fp
19c48     0C 4E 85 F1 | 	sub	fp, #12
19c4c     18 C0 BF FD | 	call	#_converttoint
19c50     FD 20 02 F6 | 	mov	local02, result1
19c54     10 1F 02 F6 | 	mov	local01, local02
19c58     01 1E 66 F0 | 	shl	local01, #1
19c5c     10 1F 02 F1 | 	add	local01, local02
19c60     03 1E 66 F0 | 	shl	local01, #3
19c64     14 00 00 FF 
19c68     38 E5 05 F1 | 	add	objptr, ##10552
19c6c     F2 1E 02 F1 | 	add	local01, objptr
19c70     A7 12 02 F6 | 	mov	arg01, fp
19c74     14 00 00 FF 
19c78     38 E5 85 F1 | 	sub	objptr, ##10552
19c7c     A4 C0 BF FD | 	call	#_converttofloat
19c80     0C 1E 06 F1 | 	add	local01, #12
19c84     0F FB 61 FC | 	wrlong	result1, local01
19c88     A7 F0 03 F6 | 	mov	ptra, fp
19c8c     B2 00 A0 FD | 	call	#popregs_
19c90                 | _do_setvol_ret
19c90     2D 00 64 FD | 	ret
19c94                 | 
19c94                 | ' 
19c94                 | ' sub do_setpan
19c94                 | _do_setpan
19c94     02 4A 05 F6 | 	mov	COUNT_, #2
19c98     A8 00 A0 FD | 	call	#pushregs_
19c9c     18 F0 07 F1 | 	add	ptra, #24
19ca0     F4 1E BF FD | 	call	#_pop
19ca4     FD 12 02 F6 | 	mov	arg01, result1
19ca8     FE 1E 02 F6 | 	mov	local01, result2
19cac     FF 20 02 F6 | 	mov	local02, result3
19cb0     A7 12 62 FC | 	wrlong	arg01, fp
19cb4     04 4E 05 F1 | 	add	fp, #4
19cb8     A7 1E 62 FC | 	wrlong	local01, fp
19cbc     04 4E 05 F1 | 	add	fp, #4
19cc0     A7 20 62 FC | 	wrlong	local02, fp
19cc4     08 4E 85 F1 | 	sub	fp, #8
19cc8     CC 1E BF FD | 	call	#_pop
19ccc     FD 20 02 F6 | 	mov	local02, result1
19cd0     0C 4E 05 F1 | 	add	fp, #12
19cd4     A7 20 62 FC | 	wrlong	local02, fp
19cd8     04 4E 05 F1 | 	add	fp, #4
19cdc     A7 FC 61 FC | 	wrlong	result2, fp
19ce0     04 4E 05 F1 | 	add	fp, #4
19ce4     A7 FE 61 FC | 	wrlong	result3, fp
19ce8     08 4E 85 F1 | 	sub	fp, #8
19cec     A7 12 02 F6 | 	mov	arg01, fp
19cf0     0C 4E 85 F1 | 	sub	fp, #12
19cf4     70 BF BF FD | 	call	#_converttoint
19cf8     FD 20 02 F6 | 	mov	local02, result1
19cfc     10 1F 02 F6 | 	mov	local01, local02
19d00     01 1E 66 F0 | 	shl	local01, #1
19d04     10 1F 02 F1 | 	add	local01, local02
19d08     03 1E 66 F0 | 	shl	local01, #3
19d0c     14 00 00 FF 
19d10     38 E5 05 F1 | 	add	objptr, ##10552
19d14     F2 1E 02 F1 | 	add	local01, objptr
19d18     A7 12 02 F6 | 	mov	arg01, fp
19d1c     14 00 00 FF 
19d20     38 E5 85 F1 | 	sub	objptr, ##10552
19d24     FC BF BF FD | 	call	#_converttofloat
19d28     10 1E 06 F1 | 	add	local01, #16
19d2c     0F FB 61 FC | 	wrlong	result1, local01
19d30     A7 F0 03 F6 | 	mov	ptra, fp
19d34     B2 00 A0 FD | 	call	#popregs_
19d38                 | _do_setpan_ret
19d38     2D 00 64 FD | 	ret
19d3c                 | 
19d3c                 | ' 
19d3c                 | ' 
19d3c                 | ' sub do_pinwrite
19d3c                 | _do_pinwrite
19d3c     01 4A 05 F6 | 	mov	COUNT_, #1
19d40     A8 00 A0 FD | 	call	#pushregs_
19d44     18 F0 07 F1 | 	add	ptra, #24
19d48     4C 1E BF FD | 	call	#_pop
19d4c     FD 14 02 F6 | 	mov	arg02, result1
19d50     FE 12 02 F6 | 	mov	arg01, result2
19d54     FF 1E 02 F6 | 	mov	local01, result3
19d58     A7 14 62 FC | 	wrlong	arg02, fp
19d5c     04 4E 05 F1 | 	add	fp, #4
19d60     A7 12 62 FC | 	wrlong	arg01, fp
19d64     04 4E 05 F1 | 	add	fp, #4
19d68     A7 1E 62 FC | 	wrlong	local01, fp
19d6c     08 4E 85 F1 | 	sub	fp, #8
19d70     24 1E BF FD | 	call	#_pop
19d74     FF 1E 02 F6 | 	mov	local01, result3
19d78     0C 4E 05 F1 | 	add	fp, #12
19d7c     A7 FA 61 FC | 	wrlong	result1, fp
19d80     04 4E 05 F1 | 	add	fp, #4
19d84     A7 FC 61 FC | 	wrlong	result2, fp
19d88     04 4E 05 F1 | 	add	fp, #4
19d8c     A7 1E 62 FC | 	wrlong	local01, fp
19d90     08 4E 85 F1 | 	sub	fp, #8
19d94     A7 12 02 F6 | 	mov	arg01, fp
19d98     0C 4E 85 F1 | 	sub	fp, #12
19d9c     C8 BE BF FD | 	call	#_converttoint
19da0     FD 1E 02 F6 | 	mov	local01, result1
19da4     A7 12 02 F6 | 	mov	arg01, fp
19da8     BC BE BF FD | 	call	#_converttoint
19dac     FD 14 02 F6 | 	mov	arg02, result1
19db0     0F 13 02 F6 | 	mov	arg01, local01
19db4     24 6D B0 FD | 	call	#__system___pinwrite
19db8     A7 F0 03 F6 | 	mov	ptra, fp
19dbc     B2 00 A0 FD | 	call	#popregs_
19dc0                 | _do_pinwrite_ret
19dc0     2D 00 64 FD | 	ret
19dc4                 | 
19dc4                 | ' 
19dc4                 | ' sub do_pinfloat
19dc4                 | _do_pinfloat
19dc4     00 4A 05 F6 | 	mov	COUNT_, #0
19dc8     A8 00 A0 FD | 	call	#pushregs_
19dcc     0C F0 07 F1 | 	add	ptra, #12
19dd0     C4 1D BF FD | 	call	#_pop
19dd4     A7 FA 61 FC | 	wrlong	result1, fp
19dd8     04 4E 05 F1 | 	add	fp, #4
19ddc     A7 FC 61 FC | 	wrlong	result2, fp
19de0     04 4E 05 F1 | 	add	fp, #4
19de4     A7 FE 61 FC | 	wrlong	result3, fp
19de8     08 4E 85 F1 | 	sub	fp, #8
19dec     A7 12 02 F6 | 	mov	arg01, fp
19df0     74 BE BF FD | 	call	#_converttoint
19df4     50 FA 61 FD | 	fltl	result1
19df8     A7 F0 03 F6 | 	mov	ptra, fp
19dfc     B2 00 A0 FD | 	call	#popregs_
19e00                 | _do_pinfloat_ret
19e00     2D 00 64 FD | 	ret
19e04                 | 
19e04                 | ' 
19e04                 | ' sub do_pinlo
19e04                 | _do_pinlo
19e04     00 4A 05 F6 | 	mov	COUNT_, #0
19e08     A8 00 A0 FD | 	call	#pushregs_
19e0c     0C F0 07 F1 | 	add	ptra, #12
19e10     84 1D BF FD | 	call	#_pop
19e14     A7 FA 61 FC | 	wrlong	result1, fp
19e18     04 4E 05 F1 | 	add	fp, #4
19e1c     A7 FC 61 FC | 	wrlong	result2, fp
19e20     04 4E 05 F1 | 	add	fp, #4
19e24     A7 FE 61 FC | 	wrlong	result3, fp
19e28     08 4E 85 F1 | 	sub	fp, #8
19e2c     A7 12 02 F6 | 	mov	arg01, fp
19e30     34 BE BF FD | 	call	#_converttoint
19e34     58 FA 61 FD | 	drvl	result1
19e38     A7 F0 03 F6 | 	mov	ptra, fp
19e3c     B2 00 A0 FD | 	call	#popregs_
19e40                 | _do_pinlo_ret
19e40     2D 00 64 FD | 	ret
19e44                 | 
19e44                 | ' 
19e44                 | ' sub do_pinhi
19e44                 | _do_pinhi
19e44     00 4A 05 F6 | 	mov	COUNT_, #0
19e48     A8 00 A0 FD | 	call	#pushregs_
19e4c     0C F0 07 F1 | 	add	ptra, #12
19e50     44 1D BF FD | 	call	#_pop
19e54     A7 FA 61 FC | 	wrlong	result1, fp
19e58     04 4E 05 F1 | 	add	fp, #4
19e5c     A7 FC 61 FC | 	wrlong	result2, fp
19e60     04 4E 05 F1 | 	add	fp, #4
19e64     A7 FE 61 FC | 	wrlong	result3, fp
19e68     08 4E 85 F1 | 	sub	fp, #8
19e6c     A7 12 02 F6 | 	mov	arg01, fp
19e70     F4 BD BF FD | 	call	#_converttoint
19e74     59 FA 61 FD | 	drvh	result1
19e78     A7 F0 03 F6 | 	mov	ptra, fp
19e7c     B2 00 A0 FD | 	call	#popregs_
19e80                 | _do_pinhi_ret
19e80     2D 00 64 FD | 	ret
19e84                 | 
19e84                 | ' 
19e84                 | ' sub do_pintoggle
19e84                 | _do_pintoggle
19e84     00 4A 05 F6 | 	mov	COUNT_, #0
19e88     A8 00 A0 FD | 	call	#pushregs_
19e8c     0C F0 07 F1 | 	add	ptra, #12
19e90     04 1D BF FD | 	call	#_pop
19e94     A7 FA 61 FC | 	wrlong	result1, fp
19e98     04 4E 05 F1 | 	add	fp, #4
19e9c     A7 FC 61 FC | 	wrlong	result2, fp
19ea0     04 4E 05 F1 | 	add	fp, #4
19ea4     A7 FE 61 FC | 	wrlong	result3, fp
19ea8     08 4E 85 F1 | 	sub	fp, #8
19eac     A7 12 02 F6 | 	mov	arg01, fp
19eb0     B4 BD BF FD | 	call	#_converttoint
19eb4     5F FA 61 FD | 	drvnot	result1
19eb8     A7 F0 03 F6 | 	mov	ptra, fp
19ebc     B2 00 A0 FD | 	call	#popregs_
19ec0                 | _do_pintoggle_ret
19ec0     2D 00 64 FD | 	ret
19ec4                 | 
19ec4                 | ' 
19ec4                 | ' 
19ec4                 | ' sub do_pinstart
19ec4                 | _do_pinstart
19ec4     03 4A 05 F6 | 	mov	COUNT_, #3
19ec8     A8 00 A0 FD | 	call	#pushregs_
19ecc     30 F0 07 F1 | 	add	ptra, #48
19ed0     C4 1C BF FD | 	call	#_pop
19ed4     FD 16 02 F6 | 	mov	arg03, result1
19ed8     FE 14 02 F6 | 	mov	arg02, result2
19edc     FF 18 02 F6 | 	mov	arg04, result3
19ee0     A7 16 62 FC | 	wrlong	arg03, fp
19ee4     04 4E 05 F1 | 	add	fp, #4
19ee8     A7 14 62 FC | 	wrlong	arg02, fp
19eec     04 4E 05 F1 | 	add	fp, #4
19ef0     A7 18 62 FC | 	wrlong	arg04, fp
19ef4     08 4E 85 F1 | 	sub	fp, #8
19ef8     9C 1C BF FD | 	call	#_pop
19efc     FD 16 02 F6 | 	mov	arg03, result1
19f00     FE 14 02 F6 | 	mov	arg02, result2
19f04     FF 18 02 F6 | 	mov	arg04, result3
19f08     0C 4E 05 F1 | 	add	fp, #12
19f0c     A7 16 62 FC | 	wrlong	arg03, fp
19f10     04 4E 05 F1 | 	add	fp, #4
19f14     A7 14 62 FC | 	wrlong	arg02, fp
19f18     04 4E 05 F1 | 	add	fp, #4
19f1c     A7 18 62 FC | 	wrlong	arg04, fp
19f20     14 4E 85 F1 | 	sub	fp, #20
19f24     70 1C BF FD | 	call	#_pop
19f28     FD 16 02 F6 | 	mov	arg03, result1
19f2c     FE 14 02 F6 | 	mov	arg02, result2
19f30     FF 18 02 F6 | 	mov	arg04, result3
19f34     18 4E 05 F1 | 	add	fp, #24
19f38     A7 16 62 FC | 	wrlong	arg03, fp
19f3c     04 4E 05 F1 | 	add	fp, #4
19f40     A7 14 62 FC | 	wrlong	arg02, fp
19f44     04 4E 05 F1 | 	add	fp, #4
19f48     A7 18 62 FC | 	wrlong	arg04, fp
19f4c     20 4E 85 F1 | 	sub	fp, #32
19f50     44 1C BF FD | 	call	#_pop
19f54     FF 16 02 F6 | 	mov	arg03, result3
19f58     24 4E 05 F1 | 	add	fp, #36
19f5c     A7 FA 61 FC | 	wrlong	result1, fp
19f60     04 4E 05 F1 | 	add	fp, #4
19f64     A7 FC 61 FC | 	wrlong	result2, fp
19f68     04 4E 05 F1 | 	add	fp, #4
19f6c     A7 16 62 FC | 	wrlong	arg03, fp
19f70     08 4E 85 F1 | 	sub	fp, #8
19f74     A7 12 02 F6 | 	mov	arg01, fp
19f78     24 4E 85 F1 | 	sub	fp, #36
19f7c     E8 BC BF FD | 	call	#_converttoint
19f80     FD 1E 02 F6 | 	mov	local01, result1
19f84     18 4E 05 F1 | 	add	fp, #24
19f88     A7 12 02 F6 | 	mov	arg01, fp
19f8c     18 4E 85 F1 | 	sub	fp, #24
19f90     D4 BC BF FD | 	call	#_converttoint
19f94     FD 20 02 F6 | 	mov	local02, result1
19f98     0C 4E 05 F1 | 	add	fp, #12
19f9c     A7 12 02 F6 | 	mov	arg01, fp
19fa0     0C 4E 85 F1 | 	sub	fp, #12
19fa4     C0 BC BF FD | 	call	#_converttoint
19fa8     FD 22 02 F6 | 	mov	local03, result1
19fac     A7 12 02 F6 | 	mov	arg01, fp
19fb0     B4 BC BF FD | 	call	#_converttoint
19fb4     40 1E 62 FD | 	dirl	local01
19fb8     0F 21 02 FC | 	wrpin	local02, local01
19fbc     0F 23 12 FC | 	wxpin	local03, local01
19fc0     0F FB 21 FC | 	wypin	result1, local01
19fc4     41 1E 62 FD | 	dirh	local01
19fc8     A7 F0 03 F6 | 	mov	ptra, fp
19fcc     B2 00 A0 FD | 	call	#popregs_
19fd0                 | _do_pinstart_ret
19fd0     2D 00 64 FD | 	ret
19fd4                 | 
19fd4                 | ' 
19fd4                 | ' 
19fd4                 | ' sub do_wrpin
19fd4                 | _do_wrpin
19fd4     01 4A 05 F6 | 	mov	COUNT_, #1
19fd8     A8 00 A0 FD | 	call	#pushregs_
19fdc     18 F0 07 F1 | 	add	ptra, #24
19fe0     B4 1B BF FD | 	call	#_pop
19fe4     FD 14 02 F6 | 	mov	arg02, result1
19fe8     FE 12 02 F6 | 	mov	arg01, result2
19fec     FF 1E 02 F6 | 	mov	local01, result3
19ff0     A7 14 62 FC | 	wrlong	arg02, fp
19ff4     04 4E 05 F1 | 	add	fp, #4
19ff8     A7 12 62 FC | 	wrlong	arg01, fp
19ffc     04 4E 05 F1 | 	add	fp, #4
1a000     A7 1E 62 FC | 	wrlong	local01, fp
1a004     08 4E 85 F1 | 	sub	fp, #8
1a008     8C 1B BF FD | 	call	#_pop
1a00c     FF 1E 02 F6 | 	mov	local01, result3
1a010     0C 4E 05 F1 | 	add	fp, #12
1a014     A7 FA 61 FC | 	wrlong	result1, fp
1a018     04 4E 05 F1 | 	add	fp, #4
1a01c     A7 FC 61 FC | 	wrlong	result2, fp
1a020     04 4E 05 F1 | 	add	fp, #4
1a024     A7 1E 62 FC | 	wrlong	local01, fp
1a028     08 4E 85 F1 | 	sub	fp, #8
1a02c     A7 12 02 F6 | 	mov	arg01, fp
1a030     0C 4E 85 F1 | 	sub	fp, #12
1a034     30 BC BF FD | 	call	#_converttoint
1a038     FD 1E 02 F6 | 	mov	local01, result1
1a03c     A7 12 02 F6 | 	mov	arg01, fp
1a040     24 BC BF FD | 	call	#_converttoint
1a044     0F FB 01 FC | 	wrpin	result1, local01
1a048     A7 F0 03 F6 | 	mov	ptra, fp
1a04c     B2 00 A0 FD | 	call	#popregs_
1a050                 | _do_wrpin_ret
1a050     2D 00 64 FD | 	ret
1a054                 | 
1a054                 | ' 
1a054                 | ' sub do_wxpin
1a054                 | _do_wxpin
1a054     01 4A 05 F6 | 	mov	COUNT_, #1
1a058     A8 00 A0 FD | 	call	#pushregs_
1a05c     18 F0 07 F1 | 	add	ptra, #24
1a060     34 1B BF FD | 	call	#_pop
1a064     FD 14 02 F6 | 	mov	arg02, result1
1a068     FE 12 02 F6 | 	mov	arg01, result2
1a06c     FF 1E 02 F6 | 	mov	local01, result3
1a070     A7 14 62 FC | 	wrlong	arg02, fp
1a074     04 4E 05 F1 | 	add	fp, #4
1a078     A7 12 62 FC | 	wrlong	arg01, fp
1a07c     04 4E 05 F1 | 	add	fp, #4
1a080     A7 1E 62 FC | 	wrlong	local01, fp
1a084     08 4E 85 F1 | 	sub	fp, #8
1a088     0C 1B BF FD | 	call	#_pop
1a08c     FF 1E 02 F6 | 	mov	local01, result3
1a090     0C 4E 05 F1 | 	add	fp, #12
1a094     A7 FA 61 FC | 	wrlong	result1, fp
1a098     04 4E 05 F1 | 	add	fp, #4
1a09c     A7 FC 61 FC | 	wrlong	result2, fp
1a0a0     04 4E 05 F1 | 	add	fp, #4
1a0a4     A7 1E 62 FC | 	wrlong	local01, fp
1a0a8     08 4E 85 F1 | 	sub	fp, #8
1a0ac     A7 12 02 F6 | 	mov	arg01, fp
1a0b0     0C 4E 85 F1 | 	sub	fp, #12
1a0b4     B0 BB BF FD | 	call	#_converttoint
1a0b8     FD 1E 02 F6 | 	mov	local01, result1
1a0bc     A7 12 02 F6 | 	mov	arg01, fp
1a0c0     A4 BB BF FD | 	call	#_converttoint
1a0c4     0F FB 11 FC | 	wxpin	result1, local01
1a0c8     A7 F0 03 F6 | 	mov	ptra, fp
1a0cc     B2 00 A0 FD | 	call	#popregs_
1a0d0                 | _do_wxpin_ret
1a0d0     2D 00 64 FD | 	ret
1a0d4                 | 
1a0d4                 | ' 
1a0d4                 | ' sub do_wypin
1a0d4                 | _do_wypin
1a0d4     01 4A 05 F6 | 	mov	COUNT_, #1
1a0d8     A8 00 A0 FD | 	call	#pushregs_
1a0dc     18 F0 07 F1 | 	add	ptra, #24
1a0e0     B4 1A BF FD | 	call	#_pop
1a0e4     FD 14 02 F6 | 	mov	arg02, result1
1a0e8     FE 12 02 F6 | 	mov	arg01, result2
1a0ec     FF 1E 02 F6 | 	mov	local01, result3
1a0f0     A7 14 62 FC | 	wrlong	arg02, fp
1a0f4     04 4E 05 F1 | 	add	fp, #4
1a0f8     A7 12 62 FC | 	wrlong	arg01, fp
1a0fc     04 4E 05 F1 | 	add	fp, #4
1a100     A7 1E 62 FC | 	wrlong	local01, fp
1a104     08 4E 85 F1 | 	sub	fp, #8
1a108     8C 1A BF FD | 	call	#_pop
1a10c     FF 1E 02 F6 | 	mov	local01, result3
1a110     0C 4E 05 F1 | 	add	fp, #12
1a114     A7 FA 61 FC | 	wrlong	result1, fp
1a118     04 4E 05 F1 | 	add	fp, #4
1a11c     A7 FC 61 FC | 	wrlong	result2, fp
1a120     04 4E 05 F1 | 	add	fp, #4
1a124     A7 1E 62 FC | 	wrlong	local01, fp
1a128     08 4E 85 F1 | 	sub	fp, #8
1a12c     A7 12 02 F6 | 	mov	arg01, fp
1a130     0C 4E 85 F1 | 	sub	fp, #12
1a134     30 BB BF FD | 	call	#_converttoint
1a138     FD 1E 02 F6 | 	mov	local01, result1
1a13c     A7 12 02 F6 | 	mov	arg01, fp
1a140     24 BB BF FD | 	call	#_converttoint
1a144     0F FB 21 FC | 	wypin	result1, local01
1a148     A7 F0 03 F6 | 	mov	ptra, fp
1a14c     B2 00 A0 FD | 	call	#popregs_
1a150                 | _do_wypin_ret
1a150     2D 00 64 FD | 	ret
1a154                 | 
1a154                 | ' 
1a154                 | ' sub do_position
1a154                 | _do_position
1a154     01 4A 05 F6 | 	mov	COUNT_, #1
1a158     A8 00 A0 FD | 	call	#pushregs_
1a15c     18 F0 07 F1 | 	add	ptra, #24
1a160     34 1A BF FD | 	call	#_pop
1a164     FD 14 02 F6 | 	mov	arg02, result1
1a168     FE 12 02 F6 | 	mov	arg01, result2
1a16c     FF 1E 02 F6 | 	mov	local01, result3
1a170     A7 14 62 FC | 	wrlong	arg02, fp
1a174     04 4E 05 F1 | 	add	fp, #4
1a178     A7 12 62 FC | 	wrlong	arg01, fp
1a17c     04 4E 05 F1 | 	add	fp, #4
1a180     A7 1E 62 FC | 	wrlong	local01, fp
1a184     08 4E 85 F1 | 	sub	fp, #8
1a188     0C 1A BF FD | 	call	#_pop
1a18c     FF 1E 02 F6 | 	mov	local01, result3
1a190     0C 4E 05 F1 | 	add	fp, #12
1a194     A7 FA 61 FC | 	wrlong	result1, fp
1a198     04 4E 05 F1 | 	add	fp, #4
1a19c     A7 FC 61 FC | 	wrlong	result2, fp
1a1a0     04 4E 05 F1 | 	add	fp, #4
1a1a4     A7 1E 62 FC | 	wrlong	local01, fp
1a1a8     08 4E 85 F1 | 	sub	fp, #8
1a1ac     A7 12 02 F6 | 	mov	arg01, fp
1a1b0     0C 4E 85 F1 | 	sub	fp, #12
1a1b4     B0 BA BF FD | 	call	#_converttoint
1a1b8     FD 1E 02 F6 | 	mov	local01, result1
1a1bc     A7 12 02 F6 | 	mov	arg01, fp
1a1c0     A4 BA BF FD | 	call	#_converttoint
1a1c4     FD 14 02 F6 | 	mov	arg02, result1
1a1c8     0F 13 02 F6 | 	mov	arg01, local01
1a1cc     A0 4F B0 FD | 	call	#_hg010b_spin2_setcursorpos
1a1d0     A7 F0 03 F6 | 	mov	ptra, fp
1a1d4     B2 00 A0 FD | 	call	#popregs_
1a1d8                 | _do_position_ret
1a1d8     2D 00 64 FD | 	ret
1a1dc                 | 
1a1dc                 | ' 
1a1dc                 | ' sub do_poke
1a1dc                 | _do_poke
1a1dc     01 4A 05 F6 | 	mov	COUNT_, #1
1a1e0     A8 00 A0 FD | 	call	#pushregs_
1a1e4     20 F0 07 F1 | 	add	ptra, #32
1a1e8     AC 19 BF FD | 	call	#_pop
1a1ec     FD 14 02 F6 | 	mov	arg02, result1
1a1f0     FE 12 02 F6 | 	mov	arg01, result2
1a1f4     FF 1E 02 F6 | 	mov	local01, result3
1a1f8     A7 14 62 FC | 	wrlong	arg02, fp
1a1fc     04 4E 05 F1 | 	add	fp, #4
1a200     A7 12 62 FC | 	wrlong	arg01, fp
1a204     04 4E 05 F1 | 	add	fp, #4
1a208     A7 1E 62 FC | 	wrlong	local01, fp
1a20c     08 4E 85 F1 | 	sub	fp, #8
1a210     84 19 BF FD | 	call	#_pop
1a214     FF 1E 02 F6 | 	mov	local01, result3
1a218     0C 4E 05 F1 | 	add	fp, #12
1a21c     A7 FA 61 FC | 	wrlong	result1, fp
1a220     04 4E 05 F1 | 	add	fp, #4
1a224     A7 FC 61 FC | 	wrlong	result2, fp
1a228     04 4E 05 F1 | 	add	fp, #4
1a22c     A7 1E 62 FC | 	wrlong	local01, fp
1a230     08 4E 85 F1 | 	sub	fp, #8
1a234     A7 12 02 F6 | 	mov	arg01, fp
1a238     0C 4E 85 F1 | 	sub	fp, #12
1a23c     28 BA BF FD | 	call	#_converttoint
1a240     18 4E 05 F1 | 	add	fp, #24
1a244     A7 FA 61 FC | 	wrlong	result1, fp
1a248     18 4E 85 F1 | 	sub	fp, #24
1a24c     A7 12 02 F6 | 	mov	arg01, fp
1a250     14 BA BF FD | 	call	#_converttoint
1a254     1C 4E 05 F1 | 	add	fp, #28
1a258     A7 FA 61 FC | 	wrlong	result1, fp
1a25c                 | ' t1=pop() 'value
1a25c                 | ' t2=pop() 
1a25c                 | ' a=converttoint(t2) : v=converttoint(t1)
1a25c                 | ' if a<$80000 then poke a,v else pspoke a,v
1a25c     04 4E 85 F1 | 	sub	fp, #4
1a260     A7 1E 02 FB | 	rdlong	local01, fp
1a264     18 4E 85 F1 | 	sub	fp, #24
1a268     00 04 00 FF 
1a26c     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1a270     1C 00 90 3D |  if_ae	jmp	#LR__2100
1a274     18 4E 05 F1 | 	add	fp, #24
1a278     A7 12 02 FB | 	rdlong	arg01, fp
1a27c     04 4E 05 F1 | 	add	fp, #4
1a280     A7 14 02 FB | 	rdlong	arg02, fp
1a284     1C 4E 85 F1 | 	sub	fp, #28
1a288     09 15 42 FC | 	wrbyte	arg02, arg01
1a28c     18 00 90 FD | 	jmp	#LR__2101
1a290                 | LR__2100
1a290     18 4E 05 F1 | 	add	fp, #24
1a294     A7 12 02 FB | 	rdlong	arg01, fp
1a298     04 4E 05 F1 | 	add	fp, #4
1a29c     A7 14 02 FB | 	rdlong	arg02, fp
1a2a0     1C 4E 85 F1 | 	sub	fp, #28
1a2a4     10 35 B0 FD | 	call	#_pspoke
1a2a8                 | LR__2101
1a2a8     A7 F0 03 F6 | 	mov	ptra, fp
1a2ac     B2 00 A0 FD | 	call	#popregs_
1a2b0                 | _do_poke_ret
1a2b0     2D 00 64 FD | 	ret
1a2b4                 | 
1a2b4                 | ' 
1a2b4                 | ' sub do_dpoke
1a2b4                 | _do_dpoke
1a2b4     01 4A 05 F6 | 	mov	COUNT_, #1
1a2b8     A8 00 A0 FD | 	call	#pushregs_
1a2bc     20 F0 07 F1 | 	add	ptra, #32
1a2c0     D4 18 BF FD | 	call	#_pop
1a2c4     FD 14 02 F6 | 	mov	arg02, result1
1a2c8     FE 12 02 F6 | 	mov	arg01, result2
1a2cc     FF 1E 02 F6 | 	mov	local01, result3
1a2d0     A7 14 62 FC | 	wrlong	arg02, fp
1a2d4     04 4E 05 F1 | 	add	fp, #4
1a2d8     A7 12 62 FC | 	wrlong	arg01, fp
1a2dc     04 4E 05 F1 | 	add	fp, #4
1a2e0     A7 1E 62 FC | 	wrlong	local01, fp
1a2e4     08 4E 85 F1 | 	sub	fp, #8
1a2e8     AC 18 BF FD | 	call	#_pop
1a2ec     FF 1E 02 F6 | 	mov	local01, result3
1a2f0     0C 4E 05 F1 | 	add	fp, #12
1a2f4     A7 FA 61 FC | 	wrlong	result1, fp
1a2f8     04 4E 05 F1 | 	add	fp, #4
1a2fc     A7 FC 61 FC | 	wrlong	result2, fp
1a300     04 4E 05 F1 | 	add	fp, #4
1a304     A7 1E 62 FC | 	wrlong	local01, fp
1a308     08 4E 85 F1 | 	sub	fp, #8
1a30c     A7 12 02 F6 | 	mov	arg01, fp
1a310     0C 4E 85 F1 | 	sub	fp, #12
1a314     50 B9 BF FD | 	call	#_converttoint
1a318     18 4E 05 F1 | 	add	fp, #24
1a31c     A7 FA 61 FC | 	wrlong	result1, fp
1a320     18 4E 85 F1 | 	sub	fp, #24
1a324     A7 12 02 F6 | 	mov	arg01, fp
1a328     3C B9 BF FD | 	call	#_converttoint
1a32c     1C 4E 05 F1 | 	add	fp, #28
1a330     A7 FA 61 FC | 	wrlong	result1, fp
1a334                 | ' t1=pop() 'value
1a334                 | ' t2=pop() 
1a334                 | ' a=converttoint(t2) : v=converttoint(t1)
1a334                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
1a334     04 4E 85 F1 | 	sub	fp, #4
1a338     A7 1E 02 FB | 	rdlong	local01, fp
1a33c     18 4E 85 F1 | 	sub	fp, #24
1a340     00 04 00 FF 
1a344     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1a348     1C 00 90 3D |  if_ae	jmp	#LR__2110
1a34c     18 4E 05 F1 | 	add	fp, #24
1a350     A7 12 02 FB | 	rdlong	arg01, fp
1a354     04 4E 05 F1 | 	add	fp, #4
1a358     A7 14 02 FB | 	rdlong	arg02, fp
1a35c     1C 4E 85 F1 | 	sub	fp, #28
1a360     09 15 52 FC | 	wrword	arg02, arg01
1a364     18 00 90 FD | 	jmp	#LR__2111
1a368                 | LR__2110
1a368     18 4E 05 F1 | 	add	fp, #24
1a36c     A7 12 02 FB | 	rdlong	arg01, fp
1a370     04 4E 05 F1 | 	add	fp, #4
1a374     A7 14 02 FB | 	rdlong	arg02, fp
1a378     1C 4E 85 F1 | 	sub	fp, #28
1a37c     F0 33 B0 FD | 	call	#_psdpoke
1a380                 | LR__2111
1a380     A7 F0 03 F6 | 	mov	ptra, fp
1a384     B2 00 A0 FD | 	call	#popregs_
1a388                 | _do_dpoke_ret
1a388     2D 00 64 FD | 	ret
1a38c                 | 
1a38c                 | ' 
1a38c                 | ' sub do_lpoke
1a38c                 | _do_lpoke
1a38c     01 4A 05 F6 | 	mov	COUNT_, #1
1a390     A8 00 A0 FD | 	call	#pushregs_
1a394     20 F0 07 F1 | 	add	ptra, #32
1a398     FC 17 BF FD | 	call	#_pop
1a39c     FD 14 02 F6 | 	mov	arg02, result1
1a3a0     FE 12 02 F6 | 	mov	arg01, result2
1a3a4     FF 1E 02 F6 | 	mov	local01, result3
1a3a8     A7 14 62 FC | 	wrlong	arg02, fp
1a3ac     04 4E 05 F1 | 	add	fp, #4
1a3b0     A7 12 62 FC | 	wrlong	arg01, fp
1a3b4     04 4E 05 F1 | 	add	fp, #4
1a3b8     A7 1E 62 FC | 	wrlong	local01, fp
1a3bc     08 4E 85 F1 | 	sub	fp, #8
1a3c0     D4 17 BF FD | 	call	#_pop
1a3c4     FF 1E 02 F6 | 	mov	local01, result3
1a3c8     0C 4E 05 F1 | 	add	fp, #12
1a3cc     A7 FA 61 FC | 	wrlong	result1, fp
1a3d0     04 4E 05 F1 | 	add	fp, #4
1a3d4     A7 FC 61 FC | 	wrlong	result2, fp
1a3d8     04 4E 05 F1 | 	add	fp, #4
1a3dc     A7 1E 62 FC | 	wrlong	local01, fp
1a3e0     08 4E 85 F1 | 	sub	fp, #8
1a3e4     A7 12 02 F6 | 	mov	arg01, fp
1a3e8     0C 4E 85 F1 | 	sub	fp, #12
1a3ec     78 B8 BF FD | 	call	#_converttoint
1a3f0     18 4E 05 F1 | 	add	fp, #24
1a3f4     A7 FA 61 FC | 	wrlong	result1, fp
1a3f8     18 4E 85 F1 | 	sub	fp, #24
1a3fc     A7 12 02 F6 | 	mov	arg01, fp
1a400     64 B8 BF FD | 	call	#_converttoint
1a404     1C 4E 05 F1 | 	add	fp, #28
1a408     A7 FA 61 FC | 	wrlong	result1, fp
1a40c                 | ' t1=pop() 'value
1a40c                 | ' t2=pop() 
1a40c                 | ' a=converttoint(t2) : v=converttoint(t1)
1a40c                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
1a40c     04 4E 85 F1 | 	sub	fp, #4
1a410     A7 1E 02 FB | 	rdlong	local01, fp
1a414     18 4E 85 F1 | 	sub	fp, #24
1a418     00 04 00 FF 
1a41c     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1a420     1C 00 90 3D |  if_ae	jmp	#LR__2120
1a424     18 4E 05 F1 | 	add	fp, #24
1a428     A7 12 02 FB | 	rdlong	arg01, fp
1a42c     04 4E 05 F1 | 	add	fp, #4
1a430     A7 14 02 FB | 	rdlong	arg02, fp
1a434     1C 4E 85 F1 | 	sub	fp, #28
1a438     09 15 62 FC | 	wrlong	arg02, arg01
1a43c     18 00 90 FD | 	jmp	#LR__2121
1a440                 | LR__2120
1a440     18 4E 05 F1 | 	add	fp, #24
1a444     A7 12 02 FB | 	rdlong	arg01, fp
1a448     04 4E 05 F1 | 	add	fp, #4
1a44c     A7 14 02 FB | 	rdlong	arg02, fp
1a450     1C 4E 85 F1 | 	sub	fp, #28
1a454     D0 32 B0 FD | 	call	#_pslpoke
1a458                 | LR__2121
1a458     A7 F0 03 F6 | 	mov	ptra, fp
1a45c     B2 00 A0 FD | 	call	#popregs_
1a460                 | _do_lpoke_ret
1a460     2D 00 64 FD | 	ret
1a464                 | 
1a464                 | ' 
1a464                 | ' sub do_peek
1a464                 | _do_peek
1a464     00 4A 05 F6 | 	mov	COUNT_, #0
1a468     A8 00 A0 FD | 	call	#pushregs_
1a46c     14 F0 07 F1 | 	add	ptra, #20
1a470     24 17 BF FD | 	call	#_pop
1a474     A7 FA 61 FC | 	wrlong	result1, fp
1a478     04 4E 05 F1 | 	add	fp, #4
1a47c     A7 FC 61 FC | 	wrlong	result2, fp
1a480     04 4E 05 F1 | 	add	fp, #4
1a484     A7 FE 61 FC | 	wrlong	result3, fp
1a488     08 4E 85 F1 | 	sub	fp, #8
1a48c     A7 12 02 F6 | 	mov	arg01, fp
1a490     D4 B7 BF FD | 	call	#_converttoint
1a494     0C 4E 05 F1 | 	add	fp, #12
1a498     A7 FA 61 FC | 	wrlong	result1, fp
1a49c                 | ' t1=pop()
1a49c                 | ' a=converttoint(t1)
1a49c                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
1a49c     0C 4E 85 F1 | 	sub	fp, #12
1a4a0     00 04 00 FF 
1a4a4     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1a4a8     1C 00 90 3D |  if_ae	jmp	#LR__2130
1a4ac     0C 4E 05 F1 | 	add	fp, #12
1a4b0     A7 12 02 FB | 	rdlong	arg01, fp
1a4b4     09 FB C1 FA | 	rdbyte	result1, arg01
1a4b8     04 4E 05 F1 | 	add	fp, #4
1a4bc     A7 FA 61 FC | 	wrlong	result1, fp
1a4c0     10 4E 85 F1 | 	sub	fp, #16
1a4c4     20 00 90 FD | 	jmp	#LR__2131
1a4c8                 | LR__2130
1a4c8     0C 4E 05 F1 | 	add	fp, #12
1a4cc     A7 12 02 FB | 	rdlong	arg01, fp
1a4d0     0C 4E 85 F1 | 	sub	fp, #12
1a4d4     28 33 B0 FD | 	call	#_pspeek
1a4d8     FD FA E1 F8 | 	getbyte	result1, result1, #0
1a4dc     10 4E 05 F1 | 	add	fp, #16
1a4e0     A7 FA 61 FC | 	wrlong	result1, fp
1a4e4     10 4E 85 F1 | 	sub	fp, #16
1a4e8                 | LR__2131
1a4e8     08 4E 05 F1 | 	add	fp, #8
1a4ec     A7 3A 68 FC | 	wrlong	#29, fp
1a4f0     08 4E 05 F1 | 	add	fp, #8
1a4f4     A7 12 02 FB | 	rdlong	arg01, fp
1a4f8     10 4E 85 F1 | 	sub	fp, #16
1a4fc     A7 12 62 FC | 	wrlong	arg01, fp
1a500     A7 12 02 F6 | 	mov	arg01, fp
1a504     28 17 BF FD | 	call	#_push
1a508     A7 F0 03 F6 | 	mov	ptra, fp
1a50c     B2 00 A0 FD | 	call	#popregs_
1a510                 | _do_peek_ret
1a510     2D 00 64 FD | 	ret
1a514                 | 
1a514                 | ' 
1a514                 | ' sub do_dpeek
1a514                 | _do_dpeek
1a514     00 4A 05 F6 | 	mov	COUNT_, #0
1a518     A8 00 A0 FD | 	call	#pushregs_
1a51c     14 F0 07 F1 | 	add	ptra, #20
1a520     74 16 BF FD | 	call	#_pop
1a524     A7 FA 61 FC | 	wrlong	result1, fp
1a528     04 4E 05 F1 | 	add	fp, #4
1a52c     A7 FC 61 FC | 	wrlong	result2, fp
1a530     04 4E 05 F1 | 	add	fp, #4
1a534     A7 FE 61 FC | 	wrlong	result3, fp
1a538     08 4E 85 F1 | 	sub	fp, #8
1a53c     A7 12 02 F6 | 	mov	arg01, fp
1a540     24 B7 BF FD | 	call	#_converttoint
1a544     0C 4E 05 F1 | 	add	fp, #12
1a548     A7 FA 61 FC | 	wrlong	result1, fp
1a54c                 | ' t1=pop()
1a54c                 | ' a=converttoint(t1)
1a54c                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
1a54c     0C 4E 85 F1 | 	sub	fp, #12
1a550     00 04 00 FF 
1a554     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1a558     1C 00 90 3D |  if_ae	jmp	#LR__2140
1a55c     0C 4E 05 F1 | 	add	fp, #12
1a560     A7 12 02 FB | 	rdlong	arg01, fp
1a564     09 FB E1 FA | 	rdword	result1, arg01
1a568     04 4E 05 F1 | 	add	fp, #4
1a56c     A7 FA 61 FC | 	wrlong	result1, fp
1a570     10 4E 85 F1 | 	sub	fp, #16
1a574     1C 00 90 FD | 	jmp	#LR__2141
1a578                 | LR__2140
1a578     0C 4E 05 F1 | 	add	fp, #12
1a57c     A7 12 02 FB | 	rdlong	arg01, fp
1a580     0C 4E 85 F1 | 	sub	fp, #12
1a584     28 33 B0 FD | 	call	#_psdpeek
1a588     10 4E 05 F1 | 	add	fp, #16
1a58c     A7 FA 61 FC | 	wrlong	result1, fp
1a590     10 4E 85 F1 | 	sub	fp, #16
1a594                 | LR__2141
1a594     08 4E 05 F1 | 	add	fp, #8
1a598     A7 3A 68 FC | 	wrlong	#29, fp
1a59c     08 4E 05 F1 | 	add	fp, #8
1a5a0     A7 12 02 FB | 	rdlong	arg01, fp
1a5a4     10 4E 85 F1 | 	sub	fp, #16
1a5a8     A7 12 62 FC | 	wrlong	arg01, fp
1a5ac     A7 12 02 F6 | 	mov	arg01, fp
1a5b0     7C 16 BF FD | 	call	#_push
1a5b4     A7 F0 03 F6 | 	mov	ptra, fp
1a5b8     B2 00 A0 FD | 	call	#popregs_
1a5bc                 | _do_dpeek_ret
1a5bc     2D 00 64 FD | 	ret
1a5c0                 | 
1a5c0                 | ' 
1a5c0                 | ' 
1a5c0                 | ' sub do_lpeek
1a5c0                 | _do_lpeek
1a5c0     00 4A 05 F6 | 	mov	COUNT_, #0
1a5c4     A8 00 A0 FD | 	call	#pushregs_
1a5c8     14 F0 07 F1 | 	add	ptra, #20
1a5cc     C8 15 BF FD | 	call	#_pop
1a5d0     A7 FA 61 FC | 	wrlong	result1, fp
1a5d4     04 4E 05 F1 | 	add	fp, #4
1a5d8     A7 FC 61 FC | 	wrlong	result2, fp
1a5dc     04 4E 05 F1 | 	add	fp, #4
1a5e0     A7 FE 61 FC | 	wrlong	result3, fp
1a5e4     08 4E 85 F1 | 	sub	fp, #8
1a5e8     A7 12 02 F6 | 	mov	arg01, fp
1a5ec     78 B6 BF FD | 	call	#_converttoint
1a5f0     0C 4E 05 F1 | 	add	fp, #12
1a5f4     A7 FA 61 FC | 	wrlong	result1, fp
1a5f8                 | ' t1=pop()
1a5f8                 | ' a=converttoint(t1)
1a5f8                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
1a5f8     0C 4E 85 F1 | 	sub	fp, #12
1a5fc     00 04 00 FF 
1a600     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1a604     1C 00 90 3D |  if_ae	jmp	#LR__2150
1a608     0C 4E 05 F1 | 	add	fp, #12
1a60c     A7 12 02 FB | 	rdlong	arg01, fp
1a610     09 FB 01 FB | 	rdlong	result1, arg01
1a614     04 4E 05 F1 | 	add	fp, #4
1a618     A7 FA 61 FC | 	wrlong	result1, fp
1a61c     10 4E 85 F1 | 	sub	fp, #16
1a620     1C 00 90 FD | 	jmp	#LR__2151
1a624                 | LR__2150
1a624     0C 4E 05 F1 | 	add	fp, #12
1a628     A7 12 02 FB | 	rdlong	arg01, fp
1a62c     0C 4E 85 F1 | 	sub	fp, #12
1a630     24 32 B0 FD | 	call	#_pslpeek
1a634     10 4E 05 F1 | 	add	fp, #16
1a638     A7 FA 61 FC | 	wrlong	result1, fp
1a63c     10 4E 85 F1 | 	sub	fp, #16
1a640                 | LR__2151
1a640     08 4E 05 F1 | 	add	fp, #8
1a644     A7 3A 68 FC | 	wrlong	#29, fp
1a648     08 4E 05 F1 | 	add	fp, #8
1a64c     A7 12 02 FB | 	rdlong	arg01, fp
1a650     10 4E 85 F1 | 	sub	fp, #16
1a654     A7 12 62 FC | 	wrlong	arg01, fp
1a658     A7 12 02 F6 | 	mov	arg01, fp
1a65c     D0 15 BF FD | 	call	#_push
1a660     A7 F0 03 F6 | 	mov	ptra, fp
1a664     B2 00 A0 FD | 	call	#popregs_
1a668                 | _do_lpeek_ret
1a668     2D 00 64 FD | 	ret
1a66c                 | 
1a66c                 | ' 
1a66c                 | ' sub do_fre
1a66c                 | _do_fre
1a66c     01 4A 05 F6 | 	mov	COUNT_, #1
1a670     A8 00 A0 FD | 	call	#pushregs_
1a674     0C F0 07 F1 | 	add	ptra, #12
1a678     59 00 00 FF 
1a67c     B0 E5 05 F1 | 	add	objptr, ##46000
1a680     F2 12 02 FB | 	rdlong	arg01, objptr
1a684     16 00 00 FF 
1a688     54 E5 85 F1 | 	sub	objptr, ##11604
1a68c     F2 1E 02 FB | 	rdlong	local01, objptr
1a690     0F 13 82 F1 | 	sub	arg01, local01
1a694     16 00 00 FF 
1a698     E8 E5 05 F1 | 	add	objptr, ##11752
1a69c     F2 12 62 FC | 	wrlong	arg01, objptr
1a6a0     08 4E 05 F1 | 	add	fp, #8
1a6a4     A7 3A 68 FC | 	wrlong	#29, fp
1a6a8     08 4E 85 F1 | 	sub	fp, #8
1a6ac     F2 1E 02 FB | 	rdlong	local01, objptr
1a6b0     5A 00 00 FF 
1a6b4     44 E4 85 F1 | 	sub	objptr, ##46148
1a6b8     A7 1E 62 FC | 	wrlong	local01, fp
1a6bc     A7 12 02 F6 | 	mov	arg01, fp
1a6c0     6C 15 BF FD | 	call	#_push
1a6c4     A7 F0 03 F6 | 	mov	ptra, fp
1a6c8     B2 00 A0 FD | 	call	#popregs_
1a6cc                 | _do_fre_ret
1a6cc     2D 00 64 FD | 	ret
1a6d0                 | 
1a6d0                 | ' 
1a6d0                 | ' sub do_adr
1a6d0                 | _do_adr
1a6d0                 | _do_adr_ret
1a6d0     2D 00 64 FD | 	ret
1a6d4                 | 
1a6d4                 | ' 
1a6d4                 | ' sub do_getnotevalue
1a6d4                 | _do_getnotevalue
1a6d4     01 4A 05 F6 | 	mov	COUNT_, #1
1a6d8     A8 00 A0 FD | 	call	#pushregs_
1a6dc     1C F0 07 F1 | 	add	ptra, #28
1a6e0     B4 14 BF FD | 	call	#_pop
1a6e4     FF 14 02 F6 | 	mov	arg02, result3
1a6e8     10 4E 05 F1 | 	add	fp, #16
1a6ec     A7 FA 61 FC | 	wrlong	result1, fp
1a6f0     04 4E 05 F1 | 	add	fp, #4
1a6f4     A7 FC 61 FC | 	wrlong	result2, fp
1a6f8     04 4E 05 F1 | 	add	fp, #4
1a6fc     A7 14 62 FC | 	wrlong	arg02, fp
1a700     08 4E 85 F1 | 	sub	fp, #8
1a704     A7 12 02 F6 | 	mov	arg01, fp
1a708     10 4E 85 F1 | 	sub	fp, #16
1a70c     58 B5 BF FD | 	call	#_converttoint
1a710     FD 14 52 F6 | 	abs	arg02, result1 wc
1a714     0C 14 16 FD | 	qdiv	arg02, #12
1a718     0C 4E 05 F1 | 	add	fp, #12
1a71c     A7 FA 61 FC | 	wrlong	result1, fp
1a720     14 00 00 FF 
1a724     D8 E4 05 F1 | 	add	objptr, ##10456
1a728     08 4E 85 F1 | 	sub	fp, #8
1a72c     19 14 62 FD | 	getqy	arg02
1a730     0A 15 82 F6 | 	negc	arg02, arg02
1a734     02 14 66 F0 | 	shl	arg02, #2
1a738     F2 14 02 F1 | 	add	arg02, objptr
1a73c     0A 15 02 FB | 	rdlong	arg02, arg02
1a740     A7 14 62 FC | 	wrlong	arg02, fp
1a744     08 4E 05 F1 | 	add	fp, #8
1a748     A7 14 02 FB | 	rdlong	arg02, fp
1a74c     0A 15 52 F6 | 	abs	arg02, arg02 wc
1a750     0C 14 16 FD | 	qdiv	arg02, #12
1a754     0C 4E 85 F1 | 	sub	fp, #12
1a758     14 00 00 FF 
1a75c     D8 E4 85 F1 | 	sub	objptr, ##10456
1a760     18 14 62 FD | 	getqx	arg02
1a764     0A 13 82 F6 | 	negc	arg01, arg02
1a768     09 13 52 F6 | 	abs	arg01, arg01 wc
1a76c     1F 1E C6 C9 |  if_b	decod	local01, #31
1a770     00 1E 06 36 |  if_ae	mov	local01, #0
1a774     60 89 B0 FD | 	call	#__system___float_fromuns
1a778     0F FB 61 F5 | 	xor	result1, local01
1a77c     08 4E 05 F1 | 	add	fp, #8
1a780     A7 FA 61 FC | 	wrlong	result1, fp
1a784     FD 14 02 F6 | 	mov	arg02, result1
1a788     08 4E 85 F1 | 	sub	fp, #8
1a78c     1E 12 C6 F9 | 	decod	arg01, #30
1a790     2C 9C B0 FD | 	call	#__system____builtin_powf
1a794     FD 12 02 F6 | 	mov	arg01, result1
1a798     04 4E 05 F1 | 	add	fp, #4
1a79c     A7 14 02 FB | 	rdlong	arg02, fp
1a7a0     04 4E 85 F1 | 	sub	fp, #4
1a7a4     34 8D B0 FD | 	call	#__system___float_mul
1a7a8     A7 FA 61 FC | 	wrlong	result1, fp
1a7ac     10 4E 05 F1 | 	add	fp, #16
1a7b0     A7 FA 61 FC | 	wrlong	result1, fp
1a7b4     08 4E 05 F1 | 	add	fp, #8
1a7b8     A7 3C 68 FC | 	wrlong	#30, fp
1a7bc     08 4E 85 F1 | 	sub	fp, #8
1a7c0     A7 12 02 F6 | 	mov	arg01, fp
1a7c4     10 4E 85 F1 | 	sub	fp, #16
1a7c8     64 14 BF FD | 	call	#_push
1a7cc     A7 F0 03 F6 | 	mov	ptra, fp
1a7d0     B2 00 A0 FD | 	call	#popregs_
1a7d4                 | _do_getnotevalue_ret
1a7d4     2D 00 64 FD | 	ret
1a7d8                 | 
1a7d8                 | ' 
1a7d8                 | ' 
1a7d8                 | ' sub do_waitms
1a7d8                 | _do_waitms
1a7d8     01 4A 05 F6 | 	mov	COUNT_, #1
1a7dc     A8 00 A0 FD | 	call	#pushregs_
1a7e0     18 F0 07 F1 | 	add	ptra, #24
1a7e4     B0 13 BF FD | 	call	#_pop
1a7e8     A7 FA 61 FC | 	wrlong	result1, fp
1a7ec     04 4E 05 F1 | 	add	fp, #4
1a7f0     A7 FC 61 FC | 	wrlong	result2, fp
1a7f4     04 4E 05 F1 | 	add	fp, #4
1a7f8     A7 FE 61 FC | 	wrlong	result3, fp
1a7fc                 | ' 
1a7fc                 | ' t1=pop() 'value
1a7fc                 | ' 
1a7fc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
1a7fc     08 4E 85 F1 | 	sub	fp, #8
1a800     1C FE 0D F2 | 	cmp	result3, #28 wz
1a804     08 4E 05 51 |  if_ne	add	fp, #8
1a808     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1a80c     08 4E 85 51 |  if_ne	sub	fp, #8
1a810     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
1a814     A7 12 02 AB |  if_e	rdlong	arg01, fp
1a818     0C 4E 05 A1 |  if_e	add	fp, #12
1a81c     A7 12 62 AC |  if_e	wrlong	arg01, fp
1a820     0C 4E 85 A1 |  if_e	sub	fp, #12
1a824     14 00 90 AD |  if_e	jmp	#LR__2160
1a828     A7 12 02 F6 | 	mov	arg01, fp
1a82c     38 B4 BF FD | 	call	#_converttoint
1a830     0C 4E 05 F1 | 	add	fp, #12
1a834     A7 FA 61 FC | 	wrlong	result1, fp
1a838     0C 4E 85 F1 | 	sub	fp, #12
1a83c                 | LR__2160
1a83c                 | ' if t<0 then return
1a83c     0C 4E 05 F1 | 	add	fp, #12
1a840     A7 12 02 FB | 	rdlong	arg01, fp
1a844     0C 4E 85 F1 | 	sub	fp, #12
1a848     00 12 56 F2 | 	cmps	arg01, #0 wc
1a84c     B8 00 90 CD |  if_b	jmp	#LR__2165
1a850                 | ' if t < 5000 then 
1a850     0C 4E 05 F1 | 	add	fp, #12
1a854     A7 12 02 FB | 	rdlong	arg01, fp
1a858     0C 4E 85 F1 | 	sub	fp, #12
1a85c     09 00 00 FF 
1a860     88 13 56 F2 | 	cmps	arg01, ##5000 wc
1a864     14 00 90 3D |  if_ae	jmp	#LR__2161
1a868     0C 4E 05 F1 | 	add	fp, #12
1a86c     A7 12 02 FB | 	rdlong	arg01, fp
1a870     0C 4E 85 F1 | 	sub	fp, #12
1a874     A4 63 B0 FD | 	call	#__system___waitms
1a878     8C 00 90 FD | 	jmp	#LR__2164
1a87c                 | LR__2161
1a87c     10 4E 05 F1 | 	add	fp, #16
1a880     A7 02 68 FC | 	wrlong	#1, fp
1a884     04 4E 85 F1 | 	sub	fp, #4
1a888     A7 12 02 FB | 	rdlong	arg01, fp
1a88c     09 13 52 F6 | 	abs	arg01, arg01 wc
1a890     09 00 00 FF 
1a894     88 13 16 FD | 	qdiv	arg01, ##5000
1a898                 | '   for i=1 to t/5000
1a898     0C 4E 85 F1 | 	sub	fp, #12
1a89c     18 1E 62 FD | 	getqx	local01
1a8a0     0F 1F 82 F6 | 	negc	local01, local01
1a8a4     01 1E 06 F1 | 	add	local01, #1
1a8a8                 | LR__2162
1a8a8     10 4E 05 F1 | 	add	fp, #16
1a8ac     A7 12 02 FB | 	rdlong	arg01, fp
1a8b0     10 4E 85 F1 | 	sub	fp, #16
1a8b4     0F 13 52 F2 | 	cmps	arg01, local01 wc
1a8b8     28 00 90 3D |  if_ae	jmp	#LR__2163
1a8bc     0C 4E 05 F1 | 	add	fp, #12
1a8c0     A7 12 02 FB | 	rdlong	arg01, fp
1a8c4     0C 4E 85 F1 | 	sub	fp, #12
1a8c8     50 63 B0 FD | 	call	#__system___waitms
1a8cc     10 4E 05 F1 | 	add	fp, #16
1a8d0     A7 12 02 FB | 	rdlong	arg01, fp
1a8d4     01 12 06 F1 | 	add	arg01, #1
1a8d8     A7 12 62 FC | 	wrlong	arg01, fp
1a8dc     10 4E 85 F1 | 	sub	fp, #16
1a8e0     C4 FF 9F FD | 	jmp	#LR__2162
1a8e4                 | LR__2163
1a8e4     0C 4E 05 F1 | 	add	fp, #12
1a8e8     A7 1E 02 FB | 	rdlong	local01, fp
1a8ec     0F 1F 52 F6 | 	abs	local01, local01 wc
1a8f0     09 00 00 FF 
1a8f4     88 1F 16 FD | 	qdiv	local01, ##5000
1a8f8     0C 4E 85 F1 | 	sub	fp, #12
1a8fc     19 1E 62 FD | 	getqy	local01
1a900     0F 13 82 F6 | 	negc	arg01, local01
1a904     14 63 B0 FD | 	call	#__system___waitms
1a908                 | LR__2164
1a908                 | LR__2165
1a908     A7 F0 03 F6 | 	mov	ptra, fp
1a90c     B2 00 A0 FD | 	call	#popregs_
1a910                 | _do_waitms_ret
1a910     2D 00 64 FD | 	ret
1a914                 | 
1a914                 | ' 
1a914                 | ' sub do_waitvbl
1a914                 | _do_waitvbl
1a914     01 12 06 F6 | 	mov	arg01, #1
1a918     F4 48 B0 FD | 	call	#_hg010b_spin2_waitvbl
1a91c                 | _do_waitvbl_ret
1a91c     2D 00 64 FD | 	ret
1a920                 | 
1a920                 | ' 
1a920                 | ' sub do_waitclock
1a920                 | _do_waitclock
1a920     59 00 00 FF 
1a924     AC E5 05 F1 | 	add	objptr, ##45996
1a928     F2 00 02 FB | 	rdlong	_var01, objptr
1a92c                 | ' c=hkcnt
1a92c                 | ' do: loop until hkcnt<>c
1a92c                 | LR__2170
1a92c     F2 02 02 FB | 	rdlong	_var02, objptr
1a930     00 03 0A F2 | 	cmp	_var02, _var01 wz
1a934     F4 FF 9F AD |  if_e	jmp	#LR__2170
1a938     59 00 00 FF 
1a93c     AC E5 85 F1 | 	sub	objptr, ##45996
1a940                 | _do_waitclock_ret
1a940     2D 00 64 FD | 	ret
1a944                 | 
1a944                 | ' 
1a944                 | ' 
1a944                 | ' 
1a944                 | ' sub do_dir
1a944                 | _do_dir
1a944     13 4A 05 F6 | 	mov	COUNT_, #19
1a948     A8 00 A0 FD | 	call	#pushregs_
1a94c     01 00 00 FF 
1a950     38 F0 07 F1 | 	add	ptra, ##568
1a954     84 01 00 FF 
1a958     C4 13 06 F6 | 	mov	arg01, ##@LR__5457
1a95c     54 66 B0 FD | 	call	#__system___chdir
1a960                 | ' 
1a960                 | ' chdir("/sd/bas")       ' set working directory
1a960                 | ' print "Working directory: "; currentdir$ 
1a960     00 12 06 F6 | 	mov	arg01, #0
1a964     00 BA B0 FD | 	call	#__system___getiolock_0540
1a968     FD 12 02 F6 | 	mov	arg01, result1
1a96c     B8 5F B0 FD | 	call	#__system___lockmem
1a970     84 01 00 FF 
1a974     CC 15 06 F6 | 	mov	arg02, ##@LR__5458
1a978     00 12 06 F6 | 	mov	arg01, #0
1a97c     00 16 06 F6 | 	mov	arg03, #0
1a980     98 6C B0 FD | 	call	#__system___basic_print_string
1a984     52 00 00 FF 
1a988     98 E4 05 F1 | 	add	objptr, ##42136
1a98c     F2 14 02 FB | 	rdlong	arg02, objptr
1a990     52 00 00 FF 
1a994     98 E4 85 F1 | 	sub	objptr, ##42136
1a998     00 12 06 F6 | 	mov	arg01, #0
1a99c     00 16 06 F6 | 	mov	arg03, #0
1a9a0     78 6C B0 FD | 	call	#__system___basic_print_string
1a9a4     00 12 06 F6 | 	mov	arg01, #0
1a9a8     0A 14 06 F6 | 	mov	arg02, #10
1a9ac     00 16 06 F6 | 	mov	arg03, #0
1a9b0     10 6C B0 FD | 	call	#__system___basic_print_char
1a9b4     01 1E 06 F6 | 	mov	local01, #1
1a9b8     00 12 06 F6 | 	mov	arg01, #0
1a9bc     A8 B9 B0 FD | 	call	#__system___getiolock_0540
1a9c0     FD 00 68 FC | 	wrlong	#0, result1
1a9c4     00 20 06 F6 | 	mov	local02, #0
1a9c8     00 22 06 F6 | 	mov	local03, #0
1a9cc                 | ' px=0
1a9cc                 | ' for i=0 to 127: filelist(i)="" : next i
1a9cc     00 24 06 F6 | 	mov	local04, #0
1a9d0     1C 4E 05 F1 | 	add	fp, #28
1a9d4     97 12 48 FB | 	callpa	#(@LR__2181-@LR__2180)>>2,fcache_load_ptr_
1a9d8                 | LR__2180
1a9d8     12 27 02 F6 | 	mov	local05, local04
1a9dc     02 26 66 F0 | 	shl	local05, #2
1a9e0     A7 26 02 F1 | 	add	local05, fp
1a9e4     84 01 00 FF 
1a9e8     E0 29 06 F6 | 	mov	local06, ##@LR__5459
1a9ec     13 29 62 FC | 	wrlong	local06, local05
1a9f0     01 24 06 F1 | 	add	local04, #1
1a9f4     80 24 56 F2 | 	cmps	local04, #128 wc
1a9f8     DC FF 9F CD |  if_b	jmp	#LR__2180
1a9fc                 | LR__2181
1a9fc     1C 4E 85 F1 | 	sub	fp, #28
1aa00     84 01 00 FF 
1aa04     E1 13 06 F6 | 	mov	arg01, ##@LR__5460
1aa08     10 14 06 F6 | 	mov	arg02, #16
1aa0c     90 BA B0 FD | 	call	#__system___basic_dir
1aa10     FD 2A 02 F6 | 	mov	local07, result1
1aa14     00 2C 06 F6 | 	mov	local08, #0
1aa18                 | ' filename=dir$("*", fbDirectory)
1aa18                 | ' n=0
1aa18                 | ' while filename <> "" andalso filename <> nil andalso n<128
1aa18                 | LR__2182
1aa18     84 01 00 FF 
1aa1c     E3 2F 06 F6 | 	mov	local09, ##@LR__5461
1aa20     15 13 02 F6 | 	mov	arg01, local07
1aa24     17 15 02 F6 | 	mov	arg02, local09
1aa28     24 5F B0 FD | 	call	#__system___string_cmp
1aa2c     00 FA 0D F2 | 	cmp	result1, #0 wz
1aa30     68 00 90 AD |  if_e	jmp	#LR__2183
1aa34     00 2E 06 F6 | 	mov	local09, #0
1aa38     15 13 02 F6 | 	mov	arg01, local07
1aa3c     00 14 06 F6 | 	mov	arg02, #0
1aa40     0C 5F B0 FD | 	call	#__system___string_cmp
1aa44     00 FA 0D F2 | 	cmp	result1, #0 wz
1aa48     50 00 90 AD |  if_e	jmp	#LR__2183
1aa4c     80 2C 56 F2 | 	cmps	local08, #128 wc
1aa50     48 00 90 3D |  if_ae	jmp	#LR__2183
1aa54     84 01 00 FF 
1aa58     E4 13 06 F6 | 	mov	arg01, ##@LR__5462
1aa5c     15 15 02 F6 | 	mov	arg02, local07
1aa60     20 5F B0 FD | 	call	#__system___string_concat
1aa64     FD 2A 02 F6 | 	mov	local07, result1
1aa68     16 27 02 F6 | 	mov	local05, local08
1aa6c     02 26 66 F0 | 	shl	local05, #2
1aa70     1C 4E 05 F1 | 	add	fp, #28
1aa74     A7 26 02 F1 | 	add	local05, fp
1aa78     13 2B 62 FC | 	wrlong	local07, local05
1aa7c     01 2C 06 F1 | 	add	local08, #1
1aa80     00 26 06 F6 | 	mov	local05, #0
1aa84     00 12 06 F6 | 	mov	arg01, #0
1aa88     00 14 06 F6 | 	mov	arg02, #0
1aa8c     1C 4E 85 F1 | 	sub	fp, #28
1aa90     0C BA B0 FD | 	call	#__system___basic_dir
1aa94     FD 2A 02 F6 | 	mov	local07, result1
1aa98     7C FF 9F FD | 	jmp	#LR__2182
1aa9c                 | LR__2183
1aa9c                 | ' ' now sort this
1aa9c                 | ' 
1aa9c                 | ' for i =0 to n-1
1aa9c     00 24 06 F6 | 	mov	local04, #0
1aaa0     16 31 02 F6 | 	mov	local10, local08
1aaa4                 | LR__2184
1aaa4     18 25 52 F2 | 	cmps	local04, local10 wc
1aaa8     DC 00 90 3D |  if_ae	jmp	#LR__2188
1aaac     00 32 06 F6 | 	mov	local11, #0
1aab0                 | '   swapped=false
1aab0                 | '   for j=0 to n-i-2
1aab0     00 34 06 F6 | 	mov	local12, #0
1aab4     16 37 02 F6 | 	mov	local13, local08
1aab8     12 37 82 F1 | 	sub	local13, local04
1aabc     01 36 86 F1 | 	sub	local13, #1
1aac0                 | LR__2185
1aac0     1B 35 52 F2 | 	cmps	local12, local13 wc
1aac4     B0 00 90 3D |  if_ae	jmp	#LR__2187
1aac8                 | '     if filelist(j) > filelist(j+1) then
1aac8     1A 2F 02 F6 | 	mov	local09, local12
1aacc     02 2E 66 F0 | 	shl	local09, #2
1aad0     1C 4E 05 F1 | 	add	fp, #28
1aad4     A7 2E 02 F1 | 	add	local09, fp
1aad8     17 13 02 FB | 	rdlong	arg01, local09
1aadc     1A 2F 02 F6 | 	mov	local09, local12
1aae0     01 2E 06 F1 | 	add	local09, #1
1aae4     17 29 02 F6 | 	mov	local06, local09
1aae8     02 28 66 F0 | 	shl	local06, #2
1aaec     A7 1E 02 F6 | 	mov	local01, fp
1aaf0     A7 28 02 F1 | 	add	local06, fp
1aaf4     14 27 02 FB | 	rdlong	local05, local06
1aaf8     13 15 02 F6 | 	mov	arg02, local05
1aafc     1C 4E 85 F1 | 	sub	fp, #28
1ab00     4C 5E B0 FD | 	call	#__system___string_cmp
1ab04     01 FA 55 F2 | 	cmps	result1, #1 wc
1ab08     64 00 90 CD |  if_b	jmp	#LR__2186
1ab0c     1A 2F 02 F6 | 	mov	local09, local12
1ab10     01 2E 06 F1 | 	add	local09, #1
1ab14     02 2E 66 F0 | 	shl	local09, #2
1ab18     1C 4E 05 F1 | 	add	fp, #28
1ab1c     A7 2E 02 F1 | 	add	local09, fp
1ab20     17 33 02 FB | 	rdlong	local11, local09
1ab24     1A 29 02 F6 | 	mov	local06, local12
1ab28     02 28 66 F0 | 	shl	local06, #2
1ab2c     A7 28 02 F1 | 	add	local06, fp
1ab30     14 27 02 FB | 	rdlong	local05, local06
1ab34     1A 2F 02 F6 | 	mov	local09, local12
1ab38     17 29 02 F6 | 	mov	local06, local09
1ab3c     02 28 66 F0 | 	shl	local06, #2
1ab40     A7 1E 02 F6 | 	mov	local01, fp
1ab44     A7 28 02 F1 | 	add	local06, fp
1ab48     14 33 62 FC | 	wrlong	local11, local06
1ab4c     1A 21 02 F6 | 	mov	local02, local12
1ab50     01 20 06 F1 | 	add	local02, #1
1ab54     10 39 02 F6 | 	mov	local14, local02
1ab58     02 38 66 F0 | 	shl	local14, #2
1ab5c     A7 3A 02 F6 | 	mov	local15, fp
1ab60     A7 38 02 F1 | 	add	local14, fp
1ab64     1C 27 62 FC | 	wrlong	local05, local14
1ab68     01 32 66 F6 | 	neg	local11, #1
1ab6c     1C 4E 85 F1 | 	sub	fp, #28
1ab70                 | LR__2186
1ab70     01 34 06 F1 | 	add	local12, #1
1ab74     48 FF 9F FD | 	jmp	#LR__2185
1ab78                 | LR__2187
1ab78                 | ' if not swapped then exit for
1ab78     19 3D 22 F6 | 	not	local16, local11
1ab7c     00 3C 0E F2 | 	cmp	local16, #0 wz
1ab80     01 24 06 A1 |  if_e	add	local04, #1
1ab84     1C FF 9F AD |  if_e	jmp	#LR__2184
1ab88                 | LR__2188
1ab88                 | ' for i=0 to n-1
1ab88     00 24 06 F6 | 	mov	local04, #0
1ab8c     16 3F 02 F6 | 	mov	local17, local08
1ab90                 | LR__2189
1ab90     1F 25 52 F2 | 	cmps	local04, local17 wc
1ab94     94 00 90 3D |  if_ae	jmp	#LR__2191
1ab98                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
1ab98     00 12 06 F6 | 	mov	arg01, #0
1ab9c     C8 B7 B0 FD | 	call	#__system___getiolock_0540
1aba0     FD 12 02 F6 | 	mov	arg01, result1
1aba4     80 5D B0 FD | 	call	#__system___lockmem
1aba8     12 21 02 F6 | 	mov	local02, local04
1abac     02 20 66 F0 | 	shl	local02, #2
1abb0     1C 4E 05 F1 | 	add	fp, #28
1abb4     A7 38 02 F6 | 	mov	local14, fp
1abb8     A7 20 02 F1 | 	add	local02, fp
1abbc     10 15 02 FB | 	rdlong	arg02, local02
1abc0     00 1E 06 F6 | 	mov	local01, #0
1abc4     00 12 06 F6 | 	mov	arg01, #0
1abc8     00 16 06 F6 | 	mov	arg03, #0
1abcc     1C 4E 85 F1 | 	sub	fp, #28
1abd0     48 6A B0 FD | 	call	#__system___basic_print_string
1abd4     00 12 06 F6 | 	mov	arg01, #0
1abd8     8C B7 B0 FD | 	call	#__system___getiolock_0540
1abdc     FD 00 68 FC | 	wrlong	#0, result1
1abe0     40 22 06 F1 | 	add	local03, #64
1abe4     11 13 02 F6 | 	mov	arg01, local03
1abe8     C0 45 B0 FD | 	call	#_hg010b_spin2_setcursorx
1abec     00 23 56 F2 | 	cmps	local03, #256 wc
1abf0     30 00 90 CD |  if_b	jmp	#LR__2190
1abf4     00 22 06 F6 | 	mov	local03, #0
1abf8     00 12 06 F6 | 	mov	arg01, #0
1abfc     68 B7 B0 FD | 	call	#__system___getiolock_0540
1ac00     FD 12 02 F6 | 	mov	arg01, result1
1ac04     20 5D B0 FD | 	call	#__system___lockmem
1ac08     00 12 06 F6 | 	mov	arg01, #0
1ac0c     0A 14 06 F6 | 	mov	arg02, #10
1ac10     00 16 06 F6 | 	mov	arg03, #0
1ac14     AC 69 B0 FD | 	call	#__system___basic_print_char
1ac18     00 12 06 F6 | 	mov	arg01, #0
1ac1c     48 B7 B0 FD | 	call	#__system___getiolock_0540
1ac20     FD 00 68 FC | 	wrlong	#0, result1
1ac24                 | LR__2190
1ac24     01 24 06 F1 | 	add	local04, #1
1ac28     64 FF 9F FD | 	jmp	#LR__2189
1ac2c                 | LR__2191
1ac2c                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
1ac2c     80 2C 56 F2 | 	cmps	local08, #128 wc
1ac30     44 00 90 CD |  if_b	jmp	#LR__2192
1ac34     00 12 06 F6 | 	mov	arg01, #0
1ac38     2C B7 B0 FD | 	call	#__system___getiolock_0540
1ac3c     FD 12 02 F6 | 	mov	arg01, result1
1ac40     E4 5C B0 FD | 	call	#__system___lockmem
1ac44     84 01 00 FF 
1ac48     EB 15 06 F6 | 	mov	arg02, ##@LR__5463
1ac4c     00 12 06 F6 | 	mov	arg01, #0
1ac50     00 16 06 F6 | 	mov	arg03, #0
1ac54     C4 69 B0 FD | 	call	#__system___basic_print_string
1ac58     00 12 06 F6 | 	mov	arg01, #0
1ac5c     0A 14 06 F6 | 	mov	arg02, #10
1ac60     00 16 06 F6 | 	mov	arg03, #0
1ac64     5C 69 B0 FD | 	call	#__system___basic_print_char
1ac68     00 12 06 F6 | 	mov	arg01, #0
1ac6c     F8 B6 B0 FD | 	call	#__system___getiolock_0540
1ac70     FD 00 68 FC | 	wrlong	#0, result1
1ac74     00 1E 06 F6 | 	mov	local01, #0
1ac78                 | LR__2192
1ac78                 | ' print
1ac78     00 12 06 F6 | 	mov	arg01, #0
1ac7c     E8 B6 B0 FD | 	call	#__system___getiolock_0540
1ac80     FD 12 02 F6 | 	mov	arg01, result1
1ac84     A0 5C B0 FD | 	call	#__system___lockmem
1ac88     00 12 06 F6 | 	mov	arg01, #0
1ac8c     0A 14 06 F6 | 	mov	arg02, #10
1ac90     00 16 06 F6 | 	mov	arg03, #0
1ac94     2C 69 B0 FD | 	call	#__system___basic_print_char
1ac98     00 12 06 F6 | 	mov	arg01, #0
1ac9c     C8 B6 B0 FD | 	call	#__system___getiolock_0540
1aca0     FD 00 68 FC | 	wrlong	#0, result1
1aca4     00 28 06 F6 | 	mov	local06, #0
1aca8     00 2C 06 F6 | 	mov	local08, #0
1acac     00 22 06 F6 | 	mov	local03, #0
1acb0                 | ' return cursor_y
1acb0     3E E4 05 F1 | 	add	objptr, #62
1acb4     F2 40 C2 FA | 	rdbyte	local18, objptr
1acb8     3E E4 85 F1 | 	sub	objptr, #62
1acbc     85 01 00 FF 
1acc0     1D 12 06 F6 | 	mov	arg01, ##@LR__5464
1acc4     21 14 06 F6 | 	mov	arg02, #33
1acc8     D4 B7 B0 FD | 	call	#__system___basic_dir
1accc     FD 2A 02 F6 | 	mov	local07, result1
1acd0                 | ' n=0
1acd0                 | ' 
1acd0                 | ' px=0: py=v.getcursory()
1acd0                 | ' 
1acd0                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
1acd0                 | ' do while filename <> "" andalso filename <> nil andalso n<128
1acd0                 | LR__2193
1acd0     85 01 00 FF 
1acd4     1F 2E 06 F6 | 	mov	local09, ##@LR__5465
1acd8     15 13 02 F6 | 	mov	arg01, local07
1acdc     17 15 02 F6 | 	mov	arg02, local09
1ace0     6C 5C B0 FD | 	call	#__system___string_cmp
1ace4     00 FA 0D F2 | 	cmp	result1, #0 wz
1ace8     54 00 90 AD |  if_e	jmp	#LR__2194
1acec     00 2E 06 F6 | 	mov	local09, #0
1acf0     15 13 02 F6 | 	mov	arg01, local07
1acf4     00 14 06 F6 | 	mov	arg02, #0
1acf8     54 5C B0 FD | 	call	#__system___string_cmp
1acfc     00 FA 0D F2 | 	cmp	result1, #0 wz
1ad00     3C 00 90 AD |  if_e	jmp	#LR__2194
1ad04     80 2C 56 F2 | 	cmps	local08, #128 wc
1ad08     34 00 90 3D |  if_ae	jmp	#LR__2194
1ad0c     16 27 02 F6 | 	mov	local05, local08
1ad10     02 26 66 F0 | 	shl	local05, #2
1ad14     1C 4E 05 F1 | 	add	fp, #28
1ad18     A7 26 02 F1 | 	add	local05, fp
1ad1c     13 2B 62 FC | 	wrlong	local07, local05
1ad20     01 2C 06 F1 | 	add	local08, #1
1ad24     00 26 06 F6 | 	mov	local05, #0
1ad28     00 12 06 F6 | 	mov	arg01, #0
1ad2c     00 14 06 F6 | 	mov	arg02, #0
1ad30     1C 4E 85 F1 | 	sub	fp, #28
1ad34     68 B7 B0 FD | 	call	#__system___basic_dir
1ad38     FD 2A 02 F6 | 	mov	local07, result1
1ad3c     90 FF 9F FD | 	jmp	#LR__2193
1ad40                 | LR__2194
1ad40                 | ' 
1ad40                 | ' for i =0 to n-1
1ad40     00 24 06 F6 | 	mov	local04, #0
1ad44                 | LR__2195
1ad44     16 25 52 F2 | 	cmps	local04, local08 wc
1ad48     D8 00 90 3D |  if_ae	jmp	#LR__2199
1ad4c     00 32 06 F6 | 	mov	local11, #0
1ad50                 | '   swapped=false
1ad50                 | '   for j=0 to n-i-2
1ad50     00 34 06 F6 | 	mov	local12, #0
1ad54     16 43 02 F6 | 	mov	local19, local08
1ad58     12 43 82 F1 | 	sub	local19, local04
1ad5c     01 42 86 F1 | 	sub	local19, #1
1ad60                 | LR__2196
1ad60     21 35 52 F2 | 	cmps	local12, local19 wc
1ad64     AC 00 90 3D |  if_ae	jmp	#LR__2198
1ad68                 | '     if filelist(j) > filelist(j+1) then
1ad68     1A 2F 02 F6 | 	mov	local09, local12
1ad6c     02 2E 66 F0 | 	shl	local09, #2
1ad70     1C 4E 05 F1 | 	add	fp, #28
1ad74     A7 2E 02 F1 | 	add	local09, fp
1ad78     17 13 02 FB | 	rdlong	arg01, local09
1ad7c     1A 2F 02 F6 | 	mov	local09, local12
1ad80     01 2E 06 F1 | 	add	local09, #1
1ad84     17 29 02 F6 | 	mov	local06, local09
1ad88     02 28 66 F0 | 	shl	local06, #2
1ad8c     A7 1E 02 F6 | 	mov	local01, fp
1ad90     A7 28 02 F1 | 	add	local06, fp
1ad94     14 27 02 FB | 	rdlong	local05, local06
1ad98     13 15 02 F6 | 	mov	arg02, local05
1ad9c     1C 4E 85 F1 | 	sub	fp, #28
1ada0     AC 5B B0 FD | 	call	#__system___string_cmp
1ada4     01 FA 55 F2 | 	cmps	result1, #1 wc
1ada8     60 00 90 CD |  if_b	jmp	#LR__2197
1adac     1A 2F 02 F6 | 	mov	local09, local12
1adb0     01 2E 06 F1 | 	add	local09, #1
1adb4     02 2E 66 F0 | 	shl	local09, #2
1adb8     1C 4E 05 F1 | 	add	fp, #28
1adbc     A7 2E 02 F1 | 	add	local09, fp
1adc0     17 3D 02 FB | 	rdlong	local16, local09
1adc4     1A 29 02 F6 | 	mov	local06, local12
1adc8     02 28 66 F0 | 	shl	local06, #2
1adcc     A7 28 02 F1 | 	add	local06, fp
1add0     14 27 02 FB | 	rdlong	local05, local06
1add4     1A 2F 02 F6 | 	mov	local09, local12
1add8     17 29 02 F6 | 	mov	local06, local09
1addc     02 28 66 F0 | 	shl	local06, #2
1ade0     A7 1E 02 F6 | 	mov	local01, fp
1ade4     A7 28 02 F1 | 	add	local06, fp
1ade8     14 3D 62 FC | 	wrlong	local16, local06
1adec     1A 39 02 F6 | 	mov	local14, local12
1adf0     01 38 06 F1 | 	add	local14, #1
1adf4     02 38 66 F0 | 	shl	local14, #2
1adf8     A7 3A 02 F6 | 	mov	local15, fp
1adfc     A7 38 02 F1 | 	add	local14, fp
1ae00     1C 27 62 FC | 	wrlong	local05, local14
1ae04     01 32 66 F6 | 	neg	local11, #1
1ae08     1C 4E 85 F1 | 	sub	fp, #28
1ae0c                 | LR__2197
1ae0c     01 34 06 F1 | 	add	local12, #1
1ae10     4C FF 9F FD | 	jmp	#LR__2196
1ae14                 | LR__2198
1ae14                 | ' if not swapped then exit for
1ae14     19 3D 22 F6 | 	not	local16, local11
1ae18     00 3C 0E F2 | 	cmp	local16, #0 wz
1ae1c     01 24 06 A1 |  if_e	add	local04, #1
1ae20     20 FF 9F AD |  if_e	jmp	#LR__2195
1ae24                 | LR__2199
1ae24                 | ' for i=0 to n-1
1ae24     00 24 06 F6 | 	mov	local04, #0
1ae28                 | LR__2200
1ae28     16 25 52 F2 | 	cmps	local04, local08 wc
1ae2c     8C 00 90 3D |  if_ae	jmp	#LR__2202
1ae30                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
1ae30     00 12 06 F6 | 	mov	arg01, #0
1ae34     30 B5 B0 FD | 	call	#__system___getiolock_0540
1ae38     FD 12 02 F6 | 	mov	arg01, result1
1ae3c     E8 5A B0 FD | 	call	#__system___lockmem
1ae40     12 21 02 F6 | 	mov	local02, local04
1ae44     02 20 66 F0 | 	shl	local02, #2
1ae48     1C 4E 05 F1 | 	add	fp, #28
1ae4c     A7 20 02 F1 | 	add	local02, fp
1ae50     10 15 02 FB | 	rdlong	arg02, local02
1ae54     00 12 06 F6 | 	mov	arg01, #0
1ae58     00 16 06 F6 | 	mov	arg03, #0
1ae5c     1C 4E 85 F1 | 	sub	fp, #28
1ae60     B8 67 B0 FD | 	call	#__system___basic_print_string
1ae64     00 12 06 F6 | 	mov	arg01, #0
1ae68     FC B4 B0 FD | 	call	#__system___getiolock_0540
1ae6c     FD 00 68 FC | 	wrlong	#0, result1
1ae70     40 22 06 F1 | 	add	local03, #64
1ae74     11 13 02 F6 | 	mov	arg01, local03
1ae78     30 43 B0 FD | 	call	#_hg010b_spin2_setcursorx
1ae7c     00 23 56 F2 | 	cmps	local03, #256 wc
1ae80     30 00 90 CD |  if_b	jmp	#LR__2201
1ae84     00 22 06 F6 | 	mov	local03, #0
1ae88     00 12 06 F6 | 	mov	arg01, #0
1ae8c     D8 B4 B0 FD | 	call	#__system___getiolock_0540
1ae90     FD 12 02 F6 | 	mov	arg01, result1
1ae94     90 5A B0 FD | 	call	#__system___lockmem
1ae98     00 12 06 F6 | 	mov	arg01, #0
1ae9c     0A 14 06 F6 | 	mov	arg02, #10
1aea0     00 16 06 F6 | 	mov	arg03, #0
1aea4     1C 67 B0 FD | 	call	#__system___basic_print_char
1aea8     00 12 06 F6 | 	mov	arg01, #0
1aeac     B8 B4 B0 FD | 	call	#__system___getiolock_0540
1aeb0     FD 00 68 FC | 	wrlong	#0, result1
1aeb4                 | LR__2201
1aeb4     01 24 06 F1 | 	add	local04, #1
1aeb8     6C FF 9F FD | 	jmp	#LR__2200
1aebc                 | LR__2202
1aebc                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
1aebc     80 2C 56 F2 | 	cmps	local08, #128 wc
1aec0     40 00 90 CD |  if_b	jmp	#LR__2203
1aec4     00 12 06 F6 | 	mov	arg01, #0
1aec8     9C B4 B0 FD | 	call	#__system___getiolock_0540
1aecc     FD 12 02 F6 | 	mov	arg01, result1
1aed0     54 5A B0 FD | 	call	#__system___lockmem
1aed4     85 01 00 FF 
1aed8     20 14 06 F6 | 	mov	arg02, ##@LR__5466
1aedc     00 12 06 F6 | 	mov	arg01, #0
1aee0     00 16 06 F6 | 	mov	arg03, #0
1aee4     34 67 B0 FD | 	call	#__system___basic_print_string
1aee8     00 12 06 F6 | 	mov	arg01, #0
1aeec     0A 14 06 F6 | 	mov	arg02, #10
1aef0     00 16 06 F6 | 	mov	arg03, #0
1aef4     CC 66 B0 FD | 	call	#__system___basic_print_char
1aef8     00 12 06 F6 | 	mov	arg01, #0
1aefc     68 B4 B0 FD | 	call	#__system___getiolock_0540
1af00     FD 00 68 FC | 	wrlong	#0, result1
1af04                 | LR__2203
1af04                 | ' print
1af04     00 12 06 F6 | 	mov	arg01, #0
1af08     5C B4 B0 FD | 	call	#__system___getiolock_0540
1af0c     FD 12 02 F6 | 	mov	arg01, result1
1af10     14 5A B0 FD | 	call	#__system___lockmem
1af14     00 12 06 F6 | 	mov	arg01, #0
1af18     0A 14 06 F6 | 	mov	arg02, #10
1af1c     00 16 06 F6 | 	mov	arg03, #0
1af20     A0 66 B0 FD | 	call	#__system___basic_print_char
1af24     00 12 06 F6 | 	mov	arg01, #0
1af28     3C B4 B0 FD | 	call	#__system___getiolock_0540
1af2c     FD 00 68 FC | 	wrlong	#0, result1
1af30     A7 F0 03 F6 | 	mov	ptra, fp
1af34     B2 00 A0 FD | 	call	#popregs_
1af38                 | _do_dir_ret
1af38     2D 00 64 FD | 	ret
1af3c                 | 
1af3c                 | ' 
1af3c                 | ' sub do_if
1af3c                 | _do_if
1af3c     05 4A 05 F6 | 	mov	COUNT_, #5
1af40     A8 00 A0 FD | 	call	#pushregs_
1af44     50 0C BF FD | 	call	#_pop
1af48     FD 1E 0A F6 | 	mov	local01, result1 wz
1af4c     FE 20 02 F6 | 	mov	local02, result2
1af50     FF 22 02 F6 | 	mov	local03, result3
1af54                 | ' t1=pop()
1af54                 | ' ' if uresult=0, jump over else
1af54                 | ' if t1.result.uresult = 0 then 
1af54     BC 00 90 5D |  if_ne	jmp	#LR__2212
1af58                 | '   for i=lineptr_e to lineptr-1
1af58     4A 00 00 FF 
1af5c     80 E4 05 F1 | 	add	objptr, ##38016
1af60     F2 24 02 FB | 	rdlong	local04, objptr
1af64     04 E4 85 F1 | 	sub	objptr, #4
1af68     F2 26 02 FB | 	rdlong	local05, objptr
1af6c     4A 00 00 FF 
1af70     7C E4 85 F1 | 	sub	objptr, ##38012
1af74                 | LR__2210
1af74     13 25 52 F2 | 	cmps	local04, local05 wc
1af78     78 00 90 3D |  if_ae	jmp	#LR__2211
1af7c     12 FF 01 F6 | 	mov	result3, local04
1af80     01 FE 65 F0 | 	shl	result3, #1
1af84     12 FF 01 F1 | 	add	result3, local04
1af88     02 FE 65 F0 | 	shl	result3, #2
1af8c     47 00 00 FF 
1af90     7C E4 05 F1 | 	add	objptr, ##36476
1af94     F2 FE 01 F1 | 	add	result3, objptr
1af98     FF 1E 02 FB | 	rdlong	local01, result3
1af9c     04 FE 05 F1 | 	add	result3, #4
1afa0     FF FC 01 FB | 	rdlong	result2, result3
1afa4     12 FF 01 F6 | 	mov	result3, local04
1afa8     01 FE 65 F0 | 	shl	result3, #1
1afac     12 FF 01 F1 | 	add	result3, local04
1afb0     02 FE 65 F0 | 	shl	result3, #2
1afb4     F2 FE 01 F1 | 	add	result3, objptr
1afb8     08 FE 05 F1 | 	add	result3, #8
1afbc     FF FE 01 FB | 	rdlong	result3, result3
1afc0     FE 20 02 F6 | 	mov	local02, result2
1afc4     FF 22 02 F6 | 	mov	local03, result3
1afc8                 | '     t1=compiledline(i)
1afc8                 | '     if t1.result_type=token_else then lineptr_e=i : return
1afc8     5A 22 0E F2 | 	cmp	local03, #90 wz
1afcc     47 00 00 FF 
1afd0     7C E4 85 F1 | 	sub	objptr, ##36476
1afd4     4A 00 00 AF 
1afd8     80 E4 05 A1 |  if_e	add	objptr, ##38016
1afdc     F2 24 62 AC |  if_e	wrlong	local04, objptr
1afe0     4A 00 00 AF 
1afe4     80 E4 85 A1 |  if_e	sub	objptr, ##38016
1afe8     28 00 90 AD |  if_e	jmp	#LR__2213
1afec     01 24 06 F1 | 	add	local04, #1
1aff0     80 FF 9F FD | 	jmp	#LR__2210
1aff4                 | LR__2211
1aff4     4A 00 00 FF 
1aff8     7C E4 05 F1 | 	add	objptr, ##38012
1affc     F2 26 02 FB | 	rdlong	local05, objptr
1b000     01 26 86 F1 | 	sub	local05, #1
1b004     04 E4 05 F1 | 	add	objptr, #4
1b008     F2 26 62 FC | 	wrlong	local05, objptr
1b00c     4A 00 00 FF 
1b010     80 E4 85 F1 | 	sub	objptr, ##38016
1b014                 | LR__2212
1b014                 | LR__2213
1b014     A7 F0 03 F6 | 	mov	ptra, fp
1b018     B2 00 A0 FD | 	call	#popregs_
1b01c                 | _do_if_ret
1b01c     2D 00 64 FD | 	ret
1b020                 | 
1b020                 | ' 
1b020                 | ' sub do_else
1b020                 | _do_else
1b020     4A 00 00 FF 
1b024     7C E4 05 F1 | 	add	objptr, ##38012
1b028     F2 00 02 FB | 	rdlong	_var01, objptr
1b02c     01 00 86 F1 | 	sub	_var01, #1
1b030     04 E4 05 F1 | 	add	objptr, #4
1b034     F2 00 62 FC | 	wrlong	_var01, objptr
1b038     4A 00 00 FF 
1b03c     80 E4 85 F1 | 	sub	objptr, ##38016
1b040                 | _do_else_ret
1b040     2D 00 64 FD | 	ret
1b044                 | 
1b044                 | ' 
1b044                 | ' sub do_rad
1b044                 | _do_rad
1b044     59 00 00 FF 
1b048     C0 E5 05 F1 | 	add	objptr, ##46016
1b04c     00 C0 9F FF 
1b050     F2 00 68 FC | 	wrlong	##1065353216, objptr
1b054     04 E4 05 F1 | 	add	objptr, #4
1b058     00 C0 9F FF 
1b05c     F2 00 68 FC | 	wrlong	##1065353216, objptr
1b060     59 00 00 FF 
1b064     C4 E5 85 F1 | 	sub	objptr, ##46020
1b068                 | _do_rad_ret
1b068     2D 00 64 FD | 	ret
1b06c                 | 
1b06c                 | ' 
1b06c                 | ' sub do_deg
1b06c                 | _do_deg
1b06c     59 00 00 FF 
1b070     C0 E5 05 F1 | 	add	objptr, ##46016
1b074     7D 47 9E FF 
1b078     F2 6A 68 FC | 	wrlong	##1016003125, objptr
1b07c     04 E4 05 F1 | 	add	objptr, #4
1b080     97 32 A1 FF 
1b084     F2 C2 69 FC | 	wrlong	##1113927393, objptr
1b088     59 00 00 FF 
1b08c     C4 E5 85 F1 | 	sub	objptr, ##46020
1b090                 | _do_deg_ret
1b090     2D 00 64 FD | 	ret
1b094                 | 
1b094                 | ' 
1b094                 | ' sub do_round
1b094                 | _do_round
1b094     00 4A 05 F6 | 	mov	COUNT_, #0
1b098     A8 00 A0 FD | 	call	#pushregs_
1b09c     0C F0 07 F1 | 	add	ptra, #12
1b0a0     F4 0A BF FD | 	call	#_pop
1b0a4     A7 FA 61 FC | 	wrlong	result1, fp
1b0a8     04 4E 05 F1 | 	add	fp, #4
1b0ac     A7 FC 61 FC | 	wrlong	result2, fp
1b0b0     04 4E 05 F1 | 	add	fp, #4
1b0b4     A7 FE 61 FC | 	wrlong	result3, fp
1b0b8     08 4E 85 F1 | 	sub	fp, #8
1b0bc     A7 12 02 F6 | 	mov	arg01, fp
1b0c0     A4 AB BF FD | 	call	#_converttoint
1b0c4     A7 FA 61 FC | 	wrlong	result1, fp
1b0c8     08 4E 05 F1 | 	add	fp, #8
1b0cc     A7 38 68 FC | 	wrlong	#28, fp
1b0d0     08 4E 85 F1 | 	sub	fp, #8
1b0d4     A7 12 02 F6 | 	mov	arg01, fp
1b0d8     54 0B BF FD | 	call	#_push
1b0dc     A7 F0 03 F6 | 	mov	ptra, fp
1b0e0     B2 00 A0 FD | 	call	#popregs_
1b0e4                 | _do_round_ret
1b0e4     2D 00 64 FD | 	ret
1b0e8                 | 
1b0e8                 | ' 
1b0e8                 | ' sub do_int
1b0e8                 | _do_int
1b0e8     02 4A 05 F6 | 	mov	COUNT_, #2
1b0ec     A8 00 A0 FD | 	call	#pushregs_
1b0f0     10 F0 07 F1 | 	add	ptra, #16
1b0f4     A0 0A BF FD | 	call	#_pop
1b0f8     FE 1E 02 F6 | 	mov	local01, result2
1b0fc     FF 20 02 F6 | 	mov	local02, result3
1b100     A7 FA 61 FC | 	wrlong	result1, fp
1b104     04 4E 05 F1 | 	add	fp, #4
1b108     A7 1E 62 FC | 	wrlong	local01, fp
1b10c     04 4E 05 F1 | 	add	fp, #4
1b110     A7 20 62 FC | 	wrlong	local02, fp
1b114                 | ' 
1b114                 | ' t1=pop()
1b114                 | ' select case t1.result_type
1b114     08 4E 85 F1 | 	sub	fp, #8
1b118     1E 20 0E F2 | 	cmp	local02, #30 wz
1b11c     14 00 90 AD |  if_e	jmp	#LR__2220
1b120     1F 20 0E F2 | 	cmp	local02, #31 wz
1b124     20 00 90 AD |  if_e	jmp	#LR__2221
1b128     2B 20 0E F2 | 	cmp	local02, #43 wz
1b12c     34 00 90 AD |  if_e	jmp	#LR__2222
1b130     50 00 90 FD | 	jmp	#LR__2223
1b134                 | LR__2220
1b134     A7 12 02 FB | 	rdlong	arg01, fp
1b138     00 14 06 F6 | 	mov	arg02, #0
1b13c     64 88 B0 FD | 	call	#__system___float_tointeger
1b140     A7 FA 61 FC | 	wrlong	result1, fp
1b144     3C 00 90 FD | 	jmp	#LR__2223
1b148                 | LR__2221
1b148     A7 12 02 FB | 	rdlong	arg01, fp
1b14c     74 8B B0 FD | 	call	#__system____builtin_atof
1b150     FD 12 02 F6 | 	mov	arg01, result1
1b154     00 14 06 F6 | 	mov	arg02, #0
1b158     48 88 B0 FD | 	call	#__system___float_tointeger
1b15c     A7 FA 61 FC | 	wrlong	result1, fp
1b160     20 00 90 FD | 	jmp	#LR__2223
1b164                 | LR__2222
1b164     A7 12 02 FB | 	rdlong	arg01, fp
1b168     D8 62 BF FD | 	call	#_convertstring
1b16c     FD 12 02 F6 | 	mov	arg01, result1
1b170     50 8B B0 FD | 	call	#__system____builtin_atof
1b174     FD 12 02 F6 | 	mov	arg01, result1
1b178     00 14 06 F6 | 	mov	arg02, #0
1b17c     24 88 B0 FD | 	call	#__system___float_tointeger
1b180     A7 FA 61 FC | 	wrlong	result1, fp
1b184                 | LR__2223
1b184     08 4E 05 F1 | 	add	fp, #8
1b188     A7 38 68 FC | 	wrlong	#28, fp
1b18c     08 4E 85 F1 | 	sub	fp, #8
1b190     A7 12 02 F6 | 	mov	arg01, fp
1b194     98 0A BF FD | 	call	#_push
1b198     A7 F0 03 F6 | 	mov	ptra, fp
1b19c     B2 00 A0 FD | 	call	#popregs_
1b1a0                 | _do_int_ret
1b1a0     2D 00 64 FD | 	ret
1b1a4                 | 
1b1a4                 | ' 
1b1a4                 | ' 
1b1a4                 | ' sub do_nothing
1b1a4                 | _do_nothing
1b1a4                 | _do_nothing_ret
1b1a4     2D 00 64 FD | 	ret
1b1a8                 | 
1b1a8                 | ' 
1b1a8                 | ' sub do_brun
1b1a8                 | _do_brun
1b1a8     08 4A 05 F6 | 	mov	COUNT_, #8
1b1ac     A8 00 A0 FD | 	call	#pushregs_
1b1b0     E4 09 BF FD | 	call	#_pop
1b1b4     FE 1A 02 F6 | 	mov	arg05, result2
1b1b8     FF 18 02 F6 | 	mov	arg04, result3
1b1bc     FD 1E 02 F6 | 	mov	local01, result1
1b1c0     0D 21 02 F6 | 	mov	local02, arg05
1b1c4     0C 23 02 F6 | 	mov	local03, arg04
1b1c8                 | ' 
1b1c8                 | ' t1=pop() 
1b1c8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1b1c8     2B 22 0E F2 | 	cmp	local03, #43 wz
1b1cc     10 00 90 5D |  if_ne	jmp	#LR__2230
1b1d0     0F 13 02 F6 | 	mov	arg01, local01
1b1d4     6C 62 BF FD | 	call	#_convertstring
1b1d8     FD 1E 02 F6 | 	mov	local01, result1
1b1dc     1F 22 06 F6 | 	mov	local03, #31
1b1e0                 | LR__2230
1b1e0                 | ' if t1.result_type=result_string then
1b1e0     1F 22 0E F2 | 	cmp	local03, #31 wz
1b1e4     EC 01 90 5D |  if_ne	jmp	#LR__2234
1b1e8     0F 25 02 F6 | 	mov	local04, local01
1b1ec                 | '   filename=t1.result.sresult
1b1ec                 | '   if left$(filename,1)="/" then 
1b1ec     12 13 02 F6 | 	mov	arg01, local04
1b1f0     01 14 06 F6 | 	mov	arg02, #1
1b1f4     AC 77 B0 FD | 	call	#__system__Left_S
1b1f8     FD 12 02 F6 | 	mov	arg01, result1
1b1fc     85 01 00 FF 
1b200     52 14 06 F6 | 	mov	arg02, ##@LR__5467
1b204     48 57 B0 FD | 	call	#__system___string_cmp
1b208     00 FA 0D F2 | 	cmp	result1, #0 wz
1b20c     12 27 02 A6 |  if_e	mov	local05, local04
1b210     14 00 90 AD |  if_e	jmp	#LR__2231
1b214     85 01 00 FF 
1b218     54 12 06 F6 | 	mov	arg01, ##@LR__5468
1b21c     12 15 02 F6 | 	mov	arg02, local04
1b220     60 57 B0 FD | 	call	#__system___string_concat
1b224     FD 26 02 F6 | 	mov	local05, result1
1b228                 | LR__2231
1b228                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
1b228                 | '   open fullfilename for input as #9
1b228     09 12 06 F6 | 	mov	arg01, #9
1b22c     13 15 02 F6 | 	mov	arg02, local05
1b230     00 16 06 F6 | 	mov	arg03, #0
1b234     F4 62 B0 FD | 	call	#__system___basic_open_string
1b238     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1b23c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1b240     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1b244     FD 28 0A F6 | 	mov	local06, result1 wz
1b248                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
1b248     8C 00 90 AD |  if_e	jmp	#LR__2232
1b24c     00 12 06 F6 | 	mov	arg01, #0
1b250     14 B1 B0 FD | 	call	#__system___getiolock_0540
1b254     FD 12 02 F6 | 	mov	arg01, result1
1b258     CC 56 B0 FD | 	call	#__system___lockmem
1b25c     85 01 00 FF 
1b260     5D 14 06 F6 | 	mov	arg02, ##@LR__5469
1b264     00 12 06 F6 | 	mov	arg01, #0
1b268     00 16 06 F6 | 	mov	arg03, #0
1b26c     AC 63 B0 FD | 	call	#__system___basic_print_string
1b270     00 12 06 F6 | 	mov	arg01, #0
1b274     14 15 02 F6 | 	mov	arg02, local06
1b278     00 16 06 F6 | 	mov	arg03, #0
1b27c     0A 18 06 F6 | 	mov	arg04, #10
1b280     DC 63 B0 FD | 	call	#__system___basic_print_integer
1b284     85 01 00 FF 
1b288     6B 14 06 F6 | 	mov	arg02, ##@LR__5470
1b28c     00 12 06 F6 | 	mov	arg01, #0
1b290     00 16 06 F6 | 	mov	arg03, #0
1b294     84 63 B0 FD | 	call	#__system___basic_print_string
1b298     14 13 02 F6 | 	mov	arg01, local06
1b29c     50 7D B0 FD | 	call	#__system___strerror
1b2a0     FD 14 02 F6 | 	mov	arg02, result1
1b2a4     00 12 06 F6 | 	mov	arg01, #0
1b2a8     00 16 06 F6 | 	mov	arg03, #0
1b2ac     6C 63 B0 FD | 	call	#__system___basic_print_string
1b2b0     00 12 06 F6 | 	mov	arg01, #0
1b2b4     0A 14 06 F6 | 	mov	arg02, #10
1b2b8     00 16 06 F6 | 	mov	arg03, #0
1b2bc     04 63 B0 FD | 	call	#__system___basic_print_char
1b2c0     00 12 06 F6 | 	mov	arg01, #0
1b2c4     A0 B0 B0 FD | 	call	#__system___getiolock_0540
1b2c8     FD 00 68 FC | 	wrlong	#0, result1
1b2cc     09 12 06 F6 | 	mov	arg01, #9
1b2d0     C4 A6 B0 FD | 	call	#__system__close
1b2d4     FC 00 90 FD | 	jmp	#LR__2235
1b2d8                 | LR__2232
1b2d8     01 2A 06 F6 | 	mov	local07, #1
1b2dc     00 2C 06 F6 | 	mov	local08, #0
1b2e0                 | '   do
1b2e0                 | LR__2233
1b2e0                 | '     get #9,pos,block(0),1024,r : pos+=r	
1b2e0     56 00 00 FF 
1b2e4     B8 E4 05 F1 | 	add	objptr, ##44216
1b2e8     F2 16 02 F6 | 	mov	arg03, objptr
1b2ec     56 00 00 FF 
1b2f0     B8 E4 85 F1 | 	sub	objptr, ##44216
1b2f4     09 12 06 F6 | 	mov	arg01, #9
1b2f8     15 15 02 F6 | 	mov	arg02, local07
1b2fc     0A 18 C6 F9 | 	decod	arg04, #10
1b300     01 1A 06 F6 | 	mov	arg05, #1
1b304     90 64 B0 FD | 	call	#__system___basic_get
1b308     FD 28 02 F6 | 	mov	local06, result1
1b30c     FD 2A 02 F1 | 	add	local07, result1
1b310     56 00 00 FF 
1b314     B8 E4 05 F1 | 	add	objptr, ##44216
1b318     F2 12 02 F6 | 	mov	arg01, objptr
1b31c     16 15 02 F6 | 	mov	arg02, local08
1b320     0A 16 C6 F9 | 	decod	arg03, #10
1b324     4A 00 00 FF 
1b328     EC E5 85 F1 | 	sub	objptr, ##38380
1b32c     54 4A B0 FD | 	call	#_psram_spin2_write
1b330     0B 00 00 FF 
1b334     CC E4 85 F1 | 	sub	objptr, ##5836
1b338     14 2D 02 F1 | 	add	local08, local06
1b33c     02 00 00 FF 
1b340     00 28 0E F2 | 	cmp	local06, ##1024 wz
1b344     E0 03 00 AF 
1b348     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
1b34c     90 FF 9F 8D |  if_c_and_z	jmp	#LR__2233
1b350     36 00 00 FF 
1b354     FC E5 05 F1 | 	add	objptr, ##28156
1b358     F2 12 02 FB | 	rdlong	arg01, objptr
1b35c     03 12 62 FD | 	cogstop	arg01
1b360     04 E4 05 F1 | 	add	objptr, #4
1b364     F2 12 02 FB | 	rdlong	arg01, objptr
1b368     03 12 62 FD | 	cogstop	arg01
1b36c     04 E4 05 F1 | 	add	objptr, #4
1b370     F2 12 02 FB | 	rdlong	arg01, objptr
1b374     03 12 62 FD | 	cogstop	arg01
1b378     21 00 00 FF 
1b37c     18 E5 05 F1 | 	add	objptr, ##17176
1b380     F2 12 02 FB | 	rdlong	arg01, objptr
1b384     03 12 62 FD | 	cogstop	arg01
1b388     18 00 00 FF 
1b38c     D8 EA 05 F1 | 	add	ptr__dat__, ##12504
1b390     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1b394     18 00 00 FF 
1b398     D8 EA 85 F1 | 	sub	ptr__dat__, ##12504
1b39c     21 00 00 FF 
1b3a0     10 E5 85 F1 | 	sub	objptr, ##17168
1b3a4     1E 2C 06 F6 | 	mov	local08, #30
1b3a8     28 E4 61 FD | 	setq	objptr
1b3ac     0A 2D F2 FC | 	coginit	local08, arg02 wc
1b3b0     01 2C 66 C6 |  if_b	neg	local08, #1
1b3b4     23 00 00 FF 
1b3b8     40 E4 05 F1 | 	add	objptr, ##17984
1b3bc     F2 2C 62 FC | 	wrlong	local08, objptr
1b3c0     5A 00 00 FF 
1b3c4     4C E4 85 F1 | 	sub	objptr, ##46156
1b3c8     00 12 06 F6 | 	mov	arg01, #0
1b3cc     01 12 62 FD | 	cogid	arg01
1b3d0     03 12 62 FD | 	cogstop	arg01
1b3d4                 | LR__2234
1b3d4                 | LR__2235
1b3d4     A7 F0 03 F6 | 	mov	ptra, fp
1b3d8     B2 00 A0 FD | 	call	#popregs_
1b3dc                 | _do_brun_ret
1b3dc     2D 00 64 FD | 	ret
1b3e0                 | 
1b3e0                 | ' 
1b3e0                 | ' 
1b3e0                 | ' sub do_mouse
1b3e0                 | _do_mouse
1b3e0     B4 07 BF FD | 	call	#_pop
1b3e4     00 FA 4D F2 | 	cmps	result1, #0 wz
1b3e8                 | ' t1=pop()
1b3e8                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
1b3e8     14 00 90 5D |  if_ne	jmp	#LR__2240
1b3ec     10 12 06 F6 | 	mov	arg01, #16
1b3f0     00 14 06 F6 | 	mov	arg02, #0
1b3f4     00 16 06 F6 | 	mov	arg03, #0
1b3f8     64 31 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b3fc     10 00 90 FD | 	jmp	#LR__2241
1b400                 | LR__2240
1b400     10 12 06 F6 | 	mov	arg01, #16
1b404     20 14 06 F6 | 	mov	arg02, #32
1b408     20 16 06 F6 | 	mov	arg03, #32
1b40c     50 31 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b410                 | LR__2241
1b410                 | _do_mouse_ret
1b410     2D 00 64 FD | 	ret
1b414                 | 
1b414                 | ' 
1b414                 | ' sub do_cursor
1b414                 | _do_cursor
1b414     80 07 BF FD | 	call	#_pop
1b418     00 FA 4D F2 | 	cmps	result1, #0 wz
1b41c                 | ' t1=pop()
1b41c                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
1b41c     14 00 90 5D |  if_ne	jmp	#LR__2250
1b420     11 12 06 F6 | 	mov	arg01, #17
1b424     00 14 06 F6 | 	mov	arg02, #0
1b428     00 16 06 F6 | 	mov	arg03, #0
1b42c     30 31 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b430     10 00 90 FD | 	jmp	#LR__2251
1b434                 | LR__2250
1b434     11 12 06 F6 | 	mov	arg01, #17
1b438     08 14 06 F6 | 	mov	arg02, #8
1b43c     10 16 06 F6 | 	mov	arg03, #16
1b440     1C 31 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b444                 | LR__2251
1b444                 | _do_cursor_ret
1b444     2D 00 64 FD | 	ret
1b448                 | 
1b448                 | ' 
1b448                 | ' 
1b448                 | ' sub do_click
1b448                 | _do_click
1b448     4C 07 BF FD | 	call	#_pop
1b44c     00 FA 4D F2 | 	cmps	result1, #0 wz
1b450                 | ' t1=pop()
1b450                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
1b450     58 00 00 AF 
1b454     18 E5 05 A1 |  if_e	add	objptr, ##45336
1b458     F2 00 68 AC |  if_e	wrlong	#0, objptr
1b45c     58 00 00 FF 
1b460     18 E5 C5 F3 | 	sumz	objptr, ##45336
1b464     F2 02 68 5C |  if_ne	wrlong	#1, objptr
1b468     58 00 00 5F 
1b46c     18 E5 85 51 |  if_ne	sub	objptr, ##45336
1b470                 | _do_click_ret
1b470     2D 00 64 FD | 	ret
1b474                 | 
1b474                 | ' 
1b474                 | ' 
1b474                 | ' sub do_beep
1b474                 | _do_beep
1b474     02 4A 05 F6 | 	mov	COUNT_, #2
1b478     A8 00 A0 FD | 	call	#pushregs_
1b47c     20 F0 07 F1 | 	add	ptra, #32
1b480     14 07 BF FD | 	call	#_pop
1b484     FD 1E 02 F6 | 	mov	local01, result1
1b488     FE 1C 02 F6 | 	mov	arg06, result2
1b48c     FF 20 02 F6 | 	mov	local02, result3
1b490     0C 4E 05 F1 | 	add	fp, #12
1b494     A7 1E 62 FC | 	wrlong	local01, fp
1b498     04 4E 05 F1 | 	add	fp, #4
1b49c     A7 1C 62 FC | 	wrlong	arg06, fp
1b4a0     04 4E 05 F1 | 	add	fp, #4
1b4a4     A7 20 62 FC | 	wrlong	local02, fp
1b4a8     14 4E 85 F1 | 	sub	fp, #20
1b4ac     E8 06 BF FD | 	call	#_pop
1b4b0     A7 FA 61 FC | 	wrlong	result1, fp
1b4b4     04 4E 05 F1 | 	add	fp, #4
1b4b8     A7 FC 61 FC | 	wrlong	result2, fp
1b4bc     04 4E 05 F1 | 	add	fp, #4
1b4c0     A7 FE 61 FC | 	wrlong	result3, fp
1b4c4                 | ' 
1b4c4                 | ' t2=pop()
1b4c4                 | ' t1=pop()
1b4c4                 | ' 
1b4c4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
1b4c4     08 4E 85 F1 | 	sub	fp, #8
1b4c8     1C FE 0D F2 | 	cmp	result3, #28 wz
1b4cc     08 4E 05 51 |  if_ne	add	fp, #8
1b4d0     A7 20 02 5B |  if_ne	rdlong	local02, fp
1b4d4     08 4E 85 51 |  if_ne	sub	fp, #8
1b4d8     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
1b4dc     A7 1E 02 AB |  if_e	rdlong	local01, fp
1b4e0     18 4E 05 A1 |  if_e	add	fp, #24
1b4e4     A7 1E 62 AC |  if_e	wrlong	local01, fp
1b4e8     18 4E 85 A1 |  if_e	sub	fp, #24
1b4ec     14 00 90 AD |  if_e	jmp	#LR__2260
1b4f0     A7 12 02 F6 | 	mov	arg01, fp
1b4f4     70 A7 BF FD | 	call	#_converttoint
1b4f8     18 4E 05 F1 | 	add	fp, #24
1b4fc     A7 FA 61 FC | 	wrlong	result1, fp
1b500     18 4E 85 F1 | 	sub	fp, #24
1b504                 | LR__2260
1b504     1C 4E 05 F1 | 	add	fp, #28
1b508     A7 FE 48 FC | 	wrbyte	#127, fp
1b50c     01 4E 05 F1 | 	add	fp, #1
1b510     A7 00 49 FC | 	wrbyte	#128, fp
1b514     01 4E 85 F1 | 	sub	fp, #1
1b518     A7 14 02 F6 | 	mov	arg02, fp
1b51c     04 4E 85 F1 | 	sub	fp, #4
1b520     A7 16 02 FB | 	rdlong	arg03, fp
1b524     18 4E 85 F1 | 	sub	fp, #24
1b528     01 16 66 F0 | 	shl	arg03, #1
1b52c     07 12 06 F6 | 	mov	arg01, #7
1b530     0E 18 C6 F9 | 	decod	arg04, #14
1b534     02 1A 06 F6 | 	mov	arg05, #2
1b538     00 1C 06 F6 | 	mov	arg06, #0
1b53c     0B 00 00 FF 
1b540     CC E4 05 F1 | 	add	objptr, ##5836
1b544     3C 50 B0 FD | 	call	#_audio096_spin2_play8
1b548     0B 00 00 FF 
1b54c     CC E4 85 F1 | 	sub	objptr, ##5836
1b550     0C 4E 05 F1 | 	add	fp, #12
1b554     A7 12 02 F6 | 	mov	arg01, fp
1b558     0C 4E 85 F1 | 	sub	fp, #12
1b55c     D0 06 BF FD | 	call	#_push
1b560     74 F2 BF FD | 	call	#_do_waitms
1b564     07 12 06 F6 | 	mov	arg01, #7
1b568     0B 00 00 FF 
1b56c     CC E4 05 F1 | 	add	objptr, ##5836
1b570     B4 50 B0 FD | 	call	#_audio096_spin2_stop
1b574     0B 00 00 FF 
1b578     CC E4 85 F1 | 	sub	objptr, ##5836
1b57c     A7 F0 03 F6 | 	mov	ptra, fp
1b580     B2 00 A0 FD | 	call	#popregs_
1b584                 | _do_beep_ret
1b584     2D 00 64 FD | 	ret
1b588                 | 
1b588                 | ' 
1b588                 | ' sub do_no_command
1b588                 | _do_no_command
1b588     17 12 06 F6 | 	mov	arg01, #23
1b58c     34 20 B0 FD | 	call	#_printerror
1b590                 | _do_no_command_ret
1b590     2D 00 64 FD | 	ret
1b594                 | 
1b594                 | ' 
1b594                 | ' sub do_negative
1b594                 | _do_negative
1b594     02 4A 05 F6 | 	mov	COUNT_, #2
1b598     A8 00 A0 FD | 	call	#pushregs_
1b59c     0C F0 07 F1 | 	add	ptra, #12
1b5a0     F4 05 BF FD | 	call	#_pop
1b5a4     FF 1E 02 F6 | 	mov	local01, result3
1b5a8     A7 FA 61 FC | 	wrlong	result1, fp
1b5ac     04 4E 05 F1 | 	add	fp, #4
1b5b0     A7 FC 61 FC | 	wrlong	result2, fp
1b5b4     04 4E 05 F1 | 	add	fp, #4
1b5b8     A7 1E 62 FC | 	wrlong	local01, fp
1b5bc                 | ' t1=pop()
1b5bc                 | ' if t1.result_type=result_int then 
1b5bc     08 4E 85 F1 | 	sub	fp, #8
1b5c0     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b5c4     A7 20 02 AB |  if_e	rdlong	local02, fp
1b5c8     10 1F 62 A6 |  if_e	neg	local01, local02
1b5cc     A7 1E 62 AC |  if_e	wrlong	local01, fp
1b5d0     5C 00 90 AD |  if_e	jmp	#LR__2272
1b5d4     08 4E 05 F1 | 	add	fp, #8
1b5d8     A7 1E 02 FB | 	rdlong	local01, fp
1b5dc     08 4E 85 F1 | 	sub	fp, #8
1b5e0     1D 1E 0E F2 | 	cmp	local01, #29 wz
1b5e4     1C 00 90 5D |  if_ne	jmp	#LR__2270
1b5e8     A7 20 02 FB | 	rdlong	local02, fp
1b5ec     10 1F 62 F6 | 	neg	local01, local02
1b5f0     A7 1E 62 FC | 	wrlong	local01, fp
1b5f4     08 4E 05 F1 | 	add	fp, #8
1b5f8     A7 38 68 FC | 	wrlong	#28, fp
1b5fc     08 4E 85 F1 | 	sub	fp, #8
1b600     2C 00 90 FD | 	jmp	#LR__2271
1b604                 | LR__2270
1b604     08 4E 05 F1 | 	add	fp, #8
1b608     A7 1E 02 FB | 	rdlong	local01, fp
1b60c     08 4E 85 F1 | 	sub	fp, #8
1b610     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b614     A7 FA 01 AB |  if_e	rdlong	result1, fp
1b618     1F FA E5 A4 |  if_e	bitnot	result1, #31
1b61c     A7 FA 61 AC |  if_e	wrlong	result1, fp
1b620     08 4E 05 51 |  if_ne	add	fp, #8
1b624     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1b628     08 4E 85 51 |  if_ne	sub	fp, #8
1b62c     A7 50 68 5C |  if_ne	wrlong	#40, fp
1b630                 | LR__2271
1b630                 | LR__2272
1b630     A7 12 02 F6 | 	mov	arg01, fp
1b634     F8 05 BF FD | 	call	#_push
1b638     A7 F0 03 F6 | 	mov	ptra, fp
1b63c     B2 00 A0 FD | 	call	#popregs_
1b640                 | _do_negative_ret
1b640     2D 00 64 FD | 	ret
1b644                 | 
1b644                 | ' 
1b644                 | ' sub do_abs
1b644                 | _do_abs
1b644     01 4A 05 F6 | 	mov	COUNT_, #1
1b648     A8 00 A0 FD | 	call	#pushregs_
1b64c     0C F0 07 F1 | 	add	ptra, #12
1b650     44 05 BF FD | 	call	#_pop
1b654     FF 1E 02 F6 | 	mov	local01, result3
1b658     A7 FA 61 FC | 	wrlong	result1, fp
1b65c     04 4E 05 F1 | 	add	fp, #4
1b660     A7 FC 61 FC | 	wrlong	result2, fp
1b664     04 4E 05 F1 | 	add	fp, #4
1b668     A7 1E 62 FC | 	wrlong	local01, fp
1b66c                 | ' t1=pop()
1b66c                 | ' if t1.result_type=result_int then 
1b66c     08 4E 85 F1 | 	sub	fp, #8
1b670     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b674     A7 12 02 AB |  if_e	rdlong	arg01, fp
1b678     09 1F 42 A6 |  if_e	abs	local01, arg01
1b67c     A7 1E 62 AC |  if_e	wrlong	local01, fp
1b680     2C 00 90 AD |  if_e	jmp	#LR__2280
1b684     08 4E 05 F1 | 	add	fp, #8
1b688     A7 1E 02 FB | 	rdlong	local01, fp
1b68c     08 4E 85 F1 | 	sub	fp, #8
1b690     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b694     A7 FA 01 AB |  if_e	rdlong	result1, fp
1b698     1F FA 05 A4 |  if_e	bitl	result1, #31
1b69c     A7 FA 61 AC |  if_e	wrlong	result1, fp
1b6a0     08 4E 05 51 |  if_ne	add	fp, #8
1b6a4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1b6a8     08 4E 85 51 |  if_ne	sub	fp, #8
1b6ac     A7 50 68 5C |  if_ne	wrlong	#40, fp
1b6b0                 | LR__2280
1b6b0     A7 12 02 F6 | 	mov	arg01, fp
1b6b4     78 05 BF FD | 	call	#_push
1b6b8     A7 F0 03 F6 | 	mov	ptra, fp
1b6bc     B2 00 A0 FD | 	call	#popregs_
1b6c0                 | _do_abs_ret
1b6c0     2D 00 64 FD | 	ret
1b6c4                 | 
1b6c4                 | ' 
1b6c4                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1b6c4                 | ' 
1b6c4                 | ' ''----------------------------------------------------------------------------------------------------
1b6c4                 | ' ''------------------ Initialization procedures -------------------------------------------------------
1b6c4                 | ' ''----------------------------------------------------------------------------------------------------
1b6c4                 | ' 
1b6c4                 | ' ''--------------------------- Command function pointers
1b6c4                 | ' 
1b6c4                 | ' sub init_commands
1b6c4                 | _init_commands
1b6c4                 | ' 
1b6c4                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1b6c4     00 00 06 F6 | 	mov	_var01, #0
1b6c8     97 16 48 FB | 	callpa	#(@LR__2291-@LR__2290)>>2,fcache_load_ptr_
1b6cc                 | LR__2290
1b6cc     00 FB 01 F6 | 	mov	result1, _var01
1b6d0     02 FA 65 F0 | 	shl	result1, #2
1b6d4     43 00 00 FF 
1b6d8     60 E4 05 F1 | 	add	objptr, ##34400
1b6dc     F2 FA 01 F1 | 	add	result1, objptr
1b6e0     43 00 00 FF 
1b6e4     60 E4 85 F1 | 	sub	objptr, ##34400
1b6e8     FD E4 61 FC | 	wrlong	objptr, result1
1b6ec     01 00 06 F1 | 	add	_var01, #1
1b6f0     00 01 56 F2 | 	cmps	_var01, #256 wc
1b6f4     D4 FF 9F CD |  if_b	jmp	#LR__2290
1b6f8                 | LR__2291
1b6f8     F2 FA 01 F6 | 	mov	result1, objptr
1b6fc     14 FA 25 F4 | 	bith	result1, #20
1b700     43 00 00 FF 
1b704     64 E4 05 F1 | 	add	objptr, ##34404
1b708     F2 FA 61 FC | 	wrlong	result1, objptr
1b70c     43 00 00 FF 
1b710     64 E4 85 F1 | 	sub	objptr, ##34404
1b714     F2 FA 01 F6 | 	mov	result1, objptr
1b718     15 FA 25 F4 | 	bith	result1, #21
1b71c     43 00 00 FF 
1b720     68 E4 05 F1 | 	add	objptr, ##34408
1b724     F2 FA 61 FC | 	wrlong	result1, objptr
1b728     43 00 00 FF 
1b72c     68 E4 85 F1 | 	sub	objptr, ##34408
1b730     F2 FA 01 F6 | 	mov	result1, objptr
1b734     34 FA 25 F4 | 	bith	result1, #52
1b738     43 00 00 FF 
1b73c     6C E4 05 F1 | 	add	objptr, ##34412
1b740     F2 FA 61 FC | 	wrlong	result1, objptr
1b744     43 00 00 FF 
1b748     6C E4 85 F1 | 	sub	objptr, ##34412
1b74c     F2 FA 01 F6 | 	mov	result1, objptr
1b750     16 FA 25 F4 | 	bith	result1, #22
1b754     43 00 00 FF 
1b758     74 E4 05 F1 | 	add	objptr, ##34420
1b75c     F2 FA 61 FC | 	wrlong	result1, objptr
1b760     43 00 00 FF 
1b764     74 E4 85 F1 | 	sub	objptr, ##34420
1b768     F2 FA 01 F6 | 	mov	result1, objptr
1b76c     00 28 00 FF 
1b770     00 FA 45 F5 | 	or	result1, ##5242880
1b774     43 00 00 FF 
1b778     78 E4 05 F1 | 	add	objptr, ##34424
1b77c     F2 FA 61 FC | 	wrlong	result1, objptr
1b780     43 00 00 FF 
1b784     78 E4 85 F1 | 	sub	objptr, ##34424
1b788     F2 FA 01 F6 | 	mov	result1, objptr
1b78c     35 FA 25 F4 | 	bith	result1, #53
1b790     43 00 00 FF 
1b794     7C E4 05 F1 | 	add	objptr, ##34428
1b798     F2 FA 61 FC | 	wrlong	result1, objptr
1b79c     43 00 00 FF 
1b7a0     7C E4 85 F1 | 	sub	objptr, ##34428
1b7a4     F2 FA 01 F6 | 	mov	result1, objptr
1b7a8     54 FA 25 F4 | 	bith	result1, #84
1b7ac     43 00 00 FF 
1b7b0     80 E4 05 F1 | 	add	objptr, ##34432
1b7b4     F2 FA 61 FC | 	wrlong	result1, objptr
1b7b8     43 00 00 FF 
1b7bc     80 E4 85 F1 | 	sub	objptr, ##34432
1b7c0     F2 FA 01 F6 | 	mov	result1, objptr
1b7c4     17 FA 25 F4 | 	bith	result1, #23
1b7c8     43 00 00 FF 
1b7cc     84 E4 05 F1 | 	add	objptr, ##34436
1b7d0     F2 FA 61 FC | 	wrlong	result1, objptr
1b7d4     43 00 00 FF 
1b7d8     84 E4 85 F1 | 	sub	objptr, ##34436
1b7dc     F2 FA 01 F6 | 	mov	result1, objptr
1b7e0     00 48 00 FF 
1b7e4     00 FA 45 F5 | 	or	result1, ##9437184
1b7e8     43 00 00 FF 
1b7ec     88 E4 05 F1 | 	add	objptr, ##34440
1b7f0     F2 FA 61 FC | 	wrlong	result1, objptr
1b7f4     43 00 00 FF 
1b7f8     88 E4 85 F1 | 	sub	objptr, ##34440
1b7fc     F2 FA 01 F6 | 	mov	result1, objptr
1b800     00 50 00 FF 
1b804     00 FA 45 F5 | 	or	result1, ##10485760
1b808     43 00 00 FF 
1b80c     8C E4 05 F1 | 	add	objptr, ##34444
1b810     F2 FA 61 FC | 	wrlong	result1, objptr
1b814     43 00 00 FF 
1b818     8C E4 85 F1 | 	sub	objptr, ##34444
1b81c     F2 FA 01 F6 | 	mov	result1, objptr
1b820     00 58 00 FF 
1b824     00 FA 45 F5 | 	or	result1, ##11534336
1b828     43 00 00 FF 
1b82c     90 E4 05 F1 | 	add	objptr, ##34448
1b830     F2 FA 61 FC | 	wrlong	result1, objptr
1b834     43 00 00 FF 
1b838     90 E4 85 F1 | 	sub	objptr, ##34448
1b83c     F2 FA 01 F6 | 	mov	result1, objptr
1b840     36 FA 25 F4 | 	bith	result1, #54
1b844     43 00 00 FF 
1b848     A4 E4 05 F1 | 	add	objptr, ##34468
1b84c     F2 FA 61 FC | 	wrlong	result1, objptr
1b850     43 00 00 FF 
1b854     A4 E4 85 F1 | 	sub	objptr, ##34468
1b858     F2 FA 01 F6 | 	mov	result1, objptr
1b85c     00 68 00 FF 
1b860     00 FA 45 F5 | 	or	result1, ##13631488
1b864     43 00 00 FF 
1b868     D4 E4 05 F1 | 	add	objptr, ##34516
1b86c     F2 FA 61 FC | 	wrlong	result1, objptr
1b870     43 00 00 FF 
1b874     D4 E4 85 F1 | 	sub	objptr, ##34516
1b878     F2 FA 01 F6 | 	mov	result1, objptr
1b87c     00 68 00 FF 
1b880     00 FA 45 F5 | 	or	result1, ##13631488
1b884     43 00 00 FF 
1b888     D0 E4 05 F1 | 	add	objptr, ##34512
1b88c     F2 FA 61 FC | 	wrlong	result1, objptr
1b890     43 00 00 FF 
1b894     D0 E4 85 F1 | 	sub	objptr, ##34512
1b898     F2 FA 01 F6 | 	mov	result1, objptr
1b89c     00 68 00 FF 
1b8a0     00 FA 45 F5 | 	or	result1, ##13631488
1b8a4     43 00 00 FF 
1b8a8     D8 E4 05 F1 | 	add	objptr, ##34520
1b8ac     F2 FA 61 FC | 	wrlong	result1, objptr
1b8b0     43 00 00 FF 
1b8b4     D8 E4 85 F1 | 	sub	objptr, ##34520
1b8b8     F2 FA 01 F6 | 	mov	result1, objptr
1b8bc     00 68 00 FF 
1b8c0     00 FA 45 F5 | 	or	result1, ##13631488
1b8c4     43 00 00 FF 
1b8c8     DC E4 05 F1 | 	add	objptr, ##34524
1b8cc     F2 FA 61 FC | 	wrlong	result1, objptr
1b8d0     43 00 00 FF 
1b8d4     DC E4 85 F1 | 	sub	objptr, ##34524
1b8d8     F2 FA 01 F6 | 	mov	result1, objptr
1b8dc     00 68 00 FF 
1b8e0     00 FA 45 F5 | 	or	result1, ##13631488
1b8e4     43 00 00 FF 
1b8e8     0C E5 05 F1 | 	add	objptr, ##34572
1b8ec     F2 FA 61 FC | 	wrlong	result1, objptr
1b8f0     43 00 00 FF 
1b8f4     0C E5 85 F1 | 	sub	objptr, ##34572
1b8f8     F2 FA 01 F6 | 	mov	result1, objptr
1b8fc     55 FA 25 F4 | 	bith	result1, #85
1b900     43 00 00 FF 
1b904     BC E4 05 F1 | 	add	objptr, ##34492
1b908     F2 FA 61 FC | 	wrlong	result1, objptr
1b90c     43 00 00 FF 
1b910     BC E4 85 F1 | 	sub	objptr, ##34492
1b914     F2 FA 01 F6 | 	mov	result1, objptr
1b918     00 68 00 FF 
1b91c     00 FA 45 F5 | 	or	result1, ##13631488
1b920     43 00 00 FF 
1b924     10 E5 05 F1 | 	add	objptr, ##34576
1b928     F2 FA 61 FC | 	wrlong	result1, objptr
1b92c     43 00 00 FF 
1b930     10 E5 85 F1 | 	sub	objptr, ##34576
1b934     F2 FA 01 F6 | 	mov	result1, objptr
1b938     00 68 00 FF 
1b93c     00 FA 45 F5 | 	or	result1, ##13631488
1b940     43 00 00 FF 
1b944     E0 E4 05 F1 | 	add	objptr, ##34528
1b948     F2 FA 61 FC | 	wrlong	result1, objptr
1b94c     43 00 00 FF 
1b950     E0 E4 85 F1 | 	sub	objptr, ##34528
1b954     F2 FA 01 F6 | 	mov	result1, objptr
1b958     00 68 00 FF 
1b95c     00 FA 45 F5 | 	or	result1, ##13631488
1b960     43 00 00 FF 
1b964     E4 E4 05 F1 | 	add	objptr, ##34532
1b968     F2 FA 61 FC | 	wrlong	result1, objptr
1b96c     43 00 00 FF 
1b970     E4 E4 85 F1 | 	sub	objptr, ##34532
1b974     F2 FA 01 F6 | 	mov	result1, objptr
1b978     00 68 00 FF 
1b97c     00 FA 45 F5 | 	or	result1, ##13631488
1b980     43 00 00 FF 
1b984     E8 E4 05 F1 | 	add	objptr, ##34536
1b988     F2 FA 61 FC | 	wrlong	result1, objptr
1b98c     43 00 00 FF 
1b990     E8 E4 85 F1 | 	sub	objptr, ##34536
1b994     F2 FA 01 F6 | 	mov	result1, objptr
1b998     74 FA 25 F4 | 	bith	result1, #116
1b99c     43 00 00 FF 
1b9a0     60 E5 05 F1 | 	add	objptr, ##34656
1b9a4     F2 FA 61 FC | 	wrlong	result1, objptr
1b9a8     43 00 00 FF 
1b9ac     60 E5 85 F1 | 	sub	objptr, ##34656
1b9b0     F2 FA 01 F6 | 	mov	result1, objptr
1b9b4     18 FA 25 F4 | 	bith	result1, #24
1b9b8     43 00 00 FF 
1b9bc     64 E5 05 F1 | 	add	objptr, ##34660
1b9c0     F2 FA 61 FC | 	wrlong	result1, objptr
1b9c4     43 00 00 FF 
1b9c8     64 E5 85 F1 | 	sub	objptr, ##34660
1b9cc     F2 FA 01 F6 | 	mov	result1, objptr
1b9d0     00 88 00 FF 
1b9d4     00 FA 45 F5 | 	or	result1, ##17825792
1b9d8     43 00 00 FF 
1b9dc     68 E5 05 F1 | 	add	objptr, ##34664
1b9e0     F2 FA 61 FC | 	wrlong	result1, objptr
1b9e4     43 00 00 FF 
1b9e8     68 E5 85 F1 | 	sub	objptr, ##34664
1b9ec     F2 FA 01 F6 | 	mov	result1, objptr
1b9f0     00 90 00 FF 
1b9f4     00 FA 45 F5 | 	or	result1, ##18874368
1b9f8     43 00 00 FF 
1b9fc     6C E5 05 F1 | 	add	objptr, ##34668
1ba00     F2 FA 61 FC | 	wrlong	result1, objptr
1ba04     43 00 00 FF 
1ba08     6C E5 85 F1 | 	sub	objptr, ##34668
1ba0c     F2 FA 01 F6 | 	mov	result1, objptr
1ba10     00 98 00 FF 
1ba14     00 FA 45 F5 | 	or	result1, ##19922944
1ba18     43 00 00 FF 
1ba1c     70 E5 05 F1 | 	add	objptr, ##34672
1ba20     F2 FA 61 FC | 	wrlong	result1, objptr
1ba24     43 00 00 FF 
1ba28     70 E5 85 F1 | 	sub	objptr, ##34672
1ba2c     F2 FA 01 F6 | 	mov	result1, objptr
1ba30     00 A0 00 FF 
1ba34     00 FA 45 F5 | 	or	result1, ##20971520
1ba38     43 00 00 FF 
1ba3c     74 E5 05 F1 | 	add	objptr, ##34676
1ba40     F2 FA 61 FC | 	wrlong	result1, objptr
1ba44     43 00 00 FF 
1ba48     74 E5 85 F1 | 	sub	objptr, ##34676
1ba4c     F2 FA 01 F6 | 	mov	result1, objptr
1ba50     00 A8 00 FF 
1ba54     00 FA 45 F5 | 	or	result1, ##22020096
1ba58     43 00 00 FF 
1ba5c     78 E5 05 F1 | 	add	objptr, ##34680
1ba60     F2 FA 61 FC | 	wrlong	result1, objptr
1ba64     43 00 00 FF 
1ba68     78 E5 85 F1 | 	sub	objptr, ##34680
1ba6c     F2 FA 01 F6 | 	mov	result1, objptr
1ba70     00 B0 00 FF 
1ba74     00 FA 45 F5 | 	or	result1, ##23068672
1ba78     43 00 00 FF 
1ba7c     7C E5 05 F1 | 	add	objptr, ##34684
1ba80     F2 FA 61 FC | 	wrlong	result1, objptr
1ba84     43 00 00 FF 
1ba88     7C E5 85 F1 | 	sub	objptr, ##34684
1ba8c     F2 FA 01 F6 | 	mov	result1, objptr
1ba90     00 B8 00 FF 
1ba94     00 FA 45 F5 | 	or	result1, ##24117248
1ba98     43 00 00 FF 
1ba9c     80 E5 05 F1 | 	add	objptr, ##34688
1baa0     F2 FA 61 FC | 	wrlong	result1, objptr
1baa4     43 00 00 FF 
1baa8     80 E5 85 F1 | 	sub	objptr, ##34688
1baac     F2 FA 01 F6 | 	mov	result1, objptr
1bab0     37 FA 25 F4 | 	bith	result1, #55
1bab4     43 00 00 FF 
1bab8     84 E5 05 F1 | 	add	objptr, ##34692
1babc     F2 FA 61 FC | 	wrlong	result1, objptr
1bac0     43 00 00 FF 
1bac4     84 E5 85 F1 | 	sub	objptr, ##34692
1bac8     F2 FA 01 F6 | 	mov	result1, objptr
1bacc     00 C8 00 FF 
1bad0     00 FA 45 F5 | 	or	result1, ##26214400
1bad4     43 00 00 FF 
1bad8     88 E5 05 F1 | 	add	objptr, ##34696
1badc     F2 FA 61 FC | 	wrlong	result1, objptr
1bae0     43 00 00 FF 
1bae4     88 E5 85 F1 | 	sub	objptr, ##34696
1bae8     F2 FA 01 F6 | 	mov	result1, objptr
1baec     00 D0 00 FF 
1baf0     00 FA 45 F5 | 	or	result1, ##27262976
1baf4     43 00 00 FF 
1baf8     8C E5 05 F1 | 	add	objptr, ##34700
1bafc     F2 FA 61 FC | 	wrlong	result1, objptr
1bb00     43 00 00 FF 
1bb04     8C E5 85 F1 | 	sub	objptr, ##34700
1bb08     F2 FA 01 F6 | 	mov	result1, objptr
1bb0c     00 D8 00 FF 
1bb10     00 FA 45 F5 | 	or	result1, ##28311552
1bb14     43 00 00 FF 
1bb18     90 E5 05 F1 | 	add	objptr, ##34704
1bb1c     F2 FA 61 FC | 	wrlong	result1, objptr
1bb20     43 00 00 FF 
1bb24     90 E5 85 F1 | 	sub	objptr, ##34704
1bb28     F2 FA 01 F6 | 	mov	result1, objptr
1bb2c     56 FA 25 F4 | 	bith	result1, #86
1bb30     43 00 00 FF 
1bb34     94 E5 05 F1 | 	add	objptr, ##34708
1bb38     F2 FA 61 FC | 	wrlong	result1, objptr
1bb3c     43 00 00 FF 
1bb40     94 E5 85 F1 | 	sub	objptr, ##34708
1bb44     F2 FA 01 F6 | 	mov	result1, objptr
1bb48     00 E8 00 FF 
1bb4c     00 FA 45 F5 | 	or	result1, ##30408704
1bb50     45 00 00 FF 
1bb54     5C E4 05 F1 | 	add	objptr, ##35420
1bb58     F2 FA 61 FC | 	wrlong	result1, objptr
1bb5c     45 00 00 FF 
1bb60     5C E4 85 F1 | 	sub	objptr, ##35420
1bb64     F2 FA 01 F6 | 	mov	result1, objptr
1bb68     75 FA 25 F4 | 	bith	result1, #117
1bb6c     43 00 00 FF 
1bb70     98 E5 05 F1 | 	add	objptr, ##34712
1bb74     F2 FA 61 FC | 	wrlong	result1, objptr
1bb78     43 00 00 FF 
1bb7c     98 E5 85 F1 | 	sub	objptr, ##34712
1bb80     F2 FA 01 F6 | 	mov	result1, objptr
1bb84     94 FA 25 F4 | 	bith	result1, #148
1bb88     43 00 00 FF 
1bb8c     AC E5 05 F1 | 	add	objptr, ##34732
1bb90     F2 FA 61 FC | 	wrlong	result1, objptr
1bb94     43 00 00 FF 
1bb98     AC E5 85 F1 | 	sub	objptr, ##34732
1bb9c     F2 FA 01 F6 | 	mov	result1, objptr
1bba0     19 FA 25 F4 | 	bith	result1, #25
1bba4     43 00 00 FF 
1bba8     9C E5 05 F1 | 	add	objptr, ##34716
1bbac     F2 FA 61 FC | 	wrlong	result1, objptr
1bbb0     43 00 00 FF 
1bbb4     9C E5 85 F1 | 	sub	objptr, ##34716
1bbb8     F2 FA 01 F6 | 	mov	result1, objptr
1bbbc     00 08 01 FF 
1bbc0     00 FA 45 F5 | 	or	result1, ##34603008
1bbc4     43 00 00 FF 
1bbc8     B8 E4 05 F1 | 	add	objptr, ##34488
1bbcc     F2 FA 61 FC | 	wrlong	result1, objptr
1bbd0     43 00 00 FF 
1bbd4     B8 E4 85 F1 | 	sub	objptr, ##34488
1bbd8     F2 FA 01 F6 | 	mov	result1, objptr
1bbdc     00 10 01 FF 
1bbe0     00 FA 45 F5 | 	or	result1, ##35651584
1bbe4     43 00 00 FF 
1bbe8     A0 E5 05 F1 | 	add	objptr, ##34720
1bbec     F2 FA 61 FC | 	wrlong	result1, objptr
1bbf0     43 00 00 FF 
1bbf4     A0 E5 85 F1 | 	sub	objptr, ##34720
1bbf8     F2 FA 01 F6 | 	mov	result1, objptr
1bbfc     00 18 01 FF 
1bc00     00 FA 45 F5 | 	or	result1, ##36700160
1bc04     43 00 00 FF 
1bc08     A4 E5 05 F1 | 	add	objptr, ##34724
1bc0c     F2 FA 61 FC | 	wrlong	result1, objptr
1bc10     43 00 00 FF 
1bc14     A4 E5 85 F1 | 	sub	objptr, ##34724
1bc18     F2 FA 01 F6 | 	mov	result1, objptr
1bc1c     00 20 01 FF 
1bc20     00 FA 45 F5 | 	or	result1, ##37748736
1bc24     43 00 00 FF 
1bc28     A8 E5 05 F1 | 	add	objptr, ##34728
1bc2c     F2 FA 61 FC | 	wrlong	result1, objptr
1bc30     43 00 00 FF 
1bc34     A8 E5 85 F1 | 	sub	objptr, ##34728
1bc38     F2 FA 01 F6 | 	mov	result1, objptr
1bc3c     00 28 01 FF 
1bc40     00 FA 45 F5 | 	or	result1, ##38797312
1bc44     43 00 00 FF 
1bc48     B4 E5 05 F1 | 	add	objptr, ##34740
1bc4c     F2 FA 61 FC | 	wrlong	result1, objptr
1bc50     43 00 00 FF 
1bc54     B4 E5 85 F1 | 	sub	objptr, ##34740
1bc58     F2 FA 01 F6 | 	mov	result1, objptr
1bc5c     00 30 01 FF 
1bc60     00 FA 45 F5 | 	or	result1, ##39845888
1bc64     43 00 00 FF 
1bc68     B8 E5 05 F1 | 	add	objptr, ##34744
1bc6c     F2 FA 61 FC | 	wrlong	result1, objptr
1bc70     43 00 00 FF 
1bc74     B8 E5 85 F1 | 	sub	objptr, ##34744
1bc78     F2 FA 01 F6 | 	mov	result1, objptr
1bc7c     00 38 01 FF 
1bc80     00 FA 45 F5 | 	or	result1, ##40894464
1bc84     43 00 00 FF 
1bc88     BC E5 05 F1 | 	add	objptr, ##34748
1bc8c     F2 FA 61 FC | 	wrlong	result1, objptr
1bc90     43 00 00 FF 
1bc94     BC E5 85 F1 | 	sub	objptr, ##34748
1bc98     F2 FA 01 F6 | 	mov	result1, objptr
1bc9c     00 40 01 FF 
1bca0     00 FA 45 F5 | 	or	result1, ##41943040
1bca4     43 00 00 FF 
1bca8     C0 E5 05 F1 | 	add	objptr, ##34752
1bcac     F2 FA 61 FC | 	wrlong	result1, objptr
1bcb0     43 00 00 FF 
1bcb4     C0 E5 85 F1 | 	sub	objptr, ##34752
1bcb8     F2 FA 01 F6 | 	mov	result1, objptr
1bcbc     00 48 01 FF 
1bcc0     00 FA 45 F5 | 	or	result1, ##42991616
1bcc4     43 00 00 FF 
1bcc8     C8 E5 05 F1 | 	add	objptr, ##34760
1bccc     F2 FA 61 FC | 	wrlong	result1, objptr
1bcd0     43 00 00 FF 
1bcd4     C8 E5 85 F1 | 	sub	objptr, ##34760
1bcd8     F2 FA 01 F6 | 	mov	result1, objptr
1bcdc     00 08 01 FF 
1bce0     00 FA 45 F5 | 	or	result1, ##34603008
1bce4     43 00 00 FF 
1bce8     CC E5 05 F1 | 	add	objptr, ##34764
1bcec     F2 FA 61 FC | 	wrlong	result1, objptr
1bcf0     43 00 00 FF 
1bcf4     CC E5 85 F1 | 	sub	objptr, ##34764
1bcf8     F2 FA 01 F6 | 	mov	result1, objptr
1bcfc     00 50 01 FF 
1bd00     00 FA 45 F5 | 	or	result1, ##44040192
1bd04     43 00 00 FF 
1bd08     CC E4 05 F1 | 	add	objptr, ##34508
1bd0c     F2 FA 61 FC | 	wrlong	result1, objptr
1bd10     43 00 00 FF 
1bd14     CC E4 85 F1 | 	sub	objptr, ##34508
1bd18     F2 FA 01 F6 | 	mov	result1, objptr
1bd1c     00 58 01 FF 
1bd20     00 FA 45 F5 | 	or	result1, ##45088768
1bd24     43 00 00 FF 
1bd28     FC E4 05 F1 | 	add	objptr, ##34556
1bd2c     F2 FA 61 FC | 	wrlong	result1, objptr
1bd30     43 00 00 FF 
1bd34     FC E4 85 F1 | 	sub	objptr, ##34556
1bd38     F2 FA 01 F6 | 	mov	result1, objptr
1bd3c     00 60 01 FF 
1bd40     00 FA 45 F5 | 	or	result1, ##46137344
1bd44     43 00 00 FF 
1bd48     F8 E4 05 F1 | 	add	objptr, ##34552
1bd4c     F2 FA 61 FC | 	wrlong	result1, objptr
1bd50     43 00 00 FF 
1bd54     F8 E4 85 F1 | 	sub	objptr, ##34552
1bd58     F2 FA 01 F6 | 	mov	result1, objptr
1bd5c     00 68 01 FF 
1bd60     00 FA 45 F5 | 	or	result1, ##47185920
1bd64     43 00 00 FF 
1bd68     9C E4 05 F1 | 	add	objptr, ##34460
1bd6c     F2 FA 61 FC | 	wrlong	result1, objptr
1bd70     43 00 00 FF 
1bd74     9C E4 85 F1 | 	sub	objptr, ##34460
1bd78     F2 FA 01 F6 | 	mov	result1, objptr
1bd7c     00 70 01 FF 
1bd80     00 FA 45 F5 | 	or	result1, ##48234496
1bd84     43 00 00 FF 
1bd88     A0 E4 05 F1 | 	add	objptr, ##34464
1bd8c     F2 FA 61 FC | 	wrlong	result1, objptr
1bd90     43 00 00 FF 
1bd94     A0 E4 85 F1 | 	sub	objptr, ##34464
1bd98     F2 FA 01 F6 | 	mov	result1, objptr
1bd9c     00 78 01 FF 
1bda0     00 FA 45 F5 | 	or	result1, ##49283072
1bda4     43 00 00 FF 
1bda8     08 E5 05 F1 | 	add	objptr, ##34568
1bdac     F2 FA 61 FC | 	wrlong	result1, objptr
1bdb0     43 00 00 FF 
1bdb4     08 E5 85 F1 | 	sub	objptr, ##34568
1bdb8     F2 FA 01 F6 | 	mov	result1, objptr
1bdbc     38 FA 25 F4 | 	bith	result1, #56
1bdc0     43 00 00 FF 
1bdc4     B0 E5 05 F1 | 	add	objptr, ##34736
1bdc8     F2 FA 61 FC | 	wrlong	result1, objptr
1bdcc     43 00 00 FF 
1bdd0     B0 E5 85 F1 | 	sub	objptr, ##34736
1bdd4     F2 FA 01 F6 | 	mov	result1, objptr
1bdd8     00 88 01 FF 
1bddc     00 FA 45 F5 | 	or	result1, ##51380224
1bde0     43 00 00 FF 
1bde4     C4 E5 05 F1 | 	add	objptr, ##34756
1bde8     F2 FA 61 FC | 	wrlong	result1, objptr
1bdec     43 00 00 FF 
1bdf0     C4 E5 85 F1 | 	sub	objptr, ##34756
1bdf4     F2 FA 01 F6 | 	mov	result1, objptr
1bdf8     00 90 01 FF 
1bdfc     00 FA 45 F5 | 	or	result1, ##52428800
1be00     43 00 00 FF 
1be04     D0 E5 05 F1 | 	add	objptr, ##34768
1be08     F2 FA 61 FC | 	wrlong	result1, objptr
1be0c     43 00 00 FF 
1be10     D0 E5 85 F1 | 	sub	objptr, ##34768
1be14     F2 FA 01 F6 | 	mov	result1, objptr
1be18     00 98 01 FF 
1be1c     00 FA 45 F5 | 	or	result1, ##53477376
1be20     43 00 00 FF 
1be24     D4 E5 05 F1 | 	add	objptr, ##34772
1be28     F2 FA 61 FC | 	wrlong	result1, objptr
1be2c     43 00 00 FF 
1be30     D4 E5 85 F1 | 	sub	objptr, ##34772
1be34     F2 FA 01 F6 | 	mov	result1, objptr
1be38     00 A0 01 FF 
1be3c     00 FA 45 F5 | 	or	result1, ##54525952
1be40     43 00 00 FF 
1be44     D8 E5 05 F1 | 	add	objptr, ##34776
1be48     F2 FA 61 FC | 	wrlong	result1, objptr
1be4c     43 00 00 FF 
1be50     D8 E5 85 F1 | 	sub	objptr, ##34776
1be54     F2 FA 01 F6 | 	mov	result1, objptr
1be58     00 A8 01 FF 
1be5c     00 FA 45 F5 | 	or	result1, ##55574528
1be60     43 00 00 FF 
1be64     DC E5 05 F1 | 	add	objptr, ##34780
1be68     F2 FA 61 FC | 	wrlong	result1, objptr
1be6c     43 00 00 FF 
1be70     DC E5 85 F1 | 	sub	objptr, ##34780
1be74     F2 FA 01 F6 | 	mov	result1, objptr
1be78     00 B0 01 FF 
1be7c     00 FA 45 F5 | 	or	result1, ##56623104
1be80     43 00 00 FF 
1be84     E0 E5 05 F1 | 	add	objptr, ##34784
1be88     F2 FA 61 FC | 	wrlong	result1, objptr
1be8c     43 00 00 FF 
1be90     E0 E5 85 F1 | 	sub	objptr, ##34784
1be94     F2 FA 01 F6 | 	mov	result1, objptr
1be98     00 B8 01 FF 
1be9c     00 FA 45 F5 | 	or	result1, ##57671680
1bea0     43 00 00 FF 
1bea4     E4 E5 05 F1 | 	add	objptr, ##34788
1bea8     F2 FA 61 FC | 	wrlong	result1, objptr
1beac     43 00 00 FF 
1beb0     E4 E5 85 F1 | 	sub	objptr, ##34788
1beb4     F2 FA 01 F6 | 	mov	result1, objptr
1beb8     94 FA 25 F4 | 	bith	result1, #148
1bebc     43 00 00 FF 
1bec0     AC E5 05 F1 | 	add	objptr, ##34732
1bec4     F2 FA 61 FC | 	wrlong	result1, objptr
1bec8     43 00 00 FF 
1becc     AC E5 85 F1 | 	sub	objptr, ##34732
1bed0     F2 FA 01 F6 | 	mov	result1, objptr
1bed4     57 FA 25 F4 | 	bith	result1, #87
1bed8     43 00 00 FF 
1bedc     EC E5 05 F1 | 	add	objptr, ##34796
1bee0     F2 FA 61 FC | 	wrlong	result1, objptr
1bee4     43 00 00 FF 
1bee8     EC E5 85 F1 | 	sub	objptr, ##34796
1beec     F2 FA 01 F6 | 	mov	result1, objptr
1bef0     00 C8 01 FF 
1bef4     00 FA 45 F5 | 	or	result1, ##59768832
1bef8     43 00 00 FF 
1befc     E8 E5 05 F1 | 	add	objptr, ##34792
1bf00     F2 FA 61 FC | 	wrlong	result1, objptr
1bf04     43 00 00 FF 
1bf08     E8 E5 85 F1 | 	sub	objptr, ##34792
1bf0c     F2 FA 01 F6 | 	mov	result1, objptr
1bf10     00 D0 01 FF 
1bf14     00 FA 45 F5 | 	or	result1, ##60817408
1bf18     44 00 00 FF 
1bf1c     00 E4 05 F1 | 	add	objptr, ##34816
1bf20     F2 FA 61 FC | 	wrlong	result1, objptr
1bf24     44 00 00 FF 
1bf28     00 E4 85 F1 | 	sub	objptr, ##34816
1bf2c     F2 FA 01 F6 | 	mov	result1, objptr
1bf30     00 D8 01 FF 
1bf34     00 FA 45 F5 | 	or	result1, ##61865984
1bf38     44 00 00 FF 
1bf3c     04 E4 05 F1 | 	add	objptr, ##34820
1bf40     F2 FA 61 FC | 	wrlong	result1, objptr
1bf44     44 00 00 FF 
1bf48     04 E4 85 F1 | 	sub	objptr, ##34820
1bf4c     F2 FA 01 F6 | 	mov	result1, objptr
1bf50     76 FA 25 F4 | 	bith	result1, #118
1bf54     43 00 00 FF 
1bf58     F0 E5 05 F1 | 	add	objptr, ##34800
1bf5c     F2 FA 61 FC | 	wrlong	result1, objptr
1bf60     43 00 00 FF 
1bf64     F0 E5 85 F1 | 	sub	objptr, ##34800
1bf68     F2 FA 01 F6 | 	mov	result1, objptr
1bf6c     00 E8 01 FF 
1bf70     00 FA 45 F5 | 	or	result1, ##63963136
1bf74     43 00 00 FF 
1bf78     F4 E5 05 F1 | 	add	objptr, ##34804
1bf7c     F2 FA 61 FC | 	wrlong	result1, objptr
1bf80     43 00 00 FF 
1bf84     F4 E5 85 F1 | 	sub	objptr, ##34804
1bf88     F2 FA 01 F6 | 	mov	result1, objptr
1bf8c     95 FA 25 F4 | 	bith	result1, #149
1bf90     43 00 00 FF 
1bf94     F8 E5 05 F1 | 	add	objptr, ##34808
1bf98     F2 FA 61 FC | 	wrlong	result1, objptr
1bf9c     43 00 00 FF 
1bfa0     F8 E5 85 F1 | 	sub	objptr, ##34808
1bfa4     F2 FA 01 F6 | 	mov	result1, objptr
1bfa8     B4 FA 25 F4 | 	bith	result1, #180
1bfac     43 00 00 FF 
1bfb0     FC E5 05 F1 | 	add	objptr, ##34812
1bfb4     F2 FA 61 FC | 	wrlong	result1, objptr
1bfb8     43 00 00 FF 
1bfbc     FC E5 85 F1 | 	sub	objptr, ##34812
1bfc0     F2 FA 01 F6 | 	mov	result1, objptr
1bfc4     1A FA 25 F4 | 	bith	result1, #26
1bfc8     44 00 00 FF 
1bfcc     0C E4 05 F1 | 	add	objptr, ##34828
1bfd0     F2 FA 61 FC | 	wrlong	result1, objptr
1bfd4     44 00 00 FF 
1bfd8     0C E4 85 F1 | 	sub	objptr, ##34828
1bfdc     F2 FA 01 F6 | 	mov	result1, objptr
1bfe0     00 08 02 FF 
1bfe4     00 FA 45 F5 | 	or	result1, ##68157440
1bfe8     44 00 00 FF 
1bfec     08 E4 05 F1 | 	add	objptr, ##34824
1bff0     F2 FA 61 FC | 	wrlong	result1, objptr
1bff4     44 00 00 FF 
1bff8     08 E4 85 F1 | 	sub	objptr, ##34824
1bffc     F2 FA 01 F6 | 	mov	result1, objptr
1c000     00 10 02 FF 
1c004     00 FA 45 F5 | 	or	result1, ##69206016
1c008     44 00 00 FF 
1c00c     18 E4 05 F1 | 	add	objptr, ##34840
1c010     F2 FA 61 FC | 	wrlong	result1, objptr
1c014     44 00 00 FF 
1c018     18 E4 85 F1 | 	sub	objptr, ##34840
1c01c     F2 FA 01 F6 | 	mov	result1, objptr
1c020     00 18 02 FF 
1c024     00 FA 45 F5 | 	or	result1, ##70254592
1c028     44 00 00 FF 
1c02c     14 E4 05 F1 | 	add	objptr, ##34836
1c030     F2 FA 61 FC | 	wrlong	result1, objptr
1c034     44 00 00 FF 
1c038     14 E4 85 F1 | 	sub	objptr, ##34836
1c03c     F2 FA 01 F6 | 	mov	result1, objptr
1c040     00 20 02 FF 
1c044     00 FA 45 F5 | 	or	result1, ##71303168
1c048     44 00 00 FF 
1c04c     10 E4 05 F1 | 	add	objptr, ##34832
1c050     F2 FA 61 FC | 	wrlong	result1, objptr
1c054     44 00 00 FF 
1c058     10 E4 85 F1 | 	sub	objptr, ##34832
1c05c     F2 FA 01 F6 | 	mov	result1, objptr
1c060     00 28 02 FF 
1c064     00 FA 45 F5 | 	or	result1, ##72351744
1c068     44 00 00 FF 
1c06c     1C E4 05 F1 | 	add	objptr, ##34844
1c070     F2 FA 61 FC | 	wrlong	result1, objptr
1c074     44 00 00 FF 
1c078     1C E4 85 F1 | 	sub	objptr, ##34844
1c07c     F2 FA 01 F6 | 	mov	result1, objptr
1c080     00 30 02 FF 
1c084     00 FA 45 F5 | 	or	result1, ##73400320
1c088     44 00 00 FF 
1c08c     20 E4 05 F1 | 	add	objptr, ##34848
1c090     F2 FA 61 FC | 	wrlong	result1, objptr
1c094     44 00 00 FF 
1c098     20 E4 85 F1 | 	sub	objptr, ##34848
1c09c     F2 FA 01 F6 | 	mov	result1, objptr
1c0a0     00 38 02 FF 
1c0a4     00 FA 45 F5 | 	or	result1, ##74448896
1c0a8     43 00 00 FF 
1c0ac     B4 E4 05 F1 | 	add	objptr, ##34484
1c0b0     F2 FA 61 FC | 	wrlong	result1, objptr
1c0b4     43 00 00 FF 
1c0b8     B4 E4 85 F1 | 	sub	objptr, ##34484
1c0bc     F2 FA 01 F6 | 	mov	result1, objptr
1c0c0     00 40 02 FF 
1c0c4     00 FA 45 F5 | 	or	result1, ##75497472
1c0c8     44 00 00 FF 
1c0cc     38 E4 05 F1 | 	add	objptr, ##34872
1c0d0     F2 FA 61 FC | 	wrlong	result1, objptr
1c0d4     44 00 00 FF 
1c0d8     38 E4 85 F1 | 	sub	objptr, ##34872
1c0dc     F2 FA 01 F6 | 	mov	result1, objptr
1c0e0     00 48 02 FF 
1c0e4     00 FA 45 F5 | 	or	result1, ##76546048
1c0e8     44 00 00 FF 
1c0ec     48 E4 05 F1 | 	add	objptr, ##34888
1c0f0     F2 FA 61 FC | 	wrlong	result1, objptr
1c0f4     44 00 00 FF 
1c0f8     48 E4 85 F1 | 	sub	objptr, ##34888
1c0fc     F2 FA 01 F6 | 	mov	result1, objptr
1c100     00 50 02 FF 
1c104     00 FA 45 F5 | 	or	result1, ##77594624
1c108     44 00 00 FF 
1c10c     4C E4 05 F1 | 	add	objptr, ##34892
1c110     F2 FA 61 FC | 	wrlong	result1, objptr
1c114     44 00 00 FF 
1c118     4C E4 85 F1 | 	sub	objptr, ##34892
1c11c     F2 FA 01 F6 | 	mov	result1, objptr
1c120     00 58 02 FF 
1c124     00 FA 45 F5 | 	or	result1, ##78643200
1c128     44 00 00 FF 
1c12c     44 E4 05 F1 | 	add	objptr, ##34884
1c130     F2 FA 61 FC | 	wrlong	result1, objptr
1c134     44 00 00 FF 
1c138     44 E4 85 F1 | 	sub	objptr, ##34884
1c13c     F2 FA 01 F6 | 	mov	result1, objptr
1c140     00 60 02 FF 
1c144     00 FA 45 F5 | 	or	result1, ##79691776
1c148     44 00 00 FF 
1c14c     3C E4 05 F1 | 	add	objptr, ##34876
1c150     F2 FA 61 FC | 	wrlong	result1, objptr
1c154     44 00 00 FF 
1c158     3C E4 85 F1 | 	sub	objptr, ##34876
1c15c     F2 FA 01 F6 | 	mov	result1, objptr
1c160     00 68 02 FF 
1c164     00 FA 45 F5 | 	or	result1, ##80740352
1c168     44 00 00 FF 
1c16c     40 E4 05 F1 | 	add	objptr, ##34880
1c170     F2 FA 61 FC | 	wrlong	result1, objptr
1c174     44 00 00 FF 
1c178     40 E4 85 F1 | 	sub	objptr, ##34880
1c17c     F2 FA 01 F6 | 	mov	result1, objptr
1c180     00 70 02 FF 
1c184     00 FA 45 F5 | 	or	result1, ##81788928
1c188     44 00 00 FF 
1c18c     50 E4 05 F1 | 	add	objptr, ##34896
1c190     F2 FA 61 FC | 	wrlong	result1, objptr
1c194     44 00 00 FF 
1c198     50 E4 85 F1 | 	sub	objptr, ##34896
1c19c     F2 FA 01 F6 | 	mov	result1, objptr
1c1a0     00 78 02 FF 
1c1a4     00 FA 45 F5 | 	or	result1, ##82837504
1c1a8     44 00 00 FF 
1c1ac     54 E4 05 F1 | 	add	objptr, ##34900
1c1b0     F2 FA 61 FC | 	wrlong	result1, objptr
1c1b4     44 00 00 FF 
1c1b8     54 E4 85 F1 | 	sub	objptr, ##34900
1c1bc     F2 FA 01 F6 | 	mov	result1, objptr
1c1c0     00 80 02 FF 
1c1c4     00 FA 45 F5 | 	or	result1, ##83886080
1c1c8     44 00 00 FF 
1c1cc     58 E4 05 F1 | 	add	objptr, ##34904
1c1d0     F2 FA 61 FC | 	wrlong	result1, objptr
1c1d4     44 00 00 FF 
1c1d8     58 E4 85 F1 | 	sub	objptr, ##34904
1c1dc     F2 FA 01 F6 | 	mov	result1, objptr
1c1e0     00 88 02 FF 
1c1e4     00 FA 45 F5 | 	or	result1, ##84934656
1c1e8     44 00 00 FF 
1c1ec     5C E4 05 F1 | 	add	objptr, ##34908
1c1f0     F2 FA 61 FC | 	wrlong	result1, objptr
1c1f4     44 00 00 FF 
1c1f8     5C E4 85 F1 | 	sub	objptr, ##34908
1c1fc     F2 FA 01 F6 | 	mov	result1, objptr
1c200     00 90 02 FF 
1c204     00 FA 45 F5 | 	or	result1, ##85983232
1c208     44 00 00 FF 
1c20c     60 E4 05 F1 | 	add	objptr, ##34912
1c210     F2 FA 61 FC | 	wrlong	result1, objptr
1c214     44 00 00 FF 
1c218     60 E4 85 F1 | 	sub	objptr, ##34912
1c21c     F2 FA 01 F6 | 	mov	result1, objptr
1c220     00 98 02 FF 
1c224     00 FA 45 F5 | 	or	result1, ##87031808
1c228     44 00 00 FF 
1c22c     64 E4 05 F1 | 	add	objptr, ##34916
1c230     F2 FA 61 FC | 	wrlong	result1, objptr
1c234     44 00 00 FF 
1c238     64 E4 85 F1 | 	sub	objptr, ##34916
1c23c     F2 FA 01 F6 | 	mov	result1, objptr
1c240     00 A0 02 FF 
1c244     00 FA 45 F5 | 	or	result1, ##88080384
1c248     44 00 00 FF 
1c24c     68 E4 05 F1 | 	add	objptr, ##34920
1c250     F2 FA 61 FC | 	wrlong	result1, objptr
1c254     44 00 00 FF 
1c258     68 E4 85 F1 | 	sub	objptr, ##34920
1c25c     F2 FA 01 F6 | 	mov	result1, objptr
1c260     00 A8 02 FF 
1c264     00 FA 45 F5 | 	or	result1, ##89128960
1c268     44 00 00 FF 
1c26c     6C E4 05 F1 | 	add	objptr, ##34924
1c270     F2 FA 61 FC | 	wrlong	result1, objptr
1c274     44 00 00 FF 
1c278     6C E4 85 F1 | 	sub	objptr, ##34924
1c27c     F2 FA 01 F6 | 	mov	result1, objptr
1c280     00 B0 02 FF 
1c284     00 FA 45 F5 | 	or	result1, ##90177536
1c288     44 00 00 FF 
1c28c     78 E4 05 F1 | 	add	objptr, ##34936
1c290     F2 FA 61 FC | 	wrlong	result1, objptr
1c294     44 00 00 FF 
1c298     78 E4 85 F1 | 	sub	objptr, ##34936
1c29c     F2 FA 01 F6 | 	mov	result1, objptr
1c2a0     00 B8 02 FF 
1c2a4     00 FA 45 F5 | 	or	result1, ##91226112
1c2a8     44 00 00 FF 
1c2ac     70 E4 05 F1 | 	add	objptr, ##34928
1c2b0     F2 FA 61 FC | 	wrlong	result1, objptr
1c2b4     44 00 00 FF 
1c2b8     70 E4 85 F1 | 	sub	objptr, ##34928
1c2bc     F2 FA 01 F6 | 	mov	result1, objptr
1c2c0     00 C0 02 FF 
1c2c4     00 FA 45 F5 | 	or	result1, ##92274688
1c2c8     44 00 00 FF 
1c2cc     74 E4 05 F1 | 	add	objptr, ##34932
1c2d0     F2 FA 61 FC | 	wrlong	result1, objptr
1c2d4     44 00 00 FF 
1c2d8     74 E4 85 F1 | 	sub	objptr, ##34932
1c2dc     F2 FA 01 F6 | 	mov	result1, objptr
1c2e0     00 C8 02 FF 
1c2e4     00 FA 45 F5 | 	or	result1, ##93323264
1c2e8     44 00 00 FF 
1c2ec     7C E4 05 F1 | 	add	objptr, ##34940
1c2f0     F2 FA 61 FC | 	wrlong	result1, objptr
1c2f4     44 00 00 FF 
1c2f8     7C E4 85 F1 | 	sub	objptr, ##34940
1c2fc     F2 FA 01 F6 | 	mov	result1, objptr
1c300     00 D0 02 FF 
1c304     00 FA 45 F5 | 	or	result1, ##94371840
1c308     44 00 00 FF 
1c30c     24 E4 05 F1 | 	add	objptr, ##34852
1c310     F2 FA 61 FC | 	wrlong	result1, objptr
1c314     44 00 00 FF 
1c318     24 E4 85 F1 | 	sub	objptr, ##34852
1c31c     F2 FA 01 F6 | 	mov	result1, objptr
1c320     00 D8 02 FF 
1c324     00 FA 45 F5 | 	or	result1, ##95420416
1c328     44 00 00 FF 
1c32c     2C E4 05 F1 | 	add	objptr, ##34860
1c330     F2 FA 61 FC | 	wrlong	result1, objptr
1c334     44 00 00 FF 
1c338     2C E4 85 F1 | 	sub	objptr, ##34860
1c33c     F2 FA 01 F6 | 	mov	result1, objptr
1c340     00 E0 02 FF 
1c344     00 FA 45 F5 | 	or	result1, ##96468992
1c348     44 00 00 FF 
1c34c     30 E4 05 F1 | 	add	objptr, ##34864
1c350     F2 FA 61 FC | 	wrlong	result1, objptr
1c354     44 00 00 FF 
1c358     30 E4 85 F1 | 	sub	objptr, ##34864
1c35c     F2 FA 01 F6 | 	mov	result1, objptr
1c360     00 E8 02 FF 
1c364     00 FA 45 F5 | 	or	result1, ##97517568
1c368     44 00 00 FF 
1c36c     80 E4 05 F1 | 	add	objptr, ##34944
1c370     F2 FA 61 FC | 	wrlong	result1, objptr
1c374     44 00 00 FF 
1c378     80 E4 85 F1 | 	sub	objptr, ##34944
1c37c     F2 FA 01 F6 | 	mov	result1, objptr
1c380     00 F0 02 FF 
1c384     00 FA 45 F5 | 	or	result1, ##98566144
1c388     44 00 00 FF 
1c38c     84 E4 05 F1 | 	add	objptr, ##34948
1c390     F2 FA 61 FC | 	wrlong	result1, objptr
1c394     44 00 00 FF 
1c398     84 E4 85 F1 | 	sub	objptr, ##34948
1c39c     F2 FA 01 F6 | 	mov	result1, objptr
1c3a0     00 F8 02 FF 
1c3a4     00 FA 45 F5 | 	or	result1, ##99614720
1c3a8     44 00 00 FF 
1c3ac     88 E4 05 F1 | 	add	objptr, ##34952
1c3b0     F2 FA 61 FC | 	wrlong	result1, objptr
1c3b4     44 00 00 FF 
1c3b8     88 E4 85 F1 | 	sub	objptr, ##34952
1c3bc     F2 FA 01 F6 | 	mov	result1, objptr
1c3c0     39 FA 25 F4 | 	bith	result1, #57
1c3c4     44 00 00 FF 
1c3c8     34 E4 05 F1 | 	add	objptr, ##34868
1c3cc     F2 FA 61 FC | 	wrlong	result1, objptr
1c3d0     44 00 00 FF 
1c3d4     34 E4 85 F1 | 	sub	objptr, ##34868
1c3d8     F2 FA 01 F6 | 	mov	result1, objptr
1c3dc     00 08 03 FF 
1c3e0     00 FA 45 F5 | 	or	result1, ##101711872
1c3e4     44 00 00 FF 
1c3e8     98 E4 05 F1 | 	add	objptr, ##34968
1c3ec     F2 FA 61 FC | 	wrlong	result1, objptr
1c3f0     44 00 00 FF 
1c3f4     98 E4 85 F1 | 	sub	objptr, ##34968
1c3f8     F2 FA 01 F6 | 	mov	result1, objptr
1c3fc     00 10 03 FF 
1c400     00 FA 45 F5 | 	or	result1, ##102760448
1c404     44 00 00 FF 
1c408     A0 E4 05 F1 | 	add	objptr, ##34976
1c40c     F2 FA 61 FC | 	wrlong	result1, objptr
1c410     44 00 00 FF 
1c414     A0 E4 85 F1 | 	sub	objptr, ##34976
1c418     F2 FA 01 F6 | 	mov	result1, objptr
1c41c     00 18 03 FF 
1c420     00 FA 45 F5 | 	or	result1, ##103809024
1c424     44 00 00 FF 
1c428     94 E4 05 F1 | 	add	objptr, ##34964
1c42c     F2 FA 61 FC | 	wrlong	result1, objptr
1c430     44 00 00 FF 
1c434     94 E4 85 F1 | 	sub	objptr, ##34964
1c438     F2 FA 01 F6 | 	mov	result1, objptr
1c43c     00 20 03 FF 
1c440     00 FA 45 F5 | 	or	result1, ##104857600
1c444     44 00 00 FF 
1c448     90 E4 05 F1 | 	add	objptr, ##34960
1c44c     F2 FA 61 FC | 	wrlong	result1, objptr
1c450     44 00 00 FF 
1c454     90 E4 85 F1 | 	sub	objptr, ##34960
1c458     F2 FA 01 F6 | 	mov	result1, objptr
1c45c     00 28 03 FF 
1c460     00 FA 45 F5 | 	or	result1, ##105906176
1c464     44 00 00 FF 
1c468     8C E4 05 F1 | 	add	objptr, ##34956
1c46c     F2 FA 61 FC | 	wrlong	result1, objptr
1c470     44 00 00 FF 
1c474     8C E4 85 F1 | 	sub	objptr, ##34956
1c478     F2 FA 01 F6 | 	mov	result1, objptr
1c47c     00 30 03 FF 
1c480     00 FA 45 F5 | 	or	result1, ##106954752
1c484     44 00 00 FF 
1c488     9C E4 05 F1 | 	add	objptr, ##34972
1c48c     F2 FA 61 FC | 	wrlong	result1, objptr
1c490     44 00 00 FF 
1c494     9C E4 85 F1 | 	sub	objptr, ##34972
1c498     F2 FA 01 F6 | 	mov	result1, objptr
1c49c     00 38 03 FF 
1c4a0     00 FA 45 F5 | 	or	result1, ##108003328
1c4a4     44 00 00 FF 
1c4a8     A4 E4 05 F1 | 	add	objptr, ##34980
1c4ac     F2 FA 61 FC | 	wrlong	result1, objptr
1c4b0     44 00 00 FF 
1c4b4     A4 E4 85 F1 | 	sub	objptr, ##34980
1c4b8     F2 FA 01 F6 | 	mov	result1, objptr
1c4bc     00 40 03 FF 
1c4c0     00 FA 45 F5 | 	or	result1, ##109051904
1c4c4     44 00 00 FF 
1c4c8     A8 E4 05 F1 | 	add	objptr, ##34984
1c4cc     F2 FA 61 FC | 	wrlong	result1, objptr
1c4d0     44 00 00 FF 
1c4d4     A8 E4 85 F1 | 	sub	objptr, ##34984
1c4d8     F2 FA 01 F6 | 	mov	result1, objptr
1c4dc     00 48 03 FF 
1c4e0     00 FA 45 F5 | 	or	result1, ##110100480
1c4e4     44 00 00 FF 
1c4e8     AC E4 05 F1 | 	add	objptr, ##34988
1c4ec     F2 FA 61 FC | 	wrlong	result1, objptr
1c4f0     44 00 00 FF 
1c4f4     AC E4 85 F1 | 	sub	objptr, ##34988
1c4f8     F2 FA 01 F6 | 	mov	result1, objptr
1c4fc     00 50 03 FF 
1c500     00 FA 45 F5 | 	or	result1, ##111149056
1c504     44 00 00 FF 
1c508     B4 E4 05 F1 | 	add	objptr, ##34996
1c50c     F2 FA 61 FC | 	wrlong	result1, objptr
1c510     44 00 00 FF 
1c514     B4 E4 85 F1 | 	sub	objptr, ##34996
1c518     F2 FA 01 F6 | 	mov	result1, objptr
1c51c     00 58 03 FF 
1c520     00 FA 45 F5 | 	or	result1, ##112197632
1c524     44 00 00 FF 
1c528     B8 E4 05 F1 | 	add	objptr, ##35000
1c52c     F2 FA 61 FC | 	wrlong	result1, objptr
1c530     44 00 00 FF 
1c534     B8 E4 85 F1 | 	sub	objptr, ##35000
1c538     F2 FA 01 F6 | 	mov	result1, objptr
1c53c     00 60 03 FF 
1c540     00 FA 45 F5 | 	or	result1, ##113246208
1c544     44 00 00 FF 
1c548     BC E4 05 F1 | 	add	objptr, ##35004
1c54c     F2 FA 61 FC | 	wrlong	result1, objptr
1c550     44 00 00 FF 
1c554     BC E4 85 F1 | 	sub	objptr, ##35004
1c558     F2 FA 01 F6 | 	mov	result1, objptr
1c55c     00 68 03 FF 
1c560     00 FA 45 F5 | 	or	result1, ##114294784
1c564     44 00 00 FF 
1c568     C0 E4 05 F1 | 	add	objptr, ##35008
1c56c     F2 FA 61 FC | 	wrlong	result1, objptr
1c570     44 00 00 FF 
1c574     C0 E4 85 F1 | 	sub	objptr, ##35008
1c578     F2 FA 01 F6 | 	mov	result1, objptr
1c57c     00 70 03 FF 
1c580     00 FA 45 F5 | 	or	result1, ##115343360
1c584     44 00 00 FF 
1c588     C4 E4 05 F1 | 	add	objptr, ##35012
1c58c     F2 FA 61 FC | 	wrlong	result1, objptr
1c590     44 00 00 FF 
1c594     C4 E4 85 F1 | 	sub	objptr, ##35012
1c598     F2 FA 01 F6 | 	mov	result1, objptr
1c59c     00 78 03 FF 
1c5a0     00 FA 45 F5 | 	or	result1, ##116391936
1c5a4     44 00 00 FF 
1c5a8     C8 E4 05 F1 | 	add	objptr, ##35016
1c5ac     F2 FA 61 FC | 	wrlong	result1, objptr
1c5b0     44 00 00 FF 
1c5b4     C8 E4 85 F1 | 	sub	objptr, ##35016
1c5b8     F2 FA 01 F6 | 	mov	result1, objptr
1c5bc     58 FA 25 F4 | 	bith	result1, #88
1c5c0     44 00 00 FF 
1c5c4     CC E4 05 F1 | 	add	objptr, ##35020
1c5c8     F2 FA 61 FC | 	wrlong	result1, objptr
1c5cc     44 00 00 FF 
1c5d0     CC E4 85 F1 | 	sub	objptr, ##35020
1c5d4     F2 FA 01 F6 | 	mov	result1, objptr
1c5d8     00 88 03 FF 
1c5dc     00 FA 45 F5 | 	or	result1, ##118489088
1c5e0     44 00 00 FF 
1c5e4     D0 E4 05 F1 | 	add	objptr, ##35024
1c5e8     F2 FA 61 FC | 	wrlong	result1, objptr
1c5ec     44 00 00 FF 
1c5f0     D0 E4 85 F1 | 	sub	objptr, ##35024
1c5f4     F2 FA 01 F6 | 	mov	result1, objptr
1c5f8     00 90 03 FF 
1c5fc     00 FA 45 F5 | 	or	result1, ##119537664
1c600     44 00 00 FF 
1c604     B0 E4 05 F1 | 	add	objptr, ##34992
1c608     F2 FA 61 FC | 	wrlong	result1, objptr
1c60c     44 00 00 FF 
1c610     B0 E4 85 F1 | 	sub	objptr, ##34992
1c614     F2 FA 01 F6 | 	mov	result1, objptr
1c618     00 98 03 FF 
1c61c     00 FA 45 F5 | 	or	result1, ##120586240
1c620     43 00 00 FF 
1c624     A8 E4 05 F1 | 	add	objptr, ##34472
1c628     F2 FA 61 FC | 	wrlong	result1, objptr
1c62c     43 00 00 FF 
1c630     A8 E4 85 F1 | 	sub	objptr, ##34472
1c634     F2 FA 01 F6 | 	mov	result1, objptr
1c638     00 A0 03 FF 
1c63c     00 FA 45 F5 | 	or	result1, ##121634816
1c640     44 00 00 FF 
1c644     D4 E4 05 F1 | 	add	objptr, ##35028
1c648     F2 FA 61 FC | 	wrlong	result1, objptr
1c64c     44 00 00 FF 
1c650     D4 E4 85 F1 | 	sub	objptr, ##35028
1c654     F2 FA 01 F6 | 	mov	result1, objptr
1c658     00 A8 03 FF 
1c65c     00 FA 45 F5 | 	or	result1, ##122683392
1c660     44 00 00 FF 
1c664     D8 E4 05 F1 | 	add	objptr, ##35032
1c668     F2 FA 61 FC | 	wrlong	result1, objptr
1c66c     44 00 00 FF 
1c670     D8 E4 85 F1 | 	sub	objptr, ##35032
1c674     F2 FA 01 F6 | 	mov	result1, objptr
1c678     00 B0 03 FF 
1c67c     00 FA 45 F5 | 	or	result1, ##123731968
1c680     44 00 00 FF 
1c684     EC E4 05 F1 | 	add	objptr, ##35052
1c688     F2 FA 61 FC | 	wrlong	result1, objptr
1c68c     44 00 00 FF 
1c690     EC E4 85 F1 | 	sub	objptr, ##35052
1c694     F2 FA 01 F6 | 	mov	result1, objptr
1c698     00 B8 03 FF 
1c69c     00 FA 45 F5 | 	or	result1, ##124780544
1c6a0     44 00 00 FF 
1c6a4     E8 E4 05 F1 | 	add	objptr, ##35048
1c6a8     F2 FA 61 FC | 	wrlong	result1, objptr
1c6ac     44 00 00 FF 
1c6b0     E8 E4 85 F1 | 	sub	objptr, ##35048
1c6b4     F2 FA 01 F6 | 	mov	result1, objptr
1c6b8     77 FA 25 F4 | 	bith	result1, #119
1c6bc     44 00 00 FF 
1c6c0     E0 E4 05 F1 | 	add	objptr, ##35040
1c6c4     F2 FA 61 FC | 	wrlong	result1, objptr
1c6c8     44 00 00 FF 
1c6cc     E0 E4 85 F1 | 	sub	objptr, ##35040
1c6d0     F2 FA 01 F6 | 	mov	result1, objptr
1c6d4     00 C8 03 FF 
1c6d8     00 FA 45 F5 | 	or	result1, ##126877696
1c6dc     44 00 00 FF 
1c6e0     DC E4 05 F1 | 	add	objptr, ##35036
1c6e4     F2 FA 61 FC | 	wrlong	result1, objptr
1c6e8     44 00 00 FF 
1c6ec     DC E4 85 F1 | 	sub	objptr, ##35036
1c6f0     F2 FA 01 F6 | 	mov	result1, objptr
1c6f4     00 D0 03 FF 
1c6f8     00 FA 45 F5 | 	or	result1, ##127926272
1c6fc     44 00 00 FF 
1c700     FC E4 05 F1 | 	add	objptr, ##35068
1c704     F2 FA 61 FC | 	wrlong	result1, objptr
1c708     44 00 00 FF 
1c70c     FC E4 85 F1 | 	sub	objptr, ##35068
1c710     F2 FA 01 F6 | 	mov	result1, objptr
1c714     00 D8 03 FF 
1c718     00 FA 45 F5 | 	or	result1, ##128974848
1c71c     44 00 00 FF 
1c720     F0 E4 05 F1 | 	add	objptr, ##35056
1c724     F2 FA 61 FC | 	wrlong	result1, objptr
1c728     44 00 00 FF 
1c72c     F0 E4 85 F1 | 	sub	objptr, ##35056
1c730     F2 FA 01 F6 | 	mov	result1, objptr
1c734     96 FA 25 F4 | 	bith	result1, #150
1c738     44 00 00 FF 
1c73c     F4 E4 05 F1 | 	add	objptr, ##35060
1c740     F2 FA 61 FC | 	wrlong	result1, objptr
1c744     44 00 00 FF 
1c748     F4 E4 85 F1 | 	sub	objptr, ##35060
1c74c     F2 FA 01 F6 | 	mov	result1, objptr
1c750     00 E8 03 FF 
1c754     00 FA 45 F5 | 	or	result1, ##131072000
1c758     44 00 00 FF 
1c75c     F8 E4 05 F1 | 	add	objptr, ##35064
1c760     F2 FA 61 FC | 	wrlong	result1, objptr
1c764     44 00 00 FF 
1c768     F8 E4 85 F1 | 	sub	objptr, ##35064
1c76c     F2 FA 01 F6 | 	mov	result1, objptr
1c770     B5 FA 25 F4 | 	bith	result1, #181
1c774     44 00 00 FF 
1c778     00 E5 05 F1 | 	add	objptr, ##35072
1c77c     F2 FA 61 FC | 	wrlong	result1, objptr
1c780     44 00 00 FF 
1c784     00 E5 85 F1 | 	sub	objptr, ##35072
1c788     F2 FA 01 F6 | 	mov	result1, objptr
1c78c     D4 FA 25 F4 | 	bith	result1, #212
1c790     44 00 00 FF 
1c794     04 E5 05 F1 | 	add	objptr, ##35076
1c798     F2 FA 61 FC | 	wrlong	result1, objptr
1c79c     44 00 00 FF 
1c7a0     04 E5 85 F1 | 	sub	objptr, ##35076
1c7a4     F2 FA 01 F6 | 	mov	result1, objptr
1c7a8     1B FA 25 F4 | 	bith	result1, #27
1c7ac     44 00 00 FF 
1c7b0     08 E5 05 F1 | 	add	objptr, ##35080
1c7b4     F2 FA 61 FC | 	wrlong	result1, objptr
1c7b8     44 00 00 FF 
1c7bc     08 E5 85 F1 | 	sub	objptr, ##35080
1c7c0     F2 FA 01 F6 | 	mov	result1, objptr
1c7c4     00 08 04 FF 
1c7c8     00 FA 45 F5 | 	or	result1, ##135266304
1c7cc     44 00 00 FF 
1c7d0     0C E5 05 F1 | 	add	objptr, ##35084
1c7d4     F2 FA 61 FC | 	wrlong	result1, objptr
1c7d8     44 00 00 FF 
1c7dc     0C E5 85 F1 | 	sub	objptr, ##35084
1c7e0     F2 FA 01 F6 | 	mov	result1, objptr
1c7e4     00 10 04 FF 
1c7e8     00 FA 45 F5 | 	or	result1, ##136314880
1c7ec     44 00 00 FF 
1c7f0     10 E5 05 F1 | 	add	objptr, ##35088
1c7f4     F2 FA 61 FC | 	wrlong	result1, objptr
1c7f8     44 00 00 FF 
1c7fc     10 E5 85 F1 | 	sub	objptr, ##35088
1c800     F2 FA 01 F6 | 	mov	result1, objptr
1c804     00 18 04 FF 
1c808     00 FA 45 F5 | 	or	result1, ##137363456
1c80c     44 00 00 FF 
1c810     14 E5 05 F1 | 	add	objptr, ##35092
1c814     F2 FA 61 FC | 	wrlong	result1, objptr
1c818     44 00 00 FF 
1c81c     14 E5 85 F1 | 	sub	objptr, ##35092
1c820     F2 FA 01 F6 | 	mov	result1, objptr
1c824     00 20 04 FF 
1c828     00 FA 45 F5 | 	or	result1, ##138412032
1c82c     44 00 00 FF 
1c830     1C E5 05 F1 | 	add	objptr, ##35100
1c834     F2 FA 61 FC | 	wrlong	result1, objptr
1c838     44 00 00 FF 
1c83c     1C E5 85 F1 | 	sub	objptr, ##35100
1c840     F2 FA 01 F6 | 	mov	result1, objptr
1c844     00 28 04 FF 
1c848     00 FA 45 F5 | 	or	result1, ##139460608
1c84c     44 00 00 FF 
1c850     20 E5 05 F1 | 	add	objptr, ##35104
1c854     F2 FA 61 FC | 	wrlong	result1, objptr
1c858     44 00 00 FF 
1c85c     20 E5 85 F1 | 	sub	objptr, ##35104
1c860     F2 FA 01 F6 | 	mov	result1, objptr
1c864     00 30 04 FF 
1c868     00 FA 45 F5 | 	or	result1, ##140509184
1c86c     44 00 00 FF 
1c870     24 E5 05 F1 | 	add	objptr, ##35108
1c874     F2 FA 61 FC | 	wrlong	result1, objptr
1c878     44 00 00 FF 
1c87c     24 E5 85 F1 | 	sub	objptr, ##35108
1c880     F2 FA 01 F6 | 	mov	result1, objptr
1c884     00 38 04 FF 
1c888     00 FA 45 F5 | 	or	result1, ##141557760
1c88c     44 00 00 FF 
1c890     18 E5 05 F1 | 	add	objptr, ##35096
1c894     F2 FA 61 FC | 	wrlong	result1, objptr
1c898     44 00 00 FF 
1c89c     18 E5 85 F1 | 	sub	objptr, ##35096
1c8a0     F2 FA 01 F6 | 	mov	result1, objptr
1c8a4     00 40 04 FF 
1c8a8     00 FA 45 F5 | 	or	result1, ##142606336
1c8ac     44 00 00 FF 
1c8b0     28 E5 05 F1 | 	add	objptr, ##35112
1c8b4     F2 FA 61 FC | 	wrlong	result1, objptr
1c8b8     44 00 00 FF 
1c8bc     28 E5 85 F1 | 	sub	objptr, ##35112
1c8c0     F2 FA 01 F6 | 	mov	result1, objptr
1c8c4     00 48 04 FF 
1c8c8     00 FA 45 F5 | 	or	result1, ##143654912
1c8cc     44 00 00 FF 
1c8d0     5C E5 05 F1 | 	add	objptr, ##35164
1c8d4     F2 FA 61 FC | 	wrlong	result1, objptr
1c8d8     44 00 00 FF 
1c8dc     5C E5 85 F1 | 	sub	objptr, ##35164
1c8e0     F2 FA 01 F6 | 	mov	result1, objptr
1c8e4     00 50 04 FF 
1c8e8     00 FA 45 F5 | 	or	result1, ##144703488
1c8ec     44 00 00 FF 
1c8f0     54 E5 05 F1 | 	add	objptr, ##35156
1c8f4     F2 FA 61 FC | 	wrlong	result1, objptr
1c8f8     44 00 00 FF 
1c8fc     54 E5 85 F1 | 	sub	objptr, ##35156
1c900     F2 FA 01 F6 | 	mov	result1, objptr
1c904     00 58 04 FF 
1c908     00 FA 45 F5 | 	or	result1, ##145752064
1c90c     44 00 00 FF 
1c910     2C E5 05 F1 | 	add	objptr, ##35116
1c914     F2 FA 61 FC | 	wrlong	result1, objptr
1c918     44 00 00 FF 
1c91c     2C E5 85 F1 | 	sub	objptr, ##35116
1c920     F2 FA 01 F6 | 	mov	result1, objptr
1c924     00 60 04 FF 
1c928     00 FA 45 F5 | 	or	result1, ##146800640
1c92c     44 00 00 FF 
1c930     30 E5 05 F1 | 	add	objptr, ##35120
1c934     F2 FA 61 FC | 	wrlong	result1, objptr
1c938     44 00 00 FF 
1c93c     30 E5 85 F1 | 	sub	objptr, ##35120
1c940     F2 FA 01 F6 | 	mov	result1, objptr
1c944     00 68 04 FF 
1c948     00 FA 45 F5 | 	or	result1, ##147849216
1c94c     44 00 00 FF 
1c950     4C E5 05 F1 | 	add	objptr, ##35148
1c954     F2 FA 61 FC | 	wrlong	result1, objptr
1c958     44 00 00 FF 
1c95c     4C E5 85 F1 | 	sub	objptr, ##35148
1c960     F2 FA 01 F6 | 	mov	result1, objptr
1c964     00 70 04 FF 
1c968     00 FA 45 F5 | 	or	result1, ##148897792
1c96c     44 00 00 FF 
1c970     50 E5 05 F1 | 	add	objptr, ##35152
1c974     F2 FA 61 FC | 	wrlong	result1, objptr
1c978     44 00 00 FF 
1c97c     50 E5 85 F1 | 	sub	objptr, ##35152
1c980                 | _init_commands_ret
1c980     2D 00 64 FD | 	ret
1c984                 | 
1c984                 | ' 
1c984                 | ' ''--------------------------------Error strings -------------------------------------
1c984                 | ' sub init_audio
1c984                 | _init_audio
1c984     06 4A 05 F6 | 	mov	COUNT_, #6
1c988     A8 00 A0 FD | 	call	#pushregs_
1c98c     00 C0 1F FF 
1c990     00 1E 06 F6 | 	mov	local01, ##1065353216
1c994                 | ' 'for i=0 to 1023 : samplebuf(0,i)=round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1c994                 | ' 'for i=0 to 511  : samplebuf(1,i)= -32512+127*i: samplebuf(1,512+i)=-samplebuf(1,i) : next i   		' 1 : triangle 
1c994                 | ' 'for i=0 to 1023 : samplebuf(2,i)= -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1c994                 | ' 'for i=0 to 127  : samplebuf(3,i)= -32600 : next i : for i=128 to 1023 : samplebuf(3,i) =32600 : next i 	' 3 pulse 12.5%
1c994                 | ' 'for i=0 to 511  : samplebuf(4,i)= -32600 : next i : for i=512 to 1023 : samplebuf(4,i) =32600 : next i 	' 4 square
1c994                 | ' 'for i=0 to 255  : samplebuf(5,i)= -32600 : next i : for i=256 to 1023 : samplebuf(5,i) =32600 : next i 	' 5 pulse 25%
1c994                 | ' 'for i=0 to 1023 : samplebuf(6,i)= dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1c994                 | ' 'for i=0 to 1023 : samplebuf(7,i)= dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1c994                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1c994     00 20 06 F6 | 	mov	local02, #0
1c998                 | LR__2300
1c998     10 23 02 F6 | 	mov	local03, local02
1c99c     01 22 66 F0 | 	shl	local03, #1
1c9a0     58 7F 23 FF 
1c9a4     00 24 06 F6 | 	mov	local04, ##1191096320
1c9a8     10 13 52 F6 | 	abs	arg01, local02 wc
1c9ac     1F 26 C6 C9 |  if_b	decod	local05, #31
1c9b0     00 26 06 36 |  if_ae	mov	local05, #0
1c9b4     20 67 B0 FD | 	call	#__system___float_fromuns
1c9b8     13 FB 61 F5 | 	xor	result1, local05
1c9bc     FD 12 02 F6 | 	mov	arg01, result1
1c9c0     87 24 20 FF 
1c9c4     DB 15 06 F6 | 	mov	arg02, ##1078530011
1c9c8     10 6B B0 FD | 	call	#__system___float_mul
1c9cc     FD 12 02 F6 | 	mov	arg01, result1
1c9d0     00 00 22 FF 
1c9d4     00 14 06 F6 | 	mov	arg02, ##1140850688
1c9d8     04 6D B0 FD | 	call	#__system___float_div
1c9dc     FD 12 02 F6 | 	mov	arg01, result1
1c9e0     34 74 B0 FD | 	call	#__system____builtin_sinf
1c9e4     FD 14 02 F6 | 	mov	arg02, result1
1c9e8     12 13 02 F6 | 	mov	arg01, local04
1c9ec     EC 6A B0 FD | 	call	#__system___float_mul
1c9f0     FD 12 02 F6 | 	mov	arg01, result1
1c9f4     01 14 06 F6 | 	mov	arg02, #1
1c9f8     A8 6F B0 FD | 	call	#__system___float_tointeger
1c9fc     FD 14 02 F6 | 	mov	arg02, result1
1ca00     11 13 02 F6 | 	mov	arg01, local03
1ca04     68 0D B0 FD | 	call	#_psdpoke
1ca08     01 20 06 F1 | 	add	local02, #1
1ca0c     02 00 00 FF 
1ca10     00 20 56 F2 | 	cmps	local02, ##1024 wc
1ca14     80 FF 9F CD |  if_b	jmp	#LR__2300
1ca18                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
1ca18     00 20 06 F6 | 	mov	local02, #0
1ca1c                 | LR__2301
1ca1c     10 15 02 F6 | 	mov	arg02, local02
1ca20     01 14 66 F0 | 	shl	arg02, #1
1ca24     0B 12 C6 F9 | 	decod	arg01, #11
1ca28     0A 13 02 F1 | 	add	arg01, arg02
1ca2c     10 25 02 F6 | 	mov	local04, local02
1ca30     07 24 66 F0 | 	shl	local04, #7
1ca34     10 25 82 F1 | 	sub	local04, local02
1ca38     C0 FF 7F FF 
1ca3c     00 15 06 F6 | 	mov	arg02, ##-32512
1ca40     12 15 02 F1 | 	add	arg02, local04
1ca44     28 0D B0 FD | 	call	#_psdpoke
1ca48     09 24 C6 F9 | 	decod	local04, #9
1ca4c     10 25 02 F1 | 	add	local04, local02
1ca50     01 24 66 F0 | 	shl	local04, #1
1ca54     0B 12 C6 F9 | 	decod	arg01, #11
1ca58     12 13 02 F1 | 	add	arg01, local04
1ca5c     10 27 02 F6 | 	mov	local05, local02
1ca60     07 26 66 F0 | 	shl	local05, #7
1ca64     10 27 82 F1 | 	sub	local05, local02
1ca68     3F 00 00 FF 
1ca6c     00 15 06 F6 | 	mov	arg02, ##32512
1ca70     13 15 82 F1 | 	sub	arg02, local05
1ca74     F8 0C B0 FD | 	call	#_psdpoke
1ca78     01 20 06 F1 | 	add	local02, #1
1ca7c     01 00 00 FF 
1ca80     00 20 56 F2 | 	cmps	local02, ##512 wc
1ca84     94 FF 9F CD |  if_b	jmp	#LR__2301
1ca88                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1ca88     00 20 06 F6 | 	mov	local02, #0
1ca8c                 | LR__2302
1ca8c     10 27 02 F6 | 	mov	local05, local02
1ca90     01 26 66 F0 | 	shl	local05, #1
1ca94     0C 12 C6 F9 | 	decod	arg01, #12
1ca98     13 13 02 F1 | 	add	arg01, local05
1ca9c     10 27 02 F6 | 	mov	local05, local02
1caa0     06 26 66 F0 | 	shl	local05, #6
1caa4     10 27 82 F1 | 	sub	local05, local02
1caa8     C1 FF 7F FF 
1caac     00 14 06 F6 | 	mov	arg02, ##-32256
1cab0     13 15 02 F1 | 	add	arg02, local05
1cab4     B8 0C B0 FD | 	call	#_psdpoke
1cab8     01 20 06 F1 | 	add	local02, #1
1cabc     02 00 00 FF 
1cac0     00 20 56 F2 | 	cmps	local02, ##1024 wc
1cac4     C4 FF 9F CD |  if_b	jmp	#LR__2302
1cac8                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
1cac8     00 20 06 F6 | 	mov	local02, #0
1cacc                 | LR__2303
1cacc     10 27 02 F6 | 	mov	local05, local02
1cad0     01 26 66 F0 | 	shl	local05, #1
1cad4     0C 00 00 FF 
1cad8     00 12 06 F6 | 	mov	arg01, ##6144
1cadc     13 13 02 F1 | 	add	arg01, local05
1cae0     C0 FF 7F FF 
1cae4     A8 14 06 F6 | 	mov	arg02, ##-32600
1cae8     84 0C B0 FD | 	call	#_psdpoke
1caec     01 20 06 F1 | 	add	local02, #1
1caf0     80 20 56 F2 | 	cmps	local02, #128 wc
1caf4     D4 FF 9F CD |  if_b	jmp	#LR__2303
1caf8     80 20 06 F6 | 	mov	local02, #128
1cafc                 | LR__2304
1cafc     10 27 02 F6 | 	mov	local05, local02
1cb00     01 26 66 F0 | 	shl	local05, #1
1cb04     0C 00 00 FF 
1cb08     00 12 06 F6 | 	mov	arg01, ##6144
1cb0c     13 13 02 F1 | 	add	arg01, local05
1cb10     3F 00 00 FF 
1cb14     58 15 06 F6 | 	mov	arg02, ##32600
1cb18     54 0C B0 FD | 	call	#_psdpoke
1cb1c     01 20 06 F1 | 	add	local02, #1
1cb20     02 00 00 FF 
1cb24     00 20 16 F2 | 	cmp	local02, ##1024 wc
1cb28     D0 FF 9F CD |  if_b	jmp	#LR__2304
1cb2c                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
1cb2c     00 20 06 F6 | 	mov	local02, #0
1cb30                 | LR__2305
1cb30     10 27 02 F6 | 	mov	local05, local02
1cb34     01 26 66 F0 | 	shl	local05, #1
1cb38     0D 12 C6 F9 | 	decod	arg01, #13
1cb3c     13 13 02 F1 | 	add	arg01, local05
1cb40     C0 FF 7F FF 
1cb44     A8 14 06 F6 | 	mov	arg02, ##-32600
1cb48     24 0C B0 FD | 	call	#_psdpoke
1cb4c     01 20 06 F1 | 	add	local02, #1
1cb50     01 00 00 FF 
1cb54     00 20 56 F2 | 	cmps	local02, ##512 wc
1cb58     D4 FF 9F CD |  if_b	jmp	#LR__2305
1cb5c     09 20 C6 F9 | 	decod	local02, #9
1cb60                 | LR__2306
1cb60     10 27 02 F6 | 	mov	local05, local02
1cb64     01 26 66 F0 | 	shl	local05, #1
1cb68     0D 12 C6 F9 | 	decod	arg01, #13
1cb6c     13 13 02 F1 | 	add	arg01, local05
1cb70     3F 00 00 FF 
1cb74     58 15 06 F6 | 	mov	arg02, ##32600
1cb78     F4 0B B0 FD | 	call	#_psdpoke
1cb7c     01 20 06 F1 | 	add	local02, #1
1cb80     02 00 00 FF 
1cb84     00 20 16 F2 | 	cmp	local02, ##1024 wc
1cb88     D4 FF 9F CD |  if_b	jmp	#LR__2306
1cb8c                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
1cb8c     00 20 06 F6 | 	mov	local02, #0
1cb90                 | LR__2307
1cb90     10 27 02 F6 | 	mov	local05, local02
1cb94     01 26 66 F0 | 	shl	local05, #1
1cb98     14 00 00 FF 
1cb9c     00 12 06 F6 | 	mov	arg01, ##10240
1cba0     13 13 02 F1 | 	add	arg01, local05
1cba4     C0 FF 7F FF 
1cba8     A8 14 06 F6 | 	mov	arg02, ##-32600
1cbac     C0 0B B0 FD | 	call	#_psdpoke
1cbb0     01 20 06 F1 | 	add	local02, #1
1cbb4     00 21 56 F2 | 	cmps	local02, #256 wc
1cbb8     D4 FF 9F CD |  if_b	jmp	#LR__2307
1cbbc     00 21 06 F6 | 	mov	local02, #256
1cbc0                 | LR__2308
1cbc0     10 27 02 F6 | 	mov	local05, local02
1cbc4     01 26 66 F0 | 	shl	local05, #1
1cbc8     14 00 00 FF 
1cbcc     00 12 06 F6 | 	mov	arg01, ##10240
1cbd0     13 13 02 F1 | 	add	arg01, local05
1cbd4     3F 00 00 FF 
1cbd8     58 15 06 F6 | 	mov	arg02, ##32600
1cbdc     90 0B B0 FD | 	call	#_psdpoke
1cbe0     01 20 06 F1 | 	add	local02, #1
1cbe4     02 00 00 FF 
1cbe8     00 20 16 F2 | 	cmp	local02, ##1024 wc
1cbec     D0 FF 9F CD |  if_b	jmp	#LR__2308
1cbf0                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
1cbf0     18 00 00 FF 
1cbf4     00 20 06 F6 | 	mov	local02, ##12288
1cbf8                 | LR__2309
1cbf8     10 13 02 F6 | 	mov	arg01, local02
1cbfc     00 14 06 F6 | 	mov	arg02, #0
1cc00     24 0B B0 FD | 	call	#_pslpoke
1cc04     04 20 06 F1 | 	add	local02, #4
1cc08     77 00 00 FF 
1cc0c     FD 21 56 F2 | 	cmps	local02, ##61437 wc
1cc10     E4 FF 9F CD |  if_b	jmp	#LR__2309
1cc14                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1cc14     00 20 06 F6 | 	mov	local02, #0
1cc18                 | LR__2310
1cc18     10 27 02 F6 | 	mov	local05, local02
1cc1c     01 26 66 F0 | 	shl	local05, #1
1cc20     78 00 00 FF 
1cc24     00 22 06 F6 | 	mov	local03, ##61440
1cc28     13 23 02 F1 | 	add	local03, local05
1cc2c     14 00 00 FF 
1cc30     C6 EA 05 F1 | 	add	ptr__dat__, ##10438
1cc34     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1cc38     14 00 00 FF 
1cc3c     C6 EA 85 F1 | 	sub	ptr__dat__, ##10438
1cc40     10 12 06 F1 | 	add	arg01, #16
1cc44     10 15 02 F6 | 	mov	arg02, local02
1cc48     01 14 66 F0 | 	shl	arg02, #1
1cc4c     0A 13 02 F1 | 	add	arg01, arg02
1cc50     09 15 E2 FA | 	rdword	arg02, arg01
1cc54     11 13 02 F6 | 	mov	arg01, local03
1cc58     14 0B B0 FD | 	call	#_psdpoke
1cc5c     01 20 06 F1 | 	add	local02, #1
1cc60     02 00 00 FF 
1cc64     00 20 56 F2 | 	cmps	local02, ##1024 wc
1cc68     AC FF 9F CD |  if_b	jmp	#LR__2310
1cc6c                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1cc6c     00 20 06 F6 | 	mov	local02, #0
1cc70                 | LR__2311
1cc70     10 27 02 F6 | 	mov	local05, local02
1cc74     01 26 66 F0 | 	shl	local05, #1
1cc78     7C 00 00 FF 
1cc7c     00 22 06 F6 | 	mov	local03, ##63488
1cc80     13 23 02 F1 | 	add	local03, local05
1cc84     10 00 00 FF 
1cc88     B6 EA 05 F1 | 	add	ptr__dat__, ##8374
1cc8c     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1cc90     10 00 00 FF 
1cc94     B6 EA 85 F1 | 	sub	ptr__dat__, ##8374
1cc98     10 12 06 F1 | 	add	arg01, #16
1cc9c     10 15 02 F6 | 	mov	arg02, local02
1cca0     01 14 66 F0 | 	shl	arg02, #1
1cca4     0A 13 02 F1 | 	add	arg01, arg02
1cca8     09 15 E2 FA | 	rdword	arg02, arg01
1ccac     11 13 02 F6 | 	mov	arg01, local03
1ccb0     BC 0A B0 FD | 	call	#_psdpoke
1ccb4     01 20 06 F1 | 	add	local02, #1
1ccb8     02 00 00 FF 
1ccbc     00 20 56 F2 | 	cmps	local02, ##1024 wc
1ccc0     AC FF 9F CD |  if_b	jmp	#LR__2311
1ccc4                 | ' 
1ccc4                 | ' 
1ccc4                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
1ccc4     00 20 06 F6 | 	mov	local02, #0
1ccc8     0C 00 00 FF 
1cccc     D8 E4 05 F1 | 	add	objptr, ##6360
1ccd0     97 18 48 FB | 	callpa	#(@LR__2313-@LR__2312)>>2,fcache_load_ptr_
1ccd4                 | LR__2312
1ccd4     10 27 02 F6 | 	mov	local05, local02
1ccd8     01 26 66 F0 | 	shl	local05, #1
1ccdc     F2 26 02 F1 | 	add	local05, objptr
1cce0     10 23 02 F6 | 	mov	local03, local02
1cce4     08 22 66 F0 | 	shl	local03, #8
1cce8     7F 00 00 FF 
1ccec     00 29 06 F6 | 	mov	local06, ##65280
1ccf0     11 29 82 F1 | 	sub	local06, local03
1ccf4     13 29 52 FC | 	wrword	local06, local05
1ccf8     01 20 06 F1 | 	add	local02, #1
1ccfc     00 21 56 F2 | 	cmps	local02, #256 wc
1cd00     D0 FF 9F CD |  if_b	jmp	#LR__2312
1cd04                 | LR__2313
1cd04     0C 00 00 FF 
1cd08     D8 E4 85 F1 | 	sub	objptr, ##6360
1cd0c                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
1cd0c     00 20 06 F6 | 	mov	local02, #0
1cd10                 | LR__2314
1cd10     10 27 02 F6 | 	mov	local05, local02
1cd14     01 26 66 F0 | 	shl	local05, #1
1cd18     0D 00 00 FF 
1cd1c     D8 E4 05 F1 | 	add	objptr, ##6872
1cd20     F2 26 02 F1 | 	add	local05, objptr
1cd24     80 BF 23 FF 
1cd28     00 12 06 F6 | 	mov	arg01, ##1199505408
1cd2c     0F 15 02 F6 | 	mov	arg02, local01
1cd30     0D 00 00 FF 
1cd34     D8 E4 85 F1 | 	sub	objptr, ##6872
1cd38     A0 67 B0 FD | 	call	#__system___float_mul
1cd3c     FD 12 02 F6 | 	mov	arg01, result1
1cd40     01 14 06 F6 | 	mov	arg02, #1
1cd44     5C 6C B0 FD | 	call	#__system___float_tointeger
1cd48     13 FB 51 FC | 	wrword	result1, local05
1cd4c     0F 13 02 F6 | 	mov	arg01, local01
1cd50     CC BC 1F FF 
1cd54     9A 15 06 F6 | 	mov	arg02, ##1064933786
1cd58     80 67 B0 FD | 	call	#__system___float_mul
1cd5c     FD 1E 02 F6 | 	mov	local01, result1
1cd60     01 20 06 F1 | 	add	local02, #1
1cd64     00 21 56 F2 | 	cmps	local02, #256 wc
1cd68     A4 FF 9F CD |  if_b	jmp	#LR__2314
1cd6c     0E 00 00 FF 
1cd70     D6 E4 05 F1 | 	add	objptr, ##7382
1cd74     F2 00 58 FC | 	wrword	#0, objptr
1cd78                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
1cd78     00 20 06 F6 | 	mov	local02, #0
1cd7c     02 E4 05 F1 | 	add	objptr, #2
1cd80     97 10 48 FB | 	callpa	#(@LR__2316-@LR__2315)>>2,fcache_load_ptr_
1cd84                 | LR__2315
1cd84     10 27 02 F6 | 	mov	local05, local02
1cd88     01 26 66 F0 | 	shl	local05, #1
1cd8c     F2 26 02 F1 | 	add	local05, objptr
1cd90     7F 00 80 FF 
1cd94     13 01 5A FC | 	wrword	##65280, local05
1cd98     01 20 06 F1 | 	add	local02, #1
1cd9c     FF 20 56 F2 | 	cmps	local02, #255 wc
1cda0     E0 FF 9F CD |  if_b	jmp	#LR__2315
1cda4                 | LR__2316
1cda4     FE E5 05 F1 | 	add	objptr, #510
1cda8     F2 00 58 FC | 	wrword	#0, objptr
1cdac                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
1cdac     00 20 06 F6 | 	mov	local02, #0
1cdb0     02 E4 05 F1 | 	add	objptr, #2
1cdb4     97 52 48 FB | 	callpa	#(@LR__2321-@LR__2317)>>2,fcache_load_ptr_
1cdb8                 | LR__2317
1cdb8     10 27 02 F6 | 	mov	local05, local02
1cdbc     01 26 66 F0 | 	shl	local05, #1
1cdc0     F2 26 02 F1 | 	add	local05, objptr
1cdc4     10 29 02 F6 | 	mov	local06, local02
1cdc8     0C 28 66 F0 | 	shl	local06, #12
1cdcc     13 29 52 FC | 	wrword	local06, local05
1cdd0     01 20 06 F1 | 	add	local02, #1
1cdd4     10 20 56 F2 | 	cmps	local02, #16 wc
1cdd8     DC FF 9F CD |  if_b	jmp	#LR__2317
1cddc                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
1cddc     10 20 06 F6 | 	mov	local02, #16
1cde0                 | LR__2318
1cde0     10 27 02 F6 | 	mov	local05, local02
1cde4     01 26 66 F0 | 	shl	local05, #1
1cde8     F2 26 02 F1 | 	add	local05, objptr
1cdec     7F 00 80 FF 
1cdf0     13 01 5A FC | 	wrword	##65280, local05
1cdf4     01 20 06 F1 | 	add	local02, #1
1cdf8     F0 20 16 F2 | 	cmp	local02, #240 wc
1cdfc     E0 FF 9F CD |  if_b	jmp	#LR__2318
1ce00                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
1ce00     F0 20 06 F6 | 	mov	local02, #240
1ce04                 | LR__2319
1ce04     10 27 02 F6 | 	mov	local05, local02
1ce08     01 26 66 F0 | 	shl	local05, #1
1ce0c     F2 26 02 F1 | 	add	local05, objptr
1ce10     FF 22 06 F6 | 	mov	local03, #255
1ce14     10 23 82 F1 | 	sub	local03, local02
1ce18     0C 22 66 F0 | 	shl	local03, #12
1ce1c     13 23 52 FC | 	wrword	local03, local05
1ce20     01 20 06 F1 | 	add	local02, #1
1ce24     00 21 16 F2 | 	cmp	local02, #256 wc
1ce28     D8 FF 9F CD |  if_b	jmp	#LR__2319
1ce2c                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
1ce2c     00 20 06 F6 | 	mov	local02, #0
1ce30     01 00 00 FF 
1ce34     00 E4 05 F1 | 	add	objptr, ##512
1ce38                 | LR__2320
1ce38     10 27 02 F6 | 	mov	local05, local02
1ce3c     01 26 66 F0 | 	shl	local05, #1
1ce40     F2 26 02 F1 | 	add	local05, objptr
1ce44     10 29 02 F6 | 	mov	local06, local02
1ce48     08 28 66 F0 | 	shl	local06, #8
1ce4c     13 29 52 FC | 	wrword	local06, local05
1ce50     01 20 06 F1 | 	add	local02, #1
1ce54     00 21 56 F2 | 	cmps	local02, #256 wc
1ce58     DC FF 9F CD |  if_b	jmp	#LR__2320
1ce5c                 | LR__2321
1ce5c     FE E5 05 F1 | 	add	objptr, #510
1ce60     F2 00 58 FC | 	wrword	#0, objptr
1ce64                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
1ce64     00 20 06 F6 | 	mov	local02, #0
1ce68     02 E4 05 F1 | 	add	objptr, #2
1ce6c     97 6A 48 FB | 	callpa	#(@LR__2326-@LR__2322)>>2,fcache_load_ptr_
1ce70                 | LR__2322
1ce70     10 27 02 F6 | 	mov	local05, local02
1ce74     01 26 66 F0 | 	shl	local05, #1
1ce78     F2 26 02 F1 | 	add	local05, objptr
1ce7c     10 29 02 F6 | 	mov	local06, local02
1ce80     04 28 66 F0 | 	shl	local06, #4
1ce84     10 29 02 F1 | 	add	local06, local02
1ce88     04 28 66 F0 | 	shl	local06, #4
1ce8c     13 29 52 FC | 	wrword	local06, local05
1ce90     01 20 06 F1 | 	add	local02, #1
1ce94     F0 20 56 F2 | 	cmps	local02, #240 wc
1ce98     D4 FF 9F CD |  if_b	jmp	#LR__2322
1ce9c     F0 20 06 F6 | 	mov	local02, #240
1cea0                 | LR__2323
1cea0     10 27 02 F6 | 	mov	local05, local02
1cea4     01 26 66 F0 | 	shl	local05, #1
1cea8     F2 26 02 F1 | 	add	local05, objptr
1ceac     FF 22 06 F6 | 	mov	local03, #255
1ceb0     10 23 82 F1 | 	sub	local03, local02
1ceb4     0C 22 66 F0 | 	shl	local03, #12
1ceb8     13 23 52 FC | 	wrword	local03, local05
1cebc     01 20 06 F1 | 	add	local02, #1
1cec0     00 21 16 F2 | 	cmp	local02, #256 wc
1cec4     D8 FF 9F CD |  if_b	jmp	#LR__2323
1cec8                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
1cec8     00 20 06 F6 | 	mov	local02, #0
1cecc     01 00 00 FF 
1ced0     00 E4 05 F1 | 	add	objptr, ##512
1ced4                 | LR__2324
1ced4     10 27 02 F6 | 	mov	local05, local02
1ced8     01 26 66 F0 | 	shl	local05, #1
1cedc     F2 26 02 F1 | 	add	local05, objptr
1cee0     10 29 02 F6 | 	mov	local06, local02
1cee4     09 28 66 F0 | 	shl	local06, #9
1cee8     13 29 52 FC | 	wrword	local06, local05
1ceec     FF 26 06 F6 | 	mov	local05, #255
1cef0     10 27 82 F1 | 	sub	local05, local02
1cef4     01 26 66 F0 | 	shl	local05, #1
1cef8     F2 26 02 F1 | 	add	local05, objptr
1cefc     10 29 02 F6 | 	mov	local06, local02
1cf00     09 28 66 F0 | 	shl	local06, #9
1cf04     13 29 52 FC | 	wrword	local06, local05
1cf08     01 20 06 F1 | 	add	local02, #1
1cf0c     80 20 56 F2 | 	cmps	local02, #128 wc
1cf10     C0 FF 9F CD |  if_b	jmp	#LR__2324
1cf14                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
1cf14     00 20 06 F6 | 	mov	local02, #0
1cf18     01 00 00 FF 
1cf1c     00 E4 05 F1 | 	add	objptr, ##512
1cf20                 | LR__2325
1cf20     10 27 02 F6 | 	mov	local05, local02
1cf24     01 26 66 F0 | 	shl	local05, #1
1cf28     F2 26 02 F1 | 	add	local05, objptr
1cf2c     10 29 02 F6 | 	mov	local06, local02
1cf30     0D 28 66 F0 | 	shl	local06, #13
1cf34     13 29 52 FC | 	wrword	local06, local05
1cf38     01 20 06 F1 | 	add	local02, #1
1cf3c     08 20 56 F2 | 	cmps	local02, #8 wc
1cf40     DC FF 9F CD |  if_b	jmp	#LR__2325
1cf44                 | LR__2326
1cf44                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
1cf44     08 20 06 F6 | 	mov	local02, #8
1cf48     97 42 48 FB | 	callpa	#(@LR__2330-@LR__2327)>>2,fcache_load_ptr_
1cf4c                 | LR__2327
1cf4c     10 27 02 F6 | 	mov	local05, local02
1cf50     01 26 66 F0 | 	shl	local05, #1
1cf54     F2 26 02 F1 | 	add	local05, objptr
1cf58     10 1F 02 F6 | 	mov	local01, local02
1cf5c     08 1E 86 F1 | 	sub	local01, #8
1cf60     0B 1E 66 F0 | 	shl	local01, #11
1cf64     7F 00 00 FF 
1cf68     00 29 06 F6 | 	mov	local06, ##65280
1cf6c     0F 29 82 F1 | 	sub	local06, local01
1cf70     13 29 52 FC | 	wrword	local06, local05
1cf74     01 20 06 F1 | 	add	local02, #1
1cf78     18 20 16 F2 | 	cmp	local02, #24 wc
1cf7c     CC FF 9F CD |  if_b	jmp	#LR__2327
1cf80                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
1cf80     18 20 06 F6 | 	mov	local02, #24
1cf84                 | LR__2328
1cf84     10 27 02 F6 | 	mov	local05, local02
1cf88     01 26 66 F0 | 	shl	local05, #1
1cf8c     F2 26 02 F1 | 	add	local05, objptr
1cf90     40 00 80 FF 
1cf94     13 01 58 FC | 	wrword	##32768, local05
1cf98     01 20 06 F1 | 	add	local02, #1
1cf9c     81 20 16 F2 | 	cmp	local02, #129 wc
1cfa0     E0 FF 9F CD |  if_b	jmp	#LR__2328
1cfa4                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
1cfa4     81 20 06 F6 | 	mov	local02, #129
1cfa8                 | LR__2329
1cfa8     10 27 02 F6 | 	mov	local05, local02
1cfac     01 26 66 F0 | 	shl	local05, #1
1cfb0     F2 26 02 F1 | 	add	local05, objptr
1cfb4     FF 22 06 F6 | 	mov	local03, #255
1cfb8     10 23 82 F1 | 	sub	local03, local02
1cfbc     08 22 66 F0 | 	shl	local03, #8
1cfc0     13 23 52 FC | 	wrword	local03, local05
1cfc4     01 20 06 F1 | 	add	local02, #1
1cfc8     00 21 16 F2 | 	cmp	local02, #256 wc
1cfcc     D8 FF 9F CD |  if_b	jmp	#LR__2329
1cfd0                 | LR__2330
1cfd0     46 00 00 FF 
1cfd4     02 E5 05 F1 | 	add	objptr, ##36098
1cfd8     F2 00 59 FC | 	wrword	#128, objptr
1cfdc     59 00 00 FF 
1cfe0     DA E5 85 F1 | 	sub	objptr, ##46042
1cfe4                 | ' for i=0 to 7
1cfe4     00 20 06 F6 | 	mov	local02, #0
1cfe8     97 8E 48 FB | 	callpa	#(@LR__2332-@LR__2331)>>2,fcache_load_ptr_
1cfec                 | LR__2331
1cfec     10 27 02 F6 | 	mov	local05, local02
1cff0     01 26 66 F0 | 	shl	local05, #1
1cff4     10 27 02 F1 | 	add	local05, local02
1cff8     03 26 66 F0 | 	shl	local05, #3
1cffc     14 00 00 FF 
1d000     38 E5 05 F1 | 	add	objptr, ##10552
1d004     F2 26 02 F1 | 	add	local05, objptr
1d008     00 EE A1 FF 
1d00c     13 01 68 FC | 	wrlong	##1138491392, local05
1d010     10 27 02 F6 | 	mov	local05, local02
1d014     01 26 66 F0 | 	shl	local05, #1
1d018     10 27 02 F1 | 	add	local05, local02
1d01c     03 26 66 F0 | 	shl	local05, #3
1d020     F2 26 02 F1 | 	add	local05, objptr
1d024     04 26 06 F1 | 	add	local05, #4
1d028     13 21 42 FC | 	wrbyte	local02, local05
1d02c     10 27 02 F6 | 	mov	local05, local02
1d030     01 26 66 F0 | 	shl	local05, #1
1d034     10 27 02 F1 | 	add	local05, local02
1d038     03 26 66 F0 | 	shl	local05, #3
1d03c     F2 26 02 F1 | 	add	local05, objptr
1d040     05 26 06 F1 | 	add	local05, #5
1d044     13 21 42 FC | 	wrbyte	local02, local05
1d048     10 27 02 F6 | 	mov	local05, local02
1d04c     01 26 66 F0 | 	shl	local05, #1
1d050     10 27 02 F1 | 	add	local05, local02
1d054     03 26 66 F0 | 	shl	local05, #3
1d058     F2 26 02 F1 | 	add	local05, objptr
1d05c     06 26 06 F1 | 	add	local05, #6
1d060     13 01 58 FC | 	wrword	#0, local05
1d064     10 27 02 F6 | 	mov	local05, local02
1d068     01 26 66 F0 | 	shl	local05, #1
1d06c     10 27 02 F1 | 	add	local05, local02
1d070     03 26 66 F0 | 	shl	local05, #3
1d074     F2 26 02 F1 | 	add	local05, objptr
1d078     08 26 06 F1 | 	add	local05, #8
1d07c     00 C0 9F FF 
1d080     13 01 68 FC | 	wrlong	##1065353216, local05
1d084     10 27 02 F6 | 	mov	local05, local02
1d088     01 26 66 F0 | 	shl	local05, #1
1d08c     10 27 02 F1 | 	add	local05, local02
1d090     03 26 66 F0 | 	shl	local05, #3
1d094     F2 26 02 F1 | 	add	local05, objptr
1d098     0C 26 06 F1 | 	add	local05, #12
1d09c     00 40 A0 FF 
1d0a0     13 01 68 FC | 	wrlong	##1082130432, local05
1d0a4     10 27 02 F6 | 	mov	local05, local02
1d0a8     01 26 66 F0 | 	shl	local05, #1
1d0ac     10 27 02 F1 | 	add	local05, local02
1d0b0     03 26 66 F0 | 	shl	local05, #3
1d0b4     F2 26 02 F1 | 	add	local05, objptr
1d0b8     10 26 06 F1 | 	add	local05, #16
1d0bc     13 01 68 FC | 	wrlong	#0, local05
1d0c0     10 27 02 F6 | 	mov	local05, local02
1d0c4     01 26 66 F0 | 	shl	local05, #1
1d0c8     10 27 02 F1 | 	add	local05, local02
1d0cc     03 26 66 F0 | 	shl	local05, #3
1d0d0     F2 26 02 F1 | 	add	local05, objptr
1d0d4     14 26 06 F1 | 	add	local05, #20
1d0d8     13 FF 59 FC | 	wrword	#255, local05
1d0dc     10 27 02 F6 | 	mov	local05, local02
1d0e0     01 26 66 F0 | 	shl	local05, #1
1d0e4     45 00 00 FF 
1d0e8     94 E4 05 F1 | 	add	objptr, ##35476
1d0ec     F2 26 02 F1 | 	add	local05, objptr
1d0f0     13 FF 59 FC | 	wrword	#255, local05
1d0f4     01 20 06 F1 | 	add	local02, #1
1d0f8     08 20 56 F2 | 	cmps	local02, #8 wc
1d0fc     59 00 00 FF 
1d100     CC E5 85 F1 | 	sub	objptr, ##46028
1d104     E4 FE 9F CD |  if_b	jmp	#LR__2331
1d108                 | LR__2332
1d108     00 6E 20 FF 
1d10c     00 28 06 F6 | 	mov	local06, ##1088159744
1d110                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
1d110     03 26 06 F6 | 	mov	local05, #3
1d114                 | LR__2333
1d114     14 13 02 F6 | 	mov	arg01, local06
1d118     CE C3 1F FF 
1d11c     7D 14 06 F6 | 	mov	arg02, ##1065852029
1d120     B8 63 B0 FD | 	call	#__system___float_mul
1d124     FD 28 02 F6 | 	mov	local06, result1
1d128     FA 27 6E FB | 	djnz	local05, #LR__2333
1d12c     00 20 06 F6 | 	mov	local02, #0
1d130                 | LR__2334
1d130     10 25 02 F6 | 	mov	local04, local02
1d134     02 24 66 F0 | 	shl	local04, #2
1d138     14 00 00 FF 
1d13c     D8 E4 05 F1 | 	add	objptr, ##10456
1d140     F2 24 02 F1 | 	add	local04, objptr
1d144     12 29 62 FC | 	wrlong	local06, local04
1d148     14 13 02 F6 | 	mov	arg01, local06
1d14c     CE C3 1F FF 
1d150     7D 14 06 F6 | 	mov	arg02, ##1065852029
1d154     14 00 00 FF 
1d158     D8 E4 85 F1 | 	sub	objptr, ##10456
1d15c     7C 63 B0 FD | 	call	#__system___float_mul
1d160     FD 28 02 F6 | 	mov	local06, result1
1d164     01 20 06 F1 | 	add	local02, #1
1d168     0C 20 56 F2 | 	cmps	local02, #12 wc
1d16c     C0 FF 9F CD |  if_b	jmp	#LR__2334
1d170     14 00 00 FF 
1d174     08 E5 05 F1 | 	add	objptr, ##10504
1d178     F2 50 6B FC | 	wrlong	#424, objptr
1d17c     04 E4 05 F1 | 	add	objptr, #4
1d180     F2 20 6B FC | 	wrlong	#400, objptr
1d184     04 E4 05 F1 | 	add	objptr, #4
1d188     F2 F2 6A FC | 	wrlong	#377, objptr
1d18c     04 E4 05 F1 | 	add	objptr, #4
1d190     F2 C8 6A FC | 	wrlong	#356, objptr
1d194     04 E4 05 F1 | 	add	objptr, #4
1d198     F2 A0 6A FC | 	wrlong	#336, objptr
1d19c     04 E4 05 F1 | 	add	objptr, #4
1d1a0     F2 7A 6A FC | 	wrlong	#317, objptr
1d1a4     04 E4 05 F1 | 	add	objptr, #4
1d1a8     F2 58 6A FC | 	wrlong	#300, objptr
1d1ac     04 E4 05 F1 | 	add	objptr, #4
1d1b0     F2 36 6A FC | 	wrlong	#283, objptr
1d1b4     04 E4 05 F1 | 	add	objptr, #4
1d1b8     F2 16 6A FC | 	wrlong	#267, objptr
1d1bc     04 E4 05 F1 | 	add	objptr, #4
1d1c0     F2 F8 69 FC | 	wrlong	#252, objptr
1d1c4     04 E4 05 F1 | 	add	objptr, #4
1d1c8     F2 DC 69 FC | 	wrlong	#238, objptr
1d1cc     04 E4 05 F1 | 	add	objptr, #4
1d1d0     F2 C0 69 FC | 	wrlong	#224, objptr
1d1d4     45 00 00 FF 
1d1d8     A6 E4 05 F1 | 	add	objptr, ##35494
1d1dc     F2 00 59 FC | 	wrword	#128, objptr
1d1e0     02 E4 85 F1 | 	sub	objptr, #2
1d1e4     F2 00 59 FC | 	wrword	#128, objptr
1d1e8     59 00 00 FF 
1d1ec     D8 E5 85 F1 | 	sub	objptr, ##46040
1d1f0     A7 F0 03 F6 | 	mov	ptra, fp
1d1f4     B2 00 A0 FD | 	call	#popregs_
1d1f8                 | _init_audio_ret
1d1f8     2D 00 64 FD | 	ret
1d1fc                 | 
1d1fc                 | ' 
1d1fc                 | ' 
1d1fc                 | ' function getnoteval(token) as single
1d1fc                 | _getnoteval
1d1fc     02 4A 05 F6 | 	mov	COUNT_, #2
1d200     A8 00 A0 FD | 	call	#pushregs_
1d204     01 00 00 FF 
1d208     00 13 86 F1 | 	sub	arg01, ##768
1d20c     09 15 52 F6 | 	abs	arg02, arg01 wc
1d210     0C 14 16 FD | 	qdiv	arg02, #12
1d214     14 00 00 FF 
1d218     D8 E4 05 F1 | 	add	objptr, ##10456
1d21c     19 14 62 FD | 	getqy	arg02
1d220     0A 15 82 F6 | 	negc	arg02, arg02
1d224     02 14 66 F0 | 	shl	arg02, #2
1d228     F2 14 02 F1 | 	add	arg02, objptr
1d22c     0A 1F 02 FB | 	rdlong	local01, arg02
1d230     09 15 52 F6 | 	abs	arg02, arg01 wc
1d234     0C 14 16 FD | 	qdiv	arg02, #12
1d238     14 00 00 FF 
1d23c     D8 E4 85 F1 | 	sub	objptr, ##10456
1d240     01 12 06 F6 | 	mov	arg01, #1
1d244                 | ' noteexp=1+(note/12) 
1d244                 | ' return (2.0^noteexp)*notebase
1d244     18 14 62 FD | 	getqx	arg02
1d248     0A 13 82 F3 | 	sumc	arg01, arg02
1d24c     09 13 52 F6 | 	abs	arg01, arg01 wc
1d250     1F 20 C6 C9 |  if_b	decod	local02, #31
1d254     00 20 06 36 |  if_ae	mov	local02, #0
1d258     7C 5E B0 FD | 	call	#__system___float_fromuns
1d25c     10 FB 61 F5 | 	xor	result1, local02
1d260     FD 14 02 F6 | 	mov	arg02, result1
1d264     1E 12 C6 F9 | 	decod	arg01, #30
1d268     54 71 B0 FD | 	call	#__system____builtin_powf
1d26c     FD 12 02 F6 | 	mov	arg01, result1
1d270     0F 15 02 F6 | 	mov	arg02, local01
1d274     64 62 B0 FD | 	call	#__system___float_mul
1d278     A7 F0 03 F6 | 	mov	ptra, fp
1d27c     B2 00 A0 FD | 	call	#popregs_
1d280                 | _getnoteval_ret
1d280     2D 00 64 FD | 	ret
1d284                 | 
1d284                 | ' 
1d284                 | ' 
1d284                 | ' 
1d284                 | ' sub init_error_strings
1d284                 | _init_error_strings
1d284     85 01 00 FF 
1d288     6E 00 06 F6 | 	mov	_var01, ##@LR__5471
1d28c     45 00 00 FF 
1d290     7C E4 05 F1 | 	add	objptr, ##35452
1d294     F2 00 62 FC | 	wrlong	_var01, objptr
1d298     85 01 00 FF 
1d29c     6F 00 06 F6 | 	mov	_var01, ##@LR__5472
1d2a0     04 E4 05 F1 | 	add	objptr, #4
1d2a4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2a8     85 01 00 FF 
1d2ac     94 00 06 F6 | 	mov	_var01, ##@LR__5473
1d2b0     04 E4 05 F1 | 	add	objptr, #4
1d2b4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2b8     85 01 00 FF 
1d2bc     B5 00 06 F6 | 	mov	_var01, ##@LR__5474
1d2c0     04 E4 05 F1 | 	add	objptr, #4
1d2c4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2c8     85 01 00 FF 
1d2cc     CF 00 06 F6 | 	mov	_var01, ##@LR__5475
1d2d0     04 E4 05 F1 | 	add	objptr, #4
1d2d4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2d8     85 01 00 FF 
1d2dc     EB 00 06 F6 | 	mov	_var01, ##@LR__5476
1d2e0     04 E4 05 F1 | 	add	objptr, #4
1d2e4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2e8     85 01 00 FF 
1d2ec     0D 01 06 F6 | 	mov	_var01, ##@LR__5477
1d2f0     04 E4 05 F1 | 	add	objptr, #4
1d2f4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2f8     85 01 00 FF 
1d2fc     3B 01 06 F6 | 	mov	_var01, ##@LR__5478
1d300     04 E4 05 F1 | 	add	objptr, #4
1d304     F2 00 62 FC | 	wrlong	_var01, objptr
1d308     85 01 00 FF 
1d30c     66 01 06 F6 | 	mov	_var01, ##@LR__5479
1d310     04 E4 05 F1 | 	add	objptr, #4
1d314     F2 00 62 FC | 	wrlong	_var01, objptr
1d318     85 01 00 FF 
1d31c     7F 01 06 F6 | 	mov	_var01, ##@LR__5480
1d320     04 E4 05 F1 | 	add	objptr, #4
1d324     F2 00 62 FC | 	wrlong	_var01, objptr
1d328     85 01 00 FF 
1d32c     A0 01 06 F6 | 	mov	_var01, ##@LR__5481
1d330     04 E4 05 F1 | 	add	objptr, #4
1d334     F2 00 62 FC | 	wrlong	_var01, objptr
1d338     85 01 00 FF 
1d33c     B7 01 06 F6 | 	mov	_var01, ##@LR__5482
1d340     04 E4 05 F1 | 	add	objptr, #4
1d344     F2 00 62 FC | 	wrlong	_var01, objptr
1d348     85 01 00 FF 
1d34c     D5 01 06 F6 | 	mov	_var01, ##@LR__5483
1d350     04 E4 05 F1 | 	add	objptr, #4
1d354     F2 00 62 FC | 	wrlong	_var01, objptr
1d358     85 01 00 FF 
1d35c     F9 01 06 F6 | 	mov	_var01, ##@LR__5484
1d360     04 E4 05 F1 | 	add	objptr, #4
1d364     F2 00 62 FC | 	wrlong	_var01, objptr
1d368     86 01 00 FF 
1d36c     20 00 06 F6 | 	mov	_var01, ##@LR__5485
1d370     04 E4 05 F1 | 	add	objptr, #4
1d374     F2 00 62 FC | 	wrlong	_var01, objptr
1d378     86 01 00 FF 
1d37c     3C 00 06 F6 | 	mov	_var01, ##@LR__5486
1d380     04 E4 05 F1 | 	add	objptr, #4
1d384     F2 00 62 FC | 	wrlong	_var01, objptr
1d388     86 01 00 FF 
1d38c     4D 00 06 F6 | 	mov	_var01, ##@LR__5487
1d390     04 E4 05 F1 | 	add	objptr, #4
1d394     F2 00 62 FC | 	wrlong	_var01, objptr
1d398     86 01 00 FF 
1d39c     5D 00 06 F6 | 	mov	_var01, ##@LR__5488
1d3a0     04 E4 05 F1 | 	add	objptr, #4
1d3a4     F2 00 62 FC | 	wrlong	_var01, objptr
1d3a8     86 01 00 FF 
1d3ac     78 00 06 F6 | 	mov	_var01, ##@LR__5489
1d3b0     04 E4 05 F1 | 	add	objptr, #4
1d3b4     F2 00 62 FC | 	wrlong	_var01, objptr
1d3b8     86 01 00 FF 
1d3bc     8A 00 06 F6 | 	mov	_var01, ##@LR__5490
1d3c0     04 E4 05 F1 | 	add	objptr, #4
1d3c4     F2 00 62 FC | 	wrlong	_var01, objptr
1d3c8     86 01 00 FF 
1d3cc     A2 00 06 F6 | 	mov	_var01, ##@LR__5491
1d3d0     04 E4 05 F1 | 	add	objptr, #4
1d3d4     F2 00 62 FC | 	wrlong	_var01, objptr
1d3d8     86 01 00 FF 
1d3dc     B6 00 06 F6 | 	mov	_var01, ##@LR__5492
1d3e0     04 E4 05 F1 | 	add	objptr, #4
1d3e4     F2 00 62 FC | 	wrlong	_var01, objptr
1d3e8     86 01 00 FF 
1d3ec     C6 00 06 F6 | 	mov	_var01, ##@LR__5493
1d3f0     04 E4 05 F1 | 	add	objptr, #4
1d3f4     F2 00 62 FC | 	wrlong	_var01, objptr
1d3f8     86 01 00 FF 
1d3fc     E3 00 06 F6 | 	mov	_var01, ##@LR__5494
1d400     04 E4 05 F1 | 	add	objptr, #4
1d404     F2 00 62 FC | 	wrlong	_var01, objptr
1d408     86 01 00 FF 
1d40c     F4 00 06 F6 | 	mov	_var01, ##@LR__5495
1d410     04 E4 05 F1 | 	add	objptr, #4
1d414     F2 00 62 FC | 	wrlong	_var01, objptr
1d418     86 01 00 FF 
1d41c     05 01 06 F6 | 	mov	_var01, ##@LR__5496
1d420     04 E4 05 F1 | 	add	objptr, #4
1d424     F2 00 62 FC | 	wrlong	_var01, objptr
1d428     86 01 00 FF 
1d42c     30 01 06 F6 | 	mov	_var01, ##@LR__5497
1d430     04 E4 05 F1 | 	add	objptr, #4
1d434     F2 00 62 FC | 	wrlong	_var01, objptr
1d438     86 01 00 FF 
1d43c     4C 01 06 F6 | 	mov	_var01, ##@LR__5498
1d440     04 E4 05 F1 | 	add	objptr, #4
1d444     F2 00 62 FC | 	wrlong	_var01, objptr
1d448     86 01 00 FF 
1d44c     62 01 06 F6 | 	mov	_var01, ##@LR__5499
1d450     04 E4 05 F1 | 	add	objptr, #4
1d454     F2 00 62 FC | 	wrlong	_var01, objptr
1d458     86 01 00 FF 
1d45c     6F 01 06 F6 | 	mov	_var01, ##@LR__5500
1d460     04 E4 05 F1 | 	add	objptr, #4
1d464     F2 00 62 FC | 	wrlong	_var01, objptr
1d468     86 01 00 FF 
1d46c     81 01 06 F6 | 	mov	_var01, ##@LR__5501
1d470     04 E4 05 F1 | 	add	objptr, #4
1d474     F2 00 62 FC | 	wrlong	_var01, objptr
1d478     86 01 00 FF 
1d47c     92 01 06 F6 | 	mov	_var01, ##@LR__5502
1d480     04 E4 05 F1 | 	add	objptr, #4
1d484     F2 00 62 FC | 	wrlong	_var01, objptr
1d488     86 01 00 FF 
1d48c     AE 01 06 F6 | 	mov	_var01, ##@LR__5503
1d490     04 E4 05 F1 | 	add	objptr, #4
1d494     F2 00 62 FC | 	wrlong	_var01, objptr
1d498     86 01 00 FF 
1d49c     BF 01 06 F6 | 	mov	_var01, ##@LR__5504
1d4a0     04 E4 05 F1 | 	add	objptr, #4
1d4a4     F2 00 62 FC | 	wrlong	_var01, objptr
1d4a8     86 01 00 FF 
1d4ac     CE 01 06 F6 | 	mov	_var01, ##@LR__5505
1d4b0     04 E4 05 F1 | 	add	objptr, #4
1d4b4     F2 00 62 FC | 	wrlong	_var01, objptr
1d4b8     86 01 00 FF 
1d4bc     E9 01 06 F6 | 	mov	_var01, ##@LR__5506
1d4c0     04 E4 05 F1 | 	add	objptr, #4
1d4c4     F2 00 62 FC | 	wrlong	_var01, objptr
1d4c8     87 01 00 FF 
1d4cc     1D 00 06 F6 | 	mov	_var01, ##@LR__5507
1d4d0     04 E4 05 F1 | 	add	objptr, #4
1d4d4     F2 00 62 FC | 	wrlong	_var01, objptr
1d4d8     87 01 00 FF 
1d4dc     36 00 06 F6 | 	mov	_var01, ##@LR__5508
1d4e0     04 E4 05 F1 | 	add	objptr, #4
1d4e4     F2 00 62 FC | 	wrlong	_var01, objptr
1d4e8     87 01 00 FF 
1d4ec     52 00 06 F6 | 	mov	_var01, ##@LR__5509
1d4f0     04 E4 05 F1 | 	add	objptr, #4
1d4f4     F2 00 62 FC | 	wrlong	_var01, objptr
1d4f8     87 01 00 FF 
1d4fc     70 00 06 F6 | 	mov	_var01, ##@LR__5510
1d500     04 E4 05 F1 | 	add	objptr, #4
1d504     F2 00 62 FC | 	wrlong	_var01, objptr
1d508     87 01 00 FF 
1d50c     89 00 06 F6 | 	mov	_var01, ##@LR__5511
1d510     04 E4 05 F1 | 	add	objptr, #4
1d514     F2 00 62 FC | 	wrlong	_var01, objptr
1d518     87 01 00 FF 
1d51c     A8 00 06 F6 | 	mov	_var01, ##@LR__5512
1d520     04 E4 05 F1 | 	add	objptr, #4
1d524     F2 00 62 FC | 	wrlong	_var01, objptr
1d528     87 01 00 FF 
1d52c     B7 00 06 F6 | 	mov	_var01, ##@LR__5513
1d530     04 E4 05 F1 | 	add	objptr, #4
1d534     F2 00 62 FC | 	wrlong	_var01, objptr
1d538     87 01 00 FF 
1d53c     E5 00 06 F6 | 	mov	_var01, ##@LR__5514
1d540     04 E4 05 F1 | 	add	objptr, #4
1d544     F2 00 62 FC | 	wrlong	_var01, objptr
1d548     87 01 00 FF 
1d54c     F3 00 06 F6 | 	mov	_var01, ##@LR__5515
1d550     04 E4 05 F1 | 	add	objptr, #4
1d554     F2 00 62 FC | 	wrlong	_var01, objptr
1d558     87 01 00 FF 
1d55c     08 01 06 F6 | 	mov	_var01, ##@LR__5516
1d560     04 E4 05 F1 | 	add	objptr, #4
1d564     F2 00 62 FC | 	wrlong	_var01, objptr
1d568     87 01 00 FF 
1d56c     2C 01 06 F6 | 	mov	_var01, ##@LR__5517
1d570     04 E4 05 F1 | 	add	objptr, #4
1d574     F2 00 62 FC | 	wrlong	_var01, objptr
1d578     87 01 00 FF 
1d57c     43 01 06 F6 | 	mov	_var01, ##@LR__5518
1d580     04 E4 05 F1 | 	add	objptr, #4
1d584     F2 00 62 FC | 	wrlong	_var01, objptr
1d588     87 01 00 FF 
1d58c     56 01 06 F6 | 	mov	_var01, ##@LR__5519
1d590     04 E4 05 F1 | 	add	objptr, #4
1d594     F2 00 62 FC | 	wrlong	_var01, objptr
1d598     87 01 00 FF 
1d59c     6D 01 06 F6 | 	mov	_var01, ##@LR__5520
1d5a0     04 E4 05 F1 | 	add	objptr, #4
1d5a4     F2 00 62 FC | 	wrlong	_var01, objptr
1d5a8     87 01 00 FF 
1d5ac     86 01 06 F6 | 	mov	_var01, ##@LR__5521
1d5b0     04 E4 05 F1 | 	add	objptr, #4
1d5b4     F2 00 62 FC | 	wrlong	_var01, objptr
1d5b8     45 00 00 FF 
1d5bc     44 E5 85 F1 | 	sub	objptr, ##35652
1d5c0                 | _init_error_strings_ret
1d5c0     2D 00 64 FD | 	ret
1d5c4                 | 
1d5c4                 | '         
1d5c4                 | ' sub printerror(err as integer)
1d5c4                 | _printerror
1d5c4     01 4A 05 F6 | 	mov	COUNT_, #1
1d5c8     A8 00 A0 FD | 	call	#pushregs_
1d5cc     09 1F 02 F6 | 	mov	local01, arg01
1d5d0     87 01 00 FF 
1d5d4     A8 13 06 F6 | 	mov	arg01, ##@LR__5522
1d5d8     64 20 B0 FD | 	call	#_hg010b_spin2_write
1d5dc     0F 13 02 F6 | 	mov	arg01, local01
1d5e0     CC 23 B0 FD | 	call	#_hg010b_spin2_inttostr
1d5e4     FD 12 02 F6 | 	mov	arg01, result1
1d5e8     54 20 B0 FD | 	call	#_hg010b_spin2_write
1d5ec     87 01 00 FF 
1d5f0     AF 13 06 F6 | 	mov	arg01, ##@LR__5523
1d5f4     48 20 B0 FD | 	call	#_hg010b_spin2_write
1d5f8     02 1E 66 F0 | 	shl	local01, #2
1d5fc     45 00 00 FF 
1d600     7C E4 05 F1 | 	add	objptr, ##35452
1d604     F2 1E 02 F1 | 	add	local01, objptr
1d608     0F 13 02 FB | 	rdlong	arg01, local01
1d60c     45 00 00 FF 
1d610     7C E4 85 F1 | 	sub	objptr, ##35452
1d614                 | ' 
1d614                 | ' write(text)
1d614     28 20 B0 FD | 	call	#_hg010b_spin2_write
1d618                 | ' crlf
1d618     F0 22 B0 FD | 	call	#_hg010b_spin2_crlf
1d61c     A7 F0 03 F6 | 	mov	ptra, fp
1d620     B2 00 A0 FD | 	call	#popregs_
1d624                 | _printerror_ret
1d624     2D 00 64 FD | 	ret
1d628                 | 
1d628                 | ' 
1d628                 | ' '' ------------------------------- Hardware start/stop/initialization 
1d628                 | ' 
1d628                 | ' sub startpsram
1d628                 | _startpsram
1d628     00 12 06 F6 | 	mov	arg01, #0
1d62c     0A 14 C6 F9 | 	decod	arg02, #10
1d630     0B 16 06 F6 | 	mov	arg03, #11
1d634     07 18 06 F6 | 	mov	arg04, #7
1d638     0B 00 00 FF 
1d63c     CC E4 05 F1 | 	add	objptr, ##5836
1d640     78 24 B0 FD | 	call	#_psram_spin2_startx
1d644     2B 00 00 FF 
1d648     3C E5 05 F1 | 	add	objptr, ##22332
1d64c     F2 FA 61 FC | 	wrlong	result1, objptr
1d650                 | '     return $7FF00 + cog*12
1d650     0C E4 05 F1 | 	add	objptr, #12
1d654     FF 03 80 FF 
1d658     F2 00 6A FC | 	wrlong	##524032, objptr
1d65c     37 00 00 FF 
1d660     14 E4 85 F1 | 	sub	objptr, ##28180
1d664                 | _startpsram_ret
1d664     2D 00 64 FD | 	ret
1d668                 | 
1d668                 | ' 
1d668                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
1d668                 | _startvideo
1d668     01 4A 05 F6 | 	mov	COUNT_, #1
1d66c     A8 00 A0 FD | 	call	#pushregs_
1d670     37 00 00 FF 
1d674     14 E4 05 F1 | 	add	objptr, ##28180
1d678     F2 18 02 FB | 	rdlong	arg04, objptr
1d67c     37 00 00 FF 
1d680     14 E4 85 F1 | 	sub	objptr, ##28180
1d684     0A 13 02 F6 | 	mov	arg01, arg02
1d688     0C 15 02 F6 | 	mov	arg02, arg04
1d68c     A8 07 B0 FD | 	call	#_hg010b_spin2_start
1d690     37 00 00 FF 
1d694     00 E4 05 F1 | 	add	objptr, ##28160
1d698     F2 FA 61 FC | 	wrlong	result1, objptr
1d69c                 | ' 
1d69c                 | ' videocog=v.start(pin,mbox)
1d69c                 | ' 
1d69c                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1d69c     00 1E 06 F6 | 	mov	local01, #0
1d6a0     2B 00 00 FF 
1d6a4     34 E5 85 F1 | 	sub	objptr, ##22324
1d6a8                 | LR__2340
1d6a8     0F 13 02 F6 | 	mov	arg01, local01
1d6ac     00 28 00 FF 
1d6b0     00 14 06 F6 | 	mov	arg02, ##5242880
1d6b4     5C 28 B0 FD | 	call	#_psram_spin2_setQos
1d6b8     01 1E 06 F1 | 	add	local01, #1
1d6bc     08 1E 56 F2 | 	cmps	local01, #8 wc
1d6c0     E4 FF 9F CD |  if_b	jmp	#LR__2340
1d6c4     2B 00 00 FF 
1d6c8     34 E5 05 F1 | 	add	objptr, ##22324
1d6cc     F2 12 02 FB | 	rdlong	arg01, objptr
1d6d0     7A 00 02 FF 
1d6d4     00 14 06 F6 | 	mov	arg02, ##67171328
1d6d8     2B 00 00 FF 
1d6dc     34 E5 85 F1 | 	sub	objptr, ##22324
1d6e0     30 28 B0 FD | 	call	#_psram_spin2_setQos
1d6e4     0B 00 00 FF 
1d6e8     CC E4 85 F1 | 	sub	objptr, ##5836
1d6ec                 | ' psram.setQoS(videocog, $0400f400) 
1d6ec                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
1d6ec     F2 14 02 F6 | 	mov	arg02, objptr
1d6f0     00 78 04 FF 
1d6f4     00 14 46 F5 | 	or	arg02, ##149946368
1d6f8     00 16 06 F6 | 	mov	arg03, #0
1d6fc     00 18 06 F6 | 	mov	arg04, #0
1d700     00 12 06 F6 | 	mov	arg01, #0
1d704     C8 3C B0 FD | 	call	#__system___basic_open
1d708                 | ' return videocog
1d708     37 00 00 FF 
1d70c     00 E4 05 F1 | 	add	objptr, ##28160
1d710     F2 FA 01 FB | 	rdlong	result1, objptr
1d714     37 00 00 FF 
1d718     00 E4 85 F1 | 	sub	objptr, ##28160
1d71c     A7 F0 03 F6 | 	mov	ptra, fp
1d720     B2 00 A0 FD | 	call	#popregs_
1d724                 | _startvideo_ret
1d724     2D 00 64 FD | 	ret
1d728                 | 
1d728                 | ' 
1d728                 | ' 
1d728                 | ' 
1d728                 | ' 
1d728                 | ' '' ------------------------------- Convenient psram peek/poke
1d728                 | ' 
1d728                 | ' sub pslpoke(addr as ulong,value as ulong)
1d728                 | _pslpoke
1d728     00 4A 05 F6 | 	mov	COUNT_, #0
1d72c     A8 00 A0 FD | 	call	#pushregs_
1d730     08 F0 07 F1 | 	add	ptra, #8
1d734     A7 12 62 FC | 	wrlong	arg01, fp
1d738     04 4E 05 F1 | 	add	fp, #4
1d73c     A7 14 62 FC | 	wrlong	arg02, fp
1d740     A7 12 02 F6 | 	mov	arg01, fp
1d744     04 4E 85 F1 | 	sub	fp, #4
1d748     A7 14 02 FB | 	rdlong	arg02, fp
1d74c     04 16 06 F6 | 	mov	arg03, #4
1d750     0B 00 00 FF 
1d754     CC E4 05 F1 | 	add	objptr, ##5836
1d758     28 26 B0 FD | 	call	#_psram_spin2_write
1d75c     0B 00 00 FF 
1d760     CC E4 85 F1 | 	sub	objptr, ##5836
1d764     A7 F0 03 F6 | 	mov	ptra, fp
1d768     B2 00 A0 FD | 	call	#popregs_
1d76c                 | _pslpoke_ret
1d76c     2D 00 64 FD | 	ret
1d770                 | 
1d770                 | ' 
1d770                 | ' sub psdpoke(addr as ulong,value as ulong)
1d770                 | _psdpoke
1d770     00 4A 05 F6 | 	mov	COUNT_, #0
1d774     A8 00 A0 FD | 	call	#pushregs_
1d778     08 F0 07 F1 | 	add	ptra, #8
1d77c     A7 12 62 FC | 	wrlong	arg01, fp
1d780     04 4E 05 F1 | 	add	fp, #4
1d784     A7 14 62 FC | 	wrlong	arg02, fp
1d788     A7 12 02 F6 | 	mov	arg01, fp
1d78c     04 4E 85 F1 | 	sub	fp, #4
1d790     A7 14 02 FB | 	rdlong	arg02, fp
1d794     02 16 06 F6 | 	mov	arg03, #2
1d798     0B 00 00 FF 
1d79c     CC E4 05 F1 | 	add	objptr, ##5836
1d7a0     E0 25 B0 FD | 	call	#_psram_spin2_write
1d7a4     0B 00 00 FF 
1d7a8     CC E4 85 F1 | 	sub	objptr, ##5836
1d7ac     A7 F0 03 F6 | 	mov	ptra, fp
1d7b0     B2 00 A0 FD | 	call	#popregs_
1d7b4                 | _psdpoke_ret
1d7b4     2D 00 64 FD | 	ret
1d7b8                 | 
1d7b8                 | ' 
1d7b8                 | ' sub pspoke(addr as ulong,value as ulong)
1d7b8                 | _pspoke
1d7b8     00 4A 05 F6 | 	mov	COUNT_, #0
1d7bc     A8 00 A0 FD | 	call	#pushregs_
1d7c0     08 F0 07 F1 | 	add	ptra, #8
1d7c4     A7 12 62 FC | 	wrlong	arg01, fp
1d7c8     04 4E 05 F1 | 	add	fp, #4
1d7cc     A7 14 62 FC | 	wrlong	arg02, fp
1d7d0     A7 12 02 F6 | 	mov	arg01, fp
1d7d4     04 4E 85 F1 | 	sub	fp, #4
1d7d8     A7 14 02 FB | 	rdlong	arg02, fp
1d7dc     01 16 06 F6 | 	mov	arg03, #1
1d7e0     0B 00 00 FF 
1d7e4     CC E4 05 F1 | 	add	objptr, ##5836
1d7e8     98 25 B0 FD | 	call	#_psram_spin2_write
1d7ec     0B 00 00 FF 
1d7f0     CC E4 85 F1 | 	sub	objptr, ##5836
1d7f4     A7 F0 03 F6 | 	mov	ptra, fp
1d7f8     B2 00 A0 FD | 	call	#popregs_
1d7fc                 | _pspoke_ret
1d7fc     2D 00 64 FD | 	ret
1d800                 | 
1d800                 | ' 
1d800                 | ' function pspeek(adr as ulong) as ubyte
1d800                 | _pspeek
1d800     00 4A 05 F6 | 	mov	COUNT_, #0
1d804     A8 00 A0 FD | 	call	#pushregs_
1d808     0C F0 07 F1 | 	add	ptra, #12
1d80c     04 4E 05 F1 | 	add	fp, #4
1d810     A7 12 62 FC | 	wrlong	arg01, fp
1d814     04 4E 05 F1 | 	add	fp, #4
1d818     A7 12 02 F6 | 	mov	arg01, fp
1d81c     04 4E 85 F1 | 	sub	fp, #4
1d820     A7 14 02 FB | 	rdlong	arg02, fp
1d824     04 4E 85 F1 | 	sub	fp, #4
1d828     01 16 06 F6 | 	mov	arg03, #1
1d82c     0B 00 00 FF 
1d830     CC E4 05 F1 | 	add	objptr, ##5836
1d834     B0 24 B0 FD | 	call	#_psram_spin2_read1
1d838     0B 00 00 FF 
1d83c     CC E4 85 F1 | 	sub	objptr, ##5836
1d840                 | ' psram.read1(varptr(res),adr,1)
1d840                 | ' return res
1d840     08 4E 05 F1 | 	add	fp, #8
1d844     A7 FA C1 FA | 	rdbyte	result1, fp
1d848     08 4E 85 F1 | 	sub	fp, #8
1d84c     A7 F0 03 F6 | 	mov	ptra, fp
1d850     B2 00 A0 FD | 	call	#popregs_
1d854                 | _pspeek_ret
1d854     2D 00 64 FD | 	ret
1d858                 | 
1d858                 | ' 
1d858                 | ' function pslpeek(adr as ulong) as ulong
1d858                 | _pslpeek
1d858     00 4A 05 F6 | 	mov	COUNT_, #0
1d85c     A8 00 A0 FD | 	call	#pushregs_
1d860     0C F0 07 F1 | 	add	ptra, #12
1d864     04 4E 05 F1 | 	add	fp, #4
1d868     A7 12 62 FC | 	wrlong	arg01, fp
1d86c     04 4E 05 F1 | 	add	fp, #4
1d870     A7 12 02 F6 | 	mov	arg01, fp
1d874     04 4E 85 F1 | 	sub	fp, #4
1d878     A7 14 02 FB | 	rdlong	arg02, fp
1d87c     04 4E 85 F1 | 	sub	fp, #4
1d880     04 16 06 F6 | 	mov	arg03, #4
1d884     0B 00 00 FF 
1d888     CC E4 05 F1 | 	add	objptr, ##5836
1d88c     58 24 B0 FD | 	call	#_psram_spin2_read1
1d890     0B 00 00 FF 
1d894     CC E4 85 F1 | 	sub	objptr, ##5836
1d898                 | ' psram.read1(varptr(res),adr,4)
1d898                 | ' return res
1d898     08 4E 05 F1 | 	add	fp, #8
1d89c     A7 FA 01 FB | 	rdlong	result1, fp
1d8a0     08 4E 85 F1 | 	sub	fp, #8
1d8a4     A7 F0 03 F6 | 	mov	ptra, fp
1d8a8     B2 00 A0 FD | 	call	#popregs_
1d8ac                 | _pslpeek_ret
1d8ac     2D 00 64 FD | 	ret
1d8b0                 | 
1d8b0                 | ' 
1d8b0                 | ' function psdpeek(adr as ulong) as ulong
1d8b0                 | _psdpeek
1d8b0     00 4A 05 F6 | 	mov	COUNT_, #0
1d8b4     A8 00 A0 FD | 	call	#pushregs_
1d8b8     0C F0 07 F1 | 	add	ptra, #12
1d8bc     04 4E 05 F1 | 	add	fp, #4
1d8c0     A7 12 62 FC | 	wrlong	arg01, fp
1d8c4     04 4E 05 F1 | 	add	fp, #4
1d8c8     A7 12 02 F6 | 	mov	arg01, fp
1d8cc     04 4E 85 F1 | 	sub	fp, #4
1d8d0     A7 14 02 FB | 	rdlong	arg02, fp
1d8d4     04 4E 85 F1 | 	sub	fp, #4
1d8d8     02 16 06 F6 | 	mov	arg03, #2
1d8dc     0B 00 00 FF 
1d8e0     CC E4 05 F1 | 	add	objptr, ##5836
1d8e4     00 24 B0 FD | 	call	#_psram_spin2_read1
1d8e8     0B 00 00 FF 
1d8ec     CC E4 85 F1 | 	sub	objptr, ##5836
1d8f0                 | ' psram.read1(varptr(res),adr,2)
1d8f0                 | ' return res
1d8f0     08 4E 05 F1 | 	add	fp, #8
1d8f4     A7 FA E1 FA | 	rdword	result1, fp
1d8f8     08 4E 85 F1 | 	sub	fp, #8
1d8fc     A7 F0 03 F6 | 	mov	ptra, fp
1d900     B2 00 A0 FD | 	call	#popregs_
1d904                 | _psdpeek_ret
1d904     2D 00 64 FD | 	ret
1d908                 | 
1d908                 | ' 
1d908                 | ' '' ------------------------------- USB keyboard scan to char translator
1d908                 | ' 
1d908                 | ' function scantochar(key)
1d908                 | _scantochar
1d908                 | ' 
1d908                 | ' select case (key shr 8) and 255
1d908     09 01 02 F6 | 	mov	_var01, arg01
1d90c     08 00 C6 F0 | 	sar	_var01, #8
1d910     FF 00 0E F5 | 	and	_var01, #255 wz
1d914     24 00 90 AD |  if_e	jmp	#LR__2350
1d918     02 00 0E F2 | 	cmp	_var01, #2 wz
1d91c     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
1d920     30 00 90 AD |  if_e	jmp	#LR__2351
1d924     40 00 0E F2 | 	cmp	_var01, #64 wz
1d928     44 00 90 AD |  if_e	jmp	#LR__2352
1d92c     42 00 0E F2 | 	cmp	_var01, #66 wz
1d930     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
1d934     70 00 90 5D |  if_ne	jmp	#LR__2354
1d938     50 00 90 FD | 	jmp	#LR__2353
1d93c                 | LR__2350
1d93c     09 FB 01 F6 | 	mov	result1, arg01
1d940     7F FA 05 F5 | 	and	result1, #127
1d944     02 FA 65 F0 | 	shl	result1, #2
1d948     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d94c     FD FA C1 FA | 	rdbyte	result1, result1
1d950     54 00 90 FD | 	jmp	#_scantochar_ret
1d954                 | LR__2351
1d954     09 FB 01 F6 | 	mov	result1, arg01
1d958     7F FA 05 F5 | 	and	result1, #127
1d95c     02 FA 65 F0 | 	shl	result1, #2
1d960     01 FA 05 F1 | 	add	result1, #1
1d964     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d968     FD FA C1 FA | 	rdbyte	result1, result1
1d96c     38 00 90 FD | 	jmp	#_scantochar_ret
1d970                 | LR__2352
1d970     09 FB 01 F6 | 	mov	result1, arg01
1d974     7F FA 05 F5 | 	and	result1, #127
1d978     02 FA 65 F0 | 	shl	result1, #2
1d97c     02 FA 05 F1 | 	add	result1, #2
1d980     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d984     FD FA C1 FA | 	rdbyte	result1, result1
1d988     1C 00 90 FD | 	jmp	#_scantochar_ret
1d98c                 | LR__2353
1d98c     09 FB 01 F6 | 	mov	result1, arg01
1d990     7F FA 05 F5 | 	and	result1, #127
1d994     02 FA 65 F0 | 	shl	result1, #2
1d998     03 FA 05 F1 | 	add	result1, #3
1d99c     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d9a0     FD FA C1 FA | 	rdbyte	result1, result1
1d9a4     00 00 90 FD | 	jmp	#_scantochar_ret
1d9a8                 | LR__2354
1d9a8                 | _scantochar_ret
1d9a8     2D 00 64 FD | 	ret
1d9ac                 | 
1d9ac                 | _program
1d9ac     01 4A 05 F6 | 	mov	COUNT_, #1
1d9b0     A8 00 A0 FD | 	call	#pushregs_
1d9b4     70 FC BF FD | 	call	#_startpsram
1d9b8     40 12 06 F6 | 	mov	arg01, #64
1d9bc     00 14 06 F6 | 	mov	arg02, #0
1d9c0     00 16 06 F6 | 	mov	arg03, #0
1d9c4     A0 FC BF FD | 	call	#_startvideo
1d9c8     37 00 00 FF 
1d9cc     14 E4 05 F1 | 	add	objptr, ##28180
1d9d0     F2 12 02 FB | 	rdlong	arg01, objptr
1d9d4     00 14 06 F6 | 	mov	arg02, #0
1d9d8     FB 03 00 FF 
1d9dc     00 17 06 F6 | 	mov	arg03, ##521984
1d9e0     2B 00 00 FF 
1d9e4     48 E5 85 F1 | 	sub	objptr, ##22344
1d9e8     D8 28 B0 FD | 	call	#_audio096_spin2_start
1d9ec     FE 16 02 F6 | 	mov	arg03, result2
1d9f0     2B 00 00 FF 
1d9f4     30 E5 05 F1 | 	add	objptr, ##22320
1d9f8     F2 FA 61 FC | 	wrlong	result1, objptr
1d9fc     14 E4 05 F1 | 	add	objptr, #20
1da00     F2 16 62 FC | 	wrlong	arg03, objptr
1da04     37 00 00 FF 
1da08     10 E4 85 F1 | 	sub	objptr, ##28176
1da0c     32 12 06 F6 | 	mov	arg01, #50
1da10     08 32 B0 FD | 	call	#__system___waitms
1da14     37 00 00 FF 
1da18     10 E4 05 F1 | 	add	objptr, ##28176
1da1c     F2 12 02 FB | 	rdlong	arg01, objptr
1da20     37 00 00 FF 
1da24     10 E4 85 F1 | 	sub	objptr, ##28176
1da28     14 12 06 F1 | 	add	arg01, #20
1da2c     20 00 80 FF 
1da30     09 01 58 FC | 	wrword	##16384, arg01
1da34     E4 25 B0 FD | 	call	#_usbnew_spin2_start
1da38     37 00 00 FF 
1da3c     04 E4 05 F1 | 	add	objptr, ##28164
1da40     F2 FA 61 FC | 	wrlong	result1, objptr
1da44                 | '   mouse_limits[0] := xlim
1da44     0F 00 00 FF 
1da48     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
1da4c     01 00 80 FF 
1da50     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
1da54                 | '   mouse_limits[1] := ylim
1da54     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1da58     01 00 80 FF 
1da5c     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
1da60     36 00 00 FF 
1da64     F3 E4 85 F1 | 	sub	objptr, ##27891
1da68     F2 12 02 F6 | 	mov	arg01, objptr
1da6c     11 E5 85 F1 | 	sub	objptr, #273
1da70     C4 12 06 F1 | 	add	arg01, #196
1da74                 | '   mouse_outptr := ptr
1da74     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1da78     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
1da7c     0F 00 00 FF 
1da80     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1da84     0E 00 00 FF 
1da88     B6 EA 05 F1 | 	add	ptr__dat__, ##7350
1da8c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1da90     0E 00 00 FF 
1da94     B6 EA 85 F1 | 	sub	ptr__dat__, ##7350
1da98     10 12 06 F6 | 	mov	arg01, #16
1da9c     30 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
1daa0     10 12 06 F6 | 	mov	arg01, #16
1daa4     20 14 06 F6 | 	mov	arg02, #32
1daa8     20 16 06 F6 | 	mov	arg03, #32
1daac     B0 0A B0 FD | 	call	#_hg010b_spin2_setspritesize
1dab0     09 12 C6 F9 | 	decod	arg01, #9
1dab4     2C 15 06 F6 | 	mov	arg02, #300
1dab8     B8 26 B0 FD | 	call	#_usbnew_spin2_mouse_move
1dabc     F2 16 02 F6 | 	mov	arg03, objptr
1dac0     58 00 00 FF 
1dac4     20 E5 05 F1 | 	add	objptr, ##45344
1dac8     F2 14 02 F6 | 	mov	arg02, objptr
1dacc     0A 17 62 FC | 	wrlong	arg03, arg02
1dad0     04 14 06 F1 | 	add	arg02, #4
1dad4     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
1dad8     EF 14 02 F6 | 	mov	arg02, entryptr__
1dadc     1E FA 05 F6 | 	mov	result1, #30
1dae0     28 E4 61 FD | 	setq	objptr
1dae4     0A FB F1 FC | 	coginit	result1, arg02 wc
1dae8     01 FA 65 C6 |  if_b	neg	result1, #1
1daec     04 E4 85 F1 | 	sub	objptr, #4
1daf0     F2 FA 61 FC | 	wrlong	result1, objptr
1daf4     01 00 00 FF 
1daf8     90 E4 05 F1 | 	add	objptr, ##656
1dafc     F2 00 68 FC | 	wrlong	#0, objptr
1db00     22 00 00 FF 
1db04     78 E5 85 F1 | 	sub	objptr, ##17784
1db08     F2 04 68 FC | 	wrlong	#2, objptr
1db0c     04 E4 05 F1 | 	add	objptr, #4
1db10     F2 26 69 FC | 	wrlong	#147, objptr
1db14     04 E4 05 F1 | 	add	objptr, #4
1db18     F2 34 69 FC | 	wrlong	#154, objptr
1db1c     04 E4 05 F1 | 	add	objptr, #4
1db20     F2 08 68 FC | 	wrlong	#4, objptr
1db24     04 E4 85 F1 | 	sub	objptr, #4
1db28     F2 16 02 FB | 	rdlong	arg03, objptr
1db2c     14 E4 85 F1 | 	sub	objptr, #20
1db30     F2 16 62 FC | 	wrlong	arg03, objptr
1db34     04 E4 05 F1 | 	add	objptr, #4
1db38     F2 00 68 FC | 	wrlong	#0, objptr
1db3c     04 E4 05 F1 | 	add	objptr, #4
1db40     F2 00 68 FC | 	wrlong	#0, objptr
1db44     21 00 00 FF 
1db48     E8 E4 05 F1 | 	add	objptr, ##17128
1db4c     F2 02 68 FC | 	wrlong	#1, objptr
1db50     01 00 00 FF 
1db54     9C E4 05 F1 | 	add	objptr, ##668
1db58     F2 00 68 FC | 	wrlong	#0, objptr
1db5c     01 00 00 FF 
1db60     00 EA 05 F1 | 	add	ptr__dat__, ##512
1db64     08 E4 05 F1 | 	add	objptr, #8
1db68     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1db6c     04 E4 85 F1 | 	sub	objptr, #4
1db70     03 00 80 FF 
1db74     F2 3C 69 FC | 	wrlong	##1694, objptr
1db78     14 00 00 FF 
1db7c     54 E5 85 F1 | 	sub	objptr, ##10580
1db80     F2 18 68 FC | 	wrlong	#12, objptr
1db84     45 00 00 FF 
1db88     64 E4 85 F1 | 	sub	objptr, ##35428
1db8c     01 00 00 FF 
1db90     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1db94     2C DB BF FD | 	call	#_init_commands
1db98     E8 F6 BF FD | 	call	#_init_error_strings
1db9c     E4 ED BF FD | 	call	#_init_audio
1dba0     94 22 BF FD | 	call	#_do_new
1dba4     37 00 00 FF 
1dba8     3C E4 05 F1 | 	add	objptr, ##28220
1dbac     F2 12 02 FB | 	rdlong	arg01, objptr
1dbb0     04 E4 85 F1 | 	sub	objptr, #4
1dbb4     F2 14 02 FB | 	rdlong	arg02, objptr
1dbb8     37 00 00 FF 
1dbbc     38 E4 85 F1 | 	sub	objptr, ##28216
1dbc0     BC 16 B0 FD | 	call	#_hg010b_spin2_cls
1dbc4     37 00 00 FF 
1dbc8     40 E4 05 F1 | 	add	objptr, ##28224
1dbcc     F2 12 02 FB | 	rdlong	arg01, objptr
1dbd0     37 00 00 FF 
1dbd4     40 E4 85 F1 | 	sub	objptr, ##28224
1dbd8     54 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1dbdc                 | ' 
1dbdc                 | ' leading_spaces:=amount
1dbdc     01 00 00 FF 
1dbe0     B6 E4 05 F1 | 	add	objptr, ##694
1dbe4     F2 04 68 FC | 	wrlong	#2, objptr
1dbe8     01 00 00 FF 
1dbec     B6 E4 85 F1 | 	sub	objptr, ##694
1dbf0     87 01 00 FF 
1dbf4     B2 1F 06 F6 | 	mov	local01, ##@LR__5524
1dbf8     3D 12 06 F6 | 	mov	arg01, #61
1dbfc     3C 14 06 F6 | 	mov	arg02, #60
1dc00     3B 16 06 F6 | 	mov	arg03, #59
1dc04     3A 18 06 F6 | 	mov	arg04, #58
1dc08     B8 77 B0 FD | 	call	#__system___vfs_open_sdcardx
1dc0c     FD 14 02 F6 | 	mov	arg02, result1
1dc10     0F 13 02 F6 | 	mov	arg01, local01
1dc14     DC 30 B0 FD | 	call	#__system___mount
1dc18     87 01 00 FF 
1dc1c     B6 13 06 F6 | 	mov	arg01, ##@LR__5525
1dc20     90 33 B0 FD | 	call	#__system___chdir
1dc24     87 01 00 FF 
1dc28     BE 1F 06 F6 | 	mov	local01, ##@LR__5526
1dc2c     52 00 00 FF 
1dc30     98 E4 05 F1 | 	add	objptr, ##42136
1dc34     F2 1E 62 FC | 	wrlong	local01, objptr
1dc38     1B 00 00 FF 
1dc3c     64 E4 85 F1 | 	sub	objptr, ##13924
1dc40     F2 12 02 FB | 	rdlong	arg01, objptr
1dc44     37 00 00 FF 
1dc48     34 E4 85 F1 | 	sub	objptr, ##28212
1dc4c     01 12 66 F0 | 	shl	arg01, #1
1dc50     01 14 06 F6 | 	mov	arg02, #1
1dc54     18 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1dc58                 | ' init_commands
1dc58                 | ' init_error_strings
1dc58                 | ' init_audio
1dc58                 | ' do_new
1dc58                 | ' cls(ink, paper)
1dc58                 | ' v.setfontfamily(font) 				' use ST Mono font
1dc58                 | ' v.setleadingspaces(2)
1dc58                 | ' mount "/sd", _vfs_open_sdcard()
1dc58                 | ' chdir "/sd/bas"
1dc58                 | ' currentdir$="/sd/bas"
1dc58                 | ' position 2*editor_spaces,1 : print ver$
1dc58     00 12 06 F6 | 	mov	arg01, #0
1dc5c     08 87 B0 FD | 	call	#__system___getiolock_0540
1dc60     FD 12 02 F6 | 	mov	arg01, result1
1dc64     C0 2C B0 FD | 	call	#__system___lockmem
1dc68     18 00 00 FF 
1dc6c     4C EB 05 F1 | 	add	ptr__dat__, ##12620
1dc70     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
1dc74     18 00 00 FF 
1dc78     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
1dc7c     00 12 06 F6 | 	mov	arg01, #0
1dc80     00 16 06 F6 | 	mov	arg03, #0
1dc84     94 39 B0 FD | 	call	#__system___basic_print_string
1dc88     00 12 06 F6 | 	mov	arg01, #0
1dc8c     0A 14 06 F6 | 	mov	arg02, #10
1dc90     00 16 06 F6 | 	mov	arg03, #0
1dc94     2C 39 B0 FD | 	call	#__system___basic_print_char
1dc98     00 12 06 F6 | 	mov	arg01, #0
1dc9c     C8 86 B0 FD | 	call	#__system___getiolock_0540
1dca0     FD 00 68 FC | 	wrlong	#0, result1
1dca4     59 00 00 FF 
1dca8     B0 E5 05 F1 | 	add	objptr, ##46000
1dcac     F2 12 02 FB | 	rdlong	arg01, objptr
1dcb0     16 00 00 FF 
1dcb4     54 E5 85 F1 | 	sub	objptr, ##11604
1dcb8     F2 1E 02 FB | 	rdlong	local01, objptr
1dcbc     43 00 00 FF 
1dcc0     5C E4 85 F1 | 	sub	objptr, ##34396
1dcc4     0F 13 82 F1 | 	sub	arg01, local01
1dcc8     00 14 06 F6 | 	mov	arg02, #0
1dccc     0A 16 06 F6 | 	mov	arg03, #10
1dcd0     24 4F B0 FD | 	call	#__system__Number_S
1dcd4     FD 12 02 F6 | 	mov	arg01, result1
1dcd8     87 01 00 FF 
1dcdc     C6 15 06 F6 | 	mov	arg02, ##@LR__5527
1dce0     A0 2C B0 FD | 	call	#__system___string_concat
1dce4     FD 1E 02 F6 | 	mov	local01, result1
1dce8     58 00 00 FF 
1dcec     14 E5 05 F1 | 	add	objptr, ##45332
1dcf0     F2 1E 62 FC | 	wrlong	local01, objptr
1dcf4     58 00 00 FF 
1dcf8     14 E5 85 F1 | 	sub	objptr, ##45332
1dcfc                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
1dcfc     00 12 06 F6 | 	mov	arg01, #0
1dd00     64 86 B0 FD | 	call	#__system___getiolock_0540
1dd04     FD 12 02 F6 | 	mov	arg01, result1
1dd08     1C 2C B0 FD | 	call	#__system___lockmem
1dd0c     58 00 00 FF 
1dd10     14 E5 05 F1 | 	add	objptr, ##45332
1dd14     F2 14 02 FB | 	rdlong	arg02, objptr
1dd18     58 00 00 FF 
1dd1c     14 E5 85 F1 | 	sub	objptr, ##45332
1dd20     00 12 06 F6 | 	mov	arg01, #0
1dd24     00 16 06 F6 | 	mov	arg03, #0
1dd28     F0 38 B0 FD | 	call	#__system___basic_print_string
1dd2c     00 12 06 F6 | 	mov	arg01, #0
1dd30     0A 14 06 F6 | 	mov	arg02, #10
1dd34     00 16 06 F6 | 	mov	arg03, #0
1dd38     88 38 B0 FD | 	call	#__system___basic_print_char
1dd3c     00 12 06 F6 | 	mov	arg01, #0
1dd40     24 86 B0 FD | 	call	#__system___getiolock_0540
1dd44     FD 00 68 FC | 	wrlong	#0, result1
1dd48     37 00 00 FF 
1dd4c     34 E4 05 F1 | 	add	objptr, ##28212
1dd50     F2 12 02 FB | 	rdlong	arg01, objptr
1dd54     37 00 00 FF 
1dd58     34 E4 85 F1 | 	sub	objptr, ##28212
1dd5c     01 12 66 F0 | 	shl	arg01, #1
1dd60     04 14 06 F6 | 	mov	arg02, #4
1dd64     08 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1dd68                 | ' position 2*editor_spaces,4 : print "Ready"
1dd68     00 12 06 F6 | 	mov	arg01, #0
1dd6c     F8 85 B0 FD | 	call	#__system___getiolock_0540
1dd70     FD 12 02 F6 | 	mov	arg01, result1
1dd74     B0 2B B0 FD | 	call	#__system___lockmem
1dd78     87 01 00 FF 
1dd7c     D8 15 06 F6 | 	mov	arg02, ##@LR__5528
1dd80     00 12 06 F6 | 	mov	arg01, #0
1dd84     00 16 06 F6 | 	mov	arg03, #0
1dd88     90 38 B0 FD | 	call	#__system___basic_print_string
1dd8c     00 12 06 F6 | 	mov	arg01, #0
1dd90     0A 14 06 F6 | 	mov	arg02, #10
1dd94     00 16 06 F6 | 	mov	arg03, #0
1dd98     28 38 B0 FD | 	call	#__system___basic_print_char
1dd9c     00 12 06 F6 | 	mov	arg01, #0
1dda0     C4 85 B0 FD | 	call	#__system___getiolock_0540
1dda4     FD 00 68 FC | 	wrlong	#0, result1
1dda8     00 14 06 F6 | 	mov	arg02, #0
1ddac     01 14 D6 F7 | 	test	arg02, #1 wc
1ddb0     5A 4C 64 FD | 	drvc	#38
1ddb4     01 14 D6 F7 | 	test	arg02, #1 wc
1ddb8     5A 4E 64 FD | 	drvc	#39
1ddbc     87 01 00 FF 
1ddc0     DE 1F 06 F6 | 	mov	local01, ##@LR__5529
1ddc4     59 00 00 FF 
1ddc8     DC E5 05 F1 | 	add	objptr, ##46044
1ddcc     F2 1E 62 FC | 	wrlong	local01, objptr
1ddd0     04 E4 05 F1 | 	add	objptr, #4
1ddd4     FF FF FF FF 
1ddd8     F2 FE 6B FC | 	wrlong	##-1, objptr
1dddc     59 00 00 FF 
1dde0     E0 E5 85 F1 | 	sub	objptr, ##46048
1dde4                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
1dde4                 | ' loadname="noname.bas"
1dde4                 | ' do_insert=-1
1dde4                 | ' 
1dde4                 | ' '-------------------------------------------------------------------------------------------------------- 
1dde4                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
1dde4                 | ' '--------------------------------------------------------------------------------------------------------
1dde4                 | ' 
1dde4                 | ' do
1dde4                 | LR__2360
1dde4     01 12 06 F6 | 	mov	arg01, #1
1dde8     24 14 B0 FD | 	call	#_hg010b_spin2_waitvbl
1ddec     14 2A BE FD | 	call	#_edit
1ddf0     FD 1E 02 F6 | 	mov	local01, result1
1ddf4     37 00 00 FF 
1ddf8     1C E4 05 F1 | 	add	objptr, ##28188
1ddfc     F2 1E 62 FC | 	wrlong	local01, objptr
1de00     37 00 00 FF 
1de04     1C E4 85 F1 | 	sub	objptr, ##28188
1de08     30 38 BE FD | 	call	#_interpret
1de0c     87 01 00 FF 
1de10     E9 1F 06 F6 | 	mov	local01, ##@LR__5530
1de14     37 00 00 FF 
1de18     1C E4 05 F1 | 	add	objptr, ##28188
1de1c     F2 1E 62 FC | 	wrlong	local01, objptr
1de20     37 00 00 FF 
1de24     1C E4 85 F1 | 	sub	objptr, ##28188
1de28     B8 FF 9F FD | 	jmp	#LR__2360
1de2c     A7 F0 03 F6 | 	mov	ptra, fp
1de30     B2 00 A0 FD | 	call	#popregs_
1de34                 | _program_ret
1de34     2D 00 64 FD | 	ret
1de38                 | 
1de38                 | ' '' this is not a main program.
1de38                 | ' 
1de38                 | ' '****************************************************************************************************************
1de38                 | ' '                                                                                                             	*
1de38                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
1de38                 | ' '                                                                                                            	*
1de38                 | ' ' base - HDMI base pin												*
1de38                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1de38                 | ' '														*
1de38                 | ' '														*
1de38                 | ' '****************************************************************************************************************
1de38                 | ' 
1de38                 | ' pub start(base,mb):result |i
1de38                 | _hg010b_spin2_start
1de38                 | ' 
1de38                 | ' '--------------------------- initialize pointers and variables
1de38                 | ' 
1de38                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1de38     34 E4 05 F1 | 	add	objptr, #52
1de3c     F2 FA 01 F6 | 	mov	result1, objptr
1de40     28 E4 85 F1 | 	sub	objptr, #40
1de44     F2 FA 61 FC | 	wrlong	result1, objptr
1de48                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1de48                 | ' hdmibase:=base							' HDMI base pin, 8*n
1de48     18 E4 05 F1 | 	add	objptr, #24
1de4c     F2 12 62 FC | 	wrlong	arg01, objptr
1de50                 | ' mailbox_ptr:=mb		
1de50     04 E4 05 F1 | 	add	objptr, #4
1de54     F2 14 62 FC | 	wrlong	arg02, objptr
1de58                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1de58     C1 E5 05 F1 | 	add	objptr, #449
1de5c     F2 14 62 FC | 	wrlong	arg02, objptr
1de60                 | ' sprite_ptr:=@spr1ptr
1de60     D8 E4 85 F1 | 	sub	objptr, #216
1de64     F2 FA 01 F6 | 	mov	result1, objptr
1de68     E5 E4 85 F1 | 	sub	objptr, #229
1de6c     F2 FA 61 FC | 	wrlong	result1, objptr
1de70                 | ' 
1de70                 | ' 		'
1de70                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1de70     E5 E4 05 F1 | 	add	objptr, #229
1de74     F2 FA 01 FB | 	rdlong	result1, objptr
1de78     D0 FA 05 F1 | 	add	result1, #208
1de7c     FD 10 58 FC | 	wrword	#8, result1
1de80                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1de80     F2 16 02 FB | 	rdlong	arg03, objptr
1de84     D2 16 06 F1 | 	add	arg03, #210
1de88     0B 21 58 FC | 	wrword	#16, arg03
1de8c                 | ' leading_spaces:=0				'
1de8c     A5 E5 05 F1 | 	add	objptr, #421
1de90     F2 00 68 FC | 	wrlong	#0, objptr
1de94                 | ' 
1de94                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1de94     99 E4 85 F1 | 	sub	objptr, #153
1de98     00 00 A0 FF 
1de9c     F2 0E 68 FC | 	wrlong	##1073741831, objptr
1dea0                 | ' emptydl[1]:=0
1dea0     04 E4 05 F1 | 	add	objptr, #4
1dea4     F2 00 68 FC | 	wrlong	#0, objptr
1dea8                 | ' 
1dea8                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1dea8                 | ' 
1dea8                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1dea8     28 E5 85 F1 | 	sub	objptr, #296
1deac     F2 02 68 FC | 	wrlong	#1, objptr
1deb0                 | ' if s_debug<>0
1deb0                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
1deb0     20 00 80 FF 
1deb4     F2 00 68 FC | 	wrlong	##16384, objptr
1deb8     F9 E4 85 F1 | 	sub	objptr, #249
1debc                 | ' setmode()							' set the mode, see below
1debc     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
1dec0                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
1dec0     49 E4 05 F1 | 	add	objptr, #73
1dec4     F2 FA 01 F6 | 	mov	result1, objptr
1dec8     35 E4 85 F1 | 	sub	objptr, #53
1decc     F2 FA 61 FC | 	wrlong	result1, objptr
1ded0                 | ' cursor_ptr:=@cursor_x						
1ded0     28 E4 05 F1 | 	add	objptr, #40
1ded4     F2 16 02 F6 | 	mov	arg03, objptr
1ded8     2C E4 85 F1 | 	sub	objptr, #44
1dedc     F2 16 62 FC | 	wrlong	arg03, objptr
1dee0                 | ' fontnum:=0  							' start with a PC type font 
1dee0     55 E4 05 F1 | 	add	objptr, #85
1dee4     F2 00 68 FC | 	wrlong	#0, objptr
1dee8                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1dee8     1C E4 05 F1 | 	add	objptr, #28
1deec     F2 12 02 F6 | 	mov	arg01, objptr
1def0     81 E4 85 F1 | 	sub	objptr, #129
1def4     10 00 00 FF 
1def8     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1defc     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1df00     10 00 00 FF 
1df04     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1df08     10 16 06 F6 | 	mov	arg03, #16
1df0c     38 29 B0 FD | 	call	#__system____builtin_memmove
1df10                 | ' leading_spaces:=0
1df10     01 00 00 FF 
1df14     B6 E4 05 F1 | 	add	objptr, ##694
1df18     F2 00 68 FC | 	wrlong	#0, objptr
1df1c     01 00 00 FF 
1df20     B6 E4 85 F1 | 	sub	objptr, ##694
1df24                 | ' '---------------------------- initialize a cursor (MSDOS type)
1df24                 | ' 
1df24                 | ' initcursor(154)
1df24     9A 12 06 F6 | 	mov	arg01, #154
1df28     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
1df2c                 | ' 
1df2c                 | ' '---------------------------- start the cog
1df2c                 | ' 
1df2c                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
1df2c     10 00 00 FF 
1df30     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1df34     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1df38     10 00 00 FF 
1df3c     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1df40     14 E4 05 F1 | 	add	objptr, #20
1df44     10 FA 05 F6 | 	mov	result1, #16
1df48     28 E4 61 FD | 	setq	objptr
1df4c     0A FB F1 FC | 	coginit	result1, arg02 wc
1df50     01 FA 65 C6 |  if_b	neg	result1, #1
1df54     1C E4 05 F1 | 	add	objptr, #28
1df58     F2 FA 61 FC | 	wrlong	result1, objptr
1df5c     30 E4 85 F1 | 	sub	objptr, #48
1df60                 | ' waitms(40)							' wait for stabilize
1df60     28 12 06 F6 | 	mov	arg01, #40
1df64     B4 2C B0 FD | 	call	#__system___waitms
1df68                 | ' return cog							' return the driver's cog #
1df68     30 E4 05 F1 | 	add	objptr, #48
1df6c     F2 FA 01 FB | 	rdlong	result1, objptr
1df70     30 E4 85 F1 | 	sub	objptr, #48
1df74                 | _hg010b_spin2_start_ret
1df74     2D 00 64 FD | 	ret
1df78                 | 
1df78                 | ' 
1df78                 | ' 
1df78                 | ' '**************************************************************************************************************** 
1df78                 | ' '                                                                                                             	*
1df78                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
1df78                 | ' '  Mode number - see start() above or bits below								*
1df78                 | ' '                                                                                                             	*
1df78                 | ' '****************************************************************************************************************
1df78                 | ' 
1df78                 | ' '---------------------------- initialize a cursor (MSDOS type)
1df78                 | ' pub initcursor(color) |i
1df78                 | _hg010b_spin2_initcursor
1df78     03 4A 05 F6 | 	mov	COUNT_, #3
1df7c     A8 00 A0 FD | 	call	#pushregs_
1df80     09 1F 02 F6 | 	mov	local01, arg01
1df84                 | ' 
1df84                 | ' cursor_x:=0							' place the cursor at 0:0
1df84     3C E4 05 F1 | 	add	objptr, #60
1df88     F2 00 58 FC | 	wrword	#0, objptr
1df8c                 | ' cursor_y:=0
1df8c     02 E4 05 F1 | 	add	objptr, #2
1df90     F2 00 48 FC | 	wrbyte	#0, objptr
1df94                 | ' repeat i from 0 to 111
1df94     00 20 06 F6 | 	mov	local02, #0
1df98     F8 E5 05 F1 | 	add	objptr, #504
1df9c     97 1A 48 FB | 	callpa	#(@LR__2372-@LR__2370)>>2,fcache_load_ptr_
1dfa0                 | LR__2370
1dfa0                 | '   cursor[i]:=0
1dfa0     10 23 02 F6 | 	mov	local03, local02
1dfa4     F2 22 02 F1 | 	add	local03, objptr
1dfa8     11 01 48 FC | 	wrbyte	#0, local03
1dfac     01 20 06 F1 | 	add	local02, #1
1dfb0     70 20 56 F2 | 	cmps	local02, #112 wc
1dfb4     E8 FF 9F CD |  if_b	jmp	#LR__2370
1dfb8                 | ' repeat i from 112 to 127
1dfb8     70 20 06 F6 | 	mov	local02, #112
1dfbc                 | LR__2371
1dfbc                 | '   cursor[i]:=color  
1dfbc     10 23 02 F6 | 	mov	local03, local02
1dfc0     F2 22 02 F1 | 	add	local03, objptr
1dfc4     11 1F 42 FC | 	wrbyte	local01, local03
1dfc8     01 20 06 F1 | 	add	local02, #1
1dfcc     80 20 16 F2 | 	cmp	local02, #128 wc
1dfd0     E8 FF 9F CD |  if_b	jmp	#LR__2371
1dfd4                 | LR__2372
1dfd4                 | ' 'repeat i from 0 to 127
1dfd4                 | ' '  if ((i/8)//2)
1dfd4                 | ' '    cursor[i]:=15
1dfd4                 | ' '  else
1dfd4                 | ' '    cursor[i]:=0
1dfd4                 | ' '  if i>=120    
1dfd4                 | ' '    cursor[i]:=40
1dfd4                 | ' setspriteptr(17,@cursor)
1dfd4     F2 14 02 F6 | 	mov	arg02, objptr
1dfd8     01 00 00 FF 
1dfdc     36 E4 85 F1 | 	sub	objptr, ##566
1dfe0     11 12 06 F6 | 	mov	arg01, #17
1dfe4     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1dfe8                 | ' setspritesize(17,8,16)
1dfe8     11 12 06 F6 | 	mov	arg01, #17
1dfec     08 14 06 F6 | 	mov	arg02, #8
1dff0     10 16 06 F6 | 	mov	arg03, #16
1dff4     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
1dff8                 | ' setspritepos(17,0,0)
1dff8     11 12 06 F6 | 	mov	arg01, #17
1dffc     00 14 06 F6 | 	mov	arg02, #0
1e000     00 16 06 F6 | 	mov	arg03, #0
1e004     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
1e008                 | ' cursorshape:=14
1e008     0B 00 00 FF 
1e00c     C6 E4 05 F1 | 	add	objptr, ##5830
1e010     F2 1C 68 FC | 	wrlong	#14, objptr
1e014                 | ' cursorcolor:=color
1e014     04 E4 85 F1 | 	sub	objptr, #4
1e018     F2 1E 62 FC | 	wrlong	local01, objptr
1e01c     0B 00 00 FF 
1e020     C2 E4 85 F1 | 	sub	objptr, ##5826
1e024     A7 F0 03 F6 | 	mov	ptra, fp
1e028     B2 00 A0 FD | 	call	#popregs_
1e02c                 | _hg010b_spin2_initcursor_ret
1e02c     2D 00 64 FD | 	ret
1e030                 | 
1e030                 | ' 
1e030                 | ' pub setcursorshape(shape) | i
1e030                 | _hg010b_spin2_setcursorshape
1e030                 | ' 
1e030                 | ' cursorshape:=shape
1e030     0B 00 00 FF 
1e034     C6 E4 05 F1 | 	add	objptr, ##5830
1e038     F2 12 62 FC | 	wrlong	arg01, objptr
1e03c                 | ' repeat i from 0 to (8*cursorshape)-1
1e03c     00 00 06 F6 | 	mov	_var01, #0
1e040     09 03 02 F6 | 	mov	_var02, arg01
1e044     03 02 66 F0 | 	shl	_var02, #3
1e048     01 02 86 F1 | 	sub	_var02, #1
1e04c     00 02 56 F2 | 	cmps	_var02, #0 wc
1e050     01 04 86 F6 | 	negc	_var03, #1
1e054     02 07 02 F6 | 	mov	_var04, _var03
1e058     02 03 02 F1 | 	add	_var02, _var03
1e05c     0A 00 00 FF 
1e060     90 E4 85 F1 | 	sub	objptr, ##5264
1e064     97 0C 48 FB | 	callpa	#(@LR__2381-@LR__2380)>>2,fcache_load_ptr_
1e068                 | LR__2380
1e068                 | '   cursor[i]:=0
1e068     00 05 02 F6 | 	mov	_var03, _var01
1e06c     F2 04 02 F1 | 	add	_var03, objptr
1e070     02 01 48 FC | 	wrbyte	#0, _var03
1e074     03 01 02 F1 | 	add	_var01, _var04
1e078     01 01 0A F2 | 	cmp	_var01, _var02 wz
1e07c     E8 FF 9F 5D |  if_ne	jmp	#LR__2380
1e080                 | LR__2381
1e080                 | ' repeat i from 8*cursorshape to 127
1e080     0A 00 00 FF 
1e084     90 E4 05 F1 | 	add	objptr, ##5264
1e088     F2 06 02 FB | 	rdlong	_var04, objptr
1e08c     03 01 02 F6 | 	mov	_var01, _var04
1e090     03 00 66 F0 | 	shl	_var01, #3
1e094     0B 00 00 FF 
1e098     C6 E4 85 F1 | 	sub	objptr, ##5830
1e09c     03 06 66 F0 | 	shl	_var04, #3
1e0a0     80 06 56 F2 | 	cmps	_var04, #128 wc
1e0a4     01 04 A6 F6 | 	negnc	_var03, #1
1e0a8     7F 02 06 F6 | 	mov	_var02, #127
1e0ac     02 03 02 F1 | 	add	_var02, _var03
1e0b0     97 1A 48 FB | 	callpa	#(@LR__2383-@LR__2382)>>2,fcache_load_ptr_
1e0b4                 | LR__2382
1e0b4                 | '   cursor[i]:=cursorcolor
1e0b4     00 07 02 F6 | 	mov	_var04, _var01
1e0b8     01 00 00 FF 
1e0bc     36 E4 05 F1 | 	add	objptr, ##566
1e0c0     F2 06 02 F1 | 	add	_var04, objptr
1e0c4     0A 00 00 FF 
1e0c8     8C E4 05 F1 | 	add	objptr, ##5260
1e0cc     F2 12 02 FB | 	rdlong	arg01, objptr
1e0d0     0B 00 00 FF 
1e0d4     C2 E4 85 F1 | 	sub	objptr, ##5826
1e0d8     03 13 42 FC | 	wrbyte	arg01, _var04
1e0dc     02 01 02 F1 | 	add	_var01, _var03
1e0e0     01 01 0A F2 | 	cmp	_var01, _var02 wz
1e0e4     CC FF 9F 5D |  if_ne	jmp	#LR__2382
1e0e8                 | LR__2383
1e0e8                 | _hg010b_spin2_setcursorshape_ret
1e0e8     2D 00 64 FD | 	ret
1e0ec                 | 
1e0ec                 | ' 
1e0ec                 | ' pub setcursorcolor(color) | i
1e0ec                 | _hg010b_spin2_setcursorcolor
1e0ec                 | ' 
1e0ec                 | ' cursorcolor:=color
1e0ec     0B 00 00 FF 
1e0f0     C2 E4 05 F1 | 	add	objptr, ##5826
1e0f4     F2 12 62 FC | 	wrlong	arg01, objptr
1e0f8                 | ' repeat i from 0 to (8*cursorshape)-1
1e0f8     00 12 06 F6 | 	mov	arg01, #0
1e0fc     04 E4 05 F1 | 	add	objptr, #4
1e100     F2 00 02 FB | 	rdlong	_var01, objptr
1e104     03 00 66 F0 | 	shl	_var01, #3
1e108     01 00 86 F1 | 	sub	_var01, #1
1e10c     00 00 56 F2 | 	cmps	_var01, #0 wc
1e110     01 02 86 F6 | 	negc	_var02, #1
1e114     01 05 02 F6 | 	mov	_var03, _var02
1e118     01 01 02 F1 | 	add	_var01, _var02
1e11c     0A 00 00 FF 
1e120     90 E4 85 F1 | 	sub	objptr, ##5264
1e124     97 0C 48 FB | 	callpa	#(@LR__2391-@LR__2390)>>2,fcache_load_ptr_
1e128                 | LR__2390
1e128                 | '   cursor[i]:=0
1e128     09 03 02 F6 | 	mov	_var02, arg01
1e12c     F2 02 02 F1 | 	add	_var02, objptr
1e130     01 01 48 FC | 	wrbyte	#0, _var02
1e134     02 13 02 F1 | 	add	arg01, _var03
1e138     00 13 0A F2 | 	cmp	arg01, _var01 wz
1e13c     E8 FF 9F 5D |  if_ne	jmp	#LR__2390
1e140                 | LR__2391
1e140                 | ' repeat i from 8*cursorshape to 127
1e140     0A 00 00 FF 
1e144     90 E4 05 F1 | 	add	objptr, ##5264
1e148     F2 04 02 FB | 	rdlong	_var03, objptr
1e14c     02 13 02 F6 | 	mov	arg01, _var03
1e150     03 12 66 F0 | 	shl	arg01, #3
1e154     0B 00 00 FF 
1e158     C6 E4 85 F1 | 	sub	objptr, ##5830
1e15c     03 04 66 F0 | 	shl	_var03, #3
1e160     80 04 56 F2 | 	cmps	_var03, #128 wc
1e164     01 02 A6 F6 | 	negnc	_var02, #1
1e168     7F 00 06 F6 | 	mov	_var01, #127
1e16c     01 01 02 F1 | 	add	_var01, _var02
1e170     97 1A 48 FB | 	callpa	#(@LR__2393-@LR__2392)>>2,fcache_load_ptr_
1e174                 | LR__2392
1e174                 | '   cursor[i]:=cursorcolor
1e174     09 05 02 F6 | 	mov	_var03, arg01
1e178     01 00 00 FF 
1e17c     36 E4 05 F1 | 	add	objptr, ##566
1e180     F2 04 02 F1 | 	add	_var03, objptr
1e184     0A 00 00 FF 
1e188     8C E4 05 F1 | 	add	objptr, ##5260
1e18c     F2 06 02 FB | 	rdlong	_var04, objptr
1e190     0B 00 00 FF 
1e194     C2 E4 85 F1 | 	sub	objptr, ##5826
1e198     02 07 42 FC | 	wrbyte	_var04, _var03
1e19c     01 13 02 F1 | 	add	arg01, _var02
1e1a0     00 13 0A F2 | 	cmp	arg01, _var01 wz
1e1a4     CC FF 9F 5D |  if_ne	jmp	#LR__2392
1e1a8                 | LR__2393
1e1a8                 | _hg010b_spin2_setcursorcolor_ret
1e1a8     2D 00 64 FD | 	ret
1e1ac                 | 
1e1ac                 | '   
1e1ac                 | '   
1e1ac                 | '   
1e1ac                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1e1ac                 | _hg010b_spin2_setmode
1e1ac     02 4A 05 F6 | 	mov	COUNT_, #2
1e1b0     A8 00 A0 FD | 	call	#pushregs_
1e1b4                 | ' 
1e1b4                 | ' 
1e1b4                 | ' dl_ptr:=@emptydl[0]
1e1b4     01 00 00 FF 
1e1b8     1D E4 05 F1 | 	add	objptr, ##541
1e1bc     F2 1A 02 F6 | 	mov	arg05, objptr
1e1c0     FD E5 85 F1 | 	sub	objptr, #509
1e1c4     F2 1A 62 FC | 	wrlong	arg05, objptr
1e1c8                 | ' 
1e1c8                 | ' if cog>0 
1e1c8     10 E4 05 F1 | 	add	objptr, #16
1e1cc     F2 1A 02 FB | 	rdlong	arg05, objptr
1e1d0     30 E4 85 F1 | 	sub	objptr, #48
1e1d4     01 1A 56 F2 | 	cmps	arg05, #1 wc
1e1d8                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1e1d8     01 12 06 36 |  if_ae	mov	arg01, #1
1e1dc     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1e1e0                 | ' xres:=1024
1e1e0     01 00 00 FF 
1e1e4     26 E4 05 F1 | 	add	objptr, ##550
1e1e8     02 00 80 FF 
1e1ec     F2 00 68 FC | 	wrlong	##1024, objptr
1e1f0                 | ' yres:=600
1e1f0     04 E4 05 F1 | 	add	objptr, #4
1e1f4     01 00 80 FF 
1e1f8     F2 B0 68 FC | 	wrlong	##600, objptr
1e1fc                 | ' ppl:=(timings[3])
1e1fc     10 00 00 FF 
1e200     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1e204     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1e208     51 E5 85 F1 | 	sub	objptr, #337
1e20c     F2 1A 62 FC | 	wrlong	arg05, objptr
1e210                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1e210     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1e214     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1e218     01 1E 66 F0 | 	shl	local01, #1
1e21c     80 E4 85 F1 | 	sub	objptr, #128
1e220     F2 1E 62 FC | 	wrlong	local01, objptr
1e224                 | ' cpl1:=cpl '' todo remove
1e224     04 E4 05 F1 | 	add	objptr, #4
1e228     F2 1E 62 FC | 	wrlong	local01, objptr
1e22c                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1e22c     02 00 00 FF 
1e230     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1e234     41 E4 85 F1 | 	sub	objptr, #65
1e238     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1e23c                 | ' repeat i from 0 to 3
1e23c     00 20 06 F6 | 	mov	local02, #0
1e240     02 00 00 FF 
1e244     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1e248     08 E4 05 F1 | 	add	objptr, #8
1e24c     97 20 48 FB | 	callpa	#(@LR__2401-@LR__2400)>>2,fcache_load_ptr_
1e250                 | LR__2400
1e250                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1e250     10 1F 02 F6 | 	mov	local01, local02
1e254     02 1E 66 F0 | 	shl	local01, #2
1e258     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1e25c     F2 1A 02 FB | 	rdlong	arg05, objptr
1e260     11 1A 66 F0 | 	shl	arg05, #17
1e264     0F 1F 02 FB | 	rdlong	local01, local01
1e268     0D 1F 02 F1 | 	add	local01, arg05
1e26c     80 40 38 FF 
1e270     00 1E 06 F1 | 	add	local01, ##1887502336
1e274     10 1B 02 F6 | 	mov	arg05, local02
1e278     02 1A 66 F0 | 	shl	arg05, #2
1e27c     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
1e280     0D 1F 62 FC | 	wrlong	local01, arg05
1e284     01 20 06 F1 | 	add	local02, #1
1e288     04 20 56 F2 | 	cmps	local02, #4 wc
1e28c     C0 FF 9F CD |  if_b	jmp	#LR__2400
1e290                 | LR__2401
1e290     24 E4 85 F1 | 	sub	objptr, #36
1e294                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
1e294     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1e298     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1e29c     14 1E 66 FC | 	wrlong	local01, #20
1e2a0                 | ' hubset(timings[10])
1e2a0     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
1e2a4     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1e2a8     10 00 00 FF 
1e2ac     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
1e2b0     00 12 62 FD | 	hubset	arg01
1e2b4                 | ' waitms(1)                                                   	' wait for stabilization
1e2b4     01 12 06 F6 | 	mov	arg01, #1
1e2b8     60 29 B0 FD | 	call	#__system___waitms
1e2bc     10 00 00 FF 
1e2c0     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1e2c4     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1e2c8     61 E4 05 F1 | 	add	objptr, #97
1e2cc     F2 20 62 FC | 	wrlong	local02, objptr
1e2d0     10 1F 52 F6 | 	abs	local01, local02 wc
1e2d4     04 1E 46 F0 | 	shr	local01, #4
1e2d8     0F 1F 82 F6 | 	negc	local01, local01
1e2dc     9C E4 05 F1 | 	add	objptr, #156
1e2e0     F2 1E 62 FC | 	wrlong	local01, objptr
1e2e4     A4 E4 85 F1 | 	sub	objptr, #164
1e2e8     F2 20 02 FB | 	rdlong	local02, objptr
1e2ec     08 E4 05 F1 | 	add	objptr, #8
1e2f0     F2 1E 02 FB | 	rdlong	local01, objptr
1e2f4     0F 21 02 FD | 	qmul	local02, local01
1e2f8                 | ' lines:=timings[11]
1e2f8                 | ' t_lines:=lines/16
1e2f8                 | ' buflen:=cpl*lines						' framebuffer length in longs
1e2f8     29 E4 85 F1 | 	sub	objptr, #41
1e2fc     19 1E C6 F9 | 	decod	local01, #25
1e300     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
1e304     18 20 62 FD | 	getqx	local02
1e308     F2 20 62 FC | 	wrlong	local02, objptr
1e30c     38 E4 85 F1 | 	sub	objptr, #56
1e310     02 20 66 F0 | 	shl	local02, #2
1e314     10 1F 82 F1 | 	sub	local01, local02
1e318     F2 1E 62 FC | 	wrlong	local01, objptr
1e31c     FD E4 05 F1 | 	add	objptr, #253
1e320     F2 20 02 FB | 	rdlong	local02, objptr
1e324     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1e328     0D 21 02 FD | 	qmul	local02, arg05
1e32c                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1e32c                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
1e32c     F9 E4 85 F1 | 	sub	objptr, #249
1e330                 | ' mode_ptr:=@timings						' set pointers to timings
1e330     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
1e334                 | ' graphmode:=1024+512+192+48							' det global variable
1e334                 | ' makedl(graphmode)							' make a DL for the mode
1e334     03 00 00 FF 
1e338     F0 12 06 F6 | 	mov	arg01, ##1776
1e33c     18 20 62 FD | 	getqx	local02
1e340     10 1F 82 F1 | 	sub	local01, local02
1e344     F2 1E 62 FC | 	wrlong	local01, objptr
1e348     14 E4 05 F1 | 	add	objptr, #20
1e34c     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1e350     79 E4 05 F1 | 	add	objptr, #121
1e354     03 00 80 FF 
1e358     F2 E0 69 FC | 	wrlong	##1776, objptr
1e35c     91 E4 85 F1 | 	sub	objptr, #145
1e360     10 00 00 FF 
1e364     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1e368     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
1e36c                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1e36c     F2 1E 02 FB | 	rdlong	local01, objptr
1e370     DD E4 05 F1 | 	add	objptr, #221
1e374     F2 1E 62 FC | 	wrlong	local01, objptr
1e378                 | ' s_font_ptr:=font_ptr
1e378     D5 E4 85 F1 | 	sub	objptr, #213
1e37c     F2 1E 02 FB | 	rdlong	local01, objptr
1e380     D9 E4 05 F1 | 	add	objptr, #217
1e384     F2 1E 62 FC | 	wrlong	local01, objptr
1e388                 | ' s_lines:=lines
1e388     80 E4 85 F1 | 	sub	objptr, #128
1e38c     F2 1E 02 FB | 	rdlong	local01, objptr
1e390     84 E4 05 F1 | 	add	objptr, #132
1e394     F2 1E 62 FC | 	wrlong	local01, objptr
1e398                 | ' s_buflen:=buflen
1e398     AD E4 85 F1 | 	sub	objptr, #173
1e39c     F2 1E 02 FB | 	rdlong	local01, objptr
1e3a0     B5 E4 05 F1 | 	add	objptr, #181
1e3a4     F2 1E 62 FC | 	wrlong	local01, objptr
1e3a8                 | ' s_cpl:=cpl
1e3a8     94 E4 85 F1 | 	sub	objptr, #148
1e3ac     F2 1E 02 FB | 	rdlong	local01, objptr
1e3b0     90 E4 05 F1 | 	add	objptr, #144
1e3b4     F2 1E 62 FC | 	wrlong	local01, objptr
1e3b8                 | ' s_cpl1:=cpl
1e3b8     90 E4 85 F1 | 	sub	objptr, #144
1e3bc     F2 1E 02 FB | 	rdlong	local01, objptr
1e3c0     98 E4 05 F1 | 	add	objptr, #152
1e3c4     F2 1E 62 FC | 	wrlong	local01, objptr
1e3c8                 | ' st_lines:=t_lines
1e3c8     0C E4 05 F1 | 	add	objptr, #12
1e3cc     F2 1E 02 FB | 	rdlong	local01, objptr
1e3d0     04 E4 05 F1 | 	add	objptr, #4
1e3d4     F2 1E 62 FC | 	wrlong	local01, objptr
1e3d8                 | ' ppl:=ppl/xzoom  
1e3d8     28 E4 85 F1 | 	sub	objptr, #40
1e3dc     F2 64 02 FB | 	rdlong	muldiva_, objptr
1e3e0     2C E4 05 F1 | 	add	objptr, #44
1e3e4     F2 66 02 FB | 	rdlong	muldivb_, objptr
1e3e8     05 E5 85 F1 | 	sub	objptr, #261
1e3ec     BA 00 A0 FD | 	call	#divide_
1e3f0     D9 E4 05 F1 | 	add	objptr, #217
1e3f4     F2 66 62 FC | 	wrlong	muldivb_, objptr
1e3f8                 | ' s_ppl:=ppl
1e3f8     1C E4 05 F1 | 	add	objptr, #28
1e3fc     F2 66 62 FC | 	wrlong	muldivb_, objptr
1e400     F5 E4 85 F1 | 	sub	objptr, #245
1e404                 | ' waitms(20)							' wait 
1e404     14 12 06 F6 | 	mov	arg01, #20
1e408     10 28 B0 FD | 	call	#__system___waitms
1e40c                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1e40c     04 E4 05 F1 | 	add	objptr, #4
1e410     F2 12 02 FB | 	rdlong	arg01, objptr
1e414     04 E4 85 F1 | 	sub	objptr, #4
1e418     F2 16 02 FB | 	rdlong	arg03, objptr
1e41c     09 17 82 F1 | 	sub	arg03, arg01
1e420     20 14 06 F6 | 	mov	arg02, #32
1e424     00 18 06 F6 | 	mov	arg04, #0
1e428     01 1A 06 F6 | 	mov	arg05, #1
1e42c     0B 00 00 FF 
1e430     CC E4 05 F1 | 	add	objptr, ##5836
1e434     E8 19 B0 FD | 	call	#_psram_spin2_fill
1e438     0B 00 00 FF 
1e43c     CC E4 85 F1 | 	sub	objptr, ##5836
1e440     A7 F0 03 F6 | 	mov	ptra, fp
1e444     B2 00 A0 FD | 	call	#popregs_
1e448                 | _hg010b_spin2_setmode_ret
1e448     2D 00 64 FD | 	ret
1e44c                 | 
1e44c                 | ' 
1e44c                 | ' '****************************************************************************************************************
1e44c                 | ' '                                                                                                             	*
1e44c                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1e44c                 | ' '                                                                                                             	*
1e44c                 | ' '****************************************************************************************************************
1e44c                 | ' 
1e44c                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1e44c                 | _hg010b_spin2_makedl
1e44c                 | ' 
1e44c                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1e44c                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1e44c                 | ' repeat i from 0 to 11                                                           ' clear DL
1e44c     00 00 06 F6 | 	mov	_var01, #0
1e450     ED E5 05 F1 | 	add	objptr, #493
1e454     97 0E 48 FB | 	callpa	#(@LR__2411-@LR__2410)>>2,fcache_load_ptr_
1e458                 | LR__2410
1e458                 | '   displaylist[i]:=0 
1e458     00 03 02 F6 | 	mov	_var02, _var01
1e45c     02 02 66 F0 | 	shl	_var02, #2
1e460     F2 02 02 F1 | 	add	_var02, objptr
1e464     01 01 68 FC | 	wrlong	#0, _var02
1e468     01 00 06 F1 | 	add	_var01, #1
1e46c     0C 00 56 F2 | 	cmps	_var01, #12 wc
1e470     E4 FF 9F CD |  if_b	jmp	#LR__2410
1e474                 | LR__2411
1e474                 | '                         ' 
1e474                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1e474     8C E5 85 F1 | 	sub	objptr, #396
1e478     F2 02 02 FB | 	rdlong	_var02, objptr
1e47c     14 02 66 F0 | 	shl	_var02, #20
1e480     01 02 06 F1 | 	add	_var02, #1
1e484     04 E4 85 F1 | 	sub	objptr, #4
1e488     F2 00 02 FB | 	rdlong	_var01, objptr
1e48c     02 00 66 F0 | 	shl	_var01, #2
1e490     04 00 66 F0 | 	shl	_var01, #4
1e494     00 03 02 F1 | 	add	_var02, _var01
1e498     90 E5 05 F1 | 	add	objptr, #400
1e49c     F2 02 62 FC | 	wrlong	_var02, objptr
1e4a0     ED E5 85 F1 | 	sub	objptr, #493
1e4a4                 | ' displaylist[1]:=buf_ptr<<4+%10  
1e4a4     F2 02 02 FB | 	rdlong	_var02, objptr
1e4a8     04 02 66 F0 | 	shl	_var02, #4
1e4ac     02 02 06 F1 | 	add	_var02, #2
1e4b0     F1 E5 05 F1 | 	add	objptr, #497
1e4b4     F2 02 62 FC | 	wrlong	_var02, objptr
1e4b8                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1e4b8     04 E4 85 F1 | 	sub	objptr, #4
1e4bc     F2 02 02 F6 | 	mov	_var02, objptr
1e4c0     CD E5 85 F1 | 	sub	objptr, #461
1e4c4     F2 02 62 FC | 	wrlong	_var02, objptr
1e4c8     20 E4 85 F1 | 	sub	objptr, #32
1e4cc                 | _hg010b_spin2_makedl_ret
1e4cc     2D 00 64 FD | 	ret
1e4d0                 | 
1e4d0                 | ' 
1e4d0                 | ' 
1e4d0                 | ' '****************************************************************************************************************
1e4d0                 | ' '                                                                        					*
1e4d0                 | ' '  Graphic primitives                                                    					*
1e4d0                 | ' '                                                                        					*
1e4d0                 | ' '****************************************************************************************************************
1e4d0                 | ' 
1e4d0                 | ' pub setspriteptr(num,ptr)
1e4d0                 | _hg010b_spin2_setspriteptr
1e4d0                 | ' long[@spr1ptr+12*num]:=ptr
1e4d0     11 E5 05 F1 | 	add	objptr, #273
1e4d4     F2 00 02 F6 | 	mov	_var01, objptr
1e4d8     09 03 02 F6 | 	mov	_var02, arg01
1e4dc     01 02 66 F0 | 	shl	_var02, #1
1e4e0     09 03 02 F1 | 	add	_var02, arg01
1e4e4     02 02 66 F0 | 	shl	_var02, #2
1e4e8     01 01 02 F1 | 	add	_var01, _var02
1e4ec     00 15 62 FC | 	wrlong	arg02, _var01
1e4f0     11 E5 85 F1 | 	sub	objptr, #273
1e4f4                 | _hg010b_spin2_setspriteptr_ret
1e4f4     2D 00 64 FD | 	ret
1e4f8                 | 
1e4f8                 | ' 
1e4f8                 | ' pub setspritepos(num,x,y)
1e4f8                 | _hg010b_spin2_setspritepos
1e4f8                 | ' if y>601
1e4f8     01 00 00 FF 
1e4fc     5A 16 56 F2 | 	cmps	arg03, ##602 wc
1e500                 | '   y:=601
1e500     01 00 00 3F 
1e504     59 16 06 36 |  if_ae	mov	arg03, ##601
1e508                 | ' if x>1024
1e508     02 00 00 FF 
1e50c     01 14 56 F2 | 	cmps	arg02, ##1025 wc
1e510                 | '   x:=1024
1e510     0A 14 C6 39 |  if_ae	decod	arg02, #10
1e514                 | ' word[@spr1ptr+12*num+4]:=x
1e514     11 E5 05 F1 | 	add	objptr, #273
1e518     F2 00 02 F6 | 	mov	_var01, objptr
1e51c     09 03 02 F6 | 	mov	_var02, arg01
1e520     01 02 66 F0 | 	shl	_var02, #1
1e524     09 03 02 F1 | 	add	_var02, arg01
1e528     02 02 66 F0 | 	shl	_var02, #2
1e52c     01 01 02 F1 | 	add	_var01, _var02
1e530     04 00 06 F1 | 	add	_var01, #4
1e534     00 15 52 FC | 	wrword	arg02, _var01
1e538                 | ' word[@spr1ptr+12*num+6]:=y
1e538     F2 00 02 F6 | 	mov	_var01, objptr
1e53c     09 03 02 F6 | 	mov	_var02, arg01
1e540     01 02 66 F0 | 	shl	_var02, #1
1e544     09 03 02 F1 | 	add	_var02, arg01
1e548     02 02 66 F0 | 	shl	_var02, #2
1e54c     01 01 02 F1 | 	add	_var01, _var02
1e550     06 00 06 F1 | 	add	_var01, #6
1e554     00 17 52 FC | 	wrword	arg03, _var01
1e558     11 E5 85 F1 | 	sub	objptr, #273
1e55c                 | _hg010b_spin2_setspritepos_ret
1e55c     2D 00 64 FD | 	ret
1e560                 | 
1e560                 | ' 
1e560                 | ' pub setspritesize(num,w,h)
1e560                 | _hg010b_spin2_setspritesize
1e560                 | ' word[@spr1ptr+12*num+8]:=w
1e560     11 E5 05 F1 | 	add	objptr, #273
1e564     F2 00 02 F6 | 	mov	_var01, objptr
1e568     09 03 02 F6 | 	mov	_var02, arg01
1e56c     01 02 66 F0 | 	shl	_var02, #1
1e570     09 03 02 F1 | 	add	_var02, arg01
1e574     02 02 66 F0 | 	shl	_var02, #2
1e578     01 01 02 F1 | 	add	_var01, _var02
1e57c     08 00 06 F1 | 	add	_var01, #8
1e580     00 15 52 FC | 	wrword	arg02, _var01
1e584                 | ' word[@spr1ptr+12*num+10]:=h
1e584     F2 00 02 F6 | 	mov	_var01, objptr
1e588     09 03 02 F6 | 	mov	_var02, arg01
1e58c     01 02 66 F0 | 	shl	_var02, #1
1e590     09 03 02 F1 | 	add	_var02, arg01
1e594     02 02 66 F0 | 	shl	_var02, #2
1e598     01 01 02 F1 | 	add	_var01, _var02
1e59c     0A 00 06 F1 | 	add	_var01, #10
1e5a0     00 17 52 FC | 	wrword	arg03, _var01
1e5a4     11 E5 85 F1 | 	sub	objptr, #273
1e5a8                 | _hg010b_spin2_setspritesize_ret
1e5a8     2D 00 64 FD | 	ret
1e5ac                 | 
1e5ac                 | ' 
1e5ac                 | ' 
1e5ac                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1e5ac                 | ' 
1e5ac                 | ' 
1e5ac                 | ' pub putpixel(x,y,c)
1e5ac                 | _hg010b_spin2_putpixel
1e5ac     04 4A 05 F6 | 	mov	COUNT_, #4
1e5b0     A8 00 A0 FD | 	call	#pushregs_
1e5b4     09 1F 02 F6 | 	mov	local01, arg01
1e5b8                 | ' 
1e5b8                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1e5b8     00 20 06 F6 | 	mov	local02, #0
1e5bc     00 1E 56 F2 | 	cmps	local01, #0 wc
1e5c0     01 20 66 36 |  if_ae	neg	local02, #1
1e5c4     E9 E4 05 F1 | 	add	objptr, #233
1e5c8     F2 1A 02 FB | 	rdlong	arg05, objptr
1e5cc     02 1A 66 F0 | 	shl	arg05, #2
1e5d0     0D 1F 52 F2 | 	cmps	local01, arg05 wc
1e5d4     11 23 A2 F1 | 	subx	local03, local03
1e5d8     11 21 02 F5 | 	and	local02, local03
1e5dc     00 22 06 F6 | 	mov	local03, #0
1e5e0     00 14 56 F2 | 	cmps	arg02, #0 wc
1e5e4     01 22 66 36 |  if_ae	neg	local03, #1
1e5e8     11 21 02 F5 | 	and	local02, local03
1e5ec     04 E4 85 F1 | 	sub	objptr, #4
1e5f0     F2 22 02 FB | 	rdlong	local03, objptr
1e5f4     E5 E4 85 F1 | 	sub	objptr, #229
1e5f8     11 15 52 F2 | 	cmps	arg02, local03 wc
1e5fc     12 25 A2 F1 | 	subx	local04, local04
1e600     12 21 CA F7 | 	test	local02, local04 wz
1e604     48 00 90 AD |  if_e	jmp	#LR__2420
1e608     DD E4 05 F1 | 	add	objptr, #221
1e60c     F2 12 02 FB | 	rdlong	arg01, objptr
1e610     14 E4 05 F1 | 	add	objptr, #20
1e614     F2 24 02 FB | 	rdlong	local04, objptr
1e618     02 24 66 F0 | 	shl	local04, #2
1e61c     0A 25 02 FD | 	qmul	local04, arg02
1e620                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1e620     0B 15 02 F6 | 	mov	arg02, arg03
1e624     01 16 06 F6 | 	mov	arg03, #1
1e628     00 18 06 F6 | 	mov	arg04, #0
1e62c     01 1A 06 F6 | 	mov	arg05, #1
1e630     0A 00 00 FF 
1e634     DB E5 05 F1 | 	add	objptr, ##5595
1e638     18 24 62 FD | 	getqx	local04
1e63c     0F 25 02 F1 | 	add	local04, local01
1e640     12 13 02 F1 | 	add	arg01, local04
1e644     D8 17 B0 FD | 	call	#_psram_spin2_fill
1e648     0B 00 00 FF 
1e64c     CC E4 85 F1 | 	sub	objptr, ##5836
1e650                 | LR__2420
1e650     A7 F0 03 F6 | 	mov	ptra, fp
1e654     B2 00 A0 FD | 	call	#popregs_
1e658                 | _hg010b_spin2_putpixel_ret
1e658     2D 00 64 FD | 	ret
1e65c                 | 
1e65c                 | ' 
1e65c                 | ' pub putpixel2(x,y,c)
1e65c                 | _hg010b_spin2_putpixel2
1e65c     02 4A 05 F6 | 	mov	COUNT_, #2
1e660     A8 00 A0 FD | 	call	#pushregs_
1e664     DD E4 05 F1 | 	add	objptr, #221
1e668     F2 1E 02 FB | 	rdlong	local01, objptr
1e66c     14 E4 05 F1 | 	add	objptr, #20
1e670     F2 1A 02 FB | 	rdlong	arg05, objptr
1e674     02 1A 66 F0 | 	shl	arg05, #2
1e678     0A 1B 02 FD | 	qmul	arg05, arg02
1e67c                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1e67c     0B 15 02 F6 | 	mov	arg02, arg03
1e680     01 16 06 F6 | 	mov	arg03, #1
1e684     00 18 06 F6 | 	mov	arg04, #0
1e688     01 1A 06 F6 | 	mov	arg05, #1
1e68c     0A 00 00 FF 
1e690     DB E5 05 F1 | 	add	objptr, ##5595
1e694     18 20 62 FD | 	getqx	local02
1e698     09 21 02 F1 | 	add	local02, arg01
1e69c     10 1F 02 F1 | 	add	local01, local02
1e6a0     0F 13 02 F6 | 	mov	arg01, local01
1e6a4     78 17 B0 FD | 	call	#_psram_spin2_fill
1e6a8     0B 00 00 FF 
1e6ac     CC E4 85 F1 | 	sub	objptr, ##5836
1e6b0     A7 F0 03 F6 | 	mov	ptra, fp
1e6b4     B2 00 A0 FD | 	call	#popregs_
1e6b8                 | _hg010b_spin2_putpixel2_ret
1e6b8     2D 00 64 FD | 	ret
1e6bc                 | 
1e6bc                 | ' 
1e6bc                 | ' pub getpixel2(x,y): c 
1e6bc                 | _hg010b_spin2_getpixel2
1e6bc     02 4A 05 F6 | 	mov	COUNT_, #2
1e6c0     A8 00 A0 FD | 	call	#pushregs_
1e6c4     0C F0 07 F1 | 	add	ptra, #12
1e6c8     04 4E 05 F1 | 	add	fp, #4
1e6cc     A7 12 62 FC | 	wrlong	arg01, fp
1e6d0     04 4E 05 F1 | 	add	fp, #4
1e6d4     A7 14 62 FC | 	wrlong	arg02, fp
1e6d8     08 4E 85 F1 | 	sub	fp, #8
1e6dc     A7 00 68 FC | 	wrlong	#0, fp
1e6e0     A7 12 02 F6 | 	mov	arg01, fp
1e6e4     DD E4 05 F1 | 	add	objptr, #221
1e6e8     F2 14 02 FB | 	rdlong	arg02, objptr
1e6ec     14 E4 05 F1 | 	add	objptr, #20
1e6f0     F2 16 02 FB | 	rdlong	arg03, objptr
1e6f4     02 16 66 F0 | 	shl	arg03, #2
1e6f8     08 4E 05 F1 | 	add	fp, #8
1e6fc     A7 FA 01 FB | 	rdlong	result1, fp
1e700     FD 16 02 FD | 	qmul	arg03, result1
1e704                 | ' 
1e704                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1e704     04 4E 85 F1 | 	sub	fp, #4
1e708     A7 1E 02 FB | 	rdlong	local01, fp
1e70c     04 4E 85 F1 | 	sub	fp, #4
1e710     01 16 06 F6 | 	mov	arg03, #1
1e714     0A 00 00 FF 
1e718     DB E5 05 F1 | 	add	objptr, ##5595
1e71c     18 20 62 FD | 	getqx	local02
1e720     0F 21 02 F1 | 	add	local02, local01
1e724     10 15 02 F1 | 	add	arg02, local02
1e728     BC 15 B0 FD | 	call	#_psram_spin2_read1
1e72c     0B 00 00 FF 
1e730     CC E4 85 F1 | 	sub	objptr, ##5836
1e734                 | ' return c
1e734     A7 FA 01 FB | 	rdlong	result1, fp
1e738     A7 F0 03 F6 | 	mov	ptra, fp
1e73c     B2 00 A0 FD | 	call	#popregs_
1e740                 | _hg010b_spin2_getpixel2_ret
1e740     2D 00 64 FD | 	ret
1e744                 | 
1e744                 | '   
1e744                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1e744                 | ' 
1e744                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1e744                 | _hg010b_spin2_fastline
1e744     02 4A 05 F6 | 	mov	COUNT_, #2
1e748     A8 00 A0 FD | 	call	#pushregs_
1e74c     09 1F 02 F6 | 	mov	local01, arg01
1e750     0A 21 02 F6 | 	mov	local02, arg02
1e754                 | ' 
1e754                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1e754     00 16 56 F2 | 	cmps	arg03, #0 wc
1e758     F4 00 90 CD |  if_b	jmp	#LR__2430
1e75c     01 00 00 FF 
1e760     2A E4 05 F1 | 	add	objptr, ##554
1e764     F2 1A 02 FB | 	rdlong	arg05, objptr
1e768     01 00 00 FF 
1e76c     2A E4 85 F1 | 	sub	objptr, ##554
1e770     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1e774     D8 00 90 3D |  if_ae	jmp	#LR__2430
1e778     00 1E 56 F2 | 	cmps	local01, #0 wc
1e77c     00 20 56 C2 |  if_b	cmps	local02, #0 wc
1e780     CC 00 90 CD |  if_b	jmp	#LR__2430
1e784     01 00 00 FF 
1e788     26 E4 05 F1 | 	add	objptr, ##550
1e78c     F2 1A 02 FB | 	rdlong	arg05, objptr
1e790     01 00 00 FF 
1e794     26 E4 85 F1 | 	sub	objptr, ##550
1e798     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1e79c     01 00 00 1F 
1e7a0     26 E4 05 11 |  if_a	add	objptr, ##550
1e7a4     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1e7a8     01 00 00 1F 
1e7ac     26 E4 85 11 |  if_a	sub	objptr, ##550
1e7b0     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
1e7b4                 | '   return
1e7b4     98 00 90 1D |  if_a	jmp	#LR__2430
1e7b8     10 1F 5A F2 | 	cmps	local01, local02 wcz
1e7bc     0F 1B 02 16 |  if_a	mov	arg05, local01
1e7c0     10 1F 02 16 |  if_a	mov	local01, local02
1e7c4     0D 21 02 16 |  if_a	mov	local02, arg05
1e7c8     00 1E 56 F2 | 	cmps	local01, #0 wc
1e7cc     00 1E 06 C6 |  if_b	mov	local01, #0
1e7d0     01 00 00 FF 
1e7d4     26 E4 05 F1 | 	add	objptr, ##550
1e7d8     F2 1A 02 FB | 	rdlong	arg05, objptr
1e7dc     01 00 00 FF 
1e7e0     26 E4 85 F1 | 	sub	objptr, ##550
1e7e4     0D 21 52 F2 | 	cmps	local02, arg05 wc
1e7e8     01 00 00 3F 
1e7ec     26 E4 05 31 |  if_ae	add	objptr, ##550
1e7f0     F2 20 02 3B |  if_ae	rdlong	local02, objptr
1e7f4     01 00 00 3F 
1e7f8     26 E4 85 31 |  if_ae	sub	objptr, ##550
1e7fc     DD E4 05 F1 | 	add	objptr, #221
1e800     F2 12 02 FB | 	rdlong	arg01, objptr
1e804     14 E4 05 F1 | 	add	objptr, #20
1e808     F2 1A 02 FB | 	rdlong	arg05, objptr
1e80c     02 1A 66 F0 | 	shl	arg05, #2
1e810     0B 1B 02 FD | 	qmul	arg05, arg03
1e814                 | ' if x1>x2
1e814                 | '   x1,x2:=x2,x1
1e814                 | ' if x1<0 
1e814                 | '   x1:=0
1e814                 | ' if x2>=xres
1e814                 | '   x2:=xres-1  
1e814     01 20 86 31 |  if_ae	sub	local02, #1
1e818                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1e818     01 16 06 F6 | 	mov	arg03, #1
1e81c     10 17 02 F1 | 	add	arg03, local02
1e820     0F 17 82 F1 | 	sub	arg03, local01
1e824     0C 15 02 F6 | 	mov	arg02, arg04
1e828     00 18 06 F6 | 	mov	arg04, #0
1e82c     01 1A 06 F6 | 	mov	arg05, #1
1e830     0A 00 00 FF 
1e834     DB E5 05 F1 | 	add	objptr, ##5595
1e838     18 20 62 FD | 	getqx	local02
1e83c     0F 21 02 F1 | 	add	local02, local01
1e840     10 13 02 F1 | 	add	arg01, local02
1e844     D8 15 B0 FD | 	call	#_psram_spin2_fill
1e848     0B 00 00 FF 
1e84c     CC E4 85 F1 | 	sub	objptr, ##5836
1e850                 | LR__2430
1e850     A7 F0 03 F6 | 	mov	ptra, fp
1e854     B2 00 A0 FD | 	call	#popregs_
1e858                 | _hg010b_spin2_fastline_ret
1e858     2D 00 64 FD | 	ret
1e85c                 | 
1e85c                 | ' 
1e85c                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1e85c                 | _hg010b_spin2_draw
1e85c     0E 4A 05 F6 | 	mov	COUNT_, #14
1e860     A8 00 A0 FD | 	call	#pushregs_
1e864     09 1F 02 F6 | 	mov	local01, arg01
1e868     0A 21 02 F6 | 	mov	local02, arg02
1e86c     0B 23 02 F6 | 	mov	local03, arg03
1e870     0C 25 02 F6 | 	mov	local04, arg04
1e874     0D 27 02 F6 | 	mov	local05, arg05
1e878                 | ' 
1e878                 | ' if (y1==y2)
1e878     12 21 0A F2 | 	cmp	local02, local04 wz
1e87c     18 00 90 5D |  if_ne	jmp	#LR__2440
1e880                 | '   fastline(x1,x2,y1,c)
1e880     0F 13 02 F6 | 	mov	arg01, local01
1e884     11 15 02 F6 | 	mov	arg02, local03
1e888     10 17 02 F6 | 	mov	arg03, local02
1e88c     13 19 02 F6 | 	mov	arg04, local05
1e890     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1e894     F8 00 90 FD | 	jmp	#LR__2446
1e898                 | LR__2440
1e898                 | ' else  
1e898                 | '   x:=x1
1e898     0F 29 02 F6 | 	mov	local06, local01
1e89c                 | '   y:=y1
1e89c     10 2B 02 F6 | 	mov	local07, local02
1e8a0                 | ' 
1e8a0                 | '   if (x1<x2) 
1e8a0     11 1F 52 F2 | 	cmps	local01, local03 wc
1e8a4                 | '     xi:=1
1e8a4     01 2C 06 C6 |  if_b	mov	local08, #1
1e8a8                 | '     dx:=x2-x1
1e8a8     11 2F 02 C6 |  if_b	mov	local09, local03
1e8ac     0F 2F 82 C1 |  if_b	sub	local09, local01
1e8b0                 | '   else
1e8b0                 | '     xi:=-1
1e8b0     01 2C 66 36 |  if_ae	neg	local08, #1
1e8b4                 | '     dx:=x1-x2
1e8b4     11 1F 82 31 |  if_ae	sub	local01, local03
1e8b8     0F 2F 02 36 |  if_ae	mov	local09, local01
1e8bc                 | '   
1e8bc                 | '   if (y1<y2) 
1e8bc     12 21 52 F2 | 	cmps	local02, local04 wc
1e8c0                 | '     yi:=1
1e8c0     01 30 06 C6 |  if_b	mov	local10, #1
1e8c4                 | '     dy:=y2-y1
1e8c4     12 33 02 C6 |  if_b	mov	local11, local04
1e8c8     10 33 82 C1 |  if_b	sub	local11, local02
1e8cc                 | '   else
1e8cc                 | '     yi:=-1
1e8cc     01 30 66 36 |  if_ae	neg	local10, #1
1e8d0                 | '     dy:=y1-y2
1e8d0     12 21 82 31 |  if_ae	sub	local02, local04
1e8d4     10 33 02 36 |  if_ae	mov	local11, local02
1e8d8                 | ' 
1e8d8                 | '   putpixel(x,y,c)
1e8d8     13 17 02 F6 | 	mov	arg03, local05
1e8dc     14 13 02 F6 | 	mov	arg01, local06
1e8e0     15 15 02 F6 | 	mov	arg02, local07
1e8e4     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e8e8                 | ' 
1e8e8                 | '   if (dx>dy)
1e8e8     19 2F 5A F2 | 	cmps	local09, local11 wcz
1e8ec     50 00 90 ED |  if_be	jmp	#LR__2442
1e8f0                 | '     ai:=(dy-dx)*2
1e8f0     19 35 02 F6 | 	mov	local12, local11
1e8f4     17 35 82 F1 | 	sub	local12, local09
1e8f8     01 34 66 F0 | 	shl	local12, #1
1e8fc                 | '     bi:=dy*2
1e8fc     01 32 66 F0 | 	shl	local11, #1
1e900     19 37 02 F6 | 	mov	local13, local11
1e904                 | '     d:= bi-dx
1e904     1B 39 02 F6 | 	mov	local14, local13
1e908     17 39 82 F1 | 	sub	local14, local09
1e90c                 | '     repeat while (x<>x2) 
1e90c                 | LR__2441
1e90c     11 29 0A F2 | 	cmp	local06, local03 wz
1e910     7C 00 90 AD |  if_e	jmp	#LR__2445
1e914                 | '       if (d>=0) 
1e914     00 38 56 F2 | 	cmps	local14, #0 wc
1e918                 | '         x+=xi
1e918     16 29 02 31 |  if_ae	add	local06, local08
1e91c                 | '         y+=yi
1e91c     18 2B 02 31 |  if_ae	add	local07, local10
1e920                 | '         d+=ai
1e920     1A 39 02 31 |  if_ae	add	local14, local12
1e924                 | '       else
1e924                 | '         d+=bi
1e924     1B 39 02 C1 |  if_b	add	local14, local13
1e928                 | '         x+=xi
1e928     16 29 02 C1 |  if_b	add	local06, local08
1e92c                 | '       putpixel(x,y,c)
1e92c     14 13 02 F6 | 	mov	arg01, local06
1e930     15 15 02 F6 | 	mov	arg02, local07
1e934     13 17 02 F6 | 	mov	arg03, local05
1e938     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e93c     CC FF 9F FD | 	jmp	#LR__2441
1e940                 | LR__2442
1e940                 | '   else
1e940                 | '     ai:=(dx-dy)*2
1e940     17 35 02 F6 | 	mov	local12, local09
1e944     19 35 82 F1 | 	sub	local12, local11
1e948     01 34 66 F0 | 	shl	local12, #1
1e94c                 | '     bi:=dx*2
1e94c     01 2E 66 F0 | 	shl	local09, #1
1e950     17 37 02 F6 | 	mov	local13, local09
1e954                 | '     d:=bi-dy
1e954     1B 39 02 F6 | 	mov	local14, local13
1e958     19 39 82 F1 | 	sub	local14, local11
1e95c                 | '     repeat while (y<>y2)
1e95c                 | LR__2443
1e95c     12 2B 0A F2 | 	cmp	local07, local04 wz
1e960     2C 00 90 AD |  if_e	jmp	#LR__2444
1e964                 | '       if (d>=0)
1e964     00 38 56 F2 | 	cmps	local14, #0 wc
1e968                 | '         x+=xi
1e968     16 29 02 31 |  if_ae	add	local06, local08
1e96c                 | '         y+=yi
1e96c     18 2B 02 31 |  if_ae	add	local07, local10
1e970                 | '         d+=ai
1e970     1A 39 02 31 |  if_ae	add	local14, local12
1e974                 | '       else
1e974                 | '         d+=bi
1e974     1B 39 02 C1 |  if_b	add	local14, local13
1e978                 | '         y+=yi
1e978     18 2B 02 C1 |  if_b	add	local07, local10
1e97c                 | '       putpixel(x, y,c)
1e97c     14 13 02 F6 | 	mov	arg01, local06
1e980     15 15 02 F6 | 	mov	arg02, local07
1e984     13 17 02 F6 | 	mov	arg03, local05
1e988     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e98c     CC FF 9F FD | 	jmp	#LR__2443
1e990                 | LR__2444
1e990                 | LR__2445
1e990                 | LR__2446
1e990     A7 F0 03 F6 | 	mov	ptra, fp
1e994     B2 00 A0 FD | 	call	#popregs_
1e998                 | _hg010b_spin2_draw_ret
1e998     2D 00 64 FD | 	ret
1e99c                 | 
1e99c                 | '  
1e99c                 | ' pub fillpush(val) 
1e99c                 | _hg010b_spin2_fillpush
1e99c                 | ' fillstack[fillptr]:=val
1e99c     0B 00 00 FF 
1e9a0     BA E4 05 F1 | 	add	objptr, ##5818
1e9a4     F2 00 02 FB | 	rdlong	_var01, objptr
1e9a8     02 00 66 F0 | 	shl	_var01, #2
1e9ac     0A 00 00 FF 
1e9b0     00 E4 85 F1 | 	sub	objptr, ##5120
1e9b4     F2 00 02 F1 | 	add	_var01, objptr
1e9b8     00 13 62 FC | 	wrlong	arg01, _var01
1e9bc                 | ' fillptr+=1   
1e9bc     0A 00 00 FF 
1e9c0     00 E4 05 F1 | 	add	objptr, ##5120
1e9c4     F2 00 02 FB | 	rdlong	_var01, objptr
1e9c8     01 00 06 F1 | 	add	_var01, #1
1e9cc     F2 00 62 FC | 	wrlong	_var01, objptr
1e9d0     0B 00 00 FF 
1e9d4     BA E4 85 F1 | 	sub	objptr, ##5818
1e9d8                 | _hg010b_spin2_fillpush_ret
1e9d8     2D 00 64 FD | 	ret
1e9dc                 | 
1e9dc                 | ' 
1e9dc                 | '     
1e9dc                 | ' pub fillpop() : val
1e9dc                 | _hg010b_spin2_fillpop
1e9dc                 | ' 
1e9dc                 | ' fillptr-=1
1e9dc     0B 00 00 FF 
1e9e0     BA E4 05 F1 | 	add	objptr, ##5818
1e9e4     F2 FA 01 FB | 	rdlong	result1, objptr
1e9e8     01 FA 85 F1 | 	sub	result1, #1
1e9ec     F2 FA 61 FC | 	wrlong	result1, objptr
1e9f0                 | ' if fillptr<0
1e9f0     0B 00 00 FF 
1e9f4     BA E4 85 F1 | 	sub	objptr, ##5818
1e9f8     00 FA 55 F2 | 	cmps	result1, #0 wc
1e9fc                 | '   fillptr:=0
1e9fc     0B 00 00 CF 
1ea00     BA E4 05 C1 |  if_b	add	objptr, ##5818
1ea04     F2 00 68 CC |  if_b	wrlong	#0, objptr
1ea08     0B 00 00 CF 
1ea0c     BA E4 85 C1 |  if_b	sub	objptr, ##5818
1ea10                 | '   val:=-12345
1ea10     E7 FF 7F CF 
1ea14     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1ea18     28 00 90 CD |  if_b	jmp	#LR__2450
1ea1c                 | ' else 
1ea1c                 | '   val:=fillstack[fillptr]
1ea1c     0B 00 00 FF 
1ea20     BA E4 05 F1 | 	add	objptr, ##5818
1ea24     F2 00 02 FB | 	rdlong	_var01, objptr
1ea28     02 00 66 F0 | 	shl	_var01, #2
1ea2c     0A 00 00 FF 
1ea30     00 E4 85 F1 | 	sub	objptr, ##5120
1ea34     F2 00 02 F1 | 	add	_var01, objptr
1ea38     00 01 02 FB | 	rdlong	_var01, _var01
1ea3c     01 00 00 FF 
1ea40     BA E4 85 F1 | 	sub	objptr, ##698
1ea44                 | LR__2450
1ea44                 | ' return val
1ea44     00 FB 01 F6 | 	mov	result1, _var01
1ea48                 | _hg010b_spin2_fillpop_ret
1ea48     2D 00 64 FD | 	ret
1ea4c                 | 
1ea4c                 | ' 
1ea4c                 | '       
1ea4c                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1ea4c                 | _hg010b_spin2_fill
1ea4c     0B 4A 05 F6 | 	mov	COUNT_, #11
1ea50     A8 00 A0 FD | 	call	#pushregs_
1ea54                 | ' 
1ea54                 | ' newcolor:=newcolor & 255
1ea54     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1ea58                 | ' oldcolor:=oldcolor & 255
1ea58     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1ea5c                 | ' 
1ea5c                 | ' if (oldcolor == newcolor) 
1ea5c     0F 21 0A F2 | 	cmp	local02, local01 wz
1ea60                 | '   return
1ea60     70 02 90 AD |  if_e	jmp	#LR__2469
1ea64                 | ' 
1ea64                 | ' fillptr:=0
1ea64     0B 00 00 FF 
1ea68     BA E4 05 F1 | 	add	objptr, ##5818
1ea6c     F2 00 68 FC | 	wrlong	#0, objptr
1ea70                 | ' fillmax:=0
1ea70     04 E4 05 F1 | 	add	objptr, #4
1ea74     F2 00 68 FC | 	wrlong	#0, objptr
1ea78     0B 00 00 FF 
1ea7c     BE E4 85 F1 | 	sub	objptr, ##5822
1ea80                 | ' fillpush(x)
1ea80     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1ea84                 | ' fillpush(y)
1ea84     0A 13 02 F6 | 	mov	arg01, arg02
1ea88     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1ea8c                 | ' y:=fillpop()
1ea8c     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1ea90     FD 22 02 F6 | 	mov	local03, result1
1ea94                 | ' x:=fillpop()
1ea94     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1ea98     FD 24 02 F6 | 	mov	local04, result1
1ea9c                 | ' 'pinhigh(38)
1ea9c                 | ' repeat while (x>-1)       
1ea9c                 | LR__2460
1ea9c     00 24 56 F2 | 	cmps	local04, #0 wc
1eaa0     30 02 90 CD |  if_b	jmp	#LR__2468
1eaa4                 | '  ' pintoggle(39)
1eaa4                 | '   x1 := x
1eaa4     12 27 02 F6 | 	mov	local05, local04
1eaa8                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1eaa8                 | LR__2461
1eaa8     00 28 06 F6 | 	mov	local06, #0
1eaac     00 2A 06 F6 | 	mov	local07, #0
1eab0     00 26 56 F2 | 	cmps	local05, #0 wc
1eab4     01 2A 66 36 |  if_ae	neg	local07, #1
1eab8     00 2A 0E F2 | 	cmp	local07, #0 wz
1eabc     00 28 26 56 |  if_ne	not	local06, #0
1eac0     00 2C 06 F6 | 	mov	local08, #0
1eac4     00 2E 06 F6 | 	mov	local09, #0
1eac8     11 15 02 F6 | 	mov	arg02, local03
1eacc     13 13 02 F6 | 	mov	arg01, local05
1ead0     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1ead4     10 FB 09 F2 | 	cmp	result1, local02 wz
1ead8     00 2E 26 A6 |  if_e	not	local09, #0
1eadc     00 2E 0E F2 | 	cmp	local09, #0 wz
1eae0     00 2C 26 56 |  if_ne	not	local08, #0
1eae4     16 29 CA F7 | 	test	local06, local08 wz
1eae8                 | '     x1--
1eae8     01 26 86 51 |  if_ne	sub	local05, #1
1eaec     B8 FF 9F 5D |  if_ne	jmp	#LR__2461
1eaf0                 | '   x1++
1eaf0     01 26 06 F1 | 	add	local05, #1
1eaf4                 | '   spanabove := 0
1eaf4     00 30 06 F6 | 	mov	local10, #0
1eaf8                 | '   spanbelow := 0
1eaf8     00 32 06 F6 | 	mov	local11, #0
1eafc                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1eafc                 | LR__2462
1eafc     00 28 06 F6 | 	mov	local06, #0
1eb00     02 00 00 FF 
1eb04     00 26 56 F2 | 	cmps	local05, ##1024 wc
1eb08     00 28 26 C6 |  if_b	not	local06, #0
1eb0c     00 2C 06 F6 | 	mov	local08, #0
1eb10     00 2E 06 F6 | 	mov	local09, #0
1eb14     11 15 02 F6 | 	mov	arg02, local03
1eb18     13 13 02 F6 | 	mov	arg01, local05
1eb1c     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1eb20     10 FB 09 F2 | 	cmp	result1, local02 wz
1eb24     00 2E 26 A6 |  if_e	not	local09, #0
1eb28     00 2E 0E F2 | 	cmp	local09, #0 wz
1eb2c     00 2C 26 56 |  if_ne	not	local08, #0
1eb30     16 29 CA F7 | 	test	local06, local08 wz
1eb34     88 01 90 AD |  if_e	jmp	#LR__2467
1eb38                 | '     putpixel2 (x1,y, newcolor & 255)
1eb38     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1eb3c     13 13 02 F6 | 	mov	arg01, local05
1eb40     11 15 02 F6 | 	mov	arg02, local03
1eb44     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1eb48                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1eb48     00 28 06 F6 | 	mov	local06, #0
1eb4c     00 2A 06 F6 | 	mov	local07, #0
1eb50     00 30 0E F2 | 	cmp	local10, #0 wz
1eb54     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1eb58     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1eb5c     00 2A 0E F2 | 	cmp	local07, #0 wz
1eb60     00 28 26 56 |  if_ne	not	local06, #0
1eb64     00 2C 06 F6 | 	mov	local08, #0
1eb68     00 2E 06 F6 | 	mov	local09, #0
1eb6c     11 15 02 F6 | 	mov	arg02, local03
1eb70     01 14 86 F1 | 	sub	arg02, #1
1eb74     13 13 02 F6 | 	mov	arg01, local05
1eb78     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1eb7c     10 FB 09 F2 | 	cmp	result1, local02 wz
1eb80     00 2E 26 A6 |  if_e	not	local09, #0
1eb84     00 2E 0E F2 | 	cmp	local09, #0 wz
1eb88     00 2C 26 56 |  if_ne	not	local08, #0
1eb8c     16 29 CA F7 | 	test	local06, local08 wz
1eb90     1C 00 90 AD |  if_e	jmp	#LR__2463
1eb94                 | '       fillpush(x1)
1eb94     13 13 02 F6 | 	mov	arg01, local05
1eb98     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1eb9c                 | '       fillpush(y-1)
1eb9c     11 13 02 F6 | 	mov	arg01, local03
1eba0     01 12 86 F1 | 	sub	arg01, #1
1eba4     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1eba8                 | '       spanabove := 1 
1eba8     01 30 06 F6 | 	mov	local10, #1
1ebac     4C 00 90 FD | 	jmp	#LR__2464
1ebb0                 | LR__2463
1ebb0                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1ebb0     00 28 06 F6 | 	mov	local06, #0
1ebb4     00 2A 06 F6 | 	mov	local07, #0
1ebb8     00 30 0E F2 | 	cmp	local10, #0 wz
1ebbc     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1ebc0     01 2A 66 16 |  if_a	neg	local07, #1
1ebc4     00 2A 0E F2 | 	cmp	local07, #0 wz
1ebc8     00 28 26 56 |  if_ne	not	local06, #0
1ebcc     00 2C 06 F6 | 	mov	local08, #0
1ebd0     00 2E 06 F6 | 	mov	local09, #0
1ebd4     11 15 02 F6 | 	mov	arg02, local03
1ebd8     01 14 86 F1 | 	sub	arg02, #1
1ebdc     13 13 02 F6 | 	mov	arg01, local05
1ebe0     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1ebe4     10 FB 09 F2 | 	cmp	result1, local02 wz
1ebe8     00 2E 26 56 |  if_ne	not	local09, #0
1ebec     00 2E 0E F2 | 	cmp	local09, #0 wz
1ebf0     00 2C 26 56 |  if_ne	not	local08, #0
1ebf4     16 29 CA F7 | 	test	local06, local08 wz
1ebf8                 | '       spanabove := 0 
1ebf8     00 30 06 56 |  if_ne	mov	local10, #0
1ebfc                 | LR__2464
1ebfc                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1ebfc     00 28 06 F6 | 	mov	local06, #0
1ec00     00 2A 06 F6 | 	mov	local07, #0
1ec04     00 32 0E F2 | 	cmp	local11, #0 wz
1ec08     01 00 00 AF 
1ec0c     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1ec10     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1ec14     00 2A 0E F2 | 	cmp	local07, #0 wz
1ec18     00 28 26 56 |  if_ne	not	local06, #0
1ec1c     00 2C 06 F6 | 	mov	local08, #0
1ec20     00 2E 06 F6 | 	mov	local09, #0
1ec24     11 15 02 F6 | 	mov	arg02, local03
1ec28     01 14 06 F1 | 	add	arg02, #1
1ec2c     13 13 02 F6 | 	mov	arg01, local05
1ec30     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1ec34     10 FB 09 F2 | 	cmp	result1, local02 wz
1ec38     00 2E 26 A6 |  if_e	not	local09, #0
1ec3c     00 2E 0E F2 | 	cmp	local09, #0 wz
1ec40     00 2C 26 56 |  if_ne	not	local08, #0
1ec44     16 29 CA F7 | 	test	local06, local08 wz
1ec48     1C 00 90 AD |  if_e	jmp	#LR__2465
1ec4c                 | '       fillpush(x1)
1ec4c     13 13 02 F6 | 	mov	arg01, local05
1ec50     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1ec54                 | '       fillpush(y + 1)
1ec54     11 13 02 F6 | 	mov	arg01, local03
1ec58     01 12 06 F1 | 	add	arg01, #1
1ec5c     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1ec60                 | '       spanBelow := 1
1ec60     01 32 06 F6 | 	mov	local11, #1
1ec64     50 00 90 FD | 	jmp	#LR__2466
1ec68                 | LR__2465
1ec68                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1ec68     00 28 06 F6 | 	mov	local06, #0
1ec6c     00 2A 06 F6 | 	mov	local07, #0
1ec70     00 32 0E F2 | 	cmp	local11, #0 wz
1ec74     01 00 00 5F 
1ec78     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
1ec7c     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
1ec80     00 2A 0E F2 | 	cmp	local07, #0 wz
1ec84     00 28 26 56 |  if_ne	not	local06, #0
1ec88     00 2C 06 F6 | 	mov	local08, #0
1ec8c     00 2E 06 F6 | 	mov	local09, #0
1ec90     11 15 02 F6 | 	mov	arg02, local03
1ec94     01 14 06 F1 | 	add	arg02, #1
1ec98     13 13 02 F6 | 	mov	arg01, local05
1ec9c     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1eca0     10 FB 09 F2 | 	cmp	result1, local02 wz
1eca4     00 2E 26 56 |  if_ne	not	local09, #0
1eca8     00 2E 0E F2 | 	cmp	local09, #0 wz
1ecac     00 2C 26 56 |  if_ne	not	local08, #0
1ecb0     16 29 CA F7 | 	test	local06, local08 wz
1ecb4                 | '       spanbelow := 0
1ecb4     00 32 06 56 |  if_ne	mov	local11, #0
1ecb8                 | LR__2466
1ecb8                 | '     x1++
1ecb8     01 26 06 F1 | 	add	local05, #1
1ecbc     3C FE 9F FD | 	jmp	#LR__2462
1ecc0                 | LR__2467
1ecc0                 | '   y:=fillpop()
1ecc0     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1ecc4     FD 22 02 F6 | 	mov	local03, result1
1ecc8                 | '   x:=fillpop()
1ecc8     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1eccc     FD 24 02 F6 | 	mov	local04, result1
1ecd0     C8 FD 9F FD | 	jmp	#LR__2460
1ecd4                 | LR__2468
1ecd4                 | LR__2469
1ecd4     A7 F0 03 F6 | 	mov	ptra, fp
1ecd8     B2 00 A0 FD | 	call	#popregs_
1ecdc                 | _hg010b_spin2_fill_ret
1ecdc     2D 00 64 FD | 	ret
1ece0                 | 
1ece0                 | ' 'pinlow(38)    
1ece0                 | ' 
1ece0                 | ' '-- A filled circle -----------------------------------------------------
1ece0                 | ' 
1ece0                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1ece0                 | _hg010b_spin2_fcircle
1ece0     08 4A 05 F6 | 	mov	COUNT_, #8
1ece4     A8 00 A0 FD | 	call	#pushregs_
1ece8     0B 1F 02 F6 | 	mov	local01, arg03
1ecec     FF FF 7F FF 
1ecf0     FE 1F 06 FD | 	qmul	local01, ##-2
1ecf4     09 21 02 F6 | 	mov	local02, arg01
1ecf8     0A 23 02 F6 | 	mov	local03, arg02
1ecfc     0C 25 02 F6 | 	mov	local04, arg04
1ed00                 | ' 
1ed00                 | ' d:=5-4*r
1ed00     0F 19 02 F6 | 	mov	arg04, local01
1ed04     02 18 66 F0 | 	shl	arg04, #2
1ed08     05 26 06 F6 | 	mov	local05, #5
1ed0c     0C 27 82 F1 | 	sub	local05, arg04
1ed10                 | ' x:=0
1ed10     00 28 06 F6 | 	mov	local06, #0
1ed14                 | ' y:=r
1ed14                 | ' da:=(-2*r+5)*4
1ed14                 | ' db:=3*4
1ed14     0C 2A 06 F6 | 	mov	local07, #12
1ed18                 | ' repeat while (x<=y) 
1ed18     18 2C 62 FD | 	getqx	local08
1ed1c     05 2C 06 F1 | 	add	local08, #5
1ed20     02 2C 66 F0 | 	shl	local08, #2
1ed24                 | LR__2470
1ed24     0F 29 5A F2 | 	cmps	local06, local01 wcz
1ed28     B4 00 90 1D |  if_a	jmp	#LR__2472
1ed2c                 | '   fastline(x0-x,x0+x,y0-y,c)
1ed2c     10 13 02 F6 | 	mov	arg01, local02
1ed30     14 13 82 F1 | 	sub	arg01, local06
1ed34     10 15 02 F6 | 	mov	arg02, local02
1ed38     14 15 02 F1 | 	add	arg02, local06
1ed3c     11 17 02 F6 | 	mov	arg03, local03
1ed40     0F 17 82 F1 | 	sub	arg03, local01
1ed44     12 19 02 F6 | 	mov	arg04, local04
1ed48     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ed4c                 | '   fastline(x0-x,x0+x,y0+y,c)
1ed4c     10 13 02 F6 | 	mov	arg01, local02
1ed50     14 13 82 F1 | 	sub	arg01, local06
1ed54     10 15 02 F6 | 	mov	arg02, local02
1ed58     14 15 02 F1 | 	add	arg02, local06
1ed5c     11 17 02 F6 | 	mov	arg03, local03
1ed60     0F 17 02 F1 | 	add	arg03, local01
1ed64     12 19 02 F6 | 	mov	arg04, local04
1ed68     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ed6c                 | '   fastline(x0-y,x0+y,y0-x,c)
1ed6c     10 13 02 F6 | 	mov	arg01, local02
1ed70     0F 13 82 F1 | 	sub	arg01, local01
1ed74     10 15 02 F6 | 	mov	arg02, local02
1ed78     0F 15 02 F1 | 	add	arg02, local01
1ed7c     11 17 02 F6 | 	mov	arg03, local03
1ed80     14 17 82 F1 | 	sub	arg03, local06
1ed84     12 19 02 F6 | 	mov	arg04, local04
1ed88     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ed8c                 | '   fastline(x0-y,x0+y,y0+x,c)
1ed8c     10 13 02 F6 | 	mov	arg01, local02
1ed90     0F 13 82 F1 | 	sub	arg01, local01
1ed94     10 15 02 F6 | 	mov	arg02, local02
1ed98     0F 15 02 F1 | 	add	arg02, local01
1ed9c     11 17 02 F6 | 	mov	arg03, local03
1eda0     14 17 02 F1 | 	add	arg03, local06
1eda4     12 19 02 F6 | 	mov	arg04, local04
1eda8     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1edac                 | '   if d>0 
1edac     01 26 56 F2 | 	cmps	local05, #1 wc
1edb0     18 00 90 CD |  if_b	jmp	#LR__2471
1edb4                 | '     d+=da
1edb4     16 27 02 F1 | 	add	local05, local08
1edb8                 | '     y-=1
1edb8     01 1E 86 F1 | 	sub	local01, #1
1edbc                 | '     x+=1
1edbc     01 28 06 F1 | 	add	local06, #1
1edc0                 | '     da+=4*4
1edc0     10 2C 06 F1 | 	add	local08, #16
1edc4                 | '     db+=2*4
1edc4     08 2A 06 F1 | 	add	local07, #8
1edc8     58 FF 9F FD | 	jmp	#LR__2470
1edcc                 | LR__2471
1edcc                 | '   else
1edcc                 | '     d+=db
1edcc     15 27 02 F1 | 	add	local05, local07
1edd0                 | '     x+=1
1edd0     01 28 06 F1 | 	add	local06, #1
1edd4                 | '     da+=2*4
1edd4     08 2C 06 F1 | 	add	local08, #8
1edd8                 | '     db+=2*4
1edd8     08 2A 06 F1 | 	add	local07, #8
1eddc     44 FF 9F FD | 	jmp	#LR__2470
1ede0                 | LR__2472
1ede0     A7 F0 03 F6 | 	mov	ptra, fp
1ede4     B2 00 A0 FD | 	call	#popregs_
1ede8                 | _hg010b_spin2_fcircle_ret
1ede8     2D 00 64 FD | 	ret
1edec                 | 
1edec                 | '  
1edec                 | ' '-- A circle ------------------------------------------------------------ 
1edec                 | '  
1edec                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1edec                 | _hg010b_spin2_circle
1edec     08 4A 05 F6 | 	mov	COUNT_, #8
1edf0     A8 00 A0 FD | 	call	#pushregs_
1edf4     0B 1F 02 F6 | 	mov	local01, arg03
1edf8     FF FF 7F FF 
1edfc     FE 1F 06 FD | 	qmul	local01, ##-2
1ee00     09 21 02 F6 | 	mov	local02, arg01
1ee04     0A 23 02 F6 | 	mov	local03, arg02
1ee08     0C 25 02 F6 | 	mov	local04, arg04
1ee0c                 | ' 
1ee0c                 | '  
1ee0c                 | ' d:=5-4*r
1ee0c     0F 19 02 F6 | 	mov	arg04, local01
1ee10     02 18 66 F0 | 	shl	arg04, #2
1ee14     05 26 06 F6 | 	mov	local05, #5
1ee18     0C 27 82 F1 | 	sub	local05, arg04
1ee1c                 | ' x:=0
1ee1c     00 28 06 F6 | 	mov	local06, #0
1ee20                 | ' y:=r
1ee20                 | ' da:=(-2*r+5)*4
1ee20                 | ' db:=3*4
1ee20     0C 2A 06 F6 | 	mov	local07, #12
1ee24                 | ' repeat while (x<=y) 
1ee24     18 2C 62 FD | 	getqx	local08
1ee28     05 2C 06 F1 | 	add	local08, #5
1ee2c     02 2C 66 F0 | 	shl	local08, #2
1ee30                 | LR__2480
1ee30     0F 29 5A F2 | 	cmps	local06, local01 wcz
1ee34     F4 00 90 1D |  if_a	jmp	#LR__2482
1ee38                 | '   putpixel(x0-x,y0-y,c)
1ee38     10 13 02 F6 | 	mov	arg01, local02
1ee3c     14 13 82 F1 | 	sub	arg01, local06
1ee40     11 15 02 F6 | 	mov	arg02, local03
1ee44     0F 15 82 F1 | 	sub	arg02, local01
1ee48     12 17 02 F6 | 	mov	arg03, local04
1ee4c     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ee50                 | '   putpixel(x0-x,y0+y,c)
1ee50     10 13 02 F6 | 	mov	arg01, local02
1ee54     14 13 82 F1 | 	sub	arg01, local06
1ee58     11 15 02 F6 | 	mov	arg02, local03
1ee5c     0F 15 02 F1 | 	add	arg02, local01
1ee60     12 17 02 F6 | 	mov	arg03, local04
1ee64     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ee68                 | '   putpixel(x0+x,y0-y,c)
1ee68     10 13 02 F6 | 	mov	arg01, local02
1ee6c     14 13 02 F1 | 	add	arg01, local06
1ee70     11 15 02 F6 | 	mov	arg02, local03
1ee74     0F 15 82 F1 | 	sub	arg02, local01
1ee78     12 17 02 F6 | 	mov	arg03, local04
1ee7c     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ee80                 | '   putpixel(x0+x,y0+y,c)
1ee80     10 13 02 F6 | 	mov	arg01, local02
1ee84     14 13 02 F1 | 	add	arg01, local06
1ee88     11 15 02 F6 | 	mov	arg02, local03
1ee8c     0F 15 02 F1 | 	add	arg02, local01
1ee90     12 17 02 F6 | 	mov	arg03, local04
1ee94     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ee98                 | '   putpixel(x0-y,y0-x,c)
1ee98     10 13 02 F6 | 	mov	arg01, local02
1ee9c     0F 13 82 F1 | 	sub	arg01, local01
1eea0     11 15 02 F6 | 	mov	arg02, local03
1eea4     14 15 82 F1 | 	sub	arg02, local06
1eea8     12 17 02 F6 | 	mov	arg03, local04
1eeac     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1eeb0                 | '   putpixel(x0-y,y0+x,c)
1eeb0     10 13 02 F6 | 	mov	arg01, local02
1eeb4     0F 13 82 F1 | 	sub	arg01, local01
1eeb8     11 15 02 F6 | 	mov	arg02, local03
1eebc     14 15 02 F1 | 	add	arg02, local06
1eec0     12 17 02 F6 | 	mov	arg03, local04
1eec4     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1eec8                 | '   putpixel(x0+y,y0-x,c)
1eec8     10 13 02 F6 | 	mov	arg01, local02
1eecc     0F 13 02 F1 | 	add	arg01, local01
1eed0     11 15 02 F6 | 	mov	arg02, local03
1eed4     14 15 82 F1 | 	sub	arg02, local06
1eed8     12 17 02 F6 | 	mov	arg03, local04
1eedc     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1eee0                 | '   putpixel(x0+y,y0+x,c)
1eee0     10 13 02 F6 | 	mov	arg01, local02
1eee4     0F 13 02 F1 | 	add	arg01, local01
1eee8     11 15 02 F6 | 	mov	arg02, local03
1eeec     14 15 02 F1 | 	add	arg02, local06
1eef0     12 17 02 F6 | 	mov	arg03, local04
1eef4     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1eef8                 | '   if d>0 
1eef8     01 26 56 F2 | 	cmps	local05, #1 wc
1eefc     18 00 90 CD |  if_b	jmp	#LR__2481
1ef00                 | '     d+=da
1ef00     16 27 02 F1 | 	add	local05, local08
1ef04                 | '     y-=1
1ef04     01 1E 86 F1 | 	sub	local01, #1
1ef08                 | '     x+=1
1ef08     01 28 06 F1 | 	add	local06, #1
1ef0c                 | '     da+=4*4
1ef0c     10 2C 06 F1 | 	add	local08, #16
1ef10                 | '     db+=2*4
1ef10     08 2A 06 F1 | 	add	local07, #8
1ef14     18 FF 9F FD | 	jmp	#LR__2480
1ef18                 | LR__2481
1ef18                 | '   else
1ef18                 | '     d+=db
1ef18     15 27 02 F1 | 	add	local05, local07
1ef1c                 | '     x+=1
1ef1c     01 28 06 F1 | 	add	local06, #1
1ef20                 | '     da+=2*4
1ef20     08 2C 06 F1 | 	add	local08, #8
1ef24                 | '     db+=2*4
1ef24     08 2A 06 F1 | 	add	local07, #8
1ef28     04 FF 9F FD | 	jmp	#LR__2480
1ef2c                 | LR__2482
1ef2c     A7 F0 03 F6 | 	mov	ptra, fp
1ef30     B2 00 A0 FD | 	call	#popregs_
1ef34                 | _hg010b_spin2_circle_ret
1ef34     2D 00 64 FD | 	ret
1ef38                 | 
1ef38                 | '     
1ef38                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1ef38                 | ' 
1ef38                 | ' pub frame(x1,y1,x2,y2,c)
1ef38                 | _hg010b_spin2_frame
1ef38     05 4A 05 F6 | 	mov	COUNT_, #5
1ef3c     A8 00 A0 FD | 	call	#pushregs_
1ef40     09 1F 02 F6 | 	mov	local01, arg01
1ef44     0A 21 02 F6 | 	mov	local02, arg02
1ef48     0B 23 02 F6 | 	mov	local03, arg03
1ef4c     0C 25 02 F6 | 	mov	local04, arg04
1ef50     0D 27 02 F6 | 	mov	local05, arg05
1ef54                 | ' 
1ef54                 | ' fastline(x1,x2,y1,c)
1ef54     0F 13 02 F6 | 	mov	arg01, local01
1ef58     11 15 02 F6 | 	mov	arg02, local03
1ef5c     10 17 02 F6 | 	mov	arg03, local02
1ef60     13 19 02 F6 | 	mov	arg04, local05
1ef64     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1ef68                 | ' fastline(x1,x2,y2,c)
1ef68     0F 13 02 F6 | 	mov	arg01, local01
1ef6c     11 15 02 F6 | 	mov	arg02, local03
1ef70     12 17 02 F6 | 	mov	arg03, local04
1ef74     13 19 02 F6 | 	mov	arg04, local05
1ef78     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1ef7c                 | ' line(x1,y1,x1,y2,c)
1ef7c     0F 13 02 F6 | 	mov	arg01, local01
1ef80     10 15 02 F6 | 	mov	arg02, local02
1ef84     0F 17 02 F6 | 	mov	arg03, local01
1ef88     12 19 02 F6 | 	mov	arg04, local04
1ef8c     13 1B 02 F6 | 	mov	arg05, local05
1ef90                 | ' draw(x1,y1,x2,y2,c)
1ef90     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1ef94                 | ' line(x2,y1,x2,y2,c)
1ef94     11 13 02 F6 | 	mov	arg01, local03
1ef98     10 15 02 F6 | 	mov	arg02, local02
1ef9c     11 17 02 F6 | 	mov	arg03, local03
1efa0     12 19 02 F6 | 	mov	arg04, local04
1efa4     13 1B 02 F6 | 	mov	arg05, local05
1efa8                 | ' draw(x1,y1,x2,y2,c)
1efa8     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1efac     A7 F0 03 F6 | 	mov	ptra, fp
1efb0     B2 00 A0 FD | 	call	#popregs_
1efb4                 | _hg010b_spin2_frame_ret
1efb4     2D 00 64 FD | 	ret
1efb8                 | 
1efb8                 | ' 
1efb8                 | ' '-- A box (a filled rectangle) ----------------------------------------
1efb8                 | ' 
1efb8                 | ' pub box(x1,y1,x2,y2,c) |yy
1efb8                 | _hg010b_spin2_box
1efb8     06 4A 05 F6 | 	mov	COUNT_, #6
1efbc     A8 00 A0 FD | 	call	#pushregs_
1efc0     09 1F 02 F6 | 	mov	local01, arg01
1efc4     0A 21 02 F6 | 	mov	local02, arg02
1efc8     0B 23 02 F6 | 	mov	local03, arg03
1efcc     0C 25 02 F6 | 	mov	local04, arg04
1efd0     0D 27 02 F6 | 	mov	local05, arg05
1efd4                 | ' 
1efd4                 | ' repeat yy from y1 to y2
1efd4     10 25 52 F2 | 	cmps	local04, local02 wc
1efd8     01 28 86 F6 | 	negc	local06, #1
1efdc     14 25 02 F1 | 	add	local04, local06
1efe0                 | LR__2490
1efe0                 | '   fastline(x1,x2,yy,c)
1efe0     0F 13 02 F6 | 	mov	arg01, local01
1efe4     11 15 02 F6 | 	mov	arg02, local03
1efe8     13 19 02 F6 | 	mov	arg04, local05
1efec     10 17 02 F6 | 	mov	arg03, local02
1eff0     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1eff4     14 21 02 F1 | 	add	local02, local06
1eff8     12 21 0A F2 | 	cmp	local02, local04 wz
1effc     E0 FF 9F 5D |  if_ne	jmp	#LR__2490
1f000     A7 F0 03 F6 | 	mov	ptra, fp
1f004     B2 00 A0 FD | 	call	#popregs_
1f008                 | _hg010b_spin2_box_ret
1f008     2D 00 64 FD | 	ret
1f00c                 | 
1f00c                 | '       
1f00c                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1f00c                 | _hg010b_spin2_putcharxycgf
1f00c                 | ' 
1f00c                 | '  
1f00c                 | ' repeat yy from 0 to 15
1f00c     00 00 06 F6 | 	mov	_var01, #0
1f010     97 8C 48 FB | 	callpa	#(@LR__2502-@LR__2500)>>2,fcache_load_ptr_
1f014                 | LR__2500
1f014                 | ' 
1f014                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1f014     95 E4 05 F1 | 	add	objptr, #149
1f018     F2 02 02 FB | 	rdlong	_var02, objptr
1f01c     0A 02 66 F0 | 	shl	_var02, #10
1f020     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1f024     01 05 02 F1 | 	add	_var03, _var02
1f028     0B 03 02 F6 | 	mov	_var02, arg03
1f02c     04 02 66 F0 | 	shl	_var02, #4
1f030     01 05 02 F1 | 	add	_var03, _var02
1f034     00 05 02 F1 | 	add	_var03, _var01
1f038     02 05 C2 FA | 	rdbyte	_var03, _var03
1f03c                 | '   asm
1f03c     00 04 0E F4 | 	testb	_var03, #0 wz
1f040     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1f044     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1f048     01 04 0E F4 | 	testb	_var03, #1 wz
1f04c     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1f050     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1f054     02 04 0E F4 | 	testb	_var03, #2 wz
1f058     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1f05c     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1f060     03 04 0E F4 | 	testb	_var03, #3 wz
1f064     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1f068     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1f06c     04 04 0E F4 | 	testb	_var03, #4 wz
1f070     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1f074     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1f078     05 04 0E F4 | 	testb	_var03, #5 wz
1f07c     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1f080     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1f084     06 04 0E F4 | 	testb	_var03, #6 wz
1f088     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1f08c     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1f090     07 04 0E F4 | 	testb	_var03, #7 wz
1f094     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1f098     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1f09c                 | '   
1f09c                 | '   ccc[0]:=c1
1f09c     99 E5 05 F1 | 	add	objptr, #409
1f0a0     F2 06 62 FC | 	wrlong	_var04, objptr
1f0a4                 | '   ccc[1]:=c2 
1f0a4     04 E4 05 F1 | 	add	objptr, #4
1f0a8     F2 08 62 FC | 	wrlong	_var05, objptr
1f0ac                 | '   long[mailbox0][2]:=8
1f0ac     49 E4 85 F1 | 	sub	objptr, #73
1f0b0     F2 04 02 FB | 	rdlong	_var03, objptr
1f0b4     08 04 06 F1 | 	add	_var03, #8
1f0b8     02 11 68 FC | 	wrlong	#8, _var03
1f0bc                 | '   long[mailbox0][1]:=@ccc
1f0bc     45 E4 05 F1 | 	add	objptr, #69
1f0c0     F2 04 02 F6 | 	mov	_var03, objptr
1f0c4     45 E4 85 F1 | 	sub	objptr, #69
1f0c8     F2 02 02 FB | 	rdlong	_var02, objptr
1f0cc     04 02 06 F1 | 	add	_var02, #4
1f0d0     01 05 62 FC | 	wrlong	_var03, _var02
1f0d4                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1f0d4     0C E5 85 F1 | 	sub	objptr, #268
1f0d8     F2 04 02 FB | 	rdlong	_var03, objptr
1f0dc     0A 03 02 F6 | 	mov	_var02, arg02
1f0e0     00 03 02 F1 | 	add	_var02, _var01
1f0e4     0A 02 66 F0 | 	shl	_var02, #10
1f0e8     09 0B 02 F6 | 	mov	_var06, arg01
1f0ec     02 0A 66 F0 | 	shl	_var06, #2
1f0f0     05 03 02 F1 | 	add	_var02, _var06
1f0f4     01 05 02 F1 | 	add	_var03, _var02
1f0f8     00 00 78 FF 
1f0fc     00 04 06 F1 | 	add	_var03, ##-268435456
1f100     0C E5 05 F1 | 	add	objptr, #268
1f104     F2 0A 02 FB | 	rdlong	_var06, objptr
1f108     05 05 62 FC | 	wrlong	_var03, _var06
1f10c                 | '   repeat
1f10c                 | LR__2501
1f10c     F2 04 02 FB | 	rdlong	_var03, objptr
1f110     02 03 02 FB | 	rdlong	_var02, _var03
1f114     00 02 56 F2 | 	cmps	_var02, #0 wc
1f118     F0 FF 9F CD |  if_b	jmp	#LR__2501
1f11c     E9 E5 85 F1 | 	sub	objptr, #489
1f120     01 00 06 F1 | 	add	_var01, #1
1f124     10 00 56 F2 | 	cmps	_var01, #16 wc
1f128     E8 FE 9F CD |  if_b	jmp	#LR__2500
1f12c                 | LR__2502
1f12c                 | _hg010b_spin2_putcharxycgf_ret
1f12c     2D 00 64 FD | 	ret
1f130                 | 
1f130                 | ' 
1f130                 | ' 
1f130                 | ' '**********************************************************************r***
1f130                 | ' '                                                                        *
1f130                 | ' ' Font related functions                                                 *
1f130                 | ' '                                                                        *
1f130                 | ' '*************************************************************************
1f130                 | ' 
1f130                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1f130                 | ' 
1f130                 | ' pub setfontfamily(afontnum)
1f130                 | _hg010b_spin2_setfontfamily
1f130                 | ' 
1f130                 | ' font_family:=afontnum
1f130     95 E4 05 F1 | 	add	objptr, #149
1f134     F2 12 62 FC | 	wrlong	arg01, objptr
1f138     95 E4 85 F1 | 	sub	objptr, #149
1f13c                 | ' 'if afontnum==8
1f13c                 | ' '  font_ptr:=@amiga_font
1f13c                 | ' 
1f13c                 | ' if afontnum==4
1f13c     04 12 0E F2 | 	cmp	arg01, #4 wz
1f140                 | '   font_ptr:=@st_font
1f140     08 00 00 AF 
1f144     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1f148     08 E4 05 A1 |  if_e	add	objptr, #8
1f14c     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1f150     08 E4 85 A1 |  if_e	sub	objptr, #8
1f154     08 00 00 AF 
1f158     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1f15c                 | ' if afontnum==0
1f15c     00 12 0E F2 | 	cmp	arg01, #0 wz
1f160                 | '   font_ptr:=@vga_font
1f160     08 E4 05 A1 |  if_e	add	objptr, #8
1f164     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1f168     08 E4 85 A1 |  if_e	sub	objptr, #8
1f16c                 | _hg010b_spin2_setfontfamily_ret
1f16c     2D 00 64 FD | 	ret
1f170                 | 
1f170                 | ' 
1f170                 | ' '*************************************************************************
1f170                 | ' '                                                                        *
1f170                 | ' '  Cursor functions                                                      *
1f170                 | ' '                                                                        *
1f170                 | ' '*************************************************************************
1f170                 | ' 
1f170                 | ' 
1f170                 | ' pub setcursorpos(x,y)
1f170                 | _hg010b_spin2_setcursorpos
1f170                 | ' 
1f170                 | ' ''---------- Set the (x,y) position of cursor
1f170                 | ' 
1f170                 | ' cursor_x:=x
1f170     3C E4 05 F1 | 	add	objptr, #60
1f174     F2 12 52 FC | 	wrword	arg01, objptr
1f178                 | ' cursor_y:=y
1f178     02 E4 05 F1 | 	add	objptr, #2
1f17c     F2 14 42 FC | 	wrbyte	arg02, objptr
1f180                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f180     02 E4 85 F1 | 	sub	objptr, #2
1f184     F2 14 E2 FA | 	rdword	arg02, objptr
1f188     02 14 66 F0 | 	shl	arg02, #2
1f18c     02 E4 05 F1 | 	add	objptr, #2
1f190     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f194     3E E4 85 F1 | 	sub	objptr, #62
1f198     04 16 66 F0 | 	shl	arg03, #4
1f19c     04 16 06 F1 | 	add	arg03, #4
1f1a0     11 12 06 F6 | 	mov	arg01, #17
1f1a4     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1f1a8                 | _hg010b_spin2_setcursorpos_ret
1f1a8     2D 00 64 FD | 	ret
1f1ac                 | 
1f1ac                 | ' 
1f1ac                 | ' pub setcursorx(x)
1f1ac                 | _hg010b_spin2_setcursorx
1f1ac                 | ' cursor_x:=x
1f1ac     3C E4 05 F1 | 	add	objptr, #60
1f1b0     F2 12 52 FC | 	wrword	arg01, objptr
1f1b4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f1b4     F2 14 E2 FA | 	rdword	arg02, objptr
1f1b8     02 14 66 F0 | 	shl	arg02, #2
1f1bc     02 E4 05 F1 | 	add	objptr, #2
1f1c0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f1c4     3E E4 85 F1 | 	sub	objptr, #62
1f1c8     04 16 66 F0 | 	shl	arg03, #4
1f1cc     04 16 06 F1 | 	add	arg03, #4
1f1d0     11 12 06 F6 | 	mov	arg01, #17
1f1d4     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1f1d8                 | _hg010b_spin2_setcursorx_ret
1f1d8     2D 00 64 FD | 	ret
1f1dc                 | 
1f1dc                 | ' 
1f1dc                 | ' pub setcursory(y) 
1f1dc                 | _hg010b_spin2_setcursory
1f1dc                 | ' cursor_y:=y
1f1dc     3E E4 05 F1 | 	add	objptr, #62
1f1e0     F2 12 42 FC | 	wrbyte	arg01, objptr
1f1e4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
1f1e4     02 E4 85 F1 | 	sub	objptr, #2
1f1e8     F2 14 E2 FA | 	rdword	arg02, objptr
1f1ec     02 14 66 F0 | 	shl	arg02, #2
1f1f0     02 E4 05 F1 | 	add	objptr, #2
1f1f4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f1f8     3E E4 85 F1 | 	sub	objptr, #62
1f1fc     04 16 66 F0 | 	shl	arg03, #4
1f200     04 16 06 F1 | 	add	arg03, #4
1f204     11 12 06 F6 | 	mov	arg01, #17
1f208     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1f20c                 | _hg010b_spin2_setcursory_ret
1f20c     2D 00 64 FD | 	ret
1f210                 | 
1f210                 | ' 
1f210                 | ' '*************************************************************************
1f210                 | ' '                                                                        *
1f210                 | ' '  VBlank functions                                                      *
1f210                 | ' '                                                                        *
1f210                 | ' '*************************************************************************
1f210                 | ' 
1f210                 | ' pub waitvbl(amount) | i
1f210                 | _hg010b_spin2_waitvbl
1f210     03 4A 05 F6 | 	mov	COUNT_, #3
1f214     A8 00 A0 FD | 	call	#pushregs_
1f218     09 1F 02 F6 | 	mov	local01, arg01
1f21c                 | ' 
1f21c                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1f21c                 | ' 
1f21c                 | ' repeat i from 1 to amount
1f21c     01 20 06 F6 | 	mov	local02, #1
1f220     01 1E 56 F2 | 	cmps	local01, #1 wc
1f224     01 22 86 F6 | 	negc	local03, #1
1f228     11 1F 02 F1 | 	add	local01, local03
1f22c                 | LR__2510
1f22c                 | '   repeat until vblank==0
1f22c                 | LR__2511
1f22c     49 E4 05 F1 | 	add	objptr, #73
1f230     F2 12 0A FB | 	rdlong	arg01, objptr wz
1f234     49 E4 85 F1 | 	sub	objptr, #73
1f238     0C 00 90 AD |  if_e	jmp	#LR__2512
1f23c                 | '     waitus(100)
1f23c     64 12 06 F6 | 	mov	arg01, #100
1f240     44 1A B0 FD | 	call	#__system___waitus
1f244     E4 FF 9F FD | 	jmp	#LR__2511
1f248                 | LR__2512
1f248                 | '   repeat until vblank==1
1f248                 | LR__2513
1f248     49 E4 05 F1 | 	add	objptr, #73
1f24c     F2 12 02 FB | 	rdlong	arg01, objptr
1f250     49 E4 85 F1 | 	sub	objptr, #73
1f254     01 12 0E F2 | 	cmp	arg01, #1 wz
1f258     0C 00 90 AD |  if_e	jmp	#LR__2514
1f25c                 | '     waitus(100)
1f25c     64 12 06 F6 | 	mov	arg01, #100
1f260     24 1A B0 FD | 	call	#__system___waitus
1f264     E0 FF 9F FD | 	jmp	#LR__2513
1f268                 | LR__2514
1f268     11 21 02 F1 | 	add	local02, local03
1f26c     0F 21 0A F2 | 	cmp	local02, local01 wz
1f270     B8 FF 9F 5D |  if_ne	jmp	#LR__2510
1f274     A7 F0 03 F6 | 	mov	ptra, fp
1f278     B2 00 A0 FD | 	call	#popregs_
1f27c                 | _hg010b_spin2_waitvbl_ret
1f27c     2D 00 64 FD | 	ret
1f280                 | 
1f280                 | ' 
1f280                 | ' 
1f280                 | ' pub cls(fc,bc)   :c,i
1f280                 | _hg010b_spin2_cls
1f280     02 4A 05 F6 | 	mov	COUNT_, #2
1f284     A8 00 A0 FD | 	call	#pushregs_
1f288     09 1F 02 F6 | 	mov	local01, arg01
1f28c     0A 21 02 F6 | 	mov	local02, arg02
1f290                 | ' 
1f290                 | ' c:=bc
1f290                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1f290     DD E4 05 F1 | 	add	objptr, #221
1f294     F2 12 02 FB | 	rdlong	arg01, objptr
1f298     A5 E4 85 F1 | 	sub	objptr, #165
1f29c     F2 16 02 FB | 	rdlong	arg03, objptr
1f2a0     02 16 66 F0 | 	shl	arg03, #2
1f2a4     10 15 02 F6 | 	mov	arg02, local02
1f2a8     00 18 06 F6 | 	mov	arg04, #0
1f2ac     01 1A 06 F6 | 	mov	arg05, #1
1f2b0     0B 00 00 FF 
1f2b4     94 E4 05 F1 | 	add	objptr, ##5780
1f2b8     64 0B B0 FD | 	call	#_psram_spin2_fill
1f2bc                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1f2bc     0B 00 00 FF 
1f2c0     C8 E4 85 F1 | 	sub	objptr, ##5832
1f2c4     F2 12 02 FB | 	rdlong	arg01, objptr
1f2c8     04 E4 85 F1 | 	sub	objptr, #4
1f2cc     F2 16 02 FB | 	rdlong	arg03, objptr
1f2d0     09 17 82 F1 | 	sub	arg03, arg01
1f2d4     20 14 06 F6 | 	mov	arg02, #32
1f2d8     00 18 06 F6 | 	mov	arg04, #0
1f2dc     01 1A 06 F6 | 	mov	arg05, #1
1f2e0     0B 00 00 FF 
1f2e4     CC E4 05 F1 | 	add	objptr, ##5836
1f2e8     34 0B B0 FD | 	call	#_psram_spin2_fill
1f2ec                 | ' setwritecolors(fc,bc)
1f2ec                 | ' 
1f2ec                 | ' write_color:=ff
1f2ec     0B 00 00 FF 
1f2f0     8B E4 85 F1 | 	sub	objptr, ##5771
1f2f4     F2 1E 62 FC | 	wrlong	local01, objptr
1f2f8                 | ' write_background:=bb
1f2f8     04 E4 05 F1 | 	add	objptr, #4
1f2fc     F2 20 62 FC | 	wrlong	local02, objptr
1f300                 | ' cursor_x:=0
1f300     09 E4 85 F1 | 	sub	objptr, #9
1f304     F2 00 58 FC | 	wrword	#0, objptr
1f308                 | ' cursor_y:=0
1f308     02 E4 05 F1 | 	add	objptr, #2
1f30c     F2 00 48 FC | 	wrbyte	#0, objptr
1f310                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f310     02 E4 85 F1 | 	sub	objptr, #2
1f314     F2 14 E2 FA | 	rdword	arg02, objptr
1f318     02 14 66 F0 | 	shl	arg02, #2
1f31c     02 E4 05 F1 | 	add	objptr, #2
1f320     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f324     3E E4 85 F1 | 	sub	objptr, #62
1f328     04 16 66 F0 | 	shl	arg03, #4
1f32c     04 16 06 F1 | 	add	arg03, #4
1f330     11 12 06 F6 | 	mov	arg01, #17
1f334     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
1f338                 | ' setcursorcolor(fc)
1f338     0F 13 02 F6 | 	mov	arg01, local01
1f33c     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
1f340     10 FB 01 F6 | 	mov	result1, local02
1f344     00 FC 05 F6 | 	mov	result2, #0
1f348     A7 F0 03 F6 | 	mov	ptra, fp
1f34c     B2 00 A0 FD | 	call	#popregs_
1f350                 | _hg010b_spin2_cls_ret
1f350     2D 00 64 FD | 	ret
1f354                 | 
1f354                 | ' 
1f354                 | ' ''---------- Output a char at the cursor position, move the cursor 
1f354                 | ' 
1f354                 | ' pub putchar(achar) | c,x,y,l,newcpl
1f354                 | _hg010b_spin2_putchar
1f354     02 4A 05 F6 | 	mov	COUNT_, #2
1f358     A8 00 A0 FD | 	call	#pushregs_
1f35c     09 1F 02 F6 | 	mov	local01, arg01
1f360                 | ' 
1f360                 | ' if achar==10
1f360     0A 1E 0E F2 | 	cmp	local01, #10 wz
1f364                 | '   crlf()
1f364     A4 05 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1f368                 | ' if achar==9
1f368     09 1E 0E F2 | 	cmp	local01, #9 wz
1f36c     18 00 90 5D |  if_ne	jmp	#LR__2520
1f370                 | '   cursor_x:=(cursor_x& %11110000)+16
1f370     3C E4 05 F1 | 	add	objptr, #60
1f374     F2 16 E2 FA | 	rdword	arg03, objptr
1f378     F0 16 06 F5 | 	and	arg03, #240
1f37c     10 16 06 F1 | 	add	arg03, #16
1f380     F2 16 52 FC | 	wrword	arg03, objptr
1f384     3C E4 85 F1 | 	sub	objptr, #60
1f388                 | LR__2520
1f388                 | '   
1f388                 | ' if (achar<>9) && (achar<>10) 
1f388     09 1E 0E F2 | 	cmp	local01, #9 wz
1f38c     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1f390     A8 00 90 AD |  if_e	jmp	#LR__2521
1f394                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1f394     3C E4 05 F1 | 	add	objptr, #60
1f398     F2 12 E2 FA | 	rdword	arg01, objptr
1f39c     02 E4 05 F1 | 	add	objptr, #2
1f3a0     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f3a4     04 14 66 F0 | 	shl	arg02, #4
1f3a8     04 14 06 F1 | 	add	arg02, #4
1f3ac     03 E4 05 F1 | 	add	objptr, #3
1f3b0     F2 18 02 FB | 	rdlong	arg04, objptr
1f3b4     04 E4 05 F1 | 	add	objptr, #4
1f3b8     F2 1A 02 FB | 	rdlong	arg05, objptr
1f3bc     45 E4 85 F1 | 	sub	objptr, #69
1f3c0     0F 17 02 F6 | 	mov	arg03, local01
1f3c4     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
1f3c8     04 E4 05 F1 | 	add	objptr, #4
1f3cc     F2 12 02 FB | 	rdlong	arg01, objptr
1f3d0     10 00 00 FF 
1f3d4     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f3d8     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f3dc     3A E4 05 F1 | 	add	objptr, #58
1f3e0     F2 1A C2 FA | 	rdbyte	arg05, objptr
1f3e4     0D 17 02 FD | 	qmul	arg03, arg05
1f3e8                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1f3e8     10 00 00 FF 
1f3ec     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f3f0     02 E4 85 F1 | 	sub	objptr, #2
1f3f4     F2 20 E2 FA | 	rdword	local02, objptr
1f3f8     01 20 46 F0 | 	shr	local02, #1
1f3fc     0F 15 02 F6 | 	mov	arg02, local01
1f400     01 16 06 F6 | 	mov	arg03, #1
1f404     00 18 06 F6 | 	mov	arg04, #0
1f408     01 1A 06 F6 | 	mov	arg05, #1
1f40c     0B 00 00 FF 
1f410     90 E4 05 F1 | 	add	objptr, ##5776
1f414     18 1E 62 FD | 	getqx	local01
1f418     10 1F 02 F1 | 	add	local01, local02
1f41c     0F 13 02 F1 | 	add	arg01, local01
1f420     FC 09 B0 FD | 	call	#_psram_spin2_fill
1f424                 | '   cursor_x+=2
1f424     0B 00 00 FF 
1f428     90 E4 85 F1 | 	sub	objptr, ##5776
1f42c     F2 20 E2 FA | 	rdword	local02, objptr
1f430     02 20 06 F1 | 	add	local02, #2
1f434     F2 20 52 FC | 	wrword	local02, objptr
1f438     3C E4 85 F1 | 	sub	objptr, #60
1f43c                 | LR__2521
1f43c                 | ' 
1f43c                 | ' if cursor_x>=256
1f43c     3C E4 05 F1 | 	add	objptr, #60
1f440     F2 20 E2 FA | 	rdword	local02, objptr
1f444     3C E4 85 F1 | 	sub	objptr, #60
1f448     00 21 56 F2 | 	cmps	local02, #256 wc
1f44c     64 00 90 CD |  if_b	jmp	#LR__2523
1f450                 | '   cursor_x:=0
1f450     3C E4 05 F1 | 	add	objptr, #60
1f454     F2 00 58 FC | 	wrword	#0, objptr
1f458                 | '   cursor_y+=1
1f458     02 E4 05 F1 | 	add	objptr, #2
1f45c     F2 20 C2 FA | 	rdbyte	local02, objptr
1f460     01 20 06 F1 | 	add	local02, #1
1f464     F2 20 42 FC | 	wrbyte	local02, objptr
1f468                 | '   if cursor_y>st_lines-1
1f468     C3 E4 05 F1 | 	add	objptr, #195
1f46c     F2 20 02 FB | 	rdlong	local02, objptr
1f470     01 20 86 F1 | 	sub	local02, #1
1f474     C3 E4 85 F1 | 	sub	objptr, #195
1f478     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f47c     3E E4 85 F1 | 	sub	objptr, #62
1f480     10 17 5A F2 | 	cmps	arg03, local02 wcz
1f484     2C 00 90 ED |  if_be	jmp	#LR__2522
1f488                 | '     scrollup2()
1f488     00 12 06 F6 | 	mov	arg01, #0
1f48c     01 00 00 FF 
1f490     58 14 06 F6 | 	mov	arg02, ##600
1f494     10 16 06 F6 | 	mov	arg03, #16
1f498     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
1f49c                 | '     cursor_y:=st_lines-1
1f49c     01 E5 05 F1 | 	add	objptr, #257
1f4a0     F2 20 02 FB | 	rdlong	local02, objptr
1f4a4     01 20 86 F1 | 	sub	local02, #1
1f4a8     C3 E4 85 F1 | 	sub	objptr, #195
1f4ac     F2 20 42 FC | 	wrbyte	local02, objptr
1f4b0     3E E4 85 F1 | 	sub	objptr, #62
1f4b4                 | LR__2522
1f4b4                 | LR__2523
1f4b4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f4b4     3C E4 05 F1 | 	add	objptr, #60
1f4b8     F2 14 E2 FA | 	rdword	arg02, objptr
1f4bc     02 14 66 F0 | 	shl	arg02, #2
1f4c0     02 E4 05 F1 | 	add	objptr, #2
1f4c4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f4c8     3E E4 85 F1 | 	sub	objptr, #62
1f4cc     04 16 66 F0 | 	shl	arg03, #4
1f4d0     04 16 06 F1 | 	add	arg03, #4
1f4d4     11 12 06 F6 | 	mov	arg01, #17
1f4d8     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1f4dc     A7 F0 03 F6 | 	mov	ptra, fp
1f4e0     B2 00 A0 FD | 	call	#popregs_
1f4e4                 | _hg010b_spin2_putchar_ret
1f4e4     2D 00 64 FD | 	ret
1f4e8                 | 
1f4e8                 | '     
1f4e8                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1f4e8                 | ' 
1f4e8                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1f4e8                 | _hg010b_spin2_putchar2
1f4e8     02 4A 05 F6 | 	mov	COUNT_, #2
1f4ec     A8 00 A0 FD | 	call	#pushregs_
1f4f0     09 1F 02 F6 | 	mov	local01, arg01
1f4f4                 | ' 
1f4f4                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1f4f4     3C E4 05 F1 | 	add	objptr, #60
1f4f8     F2 12 E2 FA | 	rdword	arg01, objptr
1f4fc     02 E4 05 F1 | 	add	objptr, #2
1f500     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f504     04 14 66 F0 | 	shl	arg02, #4
1f508     04 14 06 F1 | 	add	arg02, #4
1f50c     03 E4 05 F1 | 	add	objptr, #3
1f510     F2 18 02 FB | 	rdlong	arg04, objptr
1f514     04 E4 05 F1 | 	add	objptr, #4
1f518     F2 1A 02 FB | 	rdlong	arg05, objptr
1f51c     45 E4 85 F1 | 	sub	objptr, #69
1f520     0F 17 02 F6 | 	mov	arg03, local01
1f524     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
1f528     04 E4 05 F1 | 	add	objptr, #4
1f52c     F2 12 02 FB | 	rdlong	arg01, objptr
1f530     10 00 00 FF 
1f534     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f538     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f53c     3A E4 05 F1 | 	add	objptr, #58
1f540     F2 1A C2 FA | 	rdbyte	arg05, objptr
1f544     0D 17 02 FD | 	qmul	arg03, arg05
1f548                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1f548     10 00 00 FF 
1f54c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f550     02 E4 85 F1 | 	sub	objptr, #2
1f554     F2 20 E2 FA | 	rdword	local02, objptr
1f558     01 20 46 F0 | 	shr	local02, #1
1f55c     0F 15 02 F6 | 	mov	arg02, local01
1f560     01 16 06 F6 | 	mov	arg03, #1
1f564     00 18 06 F6 | 	mov	arg04, #0
1f568     01 1A 06 F6 | 	mov	arg05, #1
1f56c     0B 00 00 FF 
1f570     90 E4 05 F1 | 	add	objptr, ##5776
1f574     18 1E 62 FD | 	getqx	local01
1f578     10 1F 02 F1 | 	add	local01, local02
1f57c     0F 13 02 F1 | 	add	arg01, local01
1f580     9C 08 B0 FD | 	call	#_psram_spin2_fill
1f584                 | ' 
1f584                 | ' cursor_x+=2
1f584     0B 00 00 FF 
1f588     90 E4 85 F1 | 	sub	objptr, ##5776
1f58c     F2 20 E2 FA | 	rdword	local02, objptr
1f590     02 20 06 F1 | 	add	local02, #2
1f594     F2 20 52 FC | 	wrword	local02, objptr
1f598                 | ' if cursor_x>=256
1f598     F2 20 E2 FA | 	rdword	local02, objptr
1f59c     3C E4 85 F1 | 	sub	objptr, #60
1f5a0     00 21 56 F2 | 	cmps	local02, #256 wc
1f5a4     64 00 90 CD |  if_b	jmp	#LR__2531
1f5a8                 | '   cursor_x:=0
1f5a8     3C E4 05 F1 | 	add	objptr, #60
1f5ac     F2 00 58 FC | 	wrword	#0, objptr
1f5b0                 | '   cursor_y+=1
1f5b0     02 E4 05 F1 | 	add	objptr, #2
1f5b4     F2 20 C2 FA | 	rdbyte	local02, objptr
1f5b8     01 20 06 F1 | 	add	local02, #1
1f5bc     F2 20 42 FC | 	wrbyte	local02, objptr
1f5c0                 | '   if cursor_y>st_lines-1
1f5c0     C3 E4 05 F1 | 	add	objptr, #195
1f5c4     F2 20 02 FB | 	rdlong	local02, objptr
1f5c8     01 20 86 F1 | 	sub	local02, #1
1f5cc     C3 E4 85 F1 | 	sub	objptr, #195
1f5d0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f5d4     3E E4 85 F1 | 	sub	objptr, #62
1f5d8     10 17 5A F2 | 	cmps	arg03, local02 wcz
1f5dc     2C 00 90 ED |  if_be	jmp	#LR__2530
1f5e0                 | '     scrollup2()
1f5e0     00 12 06 F6 | 	mov	arg01, #0
1f5e4     01 00 00 FF 
1f5e8     58 14 06 F6 | 	mov	arg02, ##600
1f5ec     10 16 06 F6 | 	mov	arg03, #16
1f5f0     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
1f5f4                 | '     cursor_y:=st_lines-1
1f5f4     01 E5 05 F1 | 	add	objptr, #257
1f5f8     F2 20 02 FB | 	rdlong	local02, objptr
1f5fc     01 20 86 F1 | 	sub	local02, #1
1f600     C3 E4 85 F1 | 	sub	objptr, #195
1f604     F2 20 42 FC | 	wrbyte	local02, objptr
1f608     3E E4 85 F1 | 	sub	objptr, #62
1f60c                 | LR__2530
1f60c                 | LR__2531
1f60c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
1f60c     3C E4 05 F1 | 	add	objptr, #60
1f610     F2 14 E2 FA | 	rdword	arg02, objptr
1f614     02 14 66 F0 | 	shl	arg02, #2
1f618     02 E4 05 F1 | 	add	objptr, #2
1f61c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f620     3E E4 85 F1 | 	sub	objptr, #62
1f624     04 16 66 F0 | 	shl	arg03, #4
1f628     04 16 06 F1 | 	add	arg03, #4
1f62c     11 12 06 F6 | 	mov	arg01, #17
1f630     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
1f634     A7 F0 03 F6 | 	mov	ptra, fp
1f638     B2 00 A0 FD | 	call	#popregs_
1f63c                 | _hg010b_spin2_putchar2_ret
1f63c     2D 00 64 FD | 	ret
1f640                 | 
1f640                 | ' ''--------- Output a string at the cursor position, move the cursor  
1f640                 | ' 
1f640                 | ' pub write(text) | iii,c,ncx,ncy
1f640                 | _hg010b_spin2_write
1f640     04 4A 05 F6 | 	mov	COUNT_, #4
1f644     A8 00 A0 FD | 	call	#pushregs_
1f648     09 1F 02 F6 | 	mov	local01, arg01
1f64c                 | ' 
1f64c                 | ' repeat iii from 0 to strsize(text)-1
1f64c     00 20 06 F6 | 	mov	local02, #0
1f650     0F 13 02 F6 | 	mov	arg01, local01
1f654     09 23 02 F6 | 	mov	local03, arg01
1f658     97 06 48 FB | 	callpa	#(@LR__2541-@LR__2540)>>2,fcache_load_ptr_
1f65c                 | LR__2540
1f65c     11 FB C9 FA | 	rdbyte	result1, local03 wz
1f660     01 22 06 51 |  if_ne	add	local03, #1
1f664     F4 FF 9F 5D |  if_ne	jmp	#LR__2540
1f668                 | LR__2541
1f668     09 23 82 F1 | 	sub	local03, arg01
1f66c     01 22 86 F1 | 	sub	local03, #1
1f670     00 22 56 F2 | 	cmps	local03, #0 wc
1f674     01 24 86 F6 | 	negc	local04, #1
1f678     12 23 02 F1 | 	add	local03, local04
1f67c                 | LR__2542
1f67c                 | '   putchar2(byte[text+iii])
1f67c     0F 13 02 F6 | 	mov	arg01, local01
1f680     10 13 02 F1 | 	add	arg01, local02
1f684     09 13 C2 FA | 	rdbyte	arg01, arg01
1f688     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
1f68c     12 21 02 F1 | 	add	local02, local04
1f690     11 21 0A F2 | 	cmp	local02, local03 wz
1f694     E4 FF 9F 5D |  if_ne	jmp	#LR__2542
1f698     A7 F0 03 F6 | 	mov	ptra, fp
1f69c     B2 00 A0 FD | 	call	#popregs_
1f6a0                 | _hg010b_spin2_write_ret
1f6a0     2D 00 64 FD | 	ret
1f6a4                 | 
1f6a4                 | '    
1f6a4                 | ' ' a version for text scrolling in Basic shifted 4 lines down
1f6a4                 | ' 
1f6a4                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
1f6a4                 | _hg010b_spin2_scrollup2
1f6a4     03 4A 05 F6 | 	mov	COUNT_, #3
1f6a8     A8 00 A0 FD | 	call	#pushregs_
1f6ac                 | ' 	
1f6ac                 | ' repeat i from 4 to 579 
1f6ac     04 1E 06 F6 | 	mov	local01, #4
1f6b0                 | LR__2550
1f6b0     F9 E4 05 F1 | 	add	objptr, #249
1f6b4     F2 1A 02 FB | 	rdlong	arg05, objptr
1f6b8     1C E4 85 F1 | 	sub	objptr, #28
1f6bc     F2 14 02 FB | 	rdlong	arg02, objptr
1f6c0     0F 19 02 F6 | 	mov	arg04, local01
1f6c4     10 18 06 F1 | 	add	arg04, #16
1f6c8     02 18 66 F0 | 	shl	arg04, #2
1f6cc     14 E4 05 F1 | 	add	objptr, #20
1f6d0     F2 16 02 FB | 	rdlong	arg03, objptr
1f6d4     0B 19 02 FD | 	qmul	arg04, arg03
1f6d8                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1f6d8     F6 03 00 FF 
1f6dc     00 12 06 F6 | 	mov	arg01, ##519168
1f6e0     0D 13 82 F1 | 	sub	arg01, arg05
1f6e4     02 16 66 F0 | 	shl	arg03, #2
1f6e8     0A 00 00 FF 
1f6ec     DB E5 05 F1 | 	add	objptr, ##5595
1f6f0     18 1A 62 FD | 	getqx	arg05
1f6f4     0D 15 02 F1 | 	add	arg02, arg05
1f6f8     EC 05 B0 FD | 	call	#_psram_spin2_read1
1f6fc     0A 00 00 FF 
1f700     D3 E5 85 F1 | 	sub	objptr, ##5587
1f704     F2 1A 02 FB | 	rdlong	arg05, objptr
1f708     1C E4 85 F1 | 	sub	objptr, #28
1f70c     F2 14 02 FB | 	rdlong	arg02, objptr
1f710     0F 19 02 F6 | 	mov	arg04, local01
1f714     02 18 66 F0 | 	shl	arg04, #2
1f718     14 E4 05 F1 | 	add	objptr, #20
1f71c     F2 16 02 FB | 	rdlong	arg03, objptr
1f720     0B 19 02 FD | 	qmul	arg04, arg03
1f724                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1f724     F6 03 00 FF 
1f728     00 12 06 F6 | 	mov	arg01, ##519168
1f72c     0D 13 82 F1 | 	sub	arg01, arg05
1f730     02 16 66 F0 | 	shl	arg03, #2
1f734     0A 00 00 FF 
1f738     DB E5 05 F1 | 	add	objptr, ##5595
1f73c     18 1A 62 FD | 	getqx	arg05
1f740     0D 15 02 F1 | 	add	arg02, arg05
1f744     3C 06 B0 FD | 	call	#_psram_spin2_write
1f748     0B 00 00 FF 
1f74c     CC E4 85 F1 | 	sub	objptr, ##5836
1f750     01 1E 06 F1 | 	add	local01, #1
1f754     01 00 00 FF 
1f758     44 1E 16 F2 | 	cmp	local01, ##580 wc
1f75c     50 FF 9F CD |  if_b	jmp	#LR__2550
1f760                 | ' 
1f760                 | ' repeat i from 580 to 599
1f760     01 00 00 FF 
1f764     44 1E 06 F6 | 	mov	local01, ##580
1f768                 | LR__2551
1f768                 | '    fastline(0,1023,i,write_background)   
1f768     45 E4 05 F1 | 	add	objptr, #69
1f76c     F2 18 02 FB | 	rdlong	arg04, objptr
1f770     45 E4 85 F1 | 	sub	objptr, #69
1f774     00 12 06 F6 | 	mov	arg01, #0
1f778     09 14 CE F9 | 	bmask	arg02, #9
1f77c     0F 17 02 F6 | 	mov	arg03, local01
1f780     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
1f784     01 1E 06 F1 | 	add	local01, #1
1f788     01 00 00 FF 
1f78c     58 1E 16 F2 | 	cmp	local01, ##600 wc
1f790     D4 FF 9F CD |  if_b	jmp	#LR__2551
1f794                 | ' repeat i from 0 to 3
1f794     00 1E 06 F6 | 	mov	local01, #0
1f798                 | LR__2552
1f798                 | '    fastline(0,1023,i,write_background)      
1f798     45 E4 05 F1 | 	add	objptr, #69
1f79c     F2 18 02 FB | 	rdlong	arg04, objptr
1f7a0     45 E4 85 F1 | 	sub	objptr, #69
1f7a4     00 12 06 F6 | 	mov	arg01, #0
1f7a8     09 14 CE F9 | 	bmask	arg02, #9
1f7ac     0F 17 02 F6 | 	mov	arg03, local01
1f7b0     90 EF BF FD | 	call	#_hg010b_spin2_fastline
1f7b4     01 1E 06 F1 | 	add	local01, #1
1f7b8     04 1E 56 F2 | 	cmps	local01, #4 wc
1f7bc     D8 FF 9F CD |  if_b	jmp	#LR__2552
1f7c0                 | ' 
1f7c0                 | ' repeat i from 0 to 35
1f7c0     00 1E 06 F6 | 	mov	local01, #0
1f7c4                 | LR__2553
1f7c4     0F 1B 02 F6 | 	mov	arg05, local01
1f7c8     01 1A 06 F1 | 	add	arg05, #1
1f7cc     10 00 00 FF 
1f7d0     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f7d4     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f7d8     0B 1B 02 FD | 	qmul	arg05, arg03
1f7dc                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
1f7dc     F6 03 00 FF 
1f7e0     00 12 06 F6 | 	mov	arg01, ##519168
1f7e4     F9 E4 05 F1 | 	add	objptr, #249
1f7e8     F2 1A 02 FB | 	rdlong	arg05, objptr
1f7ec     0D 13 82 F1 | 	sub	arg01, arg05
1f7f0     F5 E4 85 F1 | 	sub	objptr, #245
1f7f4     F2 14 02 FB | 	rdlong	arg02, objptr
1f7f8     10 00 00 FF 
1f7fc     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f800     0B 00 00 FF 
1f804     C8 E4 05 F1 | 	add	objptr, ##5832
1f808     18 1A 62 FD | 	getqx	arg05
1f80c     0D 15 02 F1 | 	add	arg02, arg05
1f810     D4 04 B0 FD | 	call	#_psram_spin2_read1
1f814     10 00 00 FF 
1f818     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f81c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f820     0B 1F 02 FD | 	qmul	local01, arg03
1f824                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
1f824     F6 03 00 FF 
1f828     00 12 06 F6 | 	mov	arg01, ##519168
1f82c     0A 00 00 FF 
1f830     D3 E5 85 F1 | 	sub	objptr, ##5587
1f834     F2 1A 02 FB | 	rdlong	arg05, objptr
1f838     0D 13 82 F1 | 	sub	arg01, arg05
1f83c     F5 E4 85 F1 | 	sub	objptr, #245
1f840     F2 14 02 FB | 	rdlong	arg02, objptr
1f844     10 00 00 FF 
1f848     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f84c     0B 00 00 FF 
1f850     C8 E4 05 F1 | 	add	objptr, ##5832
1f854     18 1A 62 FD | 	getqx	arg05
1f858     0D 15 02 F1 | 	add	arg02, arg05
1f85c     24 05 B0 FD | 	call	#_psram_spin2_write
1f860     0B 00 00 FF 
1f864     CC E4 85 F1 | 	sub	objptr, ##5836
1f868     01 1E 06 F1 | 	add	local01, #1
1f86c     24 1E 56 F2 | 	cmps	local01, #36 wc
1f870     50 FF 9F CD |  if_b	jmp	#LR__2553
1f874                 | ' repeat i from 0 to timings[7]-1
1f874     00 1E 06 F6 | 	mov	local01, #0
1f878     10 00 00 FF 
1f87c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f880     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1f884     10 00 00 FF 
1f888     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f88c     01 20 86 F1 | 	sub	local02, #1
1f890     00 20 56 F2 | 	cmps	local02, #0 wc
1f894     01 22 86 F6 | 	negc	local03, #1
1f898     11 21 02 F1 | 	add	local02, local03
1f89c                 | LR__2554
1f89c                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
1f89c     04 E4 05 F1 | 	add	objptr, #4
1f8a0     F2 12 02 FB | 	rdlong	arg01, objptr
1f8a4     10 00 00 FF 
1f8a8     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f8ac     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1f8b0     10 00 00 FF 
1f8b4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f8b8     0D 19 02 F6 | 	mov	arg04, arg05
1f8bc     03 18 66 F0 | 	shl	arg04, #3
1f8c0     0D 19 02 F1 | 	add	arg04, arg05
1f8c4     02 18 66 F0 | 	shl	arg04, #2
1f8c8     0F 19 02 F1 | 	add	arg04, local01
1f8cc     0C 13 02 F1 | 	add	arg01, arg04
1f8d0     20 14 06 F6 | 	mov	arg02, #32
1f8d4     01 16 06 F6 | 	mov	arg03, #1
1f8d8     00 18 06 F6 | 	mov	arg04, #0
1f8dc     01 1A 06 F6 | 	mov	arg05, #1
1f8e0     0B 00 00 FF 
1f8e4     C8 E4 05 F1 | 	add	objptr, ##5832
1f8e8     34 05 B0 FD | 	call	#_psram_spin2_fill
1f8ec     0B 00 00 FF 
1f8f0     CC E4 85 F1 | 	sub	objptr, ##5836
1f8f4     11 1F 02 F1 | 	add	local01, local03
1f8f8     10 1F 0A F2 | 	cmp	local01, local02 wz
1f8fc     9C FF 9F 5D |  if_ne	jmp	#LR__2554
1f900     A7 F0 03 F6 | 	mov	ptra, fp
1f904     B2 00 A0 FD | 	call	#popregs_
1f908                 | _hg010b_spin2_scrollup2_ret
1f908     2D 00 64 FD | 	ret
1f90c                 | 
1f90c                 | ' 
1f90c                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
1f90c                 | ' 
1f90c                 | ' pub crlf()
1f90c                 | _hg010b_spin2_crlf
1f90c                 | ' 
1f90c                 | ' cursor_x:=leading_spaces*2
1f90c     01 00 00 FF 
1f910     B6 E4 05 F1 | 	add	objptr, ##694
1f914     F2 16 02 FB | 	rdlong	arg03, objptr
1f918     01 16 66 F0 | 	shl	arg03, #1
1f91c     01 00 00 FF 
1f920     7A E4 85 F1 | 	sub	objptr, ##634
1f924     F2 16 52 FC | 	wrword	arg03, objptr
1f928                 | ' cursor_y+=1
1f928     02 E4 05 F1 | 	add	objptr, #2
1f92c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f930     01 16 06 F1 | 	add	arg03, #1
1f934     F2 16 42 FC | 	wrbyte	arg03, objptr
1f938                 | ' if cursor_y>st_lines-1
1f938     C3 E4 05 F1 | 	add	objptr, #195
1f93c     F2 16 02 FB | 	rdlong	arg03, objptr
1f940     01 16 86 F1 | 	sub	arg03, #1
1f944     C3 E4 85 F1 | 	sub	objptr, #195
1f948     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f94c     3E E4 85 F1 | 	sub	objptr, #62
1f950     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
1f954     2C 00 90 ED |  if_be	jmp	#LR__2560
1f958                 | '   scrollup2()
1f958     00 12 06 F6 | 	mov	arg01, #0
1f95c     01 00 00 FF 
1f960     58 14 06 F6 | 	mov	arg02, ##600
1f964     10 16 06 F6 | 	mov	arg03, #16
1f968     38 FD BF FD | 	call	#_hg010b_spin2_scrollup2
1f96c                 | '   cursor_y:=st_lines-1
1f96c     01 E5 05 F1 | 	add	objptr, #257
1f970     F2 16 02 FB | 	rdlong	arg03, objptr
1f974     01 16 86 F1 | 	sub	arg03, #1
1f978     C3 E4 85 F1 | 	sub	objptr, #195
1f97c     F2 16 42 FC | 	wrbyte	arg03, objptr
1f980     3E E4 85 F1 | 	sub	objptr, #62
1f984                 | LR__2560
1f984                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
1f984     3C E4 05 F1 | 	add	objptr, #60
1f988     F2 14 E2 FA | 	rdword	arg02, objptr
1f98c     02 14 66 F0 | 	shl	arg02, #2
1f990     02 E4 05 F1 | 	add	objptr, #2
1f994     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f998     3E E4 85 F1 | 	sub	objptr, #62
1f99c     04 16 66 F0 | 	shl	arg03, #4
1f9a0     04 16 06 F1 | 	add	arg03, #4
1f9a4     11 12 06 F6 | 	mov	arg01, #17
1f9a8     4C EB BF FD | 	call	#_hg010b_spin2_setspritepos
1f9ac                 | _hg010b_spin2_crlf_ret
1f9ac     2D 00 64 FD | 	ret
1f9b0                 | 
1f9b0                 | ' 
1f9b0                 | ' 
1f9b0                 | ' '*************************************************************************
1f9b0                 | ' '                                                                        *
1f9b0                 | ' '  Conversions                                                           *
1f9b0                 | ' '                                                                        *
1f9b0                 | ' '*************************************************************************
1f9b0                 | ' 
1f9b0                 | ' ''---------- Convert a integer to dec string, return a pointer
1f9b0                 | ' 
1f9b0                 | ' pub inttostr(i):result |q,pos,k,j
1f9b0                 | _hg010b_spin2_inttostr
1f9b0     03 4A 05 F6 | 	mov	COUNT_, #3
1f9b4     A8 00 A0 FD | 	call	#pushregs_
1f9b8     09 1F 0A F6 | 	mov	local01, arg01 wz
1f9bc                 | ' 
1f9bc                 | ' j:=i
1f9bc                 | ' pos:=10
1f9bc     0A 20 06 F6 | 	mov	local02, #10
1f9c0                 | ' k:=0
1f9c0     00 22 06 F6 | 	mov	local03, #0
1f9c4                 | ' 
1f9c4                 | ' if (j==0)
1f9c4     18 00 90 5D |  if_ne	jmp	#LR__2570
1f9c8                 | '   n_string[0]:=48
1f9c8     4D E4 05 F1 | 	add	objptr, #77
1f9cc     F2 60 48 FC | 	wrbyte	#48, objptr
1f9d0                 | '   n_string[1]:=0
1f9d0     01 E4 05 F1 | 	add	objptr, #1
1f9d4     F2 00 48 FC | 	wrbyte	#0, objptr
1f9d8     4E E4 85 F1 | 	sub	objptr, #78
1f9dc     C4 00 90 FD | 	jmp	#LR__2577
1f9e0                 | LR__2570
1f9e0                 | ' 
1f9e0                 | ' else
1f9e0                 | '   if (j<0)
1f9e0     0F 1F 52 F6 | 	abs	local01, local01 wc
1f9e4                 | '     j:=0-j
1f9e4                 | '     k:=45
1f9e4     2D 22 06 C6 |  if_b	mov	local03, #45
1f9e8                 | ' 
1f9e8                 | '   n_string[11]:=0
1f9e8     58 E4 05 F1 | 	add	objptr, #88
1f9ec     F2 00 48 FC | 	wrbyte	#0, objptr
1f9f0     58 E4 85 F1 | 	sub	objptr, #88
1f9f4     97 24 48 FB | 	callpa	#(@LR__2572-@LR__2571)>>2,fcache_load_ptr_
1f9f8                 | '   repeat while (pos>-1)
1f9f8                 | LR__2571
1f9f8     00 20 56 F2 | 	cmps	local02, #0 wc
1f9fc     40 00 90 CD |  if_b	jmp	#LR__2573
1fa00     0F FB 51 F6 | 	abs	result1, local01 wc
1fa04     0A FA 15 FD | 	qdiv	result1, #10
1fa08                 | '     q:=j//10
1fa08     19 FA 61 FD | 	getqy	result1
1fa0c     FD FA 81 F6 | 	negc	result1, result1
1fa10     0F 1F 52 F6 | 	abs	local01, local01 wc
1fa14     0A 1E 16 FD | 	qdiv	local01, #10
1fa18                 | '     q:=48+q
1fa18     30 FA 05 F1 | 	add	result1, #48
1fa1c                 | '     n_string[pos]:=q
1fa1c     10 1F 02 F6 | 	mov	local01, local02
1fa20     4D E4 05 F1 | 	add	objptr, #77
1fa24     F2 1E 02 F1 | 	add	local01, objptr
1fa28     0F FB 41 FC | 	wrbyte	result1, local01
1fa2c                 | '     j:=j/10
1fa2c     4D E4 85 F1 | 	sub	objptr, #77
1fa30                 | '     pos-=1
1fa30     01 20 86 F1 | 	sub	local02, #1
1fa34     18 1E 62 FD | 	getqx	local01
1fa38     0F 1F 82 F6 | 	negc	local01, local01
1fa3c     B8 FF 9F FD | 	jmp	#LR__2571
1fa40                 | LR__2572
1fa40                 | LR__2573
1fa40                 | '   repeat while n_string[0]==48
1fa40                 | LR__2574
1fa40     4D E4 05 F1 | 	add	objptr, #77
1fa44     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fa48     4D E4 85 F1 | 	sub	objptr, #77
1fa4c     30 16 0E F2 | 	cmp	arg03, #48 wz
1fa50     20 00 90 5D |  if_ne	jmp	#LR__2575
1fa54                 | '     bytemove(@n_string,@n_string+1,12)
1fa54     4D E4 05 F1 | 	add	objptr, #77
1fa58     F2 12 02 F6 | 	mov	arg01, objptr
1fa5c     F2 14 02 F6 | 	mov	arg02, objptr
1fa60     4D E4 85 F1 | 	sub	objptr, #77
1fa64     01 14 06 F1 | 	add	arg02, #1
1fa68     0C 16 06 F6 | 	mov	arg03, #12
1fa6c     D8 0D B0 FD | 	call	#__system____builtin_memmove
1fa70     CC FF 9F FD | 	jmp	#LR__2574
1fa74                 | LR__2575
1fa74                 | ' 
1fa74                 | '   if k==45
1fa74     2D 22 0E F2 | 	cmp	local03, #45 wz
1fa78     28 00 90 5D |  if_ne	jmp	#LR__2576
1fa7c                 | '      bytemove(@n_string+1,@n_string,12)
1fa7c     4D E4 05 F1 | 	add	objptr, #77
1fa80     F2 12 02 F6 | 	mov	arg01, objptr
1fa84     01 12 06 F1 | 	add	arg01, #1
1fa88     F2 14 02 F6 | 	mov	arg02, objptr
1fa8c     4D E4 85 F1 | 	sub	objptr, #77
1fa90     0C 16 06 F6 | 	mov	arg03, #12
1fa94     B0 0D B0 FD | 	call	#__system____builtin_memmove
1fa98                 | '      n_string[0]:=k
1fa98     4D E4 05 F1 | 	add	objptr, #77
1fa9c     F2 22 42 FC | 	wrbyte	local03, objptr
1faa0     4D E4 85 F1 | 	sub	objptr, #77
1faa4                 | LR__2576
1faa4                 | LR__2577
1faa4                 | ' 
1faa4                 | ' q:=@n_string
1faa4     4D E4 05 F1 | 	add	objptr, #77
1faa8     F2 FA 01 F6 | 	mov	result1, objptr
1faac     4D E4 85 F1 | 	sub	objptr, #77
1fab0                 | ' return q
1fab0     A7 F0 03 F6 | 	mov	ptra, fp
1fab4     B2 00 A0 FD | 	call	#popregs_
1fab8                 | _hg010b_spin2_inttostr_ret
1fab8     2D 00 64 FD | 	ret
1fabc                 | 
1fabc                 | ' 
1fabc                 | ' '..............................................................................
1fabc                 | ' 
1fabc                 | ' {{
1fabc                 | ' }}
1fabc                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
1fabc                 | _psram_spin2_startx
1fabc     04 4A 05 F6 | 	mov	COUNT_, #4
1fac0     A8 00 A0 FD | 	call	#pushregs_
1fac4     09 1F 02 F6 | 	mov	local01, arg01
1fac8     0B 21 02 F6 | 	mov	local02, arg03
1facc     0C 23 02 F6 | 	mov	local03, arg04
1fad0                 | '     stop() ' restart driver if required
1fad0     54 01 B0 FD | 	call	#_psram_spin2_stop
1fad4     00 1E 0E F2 | 	cmp	local01, #0 wz
1fad8     14 1E 06 AB |  if_e	rdlong	local01, #20
1fadc     0F 15 52 F6 | 	abs	arg02, local01 wc
1fae0     A1 07 00 FF 
1fae4     40 14 16 FD | 	qdiv	arg02, ##1000000
1fae8                 | ' 
1fae8                 | '     ' use current frequency if none specified
1fae8                 | ' 
1fae8                 | '     if freq == 0 
1fae8                 | '         freq := clkfreq 
1fae8                 | ' 
1fae8                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
1fae8                 | ' 
1fae8                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
1fae8                 | '     if burst < 0
1fae8                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
1fae8     18 14 62 FD | 	getqx	arg02
1faec     0A 19 82 F6 | 	negc	arg04, arg02
1faf0     03 18 66 F0 | 	shl	arg04, #3
1faf4     84 18 86 F1 | 	sub	arg04, #132
1faf8     04 18 46 F0 | 	shr	arg04, #4
1fafc     04 18 66 F0 | 	shl	arg04, #4
1fb00     00 18 56 F2 | 	cmps	arg04, #0 wc
1fb04     0E FA 65 C6 |  if_b	neg	result1, #14
1fb08     10 01 90 CD |  if_b	jmp	#LR__2583
1fb0c                 | ' 
1fb0c                 | '     ' compute the input delay
1fb0c                 | ' 
1fb0c                 | '     if delay <= 0
1fb0c     01 20 56 F2 | 	cmps	local02, #1 wc
1fb10     10 00 90 3D |  if_ae	jmp	#LR__2580
1fb14                 | '         delay := lookupDelay(freq)
1fb14     0F 13 02 F6 | 	mov	arg01, local01
1fb18     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
1fb1c     FD 20 02 F6 | 	mov	local02, result1
1fb20     04 00 90 FD | 	jmp	#LR__2581
1fb24                 | LR__2580
1fb24                 | '     else
1fb24                 | '         delay <#= $f ' limit to 15
1fb24     0F 20 66 F3 | 	fles	local02, #15
1fb28                 | LR__2581
1fb28                 | ' 
1fb28                 | '     ' create our lock
1fb28                 | ' 
1fb28                 | '     driverlock := LOCKNEW()  
1fb28     00 FA 05 F6 | 	mov	result1, #0
1fb2c     04 FA 61 FD | 	locknew	result1
1fb30     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1fb34     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
1fb38                 | '     if driverlock == -1
1fb38     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1fb3c     FF FF 7F FF 
1fb40     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1fb44                 | '         return ERR_NO_LOCK
1fb44     1A FA 65 A6 |  if_e	neg	result1, #26
1fb48     D0 00 90 AD |  if_e	jmp	#LR__2583
1fb4c                 | ' 
1fb4c                 | '     ' patch in the proper data and HUB addresses to the startup structure
1fb4c                 | ' 
1fb4c                 | '     long[@startupData][0]:=clkfreq
1fb4c     14 1E 06 FB | 	rdlong	local01, #20
1fb50     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
1fb54     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
1fb58                 | ' '    long[@startupData][1]:=$1000_0000
1fb58                 | '     long[@startupData][5]:=@deviceData
1fb58     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1fb5c     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1fb60     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
1fb64     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1fb68     14 14 06 F1 | 	add	arg02, #20
1fb6c     0A 1F 62 FC | 	wrlong	local01, arg02
1fb70                 | '     long[@startupData][6]:=@qosData
1fb70     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
1fb74     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1fb78     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1fb7c     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1fb80     18 14 06 F1 | 	add	arg02, #24
1fb84     0A 1F 62 FC | 	wrlong	local01, arg02
1fb88                 | '     long[@startupData][7]:=$7FF00
1fb88     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1fb8c     1C 1E 06 F1 | 	add	local01, #28
1fb90     FF 03 80 FF 
1fb94     0F 01 6A FC | 	wrlong	##524032, local01
1fb98                 | ' 
1fb98                 | '     ' setup some default bank and QoS parameter values
1fb98                 | ' 
1fb98                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
1fb98     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1fb9c     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1fba0     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
1fba4     10 18 66 F0 | 	shl	arg04, #16
1fba8     0C 20 66 F0 | 	shl	local02, #12
1fbac     10 19 42 F5 | 	or	arg04, local02
1fbb0     18 18 46 F5 | 	or	arg04, #24
1fbb4     0C 15 02 F6 | 	mov	arg02, arg04
1fbb8     02 16 06 F6 | 	mov	arg03, #2
1fbbc     A0 00 A0 FD | 	call	#\builtin_longfill_
1fbc0                 | '     longfill(@qosData, $FFFF0000, 8)
1fbc0     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1fbc4     07 16 06 F6 | 	mov	arg03, #7
1fbc8     28 16 62 FD | 	setq	arg03
1fbcc     80 FF FF FF 
1fbd0     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
1fbd4                 | ' 
1fbd4                 | '     ' get the address of the PSRAM memory driver so we can start it
1fbd4                 | ' 
1fbd4                 | '     driverAddr:= driver.getDriverAddr()
1fbd4                 | '     return @driver_start
1fbd4     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
1fbd8     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1fbdc     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
1fbe0                 | ' 
1fbe0                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
1fbe0                 | ' 
1fbe0                 | '     if desiredcog < 0
1fbe0     00 22 56 F2 | 	cmps	local03, #0 wc
1fbe4                 | '         desiredcog := NEWCOG
1fbe4     10 22 06 C6 |  if_b	mov	local03, #16
1fbe8                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1fbe8     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1fbec     11 25 02 F6 | 	mov	local04, local03
1fbf0     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
1fbf4     0A 25 F2 FC | 	coginit	local04, arg02 wc
1fbf8     01 24 66 C6 |  if_b	neg	local04, #1
1fbfc     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1fc00     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
1fc04                 | '     repeat until long[@startupData] == 0 
1fc04     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1fc08                 | LR__2582
1fc08     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
1fc0c     F8 FF 9F 5D |  if_ne	jmp	#LR__2582
1fc10                 | ' 
1fc10                 | '     return drivercog
1fc10     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1fc14     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
1fc18     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fc1c                 | LR__2583
1fc1c     A7 F0 03 F6 | 	mov	ptra, fp
1fc20     B2 00 A0 FD | 	call	#popregs_
1fc24                 | _psram_spin2_startx_ret
1fc24     2D 00 64 FD | 	ret
1fc28                 | 
1fc28                 | ' 
1fc28                 | ' '..............................................................................
1fc28                 | ' 
1fc28                 | ' {{
1fc28                 | ' }}
1fc28                 | ' PUB stop() : i
1fc28                 | _psram_spin2_stop
1fc28     00 00 06 F6 | 	mov	_var01, #0
1fc2c                 | '     if drivercog <> -1
1fc2c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fc30     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1fc34     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fc38     FF FF 7F FF 
1fc3c     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1fc40     70 00 90 AD |  if_e	jmp	#LR__2593
1fc44                 | '         cogstop(drivercog) ' a rather brutal stop
1fc44     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fc48     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1fc4c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fc50     03 12 62 FD | 	cogstop	arg01
1fc54     97 26 48 FB | 	callpa	#(@LR__2592-@LR__2590)>>2,fcache_load_ptr_
1fc58                 | '         repeat i from 0 to 7
1fc58                 | LR__2590
1fc58                 | '             if long[$7FF00][i*3] < 0
1fc58     00 FB 01 F6 | 	mov	result1, _var01
1fc5c     01 FA 65 F0 | 	shl	result1, #1
1fc60     00 FB 01 F1 | 	add	result1, _var01
1fc64     02 FA 65 F0 | 	shl	result1, #2
1fc68     FF 03 00 FF 
1fc6c     00 FB 05 F1 | 	add	result1, ##524032
1fc70     FD FA 01 FB | 	rdlong	result1, result1
1fc74     00 FA 55 F2 | 	cmps	result1, #0 wc
1fc78     1C 00 90 3D |  if_ae	jmp	#LR__2591
1fc7c                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1fc7c     00 FB 01 F6 | 	mov	result1, _var01
1fc80     01 FA 65 F0 | 	shl	result1, #1
1fc84     00 FB 01 F1 | 	add	result1, _var01
1fc88     02 FA 65 F0 | 	shl	result1, #2
1fc8c     FF 03 00 FF 
1fc90     00 FB 05 F1 | 	add	result1, ##524032
1fc94     FD 20 68 FC | 	wrlong	#16, result1
1fc98                 | LR__2591
1fc98     01 00 06 F1 | 	add	_var01, #1
1fc9c     08 00 56 F2 | 	cmps	_var01, #8 wc
1fca0     B4 FF 9F CD |  if_b	jmp	#LR__2590
1fca4                 | LR__2592
1fca4                 | '         drivercog := -1
1fca4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fca8     FF FF FF FF 
1fcac     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1fcb0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fcb4                 | LR__2593
1fcb4                 | '     if driverlock <> -1
1fcb4     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1fcb8     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1fcbc     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1fcc0     FF FF 7F FF 
1fcc4     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1fcc8                 | '         LOCKRET(driverlock)
1fcc8     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1fccc     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
1fcd0     05 12 62 5D |  if_ne	lockret	arg01
1fcd4                 | '         driverlock := -1
1fcd4     FF FF FF 5F 
1fcd8     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1fcdc     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
1fce0     00 FB 01 F6 | 	mov	result1, _var01
1fce4                 | _psram_spin2_stop_ret
1fce4     2D 00 64 FD | 	ret
1fce8                 | 
1fce8                 | ' 
1fce8                 | ' '..............................................................................
1fce8                 | ' 
1fce8                 | ' {{
1fce8                 | ' }}
1fce8                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1fce8                 | _psram_spin2_read1
1fce8                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1fce8                 | '     if drivercog == -1 ' driver must be running
1fce8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fcec     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1fcf0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fcf4     FF FF 7F FF 
1fcf8     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1fcfc                 | '         return ERR_INACTIVE
1fcfc     0F FA 65 A6 |  if_e	neg	result1, #15
1fd00     7C 00 90 AD |  if_e	jmp	#LR__2601
1fd04                 | '     if count == 0 ' don't even bother reading
1fd04     00 16 0E F2 | 	cmp	arg03, #0 wz
1fd08                 | '         return 0
1fd08     00 FA 05 A6 |  if_e	mov	result1, #0
1fd0c     70 00 90 AD |  if_e	jmp	#LR__2601
1fd10                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1fd10     00 FA 05 F6 | 	mov	result1, #0
1fd14     01 FA 61 FD | 	cogid	result1
1fd18     FD 00 02 F6 | 	mov	_var01, result1
1fd1c     01 00 66 F0 | 	shl	_var01, #1
1fd20     FD 00 02 F1 | 	add	_var01, result1
1fd24     02 00 66 F0 | 	shl	_var01, #2
1fd28     FF 03 00 FF 
1fd2c     00 03 06 F6 | 	mov	_var02, ##524032
1fd30     00 03 02 F1 | 	add	_var02, _var01
1fd34                 | '     if long[mailbox] < 0
1fd34     01 01 02 FB | 	rdlong	_var01, _var02
1fd38     00 00 56 F2 | 	cmps	_var01, #0 wc
1fd3c                 | '         return ERR_MAILBOX_BUSY
1fd3c     1C FA 65 C6 |  if_b	neg	result1, #28
1fd40     3C 00 90 CD |  if_b	jmp	#LR__2601
1fd44                 | '     long[mailbox][2] := count
1fd44     08 02 06 F1 | 	add	_var02, #8
1fd48     01 17 62 FC | 	wrlong	arg03, _var02
1fd4c                 | '     long[mailbox][1] := dstHubAddr
1fd4c     04 02 86 F1 | 	sub	_var02, #4
1fd50     01 13 62 FC | 	wrlong	arg01, _var02
1fd54     04 02 86 F1 | 	sub	_var02, #4
1fd58                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
1fd58     0A 05 02 F6 | 	mov	_var03, arg02
1fd5c     D9 04 06 F4 | 	bitl	_var03, #217
1fd60     00 00 58 FF 
1fd64     00 00 06 F6 | 	mov	_var01, ##-1342177280
1fd68     02 01 02 F1 | 	add	_var01, _var03
1fd6c     01 01 62 FC | 	wrlong	_var01, _var02
1fd70                 | '     repeat
1fd70                 | LR__2600
1fd70                 | '         result := long[mailbox]    
1fd70     01 05 02 FB | 	rdlong	_var03, _var02
1fd74     00 04 56 F2 | 	cmps	_var03, #0 wc
1fd78     F4 FF 9F CD |  if_b	jmp	#LR__2600
1fd7c                 | '     while result < 0   
1fd7c                 | '     return -result                       'return success or error
1fd7c     02 FB 61 F6 | 	neg	result1, _var03
1fd80                 | LR__2601
1fd80                 | _psram_spin2_read1_ret
1fd80     2D 00 64 FD | 	ret
1fd84                 | 
1fd84                 | ' 
1fd84                 | ' '..............................................................................
1fd84                 | ' 
1fd84                 | ' {{
1fd84                 | ' }}
1fd84                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
1fd84                 | _psram_spin2_write
1fd84                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1fd84                 | '     if drivercog == -1 ' driver must be running
1fd84     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fd88     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1fd8c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fd90     FF FF 7F FF 
1fd94     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1fd98                 | '         return ERR_INACTIVE
1fd98     0F FA 65 A6 |  if_e	neg	result1, #15
1fd9c     7C 00 90 AD |  if_e	jmp	#LR__2611
1fda0                 | '     if count == 0 ' don't even bother writing
1fda0     00 16 0E F2 | 	cmp	arg03, #0 wz
1fda4                 | '         return 0
1fda4     00 FA 05 A6 |  if_e	mov	result1, #0
1fda8     70 00 90 AD |  if_e	jmp	#LR__2611
1fdac                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1fdac     00 FA 05 F6 | 	mov	result1, #0
1fdb0     01 FA 61 FD | 	cogid	result1
1fdb4     FD 00 02 F6 | 	mov	_var01, result1
1fdb8     01 00 66 F0 | 	shl	_var01, #1
1fdbc     FD 00 02 F1 | 	add	_var01, result1
1fdc0     02 00 66 F0 | 	shl	_var01, #2
1fdc4     FF 03 00 FF 
1fdc8     00 03 06 F6 | 	mov	_var02, ##524032
1fdcc     00 03 02 F1 | 	add	_var02, _var01
1fdd0                 | '     if long[mailbox] < 0
1fdd0     01 01 02 FB | 	rdlong	_var01, _var02
1fdd4     00 00 56 F2 | 	cmps	_var01, #0 wc
1fdd8                 | '         return ERR_MAILBOX_BUSY
1fdd8     1C FA 65 C6 |  if_b	neg	result1, #28
1fddc     3C 00 90 CD |  if_b	jmp	#LR__2611
1fde0                 | '     long[mailbox][2] := count
1fde0     08 02 06 F1 | 	add	_var02, #8
1fde4     01 17 62 FC | 	wrlong	arg03, _var02
1fde8                 | '     long[mailbox][1] := srcHubAddr
1fde8     04 02 86 F1 | 	sub	_var02, #4
1fdec     01 13 62 FC | 	wrlong	arg01, _var02
1fdf0     04 02 86 F1 | 	sub	_var02, #4
1fdf4                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
1fdf4     0A 05 02 F6 | 	mov	_var03, arg02
1fdf8     D9 04 06 F4 | 	bitl	_var03, #217
1fdfc     00 00 78 FF 
1fe00     00 00 06 F6 | 	mov	_var01, ##-268435456
1fe04     02 01 02 F1 | 	add	_var01, _var03
1fe08     01 01 62 FC | 	wrlong	_var01, _var02
1fe0c                 | '     repeat
1fe0c                 | LR__2610
1fe0c                 | '         result := long[mailbox]    
1fe0c     01 05 02 FB | 	rdlong	_var03, _var02
1fe10     00 04 56 F2 | 	cmps	_var03, #0 wc
1fe14     F4 FF 9F CD |  if_b	jmp	#LR__2610
1fe18                 | '     while result < 0   
1fe18                 | '     return -result                       'return success or error
1fe18     02 FB 61 F6 | 	neg	result1, _var03
1fe1c                 | LR__2611
1fe1c                 | _psram_spin2_write_ret
1fe1c     2D 00 64 FD | 	ret
1fe20                 | 
1fe20                 | ' 
1fe20                 | ' ' generalized fill
1fe20                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
1fe20                 | _psram_spin2_fill
1fe20     09 01 02 F6 | 	mov	_var01, arg01
1fe24     0A 03 02 F6 | 	mov	_var02, arg02
1fe28     0B 05 02 F6 | 	mov	_var03, arg03
1fe2c     0D 07 02 F6 | 	mov	_var04, arg05
1fe30                 | '     case datasize 
1fe30     01 06 86 F1 | 	sub	_var04, #1
1fe34     04 06 26 F3 | 	fle	_var04, #4
1fe38     30 06 62 FD | 	jmprel	_var04
1fe3c                 | LR__2620
1fe3c     10 00 90 FD | 	jmp	#LR__2621
1fe40     18 00 90 FD | 	jmp	#LR__2622
1fe44     2C 00 90 FD | 	jmp	#LR__2624
1fe48     1C 00 90 FD | 	jmp	#LR__2623
1fe4c     24 00 90 FD | 	jmp	#LR__2624
1fe50                 | LR__2621
1fe50                 | '         1: req := driver.R_WRITEBYTE
1fe50     00 00 60 FF 
1fe54     00 08 06 F6 | 	mov	_var05, ##-1073741824
1fe58     20 00 90 FD | 	jmp	#LR__2625
1fe5c                 | LR__2622
1fe5c                 | '         2: req := driver.R_WRITEWORD
1fe5c     00 00 68 FF 
1fe60     00 08 06 F6 | 	mov	_var05, ##-805306368
1fe64     14 00 90 FD | 	jmp	#LR__2625
1fe68                 | LR__2623
1fe68                 | '         4: req := driver.R_WRITELONG
1fe68     00 00 70 FF 
1fe6c     00 08 06 F6 | 	mov	_var05, ##-536870912
1fe70     08 00 90 FD | 	jmp	#LR__2625
1fe74                 | LR__2624
1fe74                 | '         other : return ERR_INVALID
1fe74     06 FA 65 F6 | 	neg	result1, #6
1fe78     94 00 90 FD | 	jmp	#LR__2627
1fe7c                 | LR__2625
1fe7c                 | '     if count == 0   ' nothing to do
1fe7c     00 04 0E F2 | 	cmp	_var03, #0 wz
1fe80                 | '         return 0
1fe80     00 FA 05 A6 |  if_e	mov	result1, #0
1fe84     88 00 90 AD |  if_e	jmp	#LR__2627
1fe88                 | '     if drivercog == -1
1fe88     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fe8c     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
1fe90     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fe94     FF FF 7F FF 
1fe98     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
1fe9c                 | '         return ERR_INACTIVE
1fe9c     0F FA 65 A6 |  if_e	neg	result1, #15
1fea0     6C 00 90 AD |  if_e	jmp	#LR__2627
1fea4                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
1fea4     00 FA 05 F6 | 	mov	result1, #0
1fea8     01 FA 61 FD | 	cogid	result1
1feac     FD 06 02 F6 | 	mov	_var04, result1
1feb0     01 06 66 F0 | 	shl	_var04, #1
1feb4     FD 06 02 F1 | 	add	_var04, result1
1feb8     02 06 66 F0 | 	shl	_var04, #2
1febc     FF 03 00 FF 
1fec0     00 0B 06 F6 | 	mov	_var06, ##524032
1fec4     03 0B 02 F1 | 	add	_var06, _var04
1fec8                 | '     if long[mailbox] < 0
1fec8     05 07 02 FB | 	rdlong	_var04, _var06
1fecc     00 06 56 F2 | 	cmps	_var04, #0 wc
1fed0                 | '         return ERR_MAILBOX_BUSY
1fed0     1C FA 65 C6 |  if_b	neg	result1, #28
1fed4     38 00 90 CD |  if_b	jmp	#LR__2627
1fed8                 | '     long[mailbox][2] := count
1fed8     08 0A 06 F1 | 	add	_var06, #8
1fedc     05 05 62 FC | 	wrlong	_var03, _var06
1fee0                 | '     long[mailbox][1] := pattern
1fee0     04 0A 86 F1 | 	sub	_var06, #4
1fee4     05 03 62 FC | 	wrlong	_var02, _var06
1fee8     04 0A 86 F1 | 	sub	_var06, #4
1feec                 | '     long[mailbox] := req + (addr & $1ffffff)
1feec     04 0D 02 F6 | 	mov	_var07, _var05
1fef0     00 0F 02 F6 | 	mov	_var08, _var01
1fef4     D9 0E 06 F4 | 	bitl	_var08, #217
1fef8     07 0D 02 F1 | 	add	_var07, _var08
1fefc     05 0D 62 FC | 	wrlong	_var07, _var06
1ff00                 | '     repeat
1ff00                 | LR__2626
1ff00                 | '         r := long[mailbox]
1ff00     05 0F 02 FB | 	rdlong	_var08, _var06
1ff04     00 0E 56 F2 | 	cmps	_var08, #0 wc
1ff08     F4 FF 9F CD |  if_b	jmp	#LR__2626
1ff0c                 | '     while r < 0
1ff0c                 | '     return -r                  ' return 0 for success or negated error code
1ff0c     07 FB 61 F6 | 	neg	result1, _var08
1ff10                 | LR__2627
1ff10                 | _psram_spin2_fill_ret
1ff10     2D 00 64 FD | 	ret
1ff14                 | 
1ff14                 | ' 
1ff14                 | ' '..............................................................................
1ff14                 | ' 
1ff14                 | ' {{
1ff14                 | ' }}
1ff14                 | ' PUB setQos(cog, qos) : result | mailbox
1ff14                 | _psram_spin2_setQos
1ff14     09 01 02 F6 | 	mov	_var01, arg01
1ff18                 | '     if drivercog == -1 ' driver must be running
1ff18     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1ff1c     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1ff20     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1ff24     FF FF 7F FF 
1ff28     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1ff2c                 | '         return ERR_INACTIVE
1ff2c     0F FA 65 A6 |  if_e	neg	result1, #15
1ff30     9C 00 90 AD |  if_e	jmp	#LR__2634
1ff34                 | '     if cog < 0 or cog > 7 ' enforce cog id range
1ff34     00 00 56 F2 | 	cmps	_var01, #0 wc
1ff38     08 00 90 CD |  if_b	jmp	#LR__2630
1ff3c     08 00 56 F2 | 	cmps	_var01, #8 wc
1ff40     08 00 90 CD |  if_b	jmp	#LR__2631
1ff44                 | LR__2630
1ff44                 | '         return ERR_INVALID
1ff44     06 FA 65 F6 | 	neg	result1, #6
1ff48     84 00 90 FD | 	jmp	#LR__2634
1ff4c                 | LR__2631
1ff4c                 | '     long[@qosData][cog] := qos & !$1ff
1ff4c     FF 15 26 F5 | 	andn	arg02, #511
1ff50     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1ff54     02 00 66 F0 | 	shl	_var01, #2
1ff58     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
1ff5c     00 15 62 FC | 	wrlong	arg02, _var01
1ff60                 | '     mailbox := $7FF00 + drivercog*12
1ff60     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
1ff64     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
1ff68     02 07 02 F6 | 	mov	_var04, _var03
1ff6c     01 06 66 F0 | 	shl	_var04, #1
1ff70     02 07 02 F1 | 	add	_var04, _var03
1ff74     02 06 66 F0 | 	shl	_var04, #2
1ff78     FF 03 00 FF 
1ff7c     00 09 06 F6 | 	mov	_var05, ##524032
1ff80     03 09 02 F1 | 	add	_var05, _var04
1ff84                 | '     repeat until LOCKTRY(driverlock)
1ff84     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
1ff88                 | LR__2632
1ff88     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1ff8c     06 12 72 FD | 	locktry	arg01 wc
1ff90     F4 FF 9F 3D |  if_ae	jmp	#LR__2632
1ff94     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1ff98                 | '     long[mailbox] := driver.R_CONFIG + cogid()
1ff98     00 06 06 F6 | 	mov	_var04, #0
1ff9c     01 06 62 FD | 	cogid	_var04
1ffa0     00 00 78 FF 
1ffa4     00 02 06 F6 | 	mov	_var02, ##-268435456
1ffa8     03 03 02 F1 | 	add	_var02, _var04
1ffac     04 03 62 FC | 	wrlong	_var02, _var05
1ffb0                 | '     repeat while long[mailbox] < 0
1ffb0                 | LR__2633
1ffb0     04 03 02 FB | 	rdlong	_var02, _var05
1ffb4     00 02 56 F2 | 	cmps	_var02, #0 wc
1ffb8     F4 FF 9F CD |  if_b	jmp	#LR__2633
1ffbc                 | '     LOCKREL(driverlock)
1ffbc     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1ffc0     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1ffc4     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1ffc8     07 12 72 FD | 	lockrel	arg01 wc
1ffcc     00 FA 05 F6 | 	mov	result1, #0
1ffd0                 | LR__2634
1ffd0                 | _psram_spin2_setQos_ret
1ffd0     2D 00 64 FD | 	ret
1ffd4                 | 
1ffd4                 | ' 
1ffd4                 | ' '..............................................................................
1ffd4                 | ' 
1ffd4                 | ' {{
1ffd4                 | ' }}
1ffd4                 | ' PRI lookupDelay(freq) : delay | profile
1ffd4                 | _psram_spin2_lookupDelay
1ffd4                 | '     profile := @delayTable
1ffd4     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
1ffd8     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
1ffdc                 | '     delay := long[profile][0]
1ffdc     00 03 02 FB | 	rdlong	_var02, _var01
1ffe0                 | '     repeat while long[profile][1] 
1ffe0     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
1ffe4     97 16 48 FB | 	callpa	#(@LR__2641-@LR__2640)>>2,fcache_load_ptr_
1ffe8                 | LR__2640
1ffe8     04 00 06 F1 | 	add	_var01, #4
1ffec     00 FB 09 FB | 	rdlong	result1, _var01 wz
1fff0     04 00 86 F1 | 	sub	_var01, #4
1fff4     1C 00 90 AD |  if_e	jmp	#LR__2642
1fff8                 | '         if freq +< long[profile][1] 
1fff8     04 00 06 F1 | 	add	_var01, #4
1fffc     00 FB 01 FB | 	rdlong	result1, _var01
20000     04 00 86 F1 | 	sub	_var01, #4
20004     FD 12 12 F2 | 	cmp	arg01, result1 wc
20008                 | '             quit
20008                 | '         profile += 4
20008     04 00 06 31 |  if_ae	add	_var01, #4
2000c                 | '         delay++
2000c     01 02 06 31 |  if_ae	add	_var02, #1
20010     D4 FF 9F 3D |  if_ae	jmp	#LR__2640
20014                 | LR__2641
20014                 | LR__2642
20014     01 FB 01 F6 | 	mov	result1, _var02
20018                 | _psram_spin2_lookupDelay_ret
20018     2D 00 64 FD | 	ret
2001c                 | 
2001c                 | ' 
2001c                 | ' PUB start() : r
2001c                 | _usbnew_spin2_start
2001c     00 00 06 F6 | 	mov	_var01, #0
20020                 | '   ifnot driver_cog
20020     15 00 00 FF 
20024     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
20028     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
2002c     15 00 00 FF 
20030     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
20034     38 00 90 5D |  if_ne	jmp	#LR__2650
20038                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
20038     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
2003c     10 00 06 F6 | 	mov	_var01, #16
20040     00 16 06 F6 | 	mov	arg03, #0
20044     28 16 62 FD | 	setq	arg03
20048     0A 01 F2 FC | 	coginit	_var01, arg02 wc
2004c     01 00 66 C6 |  if_b	neg	_var01, #1
20050                 | '     if r >= 0
20050     00 00 56 F2 | 	cmps	_var01, #0 wc
20054                 | '       driver_cog := r+1
20054     00 03 02 36 |  if_ae	mov	_var02, _var01
20058     01 02 06 31 |  if_ae	add	_var02, #1
2005c     15 00 00 3F 
20060     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
20064     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
20068     15 00 00 3F 
2006c     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
20070                 | LR__2650
20070     00 FB 01 F6 | 	mov	result1, _var01
20074                 | _usbnew_spin2_start_ret
20074     2D 00 64 FD | 	ret
20078                 | 
20078                 | '     '' (Always enabled)
20078                 | ' 
20078                 | ' '' Get current pressed state of a keyboard key
20078                 | ' PUB keystate(key) : r | buf[2],tmp
20078                 | _usbnew_spin2_keystate
20078     00 04 06 F6 | 	mov	_var03, #0
2007c                 | '   if key >= $E0 && key < $E8
2007c     E0 12 56 F2 | 	cmps	arg01, #224 wc
20080     34 00 90 CD |  if_b	jmp	#LR__2660
20084     E8 12 56 F2 | 	cmps	arg01, #232 wc
20088     2C 00 90 3D |  if_ae	jmp	#LR__2660
2008c                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
2008c     00 FA 05 F6 | 	mov	result1, #0
20090     13 00 00 FF 
20094     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
20098     09 07 02 F6 | 	mov	_var04, arg01
2009c     E0 06 86 F1 | 	sub	_var04, #224
200a0     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
200a4     03 09 4A F0 | 	shr	_var05, _var04 wz
200a8     13 00 00 FF 
200ac     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
200b0     01 FA 65 56 |  if_ne	neg	result1, #1
200b4     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
200b8                 | LR__2660
200b8                 | '   else
200b8                 | '     '' Do this in inline ASM to ensure atomicity
200b8                 | '     tmp := @hkbd_report
200b8     13 00 00 FF 
200bc     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
200c0     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
200c4                 | '     org
200c4     13 00 00 FF 
200c8     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
200cc     97 1E 48 FB | 	callpa	#(@LR__2662-@LR__2661)>>2,fcache_load_ptr_
200d0                 | LR__2661
200d0 000             | 	org	0
200d0 000 28 02 64 FD | 	setq	#1
200d4 001 04 01 02 FB | 	rdlong	_var01, _var05
200d8 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
200dc 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
200e0 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
200e4 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
200e8 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
200ec 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
200f0 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
200f4 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
200f8 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
200fc 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20100 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
20104 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20108 00e 01 04 66 A6 |  if_e	neg	_var03, #1
2010c 00f             | LR__2662
2010c                 | 	orgh
2010c     02 FB 01 F6 | 	mov	result1, _var03
20110                 | _usbnew_spin2_keystate_ret
20110     2D 00 64 FD | 	ret
20114                 | 
20114                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
20114                 | ' 
20114                 | ' '' Return key event from buffer if there is one
20114                 | ' PUB get_key() : r | tail
20114                 | _usbnew_spin2_get_key
20114                 | '   tail := keyq_tail
20114     0F 00 00 FF 
20118     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
2011c     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
20120                 | '   if keyq_head == tail
20120     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
20124     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
20128     0F 00 00 FF 
2012c     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
20130     00 03 0A F2 | 	cmp	_var02, _var01 wz
20134                 | '     return 0 ' No event
20134     00 FA 05 A6 |  if_e	mov	result1, #0
20138     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
2013c                 | '   r := keyq_data[tail]
2013c     00 03 02 F6 | 	mov	_var02, _var01
20140     02 02 66 F0 | 	shl	_var02, #2
20144     0F 00 00 FF 
20148     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
2014c     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
20150     01 FB 01 FB | 	rdlong	result1, _var02
20154                 | '   if ++tail == KEYQUEUE_SIZE
20154     01 00 06 F1 | 	add	_var01, #1
20158     80 00 0E F2 | 	cmp	_var01, #128 wz
2015c                 | '     tail := 0
2015c     00 00 06 A6 |  if_e	mov	_var01, #0
20160                 | '   keyq_tail := tail
20160     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
20164     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
20168     0F 00 00 FF 
2016c     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
20170                 | _usbnew_spin2_get_key_ret
20170     2D 00 64 FD | 	ret
20174                 | 
20174                 | ' 
20174                 | ' '' Emulate mouse movement
20174                 | ' PUB mouse_move(x,y)
20174                 | _usbnew_spin2_mouse_move
20174     02 4A 05 F6 | 	mov	COUNT_, #2
20178     A8 00 A0 FD | 	call	#pushregs_
2017c     09 1F 02 F6 | 	mov	local01, arg01
20180     0A 21 02 F6 | 	mov	local02, arg02
20184                 | '   mouse_lock := 1
20184     14 00 00 FF 
20188     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
2018c     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
20190     14 00 00 FF 
20194     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
20198                 | '   waitus(2) ' hope driver is now done
20198     02 12 06 F6 | 	mov	arg01, #2
2019c     E8 0A B0 FD | 	call	#__system___waitus
201a0                 | '   mouse_xacc := x
201a0     14 00 00 FF 
201a4     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
201a8     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
201ac                 | '   mouse_yacc := y
201ac     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
201b0     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
201b4                 | '   if mouse_outptr
201b4     04 00 00 FF 
201b8     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
201bc     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
201c0     0F 00 00 FF 
201c4     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
201c8     24 00 90 AD |  if_e	jmp	#LR__2670
201cc                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
201cc     10 20 66 F0 | 	shl	local02, #16
201d0     0F 1F 32 F9 | 	getword	local01, local01, #0
201d4     0F 21 42 F5 | 	or	local02, local01
201d8     0F 00 00 FF 
201dc     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
201e0     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
201e4     0F 00 00 FF 
201e8     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
201ec     0F 21 62 FC | 	wrlong	local02, local01
201f0                 | LR__2670
201f0                 | '   mouse_lock := 0
201f0     14 00 00 FF 
201f4     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
201f8     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
201fc     14 00 00 FF 
20200     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
20204     A7 F0 03 F6 | 	mov	ptra, fp
20208     B2 00 A0 FD | 	call	#popregs_
2020c                 | _usbnew_spin2_mouse_move_ret
2020c     2D 00 64 FD | 	ret
20210                 | 
20210                 | '     '' Set HAVE_HIDPAD to enable.
20210                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
20210                 | ' 
20210                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
20210                 | ' PUB hidpad_id(dev) : r
20210                 | _usbnew_spin2_hidpad_id
20210                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
20210     13 00 00 FF 
20214     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
20218     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
2021c     09 01 02 F6 | 	mov	_var01, arg01
20220     03 00 66 F0 | 	shl	_var01, #3
20224     09 01 82 F1 | 	sub	_var01, arg01
20228     02 00 66 F0 | 	shl	_var01, #2
2022c     00 FB 01 F1 | 	add	result1, _var01
20230     FD FA 01 FB | 	rdlong	result1, result1
20234     13 00 00 FF 
20238     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
2023c                 | _usbnew_spin2_hidpad_id_ret
2023c     2D 00 64 FD | 	ret
20240                 | 
20240                 | ' 
20240                 | ' '' Get all button states for a device
20240                 | ' PUB hidpad_buttons(dev) : r 
20240                 | _usbnew_spin2_hidpad_buttons
20240                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
20240     13 00 00 FF 
20244     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
20248     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
2024c     09 01 02 F6 | 	mov	_var01, arg01
20250     03 00 66 F0 | 	shl	_var01, #3
20254     09 01 82 F1 | 	sub	_var01, arg01
20258     02 00 66 F0 | 	shl	_var01, #2
2025c     00 FB 01 F1 | 	add	result1, _var01
20260     14 FA 05 F1 | 	add	result1, #20
20264     FD FA 01 FB | 	rdlong	result1, result1
20268     13 00 00 FF 
2026c     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
20270                 | _usbnew_spin2_hidpad_buttons_ret
20270     2D 00 64 FD | 	ret
20274                 | 
20274                 | ' 
20274                 | ' '' Get state of an axis (normalized between -32768 and 32767)
20274                 | ' PUB hidpad_axis(dev,axnum) : r
20274                 | _usbnew_spin2_hidpad_axis
20274                 | '   if axnum +>= 6
20274     06 14 16 F2 | 	cmp	arg02, #6 wc
20278                 | '     return 0
20278     00 FA 05 36 |  if_ae	mov	result1, #0
2027c     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
20280                 | '   else 
20280                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
20280     13 00 00 FF 
20284     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
20288     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
2028c     09 01 02 F6 | 	mov	_var01, arg01
20290     03 00 66 F0 | 	shl	_var01, #3
20294     09 01 82 F1 | 	sub	_var01, arg01
20298     02 00 66 F0 | 	shl	_var01, #2
2029c     00 FB 01 F1 | 	add	result1, _var01
202a0     04 00 06 F6 | 	mov	_var01, #4
202a4     0A 01 02 F1 | 	add	_var01, arg02
202a8     01 00 66 F0 | 	shl	_var01, #1
202ac     FD 00 02 F1 | 	add	_var01, result1
202b0     00 FB E1 FA | 	rdword	result1, _var01
202b4     0F FA 65 F7 | 	signx	result1, #15
202b8     13 00 00 FF 
202bc     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
202c0                 | _usbnew_spin2_hidpad_axis_ret
202c0     2D 00 64 FD | 	ret
202c4                 | 
202c4                 | ' 
202c4                 | ' 
202c4                 | ' '--------------------------------------------------------------
202c4                 | ' '---------- Init the variables, start the cog. ----------------
202c4                 | ' '--------------------------------------------------------------
202c4                 | ' 
202c4                 | ' pub start(mbox,scope,cache) :cog,base | iii
202c4                 | _audio096_spin2_start
202c4     04 4A 05 F6 | 	mov	COUNT_, #4
202c8     A8 00 A0 FD | 	call	#pushregs_
202cc     09 1F 02 F6 | 	mov	local01, arg01
202d0                 | ' 
202d0                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
202d0                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
202d0                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
202d0                 | ' 
202d0                 | ' mailboxaddr:=mbox 
202d0     F2 1E 62 FC | 	wrlong	local01, objptr
202d4                 | ' scope_ptr:=scope
202d4     04 E4 05 F1 | 	add	objptr, #4
202d8     F2 14 62 FC | 	wrlong	arg02, objptr
202dc                 | ' cache_ptr:=cache
202dc     04 E4 05 F1 | 	add	objptr, #4
202e0     F2 16 62 FC | 	wrlong	arg03, objptr
202e4                 | ' base:=@channel1[0]
202e4     04 E4 05 F1 | 	add	objptr, #4
202e8     F2 20 02 F6 | 	mov	local02, objptr
202ec                 | ' long[$40]:=mbox
202ec     40 1E 66 FC | 	wrlong	local01, #64
202f0                 | ' repeat iii from 0 to 7
202f0     00 22 06 F6 | 	mov	local03, #0
202f4     02 00 00 FF 
202f8     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
202fc     0C E4 85 F1 | 	sub	objptr, #12
20300     97 BC 48 FB | 	callpa	#(@LR__2681-@LR__2680)>>2,fcache_load_ptr_
20304                 | LR__2680
20304                 | '   long[base+64*iii]:=0
20304     10 1F 02 F6 | 	mov	local01, local02
20308     11 FD 01 F6 | 	mov	result2, local03
2030c     06 FC 65 F0 | 	shl	result2, #6
20310     FE 1E 02 F1 | 	add	local01, result2
20314     0F 01 68 FC | 	wrlong	#0, local01
20318                 | '   long[base+64*iii+4]:=0
20318     10 1F 02 F6 | 	mov	local01, local02
2031c     11 FD 01 F6 | 	mov	result2, local03
20320     06 FC 65 F0 | 	shl	result2, #6
20324     FE 1E 02 F1 | 	add	local01, result2
20328     04 1E 06 F1 | 	add	local01, #4
2032c     0F 01 68 FC | 	wrlong	#0, local01
20330                 | '   long[base+64*iii+12]:=0
20330     10 25 02 F6 | 	mov	local04, local02
20334     11 1F 02 F6 | 	mov	local01, local03
20338     06 1E 66 F0 | 	shl	local01, #6
2033c     0F 25 02 F1 | 	add	local04, local01
20340     0C 24 06 F1 | 	add	local04, #12
20344     12 01 68 FC | 	wrlong	#0, local04
20348                 | '   long[base+64*iii+16]:=2 
20348     10 25 02 F6 | 	mov	local04, local02
2034c     11 1F 02 F6 | 	mov	local01, local03
20350     06 1E 66 F0 | 	shl	local01, #6
20354     0F 25 02 F1 | 	add	local04, local01
20358     10 24 06 F1 | 	add	local04, #16
2035c     12 05 68 FC | 	wrlong	#2, local04
20360                 | '   word[base+64*iii+20]:=0
20360     10 25 02 F6 | 	mov	local04, local02
20364     11 1F 02 F6 | 	mov	local01, local03
20368     06 1E 66 F0 | 	shl	local01, #6
2036c     0F 25 02 F1 | 	add	local04, local01
20370     14 24 06 F1 | 	add	local04, #20
20374     12 01 58 FC | 	wrword	#0, local04
20378                 | '   word[base+64*iii+22]:=8192
20378     10 25 02 F6 | 	mov	local04, local02
2037c     11 1F 02 F6 | 	mov	local01, local03
20380     06 1E 66 F0 | 	shl	local01, #6
20384     0F 25 02 F1 | 	add	local04, local01
20388     16 24 06 F1 | 	add	local04, #22
2038c     10 00 80 FF 
20390     12 01 58 FC | 	wrword	##8192, local04
20394                 | '   word[base+64*iii+24]:=4000+2*iii
20394     11 25 02 F6 | 	mov	local04, local03
20398     01 24 66 F0 | 	shl	local04, #1
2039c     07 00 00 FF 
203a0     A0 1F 06 F6 | 	mov	local01, ##4000
203a4     12 1F 02 F1 | 	add	local01, local04
203a8     10 25 02 F6 | 	mov	local04, local02
203ac     11 FD 01 F6 | 	mov	result2, local03
203b0     06 FC 65 F0 | 	shl	result2, #6
203b4     FE 24 02 F1 | 	add	local04, result2
203b8     18 24 06 F1 | 	add	local04, #24
203bc     12 1F 52 FC | 	wrword	local01, local04
203c0                 | '   word[base+64*iii+26]:=2
203c0     10 25 02 F6 | 	mov	local04, local02
203c4     11 1F 02 F6 | 	mov	local01, local03
203c8     06 1E 66 F0 | 	shl	local01, #6
203cc     0F 25 02 F1 | 	add	local04, local01
203d0     1A 24 06 F1 | 	add	local04, #26
203d4     12 05 58 FC | 	wrword	#2, local04
203d8                 | '   long [base+64*iii+8]:=@null | $C0000000
203d8     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
203dc     3E 1E 26 F4 | 	bith	local01, #62
203e0     10 25 02 F6 | 	mov	local04, local02
203e4     11 17 02 F6 | 	mov	arg03, local03
203e8     06 16 66 F0 | 	shl	arg03, #6
203ec     0B 25 02 F1 | 	add	local04, arg03
203f0     08 24 06 F1 | 	add	local04, #8
203f4     12 1F 62 FC | 	wrlong	local01, local04
203f8                 | '   long[base+64*iii+32]:=0
203f8     10 25 02 F6 | 	mov	local04, local02
203fc     11 1F 02 F6 | 	mov	local01, local03
20400     06 1E 66 F0 | 	shl	local01, #6
20404     0F 25 02 F1 | 	add	local04, local01
20408     20 24 06 F1 | 	add	local04, #32
2040c     12 01 68 FC | 	wrlong	#0, local04
20410                 | '   long[base+64*iii+36]:=0
20410     10 25 02 F6 | 	mov	local04, local02
20414     11 1F 02 F6 | 	mov	local01, local03
20418     06 1E 66 F0 | 	shl	local01, #6
2041c     0F 25 02 F1 | 	add	local04, local01
20420     24 24 06 F1 | 	add	local04, #36
20424     12 01 68 FC | 	wrlong	#0, local04
20428                 | '   long[base+64*iii+40]:=0
20428     10 25 02 F6 | 	mov	local04, local02
2042c     11 1F 02 F6 | 	mov	local01, local03
20430     06 1E 66 F0 | 	shl	local01, #6
20434     0F 25 02 F1 | 	add	local04, local01
20438     28 24 06 F1 | 	add	local04, #40
2043c     12 01 68 FC | 	wrlong	#0, local04
20440                 | '   long[base+64*iii+44]:=0
20440     10 25 02 F6 | 	mov	local04, local02
20444     11 1F 02 F6 | 	mov	local01, local03
20448     06 1E 66 F0 | 	shl	local01, #6
2044c     0F 25 02 F1 | 	add	local04, local01
20450     2C 24 06 F1 | 	add	local04, #44
20454     12 01 68 FC | 	wrlong	#0, local04
20458                 | '   long[base+64*iii+28]:=0
20458     10 25 02 F6 | 	mov	local04, local02
2045c     11 1F 02 F6 | 	mov	local01, local03
20460     06 1E 66 F0 | 	shl	local01, #6
20464     0F 25 02 F1 | 	add	local04, local01
20468     1C 24 06 F1 | 	add	local04, #28
2046c     12 01 68 FC | 	wrlong	#0, local04
20470     01 22 06 F1 | 	add	local03, #1
20474     08 22 56 F2 | 	cmps	local03, #8 wc
20478     88 FE 9F CD |  if_b	jmp	#LR__2680
2047c                 | LR__2681
2047c     02 00 00 FF 
20480     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
20484                 | '   
20484                 | ' cog:=coginit(16,@audio,@mailboxaddr)
20484     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
20488     F2 16 02 F6 | 	mov	arg03, objptr
2048c     10 24 06 F6 | 	mov	local04, #16
20490     28 16 62 FD | 	setq	arg03
20494     0A 25 F2 FC | 	coginit	local04, arg02 wc
20498     01 24 66 C6 |  if_b	neg	local04, #1
2049c                 | ' waitms(100)
2049c     64 12 06 F6 | 	mov	arg01, #100
204a0     78 07 B0 FD | 	call	#__system___waitms
204a4                 | ' return cog,base
204a4     10 FD 01 F6 | 	mov	result2, local02
204a8     12 FB 01 F6 | 	mov	result1, local04
204ac     A7 F0 03 F6 | 	mov	ptra, fp
204b0     B2 00 A0 FD | 	call	#popregs_
204b4                 | _audio096_spin2_start_ret
204b4     2D 00 64 FD | 	ret
204b8                 | 
204b8                 | ' 
204b8                 | ' ' a simple play procedure to not poke everything. 
204b8                 | ' 
204b8                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
204b8                 | _audio096_spin2_play
204b8     0C E4 05 F1 | 	add	objptr, #12
204bc     F2 00 02 F6 | 	mov	_var01, objptr
204c0     06 12 66 F0 | 	shl	arg01, #6
204c4     09 01 02 F1 | 	add	_var01, arg01
204c8     00 13 02 F6 | 	mov	arg01, _var01
204cc     0C 12 06 F1 | 	add	arg01, #12
204d0     09 1B 62 FC | 	wrlong	arg05, arg01
204d4     00 1C 56 F2 | 	cmps	arg06, #0 wc
204d8     00 13 02 36 |  if_ae	mov	arg01, _var01
204dc     10 12 06 31 |  if_ae	add	arg01, #16
204e0     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
204e4     02 1A 06 C1 |  if_b	add	arg05, #2
204e8     00 13 02 C6 |  if_b	mov	arg01, _var01
204ec     10 12 06 C1 |  if_b	add	arg01, #16
204f0     09 1B 62 CC |  if_b	wrlong	arg05, arg01
204f4     0B 13 52 F6 | 	abs	arg01, arg03 wc
204f8     0F 1B 80 FF 
204fc     09 1F 1A FD | 	qdiv	##3546895, arg01
20500                 | ' 
20500                 | ' base2:=@channel1[0]+64*channel
20500                 | ' 
20500                 | ' 
20500                 | ' long[base2+12]:= len
20500                 | ' if loop >=0 
20500                 | '   long[base2+16]:= loop
20500     0C E4 85 F1 | 	sub	objptr, #12
20504                 | ' else
20504                 | '   long[base2+16]:= len+2
20504                 | ' word[base2+20]:=vol
20504     00 13 02 F6 | 	mov	arg01, _var01
20508     14 12 06 F1 | 	add	arg01, #20
2050c     09 19 52 FC | 	wrword	arg04, arg01
20510                 | ' word[base2+24]:= 3546895/splfreq 
20510     00 19 02 F6 | 	mov	arg04, _var01
20514     18 18 06 F1 | 	add	arg04, #24
20518                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
20518                 | ' long[base2+28]:=$40000000    
20518                 | ' long[base2+32]:=0    
20518                 | ' long[base2+36]:=0    
20518                 | ' long[base2+40]:=0    
20518                 | ' long[base2+44]:=0    
20518                 | ' long[base2+8]:=sample+$C0000000     
20518     00 00 60 FF 
2051c     00 14 06 F1 | 	add	arg02, ##-1073741824
20520     18 12 62 FD | 	getqx	arg01
20524     09 13 82 F6 | 	negc	arg01, arg01
20528     0C 13 52 FC | 	wrword	arg01, arg04
2052c     00 13 02 F6 | 	mov	arg01, _var01
20530     1A 12 06 F1 | 	add	arg01, #26
20534     09 01 5A FC | 	wrword	#256, arg01
20538     00 13 02 F6 | 	mov	arg01, _var01
2053c     1C 12 06 F1 | 	add	arg01, #28
20540     00 00 A0 FF 
20544     09 01 68 FC | 	wrlong	##1073741824, arg01
20548     00 13 02 F6 | 	mov	arg01, _var01
2054c     20 12 06 F1 | 	add	arg01, #32
20550     09 01 68 FC | 	wrlong	#0, arg01
20554     00 13 02 F6 | 	mov	arg01, _var01
20558     24 12 06 F1 | 	add	arg01, #36
2055c     09 01 68 FC | 	wrlong	#0, arg01
20560     00 13 02 F6 | 	mov	arg01, _var01
20564     28 12 06 F1 | 	add	arg01, #40
20568     09 01 68 FC | 	wrlong	#0, arg01
2056c     00 13 02 F6 | 	mov	arg01, _var01
20570     2C 12 06 F1 | 	add	arg01, #44
20574     09 01 68 FC | 	wrlong	#0, arg01
20578     08 00 06 F1 | 	add	_var01, #8
2057c     00 15 62 FC | 	wrlong	arg02, _var01
20580                 | _audio096_spin2_play_ret
20580     2D 00 64 FD | 	ret
20584                 | 
20584                 | ' 
20584                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
20584                 | _audio096_spin2_play8
20584                 | ' 
20584                 | ' base2:=@channel1[0]+64*channel
20584     0C E4 05 F1 | 	add	objptr, #12
20588     F2 00 02 F6 | 	mov	_var01, objptr
2058c     06 12 66 F0 | 	shl	arg01, #6
20590     09 01 02 F1 | 	add	_var01, arg01
20594                 | ' long[base2]:=0
20594     00 01 68 FC | 	wrlong	#0, _var01
20598                 | ' long[base2+8]:=sample+$40000000 
20598     00 00 20 FF 
2059c     00 14 06 F1 | 	add	arg02, ##1073741824
205a0     00 13 02 F6 | 	mov	arg01, _var01
205a4     08 12 06 F1 | 	add	arg01, #8
205a8     09 15 62 FC | 	wrlong	arg02, arg01
205ac                 | ' if loop>=0
205ac     00 1C 56 F2 | 	cmps	arg06, #0 wc
205b0     0C E4 85 F1 | 	sub	objptr, #12
205b4     1C 00 90 CD |  if_b	jmp	#LR__2690
205b8                 | '   long[base2+12]:=loop
205b8     00 15 02 F6 | 	mov	arg02, _var01
205bc     0C 14 06 F1 | 	add	arg02, #12
205c0     0A 1D 62 FC | 	wrlong	arg06, arg02
205c4                 | '   long[base2+16]:= len
205c4     00 1D 02 F6 | 	mov	arg06, _var01
205c8     10 1C 06 F1 | 	add	arg06, #16
205cc     0E 1B 62 FC | 	wrlong	arg05, arg06
205d0     1C 00 90 FD | 	jmp	#LR__2691
205d4                 | LR__2690
205d4                 | ' else
205d4                 | '   long[base2+12]:= len
205d4     00 1D 02 F6 | 	mov	arg06, _var01
205d8     0C 1C 06 F1 | 	add	arg06, #12
205dc     0E 1B 62 FC | 	wrlong	arg05, arg06
205e0                 | '   long[base2+16]:= len+1
205e0     01 1A 06 F1 | 	add	arg05, #1
205e4     00 13 02 F6 | 	mov	arg01, _var01
205e8     10 12 06 F1 | 	add	arg01, #16
205ec     09 1B 62 FC | 	wrlong	arg05, arg01
205f0                 | LR__2691
205f0     0B 17 52 F6 | 	abs	arg03, arg03 wc
205f4     0F 1B 80 FF 
205f8     0B 1F 1A FD | 	qdiv	##3546895, arg03
205fc                 | ' word[base2+20]:=vol
205fc     00 17 02 F6 | 	mov	arg03, _var01
20600     14 16 06 F1 | 	add	arg03, #20
20604     0B 19 52 FC | 	wrword	arg04, arg03
20608                 | ' word[base2+24]:= 3546895 /splfreq 
20608     00 13 02 F6 | 	mov	arg01, _var01
2060c     18 12 06 F1 | 	add	arg01, #24
20610                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
20610     1A 00 06 F1 | 	add	_var01, #26
20614     18 18 62 FD | 	getqx	arg04
20618     0C 19 82 F6 | 	negc	arg04, arg04
2061c     09 19 52 FC | 	wrword	arg04, arg01
20620     00 01 5A FC | 	wrword	#256, _var01
20624                 | _audio096_spin2_play8_ret
20624     2D 00 64 FD | 	ret
20628                 | 
20628                 | ' 'long[base2+28]:=$40000000
20628                 | ' 
20628                 | '     
20628                 | ' pub stop(channel) 'silence it
20628                 | _audio096_spin2_stop
20628                 | ' 
20628                 | ' word[@channel1[0]+64*channel+20]:=0
20628     0C E4 05 F1 | 	add	objptr, #12
2062c     F2 00 02 F6 | 	mov	_var01, objptr
20630     09 03 02 F6 | 	mov	_var02, arg01
20634     06 02 66 F0 | 	shl	_var02, #6
20638     01 01 02 F1 | 	add	_var01, _var02
2063c     14 00 06 F1 | 	add	_var01, #20
20640     00 01 58 FC | 	wrword	#0, _var01
20644                 | ' word[@channel1[0]+64*channel+20]:=0
20644     F2 00 02 F6 | 	mov	_var01, objptr
20648     06 12 66 F0 | 	shl	arg01, #6
2064c     09 01 02 F1 | 	add	_var01, arg01
20650     14 00 06 F1 | 	add	_var01, #20
20654     00 01 58 FC | 	wrword	#0, _var01
20658     0C E4 85 F1 | 	sub	objptr, #12
2065c                 | _audio096_spin2_stop_ret
2065c     2D 00 64 FD | 	ret
20660                 | hubexit
20660     81 00 80 FD | 	jmp	#cogexit
20664                 | 
20664                 | __system___setbaud
20664     14 64 06 FB | 	rdlong	muldiva_, #20
20668     09 67 02 F6 | 	mov	muldivb_, arg01
2066c     BA 00 A0 FD | 	call	#divide_
20670     97 06 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
20674                 | LR__2700
20674     3E FA 9D FA | 	rdpin	result1, #62 wc
20678     FE FC A1 F1 | 	subx	result2, result2
2067c     F4 FF 9F CD |  if_b	jmp	#LR__2700
20680                 | LR__2701
20680     40 7C 64 FD | 	dirl	#62
20684     40 7E 64 FD | 	dirl	#63
20688     F3 66 62 FC | 	wrlong	muldivb_, ptr___system__dat__
2068c     10 66 66 F0 | 	shl	muldivb_, #16
20690     07 14 06 F6 | 	mov	arg02, #7
20694     33 15 02 F1 | 	add	arg02, muldivb_
20698     3E F8 0C FC | 	wrpin	#124, #62
2069c     3E 14 16 FC | 	wxpin	arg02, #62
206a0     3F 7C 0C FC | 	wrpin	#62, #63
206a4     14 14 06 F1 | 	add	arg02, #20
206a8     3F 14 16 FC | 	wxpin	arg02, #63
206ac     41 7C 64 FD | 	dirh	#62
206b0     41 7E 64 FD | 	dirh	#63
206b4                 | __system___setbaud_ret
206b4     2D 00 64 FD | 	ret
206b8                 | 
206b8                 | __system___txraw
206b8     01 4A 05 F6 | 	mov	COUNT_, #1
206bc     A8 00 A0 FD | 	call	#pushregs_
206c0     09 1F 02 F6 | 	mov	local01, arg01
206c4     97 06 48 FB | 	callpa	#(@LR__2711-@LR__2710)>>2,fcache_load_ptr_
206c8                 | LR__2710
206c8     3E FA 9D FA | 	rdpin	result1, #62 wc
206cc     FE FC A1 F1 | 	subx	result2, result2
206d0     F4 FF 9F CD |  if_b	jmp	#LR__2710
206d4                 | LR__2711
206d4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
206d8     C2 01 00 AF 
206dc     00 12 06 A6 |  if_e	mov	arg01, ##230400
206e0     80 FF BF AD |  if_e	call	#__system___setbaud
206e4     58 7C 64 FD | 	drvl	#62
206e8     3E 1E 26 FC | 	wypin	local01, #62
206ec     01 FA 05 F6 | 	mov	result1, #1
206f0     A7 F0 03 F6 | 	mov	ptra, fp
206f4     B2 00 A0 FD | 	call	#popregs_
206f8                 | __system___txraw_ret
206f8     2D 00 64 FD | 	ret
206fc                 | 
206fc                 | __system___rxraw
206fc     0D 4A 05 F6 | 	mov	COUNT_, #13
20700     A8 00 A0 FD | 	call	#pushregs_
20704     09 1F 02 F6 | 	mov	local01, arg01
20708     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2070c     C2 01 00 AF 
20710     00 12 06 A6 |  if_e	mov	arg01, ##230400
20714     4C FF BF AD |  if_e	call	#__system___setbaud
20718     00 1E 0E F2 | 	cmp	local01, #0 wz
2071c     20 00 90 AD |  if_e	jmp	#LR__2720
20720     14 22 06 FB | 	rdlong	local03, #20
20724     0A 22 46 F0 | 	shr	local03, #10
20728     11 1F 02 FD | 	qmul	local01, local03
2072c     1A FA 61 FD | 	getct	result1
20730     18 24 62 FD | 	getqx	local04
20734     12 FB 01 F1 | 	add	result1, local04
20738     FD 26 02 F6 | 	mov	local05, result1
2073c     04 00 90 FD | 	jmp	#LR__2721
20740                 | LR__2720
20740     00 26 06 F6 | 	mov	local05, #0
20744                 | LR__2721
20744     01 28 66 F6 | 	neg	local06, #1
20748     3F 2A 06 F6 | 	mov	local07, #63
2074c     00 2C 06 F6 | 	mov	local08, #0
20750     04 E6 05 F1 | 	add	ptr___system__dat__, #4
20754     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
20758     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
2075c                 | LR__2722
2075c     08 2E 16 F4 | 	testb	local09, #8 wc
20760     09 2E 76 F4 | 	testbn	local09, #9 andc
20764     0A 2E 46 F0 | 	shr	local09, #10
20768     01 2C 06 C6 |  if_b	mov	local08, #1
2076c     40 7E 6C 3D |  if_ae	testp	#63 wz
20770     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
20774     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
20778     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
2077c                 | LR__2723
2077c     00 20 06 F6 | 	mov	local02, #0
20780     00 2C 0E F2 | 	cmp	local08, #0 wz
20784     01 20 66 56 |  if_ne	neg	local02, #1
20788     00 30 06 F6 | 	mov	local10, #0
2078c     00 22 06 F6 | 	mov	local03, #0
20790     00 1E 0E F2 | 	cmp	local01, #0 wz
20794     01 22 66 56 |  if_ne	neg	local03, #1
20798     00 24 06 F6 | 	mov	local04, #0
2079c     00 32 06 F6 | 	mov	local11, #0
207a0     1A FA 61 FD | 	getct	result1
207a4     FD 34 02 F6 | 	mov	local12, result1
207a8     1A 37 02 F6 | 	mov	local13, local12
207ac     13 37 82 F1 | 	sub	local13, local05
207b0     00 36 56 F2 | 	cmps	local13, #0 wc
207b4     00 32 26 C6 |  if_b	not	local11, #0
207b8     00 32 0E F2 | 	cmp	local11, #0 wz
207bc     00 24 26 56 |  if_ne	not	local04, #0
207c0     12 23 CA F7 | 	test	local03, local04 wz
207c4     00 30 26 56 |  if_ne	not	local10, #0
207c8     18 21 4A F5 | 	or	local02, local10 wz
207cc     8C FF 9F AD |  if_e	jmp	#LR__2722
207d0     00 2C 0E F2 | 	cmp	local08, #0 wz
207d4     17 29 02 56 |  if_ne	mov	local06, local09
207d8     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
207dc     04 E6 05 F1 | 	add	ptr___system__dat__, #4
207e0     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
207e4     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
207e8     14 FB 01 F6 | 	mov	result1, local06
207ec     A7 F0 03 F6 | 	mov	ptra, fp
207f0     B2 00 A0 FD | 	call	#popregs_
207f4                 | __system___rxraw_ret
207f4     2D 00 64 FD | 	ret
207f8                 | 
207f8                 | __system___getus
207f8     1A FC 71 FD | 	getct	result2 wc
207fc     1A 00 62 FD | 	getct	_var01
20800     10 E6 05 F1 | 	add	ptr___system__dat__, #16
20804     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
20808     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
2080c     20 00 90 5D |  if_ne	jmp	#LR__2730
20810     14 02 06 FB | 	rdlong	_var02, #20
20814     A1 07 00 FF 
20818     40 02 16 FD | 	qdiv	_var02, ##1000000
2081c     10 E6 05 F1 | 	add	ptr___system__dat__, #16
20820     18 FA 61 FD | 	getqx	result1
20824     FD 02 02 F6 | 	mov	_var02, result1
20828     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
2082c     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
20830                 | LR__2730
20830     01 FD 11 FD | 	qdiv	result2, _var02
20834     19 FC 61 FD | 	getqy	result2
20838     28 FC 61 FD | 	setq	result2
2083c     01 01 12 FD | 	qdiv	_var01, _var02
20840     18 FA 61 FD | 	getqx	result1
20844                 | __system___getus_ret
20844     2D 00 64 FD | 	ret
20848                 | 
20848                 | __system____builtin_memmove
20848     09 01 02 F6 | 	mov	_var01, arg01
2084c     0A 13 52 F2 | 	cmps	arg01, arg02 wc
20850     10 00 90 CD |  if_b	jmp	#LR__2740
20854     0A 03 02 F6 | 	mov	_var02, arg02
20858     0B 03 02 F1 | 	add	_var02, arg03
2085c     01 13 52 F2 | 	cmps	arg01, _var02 wc
20860     48 00 90 CD |  if_b	jmp	#LR__2746
20864                 | LR__2740
20864     0B 05 02 F6 | 	mov	_var03, arg03
20868     02 04 4E F0 | 	shr	_var03, #2 wz
2086c     18 00 90 AD |  if_e	jmp	#LR__2745
20870     97 0A 48 FB | 	callpa	#(@LR__2743-@LR__2741)>>2,fcache_load_ptr_
20874                 | LR__2741
20874     02 09 D8 FC | 	rep	@LR__2744, _var03
20878                 | LR__2742
20878     0A 05 02 FB | 	rdlong	_var03, arg02
2087c     09 05 62 FC | 	wrlong	_var03, arg01
20880     04 12 06 F1 | 	add	arg01, #4
20884     04 14 06 F1 | 	add	arg02, #4
20888                 | LR__2743
20888                 | LR__2744
20888                 | LR__2745
20888     02 16 CE F7 | 	test	arg03, #2 wz
2088c     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
20890     09 03 52 5C |  if_ne	wrword	_var02, arg01
20894     02 12 06 51 |  if_ne	add	arg01, #2
20898     02 14 06 51 |  if_ne	add	arg02, #2
2089c     01 16 CE F7 | 	test	arg03, #1 wz
208a0     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
208a4     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
208a8     28 00 90 FD | 	jmp	#LR__2752
208ac                 | LR__2746
208ac     0B 13 02 F1 | 	add	arg01, arg03
208b0     0B 15 02 F1 | 	add	arg02, arg03
208b4     0B 07 0A F6 | 	mov	_var04, arg03 wz
208b8     18 00 90 AD |  if_e	jmp	#LR__2751
208bc     97 0A 48 FB | 	callpa	#(@LR__2749-@LR__2747)>>2,fcache_load_ptr_
208c0                 | LR__2747
208c0     03 09 D8 FC | 	rep	@LR__2750, _var04
208c4                 | LR__2748
208c4     01 12 86 F1 | 	sub	arg01, #1
208c8     01 14 86 F1 | 	sub	arg02, #1
208cc     0A 03 C2 FA | 	rdbyte	_var02, arg02
208d0     09 03 42 FC | 	wrbyte	_var02, arg01
208d4                 | LR__2749
208d4                 | LR__2750
208d4                 | LR__2751
208d4                 | LR__2752
208d4     00 FB 01 F6 | 	mov	result1, _var01
208d8                 | __system____builtin_memmove_ret
208d8     2D 00 64 FD | 	ret
208dc                 | 
208dc                 | __system____builtin_strcpy
208dc     09 01 02 F6 | 	mov	_var01, arg01
208e0     97 0A 48 FB | 	callpa	#(@LR__2761-@LR__2760)>>2,fcache_load_ptr_
208e4                 | LR__2760
208e4     0A FB C9 FA | 	rdbyte	result1, arg02 wz
208e8     09 FB 41 FC | 	wrbyte	result1, arg01
208ec     01 14 06 F1 | 	add	arg02, #1
208f0     01 12 06 F1 | 	add	arg01, #1
208f4     EC FF 9F 5D |  if_ne	jmp	#LR__2760
208f8                 | LR__2761
208f8     00 FB 01 F6 | 	mov	result1, _var01
208fc                 | __system____builtin_strcpy_ret
208fc     2D 00 64 FD | 	ret
20900                 | 
20900                 | __system____topofstack
20900     00 4A 05 F6 | 	mov	COUNT_, #0
20904     A8 00 A0 FD | 	call	#pushregs_
20908     08 F0 07 F1 | 	add	ptra, #8
2090c     04 4E 05 F1 | 	add	fp, #4
20910     A7 12 62 FC | 	wrlong	arg01, fp
20914     A7 FA 01 F6 | 	mov	result1, fp
20918     04 4E 85 F1 | 	sub	fp, #4
2091c     A7 F0 03 F6 | 	mov	ptra, fp
20920     B2 00 A0 FD | 	call	#popregs_
20924                 | __system____topofstack_ret
20924     2D 00 64 FD | 	ret
20928                 | 
20928                 | __system___lockmem
20928     00 FA 05 F6 | 	mov	result1, #0
2092c     01 FA 61 FD | 	cogid	result1
20930     00 FB 05 F1 | 	add	result1, #256
20934                 | LR__2770
20934     09 01 0A FB | 	rdlong	_var01, arg01 wz
20938     09 FB 61 AC |  if_e	wrlong	result1, arg01
2093c     09 01 02 AB |  if_e	rdlong	_var01, arg01
20940     09 01 02 AB |  if_e	rdlong	_var01, arg01
20944     FD 00 0A F2 | 	cmp	_var01, result1 wz
20948     E8 FF 9F 5D |  if_ne	jmp	#LR__2770
2094c                 | __system___lockmem_ret
2094c     2D 00 64 FD | 	ret
20950                 | 
20950                 | __system___string_cmp
20950     97 14 48 FB | 	callpa	#(@LR__2781-@LR__2780)>>2,fcache_load_ptr_
20954                 | LR__2780
20954     09 01 C2 FA | 	rdbyte	_var01, arg01
20958     0A 03 C2 FA | 	rdbyte	_var02, arg02
2095c     00 05 02 F6 | 	mov	_var03, _var01
20960     01 05 8A F1 | 	sub	_var03, _var02 wz
20964     01 12 06 F1 | 	add	arg01, #1
20968     01 14 06 F1 | 	add	arg02, #1
2096c     0C 00 90 5D |  if_ne	jmp	#LR__2782
20970     00 00 0E F2 | 	cmp	_var01, #0 wz
20974     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
20978     D8 FF 9F 5D |  if_ne	jmp	#LR__2780
2097c                 | LR__2781
2097c                 | LR__2782
2097c     02 FB 01 F6 | 	mov	result1, _var03
20980                 | __system___string_cmp_ret
20980     2D 00 64 FD | 	ret
20984                 | 
20984                 | __system___string_concat
20984     05 4A 05 F6 | 	mov	COUNT_, #5
20988     A8 00 A0 FD | 	call	#pushregs_
2098c     09 1F 02 F6 | 	mov	local01, arg01
20990     0A 21 02 F6 | 	mov	local02, arg02
20994     0F 13 02 F6 | 	mov	arg01, local01
20998     09 23 02 F6 | 	mov	local03, arg01
2099c     97 06 48 FB | 	callpa	#(@LR__2791-@LR__2790)>>2,fcache_load_ptr_
209a0                 | LR__2790
209a0     11 FB C9 FA | 	rdbyte	result1, local03 wz
209a4     01 22 06 51 |  if_ne	add	local03, #1
209a8     F4 FF 9F 5D |  if_ne	jmp	#LR__2790
209ac                 | LR__2791
209ac     09 23 82 F1 | 	sub	local03, arg01
209b0     11 25 02 F6 | 	mov	local04, local03
209b4     10 13 02 F6 | 	mov	arg01, local02
209b8     09 23 02 F6 | 	mov	local03, arg01
209bc     97 06 48 FB | 	callpa	#(@LR__2793-@LR__2792)>>2,fcache_load_ptr_
209c0                 | LR__2792
209c0     11 FB C9 FA | 	rdbyte	result1, local03 wz
209c4     01 22 06 51 |  if_ne	add	local03, #1
209c8     F4 FF 9F 5D |  if_ne	jmp	#LR__2792
209cc                 | LR__2793
209cc     09 23 82 F1 | 	sub	local03, arg01
209d0     12 13 02 F6 | 	mov	arg01, local04
209d4     11 13 02 F1 | 	add	arg01, local03
209d8     01 12 06 F1 | 	add	arg01, #1
209dc     00 3E B0 FD | 	call	#__system___gc_alloc_managed
209e0     FD 26 0A F6 | 	mov	local05, result1 wz
209e4     28 00 90 AD |  if_e	jmp	#LR__2794
209e8     13 13 02 F6 | 	mov	arg01, local05
209ec     0F 15 02 F6 | 	mov	arg02, local01
209f0     12 17 02 F6 | 	mov	arg03, local04
209f4     50 FE BF FD | 	call	#__system____builtin_memmove
209f8     13 13 02 F6 | 	mov	arg01, local05
209fc     12 13 02 F1 | 	add	arg01, local04
20a00     01 22 06 F1 | 	add	local03, #1
20a04     10 15 02 F6 | 	mov	arg02, local02
20a08     11 17 02 F6 | 	mov	arg03, local03
20a0c     38 FE BF FD | 	call	#__system____builtin_memmove
20a10                 | LR__2794
20a10     13 FB 01 F6 | 	mov	result1, local05
20a14     A7 F0 03 F6 | 	mov	ptra, fp
20a18     B2 00 A0 FD | 	call	#popregs_
20a1c                 | __system___string_concat_ret
20a1c     2D 00 64 FD | 	ret
20a20                 | 
20a20                 | __system___tx
20a20     02 4A 05 F6 | 	mov	COUNT_, #2
20a24     A8 00 A0 FD | 	call	#pushregs_
20a28     09 1F 02 F6 | 	mov	local01, arg01
20a2c     0A 1E 0E F2 | 	cmp	local01, #10 wz
20a30     18 00 90 5D |  if_ne	jmp	#LR__2800
20a34     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20a38     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
20a3c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20a40     02 20 CE F7 | 	test	local02, #2 wz
20a44     0D 12 06 56 |  if_ne	mov	arg01, #13
20a48     6C FC BF 5D |  if_ne	call	#__system___txraw
20a4c                 | LR__2800
20a4c     0F 13 02 F6 | 	mov	arg01, local01
20a50     64 FC BF FD | 	call	#__system___txraw
20a54     A7 F0 03 F6 | 	mov	ptra, fp
20a58     B2 00 A0 FD | 	call	#popregs_
20a5c                 | __system___tx_ret
20a5c     2D 00 64 FD | 	ret
20a60                 | 
20a60                 | __system___rx
20a60     01 4A 05 F6 | 	mov	COUNT_, #1
20a64     A8 00 A0 FD | 	call	#pushregs_
20a68                 | LR__2810
20a68     00 12 06 F6 | 	mov	arg01, #0
20a6c     8C FC BF FD | 	call	#__system___rxraw
20a70     FD 1E 02 F6 | 	mov	local01, result1
20a74     FF FF 7F FF 
20a78     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
20a7c     E8 FF 9F AD |  if_e	jmp	#LR__2810
20a80     0D 1E 0E F2 | 	cmp	local01, #13 wz
20a84     14 00 90 5D |  if_ne	jmp	#LR__2811
20a88     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20a8c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
20a90     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20a94     02 FA CD F7 | 	test	result1, #2 wz
20a98     0A 1E 06 56 |  if_ne	mov	local01, #10
20a9c                 | LR__2811
20a9c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20aa0     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
20aa4     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20aa8     01 12 CE F7 | 	test	arg01, #1 wz
20aac     1C 00 90 AD |  if_e	jmp	#LR__2814
20ab0     7F 1E 0E F2 | 	cmp	local01, #127 wz
20ab4     0C 00 90 5D |  if_ne	jmp	#LR__2812
20ab8     08 12 06 F6 | 	mov	arg01, #8
20abc     60 FF BF FD | 	call	#__system___tx
20ac0     08 00 90 FD | 	jmp	#LR__2813
20ac4                 | LR__2812
20ac4     0F 13 02 F6 | 	mov	arg01, local01
20ac8     54 FF BF FD | 	call	#__system___tx
20acc                 | LR__2813
20acc                 | LR__2814
20acc     0F FB 01 F6 | 	mov	result1, local01
20ad0     A7 F0 03 F6 | 	mov	ptra, fp
20ad4     B2 00 A0 FD | 	call	#popregs_
20ad8                 | __system___rx_ret
20ad8     2D 00 64 FD | 	ret
20adc                 | 
20adc                 | __system___pinwrite
20adc     09 01 02 F6 | 	mov	_var01, arg01
20ae0     1F 00 06 F5 | 	and	_var01, #31
20ae4     20 12 CE F7 | 	test	arg01, #32 wz
20ae8     06 12 46 F0 | 	shr	arg01, #6
20aec     09 13 CA F9 | 	bmask	arg01, arg01
20af0     00 13 62 F0 | 	shl	arg01, _var01
20af4     00 15 62 F0 | 	shl	arg02, _var01
20af8     1C 00 90 AD |  if_e	jmp	#LR__2820
20afc     09 F7 43 F5 | 	or	dirb, arg01
20b00     FD 01 02 F6 | 	mov	_var01, outb
20b04     09 01 22 F5 | 	andn	_var01, arg01
20b08     09 15 02 F5 | 	and	arg02, arg01
20b0c     0A 01 42 F5 | 	or	_var01, arg02
20b10     00 FB 03 F6 | 	mov	outb, _var01
20b14     18 00 90 FD | 	jmp	#LR__2821
20b18                 | LR__2820
20b18     09 F5 43 F5 | 	or	dira, arg01
20b1c     FC 01 02 F6 | 	mov	_var01, outa
20b20     09 01 22 F5 | 	andn	_var01, arg01
20b24     09 15 02 F5 | 	and	arg02, arg01
20b28     0A 01 42 F5 | 	or	_var01, arg02
20b2c     00 F9 03 F6 | 	mov	outa, _var01
20b30                 | LR__2821
20b30                 | __system___pinwrite_ret
20b30     2D 00 64 FD | 	ret
20b34                 | 
20b34                 | __system___basic_read_line
20b34     06 4A 05 F6 | 	mov	COUNT_, #6
20b38     A8 00 A0 FD | 	call	#pushregs_
20b3c     09 1F 02 F6 | 	mov	local01, arg01
20b40     00 20 06 F6 | 	mov	local02, #0
20b44     18 22 06 F6 | 	mov	local03, #24
20b48     00 24 06 F6 | 	mov	local04, #0
20b4c     18 12 06 F6 | 	mov	arg01, #24
20b50     8C 3C B0 FD | 	call	#__system___gc_alloc_managed
20b54     FD 26 0A F6 | 	mov	local05, result1 wz
20b58     13 FB 01 A6 |  if_e	mov	result1, local05
20b5c     B0 00 90 AD |  if_e	jmp	#LR__2833
20b60                 | LR__2830
20b60     0F 13 02 F6 | 	mov	arg01, local01
20b64     78 0B B0 FD | 	call	#__system___basic_get_char
20b68     FD 28 02 F6 | 	mov	local06, result1
20b6c     01 28 56 F2 | 	cmps	local06, #1 wc
20b70     8C 00 90 CD |  if_b	jmp	#LR__2832
20b74     0A 28 0E F2 | 	cmp	local06, #10 wz
20b78     10 00 90 5D |  if_ne	jmp	#LR__2831
20b7c     00 24 0E F2 | 	cmp	local04, #0 wz
20b80     01 20 56 52 |  if_ne	cmps	local02, #1 wc
20b84     01 20 86 11 |  if_a	sub	local02, #1
20b88     74 00 90 FD | 	jmp	#LR__2832
20b8c                 | LR__2831
20b8c     0D 28 0E F2 | 	cmp	local06, #13 wz
20b90     01 24 06 A6 |  if_e	mov	local04, #1
20b94     00 24 06 56 |  if_ne	mov	local04, #0
20b98     08 28 0E F2 | 	cmp	local06, #8 wz
20b9c     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
20ba0     01 20 56 A2 |  if_e	cmps	local02, #1 wc
20ba4     01 20 86 21 |  if_nc_and_z	sub	local02, #1
20ba8     B4 FF 9F AD |  if_e	jmp	#LR__2830
20bac     13 17 02 F6 | 	mov	arg03, local05
20bb0     10 17 02 F1 | 	add	arg03, local02
20bb4     0B 29 42 FC | 	wrbyte	local06, arg03
20bb8     01 20 06 F1 | 	add	local02, #1
20bbc     11 21 0A F2 | 	cmp	local02, local03 wz
20bc0     9C FF 9F 5D |  if_ne	jmp	#LR__2830
20bc4     11 13 02 F6 | 	mov	arg01, local03
20bc8     20 12 06 F1 | 	add	arg01, #32
20bcc     10 3C B0 FD | 	call	#__system___gc_alloc_managed
20bd0     FD 28 0A F6 | 	mov	local06, result1 wz
20bd4     14 FB 01 A6 |  if_e	mov	result1, local06
20bd8     34 00 90 AD |  if_e	jmp	#LR__2833
20bdc     14 13 02 F6 | 	mov	arg01, local06
20be0     13 15 02 F6 | 	mov	arg02, local05
20be4     11 17 02 F6 | 	mov	arg03, local03
20be8     5C FC BF FD | 	call	#__system____builtin_memmove
20bec     20 22 06 F1 | 	add	local03, #32
20bf0     13 13 02 F6 | 	mov	arg01, local05
20bf4     24 3D B0 FD | 	call	#__system___gc_free
20bf8     14 27 02 F6 | 	mov	local05, local06
20bfc     60 FF 9F FD | 	jmp	#LR__2830
20c00                 | LR__2832
20c00     13 29 02 F6 | 	mov	local06, local05
20c04     10 29 02 F1 | 	add	local06, local02
20c08     14 01 48 FC | 	wrbyte	#0, local06
20c0c     13 FB 01 F6 | 	mov	result1, local05
20c10                 | LR__2833
20c10     A7 F0 03 F6 | 	mov	ptra, fp
20c14     B2 00 A0 FD | 	call	#popregs_
20c18                 | __system___basic_read_line_ret
20c18     2D 00 64 FD | 	ret
20c1c                 | 
20c1c                 | __system___waitms
20c1c     09 01 02 F6 | 	mov	_var01, arg01
20c20     1A 02 62 FD | 	getct	_var02
20c24     14 04 06 FB | 	rdlong	_var03, #20
20c28     97 14 48 FB | 	callpa	#(@LR__2841-@LR__2840)>>2,fcache_load_ptr_
20c2c                 | LR__2840
20c2c     01 00 00 FF 
20c30     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
20c34     1C 00 90 CD |  if_b	jmp	#LR__2842
20c38     02 03 02 F1 | 	add	_var02, _var03
20c3c     01 13 02 F6 | 	mov	arg01, _var02
20c40     00 12 66 FA | 	addct1	arg01, #0
20c44     24 22 60 FD | 	waitct1
20c48     01 00 00 FF 
20c4c     E8 01 86 F1 | 	sub	_var01, ##1000
20c50     D8 FF 9F FD | 	jmp	#LR__2840
20c54                 | LR__2841
20c54                 | LR__2842
20c54     01 00 56 F2 | 	cmps	_var01, #1 wc
20c58     28 00 90 CD |  if_b	jmp	#LR__2843
20c5c     02 01 02 FD | 	qmul	_var01, _var03
20c60     01 00 00 FF 
20c64     E8 17 06 F6 | 	mov	arg03, ##1000
20c68     19 FA 61 FD | 	getqy	result1
20c6c     18 12 62 FD | 	getqx	arg01
20c70     28 FA 61 FD | 	setq	result1
20c74     0B 13 12 FD | 	qdiv	arg01, arg03
20c78     18 12 62 FD | 	getqx	arg01
20c7c     01 13 62 FA | 	addct1	arg01, _var02
20c80     24 22 60 FD | 	waitct1
20c84                 | LR__2843
20c84                 | __system___waitms_ret
20c84     2D 00 64 FD | 	ret
20c88                 | 
20c88                 | __system___waitus
20c88     09 01 02 F6 | 	mov	_var01, arg01
20c8c     1A 02 62 FD | 	getct	_var02
20c90     14 04 06 FB | 	rdlong	_var03, #20
20c94     97 14 48 FB | 	callpa	#(@LR__2851-@LR__2850)>>2,fcache_load_ptr_
20c98                 | LR__2850
20c98     A1 07 00 FF 
20c9c     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
20ca0     1C 00 90 CD |  if_b	jmp	#LR__2852
20ca4     02 03 02 F1 | 	add	_var02, _var03
20ca8     01 13 02 F6 | 	mov	arg01, _var02
20cac     00 12 66 FA | 	addct1	arg01, #0
20cb0     24 22 60 FD | 	waitct1
20cb4     A1 07 00 FF 
20cb8     40 00 86 F1 | 	sub	_var01, ##1000000
20cbc     D8 FF 9F FD | 	jmp	#LR__2850
20cc0                 | LR__2851
20cc0                 | LR__2852
20cc0     01 00 56 F2 | 	cmps	_var01, #1 wc
20cc4     28 00 90 CD |  if_b	jmp	#LR__2853
20cc8     02 01 02 FD | 	qmul	_var01, _var03
20ccc     A1 07 00 FF 
20cd0     40 16 06 F6 | 	mov	arg03, ##1000000
20cd4     19 FA 61 FD | 	getqy	result1
20cd8     18 12 62 FD | 	getqx	arg01
20cdc     28 FA 61 FD | 	setq	result1
20ce0     0B 13 12 FD | 	qdiv	arg01, arg03
20ce4     18 FA 61 FD | 	getqx	result1
20ce8     FD 02 62 FA | 	addct1	_var02, result1
20cec     24 22 60 FD | 	waitct1
20cf0                 | LR__2853
20cf0                 | __system___waitus_ret
20cf0     2D 00 64 FD | 	ret
20cf4                 | 
20cf4                 | __system___mount
20cf4     0B 4A 05 F6 | 	mov	COUNT_, #11
20cf8     A8 00 A0 FD | 	call	#pushregs_
20cfc     09 1F 02 F6 | 	mov	local01, arg01
20d00     0A 21 0A F6 | 	mov	local02, arg02 wz
20d04     01 22 66 F6 | 	neg	local03, #1
20d08     01 FA 65 A6 |  if_e	neg	result1, #1
20d0c     98 02 90 AD |  if_e	jmp	#LR__2875
20d10     0F FB C1 FA | 	rdbyte	result1, local01
20d14     2F FA 0D F2 | 	cmp	result1, #47 wz
20d18     28 00 90 5D |  if_ne	jmp	#LR__2862
20d1c     0F 13 02 F6 | 	mov	arg01, local01
20d20     09 25 02 F6 | 	mov	local04, arg01
20d24     97 06 48 FB | 	callpa	#(@LR__2861-@LR__2860)>>2,fcache_load_ptr_
20d28                 | LR__2860
20d28     12 FB C9 FA | 	rdbyte	result1, local04 wz
20d2c     01 24 06 51 |  if_ne	add	local04, #1
20d30     F4 FF 9F 5D |  if_ne	jmp	#LR__2860
20d34                 | LR__2861
20d34     09 25 82 F1 | 	sub	local04, arg01
20d38     12 FB 01 F6 | 	mov	result1, local04
20d3c     10 FA 55 F2 | 	cmps	result1, #16 wc
20d40     14 00 90 CD |  if_b	jmp	#LR__2863
20d44                 | LR__2862
20d44     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20d48     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
20d4c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20d50     01 FA 65 F6 | 	neg	result1, #1
20d54     50 02 90 FD | 	jmp	#LR__2875
20d58                 | LR__2863
20d58     00 26 06 F6 | 	mov	local05, #0
20d5c                 | LR__2864
20d5c     04 26 56 F2 | 	cmps	local05, #4 wc
20d60     B0 00 90 3D |  if_ae	jmp	#LR__2869
20d64     13 13 02 F6 | 	mov	arg01, local05
20d68     02 12 66 F0 | 	shl	arg01, #2
20d6c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20d70     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
20d74     09 FB 09 FB | 	rdlong	result1, arg01 wz
20d78     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20d7c     00 22 56 A2 |  if_e	cmps	local03, #0 wc
20d80     13 23 02 86 |  if_c_and_z	mov	local03, local05
20d84     84 00 90 8D |  if_c_and_z	jmp	#LR__2868
20d88     13 13 02 F6 | 	mov	arg01, local05
20d8c     02 12 66 F0 | 	shl	arg01, #2
20d90     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20d94     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
20d98     09 13 02 FB | 	rdlong	arg01, arg01
20d9c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20da0     09 25 02 F6 | 	mov	local04, arg01
20da4     97 06 48 FB | 	callpa	#(@LR__2866-@LR__2865)>>2,fcache_load_ptr_
20da8                 | LR__2865
20da8     12 FB C9 FA | 	rdbyte	result1, local04 wz
20dac     01 24 06 51 |  if_ne	add	local04, #1
20db0     F4 FF 9F 5D |  if_ne	jmp	#LR__2865
20db4                 | LR__2866
20db4     09 25 82 F1 | 	sub	local04, arg01
20db8     12 29 02 F6 | 	mov	local06, local04
20dbc     14 13 02 F6 | 	mov	arg01, local06
20dc0     0F 13 02 F1 | 	add	arg01, local01
20dc4     09 FB C1 FA | 	rdbyte	result1, arg01
20dc8     2F FA 0D F2 | 	cmp	result1, #47 wz
20dcc     14 2B 02 56 |  if_ne	mov	local07, local06
20dd0     0F 2B 02 51 |  if_ne	add	local07, local01
20dd4     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
20dd8     30 00 90 5D |  if_ne	jmp	#LR__2867
20ddc     13 17 02 F6 | 	mov	arg03, local05
20de0     02 16 66 F0 | 	shl	arg03, #2
20de4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20de8     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
20dec     0B 15 02 FB | 	rdlong	arg02, arg03
20df0     0F 13 02 F6 | 	mov	arg01, local01
20df4     14 17 02 F6 | 	mov	arg03, local06
20df8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20dfc     60 4E B0 FD | 	call	#__system__strncmp
20e00     00 FA 0D F2 | 	cmp	result1, #0 wz
20e04     13 23 02 A6 |  if_e	mov	local03, local05
20e08     08 00 90 AD |  if_e	jmp	#LR__2869
20e0c                 | LR__2867
20e0c                 | LR__2868
20e0c     01 26 06 F1 | 	add	local05, #1
20e10     48 FF 9F FD | 	jmp	#LR__2864
20e14                 | LR__2869
20e14     FF FF 7F FF 
20e18     FF 23 0E F2 | 	cmp	local03, ##-1 wz
20e1c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
20e20     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
20e24     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
20e28     01 FA 65 A6 |  if_e	neg	result1, #1
20e2c     78 01 90 AD |  if_e	jmp	#LR__2875
20e30     11 27 02 F6 | 	mov	local05, local03
20e34     13 2B 02 F6 | 	mov	local07, local05
20e38     02 2A 66 F0 | 	shl	local07, #2
20e3c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
20e40     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
20e44     15 29 0A FB | 	rdlong	local06, local07 wz
20e48     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
20e4c     58 00 90 AD |  if_e	jmp	#LR__2870
20e50     4C 28 06 F1 | 	add	local06, #76
20e54     14 2B 0A FB | 	rdlong	local07, local06 wz
20e58     4C 28 86 F1 | 	sub	local06, #76
20e5c     48 00 90 AD |  if_e	jmp	#LR__2870
20e60     4C 28 06 F1 | 	add	local06, #76
20e64     14 2B 02 FB | 	rdlong	local07, local06
20e68     15 23 02 F6 | 	mov	local03, local07
20e6c     13 2A 46 F7 | 	zerox	local07, #19
20e70     14 22 46 F0 | 	shr	local03, #20
20e74     02 22 66 F0 | 	shl	local03, #2
20e78     ED 22 02 F1 | 	add	local03, __methods__
20e7c     11 23 02 FB | 	rdlong	local03, local03
20e80     13 29 02 F6 | 	mov	local06, local05
20e84     02 28 66 F0 | 	shl	local06, #2
20e88     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20e8c     F3 28 02 F1 | 	add	local06, ptr___system__dat__
20e90     14 13 02 FB | 	rdlong	arg01, local06
20e94     F2 28 02 F6 | 	mov	local06, objptr
20e98     15 E5 01 F6 | 	mov	objptr, local07
20e9c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20ea0     2D 22 62 FD | 	call	local03
20ea4     14 E5 01 F6 | 	mov	objptr, local06
20ea8                 | LR__2870
20ea8     13 2D 02 F6 | 	mov	local08, local05
20eac     02 2C 66 F0 | 	shl	local08, #2
20eb0     74 E6 05 F1 | 	add	ptr___system__dat__, #116
20eb4     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
20eb8     16 21 62 FC | 	wrlong	local02, local08
20ebc     00 20 0E F2 | 	cmp	local02, #0 wz
20ec0     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
20ec4     18 00 90 5D |  if_ne	jmp	#LR__2871
20ec8     02 26 66 F0 | 	shl	local05, #2
20ecc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20ed0     F3 26 02 F1 | 	add	local05, ptr___system__dat__
20ed4     13 01 68 FC | 	wrlong	#0, local05
20ed8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20edc     C4 00 90 FD | 	jmp	#LR__2874
20ee0                 | LR__2871
20ee0     13 2F 02 F6 | 	mov	local09, local05
20ee4     04 2E 66 F0 | 	shl	local09, #4
20ee8     24 E6 05 F1 | 	add	ptr___system__dat__, #36
20eec     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
20ef0     17 13 02 F6 | 	mov	arg01, local09
20ef4     0F 15 02 F6 | 	mov	arg02, local01
20ef8     10 16 06 F6 | 	mov	arg03, #16
20efc     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
20f00     B0 4C B0 FD | 	call	#__system__strncpy
20f04     48 20 06 F1 | 	add	local02, #72
20f08     10 2D 0A FB | 	rdlong	local08, local02 wz
20f0c     48 20 86 F1 | 	sub	local02, #72
20f10     7C 00 90 AD |  if_e	jmp	#LR__2873
20f14     48 20 06 F1 | 	add	local02, #72
20f18     10 2D 02 FB | 	rdlong	local08, local02
20f1c     16 31 02 F6 | 	mov	local10, local08
20f20     13 2C 46 F7 | 	zerox	local08, #19
20f24     14 30 46 F0 | 	shr	local10, #20
20f28     02 30 66 F0 | 	shl	local10, #2
20f2c     ED 30 02 F1 | 	add	local10, __methods__
20f30     18 31 02 FB | 	rdlong	local10, local10
20f34     17 13 02 F6 | 	mov	arg01, local09
20f38     F2 32 02 F6 | 	mov	local11, objptr
20f3c     16 E5 01 F6 | 	mov	objptr, local08
20f40     2D 30 62 FD | 	call	local10
20f44     19 E5 01 F6 | 	mov	objptr, local11
20f48     FD 12 0A F6 | 	mov	arg01, result1 wz
20f4c     40 00 90 AD |  if_e	jmp	#LR__2872
20f50     13 2D 02 F6 | 	mov	local08, local05
20f54     02 2C 66 F0 | 	shl	local08, #2
20f58     74 E6 05 F1 | 	add	ptr___system__dat__, #116
20f5c     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
20f60     16 01 68 FC | 	wrlong	#0, local08
20f64     02 26 66 F0 | 	shl	local05, #2
20f68     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
20f6c     F3 26 02 F1 | 	add	local05, ptr___system__dat__
20f70     13 01 68 FC | 	wrlong	#0, local05
20f74     09 13 6A F6 | 	neg	arg01, arg01 wz
20f78     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
20f7c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
20f80     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20f84     01 FA 65 56 |  if_ne	neg	result1, #1
20f88     00 FA 05 A6 |  if_e	mov	result1, #0
20f8c     18 00 90 FD | 	jmp	#LR__2875
20f90                 | LR__2872
20f90                 | LR__2873
20f90     02 26 66 F0 | 	shl	local05, #2
20f94     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20f98     F3 26 02 F1 | 	add	local05, ptr___system__dat__
20f9c     13 2F 62 FC | 	wrlong	local09, local05
20fa0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20fa4                 | LR__2874
20fa4     00 FA 05 F6 | 	mov	result1, #0
20fa8                 | LR__2875
20fa8     A7 F0 03 F6 | 	mov	ptra, fp
20fac     B2 00 A0 FD | 	call	#popregs_
20fb0                 | __system___mount_ret
20fb0     2D 00 64 FD | 	ret
20fb4                 | 
20fb4                 | __system___chdir
20fb4     00 4A 05 F6 | 	mov	COUNT_, #0
20fb8     A8 00 A0 FD | 	call	#pushregs_
20fbc     40 F0 07 F1 | 	add	ptra, #64
20fc0     04 4E 05 F1 | 	add	fp, #4
20fc4     A7 12 62 FC | 	wrlong	arg01, fp
20fc8     04 4E 05 F1 | 	add	fp, #4
20fcc     A7 14 02 F6 | 	mov	arg02, fp
20fd0     08 4E 85 F1 | 	sub	fp, #8
20fd4     80 48 B0 FD | 	call	#__system__stat
20fd8     3C 4E 05 F1 | 	add	fp, #60
20fdc     A7 FA 61 FC | 	wrlong	result1, fp
20fe0     3C 4E 85 F1 | 	sub	fp, #60
20fe4     00 FA 0D F2 | 	cmp	result1, #0 wz
20fe8     3C 4E 05 51 |  if_ne	add	fp, #60
20fec     A7 FA 01 5B |  if_ne	rdlong	result1, fp
20ff0     3C 4E 85 51 |  if_ne	sub	fp, #60
20ff4     BC 00 90 5D |  if_ne	jmp	#LR__2882
20ff8     10 4E 05 F1 | 	add	fp, #16
20ffc     A7 12 02 FB | 	rdlong	arg01, fp
21000     10 4E 85 F1 | 	sub	fp, #16
21004     78 00 00 FF 
21008     00 12 06 F5 | 	and	arg01, ##61440
2100c     08 00 00 FF 
21010     00 12 0E F2 | 	cmp	arg01, ##4096 wz
21014     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
21018     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
2101c     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
21020     01 FA 65 56 |  if_ne	neg	result1, #1
21024     8C 00 90 5D |  if_ne	jmp	#LR__2882
21028     04 4E 05 F1 | 	add	fp, #4
2102c     A7 16 02 FB | 	rdlong	arg03, fp
21030     04 4E 85 F1 | 	sub	fp, #4
21034     0B 17 C2 FA | 	rdbyte	arg03, arg03
21038     2F 16 0E F2 | 	cmp	arg03, #47 wz
2103c     24 00 90 5D |  if_ne	jmp	#LR__2880
21040     84 E6 05 F1 | 	add	ptr___system__dat__, #132
21044     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
21048     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
2104c     04 4E 05 F1 | 	add	fp, #4
21050     A7 14 02 FB | 	rdlong	arg02, fp
21054     04 4E 85 F1 | 	sub	fp, #4
21058     00 17 06 F6 | 	mov	arg03, #256
2105c     54 4B B0 FD | 	call	#__system__strncpy
21060     4C 00 90 FD | 	jmp	#LR__2881
21064                 | LR__2880
21064     84 E7 05 F1 | 	add	ptr___system__dat__, #388
21068     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2106c     38 4E 05 F1 | 	add	fp, #56
21070     A7 12 62 FC | 	wrlong	arg01, fp
21074     38 4E 85 F1 | 	sub	fp, #56
21078     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
2107c     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
21080     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21084     00 17 06 F6 | 	mov	arg03, #256
21088     28 4B B0 FD | 	call	#__system__strncpy
2108c     38 4E 05 F1 | 	add	fp, #56
21090     A7 12 02 FB | 	rdlong	arg01, fp
21094     34 4E 85 F1 | 	sub	fp, #52
21098     A7 14 02 FB | 	rdlong	arg02, fp
2109c     04 4E 85 F1 | 	sub	fp, #4
210a0     84 E6 05 F1 | 	add	ptr___system__dat__, #132
210a4     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
210a8     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
210ac     10 00 B0 FD | 	call	#__system____getvfsforfile
210b0                 | LR__2881
210b0     00 FA 05 F6 | 	mov	result1, #0
210b4                 | LR__2882
210b4     A7 F0 03 F6 | 	mov	ptra, fp
210b8     B2 00 A0 FD | 	call	#popregs_
210bc                 | __system___chdir_ret
210bc     2D 00 64 FD | 	ret
210c0                 | 
210c0                 | __system____getvfsforfile
210c0     0E 4A 05 F6 | 	mov	COUNT_, #14
210c4     A8 00 A0 FD | 	call	#pushregs_
210c8     09 1F 02 F6 | 	mov	local01, arg01
210cc     0A 21 02 F6 | 	mov	local02, arg02
210d0     0B 23 02 F6 | 	mov	local03, arg03
210d4     97 10 48 FB | 	callpa	#(@LR__2891-@LR__2890)>>2,fcache_load_ptr_
210d8                 | LR__2890
210d8     10 FB C1 FA | 	rdbyte	result1, local02
210dc     2F FA 0D F2 | 	cmp	result1, #47 wz
210e0     01 20 06 A1 |  if_e	add	local02, #1
210e4     10 25 C2 AA |  if_e	rdbyte	local04, local02
210e8     01 20 86 A1 |  if_e	sub	local02, #1
210ec     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
210f0     01 20 06 A1 |  if_e	add	local02, #1
210f4     E0 FF 9F AD |  if_e	jmp	#LR__2890
210f8                 | LR__2891
210f8     10 25 C2 FA | 	rdbyte	local04, local02
210fc     2F 24 0E F2 | 	cmp	local04, #47 wz
21100     14 00 90 5D |  if_ne	jmp	#LR__2892
21104     0F 13 02 F6 | 	mov	arg01, local01
21108     10 15 02 F6 | 	mov	arg02, local02
2110c     00 17 06 F6 | 	mov	arg03, #256
21110     A0 4A B0 FD | 	call	#__system__strncpy
21114     7C 00 90 FD | 	jmp	#LR__2894
21118                 | LR__2892
21118     84 E6 05 F1 | 	add	ptr___system__dat__, #132
2111c     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
21120     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21124     0F 13 02 F6 | 	mov	arg01, local01
21128     00 17 06 F6 | 	mov	arg03, #256
2112c     84 4A B0 FD | 	call	#__system__strncpy
21130     10 25 CA FA | 	rdbyte	local04, local02 wz
21134     5C 00 90 AD |  if_e	jmp	#LR__2893
21138     10 25 C2 FA | 	rdbyte	local04, local02
2113c     2E 24 0E F2 | 	cmp	local04, #46 wz
21140     01 20 06 A1 |  if_e	add	local02, #1
21144     10 27 C2 AA |  if_e	rdbyte	local05, local02
21148     01 20 86 A1 |  if_e	sub	local02, #1
2114c     13 29 02 A6 |  if_e	mov	local06, local05
21150     07 28 4E A7 |  if_e	zerox	local06, #7 wz
21154     3C 00 90 AD |  if_e	jmp	#LR__2893
21158     0F 27 C2 FA | 	rdbyte	local05, local01
2115c     2F 26 0E F2 | 	cmp	local05, #47 wz
21160     01 1E 06 A1 |  if_e	add	local01, #1
21164     0F 25 C2 AA |  if_e	rdbyte	local04, local01
21168     01 1E 86 A1 |  if_e	sub	local01, #1
2116c     00 24 4E A2 |  if_e	cmps	local04, #0 wz
21170     80 01 00 5F 
21174     4C 15 06 56 |  if_ne	mov	arg02, ##@LR__4980
21178     0F 13 02 56 |  if_ne	mov	arg01, local01
2117c     00 17 06 56 |  if_ne	mov	arg03, #256
21180     7C 4A B0 5D |  if_ne	call	#__system__strncat
21184     0F 13 02 F6 | 	mov	arg01, local01
21188     10 15 02 F6 | 	mov	arg02, local02
2118c     00 17 06 F6 | 	mov	arg03, #256
21190     6C 4A B0 FD | 	call	#__system__strncat
21194                 | LR__2893
21194                 | LR__2894
21194     0F 13 02 F6 | 	mov	arg01, local01
21198     24 4C B0 FD | 	call	#__system___normalizeName
2119c     0F 25 CA FA | 	rdbyte	local04, local01 wz
211a0     1C 00 90 AD |  if_e	jmp	#LR__2895
211a4     0F 25 C2 FA | 	rdbyte	local04, local01
211a8     2F 24 0E F2 | 	cmp	local04, #47 wz
211ac     01 1E 06 A1 |  if_e	add	local01, #1
211b0     0F 29 C2 AA |  if_e	rdbyte	local06, local01
211b4     01 1E 86 A1 |  if_e	sub	local01, #1
211b8     00 28 4E A2 |  if_e	cmps	local06, #0 wz
211bc     18 00 90 5D |  if_ne	jmp	#LR__2896
211c0                 | LR__2895
211c0     01 00 00 FF 
211c4     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
211c8     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
211cc     01 00 00 FF 
211d0     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
211d4     EC 01 90 FD | 	jmp	#LR__2910
211d8                 | LR__2896
211d8     00 2A 06 F6 | 	mov	local07, #0
211dc                 | LR__2897
211dc     04 2A 56 F2 | 	cmps	local07, #4 wc
211e0     CC 01 90 3D |  if_ae	jmp	#LR__2909
211e4     15 29 02 F6 | 	mov	local06, local07
211e8     02 28 66 F0 | 	shl	local06, #2
211ec     64 E6 05 F1 | 	add	ptr___system__dat__, #100
211f0     F3 28 02 F1 | 	add	local06, ptr___system__dat__
211f4     14 29 0A FB | 	rdlong	local06, local06 wz
211f8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
211fc     A8 01 90 AD |  if_e	jmp	#LR__2908
21200     15 25 02 F6 | 	mov	local04, local07
21204     02 24 66 F0 | 	shl	local04, #2
21208     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2120c     F3 24 02 F1 | 	add	local04, ptr___system__dat__
21210     12 13 02 FB | 	rdlong	arg01, local04
21214     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21218     09 2D 02 F6 | 	mov	local08, arg01
2121c     97 06 48 FB | 	callpa	#(@LR__2899-@LR__2898)>>2,fcache_load_ptr_
21220                 | LR__2898
21220     16 FB C9 FA | 	rdbyte	result1, local08 wz
21224     01 2C 06 51 |  if_ne	add	local08, #1
21228     F4 FF 9F 5D |  if_ne	jmp	#LR__2898
2122c                 | LR__2899
2122c     09 2D 82 F1 | 	sub	local08, arg01
21230     16 2F 02 F6 | 	mov	local09, local08
21234     17 25 02 F6 | 	mov	local04, local09
21238     0F 25 02 F1 | 	add	local04, local01
2123c     12 29 C2 FA | 	rdbyte	local06, local04
21240     2F 28 0E F2 | 	cmp	local06, #47 wz
21244     17 31 02 56 |  if_ne	mov	local10, local09
21248     0F 31 02 51 |  if_ne	add	local10, local01
2124c     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
21250     54 01 90 5D |  if_ne	jmp	#LR__2907
21254     15 17 02 F6 | 	mov	arg03, local07
21258     02 16 66 F0 | 	shl	arg03, #2
2125c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21260     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
21264     0B 15 02 FB | 	rdlong	arg02, arg03
21268     17 17 02 F6 | 	mov	arg03, local09
2126c     0F 13 02 F6 | 	mov	arg01, local01
21270     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21274     E8 49 B0 FD | 	call	#__system__strncmp
21278     00 FA 4D F2 | 	cmps	result1, #0 wz
2127c     28 01 90 5D |  if_ne	jmp	#LR__2907
21280     15 33 02 F6 | 	mov	local11, local07
21284     02 32 66 F0 | 	shl	local11, #2
21288     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2128c     F3 32 02 F1 | 	add	local11, ptr___system__dat__
21290     19 35 02 FB | 	rdlong	local12, local11
21294     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
21298     97 22 48 FB | 	callpa	#(@LR__2901-@LR__2900)>>2,fcache_load_ptr_
2129c                 | LR__2900
2129c     17 29 02 F6 | 	mov	local06, local09
212a0     01 28 06 F1 | 	add	local06, #1
212a4     0F 29 02 F1 | 	add	local06, local01
212a8     14 33 C2 FA | 	rdbyte	local11, local06
212ac     2E 32 0E F2 | 	cmp	local11, #46 wz
212b0     2C 00 90 5D |  if_ne	jmp	#LR__2902
212b4     17 33 02 F6 | 	mov	local11, local09
212b8     02 32 06 F1 | 	add	local11, #2
212bc     0F 33 02 F1 | 	add	local11, local01
212c0     19 31 C2 FA | 	rdbyte	local10, local11
212c4     2F 30 0E F2 | 	cmp	local10, #47 wz
212c8     17 37 02 56 |  if_ne	mov	local13, local09
212cc     02 36 06 51 |  if_ne	add	local13, #2
212d0     0F 37 02 51 |  if_ne	add	local13, local01
212d4     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
212d8     01 2E 06 A1 |  if_e	add	local09, #1
212dc     BC FF 9F AD |  if_e	jmp	#LR__2900
212e0                 | LR__2901
212e0                 | LR__2902
212e0     00 22 0E F2 | 	cmp	local03, #0 wz
212e4     11 13 02 56 |  if_ne	mov	arg01, local03
212e8     0F 15 02 56 |  if_ne	mov	arg02, local01
212ec     00 17 06 56 |  if_ne	mov	arg03, #256
212f0     C0 48 B0 5D |  if_ne	call	#__system__strncpy
212f4     0F 15 02 F6 | 	mov	arg02, local01
212f8     17 15 02 F1 | 	add	arg02, local09
212fc     01 14 06 F1 | 	add	arg02, #1
21300     0F 13 02 F6 | 	mov	arg01, local01
21304     D4 F5 BF FD | 	call	#__system____builtin_strcpy
21308     0F 13 02 F6 | 	mov	arg01, local01
2130c     09 2D 02 F6 | 	mov	local08, arg01
21310     97 06 48 FB | 	callpa	#(@LR__2904-@LR__2903)>>2,fcache_load_ptr_
21314                 | LR__2903
21314     16 FB C9 FA | 	rdbyte	result1, local08 wz
21318     01 2C 06 51 |  if_ne	add	local08, #1
2131c     F4 FF 9F 5D |  if_ne	jmp	#LR__2903
21320                 | LR__2904
21320     09 2D 82 F1 | 	sub	local08, arg01
21324     16 2F 02 F6 | 	mov	local09, local08
21328                 | LR__2905
21328     01 2E 56 F2 | 	cmps	local09, #1 wc
2132c     70 00 90 CD |  if_b	jmp	#LR__2906
21330     17 25 02 F6 | 	mov	local04, local09
21334     0F 25 02 F1 | 	add	local04, local01
21338     12 33 C2 FA | 	rdbyte	local11, local04
2133c     2F 32 0E F2 | 	cmp	local11, #47 wz
21340     17 33 02 A6 |  if_e	mov	local11, local09
21344     0F 33 02 A1 |  if_e	add	local11, local01
21348     19 01 48 AC |  if_e	wrbyte	#0, local11
2134c     01 2E 86 A1 |  if_e	sub	local09, #1
21350     D4 FF 9F AD |  if_e	jmp	#LR__2905
21354     17 25 02 F6 | 	mov	local04, local09
21358     0F 25 02 F1 | 	add	local04, local01
2135c     12 33 C2 FA | 	rdbyte	local11, local04
21360     2E 32 0E F2 | 	cmp	local11, #46 wz
21364     38 00 90 5D |  if_ne	jmp	#LR__2906
21368     02 2E 56 F2 | 	cmps	local09, #2 wc
2136c     30 00 90 CD |  if_b	jmp	#LR__2906
21370     17 39 02 F6 | 	mov	local14, local09
21374     01 38 86 F1 | 	sub	local14, #1
21378     0F 39 02 F1 | 	add	local14, local01
2137c     1C 27 C2 FA | 	rdbyte	local05, local14
21380     2F 26 0E F2 | 	cmp	local05, #47 wz
21384     18 00 90 5D |  if_ne	jmp	#LR__2906
21388     17 25 02 F6 | 	mov	local04, local09
2138c     01 24 86 F1 | 	sub	local04, #1
21390     0F 25 02 F1 | 	add	local04, local01
21394     12 01 48 FC | 	wrbyte	#0, local04
21398     02 2E 86 F1 | 	sub	local09, #2
2139c     88 FF 9F FD | 	jmp	#LR__2905
213a0                 | LR__2906
213a0     1A FB 01 F6 | 	mov	result1, local12
213a4     1C 00 90 FD | 	jmp	#LR__2910
213a8                 | LR__2907
213a8                 | LR__2908
213a8     01 2A 06 F1 | 	add	local07, #1
213ac     2C FE 9F FD | 	jmp	#LR__2897
213b0                 | LR__2909
213b0     03 00 00 FF 
213b4     38 E7 05 F1 | 	add	ptr___system__dat__, ##1848
213b8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
213bc     03 00 00 FF 
213c0     38 E7 85 F1 | 	sub	ptr___system__dat__, ##1848
213c4                 | LR__2910
213c4     A7 F0 03 F6 | 	mov	ptra, fp
213c8     B2 00 A0 FD | 	call	#popregs_
213cc                 | __system____getvfsforfile_ret
213cc     2D 00 64 FD | 	ret
213d0                 | 
213d0                 | __system___basic_open
213d0     05 4A 05 F6 | 	mov	COUNT_, #5
213d4     A8 00 A0 FD | 	call	#pushregs_
213d8     0A 1F 02 F6 | 	mov	local01, arg02
213dc     0B 21 02 F6 | 	mov	local02, arg03
213e0     0C 23 02 F6 | 	mov	local03, arg04
213e4     00 24 06 F6 | 	mov	local04, #0
213e8     A0 47 B0 FD | 	call	#__system____getftab
213ec     FD 26 0A F6 | 	mov	local05, result1 wz
213f0     18 00 90 5D |  if_ne	jmp	#LR__2920
213f4     EE 12 02 F6 | 	mov	arg01, abortchain
213f8     0C 14 06 F6 | 	mov	arg02, #12
213fc     01 16 06 F6 | 	mov	arg03, #1
21400     DA 00 A0 FD | 	call	#__longjmp
21404     01 FA 65 F6 | 	neg	result1, #1
21408     14 01 90 FD | 	jmp	#LR__2929
2140c                 | LR__2920
2140c     08 26 06 F1 | 	add	local05, #8
21410     13 FB 09 FB | 	rdlong	result1, local05 wz
21414     08 26 86 F1 | 	sub	local05, #8
21418     13 13 02 56 |  if_ne	mov	arg01, local05
2141c     C0 3E B0 5D |  if_ne	call	#__system___closeraw
21420     00 1E 0E F2 | 	cmp	local01, #0 wz
21424     00 20 0E A2 |  if_e	cmp	local02, #0 wz
21428     00 22 0E A2 |  if_e	cmp	local03, #0 wz
2142c     3C 00 90 AD |  if_e	jmp	#LR__2922
21430     0C 12 06 F6 | 	mov	arg01, #12
21434     A8 33 B0 FD | 	call	#__system___gc_alloc_managed
21438     FD 24 0A F6 | 	mov	local04, result1 wz
2143c     18 00 90 5D |  if_ne	jmp	#LR__2921
21440     EE 12 02 F6 | 	mov	arg01, abortchain
21444     07 14 06 F6 | 	mov	arg02, #7
21448     01 16 06 F6 | 	mov	arg03, #1
2144c     DA 00 A0 FD | 	call	#__longjmp
21450     01 FA 65 F6 | 	neg	result1, #1
21454     C8 00 90 FD | 	jmp	#LR__2929
21458                 | LR__2921
21458     12 01 68 FC | 	wrlong	#0, local04
2145c     04 24 06 F1 | 	add	local04, #4
21460     12 01 68 FC | 	wrlong	#0, local04
21464     04 24 86 F1 | 	sub	local04, #4
21468     13 25 62 FC | 	wrlong	local04, local05
2146c                 | LR__2922
2146c     00 1E 0E F2 | 	cmp	local01, #0 wz
21470     20 00 90 AD |  if_e	jmp	#LR__2923
21474     12 1F 62 FC | 	wrlong	local01, local04
21478     12 FB 01 F6 | 	mov	result1, local04
2147c     00 80 04 FF 
21480     00 FA 45 F5 | 	or	result1, ##150994944
21484     1C 26 06 F1 | 	add	local05, #28
21488     13 FB 61 FC | 	wrlong	result1, local05
2148c     1C 26 86 F1 | 	sub	local05, #28
21490     0C 00 90 FD | 	jmp	#LR__2924
21494                 | LR__2923
21494     1C 26 06 F1 | 	add	local05, #28
21498     13 01 68 FC | 	wrlong	#0, local05
2149c     1C 26 86 F1 | 	sub	local05, #28
214a0                 | LR__2924
214a0     00 20 0E F2 | 	cmp	local02, #0 wz
214a4     28 00 90 AD |  if_e	jmp	#LR__2925
214a8     04 24 06 F1 | 	add	local04, #4
214ac     12 21 62 FC | 	wrlong	local02, local04
214b0     04 24 86 F1 | 	sub	local04, #4
214b4     12 FB 01 F6 | 	mov	result1, local04
214b8     00 88 04 FF 
214bc     00 FA 45 F5 | 	or	result1, ##152043520
214c0     20 26 06 F1 | 	add	local05, #32
214c4     13 FB 61 FC | 	wrlong	result1, local05
214c8     20 26 86 F1 | 	sub	local05, #32
214cc     0C 00 90 FD | 	jmp	#LR__2926
214d0                 | LR__2925
214d0     20 26 06 F1 | 	add	local05, #32
214d4     13 01 68 FC | 	wrlong	#0, local05
214d8     20 26 86 F1 | 	sub	local05, #32
214dc                 | LR__2926
214dc     00 22 0E F2 | 	cmp	local03, #0 wz
214e0     24 00 90 AD |  if_e	jmp	#LR__2927
214e4     08 24 06 F1 | 	add	local04, #8
214e8     12 23 62 FC | 	wrlong	local03, local04
214ec     08 24 86 F1 | 	sub	local04, #8
214f0     00 90 04 FF 
214f4     00 24 46 F5 | 	or	local04, ##153092096
214f8     24 26 06 F1 | 	add	local05, #36
214fc     13 25 62 FC | 	wrlong	local04, local05
21500     24 26 86 F1 | 	sub	local05, #36
21504     0C 00 90 FD | 	jmp	#LR__2928
21508                 | LR__2927
21508     24 26 06 F1 | 	add	local05, #36
2150c     13 01 68 FC | 	wrlong	#0, local05
21510     24 26 86 F1 | 	sub	local05, #36
21514                 | LR__2928
21514     08 26 06 F1 | 	add	local05, #8
21518     13 0F 68 FC | 	wrlong	#7, local05
2151c     00 FA 05 F6 | 	mov	result1, #0
21520                 | LR__2929
21520     A7 F0 03 F6 | 	mov	ptra, fp
21524     B2 00 A0 FD | 	call	#popregs_
21528                 | __system___basic_open_ret
21528     2D 00 64 FD | 	ret
2152c                 | 
2152c                 | __system___basic_open_string
2152c     04 4A 05 F6 | 	mov	COUNT_, #4
21530     A8 00 A0 FD | 	call	#pushregs_
21534     0A 1F 02 F6 | 	mov	local01, arg02
21538     0B 21 02 F6 | 	mov	local02, arg03
2153c     4C 46 B0 FD | 	call	#__system____getftab
21540     FD 22 0A F6 | 	mov	local03, result1 wz
21544     18 00 90 5D |  if_ne	jmp	#LR__2930
21548     EE 12 02 F6 | 	mov	arg01, abortchain
2154c     0C 14 06 F6 | 	mov	arg02, #12
21550     01 16 06 F6 | 	mov	arg03, #1
21554     DA 00 A0 FD | 	call	#__longjmp
21558     01 FA 65 F6 | 	neg	result1, #1
2155c     58 00 90 FD | 	jmp	#LR__2932
21560                 | LR__2930
21560     08 22 06 F1 | 	add	local03, #8
21564     11 19 0A FB | 	rdlong	arg04, local03 wz
21568     08 22 86 F1 | 	sub	local03, #8
2156c     11 13 02 56 |  if_ne	mov	arg01, local03
21570     6C 3D B0 5D |  if_ne	call	#__system___closeraw
21574     0F 15 02 F6 | 	mov	arg02, local01
21578     10 17 02 F6 | 	mov	arg03, local02
2157c     11 13 02 F6 | 	mov	arg01, local03
21580     B6 19 06 F6 | 	mov	arg04, #438
21584     54 3A B0 FD | 	call	#__system___openraw
21588     FD 24 02 F6 | 	mov	local04, result1
2158c     00 24 56 F2 | 	cmps	local04, #0 wc
21590     20 00 90 3D |  if_ae	jmp	#LR__2931
21594     20 E6 05 F1 | 	add	ptr___system__dat__, #32
21598     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
2159c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
215a0     EE 12 02 F6 | 	mov	arg01, abortchain
215a4     01 16 06 F6 | 	mov	arg03, #1
215a8     DA 00 A0 FD | 	call	#__longjmp
215ac     01 FA 65 F6 | 	neg	result1, #1
215b0     04 00 90 FD | 	jmp	#LR__2932
215b4                 | LR__2931
215b4     12 FB 01 F6 | 	mov	result1, local04
215b8                 | LR__2932
215b8     A7 F0 03 F6 | 	mov	ptra, fp
215bc     B2 00 A0 FD | 	call	#popregs_
215c0                 | __system___basic_open_string_ret
215c0     2D 00 64 FD | 	ret
215c4                 | 
215c4                 | __system___basic_print_char
215c4     03 4A 05 F6 | 	mov	COUNT_, #3
215c8     A8 00 A0 FD | 	call	#pushregs_
215cc     0A 1F 02 F6 | 	mov	local01, arg02
215d0     0C 4D B0 FD | 	call	#__system___gettxfunc
215d4     FD 20 0A F6 | 	mov	local02, result1 wz
215d8     00 FA 05 A6 |  if_e	mov	result1, #0
215dc     30 00 90 AD |  if_e	jmp	#LR__2940
215e0     10 23 02 F6 | 	mov	local03, local02
215e4     13 20 46 F7 | 	zerox	local02, #19
215e8     14 22 46 F0 | 	shr	local03, #20
215ec     02 22 66 F0 | 	shl	local03, #2
215f0     ED 22 02 F1 | 	add	local03, __methods__
215f4     11 23 02 FB | 	rdlong	local03, local03
215f8     0F 13 02 F6 | 	mov	arg01, local01
215fc     F2 1E 02 F6 | 	mov	local01, objptr
21600     10 E5 01 F6 | 	mov	objptr, local02
21604     2D 22 62 FD | 	call	local03
21608     0F E5 01 F6 | 	mov	objptr, local01
2160c     01 FA 05 F6 | 	mov	result1, #1
21610                 | LR__2940
21610     A7 F0 03 F6 | 	mov	ptra, fp
21614     B2 00 A0 FD | 	call	#popregs_
21618                 | __system___basic_print_char_ret
21618     2D 00 64 FD | 	ret
2161c                 | 
2161c                 | __system___basic_print_string
2161c     03 4A 05 F6 | 	mov	COUNT_, #3
21620     A8 00 A0 FD | 	call	#pushregs_
21624     0A 1F 02 F6 | 	mov	local01, arg02
21628     0B 21 02 F6 | 	mov	local02, arg03
2162c     B0 4C B0 FD | 	call	#__system___gettxfunc
21630     FD 22 0A F6 | 	mov	local03, result1 wz
21634     00 FA 05 A6 |  if_e	mov	result1, #0
21638     18 00 90 AD |  if_e	jmp	#LR__2950
2163c     00 1E 0E F2 | 	cmp	local01, #0 wz
21640     00 FA 05 A6 |  if_e	mov	result1, #0
21644     11 13 02 56 |  if_ne	mov	arg01, local03
21648     10 15 02 56 |  if_ne	mov	arg02, local02
2164c     0F 17 02 56 |  if_ne	mov	arg03, local01
21650     08 02 B0 5D |  if_ne	call	#__system___fmtstr
21654                 | LR__2950
21654     A7 F0 03 F6 | 	mov	ptra, fp
21658     B2 00 A0 FD | 	call	#popregs_
2165c                 | __system___basic_print_string_ret
2165c     2D 00 64 FD | 	ret
21660                 | 
21660                 | __system___basic_print_integer
21660     04 4A 05 F6 | 	mov	COUNT_, #4
21664     A8 00 A0 FD | 	call	#pushregs_
21668     0A 1F 02 F6 | 	mov	local01, arg02
2166c     0B 21 02 F6 | 	mov	local02, arg03
21670     0C 23 02 F6 | 	mov	local03, arg04
21674     68 4C B0 FD | 	call	#__system___gettxfunc
21678     FD 24 0A F6 | 	mov	local04, result1 wz
2167c     00 FA 05 A6 |  if_e	mov	result1, #0
21680     12 13 02 56 |  if_ne	mov	arg01, local04
21684     10 15 02 56 |  if_ne	mov	arg02, local02
21688     0F 17 02 56 |  if_ne	mov	arg03, local01
2168c     11 19 02 56 |  if_ne	mov	arg04, local03
21690     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
21694     A7 F0 03 F6 | 	mov	ptra, fp
21698     B2 00 A0 FD | 	call	#popregs_
2169c                 | __system___basic_print_integer_ret
2169c     2D 00 64 FD | 	ret
216a0                 | 
216a0                 | __system___basic_print_unsigned
216a0     03 4A 05 F6 | 	mov	COUNT_, #3
216a4     A8 00 A0 FD | 	call	#pushregs_
216a8     0A 1F 02 F6 | 	mov	local01, arg02
216ac     0B 21 02 F6 | 	mov	local02, arg03
216b0     0C 23 02 F6 | 	mov	local03, arg04
216b4     28 4C B0 FD | 	call	#__system___gettxfunc
216b8     FD 12 0A F6 | 	mov	arg01, result1 wz
216bc     00 FA 05 A6 |  if_e	mov	result1, #0
216c0     3A 20 26 54 |  if_ne	bith	local02, #58
216c4     10 15 02 56 |  if_ne	mov	arg02, local02
216c8     0F 17 02 56 |  if_ne	mov	arg03, local01
216cc     11 19 02 56 |  if_ne	mov	arg04, local03
216d0     74 02 B0 5D |  if_ne	call	#__system___fmtnum
216d4     A7 F0 03 F6 | 	mov	ptra, fp
216d8     B2 00 A0 FD | 	call	#popregs_
216dc                 | __system___basic_print_unsigned_ret
216dc     2D 00 64 FD | 	ret
216e0                 | 
216e0                 | __system___basic_get_char
216e0     03 4A 05 F6 | 	mov	COUNT_, #3
216e4     A8 00 A0 FD | 	call	#pushregs_
216e8     38 4C B0 FD | 	call	#__system___getrxfunc
216ec     FD 1E 0A F6 | 	mov	local01, result1 wz
216f0     01 FA 65 A6 |  if_e	neg	result1, #1
216f4     28 00 90 AD |  if_e	jmp	#LR__2960
216f8     0F 21 02 F6 | 	mov	local02, local01
216fc     13 1E 46 F7 | 	zerox	local01, #19
21700     14 20 46 F0 | 	shr	local02, #20
21704     02 20 66 F0 | 	shl	local02, #2
21708     ED 20 02 F1 | 	add	local02, __methods__
2170c     10 21 02 FB | 	rdlong	local02, local02
21710     F2 22 02 F6 | 	mov	local03, objptr
21714     0F E5 01 F6 | 	mov	objptr, local01
21718     2D 20 62 FD | 	call	local02
2171c     11 E5 01 F6 | 	mov	objptr, local03
21720                 | LR__2960
21720     A7 F0 03 F6 | 	mov	ptra, fp
21724     B2 00 A0 FD | 	call	#popregs_
21728                 | __system___basic_get_char_ret
21728     2D 00 64 FD | 	ret
2172c                 | 
2172c                 | __system___basic_put
2172c     04 4A 05 F6 | 	mov	COUNT_, #4
21730     A8 00 A0 FD | 	call	#pushregs_
21734     0D 1F 02 F6 | 	mov	local01, arg05
21738     0F 19 02 FD | 	qmul	arg04, local01
2173c     09 21 02 F6 | 	mov	local02, arg01
21740     0B 23 02 F6 | 	mov	local03, arg03
21744     00 14 0E F2 | 	cmp	arg02, #0 wz
21748     01 14 86 51 |  if_ne	sub	arg02, #1
2174c     10 13 02 56 |  if_ne	mov	arg01, local02
21750     00 16 06 56 |  if_ne	mov	arg03, #0
21754     18 24 62 FD | 	getqx	local04
21758     78 42 B0 5D |  if_ne	call	#__system__lseek
2175c     11 15 02 F6 | 	mov	arg02, local03
21760     12 17 02 F6 | 	mov	arg03, local04
21764     10 13 02 F6 | 	mov	arg01, local02
21768     B4 41 B0 FD | 	call	#__system__write
2176c     FD 24 02 F6 | 	mov	local04, result1
21770     01 24 56 F2 | 	cmps	local04, #1 wc
21774     10 00 90 CD |  if_b	jmp	#LR__2970
21778     12 65 02 F6 | 	mov	muldiva_, local04
2177c     0F 67 02 F6 | 	mov	muldivb_, local01
21780     BA 00 A0 FD | 	call	#divide_
21784     33 25 02 F6 | 	mov	local04, muldivb_
21788                 | LR__2970
21788     12 FB 01 F6 | 	mov	result1, local04
2178c     A7 F0 03 F6 | 	mov	ptra, fp
21790     B2 00 A0 FD | 	call	#popregs_
21794                 | __system___basic_put_ret
21794     2D 00 64 FD | 	ret
21798                 | 
21798                 | __system___basic_get
21798     04 4A 05 F6 | 	mov	COUNT_, #4
2179c     A8 00 A0 FD | 	call	#pushregs_
217a0     0D 1F 02 F6 | 	mov	local01, arg05
217a4     0F 19 02 FD | 	qmul	arg04, local01
217a8     09 21 02 F6 | 	mov	local02, arg01
217ac     0B 23 02 F6 | 	mov	local03, arg03
217b0     00 14 0E F2 | 	cmp	arg02, #0 wz
217b4     01 14 86 51 |  if_ne	sub	arg02, #1
217b8     10 13 02 56 |  if_ne	mov	arg01, local02
217bc     00 16 06 56 |  if_ne	mov	arg03, #0
217c0     18 24 62 FD | 	getqx	local04
217c4     0C 42 B0 5D |  if_ne	call	#__system__lseek
217c8     11 15 02 F6 | 	mov	arg02, local03
217cc     12 17 02 F6 | 	mov	arg03, local04
217d0     10 13 02 F6 | 	mov	arg01, local02
217d4     84 41 B0 FD | 	call	#__system__read
217d8     FD 24 02 F6 | 	mov	local04, result1
217dc     01 24 56 F2 | 	cmps	local04, #1 wc
217e0     10 00 90 CD |  if_b	jmp	#LR__2980
217e4     12 65 02 F6 | 	mov	muldiva_, local04
217e8     0F 67 02 F6 | 	mov	muldivb_, local01
217ec     BA 00 A0 FD | 	call	#divide_
217f0     33 25 02 F6 | 	mov	local04, muldivb_
217f4                 | LR__2980
217f4     12 FB 01 F6 | 	mov	result1, local04
217f8     A7 F0 03 F6 | 	mov	ptra, fp
217fc     B2 00 A0 FD | 	call	#popregs_
21800                 | __system___basic_get_ret
21800     2D 00 64 FD | 	ret
21804                 | 
21804                 | __system___fmtchar
21804     00 4A 05 F6 | 	mov	COUNT_, #0
21808     A8 00 A0 FD | 	call	#pushregs_
2180c     10 F0 07 F1 | 	add	ptra, #16
21810     04 4E 05 F1 | 	add	fp, #4
21814     A7 12 62 FC | 	wrlong	arg01, fp
21818     04 4E 05 F1 | 	add	fp, #4
2181c     A7 14 62 FC | 	wrlong	arg02, fp
21820     04 4E 05 F1 | 	add	fp, #4
21824     A7 16 62 FC | 	wrlong	arg03, fp
21828     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2182c     A7 16 62 FC | 	wrlong	arg03, fp
21830     08 4E 85 F1 | 	sub	fp, #8
21834     A7 12 02 FB | 	rdlong	arg01, fp
21838     04 4E 05 F1 | 	add	fp, #4
2183c     A7 14 02 FB | 	rdlong	arg02, fp
21840     04 4E 05 F1 | 	add	fp, #4
21844     A7 16 02 F6 | 	mov	arg03, fp
21848     0C 4E 85 F1 | 	sub	fp, #12
2184c     0C 00 B0 FD | 	call	#__system___fmtstr
21850     A7 F0 03 F6 | 	mov	ptra, fp
21854     B2 00 A0 FD | 	call	#popregs_
21858                 | __system___fmtchar_ret
21858     2D 00 64 FD | 	ret
2185c                 | 
2185c                 | __system___fmtstr
2185c     09 4A 05 F6 | 	mov	COUNT_, #9
21860     A8 00 A0 FD | 	call	#pushregs_
21864     09 1F 02 F6 | 	mov	local01, arg01
21868     0A 21 02 F6 | 	mov	local02, arg02
2186c     0B 23 02 F6 | 	mov	local03, arg03
21870     10 19 E2 F8 | 	getbyte	arg04, local02, #0
21874     11 13 02 F6 | 	mov	arg01, local03
21878     09 25 02 F6 | 	mov	local04, arg01
2187c     97 06 48 FB | 	callpa	#(@LR__2991-@LR__2990)>>2,fcache_load_ptr_
21880                 | LR__2990
21880     12 FB C9 FA | 	rdbyte	result1, local04 wz
21884     01 24 06 51 |  if_ne	add	local04, #1
21888     F4 FF 9F 5D |  if_ne	jmp	#LR__2990
2188c                 | LR__2991
2188c     09 25 82 F1 | 	sub	local04, arg01
21890     00 18 0E F2 | 	cmp	arg04, #0 wz
21894     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
21898     10 15 02 F6 | 	mov	arg02, local02
2189c     12 17 02 F6 | 	mov	arg03, local04
218a0     0F 13 02 F6 | 	mov	arg01, local01
218a4     02 18 06 F6 | 	mov	arg04, #2
218a8     D4 46 B0 FD | 	call	#__system___fmtpad
218ac     FD 26 02 F6 | 	mov	local05, result1
218b0     00 26 56 F2 | 	cmps	local05, #0 wc
218b4     13 FB 01 C6 |  if_b	mov	result1, local05
218b8     80 00 90 CD |  if_b	jmp	#LR__2994
218bc     01 24 56 F2 | 	cmps	local04, #1 wc
218c0     50 00 90 CD |  if_b	jmp	#LR__2993
218c4     12 29 02 F6 | 	mov	local06, local04
218c8                 | LR__2992
218c8     0F 2B 02 F6 | 	mov	local07, local01
218cc     0F 2D 02 F6 | 	mov	local08, local01
218d0     13 2A 46 F7 | 	zerox	local07, #19
218d4     14 2C 46 F0 | 	shr	local08, #20
218d8     02 2C 66 F0 | 	shl	local08, #2
218dc     ED 2C 02 F1 | 	add	local08, __methods__
218e0     16 2D 02 FB | 	rdlong	local08, local08
218e4     11 13 C2 FA | 	rdbyte	arg01, local03
218e8     F2 2E 02 F6 | 	mov	local09, objptr
218ec     15 E5 01 F6 | 	mov	objptr, local07
218f0     01 22 06 F1 | 	add	local03, #1
218f4     2D 2C 62 FD | 	call	local08
218f8     17 E5 01 F6 | 	mov	objptr, local09
218fc     FD 2E 02 F6 | 	mov	local09, result1
21900     00 2E 56 F2 | 	cmps	local09, #0 wc
21904     17 FB 01 C6 |  if_b	mov	result1, local09
21908     30 00 90 CD |  if_b	jmp	#LR__2994
2190c     17 27 02 F1 | 	add	local05, local09
21910     ED 29 6E FB | 	djnz	local06, #LR__2992
21914                 | LR__2993
21914     10 15 02 F6 | 	mov	arg02, local02
21918     12 17 02 F6 | 	mov	arg03, local04
2191c     0F 13 02 F6 | 	mov	arg01, local01
21920     01 18 06 F6 | 	mov	arg04, #1
21924     58 46 B0 FD | 	call	#__system___fmtpad
21928     FD 2E 02 F6 | 	mov	local09, result1
2192c     00 2E 56 F2 | 	cmps	local09, #0 wc
21930     17 FB 01 C6 |  if_b	mov	result1, local09
21934     17 27 02 31 |  if_ae	add	local05, local09
21938     13 FB 01 36 |  if_ae	mov	result1, local05
2193c                 | LR__2994
2193c     A7 F0 03 F6 | 	mov	ptra, fp
21940     B2 00 A0 FD | 	call	#popregs_
21944                 | __system___fmtstr_ret
21944     2D 00 64 FD | 	ret
21948                 | 
21948                 | __system___fmtnum
21948     0B 4A 05 F6 | 	mov	COUNT_, #11
2194c     A8 00 A0 FD | 	call	#pushregs_
21950     09 1F 02 F6 | 	mov	local01, arg01
21954     0A 21 02 F6 | 	mov	local02, arg02
21958     0B 23 02 F6 | 	mov	local03, arg03
2195c     0C 25 02 F6 | 	mov	local04, arg04
21960     F8 27 02 F6 | 	mov	local05, ptra
21964     13 29 02 F6 | 	mov	local06, local05
21968     00 2A 06 F6 | 	mov	local07, #0
2196c     10 2D 02 F6 | 	mov	local08, local02
21970     10 2C 46 F0 | 	shr	local08, #16
21974     3F 2C 06 F5 | 	and	local08, #63
21978     10 2F E2 F8 | 	getbyte	local09, local02, #0
2197c     10 31 02 F6 | 	mov	local10, local02
21980     1A 30 46 F0 | 	shr	local10, #26
21984     03 30 06 F5 | 	and	local10, #3
21988     18 33 02 F6 | 	mov	local11, local10
2198c     01 2C 56 F2 | 	cmps	local08, #1 wc
21990     44 F0 07 F1 | 	add	ptra, #68
21994     01 2C 86 31 |  if_ae	sub	local08, #1
21998     41 2E 56 F2 | 	cmps	local09, #65 wc
2199c     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
219a0     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
219a4     03 32 0E F2 | 	cmp	local11, #3 wz
219a8     00 32 06 A6 |  if_e	mov	local11, #0
219ac     00 22 56 52 |  if_ne	cmps	local03, #0 wc
219b0     04 32 06 46 |  if_c_and_nz	mov	local11, #4
219b4     11 23 62 46 |  if_c_and_nz	neg	local03, local03
219b8     00 32 0E F2 | 	cmp	local11, #0 wz
219bc     4C 00 90 AD |  if_e	jmp	#LR__3003
219c0     01 2A 06 F6 | 	mov	local07, #1
219c4     17 2D 0A F2 | 	cmp	local08, local09 wz
219c8     18 00 90 5D |  if_ne	jmp	#LR__3001
219cc     05 2C 6E FB | 	djnz	local08, #LR__3000
219d0     0F 13 02 F6 | 	mov	arg01, local01
219d4     10 15 02 F6 | 	mov	arg02, local02
219d8     23 16 06 F6 | 	mov	arg03, #35
219dc     24 FE BF FD | 	call	#__system___fmtchar
219e0     88 00 90 FD | 	jmp	#LR__3007
219e4                 | LR__3000
219e4                 | LR__3001
219e4     02 32 0E F2 | 	cmp	local11, #2 wz
219e8     14 31 02 A6 |  if_e	mov	local10, local06
219ec     01 28 06 A1 |  if_e	add	local06, #1
219f0     18 41 48 AC |  if_e	wrbyte	#32, local10
219f4     14 00 90 AD |  if_e	jmp	#LR__3002
219f8     04 32 0E F2 | 	cmp	local11, #4 wz
219fc     14 5B 48 AC |  if_e	wrbyte	#45, local06
21a00     01 28 06 A1 |  if_e	add	local06, #1
21a04     14 57 48 5C |  if_ne	wrbyte	#43, local06
21a08     01 28 06 51 |  if_ne	add	local06, #1
21a0c                 | LR__3002
21a0c                 | LR__3003
21a0c     14 13 02 F6 | 	mov	arg01, local06
21a10     11 15 02 F6 | 	mov	arg02, local03
21a14     12 17 02 F6 | 	mov	arg03, local04
21a18     16 19 02 F6 | 	mov	arg04, local08
21a1c     00 1A 06 F6 | 	mov	arg05, #0
21a20     1D 20 2E F4 | 	testbn	local02, #29 wz
21a24     01 1A 06 56 |  if_ne	mov	arg05, #1
21a28     1C 46 B0 FD | 	call	#__system___uitoa
21a2c     FD 2A 02 F1 | 	add	local07, result1
21a30     17 2B 5A F2 | 	cmps	local07, local09 wcz
21a34     24 00 90 ED |  if_be	jmp	#LR__3006
21a38     97 0E 48 FB | 	callpa	#(@LR__3005-@LR__3004)>>2,fcache_load_ptr_
21a3c                 | LR__3004
21a3c     17 31 02 F6 | 	mov	local10, local09
21a40     01 30 56 F2 | 	cmps	local10, #1 wc
21a44     01 2E 86 F1 | 	sub	local09, #1
21a48     14 31 02 36 |  if_ae	mov	local10, local06
21a4c     01 28 06 31 |  if_ae	add	local06, #1
21a50     18 47 48 3C |  if_ae	wrbyte	#35, local10
21a54     E4 FF 9F 3D |  if_ae	jmp	#LR__3004
21a58                 | LR__3005
21a58     14 01 48 FC | 	wrbyte	#0, local06
21a5c                 | LR__3006
21a5c     0F 13 02 F6 | 	mov	arg01, local01
21a60     10 15 02 F6 | 	mov	arg02, local02
21a64     13 17 02 F6 | 	mov	arg03, local05
21a68     F0 FD BF FD | 	call	#__system___fmtstr
21a6c                 | LR__3007
21a6c     A7 F0 03 F6 | 	mov	ptra, fp
21a70     B2 00 A0 FD | 	call	#popregs_
21a74                 | __system___fmtnum_ret
21a74     2D 00 64 FD | 	ret
21a78                 | 
21a78                 | __system___fmtfloat
21a78     10 4A 05 F6 | 	mov	COUNT_, #16
21a7c     A8 00 A0 FD | 	call	#pushregs_
21a80     24 F1 07 F1 | 	add	ptra, #292
21a84     04 4E 05 F1 | 	add	fp, #4
21a88     A7 12 62 FC | 	wrlong	arg01, fp
21a8c     04 4E 05 F1 | 	add	fp, #4
21a90     A7 14 62 FC | 	wrlong	arg02, fp
21a94     04 4E 05 F1 | 	add	fp, #4
21a98     A7 16 62 FC | 	wrlong	arg03, fp
21a9c     04 4E 05 F1 | 	add	fp, #4
21aa0     A7 18 62 FC | 	wrlong	arg04, fp
21aa4     0C 4E 05 F1 | 	add	fp, #12
21aa8     A7 14 68 FC | 	wrlong	#10, fp
21aac     08 4E 05 F1 | 	add	fp, #8
21ab0     A7 00 68 FC | 	wrlong	#0, fp
21ab4     08 4E 05 F1 | 	add	fp, #8
21ab8     A7 00 68 FC | 	wrlong	#0, fp
21abc     08 4E 05 F1 | 	add	fp, #8
21ac0     A7 00 68 FC | 	wrlong	#0, fp
21ac4     04 4E 05 F1 | 	add	fp, #4
21ac8     A7 04 68 FC | 	wrlong	#2, fp
21acc     04 4E 05 F1 | 	add	fp, #4
21ad0     A7 00 68 FC | 	wrlong	#0, fp
21ad4     04 4E 05 F1 | 	add	fp, #4
21ad8     A7 00 68 FC | 	wrlong	#0, fp
21adc     04 4E 05 F1 | 	add	fp, #4
21ae0     A7 00 68 FC | 	wrlong	#0, fp
21ae4     04 4E 05 F1 | 	add	fp, #4
21ae8     A7 00 68 FC | 	wrlong	#0, fp
21aec     18 4E 05 F1 | 	add	fp, #24
21af0     A7 00 68 FC | 	wrlong	#0, fp
21af4     68 4E 05 F1 | 	add	fp, #104
21af8     A7 1E 02 F6 | 	mov	local01, fp
21afc     08 4E 85 F1 | 	sub	fp, #8
21b00     A7 1E 62 FC | 	wrlong	local01, fp
21b04     04 4E 05 F1 | 	add	fp, #4
21b08     A7 1E 62 FC | 	wrlong	local01, fp
21b0c     BC 4E 85 F1 | 	sub	fp, #188
21b10     A7 1E 02 FB | 	rdlong	local01, fp
21b14     10 1E 46 F0 | 	shr	local01, #16
21b18     3F 1E 06 F5 | 	and	local01, #63
21b1c     B0 4E 05 F1 | 	add	fp, #176
21b20     A7 1E 62 FC | 	wrlong	local01, fp
21b24     B0 4E 85 F1 | 	sub	fp, #176
21b28     A7 1E 02 FB | 	rdlong	local01, fp
21b2c     1C 1E 46 F0 | 	shr	local01, #28
21b30     01 1E 06 F5 | 	and	local01, #1
21b34     08 4F 05 F1 | 	add	fp, #264
21b38     A7 1E 62 FC | 	wrlong	local01, fp
21b3c     58 4E 85 F1 | 	sub	fp, #88
21b40     A7 1E 0A FB | 	rdlong	local01, fp wz
21b44     B8 4E 85 F1 | 	sub	fp, #184
21b48     3C 00 90 5D |  if_ne	jmp	#LR__3011
21b4c     10 4E 05 F1 | 	add	fp, #16
21b50     A7 1E 02 FB | 	rdlong	local01, fp
21b54     10 4E 85 F1 | 	sub	fp, #16
21b58     61 1E 0E F2 | 	cmp	local01, #97 wz
21b5c     18 00 90 5D |  if_ne	jmp	#LR__3010
21b60     B8 4E 05 F1 | 	add	fp, #184
21b64     A7 1A 68 FC | 	wrlong	#13, fp
21b68     84 4E 85 F1 | 	sub	fp, #132
21b6c     A7 02 68 FC | 	wrlong	#1, fp
21b70     34 4E 85 F1 | 	sub	fp, #52
21b74     24 00 90 FD | 	jmp	#LR__3012
21b78                 | LR__3010
21b78     B8 4E 05 F1 | 	add	fp, #184
21b7c     A7 0C 68 FC | 	wrlong	#6, fp
21b80     B8 4E 85 F1 | 	sub	fp, #184
21b84     14 00 90 FD | 	jmp	#LR__3012
21b88                 | LR__3011
21b88     B8 4E 05 F1 | 	add	fp, #184
21b8c     A7 1E 02 FB | 	rdlong	local01, fp
21b90     01 1E 86 F1 | 	sub	local01, #1
21b94     A7 1E 62 FC | 	wrlong	local01, fp
21b98     B8 4E 85 F1 | 	sub	fp, #184
21b9c                 | LR__3012
21b9c     08 4E 05 F1 | 	add	fp, #8
21ba0     A7 1E 02 FB | 	rdlong	local01, fp
21ba4     16 1E 46 F0 | 	shr	local01, #22
21ba8     03 1E 06 F5 | 	and	local01, #3
21bac     04 4F 05 F1 | 	add	fp, #260
21bb0     A7 1E 62 FC | 	wrlong	local01, fp
21bb4     04 4F 85 F1 | 	sub	fp, #260
21bb8     A7 1E 02 FB | 	rdlong	local01, fp
21bbc     1D 1E 46 F0 | 	shr	local01, #29
21bc0     01 1E 06 F5 | 	and	local01, #1
21bc4     B4 4E 05 F1 | 	add	fp, #180
21bc8     A7 1E 62 FC | 	wrlong	local01, fp
21bcc     B4 4E 85 F1 | 	sub	fp, #180
21bd0     A7 1E 02 FB | 	rdlong	local01, fp
21bd4     0F 1F EA F8 | 	getbyte	local01, local01, #1
21bd8     60 4E 05 F1 | 	add	fp, #96
21bdc     A7 1E 62 FC | 	wrlong	local01, fp
21be0     60 4E 85 F1 | 	sub	fp, #96
21be4     A7 1E 02 FB | 	rdlong	local01, fp
21be8     0F 1F E2 F8 | 	getbyte	local01, local01, #0
21bec     64 4E 05 F1 | 	add	fp, #100
21bf0     A7 1E 62 FC | 	wrlong	local01, fp
21bf4     00 1E 06 F6 | 	mov	local01, #0
21bf8     5C 4E 85 F1 | 	sub	fp, #92
21bfc     A7 1A 02 FB | 	rdlong	arg05, fp
21c00     65 1A 0E F2 | 	cmp	arg05, #101 wz
21c04     01 1E 06 A6 |  if_e	mov	local01, #1
21c08     14 4E 05 F1 | 	add	fp, #20
21c0c     A7 1E 62 FC | 	wrlong	local01, fp
21c10     98 4E 05 F1 | 	add	fp, #152
21c14     A7 20 0A FB | 	rdlong	local02, fp wz
21c18     45 1E 06 56 |  if_ne	mov	local01, #69
21c1c     65 1E 06 A6 |  if_e	mov	local01, #101
21c20     8C 4E 85 F1 | 	sub	fp, #140
21c24     A7 1E 62 FC | 	wrlong	local01, fp
21c28     20 4E 85 F1 | 	sub	fp, #32
21c2c     A7 1E 02 FB | 	rdlong	local01, fp
21c30     10 4E 85 F1 | 	sub	fp, #16
21c34     61 1E 0E F2 | 	cmp	local01, #97 wz
21c38     4C 00 90 5D |  if_ne	jmp	#LR__3013
21c3c     24 4E 05 F1 | 	add	fp, #36
21c40     A7 02 68 FC | 	wrlong	#1, fp
21c44     98 4E 05 F1 | 	add	fp, #152
21c48     A7 20 0A FB | 	rdlong	local02, fp wz
21c4c     50 1E 06 56 |  if_ne	mov	local01, #80
21c50     70 1E 06 A6 |  if_e	mov	local01, #112
21c54     8C 4E 85 F1 | 	sub	fp, #140
21c58     A7 1E 62 FC | 	wrlong	local01, fp
21c5c     14 4E 85 F1 | 	sub	fp, #20
21c60     A7 04 68 FC | 	wrlong	#2, fp
21c64     1C 4E 05 F1 | 	add	fp, #28
21c68     A7 02 68 FC | 	wrlong	#1, fp
21c6c     84 4E 05 F1 | 	add	fp, #132
21c70     A7 20 0A FB | 	rdlong	local02, fp wz
21c74     58 1E 06 56 |  if_ne	mov	local01, #88
21c78     78 1E 06 A6 |  if_e	mov	local01, #120
21c7c     7C 4E 85 F1 | 	sub	fp, #124
21c80     A7 1E 62 FC | 	wrlong	local01, fp
21c84     40 4E 85 F1 | 	sub	fp, #64
21c88                 | LR__3013
21c88     10 4E 05 F1 | 	add	fp, #16
21c8c     A7 1E 02 FB | 	rdlong	local01, fp
21c90     10 4E 85 F1 | 	sub	fp, #16
21c94     23 1E 0E F2 | 	cmp	local01, #35 wz
21c98     3C 00 90 5D |  if_ne	jmp	#LR__3016
21c9c     48 4E 05 F1 | 	add	fp, #72
21ca0     A7 02 68 FC | 	wrlong	#1, fp
21ca4     C8 4E 05 F1 | 	add	fp, #200
21ca8     A7 1E 0A FB | 	rdlong	local01, fp wz
21cac     10 4F 85 F1 | 	sub	fp, #272
21cb0     18 00 90 AD |  if_e	jmp	#LR__3014
21cb4     10 4E 05 F1 | 	add	fp, #16
21cb8     A7 CC 68 FC | 	wrlong	#102, fp
21cbc     00 4F 05 F1 | 	add	fp, #256
21cc0     A7 00 68 FC | 	wrlong	#0, fp
21cc4     10 4F 85 F1 | 	sub	fp, #272
21cc8     0C 00 90 FD | 	jmp	#LR__3015
21ccc                 | LR__3014
21ccc     10 4F 05 F1 | 	add	fp, #272
21cd0     A7 02 68 FC | 	wrlong	#1, fp
21cd4     10 4F 85 F1 | 	sub	fp, #272
21cd8                 | LR__3015
21cd8                 | LR__3016
21cd8     08 4E 05 F1 | 	add	fp, #8
21cdc     A7 1E 02 FB | 	rdlong	local01, fp
21ce0     1A 1E 46 F0 | 	shr	local01, #26
21ce4     03 1E 06 F5 | 	and	local01, #3
21ce8     5C 4E 05 F1 | 	add	fp, #92
21cec     A7 1E 62 FC | 	wrlong	local01, fp
21cf0     58 4E 85 F1 | 	sub	fp, #88
21cf4     A7 FA 01 FB | 	rdlong	result1, fp
21cf8     0C 4E 85 F1 | 	sub	fp, #12
21cfc     1F FA 4D F0 | 	shr	result1, #31 wz
21d00     20 00 90 AD |  if_e	jmp	#LR__3017
21d04     2C 4E 05 F1 | 	add	fp, #44
21d08     A7 5A 68 FC | 	wrlong	#45, fp
21d0c     20 4E 85 F1 | 	sub	fp, #32
21d10     A7 FA 01 FB | 	rdlong	result1, fp
21d14     1F FA E5 F4 | 	bitnot	result1, #31
21d18     A7 FA 61 FC | 	wrlong	result1, fp
21d1c     0C 4E 85 F1 | 	sub	fp, #12
21d20     3C 00 90 FD | 	jmp	#LR__3019
21d24                 | LR__3017
21d24     64 4E 05 F1 | 	add	fp, #100
21d28     A7 1E 02 FB | 	rdlong	local01, fp
21d2c     64 4E 85 F1 | 	sub	fp, #100
21d30     01 1E 0E F2 | 	cmp	local01, #1 wz
21d34     2C 4E 05 A1 |  if_e	add	fp, #44
21d38     A7 56 68 AC |  if_e	wrlong	#43, fp
21d3c     2C 4E 85 A1 |  if_e	sub	fp, #44
21d40     1C 00 90 AD |  if_e	jmp	#LR__3018
21d44     64 4E 05 F1 | 	add	fp, #100
21d48     A7 1E 02 FB | 	rdlong	local01, fp
21d4c     64 4E 85 F1 | 	sub	fp, #100
21d50     02 1E 0E F2 | 	cmp	local01, #2 wz
21d54     2C 4E 05 A1 |  if_e	add	fp, #44
21d58     A7 40 68 AC |  if_e	wrlong	#32, fp
21d5c     2C 4E 85 A1 |  if_e	sub	fp, #44
21d60                 | LR__3018
21d60                 | LR__3019
21d60     08 4E 05 F1 | 	add	fp, #8
21d64     A7 1E 02 FB | 	rdlong	local01, fp
21d68     18 1E 46 F0 | 	shr	local01, #24
21d6c     03 1E 06 F5 | 	and	local01, #3
21d70     3C 4E 05 F1 | 	add	fp, #60
21d74     A7 1E 62 FC | 	wrlong	local01, fp
21d78     00 1E 06 F6 | 	mov	local01, #0
21d7c     18 4E 85 F1 | 	sub	fp, #24
21d80     A7 22 0A FB | 	rdlong	local03, fp wz
21d84     2C 4E 85 F1 | 	sub	fp, #44
21d88     18 00 90 5D |  if_ne	jmp	#LR__3020
21d8c     1C 4E 05 F1 | 	add	fp, #28
21d90     A7 24 02 FB | 	rdlong	local04, fp
21d94     1C 4E 85 F1 | 	sub	fp, #28
21d98     12 27 02 F6 | 	mov	local05, local04
21d9c     0A 26 0E F2 | 	cmp	local05, #10 wz
21da0     04 00 90 AD |  if_e	jmp	#LR__3021
21da4                 | LR__3020
21da4     01 1E 66 F5 | 	xor	local01, #1
21da8                 | LR__3021
21da8     3C 4E 05 F1 | 	add	fp, #60
21dac     A7 1E 62 FC | 	wrlong	local01, fp
21db0     3C 4E 85 F1 | 	sub	fp, #60
21db4     00 1E 0E F2 | 	cmp	local01, #0 wz
21db8     0C 01 90 AD |  if_e	jmp	#LR__3023
21dbc     44 4E 05 F1 | 	add	fp, #68
21dc0     A7 26 02 FB | 	rdlong	local05, fp
21dc4     44 4E 85 F1 | 	sub	fp, #68
21dc8     13 23 02 F6 | 	mov	local03, local05
21dcc     02 22 0E F2 | 	cmp	local03, #2 wz
21dd0     F4 00 90 5D |  if_ne	jmp	#LR__3023
21dd4     0C 4F 05 F1 | 	add	fp, #268
21dd8     A7 28 02 FB | 	rdlong	local06, fp
21ddc     0C 4F 85 F1 | 	sub	fp, #268
21de0     14 25 02 F6 | 	mov	local04, local06
21de4     02 24 0E F2 | 	cmp	local04, #2 wz
21de8     DC 00 90 AD |  if_e	jmp	#LR__3023
21dec     C0 4E 05 F1 | 	add	fp, #192
21df0     A7 12 02 FB | 	rdlong	arg01, fp
21df4     94 4E 85 F1 | 	sub	fp, #148
21df8     A7 14 02 FB | 	rdlong	arg02, fp
21dfc     14 4E 05 F1 | 	add	fp, #20
21e00     A7 16 02 FB | 	rdlong	arg03, fp
21e04     40 4E 85 F1 | 	sub	fp, #64
21e08     A4 44 B0 FD | 	call	#__system__emitsign_0500
21e0c     14 4F 05 F1 | 	add	fp, #276
21e10     A7 FA 61 FC | 	wrlong	result1, fp
21e14     14 4F 85 F1 | 	sub	fp, #276
21e18     00 FA 55 F2 | 	cmps	result1, #0 wc
21e1c     14 4F 05 C1 |  if_b	add	fp, #276
21e20     A7 FA 01 CB |  if_b	rdlong	result1, fp
21e24     14 4F 85 C1 |  if_b	sub	fp, #276
21e28     6C 0B 90 CD |  if_b	jmp	#LR__3073
21e2c     C0 4E 05 F1 | 	add	fp, #192
21e30     A7 1E 02 FB | 	rdlong	local01, fp
21e34     54 4E 05 F1 | 	add	fp, #84
21e38     A7 26 02 FB | 	rdlong	local05, fp
21e3c     13 23 02 F6 | 	mov	local03, local05
21e40     13 1F 02 F1 | 	add	local01, local05
21e44     54 4E 85 F1 | 	sub	fp, #84
21e48     A7 1E 62 FC | 	wrlong	local01, fp
21e4c     58 4E 85 F1 | 	sub	fp, #88
21e50     A7 1E 0A FB | 	rdlong	local01, fp wz
21e54     68 4E 85 F1 | 	sub	fp, #104
21e58     60 00 90 AD |  if_e	jmp	#LR__3022
21e5c     68 4E 05 F1 | 	add	fp, #104
21e60     A7 1E 02 FB | 	rdlong	local01, fp
21e64     AC 4E 05 F1 | 	add	fp, #172
21e68     A7 22 02 FB | 	rdlong	local03, fp
21e6c     11 1F 82 F1 | 	sub	local01, local03
21e70     AC 4E 85 F1 | 	sub	fp, #172
21e74     A7 1E 62 FC | 	wrlong	local01, fp
21e78     68 4E 85 F1 | 	sub	fp, #104
21e7c     00 1E 56 F2 | 	cmps	local01, #0 wc
21e80     68 4E 05 C1 |  if_b	add	fp, #104
21e84     A7 00 68 CC |  if_b	wrlong	#0, fp
21e88     68 4E 85 C1 |  if_b	sub	fp, #104
21e8c     08 4E 05 F1 | 	add	fp, #8
21e90     A7 1E 02 FB | 	rdlong	local01, fp
21e94     E8 1E 06 F4 | 	bitl	local01, #232
21e98     A7 1E 62 FC | 	wrlong	local01, fp
21e9c     60 4E 05 F1 | 	add	fp, #96
21ea0     A7 26 02 FB | 	rdlong	local05, fp
21ea4     13 23 02 F6 | 	mov	local03, local05
21ea8     08 22 66 F0 | 	shl	local03, #8
21eac     11 1F 42 F5 | 	or	local01, local03
21eb0     60 4E 85 F1 | 	sub	fp, #96
21eb4     A7 1E 62 FC | 	wrlong	local01, fp
21eb8     08 4E 85 F1 | 	sub	fp, #8
21ebc                 | LR__3022
21ebc     3C 4E 05 F1 | 	add	fp, #60
21ec0     A7 00 68 FC | 	wrlong	#0, fp
21ec4     3C 4E 85 F1 | 	sub	fp, #60
21ec8                 | LR__3023
21ec8     0C 4E 05 F1 | 	add	fp, #12
21ecc     A7 12 02 FB | 	rdlong	arg01, fp
21ed0     0C 4E 85 F1 | 	sub	fp, #12
21ed4     04 1F B0 FD | 	call	#__system____builtin_ilogb
21ed8     FF FF 3F FF 
21edc     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
21ee0     50 00 90 5D |  if_ne	jmp	#LR__3025
21ee4     2C 4E 05 F1 | 	add	fp, #44
21ee8     A7 1E 0A FB | 	rdlong	local01, fp wz
21eec     2C 4E 85 F1 | 	sub	fp, #44
21ef0     24 00 90 AD |  if_e	jmp	#LR__3024
21ef4     C0 4E 05 F1 | 	add	fp, #192
21ef8     A7 20 02 FB | 	rdlong	local02, fp
21efc     10 23 02 F6 | 	mov	local03, local02
21f00     01 22 06 F1 | 	add	local03, #1
21f04     A7 22 62 FC | 	wrlong	local03, fp
21f08     94 4E 85 F1 | 	sub	fp, #148
21f0c     A7 24 02 FB | 	rdlong	local04, fp
21f10     2C 4E 85 F1 | 	sub	fp, #44
21f14     10 25 42 FC | 	wrbyte	local04, local02
21f18                 | LR__3024
21f18     C0 4E 05 F1 | 	add	fp, #192
21f1c     A7 12 02 FB | 	rdlong	arg01, fp
21f20     C0 4E 85 F1 | 	sub	fp, #192
21f24     80 01 00 FF 
21f28     4E 15 06 F6 | 	mov	arg02, ##@LR__4981
21f2c     AC E9 BF FD | 	call	#__system____builtin_strcpy
21f30     A4 08 90 FD | 	jmp	#LR__3061
21f34                 | LR__3025
21f34     0C 4E 05 F1 | 	add	fp, #12
21f38     A7 20 02 FB | 	rdlong	local02, fp
21f3c     0C 4E 85 F1 | 	sub	fp, #12
21f40     10 13 02 F6 | 	mov	arg01, local02
21f44     94 1E B0 FD | 	call	#__system____builtin_ilogb
21f48     00 00 40 FF 
21f4c     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
21f50     50 00 90 5D |  if_ne	jmp	#LR__3027
21f54     2C 4E 05 F1 | 	add	fp, #44
21f58     A7 1E 0A FB | 	rdlong	local01, fp wz
21f5c     2C 4E 85 F1 | 	sub	fp, #44
21f60     24 00 90 AD |  if_e	jmp	#LR__3026
21f64     C0 4E 05 F1 | 	add	fp, #192
21f68     A7 20 02 FB | 	rdlong	local02, fp
21f6c     10 23 02 F6 | 	mov	local03, local02
21f70     01 22 06 F1 | 	add	local03, #1
21f74     A7 22 62 FC | 	wrlong	local03, fp
21f78     94 4E 85 F1 | 	sub	fp, #148
21f7c     A7 24 02 FB | 	rdlong	local04, fp
21f80     2C 4E 85 F1 | 	sub	fp, #44
21f84     10 25 42 FC | 	wrbyte	local04, local02
21f88                 | LR__3026
21f88     C0 4E 05 F1 | 	add	fp, #192
21f8c     A7 12 02 FB | 	rdlong	arg01, fp
21f90     C0 4E 85 F1 | 	sub	fp, #192
21f94     80 01 00 FF 
21f98     52 15 06 F6 | 	mov	arg02, ##@LR__4982
21f9c     3C E9 BF FD | 	call	#__system____builtin_strcpy
21fa0     34 08 90 FD | 	jmp	#LR__3061
21fa4                 | LR__3027
21fa4     10 4E 05 F1 | 	add	fp, #16
21fa8     A7 1E 02 FB | 	rdlong	local01, fp
21fac     10 4E 85 F1 | 	sub	fp, #16
21fb0     67 1E 0E F2 | 	cmp	local01, #103 wz
21fb4     10 4E 05 51 |  if_ne	add	fp, #16
21fb8     A7 22 02 5B |  if_ne	rdlong	local03, fp
21fbc     10 4E 85 51 |  if_ne	sub	fp, #16
21fc0     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
21fc4     94 01 90 5D |  if_ne	jmp	#LR__3032
21fc8     0C 4E 05 F1 | 	add	fp, #12
21fcc     A7 12 02 FB | 	rdlong	arg01, fp
21fd0     08 4E 05 F1 | 	add	fp, #8
21fd4     A7 14 02 F6 | 	mov	arg02, fp
21fd8     0C 4E 05 F1 | 	add	fp, #12
21fdc     A7 16 02 F6 | 	mov	arg03, fp
21fe0     98 4E 05 F1 | 	add	fp, #152
21fe4     A7 18 02 FB | 	rdlong	arg04, fp
21fe8     9C 4E 85 F1 | 	sub	fp, #156
21fec     A7 1A 02 FB | 	rdlong	arg05, fp
21ff0     1C 4E 85 F1 | 	sub	fp, #28
21ff4     C4 40 B0 FD | 	call	#__system__disassemble_0498
21ff8     10 4E 05 F1 | 	add	fp, #16
21ffc     A7 1E 02 FB | 	rdlong	local01, fp
22000     10 4E 85 F1 | 	sub	fp, #16
22004     23 1E 0E F2 | 	cmp	local01, #35 wz
22008     A0 00 90 5D |  if_ne	jmp	#LR__3029
2200c     20 4E 05 F1 | 	add	fp, #32
22010     A7 1E 02 FB | 	rdlong	local01, fp
22014     98 4E 05 F1 | 	add	fp, #152
22018     A7 22 02 FB | 	rdlong	local03, fp
2201c     B8 4E 85 F1 | 	sub	fp, #184
22020     11 1F 5A F2 | 	cmps	local01, local03 wcz
22024     24 4E 05 11 |  if_a	add	fp, #36
22028     A7 02 68 1C |  if_a	wrlong	#1, fp
2202c     24 4E 85 11 |  if_a	sub	fp, #36
22030     A4 01 90 1D |  if_a	jmp	#LR__3035
22034     20 4E 05 F1 | 	add	fp, #32
22038     A7 1E 02 FB | 	rdlong	local01, fp
2203c     20 4E 85 F1 | 	sub	fp, #32
22040     00 1E 56 F2 | 	cmps	local01, #0 wc
22044     2C 00 90 3D |  if_ae	jmp	#LR__3028
22048     B8 4E 05 F1 | 	add	fp, #184
2204c     A7 1E 02 FB | 	rdlong	local01, fp
22050     0F 1F 62 F6 | 	neg	local01, local01
22054     98 4E 85 F1 | 	sub	fp, #152
22058     A7 22 02 FB | 	rdlong	local03, fp
2205c     20 4E 85 F1 | 	sub	fp, #32
22060     0F 23 5A F2 | 	cmps	local03, local01 wcz
22064     24 4E 05 E1 |  if_be	add	fp, #36
22068     A7 02 68 EC |  if_be	wrlong	#1, fp
2206c     24 4E 85 E1 |  if_be	sub	fp, #36
22070     64 01 90 FD | 	jmp	#LR__3035
22074                 | LR__3028
22074     20 4E 05 F1 | 	add	fp, #32
22078     A7 1E 02 FB | 	rdlong	local01, fp
2207c     20 4E 85 F1 | 	sub	fp, #32
22080     01 1E 56 F2 | 	cmps	local01, #1 wc
22084     50 01 90 CD |  if_b	jmp	#LR__3035
22088     B8 4E 05 F1 | 	add	fp, #184
2208c     A7 1E 02 FB | 	rdlong	local01, fp
22090     98 4E 85 F1 | 	sub	fp, #152
22094     A7 22 02 FB | 	rdlong	local03, fp
22098     11 1F 82 F1 | 	sub	local01, local03
2209c     98 4E 05 F1 | 	add	fp, #152
220a0     A7 1E 62 FC | 	wrlong	local01, fp
220a4     B8 4E 85 F1 | 	sub	fp, #184
220a8     2C 01 90 FD | 	jmp	#LR__3035
220ac                 | LR__3029
220ac     00 1E 06 F6 | 	mov	local01, #0
220b0     08 4E 05 F1 | 	add	fp, #8
220b4     A7 20 02 FB | 	rdlong	local02, fp
220b8     1C 20 46 F0 | 	shr	local02, #28
220bc     01 20 0E F5 | 	and	local02, #1 wz
220c0     01 1E 06 A6 |  if_e	mov	local01, #1
220c4     2C 4E 05 F1 | 	add	fp, #44
220c8     A7 1E 62 FC | 	wrlong	local01, fp
220cc     14 4E 85 F1 | 	sub	fp, #20
220d0     A7 1E 02 FB | 	rdlong	local01, fp
220d4     98 4E 05 F1 | 	add	fp, #152
220d8     A7 22 02 FB | 	rdlong	local03, fp
220dc     B8 4E 85 F1 | 	sub	fp, #184
220e0     11 1F 52 F2 | 	cmps	local01, local03 wc
220e4     18 00 90 3D |  if_ae	jmp	#LR__3030
220e8     20 4E 05 F1 | 	add	fp, #32
220ec     A7 24 02 FB | 	rdlong	local04, fp
220f0     20 4E 85 F1 | 	sub	fp, #32
220f4     FF FF 7F FF 
220f8     FC 25 56 F2 | 	cmps	local04, ##-4 wc
220fc     10 00 90 3D |  if_ae	jmp	#LR__3031
22100                 | LR__3030
22100     24 4E 05 F1 | 	add	fp, #36
22104     A7 02 68 FC | 	wrlong	#1, fp
22108     24 4E 85 F1 | 	sub	fp, #36
2210c     C8 00 90 FD | 	jmp	#LR__3035
22110                 | LR__3031
22110     B8 4E 05 F1 | 	add	fp, #184
22114     A7 24 02 FB | 	rdlong	local04, fp
22118     98 4E 85 F1 | 	sub	fp, #152
2211c     A7 22 02 FB | 	rdlong	local03, fp
22120     11 25 82 F1 | 	sub	local04, local03
22124     98 4E 05 F1 | 	add	fp, #152
22128     A7 24 62 FC | 	wrlong	local04, fp
2212c     AC 4E 85 F1 | 	sub	fp, #172
22130     A7 12 02 FB | 	rdlong	arg01, fp
22134     08 4E 05 F1 | 	add	fp, #8
22138     A7 14 02 F6 | 	mov	arg02, fp
2213c     0C 4E 05 F1 | 	add	fp, #12
22140     A7 16 02 F6 | 	mov	arg03, fp
22144     12 19 62 F6 | 	neg	arg04, local04
22148     04 4E 85 F1 | 	sub	fp, #4
2214c     A7 1A 02 FB | 	rdlong	arg05, fp
22150     1C 4E 85 F1 | 	sub	fp, #28
22154     64 3F B0 FD | 	call	#__system__disassemble_0498
22158     7C 00 90 FD | 	jmp	#LR__3035
2215c                 | LR__3032
2215c     24 4E 05 F1 | 	add	fp, #36
22160     A7 1E 0A FB | 	rdlong	local01, fp wz
22164     24 4E 85 F1 | 	sub	fp, #36
22168     34 00 90 AD |  if_e	jmp	#LR__3033
2216c     0C 4E 05 F1 | 	add	fp, #12
22170     A7 12 02 FB | 	rdlong	arg01, fp
22174     08 4E 05 F1 | 	add	fp, #8
22178     A7 14 02 F6 | 	mov	arg02, fp
2217c     0C 4E 05 F1 | 	add	fp, #12
22180     A7 16 02 F6 | 	mov	arg03, fp
22184     98 4E 05 F1 | 	add	fp, #152
22188     A7 18 02 FB | 	rdlong	arg04, fp
2218c     9C 4E 85 F1 | 	sub	fp, #156
22190     A7 1A 02 FB | 	rdlong	arg05, fp
22194     1C 4E 85 F1 | 	sub	fp, #28
22198     20 3F B0 FD | 	call	#__system__disassemble_0498
2219c     38 00 90 FD | 	jmp	#LR__3034
221a0                 | LR__3033
221a0     0C 4E 05 F1 | 	add	fp, #12
221a4     A7 12 02 FB | 	rdlong	arg01, fp
221a8     08 4E 05 F1 | 	add	fp, #8
221ac     A7 14 02 F6 | 	mov	arg02, fp
221b0     0C 4E 05 F1 | 	add	fp, #12
221b4     A7 16 02 F6 | 	mov	arg03, fp
221b8     98 4E 05 F1 | 	add	fp, #152
221bc     A7 24 02 FB | 	rdlong	local04, fp
221c0     01 24 06 F1 | 	add	local04, #1
221c4     12 19 62 F6 | 	neg	arg04, local04
221c8     9C 4E 85 F1 | 	sub	fp, #156
221cc     A7 1A 02 FB | 	rdlong	arg05, fp
221d0     1C 4E 85 F1 | 	sub	fp, #28
221d4     E4 3E B0 FD | 	call	#__system__disassemble_0498
221d8                 | LR__3034
221d8                 | LR__3035
221d8     1C 4E 05 F1 | 	add	fp, #28
221dc     A7 1E 02 FB | 	rdlong	local01, fp
221e0     1C 4E 85 F1 | 	sub	fp, #28
221e4     02 1E 0E F2 | 	cmp	local01, #2 wz
221e8     4C 00 90 5D |  if_ne	jmp	#LR__3038
221ec     1C 4E 05 F1 | 	add	fp, #28
221f0     A7 20 68 FC | 	wrlong	#16, fp
221f4     1C 4E 85 F1 | 	sub	fp, #28
221f8                 | LR__3036
221f8     14 4E 05 F1 | 	add	fp, #20
221fc     A7 1E 0A FB | 	rdlong	local01, fp wz
22200     14 4E 85 F1 | 	sub	fp, #20
22204     30 00 90 AD |  if_e	jmp	#LR__3037
22208     14 4E 05 F1 | 	add	fp, #20
2220c     A7 22 02 FB | 	rdlong	local03, fp
22210     14 4E 85 F1 | 	sub	fp, #20
22214     00 80 00 FF 
22218     00 22 16 F2 | 	cmp	local03, ##16777216 wc
2221c     18 00 90 3D |  if_ae	jmp	#LR__3037
22220     14 4E 05 F1 | 	add	fp, #20
22224     A7 1E 02 FB | 	rdlong	local01, fp
22228     01 1E 66 F0 | 	shl	local01, #1
2222c     A7 1E 62 FC | 	wrlong	local01, fp
22230     14 4E 85 F1 | 	sub	fp, #20
22234     C0 FF 9F FD | 	jmp	#LR__3036
22238                 | LR__3037
22238                 | LR__3038
22238     70 4E 05 F1 | 	add	fp, #112
2223c     A7 12 02 F6 | 	mov	arg01, fp
22240     5C 4E 85 F1 | 	sub	fp, #92
22244     A7 14 02 FB | 	rdlong	arg02, fp
22248     08 4E 05 F1 | 	add	fp, #8
2224c     A7 16 02 FB | 	rdlong	arg03, fp
22250     A0 4E 05 F1 | 	add	fp, #160
22254     A7 1A 02 FB | 	rdlong	arg05, fp
22258     BC 4E 85 F1 | 	sub	fp, #188
2225c     01 18 06 F6 | 	mov	arg04, #1
22260     E4 3D B0 FD | 	call	#__system___uitoa
22264     58 4E 05 F1 | 	add	fp, #88
22268     A7 FA 61 FC | 	wrlong	result1, fp
2226c     38 4E 85 F1 | 	sub	fp, #56
22270     A7 1E 02 FB | 	rdlong	local01, fp
22274     20 4E 85 F1 | 	sub	fp, #32
22278     00 1E 56 F2 | 	cmps	local01, #0 wc
2227c     50 00 90 3D |  if_ae	jmp	#LR__3039
22280     60 4E 05 F1 | 	add	fp, #96
22284     A7 5A 68 FC | 	wrlong	#45, fp
22288     50 4E 05 F1 | 	add	fp, #80
2228c     A7 12 02 F6 | 	mov	arg01, fp
22290     90 4E 85 F1 | 	sub	fp, #144
22294     A7 22 02 FB | 	rdlong	local03, fp
22298     11 15 62 F6 | 	neg	arg02, local03
2229c     18 4E 05 F1 | 	add	fp, #24
222a0     A7 18 02 FB | 	rdlong	arg04, fp
222a4     84 4E 05 F1 | 	add	fp, #132
222a8     A7 28 02 FB | 	rdlong	local06, fp
222ac     BC 4E 85 F1 | 	sub	fp, #188
222b0     14 25 02 F6 | 	mov	local04, local06
222b4     0A 16 06 F6 | 	mov	arg03, #10
222b8     12 1B 02 F6 | 	mov	arg05, local04
222bc     88 3D B0 FD | 	call	#__system___uitoa
222c0     5C 4E 05 F1 | 	add	fp, #92
222c4     A7 FA 61 FC | 	wrlong	result1, fp
222c8     5C 4E 85 F1 | 	sub	fp, #92
222cc     48 00 90 FD | 	jmp	#LR__3040
222d0                 | LR__3039
222d0     60 4E 05 F1 | 	add	fp, #96
222d4     A7 56 68 FC | 	wrlong	#43, fp
222d8     50 4E 05 F1 | 	add	fp, #80
222dc     A7 12 02 F6 | 	mov	arg01, fp
222e0     90 4E 85 F1 | 	sub	fp, #144
222e4     A7 14 02 FB | 	rdlong	arg02, fp
222e8     18 4E 05 F1 | 	add	fp, #24
222ec     A7 18 02 FB | 	rdlong	arg04, fp
222f0     84 4E 05 F1 | 	add	fp, #132
222f4     A7 28 02 FB | 	rdlong	local06, fp
222f8     BC 4E 85 F1 | 	sub	fp, #188
222fc     14 25 02 F6 | 	mov	local04, local06
22300     0A 16 06 F6 | 	mov	arg03, #10
22304     12 1B 02 F6 | 	mov	arg05, local04
22308     3C 3D B0 FD | 	call	#__system___uitoa
2230c     5C 4E 05 F1 | 	add	fp, #92
22310     A7 FA 61 FC | 	wrlong	result1, fp
22314     5C 4E 85 F1 | 	sub	fp, #92
22318                 | LR__3040
22318     24 4E 05 F1 | 	add	fp, #36
2231c     A7 1E 0A FB | 	rdlong	local01, fp wz
22320     24 4E 85 F1 | 	sub	fp, #36
22324     2C 00 90 AD |  if_e	jmp	#LR__3041
22328     50 4E 05 F1 | 	add	fp, #80
2232c     A7 00 68 FC | 	wrlong	#0, fp
22330     04 4E 85 F1 | 	sub	fp, #4
22334     A7 00 68 FC | 	wrlong	#0, fp
22338     6C 4E 05 F1 | 	add	fp, #108
2233c     A7 1E 02 FB | 	rdlong	local01, fp
22340     01 1E 06 F1 | 	add	local01, #1
22344     64 4E 85 F1 | 	sub	fp, #100
22348     A7 1E 62 FC | 	wrlong	local01, fp
2234c     54 4E 85 F1 | 	sub	fp, #84
22350     88 00 90 FD | 	jmp	#LR__3044
22354                 | LR__3041
22354     20 4E 05 F1 | 	add	fp, #32
22358     A7 1E 02 FB | 	rdlong	local01, fp
2235c     20 4E 85 F1 | 	sub	fp, #32
22360     00 1E 56 F2 | 	cmps	local01, #0 wc
22364     40 00 90 3D |  if_ae	jmp	#LR__3042
22368     20 4E 05 F1 | 	add	fp, #32
2236c     A7 20 02 FB | 	rdlong	local02, fp
22370     30 4E 05 F1 | 	add	fp, #48
22374     A7 20 62 FC | 	wrlong	local02, fp
22378     04 4E 85 F1 | 	sub	fp, #4
2237c     A7 20 62 FC | 	wrlong	local02, fp
22380     2C 4E 85 F1 | 	sub	fp, #44
22384     A7 1E 02 FB | 	rdlong	local01, fp
22388     98 4E 05 F1 | 	add	fp, #152
2238c     A7 22 02 FB | 	rdlong	local03, fp
22390     11 1F 02 F1 | 	add	local01, local03
22394     01 1E 06 F1 | 	add	local01, #1
22398     64 4E 85 F1 | 	sub	fp, #100
2239c     A7 1E 62 FC | 	wrlong	local01, fp
223a0     54 4E 85 F1 | 	sub	fp, #84
223a4     34 00 90 FD | 	jmp	#LR__3043
223a8                 | LR__3042
223a8     4C 4E 05 F1 | 	add	fp, #76
223ac     A7 00 68 FC | 	wrlong	#0, fp
223b0     2C 4E 85 F1 | 	sub	fp, #44
223b4     A7 1E 02 FB | 	rdlong	local01, fp
223b8     30 4E 05 F1 | 	add	fp, #48
223bc     A7 1E 62 FC | 	wrlong	local01, fp
223c0     68 4E 05 F1 | 	add	fp, #104
223c4     A7 22 02 FB | 	rdlong	local03, fp
223c8     11 1F 02 F1 | 	add	local01, local03
223cc     01 1E 06 F1 | 	add	local01, #1
223d0     64 4E 85 F1 | 	sub	fp, #100
223d4     A7 1E 62 FC | 	wrlong	local01, fp
223d8     54 4E 85 F1 | 	sub	fp, #84
223dc                 | LR__3043
223dc                 | LR__3044
223dc     54 4E 05 F1 | 	add	fp, #84
223e0     A7 1E 02 FB | 	rdlong	local01, fp
223e4     08 4E 85 F1 | 	sub	fp, #8
223e8     A7 22 02 FB | 	rdlong	local03, fp
223ec     11 1F 82 F1 | 	sub	local01, local03
223f0     01 1E 06 F1 | 	add	local01, #1
223f4     24 4E 85 F1 | 	sub	fp, #36
223f8     A7 1E 62 FC | 	wrlong	local01, fp
223fc     04 4E 05 F1 | 	add	fp, #4
22400     A7 1E 0A FB | 	rdlong	local01, fp wz
22404     2C 4E 85 F1 | 	sub	fp, #44
22408     28 4E 05 51 |  if_ne	add	fp, #40
2240c     A7 22 02 5B |  if_ne	rdlong	local03, fp
22410     01 22 06 51 |  if_ne	add	local03, #1
22414     A7 22 62 5C |  if_ne	wrlong	local03, fp
22418     28 4E 85 51 |  if_ne	sub	fp, #40
2241c     1C 4E 05 F1 | 	add	fp, #28
22420     A7 1E 02 FB | 	rdlong	local01, fp
22424     1C 4E 85 F1 | 	sub	fp, #28
22428     10 1E 0E F2 | 	cmp	local01, #16 wz
2242c     28 4E 05 A1 |  if_e	add	fp, #40
22430     A7 1E 02 AB |  if_e	rdlong	local01, fp
22434     02 1E 06 A1 |  if_e	add	local01, #2
22438     A7 1E 62 AC |  if_e	wrlong	local01, fp
2243c     28 4E 85 A1 |  if_e	sub	fp, #40
22440     24 4E 05 F1 | 	add	fp, #36
22444     A7 1E 0A FB | 	rdlong	local01, fp wz
22448     24 4E 85 F1 | 	sub	fp, #36
2244c     28 00 90 AD |  if_e	jmp	#LR__3045
22450     28 4E 05 F1 | 	add	fp, #40
22454     A7 1E 02 FB | 	rdlong	local01, fp
22458     02 22 06 F6 | 	mov	local03, #2
2245c     34 4E 05 F1 | 	add	fp, #52
22460     A7 26 02 FB | 	rdlong	local05, fp
22464     13 23 02 F1 | 	add	local03, local05
22468     11 1F 02 F1 | 	add	local01, local03
2246c     34 4E 85 F1 | 	sub	fp, #52
22470     A7 1E 62 FC | 	wrlong	local01, fp
22474     28 4E 85 F1 | 	sub	fp, #40
22478                 | LR__3045
22478     28 4E 05 F1 | 	add	fp, #40
2247c     A7 1E 02 FB | 	rdlong	local01, fp
22480     28 4E 85 F1 | 	sub	fp, #40
22484     41 1E 56 F2 | 	cmps	local01, #65 wc
22488     01 FA 65 36 |  if_ae	neg	result1, #1
2248c     08 05 90 3D |  if_ae	jmp	#LR__3073
22490     3C 4E 05 F1 | 	add	fp, #60
22494     A7 1E 0A FB | 	rdlong	local01, fp wz
22498     3C 4E 85 F1 | 	sub	fp, #60
2249c     60 00 90 AD |  if_e	jmp	#LR__3046
224a0     C0 4E 05 F1 | 	add	fp, #192
224a4     A7 12 02 FB | 	rdlong	arg01, fp
224a8     94 4E 85 F1 | 	sub	fp, #148
224ac     A7 14 02 FB | 	rdlong	arg02, fp
224b0     14 4E 05 F1 | 	add	fp, #20
224b4     A7 16 02 FB | 	rdlong	arg03, fp
224b8     40 4E 85 F1 | 	sub	fp, #64
224bc     F0 3D B0 FD | 	call	#__system__emitsign_0500
224c0     18 4F 05 F1 | 	add	fp, #280
224c4     A7 FA 61 FC | 	wrlong	result1, fp
224c8     18 4F 85 F1 | 	sub	fp, #280
224cc     00 FA 55 F2 | 	cmps	result1, #0 wc
224d0     18 4F 05 C1 |  if_b	add	fp, #280
224d4     A7 FA 01 CB |  if_b	rdlong	result1, fp
224d8     18 4F 85 C1 |  if_b	sub	fp, #280
224dc     B8 04 90 CD |  if_b	jmp	#LR__3073
224e0     C0 4E 05 F1 | 	add	fp, #192
224e4     A7 1E 02 FB | 	rdlong	local01, fp
224e8     58 4E 05 F1 | 	add	fp, #88
224ec     A7 22 02 FB | 	rdlong	local03, fp
224f0     11 1F 02 F1 | 	add	local01, local03
224f4     58 4E 85 F1 | 	sub	fp, #88
224f8     A7 1E 62 FC | 	wrlong	local01, fp
224fc     C0 4E 85 F1 | 	sub	fp, #192
22500                 | LR__3046
22500     4C 4E 05 F1 | 	add	fp, #76
22504     A7 1E 02 FB | 	rdlong	local01, fp
22508     34 4E 85 F1 | 	sub	fp, #52
2250c     A7 1E 62 FC | 	wrlong	local01, fp
22510     18 4E 85 F1 | 	sub	fp, #24
22514     97 9E 48 FB | 	callpa	#(@LR__3052-@LR__3047)>>2,fcache_load_ptr_
22518                 | LR__3047
22518     18 4E 05 F1 | 	add	fp, #24
2251c     A7 20 02 FB | 	rdlong	local02, fp
22520     3C 4E 05 F1 | 	add	fp, #60
22524     A7 26 02 FB | 	rdlong	local05, fp
22528     54 4E 85 F1 | 	sub	fp, #84
2252c     13 21 52 F2 | 	cmps	local02, local05 wc
22530     20 01 90 3D |  if_ae	jmp	#LR__3053
22534     18 4E 05 F1 | 	add	fp, #24
22538     A7 28 02 FB | 	rdlong	local06, fp
2253c     18 4E 85 F1 | 	sub	fp, #24
22540     00 28 56 F2 | 	cmps	local06, #0 wc
22544     58 00 90 CD |  if_b	jmp	#LR__3048
22548     18 4E 05 F1 | 	add	fp, #24
2254c     A7 28 02 FB | 	rdlong	local06, fp
22550     40 4E 05 F1 | 	add	fp, #64
22554     A7 2A 02 FB | 	rdlong	local07, fp
22558     58 4E 85 F1 | 	sub	fp, #88
2255c     15 29 52 F2 | 	cmps	local06, local07 wc
22560     3C 00 90 3D |  if_ae	jmp	#LR__3048
22564     C0 4E 05 F1 | 	add	fp, #192
22568     A7 2C 02 FB | 	rdlong	local08, fp
2256c     16 2B 02 F6 | 	mov	local07, local08
22570     01 2A 06 F1 | 	add	local07, #1
22574     A7 2A 62 FC | 	wrlong	local07, fp
22578     A8 4E 85 F1 | 	sub	fp, #168
2257c     A7 2A 02 FB | 	rdlong	local07, fp
22580     15 2F 02 F6 | 	mov	local09, local07
22584     58 4E 05 F1 | 	add	fp, #88
22588     A7 30 02 F6 | 	mov	local10, fp
2258c     A7 2E 02 F1 | 	add	local09, fp
22590     17 33 C2 FA | 	rdbyte	local11, local09
22594     16 33 42 FC | 	wrbyte	local11, local08
22598     70 4E 85 F1 | 	sub	fp, #112
2259c     20 00 90 FD | 	jmp	#LR__3049
225a0                 | LR__3048
225a0     C0 4E 05 F1 | 	add	fp, #192
225a4     A7 2C 02 FB | 	rdlong	local08, fp
225a8     16 2F 02 F6 | 	mov	local09, local08
225ac     01 2E 06 F1 | 	add	local09, #1
225b0     A7 2E 62 FC | 	wrlong	local09, fp
225b4     C0 4E 85 F1 | 	sub	fp, #192
225b8     30 2E 06 F6 | 	mov	local09, #48
225bc     16 61 48 FC | 	wrbyte	#48, local08
225c0                 | LR__3049
225c0     18 4E 05 F1 | 	add	fp, #24
225c4     A7 28 02 FB | 	rdlong	local06, fp
225c8     38 4E 05 F1 | 	add	fp, #56
225cc     A7 34 02 FB | 	rdlong	local12, fp
225d0     50 4E 85 F1 | 	sub	fp, #80
225d4     1A 29 0A F2 | 	cmp	local06, local12 wz
225d8     5C 00 90 5D |  if_ne	jmp	#LR__3051
225dc     10 4F 05 F1 | 	add	fp, #272
225e0     A7 2A 02 FB | 	rdlong	local07, fp
225e4     10 4F 85 F1 | 	sub	fp, #272
225e8     15 2F 0A F6 | 	mov	local09, local07 wz
225ec     28 00 90 5D |  if_ne	jmp	#LR__3050
225f0     54 4E 05 F1 | 	add	fp, #84
225f4     A7 32 02 FB | 	rdlong	local11, fp
225f8     19 31 02 F6 | 	mov	local10, local11
225fc     01 30 86 F1 | 	sub	local10, #1
22600     3C 4E 85 F1 | 	sub	fp, #60
22604     A7 36 02 FB | 	rdlong	local13, fp
22608     18 4E 85 F1 | 	sub	fp, #24
2260c     1B 39 02 F6 | 	mov	local14, local13
22610     18 39 52 F2 | 	cmps	local14, local10 wc
22614     20 00 90 3D |  if_ae	jmp	#LR__3051
22618                 | LR__3050
22618     C0 4E 05 F1 | 	add	fp, #192
2261c     A7 2C 02 FB | 	rdlong	local08, fp
22620     16 35 02 F6 | 	mov	local12, local08
22624     01 34 06 F1 | 	add	local12, #1
22628     A7 34 62 FC | 	wrlong	local12, fp
2262c     C0 4E 85 F1 | 	sub	fp, #192
22630     2E 2E 06 F6 | 	mov	local09, #46
22634     16 5D 48 FC | 	wrbyte	#46, local08
22638                 | LR__3051
22638     18 4E 05 F1 | 	add	fp, #24
2263c     A7 3A 02 FB | 	rdlong	local15, fp
22640     1D 35 02 F6 | 	mov	local12, local15
22644     01 34 06 F1 | 	add	local12, #1
22648     A7 34 62 FC | 	wrlong	local12, fp
2264c     18 4E 85 F1 | 	sub	fp, #24
22650     C4 FE 9F FD | 	jmp	#LR__3047
22654                 | LR__3052
22654                 | LR__3053
22654     34 4E 05 F1 | 	add	fp, #52
22658     A7 1E 0A FB | 	rdlong	local01, fp wz
2265c     34 4E 85 F1 | 	sub	fp, #52
22660     A0 00 90 AD |  if_e	jmp	#LR__3057
22664     C0 4E 05 F1 | 	add	fp, #192
22668     A7 1E 02 FB | 	rdlong	local01, fp
2266c     01 1E 86 F1 | 	sub	local01, #1
22670     A7 1E 62 FC | 	wrlong	local01, fp
22674     C0 4E 85 F1 | 	sub	fp, #192
22678     97 26 48 FB | 	callpa	#(@LR__3055-@LR__3054)>>2,fcache_load_ptr_
2267c                 | LR__3054
2267c     C0 4E 05 F1 | 	add	fp, #192
22680     A7 1E 02 FB | 	rdlong	local01, fp
22684     04 4E 05 F1 | 	add	fp, #4
22688     A7 22 02 FB | 	rdlong	local03, fp
2268c     C4 4E 85 F1 | 	sub	fp, #196
22690     11 1F 5A F2 | 	cmps	local01, local03 wcz
22694     30 00 90 ED |  if_be	jmp	#LR__3056
22698     C0 4E 05 F1 | 	add	fp, #192
2269c     A7 28 02 FB | 	rdlong	local06, fp
226a0     C0 4E 85 F1 | 	sub	fp, #192
226a4     14 25 C2 FA | 	rdbyte	local04, local06
226a8     30 24 0E F2 | 	cmp	local04, #48 wz
226ac     18 00 90 5D |  if_ne	jmp	#LR__3056
226b0     C0 4E 05 F1 | 	add	fp, #192
226b4     A7 1E 02 FB | 	rdlong	local01, fp
226b8     01 1E 86 F1 | 	sub	local01, #1
226bc     A7 1E 62 FC | 	wrlong	local01, fp
226c0     C0 4E 85 F1 | 	sub	fp, #192
226c4     B4 FF 9F FD | 	jmp	#LR__3054
226c8                 | LR__3055
226c8                 | LR__3056
226c8     C0 4E 05 F1 | 	add	fp, #192
226cc     A7 20 02 FB | 	rdlong	local02, fp
226d0     C0 4E 85 F1 | 	sub	fp, #192
226d4     10 1F C2 FA | 	rdbyte	local01, local02
226d8     2E 1E 0E F2 | 	cmp	local01, #46 wz
226dc     C0 4E 05 A1 |  if_e	add	fp, #192
226e0     A7 1E 02 AB |  if_e	rdlong	local01, fp
226e4     01 1E 86 A1 |  if_e	sub	local01, #1
226e8     A7 1E 62 AC |  if_e	wrlong	local01, fp
226ec     C0 4E 85 A1 |  if_e	sub	fp, #192
226f0     C0 4E 05 F1 | 	add	fp, #192
226f4     A7 22 02 FB | 	rdlong	local03, fp
226f8     01 22 06 F1 | 	add	local03, #1
226fc     A7 22 62 FC | 	wrlong	local03, fp
22700     C0 4E 85 F1 | 	sub	fp, #192
22704                 | LR__3057
22704     24 4E 05 F1 | 	add	fp, #36
22708     A7 1E 0A FB | 	rdlong	local01, fp wz
2270c     24 4E 85 F1 | 	sub	fp, #36
22710     B4 00 90 AD |  if_e	jmp	#LR__3060
22714     C0 4E 05 F1 | 	add	fp, #192
22718     A7 20 02 FB | 	rdlong	local02, fp
2271c     10 23 02 F6 | 	mov	local03, local02
22720     01 22 06 F1 | 	add	local03, #1
22724     A7 22 62 FC | 	wrlong	local03, fp
22728     90 4E 85 F1 | 	sub	fp, #144
2272c     A7 24 02 FB | 	rdlong	local04, fp
22730     10 25 42 FC | 	wrbyte	local04, local02
22734     90 4E 05 F1 | 	add	fp, #144
22738     A7 20 02 FB | 	rdlong	local02, fp
2273c     10 23 02 F6 | 	mov	local03, local02
22740     01 22 06 F1 | 	add	local03, #1
22744     A7 22 62 FC | 	wrlong	local03, fp
22748     60 4E 85 F1 | 	sub	fp, #96
2274c     A7 24 02 FB | 	rdlong	local04, fp
22750     10 25 42 FC | 	wrbyte	local04, local02
22754     48 4E 85 F1 | 	sub	fp, #72
22758     A7 00 68 FC | 	wrlong	#0, fp
2275c     18 4E 85 F1 | 	sub	fp, #24
22760                 | LR__3058
22760     18 4E 05 F1 | 	add	fp, #24
22764     A7 20 02 FB | 	rdlong	local02, fp
22768     44 4E 05 F1 | 	add	fp, #68
2276c     A7 26 02 FB | 	rdlong	local05, fp
22770     5C 4E 85 F1 | 	sub	fp, #92
22774     13 21 52 F2 | 	cmps	local02, local05 wc
22778     4C 00 90 3D |  if_ae	jmp	#LR__3059
2277c     C0 4E 05 F1 | 	add	fp, #192
22780     A7 2C 02 FB | 	rdlong	local08, fp
22784     16 35 02 F6 | 	mov	local12, local08
22788     01 34 06 F1 | 	add	local12, #1
2278c     A7 34 62 FC | 	wrlong	local12, fp
22790     A8 4E 85 F1 | 	sub	fp, #168
22794     A7 2A 02 FB | 	rdlong	local07, fp
22798     15 2F 02 F6 | 	mov	local09, local07
2279c     98 4E 05 F1 | 	add	fp, #152
227a0     A7 30 02 F6 | 	mov	local10, fp
227a4     A7 2E 02 F1 | 	add	local09, fp
227a8     17 33 C2 FA | 	rdbyte	local11, local09
227ac     16 33 42 FC | 	wrbyte	local11, local08
227b0     98 4E 85 F1 | 	sub	fp, #152
227b4     A7 34 02 FB | 	rdlong	local12, fp
227b8     01 34 06 F1 | 	add	local12, #1
227bc     A7 34 62 FC | 	wrlong	local12, fp
227c0     18 4E 85 F1 | 	sub	fp, #24
227c4     98 FF 9F FD | 	jmp	#LR__3058
227c8                 | LR__3059
227c8                 | LR__3060
227c8     C0 4E 05 F1 | 	add	fp, #192
227cc     A7 1E 02 FB | 	rdlong	local01, fp
227d0     C0 4E 85 F1 | 	sub	fp, #192
227d4     0F 01 48 FC | 	wrbyte	#0, local01
227d8                 | LR__3061
227d8     6C 4E 05 F1 | 	add	fp, #108
227dc     A7 1E 0A FB | 	rdlong	local01, fp wz
227e0     6C 4E 85 F1 | 	sub	fp, #108
227e4     90 01 90 AD |  if_e	jmp	#LR__3072
227e8     48 4E 05 F1 | 	add	fp, #72
227ec     A7 22 0A FB | 	rdlong	local03, fp wz
227f0     48 4E 85 F1 | 	sub	fp, #72
227f4     80 01 90 AD |  if_e	jmp	#LR__3072
227f8     C4 4E 05 F1 | 	add	fp, #196
227fc     A7 12 02 FB | 	rdlong	arg01, fp
22800     C4 4E 85 F1 | 	sub	fp, #196
22804     09 3D 02 F6 | 	mov	local16, arg01
22808     97 06 48 FB | 	callpa	#(@LR__3063-@LR__3062)>>2,fcache_load_ptr_
2280c                 | LR__3062
2280c     1E FB C9 FA | 	rdbyte	result1, local16 wz
22810     01 3C 06 51 |  if_ne	add	local16, #1
22814     F4 FF 9F 5D |  if_ne	jmp	#LR__3062
22818                 | LR__3063
22818     09 3D 82 F1 | 	sub	local16, arg01
2281c     1E 25 02 F6 | 	mov	local04, local16
22820     6C 4E 05 F1 | 	add	fp, #108
22824     A7 28 02 FB | 	rdlong	local06, fp
22828     6C 4E 85 F1 | 	sub	fp, #108
2282c     14 25 5A F2 | 	cmps	local04, local06 wcz
22830     44 01 90 ED |  if_be	jmp	#LR__3072
22834     C4 4E 05 F1 | 	add	fp, #196
22838     A7 1E 02 FB | 	rdlong	local01, fp
2283c     5C 4E 05 F1 | 	add	fp, #92
22840     A7 1E 62 FC | 	wrlong	local01, fp
22844     FC 4E 85 F1 | 	sub	fp, #252
22848     A7 1E 0A FB | 	rdlong	local01, fp wz
2284c     24 4E 85 F1 | 	sub	fp, #36
22850     20 00 90 AD |  if_e	jmp	#LR__3064
22854     B8 4E 05 F1 | 	add	fp, #184
22858     A7 00 68 FC | 	wrlong	#0, fp
2285c     4C 4E 85 F1 | 	sub	fp, #76
22860     A7 1E 02 FB | 	rdlong	local01, fp
22864     B0 4E 05 F1 | 	add	fp, #176
22868     A7 1E 62 FC | 	wrlong	local01, fp
2286c     1C 4F 85 F1 | 	sub	fp, #284
22870     24 00 90 FD | 	jmp	#LR__3065
22874                 | LR__3064
22874     6C 4E 05 F1 | 	add	fp, #108
22878     A7 1E 02 FB | 	rdlong	local01, fp
2287c     01 1E 86 F1 | 	sub	local01, #1
22880     4C 4E 05 F1 | 	add	fp, #76
22884     A7 22 02 FB | 	rdlong	local03, fp
22888     11 1F 82 F1 | 	sub	local01, local03
2288c     64 4E 05 F1 | 	add	fp, #100
22890     A7 1E 62 FC | 	wrlong	local01, fp
22894     1C 4F 85 F1 | 	sub	fp, #284
22898                 | LR__3065
22898     97 20 48 FB | 	callpa	#(@LR__3067-@LR__3066)>>2,fcache_load_ptr_
2289c                 | LR__3066
2289c     1C 4F 05 F1 | 	add	fp, #284
228a0     A7 1E 0A FB | 	rdlong	local01, fp wz
228a4     1C 4F 85 F1 | 	sub	fp, #284
228a8     30 00 90 AD |  if_e	jmp	#LR__3068
228ac     20 4F 05 F1 | 	add	fp, #288
228b0     A7 20 02 FB | 	rdlong	local02, fp
228b4     10 23 02 F6 | 	mov	local03, local02
228b8     01 22 06 F1 | 	add	local03, #1
228bc     A7 22 62 FC | 	wrlong	local03, fp
228c0     10 55 48 FC | 	wrbyte	#42, local02
228c4     04 4E 85 F1 | 	sub	fp, #4
228c8     A7 1E 02 FB | 	rdlong	local01, fp
228cc     01 1E 86 F1 | 	sub	local01, #1
228d0     A7 1E 62 FC | 	wrlong	local01, fp
228d4     1C 4F 85 F1 | 	sub	fp, #284
228d8     C0 FF 9F FD | 	jmp	#LR__3066
228dc                 | LR__3067
228dc                 | LR__3068
228dc     B8 4E 05 F1 | 	add	fp, #184
228e0     A7 1E 0A FB | 	rdlong	local01, fp wz
228e4     B8 4E 85 F1 | 	sub	fp, #184
228e8     70 00 90 AD |  if_e	jmp	#LR__3071
228ec     20 4F 05 F1 | 	add	fp, #288
228f0     A7 20 02 FB | 	rdlong	local02, fp
228f4     10 23 02 F6 | 	mov	local03, local02
228f8     01 22 06 F1 | 	add	local03, #1
228fc     A7 22 62 FC | 	wrlong	local03, fp
22900     10 5D 48 FC | 	wrbyte	#46, local02
22904     04 4E 85 F1 | 	sub	fp, #4
22908     A7 00 68 FC | 	wrlong	#0, fp
2290c     1C 4F 85 F1 | 	sub	fp, #284
22910                 | LR__3069
22910     1C 4F 05 F1 | 	add	fp, #284
22914     A7 20 02 FB | 	rdlong	local02, fp
22918     64 4E 85 F1 | 	sub	fp, #100
2291c     A7 26 02 FB | 	rdlong	local05, fp
22920     B8 4E 85 F1 | 	sub	fp, #184
22924     13 21 52 F2 | 	cmps	local02, local05 wc
22928     30 00 90 3D |  if_ae	jmp	#LR__3070
2292c     20 4F 05 F1 | 	add	fp, #288
22930     A7 2C 02 FB | 	rdlong	local08, fp
22934     16 35 02 F6 | 	mov	local12, local08
22938     01 34 06 F1 | 	add	local12, #1
2293c     A7 34 62 FC | 	wrlong	local12, fp
22940     16 55 48 FC | 	wrbyte	#42, local08
22944     04 4E 85 F1 | 	sub	fp, #4
22948     A7 34 02 FB | 	rdlong	local12, fp
2294c     01 34 06 F1 | 	add	local12, #1
22950     A7 34 62 FC | 	wrlong	local12, fp
22954     1C 4F 85 F1 | 	sub	fp, #284
22958     B4 FF 9F FD | 	jmp	#LR__3069
2295c                 | LR__3070
2295c                 | LR__3071
2295c     20 4F 05 F1 | 	add	fp, #288
22960     A7 20 02 FB | 	rdlong	local02, fp
22964     10 23 02 F6 | 	mov	local03, local02
22968     01 22 06 F1 | 	add	local03, #1
2296c     A7 22 62 FC | 	wrlong	local03, fp
22970     20 4F 85 F1 | 	sub	fp, #288
22974     10 01 48 FC | 	wrbyte	#0, local02
22978                 | LR__3072
22978     04 4E 05 F1 | 	add	fp, #4
2297c     A7 12 02 FB | 	rdlong	arg01, fp
22980     04 4E 05 F1 | 	add	fp, #4
22984     A7 14 02 FB | 	rdlong	arg02, fp
22988     BC 4E 05 F1 | 	add	fp, #188
2298c     A7 16 02 FB | 	rdlong	arg03, fp
22990     C4 4E 85 F1 | 	sub	fp, #196
22994     C4 EE BF FD | 	call	#__system___fmtstr
22998                 | LR__3073
22998     A7 F0 03 F6 | 	mov	ptra, fp
2299c     B2 00 A0 FD | 	call	#popregs_
229a0                 | __system___fmtfloat_ret
229a0     2D 00 64 FD | 	ret
229a4                 | 
229a4                 | __system__Left_S
229a4     04 4A 05 F6 | 	mov	COUNT_, #4
229a8     A8 00 A0 FD | 	call	#pushregs_
229ac     09 1F 02 F6 | 	mov	local01, arg01
229b0     0A 21 02 F6 | 	mov	local02, arg02
229b4     01 20 56 F2 | 	cmps	local02, #1 wc
229b8     80 01 00 CF 
229bc     56 FB 05 C6 |  if_b	mov	result1, ##@LR__4983
229c0     5C 00 90 CD |  if_b	jmp	#LR__3083
229c4     0F 13 02 F6 | 	mov	arg01, local01
229c8     09 23 02 F6 | 	mov	local03, arg01
229cc     97 06 48 FB | 	callpa	#(@LR__3081-@LR__3080)>>2,fcache_load_ptr_
229d0                 | LR__3080
229d0     11 FB C9 FA | 	rdbyte	result1, local03 wz
229d4     01 22 06 51 |  if_ne	add	local03, #1
229d8     F4 FF 9F 5D |  if_ne	jmp	#LR__3080
229dc                 | LR__3081
229dc     09 23 82 F1 | 	sub	local03, arg01
229e0     11 FB 01 F6 | 	mov	result1, local03
229e4     10 FB 59 F2 | 	cmps	result1, local02 wcz
229e8     0F FB 01 E6 |  if_be	mov	result1, local01
229ec     30 00 90 ED |  if_be	jmp	#LR__3083
229f0     10 13 02 F6 | 	mov	arg01, local02
229f4     02 12 06 F1 | 	add	arg01, #2
229f8     E4 1D B0 FD | 	call	#__system___gc_alloc_managed
229fc     FD 24 0A F6 | 	mov	local04, result1 wz
22a00     18 00 90 AD |  if_e	jmp	#LR__3082
22a04     12 13 02 F6 | 	mov	arg01, local04
22a08     0F 15 02 F6 | 	mov	arg02, local01
22a0c     10 17 02 F6 | 	mov	arg03, local02
22a10     34 DE BF FD | 	call	#__system____builtin_memmove
22a14     12 21 02 F1 | 	add	local02, local04
22a18     10 01 48 FC | 	wrbyte	#0, local02
22a1c                 | LR__3082
22a1c     12 FB 01 F6 | 	mov	result1, local04
22a20                 | LR__3083
22a20     A7 F0 03 F6 | 	mov	ptra, fp
22a24     B2 00 A0 FD | 	call	#popregs_
22a28                 | __system__Left_S_ret
22a28     2D 00 64 FD | 	ret
22a2c                 | 
22a2c                 | __system__Right_S
22a2c     05 4A 05 F6 | 	mov	COUNT_, #5
22a30     A8 00 A0 FD | 	call	#pushregs_
22a34     09 1F 02 F6 | 	mov	local01, arg01
22a38     0A 21 02 F6 | 	mov	local02, arg02
22a3c     01 20 56 F2 | 	cmps	local02, #1 wc
22a40     80 01 00 CF 
22a44     57 FB 05 C6 |  if_b	mov	result1, ##@LR__4984
22a48     64 00 90 CD |  if_b	jmp	#LR__3093
22a4c     0F 13 02 F6 | 	mov	arg01, local01
22a50     09 23 02 F6 | 	mov	local03, arg01
22a54     97 06 48 FB | 	callpa	#(@LR__3091-@LR__3090)>>2,fcache_load_ptr_
22a58                 | LR__3090
22a58     11 FB C9 FA | 	rdbyte	result1, local03 wz
22a5c     01 22 06 51 |  if_ne	add	local03, #1
22a60     F4 FF 9F 5D |  if_ne	jmp	#LR__3090
22a64                 | LR__3091
22a64     09 23 82 F1 | 	sub	local03, arg01
22a68     11 FB 01 F6 | 	mov	result1, local03
22a6c     FD 24 02 F6 | 	mov	local04, result1
22a70     10 25 5A F2 | 	cmps	local04, local02 wcz
22a74     0F FB 01 E6 |  if_be	mov	result1, local01
22a78     34 00 90 ED |  if_be	jmp	#LR__3093
22a7c     10 13 02 F6 | 	mov	arg01, local02
22a80     02 12 06 F1 | 	add	arg01, #2
22a84     58 1D B0 FD | 	call	#__system___gc_alloc_managed
22a88     FD 26 0A F6 | 	mov	local05, result1 wz
22a8c     1C 00 90 AD |  if_e	jmp	#LR__3092
22a90     10 25 82 F1 | 	sub	local04, local02
22a94     0F 25 02 F1 | 	add	local04, local01
22a98     01 20 06 F1 | 	add	local02, #1
22a9c     13 13 02 F6 | 	mov	arg01, local05
22aa0     12 15 02 F6 | 	mov	arg02, local04
22aa4     10 17 02 F6 | 	mov	arg03, local02
22aa8     9C DD BF FD | 	call	#__system____builtin_memmove
22aac                 | LR__3092
22aac     13 FB 01 F6 | 	mov	result1, local05
22ab0                 | LR__3093
22ab0     A7 F0 03 F6 | 	mov	ptra, fp
22ab4     B2 00 A0 FD | 	call	#popregs_
22ab8                 | __system__Right_S_ret
22ab8     2D 00 64 FD | 	ret
22abc                 | 
22abc                 | __system__Mid_S
22abc     05 4A 05 F6 | 	mov	COUNT_, #5
22ac0     A8 00 A0 FD | 	call	#pushregs_
22ac4     09 1F 02 F6 | 	mov	local01, arg01
22ac8     0A 21 02 F6 | 	mov	local02, arg02
22acc     01 16 56 F2 | 	cmps	arg03, #1 wc
22ad0     80 01 00 CF 
22ad4     58 FB 05 C6 |  if_b	mov	result1, ##@LR__4985
22ad8     80 00 90 CD |  if_b	jmp	#LR__3103
22adc     01 20 86 F1 | 	sub	local02, #1
22ae0     00 20 56 F3 | 	fges	local02, #0 wc
22ae4     0F 13 02 F6 | 	mov	arg01, local01
22ae8     09 23 02 F6 | 	mov	local03, arg01
22aec     97 06 48 FB | 	callpa	#(@LR__3101-@LR__3100)>>2,fcache_load_ptr_
22af0                 | LR__3100
22af0     11 FB C9 FA | 	rdbyte	result1, local03 wz
22af4     01 22 06 51 |  if_ne	add	local03, #1
22af8     F4 FF 9F 5D |  if_ne	jmp	#LR__3100
22afc                 | LR__3101
22afc     09 23 82 F1 | 	sub	local03, arg01
22b00     11 FB 01 F6 | 	mov	result1, local03
22b04     FD 14 02 F6 | 	mov	arg02, result1
22b08     10 15 52 F2 | 	cmps	arg02, local02 wc
22b0c     80 01 00 CF 
22b10     59 FB 05 C6 |  if_b	mov	result1, ##@LR__4986
22b14     44 00 90 CD |  if_b	jmp	#LR__3103
22b18     0A 25 02 F6 | 	mov	local04, arg02
22b1c     10 25 82 F1 | 	sub	local04, local02
22b20     0B 25 5A F2 | 	cmps	local04, arg03 wcz
22b24     0B 25 02 16 |  if_a	mov	local04, arg03
22b28     12 13 02 F6 | 	mov	arg01, local04
22b2c     02 12 06 F1 | 	add	arg01, #2
22b30     AC 1C B0 FD | 	call	#__system___gc_alloc_managed
22b34     FD 26 0A F6 | 	mov	local05, result1 wz
22b38     1C 00 90 AD |  if_e	jmp	#LR__3102
22b3c     0F 21 02 F1 | 	add	local02, local01
22b40     13 13 02 F6 | 	mov	arg01, local05
22b44     10 15 02 F6 | 	mov	arg02, local02
22b48     12 17 02 F6 | 	mov	arg03, local04
22b4c     F8 DC BF FD | 	call	#__system____builtin_memmove
22b50     13 25 02 F1 | 	add	local04, local05
22b54     12 01 48 FC | 	wrbyte	#0, local04
22b58                 | LR__3102
22b58     13 FB 01 F6 | 	mov	result1, local05
22b5c                 | LR__3103
22b5c     A7 F0 03 F6 | 	mov	ptra, fp
22b60     B2 00 A0 FD | 	call	#popregs_
22b64                 | __system__Mid_S_ret
22b64     2D 00 64 FD | 	ret
22b68                 | 
22b68                 | __system__Chr_S
22b68     01 4A 05 F6 | 	mov	COUNT_, #1
22b6c     A8 00 A0 FD | 	call	#pushregs_
22b70     09 1F 02 F6 | 	mov	local01, arg01
22b74     03 12 06 F6 | 	mov	arg01, #3
22b78     64 1C B0 FD | 	call	#__system___gc_alloc_managed
22b7c     00 FA 4D F2 | 	cmps	result1, #0 wz
22b80     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
22b84     01 FA 05 51 |  if_ne	add	result1, #1
22b88     FD 00 48 5C |  if_ne	wrbyte	#0, result1
22b8c     01 FA 85 51 |  if_ne	sub	result1, #1
22b90     A7 F0 03 F6 | 	mov	ptra, fp
22b94     B2 00 A0 FD | 	call	#popregs_
22b98                 | __system__Chr_S_ret
22b98     2D 00 64 FD | 	ret
22b9c                 | 
22b9c                 | __system__str_S
22b9c     02 4A 05 F6 | 	mov	COUNT_, #2
22ba0     A8 00 A0 FD | 	call	#pushregs_
22ba4     09 1F 02 F6 | 	mov	local01, arg01
22ba8     10 12 06 F6 | 	mov	arg01, #16
22bac     30 1C B0 FD | 	call	#__system___gc_alloc_managed
22bb0     FD 20 0A F6 | 	mov	local02, result1 wz
22bb4     30 00 90 AD |  if_e	jmp	#LR__3110
22bb8     F8 13 02 F6 | 	mov	arg01, ptra
22bbc     08 F0 07 F1 | 	add	ptra, #8
22bc0     09 21 62 FC | 	wrlong	local02, arg01
22bc4     04 12 06 F1 | 	add	arg01, #4
22bc8     09 01 68 FC | 	wrlong	#0, arg01
22bcc     04 12 86 F1 | 	sub	arg01, #4
22bd0     00 A8 04 FF 
22bd4     00 12 46 F5 | 	or	arg01, ##156237824
22bd8     00 14 06 F6 | 	mov	arg02, #0
22bdc     0F 17 02 F6 | 	mov	arg03, local01
22be0     67 18 06 F6 | 	mov	arg04, #103
22be4     90 EE BF FD | 	call	#__system___fmtfloat
22be8                 | LR__3110
22be8     10 FB 01 F6 | 	mov	result1, local02
22bec     A7 F0 03 F6 | 	mov	ptra, fp
22bf0     B2 00 A0 FD | 	call	#popregs_
22bf4                 | __system__str_S_ret
22bf4     2D 00 64 FD | 	ret
22bf8                 | 
22bf8                 | __system__Number_S
22bf8     08 4A 05 F6 | 	mov	COUNT_, #8
22bfc     A8 00 A0 FD | 	call	#pushregs_
22c00     09 1F 02 F6 | 	mov	local01, arg01
22c04     0A 21 0A F6 | 	mov	local02, arg02 wz
22c08     0B 23 02 F6 | 	mov	local03, arg03
22c0c     3C 00 90 5D |  if_ne	jmp	#LR__3122
22c10     01 20 06 F6 | 	mov	local02, #1
22c14     11 25 02 F6 | 	mov	local04, local03
22c18     01 26 06 F6 | 	mov	local05, #1
22c1c     97 16 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
22c20                 | LR__3120
22c20     00 28 06 F6 | 	mov	local06, #0
22c24     0F 25 1A F2 | 	cmp	local04, local01 wcz
22c28     01 28 66 E6 |  if_be	neg	local06, #1
22c2c     12 27 12 F2 | 	cmp	local05, local04 wc
22c30     15 2B A2 F1 | 	subx	local07, local07
22c34     15 29 CA F7 | 	test	local06, local07 wz
22c38     11 25 02 5D |  if_ne	qmul	local04, local03
22c3c     12 27 02 56 |  if_ne	mov	local05, local04
22c40     01 20 06 51 |  if_ne	add	local02, #1
22c44     18 24 62 5D |  if_ne	getqx	local04
22c48     D4 FF 9F 5D |  if_ne	jmp	#LR__3120
22c4c                 | LR__3121
22c4c                 | LR__3122
22c4c     20 20 36 F3 | 	fle	local02, #32 wc
22c50     10 13 02 F6 | 	mov	arg01, local02
22c54     02 12 06 F1 | 	add	arg01, #2
22c58     84 1B B0 FD | 	call	#__system___gc_alloc_managed
22c5c     FD 28 02 F6 | 	mov	local06, result1
22c60     10 2B 02 F6 | 	mov	local07, local02
22c64     14 2B 02 F1 | 	add	local07, local06
22c68     15 01 48 FC | 	wrbyte	#0, local07
22c6c     97 1A 48 FB | 	callpa	#(@LR__3124-@LR__3123)>>2,fcache_load_ptr_
22c70                 | LR__3123
22c70     01 20 16 F2 | 	cmp	local02, #1 wc
22c74     2C 00 90 CD |  if_b	jmp	#LR__3125
22c78     11 1F 12 FD | 	qdiv	local01, local03
22c7c     01 20 86 F1 | 	sub	local02, #1
22c80     10 2B 02 F6 | 	mov	local07, local02
22c84     14 2B 02 F1 | 	add	local07, local06
22c88     19 2C 62 FD | 	getqy	local08
22c8c     0A 2C 16 F2 | 	cmp	local08, #10 wc
22c90     30 2C 06 C1 |  if_b	add	local08, #48
22c94     37 2C 06 31 |  if_ae	add	local08, #55
22c98     15 2D 42 FC | 	wrbyte	local08, local07
22c9c     18 1E 62 FD | 	getqx	local01
22ca0     CC FF 9F FD | 	jmp	#LR__3123
22ca4                 | LR__3124
22ca4                 | LR__3125
22ca4     14 FB 01 F6 | 	mov	result1, local06
22ca8     A7 F0 03 F6 | 	mov	ptra, fp
22cac     B2 00 A0 FD | 	call	#popregs_
22cb0                 | __system__Number_S_ret
22cb0     2D 00 64 FD | 	ret
22cb4                 | 
22cb4                 | __system__LCase_S
22cb4     07 4A 05 F6 | 	mov	COUNT_, #7
22cb8     A8 00 A0 FD | 	call	#pushregs_
22cbc     09 1F 02 F6 | 	mov	local01, arg01
22cc0     09 21 02 F6 | 	mov	local02, arg01
22cc4     97 06 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
22cc8                 | LR__3130
22cc8     10 FB C9 FA | 	rdbyte	result1, local02 wz
22ccc     01 20 06 51 |  if_ne	add	local02, #1
22cd0     F4 FF 9F 5D |  if_ne	jmp	#LR__3130
22cd4                 | LR__3131
22cd4     09 21 82 F1 | 	sub	local02, arg01
22cd8     10 FB 01 F6 | 	mov	result1, local02
22cdc     FD 20 0A F6 | 	mov	local02, result1 wz
22ce0     80 01 00 AF 
22ce4     5A FB 05 A6 |  if_e	mov	result1, ##@LR__4987
22ce8     7C 00 90 AD |  if_e	jmp	#LR__3137
22cec     10 13 02 F6 | 	mov	arg01, local02
22cf0     02 12 06 F1 | 	add	arg01, #2
22cf4     E8 1A B0 FD | 	call	#__system___gc_alloc_managed
22cf8     FD 22 0A F6 | 	mov	local03, result1 wz
22cfc     64 00 90 AD |  if_e	jmp	#LR__3136
22d00     01 24 66 F6 | 	neg	local04, #1
22d04     97 26 48 FB | 	callpa	#(@LR__3135-@LR__3132)>>2,fcache_load_ptr_
22d08                 | LR__3132
22d08     01 24 06 F1 | 	add	local04, #1
22d0c     12 27 02 F6 | 	mov	local05, local04
22d10     0F 27 02 F1 | 	add	local05, local01
22d14     13 29 C2 FA | 	rdbyte	local06, local05
22d18     41 28 56 F2 | 	cmps	local06, #65 wc
22d1c     18 00 90 CD |  if_b	jmp	#LR__3133
22d20     5B 28 56 F2 | 	cmps	local06, #91 wc
22d24     12 2B 02 C6 |  if_b	mov	local07, local04
22d28     11 2B 02 C1 |  if_b	add	local07, local03
22d2c     20 28 06 C1 |  if_b	add	local06, #32
22d30     15 29 42 CC |  if_b	wrbyte	local06, local07
22d34     0C 00 90 CD |  if_b	jmp	#LR__3134
22d38                 | LR__3133
22d38     12 2B 02 F6 | 	mov	local07, local04
22d3c     11 2B 02 F1 | 	add	local07, local03
22d40     15 29 42 FC | 	wrbyte	local06, local07
22d44                 | LR__3134
22d44     10 29 02 F6 | 	mov	local06, local02
22d48     01 28 86 F1 | 	sub	local06, #1
22d4c     14 25 0A F2 | 	cmp	local04, local06 wz
22d50     B4 FF 9F 5D |  if_ne	jmp	#LR__3132
22d54                 | LR__3135
22d54     11 21 02 F1 | 	add	local02, local03
22d58     10 01 48 FC | 	wrbyte	#0, local02
22d5c     11 FB 01 F6 | 	mov	result1, local03
22d60     04 00 90 FD | 	jmp	#LR__3137
22d64                 | LR__3136
22d64     11 FB 01 F6 | 	mov	result1, local03
22d68                 | LR__3137
22d68     A7 F0 03 F6 | 	mov	ptra, fp
22d6c     B2 00 A0 FD | 	call	#popregs_
22d70                 | __system__LCase_S_ret
22d70     2D 00 64 FD | 	ret
22d74                 | 
22d74                 | __system__LTrim_S
22d74     05 4A 05 F6 | 	mov	COUNT_, #5
22d78     A8 00 A0 FD | 	call	#pushregs_
22d7c     09 1F 02 F6 | 	mov	local01, arg01
22d80     09 21 02 F6 | 	mov	local02, arg01
22d84     97 06 48 FB | 	callpa	#(@LR__3141-@LR__3140)>>2,fcache_load_ptr_
22d88                 | LR__3140
22d88     10 FB C9 FA | 	rdbyte	result1, local02 wz
22d8c     01 20 06 51 |  if_ne	add	local02, #1
22d90     F4 FF 9F 5D |  if_ne	jmp	#LR__3140
22d94                 | LR__3141
22d94     09 21 82 F1 | 	sub	local02, arg01
22d98     10 FB 01 F6 | 	mov	result1, local02
22d9c     FD 20 0A F6 | 	mov	local02, result1 wz
22da0     80 01 00 AF 
22da4     5B FB 05 A6 |  if_e	mov	result1, ##@LR__4988
22da8     7C 00 90 AD |  if_e	jmp	#LR__3146
22dac     00 22 06 F6 | 	mov	local03, #0
22db0     10 25 02 F6 | 	mov	local04, local02
22db4                 | LR__3142
22db4     12 23 52 F2 | 	cmps	local03, local04 wc
22db8     68 00 90 3D |  if_ae	jmp	#LR__3145
22dbc     11 17 02 F6 | 	mov	arg03, local03
22dc0     0F 17 02 F1 | 	add	arg03, local01
22dc4     0B 17 C2 FA | 	rdbyte	arg03, arg03
22dc8     20 16 0E F2 | 	cmp	arg03, #32 wz
22dcc     4C 00 90 AD |  if_e	jmp	#LR__3144
22dd0     10 13 02 F6 | 	mov	arg01, local02
22dd4     11 13 82 F1 | 	sub	arg01, local03
22dd8     02 12 06 F1 | 	add	arg01, #2
22ddc     00 1A B0 FD | 	call	#__system___gc_alloc_managed
22de0     FD 26 0A F6 | 	mov	local05, result1 wz
22de4     2C 00 90 AD |  if_e	jmp	#LR__3143
22de8     11 15 02 F6 | 	mov	arg02, local03
22dec     0F 15 02 F1 | 	add	arg02, local01
22df0     10 17 02 F6 | 	mov	arg03, local02
22df4     11 17 82 F1 | 	sub	arg03, local03
22df8     13 13 02 F6 | 	mov	arg01, local05
22dfc     48 DA BF FD | 	call	#__system____builtin_memmove
22e00     11 21 82 F1 | 	sub	local02, local03
22e04     13 21 02 F1 | 	add	local02, local05
22e08     10 01 48 FC | 	wrbyte	#0, local02
22e0c     13 FB 01 F6 | 	mov	result1, local05
22e10     14 00 90 FD | 	jmp	#LR__3146
22e14                 | LR__3143
22e14     13 FB 01 F6 | 	mov	result1, local05
22e18     0C 00 90 FD | 	jmp	#LR__3146
22e1c                 | LR__3144
22e1c     01 22 06 F1 | 	add	local03, #1
22e20     90 FF 9F FD | 	jmp	#LR__3142
22e24                 | LR__3145
22e24     0F FB 01 F6 | 	mov	result1, local01
22e28                 | LR__3146
22e28     A7 F0 03 F6 | 	mov	ptra, fp
22e2c     B2 00 A0 FD | 	call	#popregs_
22e30                 | __system__LTrim_S_ret
22e30     2D 00 64 FD | 	ret
22e34                 | 
22e34                 | __system__RTrim_S
22e34     04 4A 05 F6 | 	mov	COUNT_, #4
22e38     A8 00 A0 FD | 	call	#pushregs_
22e3c     09 1F 02 F6 | 	mov	local01, arg01
22e40     09 21 02 F6 | 	mov	local02, arg01
22e44     97 06 48 FB | 	callpa	#(@LR__3151-@LR__3150)>>2,fcache_load_ptr_
22e48                 | LR__3150
22e48     10 FB C9 FA | 	rdbyte	result1, local02 wz
22e4c     01 20 06 51 |  if_ne	add	local02, #1
22e50     F4 FF 9F 5D |  if_ne	jmp	#LR__3150
22e54                 | LR__3151
22e54     09 21 82 F1 | 	sub	local02, arg01
22e58     10 FB 01 F6 | 	mov	result1, local02
22e5c     FD 20 0A F6 | 	mov	local02, result1 wz
22e60     80 01 00 AF 
22e64     5C FB 05 A6 |  if_e	mov	result1, ##@LR__4989
22e68     74 00 90 AD |  if_e	jmp	#LR__3155
22e6c     10 23 02 F6 | 	mov	local03, local02
22e70     01 22 86 F1 | 	sub	local03, #1
22e74                 | LR__3152
22e74     11 15 02 F6 | 	mov	arg02, local03
22e78     0F 15 02 F1 | 	add	arg02, local01
22e7c     0A 21 C2 FA | 	rdbyte	local02, arg02
22e80     20 20 0E F2 | 	cmp	local02, #32 wz
22e84     44 00 90 AD |  if_e	jmp	#LR__3154
22e88     11 13 02 F6 | 	mov	arg01, local03
22e8c     02 12 06 F1 | 	add	arg01, #2
22e90     4C 19 B0 FD | 	call	#__system___gc_alloc_managed
22e94     FD 24 0A F6 | 	mov	local04, result1 wz
22e98     28 00 90 AD |  if_e	jmp	#LR__3153
22e9c     11 17 02 F6 | 	mov	arg03, local03
22ea0     01 16 06 F1 | 	add	arg03, #1
22ea4     12 13 02 F6 | 	mov	arg01, local04
22ea8     0F 15 02 F6 | 	mov	arg02, local01
22eac     98 D9 BF FD | 	call	#__system____builtin_memmove
22eb0     01 22 06 F1 | 	add	local03, #1
22eb4     12 23 02 F1 | 	add	local03, local04
22eb8     11 01 48 FC | 	wrbyte	#0, local03
22ebc     12 FB 01 F6 | 	mov	result1, local04
22ec0     1C 00 90 FD | 	jmp	#LR__3155
22ec4                 | LR__3153
22ec4     12 FB 01 F6 | 	mov	result1, local04
22ec8     14 00 90 FD | 	jmp	#LR__3155
22ecc                 | LR__3154
22ecc     01 22 86 F1 | 	sub	local03, #1
22ed0     00 22 56 F2 | 	cmps	local03, #0 wc
22ed4     9C FF 9F 3D |  if_ae	jmp	#LR__3152
22ed8     80 01 00 FF 
22edc     5D FB 05 F6 | 	mov	result1, ##@LR__4990
22ee0                 | LR__3155
22ee0     A7 F0 03 F6 | 	mov	ptra, fp
22ee4     B2 00 A0 FD | 	call	#popregs_
22ee8                 | __system__RTrim_S_ret
22ee8     2D 00 64 FD | 	ret
22eec                 | 
22eec                 | __system__Instr
22eec     07 4A 05 F6 | 	mov	COUNT_, #7
22ef0     A8 00 A0 FD | 	call	#pushregs_
22ef4     09 1F 02 F6 | 	mov	local01, arg01
22ef8     0A 21 02 F6 | 	mov	local02, arg02
22efc     0B 23 02 F6 | 	mov	local03, arg03
22f00     11 13 02 F6 | 	mov	arg01, local03
22f04     09 25 02 F6 | 	mov	local04, arg01
22f08     97 06 48 FB | 	callpa	#(@LR__3161-@LR__3160)>>2,fcache_load_ptr_
22f0c                 | LR__3160
22f0c     12 FB C9 FA | 	rdbyte	result1, local04 wz
22f10     01 24 06 51 |  if_ne	add	local04, #1
22f14     F4 FF 9F 5D |  if_ne	jmp	#LR__3160
22f18                 | LR__3161
22f18     09 25 82 F1 | 	sub	local04, arg01
22f1c     12 27 02 F6 | 	mov	local05, local04
22f20     10 13 02 F6 | 	mov	arg01, local02
22f24     09 25 02 F6 | 	mov	local04, arg01
22f28     97 06 48 FB | 	callpa	#(@LR__3163-@LR__3162)>>2,fcache_load_ptr_
22f2c                 | LR__3162
22f2c     12 FB C9 FA | 	rdbyte	result1, local04 wz
22f30     01 24 06 51 |  if_ne	add	local04, #1
22f34     F4 FF 9F 5D |  if_ne	jmp	#LR__3162
22f38                 | LR__3163
22f38     09 25 82 F1 | 	sub	local04, arg01
22f3c     12 FB 01 F6 | 	mov	result1, local04
22f40     FD 18 0A F6 | 	mov	arg04, result1 wz
22f44     00 FA 05 A6 |  if_e	mov	result1, #0
22f48     98 00 90 AD |  if_e	jmp	#LR__3167
22f4c     00 26 0E F2 | 	cmp	local05, #0 wz
22f50     00 FA 05 A6 |  if_e	mov	result1, #0
22f54     8C 00 90 AD |  if_e	jmp	#LR__3167
22f58     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
22f5c     00 FA 05 16 |  if_a	mov	result1, #0
22f60     80 00 90 1D |  if_a	jmp	#LR__3167
22f64     01 1E 56 F2 | 	cmps	local01, #1 wc
22f68     01 1E 06 C6 |  if_b	mov	local01, #1
22f6c     11 29 C2 FA | 	rdbyte	local06, local03
22f70     01 26 0E F2 | 	cmp	local05, #1 wz
22f74     18 00 90 5D |  if_ne	jmp	#LR__3164
22f78     10 13 02 F6 | 	mov	arg01, local02
22f7c     14 15 02 F6 | 	mov	arg02, local06
22f80     0F 17 02 F6 | 	mov	arg03, local01
22f84     00 18 06 F6 | 	mov	arg04, #0
22f88     2C 34 B0 FD | 	call	#__system____ScanForChar
22f8c     54 00 90 FD | 	jmp	#LR__3167
22f90                 | LR__3164
22f90     0F 2B 02 F6 | 	mov	local07, local01
22f94                 | LR__3165
22f94     10 13 02 F6 | 	mov	arg01, local02
22f98     14 15 02 F6 | 	mov	arg02, local06
22f9c     15 17 02 F6 | 	mov	arg03, local07
22fa0     00 18 06 F6 | 	mov	arg04, #0
22fa4     10 34 B0 FD | 	call	#__system____ScanForChar
22fa8     FD 2A 0A F6 | 	mov	local07, result1 wz
22fac     30 00 90 AD |  if_e	jmp	#LR__3166
22fb0     13 17 02 F6 | 	mov	arg03, local05
22fb4     10 13 02 F6 | 	mov	arg01, local02
22fb8     15 15 02 F6 | 	mov	arg02, local07
22fbc     FC FA BF FD | 	call	#__system__Mid_S
22fc0     FD 12 02 F6 | 	mov	arg01, result1
22fc4     11 15 02 F6 | 	mov	arg02, local03
22fc8     84 D9 BF FD | 	call	#__system___string_cmp
22fcc     00 FA 0D F2 | 	cmp	result1, #0 wz
22fd0     15 FB 01 A6 |  if_e	mov	result1, local07
22fd4     0C 00 90 AD |  if_e	jmp	#LR__3167
22fd8     13 2B 02 F1 | 	add	local07, local05
22fdc     B4 FF 9F FD | 	jmp	#LR__3165
22fe0                 | LR__3166
22fe0     00 FA 05 F6 | 	mov	result1, #0
22fe4                 | LR__3167
22fe4     A7 F0 03 F6 | 	mov	ptra, fp
22fe8     B2 00 A0 FD | 	call	#popregs_
22fec                 | __system__Instr_ret
22fec     2D 00 64 FD | 	ret
22ff0                 | 
22ff0                 | __system___strerror
22ff0     00 12 56 F2 | 	cmps	arg01, #0 wc
22ff4     08 00 90 CD |  if_b	jmp	#LR__3170
22ff8     1A 12 56 F2 | 	cmps	arg01, #26 wc
22ffc     04 00 90 CD |  if_b	jmp	#LR__3171
23000                 | LR__3170
23000     19 12 06 F6 | 	mov	arg01, #25
23004                 | LR__3171
23004     02 12 66 F0 | 	shl	arg01, #2
23008     01 00 00 FF 
2300c     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
23010     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
23014     09 FB 01 FB | 	rdlong	result1, arg01
23018     01 00 00 FF 
2301c     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
23020                 | __system___strerror_ret
23020     2D 00 64 FD | 	ret
23024                 | 
23024                 | __system___int64_shl
23024     20 16 CE F7 | 	test	arg03, #32 wz
23028     09 15 02 56 |  if_ne	mov	arg02, arg01
2302c     00 12 06 56 |  if_ne	mov	arg01, #0
23030     1F 16 CE F7 | 	test	arg03, #31 wz
23034     18 00 90 AD |  if_e	jmp	#LR__3180
23038     0B 15 62 F0 | 	shl	arg02, arg03
2303c     09 FB 01 F6 | 	mov	result1, arg01
23040     0B FD 61 F6 | 	neg	result2, arg03
23044     FE FA 41 F0 | 	shr	result1, result2
23048     FD 14 42 F5 | 	or	arg02, result1
2304c     0B 13 62 F0 | 	shl	arg01, arg03
23050                 | LR__3180
23050     0A FD 01 F6 | 	mov	result2, arg02
23054     09 FB 01 F6 | 	mov	result1, arg01
23058                 | __system___int64_shl_ret
23058     2D 00 64 FD | 	ret
2305c                 | 
2305c                 | __system___usepins
2305c     14 E6 05 F1 | 	add	ptr___system__dat__, #20
23060     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
23064     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
23068     00 13 CA F7 | 	test	arg01, _var01 wz
2306c     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
23070     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
23074     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
23078     01 15 CA A7 |  if_e	test	arg02, _var02 wz
2307c     00 FA 05 56 |  if_ne	mov	result1, #0
23080     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
23084     14 E6 05 F1 | 	add	ptr___system__dat__, #20
23088     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
2308c     09 03 42 F5 | 	or	_var02, arg01
23090     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
23094     04 E6 05 F1 | 	add	ptr___system__dat__, #4
23098     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
2309c     0A 03 42 F5 | 	or	_var02, arg02
230a0     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
230a4     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
230a8     01 FA 65 F6 | 	neg	result1, #1
230ac                 | __system___usepins_ret
230ac     2D 00 64 FD | 	ret
230b0                 | 
230b0                 | __system___freepins
230b0     14 E6 05 F1 | 	add	ptr___system__dat__, #20
230b4     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
230b8     09 01 22 F5 | 	andn	_var01, arg01
230bc     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
230c0     04 E6 05 F1 | 	add	ptr___system__dat__, #4
230c4     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
230c8     0A 01 22 F5 | 	andn	_var01, arg02
230cc     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
230d0     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
230d4                 | __system___freepins_ret
230d4     2D 00 64 FD | 	ret
230d8                 | 
230d8                 | __system___float_fromuns
230d8     09 17 0A F6 | 	mov	arg03, arg01 wz
230dc     0B FB 01 A6 |  if_e	mov	result1, arg03
230e0     24 00 90 AD |  if_e	jmp	#LR__3190
230e4     0B 15 92 F7 | 	encod	arg02, arg03 wc
230e8     01 14 06 C1 |  if_b	add	arg02, #1
230ec     01 14 86 F1 | 	sub	arg02, #1
230f0     1F 12 06 F6 | 	mov	arg01, #31
230f4     0A 13 82 F1 | 	sub	arg01, arg02
230f8     09 17 62 F0 | 	shl	arg03, arg01
230fc     02 16 46 F0 | 	shr	arg03, #2
23100     00 12 06 F6 | 	mov	arg01, #0
23104     4C 09 B0 FD | 	call	#__system___float_Pack
23108                 | LR__3190
23108                 | __system___float_fromuns_ret
23108     2D 00 64 FD | 	ret
2310c                 | 
2310c                 | __system___float_add
2310c     0F 4A 05 F6 | 	mov	COUNT_, #15
23110     A8 00 A0 FD | 	call	#pushregs_
23114     09 1F 02 F6 | 	mov	local01, arg01
23118     0A 21 02 F6 | 	mov	local02, arg02
2311c     00 22 06 F6 | 	mov	local03, #0
23120     0F 25 02 F6 | 	mov	local04, local01
23124     12 27 02 F6 | 	mov	local05, local04
23128     16 26 46 F7 | 	zerox	local05, #22
2312c     12 29 02 F6 | 	mov	local06, local04
23130     01 28 66 F0 | 	shl	local06, #1
23134     18 28 46 F0 | 	shr	local06, #24
23138     1F 24 46 F0 | 	shr	local04, #31
2313c     10 13 02 F6 | 	mov	arg01, local02
23140     09 FB 01 F6 | 	mov	result1, arg01
23144     FD 2A 02 F6 | 	mov	local07, result1
23148     15 2D 02 F6 | 	mov	local08, local07
2314c     16 2C 46 F7 | 	zerox	local08, #22
23150     15 2F 02 F6 | 	mov	local09, local07
23154     01 2E 66 F0 | 	shl	local09, #1
23158     18 2E 46 F0 | 	shr	local09, #24
2315c     17 31 02 F6 | 	mov	local10, local09
23160     1F 2A 46 F0 | 	shr	local07, #31
23164     00 32 06 F6 | 	mov	local11, #0
23168     00 34 06 F6 | 	mov	local12, #0
2316c     18 29 12 F2 | 	cmp	local06, local10 wc
23170     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
23174     2C 00 90 1D |  if_a	jmp	#LR__3200
23178     16 27 12 32 |  if_ae	cmp	local05, local08 wc
2317c     24 00 90 3D |  if_ae	jmp	#LR__3200
23180     13 37 02 F6 | 	mov	local13, local05
23184     16 27 02 F6 | 	mov	local05, local08
23188     1B 2D 02 F6 | 	mov	local08, local13
2318c     14 37 02 F6 | 	mov	local13, local06
23190     18 29 02 F6 | 	mov	local06, local10
23194     1B 31 02 F6 | 	mov	local10, local13
23198     12 37 02 F6 | 	mov	local13, local04
2319c     15 25 02 F6 | 	mov	local04, local07
231a0     1B 2B 02 F6 | 	mov	local07, local13
231a4                 | LR__3200
231a4     FF 28 0E F2 | 	cmp	local06, #255 wz
231a8     70 01 90 AD |  if_e	jmp	#LR__3215
231ac     00 28 0E F2 | 	cmp	local06, #0 wz
231b0     AC 01 90 AD |  if_e	jmp	#LR__3217
231b4     17 26 26 F4 | 	bith	local05, #23
231b8                 | LR__3201
231b8     00 30 0E F2 | 	cmp	local10, #0 wz
231bc     F0 01 90 AD |  if_e	jmp	#LR__3221
231c0     17 2C 26 F4 | 	bith	local08, #23
231c4                 | LR__3202
231c4     7F 28 86 F1 | 	sub	local06, #127
231c8     7F 30 86 F1 | 	sub	local10, #127
231cc     14 39 02 F6 | 	mov	local14, local06
231d0     18 39 82 F1 | 	sub	local14, local10
231d4     97 14 48 FB | 	callpa	#(@LR__3204-@LR__3203)>>2,fcache_load_ptr_
231d8                 | LR__3203
231d8     20 38 56 F2 | 	cmps	local14, #32 wc
231dc     20 00 90 CD |  if_b	jmp	#LR__3205
231e0     16 2F 02 F6 | 	mov	local09, local08
231e4     00 32 0E F2 | 	cmp	local11, #0 wz
231e8     6F 32 62 FD | 	wrnz	local11
231ec     19 2F 42 F5 | 	or	local09, local11
231f0     17 33 02 F6 | 	mov	local11, local09
231f4     00 2C 06 F6 | 	mov	local08, #0
231f8     20 38 86 F1 | 	sub	local14, #32
231fc     D8 FF 9F FD | 	jmp	#LR__3203
23200                 | LR__3204
23200                 | LR__3205
23200     00 38 0E F2 | 	cmp	local14, #0 wz
23204     38 00 90 AD |  if_e	jmp	#LR__3206
23208     16 37 02 F6 | 	mov	local13, local08
2320c     20 30 06 F6 | 	mov	local10, #32
23210     1C 31 82 F1 | 	sub	local10, local14
23214     18 37 62 F0 | 	shl	local13, local10
23218     19 31 02 F6 | 	mov	local10, local11
2321c     20 2E 06 F6 | 	mov	local09, #32
23220     1C 2F 82 F1 | 	sub	local09, local14
23224     17 31 6A F0 | 	shl	local10, local09 wz
23228     1C 33 42 F0 | 	shr	local11, local14
2322c     1C 2D 42 F0 | 	shr	local08, local14
23230     1B 33 42 F5 | 	or	local11, local13
23234     00 3A 06 F6 | 	mov	local15, #0
23238     01 3A 06 56 |  if_ne	mov	local15, #1
2323c     1D 33 42 F5 | 	or	local11, local15
23240                 | LR__3206
23240     12 3B 02 F6 | 	mov	local15, local04
23244     15 3B 62 F5 | 	xor	local15, local07
23248     01 3A CE F7 | 	test	local15, #1 wz
2324c     18 00 90 AD |  if_e	jmp	#LR__3207
23250     16 2D 22 F6 | 	not	local08, local08
23254     19 33 22 F6 | 	not	local11, local11
23258     01 32 0E F1 | 	add	local11, #1 wz
2325c     00 3A 06 F6 | 	mov	local15, #0
23260     01 3A 06 A6 |  if_e	mov	local15, #1
23264     1D 2D 02 F1 | 	add	local08, local15
23268                 | LR__3207
23268     19 35 12 F1 | 	add	local12, local11 wc
2326c     16 27 22 F1 | 	addx	local05, local08
23270     00 26 56 F2 | 	cmps	local05, #0 wc
23274     1C 00 90 3D |  if_ae	jmp	#LR__3208
23278     01 24 66 F5 | 	xor	local04, #1
2327c     13 27 22 F6 | 	not	local05, local05
23280     1A 35 22 F6 | 	not	local12, local12
23284     01 34 0E F1 | 	add	local12, #1 wz
23288     00 3A 06 F6 | 	mov	local15, #0
2328c     01 3A 06 A6 |  if_e	mov	local15, #1
23290     1D 27 02 F1 | 	add	local05, local15
23294                 | LR__3208
23294     00 80 00 FF 
23298     00 26 16 F2 | 	cmp	local05, ##16777216 wc
2329c     28 00 90 CD |  if_b	jmp	#LR__3209
232a0     01 28 06 F1 | 	add	local06, #1
232a4     1A 39 02 F6 | 	mov	local14, local12
232a8     01 38 06 F5 | 	and	local14, #1
232ac     01 34 46 F0 | 	shr	local12, #1
232b0     13 3B 02 F6 | 	mov	local15, local05
232b4     1F 3A 66 F0 | 	shl	local15, #31
232b8     1D 35 42 F5 | 	or	local12, local15
232bc     1C 35 42 F5 | 	or	local12, local14
232c0     01 26 46 F0 | 	shr	local05, #1
232c4     3C 00 90 FD | 	jmp	#LR__3214
232c8                 | LR__3209
232c8     00 40 00 FF 
232cc     00 26 16 F2 | 	cmp	local05, ##8388608 wc
232d0     30 00 90 3D |  if_ae	jmp	#LR__3213
232d4     00 26 0E F2 | 	cmp	local05, #0 wz
232d8     00 34 0E A2 |  if_e	cmp	local12, #0 wz
232dc     08 24 46 A5 |  if_e	or	local04, #8
232e0     01 24 26 A5 |  if_e	andn	local04, #1
232e4     1C 00 90 AD |  if_e	jmp	#LR__3212
232e8                 | LR__3210
232e8     00 40 00 FF 
232ec     00 26 16 F2 | 	cmp	local05, ##8388608 wc
232f0     10 00 90 3D |  if_ae	jmp	#LR__3211
232f4     1A 35 12 F1 | 	add	local12, local12 wc
232f8     13 27 22 F1 | 	addx	local05, local05
232fc     01 28 86 F1 | 	sub	local06, #1
23300     E4 FF 9F FD | 	jmp	#LR__3210
23304                 | LR__3211
23304                 | LR__3212
23304                 | LR__3213
23304                 | LR__3214
23304     13 13 02 F6 | 	mov	arg01, local05
23308     1A 15 02 F6 | 	mov	arg02, local12
2330c     14 17 02 F6 | 	mov	arg03, local06
23310     12 19 02 F6 | 	mov	arg04, local04
23314     E4 34 B0 FD | 	call	#__system__pack_0606
23318     DC 00 90 FD | 	jmp	#LR__3225
2331c                 | LR__3215
2331c     FF 30 0E F2 | 	cmp	local10, #255 wz
23320     10 00 90 5D |  if_ne	jmp	#LR__3216
23324     12 2B 0A F2 | 	cmp	local07, local04 wz
23328     00 F8 3F 5F 
2332c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
23330     C4 00 90 5D |  if_ne	jmp	#LR__3225
23334                 | LR__3216
23334     00 26 0E F2 | 	cmp	local05, #0 wz
23338     00 F8 3F 5F 
2333c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
23340     B4 00 90 5D |  if_ne	jmp	#LR__3225
23344     1A 15 02 F6 | 	mov	arg02, local12
23348     14 17 02 F6 | 	mov	arg03, local06
2334c     12 19 02 F6 | 	mov	arg04, local04
23350     02 18 46 F5 | 	or	arg04, #2
23354     13 13 02 F6 | 	mov	arg01, local05
23358     A0 34 B0 FD | 	call	#__system__pack_0606
2335c     98 00 90 FD | 	jmp	#LR__3225
23360                 | LR__3217
23360     00 26 0E F2 | 	cmp	local05, #0 wz
23364     28 00 90 AD |  if_e	jmp	#LR__3220
23368     01 26 66 F0 | 	shl	local05, #1
2336c     97 0E 48 FB | 	callpa	#(@LR__3219-@LR__3218)>>2,fcache_load_ptr_
23370                 | LR__3218
23370     00 40 00 FF 
23374     00 26 16 F2 | 	cmp	local05, ##8388608 wc
23378     14 3B 02 C6 |  if_b	mov	local15, local06
2337c     01 3A 86 C1 |  if_b	sub	local15, #1
23380     1D 29 02 C6 |  if_b	mov	local06, local15
23384     01 26 66 C0 |  if_b	shl	local05, #1
23388     E4 FF 9F CD |  if_b	jmp	#LR__3218
2338c                 | LR__3219
2338c     28 FE 9F FD | 	jmp	#LR__3201
23390                 | LR__3220
23390     15 25 02 F5 | 	and	local04, local07
23394     12 19 02 F6 | 	mov	arg04, local04
23398     08 18 46 F5 | 	or	arg04, #8
2339c     00 12 06 F6 | 	mov	arg01, #0
233a0     00 14 06 F6 | 	mov	arg02, #0
233a4     00 16 06 F6 | 	mov	arg03, #0
233a8     50 34 B0 FD | 	call	#__system__pack_0606
233ac     48 00 90 FD | 	jmp	#LR__3225
233b0                 | LR__3221
233b0     00 2C 0E F2 | 	cmp	local08, #0 wz
233b4     28 00 90 AD |  if_e	jmp	#LR__3224
233b8     01 2C 66 F0 | 	shl	local08, #1
233bc     97 0E 48 FB | 	callpa	#(@LR__3223-@LR__3222)>>2,fcache_load_ptr_
233c0                 | LR__3222
233c0     00 40 00 FF 
233c4     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
233c8     18 3B 02 C6 |  if_b	mov	local15, local10
233cc     01 3A 86 C1 |  if_b	sub	local15, #1
233d0     1D 31 02 C6 |  if_b	mov	local10, local15
233d4     01 2C 66 C0 |  if_b	shl	local08, #1
233d8     E4 FF 9F CD |  if_b	jmp	#LR__3222
233dc                 | LR__3223
233dc     E4 FD 9F FD | 	jmp	#LR__3202
233e0                 | LR__3224
233e0     7F 28 86 F1 | 	sub	local06, #127
233e4     13 13 02 F6 | 	mov	arg01, local05
233e8     1A 15 02 F6 | 	mov	arg02, local12
233ec     14 17 02 F6 | 	mov	arg03, local06
233f0     12 19 02 F6 | 	mov	arg04, local04
233f4     04 34 B0 FD | 	call	#__system__pack_0606
233f8                 | LR__3225
233f8     A7 F0 03 F6 | 	mov	ptra, fp
233fc     B2 00 A0 FD | 	call	#popregs_
23400                 | __system___float_add_ret
23400     2D 00 64 FD | 	ret
23404                 | 
23404                 | __system___float_sqrt
23404     04 4A 05 F6 | 	mov	COUNT_, #4
23408     A8 00 A0 FD | 	call	#pushregs_
2340c     09 1F 02 F6 | 	mov	local01, arg01
23410     09 FB 01 F6 | 	mov	result1, arg01
23414     FD 20 02 F6 | 	mov	local02, result1
23418     10 23 02 F6 | 	mov	local03, local02
2341c     16 22 46 F7 | 	zerox	local03, #22
23420     10 25 02 F6 | 	mov	local04, local02
23424     01 24 66 F0 | 	shl	local04, #1
23428     18 24 4E F0 | 	shr	local04, #24 wz
2342c     1F 20 46 F0 | 	shr	local02, #31
23430     70 00 90 AD |  if_e	jmp	#LR__3231
23434     17 22 26 F4 | 	bith	local03, #23
23438                 | LR__3230
23438     00 20 0E F2 | 	cmp	local02, #0 wz
2343c     00 F8 3F 5F 
23440     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
23444     88 00 90 5D |  if_ne	jmp	#LR__3234
23448     FF 24 0E F2 | 	cmp	local04, #255 wz
2344c     0F FB 01 A6 |  if_e	mov	result1, local01
23450     7C 00 90 AD |  if_e	jmp	#LR__3234
23454     7F 24 86 F1 | 	sub	local04, #127
23458     01 24 CE F7 | 	test	local04, #1 wz
2345c     01 22 66 50 |  if_ne	shl	local03, #1
23460     05 22 66 F0 | 	shl	local03, #5
23464     11 01 38 FD | 	qsqrt	#0, local03
23468     01 24 86 51 |  if_ne	sub	local04, #1
2346c     12 25 52 F6 | 	abs	local04, local04 wc
23470     01 24 46 F0 | 	shr	local04, #1
23474     12 17 82 F6 | 	negc	arg03, local04
23478     10 19 02 F6 | 	mov	arg04, local02
2347c     18 12 62 FD | 	getqx	arg01
23480     09 15 02 F6 | 	mov	arg02, arg01
23484     19 14 66 F0 | 	shl	arg02, #25
23488     07 12 46 F0 | 	shr	arg01, #7
2348c     00 80 00 FF 
23490     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
23494     01 16 06 31 |  if_ae	add	arg03, #1
23498     01 12 46 30 |  if_ae	shr	arg01, #1
2349c     5C 33 B0 FD | 	call	#__system__pack_0606
234a0     2C 00 90 FD | 	jmp	#LR__3234
234a4                 | LR__3231
234a4     00 22 0E F2 | 	cmp	local03, #0 wz
234a8     0F FB 01 A6 |  if_e	mov	result1, local01
234ac     20 00 90 AD |  if_e	jmp	#LR__3234
234b0     01 22 66 F0 | 	shl	local03, #1
234b4     97 0A 48 FB | 	callpa	#(@LR__3233-@LR__3232)>>2,fcache_load_ptr_
234b8                 | LR__3232
234b8     00 40 00 FF 
234bc     00 22 16 F2 | 	cmp	local03, ##8388608 wc
234c0     01 24 86 C1 |  if_b	sub	local04, #1
234c4     01 22 66 C0 |  if_b	shl	local03, #1
234c8     EC FF 9F CD |  if_b	jmp	#LR__3232
234cc                 | LR__3233
234cc     68 FF 9F FD | 	jmp	#LR__3230
234d0                 | LR__3234
234d0     A7 F0 03 F6 | 	mov	ptra, fp
234d4     B2 00 A0 FD | 	call	#popregs_
234d8                 | __system___float_sqrt_ret
234d8     2D 00 64 FD | 	ret
234dc                 | 
234dc                 | __system___float_mul
234dc     0B 4A 05 F6 | 	mov	COUNT_, #11
234e0     A8 00 A0 FD | 	call	#pushregs_
234e4     09 1F 02 F6 | 	mov	local01, arg01
234e8     0A 21 02 F6 | 	mov	local02, arg02
234ec     0F 23 02 F6 | 	mov	local03, local01
234f0     11 25 02 F6 | 	mov	local04, local03
234f4     16 24 46 F7 | 	zerox	local04, #22
234f8     11 27 02 F6 | 	mov	local05, local03
234fc     01 26 66 F0 | 	shl	local05, #1
23500     18 26 46 F0 | 	shr	local05, #24
23504     1F 22 46 F0 | 	shr	local03, #31
23508     10 FB 01 F6 | 	mov	result1, local02
2350c     FD 28 02 F6 | 	mov	local06, result1
23510     14 2B 02 F6 | 	mov	local07, local06
23514     16 2A 46 F7 | 	zerox	local07, #22
23518     14 2D 02 F6 | 	mov	local08, local06
2351c     01 2C 66 F0 | 	shl	local08, #1
23520     18 2C 46 F0 | 	shr	local08, #24
23524     1F 28 46 F0 | 	shr	local06, #31
23528     14 23 62 F5 | 	xor	local03, local06
2352c     FF 26 0E F2 | 	cmp	local05, #255 wz
23530     90 00 90 AD |  if_e	jmp	#LR__3243
23534     FF 2C 0E F2 | 	cmp	local08, #255 wz
23538     D8 00 90 AD |  if_e	jmp	#LR__3245
2353c     00 26 0E F2 | 	cmp	local05, #0 wz
23540     0C 01 90 AD |  if_e	jmp	#LR__3246
23544     17 24 26 F4 | 	bith	local04, #23
23548                 | LR__3240
23548     00 2C 0E F2 | 	cmp	local08, #0 wz
2354c     44 01 90 AD |  if_e	jmp	#LR__3250
23550     17 2A 26 F4 | 	bith	local07, #23
23554                 | LR__3241
23554     12 21 02 F6 | 	mov	local02, local04
23558     04 20 66 F0 | 	shl	local02, #4
2355c     15 29 02 F6 | 	mov	local06, local07
23560     05 28 66 F0 | 	shl	local06, #5
23564     14 21 02 FD | 	qmul	local02, local06
23568     16 27 02 F1 | 	add	local05, local08
2356c     FE 26 86 F1 | 	sub	local05, #254
23570     13 2F 02 F6 | 	mov	local09, local05
23574     04 24 66 F0 | 	shl	local04, #4
23578     05 2A 66 F0 | 	shl	local07, #5
2357c     18 30 62 FD | 	getqx	local10
23580     15 25 02 FD | 	qmul	local04, local07
23584     19 32 62 FD | 	getqy	local11
23588     00 80 00 FF 
2358c     00 32 16 F2 | 	cmp	local11, ##16777216 wc
23590     18 00 90 CD |  if_b	jmp	#LR__3242
23594     01 2E 06 F1 | 	add	local09, #1
23598     01 30 46 F0 | 	shr	local10, #1
2359c     19 2D 02 F6 | 	mov	local08, local11
235a0     1F 2C 66 F0 | 	shl	local08, #31
235a4     16 31 42 F5 | 	or	local10, local08
235a8     01 32 46 F0 | 	shr	local11, #1
235ac                 | LR__3242
235ac     19 13 02 F6 | 	mov	arg01, local11
235b0     18 15 02 F6 | 	mov	arg02, local10
235b4     17 17 02 F6 | 	mov	arg03, local09
235b8     11 19 02 F6 | 	mov	arg04, local03
235bc     3C 32 B0 FD | 	call	#__system__pack_0606
235c0     10 01 90 FD | 	jmp	#LR__3254
235c4                 | LR__3243
235c4     00 24 0E F2 | 	cmp	local04, #0 wz
235c8     0F FB 01 56 |  if_ne	mov	result1, local01
235cc     04 01 90 5D |  if_ne	jmp	#LR__3254
235d0     FF 2C 56 F2 | 	cmps	local08, #255 wc
235d4     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
235d8     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
235dc     18 00 90 4D |  if_c_and_nz	jmp	#LR__3244
235e0     00 F8 3F CF 
235e4     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
235e8     E8 00 90 CD |  if_b	jmp	#LR__3254
235ec     00 2A 0E F2 | 	cmp	local07, #0 wz
235f0     10 FB 01 56 |  if_ne	mov	result1, local02
235f4     DC 00 90 5D |  if_ne	jmp	#LR__3254
235f8                 | LR__3244
235f8     02 22 46 F5 | 	or	local03, #2
235fc     00 12 06 F6 | 	mov	arg01, #0
23600     00 14 06 F6 | 	mov	arg02, #0
23604     13 17 02 F6 | 	mov	arg03, local05
23608     11 19 02 F6 | 	mov	arg04, local03
2360c     EC 31 B0 FD | 	call	#__system__pack_0606
23610     C0 00 90 FD | 	jmp	#LR__3254
23614                 | LR__3245
23614     00 26 0E F2 | 	cmp	local05, #0 wz
23618     00 24 0E A2 |  if_e	cmp	local04, #0 wz
2361c     00 F8 3F AF 
23620     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
23624     AC 00 90 AD |  if_e	jmp	#LR__3254
23628     00 2A 0E F2 | 	cmp	local07, #0 wz
2362c     10 FB 01 56 |  if_ne	mov	result1, local02
23630     A0 00 90 5D |  if_ne	jmp	#LR__3254
23634     16 17 02 F6 | 	mov	arg03, local08
23638     11 19 02 F6 | 	mov	arg04, local03
2363c     02 18 46 F5 | 	or	arg04, #2
23640     00 12 06 F6 | 	mov	arg01, #0
23644     00 14 06 F6 | 	mov	arg02, #0
23648     B0 31 B0 FD | 	call	#__system__pack_0606
2364c     84 00 90 FD | 	jmp	#LR__3254
23650                 | LR__3246
23650     00 24 0E F2 | 	cmp	local04, #0 wz
23654     20 00 90 AD |  if_e	jmp	#LR__3249
23658     01 24 66 F0 | 	shl	local04, #1
2365c     97 0A 48 FB | 	callpa	#(@LR__3248-@LR__3247)>>2,fcache_load_ptr_
23660                 | LR__3247
23660     00 40 00 FF 
23664     00 24 16 F2 | 	cmp	local04, ##8388608 wc
23668     01 26 86 C1 |  if_b	sub	local05, #1
2366c     01 24 66 C0 |  if_b	shl	local04, #1
23670     EC FF 9F CD |  if_b	jmp	#LR__3247
23674                 | LR__3248
23674     D0 FE 9F FD | 	jmp	#LR__3240
23678                 | LR__3249
23678     08 22 46 F5 | 	or	local03, #8
2367c     00 12 06 F6 | 	mov	arg01, #0
23680     00 14 06 F6 | 	mov	arg02, #0
23684     00 16 06 F6 | 	mov	arg03, #0
23688     11 19 02 F6 | 	mov	arg04, local03
2368c     6C 31 B0 FD | 	call	#__system__pack_0606
23690     40 00 90 FD | 	jmp	#LR__3254
23694                 | LR__3250
23694     00 2A 0E F2 | 	cmp	local07, #0 wz
23698     20 00 90 AD |  if_e	jmp	#LR__3253
2369c     01 2A 66 F0 | 	shl	local07, #1
236a0     97 0A 48 FB | 	callpa	#(@LR__3252-@LR__3251)>>2,fcache_load_ptr_
236a4                 | LR__3251
236a4     00 40 00 FF 
236a8     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
236ac     01 2C 86 C1 |  if_b	sub	local08, #1
236b0     01 2A 66 C0 |  if_b	shl	local07, #1
236b4     EC FF 9F CD |  if_b	jmp	#LR__3251
236b8                 | LR__3252
236b8     98 FE 9F FD | 	jmp	#LR__3241
236bc                 | LR__3253
236bc     08 22 46 F5 | 	or	local03, #8
236c0     00 12 06 F6 | 	mov	arg01, #0
236c4     00 14 06 F6 | 	mov	arg02, #0
236c8     00 16 06 F6 | 	mov	arg03, #0
236cc     11 19 02 F6 | 	mov	arg04, local03
236d0     28 31 B0 FD | 	call	#__system__pack_0606
236d4                 | LR__3254
236d4     A7 F0 03 F6 | 	mov	ptra, fp
236d8     B2 00 A0 FD | 	call	#popregs_
236dc                 | __system___float_mul_ret
236dc     2D 00 64 FD | 	ret
236e0                 | 
236e0                 | __system___float_div
236e0     0E 4A 05 F6 | 	mov	COUNT_, #14
236e4     A8 00 A0 FD | 	call	#pushregs_
236e8     09 23 02 F6 | 	mov	local03, arg01
236ec     0A 25 02 F6 | 	mov	local04, arg02
236f0     11 27 02 F6 | 	mov	local05, local03
236f4     13 29 02 F6 | 	mov	local06, local05
236f8     16 28 46 F7 | 	zerox	local06, #22
236fc     13 2B 02 F6 | 	mov	local07, local05
23700     01 2A 66 F0 | 	shl	local07, #1
23704     18 2A 46 F0 | 	shr	local07, #24
23708     1F 26 46 F0 | 	shr	local05, #31
2370c     12 FB 01 F6 | 	mov	result1, local04
23710     FD 2C 02 F6 | 	mov	local08, result1
23714     16 2F 02 F6 | 	mov	local09, local08
23718     16 2E 46 F7 | 	zerox	local09, #22
2371c     16 31 02 F6 | 	mov	local10, local08
23720     01 30 66 F0 | 	shl	local10, #1
23724     18 30 46 F0 | 	shr	local10, #24
23728     1F 2C 46 F0 | 	shr	local08, #31
2372c     16 27 62 F5 | 	xor	local05, local08
23730     FF 2A 0E F2 | 	cmp	local07, #255 wz
23734     D4 00 90 AD |  if_e	jmp	#LR__3265
23738     FF 30 0E F2 | 	cmp	local10, #255 wz
2373c     04 01 90 AD |  if_e	jmp	#LR__3266
23740     00 2A 0E F2 | 	cmp	local07, #0 wz
23744     24 01 90 AD |  if_e	jmp	#LR__3267
23748     17 28 26 F4 | 	bith	local06, #23
2374c                 | LR__3260
2374c     00 30 0E F2 | 	cmp	local10, #0 wz
23750     70 01 90 AD |  if_e	jmp	#LR__3271
23754     17 2E 26 F4 | 	bith	local09, #23
23758                 | LR__3261
23758     18 2B 82 F1 | 	sub	local07, local10
2375c     15 33 02 F6 | 	mov	local11, local07
23760     14 13 02 F6 | 	mov	arg01, local06
23764     02 12 46 F0 | 	shr	arg01, #2
23768     1E 28 66 F0 | 	shl	local06, #30
2376c     14 15 02 F6 | 	mov	arg02, local06
23770     17 17 02 F6 | 	mov	arg03, local09
23774     28 12 62 FD | 	setq	arg01
23778     0B 15 12 FD | 	qdiv	arg02, arg03
2377c     00 34 06 F6 | 	mov	local12, #0
23780     18 1E 62 FD | 	getqx	local01
23784     19 FC 61 FD | 	getqy	result2
23788     FE 20 02 F6 | 	mov	local02, result2
2378c     0F 37 02 F6 | 	mov	local13, local01
23790     00 20 4E F2 | 	cmps	local02, #0 wz
23794     1B 39 02 F6 | 	mov	local14, local13
23798     19 38 66 F0 | 	shl	local14, #25
2379c     01 34 06 56 |  if_ne	mov	local12, #1
237a0     1A 39 42 F5 | 	or	local14, local12
237a4     07 36 46 F0 | 	shr	local13, #7
237a8     00 80 00 FF 
237ac     00 36 16 F2 | 	cmp	local13, ##16777216 wc
237b0     1C 00 90 CD |  if_b	jmp	#LR__3262
237b4     01 32 06 F1 | 	add	local11, #1
237b8     01 38 46 F0 | 	shr	local14, #1
237bc     1B 35 02 F6 | 	mov	local12, local13
237c0     1F 34 66 F0 | 	shl	local12, #31
237c4     1A 39 42 F5 | 	or	local14, local12
237c8     01 36 46 F0 | 	shr	local13, #1
237cc     24 00 90 FD | 	jmp	#LR__3264
237d0                 | LR__3262
237d0     00 40 00 FF 
237d4     00 36 16 F2 | 	cmp	local13, ##8388608 wc
237d8     18 00 90 3D |  if_ae	jmp	#LR__3263
237dc     01 32 86 F1 | 	sub	local11, #1
237e0     01 36 66 F0 | 	shl	local13, #1
237e4     1C 35 02 F6 | 	mov	local12, local14
237e8     1F 34 46 F0 | 	shr	local12, #31
237ec     1A 37 42 F5 | 	or	local13, local12
237f0     01 38 66 F0 | 	shl	local14, #1
237f4                 | LR__3263
237f4                 | LR__3264
237f4     1B 13 02 F6 | 	mov	arg01, local13
237f8     1C 15 02 F6 | 	mov	arg02, local14
237fc     19 17 02 F6 | 	mov	arg03, local11
23800     13 19 02 F6 | 	mov	arg04, local05
23804     F4 2F B0 FD | 	call	#__system__pack_0606
23808     F8 00 90 FD | 	jmp	#LR__3275
2380c                 | LR__3265
2380c     00 28 0E F2 | 	cmp	local06, #0 wz
23810     11 FB 01 56 |  if_ne	mov	result1, local03
23814     EC 00 90 5D |  if_ne	jmp	#LR__3275
23818     FF 30 0E F2 | 	cmp	local10, #255 wz
2381c     00 F8 3F AF 
23820     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
23824     DC 00 90 AD |  if_e	jmp	#LR__3275
23828     02 26 46 F5 | 	or	local05, #2
2382c     00 12 06 F6 | 	mov	arg01, #0
23830     00 14 06 F6 | 	mov	arg02, #0
23834     15 17 02 F6 | 	mov	arg03, local07
23838     13 19 02 F6 | 	mov	arg04, local05
2383c     BC 2F B0 FD | 	call	#__system__pack_0606
23840     C0 00 90 FD | 	jmp	#LR__3275
23844                 | LR__3266
23844     00 2E 0E F2 | 	cmp	local09, #0 wz
23848     12 FB 01 56 |  if_ne	mov	result1, local04
2384c     B4 00 90 5D |  if_ne	jmp	#LR__3275
23850     13 19 02 F6 | 	mov	arg04, local05
23854     08 18 46 F5 | 	or	arg04, #8
23858     00 12 06 F6 | 	mov	arg01, #0
2385c     00 14 06 F6 | 	mov	arg02, #0
23860     00 16 06 F6 | 	mov	arg03, #0
23864     94 2F B0 FD | 	call	#__system__pack_0606
23868     98 00 90 FD | 	jmp	#LR__3275
2386c                 | LR__3267
2386c     00 28 0E F2 | 	cmp	local06, #0 wz
23870     20 00 90 AD |  if_e	jmp	#LR__3270
23874     01 28 66 F0 | 	shl	local06, #1
23878     97 0A 48 FB | 	callpa	#(@LR__3269-@LR__3268)>>2,fcache_load_ptr_
2387c                 | LR__3268
2387c     00 40 00 FF 
23880     00 28 16 F2 | 	cmp	local06, ##8388608 wc
23884     01 2A 86 C1 |  if_b	sub	local07, #1
23888     01 28 66 C0 |  if_b	shl	local06, #1
2388c     EC FF 9F CD |  if_b	jmp	#LR__3268
23890                 | LR__3269
23890     B8 FE 9F FD | 	jmp	#LR__3260
23894                 | LR__3270
23894     00 30 0E F2 | 	cmp	local10, #0 wz
23898     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
2389c     00 F8 3F AF 
238a0     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
238a4     5C 00 90 AD |  if_e	jmp	#LR__3275
238a8     13 19 02 F6 | 	mov	arg04, local05
238ac     08 18 46 F5 | 	or	arg04, #8
238b0     00 12 06 F6 | 	mov	arg01, #0
238b4     00 14 06 F6 | 	mov	arg02, #0
238b8     00 16 06 F6 | 	mov	arg03, #0
238bc     3C 2F B0 FD | 	call	#__system__pack_0606
238c0     40 00 90 FD | 	jmp	#LR__3275
238c4                 | LR__3271
238c4     00 2E 0E F2 | 	cmp	local09, #0 wz
238c8     20 00 90 AD |  if_e	jmp	#LR__3274
238cc     01 2E 66 F0 | 	shl	local09, #1
238d0     97 0A 48 FB | 	callpa	#(@LR__3273-@LR__3272)>>2,fcache_load_ptr_
238d4                 | LR__3272
238d4     00 40 00 FF 
238d8     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
238dc     01 30 86 C1 |  if_b	sub	local10, #1
238e0     01 2E 66 C0 |  if_b	shl	local09, #1
238e4     EC FF 9F CD |  if_b	jmp	#LR__3272
238e8                 | LR__3273
238e8     6C FE 9F FD | 	jmp	#LR__3261
238ec                 | LR__3274
238ec     02 26 46 F5 | 	or	local05, #2
238f0     00 12 06 F6 | 	mov	arg01, #0
238f4     00 14 06 F6 | 	mov	arg02, #0
238f8     00 16 06 F6 | 	mov	arg03, #0
238fc     13 19 02 F6 | 	mov	arg04, local05
23900     F8 2E B0 FD | 	call	#__system__pack_0606
23904                 | LR__3275
23904     A7 F0 03 F6 | 	mov	ptra, fp
23908     B2 00 A0 FD | 	call	#popregs_
2390c                 | __system___float_div_ret
2390c     2D 00 64 FD | 	ret
23910                 | 
23910                 | __system___float_cmp
23910     00 C0 3F FF 
23914     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
23918     00 C0 3F CF 
2391c     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
23920     0B FB 01 36 |  if_ae	mov	result1, arg03
23924     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
23928     00 C0 7F FF 
2392c     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
23930     00 C0 7F CF 
23934     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
23938     0B FB 01 36 |  if_ae	mov	result1, arg03
2393c     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
23940     00 12 56 F2 | 	cmps	arg01, #0 wc
23944     2C 00 90 3D |  if_ae	jmp	#LR__3280
23948     00 14 56 F2 | 	cmps	arg02, #0 wc
2394c     0A FB 01 C6 |  if_b	mov	result1, arg02
23950     09 FB 81 C1 |  if_b	sub	result1, arg01
23954     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
23958     00 14 0E F2 | 	cmp	arg02, #0 wz
2395c     00 00 40 AF 
23960     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
23964     00 FA 05 A6 |  if_e	mov	result1, #0
23968     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2396c     01 FA 65 F6 | 	neg	result1, #1
23970     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
23974                 | LR__3280
23974     00 14 56 F2 | 	cmps	arg02, #0 wc
23978     1C 00 90 3D |  if_ae	jmp	#LR__3281
2397c     00 12 0E F2 | 	cmp	arg01, #0 wz
23980     00 00 40 AF 
23984     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
23988     00 FA 05 A6 |  if_e	mov	result1, #0
2398c     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
23990     01 FA 05 F6 | 	mov	result1, #1
23994     08 00 90 FD | 	jmp	#__system___float_cmp_ret
23998                 | LR__3281
23998     0A 13 82 F1 | 	sub	arg01, arg02
2399c     09 FB 01 F6 | 	mov	result1, arg01
239a0                 | __system___float_cmp_ret
239a0     2D 00 64 FD | 	ret
239a4                 | 
239a4                 | __system___float_tointeger
239a4     02 4A 05 F6 | 	mov	COUNT_, #2
239a8     A8 00 A0 FD | 	call	#pushregs_
239ac     50 00 B0 FD | 	call	#__system___float_Unpack
239b0     FF FF 7F FF 
239b4     FF FD 55 F2 | 	cmps	result2, ##-1 wc
239b8     34 00 90 CD |  if_b	jmp	#LR__3290
239bc     1F FC 55 F2 | 	cmps	result2, #31 wc
239c0     2C 00 90 3D |  if_ae	jmp	#LR__3290
239c4     02 FE 65 F0 | 	shl	result3, #2
239c8     1E 1E 06 F6 | 	mov	local01, #30
239cc     FE 1E 82 F1 | 	sub	local01, result2
239d0     0F FF 41 F0 | 	shr	result3, local01
239d4     FF 20 02 F6 | 	mov	local02, result3
239d8     0A 21 02 F1 | 	add	local02, arg02
239dc     01 20 46 F0 | 	shr	local02, #1
239e0     00 FA 0D F2 | 	cmp	result1, #0 wz
239e4     10 21 62 56 |  if_ne	neg	local02, local02
239e8     10 FB 01 F6 | 	mov	result1, local02
239ec     04 00 90 FD | 	jmp	#LR__3291
239f0                 | LR__3290
239f0     00 FA 05 F6 | 	mov	result1, #0
239f4                 | LR__3291
239f4     A7 F0 03 F6 | 	mov	ptra, fp
239f8     B2 00 A0 FD | 	call	#popregs_
239fc                 | __system___float_tointeger_ret
239fc     2D 00 64 FD | 	ret
23a00                 | 
23a00                 | __system___float_Unpack
23a00     09 01 02 F6 | 	mov	_var01, arg01
23a04     1F 00 46 F0 | 	shr	_var01, #31
23a08     09 03 02 F6 | 	mov	_var02, arg01
23a0c     01 02 66 F0 | 	shl	_var02, #1
23a10     18 02 4E F0 | 	shr	_var02, #24 wz
23a14     17 13 06 F4 | 	bitl	arg01, #279
23a18     06 12 66 50 |  if_ne	shl	arg01, #6
23a1c     1D 12 26 54 |  if_ne	bith	arg01, #29
23a20     1C 00 90 5D |  if_ne	jmp	#LR__3300
23a24     09 05 92 F7 | 	encod	_var03, arg01 wc
23a28     01 04 06 C1 |  if_b	add	_var03, #1
23a2c     17 04 86 F1 | 	sub	_var03, #23
23a30     02 03 02 F6 | 	mov	_var02, _var03
23a34     07 FC 05 F6 | 	mov	result2, #7
23a38     02 FD 81 F1 | 	sub	result2, _var03
23a3c     FE 12 62 F0 | 	shl	arg01, result2
23a40                 | LR__3300
23a40     7F 02 86 F1 | 	sub	_var02, #127
23a44     09 FF 01 F6 | 	mov	result3, arg01
23a48     00 FB 01 F6 | 	mov	result1, _var01
23a4c     01 FD 01 F6 | 	mov	result2, _var02
23a50                 | __system___float_Unpack_ret
23a50     2D 00 64 FD | 	ret
23a54                 | 
23a54                 | __system___float_Pack
23a54     00 00 06 F6 | 	mov	_var01, #0
23a58     00 16 0E F2 | 	cmp	arg03, #0 wz
23a5c     8C 00 90 AD |  if_e	jmp	#LR__3311
23a60     0B 03 92 F7 | 	encod	_var02, arg03 wc
23a64     01 02 06 C1 |  if_b	add	_var02, #1
23a68     21 00 06 F6 | 	mov	_var01, #33
23a6c     01 01 82 F1 | 	sub	_var01, _var02
23a70     00 17 62 F0 | 	shl	arg03, _var01
23a74     03 02 06 F6 | 	mov	_var02, #3
23a78     00 03 82 F1 | 	sub	_var02, _var01
23a7c     01 15 02 F1 | 	add	arg02, _var02
23a80     0A 05 02 F6 | 	mov	_var03, arg02
23a84     00 17 06 F1 | 	add	arg03, #256
23a88     0B 03 02 F6 | 	mov	_var02, arg03
23a8c     FF 02 2E F5 | 	andn	_var02, #255 wz
23a90     01 04 06 A1 |  if_e	add	_var03, #1
23a94     7F 04 06 F1 | 	add	_var03, #127
23a98     FF FF 7F FF 
23a9c     E9 05 46 F3 | 	fges	_var03, ##-23
23aa0     FF 04 66 F3 | 	fles	_var03, #255
23aa4     01 04 56 F2 | 	cmps	_var03, #1 wc
23aa8     1C 00 90 3D |  if_ae	jmp	#LR__3310
23aac     01 16 46 F0 | 	shr	arg03, #1
23ab0     1F 02 C6 F9 | 	decod	_var02, #31
23ab4     0B 03 02 F1 | 	add	_var02, arg03
23ab8     02 05 62 F6 | 	neg	_var03, _var03
23abc     02 03 42 F0 | 	shr	_var02, _var03
23ac0     01 17 02 F6 | 	mov	arg03, _var02
23ac4     00 04 06 F6 | 	mov	_var03, #0
23ac8                 | LR__3310
23ac8     09 FB 01 F6 | 	mov	result1, arg01
23acc     1F FA 65 F0 | 	shl	result1, #31
23ad0     02 03 02 F6 | 	mov	_var02, _var03
23ad4     17 02 66 F0 | 	shl	_var02, #23
23ad8     01 FB 41 F5 | 	or	result1, _var02
23adc     0B 07 02 F6 | 	mov	_var04, arg03
23ae0     09 06 46 F0 | 	shr	_var04, #9
23ae4     03 FB 41 F5 | 	or	result1, _var04
23ae8     04 00 90 FD | 	jmp	#__system___float_Pack_ret
23aec                 | LR__3311
23aec     00 FB 01 F6 | 	mov	result1, _var01
23af0                 | __system___float_Pack_ret
23af0     2D 00 64 FD | 	ret
23af4                 | 
23af4                 | __system___basic_print_float
23af4     05 4A 05 F6 | 	mov	COUNT_, #5
23af8     A8 00 A0 FD | 	call	#pushregs_
23afc     09 1F 02 F6 | 	mov	local01, arg01
23b00     0A 21 02 F6 | 	mov	local02, arg02
23b04     0B 23 0A F6 | 	mov	local03, arg03 wz
23b08     0C 25 02 F6 | 	mov	local04, arg04
23b0c     14 00 90 5D |  if_ne	jmp	#LR__3320
23b10     23 24 0E F2 | 	cmp	local04, #35 wz
23b14     80 02 10 AF 
23b18     00 26 06 A6 |  if_e	mov	local05, ##537198592
23b1c     1D 26 C6 59 |  if_ne	decod	local05, #29
23b20     13 23 02 F6 | 	mov	local03, local05
23b24                 | LR__3320
23b24     0F 13 02 F6 | 	mov	arg01, local01
23b28     B4 27 B0 FD | 	call	#__system___gettxfunc
23b2c     FD 26 0A F6 | 	mov	local05, result1 wz
23b30     00 FA 05 A6 |  if_e	mov	result1, #0
23b34     13 13 02 56 |  if_ne	mov	arg01, local05
23b38     11 15 02 56 |  if_ne	mov	arg02, local03
23b3c     10 17 02 56 |  if_ne	mov	arg03, local02
23b40     12 19 02 56 |  if_ne	mov	arg04, local04
23b44     30 DF BF 5D |  if_ne	call	#__system___fmtfloat
23b48     A7 F0 03 F6 | 	mov	ptra, fp
23b4c     B2 00 A0 FD | 	call	#popregs_
23b50                 | __system___basic_print_float_ret
23b50     2D 00 64 FD | 	ret
23b54                 | 
23b54                 | __system____builtin_atoi
23b54     07 4A 05 F6 | 	mov	COUNT_, #7
23b58     A8 00 A0 FD | 	call	#pushregs_
23b5c                 | __system____builtin_atoi_enter
23b5c     09 1F 02 F6 | 	mov	local01, arg01
23b60     0A 21 02 F6 | 	mov	local02, arg02
23b64     00 22 06 F6 | 	mov	local03, #0
23b68     00 24 06 F6 | 	mov	local04, #0
23b6c     00 26 06 F6 | 	mov	local05, #0
23b70     97 08 48 FB | 	callpa	#(@LR__3331-@LR__3330)>>2,fcache_load_ptr_
23b74                 | LR__3330
23b74     0F 29 C2 FA | 	rdbyte	local06, local01
23b78     20 28 0E F2 | 	cmp	local06, #32 wz
23b7c     01 1E 06 A1 |  if_e	add	local01, #1
23b80     F0 FF 9F AD |  if_e	jmp	#LR__3330
23b84                 | LR__3331
23b84     0F 2B C2 FA | 	rdbyte	local07, local01
23b88                 | LR__3332
23b88     2D 2A 0E F2 | 	cmp	local07, #45 wz
23b8c     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
23b90     18 00 90 5D |  if_ne	jmp	#LR__3333
23b94     01 1E 06 F1 | 	add	local01, #1
23b98     2D 2A 0E F2 | 	cmp	local07, #45 wz
23b9c     01 28 06 A6 |  if_e	mov	local06, #1
23ba0     14 27 C2 A2 |  if_e	subr	local05, local06
23ba4     0F 2B C2 FA | 	rdbyte	local07, local01
23ba8     DC FF 9F FD | 	jmp	#LR__3332
23bac                 | LR__3333
23bac     97 48 48 FB | 	callpa	#(@LR__3341-@LR__3334)>>2,fcache_load_ptr_
23bb0                 | LR__3334
23bb0                 | LR__3335
23bb0     0F 2B C2 FA | 	rdbyte	local07, local01
23bb4     5F 2A 0E F2 | 	cmp	local07, #95 wz
23bb8     01 1E 06 F1 | 	add	local01, #1
23bbc     F0 FF 9F AD |  if_e	jmp	#LR__3335
23bc0     30 2A 0E F2 | 	cmp	local07, #48 wz
23bc4     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
23bc8     00 24 06 A6 |  if_e	mov	local04, #0
23bcc     60 00 90 AD |  if_e	jmp	#LR__3340
23bd0     31 2A 56 F2 | 	cmps	local07, #49 wc
23bd4     18 00 90 CD |  if_b	jmp	#LR__3336
23bd8     3A 2A 56 F2 | 	cmps	local07, #58 wc
23bdc     15 25 02 C6 |  if_b	mov	local04, local07
23be0     30 24 86 C1 |  if_b	sub	local04, #48
23be4     00 20 0E C2 |  if_b	cmp	local02, #0 wz
23be8     0A 20 06 86 |  if_c_and_z	mov	local02, #10
23bec     40 00 90 CD |  if_b	jmp	#LR__3339
23bf0                 | LR__3336
23bf0     0B 20 56 F2 | 	cmps	local02, #11 wc
23bf4     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
23bf8     14 00 90 CD |  if_b	jmp	#LR__3337
23bfc     67 2A 56 F2 | 	cmps	local07, #103 wc
23c00     61 2A 86 C1 |  if_b	sub	local07, #97
23c04     0A 24 06 C6 |  if_b	mov	local04, #10
23c08     15 25 02 C1 |  if_b	add	local04, local07
23c0c     20 00 90 CD |  if_b	jmp	#LR__3338
23c10                 | LR__3337
23c10     0B 20 56 F2 | 	cmps	local02, #11 wc
23c14     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
23c18     24 00 90 CD |  if_b	jmp	#LR__3342
23c1c     47 2A 56 F2 | 	cmps	local07, #71 wc
23c20     41 2A 86 C1 |  if_b	sub	local07, #65
23c24     0A 24 06 C6 |  if_b	mov	local04, #10
23c28     15 25 02 C1 |  if_b	add	local04, local07
23c2c     10 00 90 3D |  if_ae	jmp	#LR__3342
23c30                 | LR__3338
23c30                 | LR__3339
23c30                 | LR__3340
23c30     11 21 02 FD | 	qmul	local02, local03
23c34     18 22 62 FD | 	getqx	local03
23c38     12 23 02 F1 | 	add	local03, local04
23c3c     70 FF 9F FD | 	jmp	#LR__3334
23c40                 | LR__3341
23c40                 | LR__3342
23c40     00 20 0E F2 | 	cmp	local02, #0 wz
23c44     64 00 90 5D |  if_ne	jmp	#LR__3348
23c48     78 2A 0E F2 | 	cmp	local07, #120 wz
23c4c     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
23c50     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
23c54     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
23c58     14 00 90 5D |  if_ne	jmp	#LR__3343
23c5c     0F 13 02 F6 | 	mov	arg01, local01
23c60     10 14 06 F6 | 	mov	arg02, #16
23c64     EC FE BF FD | 	call	#__system____builtin_atoi
23c68     FD 22 02 F6 | 	mov	local03, result1
23c6c     3C 00 90 FD | 	jmp	#LR__3347
23c70                 | LR__3343
23c70     62 2A 0E F2 | 	cmp	local07, #98 wz
23c74     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
23c78     14 00 90 5D |  if_ne	jmp	#LR__3344
23c7c     0F 13 02 F6 | 	mov	arg01, local01
23c80     02 14 06 F6 | 	mov	arg02, #2
23c84     CC FE BF FD | 	call	#__system____builtin_atoi
23c88     FD 22 02 F6 | 	mov	local03, result1
23c8c     1C 00 90 FD | 	jmp	#LR__3346
23c90                 | LR__3344
23c90     6F 2A 0E F2 | 	cmp	local07, #111 wz
23c94     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
23c98     10 00 90 5D |  if_ne	jmp	#LR__3345
23c9c     0F 13 02 F6 | 	mov	arg01, local01
23ca0     08 14 06 F6 | 	mov	arg02, #8
23ca4     AC FE BF FD | 	call	#__system____builtin_atoi
23ca8     FD 22 02 F6 | 	mov	local03, result1
23cac                 | LR__3345
23cac                 | LR__3346
23cac                 | LR__3347
23cac                 | LR__3348
23cac     00 26 0E F2 | 	cmp	local05, #0 wz
23cb0     11 23 62 56 |  if_ne	neg	local03, local03
23cb4     11 FB 01 F6 | 	mov	result1, local03
23cb8     A7 F0 03 F6 | 	mov	ptra, fp
23cbc     B2 00 A0 FD | 	call	#popregs_
23cc0                 | __system____builtin_atoi_ret
23cc0     2D 00 64 FD | 	ret
23cc4                 | 
23cc4                 | __system____builtin_atof
23cc4     07 4A 05 F6 | 	mov	COUNT_, #7
23cc8     A8 00 A0 FD | 	call	#pushregs_
23ccc     09 1F 02 F6 | 	mov	local01, arg01
23cd0     00 20 06 F6 | 	mov	local02, #0
23cd4     00 22 06 F6 | 	mov	local03, #0
23cd8     00 24 06 F6 | 	mov	local04, #0
23cdc     00 26 06 F6 | 	mov	local05, #0
23ce0     97 08 48 FB | 	callpa	#(@LR__3351-@LR__3350)>>2,fcache_load_ptr_
23ce4                 | LR__3350
23ce4     0F 17 C2 FA | 	rdbyte	arg03, local01
23ce8     20 16 0E F2 | 	cmp	arg03, #32 wz
23cec     01 1E 06 A1 |  if_e	add	local01, #1
23cf0     F0 FF 9F AD |  if_e	jmp	#LR__3350
23cf4                 | LR__3351
23cf4     0F 29 C2 FA | 	rdbyte	local06, local01
23cf8                 | LR__3352
23cf8     2B 28 0E F2 | 	cmp	local06, #43 wz
23cfc     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
23d00     14 00 90 5D |  if_ne	jmp	#LR__3353
23d04     2D 28 0E F2 | 	cmp	local06, #45 wz
23d08     1F 24 E6 A4 |  if_e	bitnot	local04, #31
23d0c     01 1E 06 F1 | 	add	local01, #1
23d10     0F 29 C2 FA | 	rdbyte	local06, local01
23d14     E0 FF 9F FD | 	jmp	#LR__3352
23d18                 | LR__3353
23d18                 | LR__3354
23d18     97 08 48 FB | 	callpa	#(@LR__3356-@LR__3355)>>2,fcache_load_ptr_
23d1c                 | LR__3355
23d1c     0F 29 C2 FA | 	rdbyte	local06, local01
23d20     5F 28 0E F2 | 	cmp	local06, #95 wz
23d24     01 1E 06 F1 | 	add	local01, #1
23d28     F0 FF 9F AD |  if_e	jmp	#LR__3355
23d2c                 | LR__3356
23d2c     00 28 0E F2 | 	cmp	local06, #0 wz
23d30     5C 00 90 AD |  if_e	jmp	#LR__3358
23d34     30 28 56 F2 | 	cmps	local06, #48 wc
23d38     44 00 90 CD |  if_b	jmp	#LR__3357
23d3c     3A 28 56 F2 | 	cmps	local06, #58 wc
23d40     3C 00 90 3D |  if_ae	jmp	#LR__3357
23d44     10 13 02 F6 | 	mov	arg01, local02
23d48     00 90 20 FF 
23d4c     00 14 06 F6 | 	mov	arg02, ##1092616192
23d50     88 F7 BF FD | 	call	#__system___float_mul
23d54     FD 20 02 F6 | 	mov	local02, result1
23d58     30 28 86 F1 | 	sub	local06, #48
23d5c     14 13 02 F6 | 	mov	arg01, local06
23d60     74 F3 BF FD | 	call	#__system___float_fromuns
23d64     FD 14 02 F6 | 	mov	arg02, result1
23d68     10 13 02 F6 | 	mov	arg01, local02
23d6c     9C F3 BF FD | 	call	#__system___float_add
23d70     FD 20 02 F6 | 	mov	local02, result1
23d74     00 26 0E F2 | 	cmp	local05, #0 wz
23d78     01 22 86 51 |  if_ne	sub	local03, #1
23d7c     98 FF 9F FD | 	jmp	#LR__3354
23d80                 | LR__3357
23d80     2E 28 0E F2 | 	cmp	local06, #46 wz
23d84     00 26 0E A2 |  if_e	cmp	local05, #0 wz
23d88     01 26 06 A6 |  if_e	mov	local05, #1
23d8c     88 FF 9F AD |  if_e	jmp	#LR__3354
23d90                 | LR__3358
23d90     45 28 0E F2 | 	cmp	local06, #69 wz
23d94     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
23d98     18 00 90 5D |  if_ne	jmp	#LR__3359
23d9c     0F 13 02 F6 | 	mov	arg01, local01
23da0     00 14 06 F6 | 	mov	arg02, #0
23da4     AC FD BF FD | 	call	#__system____builtin_atoi
23da8     11 FB 01 F1 | 	add	result1, local03
23dac     FD 2A 02 F6 | 	mov	local07, result1
23db0     04 00 90 FD | 	jmp	#LR__3360
23db4                 | LR__3359
23db4     11 2B 02 F6 | 	mov	local07, local03
23db8                 | LR__3360
23db8     15 17 02 F6 | 	mov	arg03, local07
23dbc     10 13 02 F6 | 	mov	arg01, local02
23dc0     00 90 20 FF 
23dc4     00 14 06 F6 | 	mov	arg02, ##1092616192
23dc8     F4 06 B0 FD | 	call	#__system___float_pow_n
23dcc     12 FB 61 F5 | 	xor	result1, local04
23dd0     A7 F0 03 F6 | 	mov	ptra, fp
23dd4     B2 00 A0 FD | 	call	#popregs_
23dd8                 | __system____builtin_atof_ret
23dd8     2D 00 64 FD | 	ret
23ddc                 | 
23ddc                 | __system____builtin_ilogb
23ddc     20 FC BF FD | 	call	#__system___float_Unpack
23de0     00 FE 0D F2 | 	cmp	result3, #0 wz
23de4     00 00 40 AF 
23de8     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
23dec     24 00 90 AD |  if_e	jmp	#LR__3371
23df0     80 FC 0D F2 | 	cmp	result2, #128 wz
23df4     18 00 90 5D |  if_ne	jmp	#LR__3370
23df8     00 00 10 FF 
23dfc     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
23e00     1E FA CD A9 |  if_e	bmask	result1, #30
23e04     0C 00 90 AD |  if_e	jmp	#LR__3371
23e08     1F FA C5 F9 | 	decod	result1, #31
23e0c     04 00 90 FD | 	jmp	#LR__3371
23e10                 | LR__3370
23e10     FE FA 01 F6 | 	mov	result1, result2
23e14                 | LR__3371
23e14                 | __system____builtin_ilogb_ret
23e14     2D 00 64 FD | 	ret
23e18                 | 
23e18                 | __system____builtin_sinf
23e18     03 4A 05 F6 | 	mov	COUNT_, #3
23e1c     A8 00 A0 FD | 	call	#pushregs_
23e20     09 1F 02 F6 | 	mov	local01, arg01
23e24     87 64 20 FF 
23e28     DB 15 06 F6 | 	mov	arg02, ##1086918619
23e2c     B0 F8 BF FD | 	call	#__system___float_div
23e30     FD 12 02 F6 | 	mov	arg01, result1
23e34     00 14 06 F6 | 	mov	arg02, #0
23e38     68 FB BF FD | 	call	#__system___float_tointeger
23e3c     FD 16 0A F6 | 	mov	arg03, result1 wz
23e40     44 00 90 AD |  if_e	jmp	#LR__3380
23e44     0B 13 52 F6 | 	abs	arg01, arg03 wc
23e48     1F 20 C6 C9 |  if_b	decod	local02, #31
23e4c     00 20 06 36 |  if_ae	mov	local02, #0
23e50     84 F2 BF FD | 	call	#__system___float_fromuns
23e54     10 FB 61 F5 | 	xor	result1, local02
23e58     FD 12 02 F6 | 	mov	arg01, result1
23e5c     1E 14 C6 F9 | 	decod	arg02, #30
23e60     78 F6 BF FD | 	call	#__system___float_mul
23e64     FD 12 02 F6 | 	mov	arg01, result1
23e68     87 24 20 FF 
23e6c     DB 15 06 F6 | 	mov	arg02, ##1078530011
23e70     68 F6 BF FD | 	call	#__system___float_mul
23e74     FD 14 02 F6 | 	mov	arg02, result1
23e78     0F 13 02 F6 | 	mov	arg01, local01
23e7c     1F 14 E6 F4 | 	bitnot	arg02, #31
23e80     88 F2 BF FD | 	call	#__system___float_add
23e84     FD 1E 02 F6 | 	mov	local01, result1
23e88                 | LR__3380
23e88     0F 13 02 F6 | 	mov	arg01, local01
23e8c     66 E6 1E FF 
23e90     CD 14 06 F6 | 	mov	arg02, ##1036831949
23e94     01 16 06 F6 | 	mov	arg03, #1
23e98     74 FA BF FD | 	call	#__system___float_cmp
23e9c     00 FA 55 F2 | 	cmps	result1, #0 wc
23ea0     5C 00 90 3D |  if_ae	jmp	#LR__3381
23ea4     0F 13 02 F6 | 	mov	arg01, local01
23ea8     66 E6 5E FF 
23eac     CD 14 06 F6 | 	mov	arg02, ##-1110651699
23eb0     01 16 66 F6 | 	neg	arg03, #1
23eb4     58 FA BF FD | 	call	#__system___float_cmp
23eb8     01 FA 55 F2 | 	cmps	result1, #1 wc
23ebc     40 00 90 CD |  if_b	jmp	#LR__3381
23ec0     0F 13 02 F6 | 	mov	arg01, local01
23ec4     0F 15 02 F6 | 	mov	arg02, local01
23ec8     10 F6 BF FD | 	call	#__system___float_mul
23ecc     FD 12 02 F6 | 	mov	arg01, result1
23ed0     0F 15 02 F6 | 	mov	arg02, local01
23ed4     04 F6 BF FD | 	call	#__system___float_mul
23ed8     FD 12 02 F6 | 	mov	arg01, result1
23edc     00 60 20 FF 
23ee0     00 14 06 F6 | 	mov	arg02, ##1086324736
23ee4     F8 F7 BF FD | 	call	#__system___float_div
23ee8     FD 14 02 F6 | 	mov	arg02, result1
23eec     0F 13 02 F6 | 	mov	arg01, local01
23ef0     1F 14 E6 F4 | 	bitnot	arg02, #31
23ef4     14 F2 BF FD | 	call	#__system___float_add
23ef8     FD 22 02 F6 | 	mov	local03, result1
23efc     54 00 90 FD | 	jmp	#LR__3382
23f00                 | LR__3381
23f00     0F 13 02 F6 | 	mov	arg01, local01
23f04     7C 91 26 FF 
23f08     83 15 06 F6 | 	mov	arg02, ##1294137731
23f0c     CC F5 BF FD | 	call	#__system___float_mul
23f10     FD 12 02 F6 | 	mov	arg01, result1
23f14     00 14 06 F6 | 	mov	arg02, #0
23f18     88 FA BF FD | 	call	#__system___float_tointeger
23f1c     02 FA 65 F0 | 	shl	result1, #2
23f20     00 00 A0 FF 
23f24     FD 00 48 FD | 	qrotate	##1073741824, result1
23f28     19 12 62 FD | 	getqy	arg01
23f2c     09 13 52 F6 | 	abs	arg01, arg01 wc
23f30     1F 20 C6 C9 |  if_b	decod	local02, #31
23f34     00 20 06 36 |  if_ae	mov	local02, #0
23f38     9C F1 BF FD | 	call	#__system___float_fromuns
23f3c     10 FB 61 F5 | 	xor	result1, local02
23f40     FD 12 02 F6 | 	mov	arg01, result1
23f44     00 40 27 FF 
23f48     00 14 06 F6 | 	mov	arg02, ##1317011456
23f4c     90 F7 BF FD | 	call	#__system___float_div
23f50     FD 22 02 F6 | 	mov	local03, result1
23f54                 | LR__3382
23f54     11 FB 01 F6 | 	mov	result1, local03
23f58     A7 F0 03 F6 | 	mov	ptra, fp
23f5c     B2 00 A0 FD | 	call	#popregs_
23f60                 | __system____builtin_sinf_ret
23f60     2D 00 64 FD | 	ret
23f64                 | 
23f64                 | __system____builtin_tanf
23f64     02 4A 05 F6 | 	mov	COUNT_, #2
23f68     A8 00 A0 FD | 	call	#pushregs_
23f6c     09 1F 02 F6 | 	mov	local01, arg01
23f70     A4 FE BF FD | 	call	#__system____builtin_sinf
23f74     FD 20 02 F6 | 	mov	local02, result1
23f78     0F 15 02 F6 | 	mov	arg02, local01
23f7c     87 E4 1F FF 
23f80     DB 13 06 F6 | 	mov	arg01, ##1070141403
23f84     1F 14 E6 F4 | 	bitnot	arg02, #31
23f88     80 F1 BF FD | 	call	#__system___float_add
23f8c     FD 12 02 F6 | 	mov	arg01, result1
23f90     84 FE BF FD | 	call	#__system____builtin_sinf
23f94     FD 14 02 F6 | 	mov	arg02, result1
23f98     10 13 02 F6 | 	mov	arg01, local02
23f9c     40 F7 BF FD | 	call	#__system___float_div
23fa0     A7 F0 03 F6 | 	mov	ptra, fp
23fa4     B2 00 A0 FD | 	call	#popregs_
23fa8                 | __system____builtin_tanf_ret
23fa8     2D 00 64 FD | 	ret
23fac                 | 
23fac                 | __system____builtin_asinf
23fac     01 4A 05 F6 | 	mov	COUNT_, #1
23fb0     A8 00 A0 FD | 	call	#pushregs_
23fb4     09 1F 02 F6 | 	mov	local01, arg01
23fb8     0F 15 02 F6 | 	mov	arg02, local01
23fbc     0F 13 02 F6 | 	mov	arg01, local01
23fc0     18 F5 BF FD | 	call	#__system___float_mul
23fc4     FD 14 02 F6 | 	mov	arg02, result1
23fc8     00 C0 1F FF 
23fcc     00 12 06 F6 | 	mov	arg01, ##1065353216
23fd0     1F 14 E6 F4 | 	bitnot	arg02, #31
23fd4     34 F1 BF FD | 	call	#__system___float_add
23fd8     FD 12 02 F6 | 	mov	arg01, result1
23fdc     24 F4 BF FD | 	call	#__system___float_sqrt
23fe0     FD 14 02 F6 | 	mov	arg02, result1
23fe4     0F 13 02 F6 | 	mov	arg01, local01
23fe8     58 00 B0 FD | 	call	#__system____builtin_atan2f
23fec     A7 F0 03 F6 | 	mov	ptra, fp
23ff0     B2 00 A0 FD | 	call	#popregs_
23ff4                 | __system____builtin_asinf_ret
23ff4     2D 00 64 FD | 	ret
23ff8                 | 
23ff8                 | __system____builtin_acosf
23ff8     01 4A 05 F6 | 	mov	COUNT_, #1
23ffc     A8 00 A0 FD | 	call	#pushregs_
24000     09 1F 02 F6 | 	mov	local01, arg01
24004     0F 15 02 F6 | 	mov	arg02, local01
24008     0F 13 02 F6 | 	mov	arg01, local01
2400c     CC F4 BF FD | 	call	#__system___float_mul
24010     FD 14 02 F6 | 	mov	arg02, result1
24014     00 C0 1F FF 
24018     00 12 06 F6 | 	mov	arg01, ##1065353216
2401c     1F 14 E6 F4 | 	bitnot	arg02, #31
24020     E8 F0 BF FD | 	call	#__system___float_add
24024     FD 12 02 F6 | 	mov	arg01, result1
24028     D8 F3 BF FD | 	call	#__system___float_sqrt
2402c     FD 12 02 F6 | 	mov	arg01, result1
24030     0F 15 02 F6 | 	mov	arg02, local01
24034     0C 00 B0 FD | 	call	#__system____builtin_atan2f
24038     A7 F0 03 F6 | 	mov	ptra, fp
2403c     B2 00 A0 FD | 	call	#popregs_
24040                 | __system____builtin_acosf_ret
24040     2D 00 64 FD | 	ret
24044                 | 
24044                 | __system____builtin_atan2f
24044     04 4A 05 F6 | 	mov	COUNT_, #4
24048     A8 00 A0 FD | 	call	#pushregs_
2404c     09 1F 02 F6 | 	mov	local01, arg01
24050     0A 21 02 F6 | 	mov	local02, arg02
24054     0F 13 02 F6 | 	mov	arg01, local01
24058     00 14 06 F6 | 	mov	arg02, #0
2405c     01 16 06 F6 | 	mov	arg03, #1
24060     AC F8 BF FD | 	call	#__system___float_cmp
24064     00 FA 0D F2 | 	cmp	result1, #0 wz
24068     28 00 90 5D |  if_ne	jmp	#LR__3390
2406c     10 13 02 F6 | 	mov	arg01, local02
24070     00 14 06 F6 | 	mov	arg02, #0
24074     01 16 06 F6 | 	mov	arg03, #1
24078     94 F8 BF FD | 	call	#__system___float_cmp
2407c     00 FA 55 F2 | 	cmps	result1, #0 wc
24080     87 24 60 CF 
24084     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
24088     DC 00 90 CD |  if_b	jmp	#LR__3391
2408c     00 FA 05 F6 | 	mov	result1, #0
24090     D4 00 90 FD | 	jmp	#LR__3391
24094                 | LR__3390
24094     10 13 02 F6 | 	mov	arg01, local02
24098     10 15 02 F6 | 	mov	arg02, local02
2409c     3C F4 BF FD | 	call	#__system___float_mul
240a0     FD 22 02 F6 | 	mov	local03, result1
240a4     0F 13 02 F6 | 	mov	arg01, local01
240a8     0F 15 02 F6 | 	mov	arg02, local01
240ac     2C F4 BF FD | 	call	#__system___float_mul
240b0     FD 14 02 F6 | 	mov	arg02, result1
240b4     11 13 02 F6 | 	mov	arg01, local03
240b8     50 F0 BF FD | 	call	#__system___float_add
240bc     FD 12 02 F6 | 	mov	arg01, result1
240c0     40 F3 BF FD | 	call	#__system___float_sqrt
240c4     FD 22 02 F6 | 	mov	local03, result1
240c8     10 13 02 F6 | 	mov	arg01, local02
240cc     11 15 02 F6 | 	mov	arg02, local03
240d0     0C F6 BF FD | 	call	#__system___float_div
240d4     FD 20 02 F6 | 	mov	local02, result1
240d8     0F 13 02 F6 | 	mov	arg01, local01
240dc     11 15 02 F6 | 	mov	arg02, local03
240e0     FC F5 BF FD | 	call	#__system___float_div
240e4     FD 1E 02 F6 | 	mov	local01, result1
240e8     00 40 27 FF 
240ec     00 12 06 F6 | 	mov	arg01, ##1317011456
240f0     10 15 02 F6 | 	mov	arg02, local02
240f4     E4 F3 BF FD | 	call	#__system___float_mul
240f8     FD 12 02 F6 | 	mov	arg01, result1
240fc     00 14 06 F6 | 	mov	arg02, #0
24100     A0 F8 BF FD | 	call	#__system___float_tointeger
24104     FD 22 02 F6 | 	mov	local03, result1
24108     00 40 27 FF 
2410c     00 12 06 F6 | 	mov	arg01, ##1317011456
24110     0F 15 02 F6 | 	mov	arg02, local01
24114     C4 F3 BF FD | 	call	#__system___float_mul
24118     FD 12 02 F6 | 	mov	arg01, result1
2411c     00 14 06 F6 | 	mov	arg02, #0
24120     80 F8 BF FD | 	call	#__system___float_tointeger
24124     FD 22 52 FD | 	qvector	local03, result1
24128     87 24 20 FF 
2412c     DB 23 06 F6 | 	mov	local03, ##1078530011
24130     19 12 62 FD | 	getqy	arg01
24134     01 12 C6 F0 | 	sar	arg01, #1
24138     09 13 52 F6 | 	abs	arg01, arg01 wc
2413c     1F 24 C6 C9 |  if_b	decod	local04, #31
24140     00 24 06 36 |  if_ae	mov	local04, #0
24144     90 EF BF FD | 	call	#__system___float_fromuns
24148     12 FB 61 F5 | 	xor	result1, local04
2414c     FD 12 02 F6 | 	mov	arg01, result1
24150     00 40 27 FF 
24154     00 14 06 F6 | 	mov	arg02, ##1317011456
24158     84 F5 BF FD | 	call	#__system___float_div
2415c     FD 14 02 F6 | 	mov	arg02, result1
24160     11 13 02 F6 | 	mov	arg01, local03
24164     74 F3 BF FD | 	call	#__system___float_mul
24168                 | LR__3391
24168     A7 F0 03 F6 | 	mov	ptra, fp
2416c     B2 00 A0 FD | 	call	#popregs_
24170                 | __system____builtin_atan2f_ret
24170     2D 00 64 FD | 	ret
24174                 | 
24174                 | __system____builtin_exp2f
24174     04 4A 05 F6 | 	mov	COUNT_, #4
24178     A8 00 A0 FD | 	call	#pushregs_
2417c     09 1F 02 F6 | 	mov	local01, arg01
24180     00 7F 21 FF 
24184     00 14 06 F6 | 	mov	arg02, ##1123942400
24188     01 16 66 F6 | 	neg	arg03, #1
2418c     80 F7 BF FD | 	call	#__system___float_cmp
24190     00 FA 55 F2 | 	cmps	result1, #0 wc
24194     00 C0 3F 3F 
24198     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
2419c     DC 00 90 3D |  if_ae	jmp	#LR__3401
241a0     0F 13 02 F6 | 	mov	arg01, local01
241a4     00 7F 61 FF 
241a8     00 14 06 F6 | 	mov	arg02, ##-1023541248
241ac     01 16 06 F6 | 	mov	arg03, #1
241b0     5C F7 BF FD | 	call	#__system___float_cmp
241b4     00 FA 55 F2 | 	cmps	result1, #0 wc
241b8     00 FA 05 C6 |  if_b	mov	result1, #0
241bc     BC 00 90 CD |  if_b	jmp	#LR__3401
241c0     0F 13 02 F6 | 	mov	arg01, local01
241c4     00 14 06 F6 | 	mov	arg02, #0
241c8     D8 F7 BF FD | 	call	#__system___float_tointeger
241cc     FD 20 02 F6 | 	mov	local02, result1
241d0     10 13 52 F6 | 	abs	arg01, local02 wc
241d4     1F 22 C6 C9 |  if_b	decod	local03, #31
241d8     00 22 06 36 |  if_ae	mov	local03, #0
241dc     F8 EE BF FD | 	call	#__system___float_fromuns
241e0     11 FB 61 F5 | 	xor	result1, local03
241e4     FD 14 02 F6 | 	mov	arg02, result1
241e8     0F 13 02 F6 | 	mov	arg01, local01
241ec     1F 14 E6 F4 | 	bitnot	arg02, #31
241f0     18 EF BF FD | 	call	#__system___float_add
241f4     FD 24 02 F6 | 	mov	local04, result1
241f8     12 13 02 F6 | 	mov	arg01, local04
241fc     00 14 06 F6 | 	mov	arg02, #0
24200     01 16 06 F6 | 	mov	arg03, #1
24204     08 F7 BF FD | 	call	#__system___float_cmp
24208     00 FA 55 F2 | 	cmps	result1, #0 wc
2420c     18 00 90 3D |  if_ae	jmp	#LR__3400
24210     12 13 02 F6 | 	mov	arg01, local04
24214     00 C0 1F FF 
24218     00 14 06 F6 | 	mov	arg02, ##1065353216
2421c     EC EE BF FD | 	call	#__system___float_add
24220     FD 24 02 F6 | 	mov	local04, result1
24224     01 20 86 F1 | 	sub	local02, #1
24228                 | LR__3400
24228     7F 20 06 F1 | 	add	local02, #127
2422c     17 20 66 F0 | 	shl	local02, #23
24230     12 13 02 F6 | 	mov	arg01, local04
24234     00 80 26 FF 
24238     00 14 06 F6 | 	mov	arg02, ##1291845632
2423c     9C F2 BF FD | 	call	#__system___float_mul
24240     FD 12 02 F6 | 	mov	arg01, result1
24244     00 14 06 F6 | 	mov	arg02, #0
24248     58 F7 BF FD | 	call	#__system___float_tointeger
2424c     FD 24 0A F6 | 	mov	local04, result1 wz
24250     10 FB 01 A6 |  if_e	mov	result1, local02
24254     24 00 90 AD |  if_e	jmp	#LR__3401
24258     3E 24 26 F4 | 	bith	local04, #62
2425c     0F 24 62 FD | 	qexp	local04
24260     10 13 02 F6 | 	mov	arg01, local02
24264     18 14 62 FD | 	getqx	arg02
24268     01 14 06 F1 | 	add	arg02, #1
2426c     01 14 46 F0 | 	shr	arg02, #1
24270     00 80 1F FF 
24274     00 14 06 F1 | 	add	arg02, ##1056964608
24278     60 F2 BF FD | 	call	#__system___float_mul
2427c                 | LR__3401
2427c     A7 F0 03 F6 | 	mov	ptra, fp
24280     B2 00 A0 FD | 	call	#popregs_
24284                 | __system____builtin_exp2f_ret
24284     2D 00 64 FD | 	ret
24288                 | 
24288                 | __system____builtin_log2f
24288     06 4A 05 F6 | 	mov	COUNT_, #6
2428c     A8 00 A0 FD | 	call	#pushregs_
24290     09 1F 02 F6 | 	mov	local01, arg01
24294     09 21 0A F6 | 	mov	local02, arg01 wz
24298     00 00 40 5F 
2429c     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
242a0     00 40 00 AF 
242a4     00 FA 65 A6 |  if_e	neg	result1, ##8388608
242a8     08 01 90 AD |  if_e	jmp	#LR__3414
242ac     00 20 56 F2 | 	cmps	local02, #0 wc
242b0     00 E0 3F CF 
242b4     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
242b8     F8 00 90 CD |  if_b	jmp	#LR__3414
242bc     0F 13 02 F6 | 	mov	arg01, local01
242c0     00 90 20 FF 
242c4     00 14 06 F6 | 	mov	arg02, ##1092616192
242c8     01 16 06 F6 | 	mov	arg03, #1
242cc     40 F6 BF FD | 	call	#__system___float_cmp
242d0     00 FA 0D F2 | 	cmp	result1, #0 wz
242d4     4D 2A 20 AF 
242d8     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
242dc     D4 00 90 AD |  if_e	jmp	#LR__3414
242e0     0F 13 02 F6 | 	mov	arg01, local01
242e4     FC 16 20 FF 
242e8     54 14 06 F6 | 	mov	arg02, ##1076754516
242ec     01 16 06 F6 | 	mov	arg03, #1
242f0     1C F6 BF FD | 	call	#__system___float_cmp
242f4     00 FA 0D F2 | 	cmp	result1, #0 wz
242f8     55 DC 1F AF 
242fc     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
24300     B0 00 90 AD |  if_e	jmp	#LR__3414
24304     10 23 02 F6 | 	mov	local03, local02
24308     17 22 46 F0 | 	shr	local03, #23
2430c     11 23 E2 F8 | 	getbyte	local03, local03, #0
24310     17 21 06 F4 | 	bitl	local02, #279
24314     10 25 02 F6 | 	mov	local04, local02
24318     FF 22 0E F2 | 	cmp	local03, #255 wz
2431c     1C 00 90 5D |  if_ne	jmp	#LR__3410
24320     00 24 0E F2 | 	cmp	local04, #0 wz
24324     00 C0 3F 5F 
24328     00 26 06 56 |  if_ne	mov	local05, ##2139095040
2432c     00 E0 3F AF 
24330     00 26 06 A6 |  if_e	mov	local05, ##2143289344
24334     13 FB 01 F6 | 	mov	result1, local05
24338     78 00 90 FD | 	jmp	#LR__3414
2433c                 | LR__3410
2433c     00 22 0E F2 | 	cmp	local03, #0 wz
24340     17 24 26 54 |  if_ne	bith	local04, #23
24344     7F 22 86 51 |  if_ne	sub	local03, #127
24348     28 00 90 5D |  if_ne	jmp	#LR__3413
2434c     00 24 0E F2 | 	cmp	local04, #0 wz
24350     00 40 00 AF 
24354     00 FA 65 A6 |  if_e	neg	result1, ##8388608
24358     58 00 90 AD |  if_e	jmp	#LR__3414
2435c     7E 22 66 F6 | 	neg	local03, #126
24360     97 08 48 FB | 	callpa	#(@LR__3412-@LR__3411)>>2,fcache_load_ptr_
24364                 | LR__3411
24364     17 24 2E F4 | 	testbn	local04, #23 wz
24368     01 24 66 A0 |  if_e	shl	local04, #1
2436c     01 22 06 A1 |  if_e	add	local03, #1
24370     F0 FF 9F AD |  if_e	jmp	#LR__3411
24374                 | LR__3412
24374                 | LR__3413
24374     0E 24 62 FD | 	qlog	local04
24378     01 22 86 F1 | 	sub	local03, #1
2437c     11 13 52 F6 | 	abs	arg01, local03 wc
24380     1F 28 C6 C9 |  if_b	decod	local06, #31
24384     00 28 06 36 |  if_ae	mov	local06, #0
24388     18 26 62 FD | 	getqx	local05
2438c     9B 26 06 F4 | 	bitl	local05, #155
24390     08 26 06 F1 | 	add	local05, #8
24394     04 26 46 F0 | 	shr	local05, #4
24398     00 C0 1F FF 
2439c     00 26 06 F1 | 	add	local05, ##1065353216
243a0     34 ED BF FD | 	call	#__system___float_fromuns
243a4     14 FB 61 F5 | 	xor	result1, local06
243a8     FD 14 02 F6 | 	mov	arg02, result1
243ac     13 13 02 F6 | 	mov	arg01, local05
243b0     58 ED BF FD | 	call	#__system___float_add
243b4                 | LR__3414
243b4     A7 F0 03 F6 | 	mov	ptra, fp
243b8     B2 00 A0 FD | 	call	#popregs_
243bc                 | __system____builtin_log2f_ret
243bc     2D 00 64 FD | 	ret
243c0                 | 
243c0                 | __system____builtin_powf
243c0     04 4A 05 F6 | 	mov	COUNT_, #4
243c4     A8 00 A0 FD | 	call	#pushregs_
243c8     09 1F 02 F6 | 	mov	local01, arg01
243cc     0A 21 02 F6 | 	mov	local02, arg02
243d0     10 13 02 F6 | 	mov	arg01, local02
243d4     00 14 06 F6 | 	mov	arg02, #0
243d8     C8 F5 BF FD | 	call	#__system___float_tointeger
243dc     FD 22 02 F6 | 	mov	local03, result1
243e0     11 13 52 F6 | 	abs	arg01, local03 wc
243e4     1F 24 C6 C9 |  if_b	decod	local04, #31
243e8     00 24 06 36 |  if_ae	mov	local04, #0
243ec     E8 EC BF FD | 	call	#__system___float_fromuns
243f0     12 FB 61 F5 | 	xor	result1, local04
243f4     FD 12 02 F6 | 	mov	arg01, result1
243f8     10 15 02 F6 | 	mov	arg02, local02
243fc     01 16 06 F6 | 	mov	arg03, #1
24400     0C F5 BF FD | 	call	#__system___float_cmp
24404     00 FA 0D F2 | 	cmp	result1, #0 wz
24408     18 00 90 5D |  if_ne	jmp	#LR__3420
2440c     00 C0 1F FF 
24410     00 12 06 F6 | 	mov	arg01, ##1065353216
24414     0F 15 02 F6 | 	mov	arg02, local01
24418     11 17 02 F6 | 	mov	arg03, local03
2441c     A0 00 B0 FD | 	call	#__system___float_pow_n
24420     58 00 90 FD | 	jmp	#LR__3421
24424                 | LR__3420
24424     0F 13 02 F6 | 	mov	arg01, local01
24428     00 14 06 F6 | 	mov	arg02, #0
2442c     01 16 06 F6 | 	mov	arg03, #1
24430     DC F4 BF FD | 	call	#__system___float_cmp
24434     00 FA 55 F2 | 	cmps	result1, #0 wc
24438     00 E0 3F CF 
2443c     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
24440     38 00 90 CD |  if_b	jmp	#LR__3421
24444     0F 13 02 F6 | 	mov	arg01, local01
24448     00 14 06 F6 | 	mov	arg02, #0
2444c     01 16 06 F6 | 	mov	arg03, #1
24450     BC F4 BF FD | 	call	#__system___float_cmp
24454     00 FA 0D F2 | 	cmp	result1, #0 wz
24458     00 FA 05 A6 |  if_e	mov	result1, #0
2445c     1C 00 90 AD |  if_e	jmp	#LR__3421
24460     0F 13 02 F6 | 	mov	arg01, local01
24464     20 FE BF FD | 	call	#__system____builtin_log2f
24468     FD 12 02 F6 | 	mov	arg01, result1
2446c     10 15 02 F6 | 	mov	arg02, local02
24470     68 F0 BF FD | 	call	#__system___float_mul
24474     FD 12 02 F6 | 	mov	arg01, result1
24478     F8 FC BF FD | 	call	#__system____builtin_exp2f
2447c                 | LR__3421
2447c     A7 F0 03 F6 | 	mov	ptra, fp
24480     B2 00 A0 FD | 	call	#popregs_
24484                 | __system____builtin_powf_ret
24484     2D 00 64 FD | 	ret
24488                 | 
24488                 | __system____builtin_logbase
24488     02 4A 05 F6 | 	mov	COUNT_, #2
2448c     A8 00 A0 FD | 	call	#pushregs_
24490     09 1F 02 F6 | 	mov	local01, arg01
24494     0A 13 02 F6 | 	mov	arg01, arg02
24498     EC FD BF FD | 	call	#__system____builtin_log2f
2449c     FD 20 02 F6 | 	mov	local02, result1
244a0     0F 13 02 F6 | 	mov	arg01, local01
244a4     E0 FD BF FD | 	call	#__system____builtin_log2f
244a8     FD 14 02 F6 | 	mov	arg02, result1
244ac     10 13 02 F6 | 	mov	arg01, local02
244b0     2C F2 BF FD | 	call	#__system___float_div
244b4     A7 F0 03 F6 | 	mov	ptra, fp
244b8     B2 00 A0 FD | 	call	#popregs_
244bc                 | __system____builtin_logbase_ret
244bc     2D 00 64 FD | 	ret
244c0                 | 
244c0                 | __system___float_pow_n
244c0     05 4A 05 F6 | 	mov	COUNT_, #5
244c4     A8 00 A0 FD | 	call	#pushregs_
244c8     09 1F 02 F6 | 	mov	local01, arg01
244cc     0A 21 02 F6 | 	mov	local02, arg02
244d0     0B 23 02 F6 | 	mov	local03, arg03
244d4     00 22 56 F2 | 	cmps	local03, #0 wc
244d8     18 00 90 3D |  if_ae	jmp	#LR__3430
244dc     01 24 06 F6 | 	mov	local04, #1
244e0     11 23 62 F6 | 	neg	local03, local03
244e4     00 22 56 F2 | 	cmps	local03, #0 wc
244e8     00 FA 05 C6 |  if_b	mov	result1, #0
244ec     94 00 90 CD |  if_b	jmp	#LR__3438
244f0     04 00 90 FD | 	jmp	#LR__3431
244f4                 | LR__3430
244f4     00 24 06 F6 | 	mov	local04, #0
244f8                 | LR__3431
244f8     00 C0 1F FF 
244fc     00 26 06 F6 | 	mov	local05, ##1065353216
24500                 | LR__3432
24500     01 22 56 F2 | 	cmps	local03, #1 wc
24504     30 00 90 CD |  if_b	jmp	#LR__3434
24508     01 22 CE F7 | 	test	local03, #1 wz
2450c     10 00 90 AD |  if_e	jmp	#LR__3433
24510     13 13 02 F6 | 	mov	arg01, local05
24514     10 15 02 F6 | 	mov	arg02, local02
24518     C0 EF BF FD | 	call	#__system___float_mul
2451c     FD 26 02 F6 | 	mov	local05, result1
24520                 | LR__3433
24520     01 22 C6 F0 | 	sar	local03, #1
24524     10 13 02 F6 | 	mov	arg01, local02
24528     10 15 02 F6 | 	mov	arg02, local02
2452c     AC EF BF FD | 	call	#__system___float_mul
24530     FD 20 02 F6 | 	mov	local02, result1
24534     C8 FF 9F FD | 	jmp	#LR__3432
24538                 | LR__3434
24538     00 24 0E F2 | 	cmp	local04, #0 wz
2453c     14 00 90 AD |  if_e	jmp	#LR__3435
24540     0F 13 02 F6 | 	mov	arg01, local01
24544     13 15 02 F6 | 	mov	arg02, local05
24548     94 F1 BF FD | 	call	#__system___float_div
2454c     FD 26 02 F6 | 	mov	local05, result1
24550     2C 00 90 FD | 	jmp	#LR__3437
24554                 | LR__3435
24554     0F 13 02 F6 | 	mov	arg01, local01
24558     00 C0 1F FF 
2455c     00 14 06 F6 | 	mov	arg02, ##1065353216
24560     01 16 06 F6 | 	mov	arg03, #1
24564     A8 F3 BF FD | 	call	#__system___float_cmp
24568     00 FA 0D F2 | 	cmp	result1, #0 wz
2456c     10 00 90 AD |  if_e	jmp	#LR__3436
24570     0F 13 02 F6 | 	mov	arg01, local01
24574     13 15 02 F6 | 	mov	arg02, local05
24578     60 EF BF FD | 	call	#__system___float_mul
2457c     FD 26 02 F6 | 	mov	local05, result1
24580                 | LR__3436
24580                 | LR__3437
24580     13 FB 01 F6 | 	mov	result1, local05
24584                 | LR__3438
24584     A7 F0 03 F6 | 	mov	ptra, fp
24588     B2 00 A0 FD | 	call	#popregs_
2458c                 | __system___float_pow_n_ret
2458c     2D 00 64 FD | 	ret
24590                 | 
24590                 | __system___gc_ptrs
24590     EC 00 02 F6 | 	mov	_var01, __heap_ptr
24594     00 03 02 F6 | 	mov	_var02, _var01
24598     76 01 00 FF 
2459c     F8 03 06 F1 | 	add	_var02, ##191992
245a0     00 FD 09 FB | 	rdlong	result2, _var01 wz
245a4     74 00 90 5D |  if_ne	jmp	#LR__3440
245a8     01 FD 01 F6 | 	mov	result2, _var02
245ac     00 FD 81 F1 | 	sub	result2, _var01
245b0     00 03 58 FC | 	wrword	#1, _var01
245b4     00 FB 01 F6 | 	mov	result1, _var01
245b8     02 FA 05 F1 | 	add	result1, #2
245bc     36 00 80 FF 
245c0     FD 20 59 FC | 	wrword	##27792, result1
245c4     00 FB 01 F6 | 	mov	result1, _var01
245c8     04 FA 05 F1 | 	add	result1, #4
245cc     FD 00 58 FC | 	wrword	#0, result1
245d0     00 FB 01 F6 | 	mov	result1, _var01
245d4     06 FA 05 F1 | 	add	result1, #6
245d8     FD 02 58 FC | 	wrword	#1, result1
245dc     10 00 06 F1 | 	add	_var01, #16
245e0     FE FC 51 F6 | 	abs	result2, result2 wc
245e4     04 FC 45 F0 | 	shr	result2, #4
245e8     FE FC 81 F6 | 	negc	result2, result2
245ec     00 FD 51 FC | 	wrword	result2, _var01
245f0     00 FD 01 F6 | 	mov	result2, _var01
245f4     02 FC 05 F1 | 	add	result2, #2
245f8     36 00 80 FF 
245fc     FE 1E 59 FC | 	wrword	##27791, result2
24600     00 FD 01 F6 | 	mov	result2, _var01
24604     04 FC 05 F1 | 	add	result2, #4
24608     FE 00 58 FC | 	wrword	#0, result2
2460c     00 FD 01 F6 | 	mov	result2, _var01
24610     06 FC 05 F1 | 	add	result2, #6
24614     FE 00 58 FC | 	wrword	#0, result2
24618     10 00 86 F1 | 	sub	_var01, #16
2461c                 | LR__3440
2461c     00 FB 01 F6 | 	mov	result1, _var01
24620     01 FD 01 F6 | 	mov	result2, _var02
24624                 | __system___gc_ptrs_ret
24624     2D 00 64 FD | 	ret
24628                 | 
24628                 | __system___gc_tryalloc
24628     0B 4A 05 F6 | 	mov	COUNT_, #11
2462c     A8 00 A0 FD | 	call	#pushregs_
24630     09 1F 02 F6 | 	mov	local01, arg01
24634     0A 21 02 F6 | 	mov	local02, arg02
24638     54 FF BF FD | 	call	#__system___gc_ptrs
2463c     FD 22 02 F6 | 	mov	local03, result1
24640     FE 24 02 F6 | 	mov	local04, result2
24644     11 27 02 F6 | 	mov	local05, local03
24648     00 28 06 F6 | 	mov	local06, #0
2464c     97 1E 48 FB | 	callpa	#(@LR__3451-@LR__3450)>>2,fcache_load_ptr_
24650                 | LR__3450
24650     13 2B 02 F6 | 	mov	local07, local05
24654     06 26 06 F1 | 	add	local05, #6
24658     13 15 EA FA | 	rdword	arg02, local05 wz
2465c     11 13 02 F6 | 	mov	arg01, local03
24660     00 FA 05 A6 |  if_e	mov	result1, #0
24664     04 14 66 50 |  if_ne	shl	arg02, #4
24668     0A 13 02 51 |  if_ne	add	arg01, arg02
2466c     09 FB 01 56 |  if_ne	mov	result1, arg01
24670     FD 26 0A F6 | 	mov	local05, result1 wz
24674     13 29 E2 5A |  if_ne	rdword	local06, local05
24678     00 26 0E F2 | 	cmp	local05, #0 wz
2467c     12 27 52 52 |  if_ne	cmps	local05, local04 wc
24680     08 00 90 1D |  if_a	jmp	#LR__3452
24684     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
24688     C4 FF 9F 1D |  if_a	jmp	#LR__3450
2468c                 | LR__3451
2468c                 | LR__3452
2468c     00 26 0E F2 | 	cmp	local05, #0 wz
24690     13 FB 01 A6 |  if_e	mov	result1, local05
24694     3C 01 90 AD |  if_e	jmp	#LR__3455
24698     13 FD 01 F6 | 	mov	result2, local05
2469c     06 FC 05 F1 | 	add	result2, #6
246a0     FE 2C E2 FA | 	rdword	local08, result2
246a4     14 1F 52 F2 | 	cmps	local01, local06 wc
246a8     C0 00 90 3D |  if_ae	jmp	#LR__3454
246ac     13 1F 52 FC | 	wrword	local01, local05
246b0     13 13 02 F6 | 	mov	arg01, local05
246b4     0F 2D 02 F6 | 	mov	local08, local01
246b8     04 2C 66 F0 | 	shl	local08, #4
246bc     16 13 02 F1 | 	add	arg01, local08
246c0     0F 29 82 F1 | 	sub	local06, local01
246c4     09 29 52 FC | 	wrword	local06, arg01
246c8     09 2D 02 F6 | 	mov	local08, arg01
246cc     02 2C 06 F1 | 	add	local08, #2
246d0     36 00 80 FF 
246d4     16 1F 59 FC | 	wrword	##27791, local08
246d8     13 15 0A F6 | 	mov	arg02, local05 wz
246dc     00 FA 05 A6 |  if_e	mov	result1, #0
246e0     11 15 82 51 |  if_ne	sub	arg02, local03
246e4     04 14 46 50 |  if_ne	shr	arg02, #4
246e8     0A FB 01 56 |  if_ne	mov	result1, arg02
246ec     09 2D 02 F6 | 	mov	local08, arg01
246f0     04 2C 06 F1 | 	add	local08, #4
246f4     16 FB 51 FC | 	wrword	result1, local08
246f8     13 2D 02 F6 | 	mov	local08, local05
246fc     06 2C 06 F1 | 	add	local08, #6
24700     09 15 02 F6 | 	mov	arg02, arg01
24704     16 2D E2 FA | 	rdword	local08, local08
24708     06 14 06 F1 | 	add	arg02, #6
2470c     0A 2D 52 FC | 	wrword	local08, arg02
24710     09 2F 02 F6 | 	mov	local09, arg01
24714     17 15 0A F6 | 	mov	arg02, local09 wz
24718     00 FA 05 A6 |  if_e	mov	result1, #0
2471c     11 15 82 51 |  if_ne	sub	arg02, local03
24720     04 14 46 50 |  if_ne	shr	arg02, #4
24724     0A FB 01 56 |  if_ne	mov	result1, arg02
24728     FD 2C 02 F6 | 	mov	local08, result1
2472c     09 31 EA FA | 	rdword	local10, arg01 wz
24730     00 FA 05 A6 |  if_e	mov	result1, #0
24734     04 30 66 50 |  if_ne	shl	local10, #4
24738     18 13 02 51 |  if_ne	add	arg01, local10
2473c     09 FB 01 56 |  if_ne	mov	result1, arg01
24740     FD 32 0A F6 | 	mov	local11, result1 wz
24744     24 00 90 AD |  if_e	jmp	#LR__3453
24748     12 33 52 F2 | 	cmps	local11, local04 wc
2474c     1C 00 90 3D |  if_ae	jmp	#LR__3453
24750     17 15 0A F6 | 	mov	arg02, local09 wz
24754     00 FA 05 A6 |  if_e	mov	result1, #0
24758     11 15 82 51 |  if_ne	sub	arg02, local03
2475c     04 14 46 50 |  if_ne	shr	arg02, #4
24760     0A FB 01 56 |  if_ne	mov	result1, arg02
24764     04 32 06 F1 | 	add	local11, #4
24768     19 FB 51 FC | 	wrword	result1, local11
2476c                 | LR__3453
2476c                 | LR__3454
2476c     06 2A 06 F1 | 	add	local07, #6
24770     15 2D 52 FC | 	wrword	local08, local07
24774     36 00 00 FF 
24778     80 2E 06 F6 | 	mov	local09, ##27776
2477c     10 2F 42 F5 | 	or	local09, local02
24780     00 FA 05 F6 | 	mov	result1, #0
24784     01 FA 61 FD | 	cogid	result1
24788     FD 2E 42 F5 | 	or	local09, result1
2478c     13 33 02 F6 | 	mov	local11, local05
24790     02 32 06 F1 | 	add	local11, #2
24794     19 2F 52 FC | 	wrword	local09, local11
24798     11 2F 02 F6 | 	mov	local09, local03
2479c     08 2E 06 F1 | 	add	local09, #8
247a0     13 33 02 F6 | 	mov	local11, local05
247a4     17 2F E2 FA | 	rdword	local09, local09
247a8     06 32 06 F1 | 	add	local11, #6
247ac     19 2F 52 FC | 	wrword	local09, local11
247b0     13 15 0A F6 | 	mov	arg02, local05 wz
247b4     00 FA 05 A6 |  if_e	mov	result1, #0
247b8     11 15 82 51 |  if_ne	sub	arg02, local03
247bc     04 14 46 50 |  if_ne	shr	arg02, #4
247c0     0A FB 01 56 |  if_ne	mov	result1, arg02
247c4     08 22 06 F1 | 	add	local03, #8
247c8     11 FB 51 FC | 	wrword	result1, local03
247cc     08 26 06 F1 | 	add	local05, #8
247d0     13 FB 01 F6 | 	mov	result1, local05
247d4                 | LR__3455
247d4     A7 F0 03 F6 | 	mov	ptra, fp
247d8     B2 00 A0 FD | 	call	#popregs_
247dc                 | __system___gc_tryalloc_ret
247dc     2D 00 64 FD | 	ret
247e0                 | 
247e0                 | __system___gc_alloc_managed
247e0     01 4A 05 F6 | 	mov	COUNT_, #1
247e4     A8 00 A0 FD | 	call	#pushregs_
247e8     09 1F 02 F6 | 	mov	local01, arg01
247ec     00 14 06 F6 | 	mov	arg02, #0
247f0     1C 00 B0 FD | 	call	#__system___gc_doalloc
247f4     FD 14 0A F6 | 	mov	arg02, result1 wz
247f8     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
247fc     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
24800     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
24804     A7 F0 03 F6 | 	mov	ptra, fp
24808     B2 00 A0 FD | 	call	#popregs_
2480c                 | __system___gc_alloc_managed_ret
2480c     2D 00 64 FD | 	ret
24810                 | 
24810                 | __system___gc_doalloc
24810     06 4A 05 F6 | 	mov	COUNT_, #6
24814     A8 00 A0 FD | 	call	#pushregs_
24818     09 1F 0A F6 | 	mov	local01, arg01 wz
2481c     0A 21 02 F6 | 	mov	local02, arg02
24820     00 FA 05 A6 |  if_e	mov	result1, #0
24824     8C 00 90 AD |  if_e	jmp	#LR__3467
24828     17 1E 06 F1 | 	add	local01, #23
2482c     0F 1E 26 F5 | 	andn	local01, #15
24830     04 1E 46 F0 | 	shr	local01, #4
24834     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24838     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2483c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
24840     E4 C0 BF FD | 	call	#__system___lockmem
24844     0F 13 02 F6 | 	mov	arg01, local01
24848     10 15 02 F6 | 	mov	arg02, local02
2484c     D8 FD BF FD | 	call	#__system___gc_tryalloc
24850     FD 22 0A F6 | 	mov	local03, result1 wz
24854     14 00 90 5D |  if_ne	jmp	#LR__3460
24858     70 03 B0 FD | 	call	#__system___gc_docollect
2485c     0F 13 02 F6 | 	mov	arg01, local01
24860     10 15 02 F6 | 	mov	arg02, local02
24864     C0 FD BF FD | 	call	#__system___gc_tryalloc
24868     FD 22 02 F6 | 	mov	local03, result1
2486c                 | LR__3460
2486c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24870     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24874     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
24878     09 01 68 FC | 	wrlong	#0, arg01
2487c     00 22 0E F2 | 	cmp	local03, #0 wz
24880     2C 00 90 AD |  if_e	jmp	#LR__3466
24884     04 1E 66 F0 | 	shl	local01, #4
24888     08 1E 86 F1 | 	sub	local01, #8
2488c     0F 25 52 F6 | 	abs	local04, local01 wc
24890     02 24 46 F0 | 	shr	local04, #2
24894     12 27 8A F6 | 	negc	local05, local04 wz
24898     11 29 02 F6 | 	mov	local06, local03
2489c     10 00 90 AD |  if_e	jmp	#LR__3465
248a0     97 06 48 FB | 	callpa	#(@LR__3463-@LR__3461)>>2,fcache_load_ptr_
248a4                 | LR__3461
248a4     13 05 D8 FC | 	rep	@LR__3464, local05
248a8                 | LR__3462
248a8     14 01 68 FC | 	wrlong	#0, local06
248ac     04 28 06 F1 | 	add	local06, #4
248b0                 | LR__3463
248b0                 | LR__3464
248b0                 | LR__3465
248b0                 | LR__3466
248b0     11 FB 01 F6 | 	mov	result1, local03
248b4                 | LR__3467
248b4     A7 F0 03 F6 | 	mov	ptra, fp
248b8     B2 00 A0 FD | 	call	#popregs_
248bc                 | __system___gc_doalloc_ret
248bc     2D 00 64 FD | 	ret
248c0                 | 
248c0                 | __system___gc_isvalidptr
248c0     F8 16 06 F4 | 	bitl	arg03, #248
248c4     08 16 86 F1 | 	sub	arg03, #8
248c8     09 17 52 F2 | 	cmps	arg03, arg01 wc
248cc     08 00 90 CD |  if_b	jmp	#LR__3470
248d0     0A 17 52 F2 | 	cmps	arg03, arg02 wc
248d4     08 00 90 CD |  if_b	jmp	#LR__3471
248d8                 | LR__3470
248d8     00 FA 05 F6 | 	mov	result1, #0
248dc     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
248e0                 | LR__3471
248e0     0B 01 02 F6 | 	mov	_var01, arg03
248e4     09 01 62 F5 | 	xor	_var01, arg01
248e8     0F 00 CE F7 | 	test	_var01, #15 wz
248ec     00 FA 05 56 |  if_ne	mov	result1, #0
248f0     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
248f4     0B 01 02 F6 | 	mov	_var01, arg03
248f8     02 00 06 F1 | 	add	_var01, #2
248fc     00 01 E2 FA | 	rdword	_var01, _var01
24900     7F 00 00 FF 
24904     C0 01 06 F5 | 	and	_var01, ##65472
24908     36 00 00 FF 
2490c     80 00 0E F2 | 	cmp	_var01, ##27776 wz
24910     00 FA 05 56 |  if_ne	mov	result1, #0
24914     0B FB 01 A6 |  if_e	mov	result1, arg03
24918                 | __system___gc_isvalidptr_ret
24918     2D 00 64 FD | 	ret
2491c                 | 
2491c                 | __system___gc_free
2491c     09 17 02 F6 | 	mov	arg03, arg01
24920     6C FC BF FD | 	call	#__system___gc_ptrs
24924     FD 12 02 F6 | 	mov	arg01, result1
24928     FE 14 02 F6 | 	mov	arg02, result2
2492c     90 FF BF FD | 	call	#__system___gc_isvalidptr
24930     FD 14 0A F6 | 	mov	arg02, result1 wz
24934     28 00 90 AD |  if_e	jmp	#LR__3480
24938     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2493c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24940     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
24944     E0 BF BF FD | 	call	#__system___lockmem
24948     0A 13 02 F6 | 	mov	arg01, arg02
2494c     14 00 B0 FD | 	call	#__system___gc_dofree
24950     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24954     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24958     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2495c     09 01 68 FC | 	wrlong	#0, arg01
24960                 | LR__3480
24960                 | __system___gc_free_ret
24960     2D 00 64 FD | 	ret
24964                 | 
24964                 | __system___gc_dofree
24964     06 4A 05 F6 | 	mov	COUNT_, #6
24968     A8 00 A0 FD | 	call	#pushregs_
2496c     09 1F 02 F6 | 	mov	local01, arg01
24970     1C FC BF FD | 	call	#__system___gc_ptrs
24974     FD 20 02 F6 | 	mov	local02, result1
24978     FE 22 02 F6 | 	mov	local03, result2
2497c     0F 15 02 F6 | 	mov	arg02, local01
24980     02 14 06 F1 | 	add	arg02, #2
24984     36 00 80 FF 
24988     0A 1F 59 FC | 	wrword	##27791, arg02
2498c     0F 25 02 F6 | 	mov	local04, local01
24990     0F 13 02 F6 | 	mov	arg01, local01
24994     09 27 EA FA | 	rdword	local05, arg01 wz
24998     00 FA 05 A6 |  if_e	mov	result1, #0
2499c     04 26 66 50 |  if_ne	shl	local05, #4
249a0     13 13 02 51 |  if_ne	add	arg01, local05
249a4     09 FB 01 56 |  if_ne	mov	result1, arg01
249a8     FD 28 02 F6 | 	mov	local06, result1
249ac     97 24 48 FB | 	callpa	#(@LR__3491-@LR__3490)>>2,fcache_load_ptr_
249b0                 | LR__3490
249b0     04 24 06 F1 | 	add	local04, #4
249b4     12 15 EA FA | 	rdword	arg02, local04 wz
249b8     10 13 02 F6 | 	mov	arg01, local02
249bc     00 FA 05 A6 |  if_e	mov	result1, #0
249c0     04 14 66 50 |  if_ne	shl	arg02, #4
249c4     0A 13 02 51 |  if_ne	add	arg01, arg02
249c8     09 FB 01 56 |  if_ne	mov	result1, arg01
249cc     FD 24 0A F6 | 	mov	local04, result1 wz
249d0     24 00 90 AD |  if_e	jmp	#LR__3492
249d4     12 13 02 F6 | 	mov	arg01, local04
249d8     00 FA 05 F6 | 	mov	result1, #0
249dc     02 12 06 F1 | 	add	arg01, #2
249e0     09 13 E2 FA | 	rdword	arg01, arg01
249e4     36 00 00 FF 
249e8     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
249ec     01 FA 65 A6 |  if_e	neg	result1, #1
249f0     00 FA 0D F2 | 	cmp	result1, #0 wz
249f4     B8 FF 9F AD |  if_e	jmp	#LR__3490
249f8                 | LR__3491
249f8                 | LR__3492
249f8     00 24 0E F2 | 	cmp	local04, #0 wz
249fc     10 25 02 A6 |  if_e	mov	local04, local02
24a00     12 15 02 F6 | 	mov	arg02, local04
24a04     06 14 06 F1 | 	add	arg02, #6
24a08     0F 13 02 F6 | 	mov	arg01, local01
24a0c     0A 15 E2 FA | 	rdword	arg02, arg02
24a10     06 12 06 F1 | 	add	arg01, #6
24a14     09 15 52 FC | 	wrword	arg02, arg01
24a18     0F 15 0A F6 | 	mov	arg02, local01 wz
24a1c     00 FA 05 A6 |  if_e	mov	result1, #0
24a20     10 15 82 51 |  if_ne	sub	arg02, local02
24a24     04 14 46 50 |  if_ne	shr	arg02, #4
24a28     0A FB 01 56 |  if_ne	mov	result1, arg02
24a2c     12 15 02 F6 | 	mov	arg02, local04
24a30     06 14 06 F1 | 	add	arg02, #6
24a34     0A FB 51 FC | 	wrword	result1, arg02
24a38     10 25 0A F2 | 	cmp	local04, local02 wz
24a3c     A4 00 90 AD |  if_e	jmp	#LR__3495
24a40     12 13 02 F6 | 	mov	arg01, local04
24a44     09 27 EA FA | 	rdword	local05, arg01 wz
24a48     00 FA 05 A6 |  if_e	mov	result1, #0
24a4c     04 26 66 50 |  if_ne	shl	local05, #4
24a50     13 13 02 51 |  if_ne	add	arg01, local05
24a54     09 FB 01 56 |  if_ne	mov	result1, arg01
24a58     0F FB 09 F2 | 	cmp	result1, local01 wz
24a5c     84 00 90 5D |  if_ne	jmp	#LR__3494
24a60     12 29 E2 FA | 	rdword	local06, local04
24a64     0F 15 E2 FA | 	rdword	arg02, local01
24a68     0A 29 02 F1 | 	add	local06, arg02
24a6c     12 29 52 FC | 	wrword	local06, local04
24a70     0F 29 02 F6 | 	mov	local06, local01
24a74     02 28 06 F1 | 	add	local06, #2
24a78     14 01 58 FC | 	wrword	#0, local06
24a7c     0F 13 02 F6 | 	mov	arg01, local01
24a80     09 27 EA FA | 	rdword	local05, arg01 wz
24a84     00 FA 05 A6 |  if_e	mov	result1, #0
24a88     04 26 66 50 |  if_ne	shl	local05, #4
24a8c     13 13 02 51 |  if_ne	add	arg01, local05
24a90     09 FB 01 56 |  if_ne	mov	result1, arg01
24a94     FD 28 02 F6 | 	mov	local06, result1
24a98     11 29 52 F2 | 	cmps	local06, local03 wc
24a9c     20 00 90 3D |  if_ae	jmp	#LR__3493
24aa0     12 15 0A F6 | 	mov	arg02, local04 wz
24aa4     00 FA 05 A6 |  if_e	mov	result1, #0
24aa8     10 15 82 51 |  if_ne	sub	arg02, local02
24aac     04 14 46 50 |  if_ne	shr	arg02, #4
24ab0     0A FB 01 56 |  if_ne	mov	result1, arg02
24ab4     14 15 02 F6 | 	mov	arg02, local06
24ab8     04 14 06 F1 | 	add	arg02, #4
24abc     0A FB 51 FC | 	wrword	result1, arg02
24ac0                 | LR__3493
24ac0     0F 15 02 F6 | 	mov	arg02, local01
24ac4     06 14 06 F1 | 	add	arg02, #6
24ac8     12 FD 01 F6 | 	mov	result2, local04
24acc     0A 15 E2 FA | 	rdword	arg02, arg02
24ad0     06 FC 05 F1 | 	add	result2, #6
24ad4     FE 14 52 FC | 	wrword	arg02, result2
24ad8     06 1E 06 F1 | 	add	local01, #6
24adc     0F 01 58 FC | 	wrword	#0, local01
24ae0     12 1F 02 F6 | 	mov	local01, local04
24ae4                 | LR__3494
24ae4                 | LR__3495
24ae4     0F 13 02 F6 | 	mov	arg01, local01
24ae8     09 27 EA FA | 	rdword	local05, arg01 wz
24aec     00 FA 05 A6 |  if_e	mov	result1, #0
24af0     04 26 66 50 |  if_ne	shl	local05, #4
24af4     13 13 02 51 |  if_ne	add	arg01, local05
24af8     09 FB 01 56 |  if_ne	mov	result1, arg01
24afc     FD 14 0A F6 | 	mov	arg02, result1 wz
24b00     B8 00 90 AD |  if_e	jmp	#LR__3497
24b04     11 15 52 F2 | 	cmps	arg02, local03 wc
24b08     B0 00 90 3D |  if_ae	jmp	#LR__3497
24b0c     0A 13 02 F6 | 	mov	arg01, arg02
24b10     00 FA 05 F6 | 	mov	result1, #0
24b14     02 12 06 F1 | 	add	arg01, #2
24b18     09 13 E2 FA | 	rdword	arg01, arg01
24b1c     36 00 00 FF 
24b20     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24b24     01 FA 65 A6 |  if_e	neg	result1, #1
24b28     00 FA 0D F2 | 	cmp	result1, #0 wz
24b2c     8C 00 90 AD |  if_e	jmp	#LR__3497
24b30     0F 25 02 F6 | 	mov	local04, local01
24b34     12 29 E2 FA | 	rdword	local06, local04
24b38     0A 13 02 F6 | 	mov	arg01, arg02
24b3c     09 1F E2 FA | 	rdword	local01, arg01
24b40     0F 29 02 F1 | 	add	local06, local01
24b44     12 29 52 FC | 	wrword	local06, local04
24b48     09 29 02 F6 | 	mov	local06, arg01
24b4c     06 28 06 F1 | 	add	local06, #6
24b50     12 1F 02 F6 | 	mov	local01, local04
24b54     14 29 E2 FA | 	rdword	local06, local06
24b58     06 1E 06 F1 | 	add	local01, #6
24b5c     0F 29 52 FC | 	wrword	local06, local01
24b60     09 29 02 F6 | 	mov	local06, arg01
24b64     02 28 06 F1 | 	add	local06, #2
24b68     14 55 59 FC | 	wrword	#170, local06
24b6c     09 29 02 F6 | 	mov	local06, arg01
24b70     06 28 06 F1 | 	add	local06, #6
24b74     14 01 58 FC | 	wrword	#0, local06
24b78     09 27 EA FA | 	rdword	local05, arg01 wz
24b7c     00 FA 05 A6 |  if_e	mov	result1, #0
24b80     04 26 66 50 |  if_ne	shl	local05, #4
24b84     13 13 02 51 |  if_ne	add	arg01, local05
24b88     09 FB 01 56 |  if_ne	mov	result1, arg01
24b8c     FD 28 0A F6 | 	mov	local06, result1 wz
24b90     28 00 90 AD |  if_e	jmp	#LR__3496
24b94     11 29 52 F2 | 	cmps	local06, local03 wc
24b98     20 00 90 3D |  if_ae	jmp	#LR__3496
24b9c     12 15 0A F6 | 	mov	arg02, local04 wz
24ba0     00 FA 05 A6 |  if_e	mov	result1, #0
24ba4     10 15 82 51 |  if_ne	sub	arg02, local02
24ba8     04 14 46 50 |  if_ne	shr	arg02, #4
24bac     0A FB 01 56 |  if_ne	mov	result1, arg02
24bb0     14 25 02 F6 | 	mov	local04, local06
24bb4     04 24 06 F1 | 	add	local04, #4
24bb8     12 FB 51 FC | 	wrword	result1, local04
24bbc                 | LR__3496
24bbc                 | LR__3497
24bbc     14 FB 01 F6 | 	mov	result1, local06
24bc0     A7 F0 03 F6 | 	mov	ptra, fp
24bc4     B2 00 A0 FD | 	call	#popregs_
24bc8                 | __system___gc_dofree_ret
24bc8     2D 00 64 FD | 	ret
24bcc                 | 
24bcc                 | __system___gc_docollect
24bcc     05 4A 05 F6 | 	mov	COUNT_, #5
24bd0     A8 00 A0 FD | 	call	#pushregs_
24bd4     B8 F9 BF FD | 	call	#__system___gc_ptrs
24bd8     FE 1E 02 F6 | 	mov	local01, result2
24bdc     FD 20 02 F6 | 	mov	local02, result1
24be0     10 13 02 F6 | 	mov	arg01, local02
24be4     09 23 EA FA | 	rdword	local03, arg01 wz
24be8     00 FA 05 A6 |  if_e	mov	result1, #0
24bec     04 22 66 50 |  if_ne	shl	local03, #4
24bf0     11 13 02 51 |  if_ne	add	arg01, local03
24bf4     09 FB 01 56 |  if_ne	mov	result1, arg01
24bf8     FD 24 0A F6 | 	mov	local04, result1 wz
24bfc     00 FA 05 F6 | 	mov	result1, #0
24c00     01 FA 61 FD | 	cogid	result1
24c04     FD 26 02 F6 | 	mov	local05, result1
24c08     48 00 90 AD |  if_e	jmp	#LR__3502
24c0c     97 22 48 FB | 	callpa	#(@LR__3501-@LR__3500)>>2,fcache_load_ptr_
24c10                 | LR__3500
24c10     0F 25 52 F2 | 	cmps	local04, local01 wc
24c14     3C 00 90 3D |  if_ae	jmp	#LR__3502
24c18     12 15 02 F6 | 	mov	arg02, local04
24c1c     02 14 06 F1 | 	add	arg02, #2
24c20     0A 15 E2 FA | 	rdword	arg02, arg02
24c24     20 14 26 F5 | 	andn	arg02, #32
24c28     12 13 02 F6 | 	mov	arg01, local04
24c2c     02 12 06 F1 | 	add	arg01, #2
24c30     09 15 52 FC | 	wrword	arg02, arg01
24c34     12 13 02 F6 | 	mov	arg01, local04
24c38     09 23 EA FA | 	rdword	local03, arg01 wz
24c3c     00 FA 05 A6 |  if_e	mov	result1, #0
24c40     04 22 66 50 |  if_ne	shl	local03, #4
24c44     11 13 02 51 |  if_ne	add	arg01, local03
24c48     09 FB 01 56 |  if_ne	mov	result1, arg01
24c4c     FD 24 0A F6 | 	mov	local04, result1 wz
24c50     BC FF 9F 5D |  if_ne	jmp	#LR__3500
24c54                 | LR__3501
24c54                 | LR__3502
24c54     00 22 06 F6 | 	mov	local03, #0
24c58     00 12 06 F6 | 	mov	arg01, #0
24c5c     A0 BC BF FD | 	call	#__system____topofstack
24c60     FD 14 02 F6 | 	mov	arg02, result1
24c64     11 13 02 F6 | 	mov	arg01, local03
24c68     90 00 B0 FD | 	call	#__system___gc_markhub
24c6c     1C 01 B0 FD | 	call	#__system___gc_markcog
24c70     10 13 02 F6 | 	mov	arg01, local02
24c74     09 23 EA FA | 	rdword	local03, arg01 wz
24c78     00 FA 05 A6 |  if_e	mov	result1, #0
24c7c     04 22 66 50 |  if_ne	shl	local03, #4
24c80     11 13 02 51 |  if_ne	add	arg01, local03
24c84     09 FB 01 56 |  if_ne	mov	result1, arg01
24c88     FD 20 0A F6 | 	mov	local02, result1 wz
24c8c     60 00 90 AD |  if_e	jmp	#LR__3506
24c90                 | LR__3503
24c90     10 25 02 F6 | 	mov	local04, local02
24c94     12 13 02 F6 | 	mov	arg01, local04
24c98     09 23 EA FA | 	rdword	local03, arg01 wz
24c9c     00 FA 05 A6 |  if_e	mov	result1, #0
24ca0     04 22 66 50 |  if_ne	shl	local03, #4
24ca4     11 13 02 51 |  if_ne	add	arg01, local03
24ca8     09 FB 01 56 |  if_ne	mov	result1, arg01
24cac     FD 20 02 F6 | 	mov	local02, result1
24cb0     12 15 02 F6 | 	mov	arg02, local04
24cb4     02 14 06 F1 | 	add	arg02, #2
24cb8     0A 15 E2 FA | 	rdword	arg02, arg02
24cbc     20 14 CE F7 | 	test	arg02, #32 wz
24cc0     10 14 CE A7 |  if_e	test	arg02, #16 wz
24cc4     1C 00 90 5D |  if_ne	jmp	#LR__3505
24cc8     0A 15 42 F8 | 	getnib	arg02, arg02, #0
24ccc     13 15 0A F2 | 	cmp	arg02, local05 wz
24cd0     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
24cd4     0C 00 90 5D |  if_ne	jmp	#LR__3504
24cd8     12 13 02 F6 | 	mov	arg01, local04
24cdc     84 FC BF FD | 	call	#__system___gc_dofree
24ce0     FD 20 02 F6 | 	mov	local02, result1
24ce4                 | LR__3504
24ce4                 | LR__3505
24ce4     00 20 0E F2 | 	cmp	local02, #0 wz
24ce8     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
24cec     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3503
24cf0                 | LR__3506
24cf0     A7 F0 03 F6 | 	mov	ptra, fp
24cf4     B2 00 A0 FD | 	call	#popregs_
24cf8                 | __system___gc_docollect_ret
24cf8     2D 00 64 FD | 	ret
24cfc                 | 
24cfc                 | __system___gc_markhub
24cfc     04 4A 05 F6 | 	mov	COUNT_, #4
24d00     A8 00 A0 FD | 	call	#pushregs_
24d04     09 1F 02 F6 | 	mov	local01, arg01
24d08     0A 21 02 F6 | 	mov	local02, arg02
24d0c     80 F8 BF FD | 	call	#__system___gc_ptrs
24d10     FD 22 02 F6 | 	mov	local03, result1
24d14     FE 24 02 F6 | 	mov	local04, result2
24d18                 | LR__3510
24d18     10 1F 52 F2 | 	cmps	local01, local02 wc
24d1c     60 00 90 3D |  if_ae	jmp	#LR__3511
24d20     0F 17 02 FB | 	rdlong	arg03, local01
24d24     04 1E 06 F1 | 	add	local01, #4
24d28     12 15 02 F6 | 	mov	arg02, local04
24d2c     11 13 02 F6 | 	mov	arg01, local03
24d30     8C FB BF FD | 	call	#__system___gc_isvalidptr
24d34     FD 16 0A F6 | 	mov	arg03, result1 wz
24d38     DC FF 9F AD |  if_e	jmp	#LR__3510
24d3c     0B 13 02 F6 | 	mov	arg01, arg03
24d40     00 FA 05 F6 | 	mov	result1, #0
24d44     02 12 06 F1 | 	add	arg01, #2
24d48     09 13 E2 FA | 	rdword	arg01, arg01
24d4c     36 00 00 FF 
24d50     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24d54     01 FA 65 A6 |  if_e	neg	result1, #1
24d58     00 FA 0D F2 | 	cmp	result1, #0 wz
24d5c     B8 FF 9F 5D |  if_ne	jmp	#LR__3510
24d60     0B FD 01 F6 | 	mov	result2, arg03
24d64     02 FC 05 F1 | 	add	result2, #2
24d68     FE FC E1 FA | 	rdword	result2, result2
24d6c     0F FC 25 F5 | 	andn	result2, #15
24d70     2E FC 45 F5 | 	or	result2, #46
24d74     02 16 06 F1 | 	add	arg03, #2
24d78     0B FD 51 FC | 	wrword	result2, arg03
24d7c     98 FF 9F FD | 	jmp	#LR__3510
24d80                 | LR__3511
24d80     A7 F0 03 F6 | 	mov	ptra, fp
24d84     B2 00 A0 FD | 	call	#popregs_
24d88                 | __system___gc_markhub_ret
24d88     2D 00 64 FD | 	ret
24d8c                 | 
24d8c                 | __system___gc_markcog
24d8c     04 4A 05 F6 | 	mov	COUNT_, #4
24d90     A8 00 A0 FD | 	call	#pushregs_
24d94     F8 F7 BF FD | 	call	#__system___gc_ptrs
24d98     FD 1E 02 F6 | 	mov	local01, result1
24d9c     FE 20 02 F6 | 	mov	local02, result2
24da0     EF 23 06 F6 | 	mov	local03, #495
24da4                 | LR__3520
24da4                 | 	'.live	local03
24da4     00 22 96 F9 | 	alts	local03, #0
24da8     11 25 02 F6 | 	mov	local04, local03
24dac     0F 13 02 F6 | 	mov	arg01, local01
24db0     10 15 02 F6 | 	mov	arg02, local02
24db4     12 17 02 F6 | 	mov	arg03, local04
24db8     04 FB BF FD | 	call	#__system___gc_isvalidptr
24dbc     00 FA 0D F2 | 	cmp	result1, #0 wz
24dc0     18 00 90 AD |  if_e	jmp	#LR__3521
24dc4     FD 24 02 F6 | 	mov	local04, result1
24dc8     02 24 06 F1 | 	add	local04, #2
24dcc     12 25 E2 FA | 	rdword	local04, local04
24dd0     20 24 46 F5 | 	or	local04, #32
24dd4     02 FA 05 F1 | 	add	result1, #2
24dd8     FD 24 52 FC | 	wrword	local04, result1
24ddc                 | LR__3521
24ddc     01 22 86 F1 | 	sub	local03, #1
24de0     00 22 56 F2 | 	cmps	local03, #0 wc
24de4     BC FF 9F 3D |  if_ae	jmp	#LR__3520
24de8     A7 F0 03 F6 | 	mov	ptra, fp
24dec     B2 00 A0 FD | 	call	#popregs_
24df0                 | __system___gc_markcog_ret
24df0     2D 00 64 FD | 	ret
24df4                 | 
24df4                 | __system__opendir
24df4     06 4A 05 F6 | 	mov	COUNT_, #6
24df8     A8 00 A0 FD | 	call	#pushregs_
24dfc     84 E7 05 F1 | 	add	ptr___system__dat__, #388
24e00     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
24e04     09 15 02 F6 | 	mov	arg02, arg01
24e08     0F 13 02 F6 | 	mov	arg01, local01
24e0c     00 16 06 F6 | 	mov	arg03, #0
24e10     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
24e14     A8 C2 BF FD | 	call	#__system____getvfsforfile
24e18     FD 20 0A F6 | 	mov	local02, result1 wz
24e1c     10 00 90 AD |  if_e	jmp	#LR__3530
24e20     28 20 06 F1 | 	add	local02, #40
24e24     10 17 0A FB | 	rdlong	arg03, local02 wz
24e28     28 20 86 F1 | 	sub	local02, #40
24e2c     14 00 90 5D |  if_ne	jmp	#LR__3531
24e30                 | LR__3530
24e30     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24e34     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
24e38     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24e3c     00 FA 05 F6 | 	mov	result1, #0
24e40     90 00 90 FD | 	jmp	#LR__3533
24e44                 | LR__3531
24e44     5C 12 06 F6 | 	mov	arg01, #92
24e48     10 14 06 F6 | 	mov	arg02, #16
24e4c     C0 F9 BF FD | 	call	#__system___gc_doalloc
24e50     FD 22 0A F6 | 	mov	local03, result1 wz
24e54     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
24e58     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
24e5c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
24e60     00 FA 05 A6 |  if_e	mov	result1, #0
24e64     6C 00 90 AD |  if_e	jmp	#LR__3533
24e68     28 20 06 F1 | 	add	local02, #40
24e6c     10 25 02 FB | 	rdlong	local04, local02
24e70     12 27 02 F6 | 	mov	local05, local04
24e74     28 20 86 F1 | 	sub	local02, #40
24e78     13 26 46 F7 | 	zerox	local05, #19
24e7c     14 24 46 F0 | 	shr	local04, #20
24e80     02 24 66 F0 | 	shl	local04, #2
24e84     ED 24 02 F1 | 	add	local04, __methods__
24e88     12 25 02 FB | 	rdlong	local04, local04
24e8c     11 13 02 F6 | 	mov	arg01, local03
24e90     0F 15 02 F6 | 	mov	arg02, local01
24e94     F2 28 02 F6 | 	mov	local06, objptr
24e98     13 E5 01 F6 | 	mov	objptr, local05
24e9c     2D 24 62 FD | 	call	local04
24ea0     14 E5 01 F6 | 	mov	objptr, local06
24ea4     FD 16 0A F6 | 	mov	arg03, result1 wz
24ea8     20 00 90 AD |  if_e	jmp	#LR__3532
24eac     00 16 4E F2 | 	cmps	arg03, #0 wz
24eb0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24eb4     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
24eb8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24ebc     11 13 02 F6 | 	mov	arg01, local03
24ec0     58 FA BF FD | 	call	#__system___gc_free
24ec4     00 FA 05 F6 | 	mov	result1, #0
24ec8     08 00 90 FD | 	jmp	#LR__3533
24ecc                 | LR__3532
24ecc     11 21 62 FC | 	wrlong	local02, local03
24ed0     11 FB 01 F6 | 	mov	result1, local03
24ed4                 | LR__3533
24ed4     A7 F0 03 F6 | 	mov	ptra, fp
24ed8     B2 00 A0 FD | 	call	#popregs_
24edc                 | __system__opendir_ret
24edc     2D 00 64 FD | 	ret
24ee0                 | 
24ee0                 | __system__closedir
24ee0     04 4A 05 F6 | 	mov	COUNT_, #4
24ee4     A8 00 A0 FD | 	call	#pushregs_
24ee8     09 1F 02 F6 | 	mov	local01, arg01
24eec     0F 13 02 FB | 	rdlong	arg01, local01
24ef0     2C 12 06 F1 | 	add	arg01, #44
24ef4     09 21 02 FB | 	rdlong	local02, arg01
24ef8     10 23 02 F6 | 	mov	local03, local02
24efc     13 22 46 F7 | 	zerox	local03, #19
24f00     14 20 46 F0 | 	shr	local02, #20
24f04     02 20 66 F0 | 	shl	local02, #2
24f08     ED 20 02 F1 | 	add	local02, __methods__
24f0c     10 21 02 FB | 	rdlong	local02, local02
24f10     0F 13 02 F6 | 	mov	arg01, local01
24f14     F2 24 02 F6 | 	mov	local04, objptr
24f18     11 E5 01 F6 | 	mov	objptr, local03
24f1c     2D 20 62 FD | 	call	local02
24f20     12 E5 01 F6 | 	mov	objptr, local04
24f24     FD 24 02 F6 | 	mov	local04, result1
24f28     0F 13 02 F6 | 	mov	arg01, local01
24f2c     EC F9 BF FD | 	call	#__system___gc_free
24f30     00 24 4E F2 | 	cmps	local04, #0 wz
24f34     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24f38     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
24f3c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24f40     01 FA 65 56 |  if_ne	neg	result1, #1
24f44     00 FA 05 A6 |  if_e	mov	result1, #0
24f48     A7 F0 03 F6 | 	mov	ptra, fp
24f4c     B2 00 A0 FD | 	call	#popregs_
24f50                 | __system__closedir_ret
24f50     2D 00 64 FD | 	ret
24f54                 | 
24f54                 | __system__readdir
24f54     04 4A 05 F6 | 	mov	COUNT_, #4
24f58     A8 00 A0 FD | 	call	#pushregs_
24f5c     09 15 0A FB | 	rdlong	arg02, arg01 wz
24f60     08 12 06 F1 | 	add	arg01, #8
24f64     09 1F 02 F6 | 	mov	local01, arg01
24f68     08 12 86 F1 | 	sub	arg01, #8
24f6c     00 FA 05 A6 |  if_e	mov	result1, #0
24f70     5C 00 90 AD |  if_e	jmp	#LR__3541
24f74     30 14 06 F1 | 	add	arg02, #48
24f78     0A 21 02 FB | 	rdlong	local02, arg02
24f7c     10 23 02 F6 | 	mov	local03, local02
24f80     13 22 46 F7 | 	zerox	local03, #19
24f84     14 20 46 F0 | 	shr	local02, #20
24f88     02 20 66 F0 | 	shl	local02, #2
24f8c     ED 20 02 F1 | 	add	local02, __methods__
24f90     10 21 02 FB | 	rdlong	local02, local02
24f94     0F 15 02 F6 | 	mov	arg02, local01
24f98     F2 24 02 F6 | 	mov	local04, objptr
24f9c     11 E5 01 F6 | 	mov	objptr, local03
24fa0     2D 20 62 FD | 	call	local02
24fa4     12 E5 01 F6 | 	mov	objptr, local04
24fa8     00 FA 4D F2 | 	cmps	result1, #0 wz
24fac     1C 00 90 AD |  if_e	jmp	#LR__3540
24fb0     01 FA 55 F2 | 	cmps	result1, #1 wc
24fb4     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
24fb8     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
24fbc     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
24fc0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
24fc4     00 FA 05 F6 | 	mov	result1, #0
24fc8     04 00 90 FD | 	jmp	#LR__3541
24fcc                 | LR__3540
24fcc     0F FB 01 F6 | 	mov	result1, local01
24fd0                 | LR__3541
24fd0     A7 F0 03 F6 | 	mov	ptra, fp
24fd4     B2 00 A0 FD | 	call	#popregs_
24fd8                 | __system__readdir_ret
24fd8     2D 00 64 FD | 	ret
24fdc                 | 
24fdc                 | __system___openraw
24fdc     15 4A 05 F6 | 	mov	COUNT_, #21
24fe0     A8 00 A0 FD | 	call	#pushregs_
24fe4     09 1F 02 F6 | 	mov	local01, arg01
24fe8     0A 21 02 F6 | 	mov	local02, arg02
24fec     0B 23 02 F6 | 	mov	local03, arg03
24ff0     0C 25 02 F6 | 	mov	local04, arg04
24ff4     04 26 06 F6 | 	mov	local05, #4
24ff8     0F 29 02 F6 | 	mov	local06, local01
24ffc     00 2A 06 F6 | 	mov	local07, #0
25000     84 E7 05 F1 | 	add	ptr___system__dat__, #388
25004     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
25008     16 13 02 F6 | 	mov	arg01, local08
2500c     10 15 02 F6 | 	mov	arg02, local02
25010     00 16 06 F6 | 	mov	arg03, #0
25014     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
25018     A4 C0 BF FD | 	call	#__system____getvfsforfile
2501c     FD 2E 0A F6 | 	mov	local09, result1 wz
25020     10 00 90 AD |  if_e	jmp	#LR__3550
25024     20 2E 06 F1 | 	add	local09, #32
25028     17 FB 09 FB | 	rdlong	result1, local09 wz
2502c     20 2E 86 F1 | 	sub	local09, #32
25030     14 00 90 5D |  if_ne	jmp	#LR__3551
25034                 | LR__3550
25034     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25038     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2503c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25040     01 FA 65 F6 | 	neg	result1, #1
25044     8C 02 90 FD | 	jmp	#LR__3564
25048                 | LR__3551
25048     14 13 02 F6 | 	mov	arg01, local06
2504c     00 14 06 F6 | 	mov	arg02, #0
25050     34 16 06 F6 | 	mov	arg03, #52
25054     09 31 02 F6 | 	mov	local10, arg01
25058     98 00 A0 FD | 	call	#\builtin_bytefill_
2505c     20 2E 06 F1 | 	add	local09, #32
25060     17 33 02 FB | 	rdlong	local11, local09
25064     19 35 02 F6 | 	mov	local12, local11
25068     19 37 02 F6 | 	mov	local13, local11
2506c     20 2E 86 F1 | 	sub	local09, #32
25070     1B 39 02 F6 | 	mov	local14, local13
25074     13 34 46 F7 | 	zerox	local12, #19
25078     14 38 46 F0 | 	shr	local14, #20
2507c     02 38 66 F0 | 	shl	local14, #2
25080     ED 38 02 F1 | 	add	local14, __methods__
25084     1C 39 02 FB | 	rdlong	local14, local14
25088     14 3B 02 F6 | 	mov	local15, local06
2508c     16 3D 02 F6 | 	mov	local16, local08
25090     11 3F 02 F6 | 	mov	local17, local03
25094     1D 13 02 F6 | 	mov	arg01, local15
25098     1E 15 02 F6 | 	mov	arg02, local16
2509c     1F 17 02 F6 | 	mov	arg03, local17
250a0     F2 40 02 F6 | 	mov	local18, objptr
250a4     1A E5 01 F6 | 	mov	objptr, local12
250a8     2D 38 62 FD | 	call	local14
250ac     20 E5 01 F6 | 	mov	objptr, local18
250b0     FD 42 0A F6 | 	mov	local19, result1 wz
250b4     04 22 CE 57 |  if_ne	test	local03, #4 wz
250b8     58 00 90 AD |  if_e	jmp	#LR__3552
250bc     24 2E 06 F1 | 	add	local09, #36
250c0     17 33 02 FB | 	rdlong	local11, local09
250c4     19 35 02 F6 | 	mov	local12, local11
250c8     19 37 02 F6 | 	mov	local13, local11
250cc     24 2E 86 F1 | 	sub	local09, #36
250d0     1B 39 02 F6 | 	mov	local14, local13
250d4     13 34 46 F7 | 	zerox	local12, #19
250d8     14 38 46 F0 | 	shr	local14, #20
250dc     02 38 66 F0 | 	shl	local14, #2
250e0     ED 38 02 F1 | 	add	local14, __methods__
250e4     1C 39 02 FB | 	rdlong	local14, local14
250e8     14 3B 02 F6 | 	mov	local15, local06
250ec     16 3D 02 F6 | 	mov	local16, local08
250f0     12 3F 02 F6 | 	mov	local17, local04
250f4     1D 13 02 F6 | 	mov	arg01, local15
250f8     1E 15 02 F6 | 	mov	arg02, local16
250fc     1F 17 02 F6 | 	mov	arg03, local17
25100     F2 40 02 F6 | 	mov	local18, objptr
25104     1A E5 01 F6 | 	mov	objptr, local12
25108     2D 38 62 FD | 	call	local14
2510c     20 E5 01 F6 | 	mov	objptr, local18
25110     FD 42 02 F6 | 	mov	local19, result1
25114                 | LR__3552
25114     00 42 0E F2 | 	cmp	local19, #0 wz
25118     8C 01 90 5D |  if_ne	jmp	#LR__3562
2511c     11 45 02 F6 | 	mov	local20, local03
25120     03 44 0E F5 | 	and	local20, #3 wz
25124     02 26 46 55 |  if_ne	or	local05, #2
25128     01 44 0E F2 | 	cmp	local20, #1 wz
2512c     01 26 46 55 |  if_ne	or	local05, #1
25130     20 22 CE F7 | 	test	local03, #32 wz
25134     C0 26 46 55 |  if_ne	or	local05, #192
25138     08 28 06 F1 | 	add	local06, #8
2513c     14 27 62 FC | 	wrlong	local05, local06
25140     0C 28 06 F1 | 	add	local06, #12
25144     14 47 0A FB | 	rdlong	local21, local06 wz
25148     14 28 86 F1 | 	sub	local06, #20
2514c     18 00 90 5D |  if_ne	jmp	#LR__3553
25150     04 2E 06 F1 | 	add	local09, #4
25154     17 47 02 FB | 	rdlong	local21, local09
25158     04 2E 86 F1 | 	sub	local09, #4
2515c     14 28 06 F1 | 	add	local06, #20
25160     14 47 62 FC | 	wrlong	local21, local06
25164     14 28 86 F1 | 	sub	local06, #20
25168                 | LR__3553
25168     18 28 06 F1 | 	add	local06, #24
2516c     14 47 0A FB | 	rdlong	local21, local06 wz
25170     18 28 86 F1 | 	sub	local06, #24
25174     18 00 90 5D |  if_ne	jmp	#LR__3554
25178     08 2E 06 F1 | 	add	local09, #8
2517c     17 47 02 FB | 	rdlong	local21, local09
25180     08 2E 86 F1 | 	sub	local09, #8
25184     18 28 06 F1 | 	add	local06, #24
25188     14 47 62 FC | 	wrlong	local21, local06
2518c     18 28 86 F1 | 	sub	local06, #24
25190                 | LR__3554
25190     24 28 06 F1 | 	add	local06, #36
25194     14 47 0A FB | 	rdlong	local21, local06 wz
25198     24 28 86 F1 | 	sub	local06, #36
2519c     17 47 02 AB |  if_e	rdlong	local21, local09
251a0     24 28 06 A1 |  if_e	add	local06, #36
251a4     14 47 62 AC |  if_e	wrlong	local21, local06
251a8     24 28 86 A1 |  if_e	sub	local06, #36
251ac     28 28 06 F1 | 	add	local06, #40
251b0     14 47 0A FB | 	rdlong	local21, local06 wz
251b4     28 28 86 F1 | 	sub	local06, #40
251b8     18 00 90 5D |  if_ne	jmp	#LR__3555
251bc     10 2E 06 F1 | 	add	local09, #16
251c0     17 47 02 FB | 	rdlong	local21, local09
251c4     10 2E 86 F1 | 	sub	local09, #16
251c8     28 28 06 F1 | 	add	local06, #40
251cc     14 47 62 FC | 	wrlong	local21, local06
251d0     28 28 86 F1 | 	sub	local06, #40
251d4                 | LR__3555
251d4     30 28 06 F1 | 	add	local06, #48
251d8     14 47 0A FB | 	rdlong	local21, local06 wz
251dc     30 28 86 F1 | 	sub	local06, #48
251e0     18 00 90 5D |  if_ne	jmp	#LR__3556
251e4     0C 2E 06 F1 | 	add	local09, #12
251e8     17 47 02 FB | 	rdlong	local21, local09
251ec     0C 2E 86 F1 | 	sub	local09, #12
251f0     30 28 06 F1 | 	add	local06, #48
251f4     14 47 62 FC | 	wrlong	local21, local06
251f8     30 28 86 F1 | 	sub	local06, #48
251fc                 | LR__3556
251fc     1C 28 06 F1 | 	add	local06, #28
25200     14 47 0A FB | 	rdlong	local21, local06 wz
25204     1C 28 86 F1 | 	sub	local06, #28
25208     1C 00 90 5D |  if_ne	jmp	#LR__3557
2520c     01 2A 06 F6 | 	mov	local07, #1
25210     F2 12 02 F6 | 	mov	arg01, objptr
25214     00 D0 04 FF 
25218     00 12 46 F5 | 	or	arg01, ##161480704
2521c     1C 28 06 F1 | 	add	local06, #28
25220     14 13 62 FC | 	wrlong	arg01, local06
25224     1C 28 86 F1 | 	sub	local06, #28
25228                 | LR__3557
25228     20 28 06 F1 | 	add	local06, #32
2522c     14 47 0A FB | 	rdlong	local21, local06 wz
25230     20 28 86 F1 | 	sub	local06, #32
25234     1C 00 90 5D |  if_ne	jmp	#LR__3558
25238     01 2A 06 F6 | 	mov	local07, #1
2523c     F2 12 02 F6 | 	mov	arg01, objptr
25240     00 D8 04 FF 
25244     00 12 46 F5 | 	or	arg01, ##162529280
25248     20 28 06 F1 | 	add	local06, #32
2524c     14 13 62 FC | 	wrlong	arg01, local06
25250     20 28 86 F1 | 	sub	local06, #32
25254                 | LR__3558
25254     2C 28 06 F1 | 	add	local06, #44
25258     14 47 0A FB | 	rdlong	local21, local06 wz
2525c     2C 28 86 F1 | 	sub	local06, #44
25260     44 00 90 5D |  if_ne	jmp	#LR__3561
25264     14 2E 06 F1 | 	add	local09, #20
25268     17 47 0A FB | 	rdlong	local21, local09 wz
2526c     14 2E 86 F1 | 	sub	local09, #20
25270     18 00 90 AD |  if_e	jmp	#LR__3559
25274     14 2E 06 F1 | 	add	local09, #20
25278     17 47 02 FB | 	rdlong	local21, local09
2527c     2C 28 06 F1 | 	add	local06, #44
25280     14 47 62 FC | 	wrlong	local21, local06
25284     2C 28 86 F1 | 	sub	local06, #44
25288     1C 00 90 FD | 	jmp	#LR__3560
2528c                 | LR__3559
2528c     01 2A 06 F6 | 	mov	local07, #1
25290     F2 12 02 F6 | 	mov	arg01, objptr
25294     00 E0 04 FF 
25298     00 12 46 F5 | 	or	arg01, ##163577856
2529c     2C 28 06 F1 | 	add	local06, #44
252a0     14 13 62 FC | 	wrlong	arg01, local06
252a4     2C 28 86 F1 | 	sub	local06, #44
252a8                 | LR__3560
252a8                 | LR__3561
252a8                 | LR__3562
252a8     00 2A 0E F2 | 	cmp	local07, #0 wz
252ac     14 13 02 56 |  if_ne	mov	arg01, local06
252b0     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
252b4     00 42 0E F2 | 	cmp	local19, #0 wz
252b8     00 12 06 A6 |  if_e	mov	arg01, #0
252bc     10 00 90 5D |  if_ne	jmp	#LR__3563
252c0     00 12 4E F2 | 	cmps	arg01, #0 wz
252c4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
252c8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
252cc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
252d0                 | LR__3563
252d0     21 FB 01 F6 | 	mov	result1, local19
252d4                 | LR__3564
252d4     A7 F0 03 F6 | 	mov	ptra, fp
252d8     B2 00 A0 FD | 	call	#popregs_
252dc                 | __system___openraw_ret
252dc     2D 00 64 FD | 	ret
252e0                 | 
252e0                 | __system___closeraw
252e0     05 4A 05 F6 | 	mov	COUNT_, #5
252e4     A8 00 A0 FD | 	call	#pushregs_
252e8     09 1F 02 F6 | 	mov	local01, arg01
252ec     00 20 06 F6 | 	mov	local02, #0
252f0     08 1E 06 F1 | 	add	local01, #8
252f4     0F FB 09 FB | 	rdlong	result1, local01 wz
252f8     08 1E 86 F1 | 	sub	local01, #8
252fc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25300     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
25304     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25308     01 FA 65 A6 |  if_e	neg	result1, #1
2530c     A8 00 90 AD |  if_e	jmp	#LR__3572
25310     2C 1E 06 F1 | 	add	local01, #44
25314     0F FB 09 FB | 	rdlong	result1, local01 wz
25318     2C 1E 86 F1 | 	sub	local01, #44
2531c     38 00 90 AD |  if_e	jmp	#LR__3570
25320     2C 1E 06 F1 | 	add	local01, #44
25324     0F 23 02 FB | 	rdlong	local03, local01
25328     11 25 02 F6 | 	mov	local04, local03
2532c     2C 1E 86 F1 | 	sub	local01, #44
25330     13 24 46 F7 | 	zerox	local04, #19
25334     14 22 46 F0 | 	shr	local03, #20
25338     02 22 66 F0 | 	shl	local03, #2
2533c     ED 22 02 F1 | 	add	local03, __methods__
25340     11 23 02 FB | 	rdlong	local03, local03
25344     0F 13 02 F6 | 	mov	arg01, local01
25348     F2 26 02 F6 | 	mov	local05, objptr
2534c     12 E5 01 F6 | 	mov	objptr, local04
25350     2D 22 62 FD | 	call	local03
25354     13 E5 01 F6 | 	mov	objptr, local05
25358                 | LR__3570
25358     24 1E 06 F1 | 	add	local01, #36
2535c     0F 27 0A FB | 	rdlong	local05, local01 wz
25360     24 1E 86 F1 | 	sub	local01, #36
25364     3C 00 90 AD |  if_e	jmp	#LR__3571
25368     24 1E 06 F1 | 	add	local01, #36
2536c     0F 23 02 FB | 	rdlong	local03, local01
25370     11 25 02 F6 | 	mov	local04, local03
25374     24 1E 86 F1 | 	sub	local01, #36
25378     13 24 46 F7 | 	zerox	local04, #19
2537c     14 22 46 F0 | 	shr	local03, #20
25380     02 22 66 F0 | 	shl	local03, #2
25384     ED 22 02 F1 | 	add	local03, __methods__
25388     11 23 02 FB | 	rdlong	local03, local03
2538c     0F 13 02 F6 | 	mov	arg01, local01
25390     F2 26 02 F6 | 	mov	local05, objptr
25394     12 E5 01 F6 | 	mov	objptr, local04
25398     2D 22 62 FD | 	call	local03
2539c     13 E5 01 F6 | 	mov	objptr, local05
253a0     FD 20 02 F6 | 	mov	local02, result1
253a4                 | LR__3571
253a4     0F 13 02 F6 | 	mov	arg01, local01
253a8     00 14 06 F6 | 	mov	arg02, #0
253ac     34 16 06 F6 | 	mov	arg03, #52
253b0     98 00 A0 FD | 	call	#\builtin_bytefill_
253b4     10 FB 01 F6 | 	mov	result1, local02
253b8                 | LR__3572
253b8     A7 F0 03 F6 | 	mov	ptra, fp
253bc     B2 00 A0 FD | 	call	#popregs_
253c0                 | __system___closeraw_ret
253c0     2D 00 64 FD | 	ret
253c4                 | 
253c4                 | __system___vfs_open_sdcardx
253c4     0B 4A 05 F6 | 	mov	COUNT_, #11
253c8     A8 00 A0 FD | 	call	#pushregs_
253cc     09 23 02 F6 | 	mov	local03, arg01
253d0     0A 25 02 F6 | 	mov	local04, arg02
253d4     0B 27 02 F6 | 	mov	local05, arg03
253d8     0C 29 02 F6 | 	mov	local06, arg04
253dc     01 00 00 FF 
253e0     24 12 06 F6 | 	mov	arg01, ##548
253e4     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
253e8     FD 2A 02 F6 | 	mov	local07, result1
253ec     01 00 00 FF 
253f0     34 12 06 F6 | 	mov	arg01, ##564
253f4     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
253f8     FD 2C 02 F6 | 	mov	local08, result1
253fc     11 19 02 F6 | 	mov	arg04, local03
25400     1F 18 C6 F0 | 	sar	arg04, #31
25404     11 17 02 F6 | 	mov	arg03, local03
25408     01 12 06 F6 | 	mov	arg01, #1
2540c     00 14 06 F6 | 	mov	arg02, #0
25410     10 DC BF FD | 	call	#__system___int64_shl
25414     FD 1E 02 F6 | 	mov	local01, result1
25418     FE 2E 02 F6 | 	mov	local09, result2
2541c     12 19 02 F6 | 	mov	arg04, local04
25420     1F 18 C6 F0 | 	sar	arg04, #31
25424     12 17 02 F6 | 	mov	arg03, local04
25428     01 12 06 F6 | 	mov	arg01, #1
2542c     00 14 06 F6 | 	mov	arg02, #0
25430     F0 DB BF FD | 	call	#__system___int64_shl
25434     FD 1E 42 F5 | 	or	local01, result1
25438     FE 2E 42 F5 | 	or	local09, result2
2543c     13 19 02 F6 | 	mov	arg04, local05
25440     1F 18 C6 F0 | 	sar	arg04, #31
25444     13 17 02 F6 | 	mov	arg03, local05
25448     01 12 06 F6 | 	mov	arg01, #1
2544c     00 14 06 F6 | 	mov	arg02, #0
25450     D0 DB BF FD | 	call	#__system___int64_shl
25454     FD 1E 42 F5 | 	or	local01, result1
25458     FE 2E 42 F5 | 	or	local09, result2
2545c     14 19 02 F6 | 	mov	arg04, local06
25460     1F 18 C6 F0 | 	sar	arg04, #31
25464     14 17 02 F6 | 	mov	arg03, local06
25468     01 12 06 F6 | 	mov	arg01, #1
2546c     00 14 06 F6 | 	mov	arg02, #0
25470     B0 DB BF FD | 	call	#__system___int64_shl
25474     17 15 02 F6 | 	mov	arg02, local09
25478     FD 1E 42 F5 | 	or	local01, result1
2547c     0A FD 41 F5 | 	or	result2, arg02
25480     FE 20 02 F6 | 	mov	local02, result2
25484     0F 13 02 F6 | 	mov	arg01, local01
25488     10 15 02 F6 | 	mov	arg02, local02
2548c     CC DB BF FD | 	call	#__system___usepins
25490     00 FA 0D F2 | 	cmp	result1, #0 wz
25494     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25498     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
2549c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
254a0     00 FA 05 A6 |  if_e	mov	result1, #0
254a4     B4 00 90 AD |  if_e	jmp	#LR__3582
254a8     0F 31 02 F6 | 	mov	local10, local01
254ac     10 2F 02 F6 | 	mov	local09, local02
254b0     01 00 00 FF 
254b4     08 2A 06 F1 | 	add	local07, ##520
254b8     15 31 62 FC | 	wrlong	local10, local07
254bc     04 2A 06 F1 | 	add	local07, #4
254c0     15 2F 62 FC | 	wrlong	local09, local07
254c4     01 00 00 FF 
254c8     0C 2A 86 F1 | 	sub	local07, ##524
254cc     14 1B 02 F6 | 	mov	arg05, local06
254d0     00 12 06 F6 | 	mov	arg01, #0
254d4     11 15 02 F6 | 	mov	arg02, local03
254d8     12 17 02 F6 | 	mov	arg03, local04
254dc     13 19 02 F6 | 	mov	arg04, local05
254e0     F2 30 02 F6 | 	mov	local10, objptr
254e4     15 E5 01 F6 | 	mov	objptr, local07
254e8     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
254ec     18 E5 01 F6 | 	mov	objptr, local10
254f0     FD 32 0A F6 | 	mov	local11, result1 wz
254f4     24 00 90 5D |  if_ne	jmp	#LR__3580
254f8     80 01 00 FF 
254fc     B6 15 06 F6 | 	mov	arg02, ##@LR__4997
25500     16 13 02 F6 | 	mov	arg01, local08
25504     00 16 06 F6 | 	mov	arg03, #0
25508     F2 32 02 F6 | 	mov	local11, objptr
2550c     15 E5 01 F6 | 	mov	objptr, local07
25510     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
25514     19 E5 01 F6 | 	mov	objptr, local11
25518     FD 32 02 F6 | 	mov	local11, result1
2551c                 | LR__3580
2551c     00 32 0E F2 | 	cmp	local11, #0 wz
25520     24 00 90 AD |  if_e	jmp	#LR__3581
25524     0F 13 02 F6 | 	mov	arg01, local01
25528     10 15 02 F6 | 	mov	arg02, local02
2552c     80 DB BF FD | 	call	#__system___freepins
25530     19 13 6A F6 | 	neg	arg01, local11 wz
25534     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25538     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2553c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25540     00 FA 05 F6 | 	mov	result1, #0
25544     14 00 90 FD | 	jmp	#LR__3582
25548                 | LR__3581
25548     15 13 02 F6 | 	mov	arg01, local07
2554c     F2 32 02 F6 | 	mov	local11, objptr
25550     15 E5 01 F6 | 	mov	objptr, local07
25554     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
25558     19 E5 01 F6 | 	mov	objptr, local11
2555c                 | LR__3582
2555c     A7 F0 03 F6 | 	mov	ptra, fp
25560     B2 00 A0 FD | 	call	#popregs_
25564                 | __system___vfs_open_sdcardx_ret
25564     2D 00 64 FD | 	ret
25568                 | 
25568                 | __system____default_getc
25568     03 4A 05 F6 | 	mov	COUNT_, #3
2556c     A8 00 A0 FD | 	call	#pushregs_
25570     09 1F 02 F6 | 	mov	local01, arg01
25574     0F 21 02 FB | 	rdlong	local02, local01
25578     08 20 06 F1 | 	add	local02, #8
2557c     10 23 02 FB | 	rdlong	local03, local02
25580     02 22 CE F7 | 	test	local03, #2 wz
25584     0F 13 02 56 |  if_ne	mov	arg01, local01
25588     00 01 B0 5D |  if_ne	call	#__system____default_flush
2558c     10 23 02 FB | 	rdlong	local03, local02
25590     01 22 46 F5 | 	or	local03, #1
25594     10 23 62 FC | 	wrlong	local03, local02
25598     08 20 86 F1 | 	sub	local02, #8
2559c     10 23 0A FB | 	rdlong	local03, local02 wz
255a0     0C 00 90 5D |  if_ne	jmp	#LR__3590
255a4     0F 13 02 F6 | 	mov	arg01, local01
255a8     68 18 B0 FD | 	call	#__system____default_filbuf
255ac     FD 22 02 F6 | 	mov	local03, result1
255b0                 | LR__3590
255b0     01 22 56 F2 | 	cmps	local03, #1 wc
255b4     01 FA 65 C6 |  if_b	neg	result1, #1
255b8     1C 00 90 CD |  if_b	jmp	#LR__3591
255bc     01 22 86 F1 | 	sub	local03, #1
255c0     10 23 62 FC | 	wrlong	local03, local02
255c4     04 20 06 F1 | 	add	local02, #4
255c8     10 23 02 FB | 	rdlong	local03, local02
255cc     11 FB C1 FA | 	rdbyte	result1, local03
255d0     01 22 06 F1 | 	add	local03, #1
255d4     10 23 62 FC | 	wrlong	local03, local02
255d8                 | LR__3591
255d8     A7 F0 03 F6 | 	mov	ptra, fp
255dc     B2 00 A0 FD | 	call	#popregs_
255e0                 | __system____default_getc_ret
255e0     2D 00 64 FD | 	ret
255e4                 | 
255e4                 | __system____default_putc
255e4     06 4A 05 F6 | 	mov	COUNT_, #6
255e8     A8 00 A0 FD | 	call	#pushregs_
255ec     09 1F 02 F6 | 	mov	local01, arg01
255f0     0A 21 02 F6 | 	mov	local02, arg02
255f4     10 23 02 FB | 	rdlong	local03, local02
255f8     08 22 06 F1 | 	add	local03, #8
255fc     11 FB 01 FB | 	rdlong	result1, local03
25600     01 FA CD F7 | 	test	result1, #1 wz
25604     10 13 02 56 |  if_ne	mov	arg01, local02
25608     80 00 B0 5D |  if_ne	call	#__system____default_flush
2560c     11 25 02 FB | 	rdlong	local04, local03
25610     02 24 46 F5 | 	or	local04, #2
25614     11 25 62 FC | 	wrlong	local04, local03
25618     08 22 86 F1 | 	sub	local03, #8
2561c     11 27 02 FB | 	rdlong	local05, local03
25620     10 22 06 F1 | 	add	local03, #16
25624     11 15 02 FB | 	rdlong	arg02, local03
25628     10 22 86 F1 | 	sub	local03, #16
2562c     13 FB 01 F6 | 	mov	result1, local05
25630     0A FB 01 F1 | 	add	result1, arg02
25634     FD 1E 42 FC | 	wrbyte	local01, result1
25638     0F 1F E2 F8 | 	getbyte	local01, local01, #0
2563c     01 26 06 F1 | 	add	local05, #1
25640     11 27 62 FC | 	wrlong	local05, local03
25644     06 20 06 F1 | 	add	local02, #6
25648     10 29 EA FA | 	rdword	local06, local02 wz
2564c     06 20 86 F1 | 	sub	local02, #6
25650     0C 22 06 51 |  if_ne	add	local03, #12
25654     11 25 02 5B |  if_ne	rdlong	local04, local03
25658     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
2565c     0C 00 90 AD |  if_e	jmp	#LR__3600
25660     0A 1E 0E F2 | 	cmp	local01, #10 wz
25664     01 28 0E A2 |  if_e	cmp	local06, #1 wz
25668     10 00 90 5D |  if_ne	jmp	#LR__3601
2566c                 | LR__3600
2566c     10 13 02 F6 | 	mov	arg01, local02
25670     18 00 B0 FD | 	call	#__system____default_flush
25674     00 FA 0D F2 | 	cmp	result1, #0 wz
25678     01 1E 66 56 |  if_ne	neg	local01, #1
2567c                 | LR__3601
2567c     0F FB 01 F6 | 	mov	result1, local01
25680     A7 F0 03 F6 | 	mov	ptra, fp
25684     B2 00 A0 FD | 	call	#popregs_
25688                 | __system____default_putc_ret
25688     2D 00 64 FD | 	ret
2568c                 | 
2568c                 | __system____default_flush
2568c     06 4A 05 F6 | 	mov	COUNT_, #6
25690     A8 00 A0 FD | 	call	#pushregs_
25694     09 1F 02 F6 | 	mov	local01, arg01
25698     0F 21 02 FB | 	rdlong	local02, local01
2569c     10 23 02 FB | 	rdlong	local03, local02
256a0     08 20 06 F1 | 	add	local02, #8
256a4     10 FB 01 FB | 	rdlong	result1, local02
256a8     08 20 86 F1 | 	sub	local02, #8
256ac     02 FA CD F7 | 	test	result1, #2 wz
256b0     D0 00 90 AD |  if_e	jmp	#LR__3612
256b4     01 22 56 F2 | 	cmps	local03, #1 wc
256b8     20 01 90 CD |  if_b	jmp	#LR__3614
256bc     08 1E 06 F1 | 	add	local01, #8
256c0     0F FB 01 FB | 	rdlong	result1, local01
256c4     08 1E 86 F1 | 	sub	local01, #8
256c8     40 FA CD F7 | 	test	result1, #64 wz
256cc     68 00 90 AD |  if_e	jmp	#LR__3611
256d0     08 1E 06 F1 | 	add	local01, #8
256d4     0F 17 02 FB | 	rdlong	arg03, local01
256d8     08 1E 86 F1 | 	sub	local01, #8
256dc     80 16 CE F7 | 	test	arg03, #128 wz
256e0     54 00 90 AD |  if_e	jmp	#LR__3610
256e4     30 1E 06 F1 | 	add	local01, #48
256e8     0F 25 02 FB | 	rdlong	local04, local01
256ec     12 27 02 F6 | 	mov	local05, local04
256f0     30 1E 86 F1 | 	sub	local01, #48
256f4     13 26 46 F7 | 	zerox	local05, #19
256f8     14 24 46 F0 | 	shr	local04, #20
256fc     02 24 66 F0 | 	shl	local04, #2
25700     ED 24 02 F1 | 	add	local04, __methods__
25704     12 25 02 FB | 	rdlong	local04, local04
25708     0F 13 02 F6 | 	mov	arg01, local01
2570c     00 14 06 F6 | 	mov	arg02, #0
25710     02 16 06 F6 | 	mov	arg03, #2
25714     F2 28 02 F6 | 	mov	local06, objptr
25718     13 E5 01 F6 | 	mov	objptr, local05
2571c     2D 24 62 FD | 	call	local04
25720     14 E5 01 F6 | 	mov	objptr, local06
25724     08 1E 06 F1 | 	add	local01, #8
25728     0F 29 02 FB | 	rdlong	local06, local01
2572c     80 28 26 F5 | 	andn	local06, #128
25730     0F 29 62 FC | 	wrlong	local06, local01
25734     08 1E 86 F1 | 	sub	local01, #8
25738                 | LR__3610
25738                 | LR__3611
25738     18 1E 06 F1 | 	add	local01, #24
2573c     0F 25 02 FB | 	rdlong	local04, local01
25740     12 27 02 F6 | 	mov	local05, local04
25744     18 1E 86 F1 | 	sub	local01, #24
25748     13 26 46 F7 | 	zerox	local05, #19
2574c     14 24 46 F0 | 	shr	local04, #20
25750     02 24 66 F0 | 	shl	local04, #2
25754     ED 24 02 F1 | 	add	local04, __methods__
25758     12 25 02 FB | 	rdlong	local04, local04
2575c     10 20 06 F1 | 	add	local02, #16
25760     10 15 02 FB | 	rdlong	arg02, local02
25764     10 20 86 F1 | 	sub	local02, #16
25768     0F 13 02 F6 | 	mov	arg01, local01
2576c     11 17 02 F6 | 	mov	arg03, local03
25770     F2 28 02 F6 | 	mov	local06, objptr
25774     13 E5 01 F6 | 	mov	objptr, local05
25778     2D 24 62 FD | 	call	local04
2577c     14 E5 01 F6 | 	mov	objptr, local06
25780     58 00 90 FD | 	jmp	#LR__3614
25784                 | LR__3612
25784     08 20 06 F1 | 	add	local02, #8
25788     10 29 02 FB | 	rdlong	local06, local02
2578c     08 20 86 F1 | 	sub	local02, #8
25790     01 28 CE F7 | 	test	local06, #1 wz
25794     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
25798     40 00 90 AD |  if_e	jmp	#LR__3613
2579c     30 1E 06 F1 | 	add	local01, #48
257a0     0F 25 02 FB | 	rdlong	local04, local01
257a4     12 27 02 F6 | 	mov	local05, local04
257a8     30 1E 86 F1 | 	sub	local01, #48
257ac     13 26 46 F7 | 	zerox	local05, #19
257b0     14 24 46 F0 | 	shr	local04, #20
257b4     02 24 66 F0 | 	shl	local04, #2
257b8     ED 24 02 F1 | 	add	local04, __methods__
257bc     12 25 02 FB | 	rdlong	local04, local04
257c0     0F 13 02 F6 | 	mov	arg01, local01
257c4     11 15 62 F6 | 	neg	arg02, local03
257c8     01 16 06 F6 | 	mov	arg03, #1
257cc     F2 28 02 F6 | 	mov	local06, objptr
257d0     13 E5 01 F6 | 	mov	objptr, local05
257d4     2D 24 62 FD | 	call	local04
257d8     14 E5 01 F6 | 	mov	objptr, local06
257dc                 | LR__3613
257dc                 | LR__3614
257dc     10 01 68 FC | 	wrlong	#0, local02
257e0     04 20 06 F1 | 	add	local02, #4
257e4     10 01 68 FC | 	wrlong	#0, local02
257e8     04 20 06 F1 | 	add	local02, #4
257ec     10 01 68 FC | 	wrlong	#0, local02
257f0     00 FA 05 F6 | 	mov	result1, #0
257f4     A7 F0 03 F6 | 	mov	ptra, fp
257f8     B2 00 A0 FD | 	call	#popregs_
257fc                 | __system____default_flush_ret
257fc     2D 00 64 FD | 	ret
25800                 | 
25800                 | __system____default_buffer_init
25800     02 4A 05 F6 | 	mov	COUNT_, #2
25804     A8 00 A0 FD | 	call	#pushregs_
25808     09 1F 02 F6 | 	mov	local01, arg01
2580c     0F 21 02 FB | 	rdlong	local02, local01
25810     0F 13 02 F6 | 	mov	arg01, local01
25814     34 03 B0 FD | 	call	#__system___isatty
25818     00 FA 0D F2 | 	cmp	result1, #0 wz
2581c     06 1E 06 51 |  if_ne	add	local01, #6
25820     0F 0B 58 5C |  if_ne	wrword	#5, local01
25824     06 1E 06 A1 |  if_e	add	local01, #6
25828     0F 0D 58 AC |  if_e	wrword	#6, local01
2582c     14 20 06 F1 | 	add	local02, #20
25830     10 1F 02 F6 | 	mov	local01, local02
25834     04 20 86 F1 | 	sub	local02, #4
25838     10 1F 62 FC | 	wrlong	local01, local02
2583c     04 20 86 F1 | 	sub	local02, #4
25840     02 00 80 FF 
25844     10 01 68 FC | 	wrlong	##1024, local02
25848     00 FA 05 F6 | 	mov	result1, #0
2584c     A7 F0 03 F6 | 	mov	ptra, fp
25850     B2 00 A0 FD | 	call	#popregs_
25854                 | __system____default_buffer_init_ret
25854     2D 00 64 FD | 	ret
25858                 | 
25858                 | __system__stat
25858     04 4A 05 F6 | 	mov	COUNT_, #4
2585c     A8 00 A0 FD | 	call	#pushregs_
25860     0A 1F 02 F6 | 	mov	local01, arg02
25864     84 E7 05 F1 | 	add	ptr___system__dat__, #388
25868     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
2586c     09 15 02 F6 | 	mov	arg02, arg01
25870     10 13 02 F6 | 	mov	arg01, local02
25874     00 16 06 F6 | 	mov	arg03, #0
25878     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2587c     40 B8 BF FD | 	call	#__system____getvfsforfile
25880     FD 22 0A F6 | 	mov	local03, result1 wz
25884     10 00 90 AD |  if_e	jmp	#LR__3620
25888     34 22 06 F1 | 	add	local03, #52
2588c     11 17 0A FB | 	rdlong	arg03, local03 wz
25890     34 22 86 F1 | 	sub	local03, #52
25894     14 00 90 5D |  if_ne	jmp	#LR__3621
25898                 | LR__3620
25898     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2589c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
258a0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
258a4     01 FA 65 F6 | 	neg	result1, #1
258a8     68 00 90 FD | 	jmp	#LR__3622
258ac                 | LR__3621
258ac     0F 13 02 F6 | 	mov	arg01, local01
258b0     00 14 06 F6 | 	mov	arg02, #0
258b4     30 16 06 F6 | 	mov	arg03, #48
258b8     09 25 02 F6 | 	mov	local04, arg01
258bc     98 00 A0 FD | 	call	#\builtin_bytefill_
258c0     12 FB 01 F6 | 	mov	result1, local04
258c4     10 13 CA FA | 	rdbyte	arg01, local02 wz
258c8     08 1E 06 A1 |  if_e	add	local01, #8
258cc     08 00 80 AF 
258d0     0F FF 6B AC |  if_e	wrlong	##4607, local01
258d4     00 FA 05 A6 |  if_e	mov	result1, #0
258d8     38 00 90 AD |  if_e	jmp	#LR__3622
258dc     34 22 06 F1 | 	add	local03, #52
258e0     11 23 02 FB | 	rdlong	local03, local03
258e4     11 25 02 F6 | 	mov	local04, local03
258e8     13 22 46 F7 | 	zerox	local03, #19
258ec     14 24 46 F0 | 	shr	local04, #20
258f0     02 24 66 F0 | 	shl	local04, #2
258f4     ED 24 02 F1 | 	add	local04, __methods__
258f8     12 25 02 FB | 	rdlong	local04, local04
258fc     10 13 02 F6 | 	mov	arg01, local02
25900     0F 15 02 F6 | 	mov	arg02, local01
25904     F2 20 02 F6 | 	mov	local02, objptr
25908     11 E5 01 F6 | 	mov	objptr, local03
2590c     2D 24 62 FD | 	call	local04
25910     10 E5 01 F6 | 	mov	objptr, local02
25914                 | LR__3622
25914     A7 F0 03 F6 | 	mov	ptra, fp
25918     B2 00 A0 FD | 	call	#popregs_
2591c                 | __system__stat_ret
2591c     2D 00 64 FD | 	ret
25920                 | 
25920                 | __system__write
25920     0A 12 16 F2 | 	cmp	arg01, #10 wc
25924     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25928     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2592c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25930     01 FA 65 36 |  if_ae	neg	result1, #1
25934     20 00 90 3D |  if_ae	jmp	#LR__3630
25938     34 12 06 FD | 	qmul	arg01, #52
2593c     02 00 00 FF 
25940     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25944     18 12 62 FD | 	getqx	arg01
25948     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2594c     02 00 00 FF 
25950     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25954     0C 10 B0 FD | 	call	#__system___vfswrite
25958                 | LR__3630
25958                 | __system__write_ret
25958     2D 00 64 FD | 	ret
2595c                 | 
2595c                 | __system__read
2595c     0A 12 16 F2 | 	cmp	arg01, #10 wc
25960     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25964     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25968     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2596c     01 FA 65 36 |  if_ae	neg	result1, #1
25970     20 00 90 3D |  if_ae	jmp	#LR__3640
25974     34 12 06 FD | 	qmul	arg01, #52
25978     02 00 00 FF 
2597c     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25980     18 12 62 FD | 	getqx	arg01
25984     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
25988     02 00 00 FF 
2598c     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25990     98 11 B0 FD | 	call	#__system___vfsread
25994                 | LR__3640
25994                 | __system__read_ret
25994     2D 00 64 FD | 	ret
25998                 | 
25998                 | __system__close
25998     0A 12 16 F2 | 	cmp	arg01, #10 wc
2599c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
259a0     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
259a4     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
259a8     01 FA 65 36 |  if_ae	neg	result1, #1
259ac     20 00 90 3D |  if_ae	jmp	#LR__3650
259b0     34 12 06 FD | 	qmul	arg01, #52
259b4     02 00 00 FF 
259b8     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
259bc     18 12 62 FD | 	getqx	arg01
259c0     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
259c4     02 00 00 FF 
259c8     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
259cc     10 F9 BF FD | 	call	#__system___closeraw
259d0                 | LR__3650
259d0                 | __system__close_ret
259d0     2D 00 64 FD | 	ret
259d4                 | 
259d4                 | __system__lseek
259d4     06 4A 05 F6 | 	mov	COUNT_, #6
259d8     A8 00 A0 FD | 	call	#pushregs_
259dc     0A 12 16 F2 | 	cmp	arg01, #10 wc
259e0     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
259e4     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
259e8     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
259ec     01 FA 65 36 |  if_ae	neg	result1, #1
259f0     C4 00 90 3D |  if_ae	jmp	#LR__3661
259f4     34 12 06 FD | 	qmul	arg01, #52
259f8     02 00 00 FF 
259fc     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25a00     18 1E 62 FD | 	getqx	local01
25a04     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
25a08     30 1E 06 F1 | 	add	local01, #48
25a0c     0F 13 0A FB | 	rdlong	arg01, local01 wz
25a10     30 1E 86 F1 | 	sub	local01, #48
25a14     02 00 00 FF 
25a18     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25a1c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25a20     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
25a24     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25a28     01 FA 65 A6 |  if_e	neg	result1, #1
25a2c     88 00 90 AD |  if_e	jmp	#LR__3661
25a30     08 1E 06 F1 | 	add	local01, #8
25a34     0F 21 02 FB | 	rdlong	local02, local01
25a38     08 1E 86 F1 | 	sub	local01, #8
25a3c     40 20 CE F7 | 	test	local02, #64 wz
25a40     08 1E 06 51 |  if_ne	add	local01, #8
25a44     0F 21 02 5B |  if_ne	rdlong	local02, local01
25a48     80 20 46 55 |  if_ne	or	local02, #128
25a4c     0F 21 62 5C |  if_ne	wrlong	local02, local01
25a50     08 1E 86 51 |  if_ne	sub	local01, #8
25a54     30 1E 06 F1 | 	add	local01, #48
25a58     0F 23 02 FB | 	rdlong	local03, local01
25a5c     11 25 02 F6 | 	mov	local04, local03
25a60     30 1E 86 F1 | 	sub	local01, #48
25a64     13 24 46 F7 | 	zerox	local04, #19
25a68     14 22 46 F0 | 	shr	local03, #20
25a6c     02 22 66 F0 | 	shl	local03, #2
25a70     ED 22 02 F1 | 	add	local03, __methods__
25a74     11 23 02 FB | 	rdlong	local03, local03
25a78     0F 13 02 F6 | 	mov	arg01, local01
25a7c     F2 26 02 F6 | 	mov	local05, objptr
25a80     12 E5 01 F6 | 	mov	objptr, local04
25a84     2D 22 62 FD | 	call	local03
25a88     13 E5 01 F6 | 	mov	objptr, local05
25a8c     FD 28 02 F6 | 	mov	local06, result1
25a90     00 28 56 F2 | 	cmps	local06, #0 wc
25a94     1C 00 90 3D |  if_ae	jmp	#LR__3660
25a98     14 13 6A F6 | 	neg	arg01, local06 wz
25a9c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25aa0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25aa4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25aa8     01 FA 65 56 |  if_ne	neg	result1, #1
25aac     00 FA 05 A6 |  if_e	mov	result1, #0
25ab0     04 00 90 FD | 	jmp	#LR__3661
25ab4                 | LR__3660
25ab4     14 FB 01 F6 | 	mov	result1, local06
25ab8                 | LR__3661
25ab8     A7 F0 03 F6 | 	mov	ptra, fp
25abc     B2 00 A0 FD | 	call	#popregs_
25ac0                 | __system__lseek_ret
25ac0     2D 00 64 FD | 	ret
25ac4                 | 
25ac4                 | __system___ioctl
25ac4     03 4A 05 F6 | 	mov	COUNT_, #3
25ac8     A8 00 A0 FD | 	call	#pushregs_
25acc     00 12 4E F2 | 	cmps	arg01, #0 wz
25ad0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25ad4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
25ad8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25adc     01 FA 65 A6 |  if_e	neg	result1, #1
25ae0     5C 00 90 AD |  if_e	jmp	#LR__3671
25ae4     28 12 06 F1 | 	add	arg01, #40
25ae8     09 1F 02 FB | 	rdlong	local01, arg01
25aec     0F 21 02 F6 | 	mov	local02, local01
25af0     28 12 86 F1 | 	sub	arg01, #40
25af4     13 20 46 F7 | 	zerox	local02, #19
25af8     14 1E 46 F0 | 	shr	local01, #20
25afc     02 1E 66 F0 | 	shl	local01, #2
25b00     ED 1E 02 F1 | 	add	local01, __methods__
25b04     0F 1F 02 FB | 	rdlong	local01, local01
25b08     F2 22 02 F6 | 	mov	local03, objptr
25b0c     10 E5 01 F6 | 	mov	objptr, local02
25b10     2D 1E 62 FD | 	call	local01
25b14     11 E5 01 F6 | 	mov	objptr, local03
25b18     FD 12 0A F6 | 	mov	arg01, result1 wz
25b1c     1C 00 90 AD |  if_e	jmp	#LR__3670
25b20     00 12 4E F2 | 	cmps	arg01, #0 wz
25b24     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25b28     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25b2c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25b30     01 FA 65 56 |  if_ne	neg	result1, #1
25b34     00 FA 05 A6 |  if_e	mov	result1, #0
25b38     04 00 90 FD | 	jmp	#LR__3671
25b3c                 | LR__3670
25b3c     00 FA 05 F6 | 	mov	result1, #0
25b40                 | LR__3671
25b40     A7 F0 03 F6 | 	mov	ptra, fp
25b44     B2 00 A0 FD | 	call	#popregs_
25b48                 | __system___ioctl_ret
25b48     2D 00 64 FD | 	ret
25b4c                 | 
25b4c                 | __system___isatty
25b4c     00 4A 05 F6 | 	mov	COUNT_, #0
25b50     A8 00 A0 FD | 	call	#pushregs_
25b54     0C F0 07 F1 | 	add	ptra, #12
25b58     04 4E 05 F1 | 	add	fp, #4
25b5c     A7 12 62 FC | 	wrlong	arg01, fp
25b60     04 4E 05 F1 | 	add	fp, #4
25b64     A7 16 02 F6 | 	mov	arg03, fp
25b68     08 4E 85 F1 | 	sub	fp, #8
25b6c     00 15 06 F6 | 	mov	arg02, #256
25b70     50 FF BF FD | 	call	#__system___ioctl
25b74     00 FA 0D F2 | 	cmp	result1, #0 wz
25b78     01 FA 05 A6 |  if_e	mov	result1, #1
25b7c     00 FA 05 56 |  if_ne	mov	result1, #0
25b80     A7 F0 03 F6 | 	mov	ptra, fp
25b84     B2 00 A0 FD | 	call	#popregs_
25b88                 | __system___isatty_ret
25b88     2D 00 64 FD | 	ret
25b8c                 | 
25b8c                 | __system____getftab
25b8c     0A 12 16 F2 | 	cmp	arg01, #10 wc
25b90     34 12 06 CD |  if_b	qmul	arg01, #52
25b94     00 FA 05 36 |  if_ae	mov	result1, #0
25b98     02 00 00 CF 
25b9c     20 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1312
25ba0     18 FA 61 CD |  if_b	getqx	result1
25ba4     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
25ba8     02 00 00 CF 
25bac     20 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
25bb0                 | __system____getftab_ret
25bb0     2D 00 64 FD | 	ret
25bb4                 | 
25bb4                 | __system__strncpy
25bb4     09 01 02 F6 | 	mov	_var01, arg01
25bb8                 | LR__3680
25bb8     01 16 86 F1 | 	sub	arg03, #1
25bbc     00 16 56 F2 | 	cmps	arg03, #0 wc
25bc0     18 00 90 CD |  if_b	jmp	#LR__3681
25bc4     0A FB C1 FA | 	rdbyte	result1, arg02
25bc8     00 FB 41 FC | 	wrbyte	result1, _var01
25bcc     01 14 06 F1 | 	add	arg02, #1
25bd0     00 FB C9 FA | 	rdbyte	result1, _var01 wz
25bd4     01 00 06 F1 | 	add	_var01, #1
25bd8     DC FF 9F 5D |  if_ne	jmp	#LR__3680
25bdc                 | LR__3681
25bdc     97 0C 48 FB | 	callpa	#(@LR__3683-@LR__3682)>>2,fcache_load_ptr_
25be0                 | LR__3682
25be0     01 16 86 F1 | 	sub	arg03, #1
25be4     00 16 56 F2 | 	cmps	arg03, #0 wc
25be8     00 03 02 36 |  if_ae	mov	_var02, _var01
25bec     01 00 06 31 |  if_ae	add	_var01, #1
25bf0     01 01 48 3C |  if_ae	wrbyte	#0, _var02
25bf4     E8 FF 9F 3D |  if_ae	jmp	#LR__3682
25bf8                 | LR__3683
25bf8     09 FB 01 F6 | 	mov	result1, arg01
25bfc                 | __system__strncpy_ret
25bfc     2D 00 64 FD | 	ret
25c00                 | 
25c00                 | __system__strncat
25c00     00 14 4E F2 | 	cmps	arg02, #0 wz
25c04     50 00 90 AD |  if_e	jmp	#LR__3694
25c08     01 16 16 F2 | 	cmp	arg03, #1 wc
25c0c     48 00 90 CD |  if_b	jmp	#LR__3694
25c10     09 01 02 F6 | 	mov	_var01, arg01
25c14     97 1E 48 FB | 	callpa	#(@LR__3692-@LR__3690)>>2,fcache_load_ptr_
25c18                 | LR__3690
25c18     00 FB C9 FA | 	rdbyte	result1, _var01 wz
25c1c     01 00 06 51 |  if_ne	add	_var01, #1
25c20     F4 FF 9F 5D |  if_ne	jmp	#LR__3690
25c24     0B 03 02 F6 | 	mov	_var02, arg03
25c28                 | LR__3691
25c28     0A 05 C2 FA | 	rdbyte	_var03, arg02
25c2c     02 07 02 F6 | 	mov	_var04, _var03
25c30     07 06 4E F7 | 	zerox	_var04, #7 wz
25c34     01 14 06 F1 | 	add	arg02, #1
25c38     18 00 90 AD |  if_e	jmp	#LR__3693
25c3c     01 02 86 F1 | 	sub	_var02, #1
25c40     00 02 56 F2 | 	cmps	_var02, #0 wc
25c44     00 07 02 36 |  if_ae	mov	_var04, _var01
25c48     01 00 06 31 |  if_ae	add	_var01, #1
25c4c     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
25c50     D4 FF 9F 3D |  if_ae	jmp	#LR__3691
25c54                 | LR__3692
25c54                 | LR__3693
25c54     00 01 48 FC | 	wrbyte	#0, _var01
25c58                 | LR__3694
25c58     09 FB 01 F6 | 	mov	result1, arg01
25c5c                 | __system__strncat_ret
25c5c     2D 00 64 FD | 	ret
25c60                 | 
25c60                 | __system__strncmp
25c60     09 01 0A F6 | 	mov	_var01, arg01 wz
25c64     14 00 90 5D |  if_ne	jmp	#LR__3700
25c68     00 14 0E F2 | 	cmp	arg02, #0 wz
25c6c     01 02 66 56 |  if_ne	neg	_var02, #1
25c70     00 02 06 A6 |  if_e	mov	_var02, #0
25c74     01 FB 01 F6 | 	mov	result1, _var02
25c78     74 00 90 FD | 	jmp	#__system__strncmp_ret
25c7c                 | LR__3700
25c7c     00 14 0E F2 | 	cmp	arg02, #0 wz
25c80     01 FA 05 A6 |  if_e	mov	result1, #1
25c84     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25c88     0B 05 02 F6 | 	mov	_var03, arg03
25c8c     97 16 48 FB | 	callpa	#(@LR__3702-@LR__3701)>>2,fcache_load_ptr_
25c90                 | LR__3701
25c90     00 07 C2 FA | 	rdbyte	_var04, _var01
25c94     0A 09 02 F6 | 	mov	_var05, arg02
25c98     04 0B C2 FA | 	rdbyte	_var06, _var05
25c9c     01 04 86 F1 | 	sub	_var03, #1
25ca0     00 04 56 F2 | 	cmps	_var03, #0 wc
25ca4     01 00 06 F1 | 	add	_var01, #1
25ca8     01 14 06 F1 | 	add	arg02, #1
25cac     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
25cb0     08 00 90 2D |  if_nc_and_z	jmp	#LR__3703
25cb4     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
25cb8     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3701
25cbc                 | LR__3702
25cbc                 | LR__3703
25cbc     00 04 56 F2 | 	cmps	_var03, #0 wc
25cc0     00 FA 05 C6 |  if_b	mov	result1, #0
25cc4     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
25cc8     05 07 0A F2 | 	cmp	_var04, _var06 wz
25ccc     00 FA 05 A6 |  if_e	mov	result1, #0
25cd0     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25cd4     00 06 0E F2 | 	cmp	_var04, #0 wz
25cd8     01 FA 65 A6 |  if_e	neg	result1, #1
25cdc     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25ce0     00 0A 0E F2 | 	cmp	_var06, #0 wz
25ce4     01 FA 05 A6 |  if_e	mov	result1, #1
25ce8     03 FB 01 56 |  if_ne	mov	result1, _var04
25cec     05 FB 81 51 |  if_ne	sub	result1, _var06
25cf0                 | __system__strncmp_ret
25cf0     2D 00 64 FD | 	ret
25cf4                 | 
25cf4                 | __system____root_opendir
25cf4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
25cf8     04 12 06 F1 | 	add	arg01, #4
25cfc     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
25d00     00 FA 05 F6 | 	mov	result1, #0
25d04     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
25d08                 | __system____root_opendir_ret
25d08     2D 00 64 FD | 	ret
25d0c                 | 
25d0c                 | __system____root_readdir
25d0c     03 4A 05 F6 | 	mov	COUNT_, #3
25d10     A8 00 A0 FD | 	call	#pushregs_
25d14     09 1F 02 F6 | 	mov	local01, arg01
25d18     0A 21 02 F6 | 	mov	local02, arg02
25d1c     04 1E 06 F1 | 	add	local01, #4
25d20     0F 23 02 FB | 	rdlong	local03, local01
25d24     04 1E 86 F1 | 	sub	local01, #4
25d28                 | LR__3710
25d28     74 E6 05 F1 | 	add	ptr___system__dat__, #116
25d2c     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
25d30     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
25d34     01 FA 65 A6 |  if_e	neg	result1, #1
25d38     48 00 90 AD |  if_e	jmp	#LR__3711
25d3c     11 17 0A FB | 	rdlong	arg03, local03 wz
25d40     04 22 06 A1 |  if_e	add	local03, #4
25d44     E0 FF 9F AD |  if_e	jmp	#LR__3710
25d48     11 15 02 FB | 	rdlong	arg02, local03
25d4c     01 14 06 F1 | 	add	arg02, #1
25d50     10 13 02 F6 | 	mov	arg01, local02
25d54     40 16 06 F6 | 	mov	arg03, #64
25d58     58 FE BF FD | 	call	#__system__strncpy
25d5c     50 20 06 F1 | 	add	local02, #80
25d60     10 03 48 FC | 	wrbyte	#1, local02
25d64     08 20 86 F1 | 	sub	local02, #8
25d68     10 01 68 FC | 	wrlong	#0, local02
25d6c     04 20 06 F1 | 	add	local02, #4
25d70     10 01 68 FC | 	wrlong	#0, local02
25d74     04 22 06 F1 | 	add	local03, #4
25d78     04 1E 06 F1 | 	add	local01, #4
25d7c     0F 23 62 FC | 	wrlong	local03, local01
25d80     00 FA 05 F6 | 	mov	result1, #0
25d84                 | LR__3711
25d84     A7 F0 03 F6 | 	mov	ptra, fp
25d88     B2 00 A0 FD | 	call	#popregs_
25d8c                 | __system____root_readdir_ret
25d8c     2D 00 64 FD | 	ret
25d90                 | 
25d90                 | __system____root_closedir
25d90     00 FA 05 F6 | 	mov	result1, #0
25d94                 | __system____root_closedir_ret
25d94     2D 00 64 FD | 	ret
25d98                 | 
25d98                 | __system____root_stat
25d98     0A 01 02 F6 | 	mov	_var01, arg02
25d9c     00 13 02 F6 | 	mov	arg01, _var01
25da0     00 14 06 F6 | 	mov	arg02, #0
25da4     30 16 06 F6 | 	mov	arg03, #48
25da8     98 00 A0 FD | 	call	#\builtin_bytefill_
25dac     08 00 06 F1 | 	add	_var01, #8
25db0     08 00 80 FF 
25db4     00 FF 6B FC | 	wrlong	##4607, _var01
25db8     00 FA 05 F6 | 	mov	result1, #0
25dbc                 | __system____root_stat_ret
25dbc     2D 00 64 FD | 	ret
25dc0                 | 
25dc0                 | __system___normalizeName
25dc0     00 00 06 F6 | 	mov	_var01, #0
25dc4     09 03 02 F6 | 	mov	_var02, arg01
25dc8     01 05 02 F6 | 	mov	_var03, _var02
25dcc                 | LR__3720
25dcc     01 07 CA FA | 	rdbyte	_var04, _var02 wz
25dd0     5C 01 90 AD |  if_e	jmp	#LR__3739
25dd4     00 00 0E F2 | 	cmp	_var01, #0 wz
25dd8     02 07 02 56 |  if_ne	mov	_var04, _var03
25ddc     01 04 06 51 |  if_ne	add	_var03, #1
25de0     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
25de4     00 00 06 56 |  if_ne	mov	_var01, #0
25de8     01 07 C2 FA | 	rdbyte	_var04, _var02
25dec     2E 06 0E F2 | 	cmp	_var04, #46 wz
25df0     D8 00 90 5D |  if_ne	jmp	#LR__3732
25df4     01 02 06 F1 | 	add	_var02, #1
25df8     01 07 C2 FA | 	rdbyte	_var04, _var02
25dfc     01 02 86 F1 | 	sub	_var02, #1
25e00     2F 06 0E F2 | 	cmp	_var04, #47 wz
25e04     18 00 90 AD |  if_e	jmp	#LR__3721
25e08     01 02 06 F1 | 	add	_var02, #1
25e0c     01 09 C2 FA | 	rdbyte	_var05, _var02
25e10     01 02 86 F1 | 	sub	_var02, #1
25e14     04 0B 02 F6 | 	mov	_var06, _var05
25e18     07 0A 4E F7 | 	zerox	_var06, #7 wz
25e1c     10 00 90 5D |  if_ne	jmp	#LR__3722
25e20                 | LR__3721
25e20     01 0D 02 F6 | 	mov	_var07, _var02
25e24     01 0C 06 F1 | 	add	_var07, #1
25e28     06 03 02 F6 | 	mov	_var02, _var07
25e2c     E0 00 90 FD | 	jmp	#LR__3736
25e30                 | LR__3722
25e30     01 02 06 F1 | 	add	_var02, #1
25e34     01 0D C2 FA | 	rdbyte	_var07, _var02
25e38     01 02 86 F1 | 	sub	_var02, #1
25e3c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
25e40     2E 06 0E F2 | 	cmp	_var04, #46 wz
25e44     84 00 90 5D |  if_ne	jmp	#LR__3731
25e48     02 02 06 F1 | 	add	_var02, #2
25e4c     01 0D C2 FA | 	rdbyte	_var07, _var02
25e50     02 02 86 F1 | 	sub	_var02, #2
25e54     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
25e58     2F 06 0E F2 | 	cmp	_var04, #47 wz
25e5c     18 00 90 AD |  if_e	jmp	#LR__3723
25e60     02 02 06 F1 | 	add	_var02, #2
25e64     01 09 C2 FA | 	rdbyte	_var05, _var02
25e68     02 02 86 F1 | 	sub	_var02, #2
25e6c     04 0B 02 F6 | 	mov	_var06, _var05
25e70     07 0A 4E F7 | 	zerox	_var06, #7 wz
25e74     54 00 90 5D |  if_ne	jmp	#LR__3730
25e78                 | LR__3723
25e78     02 02 06 F1 | 	add	_var02, #2
25e7c     09 05 5A F2 | 	cmps	_var03, arg01 wcz
25e80     40 00 90 ED |  if_be	jmp	#LR__3729
25e84     02 0F 02 F6 | 	mov	_var08, _var03
25e88     01 0E 86 F1 | 	sub	_var08, #1
25e8c                 | LR__3724
25e8c     07 07 C2 FA | 	rdbyte	_var04, _var08
25e90     2F 06 0E F2 | 	cmp	_var04, #47 wz
25e94     0C 00 90 5D |  if_ne	jmp	#LR__3725
25e98     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
25e9c     01 0E 86 11 |  if_a	sub	_var08, #1
25ea0     E8 FF 9F 1D |  if_a	jmp	#LR__3724
25ea4                 | LR__3725
25ea4     97 0C 48 FB | 	callpa	#(@LR__3727-@LR__3726)>>2,fcache_load_ptr_
25ea8                 | LR__3726
25ea8     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
25eac     10 00 90 ED |  if_be	jmp	#LR__3728
25eb0     07 07 C2 FA | 	rdbyte	_var04, _var08
25eb4     2F 06 0E F2 | 	cmp	_var04, #47 wz
25eb8     01 0E 86 51 |  if_ne	sub	_var08, #1
25ebc     E8 FF 9F 5D |  if_ne	jmp	#LR__3726
25ec0                 | LR__3727
25ec0                 | LR__3728
25ec0     07 05 02 F6 | 	mov	_var03, _var08
25ec4                 | LR__3729
25ec4     01 00 06 F6 | 	mov	_var01, #1
25ec8     44 00 90 FD | 	jmp	#LR__3736
25ecc                 | LR__3730
25ecc                 | LR__3731
25ecc                 | LR__3732
25ecc     97 18 48 FB | 	callpa	#(@LR__3734-@LR__3733)>>2,fcache_load_ptr_
25ed0                 | LR__3733
25ed0     01 07 CA FA | 	rdbyte	_var04, _var02 wz
25ed4     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
25ed8     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
25edc     20 00 90 AD |  if_e	jmp	#LR__3735
25ee0     01 0B 02 F6 | 	mov	_var06, _var02
25ee4     01 09 02 F6 | 	mov	_var05, _var02
25ee8     01 08 06 F1 | 	add	_var05, #1
25eec     05 11 C2 FA | 	rdbyte	_var09, _var06
25ef0     04 03 02 F6 | 	mov	_var02, _var05
25ef4     02 11 42 FC | 	wrbyte	_var09, _var03
25ef8     01 04 06 F1 | 	add	_var03, #1
25efc     D0 FF 9F FD | 	jmp	#LR__3733
25f00                 | LR__3734
25f00                 | LR__3735
25f00     01 07 C2 FA | 	rdbyte	_var04, _var02
25f04     2F 06 0E F2 | 	cmp	_var04, #47 wz
25f08     C0 FE 9F 5D |  if_ne	jmp	#LR__3720
25f0c     01 00 06 F6 | 	mov	_var01, #1
25f10                 | LR__3736
25f10     97 0C 48 FB | 	callpa	#(@LR__3738-@LR__3737)>>2,fcache_load_ptr_
25f14                 | LR__3737
25f14     01 07 C2 FA | 	rdbyte	_var04, _var02
25f18     2F 06 0E F2 | 	cmp	_var04, #47 wz
25f1c     01 0D 02 A6 |  if_e	mov	_var07, _var02
25f20     01 0C 06 A1 |  if_e	add	_var07, #1
25f24     06 03 02 A6 |  if_e	mov	_var02, _var07
25f28     E8 FF 9F AD |  if_e	jmp	#LR__3737
25f2c                 | LR__3738
25f2c     9C FE 9F FD | 	jmp	#LR__3720
25f30                 | LR__3739
25f30     02 01 48 FC | 	wrbyte	#0, _var03
25f34                 | __system___normalizeName_ret
25f34     2D 00 64 FD | 	ret
25f38                 | 
25f38                 | __system___strrev
25f38     09 01 CA FA | 	rdbyte	_var01, arg01 wz
25f3c     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
25f40     09 03 02 F6 | 	mov	_var02, arg01
25f44     97 1A 48 FB | 	callpa	#(@LR__3742-@LR__3740)>>2,fcache_load_ptr_
25f48                 | LR__3740
25f48     01 01 CA FA | 	rdbyte	_var01, _var02 wz
25f4c     01 02 06 51 |  if_ne	add	_var02, #1
25f50     F4 FF 9F 5D |  if_ne	jmp	#LR__3740
25f54     01 02 86 F1 | 	sub	_var02, #1
25f58                 | LR__3741
25f58     09 03 5A F2 | 	cmps	_var02, arg01 wcz
25f5c     1C 00 90 ED |  if_be	jmp	#LR__3743
25f60     09 01 C2 FA | 	rdbyte	_var01, arg01
25f64     01 05 C2 FA | 	rdbyte	_var03, _var02
25f68     09 05 42 FC | 	wrbyte	_var03, arg01
25f6c     01 01 42 FC | 	wrbyte	_var01, _var02
25f70     01 12 06 F1 | 	add	arg01, #1
25f74     01 02 86 F1 | 	sub	_var02, #1
25f78     DC FF 9F FD | 	jmp	#LR__3741
25f7c                 | LR__3742
25f7c                 | LR__3743
25f7c                 | __system___strrev_ret
25f7c     2D 00 64 FD | 	ret
25f80                 | 
25f80                 | __system___fmtpad
25f80     06 4A 05 F6 | 	mov	COUNT_, #6
25f84     A8 00 A0 FD | 	call	#pushregs_
25f88     09 1F 02 F6 | 	mov	local01, arg01
25f8c     0A 21 02 F6 | 	mov	local02, arg02
25f90     0B 23 02 F6 | 	mov	local03, arg03
25f94     10 13 EA F8 | 	getbyte	arg01, local02, #1
25f98     16 20 46 F0 | 	shr	local02, #22
25f9c     03 20 0E F5 | 	and	local02, #3 wz
25fa0     00 24 06 F6 | 	mov	local04, #0
25fa4     01 20 06 A6 |  if_e	mov	local02, #1
25fa8     0C 21 CA F7 | 	test	local02, arg04 wz
25fac     00 FA 05 A6 |  if_e	mov	result1, #0
25fb0     88 00 90 AD |  if_e	jmp	#LR__3753
25fb4     09 23 C2 F2 | 	subr	local03, arg01
25fb8     01 22 56 F2 | 	cmps	local03, #1 wc
25fbc     00 FA 05 C6 |  if_b	mov	result1, #0
25fc0     78 00 90 CD |  if_b	jmp	#LR__3753
25fc4     03 20 0E F2 | 	cmp	local02, #3 wz
25fc8     18 00 90 5D |  if_ne	jmp	#LR__3750
25fcc     01 18 0E F2 | 	cmp	arg04, #1 wz
25fd0     6E 20 62 FD | 	wrz	local02
25fd4     10 23 02 F1 | 	add	local03, local02
25fd8     11 23 52 F6 | 	abs	local03, local03 wc
25fdc     01 22 46 F0 | 	shr	local03, #1
25fe0     11 23 82 F6 | 	negc	local03, local03
25fe4                 | LR__3750
25fe4     01 22 56 F2 | 	cmps	local03, #1 wc
25fe8     4C 00 90 CD |  if_b	jmp	#LR__3752
25fec     11 27 02 F6 | 	mov	local05, local03
25ff0                 | LR__3751
25ff0     0F 21 02 F6 | 	mov	local02, local01
25ff4     0F 29 02 F6 | 	mov	local06, local01
25ff8     13 20 46 F7 | 	zerox	local02, #19
25ffc     14 28 46 F0 | 	shr	local06, #20
26000     02 28 66 F0 | 	shl	local06, #2
26004     ED 28 02 F1 | 	add	local06, __methods__
26008     14 29 02 FB | 	rdlong	local06, local06
2600c     20 12 06 F6 | 	mov	arg01, #32
26010     F2 22 02 F6 | 	mov	local03, objptr
26014     10 E5 01 F6 | 	mov	objptr, local02
26018     2D 28 62 FD | 	call	local06
2601c     11 E5 01 F6 | 	mov	objptr, local03
26020     FD 28 02 F6 | 	mov	local06, result1
26024     00 28 56 F2 | 	cmps	local06, #0 wc
26028     14 FB 01 C6 |  if_b	mov	result1, local06
2602c     0C 00 90 CD |  if_b	jmp	#LR__3753
26030     14 25 02 F1 | 	add	local04, local06
26034     EE 27 6E FB | 	djnz	local05, #LR__3751
26038                 | LR__3752
26038     12 FB 01 F6 | 	mov	result1, local04
2603c                 | LR__3753
2603c     A7 F0 03 F6 | 	mov	ptra, fp
26040     B2 00 A0 FD | 	call	#popregs_
26044                 | __system___fmtpad_ret
26044     2D 00 64 FD | 	ret
26048                 | 
26048                 | __system___uitoa
26048     04 4A 05 F6 | 	mov	COUNT_, #4
2604c     A8 00 A0 FD | 	call	#pushregs_
26050     09 1F 02 F6 | 	mov	local01, arg01
26054     00 1A 4E F2 | 	cmps	arg05, #0 wz
26058     0F 1B 02 F6 | 	mov	arg05, local01
2605c     00 20 06 F6 | 	mov	local02, #0
26060     37 22 06 56 |  if_ne	mov	local03, #55
26064     57 22 06 A6 |  if_e	mov	local03, #87
26068                 | LR__3760
26068     0B 15 12 FD | 	qdiv	arg02, arg03
2606c     19 24 62 FD | 	getqy	local04
26070     0B 15 12 FD | 	qdiv	arg02, arg03
26074     0A 24 16 F2 | 	cmp	local04, #10 wc
26078     30 24 06 C1 |  if_b	add	local04, #48
2607c     11 25 02 31 |  if_ae	add	local04, local03
26080     0D 25 42 FC | 	wrbyte	local04, arg05
26084     01 1A 06 F1 | 	add	arg05, #1
26088     01 20 06 F1 | 	add	local02, #1
2608c     18 14 62 FD | 	getqx	arg02
26090     00 14 0E F2 | 	cmp	arg02, #0 wz
26094     D0 FF 9F 5D |  if_ne	jmp	#LR__3760
26098     0C 21 12 F2 | 	cmp	local02, arg04 wc
2609c     C8 FF 9F CD |  if_b	jmp	#LR__3760
260a0     0D 01 48 FC | 	wrbyte	#0, arg05
260a4     0F 13 02 F6 | 	mov	arg01, local01
260a8     8C FE BF FD | 	call	#__system___strrev
260ac     10 FB 01 F6 | 	mov	result1, local02
260b0     A7 F0 03 F6 | 	mov	ptra, fp
260b4     B2 00 A0 FD | 	call	#popregs_
260b8                 | __system___uitoa_ret
260b8     2D 00 64 FD | 	ret
260bc                 | 
260bc                 | __system__disassemble_0498
260bc     10 4A 05 F6 | 	mov	COUNT_, #16
260c0     A8 00 A0 FD | 	call	#pushregs_
260c4     09 1F 02 F6 | 	mov	local01, arg01
260c8     0A 21 02 F6 | 	mov	local02, arg02
260cc     0B 23 02 F6 | 	mov	local03, arg03
260d0     0C 25 02 F6 | 	mov	local04, arg04
260d4     0D 27 02 F6 | 	mov	local05, arg05
260d8     13 13 52 F6 | 	abs	arg01, local05 wc
260dc     1F 28 C6 C9 |  if_b	decod	local06, #31
260e0     00 28 06 36 |  if_ae	mov	local06, #0
260e4     F0 CF BF FD | 	call	#__system___float_fromuns
260e8     14 FB 61 F5 | 	xor	result1, local06
260ec     FD 2A 02 F6 | 	mov	local07, result1
260f0     00 2C 06 F6 | 	mov	local08, #0
260f4     0F 13 02 F6 | 	mov	arg01, local01
260f8     00 14 06 F6 | 	mov	arg02, #0
260fc     01 16 06 F6 | 	mov	arg03, #1
26100     0C D8 BF FD | 	call	#__system___float_cmp
26104     00 FA 0D F2 | 	cmp	result1, #0 wz
26108     00 2E 06 A6 |  if_e	mov	local09, #0
2610c     10 01 68 AC |  if_e	wrlong	#0, local02
26110     11 2F 62 AC |  if_e	wrlong	local09, local03
26114     8C 01 90 AD |  if_e	jmp	#LR__3782
26118     0F 13 02 F6 | 	mov	arg01, local01
2611c     BC DC BF FD | 	call	#__system____builtin_ilogb
26120     FD 30 02 F6 | 	mov	local10, result1
26124     0A 26 0E F2 | 	cmp	local05, #10 wz
26128     24 00 90 5D |  if_ne	jmp	#LR__3770
2612c     18 2F 02 F6 | 	mov	local09, local10
26130     01 2E 66 F0 | 	shl	local09, #1
26134     18 2F 02 F1 | 	add	local09, local10
26138     17 31 52 F6 | 	abs	local10, local09 wc
2613c     0A 30 16 FD | 	qdiv	local10, #10
26140     09 32 06 F6 | 	mov	local11, #9
26144     18 30 62 FD | 	getqx	local10
26148     18 31 82 F6 | 	negc	local10, local10
2614c     04 00 90 FD | 	jmp	#LR__3771
26150                 | LR__3770
26150     18 32 06 F6 | 	mov	local11, #24
26154                 | LR__3771
26154                 | LR__3772
26154     08 2C 56 F2 | 	cmps	local08, #8 wc
26158     01 2C 06 F1 | 	add	local08, #1
2615c     60 00 90 3D |  if_ae	jmp	#LR__3773
26160     00 C0 1F FF 
26164     00 12 06 F6 | 	mov	arg01, ##1065353216
26168     15 15 02 F6 | 	mov	arg02, local07
2616c     18 17 02 F6 | 	mov	arg03, local10
26170     4C E3 BF FD | 	call	#__system___float_pow_n
26174     FD 14 02 F6 | 	mov	arg02, result1
26178     0F 13 02 F6 | 	mov	arg01, local01
2617c     60 D5 BF FD | 	call	#__system___float_div
26180     FD 34 02 F6 | 	mov	local12, result1
26184     1A 13 02 F6 | 	mov	arg01, local12
26188     00 C0 1F FF 
2618c     00 14 06 F6 | 	mov	arg02, ##1065353216
26190     01 16 06 F6 | 	mov	arg03, #1
26194     78 D7 BF FD | 	call	#__system___float_cmp
26198     00 FA 55 F2 | 	cmps	result1, #0 wc
2619c     01 30 86 C1 |  if_b	sub	local10, #1
261a0     B0 FF 9F CD |  if_b	jmp	#LR__3772
261a4     15 15 02 F6 | 	mov	arg02, local07
261a8     1A 13 02 F6 | 	mov	arg01, local12
261ac     01 16 66 F6 | 	neg	arg03, #1
261b0     5C D7 BF FD | 	call	#__system___float_cmp
261b4     00 FA 55 F2 | 	cmps	result1, #0 wc
261b8     01 30 06 31 |  if_ae	add	local10, #1
261bc     94 FF 9F 3D |  if_ae	jmp	#LR__3772
261c0                 | LR__3773
261c0     1A 13 02 F6 | 	mov	arg01, local12
261c4     14 DC BF FD | 	call	#__system____builtin_ilogb
261c8     FD 36 02 F6 | 	mov	local13, result1
261cc     1A 39 02 F6 | 	mov	local14, local12
261d0     17 39 06 F4 | 	bitl	local14, #279
261d4     17 38 26 F4 | 	bith	local14, #23
261d8     1B 39 62 F0 | 	shl	local14, local13
261dc     02 26 0E F2 | 	cmp	local05, #2 wz
261e0     02 24 66 A0 |  if_e	shl	local04, #2
261e4     00 3A 06 F6 | 	mov	local15, #0
261e8     00 24 56 F2 | 	cmps	local04, #0 wc
261ec     10 00 90 3D |  if_ae	jmp	#LR__3774
261f0     18 25 C2 F2 | 	subr	local04, local10
261f4     00 24 56 F2 | 	cmps	local04, #0 wc
261f8     A0 00 90 CD |  if_b	jmp	#LR__3781
261fc     04 00 90 FD | 	jmp	#LR__3775
26200                 | LR__3774
26200     01 24 06 F1 | 	add	local04, #1
26204                 | LR__3775
26204     19 25 7A F3 | 	fles	local04, local11 wcz
26208     01 3C 06 F6 | 	mov	local16, #1
2620c     97 22 48 FB | 	callpa	#(@LR__3777-@LR__3776)>>2,fcache_load_ptr_
26210                 | LR__3776
26210     00 40 00 FF 
26214     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
26218     38 00 90 3D |  if_ae	jmp	#LR__3778
2621c     01 24 56 F2 | 	cmps	local04, #1 wc
26220     01 24 86 F1 | 	sub	local04, #1
26224     2C 00 90 CD |  if_b	jmp	#LR__3778
26228     13 3B 02 FD | 	qmul	local15, local05
2622c     1C 37 02 F6 | 	mov	local13, local14
26230     17 36 46 F0 | 	shr	local13, #23
26234     17 39 06 F4 | 	bitl	local14, #279
26238     18 3A 62 FD | 	getqx	local15
2623c     13 3D 02 FD | 	qmul	local16, local05
26240     18 3C 62 FD | 	getqx	local16
26244     13 39 02 FD | 	qmul	local14, local05
26248     1B 3B 02 F1 | 	add	local15, local13
2624c     18 38 62 FD | 	getqx	local14
26250     BC FF 9F FD | 	jmp	#LR__3776
26254                 | LR__3777
26254                 | LR__3778
26254     13 2F 02 F6 | 	mov	local09, local05
26258     17 2E 66 F0 | 	shl	local09, #23
2625c     17 37 52 F6 | 	abs	local13, local09 wc
26260     01 36 46 F0 | 	shr	local13, #1
26264     1B 37 82 F6 | 	negc	local13, local13
26268     1B 39 1A F2 | 	cmp	local14, local13 wcz
2626c     20 00 90 1D |  if_a	jmp	#LR__3779
26270     17 26 66 F0 | 	shl	local05, #23
26274     13 37 52 F6 | 	abs	local13, local05 wc
26278     01 36 46 F0 | 	shr	local13, #1
2627c     1B 37 82 F6 | 	negc	local13, local13
26280     1B 39 0A F2 | 	cmp	local14, local13 wz
26284     14 00 90 5D |  if_ne	jmp	#LR__3780
26288     01 3A CE F7 | 	test	local15, #1 wz
2628c     0C 00 90 AD |  if_e	jmp	#LR__3780
26290                 | LR__3779
26290     01 3A 06 F1 | 	add	local15, #1
26294     1E 3B 0A F2 | 	cmp	local15, local16 wz
26298     01 30 06 A1 |  if_e	add	local10, #1
2629c                 | LR__3780
2629c                 | LR__3781
2629c     10 3B 62 FC | 	wrlong	local15, local02
262a0     11 31 62 FC | 	wrlong	local10, local03
262a4                 | LR__3782
262a4     A7 F0 03 F6 | 	mov	ptra, fp
262a8     B2 00 A0 FD | 	call	#popregs_
262ac                 | __system__disassemble_0498_ret
262ac     2D 00 64 FD | 	ret
262b0                 | 
262b0                 | __system__emitsign_0500
262b0     00 FA 05 F6 | 	mov	result1, #0
262b4     00 14 0E F2 | 	cmp	arg02, #0 wz
262b8     09 01 02 56 |  if_ne	mov	_var01, arg01
262bc     01 12 06 51 |  if_ne	add	arg01, #1
262c0     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
262c4     01 FA 05 56 |  if_ne	mov	result1, #1
262c8     00 16 0E F2 | 	cmp	arg03, #0 wz
262cc     09 61 48 5C |  if_ne	wrbyte	#48, arg01
262d0     01 12 06 51 |  if_ne	add	arg01, #1
262d4     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
262d8     02 FA 05 51 |  if_ne	add	result1, #2
262dc                 | __system__emitsign_0500_ret
262dc     2D 00 64 FD | 	ret
262e0                 | 
262e0                 | __system___gettxfunc
262e0     01 4A 05 F6 | 	mov	COUNT_, #1
262e4     A8 00 A0 FD | 	call	#pushregs_
262e8     A0 F8 BF FD | 	call	#__system____getftab
262ec     FD 1E 0A F6 | 	mov	local01, result1 wz
262f0     10 00 90 AD |  if_e	jmp	#LR__3790
262f4     08 1E 06 F1 | 	add	local01, #8
262f8     0F 15 0A FB | 	rdlong	arg02, local01 wz
262fc     08 1E 86 F1 | 	sub	local01, #8
26300     08 00 90 5D |  if_ne	jmp	#LR__3791
26304                 | LR__3790
26304     00 FA 05 F6 | 	mov	result1, #0
26308     0C 00 90 FD | 	jmp	#LR__3792
2630c                 | LR__3791
2630c     00 98 04 FF 
26310     00 1E 46 F5 | 	or	local01, ##154140672
26314     0F FB 01 F6 | 	mov	result1, local01
26318                 | LR__3792
26318     A7 F0 03 F6 | 	mov	ptra, fp
2631c     B2 00 A0 FD | 	call	#popregs_
26320                 | __system___gettxfunc_ret
26320     2D 00 64 FD | 	ret
26324                 | 
26324                 | __system___getrxfunc
26324     01 4A 05 F6 | 	mov	COUNT_, #1
26328     A8 00 A0 FD | 	call	#pushregs_
2632c     5C F8 BF FD | 	call	#__system____getftab
26330     FD 1E 0A F6 | 	mov	local01, result1 wz
26334     10 00 90 AD |  if_e	jmp	#LR__3800
26338     08 1E 06 F1 | 	add	local01, #8
2633c     0F 15 0A FB | 	rdlong	arg02, local01 wz
26340     08 1E 86 F1 | 	sub	local01, #8
26344     08 00 90 5D |  if_ne	jmp	#LR__3801
26348                 | LR__3800
26348     00 FA 05 F6 | 	mov	result1, #0
2634c     0C 00 90 FD | 	jmp	#LR__3802
26350                 | LR__3801
26350     00 A0 04 FF 
26354     00 1E 46 F5 | 	or	local01, ##155189248
26358     0F FB 01 F6 | 	mov	result1, local01
2635c                 | LR__3802
2635c     A7 F0 03 F6 | 	mov	ptra, fp
26360     B2 00 A0 FD | 	call	#popregs_
26364                 | __system___getrxfunc_ret
26364     2D 00 64 FD | 	ret
26368                 | 
26368                 | __system___getiolock_0540
26368     01 4A 05 F6 | 	mov	COUNT_, #1
2636c     A8 00 A0 FD | 	call	#pushregs_
26370     18 F8 BF FD | 	call	#__system____getftab
26374     FD 1E 0A F6 | 	mov	local01, result1 wz
26378     10 00 90 AD |  if_e	jmp	#LR__3810
2637c     08 1E 06 F1 | 	add	local01, #8
26380     0F FB 09 FB | 	rdlong	result1, local01 wz
26384     08 1E 86 F1 | 	sub	local01, #8
26388     18 00 90 5D |  if_ne	jmp	#LR__3811
2638c                 | LR__3810
2638c     01 00 00 FF 
26390     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
26394     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
26398     01 00 00 FF 
2639c     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
263a0     08 00 90 FD | 	jmp	#LR__3812
263a4                 | LR__3811
263a4     0C 1E 06 F1 | 	add	local01, #12
263a8     0F FB 01 F6 | 	mov	result1, local01
263ac                 | LR__3812
263ac     A7 F0 03 F6 | 	mov	ptra, fp
263b0     B2 00 A0 FD | 	call	#popregs_
263b4                 | __system___getiolock_0540_ret
263b4     2D 00 64 FD | 	ret
263b8                 | 
263b8                 | __system____ScanForChar
263b8     09 01 02 F6 | 	mov	_var01, arg01
263bc     09 03 02 F6 | 	mov	_var02, arg01
263c0     97 06 48 FB | 	callpa	#(@LR__3821-@LR__3820)>>2,fcache_load_ptr_
263c4                 | LR__3820
263c4     01 FB C9 FA | 	rdbyte	result1, _var02 wz
263c8     01 02 06 51 |  if_ne	add	_var02, #1
263cc     F4 FF 9F 5D |  if_ne	jmp	#LR__3820
263d0                 | LR__3821
263d0     09 03 82 F1 | 	sub	_var02, arg01
263d4     01 FB 01 F6 | 	mov	result1, _var02
263d8     FD 12 0A F6 | 	mov	arg01, result1 wz
263dc     00 FA 05 A6 |  if_e	mov	result1, #0
263e0     B8 00 90 AD |  if_e	jmp	#LR__3828
263e4     0A 05 02 F6 | 	mov	_var03, arg02
263e8     07 04 4E F7 | 	zerox	_var03, #7 wz
263ec     00 FA 05 A6 |  if_e	mov	result1, #0
263f0     A8 00 90 AD |  if_e	jmp	#LR__3828
263f4     01 16 16 F2 | 	cmp	arg03, #1 wc
263f8     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
263fc     01 16 06 86 |  if_c_and_z	mov	arg03, #1
26400     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
26404     94 00 90 4D |  if_c_and_nz	jmp	#LR__3828
26408     09 17 1A F2 | 	cmp	arg03, arg01 wcz
2640c     10 00 90 ED |  if_be	jmp	#LR__3822
26410     00 18 0E F2 | 	cmp	arg04, #0 wz
26414     00 FA 05 A6 |  if_e	mov	result1, #0
26418     80 00 90 AD |  if_e	jmp	#LR__3828
2641c     09 17 02 F6 | 	mov	arg03, arg01
26420                 | LR__3822
26420     01 16 86 F1 | 	sub	arg03, #1
26424     00 18 0E F2 | 	cmp	arg04, #0 wz
26428     38 00 90 5D |  if_ne	jmp	#LR__3824
2642c     0B 07 02 F6 | 	mov	_var04, arg03
26430     09 09 02 F6 | 	mov	_var05, arg01
26434                 | LR__3823
26434     04 07 12 F2 | 	cmp	_var04, _var05 wc
26438     5C 00 90 3D |  if_ae	jmp	#LR__3827
2643c     03 05 02 F6 | 	mov	_var03, _var04
26440     00 05 02 F1 | 	add	_var03, _var01
26444     02 05 C2 FA | 	rdbyte	_var03, _var03
26448     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
2644c     0C 05 0A F2 | 	cmp	_var03, arg04 wz
26450     01 06 06 A1 |  if_e	add	_var04, #1
26454     03 FB 01 A6 |  if_e	mov	result1, _var04
26458     40 00 90 AD |  if_e	jmp	#LR__3828
2645c     01 06 06 F1 | 	add	_var04, #1
26460     D0 FF 9F FD | 	jmp	#LR__3823
26464                 | LR__3824
26464     0B 07 02 F6 | 	mov	_var04, arg03
26468                 | LR__3825
26468     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
2646c     28 00 90 1D |  if_a	jmp	#LR__3826
26470     03 09 02 F6 | 	mov	_var05, _var04
26474     00 09 02 F1 | 	add	_var05, _var01
26478     04 05 C2 FA | 	rdbyte	_var03, _var05
2647c     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
26480     04 05 0A F2 | 	cmp	_var03, _var05 wz
26484     01 06 06 A1 |  if_e	add	_var04, #1
26488     03 FB 01 A6 |  if_e	mov	result1, _var04
2648c     0C 00 90 AD |  if_e	jmp	#LR__3828
26490     01 06 86 F1 | 	sub	_var04, #1
26494     D0 FF 9F FD | 	jmp	#LR__3825
26498                 | LR__3826
26498                 | LR__3827
26498     00 FA 05 F6 | 	mov	result1, #0
2649c                 | LR__3828
2649c                 | __system____ScanForChar_ret
2649c     2D 00 64 FD | 	ret
264a0                 | 
264a0                 | __system___basic_dir
264a0     05 4A 05 F6 | 	mov	COUNT_, #5
264a4     A8 00 A0 FD | 	call	#pushregs_
264a8     4C F0 07 F1 | 	add	ptra, #76
264ac     04 4E 05 F1 | 	add	fp, #4
264b0     A7 12 62 FC | 	wrlong	arg01, fp
264b4     04 4E 05 F1 | 	add	fp, #4
264b8     A7 14 62 FC | 	wrlong	arg02, fp
264bc     04 4E 85 F1 | 	sub	fp, #4
264c0     A7 14 0A FB | 	rdlong	arg02, fp wz
264c4     04 4E 85 F1 | 	sub	fp, #4
264c8     04 4E 05 51 |  if_ne	add	fp, #4
264cc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
264d0     04 4E 85 51 |  if_ne	sub	fp, #4
264d4     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
264d8     70 00 90 AD |  if_e	jmp	#LR__3830
264dc     03 00 00 FF 
264e0     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
264e4     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
264e8     03 00 00 FF 
264ec     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
264f0     03 00 00 5F 
264f4     28 E7 05 51 |  if_ne	add	ptr___system__dat__, ##1832
264f8     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
264fc     03 00 00 5F 
26500     28 E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
26504     D8 E9 BF 5D |  if_ne	call	#__system__closedir
26508     80 01 00 FF 
2650c     B8 13 06 F6 | 	mov	arg01, ##@LR__4998
26510     E0 E8 BF FD | 	call	#__system__opendir
26514     03 00 00 FF 
26518     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
2651c     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
26520     08 4E 05 F1 | 	add	fp, #8
26524     A7 20 02 FB | 	rdlong	local02, fp
26528     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2652c     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
26530     04 4E 85 F1 | 	sub	fp, #4
26534     A7 20 02 FB | 	rdlong	local02, fp
26538     04 4E 85 F1 | 	sub	fp, #4
2653c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26540     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
26544     03 00 00 FF 
26548     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2654c                 | LR__3830
2654c     03 00 00 FF 
26550     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
26554     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
26558     03 00 00 FF 
2655c     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
26560     80 01 00 AF 
26564     BA FB 05 A6 |  if_e	mov	result1, ##@LR__4999
26568     84 02 90 AD |  if_e	jmp	#LR__3843
2656c                 | LR__3831
2656c     03 00 00 FF 
26570     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
26574     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
26578     03 00 00 FF 
2657c     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
26580     D0 E9 BF FD | 	call	#__system__readdir
26584     0C 4E 05 F1 | 	add	fp, #12
26588     A7 FA 61 FC | 	wrlong	result1, fp
2658c     0C 4E 85 F1 | 	sub	fp, #12
26590     00 FA 0D F2 | 	cmp	result1, #0 wz
26594     38 00 90 5D |  if_ne	jmp	#LR__3832
26598     03 00 00 FF 
2659c     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
265a0     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
265a4     03 00 00 FF 
265a8     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
265ac     30 E9 BF FD | 	call	#__system__closedir
265b0     03 00 00 FF 
265b4     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
265b8     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
265bc     03 00 00 FF 
265c0     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
265c4     80 01 00 FF 
265c8     BC FB 05 F6 | 	mov	result1, ##@LR__5000
265cc     20 02 90 FD | 	jmp	#LR__3843
265d0                 | LR__3832
265d0     0C 4E 05 F1 | 	add	fp, #12
265d4     A7 12 02 FB | 	rdlong	arg01, fp
265d8     0C 4E 85 F1 | 	sub	fp, #12
265dc     03 00 00 FF 
265e0     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
265e4     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
265e8     03 00 00 FF 
265ec     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
265f0     10 09 B0 FD | 	call	#__system___pat_match
265f4     00 FA 0D F2 | 	cmp	result1, #0 wz
265f8     70 FF 9F AD |  if_e	jmp	#LR__3831
265fc     03 00 00 FF 
26600     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
26604     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
26608     03 00 00 FF 
2660c     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
26610     78 01 90 AD |  if_e	jmp	#LR__3839
26614     0C 4E 05 F1 | 	add	fp, #12
26618     A7 12 02 FB | 	rdlong	arg01, fp
2661c     04 4E 05 F1 | 	add	fp, #4
26620     A7 14 02 F6 | 	mov	arg02, fp
26624     10 4E 85 F1 | 	sub	fp, #16
26628     2C F2 BF FD | 	call	#__system__stat
2662c     40 4E 05 F1 | 	add	fp, #64
26630     A7 FA 61 FC | 	wrlong	result1, fp
26634     40 4E 85 F1 | 	sub	fp, #64
26638     00 FA 0D F2 | 	cmp	result1, #0 wz
2663c     80 01 00 5F 
26640     BE FB 05 56 |  if_ne	mov	result1, ##@LR__5001
26644     A8 01 90 5D |  if_ne	jmp	#LR__3843
26648     18 4E 05 F1 | 	add	fp, #24
2664c     A7 20 02 FB | 	rdlong	local02, fp
26650     78 00 00 FF 
26654     00 20 06 F5 | 	and	local02, ##61440
26658     2C 4E 05 F1 | 	add	fp, #44
2665c     A7 20 62 FC | 	wrlong	local02, fp
26660     38 4E 85 F1 | 	sub	fp, #56
26664     A7 20 02 FB | 	rdlong	local02, fp
26668     0C 4E 85 F1 | 	sub	fp, #12
2666c     10 21 C2 FA | 	rdbyte	local02, local02
26670     2E 20 0E F2 | 	cmp	local02, #46 wz
26674     08 4E 05 A1 |  if_e	add	fp, #8
26678     A7 04 68 AC |  if_e	wrlong	#2, fp
2667c     08 4E C5 F3 | 	sumz	fp, #8
26680     A7 00 68 5C |  if_ne	wrlong	#0, fp
26684     08 4E 85 51 |  if_ne	sub	fp, #8
26688     44 4E 05 F1 | 	add	fp, #68
2668c     A7 20 02 FB | 	rdlong	local02, fp
26690     44 4E 85 F1 | 	sub	fp, #68
26694     08 00 00 FF 
26698     00 20 0E F2 | 	cmp	local02, ##4096 wz
2669c     18 00 90 5D |  if_ne	jmp	#LR__3833
266a0     08 4E 05 F1 | 	add	fp, #8
266a4     A7 20 02 FB | 	rdlong	local02, fp
266a8     10 20 46 F5 | 	or	local02, #16
266ac     A7 20 62 FC | 	wrlong	local02, fp
266b0     08 4E 85 F1 | 	sub	fp, #8
266b4     AC 00 90 FD | 	jmp	#LR__3838
266b8                 | LR__3833
266b8     44 4E 05 F1 | 	add	fp, #68
266bc     A7 20 02 FB | 	rdlong	local02, fp
266c0     44 4E 85 F1 | 	sub	fp, #68
266c4     10 00 00 FF 
266c8     00 20 0E F2 | 	cmp	local02, ##8192 wz
266cc     44 4E 05 51 |  if_ne	add	fp, #68
266d0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
266d4     44 4E 85 51 |  if_ne	sub	fp, #68
266d8     18 00 00 5F 
266dc     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
266e0     44 4E 05 51 |  if_ne	add	fp, #68
266e4     0F 23 02 56 |  if_ne	mov	local03, local01
266e8     44 4E 85 51 |  if_ne	sub	fp, #68
266ec     20 00 00 5F 
266f0     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
266f4     18 00 90 5D |  if_ne	jmp	#LR__3834
266f8     08 4E 05 F1 | 	add	fp, #8
266fc     A7 20 02 FB | 	rdlong	local02, fp
26700     04 20 46 F5 | 	or	local02, #4
26704     A7 20 62 FC | 	wrlong	local02, fp
26708     08 4E 85 F1 | 	sub	fp, #8
2670c     54 00 90 FD | 	jmp	#LR__3837
26710                 | LR__3834
26710     18 4E 05 F1 | 	add	fp, #24
26714     A7 20 02 FB | 	rdlong	local02, fp
26718     18 4E 85 F1 | 	sub	fp, #24
2671c     92 20 CE F7 | 	test	local02, #146 wz
26720     18 00 90 5D |  if_ne	jmp	#LR__3835
26724     08 4E 05 F1 | 	add	fp, #8
26728     A7 20 02 FB | 	rdlong	local02, fp
2672c     01 20 46 F5 | 	or	local02, #1
26730     A7 20 62 FC | 	wrlong	local02, fp
26734     08 4E 85 F1 | 	sub	fp, #8
26738     28 00 90 FD | 	jmp	#LR__3836
2673c                 | LR__3835
2673c     44 4E 05 F1 | 	add	fp, #68
26740     A7 24 02 FB | 	rdlong	local04, fp
26744     44 4E 85 F1 | 	sub	fp, #68
26748     08 00 00 FF 
2674c     00 24 0E F2 | 	cmp	local04, ##4096 wz
26750     08 4E 05 51 |  if_ne	add	fp, #8
26754     A7 24 02 5B |  if_ne	rdlong	local04, fp
26758     20 24 46 55 |  if_ne	or	local04, #32
2675c     A7 24 62 5C |  if_ne	wrlong	local04, fp
26760     08 4E 85 51 |  if_ne	sub	fp, #8
26764                 | LR__3836
26764                 | LR__3837
26764                 | LR__3838
26764     08 4E 05 F1 | 	add	fp, #8
26768     A7 24 02 FB | 	rdlong	local04, fp
2676c     08 4E 85 F1 | 	sub	fp, #8
26770     03 00 00 FF 
26774     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
26778     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
2677c     03 00 00 FF 
26780     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
26784     0F 25 CA F7 | 	test	local04, local01 wz
26788     E0 FD 9F AD |  if_e	jmp	#LR__3831
2678c                 | LR__3839
2678c     0C 4E 05 F1 | 	add	fp, #12
26790     A7 12 02 FB | 	rdlong	arg01, fp
26794     0C 4E 85 F1 | 	sub	fp, #12
26798     09 27 02 F6 | 	mov	local05, arg01
2679c     97 06 48 FB | 	callpa	#(@LR__3841-@LR__3840)>>2,fcache_load_ptr_
267a0                 | LR__3840
267a0     13 FB C9 FA | 	rdbyte	result1, local05 wz
267a4     01 26 06 51 |  if_ne	add	local05, #1
267a8     F4 FF 9F 5D |  if_ne	jmp	#LR__3840
267ac                 | LR__3841
267ac     13 13 C2 F2 | 	subr	arg01, local05
267b0     01 12 06 F1 | 	add	arg01, #1
267b4     28 E0 BF FD | 	call	#__system___gc_alloc_managed
267b8     48 4E 05 F1 | 	add	fp, #72
267bc     A7 FA 61 FC | 	wrlong	result1, fp
267c0     48 4E 85 F1 | 	sub	fp, #72
267c4     00 FA 0D F2 | 	cmp	result1, #0 wz
267c8     18 00 90 AD |  if_e	jmp	#LR__3842
267cc     48 4E 05 F1 | 	add	fp, #72
267d0     A7 12 02 FB | 	rdlong	arg01, fp
267d4     3C 4E 85 F1 | 	sub	fp, #60
267d8     A7 14 02 FB | 	rdlong	arg02, fp
267dc     0C 4E 85 F1 | 	sub	fp, #12
267e0     F8 A0 BF FD | 	call	#__system____builtin_strcpy
267e4                 | LR__3842
267e4     48 4E 05 F1 | 	add	fp, #72
267e8     A7 FA 01 FB | 	rdlong	result1, fp
267ec     48 4E 85 F1 | 	sub	fp, #72
267f0                 | LR__3843
267f0     A7 F0 03 F6 | 	mov	ptra, fp
267f4     B2 00 A0 FD | 	call	#popregs_
267f8                 | __system___basic_dir_ret
267f8     2D 00 64 FD | 	ret
267fc                 | 
267fc                 | __system__pack_0606
267fc     09 01 02 F6 | 	mov	_var01, arg01
26800     7F 16 06 F1 | 	add	arg03, #127
26804     04 18 CE F7 | 	test	arg04, #4 wz
26808     10 00 90 AD |  if_e	jmp	#LR__3850
2680c     00 00 0E F2 | 	cmp	_var01, #0 wz
26810     16 00 C6 A9 |  if_e	decod	_var01, #22
26814     F7 00 26 F4 | 	bith	_var01, #247
26818     B4 00 90 FD | 	jmp	#LR__3859
2681c                 | LR__3850
2681c     02 18 CE F7 | 	test	arg04, #2 wz
26820     00 C0 3F 5F 
26824     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
26828     00 14 06 56 |  if_ne	mov	arg02, #0
2682c     A0 00 90 5D |  if_ne	jmp	#LR__3858
26830     08 18 CE F7 | 	test	arg04, #8 wz
26834     00 00 06 56 |  if_ne	mov	_var01, #0
26838     94 00 90 5D |  if_ne	jmp	#LR__3857
2683c     FF 16 56 F2 | 	cmps	arg03, #255 wc
26840     00 C0 3F 3F 
26844     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
26848     00 14 06 36 |  if_ae	mov	arg02, #0
2684c     80 00 90 3D |  if_ae	jmp	#LR__3856
26850     01 16 56 F2 | 	cmps	arg03, #1 wc
26854     6C 00 90 3D |  if_ae	jmp	#LR__3854
26858     01 14 46 F0 | 	shr	arg02, #1
2685c     00 03 02 F6 | 	mov	_var02, _var01
26860     01 02 06 F5 | 	and	_var02, #1
26864     1F 02 66 F0 | 	shl	_var02, #31
26868     01 15 42 F5 | 	or	arg02, _var02
2686c     01 00 46 F0 | 	shr	_var01, #1
26870     97 1E 48 FB | 	callpa	#(@LR__3852-@LR__3851)>>2,fcache_load_ptr_
26874                 | LR__3851
26874     00 16 56 F2 | 	cmps	arg03, #0 wc
26878     34 00 90 3D |  if_ae	jmp	#LR__3853
2687c     00 00 0E F2 | 	cmp	_var01, #0 wz
26880     2C 00 90 AD |  if_e	jmp	#LR__3853
26884     0A 13 02 F6 | 	mov	arg01, arg02
26888     01 12 06 F5 | 	and	arg01, #1
2688c     01 16 06 F1 | 	add	arg03, #1
26890     01 14 46 F0 | 	shr	arg02, #1
26894     00 03 02 F6 | 	mov	_var02, _var01
26898     01 02 06 F5 | 	and	_var02, #1
2689c     1F 02 66 F0 | 	shl	_var02, #31
268a0     01 15 42 F5 | 	or	arg02, _var02
268a4     09 15 42 F5 | 	or	arg02, arg01
268a8     01 00 46 F0 | 	shr	_var01, #1
268ac     C4 FF 9F FD | 	jmp	#LR__3851
268b0                 | LR__3852
268b0                 | LR__3853
268b0     00 16 56 F2 | 	cmps	arg03, #0 wc
268b4     18 00 90 3D |  if_ae	jmp	#LR__3855
268b8     00 14 0E F2 | 	cmp	arg02, #0 wz
268bc     6F 14 62 FD | 	wrnz	arg02
268c0     0C 00 90 FD | 	jmp	#LR__3855
268c4                 | LR__3854
268c4     17 01 06 F4 | 	bitl	_var01, #279
268c8     17 16 66 F0 | 	shl	arg03, #23
268cc     0B 01 42 F5 | 	or	_var01, arg03
268d0                 | LR__3855
268d0                 | LR__3856
268d0                 | LR__3857
268d0                 | LR__3858
268d0                 | LR__3859
268d0     01 00 CE F7 | 	test	_var01, #1 wz
268d4     01 14 46 55 |  if_ne	or	arg02, #1
268d8     0A 17 02 F6 | 	mov	arg03, arg02
268dc     00 02 06 F6 | 	mov	_var02, #0
268e0     FF FF 3F FF 
268e4     FF 15 06 F1 | 	add	arg02, ##2147483647
268e8     0B 15 12 F2 | 	cmp	arg02, arg03 wc
268ec     01 02 06 C6 |  if_b	mov	_var02, #1
268f0     01 01 02 F1 | 	add	_var01, _var02
268f4     01 18 CE F7 | 	test	arg04, #1 wz
268f8     1F 00 26 54 |  if_ne	bith	_var01, #31
268fc     00 FB 01 F6 | 	mov	result1, _var01
26900                 | __system__pack_0606_ret
26900     2D 00 64 FD | 	ret
26904                 | 
26904                 | __system___rxtxioctl_0696
26904     00 15 0E F2 | 	cmp	arg02, #256 wz
26908     0C 00 90 AD |  if_e	jmp	#LR__3860
2690c     01 15 0E F2 | 	cmp	arg02, #257 wz
26910     1C 00 90 AD |  if_e	jmp	#LR__3861
26914     30 00 90 FD | 	jmp	#LR__3862
26918                 | LR__3860
26918     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2691c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
26920     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26924     0B FB 61 FC | 	wrlong	result1, arg03
26928     00 FA 05 F6 | 	mov	result1, #0
2692c     28 00 90 FD | 	jmp	#LR__3863
26930                 | LR__3861
26930     0B 13 02 FB | 	rdlong	arg01, arg03
26934     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26938     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2693c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26940     00 FA 05 F6 | 	mov	result1, #0
26944     10 00 90 FD | 	jmp	#LR__3863
26948                 | LR__3862
26948     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2694c     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
26950     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26954     01 FA 65 F6 | 	neg	result1, #1
26958                 | LR__3863
26958                 | __system___rxtxioctl_0696_ret
26958     2D 00 64 FD | 	ret
2695c                 | 
2695c                 | __system____dummy_flush_0697
2695c     00 FA 05 F6 | 	mov	result1, #0
26960                 | __system____dummy_flush_0697_ret
26960     2D 00 64 FD | 	ret
26964                 | 
26964                 | __system___vfswrite
26964     09 4A 05 F6 | 	mov	COUNT_, #9
26968     A8 00 A0 FD | 	call	#pushregs_
2696c     09 1F 02 F6 | 	mov	local01, arg01
26970     0A 21 02 F6 | 	mov	local02, arg02
26974     0B 23 02 F6 | 	mov	local03, arg03
26978     10 25 02 F6 | 	mov	local04, local02
2697c     08 1E 06 F1 | 	add	local01, #8
26980     0F 13 02 FB | 	rdlong	arg01, local01
26984     08 1E 86 F1 | 	sub	local01, #8
26988     02 12 CE F7 | 	test	arg01, #2 wz
2698c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26990     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26994     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26998     01 FA 65 A6 |  if_e	neg	result1, #1
2699c     80 01 90 AD |  if_e	jmp	#LR__3876
269a0     08 1E 06 F1 | 	add	local01, #8
269a4     0F FB 01 FB | 	rdlong	result1, local01
269a8     08 1E 86 F1 | 	sub	local01, #8
269ac     40 FA CD F7 | 	test	result1, #64 wz
269b0     68 00 90 AD |  if_e	jmp	#LR__3871
269b4     08 1E 06 F1 | 	add	local01, #8
269b8     0F 15 02 FB | 	rdlong	arg02, local01
269bc     08 1E 86 F1 | 	sub	local01, #8
269c0     80 14 CE F7 | 	test	arg02, #128 wz
269c4     54 00 90 AD |  if_e	jmp	#LR__3870
269c8     30 1E 06 F1 | 	add	local01, #48
269cc     0F 27 02 FB | 	rdlong	local05, local01
269d0     13 29 02 F6 | 	mov	local06, local05
269d4     30 1E 86 F1 | 	sub	local01, #48
269d8     13 28 46 F7 | 	zerox	local06, #19
269dc     14 26 46 F0 | 	shr	local05, #20
269e0     02 26 66 F0 | 	shl	local05, #2
269e4     ED 26 02 F1 | 	add	local05, __methods__
269e8     13 27 02 FB | 	rdlong	local05, local05
269ec     0F 13 02 F6 | 	mov	arg01, local01
269f0     00 14 06 F6 | 	mov	arg02, #0
269f4     02 16 06 F6 | 	mov	arg03, #2
269f8     F2 2A 02 F6 | 	mov	local07, objptr
269fc     14 E5 01 F6 | 	mov	objptr, local06
26a00     2D 26 62 FD | 	call	local05
26a04     15 E5 01 F6 | 	mov	objptr, local07
26a08     08 1E 06 F1 | 	add	local01, #8
26a0c     0F 2B 02 FB | 	rdlong	local07, local01
26a10     80 2A 26 F5 | 	andn	local07, #128
26a14     0F 2B 62 FC | 	wrlong	local07, local01
26a18     08 1E 86 F1 | 	sub	local01, #8
26a1c                 | LR__3870
26a1c                 | LR__3871
26a1c     18 1E 06 F1 | 	add	local01, #24
26a20     0F 2B 0A FB | 	rdlong	local07, local01 wz
26a24     18 1E 86 F1 | 	sub	local01, #24
26a28     80 00 90 AD |  if_e	jmp	#LR__3873
26a2c     18 1E 06 F1 | 	add	local01, #24
26a30     0F 27 02 FB | 	rdlong	local05, local01
26a34     13 29 02 F6 | 	mov	local06, local05
26a38     18 1E 86 F1 | 	sub	local01, #24
26a3c     13 28 46 F7 | 	zerox	local06, #19
26a40     14 26 46 F0 | 	shr	local05, #20
26a44     02 26 66 F0 | 	shl	local05, #2
26a48     ED 26 02 F1 | 	add	local05, __methods__
26a4c     13 27 02 FB | 	rdlong	local05, local05
26a50     10 15 02 F6 | 	mov	arg02, local02
26a54     11 17 02 F6 | 	mov	arg03, local03
26a58     0F 13 02 F6 | 	mov	arg01, local01
26a5c     F2 2A 02 F6 | 	mov	local07, objptr
26a60     14 E5 01 F6 | 	mov	objptr, local06
26a64     2D 26 62 FD | 	call	local05
26a68     15 E5 01 F6 | 	mov	objptr, local07
26a6c     FD 2C 02 F6 | 	mov	local08, result1
26a70     00 2C 56 F2 | 	cmps	local08, #0 wc
26a74     2C 00 90 3D |  if_ae	jmp	#LR__3872
26a78     08 1E 06 F1 | 	add	local01, #8
26a7c     0F 2B 02 FB | 	rdlong	local07, local01
26a80     20 2A 46 F5 | 	or	local07, #32
26a84     0F 2B 62 FC | 	wrlong	local07, local01
26a88     00 2C 4E F2 | 	cmps	local08, #0 wz
26a8c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26a90     F3 2C 62 FC | 	wrlong	local08, ptr___system__dat__
26a94     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26a98     01 FA 65 56 |  if_ne	neg	result1, #1
26a9c     00 FA 05 A6 |  if_e	mov	result1, #0
26aa0     7C 00 90 FD | 	jmp	#LR__3876
26aa4                 | LR__3872
26aa4     16 FB 01 F6 | 	mov	result1, local08
26aa8     74 00 90 FD | 	jmp	#LR__3876
26aac                 | LR__3873
26aac     1C 1E 06 F1 | 	add	local01, #28
26ab0     0F 2F 0A FB | 	rdlong	local09, local01 wz
26ab4     1C 1E 86 F1 | 	sub	local01, #28
26ab8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26abc     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26ac0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26ac4     01 FA 65 A6 |  if_e	neg	result1, #1
26ac8     54 00 90 AD |  if_e	jmp	#LR__3876
26acc     00 2C 06 F6 | 	mov	local08, #0
26ad0                 | LR__3874
26ad0     01 22 16 F2 | 	cmp	local03, #1 wc
26ad4     44 00 90 CD |  if_b	jmp	#LR__3875
26ad8     17 29 02 F6 | 	mov	local06, local09
26adc     17 27 02 F6 | 	mov	local05, local09
26ae0     13 28 46 F7 | 	zerox	local06, #19
26ae4     14 26 46 F0 | 	shr	local05, #20
26ae8     02 26 66 F0 | 	shl	local05, #2
26aec     ED 26 02 F1 | 	add	local05, __methods__
26af0     13 27 02 FB | 	rdlong	local05, local05
26af4     12 13 C2 FA | 	rdbyte	arg01, local04
26af8     0F 15 02 F6 | 	mov	arg02, local01
26afc     F2 2A 02 F6 | 	mov	local07, objptr
26b00     14 E5 01 F6 | 	mov	objptr, local06
26b04     01 24 06 F1 | 	add	local04, #1
26b08     2D 26 62 FD | 	call	local05
26b0c     15 E5 01 F6 | 	mov	objptr, local07
26b10     FD 2C 02 F1 | 	add	local08, result1
26b14     01 22 86 F1 | 	sub	local03, #1
26b18     B4 FF 9F FD | 	jmp	#LR__3874
26b1c                 | LR__3875
26b1c     16 FB 01 F6 | 	mov	result1, local08
26b20                 | LR__3876
26b20     A7 F0 03 F6 | 	mov	ptra, fp
26b24     B2 00 A0 FD | 	call	#popregs_
26b28                 | __system___vfswrite_ret
26b28     2D 00 64 FD | 	ret
26b2c                 | 
26b2c                 | __system___vfsread
26b2c     03 4A 05 F6 | 	mov	COUNT_, #3
26b30     A8 00 A0 FD | 	call	#pushregs_
26b34     28 F0 07 F1 | 	add	ptra, #40
26b38     04 4E 05 F1 | 	add	fp, #4
26b3c     A7 12 62 FC | 	wrlong	arg01, fp
26b40     04 4E 05 F1 | 	add	fp, #4
26b44     A7 14 62 FC | 	wrlong	arg02, fp
26b48     04 4E 05 F1 | 	add	fp, #4
26b4c     A7 16 62 FC | 	wrlong	arg03, fp
26b50     04 4E 85 F1 | 	sub	fp, #4
26b54     A7 FA 01 FB | 	rdlong	result1, fp
26b58     14 4E 05 F1 | 	add	fp, #20
26b5c     A7 FA 61 FC | 	wrlong	result1, fp
26b60     04 4E 05 F1 | 	add	fp, #4
26b64     A7 00 68 FC | 	wrlong	#0, fp
26b68     1C 4E 85 F1 | 	sub	fp, #28
26b6c     A7 12 02 FB | 	rdlong	arg01, fp
26b70     04 4E 85 F1 | 	sub	fp, #4
26b74     08 12 06 F1 | 	add	arg01, #8
26b78     09 FB 01 FB | 	rdlong	result1, arg01
26b7c     01 FA CD F7 | 	test	result1, #1 wz
26b80     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26b84     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26b88     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26b8c     01 FA 65 A6 |  if_e	neg	result1, #1
26b90     74 02 90 AD |  if_e	jmp	#LR__3886
26b94     04 4E 05 F1 | 	add	fp, #4
26b98     A7 12 02 FB | 	rdlong	arg01, fp
26b9c     04 4E 85 F1 | 	sub	fp, #4
26ba0     14 12 06 F1 | 	add	arg01, #20
26ba4     09 FB 09 FB | 	rdlong	result1, arg01 wz
26ba8     B8 00 90 AD |  if_e	jmp	#LR__3881
26bac     04 4E 05 F1 | 	add	fp, #4
26bb0     A7 12 02 FB | 	rdlong	arg01, fp
26bb4     09 17 02 F6 | 	mov	arg03, arg01
26bb8     14 16 06 F1 | 	add	arg03, #20
26bbc     0B 1F 02 FB | 	rdlong	local01, arg03
26bc0     0F 21 02 F6 | 	mov	local02, local01
26bc4     13 1E 46 F7 | 	zerox	local01, #19
26bc8     14 20 46 F0 | 	shr	local02, #20
26bcc     02 20 66 F0 | 	shl	local02, #2
26bd0     ED 20 02 F1 | 	add	local02, __methods__
26bd4     10 21 02 FB | 	rdlong	local02, local02
26bd8     04 4E 05 F1 | 	add	fp, #4
26bdc     A7 14 02 FB | 	rdlong	arg02, fp
26be0     04 4E 05 F1 | 	add	fp, #4
26be4     A7 16 02 FB | 	rdlong	arg03, fp
26be8     0C 4E 85 F1 | 	sub	fp, #12
26bec     F2 22 02 F6 | 	mov	local03, objptr
26bf0     0F E5 01 F6 | 	mov	objptr, local01
26bf4     2D 20 62 FD | 	call	local02
26bf8     11 E5 01 F6 | 	mov	objptr, local03
26bfc     10 4E 05 F1 | 	add	fp, #16
26c00     A7 FA 61 FC | 	wrlong	result1, fp
26c04     10 4E 85 F1 | 	sub	fp, #16
26c08     00 FA 55 F2 | 	cmps	result1, #0 wc
26c0c     44 00 90 3D |  if_ae	jmp	#LR__3880
26c10     04 4E 05 F1 | 	add	fp, #4
26c14     A7 22 02 FB | 	rdlong	local03, fp
26c18     11 1F 02 F6 | 	mov	local01, local03
26c1c     08 22 06 F1 | 	add	local03, #8
26c20     11 21 02 FB | 	rdlong	local02, local03
26c24     20 20 46 F5 | 	or	local02, #32
26c28     08 1E 06 F1 | 	add	local01, #8
26c2c     0F 21 62 FC | 	wrlong	local02, local01
26c30     0C 4E 05 F1 | 	add	fp, #12
26c34     A7 12 0A FB | 	rdlong	arg01, fp wz
26c38     10 4E 85 F1 | 	sub	fp, #16
26c3c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26c40     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26c44     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26c48     01 FA 65 56 |  if_ne	neg	result1, #1
26c4c     00 FA 05 A6 |  if_e	mov	result1, #0
26c50     B4 01 90 FD | 	jmp	#LR__3886
26c54                 | LR__3880
26c54     10 4E 05 F1 | 	add	fp, #16
26c58     A7 FA 01 FB | 	rdlong	result1, fp
26c5c     10 4E 85 F1 | 	sub	fp, #16
26c60     A4 01 90 FD | 	jmp	#LR__3886
26c64                 | LR__3881
26c64     04 4E 05 F1 | 	add	fp, #4
26c68     A7 12 02 FB | 	rdlong	arg01, fp
26c6c     20 12 06 F1 | 	add	arg01, #32
26c70     09 13 0A FB | 	rdlong	arg01, arg01 wz
26c74     14 4E 05 F1 | 	add	fp, #20
26c78     A7 12 62 FC | 	wrlong	arg01, fp
26c7c     18 4E 85 F1 | 	sub	fp, #24
26c80     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26c84     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26c88     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26c8c     01 FA 65 A6 |  if_e	neg	result1, #1
26c90     74 01 90 AD |  if_e	jmp	#LR__3886
26c94     04 4E 05 F1 | 	add	fp, #4
26c98     A7 22 02 FB | 	rdlong	local03, fp
26c9c     04 4E 85 F1 | 	sub	fp, #4
26ca0     28 22 06 F1 | 	add	local03, #40
26ca4     11 21 0A FB | 	rdlong	local02, local03 wz
26ca8     7C 00 90 AD |  if_e	jmp	#LR__3883
26cac     04 4E 05 F1 | 	add	fp, #4
26cb0     A7 12 02 FB | 	rdlong	arg01, fp
26cb4     09 23 02 F6 | 	mov	local03, arg01
26cb8     28 22 06 F1 | 	add	local03, #40
26cbc     11 1F 02 FB | 	rdlong	local01, local03
26cc0     0F 21 02 F6 | 	mov	local02, local01
26cc4     13 1E 46 F7 | 	zerox	local01, #19
26cc8     14 20 46 F0 | 	shr	local02, #20
26ccc     02 20 66 F0 | 	shl	local02, #2
26cd0     ED 20 02 F1 | 	add	local02, __methods__
26cd4     10 21 02 FB | 	rdlong	local02, local02
26cd8     20 4E 05 F1 | 	add	fp, #32
26cdc     A7 16 02 F6 | 	mov	arg03, fp
26ce0     24 4E 85 F1 | 	sub	fp, #36
26ce4     00 15 06 F6 | 	mov	arg02, #256
26ce8     F2 22 02 F6 | 	mov	local03, objptr
26cec     0F E5 01 F6 | 	mov	objptr, local01
26cf0     2D 20 62 FD | 	call	local02
26cf4     11 E5 01 F6 | 	mov	objptr, local03
26cf8     10 4E 05 F1 | 	add	fp, #16
26cfc     A7 FA 61 FC | 	wrlong	result1, fp
26d00     00 FA 4D F2 | 	cmps	result1, #0 wz
26d04     10 4E 85 F1 | 	sub	fp, #16
26d08     1C 00 90 5D |  if_ne	jmp	#LR__3882
26d0c     24 4E 05 F1 | 	add	fp, #36
26d10     A7 20 02 FB | 	rdlong	local02, fp
26d14     24 4E 85 F1 | 	sub	fp, #36
26d18     02 20 CE F7 | 	test	local02, #2 wz
26d1c     20 4E 05 51 |  if_ne	add	fp, #32
26d20     A7 02 68 5C |  if_ne	wrlong	#1, fp
26d24     20 4E 85 51 |  if_ne	sub	fp, #32
26d28                 | LR__3882
26d28                 | LR__3883
26d28     10 4E 05 F1 | 	add	fp, #16
26d2c     A7 00 68 FC | 	wrlong	#0, fp
26d30     10 4E 85 F1 | 	sub	fp, #16
26d34                 | LR__3884
26d34     0C 4E 05 F1 | 	add	fp, #12
26d38     A7 22 02 FB | 	rdlong	local03, fp
26d3c     0C 4E 85 F1 | 	sub	fp, #12
26d40     01 22 16 F2 | 	cmp	local03, #1 wc
26d44     B4 00 90 CD |  if_b	jmp	#LR__3885
26d48     18 4E 05 F1 | 	add	fp, #24
26d4c     A7 20 02 FB | 	rdlong	local02, fp
26d50     10 23 02 F6 | 	mov	local03, local02
26d54     13 22 46 F7 | 	zerox	local03, #19
26d58     14 20 46 F0 | 	shr	local02, #20
26d5c     02 20 66 F0 | 	shl	local02, #2
26d60     ED 20 02 F1 | 	add	local02, __methods__
26d64     10 21 02 FB | 	rdlong	local02, local02
26d68     14 4E 85 F1 | 	sub	fp, #20
26d6c     A7 12 02 FB | 	rdlong	arg01, fp
26d70     04 4E 85 F1 | 	sub	fp, #4
26d74     F2 1E 02 F6 | 	mov	local01, objptr
26d78     11 E5 01 F6 | 	mov	objptr, local03
26d7c     2D 20 62 FD | 	call	local02
26d80     0F E5 01 F6 | 	mov	objptr, local01
26d84     14 4E 05 F1 | 	add	fp, #20
26d88     A7 FA 61 FC | 	wrlong	result1, fp
26d8c     14 4E 85 F1 | 	sub	fp, #20
26d90     00 FA 55 F2 | 	cmps	result1, #0 wc
26d94     64 00 90 CD |  if_b	jmp	#LR__3885
26d98     1C 4E 05 F1 | 	add	fp, #28
26d9c     A7 22 02 FB | 	rdlong	local03, fp
26da0     11 21 02 F6 | 	mov	local02, local03
26da4     01 20 06 F1 | 	add	local02, #1
26da8     A7 20 62 FC | 	wrlong	local02, fp
26dac     08 4E 85 F1 | 	sub	fp, #8
26db0     A7 20 02 FB | 	rdlong	local02, fp
26db4     11 21 42 FC | 	wrbyte	local02, local03
26db8     04 4E 85 F1 | 	sub	fp, #4
26dbc     A7 22 02 FB | 	rdlong	local03, fp
26dc0     01 22 06 F1 | 	add	local03, #1
26dc4     A7 22 62 FC | 	wrlong	local03, fp
26dc8     04 4E 85 F1 | 	sub	fp, #4
26dcc     A7 22 02 FB | 	rdlong	local03, fp
26dd0     01 22 86 F1 | 	sub	local03, #1
26dd4     A7 22 62 FC | 	wrlong	local03, fp
26dd8     14 4E 05 F1 | 	add	fp, #20
26ddc     A7 22 0A FB | 	rdlong	local03, fp wz
26de0     20 4E 85 F1 | 	sub	fp, #32
26de4     4C FF 9F AD |  if_e	jmp	#LR__3884
26de8     14 4E 05 F1 | 	add	fp, #20
26dec     A7 20 02 FB | 	rdlong	local02, fp
26df0     14 4E 85 F1 | 	sub	fp, #20
26df4     0A 20 0E F2 | 	cmp	local02, #10 wz
26df8     38 FF 9F 5D |  if_ne	jmp	#LR__3884
26dfc                 | LR__3885
26dfc     10 4E 05 F1 | 	add	fp, #16
26e00     A7 FA 01 FB | 	rdlong	result1, fp
26e04     10 4E 85 F1 | 	sub	fp, #16
26e08                 | LR__3886
26e08     A7 F0 03 F6 | 	mov	ptra, fp
26e0c     B2 00 A0 FD | 	call	#popregs_
26e10                 | __system___vfsread_ret
26e10     2D 00 64 FD | 	ret
26e14                 | 
26e14                 | __system____default_filbuf
26e14     04 4A 05 F6 | 	mov	COUNT_, #4
26e18     A8 00 A0 FD | 	call	#pushregs_
26e1c     09 1F 02 F6 | 	mov	local01, arg01
26e20     0F 21 02 FB | 	rdlong	local02, local01
26e24     0C 20 06 F1 | 	add	local02, #12
26e28     10 FB 09 FB | 	rdlong	result1, local02 wz
26e2c     0C 20 86 F1 | 	sub	local02, #12
26e30     20 00 90 5D |  if_ne	jmp	#LR__3890
26e34     14 20 06 F1 | 	add	local02, #20
26e38     10 FB 01 F6 | 	mov	result1, local02
26e3c     04 20 86 F1 | 	sub	local02, #4
26e40     10 FB 61 FC | 	wrlong	result1, local02
26e44     04 20 86 F1 | 	sub	local02, #4
26e48     02 00 80 FF 
26e4c     10 01 68 FC | 	wrlong	##1024, local02
26e50     0C 20 86 F1 | 	sub	local02, #12
26e54                 | LR__3890
26e54     14 1E 06 F1 | 	add	local01, #20
26e58     0F 23 02 FB | 	rdlong	local03, local01
26e5c     11 25 02 F6 | 	mov	local04, local03
26e60     14 1E 86 F1 | 	sub	local01, #20
26e64     13 24 46 F7 | 	zerox	local04, #19
26e68     14 22 46 F0 | 	shr	local03, #20
26e6c     02 22 66 F0 | 	shl	local03, #2
26e70     ED 22 02 F1 | 	add	local03, __methods__
26e74     11 23 02 FB | 	rdlong	local03, local03
26e78     10 20 06 F1 | 	add	local02, #16
26e7c     10 15 02 FB | 	rdlong	arg02, local02
26e80     04 20 86 F1 | 	sub	local02, #4
26e84     10 17 02 FB | 	rdlong	arg03, local02
26e88     0C 20 86 F1 | 	sub	local02, #12
26e8c     0F 13 02 F6 | 	mov	arg01, local01
26e90     F2 1E 02 F6 | 	mov	local01, objptr
26e94     12 E5 01 F6 | 	mov	objptr, local04
26e98     2D 22 62 FD | 	call	local03
26e9c     0F E5 01 F6 | 	mov	objptr, local01
26ea0     FD 24 02 F6 | 	mov	local04, result1
26ea4     00 24 56 F2 | 	cmps	local04, #0 wc
26ea8     01 FA 65 C6 |  if_b	neg	result1, #1
26eac     28 00 90 CD |  if_b	jmp	#LR__3891
26eb0     10 25 62 FC | 	wrlong	local04, local02
26eb4     10 20 06 F1 | 	add	local02, #16
26eb8     10 23 02 FB | 	rdlong	local03, local02
26ebc     0C 20 86 F1 | 	sub	local02, #12
26ec0     10 23 62 FC | 	wrlong	local03, local02
26ec4     04 20 06 F1 | 	add	local02, #4
26ec8     10 23 02 FB | 	rdlong	local03, local02
26ecc     01 22 46 F5 | 	or	local03, #1
26ed0     10 23 62 FC | 	wrlong	local03, local02
26ed4     12 FB 01 F6 | 	mov	result1, local04
26ed8                 | LR__3891
26ed8     A7 F0 03 F6 | 	mov	ptra, fp
26edc     B2 00 A0 FD | 	call	#popregs_
26ee0                 | __system____default_filbuf_ret
26ee0     2D 00 64 FD | 	ret
26ee4                 | 
26ee4                 | __system__getlower_1082
26ee4     41 12 56 F2 | 	cmps	arg01, #65 wc
26ee8     10 00 90 CD |  if_b	jmp	#LR__3900
26eec     5B 12 56 F2 | 	cmps	arg01, #91 wc
26ef0     09 FB 01 C6 |  if_b	mov	result1, arg01
26ef4     20 FA 05 C1 |  if_b	add	result1, #32
26ef8     04 00 90 CD |  if_b	jmp	#__system__getlower_1082_ret
26efc                 | LR__3900
26efc     09 FB 01 F6 | 	mov	result1, arg01
26f00                 | __system__getlower_1082_ret
26f00     2D 00 64 FD | 	ret
26f04                 | 
26f04                 | __system___pat_match
26f04     08 4A 05 F6 | 	mov	COUNT_, #8
26f08     A8 00 A0 FD | 	call	#pushregs_
26f0c     09 1F 02 F6 | 	mov	local01, arg01
26f10                 | LR__3910
26f10     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
26f14     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
26f18     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
26f1c     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
26f20     2C 00 90 AD |  if_e	jmp	#LR__3911
26f24     0A 13 C2 FA | 	rdbyte	arg01, arg02
26f28     B8 FF BF FD | 	call	#__system__getlower_1082
26f2c     FD 22 02 F6 | 	mov	local03, result1
26f30     0F 13 C2 FA | 	rdbyte	arg01, local01
26f34     AC FF BF FD | 	call	#__system__getlower_1082
26f38     11 FB 09 F2 | 	cmp	result1, local03 wz
26f3c     00 FA 05 56 |  if_ne	mov	result1, #0
26f40     FC 00 90 5D |  if_ne	jmp	#LR__3919
26f44     01 1E 06 F1 | 	add	local01, #1
26f48     01 14 06 F1 | 	add	arg02, #1
26f4c     C0 FF 9F FD | 	jmp	#LR__3910
26f50                 | LR__3911
26f50     0A 23 C2 FA | 	rdbyte	local03, arg02
26f54     2A 22 0E F2 | 	cmp	local03, #42 wz
26f58     D4 00 90 5D |  if_ne	jmp	#LR__3918
26f5c     01 14 06 F1 | 	add	arg02, #1
26f60     0A 21 C2 FA | 	rdbyte	local02, arg02
26f64     01 14 86 F1 | 	sub	arg02, #1
26f68     2E 20 0E F2 | 	cmp	local02, #46 wz
26f6c     28 00 90 5D |  if_ne	jmp	#LR__3912
26f70     02 14 06 F1 | 	add	arg02, #2
26f74     0A 21 C2 FA | 	rdbyte	local02, arg02
26f78     02 14 86 F1 | 	sub	arg02, #2
26f7c     2A 20 0E F2 | 	cmp	local02, #42 wz
26f80     03 14 06 A1 |  if_e	add	arg02, #3
26f84     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
26f88     03 14 86 A1 |  if_e	sub	arg02, #3
26f8c     12 27 0A A6 |  if_e	mov	local05, local04 wz
26f90     01 FA 05 A6 |  if_e	mov	result1, #1
26f94     A8 00 90 AD |  if_e	jmp	#LR__3919
26f98                 | LR__3912
26f98     01 14 06 F1 | 	add	arg02, #1
26f9c     00 28 06 F6 | 	mov	local06, #0
26fa0     97 1E 48 FB | 	callpa	#(@LR__3915-@LR__3913)>>2,fcache_load_ptr_
26fa4                 | LR__3913
26fa4     14 2B 02 F6 | 	mov	local07, local06
26fa8     0A 2B 02 F1 | 	add	local07, arg02
26fac     15 2B CA FA | 	rdbyte	local07, local07 wz
26fb0     14 27 02 56 |  if_ne	mov	local05, local06
26fb4     01 26 06 51 |  if_ne	add	local05, #1
26fb8     13 29 02 56 |  if_ne	mov	local06, local05
26fbc     E4 FF 9F 5D |  if_ne	jmp	#LR__3913
26fc0     00 2C 06 F6 | 	mov	local08, #0
26fc4                 | LR__3914
26fc4     16 2B 02 F6 | 	mov	local07, local08
26fc8     0F 2B 02 F1 | 	add	local07, local01
26fcc     15 2B CA FA | 	rdbyte	local07, local07 wz
26fd0     16 27 02 56 |  if_ne	mov	local05, local08
26fd4     01 26 06 51 |  if_ne	add	local05, #1
26fd8     13 2D 02 56 |  if_ne	mov	local08, local05
26fdc     E4 FF 9F 5D |  if_ne	jmp	#LR__3914
26fe0                 | LR__3915
26fe0     14 2D 52 F2 | 	cmps	local08, local06 wc
26fe4     00 FA 05 C6 |  if_b	mov	result1, #0
26fe8     54 00 90 CD |  if_b	jmp	#LR__3919
26fec     16 21 02 F6 | 	mov	local02, local08
26ff0     14 21 82 F1 | 	sub	local02, local06
26ff4     10 1F 02 F1 | 	add	local01, local02
26ff8                 | LR__3916
26ff8     01 28 56 F2 | 	cmps	local06, #1 wc
26ffc     30 00 90 CD |  if_b	jmp	#LR__3917
27000     0F 13 C2 FA | 	rdbyte	arg01, local01
27004     DC FE BF FD | 	call	#__system__getlower_1082
27008     FD 2C 02 F6 | 	mov	local08, result1
2700c     0A 13 C2 FA | 	rdbyte	arg01, arg02
27010     D0 FE BF FD | 	call	#__system__getlower_1082
27014     FD 2C 0A F2 | 	cmp	local08, result1 wz
27018     00 FA 05 56 |  if_ne	mov	result1, #0
2701c     20 00 90 5D |  if_ne	jmp	#LR__3919
27020     01 1E 06 F1 | 	add	local01, #1
27024     01 14 06 F1 | 	add	arg02, #1
27028     01 28 86 F1 | 	sub	local06, #1
2702c     C8 FF 9F FD | 	jmp	#LR__3916
27030                 | LR__3917
27030                 | LR__3918
27030     0A 2D CA FA | 	rdbyte	local08, arg02 wz
27034     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
27038     01 FA 05 A6 |  if_e	mov	result1, #1
2703c     00 FA 05 56 |  if_ne	mov	result1, #0
27040                 | LR__3919
27040     A7 F0 03 F6 | 	mov	ptra, fp
27044     B2 00 A0 FD | 	call	#popregs_
27048                 | __system___pat_match_ret
27048     2D 00 64 FD | 	ret
2704c                 | 
2704c                 | _fatfs_cc_ff_uni2oem
2704c     00 00 06 F6 | 	mov	_var01, #0
27050     80 12 16 F2 | 	cmp	arg01, #128 wc
27054     09 01 02 C6 |  if_b	mov	_var01, arg01
27058     58 00 90 CD |  if_b	jmp	#LR__3924
2705c     80 00 00 FF 
27060     00 12 16 F2 | 	cmp	arg01, ##65536 wc
27064     4C 00 90 3D |  if_ae	jmp	#LR__3923
27068     0A FB 31 F9 | 	getword	result1, arg02, #0
2706c     01 00 00 FF 
27070     52 FB 0D F2 | 	cmp	result1, ##850 wz
27074     3C 00 90 5D |  if_ne	jmp	#LR__3923
27078                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
27078     00 00 06 F6 | 	mov	_var01, #0
2707c     97 14 48 FB | 	callpa	#(@LR__3921-@LR__3920)>>2,fcache_load_ptr_
27080                 | LR__3920
27080     00 FB 31 F9 | 	getword	result1, _var01, #0
27084     80 FA 15 F2 | 	cmp	result1, #128 wc
27088     1C 00 90 3D |  if_ae	jmp	#LR__3922
2708c     00 FB 31 F9 | 	getword	result1, _var01, #0
27090     01 FA 65 F0 | 	shl	result1, #1
27094     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
27098     FD FA E1 FA | 	rdword	result1, result1
2709c     FD 12 0A F2 | 	cmp	arg01, result1 wz
270a0     01 00 06 51 |  if_ne	add	_var01, #1
270a4     D8 FF 9F 5D |  if_ne	jmp	#LR__3920
270a8                 | LR__3921
270a8                 | LR__3922
270a8     00 01 32 F9 | 	getword	_var01, _var01, #0
270ac     80 00 06 F1 | 	add	_var01, #128
270b0     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
270b4                 | LR__3923
270b4                 | LR__3924
270b4                 | ' 			c = (c + 0x80) & 0xFF;
270b4                 | ' 		}
270b4                 | ' 	}
270b4                 | ' 
270b4                 | ' 	return c;
270b4     00 FB 01 F6 | 	mov	result1, _var01
270b8                 | _fatfs_cc_ff_uni2oem_ret
270b8     2D 00 64 FD | 	ret
270bc                 | 
270bc                 | _fatfs_cc_ff_oem2uni
270bc     00 00 06 F6 | 	mov	_var01, #0
270c0     09 FB 31 F9 | 	getword	result1, arg01, #0
270c4     80 FA 15 F2 | 	cmp	result1, #128 wc
270c8     09 01 02 C6 |  if_b	mov	_var01, arg01
270cc     2C 00 90 CD |  if_b	jmp	#LR__3931
270d0     0A 15 32 F9 | 	getword	arg02, arg02, #0
270d4     01 00 00 FF 
270d8     52 15 0E F2 | 	cmp	arg02, ##850 wz
270dc     1C 00 90 5D |  if_ne	jmp	#LR__3930
270e0     09 FB 31 F9 | 	getword	result1, arg01, #0
270e4     00 FB 15 F2 | 	cmp	result1, #256 wc
270e8     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
270ec     80 12 86 C1 |  if_b	sub	arg01, #128
270f0     01 12 66 C0 |  if_b	shl	arg01, #1
270f4     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
270f8     09 01 E2 CA |  if_b	rdword	_var01, arg01
270fc                 | LR__3930
270fc                 | LR__3931
270fc                 | ' 		}
270fc                 | ' 	}
270fc                 | ' 
270fc                 | ' 	return c;
270fc     00 FB 01 F6 | 	mov	result1, _var01
27100                 | _fatfs_cc_ff_oem2uni_ret
27100     2D 00 64 FD | 	ret
27104                 | 
27104                 | _fatfs_cc_ff_wtoupper
27104     09 01 02 F6 | 	mov	_var01, arg01
27108     80 00 00 FF 
2710c     00 00 16 F2 | 	cmp	_var01, ##65536 wc
27110     60 01 90 3D |  if_ae	jmp	#LR__3953
27114     00 03 02 F6 | 	mov	_var02, _var01
27118     01 01 32 F9 | 	getword	_var01, _var02, #0
2711c     08 00 00 FF 
27120     00 00 16 F2 | 	cmp	_var01, ##4096 wc
27124     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
27128     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2712c     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
27130     01 00 00 3F 
27134     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
27138     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2713c     01 00 00 3F 
27140     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
27144     02 07 02 F6 | 	mov	_var04, _var03
27148                 | ' 		uc = (WORD)uni;
27148                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
27148                 | ' 		for (;;) {
27148                 | LR__3940
27148     03 09 E2 FA | 	rdword	_var05, _var04
2714c     04 05 02 F6 | 	mov	_var03, _var05
27150     0F 04 4E F7 | 	zerox	_var03, #15 wz
27154     02 06 06 F1 | 	add	_var04, #2
27158     14 01 90 AD |  if_e	jmp	#LR__3952
2715c     01 05 32 F9 | 	getword	_var03, _var02, #0
27160     04 01 32 F9 | 	getword	_var01, _var05, #0
27164     00 05 12 F2 | 	cmp	_var03, _var01 wc
27168     04 01 90 CD |  if_b	jmp	#LR__3952
2716c     03 0B E2 FA | 	rdword	_var06, _var04
27170     05 0D 32 F9 | 	getword	_var07, _var06, #0
27174     08 0C 46 F0 | 	shr	_var07, #8
27178     05 0B 32 F9 | 	getword	_var06, _var06, #0
2717c     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
27180     01 05 32 F9 | 	getword	_var03, _var02, #0
27184     04 0F 32 F9 | 	getword	_var08, _var05, #0
27188     05 01 32 F9 | 	getword	_var01, _var06, #0
2718c     00 0F 02 F1 | 	add	_var08, _var01
27190     07 05 52 F2 | 	cmps	_var03, _var08 wc
27194     02 06 06 F1 | 	add	_var04, #2
27198     C4 00 90 3D |  if_ae	jmp	#LR__3951
2719c                 | ' 				switch (cmd) {
2719c     06 11 32 F9 | 	getword	_var09, _var07, #0
271a0     09 10 26 F3 | 	fle	_var09, #9
271a4     30 10 62 FD | 	jmprel	_var09
271a8                 | LR__3941
271a8     24 00 90 FD | 	jmp	#LR__3942
271ac     3C 00 90 FD | 	jmp	#LR__3943
271b0     54 00 90 FD | 	jmp	#LR__3944
271b4     5C 00 90 FD | 	jmp	#LR__3945
271b8     64 00 90 FD | 	jmp	#LR__3946
271bc     6C 00 90 FD | 	jmp	#LR__3947
271c0     74 00 90 FD | 	jmp	#LR__3948
271c4     7C 00 90 FD | 	jmp	#LR__3949
271c8     84 00 90 FD | 	jmp	#LR__3950
271cc     A0 00 90 FD | 	jmp	#LR__3952
271d0                 | LR__3942
271d0     01 03 32 F9 | 	getword	_var02, _var02, #0
271d4     04 09 32 F9 | 	getword	_var05, _var05, #0
271d8     04 03 82 F1 | 	sub	_var02, _var05
271dc     01 02 66 F0 | 	shl	_var02, #1
271e0     03 03 02 F1 | 	add	_var02, _var04
271e4     01 03 E2 FA | 	rdword	_var02, _var02
271e8     84 00 90 FD | 	jmp	#LR__3952
271ec                 | LR__3943
271ec     01 05 32 F9 | 	getword	_var03, _var02, #0
271f0     01 03 32 F9 | 	getword	_var02, _var02, #0
271f4     04 09 32 F9 | 	getword	_var05, _var05, #0
271f8     04 03 82 F1 | 	sub	_var02, _var05
271fc     01 02 06 F5 | 	and	_var02, #1
27200     02 03 C2 F2 | 	subr	_var02, _var03
27204     68 00 90 FD | 	jmp	#LR__3952
27208                 | LR__3944
27208     01 03 32 F9 | 	getword	_var02, _var02, #0
2720c     10 02 86 F1 | 	sub	_var02, #16
27210     5C 00 90 FD | 	jmp	#LR__3952
27214                 | LR__3945
27214     01 03 32 F9 | 	getword	_var02, _var02, #0
27218     20 02 86 F1 | 	sub	_var02, #32
2721c     50 00 90 FD | 	jmp	#LR__3952
27220                 | LR__3946
27220     01 03 32 F9 | 	getword	_var02, _var02, #0
27224     30 02 86 F1 | 	sub	_var02, #48
27228     44 00 90 FD | 	jmp	#LR__3952
2722c                 | LR__3947
2722c     01 03 32 F9 | 	getword	_var02, _var02, #0
27230     1A 02 86 F1 | 	sub	_var02, #26
27234     38 00 90 FD | 	jmp	#LR__3952
27238                 | LR__3948
27238     01 03 32 F9 | 	getword	_var02, _var02, #0
2723c     08 02 06 F1 | 	add	_var02, #8
27240     2C 00 90 FD | 	jmp	#LR__3952
27244                 | LR__3949
27244     01 03 32 F9 | 	getword	_var02, _var02, #0
27248     50 02 86 F1 | 	sub	_var02, #80
2724c     20 00 90 FD | 	jmp	#LR__3952
27250                 | LR__3950
27250     01 03 32 F9 | 	getword	_var02, _var02, #0
27254     0E 00 00 FF 
27258     60 02 86 F1 | 	sub	_var02, ##7264
2725c                 | ' 				}
2725c                 | ' 				break;
2725c     10 00 90 FD | 	jmp	#LR__3952
27260                 | LR__3951
27260     0F 0C 4E F7 | 	zerox	_var07, #15 wz
27264     02 0A 06 AA |  if_e	mul	_var06, #2
27268     05 07 02 A1 |  if_e	add	_var04, _var06
2726c     D8 FE 9F FD | 	jmp	#LR__3940
27270                 | LR__3952
27270     01 01 32 F9 | 	getword	_var01, _var02, #0
27274                 | LR__3953
27274                 | ' 		}
27274                 | ' 		uni = uc;
27274                 | ' 	}
27274                 | ' 
27274                 | ' 	return uni;
27274     00 FB 01 F6 | 	mov	result1, _var01
27278                 | _fatfs_cc_ff_wtoupper_ret
27278     2D 00 64 FD | 	ret
2727c                 | 
2727c                 | _fatfs_cc_strncpy
2727c     09 01 02 F6 | 	mov	_var01, arg01
27280     97 12 48 FB | 	callpa	#(@LR__3961-@LR__3960)>>2,fcache_load_ptr_
27284                 | ' 
27284                 | ' 	dscan = dst;
27284                 | ' 	sscan = src;
27284                 | ' 	count = n;
27284                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
27284                 | LR__3960
27284     01 16 86 F1 | 	sub	arg03, #1
27288     00 16 56 F2 | 	cmps	arg03, #0 wc
2728c     18 00 90 CD |  if_b	jmp	#LR__3962
27290     0A FB C1 FA | 	rdbyte	result1, arg02
27294     00 FB 41 FC | 	wrbyte	result1, _var01
27298     01 14 06 F1 | 	add	arg02, #1
2729c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
272a0                 | ' 		continue;
272a0     01 00 06 F1 | 	add	_var01, #1
272a4     DC FF 9F 5D |  if_ne	jmp	#LR__3960
272a8                 | LR__3961
272a8                 | LR__3962
272a8     97 0C 48 FB | 	callpa	#(@LR__3964-@LR__3963)>>2,fcache_load_ptr_
272ac                 | ' 	while (--count >= 0)
272ac                 | LR__3963
272ac     01 16 86 F1 | 	sub	arg03, #1
272b0     00 16 56 F2 | 	cmps	arg03, #0 wc
272b4     00 03 02 36 |  if_ae	mov	_var02, _var01
272b8     01 00 06 31 |  if_ae	add	_var01, #1
272bc     01 01 48 3C |  if_ae	wrbyte	#0, _var02
272c0     E8 FF 9F 3D |  if_ae	jmp	#LR__3963
272c4                 | LR__3964
272c4                 | ' 		*dscan++ = '\0';
272c4                 | ' 	return(dst);
272c4     09 FB 01 F6 | 	mov	result1, arg01
272c8                 | _fatfs_cc_strncpy_ret
272c8     2D 00 64 FD | 	ret
272cc                 | 
272cc                 | _fatfs_cc_memcmp
272cc                 | ' 	for (n = size; n > 0; n--)
272cc     00 16 0E F2 | 	cmp	arg03, #0 wz
272d0     28 00 90 AD |  if_e	jmp	#LR__3971
272d4                 | LR__3970
272d4     09 01 C2 FA | 	rdbyte	_var01, arg01
272d8     0A 03 C2 FA | 	rdbyte	_var02, arg02
272dc     01 01 0A F2 | 	cmp	_var01, _var02 wz
272e0     01 12 06 A1 |  if_e	add	arg01, #1
272e4     01 14 06 A1 |  if_e	add	arg02, #1
272e8                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
272e8     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
272ec     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
272f0     01 FB 81 51 |  if_ne	sub	result1, _var02
272f4     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
272f8     F6 17 6E FB | 	djnz	arg03, #LR__3970
272fc                 | LR__3971
272fc                 | ' 
272fc                 | ' 	return(0);
272fc     00 FA 05 F6 | 	mov	result1, #0
27300                 | _fatfs_cc_memcmp_ret
27300     2D 00 64 FD | 	ret
27304                 | 
27304                 | _fatfs_cc_strncmp
27304     09 01 0A F6 | 	mov	_var01, arg01 wz
27308     14 00 90 5D |  if_ne	jmp	#LR__3980
2730c                 | ' 		return scan2 ? -1 : 0;
2730c     00 14 0E F2 | 	cmp	arg02, #0 wz
27310     01 02 66 56 |  if_ne	neg	_var02, #1
27314     00 02 06 A6 |  if_e	mov	_var02, #0
27318     01 FB 01 F6 | 	mov	result1, _var02
2731c     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
27320                 | LR__3980
27320     00 14 0E F2 | 	cmp	arg02, #0 wz
27324     01 FA 05 A6 |  if_e	mov	result1, #1
27328     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2732c     0B 05 02 F6 | 	mov	_var03, arg03
27330     97 16 48 FB | 	callpa	#(@LR__3982-@LR__3981)>>2,fcache_load_ptr_
27334                 | ' 	count = n;
27334                 | ' 	do {
27334                 | LR__3981
27334     00 07 C2 FA | 	rdbyte	_var04, _var01
27338     0A 09 02 F6 | 	mov	_var05, arg02
2733c     04 0B C2 FA | 	rdbyte	_var06, _var05
27340     01 04 86 F1 | 	sub	_var03, #1
27344     00 04 56 F2 | 	cmps	_var03, #0 wc
27348     01 00 06 F1 | 	add	_var01, #1
2734c     01 14 06 F1 | 	add	arg02, #1
27350     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
27354     08 00 90 2D |  if_nc_and_z	jmp	#LR__3983
27358     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2735c     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3981
27360                 | LR__3982
27360                 | LR__3983
27360     00 04 56 F2 | 	cmps	_var03, #0 wc
27364                 | ' 		return(0);
27364     00 FA 05 C6 |  if_b	mov	result1, #0
27368     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2736c     05 07 0A F2 | 	cmp	_var04, _var06 wz
27370                 | ' 		return(0);
27370     00 FA 05 A6 |  if_e	mov	result1, #0
27374     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
27378     00 06 0E F2 | 	cmp	_var04, #0 wz
2737c                 | ' 		return(-1);
2737c     01 FA 65 A6 |  if_e	neg	result1, #1
27380     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
27384     00 0A 0E F2 | 	cmp	_var06, #0 wz
27388                 | ' 		return(1);
27388     01 FA 05 A6 |  if_e	mov	result1, #1
2738c                 | ' 		return(c1 - c2);
2738c     03 FB 01 56 |  if_ne	mov	result1, _var04
27390     05 FB 81 51 |  if_ne	sub	result1, _var06
27394                 | _fatfs_cc_strncmp_ret
27394     2D 00 64 FD | 	ret
27398                 | 
27398                 | _fatfs_cc_strchr
27398                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
27398                 | ' 	while ((c = *s++) != (char) charwanted)
27398                 | LR__3990
27398     09 01 02 F6 | 	mov	_var01, arg01
2739c     00 03 C2 FA | 	rdbyte	_var02, _var01
273a0     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
273a4     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
273a8     03 05 0A F2 | 	cmp	_var03, _var04 wz
273ac     01 12 06 F1 | 	add	arg01, #1
273b0     14 00 90 AD |  if_e	jmp	#LR__3991
273b4     01 05 02 F6 | 	mov	_var03, _var02
273b8     07 04 4E F7 | 	zerox	_var03, #7 wz
273bc     00 FA 05 A6 |  if_e	mov	result1, #0
273c0     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
273c4     D0 FF 9F FD | 	jmp	#LR__3990
273c8                 | LR__3991
273c8                 | ' 	return((char *)--s);
273c8     01 12 86 F1 | 	sub	arg01, #1
273cc     09 FB 01 F6 | 	mov	result1, arg01
273d0                 | _fatfs_cc_strchr_ret
273d0     2D 00 64 FD | 	ret
273d4                 | 
273d4                 | _fatfs_cc_disk_initialize
273d4     04 4A 05 F6 | 	mov	COUNT_, #4
273d8     A8 00 A0 FD | 	call	#pushregs_
273dc     40 F0 07 F1 | 	add	ptra, #64
273e0     04 4E 05 F1 | 	add	fp, #4
273e4     A7 12 42 FC | 	wrbyte	arg01, fp
273e8     01 00 00 FF 
273ec     14 E4 05 F1 | 	add	objptr, ##532
273f0     F2 18 02 FB | 	rdlong	arg04, objptr
273f4     2C 4E 05 F1 | 	add	fp, #44
273f8     A7 18 62 FC | 	wrlong	arg04, fp
273fc     04 E4 85 F1 | 	sub	objptr, #4
27400     F2 18 02 FB | 	rdlong	arg04, objptr
27404     04 4E 05 F1 | 	add	fp, #4
27408     A7 18 62 FC | 	wrlong	arg04, fp
2740c     08 E4 05 F1 | 	add	objptr, #8
27410     F2 18 02 FB | 	rdlong	arg04, objptr
27414     04 4E 05 F1 | 	add	fp, #4
27418     A7 18 62 FC | 	wrlong	arg04, fp
2741c     04 E4 05 F1 | 	add	objptr, #4
27420     F2 18 02 FB | 	rdlong	arg04, objptr
27424     04 4E 05 F1 | 	add	fp, #4
27428     A7 18 62 FC | 	wrlong	arg04, fp
2742c     04 E4 05 F1 | 	add	objptr, #4
27430     F2 02 48 FC | 	wrbyte	#1, objptr
27434     01 00 00 FF 
27438     20 E4 85 F1 | 	sub	objptr, ##544
2743c     38 4E 85 F1 | 	sub	fp, #56
27440     A7 18 CA FA | 	rdbyte	arg04, fp wz
27444     04 4E 85 F1 | 	sub	fp, #4
27448                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
27448                 | '             return RES_NOTRDY;
27448     03 FA 05 56 |  if_ne	mov	result1, #3
2744c     D8 05 90 5D |  if_ne	jmp	#LR__4018
27450     13 00 00 FF 
27454     10 13 06 F6 | 	mov	arg01, ##10000
27458     2C 98 BF FD | 	call	#__system___waitus
2745c     30 4E 05 F1 | 	add	fp, #48
27460     A7 12 02 FB | 	rdlong	arg01, fp
27464     09 01 08 FC | 	wrpin	#0, arg01
27468     04 4E 05 F1 | 	add	fp, #4
2746c     A7 12 02 FB | 	rdlong	arg01, fp
27470     09 01 08 FC | 	wrpin	#0, arg01
27474     04 4E 05 F1 | 	add	fp, #4
27478     A7 12 02 FB | 	rdlong	arg01, fp
2747c     09 01 08 FC | 	wrpin	#0, arg01
27480     04 4E 05 F1 | 	add	fp, #4
27484     A7 12 02 FB | 	rdlong	arg01, fp
27488     09 00 80 FF 
2748c     09 01 08 FC | 	wrpin	##4608, arg01
27490     0C 4E 85 F1 | 	sub	fp, #12
27494     A7 12 02 FB | 	rdlong	arg01, fp
27498     59 12 62 FD | 	drvh	arg01
2749c     04 4E 05 F1 | 	add	fp, #4
274a0     A7 12 02 FB | 	rdlong	arg01, fp
274a4     59 12 62 FD | 	drvh	arg01
274a8     04 4E 05 F1 | 	add	fp, #4
274ac     A7 12 02 FB | 	rdlong	arg01, fp
274b0     59 12 62 FD | 	drvh	arg01
274b4     04 4E 05 F1 | 	add	fp, #4
274b8     A7 12 02 FB | 	rdlong	arg01, fp
274bc     59 12 62 FD | 	drvh	arg01
274c0     20 4E 85 F1 | 	sub	fp, #32
274c4     00 04 80 FF 
274c8     A7 20 68 FC | 	wrlong	##524304, fp
274cc     04 4E 05 F1 | 	add	fp, #4
274d0     20 03 80 FF 
274d4     A7 90 68 FC | 	wrlong	##409672, fp
274d8     14 4E 05 F1 | 	add	fp, #20
274dc     A7 1E 02 FB | 	rdlong	local01, fp
274e0     18 4E 85 F1 | 	sub	fp, #24
274e4     A7 16 02 FB | 	rdlong	arg03, fp
274e8     40 1E 62 FD | 	dirl	local01
274ec     A0 03 80 FF 
274f0     0F 91 08 FC | 	wrpin	##475208, local01
274f4     0F 17 12 FC | 	wxpin	arg03, local01
274f8     0F 01 28 FC | 	wypin	#0, local01
274fc     41 1E 62 FD | 	dirh	local01
27500     1C 4E 05 F1 | 	add	fp, #28
27504     A7 20 02 FB | 	rdlong	local02, fp
27508     10 1F 82 F1 | 	sub	local01, local02
2750c     07 1E 06 F5 | 	and	local01, #7
27510     18 1E 66 F0 | 	shl	local01, #24
27514     78 14 06 F6 | 	mov	arg02, #120
27518     0F 15 42 F5 | 	or	arg02, local01
2751c     14 4E 85 F1 | 	sub	fp, #20
27520     A7 14 62 FC | 	wrlong	arg02, fp
27524     14 4E 05 F1 | 	add	fp, #20
27528     A7 12 02 FB | 	rdlong	arg01, fp
2752c     10 14 26 F4 | 	bith	arg02, #16
27530     40 12 62 FD | 	dirl	arg01
27534     09 15 02 FC | 	wrpin	arg02, arg01
27538     09 3F 18 FC | 	wxpin	#31, arg01
2753c     FF FF FF FF 
27540     09 FF 2B FC | 	wypin	##-1, arg01
27544     41 12 62 FD | 	dirh	arg01
27548     04 4E 85 F1 | 	sub	fp, #4
2754c     A7 14 02 FB | 	rdlong	arg02, fp
27550     08 4E 05 F1 | 	add	fp, #8
27554     A7 22 02 FB | 	rdlong	local03, fp
27558     11 15 82 F1 | 	sub	arg02, local03
2755c     07 14 06 F5 | 	and	arg02, #7
27560     18 14 66 F0 | 	shl	arg02, #24
27564     14 4E 85 F1 | 	sub	fp, #20
27568     A7 14 62 FC | 	wrlong	arg02, fp
2756c     29 00 00 FF 
27570     7A 14 46 F5 | 	or	arg02, ##21114
27574     A7 14 62 FC | 	wrlong	arg02, fp
27578     14 4E 05 F1 | 	add	fp, #20
2757c     A7 12 02 FB | 	rdlong	arg01, fp
27580     40 12 62 FD | 	dirl	arg01
27584     09 15 02 FC | 	wrpin	arg02, arg01
27588     09 4F 18 FC | 	wxpin	#39, arg01
2758c     09 01 28 FC | 	wypin	#0, arg01
27590     41 12 62 FD | 	dirh	arg01
27594     28 4E 85 F1 | 	sub	fp, #40
27598     A7 12 02 F6 | 	mov	arg01, fp
2759c     14 4E 85 F1 | 	sub	fp, #20
275a0     0A 14 06 F6 | 	mov	arg02, #10
275a4     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
275a8     00 12 06 F6 | 	mov	arg01, #0
275ac     00 14 06 F6 | 	mov	arg02, #0
275b0     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
275b4     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1126
275b8     64 12 06 F6 | 	mov	arg01, #100
275bc     C8 96 BF FD | 	call	#__system___waitus
275c0     14 4E 05 F1 | 	add	fp, #20
275c4     A7 12 02 F6 | 	mov	arg01, fp
275c8     14 4E 85 F1 | 	sub	fp, #20
275cc     0A 14 06 F6 | 	mov	arg02, #10
275d0     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
275d4     0C 4E 05 F1 | 	add	fp, #12
275d8     A7 00 48 FC | 	wrbyte	#0, fp
275dc     0C 4E 85 F1 | 	sub	fp, #12
275e0     00 12 06 F6 | 	mov	arg01, #0
275e4     00 14 06 F6 | 	mov	arg02, #0
275e8     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
275ec     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
275f0     01 18 0E F2 | 	cmp	arg04, #1 wz
275f4     B8 03 90 5D |  if_ne	jmp	#LR__4017
275f8     08 12 06 F6 | 	mov	arg01, #8
275fc     AA 15 06 F6 | 	mov	arg02, #426
27600     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27604     FD FA E1 F8 | 	getbyte	result1, result1, #0
27608     01 FA 0D F2 | 	cmp	result1, #1 wz
2760c     98 01 90 5D |  if_ne	jmp	#LR__4003
27610     14 4E 05 F1 | 	add	fp, #20
27614     A7 12 02 F6 | 	mov	arg01, fp
27618     14 4E 85 F1 | 	sub	fp, #20
2761c     04 14 06 F6 | 	mov	arg02, #4
27620     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
27624     16 4E 05 F1 | 	add	fp, #22
27628     A7 24 C2 FA | 	rdbyte	local04, fp
2762c     16 4E 85 F1 | 	sub	fp, #22
27630     01 24 0E F2 | 	cmp	local04, #1 wz
27634     17 4E 05 A1 |  if_e	add	fp, #23
27638     A7 22 C2 AA |  if_e	rdbyte	local03, fp
2763c     17 4E 85 A1 |  if_e	sub	fp, #23
27640     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
27644     68 03 90 5D |  if_ne	jmp	#LR__4016
27648                 | ' 				for (tmr = 1000; tmr; tmr--) {
27648     18 4E 05 F1 | 	add	fp, #24
2764c     01 00 80 FF 
27650     A7 D0 6B FC | 	wrlong	##1000, fp
27654     18 4E 85 F1 | 	sub	fp, #24
27658                 | LR__4000
27658     18 4E 05 F1 | 	add	fp, #24
2765c     A7 1E 0A FB | 	rdlong	local01, fp wz
27660     18 4E 85 F1 | 	sub	fp, #24
27664     3C 00 90 AD |  if_e	jmp	#LR__4001
27668     A9 12 06 F6 | 	mov	arg01, #169
2766c     1E 14 C6 F9 | 	decod	arg02, #30
27670     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27674     FD 24 02 F6 | 	mov	local04, result1
27678     07 24 4E F7 | 	zerox	local04, #7 wz
2767c     24 00 90 AD |  if_e	jmp	#LR__4001
27680     01 00 00 FF 
27684     E8 13 06 F6 | 	mov	arg01, ##1000
27688     FC 95 BF FD | 	call	#__system___waitus
2768c     18 4E 05 F1 | 	add	fp, #24
27690     A7 24 02 FB | 	rdlong	local04, fp
27694     01 24 86 F1 | 	sub	local04, #1
27698     A7 24 62 FC | 	wrlong	local04, fp
2769c     18 4E 85 F1 | 	sub	fp, #24
276a0     B4 FF 9F FD | 	jmp	#LR__4000
276a4                 | LR__4001
276a4     18 4E 05 F1 | 	add	fp, #24
276a8     A7 24 0A FB | 	rdlong	local04, fp wz
276ac     18 4E 85 F1 | 	sub	fp, #24
276b0     4C 00 90 AD |  if_e	jmp	#LR__4002
276b4     3A 12 06 F6 | 	mov	arg01, #58
276b8     00 14 06 F6 | 	mov	arg02, #0
276bc     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
276c0     FD 22 02 F6 | 	mov	local03, result1
276c4     07 22 4E F7 | 	zerox	local03, #7 wz
276c8     34 00 90 5D |  if_ne	jmp	#LR__4002
276cc     14 4E 05 F1 | 	add	fp, #20
276d0     A7 12 02 F6 | 	mov	arg01, fp
276d4     14 4E 85 F1 | 	sub	fp, #20
276d8     04 14 06 F6 | 	mov	arg02, #4
276dc     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
276e0     14 4E 05 F1 | 	add	fp, #20
276e4     A7 1E C2 FA | 	rdbyte	local01, fp
276e8     40 1E CE F7 | 	test	local01, #64 wz
276ec     0C 24 06 56 |  if_ne	mov	local04, #12
276f0     04 24 06 A6 |  if_e	mov	local04, #4
276f4     08 4E 85 F1 | 	sub	fp, #8
276f8     A7 24 42 FC | 	wrbyte	local04, fp
276fc     0C 4E 85 F1 | 	sub	fp, #12
27700                 | LR__4002
27700     14 24 06 FB | 	rdlong	local04, #20
27704     18 4E 05 F1 | 	add	fp, #24
27708     A7 24 62 FC | 	wrlong	local04, fp
2770c     0C 4E 05 F1 | 	add	fp, #12
27710     A7 24 02 FB | 	rdlong	local04, fp
27714     1B 24 26 F4 | 	bith	local04, #27
27718     A7 24 62 FC | 	wrlong	local04, fp
2771c     0C 4E 85 F1 | 	sub	fp, #12
27720     A7 24 02 FB | 	rdlong	local04, fp
27724     18 4E 85 F1 | 	sub	fp, #24
27728     68 78 04 FF 
2772c     81 25 16 F2 | 	cmp	local04, ##150000001 wc
27730     1C 4E 05 C1 |  if_b	add	fp, #28
27734     00 01 80 CF 
27738     A7 08 68 CC |  if_b	wrlong	##131076, fp
2773c     1C 4E 85 C1 |  if_b	sub	fp, #28
27740     6C 02 90 CD |  if_b	jmp	#LR__4016
27744     18 4E 05 F1 | 	add	fp, #24
27748     A7 24 02 FB | 	rdlong	local04, fp
2774c     18 4E 85 F1 | 	sub	fp, #24
27750     E1 F5 05 FF 
27754     01 24 16 F2 | 	cmp	local04, ##200000001 wc
27758     1C 4E 05 C1 |  if_b	add	fp, #28
2775c     00 01 80 CF 
27760     A7 0A 68 CC |  if_b	wrlong	##131077, fp
27764     1C 4E 85 C1 |  if_b	sub	fp, #28
27768     44 02 90 CD |  if_b	jmp	#LR__4016
2776c     18 4E 05 F1 | 	add	fp, #24
27770     A7 24 02 FB | 	rdlong	local04, fp
27774     18 4E 85 F1 | 	sub	fp, #24
27778     3B 58 08 FF 
2777c     01 24 16 F2 | 	cmp	local04, ##280000001 wc
27780     1C 4E 05 C1 |  if_b	add	fp, #28
27784     00 01 80 CF 
27788     A7 0C 68 CC |  if_b	wrlong	##131078, fp
2778c     1C 4E 85 C1 |  if_b	sub	fp, #28
27790     1C 02 90 CD |  if_b	jmp	#LR__4016
27794     1C 4E 05 F1 | 	add	fp, #28
27798     80 01 80 FF 
2779c     A7 10 68 FC | 	wrlong	##196616, fp
277a0     1C 4E 85 F1 | 	sub	fp, #28
277a4     08 02 90 FD | 	jmp	#LR__4016
277a8                 | LR__4003
277a8     A9 12 06 F6 | 	mov	arg01, #169
277ac     00 14 06 F6 | 	mov	arg02, #0
277b0     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
277b4     FD 24 E2 F8 | 	getbyte	local04, result1, #0
277b8     02 24 16 F2 | 	cmp	local04, #2 wc
277bc     18 00 90 3D |  if_ae	jmp	#LR__4004
277c0     0C 4E 05 F1 | 	add	fp, #12
277c4     A7 04 48 FC | 	wrbyte	#2, fp
277c8     04 4E 05 F1 | 	add	fp, #4
277cc     A7 52 49 FC | 	wrbyte	#169, fp
277d0     10 4E 85 F1 | 	sub	fp, #16
277d4     14 00 90 FD | 	jmp	#LR__4005
277d8                 | LR__4004
277d8     0C 4E 05 F1 | 	add	fp, #12
277dc     A7 02 48 FC | 	wrbyte	#1, fp
277e0     04 4E 05 F1 | 	add	fp, #4
277e4     A7 02 48 FC | 	wrbyte	#1, fp
277e8     10 4E 85 F1 | 	sub	fp, #16
277ec                 | LR__4005
277ec                 | ' 				ty =  0x01 ; cmd =  (1) ;
277ec                 | ' 			}
277ec                 | ' 			for (tmr = 1000; tmr; tmr--) {
277ec     18 4E 05 F1 | 	add	fp, #24
277f0     01 00 80 FF 
277f4     A7 D0 6B FC | 	wrlong	##1000, fp
277f8     18 4E 85 F1 | 	sub	fp, #24
277fc                 | LR__4006
277fc     18 4E 05 F1 | 	add	fp, #24
27800     A7 22 0A FB | 	rdlong	local03, fp wz
27804     18 4E 85 F1 | 	sub	fp, #24
27808     44 00 90 AD |  if_e	jmp	#LR__4007
2780c     10 4E 05 F1 | 	add	fp, #16
27810     A7 12 C2 FA | 	rdbyte	arg01, fp
27814     10 4E 85 F1 | 	sub	fp, #16
27818     00 14 06 F6 | 	mov	arg02, #0
2781c     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27820     FD 24 02 F6 | 	mov	local04, result1
27824     07 24 4E F7 | 	zerox	local04, #7 wz
27828     24 00 90 AD |  if_e	jmp	#LR__4007
2782c     01 00 00 FF 
27830     E8 13 06 F6 | 	mov	arg01, ##1000
27834     50 94 BF FD | 	call	#__system___waitus
27838     18 4E 05 F1 | 	add	fp, #24
2783c     A7 24 02 FB | 	rdlong	local04, fp
27840     01 24 86 F1 | 	sub	local04, #1
27844     A7 24 62 FC | 	wrlong	local04, fp
27848     18 4E 85 F1 | 	sub	fp, #24
2784c     AC FF 9F FD | 	jmp	#LR__4006
27850                 | LR__4007
27850     18 4E 05 F1 | 	add	fp, #24
27854     A7 24 0A FB | 	rdlong	local04, fp wz
27858     18 4E 85 F1 | 	sub	fp, #24
2785c     14 00 90 AD |  if_e	jmp	#LR__4008
27860     10 12 06 F6 | 	mov	arg01, #16
27864     09 14 C6 F9 | 	decod	arg02, #9
27868     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
2786c     07 FA 4D F7 | 	zerox	result1, #7 wz
27870     0C 00 90 AD |  if_e	jmp	#LR__4009
27874                 | LR__4008
27874     0C 4E 05 F1 | 	add	fp, #12
27878     A7 00 48 FC | 	wrbyte	#0, fp
2787c     0C 4E 85 F1 | 	sub	fp, #12
27880                 | LR__4009
27880     14 24 06 FB | 	rdlong	local04, #20
27884     18 4E 05 F1 | 	add	fp, #24
27888     A7 24 62 FC | 	wrlong	local04, fp
2788c     18 4E 85 F1 | 	sub	fp, #24
27890     F0 FA 02 FF 
27894     01 25 16 F2 | 	cmp	local04, ##100000001 wc
27898     18 00 90 3D |  if_ae	jmp	#LR__4010
2789c     24 4E 05 F1 | 	add	fp, #36
278a0     A7 24 02 FB | 	rdlong	local04, fp
278a4     1B 24 26 F4 | 	bith	local04, #27
278a8     A7 24 62 FC | 	wrlong	local04, fp
278ac     24 4E 85 F1 | 	sub	fp, #36
278b0     2C 00 90 FD | 	jmp	#LR__4011
278b4                 | LR__4010
278b4     18 4E 05 F1 | 	add	fp, #24
278b8     A7 24 02 FB | 	rdlong	local04, fp
278bc     18 4E 85 F1 | 	sub	fp, #24
278c0     E1 F5 05 FF 
278c4     01 24 16 F2 | 	cmp	local04, ##200000001 wc
278c8     24 4E 05 C1 |  if_b	add	fp, #36
278cc     A7 24 02 CB |  if_b	rdlong	local04, fp
278d0     80 00 04 CF 
278d4     00 24 46 C5 |  if_b	or	local04, ##134283264
278d8     A7 24 62 CC |  if_b	wrlong	local04, fp
278dc     24 4E 85 C1 |  if_b	sub	fp, #36
278e0                 | LR__4011
278e0     18 4E 05 F1 | 	add	fp, #24
278e4     A7 24 02 FB | 	rdlong	local04, fp
278e8     18 4E 85 F1 | 	sub	fp, #24
278ec     F0 FA 02 FF 
278f0     01 25 16 F2 | 	cmp	local04, ##100000001 wc
278f4     1C 4E 05 C1 |  if_b	add	fp, #28
278f8     00 01 80 CF 
278fc     A7 08 68 CC |  if_b	wrlong	##131076, fp
27900     1C 4E 85 C1 |  if_b	sub	fp, #28
27904     A8 00 90 CD |  if_b	jmp	#LR__4015
27908     18 4E 05 F1 | 	add	fp, #24
2790c     A7 24 02 FB | 	rdlong	local04, fp
27910     18 4E 85 F1 | 	sub	fp, #24
27914     68 78 04 FF 
27918     81 25 16 F2 | 	cmp	local04, ##150000001 wc
2791c     1C 4E 05 C1 |  if_b	add	fp, #28
27920     80 01 80 CF 
27924     A7 0C 68 CC |  if_b	wrlong	##196614, fp
27928     1C 4E 85 C1 |  if_b	sub	fp, #28
2792c     80 00 90 CD |  if_b	jmp	#LR__4014
27930     18 4E 05 F1 | 	add	fp, #24
27934     A7 24 02 FB | 	rdlong	local04, fp
27938     18 4E 85 F1 | 	sub	fp, #24
2793c     E1 F5 05 FF 
27940     01 24 16 F2 | 	cmp	local04, ##200000001 wc
27944     1C 4E 05 C1 |  if_b	add	fp, #28
27948     00 02 80 CF 
2794c     A7 10 68 CC |  if_b	wrlong	##262152, fp
27950     1C 4E 85 C1 |  if_b	sub	fp, #28
27954     58 00 90 CD |  if_b	jmp	#LR__4013
27958     18 4E 05 F1 | 	add	fp, #24
2795c     A7 24 02 FB | 	rdlong	local04, fp
27960     18 4E 85 F1 | 	sub	fp, #24
27964     59 73 07 FF 
27968     81 24 16 F2 | 	cmp	local04, ##250000001 wc
2796c     1C 4E 05 C1 |  if_b	add	fp, #28
27970     80 02 80 CF 
27974     A7 14 68 CC |  if_b	wrlong	##327690, fp
27978     1C 4E 85 C1 |  if_b	sub	fp, #28
2797c     30 00 90 CD |  if_b	jmp	#LR__4012
27980     18 4E 05 F1 | 	add	fp, #24
27984     A7 24 02 FB | 	rdlong	local04, fp
27988     18 4E 85 F1 | 	sub	fp, #24
2798c     D1 F0 08 FF 
27990     01 25 16 F2 | 	cmp	local04, ##300000001 wc
27994     1C 4E 05 C1 |  if_b	add	fp, #28
27998     00 03 80 CF 
2799c     A7 18 68 CC |  if_b	wrlong	##393228, fp
279a0     1C 4E 85 F3 | 	sumc	fp, #28
279a4     80 03 80 3F 
279a8     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
279ac     1C 4E 85 31 |  if_ae	sub	fp, #28
279b0                 | LR__4012
279b0                 | LR__4013
279b0                 | LR__4014
279b0                 | LR__4015
279b0                 | LR__4016
279b0                 | LR__4017
279b0     0C 4E 05 F1 | 	add	fp, #12
279b4     A7 24 C2 FA | 	rdbyte	local04, fp
279b8     01 00 00 FF 
279bc     21 E4 05 F1 | 	add	objptr, ##545
279c0     F2 24 42 FC | 	wrbyte	local04, objptr
279c4     A7 1E CA FA | 	rdbyte	local01, fp wz
279c8     00 24 06 56 |  if_ne	mov	local04, #0
279cc     01 24 06 A6 |  if_e	mov	local04, #1
279d0     20 4E 05 F1 | 	add	fp, #32
279d4     A7 24 42 FC | 	wrbyte	local04, fp
279d8     A7 24 C2 FA | 	rdbyte	local04, fp
279dc     2C 4E 85 F1 | 	sub	fp, #44
279e0     01 E4 85 F1 | 	sub	objptr, #1
279e4     F2 24 42 FC | 	wrbyte	local04, objptr
279e8     01 00 00 FF 
279ec     20 E4 85 F1 | 	sub	objptr, ##544
279f0     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1126
279f4     34 4E 05 F1 | 	add	fp, #52
279f8     A7 12 02 FB | 	rdlong	arg01, fp
279fc     18 4E 85 F1 | 	sub	fp, #24
27a00     A7 14 02 FB | 	rdlong	arg02, fp
27a04     09 15 12 FC | 	wxpin	arg02, arg01
27a08     1C 4E 05 F1 | 	add	fp, #28
27a0c     A7 12 02 FB | 	rdlong	arg01, fp
27a10     14 4E 85 F1 | 	sub	fp, #20
27a14     A7 14 02 FB | 	rdlong	arg02, fp
27a18     09 15 02 FC | 	wrpin	arg02, arg01
27a1c                 | ' 
27a1c                 | ' 		}
27a1c                 | ' 	}
27a1c                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
27a1c                 | ' 	CardType = ty;
27a1c                 | ' 	s = ty ? 0 :  0x01 ;
27a1c                 | ' 	Stat = s;
27a1c                 | ' 
27a1c                 | ' 	deselect();
27a1c                 | ' 
27a1c                 | ' 
27a1c                 | ' 	_wxpin( PIN_CLK, ck_div );
27a1c                 | ' 	_wrpin( PIN_DI, spm_tx );
27a1c                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
27a1c                 | ' 	return s;
27a1c     08 4E 05 F1 | 	add	fp, #8
27a20     A7 FA C1 FA | 	rdbyte	result1, fp
27a24     2C 4E 85 F1 | 	sub	fp, #44
27a28                 | LR__4018
27a28     A7 F0 03 F6 | 	mov	ptra, fp
27a2c     B2 00 A0 FD | 	call	#popregs_
27a30                 | _fatfs_cc_disk_initialize_ret
27a30     2D 00 64 FD | 	ret
27a34                 | 
27a34                 | _fatfs_cc_disk_read
27a34     05 4A 05 F6 | 	mov	COUNT_, #5
27a38     A8 00 A0 FD | 	call	#pushregs_
27a3c     0A 1F 02 F6 | 	mov	local01, arg02
27a40     0B 21 02 F6 | 	mov	local02, arg03
27a44     0C 23 02 F6 | 	mov	local03, arg04
27a48     00 12 0E F2 | 	cmp	arg01, #0 wz
27a4c     01 FA 05 56 |  if_ne	mov	result1, #1
27a50                 | ' 
27a50                 | ' 	return Stat;
27a50     01 00 00 AF 
27a54     20 E4 05 A1 |  if_e	add	objptr, ##544
27a58     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27a5c     01 00 00 AF 
27a60     20 E4 85 A1 |  if_e	sub	objptr, ##544
27a64     FD FA E1 F8 | 	getbyte	result1, result1, #0
27a68     01 FA CD F7 | 	test	result1, #1 wz
27a6c     03 FA 05 56 |  if_ne	mov	result1, #3
27a70     84 00 90 5D |  if_ne	jmp	#LR__4022
27a74     01 00 00 FF 
27a78     21 E4 05 F1 | 	add	objptr, ##545
27a7c     F2 24 C2 FA | 	rdbyte	local04, objptr
27a80     01 00 00 FF 
27a84     21 E4 85 F1 | 	sub	objptr, ##545
27a88     08 24 CE F7 | 	test	local04, #8 wz
27a8c     09 20 66 A0 |  if_e	shl	local02, #9
27a90     02 22 16 F2 | 	cmp	local03, #2 wc
27a94     12 24 06 36 |  if_ae	mov	local04, #18
27a98     11 24 06 C6 |  if_b	mov	local04, #17
27a9c     10 15 02 F6 | 	mov	arg02, local02
27aa0     12 13 02 F6 | 	mov	arg01, local04
27aa4     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27aa8     FD 26 02 F6 | 	mov	local05, result1
27aac     07 26 4E F7 | 	zerox	local05, #7 wz
27ab0     30 00 90 5D |  if_ne	jmp	#LR__4021
27ab4                 | ' 		do {
27ab4                 | LR__4020
27ab4     0F 13 02 F6 | 	mov	arg01, local01
27ab8     09 14 C6 F9 | 	decod	arg02, #9
27abc     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1134
27ac0     00 FA 0D F2 | 	cmp	result1, #0 wz
27ac4     01 00 00 5F 
27ac8     00 1E 06 51 |  if_ne	add	local01, ##512
27acc     F9 23 6E 5B |  if_ne	djnz	local03, #LR__4020
27ad0     12 25 E2 F8 | 	getbyte	local04, local04, #0
27ad4     12 24 0E F2 | 	cmp	local04, #18 wz
27ad8     0C 12 06 A6 |  if_e	mov	arg01, #12
27adc     00 14 06 A6 |  if_e	mov	arg02, #0
27ae0     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1140
27ae4                 | LR__4021
27ae4     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1126
27ae8                 | ' 	}
27ae8                 | ' 	deselect();
27ae8                 | ' 
27ae8                 | ' 	return count ? RES_ERROR : RES_OK;
27ae8     00 22 0E F2 | 	cmp	local03, #0 wz
27aec     01 26 06 56 |  if_ne	mov	local05, #1
27af0     00 26 06 A6 |  if_e	mov	local05, #0
27af4     13 FB 01 F6 | 	mov	result1, local05
27af8                 | LR__4022
27af8     A7 F0 03 F6 | 	mov	ptra, fp
27afc     B2 00 A0 FD | 	call	#popregs_
27b00                 | _fatfs_cc_disk_read_ret
27b00     2D 00 64 FD | 	ret
27b04                 | 
27b04                 | _fatfs_cc_disk_write
27b04     04 4A 05 F6 | 	mov	COUNT_, #4
27b08     A8 00 A0 FD | 	call	#pushregs_
27b0c     0A 1F 02 F6 | 	mov	local01, arg02
27b10     0C 21 02 F6 | 	mov	local02, arg04
27b14     0B 23 02 F6 | 	mov	local03, arg03
27b18     00 12 0E F2 | 	cmp	arg01, #0 wz
27b1c     01 FA 05 56 |  if_ne	mov	result1, #1
27b20                 | ' 
27b20                 | ' 	return Stat;
27b20     01 00 00 AF 
27b24     20 E4 05 A1 |  if_e	add	objptr, ##544
27b28     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27b2c     01 00 00 AF 
27b30     20 E4 85 A1 |  if_e	sub	objptr, ##544
27b34     FD FA E1 F8 | 	getbyte	result1, result1, #0
27b38     01 FA CD F7 | 	test	result1, #1 wz
27b3c     03 FA 05 56 |  if_ne	mov	result1, #3
27b40     D4 00 90 5D |  if_ne	jmp	#LR__4034
27b44     01 00 00 FF 
27b48     21 E4 05 F1 | 	add	objptr, ##545
27b4c     F2 16 C2 FA | 	rdbyte	arg03, objptr
27b50     01 00 00 FF 
27b54     21 E4 85 F1 | 	sub	objptr, ##545
27b58     08 16 CE F7 | 	test	arg03, #8 wz
27b5c     09 22 66 A0 |  if_e	shl	local03, #9
27b60     01 20 0E F2 | 	cmp	local02, #1 wz
27b64     30 00 90 5D |  if_ne	jmp	#LR__4030
27b68     18 12 06 F6 | 	mov	arg01, #24
27b6c     11 15 02 F6 | 	mov	arg02, local03
27b70     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27b74     FD 24 02 F6 | 	mov	local04, result1
27b78     07 24 4E F7 | 	zerox	local04, #7 wz
27b7c     84 00 90 5D |  if_ne	jmp	#LR__4033
27b80     0F 13 02 F6 | 	mov	arg01, local01
27b84     FE 14 06 F6 | 	mov	arg02, #254
27b88     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1136
27b8c     00 FA 0D F2 | 	cmp	result1, #0 wz
27b90     00 20 06 56 |  if_ne	mov	local02, #0
27b94     6C 00 90 FD | 	jmp	#LR__4033
27b98                 | LR__4030
27b98     01 00 00 FF 
27b9c     21 E4 05 F1 | 	add	objptr, ##545
27ba0     F2 24 C2 FA | 	rdbyte	local04, objptr
27ba4     01 00 00 FF 
27ba8     21 E4 85 F1 | 	sub	objptr, ##545
27bac     06 24 CE F7 | 	test	local04, #6 wz
27bb0     97 12 06 56 |  if_ne	mov	arg01, #151
27bb4     10 15 02 56 |  if_ne	mov	arg02, local02
27bb8     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1140
27bbc     11 15 02 F6 | 	mov	arg02, local03
27bc0     19 12 06 F6 | 	mov	arg01, #25
27bc4     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27bc8     FD 24 02 F6 | 	mov	local04, result1
27bcc     07 24 4E F7 | 	zerox	local04, #7 wz
27bd0     30 00 90 5D |  if_ne	jmp	#LR__4032
27bd4                 | ' 			do {
27bd4                 | LR__4031
27bd4     0F 13 02 F6 | 	mov	arg01, local01
27bd8     FC 14 06 F6 | 	mov	arg02, #252
27bdc     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1136
27be0     00 FA 0D F2 | 	cmp	result1, #0 wz
27be4     01 00 00 5F 
27be8     00 1E 06 51 |  if_ne	add	local01, ##512
27bec     F9 21 6E 5B |  if_ne	djnz	local02, #LR__4031
27bf0     00 12 06 F6 | 	mov	arg01, #0
27bf4     FD 14 06 F6 | 	mov	arg02, #253
27bf8     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1136
27bfc     00 FA 0D F2 | 	cmp	result1, #0 wz
27c00     01 20 06 A6 |  if_e	mov	local02, #1
27c04                 | LR__4032
27c04                 | LR__4033
27c04     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1126
27c08                 | ' 				count = 1;
27c08                 | ' 		}
27c08                 | ' 	}
27c08                 | ' 	deselect();
27c08                 | ' 
27c08                 | ' 	return count ? RES_ERROR : RES_OK;
27c08     00 20 0E F2 | 	cmp	local02, #0 wz
27c0c     01 24 06 56 |  if_ne	mov	local04, #1
27c10     00 24 06 A6 |  if_e	mov	local04, #0
27c14     12 FB 01 F6 | 	mov	result1, local04
27c18                 | LR__4034
27c18     A7 F0 03 F6 | 	mov	ptra, fp
27c1c     B2 00 A0 FD | 	call	#popregs_
27c20                 | _fatfs_cc_disk_write_ret
27c20     2D 00 64 FD | 	ret
27c24                 | 
27c24                 | _fatfs_cc_disk_ioctl
27c24     01 4A 05 F6 | 	mov	COUNT_, #1
27c28     A8 00 A0 FD | 	call	#pushregs_
27c2c     30 F0 07 F1 | 	add	ptra, #48
27c30     04 4E 05 F1 | 	add	fp, #4
27c34     A7 12 42 FC | 	wrbyte	arg01, fp
27c38     04 4E 05 F1 | 	add	fp, #4
27c3c     A7 14 42 FC | 	wrbyte	arg02, fp
27c40     04 4E 05 F1 | 	add	fp, #4
27c44     A7 16 62 FC | 	wrlong	arg03, fp
27c48     08 4E 85 F1 | 	sub	fp, #8
27c4c     A7 12 CA FA | 	rdbyte	arg01, fp wz
27c50     04 4E 85 F1 | 	sub	fp, #4
27c54     01 FA 05 56 |  if_ne	mov	result1, #1
27c58                 | ' 
27c58                 | ' 	return Stat;
27c58     01 00 00 AF 
27c5c     20 E4 05 A1 |  if_e	add	objptr, ##544
27c60     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27c64     01 00 00 AF 
27c68     20 E4 85 A1 |  if_e	sub	objptr, ##544
27c6c     FD FA E1 F8 | 	getbyte	result1, result1, #0
27c70     01 FA CD F7 | 	test	result1, #1 wz
27c74     03 FA 05 56 |  if_ne	mov	result1, #3
27c78     E4 01 90 5D |  if_ne	jmp	#LR__4048
27c7c     10 4E 05 F1 | 	add	fp, #16
27c80     A7 02 68 FC | 	wrlong	#1, fp
27c84                 | ' 
27c84                 | ' 	res = RES_ERROR;
27c84                 | ' 	switch (ctrl) {
27c84     08 4E 85 F1 | 	sub	fp, #8
27c88     A7 1E C2 FA | 	rdbyte	local01, fp
27c8c     08 4E 85 F1 | 	sub	fp, #8
27c90     04 1E 26 F3 | 	fle	local01, #4
27c94     30 1E 62 FD | 	jmprel	local01
27c98                 | LR__4040
27c98     10 00 90 FD | 	jmp	#LR__4041
27c9c     24 00 90 FD | 	jmp	#LR__4042
27ca0     A0 01 90 FD | 	jmp	#LR__4046
27ca4     80 01 90 FD | 	jmp	#LR__4045
27ca8     98 01 90 FD | 	jmp	#LR__4046
27cac                 | LR__4041
27cac     B4 79 B0 FD | 	call	#_fatfs_cc_select_1130
27cb0     00 FA 0D F2 | 	cmp	result1, #0 wz
27cb4     10 4E 05 51 |  if_ne	add	fp, #16
27cb8     A7 00 68 5C |  if_ne	wrlong	#0, fp
27cbc     10 4E 85 51 |  if_ne	sub	fp, #16
27cc0                 | ' 			break;
27cc0     8C 01 90 FD | 	jmp	#LR__4047
27cc4                 | LR__4042
27cc4     09 12 06 F6 | 	mov	arg01, #9
27cc8     00 14 06 F6 | 	mov	arg02, #0
27ccc     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27cd0     FD 1E 02 F6 | 	mov	local01, result1
27cd4     07 1E 4E F7 | 	zerox	local01, #7 wz
27cd8     74 01 90 5D |  if_ne	jmp	#LR__4047
27cdc     18 4E 05 F1 | 	add	fp, #24
27ce0     A7 12 02 F6 | 	mov	arg01, fp
27ce4     18 4E 85 F1 | 	sub	fp, #24
27ce8     10 14 06 F6 | 	mov	arg02, #16
27cec     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1134
27cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
27cf4     58 01 90 AD |  if_e	jmp	#LR__4047
27cf8     18 4E 05 F1 | 	add	fp, #24
27cfc     A7 1E C2 FA | 	rdbyte	local01, fp
27d00     18 4E 85 F1 | 	sub	fp, #24
27d04     06 1E 46 F0 | 	shr	local01, #6
27d08     01 1E 0E F2 | 	cmp	local01, #1 wz
27d0c     5C 00 90 5D |  if_ne	jmp	#LR__4043
27d10     21 4E 05 F1 | 	add	fp, #33
27d14     A7 1E C2 FA | 	rdbyte	local01, fp
27d18     01 4E 85 F1 | 	sub	fp, #1
27d1c     A7 FA C1 FA | 	rdbyte	result1, fp
27d20     FD FA 31 F9 | 	getword	result1, result1, #0
27d24     08 FA 65 F0 | 	shl	result1, #8
27d28     FD 1E 02 F1 | 	add	local01, result1
27d2c     01 4E 85 F1 | 	sub	fp, #1
27d30     A7 FA C1 FA | 	rdbyte	result1, fp
27d34     3F FA 05 F5 | 	and	result1, #63
27d38     10 FA 65 F0 | 	shl	result1, #16
27d3c     FD 1E 02 F1 | 	add	local01, result1
27d40     01 1E 06 F1 | 	add	local01, #1
27d44     09 4E 05 F1 | 	add	fp, #9
27d48     A7 1E 62 FC | 	wrlong	local01, fp
27d4c     1C 4E 85 F1 | 	sub	fp, #28
27d50     A7 1E 02 FB | 	rdlong	local01, fp
27d54     1C 4E 05 F1 | 	add	fp, #28
27d58     A7 FA 01 FB | 	rdlong	result1, fp
27d5c     28 4E 85 F1 | 	sub	fp, #40
27d60     0A FA 65 F0 | 	shl	result1, #10
27d64     0F FB 61 FC | 	wrlong	result1, local01
27d68     AC 00 90 FD | 	jmp	#LR__4044
27d6c                 | LR__4043
27d6c     1D 4E 05 F1 | 	add	fp, #29
27d70     A7 1E C2 FA | 	rdbyte	local01, fp
27d74     0F 1F 42 F8 | 	getnib	local01, local01, #0
27d78     05 4E 05 F1 | 	add	fp, #5
27d7c     A7 FA C1 FA | 	rdbyte	result1, fp
27d80     80 FA 05 F5 | 	and	result1, #128
27d84     07 FA C5 F0 | 	sar	result1, #7
27d88     FD 1E 02 F1 | 	add	local01, result1
27d8c     01 4E 85 F1 | 	sub	fp, #1
27d90     A7 FA C1 FA | 	rdbyte	result1, fp
27d94     03 FA 05 F5 | 	and	result1, #3
27d98     01 FA 65 F0 | 	shl	result1, #1
27d9c     FD 1E 02 F1 | 	add	local01, result1
27da0     02 1E 06 F1 | 	add	local01, #2
27da4     0D 4E 85 F1 | 	sub	fp, #13
27da8     A7 1E 42 FC | 	wrbyte	local01, fp
27dac     0C 4E 05 F1 | 	add	fp, #12
27db0     A7 1E C2 FA | 	rdbyte	local01, fp
27db4     06 1E 46 F0 | 	shr	local01, #6
27db8     01 4E 85 F1 | 	sub	fp, #1
27dbc     A7 FA C1 FA | 	rdbyte	result1, fp
27dc0     FD FA 31 F9 | 	getword	result1, result1, #0
27dc4     02 FA 65 F0 | 	shl	result1, #2
27dc8     FD 1E 02 F1 | 	add	local01, result1
27dcc     01 4E 85 F1 | 	sub	fp, #1
27dd0     A7 FA C1 FA | 	rdbyte	result1, fp
27dd4     03 FA 05 F5 | 	and	result1, #3
27dd8     FD FA 31 F9 | 	getword	result1, result1, #0
27ddc     0A FA 65 F0 | 	shl	result1, #10
27de0     FD 1E 02 F1 | 	add	local01, result1
27de4     01 1E 06 F1 | 	add	local01, #1
27de8     0A 4E 05 F1 | 	add	fp, #10
27dec     A7 1E 62 FC | 	wrlong	local01, fp
27df0     1C 4E 85 F1 | 	sub	fp, #28
27df4     A7 1E 02 FB | 	rdlong	local01, fp
27df8     1C 4E 05 F1 | 	add	fp, #28
27dfc     A7 FA 01 FB | 	rdlong	result1, fp
27e00     14 4E 85 F1 | 	sub	fp, #20
27e04     A7 16 C2 FA | 	rdbyte	arg03, fp
27e08     14 4E 85 F1 | 	sub	fp, #20
27e0c     09 16 86 F1 | 	sub	arg03, #9
27e10     0B FB 61 F0 | 	shl	result1, arg03
27e14     0F FB 61 FC | 	wrlong	result1, local01
27e18                 | LR__4044
27e18     10 4E 05 F1 | 	add	fp, #16
27e1c     A7 00 68 FC | 	wrlong	#0, fp
27e20     10 4E 85 F1 | 	sub	fp, #16
27e24                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
27e24                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
27e24                 | ' 					*(LBA_t*)buff = cs << (n - 9);
27e24                 | ' 				}
27e24                 | ' 				res = RES_OK;
27e24                 | ' 			}
27e24                 | ' 			break;
27e24     28 00 90 FD | 	jmp	#LR__4047
27e28                 | LR__4045
27e28     0C 4E 05 F1 | 	add	fp, #12
27e2c     A7 1E 02 FB | 	rdlong	local01, fp
27e30     0F 01 69 FC | 	wrlong	#128, local01
27e34     04 4E 05 F1 | 	add	fp, #4
27e38     A7 00 68 FC | 	wrlong	#0, fp
27e3c     10 4E 85 F1 | 	sub	fp, #16
27e40                 | ' 			*(DWORD*)buff = 128;
27e40                 | ' 			res = RES_OK;
27e40                 | ' 			break;
27e40     0C 00 90 FD | 	jmp	#LR__4047
27e44                 | LR__4046
27e44     10 4E 05 F1 | 	add	fp, #16
27e48     A7 08 68 FC | 	wrlong	#4, fp
27e4c     10 4E 85 F1 | 	sub	fp, #16
27e50                 | LR__4047
27e50     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1126
27e54                 | ' 			res = RES_PARERR;
27e54                 | ' 	}
27e54                 | ' 
27e54                 | ' 	deselect();
27e54                 | ' 
27e54                 | ' 	return res;
27e54     10 4E 05 F1 | 	add	fp, #16
27e58     A7 FA 01 FB | 	rdlong	result1, fp
27e5c     10 4E 85 F1 | 	sub	fp, #16
27e60                 | LR__4048
27e60     A7 F0 03 F6 | 	mov	ptra, fp
27e64     B2 00 A0 FD | 	call	#popregs_
27e68                 | _fatfs_cc_disk_ioctl_ret
27e68     2D 00 64 FD | 	ret
27e6c                 | 
27e6c                 | _fatfs_cc_disk_setpins
27e6c     00 12 0E F2 | 	cmp	arg01, #0 wz
27e70     01 FA 65 56 |  if_ne	neg	result1, #1
27e74     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
27e78     01 00 00 FF 
27e7c     10 E4 05 F1 | 	add	objptr, ##528
27e80     F2 14 62 FC | 	wrlong	arg02, objptr
27e84     04 E4 05 F1 | 	add	objptr, #4
27e88     F2 16 62 FC | 	wrlong	arg03, objptr
27e8c     04 E4 05 F1 | 	add	objptr, #4
27e90     F2 18 62 FC | 	wrlong	arg04, objptr
27e94     04 E4 05 F1 | 	add	objptr, #4
27e98     F2 1A 62 FC | 	wrlong	arg05, objptr
27e9c     01 00 00 FF 
27ea0     1C E4 85 F1 | 	sub	objptr, ##540
27ea4     00 FA 05 F6 | 	mov	result1, #0
27ea8                 | _fatfs_cc_disk_setpins_ret
27ea8     2D 00 64 FD | 	ret
27eac                 | 
27eac                 | _fatfs_cc_tchar2uni
27eac     09 01 02 FB | 	rdlong	_var01, arg01
27eb0     00 03 02 F6 | 	mov	_var02, _var01
27eb4     01 00 06 F1 | 	add	_var01, #1
27eb8     00 05 02 F6 | 	mov	_var03, _var01
27ebc     01 07 C2 FA | 	rdbyte	_var04, _var02
27ec0     80 06 CE F7 | 	test	_var04, #128 wz
27ec4     E8 00 90 AD |  if_e	jmp	#LR__4057
27ec8     03 09 02 F6 | 	mov	_var05, _var04
27ecc     E0 08 06 F5 | 	and	_var05, #224
27ed0     C0 08 0E F2 | 	cmp	_var05, #192 wz
27ed4     1F 06 06 A5 |  if_e	and	_var04, #31
27ed8     01 0A 06 A6 |  if_e	mov	_var06, #1
27edc     34 00 90 AD |  if_e	jmp	#LR__4051
27ee0     03 09 02 F6 | 	mov	_var05, _var04
27ee4     F0 08 06 F5 | 	and	_var05, #240
27ee8     E0 08 0E F2 | 	cmp	_var05, #224 wz
27eec     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
27ef0     02 0A 06 A6 |  if_e	mov	_var06, #2
27ef4     1C 00 90 AD |  if_e	jmp	#LR__4050
27ef8     03 09 02 F6 | 	mov	_var05, _var04
27efc     F8 08 06 F5 | 	and	_var05, #248
27f00     F0 08 0E F2 | 	cmp	_var05, #240 wz
27f04     07 06 06 A5 |  if_e	and	_var04, #7
27f08     03 0A 06 A6 |  if_e	mov	_var06, #3
27f0c                 | ' 			return 0xFFFFFFFF;
27f0c     01 FA 65 56 |  if_ne	neg	result1, #1
27f10     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
27f14                 | LR__4050
27f14                 | LR__4051
27f14                 | ' 		}
27f14                 | ' 		do {
27f14                 | LR__4052
27f14     02 0D C2 FA | 	rdbyte	_var07, _var03
27f18     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
27f1c     C0 08 06 F5 | 	and	_var05, #192
27f20     80 08 0E F2 | 	cmp	_var05, #128 wz
27f24     01 04 06 F1 | 	add	_var03, #1
27f28     01 FA 65 56 |  if_ne	neg	result1, #1
27f2c     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
27f30     06 06 66 F0 | 	shl	_var04, #6
27f34     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
27f38     3F 02 06 F5 | 	and	_var02, #63
27f3c     01 07 42 F5 | 	or	_var04, _var02
27f40     F4 0B 6E FB | 	djnz	_var06, #LR__4052
27f44     80 06 16 F2 | 	cmp	_var04, #128 wc
27f48     24 00 90 CD |  if_b	jmp	#LR__4054
27f4c     6C 00 00 FF 
27f50     00 06 16 F2 | 	cmp	_var04, ##55296 wc
27f54     0C 00 90 CD |  if_b	jmp	#LR__4053
27f58     70 00 00 FF 
27f5c     00 06 16 F2 | 	cmp	_var04, ##57344 wc
27f60     0C 00 90 CD |  if_b	jmp	#LR__4054
27f64                 | LR__4053
27f64     80 08 00 FF 
27f68     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
27f6c     08 00 90 CD |  if_b	jmp	#LR__4055
27f70                 | LR__4054
27f70     01 FA 65 F6 | 	neg	result1, #1
27f74     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
27f78                 | LR__4055
27f78     80 00 00 FF 
27f7c     00 06 16 F2 | 	cmp	_var04, ##65536 wc
27f80     2C 00 90 CD |  if_b	jmp	#LR__4056
27f84     03 03 02 F6 | 	mov	_var02, _var04
27f88     80 00 00 FF 
27f8c     00 02 86 F1 | 	sub	_var02, ##65536
27f90     06 02 66 F0 | 	shl	_var02, #6
27f94     80 FF 01 FF 
27f98     00 02 06 F5 | 	and	_var02, ##67043328
27f9c     6E 00 6C FF 
27fa0     00 08 06 F6 | 	mov	_var05, ##-671032320
27fa4     01 09 42 F5 | 	or	_var05, _var02
27fa8     09 06 46 F7 | 	zerox	_var04, #9
27fac     04 07 42 F5 | 	or	_var04, _var05
27fb0                 | LR__4056
27fb0                 | LR__4057
27fb0     09 05 62 FC | 	wrlong	_var03, arg01
27fb4                 | ' 	}
27fb4                 | ' #line 811 "ff.c"
27fb4                 | ' 	*str = p;
27fb4                 | ' 	return uc;
27fb4     03 FB 01 F6 | 	mov	result1, _var04
27fb8                 | _fatfs_cc_tchar2uni_ret
27fb8     2D 00 64 FD | 	ret
27fbc                 | 
27fbc                 | _fatfs_cc_put_utf
27fbc     80 12 16 F2 | 	cmp	arg01, #128 wc
27fc0     18 00 90 3D |  if_ae	jmp	#LR__4060
27fc4     01 16 16 F2 | 	cmp	arg03, #1 wc
27fc8     00 FA 05 C6 |  if_b	mov	result1, #0
27fcc     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
27fd0     0A 13 42 FC | 	wrbyte	arg01, arg02
27fd4                 | ' 		*buf = (TCHAR)chr;
27fd4                 | ' 		return 1;
27fd4     01 FA 05 F6 | 	mov	result1, #1
27fd8     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
27fdc                 | LR__4060
27fdc     04 00 00 FF 
27fe0     00 12 16 F2 | 	cmp	arg01, ##2048 wc
27fe4     40 00 90 3D |  if_ae	jmp	#LR__4061
27fe8     02 16 16 F2 | 	cmp	arg03, #2 wc
27fec     00 FA 05 C6 |  if_b	mov	result1, #0
27ff0     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
27ff4     09 FB 01 F6 | 	mov	result1, arg01
27ff8     06 FA 45 F0 | 	shr	result1, #6
27ffc     1F FA 05 F5 | 	and	result1, #31
28000     C0 16 06 F6 | 	mov	arg03, #192
28004     FD 16 42 F5 | 	or	arg03, result1
28008     0A 17 42 FC | 	wrbyte	arg03, arg02
2800c     01 14 06 F1 | 	add	arg02, #1
28010     3F 12 06 F5 | 	and	arg01, #63
28014     80 FA 05 F6 | 	mov	result1, #128
28018     09 FB 41 F5 | 	or	result1, arg01
2801c     0A FB 41 FC | 	wrbyte	result1, arg02
28020                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
28020                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
28020                 | ' 		return 2;
28020     02 FA 05 F6 | 	mov	result1, #2
28024     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
28028                 | LR__4061
28028     80 00 00 FF 
2802c     00 12 16 F2 | 	cmp	arg01, ##65536 wc
28030     70 00 90 3D |  if_ae	jmp	#LR__4064
28034     03 16 16 F2 | 	cmp	arg03, #3 wc
28038     18 00 90 CD |  if_b	jmp	#LR__4062
2803c     6C 00 00 FF 
28040     00 12 16 F2 | 	cmp	arg01, ##55296 wc
28044     14 00 90 CD |  if_b	jmp	#LR__4063
28048     70 00 00 FF 
2804c     00 12 16 F2 | 	cmp	arg01, ##57344 wc
28050     08 00 90 3D |  if_ae	jmp	#LR__4063
28054                 | LR__4062
28054     00 FA 05 F6 | 	mov	result1, #0
28058     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2805c                 | LR__4063
2805c     09 FB 59 F8 | 	getnib	result1, arg01, #3
28060     E0 16 06 F6 | 	mov	arg03, #224
28064     FD 16 42 F5 | 	or	arg03, result1
28068     0A 17 42 FC | 	wrbyte	arg03, arg02
2806c     01 14 06 F1 | 	add	arg02, #1
28070     09 FB 01 F6 | 	mov	result1, arg01
28074     06 FA 45 F0 | 	shr	result1, #6
28078     3F FA 05 F5 | 	and	result1, #63
2807c     80 16 06 F6 | 	mov	arg03, #128
28080     FD 16 42 F5 | 	or	arg03, result1
28084     0A 17 42 FC | 	wrbyte	arg03, arg02
28088     01 14 06 F1 | 	add	arg02, #1
2808c     3F 12 06 F5 | 	and	arg01, #63
28090     80 FA 05 F6 | 	mov	result1, #128
28094     09 FB 41 F5 | 	or	result1, arg01
28098     0A FB 41 FC | 	wrbyte	result1, arg02
2809c                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2809c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2809c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2809c                 | ' 		return 3;
2809c     03 FA 05 F6 | 	mov	result1, #3
280a0     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
280a4                 | LR__4064
280a4     04 16 16 F2 | 	cmp	arg03, #4 wc
280a8     00 FA 05 C6 |  if_b	mov	result1, #0
280ac     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
280b0     09 01 02 F6 | 	mov	_var01, arg01
280b4     E0 01 06 F4 | 	bitl	_var01, #480
280b8     00 00 6C FF 
280bc     00 00 86 F1 | 	sub	_var01, ##-671088640
280c0     06 00 46 F0 | 	shr	_var01, #6
280c4     09 13 32 F9 | 	getword	arg01, arg01, #0
280c8     6E 00 00 FF 
280cc     00 12 86 F1 | 	sub	arg01, ##56320
280d0     00 08 00 FF 
280d4     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
280d8     02 00 00 CF 
280dc     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
280e0     00 FA 05 36 |  if_ae	mov	result1, #0
280e4     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
280e8     09 01 42 F5 | 	or	_var01, arg01
280ec     80 00 00 FF 
280f0     00 00 06 F1 | 	add	_var01, ##65536
280f4     00 FB 01 F6 | 	mov	result1, _var01
280f8     12 FA 45 F0 | 	shr	result1, #18
280fc     07 FA 05 F5 | 	and	result1, #7
28100     F0 16 06 F6 | 	mov	arg03, #240
28104     FD 16 42 F5 | 	or	arg03, result1
28108     0A 17 42 FC | 	wrbyte	arg03, arg02
2810c     01 14 06 F1 | 	add	arg02, #1
28110     00 FB 01 F6 | 	mov	result1, _var01
28114     0C FA 45 F0 | 	shr	result1, #12
28118     3F FA 05 F5 | 	and	result1, #63
2811c     80 16 06 F6 | 	mov	arg03, #128
28120     FD 16 42 F5 | 	or	arg03, result1
28124     0A 17 42 FC | 	wrbyte	arg03, arg02
28128     01 14 06 F1 | 	add	arg02, #1
2812c     00 FB 01 F6 | 	mov	result1, _var01
28130     06 FA 45 F0 | 	shr	result1, #6
28134     3F FA 05 F5 | 	and	result1, #63
28138     80 16 06 F6 | 	mov	arg03, #128
2813c     FD 16 42 F5 | 	or	arg03, result1
28140     0A 17 42 FC | 	wrbyte	arg03, arg02
28144     01 14 06 F1 | 	add	arg02, #1
28148     3F 00 06 F5 | 	and	_var01, #63
2814c     80 FA 05 F6 | 	mov	result1, #128
28150     00 FB 41 F5 | 	or	result1, _var01
28154     0A FB 41 FC | 	wrbyte	result1, arg02
28158                 | ' 	chr = (hc | chr) + 0x10000;
28158                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
28158                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
28158                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
28158                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
28158                 | ' 	return 4;
28158     04 FA 05 F6 | 	mov	result1, #4
2815c                 | _fatfs_cc_put_utf_ret
2815c     2D 00 64 FD | 	ret
28160                 | 
28160                 | _fatfs_cc_sync_window
28160     02 4A 05 F6 | 	mov	COUNT_, #2
28164     A8 00 A0 FD | 	call	#pushregs_
28168     09 1F 02 F6 | 	mov	local01, arg01
2816c     00 20 06 F6 | 	mov	local02, #0
28170     03 1E 06 F1 | 	add	local01, #3
28174     0F FB C9 FA | 	rdbyte	result1, local01 wz
28178     03 1E 86 F1 | 	sub	local01, #3
2817c     A4 00 90 AD |  if_e	jmp	#LR__4072
28180     01 1E 06 F1 | 	add	local01, #1
28184     0F 13 C2 FA | 	rdbyte	arg01, local01
28188     33 1E 06 F1 | 	add	local01, #51
2818c     0F 15 02 F6 | 	mov	arg02, local01
28190     04 1E 86 F1 | 	sub	local01, #4
28194     0F 17 02 FB | 	rdlong	arg03, local01
28198     30 1E 86 F1 | 	sub	local01, #48
2819c     01 18 06 F6 | 	mov	arg04, #1
281a0     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
281a4     00 FA 0D F2 | 	cmp	result1, #0 wz
281a8     74 00 90 5D |  if_ne	jmp	#LR__4070
281ac     03 1E 06 F1 | 	add	local01, #3
281b0     0F 01 48 FC | 	wrbyte	#0, local01
281b4     2D 1E 06 F1 | 	add	local01, #45
281b8     0F FB 01 FB | 	rdlong	result1, local01
281bc     0C 1E 86 F1 | 	sub	local01, #12
281c0     0F 19 02 FB | 	rdlong	arg04, local01
281c4     0C FB 81 F1 | 	sub	result1, arg04
281c8     08 1E 86 F1 | 	sub	local01, #8
281cc     0F 19 02 FB | 	rdlong	arg04, local01
281d0     1C 1E 86 F1 | 	sub	local01, #28
281d4     0C FB 11 F2 | 	cmp	result1, arg04 wc
281d8     48 00 90 3D |  if_ae	jmp	#LR__4071
281dc     02 1E 06 F1 | 	add	local01, #2
281e0     0F 19 C2 FA | 	rdbyte	arg04, local01
281e4     02 1E 86 F1 | 	sub	local01, #2
281e8     02 18 0E F2 | 	cmp	arg04, #2 wz
281ec     34 00 90 5D |  if_ne	jmp	#LR__4071
281f0     01 1E 06 F1 | 	add	local01, #1
281f4     0F 13 C2 FA | 	rdbyte	arg01, local01
281f8     33 1E 06 F1 | 	add	local01, #51
281fc     0F 15 02 F6 | 	mov	arg02, local01
28200     04 1E 86 F1 | 	sub	local01, #4
28204     0F 17 02 FB | 	rdlong	arg03, local01
28208     14 1E 86 F1 | 	sub	local01, #20
2820c     0F 1F 02 FB | 	rdlong	local01, local01
28210     0F 17 02 F1 | 	add	arg03, local01
28214     01 18 06 F6 | 	mov	arg04, #1
28218     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
2821c     04 00 90 FD | 	jmp	#LR__4071
28220                 | LR__4070
28220     01 20 06 F6 | 	mov	local02, #1
28224                 | LR__4071
28224                 | LR__4072
28224                 | ' 			res = FR_DISK_ERR;
28224                 | ' 		}
28224                 | ' 	}
28224                 | ' 	return res;
28224     10 FB 01 F6 | 	mov	result1, local02
28228     A7 F0 03 F6 | 	mov	ptra, fp
2822c     B2 00 A0 FD | 	call	#popregs_
28230                 | _fatfs_cc_sync_window_ret
28230     2D 00 64 FD | 	ret
28234                 | 
28234                 | _fatfs_cc_move_window
28234     03 4A 05 F6 | 	mov	COUNT_, #3
28238     A8 00 A0 FD | 	call	#pushregs_
2823c     09 1F 02 F6 | 	mov	local01, arg01
28240     0A 21 02 F6 | 	mov	local02, arg02
28244     00 22 06 F6 | 	mov	local03, #0
28248     30 1E 06 F1 | 	add	local01, #48
2824c     0F 19 02 FB | 	rdlong	arg04, local01
28250     30 1E 86 F1 | 	sub	local01, #48
28254     0C 21 0A F2 | 	cmp	local02, arg04 wz
28258     40 00 90 AD |  if_e	jmp	#LR__4081
2825c     0F 13 02 F6 | 	mov	arg01, local01
28260     FC FE BF FD | 	call	#_fatfs_cc_sync_window
28264     FD 22 0A F6 | 	mov	local03, result1 wz
28268     30 00 90 5D |  if_ne	jmp	#LR__4080
2826c     01 1E 06 F1 | 	add	local01, #1
28270     0F 13 C2 FA | 	rdbyte	arg01, local01
28274     33 1E 06 F1 | 	add	local01, #51
28278     0F 15 02 F6 | 	mov	arg02, local01
2827c     10 17 02 F6 | 	mov	arg03, local02
28280     01 18 06 F6 | 	mov	arg04, #1
28284     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
28288     00 FA 0D F2 | 	cmp	result1, #0 wz
2828c     01 20 66 56 |  if_ne	neg	local02, #1
28290     01 22 06 56 |  if_ne	mov	local03, #1
28294     04 1E 86 F1 | 	sub	local01, #4
28298     0F 21 62 FC | 	wrlong	local02, local01
2829c                 | LR__4080
2829c                 | LR__4081
2829c                 | ' 				sect = (LBA_t)0 - 1;
2829c                 | ' 				res = FR_DISK_ERR;
2829c                 | ' 			}
2829c                 | ' 			fs->winsect = sect;
2829c                 | ' 		}
2829c                 | ' 	}
2829c                 | ' 	return res;
2829c     11 FB 01 F6 | 	mov	result1, local03
282a0     A7 F0 03 F6 | 	mov	ptra, fp
282a4     B2 00 A0 FD | 	call	#popregs_
282a8                 | _fatfs_cc_move_window_ret
282a8     2D 00 64 FD | 	ret
282ac                 | 
282ac                 | _fatfs_cc_sync_fs
282ac     02 4A 05 F6 | 	mov	COUNT_, #2
282b0     A8 00 A0 FD | 	call	#pushregs_
282b4     09 1F 02 F6 | 	mov	local01, arg01
282b8     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
282bc     FD 20 0A F6 | 	mov	local02, result1 wz
282c0     D8 00 90 5D |  if_ne	jmp	#LR__4091
282c4     0F 19 C2 FA | 	rdbyte	arg04, local01
282c8     03 18 0E F2 | 	cmp	arg04, #3 wz
282cc     04 1E 06 A1 |  if_e	add	local01, #4
282d0     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
282d4     04 1E 86 A1 |  if_e	sub	local01, #4
282d8     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
282dc     A0 00 90 5D |  if_ne	jmp	#LR__4090
282e0     34 1E 06 F1 | 	add	local01, #52
282e4     0F 13 02 F6 | 	mov	arg01, local01
282e8     00 14 06 F6 | 	mov	arg02, #0
282ec     09 16 C6 F9 | 	decod	arg03, #9
282f0     98 00 A0 FD | 	call	#\builtin_bytefill_
282f4     0F 13 02 F6 | 	mov	arg01, local01
282f8     FE 13 06 F1 | 	add	arg01, #510
282fc     55 00 80 FF 
28300     09 AB 58 FC | 	wrword	##43605, arg01
28304     A9 B0 A0 FF 
28308     0F A5 68 FC | 	wrlong	##1096897106, local01
2830c     0F 13 02 F6 | 	mov	arg01, local01
28310     E4 13 06 F1 | 	add	arg01, #484
28314     B9 A0 B0 FF 
28318     09 E5 68 FC | 	wrlong	##1631679090, arg01
2831c     0F 13 02 F6 | 	mov	arg01, local01
28320     E8 13 06 F1 | 	add	arg01, #488
28324     20 1E 86 F1 | 	sub	local01, #32
28328     0F 15 02 FB | 	rdlong	arg02, local01
2832c     09 15 62 FC | 	wrlong	arg02, arg01
28330     20 1E 06 F1 | 	add	local01, #32
28334     0F 13 02 F6 | 	mov	arg01, local01
28338     EC 13 06 F1 | 	add	arg01, #492
2833c     24 1E 86 F1 | 	sub	local01, #36
28340     0F 15 02 FB | 	rdlong	arg02, local01
28344     09 15 62 FC | 	wrlong	arg02, arg01
28348     10 1E 06 F1 | 	add	local01, #16
2834c     0F 17 02 FB | 	rdlong	arg03, local01
28350     01 16 06 F1 | 	add	arg03, #1
28354     10 1E 06 F1 | 	add	local01, #16
28358     0F 17 62 FC | 	wrlong	arg03, local01
2835c     2F 1E 86 F1 | 	sub	local01, #47
28360     0F 13 C2 FA | 	rdbyte	arg01, local01
28364     33 1E 06 F1 | 	add	local01, #51
28368     0F 15 02 F6 | 	mov	arg02, local01
2836c     01 18 06 F6 | 	mov	arg04, #1
28370     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
28374     30 1E 86 F1 | 	sub	local01, #48
28378     0F 01 48 FC | 	wrbyte	#0, local01
2837c     04 1E 86 F1 | 	sub	local01, #4
28380                 | LR__4090
28380     01 1E 06 F1 | 	add	local01, #1
28384     0F 13 C2 FA | 	rdbyte	arg01, local01
28388     00 14 06 F6 | 	mov	arg02, #0
2838c     00 16 06 F6 | 	mov	arg03, #0
28390     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
28394     00 FA 0D F2 | 	cmp	result1, #0 wz
28398     01 20 06 56 |  if_ne	mov	local02, #1
2839c                 | LR__4091
2839c                 | ' 	}
2839c                 | ' 
2839c                 | ' 	return res;
2839c     10 FB 01 F6 | 	mov	result1, local02
283a0     A7 F0 03 F6 | 	mov	ptra, fp
283a4     B2 00 A0 FD | 	call	#popregs_
283a8                 | _fatfs_cc_sync_fs_ret
283a8     2D 00 64 FD | 	ret
283ac                 | 
283ac                 | _fatfs_cc_clst2sect
283ac     02 14 86 F1 | 	sub	arg02, #2
283b0     18 12 06 F1 | 	add	arg01, #24
283b4     09 01 02 FB | 	rdlong	_var01, arg01
283b8     18 12 86 F1 | 	sub	arg01, #24
283bc     02 00 86 F1 | 	sub	_var01, #2
283c0     00 15 12 F2 | 	cmp	arg02, _var01 wc
283c4     00 FA 05 36 |  if_ae	mov	result1, #0
283c8     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
283cc     0A 12 06 F1 | 	add	arg01, #10
283d0     09 01 E2 FA | 	rdword	_var01, arg01
283d4     0A 01 02 FD | 	qmul	_var01, arg02
283d8                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
283d8     22 12 06 F1 | 	add	arg01, #34
283dc     09 FB 01 FB | 	rdlong	result1, arg01
283e0     18 00 62 FD | 	getqx	_var01
283e4     00 FB 01 F1 | 	add	result1, _var01
283e8                 | _fatfs_cc_clst2sect_ret
283e8     2D 00 64 FD | 	ret
283ec                 | 
283ec                 | _fatfs_cc_get_fat
283ec     07 4A 05 F6 | 	mov	COUNT_, #7
283f0     A8 00 A0 FD | 	call	#pushregs_
283f4     0A 1F 02 F6 | 	mov	local01, arg02
283f8     09 21 02 FB | 	rdlong	local02, arg01
283fc     02 1E 16 F2 | 	cmp	local01, #2 wc
28400     14 00 90 CD |  if_b	jmp	#LR__4100
28404     18 20 06 F1 | 	add	local02, #24
28408     10 23 02 FB | 	rdlong	local03, local02
2840c     18 20 86 F1 | 	sub	local02, #24
28410     11 1F 12 F2 | 	cmp	local01, local03 wc
28414     08 00 90 CD |  if_b	jmp	#LR__4101
28418                 | LR__4100
28418     01 24 06 F6 | 	mov	local04, #1
2841c     60 01 90 FD | 	jmp	#LR__4108
28420                 | LR__4101
28420     01 24 66 F6 | 	neg	local04, #1
28424                 | ' 		val = 0xFFFFFFFF;
28424                 | ' 
28424                 | ' 		switch (fs->fs_type) {
28424     10 27 C2 FA | 	rdbyte	local05, local02
28428     01 26 86 F1 | 	sub	local05, #1
2842c     03 26 26 F3 | 	fle	local05, #3
28430     30 26 62 FD | 	jmprel	local05
28434                 | LR__4102
28434     0C 00 90 FD | 	jmp	#LR__4103
28438     B8 00 90 FD | 	jmp	#LR__4104
2843c     F8 00 90 FD | 	jmp	#LR__4105
28440     38 01 90 FD | 	jmp	#LR__4106
28444                 | LR__4103
28444     0F 27 02 F6 | 	mov	local05, local01
28448     0F 13 02 F6 | 	mov	arg01, local01
2844c     01 12 46 F0 | 	shr	arg01, #1
28450     09 27 02 F1 | 	add	local05, arg01
28454     10 13 02 F6 | 	mov	arg01, local02
28458     13 29 02 F6 | 	mov	local06, local05
2845c     09 28 46 F0 | 	shr	local06, #9
28460     24 20 06 F1 | 	add	local02, #36
28464     10 15 02 FB | 	rdlong	arg02, local02
28468     24 20 86 F1 | 	sub	local02, #36
2846c     14 15 02 F1 | 	add	arg02, local06
28470     C0 FD BF FD | 	call	#_fatfs_cc_move_window
28474     00 FA 0D F2 | 	cmp	result1, #0 wz
28478     04 01 90 5D |  if_ne	jmp	#LR__4107
2847c     13 29 02 F6 | 	mov	local06, local05
28480     FF 29 06 F5 | 	and	local06, #511
28484     34 20 06 F1 | 	add	local02, #52
28488     10 29 02 F1 | 	add	local06, local02
2848c     14 2B C2 FA | 	rdbyte	local07, local06
28490     34 20 86 F1 | 	sub	local02, #52
28494     10 13 02 F6 | 	mov	arg01, local02
28498     01 26 06 F1 | 	add	local05, #1
2849c     13 29 02 F6 | 	mov	local06, local05
284a0     09 28 46 F0 | 	shr	local06, #9
284a4     24 20 06 F1 | 	add	local02, #36
284a8     10 15 02 FB | 	rdlong	arg02, local02
284ac     24 20 86 F1 | 	sub	local02, #36
284b0     14 15 02 F1 | 	add	arg02, local06
284b4     7C FD BF FD | 	call	#_fatfs_cc_move_window
284b8     00 FA 0D F2 | 	cmp	result1, #0 wz
284bc     C0 00 90 5D |  if_ne	jmp	#LR__4107
284c0     FF 27 06 F5 | 	and	local05, #511
284c4     34 20 06 F1 | 	add	local02, #52
284c8     10 27 02 F1 | 	add	local05, local02
284cc     13 29 C2 FA | 	rdbyte	local06, local05
284d0     08 28 66 F0 | 	shl	local06, #8
284d4     14 2B 42 F5 | 	or	local07, local06
284d8     01 1E CE F7 | 	test	local01, #1 wz
284dc     04 2A 46 50 |  if_ne	shr	local07, #4
284e0     15 23 02 56 |  if_ne	mov	local03, local07
284e4     0B 2A 46 A7 |  if_e	zerox	local07, #11
284e8     15 23 02 A6 |  if_e	mov	local03, local07
284ec     11 25 02 F6 | 	mov	local04, local03
284f0                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
284f0                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
284f0                 | ' 			break;
284f0     8C 00 90 FD | 	jmp	#LR__4107
284f4                 | LR__4104
284f4     10 13 02 F6 | 	mov	arg01, local02
284f8     0F 29 02 F6 | 	mov	local06, local01
284fc     08 28 46 F0 | 	shr	local06, #8
28500     24 20 06 F1 | 	add	local02, #36
28504     10 15 02 FB | 	rdlong	arg02, local02
28508     24 20 86 F1 | 	sub	local02, #36
2850c     14 15 02 F1 | 	add	arg02, local06
28510     20 FD BF FD | 	call	#_fatfs_cc_move_window
28514     00 FA 0D F2 | 	cmp	result1, #0 wz
28518     64 00 90 5D |  if_ne	jmp	#LR__4107
2851c     34 20 06 F1 | 	add	local02, #52
28520     01 1E 66 F0 | 	shl	local01, #1
28524     FF 1F 06 F5 | 	and	local01, #511
28528     0F 21 02 F1 | 	add	local02, local01
2852c                 | ' {
2852c                 | ' 
2852c                 | ' 	return *((WORD*)ptr);
2852c     10 FB E1 FA | 	rdword	result1, local02
28530     FD 24 32 F9 | 	getword	local04, result1, #0
28534                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
28534                 | ' 			break;
28534     48 00 90 FD | 	jmp	#LR__4107
28538                 | LR__4105
28538     10 13 02 F6 | 	mov	arg01, local02
2853c     0F 29 02 F6 | 	mov	local06, local01
28540     07 28 46 F0 | 	shr	local06, #7
28544     24 20 06 F1 | 	add	local02, #36
28548     10 15 02 FB | 	rdlong	arg02, local02
2854c     24 20 86 F1 | 	sub	local02, #36
28550     14 15 02 F1 | 	add	arg02, local06
28554     DC FC BF FD | 	call	#_fatfs_cc_move_window
28558     00 FA 0D F2 | 	cmp	result1, #0 wz
2855c     20 00 90 5D |  if_ne	jmp	#LR__4107
28560     34 20 06 F1 | 	add	local02, #52
28564     02 1E 66 F0 | 	shl	local01, #2
28568     FF 1F 06 F5 | 	and	local01, #511
2856c     0F 21 02 F1 | 	add	local02, local01
28570                 | ' {
28570                 | ' 
28570                 | ' 	return *((DWORD*)ptr);
28570     10 25 02 FB | 	rdlong	local04, local02
28574     7C 24 06 F4 | 	bitl	local04, #124
28578                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
28578                 | ' 			break;
28578     04 00 90 FD | 	jmp	#LR__4107
2857c                 | LR__4106
2857c     01 24 06 F6 | 	mov	local04, #1
28580                 | LR__4107
28580                 | LR__4108
28580                 | ' 			val = 1;
28580                 | ' 		}
28580                 | ' 	}
28580                 | ' 
28580                 | ' 	return val;
28580     12 FB 01 F6 | 	mov	result1, local04
28584     A7 F0 03 F6 | 	mov	ptra, fp
28588     B2 00 A0 FD | 	call	#popregs_
2858c                 | _fatfs_cc_get_fat_ret
2858c     2D 00 64 FD | 	ret
28590                 | 
28590                 | _fatfs_cc_put_fat
28590     08 4A 05 F6 | 	mov	COUNT_, #8
28594     A8 00 A0 FD | 	call	#pushregs_
28598     09 1F 02 F6 | 	mov	local01, arg01
2859c     0A 21 02 F6 | 	mov	local02, arg02
285a0     0B 23 02 F6 | 	mov	local03, arg03
285a4     02 24 06 F6 | 	mov	local04, #2
285a8     02 20 16 F2 | 	cmp	local02, #2 wc
285ac     E0 01 90 CD |  if_b	jmp	#LR__4117
285b0     18 1E 06 F1 | 	add	local01, #24
285b4     0F 27 02 FB | 	rdlong	local05, local01
285b8     18 1E 86 F1 | 	sub	local01, #24
285bc     13 21 12 F2 | 	cmp	local02, local05 wc
285c0     CC 01 90 3D |  if_ae	jmp	#LR__4117
285c4                 | ' 		switch (fs->fs_type) {
285c4     0F 29 C2 FA | 	rdbyte	local06, local01
285c8     01 28 86 F1 | 	sub	local06, #1
285cc     03 28 26 F3 | 	fle	local06, #3
285d0     30 28 62 FD | 	jmprel	local06
285d4                 | LR__4110
285d4     0C 00 90 FD | 	jmp	#LR__4111
285d8     F8 00 90 FD | 	jmp	#LR__4114
285dc     40 01 90 FD | 	jmp	#LR__4115
285e0     AC 01 90 FD | 	jmp	#LR__4116
285e4                 | LR__4111
285e4     10 2B 02 F6 | 	mov	local07, local02
285e8     10 27 02 F6 | 	mov	local05, local02
285ec     01 26 46 F0 | 	shr	local05, #1
285f0     13 2B 02 F1 | 	add	local07, local05
285f4     0F 13 02 F6 | 	mov	arg01, local01
285f8     15 29 02 F6 | 	mov	local06, local07
285fc     09 28 46 F0 | 	shr	local06, #9
28600     24 1E 06 F1 | 	add	local01, #36
28604     0F 15 02 FB | 	rdlong	arg02, local01
28608     24 1E 86 F1 | 	sub	local01, #36
2860c     14 15 02 F1 | 	add	arg02, local06
28610     20 FC BF FD | 	call	#_fatfs_cc_move_window
28614     FD 24 0A F6 | 	mov	local04, result1 wz
28618     74 01 90 5D |  if_ne	jmp	#LR__4116
2861c     34 1E 06 F1 | 	add	local01, #52
28620     0F 2D 02 F6 | 	mov	local08, local01
28624     15 27 02 F6 | 	mov	local05, local07
28628     FF 27 06 F5 | 	and	local05, #511
2862c     13 2D 02 F1 | 	add	local08, local05
28630     01 20 CE F7 | 	test	local02, #1 wz
28634     34 1E 86 F1 | 	sub	local01, #52
28638     01 2A 06 F1 | 	add	local07, #1
2863c     18 00 90 AD |  if_e	jmp	#LR__4112
28640     16 27 C2 FA | 	rdbyte	local05, local08
28644     13 27 42 F8 | 	getnib	local05, local05, #0
28648     11 29 E2 F8 | 	getbyte	local06, local03, #0
2864c     04 28 66 F0 | 	shl	local06, #4
28650     14 27 42 F5 | 	or	local05, local06
28654     04 00 90 FD | 	jmp	#LR__4113
28658                 | LR__4112
28658     11 27 02 F6 | 	mov	local05, local03
2865c                 | LR__4113
2865c     16 27 42 FC | 	wrbyte	local05, local08
28660     03 1E 06 F1 | 	add	local01, #3
28664     0F 03 48 FC | 	wrbyte	#1, local01
28668     03 1E 86 F1 | 	sub	local01, #3
2866c     0F 13 02 F6 | 	mov	arg01, local01
28670     15 2D 02 F6 | 	mov	local08, local07
28674     09 2C 46 F0 | 	shr	local08, #9
28678     24 1E 06 F1 | 	add	local01, #36
2867c     0F 15 02 FB | 	rdlong	arg02, local01
28680     24 1E 86 F1 | 	sub	local01, #36
28684     16 15 02 F1 | 	add	arg02, local08
28688     A8 FB BF FD | 	call	#_fatfs_cc_move_window
2868c     FD 24 0A F6 | 	mov	local04, result1 wz
28690     FC 00 90 5D |  if_ne	jmp	#LR__4116
28694     34 1E 06 F1 | 	add	local01, #52
28698     0F 2D 02 F6 | 	mov	local08, local01
2869c     FF 2B 06 F5 | 	and	local07, #511
286a0     15 2D 02 F1 | 	add	local08, local07
286a4     01 20 CE F7 | 	test	local02, #1 wz
286a8     04 22 46 50 |  if_ne	shr	local03, #4
286ac     11 27 02 56 |  if_ne	mov	local05, local03
286b0     16 27 C2 AA |  if_e	rdbyte	local05, local08
286b4     F0 26 06 A5 |  if_e	and	local05, #240
286b8     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
286bc     11 23 42 A8 |  if_e	getnib	local03, local03, #0
286c0     11 27 42 A5 |  if_e	or	local05, local03
286c4     16 27 42 FC | 	wrbyte	local05, local08
286c8     31 1E 86 F1 | 	sub	local01, #49
286cc     0F 03 48 FC | 	wrbyte	#1, local01
286d0                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
286d0                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
286d0                 | ' 			fs->wflag = 1;
286d0                 | ' 			break;
286d0     BC 00 90 FD | 	jmp	#LR__4116
286d4                 | LR__4114
286d4     0F 13 02 F6 | 	mov	arg01, local01
286d8     10 2D 02 F6 | 	mov	local08, local02
286dc     08 2C 46 F0 | 	shr	local08, #8
286e0     24 1E 06 F1 | 	add	local01, #36
286e4     0F 15 02 FB | 	rdlong	arg02, local01
286e8     24 1E 86 F1 | 	sub	local01, #36
286ec     16 15 02 F1 | 	add	arg02, local08
286f0     40 FB BF FD | 	call	#_fatfs_cc_move_window
286f4     FD 24 0A F6 | 	mov	local04, result1 wz
286f8     94 00 90 5D |  if_ne	jmp	#LR__4116
286fc     34 1E 06 F1 | 	add	local01, #52
28700     0F 13 02 F6 | 	mov	arg01, local01
28704     01 20 66 F0 | 	shl	local02, #1
28708     FF 21 06 F5 | 	and	local02, #511
2870c     10 13 02 F1 | 	add	arg01, local02
28710     09 23 52 FC | 	wrword	local03, arg01
28714     31 1E 86 F1 | 	sub	local01, #49
28718     0F 03 48 FC | 	wrbyte	#1, local01
2871c                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2871c                 | ' 			fs->wflag = 1;
2871c                 | ' 			break;
2871c     70 00 90 FD | 	jmp	#LR__4116
28720                 | LR__4115
28720     0F 13 02 F6 | 	mov	arg01, local01
28724     10 2D 02 F6 | 	mov	local08, local02
28728     07 2C 46 F0 | 	shr	local08, #7
2872c     24 1E 06 F1 | 	add	local01, #36
28730     0F 15 02 FB | 	rdlong	arg02, local01
28734     24 1E 86 F1 | 	sub	local01, #36
28738     16 15 02 F1 | 	add	arg02, local08
2873c     F4 FA BF FD | 	call	#_fatfs_cc_move_window
28740     FD 24 0A F6 | 	mov	local04, result1 wz
28744     48 00 90 5D |  if_ne	jmp	#LR__4116
28748     7C 22 06 F4 | 	bitl	local03, #124
2874c     34 1E 06 F1 | 	add	local01, #52
28750     10 2D 02 F6 | 	mov	local08, local02
28754     02 2C 66 F0 | 	shl	local08, #2
28758     FF 2D 06 F5 | 	and	local08, #511
2875c     0F 13 02 F6 | 	mov	arg01, local01
28760     16 13 02 F1 | 	add	arg01, local08
28764                 | ' {
28764                 | ' 
28764                 | ' 	return *((DWORD*)ptr);
28764     09 2D 02 FB | 	rdlong	local08, arg01
28768     00 00 78 FF 
2876c     00 2C 06 F5 | 	and	local08, ##-268435456
28770     16 23 42 F5 | 	or	local03, local08
28774     0F 13 02 F6 | 	mov	arg01, local01
28778     02 20 66 F0 | 	shl	local02, #2
2877c     FF 21 06 F5 | 	and	local02, #511
28780     10 13 02 F1 | 	add	arg01, local02
28784     09 23 62 FC | 	wrlong	local03, arg01
28788     31 1E 86 F1 | 	sub	local01, #49
2878c     0F 03 48 FC | 	wrbyte	#1, local01
28790                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
28790                 | ' 			}
28790                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
28790                 | ' 			fs->wflag = 1;
28790                 | ' 			break;
28790                 | LR__4116
28790                 | LR__4117
28790                 | ' 		}
28790                 | ' 	}
28790                 | ' 	return res;
28790     12 FB 01 F6 | 	mov	result1, local04
28794     A7 F0 03 F6 | 	mov	ptra, fp
28798     B2 00 A0 FD | 	call	#popregs_
2879c                 | _fatfs_cc_put_fat_ret
2879c     2D 00 64 FD | 	ret
287a0                 | 
287a0                 | _fatfs_cc_remove_chain
287a0     05 4A 05 F6 | 	mov	COUNT_, #5
287a4     A8 00 A0 FD | 	call	#pushregs_
287a8     09 1F 02 F6 | 	mov	local01, arg01
287ac     0A 21 02 F6 | 	mov	local02, arg02
287b0     0B 23 02 F6 | 	mov	local03, arg03
287b4     0F 25 02 FB | 	rdlong	local04, local01
287b8     02 20 16 F2 | 	cmp	local02, #2 wc
287bc     14 00 90 CD |  if_b	jmp	#LR__4120
287c0     18 24 06 F1 | 	add	local04, #24
287c4     12 FB 01 FB | 	rdlong	result1, local04
287c8     18 24 86 F1 | 	sub	local04, #24
287cc     FD 20 12 F2 | 	cmp	local02, result1 wc
287d0     08 00 90 CD |  if_b	jmp	#LR__4121
287d4                 | LR__4120
287d4     02 FA 05 F6 | 	mov	result1, #2
287d8     CC 00 90 FD | 	jmp	#LR__4126
287dc                 | LR__4121
287dc     00 22 0E F2 | 	cmp	local03, #0 wz
287e0     18 00 90 AD |  if_e	jmp	#LR__4122
287e4     11 15 02 F6 | 	mov	arg02, local03
287e8     12 13 02 F6 | 	mov	arg01, local04
287ec     01 16 66 F6 | 	neg	arg03, #1
287f0     9C FD BF FD | 	call	#_fatfs_cc_put_fat
287f4     00 FA 0D F2 | 	cmp	result1, #0 wz
287f8     AC 00 90 5D |  if_ne	jmp	#LR__4126
287fc                 | LR__4122
287fc                 | ' 	}
287fc                 | ' 
287fc                 | ' 
287fc                 | ' 	do {
287fc                 | LR__4123
287fc     10 15 02 F6 | 	mov	arg02, local02
28800     0F 13 02 F6 | 	mov	arg01, local01
28804     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
28808     FD 26 0A F6 | 	mov	local05, result1 wz
2880c     94 00 90 AD |  if_e	jmp	#LR__4125
28810     01 26 0E F2 | 	cmp	local05, #1 wz
28814     02 FA 05 A6 |  if_e	mov	result1, #2
28818     8C 00 90 AD |  if_e	jmp	#LR__4126
2881c     FF FF 7F FF 
28820     FF 27 0E F2 | 	cmp	local05, ##-1 wz
28824     01 FA 05 A6 |  if_e	mov	result1, #1
28828     7C 00 90 AD |  if_e	jmp	#LR__4126
2882c     10 15 02 F6 | 	mov	arg02, local02
28830     12 13 02 F6 | 	mov	arg01, local04
28834     00 16 06 F6 | 	mov	arg03, #0
28838     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2883c     FD 22 0A F6 | 	mov	local03, result1 wz
28840     11 FB 01 56 |  if_ne	mov	result1, local03
28844     60 00 90 5D |  if_ne	jmp	#LR__4126
28848     18 24 06 F1 | 	add	local04, #24
2884c     12 23 02 FB | 	rdlong	local03, local04
28850     02 22 86 F1 | 	sub	local03, #2
28854     04 24 86 F1 | 	sub	local04, #4
28858     12 21 02 FB | 	rdlong	local02, local04
2885c     14 24 86 F1 | 	sub	local04, #20
28860     11 21 12 F2 | 	cmp	local02, local03 wc
28864     24 00 90 3D |  if_ae	jmp	#LR__4124
28868     14 24 06 F1 | 	add	local04, #20
2886c     12 23 02 FB | 	rdlong	local03, local04
28870     01 22 06 F1 | 	add	local03, #1
28874     12 23 62 FC | 	wrlong	local03, local04
28878     10 24 86 F1 | 	sub	local04, #16
2887c     12 23 C2 FA | 	rdbyte	local03, local04
28880     01 22 46 F5 | 	or	local03, #1
28884     12 23 42 FC | 	wrbyte	local03, local04
28888     04 24 86 F1 | 	sub	local04, #4
2888c                 | LR__4124
2888c     13 21 02 F6 | 	mov	local02, local05
28890     18 24 06 F1 | 	add	local04, #24
28894     12 27 02 FB | 	rdlong	local05, local04
28898     18 24 86 F1 | 	sub	local04, #24
2889c     13 21 12 F2 | 	cmp	local02, local05 wc
288a0     58 FF 9F CD |  if_b	jmp	#LR__4123
288a4                 | LR__4125
288a4                 | ' #line 1500 "ff.c"
288a4                 | ' 	return FR_OK;
288a4     00 FA 05 F6 | 	mov	result1, #0
288a8                 | LR__4126
288a8     A7 F0 03 F6 | 	mov	ptra, fp
288ac     B2 00 A0 FD | 	call	#popregs_
288b0                 | _fatfs_cc_remove_chain_ret
288b0     2D 00 64 FD | 	ret
288b4                 | 
288b4                 | _fatfs_cc_create_chain
288b4     09 4A 05 F6 | 	mov	COUNT_, #9
288b8     A8 00 A0 FD | 	call	#pushregs_
288bc     09 1F 02 F6 | 	mov	local01, arg01
288c0     0A 21 0A F6 | 	mov	local02, arg02 wz
288c4     0F 23 02 FB | 	rdlong	local03, local01
288c8     28 00 90 5D |  if_ne	jmp	#LR__4130
288cc     10 22 06 F1 | 	add	local03, #16
288d0     11 25 0A FB | 	rdlong	local04, local03 wz
288d4     10 22 86 F1 | 	sub	local03, #16
288d8     18 22 06 51 |  if_ne	add	local03, #24
288dc     11 27 02 5B |  if_ne	rdlong	local05, local03
288e0     18 22 86 51 |  if_ne	sub	local03, #24
288e4     13 25 12 52 |  if_ne	cmp	local04, local05 wc
288e8     50 00 90 4D |  if_c_and_nz	jmp	#LR__4131
288ec     01 24 06 F6 | 	mov	local04, #1
288f0     48 00 90 FD | 	jmp	#LR__4131
288f4                 | LR__4130
288f4     10 15 02 F6 | 	mov	arg02, local02
288f8     0F 13 02 F6 | 	mov	arg01, local01
288fc     EC FA BF FD | 	call	#_fatfs_cc_get_fat
28900     FD 24 02 F6 | 	mov	local04, result1
28904     02 24 16 F2 | 	cmp	local04, #2 wc
28908     01 FA 05 C6 |  if_b	mov	result1, #1
2890c     BC 01 90 CD |  if_b	jmp	#LR__4141
28910     FF FF 7F FF 
28914     FF 25 0E F2 | 	cmp	local04, ##-1 wz
28918     12 FB 01 A6 |  if_e	mov	result1, local04
2891c     AC 01 90 AD |  if_e	jmp	#LR__4141
28920     18 22 06 F1 | 	add	local03, #24
28924     11 27 02 FB | 	rdlong	local05, local03
28928     18 22 86 F1 | 	sub	local03, #24
2892c     13 25 12 F2 | 	cmp	local04, local05 wc
28930     12 FB 01 C6 |  if_b	mov	result1, local04
28934     94 01 90 CD |  if_b	jmp	#LR__4141
28938     10 25 02 F6 | 	mov	local04, local02
2893c                 | LR__4131
2893c     14 22 06 F1 | 	add	local03, #20
28940     11 27 0A FB | 	rdlong	local05, local03 wz
28944     14 22 86 F1 | 	sub	local03, #20
28948     00 FA 05 A6 |  if_e	mov	result1, #0
2894c     7C 01 90 AD |  if_e	jmp	#LR__4141
28950     00 28 06 F6 | 	mov	local06, #0
28954     10 25 0A F2 | 	cmp	local04, local02 wz
28958     74 00 90 5D |  if_ne	jmp	#LR__4134
2895c     12 29 02 F6 | 	mov	local06, local04
28960     01 28 06 F1 | 	add	local06, #1
28964     18 22 06 F1 | 	add	local03, #24
28968     11 27 02 FB | 	rdlong	local05, local03
2896c     18 22 86 F1 | 	sub	local03, #24
28970     13 29 12 F2 | 	cmp	local06, local05 wc
28974     02 28 06 36 |  if_ae	mov	local06, #2
28978     14 15 02 F6 | 	mov	arg02, local06
2897c     0F 13 02 F6 | 	mov	arg01, local01
28980     68 FA BF FD | 	call	#_fatfs_cc_get_fat
28984     FD 26 02 F6 | 	mov	local05, result1
28988     01 26 0E F2 | 	cmp	local05, #1 wz
2898c     FF FF 7F 5F 
28990     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
28994     13 FB 01 A6 |  if_e	mov	result1, local05
28998     30 01 90 AD |  if_e	jmp	#LR__4141
2899c     00 26 0E F2 | 	cmp	local05, #0 wz
289a0     2C 00 90 AD |  if_e	jmp	#LR__4133
289a4     10 22 06 F1 | 	add	local03, #16
289a8     11 2B 02 FB | 	rdlong	local07, local03
289ac     10 22 86 F1 | 	sub	local03, #16
289b0     02 2A 16 F2 | 	cmp	local07, #2 wc
289b4     14 00 90 CD |  if_b	jmp	#LR__4132
289b8     18 22 06 F1 | 	add	local03, #24
289bc     11 27 02 FB | 	rdlong	local05, local03
289c0     18 22 86 F1 | 	sub	local03, #24
289c4     13 2B 12 F2 | 	cmp	local07, local05 wc
289c8     15 25 02 C6 |  if_b	mov	local04, local07
289cc                 | LR__4132
289cc     00 28 06 F6 | 	mov	local06, #0
289d0                 | LR__4133
289d0                 | LR__4134
289d0     00 28 0E F2 | 	cmp	local06, #0 wz
289d4     60 00 90 5D |  if_ne	jmp	#LR__4137
289d8     12 29 02 F6 | 	mov	local06, local04
289dc                 | ' 			ncl = scl;
289dc                 | ' 			for (;;) {
289dc                 | LR__4135
289dc     01 28 06 F1 | 	add	local06, #1
289e0     18 22 06 F1 | 	add	local03, #24
289e4     11 27 02 FB | 	rdlong	local05, local03
289e8     18 22 86 F1 | 	sub	local03, #24
289ec     13 29 12 F2 | 	cmp	local06, local05 wc
289f0     02 28 06 36 |  if_ae	mov	local06, #2
289f4     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
289f8     00 FA 05 16 |  if_a	mov	result1, #0
289fc     CC 00 90 1D |  if_a	jmp	#LR__4141
28a00     14 15 02 F6 | 	mov	arg02, local06
28a04     0F 13 02 F6 | 	mov	arg01, local01
28a08     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
28a0c     FD 2A 0A F6 | 	mov	local07, result1 wz
28a10     24 00 90 AD |  if_e	jmp	#LR__4136
28a14     01 2A 0E F2 | 	cmp	local07, #1 wz
28a18     FF FF 7F 5F 
28a1c     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
28a20     15 FB 01 A6 |  if_e	mov	result1, local07
28a24     A4 00 90 AD |  if_e	jmp	#LR__4141
28a28     12 29 0A F2 | 	cmp	local06, local04 wz
28a2c     00 FA 05 A6 |  if_e	mov	result1, #0
28a30     98 00 90 AD |  if_e	jmp	#LR__4141
28a34     A4 FF 9F FD | 	jmp	#LR__4135
28a38                 | LR__4136
28a38                 | LR__4137
28a38     11 13 02 F6 | 	mov	arg01, local03
28a3c     14 15 02 F6 | 	mov	arg02, local06
28a40     01 16 66 F6 | 	neg	arg03, #1
28a44     48 FB BF FD | 	call	#_fatfs_cc_put_fat
28a48     FD 2C 0A F6 | 	mov	local08, result1 wz
28a4c     1C 00 90 5D |  if_ne	jmp	#LR__4138
28a50     00 20 0E F2 | 	cmp	local02, #0 wz
28a54     14 00 90 AD |  if_e	jmp	#LR__4138
28a58     11 13 02 F6 | 	mov	arg01, local03
28a5c     10 15 02 F6 | 	mov	arg02, local02
28a60     14 17 02 F6 | 	mov	arg03, local06
28a64     28 FB BF FD | 	call	#_fatfs_cc_put_fat
28a68     FD 2C 02 F6 | 	mov	local08, result1
28a6c                 | LR__4138
28a6c     00 2C 0E F2 | 	cmp	local08, #0 wz
28a70     4C 00 90 5D |  if_ne	jmp	#LR__4139
28a74     10 22 06 F1 | 	add	local03, #16
28a78     11 29 62 FC | 	wrlong	local06, local03
28a7c     08 22 06 F1 | 	add	local03, #8
28a80     11 27 02 FB | 	rdlong	local05, local03
28a84     02 26 86 F1 | 	sub	local05, #2
28a88     04 22 86 F1 | 	sub	local03, #4
28a8c     11 2F 02 FB | 	rdlong	local09, local03
28a90     14 22 86 F1 | 	sub	local03, #20
28a94     13 2F 1A F2 | 	cmp	local09, local05 wcz
28a98     14 22 06 E1 |  if_be	add	local03, #20
28a9c     11 2F 02 EB |  if_be	rdlong	local09, local03
28aa0     01 2E 86 E1 |  if_be	sub	local09, #1
28aa4     11 2F 62 EC |  if_be	wrlong	local09, local03
28aa8     14 22 86 E1 |  if_be	sub	local03, #20
28aac     04 22 06 F1 | 	add	local03, #4
28ab0     11 27 C2 FA | 	rdbyte	local05, local03
28ab4     01 26 46 F5 | 	or	local05, #1
28ab8     11 27 42 FC | 	wrbyte	local05, local03
28abc     08 00 90 FD | 	jmp	#LR__4140
28ac0                 | LR__4139
28ac0     01 2C 0E F2 | 	cmp	local08, #1 wz
28ac4     01 28 C6 F6 | 	negz	local06, #1
28ac8                 | LR__4140
28ac8                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
28ac8                 | ' 	}
28ac8                 | ' 
28ac8                 | ' 	return ncl;
28ac8     14 FB 01 F6 | 	mov	result1, local06
28acc                 | LR__4141
28acc     A7 F0 03 F6 | 	mov	ptra, fp
28ad0     B2 00 A0 FD | 	call	#popregs_
28ad4                 | _fatfs_cc_create_chain_ret
28ad4     2D 00 64 FD | 	ret
28ad8                 | 
28ad8                 | _fatfs_cc_dir_clear
28ad8     06 4A 05 F6 | 	mov	COUNT_, #6
28adc     A8 00 A0 FD | 	call	#pushregs_
28ae0     09 1F 02 F6 | 	mov	local01, arg01
28ae4     0A 21 02 F6 | 	mov	local02, arg02
28ae8     0F 13 02 F6 | 	mov	arg01, local01
28aec     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
28af0     00 FA 0D F2 | 	cmp	result1, #0 wz
28af4     01 FA 05 56 |  if_ne	mov	result1, #1
28af8     90 00 90 5D |  if_ne	jmp	#LR__4152
28afc     0F 13 02 F6 | 	mov	arg01, local01
28b00     10 15 02 F6 | 	mov	arg02, local02
28b04     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
28b08     FD 22 02 F6 | 	mov	local03, result1
28b0c     30 1E 06 F1 | 	add	local01, #48
28b10     0F 23 62 FC | 	wrlong	local03, local01
28b14     04 1E 06 F1 | 	add	local01, #4
28b18     0F 13 02 F6 | 	mov	arg01, local01
28b1c     00 14 06 F6 | 	mov	arg02, #0
28b20     09 16 C6 F9 | 	decod	arg03, #9
28b24     98 00 A0 FD | 	call	#\builtin_bytefill_
28b28     0F 25 02 F6 | 	mov	local04, local01
28b2c                 | ' #line 1667 "ff.c"
28b2c                 | ' 	{
28b2c                 | ' 		ibuf = fs->win; szb = 1;
28b2c                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
28b2c     00 26 06 F6 | 	mov	local05, #0
28b30     34 1E 86 F1 | 	sub	local01, #52
28b34                 | LR__4150
28b34     0A 1E 06 F1 | 	add	local01, #10
28b38     0F 29 E2 FA | 	rdword	local06, local01
28b3c     0A 1E 86 F1 | 	sub	local01, #10
28b40     14 27 12 F2 | 	cmp	local05, local06 wc
28b44     2C 00 90 3D |  if_ae	jmp	#LR__4151
28b48     01 1E 06 F1 | 	add	local01, #1
28b4c     0F 13 C2 FA | 	rdbyte	arg01, local01
28b50     01 1E 86 F1 | 	sub	local01, #1
28b54     12 15 02 F6 | 	mov	arg02, local04
28b58     11 17 02 F6 | 	mov	arg03, local03
28b5c     13 17 02 F1 | 	add	arg03, local05
28b60     01 18 06 F6 | 	mov	arg04, #1
28b64     9C EF BF FD | 	call	#_fatfs_cc_disk_write
28b68     00 FA 0D F2 | 	cmp	result1, #0 wz
28b6c     01 26 06 A1 |  if_e	add	local05, #1
28b70     C0 FF 9F AD |  if_e	jmp	#LR__4150
28b74                 | LR__4151
28b74                 | ' 	}
28b74                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
28b74     0A 1E 06 F1 | 	add	local01, #10
28b78     0F 25 E2 FA | 	rdword	local04, local01
28b7c     12 27 0A F2 | 	cmp	local05, local04 wz
28b80     00 28 06 A6 |  if_e	mov	local06, #0
28b84     01 28 06 56 |  if_ne	mov	local06, #1
28b88     14 FB 01 F6 | 	mov	result1, local06
28b8c                 | LR__4152
28b8c     A7 F0 03 F6 | 	mov	ptra, fp
28b90     B2 00 A0 FD | 	call	#popregs_
28b94                 | _fatfs_cc_dir_clear_ret
28b94     2D 00 64 FD | 	ret
28b98                 | 
28b98                 | _fatfs_cc_dir_sdi
28b98     06 4A 05 F6 | 	mov	COUNT_, #6
28b9c     A8 00 A0 FD | 	call	#pushregs_
28ba0     09 1F 02 F6 | 	mov	local01, arg01
28ba4     0A 21 02 F6 | 	mov	local02, arg02
28ba8     0F 23 02 FB | 	rdlong	local03, local01
28bac     00 10 00 FF 
28bb0     00 20 16 F2 | 	cmp	local02, ##2097152 wc
28bb4     1F 20 CE C7 |  if_b	test	local02, #31 wz
28bb8                 | ' 		return FR_INT_ERR;
28bb8     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
28bbc     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4166
28bc0     10 1E 06 F1 | 	add	local01, #16
28bc4     0F 21 62 FC | 	wrlong	local02, local01
28bc8     08 1E 86 F1 | 	sub	local01, #8
28bcc     0F 25 0A FB | 	rdlong	local04, local01 wz
28bd0     08 1E 86 F1 | 	sub	local01, #8
28bd4     11 27 C2 AA |  if_e	rdbyte	local05, local03
28bd8     03 26 16 A2 |  if_e	cmp	local05, #3 wc
28bdc     28 22 06 21 |  if_nc_and_z	add	local03, #40
28be0     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
28be4     28 22 86 21 |  if_nc_and_z	sub	local03, #40
28be8     00 24 0E F2 | 	cmp	local04, #0 wz
28bec     3C 00 90 5D |  if_ne	jmp	#LR__4160
28bf0     10 27 02 F6 | 	mov	local05, local02
28bf4     05 26 46 F0 | 	shr	local05, #5
28bf8     08 22 06 F1 | 	add	local03, #8
28bfc     11 15 E2 FA | 	rdword	arg02, local03
28c00     08 22 86 F1 | 	sub	local03, #8
28c04     0A 27 12 F2 | 	cmp	local05, arg02 wc
28c08     02 FA 05 36 |  if_ae	mov	result1, #2
28c0c     E4 00 90 3D |  if_ae	jmp	#LR__4166
28c10     28 22 06 F1 | 	add	local03, #40
28c14     11 27 02 FB | 	rdlong	local05, local03
28c18     28 22 86 F1 | 	sub	local03, #40
28c1c     18 1E 06 F1 | 	add	local01, #24
28c20     0F 27 62 FC | 	wrlong	local05, local01
28c24     18 1E 86 F1 | 	sub	local01, #24
28c28     7C 00 90 FD | 	jmp	#LR__4165
28c2c                 | LR__4160
28c2c     0A 22 06 F1 | 	add	local03, #10
28c30     11 29 E2 FA | 	rdword	local06, local03
28c34     0A 22 86 F1 | 	sub	local03, #10
28c38     09 28 66 F0 | 	shl	local06, #9
28c3c                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
28c3c                 | ' 		while (ofs >= csz) {
28c3c                 | LR__4161
28c3c     14 21 12 F2 | 	cmp	local02, local06 wc
28c40     4C 00 90 CD |  if_b	jmp	#LR__4164
28c44     0F 13 02 F6 | 	mov	arg01, local01
28c48     12 15 02 F6 | 	mov	arg02, local04
28c4c     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
28c50     FD 24 02 F6 | 	mov	local04, result1
28c54     FF FF 7F FF 
28c58     FF 25 0E F2 | 	cmp	local04, ##-1 wz
28c5c     01 FA 05 A6 |  if_e	mov	result1, #1
28c60     90 00 90 AD |  if_e	jmp	#LR__4166
28c64     02 24 16 F2 | 	cmp	local04, #2 wc
28c68     14 00 90 CD |  if_b	jmp	#LR__4162
28c6c     18 22 06 F1 | 	add	local03, #24
28c70     11 27 02 FB | 	rdlong	local05, local03
28c74     18 22 86 F1 | 	sub	local03, #24
28c78     13 25 12 F2 | 	cmp	local04, local05 wc
28c7c     08 00 90 CD |  if_b	jmp	#LR__4163
28c80                 | LR__4162
28c80     02 FA 05 F6 | 	mov	result1, #2
28c84     6C 00 90 FD | 	jmp	#LR__4166
28c88                 | LR__4163
28c88     14 21 82 F1 | 	sub	local02, local06
28c8c     AC FF 9F FD | 	jmp	#LR__4161
28c90                 | LR__4164
28c90     11 13 02 F6 | 	mov	arg01, local03
28c94     12 15 02 F6 | 	mov	arg02, local04
28c98     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
28c9c     18 1E 06 F1 | 	add	local01, #24
28ca0     0F FB 61 FC | 	wrlong	result1, local01
28ca4     18 1E 86 F1 | 	sub	local01, #24
28ca8                 | LR__4165
28ca8     14 1E 06 F1 | 	add	local01, #20
28cac     0F 25 62 FC | 	wrlong	local04, local01
28cb0     04 1E 06 F1 | 	add	local01, #4
28cb4     0F 27 0A FB | 	rdlong	local05, local01 wz
28cb8     18 1E 86 F1 | 	sub	local01, #24
28cbc     02 FA 05 A6 |  if_e	mov	result1, #2
28cc0     30 00 90 AD |  if_e	jmp	#LR__4166
28cc4     10 29 02 F6 | 	mov	local06, local02
28cc8     09 28 46 F0 | 	shr	local06, #9
28ccc     18 1E 06 F1 | 	add	local01, #24
28cd0     0F 27 02 FB | 	rdlong	local05, local01
28cd4     14 27 02 F1 | 	add	local05, local06
28cd8     0F 27 62 FC | 	wrlong	local05, local01
28cdc     34 22 06 F1 | 	add	local03, #52
28ce0     FF 21 06 F5 | 	and	local02, #511
28ce4     10 23 02 F1 | 	add	local03, local02
28ce8     04 1E 06 F1 | 	add	local01, #4
28cec     0F 23 62 FC | 	wrlong	local03, local01
28cf0                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
28cf0                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
28cf0                 | ' 
28cf0                 | ' 	return FR_OK;
28cf0     00 FA 05 F6 | 	mov	result1, #0
28cf4                 | LR__4166
28cf4     A7 F0 03 F6 | 	mov	ptra, fp
28cf8     B2 00 A0 FD | 	call	#popregs_
28cfc                 | _fatfs_cc_dir_sdi_ret
28cfc     2D 00 64 FD | 	ret
28d00                 | 
28d00                 | _fatfs_cc_dir_next
28d00     05 4A 05 F6 | 	mov	COUNT_, #5
28d04     A8 00 A0 FD | 	call	#pushregs_
28d08     09 1F 02 F6 | 	mov	local01, arg01
28d0c     0A 21 02 F6 | 	mov	local02, arg02
28d10     0F 23 02 FB | 	rdlong	local03, local01
28d14     10 1E 06 F1 | 	add	local01, #16
28d18     0F 25 02 FB | 	rdlong	local04, local01
28d1c     10 1E 86 F1 | 	sub	local01, #16
28d20     20 24 06 F1 | 	add	local04, #32
28d24     00 10 00 FF 
28d28     00 24 16 F2 | 	cmp	local04, ##2097152 wc
28d2c     18 1E 06 31 |  if_ae	add	local01, #24
28d30     0F 01 68 3C |  if_ae	wrlong	#0, local01
28d34     18 1E 86 31 |  if_ae	sub	local01, #24
28d38     18 1E 06 F1 | 	add	local01, #24
28d3c     0F 15 0A FB | 	rdlong	arg02, local01 wz
28d40     18 1E 86 F1 | 	sub	local01, #24
28d44     04 FA 05 A6 |  if_e	mov	result1, #4
28d48     64 01 90 AD |  if_e	jmp	#LR__4175
28d4c     FF 25 CE F7 | 	test	local04, #511 wz
28d50     3C 01 90 5D |  if_ne	jmp	#LR__4174
28d54     18 1E 06 F1 | 	add	local01, #24
28d58     0F 15 02 FB | 	rdlong	arg02, local01
28d5c     01 14 06 F1 | 	add	arg02, #1
28d60     0F 15 62 FC | 	wrlong	arg02, local01
28d64     04 1E 86 F1 | 	sub	local01, #4
28d68     0F 15 0A FB | 	rdlong	arg02, local01 wz
28d6c     14 1E 86 F1 | 	sub	local01, #20
28d70     2C 00 90 5D |  if_ne	jmp	#LR__4170
28d74     12 15 02 F6 | 	mov	arg02, local04
28d78     05 14 46 F0 | 	shr	arg02, #5
28d7c     08 22 06 F1 | 	add	local03, #8
28d80     11 21 E2 FA | 	rdword	local02, local03
28d84     08 22 86 F1 | 	sub	local03, #8
28d88     10 15 12 F2 | 	cmp	arg02, local02 wc
28d8c     18 1E 06 31 |  if_ae	add	local01, #24
28d90     0F 01 68 3C |  if_ae	wrlong	#0, local01
28d94                 | ' 				dp->sect = 0; return FR_NO_FILE;
28d94     04 FA 05 36 |  if_ae	mov	result1, #4
28d98     14 01 90 3D |  if_ae	jmp	#LR__4175
28d9c     F0 00 90 FD | 	jmp	#LR__4173
28da0                 | LR__4170
28da0     12 13 02 F6 | 	mov	arg01, local04
28da4     09 12 46 F0 | 	shr	arg01, #9
28da8     0A 22 06 F1 | 	add	local03, #10
28dac     11 15 E2 FA | 	rdword	arg02, local03
28db0     0A 22 86 F1 | 	sub	local03, #10
28db4     01 14 86 F1 | 	sub	arg02, #1
28db8     0A 13 CA F7 | 	test	arg01, arg02 wz
28dbc     D0 00 90 5D |  if_ne	jmp	#LR__4172
28dc0     0F 13 02 F6 | 	mov	arg01, local01
28dc4     14 1E 06 F1 | 	add	local01, #20
28dc8     0F 15 02 FB | 	rdlong	arg02, local01
28dcc     14 1E 86 F1 | 	sub	local01, #20
28dd0     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
28dd4     FD 26 02 F6 | 	mov	local05, result1
28dd8     02 26 16 F2 | 	cmp	local05, #2 wc
28ddc     02 FA 05 C6 |  if_b	mov	result1, #2
28de0     CC 00 90 CD |  if_b	jmp	#LR__4175
28de4     FF FF 7F FF 
28de8     FF 27 0E F2 | 	cmp	local05, ##-1 wz
28dec     01 FA 05 A6 |  if_e	mov	result1, #1
28df0     BC 00 90 AD |  if_e	jmp	#LR__4175
28df4     18 22 06 F1 | 	add	local03, #24
28df8     11 15 02 FB | 	rdlong	arg02, local03
28dfc     18 22 86 F1 | 	sub	local03, #24
28e00     0A 27 12 F2 | 	cmp	local05, arg02 wc
28e04     68 00 90 CD |  if_b	jmp	#LR__4171
28e08     00 20 0E F2 | 	cmp	local02, #0 wz
28e0c     18 1E 06 A1 |  if_e	add	local01, #24
28e10     0F 01 68 AC |  if_e	wrlong	#0, local01
28e14                 | ' 						dp->sect = 0; return FR_NO_FILE;
28e14     04 FA 05 A6 |  if_e	mov	result1, #4
28e18     94 00 90 AD |  if_e	jmp	#LR__4175
28e1c     0F 13 02 F6 | 	mov	arg01, local01
28e20     14 1E 06 F1 | 	add	local01, #20
28e24     0F 15 02 FB | 	rdlong	arg02, local01
28e28     14 1E 86 F1 | 	sub	local01, #20
28e2c     84 FA BF FD | 	call	#_fatfs_cc_create_chain
28e30     FD 26 0A F6 | 	mov	local05, result1 wz
28e34     07 FA 05 A6 |  if_e	mov	result1, #7
28e38     74 00 90 AD |  if_e	jmp	#LR__4175
28e3c     01 26 0E F2 | 	cmp	local05, #1 wz
28e40     02 FA 05 A6 |  if_e	mov	result1, #2
28e44     68 00 90 AD |  if_e	jmp	#LR__4175
28e48     FF FF 7F FF 
28e4c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
28e50     01 FA 05 A6 |  if_e	mov	result1, #1
28e54     58 00 90 AD |  if_e	jmp	#LR__4175
28e58     13 15 02 F6 | 	mov	arg02, local05
28e5c     11 13 02 F6 | 	mov	arg01, local03
28e60     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
28e64     00 FA 0D F2 | 	cmp	result1, #0 wz
28e68     01 FA 05 56 |  if_ne	mov	result1, #1
28e6c     40 00 90 5D |  if_ne	jmp	#LR__4175
28e70                 | LR__4171
28e70     14 1E 06 F1 | 	add	local01, #20
28e74     0F 27 62 FC | 	wrlong	local05, local01
28e78     11 13 02 F6 | 	mov	arg01, local03
28e7c     13 15 02 F6 | 	mov	arg02, local05
28e80     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
28e84     04 1E 06 F1 | 	add	local01, #4
28e88     0F FB 61 FC | 	wrlong	result1, local01
28e8c     18 1E 86 F1 | 	sub	local01, #24
28e90                 | LR__4172
28e90                 | LR__4173
28e90                 | LR__4174
28e90     10 1E 06 F1 | 	add	local01, #16
28e94     0F 25 62 FC | 	wrlong	local04, local01
28e98     34 22 06 F1 | 	add	local03, #52
28e9c     FF 25 06 F5 | 	and	local04, #511
28ea0     12 23 02 F1 | 	add	local03, local04
28ea4     0C 1E 06 F1 | 	add	local01, #12
28ea8     0F 23 62 FC | 	wrlong	local03, local01
28eac                 | ' #line 1771 "ff.c"
28eac                 | ' 				}
28eac                 | ' 				dp->clust = clst;
28eac                 | ' 				dp->sect = clst2sect(fs, clst);
28eac                 | ' 			}
28eac                 | ' 		}
28eac                 | ' 	}
28eac                 | ' 	dp->dptr = ofs;
28eac                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
28eac                 | ' 
28eac                 | ' 	return FR_OK;
28eac     00 FA 05 F6 | 	mov	result1, #0
28eb0                 | LR__4175
28eb0     A7 F0 03 F6 | 	mov	ptra, fp
28eb4     B2 00 A0 FD | 	call	#popregs_
28eb8                 | _fatfs_cc_dir_next_ret
28eb8     2D 00 64 FD | 	ret
28ebc                 | 
28ebc                 | _fatfs_cc_dir_alloc
28ebc     08 4A 05 F6 | 	mov	COUNT_, #8
28ec0     A8 00 A0 FD | 	call	#pushregs_
28ec4     09 1F 02 F6 | 	mov	local01, arg01
28ec8     0A 21 02 F6 | 	mov	local02, arg02
28ecc     0F 23 02 FB | 	rdlong	local03, local01
28ed0     0F 13 02 F6 | 	mov	arg01, local01
28ed4     00 14 06 F6 | 	mov	arg02, #0
28ed8     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
28edc     FD 24 0A F6 | 	mov	local04, result1 wz
28ee0     70 00 90 5D |  if_ne	jmp	#LR__4184
28ee4     00 26 06 F6 | 	mov	local05, #0
28ee8                 | ' 		n = 0;
28ee8                 | ' 		do {
28ee8                 | LR__4180
28ee8     18 1E 06 F1 | 	add	local01, #24
28eec     0F 15 02 FB | 	rdlong	arg02, local01
28ef0     18 1E 86 F1 | 	sub	local01, #24
28ef4     11 13 02 F6 | 	mov	arg01, local03
28ef8     38 F3 BF FD | 	call	#_fatfs_cc_move_window
28efc     FD 24 0A F6 | 	mov	local04, result1 wz
28f00     50 00 90 5D |  if_ne	jmp	#LR__4183
28f04     1C 1E 06 F1 | 	add	local01, #28
28f08     0F 29 02 FB | 	rdlong	local06, local01
28f0c     1C 1E 86 F1 | 	sub	local01, #28
28f10     14 29 C2 FA | 	rdbyte	local06, local06
28f14     E5 28 0E F2 | 	cmp	local06, #229 wz
28f18     1C 1E 06 51 |  if_ne	add	local01, #28
28f1c     0F 2B 02 5B |  if_ne	rdlong	local07, local01
28f20     1C 1E 86 51 |  if_ne	sub	local01, #28
28f24     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
28f28     10 00 90 5D |  if_ne	jmp	#LR__4181
28f2c     01 26 06 F1 | 	add	local05, #1
28f30     10 27 0A F2 | 	cmp	local05, local02 wz
28f34     1C 00 90 AD |  if_e	jmp	#LR__4183
28f38     04 00 90 FD | 	jmp	#LR__4182
28f3c                 | LR__4181
28f3c     00 26 06 F6 | 	mov	local05, #0
28f40                 | LR__4182
28f40     0F 13 02 F6 | 	mov	arg01, local01
28f44     01 14 06 F6 | 	mov	arg02, #1
28f48     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
28f4c     FD 24 0A F6 | 	mov	local04, result1 wz
28f50     94 FF 9F AD |  if_e	jmp	#LR__4180
28f54                 | LR__4183
28f54                 | LR__4184
28f54     04 24 0E F2 | 	cmp	local04, #4 wz
28f58     07 24 06 A6 |  if_e	mov	local04, #7
28f5c                 | ' 	return res;
28f5c     12 FB 01 F6 | 	mov	result1, local04
28f60     A7 F0 03 F6 | 	mov	ptra, fp
28f64     B2 00 A0 FD | 	call	#popregs_
28f68                 | _fatfs_cc_dir_alloc_ret
28f68     2D 00 64 FD | 	ret
28f6c                 | 
28f6c                 | _fatfs_cc_ld_clust
28f6c     09 01 02 F6 | 	mov	_var01, arg01
28f70     0A 13 02 F6 | 	mov	arg01, arg02
28f74     1A 12 06 F1 | 	add	arg01, #26
28f78                 | ' {
28f78                 | ' 
28f78                 | ' 	return *((WORD*)ptr);
28f78     09 FB E1 FA | 	rdword	result1, arg01
28f7c     FD 12 32 F9 | 	getword	arg01, result1, #0
28f80     00 01 C2 FA | 	rdbyte	_var01, _var01
28f84     03 00 0E F2 | 	cmp	_var01, #3 wz
28f88     14 14 06 A1 |  if_e	add	arg02, #20
28f8c                 | ' {
28f8c                 | ' 
28f8c                 | ' 	return *((WORD*)ptr);
28f8c     0A FB E1 AA |  if_e	rdword	result1, arg02
28f90     10 FA 65 A0 |  if_e	shl	result1, #16
28f94     FD 12 42 A5 |  if_e	or	arg01, result1
28f98                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
28f98                 | ' 	}
28f98                 | ' 
28f98                 | ' 	return cl;
28f98     09 FB 01 F6 | 	mov	result1, arg01
28f9c                 | _fatfs_cc_ld_clust_ret
28f9c     2D 00 64 FD | 	ret
28fa0                 | 
28fa0                 | _fatfs_cc_st_clust
28fa0     09 01 02 F6 | 	mov	_var01, arg01
28fa4     0A 13 02 F6 | 	mov	arg01, arg02
28fa8     1A 12 06 F1 | 	add	arg01, #26
28fac     09 17 52 FC | 	wrword	arg03, arg01
28fb0     00 01 C2 FA | 	rdbyte	_var01, _var01
28fb4     03 00 0E F2 | 	cmp	_var01, #3 wz
28fb8     14 14 06 A1 |  if_e	add	arg02, #20
28fbc     10 16 46 A0 |  if_e	shr	arg03, #16
28fc0     0A 17 52 AC |  if_e	wrword	arg03, arg02
28fc4                 | _fatfs_cc_st_clust_ret
28fc4     2D 00 64 FD | 	ret
28fc8                 | 
28fc8                 | _fatfs_cc_cmp_lfn
28fc8     07 4A 05 F6 | 	mov	COUNT_, #7
28fcc     A8 00 A0 FD | 	call	#pushregs_
28fd0     09 1F 02 F6 | 	mov	local01, arg01
28fd4     0A 13 02 F6 | 	mov	arg01, arg02
28fd8     1A 12 06 F1 | 	add	arg01, #26
28fdc                 | ' {
28fdc                 | ' 
28fdc                 | ' 	return *((WORD*)ptr);
28fdc     09 FB E9 FA | 	rdword	result1, arg01 wz
28fe0     00 FA 05 56 |  if_ne	mov	result1, #0
28fe4     E0 00 90 5D |  if_ne	jmp	#LR__4196
28fe8     0A 21 C2 FA | 	rdbyte	local02, arg02
28fec     3F 20 06 F5 | 	and	local02, #63
28ff0     01 20 86 F1 | 	sub	local02, #1
28ff4     0D 20 06 FD | 	qmul	local02, #13
28ff8                 | ' 
28ff8                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
28ff8                 | ' 
28ff8                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
28ff8     01 22 06 F6 | 	mov	local03, #1
28ffc     00 24 06 F6 | 	mov	local04, #0
29000     18 26 62 FD | 	getqx	local05
29004                 | LR__4190
29004     0D 24 16 F2 | 	cmp	local04, #13 wc
29008     9C 00 90 3D |  if_ae	jmp	#LR__4195
2900c     0A 13 02 F6 | 	mov	arg01, arg02
29010     12 21 02 F6 | 	mov	local02, local04
29014     01 00 00 FF 
29018     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2901c     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
29020     10 21 C2 FA | 	rdbyte	local02, local02
29024     01 20 06 FA | 	mul	local02, #1
29028     10 13 02 F1 | 	add	arg01, local02
2902c     01 00 00 FF 
29030     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
29034                 | ' {
29034                 | ' 
29034                 | ' 	return *((WORD*)ptr);
29034     09 FB E1 FA | 	rdword	result1, arg01
29038     FD 28 02 F6 | 	mov	local06, result1
2903c     11 21 02 F6 | 	mov	local02, local03
29040     0F 20 4E F7 | 	zerox	local02, #15 wz
29044     44 00 90 AD |  if_e	jmp	#LR__4193
29048     00 27 16 F2 | 	cmp	local05, #256 wc
2904c     2C 00 90 3D |  if_ae	jmp	#LR__4191
29050     14 13 32 F9 | 	getword	arg01, local06, #0
29054     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
29058     FD 20 02 F6 | 	mov	local02, result1
2905c     13 23 02 F6 | 	mov	local03, local05
29060     01 22 66 F0 | 	shl	local03, #1
29064     0F 23 02 F1 | 	add	local03, local01
29068     11 13 E2 FA | 	rdword	arg01, local03
2906c     01 26 06 F1 | 	add	local05, #1
29070     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
29074     FD 20 0A F2 | 	cmp	local02, result1 wz
29078     08 00 90 AD |  if_e	jmp	#LR__4192
2907c                 | LR__4191
2907c                 | ' 				return 0;
2907c     00 FA 05 F6 | 	mov	result1, #0
29080     44 00 90 FD | 	jmp	#LR__4196
29084                 | LR__4192
29084     14 23 02 F6 | 	mov	local03, local06
29088     14 00 90 FD | 	jmp	#LR__4194
2908c                 | LR__4193
2908c     14 29 32 F9 | 	getword	local06, local06, #0
29090     7F 00 00 FF 
29094     FF 29 0E F2 | 	cmp	local06, ##65535 wz
29098     00 FA 05 56 |  if_ne	mov	result1, #0
2909c     28 00 90 5D |  if_ne	jmp	#LR__4196
290a0                 | LR__4194
290a0     01 24 06 F1 | 	add	local04, #1
290a4     5C FF 9F FD | 	jmp	#LR__4190
290a8                 | LR__4195
290a8     0A 21 C2 FA | 	rdbyte	local02, arg02
290ac     40 20 CE F7 | 	test	local02, #64 wz
290b0     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
290b4     01 26 66 50 |  if_ne	shl	local05, #1
290b8     0F 27 02 51 |  if_ne	add	local05, local01
290bc     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
290c0     00 FA 05 56 |  if_ne	mov	result1, #0
290c4                 | ' 
290c4                 | ' 	return 1;
290c4     01 FA 05 A6 |  if_e	mov	result1, #1
290c8                 | LR__4196
290c8     A7 F0 03 F6 | 	mov	ptra, fp
290cc     B2 00 A0 FD | 	call	#popregs_
290d0                 | _fatfs_cc_cmp_lfn_ret
290d0     2D 00 64 FD | 	ret
290d4                 | 
290d4                 | _fatfs_cc_pick_lfn
290d4     09 01 02 F6 | 	mov	_var01, arg01
290d8     0A 13 02 F6 | 	mov	arg01, arg02
290dc     1A 12 06 F1 | 	add	arg01, #26
290e0                 | ' {
290e0                 | ' 
290e0                 | ' 	return *((WORD*)ptr);
290e0     09 FB E9 FA | 	rdword	result1, arg01 wz
290e4     00 FA 05 56 |  if_ne	mov	result1, #0
290e8     D4 00 90 5D |  if_ne	jmp	#LR__4205
290ec     0A 03 C2 FA | 	rdbyte	_var02, arg02
290f0     40 02 26 F5 | 	andn	_var02, #64
290f4     01 02 86 F1 | 	sub	_var02, #1
290f8     0D 02 06 FD | 	qmul	_var02, #13
290fc                 | ' 
290fc                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
290fc                 | ' 
290fc                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
290fc     01 04 06 F6 | 	mov	_var03, #1
29100     00 06 06 F6 | 	mov	_var04, #0
29104     18 08 62 FD | 	getqx	_var05
29108                 | LR__4200
29108     0D 06 16 F2 | 	cmp	_var04, #13 wc
2910c     80 00 90 3D |  if_ae	jmp	#LR__4203
29110     0A 13 02 F6 | 	mov	arg01, arg02
29114     03 03 02 F6 | 	mov	_var02, _var04
29118     01 00 00 FF 
2911c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
29120     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
29124     01 03 C2 FA | 	rdbyte	_var02, _var02
29128     01 02 06 FA | 	mul	_var02, #1
2912c     01 13 02 F1 | 	add	arg01, _var02
29130     01 00 00 FF 
29134     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
29138                 | ' {
29138                 | ' 
29138                 | ' 	return *((WORD*)ptr);
29138     09 FB E1 FA | 	rdword	result1, arg01
2913c     FD 0A 02 F6 | 	mov	_var06, result1
29140     02 03 02 F6 | 	mov	_var02, _var03
29144     0F 02 4E F7 | 	zerox	_var02, #15 wz
29148     28 00 90 AD |  if_e	jmp	#LR__4201
2914c     00 09 16 F2 | 	cmp	_var05, #256 wc
29150     00 FA 05 36 |  if_ae	mov	result1, #0
29154     68 00 90 3D |  if_ae	jmp	#LR__4205
29158     04 03 02 F6 | 	mov	_var02, _var05
2915c     01 02 66 F0 | 	shl	_var02, #1
29160     00 03 02 F1 | 	add	_var02, _var01
29164     05 05 02 F6 | 	mov	_var03, _var06
29168     01 05 52 FC | 	wrword	_var03, _var02
2916c     01 08 06 F1 | 	add	_var05, #1
29170     14 00 90 FD | 	jmp	#LR__4202
29174                 | LR__4201
29174     05 0B 32 F9 | 	getword	_var06, _var06, #0
29178     7F 00 00 FF 
2917c     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
29180     00 FA 05 56 |  if_ne	mov	result1, #0
29184     38 00 90 5D |  if_ne	jmp	#LR__4205
29188                 | LR__4202
29188     01 06 06 F1 | 	add	_var04, #1
2918c     78 FF 9F FD | 	jmp	#LR__4200
29190                 | LR__4203
29190     0A 03 C2 FA | 	rdbyte	_var02, arg02
29194     40 02 CE F7 | 	test	_var02, #64 wz
29198     02 0D 02 56 |  if_ne	mov	_var07, _var03
2919c     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
291a0     18 00 90 AD |  if_e	jmp	#LR__4204
291a4     00 09 16 F2 | 	cmp	_var05, #256 wc
291a8     00 FA 05 36 |  if_ae	mov	result1, #0
291ac     10 00 90 3D |  if_ae	jmp	#LR__4205
291b0     01 08 66 F0 | 	shl	_var05, #1
291b4     00 09 02 F1 | 	add	_var05, _var01
291b8     04 01 58 FC | 	wrword	#0, _var05
291bc                 | LR__4204
291bc                 | ' 		lfnbuf[i] = 0;
291bc                 | ' 	}
291bc                 | ' 
291bc                 | ' 	return 1;
291bc     01 FA 05 F6 | 	mov	result1, #1
291c0                 | LR__4205
291c0                 | _fatfs_cc_pick_lfn_ret
291c0     2D 00 64 FD | 	ret
291c4                 | 
291c4                 | _fatfs_cc_put_lfn
291c4     0D 14 06 F1 | 	add	arg02, #13
291c8     0A 19 42 FC | 	wrbyte	arg04, arg02
291cc     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
291d0     01 18 86 F1 | 	sub	arg04, #1
291d4     0D 18 06 FD | 	qmul	arg04, #13
291d8     09 01 02 F6 | 	mov	_var01, arg01
291dc     02 14 86 F1 | 	sub	arg02, #2
291e0     0A 1F 48 FC | 	wrbyte	#15, arg02
291e4     01 14 06 F1 | 	add	arg02, #1
291e8     0A 01 48 FC | 	wrbyte	#0, arg02
291ec     0C 14 86 F1 | 	sub	arg02, #12
291f0     0A 13 02 F6 | 	mov	arg01, arg02
291f4     1A 12 06 F1 | 	add	arg01, #26
291f8     09 01 58 FC | 	wrword	#0, arg01
291fc     00 02 06 F6 | 	mov	_var02, #0
29200     00 04 06 F6 | 	mov	_var03, #0
29204                 | ' 	BYTE* dir,
29204                 | ' 	BYTE ord,
29204                 | ' 	BYTE sum
29204                 | ' )
29204                 | ' {
29204                 | ' 	UINT i, s;
29204                 | ' 	WCHAR wc;
29204                 | ' 
29204                 | ' 
29204                 | ' 	dir[ 13 ] = sum;
29204                 | ' 	dir[ 11 ] =  0x0F ;
29204                 | ' 	dir[ 12 ] = 0;
29204                 | ' 	st_word(dir +  26 , 0);
29204                 | ' 
29204                 | ' 	i = (ord - 1) * 13;
29204                 | ' 	s = wc = 0;
29204                 | ' 	do {
29204     01 00 00 FF 
29208     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2920c     18 06 62 FD | 	getqx	_var04
29210     97 2A 48 FB | 	callpa	#(@LR__4211-@LR__4210)>>2,fcache_load_ptr_
29214                 | LR__4210
29214     01 19 32 F9 | 	getword	arg04, _var02, #0
29218     7F 00 00 FF 
2921c     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
29220     03 13 02 56 |  if_ne	mov	arg01, _var04
29224     01 06 06 51 |  if_ne	add	_var04, #1
29228     01 12 66 50 |  if_ne	shl	arg01, #1
2922c     00 13 02 51 |  if_ne	add	arg01, _var01
29230     09 03 E2 5A |  if_ne	rdword	_var02, arg01
29234     0A 13 02 F6 | 	mov	arg01, arg02
29238     02 19 02 F6 | 	mov	arg04, _var03
2923c     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
29240     0C 19 C2 FA | 	rdbyte	arg04, arg04
29244     01 18 06 FA | 	mul	arg04, #1
29248     0C 13 02 F1 | 	add	arg01, arg04
2924c     09 03 52 FC | 	wrword	_var02, arg01
29250     01 19 02 F6 | 	mov	arg04, _var02
29254     0F 18 4E F7 | 	zerox	arg04, #15 wz
29258     0F 02 CE A9 |  if_e	bmask	_var02, #15
2925c     01 04 06 F1 | 	add	_var03, #1
29260     0D 04 16 F2 | 	cmp	_var03, #13 wc
29264     AC FF 9F CD |  if_b	jmp	#LR__4210
29268                 | LR__4211
29268     01 00 00 FF 
2926c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
29270     01 03 32 F9 | 	getword	_var02, _var02, #0
29274     7F 00 00 FF 
29278     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
2927c     01 06 66 50 |  if_ne	shl	_var04, #1
29280     00 07 02 51 |  if_ne	add	_var04, _var01
29284     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
29288     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2928c     40 16 46 A5 |  if_e	or	arg03, #64
29290     0A 17 42 FC | 	wrbyte	arg03, arg02
29294                 | _fatfs_cc_put_lfn_ret
29294     2D 00 64 FD | 	ret
29298                 | 
29298                 | _fatfs_cc_gen_numname
29298     08 4A 05 F6 | 	mov	COUNT_, #8
2929c     A8 00 A0 FD | 	call	#pushregs_
292a0     2C F0 07 F1 | 	add	ptra, #44
292a4     09 1F 02 F6 | 	mov	local01, arg01
292a8     0A 21 02 F6 | 	mov	local02, arg02
292ac     0B 23 02 F6 | 	mov	local03, arg03
292b0     0C 25 02 F6 | 	mov	local04, arg04
292b4     0F 13 02 F6 | 	mov	arg01, local01
292b8     10 15 02 F6 | 	mov	arg02, local02
292bc     0B 16 06 F6 | 	mov	arg03, #11
292c0     84 75 BF FD | 	call	#__system____builtin_memmove
292c4     06 24 16 F2 | 	cmp	local04, #6 wc
292c8     48 00 90 CD |  if_b	jmp	#LR__4225
292cc     12 27 02 F6 | 	mov	local05, local04
292d0     97 1E 48 FB | 	callpa	#(@LR__4223-@LR__4220)>>2,fcache_load_ptr_
292d4                 | ' 		sreg = seq;
292d4                 | ' 		while (*lfn) {
292d4                 | LR__4220
292d4     11 29 EA FA | 	rdword	local06, local03 wz
292d8     34 00 90 AD |  if_e	jmp	#LR__4224
292dc     11 2B E2 FA | 	rdword	local07, local03
292e0                 | ' 			wc = *lfn++;
292e0                 | ' 			for (i = 0; i < 16; i++) {
292e0     02 22 06 F1 | 	add	local03, #2
292e4     10 12 DC FC | 	rep	@LR__4222, #16
292e8                 | LR__4221
292e8     01 26 66 F0 | 	shl	local05, #1
292ec     15 29 32 F9 | 	getword	local06, local07, #0
292f0     01 28 06 F5 | 	and	local06, #1
292f4     14 27 02 F1 | 	add	local05, local06
292f8     15 2B 32 F9 | 	getword	local07, local07, #0
292fc     01 2A 46 F0 | 	shr	local07, #1
29300     10 26 2E F4 | 	testbn	local05, #16 wz
29304     88 00 00 5F 
29308     21 26 66 55 |  if_ne	xor	local05, ##69665
2930c                 | LR__4222
2930c     C4 FF 9F FD | 	jmp	#LR__4220
29310                 | LR__4223
29310                 | LR__4224
29310     13 25 02 F6 | 	mov	local04, local05
29314                 | LR__4225
29314     07 2A 06 F6 | 	mov	local07, #7
29318                 | ' 			}
29318                 | ' 		}
29318                 | ' 		seq = (UINT)sreg;
29318                 | ' 	}
29318                 | ' 
29318                 | ' 
29318                 | ' 	i = 7;
29318                 | ' 	do {
29318     10 4E 05 F1 | 	add	fp, #16
2931c     97 1A 48 FB | 	callpa	#(@LR__4227-@LR__4226)>>2,fcache_load_ptr_
29320                 | LR__4226
29320     12 27 42 F8 | 	getnib	local05, local04, #0
29324     30 26 06 F1 | 	add	local05, #48
29328     04 24 46 F0 | 	shr	local04, #4
2932c     13 29 E2 F8 | 	getbyte	local06, local05, #0
29330     3A 28 16 F2 | 	cmp	local06, #58 wc
29334     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
29338     07 26 06 31 |  if_ae	add	local05, #7
2933c     15 29 02 F6 | 	mov	local06, local07
29340     01 2A 8E F1 | 	sub	local07, #1 wz
29344     A7 28 02 F1 | 	add	local06, fp
29348     14 27 42 FC | 	wrbyte	local05, local06
2934c     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
29350     CC FF 9F 5D |  if_ne	jmp	#LR__4226
29354                 | LR__4227
29354     15 29 02 F6 | 	mov	local06, local07
29358     A7 28 02 F1 | 	add	local06, fp
2935c     14 FD 48 FC | 	wrbyte	#126, local06
29360                 | ' 	ns[i] = '~';
29360                 | ' 
29360                 | ' 
29360                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
29360     00 26 06 F6 | 	mov	local05, #0
29364     10 4E 85 F1 | 	sub	fp, #16
29368     97 2A 48 FB | 	callpa	#(@LR__4230-@LR__4228)>>2,fcache_load_ptr_
2936c                 | LR__4228
2936c     15 27 12 F2 | 	cmp	local05, local07 wc
29370     4C 00 90 3D |  if_ae	jmp	#LR__4231
29374     13 29 02 F6 | 	mov	local06, local05
29378     0F 29 02 F1 | 	add	local06, local01
2937c     14 29 C2 FA | 	rdbyte	local06, local06
29380     20 28 0E F2 | 	cmp	local06, #32 wz
29384     38 00 90 AD |  if_e	jmp	#LR__4231
29388     13 13 02 F6 | 	mov	arg01, local05
2938c     0F 13 02 F1 | 	add	arg01, local01
29390     09 13 CA FA | 	rdbyte	arg01, arg01 wz
29394     00 FA 05 56 |  if_ne	mov	result1, #0
29398                 | ' 
29398                 | ' 	return 0;
29398     00 FA 05 A6 |  if_e	mov	result1, #0
2939c     00 FA 0D F2 | 	cmp	result1, #0 wz
293a0     14 00 90 AD |  if_e	jmp	#LR__4229
293a4     15 29 02 F6 | 	mov	local06, local07
293a8     01 28 86 F1 | 	sub	local06, #1
293ac     14 27 0A F2 | 	cmp	local05, local06 wz
293b0     0C 00 90 AD |  if_e	jmp	#LR__4231
293b4     01 26 06 F1 | 	add	local05, #1
293b8                 | LR__4229
293b8     01 26 06 F1 | 	add	local05, #1
293bc     AC FF 9F FD | 	jmp	#LR__4228
293c0                 | LR__4230
293c0                 | LR__4231
293c0     97 20 48 FB | 	callpa	#(@LR__4235-@LR__4232)>>2,fcache_load_ptr_
293c4                 | ' 			j++;
293c4                 | ' 		}
293c4                 | ' 	}
293c4                 | ' 	do {
293c4                 | LR__4232
293c4     13 29 02 F6 | 	mov	local06, local05
293c8     0F 29 02 F1 | 	add	local06, local01
293cc     08 2A 16 F2 | 	cmp	local07, #8 wc
293d0     01 26 06 F1 | 	add	local05, #1
293d4     1C 00 90 3D |  if_ae	jmp	#LR__4233
293d8     15 25 02 F6 | 	mov	local04, local07
293dc     10 4E 05 F1 | 	add	fp, #16
293e0     A7 24 02 F1 | 	add	local04, fp
293e4     12 2D C2 FA | 	rdbyte	local08, local04
293e8     01 2A 06 F1 | 	add	local07, #1
293ec     10 4E 85 F1 | 	sub	fp, #16
293f0     04 00 90 FD | 	jmp	#LR__4234
293f4                 | LR__4233
293f4     20 2C 06 F6 | 	mov	local08, #32
293f8                 | LR__4234
293f8     14 2D 42 FC | 	wrbyte	local08, local06
293fc     08 26 16 F2 | 	cmp	local05, #8 wc
29400     C0 FF 9F CD |  if_b	jmp	#LR__4232
29404                 | LR__4235
29404     A7 F0 03 F6 | 	mov	ptra, fp
29408     B2 00 A0 FD | 	call	#popregs_
2940c                 | _fatfs_cc_gen_numname_ret
2940c     2D 00 64 FD | 	ret
29410                 | 
29410                 | _fatfs_cc_sum_sfn
29410     00 00 06 F6 | 	mov	_var01, #0
29414                 | ' )
29414                 | ' {
29414                 | ' 	BYTE sum = 0;
29414                 | ' 	UINT n = 11;
29414                 | ' 
29414                 | ' 	do {
29414     97 12 48 FB | 	callpa	#(@LR__4242-@LR__4240)>>2,fcache_load_ptr_
29418                 | LR__4240
29418     0B 10 DC FC | 	rep	@LR__4243, #11
2941c                 | LR__4241
2941c     00 FB E1 F8 | 	getbyte	result1, _var01, #0
29420     01 FA 45 F0 | 	shr	result1, #1
29424     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
29428     07 00 66 F0 | 	shl	_var01, #7
2942c     00 FB 01 F1 | 	add	result1, _var01
29430     09 01 C2 FA | 	rdbyte	_var01, arg01
29434     FD 00 02 F1 | 	add	_var01, result1
29438     01 12 06 F1 | 	add	arg01, #1
2943c                 | LR__4242
2943c                 | LR__4243
2943c                 | ' 	return sum;
2943c     00 FB 01 F6 | 	mov	result1, _var01
29440                 | _fatfs_cc_sum_sfn_ret
29440     2D 00 64 FD | 	ret
29444                 | 
29444                 | _fatfs_cc_dir_read
29444     0C 4A 05 F6 | 	mov	COUNT_, #12
29448     A8 00 A0 FD | 	call	#pushregs_
2944c     09 1F 02 F6 | 	mov	local01, arg01
29450     0A 21 02 F6 | 	mov	local02, arg02
29454     04 22 06 F6 | 	mov	local03, #4
29458     0F 25 02 FB | 	rdlong	local04, local01
2945c     FF 26 06 F6 | 	mov	local05, #255
29460     FF 28 06 F6 | 	mov	local06, #255
29464                 | ' )
29464                 | ' {
29464                 | ' 	FRESULT res = FR_NO_FILE;
29464                 | ' 	FATFS *fs = dp->obj.fs;
29464                 | ' 	BYTE attr, b;
29464                 | ' 
29464                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
29464                 | ' 
29464                 | ' 
29464                 | ' 	while (dp->sect) {
29464                 | LR__4250
29464     18 1E 06 F1 | 	add	local01, #24
29468     0F FB 09 FB | 	rdlong	result1, local01 wz
2946c     18 1E 86 F1 | 	sub	local01, #24
29470     AC 01 90 AD |  if_e	jmp	#LR__4260
29474     18 1E 06 F1 | 	add	local01, #24
29478     0F 15 02 FB | 	rdlong	arg02, local01
2947c     18 1E 86 F1 | 	sub	local01, #24
29480     12 13 02 F6 | 	mov	arg01, local04
29484     AC ED BF FD | 	call	#_fatfs_cc_move_window
29488     FD 22 0A F6 | 	mov	local03, result1 wz
2948c     90 01 90 5D |  if_ne	jmp	#LR__4260
29490     1C 1E 06 F1 | 	add	local01, #28
29494     0F FB 01 FB | 	rdlong	result1, local01
29498     1C 1E 86 F1 | 	sub	local01, #28
2949c     FD 2A C2 FA | 	rdbyte	local07, result1
294a0     15 FB 01 F6 | 	mov	result1, local07
294a4     07 FA 4D F7 | 	zerox	result1, #7 wz
294a8     04 22 06 A6 |  if_e	mov	local03, #4
294ac                 | ' 			res = FR_NO_FILE; break;
294ac     70 01 90 AD |  if_e	jmp	#LR__4260
294b0     1C 1E 06 F1 | 	add	local01, #28
294b4     0F 2D 02 FB | 	rdlong	local08, local01
294b8     0B 2C 06 F1 | 	add	local08, #11
294bc     16 2F C2 FA | 	rdbyte	local09, local08
294c0     3F 2E 06 F5 | 	and	local09, #63
294c4     16 1E 86 F1 | 	sub	local01, #22
294c8     0F 2F 42 FC | 	wrbyte	local09, local01
294cc     06 1E 86 F1 | 	sub	local01, #6
294d0     15 FB E1 F8 | 	getbyte	result1, local07, #0
294d4     E5 FA 0D F2 | 	cmp	result1, #229 wz
294d8     15 2D 02 56 |  if_ne	mov	local08, local07
294dc     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
294e0     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
294e4     1C 00 90 AD |  if_e	jmp	#LR__4251
294e8     00 30 06 F6 | 	mov	local10, #0
294ec     17 2D E2 F8 | 	getbyte	local08, local09, #0
294f0     20 2C 26 F5 | 	andn	local08, #32
294f4     08 2C 0E F2 | 	cmp	local08, #8 wz
294f8     01 30 06 A6 |  if_e	mov	local10, #1
294fc     10 31 0A F2 | 	cmp	local10, local02 wz
29500     08 00 90 AD |  if_e	jmp	#LR__4252
29504                 | LR__4251
29504     FF 26 06 F6 | 	mov	local05, #255
29508     00 01 90 FD | 	jmp	#LR__4259
2950c                 | LR__4252
2950c     17 2F E2 F8 | 	getbyte	local09, local09, #0
29510     0F 2E 0E F2 | 	cmp	local09, #15 wz
29514     B4 00 90 5D |  if_ne	jmp	#LR__4256
29518     15 33 E2 F8 | 	getbyte	local11, local07, #0
2951c     40 32 CE F7 | 	test	local11, #64 wz
29520     30 00 90 AD |  if_e	jmp	#LR__4253
29524     1C 1E 06 F1 | 	add	local01, #28
29528     0F 33 02 FB | 	rdlong	local11, local01
2952c     0D 32 06 F1 | 	add	local11, #13
29530     19 29 C2 FA | 	rdbyte	local06, local11
29534     15 2B E2 F8 | 	getbyte	local07, local07, #0
29538     BF 2A 06 F5 | 	and	local07, #191
2953c     15 27 02 F6 | 	mov	local05, local07
29540     0C 1E 86 F1 | 	sub	local01, #12
29544     0F 33 02 FB | 	rdlong	local11, local01
29548     1C 1E 06 F1 | 	add	local01, #28
2954c     0F 33 62 FC | 	wrlong	local11, local01
29550     2C 1E 86 F1 | 	sub	local01, #44
29554                 | LR__4253
29554     15 2D E2 F8 | 	getbyte	local08, local07, #0
29558     13 31 E2 F8 | 	getbyte	local10, local05, #0
2955c     18 2D 0A F2 | 	cmp	local08, local10 wz
29560     5C 00 90 5D |  if_ne	jmp	#LR__4254
29564     14 31 E2 F8 | 	getbyte	local10, local06, #0
29568     1C 1E 06 F1 | 	add	local01, #28
2956c     0F 2F 02 FB | 	rdlong	local09, local01
29570     1C 1E 86 F1 | 	sub	local01, #28
29574     0D 2E 06 F1 | 	add	local09, #13
29578     17 2D C2 FA | 	rdbyte	local08, local09
2957c     16 2F E2 F8 | 	getbyte	local09, local08, #0
29580     17 31 0A F2 | 	cmp	local10, local09 wz
29584     38 00 90 5D |  if_ne	jmp	#LR__4254
29588     0C 24 06 F1 | 	add	local04, #12
2958c     12 13 02 FB | 	rdlong	arg01, local04
29590     0C 24 86 F1 | 	sub	local04, #12
29594     1C 1E 06 F1 | 	add	local01, #28
29598     0F 35 02 FB | 	rdlong	local12, local01
2959c     1C 1E 86 F1 | 	sub	local01, #28
295a0     1A 15 02 F6 | 	mov	arg02, local12
295a4     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
295a8     00 FA 4D F2 | 	cmps	result1, #0 wz
295ac     13 35 02 56 |  if_ne	mov	local12, local05
295b0     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
295b4     01 34 86 51 |  if_ne	sub	local12, #1
295b8     1A 33 02 56 |  if_ne	mov	local11, local12
295bc     04 00 90 5D |  if_ne	jmp	#LR__4255
295c0                 | LR__4254
295c0     FF 32 06 F6 | 	mov	local11, #255
295c4                 | LR__4255
295c4     19 27 02 F6 | 	mov	local05, local11
295c8     40 00 90 FD | 	jmp	#LR__4258
295cc                 | LR__4256
295cc     13 33 02 F6 | 	mov	local11, local05
295d0     07 32 4E F7 | 	zerox	local11, #7 wz
295d4     20 00 90 5D |  if_ne	jmp	#LR__4257
295d8     14 29 E2 F8 | 	getbyte	local06, local06, #0
295dc     1C 1E 06 F1 | 	add	local01, #28
295e0     0F 13 02 FB | 	rdlong	arg01, local01
295e4     1C 1E 86 F1 | 	sub	local01, #28
295e8     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
295ec     FD FA E1 F8 | 	getbyte	result1, result1, #0
295f0     FD 28 0A F2 | 	cmp	local06, result1 wz
295f4     28 00 90 AD |  if_e	jmp	#LR__4260
295f8                 | LR__4257
295f8     2C 1E 06 F1 | 	add	local01, #44
295fc     FF FF FF FF 
29600     0F FF 6B FC | 	wrlong	##-1, local01
29604     2C 1E 86 F1 | 	sub	local01, #44
29608                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
29608                 | ' 					}
29608                 | ' 					break;
29608     14 00 90 FD | 	jmp	#LR__4260
2960c                 | LR__4258
2960c                 | LR__4259
2960c     0F 13 02 F6 | 	mov	arg01, local01
29610     00 14 06 F6 | 	mov	arg02, #0
29614     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
29618     FD 22 0A F6 | 	mov	local03, result1 wz
2961c     44 FE 9F AD |  if_e	jmp	#LR__4250
29620                 | LR__4260
29620     00 22 0E F2 | 	cmp	local03, #0 wz
29624     18 1E 06 51 |  if_ne	add	local01, #24
29628     0F 01 68 5C |  if_ne	wrlong	#0, local01
2962c                 | ' 	return res;
2962c     11 FB 01 F6 | 	mov	result1, local03
29630     A7 F0 03 F6 | 	mov	ptra, fp
29634     B2 00 A0 FD | 	call	#popregs_
29638                 | _fatfs_cc_dir_read_ret
29638     2D 00 64 FD | 	ret
2963c                 | 
2963c                 | _fatfs_cc_dir_find
2963c     0B 4A 05 F6 | 	mov	COUNT_, #11
29640     A8 00 A0 FD | 	call	#pushregs_
29644     09 1F 02 F6 | 	mov	local01, arg01
29648     0F 21 02 FB | 	rdlong	local02, local01
2964c     0F 13 02 F6 | 	mov	arg01, local01
29650     00 14 06 F6 | 	mov	arg02, #0
29654     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
29658     00 FA 0D F2 | 	cmp	result1, #0 wz
2965c     18 02 90 5D |  if_ne	jmp	#LR__4282
29660     FF 22 06 F6 | 	mov	local03, #255
29664     FF 24 06 F6 | 	mov	local04, #255
29668     2C 1E 06 F1 | 	add	local01, #44
2966c     FF FF FF FF 
29670     0F FF 6B FC | 	wrlong	##-1, local01
29674     2C 1E 86 F1 | 	sub	local01, #44
29678                 | ' #line 2404 "ff.c"
29678                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
29678                 | ' 
29678                 | ' 	do {
29678                 | LR__4270
29678     18 1E 06 F1 | 	add	local01, #24
2967c     0F 15 02 FB | 	rdlong	arg02, local01
29680     18 1E 86 F1 | 	sub	local01, #24
29684     10 13 02 F6 | 	mov	arg01, local02
29688     A8 EB BF FD | 	call	#_fatfs_cc_move_window
2968c     FD 26 0A F6 | 	mov	local05, result1 wz
29690     E0 01 90 5D |  if_ne	jmp	#LR__4281
29694     1C 1E 06 F1 | 	add	local01, #28
29698     0F 17 02 FB | 	rdlong	arg03, local01
2969c     1C 1E 86 F1 | 	sub	local01, #28
296a0     0B 29 C2 FA | 	rdbyte	local06, arg03
296a4     14 17 02 F6 | 	mov	arg03, local06
296a8     07 16 4E F7 | 	zerox	arg03, #7 wz
296ac     04 26 06 A6 |  if_e	mov	local05, #4
296b0     C0 01 90 AD |  if_e	jmp	#LR__4281
296b4     1C 1E 06 F1 | 	add	local01, #28
296b8     0F 2B 02 FB | 	rdlong	local07, local01
296bc     15 17 02 F6 | 	mov	arg03, local07
296c0     0B 16 06 F1 | 	add	arg03, #11
296c4     0B 2D C2 FA | 	rdbyte	local08, arg03
296c8     3F 2C 06 F5 | 	and	local08, #63
296cc     16 1E 86 F1 | 	sub	local01, #22
296d0     0F 2D 42 FC | 	wrbyte	local08, local01
296d4     06 1E 86 F1 | 	sub	local01, #6
296d8     14 17 E2 F8 | 	getbyte	arg03, local06, #0
296dc     E5 16 0E F2 | 	cmp	arg03, #229 wz
296e0     18 00 90 AD |  if_e	jmp	#LR__4271
296e4     16 17 E2 F8 | 	getbyte	arg03, local08, #0
296e8     08 16 CE F7 | 	test	arg03, #8 wz
296ec     16 2B 02 56 |  if_ne	mov	local07, local08
296f0     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
296f4     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
296f8     18 00 90 AD |  if_e	jmp	#LR__4272
296fc                 | LR__4271
296fc     FF 24 06 F6 | 	mov	local04, #255
29700     2C 1E 06 F1 | 	add	local01, #44
29704     FF FF FF FF 
29708     0F FF 6B FC | 	wrlong	##-1, local01
2970c     2C 1E 86 F1 | 	sub	local01, #44
29710     4C 01 90 FD | 	jmp	#LR__4280
29714                 | LR__4272
29714     16 2D E2 F8 | 	getbyte	local08, local08, #0
29718     0F 2C 0E F2 | 	cmp	local08, #15 wz
2971c     C8 00 90 5D |  if_ne	jmp	#LR__4276
29720     2B 1E 06 F1 | 	add	local01, #43
29724     0F 2D C2 FA | 	rdbyte	local08, local01
29728     2B 1E 86 F1 | 	sub	local01, #43
2972c     40 2C CE F7 | 	test	local08, #64 wz
29730     2C 01 90 5D |  if_ne	jmp	#LR__4279
29734     14 2F E2 F8 | 	getbyte	local09, local06, #0
29738     40 2E CE F7 | 	test	local09, #64 wz
2973c     30 00 90 AD |  if_e	jmp	#LR__4273
29740     1C 1E 06 F1 | 	add	local01, #28
29744     0F 2F 02 FB | 	rdlong	local09, local01
29748     0D 2E 06 F1 | 	add	local09, #13
2974c     17 23 C2 FA | 	rdbyte	local03, local09
29750     14 29 E2 F8 | 	getbyte	local06, local06, #0
29754     BF 28 06 F5 | 	and	local06, #191
29758     14 25 02 F6 | 	mov	local04, local06
2975c     0C 1E 86 F1 | 	sub	local01, #12
29760     0F 2F 02 FB | 	rdlong	local09, local01
29764     1C 1E 06 F1 | 	add	local01, #28
29768     0F 2F 62 FC | 	wrlong	local09, local01
2976c     2C 1E 86 F1 | 	sub	local01, #44
29770                 | LR__4273
29770     14 31 E2 F8 | 	getbyte	local10, local06, #0
29774     12 2B E2 F8 | 	getbyte	local07, local04, #0
29778     15 31 0A F2 | 	cmp	local10, local07 wz
2977c     5C 00 90 5D |  if_ne	jmp	#LR__4274
29780     11 2D E2 F8 | 	getbyte	local08, local03, #0
29784     1C 1E 06 F1 | 	add	local01, #28
29788     0F 2B 02 FB | 	rdlong	local07, local01
2978c     1C 1E 86 F1 | 	sub	local01, #28
29790     0D 2A 06 F1 | 	add	local07, #13
29794     15 29 C2 FA | 	rdbyte	local06, local07
29798     14 2B E2 F8 | 	getbyte	local07, local06, #0
2979c     15 2D 0A F2 | 	cmp	local08, local07 wz
297a0     38 00 90 5D |  if_ne	jmp	#LR__4274
297a4     0C 20 06 F1 | 	add	local02, #12
297a8     10 13 02 FB | 	rdlong	arg01, local02
297ac     0C 20 86 F1 | 	sub	local02, #12
297b0     1C 1E 06 F1 | 	add	local01, #28
297b4     0F 33 02 FB | 	rdlong	local11, local01
297b8     1C 1E 86 F1 | 	sub	local01, #28
297bc     19 15 02 F6 | 	mov	arg02, local11
297c0     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
297c4     00 FA 4D F2 | 	cmps	result1, #0 wz
297c8     12 33 02 56 |  if_ne	mov	local11, local04
297cc     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
297d0     01 32 86 51 |  if_ne	sub	local11, #1
297d4     19 2F 02 56 |  if_ne	mov	local09, local11
297d8     04 00 90 5D |  if_ne	jmp	#LR__4275
297dc                 | LR__4274
297dc     FF 2E 06 F6 | 	mov	local09, #255
297e0                 | LR__4275
297e0     17 25 02 F6 | 	mov	local04, local09
297e4     78 00 90 FD | 	jmp	#LR__4279
297e8                 | LR__4276
297e8     12 2F 02 F6 | 	mov	local09, local04
297ec     07 2E 4E F7 | 	zerox	local09, #7 wz
297f0     20 00 90 5D |  if_ne	jmp	#LR__4277
297f4     11 31 E2 F8 | 	getbyte	local10, local03, #0
297f8     1C 1E 06 F1 | 	add	local01, #28
297fc     0F 13 02 FB | 	rdlong	arg01, local01
29800     1C 1E 86 F1 | 	sub	local01, #28
29804     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
29808     FD FA E1 F8 | 	getbyte	result1, result1, #0
2980c     FD 30 0A F2 | 	cmp	local10, result1 wz
29810     60 00 90 AD |  if_e	jmp	#LR__4281
29814                 | LR__4277
29814     2B 1E 06 F1 | 	add	local01, #43
29818     0F 2F C2 FA | 	rdbyte	local09, local01
2981c     2B 1E 86 F1 | 	sub	local01, #43
29820     01 2E CE F7 | 	test	local09, #1 wz
29824     24 00 90 5D |  if_ne	jmp	#LR__4278
29828     1C 1E 06 F1 | 	add	local01, #28
2982c     0F 13 02 FB | 	rdlong	arg01, local01
29830     04 1E 06 F1 | 	add	local01, #4
29834     0F 15 02 F6 | 	mov	arg02, local01
29838     20 1E 86 F1 | 	sub	local01, #32
2983c     0B 16 06 F6 | 	mov	arg03, #11
29840     88 DA BF FD | 	call	#_fatfs_cc_memcmp
29844     00 FA 0D F2 | 	cmp	result1, #0 wz
29848     28 00 90 AD |  if_e	jmp	#LR__4281
2984c                 | LR__4278
2984c     FF 24 06 F6 | 	mov	local04, #255
29850     2C 1E 06 F1 | 	add	local01, #44
29854     FF FF FF FF 
29858     0F FF 6B FC | 	wrlong	##-1, local01
2985c     2C 1E 86 F1 | 	sub	local01, #44
29860                 | LR__4279
29860                 | LR__4280
29860     0F 13 02 F6 | 	mov	arg01, local01
29864     00 14 06 F6 | 	mov	arg02, #0
29868     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
2986c     FD 26 0A F6 | 	mov	local05, result1 wz
29870     04 FE 9F AD |  if_e	jmp	#LR__4270
29874                 | LR__4281
29874                 | ' 
29874                 | ' 	return res;
29874     13 FB 01 F6 | 	mov	result1, local05
29878                 | LR__4282
29878     A7 F0 03 F6 | 	mov	ptra, fp
2987c     B2 00 A0 FD | 	call	#popregs_
29880                 | _fatfs_cc_dir_find_ret
29880     2D 00 64 FD | 	ret
29884                 | 
29884                 | _fatfs_cc_dir_register
29884     0A 4A 05 F6 | 	mov	COUNT_, #10
29888     A8 00 A0 FD | 	call	#pushregs_
2988c     2C F0 07 F1 | 	add	ptra, #44
29890     04 4E 05 F1 | 	add	fp, #4
29894     A7 12 62 FC | 	wrlong	arg01, fp
29898     09 1F 02 FB | 	rdlong	local01, arg01
2989c     08 4E 05 F1 | 	add	fp, #8
298a0     A7 1E 62 FC | 	wrlong	local01, fp
298a4     08 4E 85 F1 | 	sub	fp, #8
298a8     A7 20 02 FB | 	rdlong	local02, fp
298ac     04 4E 85 F1 | 	sub	fp, #4
298b0     2B 20 06 F1 | 	add	local02, #43
298b4     10 21 C2 FA | 	rdbyte	local02, local02
298b8     A0 20 CE F7 | 	test	local02, #160 wz
298bc     06 FA 05 56 |  if_ne	mov	result1, #6
298c0     F8 03 90 5D |  if_ne	jmp	#LR__4305
298c4                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
298c4     14 4E 05 F1 | 	add	fp, #20
298c8     A7 00 68 FC | 	wrlong	#0, fp
298cc     14 4E 85 F1 | 	sub	fp, #20
298d0     97 28 48 FB | 	callpa	#(@LR__4291-@LR__4290)>>2,fcache_load_ptr_
298d4                 | LR__4290
298d4     0C 4E 05 F1 | 	add	fp, #12
298d8     A7 20 02 FB | 	rdlong	local02, fp
298dc     0C 20 06 F1 | 	add	local02, #12
298e0     10 23 02 FB | 	rdlong	local03, local02
298e4     08 4E 05 F1 | 	add	fp, #8
298e8     A7 24 02 FB | 	rdlong	local04, fp
298ec     14 4E 85 F1 | 	sub	fp, #20
298f0     01 24 66 F0 | 	shl	local04, #1
298f4     11 25 02 F1 | 	add	local04, local03
298f8     12 21 EA FA | 	rdword	local02, local04 wz
298fc     24 00 90 AD |  if_e	jmp	#LR__4292
29900     14 4E 05 F1 | 	add	fp, #20
29904     A7 26 02 FB | 	rdlong	local05, fp
29908     13 29 02 F6 | 	mov	local06, local05
2990c     13 2B 02 F6 | 	mov	local07, local05
29910     15 2D 02 F6 | 	mov	local08, local07
29914     01 2C 06 F1 | 	add	local08, #1
29918     A7 2C 62 FC | 	wrlong	local08, fp
2991c     14 4E 85 F1 | 	sub	fp, #20
29920     B0 FF 9F FD | 	jmp	#LR__4290
29924                 | LR__4291
29924                 | LR__4292
29924     1C 4E 05 F1 | 	add	fp, #28
29928     A7 12 02 F6 | 	mov	arg01, fp
2992c     18 4E 85 F1 | 	sub	fp, #24
29930     A7 14 02 FB | 	rdlong	arg02, fp
29934     04 4E 85 F1 | 	sub	fp, #4
29938     20 14 06 F1 | 	add	arg02, #32
2993c     0C 16 06 F6 | 	mov	arg03, #12
29940     04 6F BF FD | 	call	#__system____builtin_memmove
29944     27 4E 05 F1 | 	add	fp, #39
29948     A7 2E C2 FA | 	rdbyte	local09, fp
2994c     27 4E 85 F1 | 	sub	fp, #39
29950     01 2E CE F7 | 	test	local09, #1 wz
29954     F4 00 90 AD |  if_e	jmp	#LR__4295
29958     04 4E 05 F1 | 	add	fp, #4
2995c     A7 30 02 FB | 	rdlong	local10, fp
29960     2B 30 06 F1 | 	add	local10, #43
29964     18 81 48 FC | 	wrbyte	#64, local10
29968                 | ' 		dp->fn[ 11 ] =  0x40 ;
29968                 | ' 		for (n = 1; n < 100; n++) {
29968     0C 4E 05 F1 | 	add	fp, #12
2996c     A7 02 68 FC | 	wrlong	#1, fp
29970     10 4E 85 F1 | 	sub	fp, #16
29974                 | LR__4293
29974     10 4E 05 F1 | 	add	fp, #16
29978     A7 20 02 FB | 	rdlong	local02, fp
2997c     10 4E 85 F1 | 	sub	fp, #16
29980     64 20 16 F2 | 	cmp	local02, #100 wc
29984     70 00 90 3D |  if_ae	jmp	#LR__4294
29988     04 4E 05 F1 | 	add	fp, #4
2998c     A7 12 02 FB | 	rdlong	arg01, fp
29990     20 12 06 F1 | 	add	arg01, #32
29994     18 4E 05 F1 | 	add	fp, #24
29998     A7 14 02 F6 | 	mov	arg02, fp
2999c     10 4E 85 F1 | 	sub	fp, #16
299a0     A7 30 02 FB | 	rdlong	local10, fp
299a4     0C 30 06 F1 | 	add	local10, #12
299a8     18 17 02 FB | 	rdlong	arg03, local10
299ac     04 4E 05 F1 | 	add	fp, #4
299b0     A7 18 02 FB | 	rdlong	arg04, fp
299b4     10 4E 85 F1 | 	sub	fp, #16
299b8     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
299bc     04 4E 05 F1 | 	add	fp, #4
299c0     A7 12 02 FB | 	rdlong	arg01, fp
299c4     04 4E 85 F1 | 	sub	fp, #4
299c8     70 FC BF FD | 	call	#_fatfs_cc_dir_find
299cc     08 4E 05 F1 | 	add	fp, #8
299d0     A7 FA 61 FC | 	wrlong	result1, fp
299d4     00 FA 4D F2 | 	cmps	result1, #0 wz
299d8     08 4E 85 F1 | 	sub	fp, #8
299dc     18 00 90 5D |  if_ne	jmp	#LR__4294
299e0     10 4E 05 F1 | 	add	fp, #16
299e4     A7 30 02 FB | 	rdlong	local10, fp
299e8     01 30 06 F1 | 	add	local10, #1
299ec     A7 30 62 FC | 	wrlong	local10, fp
299f0     10 4E 85 F1 | 	sub	fp, #16
299f4     7C FF 9F FD | 	jmp	#LR__4293
299f8                 | LR__4294
299f8     10 4E 05 F1 | 	add	fp, #16
299fc     A7 30 02 FB | 	rdlong	local10, fp
29a00     10 4E 85 F1 | 	sub	fp, #16
29a04     64 30 0E F2 | 	cmp	local10, #100 wz
29a08     07 FA 05 A6 |  if_e	mov	result1, #7
29a0c     AC 02 90 AD |  if_e	jmp	#LR__4305
29a10     08 4E 05 F1 | 	add	fp, #8
29a14     A7 30 02 FB | 	rdlong	local10, fp
29a18     08 4E 85 F1 | 	sub	fp, #8
29a1c     04 30 0E F2 | 	cmp	local10, #4 wz
29a20     08 4E 05 51 |  if_ne	add	fp, #8
29a24     A7 FA 01 5B |  if_ne	rdlong	result1, fp
29a28     08 4E 85 51 |  if_ne	sub	fp, #8
29a2c     8C 02 90 5D |  if_ne	jmp	#LR__4305
29a30     04 4E 05 F1 | 	add	fp, #4
29a34     A7 30 02 FB | 	rdlong	local10, fp
29a38     23 4E 05 F1 | 	add	fp, #35
29a3c     A7 1E C2 FA | 	rdbyte	local01, fp
29a40     27 4E 85 F1 | 	sub	fp, #39
29a44     2B 30 06 F1 | 	add	local10, #43
29a48     18 1F 42 FC | 	wrbyte	local01, local10
29a4c                 | LR__4295
29a4c     27 4E 05 F1 | 	add	fp, #39
29a50     A7 20 C2 FA | 	rdbyte	local02, fp
29a54     27 4E 85 F1 | 	sub	fp, #39
29a58     02 20 CE F7 | 	test	local02, #2 wz
29a5c     20 00 90 AD |  if_e	jmp	#LR__4296
29a60     14 4E 05 F1 | 	add	fp, #20
29a64     A7 30 02 FB | 	rdlong	local10, fp
29a68     0C 30 06 F1 | 	add	local10, #12
29a6c     0D 30 16 FD | 	qdiv	local10, #13
29a70     14 4E 85 F1 | 	sub	fp, #20
29a74     18 30 62 FD | 	getqx	local10
29a78     01 30 06 F1 | 	add	local10, #1
29a7c     04 00 90 FD | 	jmp	#LR__4297
29a80                 | LR__4296
29a80     01 30 06 F6 | 	mov	local10, #1
29a84                 | LR__4297
29a84     18 4E 05 F1 | 	add	fp, #24
29a88     A7 30 62 FC | 	wrlong	local10, fp
29a8c     14 4E 85 F1 | 	sub	fp, #20
29a90     A7 12 02 FB | 	rdlong	arg01, fp
29a94     18 15 02 F6 | 	mov	arg02, local10
29a98     04 4E 85 F1 | 	sub	fp, #4
29a9c     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
29aa0     08 4E 05 F1 | 	add	fp, #8
29aa4     A7 FA 61 FC | 	wrlong	result1, fp
29aa8     08 4E 85 F1 | 	sub	fp, #8
29aac     00 FA 0D F2 | 	cmp	result1, #0 wz
29ab0     38 01 90 5D |  if_ne	jmp	#LR__4302
29ab4     18 4E 05 F1 | 	add	fp, #24
29ab8     A7 30 02 FB | 	rdlong	local10, fp
29abc     01 30 8E F1 | 	sub	local10, #1 wz
29ac0     A7 30 62 FC | 	wrlong	local10, fp
29ac4     18 4E 85 F1 | 	sub	fp, #24
29ac8     20 01 90 AD |  if_e	jmp	#LR__4302
29acc     04 4E 05 F1 | 	add	fp, #4
29ad0     A7 30 02 FB | 	rdlong	local10, fp
29ad4     18 13 02 F6 | 	mov	arg01, local10
29ad8     14 4E 05 F1 | 	add	fp, #20
29adc     A7 18 02 FB | 	rdlong	arg04, fp
29ae0     18 4E 85 F1 | 	sub	fp, #24
29ae4     05 18 66 F0 | 	shl	arg04, #5
29ae8     10 30 06 F1 | 	add	local10, #16
29aec     18 15 02 FB | 	rdlong	arg02, local10
29af0     0C 15 82 F1 | 	sub	arg02, arg04
29af4     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
29af8     08 4E 05 F1 | 	add	fp, #8
29afc     A7 FA 61 FC | 	wrlong	result1, fp
29b00     08 4E 85 F1 | 	sub	fp, #8
29b04     00 FA 0D F2 | 	cmp	result1, #0 wz
29b08     E0 00 90 5D |  if_ne	jmp	#LR__4301
29b0c     04 4E 05 F1 | 	add	fp, #4
29b10     A7 12 02 FB | 	rdlong	arg01, fp
29b14     04 4E 85 F1 | 	sub	fp, #4
29b18     20 12 06 F1 | 	add	arg01, #32
29b1c     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
29b20     FD 30 02 F6 | 	mov	local10, result1
29b24     28 4E 05 F1 | 	add	fp, #40
29b28     A7 30 42 FC | 	wrbyte	local10, fp
29b2c     28 4E 85 F1 | 	sub	fp, #40
29b30                 | ' 			sum = sum_sfn(dp->fn);
29b30                 | ' 			do {
29b30                 | LR__4298
29b30     0C 4E 05 F1 | 	add	fp, #12
29b34     A7 12 02 FB | 	rdlong	arg01, fp
29b38     08 4E 85 F1 | 	sub	fp, #8
29b3c     A7 1E 02 FB | 	rdlong	local01, fp
29b40     04 4E 85 F1 | 	sub	fp, #4
29b44     18 1E 06 F1 | 	add	local01, #24
29b48     0F 15 02 FB | 	rdlong	arg02, local01
29b4c     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
29b50     08 4E 05 F1 | 	add	fp, #8
29b54     A7 FA 61 FC | 	wrlong	result1, fp
29b58     00 FA 4D F2 | 	cmps	result1, #0 wz
29b5c     08 4E 85 F1 | 	sub	fp, #8
29b60     88 00 90 5D |  if_ne	jmp	#LR__4300
29b64     0C 4E 05 F1 | 	add	fp, #12
29b68     A7 20 02 FB | 	rdlong	local02, fp
29b6c     0C 20 06 F1 | 	add	local02, #12
29b70     10 13 02 FB | 	rdlong	arg01, local02
29b74     08 4E 85 F1 | 	sub	fp, #8
29b78     A7 1E 02 FB | 	rdlong	local01, fp
29b7c     1C 1E 06 F1 | 	add	local01, #28
29b80     0F 15 02 FB | 	rdlong	arg02, local01
29b84     14 4E 05 F1 | 	add	fp, #20
29b88     A7 16 02 FB | 	rdlong	arg03, fp
29b8c     10 4E 05 F1 | 	add	fp, #16
29b90     A7 18 C2 FA | 	rdbyte	arg04, fp
29b94     28 4E 85 F1 | 	sub	fp, #40
29b98     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
29b9c     0C 4E 05 F1 | 	add	fp, #12
29ba0     A7 30 02 FB | 	rdlong	local10, fp
29ba4     03 30 06 F1 | 	add	local10, #3
29ba8     18 03 48 FC | 	wrbyte	#1, local10
29bac     08 4E 85 F1 | 	sub	fp, #8
29bb0     A7 12 02 FB | 	rdlong	arg01, fp
29bb4     04 4E 85 F1 | 	sub	fp, #4
29bb8     00 14 06 F6 | 	mov	arg02, #0
29bbc     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
29bc0     08 4E 05 F1 | 	add	fp, #8
29bc4     A7 FA 61 FC | 	wrlong	result1, fp
29bc8     00 FA 4D F2 | 	cmps	result1, #0 wz
29bcc     08 4E 85 F1 | 	sub	fp, #8
29bd0     18 00 90 5D |  if_ne	jmp	#LR__4299
29bd4     18 4E 05 F1 | 	add	fp, #24
29bd8     A7 30 02 FB | 	rdlong	local10, fp
29bdc     01 30 8E F1 | 	sub	local10, #1 wz
29be0     A7 30 62 FC | 	wrlong	local10, fp
29be4     18 4E 85 F1 | 	sub	fp, #24
29be8     44 FF 9F 5D |  if_ne	jmp	#LR__4298
29bec                 | LR__4299
29bec                 | LR__4300
29bec                 | LR__4301
29bec                 | LR__4302
29bec     08 4E 05 F1 | 	add	fp, #8
29bf0     A7 30 0A FB | 	rdlong	local10, fp wz
29bf4     08 4E 85 F1 | 	sub	fp, #8
29bf8     B4 00 90 5D |  if_ne	jmp	#LR__4304
29bfc     0C 4E 05 F1 | 	add	fp, #12
29c00     A7 12 02 FB | 	rdlong	arg01, fp
29c04     08 4E 85 F1 | 	sub	fp, #8
29c08     A7 1E 02 FB | 	rdlong	local01, fp
29c0c     04 4E 85 F1 | 	sub	fp, #4
29c10     18 1E 06 F1 | 	add	local01, #24
29c14     0F 15 02 FB | 	rdlong	arg02, local01
29c18     18 E6 BF FD | 	call	#_fatfs_cc_move_window
29c1c     08 4E 05 F1 | 	add	fp, #8
29c20     A7 FA 61 FC | 	wrlong	result1, fp
29c24     08 4E 85 F1 | 	sub	fp, #8
29c28     00 FA 0D F2 | 	cmp	result1, #0 wz
29c2c     80 00 90 5D |  if_ne	jmp	#LR__4303
29c30     04 4E 05 F1 | 	add	fp, #4
29c34     A7 20 02 FB | 	rdlong	local02, fp
29c38     04 4E 85 F1 | 	sub	fp, #4
29c3c     1C 20 06 F1 | 	add	local02, #28
29c40     10 13 02 FB | 	rdlong	arg01, local02
29c44     00 14 06 F6 | 	mov	arg02, #0
29c48     20 16 06 F6 | 	mov	arg03, #32
29c4c     98 00 A0 FD | 	call	#\builtin_bytefill_
29c50     04 4E 05 F1 | 	add	fp, #4
29c54     A7 14 02 FB | 	rdlong	arg02, fp
29c58     0A 1F 02 F6 | 	mov	local01, arg02
29c5c     1C 1E 06 F1 | 	add	local01, #28
29c60     0F 13 02 FB | 	rdlong	arg01, local01
29c64     04 4E 85 F1 | 	sub	fp, #4
29c68     20 14 06 F1 | 	add	arg02, #32
29c6c     0B 16 06 F6 | 	mov	arg03, #11
29c70     D4 6B BF FD | 	call	#__system____builtin_memmove
29c74     04 4E 05 F1 | 	add	fp, #4
29c78     A7 2E 02 FB | 	rdlong	local09, fp
29c7c     17 31 02 F6 | 	mov	local10, local09
29c80     1C 30 06 F1 | 	add	local10, #28
29c84     18 1F 02 FB | 	rdlong	local01, local10
29c88     2B 2E 06 F1 | 	add	local09, #43
29c8c     17 31 C2 FA | 	rdbyte	local10, local09
29c90     18 30 06 F5 | 	and	local10, #24
29c94     0C 1E 06 F1 | 	add	local01, #12
29c98     0F 31 42 FC | 	wrbyte	local10, local01
29c9c     08 4E 05 F1 | 	add	fp, #8
29ca0     A7 30 02 FB | 	rdlong	local10, fp
29ca4     0C 4E 85 F1 | 	sub	fp, #12
29ca8     03 30 06 F1 | 	add	local10, #3
29cac     18 03 48 FC | 	wrbyte	#1, local10
29cb0                 | LR__4303
29cb0                 | LR__4304
29cb0                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
29cb0                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
29cb0                 | ' 
29cb0                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
29cb0                 | ' 
29cb0                 | ' 			fs->wflag = 1;
29cb0                 | ' 		}
29cb0                 | ' 	}
29cb0                 | ' 
29cb0                 | ' 	return res;
29cb0     08 4E 05 F1 | 	add	fp, #8
29cb4     A7 FA 01 FB | 	rdlong	result1, fp
29cb8     08 4E 85 F1 | 	sub	fp, #8
29cbc                 | LR__4305
29cbc     A7 F0 03 F6 | 	mov	ptra, fp
29cc0     B2 00 A0 FD | 	call	#popregs_
29cc4                 | _fatfs_cc_dir_register_ret
29cc4     2D 00 64 FD | 	ret
29cc8                 | 
29cc8                 | _fatfs_cc_dir_remove
29cc8     05 4A 05 F6 | 	mov	COUNT_, #5
29ccc     A8 00 A0 FD | 	call	#pushregs_
29cd0     09 1F 02 F6 | 	mov	local01, arg01
29cd4     0F 21 02 FB | 	rdlong	local02, local01
29cd8     10 1E 06 F1 | 	add	local01, #16
29cdc     0F 23 02 FB | 	rdlong	local03, local01
29ce0     1C 1E 06 F1 | 	add	local01, #28
29ce4     0F 15 02 FB | 	rdlong	arg02, local01
29ce8     2C 1E 86 F1 | 	sub	local01, #44
29cec     FF FF 7F FF 
29cf0     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
29cf4     00 24 06 A6 |  if_e	mov	local04, #0
29cf8     18 00 90 AD |  if_e	jmp	#LR__4310
29cfc     0F 13 02 F6 | 	mov	arg01, local01
29d00     2C 1E 06 F1 | 	add	local01, #44
29d04     0F 15 02 FB | 	rdlong	arg02, local01
29d08     2C 1E 86 F1 | 	sub	local01, #44
29d0c     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
29d10     FD 24 02 F6 | 	mov	local04, result1
29d14                 | LR__4310
29d14     12 27 0A F6 | 	mov	local05, local04 wz
29d18     64 00 90 5D |  if_ne	jmp	#LR__4313
29d1c                 | ' 		do {
29d1c                 | LR__4311
29d1c     18 1E 06 F1 | 	add	local01, #24
29d20     0F 15 02 FB | 	rdlong	arg02, local01
29d24     18 1E 86 F1 | 	sub	local01, #24
29d28     10 13 02 F6 | 	mov	arg01, local02
29d2c     04 E5 BF FD | 	call	#_fatfs_cc_move_window
29d30     FD 26 0A F6 | 	mov	local05, result1 wz
29d34     40 00 90 5D |  if_ne	jmp	#LR__4312
29d38     1C 1E 06 F1 | 	add	local01, #28
29d3c     0F 25 02 FB | 	rdlong	local04, local01
29d40     12 CB 49 FC | 	wrbyte	#229, local04
29d44     03 20 06 F1 | 	add	local02, #3
29d48     10 03 48 FC | 	wrbyte	#1, local02
29d4c     03 20 86 F1 | 	sub	local02, #3
29d50     0C 1E 86 F1 | 	sub	local01, #12
29d54     0F 25 02 FB | 	rdlong	local04, local01
29d58     10 1E 86 F1 | 	sub	local01, #16
29d5c     11 25 12 F2 | 	cmp	local04, local03 wc
29d60     14 00 90 3D |  if_ae	jmp	#LR__4312
29d64     0F 13 02 F6 | 	mov	arg01, local01
29d68     00 14 06 F6 | 	mov	arg02, #0
29d6c     90 EF BF FD | 	call	#_fatfs_cc_dir_next
29d70     FD 26 0A F6 | 	mov	local05, result1 wz
29d74     A4 FF 9F AD |  if_e	jmp	#LR__4311
29d78                 | LR__4312
29d78     04 26 0E F2 | 	cmp	local05, #4 wz
29d7c     02 26 06 A6 |  if_e	mov	local05, #2
29d80                 | LR__4313
29d80                 | ' 	}
29d80                 | ' #line 2590 "ff.c"
29d80                 | ' 	return res;
29d80     13 FB 01 F6 | 	mov	result1, local05
29d84     A7 F0 03 F6 | 	mov	ptra, fp
29d88     B2 00 A0 FD | 	call	#popregs_
29d8c                 | _fatfs_cc_dir_remove_ret
29d8c     2D 00 64 FD | 	ret
29d90                 | 
29d90                 | _fatfs_cc_get_fileinfo
29d90     0F 4A 05 F6 | 	mov	COUNT_, #15
29d94     A8 00 A0 FD | 	call	#pushregs_
29d98     09 1F 02 F6 | 	mov	local01, arg01
29d9c     0A 21 02 F6 | 	mov	local02, arg02
29da0     0F 23 02 FB | 	rdlong	local03, local01
29da4     1C 20 06 F1 | 	add	local02, #28
29da8     10 01 48 FC | 	wrbyte	#0, local02
29dac     1C 20 86 F1 | 	sub	local02, #28
29db0     18 1E 06 F1 | 	add	local01, #24
29db4     0F 25 0A FB | 	rdlong	local04, local01 wz
29db8     18 1E 86 F1 | 	sub	local01, #24
29dbc     90 03 90 AD |  if_e	jmp	#LR__4334
29dc0     2C 1E 06 F1 | 	add	local01, #44
29dc4     0F 25 02 FB | 	rdlong	local04, local01
29dc8     2C 1E 86 F1 | 	sub	local01, #44
29dcc     FF FF 7F FF 
29dd0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
29dd4     D8 00 90 AD |  if_e	jmp	#LR__4323
29dd8     00 26 06 F6 | 	mov	local05, #0
29ddc     00 28 06 F6 | 	mov	local06, #0
29de0     00 2A 06 F6 | 	mov	local07, #0
29de4                 | ' 			si = di = 0;
29de4                 | ' 			hs = 0;
29de4                 | ' 			while (fs->lfnbuf[si] != 0) {
29de4                 | LR__4320
29de4     0C 22 06 F1 | 	add	local03, #12
29de8     11 25 02 FB | 	rdlong	local04, local03
29dec     0C 22 86 F1 | 	sub	local03, #12
29df0     14 2D 02 F6 | 	mov	local08, local06
29df4     01 2C 66 F0 | 	shl	local08, #1
29df8     12 2D 02 F1 | 	add	local08, local04
29dfc     16 25 EA FA | 	rdword	local04, local08 wz
29e00     90 00 90 AD |  if_e	jmp	#LR__4322
29e04     0C 22 06 F1 | 	add	local03, #12
29e08     11 2F 02 FB | 	rdlong	local09, local03
29e0c     0C 22 86 F1 | 	sub	local03, #12
29e10     14 31 02 F6 | 	mov	local10, local06
29e14     01 30 66 F0 | 	shl	local10, #1
29e18     17 31 02 F1 | 	add	local10, local09
29e1c     18 33 E2 FA | 	rdword	local11, local10
29e20     15 25 02 F6 | 	mov	local04, local07
29e24     0F 24 4E F7 | 	zerox	local04, #15 wz
29e28     01 28 06 F1 | 	add	local06, #1
29e2c     24 00 90 5D |  if_ne	jmp	#LR__4321
29e30     19 35 32 F9 | 	getword	local12, local11, #0
29e34     6C 00 00 FF 
29e38     00 34 16 F2 | 	cmp	local12, ##55296 wc
29e3c     14 00 90 CD |  if_b	jmp	#LR__4321
29e40     19 37 32 F9 | 	getword	local13, local11, #0
29e44     70 00 00 FF 
29e48     00 36 16 F2 | 	cmp	local13, ##57344 wc
29e4c     19 2B 02 C6 |  if_b	mov	local07, local11
29e50                 | ' 					hs = wc; continue;
29e50     90 FF 9F CD |  if_b	jmp	#LR__4320
29e54                 | LR__4321
29e54     15 13 32 F9 | 	getword	arg01, local07, #0
29e58     10 12 66 F0 | 	shl	arg01, #16
29e5c     19 33 32 F9 | 	getword	local11, local11, #0
29e60     19 13 42 F5 | 	or	arg01, local11
29e64     13 15 02 F6 | 	mov	arg02, local05
29e68     1C 20 06 F1 | 	add	local02, #28
29e6c     10 15 02 F1 | 	add	arg02, local02
29e70     FF 16 06 F6 | 	mov	arg03, #255
29e74     13 17 82 F1 | 	sub	arg03, local05
29e78     1C 20 86 F1 | 	sub	local02, #28
29e7c     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
29e80     FD 38 0A F6 | 	mov	local14, result1 wz
29e84     00 26 06 A6 |  if_e	mov	local05, #0
29e88     1C 27 02 51 |  if_ne	add	local05, local14
29e8c     00 2A 06 56 |  if_ne	mov	local07, #0
29e90     50 FF 9F 5D |  if_ne	jmp	#LR__4320
29e94                 | LR__4322
29e94     15 25 02 F6 | 	mov	local04, local07
29e98     0F 24 4E F7 | 	zerox	local04, #15 wz
29e9c     00 26 06 56 |  if_ne	mov	local05, #0
29ea0     1C 20 06 F1 | 	add	local02, #28
29ea4     10 27 02 F1 | 	add	local05, local02
29ea8     13 01 48 FC | 	wrbyte	#0, local05
29eac     1C 20 86 F1 | 	sub	local02, #28
29eb0                 | LR__4323
29eb0     00 26 06 F6 | 	mov	local05, #0
29eb4     00 28 06 F6 | 	mov	local06, #0
29eb8                 | ' 			fno->fname[di] = 0;
29eb8                 | ' 		}
29eb8                 | ' 	}
29eb8                 | ' 
29eb8                 | ' 	si = di = 0;
29eb8                 | ' 	while (si < 11) {
29eb8                 | LR__4324
29eb8     0B 28 16 F2 | 	cmp	local06, #11 wc
29ebc     20 01 90 3D |  if_ae	jmp	#LR__4327
29ec0     1C 1E 06 F1 | 	add	local01, #28
29ec4     0F 2F 02 FB | 	rdlong	local09, local01
29ec8     1C 1E 86 F1 | 	sub	local01, #28
29ecc     14 31 02 F6 | 	mov	local10, local06
29ed0     17 31 02 F1 | 	add	local10, local09
29ed4     18 33 C2 FA | 	rdbyte	local11, local10
29ed8     19 25 32 F9 | 	getword	local04, local11, #0
29edc     20 24 0E F2 | 	cmp	local04, #32 wz
29ee0     01 28 06 F1 | 	add	local06, #1
29ee4     D0 FF 9F AD |  if_e	jmp	#LR__4324
29ee8     19 25 32 F9 | 	getword	local04, local11, #0
29eec     05 24 0E F2 | 	cmp	local04, #5 wz
29ef0     E5 32 06 A6 |  if_e	mov	local11, #229
29ef4     09 28 0E F2 | 	cmp	local06, #9 wz
29ef8     20 00 90 5D |  if_ne	jmp	#LR__4325
29efc     0C 26 16 F2 | 	cmp	local05, #12 wc
29f00     18 00 90 3D |  if_ae	jmp	#LR__4325
29f04     13 37 02 F6 | 	mov	local13, local05
29f08     0C 20 06 F1 | 	add	local02, #12
29f0c     10 37 02 F1 | 	add	local13, local02
29f10     1B 5D 48 FC | 	wrbyte	#46, local13
29f14     01 26 06 F1 | 	add	local05, #1
29f18     0C 20 86 F1 | 	sub	local02, #12
29f1c                 | LR__4325
29f1c     19 13 32 F9 | 	getword	arg01, local11, #0
29f20     07 12 4E F7 | 	zerox	arg01, #7 wz
29f24     00 FA 05 56 |  if_ne	mov	result1, #0
29f28                 | ' 
29f28                 | ' 	return 0;
29f28     00 FA 05 A6 |  if_e	mov	result1, #0
29f2c     00 FA 0D F2 | 	cmp	result1, #0 wz
29f30     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
29f34     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
29f38     50 00 90 AD |  if_e	jmp	#LR__4326
29f3c     1C 1E 06 F1 | 	add	local01, #28
29f40     0F 31 02 FB | 	rdlong	local10, local01
29f44     1C 1E 86 F1 | 	sub	local01, #28
29f48     14 2D 02 F6 | 	mov	local08, local06
29f4c     18 2D 02 F1 | 	add	local08, local10
29f50     16 13 CA FA | 	rdbyte	arg01, local08 wz
29f54     00 FA 05 56 |  if_ne	mov	result1, #0
29f58                 | ' 
29f58                 | ' 	return 0;
29f58     00 FA 05 A6 |  if_e	mov	result1, #0
29f5c     00 FA 0D F2 | 	cmp	result1, #0 wz
29f60     28 00 90 AD |  if_e	jmp	#LR__4326
29f64     19 33 32 F9 | 	getword	local11, local11, #0
29f68     08 32 66 F0 | 	shl	local11, #8
29f6c     1C 1E 06 F1 | 	add	local01, #28
29f70     0F 39 02 FB | 	rdlong	local14, local01
29f74     1C 1E 86 F1 | 	sub	local01, #28
29f78     14 2F 02 F6 | 	mov	local09, local06
29f7c     1C 2F 02 F1 | 	add	local09, local14
29f80     17 35 C2 FA | 	rdbyte	local12, local09
29f84     1A 33 42 F5 | 	or	local11, local12
29f88     01 28 06 F1 | 	add	local06, #1
29f8c                 | LR__4326
29f8c     19 13 02 F6 | 	mov	arg01, local11
29f90     01 00 00 FF 
29f94     52 15 06 F6 | 	mov	arg02, ##850
29f98     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
29f9c     FD 32 02 F6 | 	mov	local11, result1
29fa0     19 25 02 F6 | 	mov	local04, local11
29fa4     0F 24 4E F7 | 	zerox	local04, #15 wz
29fa8     00 26 06 A6 |  if_e	mov	local05, #0
29fac     30 00 90 AD |  if_e	jmp	#LR__4327
29fb0     19 13 32 F9 | 	getword	arg01, local11, #0
29fb4     13 15 02 F6 | 	mov	arg02, local05
29fb8     0C 20 06 F1 | 	add	local02, #12
29fbc     10 15 02 F1 | 	add	arg02, local02
29fc0     0C 16 06 F6 | 	mov	arg03, #12
29fc4     13 17 82 F1 | 	sub	arg03, local05
29fc8     0C 20 86 F1 | 	sub	local02, #12
29fcc     EC DF BF FD | 	call	#_fatfs_cc_put_utf
29fd0     FD 38 0A F6 | 	mov	local14, result1 wz
29fd4     00 26 06 A6 |  if_e	mov	local05, #0
29fd8     1C 27 02 51 |  if_ne	add	local05, local14
29fdc     D8 FE 9F 5D |  if_ne	jmp	#LR__4324
29fe0                 | LR__4327
29fe0     13 25 02 F6 | 	mov	local04, local05
29fe4     0C 20 06 F1 | 	add	local02, #12
29fe8     10 25 02 F1 | 	add	local04, local02
29fec     12 01 48 FC | 	wrbyte	#0, local04
29ff0     10 20 06 F1 | 	add	local02, #16
29ff4     10 25 CA FA | 	rdbyte	local04, local02 wz
29ff8     1C 20 86 F1 | 	sub	local02, #28
29ffc     F8 00 90 5D |  if_ne	jmp	#LR__4333
2a000     00 26 0E F2 | 	cmp	local05, #0 wz
2a004     1C 00 90 5D |  if_ne	jmp	#LR__4328
2a008     13 37 02 F6 | 	mov	local13, local05
2a00c     1C 20 06 F1 | 	add	local02, #28
2a010     10 37 02 F1 | 	add	local13, local02
2a014     1B 7F 48 FC | 	wrbyte	#63, local13
2a018     01 26 06 F1 | 	add	local05, #1
2a01c     1C 20 86 F1 | 	sub	local02, #28
2a020     A4 00 90 FD | 	jmp	#LR__4332
2a024                 | LR__4328
2a024                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2a024     00 26 06 F6 | 	mov	local05, #0
2a028     00 28 06 F6 | 	mov	local06, #0
2a02c     08 3A 06 F6 | 	mov	local15, #8
2a030                 | LR__4329
2a030     14 25 02 F6 | 	mov	local04, local06
2a034     0C 20 06 F1 | 	add	local02, #12
2a038     10 25 02 F1 | 	add	local04, local02
2a03c     12 37 CA FA | 	rdbyte	local13, local04 wz
2a040     0C 20 86 F1 | 	sub	local02, #12
2a044     80 00 90 AD |  if_e	jmp	#LR__4331
2a048     14 2D 02 F6 | 	mov	local08, local06
2a04c     0C 20 06 F1 | 	add	local02, #12
2a050     10 2D 02 F1 | 	add	local08, local02
2a054     16 33 C2 FA | 	rdbyte	local11, local08
2a058     19 39 32 F9 | 	getword	local14, local11, #0
2a05c     2E 38 0E F2 | 	cmp	local14, #46 wz
2a060     0C 20 86 F1 | 	sub	local02, #12
2a064     10 3A 06 A6 |  if_e	mov	local15, #16
2a068     19 39 32 F9 | 	getword	local14, local11, #0
2a06c     41 38 16 F2 | 	cmp	local14, #65 wc
2a070     30 00 90 CD |  if_b	jmp	#LR__4330
2a074     19 2D 32 F9 | 	getword	local08, local11, #0
2a078     5B 2C 16 F2 | 	cmp	local08, #91 wc
2a07c     24 00 90 3D |  if_ae	jmp	#LR__4330
2a080     1C 1E 06 F1 | 	add	local01, #28
2a084     0F 2F 02 FB | 	rdlong	local09, local01
2a088     1C 1E 86 F1 | 	sub	local01, #28
2a08c     0C 2E 06 F1 | 	add	local09, #12
2a090     17 31 C2 FA | 	rdbyte	local10, local09
2a094     1D 39 E2 F8 | 	getbyte	local14, local15, #0
2a098     1C 31 CA F7 | 	test	local10, local14 wz
2a09c     19 33 32 59 |  if_ne	getword	local11, local11, #0
2a0a0     20 32 06 51 |  if_ne	add	local11, #32
2a0a4                 | LR__4330
2a0a4     13 39 02 F6 | 	mov	local14, local05
2a0a8     1C 20 06 F1 | 	add	local02, #28
2a0ac     10 39 02 F1 | 	add	local14, local02
2a0b0     19 33 32 F9 | 	getword	local11, local11, #0
2a0b4     1C 33 42 FC | 	wrbyte	local11, local14
2a0b8     01 28 06 F1 | 	add	local06, #1
2a0bc     01 26 06 F1 | 	add	local05, #1
2a0c0     1C 20 86 F1 | 	sub	local02, #28
2a0c4     68 FF 9F FD | 	jmp	#LR__4329
2a0c8                 | LR__4331
2a0c8                 | LR__4332
2a0c8     1C 20 06 F1 | 	add	local02, #28
2a0cc     10 27 02 F1 | 	add	local05, local02
2a0d0     13 01 48 FC | 	wrbyte	#0, local05
2a0d4     1C 1E 06 F1 | 	add	local01, #28
2a0d8     0F 25 02 FB | 	rdlong	local04, local01
2a0dc     1C 1E 86 F1 | 	sub	local01, #28
2a0e0     0C 24 06 F1 | 	add	local04, #12
2a0e4     12 37 CA FA | 	rdbyte	local13, local04 wz
2a0e8     1C 20 86 F1 | 	sub	local02, #28
2a0ec     0C 20 06 A1 |  if_e	add	local02, #12
2a0f0     10 01 48 AC |  if_e	wrbyte	#0, local02
2a0f4     0C 20 86 A1 |  if_e	sub	local02, #12
2a0f8                 | LR__4333
2a0f8     1C 1E 06 F1 | 	add	local01, #28
2a0fc     0F 35 02 FB | 	rdlong	local12, local01
2a100     0B 34 06 F1 | 	add	local12, #11
2a104     1A 25 C2 FA | 	rdbyte	local04, local12
2a108     3F 24 06 F5 | 	and	local04, #63
2a10c     08 20 06 F1 | 	add	local02, #8
2a110     10 25 42 FC | 	wrbyte	local04, local02
2a114     08 20 86 F1 | 	sub	local02, #8
2a118     0F 13 02 FB | 	rdlong	arg01, local01
2a11c     1C 12 06 F1 | 	add	arg01, #28
2a120                 | ' {
2a120                 | ' 
2a120                 | ' 	return *((DWORD*)ptr);
2a120     09 FB 01 FB | 	rdlong	result1, arg01
2a124     10 FB 61 FC | 	wrlong	result1, local02
2a128     0F 13 02 FB | 	rdlong	arg01, local01
2a12c     16 12 06 F1 | 	add	arg01, #22
2a130                 | ' {
2a130                 | ' 
2a130                 | ' 	return *((WORD*)ptr);
2a130     09 FB E1 FA | 	rdword	result1, arg01
2a134     06 20 06 F1 | 	add	local02, #6
2a138     10 FB 51 FC | 	wrword	result1, local02
2a13c     0F 13 02 FB | 	rdlong	arg01, local01
2a140     18 12 06 F1 | 	add	arg01, #24
2a144                 | ' {
2a144                 | ' 
2a144                 | ' 	return *((WORD*)ptr);
2a144     09 FB E1 FA | 	rdword	result1, arg01
2a148     02 20 86 F1 | 	sub	local02, #2
2a14c     10 FB 51 FC | 	wrword	result1, local02
2a150                 | LR__4334
2a150     A7 F0 03 F6 | 	mov	ptra, fp
2a154     B2 00 A0 FD | 	call	#popregs_
2a158                 | _fatfs_cc_get_fileinfo_ret
2a158     2D 00 64 FD | 	ret
2a15c                 | 
2a15c                 | _fatfs_cc_create_name
2a15c     0D 4A 05 F6 | 	mov	COUNT_, #13
2a160     A8 00 A0 FD | 	call	#pushregs_
2a164     34 F0 07 F1 | 	add	ptra, #52
2a168     04 4E 05 F1 | 	add	fp, #4
2a16c     A7 12 62 FC | 	wrlong	arg01, fp
2a170     04 4E 05 F1 | 	add	fp, #4
2a174     A7 14 62 FC | 	wrlong	arg02, fp
2a178     0A FB 01 FB | 	rdlong	result1, arg02
2a17c     28 4E 05 F1 | 	add	fp, #40
2a180     A7 FA 61 FC | 	wrlong	result1, fp
2a184     2C 4E 85 F1 | 	sub	fp, #44
2a188     A7 FA 01 FB | 	rdlong	result1, fp
2a18c     FD 1E 02 FB | 	rdlong	local01, result1
2a190     0C 1E 06 F1 | 	add	local01, #12
2a194     0F 21 02 FB | 	rdlong	local02, local01
2a198     14 4E 05 F1 | 	add	fp, #20
2a19c     A7 20 62 FC | 	wrlong	local02, fp
2a1a0     14 4E 05 F1 | 	add	fp, #20
2a1a4     A7 00 68 FC | 	wrlong	#0, fp
2a1a8     2C 4E 85 F1 | 	sub	fp, #44
2a1ac                 | ' 
2a1ac                 | ' 
2a1ac                 | ' 
2a1ac                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2a1ac                 | ' 	for (;;) {
2a1ac                 | LR__4340
2a1ac     30 4E 05 F1 | 	add	fp, #48
2a1b0     A7 12 02 F6 | 	mov	arg01, fp
2a1b4     30 4E 85 F1 | 	sub	fp, #48
2a1b8     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
2a1bc     1C 4E 05 F1 | 	add	fp, #28
2a1c0     A7 FA 61 FC | 	wrlong	result1, fp
2a1c4     1C 4E 85 F1 | 	sub	fp, #28
2a1c8     FF FF 7F FF 
2a1cc     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2a1d0     06 FA 05 A6 |  if_e	mov	result1, #6
2a1d4     74 08 90 AD |  if_e	jmp	#LR__4380
2a1d8     1C 4E 05 F1 | 	add	fp, #28
2a1dc     A7 1E 02 FB | 	rdlong	local01, fp
2a1e0     1C 4E 85 F1 | 	sub	fp, #28
2a1e4     80 00 00 FF 
2a1e8     00 1E 16 F2 | 	cmp	local01, ##65536 wc
2a1ec     3C 00 90 CD |  if_b	jmp	#LR__4341
2a1f0     18 4E 05 F1 | 	add	fp, #24
2a1f4     A7 22 02 FB | 	rdlong	local03, fp
2a1f8     14 4E 05 F1 | 	add	fp, #20
2a1fc     A7 1E 02 FB | 	rdlong	local01, fp
2a200     0F 25 02 F6 | 	mov	local04, local01
2a204     01 24 06 F1 | 	add	local04, #1
2a208     A7 24 62 FC | 	wrlong	local04, fp
2a20c     01 1E 66 F0 | 	shl	local01, #1
2a210     11 1F 02 F1 | 	add	local01, local03
2a214     10 4E 85 F1 | 	sub	fp, #16
2a218     A7 26 02 FB | 	rdlong	local05, fp
2a21c     1C 4E 85 F1 | 	sub	fp, #28
2a220     13 29 02 F6 | 	mov	local06, local05
2a224     10 28 46 F0 | 	shr	local06, #16
2a228     0F 29 52 FC | 	wrword	local06, local01
2a22c                 | LR__4341
2a22c     1C 4E 05 F1 | 	add	fp, #28
2a230     A7 1E 02 FB | 	rdlong	local01, fp
2a234     08 4E 85 F1 | 	sub	fp, #8
2a238     A7 1E 52 FC | 	wrword	local01, fp
2a23c     A7 1E E2 FA | 	rdword	local01, fp
2a240     14 4E 85 F1 | 	sub	fp, #20
2a244     20 1E 16 F2 | 	cmp	local01, #32 wc
2a248     B0 00 90 CD |  if_b	jmp	#LR__4343
2a24c     14 4E 05 F1 | 	add	fp, #20
2a250     A7 1E E2 FA | 	rdword	local01, fp
2a254     14 4E 85 F1 | 	sub	fp, #20
2a258     2F 1E 0E F2 | 	cmp	local01, #47 wz
2a25c     14 4E 05 51 |  if_ne	add	fp, #20
2a260     A7 24 E2 5A |  if_ne	rdword	local04, fp
2a264     14 4E 85 51 |  if_ne	sub	fp, #20
2a268     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
2a26c     8C 00 90 AD |  if_e	jmp	#LR__4343
2a270     14 4E 05 F1 | 	add	fp, #20
2a274     A7 12 E2 FA | 	rdword	arg01, fp
2a278     14 4E 85 F1 | 	sub	fp, #20
2a27c     80 12 16 F2 | 	cmp	arg01, #128 wc
2a280     24 00 90 3D |  if_ae	jmp	#LR__4342
2a284     80 01 00 FF 
2a288     C0 13 06 F6 | 	mov	arg01, ##@LR__5002
2a28c     14 4E 05 F1 | 	add	fp, #20
2a290     A7 14 E2 FA | 	rdword	arg02, fp
2a294     14 4E 85 F1 | 	sub	fp, #20
2a298     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2a29c     00 FA 0D F2 | 	cmp	result1, #0 wz
2a2a0     06 FA 05 56 |  if_ne	mov	result1, #6
2a2a4     A4 07 90 5D |  if_ne	jmp	#LR__4380
2a2a8                 | LR__4342
2a2a8     2C 4E 05 F1 | 	add	fp, #44
2a2ac     A7 28 02 FB | 	rdlong	local06, fp
2a2b0     2C 4E 85 F1 | 	sub	fp, #44
2a2b4     FF 28 16 F2 | 	cmp	local06, #255 wc
2a2b8     06 FA 05 36 |  if_ae	mov	result1, #6
2a2bc     8C 07 90 3D |  if_ae	jmp	#LR__4380
2a2c0     18 4E 05 F1 | 	add	fp, #24
2a2c4     A7 22 02 FB | 	rdlong	local03, fp
2a2c8     14 4E 05 F1 | 	add	fp, #20
2a2cc     A7 20 02 FB | 	rdlong	local02, fp
2a2d0     10 25 02 F6 | 	mov	local04, local02
2a2d4     01 24 06 F1 | 	add	local04, #1
2a2d8     A7 24 62 FC | 	wrlong	local04, fp
2a2dc     10 1F 02 F6 | 	mov	local01, local02
2a2e0     01 1E 66 F0 | 	shl	local01, #1
2a2e4     11 1F 02 F1 | 	add	local01, local03
2a2e8     18 4E 85 F1 | 	sub	fp, #24
2a2ec     A7 28 E2 FA | 	rdword	local06, fp
2a2f0     14 4E 85 F1 | 	sub	fp, #20
2a2f4     0F 29 52 FC | 	wrword	local06, local01
2a2f8     B0 FE 9F FD | 	jmp	#LR__4340
2a2fc                 | LR__4343
2a2fc     14 4E 05 F1 | 	add	fp, #20
2a300     A7 2A E2 FA | 	rdword	local07, fp
2a304     14 4E 85 F1 | 	sub	fp, #20
2a308     20 2A 16 F2 | 	cmp	local07, #32 wc
2a30c     10 4E 05 C1 |  if_b	add	fp, #16
2a310     A7 08 48 CC |  if_b	wrbyte	#4, fp
2a314     10 4E 85 C1 |  if_b	sub	fp, #16
2a318     74 00 90 CD |  if_b	jmp	#LR__4348
2a31c     97 24 48 FB | 	callpa	#(@LR__4346-@LR__4344)>>2,fcache_load_ptr_
2a320                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2a320                 | LR__4344
2a320     30 4E 05 F1 | 	add	fp, #48
2a324     A7 24 02 FB | 	rdlong	local04, fp
2a328     30 4E 85 F1 | 	sub	fp, #48
2a32c     12 2B C2 FA | 	rdbyte	local07, local04
2a330     2F 2A 0E F2 | 	cmp	local07, #47 wz
2a334     18 00 90 AD |  if_e	jmp	#LR__4345
2a338     30 4E 05 F1 | 	add	fp, #48
2a33c     A7 24 02 FB | 	rdlong	local04, fp
2a340     30 4E 85 F1 | 	sub	fp, #48
2a344     12 21 C2 FA | 	rdbyte	local02, local04
2a348     5C 20 0E F2 | 	cmp	local02, #92 wz
2a34c     18 00 90 5D |  if_ne	jmp	#LR__4347
2a350                 | LR__4345
2a350     30 4E 05 F1 | 	add	fp, #48
2a354     A7 1E 02 FB | 	rdlong	local01, fp
2a358     01 1E 06 F1 | 	add	local01, #1
2a35c     A7 1E 62 FC | 	wrlong	local01, fp
2a360     30 4E 85 F1 | 	sub	fp, #48
2a364     B8 FF 9F FD | 	jmp	#LR__4344
2a368                 | LR__4346
2a368                 | LR__4347
2a368     10 4E 05 F1 | 	add	fp, #16
2a36c     A7 00 48 FC | 	wrbyte	#0, fp
2a370     20 4E 05 F1 | 	add	fp, #32
2a374     A7 28 02 FB | 	rdlong	local06, fp
2a378     30 4E 85 F1 | 	sub	fp, #48
2a37c     14 2B C2 FA | 	rdbyte	local07, local06
2a380     20 2A 16 F2 | 	cmp	local07, #32 wc
2a384     10 4E 05 C1 |  if_b	add	fp, #16
2a388     A7 08 48 CC |  if_b	wrbyte	#4, fp
2a38c     10 4E 85 C1 |  if_b	sub	fp, #16
2a390                 | LR__4348
2a390     08 4E 05 F1 | 	add	fp, #8
2a394     A7 2A 02 FB | 	rdlong	local07, fp
2a398     28 4E 05 F1 | 	add	fp, #40
2a39c     A7 1E 02 FB | 	rdlong	local01, fp
2a3a0     30 4E 85 F1 | 	sub	fp, #48
2a3a4     15 1F 62 FC | 	wrlong	local01, local07
2a3a8     97 38 48 FB | 	callpa	#(@LR__4350-@LR__4349)>>2,fcache_load_ptr_
2a3ac                 | ' 	}
2a3ac                 | ' 	*path = p;
2a3ac                 | ' #line 2862 "ff.c"
2a3ac                 | ' 	while (di) {
2a3ac                 | LR__4349
2a3ac     2C 4E 05 F1 | 	add	fp, #44
2a3b0     A7 2A 0A FB | 	rdlong	local07, fp wz
2a3b4     2C 4E 85 F1 | 	sub	fp, #44
2a3b8     60 00 90 AD |  if_e	jmp	#LR__4351
2a3bc     18 4E 05 F1 | 	add	fp, #24
2a3c0     A7 28 02 FB | 	rdlong	local06, fp
2a3c4     14 4E 05 F1 | 	add	fp, #20
2a3c8     A7 24 02 FB | 	rdlong	local04, fp
2a3cc     01 24 86 F1 | 	sub	local04, #1
2a3d0     01 24 66 F0 | 	shl	local04, #1
2a3d4     14 25 02 F1 | 	add	local04, local06
2a3d8     12 29 E2 FA | 	rdword	local06, local04
2a3dc     18 4E 85 F1 | 	sub	fp, #24
2a3e0     A7 28 52 FC | 	wrword	local06, fp
2a3e4     A7 2A E2 FA | 	rdword	local07, fp
2a3e8     14 4E 85 F1 | 	sub	fp, #20
2a3ec     20 2A 0E F2 | 	cmp	local07, #32 wz
2a3f0     14 4E 05 51 |  if_ne	add	fp, #20
2a3f4     A7 1E E2 5A |  if_ne	rdword	local01, fp
2a3f8     14 4E 85 51 |  if_ne	sub	fp, #20
2a3fc     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
2a400     18 00 90 5D |  if_ne	jmp	#LR__4351
2a404     2C 4E 05 F1 | 	add	fp, #44
2a408     A7 1E 02 FB | 	rdlong	local01, fp
2a40c     01 1E 86 F1 | 	sub	local01, #1
2a410     A7 1E 62 FC | 	wrlong	local01, fp
2a414     2C 4E 85 F1 | 	sub	fp, #44
2a418     90 FF 9F FD | 	jmp	#LR__4349
2a41c                 | LR__4350
2a41c                 | LR__4351
2a41c     18 4E 05 F1 | 	add	fp, #24
2a420     A7 2C 02 FB | 	rdlong	local08, fp
2a424     14 4E 05 F1 | 	add	fp, #20
2a428     A7 24 02 FB | 	rdlong	local04, fp
2a42c     01 24 66 F0 | 	shl	local04, #1
2a430     16 25 02 F1 | 	add	local04, local08
2a434     12 01 58 FC | 	wrword	#0, local04
2a438     A7 2A 0A FB | 	rdlong	local07, fp wz
2a43c     2C 4E 85 F1 | 	sub	fp, #44
2a440     06 FA 05 A6 |  if_e	mov	result1, #6
2a444     04 06 90 AD |  if_e	jmp	#LR__4380
2a448                 | ' 
2a448                 | ' 
2a448                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2a448     28 4E 05 F1 | 	add	fp, #40
2a44c     A7 00 68 FC | 	wrlong	#0, fp
2a450     28 4E 85 F1 | 	sub	fp, #40
2a454     97 22 48 FB | 	callpa	#(@LR__4353-@LR__4352)>>2,fcache_load_ptr_
2a458                 | LR__4352
2a458     18 4E 05 F1 | 	add	fp, #24
2a45c     A7 2E 02 FB | 	rdlong	local09, fp
2a460     10 4E 05 F1 | 	add	fp, #16
2a464     A7 30 02 FB | 	rdlong	local10, fp
2a468     28 4E 85 F1 | 	sub	fp, #40
2a46c     01 30 66 F0 | 	shl	local10, #1
2a470     17 31 02 F1 | 	add	local10, local09
2a474     18 33 E2 FA | 	rdword	local11, local10
2a478     20 32 0E F2 | 	cmp	local11, #32 wz
2a47c     1C 00 90 5D |  if_ne	jmp	#LR__4354
2a480     28 4E 05 F1 | 	add	fp, #40
2a484     A7 34 02 FB | 	rdlong	local12, fp
2a488     1A 27 02 F6 | 	mov	local05, local12
2a48c     01 26 06 F1 | 	add	local05, #1
2a490     A7 26 62 FC | 	wrlong	local05, fp
2a494     28 4E 85 F1 | 	sub	fp, #40
2a498     BC FF 9F FD | 	jmp	#LR__4352
2a49c                 | LR__4353
2a49c                 | LR__4354
2a49c     28 4E 05 F1 | 	add	fp, #40
2a4a0     A7 2A 02 FB | 	rdlong	local07, fp
2a4a4     28 4E 85 F1 | 	sub	fp, #40
2a4a8     01 2A 16 F2 | 	cmp	local07, #1 wc
2a4ac     28 00 90 3D |  if_ae	jmp	#LR__4355
2a4b0     18 4E 05 F1 | 	add	fp, #24
2a4b4     A7 22 02 FB | 	rdlong	local03, fp
2a4b8     10 4E 05 F1 | 	add	fp, #16
2a4bc     A7 2E 02 FB | 	rdlong	local09, fp
2a4c0     28 4E 85 F1 | 	sub	fp, #40
2a4c4     01 2E 66 F0 | 	shl	local09, #1
2a4c8     11 2F 02 F1 | 	add	local09, local03
2a4cc     17 1F E2 FA | 	rdword	local01, local09
2a4d0     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a4d4     14 00 90 5D |  if_ne	jmp	#LR__4356
2a4d8                 | LR__4355
2a4d8     10 4E 05 F1 | 	add	fp, #16
2a4dc     A7 2A C2 FA | 	rdbyte	local07, fp
2a4e0     03 2A 46 F5 | 	or	local07, #3
2a4e4     A7 2A 42 FC | 	wrbyte	local07, fp
2a4e8     10 4E 85 F1 | 	sub	fp, #16
2a4ec                 | LR__4356
2a4ec     97 2C 48 FB | 	callpa	#(@LR__4358-@LR__4357)>>2,fcache_load_ptr_
2a4f0                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2a4f0                 | LR__4357
2a4f0     2C 4E 05 F1 | 	add	fp, #44
2a4f4     A7 2A 02 FB | 	rdlong	local07, fp
2a4f8     2C 4E 85 F1 | 	sub	fp, #44
2a4fc     01 2A 16 F2 | 	cmp	local07, #1 wc
2a500     44 00 90 CD |  if_b	jmp	#LR__4359
2a504     18 4E 05 F1 | 	add	fp, #24
2a508     A7 28 02 FB | 	rdlong	local06, fp
2a50c     14 4E 05 F1 | 	add	fp, #20
2a510     A7 22 02 FB | 	rdlong	local03, fp
2a514     2C 4E 85 F1 | 	sub	fp, #44
2a518     01 22 86 F1 | 	sub	local03, #1
2a51c     01 22 66 F0 | 	shl	local03, #1
2a520     14 23 02 F1 | 	add	local03, local06
2a524     11 1F E2 FA | 	rdword	local01, local03
2a528     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a52c     18 00 90 AD |  if_e	jmp	#LR__4359
2a530     2C 4E 05 F1 | 	add	fp, #44
2a534     A7 1E 02 FB | 	rdlong	local01, fp
2a538     01 1E 86 F1 | 	sub	local01, #1
2a53c     A7 1E 62 FC | 	wrlong	local01, fp
2a540     2C 4E 85 F1 | 	sub	fp, #44
2a544     A8 FF 9F FD | 	jmp	#LR__4357
2a548                 | LR__4358
2a548                 | LR__4359
2a548     04 4E 05 F1 | 	add	fp, #4
2a54c     A7 12 02 FB | 	rdlong	arg01, fp
2a550     04 4E 85 F1 | 	sub	fp, #4
2a554     20 12 06 F1 | 	add	arg01, #32
2a558     20 14 06 F6 | 	mov	arg02, #32
2a55c     0B 16 06 F6 | 	mov	arg03, #11
2a560     09 37 02 F6 | 	mov	local13, arg01
2a564     98 00 A0 FD | 	call	#\builtin_bytefill_
2a568     1B FB 01 F6 | 	mov	result1, local13
2a56c     0C 4E 05 F1 | 	add	fp, #12
2a570     A7 00 48 FC | 	wrbyte	#0, fp
2a574     A7 2A C2 FA | 	rdbyte	local07, fp
2a578     14 4E 05 F1 | 	add	fp, #20
2a57c     A7 2A 62 FC | 	wrlong	local07, fp
2a580     04 4E 05 F1 | 	add	fp, #4
2a584     A7 10 68 FC | 	wrlong	#8, fp
2a588     24 4E 85 F1 | 	sub	fp, #36
2a58c                 | ' 
2a58c                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2a58c                 | ' 	i = b = 0; ni = 8;
2a58c                 | ' 	for (;;) {
2a58c                 | LR__4360
2a58c     18 4E 05 F1 | 	add	fp, #24
2a590     A7 22 02 FB | 	rdlong	local03, fp
2a594     10 4E 05 F1 | 	add	fp, #16
2a598     A7 2E 02 FB | 	rdlong	local09, fp
2a59c     17 25 02 F6 | 	mov	local04, local09
2a5a0     01 24 06 F1 | 	add	local04, #1
2a5a4     A7 24 62 FC | 	wrlong	local04, fp
2a5a8     01 2E 66 F0 | 	shl	local09, #1
2a5ac     11 2F 02 F1 | 	add	local09, local03
2a5b0     17 29 E2 FA | 	rdword	local06, local09
2a5b4     14 4E 85 F1 | 	sub	fp, #20
2a5b8     A7 28 52 FC | 	wrword	local06, fp
2a5bc     A7 2A EA FA | 	rdword	local07, fp wz
2a5c0     14 4E 85 F1 | 	sub	fp, #20
2a5c4     74 03 90 AD |  if_e	jmp	#LR__4376
2a5c8     14 4E 05 F1 | 	add	fp, #20
2a5cc     A7 2A E2 FA | 	rdword	local07, fp
2a5d0     14 4E 85 F1 | 	sub	fp, #20
2a5d4     20 2A 0E F2 | 	cmp	local07, #32 wz
2a5d8     30 00 90 AD |  if_e	jmp	#LR__4361
2a5dc     14 4E 05 F1 | 	add	fp, #20
2a5e0     A7 1E E2 FA | 	rdword	local01, fp
2a5e4     14 4E 85 F1 | 	sub	fp, #20
2a5e8     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a5ec     34 00 90 5D |  if_ne	jmp	#LR__4362
2a5f0     28 4E 05 F1 | 	add	fp, #40
2a5f4     A7 24 02 FB | 	rdlong	local04, fp
2a5f8     04 4E 05 F1 | 	add	fp, #4
2a5fc     A7 30 02 FB | 	rdlong	local10, fp
2a600     2C 4E 85 F1 | 	sub	fp, #44
2a604     18 25 0A F2 | 	cmp	local04, local10 wz
2a608     18 00 90 AD |  if_e	jmp	#LR__4362
2a60c                 | LR__4361
2a60c     10 4E 05 F1 | 	add	fp, #16
2a610     A7 2A C2 FA | 	rdbyte	local07, fp
2a614     03 2A 46 F5 | 	or	local07, #3
2a618     A7 2A 42 FC | 	wrbyte	local07, fp
2a61c     10 4E 85 F1 | 	sub	fp, #16
2a620                 | ' 			cf |=  0x01  |  0x02 ;
2a620                 | ' 			continue;
2a620     68 FF 9F FD | 	jmp	#LR__4360
2a624                 | LR__4362
2a624     20 4E 05 F1 | 	add	fp, #32
2a628     A7 2A 02 FB | 	rdlong	local07, fp
2a62c     04 4E 05 F1 | 	add	fp, #4
2a630     A7 1E 02 FB | 	rdlong	local01, fp
2a634     24 4E 85 F1 | 	sub	fp, #36
2a638     0F 2B 12 F2 | 	cmp	local07, local01 wc
2a63c     1C 00 90 3D |  if_ae	jmp	#LR__4363
2a640     28 4E 05 F1 | 	add	fp, #40
2a644     A7 2C 02 FB | 	rdlong	local08, fp
2a648     04 4E 05 F1 | 	add	fp, #4
2a64c     A7 30 02 FB | 	rdlong	local10, fp
2a650     2C 4E 85 F1 | 	sub	fp, #44
2a654     18 2D 0A F2 | 	cmp	local08, local10 wz
2a658     B0 00 90 5D |  if_ne	jmp	#LR__4365
2a65c                 | LR__4363
2a65c     24 4E 05 F1 | 	add	fp, #36
2a660     A7 2A 02 FB | 	rdlong	local07, fp
2a664     24 4E 85 F1 | 	sub	fp, #36
2a668     0B 2A 0E F2 | 	cmp	local07, #11 wz
2a66c     18 00 90 5D |  if_ne	jmp	#LR__4364
2a670     10 4E 05 F1 | 	add	fp, #16
2a674     A7 2A C2 FA | 	rdbyte	local07, fp
2a678     03 2A 46 F5 | 	or	local07, #3
2a67c     A7 2A 42 FC | 	wrbyte	local07, fp
2a680     10 4E 85 F1 | 	sub	fp, #16
2a684                 | ' 				cf |=  0x01  |  0x02 ;
2a684                 | ' 				break;
2a684     B4 02 90 FD | 	jmp	#LR__4376
2a688                 | LR__4364
2a688     28 4E 05 F1 | 	add	fp, #40
2a68c     A7 2A 02 FB | 	rdlong	local07, fp
2a690     04 4E 05 F1 | 	add	fp, #4
2a694     A7 1E 02 FB | 	rdlong	local01, fp
2a698     2C 4E 85 F1 | 	sub	fp, #44
2a69c     0F 2B 0A F2 | 	cmp	local07, local01 wz
2a6a0     10 4E 05 51 |  if_ne	add	fp, #16
2a6a4     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2a6a8     03 2A 46 55 |  if_ne	or	local07, #3
2a6ac     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2a6b0     10 4E 85 51 |  if_ne	sub	fp, #16
2a6b4     28 4E 05 F1 | 	add	fp, #40
2a6b8     A7 2A 02 FB | 	rdlong	local07, fp
2a6bc     04 4E 05 F1 | 	add	fp, #4
2a6c0     A7 20 02 FB | 	rdlong	local02, fp
2a6c4     2C 4E 85 F1 | 	sub	fp, #44
2a6c8     10 2B 1A F2 | 	cmp	local07, local02 wcz
2a6cc     6C 02 90 1D |  if_a	jmp	#LR__4376
2a6d0     2C 4E 05 F1 | 	add	fp, #44
2a6d4     A7 2A 02 FB | 	rdlong	local07, fp
2a6d8     04 4E 85 F1 | 	sub	fp, #4
2a6dc     A7 2A 62 FC | 	wrlong	local07, fp
2a6e0     08 4E 85 F1 | 	sub	fp, #8
2a6e4     A7 10 68 FC | 	wrlong	#8, fp
2a6e8     04 4E 05 F1 | 	add	fp, #4
2a6ec     A7 16 68 FC | 	wrlong	#11, fp
2a6f0     18 4E 85 F1 | 	sub	fp, #24
2a6f4     A7 32 C2 FA | 	rdbyte	local11, fp
2a6f8     19 2B E2 F8 | 	getbyte	local07, local11, #0
2a6fc     02 2A 66 F0 | 	shl	local07, #2
2a700     A7 2A 42 FC | 	wrbyte	local07, fp
2a704     0C 4E 85 F1 | 	sub	fp, #12
2a708                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2a708                 | ' 			continue;
2a708     80 FE 9F FD | 	jmp	#LR__4360
2a70c                 | LR__4365
2a70c     14 4E 05 F1 | 	add	fp, #20
2a710     A7 2A E2 FA | 	rdword	local07, fp
2a714     14 4E 85 F1 | 	sub	fp, #20
2a718     80 2A 16 F2 | 	cmp	local07, #128 wc
2a71c     6C 00 90 CD |  if_b	jmp	#LR__4367
2a720     10 4E 05 F1 | 	add	fp, #16
2a724     A7 2A C2 FA | 	rdbyte	local07, fp
2a728     02 2A 46 F5 | 	or	local07, #2
2a72c     A7 2A 42 FC | 	wrbyte	local07, fp
2a730     04 4E 05 F1 | 	add	fp, #4
2a734     A7 12 E2 FA | 	rdword	arg01, fp
2a738     14 4E 85 F1 | 	sub	fp, #20
2a73c     01 00 00 FF 
2a740     52 15 06 F6 | 	mov	arg02, ##850
2a744     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2a748     14 4E 05 F1 | 	add	fp, #20
2a74c     A7 FA 51 FC | 	wrword	result1, fp
2a750     A7 2A E2 FA | 	rdword	local07, fp
2a754     14 4E 85 F1 | 	sub	fp, #20
2a758     80 2A CE F7 | 	test	local07, #128 wz
2a75c     2C 00 90 AD |  if_e	jmp	#LR__4366
2a760     14 4E 05 F1 | 	add	fp, #20
2a764     A7 20 E2 FA | 	rdword	local02, fp
2a768     7F 20 06 F5 | 	and	local02, #127
2a76c     01 00 00 FF 
2a770     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
2a774     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2a778     10 2B C2 FA | 	rdbyte	local07, local02
2a77c     A7 2A 52 FC | 	wrword	local07, fp
2a780     14 4E 85 F1 | 	sub	fp, #20
2a784     01 00 00 FF 
2a788     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
2a78c                 | LR__4366
2a78c                 | LR__4367
2a78c     14 4E 05 F1 | 	add	fp, #20
2a790     A7 2A E2 FA | 	rdword	local07, fp
2a794     14 4E 85 F1 | 	sub	fp, #20
2a798     00 2B 16 F2 | 	cmp	local07, #256 wc
2a79c     88 00 90 CD |  if_b	jmp	#LR__4369
2a7a0     24 4E 05 F1 | 	add	fp, #36
2a7a4     A7 2A 02 FB | 	rdlong	local07, fp
2a7a8     01 2A 86 F1 | 	sub	local07, #1
2a7ac     04 4E 85 F1 | 	sub	fp, #4
2a7b0     A7 20 02 FB | 	rdlong	local02, fp
2a7b4     20 4E 85 F1 | 	sub	fp, #32
2a7b8     15 21 12 F2 | 	cmp	local02, local07 wc
2a7bc     2C 00 90 CD |  if_b	jmp	#LR__4368
2a7c0     10 4E 05 F1 | 	add	fp, #16
2a7c4     A7 32 C2 FA | 	rdbyte	local11, fp
2a7c8     19 2B E2 F8 | 	getbyte	local07, local11, #0
2a7cc     03 2A 46 F5 | 	or	local07, #3
2a7d0     A7 2A 42 FC | 	wrbyte	local07, fp
2a7d4     14 4E 05 F1 | 	add	fp, #20
2a7d8     A7 2A 02 FB | 	rdlong	local07, fp
2a7dc     04 4E 85 F1 | 	sub	fp, #4
2a7e0     A7 2A 62 FC | 	wrlong	local07, fp
2a7e4     20 4E 85 F1 | 	sub	fp, #32
2a7e8                 | ' 				cf |=  0x01  |  0x02 ;
2a7e8                 | ' 				i = ni; continue;
2a7e8     A0 FD 9F FD | 	jmp	#LR__4360
2a7ec                 | LR__4368
2a7ec     04 4E 05 F1 | 	add	fp, #4
2a7f0     A7 2E 02 FB | 	rdlong	local09, fp
2a7f4     1C 4E 05 F1 | 	add	fp, #28
2a7f8     A7 30 02 FB | 	rdlong	local10, fp
2a7fc     18 25 02 F6 | 	mov	local04, local10
2a800     01 24 06 F1 | 	add	local04, #1
2a804     A7 24 62 FC | 	wrlong	local04, fp
2a808     20 2E 06 F1 | 	add	local09, #32
2a80c     17 31 02 F1 | 	add	local10, local09
2a810     0C 4E 85 F1 | 	sub	fp, #12
2a814     A7 22 E2 FA | 	rdword	local03, fp
2a818     14 4E 85 F1 | 	sub	fp, #20
2a81c     08 22 46 F0 | 	shr	local03, #8
2a820     18 23 42 FC | 	wrbyte	local03, local10
2a824     D4 00 90 FD | 	jmp	#LR__4375
2a828                 | LR__4369
2a828     14 4E 05 F1 | 	add	fp, #20
2a82c     A7 2A EA FA | 	rdword	local07, fp wz
2a830     14 4E 85 F1 | 	sub	fp, #20
2a834     20 00 90 AD |  if_e	jmp	#LR__4370
2a838     80 01 00 FF 
2a83c     C9 13 06 F6 | 	mov	arg01, ##@LR__5003
2a840     14 4E 05 F1 | 	add	fp, #20
2a844     A7 14 E2 FA | 	rdword	arg02, fp
2a848     14 4E 85 F1 | 	sub	fp, #20
2a84c     48 CB BF FD | 	call	#_fatfs_cc_strchr
2a850     00 FA 0D F2 | 	cmp	result1, #0 wz
2a854     20 00 90 AD |  if_e	jmp	#LR__4371
2a858                 | LR__4370
2a858     14 4E 05 F1 | 	add	fp, #20
2a85c     A7 BE 58 FC | 	wrword	#95, fp
2a860     04 4E 85 F1 | 	sub	fp, #4
2a864     A7 2A C2 FA | 	rdbyte	local07, fp
2a868     03 2A 46 F5 | 	or	local07, #3
2a86c     A7 2A 42 FC | 	wrbyte	local07, fp
2a870     10 4E 85 F1 | 	sub	fp, #16
2a874     84 00 90 FD | 	jmp	#LR__4374
2a878                 | LR__4371
2a878     14 4E 05 F1 | 	add	fp, #20
2a87c     A7 2A E2 FA | 	rdword	local07, fp
2a880     14 4E 85 F1 | 	sub	fp, #20
2a884     41 2A 16 F2 | 	cmp	local07, #65 wc
2a888     24 00 90 CD |  if_b	jmp	#LR__4372
2a88c     14 4E 05 F1 | 	add	fp, #20
2a890     A7 1E E2 FA | 	rdword	local01, fp
2a894     14 4E 85 F1 | 	sub	fp, #20
2a898     5B 1E 16 F2 | 	cmp	local01, #91 wc
2a89c     0C 4E 05 C1 |  if_b	add	fp, #12
2a8a0     A7 2A C2 CA |  if_b	rdbyte	local07, fp
2a8a4     02 2A 46 C5 |  if_b	or	local07, #2
2a8a8     A7 2A 42 CC |  if_b	wrbyte	local07, fp
2a8ac     0C 4E 85 C1 |  if_b	sub	fp, #12
2a8b0                 | LR__4372
2a8b0     14 4E 05 F1 | 	add	fp, #20
2a8b4     A7 2A E2 FA | 	rdword	local07, fp
2a8b8     14 4E 85 F1 | 	sub	fp, #20
2a8bc     61 2A 16 F2 | 	cmp	local07, #97 wc
2a8c0     38 00 90 CD |  if_b	jmp	#LR__4373
2a8c4     14 4E 05 F1 | 	add	fp, #20
2a8c8     A7 1E E2 FA | 	rdword	local01, fp
2a8cc     14 4E 85 F1 | 	sub	fp, #20
2a8d0     7B 1E 16 F2 | 	cmp	local01, #123 wc
2a8d4     24 00 90 3D |  if_ae	jmp	#LR__4373
2a8d8     0C 4E 05 F1 | 	add	fp, #12
2a8dc     A7 2A C2 FA | 	rdbyte	local07, fp
2a8e0     01 2A 46 F5 | 	or	local07, #1
2a8e4     A7 2A 42 FC | 	wrbyte	local07, fp
2a8e8     08 4E 05 F1 | 	add	fp, #8
2a8ec     A7 2A E2 FA | 	rdword	local07, fp
2a8f0     20 2A 86 F1 | 	sub	local07, #32
2a8f4     A7 2A 52 FC | 	wrword	local07, fp
2a8f8     14 4E 85 F1 | 	sub	fp, #20
2a8fc                 | LR__4373
2a8fc                 | LR__4374
2a8fc                 | LR__4375
2a8fc     04 4E 05 F1 | 	add	fp, #4
2a900     A7 32 02 FB | 	rdlong	local11, fp
2a904     19 2F 02 F6 | 	mov	local09, local11
2a908     1C 4E 05 F1 | 	add	fp, #28
2a90c     A7 20 02 FB | 	rdlong	local02, fp
2a910     10 25 02 F6 | 	mov	local04, local02
2a914     01 24 06 F1 | 	add	local04, #1
2a918     A7 24 62 FC | 	wrlong	local04, fp
2a91c     10 31 02 F6 | 	mov	local10, local02
2a920     20 2E 06 F1 | 	add	local09, #32
2a924     17 31 02 F1 | 	add	local10, local09
2a928     0C 4E 85 F1 | 	sub	fp, #12
2a92c     A7 22 E2 FA | 	rdword	local03, fp
2a930     14 4E 85 F1 | 	sub	fp, #20
2a934     18 23 42 FC | 	wrbyte	local03, local10
2a938     50 FC 9F FD | 	jmp	#LR__4360
2a93c                 | LR__4376
2a93c     04 4E 05 F1 | 	add	fp, #4
2a940     A7 32 02 FB | 	rdlong	local11, fp
2a944     04 4E 85 F1 | 	sub	fp, #4
2a948     20 32 06 F1 | 	add	local11, #32
2a94c     19 2B C2 FA | 	rdbyte	local07, local11
2a950     E5 2A 0E F2 | 	cmp	local07, #229 wz
2a954     04 4E 05 A1 |  if_e	add	fp, #4
2a958     A7 2A 02 AB |  if_e	rdlong	local07, fp
2a95c     04 4E 85 A1 |  if_e	sub	fp, #4
2a960     20 2A 06 A1 |  if_e	add	local07, #32
2a964     15 0B 48 AC |  if_e	wrbyte	#5, local07
2a968     24 4E 05 F1 | 	add	fp, #36
2a96c     A7 2A 02 FB | 	rdlong	local07, fp
2a970     24 4E 85 F1 | 	sub	fp, #36
2a974     08 2A 0E F2 | 	cmp	local07, #8 wz
2a978     0C 4E 05 A1 |  if_e	add	fp, #12
2a97c     A7 2A C2 AA |  if_e	rdbyte	local07, fp
2a980     02 2A 66 A0 |  if_e	shl	local07, #2
2a984     A7 2A 42 AC |  if_e	wrbyte	local07, fp
2a988     0C 4E 85 A1 |  if_e	sub	fp, #12
2a98c     0C 4E 05 F1 | 	add	fp, #12
2a990     A7 2A C2 FA | 	rdbyte	local07, fp
2a994     0C 4E 85 F1 | 	sub	fp, #12
2a998     0C 2A 06 F5 | 	and	local07, #12
2a99c     0C 2A 0E F2 | 	cmp	local07, #12 wz
2a9a0     18 00 90 AD |  if_e	jmp	#LR__4377
2a9a4     0C 4E 05 F1 | 	add	fp, #12
2a9a8     A7 1E C2 FA | 	rdbyte	local01, fp
2a9ac     0C 4E 85 F1 | 	sub	fp, #12
2a9b0     03 1E 06 F5 | 	and	local01, #3
2a9b4     03 1E 0E F2 | 	cmp	local01, #3 wz
2a9b8     14 00 90 5D |  if_ne	jmp	#LR__4378
2a9bc                 | LR__4377
2a9bc     10 4E 05 F1 | 	add	fp, #16
2a9c0     A7 2A C2 FA | 	rdbyte	local07, fp
2a9c4     02 2A 46 F5 | 	or	local07, #2
2a9c8     A7 2A 42 FC | 	wrbyte	local07, fp
2a9cc     10 4E 85 F1 | 	sub	fp, #16
2a9d0                 | LR__4378
2a9d0     10 4E 05 F1 | 	add	fp, #16
2a9d4     A7 2A C2 FA | 	rdbyte	local07, fp
2a9d8     10 4E 85 F1 | 	sub	fp, #16
2a9dc     02 2A CE F7 | 	test	local07, #2 wz
2a9e0     48 00 90 5D |  if_ne	jmp	#LR__4379
2a9e4     0C 4E 05 F1 | 	add	fp, #12
2a9e8     A7 2A C2 FA | 	rdbyte	local07, fp
2a9ec     0C 4E 85 F1 | 	sub	fp, #12
2a9f0     01 2A CE F7 | 	test	local07, #1 wz
2a9f4     10 4E 05 51 |  if_ne	add	fp, #16
2a9f8     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2a9fc     10 2A 46 55 |  if_ne	or	local07, #16
2aa00     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2aa04     10 4E 85 51 |  if_ne	sub	fp, #16
2aa08     0C 4E 05 F1 | 	add	fp, #12
2aa0c     A7 2A C2 FA | 	rdbyte	local07, fp
2aa10     0C 4E 85 F1 | 	sub	fp, #12
2aa14     04 2A CE F7 | 	test	local07, #4 wz
2aa18     10 4E 05 51 |  if_ne	add	fp, #16
2aa1c     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2aa20     08 2A 46 55 |  if_ne	or	local07, #8
2aa24     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2aa28     10 4E 85 51 |  if_ne	sub	fp, #16
2aa2c                 | LR__4379
2aa2c     04 4E 05 F1 | 	add	fp, #4
2aa30     A7 2A 02 FB | 	rdlong	local07, fp
2aa34     0C 4E 05 F1 | 	add	fp, #12
2aa38     A7 1E C2 FA | 	rdbyte	local01, fp
2aa3c     10 4E 85 F1 | 	sub	fp, #16
2aa40     2B 2A 06 F1 | 	add	local07, #43
2aa44     15 1F 42 FC | 	wrbyte	local01, local07
2aa48                 | ' 	}
2aa48                 | ' 
2aa48                 | ' 	dp->fn[ 11 ] = cf;
2aa48                 | ' 
2aa48                 | ' 	return FR_OK;
2aa48     00 FA 05 F6 | 	mov	result1, #0
2aa4c                 | LR__4380
2aa4c     A7 F0 03 F6 | 	mov	ptra, fp
2aa50     B2 00 A0 FD | 	call	#popregs_
2aa54                 | _fatfs_cc_create_name_ret
2aa54     2D 00 64 FD | 	ret
2aa58                 | 
2aa58                 | _fatfs_cc_follow_path
2aa58     02 4A 05 F6 | 	mov	COUNT_, #2
2aa5c     A8 00 A0 FD | 	call	#pushregs_
2aa60     18 F0 07 F1 | 	add	ptra, #24
2aa64     04 4E 05 F1 | 	add	fp, #4
2aa68     A7 12 62 FC | 	wrlong	arg01, fp
2aa6c     04 4E 05 F1 | 	add	fp, #4
2aa70     A7 14 62 FC | 	wrlong	arg02, fp
2aa74     04 4E 85 F1 | 	sub	fp, #4
2aa78     A7 FA 01 FB | 	rdlong	result1, fp
2aa7c     FD 1E 02 FB | 	rdlong	local01, result1
2aa80     10 4E 05 F1 | 	add	fp, #16
2aa84     A7 1E 62 FC | 	wrlong	local01, fp
2aa88     14 4E 85 F1 | 	sub	fp, #20
2aa8c     97 24 48 FB | 	callpa	#(@LR__4392-@LR__4390)>>2,fcache_load_ptr_
2aa90                 | ' )
2aa90                 | ' {
2aa90                 | ' 	FRESULT res;
2aa90                 | ' 	BYTE ns;
2aa90                 | ' 	FATFS *fs = dp->obj.fs;
2aa90                 | ' #line 3034 "ff.c"
2aa90                 | ' 	{
2aa90                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2aa90                 | LR__4390
2aa90     08 4E 05 F1 | 	add	fp, #8
2aa94     A7 1E 02 FB | 	rdlong	local01, fp
2aa98     08 4E 85 F1 | 	sub	fp, #8
2aa9c     0F 1F C2 FA | 	rdbyte	local01, local01
2aaa0     2F 1E 0E F2 | 	cmp	local01, #47 wz
2aaa4     18 00 90 AD |  if_e	jmp	#LR__4391
2aaa8     08 4E 05 F1 | 	add	fp, #8
2aaac     A7 1E 02 FB | 	rdlong	local01, fp
2aab0     08 4E 85 F1 | 	sub	fp, #8
2aab4     0F 1F C2 FA | 	rdbyte	local01, local01
2aab8     5C 1E 0E F2 | 	cmp	local01, #92 wz
2aabc     18 00 90 5D |  if_ne	jmp	#LR__4393
2aac0                 | LR__4391
2aac0     08 4E 05 F1 | 	add	fp, #8
2aac4     A7 1E 02 FB | 	rdlong	local01, fp
2aac8     01 1E 06 F1 | 	add	local01, #1
2aacc     A7 1E 62 FC | 	wrlong	local01, fp
2aad0     08 4E 85 F1 | 	sub	fp, #8
2aad4     B8 FF 9F FD | 	jmp	#LR__4390
2aad8                 | LR__4392
2aad8                 | LR__4393
2aad8     04 4E 05 F1 | 	add	fp, #4
2aadc     A7 1E 02 FB | 	rdlong	local01, fp
2aae0     08 1E 06 F1 | 	add	local01, #8
2aae4     0F 01 68 FC | 	wrlong	#0, local01
2aae8     04 4E 05 F1 | 	add	fp, #4
2aaec     A7 1E 02 FB | 	rdlong	local01, fp
2aaf0     08 4E 85 F1 | 	sub	fp, #8
2aaf4     0F 1F C2 FA | 	rdbyte	local01, local01
2aaf8     20 1E 16 F2 | 	cmp	local01, #32 wc
2aafc     30 00 90 3D |  if_ae	jmp	#LR__4394
2ab00     04 4E 05 F1 | 	add	fp, #4
2ab04     A7 1E 02 FB | 	rdlong	local01, fp
2ab08     2B 1E 06 F1 | 	add	local01, #43
2ab0c     0F 01 49 FC | 	wrbyte	#128, local01
2ab10     A7 12 02 FB | 	rdlong	arg01, fp
2ab14     04 4E 85 F1 | 	sub	fp, #4
2ab18     00 14 06 F6 | 	mov	arg02, #0
2ab1c     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
2ab20     0C 4E 05 F1 | 	add	fp, #12
2ab24     A7 FA 61 FC | 	wrlong	result1, fp
2ab28     0C 4E 85 F1 | 	sub	fp, #12
2ab2c     1C 01 90 FD | 	jmp	#LR__4398
2ab30                 | LR__4394
2ab30                 | ' 		for (;;) {
2ab30                 | LR__4395
2ab30     04 4E 05 F1 | 	add	fp, #4
2ab34     A7 12 02 FB | 	rdlong	arg01, fp
2ab38     04 4E 05 F1 | 	add	fp, #4
2ab3c     A7 14 02 F6 | 	mov	arg02, fp
2ab40     08 4E 85 F1 | 	sub	fp, #8
2ab44     14 F6 BF FD | 	call	#_fatfs_cc_create_name
2ab48     0C 4E 05 F1 | 	add	fp, #12
2ab4c     A7 FA 61 FC | 	wrlong	result1, fp
2ab50     00 FA 4D F2 | 	cmps	result1, #0 wz
2ab54     0C 4E 85 F1 | 	sub	fp, #12
2ab58     F0 00 90 5D |  if_ne	jmp	#LR__4397
2ab5c     04 4E 05 F1 | 	add	fp, #4
2ab60     A7 12 02 FB | 	rdlong	arg01, fp
2ab64     04 4E 85 F1 | 	sub	fp, #4
2ab68     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
2ab6c     0C 4E 05 F1 | 	add	fp, #12
2ab70     A7 FA 61 FC | 	wrlong	result1, fp
2ab74     08 4E 85 F1 | 	sub	fp, #8
2ab78     A7 1E 02 FB | 	rdlong	local01, fp
2ab7c     2B 1E 06 F1 | 	add	local01, #43
2ab80     0F 1F C2 FA | 	rdbyte	local01, local01
2ab84     0C 4E 05 F1 | 	add	fp, #12
2ab88     A7 1E 42 FC | 	wrbyte	local01, fp
2ab8c     04 4E 85 F1 | 	sub	fp, #4
2ab90     A7 1E 0A FB | 	rdlong	local01, fp wz
2ab94     0C 4E 85 F1 | 	sub	fp, #12
2ab98     34 00 90 AD |  if_e	jmp	#LR__4396
2ab9c     0C 4E 05 F1 | 	add	fp, #12
2aba0     A7 1E 02 FB | 	rdlong	local01, fp
2aba4     0C 4E 85 F1 | 	sub	fp, #12
2aba8     04 1E 0E F2 | 	cmp	local01, #4 wz
2abac     9C 00 90 5D |  if_ne	jmp	#LR__4397
2abb0     10 4E 05 F1 | 	add	fp, #16
2abb4     A7 1E C2 FA | 	rdbyte	local01, fp
2abb8     10 4E 85 F1 | 	sub	fp, #16
2abbc     04 1E CE F7 | 	test	local01, #4 wz
2abc0     0C 4E 05 A1 |  if_e	add	fp, #12
2abc4     A7 0A 68 AC |  if_e	wrlong	#5, fp
2abc8     0C 4E 85 A1 |  if_e	sub	fp, #12
2abcc                 | ' 					}
2abcc                 | ' 				}
2abcc                 | ' 				break;
2abcc     7C 00 90 FD | 	jmp	#LR__4397
2abd0                 | LR__4396
2abd0     10 4E 05 F1 | 	add	fp, #16
2abd4     A7 1E C2 FA | 	rdbyte	local01, fp
2abd8     10 4E 85 F1 | 	sub	fp, #16
2abdc     04 1E CE F7 | 	test	local01, #4 wz
2abe0     68 00 90 5D |  if_ne	jmp	#LR__4397
2abe4     04 4E 05 F1 | 	add	fp, #4
2abe8     A7 1E 02 FB | 	rdlong	local01, fp
2abec     04 4E 85 F1 | 	sub	fp, #4
2abf0     06 1E 06 F1 | 	add	local01, #6
2abf4     0F 1F C2 FA | 	rdbyte	local01, local01
2abf8     10 1E CE F7 | 	test	local01, #16 wz
2abfc     0C 4E 05 A1 |  if_e	add	fp, #12
2ac00     A7 0A 68 AC |  if_e	wrlong	#5, fp
2ac04     0C 4E 85 A1 |  if_e	sub	fp, #12
2ac08                 | ' 				res = FR_NO_PATH; break;
2ac08     40 00 90 AD |  if_e	jmp	#LR__4397
2ac0c     04 4E 05 F1 | 	add	fp, #4
2ac10     A7 20 02 FB | 	rdlong	local02, fp
2ac14     10 1F 02 F6 | 	mov	local01, local02
2ac18     10 4E 05 F1 | 	add	fp, #16
2ac1c     A7 14 02 FB | 	rdlong	arg02, fp
2ac20     0A 13 02 F6 | 	mov	arg01, arg02
2ac24     34 14 06 F1 | 	add	arg02, #52
2ac28     14 4E 85 F1 | 	sub	fp, #20
2ac2c     10 20 06 F1 | 	add	local02, #16
2ac30     10 21 02 FB | 	rdlong	local02, local02
2ac34     FF 21 06 F5 | 	and	local02, #511
2ac38     10 15 02 F1 | 	add	arg02, local02
2ac3c     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
2ac40     08 1E 06 F1 | 	add	local01, #8
2ac44     0F FB 61 FC | 	wrlong	result1, local01
2ac48     E4 FE 9F FD | 	jmp	#LR__4395
2ac4c                 | LR__4397
2ac4c                 | LR__4398
2ac4c                 | ' 			}
2ac4c                 | ' #line 3090 "ff.c"
2ac4c                 | ' 			{
2ac4c                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2ac4c                 | ' 			}
2ac4c                 | ' 		}
2ac4c                 | ' 	}
2ac4c                 | ' 
2ac4c                 | ' 	return res;
2ac4c     0C 4E 05 F1 | 	add	fp, #12
2ac50     A7 FA 01 FB | 	rdlong	result1, fp
2ac54     0C 4E 85 F1 | 	sub	fp, #12
2ac58     A7 F0 03 F6 | 	mov	ptra, fp
2ac5c     B2 00 A0 FD | 	call	#popregs_
2ac60                 | _fatfs_cc_follow_path_ret
2ac60     2D 00 64 FD | 	ret
2ac64                 | 
2ac64                 | _fatfs_cc_get_ldnumber
2ac64     01 00 66 F6 | 	neg	_var01, #1
2ac68     09 03 0A FB | 	rdlong	_var02, arg01 wz
2ac6c     01 05 02 F6 | 	mov	_var03, _var02
2ac70     01 FA 65 A6 |  if_e	neg	result1, #1
2ac74     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2ac78     97 10 48 FB | 	callpa	#(@LR__4401-@LR__4400)>>2,fcache_load_ptr_
2ac7c                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2ac7c                 | LR__4400
2ac7c     02 07 C2 FA | 	rdbyte	_var04, _var03
2ac80     03 FB E1 F8 | 	getbyte	result1, _var04, #0
2ac84     20 FA 15 F2 | 	cmp	result1, #32 wc
2ac88     01 04 06 F1 | 	add	_var03, #1
2ac8c     03 09 02 36 |  if_ae	mov	_var05, _var04
2ac90     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2ac94     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
2ac98     E0 FF 9F 1D |  if_a	jmp	#LR__4400
2ac9c                 | LR__4401
2ac9c     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
2aca0     3A 06 0E F2 | 	cmp	_var04, #58 wz
2aca4     40 00 90 5D |  if_ne	jmp	#LR__4403
2aca8     01 0A 06 F6 | 	mov	_var06, #1
2acac     01 09 C2 FA | 	rdbyte	_var05, _var02
2acb0     30 08 16 F2 | 	cmp	_var05, #48 wc
2acb4     1C 00 90 CD |  if_b	jmp	#LR__4402
2acb8     01 09 C2 FA | 	rdbyte	_var05, _var02
2acbc     3A 08 16 F2 | 	cmp	_var05, #58 wc
2acc0     01 0D 02 C6 |  if_b	mov	_var07, _var02
2acc4     02 0C 06 C1 |  if_b	add	_var07, #2
2acc8     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
2accc     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
2acd0     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
2acd4                 | LR__4402
2acd4     01 0A 56 F2 | 	cmps	_var06, #1 wc
2acd8     05 01 02 C6 |  if_b	mov	_var01, _var06
2acdc     09 05 62 CC |  if_b	wrlong	_var03, arg01
2ace0                 | ' 			vol = i;
2ace0                 | ' 			*path = tt;
2ace0                 | ' 		}
2ace0                 | ' 		return vol;
2ace0     00 FB 01 F6 | 	mov	result1, _var01
2ace4     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2ace8                 | LR__4403
2ace8                 | ' 	}
2ace8                 | ' #line 3170 "ff.c"
2ace8                 | ' 	vol = 0;
2ace8                 | ' 
2ace8                 | ' 	return vol;
2ace8     00 FA 05 F6 | 	mov	result1, #0
2acec                 | _fatfs_cc_get_ldnumber_ret
2acec     2D 00 64 FD | 	ret
2acf0                 | 
2acf0                 | _fatfs_cc_check_fs
2acf0     04 4A 05 F6 | 	mov	COUNT_, #4
2acf4     A8 00 A0 FD | 	call	#pushregs_
2acf8     09 1F 02 F6 | 	mov	local01, arg01
2acfc     03 1E 06 F1 | 	add	local01, #3
2ad00     0F 01 48 FC | 	wrbyte	#0, local01
2ad04     2D 1E 06 F1 | 	add	local01, #45
2ad08     FF FF FF FF 
2ad0c     0F FF 6B FC | 	wrlong	##-1, local01
2ad10     30 1E 86 F1 | 	sub	local01, #48
2ad14     0F 13 02 F6 | 	mov	arg01, local01
2ad18     18 D5 BF FD | 	call	#_fatfs_cc_move_window
2ad1c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ad20     04 FA 05 56 |  if_ne	mov	result1, #4
2ad24     94 01 90 5D |  if_ne	jmp	#LR__4414
2ad28     34 1E 06 F1 | 	add	local01, #52
2ad2c     0F 13 02 F6 | 	mov	arg01, local01
2ad30     FE 13 06 F1 | 	add	arg01, #510
2ad34                 | ' {
2ad34                 | ' 
2ad34                 | ' 	return *((WORD*)ptr);
2ad34     09 21 E2 FA | 	rdword	local02, arg01
2ad38     0F 23 C2 FA | 	rdbyte	local03, local01
2ad3c     34 1E 86 F1 | 	sub	local01, #52
2ad40     11 25 E2 F8 | 	getbyte	local04, local03, #0
2ad44     EB 24 0E F2 | 	cmp	local04, #235 wz
2ad48     11 17 02 56 |  if_ne	mov	arg03, local03
2ad4c     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2ad50     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
2ad54     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
2ad58     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
2ad5c     44 01 90 5D |  if_ne	jmp	#LR__4413
2ad60     10 25 32 F9 | 	getword	local04, local02, #0
2ad64     55 00 00 FF 
2ad68     55 24 0E F2 | 	cmp	local04, ##43605 wz
2ad6c     2C 00 90 5D |  if_ne	jmp	#LR__4410
2ad70     34 1E 06 F1 | 	add	local01, #52
2ad74     0F 13 02 F6 | 	mov	arg01, local01
2ad78     34 1E 86 F1 | 	sub	local01, #52
2ad7c     52 12 06 F1 | 	add	arg01, #82
2ad80     80 01 00 FF 
2ad84     D0 15 06 F6 | 	mov	arg02, ##@LR__5004
2ad88     08 16 06 F6 | 	mov	arg03, #8
2ad8c     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
2ad90     00 FA 0D F2 | 	cmp	result1, #0 wz
2ad94                 | ' 			return 0;
2ad94     00 FA 05 A6 |  if_e	mov	result1, #0
2ad98     20 01 90 AD |  if_e	jmp	#LR__4414
2ad9c                 | LR__4410
2ad9c     34 1E 06 F1 | 	add	local01, #52
2ada0     0F 13 02 F6 | 	mov	arg01, local01
2ada4     0B 12 06 F1 | 	add	arg01, #11
2ada8                 | ' {
2ada8                 | ' 
2ada8                 | ' 	return *((WORD*)ptr);
2ada8     09 FB E1 FA | 	rdword	result1, arg01
2adac     0D 1E 06 F1 | 	add	local01, #13
2adb0     0F 23 C2 FA | 	rdbyte	local03, local01
2adb4     41 1E 86 F1 | 	sub	local01, #65
2adb8     FD 24 32 F9 | 	getword	local04, result1, #0
2adbc     FD 14 32 F9 | 	getword	arg02, result1, #0
2adc0     01 14 86 F1 | 	sub	arg02, #1
2adc4     0A 25 CA F7 | 	test	local04, arg02 wz
2adc8     D8 00 90 5D |  if_ne	jmp	#LR__4412
2adcc     FD 14 32 F9 | 	getword	arg02, result1, #0
2add0     01 00 00 FF 
2add4     00 14 16 F2 | 	cmp	arg02, ##512 wc
2add8     C8 00 90 CD |  if_b	jmp	#LR__4412
2addc     FD 14 32 F9 | 	getword	arg02, result1, #0
2ade0     01 00 00 FF 
2ade4     01 14 16 F2 | 	cmp	arg02, ##513 wc
2ade8     B8 00 90 3D |  if_ae	jmp	#LR__4412
2adec     11 13 02 F6 | 	mov	arg01, local03
2adf0     07 12 4E F7 | 	zerox	arg01, #7 wz
2adf4     AC 00 90 AD |  if_e	jmp	#LR__4412
2adf8     11 13 E2 F8 | 	getbyte	arg01, local03, #0
2adfc     11 23 E2 F8 | 	getbyte	local03, local03, #0
2ae00     01 22 86 F1 | 	sub	local03, #1
2ae04     11 13 CA F7 | 	test	arg01, local03 wz
2ae08     98 00 90 5D |  if_ne	jmp	#LR__4412
2ae0c     34 1E 06 F1 | 	add	local01, #52
2ae10     0F 13 02 F6 | 	mov	arg01, local01
2ae14     34 1E 86 F1 | 	sub	local01, #52
2ae18     0E 12 06 F1 | 	add	arg01, #14
2ae1c                 | ' {
2ae1c                 | ' 
2ae1c                 | ' 	return *((WORD*)ptr);
2ae1c     09 FB E9 FA | 	rdword	result1, arg01 wz
2ae20     80 00 90 AD |  if_e	jmp	#LR__4412
2ae24     44 1E 06 F1 | 	add	local01, #68
2ae28     0F 13 C2 FA | 	rdbyte	arg01, local01
2ae2c     44 1E 86 F1 | 	sub	local01, #68
2ae30     01 12 86 F1 | 	sub	arg01, #1
2ae34     02 12 16 F2 | 	cmp	arg01, #2 wc
2ae38     68 00 90 3D |  if_ae	jmp	#LR__4412
2ae3c     34 1E 06 F1 | 	add	local01, #52
2ae40     0F 13 02 F6 | 	mov	arg01, local01
2ae44     34 1E 86 F1 | 	sub	local01, #52
2ae48     11 12 06 F1 | 	add	arg01, #17
2ae4c                 | ' {
2ae4c                 | ' 
2ae4c                 | ' 	return *((WORD*)ptr);
2ae4c     09 FB E9 FA | 	rdword	result1, arg01 wz
2ae50     50 00 90 AD |  if_e	jmp	#LR__4412
2ae54     34 1E 06 F1 | 	add	local01, #52
2ae58     0F 13 02 F6 | 	mov	arg01, local01
2ae5c     34 1E 86 F1 | 	sub	local01, #52
2ae60     13 12 06 F1 | 	add	arg01, #19
2ae64                 | ' {
2ae64                 | ' 
2ae64                 | ' 	return *((WORD*)ptr);
2ae64     09 FB E1 FA | 	rdword	result1, arg01
2ae68     FD 22 32 F9 | 	getword	local03, result1, #0
2ae6c     80 22 16 F2 | 	cmp	local03, #128 wc
2ae70     20 00 90 3D |  if_ae	jmp	#LR__4411
2ae74     34 1E 06 F1 | 	add	local01, #52
2ae78     0F 13 02 F6 | 	mov	arg01, local01
2ae7c     34 1E 86 F1 | 	sub	local01, #52
2ae80     20 12 06 F1 | 	add	arg01, #32
2ae84                 | ' {
2ae84                 | ' 
2ae84                 | ' 	return *((DWORD*)ptr);
2ae84     09 FB 01 FB | 	rdlong	result1, arg01
2ae88     80 00 00 FF 
2ae8c     00 FA 15 F2 | 	cmp	result1, ##65536 wc
2ae90     10 00 90 CD |  if_b	jmp	#LR__4412
2ae94                 | LR__4411
2ae94     4A 1E 06 F1 | 	add	local01, #74
2ae98                 | ' {
2ae98                 | ' 
2ae98                 | ' 	return *((WORD*)ptr);
2ae98     0F FB E9 FA | 	rdword	result1, local01 wz
2ae9c                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2ae9c                 | ' 			&& ld_word(fs->win +  14 ) != 0
2ae9c                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2ae9c                 | ' 			&& ld_word(fs->win +  17 ) != 0
2ae9c                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2ae9c                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2ae9c                 | ' 				return 0;
2ae9c     00 FA 05 56 |  if_ne	mov	result1, #0
2aea0     18 00 90 5D |  if_ne	jmp	#LR__4414
2aea4                 | LR__4412
2aea4                 | LR__4413
2aea4                 | ' 		}
2aea4                 | ' 	}
2aea4                 | ' 	return sign == 0xAA55 ? 2 : 3;
2aea4     10 23 32 F9 | 	getword	local03, local02, #0
2aea8     55 00 00 FF 
2aeac     55 22 0E F2 | 	cmp	local03, ##43605 wz
2aeb0     02 24 06 A6 |  if_e	mov	local04, #2
2aeb4     03 24 06 56 |  if_ne	mov	local04, #3
2aeb8     12 FB 01 F6 | 	mov	result1, local04
2aebc                 | LR__4414
2aebc     A7 F0 03 F6 | 	mov	ptra, fp
2aec0     B2 00 A0 FD | 	call	#popregs_
2aec4                 | _fatfs_cc_check_fs_ret
2aec4     2D 00 64 FD | 	ret
2aec8                 | 
2aec8                 | _fatfs_cc_find_volume
2aec8     05 4A 05 F6 | 	mov	COUNT_, #5
2aecc     A8 00 A0 FD | 	call	#pushregs_
2aed0     24 F0 07 F1 | 	add	ptra, #36
2aed4     09 1F 02 F6 | 	mov	local01, arg01
2aed8     0A 21 02 F6 | 	mov	local02, arg02
2aedc     0F 13 02 F6 | 	mov	arg01, local01
2aee0     00 14 06 F6 | 	mov	arg02, #0
2aee4     08 FE BF FD | 	call	#_fatfs_cc_check_fs
2aee8     02 FA 0D F2 | 	cmp	result1, #2 wz
2aeec     0C 00 90 AD |  if_e	jmp	#LR__4420
2aef0     03 FA 15 F2 | 	cmp	result1, #3 wc
2aef4     00 20 0E C2 |  if_b	cmp	local02, #0 wz
2aef8     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4428
2aefc                 | LR__4420
2aefc                 | ' 	for (i = 0; i < 4; i++) {
2aefc     00 22 06 F6 | 	mov	local03, #0
2af00     97 26 48 FB | 	callpa	#(@LR__4422-@LR__4421)>>2,fcache_load_ptr_
2af04                 | LR__4421
2af04     04 22 16 F2 | 	cmp	local03, #4 wc
2af08     44 00 90 3D |  if_ae	jmp	#LR__4423
2af0c     11 25 02 F6 | 	mov	local04, local03
2af10     02 24 66 F0 | 	shl	local04, #2
2af14     14 4E 05 F1 | 	add	fp, #20
2af18     A7 24 02 F1 | 	add	local04, fp
2af1c     34 1E 06 F1 | 	add	local01, #52
2af20     0F 13 02 F6 | 	mov	arg01, local01
2af24     34 1E 86 F1 | 	sub	local01, #52
2af28     BE 13 06 F1 | 	add	arg01, #446
2af2c     11 15 02 F6 | 	mov	arg02, local03
2af30     04 14 66 F0 | 	shl	arg02, #4
2af34     0A 13 02 F1 | 	add	arg01, arg02
2af38     08 12 06 F1 | 	add	arg01, #8
2af3c                 | ' {
2af3c                 | ' 
2af3c                 | ' 	return *((DWORD*)ptr);
2af3c     09 FB 01 FB | 	rdlong	result1, arg01
2af40     14 4E 85 F1 | 	sub	fp, #20
2af44     12 FB 61 FC | 	wrlong	result1, local04
2af48     01 22 06 F1 | 	add	local03, #1
2af4c     B4 FF 9F FD | 	jmp	#LR__4421
2af50                 | LR__4422
2af50                 | LR__4423
2af50     00 20 0E F2 | 	cmp	local02, #0 wz
2af54     10 25 02 56 |  if_ne	mov	local04, local02
2af58     01 24 86 51 |  if_ne	sub	local04, #1
2af5c     00 24 06 A6 |  if_e	mov	local04, #0
2af60     12 23 02 F6 | 	mov	local03, local04
2af64                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2af64                 | ' 	}
2af64                 | ' 	i = part ? part - 1 : 0;
2af64                 | ' 	do {
2af64                 | LR__4424
2af64     11 25 02 F6 | 	mov	local04, local03
2af68     02 24 66 F0 | 	shl	local04, #2
2af6c     14 4E 05 F1 | 	add	fp, #20
2af70     A7 24 02 F1 | 	add	local04, fp
2af74     12 25 0A FB | 	rdlong	local04, local04 wz
2af78     14 4E 85 F1 | 	sub	fp, #20
2af7c     28 00 90 AD |  if_e	jmp	#LR__4425
2af80     11 25 02 F6 | 	mov	local04, local03
2af84     02 24 66 F0 | 	shl	local04, #2
2af88     14 4E 05 F1 | 	add	fp, #20
2af8c     A7 24 02 F1 | 	add	local04, fp
2af90     12 15 02 FB | 	rdlong	arg02, local04
2af94     0F 13 02 F6 | 	mov	arg01, local01
2af98     14 4E 85 F1 | 	sub	fp, #20
2af9c     50 FD BF FD | 	call	#_fatfs_cc_check_fs
2afa0     FD 24 02 F6 | 	mov	local04, result1
2afa4     04 00 90 FD | 	jmp	#LR__4426
2afa8                 | LR__4425
2afa8     03 24 06 F6 | 	mov	local04, #3
2afac                 | LR__4426
2afac     12 27 02 F6 | 	mov	local05, local04
2afb0     00 20 0E F2 | 	cmp	local02, #0 wz
2afb4     02 26 16 A2 |  if_e	cmp	local05, #2 wc
2afb8     0C 00 90 8D |  if_c_and_z	jmp	#LR__4427
2afbc     01 22 06 A1 |  if_e	add	local03, #1
2afc0     04 22 16 A2 |  if_e	cmp	local03, #4 wc
2afc4     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4424
2afc8                 | LR__4427
2afc8                 | ' 	return fmt;
2afc8     13 FB 01 F6 | 	mov	result1, local05
2afcc                 | LR__4428
2afcc     A7 F0 03 F6 | 	mov	ptra, fp
2afd0     B2 00 A0 FD | 	call	#popregs_
2afd4                 | _fatfs_cc_find_volume_ret
2afd4     2D 00 64 FD | 	ret
2afd8                 | 
2afd8                 | _fatfs_cc_mount_volume
2afd8     0B 4A 05 F6 | 	mov	COUNT_, #11
2afdc     A8 00 A0 FD | 	call	#pushregs_
2afe0     0A 1F 02 F6 | 	mov	local01, arg02
2afe4     0B 21 02 F6 | 	mov	local02, arg03
2afe8     0F 01 68 FC | 	wrlong	#0, local01
2afec     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2aff0     FD 22 02 F6 | 	mov	local03, result1
2aff4     00 22 56 F2 | 	cmps	local03, #0 wc
2aff8     0B FA 05 C6 |  if_b	mov	result1, #11
2affc     3C 05 90 CD |  if_b	jmp	#LR__4440
2b000     11 17 02 F6 | 	mov	arg03, local03
2b004     02 16 66 F0 | 	shl	arg03, #2
2b008     F2 16 02 F1 | 	add	arg03, objptr
2b00c     0B 25 0A FB | 	rdlong	local04, arg03 wz
2b010     0C FA 05 A6 |  if_e	mov	result1, #12
2b014     24 05 90 AD |  if_e	jmp	#LR__4440
2b018     0F 25 62 FC | 	wrlong	local04, local01
2b01c     10 21 E2 F8 | 	getbyte	local02, local02, #0
2b020     FE 20 06 F5 | 	and	local02, #254
2b024     12 17 CA FA | 	rdbyte	arg03, local04 wz
2b028     4C 00 90 AD |  if_e	jmp	#LR__4431
2b02c     01 24 06 F1 | 	add	local04, #1
2b030     12 13 CA FA | 	rdbyte	arg01, local04 wz
2b034     01 24 86 F1 | 	sub	local04, #1
2b038     01 FA 05 56 |  if_ne	mov	result1, #1
2b03c                 | ' 
2b03c                 | ' 	return Stat;
2b03c     01 00 00 AF 
2b040     20 E4 05 A1 |  if_e	add	objptr, ##544
2b044     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2b048     01 00 00 AF 
2b04c     20 E4 85 A1 |  if_e	sub	objptr, ##544
2b050     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
2b054     01 16 CE F7 | 	test	arg03, #1 wz
2b058     1C 00 90 5D |  if_ne	jmp	#LR__4430
2b05c     00 20 0E F2 | 	cmp	local02, #0 wz
2b060     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
2b064     04 FA CD 57 |  if_ne	test	result1, #4 wz
2b068                 | ' 				return FR_WRITE_PROTECTED;
2b068     0A FA 05 56 |  if_ne	mov	result1, #10
2b06c     CC 04 90 5D |  if_ne	jmp	#LR__4440
2b070                 | ' 			}
2b070                 | ' 			return FR_OK;
2b070     00 FA 05 F6 | 	mov	result1, #0
2b074     C4 04 90 FD | 	jmp	#LR__4440
2b078                 | LR__4430
2b078                 | LR__4431
2b078     12 01 48 FC | 	wrbyte	#0, local04
2b07c     01 24 06 F1 | 	add	local04, #1
2b080     12 23 42 FC | 	wrbyte	local03, local04
2b084     12 13 C2 FA | 	rdbyte	arg01, local04
2b088     01 24 86 F1 | 	sub	local04, #1
2b08c     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
2b090     FD 16 02 F6 | 	mov	arg03, result1
2b094     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
2b098     01 26 CE F7 | 	test	local05, #1 wz
2b09c                 | ' 		return FR_NOT_READY;
2b09c     03 FA 05 56 |  if_ne	mov	result1, #3
2b0a0     98 04 90 5D |  if_ne	jmp	#LR__4440
2b0a4     00 20 0E F2 | 	cmp	local02, #0 wz
2b0a8     0B 27 02 56 |  if_ne	mov	local05, arg03
2b0ac     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
2b0b0     04 26 CE 57 |  if_ne	test	local05, #4 wz
2b0b4                 | ' 		return FR_WRITE_PROTECTED;
2b0b4     0A FA 05 56 |  if_ne	mov	result1, #10
2b0b8     80 04 90 5D |  if_ne	jmp	#LR__4440
2b0bc     12 13 02 F6 | 	mov	arg01, local04
2b0c0     00 14 06 F6 | 	mov	arg02, #0
2b0c4     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2b0c8     FD 12 02 F6 | 	mov	arg01, result1
2b0cc     04 12 0E F2 | 	cmp	arg01, #4 wz
2b0d0     01 FA 05 A6 |  if_e	mov	result1, #1
2b0d4     64 04 90 AD |  if_e	jmp	#LR__4440
2b0d8     02 12 16 F2 | 	cmp	arg01, #2 wc
2b0dc     0D FA 05 36 |  if_ae	mov	result1, #13
2b0e0     58 04 90 3D |  if_ae	jmp	#LR__4440
2b0e4     30 24 06 F1 | 	add	local04, #48
2b0e8     12 29 02 FB | 	rdlong	local06, local04
2b0ec     04 24 06 F1 | 	add	local04, #4
2b0f0     12 13 02 F6 | 	mov	arg01, local04
2b0f4     34 24 86 F1 | 	sub	local04, #52
2b0f8     0B 12 06 F1 | 	add	arg01, #11
2b0fc                 | ' {
2b0fc                 | ' 
2b0fc                 | ' 	return *((WORD*)ptr);
2b0fc     09 FB E1 FA | 	rdword	result1, arg01
2b100     01 00 00 FF 
2b104     00 FA 0D F2 | 	cmp	result1, ##512 wz
2b108     0D FA 05 56 |  if_ne	mov	result1, #13
2b10c     2C 04 90 5D |  if_ne	jmp	#LR__4440
2b110     34 24 06 F1 | 	add	local04, #52
2b114     12 13 02 F6 | 	mov	arg01, local04
2b118     34 24 86 F1 | 	sub	local04, #52
2b11c     16 12 06 F1 | 	add	arg01, #22
2b120                 | ' {
2b120                 | ' 
2b120                 | ' 	return *((WORD*)ptr);
2b120     09 FB E1 FA | 	rdword	result1, arg01
2b124     FD 2A 0A F6 | 	mov	local07, result1 wz
2b128     18 00 90 5D |  if_ne	jmp	#LR__4432
2b12c     34 24 06 F1 | 	add	local04, #52
2b130     12 13 02 F6 | 	mov	arg01, local04
2b134     34 24 86 F1 | 	sub	local04, #52
2b138     24 12 06 F1 | 	add	arg01, #36
2b13c                 | ' {
2b13c                 | ' 
2b13c                 | ' 	return *((DWORD*)ptr);
2b13c     09 FB 01 FB | 	rdlong	result1, arg01
2b140     FD 2A 02 F6 | 	mov	local07, result1
2b144                 | LR__4432
2b144     1C 24 06 F1 | 	add	local04, #28
2b148     12 2B 62 FC | 	wrlong	local07, local04
2b14c     28 24 06 F1 | 	add	local04, #40
2b150     12 27 C2 FA | 	rdbyte	local05, local04
2b154     42 24 86 F1 | 	sub	local04, #66
2b158     12 27 42 FC | 	wrbyte	local05, local04
2b15c     12 27 C2 FA | 	rdbyte	local05, local04
2b160     02 24 86 F1 | 	sub	local04, #2
2b164     01 26 0E F2 | 	cmp	local05, #1 wz
2b168     02 24 06 51 |  if_ne	add	local04, #2
2b16c     12 27 C2 5A |  if_ne	rdbyte	local05, local04
2b170     02 24 86 51 |  if_ne	sub	local04, #2
2b174     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
2b178     0D FA 05 56 |  if_ne	mov	result1, #13
2b17c     BC 03 90 5D |  if_ne	jmp	#LR__4440
2b180     02 24 06 F1 | 	add	local04, #2
2b184     12 27 C2 FA | 	rdbyte	local05, local04
2b188     13 2B 02 FD | 	qmul	local07, local05
2b18c     3F 24 06 F1 | 	add	local04, #63
2b190     12 27 C2 FA | 	rdbyte	local05, local04
2b194     37 24 86 F1 | 	sub	local04, #55
2b198     12 27 52 FC | 	wrword	local05, local04
2b19c     12 27 EA FA | 	rdword	local05, local04 wz
2b1a0     0A 24 86 F1 | 	sub	local04, #10
2b1a4     18 2A 62 FD | 	getqx	local07
2b1a8     20 00 90 AD |  if_e	jmp	#LR__4433
2b1ac     0A 24 06 F1 | 	add	local04, #10
2b1b0     12 27 E2 FA | 	rdword	local05, local04
2b1b4     13 23 32 F9 | 	getword	local03, local05, #0
2b1b8     0A 24 86 F1 | 	sub	local04, #10
2b1bc     13 27 32 F9 | 	getword	local05, local05, #0
2b1c0     01 26 86 F1 | 	sub	local05, #1
2b1c4     13 23 CA F7 | 	test	local03, local05 wz
2b1c8     08 00 90 AD |  if_e	jmp	#LR__4434
2b1cc                 | LR__4433
2b1cc     0D FA 05 F6 | 	mov	result1, #13
2b1d0     68 03 90 FD | 	jmp	#LR__4440
2b1d4                 | LR__4434
2b1d4     34 24 06 F1 | 	add	local04, #52
2b1d8     12 13 02 F6 | 	mov	arg01, local04
2b1dc     11 12 06 F1 | 	add	arg01, #17
2b1e0                 | ' {
2b1e0                 | ' 
2b1e0                 | ' 	return *((WORD*)ptr);
2b1e0     09 FB E1 FA | 	rdword	result1, arg01
2b1e4     2C 24 86 F1 | 	sub	local04, #44
2b1e8     12 FB 51 FC | 	wrword	result1, local04
2b1ec     12 27 E2 FA | 	rdword	local05, local04
2b1f0     08 24 86 F1 | 	sub	local04, #8
2b1f4     13 13 52 F6 | 	abs	arg01, local05 wc
2b1f8     09 13 42 F8 | 	getnib	arg01, arg01, #0
2b1fc     09 13 8A F6 | 	negc	arg01, arg01 wz
2b200     0D FA 05 56 |  if_ne	mov	result1, #13
2b204     34 03 90 5D |  if_ne	jmp	#LR__4440
2b208     34 24 06 F1 | 	add	local04, #52
2b20c     12 13 02 F6 | 	mov	arg01, local04
2b210     34 24 86 F1 | 	sub	local04, #52
2b214     13 12 06 F1 | 	add	arg01, #19
2b218                 | ' {
2b218                 | ' 
2b218                 | ' 	return *((WORD*)ptr);
2b218     09 FB E1 FA | 	rdword	result1, arg01
2b21c     FD 2C 0A F6 | 	mov	local08, result1 wz
2b220     34 24 06 A1 |  if_e	add	local04, #52
2b224     12 13 02 A6 |  if_e	mov	arg01, local04
2b228     34 24 86 A1 |  if_e	sub	local04, #52
2b22c     20 12 06 A1 |  if_e	add	arg01, #32
2b230                 | ' {
2b230                 | ' 
2b230                 | ' 	return *((DWORD*)ptr);
2b230     09 2D 02 AB |  if_e	rdlong	local08, arg01
2b234     34 24 06 F1 | 	add	local04, #52
2b238     12 13 02 F6 | 	mov	arg01, local04
2b23c     34 24 86 F1 | 	sub	local04, #52
2b240     0E 12 06 F1 | 	add	arg01, #14
2b244                 | ' {
2b244                 | ' 
2b244                 | ' 	return *((WORD*)ptr);
2b244     09 FB E1 FA | 	rdword	result1, arg01
2b248     FD 12 02 F6 | 	mov	arg01, result1
2b24c     09 27 02 F6 | 	mov	local05, arg01
2b250     0F 26 4E F7 | 	zerox	local05, #15 wz
2b254     0D FA 05 A6 |  if_e	mov	result1, #13
2b258     E0 02 90 AD |  if_e	jmp	#LR__4440
2b25c     09 2F 32 F9 | 	getword	local09, arg01, #0
2b260     15 2F 02 F1 | 	add	local09, local07
2b264     08 24 06 F1 | 	add	local04, #8
2b268     12 27 E2 FA | 	rdword	local05, local04
2b26c     08 24 86 F1 | 	sub	local04, #8
2b270     13 27 52 F6 | 	abs	local05, local05 wc
2b274     04 26 46 F0 | 	shr	local05, #4
2b278     13 2F 82 F3 | 	sumc	local09, local05
2b27c     17 2D 12 F2 | 	cmp	local08, local09 wc
2b280     0D FA 05 C6 |  if_b	mov	result1, #13
2b284     B4 02 90 CD |  if_b	jmp	#LR__4440
2b288     17 2D 82 F1 | 	sub	local08, local09
2b28c     0A 24 06 F1 | 	add	local04, #10
2b290     12 27 E2 FA | 	rdword	local05, local04
2b294     13 2D 12 FD | 	qdiv	local08, local05
2b298     0A 24 86 F1 | 	sub	local04, #10
2b29c     18 26 62 FD | 	getqx	local05
2b2a0     00 26 0E F2 | 	cmp	local05, #0 wz
2b2a4     0D FA 05 A6 |  if_e	mov	result1, #13
2b2a8     90 02 90 AD |  if_e	jmp	#LR__4440
2b2ac     00 30 06 F6 | 	mov	local10, #0
2b2b0     FF FF 07 FF 
2b2b4     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
2b2b8     03 30 06 C6 |  if_b	mov	local10, #3
2b2bc     7F 00 00 FF 
2b2c0     F6 27 16 F2 | 	cmp	local05, ##65526 wc
2b2c4     02 30 06 C6 |  if_b	mov	local10, #2
2b2c8     07 00 00 FF 
2b2cc     F6 27 16 F2 | 	cmp	local05, ##4086 wc
2b2d0     01 30 06 C6 |  if_b	mov	local10, #1
2b2d4     00 30 0E F2 | 	cmp	local10, #0 wz
2b2d8     0D FA 05 A6 |  if_e	mov	result1, #13
2b2dc     5C 02 90 AD |  if_e	jmp	#LR__4440
2b2e0     02 26 06 F1 | 	add	local05, #2
2b2e4     18 24 06 F1 | 	add	local04, #24
2b2e8     12 27 62 FC | 	wrlong	local05, local04
2b2ec     08 24 06 F1 | 	add	local04, #8
2b2f0     12 29 62 FC | 	wrlong	local06, local04
2b2f4     14 27 02 F6 | 	mov	local05, local06
2b2f8     09 13 32 F9 | 	getword	arg01, arg01, #0
2b2fc     09 27 02 F1 | 	add	local05, arg01
2b300     04 24 06 F1 | 	add	local04, #4
2b304     12 27 62 FC | 	wrlong	local05, local04
2b308     14 27 02 F6 | 	mov	local05, local06
2b30c     17 27 02 F1 | 	add	local05, local09
2b310     08 24 06 F1 | 	add	local04, #8
2b314     12 27 62 FC | 	wrlong	local05, local04
2b318     2C 24 86 F1 | 	sub	local04, #44
2b31c     03 30 0E F2 | 	cmp	local10, #3 wz
2b320     5C 00 90 5D |  if_ne	jmp	#LR__4435
2b324     34 24 06 F1 | 	add	local04, #52
2b328     12 13 02 F6 | 	mov	arg01, local04
2b32c     34 24 86 F1 | 	sub	local04, #52
2b330     2A 12 06 F1 | 	add	arg01, #42
2b334                 | ' {
2b334                 | ' 
2b334                 | ' 	return *((WORD*)ptr);
2b334     09 FB E9 FA | 	rdword	result1, arg01 wz
2b338     0D FA 05 56 |  if_ne	mov	result1, #13
2b33c     FC 01 90 5D |  if_ne	jmp	#LR__4440
2b340     08 24 06 F1 | 	add	local04, #8
2b344     12 27 EA FA | 	rdword	local05, local04 wz
2b348     08 24 86 F1 | 	sub	local04, #8
2b34c     0D FA 05 56 |  if_ne	mov	result1, #13
2b350     E8 01 90 5D |  if_ne	jmp	#LR__4440
2b354     34 24 06 F1 | 	add	local04, #52
2b358     12 13 02 F6 | 	mov	arg01, local04
2b35c     2C 12 06 F1 | 	add	arg01, #44
2b360                 | ' {
2b360                 | ' 
2b360                 | ' 	return *((DWORD*)ptr);
2b360     09 FB 01 FB | 	rdlong	result1, arg01
2b364     0C 24 86 F1 | 	sub	local04, #12
2b368     12 FB 61 FC | 	wrlong	result1, local04
2b36c     10 24 86 F1 | 	sub	local04, #16
2b370     12 33 02 FB | 	rdlong	local11, local04
2b374     18 24 86 F1 | 	sub	local04, #24
2b378     02 32 66 F0 | 	shl	local11, #2
2b37c     6C 00 90 FD | 	jmp	#LR__4437
2b380                 | LR__4435
2b380     08 24 06 F1 | 	add	local04, #8
2b384     12 27 EA FA | 	rdword	local05, local04 wz
2b388     08 24 86 F1 | 	sub	local04, #8
2b38c     0D FA 05 A6 |  if_e	mov	result1, #13
2b390     A8 01 90 AD |  if_e	jmp	#LR__4440
2b394     24 24 06 F1 | 	add	local04, #36
2b398     12 27 02 FB | 	rdlong	local05, local04
2b39c     15 27 02 F1 | 	add	local05, local07
2b3a0     04 24 06 F1 | 	add	local04, #4
2b3a4     12 27 62 FC | 	wrlong	local05, local04
2b3a8     28 24 86 F1 | 	sub	local04, #40
2b3ac     02 30 0E F2 | 	cmp	local10, #2 wz
2b3b0     18 24 06 A1 |  if_e	add	local04, #24
2b3b4     12 27 02 AB |  if_e	rdlong	local05, local04
2b3b8     18 24 86 A1 |  if_e	sub	local04, #24
2b3bc     01 26 66 A0 |  if_e	shl	local05, #1
2b3c0     24 00 90 AD |  if_e	jmp	#LR__4436
2b3c4     18 24 06 F1 | 	add	local04, #24
2b3c8     12 33 02 FB | 	rdlong	local11, local04
2b3cc     19 27 02 F6 | 	mov	local05, local11
2b3d0     01 26 66 F0 | 	shl	local05, #1
2b3d4     19 27 02 F1 | 	add	local05, local11
2b3d8     01 26 46 F0 | 	shr	local05, #1
2b3dc     18 24 86 F1 | 	sub	local04, #24
2b3e0     01 32 06 F5 | 	and	local11, #1
2b3e4     19 27 02 F1 | 	add	local05, local11
2b3e8                 | LR__4436
2b3e8     13 33 02 F6 | 	mov	local11, local05
2b3ec                 | LR__4437
2b3ec     FF 33 06 F1 | 	add	local11, #511
2b3f0     09 32 46 F0 | 	shr	local11, #9
2b3f4     1C 24 06 F1 | 	add	local04, #28
2b3f8     12 17 02 FB | 	rdlong	arg03, local04
2b3fc     1C 24 86 F1 | 	sub	local04, #28
2b400     19 17 12 F2 | 	cmp	arg03, local11 wc
2b404     0D FA 05 C6 |  if_b	mov	result1, #13
2b408     30 01 90 CD |  if_b	jmp	#LR__4440
2b40c     14 24 06 F1 | 	add	local04, #20
2b410     FF FF FF FF 
2b414     12 FF 6B FC | 	wrlong	##-1, local04
2b418     04 24 86 F1 | 	sub	local04, #4
2b41c     FF FF FF FF 
2b420     12 FF 6B FC | 	wrlong	##-1, local04
2b424     0C 24 86 F1 | 	sub	local04, #12
2b428     12 01 49 FC | 	wrbyte	#128, local04
2b42c     04 24 86 F1 | 	sub	local04, #4
2b430     03 30 0E F2 | 	cmp	local10, #3 wz
2b434     D0 00 90 5D |  if_ne	jmp	#LR__4439
2b438     34 24 06 F1 | 	add	local04, #52
2b43c     12 13 02 F6 | 	mov	arg01, local04
2b440     34 24 86 F1 | 	sub	local04, #52
2b444     30 12 06 F1 | 	add	arg01, #48
2b448                 | ' {
2b448                 | ' 
2b448                 | ' 	return *((WORD*)ptr);
2b448     09 FB E1 FA | 	rdword	result1, arg01
2b44c     FD 26 32 F9 | 	getword	local05, result1, #0
2b450     01 26 0E F2 | 	cmp	local05, #1 wz
2b454     B0 00 90 5D |  if_ne	jmp	#LR__4439
2b458     01 28 06 F1 | 	add	local06, #1
2b45c     12 13 02 F6 | 	mov	arg01, local04
2b460     14 15 02 F6 | 	mov	arg02, local06
2b464     CC CD BF FD | 	call	#_fatfs_cc_move_window
2b468     00 FA 0D F2 | 	cmp	result1, #0 wz
2b46c     98 00 90 5D |  if_ne	jmp	#LR__4439
2b470     04 24 06 F1 | 	add	local04, #4
2b474     12 01 48 FC | 	wrbyte	#0, local04
2b478     30 24 06 F1 | 	add	local04, #48
2b47c     12 13 02 F6 | 	mov	arg01, local04
2b480     34 24 86 F1 | 	sub	local04, #52
2b484     FE 13 06 F1 | 	add	arg01, #510
2b488                 | ' {
2b488                 | ' 
2b488                 | ' 	return *((WORD*)ptr);
2b488     09 FB E1 FA | 	rdword	result1, arg01
2b48c     FD 26 32 F9 | 	getword	local05, result1, #0
2b490     55 00 00 FF 
2b494     55 26 0E F2 | 	cmp	local05, ##43605 wz
2b498     34 24 06 A1 |  if_e	add	local04, #52
2b49c     12 13 02 A6 |  if_e	mov	arg01, local04
2b4a0     34 24 86 A1 |  if_e	sub	local04, #52
2b4a4                 | ' {
2b4a4                 | ' 
2b4a4                 | ' 	return *((DWORD*)ptr);
2b4a4     09 FB 01 AB |  if_e	rdlong	result1, arg01
2b4a8     A9 B0 20 AF 
2b4ac     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
2b4b0     54 00 90 5D |  if_ne	jmp	#LR__4438
2b4b4     34 24 06 F1 | 	add	local04, #52
2b4b8     12 13 02 F6 | 	mov	arg01, local04
2b4bc     34 24 86 F1 | 	sub	local04, #52
2b4c0     E4 13 06 F1 | 	add	arg01, #484
2b4c4                 | ' {
2b4c4                 | ' 
2b4c4                 | ' 	return *((DWORD*)ptr);
2b4c4     09 FB 01 FB | 	rdlong	result1, arg01
2b4c8     B9 A0 30 FF 
2b4cc     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
2b4d0     34 00 90 5D |  if_ne	jmp	#LR__4438
2b4d4     34 24 06 F1 | 	add	local04, #52
2b4d8     12 13 02 F6 | 	mov	arg01, local04
2b4dc     E8 13 06 F1 | 	add	arg01, #488
2b4e0                 | ' {
2b4e0                 | ' 
2b4e0                 | ' 	return *((DWORD*)ptr);
2b4e0     09 FB 01 FB | 	rdlong	result1, arg01
2b4e4     20 24 86 F1 | 	sub	local04, #32
2b4e8     12 FB 61 FC | 	wrlong	result1, local04
2b4ec     20 24 06 F1 | 	add	local04, #32
2b4f0     12 13 02 F6 | 	mov	arg01, local04
2b4f4     EC 13 06 F1 | 	add	arg01, #492
2b4f8                 | ' {
2b4f8                 | ' 
2b4f8                 | ' 	return *((DWORD*)ptr);
2b4f8     09 FB 01 FB | 	rdlong	result1, arg01
2b4fc     24 24 86 F1 | 	sub	local04, #36
2b500     12 FB 61 FC | 	wrlong	result1, local04
2b504     10 24 86 F1 | 	sub	local04, #16
2b508                 | LR__4438
2b508                 | LR__4439
2b508     12 31 42 FC | 	wrbyte	local10, local04
2b50c     04 E4 05 F1 | 	add	objptr, #4
2b510     F2 26 E2 FA | 	rdword	local05, objptr
2b514     01 26 06 F1 | 	add	local05, #1
2b518     F2 26 52 FC | 	wrword	local05, objptr
2b51c     F2 32 E2 FA | 	rdword	local11, objptr
2b520     06 24 06 F1 | 	add	local04, #6
2b524     12 33 52 FC | 	wrword	local11, local04
2b528     04 E4 05 F1 | 	add	objptr, #4
2b52c     06 24 06 F1 | 	add	local04, #6
2b530     12 E5 61 FC | 	wrlong	objptr, local04
2b534                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2b534                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2b534                 | ' 			{
2b534                 | ' 
2b534                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2b534                 | ' 
2b534                 | ' 
2b534                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2b534                 | ' 
2b534                 | ' 			}
2b534                 | ' 		}
2b534                 | ' 
2b534                 | ' 
2b534                 | ' 	}
2b534                 | ' 
2b534                 | ' 	fs->fs_type = (BYTE)fmt;
2b534                 | ' 	fs->id = ++Fsid;
2b534                 | ' 
2b534                 | ' 	fs->lfnbuf = LfnBuf;
2b534                 | ' #line 3567 "ff.c"
2b534                 | ' 	return FR_OK;
2b534     00 FA 05 F6 | 	mov	result1, #0
2b538     08 E4 85 F1 | 	sub	objptr, #8
2b53c                 | LR__4440
2b53c     A7 F0 03 F6 | 	mov	ptra, fp
2b540     B2 00 A0 FD | 	call	#popregs_
2b544                 | _fatfs_cc_mount_volume_ret
2b544     2D 00 64 FD | 	ret
2b548                 | 
2b548                 | _fatfs_cc_validate
2b548     09 01 0A F6 | 	mov	_var01, arg01 wz
2b54c     09 02 06 F6 | 	mov	_var02, #9
2b550     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2b554     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2b558     50 00 90 AD |  if_e	jmp	#LR__4450
2b55c     04 00 06 F1 | 	add	_var01, #4
2b560     00 07 E2 FA | 	rdword	_var04, _var01
2b564     04 00 86 F1 | 	sub	_var01, #4
2b568     00 13 02 FB | 	rdlong	arg01, _var01
2b56c     06 12 06 F1 | 	add	arg01, #6
2b570     09 FB E1 FA | 	rdword	result1, arg01
2b574     FD 06 0A F2 | 	cmp	_var04, result1 wz
2b578     30 00 90 5D |  if_ne	jmp	#LR__4450
2b57c     00 07 02 FB | 	rdlong	_var04, _var01
2b580     01 06 06 F1 | 	add	_var04, #1
2b584     03 13 CA FA | 	rdbyte	arg01, _var04 wz
2b588     01 FA 05 56 |  if_ne	mov	result1, #1
2b58c                 | ' 
2b58c                 | ' 	return Stat;
2b58c     01 00 00 AF 
2b590     20 E4 05 A1 |  if_e	add	objptr, ##544
2b594     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2b598     01 00 00 AF 
2b59c     20 E4 85 A1 |  if_e	sub	objptr, ##544
2b5a0     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
2b5a4     01 04 CE F7 | 	test	_var03, #1 wz
2b5a8     00 02 06 A6 |  if_e	mov	_var02, #0
2b5ac                 | LR__4450
2b5ac     00 02 0E F2 | 	cmp	_var02, #0 wz
2b5b0     00 05 02 AB |  if_e	rdlong	_var03, _var01
2b5b4     00 04 06 56 |  if_ne	mov	_var03, #0
2b5b8     0A 05 62 FC | 	wrlong	_var03, arg02
2b5bc                 | ' 			res = FR_OK;
2b5bc                 | ' 		}
2b5bc                 | ' 
2b5bc                 | ' 	}
2b5bc                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2b5bc                 | ' 	return res;
2b5bc     01 FB 01 F6 | 	mov	result1, _var02
2b5c0                 | _fatfs_cc_validate_ret
2b5c0     2D 00 64 FD | 	ret
2b5c4                 | 
2b5c4                 | _fatfs_cc_f_mount
2b5c4     01 4A 05 F6 | 	mov	COUNT_, #1
2b5c8     A8 00 A0 FD | 	call	#pushregs_
2b5cc     20 F0 07 F1 | 	add	ptra, #32
2b5d0     04 4E 05 F1 | 	add	fp, #4
2b5d4     A7 12 62 FC | 	wrlong	arg01, fp
2b5d8     04 4E 05 F1 | 	add	fp, #4
2b5dc     A7 14 62 FC | 	wrlong	arg02, fp
2b5e0     04 4E 05 F1 | 	add	fp, #4
2b5e4     A7 16 42 FC | 	wrbyte	arg03, fp
2b5e8     04 4E 85 F1 | 	sub	fp, #4
2b5ec     A7 16 02 FB | 	rdlong	arg03, fp
2b5f0     14 4E 05 F1 | 	add	fp, #20
2b5f4     A7 16 62 FC | 	wrlong	arg03, fp
2b5f8     A7 12 02 F6 | 	mov	arg01, fp
2b5fc     1C 4E 85 F1 | 	sub	fp, #28
2b600     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2b604     14 4E 05 F1 | 	add	fp, #20
2b608     A7 FA 61 FC | 	wrlong	result1, fp
2b60c     14 4E 85 F1 | 	sub	fp, #20
2b610     00 FA 55 F2 | 	cmps	result1, #0 wc
2b614     0B FA 05 C6 |  if_b	mov	result1, #11
2b618     C0 00 90 CD |  if_b	jmp	#LR__4461
2b61c     14 4E 05 F1 | 	add	fp, #20
2b620     A7 16 02 FB | 	rdlong	arg03, fp
2b624     02 16 66 F0 | 	shl	arg03, #2
2b628     F2 16 02 F1 | 	add	arg03, objptr
2b62c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2b630     04 4E 85 F1 | 	sub	fp, #4
2b634     A7 16 62 FC | 	wrlong	arg03, fp
2b638     10 4E 85 F1 | 	sub	fp, #16
2b63c     28 00 90 AD |  if_e	jmp	#LR__4460
2b640     10 4E 05 F1 | 	add	fp, #16
2b644     A7 16 02 FB | 	rdlong	arg03, fp
2b648     10 4E 85 F1 | 	sub	fp, #16
2b64c     01 16 06 F1 | 	add	arg03, #1
2b650     0B 13 C2 FA | 	rdbyte	arg01, arg03
2b654     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2b658     10 4E 05 F1 | 	add	fp, #16
2b65c     A7 16 02 FB | 	rdlong	arg03, fp
2b660     10 4E 85 F1 | 	sub	fp, #16
2b664     0B 01 48 FC | 	wrbyte	#0, arg03
2b668                 | LR__4460
2b668     04 4E 05 F1 | 	add	fp, #4
2b66c     A7 1E 0A FB | 	rdlong	local01, fp wz
2b670     04 4E 85 F1 | 	sub	fp, #4
2b674     04 4E 05 51 |  if_ne	add	fp, #4
2b678     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2b67c     04 4E 85 51 |  if_ne	sub	fp, #4
2b680     0F 01 48 5C |  if_ne	wrbyte	#0, local01
2b684     14 4E 05 F1 | 	add	fp, #20
2b688     A7 1E 02 FB | 	rdlong	local01, fp
2b68c     02 1E 66 F0 | 	shl	local01, #2
2b690     F2 1E 02 F1 | 	add	local01, objptr
2b694     10 4E 85 F1 | 	sub	fp, #16
2b698     A7 16 02 FB | 	rdlong	arg03, fp
2b69c     0F 17 62 FC | 	wrlong	arg03, local01
2b6a0     08 4E 05 F1 | 	add	fp, #8
2b6a4     A7 1E CA FA | 	rdbyte	local01, fp wz
2b6a8     0C 4E 85 F1 | 	sub	fp, #12
2b6ac     00 FA 05 A6 |  if_e	mov	result1, #0
2b6b0     28 00 90 AD |  if_e	jmp	#LR__4461
2b6b4     08 4E 05 F1 | 	add	fp, #8
2b6b8     A7 12 02 F6 | 	mov	arg01, fp
2b6bc     04 4E 85 F1 | 	sub	fp, #4
2b6c0     A7 14 02 F6 | 	mov	arg02, fp
2b6c4     04 4E 85 F1 | 	sub	fp, #4
2b6c8     00 16 06 F6 | 	mov	arg03, #0
2b6cc     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2b6d0     18 4E 05 F1 | 	add	fp, #24
2b6d4     A7 FA 61 FC | 	wrlong	result1, fp
2b6d8                 | ' 
2b6d8                 | ' 	res = mount_volume(&path, &fs, 0);
2b6d8                 | ' 	return res ;
2b6d8     18 4E 85 F1 | 	sub	fp, #24
2b6dc                 | LR__4461
2b6dc     A7 F0 03 F6 | 	mov	ptra, fp
2b6e0     B2 00 A0 FD | 	call	#popregs_
2b6e4                 | _fatfs_cc_f_mount_ret
2b6e4     2D 00 64 FD | 	ret
2b6e8                 | 
2b6e8                 | _fatfs_cc_f_open
2b6e8     02 4A 05 F6 | 	mov	COUNT_, #2
2b6ec     A8 00 A0 FD | 	call	#pushregs_
2b6f0     60 F0 07 F1 | 	add	ptra, #96
2b6f4     04 4E 05 F1 | 	add	fp, #4
2b6f8     A7 12 62 FC | 	wrlong	arg01, fp
2b6fc     04 4E 05 F1 | 	add	fp, #4
2b700     A7 14 62 FC | 	wrlong	arg02, fp
2b704     04 4E 05 F1 | 	add	fp, #4
2b708     A7 16 42 FC | 	wrbyte	arg03, fp
2b70c     08 4E 85 F1 | 	sub	fp, #8
2b710     A7 18 0A FB | 	rdlong	arg04, fp wz
2b714     04 4E 85 F1 | 	sub	fp, #4
2b718     09 FA 05 A6 |  if_e	mov	result1, #9
2b71c     98 06 90 AD |  if_e	jmp	#LR__4487
2b720     0C 4E 05 F1 | 	add	fp, #12
2b724     A7 18 C2 FA | 	rdbyte	arg04, fp
2b728     3F 18 06 F5 | 	and	arg04, #63
2b72c     A7 18 42 FC | 	wrbyte	arg04, fp
2b730     04 4E 85 F1 | 	sub	fp, #4
2b734     A7 12 02 F6 | 	mov	arg01, fp
2b738     3C 4E 05 F1 | 	add	fp, #60
2b73c     A7 14 02 F6 | 	mov	arg02, fp
2b740     38 4E 85 F1 | 	sub	fp, #56
2b744     A7 16 C2 FA | 	rdbyte	arg03, fp
2b748     0C 4E 85 F1 | 	sub	fp, #12
2b74c     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
2b750     10 4E 05 F1 | 	add	fp, #16
2b754     A7 FA 61 FC | 	wrlong	result1, fp
2b758     10 4E 85 F1 | 	sub	fp, #16
2b75c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b760     2C 06 90 5D |  if_ne	jmp	#LR__4486
2b764     44 4E 05 F1 | 	add	fp, #68
2b768     A7 18 02 FB | 	rdlong	arg04, fp
2b76c     30 4E 85 F1 | 	sub	fp, #48
2b770     A7 18 62 FC | 	wrlong	arg04, fp
2b774     A7 12 02 F6 | 	mov	arg01, fp
2b778     0C 4E 85 F1 | 	sub	fp, #12
2b77c     A7 1E 02 FB | 	rdlong	local01, fp
2b780     08 4E 85 F1 | 	sub	fp, #8
2b784     0F 15 02 F6 | 	mov	arg02, local01
2b788     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
2b78c     10 4E 05 F1 | 	add	fp, #16
2b790     A7 FA 61 FC | 	wrlong	result1, fp
2b794     10 4E 85 F1 | 	sub	fp, #16
2b798     00 FA 0D F2 | 	cmp	result1, #0 wz
2b79c     1C 00 90 5D |  if_ne	jmp	#LR__4470
2b7a0     3F 4E 05 F1 | 	add	fp, #63
2b7a4     A7 18 C2 FA | 	rdbyte	arg04, fp
2b7a8     3F 4E 85 F1 | 	sub	fp, #63
2b7ac     80 18 CE F7 | 	test	arg04, #128 wz
2b7b0     10 4E 05 51 |  if_ne	add	fp, #16
2b7b4     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2b7b8     10 4E 85 51 |  if_ne	sub	fp, #16
2b7bc                 | LR__4470
2b7bc     0C 4E 05 F1 | 	add	fp, #12
2b7c0     A7 18 C2 FA | 	rdbyte	arg04, fp
2b7c4     0C 4E 85 F1 | 	sub	fp, #12
2b7c8     1C 18 CE F7 | 	test	arg04, #28 wz
2b7cc     F0 01 90 AD |  if_e	jmp	#LR__4475
2b7d0     10 4E 05 F1 | 	add	fp, #16
2b7d4     A7 1E 0A FB | 	rdlong	local01, fp wz
2b7d8     10 4E 85 F1 | 	sub	fp, #16
2b7dc     48 00 90 AD |  if_e	jmp	#LR__4472
2b7e0     10 4E 05 F1 | 	add	fp, #16
2b7e4     A7 18 02 FB | 	rdlong	arg04, fp
2b7e8     10 4E 85 F1 | 	sub	fp, #16
2b7ec     04 18 0E F2 | 	cmp	arg04, #4 wz
2b7f0     1C 00 90 5D |  if_ne	jmp	#LR__4471
2b7f4     14 4E 05 F1 | 	add	fp, #20
2b7f8     A7 12 02 F6 | 	mov	arg01, fp
2b7fc     14 4E 85 F1 | 	sub	fp, #20
2b800     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
2b804     10 4E 05 F1 | 	add	fp, #16
2b808     A7 FA 61 FC | 	wrlong	result1, fp
2b80c     10 4E 85 F1 | 	sub	fp, #16
2b810                 | LR__4471
2b810     0C 4E 05 F1 | 	add	fp, #12
2b814     A7 1E C2 FA | 	rdbyte	local01, fp
2b818     08 1E 46 F5 | 	or	local01, #8
2b81c     A7 1E 42 FC | 	wrbyte	local01, fp
2b820     0C 4E 85 F1 | 	sub	fp, #12
2b824     3C 00 90 FD | 	jmp	#LR__4474
2b828                 | LR__4472
2b828     1A 4E 05 F1 | 	add	fp, #26
2b82c     A7 1E C2 FA | 	rdbyte	local01, fp
2b830     1A 4E 85 F1 | 	sub	fp, #26
2b834     11 1E CE F7 | 	test	local01, #17 wz
2b838     10 4E 05 51 |  if_ne	add	fp, #16
2b83c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2b840     10 4E 85 51 |  if_ne	sub	fp, #16
2b844     1C 00 90 5D |  if_ne	jmp	#LR__4473
2b848     0C 4E 05 F1 | 	add	fp, #12
2b84c     A7 1E C2 FA | 	rdbyte	local01, fp
2b850     0C 4E 85 F1 | 	sub	fp, #12
2b854     04 1E CE F7 | 	test	local01, #4 wz
2b858     10 4E 05 51 |  if_ne	add	fp, #16
2b85c     A7 10 68 5C |  if_ne	wrlong	#8, fp
2b860     10 4E 85 51 |  if_ne	sub	fp, #16
2b864                 | LR__4473
2b864                 | LR__4474
2b864     10 4E 05 F1 | 	add	fp, #16
2b868     A7 1E 0A FB | 	rdlong	local01, fp wz
2b86c     10 4E 85 F1 | 	sub	fp, #16
2b870     A8 01 90 5D |  if_ne	jmp	#LR__4478
2b874     0C 4E 05 F1 | 	add	fp, #12
2b878     A7 1E C2 FA | 	rdbyte	local01, fp
2b87c     0C 4E 85 F1 | 	sub	fp, #12
2b880     08 1E CE F7 | 	test	local01, #8 wz
2b884     94 01 90 AD |  if_e	jmp	#LR__4478
2b888     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
2b88c     54 4E 05 F1 | 	add	fp, #84
2b890     A7 FA 61 FC | 	wrlong	result1, fp
2b894     24 4E 85 F1 | 	sub	fp, #36
2b898     A7 12 02 FB | 	rdlong	arg01, fp
2b89c     0E 12 06 F1 | 	add	arg01, #14
2b8a0     09 FB 61 FC | 	wrlong	result1, arg01
2b8a4     A7 12 02 FB | 	rdlong	arg01, fp
2b8a8     16 12 06 F1 | 	add	arg01, #22
2b8ac     24 4E 05 F1 | 	add	fp, #36
2b8b0     A7 14 02 FB | 	rdlong	arg02, fp
2b8b4     09 15 62 FC | 	wrlong	arg02, arg01
2b8b8     10 4E 85 F1 | 	sub	fp, #16
2b8bc     A7 12 02 FB | 	rdlong	arg01, fp
2b8c0     14 4E 85 F1 | 	sub	fp, #20
2b8c4     A7 14 02 FB | 	rdlong	arg02, fp
2b8c8     30 4E 85 F1 | 	sub	fp, #48
2b8cc     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
2b8d0     48 4E 05 F1 | 	add	fp, #72
2b8d4     A7 FA 61 FC | 	wrlong	result1, fp
2b8d8     18 4E 85 F1 | 	sub	fp, #24
2b8dc     A7 1E 02 FB | 	rdlong	local01, fp
2b8e0     0B 1E 06 F1 | 	add	local01, #11
2b8e4     0F 41 48 FC | 	wrbyte	#32, local01
2b8e8     14 4E 05 F1 | 	add	fp, #20
2b8ec     A7 12 02 FB | 	rdlong	arg01, fp
2b8f0     14 4E 85 F1 | 	sub	fp, #20
2b8f4     A7 14 02 FB | 	rdlong	arg02, fp
2b8f8     30 4E 85 F1 | 	sub	fp, #48
2b8fc     00 16 06 F6 | 	mov	arg03, #0
2b900     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
2b904     30 4E 05 F1 | 	add	fp, #48
2b908     A7 12 02 FB | 	rdlong	arg01, fp
2b90c     1C 12 06 F1 | 	add	arg01, #28
2b910     09 01 68 FC | 	wrlong	#0, arg01
2b914     14 4E 05 F1 | 	add	fp, #20
2b918     A7 1E 02 FB | 	rdlong	local01, fp
2b91c     03 1E 06 F1 | 	add	local01, #3
2b920     0F 03 48 FC | 	wrbyte	#1, local01
2b924     04 4E 05 F1 | 	add	fp, #4
2b928     A7 1E 0A FB | 	rdlong	local01, fp wz
2b92c     48 4E 85 F1 | 	sub	fp, #72
2b930     E8 00 90 AD |  if_e	jmp	#LR__4478
2b934     44 4E 05 F1 | 	add	fp, #68
2b938     A7 1E 02 FB | 	rdlong	local01, fp
2b93c     30 1E 06 F1 | 	add	local01, #48
2b940     0F 1F 02 FB | 	rdlong	local01, local01
2b944     14 4E 05 F1 | 	add	fp, #20
2b948     A7 1E 62 FC | 	wrlong	local01, fp
2b94c     44 4E 85 F1 | 	sub	fp, #68
2b950     A7 12 02 F6 | 	mov	arg01, fp
2b954     34 4E 05 F1 | 	add	fp, #52
2b958     A7 14 02 FB | 	rdlong	arg02, fp
2b95c     48 4E 85 F1 | 	sub	fp, #72
2b960     00 16 06 F6 | 	mov	arg03, #0
2b964     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
2b968     10 4E 05 F1 | 	add	fp, #16
2b96c     A7 FA 61 FC | 	wrlong	result1, fp
2b970     10 4E 85 F1 | 	sub	fp, #16
2b974     00 FA 0D F2 | 	cmp	result1, #0 wz
2b978     A0 00 90 5D |  if_ne	jmp	#LR__4478
2b97c     44 4E 05 F1 | 	add	fp, #68
2b980     A7 12 02 FB | 	rdlong	arg01, fp
2b984     14 4E 05 F1 | 	add	fp, #20
2b988     A7 14 02 FB | 	rdlong	arg02, fp
2b98c     58 4E 85 F1 | 	sub	fp, #88
2b990     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
2b994     10 4E 05 F1 | 	add	fp, #16
2b998     A7 FA 61 FC | 	wrlong	result1, fp
2b99c     34 4E 05 F1 | 	add	fp, #52
2b9a0     A7 18 02 FB | 	rdlong	arg04, fp
2b9a4     04 4E 05 F1 | 	add	fp, #4
2b9a8     A7 1E 02 FB | 	rdlong	local01, fp
2b9ac     48 4E 85 F1 | 	sub	fp, #72
2b9b0     01 1E 86 F1 | 	sub	local01, #1
2b9b4     10 18 06 F1 | 	add	arg04, #16
2b9b8     0C 1F 62 FC | 	wrlong	local01, arg04
2b9bc     5C 00 90 FD | 	jmp	#LR__4478
2b9c0                 | LR__4475
2b9c0     10 4E 05 F1 | 	add	fp, #16
2b9c4     A7 18 0A FB | 	rdlong	arg04, fp wz
2b9c8     10 4E 85 F1 | 	sub	fp, #16
2b9cc     4C 00 90 5D |  if_ne	jmp	#LR__4477
2b9d0     1A 4E 05 F1 | 	add	fp, #26
2b9d4     A7 18 C2 FA | 	rdbyte	arg04, fp
2b9d8     1A 4E 85 F1 | 	sub	fp, #26
2b9dc     10 18 CE F7 | 	test	arg04, #16 wz
2b9e0     10 4E 05 51 |  if_ne	add	fp, #16
2b9e4     A7 08 68 5C |  if_ne	wrlong	#4, fp
2b9e8     10 4E 85 51 |  if_ne	sub	fp, #16
2b9ec     2C 00 90 5D |  if_ne	jmp	#LR__4476
2b9f0     0C 4E 05 F1 | 	add	fp, #12
2b9f4     A7 18 C2 FA | 	rdbyte	arg04, fp
2b9f8     0C 4E 85 F1 | 	sub	fp, #12
2b9fc     02 18 CE F7 | 	test	arg04, #2 wz
2ba00     1A 4E 05 51 |  if_ne	add	fp, #26
2ba04     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
2ba08     1A 4E 85 51 |  if_ne	sub	fp, #26
2ba0c     01 1E CE 57 |  if_ne	test	local01, #1 wz
2ba10     10 4E 05 51 |  if_ne	add	fp, #16
2ba14     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2ba18     10 4E 85 51 |  if_ne	sub	fp, #16
2ba1c                 | LR__4476
2ba1c                 | LR__4477
2ba1c                 | LR__4478
2ba1c     10 4E 05 F1 | 	add	fp, #16
2ba20     A7 1E 0A FB | 	rdlong	local01, fp wz
2ba24     10 4E 85 F1 | 	sub	fp, #16
2ba28     60 00 90 5D |  if_ne	jmp	#LR__4479
2ba2c     0C 4E 05 F1 | 	add	fp, #12
2ba30     A7 20 C2 FA | 	rdbyte	local02, fp
2ba34     0C 4E 85 F1 | 	sub	fp, #12
2ba38     08 20 CE F7 | 	test	local02, #8 wz
2ba3c     0C 4E 05 51 |  if_ne	add	fp, #12
2ba40     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
2ba44     40 20 46 55 |  if_ne	or	local02, #64
2ba48     A7 20 42 5C |  if_ne	wrbyte	local02, fp
2ba4c     0C 4E 85 51 |  if_ne	sub	fp, #12
2ba50     04 4E 05 F1 | 	add	fp, #4
2ba54     A7 20 02 FB | 	rdlong	local02, fp
2ba58     40 4E 05 F1 | 	add	fp, #64
2ba5c     A7 1E 02 FB | 	rdlong	local01, fp
2ba60     30 1E 06 F1 | 	add	local01, #48
2ba64     0F 1F 02 FB | 	rdlong	local01, local01
2ba68     20 20 06 F1 | 	add	local02, #32
2ba6c     10 1F 62 FC | 	wrlong	local01, local02
2ba70     40 4E 85 F1 | 	sub	fp, #64
2ba74     A7 20 02 FB | 	rdlong	local02, fp
2ba78     2C 4E 05 F1 | 	add	fp, #44
2ba7c     A7 1E 02 FB | 	rdlong	local01, fp
2ba80     30 4E 85 F1 | 	sub	fp, #48
2ba84     24 20 06 F1 | 	add	local02, #36
2ba88     10 1F 62 FC | 	wrlong	local01, local02
2ba8c                 | LR__4479
2ba8c     10 4E 05 F1 | 	add	fp, #16
2ba90     A7 20 0A FB | 	rdlong	local02, fp wz
2ba94     10 4E 85 F1 | 	sub	fp, #16
2ba98     F4 02 90 5D |  if_ne	jmp	#LR__4485
2ba9c     04 4E 05 F1 | 	add	fp, #4
2baa0     A7 20 02 FB | 	rdlong	local02, fp
2baa4     40 4E 05 F1 | 	add	fp, #64
2baa8     A7 12 02 FB | 	rdlong	arg01, fp
2baac     14 4E 85 F1 | 	sub	fp, #20
2bab0     A7 14 02 FB | 	rdlong	arg02, fp
2bab4     30 4E 85 F1 | 	sub	fp, #48
2bab8     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
2babc     08 20 06 F1 | 	add	local02, #8
2bac0     10 FB 61 FC | 	wrlong	result1, local02
2bac4     04 4E 05 F1 | 	add	fp, #4
2bac8     A7 20 02 FB | 	rdlong	local02, fp
2bacc     2C 4E 05 F1 | 	add	fp, #44
2bad0     A7 12 02 FB | 	rdlong	arg01, fp
2bad4     1C 12 06 F1 | 	add	arg01, #28
2bad8                 | ' {
2bad8                 | ' 
2bad8                 | ' 	return *((DWORD*)ptr);
2bad8     09 FB 01 FB | 	rdlong	result1, arg01
2badc     0C 20 06 F1 | 	add	local02, #12
2bae0     10 FB 61 FC | 	wrlong	result1, local02
2bae4     2C 4E 85 F1 | 	sub	fp, #44
2bae8     A7 20 02 FB | 	rdlong	local02, fp
2baec     40 4E 05 F1 | 	add	fp, #64
2baf0     A7 1E 02 FB | 	rdlong	local01, fp
2baf4     10 1F 62 FC | 	wrlong	local01, local02
2baf8     40 4E 85 F1 | 	sub	fp, #64
2bafc     A7 20 02 FB | 	rdlong	local02, fp
2bb00     40 4E 05 F1 | 	add	fp, #64
2bb04     A7 1E 02 FB | 	rdlong	local01, fp
2bb08     06 1E 06 F1 | 	add	local01, #6
2bb0c     0F 1F E2 FA | 	rdword	local01, local01
2bb10     04 20 06 F1 | 	add	local02, #4
2bb14     10 1F 52 FC | 	wrword	local01, local02
2bb18     40 4E 85 F1 | 	sub	fp, #64
2bb1c     A7 20 02 FB | 	rdlong	local02, fp
2bb20     08 4E 05 F1 | 	add	fp, #8
2bb24     A7 1E C2 FA | 	rdbyte	local01, fp
2bb28     10 20 06 F1 | 	add	local02, #16
2bb2c     10 1F 42 FC | 	wrbyte	local01, local02
2bb30     08 4E 85 F1 | 	sub	fp, #8
2bb34     A7 20 02 FB | 	rdlong	local02, fp
2bb38     11 20 06 F1 | 	add	local02, #17
2bb3c     10 01 48 FC | 	wrbyte	#0, local02
2bb40     A7 20 02 FB | 	rdlong	local02, fp
2bb44     1C 20 06 F1 | 	add	local02, #28
2bb48     10 01 68 FC | 	wrlong	#0, local02
2bb4c     A7 20 02 FB | 	rdlong	local02, fp
2bb50     14 20 06 F1 | 	add	local02, #20
2bb54     10 01 68 FC | 	wrlong	#0, local02
2bb58     A7 12 02 FB | 	rdlong	arg01, fp
2bb5c     04 4E 85 F1 | 	sub	fp, #4
2bb60     28 12 06 F1 | 	add	arg01, #40
2bb64     00 14 06 F6 | 	mov	arg02, #0
2bb68     09 16 C6 F9 | 	decod	arg03, #9
2bb6c     98 00 A0 FD | 	call	#\builtin_bytefill_
2bb70     0C 4E 05 F1 | 	add	fp, #12
2bb74     A7 20 C2 FA | 	rdbyte	local02, fp
2bb78     0C 4E 85 F1 | 	sub	fp, #12
2bb7c     20 20 CE F7 | 	test	local02, #32 wz
2bb80     0C 02 90 AD |  if_e	jmp	#LR__4484
2bb84     04 4E 05 F1 | 	add	fp, #4
2bb88     A7 1E 02 FB | 	rdlong	local01, fp
2bb8c     04 4E 85 F1 | 	sub	fp, #4
2bb90     0C 1E 06 F1 | 	add	local01, #12
2bb94     0F 21 02 FB | 	rdlong	local02, local01
2bb98     01 20 16 F2 | 	cmp	local02, #1 wc
2bb9c     F0 01 90 CD |  if_b	jmp	#LR__4484
2bba0     04 4E 05 F1 | 	add	fp, #4
2bba4     A7 1E 02 FB | 	rdlong	local01, fp
2bba8     0F 21 02 F6 | 	mov	local02, local01
2bbac     0C 1E 06 F1 | 	add	local01, #12
2bbb0     0F 1F 02 FB | 	rdlong	local01, local01
2bbb4     14 20 06 F1 | 	add	local02, #20
2bbb8     10 1F 62 FC | 	wrlong	local01, local02
2bbbc     40 4E 05 F1 | 	add	fp, #64
2bbc0     A7 20 02 FB | 	rdlong	local02, fp
2bbc4     0A 20 06 F1 | 	add	local02, #10
2bbc8     10 21 E2 FA | 	rdword	local02, local02
2bbcc     09 20 66 F0 | 	shl	local02, #9
2bbd0     08 4E 05 F1 | 	add	fp, #8
2bbd4     A7 20 62 FC | 	wrlong	local02, fp
2bbd8     48 4E 85 F1 | 	sub	fp, #72
2bbdc     A7 20 02 FB | 	rdlong	local02, fp
2bbe0     08 20 06 F1 | 	add	local02, #8
2bbe4     10 1F 02 FB | 	rdlong	local01, local02
2bbe8     4C 4E 05 F1 | 	add	fp, #76
2bbec     A7 1E 62 FC | 	wrlong	local01, fp
2bbf0                 | ' 				fp->fptr = fp->obj.objsize;
2bbf0                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2bbf0                 | ' 				clst = fp->obj.sclust;
2bbf0                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2bbf0     4C 4E 85 F1 | 	sub	fp, #76
2bbf4     A7 20 02 FB | 	rdlong	local02, fp
2bbf8     0C 20 06 F1 | 	add	local02, #12
2bbfc     10 1F 02 FB | 	rdlong	local01, local02
2bc00     58 4E 05 F1 | 	add	fp, #88
2bc04     A7 1E 62 FC | 	wrlong	local01, fp
2bc08     5C 4E 85 F1 | 	sub	fp, #92
2bc0c                 | LR__4480
2bc0c     10 4E 05 F1 | 	add	fp, #16
2bc10     A7 20 0A FB | 	rdlong	local02, fp wz
2bc14     10 4E 85 F1 | 	sub	fp, #16
2bc18     94 00 90 5D |  if_ne	jmp	#LR__4481
2bc1c     5C 4E 05 F1 | 	add	fp, #92
2bc20     A7 20 02 FB | 	rdlong	local02, fp
2bc24     10 4E 85 F1 | 	sub	fp, #16
2bc28     A7 1E 02 FB | 	rdlong	local01, fp
2bc2c     4C 4E 85 F1 | 	sub	fp, #76
2bc30     0F 21 1A F2 | 	cmp	local02, local01 wcz
2bc34     78 00 90 ED |  if_be	jmp	#LR__4481
2bc38     04 4E 05 F1 | 	add	fp, #4
2bc3c     A7 12 02 FB | 	rdlong	arg01, fp
2bc40     4C 4E 05 F1 | 	add	fp, #76
2bc44     A7 14 02 FB | 	rdlong	arg02, fp
2bc48     50 4E 85 F1 | 	sub	fp, #80
2bc4c     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
2bc50     50 4E 05 F1 | 	add	fp, #80
2bc54     A7 FA 61 FC | 	wrlong	result1, fp
2bc58     50 4E 85 F1 | 	sub	fp, #80
2bc5c     02 FA 15 F2 | 	cmp	result1, #2 wc
2bc60     10 4E 05 C1 |  if_b	add	fp, #16
2bc64     A7 04 68 CC |  if_b	wrlong	#2, fp
2bc68     10 4E 85 C1 |  if_b	sub	fp, #16
2bc6c     50 4E 05 F1 | 	add	fp, #80
2bc70     A7 20 02 FB | 	rdlong	local02, fp
2bc74     50 4E 85 F1 | 	sub	fp, #80
2bc78     FF FF 7F FF 
2bc7c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
2bc80     10 4E 05 A1 |  if_e	add	fp, #16
2bc84     A7 02 68 AC |  if_e	wrlong	#1, fp
2bc88     10 4E 85 A1 |  if_e	sub	fp, #16
2bc8c     5C 4E 05 F1 | 	add	fp, #92
2bc90     A7 20 02 FB | 	rdlong	local02, fp
2bc94     10 4E 85 F1 | 	sub	fp, #16
2bc98     A7 1E 02 FB | 	rdlong	local01, fp
2bc9c     0F 21 82 F1 | 	sub	local02, local01
2bca0     10 4E 05 F1 | 	add	fp, #16
2bca4     A7 20 62 FC | 	wrlong	local02, fp
2bca8     5C 4E 85 F1 | 	sub	fp, #92
2bcac     5C FF 9F FD | 	jmp	#LR__4480
2bcb0                 | LR__4481
2bcb0     04 4E 05 F1 | 	add	fp, #4
2bcb4     A7 20 02 FB | 	rdlong	local02, fp
2bcb8     4C 4E 05 F1 | 	add	fp, #76
2bcbc     A7 1E 02 FB | 	rdlong	local01, fp
2bcc0     18 20 06 F1 | 	add	local02, #24
2bcc4     10 1F 62 FC | 	wrlong	local01, local02
2bcc8     40 4E 85 F1 | 	sub	fp, #64
2bccc     A7 20 0A FB | 	rdlong	local02, fp wz
2bcd0     10 4E 85 F1 | 	sub	fp, #16
2bcd4     B8 00 90 5D |  if_ne	jmp	#LR__4483
2bcd8     5C 4E 05 F1 | 	add	fp, #92
2bcdc     A7 1E 02 FB | 	rdlong	local01, fp
2bce0     5C 4E 85 F1 | 	sub	fp, #92
2bce4     FF 1F CE F7 | 	test	local01, #511 wz
2bce8     A4 00 90 AD |  if_e	jmp	#LR__4483
2bcec     44 4E 05 F1 | 	add	fp, #68
2bcf0     A7 12 02 FB | 	rdlong	arg01, fp
2bcf4     0C 4E 05 F1 | 	add	fp, #12
2bcf8     A7 14 02 FB | 	rdlong	arg02, fp
2bcfc     50 4E 85 F1 | 	sub	fp, #80
2bd00     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
2bd04     58 4E 05 F1 | 	add	fp, #88
2bd08     A7 FA 61 FC | 	wrlong	result1, fp
2bd0c     00 FA 4D F2 | 	cmps	result1, #0 wz
2bd10     58 4E 85 F1 | 	sub	fp, #88
2bd14     10 4E 05 A1 |  if_e	add	fp, #16
2bd18     A7 04 68 AC |  if_e	wrlong	#2, fp
2bd1c     10 4E 85 A1 |  if_e	sub	fp, #16
2bd20     6C 00 90 AD |  if_e	jmp	#LR__4482
2bd24     04 4E 05 F1 | 	add	fp, #4
2bd28     A7 20 02 FB | 	rdlong	local02, fp
2bd2c     54 4E 05 F1 | 	add	fp, #84
2bd30     A7 1E 02 FB | 	rdlong	local01, fp
2bd34     04 4E 05 F1 | 	add	fp, #4
2bd38     A7 18 02 FB | 	rdlong	arg04, fp
2bd3c     09 18 46 F0 | 	shr	arg04, #9
2bd40     0C 1F 02 F1 | 	add	local01, arg04
2bd44     1C 20 06 F1 | 	add	local02, #28
2bd48     10 1F 62 FC | 	wrlong	local01, local02
2bd4c     18 4E 85 F1 | 	sub	fp, #24
2bd50     A7 20 02 FB | 	rdlong	local02, fp
2bd54     01 20 06 F1 | 	add	local02, #1
2bd58     10 13 C2 FA | 	rdbyte	arg01, local02
2bd5c     40 4E 85 F1 | 	sub	fp, #64
2bd60     A7 20 02 FB | 	rdlong	local02, fp
2bd64     10 15 02 F6 | 	mov	arg02, local02
2bd68     28 14 06 F1 | 	add	arg02, #40
2bd6c     04 4E 85 F1 | 	sub	fp, #4
2bd70     1C 20 06 F1 | 	add	local02, #28
2bd74     10 17 02 FB | 	rdlong	arg03, local02
2bd78     01 18 06 F6 | 	mov	arg04, #1
2bd7c     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
2bd80     00 FA 0D F2 | 	cmp	result1, #0 wz
2bd84     10 4E 05 51 |  if_ne	add	fp, #16
2bd88     A7 02 68 5C |  if_ne	wrlong	#1, fp
2bd8c     10 4E 85 51 |  if_ne	sub	fp, #16
2bd90                 | LR__4482
2bd90                 | LR__4483
2bd90                 | LR__4484
2bd90                 | LR__4485
2bd90                 | LR__4486
2bd90     10 4E 05 F1 | 	add	fp, #16
2bd94     A7 20 0A FB | 	rdlong	local02, fp wz
2bd98     10 4E 85 F1 | 	sub	fp, #16
2bd9c     04 4E 05 51 |  if_ne	add	fp, #4
2bda0     A7 20 02 5B |  if_ne	rdlong	local02, fp
2bda4     04 4E 85 51 |  if_ne	sub	fp, #4
2bda8     10 01 68 5C |  if_ne	wrlong	#0, local02
2bdac                 | ' 
2bdac                 | ' 	return res ;
2bdac     10 4E 05 F1 | 	add	fp, #16
2bdb0     A7 FA 01 FB | 	rdlong	result1, fp
2bdb4     10 4E 85 F1 | 	sub	fp, #16
2bdb8                 | LR__4487
2bdb8     A7 F0 03 F6 | 	mov	ptra, fp
2bdbc     B2 00 A0 FD | 	call	#popregs_
2bdc0                 | _fatfs_cc_f_open_ret
2bdc0     2D 00 64 FD | 	ret
2bdc4                 | 
2bdc4                 | _fatfs_cc_f_read
2bdc4     0E 4A 05 F6 | 	mov	COUNT_, #14
2bdc8     A8 00 A0 FD | 	call	#pushregs_
2bdcc     38 F0 07 F1 | 	add	ptra, #56
2bdd0     04 4E 05 F1 | 	add	fp, #4
2bdd4     A7 12 62 FC | 	wrlong	arg01, fp
2bdd8     04 4E 05 F1 | 	add	fp, #4
2bddc     A7 14 62 FC | 	wrlong	arg02, fp
2bde0     04 4E 05 F1 | 	add	fp, #4
2bde4     A7 16 62 FC | 	wrlong	arg03, fp
2bde8     04 4E 05 F1 | 	add	fp, #4
2bdec     A7 18 62 FC | 	wrlong	arg04, fp
2bdf0     08 4E 85 F1 | 	sub	fp, #8
2bdf4     A7 FA 01 FB | 	rdlong	result1, fp
2bdf8     2C 4E 05 F1 | 	add	fp, #44
2bdfc     A7 FA 61 FC | 	wrlong	result1, fp
2be00     24 4E 85 F1 | 	sub	fp, #36
2be04     A7 FA 01 FB | 	rdlong	result1, fp
2be08     FD 00 68 FC | 	wrlong	#0, result1
2be0c     0C 4E 85 F1 | 	sub	fp, #12
2be10     A7 12 02 FB | 	rdlong	arg01, fp
2be14     14 4E 05 F1 | 	add	fp, #20
2be18     A7 14 02 F6 | 	mov	arg02, fp
2be1c     18 4E 85 F1 | 	sub	fp, #24
2be20     24 F7 BF FD | 	call	#_fatfs_cc_validate
2be24     14 4E 05 F1 | 	add	fp, #20
2be28     A7 FA 61 FC | 	wrlong	result1, fp
2be2c     00 FA 4D F2 | 	cmps	result1, #0 wz
2be30     14 4E 85 F1 | 	sub	fp, #20
2be34     20 00 90 5D |  if_ne	jmp	#LR__4490
2be38     04 4E 05 F1 | 	add	fp, #4
2be3c     A7 14 02 FB | 	rdlong	arg02, fp
2be40     11 14 06 F1 | 	add	arg02, #17
2be44     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2be48     10 4E 05 F1 | 	add	fp, #16
2be4c     A7 14 62 FC | 	wrlong	arg02, fp
2be50     14 4E 85 F1 | 	sub	fp, #20
2be54     10 00 90 AD |  if_e	jmp	#LR__4491
2be58                 | LR__4490
2be58     14 4E 05 F1 | 	add	fp, #20
2be5c     A7 FA 01 FB | 	rdlong	result1, fp
2be60     14 4E 85 F1 | 	sub	fp, #20
2be64     EC 05 90 FD | 	jmp	#LR__4510
2be68                 | LR__4491
2be68     04 4E 05 F1 | 	add	fp, #4
2be6c     A7 18 02 FB | 	rdlong	arg04, fp
2be70     04 4E 85 F1 | 	sub	fp, #4
2be74     10 18 06 F1 | 	add	arg04, #16
2be78     0C 19 C2 FA | 	rdbyte	arg04, arg04
2be7c     01 18 CE F7 | 	test	arg04, #1 wz
2be80     07 FA 05 A6 |  if_e	mov	result1, #7
2be84     CC 05 90 AD |  if_e	jmp	#LR__4510
2be88     04 4E 05 F1 | 	add	fp, #4
2be8c     A7 1E 02 FB | 	rdlong	local01, fp
2be90     0F 21 02 F6 | 	mov	local02, local01
2be94     0C 20 06 F1 | 	add	local02, #12
2be98     10 23 02 FB | 	rdlong	local03, local02
2be9c     14 1E 06 F1 | 	add	local01, #20
2bea0     0F 1F 02 FB | 	rdlong	local01, local01
2bea4     0F 23 82 F1 | 	sub	local03, local01
2bea8     20 4E 05 F1 | 	add	fp, #32
2beac     A7 22 62 FC | 	wrlong	local03, fp
2beb0     18 4E 85 F1 | 	sub	fp, #24
2beb4     A7 24 02 FB | 	rdlong	local04, fp
2beb8     0C 4E 85 F1 | 	sub	fp, #12
2bebc     11 25 1A F2 | 	cmp	local04, local03 wcz
2bec0     24 4E 05 11 |  if_a	add	fp, #36
2bec4     A7 24 02 1B |  if_a	rdlong	local04, fp
2bec8     18 4E 85 11 |  if_a	sub	fp, #24
2becc     A7 24 62 1C |  if_a	wrlong	local04, fp
2bed0     0C 4E 85 11 |  if_a	sub	fp, #12
2bed4                 | ' 
2bed4                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2bed4                 | LR__4492
2bed4     0C 4E 05 F1 | 	add	fp, #12
2bed8     A7 20 02 FB | 	rdlong	local02, fp
2bedc     0C 4E 85 F1 | 	sub	fp, #12
2bee0     10 25 02 F6 | 	mov	local04, local02
2bee4     01 24 16 F2 | 	cmp	local04, #1 wc
2bee8     64 05 90 CD |  if_b	jmp	#LR__4509
2beec     04 4E 05 F1 | 	add	fp, #4
2bef0     A7 22 02 FB | 	rdlong	local03, fp
2bef4     04 4E 85 F1 | 	sub	fp, #4
2bef8     14 22 06 F1 | 	add	local03, #20
2befc     11 23 02 FB | 	rdlong	local03, local03
2bf00     FF 23 CE F7 | 	test	local03, #511 wz
2bf04     3C 04 90 5D |  if_ne	jmp	#LR__4507
2bf08     04 4E 05 F1 | 	add	fp, #4
2bf0c     A7 1E 02 FB | 	rdlong	local01, fp
2bf10     14 1E 06 F1 | 	add	local01, #20
2bf14     0F 23 02 FB | 	rdlong	local03, local01
2bf18     09 22 46 F0 | 	shr	local03, #9
2bf1c     14 4E 05 F1 | 	add	fp, #20
2bf20     A7 26 02 FB | 	rdlong	local05, fp
2bf24     13 29 02 F6 | 	mov	local06, local05
2bf28     0A 28 06 F1 | 	add	local06, #10
2bf2c     14 2B E2 FA | 	rdword	local07, local06
2bf30     0A 28 86 F1 | 	sub	local06, #10
2bf34     15 2D 32 F9 | 	getword	local08, local07, #0
2bf38     01 2C 86 F1 | 	sub	local08, #1
2bf3c     16 23 0A F5 | 	and	local03, local08 wz
2bf40     18 4E 05 F1 | 	add	fp, #24
2bf44     A7 22 62 FC | 	wrlong	local03, fp
2bf48     30 4E 85 F1 | 	sub	fp, #48
2bf4c     E0 00 90 5D |  if_ne	jmp	#LR__4497
2bf50     04 4E 05 F1 | 	add	fp, #4
2bf54     A7 22 02 FB | 	rdlong	local03, fp
2bf58     04 4E 85 F1 | 	sub	fp, #4
2bf5c     14 22 06 F1 | 	add	local03, #20
2bf60     11 23 0A FB | 	rdlong	local03, local03 wz
2bf64     20 00 90 5D |  if_ne	jmp	#LR__4493
2bf68     04 4E 05 F1 | 	add	fp, #4
2bf6c     A7 22 02 FB | 	rdlong	local03, fp
2bf70     08 22 06 F1 | 	add	local03, #8
2bf74     11 23 02 FB | 	rdlong	local03, local03
2bf78     18 4E 05 F1 | 	add	fp, #24
2bf7c     A7 22 62 FC | 	wrlong	local03, fp
2bf80     1C 4E 85 F1 | 	sub	fp, #28
2bf84     28 00 90 FD | 	jmp	#LR__4494
2bf88                 | LR__4493
2bf88     04 4E 05 F1 | 	add	fp, #4
2bf8c     A7 2C 02 FB | 	rdlong	local08, fp
2bf90     16 13 02 F6 | 	mov	arg01, local08
2bf94     04 4E 85 F1 | 	sub	fp, #4
2bf98     18 2C 06 F1 | 	add	local08, #24
2bf9c     16 15 02 FB | 	rdlong	arg02, local08
2bfa0     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
2bfa4     1C 4E 05 F1 | 	add	fp, #28
2bfa8     A7 FA 61 FC | 	wrlong	result1, fp
2bfac     1C 4E 85 F1 | 	sub	fp, #28
2bfb0                 | LR__4494
2bfb0     1C 4E 05 F1 | 	add	fp, #28
2bfb4     A7 22 02 FB | 	rdlong	local03, fp
2bfb8     1C 4E 85 F1 | 	sub	fp, #28
2bfbc     02 22 16 F2 | 	cmp	local03, #2 wc
2bfc0     1C 00 90 3D |  if_ae	jmp	#LR__4495
2bfc4     04 4E 05 F1 | 	add	fp, #4
2bfc8     A7 22 02 FB | 	rdlong	local03, fp
2bfcc     04 4E 85 F1 | 	sub	fp, #4
2bfd0     11 22 06 F1 | 	add	local03, #17
2bfd4     11 05 48 FC | 	wrbyte	#2, local03
2bfd8     02 FA 05 F6 | 	mov	result1, #2
2bfdc     74 04 90 FD | 	jmp	#LR__4510
2bfe0                 | LR__4495
2bfe0     1C 4E 05 F1 | 	add	fp, #28
2bfe4     A7 22 02 FB | 	rdlong	local03, fp
2bfe8     1C 4E 85 F1 | 	sub	fp, #28
2bfec     FF FF 7F FF 
2bff0     FF 23 0E F2 | 	cmp	local03, ##-1 wz
2bff4     1C 00 90 5D |  if_ne	jmp	#LR__4496
2bff8     04 4E 05 F1 | 	add	fp, #4
2bffc     A7 22 02 FB | 	rdlong	local03, fp
2c000     04 4E 85 F1 | 	sub	fp, #4
2c004     11 22 06 F1 | 	add	local03, #17
2c008     11 03 48 FC | 	wrbyte	#1, local03
2c00c     01 FA 05 F6 | 	mov	result1, #1
2c010     40 04 90 FD | 	jmp	#LR__4510
2c014                 | LR__4496
2c014     04 4E 05 F1 | 	add	fp, #4
2c018     A7 22 02 FB | 	rdlong	local03, fp
2c01c     18 4E 05 F1 | 	add	fp, #24
2c020     A7 2C 02 FB | 	rdlong	local08, fp
2c024     1C 4E 85 F1 | 	sub	fp, #28
2c028     18 22 06 F1 | 	add	local03, #24
2c02c     11 2D 62 FC | 	wrlong	local08, local03
2c030                 | LR__4497
2c030     18 4E 05 F1 | 	add	fp, #24
2c034     A7 12 02 FB | 	rdlong	arg01, fp
2c038     14 4E 85 F1 | 	sub	fp, #20
2c03c     A7 22 02 FB | 	rdlong	local03, fp
2c040     04 4E 85 F1 | 	sub	fp, #4
2c044     18 22 06 F1 | 	add	local03, #24
2c048     11 15 02 FB | 	rdlong	arg02, local03
2c04c     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
2c050     20 4E 05 F1 | 	add	fp, #32
2c054     A7 FA 61 FC | 	wrlong	result1, fp
2c058     20 4E 85 F1 | 	sub	fp, #32
2c05c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c060     1C 00 90 5D |  if_ne	jmp	#LR__4498
2c064     04 4E 05 F1 | 	add	fp, #4
2c068     A7 22 02 FB | 	rdlong	local03, fp
2c06c     04 4E 85 F1 | 	sub	fp, #4
2c070     11 22 06 F1 | 	add	local03, #17
2c074     11 05 48 FC | 	wrbyte	#2, local03
2c078     02 FA 05 F6 | 	mov	result1, #2
2c07c     D4 03 90 FD | 	jmp	#LR__4510
2c080                 | LR__4498
2c080     20 4E 05 F1 | 	add	fp, #32
2c084     A7 22 02 FB | 	rdlong	local03, fp
2c088     10 4E 05 F1 | 	add	fp, #16
2c08c     A7 2C 02 FB | 	rdlong	local08, fp
2c090     16 23 02 F1 | 	add	local03, local08
2c094     10 4E 85 F1 | 	sub	fp, #16
2c098     A7 22 62 FC | 	wrlong	local03, fp
2c09c     14 4E 85 F1 | 	sub	fp, #20
2c0a0     A7 22 02 FB | 	rdlong	local03, fp
2c0a4     09 22 46 F0 | 	shr	local03, #9
2c0a8     20 4E 05 F1 | 	add	fp, #32
2c0ac     A7 22 62 FC | 	wrlong	local03, fp
2c0b0     2C 4E 85 F1 | 	sub	fp, #44
2c0b4     01 22 16 F2 | 	cmp	local03, #1 wc
2c0b8     5C 01 90 CD |  if_b	jmp	#LR__4502
2c0bc     30 4E 05 F1 | 	add	fp, #48
2c0c0     A7 22 02 FB | 	rdlong	local03, fp
2c0c4     04 4E 85 F1 | 	sub	fp, #4
2c0c8     A7 2C 02 FB | 	rdlong	local08, fp
2c0cc     16 23 02 F1 | 	add	local03, local08
2c0d0     14 4E 85 F1 | 	sub	fp, #20
2c0d4     A7 2C 02 FB | 	rdlong	local08, fp
2c0d8     18 4E 85 F1 | 	sub	fp, #24
2c0dc     0A 2C 06 F1 | 	add	local08, #10
2c0e0     16 2D E2 FA | 	rdword	local08, local08
2c0e4     16 23 1A F2 | 	cmp	local03, local08 wcz
2c0e8     28 00 90 ED |  if_be	jmp	#LR__4499
2c0ec     18 4E 05 F1 | 	add	fp, #24
2c0f0     A7 1E 02 FB | 	rdlong	local01, fp
2c0f4     0A 1E 06 F1 | 	add	local01, #10
2c0f8     0F 23 E2 FA | 	rdword	local03, local01
2c0fc     18 4E 05 F1 | 	add	fp, #24
2c100     A7 2C 02 FB | 	rdlong	local08, fp
2c104     16 23 82 F1 | 	sub	local03, local08
2c108     04 4E 85 F1 | 	sub	fp, #4
2c10c     A7 22 62 FC | 	wrlong	local03, fp
2c110     2C 4E 85 F1 | 	sub	fp, #44
2c114                 | LR__4499
2c114     18 4E 05 F1 | 	add	fp, #24
2c118     A7 1E 02 FB | 	rdlong	local01, fp
2c11c     01 1E 06 F1 | 	add	local01, #1
2c120     0F 13 C2 FA | 	rdbyte	arg01, local01
2c124     1C 4E 05 F1 | 	add	fp, #28
2c128     A7 14 02 FB | 	rdlong	arg02, fp
2c12c     14 4E 85 F1 | 	sub	fp, #20
2c130     A7 16 02 FB | 	rdlong	arg03, fp
2c134     0C 4E 05 F1 | 	add	fp, #12
2c138     A7 18 02 FB | 	rdlong	arg04, fp
2c13c     2C 4E 85 F1 | 	sub	fp, #44
2c140     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
2c144     00 FA 0D F2 | 	cmp	result1, #0 wz
2c148     1C 00 90 AD |  if_e	jmp	#LR__4500
2c14c     04 4E 05 F1 | 	add	fp, #4
2c150     A7 22 02 FB | 	rdlong	local03, fp
2c154     04 4E 85 F1 | 	sub	fp, #4
2c158     11 22 06 F1 | 	add	local03, #17
2c15c     11 03 48 FC | 	wrbyte	#1, local03
2c160     01 FA 05 F6 | 	mov	result1, #1
2c164     EC 02 90 FD | 	jmp	#LR__4510
2c168                 | LR__4500
2c168     04 4E 05 F1 | 	add	fp, #4
2c16c     A7 1E 02 FB | 	rdlong	local01, fp
2c170     04 4E 85 F1 | 	sub	fp, #4
2c174     10 1E 06 F1 | 	add	local01, #16
2c178     0F 23 C2 FA | 	rdbyte	local03, local01
2c17c     80 22 CE F7 | 	test	local03, #128 wz
2c180     78 00 90 AD |  if_e	jmp	#LR__4501
2c184     04 4E 05 F1 | 	add	fp, #4
2c188     A7 2C 02 FB | 	rdlong	local08, fp
2c18c     1C 2C 06 F1 | 	add	local08, #28
2c190     16 2D 02 FB | 	rdlong	local08, local08
2c194     1C 4E 05 F1 | 	add	fp, #28
2c198     A7 2E 02 FB | 	rdlong	local09, fp
2c19c     17 2D 82 F1 | 	sub	local08, local09
2c1a0     0C 4E 05 F1 | 	add	fp, #12
2c1a4     A7 30 02 FB | 	rdlong	local10, fp
2c1a8     2C 4E 85 F1 | 	sub	fp, #44
2c1ac     18 33 02 F6 | 	mov	local11, local10
2c1b0     19 2D 12 F2 | 	cmp	local08, local11 wc
2c1b4     44 00 90 3D |  if_ae	jmp	#LR__4501
2c1b8     34 4E 05 F1 | 	add	fp, #52
2c1bc     A7 12 02 FB | 	rdlong	arg01, fp
2c1c0     30 4E 85 F1 | 	sub	fp, #48
2c1c4     A7 14 02 FB | 	rdlong	arg02, fp
2c1c8     0A 33 02 F6 | 	mov	local11, arg02
2c1cc     1C 32 06 F1 | 	add	local11, #28
2c1d0     19 2F 02 FB | 	rdlong	local09, local11
2c1d4     1C 4E 05 F1 | 	add	fp, #28
2c1d8     A7 26 02 FB | 	rdlong	local05, fp
2c1dc     13 2F 82 F1 | 	sub	local09, local05
2c1e0     09 2E 66 F0 | 	shl	local09, #9
2c1e4     17 33 02 F6 | 	mov	local11, local09
2c1e8     17 13 02 F1 | 	add	arg01, local09
2c1ec     20 4E 85 F1 | 	sub	fp, #32
2c1f0     28 14 06 F1 | 	add	arg02, #40
2c1f4     09 16 C6 F9 | 	decod	arg03, #9
2c1f8     4C 46 BF FD | 	call	#__system____builtin_memmove
2c1fc                 | LR__4501
2c1fc     2C 4E 05 F1 | 	add	fp, #44
2c200     A7 22 02 FB | 	rdlong	local03, fp
2c204     09 22 66 F0 | 	shl	local03, #9
2c208     04 4E 85 F1 | 	sub	fp, #4
2c20c     A7 22 62 FC | 	wrlong	local03, fp
2c210     28 4E 85 F1 | 	sub	fp, #40
2c214                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2c214                 | ' 				}
2c214                 | ' 
2c214                 | ' 
2c214                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2c214                 | ' 				continue;
2c214     B4 01 90 FD | 	jmp	#LR__4508
2c218                 | LR__4502
2c218     04 4E 05 F1 | 	add	fp, #4
2c21c     A7 22 02 FB | 	rdlong	local03, fp
2c220     1C 22 06 F1 | 	add	local03, #28
2c224     11 23 02 FB | 	rdlong	local03, local03
2c228     1C 4E 05 F1 | 	add	fp, #28
2c22c     A7 1E 02 FB | 	rdlong	local01, fp
2c230     20 4E 85 F1 | 	sub	fp, #32
2c234     0F 23 0A F2 | 	cmp	local03, local01 wz
2c238     EC 00 90 AD |  if_e	jmp	#LR__4506
2c23c     04 4E 05 F1 | 	add	fp, #4
2c240     A7 1E 02 FB | 	rdlong	local01, fp
2c244     04 4E 85 F1 | 	sub	fp, #4
2c248     10 1E 06 F1 | 	add	local01, #16
2c24c     0F 23 C2 FA | 	rdbyte	local03, local01
2c250     80 22 CE F7 | 	test	local03, #128 wz
2c254     7C 00 90 AD |  if_e	jmp	#LR__4504
2c258     18 4E 05 F1 | 	add	fp, #24
2c25c     A7 1E 02 FB | 	rdlong	local01, fp
2c260     01 1E 06 F1 | 	add	local01, #1
2c264     0F 13 C2 FA | 	rdbyte	arg01, local01
2c268     14 4E 85 F1 | 	sub	fp, #20
2c26c     A7 22 02 FB | 	rdlong	local03, fp
2c270     11 15 02 F6 | 	mov	arg02, local03
2c274     28 14 06 F1 | 	add	arg02, #40
2c278     04 4E 85 F1 | 	sub	fp, #4
2c27c     1C 22 06 F1 | 	add	local03, #28
2c280     11 17 02 FB | 	rdlong	arg03, local03
2c284     01 18 06 F6 | 	mov	arg04, #1
2c288     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
2c28c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c290     1C 00 90 AD |  if_e	jmp	#LR__4503
2c294     04 4E 05 F1 | 	add	fp, #4
2c298     A7 22 02 FB | 	rdlong	local03, fp
2c29c     04 4E 85 F1 | 	sub	fp, #4
2c2a0     11 22 06 F1 | 	add	local03, #17
2c2a4     11 03 48 FC | 	wrbyte	#1, local03
2c2a8     01 FA 05 F6 | 	mov	result1, #1
2c2ac     A4 01 90 FD | 	jmp	#LR__4510
2c2b0                 | LR__4503
2c2b0     04 4E 05 F1 | 	add	fp, #4
2c2b4     A7 32 02 FB | 	rdlong	local11, fp
2c2b8     19 23 02 F6 | 	mov	local03, local11
2c2bc     04 4E 85 F1 | 	sub	fp, #4
2c2c0     10 32 06 F1 | 	add	local11, #16
2c2c4     19 33 C2 FA | 	rdbyte	local11, local11
2c2c8     7F 32 06 F5 | 	and	local11, #127
2c2cc     10 22 06 F1 | 	add	local03, #16
2c2d0     11 33 42 FC | 	wrbyte	local11, local03
2c2d4                 | LR__4504
2c2d4     18 4E 05 F1 | 	add	fp, #24
2c2d8     A7 1E 02 FB | 	rdlong	local01, fp
2c2dc     01 1E 06 F1 | 	add	local01, #1
2c2e0     0F 13 C2 FA | 	rdbyte	arg01, local01
2c2e4     14 4E 85 F1 | 	sub	fp, #20
2c2e8     A7 14 02 FB | 	rdlong	arg02, fp
2c2ec     28 14 06 F1 | 	add	arg02, #40
2c2f0     1C 4E 05 F1 | 	add	fp, #28
2c2f4     A7 16 02 FB | 	rdlong	arg03, fp
2c2f8     20 4E 85 F1 | 	sub	fp, #32
2c2fc     01 18 06 F6 | 	mov	arg04, #1
2c300     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
2c304     00 FA 0D F2 | 	cmp	result1, #0 wz
2c308     1C 00 90 AD |  if_e	jmp	#LR__4505
2c30c     04 4E 05 F1 | 	add	fp, #4
2c310     A7 22 02 FB | 	rdlong	local03, fp
2c314     04 4E 85 F1 | 	sub	fp, #4
2c318     11 22 06 F1 | 	add	local03, #17
2c31c     11 03 48 FC | 	wrbyte	#1, local03
2c320     01 FA 05 F6 | 	mov	result1, #1
2c324     2C 01 90 FD | 	jmp	#LR__4510
2c328                 | LR__4505
2c328                 | LR__4506
2c328     04 4E 05 F1 | 	add	fp, #4
2c32c     A7 22 02 FB | 	rdlong	local03, fp
2c330     1C 4E 05 F1 | 	add	fp, #28
2c334     A7 32 02 FB | 	rdlong	local11, fp
2c338     20 4E 85 F1 | 	sub	fp, #32
2c33c     1C 22 06 F1 | 	add	local03, #28
2c340     11 33 62 FC | 	wrlong	local11, local03
2c344                 | LR__4507
2c344     04 4E 05 F1 | 	add	fp, #4
2c348     A7 1E 02 FB | 	rdlong	local01, fp
2c34c     14 1E 06 F1 | 	add	local01, #20
2c350     0F 33 02 FB | 	rdlong	local11, local01
2c354     FF 33 06 F5 | 	and	local11, #511
2c358     09 22 C6 F9 | 	decod	local03, #9
2c35c     19 23 82 F1 | 	sub	local03, local11
2c360     24 4E 05 F1 | 	add	fp, #36
2c364     A7 22 62 FC | 	wrlong	local03, fp
2c368     1C 4E 85 F1 | 	sub	fp, #28
2c36c     A7 32 02 FB | 	rdlong	local11, fp
2c370     0C 4E 85 F1 | 	sub	fp, #12
2c374     19 23 1A F2 | 	cmp	local03, local11 wcz
2c378     0C 4E 05 11 |  if_a	add	fp, #12
2c37c     A7 22 02 1B |  if_a	rdlong	local03, fp
2c380     1C 4E 05 11 |  if_a	add	fp, #28
2c384     A7 22 62 1C |  if_a	wrlong	local03, fp
2c388     28 4E 85 11 |  if_a	sub	fp, #40
2c38c     34 4E 05 F1 | 	add	fp, #52
2c390     A7 12 02 FB | 	rdlong	arg01, fp
2c394     30 4E 85 F1 | 	sub	fp, #48
2c398     A7 28 02 FB | 	rdlong	local06, fp
2c39c     14 15 02 F6 | 	mov	arg02, local06
2c3a0     28 14 06 F1 | 	add	arg02, #40
2c3a4     14 28 06 F1 | 	add	local06, #20
2c3a8     14 33 02 FB | 	rdlong	local11, local06
2c3ac     19 2F 02 F6 | 	mov	local09, local11
2c3b0     17 31 02 F6 | 	mov	local10, local09
2c3b4     FF 31 06 F5 | 	and	local10, #511
2c3b8     18 15 02 F1 | 	add	arg02, local10
2c3bc     24 4E 05 F1 | 	add	fp, #36
2c3c0     A7 16 02 FB | 	rdlong	arg03, fp
2c3c4     28 4E 85 F1 | 	sub	fp, #40
2c3c8     7C 44 BF FD | 	call	#__system____builtin_memmove
2c3cc                 | LR__4508
2c3cc     0C 4E 05 F1 | 	add	fp, #12
2c3d0     A7 22 02 FB | 	rdlong	local03, fp
2c3d4     1C 4E 05 F1 | 	add	fp, #28
2c3d8     A7 2C 02 FB | 	rdlong	local08, fp
2c3dc     16 23 82 F1 | 	sub	local03, local08
2c3e0     1C 4E 85 F1 | 	sub	fp, #28
2c3e4     A7 22 62 FC | 	wrlong	local03, fp
2c3e8     04 4E 05 F1 | 	add	fp, #4
2c3ec     A7 1E 02 FB | 	rdlong	local01, fp
2c3f0     0F 2B 02 FB | 	rdlong	local07, local01
2c3f4     18 4E 05 F1 | 	add	fp, #24
2c3f8     A7 2C 02 FB | 	rdlong	local08, fp
2c3fc     16 2B 02 F1 | 	add	local07, local08
2c400     0F 2B 62 FC | 	wrlong	local07, local01
2c404     0C 4E 05 F1 | 	add	fp, #12
2c408     A7 22 02 FB | 	rdlong	local03, fp
2c40c     0C 4E 85 F1 | 	sub	fp, #12
2c410     A7 34 02 FB | 	rdlong	local12, fp
2c414     1A 23 02 F1 | 	add	local03, local12
2c418     0C 4E 05 F1 | 	add	fp, #12
2c41c     A7 22 62 FC | 	wrlong	local03, fp
2c420     30 4E 85 F1 | 	sub	fp, #48
2c424     A7 36 02 FB | 	rdlong	local13, fp
2c428     1B 23 02 F6 | 	mov	local03, local13
2c42c     14 36 06 F1 | 	add	local13, #20
2c430     1B 39 02 FB | 	rdlong	local14, local13
2c434     24 4E 05 F1 | 	add	fp, #36
2c438     A7 28 02 FB | 	rdlong	local06, fp
2c43c     28 4E 85 F1 | 	sub	fp, #40
2c440     14 39 02 F1 | 	add	local14, local06
2c444     14 22 06 F1 | 	add	local03, #20
2c448     11 39 62 FC | 	wrlong	local14, local03
2c44c     84 FA 9F FD | 	jmp	#LR__4492
2c450                 | LR__4509
2c450                 | ' 
2c450                 | ' 
2c450                 | ' 
2c450                 | ' 
2c450                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2c450                 | ' 
2c450                 | ' 	}
2c450                 | ' 
2c450                 | ' 	return FR_OK ;
2c450     00 FA 05 F6 | 	mov	result1, #0
2c454                 | LR__4510
2c454     A7 F0 03 F6 | 	mov	ptra, fp
2c458     B2 00 A0 FD | 	call	#popregs_
2c45c                 | _fatfs_cc_f_read_ret
2c45c     2D 00 64 FD | 	ret
2c460                 | 
2c460                 | _fatfs_cc_f_write
2c460     15 4A 05 F6 | 	mov	COUNT_, #21
2c464     A8 00 A0 FD | 	call	#pushregs_
2c468     34 F0 07 F1 | 	add	ptra, #52
2c46c     04 4E 05 F1 | 	add	fp, #4
2c470     A7 12 62 FC | 	wrlong	arg01, fp
2c474     04 4E 05 F1 | 	add	fp, #4
2c478     A7 14 62 FC | 	wrlong	arg02, fp
2c47c     04 4E 05 F1 | 	add	fp, #4
2c480     A7 16 62 FC | 	wrlong	arg03, fp
2c484     04 4E 05 F1 | 	add	fp, #4
2c488     A7 18 62 FC | 	wrlong	arg04, fp
2c48c     08 4E 85 F1 | 	sub	fp, #8
2c490     A7 FA 01 FB | 	rdlong	result1, fp
2c494     28 4E 05 F1 | 	add	fp, #40
2c498     A7 FA 61 FC | 	wrlong	result1, fp
2c49c     20 4E 85 F1 | 	sub	fp, #32
2c4a0     A7 FA 01 FB | 	rdlong	result1, fp
2c4a4     FD 00 68 FC | 	wrlong	#0, result1
2c4a8     0C 4E 85 F1 | 	sub	fp, #12
2c4ac     A7 12 02 FB | 	rdlong	arg01, fp
2c4b0     14 4E 05 F1 | 	add	fp, #20
2c4b4     A7 14 02 F6 | 	mov	arg02, fp
2c4b8     18 4E 85 F1 | 	sub	fp, #24
2c4bc     88 F0 BF FD | 	call	#_fatfs_cc_validate
2c4c0     14 4E 05 F1 | 	add	fp, #20
2c4c4     A7 FA 61 FC | 	wrlong	result1, fp
2c4c8     00 FA 4D F2 | 	cmps	result1, #0 wz
2c4cc     14 4E 85 F1 | 	sub	fp, #20
2c4d0     20 00 90 5D |  if_ne	jmp	#LR__4520
2c4d4     04 4E 05 F1 | 	add	fp, #4
2c4d8     A7 14 02 FB | 	rdlong	arg02, fp
2c4dc     11 14 06 F1 | 	add	arg02, #17
2c4e0     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2c4e4     10 4E 05 F1 | 	add	fp, #16
2c4e8     A7 14 62 FC | 	wrlong	arg02, fp
2c4ec     14 4E 85 F1 | 	sub	fp, #20
2c4f0     10 00 90 AD |  if_e	jmp	#LR__4521
2c4f4                 | LR__4520
2c4f4     14 4E 05 F1 | 	add	fp, #20
2c4f8     A7 FA 01 FB | 	rdlong	result1, fp
2c4fc     14 4E 85 F1 | 	sub	fp, #20
2c500     44 07 90 FD | 	jmp	#LR__4543
2c504                 | LR__4521
2c504     04 4E 05 F1 | 	add	fp, #4
2c508     A7 14 02 FB | 	rdlong	arg02, fp
2c50c     04 4E 85 F1 | 	sub	fp, #4
2c510     10 14 06 F1 | 	add	arg02, #16
2c514     0A 15 C2 FA | 	rdbyte	arg02, arg02
2c518     02 14 CE F7 | 	test	arg02, #2 wz
2c51c     07 FA 05 A6 |  if_e	mov	result1, #7
2c520     24 07 90 AD |  if_e	jmp	#LR__4543
2c524     04 4E 05 F1 | 	add	fp, #4
2c528     A7 14 02 FB | 	rdlong	arg02, fp
2c52c     0A 13 02 F6 | 	mov	arg01, arg02
2c530     14 12 06 F1 | 	add	arg01, #20
2c534     09 13 02 FB | 	rdlong	arg01, arg01
2c538     08 4E 05 F1 | 	add	fp, #8
2c53c     A7 FA 01 FB | 	rdlong	result1, fp
2c540     FD 12 02 F1 | 	add	arg01, result1
2c544     0C 4E 85 F1 | 	sub	fp, #12
2c548     14 14 06 F1 | 	add	arg02, #20
2c54c     0A FB 01 FB | 	rdlong	result1, arg02
2c550     FD 12 12 F2 | 	cmp	arg01, result1 wc
2c554     24 00 90 3D |  if_ae	jmp	#LR__4522
2c558     04 4E 05 F1 | 	add	fp, #4
2c55c     A7 14 02 FB | 	rdlong	arg02, fp
2c560     01 FA 65 F6 | 	neg	result1, #1
2c564     14 14 06 F1 | 	add	arg02, #20
2c568     0A 15 02 FB | 	rdlong	arg02, arg02
2c56c     0A FB 81 F1 | 	sub	result1, arg02
2c570     08 4E 05 F1 | 	add	fp, #8
2c574     A7 FA 61 FC | 	wrlong	result1, fp
2c578     0C 4E 85 F1 | 	sub	fp, #12
2c57c                 | LR__4522
2c57c                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2c57c                 | ' 	}
2c57c                 | ' 
2c57c                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2c57c                 | LR__4523
2c57c     0C 4E 05 F1 | 	add	fp, #12
2c580     A7 FA 01 FB | 	rdlong	result1, fp
2c584     0C 4E 85 F1 | 	sub	fp, #12
2c588     01 FA 15 F2 | 	cmp	result1, #1 wc
2c58c     90 06 90 CD |  if_b	jmp	#LR__4542
2c590     04 4E 05 F1 | 	add	fp, #4
2c594     A7 FA 01 FB | 	rdlong	result1, fp
2c598     04 4E 85 F1 | 	sub	fp, #4
2c59c     14 FA 05 F1 | 	add	result1, #20
2c5a0     FD FA 01 FB | 	rdlong	result1, result1
2c5a4     FF FB CD F7 | 	test	result1, #511 wz
2c5a8     D8 04 90 5D |  if_ne	jmp	#LR__4538
2c5ac     04 4E 05 F1 | 	add	fp, #4
2c5b0     A7 FA 01 FB | 	rdlong	result1, fp
2c5b4     14 FA 05 F1 | 	add	result1, #20
2c5b8     FD FA 01 FB | 	rdlong	result1, result1
2c5bc     09 FA 45 F0 | 	shr	result1, #9
2c5c0     14 4E 05 F1 | 	add	fp, #20
2c5c4     A7 14 02 FB | 	rdlong	arg02, fp
2c5c8     0A 14 06 F1 | 	add	arg02, #10
2c5cc     0A 19 E2 FA | 	rdword	arg04, arg02
2c5d0     0C 15 32 F9 | 	getword	arg02, arg04, #0
2c5d4     01 14 86 F1 | 	sub	arg02, #1
2c5d8     0A FB 09 F5 | 	and	result1, arg02 wz
2c5dc     14 4E 05 F1 | 	add	fp, #20
2c5e0     A7 FA 61 FC | 	wrlong	result1, fp
2c5e4     2C 4E 85 F1 | 	sub	fp, #44
2c5e8     44 01 90 5D |  if_ne	jmp	#LR__4529
2c5ec     04 4E 05 F1 | 	add	fp, #4
2c5f0     A7 FA 01 FB | 	rdlong	result1, fp
2c5f4     04 4E 85 F1 | 	sub	fp, #4
2c5f8     14 FA 05 F1 | 	add	result1, #20
2c5fc     FD 14 0A FB | 	rdlong	arg02, result1 wz
2c600     44 00 90 5D |  if_ne	jmp	#LR__4524
2c604     04 4E 05 F1 | 	add	fp, #4
2c608     A7 14 02 FB | 	rdlong	arg02, fp
2c60c     08 14 06 F1 | 	add	arg02, #8
2c610     0A 15 0A FB | 	rdlong	arg02, arg02 wz
2c614     18 4E 05 F1 | 	add	fp, #24
2c618     A7 14 62 FC | 	wrlong	arg02, fp
2c61c     1C 4E 85 F1 | 	sub	fp, #28
2c620     4C 00 90 5D |  if_ne	jmp	#LR__4525
2c624     04 4E 05 F1 | 	add	fp, #4
2c628     A7 12 02 FB | 	rdlong	arg01, fp
2c62c     04 4E 85 F1 | 	sub	fp, #4
2c630     00 14 06 F6 | 	mov	arg02, #0
2c634     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
2c638     1C 4E 05 F1 | 	add	fp, #28
2c63c     A7 FA 61 FC | 	wrlong	result1, fp
2c640     1C 4E 85 F1 | 	sub	fp, #28
2c644     28 00 90 FD | 	jmp	#LR__4525
2c648                 | LR__4524
2c648     04 4E 05 F1 | 	add	fp, #4
2c64c     A7 18 02 FB | 	rdlong	arg04, fp
2c650     0C 13 02 F6 | 	mov	arg01, arg04
2c654     04 4E 85 F1 | 	sub	fp, #4
2c658     18 18 06 F1 | 	add	arg04, #24
2c65c     0C 15 02 FB | 	rdlong	arg02, arg04
2c660     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2c664     1C 4E 05 F1 | 	add	fp, #28
2c668     A7 FA 61 FC | 	wrlong	result1, fp
2c66c     1C 4E 85 F1 | 	sub	fp, #28
2c670                 | LR__4525
2c670     1C 4E 05 F1 | 	add	fp, #28
2c674     A7 FA 09 FB | 	rdlong	result1, fp wz
2c678     1C 4E 85 F1 | 	sub	fp, #28
2c67c     A0 05 90 AD |  if_e	jmp	#LR__4542
2c680     1C 4E 05 F1 | 	add	fp, #28
2c684     A7 FA 01 FB | 	rdlong	result1, fp
2c688     1C 4E 85 F1 | 	sub	fp, #28
2c68c     01 FA 0D F2 | 	cmp	result1, #1 wz
2c690     1C 00 90 5D |  if_ne	jmp	#LR__4526
2c694     04 4E 05 F1 | 	add	fp, #4
2c698     A7 FA 01 FB | 	rdlong	result1, fp
2c69c     04 4E 85 F1 | 	sub	fp, #4
2c6a0     11 FA 05 F1 | 	add	result1, #17
2c6a4     FD 04 48 FC | 	wrbyte	#2, result1
2c6a8     02 FA 05 F6 | 	mov	result1, #2
2c6ac     98 05 90 FD | 	jmp	#LR__4543
2c6b0                 | LR__4526
2c6b0     1C 4E 05 F1 | 	add	fp, #28
2c6b4     A7 FA 01 FB | 	rdlong	result1, fp
2c6b8     1C 4E 85 F1 | 	sub	fp, #28
2c6bc     FF FF 7F FF 
2c6c0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2c6c4     1C 00 90 5D |  if_ne	jmp	#LR__4527
2c6c8     04 4E 05 F1 | 	add	fp, #4
2c6cc     A7 FA 01 FB | 	rdlong	result1, fp
2c6d0     04 4E 85 F1 | 	sub	fp, #4
2c6d4     11 FA 05 F1 | 	add	result1, #17
2c6d8     FD 02 48 FC | 	wrbyte	#1, result1
2c6dc     01 FA 05 F6 | 	mov	result1, #1
2c6e0     64 05 90 FD | 	jmp	#LR__4543
2c6e4                 | LR__4527
2c6e4     04 4E 05 F1 | 	add	fp, #4
2c6e8     A7 FA 01 FB | 	rdlong	result1, fp
2c6ec     18 4E 05 F1 | 	add	fp, #24
2c6f0     A7 18 02 FB | 	rdlong	arg04, fp
2c6f4     18 FA 05 F1 | 	add	result1, #24
2c6f8     FD 18 62 FC | 	wrlong	arg04, result1
2c6fc     18 4E 85 F1 | 	sub	fp, #24
2c700     A7 FA 01 FB | 	rdlong	result1, fp
2c704     04 4E 85 F1 | 	sub	fp, #4
2c708     08 FA 05 F1 | 	add	result1, #8
2c70c     FD FA 09 FB | 	rdlong	result1, result1 wz
2c710     1C 00 90 5D |  if_ne	jmp	#LR__4528
2c714     04 4E 05 F1 | 	add	fp, #4
2c718     A7 18 02 FB | 	rdlong	arg04, fp
2c71c     18 4E 05 F1 | 	add	fp, #24
2c720     A7 FA 01 FB | 	rdlong	result1, fp
2c724     1C 4E 85 F1 | 	sub	fp, #28
2c728     08 18 06 F1 | 	add	arg04, #8
2c72c     0C FB 61 FC | 	wrlong	result1, arg04
2c730                 | LR__4528
2c730                 | LR__4529
2c730     04 4E 05 F1 | 	add	fp, #4
2c734     A7 18 02 FB | 	rdlong	arg04, fp
2c738     04 4E 85 F1 | 	sub	fp, #4
2c73c     10 18 06 F1 | 	add	arg04, #16
2c740     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c744     80 18 CE F7 | 	test	arg04, #128 wz
2c748     7C 00 90 AD |  if_e	jmp	#LR__4531
2c74c     18 4E 05 F1 | 	add	fp, #24
2c750     A7 18 02 FB | 	rdlong	arg04, fp
2c754     01 18 06 F1 | 	add	arg04, #1
2c758     0C 13 C2 FA | 	rdbyte	arg01, arg04
2c75c     14 4E 85 F1 | 	sub	fp, #20
2c760     A7 18 02 FB | 	rdlong	arg04, fp
2c764     0C 15 02 F6 | 	mov	arg02, arg04
2c768     28 14 06 F1 | 	add	arg02, #40
2c76c     04 4E 85 F1 | 	sub	fp, #4
2c770     1C 18 06 F1 | 	add	arg04, #28
2c774     0C 17 02 FB | 	rdlong	arg03, arg04
2c778     01 18 06 F6 | 	mov	arg04, #1
2c77c     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2c780     00 FA 0D F2 | 	cmp	result1, #0 wz
2c784     1C 00 90 AD |  if_e	jmp	#LR__4530
2c788     04 4E 05 F1 | 	add	fp, #4
2c78c     A7 FA 01 FB | 	rdlong	result1, fp
2c790     04 4E 85 F1 | 	sub	fp, #4
2c794     11 FA 05 F1 | 	add	result1, #17
2c798     FD 02 48 FC | 	wrbyte	#1, result1
2c79c     01 FA 05 F6 | 	mov	result1, #1
2c7a0     A4 04 90 FD | 	jmp	#LR__4543
2c7a4                 | LR__4530
2c7a4     04 4E 05 F1 | 	add	fp, #4
2c7a8     A7 18 02 FB | 	rdlong	arg04, fp
2c7ac     0C FB 01 F6 | 	mov	result1, arg04
2c7b0     04 4E 85 F1 | 	sub	fp, #4
2c7b4     10 18 06 F1 | 	add	arg04, #16
2c7b8     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c7bc     7F 18 06 F5 | 	and	arg04, #127
2c7c0     10 FA 05 F1 | 	add	result1, #16
2c7c4     FD 18 42 FC | 	wrbyte	arg04, result1
2c7c8                 | LR__4531
2c7c8     18 4E 05 F1 | 	add	fp, #24
2c7cc     A7 12 02 FB | 	rdlong	arg01, fp
2c7d0     14 4E 85 F1 | 	sub	fp, #20
2c7d4     A7 14 02 FB | 	rdlong	arg02, fp
2c7d8     04 4E 85 F1 | 	sub	fp, #4
2c7dc     18 14 06 F1 | 	add	arg02, #24
2c7e0     0A 15 02 FB | 	rdlong	arg02, arg02
2c7e4     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
2c7e8     20 4E 05 F1 | 	add	fp, #32
2c7ec     A7 FA 61 FC | 	wrlong	result1, fp
2c7f0     20 4E 85 F1 | 	sub	fp, #32
2c7f4     00 FA 0D F2 | 	cmp	result1, #0 wz
2c7f8     1C 00 90 5D |  if_ne	jmp	#LR__4532
2c7fc     04 4E 05 F1 | 	add	fp, #4
2c800     A7 FA 01 FB | 	rdlong	result1, fp
2c804     04 4E 85 F1 | 	sub	fp, #4
2c808     11 FA 05 F1 | 	add	result1, #17
2c80c     FD 04 48 FC | 	wrbyte	#2, result1
2c810     02 FA 05 F6 | 	mov	result1, #2
2c814     30 04 90 FD | 	jmp	#LR__4543
2c818                 | LR__4532
2c818     20 4E 05 F1 | 	add	fp, #32
2c81c     A7 FA 01 FB | 	rdlong	result1, fp
2c820     0C 4E 05 F1 | 	add	fp, #12
2c824     A7 1E 02 FB | 	rdlong	local01, fp
2c828     0F FB 01 F1 | 	add	result1, local01
2c82c     0C 4E 85 F1 | 	sub	fp, #12
2c830     A7 FA 61 FC | 	wrlong	result1, fp
2c834     14 4E 85 F1 | 	sub	fp, #20
2c838     A7 FA 01 FB | 	rdlong	result1, fp
2c83c     09 FA 45 F0 | 	shr	result1, #9
2c840     1C 4E 05 F1 | 	add	fp, #28
2c844     A7 FA 61 FC | 	wrlong	result1, fp
2c848     28 4E 85 F1 | 	sub	fp, #40
2c84c     01 FA 15 F2 | 	cmp	result1, #1 wc
2c850     60 01 90 CD |  if_b	jmp	#LR__4536
2c854     2C 4E 05 F1 | 	add	fp, #44
2c858     A7 FA 01 FB | 	rdlong	result1, fp
2c85c     04 4E 85 F1 | 	sub	fp, #4
2c860     A7 18 02 FB | 	rdlong	arg04, fp
2c864     0C FB 01 F1 | 	add	result1, arg04
2c868     10 4E 85 F1 | 	sub	fp, #16
2c86c     A7 18 02 FB | 	rdlong	arg04, fp
2c870     18 4E 85 F1 | 	sub	fp, #24
2c874     0A 18 06 F1 | 	add	arg04, #10
2c878     0C 19 E2 FA | 	rdword	arg04, arg04
2c87c     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2c880     28 00 90 ED |  if_be	jmp	#LR__4533
2c884     18 4E 05 F1 | 	add	fp, #24
2c888     A7 FA 01 FB | 	rdlong	result1, fp
2c88c     0A FA 05 F1 | 	add	result1, #10
2c890     FD FA E1 FA | 	rdword	result1, result1
2c894     14 4E 05 F1 | 	add	fp, #20
2c898     A7 18 02 FB | 	rdlong	arg04, fp
2c89c     0C FB 81 F1 | 	sub	result1, arg04
2c8a0     04 4E 85 F1 | 	sub	fp, #4
2c8a4     A7 FA 61 FC | 	wrlong	result1, fp
2c8a8     28 4E 85 F1 | 	sub	fp, #40
2c8ac                 | LR__4533
2c8ac     18 4E 05 F1 | 	add	fp, #24
2c8b0     A7 18 02 FB | 	rdlong	arg04, fp
2c8b4     01 18 06 F1 | 	add	arg04, #1
2c8b8     0C 13 C2 FA | 	rdbyte	arg01, arg04
2c8bc     18 4E 05 F1 | 	add	fp, #24
2c8c0     A7 14 02 FB | 	rdlong	arg02, fp
2c8c4     10 4E 85 F1 | 	sub	fp, #16
2c8c8     A7 16 02 FB | 	rdlong	arg03, fp
2c8cc     08 4E 05 F1 | 	add	fp, #8
2c8d0     A7 18 02 FB | 	rdlong	arg04, fp
2c8d4     28 4E 85 F1 | 	sub	fp, #40
2c8d8     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
2c8dc     00 FA 0D F2 | 	cmp	result1, #0 wz
2c8e0     1C 00 90 AD |  if_e	jmp	#LR__4534
2c8e4     04 4E 05 F1 | 	add	fp, #4
2c8e8     A7 1E 02 FB | 	rdlong	local01, fp
2c8ec     04 4E 85 F1 | 	sub	fp, #4
2c8f0     11 1E 06 F1 | 	add	local01, #17
2c8f4     0F 03 48 FC | 	wrbyte	#1, local01
2c8f8     01 FA 05 F6 | 	mov	result1, #1
2c8fc     48 03 90 FD | 	jmp	#LR__4543
2c900                 | LR__4534
2c900     04 4E 05 F1 | 	add	fp, #4
2c904     A7 FA 01 FB | 	rdlong	result1, fp
2c908     1C FA 05 F1 | 	add	result1, #28
2c90c     FD FA 01 FB | 	rdlong	result1, result1
2c910     1C 4E 05 F1 | 	add	fp, #28
2c914     A7 20 02 FB | 	rdlong	local02, fp
2c918     10 FB 81 F1 | 	sub	result1, local02
2c91c     08 4E 05 F1 | 	add	fp, #8
2c920     A7 18 02 FB | 	rdlong	arg04, fp
2c924     28 4E 85 F1 | 	sub	fp, #40
2c928     0C FB 11 F2 | 	cmp	result1, arg04 wc
2c92c     68 00 90 3D |  if_ae	jmp	#LR__4535
2c930     04 4E 05 F1 | 	add	fp, #4
2c934     A7 12 02 FB | 	rdlong	arg01, fp
2c938     28 12 06 F1 | 	add	arg01, #40
2c93c     2C 4E 05 F1 | 	add	fp, #44
2c940     A7 14 02 FB | 	rdlong	arg02, fp
2c944     2C 4E 85 F1 | 	sub	fp, #44
2c948     A7 FA 01 FB | 	rdlong	result1, fp
2c94c     1C FA 05 F1 | 	add	result1, #28
2c950     FD 22 02 FB | 	rdlong	local03, result1
2c954     1C 4E 05 F1 | 	add	fp, #28
2c958     A7 18 02 FB | 	rdlong	arg04, fp
2c95c     20 4E 85 F1 | 	sub	fp, #32
2c960     0C 23 82 F1 | 	sub	local03, arg04
2c964     09 22 66 F0 | 	shl	local03, #9
2c968     11 15 02 F1 | 	add	arg02, local03
2c96c     09 16 C6 F9 | 	decod	arg03, #9
2c970     D4 3E BF FD | 	call	#__system____builtin_memmove
2c974     04 4E 05 F1 | 	add	fp, #4
2c978     A7 18 02 FB | 	rdlong	arg04, fp
2c97c     0C FB 01 F6 | 	mov	result1, arg04
2c980     04 4E 85 F1 | 	sub	fp, #4
2c984     10 18 06 F1 | 	add	arg04, #16
2c988     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c98c     7F 18 06 F5 | 	and	arg04, #127
2c990     10 FA 05 F1 | 	add	result1, #16
2c994     FD 18 42 FC | 	wrbyte	arg04, result1
2c998                 | LR__4535
2c998     28 4E 05 F1 | 	add	fp, #40
2c99c     A7 FA 01 FB | 	rdlong	result1, fp
2c9a0     09 FA 65 F0 | 	shl	result1, #9
2c9a4     04 4E 85 F1 | 	sub	fp, #4
2c9a8     A7 FA 61 FC | 	wrlong	result1, fp
2c9ac     24 4E 85 F1 | 	sub	fp, #36
2c9b0                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2c9b0                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2c9b0                 | ' 				}
2c9b0                 | ' 
2c9b0                 | ' 
2c9b0                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2c9b0                 | ' 				continue;
2c9b0     74 01 90 FD | 	jmp	#LR__4539
2c9b4                 | LR__4536
2c9b4     04 4E 05 F1 | 	add	fp, #4
2c9b8     A7 20 02 FB | 	rdlong	local02, fp
2c9bc     1C 20 06 F1 | 	add	local02, #28
2c9c0     10 FB 01 FB | 	rdlong	result1, local02
2c9c4     1C 4E 05 F1 | 	add	fp, #28
2c9c8     A7 20 02 FB | 	rdlong	local02, fp
2c9cc     20 4E 85 F1 | 	sub	fp, #32
2c9d0     10 FB 09 F2 | 	cmp	result1, local02 wz
2c9d4     90 00 90 AD |  if_e	jmp	#LR__4537
2c9d8     04 4E 05 F1 | 	add	fp, #4
2c9dc     A7 FA 01 FB | 	rdlong	result1, fp
2c9e0     FD 22 02 F6 | 	mov	local03, result1
2c9e4     04 4E 85 F1 | 	sub	fp, #4
2c9e8     14 22 06 F1 | 	add	local03, #20
2c9ec     11 23 02 FB | 	rdlong	local03, local03
2c9f0     0C FA 05 F1 | 	add	result1, #12
2c9f4     FD 24 02 FB | 	rdlong	local04, result1
2c9f8     12 27 02 F6 | 	mov	local05, local04
2c9fc     13 23 12 F2 | 	cmp	local03, local05 wc
2ca00     64 00 90 3D |  if_ae	jmp	#LR__4537
2ca04     18 4E 05 F1 | 	add	fp, #24
2ca08     A7 18 02 FB | 	rdlong	arg04, fp
2ca0c     01 18 06 F1 | 	add	arg04, #1
2ca10     0C 13 C2 FA | 	rdbyte	arg01, arg04
2ca14     14 4E 85 F1 | 	sub	fp, #20
2ca18     A7 28 02 FB | 	rdlong	local06, fp
2ca1c     28 28 06 F1 | 	add	local06, #40
2ca20     14 2B 02 F6 | 	mov	local07, local06
2ca24     1C 4E 05 F1 | 	add	fp, #28
2ca28     A7 2C 02 FB | 	rdlong	local08, fp
2ca2c     20 4E 85 F1 | 	sub	fp, #32
2ca30     01 2E 06 F6 | 	mov	local09, #1
2ca34     15 15 02 F6 | 	mov	arg02, local07
2ca38     16 17 02 F6 | 	mov	arg03, local08
2ca3c     01 18 06 F6 | 	mov	arg04, #1
2ca40     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
2ca44     FD 30 0A F6 | 	mov	local10, result1 wz
2ca48     1C 00 90 AD |  if_e	jmp	#LR__4537
2ca4c     04 4E 05 F1 | 	add	fp, #4
2ca50     A7 30 02 FB | 	rdlong	local10, fp
2ca54     04 4E 85 F1 | 	sub	fp, #4
2ca58     11 30 06 F1 | 	add	local10, #17
2ca5c     18 03 48 FC | 	wrbyte	#1, local10
2ca60                 | ' 				fp->fptr < fp->obj.objsize &&
2ca60                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2ca60                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2ca60     01 FA 05 F6 | 	mov	result1, #1
2ca64     E0 01 90 FD | 	jmp	#LR__4543
2ca68                 | LR__4537
2ca68     04 4E 05 F1 | 	add	fp, #4
2ca6c     A7 18 02 FB | 	rdlong	arg04, fp
2ca70     1C 4E 05 F1 | 	add	fp, #28
2ca74     A7 FA 01 FB | 	rdlong	result1, fp
2ca78     20 4E 85 F1 | 	sub	fp, #32
2ca7c     1C 18 06 F1 | 	add	arg04, #28
2ca80     0C FB 61 FC | 	wrlong	result1, arg04
2ca84                 | LR__4538
2ca84     04 4E 05 F1 | 	add	fp, #4
2ca88     A7 FA 01 FB | 	rdlong	result1, fp
2ca8c     14 FA 05 F1 | 	add	result1, #20
2ca90     FD FA 01 FB | 	rdlong	result1, result1
2ca94     FF FB 05 F5 | 	and	result1, #511
2ca98     09 32 C6 F9 | 	decod	local11, #9
2ca9c     FD 32 82 F1 | 	sub	local11, result1
2caa0     20 4E 05 F1 | 	add	fp, #32
2caa4     A7 32 62 FC | 	wrlong	local11, fp
2caa8     18 4E 85 F1 | 	sub	fp, #24
2caac     A7 FA 01 FB | 	rdlong	result1, fp
2cab0     0C 4E 85 F1 | 	sub	fp, #12
2cab4     FD 32 1A F2 | 	cmp	local11, result1 wcz
2cab8     0C 4E 05 11 |  if_a	add	fp, #12
2cabc     A7 32 02 1B |  if_a	rdlong	local11, fp
2cac0     18 4E 05 11 |  if_a	add	fp, #24
2cac4     A7 32 62 1C |  if_a	wrlong	local11, fp
2cac8     24 4E 85 11 |  if_a	sub	fp, #36
2cacc     04 4E 05 F1 | 	add	fp, #4
2cad0     A7 32 02 FB | 	rdlong	local11, fp
2cad4     19 13 02 F6 | 	mov	arg01, local11
2cad8     28 12 06 F1 | 	add	arg01, #40
2cadc     14 32 06 F1 | 	add	local11, #20
2cae0     19 33 02 FB | 	rdlong	local11, local11
2cae4     FF 33 06 F5 | 	and	local11, #511
2cae8     19 13 02 F1 | 	add	arg01, local11
2caec     2C 4E 05 F1 | 	add	fp, #44
2caf0     A7 14 02 FB | 	rdlong	arg02, fp
2caf4     0C 4E 85 F1 | 	sub	fp, #12
2caf8     A7 16 02 FB | 	rdlong	arg03, fp
2cafc     24 4E 85 F1 | 	sub	fp, #36
2cb00     44 3D BF FD | 	call	#__system____builtin_memmove
2cb04     04 4E 05 F1 | 	add	fp, #4
2cb08     A7 FA 01 FB | 	rdlong	result1, fp
2cb0c     FD 32 02 F6 | 	mov	local11, result1
2cb10     04 4E 85 F1 | 	sub	fp, #4
2cb14     10 FA 05 F1 | 	add	result1, #16
2cb18     FD FA C1 FA | 	rdbyte	result1, result1
2cb1c     80 FA 45 F5 | 	or	result1, #128
2cb20     10 32 06 F1 | 	add	local11, #16
2cb24     19 FB 41 FC | 	wrbyte	result1, local11
2cb28                 | LR__4539
2cb28     0C 4E 05 F1 | 	add	fp, #12
2cb2c     A7 32 02 FB | 	rdlong	local11, fp
2cb30     18 4E 05 F1 | 	add	fp, #24
2cb34     A7 FA 01 FB | 	rdlong	result1, fp
2cb38     FD 32 82 F1 | 	sub	local11, result1
2cb3c     18 4E 85 F1 | 	sub	fp, #24
2cb40     A7 32 62 FC | 	wrlong	local11, fp
2cb44     04 4E 05 F1 | 	add	fp, #4
2cb48     A7 34 02 FB | 	rdlong	local12, fp
2cb4c     1A 33 02 FB | 	rdlong	local11, local12
2cb50     14 4E 05 F1 | 	add	fp, #20
2cb54     A7 36 02 FB | 	rdlong	local13, fp
2cb58     1B 33 02 F1 | 	add	local11, local13
2cb5c     1A 33 62 FC | 	wrlong	local11, local12
2cb60     0C 4E 05 F1 | 	add	fp, #12
2cb64     A7 32 02 FB | 	rdlong	local11, fp
2cb68     0C 4E 85 F1 | 	sub	fp, #12
2cb6c     A7 38 02 FB | 	rdlong	local14, fp
2cb70     1C 33 02 F1 | 	add	local11, local14
2cb74     0C 4E 05 F1 | 	add	fp, #12
2cb78     A7 32 62 FC | 	wrlong	local11, fp
2cb7c     2C 4E 85 F1 | 	sub	fp, #44
2cb80     A7 3A 02 FB | 	rdlong	local15, fp
2cb84     1D 33 02 F6 | 	mov	local11, local15
2cb88     14 3A 06 F1 | 	add	local15, #20
2cb8c     1D 3B 02 FB | 	rdlong	local15, local15
2cb90     20 4E 05 F1 | 	add	fp, #32
2cb94     A7 3C 02 FB | 	rdlong	local16, fp
2cb98     1E 3B 02 F1 | 	add	local15, local16
2cb9c     14 32 06 F1 | 	add	local11, #20
2cba0     19 3B 62 FC | 	wrlong	local15, local11
2cba4     20 4E 85 F1 | 	sub	fp, #32
2cba8     A7 3E 02 FB | 	rdlong	local17, fp
2cbac     1F 33 02 F6 | 	mov	local11, local17
2cbb0     1F 41 02 F6 | 	mov	local18, local17
2cbb4     04 4E 85 F1 | 	sub	fp, #4
2cbb8     14 3E 06 F1 | 	add	local17, #20
2cbbc     1F 43 02 FB | 	rdlong	local19, local17
2cbc0     0C 40 06 F1 | 	add	local18, #12
2cbc4     20 45 02 FB | 	rdlong	local20, local18
2cbc8     22 43 1A F2 | 	cmp	local19, local20 wcz
2cbcc     24 00 90 ED |  if_be	jmp	#LR__4540
2cbd0     04 4E 05 F1 | 	add	fp, #4
2cbd4     A7 26 02 FB | 	rdlong	local05, fp
2cbd8     04 4E 85 F1 | 	sub	fp, #4
2cbdc     13 23 02 F6 | 	mov	local03, local05
2cbe0     14 22 06 F1 | 	add	local03, #20
2cbe4     11 25 02 FB | 	rdlong	local04, local03
2cbe8     14 22 86 F1 | 	sub	local03, #20
2cbec     12 47 02 F6 | 	mov	local21, local04
2cbf0     20 00 90 FD | 	jmp	#LR__4541
2cbf4                 | LR__4540
2cbf4     04 4E 05 F1 | 	add	fp, #4
2cbf8     A7 2A 02 FB | 	rdlong	local07, fp
2cbfc     04 4E 85 F1 | 	sub	fp, #4
2cc00     15 31 02 F6 | 	mov	local10, local07
2cc04     0C 30 06 F1 | 	add	local10, #12
2cc08     18 2D 02 FB | 	rdlong	local08, local10
2cc0c     0C 30 86 F1 | 	sub	local10, #12
2cc10     16 47 02 F6 | 	mov	local21, local08
2cc14                 | LR__4541
2cc14     0C 32 06 F1 | 	add	local11, #12
2cc18     19 47 62 FC | 	wrlong	local21, local11
2cc1c     5C F9 9F FD | 	jmp	#LR__4523
2cc20                 | LR__4542
2cc20     04 4E 05 F1 | 	add	fp, #4
2cc24     A7 34 02 FB | 	rdlong	local12, fp
2cc28     1A 1F 02 F6 | 	mov	local01, local12
2cc2c     04 4E 85 F1 | 	sub	fp, #4
2cc30     10 34 06 F1 | 	add	local12, #16
2cc34     1A 33 C2 FA | 	rdbyte	local11, local12
2cc38     40 32 46 F5 | 	or	local11, #64
2cc3c     10 1E 06 F1 | 	add	local01, #16
2cc40     0F 33 42 FC | 	wrbyte	local11, local01
2cc44                 | ' 
2cc44                 | ' 
2cc44                 | ' 
2cc44                 | ' 
2cc44                 | ' 
2cc44                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
2cc44                 | ' 		fp->flag |=  0x80 ;
2cc44                 | ' 
2cc44                 | ' 	}
2cc44                 | ' 
2cc44                 | ' 	fp->flag |=  0x40 ;
2cc44                 | ' 
2cc44                 | ' 	return FR_OK ;
2cc44     00 FA 05 F6 | 	mov	result1, #0
2cc48                 | LR__4543
2cc48     A7 F0 03 F6 | 	mov	ptra, fp
2cc4c     B2 00 A0 FD | 	call	#popregs_
2cc50                 | _fatfs_cc_f_write_ret
2cc50     2D 00 64 FD | 	ret
2cc54                 | 
2cc54                 | _fatfs_cc_f_sync
2cc54     00 4A 05 F6 | 	mov	COUNT_, #0
2cc58     A8 00 A0 FD | 	call	#pushregs_
2cc5c     18 F0 07 F1 | 	add	ptra, #24
2cc60     04 4E 05 F1 | 	add	fp, #4
2cc64     A7 12 62 FC | 	wrlong	arg01, fp
2cc68     08 4E 05 F1 | 	add	fp, #8
2cc6c     A7 14 02 F6 | 	mov	arg02, fp
2cc70     0C 4E 85 F1 | 	sub	fp, #12
2cc74     D0 E8 BF FD | 	call	#_fatfs_cc_validate
2cc78     08 4E 05 F1 | 	add	fp, #8
2cc7c     A7 FA 61 FC | 	wrlong	result1, fp
2cc80     08 4E 85 F1 | 	sub	fp, #8
2cc84     00 FA 0D F2 | 	cmp	result1, #0 wz
2cc88     C0 01 90 5D |  if_ne	jmp	#LR__4553
2cc8c     04 4E 05 F1 | 	add	fp, #4
2cc90     A7 18 02 FB | 	rdlong	arg04, fp
2cc94     04 4E 85 F1 | 	sub	fp, #4
2cc98     10 18 06 F1 | 	add	arg04, #16
2cc9c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cca0     40 18 CE F7 | 	test	arg04, #64 wz
2cca4     A4 01 90 AD |  if_e	jmp	#LR__4552
2cca8     04 4E 05 F1 | 	add	fp, #4
2ccac     A7 18 02 FB | 	rdlong	arg04, fp
2ccb0     04 4E 85 F1 | 	sub	fp, #4
2ccb4     10 18 06 F1 | 	add	arg04, #16
2ccb8     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ccbc     80 18 CE F7 | 	test	arg04, #128 wz
2ccc0     64 00 90 AD |  if_e	jmp	#LR__4550
2ccc4     0C 4E 05 F1 | 	add	fp, #12
2ccc8     A7 18 02 FB | 	rdlong	arg04, fp
2cccc     01 18 06 F1 | 	add	arg04, #1
2ccd0     0C 13 C2 FA | 	rdbyte	arg01, arg04
2ccd4     08 4E 85 F1 | 	sub	fp, #8
2ccd8     A7 18 02 FB | 	rdlong	arg04, fp
2ccdc     0C 15 02 F6 | 	mov	arg02, arg04
2cce0     28 14 06 F1 | 	add	arg02, #40
2cce4     04 4E 85 F1 | 	sub	fp, #4
2cce8     1C 18 06 F1 | 	add	arg04, #28
2ccec     0C 17 02 FB | 	rdlong	arg03, arg04
2ccf0     01 18 06 F6 | 	mov	arg04, #1
2ccf4     0C AE BF FD | 	call	#_fatfs_cc_disk_write
2ccf8     00 FA 0D F2 | 	cmp	result1, #0 wz
2ccfc     01 FA 05 56 |  if_ne	mov	result1, #1
2cd00     54 01 90 5D |  if_ne	jmp	#LR__4554
2cd04     04 4E 05 F1 | 	add	fp, #4
2cd08     A7 18 02 FB | 	rdlong	arg04, fp
2cd0c     0C 17 02 F6 | 	mov	arg03, arg04
2cd10     04 4E 85 F1 | 	sub	fp, #4
2cd14     10 18 06 F1 | 	add	arg04, #16
2cd18     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cd1c     7F 18 06 F5 | 	and	arg04, #127
2cd20     10 16 06 F1 | 	add	arg03, #16
2cd24     0B 19 42 FC | 	wrbyte	arg04, arg03
2cd28                 | LR__4550
2cd28     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2cd2c     10 4E 05 F1 | 	add	fp, #16
2cd30     A7 FA 61 FC | 	wrlong	result1, fp
2cd34     04 4E 85 F1 | 	sub	fp, #4
2cd38     A7 12 02 FB | 	rdlong	arg01, fp
2cd3c     08 4E 85 F1 | 	sub	fp, #8
2cd40     A7 18 02 FB | 	rdlong	arg04, fp
2cd44     04 4E 85 F1 | 	sub	fp, #4
2cd48     20 18 06 F1 | 	add	arg04, #32
2cd4c     0C 15 02 FB | 	rdlong	arg02, arg04
2cd50     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
2cd54     08 4E 05 F1 | 	add	fp, #8
2cd58     A7 FA 61 FC | 	wrlong	result1, fp
2cd5c     08 4E 85 F1 | 	sub	fp, #8
2cd60     00 FA 0D F2 | 	cmp	result1, #0 wz
2cd64     E4 00 90 5D |  if_ne	jmp	#LR__4551
2cd68     04 4E 05 F1 | 	add	fp, #4
2cd6c     A7 18 02 FB | 	rdlong	arg04, fp
2cd70     24 18 06 F1 | 	add	arg04, #36
2cd74     0C 19 02 FB | 	rdlong	arg04, arg04
2cd78     10 4E 05 F1 | 	add	fp, #16
2cd7c     A7 18 62 FC | 	wrlong	arg04, fp
2cd80     0C 17 02 F6 | 	mov	arg03, arg04
2cd84     0B 16 06 F1 | 	add	arg03, #11
2cd88     0B 17 C2 FA | 	rdbyte	arg03, arg03
2cd8c     20 16 46 F5 | 	or	arg03, #32
2cd90     0B 18 06 F1 | 	add	arg04, #11
2cd94     0C 17 42 FC | 	wrbyte	arg03, arg04
2cd98     10 4E 85 F1 | 	sub	fp, #16
2cd9c     A7 18 02 FB | 	rdlong	arg04, fp
2cda0     0C 13 02 FB | 	rdlong	arg01, arg04
2cda4     10 4E 05 F1 | 	add	fp, #16
2cda8     A7 14 02 FB | 	rdlong	arg02, fp
2cdac     14 4E 85 F1 | 	sub	fp, #20
2cdb0     08 18 06 F1 | 	add	arg04, #8
2cdb4     0C 17 02 FB | 	rdlong	arg03, arg04
2cdb8     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
2cdbc     14 4E 05 F1 | 	add	fp, #20
2cdc0     A7 12 02 FB | 	rdlong	arg01, fp
2cdc4     1C 12 06 F1 | 	add	arg01, #28
2cdc8     10 4E 85 F1 | 	sub	fp, #16
2cdcc     A7 18 02 FB | 	rdlong	arg04, fp
2cdd0     0C 18 06 F1 | 	add	arg04, #12
2cdd4     0C 15 02 FB | 	rdlong	arg02, arg04
2cdd8     09 15 62 FC | 	wrlong	arg02, arg01
2cddc     10 4E 05 F1 | 	add	fp, #16
2cde0     A7 12 02 FB | 	rdlong	arg01, fp
2cde4     16 12 06 F1 | 	add	arg01, #22
2cde8     04 4E 85 F1 | 	sub	fp, #4
2cdec     A7 14 02 FB | 	rdlong	arg02, fp
2cdf0     09 15 62 FC | 	wrlong	arg02, arg01
2cdf4     04 4E 05 F1 | 	add	fp, #4
2cdf8     A7 12 02 FB | 	rdlong	arg01, fp
2cdfc     12 12 06 F1 | 	add	arg01, #18
2ce00     09 01 58 FC | 	wrword	#0, arg01
2ce04     08 4E 85 F1 | 	sub	fp, #8
2ce08     A7 18 02 FB | 	rdlong	arg04, fp
2ce0c     03 18 06 F1 | 	add	arg04, #3
2ce10     0C 03 48 FC | 	wrbyte	#1, arg04
2ce14     A7 12 02 FB | 	rdlong	arg01, fp
2ce18     0C 4E 85 F1 | 	sub	fp, #12
2ce1c     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
2ce20     08 4E 05 F1 | 	add	fp, #8
2ce24     A7 FA 61 FC | 	wrlong	result1, fp
2ce28     04 4E 85 F1 | 	sub	fp, #4
2ce2c     A7 18 02 FB | 	rdlong	arg04, fp
2ce30     0C 17 02 F6 | 	mov	arg03, arg04
2ce34     04 4E 85 F1 | 	sub	fp, #4
2ce38     10 18 06 F1 | 	add	arg04, #16
2ce3c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ce40     BF 18 06 F5 | 	and	arg04, #191
2ce44     10 16 06 F1 | 	add	arg03, #16
2ce48     0B 19 42 FC | 	wrbyte	arg04, arg03
2ce4c                 | LR__4551
2ce4c                 | LR__4552
2ce4c                 | LR__4553
2ce4c                 | ' 					dir = fp->dir_ptr;
2ce4c                 | ' 					dir[ 11 ] |=  0x20 ;
2ce4c                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2ce4c                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2ce4c                 | ' 					st_dword(dir +  22 , tm);
2ce4c                 | ' 					st_word(dir +  18 , 0);
2ce4c                 | ' 					fs->wflag = 1;
2ce4c                 | ' 					res = sync_fs(fs);
2ce4c                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2ce4c                 | ' 				}
2ce4c                 | ' 			}
2ce4c                 | ' 		}
2ce4c                 | ' 	}
2ce4c                 | ' 
2ce4c                 | ' 	return res ;
2ce4c     08 4E 05 F1 | 	add	fp, #8
2ce50     A7 FA 01 FB | 	rdlong	result1, fp
2ce54     08 4E 85 F1 | 	sub	fp, #8
2ce58                 | LR__4554
2ce58     A7 F0 03 F6 | 	mov	ptra, fp
2ce5c     B2 00 A0 FD | 	call	#popregs_
2ce60                 | _fatfs_cc_f_sync_ret
2ce60     2D 00 64 FD | 	ret
2ce64                 | 
2ce64                 | _fatfs_cc_f_close
2ce64     01 4A 05 F6 | 	mov	COUNT_, #1
2ce68     A8 00 A0 FD | 	call	#pushregs_
2ce6c     10 F0 07 F1 | 	add	ptra, #16
2ce70     04 4E 05 F1 | 	add	fp, #4
2ce74     A7 12 62 FC | 	wrlong	arg01, fp
2ce78     04 4E 85 F1 | 	sub	fp, #4
2ce7c     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2ce80     08 4E 05 F1 | 	add	fp, #8
2ce84     A7 FA 61 FC | 	wrlong	result1, fp
2ce88     08 4E 85 F1 | 	sub	fp, #8
2ce8c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ce90     38 00 90 5D |  if_ne	jmp	#LR__4560
2ce94     04 4E 05 F1 | 	add	fp, #4
2ce98     A7 12 02 FB | 	rdlong	arg01, fp
2ce9c     08 4E 05 F1 | 	add	fp, #8
2cea0     A7 14 02 F6 | 	mov	arg02, fp
2cea4     0C 4E 85 F1 | 	sub	fp, #12
2cea8     9C E6 BF FD | 	call	#_fatfs_cc_validate
2ceac     08 4E 05 F1 | 	add	fp, #8
2ceb0     A7 FA 61 FC | 	wrlong	result1, fp
2ceb4     08 4E 85 F1 | 	sub	fp, #8
2ceb8     00 FA 0D F2 | 	cmp	result1, #0 wz
2cebc     04 4E 05 A1 |  if_e	add	fp, #4
2cec0     A7 1E 02 AB |  if_e	rdlong	local01, fp
2cec4     04 4E 85 A1 |  if_e	sub	fp, #4
2cec8     0F 01 68 AC |  if_e	wrlong	#0, local01
2cecc                 | LR__4560
2cecc                 | ' 
2cecc                 | ' 
2cecc                 | ' 
2cecc                 | ' 
2cecc                 | ' 			fp->obj.fs = 0;
2cecc                 | ' #line 4192 "ff.c"
2cecc                 | ' 		}
2cecc                 | ' 	}
2cecc                 | ' 	return res;
2cecc     08 4E 05 F1 | 	add	fp, #8
2ced0     A7 FA 01 FB | 	rdlong	result1, fp
2ced4     08 4E 85 F1 | 	sub	fp, #8
2ced8     A7 F0 03 F6 | 	mov	ptra, fp
2cedc     B2 00 A0 FD | 	call	#popregs_
2cee0                 | _fatfs_cc_f_close_ret
2cee0     2D 00 64 FD | 	ret
2cee4                 | 
2cee4                 | _fatfs_cc_f_lseek
2cee4     00 4A 05 F6 | 	mov	COUNT_, #0
2cee8     A8 00 A0 FD | 	call	#pushregs_
2ceec     24 F0 07 F1 | 	add	ptra, #36
2cef0     04 4E 05 F1 | 	add	fp, #4
2cef4     A7 12 62 FC | 	wrlong	arg01, fp
2cef8     04 4E 05 F1 | 	add	fp, #4
2cefc     A7 14 62 FC | 	wrlong	arg02, fp
2cf00     04 4E 85 F1 | 	sub	fp, #4
2cf04     A7 12 02 FB | 	rdlong	arg01, fp
2cf08     0C 4E 05 F1 | 	add	fp, #12
2cf0c     A7 14 02 F6 | 	mov	arg02, fp
2cf10     10 4E 85 F1 | 	sub	fp, #16
2cf14     30 E6 BF FD | 	call	#_fatfs_cc_validate
2cf18     0C 4E 05 F1 | 	add	fp, #12
2cf1c     A7 FA 61 FC | 	wrlong	result1, fp
2cf20     0C 4E 85 F1 | 	sub	fp, #12
2cf24     00 FA 0D F2 | 	cmp	result1, #0 wz
2cf28     1C 00 90 5D |  if_ne	jmp	#LR__4570
2cf2c     04 4E 05 F1 | 	add	fp, #4
2cf30     A7 18 02 FB | 	rdlong	arg04, fp
2cf34     11 18 06 F1 | 	add	arg04, #17
2cf38     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cf3c     08 4E 05 F1 | 	add	fp, #8
2cf40     A7 18 62 FC | 	wrlong	arg04, fp
2cf44     0C 4E 85 F1 | 	sub	fp, #12
2cf48                 | LR__4570
2cf48     0C 4E 05 F1 | 	add	fp, #12
2cf4c     A7 18 0A FB | 	rdlong	arg04, fp wz
2cf50     0C 4E 85 F1 | 	sub	fp, #12
2cf54     0C 4E 05 51 |  if_ne	add	fp, #12
2cf58     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2cf5c     0C 4E 85 51 |  if_ne	sub	fp, #12
2cf60     40 06 90 5D |  if_ne	jmp	#LR__4593
2cf64     04 4E 05 F1 | 	add	fp, #4
2cf68     A7 18 02 FB | 	rdlong	arg04, fp
2cf6c     04 4E 05 F1 | 	add	fp, #4
2cf70     A7 16 02 FB | 	rdlong	arg03, fp
2cf74     08 4E 85 F1 | 	sub	fp, #8
2cf78     0C 18 06 F1 | 	add	arg04, #12
2cf7c     0C 19 02 FB | 	rdlong	arg04, arg04
2cf80     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2cf84     3C 00 90 ED |  if_be	jmp	#LR__4571
2cf88     04 4E 05 F1 | 	add	fp, #4
2cf8c     A7 16 02 FB | 	rdlong	arg03, fp
2cf90     04 4E 85 F1 | 	sub	fp, #4
2cf94     10 16 06 F1 | 	add	arg03, #16
2cf98     0B 17 C2 FA | 	rdbyte	arg03, arg03
2cf9c     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2cfa0     02 16 CE F7 | 	test	arg03, #2 wz
2cfa4     1C 00 90 5D |  if_ne	jmp	#LR__4571
2cfa8     04 4E 05 F1 | 	add	fp, #4
2cfac     A7 16 02 FB | 	rdlong	arg03, fp
2cfb0     0C 16 06 F1 | 	add	arg03, #12
2cfb4     0B 17 02 FB | 	rdlong	arg03, arg03
2cfb8     04 4E 05 F1 | 	add	fp, #4
2cfbc     A7 16 62 FC | 	wrlong	arg03, fp
2cfc0     08 4E 85 F1 | 	sub	fp, #8
2cfc4                 | LR__4571
2cfc4     04 4E 05 F1 | 	add	fp, #4
2cfc8     A7 16 02 FB | 	rdlong	arg03, fp
2cfcc     14 16 06 F1 | 	add	arg03, #20
2cfd0     0B 17 02 FB | 	rdlong	arg03, arg03
2cfd4     1C 4E 05 F1 | 	add	fp, #28
2cfd8     A7 16 62 FC | 	wrlong	arg03, fp
2cfdc     1C 4E 85 F1 | 	sub	fp, #28
2cfe0     A7 16 02 FB | 	rdlong	arg03, fp
2cfe4     18 4E 05 F1 | 	add	fp, #24
2cfe8     A7 00 68 FC | 	wrlong	#0, fp
2cfec     14 16 06 F1 | 	add	arg03, #20
2cff0     0B 01 68 FC | 	wrlong	#0, arg03
2cff4     14 4E 85 F1 | 	sub	fp, #20
2cff8     A7 16 02 FB | 	rdlong	arg03, fp
2cffc     08 4E 85 F1 | 	sub	fp, #8
2d000     01 16 16 F2 | 	cmp	arg03, #1 wc
2d004     E4 03 90 CD |  if_b	jmp	#LR__4587
2d008     10 4E 05 F1 | 	add	fp, #16
2d00c     A7 16 02 FB | 	rdlong	arg03, fp
2d010     0A 16 06 F1 | 	add	arg03, #10
2d014     0B 19 E2 FA | 	rdword	arg04, arg03
2d018     09 18 66 F0 | 	shl	arg04, #9
2d01c     08 4E 05 F1 | 	add	fp, #8
2d020     A7 18 62 FC | 	wrlong	arg04, fp
2d024     08 4E 05 F1 | 	add	fp, #8
2d028     A7 18 02 FB | 	rdlong	arg04, fp
2d02c     20 4E 85 F1 | 	sub	fp, #32
2d030     01 18 16 F2 | 	cmp	arg04, #1 wc
2d034     AC 00 90 CD |  if_b	jmp	#LR__4572
2d038     08 4E 05 F1 | 	add	fp, #8
2d03c     A7 18 02 FB | 	rdlong	arg04, fp
2d040     01 18 86 F1 | 	sub	arg04, #1
2d044     10 4E 05 F1 | 	add	fp, #16
2d048     A7 16 02 FB | 	rdlong	arg03, fp
2d04c     0B 19 12 FD | 	qdiv	arg04, arg03
2d050     08 4E 05 F1 | 	add	fp, #8
2d054     A7 FA 01 FB | 	rdlong	result1, fp
2d058     01 FA 85 F1 | 	sub	result1, #1
2d05c     18 18 62 FD | 	getqx	arg04
2d060     0B FB 11 FD | 	qdiv	result1, arg03
2d064     20 4E 85 F1 | 	sub	fp, #32
2d068     18 16 62 FD | 	getqx	arg03
2d06c     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2d070     70 00 90 CD |  if_b	jmp	#LR__4572
2d074     04 4E 05 F1 | 	add	fp, #4
2d078     A7 16 02 FB | 	rdlong	arg03, fp
2d07c     1C 4E 05 F1 | 	add	fp, #28
2d080     A7 FA 01 FB | 	rdlong	result1, fp
2d084     01 FA 85 F1 | 	sub	result1, #1
2d088     08 4E 85 F1 | 	sub	fp, #8
2d08c     A7 18 02 FB | 	rdlong	arg04, fp
2d090     01 18 86 F1 | 	sub	arg04, #1
2d094     0C FB 21 F5 | 	andn	result1, arg04
2d098     14 16 06 F1 | 	add	arg03, #20
2d09c     0B FB 61 FC | 	wrlong	result1, arg03
2d0a0     10 4E 85 F1 | 	sub	fp, #16
2d0a4     A7 16 02 FB | 	rdlong	arg03, fp
2d0a8     04 4E 85 F1 | 	sub	fp, #4
2d0ac     A7 18 02 FB | 	rdlong	arg04, fp
2d0b0     14 18 06 F1 | 	add	arg04, #20
2d0b4     0C 19 02 FB | 	rdlong	arg04, arg04
2d0b8     0C 17 82 F1 | 	sub	arg03, arg04
2d0bc     04 4E 05 F1 | 	add	fp, #4
2d0c0     A7 16 62 FC | 	wrlong	arg03, fp
2d0c4     04 4E 85 F1 | 	sub	fp, #4
2d0c8     A7 16 02 FB | 	rdlong	arg03, fp
2d0cc     18 16 06 F1 | 	add	arg03, #24
2d0d0     0B 17 02 FB | 	rdlong	arg03, arg03
2d0d4     10 4E 05 F1 | 	add	fp, #16
2d0d8     A7 16 62 FC | 	wrlong	arg03, fp
2d0dc     14 4E 85 F1 | 	sub	fp, #20
2d0e0     D0 00 90 FD | 	jmp	#LR__4576
2d0e4                 | LR__4572
2d0e4     04 4E 05 F1 | 	add	fp, #4
2d0e8     A7 16 02 FB | 	rdlong	arg03, fp
2d0ec     08 16 06 F1 | 	add	arg03, #8
2d0f0     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2d0f4     10 4E 05 F1 | 	add	fp, #16
2d0f8     A7 16 62 FC | 	wrlong	arg03, fp
2d0fc     14 4E 85 F1 | 	sub	fp, #20
2d100     94 00 90 5D |  if_ne	jmp	#LR__4575
2d104     04 4E 05 F1 | 	add	fp, #4
2d108     A7 12 02 FB | 	rdlong	arg01, fp
2d10c     04 4E 85 F1 | 	sub	fp, #4
2d110     00 14 06 F6 | 	mov	arg02, #0
2d114     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
2d118     14 4E 05 F1 | 	add	fp, #20
2d11c     A7 FA 61 FC | 	wrlong	result1, fp
2d120     14 4E 85 F1 | 	sub	fp, #20
2d124     01 FA 0D F2 | 	cmp	result1, #1 wz
2d128     1C 00 90 5D |  if_ne	jmp	#LR__4573
2d12c     04 4E 05 F1 | 	add	fp, #4
2d130     A7 16 02 FB | 	rdlong	arg03, fp
2d134     04 4E 85 F1 | 	sub	fp, #4
2d138     11 16 06 F1 | 	add	arg03, #17
2d13c     0B 05 48 FC | 	wrbyte	#2, arg03
2d140     02 FA 05 F6 | 	mov	result1, #2
2d144     5C 04 90 FD | 	jmp	#LR__4593
2d148                 | LR__4573
2d148     14 4E 05 F1 | 	add	fp, #20
2d14c     A7 FA 01 FB | 	rdlong	result1, fp
2d150     14 4E 85 F1 | 	sub	fp, #20
2d154     FF FF 7F FF 
2d158     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2d15c     1C 00 90 5D |  if_ne	jmp	#LR__4574
2d160     04 4E 05 F1 | 	add	fp, #4
2d164     A7 16 02 FB | 	rdlong	arg03, fp
2d168     04 4E 85 F1 | 	sub	fp, #4
2d16c     11 16 06 F1 | 	add	arg03, #17
2d170     0B 03 48 FC | 	wrbyte	#1, arg03
2d174     01 FA 05 F6 | 	mov	result1, #1
2d178     28 04 90 FD | 	jmp	#LR__4593
2d17c                 | LR__4574
2d17c     04 4E 05 F1 | 	add	fp, #4
2d180     A7 16 02 FB | 	rdlong	arg03, fp
2d184     10 4E 05 F1 | 	add	fp, #16
2d188     A7 18 02 FB | 	rdlong	arg04, fp
2d18c     14 4E 85 F1 | 	sub	fp, #20
2d190     08 16 06 F1 | 	add	arg03, #8
2d194     0B 19 62 FC | 	wrlong	arg04, arg03
2d198                 | LR__4575
2d198     04 4E 05 F1 | 	add	fp, #4
2d19c     A7 16 02 FB | 	rdlong	arg03, fp
2d1a0     10 4E 05 F1 | 	add	fp, #16
2d1a4     A7 18 02 FB | 	rdlong	arg04, fp
2d1a8     14 4E 85 F1 | 	sub	fp, #20
2d1ac     18 16 06 F1 | 	add	arg03, #24
2d1b0     0B 19 62 FC | 	wrlong	arg04, arg03
2d1b4                 | LR__4576
2d1b4     14 4E 05 F1 | 	add	fp, #20
2d1b8     A7 16 0A FB | 	rdlong	arg03, fp wz
2d1bc     14 4E 85 F1 | 	sub	fp, #20
2d1c0     28 02 90 AD |  if_e	jmp	#LR__4586
2d1c4                 | ' 				while (ofs > bcs) {
2d1c4                 | LR__4577
2d1c4     08 4E 05 F1 | 	add	fp, #8
2d1c8     A7 18 02 FB | 	rdlong	arg04, fp
2d1cc     10 4E 05 F1 | 	add	fp, #16
2d1d0     A7 16 02 FB | 	rdlong	arg03, fp
2d1d4     18 4E 85 F1 | 	sub	fp, #24
2d1d8     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
2d1dc     68 01 90 ED |  if_be	jmp	#LR__4583
2d1e0     08 4E 05 F1 | 	add	fp, #8
2d1e4     A7 18 02 FB | 	rdlong	arg04, fp
2d1e8     10 4E 05 F1 | 	add	fp, #16
2d1ec     A7 16 02 FB | 	rdlong	arg03, fp
2d1f0     0B 19 82 F1 | 	sub	arg04, arg03
2d1f4     10 4E 85 F1 | 	sub	fp, #16
2d1f8     A7 18 62 FC | 	wrlong	arg04, fp
2d1fc     04 4E 85 F1 | 	sub	fp, #4
2d200     A7 18 02 FB | 	rdlong	arg04, fp
2d204     0C FB 01 F6 | 	mov	result1, arg04
2d208     14 18 06 F1 | 	add	arg04, #20
2d20c     0C 19 02 FB | 	rdlong	arg04, arg04
2d210     14 4E 05 F1 | 	add	fp, #20
2d214     A7 16 02 FB | 	rdlong	arg03, fp
2d218     0B 19 02 F1 | 	add	arg04, arg03
2d21c     14 FA 05 F1 | 	add	result1, #20
2d220     FD 18 62 FC | 	wrlong	arg04, result1
2d224     14 4E 85 F1 | 	sub	fp, #20
2d228     A7 16 02 FB | 	rdlong	arg03, fp
2d22c     04 4E 85 F1 | 	sub	fp, #4
2d230     10 16 06 F1 | 	add	arg03, #16
2d234     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d238     02 16 CE F7 | 	test	arg03, #2 wz
2d23c     3C 00 90 AD |  if_e	jmp	#LR__4578
2d240     04 4E 05 F1 | 	add	fp, #4
2d244     A7 12 02 FB | 	rdlong	arg01, fp
2d248     10 4E 05 F1 | 	add	fp, #16
2d24c     A7 14 02 FB | 	rdlong	arg02, fp
2d250     14 4E 85 F1 | 	sub	fp, #20
2d254     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
2d258     14 4E 05 F1 | 	add	fp, #20
2d25c     A7 FA 61 FC | 	wrlong	result1, fp
2d260     00 FA 4D F2 | 	cmps	result1, #0 wz
2d264     14 4E 85 F1 | 	sub	fp, #20
2d268     08 4E 05 A1 |  if_e	add	fp, #8
2d26c     A7 00 68 AC |  if_e	wrlong	#0, fp
2d270     08 4E 85 A1 |  if_e	sub	fp, #8
2d274                 | ' 							ofs = 0; break;
2d274     D0 00 90 AD |  if_e	jmp	#LR__4583
2d278     24 00 90 FD | 	jmp	#LR__4579
2d27c                 | LR__4578
2d27c     04 4E 05 F1 | 	add	fp, #4
2d280     A7 12 02 FB | 	rdlong	arg01, fp
2d284     10 4E 05 F1 | 	add	fp, #16
2d288     A7 14 02 FB | 	rdlong	arg02, fp
2d28c     14 4E 85 F1 | 	sub	fp, #20
2d290     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
2d294     14 4E 05 F1 | 	add	fp, #20
2d298     A7 FA 61 FC | 	wrlong	result1, fp
2d29c     14 4E 85 F1 | 	sub	fp, #20
2d2a0                 | LR__4579
2d2a0     14 4E 05 F1 | 	add	fp, #20
2d2a4     A7 16 02 FB | 	rdlong	arg03, fp
2d2a8     14 4E 85 F1 | 	sub	fp, #20
2d2ac     FF FF 7F FF 
2d2b0     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2d2b4     1C 00 90 5D |  if_ne	jmp	#LR__4580
2d2b8     04 4E 05 F1 | 	add	fp, #4
2d2bc     A7 16 02 FB | 	rdlong	arg03, fp
2d2c0     04 4E 85 F1 | 	sub	fp, #4
2d2c4     11 16 06 F1 | 	add	arg03, #17
2d2c8     0B 03 48 FC | 	wrbyte	#1, arg03
2d2cc     01 FA 05 F6 | 	mov	result1, #1
2d2d0     D0 02 90 FD | 	jmp	#LR__4593
2d2d4                 | LR__4580
2d2d4     14 4E 05 F1 | 	add	fp, #20
2d2d8     A7 16 02 FB | 	rdlong	arg03, fp
2d2dc     14 4E 85 F1 | 	sub	fp, #20
2d2e0     02 16 16 F2 | 	cmp	arg03, #2 wc
2d2e4     24 00 90 CD |  if_b	jmp	#LR__4581
2d2e8     10 4E 05 F1 | 	add	fp, #16
2d2ec     A7 18 02 FB | 	rdlong	arg04, fp
2d2f0     04 4E 05 F1 | 	add	fp, #4
2d2f4     A7 16 02 FB | 	rdlong	arg03, fp
2d2f8     14 4E 85 F1 | 	sub	fp, #20
2d2fc     18 18 06 F1 | 	add	arg04, #24
2d300     0C 19 02 FB | 	rdlong	arg04, arg04
2d304     0C 17 12 F2 | 	cmp	arg03, arg04 wc
2d308     1C 00 90 CD |  if_b	jmp	#LR__4582
2d30c                 | LR__4581
2d30c     04 4E 05 F1 | 	add	fp, #4
2d310     A7 16 02 FB | 	rdlong	arg03, fp
2d314     04 4E 85 F1 | 	sub	fp, #4
2d318     11 16 06 F1 | 	add	arg03, #17
2d31c     0B 05 48 FC | 	wrbyte	#2, arg03
2d320     02 FA 05 F6 | 	mov	result1, #2
2d324     7C 02 90 FD | 	jmp	#LR__4593
2d328                 | LR__4582
2d328     04 4E 05 F1 | 	add	fp, #4
2d32c     A7 18 02 FB | 	rdlong	arg04, fp
2d330     10 4E 05 F1 | 	add	fp, #16
2d334     A7 16 02 FB | 	rdlong	arg03, fp
2d338     14 4E 85 F1 | 	sub	fp, #20
2d33c     18 18 06 F1 | 	add	arg04, #24
2d340     0C 17 62 FC | 	wrlong	arg03, arg04
2d344     7C FE 9F FD | 	jmp	#LR__4577
2d348                 | LR__4583
2d348     04 4E 05 F1 | 	add	fp, #4
2d34c     A7 16 02 FB | 	rdlong	arg03, fp
2d350     0B 13 02 F6 | 	mov	arg01, arg03
2d354     14 16 06 F1 | 	add	arg03, #20
2d358     0B 15 02 FB | 	rdlong	arg02, arg03
2d35c     04 4E 05 F1 | 	add	fp, #4
2d360     A7 16 02 FB | 	rdlong	arg03, fp
2d364     0B 15 02 F1 | 	add	arg02, arg03
2d368     14 12 06 F1 | 	add	arg01, #20
2d36c     09 15 62 FC | 	wrlong	arg02, arg01
2d370     A7 16 02 FB | 	rdlong	arg03, fp
2d374     08 4E 85 F1 | 	sub	fp, #8
2d378     FF 17 CE F7 | 	test	arg03, #511 wz
2d37c     6C 00 90 AD |  if_e	jmp	#LR__4585
2d380     10 4E 05 F1 | 	add	fp, #16
2d384     A7 12 02 FB | 	rdlong	arg01, fp
2d388     04 4E 05 F1 | 	add	fp, #4
2d38c     A7 14 02 FB | 	rdlong	arg02, fp
2d390     14 4E 85 F1 | 	sub	fp, #20
2d394     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2d398     1C 4E 05 F1 | 	add	fp, #28
2d39c     A7 FA 61 FC | 	wrlong	result1, fp
2d3a0     1C 4E 85 F1 | 	sub	fp, #28
2d3a4     00 FA 0D F2 | 	cmp	result1, #0 wz
2d3a8     1C 00 90 5D |  if_ne	jmp	#LR__4584
2d3ac     04 4E 05 F1 | 	add	fp, #4
2d3b0     A7 16 02 FB | 	rdlong	arg03, fp
2d3b4     04 4E 85 F1 | 	sub	fp, #4
2d3b8     11 16 06 F1 | 	add	arg03, #17
2d3bc     0B 05 48 FC | 	wrbyte	#2, arg03
2d3c0     02 FA 05 F6 | 	mov	result1, #2
2d3c4     DC 01 90 FD | 	jmp	#LR__4593
2d3c8                 | LR__4584
2d3c8     1C 4E 05 F1 | 	add	fp, #28
2d3cc     A7 18 02 FB | 	rdlong	arg04, fp
2d3d0     14 4E 85 F1 | 	sub	fp, #20
2d3d4     A7 16 02 FB | 	rdlong	arg03, fp
2d3d8     09 16 46 F0 | 	shr	arg03, #9
2d3dc     0B 19 02 F1 | 	add	arg04, arg03
2d3e0     14 4E 05 F1 | 	add	fp, #20
2d3e4     A7 18 62 FC | 	wrlong	arg04, fp
2d3e8     1C 4E 85 F1 | 	sub	fp, #28
2d3ec                 | LR__4585
2d3ec                 | LR__4586
2d3ec                 | LR__4587
2d3ec     04 4E 05 F1 | 	add	fp, #4
2d3f0     A7 18 02 FB | 	rdlong	arg04, fp
2d3f4     0C 17 02 F6 | 	mov	arg03, arg04
2d3f8     04 4E 85 F1 | 	sub	fp, #4
2d3fc     14 16 06 F1 | 	add	arg03, #20
2d400     0B 17 02 FB | 	rdlong	arg03, arg03
2d404     0C 18 06 F1 | 	add	arg04, #12
2d408     0C 19 02 FB | 	rdlong	arg04, arg04
2d40c     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2d410     3C 00 90 ED |  if_be	jmp	#LR__4588
2d414     04 4E 05 F1 | 	add	fp, #4
2d418     A7 18 02 FB | 	rdlong	arg04, fp
2d41c     0C 17 02 F6 | 	mov	arg03, arg04
2d420     14 18 06 F1 | 	add	arg04, #20
2d424     0C 19 02 FB | 	rdlong	arg04, arg04
2d428     0C 16 06 F1 | 	add	arg03, #12
2d42c     0B 19 62 FC | 	wrlong	arg04, arg03
2d430     A7 18 02 FB | 	rdlong	arg04, fp
2d434     0C 17 02 F6 | 	mov	arg03, arg04
2d438     04 4E 85 F1 | 	sub	fp, #4
2d43c     10 18 06 F1 | 	add	arg04, #16
2d440     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d444     40 18 46 F5 | 	or	arg04, #64
2d448     10 16 06 F1 | 	add	arg03, #16
2d44c     0B 19 42 FC | 	wrbyte	arg04, arg03
2d450                 | LR__4588
2d450     04 4E 05 F1 | 	add	fp, #4
2d454     A7 16 02 FB | 	rdlong	arg03, fp
2d458     04 4E 85 F1 | 	sub	fp, #4
2d45c     14 16 06 F1 | 	add	arg03, #20
2d460     0B 17 02 FB | 	rdlong	arg03, arg03
2d464     FF 17 CE F7 | 	test	arg03, #511 wz
2d468     2C 01 90 AD |  if_e	jmp	#LR__4592
2d46c     04 4E 05 F1 | 	add	fp, #4
2d470     A7 18 02 FB | 	rdlong	arg04, fp
2d474     18 4E 05 F1 | 	add	fp, #24
2d478     A7 16 02 FB | 	rdlong	arg03, fp
2d47c     1C 4E 85 F1 | 	sub	fp, #28
2d480     1C 18 06 F1 | 	add	arg04, #28
2d484     0C 19 02 FB | 	rdlong	arg04, arg04
2d488     0C 17 0A F2 | 	cmp	arg03, arg04 wz
2d48c     08 01 90 AD |  if_e	jmp	#LR__4592
2d490     04 4E 05 F1 | 	add	fp, #4
2d494     A7 16 02 FB | 	rdlong	arg03, fp
2d498     04 4E 85 F1 | 	sub	fp, #4
2d49c     10 16 06 F1 | 	add	arg03, #16
2d4a0     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d4a4     80 16 CE F7 | 	test	arg03, #128 wz
2d4a8     7C 00 90 AD |  if_e	jmp	#LR__4590
2d4ac     10 4E 05 F1 | 	add	fp, #16
2d4b0     A7 16 02 FB | 	rdlong	arg03, fp
2d4b4     01 16 06 F1 | 	add	arg03, #1
2d4b8     0B 13 C2 FA | 	rdbyte	arg01, arg03
2d4bc     0C 4E 85 F1 | 	sub	fp, #12
2d4c0     A7 16 02 FB | 	rdlong	arg03, fp
2d4c4     0B 15 02 F6 | 	mov	arg02, arg03
2d4c8     28 14 06 F1 | 	add	arg02, #40
2d4cc     04 4E 85 F1 | 	sub	fp, #4
2d4d0     1C 16 06 F1 | 	add	arg03, #28
2d4d4     0B 17 02 FB | 	rdlong	arg03, arg03
2d4d8     01 18 06 F6 | 	mov	arg04, #1
2d4dc     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
2d4e0     00 FA 0D F2 | 	cmp	result1, #0 wz
2d4e4     1C 00 90 AD |  if_e	jmp	#LR__4589
2d4e8     04 4E 05 F1 | 	add	fp, #4
2d4ec     A7 16 02 FB | 	rdlong	arg03, fp
2d4f0     04 4E 85 F1 | 	sub	fp, #4
2d4f4     11 16 06 F1 | 	add	arg03, #17
2d4f8     0B 03 48 FC | 	wrbyte	#1, arg03
2d4fc     01 FA 05 F6 | 	mov	result1, #1
2d500     A0 00 90 FD | 	jmp	#LR__4593
2d504                 | LR__4589
2d504     04 4E 05 F1 | 	add	fp, #4
2d508     A7 18 02 FB | 	rdlong	arg04, fp
2d50c     0C 17 02 F6 | 	mov	arg03, arg04
2d510     04 4E 85 F1 | 	sub	fp, #4
2d514     10 18 06 F1 | 	add	arg04, #16
2d518     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d51c     7F 18 06 F5 | 	and	arg04, #127
2d520     10 16 06 F1 | 	add	arg03, #16
2d524     0B 19 42 FC | 	wrbyte	arg04, arg03
2d528                 | LR__4590
2d528     10 4E 05 F1 | 	add	fp, #16
2d52c     A7 16 02 FB | 	rdlong	arg03, fp
2d530     01 16 06 F1 | 	add	arg03, #1
2d534     0B 13 C2 FA | 	rdbyte	arg01, arg03
2d538     0C 4E 85 F1 | 	sub	fp, #12
2d53c     A7 14 02 FB | 	rdlong	arg02, fp
2d540     28 14 06 F1 | 	add	arg02, #40
2d544     18 4E 05 F1 | 	add	fp, #24
2d548     A7 16 02 FB | 	rdlong	arg03, fp
2d54c     1C 4E 85 F1 | 	sub	fp, #28
2d550     01 18 06 F6 | 	mov	arg04, #1
2d554     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
2d558     00 FA 0D F2 | 	cmp	result1, #0 wz
2d55c     1C 00 90 AD |  if_e	jmp	#LR__4591
2d560     04 4E 05 F1 | 	add	fp, #4
2d564     A7 16 02 FB | 	rdlong	arg03, fp
2d568     04 4E 85 F1 | 	sub	fp, #4
2d56c     11 16 06 F1 | 	add	arg03, #17
2d570     0B 03 48 FC | 	wrbyte	#1, arg03
2d574     01 FA 05 F6 | 	mov	result1, #1
2d578     28 00 90 FD | 	jmp	#LR__4593
2d57c                 | LR__4591
2d57c     04 4E 05 F1 | 	add	fp, #4
2d580     A7 18 02 FB | 	rdlong	arg04, fp
2d584     18 4E 05 F1 | 	add	fp, #24
2d588     A7 16 02 FB | 	rdlong	arg03, fp
2d58c     1C 4E 85 F1 | 	sub	fp, #28
2d590     1C 18 06 F1 | 	add	arg04, #28
2d594     0C 17 62 FC | 	wrlong	arg03, arg04
2d598                 | LR__4592
2d598                 | ' 
2d598                 | ' 			fp->sect = nsect;
2d598                 | ' 		}
2d598                 | ' 	}
2d598                 | ' 
2d598                 | ' 	return res ;
2d598     0C 4E 05 F1 | 	add	fp, #12
2d59c     A7 FA 01 FB | 	rdlong	result1, fp
2d5a0     0C 4E 85 F1 | 	sub	fp, #12
2d5a4                 | LR__4593
2d5a4     A7 F0 03 F6 | 	mov	ptra, fp
2d5a8     B2 00 A0 FD | 	call	#popregs_
2d5ac                 | _fatfs_cc_f_lseek_ret
2d5ac     2D 00 64 FD | 	ret
2d5b0                 | 
2d5b0                 | _fatfs_cc_f_opendir
2d5b0     01 4A 05 F6 | 	mov	COUNT_, #1
2d5b4     A8 00 A0 FD | 	call	#pushregs_
2d5b8     14 F0 07 F1 | 	add	ptra, #20
2d5bc     04 4E 05 F1 | 	add	fp, #4
2d5c0     A7 12 62 FC | 	wrlong	arg01, fp
2d5c4     04 4E 05 F1 | 	add	fp, #4
2d5c8     A7 14 62 FC | 	wrlong	arg02, fp
2d5cc     04 4E 85 F1 | 	sub	fp, #4
2d5d0     A7 16 0A FB | 	rdlong	arg03, fp wz
2d5d4     04 4E 85 F1 | 	sub	fp, #4
2d5d8     09 FA 05 A6 |  if_e	mov	result1, #9
2d5dc     78 01 90 AD |  if_e	jmp	#LR__4606
2d5e0     08 4E 05 F1 | 	add	fp, #8
2d5e4     A7 12 02 F6 | 	mov	arg01, fp
2d5e8     08 4E 05 F1 | 	add	fp, #8
2d5ec     A7 14 02 F6 | 	mov	arg02, fp
2d5f0     10 4E 85 F1 | 	sub	fp, #16
2d5f4     00 16 06 F6 | 	mov	arg03, #0
2d5f8     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
2d5fc     0C 4E 05 F1 | 	add	fp, #12
2d600     A7 FA 61 FC | 	wrlong	result1, fp
2d604     0C 4E 85 F1 | 	sub	fp, #12
2d608     00 FA 0D F2 | 	cmp	result1, #0 wz
2d60c     20 01 90 5D |  if_ne	jmp	#LR__4605
2d610     04 4E 05 F1 | 	add	fp, #4
2d614     A7 16 02 FB | 	rdlong	arg03, fp
2d618     0C 4E 05 F1 | 	add	fp, #12
2d61c     A7 FA 01 FB | 	rdlong	result1, fp
2d620     0B FB 61 FC | 	wrlong	result1, arg03
2d624     0C 4E 85 F1 | 	sub	fp, #12
2d628     A7 12 02 FB | 	rdlong	arg01, fp
2d62c     04 4E 05 F1 | 	add	fp, #4
2d630     A7 14 02 FB | 	rdlong	arg02, fp
2d634     08 4E 85 F1 | 	sub	fp, #8
2d638     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
2d63c     0C 4E 05 F1 | 	add	fp, #12
2d640     A7 FA 61 FC | 	wrlong	result1, fp
2d644     0C 4E 85 F1 | 	sub	fp, #12
2d648     00 FA 0D F2 | 	cmp	result1, #0 wz
2d64c     C4 00 90 5D |  if_ne	jmp	#LR__4604
2d650     04 4E 05 F1 | 	add	fp, #4
2d654     A7 16 02 FB | 	rdlong	arg03, fp
2d658     04 4E 85 F1 | 	sub	fp, #4
2d65c     2B 16 06 F1 | 	add	arg03, #43
2d660     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d664     80 16 CE F7 | 	test	arg03, #128 wz
2d668     58 00 90 5D |  if_ne	jmp	#LR__4602
2d66c     04 4E 05 F1 | 	add	fp, #4
2d670     A7 16 02 FB | 	rdlong	arg03, fp
2d674     04 4E 85 F1 | 	sub	fp, #4
2d678     06 16 06 F1 | 	add	arg03, #6
2d67c     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d680     10 16 CE F7 | 	test	arg03, #16 wz
2d684     30 00 90 AD |  if_e	jmp	#LR__4600
2d688     04 4E 05 F1 | 	add	fp, #4
2d68c     A7 16 02 FB | 	rdlong	arg03, fp
2d690     0B 1F 02 F6 | 	mov	local01, arg03
2d694     0C 4E 05 F1 | 	add	fp, #12
2d698     A7 12 02 FB | 	rdlong	arg01, fp
2d69c     10 4E 85 F1 | 	sub	fp, #16
2d6a0     1C 16 06 F1 | 	add	arg03, #28
2d6a4     0B 15 02 FB | 	rdlong	arg02, arg03
2d6a8     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
2d6ac     08 1E 06 F1 | 	add	local01, #8
2d6b0     0F FB 61 FC | 	wrlong	result1, local01
2d6b4     0C 00 90 FD | 	jmp	#LR__4601
2d6b8                 | LR__4600
2d6b8     0C 4E 05 F1 | 	add	fp, #12
2d6bc     A7 0A 68 FC | 	wrlong	#5, fp
2d6c0     0C 4E 85 F1 | 	sub	fp, #12
2d6c4                 | LR__4601
2d6c4                 | LR__4602
2d6c4     0C 4E 05 F1 | 	add	fp, #12
2d6c8     A7 1E 0A FB | 	rdlong	local01, fp wz
2d6cc     0C 4E 85 F1 | 	sub	fp, #12
2d6d0     40 00 90 5D |  if_ne	jmp	#LR__4603
2d6d4     04 4E 05 F1 | 	add	fp, #4
2d6d8     A7 1E 02 FB | 	rdlong	local01, fp
2d6dc     0C 4E 05 F1 | 	add	fp, #12
2d6e0     A7 16 02 FB | 	rdlong	arg03, fp
2d6e4     06 16 06 F1 | 	add	arg03, #6
2d6e8     0B 17 E2 FA | 	rdword	arg03, arg03
2d6ec     04 1E 06 F1 | 	add	local01, #4
2d6f0     0F 17 52 FC | 	wrword	arg03, local01
2d6f4     0C 4E 85 F1 | 	sub	fp, #12
2d6f8     A7 12 02 FB | 	rdlong	arg01, fp
2d6fc     04 4E 85 F1 | 	sub	fp, #4
2d700     00 14 06 F6 | 	mov	arg02, #0
2d704     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
2d708     0C 4E 05 F1 | 	add	fp, #12
2d70c     A7 FA 61 FC | 	wrlong	result1, fp
2d710     0C 4E 85 F1 | 	sub	fp, #12
2d714                 | LR__4603
2d714                 | LR__4604
2d714     0C 4E 05 F1 | 	add	fp, #12
2d718     A7 1E 02 FB | 	rdlong	local01, fp
2d71c     0C 4E 85 F1 | 	sub	fp, #12
2d720     04 1E 0E F2 | 	cmp	local01, #4 wz
2d724     0C 4E 05 A1 |  if_e	add	fp, #12
2d728     A7 0A 68 AC |  if_e	wrlong	#5, fp
2d72c     0C 4E 85 A1 |  if_e	sub	fp, #12
2d730                 | LR__4605
2d730     0C 4E 05 F1 | 	add	fp, #12
2d734     A7 1E 0A FB | 	rdlong	local01, fp wz
2d738     0C 4E 85 F1 | 	sub	fp, #12
2d73c     04 4E 05 51 |  if_ne	add	fp, #4
2d740     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2d744     04 4E 85 51 |  if_ne	sub	fp, #4
2d748     0F 01 68 5C |  if_ne	wrlong	#0, local01
2d74c                 | ' 
2d74c                 | ' 	return res ;
2d74c     0C 4E 05 F1 | 	add	fp, #12
2d750     A7 FA 01 FB | 	rdlong	result1, fp
2d754     0C 4E 85 F1 | 	sub	fp, #12
2d758                 | LR__4606
2d758     A7 F0 03 F6 | 	mov	ptra, fp
2d75c     B2 00 A0 FD | 	call	#popregs_
2d760                 | _fatfs_cc_f_opendir_ret
2d760     2D 00 64 FD | 	ret
2d764                 | 
2d764                 | _fatfs_cc_f_closedir
2d764     00 4A 05 F6 | 	mov	COUNT_, #0
2d768     A8 00 A0 FD | 	call	#pushregs_
2d76c     10 F0 07 F1 | 	add	ptra, #16
2d770     04 4E 05 F1 | 	add	fp, #4
2d774     A7 12 62 FC | 	wrlong	arg01, fp
2d778     08 4E 05 F1 | 	add	fp, #8
2d77c     A7 14 02 F6 | 	mov	arg02, fp
2d780     0C 4E 85 F1 | 	sub	fp, #12
2d784     C0 DD BF FD | 	call	#_fatfs_cc_validate
2d788     08 4E 05 F1 | 	add	fp, #8
2d78c     A7 FA 61 FC | 	wrlong	result1, fp
2d790     08 4E 85 F1 | 	sub	fp, #8
2d794     00 FA 0D F2 | 	cmp	result1, #0 wz
2d798     04 4E 05 A1 |  if_e	add	fp, #4
2d79c     A7 FA 01 AB |  if_e	rdlong	result1, fp
2d7a0     04 4E 85 A1 |  if_e	sub	fp, #4
2d7a4     FD 00 68 AC |  if_e	wrlong	#0, result1
2d7a8                 | ' 
2d7a8                 | ' 
2d7a8                 | ' 
2d7a8                 | ' 
2d7a8                 | ' 		dp->obj.fs = 0;
2d7a8                 | ' #line 4633 "ff.c"
2d7a8                 | ' 	}
2d7a8                 | ' 	return res;
2d7a8     08 4E 05 F1 | 	add	fp, #8
2d7ac     A7 FA 01 FB | 	rdlong	result1, fp
2d7b0     08 4E 85 F1 | 	sub	fp, #8
2d7b4     A7 F0 03 F6 | 	mov	ptra, fp
2d7b8     B2 00 A0 FD | 	call	#popregs_
2d7bc                 | _fatfs_cc_f_closedir_ret
2d7bc     2D 00 64 FD | 	ret
2d7c0                 | 
2d7c0                 | _fatfs_cc_f_readdir
2d7c0     00 4A 05 F6 | 	mov	COUNT_, #0
2d7c4     A8 00 A0 FD | 	call	#pushregs_
2d7c8     14 F0 07 F1 | 	add	ptra, #20
2d7cc     04 4E 05 F1 | 	add	fp, #4
2d7d0     A7 12 62 FC | 	wrlong	arg01, fp
2d7d4     04 4E 05 F1 | 	add	fp, #4
2d7d8     A7 14 62 FC | 	wrlong	arg02, fp
2d7dc     04 4E 85 F1 | 	sub	fp, #4
2d7e0     A7 12 02 FB | 	rdlong	arg01, fp
2d7e4     0C 4E 05 F1 | 	add	fp, #12
2d7e8     A7 14 02 F6 | 	mov	arg02, fp
2d7ec     10 4E 85 F1 | 	sub	fp, #16
2d7f0     54 DD BF FD | 	call	#_fatfs_cc_validate
2d7f4     0C 4E 05 F1 | 	add	fp, #12
2d7f8     A7 FA 61 FC | 	wrlong	result1, fp
2d7fc     0C 4E 85 F1 | 	sub	fp, #12
2d800     00 FA 0D F2 | 	cmp	result1, #0 wz
2d804     BC 00 90 5D |  if_ne	jmp	#LR__4613
2d808     08 4E 05 F1 | 	add	fp, #8
2d80c     A7 FA 09 FB | 	rdlong	result1, fp wz
2d810     08 4E 85 F1 | 	sub	fp, #8
2d814     24 00 90 5D |  if_ne	jmp	#LR__4610
2d818     04 4E 05 F1 | 	add	fp, #4
2d81c     A7 12 02 FB | 	rdlong	arg01, fp
2d820     04 4E 85 F1 | 	sub	fp, #4
2d824     00 14 06 F6 | 	mov	arg02, #0
2d828     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
2d82c     0C 4E 05 F1 | 	add	fp, #12
2d830     A7 FA 61 FC | 	wrlong	result1, fp
2d834     0C 4E 85 F1 | 	sub	fp, #12
2d838     88 00 90 FD | 	jmp	#LR__4612
2d83c                 | LR__4610
2d83c     04 4E 05 F1 | 	add	fp, #4
2d840     A7 12 02 FB | 	rdlong	arg01, fp
2d844     04 4E 85 F1 | 	sub	fp, #4
2d848     00 14 06 F6 | 	mov	arg02, #0
2d84c     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
2d850     0C 4E 05 F1 | 	add	fp, #12
2d854     A7 FA 61 FC | 	wrlong	result1, fp
2d858     0C 4E 85 F1 | 	sub	fp, #12
2d85c     04 FA 0D F2 | 	cmp	result1, #4 wz
2d860     0C 4E 05 A1 |  if_e	add	fp, #12
2d864     A7 00 68 AC |  if_e	wrlong	#0, fp
2d868     0C 4E 85 A1 |  if_e	sub	fp, #12
2d86c     0C 4E 05 F1 | 	add	fp, #12
2d870     A7 FA 09 FB | 	rdlong	result1, fp wz
2d874     0C 4E 85 F1 | 	sub	fp, #12
2d878     48 00 90 5D |  if_ne	jmp	#LR__4611
2d87c     04 4E 05 F1 | 	add	fp, #4
2d880     A7 12 02 FB | 	rdlong	arg01, fp
2d884     04 4E 05 F1 | 	add	fp, #4
2d888     A7 14 02 FB | 	rdlong	arg02, fp
2d88c     08 4E 85 F1 | 	sub	fp, #8
2d890     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
2d894     04 4E 05 F1 | 	add	fp, #4
2d898     A7 12 02 FB | 	rdlong	arg01, fp
2d89c     04 4E 85 F1 | 	sub	fp, #4
2d8a0     00 14 06 F6 | 	mov	arg02, #0
2d8a4     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
2d8a8     0C 4E 05 F1 | 	add	fp, #12
2d8ac     A7 FA 61 FC | 	wrlong	result1, fp
2d8b0     0C 4E 85 F1 | 	sub	fp, #12
2d8b4     04 FA 0D F2 | 	cmp	result1, #4 wz
2d8b8     0C 4E 05 A1 |  if_e	add	fp, #12
2d8bc     A7 00 68 AC |  if_e	wrlong	#0, fp
2d8c0     0C 4E 85 A1 |  if_e	sub	fp, #12
2d8c4                 | LR__4611
2d8c4                 | LR__4612
2d8c4                 | LR__4613
2d8c4                 | ' 			}
2d8c4                 | ' 			;
2d8c4                 | ' 		}
2d8c4                 | ' 	}
2d8c4                 | ' 	return res ;
2d8c4     0C 4E 05 F1 | 	add	fp, #12
2d8c8     A7 FA 01 FB | 	rdlong	result1, fp
2d8cc     0C 4E 85 F1 | 	sub	fp, #12
2d8d0     A7 F0 03 F6 | 	mov	ptra, fp
2d8d4     B2 00 A0 FD | 	call	#popregs_
2d8d8                 | _fatfs_cc_f_readdir_ret
2d8d8     2D 00 64 FD | 	ret
2d8dc                 | 
2d8dc                 | _fatfs_cc_f_stat
2d8dc     00 4A 05 F6 | 	mov	COUNT_, #0
2d8e0     A8 00 A0 FD | 	call	#pushregs_
2d8e4     40 F0 07 F1 | 	add	ptra, #64
2d8e8     04 4E 05 F1 | 	add	fp, #4
2d8ec     A7 12 62 FC | 	wrlong	arg01, fp
2d8f0     04 4E 05 F1 | 	add	fp, #4
2d8f4     A7 14 62 FC | 	wrlong	arg02, fp
2d8f8     04 4E 85 F1 | 	sub	fp, #4
2d8fc     A7 12 02 F6 | 	mov	arg01, fp
2d900     0C 4E 05 F1 | 	add	fp, #12
2d904     A7 14 02 F6 | 	mov	arg02, fp
2d908     10 4E 85 F1 | 	sub	fp, #16
2d90c     00 16 06 F6 | 	mov	arg03, #0
2d910     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
2d914     0C 4E 05 F1 | 	add	fp, #12
2d918     A7 FA 61 FC | 	wrlong	result1, fp
2d91c     0C 4E 85 F1 | 	sub	fp, #12
2d920     00 FA 0D F2 | 	cmp	result1, #0 wz
2d924     74 00 90 5D |  if_ne	jmp	#LR__4623
2d928     10 4E 05 F1 | 	add	fp, #16
2d92c     A7 12 02 F6 | 	mov	arg01, fp
2d930     0C 4E 85 F1 | 	sub	fp, #12
2d934     A7 14 02 FB | 	rdlong	arg02, fp
2d938     04 4E 85 F1 | 	sub	fp, #4
2d93c     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
2d940     0C 4E 05 F1 | 	add	fp, #12
2d944     A7 FA 61 FC | 	wrlong	result1, fp
2d948     0C 4E 85 F1 | 	sub	fp, #12
2d94c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d950     48 00 90 5D |  if_ne	jmp	#LR__4622
2d954     3B 4E 05 F1 | 	add	fp, #59
2d958     A7 FA C1 FA | 	rdbyte	result1, fp
2d95c     3B 4E 85 F1 | 	sub	fp, #59
2d960     80 FA CD F7 | 	test	result1, #128 wz
2d964     0C 4E 05 51 |  if_ne	add	fp, #12
2d968     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2d96c     0C 4E 85 51 |  if_ne	sub	fp, #12
2d970     28 00 90 5D |  if_ne	jmp	#LR__4621
2d974     08 4E 05 F1 | 	add	fp, #8
2d978     A7 FA 09 FB | 	rdlong	result1, fp wz
2d97c     08 4E 85 F1 | 	sub	fp, #8
2d980     18 00 90 AD |  if_e	jmp	#LR__4620
2d984     10 4E 05 F1 | 	add	fp, #16
2d988     A7 12 02 F6 | 	mov	arg01, fp
2d98c     08 4E 85 F1 | 	sub	fp, #8
2d990     A7 14 02 FB | 	rdlong	arg02, fp
2d994     08 4E 85 F1 | 	sub	fp, #8
2d998     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
2d99c                 | LR__4620
2d99c                 | LR__4621
2d99c                 | LR__4622
2d99c                 | LR__4623
2d99c                 | ' 			}
2d99c                 | ' 		}
2d99c                 | ' 		;
2d99c                 | ' 	}
2d99c                 | ' 
2d99c                 | ' 	return res ;
2d99c     0C 4E 05 F1 | 	add	fp, #12
2d9a0     A7 FA 01 FB | 	rdlong	result1, fp
2d9a4     0C 4E 85 F1 | 	sub	fp, #12
2d9a8     A7 F0 03 F6 | 	mov	ptra, fp
2d9ac     B2 00 A0 FD | 	call	#popregs_
2d9b0                 | _fatfs_cc_f_stat_ret
2d9b0     2D 00 64 FD | 	ret
2d9b4                 | 
2d9b4                 | _fatfs_cc_f_unlink
2d9b4     00 4A 05 F6 | 	mov	COUNT_, #0
2d9b8     A8 00 A0 FD | 	call	#pushregs_
2d9bc     74 F0 07 F1 | 	add	ptra, #116
2d9c0     04 4E 05 F1 | 	add	fp, #4
2d9c4     A7 12 62 FC | 	wrlong	arg01, fp
2d9c8     68 4E 05 F1 | 	add	fp, #104
2d9cc     A7 00 68 FC | 	wrlong	#0, fp
2d9d0     68 4E 85 F1 | 	sub	fp, #104
2d9d4     A7 12 02 F6 | 	mov	arg01, fp
2d9d8     6C 4E 05 F1 | 	add	fp, #108
2d9dc     A7 14 02 F6 | 	mov	arg02, fp
2d9e0     70 4E 85 F1 | 	sub	fp, #112
2d9e4     02 16 06 F6 | 	mov	arg03, #2
2d9e8     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
2d9ec     08 4E 05 F1 | 	add	fp, #8
2d9f0     A7 FA 61 FC | 	wrlong	result1, fp
2d9f4     08 4E 85 F1 | 	sub	fp, #8
2d9f8     00 FA 0D F2 | 	cmp	result1, #0 wz
2d9fc     E4 01 90 5D |  if_ne	jmp	#LR__4638
2da00     70 4E 05 F1 | 	add	fp, #112
2da04     A7 16 02 FB | 	rdlong	arg03, fp
2da08     64 4E 85 F1 | 	sub	fp, #100
2da0c     A7 16 62 FC | 	wrlong	arg03, fp
2da10     A7 12 02 F6 | 	mov	arg01, fp
2da14     08 4E 85 F1 | 	sub	fp, #8
2da18     A7 14 02 FB | 	rdlong	arg02, fp
2da1c     04 4E 85 F1 | 	sub	fp, #4
2da20     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
2da24     08 4E 05 F1 | 	add	fp, #8
2da28     A7 FA 61 FC | 	wrlong	result1, fp
2da2c     00 FA 4D F2 | 	cmps	result1, #0 wz
2da30     08 4E 85 F1 | 	sub	fp, #8
2da34     AC 01 90 5D |  if_ne	jmp	#LR__4637
2da38     37 4E 05 F1 | 	add	fp, #55
2da3c     A7 FA C1 FA | 	rdbyte	result1, fp
2da40     37 4E 85 F1 | 	sub	fp, #55
2da44     80 FA CD F7 | 	test	result1, #128 wz
2da48     08 4E 05 51 |  if_ne	add	fp, #8
2da4c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2da50     08 4E 85 51 |  if_ne	sub	fp, #8
2da54     1C 00 90 5D |  if_ne	jmp	#LR__4630
2da58     12 4E 05 F1 | 	add	fp, #18
2da5c     A7 FA C1 FA | 	rdbyte	result1, fp
2da60     12 4E 85 F1 | 	sub	fp, #18
2da64     01 FA CD F7 | 	test	result1, #1 wz
2da68     08 4E 05 51 |  if_ne	add	fp, #8
2da6c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2da70     08 4E 85 51 |  if_ne	sub	fp, #8
2da74                 | LR__4630
2da74     08 4E 05 F1 | 	add	fp, #8
2da78     A7 FA 09 FB | 	rdlong	result1, fp wz
2da7c     08 4E 85 F1 | 	sub	fp, #8
2da80     C8 00 90 5D |  if_ne	jmp	#LR__4633
2da84     70 4E 05 F1 | 	add	fp, #112
2da88     A7 12 02 FB | 	rdlong	arg01, fp
2da8c     48 4E 85 F1 | 	sub	fp, #72
2da90     A7 14 02 FB | 	rdlong	arg02, fp
2da94     28 4E 85 F1 | 	sub	fp, #40
2da98     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
2da9c     6C 4E 05 F1 | 	add	fp, #108
2daa0     A7 FA 61 FC | 	wrlong	result1, fp
2daa4     5A 4E 85 F1 | 	sub	fp, #90
2daa8     A7 FA C1 FA | 	rdbyte	result1, fp
2daac     12 4E 85 F1 | 	sub	fp, #18
2dab0     10 FA CD F7 | 	test	result1, #16 wz
2dab4     94 00 90 AD |  if_e	jmp	#LR__4632
2dab8     70 4E 05 F1 | 	add	fp, #112
2dabc     A7 FA 01 FB | 	rdlong	result1, fp
2dac0     34 4E 85 F1 | 	sub	fp, #52
2dac4     A7 FA 61 FC | 	wrlong	result1, fp
2dac8     30 4E 05 F1 | 	add	fp, #48
2dacc     A7 16 02 FB | 	rdlong	arg03, fp
2dad0     28 4E 85 F1 | 	sub	fp, #40
2dad4     A7 16 62 FC | 	wrlong	arg03, fp
2dad8     08 4E 85 F1 | 	sub	fp, #8
2dadc     A7 12 02 F6 | 	mov	arg01, fp
2dae0     3C 4E 85 F1 | 	sub	fp, #60
2dae4     00 14 06 F6 | 	mov	arg02, #0
2dae8     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
2daec     08 4E 05 F1 | 	add	fp, #8
2daf0     A7 FA 61 FC | 	wrlong	result1, fp
2daf4     08 4E 85 F1 | 	sub	fp, #8
2daf8     00 FA 0D F2 | 	cmp	result1, #0 wz
2dafc     4C 00 90 5D |  if_ne	jmp	#LR__4631
2db00     3C 4E 05 F1 | 	add	fp, #60
2db04     A7 12 02 F6 | 	mov	arg01, fp
2db08     3C 4E 85 F1 | 	sub	fp, #60
2db0c     00 14 06 F6 | 	mov	arg02, #0
2db10     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
2db14     08 4E 05 F1 | 	add	fp, #8
2db18     A7 FA 61 FC | 	wrlong	result1, fp
2db1c     00 FA 4D F2 | 	cmps	result1, #0 wz
2db20     08 4E 85 F1 | 	sub	fp, #8
2db24     08 4E 05 A1 |  if_e	add	fp, #8
2db28     A7 0E 68 AC |  if_e	wrlong	#7, fp
2db2c     08 4E 85 A1 |  if_e	sub	fp, #8
2db30     08 4E 05 F1 | 	add	fp, #8
2db34     A7 FA 01 FB | 	rdlong	result1, fp
2db38     08 4E 85 F1 | 	sub	fp, #8
2db3c     04 FA 0D F2 | 	cmp	result1, #4 wz
2db40     08 4E 05 A1 |  if_e	add	fp, #8
2db44     A7 00 68 AC |  if_e	wrlong	#0, fp
2db48     08 4E 85 A1 |  if_e	sub	fp, #8
2db4c                 | LR__4631
2db4c                 | LR__4632
2db4c                 | LR__4633
2db4c     08 4E 05 F1 | 	add	fp, #8
2db50     A7 FA 09 FB | 	rdlong	result1, fp wz
2db54     08 4E 85 F1 | 	sub	fp, #8
2db58     88 00 90 5D |  if_ne	jmp	#LR__4636
2db5c     0C 4E 05 F1 | 	add	fp, #12
2db60     A7 12 02 F6 | 	mov	arg01, fp
2db64     0C 4E 85 F1 | 	sub	fp, #12
2db68     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
2db6c     08 4E 05 F1 | 	add	fp, #8
2db70     A7 FA 61 FC | 	wrlong	result1, fp
2db74     08 4E 85 F1 | 	sub	fp, #8
2db78     00 FA 0D F2 | 	cmp	result1, #0 wz
2db7c     38 00 90 5D |  if_ne	jmp	#LR__4634
2db80     6C 4E 05 F1 | 	add	fp, #108
2db84     A7 FA 09 FB | 	rdlong	result1, fp wz
2db88     6C 4E 85 F1 | 	sub	fp, #108
2db8c     28 00 90 AD |  if_e	jmp	#LR__4634
2db90     0C 4E 05 F1 | 	add	fp, #12
2db94     A7 12 02 F6 | 	mov	arg01, fp
2db98     60 4E 05 F1 | 	add	fp, #96
2db9c     A7 14 02 FB | 	rdlong	arg02, fp
2dba0     6C 4E 85 F1 | 	sub	fp, #108
2dba4     00 16 06 F6 | 	mov	arg03, #0
2dba8     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
2dbac     08 4E 05 F1 | 	add	fp, #8
2dbb0     A7 FA 61 FC | 	wrlong	result1, fp
2dbb4     08 4E 85 F1 | 	sub	fp, #8
2dbb8                 | LR__4634
2dbb8     08 4E 05 F1 | 	add	fp, #8
2dbbc     A7 FA 09 FB | 	rdlong	result1, fp wz
2dbc0     08 4E 85 F1 | 	sub	fp, #8
2dbc4     1C 00 90 5D |  if_ne	jmp	#LR__4635
2dbc8     70 4E 05 F1 | 	add	fp, #112
2dbcc     A7 12 02 FB | 	rdlong	arg01, fp
2dbd0     70 4E 85 F1 | 	sub	fp, #112
2dbd4     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
2dbd8     08 4E 05 F1 | 	add	fp, #8
2dbdc     A7 FA 61 FC | 	wrlong	result1, fp
2dbe0     08 4E 85 F1 | 	sub	fp, #8
2dbe4                 | LR__4635
2dbe4                 | LR__4636
2dbe4                 | LR__4637
2dbe4                 | LR__4638
2dbe4                 | ' 			}
2dbe4                 | ' 		}
2dbe4                 | ' 		;
2dbe4                 | ' 	}
2dbe4                 | ' 
2dbe4                 | ' 	return res ;
2dbe4     08 4E 05 F1 | 	add	fp, #8
2dbe8     A7 FA 01 FB | 	rdlong	result1, fp
2dbec     08 4E 85 F1 | 	sub	fp, #8
2dbf0     A7 F0 03 F6 | 	mov	ptra, fp
2dbf4     B2 00 A0 FD | 	call	#popregs_
2dbf8                 | _fatfs_cc_f_unlink_ret
2dbf8     2D 00 64 FD | 	ret
2dbfc                 | 
2dbfc                 | _fatfs_cc_f_mkdir
2dbfc     00 4A 05 F6 | 	mov	COUNT_, #0
2dc00     A8 00 A0 FD | 	call	#pushregs_
2dc04     5C F0 07 F1 | 	add	ptra, #92
2dc08     04 4E 05 F1 | 	add	fp, #4
2dc0c     A7 12 62 FC | 	wrlong	arg01, fp
2dc10     A7 12 02 F6 | 	mov	arg01, fp
2dc14     48 4E 05 F1 | 	add	fp, #72
2dc18     A7 14 02 F6 | 	mov	arg02, fp
2dc1c     4C 4E 85 F1 | 	sub	fp, #76
2dc20     02 16 06 F6 | 	mov	arg03, #2
2dc24     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
2dc28     08 4E 05 F1 | 	add	fp, #8
2dc2c     A7 FA 61 FC | 	wrlong	result1, fp
2dc30     08 4E 85 F1 | 	sub	fp, #8
2dc34     00 FA 0D F2 | 	cmp	result1, #0 wz
2dc38     C4 02 90 5D |  if_ne	jmp	#LR__4645
2dc3c     4C 4E 05 F1 | 	add	fp, #76
2dc40     A7 16 02 FB | 	rdlong	arg03, fp
2dc44     40 4E 85 F1 | 	sub	fp, #64
2dc48     A7 16 62 FC | 	wrlong	arg03, fp
2dc4c     A7 12 02 F6 | 	mov	arg01, fp
2dc50     08 4E 85 F1 | 	sub	fp, #8
2dc54     A7 14 02 FB | 	rdlong	arg02, fp
2dc58     04 4E 85 F1 | 	sub	fp, #4
2dc5c     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2dc60     08 4E 05 F1 | 	add	fp, #8
2dc64     A7 FA 61 FC | 	wrlong	result1, fp
2dc68     00 FA 4D F2 | 	cmps	result1, #0 wz
2dc6c     08 4E 85 F1 | 	sub	fp, #8
2dc70     08 4E 05 A1 |  if_e	add	fp, #8
2dc74     A7 10 68 AC |  if_e	wrlong	#8, fp
2dc78     08 4E 85 A1 |  if_e	sub	fp, #8
2dc7c     08 4E 05 F1 | 	add	fp, #8
2dc80     A7 FA 01 FB | 	rdlong	result1, fp
2dc84     08 4E 85 F1 | 	sub	fp, #8
2dc88     04 FA 0D F2 | 	cmp	result1, #4 wz
2dc8c     70 02 90 5D |  if_ne	jmp	#LR__4644
2dc90     4C 4E 05 F1 | 	add	fp, #76
2dc94     A7 16 02 FB | 	rdlong	arg03, fp
2dc98     10 4E 85 F1 | 	sub	fp, #16
2dc9c     A7 16 62 FC | 	wrlong	arg03, fp
2dca0     A7 12 02 F6 | 	mov	arg01, fp
2dca4     3C 4E 85 F1 | 	sub	fp, #60
2dca8     00 14 06 F6 | 	mov	arg02, #0
2dcac     04 AC BF FD | 	call	#_fatfs_cc_create_chain
2dcb0     50 4E 05 F1 | 	add	fp, #80
2dcb4     A7 FA 61 FC | 	wrlong	result1, fp
2dcb8     48 4E 85 F1 | 	sub	fp, #72
2dcbc     A7 00 68 FC | 	wrlong	#0, fp
2dcc0     48 4E 05 F1 | 	add	fp, #72
2dcc4     A7 FA 09 FB | 	rdlong	result1, fp wz
2dcc8     50 4E 85 F1 | 	sub	fp, #80
2dccc     08 4E 05 A1 |  if_e	add	fp, #8
2dcd0     A7 0E 68 AC |  if_e	wrlong	#7, fp
2dcd4     08 4E 85 A1 |  if_e	sub	fp, #8
2dcd8     50 4E 05 F1 | 	add	fp, #80
2dcdc     A7 FA 01 FB | 	rdlong	result1, fp
2dce0     50 4E 85 F1 | 	sub	fp, #80
2dce4     01 FA 0D F2 | 	cmp	result1, #1 wz
2dce8     08 4E 05 A1 |  if_e	add	fp, #8
2dcec     A7 04 68 AC |  if_e	wrlong	#2, fp
2dcf0     08 4E 85 A1 |  if_e	sub	fp, #8
2dcf4     50 4E 05 F1 | 	add	fp, #80
2dcf8     A7 16 02 FB | 	rdlong	arg03, fp
2dcfc     50 4E 85 F1 | 	sub	fp, #80
2dd00     FF FF 7F FF 
2dd04     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2dd08     08 4E 05 A1 |  if_e	add	fp, #8
2dd0c     A7 02 68 AC |  if_e	wrlong	#1, fp
2dd10     08 4E 85 A1 |  if_e	sub	fp, #8
2dd14     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
2dd18     58 4E 05 F1 | 	add	fp, #88
2dd1c     A7 FA 61 FC | 	wrlong	result1, fp
2dd20     50 4E 85 F1 | 	sub	fp, #80
2dd24     A7 FA 09 FB | 	rdlong	result1, fp wz
2dd28     08 4E 85 F1 | 	sub	fp, #8
2dd2c     1C 01 90 5D |  if_ne	jmp	#LR__4641
2dd30     4C 4E 05 F1 | 	add	fp, #76
2dd34     A7 12 02 FB | 	rdlong	arg01, fp
2dd38     04 4E 05 F1 | 	add	fp, #4
2dd3c     A7 14 02 FB | 	rdlong	arg02, fp
2dd40     50 4E 85 F1 | 	sub	fp, #80
2dd44     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
2dd48     08 4E 05 F1 | 	add	fp, #8
2dd4c     A7 FA 61 FC | 	wrlong	result1, fp
2dd50     00 FA 4D F2 | 	cmps	result1, #0 wz
2dd54     08 4E 85 F1 | 	sub	fp, #8
2dd58     F0 00 90 5D |  if_ne	jmp	#LR__4640
2dd5c     4C 4E 05 F1 | 	add	fp, #76
2dd60     A7 12 02 FB | 	rdlong	arg01, fp
2dd64     4C 4E 85 F1 | 	sub	fp, #76
2dd68     34 12 06 F1 | 	add	arg01, #52
2dd6c     20 14 06 F6 | 	mov	arg02, #32
2dd70     0B 16 06 F6 | 	mov	arg03, #11
2dd74     98 00 A0 FD | 	call	#\builtin_bytefill_
2dd78     4C 4E 05 F1 | 	add	fp, #76
2dd7c     A7 FA 01 FB | 	rdlong	result1, fp
2dd80     34 FA 05 F1 | 	add	result1, #52
2dd84     FD 5C 48 FC | 	wrbyte	#46, result1
2dd88     A7 16 02 FB | 	rdlong	arg03, fp
2dd8c     3F 16 06 F1 | 	add	arg03, #63
2dd90     0B 21 48 FC | 	wrbyte	#16, arg03
2dd94     A7 12 02 FB | 	rdlong	arg01, fp
2dd98     4A 12 06 F1 | 	add	arg01, #74
2dd9c     0C 4E 05 F1 | 	add	fp, #12
2dda0     A7 14 02 FB | 	rdlong	arg02, fp
2dda4     09 15 62 FC | 	wrlong	arg02, arg01
2dda8     0C 4E 85 F1 | 	sub	fp, #12
2ddac     A7 14 02 FB | 	rdlong	arg02, fp
2ddb0     0A 13 02 F6 | 	mov	arg01, arg02
2ddb4     34 14 06 F1 | 	add	arg02, #52
2ddb8     04 4E 05 F1 | 	add	fp, #4
2ddbc     A7 16 02 FB | 	rdlong	arg03, fp
2ddc0     50 4E 85 F1 | 	sub	fp, #80
2ddc4     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
2ddc8     4C 4E 05 F1 | 	add	fp, #76
2ddcc     A7 14 02 FB | 	rdlong	arg02, fp
2ddd0     0A 13 02 F6 | 	mov	arg01, arg02
2ddd4     54 12 06 F1 | 	add	arg01, #84
2ddd8     4C 4E 85 F1 | 	sub	fp, #76
2dddc     34 14 06 F1 | 	add	arg02, #52
2dde0     20 16 06 F6 | 	mov	arg03, #32
2dde4     60 2A BF FD | 	call	#__system____builtin_memmove
2dde8     4C 4E 05 F1 | 	add	fp, #76
2ddec     A7 16 02 FB | 	rdlong	arg03, fp
2ddf0     55 16 06 F1 | 	add	arg03, #85
2ddf4     0B 5D 48 FC | 	wrbyte	#46, arg03
2ddf8     38 4E 85 F1 | 	sub	fp, #56
2ddfc     A7 16 02 FB | 	rdlong	arg03, fp
2de00     40 4E 05 F1 | 	add	fp, #64
2de04     A7 16 62 FC | 	wrlong	arg03, fp
2de08     08 4E 85 F1 | 	sub	fp, #8
2de0c     A7 14 02 FB | 	rdlong	arg02, fp
2de10     0A 13 02 F6 | 	mov	arg01, arg02
2de14     54 14 06 F1 | 	add	arg02, #84
2de18     4C 4E 85 F1 | 	sub	fp, #76
2de1c     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
2de20     4C 4E 05 F1 | 	add	fp, #76
2de24     A7 16 02 FB | 	rdlong	arg03, fp
2de28     03 16 06 F1 | 	add	arg03, #3
2de2c     0B 03 48 FC | 	wrbyte	#1, arg03
2de30     40 4E 85 F1 | 	sub	fp, #64
2de34     A7 12 02 F6 | 	mov	arg01, fp
2de38     0C 4E 85 F1 | 	sub	fp, #12
2de3c     44 BA BF FD | 	call	#_fatfs_cc_dir_register
2de40     08 4E 05 F1 | 	add	fp, #8
2de44     A7 FA 61 FC | 	wrlong	result1, fp
2de48     08 4E 85 F1 | 	sub	fp, #8
2de4c                 | LR__4640
2de4c                 | LR__4641
2de4c     08 4E 05 F1 | 	add	fp, #8
2de50     A7 FA 09 FB | 	rdlong	result1, fp wz
2de54     08 4E 85 F1 | 	sub	fp, #8
2de58     88 00 90 5D |  if_ne	jmp	#LR__4642
2de5c     28 4E 05 F1 | 	add	fp, #40
2de60     A7 12 02 FB | 	rdlong	arg01, fp
2de64     16 12 06 F1 | 	add	arg01, #22
2de68     30 4E 05 F1 | 	add	fp, #48
2de6c     A7 14 02 FB | 	rdlong	arg02, fp
2de70     09 15 62 FC | 	wrlong	arg02, arg01
2de74     0C 4E 85 F1 | 	sub	fp, #12
2de78     A7 12 02 FB | 	rdlong	arg01, fp
2de7c     24 4E 85 F1 | 	sub	fp, #36
2de80     A7 14 02 FB | 	rdlong	arg02, fp
2de84     28 4E 05 F1 | 	add	fp, #40
2de88     A7 16 02 FB | 	rdlong	arg03, fp
2de8c     50 4E 85 F1 | 	sub	fp, #80
2de90     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
2de94     28 4E 05 F1 | 	add	fp, #40
2de98     A7 FA 01 FB | 	rdlong	result1, fp
2de9c     0B FA 05 F1 | 	add	result1, #11
2dea0     FD 20 48 FC | 	wrbyte	#16, result1
2dea4     24 4E 05 F1 | 	add	fp, #36
2dea8     A7 FA 01 FB | 	rdlong	result1, fp
2deac     03 FA 05 F1 | 	add	result1, #3
2deb0     FD 02 48 FC | 	wrbyte	#1, result1
2deb4     44 4E 85 F1 | 	sub	fp, #68
2deb8     A7 FA 09 FB | 	rdlong	result1, fp wz
2debc     08 4E 85 F1 | 	sub	fp, #8
2dec0     3C 00 90 5D |  if_ne	jmp	#LR__4643
2dec4     4C 4E 05 F1 | 	add	fp, #76
2dec8     A7 12 02 FB | 	rdlong	arg01, fp
2decc     4C 4E 85 F1 | 	sub	fp, #76
2ded0     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
2ded4     08 4E 05 F1 | 	add	fp, #8
2ded8     A7 FA 61 FC | 	wrlong	result1, fp
2dedc     08 4E 85 F1 | 	sub	fp, #8
2dee0     1C 00 90 FD | 	jmp	#LR__4643
2dee4                 | LR__4642
2dee4     3C 4E 05 F1 | 	add	fp, #60
2dee8     A7 12 02 F6 | 	mov	arg01, fp
2deec     14 4E 05 F1 | 	add	fp, #20
2def0     A7 14 02 FB | 	rdlong	arg02, fp
2def4     50 4E 85 F1 | 	sub	fp, #80
2def8     00 16 06 F6 | 	mov	arg03, #0
2defc     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2df00                 | LR__4643
2df00                 | LR__4644
2df00                 | LR__4645
2df00                 | ' 				remove_chain(&sobj, dcl, 0);
2df00                 | ' 			}
2df00                 | ' 		}
2df00                 | ' 		;
2df00                 | ' 	}
2df00                 | ' 
2df00                 | ' 	return res ;
2df00     08 4E 05 F1 | 	add	fp, #8
2df04     A7 FA 01 FB | 	rdlong	result1, fp
2df08     08 4E 85 F1 | 	sub	fp, #8
2df0c     A7 F0 03 F6 | 	mov	ptra, fp
2df10     B2 00 A0 FD | 	call	#popregs_
2df14                 | _fatfs_cc_f_mkdir_ret
2df14     2D 00 64 FD | 	ret
2df18                 | 
2df18                 | _fatfs_cc_f_rename
2df18     01 4A 05 F6 | 	mov	COUNT_, #1
2df1c     A8 00 A0 FD | 	call	#pushregs_
2df20     9C F0 07 F1 | 	add	ptra, #156
2df24     04 4E 05 F1 | 	add	fp, #4
2df28     A7 12 62 FC | 	wrlong	arg01, fp
2df2c     04 4E 05 F1 | 	add	fp, #4
2df30     A7 14 62 FC | 	wrlong	arg02, fp
2df34     A7 12 02 F6 | 	mov	arg01, fp
2df38     08 4E 85 F1 | 	sub	fp, #8
2df3c     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2df40     04 4E 05 F1 | 	add	fp, #4
2df44     A7 12 02 F6 | 	mov	arg01, fp
2df48     6C 4E 05 F1 | 	add	fp, #108
2df4c     A7 14 02 F6 | 	mov	arg02, fp
2df50     70 4E 85 F1 | 	sub	fp, #112
2df54     02 16 06 F6 | 	mov	arg03, #2
2df58     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2df5c     0C 4E 05 F1 | 	add	fp, #12
2df60     A7 FA 61 FC | 	wrlong	result1, fp
2df64     0C 4E 85 F1 | 	sub	fp, #12
2df68     00 FA 0D F2 | 	cmp	result1, #0 wz
2df6c     44 03 90 5D |  if_ne	jmp	#LR__4663
2df70     70 4E 05 F1 | 	add	fp, #112
2df74     A7 16 02 FB | 	rdlong	arg03, fp
2df78     60 4E 85 F1 | 	sub	fp, #96
2df7c     A7 16 62 FC | 	wrlong	arg03, fp
2df80     A7 12 02 F6 | 	mov	arg01, fp
2df84     0C 4E 85 F1 | 	sub	fp, #12
2df88     A7 14 02 FB | 	rdlong	arg02, fp
2df8c     04 4E 85 F1 | 	sub	fp, #4
2df90     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
2df94     0C 4E 05 F1 | 	add	fp, #12
2df98     A7 FA 61 FC | 	wrlong	result1, fp
2df9c     00 FA 4D F2 | 	cmps	result1, #0 wz
2dfa0     0C 4E 85 F1 | 	sub	fp, #12
2dfa4     1C 00 90 5D |  if_ne	jmp	#LR__4650
2dfa8     3B 4E 05 F1 | 	add	fp, #59
2dfac     A7 FA C1 FA | 	rdbyte	result1, fp
2dfb0     3B 4E 85 F1 | 	sub	fp, #59
2dfb4     A0 FA CD F7 | 	test	result1, #160 wz
2dfb8     0C 4E 05 51 |  if_ne	add	fp, #12
2dfbc     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2dfc0     0C 4E 85 51 |  if_ne	sub	fp, #12
2dfc4                 | LR__4650
2dfc4     0C 4E 05 F1 | 	add	fp, #12
2dfc8     A7 1E 0A FB | 	rdlong	local01, fp wz
2dfcc     0C 4E 85 F1 | 	sub	fp, #12
2dfd0     E0 02 90 5D |  if_ne	jmp	#LR__4662
2dfd4     74 4E 05 F1 | 	add	fp, #116
2dfd8     A7 12 02 F6 | 	mov	arg01, fp
2dfdc     48 4E 85 F1 | 	sub	fp, #72
2dfe0     A7 14 02 FB | 	rdlong	arg02, fp
2dfe4     2C 4E 85 F1 | 	sub	fp, #44
2dfe8     20 16 06 F6 | 	mov	arg03, #32
2dfec     58 28 BF FD | 	call	#__system____builtin_memmove
2dff0     40 4E 05 F1 | 	add	fp, #64
2dff4     A7 12 02 F6 | 	mov	arg01, fp
2dff8     30 4E 85 F1 | 	sub	fp, #48
2dffc     A7 14 02 F6 | 	mov	arg02, fp
2e000     10 4E 85 F1 | 	sub	fp, #16
2e004     30 16 06 F6 | 	mov	arg03, #48
2e008     3C 28 BF FD | 	call	#__system____builtin_memmove
2e00c     40 4E 05 F1 | 	add	fp, #64
2e010     A7 12 02 F6 | 	mov	arg01, fp
2e014     38 4E 85 F1 | 	sub	fp, #56
2e018     A7 14 02 FB | 	rdlong	arg02, fp
2e01c     08 4E 85 F1 | 	sub	fp, #8
2e020     34 CA BF FD | 	call	#_fatfs_cc_follow_path
2e024     0C 4E 05 F1 | 	add	fp, #12
2e028     A7 FA 61 FC | 	wrlong	result1, fp
2e02c     0C 4E 85 F1 | 	sub	fp, #12
2e030     00 FA 0D F2 | 	cmp	result1, #0 wz
2e034     4C 00 90 5D |  if_ne	jmp	#LR__4653
2e038     48 4E 05 F1 | 	add	fp, #72
2e03c     A7 FA 01 FB | 	rdlong	result1, fp
2e040     30 4E 85 F1 | 	sub	fp, #48
2e044     A7 16 02 FB | 	rdlong	arg03, fp
2e048     18 4E 85 F1 | 	sub	fp, #24
2e04c     0B FB 09 F2 | 	cmp	result1, arg03 wz
2e050     20 00 90 5D |  if_ne	jmp	#LR__4651
2e054     50 4E 05 F1 | 	add	fp, #80
2e058     A7 FA 01 FB | 	rdlong	result1, fp
2e05c     30 4E 85 F1 | 	sub	fp, #48
2e060     A7 16 02 FB | 	rdlong	arg03, fp
2e064     20 4E 85 F1 | 	sub	fp, #32
2e068     0B FB 09 F2 | 	cmp	result1, arg03 wz
2e06c     04 1E 06 A6 |  if_e	mov	local01, #4
2e070     04 00 90 AD |  if_e	jmp	#LR__4652
2e074                 | LR__4651
2e074     08 1E 06 F6 | 	mov	local01, #8
2e078                 | LR__4652
2e078     0C 4E 05 F1 | 	add	fp, #12
2e07c     A7 1E 62 FC | 	wrlong	local01, fp
2e080     0C 4E 85 F1 | 	sub	fp, #12
2e084                 | LR__4653
2e084     0C 4E 05 F1 | 	add	fp, #12
2e088     A7 1E 02 FB | 	rdlong	local01, fp
2e08c     0C 4E 85 F1 | 	sub	fp, #12
2e090     04 1E 0E F2 | 	cmp	local01, #4 wz
2e094     CC 01 90 5D |  if_ne	jmp	#LR__4659
2e098     40 4E 05 F1 | 	add	fp, #64
2e09c     A7 12 02 F6 | 	mov	arg01, fp
2e0a0     40 4E 85 F1 | 	sub	fp, #64
2e0a4     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
2e0a8     0C 4E 05 F1 | 	add	fp, #12
2e0ac     A7 FA 61 FC | 	wrlong	result1, fp
2e0b0     0C 4E 85 F1 | 	sub	fp, #12
2e0b4     00 FA 0D F2 | 	cmp	result1, #0 wz
2e0b8     A8 01 90 5D |  if_ne	jmp	#LR__4658
2e0bc     5C 4E 05 F1 | 	add	fp, #92
2e0c0     A7 12 02 FB | 	rdlong	arg01, fp
2e0c4     38 4E 05 F1 | 	add	fp, #56
2e0c8     A7 12 62 FC | 	wrlong	arg01, fp
2e0cc     0D 12 06 F1 | 	add	arg01, #13
2e0d0     20 4E 85 F1 | 	sub	fp, #32
2e0d4     A7 14 02 F6 | 	mov	arg02, fp
2e0d8     74 4E 85 F1 | 	sub	fp, #116
2e0dc     0D 14 06 F1 | 	add	arg02, #13
2e0e0     13 16 06 F6 | 	mov	arg03, #19
2e0e4     60 27 BF FD | 	call	#__system____builtin_memmove
2e0e8     94 4E 05 F1 | 	add	fp, #148
2e0ec     A7 1E 02 FB | 	rdlong	local01, fp
2e0f0     15 4E 85 F1 | 	sub	fp, #21
2e0f4     A7 FA C1 FA | 	rdbyte	result1, fp
2e0f8     0B 1E 06 F1 | 	add	local01, #11
2e0fc     0F FB 41 FC | 	wrbyte	result1, local01
2e100     15 4E 05 F1 | 	add	fp, #21
2e104     A7 1E 02 FB | 	rdlong	local01, fp
2e108     94 4E 85 F1 | 	sub	fp, #148
2e10c     0B 1E 06 F1 | 	add	local01, #11
2e110     0F 1F C2 FA | 	rdbyte	local01, local01
2e114     10 1E CE F7 | 	test	local01, #16 wz
2e118     24 00 90 5D |  if_ne	jmp	#LR__4654
2e11c     94 4E 05 F1 | 	add	fp, #148
2e120     A7 FA 01 FB | 	rdlong	result1, fp
2e124     FD 1E 02 F6 | 	mov	local01, result1
2e128     94 4E 85 F1 | 	sub	fp, #148
2e12c     0B FA 05 F1 | 	add	result1, #11
2e130     FD FA C1 FA | 	rdbyte	result1, result1
2e134     20 FA 45 F5 | 	or	result1, #32
2e138     0B 1E 06 F1 | 	add	local01, #11
2e13c     0F FB 41 FC | 	wrbyte	result1, local01
2e140                 | LR__4654
2e140     70 4E 05 F1 | 	add	fp, #112
2e144     A7 1E 02 FB | 	rdlong	local01, fp
2e148     03 1E 06 F1 | 	add	local01, #3
2e14c     0F 03 48 FC | 	wrbyte	#1, local01
2e150     24 4E 05 F1 | 	add	fp, #36
2e154     A7 1E 02 FB | 	rdlong	local01, fp
2e158     94 4E 85 F1 | 	sub	fp, #148
2e15c     0B 1E 06 F1 | 	add	local01, #11
2e160     0F 1F C2 FA | 	rdbyte	local01, local01
2e164     10 1E CE F7 | 	test	local01, #16 wz
2e168     F8 00 90 AD |  if_e	jmp	#LR__4657
2e16c     18 4E 05 F1 | 	add	fp, #24
2e170     A7 16 02 FB | 	rdlong	arg03, fp
2e174     30 4E 05 F1 | 	add	fp, #48
2e178     A7 1E 02 FB | 	rdlong	local01, fp
2e17c     48 4E 85 F1 | 	sub	fp, #72
2e180     0F 17 0A F2 | 	cmp	arg03, local01 wz
2e184     DC 00 90 AD |  if_e	jmp	#LR__4657
2e188     70 4E 05 F1 | 	add	fp, #112
2e18c     A7 12 02 FB | 	rdlong	arg01, fp
2e190     09 1F 02 F6 | 	mov	local01, arg01
2e194     24 4E 05 F1 | 	add	fp, #36
2e198     A7 14 02 FB | 	rdlong	arg02, fp
2e19c     94 4E 85 F1 | 	sub	fp, #148
2e1a0     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
2e1a4     FD 14 02 F6 | 	mov	arg02, result1
2e1a8     0F 13 02 F6 | 	mov	arg01, local01
2e1ac     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
2e1b0     98 4E 05 F1 | 	add	fp, #152
2e1b4     A7 FA 61 FC | 	wrlong	result1, fp
2e1b8     00 FA 4D F2 | 	cmps	result1, #0 wz
2e1bc     98 4E 85 F1 | 	sub	fp, #152
2e1c0     0C 4E 05 A1 |  if_e	add	fp, #12
2e1c4     A7 04 68 AC |  if_e	wrlong	#2, fp
2e1c8     0C 4E 85 A1 |  if_e	sub	fp, #12
2e1cc     94 00 90 AD |  if_e	jmp	#LR__4656
2e1d0     70 4E 05 F1 | 	add	fp, #112
2e1d4     A7 12 02 FB | 	rdlong	arg01, fp
2e1d8     28 4E 05 F1 | 	add	fp, #40
2e1dc     A7 14 02 FB | 	rdlong	arg02, fp
2e1e0     98 4E 85 F1 | 	sub	fp, #152
2e1e4     4C A0 BF FD | 	call	#_fatfs_cc_move_window
2e1e8     0C 4E 05 F1 | 	add	fp, #12
2e1ec     A7 FA 61 FC | 	wrlong	result1, fp
2e1f0     64 4E 05 F1 | 	add	fp, #100
2e1f4     A7 1E 02 FB | 	rdlong	local01, fp
2e1f8     54 1E 06 F1 | 	add	local01, #84
2e1fc     24 4E 05 F1 | 	add	fp, #36
2e200     A7 1E 62 FC | 	wrlong	local01, fp
2e204     88 4E 85 F1 | 	sub	fp, #136
2e208     A7 1E 0A FB | 	rdlong	local01, fp wz
2e20c     0C 4E 85 F1 | 	sub	fp, #12
2e210     50 00 90 5D |  if_ne	jmp	#LR__4655
2e214     94 4E 05 F1 | 	add	fp, #148
2e218     A7 1E 02 FB | 	rdlong	local01, fp
2e21c     94 4E 85 F1 | 	sub	fp, #148
2e220     01 1E 06 F1 | 	add	local01, #1
2e224     0F 1F C2 FA | 	rdbyte	local01, local01
2e228     2E 1E 0E F2 | 	cmp	local01, #46 wz
2e22c     34 00 90 5D |  if_ne	jmp	#LR__4655
2e230     70 4E 05 F1 | 	add	fp, #112
2e234     A7 12 02 FB | 	rdlong	arg01, fp
2e238     24 4E 05 F1 | 	add	fp, #36
2e23c     A7 14 02 FB | 	rdlong	arg02, fp
2e240     4C 4E 85 F1 | 	sub	fp, #76
2e244     A7 16 02 FB | 	rdlong	arg03, fp
2e248     48 4E 85 F1 | 	sub	fp, #72
2e24c     50 AD BF FD | 	call	#_fatfs_cc_st_clust
2e250     70 4E 05 F1 | 	add	fp, #112
2e254     A7 1E 02 FB | 	rdlong	local01, fp
2e258     70 4E 85 F1 | 	sub	fp, #112
2e25c     03 1E 06 F1 | 	add	local01, #3
2e260     0F 03 48 FC | 	wrbyte	#1, local01
2e264                 | LR__4655
2e264                 | LR__4656
2e264                 | LR__4657
2e264                 | LR__4658
2e264                 | LR__4659
2e264     0C 4E 05 F1 | 	add	fp, #12
2e268     A7 1E 0A FB | 	rdlong	local01, fp wz
2e26c     0C 4E 85 F1 | 	sub	fp, #12
2e270     40 00 90 5D |  if_ne	jmp	#LR__4661
2e274     10 4E 05 F1 | 	add	fp, #16
2e278     A7 12 02 F6 | 	mov	arg01, fp
2e27c     10 4E 85 F1 | 	sub	fp, #16
2e280     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
2e284     0C 4E 05 F1 | 	add	fp, #12
2e288     A7 FA 61 FC | 	wrlong	result1, fp
2e28c     0C 4E 85 F1 | 	sub	fp, #12
2e290     00 FA 0D F2 | 	cmp	result1, #0 wz
2e294     1C 00 90 5D |  if_ne	jmp	#LR__4660
2e298     70 4E 05 F1 | 	add	fp, #112
2e29c     A7 12 02 FB | 	rdlong	arg01, fp
2e2a0     70 4E 85 F1 | 	sub	fp, #112
2e2a4     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
2e2a8     0C 4E 05 F1 | 	add	fp, #12
2e2ac     A7 FA 61 FC | 	wrlong	result1, fp
2e2b0     0C 4E 85 F1 | 	sub	fp, #12
2e2b4                 | LR__4660
2e2b4                 | LR__4661
2e2b4                 | LR__4662
2e2b4                 | LR__4663
2e2b4                 | ' 					res = sync_fs(fs);
2e2b4                 | ' 				}
2e2b4                 | ' 			}
2e2b4                 | ' 
2e2b4                 | ' 		}
2e2b4                 | ' 		;
2e2b4                 | ' 	}
2e2b4                 | ' 
2e2b4                 | ' 	return res ;
2e2b4     0C 4E 05 F1 | 	add	fp, #12
2e2b8     A7 FA 01 FB | 	rdlong	result1, fp
2e2bc     0C 4E 85 F1 | 	sub	fp, #12
2e2c0     A7 F0 03 F6 | 	mov	ptra, fp
2e2c4     B2 00 A0 FD | 	call	#popregs_
2e2c8                 | _fatfs_cc_f_rename_ret
2e2c8     2D 00 64 FD | 	ret
2e2cc                 | 
2e2cc                 | _fatfs_cc_time
2e2cc     00 4A 05 F6 | 	mov	COUNT_, #0
2e2d0     A8 00 A0 FD | 	call	#pushregs_
2e2d4     14 F0 07 F1 | 	add	ptra, #20
2e2d8     04 4E 05 F1 | 	add	fp, #4
2e2dc     A7 12 62 FC | 	wrlong	arg01, fp
2e2e0     04 4E 05 F1 | 	add	fp, #4
2e2e4     A7 12 02 F6 | 	mov	arg01, fp
2e2e8     08 4E 85 F1 | 	sub	fp, #8
2e2ec     00 14 06 F6 | 	mov	arg02, #0
2e2f0     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
2e2f4     08 4E 05 F1 | 	add	fp, #8
2e2f8     A7 FA 01 FB | 	rdlong	result1, fp
2e2fc     08 4E 05 F1 | 	add	fp, #8
2e300     A7 FA 61 FC | 	wrlong	result1, fp
2e304     0C 4E 85 F1 | 	sub	fp, #12
2e308     A7 FA 09 FB | 	rdlong	result1, fp wz
2e30c     04 4E 85 F1 | 	sub	fp, #4
2e310     18 00 90 AD |  if_e	jmp	#LR__4670
2e314     04 4E 05 F1 | 	add	fp, #4
2e318     A7 FA 01 FB | 	rdlong	result1, fp
2e31c     0C 4E 05 F1 | 	add	fp, #12
2e320     A7 14 02 FB | 	rdlong	arg02, fp
2e324     10 4E 85 F1 | 	sub	fp, #16
2e328     FD 14 62 FC | 	wrlong	arg02, result1
2e32c                 | LR__4670
2e32c                 | '         *tp = now;
2e32c                 | '     return now;
2e32c     10 4E 05 F1 | 	add	fp, #16
2e330     A7 FA 01 FB | 	rdlong	result1, fp
2e334     10 4E 85 F1 | 	sub	fp, #16
2e338     A7 F0 03 F6 | 	mov	ptra, fp
2e33c     B2 00 A0 FD | 	call	#popregs_
2e340                 | _fatfs_cc_time_ret
2e340     2D 00 64 FD | 	ret
2e344                 | 
2e344                 | _fatfs_cc_mktime
2e344     06 4A 05 F6 | 	mov	COUNT_, #6
2e348     A8 00 A0 FD | 	call	#pushregs_
2e34c     09 1F 02 F6 | 	mov	local01, arg01
2e350     14 1E 06 F1 | 	add	local01, #20
2e354     0F 13 02 FB | 	rdlong	arg01, local01
2e358     14 1E 86 F1 | 	sub	local01, #20
2e35c     46 12 56 F2 | 	cmps	arg01, #70 wc
2e360                 | '                 return (time_t) -1;
2e360     01 FA 65 C6 |  if_b	neg	result1, #1
2e364     7C 01 90 CD |  if_b	jmp	#LR__4684
2e368     03 00 00 FF 
2e36c     6C 21 06 F6 | 	mov	local02, ##1900
2e370     14 1E 06 F1 | 	add	local01, #20
2e374     0F FB 01 FB | 	rdlong	result1, local01
2e378     FD 20 02 F1 | 	add	local02, result1
2e37c     08 1E 86 F1 | 	sub	local01, #8
2e380     0F 23 02 FB | 	rdlong	local03, local01
2e384     01 22 86 F1 | 	sub	local03, #1
2e388     04 1E 06 F1 | 	add	local01, #4
2e38c     0F 13 02 FB | 	rdlong	arg01, local01
2e390     10 1E 86 F1 | 	sub	local01, #16
2e394     02 12 66 F0 | 	shl	arg01, #2
2e398     02 00 00 FF 
2e39c     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
2e3a0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2e3a4     09 FB 01 FB | 	rdlong	result1, arg01
2e3a8     FD 22 02 F1 | 	add	local03, result1
2e3ac     10 13 02 F6 | 	mov	arg01, local02
2e3b0     02 00 00 FF 
2e3b4     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
2e3b8     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e3bc     00 FA 0D F2 | 	cmp	result1, #0 wz
2e3c0     1C 00 90 AD |  if_e	jmp	#LR__4680
2e3c4     00 24 06 F6 | 	mov	local04, #0
2e3c8     10 1E 06 F1 | 	add	local01, #16
2e3cc     0F FB 01 FB | 	rdlong	result1, local01
2e3d0     10 1E 86 F1 | 	sub	local01, #16
2e3d4     02 FA 55 F2 | 	cmps	result1, #2 wc
2e3d8     01 24 06 36 |  if_ae	mov	local04, #1
2e3dc     04 00 90 FD | 	jmp	#LR__4681
2e3e0                 | LR__4680
2e3e0     00 24 06 F6 | 	mov	local04, #0
2e3e4                 | LR__4681
2e3e4     04 1E 06 F1 | 	add	local01, #4
2e3e8     0F FB 01 FB | 	rdlong	result1, local01
2e3ec     04 1E 86 F1 | 	sub	local01, #4
2e3f0     0F 27 02 FB | 	rdlong	local05, local01
2e3f4     08 1E 06 F1 | 	add	local01, #8
2e3f8     0F 13 02 FB | 	rdlong	arg01, local01
2e3fc     07 00 00 FF 
2e400     10 12 06 FD | 	qmul	arg01, ##3600
2e404     12 23 02 F1 | 	add	local03, local04
2e408     FD 24 02 F6 | 	mov	local04, result1
2e40c     04 24 66 F0 | 	shl	local04, #4
2e410     FD 24 82 F1 | 	sub	local04, result1
2e414     02 24 66 F0 | 	shl	local04, #2
2e418     12 27 02 F1 | 	add	local05, local04
2e41c     08 1E 86 F1 | 	sub	local01, #8
2e420     18 24 62 FD | 	getqx	local04
2e424     A8 00 00 FF 
2e428     80 23 06 FD | 	qmul	local03, ##86400
2e42c     12 27 02 F1 | 	add	local05, local04
2e430     10 23 02 F6 | 	mov	local03, local02
2e434     03 00 00 FF 
2e438     B2 23 86 F1 | 	sub	local03, ##1970
2e43c     18 24 62 FD | 	getqx	local04
2e440     99 F0 00 FF 
2e444     80 23 06 FD | 	qmul	local03, ##31536000
2e448     12 27 02 F1 | 	add	local05, local04
2e44c     10 23 02 F6 | 	mov	local03, local02
2e450     03 00 00 FF 
2e454     B1 23 86 F1 | 	sub	local03, ##1969
2e458     11 29 52 F6 | 	abs	local06, local03 wc
2e45c     02 28 46 F0 | 	shr	local06, #2
2e460     14 29 82 F6 | 	negc	local06, local06
2e464     03 00 00 FF 
2e468     D1 21 56 F2 | 	cmps	local02, ##2001 wc
2e46c     18 24 62 FD | 	getqx	local04
2e470     12 27 02 F1 | 	add	local05, local04
2e474     18 00 90 CD |  if_b	jmp	#LR__4682
2e478     03 00 00 FF 
2e47c     D0 21 86 F1 | 	sub	local02, ##2000
2e480     10 25 52 F6 | 	abs	local04, local02 wc
2e484     64 24 16 FD | 	qdiv	local04, #100
2e488     18 24 62 FD | 	getqx	local04
2e48c     12 29 A2 F3 | 	sumnc	local06, local04
2e490                 | LR__4682
2e490     A8 00 00 FF 
2e494     80 29 06 FD | 	qmul	local06, ##86400
2e498     18 28 62 FD | 	getqx	local06
2e49c     14 27 02 F1 | 	add	local05, local06
2e4a0     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2e4a4     02 00 00 FF 
2e4a8     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2e4ac     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2e4b0     14 27 02 F1 | 	add	local05, local06
2e4b4     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2e4b8     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2e4bc     02 00 00 FF 
2e4c0     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2e4c4     01 22 0E F2 | 	cmp	local03, #1 wz
2e4c8     14 00 90 5D |  if_ne	jmp	#LR__4683
2e4cc     0F 13 02 F6 | 	mov	arg01, local01
2e4d0     DC 19 B0 FD | 	call	#_fatfs_cc___indst
2e4d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2e4d8     07 00 00 5F 
2e4dc     10 26 86 51 |  if_ne	sub	local05, ##3600
2e4e0                 | LR__4683
2e4e0                 | '                 s -=  (3600L) ;
2e4e0                 | ' 
2e4e0                 | '         return s;
2e4e0     13 FB 01 F6 | 	mov	result1, local05
2e4e4                 | LR__4684
2e4e4     A7 F0 03 F6 | 	mov	ptra, fp
2e4e8     B2 00 A0 FD | 	call	#popregs_
2e4ec                 | _fatfs_cc_mktime_ret
2e4ec     2D 00 64 FD | 	ret
2e4f0                 | 
2e4f0                 | _fatfs_cc__gmtime_r
2e4f0     03 4A 05 F6 | 	mov	COUNT_, #3
2e4f4     A8 00 A0 FD | 	call	#pushregs_
2e4f8     09 1F 02 FB | 	rdlong	local01, arg01
2e4fc     A8 00 00 FF 
2e500     80 1F 16 FD | 	qdiv	local01, ##86400
2e504     18 FA 61 FD | 	getqx	result1
2e508     04 FA 05 F1 | 	add	result1, #4
2e50c     07 FA 15 FD | 	qdiv	result1, #7
2e510     18 14 06 F1 | 	add	arg02, #24
2e514     D1 7F 27 FF 
2e518     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
2e51c     D1 7F 27 3F 
2e520     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
2e524     03 00 00 3F 
2e528     DC 21 06 36 |  if_ae	mov	local02, ##2012
2e52c     03 00 00 CF 
2e530     B2 21 06 C6 |  if_b	mov	local02, ##1970
2e534                 | ' 	  year = 1970;
2e534                 | ' 	}
2e534                 | ' 
2e534                 | ' 	for(;;) {
2e534     19 FA 61 FD | 	getqy	result1
2e538     0A FB 61 FC | 	wrlong	result1, arg02
2e53c     18 14 86 F1 | 	sub	arg02, #24
2e540                 | LR__4690
2e540     10 13 02 F6 | 	mov	arg01, local02
2e544     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e548     00 FA 0D F2 | 	cmp	result1, #0 wz
2e54c     42 F1 00 5F 
2e550     00 23 06 56 |  if_ne	mov	local03, ##31622400
2e554     99 F0 00 AF 
2e558     80 23 06 A6 |  if_e	mov	local03, ##31536000
2e55c     11 1F 12 F2 | 	cmp	local01, local03 wc
2e560                 | ' 	    break;
2e560     01 20 06 31 |  if_ae	add	local02, #1
2e564     11 1F 82 31 |  if_ae	sub	local01, local03
2e568     D4 FF 9F 3D |  if_ae	jmp	#LR__4690
2e56c     A8 00 00 FF 
2e570     80 1F 16 FD | 	qdiv	local01, ##86400
2e574     10 23 02 F6 | 	mov	local03, local02
2e578     03 00 00 FF 
2e57c     6C 23 86 F1 | 	sub	local03, ##1900
2e580     14 14 06 F1 | 	add	arg02, #20
2e584     0A 23 62 FC | 	wrlong	local03, arg02
2e588     08 14 06 F1 | 	add	arg02, #8
2e58c     10 13 02 F6 | 	mov	arg01, local02
2e590     18 20 62 FD | 	getqx	local02
2e594     0A 21 62 FC | 	wrlong	local02, arg02
2e598     1C 14 86 F1 | 	sub	arg02, #28
2e59c     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e5a0     00 FA 0D F2 | 	cmp	result1, #0 wz
2e5a4     1D 22 06 56 |  if_ne	mov	local03, #29
2e5a8     1C 22 06 A6 |  if_e	mov	local03, #28
2e5ac     02 00 00 FF 
2e5b0     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2e5b4     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2e5b8     02 00 00 FF 
2e5bc     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2e5c0                 | ' 
2e5c0                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2e5c0                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2e5c0     00 12 06 F6 | 	mov	arg01, #0
2e5c4     97 2A 48 FB | 	callpa	#(@LR__4692-@LR__4691)>>2,fcache_load_ptr_
2e5c8                 | LR__4691
2e5c8     09 23 02 F6 | 	mov	local03, arg01
2e5cc     02 22 66 F0 | 	shl	local03, #2
2e5d0     02 00 00 FF 
2e5d4     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2e5d8     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2e5dc     11 23 02 FB | 	rdlong	local03, local03
2e5e0     11 21 52 F2 | 	cmps	local02, local03 wc
2e5e4     02 00 00 FF 
2e5e8     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2e5ec     2C 00 90 CD |  if_b	jmp	#LR__4693
2e5f0     09 23 02 F6 | 	mov	local03, arg01
2e5f4     02 22 66 F0 | 	shl	local03, #2
2e5f8     02 00 00 FF 
2e5fc     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2e600     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2e604     11 23 02 FB | 	rdlong	local03, local03
2e608     11 21 82 F1 | 	sub	local02, local03
2e60c     01 12 06 F1 | 	add	arg01, #1
2e610     02 00 00 FF 
2e614     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2e618     AC FF 9F FD | 	jmp	#LR__4691
2e61c                 | LR__4692
2e61c                 | LR__4693
2e61c     A8 00 00 FF 
2e620     80 1F 16 FD | 	qdiv	local01, ##86400
2e624     10 14 06 F1 | 	add	arg02, #16
2e628     0A 13 62 FC | 	wrlong	arg01, arg02
2e62c     01 20 06 F1 | 	add	local02, #1
2e630     04 14 86 F1 | 	sub	arg02, #4
2e634     0A 21 62 FC | 	wrlong	local02, arg02
2e638     19 1E 62 FD | 	getqy	local01
2e63c     07 00 00 FF 
2e640     10 1E 16 FD | 	qdiv	local01, ##3600
2e644     18 22 62 FD | 	getqx	local03
2e648     07 00 00 FF 
2e64c     10 1E 16 FD | 	qdiv	local01, ##3600
2e650     04 14 86 F1 | 	sub	arg02, #4
2e654     0A 23 62 FC | 	wrlong	local03, arg02
2e658     19 1E 62 FD | 	getqy	local01
2e65c     3C 1E 16 FD | 	qdiv	local01, #60
2e660     18 22 62 FD | 	getqx	local03
2e664     3C 1E 16 FD | 	qdiv	local01, #60
2e668     04 14 86 F1 | 	sub	arg02, #4
2e66c     0A 23 62 FC | 	wrlong	local03, arg02
2e670     04 14 86 F1 | 	sub	arg02, #4
2e674                 | '         stm->tm_isdst = 0;
2e674                 | ' 
2e674                 | ' ;
2e674                 | '         return stm;
2e674     0A FB 01 F6 | 	mov	result1, arg02
2e678     19 22 62 FD | 	getqy	local03
2e67c     0A 23 62 FC | 	wrlong	local03, arg02
2e680     20 14 06 F1 | 	add	arg02, #32
2e684     0A 01 68 FC | 	wrlong	#0, arg02
2e688     A7 F0 03 F6 | 	mov	ptra, fp
2e68c     B2 00 A0 FD | 	call	#popregs_
2e690                 | _fatfs_cc__gmtime_r_ret
2e690     2D 00 64 FD | 	ret
2e694                 | 
2e694                 | _fatfs_cc__tzset
2e694     80 01 00 FF 
2e698     D9 13 06 F6 | 	mov	arg01, ##@LR__5005
2e69c     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2e6a0     FD 12 02 F6 | 	mov	arg01, result1
2e6a4     02 00 00 FF 
2e6a8     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
2e6ac     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2e6b0     02 00 00 FF 
2e6b4     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2e6b8     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
2e6bc     02 00 00 FF 
2e6c0     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2e6c4     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2e6c8     02 00 00 FF 
2e6cc     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2e6d0                 | _fatfs_cc__tzset_ret
2e6d0     2D 00 64 FD | 	ret
2e6d4                 | 
2e6d4                 | _fatfs_cc_getenv
2e6d4     06 4A 05 F6 | 	mov	COUNT_, #6
2e6d8     A8 00 A0 FD | 	call	#pushregs_
2e6dc     09 1F 02 F6 | 	mov	local01, arg01
2e6e0     09 21 02 F6 | 	mov	local02, arg01
2e6e4     97 06 48 FB | 	callpa	#(@LR__4701-@LR__4700)>>2,fcache_load_ptr_
2e6e8                 | LR__4700
2e6e8     10 FB C9 FA | 	rdbyte	result1, local02 wz
2e6ec     01 20 06 51 |  if_ne	add	local02, #1
2e6f0     F4 FF 9F 5D |  if_ne	jmp	#LR__4700
2e6f4                 | LR__4701
2e6f4     09 21 82 F1 | 	sub	local02, arg01
2e6f8     10 FB 01 F6 | 	mov	result1, local02
2e6fc     02 00 00 FF 
2e700     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2e704     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
2e708     02 00 00 FF 
2e70c     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2e710                 | '             return 0;
2e710     00 FA 05 A6 |  if_e	mov	result1, #0
2e714     5C 00 90 AD |  if_e	jmp	#LR__4704
2e718                 | ' 
2e718                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
2e718     02 00 00 FF 
2e71c     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2e720     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2e724     02 00 00 FF 
2e728     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2e72c                 | LR__4702
2e72c     11 25 0A FB | 	rdlong	local04, local03 wz
2e730     3C 00 90 AD |  if_e	jmp	#LR__4703
2e734     12 13 02 F6 | 	mov	arg01, local04
2e738     0F 15 02 F6 | 	mov	arg02, local01
2e73c     10 17 02 F6 | 	mov	arg03, local02
2e740     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
2e744     00 FA 0D F2 | 	cmp	result1, #0 wz
2e748     10 27 02 A6 |  if_e	mov	local05, local02
2e74c     12 27 02 A1 |  if_e	add	local05, local04
2e750     13 29 C2 AA |  if_e	rdbyte	local06, local05
2e754     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
2e758                 | ' 			return name+len+1;
2e758     10 25 02 A1 |  if_e	add	local04, local02
2e75c     01 24 06 A1 |  if_e	add	local04, #1
2e760     12 FB 01 A6 |  if_e	mov	result1, local04
2e764     0C 00 90 AD |  if_e	jmp	#LR__4704
2e768     04 22 06 F1 | 	add	local03, #4
2e76c     BC FF 9F FD | 	jmp	#LR__4702
2e770                 | LR__4703
2e770                 | ' 	}
2e770                 | ' 	return 0;
2e770     00 FA 05 F6 | 	mov	result1, #0
2e774                 | LR__4704
2e774     A7 F0 03 F6 | 	mov	ptra, fp
2e778     B2 00 A0 FD | 	call	#popregs_
2e77c                 | _fatfs_cc_getenv_ret
2e77c     2D 00 64 FD | 	ret
2e780                 | 
2e780                 | _fatfs_cc__get_fattime
2e780     00 4A 05 F6 | 	mov	COUNT_, #0
2e784     A8 00 A0 FD | 	call	#pushregs_
2e788     34 F0 07 F1 | 	add	ptra, #52
2e78c     00 12 06 F6 | 	mov	arg01, #0
2e790     38 FB BF FD | 	call	#_fatfs_cc_time
2e794     04 4E 05 F1 | 	add	fp, #4
2e798     A7 FA 61 FC | 	wrlong	result1, fp
2e79c     A7 12 02 F6 | 	mov	arg01, fp
2e7a0     0C 4E 05 F1 | 	add	fp, #12
2e7a4     A7 14 02 F6 | 	mov	arg02, fp
2e7a8     10 4E 85 F1 | 	sub	fp, #16
2e7ac     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2e7b0     24 4E 05 F1 | 	add	fp, #36
2e7b4     A7 14 02 FB | 	rdlong	arg02, fp
2e7b8     50 14 86 F1 | 	sub	arg02, #80
2e7bc     09 14 66 F0 | 	shl	arg02, #9
2e7c0     04 4E 85 F1 | 	sub	fp, #4
2e7c4     A7 FA 01 FB | 	rdlong	result1, fp
2e7c8     01 FA 05 F1 | 	add	result1, #1
2e7cc     05 FA 65 F0 | 	shl	result1, #5
2e7d0     FD 14 42 F5 | 	or	arg02, result1
2e7d4     04 4E 85 F1 | 	sub	fp, #4
2e7d8     A7 FA 01 FB | 	rdlong	result1, fp
2e7dc     FD 14 42 F5 | 	or	arg02, result1
2e7e0     14 4E 85 F1 | 	sub	fp, #20
2e7e4     A7 14 62 FC | 	wrlong	arg02, fp
2e7e8     10 4E 05 F1 | 	add	fp, #16
2e7ec     A7 14 02 FB | 	rdlong	arg02, fp
2e7f0     0B 14 66 F0 | 	shl	arg02, #11
2e7f4     04 4E 85 F1 | 	sub	fp, #4
2e7f8     A7 FA 01 FB | 	rdlong	result1, fp
2e7fc     05 FA 65 F0 | 	shl	result1, #5
2e800     FD 14 42 F5 | 	or	arg02, result1
2e804     04 4E 85 F1 | 	sub	fp, #4
2e808     A7 FA 01 FB | 	rdlong	result1, fp
2e80c     FD 14 42 F5 | 	or	arg02, result1
2e810     04 4E 85 F1 | 	sub	fp, #4
2e814     A7 14 62 FC | 	wrlong	arg02, fp
2e818                 | ' 
2e818                 | '     now = time(0);
2e818                 | '     _gmtime_r (&now, &date);
2e818                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
2e818                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
2e818                 | '     return (ffdate << 16) | fftime;
2e818     04 4E 85 F1 | 	sub	fp, #4
2e81c     A7 FA 01 FB | 	rdlong	result1, fp
2e820     10 FA 65 F0 | 	shl	result1, #16
2e824     08 4E 85 F1 | 	sub	fp, #8
2e828     0A FB 41 F5 | 	or	result1, arg02
2e82c     A7 F0 03 F6 | 	mov	ptra, fp
2e830     B2 00 A0 FD | 	call	#popregs_
2e834                 | _fatfs_cc__get_fattime_ret
2e834     2D 00 64 FD | 	ret
2e838                 | 
2e838                 | _fatfs_cc_unixtime_0960
2e838     00 4A 05 F6 | 	mov	COUNT_, #0
2e83c     A8 00 A0 FD | 	call	#pushregs_
2e840     34 F0 07 F1 | 	add	ptra, #52
2e844     04 4E 05 F1 | 	add	fp, #4
2e848     A7 12 62 FC | 	wrlong	arg01, fp
2e84c     04 4E 05 F1 | 	add	fp, #4
2e850     A7 14 62 FC | 	wrlong	arg02, fp
2e854     04 4E 85 F1 | 	sub	fp, #4
2e858     A7 14 02 FB | 	rdlong	arg02, fp
2e85c     09 14 46 F0 | 	shr	arg02, #9
2e860     7F 14 06 F5 | 	and	arg02, #127
2e864     50 FA 05 F6 | 	mov	result1, #80
2e868     0A FB 01 F1 | 	add	result1, arg02
2e86c     20 4E 05 F1 | 	add	fp, #32
2e870     A7 FA 61 FC | 	wrlong	result1, fp
2e874     20 4E 85 F1 | 	sub	fp, #32
2e878     A7 FA 01 FB | 	rdlong	result1, fp
2e87c     05 FA 45 F0 | 	shr	result1, #5
2e880     FD FA 41 F8 | 	getnib	result1, result1, #0
2e884     01 FA 85 F1 | 	sub	result1, #1
2e888     1C 4E 05 F1 | 	add	fp, #28
2e88c     A7 FA 61 FC | 	wrlong	result1, fp
2e890     1C 4E 85 F1 | 	sub	fp, #28
2e894     A7 FA 01 FB | 	rdlong	result1, fp
2e898     1F FA 05 F5 | 	and	result1, #31
2e89c     18 4E 05 F1 | 	add	fp, #24
2e8a0     A7 FA 61 FC | 	wrlong	result1, fp
2e8a4     14 4E 85 F1 | 	sub	fp, #20
2e8a8     A7 FA 01 FB | 	rdlong	result1, fp
2e8ac     0B FA 45 F0 | 	shr	result1, #11
2e8b0     1F FA 05 F5 | 	and	result1, #31
2e8b4     10 4E 05 F1 | 	add	fp, #16
2e8b8     A7 FA 61 FC | 	wrlong	result1, fp
2e8bc     10 4E 85 F1 | 	sub	fp, #16
2e8c0     A7 FA 01 FB | 	rdlong	result1, fp
2e8c4     05 FA 45 F0 | 	shr	result1, #5
2e8c8     3F FA 05 F5 | 	and	result1, #63
2e8cc     0C 4E 05 F1 | 	add	fp, #12
2e8d0     A7 FA 61 FC | 	wrlong	result1, fp
2e8d4     0C 4E 85 F1 | 	sub	fp, #12
2e8d8     A7 14 02 FB | 	rdlong	arg02, fp
2e8dc     1F 14 06 F5 | 	and	arg02, #31
2e8e0     01 14 66 F0 | 	shl	arg02, #1
2e8e4     08 4E 05 F1 | 	add	fp, #8
2e8e8     A7 14 62 FC | 	wrlong	arg02, fp
2e8ec     A7 12 02 F6 | 	mov	arg01, fp
2e8f0     10 4E 85 F1 | 	sub	fp, #16
2e8f4     4C FA BF FD | 	call	#_fatfs_cc_mktime
2e8f8     0C 4E 05 F1 | 	add	fp, #12
2e8fc     A7 FA 61 FC | 	wrlong	result1, fp
2e900                 | ' 
2e900                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2e900                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2e900                 | '     date.tm_mday = (dosdate & 0x1f);
2e900                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2e900                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2e900                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2e900                 | ' 
2e900                 | '     t = mktime(&date);
2e900                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2e900                 | '     return t;
2e900     0C 4E 85 F1 | 	sub	fp, #12
2e904     A7 F0 03 F6 | 	mov	ptra, fp
2e908     B2 00 A0 FD | 	call	#popregs_
2e90c                 | _fatfs_cc_unixtime_0960_ret
2e90c     2D 00 64 FD | 	ret
2e910                 | 
2e910                 | _fatfs_cc__set_dos_error_0962
2e910     09 01 02 F6 | 	mov	_var01, arg01
2e914                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2e914                 | '     switch (derr) {
2e914     14 00 26 F3 | 	fle	_var01, #20
2e918     30 00 62 FD | 	jmprel	_var01
2e91c                 | LR__4710
2e91c     50 00 90 FD | 	jmp	#LR__4711
2e920     84 00 90 FD | 	jmp	#LR__4725
2e924     80 00 90 FD | 	jmp	#LR__4726
2e928     7C 00 90 FD | 	jmp	#LR__4727
2e92c     48 00 90 FD | 	jmp	#LR__4712
2e930     44 00 90 FD | 	jmp	#LR__4713
2e934     40 00 90 FD | 	jmp	#LR__4714
2e938     44 00 90 FD | 	jmp	#LR__4715
2e93c     48 00 90 FD | 	jmp	#LR__4717
2e940     54 00 90 FD | 	jmp	#LR__4720
2e944     38 00 90 FD | 	jmp	#LR__4716
2e948     4C 00 90 FD | 	jmp	#LR__4721
2e94c     48 00 90 FD | 	jmp	#LR__4722
2e950     44 00 90 FD | 	jmp	#LR__4723
2e954     50 00 90 FD | 	jmp	#LR__4728
2e958     4C 00 90 FD | 	jmp	#LR__4728
2e95c     48 00 90 FD | 	jmp	#LR__4728
2e960     2C 00 90 FD | 	jmp	#LR__4718
2e964     38 00 90 FD | 	jmp	#LR__4724
2e968     2C 00 90 FD | 	jmp	#LR__4719
2e96c     38 00 90 FD | 	jmp	#LR__4728
2e970                 | LR__4711
2e970     00 02 06 F6 | 	mov	_var02, #0
2e974                 | '         r = 0;
2e974                 | '         break;
2e974     34 00 90 FD | 	jmp	#LR__4729
2e978                 | LR__4712
2e978                 | LR__4713
2e978                 | LR__4714
2e978     04 02 06 F6 | 	mov	_var02, #4
2e97c                 | '         r =  4 ;
2e97c                 | '         break;
2e97c     2C 00 90 FD | 	jmp	#LR__4729
2e980                 | LR__4715
2e980                 | LR__4716
2e980     06 02 06 F6 | 	mov	_var02, #6
2e984                 | '         r =  6 ;
2e984                 | '         break;
2e984     24 00 90 FD | 	jmp	#LR__4729
2e988                 | LR__4717
2e988     09 02 06 F6 | 	mov	_var02, #9
2e98c                 | '         r =  9 ;
2e98c                 | '         break;
2e98c     1C 00 90 FD | 	jmp	#LR__4729
2e990                 | LR__4718
2e990     07 02 06 F6 | 	mov	_var02, #7
2e994                 | '         r =  7 ;
2e994                 | '         break;
2e994     14 00 90 FD | 	jmp	#LR__4729
2e998                 | LR__4719
2e998                 | LR__4720
2e998                 | LR__4721
2e998                 | LR__4722
2e998                 | LR__4723
2e998     0A 02 06 F6 | 	mov	_var02, #10
2e99c                 | '         r =  10 ;
2e99c                 | '         break;
2e99c     0C 00 90 FD | 	jmp	#LR__4729
2e9a0                 | LR__4724
2e9a0     0B 02 06 F6 | 	mov	_var02, #11
2e9a4                 | '         r =  11 ;
2e9a4                 | '         break;
2e9a4     04 00 90 FD | 	jmp	#LR__4729
2e9a8                 | LR__4725
2e9a8                 | LR__4726
2e9a8                 | LR__4727
2e9a8                 | LR__4728
2e9a8     0C 02 06 F6 | 	mov	_var02, #12
2e9ac                 | '         r =  12 ;
2e9ac                 | '         break;
2e9ac                 | LR__4729
2e9ac                 | '     }
2e9ac                 | '     return _seterror(r);
2e9ac     00 02 4E F2 | 	cmps	_var02, #0 wz
2e9b0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2e9b4     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2e9b8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2e9bc     01 FA 65 56 |  if_ne	neg	result1, #1
2e9c0     00 FA 05 A6 |  if_e	mov	result1, #0
2e9c4                 | _fatfs_cc__set_dos_error_0962_ret
2e9c4     2D 00 64 FD | 	ret
2e9c8                 | 
2e9c8                 | _fatfs_cc_v_creat
2e9c8     04 4A 05 F6 | 	mov	COUNT_, #4
2e9cc     A8 00 A0 FD | 	call	#pushregs_
2e9d0     09 1F 02 F6 | 	mov	local01, arg01
2e9d4     0A 21 02 F6 | 	mov	local02, arg02
2e9d8     03 00 00 FF 
2e9dc     3C 12 06 F6 | 	mov	arg01, ##1596
2e9e0                 | '     return _gc_alloc(size);
2e9e0     10 14 06 F6 | 	mov	arg02, #16
2e9e4     28 5E BF FD | 	call	#__system___gc_doalloc
2e9e8     FD 22 0A F6 | 	mov	local03, result1 wz
2e9ec                 | '       return _seterror( 7 );
2e9ec     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2e9f0     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2e9f4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2e9f8     01 FA 65 A6 |  if_e	neg	result1, #1
2e9fc     58 00 90 AD |  if_e	jmp	#LR__4731
2ea00     11 13 02 F6 | 	mov	arg01, local03
2ea04     00 14 06 F6 | 	mov	arg02, #0
2ea08     03 00 00 FF 
2ea0c     3C 16 06 F6 | 	mov	arg03, ##1596
2ea10     98 00 A0 FD | 	call	#\builtin_bytefill_
2ea14     02 00 00 FF 
2ea18     14 22 06 F1 | 	add	local03, ##1044
2ea1c     11 13 02 F6 | 	mov	arg01, local03
2ea20     02 00 00 FF 
2ea24     14 22 86 F1 | 	sub	local03, ##1044
2ea28     10 15 02 F6 | 	mov	arg02, local02
2ea2c     07 16 06 F6 | 	mov	arg03, #7
2ea30     B4 CC BF FD | 	call	#_fatfs_cc_f_open
2ea34     FD 24 0A F6 | 	mov	local04, result1 wz
2ea38     14 00 90 AD |  if_e	jmp	#LR__4730
2ea3c     11 13 02 F6 | 	mov	arg01, local03
2ea40                 | '     return _gc_free(ptr);
2ea40     D8 5E BF FD | 	call	#__system___gc_free
2ea44                 | '     free(f);
2ea44                 | '     return _set_dos_error(r);
2ea44     12 13 02 F6 | 	mov	arg01, local04
2ea48     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ea4c     08 00 90 FD | 	jmp	#LR__4731
2ea50                 | LR__4730
2ea50     0F 23 62 FC | 	wrlong	local03, local01
2ea54                 | '   }
2ea54                 | '   fil->vfsdata = f;
2ea54                 | '   return 0;
2ea54     00 FA 05 F6 | 	mov	result1, #0
2ea58                 | LR__4731
2ea58     A7 F0 03 F6 | 	mov	ptra, fp
2ea5c     B2 00 A0 FD | 	call	#popregs_
2ea60                 | _fatfs_cc_v_creat_ret
2ea60     2D 00 64 FD | 	ret
2ea64                 | 
2ea64                 | _fatfs_cc_v_close
2ea64     02 4A 05 F6 | 	mov	COUNT_, #2
2ea68     A8 00 A0 FD | 	call	#pushregs_
2ea6c     09 1F 02 FB | 	rdlong	local01, arg01
2ea70     02 00 00 FF 
2ea74     14 1E 06 F1 | 	add	local01, ##1044
2ea78     0F 13 02 F6 | 	mov	arg01, local01
2ea7c     02 00 00 FF 
2ea80     14 1E 86 F1 | 	sub	local01, ##1044
2ea84     DC E3 BF FD | 	call	#_fatfs_cc_f_close
2ea88     FD 20 02 F6 | 	mov	local02, result1
2ea8c     0F 13 02 F6 | 	mov	arg01, local01
2ea90                 | '     return _gc_free(ptr);
2ea90     88 5E BF FD | 	call	#__system___gc_free
2ea94                 | '     FAT_FIL *f = fil->vfsdata;
2ea94                 | '     r=f_close(&f->fil);
2ea94                 | '     free(f);
2ea94                 | '     return _set_dos_error(r);
2ea94     10 13 02 F6 | 	mov	arg01, local02
2ea98     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ea9c     A7 F0 03 F6 | 	mov	ptra, fp
2eaa0     B2 00 A0 FD | 	call	#popregs_
2eaa4                 | _fatfs_cc_v_close_ret
2eaa4     2D 00 64 FD | 	ret
2eaa8                 | 
2eaa8                 | _fatfs_cc_v_opendir
2eaa8     04 4A 05 F6 | 	mov	COUNT_, #4
2eaac     A8 00 A0 FD | 	call	#pushregs_
2eab0     09 1F 02 F6 | 	mov	local01, arg01
2eab4     0A 21 02 F6 | 	mov	local02, arg02
2eab8     30 12 06 F6 | 	mov	arg01, #48
2eabc                 | '     return _gc_alloc(size);
2eabc     10 14 06 F6 | 	mov	arg02, #16
2eac0     4C 5D BF FD | 	call	#__system___gc_doalloc
2eac4     FD 22 0A F6 | 	mov	local03, result1 wz
2eac8                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2eac8                 | '       return _seterror( 7 );
2eac8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2eacc     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2ead0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ead4     01 FA 65 A6 |  if_e	neg	result1, #1
2ead8     34 00 90 AD |  if_e	jmp	#LR__4741
2eadc     10 15 02 F6 | 	mov	arg02, local02
2eae0     11 13 02 F6 | 	mov	arg01, local03
2eae4     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
2eae8     FD 24 0A F6 | 	mov	local04, result1 wz
2eaec     14 00 90 AD |  if_e	jmp	#LR__4740
2eaf0     11 13 02 F6 | 	mov	arg01, local03
2eaf4                 | '     return _gc_free(ptr);
2eaf4     24 5E BF FD | 	call	#__system___gc_free
2eaf8                 | '         free(f);
2eaf8                 | '         return _set_dos_error(r);
2eaf8     12 13 02 F6 | 	mov	arg01, local04
2eafc     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2eb00     0C 00 90 FD | 	jmp	#LR__4741
2eb04                 | LR__4740
2eb04     04 1E 06 F1 | 	add	local01, #4
2eb08     0F 23 62 FC | 	wrlong	local03, local01
2eb0c                 | '     }
2eb0c                 | '     dir->vfsdata = f;
2eb0c                 | '     return 0;
2eb0c     00 FA 05 F6 | 	mov	result1, #0
2eb10                 | LR__4741
2eb10     A7 F0 03 F6 | 	mov	ptra, fp
2eb14     B2 00 A0 FD | 	call	#popregs_
2eb18                 | _fatfs_cc_v_opendir_ret
2eb18     2D 00 64 FD | 	ret
2eb1c                 | 
2eb1c                 | _fatfs_cc_v_closedir
2eb1c     02 4A 05 F6 | 	mov	COUNT_, #2
2eb20     A8 00 A0 FD | 	call	#pushregs_
2eb24     04 12 06 F1 | 	add	arg01, #4
2eb28     09 1F 02 FB | 	rdlong	local01, arg01
2eb2c     0F 13 02 F6 | 	mov	arg01, local01
2eb30     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
2eb34     FD 20 02 F6 | 	mov	local02, result1
2eb38     0F 13 02 F6 | 	mov	arg01, local01
2eb3c                 | '     return _gc_free(ptr);
2eb3c     DC 5D BF FD | 	call	#__system___gc_free
2eb40     00 20 0E F2 | 	cmp	local02, #0 wz
2eb44     10 13 02 56 |  if_ne	mov	arg01, local02
2eb48     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0962
2eb4c                 | '     return r;
2eb4c     10 FB 01 F6 | 	mov	result1, local02
2eb50     A7 F0 03 F6 | 	mov	ptra, fp
2eb54     B2 00 A0 FD | 	call	#popregs_
2eb58                 | _fatfs_cc_v_closedir_ret
2eb58     2D 00 64 FD | 	ret
2eb5c                 | 
2eb5c                 | _fatfs_cc_v_readdir
2eb5c     01 4A 05 F6 | 	mov	COUNT_, #1
2eb60     A8 00 A0 FD | 	call	#pushregs_
2eb64     2C F1 07 F1 | 	add	ptra, #300
2eb68     04 4E 05 F1 | 	add	fp, #4
2eb6c     A7 12 62 FC | 	wrlong	arg01, fp
2eb70     04 4E 05 F1 | 	add	fp, #4
2eb74     A7 14 62 FC | 	wrlong	arg02, fp
2eb78     04 4E 85 F1 | 	sub	fp, #4
2eb7c     A7 16 02 FB | 	rdlong	arg03, fp
2eb80     04 16 06 F1 | 	add	arg03, #4
2eb84     0B 13 02 FB | 	rdlong	arg01, arg03
2eb88     08 4E 05 F1 | 	add	fp, #8
2eb8c     A7 14 02 F6 | 	mov	arg02, fp
2eb90     0C 4E 85 F1 | 	sub	fp, #12
2eb94     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
2eb98     28 4F 05 F1 | 	add	fp, #296
2eb9c     A7 FA 61 FC | 	wrlong	result1, fp
2eba0     28 4F 85 F1 | 	sub	fp, #296
2eba4     00 FA 0D F2 | 	cmp	result1, #0 wz
2eba8     14 00 90 AD |  if_e	jmp	#LR__4750
2ebac                 | '         return _set_dos_error(r);
2ebac     28 4F 05 F1 | 	add	fp, #296
2ebb0     A7 12 02 FB | 	rdlong	arg01, fp
2ebb4     28 4F 85 F1 | 	sub	fp, #296
2ebb8     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ebbc     C4 00 90 FD | 	jmp	#LR__4753
2ebc0                 | LR__4750
2ebc0     28 4E 05 F1 | 	add	fp, #40
2ebc4     A7 16 CA FA | 	rdbyte	arg03, fp wz
2ebc8     28 4E 85 F1 | 	sub	fp, #40
2ebcc                 | '         return -1;
2ebcc     01 FA 65 A6 |  if_e	neg	result1, #1
2ebd0     B0 00 90 AD |  if_e	jmp	#LR__4753
2ebd4     08 4E 05 F1 | 	add	fp, #8
2ebd8     A7 12 02 FB | 	rdlong	arg01, fp
2ebdc     20 4E 05 F1 | 	add	fp, #32
2ebe0     A7 14 02 F6 | 	mov	arg02, fp
2ebe4     28 4E 85 F1 | 	sub	fp, #40
2ebe8     3F 16 06 F6 | 	mov	arg03, #63
2ebec     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
2ebf0     08 4E 05 F1 | 	add	fp, #8
2ebf4     A7 16 02 FB | 	rdlong	arg03, fp
2ebf8     3F 16 06 F1 | 	add	arg03, #63
2ebfc     0B 01 48 FC | 	wrbyte	#0, arg03
2ec00     0C 4E 05 F1 | 	add	fp, #12
2ec04     A7 16 C2 FA | 	rdbyte	arg03, fp
2ec08     14 4E 85 F1 | 	sub	fp, #20
2ec0c     10 16 CE F7 | 	test	arg03, #16 wz
2ec10     18 00 90 AD |  if_e	jmp	#LR__4751
2ec14     08 4E 05 F1 | 	add	fp, #8
2ec18     A7 16 02 FB | 	rdlong	arg03, fp
2ec1c     08 4E 85 F1 | 	sub	fp, #8
2ec20     50 16 06 F1 | 	add	arg03, #80
2ec24     0B 03 48 FC | 	wrbyte	#1, arg03
2ec28     14 00 90 FD | 	jmp	#LR__4752
2ec2c                 | LR__4751
2ec2c     08 4E 05 F1 | 	add	fp, #8
2ec30     A7 16 02 FB | 	rdlong	arg03, fp
2ec34     08 4E 85 F1 | 	sub	fp, #8
2ec38     50 16 06 F1 | 	add	arg03, #80
2ec3c     0B 01 48 FC | 	wrbyte	#0, arg03
2ec40                 | LR__4752
2ec40     08 4E 05 F1 | 	add	fp, #8
2ec44     A7 16 02 FB | 	rdlong	arg03, fp
2ec48     04 4E 05 F1 | 	add	fp, #4
2ec4c     A7 14 02 FB | 	rdlong	arg02, fp
2ec50     48 16 06 F1 | 	add	arg03, #72
2ec54     0B 15 62 FC | 	wrlong	arg02, arg03
2ec58     04 4E 85 F1 | 	sub	fp, #4
2ec5c     A7 1E 02 FB | 	rdlong	local01, fp
2ec60     08 4E 05 F1 | 	add	fp, #8
2ec64     A7 12 E2 FA | 	rdword	arg01, fp
2ec68     02 4E 05 F1 | 	add	fp, #2
2ec6c     A7 14 E2 FA | 	rdword	arg02, fp
2ec70     12 4E 85 F1 | 	sub	fp, #18
2ec74     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0960
2ec78     4C 1E 06 F1 | 	add	local01, #76
2ec7c     0F FB 61 FC | 	wrlong	result1, local01
2ec80                 | '         ent->d_type =  (0) ;
2ec80                 | '     }
2ec80                 | '     ent->d_size = finfo.fsize;
2ec80                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2ec80                 | '     return 0;
2ec80     00 FA 05 F6 | 	mov	result1, #0
2ec84                 | LR__4753
2ec84     A7 F0 03 F6 | 	mov	ptra, fp
2ec88     B2 00 A0 FD | 	call	#popregs_
2ec8c                 | _fatfs_cc_v_readdir_ret
2ec8c     2D 00 64 FD | 	ret
2ec90                 | 
2ec90                 | _fatfs_cc_v_stat
2ec90     03 4A 05 F6 | 	mov	COUNT_, #3
2ec94     A8 00 A0 FD | 	call	#pushregs_
2ec98     30 F1 07 F1 | 	add	ptra, #304
2ec9c     04 4E 05 F1 | 	add	fp, #4
2eca0     A7 12 62 FC | 	wrlong	arg01, fp
2eca4     04 4E 05 F1 | 	add	fp, #4
2eca8     A7 14 62 FC | 	wrlong	arg02, fp
2ecac     08 4E 85 F1 | 	sub	fp, #8
2ecb0     0A 13 02 F6 | 	mov	arg01, arg02
2ecb4     00 14 06 F6 | 	mov	arg02, #0
2ecb8     30 16 06 F6 | 	mov	arg03, #48
2ecbc     98 00 A0 FD | 	call	#\builtin_bytefill_
2ecc0     04 4E 05 F1 | 	add	fp, #4
2ecc4     A7 FA 01 FB | 	rdlong	result1, fp
2ecc8     04 4E 85 F1 | 	sub	fp, #4
2eccc     FD FA C9 FA | 	rdbyte	result1, result1 wz
2ecd0     2C 00 90 AD |  if_e	jmp	#LR__4760
2ecd4     04 4E 05 F1 | 	add	fp, #4
2ecd8     A7 FA 01 FB | 	rdlong	result1, fp
2ecdc     04 4E 85 F1 | 	sub	fp, #4
2ece0     FD FA C1 FA | 	rdbyte	result1, result1
2ece4     2E FA 0D F2 | 	cmp	result1, #46 wz
2ece8     04 4E 05 A1 |  if_e	add	fp, #4
2ecec     A7 1E 02 AB |  if_e	rdlong	local01, fp
2ecf0     04 4E 85 A1 |  if_e	sub	fp, #4
2ecf4     01 1E 06 A1 |  if_e	add	local01, #1
2ecf8     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2ecfc     18 00 90 5D |  if_ne	jmp	#LR__4761
2ed00                 | LR__4760
2ed00     18 4E 05 F1 | 	add	fp, #24
2ed04     A7 20 48 FC | 	wrbyte	#16, fp
2ed08     0C 4E 85 F1 | 	sub	fp, #12
2ed0c     A7 00 68 FC | 	wrlong	#0, fp
2ed10     0C 4E 85 F1 | 	sub	fp, #12
2ed14     24 00 90 FD | 	jmp	#LR__4762
2ed18                 | LR__4761
2ed18     04 4E 05 F1 | 	add	fp, #4
2ed1c     A7 12 02 FB | 	rdlong	arg01, fp
2ed20     0C 4E 05 F1 | 	add	fp, #12
2ed24     A7 14 02 F6 | 	mov	arg02, fp
2ed28     10 4E 85 F1 | 	sub	fp, #16
2ed2c     AC EB BF FD | 	call	#_fatfs_cc_f_stat
2ed30     0C 4E 05 F1 | 	add	fp, #12
2ed34     A7 FA 61 FC | 	wrlong	result1, fp
2ed38     0C 4E 85 F1 | 	sub	fp, #12
2ed3c                 | LR__4762
2ed3c     0C 4E 05 F1 | 	add	fp, #12
2ed40     A7 20 0A FB | 	rdlong	local02, fp wz
2ed44     0C 4E 85 F1 | 	sub	fp, #12
2ed48     14 00 90 AD |  if_e	jmp	#LR__4763
2ed4c                 | '         return _set_dos_error(r);
2ed4c     0C 4E 05 F1 | 	add	fp, #12
2ed50     A7 12 02 FB | 	rdlong	arg01, fp
2ed54     0C 4E 85 F1 | 	sub	fp, #12
2ed58     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ed5c     14 01 90 FD | 	jmp	#LR__4764
2ed60                 | LR__4763
2ed60     2C 4F 05 F1 | 	add	fp, #300
2ed64     A7 48 6A FC | 	wrlong	#292, fp
2ed68     14 4F 85 F1 | 	sub	fp, #276
2ed6c     A7 22 C2 FA | 	rdbyte	local03, fp
2ed70     18 4E 85 F1 | 	sub	fp, #24
2ed74     01 22 CE F7 | 	test	local03, #1 wz
2ed78     2C 4F 05 A1 |  if_e	add	fp, #300
2ed7c     A7 22 02 AB |  if_e	rdlong	local03, fp
2ed80     92 22 46 A5 |  if_e	or	local03, #146
2ed84     A7 22 62 AC |  if_e	wrlong	local03, fp
2ed88     2C 4F 85 A1 |  if_e	sub	fp, #300
2ed8c     18 4E 05 F1 | 	add	fp, #24
2ed90     A7 22 C2 FA | 	rdbyte	local03, fp
2ed94     18 4E 85 F1 | 	sub	fp, #24
2ed98     10 22 CE F7 | 	test	local03, #16 wz
2ed9c     2C 4F 05 51 |  if_ne	add	fp, #300
2eda0     A7 22 02 5B |  if_ne	rdlong	local03, fp
2eda4     08 00 00 5F 
2eda8     49 22 46 55 |  if_ne	or	local03, ##4169
2edac     A7 22 62 5C |  if_ne	wrlong	local03, fp
2edb0     2C 4F 85 51 |  if_ne	sub	fp, #300
2edb4     08 4E 05 F1 | 	add	fp, #8
2edb8     A7 22 02 FB | 	rdlong	local03, fp
2edbc     24 4F 05 F1 | 	add	fp, #292
2edc0     A7 20 02 FB | 	rdlong	local02, fp
2edc4     08 22 06 F1 | 	add	local03, #8
2edc8     11 21 62 FC | 	wrlong	local02, local03
2edcc     24 4F 85 F1 | 	sub	fp, #292
2edd0     A7 22 02 FB | 	rdlong	local03, fp
2edd4     0C 22 06 F1 | 	add	local03, #12
2edd8     11 03 68 FC | 	wrlong	#1, local03
2eddc     A7 22 02 FB | 	rdlong	local03, fp
2ede0     08 4E 05 F1 | 	add	fp, #8
2ede4     A7 20 02 FB | 	rdlong	local02, fp
2ede8     18 22 06 F1 | 	add	local03, #24
2edec     11 21 62 FC | 	wrlong	local02, local03
2edf0     08 4E 85 F1 | 	sub	fp, #8
2edf4     A7 22 02 FB | 	rdlong	local03, fp
2edf8     1C 22 06 F1 | 	add	local03, #28
2edfc     01 00 80 FF 
2ee00     11 01 68 FC | 	wrlong	##512, local03
2ee04     A7 20 02 FB | 	rdlong	local02, fp
2ee08     10 23 02 F6 | 	mov	local03, local02
2ee0c     18 20 06 F1 | 	add	local02, #24
2ee10     10 21 02 FB | 	rdlong	local02, local02
2ee14     FF 21 06 F1 | 	add	local02, #511
2ee18     10 21 52 F6 | 	abs	local02, local02 wc
2ee1c     09 20 46 F0 | 	shr	local02, #9
2ee20     10 21 82 F6 | 	negc	local02, local02
2ee24     20 22 06 F1 | 	add	local03, #32
2ee28     11 21 62 FC | 	wrlong	local02, local03
2ee2c     A7 20 02 FB | 	rdlong	local02, fp
2ee30     10 23 02 F6 | 	mov	local03, local02
2ee34     10 1F 02 F6 | 	mov	local01, local02
2ee38     0C 4E 05 F1 | 	add	fp, #12
2ee3c     A7 12 E2 FA | 	rdword	arg01, fp
2ee40     02 4E 05 F1 | 	add	fp, #2
2ee44     A7 14 E2 FA | 	rdword	arg02, fp
2ee48     16 4E 85 F1 | 	sub	fp, #22
2ee4c     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0960
2ee50     2C 1E 06 F1 | 	add	local01, #44
2ee54     0F FB 61 FC | 	wrlong	result1, local01
2ee58     28 20 06 F1 | 	add	local02, #40
2ee5c     10 FB 61 FC | 	wrlong	result1, local02
2ee60     24 22 06 F1 | 	add	local03, #36
2ee64     11 FB 61 FC | 	wrlong	result1, local03
2ee68                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
2ee68                 | '     }
2ee68                 | '     buf->st_mode = mode;
2ee68                 | '     buf->st_nlink = 1;
2ee68                 | '     buf->st_size = finfo.fsize;
2ee68                 | '     buf->st_blksize = 512;
2ee68                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
2ee68                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
2ee68                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ee68                 | '     return r;
2ee68     0C 4E 05 F1 | 	add	fp, #12
2ee6c     A7 FA 01 FB | 	rdlong	result1, fp
2ee70     0C 4E 85 F1 | 	sub	fp, #12
2ee74                 | LR__4764
2ee74     A7 F0 03 F6 | 	mov	ptra, fp
2ee78     B2 00 A0 FD | 	call	#popregs_
2ee7c                 | _fatfs_cc_v_stat_ret
2ee7c     2D 00 64 FD | 	ret
2ee80                 | 
2ee80                 | _fatfs_cc_v_read
2ee80     00 4A 05 F6 | 	mov	COUNT_, #0
2ee84     A8 00 A0 FD | 	call	#pushregs_
2ee88     1C F0 07 F1 | 	add	ptra, #28
2ee8c     04 4E 05 F1 | 	add	fp, #4
2ee90     A7 12 62 FC | 	wrlong	arg01, fp
2ee94     04 4E 05 F1 | 	add	fp, #4
2ee98     A7 14 62 FC | 	wrlong	arg02, fp
2ee9c     04 4E 05 F1 | 	add	fp, #4
2eea0     A7 16 62 FC | 	wrlong	arg03, fp
2eea4     08 4E 85 F1 | 	sub	fp, #8
2eea8     A7 12 02 FB | 	rdlong	arg01, fp
2eeac     09 13 0A FB | 	rdlong	arg01, arg01 wz
2eeb0     0C 4E 05 F1 | 	add	fp, #12
2eeb4     A7 12 62 FC | 	wrlong	arg01, fp
2eeb8     10 4E 85 F1 | 	sub	fp, #16
2eebc                 | '         return _seterror( 5 );
2eebc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2eec0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2eec4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2eec8     01 FA 65 A6 |  if_e	neg	result1, #1
2eecc     B8 00 90 AD |  if_e	jmp	#LR__4772
2eed0     10 4E 05 F1 | 	add	fp, #16
2eed4     A7 12 02 FB | 	rdlong	arg01, fp
2eed8     02 00 00 FF 
2eedc     14 12 06 F1 | 	add	arg01, ##1044
2eee0     08 4E 85 F1 | 	sub	fp, #8
2eee4     A7 14 02 FB | 	rdlong	arg02, fp
2eee8     04 4E 05 F1 | 	add	fp, #4
2eeec     A7 16 02 FB | 	rdlong	arg03, fp
2eef0     0C 4E 05 F1 | 	add	fp, #12
2eef4     A7 18 02 F6 | 	mov	arg04, fp
2eef8     18 4E 85 F1 | 	sub	fp, #24
2eefc     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2ef00     14 4E 05 F1 | 	add	fp, #20
2ef04     A7 FA 61 FC | 	wrlong	result1, fp
2ef08     14 4E 85 F1 | 	sub	fp, #20
2ef0c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ef10     34 00 90 AD |  if_e	jmp	#LR__4770
2ef14     04 4E 05 F1 | 	add	fp, #4
2ef18     A7 18 02 FB | 	rdlong	arg04, fp
2ef1c     0C 17 02 F6 | 	mov	arg03, arg04
2ef20     08 18 06 F1 | 	add	arg04, #8
2ef24     0C 19 02 FB | 	rdlong	arg04, arg04
2ef28     20 18 46 F5 | 	or	arg04, #32
2ef2c     08 16 06 F1 | 	add	arg03, #8
2ef30     0B 19 62 FC | 	wrlong	arg04, arg03
2ef34                 | '         fil->state |=  (0x20) ;
2ef34                 | '         return _set_dos_error(r);
2ef34     10 4E 05 F1 | 	add	fp, #16
2ef38     A7 12 02 FB | 	rdlong	arg01, fp
2ef3c     14 4E 85 F1 | 	sub	fp, #20
2ef40     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ef44     40 00 90 FD | 	jmp	#LR__4772
2ef48                 | LR__4770
2ef48     18 4E 05 F1 | 	add	fp, #24
2ef4c     A7 FA 09 FB | 	rdlong	result1, fp wz
2ef50     18 4E 85 F1 | 	sub	fp, #24
2ef54     24 00 90 5D |  if_ne	jmp	#LR__4771
2ef58     04 4E 05 F1 | 	add	fp, #4
2ef5c     A7 FA 01 FB | 	rdlong	result1, fp
2ef60     FD 18 02 F6 | 	mov	arg04, result1
2ef64     04 4E 85 F1 | 	sub	fp, #4
2ef68     08 FA 05 F1 | 	add	result1, #8
2ef6c     FD FA 01 FB | 	rdlong	result1, result1
2ef70     10 FA 45 F5 | 	or	result1, #16
2ef74     08 18 06 F1 | 	add	arg04, #8
2ef78     0C FB 61 FC | 	wrlong	result1, arg04
2ef7c                 | LR__4771
2ef7c                 | '         fil->state |=  (0x10) ;
2ef7c                 | '     }
2ef7c                 | '     return x;
2ef7c     18 4E 05 F1 | 	add	fp, #24
2ef80     A7 FA 01 FB | 	rdlong	result1, fp
2ef84     18 4E 85 F1 | 	sub	fp, #24
2ef88                 | LR__4772
2ef88     A7 F0 03 F6 | 	mov	ptra, fp
2ef8c     B2 00 A0 FD | 	call	#popregs_
2ef90                 | _fatfs_cc_v_read_ret
2ef90     2D 00 64 FD | 	ret
2ef94                 | 
2ef94                 | _fatfs_cc_v_write
2ef94     00 4A 05 F6 | 	mov	COUNT_, #0
2ef98     A8 00 A0 FD | 	call	#pushregs_
2ef9c     1C F0 07 F1 | 	add	ptra, #28
2efa0     04 4E 05 F1 | 	add	fp, #4
2efa4     A7 12 62 FC | 	wrlong	arg01, fp
2efa8     04 4E 05 F1 | 	add	fp, #4
2efac     A7 14 62 FC | 	wrlong	arg02, fp
2efb0     04 4E 05 F1 | 	add	fp, #4
2efb4     A7 16 62 FC | 	wrlong	arg03, fp
2efb8     08 4E 85 F1 | 	sub	fp, #8
2efbc     A7 12 02 FB | 	rdlong	arg01, fp
2efc0     09 13 0A FB | 	rdlong	arg01, arg01 wz
2efc4     0C 4E 05 F1 | 	add	fp, #12
2efc8     A7 12 62 FC | 	wrlong	arg01, fp
2efcc     10 4E 85 F1 | 	sub	fp, #16
2efd0                 | '         return _seterror( 5 );
2efd0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2efd4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2efd8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2efdc     01 FA 65 A6 |  if_e	neg	result1, #1
2efe0     84 00 90 AD |  if_e	jmp	#LR__4781
2efe4     10 4E 05 F1 | 	add	fp, #16
2efe8     A7 12 02 FB | 	rdlong	arg01, fp
2efec     02 00 00 FF 
2eff0     14 12 06 F1 | 	add	arg01, ##1044
2eff4     08 4E 85 F1 | 	sub	fp, #8
2eff8     A7 14 02 FB | 	rdlong	arg02, fp
2effc     04 4E 05 F1 | 	add	fp, #4
2f000     A7 16 02 FB | 	rdlong	arg03, fp
2f004     0C 4E 05 F1 | 	add	fp, #12
2f008     A7 18 02 F6 | 	mov	arg04, fp
2f00c     18 4E 85 F1 | 	sub	fp, #24
2f010     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2f014     14 4E 05 F1 | 	add	fp, #20
2f018     A7 FA 61 FC | 	wrlong	result1, fp
2f01c     14 4E 85 F1 | 	sub	fp, #20
2f020     00 FA 0D F2 | 	cmp	result1, #0 wz
2f024     34 00 90 AD |  if_e	jmp	#LR__4780
2f028     04 4E 05 F1 | 	add	fp, #4
2f02c     A7 18 02 FB | 	rdlong	arg04, fp
2f030     0C 17 02 F6 | 	mov	arg03, arg04
2f034     08 18 06 F1 | 	add	arg04, #8
2f038     0C 19 02 FB | 	rdlong	arg04, arg04
2f03c     20 18 46 F5 | 	or	arg04, #32
2f040     08 16 06 F1 | 	add	arg03, #8
2f044     0B 19 62 FC | 	wrlong	arg04, arg03
2f048                 | '         fil->state |=  (0x20) ;
2f048                 | '         return _set_dos_error(r);
2f048     10 4E 05 F1 | 	add	fp, #16
2f04c     A7 12 02 FB | 	rdlong	arg01, fp
2f050     14 4E 85 F1 | 	sub	fp, #20
2f054     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f058     0C 00 90 FD | 	jmp	#LR__4781
2f05c                 | LR__4780
2f05c                 | '     }
2f05c                 | '     return x;
2f05c     18 4E 05 F1 | 	add	fp, #24
2f060     A7 FA 01 FB | 	rdlong	result1, fp
2f064     18 4E 85 F1 | 	sub	fp, #24
2f068                 | LR__4781
2f068     A7 F0 03 F6 | 	mov	ptra, fp
2f06c     B2 00 A0 FD | 	call	#popregs_
2f070                 | _fatfs_cc_v_write_ret
2f070     2D 00 64 FD | 	ret
2f074                 | 
2f074                 | _fatfs_cc_v_lseek
2f074     04 4A 05 F6 | 	mov	COUNT_, #4
2f078     A8 00 A0 FD | 	call	#pushregs_
2f07c     0A 1F 02 F6 | 	mov	local01, arg02
2f080     0B 21 02 F6 | 	mov	local02, arg03
2f084     09 23 02 FB | 	rdlong	local03, arg01
2f088     02 00 00 FF 
2f08c     14 22 0E F1 | 	add	local03, ##1044 wz
2f090                 | '         return _seterror( 5 );
2f090     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f094     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f098     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f09c     01 FA 65 A6 |  if_e	neg	result1, #1
2f0a0     4C 00 90 AD |  if_e	jmp	#LR__4792
2f0a4     00 20 0E F2 | 	cmp	local02, #0 wz
2f0a8     24 00 90 AD |  if_e	jmp	#LR__4790
2f0ac     01 20 0E F2 | 	cmp	local02, #1 wz
2f0b0     14 22 06 A1 |  if_e	add	local03, #20
2f0b4     11 25 02 AB |  if_e	rdlong	local04, local03
2f0b8     14 22 86 A1 |  if_e	sub	local03, #20
2f0bc     12 1F 02 A1 |  if_e	add	local01, local04
2f0c0     0C 22 06 51 |  if_ne	add	local03, #12
2f0c4     11 25 02 5B |  if_ne	rdlong	local04, local03
2f0c8     0C 22 86 51 |  if_ne	sub	local03, #12
2f0cc     12 1F 02 51 |  if_ne	add	local01, local04
2f0d0                 | LR__4790
2f0d0     0F 15 02 F6 | 	mov	arg02, local01
2f0d4     11 13 02 F6 | 	mov	arg01, local03
2f0d8     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2f0dc     FD 12 0A F6 | 	mov	arg01, result1 wz
2f0e0     08 00 90 AD |  if_e	jmp	#LR__4791
2f0e4                 | '         return _set_dos_error(result);
2f0e4     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f0e8     04 00 90 FD | 	jmp	#LR__4792
2f0ec                 | LR__4791
2f0ec                 | '     }
2f0ec                 | '     return offset;
2f0ec     0F FB 01 F6 | 	mov	result1, local01
2f0f0                 | LR__4792
2f0f0     A7 F0 03 F6 | 	mov	ptra, fp
2f0f4     B2 00 A0 FD | 	call	#popregs_
2f0f8                 | _fatfs_cc_v_lseek_ret
2f0f8     2D 00 64 FD | 	ret
2f0fc                 | 
2f0fc                 | _fatfs_cc_v_ioctl
2f0fc                 | ' {
2f0fc                 | '     return _seterror( 10 );
2f0fc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2f100     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2f104     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2f108     01 FA 65 F6 | 	neg	result1, #1
2f10c                 | _fatfs_cc_v_ioctl_ret
2f10c     2D 00 64 FD | 	ret
2f110                 | 
2f110                 | _fatfs_cc_v_mkdir
2f110     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
2f114     FD 12 02 F6 | 	mov	arg01, result1
2f118                 | ' 
2f118                 | '     r = f_mkdir(name);
2f118                 | '     return _set_dos_error(r);
2f118     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f11c                 | _fatfs_cc_v_mkdir_ret
2f11c     2D 00 64 FD | 	ret
2f120                 | 
2f120                 | _fatfs_cc_v_remove
2f120     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2f124     FD 12 02 F6 | 	mov	arg01, result1
2f128                 | ' 
2f128                 | '     r = f_unlink(name);
2f128                 | '     return _set_dos_error(r);
2f128     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f12c                 | _fatfs_cc_v_remove_ret
2f12c     2D 00 64 FD | 	ret
2f130                 | 
2f130                 | _fatfs_cc_v_rmdir
2f130     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2f134     FD 12 02 F6 | 	mov	arg01, result1
2f138                 | ' 
2f138                 | '     r = f_unlink(name);
2f138                 | '     return _set_dos_error(r);
2f138     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f13c                 | _fatfs_cc_v_rmdir_ret
2f13c     2D 00 64 FD | 	ret
2f140                 | 
2f140                 | _fatfs_cc_v_rename
2f140     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
2f144     FD 12 02 F6 | 	mov	arg01, result1
2f148                 | '     return _set_dos_error(r);
2f148     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f14c                 | _fatfs_cc_v_rename_ret
2f14c     2D 00 64 FD | 	ret
2f150                 | 
2f150                 | _fatfs_cc_v_open
2f150     07 4A 05 F6 | 	mov	COUNT_, #7
2f154     A8 00 A0 FD | 	call	#pushregs_
2f158     09 1F 02 F6 | 	mov	local01, arg01
2f15c     0A 21 02 F6 | 	mov	local02, arg02
2f160     0B 23 02 F6 | 	mov	local03, arg03
2f164     03 00 00 FF 
2f168     3C 12 06 F6 | 	mov	arg01, ##1596
2f16c                 | '     return _gc_alloc(size);
2f16c     10 14 06 F6 | 	mov	arg02, #16
2f170     9C 56 BF FD | 	call	#__system___gc_doalloc
2f174     FD 24 0A F6 | 	mov	local04, result1 wz
2f178                 | '       return _seterror( 7 );
2f178     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f17c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2f180     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f184     01 FA 65 A6 |  if_e	neg	result1, #1
2f188     98 00 90 AD |  if_e	jmp	#LR__4806
2f18c     12 13 02 F6 | 	mov	arg01, local04
2f190     00 14 06 F6 | 	mov	arg02, #0
2f194     03 00 00 FF 
2f198     3C 16 06 F6 | 	mov	arg03, ##1596
2f19c     98 00 A0 FD | 	call	#\builtin_bytefill_
2f1a0                 | '   switch (flags & 3) {
2f1a0     11 27 02 F6 | 	mov	local05, local03
2f1a4     03 26 0E F5 | 	and	local05, #3 wz
2f1a8     0C 00 90 AD |  if_e	jmp	#LR__4800
2f1ac     01 26 0E F2 | 	cmp	local05, #1 wz
2f1b0     0C 00 90 AD |  if_e	jmp	#LR__4801
2f1b4     10 00 90 FD | 	jmp	#LR__4802
2f1b8                 | LR__4800
2f1b8     01 28 06 F6 | 	mov	local06, #1
2f1bc                 | '       fs_flags =  0x01 ;
2f1bc                 | '       break;
2f1bc     0C 00 90 FD | 	jmp	#LR__4803
2f1c0                 | LR__4801
2f1c0     02 28 06 F6 | 	mov	local06, #2
2f1c4                 | '       fs_flags =  0x02 ;
2f1c4                 | '       break;
2f1c4     04 00 90 FD | 	jmp	#LR__4803
2f1c8                 | LR__4802
2f1c8     03 28 06 F6 | 	mov	local06, #3
2f1cc                 | '       fs_flags =  0x01  |  0x02 ;
2f1cc                 | '       break;
2f1cc                 | LR__4803
2f1cc     08 22 CE F7 | 	test	local03, #8 wz
2f1d0     18 28 46 55 |  if_ne	or	local06, #24
2f1d4     08 00 90 5D |  if_ne	jmp	#LR__4804
2f1d8     20 22 CE F7 | 	test	local03, #32 wz
2f1dc     30 28 46 55 |  if_ne	or	local06, #48
2f1e0                 | LR__4804
2f1e0     02 00 00 FF 
2f1e4     14 24 06 F1 | 	add	local04, ##1044
2f1e8     12 13 02 F6 | 	mov	arg01, local04
2f1ec     02 00 00 FF 
2f1f0     14 24 86 F1 | 	sub	local04, ##1044
2f1f4     10 15 02 F6 | 	mov	arg02, local02
2f1f8     14 17 02 F6 | 	mov	arg03, local06
2f1fc     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
2f200     FD 2A 0A F6 | 	mov	local07, result1 wz
2f204     14 00 90 AD |  if_e	jmp	#LR__4805
2f208     12 13 02 F6 | 	mov	arg01, local04
2f20c                 | '     return _gc_free(ptr);
2f20c     0C 57 BF FD | 	call	#__system___gc_free
2f210                 | '     free(f);
2f210                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f210                 | '     return _set_dos_error(r);
2f210     15 13 02 F6 | 	mov	arg01, local07
2f214     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f218     08 00 90 FD | 	jmp	#LR__4806
2f21c                 | LR__4805
2f21c     0F 25 62 FC | 	wrlong	local04, local01
2f220                 | '   }
2f220                 | '   fil->vfsdata = f;
2f220                 | '   return 0;
2f220     00 FA 05 F6 | 	mov	result1, #0
2f224                 | LR__4806
2f224     A7 F0 03 F6 | 	mov	ptra, fp
2f228     B2 00 A0 FD | 	call	#popregs_
2f22c                 | _fatfs_cc_v_open_ret
2f22c     2D 00 64 FD | 	ret
2f230                 | 
2f230                 | _fatfs_cc_v_flush
2f230     09 13 02 FB | 	rdlong	arg01, arg01
2f234     02 00 00 FF 
2f238     14 12 0E F1 | 	add	arg01, ##1044 wz
2f23c                 | '         return _seterror( 5 );
2f23c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f240     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f244     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f248     01 FA 65 A6 |  if_e	neg	result1, #1
2f24c     0C 00 90 AD |  if_e	jmp	#LR__4810
2f250     00 DA BF FD | 	call	#_fatfs_cc_f_sync
2f254     FD 12 02 F6 | 	mov	arg01, result1
2f258                 | '     }
2f258                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f258                 | '     result = f_sync(f);
2f258                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f258                 | '     return _set_dos_error(result);
2f258     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f25c                 | LR__4810
2f25c                 | _fatfs_cc_v_flush_ret
2f25c     2D 00 64 FD | 	ret
2f260                 | 
2f260                 | _fatfs_cc_v_init
2f260                 | ' {
2f260                 | '     return 0;
2f260     00 FA 05 F6 | 	mov	result1, #0
2f264                 | _fatfs_cc_v_init_ret
2f264     2D 00 64 FD | 	ret
2f268                 | 
2f268                 | _fatfs_cc_v_deinit
2f268     80 01 00 FF 
2f26c     DC 15 06 F6 | 	mov	arg02, ##@LR__5006
2f270     00 12 06 F6 | 	mov	arg01, #0
2f274     00 16 06 F6 | 	mov	arg03, #0
2f278     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
2f27c     01 00 00 FF 
2f280     08 E4 05 F1 | 	add	objptr, ##520
2f284     F2 12 02 FB | 	rdlong	arg01, objptr
2f288     04 E4 05 F1 | 	add	objptr, #4
2f28c     F2 14 02 FB | 	rdlong	arg02, objptr
2f290     01 00 00 FF 
2f294     0C E4 85 F1 | 	sub	objptr, ##524
2f298     14 3E BF FD | 	call	#__system___freepins
2f29c                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f29c                 | '     _freepins(f_pinmask);
2f29c                 | '     return 0;
2f29c     00 FA 05 F6 | 	mov	result1, #0
2f2a0                 | _fatfs_cc_v_deinit_ret
2f2a0     2D 00 64 FD | 	ret
2f2a4                 | 
2f2a4                 | _fatfs_cc_get_vfs
2f2a4     01 4A 05 F6 | 	mov	COUNT_, #1
2f2a8     A8 00 A0 FD | 	call	#pushregs_
2f2ac     09 1F 02 F6 | 	mov	local01, arg01
2f2b0     50 12 06 F6 | 	mov	arg01, #80
2f2b4     28 55 BF FD | 	call	#__system___gc_alloc_managed
2f2b8     FD 12 02 F6 | 	mov	arg01, result1
2f2bc     F2 FA 01 F6 | 	mov	result1, objptr
2f2c0     00 E8 04 FF 
2f2c4     00 FA 45 F5 | 	or	result1, ##164626432
2f2c8     09 FB 61 FC | 	wrlong	result1, arg01
2f2cc     F2 FA 01 F6 | 	mov	result1, objptr
2f2d0     00 F0 04 FF 
2f2d4     00 FA 45 F5 | 	or	result1, ##165675008
2f2d8     04 12 06 F1 | 	add	arg01, #4
2f2dc     09 FB 61 FC | 	wrlong	result1, arg01
2f2e0     F2 FA 01 F6 | 	mov	result1, objptr
2f2e4     00 F8 04 FF 
2f2e8     00 FA 45 F5 | 	or	result1, ##166723584
2f2ec     04 12 06 F1 | 	add	arg01, #4
2f2f0     09 FB 61 FC | 	wrlong	result1, arg01
2f2f4     F2 FA 01 F6 | 	mov	result1, objptr
2f2f8     00 00 05 FF 
2f2fc     00 FA 45 F5 | 	or	result1, ##167772160
2f300     04 12 06 F1 | 	add	arg01, #4
2f304     09 FB 61 FC | 	wrlong	result1, arg01
2f308     F2 FA 01 F6 | 	mov	result1, objptr
2f30c     00 08 05 FF 
2f310     00 FA 45 F5 | 	or	result1, ##168820736
2f314     04 12 06 F1 | 	add	arg01, #4
2f318     09 FB 61 FC | 	wrlong	result1, arg01
2f31c     04 12 06 F1 | 	add	arg01, #4
2f320     09 01 68 FC | 	wrlong	#0, arg01
2f324     04 12 06 F1 | 	add	arg01, #4
2f328     09 1F 62 FC | 	wrlong	local01, arg01
2f32c     04 12 06 F1 | 	add	arg01, #4
2f330     09 01 68 FC | 	wrlong	#0, arg01
2f334     F2 FA 01 F6 | 	mov	result1, objptr
2f338     00 10 05 FF 
2f33c     00 FA 45 F5 | 	or	result1, ##169869312
2f340     04 12 06 F1 | 	add	arg01, #4
2f344     09 FB 61 FC | 	wrlong	result1, arg01
2f348     F2 FA 01 F6 | 	mov	result1, objptr
2f34c     00 18 05 FF 
2f350     00 FA 45 F5 | 	or	result1, ##170917888
2f354     04 12 06 F1 | 	add	arg01, #4
2f358     09 FB 61 FC | 	wrlong	result1, arg01
2f35c     F2 FA 01 F6 | 	mov	result1, objptr
2f360     00 20 05 FF 
2f364     00 FA 45 F5 | 	or	result1, ##171966464
2f368     04 12 06 F1 | 	add	arg01, #4
2f36c     09 FB 61 FC | 	wrlong	result1, arg01
2f370     F2 FA 01 F6 | 	mov	result1, objptr
2f374     00 28 05 FF 
2f378     00 FA 45 F5 | 	or	result1, ##173015040
2f37c     04 12 06 F1 | 	add	arg01, #4
2f380     09 FB 61 FC | 	wrlong	result1, arg01
2f384     F2 FA 01 F6 | 	mov	result1, objptr
2f388     00 30 05 FF 
2f38c     00 FA 45 F5 | 	or	result1, ##174063616
2f390     04 12 06 F1 | 	add	arg01, #4
2f394     09 FB 61 FC | 	wrlong	result1, arg01
2f398     F2 FA 01 F6 | 	mov	result1, objptr
2f39c     00 38 05 FF 
2f3a0     00 FA 45 F5 | 	or	result1, ##175112192
2f3a4     04 12 06 F1 | 	add	arg01, #4
2f3a8     09 FB 61 FC | 	wrlong	result1, arg01
2f3ac     F2 FA 01 F6 | 	mov	result1, objptr
2f3b0     00 40 05 FF 
2f3b4     00 FA 45 F5 | 	or	result1, ##176160768
2f3b8     04 12 06 F1 | 	add	arg01, #4
2f3bc     09 FB 61 FC | 	wrlong	result1, arg01
2f3c0     F2 FA 01 F6 | 	mov	result1, objptr
2f3c4     00 48 05 FF 
2f3c8     00 FA 45 F5 | 	or	result1, ##177209344
2f3cc     04 12 06 F1 | 	add	arg01, #4
2f3d0     09 FB 61 FC | 	wrlong	result1, arg01
2f3d4     F2 FA 01 F6 | 	mov	result1, objptr
2f3d8     00 50 05 FF 
2f3dc     00 FA 45 F5 | 	or	result1, ##178257920
2f3e0     04 12 06 F1 | 	add	arg01, #4
2f3e4     09 FB 61 FC | 	wrlong	result1, arg01
2f3e8     F2 FA 01 F6 | 	mov	result1, objptr
2f3ec     00 58 05 FF 
2f3f0     00 FA 45 F5 | 	or	result1, ##179306496
2f3f4     04 12 06 F1 | 	add	arg01, #4
2f3f8     09 FB 61 FC | 	wrlong	result1, arg01
2f3fc     F2 FA 01 F6 | 	mov	result1, objptr
2f400     00 60 05 FF 
2f404     00 FA 45 F5 | 	or	result1, ##180355072
2f408     04 12 06 F1 | 	add	arg01, #4
2f40c     09 FB 61 FC | 	wrlong	result1, arg01
2f410     F2 FA 01 F6 | 	mov	result1, objptr
2f414     00 68 05 FF 
2f418     00 FA 45 F5 | 	or	result1, ##181403648
2f41c     04 12 06 F1 | 	add	arg01, #4
2f420     09 FB 61 FC | 	wrlong	result1, arg01
2f424     4C 12 86 F1 | 	sub	arg01, #76
2f428                 | ' 
2f428                 | '     v->close = &v_close;
2f428                 | '     v->read = &v_read;
2f428                 | '     v->write = &v_write;
2f428                 | '     v->lseek = &v_lseek;
2f428                 | '     v->ioctl = &v_ioctl;
2f428                 | '     v->flush = 0;
2f428                 | '     v->vfs_data = ptr;
2f428                 | '     v->reserved = 0;
2f428                 | ' 
2f428                 | '     v->open = &v_open;
2f428                 | '     v->creat = &v_creat;
2f428                 | '     v->opendir = &v_opendir;
2f428                 | '     v->closedir = &v_closedir;
2f428                 | '     v->readdir = &v_readdir;
2f428                 | '     v->stat = &v_stat;
2f428                 | ' 
2f428                 | '     v->mkdir = &v_mkdir;
2f428                 | '     v->rmdir = &v_rmdir;
2f428                 | ' 
2f428                 | '     v->remove = &v_remove;
2f428                 | '     v->rename = &v_rename;
2f428                 | ' 
2f428                 | '     v->init = &v_init;
2f428                 | '     v->deinit = &v_deinit;
2f428                 | ' 
2f428                 | '     return v;
2f428     09 FB 01 F6 | 	mov	result1, arg01
2f42c     A7 F0 03 F6 | 	mov	ptra, fp
2f430     B2 00 A0 FD | 	call	#popregs_
2f434                 | _fatfs_cc_get_vfs_ret
2f434     2D 00 64 FD | 	ret
2f438                 | 
2f438                 | _fatfs_cc_xmit_mmc_1109
2f438     01 00 00 FF 
2f43c     10 E4 05 F1 | 	add	objptr, ##528
2f440     F2 00 02 FB | 	rdlong	_var01, objptr
2f444     08 E4 05 F1 | 	add	objptr, #8
2f448     F2 02 02 FB | 	rdlong	_var02, objptr
2f44c     01 00 00 FF 
2f450     18 E4 85 F1 | 	sub	objptr, ##536
2f454     40 02 62 FD | 	dirl	_var02
2f458     28 02 64 FD | 	setq	#1
2f45c     09 05 02 FB | 	rdlong	_var03, arg01
2f460     69 04 62 FD | 	rev	_var03
2f464     1B 04 FE F9 | 	movbyts	_var03, #27
2f468     01 05 22 FC | 	wypin	_var03, _var02
2f46c     0A 05 02 F6 | 	mov	_var03, arg02
2f470     02 14 4E F0 | 	shr	arg02, #2 wz
2f474     03 04 66 F0 | 	shl	_var03, #3
2f478     00 05 22 FC | 	wypin	_var03, _var01
2f47c     41 02 62 FD | 	dirh	_var02
2f480     08 12 06 F1 | 	add	arg01, #8
2f484     69 06 62 FD | 	rev	_var04
2f488     1B 06 FE F9 | 	movbyts	_var04, #27
2f48c                 | LR__4820
2f48c     01 07 22 5C |  if_ne	wypin	_var04, _var02
2f490     09 07 02 5B |  if_ne	rdlong	_var04, arg01
2f494     04 12 06 51 |  if_ne	add	arg01, #4
2f498     69 06 62 5D |  if_ne	rev	_var04
2f49c     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
2f4a0                 | LR__4821
2f4a0     40 02 72 5D |  if_ne	testp	_var02 wc
2f4a4     F8 FF 9F 1D |  if_a	jmp	#LR__4821
2f4a8     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4820
2f4ac                 | LR__4822
2f4ac     40 00 72 FD | 	testp	_var01 wc
2f4b0     F8 FF 9F 3D |  if_ae	jmp	#LR__4822
2f4b4     40 02 62 FD | 	dirl	_var02
2f4b8     FF FF FF FF 
2f4bc     01 FF 2B FC | 	wypin	##-1, _var02
2f4c0     41 02 62 FD | 	dirh	_var02
2f4c4                 | _fatfs_cc_xmit_mmc_1109_ret
2f4c4     2D 00 64 FD | 	ret
2f4c8                 | 
2f4c8                 | _fatfs_cc_rcvr_mmc_1116
2f4c8     01 00 00 FF 
2f4cc     10 E4 05 F1 | 	add	objptr, ##528
2f4d0     F2 00 02 FB | 	rdlong	_var01, objptr
2f4d4     0C E4 05 F1 | 	add	objptr, #12
2f4d8     F2 02 02 FB | 	rdlong	_var02, objptr
2f4dc     01 00 00 FF 
2f4e0     1C E4 85 F1 | 	sub	objptr, ##540
2f4e4     01 03 08 FC | 	akpin	_var02
2f4e8     0A 05 0A F6 | 	mov	_var03, arg02 wz
2f4ec     02 04 4E F0 | 	shr	_var03, #2 wz
2f4f0     30 00 90 AD |  if_e	jmp	#LR__4832
2f4f4     02 07 02 F6 | 	mov	_var04, _var03
2f4f8     05 06 66 F0 | 	shl	_var04, #5
2f4fc     00 07 22 FC | 	wypin	_var04, _var01
2f500     01 7F 18 FC | 	wxpin	#63, _var02
2f504                 | LR__4830
2f504                 | LR__4831
2f504     40 02 72 FD | 	testp	_var02 wc
2f508     F8 FF 9F 3D |  if_ae	jmp	#LR__4831
2f50c     01 07 8A FA | 	rdpin	_var04, _var02
2f510     69 06 62 FD | 	rev	_var04
2f514     1B 06 FE F9 | 	movbyts	_var04, #27
2f518     09 07 62 FC | 	wrlong	_var04, arg01
2f51c     04 12 06 F1 | 	add	arg01, #4
2f520     F8 05 6E FB | 	djnz	_var03, #LR__4830
2f524                 | LR__4832
2f524     03 14 0E F5 | 	and	arg02, #3 wz
2f528     24 00 90 AD |  if_e	jmp	#LR__4835
2f52c     01 4F 18 FC | 	wxpin	#39, _var02
2f530                 | LR__4833
2f530     00 11 28 FC | 	wypin	#8, _var01
2f534                 | LR__4834
2f534     40 02 72 FD | 	testp	_var02 wc
2f538     F8 FF 9F 3D |  if_ae	jmp	#LR__4834
2f53c     01 07 8A FA | 	rdpin	_var04, _var02
2f540     69 06 62 FD | 	rev	_var04
2f544     09 07 42 FC | 	wrbyte	_var04, arg01
2f548     01 12 06 F1 | 	add	arg01, #1
2f54c     F8 15 6E FB | 	djnz	arg02, #LR__4833
2f550                 | LR__4835
2f550                 | _fatfs_cc_rcvr_mmc_1116_ret
2f550     2D 00 64 FD | 	ret
2f554                 | 
2f554                 | _fatfs_cc_wait_ready_1120
2f554     01 4A 05 F6 | 	mov	COUNT_, #1
2f558     A8 00 A0 FD | 	call	#pushregs_
2f55c     10 F0 07 F1 | 	add	ptra, #16
2f560     1A FA 61 FD | 	getct	result1
2f564     08 4E 05 F1 | 	add	fp, #8
2f568     A7 FA 61 FC | 	wrlong	result1, fp
2f56c     14 1E 06 FB | 	rdlong	local01, #20
2f570     01 1E 46 F0 | 	shr	local01, #1
2f574     04 4E 05 F1 | 	add	fp, #4
2f578     A7 1E 62 FC | 	wrlong	local01, fp
2f57c     0C 4E 85 F1 | 	sub	fp, #12
2f580                 | ' {
2f580                 | ' 	BYTE d;
2f580                 | ' 	UINT tmr, tmout;
2f580                 | ' 
2f580                 | ' 	tmr = _cnt();
2f580                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2f580                 | ' 	for(;;) {
2f580                 | LR__4840
2f580     04 4E 05 F1 | 	add	fp, #4
2f584     A7 12 02 F6 | 	mov	arg01, fp
2f588     04 4E 85 F1 | 	sub	fp, #4
2f58c     01 14 06 F6 | 	mov	arg02, #1
2f590     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f594     04 4E 05 F1 | 	add	fp, #4
2f598     A7 1E C2 FA | 	rdbyte	local01, fp
2f59c     04 4E 85 F1 | 	sub	fp, #4
2f5a0     FF 1E 0E F2 | 	cmp	local01, #255 wz
2f5a4     01 FA 05 A6 |  if_e	mov	result1, #1
2f5a8     28 00 90 AD |  if_e	jmp	#LR__4841
2f5ac     1A FA 61 FD | 	getct	result1
2f5b0     08 4E 05 F1 | 	add	fp, #8
2f5b4     A7 1E 02 FB | 	rdlong	local01, fp
2f5b8     0F FB 81 F1 | 	sub	result1, local01
2f5bc     04 4E 05 F1 | 	add	fp, #4
2f5c0     A7 1E 02 FB | 	rdlong	local01, fp
2f5c4     0C 4E 85 F1 | 	sub	fp, #12
2f5c8     0F FB 11 F2 | 	cmp	result1, local01 wc
2f5cc     00 FA 05 36 |  if_ae	mov	result1, #0
2f5d0     AC FF 9F CD |  if_b	jmp	#LR__4840
2f5d4                 | LR__4841
2f5d4     A7 F0 03 F6 | 	mov	ptra, fp
2f5d8     B2 00 A0 FD | 	call	#popregs_
2f5dc                 | _fatfs_cc_wait_ready_1120_ret
2f5dc     2D 00 64 FD | 	ret
2f5e0                 | 
2f5e0                 | _fatfs_cc_deselect_1126
2f5e0     00 4A 05 F6 | 	mov	COUNT_, #0
2f5e4     A8 00 A0 FD | 	call	#pushregs_
2f5e8     14 F0 07 F1 | 	add	ptra, #20
2f5ec     01 00 00 FF 
2f5f0     14 E4 05 F1 | 	add	objptr, ##532
2f5f4     F2 14 02 FB | 	rdlong	arg02, objptr
2f5f8     04 4E 05 F1 | 	add	fp, #4
2f5fc     A7 14 62 FC | 	wrlong	arg02, fp
2f600     04 E4 85 F1 | 	sub	objptr, #4
2f604     F2 14 02 FB | 	rdlong	arg02, objptr
2f608     04 4E 05 F1 | 	add	fp, #4
2f60c     A7 14 62 FC | 	wrlong	arg02, fp
2f610     08 E4 05 F1 | 	add	objptr, #8
2f614     F2 14 02 FB | 	rdlong	arg02, objptr
2f618     04 4E 05 F1 | 	add	fp, #4
2f61c     A7 14 62 FC | 	wrlong	arg02, fp
2f620     04 E4 05 F1 | 	add	objptr, #4
2f624     F2 14 02 FB | 	rdlong	arg02, objptr
2f628     01 00 00 FF 
2f62c     1C E4 85 F1 | 	sub	objptr, ##540
2f630     04 4E 05 F1 | 	add	fp, #4
2f634     A7 14 62 FC | 	wrlong	arg02, fp
2f638     0C 4E 85 F1 | 	sub	fp, #12
2f63c     A7 12 02 FB | 	rdlong	arg01, fp
2f640     04 4E 85 F1 | 	sub	fp, #4
2f644     59 12 62 FD | 	drvh	arg01
2f648     1F 20 64 FD | 	waitx	#16
2f64c     A7 12 02 F6 | 	mov	arg01, fp
2f650     01 14 06 F6 | 	mov	arg02, #1
2f654     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f658     A7 F0 03 F6 | 	mov	ptra, fp
2f65c     B2 00 A0 FD | 	call	#popregs_
2f660                 | _fatfs_cc_deselect_1126_ret
2f660     2D 00 64 FD | 	ret
2f664                 | 
2f664                 | _fatfs_cc_select_1130
2f664     00 4A 05 F6 | 	mov	COUNT_, #0
2f668     A8 00 A0 FD | 	call	#pushregs_
2f66c     10 F0 07 F1 | 	add	ptra, #16
2f670     01 00 00 FF 
2f674     14 E4 05 F1 | 	add	objptr, ##532
2f678     F2 14 02 FB | 	rdlong	arg02, objptr
2f67c     08 4E 05 F1 | 	add	fp, #8
2f680     A7 14 62 FC | 	wrlong	arg02, fp
2f684     08 E4 05 F1 | 	add	objptr, #8
2f688     F2 12 02 FB | 	rdlong	arg01, objptr
2f68c     01 00 00 FF 
2f690     1C E4 85 F1 | 	sub	objptr, ##540
2f694     04 4E 05 F1 | 	add	fp, #4
2f698     A7 12 62 FC | 	wrlong	arg01, fp
2f69c     50 12 62 FD | 	fltl	arg01
2f6a0     04 4E 85 F1 | 	sub	fp, #4
2f6a4     A7 12 02 FB | 	rdlong	arg01, fp
2f6a8     58 12 62 FD | 	drvl	arg01
2f6ac     1F 20 64 FD | 	waitx	#16
2f6b0     04 4E 05 F1 | 	add	fp, #4
2f6b4     A7 12 02 FB | 	rdlong	arg01, fp
2f6b8     41 12 62 FD | 	dirh	arg01
2f6bc     08 4E 85 F1 | 	sub	fp, #8
2f6c0     A7 12 02 F6 | 	mov	arg01, fp
2f6c4     04 4E 85 F1 | 	sub	fp, #4
2f6c8     01 14 06 F6 | 	mov	arg02, #1
2f6cc     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f6d0     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1120
2f6d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2f6d8     01 FA 05 56 |  if_ne	mov	result1, #1
2f6dc     08 00 90 5D |  if_ne	jmp	#LR__4850
2f6e0     FC FE BF FD | 	call	#_fatfs_cc_deselect_1126
2f6e4                 | ' 
2f6e4                 | ' 	deselect();
2f6e4                 | ' 	return 0;
2f6e4     00 FA 05 F6 | 	mov	result1, #0
2f6e8                 | LR__4850
2f6e8     A7 F0 03 F6 | 	mov	ptra, fp
2f6ec     B2 00 A0 FD | 	call	#popregs_
2f6f0                 | _fatfs_cc_select_1130_ret
2f6f0     2D 00 64 FD | 	ret
2f6f4                 | 
2f6f4                 | _fatfs_cc_rcvr_datablock_1134
2f6f4     01 4A 05 F6 | 	mov	COUNT_, #1
2f6f8     A8 00 A0 FD | 	call	#pushregs_
2f6fc     18 F0 07 F1 | 	add	ptra, #24
2f700     04 4E 05 F1 | 	add	fp, #4
2f704     A7 12 62 FC | 	wrlong	arg01, fp
2f708     04 4E 05 F1 | 	add	fp, #4
2f70c     A7 14 62 FC | 	wrlong	arg02, fp
2f710     1A FA 61 FD | 	getct	result1
2f714     08 4E 05 F1 | 	add	fp, #8
2f718     A7 FA 61 FC | 	wrlong	result1, fp
2f71c     14 1E 06 FB | 	rdlong	local01, #20
2f720     03 1E 46 F0 | 	shr	local01, #3
2f724     04 4E 05 F1 | 	add	fp, #4
2f728     A7 1E 62 FC | 	wrlong	local01, fp
2f72c     14 4E 85 F1 | 	sub	fp, #20
2f730                 | ' 	BYTE *buff,
2f730                 | ' 	UINT btr
2f730                 | ' )
2f730                 | ' {
2f730                 | ' 	BYTE d[2];
2f730                 | ' 	UINT tmr, tmout;
2f730                 | ' 
2f730                 | ' 	tmr = _cnt();
2f730                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2f730                 | ' 	for(;;) {
2f730                 | LR__4860
2f730     0C 4E 05 F1 | 	add	fp, #12
2f734     A7 12 02 F6 | 	mov	arg01, fp
2f738     0C 4E 85 F1 | 	sub	fp, #12
2f73c     01 14 06 F6 | 	mov	arg02, #1
2f740     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f744     0C 4E 05 F1 | 	add	fp, #12
2f748     A7 1E C2 FA | 	rdbyte	local01, fp
2f74c     0C 4E 85 F1 | 	sub	fp, #12
2f750     FF 1E 0E F2 | 	cmp	local01, #255 wz
2f754     28 00 90 5D |  if_ne	jmp	#LR__4861
2f758     1A FA 61 FD | 	getct	result1
2f75c     FD 1E 02 F6 | 	mov	local01, result1
2f760     10 4E 05 F1 | 	add	fp, #16
2f764     A7 14 02 FB | 	rdlong	arg02, fp
2f768     0A 1F 82 F1 | 	sub	local01, arg02
2f76c     04 4E 05 F1 | 	add	fp, #4
2f770     A7 14 02 FB | 	rdlong	arg02, fp
2f774     14 4E 85 F1 | 	sub	fp, #20
2f778     0A 1F 12 F2 | 	cmp	local01, arg02 wc
2f77c     B0 FF 9F CD |  if_b	jmp	#LR__4860
2f780                 | LR__4861
2f780     0C 4E 05 F1 | 	add	fp, #12
2f784     A7 1E C2 FA | 	rdbyte	local01, fp
2f788     0C 4E 85 F1 | 	sub	fp, #12
2f78c     FE 1E 0E F2 | 	cmp	local01, #254 wz
2f790     00 FA 05 56 |  if_ne	mov	result1, #0
2f794     30 00 90 5D |  if_ne	jmp	#LR__4862
2f798     04 4E 05 F1 | 	add	fp, #4
2f79c     A7 12 02 FB | 	rdlong	arg01, fp
2f7a0     04 4E 05 F1 | 	add	fp, #4
2f7a4     A7 14 02 FB | 	rdlong	arg02, fp
2f7a8     08 4E 85 F1 | 	sub	fp, #8
2f7ac     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f7b0     0C 4E 05 F1 | 	add	fp, #12
2f7b4     A7 12 02 F6 | 	mov	arg01, fp
2f7b8     0C 4E 85 F1 | 	sub	fp, #12
2f7bc     02 14 06 F6 | 	mov	arg02, #2
2f7c0     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f7c4                 | ' 
2f7c4                 | ' 	rcvr_mmc(buff, btr);
2f7c4                 | ' 	rcvr_mmc(d, 2);
2f7c4                 | ' 
2f7c4                 | ' 	return 1;
2f7c4     01 FA 05 F6 | 	mov	result1, #1
2f7c8                 | LR__4862
2f7c8     A7 F0 03 F6 | 	mov	ptra, fp
2f7cc     B2 00 A0 FD | 	call	#popregs_
2f7d0                 | _fatfs_cc_rcvr_datablock_1134_ret
2f7d0     2D 00 64 FD | 	ret
2f7d4                 | 
2f7d4                 | _fatfs_cc_xmit_datablock_1136
2f7d4     00 4A 05 F6 | 	mov	COUNT_, #0
2f7d8     A8 00 A0 FD | 	call	#pushregs_
2f7dc     10 F0 07 F1 | 	add	ptra, #16
2f7e0     04 4E 05 F1 | 	add	fp, #4
2f7e4     A7 12 62 FC | 	wrlong	arg01, fp
2f7e8     04 4E 05 F1 | 	add	fp, #4
2f7ec     A7 14 42 FC | 	wrbyte	arg02, fp
2f7f0     08 4E 85 F1 | 	sub	fp, #8
2f7f4     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1120
2f7f8     00 FA 0D F2 | 	cmp	result1, #0 wz
2f7fc     00 FA 05 A6 |  if_e	mov	result1, #0
2f800     90 00 90 AD |  if_e	jmp	#LR__4871
2f804     08 4E 05 F1 | 	add	fp, #8
2f808     A7 14 C2 FA | 	rdbyte	arg02, fp
2f80c     04 4E 05 F1 | 	add	fp, #4
2f810     A7 14 42 FC | 	wrbyte	arg02, fp
2f814     A7 12 02 F6 | 	mov	arg01, fp
2f818     0C 4E 85 F1 | 	sub	fp, #12
2f81c     01 14 06 F6 | 	mov	arg02, #1
2f820     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1109
2f824     08 4E 05 F1 | 	add	fp, #8
2f828     A7 14 C2 FA | 	rdbyte	arg02, fp
2f82c     08 4E 85 F1 | 	sub	fp, #8
2f830     FD 14 0E F2 | 	cmp	arg02, #253 wz
2f834     58 00 90 AD |  if_e	jmp	#LR__4870
2f838     04 4E 05 F1 | 	add	fp, #4
2f83c     A7 12 02 FB | 	rdlong	arg01, fp
2f840     04 4E 85 F1 | 	sub	fp, #4
2f844     09 14 C6 F9 | 	decod	arg02, #9
2f848     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1109
2f84c     0C 4E 05 F1 | 	add	fp, #12
2f850     A7 12 02 F6 | 	mov	arg01, fp
2f854     0C 4E 85 F1 | 	sub	fp, #12
2f858     02 14 06 F6 | 	mov	arg02, #2
2f85c     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f860     0C 4E 05 F1 | 	add	fp, #12
2f864     A7 12 02 F6 | 	mov	arg01, fp
2f868     0C 4E 85 F1 | 	sub	fp, #12
2f86c     01 14 06 F6 | 	mov	arg02, #1
2f870     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f874     0C 4E 05 F1 | 	add	fp, #12
2f878     A7 14 C2 FA | 	rdbyte	arg02, fp
2f87c     0C 4E 85 F1 | 	sub	fp, #12
2f880     1F 14 06 F5 | 	and	arg02, #31
2f884     05 14 0E F2 | 	cmp	arg02, #5 wz
2f888                 | ' 			return 0;
2f888     00 FA 05 56 |  if_ne	mov	result1, #0
2f88c     04 00 90 5D |  if_ne	jmp	#LR__4871
2f890                 | LR__4870
2f890                 | ' 	}
2f890                 | ' 
2f890                 | ' 	return 1;
2f890     01 FA 05 F6 | 	mov	result1, #1
2f894                 | LR__4871
2f894     A7 F0 03 F6 | 	mov	ptra, fp
2f898     B2 00 A0 FD | 	call	#popregs_
2f89c                 | _fatfs_cc_xmit_datablock_1136_ret
2f89c     2D 00 64 FD | 	ret
2f8a0                 | 
2f8a0                 | _fatfs_cc_send_cmd_1140
2f8a0     01 4A 05 F6 | 	mov	COUNT_, #1
2f8a4     A8 00 A0 FD | 	call	#pushregs_
2f8a8     1C F0 07 F1 | 	add	ptra, #28
2f8ac                 | _fatfs_cc_send_cmd_1140_enter
2f8ac     04 4E 05 F1 | 	add	fp, #4
2f8b0     A7 12 42 FC | 	wrbyte	arg01, fp
2f8b4     04 4E 05 F1 | 	add	fp, #4
2f8b8     A7 14 62 FC | 	wrlong	arg02, fp
2f8bc     04 4E 85 F1 | 	sub	fp, #4
2f8c0     A7 FA C1 FA | 	rdbyte	result1, fp
2f8c4     04 4E 85 F1 | 	sub	fp, #4
2f8c8     80 FA CD F7 | 	test	result1, #128 wz
2f8cc     44 00 90 AD |  if_e	jmp	#LR__4880
2f8d0     04 4E 05 F1 | 	add	fp, #4
2f8d4     A7 14 C2 FA | 	rdbyte	arg02, fp
2f8d8     7F 14 06 F5 | 	and	arg02, #127
2f8dc     A7 14 42 FC | 	wrbyte	arg02, fp
2f8e0     04 4E 85 F1 | 	sub	fp, #4
2f8e4     37 12 06 F6 | 	mov	arg01, #55
2f8e8     00 14 06 F6 | 	mov	arg02, #0
2f8ec     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1140
2f8f0     0C 4E 05 F1 | 	add	fp, #12
2f8f4     A7 FA 41 FC | 	wrbyte	result1, fp
2f8f8     A7 14 C2 FA | 	rdbyte	arg02, fp
2f8fc     0C 4E 85 F1 | 	sub	fp, #12
2f900     02 14 16 F2 | 	cmp	arg02, #2 wc
2f904     0C 4E 05 31 |  if_ae	add	fp, #12
2f908     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
2f90c     0C 4E 85 31 |  if_ae	sub	fp, #12
2f910     6C 01 90 3D |  if_ae	jmp	#LR__4884
2f914                 | LR__4880
2f914     04 4E 05 F1 | 	add	fp, #4
2f918     A7 14 C2 FA | 	rdbyte	arg02, fp
2f91c     04 4E 85 F1 | 	sub	fp, #4
2f920     0C 14 0E F2 | 	cmp	arg02, #12 wz
2f924     14 00 90 AD |  if_e	jmp	#LR__4881
2f928     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1126
2f92c     34 FD BF FD | 	call	#_fatfs_cc_select_1130
2f930     00 FA 0D F2 | 	cmp	result1, #0 wz
2f934     FF FA 05 A6 |  if_e	mov	result1, #255
2f938     44 01 90 AD |  if_e	jmp	#LR__4884
2f93c                 | LR__4881
2f93c     04 4E 05 F1 | 	add	fp, #4
2f940     A7 14 C2 FA | 	rdbyte	arg02, fp
2f944     40 FA 05 F6 | 	mov	result1, #64
2f948     0A FB 41 F5 | 	or	result1, arg02
2f94c     10 4E 05 F1 | 	add	fp, #16
2f950     A7 FA 41 FC | 	wrbyte	result1, fp
2f954     0C 4E 85 F1 | 	sub	fp, #12
2f958     A7 FA 01 FB | 	rdlong	result1, fp
2f95c     18 FA 45 F0 | 	shr	result1, #24
2f960     0D 4E 05 F1 | 	add	fp, #13
2f964     A7 FA 41 FC | 	wrbyte	result1, fp
2f968     0D 4E 85 F1 | 	sub	fp, #13
2f96c     A7 FA 01 FB | 	rdlong	result1, fp
2f970     10 FA 45 F0 | 	shr	result1, #16
2f974     0E 4E 05 F1 | 	add	fp, #14
2f978     A7 FA 41 FC | 	wrbyte	result1, fp
2f97c     0E 4E 85 F1 | 	sub	fp, #14
2f980     A7 FA 01 FB | 	rdlong	result1, fp
2f984     08 FA 45 F0 | 	shr	result1, #8
2f988     0F 4E 05 F1 | 	add	fp, #15
2f98c     A7 FA 41 FC | 	wrbyte	result1, fp
2f990     0F 4E 85 F1 | 	sub	fp, #15
2f994     A7 FA 01 FB | 	rdlong	result1, fp
2f998     10 4E 05 F1 | 	add	fp, #16
2f99c     A7 FA 41 FC | 	wrbyte	result1, fp
2f9a0     0C 4E 85 F1 | 	sub	fp, #12
2f9a4     A7 02 48 FC | 	wrbyte	#1, fp
2f9a8     08 4E 85 F1 | 	sub	fp, #8
2f9ac     A7 FA C9 FA | 	rdbyte	result1, fp wz
2f9b0     04 4E 85 F1 | 	sub	fp, #4
2f9b4     0C 4E 05 A1 |  if_e	add	fp, #12
2f9b8     A7 2A 49 AC |  if_e	wrbyte	#149, fp
2f9bc     0C 4E 85 A1 |  if_e	sub	fp, #12
2f9c0     04 4E 05 F1 | 	add	fp, #4
2f9c4     A7 FA C1 FA | 	rdbyte	result1, fp
2f9c8     04 4E 85 F1 | 	sub	fp, #4
2f9cc     08 FA 0D F2 | 	cmp	result1, #8 wz
2f9d0     0C 4E 05 A1 |  if_e	add	fp, #12
2f9d4     A7 0E 49 AC |  if_e	wrbyte	#135, fp
2f9d8     0C 4E 85 A1 |  if_e	sub	fp, #12
2f9dc     0C 4E 05 F1 | 	add	fp, #12
2f9e0     A7 14 C2 FA | 	rdbyte	arg02, fp
2f9e4     0D 4E 05 F1 | 	add	fp, #13
2f9e8     A7 14 42 FC | 	wrbyte	arg02, fp
2f9ec     05 4E 85 F1 | 	sub	fp, #5
2f9f0     A7 12 02 F6 | 	mov	arg01, fp
2f9f4     14 4E 85 F1 | 	sub	fp, #20
2f9f8     06 14 06 F6 | 	mov	arg02, #6
2f9fc     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1109
2fa00     04 4E 05 F1 | 	add	fp, #4
2fa04     A7 1E C2 FA | 	rdbyte	local01, fp
2fa08     04 4E 85 F1 | 	sub	fp, #4
2fa0c     0C 1E 0E F2 | 	cmp	local01, #12 wz
2fa10     10 4E 05 A1 |  if_e	add	fp, #16
2fa14     A7 12 02 A6 |  if_e	mov	arg01, fp
2fa18     10 4E 85 A1 |  if_e	sub	fp, #16
2fa1c     01 14 06 A6 |  if_e	mov	arg02, #1
2fa20     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1116
2fa24     0C 4E 05 F1 | 	add	fp, #12
2fa28     A7 14 48 FC | 	wrbyte	#10, fp
2fa2c     0C 4E 85 F1 | 	sub	fp, #12
2fa30                 | ' 	n = 10;
2fa30                 | ' 	do
2fa30                 | LR__4882
2fa30     10 4E 05 F1 | 	add	fp, #16
2fa34     A7 12 02 F6 | 	mov	arg01, fp
2fa38     10 4E 85 F1 | 	sub	fp, #16
2fa3c     01 14 06 F6 | 	mov	arg02, #1
2fa40     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2fa44     10 4E 05 F1 | 	add	fp, #16
2fa48     A7 1E C2 FA | 	rdbyte	local01, fp
2fa4c     10 4E 85 F1 | 	sub	fp, #16
2fa50     80 1E CE F7 | 	test	local01, #128 wz
2fa54     1C 00 90 AD |  if_e	jmp	#LR__4883
2fa58     0C 4E 05 F1 | 	add	fp, #12
2fa5c     A7 1E C2 FA | 	rdbyte	local01, fp
2fa60     01 1E 86 F1 | 	sub	local01, #1
2fa64     A7 1E 42 FC | 	wrbyte	local01, fp
2fa68     A7 1E CA FA | 	rdbyte	local01, fp wz
2fa6c     0C 4E 85 F1 | 	sub	fp, #12
2fa70     BC FF 9F 5D |  if_ne	jmp	#LR__4882
2fa74                 | LR__4883
2fa74                 | ' 
2fa74                 | ' 	return d;
2fa74     10 4E 05 F1 | 	add	fp, #16
2fa78     A7 FA C1 FA | 	rdbyte	result1, fp
2fa7c     10 4E 85 F1 | 	sub	fp, #16
2fa80                 | LR__4884
2fa80     A7 F0 03 F6 | 	mov	ptra, fp
2fa84     B2 00 A0 FD | 	call	#popregs_
2fa88                 | _fatfs_cc_send_cmd_1140_ret
2fa88     2D 00 64 FD | 	ret
2fa8c                 | 
2fa8c                 | _fatfs_cc_disk_deinitialize
2fa8c     03 4A 05 F6 | 	mov	COUNT_, #3
2fa90     A8 00 A0 FD | 	call	#pushregs_
2fa94     00 12 4E F2 | 	cmps	arg01, #0 wz
2fa98     01 00 00 FF 
2fa9c     14 E4 05 F1 | 	add	objptr, ##532
2faa0     F2 12 02 FB | 	rdlong	arg01, objptr
2faa4     04 E4 85 F1 | 	sub	objptr, #4
2faa8     F2 1E 02 FB | 	rdlong	local01, objptr
2faac     08 E4 05 F1 | 	add	objptr, #8
2fab0     F2 20 02 FB | 	rdlong	local02, objptr
2fab4     04 E4 05 F1 | 	add	objptr, #4
2fab8     F2 22 02 FB | 	rdlong	local03, objptr
2fabc     01 00 00 FF 
2fac0     1C E4 85 F1 | 	sub	objptr, ##540
2fac4                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2fac4                 | '         return RES_NOTRDY;
2fac4     03 FA 05 56 |  if_ne	mov	result1, #3
2fac8     2C 00 90 5D |  if_ne	jmp	#LR__4890
2facc     50 12 62 FD | 	fltl	arg01
2fad0     09 01 08 FC | 	wrpin	#0, arg01
2fad4     50 1E 62 FD | 	fltl	local01
2fad8     0F 01 08 FC | 	wrpin	#0, local01
2fadc     50 20 62 FD | 	fltl	local02
2fae0     10 01 08 FC | 	wrpin	#0, local02
2fae4     50 22 62 FD | 	fltl	local03
2fae8     11 01 08 FC | 	wrpin	#0, local03
2faec     0A 12 06 F6 | 	mov	arg01, #10
2faf0     28 11 BF FD | 	call	#__system___waitms
2faf4                 | '     }
2faf4                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2faf4                 | '     _pinclear(PIN_SS);
2faf4                 | '     _pinclear(PIN_CLK);
2faf4                 | '     _pinclear(PIN_DI);
2faf4                 | '     _pinclear(PIN_DO);
2faf4                 | ' 
2faf4                 | '     _waitms(10);
2faf4                 | ' 
2faf4                 | '     return 0;
2faf4     00 FA 05 F6 | 	mov	result1, #0
2faf8                 | LR__4890
2faf8     A7 F0 03 F6 | 	mov	ptra, fp
2fafc     B2 00 A0 FD | 	call	#popregs_
2fb00                 | _fatfs_cc_disk_deinitialize_ret
2fb00     2D 00 64 FD | 	ret
2fb04                 | 
2fb04                 | _fatfs_cc_gettimeofday
2fb04     04 4A 05 F6 | 	mov	COUNT_, #4
2fb08     A8 00 A0 FD | 	call	#pushregs_
2fb0c     09 1F 02 F6 | 	mov	local01, arg01
2fb10     E4 0C BF FD | 	call	#__system___getus
2fb14     FD 12 02 F6 | 	mov	arg01, result1
2fb18     02 00 00 FF 
2fb1c     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
2fb20     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
2fb24     09 FB 01 F6 | 	mov	result1, arg01
2fb28     10 FB 81 F1 | 	sub	result1, local02
2fb2c     A1 07 00 FF 
2fb30     40 FA 15 FD | 	qdiv	result1, ##1000000
2fb34     02 00 00 FF 
2fb38     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2fb3c     18 20 62 FD | 	getqx	local02
2fb40     A1 07 00 FF 
2fb44     40 FA 15 FD | 	qdiv	result1, ##1000000
2fb48     00 20 0E F2 | 	cmp	local02, #0 wz
2fb4c     19 22 62 FD | 	getqy	local03
2fb50     28 00 90 AD |  if_e	jmp	#LR__4900
2fb54     02 00 00 FF 
2fb58     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2fb5c     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2fb60     10 25 02 F1 | 	add	local04, local02
2fb64     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2fb68     11 13 82 F1 | 	sub	arg01, local03
2fb6c     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
2fb70     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
2fb74     02 00 00 FF 
2fb78     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2fb7c                 | LR__4900
2fb7c     02 00 00 FF 
2fb80     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2fb84     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2fb88     02 00 00 FF 
2fb8c     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
2fb90     0F 25 62 FC | 	wrlong	local04, local01
2fb94     04 1E 06 F1 | 	add	local01, #4
2fb98     0F 23 62 FC | 	wrlong	local03, local01
2fb9c                 | '         lastsec += secs;
2fb9c                 | '         lastus = now - leftover;
2fb9c                 | '     }
2fb9c                 | '     tv->tv_sec = lastsec;
2fb9c                 | '     tv->tv_usec = leftover;
2fb9c                 | '     return 0;
2fb9c     00 FA 05 F6 | 	mov	result1, #0
2fba0     A7 F0 03 F6 | 	mov	ptra, fp
2fba4     B2 00 A0 FD | 	call	#popregs_
2fba8                 | _fatfs_cc_gettimeofday_ret
2fba8     2D 00 64 FD | 	ret
2fbac                 | 
2fbac                 | _fatfs_cc__is_leap_year
2fbac     09 FB 51 F6 | 	abs	result1, arg01 wc
2fbb0     03 FA 05 F5 | 	and	result1, #3
2fbb4     FD FA 89 F6 | 	negc	result1, result1 wz
2fbb8     38 00 90 5D |  if_ne	jmp	#LR__4911
2fbbc     09 FB 51 F6 | 	abs	result1, arg01 wc
2fbc0     64 FA 15 FD | 	qdiv	result1, #100
2fbc4     19 FA 61 FD | 	getqy	result1
2fbc8     FD FA 89 F6 | 	negc	result1, result1 wz
2fbcc     1C 00 90 5D |  if_ne	jmp	#LR__4910
2fbd0     09 FB 51 F6 | 	abs	result1, arg01 wc
2fbd4     90 FB 15 FD | 	qdiv	result1, #400
2fbd8                 | '       return (0 == y % 400);
2fbd8     00 FA 05 F6 | 	mov	result1, #0
2fbdc     19 00 62 FD | 	getqy	_var01
2fbe0     00 01 8A F6 | 	negc	_var01, _var01 wz
2fbe4     01 FA 05 A6 |  if_e	mov	result1, #1
2fbe8     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2fbec                 | LR__4910
2fbec                 | '     return 1;
2fbec     01 FA 05 F6 | 	mov	result1, #1
2fbf0     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2fbf4                 | LR__4911
2fbf4                 | '   }
2fbf4                 | '   return 0;
2fbf4     00 FA 05 F6 | 	mov	result1, #0
2fbf8                 | _fatfs_cc__is_leap_year_ret
2fbf8     2D 00 64 FD | 	ret
2fbfc                 | 
2fbfc                 | _fatfs_cc___tzoffset
2fbfc     09 01 0A F6 | 	mov	_var01, arg01 wz
2fc00     FF FF FF FF 
2fc04     0A FF 6B FC | 	wrlong	##-1, arg02
2fc08     01 02 06 F6 | 	mov	_var02, #1
2fc0c     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
2fc10                 | '                 return 0;
2fc10     00 FA 05 A6 |  if_e	mov	result1, #0
2fc14     94 02 90 AD |  if_e	jmp	#LR__4937
2fc18     0A 01 68 FC | 	wrlong	#0, arg02
2fc1c     02 00 00 FF 
2fc20     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fc24     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2fc28                 | ' 
2fc28                 | '        *hasdst = 0;
2fc28                 | ' 
2fc28                 | ' 	n = stdname;
2fc28                 | '         while (*s && isalpha(*s)) {
2fc28     02 00 00 FF 
2fc2c     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2fc30     97 28 48 FB | 	callpa	#(@LR__4921-@LR__4920)>>2,fcache_load_ptr_
2fc34                 | LR__4920
2fc34     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2fc38     48 00 90 AD |  if_e	jmp	#LR__4922
2fc3c     00 13 C2 FA | 	rdbyte	arg01, _var01
2fc40                 | ' {
2fc40                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2fc40     80 12 36 F3 | 	fle	arg01, #128 wc
2fc44                 | '     return __ctype[c];
2fc44     02 00 00 FF 
2fc48     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fc4c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fc50     09 FB C1 FA | 	rdbyte	result1, arg01
2fc54     02 00 00 FF 
2fc58     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fc5c     0C FA CD F7 | 	test	result1, #12 wz
2fc60     20 00 90 AD |  if_e	jmp	#LR__4922
2fc64     00 09 02 F6 | 	mov	_var05, _var01
2fc68     00 0B 02 F6 | 	mov	_var06, _var01
2fc6c     01 0A 06 F1 | 	add	_var06, #1
2fc70     04 0D C2 FA | 	rdbyte	_var07, _var05
2fc74     05 01 02 F6 | 	mov	_var01, _var06
2fc78     03 0D 42 FC | 	wrbyte	_var07, _var04
2fc7c     01 06 06 F1 | 	add	_var04, #1
2fc80     B0 FF 9F FD | 	jmp	#LR__4920
2fc84                 | LR__4921
2fc84                 | LR__4922
2fc84     03 01 48 FC | 	wrbyte	#0, _var04
2fc88     00 0E 06 F6 | 	mov	_var08, #0
2fc8c     00 05 C2 FA | 	rdbyte	_var03, _var01
2fc90     2D 04 0E F2 | 	cmp	_var03, #45 wz
2fc94     01 02 66 A6 |  if_e	neg	_var02, #1
2fc98     01 00 06 A1 |  if_e	add	_var01, #1
2fc9c     97 28 48 FB | 	callpa	#(@LR__4924-@LR__4923)>>2,fcache_load_ptr_
2fca0                 | '                 sgn = -1;
2fca0                 | '                 s++;
2fca0                 | '         }
2fca0                 | '         while (isdigit(*s)) {
2fca0                 | LR__4923
2fca0     00 13 C2 FA | 	rdbyte	arg01, _var01
2fca4                 | ' {
2fca4                 | '   return  (__ctype_get(c) & 0x02 ) ;
2fca4     80 12 36 F3 | 	fle	arg01, #128 wc
2fca8                 | '     return __ctype[c];
2fca8     02 00 00 FF 
2fcac     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fcb0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fcb4     09 FB C1 FA | 	rdbyte	result1, arg01
2fcb8     02 00 00 FF 
2fcbc     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fcc0     02 FA CD F7 | 	test	result1, #2 wz
2fcc4     28 00 90 AD |  if_e	jmp	#LR__4925
2fcc8     07 05 02 F6 | 	mov	_var03, _var08
2fccc     02 04 66 F0 | 	shl	_var03, #2
2fcd0     07 05 02 F1 | 	add	_var03, _var08
2fcd4     01 04 66 F0 | 	shl	_var03, #1
2fcd8     00 09 C2 FA | 	rdbyte	_var05, _var01
2fcdc     30 08 86 F1 | 	sub	_var05, #48
2fce0     04 05 02 F1 | 	add	_var03, _var05
2fce4     02 0F 02 F6 | 	mov	_var08, _var03
2fce8     01 00 06 F1 | 	add	_var01, #1
2fcec     B0 FF 9F FD | 	jmp	#LR__4923
2fcf0                 | LR__4924
2fcf0                 | LR__4925
2fcf0     07 00 00 FF 
2fcf4     10 0E 06 FD | 	qmul	_var08, ##3600
2fcf8     00 05 C2 FA | 	rdbyte	_var03, _var01
2fcfc     3A 04 0E F2 | 	cmp	_var03, #58 wz
2fd00     18 10 62 FD | 	getqx	_var09
2fd04     70 00 90 5D |  if_ne	jmp	#LR__4929
2fd08     00 0E 06 F6 | 	mov	_var08, #0
2fd0c     01 00 06 F1 | 	add	_var01, #1
2fd10     97 28 48 FB | 	callpa	#(@LR__4927-@LR__4926)>>2,fcache_load_ptr_
2fd14                 | '                 x = 0;
2fd14                 | '                 s++;
2fd14                 | '                 while (isdigit(*s)) {
2fd14                 | LR__4926
2fd14     00 13 C2 FA | 	rdbyte	arg01, _var01
2fd18                 | ' {
2fd18                 | '   return  (__ctype_get(c) & 0x02 ) ;
2fd18     80 12 36 F3 | 	fle	arg01, #128 wc
2fd1c                 | '     return __ctype[c];
2fd1c     02 00 00 FF 
2fd20     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fd24     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fd28     09 FB C1 FA | 	rdbyte	result1, arg01
2fd2c     02 00 00 FF 
2fd30     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fd34     02 FA CD F7 | 	test	result1, #2 wz
2fd38     28 00 90 AD |  if_e	jmp	#LR__4928
2fd3c     07 05 02 F6 | 	mov	_var03, _var08
2fd40     02 04 66 F0 | 	shl	_var03, #2
2fd44     07 05 02 F1 | 	add	_var03, _var08
2fd48     01 04 66 F0 | 	shl	_var03, #1
2fd4c     00 09 C2 FA | 	rdbyte	_var05, _var01
2fd50     30 08 86 F1 | 	sub	_var05, #48
2fd54     04 05 02 F1 | 	add	_var03, _var05
2fd58     02 0F 02 F6 | 	mov	_var08, _var03
2fd5c     01 00 06 F1 | 	add	_var01, #1
2fd60     B0 FF 9F FD | 	jmp	#LR__4926
2fd64                 | LR__4927
2fd64                 | LR__4928
2fd64     07 0D 02 F6 | 	mov	_var07, _var08
2fd68     04 0C 66 F0 | 	shl	_var07, #4
2fd6c     07 0D 82 F1 | 	sub	_var07, _var08
2fd70     02 0C 66 F0 | 	shl	_var07, #2
2fd74     06 11 02 F1 | 	add	_var09, _var07
2fd78                 | LR__4929
2fd78     02 00 00 FF 
2fd7c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2fd80     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2fd84     00 13 C2 FA | 	rdbyte	arg01, _var01
2fd88                 | ' {
2fd88                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2fd88     80 12 36 F3 | 	fle	arg01, #128 wc
2fd8c                 | '     return __ctype[c];
2fd8c     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
2fd90     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fd94     09 FB C1 FA | 	rdbyte	result1, arg01
2fd98     02 00 00 FF 
2fd9c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fda0     0C FA CD F7 | 	test	result1, #12 wz
2fda4     50 00 90 AD |  if_e	jmp	#LR__4932
2fda8     0A 03 68 FC | 	wrlong	#1, arg02
2fdac                 | '                 *hasdst = 1;
2fdac                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
2fdac                 | LR__4930
2fdac     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2fdb0     44 00 90 AD |  if_e	jmp	#LR__4931
2fdb4     00 13 C2 FA | 	rdbyte	arg01, _var01
2fdb8                 | ' {
2fdb8                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2fdb8     80 12 36 F3 | 	fle	arg01, #128 wc
2fdbc                 | '     return __ctype[c];
2fdbc     02 00 00 FF 
2fdc0     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fdc4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fdc8     09 FB C1 FA | 	rdbyte	result1, arg01
2fdcc     02 00 00 FF 
2fdd0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fdd4     0C FA CD F7 | 	test	result1, #12 wz
2fdd8     1C 00 90 AD |  if_e	jmp	#LR__4931
2fddc     00 0B 02 F6 | 	mov	_var06, _var01
2fde0     01 0A 06 F1 | 	add	_var06, #1
2fde4     00 0D C2 FA | 	rdbyte	_var07, _var01
2fde8     05 01 02 F6 | 	mov	_var01, _var06
2fdec     03 0D 42 FC | 	wrbyte	_var07, _var04
2fdf0     01 06 06 F1 | 	add	_var04, #1
2fdf4     B4 FF 9F FD | 	jmp	#LR__4930
2fdf8                 | LR__4931
2fdf8                 | LR__4932
2fdf8     03 01 48 FC | 	wrbyte	#0, _var04
2fdfc     02 00 00 FF 
2fe00     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fe04     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2fe08     02 00 00 FF 
2fe0c     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2fe10     20 00 90 AD |  if_e	jmp	#LR__4933
2fe14     02 00 00 FF 
2fe18     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fe1c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2fe20     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
2fe24     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2fe28     02 00 00 FF 
2fe2c     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2fe30     1C 00 90 FD | 	jmp	#LR__4934
2fe34                 | LR__4933
2fe34     02 00 00 FF 
2fe38     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
2fe3c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2fe40     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
2fe44     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2fe48     02 00 00 FF 
2fe4c     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2fe50                 | LR__4934
2fe50     02 00 00 FF 
2fe54     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2fe58     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2fe5c     02 00 00 FF 
2fe60     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
2fe64     20 00 90 AD |  if_e	jmp	#LR__4935
2fe68     02 00 00 FF 
2fe6c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2fe70     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2fe74     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
2fe78     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2fe7c     02 00 00 FF 
2fe80     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2fe84     1C 00 90 FD | 	jmp	#LR__4936
2fe88                 | LR__4935
2fe88     02 00 00 FF 
2fe8c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fe90     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2fe94     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
2fe98     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2fe9c     02 00 00 FF 
2fea0     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2fea4                 | LR__4936
2fea4     08 03 02 FD | 	qmul	_var02, _var09
2fea8                 | ' 		_tzname[1] = stdname;
2fea8                 | ' 
2fea8                 | '         return sgn * off;
2fea8     18 FA 61 FD | 	getqx	result1
2feac                 | LR__4937
2feac                 | _fatfs_cc___tzoffset_ret
2feac     2D 00 64 FD | 	ret
2feb0                 | 
2feb0                 | _fatfs_cc___indst
2feb0     10 12 06 F1 | 	add	arg01, #16
2feb4     09 01 02 FB | 	rdlong	_var01, arg01
2feb8     10 12 86 F1 | 	sub	arg01, #16
2febc     02 00 0E F2 | 	cmp	_var01, #2 wz
2fec0     30 00 90 5D |  if_ne	jmp	#LR__4940
2fec4     07 00 06 F6 | 	mov	_var01, #7
2fec8     18 12 06 F1 | 	add	arg01, #24
2fecc     09 03 02 FB | 	rdlong	_var02, arg01
2fed0     01 01 02 F1 | 	add	_var01, _var02
2fed4     0C 12 86 F1 | 	sub	arg01, #12
2fed8     09 05 02 FB | 	rdlong	_var03, arg01
2fedc     02 01 82 F1 | 	sub	_var01, _var03
2fee0     00 00 56 F2 | 	cmps	_var01, #0 wc
2fee4                 | '                         return 1;
2fee4     01 FA 05 C6 |  if_b	mov	result1, #1
2fee8     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2feec                 | '                 return 0;
2feec     00 FA 05 F6 | 	mov	result1, #0
2fef0     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2fef4                 | LR__4940
2fef4     10 12 06 F1 | 	add	arg01, #16
2fef8     09 01 02 FB | 	rdlong	_var01, arg01
2fefc     10 12 86 F1 | 	sub	arg01, #16
2ff00     0A 00 0E F2 | 	cmp	_var01, #10 wz
2ff04     28 00 90 5D |  if_ne	jmp	#LR__4941
2ff08     18 12 06 F1 | 	add	arg01, #24
2ff0c     09 01 02 FB | 	rdlong	_var01, arg01
2ff10     0C 12 86 F1 | 	sub	arg01, #12
2ff14     09 07 02 FB | 	rdlong	_var04, arg01
2ff18     03 01 82 F1 | 	sub	_var01, _var04
2ff1c     00 00 56 F2 | 	cmps	_var01, #0 wc
2ff20                 | '                         return 0;
2ff20     00 FA 05 C6 |  if_b	mov	result1, #0
2ff24     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2ff28                 | '                 return 1;
2ff28     01 FA 05 F6 | 	mov	result1, #1
2ff2c     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2ff30                 | LR__4941
2ff30                 | '         }
2ff30                 | ' 
2ff30                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
2ff30     00 00 06 F6 | 	mov	_var01, #0
2ff34     10 12 06 F1 | 	add	arg01, #16
2ff38     09 03 02 FB | 	rdlong	_var02, arg01
2ff3c     10 12 86 F1 | 	sub	arg01, #16
2ff40     03 02 56 F2 | 	cmps	_var02, #3 wc
2ff44     10 00 90 CD |  if_b	jmp	#LR__4942
2ff48     10 12 06 F1 | 	add	arg01, #16
2ff4c     09 05 02 FB | 	rdlong	_var03, arg01
2ff50     0A 04 56 F2 | 	cmps	_var03, #10 wc
2ff54     01 00 06 C6 |  if_b	mov	_var01, #1
2ff58                 | LR__4942
2ff58     00 FB 01 F6 | 	mov	result1, _var01
2ff5c                 | _fatfs_cc___indst_ret
2ff5c     2D 00 64 FD | 	ret
2ff60                 | 
2ff60                 | ' 	
2ff60                 | ' 	FUNCTION pfunc(c as integer) as integer
2ff60                 | ___strs_cl_pfunc
2ff60                 | ' 		if (i < 16) then
2ff60     04 E4 05 F1 | 	add	objptr, #4
2ff64     F2 FA 01 FB | 	rdlong	result1, objptr
2ff68     04 E4 85 F1 | 	sub	objptr, #4
2ff6c     10 FA 55 F2 | 	cmps	result1, #16 wc
2ff70     2C 00 90 3D |  if_ae	jmp	#LR__4950
2ff74     F2 FA 01 FB | 	rdlong	result1, objptr
2ff78     04 E4 05 F1 | 	add	objptr, #4
2ff7c     F2 00 02 FB | 	rdlong	_var01, objptr
2ff80     FD 00 02 F1 | 	add	_var01, result1
2ff84     00 13 42 FC | 	wrbyte	arg01, _var01
2ff88     F2 FA 01 FB | 	rdlong	result1, objptr
2ff8c     01 FA 05 F1 | 	add	result1, #1
2ff90     F2 FA 61 FC | 	wrlong	result1, objptr
2ff94     04 E4 85 F1 | 	sub	objptr, #4
2ff98                 | ' 			p(i) = c
2ff98                 | ' 			i = i+1
2ff98                 | ' 			return 1
2ff98     01 FA 05 F6 | 	mov	result1, #1
2ff9c     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
2ffa0                 | LR__4950
2ffa0                 | ' 			return -1
2ffa0     01 FA 65 F6 | 	neg	result1, #1
2ffa4                 | ___strs_cl_pfunc_ret
2ffa4     2D 00 64 FD | 	ret
2ffa8                 | 
2ffa8                 | __struct__s_vfs_file_t_putchar
2ffa8     04 4A 05 F6 | 	mov	COUNT_, #4
2ffac     A8 00 A0 FD | 	call	#pushregs_
2ffb0     1C E4 05 F1 | 	add	objptr, #28
2ffb4     F2 1E 0A FB | 	rdlong	local01, objptr wz
2ffb8     1C E4 85 F1 | 	sub	objptr, #28
2ffbc     00 FA 05 A6 |  if_e	mov	result1, #0
2ffc0     48 00 90 AD |  if_e	jmp	#LR__4960
2ffc4     1C E4 05 F1 | 	add	objptr, #28
2ffc8     F2 20 02 FB | 	rdlong	local02, objptr
2ffcc     10 23 02 F6 | 	mov	local03, local02
2ffd0     1C E4 85 F1 | 	sub	objptr, #28
2ffd4     13 22 46 F7 | 	zerox	local03, #19
2ffd8     14 20 46 F0 | 	shr	local02, #20
2ffdc     02 20 66 F0 | 	shl	local02, #2
2ffe0     ED 20 02 F1 | 	add	local02, __methods__
2ffe4     10 21 02 FB | 	rdlong	local02, local02
2ffe8     F2 14 02 F6 | 	mov	arg02, objptr
2ffec     F2 24 02 F6 | 	mov	local04, objptr
2fff0     11 E5 01 F6 | 	mov	objptr, local03
2fff4     2D 20 62 FD | 	call	local02
2fff8     12 E5 01 F6 | 	mov	objptr, local04
2fffc                 | '     return (i < 0) ? 0 : 1;
2fffc     00 FA 55 F2 | 	cmps	result1, #0 wc
30000     00 1E 06 C6 |  if_b	mov	local01, #0
30004     01 1E 06 36 |  if_ae	mov	local01, #1
30008     0F FB 01 F6 | 	mov	result1, local01
3000c                 | LR__4960
3000c     A7 F0 03 F6 | 	mov	ptra, fp
30010     B2 00 A0 FD | 	call	#popregs_
30014                 | __struct__s_vfs_file_t_putchar_ret
30014     2D 00 64 FD | 	ret
30018                 | 
30018                 | __struct__s_vfs_file_t_getchar
30018     03 4A 05 F6 | 	mov	COUNT_, #3
3001c     A8 00 A0 FD | 	call	#pushregs_
30020     20 E4 05 F1 | 	add	objptr, #32
30024     F2 12 0A FB | 	rdlong	arg01, objptr wz
30028     20 E4 85 F1 | 	sub	objptr, #32
3002c     01 FA 65 A6 |  if_e	neg	result1, #1
30030     38 00 90 AD |  if_e	jmp	#LR__4970
30034                 | '     return getcf(__this);
30034     20 E4 05 F1 | 	add	objptr, #32
30038     F2 1E 02 FB | 	rdlong	local01, objptr
3003c     0F 21 02 F6 | 	mov	local02, local01
30040     20 E4 85 F1 | 	sub	objptr, #32
30044     13 20 46 F7 | 	zerox	local02, #19
30048     14 1E 46 F0 | 	shr	local01, #20
3004c     02 1E 66 F0 | 	shl	local01, #2
30050     ED 1E 02 F1 | 	add	local01, __methods__
30054     0F 1F 02 FB | 	rdlong	local01, local01
30058     F2 12 02 F6 | 	mov	arg01, objptr
3005c     F2 22 02 F6 | 	mov	local03, objptr
30060     10 E5 01 F6 | 	mov	objptr, local02
30064     2D 1E 62 FD | 	call	local01
30068     11 E5 01 F6 | 	mov	objptr, local03
3006c                 | LR__4970
3006c     A7 F0 03 F6 | 	mov	ptra, fp
30070     B2 00 A0 FD | 	call	#popregs_
30074                 | __struct__s_vfs_file_t_getchar_ret
30074     2D 00 64 FD | 	ret
30078                 | 
30078                 | __struct___bas_wrap_sender_tx
30078     03 4A 05 F6 | 	mov	COUNT_, #3
3007c     A8 00 A0 FD | 	call	#pushregs_
30080     F2 1E 02 FB | 	rdlong	local01, objptr
30084     0F 21 02 F6 | 	mov	local02, local01
30088     13 1E 46 F7 | 	zerox	local01, #19
3008c     14 20 46 F0 | 	shr	local02, #20
30090     02 20 66 F0 | 	shl	local02, #2
30094     ED 20 02 F1 | 	add	local02, __methods__
30098     10 21 02 FB | 	rdlong	local02, local02
3009c     F2 22 02 F6 | 	mov	local03, objptr
300a0     0F E5 01 F6 | 	mov	objptr, local01
300a4     2D 20 62 FD | 	call	local02
300a8     11 E5 01 F6 | 	mov	objptr, local03
300ac     01 FA 05 F6 | 	mov	result1, #1
300b0     A7 F0 03 F6 | 	mov	ptra, fp
300b4     B2 00 A0 FD | 	call	#popregs_
300b8                 | __struct___bas_wrap_sender_tx_ret
300b8     2D 00 64 FD | 	ret
300bc                 | 
300bc                 | __struct___bas_wrap_sender_rx
300bc     03 4A 05 F6 | 	mov	COUNT_, #3
300c0     A8 00 A0 FD | 	call	#pushregs_
300c4     04 E4 05 F1 | 	add	objptr, #4
300c8     F2 1E 02 FB | 	rdlong	local01, objptr
300cc     0F 21 02 F6 | 	mov	local02, local01
300d0     04 E4 85 F1 | 	sub	objptr, #4
300d4     13 20 46 F7 | 	zerox	local02, #19
300d8     14 1E 46 F0 | 	shr	local01, #20
300dc     02 1E 66 F0 | 	shl	local01, #2
300e0     ED 1E 02 F1 | 	add	local01, __methods__
300e4     0F 1F 02 FB | 	rdlong	local01, local01
300e8     F2 22 02 F6 | 	mov	local03, objptr
300ec     10 E5 01 F6 | 	mov	objptr, local02
300f0     2D 1E 62 FD | 	call	local01
300f4     11 E5 01 F6 | 	mov	objptr, local03
300f8     A7 F0 03 F6 | 	mov	ptra, fp
300fc     B2 00 A0 FD | 	call	#popregs_
30100                 | __struct___bas_wrap_sender_rx_ret
30100     2D 00 64 FD | 	ret
30104                 | 
30104                 | __struct___bas_wrap_sender_close
30104     03 4A 05 F6 | 	mov	COUNT_, #3
30108     A8 00 A0 FD | 	call	#pushregs_
3010c     08 E4 05 F1 | 	add	objptr, #8
30110     F2 1E 02 FB | 	rdlong	local01, objptr
30114     0F 21 02 F6 | 	mov	local02, local01
30118     08 E4 85 F1 | 	sub	objptr, #8
3011c     13 20 46 F7 | 	zerox	local02, #19
30120     14 1E 46 F0 | 	shr	local01, #20
30124     02 1E 66 F0 | 	shl	local01, #2
30128     ED 1E 02 F1 | 	add	local01, __methods__
3012c     0F 1F 02 FB | 	rdlong	local01, local01
30130     F2 22 02 F6 | 	mov	local03, objptr
30134     10 E5 01 F6 | 	mov	objptr, local02
30138     2D 1E 62 FD | 	call	local01
3013c     11 E5 01 F6 | 	mov	objptr, local03
30140     A7 F0 03 F6 | 	mov	ptra, fp
30144     B2 00 A0 FD | 	call	#popregs_
30148                 | __struct___bas_wrap_sender_close_ret
30148     2D 00 64 FD | 	ret
3014c                 | 
3014c                 | LR__4980
3014c     2F          | 	byte	"/"
3014d     00          | 	byte	0
3014e                 | LR__4981
3014e     69 6E 66    | 	byte	"inf"
30151     00          | 	byte	0
30152                 | LR__4982
30152     6E 61 6E    | 	byte	"nan"
30155     00          | 	byte	0
30156                 | LR__4983
30156                 | 	byte	
30156     00          | 	byte	0
30157                 | LR__4984
30157                 | 	byte	
30157     00          | 	byte	0
30158                 | LR__4985
30158                 | 	byte	
30158     00          | 	byte	0
30159                 | LR__4986
30159                 | 	byte	
30159     00          | 	byte	0
3015a                 | LR__4987
3015a                 | 	byte	
3015a     00          | 	byte	0
3015b                 | LR__4988
3015b                 | 	byte	
3015b     00          | 	byte	0
3015c                 | LR__4989
3015c                 | 	byte	
3015c     00          | 	byte	0
3015d                 | LR__4990
3015d                 | 	byte	
3015d     00          | 	byte	0
3015e                 | LR__4991
3015e     00          | 	byte	0
3015f     00          | 	byte	0
30160                 | LR__4992
30160     00          | 	byte	0
30161     00          | 	byte	0
30162                 | LR__4993
30162     00          | 	byte	0
30163     00          | 	byte	0
30164                 | LR__4994
30164     20 21 21 21 
30168     20 63 6F 72 
3016c     72 75 70 74 
30170     65 64 20 68 
30174     65 61 70 3F 
30178     3F 3F 20 21 
3017c     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
3017f     00          | 	byte	0
30180                 | LR__4995
30180     20 21 21 21 
30184     20 6F 75 74 
30188     20 6F 66 20 
3018c     68 65 61 70 
30190     20 6D 65 6D 
30194     6F 72 79 20 
30198     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
3019c     00          | 	byte	0
3019d                 | LR__4996
3019d     20 21 21 21 
301a1     20 63 6F 72 
301a5     72 75 70 74 
301a9     65 64 20 68 
301ad     65 61 70 20 
301b1     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
301b5     00          | 	byte	0
301b6                 | LR__4997
301b6     00          | 	byte	0
301b7     00          | 	byte	0
301b8                 | LR__4998
301b8     2E          | 	byte	"."
301b9     00          | 	byte	0
301ba                 | LR__4999
301ba     00          | 	byte	0
301bb     00          | 	byte	0
301bc                 | LR__5000
301bc     00          | 	byte	0
301bd     00          | 	byte	0
301be                 | LR__5001
301be     00          | 	byte	0
301bf     00          | 	byte	0
301c0                 | LR__5002
301c0     2A 3A 3C 3E 
301c4     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
301c8     00          | 	byte	0
301c9                 | LR__5003
301c9     2B 2C 3B 3D 
301cd     5B 5D       | 	byte	"+,;=[]"
301cf     00          | 	byte	0
301d0                 | LR__5004
301d0     46 41 54 33 
301d4     32 20 20 20 | 	byte	"FAT32   "
301d8     00          | 	byte	0
301d9                 | LR__5005
301d9     54 5A       | 	byte	"TZ"
301db     00          | 	byte	0
301dc                 | LR__5006
301dc     00          | 	byte	0
301dd     00          | 	byte	0
301de                 | LR__5007
301de                 | 	byte	
301de     00          | 	byte	0
301df                 | LR__5008
301df                 | 	byte	
301df     00          | 	byte	0
301e0                 | LR__5009
301e0                 | 	byte	
301e0     00          | 	byte	0
301e1                 | LR__5010
301e1                 | 	byte	
301e1     00          | 	byte	0
301e2                 | LR__5011
301e2     22          | 	byte	34
301e3     00          | 	byte	0
301e4                 | LR__5012
301e4     22          | 	byte	34
301e5     00          | 	byte	0
301e6                 | LR__5013
301e6     3A          | 	byte	":"
301e7     00          | 	byte	0
301e8                 | LR__5014
301e8                 | 	byte	
301e8     00          | 	byte	0
301e9                 | LR__5015
301e9                 | 	byte	
301e9     00          | 	byte	0
301ea                 | LR__5016
301ea                 | 	byte	
301ea     00          | 	byte	0
301eb                 | LR__5017
301eb                 | 	byte	
301eb     00          | 	byte	0
301ec                 | LR__5018
301ec                 | 	byte	
301ec     00          | 	byte	0
301ed                 | LR__5019
301ed                 | 	byte	
301ed     00          | 	byte	0
301ee                 | LR__5020
301ee                 | 	byte	
301ee     00          | 	byte	0
301ef                 | LR__5021
301ef     30          | 	byte	"0"
301f0     00          | 	byte	0
301f1                 | LR__5022
301f1     22          | 	byte	34
301f2     00          | 	byte	0
301f3                 | LR__5023
301f3     22          | 	byte	34
301f4     00          | 	byte	0
301f5                 | LR__5024
301f5     22          | 	byte	34
301f6     00          | 	byte	0
301f7                 | LR__5025
301f7     22          | 	byte	34
301f8     00          | 	byte	0
301f9                 | LR__5026
301f9     22          | 	byte	34
301fa     00          | 	byte	0
301fb                 | LR__5027
301fb     3E          | 	byte	">"
301fc     00          | 	byte	0
301fd                 | LR__5028
301fd     3C          | 	byte	"<"
301fe     00          | 	byte	0
301ff                 | LR__5029
301ff     2B          | 	byte	"+"
30200     00          | 	byte	0
30201                 | LR__5030
30201     2D          | 	byte	"-"
30202     00          | 	byte	0
30203                 | LR__5031
30203     2A          | 	byte	"*"
30204     00          | 	byte	0
30205                 | LR__5032
30205     2F          | 	byte	"/"
30206     00          | 	byte	0
30207                 | LR__5033
30207     5E          | 	byte	"^"
30208     00          | 	byte	0
30209                 | LR__5034
30209     3D          | 	byte	"="
3020a     00          | 	byte	0
3020b                 | LR__5035
3020b     2B          | 	byte	"+"
3020c     00          | 	byte	0
3020d                 | LR__5036
3020d     2B          | 	byte	"+"
3020e     00          | 	byte	0
3020f                 | LR__5037
3020f     2D          | 	byte	"-"
30210     00          | 	byte	0
30211                 | LR__5038
30211     2D          | 	byte	"-"
30212     00          | 	byte	0
30213                 | LR__5039
30213     3C          | 	byte	"<"
30214     00          | 	byte	0
30215                 | LR__5040
30215     3E          | 	byte	">"
30216     00          | 	byte	0
30217                 | LR__5041
30217     22          | 	byte	34
30218     00          | 	byte	0
30219                 | LR__5042
30219     22          | 	byte	34
3021a     00          | 	byte	0
3021b                 | LR__5043
3021b     2E          | 	byte	"."
3021c     00          | 	byte	0
3021d                 | LR__5044
3021d     3F          | 	byte	"?"
3021e     00          | 	byte	0
3021f                 | LR__5045
3021f     3F          | 	byte	"?"
30220     00          | 	byte	0
30221                 | LR__5046
30221     6D 6F 75 73 
30225     65          | 	byte	"mouse"
30226     00          | 	byte	0
30227                 | LR__5047
30227     63 75 72 73 
3022b     6F 72       | 	byte	"cursor"
3022d     00          | 	byte	0
3022e                 | LR__5048
3022e     63 6C 69 63 
30232     6B          | 	byte	"click"
30233     00          | 	byte	0
30234                 | LR__5049
30234     6F 6E       | 	byte	"on"
30236     00          | 	byte	0
30237                 | LR__5050
30237     31          | 	byte	"1"
30238     00          | 	byte	0
30239                 | LR__5051
30239     6F 66 66    | 	byte	"off"
3023c     00          | 	byte	0
3023d                 | LR__5052
3023d     30          | 	byte	"0"
3023e     00          | 	byte	0
3023f                 | LR__5053
3023f     6D 6F 64 65 | 	byte	"mode"
30243     00          | 	byte	0
30244                 | LR__5054
30244     6D 2E       | 	byte	"m."
30246     00          | 	byte	0
30247                 | LR__5055
30247     61 74 61 72 
3024b     69          | 	byte	"atari"
3024c     00          | 	byte	0
3024d                 | LR__5056
3024d     30          | 	byte	"0"
3024e     00          | 	byte	0
3024f                 | LR__5057
3024f     70 63 5F 61 
30253     6D 62 65 72 | 	byte	"pc_amber"
30257     00          | 	byte	0
30258                 | LR__5058
30258     31          | 	byte	"1"
30259     00          | 	byte	0
3025a                 | LR__5059
3025a     70 63 5F 67 
3025e     72 65 65 6E | 	byte	"pc_green"
30262     00          | 	byte	0
30263                 | LR__5060
30263     32          | 	byte	"2"
30264     00          | 	byte	0
30265                 | LR__5061
30265     70 63 5F 77 
30269     68 69 74 65 | 	byte	"pc_white"
3026d     00          | 	byte	0
3026e                 | LR__5062
3026e     33          | 	byte	"3"
3026f     00          | 	byte	0
30270                 | LR__5063
30270     73 74       | 	byte	"st"
30272     00          | 	byte	0
30273                 | LR__5064
30273     34          | 	byte	"4"
30274     00          | 	byte	0
30275                 | LR__5065
30275                 | 	byte	
30275     00          | 	byte	0
30276                 | LR__5066
30276     6C 6F 61 64 | 	byte	"load"
3027a     00          | 	byte	0
3027b                 | LR__5067
3027b     73 61 76 65 | 	byte	"save"
3027f     00          | 	byte	0
30280                 | LR__5068
30280     62 72 75 6E | 	byte	"brun"
30284     00          | 	byte	0
30285                 | LR__5069
30285     72 75 6E    | 	byte	"run"
30288     00          | 	byte	0
30289                 | LR__5070
30289     6C 6F 2E    | 	byte	"lo."
3028c     00          | 	byte	0
3028d                 | LR__5071
3028d     73 2E       | 	byte	"s."
3028f     00          | 	byte	0
30290                 | LR__5072
30290     62 72 2E    | 	byte	"br."
30293     00          | 	byte	0
30294                 | LR__5073
30294     65 6E 74 65 
30298     72          | 	byte	"enter"
30299     00          | 	byte	0
3029a                 | LR__5074
3029a     65 2E       | 	byte	"e."
3029c     00          | 	byte	0
3029d                 | LR__5075
3029d                 | 	byte	
3029d     00          | 	byte	0
3029e                 | LR__5076
3029e                 | 	byte	
3029e     00          | 	byte	0
3029f                 | LR__5077
3029f                 | 	byte	
3029f     00          | 	byte	0
302a0                 | LR__5078
302a0                 | 	byte	
302a0     00          | 	byte	0
302a1                 | LR__5079
302a1                 | 	byte	
302a1     00          | 	byte	0
302a2                 | LR__5080
302a2     52 65 61 64 
302a6     79          | 	byte	"Ready"
302a7     00          | 	byte	0
302a8                 | LR__5081
302a8     2B          | 	byte	"+"
302a9     00          | 	byte	0
302aa                 | LR__5082
302aa     2D          | 	byte	"-"
302ab     00          | 	byte	0
302ac                 | LR__5083
302ac     6F 72       | 	byte	"or"
302ae     00          | 	byte	0
302af                 | LR__5084
302af     78 6F 72    | 	byte	"xor"
302b2     00          | 	byte	0
302b3                 | LR__5085
302b3     2A          | 	byte	"*"
302b4     00          | 	byte	0
302b5                 | LR__5086
302b5     2F          | 	byte	"/"
302b6     00          | 	byte	0
302b7                 | LR__5087
302b7     61 6E 64    | 	byte	"and"
302ba     00          | 	byte	0
302bb                 | LR__5088
302bb     64 69 76    | 	byte	"div"
302be     00          | 	byte	0
302bf                 | LR__5089
302bf     6D 6F 64    | 	byte	"mod"
302c2     00          | 	byte	0
302c3                 | LR__5090
302c3     73 68 6C    | 	byte	"shl"
302c6     00          | 	byte	0
302c7                 | LR__5091
302c7     73 68 72    | 	byte	"shr"
302ca     00          | 	byte	0
302cb                 | LR__5092
302cb     5E          | 	byte	"^"
302cc     00          | 	byte	0
302cd                 | LR__5093
302cd     6E 6F 74    | 	byte	"not"
302d0     00          | 	byte	0
302d1                 | LR__5094
302d1     40          | 	byte	"@"
302d2     00          | 	byte	0
302d3                 | LR__5095
302d3     3D          | 	byte	"="
302d4     00          | 	byte	0
302d5                 | LR__5096
302d5     3E 3D       | 	byte	">="
302d7     00          | 	byte	0
302d8                 | LR__5097
302d8     3C 3D       | 	byte	"<="
302da     00          | 	byte	0
302db                 | LR__5098
302db     3C          | 	byte	"<"
302dc     00          | 	byte	0
302dd                 | LR__5099
302dd     3E          | 	byte	">"
302de     00          | 	byte	0
302df                 | LR__5100
302df     3C 3E       | 	byte	"<>"
302e1     00          | 	byte	0
302e2                 | LR__5101
302e2     2B 2B       | 	byte	"++"
302e4     00          | 	byte	0
302e5                 | LR__5102
302e5     2D 2D       | 	byte	"--"
302e7     00          | 	byte	0
302e8                 | LR__5103
302e8     23          | 	byte	"#"
302e9     00          | 	byte	0
302ea                 | LR__5104
302ea     30          | 	byte	"0"
302eb     00          | 	byte	0
302ec                 | LR__5105
302ec     39          | 	byte	"9"
302ed     00          | 	byte	0
302ee                 | LR__5106
302ee     23          | 	byte	"#"
302ef     00          | 	byte	0
302f0                 | LR__5107
302f0     23          | 	byte	"#"
302f1     00          | 	byte	0
302f2                 | LR__5108
302f2     2D          | 	byte	"-"
302f3     00          | 	byte	0
302f4                 | LR__5109
302f4     30          | 	byte	"0"
302f5     00          | 	byte	0
302f6                 | LR__5110
302f6     63          | 	byte	"c"
302f7     00          | 	byte	0
302f8                 | LR__5111
302f8     63 23       | 	byte	"c#"
302fa     00          | 	byte	0
302fb                 | LR__5112
302fb     64          | 	byte	"d"
302fc     00          | 	byte	0
302fd                 | LR__5113
302fd     64 23       | 	byte	"d#"
302ff     00          | 	byte	0
30300                 | LR__5114
30300     65          | 	byte	"e"
30301     00          | 	byte	0
30302                 | LR__5115
30302     66          | 	byte	"f"
30303     00          | 	byte	0
30304                 | LR__5116
30304     66 23       | 	byte	"f#"
30306     00          | 	byte	0
30307                 | LR__5117
30307     67          | 	byte	"g"
30308     00          | 	byte	0
30309                 | LR__5118
30309     67 23       | 	byte	"g#"
3030b     00          | 	byte	0
3030c                 | LR__5119
3030c     61          | 	byte	"a"
3030d     00          | 	byte	0
3030e                 | LR__5120
3030e     61 23       | 	byte	"a#"
30310     00          | 	byte	0
30311                 | LR__5121
30311     68          | 	byte	"h"
30312     00          | 	byte	0
30313                 | LR__5122
30313     62          | 	byte	"b"
30314     00          | 	byte	0
30315                 | LR__5123
30315     2B          | 	byte	"+"
30316     00          | 	byte	0
30317                 | LR__5124
30317     2D          | 	byte	"-"
30318     00          | 	byte	0
30319                 | LR__5125
30319     3D          | 	byte	"="
3031a     00          | 	byte	0
3031b                 | LR__5126
3031b     2C          | 	byte	","
3031c     00          | 	byte	0
3031d                 | LR__5127
3031d     2A          | 	byte	"*"
3031e     00          | 	byte	0
3031f                 | LR__5128
3031f     2F          | 	byte	"/"
30320     00          | 	byte	0
30321                 | LR__5129
30321     3B          | 	byte	";"
30322     00          | 	byte	0
30323                 | LR__5130
30323     22          | 	byte	34
30324     00          | 	byte	0
30325                 | LR__5131
30325     5E          | 	byte	"^"
30326     00          | 	byte	0
30327                 | LR__5132
30327     29          | 	byte	")"
30328     00          | 	byte	0
30329                 | LR__5133
30329     28          | 	byte	"("
3032a     00          | 	byte	0
3032b                 | LR__5134
3032b     3A          | 	byte	":"
3032c     00          | 	byte	0
3032d                 | LR__5135
3032d     20          | 	byte	" "
3032e     00          | 	byte	0
3032f                 | LR__5136
3032f     3E          | 	byte	">"
30330     00          | 	byte	0
30331                 | LR__5137
30331     3C          | 	byte	"<"
30332     00          | 	byte	0
30333                 | LR__5138
30333     3D          | 	byte	"="
30334     00          | 	byte	0
30335                 | LR__5139
30335     62 65 65 70 | 	byte	"beep"
30339     00          | 	byte	0
3033a                 | LR__5140
3033a     62 2E       | 	byte	"b."
3033c     00          | 	byte	0
3033d                 | LR__5141
3033d     62 6F 78    | 	byte	"box"
30340     00          | 	byte	0
30341                 | LR__5142
30341     62 72 75 6E | 	byte	"brun"
30345     00          | 	byte	0
30346                 | LR__5143
30346     62 72 2E    | 	byte	"br."
30349     00          | 	byte	0
3034a                 | LR__5144
3034a     63 68 61 6E 
3034e     67 65 66 72 
30352     65 71       | 	byte	"changefreq"
30354     00          | 	byte	0
30355                 | LR__5145
30355     63 66 2E    | 	byte	"cf."
30358     00          | 	byte	0
30359                 | LR__5146
30359     63 68 61 6E 
3035d     67 65 70 61 
30361     6E          | 	byte	"changepan"
30362     00          | 	byte	0
30363                 | LR__5147
30363     63 70 2E    | 	byte	"cp."
30366     00          | 	byte	0
30367                 | LR__5148
30367     63 68 61 6E 
3036b     67 65 76 6F 
3036f     6C          | 	byte	"changevol"
30370     00          | 	byte	0
30371                 | LR__5149
30371     63 76 2E    | 	byte	"cv."
30374     00          | 	byte	0
30375                 | LR__5150
30375     63 68 61 6E 
30379     67 65 77 61 
3037d     76 65       | 	byte	"changewave"
3037f     00          | 	byte	0
30380                 | LR__5151
30380     63 77 2E    | 	byte	"cw."
30383     00          | 	byte	0
30384                 | LR__5152
30384     63 69 72 63 
30388     6C 65       | 	byte	"circle"
3038a     00          | 	byte	0
3038b                 | LR__5153
3038b     63 69 2E    | 	byte	"ci."
3038e     00          | 	byte	0
3038f                 | LR__5154
3038f     63 6C 69 63 
30393     6B          | 	byte	"click"
30394     00          | 	byte	0
30395                 | LR__5155
30395     63 6C 6F 73 
30399     65          | 	byte	"close"
3039a     00          | 	byte	0
3039b                 | LR__5156
3039b     63 6C 73    | 	byte	"cls"
3039e     00          | 	byte	0
3039f                 | LR__5157
3039f     63 6F 6C 6F 
303a3     72          | 	byte	"color"
303a4     00          | 	byte	0
303a5                 | LR__5158
303a5     63 2E       | 	byte	"c."
303a7     00          | 	byte	0
303a8                 | LR__5159
303a8     63 73 61 76 
303ac     65          | 	byte	"csave"
303ad     00          | 	byte	0
303ae                 | LR__5160
303ae     63 73 2E    | 	byte	"cs."
303b1     00          | 	byte	0
303b2                 | LR__5161
303b2     63 75 72 73 
303b6     6F 72       | 	byte	"cursor"
303b8     00          | 	byte	0
303b9                 | LR__5162
303b9     64 65 66 73 
303bd     6E 64       | 	byte	"defsnd"
303bf     00          | 	byte	0
303c0                 | LR__5163
303c0     64 65 66 65 
303c4     6E 76       | 	byte	"defenv"
303c6     00          | 	byte	0
303c7                 | LR__5164
303c7     64 65 66 73 
303cb     70 72 69 74 
303cf     65          | 	byte	"defsprite"
303d0     00          | 	byte	0
303d1                 | LR__5165
303d1     64 73 2E    | 	byte	"ds."
303d4     00          | 	byte	0
303d5                 | LR__5166
303d5     64 65 67    | 	byte	"deg"
303d8     00          | 	byte	0
303d9                 | LR__5167
303d9     64 69 6D    | 	byte	"dim"
303dc     00          | 	byte	0
303dd                 | LR__5168
303dd     64 69 72    | 	byte	"dir"
303e0     00          | 	byte	0
303e1                 | LR__5169
303e1     64 70 6F 6B 
303e5     65          | 	byte	"dpoke"
303e6     00          | 	byte	0
303e7                 | LR__5170
303e7     64 72 61 77 | 	byte	"draw"
303eb     00          | 	byte	0
303ec                 | LR__5171
303ec     64 72 2E    | 	byte	"dr."
303ef     00          | 	byte	0
303f0                 | LR__5172
303f0     65 6C 73 65 | 	byte	"else"
303f4     00          | 	byte	0
303f5                 | LR__5173
303f5     65 6E 64    | 	byte	"end"
303f8     00          | 	byte	0
303f9                 | LR__5174
303f9     65 6E 74 65 
303fd     72          | 	byte	"enter"
303fe     00          | 	byte	0
303ff                 | LR__5175
303ff     65 2E       | 	byte	"e."
30401     00          | 	byte	0
30402                 | LR__5176
30402     66 63 69 72 
30406     63 6C 65    | 	byte	"fcircle"
30409     00          | 	byte	0
3040a                 | LR__5177
3040a     66 63 2E    | 	byte	"fc."
3040d     00          | 	byte	0
3040e                 | LR__5178
3040e     66 69 6C 6C | 	byte	"fill"
30412     00          | 	byte	0
30413                 | LR__5179
30413     66 69 2E    | 	byte	"fi."
30416     00          | 	byte	0
30417                 | LR__5180
30417     66 6F 6E 74 | 	byte	"font"
3041b     00          | 	byte	0
3041c                 | LR__5181
3041c     66 6F 72    | 	byte	"for"
3041f     00          | 	byte	0
30420                 | LR__5182
30420     66 2E       | 	byte	"f."
30422     00          | 	byte	0
30423                 | LR__5183
30423     66 72 61 6D 
30427     65          | 	byte	"frame"
30428     00          | 	byte	0
30429                 | LR__5184
30429     66 72 2E    | 	byte	"fr."
3042c     00          | 	byte	0
3042d                 | LR__5185
3042d     67 65 74    | 	byte	"get"
30430     00          | 	byte	0
30431                 | LR__5186
30431     67 6F 73 75 
30435     62          | 	byte	"gosub"
30436     00          | 	byte	0
30437                 | LR__5187
30437     67 6F 74 6F | 	byte	"goto"
3043b     00          | 	byte	0
3043c                 | LR__5188
3043c     67 2E       | 	byte	"g."
3043e     00          | 	byte	0
3043f                 | LR__5189
3043f     69 66       | 	byte	"if"
30441     00          | 	byte	0
30442                 | LR__5190
30442     69 6E 6B    | 	byte	"ink"
30445     00          | 	byte	0
30446                 | LR__5191
30446     69 2E       | 	byte	"i."
30448     00          | 	byte	0
30449                 | LR__5192
30449     6C 69 73 74 | 	byte	"list"
3044d     00          | 	byte	0
3044e                 | LR__5193
3044e     6C 2E       | 	byte	"l."
30450     00          | 	byte	0
30451                 | LR__5194
30451     6C 6F 61 64 | 	byte	"load"
30455     00          | 	byte	0
30456                 | LR__5195
30456     6C 6F 2E    | 	byte	"lo."
30459     00          | 	byte	0
3045a                 | LR__5196
3045a     6C 70 6F 6B 
3045e     65          | 	byte	"lpoke"
3045f     00          | 	byte	0
30460                 | LR__5197
30460     6D 6F 64 65 | 	byte	"mode"
30464     00          | 	byte	0
30465                 | LR__5198
30465     6D 2E       | 	byte	"m."
30467     00          | 	byte	0
30468                 | LR__5199
30468     6D 6F 75 73 
3046c     65          | 	byte	"mouse"
3046d     00          | 	byte	0
3046e                 | LR__5200
3046e     6E 65 77    | 	byte	"new"
30471     00          | 	byte	0
30472                 | LR__5201
30472     6E 65 78 74 | 	byte	"next"
30476     00          | 	byte	0
30477                 | LR__5202
30477     6E 2E       | 	byte	"n."
30479     00          | 	byte	0
3047a                 | LR__5203
3047a     6F 70 65 6E | 	byte	"open"
3047e     00          | 	byte	0
3047f                 | LR__5204
3047f     70 61 70 65 
30483     72          | 	byte	"paper"
30484     00          | 	byte	0
30485                 | LR__5205
30485     70 61 2E    | 	byte	"pa."
30488     00          | 	byte	0
30489                 | LR__5206
30489     70 69 6E 66 
3048d     6C 6F 61 74 | 	byte	"pinfloat"
30491     00          | 	byte	0
30492                 | LR__5207
30492     70 69 6E 68 
30496     69          | 	byte	"pinhi"
30497     00          | 	byte	0
30498                 | LR__5208
30498     70 69 6E 6C 
3049c     6F          | 	byte	"pinlo"
3049d     00          | 	byte	0
3049e                 | LR__5209
3049e     70 69 6E 73 
304a2     74 61 72 74 | 	byte	"pinstart"
304a6     00          | 	byte	0
304a7                 | LR__5210
304a7     70 69 6E 74 
304ab     6F 67 67 6C 
304af     65          | 	byte	"pintoggle"
304b0     00          | 	byte	0
304b1                 | LR__5211
304b1     70 69 6E 77 
304b5     72 69 74 65 | 	byte	"pinwrite"
304b9     00          | 	byte	0
304ba                 | LR__5212
304ba     70 6C 61 79 | 	byte	"play"
304be     00          | 	byte	0
304bf                 | LR__5213
304bf     70 2E       | 	byte	"p."
304c1     00          | 	byte	0
304c2                 | LR__5214
304c2     70 6C 6F 74 | 	byte	"plot"
304c6     00          | 	byte	0
304c7                 | LR__5215
304c7     70 6C 2E    | 	byte	"pl."
304ca     00          | 	byte	0
304cb                 | LR__5216
304cb     70 6F 6B 65 | 	byte	"poke"
304cf     00          | 	byte	0
304d0                 | LR__5217
304d0     70 6F 70    | 	byte	"pop"
304d3     00          | 	byte	0
304d4                 | LR__5218
304d4     70 6F 73 69 
304d8     74 69 6F 6E | 	byte	"position"
304dc     00          | 	byte	0
304dd                 | LR__5219
304dd     70 6F 73 2E | 	byte	"pos."
304e1     00          | 	byte	0
304e2                 | LR__5220
304e2     70 72 69 6E 
304e6     74          | 	byte	"print"
304e7     00          | 	byte	0
304e8                 | LR__5221
304e8     3F          | 	byte	"?"
304e9     00          | 	byte	0
304ea                 | LR__5222
304ea     70 75 74    | 	byte	"put"
304ed     00          | 	byte	0
304ee                 | LR__5223
304ee     72 61 64    | 	byte	"rad"
304f1     00          | 	byte	0
304f2                 | LR__5224
304f2     72 65 6C 65 
304f6     61 73 65    | 	byte	"release"
304f9     00          | 	byte	0
304fa                 | LR__5225
304fa     72 65 6D    | 	byte	"rem"
304fd     00          | 	byte	0
304fe                 | LR__5226
304fe     27          | 	byte	"'"
304ff     00          | 	byte	0
30500                 | LR__5227
30500     72 65 74 75 
30504     72 6E       | 	byte	"return"
30506     00          | 	byte	0
30507                 | LR__5228
30507     72 75 6E    | 	byte	"run"
3050a     00          | 	byte	0
3050b                 | LR__5229
3050b     73 61 76 65 | 	byte	"save"
3050f     00          | 	byte	0
30510                 | LR__5230
30510     73 2E       | 	byte	"s."
30512     00          | 	byte	0
30513                 | LR__5231
30513     73 65 74 64 
30517     65 6C 61 79 | 	byte	"setdelay"
3051b     00          | 	byte	0
3051c                 | LR__5232
3051c     73 64 2E    | 	byte	"sd."
3051f     00          | 	byte	0
30520                 | LR__5233
30520     73 65 74 65 
30524     6E 76       | 	byte	"setenv"
30526     00          | 	byte	0
30527                 | LR__5234
30527     73 65 2E    | 	byte	"se."
3052a     00          | 	byte	0
3052b                 | LR__5235
3052b     73 65 74 6C 
3052f     65 6E       | 	byte	"setlen"
30531     00          | 	byte	0
30532                 | LR__5236
30532     73 6C 2E    | 	byte	"sl."
30535     00          | 	byte	0
30536                 | LR__5237
30536     73 65 74 70 
3053a     61 6E       | 	byte	"setpan"
3053c     00          | 	byte	0
3053d                 | LR__5238
3053d     73 70       | 	byte	"sp"
3053f     00          | 	byte	0
30540                 | LR__5239
30540     73 65 74 73 
30544     75 73 74 61 
30548     69 6E       | 	byte	"setsustain"
3054a     00          | 	byte	0
3054b                 | LR__5240
3054b     73 73 2E    | 	byte	"ss."
3054e     00          | 	byte	0
3054f                 | LR__5241
3054f     73 65 74 76 
30553     6F 6C       | 	byte	"setvol"
30555     00          | 	byte	0
30556                 | LR__5242
30556     73 76 2E    | 	byte	"sv."
30559     00          | 	byte	0
3055a                 | LR__5243
3055a     73 65 74 77 
3055e     61 76 65    | 	byte	"setwave"
30561     00          | 	byte	0
30562                 | LR__5244
30562     73 77 2E    | 	byte	"sw."
30565     00          | 	byte	0
30566                 | LR__5245
30566     73 65 74 77 
3056a     61 76       | 	byte	"setwav"
3056c     00          | 	byte	0
3056d                 | LR__5246
3056d     73 68 75 74 
30571     75 70       | 	byte	"shutup"
30573     00          | 	byte	0
30574                 | LR__5247
30574     73 68 2E    | 	byte	"sh."
30577     00          | 	byte	0
30578                 | LR__5248
30578     73 6F 75 6E 
3057c     64          | 	byte	"sound"
3057d     00          | 	byte	0
3057e                 | LR__5249
3057e     73 6F 2E    | 	byte	"so."
30581     00          | 	byte	0
30582                 | LR__5250
30582     73 70 72 69 
30586     74 65       | 	byte	"sprite"
30588     00          | 	byte	0
30589                 | LR__5251
30589     73 70 72 2E | 	byte	"spr."
3058d     00          | 	byte	0
3058e                 | LR__5252
3058e     74 68 65 6E | 	byte	"then"
30592     00          | 	byte	0
30593                 | LR__5253
30593     77 61 69 74 
30597     6D 73       | 	byte	"waitms"
30599     00          | 	byte	0
3059a                 | LR__5254
3059a     77 61 69 74 
3059e     63 6C 6F 63 
305a2     6B          | 	byte	"waitclock"
305a3     00          | 	byte	0
305a4                 | LR__5255
305a4     77 63 2E    | 	byte	"wc."
305a7     00          | 	byte	0
305a8                 | LR__5256
305a8     77 61 69 74 
305ac     76 62 6C    | 	byte	"waitvbl"
305af     00          | 	byte	0
305b0                 | LR__5257
305b0     77 76 2E    | 	byte	"wv."
305b3     00          | 	byte	0
305b4                 | LR__5258
305b4     77 78 70 69 
305b8     6E          | 	byte	"wxpin"
305b9     00          | 	byte	0
305ba                 | LR__5259
305ba     77 79 70 69 
305be     6E          | 	byte	"wypin"
305bf     00          | 	byte	0
305c0                 | LR__5260
305c0     61 62 73    | 	byte	"abs"
305c3     00          | 	byte	0
305c4                 | LR__5261
305c4     61 63 6F 73 | 	byte	"acos"
305c8     00          | 	byte	0
305c9                 | LR__5262
305c9     61 64 72    | 	byte	"adr"
305cc     00          | 	byte	0
305cd                 | LR__5263
305cd     61 64 64 72 | 	byte	"addr"
305d1     00          | 	byte	0
305d2                 | LR__5264
305d2     61 73 63    | 	byte	"asc"
305d5     00          | 	byte	0
305d6                 | LR__5265
305d6     61 73 69 6E | 	byte	"asin"
305da     00          | 	byte	0
305db                 | LR__5266
305db     61 74 6E    | 	byte	"atn"
305de     00          | 	byte	0
305df                 | LR__5267
305df     62 69 6E 24 | 	byte	"bin$"
305e3     00          | 	byte	0
305e4                 | LR__5268
305e4     63 68 72 24 | 	byte	"chr$"
305e8     00          | 	byte	0
305e9                 | LR__5269
305e9     63 6F 73    | 	byte	"cos"
305ec     00          | 	byte	0
305ed                 | LR__5270
305ed     64 70 65 65 
305f1     6B          | 	byte	"dpeek"
305f2     00          | 	byte	0
305f3                 | LR__5271
305f3     66 72 65    | 	byte	"fre"
305f6     00          | 	byte	0
305f7                 | LR__5272
305f7     67 65 74 70 
305fb     69 78 65 6C | 	byte	"getpixel"
305ff     00          | 	byte	0
30600                 | LR__5273
30600     67 65 2E    | 	byte	"ge."
30603     00          | 	byte	0
30604                 | LR__5274
30604     67 65 74 65 
30608     6E 76 73 75 
3060c     73 74 61 69 
30610     6E          | 	byte	"getenvsustain"
30611     00          | 	byte	0
30612                 | LR__5275
30612     67 65 74 6E 
30616     6F 74 65 76 
3061a     61 6C 75 65 | 	byte	"getnotevalue"
3061e     00          | 	byte	0
3061f                 | LR__5276
3061f     67 65 74 74 
30623     69 6D 65    | 	byte	"gettime"
30626     00          | 	byte	0
30627                 | LR__5277
30627     68 65 78 24 | 	byte	"hex$"
3062b     00          | 	byte	0
3062c                 | LR__5278
3062c     69 6E 6B 65 
30630     79 24       | 	byte	"inkey$"
30632     00          | 	byte	0
30633                 | LR__5279
30633     69 6E 74    | 	byte	"int"
30636     00          | 	byte	0
30637                 | LR__5280
30637     6C 65 66 74 
3063b     24          | 	byte	"left$"
3063c     00          | 	byte	0
3063d                 | LR__5281
3063d     6C 65 6E    | 	byte	"len"
30640     00          | 	byte	0
30641                 | LR__5282
30641     6C 6F 67    | 	byte	"log"
30644     00          | 	byte	0
30645                 | LR__5283
30645     6C 70 65 65 
30649     6B          | 	byte	"lpeek"
3064a     00          | 	byte	0
3064b                 | LR__5284
3064b     6D 69 64 24 | 	byte	"mid$"
3064f     00          | 	byte	0
30650                 | LR__5285
30650     6D 6F 75 73 
30654     65 6B       | 	byte	"mousek"
30656     00          | 	byte	0
30657                 | LR__5286
30657     6D 6F 75 73 
3065b     65 77       | 	byte	"mousew"
3065d     00          | 	byte	0
3065e                 | LR__5287
3065e     6D 6F 75 73 
30662     65 78       | 	byte	"mousex"
30664     00          | 	byte	0
30665                 | LR__5288
30665     6D 6F 75 73 
30669     65 79       | 	byte	"mousey"
3066b     00          | 	byte	0
3066c                 | LR__5289
3066c     70 65 65 6B | 	byte	"peek"
30670     00          | 	byte	0
30671                 | LR__5290
30671     70 69 6E 72 
30675     65 61 64    | 	byte	"pinread"
30678     00          | 	byte	0
30679                 | LR__5291
30679     72 64 70 69 
3067d     6E          | 	byte	"rdpin"
3067e     00          | 	byte	0
3067f                 | LR__5292
3067f     72 69 67 68 
30683     74 24       | 	byte	"right$"
30685     00          | 	byte	0
30686                 | LR__5293
30686     72 71 70 69 
3068a     6E          | 	byte	"rqpin"
3068b     00          | 	byte	0
3068c                 | LR__5294
3068c     72 6F 75 6E 
30690     64          | 	byte	"round"
30691     00          | 	byte	0
30692                 | LR__5295
30692     72 6E 64    | 	byte	"rnd"
30695     00          | 	byte	0
30696                 | LR__5296
30696     73 69 6E    | 	byte	"sin"
30699     00          | 	byte	0
3069a                 | LR__5297
3069a     73 71 72    | 	byte	"sqr"
3069d     00          | 	byte	0
3069e                 | LR__5298
3069e     73 74 69 63 
306a2     6B          | 	byte	"stick"
306a3     00          | 	byte	0
306a4                 | LR__5299
306a4     73 74 72 69 
306a8     67          | 	byte	"strig"
306a9     00          | 	byte	0
306aa                 | LR__5300
306aa     73 74 72 24 | 	byte	"str$"
306ae     00          | 	byte	0
306af                 | LR__5301
306af     74 61 6E    | 	byte	"tan"
306b2     00          | 	byte	0
306b3                 | LR__5302
306b3     76 61 6C    | 	byte	"val"
306b6     00          | 	byte	0
306b7                 | LR__5303
306b7     76 61 72 70 
306bb     74 72       | 	byte	"varptr"
306bd     00          | 	byte	0
306be                 | LR__5304
306be     61          | 	byte	"a"
306bf     00          | 	byte	0
306c0                 | LR__5305
306c0     7A          | 	byte	"z"
306c1     00          | 	byte	0
306c2                 | LR__5306
306c2     5F          | 	byte	"_"
306c3     00          | 	byte	0
306c4                 | LR__5307
306c4     61          | 	byte	"a"
306c5     00          | 	byte	0
306c6                 | LR__5308
306c6     7A          | 	byte	"z"
306c7     00          | 	byte	0
306c8                 | LR__5309
306c8     30          | 	byte	"0"
306c9     00          | 	byte	0
306ca                 | LR__5310
306ca     39          | 	byte	"9"
306cb     00          | 	byte	0
306cc                 | LR__5311
306cc     5F          | 	byte	"_"
306cd     00          | 	byte	0
306ce                 | LR__5312
306ce     2E          | 	byte	"."
306cf     00          | 	byte	0
306d0                 | LR__5313
306d0     61          | 	byte	"a"
306d1     00          | 	byte	0
306d2                 | LR__5314
306d2     7A          | 	byte	"z"
306d3     00          | 	byte	0
306d4                 | LR__5315
306d4     30          | 	byte	"0"
306d5     00          | 	byte	0
306d6                 | LR__5316
306d6     39          | 	byte	"9"
306d7     00          | 	byte	0
306d8                 | LR__5317
306d8     5F          | 	byte	"_"
306d9     00          | 	byte	0
306da                 | LR__5318
306da     24          | 	byte	"$"
306db     00          | 	byte	0
306dc                 | LR__5319
306dc     25          | 	byte	"%"
306dd     00          | 	byte	0
306de                 | LR__5320
306de     21          | 	byte	"!"
306df     00          | 	byte	0
306e0                 | LR__5321
306e0     30          | 	byte	"0"
306e1     00          | 	byte	0
306e2                 | LR__5322
306e2     39          | 	byte	"9"
306e3     00          | 	byte	0
306e4                 | LR__5323
306e4     2E          | 	byte	"."
306e5     00          | 	byte	0
306e6                 | LR__5324
306e6     24          | 	byte	"$"
306e7     00          | 	byte	0
306e8                 | LR__5325
306e8     25          | 	byte	"%"
306e9     00          | 	byte	0
306ea                 | LR__5326
306ea     2D          | 	byte	"-"
306eb     00          | 	byte	0
306ec                 | LR__5327
306ec     2E          | 	byte	"."
306ed     00          | 	byte	0
306ee                 | LR__5328
306ee     30          | 	byte	"0"
306ef     00          | 	byte	0
306f0                 | LR__5329
306f0     39          | 	byte	"9"
306f1     00          | 	byte	0
306f2                 | LR__5330
306f2     5F          | 	byte	"_"
306f3     00          | 	byte	0
306f4                 | LR__5331
306f4     2E          | 	byte	"."
306f5     00          | 	byte	0
306f6                 | LR__5332
306f6     45          | 	byte	"E"
306f7     00          | 	byte	0
306f8                 | LR__5333
306f8     65          | 	byte	"e"
306f9     00          | 	byte	0
306fa                 | LR__5334
306fa     2D          | 	byte	"-"
306fb     00          | 	byte	0
306fc                 | LR__5335
306fc     2D          | 	byte	"-"
306fd     00          | 	byte	0
306fe                 | LR__5336
306fe     65          | 	byte	"e"
306ff     00          | 	byte	0
30700                 | LR__5337
30700     2E          | 	byte	"."
30701     00          | 	byte	0
30702                 | LR__5338
30702     45          | 	byte	"E"
30703     00          | 	byte	0
30704                 | LR__5339
30704     65          | 	byte	"e"
30705     00          | 	byte	0
30706                 | LR__5340
30706     30          | 	byte	"0"
30707     00          | 	byte	0
30708                 | LR__5341
30708     39          | 	byte	"9"
30709     00          | 	byte	0
3070a                 | LR__5342
3070a     24          | 	byte	"$"
3070b     00          | 	byte	0
3070c                 | LR__5343
3070c     25          | 	byte	"%"
3070d     00          | 	byte	0
3070e                 | LR__5344
3070e     2D          | 	byte	"-"
3070f     00          | 	byte	0
30710                 | LR__5345
30710     30          | 	byte	"0"
30711     00          | 	byte	0
30712                 | LR__5346
30712     39          | 	byte	"9"
30713     00          | 	byte	0
30714                 | LR__5347
30714     5F          | 	byte	"_"
30715     00          | 	byte	0
30716                 | LR__5348
30716     30          | 	byte	"0"
30717     00          | 	byte	0
30718                 | LR__5349
30718     39          | 	byte	"9"
30719     00          | 	byte	0
3071a                 | LR__5350
3071a     5F          | 	byte	"_"
3071b     00          | 	byte	0
3071c                 | LR__5351
3071c     22          | 	byte	34
3071d     00          | 	byte	0
3071e                 | LR__5352
3071e     22          | 	byte	34
3071f     00          | 	byte	0
30720                 | LR__5353
30720     44 69 6D 3A 
30724     20 61 74 20 
30728     6C 69 6E 65 
3072c     20          | 	byte	"Dim: at line "
3072d     00          | 	byte	0
3072e                 | LR__5354
3072e     3A 20 77 61 
30732     72 6E 69 6E 
30736     67 3A 20 74 
3073a     68 65 20 76 
3073e     61 72 69 61 
30742     62 6C 65 20 
30746     65 78 69 73 
3074a     74 65 64 2E | 	byte	": warning: the variable existed."
3074e     00          | 	byte	0
3074f                 | LR__5355
3074f     28          | 	byte	"("
30750     00          | 	byte	0
30751                 | LR__5356
30751     61 73       | 	byte	"as"
30753     00          | 	byte	0
30754                 | LR__5357
30754     61 73       | 	byte	"as"
30756     00          | 	byte	0
30757                 | LR__5358
30757     2C          | 	byte	","
30758     00          | 	byte	0
30759                 | LR__5359
30759     29          | 	byte	")"
3075a     00          | 	byte	0
3075b                 | LR__5360
3075b     29          | 	byte	")"
3075c     00          | 	byte	0
3075d                 | LR__5361
3075d     61 73       | 	byte	"as"
3075f     00          | 	byte	0
30760                 | LR__5362
30760     62 79 74 65 | 	byte	"byte"
30764     00          | 	byte	0
30765                 | LR__5363
30765     75 62 79 74 
30769     65          | 	byte	"ubyte"
3076a     00          | 	byte	0
3076b                 | LR__5364
3076b     73 68 6F 72 
3076f     74          | 	byte	"short"
30770     00          | 	byte	0
30771                 | LR__5365
30771     75 73 68 6F 
30775     72 74       | 	byte	"ushort"
30777     00          | 	byte	0
30778                 | LR__5366
30778     6C 6F 6E 67 | 	byte	"long"
3077c     00          | 	byte	0
3077d                 | LR__5367
3077d     69 6E 74 65 
30781     67 65 72    | 	byte	"integer"
30784     00          | 	byte	0
30785                 | LR__5368
30785     75 6C 6F 6E 
30789     67          | 	byte	"ulong"
3078a     00          | 	byte	0
3078b                 | LR__5369
3078b     69 6E 74 36 
3078f     34          | 	byte	"int64"
30790     00          | 	byte	0
30791                 | LR__5370
30791     75 69 6E 74 
30795     36 34       | 	byte	"uint64"
30797     00          | 	byte	0
30798                 | LR__5371
30798     73 69 6E 67 
3079c     6C 65       | 	byte	"single"
3079e     00          | 	byte	0
3079f                 | LR__5372
3079f     64 6F 75 62 
307a3     6C 65       | 	byte	"double"
307a5     00          | 	byte	0
307a6                 | LR__5373
307a6     73 74 72 69 
307aa     6E 67       | 	byte	"string"
307ac     00          | 	byte	0
307ad                 | LR__5374
307ad     74 6F       | 	byte	"to"
307af     00          | 	byte	0
307b0                 | LR__5375
307b0     73 74 65 70 | 	byte	"step"
307b4     00          | 	byte	0
307b5                 | LR__5376
307b5     73 2E       | 	byte	"s."
307b7     00          | 	byte	0
307b8                 | LR__5377
307b8     24          | 	byte	"$"
307b9     00          | 	byte	0
307ba                 | LR__5378
307ba     26 68       | 	byte	"&h"
307bc     00          | 	byte	0
307bd                 | LR__5379
307bd     25          | 	byte	"%"
307be     00          | 	byte	0
307bf                 | LR__5380
307bf     26 62       | 	byte	"&b"
307c1     00          | 	byte	0
307c2                 | LR__5381
307c2                 | 	byte	
307c2     00          | 	byte	0
307c3                 | LR__5382
307c3     2F          | 	byte	"/"
307c4     00          | 	byte	0
307c5                 | LR__5383
307c5                 | 	byte	
307c5     00          | 	byte	0
307c6                 | LR__5384
307c6     53 61 76 65 
307ca     64 20 61 73 
307ce     20          | 	byte	"Saved as "
307cf     00          | 	byte	0
307d0                 | LR__5385
307d0     2F          | 	byte	"/"
307d1     00          | 	byte	0
307d2                 | LR__5386
307d2                 | 	byte	
307d2     00          | 	byte	0
307d3                 | LR__5387
307d3     2F          | 	byte	"/"
307d4     00          | 	byte	0
307d5                 | LR__5388
307d5     2F          | 	byte	"/"
307d6     00          | 	byte	0
307d7                 | LR__5389
307d7     2E 62 61 73 | 	byte	".bas"
307db     00          | 	byte	0
307dc                 | LR__5390
307dc     53 79 73 74 
307e0     65 6D 20 65 
307e4     72 72 6F 72 
307e8     20          | 	byte	"System error "
307e9     00          | 	byte	0
307ea                 | LR__5391
307ea     3A 20       | 	byte	": "
307ec     00          | 	byte	0
307ed                 | LR__5392
307ed     2E 62 61 73 | 	byte	".bas"
307f1     00          | 	byte	0
307f2                 | LR__5393
307f2     2F          | 	byte	"/"
307f3     00          | 	byte	0
307f4                 | LR__5394
307f4                 | 	byte	
307f4     00          | 	byte	0
307f5                 | LR__5395
307f5     4C 6F 61 64 
307f9     65 64 20    | 	byte	"Loaded "
307fc     00          | 	byte	0
307fd                 | LR__5396
307fd     2F          | 	byte	"/"
307fe     00          | 	byte	0
307ff                 | LR__5397
307ff     53 74 6F 70 
30803     70 65 64 20 
30807     61 74 20 6C 
3080b     69 6E 65 20 | 	byte	"Stopped at line "
3080f     00          | 	byte	0
30810                 | LR__5398
30810                 | 	byte	
30810     00          | 	byte	0
30811                 | LR__5399
30811                 | 	byte	
30811     00          | 	byte	0
30812                 | LR__5400
30812     2F 73 64 2F 
30816     6D 65 64 69 
3081a     61 2F 68 2F | 	byte	"/sd/media/h/"
3081e     00          | 	byte	0
3081f                 | LR__5401
3081f     53 79 73 74 
30823     65 6D 20 65 
30827     72 72 6F 72 
3082b     20          | 	byte	"System error "
3082c     00          | 	byte	0
3082d                 | LR__5402
3082d     3A 20       | 	byte	": "
3082f     00          | 	byte	0
30830                 | LR__5403
30830                 | 	byte	
30830     00          | 	byte	0
30831                 | LR__5404
30831                 | 	byte	
30831     00          | 	byte	0
30832                 | LR__5405
30832     2F 73 64 2F 
30836     6D 65 64 69 
3083a     61 2F 73 2F | 	byte	"/sd/media/s/"
3083e     00          | 	byte	0
3083f                 | LR__5406
3083f     53 79 73 74 
30843     65 6D 20 65 
30847     72 72 6F 72 
3084b     20          | 	byte	"System error "
3084c     00          | 	byte	0
3084d                 | LR__5407
3084d     3A 20       | 	byte	": "
3084f     00          | 	byte	0
30850                 | LR__5408
30850                 | 	byte	
30850     00          | 	byte	0
30851                 | LR__5409
30851     6E 6F 6E 61 
30855     6D 65 2E 62 
30859     61 73       | 	byte	"noname.bas"
3085b     00          | 	byte	0
3085c                 | LR__5410
3085c     66 69 6C 65 
30860     6E 61 6D 65 
30864     20 65 78 70 
30868     65 63 74 65 
3086c     64          | 	byte	"filename expected"
3086d     00          | 	byte	0
3086e                 | LR__5411
3086e     72 65 61 64 | 	byte	"read"
30872     00          | 	byte	0
30873                 | LR__5412
30873     77 72 69 74 
30877     65          | 	byte	"write"
30878     00          | 	byte	0
30879                 | LR__5413
30879     61 70 70 65 
3087d     6E 64       | 	byte	"append"
3087f     00          | 	byte	0
30880                 | LR__5414
30880     63 68 61 6E 
30884     6E 65 6C 23 
30888     20 65 78 70 
3088c     65 63 74 65 
30890     64          | 	byte	"channel# expected"
30891     00          | 	byte	0
30892                 | LR__5415
30892     4F 70 65 6E 
30896     3A 20 69 6E 
3089a     76 61 6C 69 
3089e     64 20 6D 6F 
308a2     64 65       | 	byte	"Open: invalid mode"
308a4     00          | 	byte	0
308a5                 | LR__5416
308a5     63 68 61 6E 
308a9     6E 65 6C 23 
308ad     20 65 78 70 
308b1     65 63 74 65 
308b5     64          | 	byte	"channel# expected"
308b6     00          | 	byte	0
308b7                 | LR__5417
308b7     45 72 72 6F 
308bb     72 20       | 	byte	"Error "
308bd     00          | 	byte	0
308be                 | LR__5418
308be     3A 20       | 	byte	": "
308c0     00          | 	byte	0
308c1                 | LR__5419
308c1                 | 	byte	
308c1     00          | 	byte	0
308c2                 | LR__5420
308c2                 | 	byte	
308c2     00          | 	byte	0
308c3                 | LR__5421
308c3     72 6E 64 3A 
308c7     20          | 	byte	"rnd: "
308c8     00          | 	byte	0
308c9                 | LR__5422
308c9     72 6E 64 3A 
308cd     20          | 	byte	"rnd: "
308ce     00          | 	byte	0
308cf                 | LR__5423
308cf     67 65 74 65 
308d3     6E 76 73 75 
308d7     73 74 61 69 
308db     6E 3A 20    | 	byte	"getenvsustain: "
308de     00          | 	byte	0
308df                 | LR__5424
308df     73 69 6E 3A 
308e3     20          | 	byte	"sin: "
308e4     00          | 	byte	0
308e5                 | LR__5425
308e5     6D 69 64 24 
308e9     3A 20       | 	byte	"mid$: "
308eb     00          | 	byte	0
308ec                 | LR__5426
308ec     6D 69 64 24 
308f0     3A 20       | 	byte	"mid$: "
308f2     00          | 	byte	0
308f3                 | LR__5427
308f3     72 69 67 68 
308f7     74 24 3A 20 | 	byte	"right$: "
308fb     00          | 	byte	0
308fc                 | LR__5428
308fc     72 69 67 68 
30900     74 24 3A 20 | 	byte	"right$: "
30904     00          | 	byte	0
30905                 | LR__5429
30905     6C 65 66 74 
30909     24 3A 20    | 	byte	"left$: "
3090c     00          | 	byte	0
3090d                 | LR__5430
3090d     6C 65 66 74 
30911     24 3A 20    | 	byte	"left$: "
30914     00          | 	byte	0
30915                 | LR__5431
30915     61 73 63 3A 
30919     20          | 	byte	"asc: "
3091a     00          | 	byte	0
3091b                 | LR__5432
3091b     61 73 63 3A 
3091f     20          | 	byte	"asc: "
30920     00          | 	byte	0
30921                 | LR__5433
30921     6C 65 6E 3A 
30925     20          | 	byte	"len: "
30926     00          | 	byte	0
30927                 | LR__5434
30927     6C 65 6E 3A 
3092b     20          | 	byte	"len: "
3092c     00          | 	byte	0
3092d                 | LR__5435
3092d     63 68 72 24 
30931     3A 20       | 	byte	"chr$: "
30933     00          | 	byte	0
30934                 | LR__5436
30934     76 61 6C 3A 
30938     20          | 	byte	"val: "
30939     00          | 	byte	0
3093a                 | LR__5437
3093a     76 61 6C 3A 
3093e     20          | 	byte	"val: "
3093f     00          | 	byte	0
30940                 | LR__5438
30940     24          | 	byte	"$"
30941     00          | 	byte	0
30942                 | LR__5439
30942     26 68       | 	byte	"&h"
30944     00          | 	byte	0
30945                 | LR__5440
30945     25          | 	byte	"%"
30946     00          | 	byte	0
30947                 | LR__5441
30947     26 62       | 	byte	"&b"
30949     00          | 	byte	0
3094a                 | LR__5442
3094a     68 65 78 24 
3094e     3A 20       | 	byte	"hex$: "
30950     00          | 	byte	0
30951                 | LR__5443
30951     62 69 6E 24 
30955     3A 20       | 	byte	"bin$: "
30957     00          | 	byte	0
30958                 | LR__5444
30958     63 6F 73 3A 
3095c     20          | 	byte	"cos: "
3095d     00          | 	byte	0
3095e                 | LR__5445
3095e     74 61 6E 3A 
30962     20          | 	byte	"tan: "
30963     00          | 	byte	0
30964                 | LR__5446
30964     61 73 69 6E 
30968     3A 20       | 	byte	"asin: "
3096a     00          | 	byte	0
3096b                 | LR__5447
3096b     61 63 6F 73 
3096f     3A 20       | 	byte	"acos: "
30971     00          | 	byte	0
30972                 | LR__5448
30972     61 74 6E 3A 
30976     20          | 	byte	"atn: "
30977     00          | 	byte	0
30978                 | LR__5449
30978     73 71 72 3A 
3097c     20          | 	byte	"sqr: "
3097d     00          | 	byte	0
3097e                 | LR__5450
3097e     73 74 69 63 
30982     6B 3A 20    | 	byte	"stick: "
30985     00          | 	byte	0
30986                 | LR__5451
30986     73 74 72 69 
3098a     67 3A 20    | 	byte	"strig: "
3098d     00          | 	byte	0
3098e                 | LR__5452
3098e     67 65 74 70 
30992     69 78 65 6C 
30996     3A 20       | 	byte	"getpixel: "
30998     00          | 	byte	0
30999                 | LR__5453
30999     6C 6F 67 3A 
3099d     20          | 	byte	"log: "
3099e     00          | 	byte	0
3099f                 | LR__5454
3099f     50 72 69 6E 
309a3     74 20 74 6F 
309a7     20 63 68 61 
309ab     6E 6E 65 6C 
309af     20          | 	byte	"Print to channel "
309b0     00          | 	byte	0
309b1                 | LR__5455
309b1     20 42 41 53 
309b5     49 43 20 62 
309b9     79 74 65 73 
309bd     20 66 72 65 
309c1     65          | 	byte	" BASIC bytes free"
309c2     00          | 	byte	0
309c3                 | LR__5456
309c3                 | 	byte	
309c3     00          | 	byte	0
309c4                 | LR__5457
309c4     2F 73 64 2F 
309c8     62 61 73    | 	byte	"/sd/bas"
309cb     00          | 	byte	0
309cc                 | LR__5458
309cc     57 6F 72 6B 
309d0     69 6E 67 20 
309d4     64 69 72 65 
309d8     63 74 6F 72 
309dc     79 3A 20    | 	byte	"Working directory: "
309df     00          | 	byte	0
309e0                 | LR__5459
309e0                 | 	byte	
309e0     00          | 	byte	0
309e1                 | LR__5460
309e1     2A          | 	byte	"*"
309e2     00          | 	byte	0
309e3                 | LR__5461
309e3                 | 	byte	
309e3     00          | 	byte	0
309e4                 | LR__5462
309e4     5B 64 69 72 
309e8     5D 20       | 	byte	"[dir] "
309ea     00          | 	byte	0
309eb                 | LR__5463
309eb     4D 6F 72 65 
309ef     20 74 68 61 
309f3     6E 20 31 32 
309f7     38 20 65 6E 
309fb     74 72 69 65 
309ff     73 20 66 6F 
30a03     75 6E 64 3A 
30a07     20 63 6C 65 
30a0b     61 6E 20 79 
30a0f     6F 75 72 20 
30a13     64 69 72 65 
30a17     63 74 6F 72 
30a1b     79          | 	byte	"More than 128 entries found: clean your directory"
30a1c     00          | 	byte	0
30a1d                 | LR__5464
30a1d     2A          | 	byte	"*"
30a1e     00          | 	byte	0
30a1f                 | LR__5465
30a1f                 | 	byte	
30a1f     00          | 	byte	0
30a20                 | LR__5466
30a20     4D 6F 72 65 
30a24     20 74 68 61 
30a28     6E 20 31 32 
30a2c     38 20 65 6E 
30a30     74 72 69 65 
30a34     73 20 66 6F 
30a38     75 6E 64 3A 
30a3c     20 63 6C 65 
30a40     61 6E 20 79 
30a44     6F 75 72 20 
30a48     64 69 72 65 
30a4c     63 74 6F 72 
30a50     79          | 	byte	"More than 128 entries found: clean your directory"
30a51     00          | 	byte	0
30a52                 | LR__5467
30a52     2F          | 	byte	"/"
30a53     00          | 	byte	0
30a54                 | LR__5468
30a54     2F 73 64 2F 
30a58     62 69 6E 2F | 	byte	"/sd/bin/"
30a5c     00          | 	byte	0
30a5d                 | LR__5469
30a5d     53 79 73 74 
30a61     65 6D 20 65 
30a65     72 72 6F 72 
30a69     20          | 	byte	"System error "
30a6a     00          | 	byte	0
30a6b                 | LR__5470
30a6b     3A 20       | 	byte	": "
30a6d     00          | 	byte	0
30a6e                 | LR__5471
30a6e                 | 	byte	
30a6e     00          | 	byte	0
30a6f                 | LR__5472
30a6f     45 78 70 65 
30a73     63 74 65 64 
30a77     20 6E 75 6D 
30a7b     62 65 72 2C 
30a7f     20 67 6F 74 
30a83     20 73 6F 6D 
30a87     65 74 68 69 
30a8b     6E 67 20 65 
30a8f     6C 73 65 2E | 	byte	"Expected number, got something else."
30a93     00          | 	byte	0
30a94                 | LR__5473
30a94     43 61 6E 6E 
30a98     6F 74 20 61 
30a9c     64 64 20 61 
30aa0     20 6E 75 6D 
30aa4     62 65 72 20 
30aa8     74 6F 20 61 
30aac     20 73 74 72 
30ab0     69 6E 67 2E | 	byte	"Cannot add a number to a string."
30ab4     00          | 	byte	0
30ab5                 | LR__5474
30ab5     43 61 6E 6E 
30ab9     6F 74 20 73 
30abd     75 62 73 74 
30ac1     72 61 63 74 
30ac5     20 73 74 72 
30ac9     69 6E 67 73 
30acd     2E          | 	byte	"Cannot substract strings."
30ace     00          | 	byte	0
30acf                 | LR__5475
30acf     55 6E 6B 6E 
30ad3     6F 77 6E 20 
30ad7     65 72 72 6F 
30adb     72 20 77 68 
30adf     69 6C 65 20 
30ae3     61 64 64 69 
30ae7     6E 67 2E    | 	byte	"Unknown error while adding."
30aea     00          | 	byte	0
30aeb                 | LR__5476
30aeb     55 6E 6B 6E 
30aef     6F 77 6E 20 
30af3     65 72 72 6F 
30af7     72 20 77 68 
30afb     69 6C 65 20 
30aff     73 75 62 73 
30b03     74 72 61 63 
30b07     74 69 6E 67 
30b0b     2E          | 	byte	"Unknown error while substracting."
30b0c     00          | 	byte	0
30b0d                 | LR__5477
30b0d     43 61 6E 6E 
30b11     6F 74 20 64 
30b15     6F 20 6C 6F 
30b19     67 69 63 20 
30b1d     6F 70 65 72 
30b21     61 74 69 6F 
30b25     6E 20 6F 6E 
30b29     20 73 74 72 
30b2d     69 6E 67 20 
30b31     6F 72 20 66 
30b35     6C 6F 61 74 
30b39     2E          | 	byte	"Cannot do logic operation on string or float."
30b3a     00          | 	byte	0
30b3b                 | LR__5478
30b3b     55 6E 6B 6E 
30b3f     6F 77 6E 20 
30b43     65 72 72 6F 
30b47     72 20 77 68 
30b4b     69 6C 65 20 
30b4f     64 6F 69 6E 
30b53     67 20 6C 6F 
30b57     67 69 63 20 
30b5b     6F 70 65 72 
30b5f     61 74 69 6F 
30b63     6E 2E       | 	byte	"Unknown error while doing logic operation."
30b65     00          | 	byte	0
30b66                 | LR__5479
30b66     43 61 6E 6E 
30b6a     6F 74 20 6D 
30b6e     75 6C 74 69 
30b72     70 6C 79 20 
30b76     73 74 72 69 
30b7a     6E 67 73 2E | 	byte	"Cannot multiply strings."
30b7e     00          | 	byte	0
30b7f                 | LR__5480
30b7f     55 6E 6B 6E 
30b83     6F 77 6E 20 
30b87     65 72 72 6F 
30b8b     72 20 77 68 
30b8f     69 6C 65 20 
30b93     6D 75 6C 74 
30b97     69 70 6C 79 
30b9b     69 6E 67 2E | 	byte	"Unknown error while multiplying."
30b9f     00          | 	byte	0
30ba0                 | LR__5481
30ba0     43 61 6E 6E 
30ba4     6F 74 20 64 
30ba8     69 76 69 64 
30bac     65 20 73 74 
30bb0     72 69 6E 67 
30bb4     73 2E       | 	byte	"Cannot divide strings."
30bb6     00          | 	byte	0
30bb7                 | LR__5482
30bb7     55 6E 6B 6E 
30bbb     6F 77 6E 20 
30bbf     65 72 72 6F 
30bc3     72 20 77 68 
30bc7     69 6C 65 20 
30bcb     64 69 76 69 
30bcf     64 69 6E 67 
30bd3     2E          | 	byte	"Unknown error while dividing."
30bd4     00          | 	byte	0
30bd5                 | LR__5483
30bd5     43 61 6E 6E 
30bd9     6F 74 20 63 
30bdd     6F 6D 70 75 
30be1     74 65 20 61 
30be5     20 70 6F 77 
30be9     65 72 20 6F 
30bed     66 20 61 20 
30bf1     73 74 72 69 
30bf5     6E 67 2E    | 	byte	"Cannot compute a power of a string."
30bf8     00          | 	byte	0
30bf9                 | LR__5484
30bf9     55 6E 6B 6E 
30bfd     6F 77 6E 20 
30c01     65 72 72 6F 
30c05     72 20 77 68 
30c09     69 6C 65 20 
30c0d     63 6F 6D 70 
30c11     75 74 69 6E 
30c15     67 20 61 20 
30c19     70 6F 77 65 
30c1d     72 2E       | 	byte	"Unknown error while computing a power."
30c1f     00          | 	byte	0
30c20                 | LR__5485
30c20     52 69 67 68 
30c24     74 20 70 61 
30c28     72 65 6E 74 
30c2c     68 65 73 69 
30c30     73 20 65 78 
30c34     70 65 63 74 
30c38     65 64 2E    | 	byte	"Right parenthesis expected."
30c3b     00          | 	byte	0
30c3c                 | LR__5486
30c3c     45 78 70 65 
30c40     63 74 65 64 
30c44     20 73 74 72 
30c48     69 6E 67 2E | 	byte	"Expected string."
30c4c     00          | 	byte	0
30c4d                 | LR__5487
30c4d     45 78 70 65 
30c51     63 74 65 64 
30c55     20 66 6C 6F 
30c59     61 74 2E    | 	byte	"Expected float."
30c5c     00          | 	byte	0
30c5d                 | LR__5488
30c5d     45 78 70 65 
30c61     63 74 65 64 
30c65     20 75 6E 73 
30c69     69 67 6E 65 
30c6d     64 20 69 6E 
30c71     74 65 67 65 
30c75     72 2E       | 	byte	"Expected unsigned integer."
30c77     00          | 	byte	0
30c78                 | LR__5489
30c78     45 78 70 65 
30c7c     63 74 65 64 
30c80     20 69 6E 74 
30c84     65 67 65 72 
30c88     2E          | 	byte	"Expected integer."
30c89     00          | 	byte	0
30c8a                 | LR__5490
30c8a     4E 6F 20 6D 
30c8e     6F 72 65 20 
30c92     76 61 72 69 
30c96     61 62 6C 65 
30c9a     20 73 6C 6F 
30c9e     74 73 2E    | 	byte	"No more variable slots."
30ca1     00          | 	byte	0
30ca2                 | LR__5491
30ca2     56 61 72 69 
30ca6     61 62 6C 65 
30caa     20 6E 6F 74 
30cae     20 66 6F 75 
30cb2     6E 64 2E    | 	byte	"Variable not found."
30cb5     00          | 	byte	0
30cb6                 | LR__5492
30cb6     43 6F 6D 6D 
30cba     61 20 65 78 
30cbe     70 65 63 74 
30cc2     65 64 2E    | 	byte	"Comma expected."
30cc5     00          | 	byte	0
30cc6                 | LR__5493
30cc6     43 6F 6D 6D 
30cca     61 20 6F 72 
30cce     20 73 65 6D 
30cd2     69 63 6F 6C 
30cd6     6F 6E 20 65 
30cda     78 70 65 63 
30cde     74 65 64 2E | 	byte	"Comma or semicolon expected."
30ce2     00          | 	byte	0
30ce3                 | LR__5494
30ce3     55 6E 6B 6E 
30ce7     6F 77 6E 20 
30ceb     63 6F 6D 6D 
30cef     61 6E 64 2E | 	byte	"Unknown command."
30cf3     00          | 	byte	0
30cf4                 | LR__5495
30cf4     53 74 61 63 
30cf8     6B 20 75 6E 
30cfc     64 65 72 66 
30d00     6C 6F 77 2E | 	byte	"Stack underflow."
30d04     00          | 	byte	0
30d05                 | LR__5496
30d05     43 61 6E 6E 
30d09     6F 74 20 65 
30d0d     78 65 63 75 
30d11     74 65 20 67 
30d15     6F 74 6F 20 
30d19     69 6E 20 74 
30d1d     68 65 20 69 
30d21     6D 6D 65 64 
30d25     69 61 74 65 
30d29     20 6D 6F 64 
30d2d     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
30d2f     00          | 	byte	0
30d30                 | LR__5497
30d30     43 61 6E 6E 
30d34     6F 74 20 6C 
30d38     6F 61 64 20 
30d3c     66 72 6F 6D 
30d40     20 74 68 69 
30d44     73 20 66 69 
30d48     6C 65 2E    | 	byte	"Cannot load from this file."
30d4b     00          | 	byte	0
30d4c                 | LR__5498
30d4c     54 68 65 20 
30d50     70 72 6F 67 
30d54     72 61 6D 20 
30d58     69 73 20 65 
30d5c     6D 70 74 79 
30d60     2E          | 	byte	"The program is empty."
30d61     00          | 	byte	0
30d62                 | LR__5499
30d62     49 66 20 61 
30d66     66 74 65 72 
30d6a     20 69 66 2E | 	byte	"If after if."
30d6e     00          | 	byte	0
30d6f                 | LR__5500
30d6f     45 6D 70 74 
30d73     79 20 65 78 
30d77     70 72 65 73 
30d7b     73 69 6F 6E 
30d7f     2E          | 	byte	"Empty expression."
30d80     00          | 	byte	0
30d81                 | LR__5501
30d81     53 74 72 69 
30d85     6E 67 20 65 
30d89     78 70 65 63 
30d8d     74 65 64 2E | 	byte	"String expected."
30d91     00          | 	byte	0
30d92                 | LR__5502
30d92     49 6E 74 65 
30d96     72 70 72 65 
30d9a     74 65 72 20 
30d9e     69 6E 74 65 
30da2     72 6E 61 6C 
30da6     20 65 72 72 
30daa     6F 72 2E    | 	byte	"Interpreter internal error."
30dad     00          | 	byte	0
30dae                 | LR__5503
30dae     45 78 70 65 
30db2     63 74 65 64 
30db6     20 61 73 73 
30dba     69 67 6E 2E | 	byte	"Expected assign."
30dbe     00          | 	byte	0
30dbf                 | LR__5504
30dbf     45 78 70 65 
30dc3     63 74 65 64 
30dc7     20 27 74 6F 
30dcb     27 2E       | 	byte	"Expected 'to'."
30dcd     00          | 	byte	0
30dce                 | LR__5505
30dce     45 78 70 65 
30dd2     63 74 65 64 
30dd6     20 69 6E 74 
30dda     65 67 65 72 
30dde     20 76 61 72 
30de2     69 61 62 6C 
30de6     65 2E       | 	byte	"Expected integer variable."
30de8     00          | 	byte	0
30de9                 | LR__5506
30de9     55 6E 69 6E 
30ded     69 74 69 61 
30df1     6C 69 7A 65 
30df5     64 20 76 61 
30df9     72 69 61 62 
30dfd     6C 65 20 69 
30e01     6E 20 27 6E 
30e05     65 78 74 27 
30e09     2C 20 75 73 
30e0d     65 20 27 66 
30e11     6F 72 27 20 
30e15     62 65 66 6F 
30e19     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
30e1c     00          | 	byte	0
30e1d                 | LR__5507
30e1d     4E 6F 20 6D 
30e21     6F 72 65 20 
30e25     73 6C 6F 74 
30e29     73 20 66 6F 
30e2d     72 20 27 66 
30e31     6F 72 27 2E | 	byte	"No more slots for 'for'."
30e35     00          | 	byte	0
30e36                 | LR__5508
30e36     27 4E 65 78 
30e3a     74 27 20 64 
30e3e     6F 65 73 6E 
30e42     27 74 20 6D 
30e46     61 74 63 68 
30e4a     20 27 66 6F 
30e4e     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
30e51     00          | 	byte	0
30e52                 | LR__5509
30e52     27 47 6F 74 
30e56     6F 27 20 74 
30e5a     61 72 67 65 
30e5e     74 20 6C 69 
30e62     6E 65 20 6E 
30e66     6F 74 20 66 
30e6a     6F 75 6E 64 
30e6e     2E          | 	byte	"'Goto' target line not found."
30e6f     00          | 	byte	0
30e70                 | LR__5510
30e70     42 61 64 20 
30e74     6E 75 6D 62 
30e78     65 72 20 6F 
30e7c     66 20 70 61 
30e80     72 61 6D 65 
30e84     74 65 72 73 | 	byte	"Bad number of parameters"
30e88     00          | 	byte	0
30e89                 | LR__5511
30e89     46 75 6E 63 
30e8d     74 69 6F 6E 
30e91     20 75 6E 64 
30e95     65 66 69 6E 
30e99     65 64 20 66 
30e9d     6F 72 20 73 
30ea1     74 72 69 6E 
30ea5     67 73       | 	byte	"Function undefined for strings"
30ea7     00          | 	byte	0
30ea8                 | LR__5512
30ea8     42 61 64 20 
30eac     70 61 72 61 
30eb0     6D 65 74 65 
30eb4     72 2E       | 	byte	"Bad parameter."
30eb6     00          | 	byte	0
30eb7                 | LR__5513
30eb7     43 61 6E 6E 
30ebb     6F 74 20 64 
30ebf     65 63 6C 61 
30ec3     72 65 20 61 
30ec7     6E 20 61 72 
30ecb     72 61 79 3A 
30ecf     20 74 68 65 
30ed3     20 76 61 72 
30ed7     69 61 62 6C 
30edb     65 20 65 78 
30edf     69 73 74 73 
30ee3     2E          | 	byte	"Cannot declare an array: the variable exists."
30ee4     00          | 	byte	0
30ee5                 | LR__5514
30ee5     45 78 70 65 
30ee9     63 74 65 64 
30eed     20 27 28 27 
30ef1     2E          | 	byte	"Expected '('."
30ef2     00          | 	byte	0
30ef3                 | LR__5515
30ef3     45 78 70 65 
30ef7     63 74 65 64 
30efb     20 27 29 27 
30eff     20 6F 72 20 
30f03     27 2C 27 2E | 	byte	"Expected ')' or ','."
30f07     00          | 	byte	0
30f08                 | LR__5516
30f08     4E 6F 20 6D 
30f0c     6F 72 65 20 
30f10     74 68 61 6E 
30f14     20 33 20 64 
30f18     69 6D 65 6E 
30f1c     73 69 6F 6E 
30f20     73 20 73 75 
30f24     70 70 6F 72 
30f28     74 65 64    | 	byte	"No more than 3 dimensions supported"
30f2b     00          | 	byte	0
30f2c                 | LR__5517
30f2c     56 61 72 69 
30f30     61 62 6C 65 
30f34     20 6E 61 6D 
30f38     65 20 65 78 
30f3c     70 65 63 74 
30f40     65 64       | 	byte	"Variable name expected"
30f42     00          | 	byte	0
30f43                 | LR__5518
30f43     54 79 70 65 
30f47     20 6E 61 6D 
30f4b     65 20 65 78 
30f4f     70 65 63 74 
30f53     65 64       | 	byte	"Type name expected"
30f55     00          | 	byte	0
30f56                 | LR__5519
30f56     54 79 70 65 
30f5a     20 6E 6F 74 
30f5e     20 73 75 70 
30f62     70 6F 72 74 
30f66     65 64 20 79 
30f6a     65 74       | 	byte	"Type not supported yet"
30f6c     00          | 	byte	0
30f6d                 | LR__5520
30f6d     41 72 72 61 
30f71     79 20 69 6E 
30f75     64 65 78 20 
30f79     6F 75 74 20 
30f7d     6F 66 20 72 
30f81     61 6E 67 65 | 	byte	"Array index out of range"
30f85     00          | 	byte	0
30f86                 | LR__5521
30f86     42 61 64 20 
30f8a     74 79 70 65 
30f8e     20 77 68 69 
30f92     6C 65 20 61 
30f96     73 73 69 67 
30f9a     6E 69 6E 67 
30f9e     20 74 6F 20 
30fa2     61 72 72 61 
30fa6     79          | 	byte	"Bad type while assigning to array"
30fa7     00          | 	byte	0
30fa8                 | LR__5522
30fa8     45 72 72 6F 
30fac     72 20       | 	byte	"Error "
30fae     00          | 	byte	0
30faf                 | LR__5523
30faf     3A 20       | 	byte	": "
30fb1     00          | 	byte	0
30fb2                 | LR__5524
30fb2     2F 73 64    | 	byte	"/sd"
30fb5     00          | 	byte	0
30fb6                 | LR__5525
30fb6     2F 73 64 2F 
30fba     62 61 73    | 	byte	"/sd/bas"
30fbd     00          | 	byte	0
30fbe                 | LR__5526
30fbe     2F 73 64 2F 
30fc2     62 61 73    | 	byte	"/sd/bas"
30fc5     00          | 	byte	0
30fc6                 | LR__5527
30fc6     20 42 41 53 
30fca     49 43 20 62 
30fce     79 74 65 73 
30fd2     20 66 72 65 
30fd6     65          | 	byte	" BASIC bytes free"
30fd7     00          | 	byte	0
30fd8                 | LR__5528
30fd8     52 65 61 64 
30fdc     79          | 	byte	"Ready"
30fdd     00          | 	byte	0
30fde                 | LR__5529
30fde     6E 6F 6E 61 
30fe2     6D 65 2E 62 
30fe6     61 73       | 	byte	"noname.bas"
30fe8     00          | 	byte	0
30fe9                 | LR__5530
30fe9                 | 	byte	
30fe9     00          | 	byte	0
30fea     00 00       | 	alignl
30fec                 | _dat_
30fec     00 00 00 00 
30ff0     00 00 00 00 
30ff4     00 00 00 00 
30ff8     00 00 00 00 | 	byte	$00[16]
30ffc     61 41 17 0E 
31000     62 42 00 00 
31004     63 43 19 10 
31008     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
3100c     65 45 18 0F 
31010     66 46 00 00 
31014     67 47 00 00 
31018     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
3101c     69 49 00 00 
31020     6A 4A 00 00 
31024     6B 4B 00 00 
31028     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
3102c     6D 4D 00 00 
31030     6E 4E 1A 11 
31034     6F 4F 1E 15 
31038     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
3103c     71 51 00 00 
31040     72 52 00 00 
31044     73 53 1B 12 
31048     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
3104c     75 55 00 00 
31050     76 56 00 00 
31054     77 57 00 00 
31058     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
3105c     79 59 00 00 
31060     7A 5A 1D 14 
31064     31 21 04 00 
31068     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
3106c     33 23 06 00 
31070     34 24 07 00 
31074     35 25 08 00 
31078     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
3107c     37 26 0A 00 
31080     38 2A 0B 00 
31084     39 28 0C 00 
31088     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
3108c     8D 8D 00 00 
31090     9B 9B 00 00 
31094     88 88 00 00 
31098     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
3109c     20 20 00 00 
310a0     2D 5F 00 00 
310a4     3D 2B 00 00 
310a8     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
310ac     5D 7D 00 00 
310b0     5C 7C 00 00 
310b4     23 7E 00 00 
310b8     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
310bc     27 22 00 00 
310c0     60 7E 03 00 
310c4     2C 3C 00 00 
310c8     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
310cc     2F 3F 00 00 
310d0     B9 B9 00 00 
310d4     BA 00 00 00 
310d8     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
310dc     BC 00 00 00 
310e0     BD 00 00 00 
310e4     BE 00 00 00 
310e8     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
310ec     C0 00 00 00 
310f0     C1 00 00 00 
310f4     C2 00 00 00 
310f8     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
310fc     C4 00 00 00 
31100     C5 00 00 00 
31104     C6 00 00 00 
31108     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
3110c     C8 00 00 00 
31110     C9 00 00 00 
31114     CA 00 00 00 
31118     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
3111c     7F 7F 00 00 
31120     CC 00 00 00 
31124     CD 00 00 00 
31128     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
3112c     CF 00 00 00 
31130     D0 00 00 00 
31134     D1 00 00 00 
31138     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
3113c     2F 2F 00 00 
31140     2A 2A 00 00 
31144     2D 2D 00 00 
31148     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
3114c     8D 8D 00 00 
31150     31 31 00 00 
31154     32 32 00 00 
31158     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
3115c     34 34 00 00 
31160     35 35 00 00 
31164     36 36 00 00 
31168     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
3116c     38 38 00 00 
31170     39 39 00 00 
31174     30 30 00 00 
31178     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
3117c     5C 7C 00 00 
31180     00 00 00 00 
31184     00 00 00 00 
31188     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
3118c     00 00 00 00 
      ...             
311e4     00 00 00 00 
311e8     00 00 00 00 | 	byte	$00[96]
311ec     2B 00 A6 F2 
311f0     24 A7 09 80 
311f4     5B 88 4D 89 
311f8     80 88 A5 88 | atari_spl file "atari.spl"
311fc     6D 88 B8 88 
31200     80 88 CB 88 
31204     92 88 A5 88 
31208     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
3120c     A5 88 CA 88 
31210     A6 88 DD 88 
31214     B8 88 AB 89 
31218     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
3121c     C8 AD C6 F1 
31220     91 06 B6 FF 
31224     13 00 4A 00 
31228     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
3122c     5D 00 5E 00 
31230     5D 00 5E 00 
31234     5E 00 5D 00 
31238     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
3123c     38 00 83 00 
31240     25 00 83 00 
31244     C3 FE D1 04 
31248     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
3124c     48 88 38 85 
31250     41 8A CB 88 
31254     28 89 B8 88 
31258     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
3125c     15 89 03 89 
31260     02 89 15 89 
31264     16 89 15 89 
31268     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
3126c     15 89 3A 89 
31270     72 89 E3 89 
31274     52 83 AD 97 
31278     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
3127c     0C 02 B6 FF 
31280     E1 00 A8 00 
31284     F3 00 A8 00 
31288     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
3128c     CE 00 CD 00 
31290     CD 00 BA 00 
31294     E1 00 BB 00 
31298     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
3129c     DF 00 C9 FF 
312a0     E6 01 B6 06 
312a4     EE DD 8D 98 
312a8     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
312ac     97 89 73 89 
312b0     3B 89 60 89 
312b4     60 89 60 89 
312b8     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
312bc     73 89 72 89 
312c0     85 89 73 89 
312c4     AA 89 60 89 
312c8     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
312cc     E8 8A 18 86 
312d0     92 88 A5 C2 
312d4     E0 00 C3 05 
312d8     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
312dc     F2 00 64 01 
312e0     06 01 3E 01 
312e4     2B 01 2B 01 
312e8     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
312ec     2B 01 2A 01 
312f0     2B 01 2B 01 
312f4     2B 01 18 01 
312f8     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
312fc     39 07 61 F3 
31300     C0 AF 37 85 
31304     0F 88 8B 8A 
31308     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
3130c     AB 89 D0 89 
31310     AB 89 D0 89 
31314     D0 89 CF 89 
31318     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
3131c     D0 89 F5 89 
31320     BD 89 08 8A 
31324     CF 89 E8 8A 
31328     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
3132c     53 B3 0D F8 
31330     F4 07 38 00 
31334     63 01 63 01 
31338     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
3133c     88 01 88 01 
31340     76 01 88 01 
31344     88 01 89 01 
31348     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
3134c     75 01 AE 01 
31350     76 01 88 01 
31354     4A 00 46 06 
31358     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
3135c     08 8A 9A 86 
31360     33 8B 08 8A 
31364     2D 8A F5 89 
31368     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
3136c     2D 8A 2D 8A 
31370     2E 8A 1B 8A 
31374     40 8A 2D 8A 
31378     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
3137c     2E 8A 79 8A 
31380     66 8A C8 8B 
31384     72 82 2B 97 
31388     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
3138c     1D 02 05 01 
31390     F8 01 C0 01 
31394     0B 02 C0 01 
31398     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
3139c     F9 01 D3 01 
313a0     F8 01 D3 01 
313a4     F8 01 D2 01 
313a8     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
313ac     E6 01 2B 01 
313b0     8E 02 5F 07 
313b4     F7 E2 ED 9C 
313b8     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
313bc     E8 8A 78 8A 
313c0     78 8A 65 8A 
313c4     8B 8A 78 8A 
313c8     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
313cc     8B 8A 9D 8A 
313d0     9D 8A 8B 8A 
313d4     C2 8A 78 8A 
313d8     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
313dc     70 8C 18 86 
313e0     8B 8A 23 C9 
313e4     CB 03 C4 05 
313e8     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
313ec     0B 02 7B 02 
313f0     1E 02 55 02 
313f4     30 02 43 02 
313f8     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
313fc     43 02 44 02 
31400     43 02 30 02 
31404     68 02 31 02 
31408     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
3140c     07 08 3F F7 
31410     73 B2 13 85 
31414     15 89 ED 8B 
31418     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
3141c     B0 8A FB 8A 
31420     D5 8A FA 8A 
31424     E8 8A FB 8A 
31428     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
3142c     E8 8A 21 8B 
31430     E7 8A 33 8B 
31434     E8 8A 26 8C 
31438     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
3143c     8D B0 27 F6 
31440     9C 08 AD 01 
31444     7B 02 8D 02 
31448     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
3144c     A1 02 A0 02 
31450     A1 02 A0 02 
31454     A0 02 A0 02 
31458     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
3145c     7B 02 D8 02 
31460     7B 02 C6 02 
31464     3E 01 C3 05 
31468     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
3146c     00 8C 2A 86 
31470     E0 8C FA 8A 
31474     6A 8B FB 8A 
31478     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
3147c     45 8B 45 8B 
31480     45 8B 6B 8B 
31484     46 8B 59 8B 
31488     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
3148c     6B 8B 6B 8B 
31490     6B 8B 6B 8B 
31494     7D 8B 7D 8B 
31498     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
3149c     90 8B 91 8B 
314a0     90 8B 90 8B 
314a4     A3 8B A3 8B 
314a8     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
314ac     B5 8B B6 8B 
314b0     B5 8B B5 8B 
314b4     B6 8B C8 8B 
314b8     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
314bc     C8 8B DA 8B 
314c0     DB 8B DB 8B 
314c4     DB 8B DC 8B 
314c8     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
314cc     EE 8B EE 8B 
314d0     00 8C 01 8C 
314d4     00 8C 01 8C 
314d8     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
314dc     12 8C 13 8C 
314e0     13 8C 26 8C 
314e4     26 8C 26 8C 
314e8     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
314ec     38 8C 38 8C 
314f0     38 8C 38 8C 
314f4     4B 8C 4B 8C 
314f8     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
314fc     5E 8C 5E 8C 
31500     5E 8C 5E 8C 
31504     70 8C 70 8C 
31508     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
3150c     70 8C 83 8C 
31510     83 8C 83 8C 
31514     83 8C 96 8C 
31518     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
3151c     95 8C A9 8C 
31520     A9 8C A8 8C 
31524     A8 8C A8 8C 
31528     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
3152c     BB 8C BB 8C 
31530     BB 8C CE 8C 
31534     CE 8C CE 8C 
31538     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
3153c     E0 8C E1 8C 
31540     E1 8C E0 8C 
31544     F4 8C F2 8C 
31548     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
3154c     05 8D 05 8D 
31550     06 8D 06 8D 
31554     19 8D 19 8D 
31558     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
3155c     18 8D 2B 8D 
31560     2B 8D 2B 8D 
31564     2A 8D 3E 8D 
31568     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
3156c     3E 8D 51 8D 
31570     50 8D 50 8D 
31574     50 8D 51 8D 
31578     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
3157c     63 8D 64 8D 
31580     76 8D 75 8D 
31584     75 8D 76 8D 
31588     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
3158c     88 8D 88 8D 
31590     89 8D 9B 8D 
31594     9A 8D 9B 8D 
31598     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
3159c     AD 8D AE 8D 
315a0     AD 8D AE 8D 
315a4     C1 8D C1 8D 
315a8     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
315ac     D3 8D D3 8D 
315b0     D3 8D D3 8D 
315b4     D3 8D E6 8D 
315b8     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
315bc     E6 8D E6 8D 
315c0     F9 8D F9 8D 
315c4     F9 8D F8 8D 
315c8     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
315cc     0B 8E 0B 8E 
315d0     1D 8E 1D 8E 
315d4     1E 8E 1E 8E 
315d8     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
315dc     31 8E 31 8E 
315e0     31 8E 42 8E 
315e4     43 8E 43 8E 
315e8     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
315ec     56 8E 56 8E 
315f0     55 8E 56 8E 
315f4     68 8E 69 8E 
315f8     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
315fc     69 8E 7B 8E 
31600     7C 8E 7B 8E 
31604     7B 8E 8D 8E 
31608     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
3160c     8D 8E A1 8E 
31610     A0 8E A1 8E 
31614     A1 8E A0 8E 
31618     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
3161c     B3 8E B3 8E 
31620     C6 8E C5 8E 
31624     C6 8E C6 8E 
31628     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
3162c     D8 8E D9 8E 
31630     D8 8E EC 8E 
31634     EB 8E EC 8E 
31638     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
3163c     FE 8E FE 8E 
31640     FE 8E FE 8E 
31644     10 8F 10 8F 
31648     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
3164c     11 8F 23 8F 
31650     24 8F 23 8F 
31654     24 8F 37 8F 
31658     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
3165c     36 8F 36 8F 
31660     48 8F 49 8F 
31664     49 8F 49 8F 
31668     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
3166c     5B 8F 5C 8F 
31670     5B 8F 6E 8F 
31674     6E 8F 6E 8F 
31678     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
3167c     81 8F 81 8F 
31680     81 8F 81 8F 
31684     93 8F 93 8F 
31688     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
3168c     93 8F A6 8F 
31690     A6 8F A6 8F 
31694     A6 8F B9 8F 
31698     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
3169c     B9 8F B9 8F 
316a0     CC 8F CB 8F 
316a4     CB 8F CC 8F 
316a8     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
316ac     DF 8F DE 8F 
316b0     DE 8F F1 8F 
316b4     F1 8F F1 8F 
316b8     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
316bc     03 90 04 90 
316c0     04 90 04 90 
316c4     16 90 17 90 
316c8     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
316cc     29 90 28 90 
316d0     29 90 28 90 
316d4     29 90 3C 90 
316d8     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
316dc     3C 90 4F 90 
316e0     4E 90 4E 90 
316e4     4E 90 4E 90 
316e8     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
316ec     61 90 61 90 
316f0     73 90 74 90 
316f4     74 90 74 90 
316f8     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
316fc     87 90 86 90 
31700     87 90 86 90 
31704     99 90 99 90 
31708     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
3170c     AB 90 AB 90 
31710     AC 90 AB 90 
31714     AB 90 BF 90 
31718     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
3171c     BE 90 D1 90 
31720     D0 90 D1 90 
31724     D1 90 D1 90 
31728     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
3172c     E3 90 E4 90 
31730     F6 90 F6 90 
31734     F6 90 F6 90 
31738     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
3173c     09 91 0A 91 
31740     0A 91 1C 91 
31744     1C 91 1C 91 
31748     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
3174c     2F 91 2E 91 
31750     2F 91 2F 91 
31754     2E 91 41 91 
31758     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
3175c     41 91 53 91 
31760     54 91 54 91 
31764     53 91 54 91 
31768     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
3176c     67 91 67 91 
31770     79 91 7A 91 
31774     79 91 78 91 
31778     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
3177c     8C 91 8B 91 
31780     8C 91 8C 91 
31784     9E 91 9E 91 
31788     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
3178c     B1 91 B1 91 
31790     B2 91 B1 91 
31794     B1 91 C4 91 
31798     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
3179c     C4 91 D6 91 
317a0     D7 91 D7 91 
317a4     D7 91 D6 91 
317a8     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
317ac     EA 91 EA 91 
317b0     EA 91 FC 91 
317b4     FC 91 FB 91 
317b8     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
317bc     0E 92 0F 92 
317c0     0F 92 0E 92 
317c4     21 92 21 92 
317c8     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
317cc     21 92 34 92 
317d0     33 92 34 92 
317d4     34 92 47 92 
317d8     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
317dc     46 92 47 92 
317e0     59 92 59 92 
317e4     59 92 59 92 
317e8     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
317ec     6C 92 6C 92 
317f0     6B 92 7E 92 
317f4     7E 92 7E 92 
317f8     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
317fc     92 92 91 92 
31800     91 92 90 92 
31804     91 92 A4 92 
31808     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
3180c     A3 92 B6 92 
31810     B6 92 B7 92 
31814     B7 92 B6 92 
31818     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
3181c     CA 92 C9 92 
31820     CA 92 DC 92 
31824     DC 92 DC 92 
31828     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
3182c     EF 92 EF 92 
31830     EF 92 EF 92 
31834     01 93 01 93 
31838     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
3183c     15 93 14 93 
31840     14 93 14 93 
31844     14 93 27 93 
31848     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
3184c     27 93 39 93 
31850     3A 93 39 93 
31854     39 93 39 93 
31858     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
3185c     4B 93 4C 93 
31860     5F 93 5F 93 
31864     5F 93 5E 93 
31868     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
3186c     5F 93 84 93 
31870     4C 93 96 93 
31874     5F 93 AE 94 
31878     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
3187c     7B C1 00 00 
31880     00 00 00 00 
31884     00 00 00 00 
31888     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3188c     00 00 00 00 | 	byte	$00, $00, $00, $00
31890     00 00 00 00 | zero long 0
31894     7A D7 00 80 
31898     87 8A 48 8F 
3189c     EC 8C 76 8D 
318a0     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
318a4     3C 8D 82 8D 
318a8     42 8D 88 8D 
318ac     8C 8D 8E 8D 
318b0     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
318b4     97 8D DE 8D 
318b8     E1 8D F1 8E 
318bc     D8 8C A3 83 
318c0     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
318c4     65 71 C9 65 
318c8     FC 64 C4 65 
318cc     C1 65 BF 65 
318d0     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
318d4     B6 65 B4 65 
318d8     B2 65 AE 65 
318dc     AC 65 ED 65 
318e0     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
318e4     5E 65 25 66 
318e8     FA 62 23 6B 
318ec     B5 6C 61 0A 
318f0     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
318f4     5D 90 BE 8D 
318f8     47 8E C3 8D 
318fc     09 8E C9 8D 
31900     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
31904     15 8E 19 8E 
31908     1B 8E 62 8E 
3190c     64 8E 68 8E 
31910     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
31914     B5 8E 4C 90 
31918     FA 84 3C 9D 
3191c     98 13 79 6D 
31920     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
31924     D9 66 50 66 
31928     D4 66 4B 66 
3192c     8C 66 46 66 
31930     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
31934     81 66 3A 66 
31938     7C 66 36 66 
3193c     76 66 30 66 
31940     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
31944     6B 66 88 72 
31948     BF 37 E7 B7 
3194c     75 83 8B 8E 
31950     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
31954     94 8E 96 8E 
31958     DD 8E 9C 8E 
3195c     E2 8E A2 8E 
31960     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
31964     EE 8E AE 8E 
31968     38 8F B5 8E 
3196c     3F 8F FD 8E 
31970     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
31974     A5 87 1E E3 
31978     6D 5D FA 71 
3197c     41 64 25 67 
31980     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
31984     D9 66 1A 67 
31988     18 67 15 67 
3198c     12 67 0F 67 
31990     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
31994     07 67 C0 66 
31998     01 67 BC 66 
3199c     B8 66 DE 64 
319a0     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
319a4     43 E5 1F 8B 
319a8     14 8A F1 90 
319ac     1C 8F 63 8F 
319b0     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
319b4     29 8F 6E 8F 
319b8     72 8F 75 8F 
319bc     34 8F BE 8F 
319c0     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
319c4     84 8F 87 8F 
319c8     CC 8F 56 90 
319cc     67 91 49 80 
319d0     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
319d4     46 77 A6 66 
319d8     E8 66 B0 67 
319dc     AD 67 ED 67 
319e0     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
319e4     A2 67 E3 67 
319e8     9D 67 9A 67 
319ec     98 67 94 67 
319f0     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
319f4     49 67 CD 67 
319f8     28 65 5F 6E 
319fc     82 67 3A 01 
31a00     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
31a04     C2 91 A9 8F 
31a08     EF 8F AE 8F 
31a0c     F4 8F B5 8F 
31a10     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
31a14     01 90 03 90 
31a18     07 90 09 90 
31a1c     0C 90 53 90 
31a20     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
31a24     18 90 44 93 
31a28     85 84 D6 9D 
31a2c     87 1F 2F 75 
31a30     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
31a34     C4 68 F6 67 
31a38     BE 68 F1 67 
31a3c     76 68 2E 68 
31a40     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
31a44     27 68 24 68 
31a48     64 68 1E 68 
31a4c     5F 68 19 68 
31a50     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
31a54     DC 68 56 72 
31a58     7E 36 C2 B8 
31a5c     D7 84 73 90 
31a60     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
31a64     7B 90 7F 90 
31a68     82 90 84 90 
31a6c     CB 90 8B 90 
31a70     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
31a74     D7 90 96 90 
31a78     20 91 59 90 
31a7c     25 91 A2 90 
31a80     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
31a84     D0 89 40 EE 
31a88     12 64 C4 71 
31a8c     29 66 0C 69 
31a90     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
31a94     C0 68 02 69 
31a98     FE 68 FB 68 
31a9c     F9 68 F6 68 
31aa0     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
31aa4     EE 68 A8 68 
31aa8     2C 69 5F 68 
31aac     E2 68 81 66 
31ab0     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
31ab4     1E EB A6 8A 
31ab8     73 8B 5E 93 
31abc     7B 90 48 91 
31ac0     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
31ac4     0D 91 11 91 
31ac8     14 91 16 91 
31acc     5C 91 1C 91 
31ad0     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
31ad4     68 91 AF 91 
31ad8     2A 91 B5 91 
31adc     75 91 1A 94 
31ae0     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
31ae4     70 0E CB 6C 
31ae8     5D 6E C4 67 
31aec     99 69 54 69 
31af0     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
31af4     D2 69 49 69 
31af8     89 69 86 69 
31afc     40 69 C4 69 
31b00     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
31b04     35 69 76 69 
31b08     58 67 EB 6D 
31b0c     E9 6D 89 0F 
31b10     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
31b14     33 94 94 91 
31b18     D9 91 56 91 
31b1c     E0 91 9F 91 
31b20     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
31b24     EC 91 EE 91 
31b28     F1 91 F4 91 
31b2c     F7 91 3D 92 
31b30     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
31b34     46 92 21 94 
31b38     11 89 A4 9D 
31b3c     FD 0E 8F 6C 
31b40     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
31b44     28 6A E1 69 
31b48     65 6A 1F 6A 
31b4c     5F 6A 1A 6A 
31b50     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
31b54     54 6A 0F 6A 
31b58     4F 6A 09 6A 
31b5c     06 6A 03 6A 
31b60     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
31b64     23 68 69 77 
31b68     3A 4D 38 CA 
31b6c     38 86 4E 91 
31b70     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
31b74     64 92 24 92 
31b78     6A 92 2A 92 
31b7c     70 92 30 92 
31b80     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
31b84     7B 92 7E 92 
31b88     C5 92 84 92 
31b8c     CB 92 8A 92 
31b90     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
31b94     4D 8D F9 E2 
31b98     97 59 FE 74 
31b9c     DB 68 6D 6A 
31ba0     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
31ba4     A8 6A A5 6A 
31ba8     A3 6A 9F 6A 
31bac     9D 6A 9B 6A 
31bb0     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
31bb4     D6 6A 8F 6A 
31bb8     CF 6A 46 6A 
31bbc     CA 6A E1 67 
31bc0     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
31bc4     D3 F7 15 92 
31bc8     90 8C BF 94 
31bcc     A6 92 EB 92 
31bd0     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
31bd4     B1 92 F7 92 
31bd8     FA 92 FD 92 
31bdc     00 93 02 93 
31be0     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
31be4     4F 93 52 93 
31be8     54 93 22 94 
31bec     5A 93 8F 88 
31bf0     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
31bf4     1C 77 07 6C 
31bf8     E8 69 7A 6B 
31bfc     34 6B 75 6B 
31c00     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
31c04     29 6B 26 6B 
31c08     24 6B 21 6B 
31c0c     1D 6B 5E 6B 
31c10     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
31c14     12 6B 52 6B 
31c18     34 69 34 6E 
31c1c     BA 73 A4 24 
31c20     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
31c24     7A 94 B3 93 
31c28     72 93 31 93 
31c2c     78 93 7A 93 
31c30     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
31c34     83 93 86 93 
31c38     89 93 D0 93 
31c3c     D2 93 D5 93 
31c40     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
31c44     DD 93 40 96 
31c48     30 8B 99 9C 
31c4c     52 10 94 71 
31c50     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
31c54     46 6C 79 6B 
31c58     40 6C B7 6B 
31c5c     F7 6B B1 6B 
31c60     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
31c64     EC 6B A5 6B 
31c68     A2 6B 9F 6B 
31c6c     9D 6B 9A 6B 
31c70     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
31c74     C8 6A E4 76 
31c78     20 4B F9 CE 
31c7c     2E 8A 1A 92 
31c80     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
31c84     FB 93 BA 93 
31c88     01 94 03 94 
31c8c     4A 94 09 94 
31c90     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
31c94     55 94 14 94 
31c98     9E 94 1A 94 
31c9c     61 94 20 94 
31ca0     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
31ca4     3E 87 E5 CD 
31ca8     5F 50 6C 78 
31cac     B5 6A 04 6C 
31cb0     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
31cb4     83 6C 7F 6C 
31cb8     7C 6C 36 6C 
31cbc     76 6C 74 6C 
31cc0     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
31cc4     6B 6C 25 6C 
31cc8     66 6C 1F 6C 
31ccc     1D 6C 41 6A 
31cd0     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
31cd4     BA FA FC 94 
31cd8     5B 8D 97 96 
31cdc     3B 94 C5 94 
31ce0     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
31ce4     89 94 8C 94 
31ce8     8F 94 92 94 
31cec     94 94 DB 94 
31cf0     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
31cf4     E4 94 E7 94 
31cf8     2D 95 74 95 
31cfc     C8 96 15 89 
31d00     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
31d04     CB 75 31 6F 
31d08     7E 6B 10 6D 
31d0c     C9 6C 0A 6D 
31d10     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
31d14     BD 6C FF 6C 
31d18     FB 6C F9 6C 
31d1c     B2 6C F3 6C 
31d20     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
31d24     A7 6C E8 6C 
31d28     0D 6B 85 6F 
31d2c     C7 74 10 28 
31d30     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
31d34     96 96 47 95 
31d38     06 95 0A 95 
31d3c     0C 95 0F 95 
31d40     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
31d44     17 95 5E 95 
31d48     61 95 63 95 
31d4c     22 95 AC 95 
31d50     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
31d54     72 95 17 98 
31d58     59 8E 01 96 
31d5c     CF FC 5A 68 
31d60     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
31d64     96 6D 50 6D 
31d68     D5 6D 4A 6D 
31d6c     8C 6D 89 6D 
31d70     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
31d74     80 6D 3A 6D 
31d78     7A 6D 77 6D 
31d7c     75 6D 71 6D 
31d80     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
31d84     18 6C BC 78 
31d88     9A 4F 7E CF 
31d8c     1F 89 F1 93 
31d90     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
31d94     D2 95 4E 95 
31d98     D7 95 53 95 
31d9c     DD 95 E0 95 
31da0     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
31da4     A5 95 EB 95 
31da8     EE 95 F0 95 
31dac     37 96 B3 95 
31db0     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
31db4     1A 98 D5 8D 
31db8     C5 9F CD 0F 
31dbc     0F 71 F3 73 
31dc0     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
31dc4     D9 6D 5E 6E 
31dc8     D3 6D 58 6E 
31dcc     12 6E 0F 6E 
31dd0     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
31dd4     49 6E BF 6D 
31dd8     87 6E 76 6D 
31ddc     81 6E 11 6B 
31de0     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
31de4     3F 09 44 95 
31de8     E5 8D 3F 99 
31dec     D4 95 A2 96 
31df0     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
31df4     23 96 69 96 
31df8     6B 96 6E 96 
31dfc     71 96 74 96 
31e00     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
31e04     BF 96 3C 96 
31e08     C6 96 C8 96 
31e0c     A3 98 51 8D 
31e10     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
31e14     CF 75 29 73 
31e18     90 6C EC 6E 
31e1c     62 6E E7 6E 
31e20     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
31e24     9A 6E 98 6E 
31e28     95 6E 91 6E 
31e2c     8E 6E CF 6E 
31e30     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
31e34     40 6E C3 6E 
31e38     E8 6C 45 6F 
31e3c     A5 7B C9 35 
31e40     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
31e44     2D 98 23 97 
31e48     E1 96 A0 96 
31e4c     A4 96 EA 96 
31e50     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
31e54     AF 96 F4 96 
31e58     F8 96 3E 97 
31e5c     FD 96 43 97 
31e60     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
31e64     08 97 6B 99 
31e68     D6 92 88 91 
31e6c     D8 EE 84 66 
31e70     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
31e74     2E 6F E7 6E 
31e78     6C 6F 24 6F 
31e7c     21 6F 1F 6F 
31e80     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
31e84     17 6F 13 6F 
31e88     54 6F 0E 6F 
31e8c     0B 6F 4B 6F 
31e90     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
31e94     27 6D 1C 7B 
31e98     19 59 9F DB 
31e9c     66 8E BC 94 
31ea0     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
31ea4     67 97 26 97 
31ea8     6D 97 2B 97 
31eac     72 97 32 97 
31eb0     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
31eb4     C1 97 7F 97 
31eb8     C6 97 85 97 
31ebc     CB 97 CE 97 
31ec0     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
31ec4     EC 8A C4 C6 
31ec8     68 4C F4 7D 
31ecc     63 6E E8 6E 
31ed0     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
31ed4     ED 6F A7 6F 
31ed8     E7 6F A0 6F 
31edc     E1 6F 9B 6F 
31ee0     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
31ee4     D5 6F 8F 6F 
31ee8     CE 6F 45 6F 
31eec     86 6F 68 6D 
31ef0     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
31ef4     C0 13 AD A2 
31ef8     A7 8E 79 99 
31efc     E6 97 E8 97 
31f00     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
31f04     F1 97 F3 97 
31f08     F6 97 F9 97 
31f0c     FB 97 FE 97 
31f10     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
31f14     4A 98 0A 98 
31f18     93 98 0F 98 
31f1c     7F 9B BF 8C 
31f20     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
31f24     91 7B 62 73 
31f28     1A 6E B9 70 
31f2c     EB 6F B3 70 
31f30     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
31f34     25 70 20 70 
31f38     1E 70 1B 70 
31f3c     18 70 15 70 
31f40     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
31f44     0D 70 09 70 
31f48     07 70 03 70 
31f4c     01 70 FD 6F 
31f50     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
31f54     F6 6F F2 6F 
31f58     EF 6F EC 6F 
31f5c     2C 70 E6 6F 
31f60     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
31f64     DD 6F 97 6F 
31f68     D7 6F 84 6E 
31f6c     8F 6F 3F 7D 
31f70     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
31f72     00 00 00 00 | zero1 long 0
31f76     FF FF FF FF 
31f7a     FF FF       | atarist_spl file "atarist.spl" '512
31f7c     00 00 00 00 
31f80     00 00 00 00 
31f84     00 00       | 	byte	$00[10]
31f86     17 7F F2 7F 
31f8a     B2 7F 72 7F 
31f8e     33 7F F4 7E 
31f92     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
31f96     36 7E F5 7D 
31f9a     E9 51 F2 0D 
31f9e     8E 00 F3 FD 
31fa2     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
31fa6     57 FD 58 FD 
31faa     5B FD 5C FD 
31fae     5C FD 60 7D 
31fb2     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
31fb6     D6 7C 98 7C 
31fba     59 7C 1A 7C 
31fbe     DC 7B 9E 7B 
31fc2     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
31fc6     F3 05 00 FD 
31fca     41 FB EA FA 
31fce     D9 FA DB FA 
31fd2     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
31fd6     E4 FA 9B 36 
31fda     F8 7A C0 7A 
31fde     84 7A 45 7A 
31fe2     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
31fe6     8E 79 51 79 
31fea     15 79 D7 78 
31fee     3C 1F EB FF 
31ff2     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
31ff6     6D F8 65 F8 
31ffa     68 F8 6D F8 
31ffe     70 F8 74 F8 
32002     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
32006     AB 60 79 60 
3200a     4B 60 1A 60 
3200e     E9 5F B9 5F 
32012     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
32016     FB 59 B2 0B 
3201a     92 FA 3A F7 
3201e     96 F6 79 F6 
32022     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
32026     82 F6 86 F6 
3202a     8C F6 DB 5D 
3202e     F1 5E C1 5E 
32032     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
32036     34 5E 04 5E 
3203a     D6 5D A6 5D 
3203e     78 5D D4 3E 
32042     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
32046     27 F5 BA F4 
3204a     AB F4 AD F4 
3204e     B2 F4 B8 F4 
32052     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
32056     26 5D 2B 5D 
3205a     FC 5C CD 5C 
3205e     9F 5C 70 5C 
32062     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
32066     E5 5B B8 5B 
3206a     DB 24 A7 FC 
3206e     D1 F4 4D F3 
32072     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
32076     04 F3 0B F3 
3207a     11 F3 16 F3 
3207e     DE 18 98 5B 
32082     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
32086     4E 4A 29 48 
3208a     A0 47 6A 47 
3208e     43 47 20 47 
32092     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
32096     E2 F6 98 F2 
3209a     C5 F1 A3 F1 
3209e     A3 F1 A8 F1 
320a2     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
320a6     BF F1 00 3D 
320aa     EF 46 CD 46 
320ae     AA 46 86 46 
320b2     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
320b6     1C 46 F9 45 
320ba     D7 45 EE 43 
320be     DE 02 E8 F3 
320c2     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
320c6     61 F0 65 F0 
320ca     6D F0 74 F0 
320ce     7C F0 84 F0 
320d2     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
320d6     8E 45 6D 45 
320da     49 45 27 45 
320de     05 45 E1 44 
320e2     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
320e6     F1 2F A9 FB 
320ea     8B F1 9B EF 
320ee     40 EF 36 EF 
320f2     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
320f6     4D EF 56 EF 
320fa     5E EF 7B 44 
320fe     8C 44 69 44 
32102     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
32106     03 44 E1 43 
3210a     C0 43 F5 37 
3210e     69 33 0F 11 
32112     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
32116     66 EE 37 EE 
3211a     38 EE 40 EE 
3211e     48 EE 51 EE 
32122     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
32126     7D 32 6A 32 
3212a     51 32 37 32 
3212e     1F 32 05 32 
32132     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
32136     B9 31 A1 31 
3213a     F1 04 F4 F1 
3213e     50 EE A0 ED 
32142     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
32146     93 ED 9A ED 
3214a     A4 ED AD ED 
3214e     F4 27 C1 31 
32152     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
32156     78 31 5F 31 
3215a     46 31 2E 31 
3215e     15 31 FC 30 
32162     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
32166     C4 EF 4A ED 
3216a     DC EC CB EC 
3216e     D2 EC DA EC 
32172     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
32176     F9 EC 64 2F 
3217a     0A 31 F1 30 
3217e     D9 30 C0 30 
32182     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
32186     78 30 5F 30 
3218a     46 30 38 23 
3218e     A6 F6 19 EE 
32192     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
32196     20 EC 28 EC 
3219a     32 EC 3C EC 
3219e     47 EC 51 EC 
321a2     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
321a6     A3 22 93 22 
321aa     7F 22 6E 22 
321ae     5D 22 4C 22 
321b2     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
321b6     77 09 76 F1 
321ba     CC EC F0 EB 
321be     CD EB CE EB 
321c2     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
321c6     ED EB F5 EB 
321ca     3E F6 6B 22 
321ce     5F 22 4E 22 
321d2     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
321d6     1B 22 0B 22 
321da     FA 21 E9 21 
321de     D8 21 4D FF 
321e2     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
321e6     92 EB 7B EB 
321ea     82 EB 8C EB 
321ee     97 EB A1 EB 
321f2     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
321f6     15 22 04 22 
321fa     F3 21 E3 21 
321fe     D2 21 C0 21 
32202     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
32206     8E 21 7D 21 
3220a     9A F8 A4 ED 
3220e     8E EB 2F EB 
32212     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
32216     37 EB 42 EB 
3221a     4C EB 57 EB 
3221e     B2 17 22 19 
32222     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
32226     FD 18 EF 18 
3222a     E3 18 D6 18 
3222e     CA 18 BD 18 
32232     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
32236     60 EC 35 EB 
3223a     01 EB 01 EB 
3223e     0C EB 16 EB 
32242     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
32246     34 EB D0 18 
3224a     00 19 F4 18 
3224e     E8 18 DA 18 
32252     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
32256     B6 18 A9 18 
3225a     9D 18 91 05 
3225e     F0 EF CA EB 
32262     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
32266     E8 EA F2 EA 
3226a     FE EA 07 EB 
3226e     12 EB C2 EF 
32272     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
32276     D9 18 CD 18 
3227a     C0 18 B3 18 
3227e     A7 18 9B 18 
32282     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
32286     B8 FC 30 EE 
3228a     61 EB DC EA 
3228e     CD EA D2 EA 
32292     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
32296     F3 EA FE EA 
3229a     D2 09 D1 18 
3229e     C3 18 17 18 
322a2     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
322a6     66 11 52 11 
322aa     49 11 41 11 
322ae     38 11 E0 F4 
322b2     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
322b6     C9 EA C5 EA 
322ba     CF EA DB EA 
322be     E6 EA EF EA 
322c2     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
322c6     89 11 80 11 
322ca     78 11 6E 11 
322ce     67 11 5D 11 
322d2     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
322d6     43 11 32 0D 
322da     9C F1 07 EC 
322de     F8 EA CD EA 
322e2     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
322e6     E4 EA ED EA 
322ea     F8 EA 02 EB 
322ee     55 11 91 11 
322f2     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
322f6     75 11 6E 11 
322fa     64 11 5E 11 
322fe     54 11 4A 11 
32302     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
32306     A8 EB F1 EA 
3230a     D9 EA DC EA 
3230e     E8 EA F1 EA 
32312     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
32316     A6 EB 9E 11 
3231a     A0 11 96 11 
3231e     8D 11 85 11 
32322     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
32326     6A 11 CA 0D 
3232a     36 0B 57 F8 
3232e     6C ED 57 EB 
32332     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
32336     F4 EA FF EA 
3233a     09 EB 15 EB 
3233e     1E EB 1A FD 
32342     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
32346     ED 0A E8 0A 
3234a     E2 0A DC 0A 
3234e     D6 0A D1 0A 
32352     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
32356     F8 F3 BC EC 
3235a     57 EB 1E EB 
3235e     18 EB 24 EB 
32362     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
32366     42 EB 4D EB 
3236a     08 09 20 0B 
3236e     1A 0B 14 0B 
32372     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
32376     04 0B FE 0A 
3237a     F9 0A F2 0A 
3237e     84 08 3A F1 
32382     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
32386     42 EB 42 EB 
3238a     4E EB 57 EB 
3238e     62 EB 6B EB 
32392     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
32396     48 0B 43 0B 
3239a     3C 0B 36 0B 
3239e     31 0B 2C 0B 
323a2     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
323a6     1B 0B 5C 00 
323aa     6A EF 1B EC 
323ae     81 EB 6A EB 
323b2     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
323b6     85 EB 8E EB 
323ba     99 EB A3 EB 
323be     DD 05 E5 05 
323c2     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
323c6     DB 05 D8 05 
323ca     D5 05 D1 05 
323ce     D0 05 CB 05 
323d2     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
323d6     0C EC BB EB 
323da     B3 EB BB EB 
323de     C5 EB D0 EB 
323e2     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
323e6     E4 F7 2C 06 
323ea     28 06 24 06 
323ee     22 06 1F 06 
323f2     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
323f6     16 06 14 06 
323fa     0F 06 D0 F3 
323fe     65 ED 2D EC 
32402     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
32406     01 EC 0A EC 
3240a     14 EC 1E EC 
3240e     29 EC FB 03 
32412     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
32416     63 06 60 06 
3241a     5E 06 59 06 
3241e     58 06 54 06 
32422     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
32426     69 F1 21 ED 
3242a     55 EC 33 EC 
3242e     36 EC 40 EC 
32432     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
32436     5C EC 68 EC 
3243a     92 02 D9 02 
3243e     D7 02 D7 02 
32442     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
32446     D1 02 D1 02 
3244a     CE 02 CD 02 
3244e     5D FC 80 EF 
32452     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
32456     83 EC 8A EC 
3245a     93 EC 9C EC 
3245e     A5 EC B1 EC 
32462     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
32466     2B 03 2A 03 
3246a     29 03 26 03 
3246e     25 03 24 03 
32472     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
32476     1F 03 70 F7 
3247a     D0 EE 27 ED 
3247e     DB EC D4 EC 
32482     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
32486     F0 EC FA EC 
3248a     02 ED F9 F4 
3248e     7B 03 7C 03 
32492     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
32496     75 03 73 03 
3249a     72 03 70 03 
3249e     6D 03 6C 03 
324a2     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
324a6     54 ED 22 ED 
324aa     22 ED 2C ED 
324ae     35 ED 3F ED 
324b2     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
324b6     14 01 C3 03 
324ba     C1 03 C0 03 
324be     5F 01 A5 00 
324c2     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
324c6     7B 00 7C 00 
324ca     20 00 85 F1 
324ce     2A EE 89 ED 
324d2     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
324d6     80 ED 87 ED 
324da     90 ED 9A ED 
324de     A3 ED 73 00 
324e2     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
324e6     D0 00 D0 00 
324ea     D0 00 D0 00 
324ee     D0 00 CF 00 
324f2     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
324f6     80 F0 3D EE 
324fa     D5 ED C7 ED 
324fe     CD ED D6 ED 
32502     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
32506     F2 ED FA ED 
3250a     1D 01 29 01 
3250e     27 01 27 01 
32512     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
32516     25 01 26 01 
3251a     26 01 23 01 
3251e     D0 F7 EC EF 
32522     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
32526     1C EE 24 EE 
3252a     2D EE 37 EE 
3252e     40 EE 47 EE 
32532     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
32536     7D 01 7B 01 
3253a     7A 01 7A 01 
3253e     79 01 78 01 
32542     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
32546     84 FE DE F3 
3254a     6C EF 93 EE 
3254e     72 EE 72 EE 
32552     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
32556     8B EE 95 EE 
3255a     9E EE 15 FC 
3255e     67 FE 67 FE 
32562     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
32566     6B FE 6B FE 
3256a     6D FE 6D FE 
3256e     6D FE 6F FE 
32572     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
32576     DF EE CC EE 
3257a     CF EE D9 EE 
3257e     E1 EE EA EE 
32582     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
32586     5A FE C4 FE 
3258a     C3 FE C5 FE 
3258e     C6 FE C6 FE 
32592     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
32596     C8 FE C7 FE 
3259a     DA FB 85 F1 
3259e     8D EF 31 EF 
325a2     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
325a6     34 EF 3E EF 
325aa     46 EF 4F EF 
325ae     57 EF 0D FF 
325b2     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
325b6     1F FF 1F FF 
325ba     21 FF 21 FF 
325be     21 FF 21 FF 
325c2     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
325c6     15 F1 BE EF 
325ca     84 EF 7E EF 
325ce     88 EF 8F EF 
325d2     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
325d6     A9 EF 06 F2 
325da     A6 FC AB FC 
325de     AD FC AE FC 
325e2     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
325e6     B2 FC B4 FC 
325ea     B6 FC B7 FC 
325ee     8B F4 BD F0 
325f2     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
325f6     E4 EF EE EF 
325fa     F6 EF FD EF 
325fe     04 F0 0E F0 
32602     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
32606     0B FD 0D FD 
3260a     0F FD 11 FD 
3260e     11 FD 13 FD 
32612     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
32616     17 FD 64 F3 
3261a     CD F0 52 F0 
3261e     41 F0 45 F0 
32622     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
32626     5B F0 64 F0 
3262a     6D F0 FB FC 
3262e     65 FD 68 FD 
32632     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
32636     6C FD 6D FD 
3263a     6F FD 70 FD 
3263e     72 FD B3 FB 
32642     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
32646     A4 F0 99 F0 
3264a     A0 F0 A8 F0 
3264e     AE F0 B9 F0 
32652     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
32656     CB FB DD FB 
3265a     DE FB E0 FB 
3265e     E3 FB E3 FB 
32662     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
32666     E9 FB EC FB 
3266a     62 F7 27 F2 
3266e     2A F1 FF F0 
32672     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
32676     0C F1 13 F1 
3267a     1B F1 23 F1 
3267e     33 F2 3C FC 
32682     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
32686     42 FC 45 FC 
3268a     47 FC 48 FC 
3268e     4A FC 4C FC 
32692     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
32696     20 F2 77 F1 
3269a     5C F1 5F F1 
3269e     64 F1 6C F1 
326a2     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
326a6     83 F1 DC F8 
326aa     9A FC 9A FC 
326ae     9B FC 9E FC 
326b2     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
326b6     A3 FC A4 FC 
326ba     A6 FC A9 FC 
326be     90 F4 33 F2 
326c2     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
326c6     BA F1 BF F1 
326ca     C7 F1 CE F1 
326ce     D6 F1 DC F1 
326d2     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
326d6     F3 FC F5 FC 
326da     FE FB 79 FB 
326de     62 FB 5F FB 
326e2     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
326e6     6F FA AF F3 
326ea     53 F2 12 F2 
326ee     0F F2 15 F2 
326f2     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
326f6     2A F2 32 F2 
326fa     38 F2 9A FB 
326fe     AF FB B1 FB 
32702     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
32706     B7 FB B8 FB 
3270a     BA FB BC FB 
3270e     C1 FB 3B F8 
32712     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
32716     6E F2 6C F2 
3271a     74 F2 7A F2 
3271e     81 F2 87 F2 
32722     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
32726     06 FC 09 FC 
3272a     0C FC 0E FC 
3272e     0F FC 12 FC 
32732     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
32736     17 FC 1A FC 
3273a     B2 F6 7B F3 
3273e     DD F2 C5 F2 
32742     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
32746     D4 F2 DB F2 
3274a     E0 F2 E8 F2 
3274e     28 F8 60 FC 
32752     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
32756     64 FC 66 FC 
3275a     68 FC 6A FC 
3275e     6D FC 52 FC 
32762     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
32766     78 F3 24 F3 
3276a     1A F3 1E F3 
3276e     24 F3 2A F3 
32772     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
32776     3D F3 80 FA 
3277a     0C FB 0F FB 
3277e     10 FB 14 FB 
32782     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
32786     1B FB 1D FB 
3278a     1F FB 92 FA 
3278e     DE F4 AE F3 
32792     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
32796     79 F3 7E F3 
3279a     84 F3 8C F3 
3279e     92 F3 97 F3 
327a2     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
327a6     67 FB 69 FB 
327aa     6B FB 6F FB 
327ae     71 FB 72 FB 
327b2     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
327b6     E3 F8 BA F4 
327ba     EE F3 CC F3 
327be     CA F3 CF F3 
327c2     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
327c6     E2 F3 E8 F3 
327ca     ED F3 B7 FB 
327ce     BC FB BE FB 
327d2     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
327d6     C4 FB C6 FB 
327da     C8 FB C9 FB 
327de     CC FB 8F F7 
327e2     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
327e6     1E F4 1E F4 
327ea     24 F4 2A F4 
327ee     30 F4 38 F4 
327f2     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
327f6     AD FA B1 FA 
327fa     B4 FA B6 FA 
327fe     BA FA BB FA 
32802     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
32806     C2 FA C6 FA 
3280a     55 F6 C6 F4 
3280e     7D F4 72 F4 
32812     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
32816     83 F4 89 F4 
3281a     8F F4 94 F4 
3281e     66 FA 03 FB 
32822     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
32826     0A FB 0E FB 
3282a     10 FB 11 FB 
3282e     16 FB 18 FB 
32832     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
32836     F9 F4 CA F4 
3283a     C5 F4 CB F4 
3283e     D1 F4 D7 F4 
32842     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
32846     E8 F4 3F FB 
3284a     56 FB 58 FB 
3284e     5A FB 5E FB 
32852     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
32856     64 FB 64 FB 
3285a     69 FB 99 F9 
3285e     E9 F5 33 F5 
32862     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
32866     1D F5 22 F5 
3286a     27 F5 2E F5 
3286e     32 F5 37 F5 
32872     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
32876     BC FA BC FA 
3287a     C1 FA C2 FA 
3287e     C4 FA C8 FA 
32882     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
32886     F9 F7 DB F5 
3288a     78 F5 69 F5 
3288e     6A F5 70 F5 
32892     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
32896     7F F5 85 F5 
3289a     6E F7 06 FB 
3289e     0A FB 0B FB 
328a2     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
328a6     14 FB 15 FB 
328aa     18 FB 1B FB 
328ae     1D FB 70 F7 
328b2     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
328b6     B6 F5 BB F5 
328ba     C0 F5 C6 F5 
328be     CA F5 CF F5 
328c2     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
328c6     54 FB 56 FB 
328ca     5A FB 5B FB 
328ce     5E FB 5F FB 
328d2     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
328d6     67 FB 52 FB 
328da     29 F7 33 F6 
328de     06 F6 02 F6 
328e2     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
328e6     10 F6 16 F6 
328ea     1A F6 1F F6 
328ee     81 FB 9F FB 
328f2     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
328f6     51 FB F2 FA 
328fa     E3 FA E3 FA 
328fe     E5 FA E9 FA 
32902     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
32906     64 F6 4D F6 
3290a     4D F6 53 F6 
3290e     57 F6 5C F6 
32912     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
32916     6A F6 19 FB 
3291a     1E FB 22 FB 
3291e     23 FB 24 FB 
32922     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
32926     2C FB 2E FB 
3292a     32 FB F0 F8 
3292e     01 F7 A5 F6 
32932     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
32936     9F F6 A3 F6 
3293a     A6 F6 AC F6 
3293e     B0 F6 EB F7 
32942     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
32946     68 FB 6C FB 
3294a     6E FB 71 FB 
3294e     72 FB 74 FB 
32952     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
32956     71 F8 21 F7 
3295a     E5 F6 DD F6 
3295e     E1 F6 E6 F6 
32962     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
32966     F5 F6 F7 F6 
3296a     F7 FA AB FB 
3296e     AD FB AF FB 
32972     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
32976     B6 FB B9 FB 
3297a     BB FB BC FB 
3297e     21 FB 07 F8 
32982     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
32986     22 F7 26 F7 
3298a     2B F7 2E F7 
3298e     34 F7 38 F7 
32992     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
32996     13 FB 16 FB 
3299a     17 FB 1B FB 
3299e     1E FB 20 FB 
329a2     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
329a6     26 FB 77 FA 
329aa     F3 F7 7C F7 
329ae     67 F7 6A F7 
329b2     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
329b6     74 F7 7A F7 
329ba     7E F7 82 F7 
329be     53 FB 5A FB 
329c2     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
329c6     5F FB 63 FB 
329ca     65 FB 67 FB 
329ce     69 FB 6A FB 
329d2     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
329d6     B5 F7 A9 F7 
329da     AD F7 B0 F7 
329de     B5 F7 B8 F7 
329e2     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
329e6     6E F8 99 FB 
329ea     9C FB 9D FB 
329ee     9F FB A4 FB 
329f2     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
329f6     A9 FB AB FB 
329fa     AD FB 46 F9 
329fe     26 F8 F0 F7 
32a02     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
32a06     F4 F7 F8 F7 
32a0a     FB F7 FF F7 
32a0e     03 F8 65 FA 
32a12     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
32a16     2B FB 2F FB 
32a1a     30 FB 32 FB 
32a1e     34 FB 38 FB 
32a22     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
32a26     E9 F8 4A F8 
32a2a     2E F8 2C F8 
32a2e     2F F8 36 F8 
32a32     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
32a36     41 F8 44 F8 
32a3a     4A FB 67 FB 
32a3e     68 FB 6B FB 
32a42     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
32a46     73 FB 74 FB 
32a4a     78 FB 7A FB 
32a4e     14 FB E7 F8 
32a52     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
32a56     6D F8 70 F8 
32a5a     73 F8 78 F8 
32a5e     7C F8 80 F8 
32a62     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
32a66     A6 FB A7 FB 
32a6a     A9 FB AC FB 
32a6e     AF FB B1 FB 
32a72     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
32a76     B7 FB 73 FA 
32a7a     F8 F8 B4 F8 
32a7e     A9 F8 AB F8 
32a82     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
32a86     B4 F8 B8 F8 
32a8a     BB F8 FA F8 
32a8e     64 FB 65 FB 
32a92     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
32a96     6D FB 6F FB 
32a9a     70 FB 74 FB 
32a9e     77 FB 77 FB 
32aa2     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
32aa6     E9 F8 E4 F8 
32aaa     E8 F8 EB F8 
32aae     EE F8 F2 F8 
32ab2     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
32ab6     B5 FA 9F FB 
32aba     A1 FB A4 FB 
32abe     A5 FB A9 FB 
32ac2     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
32ac6     AE FB B1 FB 
32aca     B2 FB C7 F9 
32ace     39 F9 22 F9 
32ad2     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
32ad6     26 F9 2A F9 
32ada     2E F9 32 F9 
32ade     33 F9 BA FB 
32ae2     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
32ae6     DE FB E1 FB 
32aea     E2 FB E4 FB 
32aee     E5 FB E7 FB 
32af2     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
32af6     C5 F9 67 F9 
32afa     57 F9 56 F9 
32afe     5B F9 5F F9 
32b02     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
32b06     68 F9 6C F9 
32b0a     0B FC 11 FC 
32b0e     14 FC 15 FC 
32b12     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
32b16     B5 FB B5 FB 
32b1a     B6 FB B8 FB 
32b1e     E9 FA C8 F9 
32b22     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
32b26     90 F9 94 F9 
32b2a     95 F9 99 F9 
32b2e     9D F9 9F F9 
32b32     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
32b36     DE FB DF FB 
32b3a     E2 FB E4 FB 
32b3e     E6 FB E8 FB 
32b42     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
32b46     EF FB AC FA 
32b4a     E9 F9 C7 F9 
32b4e     C3 F9 C8 F9 
32b52     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
32b56     D0 F9 D4 F9 
32b5a     D6 F9 0E FB 
32b5e     11 FC 13 FC 
32b62     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
32b66     19 FC 1B FC 
32b6a     1D FC 1E FC 
32b6e     21 FC 22 FC 
32b72     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
32b76     F7 F9 F7 F9 
32b7a     FB F9 FE F9 
32b7e     00 FA 03 FA 
32b82     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
32b86     1B FC 45 FC 
32b8a     46 FC 48 FC 
32b8e     4A FC 4B FC 
32b92     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
32b96     52 FC 54 FC 
32b9a     F3 FB 82 FA 
32b9e     35 FA 28 FA 
32ba2     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
32ba6     31 FA 32 FA 
32baa     37 FA 37 FA 
32bae     3C FA 00 FC 
32bb2     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
32bb6     09 FC 0B FC 
32bba     0F FC 12 FC 
32bbe     12 FC 15 FC 
32bc2     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
32bc6     8D FA 60 FA 
32bca     5B FA 5C FA 
32bce     60 FA 61 FA 
32bd2     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
32bd6     6C FA 6D FA 
32bda     37 FC 3A FC 
32bde     3B FC 3D FC 
32be2     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
32be6     43 FC 44 FC 
32bea     45 FC 47 FC 
32bee     51 FB AB FA 
32bf2     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
32bf6     8E FA 91 FA 
32bfa     93 FA 95 FA 
32bfe     98 FA 9B FA 
32c02     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
32c06     68 FC 6A FC 
32c0a     6C FC 6E FC 
32c0e     70 FC 72 FC 
32c12     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
32c16     76 FC 3B FB 
32c1a     D0 FA BB FA 
32c1e     B9 FA BD FA 
32c22     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
32c26     C4 FA C6 FA 
32c2a     CA FA 13 FC 
32c2e     3A FC 3A FC 
32c32     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
32c36     41 FC 43 FC 
32c3a     44 FC 47 FC 
32c3e     48 FC 3C FC 
32c42     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
32c46     E6 FA E8 FA 
32c4a     EB FA EE FA 
32c4e     F0 FA F2 FA 
32c52     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
32c56     61 FC 66 FC 
32c5a     68 FC 6B FC 
32c5e     6C FC 6E FC 
32c62     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
32c66     73 FC 75 FC 
32c6a     13 FC 3F FB 
32c6e     17 FB 12 FB 
32c72     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
32c76     1A FB 1D FB 
32c7a     1F FB 20 FB 
32c7e     23 FB 92 FC 
32c82     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
32c86     96 FC 97 FC 
32c8a     9A FC 9C FC 
32c8e     9E FC 9F FC 
32c92     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
32c96     5A FB 41 FB 
32c9a     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
32c9e     00 00 00 00 | zero2 long 0
32ca2     01 00 00 00 
32ca6     00 00 00 00 
32caa     00 00 00 00 
32cae     00 00 00 00 | mouse  file "mouse2.def"
32cb2     00 00 00 00 
32cb6     00 00 00 00 
32cba     00 00 00 00 
32cbe     00 00 00 00 | 	byte	$00[16]
32cc2     01 01 00 00 
32cc6     00 00 00 00 
32cca     00 00 00 00 
32cce     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32cd2     00 00 00 00 
32cd6     00 00 00 00 
32cda     00 00 00 00 
32cde     00 00 00 00 | 	byte	$00[16]
32ce2     01 0D 01 00 
32ce6     00 00 00 00 
32cea     00 00 00 00 
32cee     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32cf2     00 00 00 00 
32cf6     00 00 00 00 
32cfa     00 00 00 00 
32cfe     00 00 00 00 | 	byte	$00[16]
32d02     01 0D 0D 01 
32d06     00 00 00 00 
32d0a     00 00 00 00 
32d0e     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32d12     00 00 00 00 
32d16     00 00 00 00 
32d1a     00 00 00 00 
32d1e     00 00 00 00 | 	byte	$00[16]
32d22     01 0D 0D 0D 
32d26     01 00 00 00 
32d2a     00 00 00 00 
32d2e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32d32     00 00 00 00 
32d36     00 00 00 00 
32d3a     00 00 00 00 
32d3e     00 00 00 00 | 	byte	$00[16]
32d42     01 0D 0D 0D 
32d46     0D 01 00 00 
32d4a     00 00 00 00 
32d4e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32d52     00 00 00 00 
32d56     00 00 00 00 
32d5a     00 00 00 00 
32d5e     00 00 00 00 | 	byte	$00[16]
32d62     01 0D 0D 0D 
32d66     0D 0D 01 00 
32d6a     00 00 00 00 
32d6e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
32d72     00 00 00 00 
32d76     00 00 00 00 
32d7a     00 00 00 00 
32d7e     00 00 00 00 | 	byte	$00[16]
32d82     01 0D 0D 0D 
32d86     0D 0D 0D 01 
32d8a     00 00 00 00 
32d8e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
32d92     00 00 00 00 
32d96     00 00 00 00 
32d9a     00 00 00 00 
32d9e     00 00 00 00 | 	byte	$00[16]
32da2     01 0D 0D 0D 
32da6     0D 0D 0D 0C 
32daa     01 00 00 00 
32dae     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
32db2     00 00 00 00 
32db6     00 00 00 00 
32dba     00 00 00 00 
32dbe     00 00 00 00 | 	byte	$00[16]
32dc2     01 0D 0D 0D 
32dc6     0D 0D 0D 0D 
32dca     0C 01 00 00 
32dce     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
32dd2     00 00 00 00 
32dd6     00 00 00 00 
32dda     00 00 00 00 
32dde     00 00 00 00 | 	byte	$00[16]
32de2     01 0D 0D 0D 
32de6     0D 0D 0D 0D 
32dea     0D 0C 01 00 
32dee     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
32df2     00 00 00 00 
32df6     00 00 00 00 
32dfa     00 00 00 00 
32dfe     00 00 00 00 | 	byte	$00[16]
32e02     01 0D 0D 0D 
32e06     0D 0D 0D 0D 
32e0a     0D 0D 0B 01 
32e0e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
32e12     00 00 00 00 
32e16     00 00 00 00 
32e1a     00 00 00 00 
32e1e     00 00 00 00 | 	byte	$00[16]
32e22     01 0D 0D 0D 
32e26     0C 0D 0D 03 
32e2a     01 01 01 01 
32e2e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
32e32     00 00 00 00 
32e36     00 00 00 00 
32e3a     00 00 00 00 
32e3e     00 00 00 00 | 	byte	$00[16]
32e42     01 0D 0D 0C 
32e46     01 09 0D 03 
32e4a     00 00 00 00 
32e4e     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
32e52     00 00 00 00 
32e56     00 00 00 00 
32e5a     00 00 00 00 
32e5e     00 00 00 00 | 	byte	$00[16]
32e62     01 0D 0C 01 
32e66     00 01 0D 0B 
32e6a     01 00 00 00 
32e6e     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
32e72     00 00 00 00 
32e76     00 00 00 00 
32e7a     00 00 00 00 
32e7e     00 00 00 00 | 	byte	$00[16]
32e82     01 0C 01 00 
32e86     00 01 0A 0D 
32e8a     01 00 00 00 
32e8e     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
32e92     00 00 00 00 
32e96     00 00 00 00 
32e9a     00 00 00 00 
32e9e     00 00 00 00 | 	byte	$00[16]
32ea2     01 01 00 00 
32ea6     00 00 01 0D 
32eaa     0B 01 00 00 
32eae     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
32eb2     00 00 00 00 
32eb6     00 00 00 00 
32eba     00 00 00 00 
32ebe     00 00 00 00 
32ec2     00 00 00 00 
32ec6     00 00       | 	byte	$00[22]
32ec8     01 0B 0D 01 
32ecc     00 00 00 00 
32ed0     00 00 00 00 
32ed4     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32ed8     00 00 00 00 
32edc     00 00 00 00 
32ee0     00 00 00 00 
32ee4     00 00 00 00 
32ee8     00          | 	byte	$00[17]
32ee9     01 01 00 00 
32eed     00 00 00 00 
32ef1     00 00 00 00 
32ef5     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32ef9     00 00 00 00 
      ...             
3309d     00 00 00 00 
330a1     00          | 	byte	$00[425]
330a2     73 32 00 04 
330a6     00 00 10 00 
330aa     00 00 00 00 
330ae     00 00 00 00 | atari2 file "atari2.s2"
330b2     43 87 43 87 
330b6     43 87 44 87 
330ba     43 87 44 87 
330be     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
330c2     43 87 43 87 
330c6     43 87 44 87 
330ca     43 87 43 87 
330ce     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
330d2     44 87 43 87 
330d6     44 87 43 87 
330da     43 87 43 87 
330de     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
330e2     43 87 43 87 
330e6     44 87 43 87 
330ea     44 87 44 87 
330ee     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
330f2     43 87 43 87 
330f6     44 87 43 87 
330fa     43 87 42 87 
330fe     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
33102     43 87 43 87 
33106     43 87 43 87 
3310a     44 87 43 87 
3310e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
33112     44 87 44 87 
33116     43 87 44 87 
3311a     43 87 44 87 
3311e     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
33122     44 87 43 87 
33126     44 87 44 87 
3312a     43 87 43 87 
3312e     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
33132     43 87 44 87 
33136     44 87 43 87 
3313a     43 87 44 87 
3313e     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
33142     43 87 43 87 
33146     43 87 43 87 
3314a     43 87 43 87 
3314e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
33152     42 87 43 87 
33156     44 87 42 87 
3315a     43 87 43 87 
3315e     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
33162     43 87 44 87 
33166     44 87 43 87 
3316a     43 87 43 87 
3316e     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
33172     43 87 5C 87 
33176     EE 86 AC 87 
3317a     4C 7C A3 78 
3317e     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
33182     BC 78 BB 78 
33186     BD 78 BC 78 
3318a     BB 78 BD 78 
3318e     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
33192     BB 78 BB 78 
33196     BC 78 BC 78 
3319a     BC 78 BB 78 
3319e     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
331a2     BC 78 BC 78 
331a6     BC 78 BC 78 
331aa     BC 78 BC 78 
331ae     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
331b2     BB 78 BC 78 
331b6     A0 78 4C 7C 
331ba     11 7A 29 89 
331be     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
331c2     44 87 43 87 
331c6     44 87 43 87 
331ca     43 87 42 87 
331ce     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
331d2     43 87 43 87 
331d6     44 87 ED 85 
331da     71 85 52 79 
331de     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
331e2     BC 78 BC 78 
331e6     BC 78 BC 78 
331ea     BC 78 BC 78 
331ee     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
331f2     BC 78 BC 78 
331f6     BC 78 A0 78 
331fa     CF 7A B9 81 
331fe     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
33202     44 87 43 87 
33206     43 87 44 87 
3320a     43 87 44 87 
3320e     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
33212     43 87 43 87 
33216     43 87 43 87 
3321a     44 87 43 87 
3321e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
33222     43 87 43 87 
33226     44 87 43 87 
3322a     44 87 43 87 
3322e     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
33232     44 87 43 87 
33236     43 87 43 87 
3323a     5A 87 39 81 
3323e     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
33242     A5 78 BC 78 
33246     BB 78 BC 78 
3324a     BB 78 BC 78 
3324e     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
33252     BC 78 BC 78 
33256     BC 78 BC 78 
3325a     BC 78 8F 79 
3325e     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
33262     09 85 47 87 
33266     43 87 43 87 
3326a     42 87 42 87 
3326e     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
33272     43 87 43 87 
33276     43 87 43 87 
3327a     43 87 44 87 
3327e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
33282     43 87 43 87 
33286     44 87 43 87 
3328a     42 87 43 87 
3328e     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
33292     44 87 43 87 
33296     43 87 43 87 
3329a     44 87 44 87 
3329e     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
332a2     94 78 55 7A 
332a6     B9 78 BC 78 
332aa     BC 78 BC 78 
332ae     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
332b2     BC 78 BB 78 
332b6     BC 78 BC 78 
332ba     BC 78 BC 78 
332be     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
332c2     BB 78 BC 78 
332c6     BC 78 BC 78 
332ca     BB 78 BC 78 
332ce     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
332d2     BC 78 BC 78 
332d6     BD 78 BC 78 
332da     BC 78 BB 78 
332de     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
332e2     94 78 B3 84 
332e6     36 84 4A 87 
332ea     43 87 43 87 
332ee     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
332f2     43 87 44 87 
332f6     43 87 43 87 
332fa     43 87 43 87 
332fe     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
33302     43 87 44 87 
33306     43 87 44 87 
3330a     43 87 43 87 
3330e     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
33312     43 87 43 87 
33316     43 87 45 87 
3331a     43 87 43 87 
3331e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
33322     43 87 44 87 
33326     44 87 44 87 
3332a     43 87 43 87 
3332e     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
33332     43 87 42 87 
33336     43 87 43 87 
3333a     44 87 43 87 
3333e     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
33342     54 87 3C 82 
33346     36 83 52 79 
3334a     C6 78 BC 78 
3334e     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
33352     BB 78 BB 78 
33356     BC 78 BC 78 
3335a     BC 78 BC 78 
3335e     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33362     BD 78 ED 78 
33366     1B 79 F4 83 
3336a     4D 83 4E 87 
3336e     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
33372     44 87 43 87 
33376     42 87 44 87 
3337a     43 87 42 87 
3337e     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
33382     43 87 54 87 
33386     26 82 B3 84 
3338a     D6 77 BB 78 
3338e     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
33392     BC 78 BB 78 
33396     BB 78 BB 78 
3339a     BB 78 BB 78 
3339e     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
333a2     BC 78 BC 78 
333a6     26 79 18 75 
333aa     36 83 1F 84 
333ae     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
333b2     43 87 43 87 
333b6     43 87 43 87 
333ba     43 87 44 87 
333be     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
333c2     43 87 44 87 
333c6     44 87 43 87 
333ca     43 87 43 87 
333ce     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
333d2     43 87 43 87 
333d6     43 87 43 87 
333da     44 87 44 87 
333de     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
333e2     44 87 43 87 
333e6     43 87 43 87 
333ea     43 87 44 87 
333ee     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
333f2     44 87 44 87 
333f6     44 87 43 87 
333fa     44 87 43 87 
333fe     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
33402     43 87 43 87 
33406     43 87 44 87 
3340a     44 87 43 87 
3340e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
33412     43 87 43 87 
33416     43 87 43 87 
3341a     43 87 44 87 
3341e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
33422     43 87 44 87 
33426     43 87 44 87 
3342a     19 87 7D 86 
3342e     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
33432     B1 78 BC 78 
33436     BC 78 BC 78 
3343a     BC 78 BC 78 
3343e     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33442     BC 78 BC 78 
33446     BD 78 BC 78 
3344a     B7 78 3B 7B 
3344e     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
33452     96 86 44 87 
33456     43 87 43 87 
3345a     43 87 43 87 
3345e     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
33462     44 87 44 87 
33466     43 87 44 87 
3346a     43 87 44 87 
3346e     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
33472     43 87 44 87 
33476     43 87 44 87 
3347a     43 87 44 87 
3347e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
33482     43 87 44 87 
33486     43 87 43 87 
3348a     44 87 43 87 
3348e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
33492     44 87 44 87 
33496     43 87 43 87 
3349a     43 87 44 87 
3349e     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
334a2     43 87 43 87 
334a6     43 87 43 87 
334aa     44 87 44 87 
334ae     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
334b2     36 83 CF 7A 
334b6     AB 78 BB 78 
334ba     BC 78 BC 78 
334be     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
334c2     BB 78 BC 78 
334c6     BC 78 BC 78 
334ca     BC 78 BC 78 
334ce     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
334d2     BC 78 BC 78 
334d6     BC 78 BB 78 
334da     BC 78 BC 78 
334de     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
334e2     BB 78 BC 78 
334e6     BB 78 BC 78 
334ea     BC 78 BD 78 
334ee     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
334f2     BC 78 BC 78 
334f6     BC 78 BC 78 
334fa     BC 78 BD 78 
334fe     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
33502     BC 78 BB 78 
33506     BC 78 BB 78 
3350a     BB 78 BC 78 
3350e     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
33512     BC 78 BC 78 
33516     BC 78 BC 78 
3351a     BC 78 BB 78 
3351e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
33522     BC 78 BC 78 
33526     BC 78 BD 78 
3352a     BB 78 BC 78 
3352e     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
33532     BC 78 BC 78 
33536     BC 78 BB 78 
3353a     BC 78 BB 78 
3353e     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
33542     BB 78 BC 78 
33546     BC 78 BC 78 
3354a     BC 78 BB 78 
3354e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33552     BC 78 BC 78 
33556     BC 78 BB 78 
3355a     BC 78 BB 78 
3355e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33562     BC 78 BC 78 
33566     BC 78 BC 78 
3356a     BB 78 BC 78 
3356e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
33572     BC 78 9F 78 
33576     52 79 B3 84 
3357a     2F 86 60 87 
3357e     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
33582     44 87 43 87 
33586     43 87 43 87 
3358a     43 87 43 87 
3358e     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
33592     43 87 43 87 
33596     43 87 44 87 
3359a     43 87 43 87 
3359e     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
335a2     43 87 43 87 
335a6     43 87 43 87 
335aa     43 87 44 87 
335ae     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
335b2     44 87 44 87 
335b6     5E 87 BC 80 
335ba     FB 80 94 78 
335be     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
335c2     BD 78 BC 78 
335c6     BB 78 BC 78 
335ca     BB 78 BB 78 
335ce     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
335d2     BC 78 BB 78 
335d6     BB 78 6B 79 
335da     D6 77 AC 87 
335de     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
335e2     43 87 44 87 
335e6     43 87 43 87 
335ea     44 87 43 87 
335ee     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
335f2     43 87 44 87 
335f6     43 87 5C 87 
335fa     E7 80 00 80 
335fe     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
33602     BC 78 BD 78 
33606     BC 78 BC 78 
3360a     BC 78 BB 78 
3360e     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33612     BC 78 BC 78 
33616     BB 78 BC 78 
3361a     BB 78 BC 78 
3361e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33622     BB 78 BC 78 
33626     BC 78 BC 78 
3362a     BC 78 BC 78 
3362e     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33632     BC 78 BC 78 
33636     BC 78 BC 78 
3363a     A0 78 8D 7B 
3363e     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
33642     60 87 43 87 
33646     44 87 44 87 
3364a     43 87 43 87 
3364e     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
33652     44 87 43 87 
33656     43 87 43 87 
3365a     44 87 73 86 
3365e     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
33662     51 7B B6 78 
33666     BC 78 BD 78 
3366a     BC 78 BC 78 
3366e     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33672     BB 78 BC 78 
33676     BD 78 BB 78 
3367a     BC 78 BB 78 
3367e     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
33682     BC 78 BC 78 
33686     BC 78 BC 78 
3368a     BB 78 BC 78 
3368e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33692     BC 78 BB 78 
33696     BB 78 BC 78 
3369a     BC 78 BB 78 
3369e     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
336a2     22 8C AF 84 
336a6     48 87 43 87 
336aa     44 87 43 87 
336ae     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
336b2     43 87 42 87 
336b6     43 87 43 87 
336ba     44 87 43 87 
336be     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
336c2     43 87 43 87 
336c6     44 87 44 87 
336ca     43 87 43 87 
336ce     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
336d2     43 87 43 87 
336d6     43 87 43 87 
336da     44 87 43 87 
336de     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
336e2     9F 8B D6 77 
336e6     16 7C B3 78 
336ea     BC 78 BB 78 
336ee     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
336f2     BB 78 BC 78 
336f6     BB 78 BC 78 
336fa     BC 78 BC 78 
336fe     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
33702     BC 78 BB 78 
33706     BB 78 BC 78 
3370a     BB 78 BC 78 
3370e     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
33712     BB 78 BB 78 
33716     BC 78 BC 78 
3371a     BC 78 BB 78 
3371e     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
33722     BC 78 BC 78 
33726     BC 78 BD 78 
3372a     BB 78 BC 78 
3372e     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
33732     BC 78 BC 78 
33736     BC 78 BB 78 
3373a     BC 78 BC 78 
3373e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
33742     A8 78 54 7E 
33746     F4 83 17 82 
3374a     50 87 43 87 
3374e     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
33752     44 87 43 87 
33756     44 87 43 87 
3375a     43 87 44 87 
3375e     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
33762     43 87 28 87 
33766     20 85 CF 7A 
3376a     70 7D AD 78 
3376e     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
33772     BB 78 BC 78 
33776     BC 78 BC 78 
3377a     BB 78 BB 78 
3377e     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
33782     BB 78 B2 78 
33786     9A 7C CF 7A 
3378a     4A 87 0D 87 
3378e     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
33792     43 87 44 87 
33796     43 87 44 87 
3379a     43 87 43 87 
3379e     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
337a2     44 87 43 87 
337a6     28 87 51 85 
337aa     11 7A 1E 7D 
337ae     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
337b2     BC 78 BB 78 
337b6     BC 78 BC 78 
337ba     BC 78 BC 78 
337be     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
337c2     BB 78 BC 78 
337c6     BB 78 BC 78 
337ca     BC 78 BC 78 
337ce     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
337d2     BB 78 BC 78 
337d6     BC 78 BC 78 
337da     BD 78 BB 78 
337de     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
337e2     BC 78 BB 78 
337e6     BC 78 BC 78 
337ea     BC 78 BB 78 
337ee     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
337f2     BC 78 BC 78 
337f6     BC 78 BC 78 
337fa     BB 78 BC 78 
337fe     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33802     BC 78 BD 78 
33806     BC 78 BC 78 
3380a     BC 78 BB 78 
3380e     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33812     BC 78 BB 78 
33816     BB 78 BC 78 
3381a     BC 78 BB 78 
3381e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33822     BB 78 BB 78 
33826     BB 78 BC 78 
3382a     B6 78 48 7D 
3382e     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
33832     56 87 43 87 
33836     42 87 44 87 
3383a     44 87 43 87 
3383e     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
33842     43 87 44 87 
33846     43 87 44 87 
3384a     4C 87 7E 83 
3384e     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
33852     F7 78 BC 78 
33856     BC 78 BB 78 
3385a     BB 78 BC 78 
3385e     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33862     BC 78 BB 78 
33866     BC 78 BC 78 
3386a     BB 78 BC 78 
3386e     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
33872     BB 78 BC 78 
33876     BC 78 BC 78 
3387a     BC 78 BB 78 
3387e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33882     BC 78 BC 78 
33886     BC 78 BC 78 
3388a     BC 78 BB 78 
3388e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33892     BC 78 BB 78 
33896     BB 78 BC 78 
3389a     BC 78 BB 78 
3389e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
338a2     BC 78 BC 78 
338a6     BB 78 BC 78 
338aa     BC 78 BC 78 
338ae     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
338b2     73 32 00 04 
338b6     00 00 10 00 
338ba     00 00 00 00 
338be     00 00 00 00 | atari12 file "atari12.s2"
338c2     00 6D 00 6D 
338c6     00 6D 00 6D 
338ca     00 6D 00 6D 
338ce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
338d2     00 6D 00 6D 
338d6     00 6D 00 6D 
338da     00 6D 00 6D 
338de     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
338e2     00 6D 00 6D 
338e6     00 6D 00 6D 
338ea     00 6D 00 6D 
338ee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
338f2     00 6D 00 6D 
338f6     00 6D 00 6D 
338fa     00 6D 00 6D 
338fe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33902     00 6D 00 6D 
33906     00 6D 00 6D 
3390a     00 6D 00 6D 
3390e     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
33912     00 6C 00 6C 
33916     00 6C 00 6C 
3391a     00 6C 00 6C 
3391e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33922     00 6C 00 6C 
33926     00 6C 00 6C 
3392a     00 6C 00 6C 
3392e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33932     00 6C 00 6C 
33936     00 6C 00 6C 
3393a     00 6C 00 6C 
3393e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33942     00 6C 00 6C 
33946     00 6C 00 6C 
3394a     00 6C 00 6C 
3394e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33952     00 6C 00 6C 
33956     00 6C 00 6C 
3395a     00 6C 00 6C 
3395e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33962     00 6C 00 6C 
33966     00 6C 00 6C 
3396a     00 6C 00 6C 
3396e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33972     00 6C 00 6C 
33976     00 6C 00 6C 
3397a     00 6C 00 6C 
3397e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33982     00 6C 00 6C 
33986     00 6C 00 6C 
3398a     00 6C 00 6C 
3398e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33992     00 6C 00 6C 
33996     00 6C 00 6C 
3399a     00 6C 00 6C 
3399e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
339a2     00 6C 00 6C 
339a6     00 6C 00 6C 
339aa     00 6C 00 6C 
339ae     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
339b2     00 6C 00 6C 
339b6     00 6C 00 6C 
339ba     00 6C 00 6C 
339be     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
339c2     00 6C 00 6B 
339c6     00 6B 00 6B 
339ca     00 6B 00 6B 
339ce     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
339d2     00 6B 00 6B 
339d6     00 6B 00 6B 
339da     00 6B 00 6B 
339de     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
339e2     00 6B 00 6B 
339e6     00 6B 00 6B 
339ea     00 6B 00 6B 
339ee     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
339f2     00 6B 00 6B 
339f6     00 6B 00 6B 
339fa     00 6B 00 6B 
339fe     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33a02     00 6B 00 6B 
33a06     00 6B 00 6B 
33a0a     00 6B 00 6B 
33a0e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33a12     00 6B 00 6B 
33a16     00 6B 00 6B 
33a1a     00 6B 00 6B 
33a1e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33a22     00 6B 00 6B 
33a26     00 6B 00 6B 
33a2a     00 6B 00 6B 
33a2e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33a32     00 6B 00 6B 
33a36     00 6B 00 6B 
33a3a     00 6B 00 6B 
33a3e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33a42     00 6B 00 6B 
33a46     00 6B 00 6B 
33a4a     00 6B 00 6B 
33a4e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33a52     00 6B 00 6B 
33a56     00 6B 00 6B 
33a5a     00 6A 00 9D 
33a5e     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
33a62     00 9E 00 9E 
33a66     00 9E 00 9E 
33a6a     00 9E 00 9E 
33a6e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33a72     00 9E 00 9E 
33a76     00 9E 00 9E 
33a7a     00 9E 00 9E 
33a7e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33a82     00 9E 00 9E 
33a86     00 9E 00 9E 
33a8a     00 9E 00 9E 
33a8e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33a92     00 9E 00 9E 
33a96     00 9E 00 9E 
33a9a     00 9E 00 9E 
33a9e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33aa2     00 9E 00 9E 
33aa6     00 9E 00 9E 
33aaa     00 9E 00 9E 
33aae     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33ab2     00 9E 00 9E 
33ab6     00 9E 00 9E 
33aba     00 9E 00 9E 
33abe     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33ac2     00 9E 00 9E 
33ac6     00 9E 00 9E 
33aca     00 9E 00 9E 
33ace     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33ad2     00 9E 00 9E 
33ad6     00 9E 00 9E 
33ada     00 9E 00 9E 
33ade     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33ae2     00 9E 00 9E 
33ae6     00 9E 00 9E 
33aea     00 9E 00 9E 
33aee     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
33af2     00 9F 00 9F 
33af6     00 9F 00 9F 
33afa     00 9F 00 9F 
33afe     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33b02     00 9F 00 9F 
33b06     00 9F 00 9F 
33b0a     00 9F 00 9F 
33b0e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33b12     00 9F 00 9F 
33b16     00 9F 00 9F 
33b1a     00 9F 00 9F 
33b1e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33b22     00 9F 00 9F 
33b26     00 9F 00 9F 
33b2a     00 9F 00 9F 
33b2e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33b32     00 9F 00 9F 
33b36     00 9F 00 9F 
33b3a     00 9F 00 9F 
33b3e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33b42     00 9F 00 9F 
33b46     00 9F 00 9F 
33b4a     00 9F 00 9F 
33b4e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33b52     00 9F 00 9F 
33b56     00 9F 00 9F 
33b5a     00 9F 00 9F 
33b5e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33b62     00 9F 00 9F 
33b66     00 9F 00 9F 
33b6a     00 9F 00 9F 
33b6e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33b72     00 9F 00 9F 
33b76     00 9F 00 9F 
33b7a     00 9F 00 9F 
33b7e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33b82     00 9F 00 9F 
33b86     00 9F 00 9F 
33b8a     00 9F 00 9F 
33b8e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33b92     00 9F 00 9F 
33b96     00 9F 00 9F 
33b9a     00 9F 00 9F 
33b9e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33ba2     00 9F 00 9F 
33ba6     00 9F 00 9F 
33baa     00 9F 00 9F 
33bae     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33bb2     00 9F 00 9F 
33bb6     00 9F 00 A0 
33bba     00 A0 00 A0 
33bbe     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33bc2     00 A0 00 A0 
33bc6     00 A0 00 A0 
33bca     00 A0 00 A0 
33bce     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33bd2     00 A0 00 A0 
33bd6     00 A0 00 A0 
33bda     00 A0 00 A0 
33bde     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33be2     00 A0 00 A0 
33be6     00 A0 00 A0 
33bea     00 A0 00 A0 
33bee     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33bf2     00 A0 00 A0 
33bf6     00 A0 00 A0 
33bfa     00 A0 00 A0 
33bfe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c02     00 A0 00 A0 
33c06     00 A0 00 A0 
33c0a     00 A0 00 A0 
33c0e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c12     00 A0 00 A0 
33c16     00 A0 00 A0 
33c1a     00 A0 00 A0 
33c1e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c22     00 A0 00 A0 
33c26     00 A0 00 A0 
33c2a     00 A0 00 A0 
33c2e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c32     00 A0 00 A0 
33c36     00 A0 00 A0 
33c3a     00 A0 00 A0 
33c3e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c42     00 A0 00 A0 
33c46     00 A0 00 A0 
33c4a     00 A0 00 A0 
33c4e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c52     00 A0 00 A0 
33c56     00 A0 00 A0 
33c5a     00 A0 00 A0 
33c5e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c62     00 A0 00 A0 
33c66     00 A0 00 A0 
33c6a     00 A0 00 A0 
33c6e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33c72     00 A0 00 A0 
33c76     00 A0 00 A0 
33c7a     00 A0 00 A0 
33c7e     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
33c82     00 6D 00 6D 
33c86     00 6D 00 6D 
33c8a     00 6D 00 6D 
33c8e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33c92     00 6D 00 6D 
33c96     00 6D 00 6D 
33c9a     00 6D 00 6D 
33c9e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33ca2     00 6D 00 6D 
33ca6     00 6D 00 6D 
33caa     00 6D 00 6D 
33cae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33cb2     00 6D 00 6D 
33cb6     00 6D 00 6D 
33cba     00 6D 00 6D 
33cbe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33cc2     00 6D 00 6D 
33cc6     00 6D 00 6D 
33cca     00 6D 00 6D 
33cce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33cd2     00 6D 00 6D 
33cd6     00 6D 00 6D 
33cda     00 6D 00 6D 
33cde     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33ce2     00 6D 00 6D 
33ce6     00 6D 00 6D 
33cea     00 6D 00 6D 
33cee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33cf2     00 6D 00 6D 
33cf6     00 6D 00 6D 
33cfa     00 6D 00 6D 
33cfe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33d02     00 6D 00 6D 
33d06     00 A0 00 A0 
33d0a     00 A0 00 A0 
33d0e     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33d12     00 A0 00 A0 
33d16     00 A0 00 A0 
33d1a     00 A0 00 A0 
33d1e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33d22     00 A0 00 A0 
33d26     00 A0 00 A0 
33d2a     00 A0 00 A0 
33d2e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33d32     00 A0 00 A0 
33d36     00 A0 00 A0 
33d3a     00 A0 00 A0 
33d3e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33d42     00 A0 00 A0 
33d46     00 A0 00 A0 
33d4a     00 A0 00 A0 
33d4e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33d52     00 A0 00 A0 
33d56     00 A0 00 A0 
33d5a     00 A0 00 A0 
33d5e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33d62     00 A0 00 A0 
33d66     00 A0 00 A0 
33d6a     00 A0 00 A0 
33d6e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33d72     00 A0 00 A0 
33d76     00 A0 00 A0 
33d7a     00 A0 00 A0 
33d7e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33d82     00 A0 00 A0 
33d86     00 A0 00 A0 
33d8a     00 A0 00 A0 
33d8e     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
33d92     00 6D 00 6D 
33d96     00 6D 00 6D 
33d9a     00 6D 00 6D 
33d9e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33da2     00 6D 00 6D 
33da6     00 6D 00 6D 
33daa     00 6D 00 6D 
33dae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33db2     00 6D 00 6D 
33db6     00 6D 00 6D 
33dba     00 6D 00 6D 
33dbe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33dc2     00 6D 00 6D 
33dc6     00 6D 00 6D 
33dca     00 6D 00 6D 
33dce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33dd2     00 6D 00 6D 
33dd6     00 6D 00 6D 
33dda     00 6D 00 6D 
33dde     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33de2     00 6D 00 6D 
33de6     00 6D 00 6D 
33dea     00 6D 00 6D 
33dee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33df2     00 6D 00 6D 
33df6     00 6D 00 6D 
33dfa     00 6D 00 6D 
33dfe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33e02     00 6D 00 6D 
33e06     00 6D 00 6D 
33e0a     00 6D 00 6D 
33e0e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33e12     00 6D 00 6D 
33e16     00 6C 00 A0 
33e1a     00 9F 00 A0 
33e1e     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
33e22     00 A0 00 A0 
33e26     00 A0 00 A0 
33e2a     00 A0 00 A0 
33e2e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e32     00 A0 00 A0 
33e36     00 A0 00 A0 
33e3a     00 A0 00 A0 
33e3e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e42     00 A0 00 A0 
33e46     00 A0 00 A0 
33e4a     00 A0 00 A0 
33e4e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e52     00 A0 00 A0 
33e56     00 A0 00 A0 
33e5a     00 A0 00 A0 
33e5e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e62     00 A0 00 A0 
33e66     00 A0 00 A0 
33e6a     00 A0 00 A0 
33e6e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e72     00 A0 00 A0 
33e76     00 A0 00 A0 
33e7a     00 A0 00 A0 
33e7e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e82     00 A0 00 A0 
33e86     00 A0 00 A0 
33e8a     00 A0 00 A0 
33e8e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e92     00 A0 00 A0 
33e96     00 A0 00 A0 
33e9a     00 A0 00 A0 
33e9e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33ea2     00 A0 00 A0 
33ea6     00 A0 00 A0 
33eaa     00 A0 00 A0 
33eae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33eb2     00 A0 00 A0 
33eb6     00 A0 00 A0 
33eba     00 A0 00 A0 
33ebe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33ec2     00 A0 00 A0 
33ec6     00 A0 00 A0 
33eca     00 A0 00 A0 
33ece     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
33ed2     00 A1 00 A1 
33ed6     00 A1 00 A1 
33eda     00 A1 00 A1 
33ede     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33ee2     00 A1 00 A1 
33ee6     00 A1 00 A1 
33eea     00 A1 00 A1 
33eee     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33ef2     00 A1 00 A1 
33ef6     00 A1 00 A1 
33efa     00 A1 00 A1 
33efe     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33f02     00 A1 00 A1 
33f06     00 A1 00 A1 
33f0a     00 A1 00 A1 
33f0e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33f12     00 A1 00 A1 
33f16     00 A1 00 A1 
33f1a     00 A1 00 A1 
33f1e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
33f22     00 A1 00 A1 
33f26     00 A1 00 A1 
33f2a     00 6E 00 6E 
33f2e     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
33f32     00 6E 00 6E 
33f36     00 6E 00 6E 
33f3a     00 6E 00 6E 
33f3e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
33f42     00 6E 00 6E 
33f46     00 6E 00 6E 
33f4a     00 6E 00 6E 
33f4e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
33f52     00 6E 00 6E 
33f56     00 6E 00 6E 
33f5a     00 6E 00 6E 
33f5e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
33f62     00 6E 00 6D 
33f66     00 6D 00 6D 
33f6a     00 6D 00 6D 
33f6e     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33f72     00 6D 00 6D 
33f76     00 6D 00 6D 
33f7a     00 6D 00 6D 
33f7e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33f82     00 6D 00 6D 
33f86     00 6D 00 6D 
33f8a     00 6D 00 6D 
33f8e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33f92     00 6D 00 6D 
33f96     00 6D 00 6D 
33f9a     00 6D 00 6D 
33f9e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33fa2     00 6D 00 6D 
33fa6     00 6D 00 6D 
33faa     00 6D 00 6D 
33fae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33fb2     00 6D 00 6D 
33fb6     00 6D 00 6D 
33fba     00 6D 00 6D 
33fbe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33fc2     00 6D 00 6D 
33fc6     00 6D 00 6D 
33fca     00 6D 00 6D 
33fce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33fd2     00 6D 00 6D 
33fd6     00 6D 00 6D 
33fda     00 6D 00 6D 
33fde     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33fe2     00 6D 00 6D 
33fe6     00 6D 00 6D 
33fea     00 6D 00 6D 
33fee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33ff2     00 6D 00 6D 
33ff6     00 6D 00 6D 
33ffa     00 6D 00 6D 
33ffe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34002     00 6D 00 6D 
34006     00 6D 00 6D 
3400a     00 6D 00 6D 
3400e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34012     00 6D 00 6D 
34016     00 6C 00 6C 
3401a     00 6C 00 6C 
3401e     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34022     00 6C 00 6C 
34026     00 6C 00 6C 
3402a     00 6C 00 6C 
3402e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34032     00 6C 00 6C 
34036     00 6C 00 6C 
3403a     00 9D 00 9F 
3403e     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
34042     00 9F 00 9F 
34046     00 9F 00 9F 
3404a     00 A0 00 A0 
3404e     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34052     00 A0 00 A0 
34056     00 A0 00 A0 
3405a     00 A0 00 A0 
3405e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34062     00 A0 00 A0 
34066     00 A0 00 A0 
3406a     00 A0 00 A0 
3406e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34072     00 A0 00 A0 
34076     00 A0 00 A0 
3407a     00 A0 00 A0 
3407e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34082     00 A0 00 A0 
34086     00 A0 00 A0 
3408a     00 A0 00 A0 
3408e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34092     00 A0 00 A0 
34096     00 A0 00 A0 
3409a     00 A0 00 A0 
3409e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
340a2     00 A0 00 A0 
340a6     00 A0 00 A0 
340aa     00 A0 00 A0 
340ae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
340b2     00 A0 00 A0 
340b6     00 A0 00 A0 
340ba     00 A0 00 A0 
340be     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
340c2                 | 
340c2     00 00       |              	org
340c4 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
340c8 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
340cc 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
340d0 003             | 
340d0 003 00 30 04 F6 |                 mov     psramaddr,#0
340d4 004             | 
340d4 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
340d8 005 20 00 00 FF 
340dc 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
340e0 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
340e4 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
340e8 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
340ec 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
340f0 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
340f4 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
340f8 00d             | 
340f8 00d 20 00 00 FF 
340fc 00e 00 30 04 F1 |                 add 	psramaddr,##16384
34100 00f E0 03 00 FF 
34104 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
34108 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
3410c 012             | 
3410c 012             |                 
3410c 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
34110 013             |     
34110 013 01 2C 60 FD |                 cogid 	t11				' get id
34114 014 00 00 EC FC |                 coginit #0,#0				' start the new program
34118 015 03 2C 60 FD |                 cogstop t11				' stop the loader
3411c 016             | 
3411c 016 00 00 00 00 | t11 		long 	0
34120 017 00 FF 07 00 | mailbox 	long 	$7FF00
34124 018 00 00 00 00 | psramaddr 	long 	0
34128 019 00 00 00 00 | pslockval	long 	0
3412c 01a 00 00 00 00 | cmd             long    0
34130 01b 00 00 00 00 | buf1            long    0
34134 01c 00 40 00 00 | buf2            long    16384
34138 01d 3C 41 03 00 | 	long	@@@_dat_ + 12624
3413c 01e 50 32 20 52 
34140 01f 65 74 72 6F 
34144 020 6D 61 63 68 
34148 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
3414c 022 42 41 53 49 
34150 023 43 20 76 65 
34154 024 72 73 69 6F 
34158 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
3415c 026 33 30 00 00 | 	byte	$33, $30, $00, $00
34160 027             | 	alignl
34160 027             | _hg010b_spin2_dat_
34160 027             | 
34160 027 00 00 00 00 
34164 028 00 00 00 00 
34168 029 00 00 00 00 
3416c 02a 00 00 00 00 
34170 02b 00 00 00    | vga_font       file "vgafont.def"
34173 02b 7E 81 A5 81 
34177 02c 81 BD 99 81 
3417b 02d 81 7E 00 00 
3417f 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
34183 02f 7E FF DB FF 
34187 030 FF C3 E7 FF 
3418b 031 FF 7E 00 00 
3418f 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
34193 033 00 36 7F 7F 
34197 034 7F 7F 3E 1C 
3419b 035 08 00 00 00 
3419f 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
341a3 037 00 08 1C 3E 
341a7 038 7F 3E 1C 08 
341ab 039 00 00 00 00 
341af 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
341b3 03b 18 3C 3C E7 
341b7 03c E7 E7 18 18 
341bb 03d 3C 00 00 00 
341bf 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
341c3 03f 18 3C 7E FF 
341c7 040 FF 7E 18 18 
341cb 041 3C 00 00 00 
341cf 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
341d3 043 00 00 00 18 
341d7 044 3C 3C 18 00 
341db 045 00 00 00 00 
341df 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
341e3 047 FF FF FF E7 
341e7 048 C3 C3 E7 FF 
341eb 049 FF FF FF FF 
341ef 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
341f3 04b 00 00 3C 66 
341f7 04c 42 42 66 3C 
341fb 04d 00 00 00 00 
341ff 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
34203 04f FF FF C3 99 
34207 050 BD BD 99 C3 
3420b 051 FF FF FF FF 
3420f 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
34213 053 78 70 58 4C 
34217 054 1E 33 33 33 
3421b 055 33 1E 00 00 
3421f 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
34223 057 3C 66 66 66 
34227 058 66 3C 18 7E 
3422b 059 18 18 00 00 
3422f 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
34233 05b FC CC FC 0C 
34237 05c 0C 0C 0C 0E 
3423b 05d 0F 07 00 00 
3423f 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
34243 05f FE C6 FE C6 
34247 060 C6 C6 C6 E6 
3424b 061 E7 67 03 00 
3424f 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
34253 063 18 18 DB 3C 
34257 064 E7 3C DB 18 
3425b 065 18 00 00 00 
3425f 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
34263 067 03 07 0F 1F 
34267 068 7F 1F 0F 07 
3426b 069 03 01 00 00 
3426f 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
34273 06b 60 70 78 7C 
34277 06c 7F 7C 78 70 
3427b 06d 60 40 00 00 
3427f 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
34283 06f 18 3C 7E 18 
34287 070 18 18 7E 3C 
3428b 071 18 00 00 00 
3428f 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
34293 073 66 66 66 66 
34297 074 66 66 66    | 	byte	$66[7]
3429a 075 00 66 66 00 
3429e 076 00 00 00 00 
342a2 077 00 FE DB DB 
342a6 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
342aa 079 D8 D8 D8 00 
342ae 07a 00 00 00 3E 
342b2 07b 63 06 1C 36 
342b6 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
342ba 07d 30 63 3E 00 
342be 07e 00 00 00 00 
342c2 07f 00 00 00 00 
342c6 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
342ca 081 7F 7F 7F 00 
342ce 082 00 00 00 00 
342d2 083 00 18 3C 7E 
342d6 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
342da 085 3C 18 7E 00 
342de 086 00 00 00 00 
342e2 087 00 18 3C 7E 
342e6 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
342ea 089 18 18 18 00 
342ee 08a 00 00 00 00 
342f2 08b 00 18 18 18 
342f6 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
342fa 08d 7E 3C 18 00 
342fe 08e 00 00 00 00 
34302 08f 00 00 00 18 
34306 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
3430a 091 00 00 00 00 
3430e 092 00 00 00 00 
34312 093 00 00 00    | 	byte	$00[11]
34315 094 0C 06 7F 06 
34319 095 0C 00 00 00 
3431d 096 00 00 00 00 
34321 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34325 098 00 03 03 03 
34329 099 7F 00 00 00 
3432d 09a 00 00 00 00 
34331 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34335 09c 14 36 7F 36 
34339 09d 14 00 00 00 
3433d 09e 00 00 00 00 
34341 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
34345 0a0 1C 1C 3E 3E 
34349 0a1 7F 7F 00 00 
3434d 0a2 00 00 00 00 
34351 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
34355 0a4 7F 3E 3E 1C 
34359 0a5 1C 08 00 00 
3435d 0a6 00 00 00 00 
34361 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34365 0a8 00 00 00 00 
34369 0a9 00 00 00 00 
3436d 0aa 00 00 00 00 
34371 0ab 00 00       | 	byte	$00[14]
34373 0ab 18 3C 3C 3C 
34377 0ac 18 18 18 00 
3437b 0ad 18 18 00 00 
3437f 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
34383 0af 66 24 00 00 
34387 0b0 00 00 00 00 
3438b 0b1 00 00 00 00 
3438f 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34393 0b3 00 36 36 7F 
34397 0b4 36 36 36 7F 
3439b 0b5 36 36 00 00 
3439f 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
343a3 0b7 3E 63 43 03 
343a7 0b8 3E 60 60 61 
343ab 0b9 63 3E 18 18 
343af 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
343b3 0bb 00 00 43 63 
343b7 0bc 30 18 0C 06 
343bb 0bd 63 61 00 00 
343bf 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
343c3 0bf 1C 36 36 1C 
343c7 0c0 6E 3B 33 33 
343cb 0c1 33 6E 00 00 
343cf 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
343d3 0c3 0C 0C 0C 06 
343d7 0c4 00 00 00 00 
343db 0c5 00 00 00 00 
343df 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
343e3 0c7 30 18 0C 0C 
343e7 0c8 0C 0C 0C 0C 
343eb 0c9 18 30 00 00 
343ef 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
343f3 0cb 0C 18 30 30 
343f7 0cc 30 30 30 30 
343fb 0cd 18 0C 00 00 
343ff 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
34403 0cf 00 00 00 66 
34407 0d0 3C FF 3C 66 
3440b 0d1 00 00 00 00 
3440f 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
34413 0d3 00 00 00 18 
34417 0d4 18 7E 18 18 
3441b 0d5 00 00 00 00 
3441f 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
34423 0d7 00 00 00 00 
34427 0d8 00 00 00 00 | 	byte	$00[8]
3442b 0d9 18 18 18 0C 
3442f 0da 00 00 00 00 
34433 0db 00 00 00 00 
34437 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
3443b 0dd 00 00 00 00 
3443f 0de 00 00 00 00 
34443 0df 00 00 00 00 
34447 0e0 00 00 00 00 | 	byte	$00[16]
3444b 0e1 18 18 00 00 
3444f 0e2 00 00 00 00 
34453 0e3 00 00 40 60 
34457 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
3445b 0e5 03 01 00 00 
3445f 0e6 00 00 00 00 
34463 0e7 1C 36 63 63 
34467 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
3446b 0e9 36 1C 00 00 
3446f 0ea 00 00 00 00 
34473 0eb 18 1C 1E 18 
34477 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
3447b 0ed 18 7E 00 00 
3447f 0ee 00 00 00 00 
34483 0ef 3E 63 60 30 
34487 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
3448b 0f1 63 7F 00 00 
3448f 0f2 00 00 00 00 
34493 0f3 3E 63 60 60 
34497 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
3449b 0f5 63 3E 00 00 
3449f 0f6 00 00 00 00 
344a3 0f7 30 38 3C 36 
344a7 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
344ab 0f9 30 78 00 00 
344af 0fa 00 00 00 00 
344b3 0fb 7F 03 03 03 
344b7 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
344bb 0fd 63 3E 00 00 
344bf 0fe 00 00 00 00 
344c3 0ff 1C 06 03 03 
344c7 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
344cb 101 63 3E 00 00 
344cf 102 00 00 00 00 
344d3 103 7F 63 60 60 
344d7 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
344db 105 0C 0C 00 00 
344df 106 00 00 00 00 
344e3 107 3E 63 63 63 
344e7 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
344eb 109 63 3E 00 00 
344ef 10a 00 00 00 00 
344f3 10b 3E 63 63 63 
344f7 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
344fb 10d 30 1E 00 00 
344ff 10e 00 00 00 00 
34503 10f 00 00 00 18 
34507 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3450b 111 18 18 00 00 
3450f 112 00 00 00 00 
34513 113 00 00 00 18 
34517 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3451b 115 18 18 0C 00 
3451f 116 00 00 00 00 
34523 117 00 60 30 18 
34527 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
3452b 119 30 60 00 00 
3452f 11a 00 00 00 00 
34533 11b 00 00 00 7E 
34537 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
3453b 11d 00 00 00 00 
3453f 11e 00 00 00 00 
34543 11f 00          | 	byte	$00[9]
34544 120 06 0C 18 30 
34548 121 60 30 18 0C 
3454c 122 06 00 00 00 
34550 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
34554 124 63 63 30 18 
34558 125 18 18 00 18 
3455c 126 18 00 00 00 
34560 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
34564 128 3E 63 63 7B 
34568 129 7B 7B 3B 03 
3456c 12a 3E 00 00 00 
34570 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
34574 12c 1C 36 63 63 
34578 12d 7F 63 63 63 
3457c 12e 63 00 00 00 
34580 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
34584 130 66 66 66 3E 
34588 131 66 66 66 66 
3458c 132 3F 00 00 00 
34590 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
34594 134 66 43 03 03 
34598 135 03 03 43 66 
3459c 136 3C 00 00 00 
345a0 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
345a4 138 36 66 66 66 
345a8 139 66 66 66 36 
345ac 13a 1F 00 00 00 
345b0 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
345b4 13c 66 46 16 1E 
345b8 13d 16 06 46 66 
345bc 13e 7F 00 00 00 
345c0 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
345c4 140 66 46 16 1E 
345c8 141 16 06 06 06 
345cc 142 0F 00 00 00 
345d0 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
345d4 144 66 43 03 03 
345d8 145 7B 63 63 66 
345dc 146 5C 00 00 00 
345e0 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
345e4 148 63 63 63 7F 
345e8 149 63 63 63 63 
345ec 14a 63 00 00 00 
345f0 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
345f4 14c 18 18 18 18 
345f8 14d 18 18 18 18 | 	byte	$18[8]
345fc 14e 3C 00 00 00 
34600 14f 00 00 00 78 
34604 150 30 30 30 30 
34608 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
3460c 152 1E 00 00 00 
34610 153 00 00 00 67 
34614 154 66 66 36 1E 
34618 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
3461c 156 67 00 00 00 
34620 157 00 00 00 0F 
34624 158 06 06 06 06 
34628 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3462c 15a 7F 00 00 00 
34630 15b 00 00 00 63 
34634 15c 77 7F 7F 6B 
34638 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
3463c 15e 63 00 00 00 
34640 15f 00 00 00 63 
34644 160 67 6F 7F 7B 
34648 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
3464c 162 63 00 00 00 
34650 163 00 00 00 3E 
34654 164 63 63 63 63 
34658 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3465c 166 3E 00 00 00 
34660 167 00 00 00 3F 
34664 168 66 66 66 3E 
34668 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
3466c 16a 0F 00 00 00 
34670 16b 00 00 00 3E 
34674 16c 63 63 63 63 
34678 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
3467c 16e 3E 30 70 00 
34680 16f 00 00 00 3F 
34684 170 66 66 66 3E 
34688 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
3468c 172 67 00 00 00 
34690 173 00 00 00 3E 
34694 174 63 63 06 1C 
34698 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3469c 176 3E 00 00 00 
346a0 177 00 00 00 7E 
346a4 178 7E 5A 18 18 
346a8 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
346ac 17a 3C 00 00 00 
346b0 17b 00 00 00 63 
346b4 17c 63 63 63 63 
346b8 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
346bc 17e 3E 00 00 00 
346c0 17f 00 00 00 63 
346c4 180 63 63 63 63 
346c8 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
346cc 182 08 00 00 00 
346d0 183 00 00 00 63 
346d4 184 63 63 63 6B 
346d8 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
346dc 186 36 00 00 00 
346e0 187 00 00 00 63 
346e4 188 63 36 3E 1C 
346e8 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
346ec 18a 63 00 00 00 
346f0 18b 00 00 00 66 
346f4 18c 66 66 66 3C 
346f8 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
346fc 18e 3C 00 00 00 
34700 18f 00 00 00 7F 
34704 190 63 61 30 18 
34708 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3470c 192 7F 00 00 00 
34710 193 00 00 00 3C 
34714 194 0C 0C 0C 0C 
34718 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
3471c 196 3C 00 00 00 
34720 197 00 00 00 00 
34724 198 01 03 07 0E 
34728 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
3472c 19a 40 00 00 00 
34730 19b 00 00 00 3C 
34734 19c 30 30 30 30 
34738 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
3473c 19e 3C 00 00 00 
34740 19f 1C 36 00 00 
34744 1a0 00 00 00 00 
34748 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3474c 1a2 00 00 00 00 
34750 1a3 00 00 00 00 
34754 1a4 00 00 00 00 
34758 1a5 00 00 00 00 
3475c 1a6 00          | 	byte	$00[17]
3475d 1a6 FF 00 00 0C 
34761 1a7 18 00 00 00 
34765 1a8 00 00 00 00 
34769 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3476d 1aa 00 00 00 00 
34771 1ab 00 00 00 00 
34775 1ac 00          | 	byte	$00[9]
34776 1ac 1E 30 3E 33 
3477a 1ad 33 33 6E 00 
3477e 1ae 00 00 00 00 
34782 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
34786 1b0 1E 36 66 66 
3478a 1b1 66 66 3E 00 
3478e 1b2 00 00 00 00 
34792 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
34796 1b4 3E 63 03 03 
3479a 1b5 03 63 3E 00 
3479e 1b6 00 00 00 00 
347a2 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
347a6 1b8 3C 36 33 33 
347aa 1b9 33 33 6E 00 
347ae 1ba 00 00 00 00 
347b2 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
347b6 1bc 3E 63 7F 03 
347ba 1bd 03 63 3E 00 
347be 1be 00 00 00 00 
347c2 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
347c6 1c0 0C 1E 0C 0C 
347ca 1c1 0C 0C 1E 00 
347ce 1c2 00 00 00 00 
347d2 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
347d6 1c4 6E 33 33 33 
347da 1c5 33 33 3E 30 
347de 1c6 33 1E 00 00 
347e2 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
347e6 1c8 36 6E 66 66 
347ea 1c9 66 66 67 00 
347ee 1ca 00 00 00 00 
347f2 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
347f6 1cc 1C 18 18 18 
347fa 1cd 18 18 3C 00 
347fe 1ce 00 00 00 00 
34802 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
34806 1d0 70 60 60 60 
3480a 1d1 60 60 60 66 
3480e 1d2 66 3C 00 00 
34812 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
34816 1d4 66 36 1E 1E 
3481a 1d5 36 66 67 00 
3481e 1d6 00 00 00 00 
34822 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
34826 1d8 18 18 18 18 
3482a 1d9 18 18       | 	byte	$18[6]
3482c 1da 3C 00 00 00 
34830 1db 00 00 00 00 
34834 1dc 00 00 37 7F 
34838 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
3483c 1de 63 00 00 00 
34840 1df 00 00 00 00 
34844 1e0 00 00 3B 66 
34848 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3484c 1e2 66 00 00 00 
34850 1e3 00 00 00 00 
34854 1e4 00 00 3E 63 
34858 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
3485c 1e6 3E 00 00 00 
34860 1e7 00 00 00 00 
34864 1e8 00 00 3B 66 
34868 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3486c 1ea 3E 06 06 0F 
34870 1eb 00 00 00 00 
34874 1ec 00 00 6E 33 
34878 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
3487c 1ee 3E 30 30 78 
34880 1ef 00 00 00 00 
34884 1f0 00 00 3B 6E 
34888 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
3488c 1f2 0F 00 00 00 
34890 1f3 00 00 00 00 
34894 1f4 00 00 3E 63 
34898 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
3489c 1f6 3E 00 00 00 
348a0 1f7 00 00 00 08 
348a4 1f8 0C 0C 3F 0C 
348a8 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
348ac 1fa 38 00 00 00 
348b0 1fb 00 00 00 00 
348b4 1fc 00 00 33 33 
348b8 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
348bc 1fe 6E 00 00 00 
348c0 1ff 00 00 00 00 
348c4 200 00 00 63 63 
348c8 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
348cc 202 1C 00 00 00 
348d0 203 00 00 00 00 
348d4 204 00 00 63 63 
348d8 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
348dc 206 36 00 00 00 
348e0 207 00 00 00 00 
348e4 208 00 00 63 36 
348e8 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
348ec 20a 63 00 00 00 
348f0 20b 00 00 00 00 
348f4 20c 00 00 63 63 
348f8 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
348fc 20e 7E 60 30 1F 
34900 20f 00 00 00 00 
34904 210 00 00 7F 33 
34908 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
3490c 212 7F 00 00 00 
34910 213 00 00 00 70 
34914 214 18 18 18 0E 
34918 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
3491c 216 70 00 00 00 
34920 217 00 00 00 18 
34924 218 18 18 18 18 
34928 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
3492c 21a 18 00 00 00 
34930 21b 00 00 00 0E 
34934 21c 18 18 18 70 
34938 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
3493c 21e 0E 00 00 00 
34940 21f 6E 3B 00 00 
34944 220 00 00 00 00 
34948 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3494c 222 00 00 00 00 
34950 223 00 00 00 00 
34954 224 00 00       | 	byte	$00[10]
34956 224 08 1C 36 63 
3495a 225 63 63 7F 00 
3495e 226 00 00 00 00 
34962 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
34966 228 03 03 03 03 
3496a 229 43 66 3C 18 
3496e 22a 30 1E 00 00 
34972 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
34976 22c 33 33 33 33 
3497a 22d 33 33       | 	byte	$33[6]
3497c 22e 6E 00 00 00 
34980 22f 00 00 60 30 
34984 230 18 00 3E 63 
34988 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
3498c 232 3E 00 00 00 
34990 233 00 00 08 1C 
34994 234 36 00 1E 30 
34998 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
3499c 236 6E 00 00 00 
349a0 237 00 00 00 00 
349a4 238 33 00 1E 30 
349a8 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
349ac 23a 6E 00 00 00 
349b0 23b 00 00 1C 36 
349b4 23c 1C 00 33 33 
349b8 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
349bc 23e 6E 00 00 00 
349c0 23f 00 00 60 30 
349c4 240 18 00 3E 63 
349c8 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
349cc 242 3E 00 00 00 
349d0 243 00 00 00 00 
349d4 244 00 00 3E 63 
349d8 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
349dc 246 3E 18 30 1E 
349e0 247 00 00 00 1C 
349e4 248 58 78 38 18 
349e8 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
349ec 24a 3C 00 00 00 
349f0 24b 00 00 00 00 
349f4 24c 63 00 3E 63 
349f8 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
349fc 24e 3E 00 00 00 
34a00 24f 66 33 00 3E 
34a04 250 63 63 63 63 
34a08 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
34a0c 252 3E 00 00 00 
34a10 253 00 00 CC 66 
34a14 254 33 00 3E 63 
34a18 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
34a1c 256 3E 00 00 00 
34a20 257 00 00 18 3C 
34a24 258 66 00 1C 18 
34a28 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
34a2c 25a 3C 00 00 00 
34a30 25b 30 18 00 7F 
34a34 25c 63 61 30 18 
34a38 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
34a3c 25e 7F 00 00 00 
34a40 25f 00 63 00 08 
34a44 260 1C 36 63 63 
34a48 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
34a4c 262 63 00 00 00 
34a50 263 30 18 00 3C 
34a54 264 66 43 03 03 
34a58 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
34a5c 266 3C 00 00 00 
34a60 267 30 18 00 7F 
34a64 268 66 46 16 1E 
34a68 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
34a6c 26a 7F 00 00 00 
34a70 26b 0C 06 00 0F 
34a74 26c 06 06 06 06 
34a78 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
34a7c 26e 7F 00 00 00 
34a80 26f 30 18 00 1C 
34a84 270 18 18 18 18 
34a88 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
34a8c 272 3C 00 00 00 
34a90 273 00 00 08 1C 
34a94 274 36 00 3E 63 
34a98 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
34a9c 276 3E 00 00 00 
34aa0 277 00 00 00 00 
34aa4 278 63 00 3E 63 
34aa8 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
34aac 27a 3E 00 00 00 
34ab0 27b 00 00 00 6F 
34ab4 27c 46 26 06 06 
34ab8 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
34abc 27e 7F 00 00 00 
34ac0 27f 00 00 00 6E 
34ac4 280 4C 2C 0C 0C 
34ac8 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
34acc 282 1E 00 00 00 
34ad0 283 30 18 00 3E 
34ad4 284 63 63 06 1C 
34ad8 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
34adc 286 3E 00 00 00 
34ae0 287 00 00 60 30 
34ae4 288 18 00 3E 63 
34ae8 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
34aec 28a 3E 00 00 00 
34af0 28b 00 63 00 3E 
34af4 28c 63 63 63 63 
34af8 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
34afc 28e 3E 00 00 00 
34b00 28f 00 63 00 63 
34b04 290 63 63 63 63 
34b08 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
34b0c 292 3E 00 00 00 
34b10 293 6C 38 00 7E 
34b14 294 7E 5A 18 18 
34b18 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
34b1c 296 3C 00 00 00 
34b20 297 00 00 60 48 
34b24 298 2C 0C 3F 0C 
34b28 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
34b2c 29a 38 00 00 00 
34b30 29b 00 00 00 0F 
34b34 29c 26 36 1E 0E 
34b38 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
34b3c 29e 7F 00 00 00 
34b40 29f 00 00 00 00 
34b44 2a0 00 63 36 1C 
34b48 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
34b4c 2a2 00 00 00 00 
34b50 2a3 00 00       | 	byte	$00[6]
34b52 2a3 36 1C 08 00 
34b56 2a4 3E 63 03 03 
34b5a 2a5 03 63 3E 00 
34b5e 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
34b62 2a7 30 18 0C 00 
34b66 2a8 1E 30 3E 33 
34b6a 2a9 33 33 6E 00 
34b6e 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
34b72 2ab 60 30 18 00 
34b76 2ac 1C 18 18 18 
34b7a 2ad 18 18 3C 00 
34b7e 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
34b82 2af 60 30 18 00 
34b86 2b0 3E 63 63 63 
34b8a 2b1 63 63 3E 00 
34b8e 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
34b92 2b3 30 18 0C 00 
34b96 2b4 33 33 33 33 
34b9a 2b5 33 33 6E 00 
34b9e 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
34ba2 2b7 00 08 1C 36 
34ba6 2b8 63 63 7F 63 
34baa 2b9 63 63 63 18 
34bae 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
34bb2 2bb 00 00 00 00 
34bb6 2bc 1E 30 3E 33 
34bba 2bd 33 33 6E 18 
34bbe 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
34bc2 2bf 00 7F 63 61 
34bc6 2c0 30 18 0C 06 
34bca 2c1 43 63 7F 00 
34bce 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
34bd2 2c3 36 1C 08 00 
34bd6 2c4 7F 33 18 0C 
34bda 2c5 06 63 7F 00 
34bde 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
34be2 2c7 00 7F 66 46 
34be6 2c8 16 1E 16 06 
34bea 2c9 46 66 7F 18 
34bee 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
34bf2 2cb 00 00 00 00 
34bf6 2cc 3E 63 7F 03 
34bfa 2cd 03 63 3E 18 
34bfe 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
34c02 2cf 00 3C 66 03 
34c06 2d0 1F 03 0F 03 
34c0a 2d1 03 66 3C 00 
34c0e 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
34c12 2d3 60 30 18 00 
34c16 2d4 7F 33 18 0C 
34c1a 2d5 06 63 7F 00 
34c1e 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
34c22 2d7 00 3C 66 43 
34c26 2d8 03 03 03 03 
34c2a 2d9 43 66 3C 00 
34c2e 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
34c32 2db 00 00 00 00 
34c36 2dc 3E 63 06 1C 
34c3a 2dd 30 63 3E 18 
34c3e 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
34c42 2df 00 00 00 00 
34c46 2e0 00 00       | 	byte	$00[6]
34c48 2e1 6C 36 1B 36 
34c4c 2e2 6C 00 00 00 
34c50 2e3 00 00 00 00 
34c54 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34c58 2e5 1B 36 6C 36 
34c5c 2e6 1B 00 00 00 
34c60 2e7 88 22 88 22 
34c64 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
34c68 2e9 88 22 88 22 
34c6c 2ea 88 22 88 22 
34c70 2eb AA 55 AA 55 
34c74 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
34c78 2ed AA 55 AA 55 
34c7c 2ee AA 55 AA 55 
34c80 2ef BB EE BB EE 
34c84 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
34c88 2f1 BB EE BB EE 
34c8c 2f2 BB EE BB EE 
34c90 2f3 18 18 18 18 
34c94 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
34c98 2f5 18 18 18 18 
34c9c 2f6 18 18 18 18 
34ca0 2f7 18 18 18 18 
34ca4 2f8 18 18 18    | 	byte	$18[15]
34ca7 2f8 1F 18 18 18 
34cab 2f9 18 18 18 18 
34caf 2fa 18 30 18 00 
34cb3 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
34cb7 2fc 63 7F 63 63 
34cbb 2fd 63 63 00 00 
34cbf 2fe 00 1C 36 00 
34cc3 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
34cc7 300 63 7F 63 63 
34ccb 301 63 63 00 00 
34ccf 302 00 36 1C 00 
34cd3 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
34cd7 304 1E 16 06 46 
34cdb 305 66 7F 00 00 
34cdf 306 00 00 00 00 
34ce3 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
34ce7 308 1C 30 60 63 
34ceb 309 63 3E 18 30 
34cef 30a 1E 6C 6C 6C 
34cf3 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
34cf7 30c 6F 6C 6C 6C 
34cfb 30d 6C 6C 6C 6C 
34cff 30e 6C 6C 6C 6C 
34d03 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34d07 310 6C 6C 6C 6C 
34d0b 311 6C 6C 6C 6C 
34d0f 312 6C          | 	byte	$6c[9]
34d10 313 00 00 00 00 
34d14 314 00          | 	byte	$00[5]
34d15 314 7F 60 6F 6C 
34d19 315 6C 6C 6C 6C 
34d1d 316 6C 6C 6C 6C 
34d21 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34d25 318 6F 60 7F 00 
34d29 319 00 00 00 00 
34d2d 31a 00 00 00 18 
34d31 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
34d35 31c 61 30 18 0C 
34d39 31d 06 43 63 7F 
34d3d 31e 00 00 00 00 
34d41 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
34d45 320 00 7F 33 18 
34d49 321 0C 06 63 7F 
34d4d 322 00 00 00 00 
34d51 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
34d55 324 00 00 1F 18 
34d59 325 18 18 18 18 
34d5d 326 18 18 18 18 
34d61 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
34d65 328 18 18 F8 00 
34d69 329 00 00 00 00 
34d6d 32a 00 00 00 18 
34d71 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
34d75 32c 18 18 FF 00 
34d79 32d 00 00 00 00 
34d7d 32e 00 00 00 00 
34d81 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34d85 330 00 00 FF 18 
34d89 331 18 18 18 18 
34d8d 332 18 18 18 18 
34d91 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
34d95 334 18 18 F8 18 
34d99 335 18 18 18 18 
34d9d 336 18 18 18 00 
34da1 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
34da5 338 00 00 FF 00 
34da9 339 00 00 00 00 
34dad 33a 00 00 00 18 
34db1 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
34db5 33c 18 18 FF 18 
34db9 33d 18 18 18 18 
34dbd 33e 18 18 18 63 
34dc1 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
34dc5 340 36 63 63 7F 
34dc9 341 63 63 63 63 
34dcd 342 00 00 00 00 
34dd1 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
34dd5 344 00 1E 30 3E 
34dd9 345 33 33 33 6E 
34ddd 346 00 00 00 6C 
34de1 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
34de5 348 EC 0C FC 00 
34de9 349 00 00 00 00 
34ded 34a 00 00 00 00 
34df1 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34df5 34c FC 0C EC 6C 
34df9 34d 6C 6C 6C 6C 
34dfd 34e 6C 6C 6C 6C 
34e01 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34e05 350 EF 00 FF 00 
34e09 351 00 00 00 00 
34e0d 352 00 00 00 00 
34e11 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34e15 354 FF 00 EF 6C 
34e19 355 6C 6C 6C 6C 
34e1d 356 6C 6C 6C 6C 
34e21 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34e25 358 EC 0C EC 6C 
34e29 359 6C 6C 6C 6C 
34e2d 35a 6C 6C 6C 00 
34e31 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
34e35 35c FF 00 FF 00 
34e39 35d 00 00 00 00 
34e3d 35e 00 00 00 6C 
34e41 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
34e45 360 EF 00 EF 6C 
34e49 361 6C 6C 6C 6C 
34e4d 362 6C 6C 6C 00 
34e51 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
34e55 364 63 3E 63 63 
34e59 365 63 63 3E 63 
34e5d 366 00 00 00 00 
34e61 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
34e65 368 30 3C 36 33 
34e69 369 33 33 33 6E 
34e6d 36a 00 00 00 00 
34e71 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
34e75 36c 66 66 6F 66 
34e79 36d 66 66 36 1F 
34e7d 36e 00 00 00 36 
34e81 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
34e85 370 66 66 66 66 
34e89 371 66 66       | 	byte	$66[6]
34e8b 371 36 1F 00 00 
34e8f 372 00 00 63 00 
34e93 373 7F 66 46 16 
34e97 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
34e9b 375 66 7F 00 00 
34e9f 376 00 6C 38 00 
34ea3 377 38 30 30 3C 
34ea7 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
34eab 379 33 6E 00 00 
34eaf 37a 00 36 1C 00 
34eb3 37b 63 67 6F 7F 
34eb7 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
34ebb 37d 63 63 00 00 
34ebf 37e 00 30 18 00 
34ec3 37f 3C 18 18 18 
34ec7 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
34ecb 381 18 3C 00 00 
34ecf 382 00 3C 66 00 
34ed3 383 3C 18 18 18 
34ed7 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
34edb 385 18 3C 00 00 
34edf 386 00 00 00 36 
34ee3 387 1C 08 00 3E 
34ee7 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
34eeb 389 63 3E 00 00 
34eef 38a 00 18 18 18 
34ef3 38b 18 18 18 18 
34ef7 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
34efb 38d 00 00 00 00 
34eff 38e 00 00 00 00 
34f03 38f 00 00 00 00 | 	byte	$00[12]
34f07 390 F8 18 18 18 
34f0b 391 18 18 18 18 
34f0f 392 18 FF FF FF 
34f13 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
34f17 394 FF FF FF FF 
34f1b 395 FF FF FF FF 
34f1f 396 FF          | 	byte	$ff[9]
34f20 397 00 00 00 00 
34f24 398 00 00 00    | 	byte	$00[7]
34f27 398 FF FF FF FF 
34f2b 399 FF FF FF FF 
34f2f 39a FF          | 	byte	$ff[9]
34f30 39b 00 00 00 7E 
34f34 39c 7E 5A 18 18 
34f38 39d 18 18 18 18 
34f3c 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
34f40 39f 1C 36 1C 63 
34f44 3a0 63 63 63 63 
34f48 3a1 63 63 63 63 
34f4c 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
34f50 3a3 FF FF FF FF 
34f54 3a4 FF FF FF    | 	byte	$ff[7]
34f57 3a4 00 00 00 00 
34f5b 3a5 00 00 00 00 
34f5f 3a6 00          | 	byte	$00[9]
34f60 3a7 30 18 00 3E 
34f64 3a8 63 63 63 63 
34f68 3a9 63 63 63 63 
34f6c 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
34f70 3ab 00 00 00 1E 
34f74 3ac 33 33 33 1B 
34f78 3ad 33 63 63 63 
34f7c 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
34f80 3af 1C 36 00 3E 
34f84 3b0 63 63 63 63 
34f88 3b1 63 63 63 63 
34f8c 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
34f90 3b3 30 18 00 63 
34f94 3b4 67 6F 7F 7B 
34f98 3b5 73 63 63 63 
34f9c 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
34fa0 3b7 00 00 60 30 
34fa4 3b8 18 00 3B 66 
34fa8 3b9 66 66 66 66 
34fac 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
34fb0 3bb 00 00 36 1C 
34fb4 3bc 08 00 3B 66 
34fb8 3bd 66 66 66 66 
34fbc 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
34fc0 3bf 36 1C 00 3E 
34fc4 3c0 63 63 06 1C 
34fc8 3c1 30 60 63 63 
34fcc 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
34fd0 3c3 00 00 36 1C 
34fd4 3c4 08 00 3E 63 
34fd8 3c5 06 1C 30 63 
34fdc 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
34fe0 3c7 30 18 00 3F 
34fe4 3c8 66 66 66 3E 
34fe8 3c9 36 66 66 66 
34fec 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
34ff0 3cb 30 18 00 63 
34ff4 3cc 63 63 63 63 
34ff8 3cd 63 63 63 63 
34ffc 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
35000 3cf 00 00 60 30 
35004 3d0 18 00 3B 6E 
35008 3d1 66 06 06 06 
3500c 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
35010 3d3 66 33 00 63 
35014 3d4 63 63 63 63 
35018 3d5 63 63 63 63 
3501c 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
35020 3d7 00 00 60 30 
35024 3d8 18 00 63 63 
35028 3d9 63 63 63 63 
3502c 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
35030 3db 30 18 00 66 
35034 3dc 66 66 66 3C 
35038 3dd 18 18 18 18 
3503c 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
35040 3df 00 00 00 08 
35044 3e0 0C 0C 3F 0C 
35048 3e1 0C 0C 0C 6C 
3504c 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
35050 3e3 30 18 00 00 
35054 3e4 00 00 00 00 
35058 3e5 00 00 00 00 
3505c 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35060 3e7 00 00 00 00 
35064 3e8 00 00 00 00 | 	byte	$00[8]
35068 3e9 7F 00 00 00 
3506c 3ea 00 00 00 00 
35070 3eb 66 33 00 00 
35074 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
35078 3ed 00 00 00 00 
3507c 3ee 00 00 00 00 
35080 3ef 00 00 00 00 
35084 3f0 00 00 00 00 
35088 3f1 00 00 00 00 
3508c 3f2 00          | 	byte	$00[21]
3508d 3f2 0C 06 3C 36 
35091 3f3 1C 00 00 00 
35095 3f4 00 00 00 00 
35099 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3509d 3f6 00 00 00 63 
350a1 3f7 3E 00 00 00 
350a5 3f8 00 00 00 00 
350a9 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
350ad 3fa 00 00 00 00 
350b1 3fb 3E 63 06 1C 
350b5 3fc 36 63 63 36 
350b9 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
350bd 3fe 00 00 00 00 
350c1 3ff 00 00 00 00 | 	byte	$00[8]
350c5 400 18 00 7E 00 
350c9 401 18 00 00 00 
350cd 402 00 00 00 00 
350d1 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
350d5 404 00 00 00 00 
350d9 405 00 00 00 00 | 	byte	$00[8]
350dd 406 18 30 1E 00 
350e1 407 00 00 1C 36 
350e5 408 36 1C 00 00 
350e9 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
350ed 40a 00 00 00 00 
350f1 40b 63 00 00 00 
350f5 40c 00 00 00 00 
350f9 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
350fd 40e 00 00 00 18 
35101 40f 18 00 00 00 
35105 410 00 00 00 00 
35109 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3510d 412 00 00 00 00 
35111 413 00          | 	byte	$00[5]
35112 413 CC 66 33 00 
35116 414 33 33 33 33 
3511a 415 33 33 6E 00 
3511e 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
35122 417 00 3F 66 66 
35126 418 66 3E 36 66 
3512a 419 66 66 6F 00 
3512e 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
35132 41b 36 1C 08 00 
35136 41c 3B 6E 66 06 
3513a 41d 06 06 0F 00 
3513e 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
35142 41f 00 00 00 7E 
35146 420 7E 7E 7E 7E 
3514a 421 7E 7E 00 00 
3514e 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
35152 423 00 00 00 00 
35156 424 00 00 00 00 
3515a 425 00 00 00 00 
3515e 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35160 427             | 'vga_font       file "vgafont.def"
35160 427 00 00 00 00 
      ...             
35190 433 00 00 00 00 
35194 434 00 00 00    | st_font        file "st4font.def"
35197 434 FF FF 00 00 
3519b 435 00 00 00 00 
3519f 436 00 18 18 18 
351a3 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
351a7 438 18 18 18 18 
351ab 439 18 18 18 18 
351af 43a 18          | 	byte	$18[9]
351b0 43b 00 00 00 00 
351b4 43c 00 00 00    | 	byte	$00[7]
351b7 43c FF FF 18 18 
351bb 43d 18 18 18 18 
351bf 43e 18 18 18 18 
351c3 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
351c7 440 FF FF 00 00 
351cb 441 00 00 00 00 
351cf 442 00 18 18 18 
351d3 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
351d7 444 1F 1F 18 18 
351db 445 18 18 18 18 
351df 446 18 18 18 18 
351e3 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
351e7 448 F8 F8 18 18 
351eb 449 18 18 18 18 
351ef 44a 18 00 00 00 
351f3 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
351f7 44c 1F 1F 18 18 
351fb 44d 18 18 18 18 
351ff 44e 18 00 00 00 
35203 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
35207 450 F8 F8 18 18 
3520b 451 18 18 18 18 
3520f 452 18 18 18 18 
35213 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
35217 454 1F 1F 00 00 
3521b 455 00 00 00 00 
3521f 456 00 18 18 18 
35223 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
35227 458 F8 F8 00 00 
3522b 459 00 00 00 00 
3522f 45a 00 18 18 18 
35233 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
35237 45c FF FF 18 18 
3523b 45d 18 18 18 18 
3523f 45e 18 00 00 18 
35243 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
35247 460 66 7E 7E 66 
3524b 461 66 66 66 30 
3524f 462 18 00 00 7E 
35253 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
35257 464 3E 06 06 06 
3525b 465 06 7E 7E 18 
3525f 466 0C 30 18 3C 
35263 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
35267 468 06 06 06 66 
3526b 469 66 7E 3C 00 
3526f 46a 00 30 18 66 
35273 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
35277 46c 7E 7E 76 76 
3527b 46d 66 66 66 00 
3527f 46e 00 30 18 7C 
35283 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
35287 470 1C 38 70 60 
3528b 471 60 7E 3E 00 
3528f 472 00 30 18 7E 
35293 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
35297 474 18 0C 0C 06 
3529b 475 06 7E 7E 00 
3529f 476 00 18 18 00 
352a3 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
352a7 478 18 18 0C 0C 
352ab 479 06 7E 7E 00 
352af 47a 00 30 18 3C 
352b3 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
352b7 47c 66 66 66 66 
352bb 47d 66          | 	byte	$66[5]
352bc 47e 7E 3C 00 00 
352c0 47f 00 00 06 06 
352c4 480 06 06 16 1E 
352c8 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
352cc 482 7E 7E 00 00 
352d0 483 00 00 00 00 
352d4 484 00 3C 7C 60 
352d8 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
352dc 486 7E 7C 30 18 
352e0 487 00 00 00 00 
352e4 488 00 3C 7E 66 
352e8 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
352ec 48a 7E 7C 18 0C 
352f0 48b 00 00 30 18 
352f4 48c 00 3C 3E 06 
352f8 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
352fc 48e 7E 7C 00 00 
35300 48f 00 00 30 18 
35304 490 00 3E 7E 66 
35308 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
3530c 492 66 66 00 00 
35310 493 00 00 30 18 
35314 494 00 7C 7E 06 
35318 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
3531c 496 7E 3E 00 00 
35320 497 00 00 30 18 
35324 498 00 7E 7E 30 
35328 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3532c 49a 7E 7E 00 00 
35330 49b 00 00 18 18 
35334 49c 00 7E 7E 30 
35338 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3533c 49e 7E 7E 00 00 
35340 49f 00 00 30 18 
35344 4a0 00 3C 7E 66 
35348 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
3534c 4a2 7E 3C 00 00 
35350 4a3 00 00 1C 1C 
35354 4a4 18 18 38 3C 
35358 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
3535c 4a6 3C 3C 00 00 
35360 4a7 00 00 00 00 
35364 4a8 00 00 00 00 
35368 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3536c 4aa 00 00 00 00 
35370 4ab 00 00       | 	byte	$00[6]
35372 4ab 18 18 18 18 
35376 4ac 18 18 18 18 | 	byte	$18[8]
3537a 4ad 00 00 18 18 
3537e 4ae 00 00 00 00 
35382 4af 66 66 66 66 
35386 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
3538a 4b1 00 00 00 00 
3538e 4b2 00 00 00 00 
35392 4b3 00          | 	byte	$00[9]
35393 4b3 66 66 FF FF 
35397 4b4 66 66 FF FF 
3539b 4b5 66 66 00 00 
3539f 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
353a3 4b7 7C 7E 06 06 
353a7 4b8 3E 7C 60 60 
353ab 4b9 7E 3E 18 18 
353af 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
353b3 4bb 66 30 30 18 
353b7 4bc 18 0C 0C 66 
353bb 4bd 66 00 00 00 
353bf 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
353c3 4bf 66 66 3C 1C 
353c7 4c0 1C FC FE 66 
353cb 4c1 66 FE FC 00 
353cf 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
353d3 4c3 18 18 18 18 
353d7 4c4 00 00 00 00 
353db 4c5 00 00 00 00 
353df 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
353e3 4c7 18 1C 0C 0C 
353e7 4c8 0C 0C 0C 0C 
353eb 4c9 1C 18 30 00 
353ef 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
353f3 4cb 18 38 30 30 
353f7 4cc 30 30 30 30 
353fb 4cd 38 18 0C 00 
353ff 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
35403 4cf 66 66 3C 3C 
35407 4d0 FF FF 3C 3C 
3540b 4d1 66 66 00 00 
3540f 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
35413 4d3 00 18 18 18 
35417 4d4 7E 7E 18 18 
3541b 4d5 18 00 00 00 
3541f 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
35423 4d7 00 00 00 00 
35427 4d8 00 00       | 	byte	$00[6]
35429 4d9 18 18 18 18 
3542d 4da 18          | 	byte	$18[5]
3542e 4da 0C 04 00 00 
35432 4db 00 00 00 00 
35436 4dc 7E 7E 00 00 
3543a 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
3543e 4de 00 00 00 00 
35442 4df 00 00 00 00 
35446 4e0 00 00 00 00 
3544a 4e1 00          | 	byte	$00[13]
3544b 4e1 18 18 18 00 
3544f 4e2 00 00 00 60 
35453 4e3 60 60 30 30 
35457 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3545b 4e5 06 06 06 00 
3545f 4e6 00 00 00 3C 
35463 4e7 7E 66 66 66 
35467 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3546b 4e9 66 7E 3C 00 
3546f 4ea 00 00 00 18 
35473 4eb 18 1C 1C 18 
35477 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
3547b 4ed 18 7E 7E 00 
3547f 4ee 00 00 00 3C 
35483 4ef 7E 66 66 30 
35487 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
3548b 4f1 0C 7E 7E 00 
3548f 4f2 00 00 00 7E 
35493 4f3 7E 30 30 18 
35497 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
3549b 4f5 66 7E 3C 00 
3549f 4f6 00 00 00 30 
354a3 4f7 30 38 38 3C 
354a7 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
354ab 4f9 7E 30 30 00 
354af 4fa 00 00 00 7E 
354b3 4fb 7E 06 06 3E 
354b7 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
354bb 4fd 66 7E 3C 00 
354bf 4fe 00 00 00 38 
354c3 4ff 3C 0E 06 06 
354c7 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
354cb 501 66 7E 3C 00 
354cf 502 00 00 00 7E 
354d3 503 7E 60 60 30 
354d7 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
354db 505 0C 0C 0C 00 
354df 506 00 00 00 3C 
354e3 507 7E 66 66 3C 
354e7 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
354eb 509 66 7E 3C 00 
354ef 50a 00 00 00 3C 
354f3 50b 7E 66 66 7E 
354f7 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
354fb 50d 70 3C 1C 00 
354ff 50e 00 00 00 00 
35503 50f 00 00 18 18 
35507 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
3550b 511 18 18 18 00 
3550f 512 00 00 00 00 
35513 513 00 00 18 18 
35517 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
3551b 515 18 18 18 0C 
3551f 516 04 00 00 00 
35523 517 70 38 1C 0E 
35527 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
3552b 519 70 00 00 00 
3552f 51a 00 00 00 00 
35533 51b 00 00 7E 7E 
35537 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
3553b 51d 00 00 00 00 
3553f 51e 00 00 00 00 | 	byte	$00[8]
35543 51f 0E 1C 38 70 
35547 520 E0 70 38 1C 
3554b 521 0E 00 00 00 
3554f 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
35553 523 7E 66 66 30 
35557 524 30 18 18 18 
3555b 525 00 18 18 00 
3555f 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
35563 527 7E 66 66 66 
35567 528 66 36 06 66 
3556b 529 66 7E 3C 00 
3556f 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
35573 52b 3C 7E 66 66 
35577 52c 66 7E 7E 66 
3557b 52d 66 66 66 00 
3557f 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
35583 52f 7E 66 66 7E 
35587 530 3E 66 66 66 
3558b 531 66 7E 3E 00 
3558f 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
35593 533 7E 66 66 06 
35597 534 06 06 06 66 
3559b 535 66 7E 3C 00 
3559f 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
355a3 537 7E 66 66 66 
355a7 538 66 66 66 66 
355ab 539 66 7E 3E 00 
355af 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
355b3 53b 7E 06 06 3E 
355b7 53c 3E 06 06 06 
355bb 53d 06 7E 7E 00 
355bf 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
355c3 53f 7E 06 06 3E 
355c7 540 3E 06 06 06 
355cb 541 06 06 06 00 
355cf 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
355d3 543 7E 06 06 76 
355d7 544 76 66 66 66 
355db 545 66 7E 3C 00 
355df 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
355e3 547 66 66 66 7E 
355e7 548 7E 66 66 66 
355eb 549 66 66 66 00 
355ef 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
355f3 54b 7E 18 18 18 
355f7 54c 18 18 18 18 
355fb 54d 18 7E 7E 00 
355ff 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
35603 54f 60 60 60 60 
35607 550 60 60 60    | 	byte	$60[7]
3560a 551 66 66 7E 3C 
3560e 552 00 00 00 00 
35612 553 66 66 36 36 
35616 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
3561a 555 66 66 C6 C6 
3561e 556 00 00 00 00 
35622 557 06 06 06 06 
35626 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
3562a 559 06 06 7E 7E 
3562e 55a 00 00 00 00 
35632 55b C6 C6 EE EE 
35636 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
3563a 55d C6 C6 C6 C6 
3563e 55e 00 00 00 00 
35642 55f 66 66 66 6E 
35646 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3564a 561 76 66 66 66 
3564e 562 00 00 00 00 
35652 563 3C 7E 66 66 
35656 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3565a 565 66 66 7E 3C 
3565e 566 00 00 00 00 
35662 567 3E 7E 66 66 
35666 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3566a 569 06 06 06 06 
3566e 56a 00 00 00 00 
35672 56b 3C 7E 66 66 
35676 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3567a 56d 66 56 3E 6C 
3567e 56e 00 00 00 00 
35682 56f 3E 7E 66 66 
35686 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3568a 571 66 66 C6 C6 
3568e 572 00 00 00 00 
35692 573 7C 7E 06 06 
35696 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
3569a 575 60 60 7E 3E 
3569e 576 00 00 00 00 
356a2 577 7E 7E 18 18 
356a6 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
356aa 579 18 18 18 18 
356ae 57a 00 00 00 00 
356b2 57b 66 66 66 66 
356b6 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
356ba 57d 66 66 7E 3C 
356be 57e 00 00 00 00 
356c2 57f 66 66 66 66 
356c6 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
356ca 581 3C 3C 18 18 
356ce 582 00 00 00 00 
356d2 583 C6 C6 C6 C6 
356d6 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
356da 585 FE EE C6 82 
356de 586 00 00 00 00 
356e2 587 66 66 66 3C 
356e6 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
356ea 589 3C 66 66 66 
356ee 58a 00 00 00 00 
356f2 58b 66 66 66 66 
356f6 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
356fa 58d 18 18 18 18 
356fe 58e 00 00 00 00 
35702 58f 7E 7E 30 30 
35706 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
3570a 591 06 06 7E 7E 
3570e 592 00 00 00 00 
35712 593 3C 3C 0C 0C 
35716 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
3571a 595 0C 0C 3C 3C 
3571e 596 00 00 00 00 
35722 597 06 06 0C 0C 
35726 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
3572a 599 60 60 C0 C0 
3572e 59a 00 00 00 00 
35732 59b 3C 3C 30 30 
35736 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
3573a 59d 30 30 3C 3C 
3573e 59e 00 00 00 00 
35742 59f 18 18 3C 3C 
35746 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3574a 5a1 00 00 00 00 
3574e 5a2 00 00 00 00 
35752 5a3 00 00 00 00 
35756 5a4 00 00 00 00 
3575a 5a5 00 00       | 	byte	$00[18]
3575c 5a6 FE FE 00 00 
35760 5a7 00 00 0C 0C 
35764 5a8 18 18 00 00 
35768 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
3576c 5aa 00 00 00 00 
35770 5ab 00 00 00 00 
35774 5ac 00          | 	byte	$00[9]
35775 5ac 3C 7C 60 7C 
35779 5ad 7E 66 66 7E 
3577d 5ae 7C 00 00 00 
35781 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
35785 5b0 3E 7E 66 66 
35789 5b1 66 66 66 7E 
3578d 5b2 3E 00 00 00 
35791 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
35795 5b4 3C 3E 06 06 
35799 5b5 06 06 06 7E 
3579d 5b6 7C 00 00 00 
357a1 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
357a5 5b8 7C 7E 66 66 
357a9 5b9 66 66 66 7E 
357ad 5ba 7C 00 00 00 
357b1 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
357b5 5bc 3C 7E 66 66 
357b9 5bd 7E 06 06 7E 
357bd 5be 7C 00 00 00 
357c1 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
357c5 5c0 18 7E 7E 18 
357c9 5c1 18 18 18 18 
357cd 5c2 18 00 00 00 
357d1 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
357d5 5c4 7C 7E 66 66 
357d9 5c5 66 66 7E 7C 
357dd 5c6 60 7E 3E 00 
357e1 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
357e5 5c8 3E 7E 66 66 
357e9 5c9 66 66 66 66 
357ed 5ca 66 00 00 00 
357f1 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
357f5 5cc 1C 1C 18 18 
357f9 5cd 18 18 18 3C 
357fd 5ce 3C 00 00 00 
35801 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
35805 5d0 30 30 30 30 
35809 5d1 30 30 30 30 
3580d 5d2 30          | 	byte	$30[9]
3580e 5d2 3E 1E 00 00 
35812 5d3 06 06 06 36 
35816 5d4 36 1E 1E 1E 
3581a 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
3581e 5d6 00 00 00 00 
35822 5d7 1C 1C 18 18 
35826 5d8 18 18 18 18 
3582a 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
3582e 5da 00 00 00 00 
35832 5db 00 00 00    | 	byte	$00[7]
35835 5dc 6C FE FE D6 
35839 5dd D6 C6 C6 C6 
3583d 5de C6 00 00 00 
35841 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
35845 5e0 3E 7E 66 66 
35849 5e1 66 66 66 66 
3584d 5e2 66 00 00 00 
35851 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
35855 5e4 3C 7E 66 66 
35859 5e5 66 66 66 7E 
3585d 5e6 3C 00 00 00 
35861 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
35865 5e8 3E 7E 66 66 
35869 5e9 66 66 66 7E 
3586d 5ea 3E 06 06 00 
35871 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
35875 5ec 7C 7E 66 66 
35879 5ed 66 66 66 7E 
3587d 5ee 7C 60 60 00 
35881 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
35885 5f0 3E 7E 66 06 
35889 5f1 06 06 06 06 
3588d 5f2 06 00 00 00 
35891 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
35895 5f4 7C 7E 06 0E 
35899 5f5 3C 70 60 7E 
3589d 5f6 3E 00 00 00 
358a1 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
358a5 5f8 7E 7E 18 18 
358a9 5f9 18 18 18 78 
358ad 5fa 70 00 00 00 
358b1 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
358b5 5fc 66 66 66 66 
358b9 5fd 66 66 66    | 	byte	$66[7]
358bc 5fe 7E 7C 00 00 
358c0 5ff 00 00 00 00 
358c4 600 00 66 66 66 
358c8 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
358cc 602 18 18 00 00 
358d0 603 00 00 00 00 
358d4 604 00 C6 C6 D6 
358d8 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
358dc 606 C6 82 00 00 
358e0 607 00 00 00 00 
358e4 608 00 66 66 3C 
358e8 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
358ec 60a 66 66 00 00 
358f0 60b 00 00 00 00 
358f4 60c 00 66 66 66 
358f8 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
358fc 60e 7C 60 7E 3E 
35900 60f 00 00 00 00 
35904 610 00 7E 7E 30 
35908 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3590c 612 7E 7E 00 00 
35910 613 00 00 30 18 
35914 614 18 18 18 0C 
35918 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
3591c 616 18 30 00 00 
35920 617 00 00 18 18 
35924 618 18 18 18 18 
35928 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3592c 61a 18 18 00 00 
35930 61b 00 00 0C 18 
35934 61c 18 18 18 30 
35938 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
3593c 61e 18 0C 00 00 
35940 61f 00 00 6C 7E 
35944 620 36 00 00 00 
35948 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
3594c 622 00 00 00 00 
35950 623 00 00 00 00 
35954 624 00          | 	byte	$00[9]
35955 624 18 18 18 18 
35959 625 18 18 00 00 
3595d 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
35960 627             | 'amiga_font     file "amigafont.def"
35960 627 00 6C FE FE 
35964 628 7C 38 10 00 
35968 629 18 18 18 F8 
3596c 62a F8 18 18 18 | a8_font        file "atari8.fnt"
35970 62b C0 C0 C0 C0 
35974 62c C0 C0 C0 C0 | 	byte	$c0[8]
35978 62d 18 18 18 1F 
3597c 62e 1F 00 00 00 
35980 62f 18 18 18 1F 
35984 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
35988 631 00 00 00 1F 
3598c 632 1F 18 18 18 
35990 633 C0 E0 70 38 
35994 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
35998 635 03 07 0E 1C 
3599c 636 38 70 E0 C0 
359a0 637 80 C0 E0 F0 
359a4 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
359a8 639 00 00 00 00 
359ac 63a F0 F0 F0 F0 
359b0 63b 01 03 07 0F 
359b4 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
359b8 63d F0 F0 F0 F0 
359bc 63e 00 00 00 00 
359c0 63f 0F 0F 0F 0F 
359c4 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
359c8 641 FF FF 00 00 
359cc 642 00 00 00 00 
359d0 643 00 00 00 00 
359d4 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
359d8 645 00 00 00 00 
359dc 646 0F 0F 0F 0F 
359e0 647 00 38 38 EE 
359e4 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
359e8 649 00 00 00 F8 
359ec 64a F8 18 18 18 
359f0 64b 00 00 00 FF 
359f4 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
359f8 64d 18 18 18 FF 
359fc 64e FF 18 18 18 
35a00 64f 00 00 3C 7E 
35a04 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
35a08 651 00 00 00 00 
35a0c 652 FF FF FF FF 
35a10 653 03 03 03 03 
35a14 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
35a18 655 00 00 00 FF 
35a1c 656 FF 18 18 18 
35a20 657 18 18 18 FF 
35a24 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
35a28 659 0F 0F 0F 0F 
35a2c 65a 0F 0F 0F 0F | 	byte	$0f[8]
35a30 65b 18 18 18 F8 
35a34 65c F8 00 00 00 
35a38 65d 1E 06 1E 06 
35a3c 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
35a40 65f 00 18 3C 7E 
35a44 660 18 18 18 00 
35a48 661 00 18 18 18 
35a4c 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
35a50 663 00 18 0C 7E 
35a54 664 0C 18 00 00 
35a58 665 00 18 30 7E 
35a5c 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
35a60 667 00 00 00 00 
35a64 668 00 00 00 00 
35a68 669 00          | 	byte	$00[9]
35a69 669 18 18 18 18 
35a6d 66a 00 18 00 00 
35a71 66b 66 66 66 00 
35a75 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
35a79 66d 66 FF 66 66 
35a7d 66e FF 66 00 18 
35a81 66f 7C 06 3C 60 
35a85 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
35a89 671 66 36 18 0C 
35a8d 672 66 62 00 38 
35a91 673 6C 38 1C F6 
35a95 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
35a99 675 18 18 18 00 
35a9d 676 00 00 00 00 
35aa1 677 70 38 18 18 
35aa5 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
35aa9 679 0E 1C 18 18 
35aad 67a 1C 0E 00 00 
35ab1 67b 66 3C FF 3C 
35ab5 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
35ab9 67d 18 18 7E 18 
35abd 67e 18 00 00 00 
35ac1 67f 00 00 00 00 
35ac5 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
35ac9 681 00 00 7E 00 
35acd 682 00 00 00 00 
35ad1 683 00 00 00 00 
35ad5 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
35ad9 685 60 30 18 0C 
35add 686 06 02 00 00 
35ae1 687 3C 66 76 6E 
35ae5 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
35ae9 689 18 1C 18 18 
35aed 68a 18 7E 00 00 
35af1 68b 3C 66 30 18 
35af5 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
35af9 68d 7E 30 18 30 
35afd 68e 66 3C 00 00 
35b01 68f 30 38 3C 36 
35b05 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
35b09 691 7E 06 3E 60 
35b0d 692 66 3C 00 00 
35b11 693 3C 06 3E 66 
35b15 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
35b19 695 7E 60 30 18 
35b1d 696 0C 0C 00 00 
35b21 697 3C 66 3C 66 
35b25 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
35b29 699 3C 66 7C 60 
35b2d 69a 30 1C 00 00 
35b31 69b 00 18 18 00 
35b35 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
35b39 69d 00 18 18 00 
35b3d 69e 18 18 0C 60 
35b41 69f 30 18 0C 18 
35b45 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
35b49 6a1 00 7E 00 00 
35b4d 6a2 7E 00 00 06 
35b51 6a3 0C 18 30 18 
35b55 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
35b59 6a5 3C 66 30 18 
35b5d 6a6 00 18 00 00 
35b61 6a7 3C 66 76 76 
35b65 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
35b69 6a9 18 3C 66 66 
35b6d 6aa 7E 66 00 00 
35b71 6ab 3E 66 3E 66 
35b75 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
35b79 6ad 3C 66 06 06 
35b7d 6ae 66 3C 00 00 
35b81 6af 1E 36 66 66 
35b85 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
35b89 6b1 7E 06 3E 06 
35b8d 6b2 06 7E 00 00 
35b91 6b3 7E 06 3E 06 
35b95 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
35b99 6b5 7C 06 06 76 
35b9d 6b6 66 7C 00 00 
35ba1 6b7 66 66 7E 66 
35ba5 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
35ba9 6b9 7E 18 18 18 
35bad 6ba 18 7E 00 00 
35bb1 6bb 60 60 60 60 
35bb5 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
35bb9 6bd 66 36 1E 1E 
35bbd 6be 36 66 00 00 
35bc1 6bf 06 06 06 06 
35bc5 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
35bc9 6c1 C6 EE FE D6 
35bcd 6c2 C6 C6 00 00 
35bd1 6c3 66 6E 7E 7E 
35bd5 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
35bd9 6c5 3C 66 66 66 
35bdd 6c6 66 3C 00 00 
35be1 6c7 3E 66 66 3E 
35be5 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
35be9 6c9 3C 66 66 66 
35bed 6ca 36 6C 00 00 
35bf1 6cb 3E 66 66 3E 
35bf5 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
35bf9 6cd 3C 06 3C 60 
35bfd 6ce 60 3C 00 00 
35c01 6cf 7E 18 18 18 
35c05 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
35c09 6d1 66 66 66 66 
35c0d 6d2 66          | 	byte	$66[5]
35c0e 6d2 7E 00 00 66 
35c12 6d3 66 66 66 3C 
35c16 6d4 18 00 00 C6 
35c1a 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
35c1e 6d6 C6 00 00 66 
35c22 6d7 66 3C 3C 66 
35c26 6d8 66 00 00 66 
35c2a 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
35c2e 6da 18 00 00 7E 
35c32 6db 30 18 0C 06 
35c36 6dc 7E 00 00 78 
35c3a 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
35c3e 6de 78 00 00 02 
35c42 6df 06 0C 18 30 
35c46 6e0 60 00 00 1E 
35c4a 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
35c4e 6e2 1E 00 00 10 
35c52 6e3 38 6C C6 00 
35c56 6e4 00 00 00 00 
35c5a 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
35c5e 6e6 FF 00 00 18 
35c62 6e7 3C 7E 7E 3C 
35c66 6e8 18 00 00 00 
35c6a 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
35c6e 6ea 7C 00 00 06 
35c72 6eb 06 3E 66 66 
35c76 6ec 3E 00 00 00 
35c7a 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
35c7e 6ee 3C 00 00 60 
35c82 6ef 60 7C 66 66 
35c86 6f0 7C 00 00 00 
35c8a 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
35c8e 6f2 3C 00 00 70 
35c92 6f3 18 7C 18 18 
35c96 6f4 18 00 00 00 
35c9a 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
35c9e 6f6 60 3E 00 06 
35ca2 6f7 06 3E 66 66 
35ca6 6f8 66 00 00 18 
35caa 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
35cae 6fa 3C 00 00 60 
35cb2 6fb 00 60 60 60 
35cb6 6fc 60 3C 00 06 
35cba 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
35cbe 6fe 66 00 00 1C 
35cc2 6ff 18 18 18 18 
35cc6 700 3C 00 00 00 
35cca 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
35cce 702 C6 00 00 00 
35cd2 703 3E 66 66 66 
35cd6 704 66 00 00 00 
35cda 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
35cde 706 3C 00 00 00 
35ce2 707 3E 66 66 3E 
35ce6 708 06 06 00 00 
35cea 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
35cee 70a 60 60 00 00 
35cf2 70b 3E 66 06 06 
35cf6 70c 06 00 00 00 
35cfa 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
35cfe 70e 3E 00 00 18 
35d02 70f 7E 18 18 18 
35d06 710 70 00 00 00 
35d0a 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
35d0e 712 7C 00 00 00 
35d12 713 66 66 66 3C 
35d16 714 18 00 00 00 
35d1a 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
35d1e 716 6C 00 00 00 
35d22 717 66 3C 18 3C 
35d26 718 66 00 00 00 
35d2a 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
35d2e 71a 30 1E 00 00 
35d32 71b 7E 30 18 0C 
35d36 71c 7E 00 00 18 
35d3a 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
35d3e 71e 3C 00 18 18 
35d42 71f 18 18 18 18 
35d46 720 18 18 00 7E 
35d4a 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
35d4e 722 60 00 10 18 
35d52 723 1C 1E 1C 18 
35d56 724 10 00 08 18 
35d5a 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
35d5e 726 08 00       | 	byte	$08, $00
35d60 727 00 00 00 00 
35d64 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
35d65 728 80 00 00 00 
35d69 729 00 80 00 00 
35d6d 72a 80 80 00 00 
35d71 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
35d75 72c 80 00 80 00 
35d79 72d 00 40 80 00 
35d7d 72e AA AA AA 00 
35d81 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
35d85 730 FF 00 00 00 
35d89 731 00 FF 00 00 
35d8d 732 FF FF 00 00 
35d91 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
35d95 734 FF 00 FF 00 
35d99 735 00 FF FF 00 
35d9d 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
35da0 737 00 00 00 00 
35da4 738 00          | ataripalette   file "ataripalettep2.def"
35da5 738 11 11 11 00 
35da9 739 22 22 22 00 
35dad 73a 33 33 33 00 
35db1 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
35db5 73c 55 55 55 00 
35db9 73d 66 66 66 00 
35dbd 73e 77 77 77 00 
35dc1 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
35dc5 740 99 99 99 00 
35dc9 741 AA AA AA 00 
35dcd 742 BB BB BB 00 
35dd1 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
35dd5 744 DD DD DD 00 
35dd9 745 EE EE EE 00 
35ddd 746 FF FF FF 00 
35de1 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
35de5 748 00 14 40 00 
35de9 749 00 1E 60 00 
35ded 74a 00 28 80 00 
35df1 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
35df5 74c 00 3C BF 00 
35df9 74d 00 46 DF 00 
35dfd 74e 00 50 FF 00 
35e01 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
35e05 750 39 77 FF 00 
35e09 751 55 8A FF 00 
35e0d 752 71 9E FF 00 
35e11 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
35e15 754 AA C5 FF 00 
35e19 755 C6 D8 FF 00 
35e1d 756 E3 EC FF 00 
35e21 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
35e25 758 00 00 40 00 
35e29 759 00 00 60 00 
35e2d 75a 00 00 80 00 
35e31 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
35e35 75c 00 00 BF 00 
35e39 75d 00 00 DF 00 
35e3d 75e 00 00 FF 00 
35e41 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
35e45 760 39 39 FF 00 
35e49 761 55 55 FF 00 
35e4d 762 71 71 FF 00 
35e51 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
35e55 764 AA AA FF 00 
35e59 765 C6 C6 FF 00 
35e5d 766 E3 E3 FF 00 
35e61 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
35e65 768 20 00 40 00 
35e69 769 30 00 60 00 
35e6d 76a 40 00 80 00 
35e71 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
35e75 76c 60 00 BF 00 
35e79 76d 70 00 DF 00 
35e7d 76e 80 00 FF 00 
35e81 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
35e85 770 9C 39 FF 00 
35e89 771 AA 55 FF 00 
35e8d 772 B8 71 FF 00 
35e91 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
35e95 774 D5 AA FF 00 
35e99 775 E3 C6 FF 00 
35e9d 776 F1 E3 FF 00 
35ea1 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
35ea5 778 40 00 40 00 
35ea9 779 60 00 60 00 
35ead 77a 80 00 80 00 
35eb1 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
35eb5 77c BF 00 BF 00 
35eb9 77d DF 00 DF 00 
35ebd 77e FF 00 FF 00 
35ec1 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
35ec5 780 FF 39 FF 00 
35ec9 781 FF 55 FF 00 
35ecd 782 FF 71 FF 00 
35ed1 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
35ed5 784 FF AA FF 00 
35ed9 785 FF C6 FF 00 
35edd 786 FF E3 FF 00 
35ee1 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
35ee5 788 40 00 20 00 
35ee9 789 60 00 30 00 
35eed 78a 80 00 40 00 
35ef1 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
35ef5 78c BF 00 60 00 
35ef9 78d DF 00 70 00 
35efd 78e FF 00 80 00 
35f01 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
35f05 790 FF 39 9C 00 
35f09 791 FF 55 AA 00 
35f0d 792 FF 71 B8 00 
35f11 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
35f15 794 FF AA D5 00 
35f19 795 FF C6 E3 00 
35f1d 796 FF E3 F1 00 
35f21 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
35f25 798 40 00 00 00 
35f29 799 60 00 00 00 
35f2d 79a 80 00 00 00 
35f31 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
35f35 79c BF 00 00 00 
35f39 79d DF 00 00 00 
35f3d 79e FF 00 00 00 
35f41 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
35f45 7a0 FF 39 39 00 
35f49 7a1 FF 55 55 00 
35f4d 7a2 FF 71 71 00 
35f51 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
35f55 7a4 FF AA AA 00 
35f59 7a5 FF C6 C6 00 
35f5d 7a6 FF E3 E3 00 
35f61 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
35f65 7a8 40 10 00 00 
35f69 7a9 60 18 00 00 
35f6d 7aa 80 20 00 00 
35f71 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
35f75 7ac BF 30 00 00 
35f79 7ad DF 38 00 00 
35f7d 7ae FF 40 00 00 
35f81 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
35f85 7b0 FF 6A 39 00 
35f89 7b1 FF 80 55 00 
35f8d 7b2 FF 95 71 00 
35f91 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
35f95 7b4 FF BF AA 00 
35f99 7b5 FF D5 C6 00 
35f9d 7b6 FF EA E3 00 
35fa1 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
35fa5 7b8 40 20 00 00 
35fa9 7b9 60 30 00 00 
35fad 7ba 80 40 00 00 
35fb1 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
35fb5 7bc BF 60 00 00 
35fb9 7bd DF 70 00 00 
35fbd 7be FF 80 00 00 
35fc1 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
35fc5 7c0 FF 9C 39 00 
35fc9 7c1 FF AA 55 00 
35fcd 7c2 FF B8 71 00 
35fd1 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
35fd5 7c4 FF D5 AA 00 
35fd9 7c5 FF E3 C6 00 
35fdd 7c6 FF F1 E3 00 
35fe1 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
35fe5 7c8 40 30 00 00 
35fe9 7c9 60 48 00 00 
35fed 7ca 80 60 00 00 
35ff1 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
35ff5 7cc BF 90 00 00 
35ff9 7cd DF A8 00 00 
35ffd 7ce FF C0 00 00 
36001 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
36005 7d0 FF CE 39 00 
36009 7d1 FF D5 55 00 
3600d 7d2 FF DC 71 00 
36011 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
36015 7d4 FF EA AA 00 
36019 7d5 FF F1 C6 00 
3601d 7d6 FF F8 E3 00 
36021 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
36025 7d8 30 40 00 00 
36029 7d9 48 60 00 00 
3602d 7da 60 80 00 00 
36031 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
36035 7dc 90 BF 00 00 
36039 7dd A8 DF 00 00 
3603d 7de C0 FF 00 00 
36041 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
36045 7e0 CE FF 39 00 
36049 7e1 D5 FF 55 00 
3604d 7e2 DC FF 71 00 
36051 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
36055 7e4 EA FF AA 00 
36059 7e5 F1 FF C6 00 
3605d 7e6 F8 FF E3 00 
36061 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
36065 7e8 00 40 00 00 
36069 7e9 00 60 00 00 
3606d 7ea 00 80 00 00 
36071 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
36075 7ec 00 BF 00 00 
36079 7ed 00 DF 00 00 
3607d 7ee 00 FF 00 00 
36081 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
36085 7f0 39 FF 39 00 
36089 7f1 55 FF 55 00 
3608d 7f2 71 FF 71 00 
36091 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
36095 7f4 AA FF AA 00 
36099 7f5 C6 FF C6 00 
3609d 7f6 E3 FF E3 00 
360a1 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
360a5 7f8 00 40 14 00 
360a9 7f9 00 60 1E 00 
360ad 7fa 00 80 28 00 
360b1 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
360b5 7fc 00 BF 3C 00 
360b9 7fd 00 DF 46 00 
360bd 7fe 00 FF 50 00 
360c1 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
360c5 800 39 FF 77 00 
360c9 801 55 FF 8A 00 
360cd 802 71 FF 9E 00 
360d1 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
360d5 804 AA FF C5 00 
360d9 805 C6 FF D8 00 
360dd 806 E3 FF EC 00 
360e1 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
360e5 808 00 40 28 00 
360e9 809 00 60 3C 00 
360ed 80a 00 80 50 00 
360f1 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
360f5 80c 00 BF 78 00 
360f9 80d 00 DF 8C 00 
360fd 80e 00 FF A0 00 
36101 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
36105 810 39 FF B5 00 
36109 811 55 FF C0 00 
3610d 812 71 FF CA 00 
36111 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
36115 814 AA FF DF 00 
36119 815 C6 FF EA 00 
3611d 816 E3 FF F4 00 
36121 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
36125 818 00 40 40 00 
36129 819 00 60 60 00 
3612d 81a 00 80 80 00 
36131 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
36135 81c 00 BF BF 00 
36139 81d 00 DF DF 00 
3613d 81e 00 FF FF 00 
36141 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
36145 820 39 FF FF 00 
36149 821 55 FF FF 00 
3614d 822 71 FF FF 00 
36151 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
36155 824 AA FF FF 00 
36159 825 C6 FF FF 00 
3615d 826 E3 FF FF 00 
36161 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
36165 828 00 28 40 00 
36169 829 00 3C 60 00 
3616d 82a 00 50 80 00 
36171 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
36175 82c 00 78 BF 00 
36179 82d 00 8C DF 00 
3617d 82e 00 A0 FF 00 
36181 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
36185 830 39 B5 FF 00 
36189 831 55 C0 FF 00 
3618d 832 71 CA FF 00 
36191 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
36195 834 AA DF FF 00 
36199 835 C6 EA FF 00 
3619d 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
361a0 837             | 
361a0 837             | '**********************************************************************************
361a0 837             | '
361a0 837             | '        Timings and colors definitions
361a0 837             | '
361a0 837             | '**********************************************************************************
361a0 837             | 
361a0 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
361a0 837 08 00 00 00 
361a4 838 3C 00 00 00 
361a8 839 08 00 00 00 
361ac 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
361b0 83b 07 00 00 00 
361b4 83c 04 00 00 00 
361b8 83d 01 00 00 00 
361bc 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
361c0 83f 58 02 00 00 
361c4 840 20 9E 4B 14 
361c8 841 FB A8 9E 01 
361cc 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
361d0 843 00 00 00 00 
361d4 844 C0 00 00 00 
361d8 845 00 00 00 00 
361dc 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
361e0 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
361e0 847 00 75 C7 97 
361e4 848 27 47 F6 0A 
361e8 849 05 79 CB 9B 
361ec 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
361f0 84b             | 
361f0 84b             | ''--------  Initialization  ----------------------------------------------------------------
361f0 84b             | 
361f0 84b 28 0C 64 FD | hdmi            setq    #6
361f4 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
361f8 84d 28 10 64 FD |                 setq    #8
361fc 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
36200 84f             | 
36200 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
36204 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
36208 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
3620c 852 D6 C6 01 F1 |                 add     t1,hbase
36210 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
36214 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
36218 855 7B 0B 80 5F 
3621c 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
36220 857 66 66 86 FF 
36224 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
36228 859             | '
36228 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
3622c 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
36230 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
36234 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
36238 85d             | 
36238 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3623c 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
36240 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
36244 860             | 
36244 860             | ''--------  frame rendering main loop  ---------------------------------------------------
36244 860             | 
36244 860 28 06 64 FD | p101            setq 	#3
36248 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
3624c 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
36250 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
36254 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
36258 865 00 A0 05 F6 |                 mov     dlinum, #0
3625c 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
36260 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
36264 868             | 
36264 868             | 
36264 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
36268 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3626c 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
36270 86b             |                 
36270 86b             | 
36270 86b             | 
36270 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
36270 86b             |   
36270 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
36274 86c 29 FE 65 3D |          if_nc  setq2   #255
36278 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
3627c 86e             | 
3627c 86e             | '' -----   up porch (before the picture)
3627c 86e             | 
3627c 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
36280 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
36284 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
36288 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
3628c 872             |  
3628c 872             |    
3628c 872             |  
3628c 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
36290 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
36294 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
36298 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3629c 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
362a0 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
362a4 878             | 
362a4 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
362a8 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
362ac 87a 48 00 B0 FD | 		call    #dli
362b0 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
362b4 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
362b8 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
362bc 87e             |                 	
362bc 87e             |                 
362bc 87e             | 
362bc 87e             |  
362bc 87e             | '' ------- the main screen drawing starts here
362bc 87e             | 
362bc 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
362c0 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
362c4 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
362c8 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
362cc 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
362d0 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
362d4 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
362d8 885             |               
362d8 885             | 
362d8 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
362dc 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
362e0 887             | 
362e0 887             | ' ---------------- All visible lines displayed now, start vblank  
362e0 887             | 
362e0 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
362e4 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
362e8 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
362ec 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
362f0 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
362f4 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
362f8 88d             | 
362f8 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
362f8 88d             | 
362f8 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
362f8 88d             | 
362f8 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
362fc 88e             | 
362fc 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
36300 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
36304 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
36308 891             | 
36308 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3630c 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
36310 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
36314 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
36318 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3631c 896             | 
3631c 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
36320 897 DD C6 41 F8 |                 getnib  t1,dl,#0
36324 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
36328 899 70 00 90 AD |     if_z        jmp     #preload
3632c 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
36330 89b 94 00 90 AD |     if_z        jmp     #preload2
36334 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
36338 89d 0C 00 90 AD |     if_z        jmp     #p390
3633c 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
36340 89f 28 00 90 AD |     if_z        jmp     #p391  
36344 8a0             | 
36344 8a0 2D 00 64 FD | p308            ret
36348 8a1             |    
36348 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3634c 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
36350 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
36354 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
36358 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3635c 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
36360 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
36364 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
36368 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3636c 8aa             |  
3636c 8aa             | '' --------  Reload palette. To do 
3636c 8aa             | 
3636c 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
36370 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
36374 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
36378 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3637c 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
36380 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
36384 8b0 70 FF 9F FD |         	jmp     #dli                
36388 8b1             |       
36388 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
36388 8b1             | 
36388 8b1             | 
36388 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
36388 8b1             | 
36388 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3638c 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
36390 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
36394 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
36398 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
3639c 8b6             |         
3639c 8b6             | '' -------------- Preload a line from PSRAM        
3639c 8b6             |         
3639c 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
363a0 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
363a4 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
363a8 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
363ac 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
363b0 8bb             | 
363b0 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
363b4 8bc 32 B7 01 F6 |                 mov     buf2,a1024
363b8 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
363bc 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
363c0 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
363c4 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
363c8 8c1             |  
363c8 8c1             |  
363c8 8c1             | preload2      '  incmod  dlinum,#3
363c8 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
363cc 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
363d0 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
363d4 8c4 28 02 64 FD |                 setq	#1
363d8 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
363dc 8c6             |                 
363dc 8c6             | 
363dc 8c6             | '' -------------- Draw sprites
363dc 8c6             | 
363dc 8c6 CF 5C 02 F6 | sprite          mov t8,frames
363e0 8c7 10 5C 0E F5 | 		and t8,#16 wz
363e4 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
363e8 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
363ec 8ca             | 		
363ec 8ca             | 
363ec 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
363f0 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
363f4 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
363f8 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
363fc 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
36400 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
36404 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
36408 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
3640c 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
36410 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
36414 8d4 01 52 86 F1 |                 sub     sprite_h,#1
36418 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
3641c 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
36420 8d7             | 
36420 8d7             | 
36420 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
36424 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
36428 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3642c 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
36430 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
36434 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
36438 8dd 00 5E 06 F6 |                 mov 	t9,#0
3643c 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
36440 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
36444 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
36448 8e1             |      
36448 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3644c 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
36450 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
36454 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
36458 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3645c 8e6             |                 
3645c 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
36460 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
36464 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
36468 8e9             |   		
36468 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3646c 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
36470 8eb             | 
36470 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
36474 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
36478 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3647c 8ee             |  
3647c 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
36480 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
36484 8f0 10 00 90 CD |      if_c 	jmp     #p899		
36488 8f1             | 	
36488 8f1             | 	
36488 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3648c 8f2 28 CD 01 F1 | 		add	t4,sprite_w
36490 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
36494 8f4             | 
36494 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
36498 8f5             | 
36498 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
3649c 8f6 01 58 86 F1 | 	 	sub     t6,#1
364a0 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
364a4 8f8             | 
364a4 8f8 28 58 62 FD |                 setq   	t6
364a8 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
364ac 8fa 28 5D 02 F6 |                 mov t8,sprite_w
364b0 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
364b4 8fc 24 00 90 AD |         if_z    jmp #p898
364b8 8fd             |          
364b8 8fd             |         
364b8 8fd 70 5F 06 F6 |                 mov  t9,#368
364bc 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
364c0 8ff             | 
364c0 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
364c4 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
364c8 901 FF FF 7F FF 
364cc 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
364d0 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
364d4 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
364d8 905 2D 01 00 F5 |                 and 0-0, t7
364dc 906             |                
364dc 906             | 
364dc 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
364e0 907 E5 E0 7A FA |                 wmlong 368,t3				
364e4 908             |                 
364e4 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
364e8 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
364ec 90a 2D 00 64 FD |                 ret
364f0 90b             | 	
364f0 90b             | 	
364f0 90b             |                
364f0 90b             |  
364f0 90b             | '' -------------- Graphics line ------------------------------------------------------------
364f0 90b             |  
364f0 90b             | 
364f0 90b             | '' consts and vars
364f0 90b             | 
364f0 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
364f4 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
364f8 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
364fc 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
36500 90f             | 
36500 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
36504 910             | 
36504 910             | '------ these longs will be set by setmode function
36504 910             | 
36504 910 00 00 00 00 | m_bs            long    0        'blanks before sync
36508 911 00 00 00 00 | m_sn            long    0        'sync
3650c 912 00 00 00 00 | m_bv            long    0        'blanks before visible
36510 913 00 00 00 00 | m_vi            long    0        'visible pixels #
36514 914             | 'm_border        long    0        'left/right borders
36514 914 00 00 00 00 | i_upporch       long    0        'up porch lines
36518 915 00 00 00 00 | i_vsync         long    0        'vsync lines
3651c 916 00 00 00 00 | i_downporch     long    0        'down porch lines
36520 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
36524 918 00 00 00 00 | i_totalvis      long    0
36528 919             | 
36528 919             | '-------------------------------------
36528 919             |  
36528 919 00 00 00 00 | linenum         long    0
3652c 91a 00 00 00 00 | frames          long    0
36530 91b 00 00 00 00 | dlinum long 0
36534 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
36538 91d             | 
36538 91d 00 00 00 00 | vblankptr       long    0
3653c 91e 00 00 00 00 | modeptr         long    0
36540 91f 00 00 00 00 | paletteptr      long    0
36544 920 00 00 00 00 | dlptr           long    0
36548 921 01 00 00 00 | hbase           long    1
3654c 922 00 00 00 00 | mailbox         long    0
36550 923 00 00 00 00 | spriteptr          long 0
36554 924             | 
36554 924 00 00 00 00 | cmd             long    0
36558 925 00 B0 07 00 | buf1            long    $80000-16384-4096
3655c 926 00 04 00 00 | buf2            long    1024
36560 927 01 00 00 00 | dlptr2          long    1
36564 928 01 00 00 00 | dl              long    1
36568 929             | 
36568 929 00 00 00 00 | buf1c long 0
3656c 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
36570 92b 01 00 00 00 | framebuf2       long    1
36574 92c 01 00 00 00 | hsync0          long    1
36578 92d 01 00 00 00 | hsync1          long    1
3657c 92e             | 
3657c 92e 01 00 00 00 | t1              long    1
36580 92f 00 00 00 00 | t2 long 0
36584 930 00 00 00 00 | t3 long 0
36588 931 00 00 00 00 | t4 long 0
3658c 932             | 
3658c 932 00 00 00 00 | rcnt            long    0  'dl repeat count
36590 933 00 00 00 00 | rcnt2           long    0
36594 934 00 00 00 00 | rcnt2a          long    0
36598 935 00 00 00 00 | roffset         long    0
3659c 936 00 00 00 00 | rdl             long    0  'dl repeat line
365a0 937 00 00 00 00 | dlc             long    0  'dl command
365a4 938             | 
365a4 938 FF FF FF FF | affffffff       long    $ffffffff
365a8 939 00 00 00 00 | sprite1pointer long 0
365ac 93a 00 00 00 00 | sprite1xy      long 0
365b0 93b 00 00 00 00 | sprite1wh      long 0
365b4 93c 00 00 00 00 | sprite2pointer long 0
365b8 93d 00 00 00 00 | sprite2xy      long 0
365bc 93e 00 00 00 00 | sprite2wh      long 0
365c0 93f 00 00 00 00 | sprite3pointer long 0
365c4 940 00 00 00 00 | sprite3xy      long 0
365c8 941 00 00 00 00 | sprite3wh      long 0
365cc 942 00 00 00 00 | sprite4pointer long 0
365d0 943 00 00 00 00 | sprite4xy      long 0
365d4 944 00 00 00 00 | sprite4wh      long 0
365d8 945 00 00 00 00 | sprite5pointer long 0
365dc 946 00 00 00 00 | sprite5xy      long 0
365e0 947 00 00 00 00 | sprite5wh      long 0
365e4 948 00 00 00 00 | sprite6pointer long 0
365e8 949 00 00 00 00 | sprite6xy      long 0
365ec 94a 00 00 00 00 | sprite6wh      long 0
365f0 94b 00 00 00 00 | sprite7pointer long 0
365f4 94c 00 00 00 00 | sprite7xy      long 0
365f8 94d 00 00 00 00 | sprite7wh      long 0
365fc 94e 00 00 00 00 | sprite8pointer long 0
36600 94f 00 00 00 00 | sprite8xy      long 0
36604 950 00 00 00 00 | sprite8wh      long 0
36608 951 00 00 00 00 | sprite9pointer long 0
3660c 952 00 00 00 00 | sprite9xy      long 0
36610 953 00 00 00 00 | sprite9wh      long 0
36614 954 00 00 00 00 | sprite10pointer long 0
36618 955 00 00 00 00 | sprite10xy      long 0
3661c 956 00 00 00 00 | sprite10wh      long 0
36620 957 00 00 00 00 | sprite11pointer long 0
36624 958 00 00 00 00 | sprite11xy      long 0
36628 959 00 00 00 00 | sprite11wh      long 0
3662c 95a 00 00 00 00 | sprite12pointer long 0
36630 95b 00 00 00 00 | sprite12xy      long 0
36634 95c 00 00 00 00 | sprite12wh      long 0
36638 95d 00 00 00 00 | sprite13pointer long 0
3663c 95e 00 00 00 00 | sprite13xy      long 0
36640 95f 00 00 00 00 | sprite13wh      long 0
36644 960 00 00 00 00 | sprite14pointer long 0
36648 961 00 00 00 00 | sprite14xy      long 0
3664c 962 00 00 00 00 | sprite14wh      long 0
36650 963 00 00 00 00 | sprite15pointer long 0
36654 964 00 00 00 00 | sprite15xy      long 0
36658 965 00 00 00 00 | sprite15wh      long 0
3665c 966 00 00 00 00 | sprite16pointer long 0
36660 967 00 00 00 00 | sprite16xy      long 0
36664 968 00 00 00 00 | sprite16wh      long 0
36668 969 00 00 00 00 | sprite17pointer long 0
3666c 96a 00 00 00 00 | sprite17xy      long 0
36670 96b 00 00 00 00 | sprite17wh      long 0
36674 96c 00 00 00 00 | sprite18pointer long 0
36678 96d 00 00 00 00 | sprite18xy      long 0
3667c 96e 00 00 00 00 | sprite18wh      long 0
36680 96f 00 00 00 00 | spritenum long 0
36684 970             | 
36684 970 00 00 00 00 | spriteline long 0
36688 971 84 03 00 00 | sprite_x long 900
3668c 972 00 00 00 00 | sprite_y long 0
36690 973 10 00 00 00 | sprite_w long 16
36694 974 40 00 00 00 | sprite_h long 64
36698 975 00 00 00 00 | l2 long 0
3669c 976 00 00 00 00 | t5 long 0
366a0 977 00 00 00 00 | t6 long 0
366a4 978 00 00 00 00 | t7 long 0
366a8 979 00 00 00 00 | t8 long 0
366ac 97a 00 00 00 00 | t9 long 0
366b0 97b 00 00 00 00 | preloadaddr long 0
366b4 97c 00 00 00 00 | preloadlineaddr long 0
366b8 97d 00 04 00 00 | a1024 long 1024
366bc 97e             | 
366bc 97e E0 03 00 00 | aa long 992
366c0 97f FF 03 00 00 | a1023 long 1023
366c4 980 00 10 00 00 | a4096 long 4096
366c8 981             |  fit 368
366c8 981             | _psram_spin2_dat_
366c8 981 00 00 00 00 
      ...             
367c0 9bf 00 00 00 00 
367c4 9c0 00 00 00 00 |     listdata long 0[8*8]
367c8 9c1             |             orgh
367c8                 | 
367c8                 | ' driver state
367c8     FF FF FF FF | drivercog   long    -1  ' COG id of driver
367cc     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
367d0                 | 
367d0                 | ' delay profile
367d0     07 00 00 00 
367d4     00 CF 7B 05 
367d8     80 D1 F0 08 
367dc     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
367e0     80 C4 60 0F 
367e4     80 39 7A 12 
367e8     40 2D D9 13 
367ec     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
367f0                 | 
367f0                 | ' data to be passed to driver when starting it
367f0                 | startupData
367f0     00 00 00 00 |     long    0           ' current frequency
367f4     00 00 00 00 |     long    FLAGS       ' optional flags for driver
367f8     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
367fc     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
36800     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
36804     10 68 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
36808     90 68 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3680c     B0 68 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
36810                 | 
36810                 | ' data for memory
36810                 | deviceData
36810                 |     ' 16 bank parameters follow (16MB per bank)
36810     00 00 00 00 
      ...             
36848     00 00 00 00 
3684c     00 00 00 00 |     long    0[16]                               ' banks 0-15
36850                 |     ' 16 banks of pin parameters follow
36850     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
36854     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
36858     FF FF FF FF 
      ...             
36888     FF FF FF FF 
3688c     FF FF FF FF |     long    -1[14]                              ' banks 2-15
36890                 | 
36890                 | ' data for COG polling
36890                 | qosData 
36890     00 00 FF FF 
36894     00 00 FF FF 
36898     00 00 FF FF 
3689c     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
368a0     00 00 FF FF 
368a4     00 00 FF FF 
368a8     00 00 FF FF 
368ac     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
368b0                 |     
368b0                 | ' mailbox storage
368b0                 | 
368b0                 | mailboxes
368b0     00 00 00 00 
      ...             
36908     00 00 00 00 
3690c     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
36910                 | 	alignl
36910                 | _psram16drv_spin2_dat_
36910                 |                             orgh
36910     00 00 00 00 
      ...             
36928     00 00 00 00 
3692c     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
36930                 | 
36930                 | driver_start
36930                 |                             org
36930 000             | '..................................................................................................
36930 000             | ' Memory layout for COG RAM once operational:
36930 000             | '
36930 000             | '  COG RAM address      Usage
36930 000             | '  ---------------      ----
36930 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
36930 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
36930 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
36930 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
36930 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
36930 000             | '  ~$198-$1F3           State and register variables
36930 000             | '
36930 000             | ' Also during driver COG startup:
36930 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
36930 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
36930 000             | '..................................................................................................
36930 000             |                             
36930 000             | ' Mailbox storage after vector initialization
36930 000             | 
36930 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
36934 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
36938 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
3693c 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
36940 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
36944 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
36948 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3694c 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
36950 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
36954 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
36958 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3695c 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
36960 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
36964 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
36968 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3696c 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
36970 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
36974 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
36978 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
3697c 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
36980 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
36984 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
36988 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
3698c 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
36990 018             | 
36990 018             | ' Mailbox parameter addresses per COG once patched
36990 018             |                             
36990 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
36994 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
36998 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
3699c 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
369a0 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
369a4 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
369a8 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
369ac 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
369b0 020             | 
369b0 020             | '..................................................................................................
369b0 020             | ' Per COG request and state setup and service branching
369b0 020             |         
369b0 020             | cog0                 
369b0 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
369b4 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
369b8 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
369bc 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
369c0 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
369c4 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
369c8 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
369cc 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
369d0 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
369d4 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
369d8 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
369dc 02b 33 CA 63 FD |                             execf   request-0               'jump to service
369e0 02c             | cog1                        
369e0 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
369e4 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
369e8 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
369ec 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
369f0 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
369f4 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
369f8 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
369fc 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
36a00 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
36a04 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36a08 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36a0c 037 33 CA 63 FD |                             execf   request-0               'jump to service
36a10 038             | cog2                         
36a10 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
36a14 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
36a18 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
36a1c 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
36a20 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36a24 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36a28 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
36a2c 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
36a30 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
36a34 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36a38 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36a3c 043 33 CA 63 FD |                             execf   request-0               'jump to service
36a40 044             | cog3                        
36a40 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
36a44 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
36a48 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
36a4c 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
36a50 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36a54 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36a58 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
36a5c 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
36a60 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
36a64 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36a68 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36a6c 04f 33 CA 63 FD |                             execf   request-0               'jump to service
36a70 050             | cog4                        
36a70 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
36a74 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
36a78 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
36a7c 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
36a80 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36a84 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36a88 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
36a8c 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
36a90 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
36a94 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36a98 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36a9c 05b 33 CA 63 FD |                             execf   request-0               'jump to service
36aa0 05c             | cog5                        
36aa0 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
36aa4 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
36aa8 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
36aac 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
36ab0 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36ab4 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36ab8 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
36abc 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
36ac0 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
36ac4 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36ac8 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36acc 067 33 CA 63 FD |                             execf   request-0               'jump to service
36ad0 068             | cog6                        
36ad0 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
36ad4 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
36ad8 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
36adc 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
36ae0 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36ae4 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36ae8 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
36aec 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
36af0 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
36af4 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36af8 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36afc 073 33 CA 63 FD |                             execf   request-0               'jump to service
36b00 074             | cog7                        
36b00 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
36b04 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
36b08 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
36b0c 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
36b10 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36b14 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36b18 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
36b1c 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
36b20 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
36b24 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36b28 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36b2c 07f 33 CA 63 FD |                             execf   request-0               'jump to service
36b30 080             |                             fit     128
36b30 080             | 
36b30 080             |                             fit     128
36b30 080             | pad                         long    0[128-$]                'align init code to $80
36b30 080             | 
36b30 080             | '..................................................................................................
36b30 080             | 
36b30 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
36b30 080             | 
36b30 080             | init                        
36b30 080             |                             ' get driver scratch long address in hub
36b30 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
36b34 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
36b38 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
36b3c 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
36b40 084             |                     
36b40 084             |                             ' read in the additional LUT RAM code
36b40 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
36b44 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
36b48 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
36b4c 087             | 
36b4c 087             |                             ' read the startup parameters
36b4c 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
36b50 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
36b54 089             | 
36b54 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
36b54 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
36b58 08a             | 
36b58 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
36b5c 08b 01 00 00 5F 
36b60 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
36b64 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
36b68 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
36b6c 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
36b70 090             | 
36b70 090             |                             ' setup data pin modes and data bus pin group in streamer commands
36b70 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
36b74 091 01 00 00 FF 
36b78 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
36b7c 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
36b80 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
36b84 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
36b88 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
36b8c 097 08 DE 47 F5 |                             or      a, #8
36b90 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
36b94 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
36b98 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
36b9c 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
36ba0 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
36ba4 09d 01 DE 07 F1 |                             add     a, #1
36ba8 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
36bac 09f             |  
36bac 09f             |                             ' setup device control pin states
36bac 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
36bb0 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
36bb4 0a1 01 00 00 FF 
36bb8 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
36bbc 0a3             | 
36bbc 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
36bc0 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
36bc4 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
36bc8 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
36bcc 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
36bd0 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
36bd4 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
36bd8 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
36bdc 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
36be0 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
36be4 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
36be8 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
36bec 0af             | pinloop
36bec 0af             |                             ' generate minimum CE high time before access
36bec 0af A1 07 00 FF 
36bf0 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
36bf4 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
36bf8 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
36bfc 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
36c00 0b4 1F DE 63 FD |                             waitx   a                       'delay
36c04 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
36c08 0b6             | 
36c08 0b6             |                             ' setup the COG mailboxes and addresses 
36c08 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
36c0c 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
36c10 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
36c14 0b9             | 
36c14 0b9 28 2E 64 FD |                             setq    #24-1
36c18 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
36c1c 0bb             | 
36c1c 0bb             |                             ' setup the polling loop for active COGs 
36c1c 0bb 01 C2 63 FD |                             cogid   id
36c20 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
36c24 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
36c28 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
36c2c 0bf 0A F0 07 F6 |                             mov     ptra, #10
36c30 0c0 E1 F1 03 FA |                             mul     ptra, id
36c34 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
36c38 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
36c3c 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
36c40 0c4 03 C2 07 FA |                             mul     id, #3
36c44 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
36c48 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
36c4c 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
36c50 0c8 D8 01 B0 FD |                             call    #reloadcogs
36c54 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
36c58 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
36c5c 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
36c5c 0cb D8 E5 B7 F9 |                             setd    d, #addr1
36c60 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
36c64 0cd 08 04 DC FC |                             rep     #2, #8
36c68 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
36c6c 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
36c70 0d0             | 
36c70 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
36c70 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
36c70 0d0 01 C2 63 FD |                             cogid   id
36c74 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
36c78 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
36c7c 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
36c80 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
36c84 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
36c88 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
36c8c 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
36c90 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
36c94 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
36c98 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
36c9c 0db 3F E4 A7 F9 |                             alti    d, #%111_111
36ca0 0dc 00 00 00 F6 |                             mov     0-0, 0-0
36ca4 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
36ca8 0de A5 E5 03 F1 |                             add     d, const512
36cac 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
36cb0 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
36cb4 0e1 00 00 00 F6 |                             mov     0-0, 0-0
36cb8 0e2             |                             
36cb8 0e2             |                             ' setup register values for control vector loop setup after we return
36cb8 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
36cbc 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
36cc0 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
36cc4 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
36cc8 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
36ccc 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
36cd0 0e8 D0 C3 8F F9 |                             altd    id, #id0
36cd4 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
36cd8 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
36cdc 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
36ce0 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
36ce4 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
36ce8 0ee             |  
36ce8 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
36cec 0ef 07 CA 07 F5 |                             and     request, #7
36cf0 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
36cf4 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
36cf8 0f2             |                             fit     $100                    'ensure all init code fits this space
36cf8 0f2             | 
36cf8 0f2             |                             fit     $100                    'ensure all init code fits this space
36cf8 0f2             | 
36cf8 0f2 00 00 00 00 
      ...             
36d28 0fe 00 00 00 00 
36d2c 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
36d30 100             | 
36d30 100             | '..................................................................................................
36d30 100             | ' Error result handling and COG notification of request completion
36d30 100             | 
36d30 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
36d34 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
36d38 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
36d3c 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
36d40 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
36d44 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
36d48 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
36d4c 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
36d50 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
36d54 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
36d58 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
36d5c 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
36d60 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
36d64 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
36d68 10e             | ' Poller re-starts here after a COG is serviced
36d68 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
36d6c 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
36d70 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
36d74 111             | ' Main dynamic polling loop repeats until a request arrives
36d74 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
36d78 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
36d7c 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
36d80 114             | 
36d80 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
36d84 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
36d88 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
36d8c 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
36d90 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
36d94 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
36d98 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
36d9c 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
36da0 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
36da4 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
36da8 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
36dac 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
36db0 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
36db4 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
36db8 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
36dbc 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
36dc0 124             | 
36dc0 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
36dc4 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
36dc8 126             |  
36dc8 126             | '..................................................................................................
36dc8 126             | ' List handler                               
36dc8 126             | 
36dc8 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
36dcc 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
36dd0 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
36dd4 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
36dd8 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
36ddc 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
36de0 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
36de4 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
36de8 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
36dec 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
36df0 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
36df4 131 33 00 60 FD |                             execf   0-0                     'process the request 
36df8 132             | 
36df8 132             | '..................................................................................................
36df8 132             | ' Restoring per COG state and resuming where we left off
36df8 132             | 
36df8 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
36dfc 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
36e00 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
36e04 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
36e08 136 D8 CB FB F8 |                             getbyte request, addr1, #3
36e0c 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
36e10 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
36e14 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
36e18 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
36e1c 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
36e20 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
36e24 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
36e28 13e             |                    
36e28 13e             | '..................................................................................................
36e28 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
36e28 13e             | 
36e28 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
36e2c 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
36e30 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
36e34 141 D0 DF B7 F9 |                             setd    a, #id0
36e38 142 D8 DF BF F9 |                             sets    a, #addr1
36e3c 143 FE FF FF FF 
36e40 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
36e44 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
36e48 146 3F DE A7 F9 |                             alti    a, #%111_111 
36e4c 147 00 00 F0 F9 |                             muxq    0-0, 0-0
36e50 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
36e54 149 01 E2 63 FD |                             cogid   c
36e58 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
36e5c 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
36e60 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
36e64 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
36e68 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
36e6c 14f 00 E0 03 F6 |                             mov     b, 0-0
36e70 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
36e74 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
36e78 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
36e7c 153 0C 00 90 AD |             if_z            jmp     #excluded               
36e80 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
36e84 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
36e88 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
36e8c 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
36e90 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
36e94 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
36e98 15a             | 
36e98 15a             | 'determine priority cogs and build instructions for the polling sequence
36e98 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
36e9c 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
36ea0 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
36ea4 15d             | 
36ea4 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
36ea8 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
36eac 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
36eb0 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
36eb4 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
36eb8 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
36ebc 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
36ec0 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
36ec4 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
36ec8 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
36ecc 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
36ed0 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
36ed4 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
36ed8 16a             | endprioloop
36ed8 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
36edc 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
36ee0 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
36ee4 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
36ee8 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
36eec 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
36ef0 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
36ef4 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
36ef8 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
36efc 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
36f00 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
36f04 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
36f08 176             | 
36f08 176             | ' populate the round robin COG polling instructions
36f08 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
36f0c 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
36f10 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
36f14 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
36f18 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
36f1c 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
36f20 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
36f24 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
36f28 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
36f2c 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
36f30 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
36f34 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
36f38 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
36f3c 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
36f40 184             | '..................................................................................................
36f40 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
36f40 184             | 
36f40 184             | set_latency                                                 '            (a) set latency
36f40 184             | get_latency                                                 '            (b) get latency
36f40 184             | set_burst                                                   '            (c) set burst size of bank
36f40 184             | get_burst                                                   '            (d) get burst size of bank
36f40 184             |                                                             '            (e) dump state
36f40 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
36f44 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
36f48 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
36f4c 187             |                                                             ' | | | | e  account for following AUGS
36f4c 187 04 00 00 FF 
36f50 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
36f54 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
36f58 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
36f5c 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
36f60 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
36f64 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
36f68 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
36f6c 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
36f70 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
36f74 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
36f78 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
36f7c 193             | 
36f7c 193             | '..................................................................................................
36f7c 193             | ' Misc EXECF code
36f7c 193             | 
36f7c 193 33 72 63 FD | start_read_exec             execf   newburstr
36f80 194 33 7C 63 FD | start_write_exec            execf   resumewrites
36f84 195 33 78 63 FD | continue_read_exec          execf   lockedreads
36f88 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
36f8c 197             | 
36f8c 197             | '..................................................................................................
36f8c 197             | ' Variables
36f8c 197             | 
36f8c 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
36f90 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
36f94 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
36f98 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
36f9c 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
36fa0 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
36fa4 19d             | 
36fa4 19d 00 00 00 80 | xfreq1          long    $80000000
36fa8 19e 00 00 00 40 | xfreq2          long    $40000000
36fac 19f 03 00 00 00 | delay           long    3
36fb0 1a0             | 
36fb0 1a0             | lutcodeaddr                 
36fb0 1a0             | startupparams
36fb0 1a0             | excludedcogs                                    'careful: shared register use!
36fb0 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
36fb4 1a1 00 00 00 00 | flags           long    0
36fb8 1a2             | mask                                            'careful: shared register use!
36fb8 1a2 00 00 00 00 | resetmaskA      long    0
36fbc 1a3             | limit                                           'careful: shared register use!
36fbc 1a3 00 00 00 00 | resetmaskB      long    0
36fc0 1a4 00 00 00 00 | datapins        long    0
36fc4 1a5             | const512                                        'careful: shared register use!
36fc4 1a5 00 00 00 00 | devicelist      long    0
36fc8 1a6 00 00 00 00 | coglist         long    0
36fcc 1a7 00 00 00 00 | mbox            long    0 
36fd0 1a8             | 
36fd0 1a8             | clkpin                                          'shared with code patched during init
36fd0 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
36fd4 1a9             | cspin                                           'shared with code patched during init
36fd4 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
36fd8 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
36fdc 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
36fe0 1ac 01 00 00 00 | clkdelay        long    1
36fe4 1ad 00 00 00 00 | regdatabus      long    0
36fe8 1ae             | 
36fe8 1ae 10 00 00 00 | deviceaddr      long    $10
36fec 1af             | rrcounter
36fec 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
36ff0 1b0             | 
36ff0 1b0             | ' jump addresses for the per COG handlers
36ff0 1b0 20 00 00 00 | cog0_handler    long    cog0
36ff4 1b1 2C 00 00 00 | cog1_handler    long    cog1
36ff8 1b2 38 00 00 00 | cog2_handler    long    cog2
36ffc 1b3 44 00 00 00 | cog3_handler    long    cog3
37000 1b4 50 00 00 00 | cog4_handler    long    cog4
37004 1b5 5C 00 00 00 | cog5_handler    long    cog5
37008 1b6 68 00 00 00 | cog6_handler    long    cog6
3700c 1b7 74 00 00 00 | cog7_handler    long    cog7
37010 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
37014 1b9             | 
37014 1b9             | ' EXECF sequences
37014 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
37018 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
3701c 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
37020 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
37024 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
37028 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
3702c 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
37030 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
37030 1c0             | 
37030 1c0             | 
37030 1c0             | ' SKIPF sequences
37030 1c0             | skiptable
37030 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
37034 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
37038 1c2 00 00 00 00 |                 long    0                      ' read modify write long
3703c 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
37040 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
37044 1c5 00 00 00 00 | pattern2        long    0
37048 1c6 00 00 00 00 | pattern3        long    0
3704c 1c7 77 02 00 00 | singlelong      long    %1001110111  
37050 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
37054 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
37058 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3705c 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
37060 1cc             | 
37060 1cc             | ' LUT RAM address values
37060 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
37064 1cd DD 02 00 00 | continue_read   long    continue_read_lut
37068 1ce DB 02 00 00 | continue_write  long    continue_write_lut
3706c 1cf F6 02 00 00 | noread          long    noread_lut
37070 1d0             | 
37070 1d0 00 00 00 00 | id0             long    0
37074 1d1 01 00 00 00 | id1             long    1
37078 1d2 02 00 00 00 | id2             long    2
3707c 1d3 03 00 00 00 | id3             long    3
37080 1d4 04 00 00 00 | id4             long    4
37084 1d5 05 00 00 00 | id5             long    5
37088 1d6 06 00 00 00 | id6             long    6
3708c 1d7 07 00 00 00 | id7             long    7
37090 1d8             | 
37090 1d8             | 'These next 10 request registers below are also temporarily reused during init 
37090 1d8             | 'and COG updates and need to follow immediately after id0-id7
37090 1d8 00 00 00 00 | addr1           long    0
37094 1d9 00 00 00 00 | hubdata         long    0
37098 1da 00 00 00 00 | count           long    0
3709c 1db 00 00 00 00 | addr2           long    0
370a0 1dc 00 00 00 00 | total           long    0
370a4 1dd 00 00 00 00 | offset1         long    0
370a8 1de 00 00 00 00 | offset2         long    0
370ac 1df 00 00 00 00 | link            long    0
370b0 1e0             | 
370b0 1e0             | burstwrite                                      'note shared register use during init
370b0 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
370b4 1e1 00 00 00 00 | id              long    0
370b8 1e2             | 
370b8 1e2 00 00 00 00 | header          long    0
370bc 1e3 00 00 00 00 | trailer         long    0
370c0 1e4 00 00 00 00 | cmdaddr         long    0
370c4 1e5 00 00 00 00 | request         long    0
370c8 1e6 00 00 00 00 | rrlimit         long    0
370cc 1e7 00 00 00 00 | pinconfig       long    0
370d0 1e8 00 00 00 00 | clks            long    0
370d4 1e9 00 00 00 00 | resume          long    0
370d8 1ea 00 00 00 00 | orighubsize     long    0
370dc 1eb 00 00 00 00 | wrclks          long    0
370e0 1ec             | 
370e0 1ec 00 00 00 00 | pattern         long    0
370e4 1ed 00 00 00 00 | hubscratch      long    0
370e8 1ee 00 10 00 00 | val4k           long    4096
370ec 1ef             | 
370ec 1ef             | ' temporary general purpose regs
370ec 1ef 00 00 00 00 | a               long    0
370f0 1f0 00 00 00 00 | b               long    0
370f4 1f1 00 00 00 00 | c               long    0
370f8 1f2 00 00 00 00 | d               long    0
370fc 1f3             |                 fit     502
370fc 1f3             | 
370fc 1f3             |                 fit     502
370fc 1f3             | 
370fc 1f3             | '..................................................................................................
370fc 1f3             | 
370fc 1f3             |             orgh
370fc                 | 
370fc                 | lut_code
370fc                 | 'HW init code up to 80 longs
370fc                 | 
370fc                 | '..................................................................................................
370fc                 | ' Memory layout for LUT RAM once operational:
370fc                 | '
370fc                 | '  LUT RAM address      Usage
370fc                 | '  ---------------      ----
370fc                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
370fc                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
370fc                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
370fc                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
370fc                 | '
370fc                 | ' Also during driver COG startup:
370fc                 | ' $230-$24F is used for HW init setup
370fc                 | ' $250-$26F is used as temporary vector storage 
370fc                 | '..................................................................................................
370fc                 | 
370fc                 |                 org $230    
370fc 230             | 
370fc 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
370fc 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
37100 231 24 16 60 FD |                             pollxfi
37104 232 FF AA 2A FF 
37108 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
3710c 234 28 00 B0 FD |                             call    #sendqspi
37110 235 07 F8 07 FF 
37114 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
37118 237 28 00 B0 FD |                             call    #sendspi
3711c 238 F8 07 78 FF 
37120 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
37124 23a 1C 00 B0 FD |                             call    #sendspi
37128 23b 7F 78 78 FF 
3712c 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
37130 23d 10 00 B0 FD |                             call    #sendspi 
37134 23e 2D 00 64 FD |                             ret
37138 23f             | 
37138 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
3713c 240 32 0C 64 FD |                             skipf   #%110
37140 241 9C EF 03 F6 |                             mov     pb, xsendimm
37144 242             | 
37144 242 10 D0 07 F6 | sendspi                     mov     clks, #16
37148 243 97 EF 03 F6 |                             mov     pb, ximm8lut
3714c 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
37150 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
37154 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
37158 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3715c 248 24 36 60 FD |                             waitxfi                         'wait for the completion
37160 249 50 48 63 FD |                             fltl    datapins                'float data bus
37164 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
37168 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3716c 24c             | 
3716c 24c 00 00 00 00 
37170 24d 00 00 00 00 
37174 24e 00 00 00 00 
37178 24f 00 00 00 00 |                 long    0[$270-32-$]
3717c 250             |                 fit     $270-32  ' keep room for 32 vector longs
3717c 250             |     
3717c 250             |                 fit     $270-32  ' keep room for 32 vector longs
3717c 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
3717c 250             | rw_vect ' PSRAM jump vectors
3717c 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37180 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37184 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
37188 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3718c 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
37190 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
37194 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
37198 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
3719c 258             | ro_vect ' R/O PSRAM jump vectors
3719c 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
371a0 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
371a4 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
371a8 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
371ac 25c 00 01 00 00 |                 long    unsupported
371b0 25d 00 01 00 00 |                 long    unsupported
371b4 25e 00 01 00 00 |                 long    unsupported
371b8 25f 00 01 00 00 |                 long    unsupported
371bc 260             | ctrl_vect ' Control jump vectors
371bc 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
371c0 261 00 01 00 00 |                 long    unsupported
371c4 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
371c8 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
371cc 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
371d0 265 00 01 00 00 |                 long    unsupported
371d4 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
371d8 267 3E 01 00 00 |                 long    reconfig 
371dc 268             | no_vect ' Invalid bank jump vectors
371dc 268 01 01 00 00 |                 long    invalidbank
371e0 269 01 01 00 00 |                 long    invalidbank
371e4 26a 01 01 00 00 |                 long    invalidbank
371e8 26b 01 01 00 00 |                 long    invalidbank
371ec 26c 01 01 00 00 |                 long    invalidbank
371f0 26d 01 01 00 00 |                 long    invalidbank
371f4 26e 01 01 00 00 |                 long    invalidbank
371f8 26f 01 01 00 00 |                 long    invalidbank
371fc 270             |                 fit     $270
371fc 270             | 
371fc 270             |                 fit     $270
371fc 270             | '..................................................................................................
371fc 270             | ' PSRAM READS
371fc 270             |                                                             ' a b c d e f
371fc 270             |                                                             ' B W L B R L  (a) byte read
371fc 270             |                                                             ' Y O O U E O  (b) word read
371fc 270             |                                                             ' T R N R S C  (c) long read
371fc 270             |                                                             ' E D G S U K  (d) new burst read
371fc 270             |                                                             '       T M E  (e) resumed sub-burst
371fc 270             |                                                             '         E D  (f) locked sub-burst
371fc 270             | 
371fc 270             | 
371fc 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
37200 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
37204 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
37208 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
3720c 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
37210 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
37214 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
37218 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3721c 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
37220 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
37224 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
37228 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3722c 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
37230 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
37234 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
37238 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3723c 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
37240 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
37244 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
37248 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3724c 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
37250 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
37254 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
37258 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3725c 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
37260 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
37264 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
37268 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3726c 28c             | 
3726c 28c             |                             ' fall through to read bursts
3726c 28c             |                         
3726c 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3726c 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
37270 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
37274 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
37278 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3727c 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
37280 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
37284 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
37288 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
3728c 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
37290 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
37294 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
37298 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
3729c 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
372a0 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
372a4 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
372a8 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
372ac 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
372b0 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
372b4 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
372b8 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
372bc 2a0 E8 D1 03 F1 |                             add     clks, clks
372c0 2a1             | readcommon
372c0 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
372c4 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
372c8 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
372cc 2a4             | 
372cc 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
372d0 2a5 69 C8 63 FD |                             rev     cmdaddr
372d4 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
372d8 2a7 61 C8 63 FD |                             mergeb  cmdaddr
372dc 2a8             | 
372dc 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
372e0 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
372e4 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
372e4 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
372e8 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
372ec 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
372f0 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
372f4 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
372f4 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
372f8 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
372fc 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
37300 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
37304 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
37308 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
3730c 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
3730c 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
37310 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
37314 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
37318 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
3731c 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
37320 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
37324 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
37328 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3732c 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
37330 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
37334 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
37338 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3733c 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
37340 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
37344 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
37344 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
37348 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3734c 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
37350 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
37354 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
37358 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3735c 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
37360 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
37364 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
37368 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3736c 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
37370 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
37374 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
37378 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
3737c 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
37380 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
37384 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
37388 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
3738c 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
37390 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
37394 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
37398 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
3739c 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
373a0 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
373a4 2da 10 03 90 FD |                             jmp     #writecommon
373a8 2db             | 
373a8 2db             | '..................................................................................................
373a8 2db             | ' Burst continuation testing
373a8 2db             | 
373a8 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
373ac 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
373b0 2dd             | continue_read_lut          
373b0 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
373b4 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
373b8 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
373bc 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
373c0 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
373c4 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
373c8 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
373cc 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
373d0 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
373d4 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
373d8 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
373dc 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
373e0 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
373e4 2ea             | 
373e4 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
373e8 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
373ec 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
373f0 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
373f4 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
373f8 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
373fc 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
37400 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
37404 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
37408 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3740c 2f4 2A 1C 66 0D |             _ret_           push    #poller
37410 2f5             | 
37410 2f5             | 
37410 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
37414 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
37414 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
37418 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3741c 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
37420 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
37424 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
37428 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3742c 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
37430 2fd 2D 00 64 FD |                             ret                             ' | continue processing
37434 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
37438 2ff             | '..................................................................................................
37438 2ff             | ' Completion of requests
37438 2ff             | 
37438 2ff             | complete_rw_lut             
37438 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3743c 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
37440 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
37444 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
37448 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3744c 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
37450 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
37454 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
37458 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3745c 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
37460 309 32 62 64 AD |             if_z            skipf   #%110001
37464 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
37468 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3746c 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
37470 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
37474 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
37478 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3747c 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
37480 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
37484 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
37488 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3748c 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
37490 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
37494 316             |                                                             ' skipcase (a) gfx copy to/from hub
37494 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
37494 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
37494 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
37498 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
3749c 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
374a0 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
374a4 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
374a8 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
374ac 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
374b0 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
374b4 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
374b8 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
374bc 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
374c0 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
374c4 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
374c8 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
374cc 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
374d0 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
374d4 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
374d8 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
374dc 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
374e0 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
374e4 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
374e8 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
374ec 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
374f0 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
374f4 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
374f8 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
374fc 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
37500 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
37504 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
37508 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3750c 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
37510 335 DF B7 03 A6 |             if_z            mov     addr2, link
37514 336 34 FF 9F AD |             if_z            jmp     #checknext
37518 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3751c 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
37520 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
37524 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
37528 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3752c 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
37530 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
37534 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
37538 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3753c 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
37540 341             | 
37540 341             | '..................................................................................................
37540 341             | ' PSRAM WRITES
37540 341             |                                                             '  a b c d e f g h
37540 341             | 
37540 341             |                                                             '  B W L F B R L L (a) byte write(s)
37540 341             |                                                             '  Y O O I U E O O (b) word write(s)
37540 341             |                                                             '  T R N L R S C C (c) long write(s)
37540 341             |                                                             '  E D G L S U K K (d) resumed fill
37540 341             |                                                             '          T M E E (e) new burst write
37540 341             |                                                             '            E D D (f) resumed burst
37540 341             |                                                             '              F B (g) locked fill
37540 341             |                                                             '              I U (h) locked burst write
37540 341             |                                                             '              L R 
37540 341             |                                                             '              L S 
37540 341             |                                                             '                T 
37540 341             | 
37540 341             | w_single                   
37540 341             | w_fill_cont           
37540 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
37544 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
37548 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3754c 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
37550 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
37554 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
37558 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3755c 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
37560 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
37564 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
37568 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3756c 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
37570 34d             |                ' disable call to r_resume_burst for single longs when z=0
37570 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
37574 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
37578 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3757c 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
37580 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
37584 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
37588 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3758c 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
37590 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
37594 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
37598 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
3759c 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
375a0 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
375a4 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
375a8 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
375ac 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
375b0 35d             |         
375b0 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
375b0 35d             |             '
375b0 35d             |             '  At least one of these 3 optional components will be sent
375b0 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
375b0 35d             |             '     body - N x full longs of data
375b0 35d             |             '     trailer - last partial long of data
375b0 35d             |             '
375b0 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
375b0 35d             |             '
375b0 35d             |             'Case    Type                           Sends
375b0 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
375b0 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
375b0 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
375b0 35d             |             ' 4)     Multiple long fill             body only
375b0 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
375b0 35d             | 
375b0 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
375b0 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
375b4 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
375b8 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
375bc 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
375c0 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
375c4 362 13 8C 07 F6 |                             mov     pattern3, #%10011
375c8 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
375cc 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
375d0 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
375d4 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
375d8 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
375dc 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
375e0 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
375e4 36a             |                             
375e4 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
375e8 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
375ec 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
375f0 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
375f4 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
375f8 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
375fc 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
37600 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
37604 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
37608 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
3760c 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
37610 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
37614 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
37618 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
3761c 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
37620 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
37624 37a             | 
37624 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
37628 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
3762c 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
37630 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
37634 37e             |                  
37634 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
37638 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
3763c 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
37640 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
37644 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
37648 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3764c 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
37650 385             | 
37650 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
37654 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
37658 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3765c 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
37660 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
37664 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
37668 38b             | 
37668 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
37668 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3766c 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
37670 38d 2A B0 63 FD |                             push    addr1                   'save address
37674 38e             | 
37674 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
37674 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
37678 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
3767c 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
37680 391             |             
37680 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
37684 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
37688 393 2B B0 63 FD |                             pop     addr1                   'restore address
3768c 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
37690 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
37694 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
37698 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
3769c 398             | 
3769c 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
376a0 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
376a4 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
376a8 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
376ac 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
376b0 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
376b4 39e             | 
376b4 39e             |                             'trailer is done
376b4 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
376b8 39f             | 
376b8 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
376bc 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
376c0 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
376c4 3a2             | 
376c4 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
376c8 3a3 69 C8 63 FD |                             rev     cmdaddr                 
376cc 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
376d0 3a5 61 C8 63 FD |                             mergeb  cmdaddr
376d4 3a6             |                             
376d4 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
376d8 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
376dc 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
376e0 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
376e4 3aa             |                                                          
376e4 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
376e8 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
376ec 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
376f0 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
376f4 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
376f8 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
376fc 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
37700 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
37704 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
37708 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
3770c 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
37710 3b5             |  
37710 3b5 59 52 63 FD |                             drvh    cspin
37714 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
37718 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
3771c 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
37720 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
37724 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
37728 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3772c 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
37730 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
37734 3be EA E5 03 F6 |                             mov     d, orighubsize
37738 3bf EF E5 63 F0 |                             shl     d, a
3773c 3c0 F2 E3 83 F1 |                             sub     c, d
37740 3c1 DD E3 03 F1 |                             add     c, offset1
37744 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
37748 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3774c 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
37750 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
37754 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
37758 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3775c 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
37760 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
37764 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
37768 3cb BB D3 03 F6 |                             mov     resume, restorefill
3776c 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
37770 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
37774 3ce 6C FC BF CD |             if_c            call    #yield
37778 3cf 2D 00 64 FD |                             ret
3777c 3d0             |                            
3777c 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
3777c 3d0             |                       '     rczl    pa                      'rotate left into address offset
3777c 3d0             |                       '     rczl    c wcz                   'restore count and flags
3777c 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
37780 3d1 02 EC 67 F0 |                             shl     pa, #2
37784 3d2 28 06 64 AD |             if_z            setq    #3
37788 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
3778c 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
37790 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
37794 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
37798 3d7             | 
37798 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
3779c 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
377a0 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
377a4 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
377a8 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
377ac 3dc             |                 fit 1024-32
377ac 3dc             |         
377ac 3dc             | 
377ac 3dc             | '..................................................................................................
377ac 3dc             | 
377ac 3dc             |                 fit 1024-32
377ac 3dc 00 00 00 00 
377b0 3dd 00 00 00 00 
377b4 3de 00 00 00 00 
377b8 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
377bc 3e0             |                 org 1024-32
377bc 000             | 
377bc 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
377bc 000 00 00 00 00 |                 long $0000
377c0 001 11 11 00 00 |                 long $1111
377c4 002 22 22 00 00 |                 long $2222
377c8 003 33 33 00 00 |                 long $3333
377cc 004 44 44 00 00 |                 long $4444
377d0 005 55 55 00 00 |                 long $5555
377d4 006 66 66 00 00 |                 long $6666
377d8 007 77 77 00 00 |                 long $7777
377dc 008 88 88 00 00 |                 long $8888
377e0 009 99 99 00 00 |                 long $9999
377e4 00a AA AA 00 00 |                 long $aaaa
377e8 00b BB BB 00 00 |                 long $bbbb
377ec 00c CC CC 00 00 |                 long $cccc
377f0 00d DD DD 00 00 |                 long $dddd
377f4 00e EE EE 00 00 |                 long $eeee
377f8 00f FF FF 00 00 |                 long $ffff
377fc 010             | 
377fc 010             | 'masks
377fc 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
37800 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
37804 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
37808 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
3780c 014             | 
3780c 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
37810 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
37814 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
37818 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
3781c 018             | 
3781c 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
37820 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
37824 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
37828 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
3782c 01c             | 
3782c 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
37830 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
37834 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
37838 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
3783c 020             |         fit 1024
3783c 020             | 
3783c 020             |         fit 1024
3783c 020             | 
3783c 020             | '--------------------------------------------------------------------------------------------------
3783c 020             |         orgh
3783c                 | 
3783c                 | gfxexpansion
3783c                 |                             'simple line drawing graphics expansion of memory driver
3783c                 |                             'jmp     #donerepeats                'just return for now
3783c                 | 
3783c     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
37840     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
37844     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
37848     DD E1 03 F6 |                             mov     b, offset1              'get error term
3784c     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
37850     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
37854     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
37858     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3785c     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
37860     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
37864     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
37868     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
3786c     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
37870     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
37874     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
37878     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
3787c     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
37880     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
37884     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
37888     DC E5 33 F9 |                             getword d, total, #0            'get line width
3788c     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
37890     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
37894     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
37898     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
3789c     C3 03 80 FD |                             jmp     #readmask               'continue filling
378a0                 | 	alignl
378a0                 | _usbnew_spin2_dat_
378a0                 |                 org     $000
378a0 000             | 
378a0 000             | usb_host_start
378a0 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
378a4 001             | 
378a4 001 03 00 00 FF 
378a8 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
378ac 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
378b0 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
378b4 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
378b8 006 29 70 63 FD |                 setq2   htmp
378bc 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
378c0 008             | 
378c0 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
378c4 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
378c8 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
378cc 00b             | 
378cc 00b             | '------------------------------------------------------------------------------
378cc 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
378cc 00b             | ' special because the receiving function must not respond with either STALL or
378cc 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
378cc 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
378cc 00b             | ' corrupt packet, it must ignore the transaction
378cc 00b             | '------------------------------------------------------------------------------
378cc 00b             | ' On entry:
378cc 00b             | '   PTRA - start address of the SETUP data struct.
378cc 00b             | ' On exit:
378cc 00b             | '   retval - PID_ACK on success, otherwise error code.
378cc 00b             | '------------------------------------------------------------------------------
378cc 00b             | txn_setup
378cc 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
378d0 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
378d4 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
378d8 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
378dc 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
378e0 010             | .setup
378e0 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
378e4 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
378e8 012 2D 00 64 AD |         if_z    ret
378ec 013 7C 0B B0 FD |                 call    #retry_wait
378f0 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
378f4 015 2D 00 64 AD |         if_z    ret
378f8 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
378fc 017 E0 FF 9F FD |                 jmp     #.setup
37900 018             | 
37900 018             | '------------------------------------------------------------------------------
37900 018             | ' IN/INTERRUPT transaction.
37900 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
37900 018             | '------------------------------------------------------------------------------
37900 018             | ' On entry:
37900 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
37900 018             | '     CRC(b19..23).
37900 018             | ' On exit:
37900 018             | '------------------------------------------------------------------------------
37900 018             | txn_in
37900 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
37904 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
37908 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
3790c 01b             | 
3790c 01b             |                 ' Fall through to urx_packet
3790c 01b             | 
3790c 01b             | '------------------------------------------------------------------------------
3790c 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
3790c 01b             | ' received are handshakes and IN DATAx.
3790c 01b             | '------------------------------------------------------------------------------
3790c 01b             | ' On entry:
3790c 01b             | ' On exit:
3790c 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
3790c 01b             | '     returned.
3790c 01b             | '------------------------------------------------------------------------------
3790c 01b             | urx_packet
3790c 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
37910 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37914 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
37918 01e 1A 92 63 FD |                 getct   hct2
3791c 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
37920 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
37924 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
37928 022             | .wait_sop
37928 022 22 A7 8A FA |                 rdpin   urx, dm
3792c 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37930 024 08 00 90 CD |         if_c    jmp     #.get_pid
37934 025 FC 25 CC FB |                 jnct2   #.wait_sop
37938 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
3793c 027             | .get_pid
3793c 027 28 02 B0 FD |                 call    #urx_next
37940 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
37944 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
37948 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
3794c 02b             | .chk_pid
3794c 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37950 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
37954 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
37958 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
3795c 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
37960 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
37964 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
37968 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
3796c 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
37970 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
37974 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
37978 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
3797c 037             | .ack_resend
3797c 037 22 A7 82 FA |                 rqpin   urx, dm
37980 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
37984 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
37988 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
3798c 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
37990 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
37994 03d             | .chk_eop
37994 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37998 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
3799c 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
379a0 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
379a4 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
379a8 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
379ac 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
379b0 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
379b4 045 2D 00 64 FD |                 ret
379b8 046             | .idle
379b8 046 22 A7 82 FA |                 rqpin   urx, dm
379bc 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
379c0 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
379c4 049 2D 00 64 FD |                 ret
379c8 04a             | 
379c8 04a             | '------------------------------------------------------------------------------
379c8 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
379c8 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
379c8 04a             | ' if one is required.
379c8 04a             | '------------------------------------------------------------------------------
379c8 04a             | ' On entry:
379c8 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
379c8 04a             | ' On exit:
379c8 04a             | '------------------------------------------------------------------------------
379c8 04a             | utx_token
379c8 04a 22 A7 82 FA |                 rqpin   urx, dm
379cc 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
379d0 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
379d4 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
379d8 04e 34 0D B0 CD |         if_c    call    #utx_pre
379dc 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
379e0 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
379e4 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
379e8 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
379ec 053             | .next_byte
379ec 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
379f0 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
379f4 055             | .wait
379f4 055 40 46 72 FD |                 testp   dp                      wc
379f8 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
379fc 057 23 03 08 FC |                 akpin   dp
37a00 058 22 A5 22 FC |                 wypin   utx, dm
37a04 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
37a08 05a             | 
37a08 05a             | '------------------------------------------------------------------------------
37a08 05a             | ' SETUP/OUT/INTERRUPT transaction.
37a08 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
37a08 05a             | '------------------------------------------------------------------------------
37a08 05a             | ' On entry:
37a08 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
37a08 05a             | '     CRC(b19..23).
37a08 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
37a08 05a             | '   pkt_data - count of DATAx payload bytes to send.
37a08 05a             | ' On exit:
37a08 05a             | '------------------------------------------------------------------------------
37a08 05a             | txn_out
37a08 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
37a0c 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
37a10 05c 00 00 C0 FF 
37a14 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
37a18 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
37a1c 05f             | 
37a1c 05f             |                 ' Fall through to utx_data
37a1c 05f             | 
37a1c 05f             | '------------------------------------------------------------------------------
37a1c 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
37a1c 05f             | ' calculated while the data byte is being shifted out. Since data stage
37a1c 05f             | ' success/fail is not determined until the status stage of the transaction,
37a1c 05f             | ' this routine is only concerned about the current DATAx packet.
37a1c 05f             | '------------------------------------------------------------------------------
37a1c 05f             | ' On entry:
37a1c 05f             | '   PTRA - hub start address of the data to read.
37a1c 05f             | '   pkt_cnt - data payload size.
37a1c 05f             | ' On exit:
37a1c 05f             | '------------------------------------------------------------------------------
37a1c 05f             | utx_data
37a1c 05f 22 A7 82 FA |                 rqpin   urx, dm
37a20 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37a24 061 F4 FF 9F CD |         if_c    jmp     #utx_data
37a28 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
37a2c 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
37a30 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
37a34 065 D8 0C B0 CD |         if_c    call    #utx_pre
37a38 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
37a3c 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
37a40 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
37a44 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
37a48 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
37a4c 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
37a50 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
37a54 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
37a58 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
37a5c 06f             | .read_byte
37a5c 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
37a60 070 F0 00 B0 FD |                 call    #utx_byte
37a64 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
37a68 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
37a6c 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
37a70 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
37a74 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
37a78 076             | .send_crc
37a78 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
37a7c 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
37a80 078 D0 00 B0 FD |                 call    #utx_byte
37a84 079 5D A5 EA F8 |                 getbyte utx, crc, #1
37a88 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
37a8c 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
37a90 07c             | 
37a90 07c             | '------------------------------------------------------------------------------
37a90 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
37a90 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
37a90 07c             | ' expects that the packet includes at least the CRC word.
37a90 07c             | '
37a90 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
37a90 07c             | ' was requested, which makes it difficult to determine where the data stops
37a90 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
37a90 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
37a90 07c             | ' USB-16 expected residual value of 0xB001.
37a90 07c             | '
37a90 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
37a90 07c             | ' so the caller can verify IN success before writing the data to its final
37a90 07c             | ' destination.
37a90 07c             | '------------------------------------------------------------------------------
37a90 07c             | ' On entry:
37a90 07c             | '   pkt_data - max byte count expected to be in the packet.
37a90 07c             | '   newb_flg - signals new byte ready when toggled.
37a90 07c             | ' On exit:
37a90 07c             | '   pkt_cnt - actual number of bytes read.
37a90 07c             | '------------------------------------------------------------------------------
37a90 07c             | urx_data
37a90 07c F7 75 03 F6 |                 mov     htmp2, pb
37a94 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
37a98 07e 00 00 C0 FF 
37a9c 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
37aa0 080 BA EF 03 F6 |                 mov     pb, htmp2
37aa4 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
37aa8 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
37aac 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
37ab0 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
37ab4 085             | .wait_byte
37ab4 085             | ' In-line rx for max speed
37ab4 085 22 A7 82 FA |                 rqpin   urx, dm
37ab8 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
37abc 087 53 A5 02 F5 |                 and     utx, urx
37ac0 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
37ac4 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
37ac8 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
37acc 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
37ad0 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
37ad4 08d DC FF 9F FD |                 jmp     #.wait_byte
37ad8 08e             | .get_byte
37ad8 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
37adc 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
37ae0 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
37ae4 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
37ae8 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
37aec 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
37af0 094             | .end_crc
37af0 094 01 B8 06 F1 |                 add     pkt_cnt, #1
37af4 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
37af8 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
37afc 097 2D 00 64 1D |         if_a    ret
37b00 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
37b00 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
37b00 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
37b00 098             | ' to miss it, so cheat a bit and look for SOP clear here.
37b00 098 22 A7 82 FA |                 rqpin   urx, dm
37b04 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
37b08 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
37b0c 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
37b0c 09b             | .chk_crc
37b0c 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
37b10 09c 58 00 00 FF 
37b14 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
37b18 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
37b1c 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
37b20 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
37b24 0a1 34 09 B0 FD |                 call    #poll_waitx
37b28 0a2             | 
37b28 0a2             |                 ' Fall through to utx_handshake
37b28 0a2             | 
37b28 0a2             | '------------------------------------------------------------------------------
37b28 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
37b28 0a2             | ' the appropriate IP delay has been inserted.
37b28 0a2             | '------------------------------------------------------------------------------
37b28 0a2             | ' On entry:
37b28 0a2             | '   retval - handshake PID to send.
37b28 0a2             | ' On exit:
37b28 0a2             | '   retval unchanged.
37b28 0a2             | '------------------------------------------------------------------------------
37b28 0a2             | utx_handshake
37b28 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
37b2c 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
37b30 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
37b34 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
37b38 0a6 5F A5 02 F6 |                 mov     utx, retval
37b3c 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
37b40 0a8             | .idle
37b40 0a8 22 A7 82 FA |                 rqpin   urx, dm
37b44 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37b48 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
37b4c 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
37b50 0ac 08 09 90 FD |                 jmp     #poll_waitx
37b54 0ad             | 
37b54 0ad             | '------------------------------------------------------------------------------
37b54 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
37b54 0ad             | '------------------------------------------------------------------------------
37b54 0ad             | ' On entry:
37b54 0ad             | '   utx - byte to transmit.
37b54 0ad             | ' On exit:
37b54 0ad             | '------------------------------------------------------------------------------
37b54 0ad             | utx_byte
37b54 0ad 40 46 72 FD |                 testp   dp                      wc
37b58 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
37b5c 0af 23 03 08 FC |                 akpin   dp
37b60 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
37b64 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
37b68 0b2             | 
37b68 0b2             | '------------------------------------------------------------------------------
37b68 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
37b68 0b2             | '------------------------------------------------------------------------------
37b68 0b2             | ' On entry:
37b68 0b2             | ' On exit:
37b68 0b2             | '   retval - the byte read.
37b68 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
37b68 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
37b68 0b2             | '     received.
37b68 0b2             | '------------------------------------------------------------------------------
37b68 0b2             | urx_next
37b68 0b2 22 A7 8A FA |                 rdpin   urx, dm
37b6c 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
37b70 0b4 53 A5 02 F5 |                 and     utx, urx
37b74 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
37b78 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
37b7c 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
37b80 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
37b84 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37b88 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
37b8c 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
37b90 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
37b94 0bd 2D 00 64 FD |                 ret
37b98 0be             | 
37b98 0be             | '------------------------------------------------------------------------------
37b98 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
37b98 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
37b98 0be             | ' length, and the PID is not included in the CRC calculation:
37b98 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
37b98 0be             | '  CRC5  ENDP ADDRESS PID
37b98 0be             | ' %00000_1111_1111111_xxxxxxxx
37b98 0be             | '------------------------------------------------------------------------------
37b98 0be             | ' On entry:
37b98 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
37b98 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
37b98 0be             | ' On exit:
37b98 0be             | '   ep_addr_pid - CRC value appended to the packet.
37b98 0be             | '------------------------------------------------------------------------------
37b98 0be             | calc_crc5
37b98 0be FF 03 00 FF 
37b9c 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
37ba0 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
37ba4 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
37ba8 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
37bac 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
37bb0 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
37bb4 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
37bb8 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
37bbc 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
37bc0 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
37bc4 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
37bc8 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
37bcc 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
37bd0 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
37bd4 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
37bd8 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
37bdc 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
37be0 0d0             | 
37be0 0d0             | '------------------------------------------------------------------------------
37be0 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
37be0 0d0             | '------------------------------------------------------------------------------
37be0 0d0             | isr1_fsframe
37be0 0d0 1A 92 62 FD |                 getct   iframe_ct_base
37be4 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37be8 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37bec 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
37bf0 0d4             | .wait
37bf0 0d4 40 46 72 FD |                 testp   dp                      wc
37bf4 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
37bf8 0d6 23 03 08 FC |                 akpin   dp
37bfc 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
37c00 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
37c04 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
37c08 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
37c0c 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
37c10 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
37c14 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
37c18 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
37c1c 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
37c20 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
37c24 0e1 2C FF BF FD |                 call    #utx_byte
37c28 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
37c2c 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
37c30 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
37c34 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
37c38 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
37c3c 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
37c40 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
37c44 0e9 5B A5 42 F5 |                 or      utx, icrc
37c48 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
37c4c 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
37c50 0ec 20 00 90 FD |                 jmp     #isr1_wait
37c54 0ed             | isr1_lsframe
37c54 0ed 1A 92 62 FD |                 getct   iframe_ct_base
37c58 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37c5c 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37c60 0f0             | .wait
37c60 0f0 40 46 72 FD |                 testp   dp                      wc
37c64 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
37c68 0f2 23 03 08 FC |                 akpin   dp
37c6c 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
37c70 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
37c74 0f5             | isr1_wait
37c74 0f5 22 A5 82 FA |                 rqpin   utx, dm
37c78 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
37c7c 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
37c80 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
37c84 0f9 03 00 00 FF 
37c88 0fa FF B3 06 F5 |                 and     frame, ##$7ff
37c8c 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
37c90 0fc F5 FF 3B FB |                 reti1
37c94 0fd             | 
37c94 0fd             | '------------------------------------------------------------------------------
37c94 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
37c94 0fd             | ' transaction will complete before the next frame is triggered.
37c94 0fd             | '------------------------------------------------------------------------------
37c94 0fd             | ' On entry:
37c94 0fd             | ' On exit:
37c94 0fd             | '------------------------------------------------------------------------------
37c94 0fd             | wait_txn_ok
37c94 0fd 1A 74 63 FD |                 getct   htmp2
37c98 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
37c9c 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37ca0 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
37ca4 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
37ca8 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
37cac 103 2D 00 64 FD |                 ret
37cb0 104             | 
37cb0 104             | '------------------------------------------------------------------------------
37cb0 104             | ' A device connection was detected, or a bus reset was requested by the USB
37cb0 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
37cb0 104             | ' and perform a reset sequence prior to device enumeration.
37cb0 104             | '------------------------------------------------------------------------------
37cb0 104             | dev_reset
37cb0 104 22 A7 82 FA |                 rqpin   urx, dm
37cb4 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
37cb8 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
37cbc 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
37cc0 108             | reset
37cc0 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
37cc4 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
37cc8 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
37ccc 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
37cd0 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
37cd4 10d 1A 92 62 FD |                 getct   iframe_ct_base
37cd8 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37cdc 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37ce0 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
37ce4 111 24 70 07 F1 |                 add     htmp, #36
37ce8 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
37cec 113             | .framewait
37cec 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
37cf0 114 F8 FF 9F CD |         if_b    jmp     #.framewait
37cf4 115 2D 00 64 FD |                 ret
37cf8 116             | 
37cf8 116             | '------------------------------------------------------------------------------
37cf8 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
37cf8 116             | '------------------------------------------------------------------------------
37cf8 116             | ' On entry:
37cf8 116             | '   PTRA - source address.
37cf8 116             | '   PB - destination address.
37cf8 116             | '   hr0 - length of copy, in bytes.
37cf8 116             | ' On exit:
37cf8 116             | '------------------------------------------------------------------------------
37cf8 116             | hmemcpy
37cf8 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
37cfc 117 F7 71 43 FC |                 wrbyte  htmp, pb
37d00 118 01 EE 07 F1 |                 add     pb, #1
37d04 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
37d08 11a             | 
37d08 11a             | '------------------------------------------------------------------------------
37d08 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
37d08 11a             | ' loop until the errant device is disconnected.
37d08 11a             | '------------------------------------------------------------------------------
37d08 11a             | ' On entry:
37d08 11a             | ' On exit:
37d08 11a             | '------------------------------------------------------------------------------
37d08 11a             | host_error
37d08 11a             |           if ERROR_LED >= 0
37d08 11a             |           end
37d08 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
37d0c 11b             | 
37d0c 11b             | '------------------------------------------------------------------------------
37d0c 11b             | ' Get HID descriptor buffer for current port
37d0c 11b             | '------------------------------------------------------------------------------
37d0c 11b             | ' On entry:
37d0c 11b             | ' On exit:
37d0c 11b             | '   PB - HID descriptor buffer pointer
37d0c 11b             | '------------------------------------------------------------------------------
37d0c 11b             | get_hid_descr_buffer
37d0c 11b 2D EF 03 F6 |                 mov     pb, hdev_port
37d10 11c 01 EE E7 F2 |                 cmpsub  pb, #1
37d14 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
37d18 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
37d1c 11f             | 
37d1c 11f             | 
37d1c 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
37d20 120             | 
37d20 120             | ' USB commands and error codes
37d20 120 00 00 00 00 | cmd_data        long    0
37d24 121 00 00 00 00 | usb_err_code    long    ERR_NONE
37d28 122             | 
37d28 122             | ' Parameters block assigned at cog startup
37d28 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
37d2c 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
37d30 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
37d34 125             | if ACTIVITY_LED >= 0
37d34 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
37d34 125             | end
37d34 125             | if ERROR_LED >= 0
37d34 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
37d34 125             | end
37d34 125 00 00 00 00 | hid_descr_p     long    0
37d38 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
37d38 126             | 'hkbd_report_p   long    0
37d38 126 00 00 00 00 | hub_descr_p     long    0
37d3c 127 00 00 00 00 | urx_buff_p      long    0
37d40 128 00 00 00 00 | dev_desc_buff_p long    0
37d44 129 00 00 00 00 | con_desc_buff_p long    0
37d48 12a 00 00 00 00 | cache_start_p   long    0
37d4c 12b 00 00 00 00 | cache_end_p     long    0
37d50 12c             | if EMUPAD_MAX_PLAYER > 0
37d50 12c             | emupad_out_ptr  long    0
37d50 12c             | end
37d50 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
37d54 12d             | 
37d54 12d             | hdev_init_start
37d54 12d             | hdev_port       res     1
37d54 12d             | hdev_port       res     1
37d54 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
37d54 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
37d54 12d             | kbm_next_datax  res     1
37d54 12d             | kbm_next_datax  res     1
37d54 12d             | hub_intf_num    res     1
37d54 12d             | hub_intf_num    res     1
37d54 12d             | hub_next_datax  res     1
37d54 12d             | hub_next_datax  res     1
37d54 12d             | hub_status_chg  res     1
37d54 12d             | hub_status_chg  res     1
37d54 12d             | hub_port_status res     1
37d54 12d             | hub_port_status res     1
37d54 12d             | if HAVE_MOUSE
37d54 12d             | ms_intf_num     res     1
37d54 12d             | ms_intf_num     res     1
37d54 12d             | ms_in_max_pkt   res     1
37d54 12d             | ms_in_max_pkt   res     1
37d54 12d             | end
37d54 12d             | kb_intf_num     res     1
37d54 12d             | kb_intf_num     res     1
37d54 12d             | kb_interval     res     1
37d54 12d             | kb_interval     res     1
37d54 12d             | kb_in_max_pkt   res     1
37d54 12d             | kb_in_max_pkt   res     1
37d54 12d             | kb_max_index    res     1
37d54 12d             | kb_max_index    res     1
37d54 12d             | kb_led_states   res     1
37d54 12d             | kb_led_states   res     1
37d54 12d             | gp_intf_num     res     1
37d54 12d             | gp_intf_num     res     1
37d54 12d             | gp_interval     res     1
37d54 12d             | gp_interval     res     1
37d54 12d             | gp_max_index    res     1
37d54 12d             | gp_max_index    res     1
37d54 12d             | gp_descr_len    res     1+MAX_DEVICES
37d54 12d             | gp_descr_len    res     1+MAX_DEVICES
37d54 12d             | hdev_init_end
37d54 12d             | 
37d54 12d             | ' Initialized at cog startup:
37d54 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
37d54 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
37d54 12d             | iframe_ct_new   res     1
37d54 12d             | iframe_ct_new   res     1
37d54 12d             | iframe_ct_base  res     1
37d54 12d             | iframe_ct_base  res     1
37d54 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
37d54 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
37d54 12d             | 
37d54 12d             | ' This register block is reset to zero when a USB device connects
37d54 12d             | hreg_init_start
37d54 12d             | hstatus         res     1         ' Host status flags
37d54 12d             | hstatus         res     1         ' Host status flags
37d54 12d             | hctwait         res     1         ' Poll-based wait clocks
37d54 12d             | hctwait         res     1         ' Poll-based wait clocks
37d54 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
37d54 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
37d54 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
37d54 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
37d54 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
37d54 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
37d54 12d             | xfer_retry      res     1         ' Control transfer retry count
37d54 12d             | xfer_retry      res     1         ' Control transfer retry count
37d54 12d             | retry           res     1         ' Transaction retry count
37d54 12d             | retry           res     1         ' Transaction retry count
37d54 12d             | utx             res     1         ' Byte to transmit on USB
37d54 12d             | utx             res     1         ' Byte to transmit on USB
37d54 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
37d54 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
37d54 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
37d54 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
37d54 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
37d54 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
37d54 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
37d54 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
37d54 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
37d54 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
37d54 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
37d54 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
37d54 12d             | frame           res     1         ' USB 1ms frame counter value
37d54 12d             | frame           res     1         ' USB 1ms frame counter value
37d54 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
37d54 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
37d54 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
37d54 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
37d54 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
37d54 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
37d54 12d             | crc             res     1         ' Used for CRC16 calculation
37d54 12d             | crc             res     1         ' Used for CRC16 calculation
37d54 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
37d54 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
37d54 12d             | retval          res     1         ' Global success/fail return parameter
37d54 12d             | retval          res     1         ' Global success/fail return parameter
37d54 12d             | context_retval  res     1         ' Operation contextual return parameter
37d54 12d             | context_retval  res     1         ' Operation contextual return parameter
37d54 12d             | ' Device stuff
37d54 12d             | hdev_id         res     1+MAX_DEVICES
37d54 12d             | hdev_id         res     1+MAX_DEVICES
37d54 12d             | hdev_bcd        res     1
37d54 12d             | hdev_bcd        res     1
37d54 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
37d54 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
37d54 12d             | ' Keyboard/mouse stuff
37d54 12d             | hctrl_ep_addr   res     1
37d54 12d             | hctrl_ep_addr   res     1
37d54 12d             | hctrl_max_pkt   res     1
37d54 12d             | hctrl_max_pkt   res     1
37d54 12d             | hconfig_base    res     1
37d54 12d             | hconfig_base    res     1
37d54 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
37d54 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
37d54 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
37d54 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
37d54 12d             | hdev_class      res     1
37d54 12d             | hdev_class      res     1
37d54 12d             | hdev_subclass   res     1
37d54 12d             | hdev_subclass   res     1
37d54 12d             | hdev_protocol   res     1
37d54 12d             | hdev_protocol   res     1
37d54 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
37d54 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
37d54 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
37d54 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
37d54 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
37d54 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
37d54 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
37d54 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
37d54 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
37d54 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
37d54 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
37d54 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
37d54 12d             | if HAVE_MOUSE
37d54 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
37d54 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
37d54 12d             | end
37d54 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
37d54 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
37d54 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
37d54 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
37d54 12d             | hdev_ep_addr    res     1+MAX_DEVICES
37d54 12d             | hdev_ep_addr    res     1+MAX_DEVICES
37d54 12d             | hdev_out_addr   res     1
37d54 12d             | hdev_out_addr   res     1
37d54 12d             | 
37d54 12d             | if EMUPAD_MAX_PLAYER > 0
37d54 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
37d54 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
37d54 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
37d54 12d             | end
37d54 12d             | 
37d54 12d             | hreg_init_end
37d54 12d             | 
37d54 12d             | hidr_start
37d54 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
37d54 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
37d54 12d             | hidr_flags      res     1
37d54 12d             | hidr_flags      res     1
37d54 12d             | hidr_axis       res     3
37d54 12d             | hidr_axis       res     3
37d54 12d             | hidr_buttons    res     1
37d54 12d             | hidr_buttons    res     1
37d54 12d             | hidr_hats       res     1
37d54 12d             | hidr_hats       res     1
37d54 12d             | '' Above are actually useful values, 6 longs
37d54 12d             | hidr_id         res     1
37d54 12d             | hidr_id         res     1
37d54 12d             | hidr_state      res     1
37d54 12d             | hidr_state      res     1
37d54 12d             | hidr_size       res     1
37d54 12d             | hidr_size       res     1
37d54 12d             | hidr_count      res     1
37d54 12d             | hidr_count      res     1
37d54 12d             | hidr_offset     res     1
37d54 12d             | hidr_offset     res     1
37d54 12d             | hidr_usage_idx  res     1
37d54 12d             | hidr_usage_idx  res     1
37d54 12d             | hidr_lminmax    res     1
37d54 12d             | hidr_lminmax    res     1
37d54 12d             | hidr_pminmax    res     1
37d54 12d             | hidr_pminmax    res     1
37d54 12d             | hidr_type       res     1
37d54 12d             | hidr_type       res     1
37d54 12d             | hidr_end
37d54 12d             | 
37d54 12d             | ' Variables dependent on the system freqency
37d54 12d             | _var_64_lower_  res     1
37d54 12d             | _var_64_lower_  res     1
37d54 12d             | _var_64_upper_  res     1
37d54 12d             | _var_64_upper_  res     1
37d54 12d             | _12Mbps_        res     1
37d54 12d             | _12Mbps_        res     1
37d54 12d             | _1_5Mbps_       res     1
37d54 12d             | _1_5Mbps_       res     1
37d54 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
37d54 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
37d54 12d             | _1us_           res     1         ' 1us
37d54 12d             | _1us_           res     1         ' 1us
37d54 12d             | _10us_          res     1         ' 10us
37d54 12d             | _10us_          res     1         ' 10us
37d54 12d             | _33us_          res     1         ' 33us
37d54 12d             | _33us_          res     1         ' 33us
37d54 12d             | _txn_err_       res     1         ' 250us
37d54 12d             | _txn_err_       res     1         ' 250us
37d54 12d             | _500us_         res     1         ' 500us
37d54 12d             | _500us_         res     1         ' 500us
37d54 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
37d54 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
37d54 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
37d54 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
37d54 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
37d54 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
37d54 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
37d54 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
37d54 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
37d54 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
37d54 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
37d54 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
37d54 12d             | _preamble_wait_ res     1
37d54 12d             | _preamble_wait_ res     1
37d54 12d             | _1ms_           res     1         ' 1ms
37d54 12d             | _1ms_           res     1         ' 1ms
37d54 12d             | _2ms_           res     1         ' 2ms
37d54 12d             | _2ms_           res     1         ' 2ms
37d54 12d             | _suspend_wait_  res     1         ' 3ms
37d54 12d             | _suspend_wait_  res     1         ' 3ms
37d54 12d             | _4ms_           res     1         ' 4ms
37d54 12d             | _4ms_           res     1         ' 4ms
37d54 12d             | _xfer_wait_     res     1         ' 5ms
37d54 12d             | _xfer_wait_     res     1         ' 5ms
37d54 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
37d54 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
37d54 12d             | _reset_hold_    res     1         ' 15ms
37d54 12d             | _reset_hold_    res     1         ' 15ms
37d54 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
37d54 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
37d54 12d             | _21ms_          res     1         ' 21ms
37d54 12d             | _21ms_          res     1         ' 21ms
37d54 12d             | _100ms_         res     1         ' 100ms
37d54 12d             | _100ms_         res     1         ' 100ms
37d54 12d             | _500ms_         res     1         ' 500ms
37d54 12d             | _500ms_         res     1         ' 500ms
37d54 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
37d54 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
37d54 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
37d54 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
37d54 12d             | '------------------------------------------------------------------------------
37d54 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
37d54 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
37d54 12d             | _usb_d_ls_nco_  res     1
37d54 12d             | _usb_d_ls_nco_  res     1
37d54 12d             | _usb_h_fs_nco_  res     1
37d54 12d             | _usb_h_fs_nco_  res     1
37d54 12d             | _usb_d_fs_nco_  res     1
37d54 12d             | _usb_d_fs_nco_  res     1
37d54 12d             | '------------------------------------------------------------------------------
37d54 12d             | ' Scratch registers
37d54 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
37d54 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
37d54 12d             | htmp1           res     1
37d54 12d             | htmp1           res     1
37d54 12d             | htmp2           res     1
37d54 12d             | htmp2           res     1
37d54 12d             | htmp3           res     1
37d54 12d             | htmp3           res     1
37d54 12d             | hrep            res     1         ' Repeat count
37d54 12d             | hrep            res     1         ' Repeat count
37d54 12d             | hsave0          res     1         ' Subroutine parameter saves
37d54 12d             | hsave0          res     1         ' Subroutine parameter saves
37d54 12d             | hsave1          res     1
37d54 12d             | hsave1          res     1
37d54 12d             | hsave2          res     1
37d54 12d             | hsave2          res     1
37d54 12d             | isrtmp1         res     1
37d54 12d             | isrtmp1         res     1
37d54 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
37d54 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
37d54 12d             | hr0             res     1         ' Multi-purpose registers
37d54 12d             | hr0             res     1         ' Multi-purpose registers
37d54 12d             | hr1             res     1
37d54 12d             | hr1             res     1
37d54 12d             | hr2             res     1
37d54 12d             | hr2             res     1
37d54 12d             | hr3             res     1
37d54 12d             | hr3             res     1
37d54 12d             | hpar1           res     1         ' Routine entry/exit parameters
37d54 12d             | hpar1           res     1         ' Routine entry/exit parameters
37d54 12d             | hpar2           res     1
37d54 12d             | hpar2           res     1
37d54 12d             | hpar3           res     1
37d54 12d             | hpar3           res     1
37d54 12d             | hct2            res     1         ' Function response bus turn-around timer
37d54 12d             | hct2            res     1         ' Function response bus turn-around timer
37d54 12d             | hct3            res     1         ' Keyboard/mouse poll timer
37d54 12d             | hct3            res     1         ' Keyboard/mouse poll timer
37d54 12d             | mod_cnt         res     1         ' Used in idle loops
37d54 12d             | mod_cnt         res     1         ' Used in idle loops
37d54 12d             |                 fit     $1F0
37d54 12d             |                 org     $200
37d54 200             | hlut_start
37d54 200             | 
37d54 200             | '------------------------------------------------------------------------------
37d54 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
37d54 200             | ' settings to startup defaults.
37d54 200             | '------------------------------------------------------------------------------
37d54 200             | ' On entry:
37d54 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
37d54 200             | '------------------------------------------------------------------------------
37d54 200             | set_speed_full
37d54 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
37d58 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
37d5c 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
37d60 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
37d64 204             | '                ret                             wcz     ' Restore caller flags on exit
37d64 204             | 
37d64 204             | '------------------------------------------------------------------------------
37d64 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
37d64 204             | ' is a downstream hub connected (not yet implemented), the baud generator
37d64 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
37d64 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
37d64 204             | ' putting the smart pins into reset.
37d64 204             | '------------------------------------------------------------------------------
37d64 204             | ' On entry:
37d64 204             | ' On exit: CZ flags restored to caller states
37d64 204             | '------------------------------------------------------------------------------
37d64 204             | set_speed_low
37d64 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
37d68 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
37d6c 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
37d70 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
37d74 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
37d78 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
37d7c 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
37d80 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
37d84 20c             | 
37d84 20c             | '------------------------------------------------------------------------------
37d84 20c             | ' Perform configuration stuff required when a device intitially connects.
37d84 20c             | '------------------------------------------------------------------------------
37d84 20c             | ' On entry:
37d84 20c             | ' On exit:
37d84 20c             | '------------------------------------------------------------------------------
37d84 20c             | on_connect
37d84 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
37d88 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
37d8c 20e             | .retry
37d8c 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37d90 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
37d94 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
37d98 211 00 08 00 FF 
37d9c 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
37da0 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
37da4 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37da8 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
37dac 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
37db0 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
37db4 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37db8 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
37dbc 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
37dc0 21b 4C 03 B0 FD |                 call    #poll_waitx
37dc4 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
37dc8 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
37dcc 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
37dd0 21f B8 FF 9F FD |                 jmp     #.retry
37dd4 220             | .get_dev_desc
37dd4 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
37dd8 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
37ddc 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
37de0 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
37de4 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
37de8 225 88 FB BF FD |                 call    #reset
37dec 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
37df0 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37df4 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
37df8 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
37dfc 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37e00 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
37e04 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
37e08 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
37e0c 22e 04 00 00 FF 
37e10 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
37e14 230 34 FA BF FD |                 call    #calc_crc5
37e18 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
37e1c 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37e20 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
37e24 234 F7 AD C2 FA |                 rdbyte  total_data, pb
37e28 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
37e2c 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
37e30 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37e34 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
37e38 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
37e3c 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
37e40 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
37e44 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
37e48 23d C4 02 B0 FD |                 call    #poll_waitx
37e4c 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
37e50 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37e54 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
37e58 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
37e5c 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
37e60 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37e64 244 2D 00 64 5D |         if_nz   ret
37e68 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
37e6c 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
37e70 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
37e74 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
37e78 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
37e7c 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
37e80 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
37e84 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
37e88 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
37e8c 24e 2C FB 9F CD |         if_b    jmp     #host_error
37e90 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
37e94 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
37e98 251 2D EC 63 FD |                 call    pa
37e9c 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
37ea0 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
37ea4 254 2C EC 63 FD |                 jmp     pa
37ea8 255             | 
37ea8 255             | '------------------------------------------------------------------------------
37ea8 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
37ea8 255             | ' Status reporting is always in the function-to-host direction.
37ea8 255             | '------------------------------------------------------------------------------
37ea8 255             | ' On entry:
37ea8 255             | '   PTRA - start address of the SETUP data in hub.
37ea8 255             | '   PB - start address of the buffer/struct to be written to during the IN data
37ea8 255             | '     stage.
37ea8 255             | '   ep_addr_pid - device address, endpoint and CRC5.
37ea8 255             | ' On exit:
37ea8 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
37ea8 255             | '     contains the count of data stage bytes actually received, which must
37ea8 255             | '     always be <= the count requested.
37ea8 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
37ea8 255             | '     more specific USB operation error code.
37ea8 255             | '------------------------------------------------------------------------------
37ea8 255             | control_read
37ea8 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
37eac 256 F8 8F 03 F6 |                 mov     hpar2, ptra
37eb0 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
37eb4 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
37eb8 259             | .xfer_start
37eb8 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
37ebc 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
37ec0 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37ec4 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
37ec8 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
37ecc 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
37ed0 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
37ed4 260 61 00 00 FF 
37ed8 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
37edc 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
37ee0 263             | .data
37ee0 263 56 B1 02 F6 |                 mov     pkt_data, total_data
37ee4 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
37ee8 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
37eec 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
37ef0 267             | .nak_retry
37ef0 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
37ef4 268             | .in_retry
37ef4 268 BC F6 BF FD |                 call    #txn_in
37ef8 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
37efc 26a 28 00 90 AD |         if_z    jmp     #.commit
37f00 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
37f04 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
37f08 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
37f0c 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
37f10 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
37f14 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
37f18 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
37f1c 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
37f20 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
37f24 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
37f28 275             | .commit
37f28 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
37f2c 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
37f30 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
37f34 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
37f38 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
37f3c 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
37f40 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
37f44 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
37f48 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
37f4c 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
37f50 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
37f54 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
37f58 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
37f5c 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
37f60 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
37f64 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
37f68 285             | .pre_status
37f68 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
37f6c 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
37f70 287 00 B0 06 F6 |                 mov     pkt_data, #0
37f74 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
37f78 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
37f7c 28a 61 00 00 FF 
37f80 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
37f84 28c             | .out_retry
37f84 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
37f88 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37f8c 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
37f90 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
37f94 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
37f98 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
37f9c 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
37fa0 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
37fa4 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
37fa8 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
37fac 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
37fb0 297             | ' I've encountered transfer STALL, even though the data looks correct, and
37fb0 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
37fb0 297             | ' ControlRead() transfer gets things unstuck most of the time...
37fb0 297             | .xfer_retry
37fb0 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
37fb4 298 58 01 B0 FD |                 call    #poll_waitx
37fb8 299 8C F9 BF FD |                 call    #wait_txn_ok
37fbc 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
37fc0 29b C7 F1 03 F6 |                 mov     ptra, hpar2
37fc4 29c C8 EF 03 F6 |                 mov     pb, hpar3
37fc8 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
37fcc 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
37fd0 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
37fd4 2a0             | 
37fd4 2a0             | '------------------------------------------------------------------------------
37fd4 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
37fd4 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
37fd4 2a0             | ' the SETUP data struct is filled with the required values.
37fd4 2a0             | '------------------------------------------------------------------------------
37fd4 2a0             | ' On entry:
37fd4 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
37fd4 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
37fd4 2a0             | '     stage.
37fd4 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
37fd4 2a0             | ' On exit:
37fd4 2a0             | '   retval - used to convey the success/failure of each stage.
37fd4 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
37fd4 2a0             | '     more specific USB operation error code.
37fd4 2a0             | '------------------------------------------------------------------------------
37fd4 2a0             | control_write
37fd4 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
37fd8 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
37fdc 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
37fe0 2a3             | 
37fe0 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
37fe4 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
37fe8 2a5 F7 91 03 F6 |                 mov     hpar3, pb
37fec 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
37ff0 2a7             | .xfer_start
37ff0 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
37ff4 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
37ff8 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
37ffc 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38000 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
38004 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
38008 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3800c 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
38010 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
38014 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
38018 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3801c 2b2             | .data
3801c 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
38020 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
38024 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
38028 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
3802c 2b6             | .out_retry
3802c 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
38030 2b7 88 F6 BF FD |                 call    #txn_out
38034 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38038 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
3803c 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
38040 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
38044 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
38048 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
3804c 2be             | .commit
3804c 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
38050 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
38054 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
38058 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3805c 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
38060 2c3             | pre_status_in
38060 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
38064 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
38068 2c5             | .status_retry
38068 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
3806c 2c6 44 F5 BF FD |                 call    #txn_in
38070 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
38074 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
38078 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
3807c 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
38080 2cb 2D 00 64 AD |         if_z    ret
38084 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
38088 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3808c 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
38090 2cf             | '               ret                                     ' Caller must handle transfer retirement
38090 2cf             | 
38090 2cf             | '------------------------------------------------------------------------------
38090 2cf             | ' Execute an IN interrupt transaction.
38090 2cf             | '------------------------------------------------------------------------------
38090 2cf             | ' On entry:
38090 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
38090 2cf             | '   hpar2 - Address of the IN data buffer
38090 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
38090 2cf             | ' On exit:
38090 2cf             | '   retval - the result of the operation.
38090 2cf             | '   hpar3 - the count of IN data bytes actually received.
38090 2cf             | '------------------------------------------------------------------------------
38090 2cf             | do_int_in
38090 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
38094 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
38098 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3809c 2d2             | 
3809c 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
380a0 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
380a4 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
380a8 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
380ac 2d6             | .retry
380ac 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
380b0 2d7 00 F5 BF FD |                 call    #txn_in
380b4 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
380b8 2d9 1C 00 90 AD |         if_z    jmp     #.commit
380bc 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
380c0 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
380c4 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
380c8 2dd 54 00 B0 FD |                 call    #retry_wait
380cc 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
380d0 2df 18 00 90 AD |         if_z    jmp     #.post_ret
380d4 2e0 D4 FF 9F FD |                 jmp     #.retry
380d8 2e1             | .commit
380d8 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
380dc 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
380e0 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
380e4 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
380e8 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
380ec 2e6             | .post_ret
380ec 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
380f0 2e7             | 
380f0 2e7             | 
380f0 2e7             | '------------------------------------------------------------------------------
380f0 2e7             | ' Resets the downstream hub port to FS
380f0 2e7             | '------------------------------------------------------------------------------
380f0 2e7             | dwnstream_reset
380f0 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
380f4 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
380f8 2e9             | 
380f8 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
380fc 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
38100 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
38104 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
38108 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3810c 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
38110 2ef             | 
38110 2ef             | '------------------------------------------------------------------------------
38110 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
38110 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
38110 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
38110 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
38110 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
38110 2ef             | '------------------------------------------------------------------------------
38110 2ef             | ' On entry:
38110 2ef             | '   hctwait - wait interval in sysclocks.
38110 2ef             | ' On exit:
38110 2ef             | '------------------------------------------------------------------------------
38110 2ef             | poll_waitx
38110 2ef 1A 92 63 FD |                 getct   hct2
38114 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
38118 2f1             | .wait
38118 2f1 FF 25 CC FB |                 jnct2   #.wait
3811c 2f2 2D 00 64 FD |                 ret
38120 2f3             | 
38120 2f3             | '------------------------------------------------------------------------------
38120 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
38120 2f3             | '------------------------------------------------------------------------------
38120 2f3             | ' On entry:
38120 2f3             | '   retval - transaction response PID or error code.
38120 2f3             | ' On exit:
38120 2f3             | '------------------------------------------------------------------------------
38120 2f3             | retry_wait
38120 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
38124 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
38128 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3812c 2f6 14 00 90 AD |         if_z    jmp     #.nak
38130 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
38134 2f8 D8 FF BF FD |                 call    #poll_waitx
38138 2f9             | .dec
38138 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
3813c 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
38140 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
38144 2fc             | .nak
38144 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
38148 2fd C4 FF BF FD |                 call    #poll_waitx
3814c 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
38150 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
38154 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
38158 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
3815c 302 2D 00 64 FD |                 ret
38160 303             | 
38160 303             | host_reset
38160 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
38164 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
38168 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
38168 305 BD 01 05 FF 
3816c 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
38170 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
38174 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
38178 309             | ' Check to see if the system clock has been changed.
38178 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3817c 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
38180 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
38184 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
38188 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3818c 30e 40 46 62 FD |                 dirl    dp
38190 30f             | 
38190 30f 28 02 64 FD |                 setq    #1
38194 310 80 00 80 FF 
38198 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3819c 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
381a0 313             | .enable
381a0 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
381a4 314 41 46 62 FD |                 dirh    dp
381a8 315 1F 36 63 FD |                 waitx   _1us_
381ac 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
381b0 317             | 
381b0 317             |                 ' Handle Port protection enable and startup delay
381b0 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
381b4 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
381b8 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
381bc 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
381c0 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
381c4 31c             | 
381c4 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
381c8 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
381cc 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
381d0 31f 00 00 04 F6 |                 mov     0-0, #0
381d4 320             | .regloop
381d4 320             | 
381d4 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
381d4 320             | 
381d4 320             | discon_entry
381d4 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
381d8 321             | 
381d8 321             |               
381d8 321             |         if HAVE_HIDPAD
381d8 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
381dc 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
381e0 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
381e4 324 F7 01 68 FC |                 wrlong  #0,pb
381e8 325             |         end
381e8 325             |         if EMUPAD_MAX_PLAYER > 0
381e8 325             |         end
381e8 325             | 
381e8 325             |                 ' Fall through to disconnected loop
381e8 325             | 
381e8 325             | '-----------------------------------------------------------------------------------------------------------------
381e8 325             | ' Device connect handling (Section 7.1.7.3).
381e8 325             | '-----------------------------------------------------------------------------------------------------------------
381e8 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
381e8 325             | ' device to connect (Section 7.1.7.3).
381e8 325             | '-----------------------------------------------------------------------------------------------------------------
381e8 325             | disconnected
381e8 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
381ec 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
381f0 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
381f4 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
381f8 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
381fc 32a             |         if ACTIVITY_LED >= 0
381fc 32a             |         end
381fc 32a 22 A7 82 FA |                 rqpin   urx, dm
38200 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
38204 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
38208 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
3820c 32e             | .se1_test
3820c 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
38210 32f FC FE BF FD |                 call    #poll_waitx
38214 330 22 A7 82 FA |                 rqpin   urx, dm
38218 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3821c 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
38220 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
38224 334             | .se1            'SE1 is a fatal error condition
38224 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
38228 335 E4 FE BF FD |                 call    #poll_waitx
3822c 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
38230 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
38234 338             | .connect_test                                           ' Test lines until stable J/K state seen
38234 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
38238 339 22 A7 82 FA |                 rqpin   urx, dm
3823c 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
38240 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
38244 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
38248 33d             | connected
38248 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3824c 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
38250 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
38254 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
38258 341             | .set_pulse
38258 341 1A 64 63 FD |                 getct   _pulse_time_
3825c 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
38260 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
38260 343             | ' of 1ms and make a correction, if necessary.
38260 343             | '                mov     htmp, _1ms_
38260 343             | '                subs    htmp, iframe_delta
38260 343             | '                adds    _frame1ms_clks_, htmp
38260 343             | '                debug(udec(_frame1ms_clks_))
38260 343             | 
38260 343             |                 ' Fall through to idle/processing loop
38260 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
38264 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
38268 345             | 
38268 345             | hidle
38268 345 22 A7 82 FA |                 rqpin   urx, dm
3826c 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
38270 347 98 00 90 CD |         if_c    jmp     #.se0_test
38274 348 24 06 70 FD |                 pollct3                         wc
38278 349 68 00 90 3D |         if_nc   jmp     #.nopoll
3827c 34a 1A 94 63 FD |                 getct   hct3
38280 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
38284 34c             | 
38284 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
38288 34d 00 70 E3 F8 |                 getbyte htmp
3828c 34e             | 
3828c 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
38290 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
38294 350 40 00 90 AD |         if_z    jmp     #.poll
38298 351             | 
38298 351             |         if _HAVE_GAMEPAD
38298 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
3829c 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
382a0 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
382a4 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
382a8 355 2C 00 90 AD |         if_z    jmp     #.poll
382ac 356             |         end
382ac 356             | 
382ac 356             |         if HAVE_MOUSE
382ac 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
382b0 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
382b4 358 20 00 90 AD |         if_z    jmp     #.poll
382b8 359             |         end
382b8 359             | 
382b8 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
382bc 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
382c0 35b 14 00 90 AD |         if_z    jmp     #.poll
382c4 35c             | 
382c4 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
382c8 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
382cc 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
382d0 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
382d4 360             |         if HAVE_MOUSE
382d4 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
382d8 361             |         else
382d8 361             |         end
382d8 361             | 
382d8 361             | .poll
382d8 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
382dc 362 2D EC 63 FD |                 call    pa
382e0 363             | .skip_poll
382e0 363             | 
382e0 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
382e4 364             | 
382e4 364             | .nopoll
382e4 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
382e8 365 44 00 90 AD |         if_z    jmp     #hsuspend
382ec 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
382f0 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
382f4 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
382f8 369 1A 84 63 FD |                 getct   hr0
382fc 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
38300 36b             |         if ACTIVITY_LED >= 0
38300 36b             |         end
38300 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
38304 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
38308 36d 5C FF 9F FD |                 jmp     #hidle
3830c 36e             | ' Check for extended SE0 state on the bus
3830c 36e             | .se0_test
3830c 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
38310 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
38314 370 22 A7 82 FA |                 rqpin   urx, dm
38318 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3831c 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
38320 373 24 F6 BF FD |                 call    #wait_txn_ok
38324 374 00 00 80 FF 
38328 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
3832c 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
3832c 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
38330 377             | 
38330 377             | hsuspend
38330 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
38334 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
38338 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
3833c 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
38340 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
38344 37c 00 96 07 F6 |                 mov     mod_cnt, #0
38348 37d             | 
38348 37d             |                 ' Fall through to resume wait loop
38348 37d             | 
38348 37d             | hwait_resume
38348 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3834c 37e 02 86 47 F0 |                 shr     hr1, #2
38350 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
38354 380             |         if ACTIVITY_LED >= 0
38354 380             |         end
38354 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
38358 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3835c 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
38360 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
38364 384 18 00 90 AD |         if_z    jmp     #.resume
38368 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3836c 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
38370 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
38374 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
38378 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
3837c 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
38380 38b             | .resume
38380 38b 22 05 28 FC |                 wypin   #OUT_K, dm
38384 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
38388 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
3838c 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
38390 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
38394 390 1F 70 63 FD |                 waitx   htmp
38398 391 22 07 28 FC |                 wypin   #OUT_J, dm
3839c 392 01 70 47 F0 |                 shr     htmp, #1
383a0 393 1F 70 63 FD |                 waitx   htmp
383a4 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
383a8 395 1A 92 62 FD |                 getct   iframe_ct_base
383ac 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
383b0 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
383b4 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
383b8 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
383bc 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
383c0 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
383c4 39c             | 
383c4 39c             | '------------------------------------------------------------------------------
383c4 39c             | ' Send preamble to enable low-speed HUB ports
383c4 39c             | '------------------------------------------------------------------------------
383c4 39c             | ' On entry:
383c4 39c             | ' On exit:
383c4 39c             | '   USB baud rate set to low-speed
383c4 39c             | '------------------------------------------------------------------------------
383c4 39c             | utx_pre
383c4 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
383c8 39d 40 46 62 FD |                 dirl    dp
383cc 39e 28 02 64 FD |                 setq    #1
383d0 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
383d4 3a0 58 44 62 FD |                 drvl    dm
383d8 3a1 59 46 62 FD |                 drvh    dp
383dc 3a2             | 
383dc 3a2 1E 00 00 FF 
383e0 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
383e4 3a4             | 
383e4 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
383e8 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
383ec 3a6 28 02 64 3D |         if_nc   setq    #1
383f0 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
383f4 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
383f8 3a9             | .l1
383f8 3a9             | 
383f8 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
383fc 3aa 40 46 62 FD |                 dirl    dp
38400 3ab 28 02 64 FD |                 setq    #1
38404 3ac 80 00 80 FF 
38408 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3840c 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
38410 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
38414 3b0 41 46 62 FD |                 dirh    dp
38418 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3841c 3b2             | 
3841c 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
38420 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
38424 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
38428 3b5             | 
38428 3b5             | hlut_end
38428 3b5             |                 fit     $400
38428 3b5             |                 orgh
38428                 | if OVERLAP_MEMORY
38428                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
38428                 | end
38428                 | '------------------------------------------------------------------------------
38428                 | ' Routines called from cog space.
38428                 | '------------------------------------------------------------------------------
38428                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
38428                 | '------------------------------------------------------------------------------
38428                 | 
38428                 | '------------------------------------------------------------------------------
38428                 | ' USB host cog initialization.
38428                 | '------------------------------------------------------------------------------
38428                 | usb_host_init
38428                 |                 ' Initialize buffer pointers
38428                 |         if OVERLAP_MEMORY
38428                 |         else
38428     40 15 B0 FE |                 loc     pb, #hid_descr
3842c                 |         end
3842c     F7 4B 02 F6 |                 mov     hid_descr_p, pb
38430                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
38430                 |                 {
38430                 |                 }
38430                 |         
38430                 |                 {
38430                 |                 }
38430                 |                 'loc     pb,#hkbd_report
38430                 |                 'mov     hkbd_report_p,pb
38430                 | 
38430     08 1D B0 FE |                 loc     pb, #hub_descr
38434     F7 4D 02 F6 |                 mov     hub_descr_p, pb
38438     1D 1D B0 FE |                 loc     pb, #urx_buff
3843c     F7 4F 02 F6 |                 mov     urx_buff_p, pb
38440     95 1D B0 FE |                 loc     pb, #dev_desc_buff
38444     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
38448     9F 1D B0 FE |                 loc     pb, #con_desc_buff
3844c     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
38450     18 15 B0 FE |                 loc     pb, #usb_cache_start
38454     F7 55 02 F6 |                 mov     cache_start_p, pb
38458     E9 1C B0 FE |                 loc     pb, #usb_cache_end
3845c     F7 57 02 F6 |                 mov     cache_end_p, pb
38460                 | 
38460                 |         if ERROR_LED >= 0
38460                 |         end
38460                 | 
38460                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
38460                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
38460                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
38460                 | ' Configure and enable the Serial Host USB port.
38460     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
38464                 | 
38464                 | '------------------------------------------------------------------------------
38464                 | ' Timing calculations happen before any interrupt(s) are enabled.
38464                 | '------------------------------------------------------------------------------
38464                 | ' On entry:
38464                 | '   htmp - current CLKFREQ value.
38464                 | '------------------------------------------------------------------------------
38464                 | hinit_usb_timings
38464                 | '                getct   htmp2
38464     B8 59 02 F6 |                 mov     save_sysclk, htmp
38468     8D 5B 80 FF 
3846c     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
38470     18 30 63 FD |                 getqx   _12Mbps_
38474     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
38478     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
3847c     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
38480     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
38484     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
38488     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
3848c     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
38490     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
38494     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
38498     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
3849c     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
384a0     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
384a4     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
384a8     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
384ac     80 00 00 FF 
384b0     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
384b4     18 2C 63 FD |                 getqx   _var_64_lower_
384b8     19 2E 63 FD |                 getqy   _var_64_upper_
384bc     28 2C 63 FD |                 setq    _var_64_lower_
384c0     65 CD 1D FF 
384c4     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
384c8     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
384cc     01 00 00 FF 
384d0     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
384d4     18 2C 63 FD |                 getqx   _var_64_lower_
384d8     19 2E 63 FD |                 getqy   _var_64_upper_
384dc     28 2C 63 FD |                 setq    _var_64_lower_
384e0     A1 07 00 FF 
384e4     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
384e8     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
384ec     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
384f0     09 36 57 F0 |                 shr     _1us_, #9               wc
384f4     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
384f8     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
384fc     18 38 63 FD |                 getqx   _10us_
38500     09 38 57 F0 |                 shr     _10us_, #9              wc
38504     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
38508     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
3850c     18 3A 63 FD |                 getqx   _33us_
38510     09 3A 57 F0 |                 shr     _33us_, #9              wc
38514     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
38518     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
3851c     18 3C 63 FD |                 getqx   _txn_err_
38520     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
38524     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
38528     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
3852c     18 3E 63 FD |                 getqx   _500us_
38530     09 3E 57 F0 |                 shr     _500us_, #9             wc
38534     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
38538     01 00 00 FF 
3853c     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
38540     18 40 63 FD |                 getqx   _txn_ok_ls_
38544     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
38548     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
3854c     01 00 00 FF 
38550     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
38554     18 42 63 FD |                 getqx   _txn_ok_fs_
38558     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
3855c     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
38560     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
38564     05 00 00 FF 
38568     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
3856c     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
38570     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
38574     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
38578     1C 00 00 FF 
3857c     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
38580     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
38584     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
38588     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
3858c     00 00 00 FF 
38590     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
38594     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
38598     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
3859c     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
385a0     04 00 00 FF 
385a4     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
385a8     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
385ac     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
385b0     8D 5B 00 FF 
385b4     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
385b8     18 4C 63 FD |                 getqx   _preamble_wait_
385bc     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
385c0     01 00 00 FF 
385c4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
385c8     18 2C 63 FD |                 getqx   _var_64_lower_
385cc     19 2E 63 FD |                 getqy   _var_64_upper_
385d0     28 2C 63 FD |                 setq    _var_64_lower_
385d4     01 00 00 FF 
385d8     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
385dc     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
385e0     09 4E 57 F0 |                 shr     _1ms_, #9               wc
385e4     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
385e8     FF FF 7F FF 
385ec     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
385f0     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
385f4     A7 51 03 F6 |                 mov     _2ms_, _1ms_
385f8     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
385fc     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
38600     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
38604     A7 55 03 F6 |                 mov     _4ms_, _1ms_
38608     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
3860c     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
38610     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
38614     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
38618     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
3861c     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
38620     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
38624     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
38628     A7 59 03 F6 |                 mov     _8ms_, _1ms_
3862c     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
38630     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
38634     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
38638     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
3863c     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
38640     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
38644     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
38648     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
3864c     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
38650     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
38654     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
38658                 | '        _ret_   mov     _1sec_, save_sysclk
38658                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
38658                 | '                ret
38658                 | {
38658                 | }
38658                 | 
38658                 | '------------------------------------------------------------------------------
38658                 | ' Parse a configuration descriptor chain to see if the device is a recognized
38658                 | ' one. If it is, start the task progression that will configure the device for
38658                 | ' use.
38658                 | '------------------------------------------------------------------------------
38658                 | ' On entry:
38658                 | '   hconfig_base - start address of the cached config descriptor chain.
38658                 | ' On exit:
38658                 | '------------------------------------------------------------------------------
38658                 | hparse_con_desc
38658     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
3865c     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
38660     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
38664     4E 70 FF F9 |                 movbyts htmp,#%%1032
38668     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
3866c                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
3866c                 | 
3866c     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
38670     6E ED 03 F1 |                 add     pa, hconfig_base
38674     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
38678                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
38678                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
38678                 | ' that defines a keyboard and/or mouse.
38678     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
3867c                 | .next_intf
3867c     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
38680     BC 01 90 3D |         if_ae   jmp     #hset_config
38684     6E F3 03 F6 |                 mov     ptrb, hconfig_base
38688     75 F3 03 F1 |                 add     ptrb, hnext_desc
3868c     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
38690     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
38694     0C 00 90 AD |         if_z    jmp     #.intf
38698     80 71 C7 FA |                 rdbyte  htmp, ptrb
3869c     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
386a0     D8 FF 9F FD |                 jmp     #.next_intf
386a4                 | .intf
386a4     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
386a8     00 90 07 F6 |                 mov     hpar3, #0
386ac     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
386b0     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
386b4     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
386b8     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
386bc                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
386bc                 | 
386bc                 | .endp
386bc     80 71 C7 FA |                 rdbyte  htmp, ptrb
386c0     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
386c4     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
386c8     78 00 90 3D |         if_ae   jmp     #.get_device
386cc     6E F3 03 F6 |                 mov     ptrb, hconfig_base
386d0     75 F3 03 F1 |                 add     ptrb, hnext_desc
386d4     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
386d8     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
386dc     64 00 90 AD |         if_z    jmp     #.get_device
386e0     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
386e4     04 00 90 AD |         if_z    jmp     #.get_ep
386e8     D0 FF 9F FD |                 jmp     #.endp
386ec                 | .get_ep
386ec     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
386f0     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
386f4     0F 86 67 F0 |                 shl     hr1, #8 + 7
386f8     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
386fc     3F 00 00 FF 
38700     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
38704     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
38708     00 8E 0F F2 |                 cmp     hpar2, #0               wz
3870c     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
38710     00 90 0F F2 |                 cmp     hpar3, #0               wz
38714     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
38718     A0 FF 9F FD |                 jmp     #.endp
3871c                 | .in_ep
3871c     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
38720     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
38724                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
38724     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
38728     C2 89 DB F8 |                 setbyte hr2, hr0, #3
3872c     8C FF 9F FD |                 jmp     #.endp
38730                 | .out_ep
38730     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
38734     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
38738                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
38738     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3873c     C2 8B DB F8 |                 setbyte hr3, hr0, #3
38740     78 FF 9F FD |                 jmp     #.endp
38744                 | 
38744                 | .get_device
38744     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
38748     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
3874c     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
38750     68 00 90 AD |         if_z    jmp     #.gamepad
38754     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
38758     AC 00 90 AD |         if_z    jmp     #.hub
3875c     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
38760     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
38764     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
38768     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3876c     4C 00 90 AD |         if_z    jmp     #.gamepad
38770     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
38774     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
38778                 | .keyboard
38778     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
3877c                 |         if HAVE_MOUSE
3877c     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
38780                 |         else
38780                 |         end
38780     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
38784     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
38788     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3878c     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
38790     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
38794     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
38798                 |                 'debug(udec(kb_intf_num))
38798                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
38798     E0 FE 9F FD |                 jmp     #.next_intf
3879c                 | if HAVE_MOUSE
3879c                 | .mouse
3879c     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
387a0     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
387a4     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
387a8     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
387ac     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
387b0                 |                 'getbyte ms_interval, hr2, #3
387b0     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
387b4     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
387b8                 |                 'debug(udec(kb_intf_num))
387b8                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
387b8     C0 FE 9F FD |                 jmp     #.next_intf
387bc                 | end
387bc                 | .gamepad
387bc     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
387c0     C7 71 63 F5 |                 xor     htmp, hpar2
387c4     3F 00 00 FF 
387c8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
387cc     AC FE 9F AD |         if_z    jmp     #.next_intf
387d0                 |         if HAVE_MOUSE
387d0     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
387d4     C7 71 63 F5 |                 xor     htmp, hpar2
387d8     3F 00 00 FF 
387dc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
387e0     98 FE 9F AD |         if_z    jmp     #.next_intf
387e4                 |         end
387e4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
387e8     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
387ec     8C FE 9F 5D |         if_nz   jmp     #.next_intf
387f0                 | 
387f0     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
387f4     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
387f8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
387fc     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
38800     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
38804                 |                 'debug(udec(gp_intf_num))
38804                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
38804     74 FE 9F FD |                 jmp     #.next_intf
38808                 | .hub
38808     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3880c     6C FE 9F 5D |         if_nz   jmp     #.next_intf
38810     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
38814     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
38818     60 FE 9F 5D |         if_nz   jmp     #.next_intf
3881c     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
38820     58 FE 9F 5D |         if_nz   jmp     #.next_intf
38824     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
38828     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3882c     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
38830     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38834     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
38838     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
3883c                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
3883c     3C FE 9F FD |                 jmp     #.next_intf
38840                 | 
38840                 | '------------------------------------------------------------------------------
38840                 | ' If a newly-connected device is recognized, do whatever is needed to configure
38840                 | ' it according to its function, or functions. In the case of this boot protocol
38840                 | ' keyboard/mouse class driver:
38840                 | ' - SetConfiguration(config_num)
38840                 | ' - SetProtocol(boot)
38840                 | ' - SetIdle(indefinite)
38840                 | ' - Enter the device interrupt IN polling task stage.
38840                 | '------------------------------------------------------------------------------
38840                 | ' On entry:
38840                 | ' On exit:
38840                 | '------------------------------------------------------------------------------
38840                 | hset_config
38840                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
38840                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
38840     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
38844     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
38848     00 00 0C F2 |                 cmp     0-0, #0                 wz
3884c     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
38850                 |         if HAVE_MOUSE
38850     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
38854                 |         end
38854     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
38858     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
3885c                 | .set_config
3885c     6C 0E D0 FE |                 loc     ptra, #set_config
38860     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
38864     6E ED 03 F1 |                 add     pa, hconfig_base
38868     F6 8D C3 FA |                 rdbyte  hpar1, pa
3886c     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
38870     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
38874     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
38878     A0 02 A0 FD |                 call    #control_write
3887c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38880     2D 00 64 5D |         if_nz   ret
38884                 | .kbd_config
38884     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
38888     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
3888c                 | 
3888c     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
38890     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38894     3F 00 00 FF 
38898     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3889c     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
388a0                 | 
388a0     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
388a4     34 0E D0 FE |                 loc     ptra, #set_protocol
388a8     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
388ac     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
388b0     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
388b4     A0 02 A0 FD |                 call    #control_write
388b8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
388bc     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
388c0     E4 02 90 5D |         if_nz   jmp     #.notify_client
388c4     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
388c8     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
388cc     30 03 B0 FD |                 call    #hset_idle
388d0                 |                 'cmp     retval, #PID_ACK        wz
388d0                 |         'if_nz   mov     hkbd_ep_addr, #0
388d0                 |         'if_nz   jmp     #.notify_client
388d0     A8 99 02 F6 |                 mov     hctwait, _2ms_
388d4     EF 02 A0 FD |                 call    #poll_waitx
388d8     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
388dc     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
388e0     90 17 90 FE |                 loc     pa, #hkbd_led_rep
388e4     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
388e8     2C 03 B0 FD |                 call    #hset_kbdled_report
388ec     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
388f0     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
388f4     B0 02 90 5D |         if_nz   jmp     #.notify_client
388f8     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
388fc     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38900     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38904     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
38908     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
3890c     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
38910     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
38914     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
38918     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
3891c     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
38920     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
38924                 |         if !!HAVE_MOUSE
38924                 |         end
38924                 | 
38924                 | .mouse_config
38924                 | if HAVE_MOUSE
38924     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
38928     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3892c     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
38930     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38934     3F 00 00 FF 
38938     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3893c     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
38940                 | 
38940                 |                 debug("mouse passed addr check")
38940                 | 
38940     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
38944     00 00 80 FF 
38948     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
3894c     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
38950     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38954     55 02 A0 FD |                 call    #control_read
38958     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3895c     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
38960     44 02 90 5D |         if_nz   jmp     #.notify_client
38964     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
38968     56 01 00 F6 |                 mov     0-0, total_data
3896c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38970                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
38970                 | 
38970     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
38974     64 0D D0 FE |                 loc     ptra, #set_protocol
38978     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3897c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38980     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
38984     A0 02 A0 FD |                 call    #control_write
38988     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3898c     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
38990     14 02 90 5D |         if_nz   jmp     #.notify_client
38994                 |                 debug("mouse passed SetProtocol")
38994     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
38998     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
3899c     60 02 B0 FD |                 call    #hset_idle
389a0                 |                 'cmp     retval, #PID_ACK        wz
389a0                 |         'if_nz   mov     hmouse_ep_addr, #0
389a0                 |         'if_nz   jmp     #.notify_client
389a0                 |                 debug("mouse passed SetIdle")
389a0     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
389a4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
389a8     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
389ac     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
389b0     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
389b4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
389b8     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
389bc     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
389c0     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
389c4     3F 00 00 FF 
389c8     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
389cc     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
389d0     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
389d4     D0 01 90 FD |                 jmp     #.notify_client
389d8                 | end
389d8                 | .gamepad_config
389d8                 | if _HAVE_GAMEPAD
389d8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
389dc     00 00 0C F2 |                 cmp     0-0, #0                 wz
389e0     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
389e4     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
389e8     00 70 03 F6 |                 mov     htmp, 0-0
389ec     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
389f0     3F 00 00 FF 
389f4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
389f8     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
389fc                 | 
389fc     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
38a00     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
38a04     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38a08     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38a0c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
38a10     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
38a14     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
38a18     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
38a1c     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
38a20     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38a24     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38a28     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
38a2c     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
38a30     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
38a34                 | 
38a34                 |                 if EMUPAD_MAX_PLAYER > 0
38a34                 |                 
38a34                 | .rule_loop           
38a34                 |                 end
38a34                 | 
38a34     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
38a38     5C 00 90 AD |         if_e    jmp     #.xinput
38a3c     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
38a40     00 70 03 F6 |                 mov     htmp,0-0
38a44     01 A6 02 FF 
38a48     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
38a4c     7C 00 90 AD |         if_e    jmp     #.ps3
38a50                 | 
38a50     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
38a54     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
38a58     00 00 80 5F 
38a5c     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
38a60     03 00 80 AF 
38a64     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
38a68     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
38a6c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38a70     55 02 A0 FD |                 call    #control_read
38a74     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38a78     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
38a7c     00 00 04 56 |         if_nz   mov     0-0, #0
38a80     24 01 90 5D |         if_nz   jmp     #.notify_client
38a84     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
38a88     56 01 00 F6 |                 mov     0-0, total_data
38a8c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38a90                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
38a90                 | 
38a90     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
38a94     10 01 90 FD |                 jmp     #.notify_client
38a98                 | .xinput
38a98     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
38a9c     2D EF 03 F6 |                 mov     pb,hdev_port
38aa0     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
38aa4     03 EE 27 F3 |                 fle     pb,#3
38aa8     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
38aac     02 EF 47 FC |                 wrbyte  pb, ptra[2]
38ab0                 | 
38ab0     03 B0 06 F6 |                 mov     pkt_data, #3
38ab4     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
38ab8     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
38abc     5A 00 A0 FD |                 call    #txn_out
38ac0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
38ac4                 | 
38ac4     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
38ac8     DC 00 90 FD |                 jmp     #.notify_client
38acc                 | .ps3
38acc     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
38ad0     2D EF 03 F6 |                 mov     pb,hdev_port
38ad4     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
38ad8     04 EE 27 F3 |                 fle     pb,#4
38adc     F7 EF C3 F9 |                 decod   pb
38ae0     09 EF 47 FC |                 wrbyte  pb, ptra[9]
38ae4                 | 
38ae4     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
38ae8     00 0C D0 FE |                 loc     ptra, #set_report
38aec     01 00 80 FF 
38af0     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
38af4     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38af8     03 61 5C FC |                 wrword  #48, ptra[wLength]
38afc     20 0C B0 FE |                 loc     pb, #ps3_command_buff
38b00     A0 02 A0 FD |                 call    #control_write
38b04                 | 
38b04     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
38b08     E0 0B D0 FE |                 loc     ptra, #set_report
38b0c     01 00 80 FF 
38b10     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
38b14     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38b18     03 09 5C FC |                 wrword  #4, ptra[wLength]
38b1c     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
38b20     A0 02 A0 FD |                 call    #control_write
38b24     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
38b28     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
38b2c     00 00 04 56 |         if_nz   mov     0-0, #0
38b30     74 00 90 5D |         if_nz   jmp     #.notify_client
38b34                 | 
38b34     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
38b38     6C 00 90 FD |                 jmp     #.notify_client
38b3c                 | end
38b3c                 | 
38b3c                 | .hub_config
38b3c     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
38b40     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
38b44     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
38b48     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38b4c     3F 00 00 FF 
38b50     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38b54     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
38b58                 | 
38b58     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
38b5c     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
38b60     26 EF 03 F6 |                 mov     pb, hub_descr_p
38b64     55 02 A0 FD |                 call    #control_read
38b68     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38b6c     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
38b70     34 00 90 5D |         if_nz   jmp     #.notify_client
38b74                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
38b74                 | 
38b74     26 F1 03 F6 |                 mov     ptra, hub_descr_p
38b78     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
38b7c     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
38b80                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
38b80                 | .pwr_loop
38b80     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
38b84     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
38b88     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
38b8c     A0 02 A0 FD |                 call    #control_write
38b90     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
38b94                 | 
38b94     B1 99 02 F6 |                 mov     hctwait, _500ms_
38b98     B0 99 02 F1 |                 add     hctwait, _100ms_
38b9c     EF 02 A0 FD |                 call    #poll_waitx
38ba0                 | 
38ba0     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
38ba4     00 00 90 FD |                 jmp     #.notify_client
38ba8                 | 
38ba8                 | .notify_client
38ba8     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
38bac     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
38bb0                 |                 debug(uhex_long(hdev_type,hdev_type+1))
38bb0                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
38bb0     2D 00 64 FD |                 ret
38bb4                 | 
38bb4                 | '------------------------------------------------------------------------------
38bb4                 | ' Initialize the keyboard/mouse data area to start-up values.
38bb4                 | '------------------------------------------------------------------------------
38bb4                 | ' On entry:
38bb4                 | ' On exit:
38bb4                 | '------------------------------------------------------------------------------
38bb4                 | init_kbdm_data
38bb4     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
38bb8     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
38bbc                 | 
38bbc     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
38bc0     2B ED 03 F6 |                 mov     pa, cache_end_p
38bc4                 | .loop
38bc4     61 01 4C FC |                 wrbyte  #0, ptra++
38bc8     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
38bcc     F4 FF 9F CD |         if_b    jmp     #.loop
38bd0                 |         
38bd0                 |         if EMUPAD_MAX_PLAYER > 0
38bd0                 |         end
38bd0                 | 
38bd0                 | 
38bd0     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
38bd4                 | .regloop
38bd4     00 EC 8F F9 |                 altd    pa
38bd8     00 00 04 F6 |                 mov     0-0, #0
38bdc     01 EC 07 F1 |                 add     pa, #1
38be0     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
38be4     EC FF 9F 5D |         if_nz   jmp     #.regloop
38be8                 | 
38be8     E1 E1 61 FF 
38bec     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
38bf0     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
38bf4     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
38bf8     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
38bfc                 | 
38bfc     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
38c00                 | 
38c00                 | '------------------------------------------------------------------------------
38c00                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
38c00                 | ' function.
38c00                 | '------------------------------------------------------------------------------
38c00                 | ' On entry:
38c00                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
38c00                 | '   hpar2 - index number of the target interface.
38c00                 | ' On exit:
38c00                 | '------------------------------------------------------------------------------
38c00                 | hset_idle
38c00     A8 99 02 F6 |                 mov     hctwait, _2ms_
38c04     EF 02 A0 FD |                 call    #poll_waitx
38c08     D8 0A D0 FE |                 loc     ptra, #set_idle
38c0c     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
38c10     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
38c14     A0 02 80 FD |                 jmp     #control_write
38c18                 | 
38c18                 | '------------------------------------------------------------------------------
38c18                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
38c18                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
38c18                 | '------------------------------------------------------------------------------
38c18                 | ' On entry:
38c18                 | '   ep_addr_pid - device address and enpoint for the request.
38c18                 | ' On exit:
38c18                 | '   retval - transaction result.
38c18                 | '------------------------------------------------------------------------------
38c18                 | hset_kbdled_report
38c18     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
38c1c     CC 0A D0 FE |                 loc     ptra, #set_report
38c20     01 00 80 FF 
38c24     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
38c28     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38c2c     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
38c30     27 EF 03 F6 |                 mov     pb, urx_buff_p
38c34     F7 77 42 FC |                 wrbyte  kb_led_states, pb
38c38     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
38c3c                 | 
38c3c                 | '------------------------------------------------------------------------------
38c3c                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
38c3c                 | '------------------------------------------------------------------------------
38c3c                 | ' On entry:
38c3c                 | ' On exit:
38c3c                 | '------------------------------------------------------------------------------
38c3c                 | hget_kbd_in_report
38c3c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
38c40     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
38c44     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
38c48     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
38c4c     CF 02 A0 FD |                 call    #do_int_in
38c50     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38c54     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
38c58                 | 
38c58     00 90 0F F2 |                 cmp     hpar3, #0               wz
38c5c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
38c60                 | 
38c60     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
38c64     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
38c68     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
38c6c     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
38c70                 | 
38c70     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
38c74     18 00 B0 FD |                 call    #hkbd_compare
38c78                 |         if EMUPAD_MAX_PLAYER > 0
38c78                 |         end
38c78                 | 
38c78                 | .led_check
38c78     3B 71 03 F6 |                 mov     htmp, kb_led_states
38c7c     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
38c80     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
38c84     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
38c88     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
38c8c     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
38c90                 | 
38c90                 | '------------------------------------------------------------------------------
38c90                 | ' Compare current and previous keyboard data buffers for keypress changes.
38c90                 | '------------------------------------------------------------------------------
38c90                 | hkbd_compare
38c90     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38c94     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
38c98     61 73 07 FB |                 rdlong  htmp1, ptra++
38c9c     E1 75 07 FB |                 rdlong  htmp2, ptrb++
38ca0     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
38ca4     61 73 07 FB |                 rdlong  htmp1, ptra++
38ca8     E1 75 07 FB |                 rdlong  htmp2, ptrb++
38cac     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
38cb0     2D 00 64 AD |         if_z    ret
38cb4                 | 
38cb4     B4 13 D0 FE |                 loc     ptra, #hkbd_report
38cb8                 | 
38cb8                 |                 ' Handle modifiers
38cb8     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
38cbc     00 87 C7 FA |                 rdbyte  hr1, ptra
38cc0     C7 87 43 F9 |                 rolword hr1,hpar2,#0
38cc4     63 86 63 FD |                 mergew  hr1
38cc8     08 EC 07 F6 |                 mov     pa,#8
38ccc                 | .modloop
38ccc     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
38cd0     E8 8C 07 F6 |                 mov     hpar1,#$E8
38cd4     F6 8D 83 F1 |                 sub     hpar1,pa
38cd8     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
38cdc     FB ED 6F FB |                 djnz    pa,#.modloop
38ce0                 | 
38ce0     6F E0 75 FD | .release        modc    _set    wc
38ce4                 |                 'alts    hdev_port, #hid_report_p
38ce4                 |                 'mov     ptra, hid_report_p
38ce4     02 F0 07 F1 |                 add     ptra, #2
38ce8     06 EC 07 F6 |                 mov     pa, #6
38cec     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
38cf0     20 00 90 AD |         if_z    jmp     #.rl3
38cf4     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
38cf8     02 F2 07 F1 |                 add     ptrb, #2
38cfc     06 EE 07 F6 |                 mov     pb, #6
38d00     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
38d04     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
38d08     08 00 90 AD |         if_z    jmp     #.rl3
38d0c     FC EF 6F FB |                 djnz    pb, #.rl2
38d10     68 00 B0 FD |                 call    #hkbd_translate
38d14     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
38d18                 | 
38d18     00 90 07 F6 |                 mov     hpar3, #0
38d1c     1F 90 27 F4 |                 bith    hpar3, #31
38d20                 | 
38d20     6F 00 74 FD | .press          modc    _clr    wc
38d24     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38d28     02 F0 07 F1 |                 add     ptra, #2
38d2c     06 EC 07 F6 |                 mov     pa, #6
38d30     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
38d34     20 00 90 AD |         if_z    jmp     #.pl3
38d38     30 13 F0 FE |                 loc     ptrb, #hkbd_report
38d3c     02 F2 07 F1 |                 add     ptrb, #2
38d40     06 EE 07 F6 |                 mov     pb, #6
38d44     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
38d48     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
38d4c     08 00 90 AD |         if_z    jmp     #.pl3
38d50     FC EF 6F FB |                 djnz    pb, #.pl2
38d54     24 00 B0 FD |                 call    #hkbd_translate
38d58     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
38d5c                 | 
38d5c     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
38d60     08 13 F0 FE |                 loc     ptrb, #hkbd_report
38d64     28 02 64 FD |                 setq #1
38d68     61 73 07 FB |                 rdlong  htmp1, ptra++
38d6c     28 02 64 FD |                 setq #1
38d70     E1 73 67 FC |                 wrlong  htmp1, ptrb++
38d74     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
38d78                 | 
38d78     2D 00 64 FD |                 ret
38d7c                 | 
38d7c                 | '------------------------------------------------------------------------------
38d7c                 | ' Translate keyboard scancode to ASCII
38d7c                 | '------------------------------------------------------------------------------
38d7c                 | ' On entry:
38d7c                 | '   hpar1 - scancode
38d7c                 | '   hpar2 - key modifiers state
38d7c                 | '       c - pressed (0) or released (1) flag
38d7c                 | ' On exit:
38d7c                 | '   hpar1 - bit     31 = 0 pressed, 1 released
38d7c                 | '               30..17 = unused
38d7c                 | '                   18 = scroll-lock state 
38d7c                 | '                   17 = caps-lock state
38d7c                 | '                   16 = num-lock state 
38d7c                 | '                15..8 = key modifiers state
38d7c                 | '                 7..0 = scancode
38d7c                 | '------------------------------------------------------------------------------
38d7c                 | hkbd_translate
38d7c     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
38d80     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
38d84     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
38d88     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
38d8c     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
38d90     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
38d94                 | 
38d94                 |         if EMUPAD_MAX_PLAYER > 0
38d94                 | 
38d94                 |         if EMUPAD_BT0_BIT >= 0
38d94                 |         end
38d94                 |         if EMUPAD_BT1_BIT >= 0
38d94                 |         end
38d94                 |         if EMUPAD_BT2_BIT >= 0
38d94                 |         end
38d94                 |         if EMUPAD_BT3_BIT >= 0
38d94                 |         end
38d94                 |         if EMUPAD_BT4_BIT >= 0
38d94                 |         end
38d94                 |         if EMUPAD_BT5_BIT >= 0
38d94                 |         end
38d94                 |         if EMUPAD_BT6_BIT >= 0
38d94                 |         end
38d94                 |         if EMUPAD_BT7_BIT >= 0
38d94                 |         end
38d94                 |         if EMUPAD_BT8_BIT >= 0
38d94                 |         end
38d94                 |         if EMUPAD_BT9_BIT >= 0
38d94                 |         end
38d94                 | 
38d94                 |         end
38d94     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
38d98     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
38d9c     1F 8C 47 F4 |                 bitc    hpar1, #31
38da0                 |         if KEYQUEUE_SIZE > 0
38da0     C4 09 B0 FE |                 loc pb,#keyq_head
38da4     F7 71 E3 FA |                 rdword htmp,pb
38da8     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
38dac     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
38db0     B8 75 03 F6 |                 mov htmp2,htmp
38db4     04 74 07 FA |                 mul htmp2,#4
38db8     F7 75 03 F1 |                 add htmp2,pb
38dbc     02 74 07 F1 |                 add htmp2,#2
38dc0     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
38dc4     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
38dc8     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
38dcc     F7 71 43 5C |         if_nz   wrbyte htmp,pb
38dd0                 |         end
38dd0     2D 00 7C FD |                 ret wcz
38dd4                 | 
38dd4                 | if HAVE_MOUSE
38dd4                 | '------------------------------------------------------------------------------
38dd4                 | ' Execute an IN interrupt transaction to poll for mouse activity.
38dd4                 | '------------------------------------------------------------------------------
38dd4                 | ' On entry:
38dd4                 | ' On exit:
38dd4                 | '------------------------------------------------------------------------------
38dd4                 | hget_mouse_in_report
38dd4     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
38dd8     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
38ddc     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
38de0     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
38de4     CF 02 A0 FD |                 call    #do_int_in
38de8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38dec     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
38df0                 | 
38df0     00 90 0F F2 |                 cmp     hpar3, #0               wz
38df4     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
38df8                 | 
38df8     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
38dfc     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
38e00     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
38e04     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
38e08                 | 
38e08     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38e0c     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
38e10     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
38e14     01 90 87 31 |         if_ae   sub     hpar3, #1
38e18                 | 
38e18     40 09 90 FE |                 loc     pa, #mouse_limits
38e1c     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
38e20                 | 
38e20                 |                 ' load xacc,yacc,zacc
38e20     28 04 64 FD |                 setq    #3-1
38e24     80 87 07 FB |                 rdlong  hr1,ptrb
38e28                 |                 ' load limits and outptr
38e28     28 04 64 FD |                 setq    #3-1
38e2c     F6 73 03 FB |                 rdlong  htmp1,pa
38e30                 | 
38e30     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
38e34     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
38e38     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
38e3c     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
38e40     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
38e44     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
38e48     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
38e4c     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
38e50                 |               
38e50                 | 
38e50     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
38e54     07 70 67 F7 |                 signx   htmp, #7
38e58     B8 87 03 F1 |                 add     hr1,htmp
38e5c     00 72 0F F2 |                 cmp     htmp1,#0 wz
38e60     B9 87 63 53 |         if_ne   fles    hr1,htmp1
38e64     00 86 47 53 |         if_ne   fges    hr1,#0
38e68                 | 
38e68     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
38e6c     07 70 67 F7 |                 signx   htmp, #7
38e70     B8 89 03 F1 |                 add     hr2,htmp
38e74     00 74 0F F2 |                 cmp     htmp2,#0 wz
38e78     BA 89 63 53 |         if_ne   fles    hr2,htmp2
38e7c     00 88 47 53 |         if_ne   fges    hr2,#0
38e80                 |                 
38e80                 | 
38e80     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
38e84     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
38e88     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
38e8c     B8 8B 03 A1 |         if_z    add     hr3,htmp
38e90                 | 
38e90     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
38e94     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
38e98                 | 
38e98                 |                 ' write back accumulators
38e98     28 04 64 FD |                 setq    #3-1
38e9c     80 87 67 FC |                 wrlong  hr1,ptrb
38ea0                 |                 ' if outptr set, write X/Y words
38ea0     00 76 0F F2 |                 cmp htmp3,#0                    wz
38ea4     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
38ea8     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
38eac     2D 00 64 FD |                 ret
38eb0                 | end
38eb0                 | 
38eb0                 | '------------------------------------------------------------------------------
38eb0                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
38eb0                 | '------------------------------------------------------------------------------
38eb0                 | ' On entry:
38eb0                 | ' On exit:
38eb0                 | '------------------------------------------------------------------------------
38eb0                 | if _HAVE_GAMEPAD
38eb0                 | hget_gp_in_report
38eb0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
38eb4     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
38eb8                 | 
38eb8     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
38ebc     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
38ec0     00 90 E3 F8 |                 getbyte hpar3
38ec4     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
38ec8     CF 02 A0 FD |                 call    #do_int_in
38ecc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38ed0     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
38ed4                 | 
38ed4     00 90 0F F2 |                 cmp     hpar3, #0               wz
38ed8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
38edc                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
38edc                 | 
38edc     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
38ee0     00 70 E3 F8 |                 getbyte htmp                            ' |
38ee4     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
38ee8     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
38eec     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
38ef0     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
38ef4     B8 01 C0 F8 |                 setbyte htmp                            ' |
38ef8                 | 
38ef8                 | ' Note: the following code compares the current and previous reports
38ef8                 | ' and process the data if there are changes to ease the debug output.
38ef8                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
38ef8                 | ' gpPreReport buffer.
38ef8                 | 
38ef8                 |                 ' ----- start of block to remove
38ef8                 |                 {
38ef8                 |                 }
38ef8                 |                 ' ----- end of block to remove
38ef8     F4 04 90 FE |                 loc pa,#hpad_translate
38efc     2A EC 63 FD |                 push pa
38f00                 | 
38f00                 |                 ' FALL THROUGH !!!!
38f00                 | 
38f00                 | '------------------------------------------------------------------------------
38f00                 | ' Decode controller report
38f00                 | '------------------------------------------------------------------------------
38f00                 | hid_decode
38f00                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
38f00     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
38f04     00 04 00 FF 
38f08     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
38f0c                 | 
38f0c     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
38f10                 | 
38f10     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
38f14     00 2A E3 F8 |                 getbyte hidr_type
38f18     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
38f1c     34 02 90 AD |         if_z    jmp     #hpad_xinput
38f20     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
38f24     1C 03 90 AD |         if_z    jmp     #hpad_ps3
38f28     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
38f2c     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
38f30     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
38f34                 |                 
38f34                 | 
38f34                 | '------------------------------------------------------------------------------
38f34                 | ' Handle HID controller (or mouse now
38f34                 | ' On entry:
38f34                 | '   ptrb - controller report
38f34                 | '------------------------------------------------------------------------------
38f34                 | hpad_hid
38f34     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38f38     F7 F1 03 F6 |                 mov     ptra, pb
38f3c     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
38f40     00 EC 03 F6 |                 mov     pa, 0-0
38f44                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
38f44     19 2A 3B FF 
38f48     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
38f4c                 | 
38f4c                 | .next
38f4c     00 EC 5F F2 |                 cmps    pa, #0      wcz
38f50     2D 00 7C ED |         if_be   ret     wcz
38f54                 | 
38f54     61 8D C7 FA |                 rdbyte  hpar1, ptra++
38f58     01 EC 87 F1 |                 sub     pa, #1
38f5c     00 8E 07 F6 |                 mov     hpar2, #0
38f60                 | 
38f60     C6 71 03 F6 |                 mov     htmp, hpar1
38f64     03 70 07 F5 |                 and     htmp, #$03
38f68     01 70 0F F2 |                 cmp     htmp, #1    wz
38f6c     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
38f70     07 8E 67 A7 |         if_z    signx   hpar2,#7
38f74     01 EC 87 A1 |         if_z    sub     pa, #1
38f78     02 70 0F F2 |                 cmp     htmp, #2    wz
38f7c     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
38f80     0F 8E 67 A7 |         if_z    signx   hpar2,#15
38f84     02 EC 87 A1 |         if_z    sub     pa, #2
38f88     03 70 0F F2 |                 cmp     htmp, #3    wz
38f8c     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
38f90     04 EC 87 A1 |         if_z    sub     pa, #4
38f94                 | 
38f94     FC 8C 07 F5 |                 and     hpar1, #$FC
38f98                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
38f98                 | 
38f98     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
38f9c     0C 01 90 AD |         if_z    jmp     #.report_id
38fa0     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
38fa4     24 01 90 AD |         if_z    jmp     #.usage_page
38fa8     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
38fac     2C 01 90 AD |         if_z    jmp     #.usage
38fb0     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
38fb4     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
38fb8     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
38fbc     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
38fc0     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
38fc4     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
38fc8     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
38fcc     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
38fd0     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
38fd4     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
38fd8     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
38fdc     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
38fe0     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
38fe4     64 FF 9F 5D |         if_nz   jmp     #.next
38fe8                 | 
38fe8     D8 1D A7 FB |                 tjf     hidr_state,#.next
38fec                 | 
38fec     03 8E 07 F5 |                 and     hpar2, #$03
38ff0     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
38ff4     18 00 90 5D |         if_nz   jmp     #.skip
38ff8                 | 
38ff8     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
38ffc     20 00 90 AD |         if_z    jmp     #.axes
39000     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
39004     5C 00 90 AD |         if_z    jmp     #.hats
39008     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
3900c     70 00 90 AD |         if_z    jmp     #.buttons
39010                 | .skip
39010     8F 71 03 F6 |                 mov     htmp, hidr_size
39014     90 71 03 FA |                 mul     htmp, hidr_count
39018     B8 23 03 F1 |                 add     hidr_offset, htmp
3901c     2C FF 9F FD |                 jmp     #.next
39020                 | .axes
39020                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
39020     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
39024     90 87 03 F6 |                 mov     hr1, hidr_count
39028                 | .l1
39028     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3902c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
39030     04 03 B0 FD |                 call    #hpad_getbits
39034     64 03 B0 FD |                 call    #hpad_normalize
39038     06 84 1F F2 |                 cmp     hr0, #6         wcz
3903c     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
39040     00 88 43 C8 |         if_b    getnib  hr2
39044     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
39048     5F 01 20 C9 |         if_b    setword retval
3904c     01 84 07 C1 |         if_b    add     hr0, #1
39050     8F 23 03 F1 |                 add     hidr_offset, hidr_size
39054     F4 87 6F FB |                 djnz    hr1, #.l1
39058                 | 
39058     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3905c     01 1C 07 F6 |                 mov     hidr_state, #1
39060     E8 FE 9F FD |                 jmp     #.next
39064                 | .hats
39064                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
39064     91 8D 03 F6 |                 mov     hpar1, hidr_offset
39068     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3906c     C8 02 B0 FD |                 call    #hpad_getbits
39070     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
39074     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
39078     01 1C 07 F6 |                 mov     hidr_state, #1
3907c     90 FF 9F FD |                 jmp     #.skip
39080                 | .buttons
39080                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
39080     91 8D 03 F6 |                 mov     hpar1, hidr_offset
39084     8F 8F 03 F6 |                 mov     hpar2, hidr_size
39088     90 8F 03 FA |                 mul     hpar2, hidr_count
3908c     A8 02 B0 FD |                 call    #hpad_getbits
39090     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
39094     B8 BF 62 F0 |                 shl     retval, htmp
39098     5F 17 43 F5 |                 or      hidr_buttons, retval
3909c     90 71 03 F1 |                 add     htmp, hidr_count
390a0     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
390a4     01 1C 07 F6 |                 mov     hidr_state, #1
390a8     64 FF 9F FD |                 jmp     #.skip
390ac                 | .report_id
390ac     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
390b0     2D 00 7C 5D |         if_nz   ret     wcz
390b4     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
390b8     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
390bc     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
390c0     01 1C 67 56 |         if_nz   neg     hidr_state,#1
390c4     01 F2 87 51 |         if_nz   sub     ptrb,#1
390c8     80 FE 9F FD |                 jmp     #.next
390cc                 | .usage_page
390cc     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
390d0     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
390d4     04 1C 07 A6 |         if_z    mov     hidr_state, #4
390d8     70 FE 9F FD |                 jmp     #.next
390dc                 | .usage
390dc     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
390e0     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
390e4     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
390e8     01 1C 07 A6 |         if_z    mov     hidr_state, #1
390ec     5C FE 9F AD |         if_z    jmp     #.next
390f0     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
390f4     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
390f8     01 1C 07 A6 |         if_z    mov     hidr_state, #1
390fc     4C FE 9F AD |         if_z    jmp     #.next
39100     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
39104     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
39108     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
3910c     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
39110     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
39114     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
39118     10 00 90 AD |         if_z    jmp     #.usage_axis
3911c     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
39120     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
39124     03 1C 07 A6 |         if_z    mov     hidr_state, #3
39128     20 FE 9F FD |                 jmp     #.next
3912c                 | .usage_axis
3912c     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
39130     18 FE 9F CD |         if_b    jmp     #.next
39134     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
39138     C7 01 00 F8 |                 setnib  hpar2
3913c                 | 
3913c     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
39140     C7 8F C3 F9 |                 decod   hpar2
39144     C7 0F 43 F5 |                 or      hidr_flags, hpar2
39148                 | 
39148     01 24 07 F1 |                 add     hidr_usage_idx, #1
3914c     02 1C 07 F6 |                 mov     hidr_state, #2
39150     F8 FD 9F FD |                 jmp     #.next
39154                 | 
39154                 | '------------------------------------------------------------------------------
39154                 | ' Handle XInput controller
39154                 | ' On entry:
39154                 | '   ptrb - controller report
39154                 | '------------------------------------------------------------------------------
39154                 | '   Default implementation translates the report to a pseudo-defacto hid
39154                 | '   standard and jumps to hpad_translate for actions.
39154                 | '   Implementors may take specific actions for this kind of controller.
39154                 | '------------------------------------------------------------------------------
39154                 | hpad_xinput
39154     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
39158     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3915c     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
39160     14 70 0F F2 |                 cmp     htmp, #$14      wz
39164     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
39168                 | 
39168                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
39168                 | 
39168     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3916c     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
39170                 | 
39170     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
39174     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
39178     5F BF 22 F6 |                 not     retval
3917c     5F 11 2B F9 |                 setword hidr_axis, retval, #1
39180     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
39184     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
39188     5F BF 22 F6 |                 not     retval
3918c     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
39190                 | 
39190     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
39194     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
39198     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3919c     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
391a0     F8 01 B0 FD |                 call    #hpad_normalize
391a4     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
391a8     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
391ac     C0 BE 1E F2 |                 cmp     retval, #192    wcz
391b0     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
391b4     E4 01 B0 FD |                 call    #hpad_normalize
391b8     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
391bc                 | 
391bc     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
391c0     81 BF E6 FA |                 rdword  retval, ptrb[1]
391c4     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
391c8     00 16 47 F4 |                 bitc    hidr_buttons, #0
391cc     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
391d0     01 16 47 F4 |                 bitc    hidr_buttons, #1
391d4     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
391d8     02 16 47 F4 |                 bitc    hidr_buttons, #2
391dc     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
391e0     03 16 47 F4 |                 bitc    hidr_buttons, #3
391e4     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
391e8     04 16 47 F4 |                 bitc    hidr_buttons, #4
391ec     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
391f0     05 16 47 F4 |                 bitc    hidr_buttons, #5
391f4     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
391f8     08 16 47 F4 |                 bitc    hidr_buttons, #8
391fc     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
39200     09 16 47 F4 |                 bitc    hidr_buttons, #9
39204     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
39208     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3920c     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
39210     0B 16 47 F4 |                 bitc    hidr_buttons, #11
39214     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
39218     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3921c                 | 
3921c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
39220     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
39224     7A BB 7A FF 
39228     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
3922c     F9 FF 7F FF 
39230     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
39234     B9 71 5F F9 |                 altgn   htmp, #htmp1
39238     00 70 43 F8 |                 getnib  htmp
3923c     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
39240                 | 
39240     AC 01 90 FD |                 jmp     #hpad_translate
39244                 | 
39244                 | '------------------------------------------------------------------------------
39244                 | ' Handle PS3 controller
39244                 | ' On entry:
39244                 | '   ptrb - controller report
39244                 | '------------------------------------------------------------------------------
39244                 | '   Default implementation translates the report to a pseudo-defacto hid
39244                 | '   standard and jumps to hpad_translate for actions.
39244                 | '   Implementors may take specific actions for this kind of controller.
39244                 | '------------------------------------------------------------------------------
39244                 | hpad_ps3
39244     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
39248     01 70 0F F2 |                 cmp     htmp, #$01      wz
3924c     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
39250                 | 
39250                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
39250                 | 
39250     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
39254     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
39258     40 01 B0 FD |                 call    #hpad_normalize
3925c     5F 11 23 F9 |                 setword hidr_axis, retval, #0
39260     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
39264     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
39268     30 01 B0 FD |                 call    #hpad_normalize
3926c     5F 11 2B F9 |                 setword hidr_axis, retval, #1
39270     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
39274     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
39278     20 01 B0 FD |                 call    #hpad_normalize
3927c     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
39280     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
39284     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
39288     10 01 B0 FD |                 call    #hpad_normalize
3928c     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
39290     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
39294     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
39298                 | 
39298     08 8C 07 F6 |                 mov     hpar1, #8
3929c     13 8E 07 F6 |                 mov     hpar2, #19
392a0     94 00 B0 FD |                 call    #hpad_getbits
392a4                 | 
392a4     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
392a8     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
392ac     00 16 47 F4 |                 bitc    hidr_buttons, #0
392b0     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
392b4     01 16 47 F4 |                 bitc    hidr_buttons, #1
392b8     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
392bc     02 16 47 F4 |                 bitc    hidr_buttons, #2
392c0     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
392c4     03 16 47 F4 |                 bitc    hidr_buttons, #3
392c8     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
392cc     04 16 47 F4 |                 bitc    hidr_buttons, #4
392d0     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
392d4     05 16 47 F4 |                 bitc    hidr_buttons, #5
392d8     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
392dc     06 16 47 F4 |                 bitc    hidr_buttons, #6
392e0     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
392e4     07 16 47 F4 |                 bitc    hidr_buttons, #7
392e8     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
392ec     08 16 47 F4 |                 bitc    hidr_buttons, #8
392f0     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
392f4     09 16 47 F4 |                 bitc    hidr_buttons, #9
392f8     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
392fc     0A 16 47 F4 |                 bitc    hidr_buttons, #10
39300     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
39304     0B 16 47 F4 |                 bitc    hidr_buttons, #11
39308     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3930c     0C 16 47 F4 |                 bitc    hidr_buttons, #12
39310                 | 
39310     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
39314     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
39318     09 FA 79 FF 
3931c     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
39320     FF FA 7F FF 
39324     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
39328     B9 71 5F F9 |                 altgn   htmp, #htmp1
3932c     00 70 43 F8 |                 getnib  htmp
39330     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
39334                 | 
39334     B8 00 90 FD |                 jmp     #hpad_translate
39338                 | 
39338                 | '------------------------------------------------------------------------------
39338                 | ' Read bits from report data buffer
39338                 | '------------------------------------------------------------------------------
39338                 | ' On entry:
39338                 | '   PTRB - report buffer
39338                 | '   hpar1 - start bit
39338                 | '   hpar2 - number of bits
39338                 | ' On exit:
39338                 | '   retval - bits
39338                 | '------------------------------------------------------------------------------
39338                 | hpad_getbits
39338     C6 71 03 F6 |                 mov     htmp, hpar1
3933c     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
39340     F9 71 03 F1 |                 add     htmp, ptrb
39344     B8 BF 02 FB |                 rdlong  retval, htmp
39348                 | 
39348     C6 73 03 F6 |                 mov     htmp1, hpar1
3934c     07 72 07 F5 |                 and     htmp1, #$07     ' shift
39350     B9 BF 42 F0 |                 shr     retval, htmp1
39354                 | 
39354     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
39358     10 00 90 1D |         if_a    jmp     #.l1
3935c                 | 
3935c     C7 8F C3 F9 |                 decod   hpar2
39360     01 8E 87 F1 |                 sub     hpar2, #1
39364     C7 BF 02 F5 |                 and     retval, hpar2
39368     2D 00 64 FD |                 ret
3936c                 | .l1
3936c     FF 7F 00 FF 
39370     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
39374     03 70 07 F1 |                 add     htmp, #3
39378     B8 75 03 FB |                 rdlong  htmp2, htmp
3937c     18 8E 87 F1 |                 sub     hpar2, #24
39380     C7 8F C3 F9 |                 decod   hpar2
39384     01 8E 87 F1 |                 sub     hpar2, #1
39388     B9 75 43 F0 |                 shr     htmp2, htmp1
3938c     C7 75 03 F5 |                 and     htmp2, hpar2
39390     18 74 67 F0 |                 shl     htmp2, #24
39394     BA BF 42 F5 |                 or      retval, htmp2
39398     2D 00 64 FD |                 ret
3939c                 | 
3939c                 | '------------------------------------------------------------------------------
3939c                 | ' Normalize value to signed word (-32768 / 32767)
3939c                 | '------------------------------------------------------------------------------
3939c                 | ' On entry:
3939c                 | '   retval - value to normalize
3939c                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3939c                 | '   - or -
3939c                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3939c                 | '   hidr_size - value bits length
3939c                 | ' On exit:
3939c                 | '   retval - normalized value
3939c                 | '------------------------------------------------------------------------------
3939c                 | hpad_normalize
3939c     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
393a0     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
393a4     2D 00 64 AD |         if_z    ret
393a8     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
393ac     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
393b0     0F 72 77 F7 |                 signx   htmp1, #15      wc
393b4     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
393b8     00 BE 66 C7 |         if_c    signx   retval, #0-0
393bc     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
393c0     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
393c4     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
393c8     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
393cc     B8 71 53 F6 |                 abs     htmp            wc
393d0     1F BE 0E F4 |                 testb   retval, #31     wz
393d4     5F BF 42 F6 |                 abs     retval
393d8     B8 BF 12 FD |                 qdiv    retval, htmp
393dc     18 BE 62 FD |                 getqx   retval
393e0     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
393e4     C0 FF 7F FF 
393e8     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
393ec     2D 00 64 FD |                 ret
393f0                 | 
393f0                 | '------------------------------------------------------------------------------
393f0                 | ' Perform controller actions
393f0                 | ' On entry:
393f0                 | '    hidr_id        report id
393f0                 | '    hidr_axis      axis value (signed word, 2 axes per long)
393f0                 | '                      X = hidr_axis+0, #0
393f0                 | '                      Y = hidr_axis+0, #1
393f0                 | '                      Z = hidr_axis+1, #0
393f0                 | '                     RX = hidr_axis+1, #1
393f0                 | '                     RY = hidr_axis+2, #0
393f0                 | '                     RZ = hidr_axis+2, #1
393f0                 | '    hidr_buttons   buttons state (bits 0 to 31)
393f0                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
393f0                 | '
393f0                 | '                     -------3 -------2 -------1 -------0 byte
393f0                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
393f0                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
393f0                 | '                                zyx||| |||||||| ++++++++ n. buttons
393f0                 | '                                |||||| ||||++++--------- n. axes
393f0                 | '                                |||||| ++++------------- n. hats
393f0                 | '                                ++++++------------------ valid axes
393f0                 | '------------------------------------------------------------------------------
393f0                 | hpad_translate
393f0                 | 
393f0                 | 
393f0                 |         if HAVE_HIDPAD
393f0     84 0C F0 FE |                 loc     ptrb,#hidpad_report
393f4     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
393f8     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
393fc     01 70 E7 F2 |                 cmpsub  htmp,#1
39400     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
39404     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
39408     2D 00 7C 3D |         if_ae   ret     wcz
3940c     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
39410     B8 F3 03 F1 |                 add     ptrb,htmp
39414     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
39418     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3941c     28 0C 64 FD |                 setq    #7-1
39420     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
39424                 |         end
39424                 | 
39424                 | 
39424                 |         if EMUPAD_MAX_PLAYER > 0
39424                 | .emupad_no_hat
39424                 |         if EMUPAD_BT0_BIT >= 0
39424                 |         end
39424                 |         if EMUPAD_BT1_BIT >= 0
39424                 |         end
39424                 |         if EMUPAD_BT2_BIT >= 0
39424                 |         end
39424                 |         if EMUPAD_BT3_BIT >= 0
39424                 |         end
39424                 |         if EMUPAD_BT4_BIT >= 0
39424                 |         end
39424                 |         if EMUPAD_BT5_BIT >= 0
39424                 |         end
39424                 |         if EMUPAD_BT6_BIT >= 0
39424                 |         end
39424                 |         if EMUPAD_BT7_BIT >= 0
39424                 |         end
39424                 |         if EMUPAD_BT8_BIT >= 0
39424                 |         end
39424                 |         if EMUPAD_BT9_BIT >= 0
39424                 |         end
39424                 | .emupad_slot_over
39424                 |         end
39424                 | 
39424                 |         if 0
39424                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
39424                 | 
39424                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
39424                 | 
39424                 |         end
39424     2D 00 64 FD |                 ret
39428                 | end
39428                 | 
39428                 | if EMUPAD_MAX_PLAYER > 0
39428                 | '------------------------------------------------------------------------------
39428                 | ' Clear EmuPad state
39428                 | '------------------------------------------------------------------------------
39428                 | emupad_reset
39428                 | 
39428                 | '------------------------------------------------------------------------------
39428                 | ' Get EmuPad Player number for current device (into retval)
39428                 | ' Z flag is also set if current device is valid
39428                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
39428                 | '------------------------------------------------------------------------------
39428                 | emupad_getnum
39428                 | .loop
39428                 | '------------------------------------------------------------------------------
39428                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
39428                 | '------------------------------------------------------------------------------
39428                 | emupad_discon
39428                 | .loop         
39428                 |         
39428                 |         ' FALL THROUGH!!!
39428                 | 
39428                 | '------------------------------------------------------------------------------
39428                 | ' Update EmuPad reports (all of them...)
39428                 | '------------------------------------------------------------------------------
39428                 | emupad_write_reports
39428                 | .devloop
39428                 | 
39428                 | end
39428                 | 
39428                 | 
39428                 | '------------------------------------------------------------------------------
39428                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
39428                 | '------------------------------------------------------------------------------
39428                 | ' On entry:
39428                 | ' On exit:
39428                 | '------------------------------------------------------------------------------
39428                 | hget_hub_status
39428     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3942c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
39430     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
39434     01 90 2F F9 |                 setword hpar3, #1, #1
39438     CF 02 A0 FD |                 call    #do_int_in
3943c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39440     0C 00 90 AD |         if_z    jmp     #.data
39444     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
39448     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3944c     2D 00 64 FD |                 ret
39450                 | .data
39450     00 90 0F F2 |                 cmp     hpar3, #0               wz
39454     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
39458                 | 
39458     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3945c     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
39460     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
39464     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
39468                 |                 debug(ubin_long(hub_status_chg))
39468                 | 
39468     01 5A 06 F6 |                 mov     hdev_port, #1
3946c                 | .loop
3946c     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
39470     0C 00 B0 AD |         if_x1   call    #hub_port_handler
39474     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
39478     F0 FF 9F 3D |         if_nc   jmp     #.loop
3947c     2D 00 64 FD |                 ret
39480                 | 
39480                 | hub_port_handler
39480     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
39484     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
39488     27 EF 03 F6 |                 mov     pb, urx_buff_p
3948c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39490     55 02 A0 FD |                 call    #control_read
39494     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
39498                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
39498                 | 
39498     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3949c     50 01 90 5D |         if_x0   jmp     #.other
394a0     68 02 D0 FE |                 loc     ptra, #clr_port_feat
394a4     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
394a8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
394ac     A0 02 A0 FD |                 call    #control_write
394b0     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
394b4     7C 01 90 5D |         if_x0   jmp     #.disconnect
394b8     B0 99 02 F6 |                 mov     hctwait, _100ms_
394bc     EF 02 A0 FD |                 call    #poll_waitx
394c0                 | 
394c0     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
394c4     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
394c8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
394cc     A0 02 A0 FD |                 call    #control_write
394d0                 | 
394d0     02 76 07 F6 |                 mov     htmp3, #2
394d4                 | .wait_reset
394d4     AC 99 02 F6 |                 mov     hctwait, _8ms_
394d8     EF 02 A0 FD |                 call    #poll_waitx
394dc     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
394e0     27 EF 03 F6 |                 mov     pb, urx_buff_p
394e4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
394e8     55 02 A0 FD |                 call    #control_read
394ec     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
394f0     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
394f4     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
394f8                 | 
394f8     10 02 D0 FE |                 loc     ptra, #clr_port_feat
394fc     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
39500     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39504     A0 02 A0 FD |                 call    #control_write
39508                 | 
39508     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3950c                 | .wait_recover
3950c     A7 99 02 F6 |                 mov     hctwait, _1ms_
39510     EF 02 A0 FD |                 call    #poll_waitx
39514     FD 71 6F FB |                 djnz    htmp,#.wait_recover
39518                 | 
39518     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3951c     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
39520     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
39524                 | 
39524     00 08 00 FF 
39528     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3952c     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
39530     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
39534     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
39538     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3953c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39540     48 01 90 5D |         if_nz   jmp     #.done
39544                 | .get_dev_desc
39544     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
39548     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3954c     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
39550     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
39554     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
39558     01 71 57 FC |                 wrword  htmp, ptra[wValue]
3955c     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
39560     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39564     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
39568     AC 99 02 F6 |                 mov     hctwait, _8ms_
3956c     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
39570     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
39574     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
39578     BE 00 A0 FD |                 call    #calc_crc5
3957c     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
39580     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
39584     F7 AD C2 FA |                 rdbyte  total_data, pb
39588     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3958c     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
39590     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39594     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
39598     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3959c     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
395a0                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
395a0     9F 99 02 F6 |                 mov     hctwait, _500us_
395a4     EF 02 A0 FD |                 call    #poll_waitx
395a8     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
395ac     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
395b0     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
395b4     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
395b8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
395bc     CC 00 90 5D |         if_nz   jmp     #.done
395c0     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
395c4     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
395c8     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
395cc     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
395d0     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
395d4     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
395d8     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
395dc     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
395e0     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
395e4     A4 00 90 CD |         if_b    jmp     #.done
395e8     6C F0 BF FD |                 call    #hparse_con_desc
395ec     9C 00 90 FD |                 jmp     #.done
395f0                 | 
395f0                 | .other
395f0     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
395f4     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
395f8     28 00 90 AD |         if_x1   jmp     #.reset_feature
395fc     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
39600     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
39604     1C 00 90 AD |         if_x1   jmp     #.reset_feature
39608     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3960c     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
39610     10 00 90 AD |         if_x1   jmp     #.reset_feature
39614     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
39618     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3961c     04 00 90 AD |         if_x1   jmp     #.reset_feature
39620     68 00 90 FD |                 jmp     #.done
39624                 | .reset_feature
39624     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
39628     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3962c     A0 02 A0 FD |                 call    #control_write
39630     58 00 90 FD |                 jmp     #.done
39634                 | .disconnect
39634                 | 
39634     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
39638     00 70 E3 F8 |                 getbyte htmp
3963c     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
39640     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
39644     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
39648     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3964c     00 76 06 A6 |         if_z    mov     kb_led_states, #0
39650     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
39654                 |         if EMUPAD_MAX_PLAYER > 0
39654                 |         end
39654                 |         if HAVE_MOUSE
39654     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
39658     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3965c     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
39660                 |         end
39660                 |         if HAVE_HIDPAD
39660     14 0A F0 FE |                 loc ptrb,#hidpad_report
39664     2D 71 03 F6 |                 mov htmp,hdev_port
39668     01 70 E7 F2 |                 cmpsub htmp,#1
3966c     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
39670     B8 F3 03 F1 |                 add ptrb,htmp
39674     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
39678     80 01 6C FC |                 wrlong #0,ptrb
3967c                 |         end
3967c                 | 
3967c     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
39680     00 00 C4 F8 |                 setbyte #0
39684     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
39688     00 00 04 F6 |                 mov     0-0, #0
3968c                 | 
3968c                 | .done
3968c     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
39690     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
39694     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
39698     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3969c     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
396a0     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
396a4                 | 
396a4     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
396a8     27 EF 03 F6 |                 mov     pb, urx_buff_p
396ac     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
396b0     55 02 A0 FD |                 call    #control_read
396b4     00 69 06 FB |                 rdlong  hub_port_status, ptra
396b8                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
396b8     2D 00 64 FD |                 ret
396bc                 | 
396bc                 | '------------------------------------------------------------------------------
396bc                 | ' Partially populated SETUP packets
396bc                 | '------------------------------------------------------------------------------
396bc     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
396bd     06          |                 byte    REQ_GET_DESC
396be     00 01       |                 word    TYPE_DEVICE << 8
396c0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
396c2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
396c4     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
396c5     06          |                 byte    REQ_GET_DESC
396c6     00 02       |                 word    TYPE_CONFIG << 8
396c8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
396ca     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
396cc     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
396cd     09          |                 byte    REQ_SET_CONFIG
396ce     00 00       |                 word    0       ' Configuration value
396d0     00 00       |                 word    0       ' Zero
396d2     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
396d4     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
396d5     05          |                 byte    REQ_SET_ADDR
396d6     00 00       |                 word    0       ' Zero
396d8     00 00       |                 word    0       ' Zero
396da     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
396dc                 | '------------------------------------------------------------------------------
396dc                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
396dc                 | ' wValue field dictates which protocol should be used.
396dc                 | '
396dc                 | ' When initialized, all devices default to report protocol. However the host
396dc                 | ' should not make any assumptions about the device state and should set the
396dc                 | ' desired protocol whenever initializing a device.
396dc                 | '------------------------------------------------------------------------------
396dc     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
396dd     0B          |                 byte    HID_SET_PROTO
396de     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
396e0                 |                                                 ' (HID 1.11 Section 7.2.6).
396e0     00 00       |                 word    0               ' Interface index number.
396e2     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
396e4                 | '------------------------------------------------------------------------------
396e4     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
396e5     0A          |                 byte    HID_SET_IDLE
396e6     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
396e8                 |                                         ' reporting until a change is detected in the report data
396e8                 | 
396e8                 |                                         ' (HID 1.11 Section 7.2.4).
396e8     00 00       |                 word    0       ' Interface index number.
396ea     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
396ec     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
396ed     09          |                 byte    HID_SET_REPORT
396ee     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
396f0                 |                                         ' (HID 1.11 Section 7.2.2).
396f0     00 00       |                 word    0       ' Interface index number.
396f2     00 00       |                 word    0       ' Size of the report, in bytes.
396f4     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
396f5     06          |                 byte    REQ_GET_DESC
396f6     00 22       |                 word    TYPE_REPORT << 8
396f8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
396fa     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
396fc                 | '------------------------------------------------------------------------------
396fc     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
396fd     06          |                 byte    REQ_GET_DESC
396fe     00 29       |                 word    TYPE_HUB << 8
39700     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
39702     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39704     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
39705     03          |                 byte    REQ_SET_FEATURE
39706     00 00       |                 word    0       ' port power
39708     01 00       |                 word    1       ' Port index number (1+)
3970a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3970c     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3970d     01          |                 byte    REQ_CLEAR_FEATURE
3970e     00 00       |                 word    0       ' port power
39710     01 00       |                 word    1       ' Port index number (1+)
39712     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39714     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
39715     00          |                 byte    REQ_GET_STATUS
39716     00 00       |                 word    0
39718     01 00       |                 word    1       ' Port index number (1+)
3971a     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3971c                 | '------------------------------------------------------------------------------
3971c                 | if _HAVE_GAMEPAD
3971c     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
39720                 | ps3_command_buff
39720     00 00 00 00 
39724     00          |                 byte    $00, $00, $00, $00, $00
39725     00 00 00 00 
39729     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3972a     FF 27 10 00 
3972e     32          |                 byte    $FF, $27, $10, $00, $32
3972f     FF 27 10 00 
39733     32          |                 byte    $FF, $27, $10, $00, $32
39734     FF 27 10 00 
39738     32          |                 byte    $FF, $27, $10, $00, $32
39739     FF 27 10 00 
3973d     32          |                 byte    $FF, $27, $10, $00, $32
3973e     00 00 00 00 
39742     00          |                 byte    $00, $00, $00, $00, $00
39743     00 00 00 00 
39747     00          |                 byte    $00, $00, $00, $00, $00
39748     00 00 00 00 
3974c     00          |                 byte    $00, $00, $00, $00, $00
3974d     00 00 00    |                 byte    $00, $00, $00
39750                 | '------------------------------------------------------------------------------
39750     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
39753                 |                                         ' 0x01 All blinking
39753                 |                                         ' 0x02 1 flashes, then on
39753                 |                                         ' 0x03 2 flashes, then on
39753                 |                                         ' 0x04 3 flashes, then on
39753                 |                                         ' 0x05 4 flashes, then on
39753                 |                                         ' 0x06 1 on
39753                 |                                         ' 0x07 2 on
39753                 |                                         ' 0x08 3 on
39753                 |                                         ' 0x09 4 on
39753                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
39753                 |                                         ' 0x0B Blinking*
39753                 |                                         ' 0x0C Slow blinking*
39753                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
39753     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
39756     00          |                 byte    $00             ' Left rumble
39757     00          |                 byte    $00             ' Right rumble
39758     00 00 00    |                 byte    $00, $00, $00
3975b     00          | end
3975c                 | alignl
3975c                 | 
3975c                 | if HAVE_MOUSE
3975c     00 00 00 00 
39760     00 00 00 00 | mouse_limits long 0[2]
39764     00 00 00 00 | mouse_outptr long 0
39768                 | end
39768                 | 
39768                 | if KEYQUEUE_SIZE > 0
39768     00          | keyq_head byte 0
39769     00          | keyq_tail byte 0
3976a     00 00 00 00 
      ...             
39966     00 00 00 00 
3996a     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3996c                 | alignl
3996c                 | end
3996c                 | 
3996c                 | if EMUPAD_MAX_PLAYER > 0
3996c                 | emupad_rule_buffer
3996c                 | if EMUPAD_BUILTIN_RULES
3996c                 | file "padmap_builtin.dat"
3996c                 | end
3996c                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3996c                 | '' Default rule directly follows!
3996c                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3996c                 | end
3996c                 | 
3996c                 | '------------------------------------------------------------------------------
3996c                 | ' The USB data cache area gets zero-filled at every device disconnect
3996c                 | '------------------------------------------------------------------------------
3996c                 | usb_cache_start
3996c                 | 
3996c                 | ' HID descriptor and report buffers
3996c                 | if !!OVERLAP_MEMORY
3996c     00 00 00 00 
      ...             
3a064     00 00 00 00 
3a068     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3a06c                 | end
3a06c     00 00 00 00 
3a070     00 00 00 00 | hkbd_report     byte    0[8]
3a074     00 00 00 00 | hkbd_led_rep    byte    0
3a078                 | alignl
3a078                 | 
3a078                 | if HAVE_HIDPAD
3a078     00 00 00 00 
      ...             
3a134     00 00 00 00 
3a138     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3a13c                 | end
3a13c                 | 
3a13c                 | ' HUB descriptor
3a13c     00          | hub_descr       byte    0   ' bDescLength
3a13d     00          |                 byte    0   ' bDescriptorType
3a13e     00          |                 byte    0   ' bNbrPorts
3a13f     00 00       |                 word    0   ' wHubCharacteristics
3a141     00          |                 byte    0   ' bPwrOn2PwrGood
3a142     00          |                 byte    0   ' bHubContrCurrent
3a143     00          |                 byte    0   ' DeviceRemoveable
3a144     00          |                 byte    0   ' PortPwrCtrlMask
3a145                 | 
3a145                 | usb_cache_end
3a145                 | 
3a145                 | if HAVE_MOUSE
3a145     00 00 00 00 | mouse_xacc      long 0
3a149     00 00 00 00 | mouse_yacc      long 0
3a14d     00 00 00 00 | mouse_zacc      long 0
3a151     00          | mouse_bstate    byte 0
3a152     00          | mouse_lpending  byte 0
3a153     00          | mouse_rpending  byte 0
3a154     00          | mouse_mpending  byte 0
3a155     00          | mouse_lock      byte 0
3a156     00 00 00    |                 byte 0[3] ' padding
3a159                 | end
3a159                 | 
3a159     00 00 00 00 
      ...             
3a1d1     00 00 00 00 
3a1d5     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3a1d9     00 00 00 00 
3a1dd     00 00 00 00 
3a1e1     00 00 00 00 
3a1e5     00 00 00 00 
3a1e9     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3a1eb     00 00 00 00 
      ...             
3a2e3     00 00 00 00 
3a2e7     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3a2eb                 | 
3a2eb     00          | driver_cog      byte    0                       ' Current driver cog + 1
3a2ec                 | 	alignl
3a2ec                 | _audio096_spin2_dat_
3a2ec                 | 
3a2ec                 | audio       org     0
3a2ec                 | 
3a2ec     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3a2f0     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
3a2f4     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3a2f8                 |  
3a2f8     01 EC 63 FD |             cogid   pa                   ' compute cogid
3a2fc     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3a300     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3a304     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3a308                 | 
3a308     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
3a30c     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3a310     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3a314     0F 24 06 FC |             wrpin   dac2,#right
3a318     0F 00 1E FC |             wxpin   #256,#right    
3a31c     41 9C 64 FD |             dirh    #left addpins 1
3a320     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3a324     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3a328     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
3a32c                 |             
3a32c                 | '---------------------------------------------------------------------------------        
3a32c                 | '----------------- The main loop -------------------------------------------------
3a32c                 | '---------------------------------------------------------------------------------
3a32c                 | 
3a32c     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3a330     10 00 90 CD |       if_c  jmp     #loop1
3a334                 |   
3a334     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3a338     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
3a33c     D5 00 80 F1 |             sub     0-0,a40000000
3a340     FD 01 6E FB |             djnz    cn,#p402
3a344                 |     
3a344     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3a348     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
3a34c     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3a350     01 00 06 C6 |     if_c    mov     cn,#1
3a354     DA 02 3A F3 |             fle     ct,time3 wcz
3a358     02 00 06 C6 |     if_c    mov     cn,#2     
3a35c     DB 02 3A F3 |             fle     ct,time4 wcz
3a360     03 00 06 C6 |     if_c    mov     cn,#3
3a364     DC 02 3A F3 |             fle     ct,time5 wcz
3a368     04 00 06 C6 |     if_c    mov     cn,#4
3a36c     DD 02 3A F3 |             fle     ct,time6 wcz
3a370     05 00 06 C6 |     if_c    mov     cn,#5
3a374     DE 02 3A F3 |             fle     ct,time7 wcz
3a378     06 00 06 C6 |     if_c    mov     cn,#6
3a37c     DF 02 3A F3 |             fle     ct,time8 wcz
3a380     07 00 06 C6 |     if_c    mov     cn,#7
3a384                 | 
3a384                 | 
3a384                 | '----------------------------------------------------------------------------------
3a384                 | '------------- Compute channel samples --------------------------------------------
3a384                 | '----------------------------------------------------------------------------------
3a384                 | 
3a384                 | 
3a384     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
3a388     06 C0 65 F0 |             shl     channeladd,#6
3a38c     E0 F0 03 F1 |             add     ptra,channeladd
3a390                 | 
3a390     28 16 64 FD |             setq    #11                        	' read parameters
3a394     00 D7 05 FB |             rdlong  pointer0,ptra
3a398                 |     	    
3a398     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
3a39c     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3a3a0     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
3a3a4     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
3a3a8     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
3a3ac     00 C4 0D F2 |             cmp     qq,#0 wz                         
3a3b0     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3a3b4     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3a3b8                 |             
3a3b8     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
3a3bc     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3a3c0     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
3a3c4                 | 
3a3c4     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
3a3c8     EC 08 3A F9 |             getword oldrs,sample0,#1
3a3cc     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3a3d0     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
3a3d4     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
3a3d8     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
3a3dc                 | 
3a3dc     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3a3e0     00 04 02 F6 |             mov     dt0,0-0    
3a3e4     D7 04 82 F1 |             sub     dt0,time0
3a3e8                 |             
3a3e8     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
3a3ec     FB 00 00 F1 |             add     0-0,afreq0  	
3a3f0                 |             
3a3f0                 | '---- envelopes
3a3f0                 |             
3a3f0     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
3a3f4     20 00 00 AF 
3a3f8     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
3a3fc     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3a400                 | 
3a400     FB 48 02 F6 |             mov     envs1,afreq0
3a404     F5 48 02 FA |             mul     envs1,envspd0
3a408     24 E7 01 F1 |             add     envph0,envs1 
3a40c                 | 
3a40c     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3a410     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3a414     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
3a418     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
3a41c     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3a420     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
3a424     00 46 06 36 |     if_ge   mov     envlo,#0
3a428     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
3a42c     16 E6 65 30 |     if_ge   shl     envph0,#22
3a430                 | 
3a430     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
3a434     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
3a438     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
3a43c     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3a440     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
3a444     24 49 32 F9 |             getword envs1,envs1,#0		' current value
3a448     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
3a44c     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3a450     23 49 02 FA |             mul     envs1,envlo
3a454     25 49 02 F1 |             add     envs1,envs2
3a458     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
3a45c                 |             
3a45c     1B DA 0D F4 | p410        testb   sstart0, #27 wz
3a460     1B C6 61 AD |     if_z    getrnd  spl
3a464     58 00 90 AD |     if_z    jmp     #p406
3a468                 |  
3a468     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
3a46c     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
3a470     08 D6 45 F0 |             shr     pointer0,#8
3a474                 |          
3a474     1F DA 0D F4 |             testb   sstart0,#31 wz            
3a478     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3a47c     1C DA 0D F4 |             testb   sstart0,#28 wz            
3a480     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3a484                 |         
3a484     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
3a488     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
3a48c     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
3a490                 |             
3a490     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
3a494     ED C4 01 F1 |             add     qq,sstart0            
3a498                 | 
3a498     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3a49c     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
3a4a0     1C 01 B0 1D |     if_gt   call    #cache_read
3a4a4                 |          
3a4a4     1F DA 0D F4 |             testb   sstart0,#31 wz 
3a4a8     08 C6 65 50 |     if_nz   shl     spl,#8
3a4ac     08 D6 65 50 |     if_nz   shl     pointer0,#8
3a4b0     07 D6 65 A0 |     if_z    shl     pointer0,#7
3a4b4     1C DA 0D F4 |             testb   sstart0,#28 wz            
3a4b8     01 D6 45 A0 |     if_z    shr     pointer0,#1    
3a4bc     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3a4c0                 | 
3a4c0                 | 
3a4c0     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
3a4c4     00 C6 01 F6 |             mov     spl,0-0
3a4c8     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
3a4cc     00 C6 01 F6 |             mov     spl,0-0
3a4d0                 | 
3a4d0     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
3a4d4     00 0A 02 F6 |             mov     ls0,0-0
3a4d8     20 00 00 FF 
3a4dc     00 C4 05 F6 |             mov     qq,##16384
3a4e0     FE C4 81 F1 |             sub     qq,apan0
3a4e4     E2 C6 31 FA |             scas    spl,qq
3a4e8     00 0C 02 F6 |             mov     rs0, 0-0
3a4ec                 | 
3a4ec     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
3a4f0     06 11 02 F1 |             add     rs,rs0
3a4f4     03 0F 82 F1 |             sub     ls,oldls
3a4f8     05 0F 02 F1 |             add     ls,ls0
3a4fc                 |    
3a4fc     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
3a500     05 D9 21 F9 |             setword sample0,ls0,#0
3a504                 |             
3a504     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3a508     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
3a50c     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
3a510                 |   '  if_z    mov     sample0,#0
3a510     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
3a514     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
3a518     04 00 00 AF 
3a51c     00 B0 05 A1 |     if_z    add     time1,##2048
3a520     D8 B2 01 A6 |     if_z    mov     time2,time1
3a524     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
3a528                 | 
3a528     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
3a52c     00 D7 65 FC |             wrlong  pointer0,ptra
3a530     08 E7 65 FC |             wrlong  envph0,ptra[8]
3a534     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
3a538                 |                       
3a538     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
3a53c     FF C3 25 A7 |     if_z    decmod  front, #511          
3a540                 |          
3a540     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
3a544     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
3a548     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
3a54c     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
3a550                 | 	    
3a550                 | 		    
3a550     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
3a554     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
3a558     04 15 02 F6 |             mov     newsample, oldrs       
3a55c                 | 
3a55c     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
3a560     02 AF 01 F1 |             add     time0,dt0    
3a564                 |                                      
3a564     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
3a568     D8 FD 9F AD |     if_z    jmp     #loop1
3a56c     02 C5 01 F6 |             mov     qq,dt0
3a570                 | 
3a570                 |     
3a570                 |             
3a570     01 4E 36 F0 | p301        rol     dropper,#1 wc
3a574     40 00 90 3D |     if_nc   jmp     #p399
3a578     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3a57c     00 C2 9D F2 |             cmpr    front, #0-0 wcz
3a580     F4 FF 9F AD |     if_e    jmp     #p398   
3a584                 | 		
3a584     00 1A 0E F2 | 	    cmp     scbase,#0 wz
3a588     20 00 90 AD |     if_z    jmp     #p302	   
3a58c                 |   
3a58c     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
3a590     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
3a594     02 1E 66 C0 |     if_c    shl     scptr2,#2
3a598     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
3a59c     60 1E 66 FC |             wrlong  scptr2,#$60
3a5a0     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
3a5a4     01 00 00 CF 
3a5a8     7F 1C 06 C7 |     if_c    incmod  scptr,##639
3a5ac                 | 			    
3a5ac     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
3a5b0     00 00 00 FF 
3a5b4     FF C3 05 F7 |             incmod  front, ##511
3a5b8     ED C5 6D FB | p399        djnz    qq,#p301
3a5bc                 |             
3a5bc     6C FD 9F FD |             jmp     #loop            'loop
3a5c0                 | 
3a5c0                 | '----------------------------------------------------------------------------------
3a5c0                 | '------------- This is the end of the main loop -----------------------------------
3a5c0                 | '----------------------------------------------------------------------------------
3a5c0                 | 
3a5c0                 | '----------------------------------------------------------------------------------
3a5c0                 | '------------- PSRAM cache ----------- --------------------------------------------
3a5c0                 | '----------------------------------------------------------------------------------
3a5c0                 | 
3a5c0                 | ' There are 8 cache pointers for 8 channels
3a5c0                 | ' if 24 higher bits of address=cache, then get a word from the cache
3a5c0                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3a5c0                 | 
3a5c0                 | 
3a5c0     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
3a5c4                 |             
3a5c4     E2 40 02 F6 | 	    mov     addrhi,qq		
3a5c8     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
3a5cc     14 01 96 F9 | 	    alts    cn,#cache1            
3a5d0     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
3a5d4     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3a5d8                 | 	
3a5d8     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
3a5dc     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
3a5e0     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
3a5e4     08 38 66 F0 | 	    shl     cmd,#8
3a5e8     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3a5ec     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
3a5f0     08 3A 66 F0 |             shl     hubaddr,#8                  '
3a5f4     13 3B 02 F1 |             add     hubaddr,hubptr 
3a5f8     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
3a5fc     28 04 64 FD |             setq    #2                          ' write 3 longs
3a600     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
3a604     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3a608     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
3a60c                 |             
3a60c                 | 	
3a60c     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
3a610     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
3a614     13 C5 01 F1 | 	    add     qq,hubptr
3a618     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3a61c     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
3a620                 |           
3a620                 | 
3a620                 | '--------------------------------------------------------------------------
3a620                 | '------ Interrupt service -------------------------------------------------
3a620                 | '------ Output the sample, get the next one if exists ---------------------
3a620                 | '--------------------------------------------------------------------------
3a620                 | 
3a620     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
3a624     0F D0 25 FC |             wypin   rsample,#right       '4
3a628     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
3a62c     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
3a630     FF F3 07 57 |     if_ne   incmod  ptrb,#511
3a634     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
3a638     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
3a63c                 |     
3a63c     F5 FF 3B FB |             reti1                        '17/19 
3a640                 |           
3a640                 | '---------------------------------------------------------------------------
3a640                 | '-------- End of interrupt -------------------------------------------------
3a640                 | '---------------------------------------------------------------------------    
3a640                 | 
3a640                 | 
3a640                 | '---------------------------------------------------------------------------
3a640                 | '------- Variables ---------------------------------------------------------
3a640                 | '---------------------------------------------------------------------------
3a640                 | 
3a640                 | ' constants
3a640                 | 
3a640     00 00 00 40 | a40000000   long $40000000
3a644     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3a648                 | 
3a648                 | ' Time variables
3a648                 | 
3a648     00 00 00 00 | time0       long 0    ' Global sample computing time
3a64c     01 00 00 00 | time1       long 1    ' Local channels time
3a650     02 00 00 00 | time2       long 2
3a654     03 00 00 00 | time3       long 3
3a658     04 00 00 00 | time4       long 4
3a65c     05 00 00 00 | time5       long 5
3a660     06 00 00 00 | time6       long 6
3a664     07 00 00 00 | time7       long 7
3a668     08 00 00 00 | time8       long 8
3a66c                 | 
3a66c     00 00 00 00 | channeladd long 0
3a670                 | 
3a670     00 00 00 00 | front       long 0
3a674                 | 
3a674                 | ' temporary variables 
3a674     00 00 00 00 | qq          long 0
3a678     00 00 00 00 | spl         long 0
3a67c     00 00 00 00 | zero        long 0
3a680     00 00 00 00 | mailbox     long 0
3a684     00 00 00 00 | mailbox2 long 0
3a688                 | 
3a688                 | ' Interrupt ISR variables
3a688                 | 
3a688     00 00 00 00 | lsample     long 0
3a68c     00 00 00 00 | rsample     long 0
3a690     00 00 00 00 | lsnext      long 0
3a694     00 00 00 00 | rsnext      long 0 
3a698                 | 
3a698                 | ' channel parameter block
3a698                 | 
3a698     00 00 00 00 | pointer0    long 0     
3a69c     00 00 00 00 | sample0     long 0
3a6a0     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
3a6a4     00 00 00 00 | lstart0     long 0
3a6a8     00 00 00 00 | lend0       long 0
3a6ac     00 00 00 00 | volpan0     long 0
3a6b0     00 00 00 00 | freqskip0   long 0
3a6b4     00 00 00 00 | command0    long 0
3a6b8     00 00 00 00 | envph0	    long 0
3a6bc     00 00 00 00 | envptr0	    long 0
3a6c0     00 00 00 00 | envspd0	    long 0
3a6c4     00 00 00 00 | envlen0	    long 0
3a6c8     00 00 00 00 | res5	    long 0
3a6cc     00 00 00 00 | res6	    long 0
3a6d0     00 00 00 00 | res7	    long 0
3a6d4     00 00 00 00 | res8	    long 0
3a6d8                 | 
3a6d8     00 00 00 00 | afreq0      long 0
3a6dc     00 00 00 00 | askip0      long 0
3a6e0     00 00 00 00 | avol0       long 0
3a6e4     00 00 00 00 | apan0       long 0
3a6e8                 | 
3a6e8     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3a6ec     00 00 00 00 | cn          long 0
3a6f0     00 00 00 00 | ct          long 0
3a6f4     00 00 00 00 | dt0         long 0
3a6f8                 | 
3a6f8                 | ' Samples
3a6f8     00 00 00 00 | oldls       long 0
3a6fc     00 00 00 00 | oldrs       long 0
3a700                 | 
3a700     00 00 00 00 | ls0         long 0
3a704     00 00 00 00 | rs0         long 0
3a708                 | 
3a708     00 00 00 00 | ls          long 0    
3a70c     00 00 00 00 | rs          long 0
3a710                 | 
3a710     00 00 00 00 | oldsample   long 0
3a714     00 00 00 00 | newsample   long 0
3a718                 | 
3a718     00 00 00 00 | nrsample    long 0
3a71c     00 00 00 00 | nlsample    long 0
3a720                 | 
3a720     00 00 00 00 | scbase long 0
3a724     00 00 00 00 | scptr long 0
3a728     00 00 00 00 | scptr2 long 0
3a72c     00 00 00 00 | scope long 0
3a730                 | 
3a730     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
3a734     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3a738                 | 
3a738     00 18 07 00 | hubptr      long $71800
3a73c     00 00 00 00 | cache1      long 0
3a740     00 00 00 00 | cache2      long 0
3a744     00 00 00 00 | cache3      long 0
3a748     00 00 00 00 | cache4      long 0
3a74c     00 00 00 00 | cache5      long 0
3a750     00 00 00 00 | cache6      long 0
3a754     00 00 00 00 | cache7      long 0
3a758     00 00 00 00 | cache8      long 0
3a75c                 | 
3a75c                 | 
3a75c     00 00 00 00 | cmd         long 0
3a760     00 00 00 00 | hubaddr     long 0
3a764     00 01 00 00 | count       long 256
3a768     00 00 00 00 | addrlo long 0
3a76c     00 00 00 00 | addrhi long 0
3a770     00 00 00 00 | pointer00 long 0
3a774     00 00 00 00 | envhi long 0
3a778     00 00 00 00 | envlo long 0
3a77c     00 00 00 00 | envs1 long 0
3a780     00 00 00 00 | envs2 long 0
3a784     00 00 00 00 | noise0 long 0
3a788     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
3a78c     00 00 00 00 
3a790     00 00 00 00 | null  			long 	0,0           ' for channel reset
3a794                 | 	alignl
3a794                 | __system__dat_
3a794     00 00 00 00 
3a798     00 00 00 00 | 	byte	$00[8]
3a79c     03 00 00 00 
3a7a0     00 00 00 00 
3a7a4     00 00 00 00 
3a7a8     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a7ac     00 00 00 00 
      ...             
3aa38     00 00 00 00 
3aa3c     00 00 00 00 | 	byte	$00[660]
3aa40     00 00 60 09 | 	long	(150 {__system____root_opendir})<<20
3aa44     00 00 70 09 | 	long	(151 {__system____root_closedir})<<20
3aa48     00 00 80 09 | 	long	(152 {__system____root_readdir})<<20
3aa4c     00 00 90 09 | 	long	(153 {__system____root_stat})<<20
3aa50     00 00 00 00 
3aa54     00 00 00 00 
3aa58     00 00 00 00 
3aa5c     00 00 00 00 
3aa60     00 00 00 00 
3aa64     00 00 00 00 
3aa68     00 00 00 00 | 	byte	$00[28]
3aa6c     D4 AA 03 00 | 	long	@@@__system__dat_ + 832
3aa70     D7 AA 03 00 | 	long	@@@__system__dat_ + 835
3aa74     F8 AA 03 00 | 	long	@@@__system__dat_ + 868
3aa78     11 AB 03 00 | 	long	@@@__system__dat_ + 893
3aa7c     2C AB 03 00 | 	long	@@@__system__dat_ + 920
3aa80     46 AB 03 00 | 	long	@@@__system__dat_ + 946
3aa84     56 AB 03 00 | 	long	@@@__system__dat_ + 962
3aa88     68 AB 03 00 | 	long	@@@__system__dat_ + 980
3aa8c     7A AB 03 00 | 	long	@@@__system__dat_ + 998
3aa90     8C AB 03 00 | 	long	@@@__system__dat_ + 1016
3aa94     98 AB 03 00 | 	long	@@@__system__dat_ + 1028
3aa98     A9 AB 03 00 | 	long	@@@__system__dat_ + 1045
3aa9c     BD AB 03 00 | 	long	@@@__system__dat_ + 1065
3aaa0     C7 AB 03 00 | 	long	@@@__system__dat_ + 1075
3aaa4     D7 AB 03 00 | 	long	@@@__system__dat_ + 1091
3aaa8     E6 AB 03 00 | 	long	@@@__system__dat_ + 1106
3aaac     FC AB 03 00 | 	long	@@@__system__dat_ + 1128
3aab0     15 AC 03 00 | 	long	@@@__system__dat_ + 1153
3aab4     29 AC 03 00 | 	long	@@@__system__dat_ + 1173
3aab8     37 AC 03 00 | 	long	@@@__system__dat_ + 1187
3aabc     4B AC 03 00 | 	long	@@@__system__dat_ + 1207
3aac0     57 AC 03 00 | 	long	@@@__system__dat_ + 1219
3aac4     69 AC 03 00 | 	long	@@@__system__dat_ + 1237
3aac8     81 AC 03 00 | 	long	@@@__system__dat_ + 1261
3aacc     93 AC 03 00 | 	long	@@@__system__dat_ + 1279
3aad0     A6 AC 03 00 | 	long	@@@__system__dat_ + 1298
3aad4     4F 4B 00 4E 
3aad8     75 6D 65 72 
3aadc     69 63 61 6C 
3aae0     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3aae4     75 6D 65 6E 
3aae8     74 20 6F 75 
3aaec     74 20 6F 66 
3aaf0     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3aaf4     61 69 6E 00 
3aaf8     52 65 73 75 
3aafc     6C 74 20 6E 
3ab00     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3ab04     65 70 72 65 
3ab08     73 65 6E 74 
3ab0c     61 62 6C 65 
3ab10     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3ab14     65 67 61 6C 
3ab18     20 6D 75 6C 
3ab1c     74 69 62 79 
3ab20     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3ab24     65 71 75 65 
3ab28     6E 63 65 00 
3ab2c     4E 6F 20 73 
3ab30     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3ab34     66 69 6C 65 
3ab38     20 6F 72 20 
3ab3c     64 69 72 65 
3ab40     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3ab44     79 00 42 61 
3ab48     64 20 66 69 
3ab4c     6C 65 20 6E 
3ab50     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3ab54     72 00 50 65 
3ab58     72 6D 69 73 
3ab5c     73 69 6F 6E 
3ab60     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3ab64     69 65 64 00 
3ab68     4E 6F 74 20 
3ab6c     65 6E 6F 75 
3ab70     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3ab74     65 6D 6F 72 
3ab78     79 00 54 65 
3ab7c     6D 70 6F 72 
3ab80     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3ab84     66 61 69 6C 
3ab88     75 72 65 00 
3ab8c     46 69 6C 65 
3ab90     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3ab94     73 74 73 00 
3ab98     49 6E 76 61 
3ab9c     6C 69 64 20 
3aba0     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3aba4     6D 65 6E 74 
3aba8     00 54 6F 6F 
3abac     20 6D 61 6E 
3abb0     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3abb4     65 6E 20 66 
3abb8     69 6C 65 73 
3abbc     00 49 2F 4F 
3abc0     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3abc4     6F 72 00 4E 
3abc8     6F 74 20 61 
3abcc     20 64 69 72 
3abd0     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3abd4     72 79 00 49 
3abd8     73 20 61 20 
3abdc     64 69 72 65 
3abe0     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3abe4     79 00 52 65 
3abe8     61 64 20 6F 
3abec     6E 6C 79 20 
3abf0     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3abf4     20 73 79 73 
3abf8     74 65 6D 00 
3abfc     46 75 6E 63 
3ac00     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3ac04     20 6E 6F 74 
3ac08     20 69 6D 70 
3ac0c     6C 65 6D 65 
3ac10     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3ac14     00 44 69 72 
3ac18     65 63 74 6F 
3ac1c     72 79 20 6E 
3ac20     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3ac24     6D 70 74 79 
3ac28     00 4E 61 6D 
3ac2c     65 20 74 6F 
3ac30     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3ac34     6E 67 00 44 
3ac38     65 76 69 63 
3ac3c     65 20 6E 6F 
3ac40     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3ac44     65 6B 61 62 
3ac48     6C 65 00 42 
3ac4c     61 64 20 61 
3ac50     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3ac54     73 73 00 42 
3ac58     72 6F 6B 65 
3ac5c     6E 20 63 6F 
3ac60     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3ac64     74 69 6F 6E 
3ac68     00 44 65 76 
3ac6c     69 63 65 20 
3ac70     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3ac74     65 73 6F 75 
3ac78     72 63 65 20 
3ac7c     62 75 73 79 
3ac80     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3ac84     73 73 20 64 
3ac88     65 76 69 63 
3ac8c     65 20 6C 69 
3ac90     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3ac94     6F 20 73 70 
3ac98     61 63 65 20 
3ac9c     6F 6E 20 64 
3aca0     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3aca4     65 00 55 6E 
3aca8     6B 6E 6F 77 
3acac     6E 20 65 72 
3acb0     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3acb4     00 00 00 00 
3acb8     00 00 00 00 | 	byte	$00[8]
3acbc     05 00 00 00 
3acc0     00 00 00 00 
3acc4     00 00 00 00 
3acc8     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3accc     00 00 00 00 | 	byte	$00, $00, $00, $00
3acd0     00 00 E0 0A | 	long	(174 {__system___tx})<<20
3acd4     00 00 F0 0A | 	long	(175 {__system___rx})<<20
3acd8     00 00 00 00 | 	byte	$00, $00, $00, $00
3acdc     00 00 00 0B | 	long	(176 {__system___rxtxioctl_0696})<<20
3ace0     00 00 10 0B | 	long	(177 {__system____dummy_flush_0697})<<20
3ace4     00 00 00 00 
3ace8     00 00 00 00 | 	byte	$00[8]
3acec     01 00 00 00 
3acf0     06 00 00 00 
3acf4     00 00 00 00 
3acf8     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3acfc     00 00 00 00 
3ad00     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3ad04     00 00 E0 0A | 	long	(174 {__system___tx})<<20
3ad08     00 00 F0 0A | 	long	(175 {__system___rx})<<20
3ad0c     00 00 00 00 | 	byte	$00, $00, $00, $00
3ad10     00 00 00 0B | 	long	(176 {__system___rxtxioctl_0696})<<20
3ad14     00 00 10 0B | 	long	(177 {__system____dummy_flush_0697})<<20
3ad18     00 00 00 00 
3ad1c     00 00 00 00 | 	byte	$00[8]
3ad20     01 00 00 00 
3ad24     06 00 00 00 
3ad28     00 00 00 00 
3ad2c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ad30     00 00 00 00 
3ad34     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3ad38     00 00 E0 0A | 	long	(174 {__system___tx})<<20
3ad3c     00 00 F0 0A | 	long	(175 {__system___rx})<<20
3ad40     00 00 00 00 | 	byte	$00, $00, $00, $00
3ad44     00 00 00 0B | 	long	(176 {__system___rxtxioctl_0696})<<20
3ad48     00 00 10 0B | 	long	(177 {__system____dummy_flush_0697})<<20
3ad4c     00 00 00 00 
      ...             
3aebc     00 00 00 00 
3aec0     00 00 00 00 | 	byte	$00[376]
3aec4     C8 AE 03 00 | 	long	@@@__system__dat_ + 1844
3aec8     00 00 00 00 
3aecc     00 00 00 00 
3aed0     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aed4                 | 	alignl
3aed4                 | _fatfs_cc_dat_
3aed4     C7 00 FC 00 
3aed8     E9 00 E2 00 
3aedc     E4 00 E0 00 
3aee0     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3aee4     EA 00 EB 00 
3aee8     E8 00 EF 00 
3aeec     EE 00 EC 00 
3aef0     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3aef4     C9 00 E6 00 
3aef8     C6 00 F4 00 
3aefc     F6 00 F2 00 
3af00     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3af04     FF 00 D6 00 
3af08     DC 00 F8 00 
3af0c     A3 00 D8 00 
3af10     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3af14     E1 00 ED 00 
3af18     F3 00 FA 00 
3af1c     F1 00 D1 00 
3af20     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3af24     BF 00 AE 00 
3af28     AC 00 BD 00 
3af2c     BC 00 A1 00 
3af30     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3af34     91 25 92 25 
3af38     93 25 02 25 
3af3c     24 25 C1 00 
3af40     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3af44     A9 00 63 25 
3af48     51 25 57 25 
3af4c     5D 25 A2 00 
3af50     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3af54     14 25 34 25 
3af58     2C 25 1C 25 
3af5c     00 25 3C 25 
3af60     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3af64     5A 25 54 25 
3af68     69 25 66 25 
3af6c     60 25 50 25 
3af70     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3af74     F0 00 D0 00 
3af78     CA 00 CB 00 
3af7c     C8 00 31 01 
3af80     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3af84     CF 00 18 25 
3af88     0C 25 88 25 
3af8c     84 25 A6 00 
3af90     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3af94     D3 00 DF 00 
3af98     D4 00 D2 00 
3af9c     F5 00 D5 00 
3afa0     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3afa4     DE 00 DA 00 
3afa8     DB 00 D9 00 
3afac     FD 00 DD 00 
3afb0     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3afb4     AD 00 B1 00 
3afb8     17 20 BE 00 
3afbc     B6 00 A7 00 
3afc0     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3afc4     B0 00 A8 00 
3afc8     B7 00 B9 00 
3afcc     B3 00 B2 00 
3afd0     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3afd4     61 00 1A 03 
3afd8     E0 00 17 03 
3afdc     F8 00 07 03 
3afe0     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3afe4     78 01 00 01 
3afe8     30 01 32 01 
3afec     06 01 39 01 
3aff0     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3aff4     2E 01 79 01 
3aff8     06 01 80 01 
3affc     4D 00 43 02 
3b000     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3b004     82 01 84 01 
3b008     84 01 86 01 
3b00c     87 01 87 01 
3b010     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3b014     8B 01 8B 01 
3b018     8D 01 8E 01 
3b01c     8F 01 90 01 
3b020     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3b024     93 01 94 01 
3b028     F6 01 96 01 
3b02c     97 01 98 01 
3b030     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3b034     9B 01 9C 01 
3b038     9D 01 20 02 
3b03c     9F 01 A0 01 
3b040     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3b044     A2 01 A4 01 
3b048     A4 01 A6 01 
3b04c     A7 01 A7 01 
3b050     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3b054     AB 01 AC 01 
3b058     AC 01 AE 01 
3b05c     AF 01 AF 01 
3b060     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3b064     B3 01 B3 01 
3b068     B5 01 B5 01 
3b06c     B7 01 B8 01 
3b070     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3b074     BB 01 BC 01 
3b078     BC 01 BE 01 
3b07c     F7 01 C0 01 
3b080     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3b084     C3 01 C4 01 
3b088     C5 01 C4 01 
3b08c     C7 01 C8 01 
3b090     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3b094     CB 01 CA 01 
3b098     CD 01 10 01 
3b09c     DD 01 01 00 
3b0a0     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3b0a4     12 01 F3 01 
3b0a8     03 00 F1 01 
3b0ac     F4 01 F4 01 
3b0b0     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3b0b4     22 02 12 01 
3b0b8     3A 02 09 00 
3b0bc     65 2C 3B 02 
3b0c0     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3b0c4     66 2C 3F 02 
3b0c8     40 02 41 02 
3b0cc     41 02 46 02 
3b0d0     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3b0d4     40 00 81 01 
3b0d8     86 01 55 02 
3b0dc     89 01 8A 01 
3b0e0     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3b0e4     5A 02 90 01 
3b0e8     5C 02 5D 02 
3b0ec     5E 02 5F 02 
3b0f0     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3b0f4     62 02 94 01 
3b0f8     64 02 65 02 
3b0fc     66 02 67 02 
3b100     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3b104     6A 02 62 2C 
3b108     6C 02 6D 02 
3b10c     6E 02 9C 01 
3b110     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3b114     9D 01 73 02 
3b118     74 02 9F 01 
3b11c     76 02 77 02 
3b120     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3b124     7A 02 7B 02 
3b128     7C 02 64 2C 
3b12c     7E 02 7F 02 
3b130     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3b134     82 02 A9 01 
3b138     84 02 85 02 
3b13c     86 02 87 02 
3b140     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3b144     B1 01 B2 01 
3b148     45 02 8D 02 
3b14c     8E 02 8F 02 
3b150     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3b154     B7 01 7B 03 
3b158     03 00 FD 03 
3b15c     FE 03 FF 03 
3b160     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3b164     86 03 88 03 
3b168     89 03 8A 03 
3b16c     B1 03 11 03 
3b170     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3b174     A3 03 A3 03 
3b178     C4 03 08 03 
3b17c     CC 03 03 00 
3b180     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3b184     8F 03 D8 03 
3b188     18 01 F2 03 
3b18c     0A 00 F9 03 
3b190     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3b194     F5 03 F6 03 
3b198     F7 03 F7 03 
3b19c     F9 03 FA 03 
3b1a0     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3b1a4     20 03 50 04 
3b1a8     10 07 60 04 
3b1ac     22 01 8A 04 
3b1b0     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3b1b4     0E 01 CF 04 
3b1b8     01 00 C0 04 
3b1bc     D0 04 44 01 
3b1c0     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3b1c4     00 00 7D 1D 
3b1c8     01 00 63 2C 
3b1cc     00 1E 96 01 
3b1d0     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3b1d4     00 1F 08 06 
3b1d8     10 1F 06 06 
3b1dc     20 1F 08 06 
3b1e0     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3b1e4     40 1F 06 06 
3b1e8     51 1F 07 00 
3b1ec     59 1F 52 1F 
3b1f0     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3b1f4     5D 1F 56 1F 
3b1f8     5F 1F 60 1F 
3b1fc     08 06 70 1F 
3b200     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3b204     BB 1F C8 1F 
3b208     C9 1F CA 1F 
3b20c     CB 1F DA 1F 
3b210     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3b214     F9 1F EA 1F 
3b218     EB 1F FA 1F 
3b21c     FB 1F 80 1F 
3b220     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3b224     08 06 A0 1F 
3b228     08 06 B0 1F 
3b22c     04 00 B8 1F 
3b230     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3b234     BC 1F CC 1F 
3b238     01 00 C3 1F 
3b23c     D0 1F 02 06 
3b240     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3b244     E5 1F 01 00 
3b248     EC 1F F3 1F 
3b24c     01 00 FC 1F 
3b250     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3b254     32 21 70 21 
3b258     10 02 84 21 
3b25c     01 00 83 21 
3b260     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3b264     30 2C 2F 04 
3b268     60 2C 02 01 
3b26c     67 2C 06 01 
3b270     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3b274     80 2C 64 01 
3b278     00 2D 26 08 
3b27c     41 FF 1A 03 
3b280     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3b284     05 07 09 0E 
3b288     10 12 14 16 
3b28c     18 1C 1E 43 
3b290     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3b294     41 41 43 45 
3b298     45 45 49 49 
3b29c     49 41 41 45 
3b2a0     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3b2a4     4F 55 55 59 
3b2a8     4F 55 4F 9C 
3b2ac     4F 9E 9F 41 
3b2b0     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3b2b4     A5 A6 A7 A8 
3b2b8     A9 AA AB AC 
3b2bc     AD AE AF B0 
3b2c0     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3b2c4     41 41 41 B8 
3b2c8     B9 BA BB BC 
3b2cc     BD BE BF C0 
3b2d0     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3b2d4     C5 41 41 C8 
3b2d8     C9 CA CB CC 
3b2dc     CD CE CF D1 
3b2e0     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3b2e4     49 49 49 49 
3b2e8     D9 DA DB DC 
3b2ec     DD 49 DF 4F 
3b2f0     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3b2f4     4F E6 E8 E8 
3b2f8     55 55 55 59 
3b2fc     59 EE EF F0 
3b300     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3b304     F5 F6 F7 F8 
3b308     F9 FA FB FC 
3b30c     FD FE FF 00 
3b310     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3b314     00 00 00 00 | 	byte	$00, $00, $00, $00
3b318     00 00 D0 09 | 	long	(157 {_fatfs_cc_v_close})<<20
3b31c     00 00 E0 09 | 	long	(158 {_fatfs_cc_v_read})<<20
3b320     00 00 F0 09 | 	long	(159 {_fatfs_cc_v_write})<<20
3b324     00 00 00 0A | 	long	(160 {_fatfs_cc_v_lseek})<<20
3b328     00 00 10 0A | 	long	(161 {_fatfs_cc_v_ioctl})<<20
3b32c     00 00 20 0B | 	long	(178 {_fatfs_cc_v_flush})<<20
3b330     00 00 00 00 
3b334     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3b338     00 00 20 0A | 	long	(162 {_fatfs_cc_v_open})<<20
3b33c     00 00 30 0A | 	long	(163 {_fatfs_cc_v_creat})<<20
3b340     00 00 40 0A | 	long	(164 {_fatfs_cc_v_opendir})<<20
3b344     00 00 50 0A | 	long	(165 {_fatfs_cc_v_closedir})<<20
3b348     00 00 60 0A | 	long	(166 {_fatfs_cc_v_readdir})<<20
3b34c     00 00 70 0A | 	long	(167 {_fatfs_cc_v_stat})<<20
3b350     00 00 80 0A | 	long	(168 {_fatfs_cc_v_mkdir})<<20
3b354     00 00 90 0A | 	long	(169 {_fatfs_cc_v_rmdir})<<20
3b358     00 00 A0 0A | 	long	(170 {_fatfs_cc_v_remove})<<20
3b35c     00 00 B0 0A | 	long	(171 {_fatfs_cc_v_rename})<<20
3b360     00 00 C0 0A | 	long	(172 {_fatfs_cc_v_init})<<20
3b364     00 00 D0 0A | 	long	(173 {_fatfs_cc_v_deinit})<<20
3b368     FF FF FF FF 
3b36c     1F 00 00 00 
3b370     1C 00 00 00 
3b374     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
3b378     1E 00 00 00 
3b37c     1F 00 00 00 
3b380     1E 00 00 00 
3b384     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3b388     1F 00 00 00 
3b38c     1E 00 00 00 
3b390     1F 00 00 00 
3b394     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3b398     1F 00 00 00 
3b39c     00 00 00 00 
3b3a0     1F 00 00 00 
3b3a4     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
3b3a8     5A 00 00 00 
3b3ac     78 00 00 00 
3b3b0     97 00 00 00 
3b3b4     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
3b3b8     D4 00 00 00 
3b3bc     F3 00 00 00 
3b3c0     11 01 00 00 
3b3c4     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
3b3c8     4E 01 00 00 
3b3cc     6D 01 00 00 
3b3d0     FF FF FF FF 
3b3d4     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
3b3d8     00 00 00 00 
      ...             
3b3f0     00 00 00 00 
3b3f4     00 00 00 00 | 	byte	$00[32]
3b3f8     16 B4 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
3b3fc     1A B4 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
3b400     00 00 00 00 
3b404     00 00 00 00 
3b408     00 00 00 00 
3b40c     00 00 00 00 
3b410     00 00       | 	byte	$00[18]
3b412     3F 3F 3F 00 
3b416     55 43 54 00 
3b41a     55 43 54 00 
3b41e     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3b422     00 00 00 00 
3b426     00 00 00    | 	byte	$00[7]
3b429     CA 9A 3B 00 
3b42d     00 00 00 01 
3b431     01 01 01 01 
3b435     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3b439     91 11 11 11 
3b43d     11 01 01 01 
3b441     01 01 01 01 
3b445     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3b449     01 01 01 01 
3b44d     01 01 01    | 	byte	$01[7]
3b450     90 20 20 20 
3b454     20 20 20 20 
3b458     20 20 20 20 
3b45c     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3b460     42 42 42 42 
3b464     42 42 42 42 
3b468     42 42       | 	byte	$42[10]
3b46a     20 20 20 20 
3b46e     20 20 20    | 	byte	$20[7]
3b471     44 44 44 44 
3b475     44 44       | 	byte	$44[6]
3b477     04 04 04 04 
3b47b     04 04 04 04 
3b47f     04 04 04 04 
3b483     04 04 04 04 
3b487     04 04 04 04 | 	byte	$04[20]
3b48b     20 20 20 20 
3b48f     20 20       | 	byte	$20[6]
3b491     48 48 48 48 
3b495     48 48       | 	byte	$48[6]
3b497     08 08 08 08 
3b49b     08 08 08 08 
3b49f     08 08 08 08 
3b4a3     08 08 08 08 
3b4a7     08 08 08 08 | 	byte	$08[20]
3b4ab     20 20 20 20 
3b4af     01 00 00 00 
3b4b3     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3b4b4                 | __methodtable__
3b4b4     88 B5 01 00 | 	long	@_do_no_command
3b4b8     30 27 01 00 | 	long	@_do_plus
3b4bc     1C 2C 01 00 | 	long	@_do_minus
3b4c0     E4 30 01 00 | 	long	@_do_or
3b4c4     FC 31 01 00 | 	long	@_do_mul
3b4c8     88 37 01 00 | 	long	@_do_fdiv
3b4cc     CC 2F 01 00 | 	long	@_do_and
3b4d0     68 35 01 00 | 	long	@_do_div
3b4d4     50 39 01 00 | 	long	@_do_mod
3b4d8     70 3B 01 00 | 	long	@_do_shl
3b4dc     88 3C 01 00 | 	long	@_do_shr
3b4e0     A0 3D 01 00 | 	long	@_do_power
3b4e4     B0 1A 01 00 | 	long	@_do_getvar
3b4e8     10 BD 00 00 | 	long	@_do_push
3b4ec     B0 14 01 00 | 	long	@_do_assign
3b4f0     4C 83 01 00 | 	long	@_do_cls
3b4f4     38 FE 00 00 | 	long	@_do_new
3b4f8     C4 83 01 00 | 	long	@_do_plot
3b4fc     94 84 01 00 | 	long	@_do_draw
3b500     08 8E 01 00 | 	long	@_do_print
3b504     00 87 01 00 | 	long	@_do_circle
3b508     88 85 01 00 | 	long	@_do_fcircle
3b50c     78 88 01 00 | 	long	@_do_box
3b510     20 8C 01 00 | 	long	@_do_frame
3b514     8C 83 01 00 | 	long	@_do_color
3b518     6C 97 00 00 | 	long	@_do_for
3b51c     C4 9A 00 00 | 	long	@_do_next
3b520     9C FB 00 00 | 	long	@_do_list
3b524     78 CF 00 00 | 	long	@_do_run
3b528     6C 13 01 00 | 	long	@_do_error
3b52c     64 00 01 00 | 	long	@_do_fast_goto
3b530     CC 0F 01 00 | 	long	@_do_find_goto
3b534     DC 11 01 00 | 	long	@_do_slow_goto
3b538     A4 B1 01 00 | 	long	@_do_nothing
3b53c     54 C3 00 00 | 	long	@_test_csave
3b540     B8 C6 00 00 | 	long	@_do_save
3b544     C0 CA 00 00 | 	long	@_do_load
3b548     3C 9D 01 00 | 	long	@_do_pinwrite
3b54c     D8 A7 01 00 | 	long	@_do_waitms
3b550     14 A9 01 00 | 	long	@_do_waitvbl
3b554     3C AF 01 00 | 	long	@_do_if
3b558     20 B0 01 00 | 	long	@_do_else
3b55c     68 3F 01 00 | 	long	@_do_eq
3b560     E0 4D 01 00 | 	long	@_do_ge
3b564     B8 52 01 00 | 	long	@_do_le
3b568     40 44 01 00 | 	long	@_do_gt
3b56c     18 49 01 00 | 	long	@_do_lt
3b570     90 57 01 00 | 	long	@_do_ne
3b574     C8 5D 01 00 | 	long	@_do_rnd
3b578     A8 B1 01 00 | 	long	@_do_brun
3b57c     74 B4 01 00 | 	long	@_do_beep
3b580     44 A9 01 00 | 	long	@_do_dir
3b584     58 93 01 00 | 	long	@_do_paper
3b588     E0 93 01 00 | 	long	@_do_ink
3b58c     7C 94 01 00 | 	long	@_do_font
3b590     F8 94 01 00 | 	long	@_do_mode
3b594     E0 B3 01 00 | 	long	@_do_mouse
3b598     E4 82 01 00 | 	long	@_do_gettime
3b59c     14 B4 01 00 | 	long	@_do_cursor
3b5a0     48 B4 01 00 | 	long	@_do_click
3b5a4     70 80 01 00 | 	long	@_do_mousex
3b5a8     B4 80 01 00 | 	long	@_do_mousey
3b5ac     3C 81 01 00 | 	long	@_do_mousek
3b5b0     F8 80 01 00 | 	long	@_do_mousew
3b5b4     9C 60 01 00 | 	long	@_do_sin
3b5b8     40 76 01 00 | 	long	@_do_stick
3b5bc     C4 77 01 00 | 	long	@_do_strig
3b5c0     84 7F 01 00 | 	long	@_do_sprite
3b5c4     10 7C 01 00 | 	long	@_do_defsprite
3b5c8     48 79 01 00 | 	long	@_do_getpixel
3b5cc     20 A9 01 00 | 	long	@_do_waitclock
3b5d0     94 B5 01 00 | 	long	@_do_negative
3b5d4     80 81 01 00 | 	long	@_do_rdpin
3b5d8     EC 81 01 00 | 	long	@_do_rqpin
3b5dc     60 82 01 00 | 	long	@_do_pinread
3b5e0     D4 9F 01 00 | 	long	@_do_wrpin
3b5e4     54 A0 01 00 | 	long	@_do_wxpin
3b5e8     D4 A0 01 00 | 	long	@_do_wypin
3b5ec     C4 9D 01 00 | 	long	@_do_pinfloat
3b5f0     04 9E 01 00 | 	long	@_do_pinlo
3b5f4     44 9E 01 00 | 	long	@_do_pinhi
3b5f8     C4 9E 01 00 | 	long	@_do_pinstart
3b5fc     84 9E 01 00 | 	long	@_do_pintoggle
3b600     54 A1 01 00 | 	long	@_do_position
3b604     F8 6F 01 00 | 	long	@_do_cos
3b608     18 71 01 00 | 	long	@_do_tan
3b60c     3C 74 01 00 | 	long	@_do_atn
3b610     24 72 01 00 | 	long	@_do_asin
3b614     30 73 01 00 | 	long	@_do_acos
3b618     50 75 01 00 | 	long	@_do_sqr
3b61c     60 8A 01 00 | 	long	@_do_fill
3b620     B0 F2 00 00 | 	long	@_do_defsnd
3b624     C8 D2 00 00 | 	long	@_do_defenv
3b628     44 B0 01 00 | 	long	@_do_rad
3b62c     6C B0 01 00 | 	long	@_do_deg
3b630     E8 B0 01 00 | 	long	@_do_int
3b634     5C DF 00 00 | 	long	@_do_play
3b638     9C 9A 01 00 | 	long	@_do_setdelay
3b63c     F4 99 01 00 | 	long	@_do_setenv
3b640     44 9B 01 00 | 	long	@_do_setlen
3b644     94 9C 01 00 | 	long	@_do_setpan
3b648     EC 9B 01 00 | 	long	@_do_setvol
3b64c     A4 98 01 00 | 	long	@_do_setwave
3b650     4C 99 01 00 | 	long	@_do_setsustain
3b654     18 F2 00 00 | 	long	@_do_release
3b658     90 5F 01 00 | 	long	@_do_getenvsustain
3b65c     DC A1 01 00 | 	long	@_do_poke
3b660     B4 A2 01 00 | 	long	@_do_dpoke
3b664     8C A3 01 00 | 	long	@_do_lpoke
3b668     64 A4 01 00 | 	long	@_do_peek
3b66c     14 A5 01 00 | 	long	@_do_dpeek
3b670     C0 A5 01 00 | 	long	@_do_lpeek
3b674     D0 A6 01 00 | 	long	@_do_adr
3b678     6C A6 01 00 | 	long	@_do_fre
3b67c     D4 A6 01 00 | 	long	@_do_getnotevalue
3b680     68 20 01 00 | 	long	@_do_getaddr
3b684     58 24 01 00 | 	long	@_do_inkey
3b688     44 B6 01 00 | 	long	@_do_abs
3b68c     38 6D 01 00 | 	long	@_do_hex
3b690     98 6E 01 00 | 	long	@_do_bin
3b694     34 6A 01 00 | 	long	@_do_val
3b698     38 69 01 00 | 	long	@_do_chr
3b69c     74 66 01 00 | 	long	@_do_asc
3b6a0     F0 64 01 00 | 	long	@_do_left
3b6a4     6C 63 01 00 | 	long	@_do_right
3b6a8     A8 61 01 00 | 	long	@_do_mid
3b6ac     CC 67 01 00 | 	long	@_do_len
3b6b0     54 96 00 00 | 	long	@_do_gosub
3b6b4     E0 99 00 00 | 	long	@_do_return
3b6b8     44 CF 00 00 | 	long	@_do_end
3b6bc     8C 9A 00 00 | 	long	@_do_pop
3b6c0     98 7A 01 00 | 	long	@_do_log
3b6c4     94 EB 00 00 | 	long	@_do_changevol
3b6c8     DC EF 00 00 | 	long	@_do_changewav
3b6cc     74 EC 00 00 | 	long	@_do_changepan
3b6d0     84 ED 00 00 | 	long	@_do_changefreq
3b6d4     08 F1 00 00 | 	long	@_do_shutup
3b6d8     94 B0 01 00 | 	long	@_do_round
3b6dc     B4 CA 00 00 | 	long	@_do_enter
3b6e0     54 01 01 00 | 	long	@_do_open
3b6e4     6C 04 01 00 | 	long	@_do_close
3b6e8     E8 04 01 00 | 	long	@_do_get
3b6ec     8C 0A 01 00 | 	long	@_do_put
3b6f0     54 F3 01 00 | 	long	@_hg010b_spin2_putchar
3b6f4     78 00 03 00 | 	long	@__struct___bas_wrap_sender_tx
3b6f8     BC 00 03 00 | 	long	@__struct___bas_wrap_sender_rx
3b6fc     04 01 03 00 | 	long	@__struct___bas_wrap_sender_close
3b700     A8 FF 02 00 | 	long	@__struct__s_vfs_file_t_putchar
3b704     18 00 03 00 | 	long	@__struct__s_vfs_file_t_getchar
3b708     60 FF 02 00 | 	long	@___strs_cl_pfunc
3b70c     F4 5C 02 00 | 	long	@__system____root_opendir
3b710     90 5D 02 00 | 	long	@__system____root_closedir
3b714     0C 5D 02 00 | 	long	@__system____root_readdir
3b718     98 5D 02 00 | 	long	@__system____root_stat
3b71c     E4 55 02 00 | 	long	@__system____default_putc
3b720     68 55 02 00 | 	long	@__system____default_getc
3b724     8C 56 02 00 | 	long	@__system____default_flush
3b728     64 EA 02 00 | 	long	@_fatfs_cc_v_close
3b72c     80 EE 02 00 | 	long	@_fatfs_cc_v_read
3b730     94 EF 02 00 | 	long	@_fatfs_cc_v_write
3b734     74 F0 02 00 | 	long	@_fatfs_cc_v_lseek
3b738     FC F0 02 00 | 	long	@_fatfs_cc_v_ioctl
3b73c     50 F1 02 00 | 	long	@_fatfs_cc_v_open
3b740     C8 E9 02 00 | 	long	@_fatfs_cc_v_creat
3b744     A8 EA 02 00 | 	long	@_fatfs_cc_v_opendir
3b748     1C EB 02 00 | 	long	@_fatfs_cc_v_closedir
3b74c     5C EB 02 00 | 	long	@_fatfs_cc_v_readdir
3b750     90 EC 02 00 | 	long	@_fatfs_cc_v_stat
3b754     10 F1 02 00 | 	long	@_fatfs_cc_v_mkdir
3b758     30 F1 02 00 | 	long	@_fatfs_cc_v_rmdir
3b75c     20 F1 02 00 | 	long	@_fatfs_cc_v_remove
3b760     40 F1 02 00 | 	long	@_fatfs_cc_v_rename
3b764     60 F2 02 00 | 	long	@_fatfs_cc_v_init
3b768     68 F2 02 00 | 	long	@_fatfs_cc_v_deinit
3b76c     20 0A 02 00 | 	long	@__system___tx
3b770     60 0A 02 00 | 	long	@__system___rx
3b774     04 69 02 00 | 	long	@__system___rxtxioctl_0696
3b778     5C 69 02 00 | 	long	@__system____dummy_flush_0697
3b77c     30 F2 02 00 | 	long	@_fatfs_cc_v_flush
3b780                 | __heap_base
3b780     00 00 00 00 
      ...             
6a580     00 00 00 00 
6a584     00 00 00 00 | 	long	0[48002]
6a588                 | objmem
6a588     00 00 00 00 
      ...             
759d0     00 00 00 00 
759d4     00 00 00 00 | 	long	0[11540]
759d8                 | stackspace
759d8     00 00 00 00 | 	long	0[1]
759dc 100             | 	org	COG_BSS_START
759dc 100             | _var01
759dc 100             | 	res	1
759dc 101             | _var02
759dc 101             | 	res	1
759dc 102             | _var03
759dc 102             | 	res	1
759dc 103             | _var04
759dc 103             | 	res	1
759dc 104             | _var05
759dc 104             | 	res	1
759dc 105             | _var06
759dc 105             | 	res	1
759dc 106             | _var07
759dc 106             | 	res	1
759dc 107             | _var08
759dc 107             | 	res	1
759dc 108             | _var09
759dc 108             | 	res	1
759dc 109             | arg01
759dc 109             | 	res	1
759dc 10a             | arg02
759dc 10a             | 	res	1
759dc 10b             | arg03
759dc 10b             | 	res	1
759dc 10c             | arg04
759dc 10c             | 	res	1
759dc 10d             | arg05
759dc 10d             | 	res	1
759dc 10e             | arg06
759dc 10e             | 	res	1
759dc 10f             | local01
759dc 10f             | 	res	1
759dc 110             | local02
759dc 110             | 	res	1
759dc 111             | local03
759dc 111             | 	res	1
759dc 112             | local04
759dc 112             | 	res	1
759dc 113             | local05
759dc 113             | 	res	1
759dc 114             | local06
759dc 114             | 	res	1
759dc 115             | local07
759dc 115             | 	res	1
759dc 116             | local08
759dc 116             | 	res	1
759dc 117             | local09
759dc 117             | 	res	1
759dc 118             | local10
759dc 118             | 	res	1
759dc 119             | local11
759dc 119             | 	res	1
759dc 11a             | local12
759dc 11a             | 	res	1
759dc 11b             | local13
759dc 11b             | 	res	1
759dc 11c             | local14
759dc 11c             | 	res	1
759dc 11d             | local15
759dc 11d             | 	res	1
759dc 11e             | local16
759dc 11e             | 	res	1
759dc 11f             | local17
759dc 11f             | 	res	1
759dc 120             | local18
759dc 120             | 	res	1
759dc 121             | local19
759dc 121             | 	res	1
759dc 122             | local20
759dc 122             | 	res	1
759dc 123             | local21
759dc 123             | 	res	1
759dc 124             | local22
759dc 124             | 	res	1
759dc 125             | local23
759dc 125             | 	res	1
759dc 126             | local24
759dc 126             | 	res	1
759dc 127             | local25
759dc 127             | 	res	1
759dc 128             | local26
759dc 128             | 	res	1
759dc 129             | local27
759dc 129             | 	res	1
759dc 12a             | local28
759dc 12a             | 	res	1
759dc 12b             | local29
759dc 12b             | 	res	1
759dc 12c             | local30
759dc 12c             | 	res	1
759dc 12d             | local31
759dc 12d             | 	res	1
759dc 12e             | local32
759dc 12e             | 	res	1
759dc 12f             | local33
759dc 12f             | 	res	1
759dc 130             | local34
759dc 130             | 	res	1
759dc 131             | local35
759dc 131             | 	res	1
759dc 132             | muldiva_
759dc 132             | 	res	1
759dc 133             | muldivb_
759dc 133             | 	res	1
759dc 134             | 	fit	480
759dc 134             | 
