00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic030.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 30
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_cload = 184
00000                 | 	token_blit = 185
00000                 | 	token_playsample = 186
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 6C D8 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 3F 7F 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 3E 7D 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 3F 7D 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 7E 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 7C 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 3E 7D 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 3F 7F 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec B4 B8 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed E8 B5 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 BC A6 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 C8 A8 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 20 A4 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 20 11 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 08 B0 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 94 42 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 60 14 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 44 6A 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa FC 67 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb D4 79 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc DC 4A 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1C 4A 05 F6 | 	mov	COUNT_, #28
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 1E 06 F6 | 	mov	local01, #0
00810     00 20 06 F6 | 	mov	local02, #0
00814     00 22 06 F6 | 	mov	local03, #0
00818     00 24 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     AC E8 B1 FD | 	call	#_hg010b_spin2_waitvbl
00824     E0 F9 B1 FD | 	call	#_usbnew_spin2_get_key
00828     FD 26 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
00840     51 00 00 FF 
00844     DC E5 05 F1 | 	add	objptr, ##41948
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     51 00 00 FF 
00850     DC E5 85 F1 | 	sub	objptr, ##41948
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 26 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 26 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     10 E5 05 F1 | 	add	objptr, ##41232
0086c     F2 28 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     10 E5 85 F1 | 	sub	objptr, ##41232
00878     01 28 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
00888     56 00 00 FF 
0088c     44 2A 06 F6 | 	mov	local07, ##44100
00890     0C 2C C6 F9 | 	decod	local08, #12
00894     00 2E 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 30 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
008d0     D8 FC B1 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     2C 04 B2 FD | 	call	#__system___waitms
008e4     07 28 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     24 FE B1 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 26 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 26 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     13 29 02 C6 |  if_b	mov	local06, local05
00914     14 29 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 28 16 C2 |  if_b	cmp	local06, #224 wc
0091c     13 23 02 C6 |  if_b	mov	local03, local05
00920     01 1E 06 C6 |  if_b	mov	local01, #1
00924     11 25 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 26 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 20 06 36 |  if_ae	mov	local02, #0
00934     00 1E 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 26 0E F2 | 	cmp	local05, #0 wz
0093c     01 1E 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 20 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 26 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 20 0E C2 |  if_b	cmp	local02, #25 wz
00950     11 25 02 86 |  if_c_and_z	mov	local04, local03
00954     15 20 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 24 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     10 E5 05 F1 | 	add	objptr, ##41232
00968     F2 28 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     10 E5 85 F1 | 	sub	objptr, ##41232
00974     01 28 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     51 00 00 FF 
00980     B4 E5 05 F1 | 	add	objptr, ##41908
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 2A 06 F6 | 	mov	local07, ##44100
00990     0C 2C C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 2E 02 FB | 	rdlong	local09, objptr
0099c     01 30 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     17 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     E4 E4 85 F1 | 	sub	objptr, ##36068
009c0     E8 FB B1 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     12 13 02 F6 | 	mov	arg01, local04
009d0     F4 CD B1 FD | 	call	#_scantochar
009d4     FD 32 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     51 00 00 FF 
009dc     DC E5 05 F1 | 	add	objptr, ##41948
009e0     F2 34 02 FB | 	rdlong	local12, objptr
009e4     51 00 00 FF 
009e8     DC E5 85 F1 | 	sub	objptr, ##41948
009ec     1A 29 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 32 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 32 16 F2 | 	cmp	local11, #123 wc
00a00     20 32 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 32 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 32 16 F2 | 	cmp	local11, #91 wc
00a14     20 32 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 32 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 32 16 F2 | 	cmp	local11, #32 wc
00a28     09 32 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 32 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 32 16 F2 | 	cmp	local11, #23 wc
00a3c     27 32 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 32 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 32 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 28 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 28 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     51 00 00 FF 
00a64     D8 E5 05 F1 | 	add	objptr, ##41944
00a68     F2 28 0A FB | 	rdlong	local06, objptr wz
00a6c     51 00 00 FF 
00a70     D8 E5 85 F1 | 	sub	objptr, ##41944
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 2A C2 FA | 	rdbyte	local07, objptr
00a80     15 2D E2 F8 | 	getbyte	local08, local07, #0
00a84     80 2C 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 36 02 FB | 	rdlong	local13, objptr
00a90     1B 39 02 F6 | 	mov	local14, local13
00a94     16 39 02 F1 | 	add	local14, local08
00a98     7F 38 06 F1 | 	add	local14, #127
00a9c     15 2B E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 2A 06 FA | 	mul	local07, #128
00aa4     15 37 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 2E E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     17 3B 52 F6 | 	abs	local15, local09 wc
00ab8     01 3A 46 F0 | 	shr	local15, #1
00abc     1D 37 82 F3 | 	sumc	local13, local15
00ac0     01 36 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     1C 3D 02 F6 | 	mov	local16, local14
00ac8     01 3C 86 F1 | 	sub	local16, #1
00acc     1E 13 02 F6 | 	mov	arg01, local16
00ad0     EC CB B1 FD | 	call	#_pspeek
00ad4     FD 3E 02 F6 | 	mov	local17, result1
00ad8     1F 41 E2 F8 | 	getbyte	local18, local17, #0
00adc     20 43 02 F6 | 	mov	local19, local18
00ae0     1C 13 02 F6 | 	mov	arg01, local14
00ae4     21 15 02 F6 | 	mov	arg02, local19
00ae8     8C CB B1 FD | 	call	#_pspoke
00aec     01 38 86 F1 | 	sub	local14, #1
00af0     1B 39 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     51 00 00 FF 
00afc     E4 E5 05 F1 | 	add	objptr, ##41956
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     51 00 00 FF 
00b08     A6 E5 85 F1 | 	sub	objptr, ##41894
00b0c     F2 2A C2 FA | 	rdbyte	local07, objptr
00b10     15 2D E2 F8 | 	getbyte	local08, local07, #0
00b14     80 2C 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 2E 02 FB | 	rdlong	local09, objptr
00b20     17 39 02 F6 | 	mov	local14, local09
00b24     16 39 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 3A E2 FA | 	rdword	local15, objptr
00b30     1D 31 32 F9 | 	getword	local10, local15, #0
00b34     18 45 52 F6 | 	abs	local20, local10 wc
00b38     01 44 46 F0 | 	shr	local20, #1
00b3c     22 45 82 F6 | 	negc	local20, local20
00b40     22 39 02 F1 | 	add	local14, local20
00b44     15 2B E2 F8 | 	getbyte	local07, local07, #0
00b48     80 2A 06 FA | 	mul	local07, #128
00b4c     17 2D 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     16 47 02 F6 | 	mov	local21, local08
00b58     15 47 02 F1 | 	add	local21, local07
00b5c     80 46 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     23 39 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 28 E2 FA | 	rdword	local06, objptr
00b70     51 00 00 FF 
00b74     A8 E5 05 F1 | 	add	objptr, ##41896
00b78     F2 2C 02 FB | 	rdlong	local08, objptr
00b7c     01 2C 66 F0 | 	shl	local08, #1
00b80     16 29 02 F1 | 	add	local06, local08
00b84     51 00 00 FF 
00b88     A6 E5 85 F1 | 	sub	objptr, ##41894
00b8c     F2 34 C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 34 06 FA | 	mul	local12, #16
00b98     04 34 06 F1 | 	add	local12, #4
00b9c     1C 13 02 F6 | 	mov	arg01, local14
00ba0     1C CB B1 FD | 	call	#_pspeek
00ba4     FD 2A E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 2C 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 30 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     18 2F 02 F6 | 	mov	local09, local10
00bc0     14 13 02 F6 | 	mov	arg01, local06
00bc4     1A 15 02 F6 | 	mov	arg02, local12
00bc8     15 17 02 F6 | 	mov	arg03, local07
00bcc     16 19 02 F6 | 	mov	arg04, local08
00bd0     17 1B 02 F6 | 	mov	arg05, local09
00bd4     F4 E2 B1 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     51 00 00 FF 
00bdc     E4 E5 05 F1 | 	add	objptr, ##41956
00be0     F2 28 02 FB | 	rdlong	local06, objptr
00be4     01 28 06 F1 | 	add	local06, #1
00be8     F2 28 62 FC | 	wrlong	local06, objptr
00bec     51 00 00 FF 
00bf0     E4 E5 85 F1 | 	sub	objptr, ##41956
00bf4     01 38 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     19 13 02 F6 | 	mov	arg01, local11
00c00     10 E6 B1 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 32 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 32 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 28 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 28 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     10 E5 05 A1 |  if_e	add	objptr, ##41232
00c2c     F2 2C 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     10 E5 85 A1 |  if_e	sub	objptr, ##41232
00c38     16 2B 02 A6 |  if_e	mov	local07, local08
00c3c     01 2A 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
00c58     56 00 00 FF 
00c5c     44 2A 06 F6 | 	mov	local07, ##44100
00c60     0C 2C C6 F9 | 	decod	local08, #12
00c64     00 2E 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 30 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     14 F9 B1 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     68 00 B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     64 FA B1 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 32 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     81 01 00 FF 
00ccc     D2 48 06 F6 | 	mov	local22, ##@LR__5037
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 38 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 38 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 3A C2 FA | 	rdbyte	local15, objptr
00cf4     80 3A 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     1D 13 02 F1 | 	add	arg01, local15
00d08     1C 13 02 F1 | 	add	arg01, local14
00d0c     B0 C9 B1 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     44 1F B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     24 13 02 F6 | 	mov	arg01, local22
00d20     54 FD B1 FD | 	call	#__system___string_concat
00d24     FD 48 02 F6 | 	mov	local22, result1
00d28     01 38 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     51 00 00 FF 
00d34     D8 E5 05 F1 | 	add	objptr, ##41944
00d38     F2 28 0A FB | 	rdlong	local06, objptr wz
00d3c     51 00 00 FF 
00d40     D8 E5 85 F1 | 	sub	objptr, ##41944
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 2A C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 2A 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     60 EA B1 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     90 EC B1 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     24 FB 01 F6 | 	mov	result1, local22
00d74     DC 06 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     12 33 E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d7c     2B 32 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 28 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 28 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     10 E5 05 F1 | 	add	objptr, ##41232
00da0     F2 2C 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     10 E5 85 F1 | 	sub	objptr, ##41232
00dac     16 2B 02 F6 | 	mov	local07, local08
00db0     01 2A 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
00dcc     56 00 00 FF 
00dd0     44 2A 06 F6 | 	mov	local07, ##44100
00dd4     0E 2C C6 F9 | 	decod	local08, #14
00dd8     00 2E 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 30 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     A0 F7 B1 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     F4 FE B1 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     F0 F8 B1 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 32 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 38 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 2E C2 FA | 	rdbyte	local09, objptr
00e48     17 2D E2 F8 | 	getbyte	local08, local09, #0
00e4c     16 31 02 F6 | 	mov	local10, local08
00e50     80 30 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 3A 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     1D 2B 02 F6 | 	mov	local07, local15
00e64     18 2B 02 F1 | 	add	local07, local10
00e68     1C 2B 02 F1 | 	add	local07, local14
00e6c     15 13 02 F6 | 	mov	arg01, local07
00e70     4C C8 B1 FD | 	call	#_pspeek
00e74     FD 28 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 28 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 38 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     1C 2B 02 F6 | 	mov	local07, local14
00e8c     01 2A 66 F0 | 	shl	local07, #1
00e90     15 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     D0 E1 B1 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     C4 E1 B1 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 38 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 28 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     14 39 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 34 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1A 29 02 F6 | 	mov	local06, local12
00ee4     14 39 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 2C 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     16 2B 02 F6 | 	mov	local07, local08
00f04     15 35 02 F6 | 	mov	local12, local07
00f08     01 34 66 F0 | 	shl	local12, #1
00f0c     1A 29 02 F6 | 	mov	local06, local12
00f10     14 13 02 F6 | 	mov	arg01, local06
00f14     54 E1 B1 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 32 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 2C 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     16 2B 02 F6 | 	mov	local07, local08
00f38     15 35 02 F6 | 	mov	local12, local07
00f3c     01 34 66 F0 | 	shl	local12, #1
00f40     1A 29 02 F6 | 	mov	local06, local12
00f44     14 13 02 F6 | 	mov	arg01, local06
00f48     20 E1 B1 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 32 0E F2 | 	cmp	local11, #75 wz
00f50     00 28 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     40 E1 B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 32 0E F2 | 	cmp	local11, #78 wz
00f60     24 28 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     30 E1 B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 32 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 2A C2 FA | 	rdbyte	local07, objptr
00f7c     15 2D E2 F8 | 	getbyte	local08, local07, #0
00f80     80 2C 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 4A 02 FB | 	rdlong	local23, objptr
00f8c     25 39 02 F6 | 	mov	local14, local23
00f90     16 39 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 30 E2 FA | 	rdword	local10, objptr
00f9c     18 45 52 F6 | 	abs	local20, local10 wc
00fa0     01 44 46 F0 | 	shr	local20, #1
00fa4     22 39 82 F3 | 	sumc	local14, local20
00fa8     15 2B E2 F8 | 	getbyte	local07, local07, #0
00fac     80 2A 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     15 4B 02 F1 | 	add	local23, local07
00fb8     80 4A 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     25 39 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     1C 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     F0 C6 B1 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     1C 13 02 F6 | 	mov	arg01, local14
00fd8     9C C6 B1 FD | 	call	#_pspoke
00fdc     01 38 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 2E C2 FA | 	rdbyte	local09, objptr
00fec     80 2E 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     17 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     6C C6 B1 FD | 	call	#_pspoke
0100c     51 00 00 FF 
01010     E4 E5 05 F1 | 	add	objptr, ##41956
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     51 00 00 FF 
0101c     A6 E5 85 F1 | 	sub	objptr, ##41894
01020     F2 34 C2 FA | 	rdbyte	local12, objptr
01024     1A 2D E2 F8 | 	getbyte	local08, local12, #0
01028     80 2C 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 2E 02 FB | 	rdlong	local09, objptr
01034     17 39 02 F6 | 	mov	local14, local09
01038     16 39 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 3A E2 FA | 	rdword	local15, objptr
01044     1D 31 32 F9 | 	getword	local10, local15, #0
01048     18 45 52 F6 | 	abs	local20, local10 wc
0104c     01 44 46 F0 | 	shr	local20, #1
01050     22 45 82 F6 | 	negc	local20, local20
01054     22 39 02 F1 | 	add	local14, local20
01058     1A 29 E2 F8 | 	getbyte	local06, local12, #0
0105c     14 2B 02 F6 | 	mov	local07, local06
01060     80 2A 06 FA | 	mul	local07, #128
01064     17 2D 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     16 4D 02 F6 | 	mov	local24, local08
01070     15 4D 02 F1 | 	add	local24, local07
01074     80 4C 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     26 39 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 28 E2 FA | 	rdword	local06, objptr
01088     51 00 00 FF 
0108c     A8 E5 05 F1 | 	add	objptr, ##41896
01090     F2 2C 02 FB | 	rdlong	local08, objptr
01094     01 2C 66 F0 | 	shl	local08, #1
01098     16 29 02 F1 | 	add	local06, local08
0109c     51 00 00 FF 
010a0     A6 E5 85 F1 | 	sub	objptr, ##41894
010a4     F2 34 C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 34 06 FA | 	mul	local12, #16
010b0     04 34 06 F1 | 	add	local12, #4
010b4     1C 13 02 F6 | 	mov	arg01, local14
010b8     04 C6 B1 FD | 	call	#_pspeek
010bc     FD 2A E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 2C 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 30 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     18 2F 02 F6 | 	mov	local09, local10
010d8     14 13 02 F6 | 	mov	arg01, local06
010dc     1A 15 02 F6 | 	mov	arg02, local12
010e0     15 17 02 F6 | 	mov	arg03, local07
010e4     16 19 02 F6 | 	mov	arg04, local08
010e8     17 1B 02 F6 | 	mov	arg05, local09
010ec     DC DD B1 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     51 00 00 FF 
010f4     E4 E5 05 F1 | 	add	objptr, ##41956
010f8     F2 28 02 FB | 	rdlong	local06, objptr
010fc     01 28 06 F1 | 	add	local06, #1
01100     F2 28 62 FC | 	wrlong	local06, objptr
01104     51 00 00 FF 
01108     E4 E5 85 F1 | 	sub	objptr, ##41956
0110c     1C 29 02 F6 | 	mov	local06, local14
01110     1C 35 02 F6 | 	mov	local12, local14
01114     01 34 06 F1 | 	add	local12, #1
01118     1A 39 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 32 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 34 E2 FA | 	rdword	local12, objptr
01130     1A 29 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 2E 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     17 2D 02 F6 | 	mov	local08, local09
0114c     16 2B 02 F6 | 	mov	local07, local08
01150     01 2A 66 F0 | 	shl	local07, #1
01154     15 29 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     B8 DE B1 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 2A C2 FA | 	rdbyte	local07, objptr
01180     15 2D E2 F8 | 	getbyte	local08, local07, #0
01184     80 2C 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 4E 02 FB | 	rdlong	local25, objptr
01190     27 39 02 F6 | 	mov	local14, local25
01194     16 39 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 30 E2 FA | 	rdword	local10, objptr
011a0     18 45 52 F6 | 	abs	local20, local10 wc
011a4     01 44 46 F0 | 	shr	local20, #1
011a8     22 39 82 F3 | 	sumc	local14, local20
011ac     15 2B E2 F8 | 	getbyte	local07, local07, #0
011b0     80 2A 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     15 4F 02 F1 | 	add	local25, local07
011bc     80 4E 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     27 39 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     1C 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     EC C4 B1 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     1C 13 02 F6 | 	mov	arg01, local14
011dc     98 C4 B1 FD | 	call	#_pspoke
011e0     01 38 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 2E C2 FA | 	rdbyte	local09, objptr
011f0     80 2E 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     17 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     68 C4 B1 FD | 	call	#_pspoke
01210     51 00 00 FF 
01214     E4 E5 05 F1 | 	add	objptr, ##41956
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     51 00 00 FF 
01220     A6 E5 85 F1 | 	sub	objptr, ##41894
01224     F2 34 C2 FA | 	rdbyte	local12, objptr
01228     1A 2D E2 F8 | 	getbyte	local08, local12, #0
0122c     80 2C 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 2E 02 FB | 	rdlong	local09, objptr
01238     17 39 02 F6 | 	mov	local14, local09
0123c     16 39 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 3A E2 FA | 	rdword	local15, objptr
01248     1D 31 32 F9 | 	getword	local10, local15, #0
0124c     18 45 52 F6 | 	abs	local20, local10 wc
01250     01 44 46 F0 | 	shr	local20, #1
01254     22 45 82 F6 | 	negc	local20, local20
01258     22 39 02 F1 | 	add	local14, local20
0125c     1A 29 E2 F8 | 	getbyte	local06, local12, #0
01260     14 2B 02 F6 | 	mov	local07, local06
01264     80 2A 06 FA | 	mul	local07, #128
01268     17 2D 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     16 51 02 F6 | 	mov	local26, local08
01274     15 51 02 F1 | 	add	local26, local07
01278     80 50 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     28 39 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 28 E2 FA | 	rdword	local06, objptr
0128c     51 00 00 FF 
01290     A8 E5 05 F1 | 	add	objptr, ##41896
01294     F2 2C 02 FB | 	rdlong	local08, objptr
01298     01 2C 66 F0 | 	shl	local08, #1
0129c     16 29 02 F1 | 	add	local06, local08
012a0     51 00 00 FF 
012a4     A6 E5 85 F1 | 	sub	objptr, ##41894
012a8     F2 34 C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 34 06 FA | 	mul	local12, #16
012b4     04 34 06 F1 | 	add	local12, #4
012b8     1C 13 02 F6 | 	mov	arg01, local14
012bc     00 C4 B1 FD | 	call	#_pspeek
012c0     FD 2A E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 2C 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 30 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     18 2F 02 F6 | 	mov	local09, local10
012dc     14 13 02 F6 | 	mov	arg01, local06
012e0     1A 15 02 F6 | 	mov	arg02, local12
012e4     15 17 02 F6 | 	mov	arg03, local07
012e8     16 19 02 F6 | 	mov	arg04, local08
012ec     17 1B 02 F6 | 	mov	arg05, local09
012f0     D8 DB B1 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     51 00 00 FF 
012f8     E4 E5 05 F1 | 	add	objptr, ##41956
012fc     F2 28 02 FB | 	rdlong	local06, objptr
01300     01 28 06 F1 | 	add	local06, #1
01304     F2 28 62 FC | 	wrlong	local06, objptr
01308     51 00 00 FF 
0130c     E4 E5 85 F1 | 	sub	objptr, ##41956
01310     1C 29 02 F6 | 	mov	local06, local14
01314     1C 35 02 F6 | 	mov	local12, local14
01318     01 34 06 F1 | 	add	local12, #1
0131c     1A 39 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     81 01 00 FF 
01328     D3 48 06 F6 | 	mov	local22, ##@LR__5038
0132c     04 28 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 32 0E F2 | 	cmp	local11, #82 wz
01340     20 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 34 C2 FA | 	rdbyte	local12, objptr
0134c     3E E4 85 F1 | 	sub	objptr, #62
01350     1A 53 02 F6 | 	mov	local27, local12
01354     01 52 86 F1 | 	sub	local27, #1
01358     29 29 02 F6 | 	mov	local06, local27
0135c     14 13 02 F6 | 	mov	arg01, local06
01360     38 DD B1 FD | 	call	#_hg010b_spin2_setcursory
01364                 | LR__0042
01364                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
01364     51 32 0E F2 | 	cmp	local11, #81 wz
01368     24 00 90 5D |  if_ne	jmp	#LR__0043
0136c                 | ' return cursor_y
0136c     3E E4 05 F1 | 	add	objptr, #62
01370     F2 34 C2 FA | 	rdbyte	local12, objptr
01374     3E E4 85 F1 | 	sub	objptr, #62
01378     1A 53 02 F6 | 	mov	local27, local12
0137c     01 52 06 F1 | 	add	local27, #1
01380     24 52 36 F3 | 	fle	local27, #36 wc
01384     29 29 02 F6 | 	mov	local06, local27
01388     14 13 02 F6 | 	mov	arg01, local06
0138c     0C DD B1 FD | 	call	#_hg010b_spin2_setcursory
01390                 | LR__0043
01390                 | '   if key4=80 then
01390     50 32 0E F2 | 	cmp	local11, #80 wz
01394     44 00 90 5D |  if_ne	jmp	#LR__0044
01398                 | ' return cursor_x
01398     3C E4 05 F1 | 	add	objptr, #60
0139c     F2 54 E2 FA | 	rdword	local28, objptr
013a0     02 54 86 F1 | 	sub	local28, #2
013a4                 | '     cx=v.getcursorx()-2 					' arrow left
013a4                 | '     if cx<editor_spaces then cx=editor_spaces			
013a4     36 00 00 FF 
013a8     F8 E5 05 F1 | 	add	objptr, ##28152
013ac     F2 34 02 FB | 	rdlong	local12, objptr
013b0     37 00 00 FF 
013b4     34 E4 85 F1 | 	sub	objptr, ##28212
013b8     1A 55 52 F2 | 	cmps	local28, local12 wc
013bc     37 00 00 CF 
013c0     34 E4 05 C1 |  if_b	add	objptr, ##28212
013c4     F2 54 02 CB |  if_b	rdlong	local28, objptr
013c8     37 00 00 CF 
013cc     34 E4 85 C1 |  if_b	sub	objptr, ##28212
013d0     2A 29 02 F6 | 	mov	local06, local28
013d4     14 13 02 F6 | 	mov	arg01, local06
013d8     90 DC B1 FD | 	call	#_hg010b_spin2_setcursorx
013dc                 | LR__0044
013dc                 | '   if key4=79 then						' arrow right
013dc     4F 32 0E F2 | 	cmp	local11, #79 wz
013e0     20 00 90 5D |  if_ne	jmp	#LR__0045
013e4                 | ' return cursor_x
013e4     3C E4 05 F1 | 	add	objptr, #60
013e8     F2 54 E2 FA | 	rdword	local28, objptr
013ec     3C E4 85 F1 | 	sub	objptr, #60
013f0     02 54 06 F1 | 	add	local28, #2
013f4                 | '     cx=v.getcursorx()+2 
013f4                 | '     if cx>254  then cx=254 
013f4     FE 54 36 F3 | 	fle	local28, #254 wc
013f8     2A 29 02 F6 | 	mov	local06, local28
013fc     14 13 02 F6 | 	mov	arg01, local06
01400     68 DC B1 FD | 	call	#_hg010b_spin2_setcursorx
01404                 | LR__0045
01404                 | ' 
01404                 | '   if key4=73 then 						' ins
01404     49 32 0E F2 | 	cmp	local11, #73 wz
01408     40 00 90 5D |  if_ne	jmp	#LR__0048
0140c     51 00 00 FF 
01410     D8 E5 05 F1 | 	add	objptr, ##41944
01414     F2 28 02 FB | 	rdlong	local06, objptr
01418     14 35 22 F6 | 	not	local12, local06
0141c     F2 34 62 FC | 	wrlong	local12, objptr
01420                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
01420     51 00 00 FF 
01424     D8 E5 85 F1 | 	sub	objptr, ##41944
01428     00 34 0E F2 | 	cmp	local12, #0 wz
0142c     10 00 90 AD |  if_e	jmp	#LR__0046
01430     0E 28 06 F6 | 	mov	local06, #14
01434     0E 12 06 F6 | 	mov	arg01, #14
01438     B4 CA B1 FD | 	call	#_hg010b_spin2_setcursorshape
0143c     0C 00 90 FD | 	jmp	#LR__0047
01440                 | LR__0046
01440     00 28 06 F6 | 	mov	local06, #0
01444     00 12 06 F6 | 	mov	arg01, #0
01448     A4 CA B1 FD | 	call	#_hg010b_spin2_setcursorshape
0144c                 | LR__0047
0144c                 | LR__0048
0144c     00 24 06 F6 | 	mov	local04, #0
01450     C8 F3 9F FD | 	jmp	#LR__0001
01454                 | LR__0049
01454     A7 F0 03 F6 | 	mov	ptra, fp
01458     B2 00 A0 FD | 	call	#popregs_
0145c                 | _edit_ret
0145c     2D 00 64 FD | 	ret
01460                 | 
01460                 | ' 
01460                 | ' ''-----------------------------------------------------------------------------------------------------------
01460                 | ' ' 					A housekeepeer.
01460                 | ' ' A deedicated cog that is intended to do things in the background, for example tracking GUI elements
01460                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01460                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01460                 | ' ''-----------------------------------------------------------------------------------------------------------
01460                 | ' 
01460                 | ' sub housekeeper
01460                 | _housekeeper
01460                 | ' 
01460                 | ' do
01460                 | LR__0050
01460                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01460     49 E4 05 F1 | 	add	objptr, #73
01464                 | LR__0051
01464     F2 12 02 FB | 	rdlong	arg01, objptr
01468     01 12 0E F2 | 	cmp	arg01, #1 wz
0146c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01470     51 00 00 FF 
01474     5B E5 05 F1 | 	add	objptr, ##41819
01478     F2 12 02 FB | 	rdlong	arg01, objptr
0147c     01 12 06 F1 | 	add	arg01, #1
01480     F2 12 62 FC | 	wrlong	arg01, objptr
01484     51 00 00 FF 
01488     A4 E5 85 F1 | 	sub	objptr, ##41892
0148c     80 00 B0 FD | 	call	#_gethdi
01490     05 12 06 F6 | 	mov	arg01, #5
01494     78 F8 B1 FD | 	call	#__system___waitms
01498     51 00 00 FF 
0149c     A4 E5 05 F1 | 	add	objptr, ##41892
014a0     F2 12 02 FB | 	rdlong	arg01, objptr
014a4     01 12 06 F1 | 	add	arg01, #1
014a8     F2 12 62 FC | 	wrlong	arg01, objptr
014ac     51 00 00 FF 
014b0     A4 E5 85 F1 | 	sub	objptr, ##41892
014b4     58 00 B0 FD | 	call	#_gethdi
014b8     05 12 06 F6 | 	mov	arg01, #5
014bc     50 F8 B1 FD | 	call	#__system___waitms
014c0     51 00 00 FF 
014c4     A4 E5 05 F1 | 	add	objptr, ##41892
014c8     F2 12 02 FB | 	rdlong	arg01, objptr
014cc     01 12 06 F1 | 	add	arg01, #1
014d0     F2 12 62 FC | 	wrlong	arg01, objptr
014d4     51 00 00 FF 
014d8     A4 E5 85 F1 | 	sub	objptr, ##41892
014dc     30 00 B0 FD | 	call	#_gethdi
014e0     05 12 06 F6 | 	mov	arg01, #5
014e4     28 F8 B1 FD | 	call	#__system___waitms
014e8     51 00 00 FF 
014ec     A4 E5 05 F1 | 	add	objptr, ##41892
014f0     F2 12 02 FB | 	rdlong	arg01, objptr
014f4     01 12 06 F1 | 	add	arg01, #1
014f8     F2 12 62 FC | 	wrlong	arg01, objptr
014fc     51 00 00 FF 
01500     A4 E5 85 F1 | 	sub	objptr, ##41892
01504     08 00 B0 FD | 	call	#_gethdi
01508     54 FF 9F FD | 	jmp	#LR__0050
0150c                 | _housekeeper_ret
0150c     2D 00 64 FD | 	ret
01510                 | 
01510                 | ' 
01510                 | ' '----------------------------------------------------------------------------------------------------------
01510                 | ' ' gethdi is called from the houseekeeper to read HDI related values
01510                 | ' '----------------------------------------------------------------------------------------------------------
01510                 | ' 
01510                 | ' sub gethdi
01510                 | _gethdi
01510     03 4A 05 F6 | 	mov	COUNT_, #3
01514     A8 00 A0 FD | 	call	#pushregs_
01518                 | '   x := mouse_xacc
01518     14 00 00 FF 
0151c     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
01520     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
01524                 | '   y := mouse_yacc
01524     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01528     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
0152c     51 00 00 FF 
01530     1C E5 05 F1 | 	add	objptr, ##41756
01534     F2 14 62 FC | 	wrlong	arg02, objptr
01538     04 E4 05 F1 | 	add	objptr, #4
0153c     F2 12 62 FC | 	wrlong	arg01, objptr
01540                 | '   x := 0
01540                 | '   y := mouse_zacc
01540     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01544     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01548     08 E4 05 F1 | 	add	objptr, #8
0154c     F2 FA 61 FC | 	wrlong	result1, objptr
01550                 | '   return mouse_bstate&7
01550     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01554     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01558     14 00 00 FF 
0155c     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
01560     07 FA 05 F5 | 	and	result1, #7
01564     04 E4 85 F1 | 	sub	objptr, #4
01568     F2 FA 61 FC | 	wrlong	result1, objptr
0156c     51 00 00 FF 
01570     24 E5 85 F1 | 	sub	objptr, ##41764
01574     00 1E 06 F6 | 	mov	local01, #0
01578                 | ' 
01578                 | ' mousex,mousey=kbm.mouse_xy()
01578                 | ' dummy,mousew=kbm.mouse_scroll()
01578                 | ' mousek=kbm.mouse_buttons()
01578                 | ' i=0:
01578                 | ' for j=0 to 6
01578     00 20 06 F6 | 	mov	local02, #0
0157c                 | LR__0060
0157c                 | '   if kbm.hidpad_id(j)>0 then
0157c     10 13 02 F6 | 	mov	arg01, local02
01580     80 ED B1 FD | 	call	#_usbnew_spin2_hidpad_id
01584     01 FA 55 F2 | 	cmps	result1, #1 wc
01588     8C 00 90 CD |  if_b	jmp	#LR__0061
0158c     10 13 02 F6 | 	mov	arg01, local02
01590     00 14 06 F6 | 	mov	arg02, #0
01594     D0 ED B1 FD | 	call	#_usbnew_spin2_hidpad_axis
01598     FD 22 02 F6 | 	mov	local03, result1
0159c     10 13 02 F6 | 	mov	arg01, local02
015a0     01 14 06 F6 | 	mov	arg02, #1
015a4     C0 ED B1 FD | 	call	#_usbnew_spin2_hidpad_axis
015a8     60 00 00 FF 
015ac     00 22 06 F1 | 	add	local03, ##49152
015b0     0F 22 46 F0 | 	shr	local03, #15
015b4     01 14 06 F6 | 	mov	arg02, #1
015b8     11 15 02 F1 | 	add	arg02, local03
015bc     60 00 00 FF 
015c0     00 FA 05 F1 | 	add	result1, ##49152
015c4     0F FA 45 F0 | 	shr	result1, #15
015c8     01 12 06 F6 | 	mov	arg01, #1
015cc     FD 12 02 F1 | 	add	arg01, result1
015d0     0F 23 02 F6 | 	mov	local03, local01
015d4     02 22 66 F0 | 	shl	local03, #2
015d8     51 00 00 FF 
015dc     2C E5 05 F1 | 	add	objptr, ##41772
015e0     F2 22 02 F1 | 	add	local03, objptr
015e4     02 12 66 F0 | 	shl	arg01, #2
015e8     09 15 02 F1 | 	add	arg02, arg01
015ec     11 15 62 FC | 	wrlong	arg02, local03
015f0     0F 23 02 F6 | 	mov	local03, local01
015f4     02 22 66 F0 | 	shl	local03, #2
015f8     1C E4 05 F1 | 	add	objptr, #28
015fc     F2 22 02 F1 | 	add	local03, objptr
01600     10 13 02 F6 | 	mov	arg01, local02
01604     51 00 00 FF 
01608     48 E5 85 F1 | 	sub	objptr, ##41800
0160c     24 ED B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
01610     11 FB 61 FC | 	wrlong	result1, local03
01614     01 1E 06 F1 | 	add	local01, #1
01618                 | LR__0061
01618     01 20 06 F1 | 	add	local02, #1
0161c     07 20 16 F2 | 	cmp	local02, #7 wc
01620     58 FF 9F CD |  if_b	jmp	#LR__0060
01624     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
01628                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
01628                 | LR__0062
01628     07 1E 16 F2 | 	cmp	local01, #7 wc
0162c     3C 00 90 3D |  if_ae	jmp	#LR__0064
01630     0F 23 02 F6 | 	mov	local03, local01
01634     02 22 66 F0 | 	shl	local03, #2
01638     51 00 00 FF 
0163c     2C E5 05 F1 | 	add	objptr, ##41772
01640     F2 22 02 F1 | 	add	local03, objptr
01644     11 01 68 FC | 	wrlong	#0, local03
01648     0F 23 02 F6 | 	mov	local03, local01
0164c     02 22 66 F0 | 	shl	local03, #2
01650     1C E4 05 F1 | 	add	objptr, #28
01654     F2 22 02 F1 | 	add	local03, objptr
01658     11 01 68 FC | 	wrlong	#0, local03
0165c     01 1E 06 F1 | 	add	local01, #1
01660     51 00 00 FF 
01664     48 E5 85 F1 | 	sub	objptr, ##41800
01668     BC FF 9F FD | 	jmp	#LR__0062
0166c                 | LR__0063
0166c                 | LR__0064
0166c     A7 F0 03 F6 | 	mov	ptra, fp
01670     B2 00 A0 FD | 	call	#popregs_
01674                 | _gethdi_ret
01674     2D 00 64 FD | 	ret
01678                 | 
01678                 | ' 
01678                 | ' '-------------------------------------------------------------------------------------------------------------
01678                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01678                 | ' '-------------------------------------------------------------------------------------------------------------
01678                 | ' 
01678                 | ' '-------------------------------------------------------------------------------------------------------------
01678                 | ' '
01678                 | ' '                                     LINE INTERPRETER/TOKENIZER
01678                 | ' '
01678                 | ' '-------------------------------------------------------------------------------------------------------------
01678                 | ' 
01678                 | ' 
01678                 | ' sub interpret
01678                 | _interpret
01678     2F 4A 05 F6 | 	mov	COUNT_, #47
0167c     A8 00 A0 FD | 	call	#pushregs_
01680     01 00 00 FF 
01684     7C F0 07 F1 | 	add	ptra, ##636
01688     37 00 00 FF 
0168c     1C E4 05 F1 | 	add	objptr, ##28188
01690     F2 12 02 FB | 	rdlong	arg01, objptr
01694     37 00 00 FF 
01698     1C E4 85 F1 | 	sub	objptr, ##28188
0169c     88 18 B2 FD | 	call	#__system__RTrim_S
016a0     FD 12 02 F6 | 	mov	arg01, result1
016a4     C0 17 B2 FD | 	call	#__system__LTrim_S
016a8     37 00 00 FF 
016ac     20 E4 05 F1 | 	add	objptr, ##28192
016b0     F2 FA 61 FC | 	wrlong	result1, objptr
016b4     04 E4 05 F1 | 	add	objptr, #4
016b8     FF FF FF FF 
016bc     F2 FE 6B FC | 	wrlong	##-1, objptr
016c0     1A 00 00 FF 
016c4     9C E5 05 F1 | 	add	objptr, ##13724
016c8     F2 00 68 FC | 	wrlong	#0, objptr
016cc     07 00 00 FF 
016d0     44 E5 85 F1 | 	sub	objptr, ##3908
016d4     F2 00 68 FC | 	wrlong	#0, objptr
016d8     4A 00 00 FF 
016dc     7C E4 85 F1 | 	sub	objptr, ##38012
016e0     00 1E 06 F6 | 	mov	local01, #0
016e4                 | LR__0070
016e4                 | ' 
016e4                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
016e4                 | ' 
016e4                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
016e4                 | ' 
016e4                 | ' 108 
016e4                 | ' for i=0 to 125: separators(i)=0 :next i
016e4     00 20 06 F6 | 	mov	local02, #0
016e8     38 4E 05 F1 | 	add	fp, #56
016ec     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
016f0                 | LR__0071
016f0     10 23 02 F6 | 	mov	local03, local02
016f4     02 22 66 F0 | 	shl	local03, #2
016f8     A7 22 02 F1 | 	add	local03, fp
016fc     11 01 68 FC | 	wrlong	#0, local03
01700     01 20 06 F1 | 	add	local02, #1
01704     7E 20 56 F2 | 	cmps	local02, #126 wc
01708     E4 FF 9F CD |  if_b	jmp	#LR__0071
0170c                 | LR__0072
0170c     38 4E 85 F1 | 	sub	fp, #56
01710                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
01710     00 20 06 F6 | 	mov	local02, #0
01714     35 00 00 FF 
01718     0C E4 05 F1 | 	add	objptr, ##27148
0171c     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
01720                 | LR__0073
01720     10 25 02 F6 | 	mov	local04, local02
01724     03 24 66 F0 | 	shl	local04, #3
01728     F2 24 02 F1 | 	add	local04, objptr
0172c     81 01 00 FF 
01730     D4 16 06 F6 | 	mov	arg03, ##@LR__5039
01734     12 17 62 FC | 	wrlong	arg03, local04
01738     10 25 02 F6 | 	mov	local04, local02
0173c     03 24 66 F0 | 	shl	local04, #3
01740     F2 26 02 F6 | 	mov	local05, objptr
01744     F2 24 02 F1 | 	add	local04, objptr
01748     00 28 06 F6 | 	mov	local06, #0
0174c     04 24 06 F1 | 	add	local04, #4
01750     12 01 68 FC | 	wrlong	#0, local04
01754     01 20 06 F1 | 	add	local02, #1
01758     7E 20 56 F2 | 	cmps	local02, #126 wc
0175c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01760                 | LR__0074
01760     02 00 00 FF 
01764     10 E4 05 F1 | 	add	objptr, ##1040
01768     F2 12 02 FB | 	rdlong	arg01, objptr
0176c     37 00 00 FF 
01770     1C E4 85 F1 | 	sub	objptr, ##28188
01774     B0 17 B2 FD | 	call	#__system__RTrim_S
01778     FD 12 02 F6 | 	mov	arg01, result1
0177c     E8 16 B2 FD | 	call	#__system__LTrim_S
01780     37 00 00 FF 
01784     1C E4 05 F1 | 	add	objptr, ##28188
01788     F2 FA 61 FC | 	wrlong	result1, objptr
0178c     81 01 00 FF 
01790     D5 24 06 F6 | 	mov	local04, ##@LR__5040
01794     1A 00 00 FF 
01798     D0 E5 05 F1 | 	add	objptr, ##13776
0179c     F2 24 62 FC | 	wrlong	local04, objptr
017a0     1A 00 00 FF 
017a4     D0 E5 85 F1 | 	sub	objptr, ##13776
017a8     F2 12 02 FB | 	rdlong	arg01, objptr
017ac     37 00 00 FF 
017b0     1C E4 85 F1 | 	sub	objptr, ##28188
017b4     09 2B 02 F6 | 	mov	local07, arg01
017b8     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
017bc                 | LR__0075
017bc     15 FB C9 FA | 	rdbyte	result1, local07 wz
017c0     01 2A 06 51 |  if_ne	add	local07, #1
017c4     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
017c8                 | LR__0076
017c8     09 2B 8A F1 | 	sub	local07, arg01 wz
017cc     51 00 00 FF 
017d0     F0 E5 05 F1 | 	add	objptr, ##41968
017d4     F2 2A 62 FC | 	wrlong	local07, objptr
017d8                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
017d8     51 00 00 FF 
017dc     F0 E5 85 F1 | 	sub	objptr, ##41968
017e0     38 24 90 AD |  if_e	jmp	#LR__0196
017e4     00 2C 06 F6 | 	mov	local08, #0
017e8                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
017e8                 | ' for i=1 to len(line$)
017e8     01 20 06 F6 | 	mov	local02, #1
017ec     37 00 00 FF 
017f0     1C E4 05 F1 | 	add	objptr, ##28188
017f4     F2 12 02 FB | 	rdlong	arg01, objptr
017f8     37 00 00 FF 
017fc     1C E4 85 F1 | 	sub	objptr, ##28188
01800     09 2B 02 F6 | 	mov	local07, arg01
01804     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
01808                 | LR__0077
01808     15 FB C9 FA | 	rdbyte	result1, local07 wz
0180c     01 2A 06 51 |  if_ne	add	local07, #1
01810     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
01814                 | LR__0078
01814     09 2B 82 F1 | 	sub	local07, arg01
01818     15 2F 02 F6 | 	mov	local09, local07
0181c     01 2E 06 F1 | 	add	local09, #1
01820                 | LR__0079
01820     17 21 52 F2 | 	cmps	local02, local09 wc
01824     AC 00 90 3D |  if_ae	jmp	#LR__0081
01828                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
01828     37 00 00 FF 
0182c     1C E4 05 F1 | 	add	objptr, ##28188
01830     F2 12 02 FB | 	rdlong	arg01, objptr
01834     37 00 00 FF 
01838     1C E4 85 F1 | 	sub	objptr, ##28188
0183c     10 15 02 F6 | 	mov	arg02, local02
01840     01 16 06 F6 | 	mov	arg03, #1
01844     68 13 B2 FD | 	call	#__system__Mid_S
01848     FD 12 02 F6 | 	mov	arg01, result1
0184c     81 01 00 FF 
01850     D6 14 06 F6 | 	mov	arg02, ##@LR__5041
01854     EC F1 B1 FD | 	call	#__system___string_cmp
01858     00 FA 0D F2 | 	cmp	result1, #0 wz
0185c     00 2C 0E A2 |  if_e	cmp	local08, #0 wz
01860     01 2C 06 A6 |  if_e	mov	local08, #1
01864     3C 00 90 AD |  if_e	jmp	#LR__0080
01868     37 00 00 FF 
0186c     1C E4 05 F1 | 	add	objptr, ##28188
01870     F2 12 02 FB | 	rdlong	arg01, objptr
01874     37 00 00 FF 
01878     1C E4 85 F1 | 	sub	objptr, ##28188
0187c     10 15 02 F6 | 	mov	arg02, local02
01880     01 16 06 F6 | 	mov	arg03, #1
01884     28 13 B2 FD | 	call	#__system__Mid_S
01888     FD 12 02 F6 | 	mov	arg01, result1
0188c     81 01 00 FF 
01890     D8 14 06 F6 | 	mov	arg02, ##@LR__5042
01894     AC F1 B1 FD | 	call	#__system___string_cmp
01898     00 FA 0D F2 | 	cmp	result1, #0 wz
0189c     01 2C 0E A2 |  if_e	cmp	local08, #1 wz
018a0     00 2C 06 A6 |  if_e	mov	local08, #0
018a4                 | LR__0080
018a4     10 25 02 F6 | 	mov	local04, local02
018a8     03 24 66 F0 | 	shl	local04, #3
018ac     35 00 00 FF 
018b0     0C E4 05 F1 | 	add	objptr, ##27148
018b4     F2 26 02 F6 | 	mov	local05, objptr
018b8     F2 24 02 F1 | 	add	local04, objptr
018bc     04 24 06 F1 | 	add	local04, #4
018c0     12 2D 62 FC | 	wrlong	local08, local04
018c4     01 20 06 F1 | 	add	local02, #1
018c8     35 00 00 FF 
018cc     0C E4 85 F1 | 	sub	objptr, ##27148
018d0     4C FF 9F FD | 	jmp	#LR__0079
018d4                 | LR__0081
018d4     01 20 06 F6 | 	mov	local02, #1
018d8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
018d8                 | LR__0082
018d8     37 00 00 FF 
018dc     1C E4 05 F1 | 	add	objptr, ##28188
018e0     F2 12 02 FB | 	rdlong	arg01, objptr
018e4     37 00 00 FF 
018e8     1C E4 85 F1 | 	sub	objptr, ##28188
018ec     10 15 02 F6 | 	mov	arg02, local02
018f0     01 16 06 F6 | 	mov	arg03, #1
018f4     B8 12 B2 FD | 	call	#__system__Mid_S
018f8     FD 12 02 F6 | 	mov	arg01, result1
018fc     81 01 00 FF 
01900     DA 30 06 F6 | 	mov	local10, ##@LR__5043
01904     18 15 02 F6 | 	mov	arg02, local10
01908     38 F1 B1 FD | 	call	#__system___string_cmp
0190c     00 FA 0D F2 | 	cmp	result1, #0 wz
01910     34 00 90 5D |  if_ne	jmp	#LR__0083
01914     10 27 02 F6 | 	mov	local05, local02
01918     03 26 66 F0 | 	shl	local05, #3
0191c     35 00 00 FF 
01920     0C E4 05 F1 | 	add	objptr, ##27148
01924     F2 28 02 F6 | 	mov	local06, objptr
01928     F2 26 02 F1 | 	add	local05, objptr
0192c     04 26 06 F1 | 	add	local05, #4
01930     13 33 02 FB | 	rdlong	local11, local05
01934     04 26 86 F1 | 	sub	local05, #4
01938     19 35 0A F6 | 	mov	local12, local11 wz
0193c     35 00 00 FF 
01940     0C E4 85 F1 | 	sub	objptr, ##27148
01944     24 00 90 AD |  if_e	jmp	#LR__0084
01948                 | LR__0083
01948     51 00 00 FF 
0194c     F0 E5 05 F1 | 	add	objptr, ##41968
01950     F2 36 02 FB | 	rdlong	local13, objptr
01954     51 00 00 FF 
01958     F0 E5 85 F1 | 	sub	objptr, ##41968
0195c     1B 39 02 F6 | 	mov	local14, local13
01960     1C 21 52 F2 | 	cmps	local02, local14 wc
01964     01 20 06 C1 |  if_b	add	local02, #1
01968     6C FF 9F CD |  if_b	jmp	#LR__0082
0196c                 | LR__0084
0196c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
0196c     51 00 00 FF 
01970     F0 E5 05 F1 | 	add	objptr, ##41968
01974     F2 24 02 FB | 	rdlong	local04, objptr
01978     51 00 00 FF 
0197c     F0 E5 85 F1 | 	sub	objptr, ##41968
01980     12 21 52 F2 | 	cmps	local02, local04 wc
01984     A8 00 90 3D |  if_ae	jmp	#LR__0087
01988     37 00 00 FF 
0198c     1C E4 05 F1 | 	add	objptr, ##28188
01990     F2 28 02 FB | 	rdlong	local06, objptr
01994     37 00 00 FF 
01998     1C E4 85 F1 | 	sub	objptr, ##28188
0199c     14 13 02 F6 | 	mov	arg01, local06
019a0     09 2B 02 F6 | 	mov	local07, arg01
019a4     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
019a8                 | LR__0085
019a8     15 FB C9 FA | 	rdbyte	result1, local07 wz
019ac     01 2A 06 51 |  if_ne	add	local07, #1
019b0     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
019b4                 | LR__0086
019b4     09 2B 82 F1 | 	sub	local07, arg01
019b8     15 27 02 F6 | 	mov	local05, local07
019bc     13 15 02 F6 | 	mov	arg02, local05
019c0     10 15 82 F1 | 	sub	arg02, local02
019c4     14 13 02 F6 | 	mov	arg01, local06
019c8     54 11 B2 FD | 	call	#__system__Right_S
019cc     FD 12 02 F6 | 	mov	arg01, result1
019d0     54 15 B2 FD | 	call	#__system__RTrim_S
019d4     FD 12 02 F6 | 	mov	arg01, result1
019d8     8C 14 B2 FD | 	call	#__system__LTrim_S
019dc     51 00 00 FF 
019e0     F4 E5 05 F1 | 	add	objptr, ##41972
019e4     F2 FA 61 FC | 	wrlong	result1, objptr
019e8     1A 00 00 FF 
019ec     D8 E5 85 F1 | 	sub	objptr, ##13784
019f0     F2 12 02 FB | 	rdlong	arg01, objptr
019f4     37 00 00 FF 
019f8     1C E4 85 F1 | 	sub	objptr, ##28188
019fc     01 20 86 F1 | 	sub	local02, #1
01a00     10 15 02 F6 | 	mov	arg02, local02
01a04     90 10 B2 FD | 	call	#__system__Left_S
01a08     FD 12 02 F6 | 	mov	arg01, result1
01a0c     18 15 B2 FD | 	call	#__system__RTrim_S
01a10     FD 12 02 F6 | 	mov	arg01, result1
01a14     50 14 B2 FD | 	call	#__system__LTrim_S
01a18     37 00 00 FF 
01a1c     1C E4 05 F1 | 	add	objptr, ##28188
01a20     F2 FA 61 FC | 	wrlong	result1, objptr
01a24     37 00 00 FF 
01a28     1C E4 85 F1 | 	sub	objptr, ##28188
01a2c     1C 00 90 FD | 	jmp	#LR__0088
01a30                 | LR__0087
01a30     81 01 00 FF 
01a34     DC 24 06 F6 | 	mov	local04, ##@LR__5044
01a38     51 00 00 FF 
01a3c     F4 E5 05 F1 | 	add	objptr, ##41972
01a40     F2 24 62 FC | 	wrlong	local04, objptr
01a44     51 00 00 FF 
01a48     F4 E5 85 F1 | 	sub	objptr, ##41972
01a4c                 | LR__0088
01a4c                 | ' 
01a4c                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01a4c     37 00 00 FF 
01a50     24 E4 05 F1 | 	add	objptr, ##28196
01a54     F2 24 02 FB | 	rdlong	local04, objptr
01a58     37 00 00 FF 
01a5c     24 E4 85 F1 | 	sub	objptr, ##28196
01a60     FF FF 7F FF 
01a64     FF 25 0E F2 | 	cmp	local04, ##-1 wz
01a68     40 00 90 5D |  if_ne	jmp	#LR__0089
01a6c     51 00 00 FF 
01a70     F4 E5 05 F1 | 	add	objptr, ##41972
01a74     F2 12 02 FB | 	rdlong	arg01, objptr
01a78     51 00 00 FF 
01a7c     F4 E5 85 F1 | 	sub	objptr, ##41972
01a80     81 01 00 FF 
01a84     DD 28 06 F6 | 	mov	local06, ##@LR__5045
01a88     14 15 02 F6 | 	mov	arg02, local06
01a8c     B4 EF B1 FD | 	call	#__system___string_cmp
01a90     00 FA 0D F2 | 	cmp	result1, #0 wz
01a94     37 00 00 5F 
01a98     24 E4 05 51 |  if_ne	add	objptr, ##28196
01a9c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01aa0     37 00 00 5F 
01aa4     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01aa8     08 01 90 5D |  if_ne	jmp	#LR__0093
01aac                 | LR__0089
01aac                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01aac     37 00 00 FF 
01ab0     24 E4 05 F1 | 	add	objptr, ##28196
01ab4     F2 24 02 FB | 	rdlong	local04, objptr
01ab8     37 00 00 FF 
01abc     24 E4 85 F1 | 	sub	objptr, ##28196
01ac0     FF FF 7F FF 
01ac4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
01ac8     3C 00 90 5D |  if_ne	jmp	#LR__0090
01acc     51 00 00 FF 
01ad0     F4 E5 05 F1 | 	add	objptr, ##41972
01ad4     F2 12 02 FB | 	rdlong	arg01, objptr
01ad8     51 00 00 FF 
01adc     F4 E5 85 F1 | 	sub	objptr, ##41972
01ae0     81 01 00 FF 
01ae4     DE 14 06 F6 | 	mov	arg02, ##@LR__5046
01ae8     58 EF B1 FD | 	call	#__system___string_cmp
01aec     00 FA 0D F2 | 	cmp	result1, #0 wz
01af0     37 00 00 AF 
01af4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01af8     F2 06 68 AC |  if_e	wrlong	#3, objptr
01afc     37 00 00 AF 
01b00     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01b04     AC 00 90 AD |  if_e	jmp	#LR__0093
01b08                 | LR__0090
01b08                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01b08     37 00 00 FF 
01b0c     24 E4 05 F1 | 	add	objptr, ##28196
01b10     F2 24 02 FB | 	rdlong	local04, objptr
01b14     37 00 00 FF 
01b18     24 E4 85 F1 | 	sub	objptr, ##28196
01b1c     04 24 0E F2 | 	cmp	local04, #4 wz
01b20     3C 00 90 5D |  if_ne	jmp	#LR__0091
01b24     51 00 00 FF 
01b28     F4 E5 05 F1 | 	add	objptr, ##41972
01b2c     F2 12 02 FB | 	rdlong	arg01, objptr
01b30     51 00 00 FF 
01b34     F4 E5 85 F1 | 	sub	objptr, ##41972
01b38     81 01 00 FF 
01b3c     DF 14 06 F6 | 	mov	arg02, ##@LR__5047
01b40     00 EF B1 FD | 	call	#__system___string_cmp
01b44     00 FA 0D F2 | 	cmp	result1, #0 wz
01b48     37 00 00 5F 
01b4c     24 E4 05 51 |  if_ne	add	objptr, ##28196
01b50     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01b54     37 00 00 5F 
01b58     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01b5c     54 00 90 5D |  if_ne	jmp	#LR__0093
01b60                 | LR__0091
01b60                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01b60     37 00 00 FF 
01b64     24 E4 05 F1 | 	add	objptr, ##28196
01b68     F2 24 02 FB | 	rdlong	local04, objptr
01b6c     37 00 00 FF 
01b70     24 E4 85 F1 | 	sub	objptr, ##28196
01b74     04 24 0E F2 | 	cmp	local04, #4 wz
01b78     38 00 90 5D |  if_ne	jmp	#LR__0092
01b7c     51 00 00 FF 
01b80     F4 E5 05 F1 | 	add	objptr, ##41972
01b84     F2 12 02 FB | 	rdlong	arg01, objptr
01b88     51 00 00 FF 
01b8c     F4 E5 85 F1 | 	sub	objptr, ##41972
01b90     81 01 00 FF 
01b94     E0 14 06 F6 | 	mov	arg02, ##@LR__5048
01b98     A8 EE B1 FD | 	call	#__system___string_cmp
01b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
01ba0     37 00 00 AF 
01ba4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01ba8     F2 04 68 AC |  if_e	wrlong	#2, objptr
01bac     37 00 00 AF 
01bb0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01bb4                 | LR__0092
01bb4                 | LR__0093
01bb4     38 4E 05 F1 | 	add	fp, #56
01bb8     A7 00 68 FC | 	wrlong	#0, fp
01bbc     38 4E 85 F1 | 	sub	fp, #56
01bc0     00 20 06 F6 | 	mov	local02, #0
01bc4     01 3A 06 F6 | 	mov	local15, #1
01bc8                 | ' 
01bc8                 | ' ' 1b: find separators
01bc8                 | ' 
01bc8                 | ' 107
01bc8                 | ' separators(0)=0
01bc8                 | ' i=0: j=1
01bc8                 | ' do: 
01bc8                 | LR__0094
01bc8     01 20 06 F1 | 	add	local02, #1
01bcc     37 00 00 FF 
01bd0     1C E4 05 F1 | 	add	objptr, ##28188
01bd4     F2 12 02 FB | 	rdlong	arg01, objptr
01bd8     37 00 00 FF 
01bdc     1C E4 85 F1 | 	sub	objptr, ##28188
01be0     10 15 02 F6 | 	mov	arg02, local02
01be4     01 16 06 F6 | 	mov	arg03, #1
01be8     C4 0F B2 FD | 	call	#__system__Mid_S
01bec     FD 3C 02 F6 | 	mov	local16, result1
01bf0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01bf0     1E 13 02 F6 | 	mov	arg01, local16
01bf4     04 28 B0 FD | 	call	#_isseparator
01bf8     00 FA 0D F2 | 	cmp	result1, #0 wz
01bfc     1C 00 90 AD |  if_e	jmp	#LR__0095
01c00     1D 23 02 F6 | 	mov	local03, local15
01c04     02 22 66 F0 | 	shl	local03, #2
01c08     38 4E 05 F1 | 	add	fp, #56
01c0c     A7 22 02 F1 | 	add	local03, fp
01c10     11 21 62 FC | 	wrlong	local02, local03
01c14     01 3A 06 F1 | 	add	local15, #1
01c18     38 4E 85 F1 | 	sub	fp, #56
01c1c                 | LR__0095
01c1c     51 00 00 FF 
01c20     F0 E5 05 F1 | 	add	objptr, ##41968
01c24     F2 24 02 FB | 	rdlong	local04, objptr
01c28     51 00 00 FF 
01c2c     F0 E5 85 F1 | 	sub	objptr, ##41968
01c30     12 21 5A F2 | 	cmps	local02, local04 wcz
01c34     90 FF 9F ED |  if_be	jmp	#LR__0094
01c38     1D 23 02 F6 | 	mov	local03, local15
01c3c     02 22 66 F0 | 	shl	local03, #2
01c40     38 4E 05 F1 | 	add	fp, #56
01c44     A7 30 02 F6 | 	mov	local10, fp
01c48     A7 22 02 F1 | 	add	local03, fp
01c4c     11 21 62 FC | 	wrlong	local02, local03
01c50     00 3E 06 F6 | 	mov	local17, #0
01c54                 | ' for i=0 to j-1 
01c54     00 20 06 F6 | 	mov	local02, #0
01c58     1D 41 02 F6 | 	mov	local18, local15
01c5c     38 4E 85 F1 | 	sub	fp, #56
01c60                 | LR__0096
01c60     20 21 52 F2 | 	cmps	local02, local18 wc
01c64     50 01 90 3D |  if_ae	jmp	#LR__0100
01c68     10 23 02 F6 | 	mov	local03, local02
01c6c     02 22 66 F0 | 	shl	local03, #2
01c70     38 4E 05 F1 | 	add	fp, #56
01c74     A7 22 02 F1 | 	add	local03, fp
01c78     11 27 02 FB | 	rdlong	local05, local03
01c7c     51 00 00 FF 
01c80     FC E5 05 F1 | 	add	objptr, ##41980
01c84     F2 26 62 FC | 	wrlong	local05, objptr
01c88     10 23 02 F6 | 	mov	local03, local02
01c8c     01 22 06 F1 | 	add	local03, #1
01c90     02 22 66 F0 | 	shl	local03, #2
01c94     A7 30 02 F6 | 	mov	local10, fp
01c98     A7 22 02 F1 | 	add	local03, fp
01c9c     11 27 02 FB | 	rdlong	local05, local03
01ca0     04 E4 05 F1 | 	add	objptr, #4
01ca4     F2 26 62 FC | 	wrlong	local05, objptr
01ca8                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01ca8     04 E4 85 F1 | 	sub	objptr, #4
01cac     F2 24 02 FB | 	rdlong	local04, objptr
01cb0     51 00 00 FF 
01cb4     FC E5 85 F1 | 	sub	objptr, ##41980
01cb8     01 24 56 F2 | 	cmps	local04, #1 wc
01cbc     38 4E 85 F1 | 	sub	fp, #56
01cc0     68 00 90 CD |  if_b	jmp	#LR__0098
01cc4     37 00 00 FF 
01cc8     1C E4 05 F1 | 	add	objptr, ##28188
01ccc     F2 12 02 FB | 	rdlong	arg01, objptr
01cd0     1A 00 00 FF 
01cd4     E0 E5 05 F1 | 	add	objptr, ##13792
01cd8     F2 14 02 FB | 	rdlong	arg02, objptr
01cdc     51 00 00 FF 
01ce0     FC E5 85 F1 | 	sub	objptr, ##41980
01ce4     01 16 06 F6 | 	mov	arg03, #1
01ce8     C4 0E B2 FD | 	call	#__system__Mid_S
01cec     FD 42 02 F6 | 	mov	local19, result1
01cf0     81 01 00 FF 
01cf4     E1 14 06 F6 | 	mov	arg02, ##@LR__5049
01cf8     21 13 02 F6 | 	mov	arg01, local19
01cfc     44 ED B1 FD | 	call	#__system___string_cmp
01d00     00 FA 0D F2 | 	cmp	result1, #0 wz
01d04     24 00 90 AD |  if_e	jmp	#LR__0097
01d08     1F 31 02 F6 | 	mov	local10, local17
01d0c     03 30 66 F0 | 	shl	local10, #3
01d10     35 00 00 FF 
01d14     0C E4 05 F1 | 	add	objptr, ##27148
01d18     F2 30 02 F1 | 	add	local10, objptr
01d1c     18 43 62 FC | 	wrlong	local19, local10
01d20     01 3E 06 F1 | 	add	local17, #1
01d24     35 00 00 FF 
01d28     0C E4 85 F1 | 	sub	objptr, ##27148
01d2c                 | LR__0097
01d2c                 | LR__0098
01d2c     37 00 00 FF 
01d30     1C E4 05 F1 | 	add	objptr, ##28188
01d34     F2 12 02 FB | 	rdlong	arg01, objptr
01d38     1A 00 00 FF 
01d3c     E0 E5 05 F1 | 	add	objptr, ##13792
01d40     F2 14 02 FB | 	rdlong	arg02, objptr
01d44     01 14 06 F1 | 	add	arg02, #1
01d48     04 E4 05 F1 | 	add	objptr, #4
01d4c     F2 16 02 FB | 	rdlong	arg03, objptr
01d50     04 E4 85 F1 | 	sub	objptr, #4
01d54     F2 32 02 FB | 	rdlong	local11, objptr
01d58     51 00 00 FF 
01d5c     FC E5 85 F1 | 	sub	objptr, ##41980
01d60     19 35 02 F6 | 	mov	local12, local11
01d64     1A 17 82 F1 | 	sub	arg03, local12
01d68     01 16 86 F1 | 	sub	arg03, #1
01d6c     40 0E B2 FD | 	call	#__system__Mid_S
01d70     FD 42 02 F6 | 	mov	local19, result1
01d74                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01d74     81 01 00 FF 
01d78     E2 14 06 F6 | 	mov	arg02, ##@LR__5050
01d7c     21 13 02 F6 | 	mov	arg01, local19
01d80     C0 EC B1 FD | 	call	#__system___string_cmp
01d84     00 FA 0D F2 | 	cmp	result1, #0 wz
01d88     24 00 90 AD |  if_e	jmp	#LR__0099
01d8c     1F 31 02 F6 | 	mov	local10, local17
01d90     03 30 66 F0 | 	shl	local10, #3
01d94     35 00 00 FF 
01d98     0C E4 05 F1 | 	add	objptr, ##27148
01d9c     F2 30 02 F1 | 	add	local10, objptr
01da0     18 43 62 FC | 	wrlong	local19, local10
01da4     01 3E 06 F1 | 	add	local17, #1
01da8     35 00 00 FF 
01dac     0C E4 85 F1 | 	sub	objptr, ##27148
01db0                 | LR__0099
01db0     01 20 06 F1 | 	add	local02, #1
01db4     A8 FE 9F FD | 	jmp	#LR__0096
01db8                 | LR__0100
01db8                 | ' 
01db8                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01db8                 | ' 
01db8                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01db8     37 00 00 FF 
01dbc     24 E4 05 F1 | 	add	objptr, ##28196
01dc0     F2 24 0A FB | 	rdlong	local04, objptr wz
01dc4     37 00 00 FF 
01dc8     24 E4 85 F1 | 	sub	objptr, ##28196
01dcc     37 00 00 5F 
01dd0     24 E4 05 51 |  if_ne	add	objptr, ##28196
01dd4     F2 30 02 5B |  if_ne	rdlong	local10, objptr
01dd8     37 00 00 5F 
01ddc     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01de0     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
01de4     B8 00 90 5D |  if_ne	jmp	#LR__0103
01de8     35 00 00 FF 
01dec     0C E4 05 F1 | 	add	objptr, ##27148
01df0     F2 32 02 FB | 	rdlong	local11, objptr
01df4     35 00 00 FF 
01df8     0C E4 85 F1 | 	sub	objptr, ##27148
01dfc     19 13 02 F6 | 	mov	arg01, local11
01e00     DC 45 B0 FD | 	call	#_isdec
01e04     FD 34 02 F6 | 	mov	local12, result1
01e08     1A 29 22 F6 | 	not	local06, local12
01e0c     00 28 0E F2 | 	cmp	local06, #0 wz
01e10     8C 00 90 AD |  if_e	jmp	#LR__0103
01e14     1F 21 02 F6 | 	mov	local02, local17
01e18     35 00 00 FF 
01e1c     0C E4 05 F1 | 	add	objptr, ##27148
01e20     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01e24                 | LR__0101
01e24     10 27 02 F6 | 	mov	local05, local02
01e28     01 26 86 F1 | 	sub	local05, #1
01e2c     03 26 66 F0 | 	shl	local05, #3
01e30     F2 26 02 F1 | 	add	local05, objptr
01e34     13 25 02 FB | 	rdlong	local04, local05
01e38     10 29 02 F6 | 	mov	local06, local02
01e3c     01 28 86 F1 | 	sub	local06, #1
01e40     03 28 66 F0 | 	shl	local06, #3
01e44     F2 28 02 F1 | 	add	local06, objptr
01e48     04 28 06 F1 | 	add	local06, #4
01e4c     14 23 02 FB | 	rdlong	local03, local06
01e50     10 29 02 F6 | 	mov	local06, local02
01e54     03 28 66 F0 | 	shl	local06, #3
01e58     F2 34 02 F6 | 	mov	local12, objptr
01e5c     F2 28 02 F1 | 	add	local06, objptr
01e60     14 25 62 FC | 	wrlong	local04, local06
01e64     10 33 02 F6 | 	mov	local11, local02
01e68     19 37 02 F6 | 	mov	local13, local11
01e6c     03 36 66 F0 | 	shl	local13, #3
01e70     F2 36 02 F1 | 	add	local13, objptr
01e74     04 36 06 F1 | 	add	local13, #4
01e78     1B 23 62 FC | 	wrlong	local03, local13
01e7c     01 20 86 F1 | 	sub	local02, #1
01e80     01 20 56 F2 | 	cmps	local02, #1 wc
01e84     9C FF 9F 3D |  if_ae	jmp	#LR__0101
01e88                 | LR__0102
01e88     81 01 00 FF 
01e8c     E3 24 06 F6 | 	mov	local04, ##@LR__5051
01e90     F2 24 62 FC | 	wrlong	local04, objptr
01e94     35 00 00 FF 
01e98     0C E4 85 F1 | 	sub	objptr, ##27148
01e9c     01 3E 06 F1 | 	add	local17, #1
01ea0                 | LR__0103
01ea0     00 20 06 F6 | 	mov	local02, #0
01ea4                 | ' 
01ea4                 | ' ' 1e : find strings
01ea4                 | ' 
01ea4                 | ' i=0
01ea4                 | ' do
01ea4                 | LR__0104
01ea4                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
01ea4     10 27 02 F6 | 	mov	local05, local02
01ea8     03 26 66 F0 | 	shl	local05, #3
01eac     35 00 00 FF 
01eb0     0C E4 05 F1 | 	add	objptr, ##27148
01eb4     F2 26 02 F1 | 	add	local05, objptr
01eb8     13 13 02 FB | 	rdlong	arg01, local05
01ebc     81 01 00 FF 
01ec0     E5 14 06 F6 | 	mov	arg02, ##@LR__5052
01ec4     35 00 00 FF 
01ec8     0C E4 85 F1 | 	sub	objptr, ##27148
01ecc     74 EB B1 FD | 	call	#__system___string_cmp
01ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ed4     01 20 06 51 |  if_ne	add	local02, #1
01ed8     20 01 90 5D |  if_ne	jmp	#LR__0109
01edc     10 45 02 F6 | 	mov	local20, local02
01ee0                 | LR__0105
01ee0     10 31 02 F6 | 	mov	local10, local02
01ee4     01 30 06 F1 | 	add	local10, #1
01ee8     03 30 66 F0 | 	shl	local10, #3
01eec     35 00 00 FF 
01ef0     0C E4 05 F1 | 	add	objptr, ##27148
01ef4     F2 30 02 F1 | 	add	local10, objptr
01ef8     18 43 02 FB | 	rdlong	local19, local10
01efc     22 31 02 F6 | 	mov	local10, local20
01f00     03 30 66 F0 | 	shl	local10, #3
01f04     F2 30 02 F1 | 	add	local10, objptr
01f08     22 33 02 F6 | 	mov	local11, local20
01f0c     19 39 02 F6 | 	mov	local14, local11
01f10     03 38 66 F0 | 	shl	local14, #3
01f14     F2 38 02 F1 | 	add	local14, objptr
01f18     1C 13 02 FB | 	rdlong	arg01, local14
01f1c     21 35 02 F6 | 	mov	local12, local19
01f20     1A 15 02 F6 | 	mov	arg02, local12
01f24     35 00 00 FF 
01f28     0C E4 85 F1 | 	sub	objptr, ##27148
01f2c     48 EB B1 FD | 	call	#__system___string_concat
01f30     18 FB 61 FC | 	wrlong	result1, local10
01f34     10 3B 02 F6 | 	mov	local15, local02
01f38     01 3A 06 F1 | 	add	local15, #1
01f3c     1F 47 02 F6 | 	mov	local21, local17
01f40     01 46 06 F1 | 	add	local21, #1
01f44     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
01f48                 | LR__0106
01f48     23 3B 52 F2 | 	cmps	local15, local21 wc
01f4c     70 00 90 3D |  if_ae	jmp	#LR__0108
01f50     1D 27 02 F6 | 	mov	local05, local15
01f54     01 26 06 F1 | 	add	local05, #1
01f58     03 26 66 F0 | 	shl	local05, #3
01f5c     35 00 00 FF 
01f60     0C E4 05 F1 | 	add	objptr, ##27148
01f64     F2 26 02 F1 | 	add	local05, objptr
01f68     13 25 02 FB | 	rdlong	local04, local05
01f6c     1D 29 02 F6 | 	mov	local06, local15
01f70     01 28 06 F1 | 	add	local06, #1
01f74     03 28 66 F0 | 	shl	local06, #3
01f78     F2 28 02 F1 | 	add	local06, objptr
01f7c     04 28 06 F1 | 	add	local06, #4
01f80     14 23 02 FB | 	rdlong	local03, local06
01f84     1D 29 02 F6 | 	mov	local06, local15
01f88     03 28 66 F0 | 	shl	local06, #3
01f8c     F2 34 02 F6 | 	mov	local12, objptr
01f90     F2 28 02 F1 | 	add	local06, objptr
01f94     14 25 62 FC | 	wrlong	local04, local06
01f98     1D 33 02 F6 | 	mov	local11, local15
01f9c     19 37 02 F6 | 	mov	local13, local11
01fa0     03 36 66 F0 | 	shl	local13, #3
01fa4     F2 36 02 F1 | 	add	local13, objptr
01fa8     04 36 06 F1 | 	add	local13, #4
01fac     1B 23 62 FC | 	wrlong	local03, local13
01fb0     01 3A 06 F1 | 	add	local15, #1
01fb4     35 00 00 FF 
01fb8     0C E4 85 F1 | 	sub	objptr, ##27148
01fbc     88 FF 9F FD | 	jmp	#LR__0106
01fc0                 | LR__0107
01fc0                 | LR__0108
01fc0     01 3E 86 F1 | 	sub	local17, #1
01fc4     81 01 00 FF 
01fc8     E7 14 06 F6 | 	mov	arg02, ##@LR__5053
01fcc     21 13 02 F6 | 	mov	arg01, local19
01fd0     70 EA B1 FD | 	call	#__system___string_cmp
01fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
01fd8     1F 21 52 52 |  if_ne	cmps	local02, local17 wc
01fdc     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
01fe0                 | '   if p$<>"""" then k+=1:i+=1
01fe0     81 01 00 FF 
01fe4     E9 14 06 F6 | 	mov	arg02, ##@LR__5054
01fe8     21 13 02 F6 | 	mov	arg01, local19
01fec     54 EA B1 FD | 	call	#__system___string_cmp
01ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ff4     01 3E 06 51 |  if_ne	add	local17, #1
01ff8     01 20 06 51 |  if_ne	add	local02, #1
01ffc                 | LR__0109
01ffc     1F 21 52 F2 | 	cmps	local02, local17 wc
02000     A0 FE 9F CD |  if_b	jmp	#LR__0104
02004     00 20 06 F6 | 	mov	local02, #0
02008                 | ' 
02008                 | ' ' 1f : concatenate strings if "" detected between
02008                 | '  
02008                 | ' i=0
02008                 | ' do
02008                 | LR__0110
02008                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
02008     10 27 02 F6 | 	mov	local05, local02
0200c     03 26 66 F0 | 	shl	local05, #3
02010     35 00 00 FF 
02014     0C E4 05 F1 | 	add	objptr, ##27148
02018     F2 28 02 F6 | 	mov	local06, objptr
0201c     F2 26 02 F1 | 	add	local05, objptr
02020     13 13 02 FB | 	rdlong	arg01, local05
02024     01 14 06 F6 | 	mov	arg02, #1
02028     35 00 00 FF 
0202c     0C E4 85 F1 | 	sub	objptr, ##27148
02030     EC 0A B2 FD | 	call	#__system__Right_S
02034     FD 12 02 F6 | 	mov	arg01, result1
02038     81 01 00 FF 
0203c     EB 14 06 F6 | 	mov	arg02, ##@LR__5055
02040     00 EA B1 FD | 	call	#__system___string_cmp
02044     00 FA 0D F2 | 	cmp	result1, #0 wz
02048     7C 01 90 5D |  if_ne	jmp	#LR__0116
0204c     10 29 02 F6 | 	mov	local06, local02
02050     01 28 06 F1 | 	add	local06, #1
02054     03 28 66 F0 | 	shl	local06, #3
02058     35 00 00 FF 
0205c     0C E4 05 F1 | 	add	objptr, ##27148
02060     F2 34 02 F6 | 	mov	local12, objptr
02064     F2 28 02 F1 | 	add	local06, objptr
02068     14 13 02 FB | 	rdlong	arg01, local06
0206c     01 14 06 F6 | 	mov	arg02, #1
02070     35 00 00 FF 
02074     0C E4 85 F1 | 	sub	objptr, ##27148
02078     1C 0A B2 FD | 	call	#__system__Left_S
0207c     FD 12 02 F6 | 	mov	arg01, result1
02080     81 01 00 FF 
02084     ED 14 06 F6 | 	mov	arg02, ##@LR__5056
02088     B8 E9 B1 FD | 	call	#__system___string_cmp
0208c     00 FA 0D F2 | 	cmp	result1, #0 wz
02090     34 01 90 5D |  if_ne	jmp	#LR__0116
02094     10 31 02 F6 | 	mov	local10, local02
02098     03 30 66 F0 | 	shl	local10, #3
0209c     35 00 00 FF 
020a0     0C E4 05 F1 | 	add	objptr, ##27148
020a4     F2 30 02 F1 | 	add	local10, objptr
020a8     10 39 02 F6 | 	mov	local14, local02
020ac     03 38 66 F0 | 	shl	local14, #3
020b0     F2 38 02 F1 | 	add	local14, objptr
020b4     1C 29 02 FB | 	rdlong	local06, local14
020b8     10 37 02 F6 | 	mov	local13, local02
020bc     01 36 06 F1 | 	add	local13, #1
020c0     03 36 66 F0 | 	shl	local13, #3
020c4     F2 36 02 F1 | 	add	local13, objptr
020c8     1B 35 02 FB | 	rdlong	local12, local13
020cc     10 49 02 F6 | 	mov	local22, local02
020d0     01 48 06 F1 | 	add	local22, #1
020d4     24 4B 02 F6 | 	mov	local23, local22
020d8     03 4A 66 F0 | 	shl	local23, #3
020dc     F2 4C 02 F6 | 	mov	local24, objptr
020e0     F2 4A 02 F1 | 	add	local23, objptr
020e4     25 13 02 FB | 	rdlong	arg01, local23
020e8     35 00 00 FF 
020ec     0C E4 85 F1 | 	sub	objptr, ##27148
020f0     09 2B 02 F6 | 	mov	local07, arg01
020f4     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
020f8                 | LR__0111
020f8     15 FB C9 FA | 	rdbyte	result1, local07 wz
020fc     01 2A 06 51 |  if_ne	add	local07, #1
02100     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
02104                 | LR__0112
02104     09 2B 82 F1 | 	sub	local07, arg01
02108     15 33 02 F6 | 	mov	local11, local07
0210c     01 32 86 F1 | 	sub	local11, #1
02110     1A 13 02 F6 | 	mov	arg01, local12
02114     19 15 02 F6 | 	mov	arg02, local11
02118     04 0A B2 FD | 	call	#__system__Right_S
0211c     FD 34 02 F6 | 	mov	local12, result1
02120     14 13 02 F6 | 	mov	arg01, local06
02124     1A 15 02 F6 | 	mov	arg02, local12
02128     4C E9 B1 FD | 	call	#__system___string_concat
0212c     FD 28 02 F6 | 	mov	local06, result1
02130     18 29 62 FC | 	wrlong	local06, local10
02134                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
02134     10 3B 02 F6 | 	mov	local15, local02
02138     01 3A 06 F1 | 	add	local15, #1
0213c     1F 4F 02 F6 | 	mov	local25, local17
02140     01 4E 06 F1 | 	add	local25, #1
02144     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
02148                 | LR__0113
02148     27 3B 52 F2 | 	cmps	local15, local25 wc
0214c     70 00 90 3D |  if_ae	jmp	#LR__0115
02150     1D 27 02 F6 | 	mov	local05, local15
02154     01 26 06 F1 | 	add	local05, #1
02158     03 26 66 F0 | 	shl	local05, #3
0215c     35 00 00 FF 
02160     0C E4 05 F1 | 	add	objptr, ##27148
02164     F2 26 02 F1 | 	add	local05, objptr
02168     13 25 02 FB | 	rdlong	local04, local05
0216c     1D 29 02 F6 | 	mov	local06, local15
02170     01 28 06 F1 | 	add	local06, #1
02174     03 28 66 F0 | 	shl	local06, #3
02178     F2 28 02 F1 | 	add	local06, objptr
0217c     04 28 06 F1 | 	add	local06, #4
02180     14 23 02 FB | 	rdlong	local03, local06
02184     1D 29 02 F6 | 	mov	local06, local15
02188     03 28 66 F0 | 	shl	local06, #3
0218c     F2 34 02 F6 | 	mov	local12, objptr
02190     F2 28 02 F1 | 	add	local06, objptr
02194     14 25 62 FC | 	wrlong	local04, local06
02198     1D 33 02 F6 | 	mov	local11, local15
0219c     19 37 02 F6 | 	mov	local13, local11
021a0     03 36 66 F0 | 	shl	local13, #3
021a4     F2 36 02 F1 | 	add	local13, objptr
021a8     04 36 06 F1 | 	add	local13, #4
021ac     1B 23 62 FC | 	wrlong	local03, local13
021b0     01 3A 06 F1 | 	add	local15, #1
021b4     35 00 00 FF 
021b8     0C E4 85 F1 | 	sub	objptr, ##27148
021bc     88 FF 9F FD | 	jmp	#LR__0113
021c0                 | LR__0114
021c0                 | LR__0115
021c0     01 20 86 F1 | 	sub	local02, #1
021c4     01 3E 86 F1 | 	sub	local17, #1
021c8                 | LR__0116
021c8     01 20 06 F1 | 	add	local02, #1
021cc     1F 21 52 F2 | 	cmps	local02, local17 wc
021d0     34 FE 9F CD |  if_b	jmp	#LR__0110
021d4     00 20 06 F6 | 	mov	local02, #0
021d8                 | '  
021d8                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
021d8                 | '  
021d8                 | ' i=0 
021d8                 | ' do
021d8                 | LR__0117
021d8     10 31 02 F6 | 	mov	local10, local02
021dc     03 30 66 F0 | 	shl	local10, #3
021e0     35 00 00 FF 
021e4     0C E4 05 F1 | 	add	objptr, ##27148
021e8     F2 30 02 F1 | 	add	local10, objptr
021ec     18 51 02 FB | 	rdlong	local26, local10
021f0     10 31 02 F6 | 	mov	local10, local02
021f4     01 30 06 F1 | 	add	local10, #1
021f8     03 30 66 F0 | 	shl	local10, #3
021fc     F2 30 02 F1 | 	add	local10, objptr
02200     18 53 02 FB | 	rdlong	local27, local10
02204                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
02204                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
02204     81 01 00 FF 
02208     EF 14 06 F6 | 	mov	arg02, ##@LR__5057
0220c     28 13 02 F6 | 	mov	arg01, local26
02210     35 00 00 FF 
02214     0C E4 85 F1 | 	sub	objptr, ##27148
02218     28 E8 B1 FD | 	call	#__system___string_cmp
0221c     00 FA 0D F2 | 	cmp	result1, #0 wz
02220     A8 00 90 AD |  if_e	jmp	#LR__0118
02224     81 01 00 FF 
02228     F1 14 06 F6 | 	mov	arg02, ##@LR__5058
0222c     28 13 02 F6 | 	mov	arg01, local26
02230     10 E8 B1 FD | 	call	#__system___string_cmp
02234     FD 22 0A F6 | 	mov	local03, result1 wz
02238     90 00 90 AD |  if_e	jmp	#LR__0118
0223c     81 01 00 FF 
02240     F3 28 06 F6 | 	mov	local06, ##@LR__5059
02244     28 13 02 F6 | 	mov	arg01, local26
02248     14 15 02 F6 | 	mov	arg02, local06
0224c     F4 E7 B1 FD | 	call	#__system___string_cmp
02250     00 FA 0D F2 | 	cmp	result1, #0 wz
02254     74 00 90 AD |  if_e	jmp	#LR__0118
02258     81 01 00 FF 
0225c     F5 34 06 F6 | 	mov	local12, ##@LR__5060
02260     28 13 02 F6 | 	mov	arg01, local26
02264     1A 15 02 F6 | 	mov	arg02, local12
02268     D8 E7 B1 FD | 	call	#__system___string_cmp
0226c     00 FA 0D F2 | 	cmp	result1, #0 wz
02270     58 00 90 AD |  if_e	jmp	#LR__0118
02274     81 01 00 FF 
02278     F7 32 06 F6 | 	mov	local11, ##@LR__5061
0227c     19 35 02 F6 | 	mov	local12, local11
02280     28 13 02 F6 | 	mov	arg01, local26
02284     1A 15 02 F6 | 	mov	arg02, local12
02288     B8 E7 B1 FD | 	call	#__system___string_cmp
0228c     FD 28 0A F6 | 	mov	local06, result1 wz
02290     38 00 90 AD |  if_e	jmp	#LR__0118
02294     81 01 00 FF 
02298     F9 32 06 F6 | 	mov	local11, ##@LR__5062
0229c     28 13 02 F6 | 	mov	arg01, local26
022a0     19 15 02 F6 | 	mov	arg02, local11
022a4     9C E7 B1 FD | 	call	#__system___string_cmp
022a8     FD 34 0A F6 | 	mov	local12, result1 wz
022ac     1C 00 90 AD |  if_e	jmp	#LR__0118
022b0     81 01 00 FF 
022b4     FB 38 06 F6 | 	mov	local14, ##@LR__5063
022b8     28 13 02 F6 | 	mov	arg01, local26
022bc     1C 15 02 F6 | 	mov	arg02, local14
022c0     80 E7 B1 FD | 	call	#__system___string_cmp
022c4     FD 32 0A F6 | 	mov	local11, result1 wz
022c8     20 00 90 5D |  if_ne	jmp	#LR__0119
022cc                 | LR__0118
022cc     81 01 00 FF 
022d0     FD 54 06 F6 | 	mov	local28, ##@LR__5064
022d4     2A 37 02 F6 | 	mov	local13, local28
022d8     29 13 02 F6 | 	mov	arg01, local27
022dc     1B 15 02 F6 | 	mov	arg02, local13
022e0     60 E7 B1 FD | 	call	#__system___string_cmp
022e4     FD 38 0A F6 | 	mov	local14, result1 wz
022e8     B8 00 90 AD |  if_e	jmp	#LR__0122
022ec                 | LR__0119
022ec     81 01 00 FF 
022f0     FF 54 06 F6 | 	mov	local28, ##@LR__5065
022f4     28 13 02 F6 | 	mov	arg01, local26
022f8     2A 15 02 F6 | 	mov	arg02, local28
022fc     44 E7 B1 FD | 	call	#__system___string_cmp
02300     FD 36 0A F6 | 	mov	local13, result1 wz
02304     20 00 90 5D |  if_ne	jmp	#LR__0120
02308     81 01 00 FF 
0230c     01 4B 06 F6 | 	mov	local23, ##@LR__5066
02310     25 49 02 F6 | 	mov	local22, local23
02314     29 13 02 F6 | 	mov	arg01, local27
02318     24 15 02 F6 | 	mov	arg02, local22
0231c     24 E7 B1 FD | 	call	#__system___string_cmp
02320     FD 54 0A F6 | 	mov	local28, result1 wz
02324     7C 00 90 AD |  if_e	jmp	#LR__0122
02328                 | LR__0120
02328     81 01 00 FF 
0232c     03 4B 06 F6 | 	mov	local23, ##@LR__5067
02330     28 13 02 F6 | 	mov	arg01, local26
02334     25 15 02 F6 | 	mov	arg02, local23
02338     08 E7 B1 FD | 	call	#__system___string_cmp
0233c     FD 48 0A F6 | 	mov	local22, result1 wz
02340     20 00 90 5D |  if_ne	jmp	#LR__0121
02344     81 01 00 FF 
02348     05 57 06 F6 | 	mov	local29, ##@LR__5068
0234c     2B 4D 02 F6 | 	mov	local24, local29
02350     29 13 02 F6 | 	mov	arg01, local27
02354     26 15 02 F6 | 	mov	arg02, local24
02358     E8 E6 B1 FD | 	call	#__system___string_cmp
0235c     FD 4A 0A F6 | 	mov	local23, result1 wz
02360     40 00 90 AD |  if_e	jmp	#LR__0122
02364                 | LR__0121
02364     81 01 00 FF 
02368     07 59 06 F6 | 	mov	local30, ##@LR__5069
0236c     2C 57 02 F6 | 	mov	local29, local30
02370     28 13 02 F6 | 	mov	arg01, local26
02374     2B 15 02 F6 | 	mov	arg02, local29
02378     C8 E6 B1 FD | 	call	#__system___string_cmp
0237c     FD 4C 0A F6 | 	mov	local24, result1 wz
02380     F0 00 90 5D |  if_ne	jmp	#LR__0126
02384     81 01 00 FF 
02388     09 5B 06 F6 | 	mov	local31, ##@LR__5070
0238c     2D 59 02 F6 | 	mov	local30, local31
02390     29 13 02 F6 | 	mov	arg01, local27
02394     2C 15 02 F6 | 	mov	arg02, local30
02398     A8 E6 B1 FD | 	call	#__system___string_cmp
0239c     FD 56 0A F6 | 	mov	local29, result1 wz
023a0     D0 00 90 5D |  if_ne	jmp	#LR__0126
023a4                 | LR__0122
023a4     10 31 02 F6 | 	mov	local10, local02
023a8     03 30 66 F0 | 	shl	local10, #3
023ac     35 00 00 FF 
023b0     0C E4 05 F1 | 	add	objptr, ##27148
023b4     F2 30 02 F1 | 	add	local10, objptr
023b8     29 35 02 F6 | 	mov	local12, local27
023bc     28 13 02 F6 | 	mov	arg01, local26
023c0     1A 15 02 F6 | 	mov	arg02, local12
023c4     35 00 00 FF 
023c8     0C E4 85 F1 | 	sub	objptr, ##27148
023cc     A8 E6 B1 FD | 	call	#__system___string_concat
023d0     18 FB 61 FC | 	wrlong	result1, local10
023d4                 | '     lparts(i).part$=s1$+s2$
023d4                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
023d4     10 3B 02 F6 | 	mov	local15, local02
023d8     01 3A 06 F1 | 	add	local15, #1
023dc     1F 5D 02 F6 | 	mov	local32, local17
023e0     01 5C 06 F1 | 	add	local32, #1
023e4     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
023e8                 | LR__0123
023e8     2E 3B 52 F2 | 	cmps	local15, local32 wc
023ec     7C 00 90 3D |  if_ae	jmp	#LR__0125
023f0     1D 27 02 F6 | 	mov	local05, local15
023f4     01 26 06 F1 | 	add	local05, #1
023f8     03 26 66 F0 | 	shl	local05, #3
023fc     35 00 00 FF 
02400     0C E4 05 F1 | 	add	objptr, ##27148
02404     F2 26 02 F1 | 	add	local05, objptr
02408     13 25 02 FB | 	rdlong	local04, local05
0240c     1D 29 02 F6 | 	mov	local06, local15
02410     01 28 06 F1 | 	add	local06, #1
02414     03 28 66 F0 | 	shl	local06, #3
02418     F2 28 02 F1 | 	add	local06, objptr
0241c     04 28 06 F1 | 	add	local06, #4
02420     14 23 02 FB | 	rdlong	local03, local06
02424     1D 29 02 F6 | 	mov	local06, local15
02428     03 28 66 F0 | 	shl	local06, #3
0242c     F2 34 02 F6 | 	mov	local12, objptr
02430     F2 28 02 F1 | 	add	local06, objptr
02434     14 25 62 FC | 	wrlong	local04, local06
02438     1D 33 02 F6 | 	mov	local11, local15
0243c     19 39 02 F6 | 	mov	local14, local11
02440     1C 37 02 F6 | 	mov	local13, local14
02444     03 36 66 F0 | 	shl	local13, #3
02448     F2 54 02 F6 | 	mov	local28, objptr
0244c     F2 36 02 F1 | 	add	local13, objptr
02450     04 36 06 F1 | 	add	local13, #4
02454     1B 23 62 FC | 	wrlong	local03, local13
02458     04 36 86 F1 | 	sub	local13, #4
0245c     01 3A 06 F1 | 	add	local15, #1
02460     35 00 00 FF 
02464     0C E4 85 F1 | 	sub	objptr, ##27148
02468     7C FF 9F FD | 	jmp	#LR__0123
0246c                 | LR__0124
0246c                 | LR__0125
0246c     01 20 86 F1 | 	sub	local02, #1
02470     01 3E 86 F1 | 	sub	local17, #1
02474                 | LR__0126
02474     01 20 06 F1 | 	add	local02, #1
02478     1F 21 52 F2 | 	cmps	local02, local17 wc
0247c     58 FD 9F CD |  if_b	jmp	#LR__0117
02480                 | '  
02480                 | ' ' 1h : now remove parts that are spaces
02480                 | ' 
02480                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02480     00 20 06 F6 | 	mov	local02, #0
02484     1F 5F 02 F6 | 	mov	local33, local17
02488     01 5E 06 F1 | 	add	local33, #1
0248c                 | LR__0127
0248c     2F 21 52 F2 | 	cmps	local02, local33 wc
02490     50 00 90 3D |  if_ae	jmp	#LR__0128
02494     10 31 02 F6 | 	mov	local10, local02
02498     03 30 66 F0 | 	shl	local10, #3
0249c     35 00 00 FF 
024a0     0C E4 05 F1 | 	add	objptr, ##27148
024a4     F2 30 02 F1 | 	add	local10, objptr
024a8     10 35 02 F6 | 	mov	local12, local02
024ac     1A 33 02 F6 | 	mov	local11, local12
024b0     19 39 02 F6 | 	mov	local14, local11
024b4     03 38 66 F0 | 	shl	local14, #3
024b8     F2 36 02 F6 | 	mov	local13, objptr
024bc     F2 38 02 F1 | 	add	local14, objptr
024c0     1C 13 02 FB | 	rdlong	arg01, local14
024c4     35 00 00 FF 
024c8     0C E4 85 F1 | 	sub	objptr, ##27148
024cc     58 0A B2 FD | 	call	#__system__RTrim_S
024d0     FD 12 02 F6 | 	mov	arg01, result1
024d4     90 09 B2 FD | 	call	#__system__LTrim_S
024d8     18 FB 61 FC | 	wrlong	result1, local10
024dc     01 20 06 F1 | 	add	local02, #1
024e0     A8 FF 9F FD | 	jmp	#LR__0127
024e4                 | LR__0128
024e4     00 20 06 F6 | 	mov	local02, #0
024e8     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
024ec                 | ' i=0
024ec                 | ' do 
024ec                 | LR__0129
024ec                 | '   if len(lparts(i).part$)=0 then 
024ec     10 27 02 F6 | 	mov	local05, local02
024f0     03 26 66 F0 | 	shl	local05, #3
024f4     35 00 00 FF 
024f8     0C E4 05 F1 | 	add	objptr, ##27148
024fc     F2 26 02 F1 | 	add	local05, objptr
02500     13 13 02 FB | 	rdlong	arg01, local05
02504     35 00 00 FF 
02508     0C E4 85 F1 | 	sub	objptr, ##27148
0250c     09 2B 02 F6 | 	mov	local07, arg01
02510                 | LR__0130
02510     15 FB C9 FA | 	rdbyte	result1, local07 wz
02514     01 2A 06 51 |  if_ne	add	local07, #1
02518     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
0251c     09 2B 8A F1 | 	sub	local07, arg01 wz
02520     C4 00 90 5D |  if_ne	jmp	#LR__0134
02524                 | '     if i=k-1 then k-=1  :  exit
02524     1F 25 02 F6 | 	mov	local04, local17
02528     01 24 86 F1 | 	sub	local04, #1
0252c     12 21 0A F2 | 	cmp	local02, local04 wz
02530     01 3E 86 A1 |  if_e	sub	local17, #1
02534     C4 00 90 AD |  if_e	jmp	#LR__0136
02538                 | '     if i<k-1 then 
02538     1F 25 02 F6 | 	mov	local04, local17
0253c     01 24 86 F1 | 	sub	local04, #1
02540     12 21 52 F2 | 	cmps	local02, local04 wc
02544     A0 00 90 3D |  if_ae	jmp	#LR__0133
02548                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
02548     10 3B 02 F6 | 	mov	local15, local02
0254c     1F 61 02 F6 | 	mov	local34, local17
02550     01 60 86 F1 | 	sub	local34, #1
02554                 | LR__0131
02554     30 3B 52 F2 | 	cmps	local15, local34 wc
02558     80 00 90 3D |  if_ae	jmp	#LR__0132
0255c     1D 27 02 F6 | 	mov	local05, local15
02560     01 26 06 F1 | 	add	local05, #1
02564     03 26 66 F0 | 	shl	local05, #3
02568     35 00 00 FF 
0256c     0C E4 05 F1 | 	add	objptr, ##27148
02570     F2 26 02 F1 | 	add	local05, objptr
02574     13 25 02 FB | 	rdlong	local04, local05
02578     1D 29 02 F6 | 	mov	local06, local15
0257c     01 28 06 F1 | 	add	local06, #1
02580     03 28 66 F0 | 	shl	local06, #3
02584     F2 28 02 F1 | 	add	local06, objptr
02588     04 28 06 F1 | 	add	local06, #4
0258c     14 23 02 FB | 	rdlong	local03, local06
02590     1D 31 02 F6 | 	mov	local10, local15
02594     18 29 02 F6 | 	mov	local06, local10
02598     03 28 66 F0 | 	shl	local06, #3
0259c     F2 34 02 F6 | 	mov	local12, objptr
025a0     F2 28 02 F1 | 	add	local06, objptr
025a4     14 25 62 FC | 	wrlong	local04, local06
025a8     1D 33 02 F6 | 	mov	local11, local15
025ac     19 39 02 F6 | 	mov	local14, local11
025b0     1C 37 02 F6 | 	mov	local13, local14
025b4     03 36 66 F0 | 	shl	local13, #3
025b8     F2 54 02 F6 | 	mov	local28, objptr
025bc     F2 36 02 F1 | 	add	local13, objptr
025c0     04 36 06 F1 | 	add	local13, #4
025c4     1B 23 62 FC | 	wrlong	local03, local13
025c8     04 36 86 F1 | 	sub	local13, #4
025cc     01 3A 06 F1 | 	add	local15, #1
025d0     35 00 00 FF 
025d4     0C E4 85 F1 | 	sub	objptr, ##27148
025d8     78 FF 9F FD | 	jmp	#LR__0131
025dc                 | LR__0132
025dc     01 3E 86 F1 | 	sub	local17, #1
025e0                 | '       if i>0 then i-=1 
025e0     01 20 56 F2 | 	cmps	local02, #1 wc
025e4     01 20 86 31 |  if_ae	sub	local02, #1
025e8                 | LR__0133
025e8                 | LR__0134
025e8     01 20 06 F1 | 	add	local02, #1
025ec     1F 25 02 F6 | 	mov	local04, local17
025f0     01 24 86 F1 | 	sub	local04, #1
025f4     12 21 5A F2 | 	cmps	local02, local04 wcz
025f8     F0 FE 9F ED |  if_be	jmp	#LR__0129
025fc                 | LR__0135
025fc                 | LR__0136
025fc                 | ' 
025fc                 | ' ' 1i: lowercase all that is not a string
025fc                 | ' 
025fc                 | ' for j=0 to k-1
025fc     00 3A 06 F6 | 	mov	local15, #0
02600     1F 63 02 F6 | 	mov	local35, local17
02604                 | LR__0137
02604     31 3B 52 F2 | 	cmps	local15, local35 wc
02608     C8 00 90 3D |  if_ae	jmp	#LR__0140
0260c                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
0260c     1D 27 02 F6 | 	mov	local05, local15
02610     03 26 66 F0 | 	shl	local05, #3
02614     35 00 00 FF 
02618     0C E4 05 F1 | 	add	objptr, ##27148
0261c     F2 26 02 F1 | 	add	local05, objptr
02620     13 13 02 FB | 	rdlong	arg01, local05
02624     01 14 06 F6 | 	mov	arg02, #1
02628     35 00 00 FF 
0262c     0C E4 85 F1 | 	sub	objptr, ##27148
02630     64 04 B2 FD | 	call	#__system__Left_S
02634     FD 12 02 F6 | 	mov	arg01, result1
02638     81 01 00 FF 
0263c     0B 15 06 F6 | 	mov	arg02, ##@LR__5071
02640     00 E4 B1 FD | 	call	#__system___string_cmp
02644     00 FA 0D F2 | 	cmp	result1, #0 wz
02648     44 00 90 5D |  if_ne	jmp	#LR__0138
0264c     1D 29 02 F6 | 	mov	local06, local15
02650     03 28 66 F0 | 	shl	local06, #3
02654     35 00 00 FF 
02658     0C E4 05 F1 | 	add	objptr, ##27148
0265c     F2 34 02 F6 | 	mov	local12, objptr
02660     F2 28 02 F1 | 	add	local06, objptr
02664     14 13 02 FB | 	rdlong	arg01, local06
02668     01 14 06 F6 | 	mov	arg02, #1
0266c     35 00 00 FF 
02670     0C E4 85 F1 | 	sub	objptr, ##27148
02674     A8 04 B2 FD | 	call	#__system__Right_S
02678     FD 12 02 F6 | 	mov	arg01, result1
0267c     81 01 00 FF 
02680     0D 15 06 F6 | 	mov	arg02, ##@LR__5072
02684     BC E3 B1 FD | 	call	#__system___string_cmp
02688     00 FA 0D F2 | 	cmp	result1, #0 wz
0268c     3C 00 90 AD |  if_e	jmp	#LR__0139
02690                 | LR__0138
02690     1D 31 02 F6 | 	mov	local10, local15
02694     03 30 66 F0 | 	shl	local10, #3
02698     35 00 00 FF 
0269c     0C E4 05 F1 | 	add	objptr, ##27148
026a0     F2 30 02 F1 | 	add	local10, objptr
026a4     1D 33 02 F6 | 	mov	local11, local15
026a8     19 39 02 F6 | 	mov	local14, local11
026ac     03 38 66 F0 | 	shl	local14, #3
026b0     F2 36 02 F6 | 	mov	local13, objptr
026b4     F2 38 02 F1 | 	add	local14, objptr
026b8     1C 13 02 FB | 	rdlong	arg01, local14
026bc     35 00 00 FF 
026c0     0C E4 85 F1 | 	sub	objptr, ##27148
026c4     E0 06 B2 FD | 	call	#__system__LCase_S
026c8     18 FB 61 FC | 	wrlong	result1, local10
026cc                 | LR__0139
026cc     01 3A 06 F1 | 	add	local15, #1
026d0     30 FF 9F FD | 	jmp	#LR__0137
026d4                 | LR__0140
026d4                 | ' 
026d4                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
026d4                 | ' 
026d4                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
026d4     00 20 06 F6 | 	mov	local02, #0
026d8     1F 65 02 F6 | 	mov	local36, local17
026dc     01 64 06 F1 | 	add	local36, #1
026e0     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
026e4                 | LR__0141
026e4     32 21 52 F2 | 	cmps	local02, local36 wc
026e8     30 00 90 3D |  if_ae	jmp	#LR__0143
026ec     10 31 02 F6 | 	mov	local10, local02
026f0     03 30 66 F0 | 	shl	local10, #3
026f4     35 00 00 FF 
026f8     0C E4 05 F1 | 	add	objptr, ##27148
026fc     F2 30 02 F1 | 	add	local10, objptr
02700     04 30 06 F1 | 	add	local10, #4
02704     FF FF FF FF 
02708     18 FF 6B FC | 	wrlong	##-1, local10
0270c     01 20 06 F1 | 	add	local02, #1
02710     35 00 00 FF 
02714     0C E4 85 F1 | 	sub	objptr, ##27148
02718     C8 FF 9F FD | 	jmp	#LR__0141
0271c                 | LR__0142
0271c                 | LR__0143
0271c                 | ' 
0271c                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
0271c     35 00 00 FF 
02720     0C E4 05 F1 | 	add	objptr, ##27148
02724     F2 12 02 FB | 	rdlong	arg01, objptr
02728     35 00 00 FF 
0272c     0C E4 85 F1 | 	sub	objptr, ##27148
02730     AC 3C B0 FD | 	call	#_isdec
02734     00 FA 0D F2 | 	cmp	result1, #0 wz
02738     01 66 06 56 |  if_ne	mov	local37, #1
0273c     00 66 06 A6 |  if_e	mov	local37, #0
02740                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
02740     35 00 00 FF 
02744     0C E4 05 F1 | 	add	objptr, ##27148
02748     F2 12 02 FB | 	rdlong	arg01, objptr
0274c     35 00 00 FF 
02750     0C E4 85 F1 | 	sub	objptr, ##27148
02754     81 01 00 FF 
02758     0F 15 06 F6 | 	mov	arg02, ##@LR__5073
0275c     E4 E2 B1 FD | 	call	#__system___string_cmp
02760     00 FA 0D F2 | 	cmp	result1, #0 wz
02764     01 66 06 A6 |  if_e	mov	local37, #1
02768     00 20 06 F6 | 	mov	local02, #0
0276c                 | ' i=0 : do 
0276c                 | LR__0144
0276c                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
0276c     10 27 02 F6 | 	mov	local05, local02
02770     03 26 66 F0 | 	shl	local05, #3
02774     35 00 00 FF 
02778     0C E4 05 F1 | 	add	objptr, ##27148
0277c     F2 26 02 F1 | 	add	local05, objptr
02780     13 13 02 FB | 	rdlong	arg01, local05
02784     81 01 00 FF 
02788     14 15 06 F6 | 	mov	arg02, ##@LR__5074
0278c     35 00 00 FF 
02790     0C E4 85 F1 | 	sub	objptr, ##27148
02794     AC E2 B1 FD | 	call	#__system___string_cmp
02798     00 FA 0D F2 | 	cmp	result1, #0 wz
0279c     0C 00 90 AD |  if_e	jmp	#LR__0145
027a0     01 20 06 F1 | 	add	local02, #1
027a4     1F 21 5A F2 | 	cmps	local02, local17 wcz
027a8     C0 FF 9F ED |  if_be	jmp	#LR__0144
027ac                 | LR__0145
027ac                 | ' if i<k then addptr=i+1	 							' then found
027ac     1F 21 52 F2 | 	cmps	local02, local17 wc
027b0     10 67 02 C6 |  if_b	mov	local37, local02
027b4     01 66 06 C1 |  if_b	add	local37, #1
027b8     35 00 00 FF 
027bc     0C E4 05 F1 | 	add	objptr, ##27148
027c0     33 29 02 F6 | 	mov	local06, local37
027c4     03 28 66 F0 | 	shl	local06, #3
027c8     F2 34 02 F6 | 	mov	local12, objptr
027cc     F2 28 02 F1 | 	add	local06, objptr
027d0     14 15 02 FB | 	rdlong	arg02, local06
027d4     81 01 00 FF 
027d8     19 17 06 F6 | 	mov	arg03, ##@LR__5075
027dc     01 12 06 F6 | 	mov	arg01, #1
027e0     35 00 00 FF 
027e4     0C E4 85 F1 | 	sub	objptr, ##27148
027e8     F4 07 B2 FD | 	call	#__system__Instr
027ec     FD 68 02 F6 | 	mov	local38, result1
027f0                 | ' lp$=lparts(addptr).part$ 
027f0                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
027f0                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
027f0     01 68 56 F2 | 	cmps	local38, #1 wc
027f4     68 01 90 CD |  if_b	jmp	#LR__0152
027f8     33 27 02 F6 | 	mov	local05, local37
027fc     03 26 66 F0 | 	shl	local05, #3
02800     35 00 00 FF 
02804     0C E4 05 F1 | 	add	objptr, ##27148
02808     F2 26 02 F1 | 	add	local05, objptr
0280c     13 13 02 FB | 	rdlong	arg01, local05
02810     35 00 00 FF 
02814     0C E4 85 F1 | 	sub	objptr, ##27148
02818     09 2B 02 F6 | 	mov	local07, arg01
0281c     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
02820                 | LR__0146
02820     15 FB C9 FA | 	rdbyte	result1, local07 wz
02824     01 2A 06 51 |  if_ne	add	local07, #1
02828     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
0282c                 | LR__0147
0282c     09 2B 82 F1 | 	sub	local07, arg01
02830     15 69 52 F2 | 	cmps	local38, local07 wc
02834     28 01 90 3D |  if_ae	jmp	#LR__0152
02838     01 3E 06 F1 | 	add	local17, #1
0283c                 | '   k+=1
0283c                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
0283c     1F 21 02 F6 | 	mov	local02, local17
02840     33 6B 02 F6 | 	mov	local39, local37
02844     01 6A 06 F1 | 	add	local39, #1
02848     35 00 00 FF 
0284c     0C E4 05 F1 | 	add	objptr, ##27148
02850     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02854                 | LR__0148
02854     10 27 02 F6 | 	mov	local05, local02
02858     01 26 86 F1 | 	sub	local05, #1
0285c     03 26 66 F0 | 	shl	local05, #3
02860     F2 26 02 F1 | 	add	local05, objptr
02864     13 25 02 FB | 	rdlong	local04, local05
02868     10 29 02 F6 | 	mov	local06, local02
0286c     01 28 86 F1 | 	sub	local06, #1
02870     03 28 66 F0 | 	shl	local06, #3
02874     F2 28 02 F1 | 	add	local06, objptr
02878     04 28 06 F1 | 	add	local06, #4
0287c     14 23 02 FB | 	rdlong	local03, local06
02880     10 29 02 F6 | 	mov	local06, local02
02884     03 28 66 F0 | 	shl	local06, #3
02888     F2 28 02 F1 | 	add	local06, objptr
0288c     14 25 62 FC | 	wrlong	local04, local06
02890     10 37 02 F6 | 	mov	local13, local02
02894     03 36 66 F0 | 	shl	local13, #3
02898     F2 36 02 F1 | 	add	local13, objptr
0289c     04 36 06 F1 | 	add	local13, #4
028a0     1B 23 62 FC | 	wrlong	local03, local13
028a4     01 20 86 F1 | 	sub	local02, #1
028a8     35 21 52 F2 | 	cmps	local02, local39 wc
028ac     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
028b0                 | LR__0149
028b0     33 31 02 F6 | 	mov	local10, local37
028b4     01 30 06 F1 | 	add	local10, #1
028b8     03 30 66 F0 | 	shl	local10, #3
028bc     F2 30 02 F1 | 	add	local10, objptr
028c0     33 39 02 F6 | 	mov	local14, local37
028c4     03 38 66 F0 | 	shl	local14, #3
028c8     F2 38 02 F1 | 	add	local14, objptr
028cc     1C 29 02 FB | 	rdlong	local06, local14
028d0     33 55 02 F6 | 	mov	local28, local37
028d4     2A 49 02 F6 | 	mov	local22, local28
028d8     03 48 66 F0 | 	shl	local22, #3
028dc     F2 4A 02 F6 | 	mov	local23, objptr
028e0     F2 48 02 F1 | 	add	local22, objptr
028e4     24 13 02 FB | 	rdlong	arg01, local22
028e8     35 00 00 FF 
028ec     0C E4 85 F1 | 	sub	objptr, ##27148
028f0     09 2B 02 F6 | 	mov	local07, arg01
028f4     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
028f8                 | LR__0150
028f8     15 FB C9 FA | 	rdbyte	result1, local07 wz
028fc     01 2A 06 51 |  if_ne	add	local07, #1
02900     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
02904                 | LR__0151
02904     09 2B 82 F1 | 	sub	local07, arg01
02908     15 15 02 F6 | 	mov	arg02, local07
0290c     34 15 82 F1 | 	sub	arg02, local38
02910     14 13 02 F6 | 	mov	arg01, local06
02914     08 02 B2 FD | 	call	#__system__Right_S
02918     18 FB 61 FC | 	wrlong	result1, local10
0291c     33 31 02 F6 | 	mov	local10, local37
02920     03 30 66 F0 | 	shl	local10, #3
02924     35 00 00 FF 
02928     0C E4 05 F1 | 	add	objptr, ##27148
0292c     F2 30 02 F1 | 	add	local10, objptr
02930     33 33 02 F6 | 	mov	local11, local37
02934     19 39 02 F6 | 	mov	local14, local11
02938     03 38 66 F0 | 	shl	local14, #3
0293c     F2 36 02 F6 | 	mov	local13, objptr
02940     F2 38 02 F1 | 	add	local14, objptr
02944     1C 13 02 FB | 	rdlong	arg01, local14
02948     34 35 02 F6 | 	mov	local12, local38
0294c     1A 15 02 F6 | 	mov	arg02, local12
02950     35 00 00 FF 
02954     0C E4 85 F1 | 	sub	objptr, ##27148
02958     3C 01 B2 FD | 	call	#__system__Left_S
0295c     18 FB 61 FC | 	wrlong	result1, local10
02960                 | LR__0152
02960                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02960     33 27 02 F6 | 	mov	local05, local37
02964     03 26 66 F0 | 	shl	local05, #3
02968     35 00 00 FF 
0296c     0C E4 05 F1 | 	add	objptr, ##27148
02970     F2 26 02 F1 | 	add	local05, objptr
02974     13 13 02 FB | 	rdlong	arg01, local05
02978     01 14 06 F6 | 	mov	arg02, #1
0297c     35 00 00 FF 
02980     0C E4 85 F1 | 	sub	objptr, ##27148
02984     10 01 B2 FD | 	call	#__system__Left_S
02988     FD 12 02 F6 | 	mov	arg01, result1
0298c     81 01 00 FF 
02990     1B 15 06 F6 | 	mov	arg02, ##@LR__5076
02994     AC E0 B1 FD | 	call	#__system___string_cmp
02998     00 FA 0D F2 | 	cmp	result1, #0 wz
0299c     60 01 90 5D |  if_ne	jmp	#LR__0159
029a0     33 29 02 F6 | 	mov	local06, local37
029a4     03 28 66 F0 | 	shl	local06, #3
029a8     35 00 00 FF 
029ac     0C E4 05 F1 | 	add	objptr, ##27148
029b0     F2 34 02 F6 | 	mov	local12, objptr
029b4     F2 28 02 F1 | 	add	local06, objptr
029b8     14 13 02 FB | 	rdlong	arg01, local06
029bc     35 00 00 FF 
029c0     0C E4 85 F1 | 	sub	objptr, ##27148
029c4     09 2B 02 F6 | 	mov	local07, arg01
029c8     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
029cc                 | LR__0153
029cc     15 FB C9 FA | 	rdbyte	result1, local07 wz
029d0     01 2A 06 51 |  if_ne	add	local07, #1
029d4     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
029d8                 | LR__0154
029d8     09 2B 82 F1 | 	sub	local07, arg01
029dc     02 2A 56 F2 | 	cmps	local07, #2 wc
029e0     1C 01 90 CD |  if_b	jmp	#LR__0159
029e4     01 3E 06 F1 | 	add	local17, #1
029e8                 | '   k+=1
029e8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
029e8     1F 21 02 F6 | 	mov	local02, local17
029ec     33 6D 02 F6 | 	mov	local40, local37
029f0     01 6C 06 F1 | 	add	local40, #1
029f4     35 00 00 FF 
029f8     0C E4 05 F1 | 	add	objptr, ##27148
029fc     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02a00                 | LR__0155
02a00     10 27 02 F6 | 	mov	local05, local02
02a04     01 26 86 F1 | 	sub	local05, #1
02a08     03 26 66 F0 | 	shl	local05, #3
02a0c     F2 26 02 F1 | 	add	local05, objptr
02a10     13 25 02 FB | 	rdlong	local04, local05
02a14     10 29 02 F6 | 	mov	local06, local02
02a18     01 28 86 F1 | 	sub	local06, #1
02a1c     03 28 66 F0 | 	shl	local06, #3
02a20     F2 28 02 F1 | 	add	local06, objptr
02a24     04 28 06 F1 | 	add	local06, #4
02a28     14 23 02 FB | 	rdlong	local03, local06
02a2c     10 29 02 F6 | 	mov	local06, local02
02a30     03 28 66 F0 | 	shl	local06, #3
02a34     F2 28 02 F1 | 	add	local06, objptr
02a38     14 25 62 FC | 	wrlong	local04, local06
02a3c     10 37 02 F6 | 	mov	local13, local02
02a40     03 36 66 F0 | 	shl	local13, #3
02a44     F2 36 02 F1 | 	add	local13, objptr
02a48     04 36 06 F1 | 	add	local13, #4
02a4c     1B 23 62 FC | 	wrlong	local03, local13
02a50     01 20 86 F1 | 	sub	local02, #1
02a54     36 21 52 F2 | 	cmps	local02, local40 wc
02a58     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02a5c                 | LR__0156
02a5c     33 31 02 F6 | 	mov	local10, local37
02a60     01 30 06 F1 | 	add	local10, #1
02a64     03 30 66 F0 | 	shl	local10, #3
02a68     F2 30 02 F1 | 	add	local10, objptr
02a6c     33 39 02 F6 | 	mov	local14, local37
02a70     03 38 66 F0 | 	shl	local14, #3
02a74     F2 38 02 F1 | 	add	local14, objptr
02a78     1C 29 02 FB | 	rdlong	local06, local14
02a7c     33 37 02 F6 | 	mov	local13, local37
02a80     1B 55 02 F6 | 	mov	local28, local13
02a84     2A 49 02 F6 | 	mov	local22, local28
02a88     03 48 66 F0 | 	shl	local22, #3
02a8c     F2 4A 02 F6 | 	mov	local23, objptr
02a90     F2 48 02 F1 | 	add	local22, objptr
02a94     24 13 02 FB | 	rdlong	arg01, local22
02a98     35 00 00 FF 
02a9c     0C E4 85 F1 | 	sub	objptr, ##27148
02aa0     09 2B 02 F6 | 	mov	local07, arg01
02aa4     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02aa8                 | LR__0157
02aa8     15 FB C9 FA | 	rdbyte	result1, local07 wz
02aac     01 2A 06 51 |  if_ne	add	local07, #1
02ab0     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02ab4                 | LR__0158
02ab4     09 2B 82 F1 | 	sub	local07, arg01
02ab8     15 39 02 F6 | 	mov	local14, local07
02abc     1C 33 02 F6 | 	mov	local11, local14
02ac0     01 32 86 F1 | 	sub	local11, #1
02ac4     19 35 02 F6 | 	mov	local12, local11
02ac8     14 13 02 F6 | 	mov	arg01, local06
02acc     1A 15 02 F6 | 	mov	arg02, local12
02ad0     4C 00 B2 FD | 	call	#__system__Right_S
02ad4     18 FB 61 FC | 	wrlong	result1, local10
02ad8     33 31 02 F6 | 	mov	local10, local37
02adc     03 30 66 F0 | 	shl	local10, #3
02ae0     35 00 00 FF 
02ae4     0C E4 05 F1 | 	add	objptr, ##27148
02ae8     F2 30 02 F1 | 	add	local10, objptr
02aec     81 01 00 FF 
02af0     1D 29 06 F6 | 	mov	local06, ##@LR__5077
02af4     18 29 62 FC | 	wrlong	local06, local10
02af8     35 00 00 FF 
02afc     0C E4 85 F1 | 	sub	objptr, ##27148
02b00                 | LR__0159
02b00     33 31 02 F6 | 	mov	local10, local37
02b04     03 30 66 F0 | 	shl	local10, #3
02b08     35 00 00 FF 
02b0c     0C E4 05 F1 | 	add	objptr, ##27148
02b10     F2 30 02 F1 | 	add	local10, objptr
02b14     18 6F 02 FB | 	rdlong	local41, local10
02b18                 | ' 
02b18                 | ' lp$=lparts(addptr).part$ 
02b18                 | ' 
02b18                 | ' ' process mouse/cursor/click on/off
02b18                 | ' 
02b18                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02b18     81 01 00 FF 
02b1c     1F 15 06 F6 | 	mov	arg02, ##@LR__5078
02b20     37 13 02 F6 | 	mov	arg01, local41
02b24     35 00 00 FF 
02b28     0C E4 85 F1 | 	sub	objptr, ##27148
02b2c     14 DF B1 FD | 	call	#__system___string_cmp
02b30     00 FA 0D F2 | 	cmp	result1, #0 wz
02b34     30 00 90 AD |  if_e	jmp	#LR__0160
02b38     81 01 00 FF 
02b3c     25 15 06 F6 | 	mov	arg02, ##@LR__5079
02b40     37 13 02 F6 | 	mov	arg01, local41
02b44     FC DE B1 FD | 	call	#__system___string_cmp
02b48     00 FA 0D F2 | 	cmp	result1, #0 wz
02b4c     18 00 90 AD |  if_e	jmp	#LR__0160
02b50     81 01 00 FF 
02b54     2C 15 06 F6 | 	mov	arg02, ##@LR__5080
02b58     37 13 02 F6 | 	mov	arg01, local41
02b5c     E4 DE B1 FD | 	call	#__system___string_cmp
02b60     00 FA 0D F2 | 	cmp	result1, #0 wz
02b64     E0 00 90 5D |  if_ne	jmp	#LR__0163
02b68                 | LR__0160
02b68                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02b68     33 27 02 F6 | 	mov	local05, local37
02b6c     01 26 06 F1 | 	add	local05, #1
02b70     03 26 66 F0 | 	shl	local05, #3
02b74     35 00 00 FF 
02b78     0C E4 05 F1 | 	add	objptr, ##27148
02b7c     F2 26 02 F1 | 	add	local05, objptr
02b80     13 13 02 FB | 	rdlong	arg01, local05
02b84     81 01 00 FF 
02b88     32 15 06 F6 | 	mov	arg02, ##@LR__5081
02b8c     35 00 00 FF 
02b90     0C E4 85 F1 | 	sub	objptr, ##27148
02b94     AC DE B1 FD | 	call	#__system___string_cmp
02b98     00 FA 0D F2 | 	cmp	result1, #0 wz
02b9c     38 00 90 5D |  if_ne	jmp	#LR__0161
02ba0     33 31 02 F6 | 	mov	local10, local37
02ba4     01 30 06 F1 | 	add	local10, #1
02ba8     03 30 66 F0 | 	shl	local10, #3
02bac     35 00 00 FF 
02bb0     0C E4 05 F1 | 	add	objptr, ##27148
02bb4     F2 30 02 F1 | 	add	local10, objptr
02bb8     81 01 00 FF 
02bbc     35 29 06 F6 | 	mov	local06, ##@LR__5082
02bc0     18 29 62 FC | 	wrlong	local06, local10
02bc4     14 E4 05 F1 | 	add	objptr, #20
02bc8     01 00 80 FF 
02bcc     F2 00 68 FC | 	wrlong	##512, objptr
02bd0     35 00 00 FF 
02bd4     20 E4 85 F1 | 	sub	objptr, ##27168
02bd8                 | LR__0161
02bd8                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02bd8     33 27 02 F6 | 	mov	local05, local37
02bdc     01 26 06 F1 | 	add	local05, #1
02be0     03 26 66 F0 | 	shl	local05, #3
02be4     35 00 00 FF 
02be8     0C E4 05 F1 | 	add	objptr, ##27148
02bec     F2 26 02 F1 | 	add	local05, objptr
02bf0     13 13 02 FB | 	rdlong	arg01, local05
02bf4     81 01 00 FF 
02bf8     37 15 06 F6 | 	mov	arg02, ##@LR__5083
02bfc     35 00 00 FF 
02c00     0C E4 85 F1 | 	sub	objptr, ##27148
02c04     3C DE B1 FD | 	call	#__system___string_cmp
02c08     00 FA 0D F2 | 	cmp	result1, #0 wz
02c0c     38 00 90 5D |  if_ne	jmp	#LR__0162
02c10     33 31 02 F6 | 	mov	local10, local37
02c14     01 30 06 F1 | 	add	local10, #1
02c18     03 30 66 F0 | 	shl	local10, #3
02c1c     35 00 00 FF 
02c20     0C E4 05 F1 | 	add	objptr, ##27148
02c24     F2 30 02 F1 | 	add	local10, objptr
02c28     81 01 00 FF 
02c2c     3B 29 06 F6 | 	mov	local06, ##@LR__5084
02c30     18 29 62 FC | 	wrlong	local06, local10
02c34     14 E4 05 F1 | 	add	objptr, #20
02c38     01 00 80 FF 
02c3c     F2 00 68 FC | 	wrlong	##512, objptr
02c40     35 00 00 FF 
02c44     20 E4 85 F1 | 	sub	objptr, ##27168
02c48                 | LR__0162
02c48                 | LR__0163
02c48                 | ' 		
02c48                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02c48                 | ' 
02c48                 | ' if (lp$="mode" orelse lp$="m.") then 
02c48     81 01 00 FF 
02c4c     3D 15 06 F6 | 	mov	arg02, ##@LR__5085
02c50     37 13 02 F6 | 	mov	arg01, local41
02c54     EC DD B1 FD | 	call	#__system___string_cmp
02c58     00 FA 0D F2 | 	cmp	result1, #0 wz
02c5c     18 00 90 AD |  if_e	jmp	#LR__0164
02c60     81 01 00 FF 
02c64     42 15 06 F6 | 	mov	arg02, ##@LR__5086
02c68     37 13 02 F6 | 	mov	arg01, local41
02c6c     D4 DD B1 FD | 	call	#__system___string_cmp
02c70     00 FA 0D F2 | 	cmp	result1, #0 wz
02c74     F4 01 90 5D |  if_ne	jmp	#LR__0170
02c78                 | LR__0164
02c78                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02c78     33 27 02 F6 | 	mov	local05, local37
02c7c     01 26 06 F1 | 	add	local05, #1
02c80     03 26 66 F0 | 	shl	local05, #3
02c84     35 00 00 FF 
02c88     0C E4 05 F1 | 	add	objptr, ##27148
02c8c     F2 26 02 F1 | 	add	local05, objptr
02c90     13 13 02 FB | 	rdlong	arg01, local05
02c94     81 01 00 FF 
02c98     45 15 06 F6 | 	mov	arg02, ##@LR__5087
02c9c     35 00 00 FF 
02ca0     0C E4 85 F1 | 	sub	objptr, ##27148
02ca4     9C DD B1 FD | 	call	#__system___string_cmp
02ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
02cac     2C 00 90 5D |  if_ne	jmp	#LR__0165
02cb0     33 31 02 F6 | 	mov	local10, local37
02cb4     01 30 06 F1 | 	add	local10, #1
02cb8     03 30 66 F0 | 	shl	local10, #3
02cbc     35 00 00 FF 
02cc0     0C E4 05 F1 | 	add	objptr, ##27148
02cc4     F2 30 02 F1 | 	add	local10, objptr
02cc8     81 01 00 FF 
02ccc     4B 29 06 F6 | 	mov	local06, ##@LR__5088
02cd0     18 29 62 FC | 	wrlong	local06, local10
02cd4     35 00 00 FF 
02cd8     0C E4 85 F1 | 	sub	objptr, ##27148
02cdc                 | LR__0165
02cdc                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02cdc     33 27 02 F6 | 	mov	local05, local37
02ce0     01 26 06 F1 | 	add	local05, #1
02ce4     03 26 66 F0 | 	shl	local05, #3
02ce8     35 00 00 FF 
02cec     0C E4 05 F1 | 	add	objptr, ##27148
02cf0     F2 26 02 F1 | 	add	local05, objptr
02cf4     13 13 02 FB | 	rdlong	arg01, local05
02cf8     81 01 00 FF 
02cfc     4D 15 06 F6 | 	mov	arg02, ##@LR__5089
02d00     35 00 00 FF 
02d04     0C E4 85 F1 | 	sub	objptr, ##27148
02d08     38 DD B1 FD | 	call	#__system___string_cmp
02d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d10     2C 00 90 5D |  if_ne	jmp	#LR__0166
02d14     33 31 02 F6 | 	mov	local10, local37
02d18     01 30 06 F1 | 	add	local10, #1
02d1c     03 30 66 F0 | 	shl	local10, #3
02d20     35 00 00 FF 
02d24     0C E4 05 F1 | 	add	objptr, ##27148
02d28     F2 30 02 F1 | 	add	local10, objptr
02d2c     81 01 00 FF 
02d30     56 29 06 F6 | 	mov	local06, ##@LR__5090
02d34     18 29 62 FC | 	wrlong	local06, local10
02d38     35 00 00 FF 
02d3c     0C E4 85 F1 | 	sub	objptr, ##27148
02d40                 | LR__0166
02d40                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02d40     33 27 02 F6 | 	mov	local05, local37
02d44     01 26 06 F1 | 	add	local05, #1
02d48     03 26 66 F0 | 	shl	local05, #3
02d4c     35 00 00 FF 
02d50     0C E4 05 F1 | 	add	objptr, ##27148
02d54     F2 26 02 F1 | 	add	local05, objptr
02d58     13 13 02 FB | 	rdlong	arg01, local05
02d5c     81 01 00 FF 
02d60     58 15 06 F6 | 	mov	arg02, ##@LR__5091
02d64     35 00 00 FF 
02d68     0C E4 85 F1 | 	sub	objptr, ##27148
02d6c     D4 DC B1 FD | 	call	#__system___string_cmp
02d70     00 FA 0D F2 | 	cmp	result1, #0 wz
02d74     2C 00 90 5D |  if_ne	jmp	#LR__0167
02d78     33 31 02 F6 | 	mov	local10, local37
02d7c     01 30 06 F1 | 	add	local10, #1
02d80     03 30 66 F0 | 	shl	local10, #3
02d84     35 00 00 FF 
02d88     0C E4 05 F1 | 	add	objptr, ##27148
02d8c     F2 30 02 F1 | 	add	local10, objptr
02d90     81 01 00 FF 
02d94     61 29 06 F6 | 	mov	local06, ##@LR__5092
02d98     18 29 62 FC | 	wrlong	local06, local10
02d9c     35 00 00 FF 
02da0     0C E4 85 F1 | 	sub	objptr, ##27148
02da4                 | LR__0167
02da4                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02da4     33 27 02 F6 | 	mov	local05, local37
02da8     01 26 06 F1 | 	add	local05, #1
02dac     03 26 66 F0 | 	shl	local05, #3
02db0     35 00 00 FF 
02db4     0C E4 05 F1 | 	add	objptr, ##27148
02db8     F2 26 02 F1 | 	add	local05, objptr
02dbc     13 13 02 FB | 	rdlong	arg01, local05
02dc0     81 01 00 FF 
02dc4     63 15 06 F6 | 	mov	arg02, ##@LR__5093
02dc8     35 00 00 FF 
02dcc     0C E4 85 F1 | 	sub	objptr, ##27148
02dd0     70 DC B1 FD | 	call	#__system___string_cmp
02dd4     00 FA 0D F2 | 	cmp	result1, #0 wz
02dd8     2C 00 90 5D |  if_ne	jmp	#LR__0168
02ddc     33 31 02 F6 | 	mov	local10, local37
02de0     01 30 06 F1 | 	add	local10, #1
02de4     03 30 66 F0 | 	shl	local10, #3
02de8     35 00 00 FF 
02dec     0C E4 05 F1 | 	add	objptr, ##27148
02df0     F2 30 02 F1 | 	add	local10, objptr
02df4     81 01 00 FF 
02df8     6C 29 06 F6 | 	mov	local06, ##@LR__5094
02dfc     18 29 62 FC | 	wrlong	local06, local10
02e00     35 00 00 FF 
02e04     0C E4 85 F1 | 	sub	objptr, ##27148
02e08                 | LR__0168
02e08                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02e08     33 27 02 F6 | 	mov	local05, local37
02e0c     01 26 06 F1 | 	add	local05, #1
02e10     03 26 66 F0 | 	shl	local05, #3
02e14     35 00 00 FF 
02e18     0C E4 05 F1 | 	add	objptr, ##27148
02e1c     F2 26 02 F1 | 	add	local05, objptr
02e20     13 13 02 FB | 	rdlong	arg01, local05
02e24     81 01 00 FF 
02e28     6E 15 06 F6 | 	mov	arg02, ##@LR__5095
02e2c     35 00 00 FF 
02e30     0C E4 85 F1 | 	sub	objptr, ##27148
02e34     0C DC B1 FD | 	call	#__system___string_cmp
02e38     00 FA 0D F2 | 	cmp	result1, #0 wz
02e3c     2C 00 90 5D |  if_ne	jmp	#LR__0169
02e40     33 31 02 F6 | 	mov	local10, local37
02e44     01 30 06 F1 | 	add	local10, #1
02e48     03 30 66 F0 | 	shl	local10, #3
02e4c     35 00 00 FF 
02e50     0C E4 05 F1 | 	add	objptr, ##27148
02e54     F2 30 02 F1 | 	add	local10, objptr
02e58     81 01 00 FF 
02e5c     71 29 06 F6 | 	mov	local06, ##@LR__5096
02e60     18 29 62 FC | 	wrlong	local06, local10
02e64     35 00 00 FF 
02e68     0C E4 85 F1 | 	sub	objptr, ##27148
02e6c                 | LR__0169
02e6c                 | LR__0170
02e6c                 | ' 
02e6c                 | ' ' find part types 
02e6c                 | ' 
02e6c                 | ' for i=0 to k-1
02e6c     00 20 06 F6 | 	mov	local02, #0
02e70     1F 71 02 F6 | 	mov	local42, local17
02e74                 | LR__0171
02e74     38 21 52 F2 | 	cmps	local02, local42 wc
02e78     A4 07 90 3D |  if_ae	jmp	#LR__0183
02e7c     10 31 02 F6 | 	mov	local10, local02
02e80     03 30 66 F0 | 	shl	local10, #3
02e84     35 00 00 FF 
02e88     0C E4 05 F1 | 	add	objptr, ##27148
02e8c     F2 30 02 F1 | 	add	local10, objptr
02e90     10 33 02 F6 | 	mov	local11, local02
02e94     19 39 02 F6 | 	mov	local14, local11
02e98     1C 37 02 F6 | 	mov	local13, local14
02e9c     03 36 66 F0 | 	shl	local13, #3
02ea0     F2 36 02 F1 | 	add	local13, objptr
02ea4     1B 13 02 FB | 	rdlong	arg01, local13
02ea8     35 00 00 FF 
02eac     0C E4 85 F1 | 	sub	objptr, ##27148
02eb0     48 15 B0 FD | 	call	#_isseparator
02eb4     FD FA E1 F8 | 	getbyte	result1, result1, #0
02eb8     04 30 06 F1 | 	add	local10, #4
02ebc     18 FB 61 FC | 	wrlong	result1, local10
02ec0                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
02ec0     10 31 02 F6 | 	mov	local10, local02
02ec4     03 30 66 F0 | 	shl	local10, #3
02ec8     35 00 00 FF 
02ecc     0C E4 05 F1 | 	add	objptr, ##27148
02ed0     F2 30 02 F1 | 	add	local10, objptr
02ed4     04 30 06 F1 | 	add	local10, #4
02ed8     18 35 02 FB | 	rdlong	local12, local10
02edc     01 34 56 F2 | 	cmps	local12, #1 wc
02ee0     35 00 00 FF 
02ee4     0C E4 85 F1 | 	sub	objptr, ##27148
02ee8     2C 07 90 3D |  if_ae	jmp	#LR__0182
02eec     10 31 02 F6 | 	mov	local10, local02
02ef0     03 30 66 F0 | 	shl	local10, #3
02ef4     35 00 00 FF 
02ef8     0C E4 05 F1 | 	add	objptr, ##27148
02efc     F2 30 02 F1 | 	add	local10, objptr
02f00     10 33 02 F6 | 	mov	local11, local02
02f04     19 39 02 F6 | 	mov	local14, local11
02f08     1C 37 02 F6 | 	mov	local13, local14
02f0c     03 36 66 F0 | 	shl	local13, #3
02f10     F2 36 02 F1 | 	add	local13, objptr
02f14     1B 13 02 FB | 	rdlong	arg01, local13
02f18     35 00 00 FF 
02f1c     0C E4 85 F1 | 	sub	objptr, ##27148
02f20     24 0D B0 FD | 	call	#_isoperator
02f24     FD FA E1 F8 | 	getbyte	result1, result1, #0
02f28     04 30 06 F1 | 	add	local10, #4
02f2c     18 FB 61 FC | 	wrlong	result1, local10
02f30                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
02f30     10 31 02 F6 | 	mov	local10, local02
02f34     03 30 66 F0 | 	shl	local10, #3
02f38     35 00 00 FF 
02f3c     0C E4 05 F1 | 	add	objptr, ##27148
02f40     F2 30 02 F1 | 	add	local10, objptr
02f44     04 30 06 F1 | 	add	local10, #4
02f48     18 35 02 FB | 	rdlong	local12, local10
02f4c     01 34 56 F2 | 	cmps	local12, #1 wc
02f50     35 00 00 FF 
02f54     0C E4 85 F1 | 	sub	objptr, ##27148
02f58     BC 06 90 3D |  if_ae	jmp	#LR__0182
02f5c     10 31 02 F6 | 	mov	local10, local02
02f60     03 30 66 F0 | 	shl	local10, #3
02f64     35 00 00 FF 
02f68     0C E4 05 F1 | 	add	objptr, ##27148
02f6c     F2 30 02 F1 | 	add	local10, objptr
02f70     10 33 02 F6 | 	mov	local11, local02
02f74     19 39 02 F6 | 	mov	local14, local11
02f78     1C 37 02 F6 | 	mov	local13, local14
02f7c     03 36 66 F0 | 	shl	local13, #3
02f80     F2 36 02 F1 | 	add	local13, objptr
02f84     1B 13 02 FB | 	rdlong	arg01, local13
02f88     35 00 00 FF 
02f8c     0C E4 85 F1 | 	sub	objptr, ##27148
02f90                 | ' 
02f90                 | ' select case s
02f90     82 01 00 FF 
02f94     46 14 06 F6 | 	mov	arg02, ##@LR__5173
02f98     A8 DA B1 FD | 	call	#__system___string_cmp
02f9c     00 FA 0D F2 | 	cmp	result1, #0 wz
02fa0     1B FA 05 A6 |  if_e	mov	result1, #27
02fa4     00 FA 05 56 |  if_ne	mov	result1, #0
02fa8     FD FA E1 F8 | 	getbyte	result1, result1, #0
02fac     04 30 06 F1 | 	add	local10, #4
02fb0     18 FB 61 FC | 	wrlong	result1, local10
02fb4                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
02fb4     10 31 02 F6 | 	mov	local10, local02
02fb8     03 30 66 F0 | 	shl	local10, #3
02fbc     35 00 00 FF 
02fc0     0C E4 05 F1 | 	add	objptr, ##27148
02fc4     F2 30 02 F1 | 	add	local10, objptr
02fc8     04 30 06 F1 | 	add	local10, #4
02fcc     18 35 02 FB | 	rdlong	local12, local10
02fd0     01 34 56 F2 | 	cmps	local12, #1 wc
02fd4     35 00 00 FF 
02fd8     0C E4 85 F1 | 	sub	objptr, ##27148
02fdc     38 06 90 3D |  if_ae	jmp	#LR__0182
02fe0     10 31 02 F6 | 	mov	local10, local02
02fe4     03 30 66 F0 | 	shl	local10, #3
02fe8     35 00 00 FF 
02fec     0C E4 05 F1 | 	add	objptr, ##27148
02ff0     F2 30 02 F1 | 	add	local10, objptr
02ff4     10 33 02 F6 | 	mov	local11, local02
02ff8     19 39 02 F6 | 	mov	local14, local11
02ffc     1C 37 02 F6 | 	mov	local13, local14
03000     03 36 66 F0 | 	shl	local13, #3
03004     F2 36 02 F1 | 	add	local13, objptr
03008     1B 13 02 FB | 	rdlong	arg01, local13
0300c     35 00 00 FF 
03010     0C E4 85 F1 | 	sub	objptr, ##27148
03014     E4 15 B0 FD | 	call	#_iscommand
03018     FD FA E1 F8 | 	getbyte	result1, result1, #0
0301c     04 30 06 F1 | 	add	local10, #4
03020     18 FB 61 FC | 	wrlong	result1, local10
03024                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03024     10 31 02 F6 | 	mov	local10, local02
03028     03 30 66 F0 | 	shl	local10, #3
0302c     35 00 00 FF 
03030     0C E4 05 F1 | 	add	objptr, ##27148
03034     F2 30 02 F1 | 	add	local10, objptr
03038     04 30 06 F1 | 	add	local10, #4
0303c     18 35 02 FB | 	rdlong	local12, local10
03040     01 34 56 F2 | 	cmps	local12, #1 wc
03044     35 00 00 FF 
03048     0C E4 85 F1 | 	sub	objptr, ##27148
0304c     C8 05 90 3D |  if_ae	jmp	#LR__0182
03050     10 31 02 F6 | 	mov	local10, local02
03054     03 30 66 F0 | 	shl	local10, #3
03058     35 00 00 FF 
0305c     0C E4 05 F1 | 	add	objptr, ##27148
03060     F2 30 02 F1 | 	add	local10, objptr
03064     10 33 02 F6 | 	mov	local11, local02
03068     19 39 02 F6 | 	mov	local14, local11
0306c     1C 37 02 F6 | 	mov	local13, local14
03070     03 36 66 F0 | 	shl	local13, #3
03074     F2 54 02 F6 | 	mov	local28, objptr
03078     F2 36 02 F1 | 	add	local13, objptr
0307c     1B 13 02 FB | 	rdlong	arg01, local13
03080     35 00 00 FF 
03084     0C E4 85 F1 | 	sub	objptr, ##27148
03088     B0 24 B0 FD | 	call	#_isfunction
0308c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03090     04 30 06 F1 | 	add	local10, #4
03094     18 FB 61 FC | 	wrlong	result1, local10
03098                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03098     10 31 02 F6 | 	mov	local10, local02
0309c     03 30 66 F0 | 	shl	local10, #3
030a0     35 00 00 FF 
030a4     0C E4 05 F1 | 	add	objptr, ##27148
030a8     F2 30 02 F1 | 	add	local10, objptr
030ac     04 30 06 F1 | 	add	local10, #4
030b0     18 35 02 FB | 	rdlong	local12, local10
030b4     01 34 56 F2 | 	cmps	local12, #1 wc
030b8     35 00 00 FF 
030bc     0C E4 85 F1 | 	sub	objptr, ##27148
030c0     54 05 90 3D |  if_ae	jmp	#LR__0182
030c4     10 31 02 F6 | 	mov	local10, local02
030c8     03 30 66 F0 | 	shl	local10, #3
030cc     35 00 00 FF 
030d0     0C E4 05 F1 | 	add	objptr, ##27148
030d4     F2 30 02 F1 | 	add	local10, objptr
030d8     10 33 02 F6 | 	mov	local11, local02
030dc     19 39 02 F6 | 	mov	local14, local11
030e0     03 38 66 F0 | 	shl	local14, #3
030e4     F2 36 02 F6 | 	mov	local13, objptr
030e8     F2 38 02 F1 | 	add	local14, objptr
030ec     1C 13 02 FB | 	rdlong	arg01, local14
030f0     35 00 00 FF 
030f4     0C E4 85 F1 | 	sub	objptr, ##27148
030f8     94 0F B0 FD | 	call	#_isnotename
030fc     04 30 06 F1 | 	add	local10, #4
03100     18 FB 61 FC | 	wrlong	result1, local10
03104                 | ' lparts(i).token=isnotename(lparts(i).part$) 
03104                 | ' if lparts(i).token>0 then 
03104     10 31 02 F6 | 	mov	local10, local02
03108     03 30 66 F0 | 	shl	local10, #3
0310c     35 00 00 FF 
03110     0C E4 05 F1 | 	add	objptr, ##27148
03114     F2 30 02 F1 | 	add	local10, objptr
03118     04 30 06 F1 | 	add	local10, #4
0311c     18 29 02 FB | 	rdlong	local06, local10
03120     01 28 56 F2 | 	cmps	local06, #1 wc
03124     35 00 00 FF 
03128     0C E4 85 F1 | 	sub	objptr, ##27148
0312c     8C 00 90 CD |  if_b	jmp	#LR__0172
03130     10 27 02 F6 | 	mov	local05, local02
03134     03 26 66 F0 | 	shl	local05, #3
03138     35 00 00 FF 
0313c     0C E4 05 F1 | 	add	objptr, ##27148
03140     F2 26 02 F1 | 	add	local05, objptr
03144     04 26 06 F1 | 	add	local05, #4
03148     13 35 02 FB | 	rdlong	local12, local05
0314c     1A 13 02 F6 | 	mov	arg01, local12
03150     35 00 00 FF 
03154     0C E4 85 F1 | 	sub	objptr, ##27148
03158     60 9F B1 FD | 	call	#_getnoteval
0315c     FD 72 02 F6 | 	mov	local43, result1
03160     10 31 02 F6 | 	mov	local10, local02
03164     03 30 66 F0 | 	shl	local10, #3
03168     35 00 00 FF 
0316c     0C E4 05 F1 | 	add	objptr, ##27148
03170     F2 30 02 F1 | 	add	local10, objptr
03174     39 13 02 F6 | 	mov	arg01, local43
03178     35 00 00 FF 
0317c     0C E4 85 F1 | 	sub	objptr, ##27148
03180     0C FB B1 FD | 	call	#__system__str_S
03184     18 FB 61 FC | 	wrlong	result1, local10
03188     10 25 02 F6 | 	mov	local04, local02
0318c     12 23 02 F6 | 	mov	local03, local04
03190     11 31 02 F6 | 	mov	local10, local03
03194     03 30 66 F0 | 	shl	local10, #3
03198     35 00 00 FF 
0319c     0C E4 05 F1 | 	add	objptr, ##27148
031a0     F2 30 02 F1 | 	add	local10, objptr
031a4     04 30 06 F1 | 	add	local10, #4
031a8     01 00 80 FF 
031ac     18 05 68 FC | 	wrlong	##514, local10
031b0     35 00 00 FF 
031b4     0C E4 85 F1 | 	sub	objptr, ##27148
031b8     5C 04 90 FD | 	jmp	#LR__0182
031bc                 | LR__0172
031bc     10 31 02 F6 | 	mov	local10, local02
031c0     03 30 66 F0 | 	shl	local10, #3
031c4     35 00 00 FF 
031c8     0C E4 05 F1 | 	add	objptr, ##27148
031cc     F2 30 02 F1 | 	add	local10, objptr
031d0     10 39 02 F6 | 	mov	local14, local02
031d4     03 38 66 F0 | 	shl	local14, #3
031d8     F2 38 02 F1 | 	add	local14, objptr
031dc     1C 13 02 FB | 	rdlong	arg01, local14
031e0     35 00 00 FF 
031e4     0C E4 85 F1 | 	sub	objptr, ##27148
031e8     3C 0D B0 FD | 	call	#_ischannel
031ec     04 30 06 F1 | 	add	local10, #4
031f0     18 FB 61 FC | 	wrlong	result1, local10
031f4                 | ' 
031f4                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
031f4                 | ' 
031f4                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
031f4     10 31 02 F6 | 	mov	local10, local02
031f8     03 30 66 F0 | 	shl	local10, #3
031fc     35 00 00 FF 
03200     0C E4 05 F1 | 	add	objptr, ##27148
03204     F2 30 02 F1 | 	add	local10, objptr
03208     04 30 06 F1 | 	add	local10, #4
0320c     18 29 02 FB | 	rdlong	local06, local10
03210     01 28 56 F2 | 	cmps	local06, #1 wc
03214     35 00 00 FF 
03218     0C E4 85 F1 | 	sub	objptr, ##27148
0321c     74 00 90 CD |  if_b	jmp	#LR__0173
03220     10 31 02 F6 | 	mov	local10, local02
03224     03 30 66 F0 | 	shl	local10, #3
03228     35 00 00 FF 
0322c     0C E4 05 F1 | 	add	objptr, ##27148
03230     F2 30 02 F1 | 	add	local10, objptr
03234     10 33 02 F6 | 	mov	local11, local02
03238     19 39 02 F6 | 	mov	local14, local11
0323c     03 38 66 F0 | 	shl	local14, #3
03240     F2 36 02 F6 | 	mov	local13, objptr
03244     F2 38 02 F1 | 	add	local14, objptr
03248     1C 13 02 FB | 	rdlong	arg01, local14
0324c     01 34 06 F6 | 	mov	local12, #1
03250     01 14 06 F6 | 	mov	arg02, #1
03254     35 00 00 FF 
03258     0C E4 85 F1 | 	sub	objptr, ##27148
0325c     C0 F8 B1 FD | 	call	#__system__Right_S
03260     18 FB 61 FC | 	wrlong	result1, local10
03264     10 25 02 F6 | 	mov	local04, local02
03268     12 23 02 F6 | 	mov	local03, local04
0326c     11 31 02 F6 | 	mov	local10, local03
03270     03 30 66 F0 | 	shl	local10, #3
03274     35 00 00 FF 
03278     0C E4 05 F1 | 	add	objptr, ##27148
0327c     F2 30 02 F1 | 	add	local10, objptr
03280     04 30 06 F1 | 	add	local10, #4
03284     18 59 68 FC | 	wrlong	#44, local10
03288     35 00 00 FF 
0328c     0C E4 85 F1 | 	sub	objptr, ##27148
03290     84 03 90 FD | 	jmp	#LR__0182
03294                 | LR__0173
03294     10 31 02 F6 | 	mov	local10, local02
03298     03 30 66 F0 | 	shl	local10, #3
0329c     35 00 00 FF 
032a0     0C E4 05 F1 | 	add	objptr, ##27148
032a4     F2 30 02 F1 | 	add	local10, objptr
032a8     10 33 02 F6 | 	mov	local11, local02
032ac     19 39 02 F6 | 	mov	local14, local11
032b0     03 38 66 F0 | 	shl	local14, #3
032b4     F2 36 02 F6 | 	mov	local13, objptr
032b8     F2 38 02 F1 | 	add	local14, objptr
032bc     1C 13 02 FB | 	rdlong	arg01, local14
032c0     35 00 00 FF 
032c4     0C E4 85 F1 | 	sub	objptr, ##27148
032c8     44 0D B0 FD | 	call	#_isconstant
032cc     04 30 06 F1 | 	add	local10, #4
032d0     18 FB 61 FC | 	wrlong	result1, local10
032d4                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
032d4     10 31 02 F6 | 	mov	local10, local02
032d8     03 30 66 F0 | 	shl	local10, #3
032dc     35 00 00 FF 
032e0     0C E4 05 F1 | 	add	objptr, ##27148
032e4     F2 30 02 F1 | 	add	local10, objptr
032e8     04 30 06 F1 | 	add	local10, #4
032ec     18 35 02 FB | 	rdlong	local12, local10
032f0     01 34 56 F2 | 	cmps	local12, #1 wc
032f4     35 00 00 FF 
032f8     0C E4 85 F1 | 	sub	objptr, ##27148
032fc     94 00 90 CD |  if_b	jmp	#LR__0174
03300     10 31 02 F6 | 	mov	local10, local02
03304     03 30 66 F0 | 	shl	local10, #3
03308     35 00 00 FF 
0330c     0C E4 05 F1 | 	add	objptr, ##27148
03310     F2 30 02 F1 | 	add	local10, objptr
03314     10 35 02 F6 | 	mov	local12, local02
03318     1A 33 02 F6 | 	mov	local11, local12
0331c     19 39 02 F6 | 	mov	local14, local11
03320     03 38 66 F0 | 	shl	local14, #3
03324     F2 36 02 F6 | 	mov	local13, objptr
03328     F2 38 02 F1 | 	add	local14, objptr
0332c     04 38 06 F1 | 	add	local14, #4
03330     1C 13 02 FB | 	rdlong	arg01, local14
03334     04 38 86 F1 | 	sub	local14, #4
03338     35 00 00 FF 
0333c     0C E4 85 F1 | 	sub	objptr, ##27148
03340     09 13 52 F6 | 	abs	arg01, arg01 wc
03344     1F 74 C6 C9 |  if_b	decod	local44, #31
03348     00 74 06 36 |  if_ae	mov	local44, #0
0334c     7C FE B1 FD | 	call	#__system___float_fromuns
03350     3A FB 61 F5 | 	xor	result1, local44
03354     FD 12 02 F6 | 	mov	arg01, result1
03358     34 F9 B1 FD | 	call	#__system__str_S
0335c     18 FB 61 FC | 	wrlong	result1, local10
03360     10 25 02 F6 | 	mov	local04, local02
03364     12 23 02 F6 | 	mov	local03, local04
03368     11 31 02 F6 | 	mov	local10, local03
0336c     03 30 66 F0 | 	shl	local10, #3
03370     35 00 00 FF 
03374     0C E4 05 F1 | 	add	objptr, ##27148
03378     F2 30 02 F1 | 	add	local10, objptr
0337c     04 30 06 F1 | 	add	local10, #4
03380     01 00 80 FF 
03384     18 03 68 FC | 	wrlong	##513, local10
03388     35 00 00 FF 
0338c     0C E4 85 F1 | 	sub	objptr, ##27148
03390     84 02 90 FD | 	jmp	#LR__0182
03394                 | LR__0174
03394     10 27 02 F6 | 	mov	local05, local02
03398     03 26 66 F0 | 	shl	local05, #3
0339c     35 00 00 FF 
033a0     0C E4 05 F1 | 	add	objptr, ##27148
033a4     F2 26 02 F1 | 	add	local05, objptr
033a8     13 13 02 FB | 	rdlong	arg01, local05
033ac     35 00 00 FF 
033b0     0C E4 85 F1 | 	sub	objptr, ##27148
033b4     98 29 B0 FD | 	call	#_isnum
033b8     FD 76 02 F6 | 	mov	local45, result1
033bc     10 27 02 F6 | 	mov	local05, local02
033c0     03 26 66 F0 | 	shl	local05, #3
033c4     35 00 00 FF 
033c8     0C E4 05 F1 | 	add	objptr, ##27148
033cc     F2 26 02 F1 | 	add	local05, objptr
033d0     13 13 02 FB | 	rdlong	arg01, local05
033d4     35 00 00 FF 
033d8     0C E4 85 F1 | 	sub	objptr, ##27148
033dc     5C 2D B0 FD | 	call	#_isint
033e0     FD 78 02 F6 | 	mov	local46, result1
033e4     10 27 02 F6 | 	mov	local05, local02
033e8     03 26 66 F0 | 	shl	local05, #3
033ec     35 00 00 FF 
033f0     0C E4 05 F1 | 	add	objptr, ##27148
033f4     F2 26 02 F1 | 	add	local05, objptr
033f8     13 13 02 FB | 	rdlong	arg01, local05
033fc     35 00 00 FF 
03400     0C E4 85 F1 | 	sub	objptr, ##27148
03404     D8 2F B0 FD | 	call	#_isdec
03408     FD 7A 02 F6 | 	mov	local47, result1
0340c                 | ' 
0340c                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
0340c                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
0340c     00 76 0E F2 | 	cmp	local45, #0 wz
03410     00 78 0E 52 |  if_ne	cmp	local46, #0 wz
03414     00 7A 0E 52 |  if_ne	cmp	local47, #0 wz
03418     34 00 90 AD |  if_e	jmp	#LR__0175
0341c     10 25 02 F6 | 	mov	local04, local02
03420     12 23 02 F6 | 	mov	local03, local04
03424     11 31 02 F6 | 	mov	local10, local03
03428     03 30 66 F0 | 	shl	local10, #3
0342c     35 00 00 FF 
03430     0C E4 05 F1 | 	add	objptr, ##27148
03434     F2 30 02 F1 | 	add	local10, objptr
03438     04 30 06 F1 | 	add	local10, #4
0343c     01 00 80 FF 
03440     18 01 68 FC | 	wrlong	##512, local10
03444     35 00 00 FF 
03448     0C E4 85 F1 | 	sub	objptr, ##27148
0344c     C8 01 90 FD | 	jmp	#LR__0182
03450                 | LR__0175
03450                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03450     00 76 0E F2 | 	cmp	local45, #0 wz
03454     00 78 0E 52 |  if_ne	cmp	local46, #0 wz
03458     3D 25 22 56 |  if_ne	not	local04, local47
0345c     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
03460     34 00 90 AD |  if_e	jmp	#LR__0176
03464     10 25 02 F6 | 	mov	local04, local02
03468     12 23 02 F6 | 	mov	local03, local04
0346c     11 31 02 F6 | 	mov	local10, local03
03470     03 30 66 F0 | 	shl	local10, #3
03474     35 00 00 FF 
03478     0C E4 05 F1 | 	add	objptr, ##27148
0347c     F2 30 02 F1 | 	add	local10, objptr
03480     04 30 06 F1 | 	add	local10, #4
03484     01 00 80 FF 
03488     18 03 68 FC | 	wrlong	##513, local10
0348c     35 00 00 FF 
03490     0C E4 85 F1 | 	sub	objptr, ##27148
03494     80 01 90 FD | 	jmp	#LR__0182
03498                 | LR__0176
03498                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03498     00 76 0E F2 | 	cmp	local45, #0 wz
0349c     3C 25 22 56 |  if_ne	not	local04, local46
034a0     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
034a4     3D 23 22 56 |  if_ne	not	local03, local47
034a8     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
034ac     34 00 90 AD |  if_e	jmp	#LR__0177
034b0     10 25 02 F6 | 	mov	local04, local02
034b4     12 23 02 F6 | 	mov	local03, local04
034b8     11 31 02 F6 | 	mov	local10, local03
034bc     03 30 66 F0 | 	shl	local10, #3
034c0     35 00 00 FF 
034c4     0C E4 05 F1 | 	add	objptr, ##27148
034c8     F2 30 02 F1 | 	add	local10, objptr
034cc     04 30 06 F1 | 	add	local10, #4
034d0     01 00 80 FF 
034d4     18 05 68 FC | 	wrlong	##514, local10
034d8     35 00 00 FF 
034dc     0C E4 85 F1 | 	sub	objptr, ##27148
034e0     34 01 90 FD | 	jmp	#LR__0182
034e4                 | LR__0177
034e4                 | ' 
034e4                 | ' if isstring(lparts(i).part$) then 
034e4     10 27 02 F6 | 	mov	local05, local02
034e8     03 26 66 F0 | 	shl	local05, #3
034ec     35 00 00 FF 
034f0     0C E4 05 F1 | 	add	objptr, ##27148
034f4     F2 26 02 F1 | 	add	local05, objptr
034f8     13 13 02 FB | 	rdlong	arg01, local05
034fc     35 00 00 FF 
03500     0C E4 85 F1 | 	sub	objptr, ##27148
03504     98 2F B0 FD | 	call	#_isstring
03508     00 FA 0D F2 | 	cmp	result1, #0 wz
0350c     A8 00 90 AD |  if_e	jmp	#LR__0180
03510     10 31 02 F6 | 	mov	local10, local02
03514     03 30 66 F0 | 	shl	local10, #3
03518     35 00 00 FF 
0351c     0C E4 05 F1 | 	add	objptr, ##27148
03520     F2 30 02 F1 | 	add	local10, objptr
03524     04 30 06 F1 | 	add	local10, #4
03528     01 00 80 FF 
0352c     18 07 68 FC | 	wrlong	##515, local10
03530     10 25 02 F6 | 	mov	local04, local02
03534     12 23 02 F6 | 	mov	local03, local04
03538     11 31 02 F6 | 	mov	local10, local03
0353c     03 30 66 F0 | 	shl	local10, #3
03540     F2 30 02 F1 | 	add	local10, objptr
03544     10 39 02 F6 | 	mov	local14, local02
03548     03 38 66 F0 | 	shl	local14, #3
0354c     F2 38 02 F1 | 	add	local14, objptr
03550     1C 29 02 FB | 	rdlong	local06, local14
03554     02 34 06 F6 | 	mov	local12, #2
03558     10 49 02 F6 | 	mov	local22, local02
0355c     24 4B 02 F6 | 	mov	local23, local22
03560     03 4A 66 F0 | 	shl	local23, #3
03564     F2 4C 02 F6 | 	mov	local24, objptr
03568     F2 4A 02 F1 | 	add	local23, objptr
0356c     25 13 02 FB | 	rdlong	arg01, local23
03570     35 00 00 FF 
03574     0C E4 85 F1 | 	sub	objptr, ##27148
03578     09 2B 02 F6 | 	mov	local07, arg01
0357c     97 06 48 FB | 	callpa	#(@LR__0179-@LR__0178)>>2,fcache_load_ptr_
03580                 | LR__0178
03580     15 FB C9 FA | 	rdbyte	result1, local07 wz
03584     01 2A 06 51 |  if_ne	add	local07, #1
03588     F4 FF 9F 5D |  if_ne	jmp	#LR__0178
0358c                 | LR__0179
0358c     09 2B 82 F1 | 	sub	local07, arg01
03590     15 37 02 F6 | 	mov	local13, local07
03594     1B 39 02 F6 | 	mov	local14, local13
03598     02 38 86 F1 | 	sub	local14, #2
0359c     1C 33 02 F6 | 	mov	local11, local14
035a0     14 13 02 F6 | 	mov	arg01, local06
035a4     1A 15 02 F6 | 	mov	arg02, local12
035a8     19 17 02 F6 | 	mov	arg03, local11
035ac     00 F6 B1 FD | 	call	#__system__Mid_S
035b0     18 FB 61 FC | 	wrlong	result1, local10
035b4     60 00 90 FD | 	jmp	#LR__0182
035b8                 | LR__0180
035b8                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
035b8     10 23 02 F6 | 	mov	local03, local02
035bc     11 27 02 F6 | 	mov	local05, local03
035c0     03 26 66 F0 | 	shl	local05, #3
035c4     35 00 00 FF 
035c8     0C E4 05 F1 | 	add	objptr, ##27148
035cc     F2 26 02 F1 | 	add	local05, objptr
035d0     13 13 02 FB | 	rdlong	arg01, local05
035d4     35 00 00 FF 
035d8     0C E4 85 F1 | 	sub	objptr, ##27148
035dc     FC 24 B0 FD | 	call	#_isname
035e0     FD 24 0A F6 | 	mov	local04, result1 wz
035e4     30 00 90 AD |  if_e	jmp	#LR__0181
035e8     10 25 02 F6 | 	mov	local04, local02
035ec     12 23 02 F6 | 	mov	local03, local04
035f0     11 31 02 F6 | 	mov	local10, local03
035f4     03 30 66 F0 | 	shl	local10, #3
035f8     35 00 00 FF 
035fc     0C E4 05 F1 | 	add	objptr, ##27148
03600     F2 30 02 F1 | 	add	local10, objptr
03604     04 30 06 F1 | 	add	local10, #4
03608     01 00 80 FF 
0360c     18 09 68 FC | 	wrlong	##516, local10
03610     35 00 00 FF 
03614     0C E4 85 F1 | 	sub	objptr, ##27148
03618                 | LR__0181
03618                 | LR__0182
03618     01 20 06 F1 | 	add	local02, #1
0361c     54 F8 9F FD | 	jmp	#LR__0171
03620                 | LR__0183
03620     1F 31 02 F6 | 	mov	local10, local17
03624     03 30 66 F0 | 	shl	local10, #3
03628     35 00 00 FF 
0362c     0C E4 05 F1 | 	add	objptr, ##27148
03630     F2 30 02 F1 | 	add	local10, objptr
03634     04 30 06 F1 | 	add	local10, #4
03638     18 FD 6B FC | 	wrlong	#510, local10
0363c     1F 31 02 F6 | 	mov	local10, local17
03640     03 30 66 F0 | 	shl	local10, #3
03644     F2 26 02 F6 | 	mov	local05, objptr
03648     F2 30 02 F1 | 	add	local10, objptr
0364c     81 01 00 FF 
03650     73 29 06 F6 | 	mov	local06, ##@LR__5097
03654     18 29 62 FC | 	wrlong	local06, local10
03658     10 00 00 FF 
0365c     54 E4 05 F1 | 	add	objptr, ##8276
03660     F2 3E 62 FC | 	wrlong	local17, objptr
03664     45 00 00 FF 
03668     60 E4 85 F1 | 	sub	objptr, ##35424
0366c                 | ' 
0366c                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
0366c                 | ' 
0366c                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
0366c                 | '  
0366c                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
0366c     81 01 00 FF 
03670     74 31 06 F6 | 	mov	local10, ##@LR__5098
03674     37 13 02 F6 | 	mov	arg01, local41
03678     18 15 02 F6 | 	mov	arg02, local10
0367c     C4 D3 B1 FD | 	call	#__system___string_cmp
03680     00 FA 0D F2 | 	cmp	result1, #0 wz
03684     FC 00 90 AD |  if_e	jmp	#LR__0184
03688     81 01 00 FF 
0368c     79 27 06 F6 | 	mov	local05, ##@LR__5099
03690     13 31 02 F6 | 	mov	local10, local05
03694     37 13 02 F6 | 	mov	arg01, local41
03698     18 15 02 F6 | 	mov	arg02, local10
0369c     A4 D3 B1 FD | 	call	#__system___string_cmp
036a0     00 FA 0D F2 | 	cmp	result1, #0 wz
036a4     DC 00 90 AD |  if_e	jmp	#LR__0184
036a8     81 01 00 FF 
036ac     7E 29 06 F6 | 	mov	local06, ##@LR__5100
036b0     14 27 02 F6 | 	mov	local05, local06
036b4     37 13 02 F6 | 	mov	arg01, local41
036b8     13 15 02 F6 | 	mov	arg02, local05
036bc     84 D3 B1 FD | 	call	#__system___string_cmp
036c0     FD 30 0A F6 | 	mov	local10, result1 wz
036c4     BC 00 90 AD |  if_e	jmp	#LR__0184
036c8     81 01 00 FF 
036cc     83 35 06 F6 | 	mov	local12, ##@LR__5101
036d0     1A 29 02 F6 | 	mov	local06, local12
036d4     37 13 02 F6 | 	mov	arg01, local41
036d8     14 15 02 F6 | 	mov	arg02, local06
036dc     64 D3 B1 FD | 	call	#__system___string_cmp
036e0     FD 26 0A F6 | 	mov	local05, result1 wz
036e4     9C 00 90 AD |  if_e	jmp	#LR__0184
036e8     81 01 00 FF 
036ec     87 33 06 F6 | 	mov	local11, ##@LR__5102
036f0     19 35 02 F6 | 	mov	local12, local11
036f4     37 13 02 F6 | 	mov	arg01, local41
036f8     1A 15 02 F6 | 	mov	arg02, local12
036fc     44 D3 B1 FD | 	call	#__system___string_cmp
03700     FD 28 0A F6 | 	mov	local06, result1 wz
03704     7C 00 90 AD |  if_e	jmp	#LR__0184
03708     81 01 00 FF 
0370c     8B 39 06 F6 | 	mov	local14, ##@LR__5103
03710     1C 33 02 F6 | 	mov	local11, local14
03714     37 13 02 F6 | 	mov	arg01, local41
03718     19 15 02 F6 | 	mov	arg02, local11
0371c     24 D3 B1 FD | 	call	#__system___string_cmp
03720     FD 34 0A F6 | 	mov	local12, result1 wz
03724     5C 00 90 AD |  if_e	jmp	#LR__0184
03728     81 01 00 FF 
0372c     8E 37 06 F6 | 	mov	local13, ##@LR__5104
03730     1B 39 02 F6 | 	mov	local14, local13
03734     37 13 02 F6 | 	mov	arg01, local41
03738     1C 15 02 F6 | 	mov	arg02, local14
0373c     04 D3 B1 FD | 	call	#__system___string_cmp
03740     FD 32 0A F6 | 	mov	local11, result1 wz
03744     3C 00 90 AD |  if_e	jmp	#LR__0184
03748     81 01 00 FF 
0374c     92 37 06 F6 | 	mov	local13, ##@LR__5105
03750     37 13 02 F6 | 	mov	arg01, local41
03754     1B 15 02 F6 | 	mov	arg02, local13
03758     E8 D2 B1 FD | 	call	#__system___string_cmp
0375c     FD 38 0A F6 | 	mov	local14, result1 wz
03760     20 00 90 AD |  if_e	jmp	#LR__0184
03764     81 01 00 FF 
03768     98 49 06 F6 | 	mov	local22, ##@LR__5106
0376c     24 55 02 F6 | 	mov	local28, local22
03770     37 13 02 F6 | 	mov	arg01, local41
03774     2A 15 02 F6 | 	mov	arg02, local28
03778     C8 D2 B1 FD | 	call	#__system___string_cmp
0377c     FD 36 0A F6 | 	mov	local13, result1 wz
03780     84 00 90 5D |  if_ne	jmp	#LR__0185
03784                 | LR__0184
03784     33 55 02 F6 | 	mov	local28, local37
03788     01 54 06 F1 | 	add	local28, #1
0378c     2A 49 02 F6 | 	mov	local22, local28
03790     24 4B 02 F6 | 	mov	local23, local22
03794     03 4A 66 F0 | 	shl	local23, #3
03798     35 00 00 FF 
0379c     0C E4 05 F1 | 	add	objptr, ##27148
037a0     F2 4C 02 F6 | 	mov	local24, objptr
037a4     F2 4A 02 F1 | 	add	local23, objptr
037a8     04 4A 06 F1 | 	add	local23, #4
037ac     25 59 02 FB | 	rdlong	local30, local23
037b0     04 4A 86 F1 | 	sub	local23, #4
037b4     2C 57 02 F6 | 	mov	local29, local30
037b8     01 00 00 FF 
037bc     04 56 0E F2 | 	cmp	local29, ##516 wz
037c0     35 00 00 FF 
037c4     0C E4 85 F1 | 	sub	objptr, ##27148
037c8     3C 00 90 5D |  if_ne	jmp	#LR__0185
037cc     33 31 02 F6 | 	mov	local10, local37
037d0     01 30 06 F1 | 	add	local10, #1
037d4     03 30 66 F0 | 	shl	local10, #3
037d8     35 00 00 FF 
037dc     0C E4 05 F1 | 	add	objptr, ##27148
037e0     F2 26 02 F6 | 	mov	local05, objptr
037e4     F2 30 02 F1 | 	add	local10, objptr
037e8     01 00 00 FF 
037ec     03 28 06 F6 | 	mov	local06, ##515
037f0     04 30 06 F1 | 	add	local10, #4
037f4     01 00 80 FF 
037f8     18 07 68 FC | 	wrlong	##515, local10
037fc     04 30 86 F1 | 	sub	local10, #4
03800     35 00 00 FF 
03804     0C E4 85 F1 | 	sub	objptr, ##27148
03808                 | LR__0185
03808                 | ' 
03808                 | ' ' determine a type of the line and compile it
03808                 | ' 
03808                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03808     35 00 00 FF 
0380c     0C E4 05 F1 | 	add	objptr, ##27148
03810     F2 12 02 FB | 	rdlong	arg01, objptr
03814     35 00 00 FF 
03818     0C E4 85 F1 | 	sub	objptr, ##27148
0381c     C0 2B B0 FD | 	call	#_isdec
03820     00 FA 0D F2 | 	cmp	result1, #0 wz
03824     30 00 90 AD |  if_e	jmp	#LR__0186
03828     35 00 00 FF 
0382c     0C E4 05 F1 | 	add	objptr, ##27148
03830     F2 12 02 FB | 	rdlong	arg01, objptr
03834     35 00 00 FF 
03838     0C E4 85 F1 | 	sub	objptr, ##27148
0383c     00 14 06 F6 | 	mov	arg02, #0
03840     04 04 B2 FD | 	call	#__system____builtin_atoi
03844     51 00 00 FF 
03848     C0 E5 05 F1 | 	add	objptr, ##41920
0384c     F2 FA 61 FC | 	wrlong	result1, objptr
03850     51 00 00 FF 
03854     C0 E5 85 F1 | 	sub	objptr, ##41920
03858                 | LR__0186
03858                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03858     51 00 00 FF 
0385c     C0 E5 05 F1 | 	add	objptr, ##41920
03860     F2 24 02 FB | 	rdlong	local04, objptr
03864     51 00 00 FF 
03868     C0 E5 85 F1 | 	sub	objptr, ##41920
0386c     01 24 16 F2 | 	cmp	local04, #1 wc
03870     40 00 90 CD |  if_b	jmp	#LR__0187
03874     01 3E 0E F2 | 	cmp	local17, #1 wz
03878     37 00 00 AF 
0387c     24 E4 05 A1 |  if_e	add	objptr, ##28196
03880     F2 26 02 AB |  if_e	rdlong	local05, objptr
03884     37 00 00 AF 
03888     24 E4 85 A1 |  if_e	sub	objptr, ##28196
0388c     13 31 02 A6 |  if_e	mov	local10, local05
03890     03 30 0E A2 |  if_e	cmp	local10, #3 wz
03894     1C 00 90 5D |  if_ne	jmp	#LR__0187
03898     51 00 00 FF 
0389c     C0 E5 05 F1 | 	add	objptr, ##41920
038a0     F2 12 02 FB | 	rdlong	arg01, objptr
038a4     51 00 00 FF 
038a8     C0 E5 85 F1 | 	sub	objptr, ##41920
038ac     54 2C B0 FD | 	call	#_deleteline
038b0     48 03 90 FD | 	jmp	#LR__0195
038b4                 | LR__0187
038b4                 | ' 
038b4                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
038b4     37 00 00 FF 
038b8     24 E4 05 F1 | 	add	objptr, ##28196
038bc     F2 24 0A FB | 	rdlong	local04, objptr wz
038c0     37 00 00 FF 
038c4     24 E4 85 F1 | 	sub	objptr, ##28196
038c8     37 00 00 5F 
038cc     24 E4 05 51 |  if_ne	add	objptr, ##28196
038d0     F2 30 02 5B |  if_ne	rdlong	local10, objptr
038d4     37 00 00 5F 
038d8     24 E4 85 51 |  if_ne	sub	objptr, ##28196
038dc     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
038e0     AC 00 90 5D |  if_ne	jmp	#LR__0189
038e4     35 00 00 FF 
038e8     20 E4 05 F1 | 	add	objptr, ##27168
038ec     F2 34 02 FB | 	rdlong	local12, objptr
038f0     35 00 00 FF 
038f4     20 E4 85 F1 | 	sub	objptr, ##27168
038f8     1B 34 0E F2 | 	cmp	local12, #27 wz
038fc     90 00 90 AD |  if_e	jmp	#LR__0189
03900     51 00 00 FF 
03904     C0 E5 05 F1 | 	add	objptr, ##41920
03908     F2 12 02 FB | 	rdlong	arg01, objptr
0390c     1A 00 00 FF 
03910     9C E5 85 F1 | 	sub	objptr, ##13724
03914     F2 16 02 FB | 	rdlong	arg03, objptr
03918     37 00 00 FF 
0391c     24 E4 85 F1 | 	sub	objptr, ##28196
03920     00 14 06 F6 | 	mov	arg02, #0
03924     7C 40 B0 FD | 	call	#_compile
03928     FD 1E 0A F6 | 	mov	local01, result1 wz
0392c                 | '   err=compile(linenum,0,cont) 
0392c                 | '   if err<>0 then printerror(err): goto 104
0392c     0C 00 90 AD |  if_e	jmp	#LR__0188
03930     0F 13 02 F6 | 	mov	arg01, local01
03934     4C 9B B1 FD | 	call	#_printerror
03938     C0 02 90 FD | 	jmp	#LR__0195
0393c                 | LR__0188
0393c                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
0393c     51 00 00 FF 
03940     F4 E5 05 F1 | 	add	objptr, ##41972
03944     F2 12 02 FB | 	rdlong	arg01, objptr
03948     51 00 00 FF 
0394c     F4 E5 85 F1 | 	sub	objptr, ##41972
03950     81 01 00 FF 
03954     9B 15 06 F6 | 	mov	arg02, ##@LR__5107
03958     E8 D0 B1 FD | 	call	#__system___string_cmp
0395c     00 FA 0D F2 | 	cmp	result1, #0 wz
03960     98 02 90 AD |  if_e	jmp	#LR__0195
03964     51 00 00 FF 
03968     F4 E5 05 F1 | 	add	objptr, ##41972
0396c     F2 24 02 FB | 	rdlong	local04, objptr
03970     1A 00 00 FF 
03974     D8 E5 85 F1 | 	sub	objptr, ##13784
03978     F2 24 62 FC | 	wrlong	local04, objptr
0397c     08 E4 05 F1 | 	add	objptr, #8
03980     F2 08 68 FC | 	wrlong	#4, objptr
03984     37 00 00 FF 
03988     24 E4 85 F1 | 	sub	objptr, ##28196
0398c     54 DD 9F FD | 	jmp	#LR__0070
03990                 | LR__0189
03990                 | '       							
03990                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
03990     37 00 00 FF 
03994     24 E4 05 F1 | 	add	objptr, ##28196
03998     F2 24 02 FB | 	rdlong	local04, objptr
0399c     37 00 00 FF 
039a0     24 E4 85 F1 | 	sub	objptr, ##28196
039a4     01 24 0E F2 | 	cmp	local04, #1 wz
039a8     37 00 00 5F 
039ac     24 E4 05 51 |  if_ne	add	objptr, ##28196
039b0     F2 30 02 5B |  if_ne	rdlong	local10, objptr
039b4     37 00 00 5F 
039b8     24 E4 85 51 |  if_ne	sub	objptr, ##28196
039bc     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
039c0     AC 00 90 5D |  if_ne	jmp	#LR__0191
039c4     35 00 00 FF 
039c8     18 E4 05 F1 | 	add	objptr, ##27160
039cc     F2 34 02 FB | 	rdlong	local12, objptr
039d0     35 00 00 FF 
039d4     18 E4 85 F1 | 	sub	objptr, ##27160
039d8     1B 34 0E F2 | 	cmp	local12, #27 wz
039dc     90 00 90 AD |  if_e	jmp	#LR__0191
039e0     51 00 00 FF 
039e4     C0 E5 05 F1 | 	add	objptr, ##41920
039e8     F2 12 02 FB | 	rdlong	arg01, objptr
039ec     1A 00 00 FF 
039f0     9C E5 85 F1 | 	sub	objptr, ##13724
039f4     F2 16 02 FB | 	rdlong	arg03, objptr
039f8     37 00 00 FF 
039fc     24 E4 85 F1 | 	sub	objptr, ##28196
03a00     00 14 06 F6 | 	mov	arg02, #0
03a04     9C 3F B0 FD | 	call	#_compile
03a08     FD 1E 0A F6 | 	mov	local01, result1 wz
03a0c                 | '   err=compile(linenum,0,cont) 
03a0c                 | '   if err<>0 then printerror(err): goto 104
03a0c     0C 00 90 AD |  if_e	jmp	#LR__0190
03a10     0F 13 02 F6 | 	mov	arg01, local01
03a14     6C 9A B1 FD | 	call	#_printerror
03a18     E0 01 90 FD | 	jmp	#LR__0195
03a1c                 | LR__0190
03a1c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
03a1c     51 00 00 FF 
03a20     F4 E5 05 F1 | 	add	objptr, ##41972
03a24     F2 12 02 FB | 	rdlong	arg01, objptr
03a28     51 00 00 FF 
03a2c     F4 E5 85 F1 | 	sub	objptr, ##41972
03a30     81 01 00 FF 
03a34     9C 15 06 F6 | 	mov	arg02, ##@LR__5108
03a38     08 D0 B1 FD | 	call	#__system___string_cmp
03a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a40     B8 01 90 AD |  if_e	jmp	#LR__0195
03a44     51 00 00 FF 
03a48     F4 E5 05 F1 | 	add	objptr, ##41972
03a4c     F2 24 02 FB | 	rdlong	local04, objptr
03a50     1A 00 00 FF 
03a54     D8 E5 85 F1 | 	sub	objptr, ##13784
03a58     F2 24 62 FC | 	wrlong	local04, objptr
03a5c     08 E4 05 F1 | 	add	objptr, #8
03a60     F2 08 68 FC | 	wrlong	#4, objptr
03a64     37 00 00 FF 
03a68     24 E4 85 F1 | 	sub	objptr, ##28196
03a6c     74 DC 9F FD | 	jmp	#LR__0070
03a70                 | LR__0191
03a70                 | ' 							 
03a70                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
03a70     37 00 00 FF 
03a74     24 E4 05 F1 | 	add	objptr, ##28196
03a78     F2 24 0A FB | 	rdlong	local04, objptr wz
03a7c     37 00 00 FF 
03a80     24 E4 85 F1 | 	sub	objptr, ##28196
03a84     37 00 00 5F 
03a88     24 E4 05 51 |  if_ne	add	objptr, ##28196
03a8c     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03a90     37 00 00 5F 
03a94     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03a98     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
03a9c     35 00 00 AF 
03aa0     20 E4 05 A1 |  if_e	add	objptr, ##27168
03aa4     F2 34 02 AB |  if_e	rdlong	local12, objptr
03aa8     35 00 00 AF 
03aac     20 E4 85 A1 |  if_e	sub	objptr, ##27168
03ab0     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
03ab4     7C 00 90 5D |  if_ne	jmp	#LR__0192
03ab8     51 00 00 FF 
03abc     C0 E5 05 F1 | 	add	objptr, ##41920
03ac0     F2 12 02 FB | 	rdlong	arg01, objptr
03ac4     1A 00 00 FF 
03ac8     9C E5 85 F1 | 	sub	objptr, ##13724
03acc     F2 16 02 FB | 	rdlong	arg03, objptr
03ad0     37 00 00 FF 
03ad4     24 E4 85 F1 | 	sub	objptr, ##28196
03ad8     00 14 06 F6 | 	mov	arg02, #0
03adc     88 3F B0 FD | 	call	#_compile_assign
03ae0                 | '   compile_assign(linenum,0,cont)
03ae0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
03ae0     51 00 00 FF 
03ae4     F4 E5 05 F1 | 	add	objptr, ##41972
03ae8     F2 12 02 FB | 	rdlong	arg01, objptr
03aec     51 00 00 FF 
03af0     F4 E5 85 F1 | 	sub	objptr, ##41972
03af4     81 01 00 FF 
03af8     9D 15 06 F6 | 	mov	arg02, ##@LR__5109
03afc     44 CF B1 FD | 	call	#__system___string_cmp
03b00     00 FA 0D F2 | 	cmp	result1, #0 wz
03b04     F4 00 90 AD |  if_e	jmp	#LR__0195
03b08     51 00 00 FF 
03b0c     F4 E5 05 F1 | 	add	objptr, ##41972
03b10     F2 24 02 FB | 	rdlong	local04, objptr
03b14     1A 00 00 FF 
03b18     D8 E5 85 F1 | 	sub	objptr, ##13784
03b1c     F2 24 62 FC | 	wrlong	local04, objptr
03b20     08 E4 05 F1 | 	add	objptr, #8
03b24     F2 08 68 FC | 	wrlong	#4, objptr
03b28     37 00 00 FF 
03b2c     24 E4 85 F1 | 	sub	objptr, ##28196
03b30     B0 DB 9F FD | 	jmp	#LR__0070
03b34                 | LR__0192
03b34                 | '     							 
03b34                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
03b34     37 00 00 FF 
03b38     24 E4 05 F1 | 	add	objptr, ##28196
03b3c     F2 24 02 FB | 	rdlong	local04, objptr
03b40     37 00 00 FF 
03b44     24 E4 85 F1 | 	sub	objptr, ##28196
03b48     01 24 0E F2 | 	cmp	local04, #1 wz
03b4c     37 00 00 5F 
03b50     24 E4 05 51 |  if_ne	add	objptr, ##28196
03b54     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03b58     37 00 00 5F 
03b5c     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03b60     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
03b64     35 00 00 AF 
03b68     18 E4 05 A1 |  if_e	add	objptr, ##27160
03b6c     F2 34 02 AB |  if_e	rdlong	local12, objptr
03b70     35 00 00 AF 
03b74     18 E4 85 A1 |  if_e	sub	objptr, ##27160
03b78     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
03b7c     7C 00 90 5D |  if_ne	jmp	#LR__0194
03b80     51 00 00 FF 
03b84     C0 E5 05 F1 | 	add	objptr, ##41920
03b88     F2 12 02 FB | 	rdlong	arg01, objptr
03b8c     1A 00 00 FF 
03b90     9C E5 85 F1 | 	sub	objptr, ##13724
03b94     F2 16 02 FB | 	rdlong	arg03, objptr
03b98     37 00 00 FF 
03b9c     24 E4 85 F1 | 	sub	objptr, ##28196
03ba0     00 14 06 F6 | 	mov	arg02, #0
03ba4     C0 3E B0 FD | 	call	#_compile_assign
03ba8                 | '   compile_assign(linenum,0,cont) 
03ba8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
03ba8     51 00 00 FF 
03bac     F4 E5 05 F1 | 	add	objptr, ##41972
03bb0     F2 12 02 FB | 	rdlong	arg01, objptr
03bb4     51 00 00 FF 
03bb8     F4 E5 85 F1 | 	sub	objptr, ##41972
03bbc     81 01 00 FF 
03bc0     9E 15 06 F6 | 	mov	arg02, ##@LR__5110
03bc4     7C CE B1 FD | 	call	#__system___string_cmp
03bc8     00 FA 4D F2 | 	cmps	result1, #0 wz
03bcc     2C 00 90 AD |  if_e	jmp	#LR__0193
03bd0     51 00 00 FF 
03bd4     F4 E5 05 F1 | 	add	objptr, ##41972
03bd8     F2 24 02 FB | 	rdlong	local04, objptr
03bdc     1A 00 00 FF 
03be0     D8 E5 85 F1 | 	sub	objptr, ##13784
03be4     F2 24 62 FC | 	wrlong	local04, objptr
03be8     08 E4 05 F1 | 	add	objptr, #8
03bec     F2 08 68 FC | 	wrlong	#4, objptr
03bf0     37 00 00 FF 
03bf4     24 E4 85 F1 | 	sub	objptr, ##28196
03bf8     E8 DA 9F FD | 	jmp	#LR__0070
03bfc                 | LR__0193
03bfc                 | LR__0194
03bfc                 | LR__0195
03bfc                 | ' 
03bfc                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
03bfc     51 00 00 FF 
03c00     C0 E5 05 F1 | 	add	objptr, ##41920
03c04     F2 24 0A FB | 	rdlong	local04, objptr wz
03c08     51 00 00 FF 
03c0c     C0 E5 85 F1 | 	sub	objptr, ##41920
03c10     28 00 90 5D |  if_ne	jmp	#LR__0197
03c14     02 12 06 F6 | 	mov	arg01, #2
03c18     38 7D B0 FD | 	call	#_execute_line
03c1c                 | LR__0196
03c1c     81 01 00 FF 
03c20     9F 13 06 F6 | 	mov	arg01, ##@LR__5111
03c24                 | ' 
03c24                 | ' write(text)
03c24     D8 B8 B1 FD | 	call	#_hg010b_spin2_write
03c28                 | ' crlf
03c28     D4 BD B1 FD | 	call	#_hg010b_spin2_crlf
03c2c     81 01 00 FF 
03c30     A0 13 06 F6 | 	mov	arg01, ##@LR__5112
03c34                 | ' 
03c34                 | ' write(text)
03c34     C8 B8 B1 FD | 	call	#_hg010b_spin2_write
03c38                 | ' crlf
03c38     C4 BD B1 FD | 	call	#_hg010b_spin2_crlf
03c3c                 | LR__0197
03c3c     A7 F0 03 F6 | 	mov	ptra, fp
03c40     B2 00 A0 FD | 	call	#popregs_
03c44                 | _interpret_ret
03c44     2D 00 64 FD | 	ret
03c48                 | 
03c48                 | ' 
03c48                 | ' '---------------------------------------------------------------------------------------------------------------------
03c48                 | ' '
03c48                 | ' '                          END OF TOKENIZER MAIN CODE
03c48                 | ' '
03c48                 | ' '---------------------------------------------------------------------------------------------------------------------
03c48                 | ' 
03c48                 | ' '---------------------------------------------------------------------------------------------------------------------
03c48                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
03c48                 | ' '---------------------------------------------------------------------------------------------------------------------
03c48                 | ' 
03c48                 | ' ' Check if the part is an operator, return a token or 0 if not found
03c48                 | ' 
03c48                 | ' function isoperator(s as string) as ubyte
03c48                 | _isoperator
03c48     01 4A 05 F6 | 	mov	COUNT_, #1
03c4c     A8 00 A0 FD | 	call	#pushregs_
03c50                 | ' 
03c50                 | ' select case s
03c50     09 1F 02 F6 | 	mov	local01, arg01
03c54     81 01 00 FF 
03c58     A6 15 06 F6 | 	mov	arg02, ##@LR__5113
03c5c     0F 13 02 F6 | 	mov	arg01, local01
03c60     E0 CD B1 FD | 	call	#__system___string_cmp
03c64     00 FA 0D F2 | 	cmp	result1, #0 wz
03c68     FC 01 90 AD |  if_e	jmp	#LR__0200
03c6c     81 01 00 FF 
03c70     A8 15 06 F6 | 	mov	arg02, ##@LR__5114
03c74     0F 13 02 F6 | 	mov	arg01, local01
03c78     C8 CD B1 FD | 	call	#__system___string_cmp
03c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c80     EC 01 90 AD |  if_e	jmp	#LR__0201
03c84     81 01 00 FF 
03c88     AA 15 06 F6 | 	mov	arg02, ##@LR__5115
03c8c     0F 13 02 F6 | 	mov	arg01, local01
03c90     B0 CD B1 FD | 	call	#__system___string_cmp
03c94     00 FA 0D F2 | 	cmp	result1, #0 wz
03c98     DC 01 90 AD |  if_e	jmp	#LR__0202
03c9c     81 01 00 FF 
03ca0     AD 15 06 F6 | 	mov	arg02, ##@LR__5116
03ca4     0F 13 02 F6 | 	mov	arg01, local01
03ca8     98 CD B1 FD | 	call	#__system___string_cmp
03cac     00 FA 0D F2 | 	cmp	result1, #0 wz
03cb0     CC 01 90 AD |  if_e	jmp	#LR__0203
03cb4     81 01 00 FF 
03cb8     B1 15 06 F6 | 	mov	arg02, ##@LR__5117
03cbc     0F 13 02 F6 | 	mov	arg01, local01
03cc0     80 CD B1 FD | 	call	#__system___string_cmp
03cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc8     BC 01 90 AD |  if_e	jmp	#LR__0204
03ccc     81 01 00 FF 
03cd0     B3 15 06 F6 | 	mov	arg02, ##@LR__5118
03cd4     0F 13 02 F6 | 	mov	arg01, local01
03cd8     68 CD B1 FD | 	call	#__system___string_cmp
03cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ce0     AC 01 90 AD |  if_e	jmp	#LR__0205
03ce4     81 01 00 FF 
03ce8     B5 15 06 F6 | 	mov	arg02, ##@LR__5119
03cec     0F 13 02 F6 | 	mov	arg01, local01
03cf0     50 CD B1 FD | 	call	#__system___string_cmp
03cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cf8     9C 01 90 AD |  if_e	jmp	#LR__0206
03cfc     81 01 00 FF 
03d00     B9 15 06 F6 | 	mov	arg02, ##@LR__5120
03d04     0F 13 02 F6 | 	mov	arg01, local01
03d08     38 CD B1 FD | 	call	#__system___string_cmp
03d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d10     8C 01 90 AD |  if_e	jmp	#LR__0207
03d14     81 01 00 FF 
03d18     BD 15 06 F6 | 	mov	arg02, ##@LR__5121
03d1c     0F 13 02 F6 | 	mov	arg01, local01
03d20     20 CD B1 FD | 	call	#__system___string_cmp
03d24     00 FA 0D F2 | 	cmp	result1, #0 wz
03d28     7C 01 90 AD |  if_e	jmp	#LR__0208
03d2c     81 01 00 FF 
03d30     C1 15 06 F6 | 	mov	arg02, ##@LR__5122
03d34     0F 13 02 F6 | 	mov	arg01, local01
03d38     08 CD B1 FD | 	call	#__system___string_cmp
03d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d40     6C 01 90 AD |  if_e	jmp	#LR__0209
03d44     81 01 00 FF 
03d48     C5 15 06 F6 | 	mov	arg02, ##@LR__5123
03d4c     0F 13 02 F6 | 	mov	arg01, local01
03d50     F0 CC B1 FD | 	call	#__system___string_cmp
03d54     00 FA 0D F2 | 	cmp	result1, #0 wz
03d58     5C 01 90 AD |  if_e	jmp	#LR__0210
03d5c     81 01 00 FF 
03d60     C9 15 06 F6 | 	mov	arg02, ##@LR__5124
03d64     0F 13 02 F6 | 	mov	arg01, local01
03d68     D8 CC B1 FD | 	call	#__system___string_cmp
03d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d70     4C 01 90 AD |  if_e	jmp	#LR__0211
03d74     81 01 00 FF 
03d78     CB 15 06 F6 | 	mov	arg02, ##@LR__5125
03d7c     0F 13 02 F6 | 	mov	arg01, local01
03d80     C0 CC B1 FD | 	call	#__system___string_cmp
03d84     00 FA 0D F2 | 	cmp	result1, #0 wz
03d88     3C 01 90 AD |  if_e	jmp	#LR__0212
03d8c     81 01 00 FF 
03d90     CF 15 06 F6 | 	mov	arg02, ##@LR__5126
03d94     0F 13 02 F6 | 	mov	arg01, local01
03d98     A8 CC B1 FD | 	call	#__system___string_cmp
03d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03da0     2C 01 90 AD |  if_e	jmp	#LR__0213
03da4     81 01 00 FF 
03da8     D1 15 06 F6 | 	mov	arg02, ##@LR__5127
03dac     0F 13 02 F6 | 	mov	arg01, local01
03db0     90 CC B1 FD | 	call	#__system___string_cmp
03db4     00 FA 0D F2 | 	cmp	result1, #0 wz
03db8     1C 01 90 AD |  if_e	jmp	#LR__0214
03dbc     81 01 00 FF 
03dc0     D3 15 06 F6 | 	mov	arg02, ##@LR__5128
03dc4     0F 13 02 F6 | 	mov	arg01, local01
03dc8     78 CC B1 FD | 	call	#__system___string_cmp
03dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd0     0C 01 90 AD |  if_e	jmp	#LR__0215
03dd4     81 01 00 FF 
03dd8     D6 15 06 F6 | 	mov	arg02, ##@LR__5129
03ddc     0F 13 02 F6 | 	mov	arg01, local01
03de0     60 CC B1 FD | 	call	#__system___string_cmp
03de4     00 FA 0D F2 | 	cmp	result1, #0 wz
03de8     FC 00 90 AD |  if_e	jmp	#LR__0216
03dec     81 01 00 FF 
03df0     D9 15 06 F6 | 	mov	arg02, ##@LR__5130
03df4     0F 13 02 F6 | 	mov	arg01, local01
03df8     48 CC B1 FD | 	call	#__system___string_cmp
03dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03e00     EC 00 90 AD |  if_e	jmp	#LR__0217
03e04     81 01 00 FF 
03e08     DB 15 06 F6 | 	mov	arg02, ##@LR__5131
03e0c     0F 13 02 F6 | 	mov	arg01, local01
03e10     30 CC B1 FD | 	call	#__system___string_cmp
03e14     00 FA 0D F2 | 	cmp	result1, #0 wz
03e18     DC 00 90 AD |  if_e	jmp	#LR__0218
03e1c     81 01 00 FF 
03e20     DD 15 06 F6 | 	mov	arg02, ##@LR__5132
03e24     0F 13 02 F6 | 	mov	arg01, local01
03e28     18 CC B1 FD | 	call	#__system___string_cmp
03e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e30     CC 00 90 AD |  if_e	jmp	#LR__0219
03e34     81 01 00 FF 
03e38     E0 15 06 F6 | 	mov	arg02, ##@LR__5133
03e3c     0F 13 02 F6 | 	mov	arg01, local01
03e40     00 CC B1 FD | 	call	#__system___string_cmp
03e44     00 FA 0D F2 | 	cmp	result1, #0 wz
03e48     BC 00 90 AD |  if_e	jmp	#LR__0220
03e4c     81 01 00 FF 
03e50     E3 15 06 F6 | 	mov	arg02, ##@LR__5134
03e54     0F 13 02 F6 | 	mov	arg01, local01
03e58     E8 CB B1 FD | 	call	#__system___string_cmp
03e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e60     AC 00 90 AD |  if_e	jmp	#LR__0221
03e64     B0 00 90 FD | 	jmp	#LR__0222
03e68                 | LR__0200
03e68     01 FA 05 F6 | 	mov	result1, #1
03e6c     AC 00 90 FD | 	jmp	#LR__0223
03e70                 | LR__0201
03e70     02 FA 05 F6 | 	mov	result1, #2
03e74     A4 00 90 FD | 	jmp	#LR__0223
03e78                 | LR__0202
03e78     03 FA 05 F6 | 	mov	result1, #3
03e7c     9C 00 90 FD | 	jmp	#LR__0223
03e80                 | LR__0203
03e80     04 FA 05 F6 | 	mov	result1, #4
03e84     94 00 90 FD | 	jmp	#LR__0223
03e88                 | LR__0204
03e88     05 FA 05 F6 | 	mov	result1, #5
03e8c     8C 00 90 FD | 	jmp	#LR__0223
03e90                 | LR__0205
03e90     06 FA 05 F6 | 	mov	result1, #6
03e94     84 00 90 FD | 	jmp	#LR__0223
03e98                 | LR__0206
03e98     07 FA 05 F6 | 	mov	result1, #7
03e9c     7C 00 90 FD | 	jmp	#LR__0223
03ea0                 | LR__0207
03ea0     08 FA 05 F6 | 	mov	result1, #8
03ea4     74 00 90 FD | 	jmp	#LR__0223
03ea8                 | LR__0208
03ea8     09 FA 05 F6 | 	mov	result1, #9
03eac     6C 00 90 FD | 	jmp	#LR__0223
03eb0                 | LR__0209
03eb0     0A FA 05 F6 | 	mov	result1, #10
03eb4     64 00 90 FD | 	jmp	#LR__0223
03eb8                 | LR__0210
03eb8     0B FA 05 F6 | 	mov	result1, #11
03ebc     5C 00 90 FD | 	jmp	#LR__0223
03ec0                 | LR__0211
03ec0     0C FA 05 F6 | 	mov	result1, #12
03ec4     54 00 90 FD | 	jmp	#LR__0223
03ec8                 | LR__0212
03ec8     0D FA 05 F6 | 	mov	result1, #13
03ecc     4C 00 90 FD | 	jmp	#LR__0223
03ed0                 | LR__0213
03ed0     0E FA 05 F6 | 	mov	result1, #14
03ed4     44 00 90 FD | 	jmp	#LR__0223
03ed8                 | LR__0214
03ed8     1B FA 05 F6 | 	mov	result1, #27
03edc     3C 00 90 FD | 	jmp	#LR__0223
03ee0                 | LR__0215
03ee0     27 FA 05 F6 | 	mov	result1, #39
03ee4     34 00 90 FD | 	jmp	#LR__0223
03ee8                 | LR__0216
03ee8     26 FA 05 F6 | 	mov	result1, #38
03eec     2C 00 90 FD | 	jmp	#LR__0223
03ef0                 | LR__0217
03ef0     10 FA 05 F6 | 	mov	result1, #16
03ef4     24 00 90 FD | 	jmp	#LR__0223
03ef8                 | LR__0218
03ef8     0F FA 05 F6 | 	mov	result1, #15
03efc     1C 00 90 FD | 	jmp	#LR__0223
03f00                 | LR__0219
03f00     2A FA 05 F6 | 	mov	result1, #42
03f04     14 00 90 FD | 	jmp	#LR__0223
03f08                 | LR__0220
03f08     28 FA 05 F6 | 	mov	result1, #40
03f0c     0C 00 90 FD | 	jmp	#LR__0223
03f10                 | LR__0221
03f10     29 FA 05 F6 | 	mov	result1, #41
03f14     04 00 90 FD | 	jmp	#LR__0223
03f18                 | LR__0222
03f18     00 FA 05 F6 | 	mov	result1, #0
03f1c                 | LR__0223
03f1c     A7 F0 03 F6 | 	mov	ptra, fp
03f20     B2 00 A0 FD | 	call	#popregs_
03f24                 | _isoperator_ret
03f24     2D 00 64 FD | 	ret
03f28                 | 
03f28                 | ' 
03f28                 | ' ' Check if the part is a channel#, return a token or 0 if not found
03f28                 | ' 
03f28                 | ' function ischannel(s as string) as ulong
03f28                 | _ischannel
03f28     02 4A 05 F6 | 	mov	COUNT_, #2
03f2c     A8 00 A0 FD | 	call	#pushregs_
03f30                 | ' if left$(s,1)<>"#" then return 0
03f30     09 1F 02 F6 | 	mov	local01, arg01
03f34     01 14 06 F6 | 	mov	arg02, #1
03f38     5C EB B1 FD | 	call	#__system__Left_S
03f3c     FD 12 02 F6 | 	mov	arg01, result1
03f40     81 01 00 FF 
03f44     E6 15 06 F6 | 	mov	arg02, ##@LR__5135
03f48     F8 CA B1 FD | 	call	#__system___string_cmp
03f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f50     00 FA 05 56 |  if_ne	mov	result1, #0
03f54     AC 00 90 5D |  if_ne	jmp	#LR__0234
03f58                 | ' if len(s)<>2 then return 0
03f58     0F 13 02 F6 | 	mov	arg01, local01
03f5c     09 21 02 F6 | 	mov	local02, arg01
03f60     97 06 48 FB | 	callpa	#(@LR__0231-@LR__0230)>>2,fcache_load_ptr_
03f64                 | LR__0230
03f64     10 FB C9 FA | 	rdbyte	result1, local02 wz
03f68     01 20 06 51 |  if_ne	add	local02, #1
03f6c     F4 FF 9F 5D |  if_ne	jmp	#LR__0230
03f70                 | LR__0231
03f70     09 21 82 F1 | 	sub	local02, arg01
03f74     10 FB 01 F6 | 	mov	result1, local02
03f78     02 FA 0D F2 | 	cmp	result1, #2 wz
03f7c     00 FA 05 56 |  if_ne	mov	result1, #0
03f80     80 00 90 5D |  if_ne	jmp	#LR__0234
03f84                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
03f84     0F 13 02 F6 | 	mov	arg01, local01
03f88     01 14 06 F6 | 	mov	arg02, #1
03f8c     90 EB B1 FD | 	call	#__system__Right_S
03f90     FD 12 02 F6 | 	mov	arg01, result1
03f94     81 01 00 FF 
03f98     E8 15 06 F6 | 	mov	arg02, ##@LR__5136
03f9c     A4 CA B1 FD | 	call	#__system___string_cmp
03fa0     00 FA 55 F2 | 	cmps	result1, #0 wc
03fa4     24 00 90 CD |  if_b	jmp	#LR__0232
03fa8     0F 13 02 F6 | 	mov	arg01, local01
03fac     01 14 06 F6 | 	mov	arg02, #1
03fb0     6C EB B1 FD | 	call	#__system__Right_S
03fb4     FD 12 02 F6 | 	mov	arg01, result1
03fb8     81 01 00 FF 
03fbc     EA 15 06 F6 | 	mov	arg02, ##@LR__5137
03fc0     80 CA B1 FD | 	call	#__system___string_cmp
03fc4     01 FA 55 F2 | 	cmps	result1, #1 wc
03fc8     08 00 90 CD |  if_b	jmp	#LR__0233
03fcc                 | LR__0232
03fcc     00 FA 05 F6 | 	mov	result1, #0
03fd0     30 00 90 FD | 	jmp	#LR__0234
03fd4                 | LR__0233
03fd4                 | ' return token_channel+val(right$(s,1))
03fd4     0F 13 02 F6 | 	mov	arg01, local01
03fd8     01 14 06 F6 | 	mov	arg02, #1
03fdc     40 EB B1 FD | 	call	#__system__Right_S
03fe0     FD 12 02 F6 | 	mov	arg01, result1
03fe4     D0 FD B1 FD | 	call	#__system____builtin_atof
03fe8     FD 14 02 F6 | 	mov	arg02, result1
03fec     00 18 21 FF 
03ff0     00 12 06 F6 | 	mov	arg01, ##1110441984
03ff4     08 F2 B1 FD | 	call	#__system___float_add
03ff8     FD 12 02 F6 | 	mov	arg01, result1
03ffc     00 14 06 F6 | 	mov	arg02, #0
04000     94 FA B1 FD | 	call	#__system___float_tointeger
04004                 | LR__0234
04004     A7 F0 03 F6 | 	mov	ptra, fp
04008     B2 00 A0 FD | 	call	#popregs_
0400c                 | _ischannel_ret
0400c     2D 00 64 FD | 	ret
04010                 | 
04010                 | ' 
04010                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
04010                 | ' ' todo: add spin2/pasm constants for pin control
04010                 | ' 
04010                 | ' function isconstant(s as string) as integer
04010                 | _isconstant
04010     01 4A 05 F6 | 	mov	COUNT_, #1
04014     A8 00 A0 FD | 	call	#pushregs_
04018                 | ' 
04018                 | ' select case s
04018     09 1F 02 F6 | 	mov	local01, arg01
0401c     81 01 00 FF 
04020     EC 15 06 F6 | 	mov	arg02, ##@LR__5138
04024     0F 13 02 F6 | 	mov	arg01, local01
04028     18 CA B1 FD | 	call	#__system___string_cmp
0402c     00 FA 0D F2 | 	cmp	result1, #0 wz
04030     34 00 90 AD |  if_e	jmp	#LR__0240
04034     81 01 00 FF 
04038     F2 15 06 F6 | 	mov	arg02, ##@LR__5139
0403c     0F 13 02 F6 | 	mov	arg01, local01
04040     00 CA B1 FD | 	call	#__system___string_cmp
04044     00 FA 0D F2 | 	cmp	result1, #0 wz
04048     24 00 90 AD |  if_e	jmp	#LR__0241
0404c     81 01 00 FF 
04050     F9 15 06 F6 | 	mov	arg02, ##@LR__5140
04054     0F 13 02 F6 | 	mov	arg01, local01
04058     E8 C9 B1 FD | 	call	#__system___string_cmp
0405c     00 FA 0D F2 | 	cmp	result1, #0 wz
04060     14 00 90 AD |  if_e	jmp	#LR__0242
04064     18 00 90 FD | 	jmp	#LR__0243
04068                 | LR__0240
04068     01 FA 05 F6 | 	mov	result1, #1
0406c     14 00 90 FD | 	jmp	#LR__0244
04070                 | LR__0241
04070     02 FA 05 F6 | 	mov	result1, #2
04074     0C 00 90 FD | 	jmp	#LR__0244
04078                 | LR__0242
04078     04 FA 05 F6 | 	mov	result1, #4
0407c     04 00 90 FD | 	jmp	#LR__0244
04080                 | LR__0243
04080     00 FA 05 F6 | 	mov	result1, #0
04084                 | LR__0244
04084     A7 F0 03 F6 | 	mov	ptra, fp
04088     B2 00 A0 FD | 	call	#popregs_
0408c                 | _isconstant_ret
0408c     2D 00 64 FD | 	ret
04090                 | 
04090                 | ' 
04090                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
04090                 | ' 
04090                 | ' function isnotename(s as string) as ulong
04090                 | _isnotename
04090     07 4A 05 F6 | 	mov	COUNT_, #7
04094     A8 00 A0 FD | 	call	#pushregs_
04098                 | ' if left$(s,1)<>"#" then return 0
04098     09 1F 02 F6 | 	mov	local01, arg01
0409c     01 14 06 F6 | 	mov	arg02, #1
040a0     F4 E9 B1 FD | 	call	#__system__Left_S
040a4     FD 12 02 F6 | 	mov	arg01, result1
040a8     82 01 00 FF 
040ac     01 14 06 F6 | 	mov	arg02, ##@LR__5141
040b0     90 C9 B1 FD | 	call	#__system___string_cmp
040b4     00 FA 0D F2 | 	cmp	result1, #0 wz
040b8     00 FA 05 56 |  if_ne	mov	result1, #0
040bc     30 03 90 5D |  if_ne	jmp	#LR__0273
040c0                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
040c0     0F 13 02 F6 | 	mov	arg01, local01
040c4     03 14 06 F6 | 	mov	arg02, #3
040c8     01 16 06 F6 | 	mov	arg03, #1
040cc     E0 EA B1 FD | 	call	#__system__Mid_S
040d0     FD 12 02 F6 | 	mov	arg01, result1
040d4     82 01 00 FF 
040d8     03 14 06 F6 | 	mov	arg02, ##@LR__5142
040dc     64 C9 B1 FD | 	call	#__system___string_cmp
040e0     00 FA 0D F2 | 	cmp	result1, #0 wz
040e4     18 00 90 5D |  if_ne	jmp	#LR__0250
040e8     0F 13 02 F6 | 	mov	arg01, local01
040ec     02 14 06 F6 | 	mov	arg02, #2
040f0     02 16 06 F6 | 	mov	arg03, #2
040f4     B8 EA B1 FD | 	call	#__system__Mid_S
040f8     FD 20 02 F6 | 	mov	local02, result1
040fc     14 00 90 FD | 	jmp	#LR__0251
04100                 | LR__0250
04100     0F 13 02 F6 | 	mov	arg01, local01
04104     02 14 06 F6 | 	mov	arg02, #2
04108     01 16 06 F6 | 	mov	arg03, #1
0410c     A0 EA B1 FD | 	call	#__system__Mid_S
04110     FD 20 02 F6 | 	mov	local02, result1
04114                 | LR__0251
04114                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
04114     0F 13 02 F6 | 	mov	arg01, local01
04118     09 23 02 F6 | 	mov	local03, arg01
0411c     97 06 48 FB | 	callpa	#(@LR__0253-@LR__0252)>>2,fcache_load_ptr_
04120                 | LR__0252
04120     11 FB C9 FA | 	rdbyte	result1, local03 wz
04124     01 22 06 51 |  if_ne	add	local03, #1
04128     F4 FF 9F 5D |  if_ne	jmp	#LR__0252
0412c                 | LR__0253
0412c     09 23 82 F1 | 	sub	local03, arg01
04130     11 15 02 F6 | 	mov	arg02, local03
04134     01 14 86 F1 | 	sub	arg02, #1
04138     0F 13 02 F6 | 	mov	arg01, local01
0413c     01 16 06 F6 | 	mov	arg03, #1
04140     6C EA B1 FD | 	call	#__system__Mid_S
04144     FD 12 02 F6 | 	mov	arg01, result1
04148     82 01 00 FF 
0414c     05 14 06 F6 | 	mov	arg02, ##@LR__5143
04150     F0 C8 B1 FD | 	call	#__system___string_cmp
04154     00 FA 0D F2 | 	cmp	result1, #0 wz
04158     28 00 90 AD |  if_e	jmp	#LR__0254
0415c     0F 13 02 F6 | 	mov	arg01, local01
04160     01 14 06 F6 | 	mov	arg02, #1
04164     B8 E9 B1 FD | 	call	#__system__Right_S
04168     FD 12 02 F6 | 	mov	arg01, result1
0416c     48 FC B1 FD | 	call	#__system____builtin_atof
04170     FD 12 02 F6 | 	mov	arg01, result1
04174     00 14 06 F6 | 	mov	arg02, #0
04178     1C F9 B1 FD | 	call	#__system___float_tointeger
0417c     FD 24 02 F6 | 	mov	local04, result1
04180     34 00 90 FD | 	jmp	#LR__0255
04184                 | LR__0254
04184     0F 13 02 F6 | 	mov	arg01, local01
04188     01 14 06 F6 | 	mov	arg02, #1
0418c     90 E9 B1 FD | 	call	#__system__Right_S
04190     FD 12 02 F6 | 	mov	arg01, result1
04194     20 FC B1 FD | 	call	#__system____builtin_atof
04198     FD 14 02 F6 | 	mov	arg02, result1
0419c     00 C0 5F FF 
041a0     00 12 06 F6 | 	mov	arg01, ##-1082130432
041a4     28 F4 B1 FD | 	call	#__system___float_mul
041a8     FD 12 02 F6 | 	mov	arg01, result1
041ac     00 14 06 F6 | 	mov	arg02, #0
041b0     E4 F8 B1 FD | 	call	#__system___float_tointeger
041b4     FD 24 02 F6 | 	mov	local04, result1
041b8                 | LR__0255
041b8                 | ' 
041b8                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
041b8     00 24 0E F2 | 	cmp	local04, #0 wz
041bc     24 00 90 5D |  if_ne	jmp	#LR__0256
041c0     0F 13 02 F6 | 	mov	arg01, local01
041c4     01 14 06 F6 | 	mov	arg02, #1
041c8     54 E9 B1 FD | 	call	#__system__Right_S
041cc     FD 12 02 F6 | 	mov	arg01, result1
041d0     82 01 00 FF 
041d4     07 14 06 F6 | 	mov	arg02, ##@LR__5144
041d8     68 C8 B1 FD | 	call	#__system___string_cmp
041dc     00 FA 0D F2 | 	cmp	result1, #0 wz
041e0     04 24 06 56 |  if_ne	mov	local04, #4
041e4                 | LR__0256
041e4                 | ' 
041e4                 | ' select case s1
041e4     10 27 02 F6 | 	mov	local05, local02
041e8     82 01 00 FF 
041ec     09 14 06 F6 | 	mov	arg02, ##@LR__5145
041f0     13 13 02 F6 | 	mov	arg01, local05
041f4     4C C8 B1 FD | 	call	#__system___string_cmp
041f8     00 FA 0D F2 | 	cmp	result1, #0 wz
041fc     24 01 90 AD |  if_e	jmp	#LR__0257
04200     82 01 00 FF 
04204     0B 14 06 F6 | 	mov	arg02, ##@LR__5146
04208     13 13 02 F6 | 	mov	arg01, local05
0420c     34 C8 B1 FD | 	call	#__system___string_cmp
04210     00 FA 0D F2 | 	cmp	result1, #0 wz
04214     18 01 90 AD |  if_e	jmp	#LR__0258
04218     82 01 00 FF 
0421c     0E 14 06 F6 | 	mov	arg02, ##@LR__5147
04220     13 13 02 F6 | 	mov	arg01, local05
04224     1C C8 B1 FD | 	call	#__system___string_cmp
04228     00 FA 0D F2 | 	cmp	result1, #0 wz
0422c     0C 01 90 AD |  if_e	jmp	#LR__0259
04230     82 01 00 FF 
04234     10 14 06 F6 | 	mov	arg02, ##@LR__5148
04238     13 13 02 F6 | 	mov	arg01, local05
0423c     04 C8 B1 FD | 	call	#__system___string_cmp
04240     00 FA 0D F2 | 	cmp	result1, #0 wz
04244     00 01 90 AD |  if_e	jmp	#LR__0260
04248     82 01 00 FF 
0424c     13 14 06 F6 | 	mov	arg02, ##@LR__5149
04250     13 13 02 F6 | 	mov	arg01, local05
04254     EC C7 B1 FD | 	call	#__system___string_cmp
04258     00 FA 0D F2 | 	cmp	result1, #0 wz
0425c     F4 00 90 AD |  if_e	jmp	#LR__0261
04260     82 01 00 FF 
04264     15 14 06 F6 | 	mov	arg02, ##@LR__5150
04268     13 13 02 F6 | 	mov	arg01, local05
0426c     D4 C7 B1 FD | 	call	#__system___string_cmp
04270     00 FA 0D F2 | 	cmp	result1, #0 wz
04274     E8 00 90 AD |  if_e	jmp	#LR__0262
04278     82 01 00 FF 
0427c     17 14 06 F6 | 	mov	arg02, ##@LR__5151
04280     13 13 02 F6 | 	mov	arg01, local05
04284     BC C7 B1 FD | 	call	#__system___string_cmp
04288     00 FA 0D F2 | 	cmp	result1, #0 wz
0428c     DC 00 90 AD |  if_e	jmp	#LR__0263
04290     82 01 00 FF 
04294     1A 14 06 F6 | 	mov	arg02, ##@LR__5152
04298     13 13 02 F6 | 	mov	arg01, local05
0429c     A4 C7 B1 FD | 	call	#__system___string_cmp
042a0     00 FA 0D F2 | 	cmp	result1, #0 wz
042a4     D0 00 90 AD |  if_e	jmp	#LR__0264
042a8     82 01 00 FF 
042ac     1C 14 06 F6 | 	mov	arg02, ##@LR__5153
042b0     13 13 02 F6 | 	mov	arg01, local05
042b4     8C C7 B1 FD | 	call	#__system___string_cmp
042b8     00 FA 0D F2 | 	cmp	result1, #0 wz
042bc     C4 00 90 AD |  if_e	jmp	#LR__0265
042c0     82 01 00 FF 
042c4     1F 14 06 F6 | 	mov	arg02, ##@LR__5154
042c8     13 13 02 F6 | 	mov	arg01, local05
042cc     74 C7 B1 FD | 	call	#__system___string_cmp
042d0     00 FA 0D F2 | 	cmp	result1, #0 wz
042d4     B8 00 90 AD |  if_e	jmp	#LR__0266
042d8     82 01 00 FF 
042dc     21 14 06 F6 | 	mov	arg02, ##@LR__5155
042e0     13 13 02 F6 | 	mov	arg01, local05
042e4     5C C7 B1 FD | 	call	#__system___string_cmp
042e8     00 FA 0D F2 | 	cmp	result1, #0 wz
042ec     AC 00 90 AD |  if_e	jmp	#LR__0267
042f0     82 01 00 FF 
042f4     24 14 06 F6 | 	mov	arg02, ##@LR__5156
042f8     13 13 02 F6 | 	mov	arg01, local05
042fc     44 C7 B1 FD | 	call	#__system___string_cmp
04300     00 FA 0D F2 | 	cmp	result1, #0 wz
04304     A0 00 90 AD |  if_e	jmp	#LR__0268
04308     82 01 00 FF 
0430c     26 14 06 F6 | 	mov	arg02, ##@LR__5157
04310     13 13 02 F6 | 	mov	arg01, local05
04314     2C C7 B1 FD | 	call	#__system___string_cmp
04318     00 FA 0D F2 | 	cmp	result1, #0 wz
0431c     94 00 90 AD |  if_e	jmp	#LR__0269
04320     9C 00 90 FD | 	jmp	#LR__0270
04324                 | LR__0257
04324     01 00 00 FF 
04328     00 29 06 F6 | 	mov	local06, ##768
0432c     98 00 90 FD | 	jmp	#LR__0271
04330                 | LR__0258
04330     01 00 00 FF 
04334     01 29 06 F6 | 	mov	local06, ##769
04338     8C 00 90 FD | 	jmp	#LR__0271
0433c                 | LR__0259
0433c     01 00 00 FF 
04340     02 29 06 F6 | 	mov	local06, ##770
04344     80 00 90 FD | 	jmp	#LR__0271
04348                 | LR__0260
04348     01 00 00 FF 
0434c     03 29 06 F6 | 	mov	local06, ##771
04350     74 00 90 FD | 	jmp	#LR__0271
04354                 | LR__0261
04354     01 00 00 FF 
04358     04 29 06 F6 | 	mov	local06, ##772
0435c     68 00 90 FD | 	jmp	#LR__0271
04360                 | LR__0262
04360     01 00 00 FF 
04364     05 29 06 F6 | 	mov	local06, ##773
04368     5C 00 90 FD | 	jmp	#LR__0271
0436c                 | LR__0263
0436c     01 00 00 FF 
04370     06 29 06 F6 | 	mov	local06, ##774
04374     50 00 90 FD | 	jmp	#LR__0271
04378                 | LR__0264
04378     01 00 00 FF 
0437c     07 29 06 F6 | 	mov	local06, ##775
04380     44 00 90 FD | 	jmp	#LR__0271
04384                 | LR__0265
04384     01 00 00 FF 
04388     08 29 06 F6 | 	mov	local06, ##776
0438c     38 00 90 FD | 	jmp	#LR__0271
04390                 | LR__0266
04390     01 00 00 FF 
04394     09 29 06 F6 | 	mov	local06, ##777
04398     2C 00 90 FD | 	jmp	#LR__0271
0439c                 | LR__0267
0439c     01 00 00 FF 
043a0     0A 29 06 F6 | 	mov	local06, ##778
043a4     20 00 90 FD | 	jmp	#LR__0271
043a8                 | LR__0268
043a8     01 00 00 FF 
043ac     0B 29 06 F6 | 	mov	local06, ##779
043b0     14 00 90 FD | 	jmp	#LR__0271
043b4                 | LR__0269
043b4     01 00 00 FF 
043b8     0B 29 06 F6 | 	mov	local06, ##779
043bc     08 00 90 FD | 	jmp	#LR__0271
043c0                 | LR__0270
043c0     00 FA 05 F6 | 	mov	result1, #0
043c4     28 00 90 FD | 	jmp	#LR__0273
043c8                 | LR__0271
043c8                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
043c8     FF FF 7F FF 
043cc     FF 25 56 F2 | 	cmps	local04, ##-1 wc
043d0     18 00 90 CD |  if_b	jmp	#LR__0272
043d4     0A 24 56 F2 | 	cmps	local04, #10 wc
043d8     12 2B 02 C6 |  if_b	mov	local07, local04
043dc     01 2A 66 C0 |  if_b	shl	local07, #1
043e0     12 2B 02 C1 |  if_b	add	local07, local04
043e4     02 2A 66 C0 |  if_b	shl	local07, #2
043e8     15 29 02 C1 |  if_b	add	local06, local07
043ec                 | LR__0272
043ec                 | ' return token
043ec     14 FB 01 F6 | 	mov	result1, local06
043f0                 | LR__0273
043f0     A7 F0 03 F6 | 	mov	ptra, fp
043f4     B2 00 A0 FD | 	call	#popregs_
043f8                 | _isnotename_ret
043f8     2D 00 64 FD | 	ret
043fc                 | 
043fc                 | ' 
043fc                 | ' ' Check if the part is a separator, return a token or 0 if not found
043fc                 | ' 
043fc                 | ' function isseparator(s as string) as ubyte
043fc                 | _isseparator
043fc     01 4A 05 F6 | 	mov	COUNT_, #1
04400     A8 00 A0 FD | 	call	#pushregs_
04404                 | ' 
04404                 | ' select case s
04404     09 1F 02 F6 | 	mov	local01, arg01
04408     82 01 00 FF 
0440c     28 14 06 F6 | 	mov	arg02, ##@LR__5158
04410     0F 13 02 F6 | 	mov	arg01, local01
04414     2C C6 B1 FD | 	call	#__system___string_cmp
04418     00 FA 0D F2 | 	cmp	result1, #0 wz
0441c     54 01 90 AD |  if_e	jmp	#LR__0280
04420     82 01 00 FF 
04424     2A 14 06 F6 | 	mov	arg02, ##@LR__5159
04428     0F 13 02 F6 | 	mov	arg01, local01
0442c     14 C6 B1 FD | 	call	#__system___string_cmp
04430     00 FA 0D F2 | 	cmp	result1, #0 wz
04434     44 01 90 AD |  if_e	jmp	#LR__0281
04438     82 01 00 FF 
0443c     2C 14 06 F6 | 	mov	arg02, ##@LR__5160
04440     0F 13 02 F6 | 	mov	arg01, local01
04444     FC C5 B1 FD | 	call	#__system___string_cmp
04448     00 FA 0D F2 | 	cmp	result1, #0 wz
0444c     34 01 90 AD |  if_e	jmp	#LR__0282
04450     82 01 00 FF 
04454     2E 14 06 F6 | 	mov	arg02, ##@LR__5161
04458     0F 13 02 F6 | 	mov	arg01, local01
0445c     E4 C5 B1 FD | 	call	#__system___string_cmp
04460     00 FA 0D F2 | 	cmp	result1, #0 wz
04464     24 01 90 AD |  if_e	jmp	#LR__0283
04468     82 01 00 FF 
0446c     30 14 06 F6 | 	mov	arg02, ##@LR__5162
04470     0F 13 02 F6 | 	mov	arg01, local01
04474     CC C5 B1 FD | 	call	#__system___string_cmp
04478     00 FA 0D F2 | 	cmp	result1, #0 wz
0447c     14 01 90 AD |  if_e	jmp	#LR__0284
04480     82 01 00 FF 
04484     32 14 06 F6 | 	mov	arg02, ##@LR__5163
04488     0F 13 02 F6 | 	mov	arg01, local01
0448c     B4 C5 B1 FD | 	call	#__system___string_cmp
04490     00 FA 0D F2 | 	cmp	result1, #0 wz
04494     04 01 90 AD |  if_e	jmp	#LR__0285
04498     82 01 00 FF 
0449c     34 14 06 F6 | 	mov	arg02, ##@LR__5164
044a0     0F 13 02 F6 | 	mov	arg01, local01
044a4     9C C5 B1 FD | 	call	#__system___string_cmp
044a8     00 FA 0D F2 | 	cmp	result1, #0 wz
044ac     F4 00 90 AD |  if_e	jmp	#LR__0286
044b0     82 01 00 FF 
044b4     36 14 06 F6 | 	mov	arg02, ##@LR__5165
044b8     0F 13 02 F6 | 	mov	arg01, local01
044bc     84 C5 B1 FD | 	call	#__system___string_cmp
044c0     00 FA 0D F2 | 	cmp	result1, #0 wz
044c4     E4 00 90 AD |  if_e	jmp	#LR__0287
044c8     82 01 00 FF 
044cc     38 14 06 F6 | 	mov	arg02, ##@LR__5166
044d0     0F 13 02 F6 | 	mov	arg01, local01
044d4     6C C5 B1 FD | 	call	#__system___string_cmp
044d8     00 FA 0D F2 | 	cmp	result1, #0 wz
044dc     D4 00 90 AD |  if_e	jmp	#LR__0288
044e0     82 01 00 FF 
044e4     3A 14 06 F6 | 	mov	arg02, ##@LR__5167
044e8     0F 13 02 F6 | 	mov	arg01, local01
044ec     54 C5 B1 FD | 	call	#__system___string_cmp
044f0     00 FA 0D F2 | 	cmp	result1, #0 wz
044f4     C4 00 90 AD |  if_e	jmp	#LR__0289
044f8     82 01 00 FF 
044fc     3C 14 06 F6 | 	mov	arg02, ##@LR__5168
04500     0F 13 02 F6 | 	mov	arg01, local01
04504     3C C5 B1 FD | 	call	#__system___string_cmp
04508     00 FA 0D F2 | 	cmp	result1, #0 wz
0450c     B4 00 90 AD |  if_e	jmp	#LR__0290
04510     82 01 00 FF 
04514     3E 14 06 F6 | 	mov	arg02, ##@LR__5169
04518     0F 13 02 F6 | 	mov	arg01, local01
0451c     24 C5 B1 FD | 	call	#__system___string_cmp
04520     00 FA 0D F2 | 	cmp	result1, #0 wz
04524     A4 00 90 AD |  if_e	jmp	#LR__0291
04528     82 01 00 FF 
0452c     40 14 06 F6 | 	mov	arg02, ##@LR__5170
04530     0F 13 02 F6 | 	mov	arg01, local01
04534     0C C5 B1 FD | 	call	#__system___string_cmp
04538     00 FA 0D F2 | 	cmp	result1, #0 wz
0453c     94 00 90 AD |  if_e	jmp	#LR__0292
04540     82 01 00 FF 
04544     42 14 06 F6 | 	mov	arg02, ##@LR__5171
04548     0F 13 02 F6 | 	mov	arg01, local01
0454c     F4 C4 B1 FD | 	call	#__system___string_cmp
04550     00 FA 0D F2 | 	cmp	result1, #0 wz
04554     84 00 90 AD |  if_e	jmp	#LR__0293
04558     82 01 00 FF 
0455c     44 14 06 F6 | 	mov	arg02, ##@LR__5172
04560     0F 13 02 F6 | 	mov	arg01, local01
04564     DC C4 B1 FD | 	call	#__system___string_cmp
04568     00 FA 0D F2 | 	cmp	result1, #0 wz
0456c     74 00 90 AD |  if_e	jmp	#LR__0294
04570     78 00 90 FD | 	jmp	#LR__0295
04574                 | LR__0280
04574     01 FA 05 F6 | 	mov	result1, #1
04578     74 00 90 FD | 	jmp	#LR__0296
0457c                 | LR__0281
0457c     02 FA 05 F6 | 	mov	result1, #2
04580     6C 00 90 FD | 	jmp	#LR__0296
04584                 | LR__0282
04584     1B FA 05 F6 | 	mov	result1, #27
04588     64 00 90 FD | 	jmp	#LR__0296
0458c                 | LR__0283
0458c     11 FA 05 F6 | 	mov	result1, #17
04590     5C 00 90 FD | 	jmp	#LR__0296
04594                 | LR__0284
04594     05 FA 05 F6 | 	mov	result1, #5
04598     54 00 90 FD | 	jmp	#LR__0296
0459c                 | LR__0285
0459c     06 FA 05 F6 | 	mov	result1, #6
045a0     4C 00 90 FD | 	jmp	#LR__0296
045a4                 | LR__0286
045a4     12 FA 05 F6 | 	mov	result1, #18
045a8     44 00 90 FD | 	jmp	#LR__0296
045ac                 | LR__0287
045ac     13 FA 05 F6 | 	mov	result1, #19
045b0     3C 00 90 FD | 	jmp	#LR__0296
045b4                 | LR__0288
045b4     0C FA 05 F6 | 	mov	result1, #12
045b8     34 00 90 FD | 	jmp	#LR__0296
045bc                 | LR__0289
045bc     14 FA 05 F6 | 	mov	result1, #20
045c0     2C 00 90 FD | 	jmp	#LR__0296
045c4                 | LR__0290
045c4     15 FA 05 F6 | 	mov	result1, #21
045c8     24 00 90 FD | 	jmp	#LR__0296
045cc                 | LR__0291
045cc     16 FA 05 F6 | 	mov	result1, #22
045d0     1C 00 90 FD | 	jmp	#LR__0296
045d4                 | LR__0292
045d4     FF FB 05 F6 | 	mov	result1, #511
045d8     14 00 90 FD | 	jmp	#LR__0296
045dc                 | LR__0293
045dc     0F FA 05 F6 | 	mov	result1, #15
045e0     0C 00 90 FD | 	jmp	#LR__0296
045e4                 | LR__0294
045e4     10 FA 05 F6 | 	mov	result1, #16
045e8     04 00 90 FD | 	jmp	#LR__0296
045ec                 | LR__0295
045ec     00 FA 05 F6 | 	mov	result1, #0
045f0                 | LR__0296
045f0     A7 F0 03 F6 | 	mov	ptra, fp
045f4     B2 00 A0 FD | 	call	#popregs_
045f8                 | _isseparator_ret
045f8     2D 00 64 FD | 	ret
045fc                 | 
045fc                 | ' 
045fc                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
045fc                 | ' 
045fc                 | ' function iscommand(s as string) as ubyte
045fc                 | _iscommand
045fc     01 4A 05 F6 | 	mov	COUNT_, #1
04600     A8 00 A0 FD | 	call	#pushregs_
04604                 | ' 
04604                 | ' select case s
04604     09 1F 02 F6 | 	mov	local01, arg01
04608     82 01 00 FF 
0460c     48 14 06 F6 | 	mov	arg02, ##@LR__5174
04610     0F 13 02 F6 | 	mov	arg01, local01
04614     2C C4 B1 FD | 	call	#__system___string_cmp
04618     00 FA 0D F2 | 	cmp	result1, #0 wz
0461c     44 0B 90 AD |  if_e	jmp	#LR__0300
04620     82 01 00 FF 
04624     4D 14 06 F6 | 	mov	arg02, ##@LR__5175
04628     0F 13 02 F6 | 	mov	arg01, local01
0462c     14 C4 B1 FD | 	call	#__system___string_cmp
04630     00 FA 0D F2 | 	cmp	result1, #0 wz
04634     34 0B 90 AD |  if_e	jmp	#LR__0301
04638     82 01 00 FF 
0463c     50 14 06 F6 | 	mov	arg02, ##@LR__5176
04640     0F 13 02 F6 | 	mov	arg01, local01
04644     FC C3 B1 FD | 	call	#__system___string_cmp
04648     00 FA 0D F2 | 	cmp	result1, #0 wz
0464c     24 0B 90 AD |  if_e	jmp	#LR__0302
04650     82 01 00 FF 
04654     54 14 06 F6 | 	mov	arg02, ##@LR__5177
04658     0F 13 02 F6 | 	mov	arg01, local01
0465c     E4 C3 B1 FD | 	call	#__system___string_cmp
04660     00 FA 0D F2 | 	cmp	result1, #0 wz
04664     14 0B 90 AD |  if_e	jmp	#LR__0303
04668     82 01 00 FF 
0466c     59 14 06 F6 | 	mov	arg02, ##@LR__5178
04670     0F 13 02 F6 | 	mov	arg01, local01
04674     CC C3 B1 FD | 	call	#__system___string_cmp
04678     00 FA 0D F2 | 	cmp	result1, #0 wz
0467c     04 0B 90 AD |  if_e	jmp	#LR__0304
04680     82 01 00 FF 
04684     5D 14 06 F6 | 	mov	arg02, ##@LR__5179
04688     0F 13 02 F6 | 	mov	arg01, local01
0468c     B4 C3 B1 FD | 	call	#__system___string_cmp
04690     00 FA 0D F2 | 	cmp	result1, #0 wz
04694     F4 0A 90 AD |  if_e	jmp	#LR__0305
04698     82 01 00 FF 
0469c     68 14 06 F6 | 	mov	arg02, ##@LR__5180
046a0     0F 13 02 F6 | 	mov	arg01, local01
046a4     9C C3 B1 FD | 	call	#__system___string_cmp
046a8     00 FA 0D F2 | 	cmp	result1, #0 wz
046ac     E4 0A 90 AD |  if_e	jmp	#LR__0306
046b0     82 01 00 FF 
046b4     6C 14 06 F6 | 	mov	arg02, ##@LR__5181
046b8     0F 13 02 F6 | 	mov	arg01, local01
046bc     84 C3 B1 FD | 	call	#__system___string_cmp
046c0     00 FA 0D F2 | 	cmp	result1, #0 wz
046c4     D4 0A 90 AD |  if_e	jmp	#LR__0307
046c8     82 01 00 FF 
046cc     76 14 06 F6 | 	mov	arg02, ##@LR__5182
046d0     0F 13 02 F6 | 	mov	arg01, local01
046d4     6C C3 B1 FD | 	call	#__system___string_cmp
046d8     00 FA 0D F2 | 	cmp	result1, #0 wz
046dc     C4 0A 90 AD |  if_e	jmp	#LR__0308
046e0     82 01 00 FF 
046e4     7A 14 06 F6 | 	mov	arg02, ##@LR__5183
046e8     0F 13 02 F6 | 	mov	arg01, local01
046ec     54 C3 B1 FD | 	call	#__system___string_cmp
046f0     00 FA 0D F2 | 	cmp	result1, #0 wz
046f4     B4 0A 90 AD |  if_e	jmp	#LR__0309
046f8     82 01 00 FF 
046fc     84 14 06 F6 | 	mov	arg02, ##@LR__5184
04700     0F 13 02 F6 | 	mov	arg01, local01
04704     3C C3 B1 FD | 	call	#__system___string_cmp
04708     00 FA 0D F2 | 	cmp	result1, #0 wz
0470c     A4 0A 90 AD |  if_e	jmp	#LR__0310
04710     82 01 00 FF 
04714     88 14 06 F6 | 	mov	arg02, ##@LR__5185
04718     0F 13 02 F6 | 	mov	arg01, local01
0471c     24 C3 B1 FD | 	call	#__system___string_cmp
04720     00 FA 0D F2 | 	cmp	result1, #0 wz
04724     94 0A 90 AD |  if_e	jmp	#LR__0311
04728     82 01 00 FF 
0472c     93 14 06 F6 | 	mov	arg02, ##@LR__5186
04730     0F 13 02 F6 | 	mov	arg01, local01
04734     0C C3 B1 FD | 	call	#__system___string_cmp
04738     00 FA 0D F2 | 	cmp	result1, #0 wz
0473c     84 0A 90 AD |  if_e	jmp	#LR__0312
04740     82 01 00 FF 
04744     97 14 06 F6 | 	mov	arg02, ##@LR__5187
04748     0F 13 02 F6 | 	mov	arg01, local01
0474c     F4 C2 B1 FD | 	call	#__system___string_cmp
04750     00 FA 0D F2 | 	cmp	result1, #0 wz
04754     74 0A 90 AD |  if_e	jmp	#LR__0313
04758     82 01 00 FF 
0475c     9E 14 06 F6 | 	mov	arg02, ##@LR__5188
04760     0F 13 02 F6 | 	mov	arg01, local01
04764     DC C2 B1 FD | 	call	#__system___string_cmp
04768     00 FA 0D F2 | 	cmp	result1, #0 wz
0476c     64 0A 90 AD |  if_e	jmp	#LR__0314
04770     82 01 00 FF 
04774     A2 14 06 F6 | 	mov	arg02, ##@LR__5189
04778     0F 13 02 F6 | 	mov	arg01, local01
0477c     C4 C2 B1 FD | 	call	#__system___string_cmp
04780     00 FA 0D F2 | 	cmp	result1, #0 wz
04784     54 0A 90 AD |  if_e	jmp	#LR__0315
04788     82 01 00 FF 
0478c     A8 14 06 F6 | 	mov	arg02, ##@LR__5190
04790     0F 13 02 F6 | 	mov	arg01, local01
04794     AC C2 B1 FD | 	call	#__system___string_cmp
04798     00 FA 0D F2 | 	cmp	result1, #0 wz
0479c     44 0A 90 AD |  if_e	jmp	#LR__0316
047a0     82 01 00 FF 
047a4     AE 14 06 F6 | 	mov	arg02, ##@LR__5191
047a8     0F 13 02 F6 | 	mov	arg01, local01
047ac     94 C2 B1 FD | 	call	#__system___string_cmp
047b0     00 FA 0D F2 | 	cmp	result1, #0 wz
047b4     34 0A 90 AD |  if_e	jmp	#LR__0317
047b8     82 01 00 FF 
047bc     B2 14 06 F6 | 	mov	arg02, ##@LR__5192
047c0     0F 13 02 F6 | 	mov	arg01, local01
047c4     7C C2 B1 FD | 	call	#__system___string_cmp
047c8     00 FA 0D F2 | 	cmp	result1, #0 wz
047cc     24 0A 90 AD |  if_e	jmp	#LR__0318
047d0     82 01 00 FF 
047d4     B8 14 06 F6 | 	mov	arg02, ##@LR__5193
047d8     0F 13 02 F6 | 	mov	arg01, local01
047dc     64 C2 B1 FD | 	call	#__system___string_cmp
047e0     00 FA 0D F2 | 	cmp	result1, #0 wz
047e4     14 0A 90 AD |  if_e	jmp	#LR__0319
047e8     82 01 00 FF 
047ec     BB 14 06 F6 | 	mov	arg02, ##@LR__5194
047f0     0F 13 02 F6 | 	mov	arg01, local01
047f4     4C C2 B1 FD | 	call	#__system___string_cmp
047f8     00 FA 0D F2 | 	cmp	result1, #0 wz
047fc     04 0A 90 AD |  if_e	jmp	#LR__0320
04800     82 01 00 FF 
04804     C1 14 06 F6 | 	mov	arg02, ##@LR__5195
04808     0F 13 02 F6 | 	mov	arg01, local01
0480c     34 C2 B1 FD | 	call	#__system___string_cmp
04810     00 FA 0D F2 | 	cmp	result1, #0 wz
04814     F4 09 90 AD |  if_e	jmp	#LR__0321
04818     82 01 00 FF 
0481c     C5 14 06 F6 | 	mov	arg02, ##@LR__5196
04820     0F 13 02 F6 | 	mov	arg01, local01
04824     1C C2 B1 FD | 	call	#__system___string_cmp
04828     00 FA 0D F2 | 	cmp	result1, #0 wz
0482c     E4 09 90 AD |  if_e	jmp	#LR__0322
04830     82 01 00 FF 
04834     CC 14 06 F6 | 	mov	arg02, ##@LR__5197
04838     0F 13 02 F6 | 	mov	arg01, local01
0483c     04 C2 B1 FD | 	call	#__system___string_cmp
04840     00 FA 0D F2 | 	cmp	result1, #0 wz
04844     D4 09 90 AD |  if_e	jmp	#LR__0323
04848     82 01 00 FF 
0484c     D3 14 06 F6 | 	mov	arg02, ##@LR__5198
04850     0F 13 02 F6 | 	mov	arg01, local01
04854     EC C1 B1 FD | 	call	#__system___string_cmp
04858     00 FA 0D F2 | 	cmp	result1, #0 wz
0485c     C4 09 90 AD |  if_e	jmp	#LR__0324
04860     82 01 00 FF 
04864     DA 14 06 F6 | 	mov	arg02, ##@LR__5199
04868     0F 13 02 F6 | 	mov	arg01, local01
0486c     D4 C1 B1 FD | 	call	#__system___string_cmp
04870     00 FA 0D F2 | 	cmp	result1, #0 wz
04874     B4 09 90 AD |  if_e	jmp	#LR__0325
04878     82 01 00 FF 
0487c     E4 14 06 F6 | 	mov	arg02, ##@LR__5200
04880     0F 13 02 F6 | 	mov	arg01, local01
04884     BC C1 B1 FD | 	call	#__system___string_cmp
04888     00 FA 0D F2 | 	cmp	result1, #0 wz
0488c     A4 09 90 AD |  if_e	jmp	#LR__0326
04890     82 01 00 FF 
04894     E8 14 06 F6 | 	mov	arg02, ##@LR__5201
04898     0F 13 02 F6 | 	mov	arg01, local01
0489c     A4 C1 B1 FD | 	call	#__system___string_cmp
048a0     00 FA 0D F2 | 	cmp	result1, #0 wz
048a4     94 09 90 AD |  if_e	jmp	#LR__0327
048a8     82 01 00 FF 
048ac     EC 14 06 F6 | 	mov	arg02, ##@LR__5202
048b0     0F 13 02 F6 | 	mov	arg01, local01
048b4     8C C1 B1 FD | 	call	#__system___string_cmp
048b8     00 FA 0D F2 | 	cmp	result1, #0 wz
048bc     84 09 90 AD |  if_e	jmp	#LR__0328
048c0     82 01 00 FF 
048c4     F0 14 06 F6 | 	mov	arg02, ##@LR__5203
048c8     0F 13 02 F6 | 	mov	arg01, local01
048cc     74 C1 B1 FD | 	call	#__system___string_cmp
048d0     00 FA 0D F2 | 	cmp	result1, #0 wz
048d4     74 09 90 AD |  if_e	jmp	#LR__0329
048d8     82 01 00 FF 
048dc     F4 14 06 F6 | 	mov	arg02, ##@LR__5204
048e0     0F 13 02 F6 | 	mov	arg01, local01
048e4     5C C1 B1 FD | 	call	#__system___string_cmp
048e8     00 FA 0D F2 | 	cmp	result1, #0 wz
048ec     64 09 90 AD |  if_e	jmp	#LR__0330
048f0     82 01 00 FF 
048f4     FA 14 06 F6 | 	mov	arg02, ##@LR__5205
048f8     0F 13 02 F6 | 	mov	arg01, local01
048fc     44 C1 B1 FD | 	call	#__system___string_cmp
04900     00 FA 0D F2 | 	cmp	result1, #0 wz
04904     54 09 90 AD |  if_e	jmp	#LR__0331
04908     82 01 00 FF 
0490c     FF 14 06 F6 | 	mov	arg02, ##@LR__5206
04910     0F 13 02 F6 | 	mov	arg01, local01
04914     2C C1 B1 FD | 	call	#__system___string_cmp
04918     00 FA 0D F2 | 	cmp	result1, #0 wz
0491c     44 09 90 AD |  if_e	jmp	#LR__0332
04920     82 01 00 FF 
04924     03 15 06 F6 | 	mov	arg02, ##@LR__5207
04928     0F 13 02 F6 | 	mov	arg01, local01
0492c     14 C1 B1 FD | 	call	#__system___string_cmp
04930     00 FA 0D F2 | 	cmp	result1, #0 wz
04934     34 09 90 AD |  if_e	jmp	#LR__0333
04938     82 01 00 FF 
0493c     08 15 06 F6 | 	mov	arg02, ##@LR__5208
04940     0F 13 02 F6 | 	mov	arg01, local01
04944     FC C0 B1 FD | 	call	#__system___string_cmp
04948     00 FA 0D F2 | 	cmp	result1, #0 wz
0494c     24 09 90 AD |  if_e	jmp	#LR__0334
04950     82 01 00 FF 
04954     0C 15 06 F6 | 	mov	arg02, ##@LR__5209
04958     0F 13 02 F6 | 	mov	arg01, local01
0495c     E4 C0 B1 FD | 	call	#__system___string_cmp
04960     00 FA 0D F2 | 	cmp	result1, #0 wz
04964     14 09 90 AD |  if_e	jmp	#LR__0335
04968     82 01 00 FF 
0496c     12 15 06 F6 | 	mov	arg02, ##@LR__5210
04970     0F 13 02 F6 | 	mov	arg01, local01
04974     CC C0 B1 FD | 	call	#__system___string_cmp
04978     00 FA 0D F2 | 	cmp	result1, #0 wz
0497c     04 09 90 AD |  if_e	jmp	#LR__0336
04980     82 01 00 FF 
04984     15 15 06 F6 | 	mov	arg02, ##@LR__5211
04988     0F 13 02 F6 | 	mov	arg01, local01
0498c     B4 C0 B1 FD | 	call	#__system___string_cmp
04990     00 FA 0D F2 | 	cmp	result1, #0 wz
04994     F4 08 90 AD |  if_e	jmp	#LR__0337
04998     82 01 00 FF 
0499c     1D 15 06 F6 | 	mov	arg02, ##@LR__5212
049a0     0F 13 02 F6 | 	mov	arg01, local01
049a4     9C C0 B1 FD | 	call	#__system___string_cmp
049a8     00 FA 0D F2 | 	cmp	result1, #0 wz
049ac     E4 08 90 AD |  if_e	jmp	#LR__0338
049b0     82 01 00 FF 
049b4     21 15 06 F6 | 	mov	arg02, ##@LR__5213
049b8     0F 13 02 F6 | 	mov	arg01, local01
049bc     84 C0 B1 FD | 	call	#__system___string_cmp
049c0     00 FA 0D F2 | 	cmp	result1, #0 wz
049c4     D4 08 90 AD |  if_e	jmp	#LR__0339
049c8     82 01 00 FF 
049cc     26 15 06 F6 | 	mov	arg02, ##@LR__5214
049d0     0F 13 02 F6 | 	mov	arg01, local01
049d4     6C C0 B1 FD | 	call	#__system___string_cmp
049d8     00 FA 0D F2 | 	cmp	result1, #0 wz
049dc     C4 08 90 AD |  if_e	jmp	#LR__0340
049e0     82 01 00 FF 
049e4     2A 15 06 F6 | 	mov	arg02, ##@LR__5215
049e8     0F 13 02 F6 | 	mov	arg01, local01
049ec     54 C0 B1 FD | 	call	#__system___string_cmp
049f0     00 FA 0D F2 | 	cmp	result1, #0 wz
049f4     B4 08 90 AD |  if_e	jmp	#LR__0341
049f8     82 01 00 FF 
049fc     2F 15 06 F6 | 	mov	arg02, ##@LR__5216
04a00     0F 13 02 F6 | 	mov	arg01, local01
04a04     3C C0 B1 FD | 	call	#__system___string_cmp
04a08     00 FA 0D F2 | 	cmp	result1, #0 wz
04a0c     A4 08 90 AD |  if_e	jmp	#LR__0342
04a10     82 01 00 FF 
04a14     33 15 06 F6 | 	mov	arg02, ##@LR__5217
04a18     0F 13 02 F6 | 	mov	arg01, local01
04a1c     24 C0 B1 FD | 	call	#__system___string_cmp
04a20     00 FA 0D F2 | 	cmp	result1, #0 wz
04a24     94 08 90 AD |  if_e	jmp	#LR__0343
04a28     82 01 00 FF 
04a2c     36 15 06 F6 | 	mov	arg02, ##@LR__5218
04a30     0F 13 02 F6 | 	mov	arg01, local01
04a34     0C C0 B1 FD | 	call	#__system___string_cmp
04a38     00 FA 0D F2 | 	cmp	result1, #0 wz
04a3c     84 08 90 AD |  if_e	jmp	#LR__0344
04a40     82 01 00 FF 
04a44     3C 15 06 F6 | 	mov	arg02, ##@LR__5219
04a48     0F 13 02 F6 | 	mov	arg01, local01
04a4c     F4 BF B1 FD | 	call	#__system___string_cmp
04a50     00 FA 0D F2 | 	cmp	result1, #0 wz
04a54     74 08 90 AD |  if_e	jmp	#LR__0345
04a58     82 01 00 FF 
04a5c     40 15 06 F6 | 	mov	arg02, ##@LR__5220
04a60     0F 13 02 F6 | 	mov	arg01, local01
04a64     DC BF B1 FD | 	call	#__system___string_cmp
04a68     00 FA 0D F2 | 	cmp	result1, #0 wz
04a6c     64 08 90 AD |  if_e	jmp	#LR__0346
04a70     82 01 00 FF 
04a74     44 15 06 F6 | 	mov	arg02, ##@LR__5221
04a78     0F 13 02 F6 | 	mov	arg01, local01
04a7c     C4 BF B1 FD | 	call	#__system___string_cmp
04a80     00 FA 0D F2 | 	cmp	result1, #0 wz
04a84     54 08 90 AD |  if_e	jmp	#LR__0347
04a88     82 01 00 FF 
04a8c     4A 15 06 F6 | 	mov	arg02, ##@LR__5222
04a90     0F 13 02 F6 | 	mov	arg01, local01
04a94     AC BF B1 FD | 	call	#__system___string_cmp
04a98     00 FA 0D F2 | 	cmp	result1, #0 wz
04a9c     44 08 90 AD |  if_e	jmp	#LR__0348
04aa0     82 01 00 FF 
04aa4     4F 15 06 F6 | 	mov	arg02, ##@LR__5223
04aa8     0F 13 02 F6 | 	mov	arg01, local01
04aac     94 BF B1 FD | 	call	#__system___string_cmp
04ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab4     34 08 90 AD |  if_e	jmp	#LR__0349
04ab8     82 01 00 FF 
04abc     52 15 06 F6 | 	mov	arg02, ##@LR__5224
04ac0     0F 13 02 F6 | 	mov	arg01, local01
04ac4     7C BF B1 FD | 	call	#__system___string_cmp
04ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
04acc     24 08 90 AD |  if_e	jmp	#LR__0350
04ad0     82 01 00 FF 
04ad4     55 15 06 F6 | 	mov	arg02, ##@LR__5225
04ad8     0F 13 02 F6 | 	mov	arg01, local01
04adc     64 BF B1 FD | 	call	#__system___string_cmp
04ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae4     14 08 90 AD |  if_e	jmp	#LR__0351
04ae8     82 01 00 FF 
04aec     59 15 06 F6 | 	mov	arg02, ##@LR__5226
04af0     0F 13 02 F6 | 	mov	arg01, local01
04af4     4C BF B1 FD | 	call	#__system___string_cmp
04af8     00 FA 0D F2 | 	cmp	result1, #0 wz
04afc     04 08 90 AD |  if_e	jmp	#LR__0352
04b00     82 01 00 FF 
04b04     5C 15 06 F6 | 	mov	arg02, ##@LR__5227
04b08     0F 13 02 F6 | 	mov	arg01, local01
04b0c     34 BF B1 FD | 	call	#__system___string_cmp
04b10     00 FA 0D F2 | 	cmp	result1, #0 wz
04b14     F4 07 90 AD |  if_e	jmp	#LR__0353
04b18     82 01 00 FF 
04b1c     61 15 06 F6 | 	mov	arg02, ##@LR__5228
04b20     0F 13 02 F6 | 	mov	arg01, local01
04b24     1C BF B1 FD | 	call	#__system___string_cmp
04b28     00 FA 0D F2 | 	cmp	result1, #0 wz
04b2c     E4 07 90 AD |  if_e	jmp	#LR__0354
04b30     82 01 00 FF 
04b34     64 15 06 F6 | 	mov	arg02, ##@LR__5229
04b38     0F 13 02 F6 | 	mov	arg01, local01
04b3c     04 BF B1 FD | 	call	#__system___string_cmp
04b40     00 FA 0D F2 | 	cmp	result1, #0 wz
04b44     D4 07 90 AD |  if_e	jmp	#LR__0355
04b48     82 01 00 FF 
04b4c     69 15 06 F6 | 	mov	arg02, ##@LR__5230
04b50     0F 13 02 F6 | 	mov	arg01, local01
04b54     EC BE B1 FD | 	call	#__system___string_cmp
04b58     00 FA 0D F2 | 	cmp	result1, #0 wz
04b5c     C4 07 90 AD |  if_e	jmp	#LR__0356
04b60     82 01 00 FF 
04b64     6D 15 06 F6 | 	mov	arg02, ##@LR__5231
04b68     0F 13 02 F6 | 	mov	arg01, local01
04b6c     D4 BE B1 FD | 	call	#__system___string_cmp
04b70     00 FA 0D F2 | 	cmp	result1, #0 wz
04b74     B4 07 90 AD |  if_e	jmp	#LR__0357
04b78     82 01 00 FF 
04b7c     73 15 06 F6 | 	mov	arg02, ##@LR__5232
04b80     0F 13 02 F6 | 	mov	arg01, local01
04b84     BC BE B1 FD | 	call	#__system___string_cmp
04b88     00 FA 0D F2 | 	cmp	result1, #0 wz
04b8c     A4 07 90 AD |  if_e	jmp	#LR__0358
04b90     82 01 00 FF 
04b94     78 15 06 F6 | 	mov	arg02, ##@LR__5233
04b98     0F 13 02 F6 | 	mov	arg01, local01
04b9c     A4 BE B1 FD | 	call	#__system___string_cmp
04ba0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ba4     94 07 90 AD |  if_e	jmp	#LR__0359
04ba8     82 01 00 FF 
04bac     7B 15 06 F6 | 	mov	arg02, ##@LR__5234
04bb0     0F 13 02 F6 | 	mov	arg01, local01
04bb4     8C BE B1 FD | 	call	#__system___string_cmp
04bb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bbc     84 07 90 AD |  if_e	jmp	#LR__0360
04bc0     82 01 00 FF 
04bc4     81 15 06 F6 | 	mov	arg02, ##@LR__5235
04bc8     0F 13 02 F6 | 	mov	arg01, local01
04bcc     74 BE B1 FD | 	call	#__system___string_cmp
04bd0     00 FA 0D F2 | 	cmp	result1, #0 wz
04bd4     74 07 90 AD |  if_e	jmp	#LR__0361
04bd8     82 01 00 FF 
04bdc     85 15 06 F6 | 	mov	arg02, ##@LR__5236
04be0     0F 13 02 F6 | 	mov	arg01, local01
04be4     5C BE B1 FD | 	call	#__system___string_cmp
04be8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bec     64 07 90 AD |  if_e	jmp	#LR__0362
04bf0     82 01 00 FF 
04bf4     8A 15 06 F6 | 	mov	arg02, ##@LR__5237
04bf8     0F 13 02 F6 | 	mov	arg01, local01
04bfc     44 BE B1 FD | 	call	#__system___string_cmp
04c00     00 FA 0D F2 | 	cmp	result1, #0 wz
04c04     54 07 90 AD |  if_e	jmp	#LR__0363
04c08     82 01 00 FF 
04c0c     8D 15 06 F6 | 	mov	arg02, ##@LR__5238
04c10     0F 13 02 F6 | 	mov	arg01, local01
04c14     2C BE B1 FD | 	call	#__system___string_cmp
04c18     00 FA 0D F2 | 	cmp	result1, #0 wz
04c1c     44 07 90 AD |  if_e	jmp	#LR__0364
04c20     82 01 00 FF 
04c24     92 15 06 F6 | 	mov	arg02, ##@LR__5239
04c28     0F 13 02 F6 | 	mov	arg01, local01
04c2c     14 BE B1 FD | 	call	#__system___string_cmp
04c30     00 FA 0D F2 | 	cmp	result1, #0 wz
04c34     34 07 90 AD |  if_e	jmp	#LR__0365
04c38     82 01 00 FF 
04c3c     98 15 06 F6 | 	mov	arg02, ##@LR__5240
04c40     0F 13 02 F6 | 	mov	arg01, local01
04c44     FC BD B1 FD | 	call	#__system___string_cmp
04c48     00 FA 0D F2 | 	cmp	result1, #0 wz
04c4c     24 07 90 AD |  if_e	jmp	#LR__0366
04c50     82 01 00 FF 
04c54     9C 15 06 F6 | 	mov	arg02, ##@LR__5241
04c58     0F 13 02 F6 | 	mov	arg01, local01
04c5c     E4 BD B1 FD | 	call	#__system___string_cmp
04c60     00 FA 0D F2 | 	cmp	result1, #0 wz
04c64     14 07 90 AD |  if_e	jmp	#LR__0367
04c68     82 01 00 FF 
04c6c     A5 15 06 F6 | 	mov	arg02, ##@LR__5242
04c70     0F 13 02 F6 | 	mov	arg01, local01
04c74     CC BD B1 FD | 	call	#__system___string_cmp
04c78     00 FA 0D F2 | 	cmp	result1, #0 wz
04c7c     04 07 90 AD |  if_e	jmp	#LR__0368
04c80     82 01 00 FF 
04c84     AB 15 06 F6 | 	mov	arg02, ##@LR__5243
04c88     0F 13 02 F6 | 	mov	arg01, local01
04c8c     B4 BD B1 FD | 	call	#__system___string_cmp
04c90     00 FA 0D F2 | 	cmp	result1, #0 wz
04c94     F4 06 90 AD |  if_e	jmp	#LR__0369
04c98     82 01 00 FF 
04c9c     B1 15 06 F6 | 	mov	arg02, ##@LR__5244
04ca0     0F 13 02 F6 | 	mov	arg01, local01
04ca4     9C BD B1 FD | 	call	#__system___string_cmp
04ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cac     E4 06 90 AD |  if_e	jmp	#LR__0370
04cb0     82 01 00 FF 
04cb4     BA 15 06 F6 | 	mov	arg02, ##@LR__5245
04cb8     0F 13 02 F6 | 	mov	arg01, local01
04cbc     84 BD B1 FD | 	call	#__system___string_cmp
04cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cc4     D4 06 90 AD |  if_e	jmp	#LR__0371
04cc8     82 01 00 FF 
04ccc     C4 15 06 F6 | 	mov	arg02, ##@LR__5246
04cd0     0F 13 02 F6 | 	mov	arg01, local01
04cd4     6C BD B1 FD | 	call	#__system___string_cmp
04cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cdc     C4 06 90 AD |  if_e	jmp	#LR__0372
04ce0     82 01 00 FF 
04ce4     CD 15 06 F6 | 	mov	arg02, ##@LR__5247
04ce8     0F 13 02 F6 | 	mov	arg01, local01
04cec     54 BD B1 FD | 	call	#__system___string_cmp
04cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cf4     B4 06 90 AD |  if_e	jmp	#LR__0373
04cf8     82 01 00 FF 
04cfc     D2 15 06 F6 | 	mov	arg02, ##@LR__5248
04d00     0F 13 02 F6 | 	mov	arg01, local01
04d04     3C BD B1 FD | 	call	#__system___string_cmp
04d08     00 FA 0D F2 | 	cmp	result1, #0 wz
04d0c     A4 06 90 AD |  if_e	jmp	#LR__0374
04d10     82 01 00 FF 
04d14     D5 15 06 F6 | 	mov	arg02, ##@LR__5249
04d18     0F 13 02 F6 | 	mov	arg01, local01
04d1c     24 BD B1 FD | 	call	#__system___string_cmp
04d20     00 FA 0D F2 | 	cmp	result1, #0 wz
04d24     94 06 90 AD |  if_e	jmp	#LR__0375
04d28     82 01 00 FF 
04d2c     DA 15 06 F6 | 	mov	arg02, ##@LR__5250
04d30     0F 13 02 F6 | 	mov	arg01, local01
04d34     0C BD B1 FD | 	call	#__system___string_cmp
04d38     00 FA 0D F2 | 	cmp	result1, #0 wz
04d3c     84 06 90 AD |  if_e	jmp	#LR__0376
04d40     82 01 00 FF 
04d44     DE 15 06 F6 | 	mov	arg02, ##@LR__5251
04d48     0F 13 02 F6 | 	mov	arg01, local01
04d4c     F4 BC B1 FD | 	call	#__system___string_cmp
04d50     00 FA 0D F2 | 	cmp	result1, #0 wz
04d54     74 06 90 AD |  if_e	jmp	#LR__0377
04d58     82 01 00 FF 
04d5c     E3 15 06 F6 | 	mov	arg02, ##@LR__5252
04d60     0F 13 02 F6 | 	mov	arg01, local01
04d64     DC BC B1 FD | 	call	#__system___string_cmp
04d68     00 FA 0D F2 | 	cmp	result1, #0 wz
04d6c     64 06 90 AD |  if_e	jmp	#LR__0378
04d70     82 01 00 FF 
04d74     E7 15 06 F6 | 	mov	arg02, ##@LR__5253
04d78     0F 13 02 F6 | 	mov	arg01, local01
04d7c     C4 BC B1 FD | 	call	#__system___string_cmp
04d80     00 FA 0D F2 | 	cmp	result1, #0 wz
04d84     54 06 90 AD |  if_e	jmp	#LR__0379
04d88     82 01 00 FF 
04d8c     F0 15 06 F6 | 	mov	arg02, ##@LR__5254
04d90     0F 13 02 F6 | 	mov	arg01, local01
04d94     AC BC B1 FD | 	call	#__system___string_cmp
04d98     00 FA 0D F2 | 	cmp	result1, #0 wz
04d9c     44 06 90 AD |  if_e	jmp	#LR__0380
04da0     82 01 00 FF 
04da4     F5 15 06 F6 | 	mov	arg02, ##@LR__5255
04da8     0F 13 02 F6 | 	mov	arg01, local01
04dac     94 BC B1 FD | 	call	#__system___string_cmp
04db0     00 FA 0D F2 | 	cmp	result1, #0 wz
04db4     34 06 90 AD |  if_e	jmp	#LR__0381
04db8     82 01 00 FF 
04dbc     FB 15 06 F6 | 	mov	arg02, ##@LR__5256
04dc0     0F 13 02 F6 | 	mov	arg01, local01
04dc4     7C BC B1 FD | 	call	#__system___string_cmp
04dc8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dcc     24 06 90 AD |  if_e	jmp	#LR__0382
04dd0     82 01 00 FF 
04dd4     FD 15 06 F6 | 	mov	arg02, ##@LR__5257
04dd8     0F 13 02 F6 | 	mov	arg01, local01
04ddc     64 BC B1 FD | 	call	#__system___string_cmp
04de0     00 FA 0D F2 | 	cmp	result1, #0 wz
04de4     14 06 90 AD |  if_e	jmp	#LR__0383
04de8     83 01 00 FF 
04dec     01 14 06 F6 | 	mov	arg02, ##@LR__5258
04df0     0F 13 02 F6 | 	mov	arg01, local01
04df4     4C BC B1 FD | 	call	#__system___string_cmp
04df8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dfc     04 06 90 AD |  if_e	jmp	#LR__0384
04e00     83 01 00 FF 
04e04     05 14 06 F6 | 	mov	arg02, ##@LR__5259
04e08     0F 13 02 F6 | 	mov	arg01, local01
04e0c     34 BC B1 FD | 	call	#__system___string_cmp
04e10     00 FA 0D F2 | 	cmp	result1, #0 wz
04e14     F4 05 90 AD |  if_e	jmp	#LR__0385
04e18     83 01 00 FF 
04e1c     0D 14 06 F6 | 	mov	arg02, ##@LR__5260
04e20     0F 13 02 F6 | 	mov	arg01, local01
04e24     1C BC B1 FD | 	call	#__system___string_cmp
04e28     00 FA 0D F2 | 	cmp	result1, #0 wz
04e2c     E4 05 90 AD |  if_e	jmp	#LR__0386
04e30     83 01 00 FF 
04e34     11 14 06 F6 | 	mov	arg02, ##@LR__5261
04e38     0F 13 02 F6 | 	mov	arg01, local01
04e3c     04 BC B1 FD | 	call	#__system___string_cmp
04e40     00 FA 0D F2 | 	cmp	result1, #0 wz
04e44     D4 05 90 AD |  if_e	jmp	#LR__0387
04e48     83 01 00 FF 
04e4c     13 14 06 F6 | 	mov	arg02, ##@LR__5262
04e50     0F 13 02 F6 | 	mov	arg01, local01
04e54     EC BB B1 FD | 	call	#__system___string_cmp
04e58     00 FA 0D F2 | 	cmp	result1, #0 wz
04e5c     C4 05 90 AD |  if_e	jmp	#LR__0388
04e60     83 01 00 FF 
04e64     1A 14 06 F6 | 	mov	arg02, ##@LR__5263
04e68     0F 13 02 F6 | 	mov	arg01, local01
04e6c     D4 BB B1 FD | 	call	#__system___string_cmp
04e70     00 FA 0D F2 | 	cmp	result1, #0 wz
04e74     B4 05 90 AD |  if_e	jmp	#LR__0389
04e78     83 01 00 FF 
04e7c     1E 14 06 F6 | 	mov	arg02, ##@LR__5264
04e80     0F 13 02 F6 | 	mov	arg01, local01
04e84     BC BB B1 FD | 	call	#__system___string_cmp
04e88     00 FA 0D F2 | 	cmp	result1, #0 wz
04e8c     A4 05 90 AD |  if_e	jmp	#LR__0390
04e90     83 01 00 FF 
04e94     23 14 06 F6 | 	mov	arg02, ##@LR__5265
04e98     0F 13 02 F6 | 	mov	arg01, local01
04e9c     A4 BB B1 FD | 	call	#__system___string_cmp
04ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ea4     94 05 90 AD |  if_e	jmp	#LR__0391
04ea8     83 01 00 FF 
04eac     26 14 06 F6 | 	mov	arg02, ##@LR__5266
04eb0     0F 13 02 F6 | 	mov	arg01, local01
04eb4     8C BB B1 FD | 	call	#__system___string_cmp
04eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ebc     84 05 90 AD |  if_e	jmp	#LR__0392
04ec0     83 01 00 FF 
04ec4     2F 14 06 F6 | 	mov	arg02, ##@LR__5267
04ec8     0F 13 02 F6 | 	mov	arg01, local01
04ecc     74 BB B1 FD | 	call	#__system___string_cmp
04ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ed4     74 05 90 AD |  if_e	jmp	#LR__0393
04ed8     83 01 00 FF 
04edc     33 14 06 F6 | 	mov	arg02, ##@LR__5268
04ee0     0F 13 02 F6 | 	mov	arg01, local01
04ee4     5C BB B1 FD | 	call	#__system___string_cmp
04ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
04eec     64 05 90 AD |  if_e	jmp	#LR__0394
04ef0     83 01 00 FF 
04ef4     3A 14 06 F6 | 	mov	arg02, ##@LR__5269
04ef8     0F 13 02 F6 | 	mov	arg01, local01
04efc     44 BB B1 FD | 	call	#__system___string_cmp
04f00     00 FA 0D F2 | 	cmp	result1, #0 wz
04f04     54 05 90 AD |  if_e	jmp	#LR__0395
04f08     83 01 00 FF 
04f0c     3E 14 06 F6 | 	mov	arg02, ##@LR__5270
04f10     0F 13 02 F6 | 	mov	arg01, local01
04f14     2C BB B1 FD | 	call	#__system___string_cmp
04f18     00 FA 0D F2 | 	cmp	result1, #0 wz
04f1c     44 05 90 AD |  if_e	jmp	#LR__0396
04f20     83 01 00 FF 
04f24     45 14 06 F6 | 	mov	arg02, ##@LR__5271
04f28     0F 13 02 F6 | 	mov	arg01, local01
04f2c     14 BB B1 FD | 	call	#__system___string_cmp
04f30     00 FA 0D F2 | 	cmp	result1, #0 wz
04f34     34 05 90 AD |  if_e	jmp	#LR__0397
04f38     83 01 00 FF 
04f3c     49 14 06 F6 | 	mov	arg02, ##@LR__5272
04f40     0F 13 02 F6 | 	mov	arg01, local01
04f44     FC BA B1 FD | 	call	#__system___string_cmp
04f48     00 FA 0D F2 | 	cmp	result1, #0 wz
04f4c     24 05 90 AD |  if_e	jmp	#LR__0398
04f50     83 01 00 FF 
04f54     50 14 06 F6 | 	mov	arg02, ##@LR__5273
04f58     0F 13 02 F6 | 	mov	arg01, local01
04f5c     E4 BA B1 FD | 	call	#__system___string_cmp
04f60     00 FA 0D F2 | 	cmp	result1, #0 wz
04f64     14 05 90 AD |  if_e	jmp	#LR__0399
04f68     83 01 00 FF 
04f6c     53 14 06 F6 | 	mov	arg02, ##@LR__5274
04f70     0F 13 02 F6 | 	mov	arg01, local01
04f74     CC BA B1 FD | 	call	#__system___string_cmp
04f78     00 FA 0D F2 | 	cmp	result1, #0 wz
04f7c     04 05 90 AD |  if_e	jmp	#LR__0400
04f80     83 01 00 FF 
04f84     5E 14 06 F6 | 	mov	arg02, ##@LR__5275
04f88     0F 13 02 F6 | 	mov	arg01, local01
04f8c     B4 BA B1 FD | 	call	#__system___string_cmp
04f90     00 FA 0D F2 | 	cmp	result1, #0 wz
04f94     F4 04 90 AD |  if_e	jmp	#LR__0401
04f98     83 01 00 FF 
04f9c     62 14 06 F6 | 	mov	arg02, ##@LR__5276
04fa0     0F 13 02 F6 | 	mov	arg01, local01
04fa4     9C BA B1 FD | 	call	#__system___string_cmp
04fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fac     E4 04 90 AD |  if_e	jmp	#LR__0402
04fb0     83 01 00 FF 
04fb4     69 14 06 F6 | 	mov	arg02, ##@LR__5277
04fb8     0F 13 02 F6 | 	mov	arg01, local01
04fbc     84 BA B1 FD | 	call	#__system___string_cmp
04fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fc4     D4 04 90 AD |  if_e	jmp	#LR__0403
04fc8     83 01 00 FF 
04fcc     6D 14 06 F6 | 	mov	arg02, ##@LR__5278
04fd0     0F 13 02 F6 | 	mov	arg01, local01
04fd4     6C BA B1 FD | 	call	#__system___string_cmp
04fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fdc     C4 04 90 AD |  if_e	jmp	#LR__0404
04fe0     83 01 00 FF 
04fe4     75 14 06 F6 | 	mov	arg02, ##@LR__5279
04fe8     0F 13 02 F6 | 	mov	arg01, local01
04fec     54 BA B1 FD | 	call	#__system___string_cmp
04ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff4     B4 04 90 AD |  if_e	jmp	#LR__0405
04ff8     83 01 00 FF 
04ffc     79 14 06 F6 | 	mov	arg02, ##@LR__5280
05000     0F 13 02 F6 | 	mov	arg01, local01
05004     3C BA B1 FD | 	call	#__system___string_cmp
05008     00 FA 0D F2 | 	cmp	result1, #0 wz
0500c     A4 04 90 AD |  if_e	jmp	#LR__0406
05010     83 01 00 FF 
05014     80 14 06 F6 | 	mov	arg02, ##@LR__5281
05018     0F 13 02 F6 | 	mov	arg01, local01
0501c     24 BA B1 FD | 	call	#__system___string_cmp
05020     00 FA 0D F2 | 	cmp	result1, #0 wz
05024     94 04 90 AD |  if_e	jmp	#LR__0407
05028     83 01 00 FF 
0502c     87 14 06 F6 | 	mov	arg02, ##@LR__5282
05030     0F 13 02 F6 | 	mov	arg01, local01
05034     0C BA B1 FD | 	call	#__system___string_cmp
05038     00 FA 0D F2 | 	cmp	result1, #0 wz
0503c     84 04 90 AD |  if_e	jmp	#LR__0408
05040     83 01 00 FF 
05044     8B 14 06 F6 | 	mov	arg02, ##@LR__5283
05048     0F 13 02 F6 | 	mov	arg01, local01
0504c     F4 B9 B1 FD | 	call	#__system___string_cmp
05050     00 FA 0D F2 | 	cmp	result1, #0 wz
05054     74 04 90 AD |  if_e	jmp	#LR__0409
05058     83 01 00 FF 
0505c     91 14 06 F6 | 	mov	arg02, ##@LR__5284
05060     0F 13 02 F6 | 	mov	arg01, local01
05064     DC B9 B1 FD | 	call	#__system___string_cmp
05068     00 FA 0D F2 | 	cmp	result1, #0 wz
0506c     64 04 90 AD |  if_e	jmp	#LR__0410
05070     83 01 00 FF 
05074     95 14 06 F6 | 	mov	arg02, ##@LR__5285
05078     0F 13 02 F6 | 	mov	arg01, local01
0507c     C4 B9 B1 FD | 	call	#__system___string_cmp
05080     00 FA 0D F2 | 	cmp	result1, #0 wz
05084     54 04 90 AD |  if_e	jmp	#LR__0411
05088     83 01 00 FF 
0508c     9C 14 06 F6 | 	mov	arg02, ##@LR__5286
05090     0F 13 02 F6 | 	mov	arg01, local01
05094     AC B9 B1 FD | 	call	#__system___string_cmp
05098     00 FA 0D F2 | 	cmp	result1, #0 wz
0509c     44 04 90 AD |  if_e	jmp	#LR__0412
050a0     83 01 00 FF 
050a4     A1 14 06 F6 | 	mov	arg02, ##@LR__5287
050a8     0F 13 02 F6 | 	mov	arg01, local01
050ac     94 B9 B1 FD | 	call	#__system___string_cmp
050b0     00 FA 0D F2 | 	cmp	result1, #0 wz
050b4     34 04 90 AD |  if_e	jmp	#LR__0413
050b8     83 01 00 FF 
050bc     A6 14 06 F6 | 	mov	arg02, ##@LR__5288
050c0     0F 13 02 F6 | 	mov	arg01, local01
050c4     7C B9 B1 FD | 	call	#__system___string_cmp
050c8     00 FA 0D F2 | 	cmp	result1, #0 wz
050cc     24 04 90 AD |  if_e	jmp	#LR__0414
050d0     83 01 00 FF 
050d4     AD 14 06 F6 | 	mov	arg02, ##@LR__5289
050d8     0F 13 02 F6 | 	mov	arg01, local01
050dc     64 B9 B1 FD | 	call	#__system___string_cmp
050e0     00 FA 0D F2 | 	cmp	result1, #0 wz
050e4     14 04 90 AD |  if_e	jmp	#LR__0415
050e8     83 01 00 FF 
050ec     B7 14 06 F6 | 	mov	arg02, ##@LR__5290
050f0     0F 13 02 F6 | 	mov	arg01, local01
050f4     4C B9 B1 FD | 	call	#__system___string_cmp
050f8     00 FA 0D F2 | 	cmp	result1, #0 wz
050fc     04 04 90 AD |  if_e	jmp	#LR__0416
05100     83 01 00 FF 
05104     BB 14 06 F6 | 	mov	arg02, ##@LR__5291
05108     0F 13 02 F6 | 	mov	arg01, local01
0510c     34 B9 B1 FD | 	call	#__system___string_cmp
05110     00 FA 0D F2 | 	cmp	result1, #0 wz
05114     F4 03 90 AD |  if_e	jmp	#LR__0417
05118     83 01 00 FF 
0511c     C3 14 06 F6 | 	mov	arg02, ##@LR__5292
05120     0F 13 02 F6 | 	mov	arg01, local01
05124     1C B9 B1 FD | 	call	#__system___string_cmp
05128     00 FA 0D F2 | 	cmp	result1, #0 wz
0512c     E4 03 90 AD |  if_e	jmp	#LR__0418
05130     83 01 00 FF 
05134     C7 14 06 F6 | 	mov	arg02, ##@LR__5293
05138     0F 13 02 F6 | 	mov	arg01, local01
0513c     04 B9 B1 FD | 	call	#__system___string_cmp
05140     00 FA 0D F2 | 	cmp	result1, #0 wz
05144     D4 03 90 AD |  if_e	jmp	#LR__0419
05148     83 01 00 FF 
0514c     CD 14 06 F6 | 	mov	arg02, ##@LR__5294
05150     0F 13 02 F6 | 	mov	arg01, local01
05154     EC B8 B1 FD | 	call	#__system___string_cmp
05158     00 FA 0D F2 | 	cmp	result1, #0 wz
0515c     C4 03 90 AD |  if_e	jmp	#LR__0420
05160     C8 03 90 FD | 	jmp	#LR__0421
05164                 | LR__0300
05164     5C FA 05 F6 | 	mov	result1, #92
05168     C4 03 90 FD | 	jmp	#LR__0422
0516c                 | LR__0301
0516c     5C FA 05 F6 | 	mov	result1, #92
05170     BC 03 90 FD | 	jmp	#LR__0422
05174                 | LR__0302
05174     47 FA 05 F6 | 	mov	result1, #71
05178     B4 03 90 FD | 	jmp	#LR__0422
0517c                 | LR__0303
0517c     59 FA 05 F6 | 	mov	result1, #89
05180     AC 03 90 FD | 	jmp	#LR__0422
05184                 | LR__0304
05184     59 FA 05 F6 | 	mov	result1, #89
05188     A4 03 90 FD | 	jmp	#LR__0422
0518c                 | LR__0305
0518c     AE FA 05 F6 | 	mov	result1, #174
05190     9C 03 90 FD | 	jmp	#LR__0422
05194                 | LR__0306
05194     AE FA 05 F6 | 	mov	result1, #174
05198     94 03 90 FD | 	jmp	#LR__0422
0519c                 | LR__0307
0519c     B1 FA 05 F6 | 	mov	result1, #177
051a0     8C 03 90 FD | 	jmp	#LR__0422
051a4                 | LR__0308
051a4     B1 FA 05 F6 | 	mov	result1, #177
051a8     84 03 90 FD | 	jmp	#LR__0422
051ac                 | LR__0309
051ac     AF FA 05 F6 | 	mov	result1, #175
051b0     7C 03 90 FD | 	jmp	#LR__0422
051b4                 | LR__0310
051b4     AF FA 05 F6 | 	mov	result1, #175
051b8     74 03 90 FD | 	jmp	#LR__0422
051bc                 | LR__0311
051bc     B0 FA 05 F6 | 	mov	result1, #176
051c0     6C 03 90 FD | 	jmp	#LR__0422
051c4                 | LR__0312
051c4     B0 FA 05 F6 | 	mov	result1, #176
051c8     64 03 90 FD | 	jmp	#LR__0422
051cc                 | LR__0313
051cc     45 FA 05 F6 | 	mov	result1, #69
051d0     5C 03 90 FD | 	jmp	#LR__0422
051d4                 | LR__0314
051d4     45 FA 05 F6 | 	mov	result1, #69
051d8     54 03 90 FD | 	jmp	#LR__0422
051dc                 | LR__0315
051dc     69 FA 05 F6 | 	mov	result1, #105
051e0     4C 03 90 FD | 	jmp	#LR__0422
051e4                 | LR__0316
051e4     B4 FA 05 F6 | 	mov	result1, #180
051e8     44 03 90 FD | 	jmp	#LR__0422
051ec                 | LR__0317
051ec     40 FA 05 F6 | 	mov	result1, #64
051f0     3C 03 90 FD | 	jmp	#LR__0422
051f4                 | LR__0318
051f4     49 FA 05 F6 | 	mov	result1, #73
051f8     34 03 90 FD | 	jmp	#LR__0422
051fc                 | LR__0319
051fc     49 FA 05 F6 | 	mov	result1, #73
05200     2C 03 90 FD | 	jmp	#LR__0422
05204                 | LR__0320
05204     50 FA 05 F6 | 	mov	result1, #80
05208     24 03 90 FD | 	jmp	#LR__0422
0520c                 | LR__0321
0520c     50 FA 05 F6 | 	mov	result1, #80
05210     1C 03 90 FD | 	jmp	#LR__0422
05214                 | LR__0322
05214     68 FA 05 F6 | 	mov	result1, #104
05218     14 03 90 FD | 	jmp	#LR__0422
0521c                 | LR__0323
0521c     73 FA 05 F6 | 	mov	result1, #115
05220     0C 03 90 FD | 	jmp	#LR__0422
05224                 | LR__0324
05224     74 FA 05 F6 | 	mov	result1, #116
05228     04 03 90 FD | 	jmp	#LR__0422
0522c                 | LR__0325
0522c     6C FA 05 F6 | 	mov	result1, #108
05230     FC 02 90 FD | 	jmp	#LR__0422
05234                 | LR__0326
05234     6C FA 05 F6 | 	mov	result1, #108
05238     F4 02 90 FD | 	jmp	#LR__0422
0523c                 | LR__0327
0523c     89 FA 05 F6 | 	mov	result1, #137
05240     EC 02 90 FD | 	jmp	#LR__0422
05244                 | LR__0328
05244     72 FA 05 F6 | 	mov	result1, #114
05248     E4 02 90 FD | 	jmp	#LR__0422
0524c                 | LR__0329
0524c     5D FA 05 F6 | 	mov	result1, #93
05250     DC 02 90 FD | 	jmp	#LR__0422
05254                 | LR__0330
05254     96 FA 05 F6 | 	mov	result1, #150
05258     D4 02 90 FD | 	jmp	#LR__0422
0525c                 | LR__0331
0525c     43 FA 05 F6 | 	mov	result1, #67
05260     CC 02 90 FD | 	jmp	#LR__0422
05264                 | LR__0332
05264     43 FA 05 F6 | 	mov	result1, #67
05268     C4 02 90 FD | 	jmp	#LR__0422
0526c                 | LR__0333
0526c     5A FA 05 F6 | 	mov	result1, #90
05270     BC 02 90 FD | 	jmp	#LR__0422
05274                 | LR__0334
05274     AB FA 05 F6 | 	mov	result1, #171
05278     B4 02 90 FD | 	jmp	#LR__0422
0527c                 | LR__0335
0527c     BD FA 05 F6 | 	mov	result1, #189
05280     AC 02 90 FD | 	jmp	#LR__0422
05284                 | LR__0336
05284     BD FA 05 F6 | 	mov	result1, #189
05288     A4 02 90 FD | 	jmp	#LR__0422
0528c                 | LR__0337
0528c     46 FA 05 F6 | 	mov	result1, #70
05290     9C 02 90 FD | 	jmp	#LR__0422
05294                 | LR__0338
05294     46 FA 05 F6 | 	mov	result1, #70
05298     94 02 90 FD | 	jmp	#LR__0422
0529c                 | LR__0339
0529c     71 FA 05 F6 | 	mov	result1, #113
052a0     8C 02 90 FD | 	jmp	#LR__0422
052a4                 | LR__0340
052a4     71 FA 05 F6 | 	mov	result1, #113
052a8     84 02 90 FD | 	jmp	#LR__0422
052ac                 | LR__0341
052ac     60 FA 05 F6 | 	mov	result1, #96
052b0     7C 02 90 FD | 	jmp	#LR__0422
052b4                 | LR__0342
052b4     4A FA 05 F6 | 	mov	result1, #74
052b8     74 02 90 FD | 	jmp	#LR__0422
052bc                 | LR__0343
052bc     4A FA 05 F6 | 	mov	result1, #74
052c0     6C 02 90 FD | 	jmp	#LR__0422
052c4                 | LR__0344
052c4     48 FA 05 F6 | 	mov	result1, #72
052c8     64 02 90 FD | 	jmp	#LR__0422
052cc                 | LR__0345
052cc     48 FA 05 F6 | 	mov	result1, #72
052d0     5C 02 90 FD | 	jmp	#LR__0422
052d4                 | LR__0346
052d4     BB FA 05 F6 | 	mov	result1, #187
052d8     54 02 90 FD | 	jmp	#LR__0422
052dc                 | LR__0347
052dc     A9 FA 05 F6 | 	mov	result1, #169
052e0     4C 02 90 FD | 	jmp	#LR__0422
052e4                 | LR__0348
052e4     4E FA 05 F6 | 	mov	result1, #78
052e8     44 02 90 FD | 	jmp	#LR__0422
052ec                 | LR__0349
052ec     4E FA 05 F6 | 	mov	result1, #78
052f0     3C 02 90 FD | 	jmp	#LR__0422
052f4                 | LR__0350
052f4     58 FA 05 F6 | 	mov	result1, #88
052f8     34 02 90 FD | 	jmp	#LR__0422
052fc                 | LR__0351
052fc     5F FA 05 F6 | 	mov	result1, #95
05300     2C 02 90 FD | 	jmp	#LR__0422
05304                 | LR__0352
05304     5F FA 05 F6 | 	mov	result1, #95
05308     24 02 90 FD | 	jmp	#LR__0422
0530c                 | LR__0353
0530c     4C FA 05 F6 | 	mov	result1, #76
05310     1C 02 90 FD | 	jmp	#LR__0422
05314                 | LR__0354
05314     4C FA 05 F6 | 	mov	result1, #76
05318     14 02 90 FD | 	jmp	#LR__0422
0531c                 | LR__0355
0531c     52 FA 05 F6 | 	mov	result1, #82
05320     0C 02 90 FD | 	jmp	#LR__0422
05324                 | LR__0356
05324     52 FA 05 F6 | 	mov	result1, #82
05328     04 02 90 FD | 	jmp	#LR__0422
0532c                 | LR__0357
0532c     97 FA 05 F6 | 	mov	result1, #151
05330     FC 01 90 FD | 	jmp	#LR__0422
05334                 | LR__0358
05334     61 FA 05 F6 | 	mov	result1, #97
05338     F4 01 90 FD | 	jmp	#LR__0422
0533c                 | LR__0359
0533c     61 FA 05 F6 | 	mov	result1, #97
05340     EC 01 90 FD | 	jmp	#LR__0422
05344                 | LR__0360
05344     63 FA 05 F6 | 	mov	result1, #99
05348     E4 01 90 FD | 	jmp	#LR__0422
0534c                 | LR__0361
0534c     41 FA 05 F6 | 	mov	result1, #65
05350     DC 01 90 FD | 	jmp	#LR__0422
05354                 | LR__0362
05354     4B FA 05 F6 | 	mov	result1, #75
05358     D4 01 90 FD | 	jmp	#LR__0422
0535c                 | LR__0363
0535c     4B FA 05 F6 | 	mov	result1, #75
05360     CC 01 90 FD | 	jmp	#LR__0422
05364                 | LR__0364
05364     B3 FA 05 F6 | 	mov	result1, #179
05368     C4 01 90 FD | 	jmp	#LR__0422
0536c                 | LR__0365
0536c     5E FA 05 F6 | 	mov	result1, #94
05370     BC 01 90 FD | 	jmp	#LR__0422
05374                 | LR__0366
05374     5E FA 05 F6 | 	mov	result1, #94
05378     B4 01 90 FD | 	jmp	#LR__0422
0537c                 | LR__0367
0537c     7C FA 05 F6 | 	mov	result1, #124
05380     AC 01 90 FD | 	jmp	#LR__0422
05384                 | LR__0368
05384     7E FA 05 F6 | 	mov	result1, #126
05388     A4 01 90 FD | 	jmp	#LR__0422
0538c                 | LR__0369
0538c     7D FA 05 F6 | 	mov	result1, #125
05390     9C 01 90 FD | 	jmp	#LR__0422
05394                 | LR__0370
05394     7F FA 05 F6 | 	mov	result1, #127
05398     94 01 90 FD | 	jmp	#LR__0422
0539c                 | LR__0371
0539c     80 FA 05 F6 | 	mov	result1, #128
053a0     8C 01 90 FD | 	jmp	#LR__0422
053a4                 | LR__0372
053a4     55 FA 05 F6 | 	mov	result1, #85
053a8     84 01 90 FD | 	jmp	#LR__0422
053ac                 | LR__0373
053ac     75 FA 05 F6 | 	mov	result1, #117
053b0     7C 01 90 FD | 	jmp	#LR__0422
053b4                 | LR__0374
053b4     75 FA 05 F6 | 	mov	result1, #117
053b8     74 01 90 FD | 	jmp	#LR__0422
053bc                 | LR__0375
053bc     42 FA 05 F6 | 	mov	result1, #66
053c0     6C 01 90 FD | 	jmp	#LR__0422
053c4                 | LR__0376
053c4     42 FA 05 F6 | 	mov	result1, #66
053c8     64 01 90 FD | 	jmp	#LR__0422
053cc                 | LR__0377
053cc     95 FA 05 F6 | 	mov	result1, #149
053d0     5C 01 90 FD | 	jmp	#LR__0422
053d4                 | LR__0378
053d4     AC FA 05 F6 | 	mov	result1, #172
053d8     54 01 90 FD | 	jmp	#LR__0422
053dc                 | LR__0379
053dc     81 FA 05 F6 | 	mov	result1, #129
053e0     4C 01 90 FD | 	jmp	#LR__0422
053e4                 | LR__0380
053e4     81 FA 05 F6 | 	mov	result1, #129
053e8     44 01 90 FD | 	jmp	#LR__0422
053ec                 | LR__0381
053ec     44 FA 05 F6 | 	mov	result1, #68
053f0     3C 01 90 FD | 	jmp	#LR__0422
053f4                 | LR__0382
053f4     44 FA 05 F6 | 	mov	result1, #68
053f8     34 01 90 FD | 	jmp	#LR__0422
053fc                 | LR__0383
053fc     BC FA 05 F6 | 	mov	result1, #188
05400     2C 01 90 FD | 	jmp	#LR__0422
05404                 | LR__0384
05404     88 FA 05 F6 | 	mov	result1, #136
05408     24 01 90 FD | 	jmp	#LR__0422
0540c                 | LR__0385
0540c     92 FA 05 F6 | 	mov	result1, #146
05410     1C 01 90 FD | 	jmp	#LR__0422
05414                 | LR__0386
05414     BE FA 05 F6 | 	mov	result1, #190
05418     14 01 90 FD | 	jmp	#LR__0422
0541c                 | LR__0387
0541c     BE FA 05 F6 | 	mov	result1, #190
05420     0C 01 90 FD | 	jmp	#LR__0422
05424                 | LR__0388
05424     AA FA 05 F6 | 	mov	result1, #170
05428     04 01 90 FD | 	jmp	#LR__0422
0542c                 | LR__0389
0542c     4D FA 05 F6 | 	mov	result1, #77
05430     FC 00 90 FD | 	jmp	#LR__0422
05434                 | LR__0390
05434     51 FA 05 F6 | 	mov	result1, #81
05438     F4 00 90 FD | 	jmp	#LR__0422
0543c                 | LR__0391
0543c     51 FA 05 F6 | 	mov	result1, #81
05440     EC 00 90 FD | 	jmp	#LR__0422
05444                 | LR__0392
05444     8E FA 05 F6 | 	mov	result1, #142
05448     E4 00 90 FD | 	jmp	#LR__0422
0544c                 | LR__0393
0544c     8E FA 05 F6 | 	mov	result1, #142
05450     DC 00 90 FD | 	jmp	#LR__0422
05454                 | LR__0394
05454     90 FA 05 F6 | 	mov	result1, #144
05458     D4 00 90 FD | 	jmp	#LR__0422
0545c                 | LR__0395
0545c     90 FA 05 F6 | 	mov	result1, #144
05460     CC 00 90 FD | 	jmp	#LR__0422
05464                 | LR__0396
05464     8D FA 05 F6 | 	mov	result1, #141
05468     C4 00 90 FD | 	jmp	#LR__0422
0546c                 | LR__0397
0546c     8D FA 05 F6 | 	mov	result1, #141
05470     BC 00 90 FD | 	jmp	#LR__0422
05474                 | LR__0398
05474     8C FA 05 F6 | 	mov	result1, #140
05478     B4 00 90 FD | 	jmp	#LR__0422
0547c                 | LR__0399
0547c     8C FA 05 F6 | 	mov	result1, #140
05480     AC 00 90 FD | 	jmp	#LR__0422
05484                 | LR__0400
05484     91 FA 05 F6 | 	mov	result1, #145
05488     A4 00 90 FD | 	jmp	#LR__0422
0548c                 | LR__0401
0548c     91 FA 05 F6 | 	mov	result1, #145
05490     9C 00 90 FD | 	jmp	#LR__0422
05494                 | LR__0402
05494     8B FA 05 F6 | 	mov	result1, #139
05498     94 00 90 FD | 	jmp	#LR__0422
0549c                 | LR__0403
0549c     8B FA 05 F6 | 	mov	result1, #139
054a0     8C 00 90 FD | 	jmp	#LR__0422
054a4                 | LR__0404
054a4     8F FA 05 F6 | 	mov	result1, #143
054a8     84 00 90 FD | 	jmp	#LR__0422
054ac                 | LR__0405
054ac     8F FA 05 F6 | 	mov	result1, #143
054b0     7C 00 90 FD | 	jmp	#LR__0422
054b4                 | LR__0406
054b4     8F FA 05 F6 | 	mov	result1, #143
054b8     74 00 90 FD | 	jmp	#LR__0422
054bc                 | LR__0407
054bc     B2 FA 05 F6 | 	mov	result1, #178
054c0     6C 00 90 FD | 	jmp	#LR__0422
054c4                 | LR__0408
054c4     B2 FA 05 F6 | 	mov	result1, #178
054c8     64 00 90 FD | 	jmp	#LR__0422
054cc                 | LR__0409
054cc     75 FA 05 F6 | 	mov	result1, #117
054d0     5C 00 90 FD | 	jmp	#LR__0422
054d4                 | LR__0410
054d4     75 FA 05 F6 | 	mov	result1, #117
054d8     54 00 90 FD | 	jmp	#LR__0422
054dc                 | LR__0411
054dc     6D FA 05 F6 | 	mov	result1, #109
054e0     4C 00 90 FD | 	jmp	#LR__0422
054e4                 | LR__0412
054e4     6D FA 05 F6 | 	mov	result1, #109
054e8     44 00 90 FD | 	jmp	#LR__0422
054ec                 | LR__0413
054ec     5B FA 05 F6 | 	mov	result1, #91
054f0     3C 00 90 FD | 	jmp	#LR__0422
054f4                 | LR__0414
054f4     56 FA 05 F6 | 	mov	result1, #86
054f8     34 00 90 FD | 	jmp	#LR__0422
054fc                 | LR__0415
054fc     70 FA 05 F6 | 	mov	result1, #112
05500     2C 00 90 FD | 	jmp	#LR__0422
05504                 | LR__0416
05504     70 FA 05 F6 | 	mov	result1, #112
05508     24 00 90 FD | 	jmp	#LR__0422
0550c                 | LR__0417
0550c     57 FA 05 F6 | 	mov	result1, #87
05510     1C 00 90 FD | 	jmp	#LR__0422
05514                 | LR__0418
05514     57 FA 05 F6 | 	mov	result1, #87
05518     14 00 90 FD | 	jmp	#LR__0422
0551c                 | LR__0419
0551c     77 FA 05 F6 | 	mov	result1, #119
05520     0C 00 90 FD | 	jmp	#LR__0422
05524                 | LR__0420
05524     78 FA 05 F6 | 	mov	result1, #120
05528     04 00 90 FD | 	jmp	#LR__0422
0552c                 | LR__0421
0552c     00 FA 05 F6 | 	mov	result1, #0
05530                 | LR__0422
05530     A7 F0 03 F6 | 	mov	ptra, fp
05534     B2 00 A0 FD | 	call	#popregs_
05538                 | _iscommand_ret
05538     2D 00 64 FD | 	ret
0553c                 | 
0553c                 | ' 
0553c                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
0553c                 | ' 
0553c                 | ' function isfunction(s as string) as ubyte
0553c                 | _isfunction
0553c     01 4A 05 F6 | 	mov	COUNT_, #1
05540     A8 00 A0 FD | 	call	#pushregs_
05544                 | ' 
05544                 | ' select case s
05544     09 1F 02 F6 | 	mov	local01, arg01
05548     83 01 00 FF 
0554c     D3 14 06 F6 | 	mov	arg02, ##@LR__5295
05550     0F 13 02 F6 | 	mov	arg01, local01
05554     EC B4 B1 FD | 	call	#__system___string_cmp
05558     00 FA 0D F2 | 	cmp	result1, #0 wz
0555c     0C 04 90 AD |  if_e	jmp	#LR__0430
05560     83 01 00 FF 
05564     D7 14 06 F6 | 	mov	arg02, ##@LR__5296
05568     0F 13 02 F6 | 	mov	arg01, local01
0556c     D4 B4 B1 FD | 	call	#__system___string_cmp
05570     00 FA 0D F2 | 	cmp	result1, #0 wz
05574     FC 03 90 AD |  if_e	jmp	#LR__0431
05578     83 01 00 FF 
0557c     DC 14 06 F6 | 	mov	arg02, ##@LR__5297
05580     0F 13 02 F6 | 	mov	arg01, local01
05584     BC B4 B1 FD | 	call	#__system___string_cmp
05588     00 FA 0D F2 | 	cmp	result1, #0 wz
0558c     EC 03 90 AD |  if_e	jmp	#LR__0432
05590     83 01 00 FF 
05594     E0 14 06 F6 | 	mov	arg02, ##@LR__5298
05598     0F 13 02 F6 | 	mov	arg01, local01
0559c     A4 B4 B1 FD | 	call	#__system___string_cmp
055a0     00 FA 0D F2 | 	cmp	result1, #0 wz
055a4     DC 03 90 AD |  if_e	jmp	#LR__0433
055a8     83 01 00 FF 
055ac     E5 14 06 F6 | 	mov	arg02, ##@LR__5299
055b0     0F 13 02 F6 | 	mov	arg01, local01
055b4     8C B4 B1 FD | 	call	#__system___string_cmp
055b8     00 FA 0D F2 | 	cmp	result1, #0 wz
055bc     CC 03 90 AD |  if_e	jmp	#LR__0434
055c0     83 01 00 FF 
055c4     E9 14 06 F6 | 	mov	arg02, ##@LR__5300
055c8     0F 13 02 F6 | 	mov	arg01, local01
055cc     74 B4 B1 FD | 	call	#__system___string_cmp
055d0     00 FA 0D F2 | 	cmp	result1, #0 wz
055d4     BC 03 90 AD |  if_e	jmp	#LR__0435
055d8     83 01 00 FF 
055dc     EE 14 06 F6 | 	mov	arg02, ##@LR__5301
055e0     0F 13 02 F6 | 	mov	arg01, local01
055e4     5C B4 B1 FD | 	call	#__system___string_cmp
055e8     00 FA 0D F2 | 	cmp	result1, #0 wz
055ec     AC 03 90 AD |  if_e	jmp	#LR__0436
055f0     83 01 00 FF 
055f4     F2 14 06 F6 | 	mov	arg02, ##@LR__5302
055f8     0F 13 02 F6 | 	mov	arg01, local01
055fc     44 B4 B1 FD | 	call	#__system___string_cmp
05600     00 FA 0D F2 | 	cmp	result1, #0 wz
05604     9C 03 90 AD |  if_e	jmp	#LR__0437
05608     83 01 00 FF 
0560c     F7 14 06 F6 | 	mov	arg02, ##@LR__5303
05610     0F 13 02 F6 | 	mov	arg01, local01
05614     2C B4 B1 FD | 	call	#__system___string_cmp
05618     00 FA 0D F2 | 	cmp	result1, #0 wz
0561c     8C 03 90 AD |  if_e	jmp	#LR__0438
05620     83 01 00 FF 
05624     FC 14 06 F6 | 	mov	arg02, ##@LR__5304
05628     0F 13 02 F6 | 	mov	arg01, local01
0562c     14 B4 B1 FD | 	call	#__system___string_cmp
05630     00 FA 0D F2 | 	cmp	result1, #0 wz
05634     7C 03 90 AD |  if_e	jmp	#LR__0439
05638     83 01 00 FF 
0563c     00 15 06 F6 | 	mov	arg02, ##@LR__5305
05640     0F 13 02 F6 | 	mov	arg01, local01
05644     FC B3 B1 FD | 	call	#__system___string_cmp
05648     00 FA 0D F2 | 	cmp	result1, #0 wz
0564c     6C 03 90 AD |  if_e	jmp	#LR__0440
05650     83 01 00 FF 
05654     06 15 06 F6 | 	mov	arg02, ##@LR__5306
05658     0F 13 02 F6 | 	mov	arg01, local01
0565c     E4 B3 B1 FD | 	call	#__system___string_cmp
05660     00 FA 0D F2 | 	cmp	result1, #0 wz
05664     5C 03 90 AD |  if_e	jmp	#LR__0441
05668     83 01 00 FF 
0566c     0A 15 06 F6 | 	mov	arg02, ##@LR__5307
05670     0F 13 02 F6 | 	mov	arg01, local01
05674     CC B3 B1 FD | 	call	#__system___string_cmp
05678     00 FA 0D F2 | 	cmp	result1, #0 wz
0567c     4C 03 90 AD |  if_e	jmp	#LR__0442
05680     83 01 00 FF 
05684     13 15 06 F6 | 	mov	arg02, ##@LR__5308
05688     0F 13 02 F6 | 	mov	arg01, local01
0568c     B4 B3 B1 FD | 	call	#__system___string_cmp
05690     00 FA 0D F2 | 	cmp	result1, #0 wz
05694     3C 03 90 AD |  if_e	jmp	#LR__0443
05698     83 01 00 FF 
0569c     17 15 06 F6 | 	mov	arg02, ##@LR__5309
056a0     0F 13 02 F6 | 	mov	arg01, local01
056a4     9C B3 B1 FD | 	call	#__system___string_cmp
056a8     00 FA 0D F2 | 	cmp	result1, #0 wz
056ac     2C 03 90 AD |  if_e	jmp	#LR__0444
056b0     83 01 00 FF 
056b4     25 15 06 F6 | 	mov	arg02, ##@LR__5310
056b8     0F 13 02 F6 | 	mov	arg01, local01
056bc     84 B3 B1 FD | 	call	#__system___string_cmp
056c0     00 FA 0D F2 | 	cmp	result1, #0 wz
056c4     1C 03 90 AD |  if_e	jmp	#LR__0445
056c8     83 01 00 FF 
056cc     32 15 06 F6 | 	mov	arg02, ##@LR__5311
056d0     0F 13 02 F6 | 	mov	arg01, local01
056d4     6C B3 B1 FD | 	call	#__system___string_cmp
056d8     00 FA 0D F2 | 	cmp	result1, #0 wz
056dc     0C 03 90 AD |  if_e	jmp	#LR__0446
056e0     83 01 00 FF 
056e4     3A 15 06 F6 | 	mov	arg02, ##@LR__5312
056e8     0F 13 02 F6 | 	mov	arg01, local01
056ec     54 B3 B1 FD | 	call	#__system___string_cmp
056f0     00 FA 0D F2 | 	cmp	result1, #0 wz
056f4     FC 02 90 AD |  if_e	jmp	#LR__0447
056f8     83 01 00 FF 
056fc     3F 15 06 F6 | 	mov	arg02, ##@LR__5313
05700     0F 13 02 F6 | 	mov	arg01, local01
05704     3C B3 B1 FD | 	call	#__system___string_cmp
05708     00 FA 0D F2 | 	cmp	result1, #0 wz
0570c     EC 02 90 AD |  if_e	jmp	#LR__0448
05710     83 01 00 FF 
05714     46 15 06 F6 | 	mov	arg02, ##@LR__5314
05718     0F 13 02 F6 | 	mov	arg01, local01
0571c     24 B3 B1 FD | 	call	#__system___string_cmp
05720     00 FA 0D F2 | 	cmp	result1, #0 wz
05724     DC 02 90 AD |  if_e	jmp	#LR__0449
05728     83 01 00 FF 
0572c     4A 15 06 F6 | 	mov	arg02, ##@LR__5315
05730     0F 13 02 F6 | 	mov	arg01, local01
05734     0C B3 B1 FD | 	call	#__system___string_cmp
05738     00 FA 0D F2 | 	cmp	result1, #0 wz
0573c     CC 02 90 AD |  if_e	jmp	#LR__0450
05740     83 01 00 FF 
05744     50 15 06 F6 | 	mov	arg02, ##@LR__5316
05748     0F 13 02 F6 | 	mov	arg01, local01
0574c     F4 B2 B1 FD | 	call	#__system___string_cmp
05750     00 FA 0D F2 | 	cmp	result1, #0 wz
05754     BC 02 90 AD |  if_e	jmp	#LR__0451
05758     83 01 00 FF 
0575c     54 15 06 F6 | 	mov	arg02, ##@LR__5317
05760     0F 13 02 F6 | 	mov	arg01, local01
05764     DC B2 B1 FD | 	call	#__system___string_cmp
05768     00 FA 0D F2 | 	cmp	result1, #0 wz
0576c     AC 02 90 AD |  if_e	jmp	#LR__0452
05770     83 01 00 FF 
05774     58 15 06 F6 | 	mov	arg02, ##@LR__5318
05778     0F 13 02 F6 | 	mov	arg01, local01
0577c     C4 B2 B1 FD | 	call	#__system___string_cmp
05780     00 FA 0D F2 | 	cmp	result1, #0 wz
05784     9C 02 90 AD |  if_e	jmp	#LR__0453
05788     83 01 00 FF 
0578c     5E 15 06 F6 | 	mov	arg02, ##@LR__5319
05790     0F 13 02 F6 | 	mov	arg01, local01
05794     AC B2 B1 FD | 	call	#__system___string_cmp
05798     00 FA 0D F2 | 	cmp	result1, #0 wz
0579c     8C 02 90 AD |  if_e	jmp	#LR__0454
057a0     83 01 00 FF 
057a4     63 15 06 F6 | 	mov	arg02, ##@LR__5320
057a8     0F 13 02 F6 | 	mov	arg01, local01
057ac     94 B2 B1 FD | 	call	#__system___string_cmp
057b0     00 FA 0D F2 | 	cmp	result1, #0 wz
057b4     7C 02 90 AD |  if_e	jmp	#LR__0455
057b8     83 01 00 FF 
057bc     6A 15 06 F6 | 	mov	arg02, ##@LR__5321
057c0     0F 13 02 F6 | 	mov	arg01, local01
057c4     7C B2 B1 FD | 	call	#__system___string_cmp
057c8     00 FA 0D F2 | 	cmp	result1, #0 wz
057cc     6C 02 90 AD |  if_e	jmp	#LR__0456
057d0     83 01 00 FF 
057d4     71 15 06 F6 | 	mov	arg02, ##@LR__5322
057d8     0F 13 02 F6 | 	mov	arg01, local01
057dc     64 B2 B1 FD | 	call	#__system___string_cmp
057e0     00 FA 0D F2 | 	cmp	result1, #0 wz
057e4     5C 02 90 AD |  if_e	jmp	#LR__0457
057e8     83 01 00 FF 
057ec     78 15 06 F6 | 	mov	arg02, ##@LR__5323
057f0     0F 13 02 F6 | 	mov	arg01, local01
057f4     4C B2 B1 FD | 	call	#__system___string_cmp
057f8     00 FA 0D F2 | 	cmp	result1, #0 wz
057fc     4C 02 90 AD |  if_e	jmp	#LR__0458
05800     83 01 00 FF 
05804     7F 15 06 F6 | 	mov	arg02, ##@LR__5324
05808     0F 13 02 F6 | 	mov	arg01, local01
0580c     34 B2 B1 FD | 	call	#__system___string_cmp
05810     00 FA 0D F2 | 	cmp	result1, #0 wz
05814     3C 02 90 AD |  if_e	jmp	#LR__0459
05818     83 01 00 FF 
0581c     84 15 06 F6 | 	mov	arg02, ##@LR__5325
05820     0F 13 02 F6 | 	mov	arg01, local01
05824     1C B2 B1 FD | 	call	#__system___string_cmp
05828     00 FA 0D F2 | 	cmp	result1, #0 wz
0582c     2C 02 90 AD |  if_e	jmp	#LR__0460
05830     83 01 00 FF 
05834     8C 15 06 F6 | 	mov	arg02, ##@LR__5326
05838     0F 13 02 F6 | 	mov	arg01, local01
0583c     04 B2 B1 FD | 	call	#__system___string_cmp
05840     00 FA 0D F2 | 	cmp	result1, #0 wz
05844     1C 02 90 AD |  if_e	jmp	#LR__0461
05848     83 01 00 FF 
0584c     92 15 06 F6 | 	mov	arg02, ##@LR__5327
05850     0F 13 02 F6 | 	mov	arg01, local01
05854     EC B1 B1 FD | 	call	#__system___string_cmp
05858     00 FA 0D F2 | 	cmp	result1, #0 wz
0585c     0C 02 90 AD |  if_e	jmp	#LR__0462
05860     83 01 00 FF 
05864     99 15 06 F6 | 	mov	arg02, ##@LR__5328
05868     0F 13 02 F6 | 	mov	arg01, local01
0586c     D4 B1 B1 FD | 	call	#__system___string_cmp
05870     00 FA 0D F2 | 	cmp	result1, #0 wz
05874     FC 01 90 AD |  if_e	jmp	#LR__0463
05878     83 01 00 FF 
0587c     9F 15 06 F6 | 	mov	arg02, ##@LR__5329
05880     0F 13 02 F6 | 	mov	arg01, local01
05884     BC B1 B1 FD | 	call	#__system___string_cmp
05888     00 FA 0D F2 | 	cmp	result1, #0 wz
0588c     EC 01 90 AD |  if_e	jmp	#LR__0464
05890     83 01 00 FF 
05894     A5 15 06 F6 | 	mov	arg02, ##@LR__5330
05898     0F 13 02 F6 | 	mov	arg01, local01
0589c     A4 B1 B1 FD | 	call	#__system___string_cmp
058a0     00 FA 0D F2 | 	cmp	result1, #0 wz
058a4     DC 01 90 AD |  if_e	jmp	#LR__0465
058a8     83 01 00 FF 
058ac     A9 15 06 F6 | 	mov	arg02, ##@LR__5331
058b0     0F 13 02 F6 | 	mov	arg01, local01
058b4     8C B1 B1 FD | 	call	#__system___string_cmp
058b8     00 FA 0D F2 | 	cmp	result1, #0 wz
058bc     CC 01 90 AD |  if_e	jmp	#LR__0466
058c0     83 01 00 FF 
058c4     AD 15 06 F6 | 	mov	arg02, ##@LR__5332
058c8     0F 13 02 F6 | 	mov	arg01, local01
058cc     74 B1 B1 FD | 	call	#__system___string_cmp
058d0     00 FA 0D F2 | 	cmp	result1, #0 wz
058d4     BC 01 90 AD |  if_e	jmp	#LR__0467
058d8     83 01 00 FF 
058dc     B1 15 06 F6 | 	mov	arg02, ##@LR__5333
058e0     0F 13 02 F6 | 	mov	arg01, local01
058e4     5C B1 B1 FD | 	call	#__system___string_cmp
058e8     00 FA 0D F2 | 	cmp	result1, #0 wz
058ec     AC 01 90 AD |  if_e	jmp	#LR__0468
058f0     83 01 00 FF 
058f4     B7 15 06 F6 | 	mov	arg02, ##@LR__5334
058f8     0F 13 02 F6 | 	mov	arg01, local01
058fc     44 B1 B1 FD | 	call	#__system___string_cmp
05900     00 FA 0D F2 | 	cmp	result1, #0 wz
05904     9C 01 90 AD |  if_e	jmp	#LR__0469
05908     83 01 00 FF 
0590c     BD 15 06 F6 | 	mov	arg02, ##@LR__5335
05910     0F 13 02 F6 | 	mov	arg01, local01
05914     2C B1 B1 FD | 	call	#__system___string_cmp
05918     00 FA 0D F2 | 	cmp	result1, #0 wz
0591c     8C 01 90 AD |  if_e	jmp	#LR__0470
05920     83 01 00 FF 
05924     C2 15 06 F6 | 	mov	arg02, ##@LR__5336
05928     0F 13 02 F6 | 	mov	arg01, local01
0592c     14 B1 B1 FD | 	call	#__system___string_cmp
05930     00 FA 0D F2 | 	cmp	result1, #0 wz
05934     7C 01 90 AD |  if_e	jmp	#LR__0471
05938     83 01 00 FF 
0593c     C6 15 06 F6 | 	mov	arg02, ##@LR__5337
05940     0F 13 02 F6 | 	mov	arg01, local01
05944     FC B0 B1 FD | 	call	#__system___string_cmp
05948     00 FA 0D F2 | 	cmp	result1, #0 wz
0594c     6C 01 90 AD |  if_e	jmp	#LR__0472
05950     83 01 00 FF 
05954     CA 15 06 F6 | 	mov	arg02, ##@LR__5338
05958     0F 13 02 F6 | 	mov	arg01, local01
0595c     E4 B0 B1 FD | 	call	#__system___string_cmp
05960     00 FA 0D F2 | 	cmp	result1, #0 wz
05964     5C 01 90 AD |  if_e	jmp	#LR__0473
05968     60 01 90 FD | 	jmp	#LR__0474
0596c                 | LR__0430
0596c     9E FA 05 F6 | 	mov	result1, #158
05970     5C 01 90 FD | 	jmp	#LR__0475
05974                 | LR__0431
05974     85 FA 05 F6 | 	mov	result1, #133
05978     54 01 90 FD | 	jmp	#LR__0475
0597c                 | LR__0432
0597c     9B FA 05 F6 | 	mov	result1, #155
05980     4C 01 90 FD | 	jmp	#LR__0475
05984                 | LR__0433
05984     9B FA 05 F6 | 	mov	result1, #155
05988     44 01 90 FD | 	jmp	#LR__0475
0598c                 | LR__0434
0598c     A7 FA 05 F6 | 	mov	result1, #167
05990     3C 01 90 FD | 	jmp	#LR__0475
05994                 | LR__0435
05994     84 FA 05 F6 | 	mov	result1, #132
05998     34 01 90 FD | 	jmp	#LR__0475
0599c                 | LR__0436
0599c     86 FA 05 F6 | 	mov	result1, #134
059a0     2C 01 90 FD | 	jmp	#LR__0475
059a4                 | LR__0437
059a4     A2 FA 05 F6 | 	mov	result1, #162
059a8     24 01 90 FD | 	jmp	#LR__0475
059ac                 | LR__0438
059ac     9F FA 05 F6 | 	mov	result1, #159
059b0     1C 01 90 FD | 	jmp	#LR__0475
059b4                 | LR__0439
059b4     82 FA 05 F6 | 	mov	result1, #130
059b8     14 01 90 FD | 	jmp	#LR__0475
059bc                 | LR__0440
059bc     99 FA 05 F6 | 	mov	result1, #153
059c0     0C 01 90 FD | 	jmp	#LR__0475
059c4                 | LR__0441
059c4     9C FA 05 F6 | 	mov	result1, #156
059c8     04 01 90 FD | 	jmp	#LR__0475
059cc                 | LR__0442
059cc     6F FA 05 F6 | 	mov	result1, #111
059d0     FC 00 90 FD | 	jmp	#LR__0475
059d4                 | LR__0443
059d4     6F FA 05 F6 | 	mov	result1, #111
059d8     F4 00 90 FD | 	jmp	#LR__0475
059dc                 | LR__0444
059dc     93 FA 05 F6 | 	mov	result1, #147
059e0     EC 00 90 FD | 	jmp	#LR__0475
059e4                 | LR__0445
059e4     94 FA 05 F6 | 	mov	result1, #148
059e8     E4 00 90 FD | 	jmp	#LR__0475
059ec                 | LR__0446
059ec     62 FA 05 F6 | 	mov	result1, #98
059f0     DC 00 90 FD | 	jmp	#LR__0475
059f4                 | LR__0447
059f4     A3 FA 05 F6 | 	mov	result1, #163
059f8     D4 00 90 FD | 	jmp	#LR__0475
059fc                 | LR__0448
059fc     9D FA 05 F6 | 	mov	result1, #157
05a00     CC 00 90 FD | 	jmp	#LR__0475
05a04                 | LR__0449
05a04     8A FA 05 F6 | 	mov	result1, #138
05a08     C4 00 90 FD | 	jmp	#LR__0475
05a0c                 | LR__0450
05a0c     A4 FA 05 F6 | 	mov	result1, #164
05a10     BC 00 90 FD | 	jmp	#LR__0475
05a14                 | LR__0451
05a14     A8 FA 05 F6 | 	mov	result1, #168
05a18     B4 00 90 FD | 	jmp	#LR__0475
05a1c                 | LR__0452
05a1c     AD FA 05 F6 | 	mov	result1, #173
05a20     AC 00 90 FD | 	jmp	#LR__0475
05a24                 | LR__0453
05a24     9A FA 05 F6 | 	mov	result1, #154
05a28     A4 00 90 FD | 	jmp	#LR__0475
05a2c                 | LR__0454
05a2c     A6 FA 05 F6 | 	mov	result1, #166
05a30     9C 00 90 FD | 	jmp	#LR__0475
05a34                 | LR__0455
05a34     66 FA 05 F6 | 	mov	result1, #102
05a38     94 00 90 FD | 	jmp	#LR__0475
05a3c                 | LR__0456
05a3c     67 FA 05 F6 | 	mov	result1, #103
05a40     8C 00 90 FD | 	jmp	#LR__0475
05a44                 | LR__0457
05a44     64 FA 05 F6 | 	mov	result1, #100
05a48     84 00 90 FD | 	jmp	#LR__0475
05a4c                 | LR__0458
05a4c     65 FA 05 F6 | 	mov	result1, #101
05a50     7C 00 90 FD | 	jmp	#LR__0475
05a54                 | LR__0459
05a54     98 FA 05 F6 | 	mov	result1, #152
05a58     74 00 90 FD | 	jmp	#LR__0475
05a5c                 | LR__0460
05a5c     7B FA 05 F6 | 	mov	result1, #123
05a60     6C 00 90 FD | 	jmp	#LR__0475
05a64                 | LR__0461
05a64     76 FA 05 F6 | 	mov	result1, #118
05a68     64 00 90 FD | 	jmp	#LR__0475
05a6c                 | LR__0462
05a6c     A5 FA 05 F6 | 	mov	result1, #165
05a70     5C 00 90 FD | 	jmp	#LR__0475
05a74                 | LR__0463
05a74     7A FA 05 F6 | 	mov	result1, #122
05a78     54 00 90 FD | 	jmp	#LR__0475
05a7c                 | LR__0464
05a7c     BF FA 05 F6 | 	mov	result1, #191
05a80     4C 00 90 FD | 	jmp	#LR__0475
05a84                 | LR__0465
05a84     54 FA 05 F6 | 	mov	result1, #84
05a88     44 00 90 FD | 	jmp	#LR__0475
05a8c                 | LR__0466
05a8c     6B FA 05 F6 | 	mov	result1, #107
05a90     3C 00 90 FD | 	jmp	#LR__0475
05a94                 | LR__0467
05a94     87 FA 05 F6 | 	mov	result1, #135
05a98     34 00 90 FD | 	jmp	#LR__0475
05a9c                 | LR__0468
05a9c     6A FA 05 F6 | 	mov	result1, #106
05aa0     2C 00 90 FD | 	jmp	#LR__0475
05aa4                 | LR__0469
05aa4     6E FA 05 F6 | 	mov	result1, #110
05aa8     24 00 90 FD | 	jmp	#LR__0475
05aac                 | LR__0470
05aac     A1 FA 05 F6 | 	mov	result1, #161
05ab0     1C 00 90 FD | 	jmp	#LR__0475
05ab4                 | LR__0471
05ab4     83 FA 05 F6 | 	mov	result1, #131
05ab8     14 00 90 FD | 	jmp	#LR__0475
05abc                 | LR__0472
05abc     A0 FA 05 F6 | 	mov	result1, #160
05ac0     0C 00 90 FD | 	jmp	#LR__0475
05ac4                 | LR__0473
05ac4     9B FA 05 F6 | 	mov	result1, #155
05ac8     04 00 90 FD | 	jmp	#LR__0475
05acc                 | LR__0474
05acc     00 FA 05 F6 | 	mov	result1, #0
05ad0                 | LR__0475
05ad0     A7 F0 03 F6 | 	mov	ptra, fp
05ad4     B2 00 A0 FD | 	call	#popregs_
05ad8                 | _isfunction_ret
05ad8     2D 00 64 FD | 	ret
05adc                 | 
05adc                 | ' 
05adc                 | ' ' Check if the part is a name
05adc                 | ' 
05adc                 | ' function isname(s as string) as boolean
05adc                 | _isname
05adc     0D 4A 05 F6 | 	mov	COUNT_, #13
05ae0     A8 00 A0 FD | 	call	#pushregs_
05ae4     09 1F 02 F6 | 	mov	local01, arg01
05ae8     09 21 02 F6 | 	mov	local02, arg01
05aec     97 06 48 FB | 	callpa	#(@LR__0481-@LR__0480)>>2,fcache_load_ptr_
05af0                 | LR__0480
05af0     10 FB C9 FA | 	rdbyte	result1, local02 wz
05af4     01 20 06 51 |  if_ne	add	local02, #1
05af8     F4 FF 9F 5D |  if_ne	jmp	#LR__0480
05afc                 | LR__0481
05afc     09 21 82 F1 | 	sub	local02, arg01
05b00     10 FB 01 F6 | 	mov	result1, local02
05b04     FD 22 0A F6 | 	mov	local03, result1 wz
05b08     00 FA 05 A6 |  if_e	mov	result1, #0
05b0c     34 02 90 AD |  if_e	jmp	#LR__0493
05b10     0F 13 02 F6 | 	mov	arg01, local01
05b14     01 14 06 F6 | 	mov	arg02, #1
05b18     01 16 06 F6 | 	mov	arg03, #1
05b1c     90 D0 B1 FD | 	call	#__system__Mid_S
05b20     FD 24 02 F6 | 	mov	local04, result1
05b24                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
05b24     83 01 00 FF 
05b28     D1 15 06 F6 | 	mov	arg02, ##@LR__5339
05b2c     12 13 02 F6 | 	mov	arg01, local04
05b30     10 AF B1 FD | 	call	#__system___string_cmp
05b34     00 FA 55 F2 | 	cmps	result1, #0 wc
05b38     18 00 90 CD |  if_b	jmp	#LR__0482
05b3c     83 01 00 FF 
05b40     D3 15 06 F6 | 	mov	arg02, ##@LR__5340
05b44     12 13 02 F6 | 	mov	arg01, local04
05b48     F8 AE B1 FD | 	call	#__system___string_cmp
05b4c     01 FA 55 F2 | 	cmps	result1, #1 wc
05b50     1C 00 90 CD |  if_b	jmp	#LR__0483
05b54                 | LR__0482
05b54     83 01 00 FF 
05b58     D5 15 06 F6 | 	mov	arg02, ##@LR__5341
05b5c     12 13 02 F6 | 	mov	arg01, local04
05b60     E0 AE B1 FD | 	call	#__system___string_cmp
05b64     00 FA 0D F2 | 	cmp	result1, #0 wz
05b68     00 FA 05 56 |  if_ne	mov	result1, #0
05b6c     D4 01 90 5D |  if_ne	jmp	#LR__0493
05b70                 | LR__0483
05b70                 | ' if l>2 then 
05b70     03 22 56 F2 | 	cmps	local03, #3 wc
05b74     C8 01 90 CD |  if_b	jmp	#LR__0492
05b78                 | '   for i=2 to l
05b78     02 26 06 F6 | 	mov	local05, #2
05b7c     11 29 02 F6 | 	mov	local06, local03
05b80     01 28 06 F1 | 	add	local06, #1
05b84                 | LR__0484
05b84     14 27 52 F2 | 	cmps	local05, local06 wc
05b88     B4 01 90 3D |  if_ae	jmp	#LR__0491
05b8c     0F 13 02 F6 | 	mov	arg01, local01
05b90     13 15 02 F6 | 	mov	arg02, local05
05b94     01 16 06 F6 | 	mov	arg03, #1
05b98     14 D0 B1 FD | 	call	#__system__Mid_S
05b9c     FD 24 02 F6 | 	mov	local04, result1
05ba0                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
05ba0     11 27 52 F2 | 	cmps	local05, local03 wc
05ba4     9C 00 90 3D |  if_ae	jmp	#LR__0487
05ba8     83 01 00 FF 
05bac     D7 15 06 F6 | 	mov	arg02, ##@LR__5342
05bb0     12 13 02 F6 | 	mov	arg01, local04
05bb4     8C AE B1 FD | 	call	#__system___string_cmp
05bb8     00 FA 55 F2 | 	cmps	result1, #0 wc
05bbc     18 00 90 CD |  if_b	jmp	#LR__0485
05bc0     83 01 00 FF 
05bc4     D9 15 06 F6 | 	mov	arg02, ##@LR__5343
05bc8     12 13 02 F6 | 	mov	arg01, local04
05bcc     74 AE B1 FD | 	call	#__system___string_cmp
05bd0     01 FA 55 F2 | 	cmps	result1, #1 wc
05bd4     6C 00 90 CD |  if_b	jmp	#LR__0487
05bd8                 | LR__0485
05bd8     83 01 00 FF 
05bdc     DB 15 06 F6 | 	mov	arg02, ##@LR__5344
05be0     12 13 02 F6 | 	mov	arg01, local04
05be4     5C AE B1 FD | 	call	#__system___string_cmp
05be8     00 FA 55 F2 | 	cmps	result1, #0 wc
05bec     18 00 90 CD |  if_b	jmp	#LR__0486
05bf0     83 01 00 FF 
05bf4     DD 15 06 F6 | 	mov	arg02, ##@LR__5345
05bf8     12 13 02 F6 | 	mov	arg01, local04
05bfc     44 AE B1 FD | 	call	#__system___string_cmp
05c00     01 FA 55 F2 | 	cmps	result1, #1 wc
05c04     3C 00 90 CD |  if_b	jmp	#LR__0487
05c08                 | LR__0486
05c08     83 01 00 FF 
05c0c     DF 2B 06 F6 | 	mov	local07, ##@LR__5346
05c10     12 13 02 F6 | 	mov	arg01, local04
05c14     15 15 02 F6 | 	mov	arg02, local07
05c18     28 AE B1 FD | 	call	#__system___string_cmp
05c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
05c20     20 00 90 AD |  if_e	jmp	#LR__0487
05c24     83 01 00 FF 
05c28     E1 2D 06 F6 | 	mov	local08, ##@LR__5347
05c2c     12 13 02 F6 | 	mov	arg01, local04
05c30     16 15 02 F6 | 	mov	arg02, local08
05c34     0C AE B1 FD | 	call	#__system___string_cmp
05c38     FD 2E 0A F6 | 	mov	local09, result1 wz
05c3c     00 FA 05 56 |  if_ne	mov	result1, #0
05c40     00 01 90 5D |  if_ne	jmp	#LR__0493
05c44                 | LR__0487
05c44                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
05c44     11 27 0A F2 | 	cmp	local05, local03 wz
05c48     EC 00 90 5D |  if_ne	jmp	#LR__0490
05c4c     83 01 00 FF 
05c50     E3 31 06 F6 | 	mov	local10, ##@LR__5348
05c54     12 13 02 F6 | 	mov	arg01, local04
05c58     18 15 02 F6 | 	mov	arg02, local10
05c5c     E4 AD B1 FD | 	call	#__system___string_cmp
05c60     FD 32 02 F6 | 	mov	local11, result1
05c64     00 32 56 F2 | 	cmps	local11, #0 wc
05c68     1C 00 90 CD |  if_b	jmp	#LR__0488
05c6c     83 01 00 FF 
05c70     E5 15 06 F6 | 	mov	arg02, ##@LR__5349
05c74     12 13 02 F6 | 	mov	arg01, local04
05c78     C8 AD B1 FD | 	call	#__system___string_cmp
05c7c     FD 30 02 F6 | 	mov	local10, result1
05c80     01 30 56 F2 | 	cmps	local10, #1 wc
05c84     B0 00 90 CD |  if_b	jmp	#LR__0490
05c88                 | LR__0488
05c88     83 01 00 FF 
05c8c     E7 15 06 F6 | 	mov	arg02, ##@LR__5350
05c90     12 13 02 F6 | 	mov	arg01, local04
05c94     AC AD B1 FD | 	call	#__system___string_cmp
05c98     00 FA 55 F2 | 	cmps	result1, #0 wc
05c9c     1C 00 90 CD |  if_b	jmp	#LR__0489
05ca0     83 01 00 FF 
05ca4     E9 2F 06 F6 | 	mov	local09, ##@LR__5351
05ca8     12 13 02 F6 | 	mov	arg01, local04
05cac     17 15 02 F6 | 	mov	arg02, local09
05cb0     90 AD B1 FD | 	call	#__system___string_cmp
05cb4     01 FA 55 F2 | 	cmps	result1, #1 wc
05cb8     7C 00 90 CD |  if_b	jmp	#LR__0490
05cbc                 | LR__0489
05cbc     83 01 00 FF 
05cc0     EB 2F 06 F6 | 	mov	local09, ##@LR__5352
05cc4     12 13 02 F6 | 	mov	arg01, local04
05cc8     17 15 02 F6 | 	mov	arg02, local09
05ccc     74 AD B1 FD | 	call	#__system___string_cmp
05cd0     00 FA 4D F2 | 	cmps	result1, #0 wz
05cd4     60 00 90 AD |  if_e	jmp	#LR__0490
05cd8     83 01 00 FF 
05cdc     ED 2D 06 F6 | 	mov	local08, ##@LR__5353
05ce0     12 13 02 F6 | 	mov	arg01, local04
05ce4     16 15 02 F6 | 	mov	arg02, local08
05ce8     58 AD B1 FD | 	call	#__system___string_cmp
05cec     FD 2E 0A F6 | 	mov	local09, result1 wz
05cf0     44 00 90 AD |  if_e	jmp	#LR__0490
05cf4     83 01 00 FF 
05cf8     EF 35 06 F6 | 	mov	local12, ##@LR__5354
05cfc     1A 2D 02 F6 | 	mov	local08, local12
05d00     12 13 02 F6 | 	mov	arg01, local04
05d04     16 15 02 F6 | 	mov	arg02, local08
05d08     38 AD B1 FD | 	call	#__system___string_cmp
05d0c     FD 2A 0A F6 | 	mov	local07, result1 wz
05d10     24 00 90 AD |  if_e	jmp	#LR__0490
05d14     83 01 00 FF 
05d18     F1 37 06 F6 | 	mov	local13, ##@LR__5355
05d1c     1B 35 02 F6 | 	mov	local12, local13
05d20     12 13 02 F6 | 	mov	arg01, local04
05d24     1A 15 02 F6 | 	mov	arg02, local12
05d28     18 AD B1 FD | 	call	#__system___string_cmp
05d2c     FD 2C 0A F6 | 	mov	local08, result1 wz
05d30     00 FA 05 56 |  if_ne	mov	result1, #0
05d34     0C 00 90 5D |  if_ne	jmp	#LR__0493
05d38                 | LR__0490
05d38     01 26 06 F1 | 	add	local05, #1
05d3c     44 FE 9F FD | 	jmp	#LR__0484
05d40                 | LR__0491
05d40                 | LR__0492
05d40                 | ' return true
05d40     01 FA 65 F6 | 	neg	result1, #1
05d44                 | LR__0493
05d44     A7 F0 03 F6 | 	mov	ptra, fp
05d48     B2 00 A0 FD | 	call	#popregs_
05d4c                 | _isname_ret
05d4c     2D 00 64 FD | 	ret
05d50                 | 
05d50                 | ' 
05d50                 | ' ' Check if the part is a number.  
05d50                 | ' 
05d50                 | ' function isnum(s as string) as boolean 
05d50                 | _isnum
05d50     13 4A 05 F6 | 	mov	COUNT_, #19
05d54     A8 00 A0 FD | 	call	#pushregs_
05d58     09 1F 02 F6 | 	mov	local01, arg01
05d5c     00 20 06 F6 | 	mov	local02, #0
05d60     00 22 06 F6 | 	mov	local03, #0
05d64     0F 13 02 F6 | 	mov	arg01, local01
05d68     09 25 02 F6 | 	mov	local04, arg01
05d6c     97 06 48 FB | 	callpa	#(@LR__0501-@LR__0500)>>2,fcache_load_ptr_
05d70                 | LR__0500
05d70     12 FB C9 FA | 	rdbyte	result1, local04 wz
05d74     01 24 06 51 |  if_ne	add	local04, #1
05d78     F4 FF 9F 5D |  if_ne	jmp	#LR__0500
05d7c                 | LR__0501
05d7c     09 25 82 F1 | 	sub	local04, arg01
05d80     12 FB 01 F6 | 	mov	result1, local04
05d84     FD 26 0A F6 | 	mov	local05, result1 wz
05d88     00 FA 05 A6 |  if_e	mov	result1, #0
05d8c     A0 03 90 AD |  if_e	jmp	#LR__0516
05d90     0F 13 02 F6 | 	mov	arg01, local01
05d94     01 14 06 F6 | 	mov	arg02, #1
05d98     01 16 06 F6 | 	mov	arg03, #1
05d9c     10 CE B1 FD | 	call	#__system__Mid_S
05da0     FD 28 02 F6 | 	mov	local06, result1
05da4                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
05da4     83 01 00 FF 
05da8     F3 15 06 F6 | 	mov	arg02, ##@LR__5356
05dac     14 13 02 F6 | 	mov	arg01, local06
05db0     90 AC B1 FD | 	call	#__system___string_cmp
05db4     00 FA 55 F2 | 	cmps	result1, #0 wc
05db8     1C 00 90 CD |  if_b	jmp	#LR__0502
05dbc     83 01 00 FF 
05dc0     F5 2B 06 F6 | 	mov	local07, ##@LR__5357
05dc4     14 13 02 F6 | 	mov	arg01, local06
05dc8     15 15 02 F6 | 	mov	arg02, local07
05dcc     74 AC B1 FD | 	call	#__system___string_cmp
05dd0     01 FA 55 F2 | 	cmps	result1, #1 wc
05dd4     84 00 90 CD |  if_b	jmp	#LR__0503
05dd8                 | LR__0502
05dd8     83 01 00 FF 
05ddc     F7 2D 06 F6 | 	mov	local08, ##@LR__5358
05de0     16 2B 02 F6 | 	mov	local07, local08
05de4     14 13 02 F6 | 	mov	arg01, local06
05de8     15 15 02 F6 | 	mov	arg02, local07
05dec     54 AC B1 FD | 	call	#__system___string_cmp
05df0     00 FA 0D F2 | 	cmp	result1, #0 wz
05df4     64 00 90 AD |  if_e	jmp	#LR__0503
05df8     83 01 00 FF 
05dfc     F9 2F 06 F6 | 	mov	local09, ##@LR__5359
05e00     17 2D 02 F6 | 	mov	local08, local09
05e04     14 13 02 F6 | 	mov	arg01, local06
05e08     16 15 02 F6 | 	mov	arg02, local08
05e0c     34 AC B1 FD | 	call	#__system___string_cmp
05e10     FD 2A 0A F6 | 	mov	local07, result1 wz
05e14     44 00 90 AD |  if_e	jmp	#LR__0503
05e18     83 01 00 FF 
05e1c     FB 31 06 F6 | 	mov	local10, ##@LR__5360
05e20     18 2F 02 F6 | 	mov	local09, local10
05e24     14 13 02 F6 | 	mov	arg01, local06
05e28     17 15 02 F6 | 	mov	arg02, local09
05e2c     14 AC B1 FD | 	call	#__system___string_cmp
05e30     FD 2C 0A F6 | 	mov	local08, result1 wz
05e34     24 00 90 AD |  if_e	jmp	#LR__0503
05e38     83 01 00 FF 
05e3c     FD 33 06 F6 | 	mov	local11, ##@LR__5361
05e40     19 31 02 F6 | 	mov	local10, local11
05e44     14 13 02 F6 | 	mov	arg01, local06
05e48     18 15 02 F6 | 	mov	arg02, local10
05e4c     F4 AB B1 FD | 	call	#__system___string_cmp
05e50     FD 2E 0A F6 | 	mov	local09, result1 wz
05e54     00 FA 05 56 |  if_ne	mov	result1, #0
05e58     D4 02 90 5D |  if_ne	jmp	#LR__0516
05e5c                 | LR__0503
05e5c                 | ' if m$="." then ds=1
05e5c     83 01 00 FF 
05e60     FF 15 06 F6 | 	mov	arg02, ##@LR__5362
05e64     14 13 02 F6 | 	mov	arg01, local06
05e68     D8 AB B1 FD | 	call	#__system___string_cmp
05e6c     00 FA 0D F2 | 	cmp	result1, #0 wz
05e70     01 20 06 A6 |  if_e	mov	local02, #1
05e74                 | ' if m$="$" then hex=1 else hex=0
05e74     84 01 00 FF 
05e78     01 14 06 F6 | 	mov	arg02, ##@LR__5363
05e7c     14 13 02 F6 | 	mov	arg01, local06
05e80     C0 AB B1 FD | 	call	#__system___string_cmp
05e84     00 FA 0D F2 | 	cmp	result1, #0 wz
05e88     01 34 06 A6 |  if_e	mov	local12, #1
05e8c     00 34 06 56 |  if_ne	mov	local12, #0
05e90                 | ' if m$="%" then bin=1 else bin=0
05e90     84 01 00 FF 
05e94     03 14 06 F6 | 	mov	arg02, ##@LR__5364
05e98     14 13 02 F6 | 	mov	arg01, local06
05e9c     A4 AB B1 FD | 	call	#__system___string_cmp
05ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ea4     01 36 06 A6 |  if_e	mov	local13, #1
05ea8     00 36 06 56 |  if_ne	mov	local13, #0
05eac                 | ' if l>1 then 
05eac     02 26 56 F2 | 	cmps	local05, #2 wc
05eb0     78 02 90 CD |  if_b	jmp	#LR__0515
05eb4                 | '   for i=2 to l
05eb4     02 38 06 F6 | 	mov	local14, #2
05eb8     13 3B 02 F6 | 	mov	local15, local05
05ebc     01 3A 06 F1 | 	add	local15, #1
05ec0                 | LR__0504
05ec0     1D 39 52 F2 | 	cmps	local14, local15 wc
05ec4     64 02 90 3D |  if_ae	jmp	#LR__0514
05ec8     0F 13 02 F6 | 	mov	arg01, local01
05ecc     1C 15 02 F6 | 	mov	arg02, local14
05ed0     01 16 06 F6 | 	mov	arg03, #1
05ed4     D8 CC B1 FD | 	call	#__system__Mid_S
05ed8     FD 28 02 F6 | 	mov	local06, result1
05edc     00 3C 06 F6 | 	mov	local16, #0
05ee0                 | '     m$=mid$(s,i,1) : b=false
05ee0                 | '     if m$>="0" andalso m$<="9" then b=true  
05ee0     84 01 00 FF 
05ee4     05 14 06 F6 | 	mov	arg02, ##@LR__5365
05ee8     14 13 02 F6 | 	mov	arg01, local06
05eec     54 AB B1 FD | 	call	#__system___string_cmp
05ef0     00 FA 55 F2 | 	cmps	result1, #0 wc
05ef4     1C 00 90 CD |  if_b	jmp	#LR__0505
05ef8     84 01 00 FF 
05efc     07 2A 06 F6 | 	mov	local07, ##@LR__5366
05f00     14 13 02 F6 | 	mov	arg01, local06
05f04     15 15 02 F6 | 	mov	arg02, local07
05f08     38 AB B1 FD | 	call	#__system___string_cmp
05f0c     01 FA 55 F2 | 	cmps	result1, #1 wc
05f10     01 3C 66 C6 |  if_b	neg	local16, #1
05f14                 | LR__0505
05f14                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
05f14     84 01 00 FF 
05f18     09 14 06 F6 | 	mov	arg02, ##@LR__5367
05f1c     14 13 02 F6 | 	mov	arg01, local06
05f20     20 AB B1 FD | 	call	#__system___string_cmp
05f24     00 FA 0D F2 | 	cmp	result1, #0 wz
05f28     7C 00 90 AD |  if_e	jmp	#LR__0506
05f2c     84 01 00 FF 
05f30     0B 2A 06 F6 | 	mov	local07, ##@LR__5368
05f34     14 13 02 F6 | 	mov	arg01, local06
05f38     15 15 02 F6 | 	mov	arg02, local07
05f3c     04 AB B1 FD | 	call	#__system___string_cmp
05f40     00 FA 0D F2 | 	cmp	result1, #0 wz
05f44     60 00 90 AD |  if_e	jmp	#LR__0506
05f48     84 01 00 FF 
05f4c     0D 2C 06 F6 | 	mov	local08, ##@LR__5369
05f50     16 2B 02 F6 | 	mov	local07, local08
05f54     14 13 02 F6 | 	mov	arg01, local06
05f58     15 15 02 F6 | 	mov	arg02, local07
05f5c     E4 AA B1 FD | 	call	#__system___string_cmp
05f60     00 FA 0D F2 | 	cmp	result1, #0 wz
05f64     40 00 90 AD |  if_e	jmp	#LR__0506
05f68     84 01 00 FF 
05f6c     0F 2E 06 F6 | 	mov	local09, ##@LR__5370
05f70     17 2D 02 F6 | 	mov	local08, local09
05f74     14 13 02 F6 | 	mov	arg01, local06
05f78     16 15 02 F6 | 	mov	arg02, local08
05f7c     C4 AA B1 FD | 	call	#__system___string_cmp
05f80     FD 2A 0A F6 | 	mov	local07, result1 wz
05f84     20 00 90 AD |  if_e	jmp	#LR__0506
05f88     84 01 00 FF 
05f8c     11 30 06 F6 | 	mov	local10, ##@LR__5371
05f90     18 2F 02 F6 | 	mov	local09, local10
05f94     14 13 02 F6 | 	mov	arg01, local06
05f98     17 15 02 F6 | 	mov	arg02, local09
05f9c     A4 AA B1 FD | 	call	#__system___string_cmp
05fa0     FD 2C 0A F6 | 	mov	local08, result1 wz
05fa4     04 00 90 5D |  if_ne	jmp	#LR__0507
05fa8                 | LR__0506
05fa8     01 3C 66 F6 | 	neg	local16, #1
05fac                 | LR__0507
05fac                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
05fac     01 34 0E F2 | 	cmp	local12, #1 wz
05fb0     34 00 90 5D |  if_ne	jmp	#LR__0508
05fb4     84 01 00 FF 
05fb8     13 14 06 F6 | 	mov	arg02, ##@LR__5372
05fbc     14 13 02 F6 | 	mov	arg01, local06
05fc0     80 AA B1 FD | 	call	#__system___string_cmp
05fc4     00 FA 55 F2 | 	cmps	result1, #0 wc
05fc8     1C 00 90 CD |  if_b	jmp	#LR__0508
05fcc     84 01 00 FF 
05fd0     15 2A 06 F6 | 	mov	local07, ##@LR__5373
05fd4     14 13 02 F6 | 	mov	arg01, local06
05fd8     15 15 02 F6 | 	mov	arg02, local07
05fdc     64 AA B1 FD | 	call	#__system___string_cmp
05fe0     01 FA 55 F2 | 	cmps	result1, #1 wc
05fe4     01 3C 66 C6 |  if_b	neg	local16, #1
05fe8                 | LR__0508
05fe8                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
05fe8     01 36 0E F2 | 	cmp	local13, #1 wz
05fec     58 00 90 5D |  if_ne	jmp	#LR__0510
05ff0     84 01 00 FF 
05ff4     17 14 06 F6 | 	mov	arg02, ##@LR__5374
05ff8     14 13 02 F6 | 	mov	arg01, local06
05ffc     44 AA B1 FD | 	call	#__system___string_cmp
06000     00 FA 55 F2 | 	cmps	result1, #0 wc
06004     1C 00 90 CD |  if_b	jmp	#LR__0509
06008     84 01 00 FF 
0600c     19 2A 06 F6 | 	mov	local07, ##@LR__5375
06010     14 13 02 F6 | 	mov	arg01, local06
06014     15 15 02 F6 | 	mov	arg02, local07
06018     28 AA B1 FD | 	call	#__system___string_cmp
0601c     01 FA 55 F2 | 	cmps	result1, #1 wc
06020     24 00 90 CD |  if_b	jmp	#LR__0510
06024                 | LR__0509
06024     84 01 00 FF 
06028     1B 2C 06 F6 | 	mov	local08, ##@LR__5376
0602c     16 2B 02 F6 | 	mov	local07, local08
06030     14 13 02 F6 | 	mov	arg01, local06
06034     15 15 02 F6 | 	mov	arg02, local07
06038     08 AA B1 FD | 	call	#__system___string_cmp
0603c     00 FA 0D F2 | 	cmp	result1, #0 wz
06040     00 FA 05 56 |  if_ne	mov	result1, #0
06044     E8 00 90 5D |  if_ne	jmp	#LR__0516
06048                 | LR__0510
06048                 | '     if not b then return false
06048     1E 3D 22 F6 | 	not	local16, local16
0604c     00 3C 0E F2 | 	cmp	local16, #0 wz
06050     00 FA 05 56 |  if_ne	mov	result1, #0
06054     D8 00 90 5D |  if_ne	jmp	#LR__0516
06058                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06058     84 01 00 FF 
0605c     1D 14 06 F6 | 	mov	arg02, ##@LR__5377
06060     14 13 02 F6 | 	mov	arg01, local06
06064     DC A9 B1 FD | 	call	#__system___string_cmp
06068     00 FA 0D F2 | 	cmp	result1, #0 wz
0606c     3C 00 90 5D |  if_ne	jmp	#LR__0511
06070     1C 15 02 F6 | 	mov	arg02, local14
06074     01 14 86 F1 | 	sub	arg02, #1
06078     0F 13 02 F6 | 	mov	arg01, local01
0607c     01 16 06 F6 | 	mov	arg03, #1
06080     2C CB B1 FD | 	call	#__system__Mid_S
06084     FD 12 02 F6 | 	mov	arg01, result1
06088     1C CD B1 FD | 	call	#__system__LCase_S
0608c     FD 12 02 F6 | 	mov	arg01, result1
06090     84 01 00 FF 
06094     1F 2A 06 F6 | 	mov	local07, ##@LR__5378
06098     15 15 02 F6 | 	mov	arg02, local07
0609c     A4 A9 B1 FD | 	call	#__system___string_cmp
060a0     00 FA 0D F2 | 	cmp	result1, #0 wz
060a4     00 FA 05 56 |  if_ne	mov	result1, #0
060a8     84 00 90 5D |  if_ne	jmp	#LR__0516
060ac                 | LR__0511
060ac                 | '     if m$="." then ds+=1: if ds>1 then return false
060ac     84 01 00 FF 
060b0     21 14 06 F6 | 	mov	arg02, ##@LR__5379
060b4     14 13 02 F6 | 	mov	arg01, local06
060b8     88 A9 B1 FD | 	call	#__system___string_cmp
060bc     00 FA 0D F2 | 	cmp	result1, #0 wz
060c0     01 20 06 A1 |  if_e	add	local02, #1
060c4     02 20 56 A2 |  if_e	cmps	local02, #2 wc
060c8     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
060cc     60 00 90 2D |  if_nc_and_z	jmp	#LR__0516
060d0                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
060d0     84 01 00 FF 
060d4     23 3E 06 F6 | 	mov	local17, ##@LR__5380
060d8     1F 41 02 F6 | 	mov	local18, local17
060dc     14 13 02 F6 | 	mov	arg01, local06
060e0     20 15 02 F6 | 	mov	arg02, local18
060e4     5C A9 B1 FD | 	call	#__system___string_cmp
060e8     FD 42 0A F6 | 	mov	local19, result1 wz
060ec     20 00 90 AD |  if_e	jmp	#LR__0512
060f0     84 01 00 FF 
060f4     25 2A 06 F6 | 	mov	local07, ##@LR__5381
060f8     15 3F 02 F6 | 	mov	local17, local07
060fc     14 13 02 F6 | 	mov	arg01, local06
06100     1F 15 02 F6 | 	mov	arg02, local17
06104     3C A9 B1 FD | 	call	#__system___string_cmp
06108     FD 40 0A F6 | 	mov	local18, result1 wz
0610c     14 00 90 5D |  if_ne	jmp	#LR__0513
06110                 | LR__0512
06110     01 22 06 F1 | 	add	local03, #1
06114     00 34 0E F2 | 	cmp	local12, #0 wz
06118     02 22 56 A2 |  if_e	cmps	local03, #2 wc
0611c     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06120     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0516
06124                 | LR__0513
06124     01 38 06 F1 | 	add	local14, #1
06128     94 FD 9F FD | 	jmp	#LR__0504
0612c                 | LR__0514
0612c                 | LR__0515
0612c                 | ' return true
0612c     01 FA 65 F6 | 	neg	result1, #1
06130                 | LR__0516
06130     A7 F0 03 F6 | 	mov	ptra, fp
06134     B2 00 A0 FD | 	call	#popregs_
06138                 | _isnum_ret
06138     2D 00 64 FD | 	ret
0613c                 | 
0613c                 | '   
0613c                 | ' ' Check if the part is an integer number.    
0613c                 | '   
0613c                 | ' function isint(s as string) as boolean
0613c                 | _isint
0613c     0E 4A 05 F6 | 	mov	COUNT_, #14
06140     A8 00 A0 FD | 	call	#pushregs_
06144     09 1F 02 F6 | 	mov	local01, arg01
06148     09 21 02 F6 | 	mov	local02, arg01
0614c     97 06 48 FB | 	callpa	#(@LR__0521-@LR__0520)>>2,fcache_load_ptr_
06150                 | LR__0520
06150     10 FB C9 FA | 	rdbyte	result1, local02 wz
06154     01 20 06 51 |  if_ne	add	local02, #1
06158     F4 FF 9F 5D |  if_ne	jmp	#LR__0520
0615c                 | LR__0521
0615c     09 21 82 F1 | 	sub	local02, arg01
06160     10 FB 01 F6 | 	mov	result1, local02
06164     FD 22 0A F6 | 	mov	local03, result1 wz
06168     00 FA 05 A6 |  if_e	mov	result1, #0
0616c     64 02 90 AD |  if_e	jmp	#LR__0534
06170     0F 13 02 F6 | 	mov	arg01, local01
06174     01 14 06 F6 | 	mov	arg02, #1
06178     01 16 06 F6 | 	mov	arg03, #1
0617c     30 CA B1 FD | 	call	#__system__Mid_S
06180     FD 24 02 F6 | 	mov	local04, result1
06184                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06184     84 01 00 FF 
06188     27 14 06 F6 | 	mov	arg02, ##@LR__5382
0618c     12 13 02 F6 | 	mov	arg01, local04
06190     B0 A8 B1 FD | 	call	#__system___string_cmp
06194     00 FA 55 F2 | 	cmps	result1, #0 wc
06198     1C 00 90 CD |  if_b	jmp	#LR__0522
0619c     84 01 00 FF 
061a0     29 26 06 F6 | 	mov	local05, ##@LR__5383
061a4     12 13 02 F6 | 	mov	arg01, local04
061a8     13 15 02 F6 | 	mov	arg02, local05
061ac     94 A8 B1 FD | 	call	#__system___string_cmp
061b0     01 FA 55 F2 | 	cmps	result1, #1 wc
061b4     64 00 90 CD |  if_b	jmp	#LR__0523
061b8                 | LR__0522
061b8     84 01 00 FF 
061bc     2B 28 06 F6 | 	mov	local06, ##@LR__5384
061c0     14 27 02 F6 | 	mov	local05, local06
061c4     12 13 02 F6 | 	mov	arg01, local04
061c8     13 15 02 F6 | 	mov	arg02, local05
061cc     74 A8 B1 FD | 	call	#__system___string_cmp
061d0     00 FA 0D F2 | 	cmp	result1, #0 wz
061d4     44 00 90 AD |  if_e	jmp	#LR__0523
061d8     84 01 00 FF 
061dc     2D 2A 06 F6 | 	mov	local07, ##@LR__5385
061e0     15 29 02 F6 | 	mov	local06, local07
061e4     12 13 02 F6 | 	mov	arg01, local04
061e8     14 15 02 F6 | 	mov	arg02, local06
061ec     54 A8 B1 FD | 	call	#__system___string_cmp
061f0     FD 26 0A F6 | 	mov	local05, result1 wz
061f4     24 00 90 AD |  if_e	jmp	#LR__0523
061f8     84 01 00 FF 
061fc     2F 2C 06 F6 | 	mov	local08, ##@LR__5386
06200     16 2B 02 F6 | 	mov	local07, local08
06204     12 13 02 F6 | 	mov	arg01, local04
06208     15 15 02 F6 | 	mov	arg02, local07
0620c     34 A8 B1 FD | 	call	#__system___string_cmp
06210     FD 28 0A F6 | 	mov	local06, result1 wz
06214     00 FA 05 56 |  if_ne	mov	result1, #0
06218     B8 01 90 5D |  if_ne	jmp	#LR__0534
0621c                 | LR__0523
0621c                 | ' if m$="$" then hex=1 else hex=0
0621c     84 01 00 FF 
06220     31 14 06 F6 | 	mov	arg02, ##@LR__5387
06224     12 13 02 F6 | 	mov	arg01, local04
06228     18 A8 B1 FD | 	call	#__system___string_cmp
0622c     00 FA 0D F2 | 	cmp	result1, #0 wz
06230     01 2E 06 A6 |  if_e	mov	local09, #1
06234     00 2E 06 56 |  if_ne	mov	local09, #0
06238                 | ' if m$="%" then bin=1 else bin=0
06238     84 01 00 FF 
0623c     33 14 06 F6 | 	mov	arg02, ##@LR__5388
06240     12 13 02 F6 | 	mov	arg01, local04
06244     FC A7 B1 FD | 	call	#__system___string_cmp
06248     00 FA 0D F2 | 	cmp	result1, #0 wz
0624c     01 30 06 A6 |  if_e	mov	local10, #1
06250     00 30 06 56 |  if_ne	mov	local10, #0
06254                 | ' if l>1 then 
06254     02 22 56 F2 | 	cmps	local03, #2 wc
06258     74 01 90 CD |  if_b	jmp	#LR__0533
0625c                 | '   for i=2 to l
0625c     02 32 06 F6 | 	mov	local11, #2
06260     11 35 02 F6 | 	mov	local12, local03
06264     01 34 06 F1 | 	add	local12, #1
06268                 | LR__0524
06268     1A 33 52 F2 | 	cmps	local11, local12 wc
0626c     60 01 90 3D |  if_ae	jmp	#LR__0532
06270     0F 13 02 F6 | 	mov	arg01, local01
06274     19 15 02 F6 | 	mov	arg02, local11
06278     01 16 06 F6 | 	mov	arg03, #1
0627c     30 C9 B1 FD | 	call	#__system__Mid_S
06280     FD 24 02 F6 | 	mov	local04, result1
06284                 | '     m$=mid$(s,i,1) 
06284                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06284     00 2E 0E F2 | 	cmp	local09, #0 wz
06288     50 00 90 5D |  if_ne	jmp	#LR__0526
0628c     84 01 00 FF 
06290     35 14 06 F6 | 	mov	arg02, ##@LR__5389
06294     12 13 02 F6 | 	mov	arg01, local04
06298     A8 A7 B1 FD | 	call	#__system___string_cmp
0629c     00 FA 55 F2 | 	cmps	result1, #0 wc
062a0     18 00 90 CD |  if_b	jmp	#LR__0525
062a4     84 01 00 FF 
062a8     37 14 06 F6 | 	mov	arg02, ##@LR__5390
062ac     12 13 02 F6 | 	mov	arg01, local04
062b0     90 A7 B1 FD | 	call	#__system___string_cmp
062b4     01 FA 55 F2 | 	cmps	result1, #1 wc
062b8     20 00 90 CD |  if_b	jmp	#LR__0526
062bc                 | LR__0525
062bc     84 01 00 FF 
062c0     39 28 06 F6 | 	mov	local06, ##@LR__5391
062c4     12 13 02 F6 | 	mov	arg01, local04
062c8     14 15 02 F6 | 	mov	arg02, local06
062cc     74 A7 B1 FD | 	call	#__system___string_cmp
062d0     00 FA 0D F2 | 	cmp	result1, #0 wz
062d4     00 FA 05 56 |  if_ne	mov	result1, #0
062d8     F8 00 90 5D |  if_ne	jmp	#LR__0534
062dc                 | LR__0526
062dc                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
062dc     01 2E 0E F2 | 	cmp	local09, #1 wz
062e0     90 00 90 5D |  if_ne	jmp	#LR__0529
062e4     84 01 00 FF 
062e8     3B 14 06 F6 | 	mov	arg02, ##@LR__5392
062ec     12 13 02 F6 | 	mov	arg01, local04
062f0     50 A7 B1 FD | 	call	#__system___string_cmp
062f4     00 FA 55 F2 | 	cmps	result1, #0 wc
062f8     1C 00 90 CD |  if_b	jmp	#LR__0527
062fc     84 01 00 FF 
06300     3D 14 06 F6 | 	mov	arg02, ##@LR__5393
06304     12 13 02 F6 | 	mov	arg01, local04
06308     38 A7 B1 FD | 	call	#__system___string_cmp
0630c     FD 36 02 F6 | 	mov	local13, result1
06310     01 36 56 F2 | 	cmps	local13, #1 wc
06314     5C 00 90 CD |  if_b	jmp	#LR__0529
06318                 | LR__0527
06318     84 01 00 FF 
0631c     3F 26 06 F6 | 	mov	local05, ##@LR__5394
06320     12 13 02 F6 | 	mov	arg01, local04
06324     13 15 02 F6 | 	mov	arg02, local05
06328     18 A7 B1 FD | 	call	#__system___string_cmp
0632c     FD 38 02 F6 | 	mov	local14, result1
06330     00 38 56 F2 | 	cmps	local14, #0 wc
06334     1C 00 90 CD |  if_b	jmp	#LR__0528
06338     84 01 00 FF 
0633c     41 2A 06 F6 | 	mov	local07, ##@LR__5395
06340     12 13 02 F6 | 	mov	arg01, local04
06344     15 15 02 F6 | 	mov	arg02, local07
06348     F8 A6 B1 FD | 	call	#__system___string_cmp
0634c     01 FA 55 F2 | 	cmps	result1, #1 wc
06350     20 00 90 CD |  if_b	jmp	#LR__0529
06354                 | LR__0528
06354     84 01 00 FF 
06358     43 2C 06 F6 | 	mov	local08, ##@LR__5396
0635c     12 13 02 F6 | 	mov	arg01, local04
06360     16 15 02 F6 | 	mov	arg02, local08
06364     DC A6 B1 FD | 	call	#__system___string_cmp
06368     00 FA 0D F2 | 	cmp	result1, #0 wz
0636c     00 FA 05 56 |  if_ne	mov	result1, #0
06370     60 00 90 5D |  if_ne	jmp	#LR__0534
06374                 | LR__0529
06374                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
06374     01 30 0E F2 | 	cmp	local10, #1 wz
06378     4C 00 90 5D |  if_ne	jmp	#LR__0531
0637c     84 01 00 FF 
06380     45 14 06 F6 | 	mov	arg02, ##@LR__5397
06384     12 13 02 F6 | 	mov	arg01, local04
06388     B8 A6 B1 FD | 	call	#__system___string_cmp
0638c     00 FA 55 F2 | 	cmps	result1, #0 wc
06390     18 00 90 CD |  if_b	jmp	#LR__0530
06394     84 01 00 FF 
06398     47 14 06 F6 | 	mov	arg02, ##@LR__5398
0639c     12 13 02 F6 | 	mov	arg01, local04
063a0     A0 A6 B1 FD | 	call	#__system___string_cmp
063a4     01 FA 55 F2 | 	cmps	result1, #1 wc
063a8     1C 00 90 CD |  if_b	jmp	#LR__0531
063ac                 | LR__0530
063ac     84 01 00 FF 
063b0     49 14 06 F6 | 	mov	arg02, ##@LR__5399
063b4     12 13 02 F6 | 	mov	arg01, local04
063b8     88 A6 B1 FD | 	call	#__system___string_cmp
063bc     00 FA 0D F2 | 	cmp	result1, #0 wz
063c0     00 FA 05 56 |  if_ne	mov	result1, #0
063c4     0C 00 90 5D |  if_ne	jmp	#LR__0534
063c8                 | LR__0531
063c8     01 32 06 F1 | 	add	local11, #1
063cc     98 FE 9F FD | 	jmp	#LR__0524
063d0                 | LR__0532
063d0                 | LR__0533
063d0                 | ' return true
063d0     01 FA 65 F6 | 	neg	result1, #1
063d4                 | LR__0534
063d4     A7 F0 03 F6 | 	mov	ptra, fp
063d8     B2 00 A0 FD | 	call	#popregs_
063dc                 | _isint_ret
063dc     2D 00 64 FD | 	ret
063e0                 | 
063e0                 | ' 
063e0                 | ' ' Check if the part is a positive decimal number.  
063e0                 | ' 
063e0                 | ' function isdec(s as string) as boolean
063e0                 | _isdec
063e0     05 4A 05 F6 | 	mov	COUNT_, #5
063e4     A8 00 A0 FD | 	call	#pushregs_
063e8     09 1F 02 F6 | 	mov	local01, arg01
063ec     09 21 02 F6 | 	mov	local02, arg01
063f0     97 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
063f4                 | LR__0540
063f4     10 FB C9 FA | 	rdbyte	result1, local02 wz
063f8     01 20 06 51 |  if_ne	add	local02, #1
063fc     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
06400                 | LR__0541
06400     09 21 82 F1 | 	sub	local02, arg01
06404     10 FB 01 F6 | 	mov	result1, local02
06408     FD 20 0A F6 | 	mov	local02, result1 wz
0640c     00 FA 05 A6 |  if_e	mov	result1, #0
06410     80 00 90 AD |  if_e	jmp	#LR__0546
06414                 | ' for i=1 to l
06414     01 22 06 F6 | 	mov	local03, #1
06418     10 25 02 F6 | 	mov	local04, local02
0641c     01 24 06 F1 | 	add	local04, #1
06420                 | LR__0542
06420     12 23 52 F2 | 	cmps	local03, local04 wc
06424     68 00 90 3D |  if_ae	jmp	#LR__0545
06428     0F 13 02 F6 | 	mov	arg01, local01
0642c     11 15 02 F6 | 	mov	arg02, local03
06430     01 16 06 F6 | 	mov	arg03, #1
06434     78 C7 B1 FD | 	call	#__system__Mid_S
06438     FD 26 02 F6 | 	mov	local05, result1
0643c                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
0643c     84 01 00 FF 
06440     4B 14 06 F6 | 	mov	arg02, ##@LR__5400
06444     13 13 02 F6 | 	mov	arg01, local05
06448     F8 A5 B1 FD | 	call	#__system___string_cmp
0644c     00 FA 55 F2 | 	cmps	result1, #0 wc
06450     18 00 90 CD |  if_b	jmp	#LR__0543
06454     84 01 00 FF 
06458     4D 14 06 F6 | 	mov	arg02, ##@LR__5401
0645c     13 13 02 F6 | 	mov	arg01, local05
06460     E0 A5 B1 FD | 	call	#__system___string_cmp
06464     01 FA 55 F2 | 	cmps	result1, #1 wc
06468     1C 00 90 CD |  if_b	jmp	#LR__0544
0646c                 | LR__0543
0646c     84 01 00 FF 
06470     4F 14 06 F6 | 	mov	arg02, ##@LR__5402
06474     13 13 02 F6 | 	mov	arg01, local05
06478     C8 A5 B1 FD | 	call	#__system___string_cmp
0647c     00 FA 0D F2 | 	cmp	result1, #0 wz
06480     00 FA 05 56 |  if_ne	mov	result1, #0
06484     0C 00 90 5D |  if_ne	jmp	#LR__0546
06488                 | LR__0544
06488     01 22 06 F1 | 	add	local03, #1
0648c     90 FF 9F FD | 	jmp	#LR__0542
06490                 | LR__0545
06490                 | ' return true
06490     01 FA 65 F6 | 	neg	result1, #1
06494                 | LR__0546
06494     A7 F0 03 F6 | 	mov	ptra, fp
06498     B2 00 A0 FD | 	call	#popregs_
0649c                 | _isdec_ret
0649c     2D 00 64 FD | 	ret
064a0                 | 
064a0                 | ' 
064a0                 | ' ' Check if the part is a string.  
064a0                 | ' 
064a0                 | ' function isstring(s as string) as boolean
064a0                 | _isstring
064a0     01 4A 05 F6 | 	mov	COUNT_, #1
064a4     A8 00 A0 FD | 	call	#pushregs_
064a8                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
064a8     09 1F 02 F6 | 	mov	local01, arg01
064ac     01 14 06 F6 | 	mov	arg02, #1
064b0     E4 C5 B1 FD | 	call	#__system__Left_S
064b4     FD 12 02 F6 | 	mov	arg01, result1
064b8     84 01 00 FF 
064bc     51 14 06 F6 | 	mov	arg02, ##@LR__5403
064c0     80 A5 B1 FD | 	call	#__system___string_cmp
064c4     00 FA 4D F2 | 	cmps	result1, #0 wz
064c8     28 00 90 5D |  if_ne	jmp	#LR__0550
064cc     0F 13 02 F6 | 	mov	arg01, local01
064d0     01 14 06 F6 | 	mov	arg02, #1
064d4     48 C6 B1 FD | 	call	#__system__Right_S
064d8     FD 12 02 F6 | 	mov	arg01, result1
064dc     84 01 00 FF 
064e0     53 14 06 F6 | 	mov	arg02, ##@LR__5404
064e4     5C A5 B1 FD | 	call	#__system___string_cmp
064e8     00 FA 4D F2 | 	cmps	result1, #0 wz
064ec     01 FA 65 A6 |  if_e	neg	result1, #1
064f0     04 00 90 AD |  if_e	jmp	#LR__0551
064f4                 | LR__0550
064f4     00 FA 05 F6 | 	mov	result1, #0
064f8                 | LR__0551
064f8     A7 F0 03 F6 | 	mov	ptra, fp
064fc     B2 00 A0 FD | 	call	#popregs_
06500                 | _isstring_ret
06500     2D 00 64 FD | 	ret
06504                 | 
06504                 | ' 
06504                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06504                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
06504                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06504                 | ' 
06504                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06504                 | ' '
06504                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
06504                 | ' '
06504                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
06504                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
06504                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
06504                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
06504                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
06504                 | ' ' 
06504                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06504                 | ' 
06504                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06504                 | ' ' Helper functions to manage program lines
06504                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06504                 | ' 
06504                 | ' '----- delete a line from a program
06504                 | ' 
06504                 | ' function deleteline(aline as ulong) as integer
06504                 | _deleteline
06504     02 4A 05 F6 | 	mov	COUNT_, #2
06508     A8 00 A0 FD | 	call	#pushregs_
0650c     2C F0 07 F1 | 	add	ptra, #44
06510     04 4E 05 F1 | 	add	fp, #4
06514     A7 12 62 FC | 	wrlong	arg01, fp
06518     4A 00 00 FF 
0651c     84 E4 05 F1 | 	add	objptr, ##38020
06520     F2 1E 02 FB | 	rdlong	local01, objptr
06524     0C 4E 05 F1 | 	add	fp, #12
06528     A7 1E 62 FC | 	wrlong	local01, fp
0652c     10 4E 85 F1 | 	sub	fp, #16
06530                 | ' 
06530                 | ' searchptr=programstart
06530                 | ' do
06530     3E 00 00 FF 
06534     B8 E5 85 F1 | 	sub	objptr, ##32184
06538                 | LR__0560
06538     14 4E 05 F1 | 	add	fp, #20
0653c     A7 12 02 F6 | 	mov	arg01, fp
06540     04 4E 85 F1 | 	sub	fp, #4
06544     A7 14 02 FB | 	rdlong	arg02, fp
06548     10 4E 85 F1 | 	sub	fp, #16
0654c     18 16 06 F6 | 	mov	arg03, #24
06550     88 98 B1 FD | 	call	#_psram_spin2_read1
06554     10 4E 05 F1 | 	add	fp, #16
06558     A7 1E 02 FB | 	rdlong	local01, fp
0655c     08 4E 85 F1 | 	sub	fp, #8
06560     A7 1E 62 FC | 	wrlong	local01, fp
06564     20 4E 05 F1 | 	add	fp, #32
06568     A7 1E 02 FB | 	rdlong	local01, fp
0656c     18 4E 85 F1 | 	sub	fp, #24
06570     A7 1E 62 FC | 	wrlong	local01, fp
06574     04 4E 05 F1 | 	add	fp, #4
06578     A7 1E 02 FB | 	rdlong	local01, fp
0657c     10 4E 85 F1 | 	sub	fp, #16
06580     A7 16 02 FB | 	rdlong	arg03, fp
06584     04 4E 85 F1 | 	sub	fp, #4
06588     0B 1F 12 F2 | 	cmp	local01, arg03 wc
0658c     28 4E 05 C1 |  if_b	add	fp, #40
06590     A7 20 02 CB |  if_b	rdlong	local02, fp
06594     28 4E 85 C1 |  if_b	sub	fp, #40
06598     FF FF 3F CF 
0659c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
065a0     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0560
065a4     0B 00 00 FF 
065a8     CC E4 85 F1 | 	sub	objptr, ##5836
065ac                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
065ac     14 4E 05 F1 | 	add	fp, #20
065b0     A7 1E 02 FB | 	rdlong	local01, fp
065b4     10 4E 85 F1 | 	sub	fp, #16
065b8     A7 20 02 FB | 	rdlong	local02, fp
065bc     04 4E 85 F1 | 	sub	fp, #4
065c0     10 1F 0A F2 | 	cmp	local01, local02 wz
065c4     01 FA 65 56 |  if_ne	neg	result1, #1
065c8     34 02 90 5D |  if_ne	jmp	#LR__0565
065cc     08 4E 05 F1 | 	add	fp, #8
065d0     A7 12 02 FB | 	rdlong	arg01, fp
065d4     08 4E 85 F1 | 	sub	fp, #8
065d8     01 14 66 F6 | 	neg	arg02, #1
065dc     08 70 B1 FD | 	call	#_pslpoke
065e0                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
065e0                 | ' 
065e0                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
065e0     28 4E 05 F1 | 	add	fp, #40
065e4     A7 1E 02 FB | 	rdlong	local01, fp
065e8     28 4E 85 F1 | 	sub	fp, #40
065ec     FF FF 3F FF 
065f0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
065f4     24 4E 05 A1 |  if_e	add	fp, #36
065f8     A7 20 02 AB |  if_e	rdlong	local02, fp
065fc     24 4E 85 A1 |  if_e	sub	fp, #36
06600     FF FF 7F AF 
06604     FF 21 0E A2 |  if_e	cmp	local02, ##-1 wz
06608     88 00 90 5D |  if_ne	jmp	#LR__0561
0660c     4A 00 00 FF 
06610     84 E4 05 F1 | 	add	objptr, ##38020
06614     00 04 80 FF 
06618     F2 00 68 FC | 	wrlong	##524288, objptr
0661c     07 00 00 FF 
06620     28 E4 85 F1 | 	sub	objptr, ##3624
06624     00 04 80 FF 
06628     F2 00 68 FC | 	wrlong	##524288, objptr
0662c     07 00 00 FF 
06630     2C E4 05 F1 | 	add	objptr, ##3628
06634     F2 00 68 FC | 	wrlong	#0, objptr
06638     04 E4 05 F1 | 	add	objptr, #4
0663c     FF FF FF FF 
06640     F2 FE 6B FC | 	wrlong	##-1, objptr
06644     4A 00 00 FF 
06648     8C E4 85 F1 | 	sub	objptr, ##38028
0664c     00 12 06 F6 | 	mov	arg01, #0
06650     01 14 66 F6 | 	neg	arg02, #1
06654     90 6F B1 FD | 	call	#_pslpoke
06658     10 12 06 F6 | 	mov	arg01, #16
0665c     01 14 66 F6 | 	neg	arg02, #1
06660     84 6F B1 FD | 	call	#_pslpoke
06664     14 12 06 F6 | 	mov	arg01, #20
06668     1E 14 CE F9 | 	bmask	arg02, #30
0666c     78 6F B1 FD | 	call	#_pslpoke
06670     50 00 00 FF 
06674     B4 E4 05 F1 | 	add	objptr, ##41140
06678     00 04 80 FF 
0667c     F2 00 68 FC | 	wrlong	##524288, objptr
06680     04 E4 05 F1 | 	add	objptr, #4
06684     00 04 80 FF 
06688     F2 00 68 FC | 	wrlong	##524288, objptr
0668c     50 00 00 FF 
06690     B8 E4 85 F1 | 	sub	objptr, ##41144
06694                 | LR__0561
06694                 | ' 
06694                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
06694     28 4E 05 F1 | 	add	fp, #40
06698     A7 1E 02 FB | 	rdlong	local01, fp
0669c     28 4E 85 F1 | 	sub	fp, #40
066a0     FF FF 3F FF 
066a4     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
066a8     74 00 90 5D |  if_ne	jmp	#LR__0562
066ac     24 4E 05 F1 | 	add	fp, #36
066b0     A7 20 02 FB | 	rdlong	local02, fp
066b4     24 4E 85 F1 | 	sub	fp, #36
066b8     FF FF 7F FF 
066bc     FF 21 0E F2 | 	cmp	local02, ##-1 wz
066c0     5C 00 90 AD |  if_e	jmp	#LR__0562
066c4     24 4E 05 F1 | 	add	fp, #36
066c8     A7 12 02 FB | 	rdlong	arg01, fp
066cc     24 4E 85 F1 | 	sub	fp, #36
066d0     14 12 06 F1 | 	add	arg01, #20
066d4     1E 14 CE F9 | 	bmask	arg02, #30
066d8     0C 6F B1 FD | 	call	#_pslpoke
066dc     24 4E 05 F1 | 	add	fp, #36
066e0     A7 1E 02 FB | 	rdlong	local01, fp
066e4     4A 00 00 FF 
066e8     8C E4 05 F1 | 	add	objptr, ##38028
066ec     F2 1E 62 FC | 	wrlong	local01, objptr
066f0     4A 00 00 FF 
066f4     8C E4 85 F1 | 	sub	objptr, ##38028
066f8     A7 12 02 FB | 	rdlong	arg01, fp
066fc     24 4E 85 F1 | 	sub	fp, #36
06700     14 70 B1 FD | 	call	#_pslpeek
06704     4A 00 00 FF 
06708     88 E4 05 F1 | 	add	objptr, ##38024
0670c     F2 FA 61 FC | 	wrlong	result1, objptr
06710     4A 00 00 FF 
06714     88 E4 85 F1 | 	sub	objptr, ##38024
06718                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
06718                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
06718                 | '   lastline=pslpeek(header(4))
06718                 | '   return 0
06718     00 FA 05 F6 | 	mov	result1, #0
0671c     E0 00 90 FD | 	jmp	#LR__0565
06720                 | LR__0562
06720                 | ' 
06720                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
06720     28 4E 05 F1 | 	add	fp, #40
06724     A7 1E 02 FB | 	rdlong	local01, fp
06728     28 4E 85 F1 | 	sub	fp, #40
0672c     FF FF 3F FF 
06730     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
06734     58 00 90 AD |  if_e	jmp	#LR__0563
06738     24 4E 05 F1 | 	add	fp, #36
0673c     A7 20 02 FB | 	rdlong	local02, fp
06740     24 4E 85 F1 | 	sub	fp, #36
06744     FF FF 7F FF 
06748     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0674c     40 00 90 5D |  if_ne	jmp	#LR__0563
06750     28 4E 05 F1 | 	add	fp, #40
06754     A7 12 02 FB | 	rdlong	arg01, fp
06758     28 4E 85 F1 | 	sub	fp, #40
0675c     10 12 06 F1 | 	add	arg01, #16
06760     01 14 66 F6 | 	neg	arg02, #1
06764     80 6E B1 FD | 	call	#_pslpoke
06768     28 4E 05 F1 | 	add	fp, #40
0676c     A7 1E 02 FB | 	rdlong	local01, fp
06770     28 4E 85 F1 | 	sub	fp, #40
06774     4A 00 00 FF 
06778     84 E4 05 F1 | 	add	objptr, ##38020
0677c     F2 1E 62 FC | 	wrlong	local01, objptr
06780     4A 00 00 FF 
06784     84 E4 85 F1 | 	sub	objptr, ##38020
06788                 | ' '   print "deleted first line"
06788                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
06788                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
06788                 | '   return 0
06788     00 FA 05 F6 | 	mov	result1, #0
0678c     70 00 90 FD | 	jmp	#LR__0565
06790                 | LR__0563
06790                 | ' 
06790                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
06790     28 4E 05 F1 | 	add	fp, #40
06794     A7 1E 02 FB | 	rdlong	local01, fp
06798     28 4E 85 F1 | 	sub	fp, #40
0679c     FF FF 3F FF 
067a0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
067a4     24 4E 05 51 |  if_ne	add	fp, #36
067a8     A7 20 02 5B |  if_ne	rdlong	local02, fp
067ac     24 4E 85 51 |  if_ne	sub	fp, #36
067b0     FF FF 7F 5F 
067b4     FF 21 0E 52 |  if_ne	cmp	local02, ##-1 wz
067b8     40 00 90 AD |  if_e	jmp	#LR__0564
067bc     28 4E 05 F1 | 	add	fp, #40
067c0     A7 12 02 FB | 	rdlong	arg01, fp
067c4     10 12 06 F1 | 	add	arg01, #16
067c8     04 4E 85 F1 | 	sub	fp, #4
067cc     A7 14 02 FB | 	rdlong	arg02, fp
067d0     24 4E 85 F1 | 	sub	fp, #36
067d4     10 6E B1 FD | 	call	#_pslpoke
067d8     24 4E 05 F1 | 	add	fp, #36
067dc     A7 12 02 FB | 	rdlong	arg01, fp
067e0     14 12 06 F1 | 	add	arg01, #20
067e4     04 4E 05 F1 | 	add	fp, #4
067e8     A7 14 02 FB | 	rdlong	arg02, fp
067ec     28 4E 85 F1 | 	sub	fp, #40
067f0     F4 6D B1 FD | 	call	#_pslpoke
067f4                 | '    pslpoke(header(5)+16,header(4))  
067f4                 | '    pslpoke(header(4)+20, header(5))
067f4                 | '    return 0
067f4     00 FA 05 F6 | 	mov	result1, #0
067f8     04 00 90 FD | 	jmp	#LR__0565
067fc                 | LR__0564
067fc     00 FA 05 F6 | 	mov	result1, #0
06800                 | LR__0565
06800     A7 F0 03 F6 | 	mov	ptra, fp
06804     B2 00 A0 FD | 	call	#popregs_
06808                 | _deleteline_ret
06808     2D 00 64 FD | 	ret
0680c                 | 
0680c                 | ' 
0680c                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
0680c                 | ' 
0680c                 | ' sub save_line
0680c                 | _save_line
0680c     03 4A 05 F6 | 	mov	COUNT_, #3
06810     A8 00 A0 FD | 	call	#pushregs_
06814     4A 00 00 FF 
06818     7C E4 05 F1 | 	add	objptr, ##38012
0681c     F2 16 02 FB | 	rdlong	arg03, objptr
06820     01 16 06 F1 | 	add	arg03, #1
06824     05 00 00 FF 
06828     18 E4 85 F1 | 	sub	objptr, ##2584
0682c     F2 14 02 FB | 	rdlong	arg02, objptr
06830     0B 15 02 FD | 	qmul	arg02, arg03
06834     0E 00 00 FF 
06838     44 E4 85 F1 | 	sub	objptr, ##7236
0683c     F2 12 02 FB | 	rdlong	arg01, objptr
06840     37 00 00 FF 
06844     20 E4 85 F1 | 	sub	objptr, ##28192
06848     09 1F 02 F6 | 	mov	local01, arg01
0684c     18 20 62 FD | 	getqx	local02
06850     97 06 48 FB | 	callpa	#(@LR__0571-@LR__0570)>>2,fcache_load_ptr_
06854                 | LR__0570
06854     0F FB C9 FA | 	rdbyte	result1, local01 wz
06858     01 1E 06 51 |  if_ne	add	local01, #1
0685c     F4 FF 9F 5D |  if_ne	jmp	#LR__0570
06860                 | LR__0571
06860     09 1F 82 F1 | 	sub	local01, arg01
06864     03 1E CE F7 | 	test	local01, #3 wz
06868     02 1E 46 50 |  if_ne	shr	local01, #2
0686c     01 1E 06 51 |  if_ne	add	local01, #1
06870     02 1E 66 50 |  if_ne	shl	local01, #2
06874     10 23 02 F6 | 	mov	local03, local02
06878     0F 23 02 F1 | 	add	local03, local01
0687c     43 00 00 FF 
06880     5C E4 05 F1 | 	add	objptr, ##34396
06884     F2 16 02 FB | 	rdlong	arg03, objptr
06888     10 17 02 F1 | 	add	arg03, local02
0688c     04 00 00 FF 
06890     28 E4 05 F1 | 	add	objptr, ##2088
06894     F2 16 62 FC | 	wrlong	arg03, objptr
06898     04 E4 05 F1 | 	add	objptr, #4
0689c     F2 1E 62 FC | 	wrlong	local01, objptr
068a0     0C E4 85 F1 | 	sub	objptr, #12
068a4     F2 12 02 F6 | 	mov	arg01, objptr
068a8     04 00 00 FF 
068ac     20 E4 85 F1 | 	sub	objptr, ##2080
068b0     F2 14 02 FB | 	rdlong	arg02, objptr
068b4     10 17 02 F6 | 	mov	arg03, local02
068b8     37 00 00 FF 
068bc     90 E5 85 F1 | 	sub	objptr, ##28560
068c0     B4 95 B1 FD | 	call	#_psram_spin2_write
068c4     2B 00 00 FF 
068c8     54 E5 05 F1 | 	add	objptr, ##22356
068cc     F2 12 02 FB | 	rdlong	arg01, objptr
068d0     0C 00 00 FF 
068d4     3C E4 05 F1 | 	add	objptr, ##6204
068d8     F2 14 02 FB | 	rdlong	arg02, objptr
068dc     10 15 02 F1 | 	add	arg02, local02
068e0     0F 17 02 F6 | 	mov	arg03, local01
068e4     37 00 00 FF 
068e8     90 E5 85 F1 | 	sub	objptr, ##28560
068ec     88 95 B1 FD | 	call	#_psram_spin2_write
068f0     37 00 00 FF 
068f4     90 E5 05 F1 | 	add	objptr, ##28560
068f8     F2 1E 02 FB | 	rdlong	local01, objptr
068fc     11 1F 02 F1 | 	add	local01, local03
06900     F2 1E 62 FC | 	wrlong	local01, objptr
06904     43 00 00 FF 
06908     5C E4 85 F1 | 	sub	objptr, ##34396
0690c     A7 F0 03 F6 | 	mov	ptra, fp
06910     B2 00 A0 FD | 	call	#popregs_
06914                 | _save_line_ret
06914     2D 00 64 FD | 	ret
06918                 | 
06918                 | ' 
06918                 | ' '----- Insert a new line into the middle of the program
06918                 | ' 
06918                 | ' function insertline(aline as ulong) as integer
06918                 | _insertline
06918     02 4A 05 F6 | 	mov	COUNT_, #2
0691c     A8 00 A0 FD | 	call	#pushregs_
06920     28 F0 07 F1 | 	add	ptra, #40
06924     04 4E 05 F1 | 	add	fp, #4
06928     A7 12 62 FC | 	wrlong	arg01, fp
0692c     4A 00 00 FF 
06930     84 E4 05 F1 | 	add	objptr, ##38020
06934     F2 1E 02 FB | 	rdlong	local01, objptr
06938     04 4E 05 F1 | 	add	fp, #4
0693c     A7 1E 62 FC | 	wrlong	local01, fp
06940     08 4E 85 F1 | 	sub	fp, #8
06944                 | ' 
06944                 | ' do
06944     3E 00 00 FF 
06948     B8 E5 85 F1 | 	sub	objptr, ##32184
0694c                 | LR__0580
0694c     10 4E 05 F1 | 	add	fp, #16
06950     A7 12 02 F6 | 	mov	arg01, fp
06954     08 4E 85 F1 | 	sub	fp, #8
06958     A7 14 02 FB | 	rdlong	arg02, fp
0695c     08 4E 85 F1 | 	sub	fp, #8
06960     18 16 06 F6 | 	mov	arg03, #24
06964     74 94 B1 FD | 	call	#_psram_spin2_read1
06968     08 4E 05 F1 | 	add	fp, #8
0696c     A7 1E 02 FB | 	rdlong	local01, fp
06970     04 4E 05 F1 | 	add	fp, #4
06974     A7 1E 62 FC | 	wrlong	local01, fp
06978     18 4E 05 F1 | 	add	fp, #24
0697c     A7 1E 02 FB | 	rdlong	local01, fp
06980     1C 4E 85 F1 | 	sub	fp, #28
06984     A7 1E 62 FC | 	wrlong	local01, fp
06988     08 4E 05 F1 | 	add	fp, #8
0698c     A7 1E 02 FB | 	rdlong	local01, fp
06990     0C 4E 85 F1 | 	sub	fp, #12
06994     A7 16 02 FB | 	rdlong	arg03, fp
06998     04 4E 85 F1 | 	sub	fp, #4
0699c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
069a0     24 4E 05 C1 |  if_b	add	fp, #36
069a4     A7 20 02 CB |  if_b	rdlong	local02, fp
069a8     24 4E 85 C1 |  if_b	sub	fp, #36
069ac     FF FF 3F CF 
069b0     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
069b4     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0580
069b8     0B 00 00 FF 
069bc     CC E4 85 F1 | 	sub	objptr, ##5836
069c0                 | ' 
069c0                 | ' if header(0)=aline then return -1 				' delete it first
069c0     10 4E 05 F1 | 	add	fp, #16
069c4     A7 1E 02 FB | 	rdlong	local01, fp
069c8     0C 4E 85 F1 | 	sub	fp, #12
069cc     A7 20 02 FB | 	rdlong	local02, fp
069d0     04 4E 85 F1 | 	sub	fp, #4
069d4     10 1F 0A F2 | 	cmp	local01, local02 wz
069d8     01 FA 65 A6 |  if_e	neg	result1, #1
069dc     48 01 90 AD |  if_e	jmp	#LR__0583
069e0                 | ' if header(0)<aline then return -2 				' end of program reached
069e0     10 4E 05 F1 | 	add	fp, #16
069e4     A7 1E 02 FB | 	rdlong	local01, fp
069e8     0C 4E 85 F1 | 	sub	fp, #12
069ec     A7 16 02 FB | 	rdlong	arg03, fp
069f0     04 4E 85 F1 | 	sub	fp, #4
069f4     0B 1F 12 F2 | 	cmp	local01, arg03 wc
069f8     02 FA 65 C6 |  if_b	neg	result1, #2
069fc     28 01 90 CD |  if_b	jmp	#LR__0583
06a00                 | ' 
06a00                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
06a00     20 4E 05 F1 | 	add	fp, #32
06a04     A7 1E 02 FB | 	rdlong	local01, fp
06a08     20 4E 85 F1 | 	sub	fp, #32
06a0c     FF FF 7F FF 
06a10     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
06a14     78 00 90 5D |  if_ne	jmp	#LR__0581
06a18     43 00 00 FF 
06a1c     5C E4 05 F1 | 	add	objptr, ##34396
06a20     F2 1E 02 FB | 	rdlong	local01, objptr
06a24     07 00 00 FF 
06a28     28 E4 05 F1 | 	add	objptr, ##3624
06a2c     F2 1E 62 FC | 	wrlong	local01, objptr
06a30     0C 4E 05 F1 | 	add	fp, #12
06a34     A7 12 02 FB | 	rdlong	arg01, fp
06a38     0C 4E 85 F1 | 	sub	fp, #12
06a3c     10 12 06 F1 | 	add	arg01, #16
06a40     07 00 00 FF 
06a44     28 E4 85 F1 | 	sub	objptr, ##3624
06a48     F2 14 02 FB | 	rdlong	arg02, objptr
06a4c     43 00 00 FF 
06a50     5C E4 85 F1 | 	sub	objptr, ##34396
06a54     90 6B B1 FD | 	call	#_pslpoke
06a58     47 00 00 FF 
06a5c     8C E4 05 F1 | 	add	objptr, ##36492
06a60     FF FF FF FF 
06a64     F2 FE 6B FC | 	wrlong	##-1, objptr
06a68     0C 4E 05 F1 | 	add	fp, #12
06a6c     A7 1E 02 FB | 	rdlong	local01, fp
06a70     0C 4E 85 F1 | 	sub	fp, #12
06a74     04 E4 05 F1 | 	add	objptr, #4
06a78     F2 1E 62 FC | 	wrlong	local01, objptr
06a7c     47 00 00 FF 
06a80     90 E4 85 F1 | 	sub	objptr, ##36496
06a84     84 FD BF FD | 	call	#_save_line
06a88                 | '   programstart=programptr
06a88                 | '   pslpoke(lineptr2+16,programptr)
06a88                 | '   ucompiledline(4)=$FFFF_FFFF
06a88                 | '   ucompiledline(5)=lineptr2
06a88                 | '   save_line
06a88                 | '   return 0
06a88     00 FA 05 F6 | 	mov	result1, #0
06a8c     98 00 90 FD | 	jmp	#LR__0583
06a90                 | LR__0581
06a90                 | ' 
06a90                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
06a90     20 4E 05 F1 | 	add	fp, #32
06a94     A7 1E 02 FB | 	rdlong	local01, fp
06a98     20 4E 85 F1 | 	sub	fp, #32
06a9c     FF FF 7F FF 
06aa0     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
06aa4     7C 00 90 AD |  if_e	jmp	#LR__0582
06aa8     20 4E 05 F1 | 	add	fp, #32
06aac     A7 1E 02 FB | 	rdlong	local01, fp
06ab0     47 00 00 FF 
06ab4     8C E4 05 F1 | 	add	objptr, ##36492
06ab8     F2 1E 62 FC | 	wrlong	local01, objptr
06abc     14 4E 85 F1 | 	sub	fp, #20
06ac0     A7 1E 02 FB | 	rdlong	local01, fp
06ac4     04 E4 05 F1 | 	add	objptr, #4
06ac8     F2 1E 62 FC | 	wrlong	local01, objptr
06acc     A7 12 02 FB | 	rdlong	arg01, fp
06ad0     0C 4E 85 F1 | 	sub	fp, #12
06ad4     10 12 06 F1 | 	add	arg01, #16
06ad8     04 00 00 FF 
06adc     34 E4 85 F1 | 	sub	objptr, ##2100
06ae0     F2 14 02 FB | 	rdlong	arg02, objptr
06ae4     43 00 00 FF 
06ae8     5C E4 85 F1 | 	sub	objptr, ##34396
06aec     F8 6A B1 FD | 	call	#_pslpoke
06af0     20 4E 05 F1 | 	add	fp, #32
06af4     A7 12 02 FB | 	rdlong	arg01, fp
06af8     20 4E 85 F1 | 	sub	fp, #32
06afc     14 12 06 F1 | 	add	arg01, #20
06b00     43 00 00 FF 
06b04     5C E4 05 F1 | 	add	objptr, ##34396
06b08     F2 14 02 FB | 	rdlong	arg02, objptr
06b0c     43 00 00 FF 
06b10     5C E4 85 F1 | 	sub	objptr, ##34396
06b14     D0 6A B1 FD | 	call	#_pslpoke
06b18     F0 FC BF FD | 	call	#_save_line
06b1c                 | '   ucompiledline(4)=header(4)
06b1c                 | '   ucompiledline(5)=lineptr2
06b1c                 | '   pslpoke(lineptr2+16,programptr)
06b1c                 | '   pslpoke(header(4)+20,programptr)
06b1c                 | '   save_line
06b1c                 | '   return 0
06b1c     00 FA 05 F6 | 	mov	result1, #0
06b20     04 00 90 FD | 	jmp	#LR__0583
06b24                 | LR__0582
06b24     00 FA 05 F6 | 	mov	result1, #0
06b28                 | LR__0583
06b28     A7 F0 03 F6 | 	mov	ptra, fp
06b2c     B2 00 A0 FD | 	call	#popregs_
06b30                 | _insertline_ret
06b30     2D 00 64 FD | 	ret
06b34                 | 
06b34                 | ' 
06b34                 | ' '----- Adds a new line at the end of the program
06b34                 | ' 
06b34                 | ' sub add_line_at_end(aline) 
06b34                 | _add_line_at_end
06b34     4A 00 00 FF 
06b38     88 E4 05 F1 | 	add	objptr, ##38024
06b3c     F2 12 62 FC | 	wrlong	arg01, objptr
06b40     04 E4 05 F1 | 	add	objptr, #4
06b44     F2 14 02 FB | 	rdlong	arg02, objptr
06b48     03 00 00 FF 
06b4c     00 E4 85 F1 | 	sub	objptr, ##1536
06b50     F2 14 62 FC | 	wrlong	arg02, objptr
06b54     03 00 00 FF 
06b58     00 E4 05 F1 | 	add	objptr, ##1536
06b5c     F2 12 02 FB | 	rdlong	arg01, objptr
06b60     14 12 06 F1 | 	add	arg01, #20
06b64     07 00 00 FF 
06b68     30 E4 85 F1 | 	sub	objptr, ##3632
06b6c     F2 14 02 FB | 	rdlong	arg02, objptr
06b70     43 00 00 FF 
06b74     5C E4 85 F1 | 	sub	objptr, ##34396
06b78     6C 6A B1 FD | 	call	#_pslpoke
06b7c     43 00 00 FF 
06b80     5C E4 05 F1 | 	add	objptr, ##34396
06b84     F2 14 02 FB | 	rdlong	arg02, objptr
06b88     07 00 00 FF 
06b8c     30 E4 05 F1 | 	add	objptr, ##3632
06b90     F2 14 62 FC | 	wrlong	arg02, objptr
06b94     02 00 00 FF 
06b98     FC E5 85 F1 | 	sub	objptr, ##1532
06b9c     FF FF BF FF 
06ba0     F2 FE 6B FC | 	wrlong	##2147483647, objptr
06ba4                 | ' 
06ba4                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
06ba4                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
06ba4     04 00 00 FF 
06ba8     34 E4 85 F1 | 	sub	objptr, ##2100
06bac     F2 14 02 FB | 	rdlong	arg02, objptr
06bb0     43 00 00 FF 
06bb4     5C E4 85 F1 | 	sub	objptr, ##34396
06bb8     00 04 00 FF 
06bbc     00 14 0E F2 | 	cmp	arg02, ##524288 wz
06bc0     47 00 00 AF 
06bc4     8C E4 05 A1 |  if_e	add	objptr, ##36492
06bc8     FF FF FF AF 
06bcc     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
06bd0     47 00 00 AF 
06bd4     8C E4 85 A1 |  if_e	sub	objptr, ##36492
06bd8     30 FC BF FD | 	call	#_save_line
06bdc     43 00 00 FF 
06be0     5C E4 05 F1 | 	add	objptr, ##34396
06be4     F2 12 02 FB | 	rdlong	arg01, objptr
06be8     43 00 00 FF 
06bec     5C E4 85 F1 | 	sub	objptr, ##34396
06bf0     01 14 66 F6 | 	neg	arg02, #1
06bf4     F0 69 B1 FD | 	call	#_pslpoke
06bf8                 | _add_line_at_end_ret
06bf8     2D 00 64 FD | 	ret
06bfc                 | 
06bfc                 | ' 
06bfc                 | ' '--------------------------------------------------------------------------------------------------------------------------
06bfc                 | ' '---------------------------------- End of helper functions ---------------------------------------------------------------
06bfc                 | ' '--------------------------------------------------------------------------------------------------------------------------
06bfc                 | ' 
06bfc                 | ' 
06bfc                 | ' 
06bfc                 | ' 
06bfc                 | ' function compile_immediate(linetype as ulong) as integer
06bfc                 | _compile_immediate
06bfc     09 4A 05 F6 | 	mov	COUNT_, #9
06c00     A8 00 A0 FD | 	call	#pushregs_
06c04                 | _compile_immediate_enter
06c04     09 25 0A F6 | 	mov	local04, arg01 wz
06c08     00 26 06 F6 | 	mov	local05, #0
06c0c     00 28 06 F6 | 	mov	local06, #0
06c10                 | ' 
06c10                 | ' ' linetype=cont+1, linetype=0 immediate
06c10                 | ' '  : 1: this is the first part of the line that will continue
06c10                 | ' ' 2 - this is the continuation of the line
06c10                 | ' ' 3 - this is the last continued line
06c10                 | ' ' 4 - this is the one and only part
06c10                 | ' 
06c10                 | ' err=0
06c10                 | ' cmd=0
06c10                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
06c10     30 00 90 5D |  if_ne	jmp	#LR__0590
06c14     35 00 00 FF 
06c18     10 E4 05 F1 | 	add	objptr, ##27152
06c1c     F2 28 02 FB | 	rdlong	local06, objptr
06c20     02 00 00 FF 
06c24     34 E4 05 F1 | 	add	objptr, ##1076
06c28     F2 02 68 FC | 	wrlong	#1, objptr
06c2c     00 2A 06 F6 | 	mov	local07, #0
06c30     13 00 00 FF 
06c34     38 E4 05 F1 | 	add	objptr, ##9784
06c38     F2 00 68 FC | 	wrlong	#0, objptr
06c3c     4A 00 00 FF 
06c40     7C E4 85 F1 | 	sub	objptr, ##38012
06c44                 | LR__0590
06c44                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
06c44     02 24 0E F2 | 	cmp	local04, #2 wz
06c48     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
06c4c     24 00 90 5D |  if_ne	jmp	#LR__0591
06c50     35 00 00 FF 
06c54     10 E4 05 F1 | 	add	objptr, ##27152
06c58     F2 28 02 FB | 	rdlong	local06, objptr
06c5c     01 2A 06 F6 | 	mov	local07, #1
06c60     02 00 00 FF 
06c64     34 E4 05 F1 | 	add	objptr, ##1076
06c68     F2 02 68 FC | 	wrlong	#1, objptr
06c6c     37 00 00 FF 
06c70     44 E4 85 F1 | 	sub	objptr, ##28228
06c74                 | LR__0591
06c74                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
06c74     04 24 0E F2 | 	cmp	local04, #4 wz
06c78     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
06c7c     30 00 90 5D |  if_ne	jmp	#LR__0592
06c80     35 00 00 FF 
06c84     18 E4 05 F1 | 	add	objptr, ##27160
06c88     F2 28 02 FB | 	rdlong	local06, objptr
06c8c     02 2A 06 F6 | 	mov	local07, #2
06c90     02 00 00 FF 
06c94     2C E4 05 F1 | 	add	objptr, ##1068
06c98     F2 04 68 FC | 	wrlong	#2, objptr
06c9c     13 00 00 FF 
06ca0     38 E4 05 F1 | 	add	objptr, ##9784
06ca4     F2 04 68 FC | 	wrlong	#2, objptr
06ca8     4A 00 00 FF 
06cac     7C E4 85 F1 | 	sub	objptr, ##38012
06cb0                 | LR__0592
06cb0                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
06cb0     05 24 0E F2 | 	cmp	local04, #5 wz
06cb4     44 00 90 5D |  if_ne	jmp	#LR__0593
06cb8     37 00 00 FF 
06cbc     44 E4 05 F1 | 	add	objptr, ##28228
06cc0     F2 FA 01 FB | 	rdlong	result1, objptr
06cc4     FD 2A 02 F6 | 	mov	local07, result1
06cc8     03 2A 66 F0 | 	shl	local07, #3
06ccc     02 00 00 FF 
06cd0     38 E4 85 F1 | 	sub	objptr, ##1080
06cd4     F2 2A 02 F1 | 	add	local07, objptr
06cd8     04 2A 06 F1 | 	add	local07, #4
06cdc     15 29 02 FB | 	rdlong	local06, local07
06ce0     FD 2A 02 F6 | 	mov	local07, result1
06ce4     01 2A 06 F1 | 	add	local07, #1
06ce8     02 00 00 FF 
06cec     38 E4 05 F1 | 	add	objptr, ##1080
06cf0     F2 2A 62 FC | 	wrlong	local07, objptr
06cf4     37 00 00 FF 
06cf8     44 E4 85 F1 | 	sub	objptr, ##28228
06cfc                 | LR__0593
06cfc     00 2C 06 F6 | 	mov	local08, #0
06d00                 | ' vars=0
06d00                 | ' 'print  "In compile_immediate cmd=:", cmd
06d00                 | ' 451 select case cmd
06d00     5C 28 0E F2 | 	cmp	local06, #92 wz
06d04     80 02 90 AD |  if_e	jmp	#LR__0594
06d08     47 28 0E F2 | 	cmp	local06, #71 wz
06d0c     84 02 90 AD |  if_e	jmp	#LR__0595
06d10     59 28 0E F2 | 	cmp	local06, #89 wz
06d14     88 02 90 AD |  if_e	jmp	#LR__0596
06d18     45 28 0E F2 | 	cmp	local06, #69 wz
06d1c     8C 02 90 AD |  if_e	jmp	#LR__0597
06d20     69 28 0E F2 | 	cmp	local06, #105 wz
06d24     90 02 90 AD |  if_e	jmp	#LR__0598
06d28     40 28 0E F2 | 	cmp	local06, #64 wz
06d2c     84 05 90 AD |  if_e	jmp	#LR__0665
06d30     B4 28 0E F2 | 	cmp	local06, #180 wz
06d34     8C 02 90 AD |  if_e	jmp	#LR__0599
06d38     49 28 0E F2 | 	cmp	local06, #73 wz
06d3c     8C 02 90 AD |  if_e	jmp	#LR__0600
06d40     50 28 0E F2 | 	cmp	local06, #80 wz
06d44     90 02 90 AD |  if_e	jmp	#LR__0601
06d48     AE 28 0E F2 | 	cmp	local06, #174 wz
06d4c     94 02 90 AD |  if_e	jmp	#LR__0602
06d50     B0 28 0E F2 | 	cmp	local06, #176 wz
06d54     98 02 90 AD |  if_e	jmp	#LR__0603
06d58     AF 28 0E F2 | 	cmp	local06, #175 wz
06d5c     9C 02 90 AD |  if_e	jmp	#LR__0604
06d60     B1 28 0E F2 | 	cmp	local06, #177 wz
06d64     A0 02 90 AD |  if_e	jmp	#LR__0605
06d68     68 28 0E F2 | 	cmp	local06, #104 wz
06d6c     A4 02 90 AD |  if_e	jmp	#LR__0606
06d70     74 28 0E F2 | 	cmp	local06, #116 wz
06d74     A8 02 90 AD |  if_e	jmp	#LR__0607
06d78     73 28 0E F2 | 	cmp	local06, #115 wz
06d7c     AC 02 90 AD |  if_e	jmp	#LR__0608
06d80     6C 28 0E F2 | 	cmp	local06, #108 wz
06d84     B0 02 90 AD |  if_e	jmp	#LR__0609
06d88     89 28 0E F2 | 	cmp	local06, #137 wz
06d8c     24 05 90 AD |  if_e	jmp	#LR__0665
06d90     72 28 0E F2 | 	cmp	local06, #114 wz
06d94     AC 02 90 AD |  if_e	jmp	#LR__0610
06d98     5D 28 0E F2 | 	cmp	local06, #93 wz
06d9c     14 05 90 AD |  if_e	jmp	#LR__0665
06da0     96 28 0E F2 | 	cmp	local06, #150 wz
06da4     A4 02 90 AD |  if_e	jmp	#LR__0611
06da8     43 28 0E F2 | 	cmp	local06, #67 wz
06dac     A4 02 90 AD |  if_e	jmp	#LR__0612
06db0     5A 28 0E F2 | 	cmp	local06, #90 wz
06db4     A8 02 90 AD |  if_e	jmp	#LR__0613
06db8     AB 28 0E F2 | 	cmp	local06, #171 wz
06dbc     F4 04 90 AD |  if_e	jmp	#LR__0665
06dc0     BD 28 0E F2 | 	cmp	local06, #189 wz
06dc4     A0 02 90 AD |  if_e	jmp	#LR__0614
06dc8     BB 28 0E F2 | 	cmp	local06, #187 wz
06dcc     A4 02 90 AD |  if_e	jmp	#LR__0615
06dd0     4E 28 0E F2 | 	cmp	local06, #78 wz
06dd4     A8 02 90 AD |  if_e	jmp	#LR__0616
06dd8     A9 28 0E F2 | 	cmp	local06, #169 wz
06ddc     BC 02 90 AD |  if_e	jmp	#LR__0618
06de0     46 28 0E F2 | 	cmp	local06, #70 wz
06de4     BC 02 90 AD |  if_e	jmp	#LR__0619
06de8     71 28 0E F2 | 	cmp	local06, #113 wz
06dec     C0 02 90 AD |  if_e	jmp	#LR__0620
06df0     60 28 0E F2 | 	cmp	local06, #96 wz
06df4     C4 02 90 AD |  if_e	jmp	#LR__0621
06df8     4A 28 0E F2 | 	cmp	local06, #74 wz
06dfc     C8 02 90 AD |  if_e	jmp	#LR__0622
06e00     48 28 0E F2 | 	cmp	local06, #72 wz
06e04     C8 02 90 AD |  if_e	jmp	#LR__0623
06e08     58 28 0E F2 | 	cmp	local06, #88 wz
06e0c     CC 02 90 AD |  if_e	jmp	#LR__0624
06e10     5F 28 0E F2 | 	cmp	local06, #95 wz
06e14     CC 02 90 AD |  if_e	jmp	#LR__0625
06e18     8A 28 0E F2 | 	cmp	local06, #138 wz
06e1c     D0 02 90 AD |  if_e	jmp	#LR__0626
06e20     4C 28 0E F2 | 	cmp	local06, #76 wz
06e24     D4 02 90 AD |  if_e	jmp	#LR__0627
06e28     52 28 0E F2 | 	cmp	local06, #82 wz
06e2c     D8 02 90 AD |  if_e	jmp	#LR__0628
06e30     97 28 0E F2 | 	cmp	local06, #151 wz
06e34     DC 02 90 AD |  if_e	jmp	#LR__0629
06e38     61 28 0E F2 | 	cmp	local06, #97 wz
06e3c     E0 02 90 AD |  if_e	jmp	#LR__0630
06e40     63 28 0E F2 | 	cmp	local06, #99 wz
06e44     E4 02 90 AD |  if_e	jmp	#LR__0631
06e48     41 28 0E F2 | 	cmp	local06, #65 wz
06e4c     64 04 90 AD |  if_e	jmp	#LR__0665
06e50     4B 28 0E F2 | 	cmp	local06, #75 wz
06e54     E0 02 90 AD |  if_e	jmp	#LR__0632
06e58     B3 28 0E F2 | 	cmp	local06, #179 wz
06e5c     E0 02 90 AD |  if_e	jmp	#LR__0633
06e60     5E 28 0E F2 | 	cmp	local06, #94 wz
06e64     E4 02 90 AD |  if_e	jmp	#LR__0634
06e68     7C 28 0E F2 | 	cmp	local06, #124 wz
06e6c     E8 02 90 AD |  if_e	jmp	#LR__0635
06e70     7D 28 0E F2 | 	cmp	local06, #125 wz
06e74     EC 02 90 AD |  if_e	jmp	#LR__0636
06e78     7E 28 0E F2 | 	cmp	local06, #126 wz
06e7c     F0 02 90 AD |  if_e	jmp	#LR__0637
06e80     7F 28 0E F2 | 	cmp	local06, #127 wz
06e84     F4 02 90 AD |  if_e	jmp	#LR__0638
06e88     80 28 0E F2 | 	cmp	local06, #128 wz
06e8c     F8 02 90 AD |  if_e	jmp	#LR__0639
06e90     55 28 0E F2 | 	cmp	local06, #85 wz
06e94     FC 02 90 AD |  if_e	jmp	#LR__0640
06e98     75 28 0E F2 | 	cmp	local06, #117 wz
06e9c     00 03 90 AD |  if_e	jmp	#LR__0641
06ea0     42 28 0E F2 | 	cmp	local06, #66 wz
06ea4     04 03 90 AD |  if_e	jmp	#LR__0642
06ea8     95 28 0E F2 | 	cmp	local06, #149 wz
06eac     08 03 90 AD |  if_e	jmp	#LR__0643
06eb0     AC 28 0E F2 | 	cmp	local06, #172 wz
06eb4     FC 03 90 AD |  if_e	jmp	#LR__0665
06eb8     81 28 0E F2 | 	cmp	local06, #129 wz
06ebc     04 03 90 AD |  if_e	jmp	#LR__0644
06ec0     44 28 0E F2 | 	cmp	local06, #68 wz
06ec4     08 03 90 AD |  if_e	jmp	#LR__0645
06ec8     BC 28 0E F2 | 	cmp	local06, #188 wz
06ecc     0C 03 90 AD |  if_e	jmp	#LR__0646
06ed0     88 28 0E F2 | 	cmp	local06, #136 wz
06ed4     DC 03 90 AD |  if_e	jmp	#LR__0665
06ed8     92 28 0E F2 | 	cmp	local06, #146 wz
06edc     08 03 90 AD |  if_e	jmp	#LR__0647
06ee0     BE 28 0E F2 | 	cmp	local06, #190 wz
06ee4     88 04 90 AD |  if_e	jmp	#LR__0666
06ee8     AA 28 0E F2 | 	cmp	local06, #170 wz
06eec     C4 03 90 AD |  if_e	jmp	#LR__0665
06ef0     4D 28 0E F2 | 	cmp	local06, #77 wz
06ef4     F8 02 90 AD |  if_e	jmp	#LR__0648
06ef8     51 28 0E F2 | 	cmp	local06, #81 wz
06efc     FC 02 90 AD |  if_e	jmp	#LR__0649
06f00     8E 28 0E F2 | 	cmp	local06, #142 wz
06f04     00 03 90 AD |  if_e	jmp	#LR__0650
06f08     90 28 0E F2 | 	cmp	local06, #144 wz
06f0c     04 03 90 AD |  if_e	jmp	#LR__0651
06f10     8D 28 0E F2 | 	cmp	local06, #141 wz
06f14     08 03 90 AD |  if_e	jmp	#LR__0652
06f18     8C 28 0E F2 | 	cmp	local06, #140 wz
06f1c     0C 03 90 AD |  if_e	jmp	#LR__0653
06f20     91 28 0E F2 | 	cmp	local06, #145 wz
06f24     10 03 90 AD |  if_e	jmp	#LR__0654
06f28     8B 28 0E F2 | 	cmp	local06, #139 wz
06f2c     14 03 90 AD |  if_e	jmp	#LR__0655
06f30     8F 28 0E F2 | 	cmp	local06, #143 wz
06f34     18 03 90 AD |  if_e	jmp	#LR__0656
06f38     B2 28 0E F2 | 	cmp	local06, #178 wz
06f3c     1C 03 90 AD |  if_e	jmp	#LR__0657
06f40     6D 28 0E F2 | 	cmp	local06, #109 wz
06f44     20 03 90 AD |  if_e	jmp	#LR__0658
06f48     70 28 0E F2 | 	cmp	local06, #112 wz
06f4c     64 03 90 AD |  if_e	jmp	#LR__0665
06f50     56 28 0E F2 | 	cmp	local06, #86 wz
06f54     1C 03 90 AD |  if_e	jmp	#LR__0659
06f58     57 28 0E F2 | 	cmp	local06, #87 wz
06f5c     54 03 90 AD |  if_e	jmp	#LR__0665
06f60     79 28 0E F2 | 	cmp	local06, #121 wz
06f64     18 03 90 AD |  if_e	jmp	#LR__0660
06f68     77 28 0E F2 | 	cmp	local06, #119 wz
06f6c     1C 03 90 AD |  if_e	jmp	#LR__0661
06f70     78 28 0E F2 | 	cmp	local06, #120 wz
06f74     20 03 90 AD |  if_e	jmp	#LR__0662
06f78     01 00 00 FF 
06f7c     04 28 0E F2 | 	cmp	local06, ##516 wz
06f80     20 03 90 AD |  if_e	jmp	#LR__0663
06f84     24 03 90 FD | 	jmp	#LR__0664
06f88                 | LR__0594
06f88     08 0D B0 FD | 	call	#_compile_fun_2p
06f8c     FD 26 02 F6 | 	mov	local05, result1
06f90     20 03 90 FD | 	jmp	#LR__0665
06f94                 | LR__0595
06f94     3C 0E B0 FD | 	call	#_compile_fun_4p
06f98     FD 26 02 F6 | 	mov	local05, result1
06f9c     14 03 90 FD | 	jmp	#LR__0665
06fa0                 | LR__0596
06fa0     68 33 B0 FD | 	call	#_expr
06fa4                 | ' expr()
06fa4                 | ' return 0
06fa4     00 26 06 F6 | 	mov	local05, #0
06fa8     08 03 90 FD | 	jmp	#LR__0665
06fac                 | LR__0597
06fac     58 0D B0 FD | 	call	#_compile_fun_3p
06fb0     FD 26 02 F6 | 	mov	local05, result1
06fb4     FC 02 90 FD | 	jmp	#LR__0665
06fb8                 | LR__0598
06fb8     50 33 B0 FD | 	call	#_expr
06fbc                 | ' expr()
06fbc                 | ' return 0
06fbc     00 26 06 F6 | 	mov	local05, #0
06fc0     F0 02 90 FD | 	jmp	#LR__0665
06fc4                 | LR__0599
06fc4     44 33 B0 FD | 	call	#_expr
06fc8                 | ' expr()
06fc8                 | ' return 0
06fc8     E8 02 90 FD | 	jmp	#LR__0665
06fcc                 | LR__0600
06fcc     3C 33 B0 FD | 	call	#_expr
06fd0                 | ' expr()
06fd0                 | ' return 0
06fd0     00 26 06 F6 | 	mov	local05, #0
06fd4     DC 02 90 FD | 	jmp	#LR__0665
06fd8                 | LR__0601
06fd8     98 10 B0 FD | 	call	#_compile_fun_varp
06fdc     FD 2C 02 F6 | 	mov	local08, result1
06fe0     D0 02 90 FD | 	jmp	#LR__0665
06fe4                 | LR__0602
06fe4     8C 10 B0 FD | 	call	#_compile_fun_varp
06fe8     FD 2C 02 F6 | 	mov	local08, result1
06fec     C4 02 90 FD | 	jmp	#LR__0665
06ff0                 | LR__0603
06ff0     80 10 B0 FD | 	call	#_compile_fun_varp
06ff4     FD 2C 02 F6 | 	mov	local08, result1
06ff8     B8 02 90 FD | 	jmp	#LR__0665
06ffc                 | LR__0604
06ffc     74 10 B0 FD | 	call	#_compile_fun_varp
07000     FD 2C 02 F6 | 	mov	local08, result1
07004     AC 02 90 FD | 	jmp	#LR__0665
07008                 | LR__0605
07008     68 10 B0 FD | 	call	#_compile_fun_varp
0700c     FD 2C 02 F6 | 	mov	local08, result1
07010     A0 02 90 FD | 	jmp	#LR__0665
07014                 | LR__0606
07014     F4 32 B0 FD | 	call	#_expr
07018                 | ' expr()
07018                 | ' return 0
07018     00 26 06 F6 | 	mov	local05, #0
0701c     94 02 90 FD | 	jmp	#LR__0665
07020                 | LR__0607
07020     50 10 B0 FD | 	call	#_compile_fun_varp
07024     FD 2C 02 F6 | 	mov	local08, result1
07028     88 02 90 FD | 	jmp	#LR__0665
0702c                 | LR__0608
0702c     44 10 B0 FD | 	call	#_compile_fun_varp
07030     FD 2C 02 F6 | 	mov	local08, result1
07034     7C 02 90 FD | 	jmp	#LR__0665
07038                 | LR__0609
07038     BC 0E B0 FD | 	call	#_compile_fun_5p
0703c     FD 26 02 F6 | 	mov	local05, result1
07040     70 02 90 FD | 	jmp	#LR__0665
07044                 | LR__0610
07044     18 1A B0 FD | 	call	#_compile_dim
07048     24 03 90 FD | 	jmp	#LR__0666
0704c                 | LR__0611
0704c     44 0C B0 FD | 	call	#_compile_fun_2p
07050     60 02 90 FD | 	jmp	#LR__0665
07054                 | LR__0612
07054     3C 0C B0 FD | 	call	#_compile_fun_2p
07058     FD 26 02 F6 | 	mov	local05, result1
0705c     54 02 90 FD | 	jmp	#LR__0665
07060                 | LR__0613
07060     D4 18 B0 FD | 	call	#_compile_else
07064     08 03 90 FD | 	jmp	#LR__0666
07068                 | LR__0614
07068     08 10 B0 FD | 	call	#_compile_fun_varp
0706c     FD 2C 02 F6 | 	mov	local08, result1
07070     40 02 90 FD | 	jmp	#LR__0665
07074                 | LR__0615
07074     FC 0F B0 FD | 	call	#_compile_fun_varp
07078     FD 2C 02 F6 | 	mov	local08, result1
0707c     34 02 90 FD | 	jmp	#LR__0665
07080                 | LR__0616
07080     01 24 16 F2 | 	cmp	local04, #1 wc
07084     08 00 90 CD |  if_b	jmp	#LR__0617
07088     90 2E B0 FD | 	call	#_compile_goto
0708c     E0 02 90 FD | 	jmp	#LR__0666
07090                 | LR__0617
07090     19 12 06 F6 | 	mov	arg01, #25
07094     EC 63 B1 FD | 	call	#_printerror
07098     D4 02 90 FD | 	jmp	#LR__0666
0709c                 | LR__0618
0709c     14 2E B0 FD | 	call	#_compile_gosub
070a0     CC 02 90 FD | 	jmp	#LR__0666
070a4                 | LR__0619
070a4     60 0C B0 FD | 	call	#_compile_fun_3p
070a8     FD 26 02 F6 | 	mov	local05, result1
070ac     04 02 90 FD | 	jmp	#LR__0665
070b0                 | LR__0620
070b0     20 0D B0 FD | 	call	#_compile_fun_4p
070b4     FD 26 02 F6 | 	mov	local05, result1
070b8     F8 01 90 FD | 	jmp	#LR__0665
070bc                 | LR__0621
070bc     4C 32 B0 FD | 	call	#_expr
070c0                 | ' expr()
070c0                 | ' return 0
070c0     00 26 06 F6 | 	mov	local05, #0
070c4     EC 01 90 FD | 	jmp	#LR__0665
070c8                 | LR__0622
070c8     A4 20 B0 FD | 	call	#_compile_for
070cc     A0 02 90 FD | 	jmp	#LR__0666
070d0                 | LR__0623
070d0     00 0D B0 FD | 	call	#_compile_fun_4p
070d4     FD 26 02 F6 | 	mov	local05, result1
070d8     D8 01 90 FD | 	jmp	#LR__0665
070dc                 | LR__0624
070dc     18 17 B0 FD | 	call	#_compile_if
070e0     8C 02 90 FD | 	jmp	#LR__0666
070e4                 | LR__0625
070e4     24 32 B0 FD | 	call	#_expr
070e8                 | ' expr()
070e8                 | ' return 0
070e8     00 26 06 F6 | 	mov	local05, #0
070ec     C4 01 90 FD | 	jmp	#LR__0665
070f0                 | LR__0626
070f0     18 32 B0 FD | 	call	#_expr
070f4                 | ' expr()
070f4                 | ' return 0
070f4     00 26 06 F6 | 	mov	local05, #0
070f8     B8 01 90 FD | 	jmp	#LR__0665
070fc                 | LR__0627
070fc     74 0F B0 FD | 	call	#_compile_fun_varp
07100     FD 2C 02 F6 | 	mov	local08, result1
07104     AC 01 90 FD | 	jmp	#LR__0665
07108                 | LR__0628
07108     68 0F B0 FD | 	call	#_compile_fun_varp
0710c     FD 2C 02 F6 | 	mov	local08, result1
07110     A0 01 90 FD | 	jmp	#LR__0665
07114                 | LR__0629
07114     7C 0B B0 FD | 	call	#_compile_fun_2p
07118     FD 26 02 F6 | 	mov	local05, result1
0711c     94 01 90 FD | 	jmp	#LR__0665
07120                 | LR__0630
07120     E8 31 B0 FD | 	call	#_expr
07124                 | ' expr()
07124                 | ' return 0
07124     00 26 06 F6 | 	mov	local05, #0
07128     88 01 90 FD | 	jmp	#LR__0665
0712c                 | LR__0631
0712c     DC 31 B0 FD | 	call	#_expr
07130                 | ' expr()
07130                 | ' return 0
07130     00 26 06 F6 | 	mov	local05, #0
07134     7C 01 90 FD | 	jmp	#LR__0665
07138                 | LR__0632
07138     C8 2B B0 FD | 	call	#_compile_next
0713c     30 02 90 FD | 	jmp	#LR__0666
07140                 | LR__0633
07140     C4 0B B0 FD | 	call	#_compile_fun_3p
07144     FD 26 02 F6 | 	mov	local05, result1
07148     68 01 90 FD | 	jmp	#LR__0665
0714c                 | LR__0634
0714c     BC 31 B0 FD | 	call	#_expr
07150                 | ' expr()
07150                 | ' return 0
07150     00 26 06 F6 | 	mov	local05, #0
07154     5C 01 90 FD | 	jmp	#LR__0665
07158                 | LR__0635
07158     B0 31 B0 FD | 	call	#_expr
0715c                 | ' expr()
0715c                 | ' return 0
0715c     00 26 06 F6 | 	mov	local05, #0
07160     50 01 90 FD | 	jmp	#LR__0665
07164                 | LR__0636
07164     A4 31 B0 FD | 	call	#_expr
07168                 | ' expr()
07168                 | ' return 0
07168     00 26 06 F6 | 	mov	local05, #0
0716c     44 01 90 FD | 	jmp	#LR__0665
07170                 | LR__0637
07170     98 31 B0 FD | 	call	#_expr
07174                 | ' expr()
07174                 | ' return 0
07174     00 26 06 F6 | 	mov	local05, #0
07178     38 01 90 FD | 	jmp	#LR__0665
0717c                 | LR__0638
0717c     54 0C B0 FD | 	call	#_compile_fun_4p
07180     FD 26 02 F6 | 	mov	local05, result1
07184     2C 01 90 FD | 	jmp	#LR__0665
07188                 | LR__0639
07188     80 31 B0 FD | 	call	#_expr
0718c                 | ' expr()
0718c                 | ' return 0
0718c     00 26 06 F6 | 	mov	local05, #0
07190     20 01 90 FD | 	jmp	#LR__0665
07194                 | LR__0640
07194     FC 0A B0 FD | 	call	#_compile_fun_2p
07198     FD 26 02 F6 | 	mov	local05, result1
0719c     14 01 90 FD | 	jmp	#LR__0665
071a0                 | LR__0641
071a0     D0 0E B0 FD | 	call	#_compile_fun_varp
071a4     FD 2C 02 F6 | 	mov	local08, result1
071a8     08 01 90 FD | 	jmp	#LR__0665
071ac                 | LR__0642
071ac     E4 0A B0 FD | 	call	#_compile_fun_2p
071b0     FD 26 02 F6 | 	mov	local05, result1
071b4     FC 00 90 FD | 	jmp	#LR__0665
071b8                 | LR__0643
071b8     D8 0A B0 FD | 	call	#_compile_fun_2p
071bc     FD 26 02 F6 | 	mov	local05, result1
071c0     F0 00 90 FD | 	jmp	#LR__0665
071c4                 | LR__0644
071c4     CC 0A B0 FD | 	call	#_compile_fun_2p
071c8     FD 26 02 F6 | 	mov	local05, result1
071cc     E4 00 90 FD | 	jmp	#LR__0665
071d0                 | LR__0645
071d0     4C 0F B0 FD | 	call	#_compile_print
071d4     FD 26 02 F6 | 	mov	local05, result1
071d8     94 01 90 FD | 	jmp	#LR__0666
071dc                 | LR__0646
071dc     94 0E B0 FD | 	call	#_compile_fun_varp
071e0     FD 2C 02 F6 | 	mov	local08, result1
071e4     CC 00 90 FD | 	jmp	#LR__0665
071e8                 | LR__0647
071e8     20 31 B0 FD | 	call	#_expr
071ec                 | ' expr()
071ec                 | ' return 0
071ec     C4 00 90 FD | 	jmp	#LR__0665
071f0                 | LR__0648
071f0     80 0E B0 FD | 	call	#_compile_fun_varp
071f4     FD 2C 02 F6 | 	mov	local08, result1
071f8     B8 00 90 FD | 	jmp	#LR__0665
071fc                 | LR__0649
071fc     74 0E B0 FD | 	call	#_compile_fun_varp
07200     FD 2C 02 F6 | 	mov	local08, result1
07204     AC 00 90 FD | 	jmp	#LR__0665
07208                 | LR__0650
07208     88 0A B0 FD | 	call	#_compile_fun_2p
0720c     FD 26 02 F6 | 	mov	local05, result1
07210     A0 00 90 FD | 	jmp	#LR__0665
07214                 | LR__0651
07214     7C 0A B0 FD | 	call	#_compile_fun_2p
07218     FD 26 02 F6 | 	mov	local05, result1
0721c     94 00 90 FD | 	jmp	#LR__0665
07220                 | LR__0652
07220     70 0A B0 FD | 	call	#_compile_fun_2p
07224     FD 26 02 F6 | 	mov	local05, result1
07228     88 00 90 FD | 	jmp	#LR__0665
0722c                 | LR__0653
0722c     64 0A B0 FD | 	call	#_compile_fun_2p
07230     FD 26 02 F6 | 	mov	local05, result1
07234     7C 00 90 FD | 	jmp	#LR__0665
07238                 | LR__0654
07238     58 0A B0 FD | 	call	#_compile_fun_2p
0723c     FD 26 02 F6 | 	mov	local05, result1
07240     70 00 90 FD | 	jmp	#LR__0665
07244                 | LR__0655
07244     4C 0A B0 FD | 	call	#_compile_fun_2p
07248     FD 26 02 F6 | 	mov	local05, result1
0724c     64 00 90 FD | 	jmp	#LR__0665
07250                 | LR__0656
07250     40 0A B0 FD | 	call	#_compile_fun_2p
07254     FD 26 02 F6 | 	mov	local05, result1
07258     58 00 90 FD | 	jmp	#LR__0665
0725c                 | LR__0657
0725c     14 0E B0 FD | 	call	#_compile_fun_varp
07260     FD 2C 02 F6 | 	mov	local08, result1
07264     4C 00 90 FD | 	jmp	#LR__0665
07268                 | LR__0658
07268     9C 0A B0 FD | 	call	#_compile_fun_3p
0726c     FD 26 02 F6 | 	mov	local05, result1
07270     40 00 90 FD | 	jmp	#LR__0665
07274                 | LR__0659
07274     94 30 B0 FD | 	call	#_expr
07278                 | ' expr()
07278                 | ' return 0
07278     00 26 06 F6 | 	mov	local05, #0
0727c     34 00 90 FD | 	jmp	#LR__0665
07280                 | LR__0660
07280     10 0A B0 FD | 	call	#_compile_fun_2p
07284     FD 26 02 F6 | 	mov	local05, result1
07288     28 00 90 FD | 	jmp	#LR__0665
0728c                 | LR__0661
0728c     04 0A B0 FD | 	call	#_compile_fun_2p
07290     FD 26 02 F6 | 	mov	local05, result1
07294     1C 00 90 FD | 	jmp	#LR__0665
07298                 | LR__0662
07298     F8 09 B0 FD | 	call	#_compile_fun_2p
0729c     FD 26 02 F6 | 	mov	local05, result1
072a0     10 00 90 FD | 	jmp	#LR__0665
072a4                 | LR__0663
072a4     E4 01 B0 FD | 	call	#_compile_array_assign
072a8     C4 00 90 FD | 	jmp	#LR__0666
072ac                 | LR__0664
072ac     28 09 B0 FD | 	call	#_compile_unknown
072b0     BC 00 90 FD | 	jmp	#LR__0666
072b4                 | LR__0665
072b4     14 23 02 F6 | 	mov	local03, local06
072b8     16 1F 02 F6 | 	mov	local01, local08
072bc     0F 2B 02 F6 | 	mov	local07, local01
072c0     10 2F 02 F6 | 	mov	local09, local02
072c4     11 29 02 F6 | 	mov	local06, local03
072c8     4A 00 00 FF 
072cc     7C E4 05 F1 | 	add	objptr, ##38012
072d0     F2 1E 02 FB | 	rdlong	local01, objptr
072d4     0F 2D 02 F6 | 	mov	local08, local01
072d8     01 2C 66 F0 | 	shl	local08, #1
072dc     0F 2D 02 F1 | 	add	local08, local01
072e0     02 2C 66 F0 | 	shl	local08, #2
072e4     03 00 00 FF 
072e8     00 E4 85 F1 | 	sub	objptr, ##1536
072ec     F2 2C 02 F1 | 	add	local08, objptr
072f0     16 2B 62 FC | 	wrlong	local07, local08
072f4     03 00 00 FF 
072f8     00 E4 05 F1 | 	add	objptr, ##1536
072fc     F2 1E 02 FB | 	rdlong	local01, objptr
07300     0F 2D 02 F6 | 	mov	local08, local01
07304     01 2C 66 F0 | 	shl	local08, #1
07308     0F 2D 02 F1 | 	add	local08, local01
0730c     02 2C 66 F0 | 	shl	local08, #2
07310     03 00 00 FF 
07314     00 E4 85 F1 | 	sub	objptr, ##1536
07318     F2 2C 02 F1 | 	add	local08, objptr
0731c     04 2C 06 F1 | 	add	local08, #4
07320     16 2F 62 FC | 	wrlong	local09, local08
07324     03 00 00 FF 
07328     00 E4 05 F1 | 	add	objptr, ##1536
0732c     F2 1E 02 FB | 	rdlong	local01, objptr
07330     0F 2D 02 F6 | 	mov	local08, local01
07334     01 2C 66 F0 | 	shl	local08, #1
07338     0F 2D 02 F1 | 	add	local08, local01
0733c     02 2C 66 F0 | 	shl	local08, #2
07340     03 00 00 FF 
07344     00 E4 85 F1 | 	sub	objptr, ##1536
07348     F2 2C 02 F1 | 	add	local08, objptr
0734c     08 2C 06 F1 | 	add	local08, #8
07350     16 29 62 FC | 	wrlong	local06, local08
07354     03 00 00 FF 
07358     00 E4 05 F1 | 	add	objptr, ##1536
0735c     F2 2A 02 FB | 	rdlong	local07, objptr
07360     01 2A 06 F1 | 	add	local07, #1
07364     F2 2A 62 FC | 	wrlong	local07, objptr
07368     4A 00 00 FF 
0736c     7C E4 85 F1 | 	sub	objptr, ##38012
07370                 | LR__0666
07370                 | ' 
07370                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
07370                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
07370     03 24 0E F2 | 	cmp	local04, #3 wz
07374     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
07378     38 00 90 5D |  if_ne	jmp	#LR__0667
0737c     4A 00 00 FF 
07380     7C E4 05 F1 | 	add	objptr, ##38012
07384     F2 2C 02 FB | 	rdlong	local08, objptr
07388     16 1F 02 F6 | 	mov	local01, local08
0738c     01 1E 66 F0 | 	shl	local01, #1
07390     16 1F 02 F1 | 	add	local01, local08
07394     02 1E 66 F0 | 	shl	local01, #2
07398     03 00 00 FF 
0739c     00 E4 85 F1 | 	sub	objptr, ##1536
073a0     F2 1E 02 F1 | 	add	local01, objptr
073a4     08 1E 06 F1 | 	add	local01, #8
073a8     0F FD 6B FC | 	wrlong	#510, local01
073ac     47 00 00 FF 
073b0     7C E4 85 F1 | 	sub	objptr, ##36476
073b4                 | LR__0667
073b4                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
073b4     4A 00 00 FF 
073b8     7C E4 05 F1 | 	add	objptr, ##38012
073bc     F2 1E 02 FB | 	rdlong	local01, objptr
073c0     4A 00 00 FF 
073c4     7C E4 85 F1 | 	sub	objptr, ##38012
073c8     97 58 48 FB | 	callpa	#(@LR__0670-@LR__0668)>>2,fcache_load_ptr_
073cc                 | LR__0668
073cc     0F 2D 02 F6 | 	mov	local08, local01
073d0     01 2C 66 F0 | 	shl	local08, #1
073d4     0F 2D 02 F1 | 	add	local08, local01
073d8     02 2C 66 F0 | 	shl	local08, #2
073dc     47 00 00 FF 
073e0     7C E4 05 F1 | 	add	objptr, ##36476
073e4     F2 2C 02 F1 | 	add	local08, objptr
073e8     08 2C 06 F1 | 	add	local08, #8
073ec     16 2D 02 FB | 	rdlong	local08, local08
073f0     9B 2C 0E F2 | 	cmp	local08, #155 wz
073f4     47 00 00 FF 
073f8     7C E4 85 F1 | 	sub	objptr, ##36476
073fc     70 00 90 5D |  if_ne	jmp	#LR__0669
07400     0F 2D 02 F6 | 	mov	local08, local01
07404     01 2C 86 F1 | 	sub	local08, #1
07408     16 2F 02 F6 | 	mov	local09, local08
0740c     01 2E 66 F0 | 	shl	local09, #1
07410     16 2F 02 F1 | 	add	local09, local08
07414     02 2E 66 F0 | 	shl	local09, #2
07418     47 00 00 FF 
0741c     7C E4 05 F1 | 	add	objptr, ##36476
07420     F2 2E 02 F1 | 	add	local09, objptr
07424     08 2E 06 F1 | 	add	local09, #8
07428     17 2D 02 FB | 	rdlong	local08, local09
0742c     11 2C 0E F2 | 	cmp	local08, #17 wz
07430     47 00 00 FF 
07434     7C E4 85 F1 | 	sub	objptr, ##36476
07438     34 00 90 5D |  if_ne	jmp	#LR__0669
0743c     0F 2F 02 F6 | 	mov	local09, local01
07440     01 2E 86 F1 | 	sub	local09, #1
07444     17 2D 02 F6 | 	mov	local08, local09
07448     01 2C 66 F0 | 	shl	local08, #1
0744c     17 2D 02 F1 | 	add	local08, local09
07450     02 2C 66 F0 | 	shl	local08, #2
07454     47 00 00 FF 
07458     7C E4 05 F1 | 	add	objptr, ##36476
0745c     F2 2C 02 F1 | 	add	local08, objptr
07460     08 2C 06 F1 | 	add	local08, #8
07464     16 25 68 FC | 	wrlong	#18, local08
07468     47 00 00 FF 
0746c     7C E4 85 F1 | 	sub	objptr, ##36476
07470                 | LR__0669
07470     01 1E 86 F1 | 	sub	local01, #1
07474     01 1E 56 F2 | 	cmps	local01, #1 wc
07478     50 FF 9F 3D |  if_ae	jmp	#LR__0668
0747c                 | LR__0670
0747c                 | ' 'print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
0747c                 | ' 'print "In compile_immediate:" : for i=0 to lineptr: print ucompiledline(i): next i
0747c                 | ' return err
0747c     13 FB 01 F6 | 	mov	result1, local05
07480     A7 F0 03 F6 | 	mov	ptra, fp
07484     B2 00 A0 FD | 	call	#popregs_
07488                 | _compile_immediate_ret
07488     2D 00 64 FD | 	ret
0748c                 | 
0748c                 | ' 
0748c                 | ' sub compile_array_assign
0748c                 | _compile_array_assign
0748c     0A 4A 05 F6 | 	mov	COUNT_, #10
07490     A8 00 A0 FD | 	call	#pushregs_
07494     00 24 06 F6 | 	mov	local04, #0
07498     37 00 00 FF 
0749c     44 E4 05 F1 | 	add	objptr, ##28228
074a0     F2 26 02 FB | 	rdlong	local05, objptr
074a4     13 FB 01 F6 | 	mov	result1, local05
074a8     01 FA 85 F1 | 	sub	result1, #1
074ac     03 FA 65 F0 | 	shl	result1, #3
074b0     02 00 00 FF 
074b4     38 E4 85 F1 | 	sub	objptr, ##1080
074b8     F2 FA 01 F1 | 	add	result1, objptr
074bc     FD 28 02 FB | 	rdlong	local06, result1
074c0                 | ' numpar=0
074c0                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
074c0                 | ' ' todo here: recognize params and t1.result.twowords=numpar
074c0                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
074c0                 | ' if lparts(ct).token=token_lpar then
074c0     03 26 66 F0 | 	shl	local05, #3
074c4     F2 26 02 F1 | 	add	local05, objptr
074c8     04 26 06 F1 | 	add	local05, #4
074cc     13 27 02 FB | 	rdlong	local05, local05
074d0     15 26 0E F2 | 	cmp	local05, #21 wz
074d4     35 00 00 FF 
074d8     0C E4 85 F1 | 	sub	objptr, ##27148
074dc     D4 01 90 5D |  if_ne	jmp	#LR__0684
074e0     37 00 00 FF 
074e4     44 E4 05 F1 | 	add	objptr, ##28228
074e8     F2 2A 02 FB | 	rdlong	local07, objptr
074ec     01 2A 06 F1 | 	add	local07, #1
074f0     F2 2A 62 FC | 	wrlong	local07, objptr
074f4     37 00 00 FF 
074f8     44 E4 85 F1 | 	sub	objptr, ##28228
074fc                 | '   ct+=1 											' omit this lpar, this is for expr list
074fc                 | '   do
074fc                 | LR__0680
074fc     0C 2E B0 FD | 	call	#_expr
07500     37 00 00 FF 
07504     44 E4 05 F1 | 	add	objptr, ##28228
07508     F2 26 02 FB | 	rdlong	local05, objptr
0750c     01 26 06 F1 | 	add	local05, #1
07510     F2 26 62 FC | 	wrlong	local05, objptr
07514     01 24 06 F1 | 	add	local04, #1
07518     01 26 86 F1 | 	sub	local05, #1
0751c     03 26 66 F0 | 	shl	local05, #3
07520     02 00 00 FF 
07524     38 E4 85 F1 | 	sub	objptr, ##1080
07528     F2 26 02 F1 | 	add	local05, objptr
0752c     04 26 06 F1 | 	add	local05, #4
07530     13 2B 02 FB | 	rdlong	local07, local05
07534     14 2A 0E F2 | 	cmp	local07, #20 wz
07538     35 00 00 FF 
0753c     0C E4 85 F1 | 	sub	objptr, ##27148
07540     34 00 90 AD |  if_e	jmp	#LR__0681
07544     37 00 00 FF 
07548     44 E4 05 F1 | 	add	objptr, ##28228
0754c     F2 2A 02 FB | 	rdlong	local07, objptr
07550     03 2A 66 F0 | 	shl	local07, #3
07554     02 00 00 FF 
07558     38 E4 85 F1 | 	sub	objptr, ##1080
0755c     F2 2A 02 F1 | 	add	local07, objptr
07560     04 2A 06 F1 | 	add	local07, #4
07564     15 2B 02 FB | 	rdlong	local07, local07
07568     FE 2B 0E F2 | 	cmp	local07, #510 wz
0756c     35 00 00 FF 
07570     0C E4 85 F1 | 	sub	objptr, ##27148
07574     84 FF 9F 5D |  if_ne	jmp	#LR__0680
07578                 | LR__0681
07578     37 00 00 FF 
0757c     44 E4 05 F1 | 	add	objptr, ##28228
07580     F2 2A 02 FB | 	rdlong	local07, objptr
07584     01 2A 06 F1 | 	add	local07, #1
07588     F2 2A 62 FC | 	wrlong	local07, objptr
0758c     37 00 00 FF 
07590     44 E4 85 F1 | 	sub	objptr, ##28228
07594     74 2D B0 FD | 	call	#_expr
07598     01 2C 66 F6 | 	neg	local08, #1
0759c     00 2E 06 F6 | 	mov	local09, #0
075a0                 | ' '   print "in array_assign, rpar found, numpar=",numpar
075a0                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
075a0                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
075a0                 | ' ct+=1 : expr()
075a0                 | ' ' now find the vae
075a0                 | ' 
075a0                 | ' j=-1 : i=0 : do : 
075a0                 | LR__0682
075a0                 | '   if variables(i).name=varname$ then j=i: exit loop
075a0     17 27 02 F6 | 	mov	local05, local09
075a4     04 26 66 F0 | 	shl	local05, #4
075a8     14 00 00 FF 
075ac     F8 E5 05 F1 | 	add	objptr, ##10744
075b0     F2 26 02 F1 | 	add	local05, objptr
075b4     13 13 02 FB | 	rdlong	arg01, local05
075b8     14 15 02 F6 | 	mov	arg02, local06
075bc     14 00 00 FF 
075c0     F8 E5 85 F1 | 	sub	objptr, ##10744
075c4     7C 94 B1 FD | 	call	#__system___string_cmp
075c8     00 FA 0D F2 | 	cmp	result1, #0 wz
075cc     17 2D 02 A6 |  if_e	mov	local08, local09
075d0     20 00 90 AD |  if_e	jmp	#LR__0683
075d4     01 2E 06 F1 | 	add	local09, #1
075d8     35 00 00 FF 
075dc     08 E4 05 F1 | 	add	objptr, ##27144
075e0     F2 2A 02 FB | 	rdlong	local07, objptr
075e4     35 00 00 FF 
075e8     08 E4 85 F1 | 	sub	objptr, ##27144
075ec     15 2F 5A F2 | 	cmps	local09, local07 wcz
075f0     AC FF 9F ED |  if_be	jmp	#LR__0682
075f4                 | LR__0683
075f4     16 1F 02 F6 | 	mov	local01, local08
075f8     12 21 02 F6 | 	mov	local02, local04
075fc     17 22 06 F6 | 	mov	local03, #23
07600     0F 2B 02 F6 | 	mov	local07, local01
07604     10 31 02 F6 | 	mov	local10, local02
07608     11 2D 02 F6 | 	mov	local08, local03
0760c     4A 00 00 FF 
07610     7C E4 05 F1 | 	add	objptr, ##38012
07614     F2 1E 02 FB | 	rdlong	local01, objptr
07618     0F 2F 02 F6 | 	mov	local09, local01
0761c     01 2E 66 F0 | 	shl	local09, #1
07620     0F 2F 02 F1 | 	add	local09, local01
07624     02 2E 66 F0 | 	shl	local09, #2
07628     03 00 00 FF 
0762c     00 E4 85 F1 | 	sub	objptr, ##1536
07630     F2 2E 02 F1 | 	add	local09, objptr
07634     17 2B 62 FC | 	wrlong	local07, local09
07638     03 00 00 FF 
0763c     00 E4 05 F1 | 	add	objptr, ##1536
07640     F2 1E 02 FB | 	rdlong	local01, objptr
07644     0F 2F 02 F6 | 	mov	local09, local01
07648     01 2E 66 F0 | 	shl	local09, #1
0764c     0F 2F 02 F1 | 	add	local09, local01
07650     02 2E 66 F0 | 	shl	local09, #2
07654     03 00 00 FF 
07658     00 E4 85 F1 | 	sub	objptr, ##1536
0765c     F2 2E 02 F1 | 	add	local09, objptr
07660     04 2E 06 F1 | 	add	local09, #4
07664     17 31 62 FC | 	wrlong	local10, local09
07668     03 00 00 FF 
0766c     00 E4 05 F1 | 	add	objptr, ##1536
07670     F2 30 02 FB | 	rdlong	local10, objptr
07674     18 1F 02 F6 | 	mov	local01, local10
07678     01 1E 66 F0 | 	shl	local01, #1
0767c     18 1F 02 F1 | 	add	local01, local10
07680     02 1E 66 F0 | 	shl	local01, #2
07684     03 00 00 FF 
07688     00 E4 85 F1 | 	sub	objptr, ##1536
0768c     F2 1E 02 F1 | 	add	local01, objptr
07690     08 1E 06 F1 | 	add	local01, #8
07694     0F 2D 62 FC | 	wrlong	local08, local01
07698     03 00 00 FF 
0769c     00 E4 05 F1 | 	add	objptr, ##1536
076a0     F2 2A 02 FB | 	rdlong	local07, objptr
076a4     01 2A 06 F1 | 	add	local07, #1
076a8     F2 2A 62 FC | 	wrlong	local07, objptr
076ac     4A 00 00 FF 
076b0     7C E4 85 F1 | 	sub	objptr, ##38012
076b4                 | LR__0684
076b4     A7 F0 03 F6 | 	mov	ptra, fp
076b8     B2 00 A0 FD | 	call	#popregs_
076bc                 | _compile_array_assign_ret
076bc     2D 00 64 FD | 	ret
076c0                 | 
076c0                 | ' 
076c0                 | ' 
076c0                 | ' sub compile_immediate_assign(linetype as ulong)
076c0                 | _compile_immediate_assign
076c0     09 4A 05 F6 | 	mov	COUNT_, #9
076c4     A8 00 A0 FD | 	call	#pushregs_
076c8     09 25 0A F6 | 	mov	local04, arg01 wz
076cc     FF 22 06 F6 | 	mov	local03, #255
076d0     01 26 66 F6 | 	neg	local05, #1
076d4                 | ' 
076d4                 | ' t1.result_type=result_error : t1.result.uresult=0
076d4                 | ' i=-1: j=-1
076d4                 | ' 
076d4                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
076d4     2C 00 90 5D |  if_ne	jmp	#LR__0690
076d8     35 00 00 FF 
076dc     0C E4 05 F1 | 	add	objptr, ##27148
076e0     F2 28 02 FB | 	rdlong	local06, objptr
076e4     02 00 00 FF 
076e8     38 E4 05 F1 | 	add	objptr, ##1080
076ec     F2 04 68 FC | 	wrlong	#2, objptr
076f0     13 00 00 FF 
076f4     38 E4 05 F1 | 	add	objptr, ##9784
076f8     F2 00 68 FC | 	wrlong	#0, objptr
076fc     4A 00 00 FF 
07700     7C E4 85 F1 | 	sub	objptr, ##38012
07704                 | LR__0690
07704                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
07704     02 24 0E F2 | 	cmp	local04, #2 wz
07708     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
0770c     35 00 00 AF 
07710     0C E4 05 A1 |  if_e	add	objptr, ##27148
07714     F2 28 02 AB |  if_e	rdlong	local06, objptr
07718     02 00 00 AF 
0771c     38 E4 05 A1 |  if_e	add	objptr, ##1080
07720     F2 04 68 AC |  if_e	wrlong	#2, objptr
07724     37 00 00 AF 
07728     44 E4 85 A1 |  if_e	sub	objptr, ##28228
0772c                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
0772c     04 24 0E F2 | 	cmp	local04, #4 wz
07730     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
07734     2C 00 90 5D |  if_ne	jmp	#LR__0691
07738     35 00 00 FF 
0773c     14 E4 05 F1 | 	add	objptr, ##27156
07740     F2 28 02 FB | 	rdlong	local06, objptr
07744     02 00 00 FF 
07748     30 E4 05 F1 | 	add	objptr, ##1072
0774c     F2 06 68 FC | 	wrlong	#3, objptr
07750     13 00 00 FF 
07754     38 E4 05 F1 | 	add	objptr, ##9784
07758     F2 04 68 FC | 	wrlong	#2, objptr
0775c     4A 00 00 FF 
07760     7C E4 85 F1 | 	sub	objptr, ##38012
07764                 | LR__0691
07764                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
07764     05 24 0E F2 | 	cmp	local04, #5 wz
07768     3C 00 90 5D |  if_ne	jmp	#LR__0692
0776c     37 00 00 FF 
07770     44 E4 05 F1 | 	add	objptr, ##28228
07774     F2 FA 01 FB | 	rdlong	result1, objptr
07778     FD 28 02 F6 | 	mov	local06, result1
0777c     03 28 66 F0 | 	shl	local06, #3
07780     02 00 00 FF 
07784     38 E4 85 F1 | 	sub	objptr, ##1080
07788     F2 28 02 F1 | 	add	local06, objptr
0778c     14 29 02 FB | 	rdlong	local06, local06
07790     02 FA 05 F1 | 	add	result1, #2
07794     02 00 00 FF 
07798     38 E4 05 F1 | 	add	objptr, ##1080
0779c     F2 FA 61 FC | 	wrlong	result1, objptr
077a0     37 00 00 FF 
077a4     44 E4 85 F1 | 	sub	objptr, ##28228
077a8                 | LR__0692
077a8     14 13 02 F6 | 	mov	arg01, local06
077ac     01 14 06 F6 | 	mov	arg02, #1
077b0     6C B3 B1 FD | 	call	#__system__Right_S
077b4     54 2B B0 FD | 	call	#_expr
077b8                 | '  
077b8                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
077b8                 | ' 
077b8                 | ' suffix2$=right$(varname2$,1)
077b8                 | ' expr()
077b8                 | ' 
077b8                 | ' 
077b8                 | ' if varnum>0 then
077b8     35 00 00 FF 
077bc     08 E4 05 F1 | 	add	objptr, ##27144
077c0     F2 2A 02 FB | 	rdlong	local07, objptr
077c4     35 00 00 FF 
077c8     08 E4 85 F1 | 	sub	objptr, ##27144
077cc     01 2A 56 F2 | 	cmps	local07, #1 wc
077d0     58 00 90 CD |  if_b	jmp	#LR__0695
077d4                 | '   for i=0 to varnum-1
077d4     00 2C 06 F6 | 	mov	local08, #0
077d8     35 00 00 FF 
077dc     08 E4 05 F1 | 	add	objptr, ##27144
077e0     F2 2E 02 FB | 	rdlong	local09, objptr
077e4     35 00 00 FF 
077e8     08 E4 85 F1 | 	sub	objptr, ##27144
077ec                 | LR__0693
077ec     17 2D 52 F2 | 	cmps	local08, local09 wc
077f0     38 00 90 3D |  if_ae	jmp	#LR__0694
077f4                 | '     if variables(i).name=varname2$ then j=i : exit
077f4     16 2B 02 F6 | 	mov	local07, local08
077f8     04 2A 66 F0 | 	shl	local07, #4
077fc     14 00 00 FF 
07800     F8 E5 05 F1 | 	add	objptr, ##10744
07804     F2 2A 02 F1 | 	add	local07, objptr
07808     15 13 02 FB | 	rdlong	arg01, local07
0780c     14 15 02 F6 | 	mov	arg02, local06
07810     14 00 00 FF 
07814     F8 E5 85 F1 | 	sub	objptr, ##10744
07818     28 92 B1 FD | 	call	#__system___string_cmp
0781c     00 FA 0D F2 | 	cmp	result1, #0 wz
07820     16 27 02 A6 |  if_e	mov	local05, local08
07824     01 2C 06 51 |  if_ne	add	local08, #1
07828     C0 FF 9F 5D |  if_ne	jmp	#LR__0693
0782c                 | LR__0694
0782c                 | LR__0695
0782c                 | ' if  j=-1 andalso varnum<maxvars then   
0782c     FF FF 7F FF 
07830     FF 27 0E F2 | 	cmp	local05, ##-1 wz
07834     60 00 90 5D |  if_ne	jmp	#LR__0696
07838     35 00 00 FF 
0783c     08 E4 05 F1 | 	add	objptr, ##27144
07840     F2 2A 02 FB | 	rdlong	local07, objptr
07844     35 00 00 FF 
07848     08 E4 85 F1 | 	sub	objptr, ##27144
0784c     02 00 00 FF 
07850     00 2A 56 F2 | 	cmps	local07, ##1024 wc
07854     40 00 90 3D |  if_ae	jmp	#LR__0696
07858     35 00 00 FF 
0785c     08 E4 05 F1 | 	add	objptr, ##27144
07860     F2 2E 02 FB | 	rdlong	local09, objptr
07864     04 2E 66 F0 | 	shl	local09, #4
07868     20 00 00 FF 
0786c     10 E4 85 F1 | 	sub	objptr, ##16400
07870     F2 2E 02 F1 | 	add	local09, objptr
07874     17 29 62 FC | 	wrlong	local06, local09
07878     20 00 00 FF 
0787c     10 E4 05 F1 | 	add	objptr, ##16400
07880     F2 2A 02 FB | 	rdlong	local07, objptr
07884     15 27 02 F6 | 	mov	local05, local07
07888     01 2A 06 F1 | 	add	local07, #1
0788c     F2 2A 62 FC | 	wrlong	local07, objptr
07890     35 00 00 FF 
07894     08 E4 85 F1 | 	sub	objptr, ##27144
07898                 | LR__0696
07898     13 1F 02 F6 | 	mov	local01, local05
0789c     17 22 06 F6 | 	mov	local03, #23
078a0     0F 2B 02 F6 | 	mov	local07, local01
078a4     10 2F 02 F6 | 	mov	local09, local02
078a8     11 1F 02 F6 | 	mov	local01, local03
078ac     4A 00 00 FF 
078b0     7C E4 05 F1 | 	add	objptr, ##38012
078b4     F2 2C 02 FB | 	rdlong	local08, objptr
078b8     16 29 02 F6 | 	mov	local06, local08
078bc     01 28 66 F0 | 	shl	local06, #1
078c0     16 29 02 F1 | 	add	local06, local08
078c4     02 28 66 F0 | 	shl	local06, #2
078c8     03 00 00 FF 
078cc     00 E4 85 F1 | 	sub	objptr, ##1536
078d0     F2 28 02 F1 | 	add	local06, objptr
078d4     14 2B 62 FC | 	wrlong	local07, local06
078d8     03 00 00 FF 
078dc     00 E4 05 F1 | 	add	objptr, ##1536
078e0     F2 2C 02 FB | 	rdlong	local08, objptr
078e4     16 2B 02 F6 | 	mov	local07, local08
078e8     01 2A 66 F0 | 	shl	local07, #1
078ec     16 2B 02 F1 | 	add	local07, local08
078f0     02 2A 66 F0 | 	shl	local07, #2
078f4     03 00 00 FF 
078f8     00 E4 85 F1 | 	sub	objptr, ##1536
078fc     F2 2A 02 F1 | 	add	local07, objptr
07900     04 2A 06 F1 | 	add	local07, #4
07904     15 2F 62 FC | 	wrlong	local09, local07
07908     03 00 00 FF 
0790c     00 E4 05 F1 | 	add	objptr, ##1536
07910     F2 2E 02 FB | 	rdlong	local09, objptr
07914     17 2D 02 F6 | 	mov	local08, local09
07918     01 2C 66 F0 | 	shl	local08, #1
0791c     17 2D 02 F1 | 	add	local08, local09
07920     02 2C 66 F0 | 	shl	local08, #2
07924     03 00 00 FF 
07928     00 E4 85 F1 | 	sub	objptr, ##1536
0792c     F2 2C 02 F1 | 	add	local08, objptr
07930     08 2C 06 F1 | 	add	local08, #8
07934     16 1F 62 FC | 	wrlong	local01, local08
07938     03 00 00 FF 
0793c     00 E4 05 F1 | 	add	objptr, ##1536
07940     F2 2A 02 FB | 	rdlong	local07, objptr
07944     01 2A 06 F1 | 	add	local07, #1
07948     F2 2A 62 FC | 	wrlong	local07, objptr
0794c     4A 00 00 FF 
07950     7C E4 85 F1 | 	sub	objptr, ##38012
07954                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
07954                 | ' 
07954                 | ' 
07954                 | ' 
07954                 | ' 
07954                 | ' 
07954                 | ' 
07954                 | ' compiledline(lineptr)=t1:  lineptr+=1 
07954                 | '  if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
07954     03 24 0E F2 | 	cmp	local04, #3 wz
07958     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
0795c     38 00 90 5D |  if_ne	jmp	#LR__0697
07960     4A 00 00 FF 
07964     7C E4 05 F1 | 	add	objptr, ##38012
07968     F2 1E 02 FB | 	rdlong	local01, objptr
0796c     0F 2F 02 F6 | 	mov	local09, local01
07970     01 2E 66 F0 | 	shl	local09, #1
07974     0F 2F 02 F1 | 	add	local09, local01
07978     02 2E 66 F0 | 	shl	local09, #2
0797c     03 00 00 FF 
07980     00 E4 85 F1 | 	sub	objptr, ##1536
07984     F2 2E 02 F1 | 	add	local09, objptr
07988     08 2E 06 F1 | 	add	local09, #8
0798c     17 FD 6B FC | 	wrlong	#510, local09
07990     47 00 00 FF 
07994     7C E4 85 F1 | 	sub	objptr, ##36476
07998                 | LR__0697
07998     A7 F0 03 F6 | 	mov	ptra, fp
0799c     B2 00 A0 FD | 	call	#popregs_
079a0                 | _compile_immediate_assign_ret
079a0     2D 00 64 FD | 	ret
079a4                 | 
079a4                 | ' 
079a4                 | ' ' ------------------ compile the line that is calling a command 
079a4                 | ' 
079a4                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
079a4                 | _compile
079a4     03 4A 05 F6 | 	mov	COUNT_, #3
079a8     A8 00 A0 FD | 	call	#pushregs_
079ac     09 1F 02 F6 | 	mov	local01, arg01
079b0     0B 21 02 F6 | 	mov	local02, arg03
079b4     47 00 00 FF 
079b8     7C E4 05 F1 | 	add	objptr, ##36476
079bc     F2 1E 62 FC | 	wrlong	local01, objptr
079c0     04 E4 05 F1 | 	add	objptr, #4
079c4     F2 14 62 FC | 	wrlong	arg02, objptr
079c8     47 00 00 FF 
079cc     80 E4 85 F1 | 	sub	objptr, ##36480
079d0     10 13 02 F6 | 	mov	arg01, local02
079d4     01 12 06 F1 | 	add	arg01, #1
079d8     20 F2 BF FD | 	call	#_compile_immediate
079dc     FD 22 0A F6 | 	mov	local03, result1 wz
079e0                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
079e0                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
079e0                 | '  
079e0                 | ' ' print "called compile with line= "; alinemajor;" and cont= "; cont 
079e0                 | ' 'if alinemajor=0 then err=compile_immediate(0) : return err  
079e0                 | ' 
079e0                 | ' ucompiledline(0)=alinemajor
079e0                 | ' ucompiledline(1)=alineminor
079e0                 | ' 
079e0                 | ' 
079e0                 | ' ' cont: 0: this is the first part of the line that will continue
079e0                 | ' ' 1 - this is the continuation of the line
079e0                 | ' ' 2 - this is the last continued line
079e0                 | ' ' 3 - this is the ome and only part
079e0                 | ' 
079e0                 | ' err=compile_immediate(cont+1) 
079e0                 | ' if err=0 andalso alinemajor>0 then
079e0     74 00 90 5D |  if_ne	jmp	#LR__0705
079e4     01 1E 16 F2 | 	cmp	local01, #1 wc
079e8     6C 00 90 CD |  if_b	jmp	#LR__0705
079ec                 | '   if cont=3 orelse cont=2 then 
079ec     03 20 0E F2 | 	cmp	local02, #3 wz
079f0     02 20 0E 52 |  if_ne	cmp	local02, #2 wz
079f4     60 00 90 5D |  if_ne	jmp	#LR__0704
079f8                 | '     if alinemajor >lastline then 
079f8     4A 00 00 FF 
079fc     88 E4 05 F1 | 	add	objptr, ##38024
07a00     F2 14 02 FB | 	rdlong	arg02, objptr
07a04     4A 00 00 FF 
07a08     88 E4 85 F1 | 	sub	objptr, ##38024
07a0c     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07a10     0C 00 90 ED |  if_be	jmp	#LR__0700
07a14     0F 13 02 F6 | 	mov	arg01, local01
07a18     18 F1 BF FD | 	call	#_add_line_at_end
07a1c     38 00 90 FD | 	jmp	#LR__0703
07a20                 | LR__0700
07a20     0F 13 02 F6 | 	mov	arg01, local01
07a24     DC EA BF FD | 	call	#_deleteline
07a28                 | '       deleteline(alinemajor)  
07a28                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' yes I know that's not optimal    
07a28     4A 00 00 FF 
07a2c     88 E4 05 F1 | 	add	objptr, ##38024
07a30     F2 14 02 FB | 	rdlong	arg02, objptr
07a34     4A 00 00 FF 
07a38     88 E4 85 F1 | 	sub	objptr, ##38024
07a3c     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07a40     0C 00 90 ED |  if_be	jmp	#LR__0701
07a44     0F 13 02 F6 | 	mov	arg01, local01
07a48     E8 F0 BF FD | 	call	#_add_line_at_end
07a4c     08 00 90 FD | 	jmp	#LR__0702
07a50                 | LR__0701
07a50     0F 13 02 F6 | 	mov	arg01, local01
07a54     C0 EE BF FD | 	call	#_insertline
07a58                 | LR__0702
07a58                 | LR__0703
07a58                 | LR__0704
07a58                 | LR__0705
07a58                 | ' return err
07a58     11 FB 01 F6 | 	mov	result1, local03
07a5c     A7 F0 03 F6 | 	mov	ptra, fp
07a60     B2 00 A0 FD | 	call	#popregs_
07a64                 | _compile_ret
07a64     2D 00 64 FD | 	ret
07a68                 | 
07a68                 | ' 
07a68                 | ' ' ------------------ compile the line that is assigning to a variable
07a68                 | ' 
07a68                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
07a68                 | _compile_assign
07a68     02 4A 05 F6 | 	mov	COUNT_, #2
07a6c     A8 00 A0 FD | 	call	#pushregs_
07a70     09 1F 02 F6 | 	mov	local01, arg01
07a74     0B 21 02 F6 | 	mov	local02, arg03
07a78     47 00 00 FF 
07a7c     7C E4 05 F1 | 	add	objptr, ##36476
07a80     F2 1E 62 FC | 	wrlong	local01, objptr
07a84     04 E4 05 F1 | 	add	objptr, #4
07a88     F2 14 62 FC | 	wrlong	arg02, objptr
07a8c     47 00 00 FF 
07a90     80 E4 85 F1 | 	sub	objptr, ##36480
07a94     10 13 02 F6 | 	mov	arg01, local02
07a98     01 12 06 F1 | 	add	arg01, #1
07a9c     20 FC BF FD | 	call	#_compile_immediate_assign
07aa0                 | ' 
07aa0                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
07aa0                 | ' 'if alinemajor=0 then compile_immediate_assign(0) : return  
07aa0                 | ' 
07aa0                 | ' ucompiledline(0)=alinemajor
07aa0                 | ' ucompiledline(1)=alineminor
07aa0                 | ' 
07aa0                 | ' compile_immediate_assign(cont+1) 
07aa0                 | ' 
07aa0                 | ' if alinemajor>0 then
07aa0     01 1E 16 F2 | 	cmp	local01, #1 wc
07aa4     6C 00 90 CD |  if_b	jmp	#LR__0715
07aa8                 | '   if cont=3 orelse cont=2 then 
07aa8     03 20 0E F2 | 	cmp	local02, #3 wz
07aac     02 20 0E 52 |  if_ne	cmp	local02, #2 wz
07ab0     60 00 90 5D |  if_ne	jmp	#LR__0714
07ab4                 | '     if alinemajor >lastline then 
07ab4     4A 00 00 FF 
07ab8     88 E4 05 F1 | 	add	objptr, ##38024
07abc     F2 14 02 FB | 	rdlong	arg02, objptr
07ac0     4A 00 00 FF 
07ac4     88 E4 85 F1 | 	sub	objptr, ##38024
07ac8     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07acc     0C 00 90 ED |  if_be	jmp	#LR__0710
07ad0     0F 13 02 F6 | 	mov	arg01, local01
07ad4     5C F0 BF FD | 	call	#_add_line_at_end
07ad8     38 00 90 FD | 	jmp	#LR__0713
07adc                 | LR__0710
07adc     0F 13 02 F6 | 	mov	arg01, local01
07ae0     20 EA BF FD | 	call	#_deleteline
07ae4                 | '       deleteline(alinemajor)  
07ae4                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
07ae4     4A 00 00 FF 
07ae8     88 E4 05 F1 | 	add	objptr, ##38024
07aec     F2 14 02 FB | 	rdlong	arg02, objptr
07af0     4A 00 00 FF 
07af4     88 E4 85 F1 | 	sub	objptr, ##38024
07af8     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07afc     0C 00 90 ED |  if_be	jmp	#LR__0711
07b00     0F 13 02 F6 | 	mov	arg01, local01
07b04     2C F0 BF FD | 	call	#_add_line_at_end
07b08     08 00 90 FD | 	jmp	#LR__0712
07b0c                 | LR__0711
07b0c     0F 13 02 F6 | 	mov	arg01, local01
07b10     04 EE BF FD | 	call	#_insertline
07b14                 | LR__0712
07b14                 | LR__0713
07b14                 | LR__0714
07b14                 | LR__0715
07b14     A7 F0 03 F6 | 	mov	ptra, fp
07b18     B2 00 A0 FD | 	call	#popregs_
07b1c                 | _compile_assign_ret
07b1c     2D 00 64 FD | 	ret
07b20                 | 
07b20                 | ' 
07b20                 | ' sub compile_error(errno)
07b20                 | _compile_error
07b20     FF 04 06 F6 | 	mov	_var03, #255
07b24     01 07 02 F6 | 	mov	_var04, _var02
07b28     02 09 02 F6 | 	mov	_var05, _var03
07b2c     4A 00 00 FF 
07b30     7C E4 05 F1 | 	add	objptr, ##38012
07b34     F2 0A 02 FB | 	rdlong	_var06, objptr
07b38     05 0D 02 F6 | 	mov	_var07, _var06
07b3c     01 0C 66 F0 | 	shl	_var07, #1
07b40     05 0D 02 F1 | 	add	_var07, _var06
07b44     02 0C 66 F0 | 	shl	_var07, #2
07b48     03 00 00 FF 
07b4c     00 E4 85 F1 | 	sub	objptr, ##1536
07b50     F2 0C 02 F1 | 	add	_var07, objptr
07b54     06 13 62 FC | 	wrlong	arg01, _var07
07b58     03 00 00 FF 
07b5c     00 E4 05 F1 | 	add	objptr, ##1536
07b60     F2 0C 02 FB | 	rdlong	_var07, objptr
07b64     06 0B 02 F6 | 	mov	_var06, _var07
07b68     01 0A 66 F0 | 	shl	_var06, #1
07b6c     06 0B 02 F1 | 	add	_var06, _var07
07b70     02 0A 66 F0 | 	shl	_var06, #2
07b74     03 00 00 FF 
07b78     00 E4 85 F1 | 	sub	objptr, ##1536
07b7c     F2 0A 02 F1 | 	add	_var06, objptr
07b80     04 0A 06 F1 | 	add	_var06, #4
07b84     05 07 62 FC | 	wrlong	_var04, _var06
07b88     03 00 00 FF 
07b8c     00 E4 05 F1 | 	add	objptr, ##1536
07b90     F2 0C 02 FB | 	rdlong	_var07, objptr
07b94     06 0B 02 F6 | 	mov	_var06, _var07
07b98     01 0A 66 F0 | 	shl	_var06, #1
07b9c     06 0B 02 F1 | 	add	_var06, _var07
07ba0     02 0A 66 F0 | 	shl	_var06, #2
07ba4     03 00 00 FF 
07ba8     00 E4 85 F1 | 	sub	objptr, ##1536
07bac     F2 0A 02 F1 | 	add	_var06, objptr
07bb0     08 0A 06 F1 | 	add	_var06, #8
07bb4     05 09 62 FC | 	wrlong	_var05, _var06
07bb8     03 00 00 FF 
07bbc     00 E4 05 F1 | 	add	objptr, ##1536
07bc0     F2 12 02 FB | 	rdlong	arg01, objptr
07bc4     01 12 06 F1 | 	add	arg01, #1
07bc8     F2 12 62 FC | 	wrlong	arg01, objptr
07bcc     4A 00 00 FF 
07bd0     7C E4 85 F1 | 	sub	objptr, ##38012
07bd4                 | _compile_error_ret
07bd4     2D 00 64 FD | 	ret
07bd8                 | 
07bd8                 | ' 
07bd8                 | ' sub compile_unknown() 
07bd8                 | _compile_unknown
07bd8     FF 04 06 F6 | 	mov	_var03, #255
07bdc     17 00 06 F6 | 	mov	_var01, #23
07be0     01 07 02 F6 | 	mov	_var04, _var02
07be4     02 01 02 F6 | 	mov	_var01, _var03
07be8     4A 00 00 FF 
07bec     7C E4 05 F1 | 	add	objptr, ##38012
07bf0     F2 08 02 FB | 	rdlong	_var05, objptr
07bf4     04 0B 02 F6 | 	mov	_var06, _var05
07bf8     01 0A 66 F0 | 	shl	_var06, #1
07bfc     04 0B 02 F1 | 	add	_var06, _var05
07c00     02 0A 66 F0 | 	shl	_var06, #2
07c04     03 00 00 FF 
07c08     00 E4 85 F1 | 	sub	objptr, ##1536
07c0c     F2 0A 02 F1 | 	add	_var06, objptr
07c10     05 2F 68 FC | 	wrlong	#23, _var06
07c14     03 00 00 FF 
07c18     00 E4 05 F1 | 	add	objptr, ##1536
07c1c     F2 0A 02 FB | 	rdlong	_var06, objptr
07c20     05 09 02 F6 | 	mov	_var05, _var06
07c24     01 08 66 F0 | 	shl	_var05, #1
07c28     05 09 02 F1 | 	add	_var05, _var06
07c2c     02 08 66 F0 | 	shl	_var05, #2
07c30     03 00 00 FF 
07c34     00 E4 85 F1 | 	sub	objptr, ##1536
07c38     F2 08 02 F1 | 	add	_var05, objptr
07c3c     04 08 06 F1 | 	add	_var05, #4
07c40     04 07 62 FC | 	wrlong	_var04, _var05
07c44     03 00 00 FF 
07c48     00 E4 05 F1 | 	add	objptr, ##1536
07c4c     F2 0A 02 FB | 	rdlong	_var06, objptr
07c50     05 09 02 F6 | 	mov	_var05, _var06
07c54     01 08 66 F0 | 	shl	_var05, #1
07c58     05 09 02 F1 | 	add	_var05, _var06
07c5c     02 08 66 F0 | 	shl	_var05, #2
07c60     03 00 00 FF 
07c64     00 E4 85 F1 | 	sub	objptr, ##1536
07c68     F2 08 02 F1 | 	add	_var05, objptr
07c6c     08 08 06 F1 | 	add	_var05, #8
07c70     04 01 62 FC | 	wrlong	_var01, _var05
07c74     03 00 00 FF 
07c78     00 E4 05 F1 | 	add	objptr, ##1536
07c7c     F2 0A 02 FB | 	rdlong	_var06, objptr
07c80     01 0A 06 F1 | 	add	_var06, #1
07c84     F2 0A 62 FC | 	wrlong	_var06, objptr
07c88     4A 00 00 FF 
07c8c     7C E4 85 F1 | 	sub	objptr, ##38012
07c90                 | _compile_unknown_ret
07c90     2D 00 64 FD | 	ret
07c94                 | 
07c94                 | ' 
07c94                 | ' function compile_fun_2p() as ulong
07c94                 | _compile_fun_2p
07c94     01 4A 05 F6 | 	mov	COUNT_, #1
07c98     A8 00 A0 FD | 	call	#pushregs_
07c9c     6C 26 B0 FD | 	call	#_expr
07ca0                 | ' 
07ca0                 | ' expr()
07ca0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07ca0     37 00 00 FF 
07ca4     44 E4 05 F1 | 	add	objptr, ##28228
07ca8     F2 1E 02 FB | 	rdlong	local01, objptr
07cac     03 1E 66 F0 | 	shl	local01, #3
07cb0     02 00 00 FF 
07cb4     38 E4 85 F1 | 	sub	objptr, ##1080
07cb8     F2 1E 02 F1 | 	add	local01, objptr
07cbc     04 1E 06 F1 | 	add	local01, #4
07cc0     0F 1F 02 FB | 	rdlong	local01, local01
07cc4     11 1E 0E F2 | 	cmp	local01, #17 wz
07cc8     35 00 00 FF 
07ccc     0C E4 85 F1 | 	sub	objptr, ##27148
07cd0     15 FA 05 56 |  if_ne	mov	result1, #21
07cd4     24 00 90 5D |  if_ne	jmp	#LR__0720
07cd8     37 00 00 FF 
07cdc     44 E4 05 F1 | 	add	objptr, ##28228
07ce0     F2 1E 02 FB | 	rdlong	local01, objptr
07ce4     01 1E 06 F1 | 	add	local01, #1
07ce8     F2 1E 62 FC | 	wrlong	local01, objptr
07cec     37 00 00 FF 
07cf0     44 E4 85 F1 | 	sub	objptr, ##28228
07cf4     14 26 B0 FD | 	call	#_expr
07cf8     00 FA 05 F6 | 	mov	result1, #0
07cfc                 | LR__0720
07cfc     A7 F0 03 F6 | 	mov	ptra, fp
07d00     B2 00 A0 FD | 	call	#popregs_
07d04                 | _compile_fun_2p_ret
07d04     2D 00 64 FD | 	ret
07d08                 | 
07d08                 | ' 
07d08                 | ' function compile_fun_3p() as ulong
07d08                 | _compile_fun_3p
07d08     01 4A 05 F6 | 	mov	COUNT_, #1
07d0c     A8 00 A0 FD | 	call	#pushregs_
07d10     F8 25 B0 FD | 	call	#_expr
07d14                 | ' 
07d14                 | ' expr()
07d14                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07d14     37 00 00 FF 
07d18     44 E4 05 F1 | 	add	objptr, ##28228
07d1c     F2 1E 02 FB | 	rdlong	local01, objptr
07d20     03 1E 66 F0 | 	shl	local01, #3
07d24     02 00 00 FF 
07d28     38 E4 85 F1 | 	sub	objptr, ##1080
07d2c     F2 1E 02 F1 | 	add	local01, objptr
07d30     04 1E 06 F1 | 	add	local01, #4
07d34     0F 1F 02 FB | 	rdlong	local01, local01
07d38     11 1E 0E F2 | 	cmp	local01, #17 wz
07d3c     35 00 00 FF 
07d40     0C E4 85 F1 | 	sub	objptr, ##27148
07d44     15 FA 05 56 |  if_ne	mov	result1, #21
07d48     7C 00 90 5D |  if_ne	jmp	#LR__0730
07d4c     37 00 00 FF 
07d50     44 E4 05 F1 | 	add	objptr, ##28228
07d54     F2 1E 02 FB | 	rdlong	local01, objptr
07d58     01 1E 06 F1 | 	add	local01, #1
07d5c     F2 1E 62 FC | 	wrlong	local01, objptr
07d60     37 00 00 FF 
07d64     44 E4 85 F1 | 	sub	objptr, ##28228
07d68     A0 25 B0 FD | 	call	#_expr
07d6c                 | ' expr()
07d6c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07d6c     37 00 00 FF 
07d70     44 E4 05 F1 | 	add	objptr, ##28228
07d74     F2 1E 02 FB | 	rdlong	local01, objptr
07d78     03 1E 66 F0 | 	shl	local01, #3
07d7c     02 00 00 FF 
07d80     38 E4 85 F1 | 	sub	objptr, ##1080
07d84     F2 1E 02 F1 | 	add	local01, objptr
07d88     04 1E 06 F1 | 	add	local01, #4
07d8c     0F 1F 02 FB | 	rdlong	local01, local01
07d90     11 1E 0E F2 | 	cmp	local01, #17 wz
07d94     35 00 00 FF 
07d98     0C E4 85 F1 | 	sub	objptr, ##27148
07d9c     15 FA 05 56 |  if_ne	mov	result1, #21
07da0     24 00 90 5D |  if_ne	jmp	#LR__0730
07da4     37 00 00 FF 
07da8     44 E4 05 F1 | 	add	objptr, ##28228
07dac     F2 1E 02 FB | 	rdlong	local01, objptr
07db0     01 1E 06 F1 | 	add	local01, #1
07db4     F2 1E 62 FC | 	wrlong	local01, objptr
07db8     37 00 00 FF 
07dbc     44 E4 85 F1 | 	sub	objptr, ##28228
07dc0     48 25 B0 FD | 	call	#_expr
07dc4     00 FA 05 F6 | 	mov	result1, #0
07dc8                 | LR__0730
07dc8     A7 F0 03 F6 | 	mov	ptra, fp
07dcc     B2 00 A0 FD | 	call	#popregs_
07dd0                 | _compile_fun_3p_ret
07dd0     2D 00 64 FD | 	ret
07dd4                 | 
07dd4                 | ' 
07dd4                 | ' function compile_fun_4p() as ulong
07dd4                 | _compile_fun_4p
07dd4     01 4A 05 F6 | 	mov	COUNT_, #1
07dd8     A8 00 A0 FD | 	call	#pushregs_
07ddc     2C 25 B0 FD | 	call	#_expr
07de0                 | ' 
07de0                 | ' expr()
07de0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07de0     37 00 00 FF 
07de4     44 E4 05 F1 | 	add	objptr, ##28228
07de8     F2 1E 02 FB | 	rdlong	local01, objptr
07dec     03 1E 66 F0 | 	shl	local01, #3
07df0     02 00 00 FF 
07df4     38 E4 85 F1 | 	sub	objptr, ##1080
07df8     F2 1E 02 F1 | 	add	local01, objptr
07dfc     04 1E 06 F1 | 	add	local01, #4
07e00     0F 1F 02 FB | 	rdlong	local01, local01
07e04     11 1E 0E F2 | 	cmp	local01, #17 wz
07e08     35 00 00 FF 
07e0c     0C E4 85 F1 | 	sub	objptr, ##27148
07e10     15 FA 05 56 |  if_ne	mov	result1, #21
07e14     D4 00 90 5D |  if_ne	jmp	#LR__0740
07e18     37 00 00 FF 
07e1c     44 E4 05 F1 | 	add	objptr, ##28228
07e20     F2 1E 02 FB | 	rdlong	local01, objptr
07e24     01 1E 06 F1 | 	add	local01, #1
07e28     F2 1E 62 FC | 	wrlong	local01, objptr
07e2c     37 00 00 FF 
07e30     44 E4 85 F1 | 	sub	objptr, ##28228
07e34     D4 24 B0 FD | 	call	#_expr
07e38                 | ' expr()
07e38                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07e38     37 00 00 FF 
07e3c     44 E4 05 F1 | 	add	objptr, ##28228
07e40     F2 1E 02 FB | 	rdlong	local01, objptr
07e44     03 1E 66 F0 | 	shl	local01, #3
07e48     02 00 00 FF 
07e4c     38 E4 85 F1 | 	sub	objptr, ##1080
07e50     F2 1E 02 F1 | 	add	local01, objptr
07e54     04 1E 06 F1 | 	add	local01, #4
07e58     0F 1F 02 FB | 	rdlong	local01, local01
07e5c     11 1E 0E F2 | 	cmp	local01, #17 wz
07e60     35 00 00 FF 
07e64     0C E4 85 F1 | 	sub	objptr, ##27148
07e68     15 FA 05 56 |  if_ne	mov	result1, #21
07e6c     7C 00 90 5D |  if_ne	jmp	#LR__0740
07e70     37 00 00 FF 
07e74     44 E4 05 F1 | 	add	objptr, ##28228
07e78     F2 1E 02 FB | 	rdlong	local01, objptr
07e7c     01 1E 06 F1 | 	add	local01, #1
07e80     F2 1E 62 FC | 	wrlong	local01, objptr
07e84     37 00 00 FF 
07e88     44 E4 85 F1 | 	sub	objptr, ##28228
07e8c     7C 24 B0 FD | 	call	#_expr
07e90                 | ' expr()
07e90                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07e90     37 00 00 FF 
07e94     44 E4 05 F1 | 	add	objptr, ##28228
07e98     F2 1E 02 FB | 	rdlong	local01, objptr
07e9c     03 1E 66 F0 | 	shl	local01, #3
07ea0     02 00 00 FF 
07ea4     38 E4 85 F1 | 	sub	objptr, ##1080
07ea8     F2 1E 02 F1 | 	add	local01, objptr
07eac     04 1E 06 F1 | 	add	local01, #4
07eb0     0F 1F 02 FB | 	rdlong	local01, local01
07eb4     11 1E 0E F2 | 	cmp	local01, #17 wz
07eb8     35 00 00 FF 
07ebc     0C E4 85 F1 | 	sub	objptr, ##27148
07ec0     15 FA 05 56 |  if_ne	mov	result1, #21
07ec4     24 00 90 5D |  if_ne	jmp	#LR__0740
07ec8     37 00 00 FF 
07ecc     44 E4 05 F1 | 	add	objptr, ##28228
07ed0     F2 1E 02 FB | 	rdlong	local01, objptr
07ed4     01 1E 06 F1 | 	add	local01, #1
07ed8     F2 1E 62 FC | 	wrlong	local01, objptr
07edc     37 00 00 FF 
07ee0     44 E4 85 F1 | 	sub	objptr, ##28228
07ee4     24 24 B0 FD | 	call	#_expr
07ee8     00 FA 05 F6 | 	mov	result1, #0
07eec                 | LR__0740
07eec     A7 F0 03 F6 | 	mov	ptra, fp
07ef0     B2 00 A0 FD | 	call	#popregs_
07ef4                 | _compile_fun_4p_ret
07ef4     2D 00 64 FD | 	ret
07ef8                 | 
07ef8                 | ' 
07ef8                 | ' 
07ef8                 | ' function compile_fun_5p() as ulong
07ef8                 | _compile_fun_5p
07ef8     01 4A 05 F6 | 	mov	COUNT_, #1
07efc     A8 00 A0 FD | 	call	#pushregs_
07f00     08 24 B0 FD | 	call	#_expr
07f04                 | ' 
07f04                 | ' expr()
07f04                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07f04     37 00 00 FF 
07f08     44 E4 05 F1 | 	add	objptr, ##28228
07f0c     F2 1E 02 FB | 	rdlong	local01, objptr
07f10     03 1E 66 F0 | 	shl	local01, #3
07f14     02 00 00 FF 
07f18     38 E4 85 F1 | 	sub	objptr, ##1080
07f1c     F2 1E 02 F1 | 	add	local01, objptr
07f20     04 1E 06 F1 | 	add	local01, #4
07f24     0F 1F 02 FB | 	rdlong	local01, local01
07f28     11 1E 0E F2 | 	cmp	local01, #17 wz
07f2c     35 00 00 FF 
07f30     0C E4 85 F1 | 	sub	objptr, ##27148
07f34     15 FA 05 56 |  if_ne	mov	result1, #21
07f38     2C 01 90 5D |  if_ne	jmp	#LR__0750
07f3c     37 00 00 FF 
07f40     44 E4 05 F1 | 	add	objptr, ##28228
07f44     F2 1E 02 FB | 	rdlong	local01, objptr
07f48     01 1E 06 F1 | 	add	local01, #1
07f4c     F2 1E 62 FC | 	wrlong	local01, objptr
07f50     37 00 00 FF 
07f54     44 E4 85 F1 | 	sub	objptr, ##28228
07f58     B0 23 B0 FD | 	call	#_expr
07f5c                 | ' expr()
07f5c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07f5c     37 00 00 FF 
07f60     44 E4 05 F1 | 	add	objptr, ##28228
07f64     F2 1E 02 FB | 	rdlong	local01, objptr
07f68     03 1E 66 F0 | 	shl	local01, #3
07f6c     02 00 00 FF 
07f70     38 E4 85 F1 | 	sub	objptr, ##1080
07f74     F2 1E 02 F1 | 	add	local01, objptr
07f78     04 1E 06 F1 | 	add	local01, #4
07f7c     0F 1F 02 FB | 	rdlong	local01, local01
07f80     11 1E 0E F2 | 	cmp	local01, #17 wz
07f84     35 00 00 FF 
07f88     0C E4 85 F1 | 	sub	objptr, ##27148
07f8c     15 FA 05 56 |  if_ne	mov	result1, #21
07f90     D4 00 90 5D |  if_ne	jmp	#LR__0750
07f94     37 00 00 FF 
07f98     44 E4 05 F1 | 	add	objptr, ##28228
07f9c     F2 1E 02 FB | 	rdlong	local01, objptr
07fa0     01 1E 06 F1 | 	add	local01, #1
07fa4     F2 1E 62 FC | 	wrlong	local01, objptr
07fa8     37 00 00 FF 
07fac     44 E4 85 F1 | 	sub	objptr, ##28228
07fb0     58 23 B0 FD | 	call	#_expr
07fb4                 | ' expr()
07fb4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07fb4     37 00 00 FF 
07fb8     44 E4 05 F1 | 	add	objptr, ##28228
07fbc     F2 1E 02 FB | 	rdlong	local01, objptr
07fc0     03 1E 66 F0 | 	shl	local01, #3
07fc4     02 00 00 FF 
07fc8     38 E4 85 F1 | 	sub	objptr, ##1080
07fcc     F2 1E 02 F1 | 	add	local01, objptr
07fd0     04 1E 06 F1 | 	add	local01, #4
07fd4     0F 1F 02 FB | 	rdlong	local01, local01
07fd8     11 1E 0E F2 | 	cmp	local01, #17 wz
07fdc     35 00 00 FF 
07fe0     0C E4 85 F1 | 	sub	objptr, ##27148
07fe4     15 FA 05 56 |  if_ne	mov	result1, #21
07fe8     7C 00 90 5D |  if_ne	jmp	#LR__0750
07fec     37 00 00 FF 
07ff0     44 E4 05 F1 | 	add	objptr, ##28228
07ff4     F2 1E 02 FB | 	rdlong	local01, objptr
07ff8     01 1E 06 F1 | 	add	local01, #1
07ffc     F2 1E 62 FC | 	wrlong	local01, objptr
08000     37 00 00 FF 
08004     44 E4 85 F1 | 	sub	objptr, ##28228
08008     00 23 B0 FD | 	call	#_expr
0800c                 | ' expr()
0800c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0800c     37 00 00 FF 
08010     44 E4 05 F1 | 	add	objptr, ##28228
08014     F2 1E 02 FB | 	rdlong	local01, objptr
08018     03 1E 66 F0 | 	shl	local01, #3
0801c     02 00 00 FF 
08020     38 E4 85 F1 | 	sub	objptr, ##1080
08024     F2 1E 02 F1 | 	add	local01, objptr
08028     04 1E 06 F1 | 	add	local01, #4
0802c     0F 1F 02 FB | 	rdlong	local01, local01
08030     11 1E 0E F2 | 	cmp	local01, #17 wz
08034     35 00 00 FF 
08038     0C E4 85 F1 | 	sub	objptr, ##27148
0803c     15 FA 05 56 |  if_ne	mov	result1, #21
08040     24 00 90 5D |  if_ne	jmp	#LR__0750
08044     37 00 00 FF 
08048     44 E4 05 F1 | 	add	objptr, ##28228
0804c     F2 1E 02 FB | 	rdlong	local01, objptr
08050     01 1E 06 F1 | 	add	local01, #1
08054     F2 1E 62 FC | 	wrlong	local01, objptr
08058     37 00 00 FF 
0805c     44 E4 85 F1 | 	sub	objptr, ##28228
08060     A8 22 B0 FD | 	call	#_expr
08064     00 FA 05 F6 | 	mov	result1, #0
08068                 | LR__0750
08068     A7 F0 03 F6 | 	mov	ptra, fp
0806c     B2 00 A0 FD | 	call	#popregs_
08070                 | _compile_fun_5p_ret
08070     2D 00 64 FD | 	ret
08074                 | 
08074                 | ' 
08074                 | ' function compile_fun_varp() as ulong 
08074                 | _compile_fun_varp
08074     02 4A 05 F6 | 	mov	COUNT_, #2
08078     A8 00 A0 FD | 	call	#pushregs_
0807c     00 1E 06 F6 | 	mov	local01, #0
08080                 | ' i=0
08080                 | ' if lparts(ct).token<>token_end then
08080     37 00 00 FF 
08084     44 E4 05 F1 | 	add	objptr, ##28228
08088     F2 20 02 FB | 	rdlong	local02, objptr
0808c     03 20 66 F0 | 	shl	local02, #3
08090     02 00 00 FF 
08094     38 E4 85 F1 | 	sub	objptr, ##1080
08098     F2 20 02 F1 | 	add	local02, objptr
0809c     04 20 06 F1 | 	add	local02, #4
080a0     10 21 02 FB | 	rdlong	local02, local02
080a4     FE 21 0E F2 | 	cmp	local02, #510 wz
080a8     35 00 00 FF 
080ac     0C E4 85 F1 | 	sub	objptr, ##27148
080b0     5C 00 90 AD |  if_e	jmp	#LR__0762
080b4                 | '   do
080b4                 | LR__0760
080b4     54 22 B0 FD | 	call	#_expr
080b8     01 1E 06 F1 | 	add	local01, #1
080bc                 | '   expr()
080bc                 | '    i+=1
080bc                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
080bc     37 00 00 FF 
080c0     44 E4 05 F1 | 	add	objptr, ##28228
080c4     F2 20 02 FB | 	rdlong	local02, objptr
080c8     03 20 66 F0 | 	shl	local02, #3
080cc     02 00 00 FF 
080d0     38 E4 85 F1 | 	sub	objptr, ##1080
080d4     F2 20 02 F1 | 	add	local02, objptr
080d8     04 20 06 F1 | 	add	local02, #4
080dc     10 21 02 FB | 	rdlong	local02, local02
080e0     11 20 0E F2 | 	cmp	local02, #17 wz
080e4     35 00 00 FF 
080e8     0C E4 85 F1 | 	sub	objptr, ##27148
080ec     20 00 90 5D |  if_ne	jmp	#LR__0761
080f0     37 00 00 FF 
080f4     44 E4 05 F1 | 	add	objptr, ##28228
080f8     F2 20 02 FB | 	rdlong	local02, objptr
080fc     01 20 06 F1 | 	add	local02, #1
08100     F2 20 62 FC | 	wrlong	local02, objptr
08104     37 00 00 FF 
08108     44 E4 85 F1 | 	sub	objptr, ##28228
0810c     A4 FF 9F FD | 	jmp	#LR__0760
08110                 | LR__0761
08110                 | LR__0762
08110                 | ' return i
08110     0F FB 01 F6 | 	mov	result1, local01
08114     A7 F0 03 F6 | 	mov	ptra, fp
08118     B2 00 A0 FD | 	call	#popregs_
0811c                 | _compile_fun_varp_ret
0811c     2D 00 64 FD | 	ret
08120                 | 
08120                 | ' 
08120                 | ' 
08120                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
08120                 | _compile_print
08120     0B 4A 05 F6 | 	mov	COUNT_, #11
08124     A8 00 A0 FD | 	call	#pushregs_
08128     00 1E 06 F6 | 	mov	local01, #0
0812c     1D 22 06 F6 | 	mov	local03, #29
08130                 | ' t1.result.uresult=0 : t1.result_type=result_uint
08130                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
08130     37 00 00 FF 
08134     44 E4 05 F1 | 	add	objptr, ##28228
08138     F2 24 02 FB | 	rdlong	local04, objptr
0813c     03 24 66 F0 | 	shl	local04, #3
08140     02 00 00 FF 
08144     38 E4 85 F1 | 	sub	objptr, ##1080
08148     F2 24 02 F1 | 	add	local04, objptr
0814c     04 24 06 F1 | 	add	local04, #4
08150     12 25 02 FB | 	rdlong	local04, local04
08154     FE 25 0E F2 | 	cmp	local04, #510 wz
08158     35 00 00 FF 
0815c     0C E4 85 F1 | 	sub	objptr, ##27148
08160     68 01 90 5D |  if_ne	jmp	#LR__0770
08164     20 22 06 F6 | 	mov	local03, #32
08168     0F 27 02 F6 | 	mov	local05, local01
0816c     10 29 02 F6 | 	mov	local06, local02
08170     11 2B 02 F6 | 	mov	local07, local03
08174     4A 00 00 FF 
08178     7C E4 05 F1 | 	add	objptr, ##38012
0817c     F2 2C 02 FB | 	rdlong	local08, objptr
08180     16 2F 02 F6 | 	mov	local09, local08
08184     01 2E 66 F0 | 	shl	local09, #1
08188     16 2F 02 F1 | 	add	local09, local08
0818c     02 2E 66 F0 | 	shl	local09, #2
08190     03 00 00 FF 
08194     00 E4 85 F1 | 	sub	objptr, ##1536
08198     F2 2E 02 F1 | 	add	local09, objptr
0819c     17 27 62 FC | 	wrlong	local05, local09
081a0     03 00 00 FF 
081a4     00 E4 05 F1 | 	add	objptr, ##1536
081a8     F2 26 02 FB | 	rdlong	local05, objptr
081ac     13 31 02 F6 | 	mov	local10, local05
081b0     01 30 66 F0 | 	shl	local10, #1
081b4     13 31 02 F1 | 	add	local10, local05
081b8     02 30 66 F0 | 	shl	local10, #2
081bc     03 00 00 FF 
081c0     00 E4 85 F1 | 	sub	objptr, ##1536
081c4     F2 30 02 F1 | 	add	local10, objptr
081c8     04 30 06 F1 | 	add	local10, #4
081cc     18 29 62 FC | 	wrlong	local06, local10
081d0     03 00 00 FF 
081d4     00 E4 05 F1 | 	add	objptr, ##1536
081d8     F2 26 02 FB | 	rdlong	local05, objptr
081dc     13 33 02 F6 | 	mov	local11, local05
081e0     01 32 66 F0 | 	shl	local11, #1
081e4     13 33 02 F1 | 	add	local11, local05
081e8     02 32 66 F0 | 	shl	local11, #2
081ec     03 00 00 FF 
081f0     00 E4 85 F1 | 	sub	objptr, ##1536
081f4     F2 32 02 F1 | 	add	local11, objptr
081f8     08 32 06 F1 | 	add	local11, #8
081fc     19 2B 62 FC | 	wrlong	local07, local11
08200     03 00 00 FF 
08204     00 E4 05 F1 | 	add	objptr, ##1536
08208     F2 26 02 FB | 	rdlong	local05, objptr
0820c     01 26 06 F1 | 	add	local05, #1
08210     F2 26 62 FC | 	wrlong	local05, objptr
08214     44 22 06 F6 | 	mov	local03, #68
08218     0F 27 02 F6 | 	mov	local05, local01
0821c     10 29 02 F6 | 	mov	local06, local02
08220     11 2B 02 F6 | 	mov	local07, local03
08224     F2 2C 02 FB | 	rdlong	local08, objptr
08228     16 2F 02 F6 | 	mov	local09, local08
0822c     01 2E 66 F0 | 	shl	local09, #1
08230     16 2F 02 F1 | 	add	local09, local08
08234     02 2E 66 F0 | 	shl	local09, #2
08238     03 00 00 FF 
0823c     00 E4 85 F1 | 	sub	objptr, ##1536
08240     F2 2E 02 F1 | 	add	local09, objptr
08244     17 27 62 FC | 	wrlong	local05, local09
08248     03 00 00 FF 
0824c     00 E4 05 F1 | 	add	objptr, ##1536
08250     F2 32 02 FB | 	rdlong	local11, objptr
08254     19 31 02 F6 | 	mov	local10, local11
08258     01 30 66 F0 | 	shl	local10, #1
0825c     19 31 02 F1 | 	add	local10, local11
08260     02 30 66 F0 | 	shl	local10, #2
08264     03 00 00 FF 
08268     00 E4 85 F1 | 	sub	objptr, ##1536
0826c     F2 30 02 F1 | 	add	local10, objptr
08270     04 30 06 F1 | 	add	local10, #4
08274     18 29 62 FC | 	wrlong	local06, local10
08278     03 00 00 FF 
0827c     00 E4 05 F1 | 	add	objptr, ##1536
08280     F2 30 02 FB | 	rdlong	local10, objptr
08284     18 33 02 F6 | 	mov	local11, local10
08288     01 32 66 F0 | 	shl	local11, #1
0828c     18 33 02 F1 | 	add	local11, local10
08290     02 32 66 F0 | 	shl	local11, #2
08294     03 00 00 FF 
08298     00 E4 85 F1 | 	sub	objptr, ##1536
0829c     F2 32 02 F1 | 	add	local11, objptr
082a0     08 32 06 F1 | 	add	local11, #8
082a4     19 2B 62 FC | 	wrlong	local07, local11
082a8     03 00 00 FF 
082ac     00 E4 05 F1 | 	add	objptr, ##1536
082b0     F2 26 02 FB | 	rdlong	local05, objptr
082b4     01 26 06 F1 | 	add	local05, #1
082b8     F2 26 62 FC | 	wrlong	local05, objptr
082bc     4A 00 00 FF 
082c0     7C E4 85 F1 | 	sub	objptr, ##38012
082c4     00 FA 05 F6 | 	mov	result1, #0
082c8     20 05 90 FD | 	jmp	#LR__0777
082cc                 | LR__0770
082cc                 | ' do
082cc                 | LR__0771
082cc     3C 20 B0 FD | 	call	#_expr
082d0                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
082d0                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
082d0     37 00 00 FF 
082d4     44 E4 05 F1 | 	add	objptr, ##28228
082d8     F2 24 02 FB | 	rdlong	local04, objptr
082dc     03 24 66 F0 | 	shl	local04, #3
082e0     02 00 00 FF 
082e4     38 E4 85 F1 | 	sub	objptr, ##1080
082e8     F2 24 02 F1 | 	add	local04, objptr
082ec     04 24 06 F1 | 	add	local04, #4
082f0     12 2D 02 FB | 	rdlong	local08, local04
082f4     11 2C 0E F2 | 	cmp	local08, #17 wz
082f8     35 00 00 FF 
082fc     0C E4 85 F1 | 	sub	objptr, ##27148
08300     60 01 90 5D |  if_ne	jmp	#LR__0772
08304     21 22 06 F6 | 	mov	local03, #33
08308     0F 27 02 F6 | 	mov	local05, local01
0830c     10 29 02 F6 | 	mov	local06, local02
08310     11 2B 02 F6 | 	mov	local07, local03
08314     4A 00 00 FF 
08318     7C E4 05 F1 | 	add	objptr, ##38012
0831c     F2 2C 02 FB | 	rdlong	local08, objptr
08320     16 2F 02 F6 | 	mov	local09, local08
08324     01 2E 66 F0 | 	shl	local09, #1
08328     16 2F 02 F1 | 	add	local09, local08
0832c     02 2E 66 F0 | 	shl	local09, #2
08330     03 00 00 FF 
08334     00 E4 85 F1 | 	sub	objptr, ##1536
08338     F2 2E 02 F1 | 	add	local09, objptr
0833c     17 27 62 FC | 	wrlong	local05, local09
08340     03 00 00 FF 
08344     00 E4 05 F1 | 	add	objptr, ##1536
08348     F2 32 02 FB | 	rdlong	local11, objptr
0834c     19 31 02 F6 | 	mov	local10, local11
08350     01 30 66 F0 | 	shl	local10, #1
08354     19 31 02 F1 | 	add	local10, local11
08358     02 30 66 F0 | 	shl	local10, #2
0835c     03 00 00 FF 
08360     00 E4 85 F1 | 	sub	objptr, ##1536
08364     F2 30 02 F1 | 	add	local10, objptr
08368     04 30 06 F1 | 	add	local10, #4
0836c     18 29 62 FC | 	wrlong	local06, local10
08370     03 00 00 FF 
08374     00 E4 05 F1 | 	add	objptr, ##1536
08378     F2 26 02 FB | 	rdlong	local05, objptr
0837c     13 33 02 F6 | 	mov	local11, local05
08380     01 32 66 F0 | 	shl	local11, #1
08384     13 33 02 F1 | 	add	local11, local05
08388     02 32 66 F0 | 	shl	local11, #2
0838c     03 00 00 FF 
08390     00 E4 85 F1 | 	sub	objptr, ##1536
08394     F2 32 02 F1 | 	add	local11, objptr
08398     08 32 06 F1 | 	add	local11, #8
0839c     19 2B 62 FC | 	wrlong	local07, local11
083a0     03 00 00 FF 
083a4     00 E4 05 F1 | 	add	objptr, ##1536
083a8     F2 26 02 FB | 	rdlong	local05, objptr
083ac     01 26 06 F1 | 	add	local05, #1
083b0     F2 26 62 FC | 	wrlong	local05, objptr
083b4     44 22 06 F6 | 	mov	local03, #68
083b8     0F 27 02 F6 | 	mov	local05, local01
083bc     10 29 02 F6 | 	mov	local06, local02
083c0     11 2B 02 F6 | 	mov	local07, local03
083c4     F2 2C 02 FB | 	rdlong	local08, objptr
083c8     16 2F 02 F6 | 	mov	local09, local08
083cc     01 2E 66 F0 | 	shl	local09, #1
083d0     16 2F 02 F1 | 	add	local09, local08
083d4     02 2E 66 F0 | 	shl	local09, #2
083d8     03 00 00 FF 
083dc     00 E4 85 F1 | 	sub	objptr, ##1536
083e0     F2 2E 02 F1 | 	add	local09, objptr
083e4     17 27 62 FC | 	wrlong	local05, local09
083e8     03 00 00 FF 
083ec     00 E4 05 F1 | 	add	objptr, ##1536
083f0     F2 32 02 FB | 	rdlong	local11, objptr
083f4     19 31 02 F6 | 	mov	local10, local11
083f8     01 30 66 F0 | 	shl	local10, #1
083fc     19 31 02 F1 | 	add	local10, local11
08400     02 30 66 F0 | 	shl	local10, #2
08404     03 00 00 FF 
08408     00 E4 85 F1 | 	sub	objptr, ##1536
0840c     F2 30 02 F1 | 	add	local10, objptr
08410     04 30 06 F1 | 	add	local10, #4
08414     18 29 62 FC | 	wrlong	local06, local10
08418     03 00 00 FF 
0841c     00 E4 05 F1 | 	add	objptr, ##1536
08420     F2 30 02 FB | 	rdlong	local10, objptr
08424     18 33 02 F6 | 	mov	local11, local10
08428     01 32 66 F0 | 	shl	local11, #1
0842c     18 33 02 F1 | 	add	local11, local10
08430     02 32 66 F0 | 	shl	local11, #2
08434     03 00 00 FF 
08438     00 E4 85 F1 | 	sub	objptr, ##1536
0843c     F2 32 02 F1 | 	add	local11, objptr
08440     08 32 06 F1 | 	add	local11, #8
08444     19 2B 62 FC | 	wrlong	local07, local11
08448     03 00 00 FF 
0844c     00 E4 05 F1 | 	add	objptr, ##1536
08450     F2 26 02 FB | 	rdlong	local05, objptr
08454     01 26 06 F1 | 	add	local05, #1
08458     F2 26 62 FC | 	wrlong	local05, objptr
0845c     4A 00 00 FF 
08460     7C E4 85 F1 | 	sub	objptr, ##38012
08464                 | LR__0772
08464                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08464     37 00 00 FF 
08468     44 E4 05 F1 | 	add	objptr, ##28228
0846c     F2 24 02 FB | 	rdlong	local04, objptr
08470     03 24 66 F0 | 	shl	local04, #3
08474     02 00 00 FF 
08478     38 E4 85 F1 | 	sub	objptr, ##1080
0847c     F2 24 02 F1 | 	add	local04, objptr
08480     04 24 06 F1 | 	add	local04, #4
08484     12 2D 02 FB | 	rdlong	local08, local04
08488     12 2C 0E F2 | 	cmp	local08, #18 wz
0848c     35 00 00 FF 
08490     0C E4 85 F1 | 	sub	objptr, ##27148
08494     60 01 90 5D |  if_ne	jmp	#LR__0773
08498     22 22 06 F6 | 	mov	local03, #34
0849c     0F 27 02 F6 | 	mov	local05, local01
084a0     10 29 02 F6 | 	mov	local06, local02
084a4     11 2B 02 F6 | 	mov	local07, local03
084a8     4A 00 00 FF 
084ac     7C E4 05 F1 | 	add	objptr, ##38012
084b0     F2 2C 02 FB | 	rdlong	local08, objptr
084b4     16 2F 02 F6 | 	mov	local09, local08
084b8     01 2E 66 F0 | 	shl	local09, #1
084bc     16 2F 02 F1 | 	add	local09, local08
084c0     02 2E 66 F0 | 	shl	local09, #2
084c4     03 00 00 FF 
084c8     00 E4 85 F1 | 	sub	objptr, ##1536
084cc     F2 2E 02 F1 | 	add	local09, objptr
084d0     17 27 62 FC | 	wrlong	local05, local09
084d4     03 00 00 FF 
084d8     00 E4 05 F1 | 	add	objptr, ##1536
084dc     F2 32 02 FB | 	rdlong	local11, objptr
084e0     19 31 02 F6 | 	mov	local10, local11
084e4     01 30 66 F0 | 	shl	local10, #1
084e8     19 31 02 F1 | 	add	local10, local11
084ec     02 30 66 F0 | 	shl	local10, #2
084f0     03 00 00 FF 
084f4     00 E4 85 F1 | 	sub	objptr, ##1536
084f8     F2 30 02 F1 | 	add	local10, objptr
084fc     04 30 06 F1 | 	add	local10, #4
08500     18 29 62 FC | 	wrlong	local06, local10
08504     03 00 00 FF 
08508     00 E4 05 F1 | 	add	objptr, ##1536
0850c     F2 26 02 FB | 	rdlong	local05, objptr
08510     13 33 02 F6 | 	mov	local11, local05
08514     01 32 66 F0 | 	shl	local11, #1
08518     13 33 02 F1 | 	add	local11, local05
0851c     02 32 66 F0 | 	shl	local11, #2
08520     03 00 00 FF 
08524     00 E4 85 F1 | 	sub	objptr, ##1536
08528     F2 32 02 F1 | 	add	local11, objptr
0852c     08 32 06 F1 | 	add	local11, #8
08530     19 2B 62 FC | 	wrlong	local07, local11
08534     03 00 00 FF 
08538     00 E4 05 F1 | 	add	objptr, ##1536
0853c     F2 26 02 FB | 	rdlong	local05, objptr
08540     01 26 06 F1 | 	add	local05, #1
08544     F2 26 62 FC | 	wrlong	local05, objptr
08548     44 22 06 F6 | 	mov	local03, #68
0854c     0F 27 02 F6 | 	mov	local05, local01
08550     10 29 02 F6 | 	mov	local06, local02
08554     11 2B 02 F6 | 	mov	local07, local03
08558     F2 2C 02 FB | 	rdlong	local08, objptr
0855c     16 2F 02 F6 | 	mov	local09, local08
08560     01 2E 66 F0 | 	shl	local09, #1
08564     16 2F 02 F1 | 	add	local09, local08
08568     02 2E 66 F0 | 	shl	local09, #2
0856c     03 00 00 FF 
08570     00 E4 85 F1 | 	sub	objptr, ##1536
08574     F2 2E 02 F1 | 	add	local09, objptr
08578     17 27 62 FC | 	wrlong	local05, local09
0857c     03 00 00 FF 
08580     00 E4 05 F1 | 	add	objptr, ##1536
08584     F2 32 02 FB | 	rdlong	local11, objptr
08588     19 31 02 F6 | 	mov	local10, local11
0858c     01 30 66 F0 | 	shl	local10, #1
08590     19 31 02 F1 | 	add	local10, local11
08594     02 30 66 F0 | 	shl	local10, #2
08598     03 00 00 FF 
0859c     00 E4 85 F1 | 	sub	objptr, ##1536
085a0     F2 30 02 F1 | 	add	local10, objptr
085a4     04 30 06 F1 | 	add	local10, #4
085a8     18 29 62 FC | 	wrlong	local06, local10
085ac     03 00 00 FF 
085b0     00 E4 05 F1 | 	add	objptr, ##1536
085b4     F2 30 02 FB | 	rdlong	local10, objptr
085b8     18 33 02 F6 | 	mov	local11, local10
085bc     01 32 66 F0 | 	shl	local11, #1
085c0     18 33 02 F1 | 	add	local11, local10
085c4     02 32 66 F0 | 	shl	local11, #2
085c8     03 00 00 FF 
085cc     00 E4 85 F1 | 	sub	objptr, ##1536
085d0     F2 32 02 F1 | 	add	local11, objptr
085d4     08 32 06 F1 | 	add	local11, #8
085d8     19 2B 62 FC | 	wrlong	local07, local11
085dc     03 00 00 FF 
085e0     00 E4 05 F1 | 	add	objptr, ##1536
085e4     F2 26 02 FB | 	rdlong	local05, objptr
085e8     01 26 06 F1 | 	add	local05, #1
085ec     F2 26 62 FC | 	wrlong	local05, objptr
085f0     4A 00 00 FF 
085f4     7C E4 85 F1 | 	sub	objptr, ##38012
085f8                 | LR__0773
085f8                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
085f8     37 00 00 FF 
085fc     44 E4 05 F1 | 	add	objptr, ##28228
08600     F2 24 02 FB | 	rdlong	local04, objptr
08604     03 24 66 F0 | 	shl	local04, #3
08608     02 00 00 FF 
0860c     38 E4 85 F1 | 	sub	objptr, ##1080
08610     F2 24 02 F1 | 	add	local04, objptr
08614     04 24 06 F1 | 	add	local04, #4
08618     12 2D 02 FB | 	rdlong	local08, local04
0861c     FE 2D 0E F2 | 	cmp	local08, #510 wz
08620     35 00 00 FF 
08624     0C E4 85 F1 | 	sub	objptr, ##27148
08628     B8 00 90 5D |  if_ne	jmp	#LR__0774
0862c     44 22 06 F6 | 	mov	local03, #68
08630     0F 27 02 F6 | 	mov	local05, local01
08634     10 29 02 F6 | 	mov	local06, local02
08638     11 2B 02 F6 | 	mov	local07, local03
0863c     4A 00 00 FF 
08640     7C E4 05 F1 | 	add	objptr, ##38012
08644     F2 2C 02 FB | 	rdlong	local08, objptr
08648     16 2F 02 F6 | 	mov	local09, local08
0864c     01 2E 66 F0 | 	shl	local09, #1
08650     16 2F 02 F1 | 	add	local09, local08
08654     02 2E 66 F0 | 	shl	local09, #2
08658     03 00 00 FF 
0865c     00 E4 85 F1 | 	sub	objptr, ##1536
08660     F2 2E 02 F1 | 	add	local09, objptr
08664     17 27 62 FC | 	wrlong	local05, local09
08668     03 00 00 FF 
0866c     00 E4 05 F1 | 	add	objptr, ##1536
08670     F2 32 02 FB | 	rdlong	local11, objptr
08674     19 31 02 F6 | 	mov	local10, local11
08678     01 30 66 F0 | 	shl	local10, #1
0867c     19 31 02 F1 | 	add	local10, local11
08680     02 30 66 F0 | 	shl	local10, #2
08684     03 00 00 FF 
08688     00 E4 85 F1 | 	sub	objptr, ##1536
0868c     F2 30 02 F1 | 	add	local10, objptr
08690     04 30 06 F1 | 	add	local10, #4
08694     18 29 62 FC | 	wrlong	local06, local10
08698     03 00 00 FF 
0869c     00 E4 05 F1 | 	add	objptr, ##1536
086a0     F2 30 02 FB | 	rdlong	local10, objptr
086a4     18 33 02 F6 | 	mov	local11, local10
086a8     01 32 66 F0 | 	shl	local11, #1
086ac     18 33 02 F1 | 	add	local11, local10
086b0     02 32 66 F0 | 	shl	local11, #2
086b4     03 00 00 FF 
086b8     00 E4 85 F1 | 	sub	objptr, ##1536
086bc     F2 32 02 F1 | 	add	local11, objptr
086c0     08 32 06 F1 | 	add	local11, #8
086c4     19 2B 62 FC | 	wrlong	local07, local11
086c8     03 00 00 FF 
086cc     00 E4 05 F1 | 	add	objptr, ##1536
086d0     F2 26 02 FB | 	rdlong	local05, objptr
086d4     01 26 06 F1 | 	add	local05, #1
086d8     F2 26 62 FC | 	wrlong	local05, objptr
086dc     4A 00 00 FF 
086e0     7C E4 85 F1 | 	sub	objptr, ##38012
086e4                 | LR__0774
086e4                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
086e4     37 00 00 FF 
086e8     44 E4 05 F1 | 	add	objptr, ##28228
086ec     F2 24 02 FB | 	rdlong	local04, objptr
086f0     03 24 66 F0 | 	shl	local04, #3
086f4     02 00 00 FF 
086f8     38 E4 85 F1 | 	sub	objptr, ##1080
086fc     F2 24 02 F1 | 	add	local04, objptr
08700     04 24 06 F1 | 	add	local04, #4
08704     12 2D 02 FB | 	rdlong	local08, local04
08708     11 2C 0E F2 | 	cmp	local08, #17 wz
0870c     35 00 00 FF 
08710     0C E4 85 F1 | 	sub	objptr, ##27148
08714     6C 00 90 AD |  if_e	jmp	#LR__0775
08718     37 00 00 FF 
0871c     44 E4 05 F1 | 	add	objptr, ##28228
08720     F2 2C 02 FB | 	rdlong	local08, objptr
08724     03 2C 66 F0 | 	shl	local08, #3
08728     02 00 00 FF 
0872c     38 E4 85 F1 | 	sub	objptr, ##1080
08730     F2 2C 02 F1 | 	add	local08, objptr
08734     04 2C 06 F1 | 	add	local08, #4
08738     16 2D 02 FB | 	rdlong	local08, local08
0873c     12 2C 0E F2 | 	cmp	local08, #18 wz
08740     35 00 00 FF 
08744     0C E4 85 F1 | 	sub	objptr, ##27148
08748     38 00 90 AD |  if_e	jmp	#LR__0775
0874c     37 00 00 FF 
08750     44 E4 05 F1 | 	add	objptr, ##28228
08754     F2 32 02 FB | 	rdlong	local11, objptr
08758     03 32 66 F0 | 	shl	local11, #3
0875c     02 00 00 FF 
08760     38 E4 85 F1 | 	sub	objptr, ##1080
08764     F2 32 02 F1 | 	add	local11, objptr
08768     04 32 06 F1 | 	add	local11, #4
0876c     19 33 02 FB | 	rdlong	local11, local11
08770     FE 33 0E F2 | 	cmp	local11, #510 wz
08774     35 00 00 FF 
08778     0C E4 85 F1 | 	sub	objptr, ##27148
0877c     16 FA 05 56 |  if_ne	mov	result1, #22
08780     68 00 90 5D |  if_ne	jmp	#LR__0777
08784                 | LR__0775
08784     37 00 00 FF 
08788     44 E4 05 F1 | 	add	objptr, ##28228
0878c     F2 24 02 FB | 	rdlong	local04, objptr
08790     01 24 06 F1 | 	add	local04, #1
08794     F2 24 62 FC | 	wrlong	local04, objptr
08798     03 24 66 F0 | 	shl	local04, #3
0879c     02 00 00 FF 
087a0     38 E4 85 F1 | 	sub	objptr, ##1080
087a4     F2 24 02 F1 | 	add	local04, objptr
087a8     04 24 06 F1 | 	add	local04, #4
087ac     12 2D 02 FB | 	rdlong	local08, local04
087b0     FE 2D 0E F2 | 	cmp	local08, #510 wz
087b4     35 00 00 FF 
087b8     0C E4 85 F1 | 	sub	objptr, ##27148
087bc     28 00 90 AD |  if_e	jmp	#LR__0776
087c0     37 00 00 FF 
087c4     44 E4 05 F1 | 	add	objptr, ##28228
087c8     F2 32 02 FB | 	rdlong	local11, objptr
087cc     0E 00 00 FF 
087d0     1C E4 05 F1 | 	add	objptr, ##7196
087d4     F2 30 02 FB | 	rdlong	local10, objptr
087d8     45 00 00 FF 
087dc     60 E4 85 F1 | 	sub	objptr, ##35424
087e0     18 33 52 F2 | 	cmps	local11, local10 wc
087e4     E4 FA 9F CD |  if_b	jmp	#LR__0771
087e8                 | LR__0776
087e8                 | ' return 0
087e8     00 FA 05 F6 | 	mov	result1, #0
087ec                 | LR__0777
087ec     A7 F0 03 F6 | 	mov	ptra, fp
087f0     B2 00 A0 FD | 	call	#popregs_
087f4                 | _compile_print_ret
087f4     2D 00 64 FD | 	ret
087f8                 | 
087f8                 | ' 
087f8                 | ' function compile_if() as ulong  
087f8                 | _compile_if
087f8     05 4A 05 F6 | 	mov	COUNT_, #5
087fc     A8 00 A0 FD | 	call	#pushregs_
08800                 | _compile_if_enter
08800     08 1B B0 FD | 	call	#_expr
08804                 | ' expr()
08804                 | ' return 0
08804     37 00 00 FF 
08808     44 E4 05 F1 | 	add	objptr, ##28228
0880c     F2 FA 01 FB | 	rdlong	result1, objptr
08810     01 FA 05 F1 | 	add	result1, #1
08814     F2 FA 61 FC | 	wrlong	result1, objptr
08818     58 22 06 F6 | 	mov	local03, #88
0881c     0F 25 02 F6 | 	mov	local04, local01
08820     10 27 02 F6 | 	mov	local05, local02
08824     11 1F 02 F6 | 	mov	local01, local03
08828     13 00 00 FF 
0882c     38 E4 05 F1 | 	add	objptr, ##9784
08830     F2 12 02 FB | 	rdlong	arg01, objptr
08834     09 FB 01 F6 | 	mov	result1, arg01
08838     01 FA 65 F0 | 	shl	result1, #1
0883c     09 FB 01 F1 | 	add	result1, arg01
08840     02 FA 65 F0 | 	shl	result1, #2
08844     03 00 00 FF 
08848     00 E4 85 F1 | 	sub	objptr, ##1536
0884c     F2 FA 01 F1 | 	add	result1, objptr
08850     FD 24 62 FC | 	wrlong	local04, result1
08854     03 00 00 FF 
08858     00 E4 05 F1 | 	add	objptr, ##1536
0885c     F2 12 02 FB | 	rdlong	arg01, objptr
08860     09 25 02 F6 | 	mov	local04, arg01
08864     01 24 66 F0 | 	shl	local04, #1
08868     09 25 02 F1 | 	add	local04, arg01
0886c     02 24 66 F0 | 	shl	local04, #2
08870     03 00 00 FF 
08874     00 E4 85 F1 | 	sub	objptr, ##1536
08878     F2 24 02 F1 | 	add	local04, objptr
0887c     04 24 06 F1 | 	add	local04, #4
08880     12 27 62 FC | 	wrlong	local05, local04
08884     03 00 00 FF 
08888     00 E4 05 F1 | 	add	objptr, ##1536
0888c     F2 24 02 FB | 	rdlong	local04, objptr
08890     12 27 02 F6 | 	mov	local05, local04
08894     01 26 66 F0 | 	shl	local05, #1
08898     12 27 02 F1 | 	add	local05, local04
0889c     02 26 66 F0 | 	shl	local05, #2
088a0     03 00 00 FF 
088a4     00 E4 85 F1 | 	sub	objptr, ##1536
088a8     F2 26 02 F1 | 	add	local05, objptr
088ac     08 26 06 F1 | 	add	local05, #8
088b0     13 1F 62 FC | 	wrlong	local01, local05
088b4     03 00 00 FF 
088b8     00 E4 05 F1 | 	add	objptr, ##1536
088bc     F2 24 02 FB | 	rdlong	local04, objptr
088c0     01 24 06 F1 | 	add	local04, #1
088c4     F2 24 62 FC | 	wrlong	local04, objptr
088c8                 | ' 
088c8                 | ' 'print "In compile_if"
088c8                 | ' compile_fun_1p()
088c8                 | ' cmd=lparts(ct).token : ct+=1
088c8                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
088c8                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
088c8                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
088c8     13 00 00 FF 
088cc     38 E4 85 F1 | 	sub	objptr, ##9784
088d0     F2 26 02 FB | 	rdlong	local05, objptr
088d4     01 26 06 F1 | 	add	local05, #1
088d8     03 26 66 F0 | 	shl	local05, #3
088dc     02 00 00 FF 
088e0     38 E4 85 F1 | 	sub	objptr, ##1080
088e4     F2 26 02 F1 | 	add	local05, objptr
088e8     13 13 02 FB | 	rdlong	arg01, local05
088ec     35 00 00 FF 
088f0     0C E4 85 F1 | 	sub	objptr, ##27148
088f4                 | ' 
088f4                 | ' select case s
088f4     82 01 00 FF 
088f8     46 14 06 F6 | 	mov	arg02, ##@LR__5173
088fc     44 81 B1 FD | 	call	#__system___string_cmp
08900     00 FA 0D F2 | 	cmp	result1, #0 wz
08904     1B FA 05 A6 |  if_e	mov	result1, #27
08908     00 FA 05 56 |  if_ne	mov	result1, #0
0890c     00 FA 0D F2 | 	cmp	result1, #0 wz
08910     0C 00 90 AD |  if_e	jmp	#LR__0780
08914     05 12 06 F6 | 	mov	arg01, #5
08918     A4 ED BF FD | 	call	#_compile_immediate_assign
0891c     08 00 90 FD | 	jmp	#LR__0781
08920                 | LR__0780
08920     05 12 06 F6 | 	mov	arg01, #5
08924     D4 E2 BF FD | 	call	#_compile_immediate
08928                 | LR__0781
08928                 | ' 
08928                 | ' 
08928                 | ' return 0
08928     00 FA 05 F6 | 	mov	result1, #0
0892c     A7 F0 03 F6 | 	mov	ptra, fp
08930     B2 00 A0 FD | 	call	#popregs_
08934                 | _compile_if_ret
08934     2D 00 64 FD | 	ret
08938                 | 
08938                 | ' 
08938                 | ' function compile_else() as ulong  
08938                 | _compile_else
08938     05 4A 05 F6 | 	mov	COUNT_, #5
0893c     A8 00 A0 FD | 	call	#pushregs_
08940                 | _compile_else_enter
08940     5A 22 06 F6 | 	mov	local03, #90
08944     0F 25 02 F6 | 	mov	local04, local01
08948     10 27 02 F6 | 	mov	local05, local02
0894c     11 1F 02 F6 | 	mov	local01, local03
08950     4A 00 00 FF 
08954     7C E4 05 F1 | 	add	objptr, ##38012
08958     F2 12 02 FB | 	rdlong	arg01, objptr
0895c     09 FB 01 F6 | 	mov	result1, arg01
08960     01 FA 65 F0 | 	shl	result1, #1
08964     09 FB 01 F1 | 	add	result1, arg01
08968     02 FA 65 F0 | 	shl	result1, #2
0896c     03 00 00 FF 
08970     00 E4 85 F1 | 	sub	objptr, ##1536
08974     F2 FA 01 F1 | 	add	result1, objptr
08978     FD 24 62 FC | 	wrlong	local04, result1
0897c     03 00 00 FF 
08980     00 E4 05 F1 | 	add	objptr, ##1536
08984     F2 FA 01 FB | 	rdlong	result1, objptr
08988     FD 24 02 F6 | 	mov	local04, result1
0898c     01 24 66 F0 | 	shl	local04, #1
08990     FD 24 02 F1 | 	add	local04, result1
08994     02 24 66 F0 | 	shl	local04, #2
08998     03 00 00 FF 
0899c     00 E4 85 F1 | 	sub	objptr, ##1536
089a0     F2 24 02 F1 | 	add	local04, objptr
089a4     04 24 06 F1 | 	add	local04, #4
089a8     12 27 62 FC | 	wrlong	local05, local04
089ac     03 00 00 FF 
089b0     00 E4 05 F1 | 	add	objptr, ##1536
089b4     F2 24 02 FB | 	rdlong	local04, objptr
089b8     12 27 02 F6 | 	mov	local05, local04
089bc     01 26 66 F0 | 	shl	local05, #1
089c0     12 27 02 F1 | 	add	local05, local04
089c4     02 26 66 F0 | 	shl	local05, #2
089c8     03 00 00 FF 
089cc     00 E4 85 F1 | 	sub	objptr, ##1536
089d0     F2 26 02 F1 | 	add	local05, objptr
089d4     08 26 06 F1 | 	add	local05, #8
089d8     13 1F 62 FC | 	wrlong	local01, local05
089dc     03 00 00 FF 
089e0     00 E4 05 F1 | 	add	objptr, ##1536
089e4     F2 24 02 FB | 	rdlong	local04, objptr
089e8     01 24 06 F1 | 	add	local04, #1
089ec     F2 24 62 FC | 	wrlong	local04, objptr
089f0                 | ' 
089f0                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
089f0                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
089f0     13 00 00 FF 
089f4     38 E4 85 F1 | 	sub	objptr, ##9784
089f8     F2 26 02 FB | 	rdlong	local05, objptr
089fc     01 26 06 F1 | 	add	local05, #1
08a00     03 26 66 F0 | 	shl	local05, #3
08a04     02 00 00 FF 
08a08     38 E4 85 F1 | 	sub	objptr, ##1080
08a0c     F2 26 02 F1 | 	add	local05, objptr
08a10     13 13 02 FB | 	rdlong	arg01, local05
08a14     35 00 00 FF 
08a18     0C E4 85 F1 | 	sub	objptr, ##27148
08a1c                 | ' 
08a1c                 | ' select case s
08a1c     82 01 00 FF 
08a20     46 14 06 F6 | 	mov	arg02, ##@LR__5173
08a24     1C 80 B1 FD | 	call	#__system___string_cmp
08a28     00 FA 0D F2 | 	cmp	result1, #0 wz
08a2c     1B FA 05 A6 |  if_e	mov	result1, #27
08a30     00 FA 05 56 |  if_ne	mov	result1, #0
08a34     00 FA 0D F2 | 	cmp	result1, #0 wz
08a38     0C 00 90 AD |  if_e	jmp	#LR__0790
08a3c     05 12 06 F6 | 	mov	arg01, #5
08a40     7C EC BF FD | 	call	#_compile_immediate_assign
08a44     08 00 90 FD | 	jmp	#LR__0791
08a48                 | LR__0790
08a48     05 12 06 F6 | 	mov	arg01, #5
08a4c     AC E1 BF FD | 	call	#_compile_immediate
08a50                 | LR__0791
08a50                 | ' 
08a50                 | ' 
08a50                 | ' return 0
08a50     00 FA 05 F6 | 	mov	result1, #0
08a54     A7 F0 03 F6 | 	mov	ptra, fp
08a58     B2 00 A0 FD | 	call	#popregs_
08a5c                 | _compile_else_ret
08a5c     2D 00 64 FD | 	ret
08a60                 | 
08a60                 | ' 
08a60                 | ' 
08a60                 | ' function compile_dim() as ulong  
08a60                 | _compile_dim
08a60     11 4A 05 F6 | 	mov	COUNT_, #17
08a64     A8 00 A0 FD | 	call	#pushregs_
08a68     01 1E 06 F6 | 	mov	local01, #1
08a6c     01 20 06 F6 | 	mov	local02, #1
08a70     01 22 06 F6 | 	mov	local03, #1
08a74                 | ' 
08a74                 | ' dims(0)=1: dims(1)=1: dims(2)=1
08a74                 | ' 
08a74                 | ' if isname(lparts(ct).part$) then 
08a74     37 00 00 FF 
08a78     44 E4 05 F1 | 	add	objptr, ##28228
08a7c     F2 18 02 FB | 	rdlong	arg04, objptr
08a80     03 18 66 F0 | 	shl	arg04, #3
08a84     02 00 00 FF 
08a88     38 E4 85 F1 | 	sub	objptr, ##1080
08a8c     F2 18 02 F1 | 	add	arg04, objptr
08a90     0C 13 02 FB | 	rdlong	arg01, arg04
08a94     35 00 00 FF 
08a98     0C E4 85 F1 | 	sub	objptr, ##27148
08a9c     3C D0 BF FD | 	call	#_isname
08aa0     00 FA 0D F2 | 	cmp	result1, #0 wz
08aa4     AC 05 90 AD |  if_e	jmp	#LR__0824
08aa8     37 00 00 FF 
08aac     44 E4 05 F1 | 	add	objptr, ##28228
08ab0     F2 24 02 FB | 	rdlong	local04, objptr
08ab4     03 24 66 F0 | 	shl	local04, #3
08ab8     02 00 00 FF 
08abc     38 E4 85 F1 | 	sub	objptr, ##1080
08ac0     F2 24 02 F1 | 	add	local04, objptr
08ac4     12 27 02 FB | 	rdlong	local05, local04
08ac8     01 28 66 F6 | 	neg	local06, #1
08acc                 | '   varname2$=lparts(ct).part$ 
08acc                 | '   j=-1
08acc                 | '   if varnum>0 then
08acc     04 E4 85 F1 | 	sub	objptr, #4
08ad0     F2 2A 02 FB | 	rdlong	local07, objptr
08ad4     35 00 00 FF 
08ad8     08 E4 85 F1 | 	sub	objptr, ##27144
08adc     01 2A 56 F2 | 	cmps	local07, #1 wc
08ae0     58 00 90 CD |  if_b	jmp	#LR__0802
08ae4                 | '  '   print "in dim, varnum=";varnum
08ae4                 | '     for i=0 to varnum-1
08ae4     00 2C 06 F6 | 	mov	local08, #0
08ae8     35 00 00 FF 
08aec     08 E4 05 F1 | 	add	objptr, ##27144
08af0     F2 2E 02 FB | 	rdlong	local09, objptr
08af4     35 00 00 FF 
08af8     08 E4 85 F1 | 	sub	objptr, ##27144
08afc                 | LR__0800
08afc     17 2D 52 F2 | 	cmps	local08, local09 wc
08b00     38 00 90 3D |  if_ae	jmp	#LR__0801
08b04                 | '       if variables(i).name=varname2$ then j=i : exit
08b04     16 25 02 F6 | 	mov	local04, local08
08b08     04 24 66 F0 | 	shl	local04, #4
08b0c     14 00 00 FF 
08b10     F8 E5 05 F1 | 	add	objptr, ##10744
08b14     F2 24 02 F1 | 	add	local04, objptr
08b18     12 13 02 FB | 	rdlong	arg01, local04
08b1c     13 15 02 F6 | 	mov	arg02, local05
08b20     14 00 00 FF 
08b24     F8 E5 85 F1 | 	sub	objptr, ##10744
08b28     18 7F B1 FD | 	call	#__system___string_cmp
08b2c     00 FA 0D F2 | 	cmp	result1, #0 wz
08b30     16 29 02 A6 |  if_e	mov	local06, local08
08b34     01 2C 06 51 |  if_ne	add	local08, #1
08b38     C0 FF 9F 5D |  if_ne	jmp	#LR__0800
08b3c                 | LR__0801
08b3c                 | LR__0802
08b3c                 | ' '  if j<>-1 then printerror (42) : return 42
08b3c                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
08b3c     FF FF 7F FF 
08b40     FF 29 0E F2 | 	cmp	local06, ##-1 wz
08b44     35 00 00 AF 
08b48     08 E4 05 A1 |  if_e	add	objptr, ##27144
08b4c     F2 28 02 AB |  if_e	rdlong	local06, objptr
08b50     35 00 00 AF 
08b54     08 E4 85 A1 |  if_e	sub	objptr, ##27144
08b58     78 00 90 AD |  if_e	jmp	#LR__0803
08b5c     00 12 06 F6 | 	mov	arg01, #0
08b60     F8 D8 B1 FD | 	call	#__system___getiolock_0540
08b64     FD 12 02 F6 | 	mov	arg01, result1
08b68     B0 7E B1 FD | 	call	#__system___lockmem
08b6c     84 01 00 FF 
08b70     55 14 06 F6 | 	mov	arg02, ##@LR__5405
08b74     00 12 06 F6 | 	mov	arg01, #0
08b78     00 16 06 F6 | 	mov	arg03, #0
08b7c     90 8B B1 FD | 	call	#__system___basic_print_string
08b80     51 00 00 FF 
08b84     C0 E5 05 F1 | 	add	objptr, ##41920
08b88     F2 14 02 FB | 	rdlong	arg02, objptr
08b8c     51 00 00 FF 
08b90     C0 E5 85 F1 | 	sub	objptr, ##41920
08b94     00 12 06 F6 | 	mov	arg01, #0
08b98     00 16 06 F6 | 	mov	arg03, #0
08b9c     0A 18 06 F6 | 	mov	arg04, #10
08ba0     F0 8B B1 FD | 	call	#__system___basic_print_unsigned
08ba4     84 01 00 FF 
08ba8     63 14 06 F6 | 	mov	arg02, ##@LR__5406
08bac     00 12 06 F6 | 	mov	arg01, #0
08bb0     00 16 06 F6 | 	mov	arg03, #0
08bb4     58 8B B1 FD | 	call	#__system___basic_print_string
08bb8     00 12 06 F6 | 	mov	arg01, #0
08bbc     0A 14 06 F6 | 	mov	arg02, #10
08bc0     00 16 06 F6 | 	mov	arg03, #0
08bc4     F0 8A B1 FD | 	call	#__system___basic_print_char
08bc8     00 12 06 F6 | 	mov	arg01, #0
08bcc     8C D8 B1 FD | 	call	#__system___getiolock_0540
08bd0     FD 00 68 FC | 	wrlong	#0, result1
08bd4                 | LR__0803
08bd4                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
08bd4     37 00 00 FF 
08bd8     44 E4 05 F1 | 	add	objptr, ##28228
08bdc     F2 18 02 FB | 	rdlong	arg04, objptr
08be0     01 18 06 F1 | 	add	arg04, #1
08be4     03 18 66 F0 | 	shl	arg04, #3
08be8     02 00 00 FF 
08bec     38 E4 85 F1 | 	sub	objptr, ##1080
08bf0     F2 18 02 F1 | 	add	arg04, objptr
08bf4     0C 13 02 FB | 	rdlong	arg01, arg04
08bf8     84 01 00 FF 
08bfc     84 14 06 F6 | 	mov	arg02, ##@LR__5407
08c00     35 00 00 FF 
08c04     0C E4 85 F1 | 	sub	objptr, ##27148
08c08     38 7E B1 FD | 	call	#__system___string_cmp
08c0c     00 FA 0D F2 | 	cmp	result1, #0 wz
08c10     50 00 90 AD |  if_e	jmp	#LR__0804
08c14     37 00 00 FF 
08c18     44 E4 05 F1 | 	add	objptr, ##28228
08c1c     F2 2E 02 FB | 	rdlong	local09, objptr
08c20     01 2E 06 F1 | 	add	local09, #1
08c24     03 2E 66 F0 | 	shl	local09, #3
08c28     02 00 00 FF 
08c2c     38 E4 85 F1 | 	sub	objptr, ##1080
08c30     F2 2E 02 F1 | 	add	local09, objptr
08c34     17 13 02 FB | 	rdlong	arg01, local09
08c38     84 01 00 FF 
08c3c     86 14 06 F6 | 	mov	arg02, ##@LR__5408
08c40     35 00 00 FF 
08c44     0C E4 85 F1 | 	sub	objptr, ##27148
08c48     F8 7D B1 FD | 	call	#__system___string_cmp
08c4c     00 FA 0D F2 | 	cmp	result1, #0 wz
08c50     10 00 90 AD |  if_e	jmp	#LR__0804
08c54     2B 12 06 F6 | 	mov	arg01, #43
08c58     28 48 B1 FD | 	call	#_printerror
08c5c     2B FA 05 F6 | 	mov	result1, #43
08c60     00 05 90 FD | 	jmp	#LR__0826
08c64                 | LR__0804
08c64                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
08c64     37 00 00 FF 
08c68     44 E4 05 F1 | 	add	objptr, ##28228
08c6c     F2 14 02 FB | 	rdlong	arg02, objptr
08c70     01 14 06 F1 | 	add	arg02, #1
08c74     03 14 66 F0 | 	shl	arg02, #3
08c78     02 00 00 FF 
08c7c     38 E4 85 F1 | 	sub	objptr, ##1080
08c80     F2 14 02 F1 | 	add	arg02, objptr
08c84     0A 13 02 FB | 	rdlong	arg01, arg02
08c88     84 01 00 FF 
08c8c     89 14 06 F6 | 	mov	arg02, ##@LR__5409
08c90     35 00 00 FF 
08c94     0C E4 85 F1 | 	sub	objptr, ##27148
08c98     A8 7D B1 FD | 	call	#__system___string_cmp
08c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
08ca0     37 00 00 AF 
08ca4     44 E4 05 A1 |  if_e	add	objptr, ##28228
08ca8     F2 30 02 AB |  if_e	rdlong	local10, objptr
08cac     37 00 00 AF 
08cb0     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08cb4     01 30 06 A1 |  if_e	add	local10, #1
08cb8     7C 01 90 AD |  if_e	jmp	#LR__0810
08cbc     37 00 00 FF 
08cc0     44 E4 05 F1 | 	add	objptr, ##28228
08cc4     F2 30 02 FB | 	rdlong	local10, objptr
08cc8     37 00 00 FF 
08ccc     44 E4 85 F1 | 	sub	objptr, ##28228
08cd0     02 30 06 F1 | 	add	local10, #2
08cd4     00 32 06 F6 | 	mov	local11, #0
08cd8                 | '   l=ct+2 : m=0 : do
08cd8                 | LR__0805
08cd8                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
08cd8                 | '     if isdec(lparts(l).part$) then 
08cd8     18 25 02 F6 | 	mov	local04, local10
08cdc     03 24 66 F0 | 	shl	local04, #3
08ce0     35 00 00 FF 
08ce4     0C E4 05 F1 | 	add	objptr, ##27148
08ce8     F2 24 02 F1 | 	add	local04, objptr
08cec     12 13 02 FB | 	rdlong	arg01, local04
08cf0     35 00 00 FF 
08cf4     0C E4 85 F1 | 	sub	objptr, ##27148
08cf8     E4 D6 BF FD | 	call	#_isdec
08cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
08d00     44 00 90 AD |  if_e	jmp	#LR__0806
08d04     19 35 02 F6 | 	mov	local12, local11
08d08     0F 35 06 F1 | 	add	local12, #local01
08d0c     18 2F 02 F6 | 	mov	local09, local10
08d10     03 2E 66 F0 | 	shl	local09, #3
08d14     35 00 00 FF 
08d18     0C E4 05 F1 | 	add	objptr, ##27148
08d1c     F2 2E 02 F1 | 	add	local09, objptr
08d20     17 13 02 FB | 	rdlong	arg01, local09
08d24     00 14 06 F6 | 	mov	arg02, #0
08d28     35 00 00 FF 
08d2c     0C E4 85 F1 | 	sub	objptr, ##27148
08d30     14 AF B1 FD | 	call	#__system____builtin_atoi
08d34     FD 36 02 F6 | 	mov	local13, result1
08d38                 | 	'.live	local13
08d38                 | 	'.live	local12
08d38     00 34 8E F9 | 	altd	local12, #0
08d3c     1B 35 02 F6 | 	mov	local12, local13
08d40     01 32 06 F1 | 	add	local11, #1
08d44     10 00 90 FD | 	jmp	#LR__0807
08d48                 | LR__0806
08d48     11 12 06 F6 | 	mov	arg01, #17
08d4c     34 47 B1 FD | 	call	#_printerror
08d50                 | '       printerror (17)  : return(17)
08d50     11 FA 05 F6 | 	mov	result1, #17
08d54     0C 04 90 FD | 	jmp	#LR__0826
08d58                 | LR__0807
08d58                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
08d58     18 25 02 F6 | 	mov	local04, local10
08d5c     01 24 06 F1 | 	add	local04, #1
08d60     03 24 66 F0 | 	shl	local04, #3
08d64     35 00 00 FF 
08d68     0C E4 05 F1 | 	add	objptr, ##27148
08d6c     F2 24 02 F1 | 	add	local04, objptr
08d70     12 13 02 FB | 	rdlong	arg01, local04
08d74     84 01 00 FF 
08d78     8C 14 06 F6 | 	mov	arg02, ##@LR__5410
08d7c     35 00 00 FF 
08d80     0C E4 85 F1 | 	sub	objptr, ##27148
08d84     BC 7C B1 FD | 	call	#__system___string_cmp
08d88     00 FA 0D F2 | 	cmp	result1, #0 wz
08d8c     48 00 90 AD |  if_e	jmp	#LR__0808
08d90     18 37 02 F6 | 	mov	local13, local10
08d94     01 36 06 F1 | 	add	local13, #1
08d98     03 36 66 F0 | 	shl	local13, #3
08d9c     35 00 00 FF 
08da0     0C E4 05 F1 | 	add	objptr, ##27148
08da4     F2 36 02 F1 | 	add	local13, objptr
08da8     1B 13 02 FB | 	rdlong	arg01, local13
08dac     84 01 00 FF 
08db0     8E 14 06 F6 | 	mov	arg02, ##@LR__5411
08db4     35 00 00 FF 
08db8     0C E4 85 F1 | 	sub	objptr, ##27148
08dbc     84 7C B1 FD | 	call	#__system___string_cmp
08dc0     00 FA 0D F2 | 	cmp	result1, #0 wz
08dc4     10 00 90 AD |  if_e	jmp	#LR__0808
08dc8     2C 12 06 F6 | 	mov	arg01, #44
08dcc     B4 46 B1 FD | 	call	#_printerror
08dd0     2C FA 05 F6 | 	mov	result1, #44
08dd4     8C 03 90 FD | 	jmp	#LR__0826
08dd8                 | LR__0808
08dd8     02 30 06 F1 | 	add	local10, #2
08ddc     18 25 02 F6 | 	mov	local04, local10
08de0     01 24 86 F1 | 	sub	local04, #1
08de4     03 24 66 F0 | 	shl	local04, #3
08de8     35 00 00 FF 
08dec     0C E4 05 F1 | 	add	objptr, ##27148
08df0     F2 24 02 F1 | 	add	local04, objptr
08df4     12 13 02 FB | 	rdlong	arg01, local04
08df8     84 01 00 FF 
08dfc     90 14 06 F6 | 	mov	arg02, ##@LR__5412
08e00     35 00 00 FF 
08e04     0C E4 85 F1 | 	sub	objptr, ##27148
08e08     38 7C B1 FD | 	call	#__system___string_cmp
08e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
08e10     03 32 56 52 |  if_ne	cmps	local11, #3 wc
08e14     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0805
08e18                 | '   if m>3 then printerror(45): return(45)
08e18     04 32 56 F2 | 	cmps	local11, #4 wc
08e1c     10 00 90 CD |  if_b	jmp	#LR__0809
08e20     2D 12 06 F6 | 	mov	arg01, #45
08e24     5C 46 B1 FD | 	call	#_printerror
08e28     2D FA 05 F6 | 	mov	result1, #45
08e2c     34 03 90 FD | 	jmp	#LR__0826
08e30                 | LR__0809
08e30     00 39 06 F6 | 	mov	local14, #256
08e34     0C 3A 06 F6 | 	mov	local15, #12
08e38                 | LR__0810
08e38                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
08e38                 | '   arraytype=array_no_type : esize=12
08e38                 | ' 1350 
08e38                 | '   if lparts(l).part$="as" then
08e38     18 25 02 F6 | 	mov	local04, local10
08e3c     03 24 66 F0 | 	shl	local04, #3
08e40     35 00 00 FF 
08e44     0C E4 05 F1 | 	add	objptr, ##27148
08e48     F2 24 02 F1 | 	add	local04, objptr
08e4c     12 13 02 FB | 	rdlong	arg01, local04
08e50     84 01 00 FF 
08e54     92 14 06 F6 | 	mov	arg02, ##@LR__5413
08e58     35 00 00 FF 
08e5c     0C E4 85 F1 | 	sub	objptr, ##27148
08e60     E0 7B B1 FD | 	call	#__system___string_cmp
08e64     00 FA 0D F2 | 	cmp	result1, #0 wz
08e68     F8 01 90 5D |  if_ne	jmp	#LR__0825
08e6c                 | '     select case lparts(l+1).part$
08e6c     18 35 02 F6 | 	mov	local12, local10
08e70     01 34 06 F1 | 	add	local12, #1
08e74     03 34 66 F0 | 	shl	local12, #3
08e78     35 00 00 FF 
08e7c     0C E4 05 F1 | 	add	objptr, ##27148
08e80     F2 34 02 F1 | 	add	local12, objptr
08e84     1A 3D 02 FB | 	rdlong	local16, local12
08e88     84 01 00 FF 
08e8c     95 14 06 F6 | 	mov	arg02, ##@LR__5414
08e90     1E 13 02 F6 | 	mov	arg01, local16
08e94     35 00 00 FF 
08e98     0C E4 85 F1 | 	sub	objptr, ##27148
08e9c     A4 7B B1 FD | 	call	#__system___string_cmp
08ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
08ea4     0C 01 90 AD |  if_e	jmp	#LR__0811
08ea8     84 01 00 FF 
08eac     9A 14 06 F6 | 	mov	arg02, ##@LR__5415
08eb0     1E 13 02 F6 | 	mov	arg01, local16
08eb4     8C 7B B1 FD | 	call	#__system___string_cmp
08eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
08ebc     00 01 90 AD |  if_e	jmp	#LR__0812
08ec0     84 01 00 FF 
08ec4     A0 14 06 F6 | 	mov	arg02, ##@LR__5416
08ec8     1E 13 02 F6 | 	mov	arg01, local16
08ecc     74 7B B1 FD | 	call	#__system___string_cmp
08ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
08ed4     F4 00 90 AD |  if_e	jmp	#LR__0813
08ed8     84 01 00 FF 
08edc     A6 14 06 F6 | 	mov	arg02, ##@LR__5417
08ee0     1E 13 02 F6 | 	mov	arg01, local16
08ee4     5C 7B B1 FD | 	call	#__system___string_cmp
08ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
08eec     E8 00 90 AD |  if_e	jmp	#LR__0814
08ef0     84 01 00 FF 
08ef4     AD 14 06 F6 | 	mov	arg02, ##@LR__5418
08ef8     1E 13 02 F6 | 	mov	arg01, local16
08efc     44 7B B1 FD | 	call	#__system___string_cmp
08f00     00 FA 0D F2 | 	cmp	result1, #0 wz
08f04     DC 00 90 AD |  if_e	jmp	#LR__0815
08f08     84 01 00 FF 
08f0c     B2 14 06 F6 | 	mov	arg02, ##@LR__5419
08f10     1E 13 02 F6 | 	mov	arg01, local16
08f14     2C 7B B1 FD | 	call	#__system___string_cmp
08f18     00 FA 0D F2 | 	cmp	result1, #0 wz
08f1c     D0 00 90 AD |  if_e	jmp	#LR__0816
08f20     84 01 00 FF 
08f24     BA 14 06 F6 | 	mov	arg02, ##@LR__5420
08f28     1E 13 02 F6 | 	mov	arg01, local16
08f2c     14 7B B1 FD | 	call	#__system___string_cmp
08f30     00 FA 0D F2 | 	cmp	result1, #0 wz
08f34     C4 00 90 AD |  if_e	jmp	#LR__0817
08f38     84 01 00 FF 
08f3c     C0 14 06 F6 | 	mov	arg02, ##@LR__5421
08f40     1E 13 02 F6 | 	mov	arg01, local16
08f44     FC 7A B1 FD | 	call	#__system___string_cmp
08f48     00 FA 0D F2 | 	cmp	result1, #0 wz
08f4c     B8 00 90 AD |  if_e	jmp	#LR__0818
08f50     84 01 00 FF 
08f54     C6 14 06 F6 | 	mov	arg02, ##@LR__5422
08f58     1E 13 02 F6 | 	mov	arg01, local16
08f5c     E4 7A B1 FD | 	call	#__system___string_cmp
08f60     00 FA 0D F2 | 	cmp	result1, #0 wz
08f64     AC 00 90 AD |  if_e	jmp	#LR__0819
08f68     84 01 00 FF 
08f6c     CD 14 06 F6 | 	mov	arg02, ##@LR__5423
08f70     1E 13 02 F6 | 	mov	arg01, local16
08f74     CC 7A B1 FD | 	call	#__system___string_cmp
08f78     00 FA 0D F2 | 	cmp	result1, #0 wz
08f7c     A0 00 90 AD |  if_e	jmp	#LR__0820
08f80     84 01 00 FF 
08f84     D4 14 06 F6 | 	mov	arg02, ##@LR__5424
08f88     1E 13 02 F6 | 	mov	arg01, local16
08f8c     B4 7A B1 FD | 	call	#__system___string_cmp
08f90     00 FA 0D F2 | 	cmp	result1, #0 wz
08f94     94 00 90 AD |  if_e	jmp	#LR__0821
08f98     84 01 00 FF 
08f9c     DB 14 06 F6 | 	mov	arg02, ##@LR__5425
08fa0     1E 13 02 F6 | 	mov	arg01, local16
08fa4     9C 7A B1 FD | 	call	#__system___string_cmp
08fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
08fac     88 00 90 AD |  if_e	jmp	#LR__0822
08fb0     90 00 90 FD | 	jmp	#LR__0823
08fb4                 | LR__0811
08fb4     01 39 06 F6 | 	mov	local14, #257
08fb8     01 3A 06 F6 | 	mov	local15, #1
08fbc     A4 00 90 FD | 	jmp	#LR__0825
08fc0                 | LR__0812
08fc0     02 39 06 F6 | 	mov	local14, #258
08fc4     01 3A 06 F6 | 	mov	local15, #1
08fc8     98 00 90 FD | 	jmp	#LR__0825
08fcc                 | LR__0813
08fcc     03 39 06 F6 | 	mov	local14, #259
08fd0     02 3A 06 F6 | 	mov	local15, #2
08fd4     8C 00 90 FD | 	jmp	#LR__0825
08fd8                 | LR__0814
08fd8     04 39 06 F6 | 	mov	local14, #260
08fdc     02 3A 06 F6 | 	mov	local15, #2
08fe0     80 00 90 FD | 	jmp	#LR__0825
08fe4                 | LR__0815
08fe4     05 39 06 F6 | 	mov	local14, #261
08fe8     04 3A 06 F6 | 	mov	local15, #4
08fec     74 00 90 FD | 	jmp	#LR__0825
08ff0                 | LR__0816
08ff0     05 39 06 F6 | 	mov	local14, #261
08ff4     04 3A 06 F6 | 	mov	local15, #4
08ff8     68 00 90 FD | 	jmp	#LR__0825
08ffc                 | LR__0817
08ffc     06 39 06 F6 | 	mov	local14, #262
09000     04 3A 06 F6 | 	mov	local15, #4
09004     5C 00 90 FD | 	jmp	#LR__0825
09008                 | LR__0818
09008     07 39 06 F6 | 	mov	local14, #263
0900c     08 3A 06 F6 | 	mov	local15, #8
09010     50 00 90 FD | 	jmp	#LR__0825
09014                 | LR__0819
09014     08 39 06 F6 | 	mov	local14, #264
09018     08 3A 06 F6 | 	mov	local15, #8
0901c     44 00 90 FD | 	jmp	#LR__0825
09020                 | LR__0820
09020     09 39 06 F6 | 	mov	local14, #265
09024     04 3A 06 F6 | 	mov	local15, #4
09028     38 00 90 FD | 	jmp	#LR__0825
0902c                 | LR__0821
0902c     0A 39 06 F6 | 	mov	local14, #266
09030     08 3A 06 F6 | 	mov	local15, #8
09034     2C 00 90 FD | 	jmp	#LR__0825
09038                 | LR__0822
09038     0B 39 06 F6 | 	mov	local14, #267
0903c     04 3A 06 F6 | 	mov	local15, #4
09040     20 00 90 FD | 	jmp	#LR__0825
09044                 | LR__0823
09044     2F 12 06 F6 | 	mov	arg01, #47
09048     38 44 B1 FD | 	call	#_printerror
0904c     2F FA 05 F6 | 	mov	result1, #47
09050     10 01 90 FD | 	jmp	#LR__0826
09054                 | LR__0824
09054     2E 12 06 F6 | 	mov	arg01, #46
09058     28 44 B1 FD | 	call	#_printerror
0905c                 | '   printerror(46): return 46
0905c     2E FA 05 F6 | 	mov	result1, #46
09060     00 01 90 FD | 	jmp	#LR__0826
09064                 | LR__0825
09064     0F 3B 02 FD | 	qmul	local15, local01
09068     18 2A 62 FD | 	getqx	local07
0906c     10 2B 02 FD | 	qmul	local07, local02
09070     18 3C 62 FD | 	getqx	local16
09074     11 3D 02 FD | 	qmul	local16, local03
09078     51 00 00 FF 
0907c     A8 E5 05 F1 | 	add	objptr, ##41896
09080     F2 3E 02 FB | 	rdlong	local17, objptr
09084     1C 15 02 F6 | 	mov	arg02, local14
09088     18 3C 62 FD | 	getqx	local16
0908c     1E 3F 82 F1 | 	sub	local17, local16
09090     10 3E 86 F1 | 	sub	local17, #16
09094     0F 3E 26 F5 | 	andn	local17, #15
09098     F2 3E 62 FC | 	wrlong	local17, objptr
0909c     51 00 00 FF 
090a0     A8 E5 85 F1 | 	sub	objptr, ##41896
090a4     1F 13 02 F6 | 	mov	arg01, local17
090a8     84 45 B1 FD | 	call	#_psdpoke
090ac     1F 13 02 F6 | 	mov	arg01, local17
090b0     02 12 06 F1 | 	add	arg01, #2
090b4     1D 15 02 F6 | 	mov	arg02, local15
090b8     74 45 B1 FD | 	call	#_psdpoke
090bc     1F 13 02 F6 | 	mov	arg01, local17
090c0     04 12 06 F1 | 	add	arg01, #4
090c4     0F 15 02 F6 | 	mov	arg02, local01
090c8     1C 45 B1 FD | 	call	#_pslpoke
090cc     1F 13 02 F6 | 	mov	arg01, local17
090d0     08 12 06 F1 | 	add	arg01, #8
090d4     10 15 02 F6 | 	mov	arg02, local02
090d8     0C 45 B1 FD | 	call	#_pslpoke
090dc     1F 13 02 F6 | 	mov	arg01, local17
090e0     0C 12 06 F1 | 	add	arg01, #12
090e4     11 15 02 F6 | 	mov	arg02, local03
090e8     FC 44 B1 FD | 	call	#_pslpoke
090ec     14 35 02 F6 | 	mov	local12, local06
090f0     04 34 66 F0 | 	shl	local12, #4
090f4     14 00 00 FF 
090f8     F8 E5 05 F1 | 	add	objptr, ##10744
090fc     F2 34 02 F1 | 	add	local12, objptr
09100     1A 27 62 FC | 	wrlong	local05, local12
09104     14 35 02 F6 | 	mov	local12, local06
09108     04 34 66 F0 | 	shl	local12, #4
0910c     F2 34 02 F1 | 	add	local12, objptr
09110     04 34 06 F1 | 	add	local12, #4
09114     1A 3F 62 FC | 	wrlong	local17, local12
09118     14 35 02 F6 | 	mov	local12, local06
0911c     04 34 66 F0 | 	shl	local12, #4
09120     F2 34 02 F1 | 	add	local12, objptr
09124     0C 34 06 F1 | 	add	local12, #12
09128     1A 39 62 FC | 	wrlong	local14, local12
0912c                 | ' memtop=arrayptr
0912c                 | ' 
0912c                 | ' psdpoke arrayptr,arraytype ': print arraytype, arrayptr
0912c                 | ' psdpoke arrayptr+2,esize ': print esize , psdpeek(arrayptr+2)
0912c                 | ' pslpoke arrayptr+4,dims(0)
0912c                 | ' pslpoke arrayptr+8,dims(1)
0912c                 | ' pslpoke arrayptr+12,dims(2)
0912c                 | ' 'for i=0 to 15: print hex$(pspeek(arrayptr+i),2), : next i
0912c                 | ' 'for i=0 to 3: print hex$(pslpeek(arrayptr+4*i),2), : next i
0912c                 | ' 
0912c                 | ' 
0912c                 | ' variables(j).name=varname2$
0912c                 | ' variables(j).value.uresult=arrayptr
0912c                 | ' variables(j).vartype=arraytype
0912c                 | ' if j=varnum then varnum+=1
0912c     20 00 00 FF 
09130     10 E4 05 F1 | 	add	objptr, ##16400
09134     F2 2A 02 FB | 	rdlong	local07, objptr
09138     35 00 00 FF 
0913c     08 E4 85 F1 | 	sub	objptr, ##27144
09140     15 29 0A F2 | 	cmp	local06, local07 wz
09144     35 00 00 AF 
09148     08 E4 05 A1 |  if_e	add	objptr, ##27144
0914c     F2 2A 02 AB |  if_e	rdlong	local07, objptr
09150     01 2A 06 A1 |  if_e	add	local07, #1
09154     F2 2A 62 AC |  if_e	wrlong	local07, objptr
09158     35 00 00 AF 
0915c     08 E4 85 A1 |  if_e	sub	objptr, ##27144
09160                 | ' 
09160                 | ' return 0
09160     00 FA 05 F6 | 	mov	result1, #0
09164                 | LR__0826
09164     A7 F0 03 F6 | 	mov	ptra, fp
09168     B2 00 A0 FD | 	call	#popregs_
0916c                 | _compile_dim_ret
0916c     2D 00 64 FD | 	ret
09170                 | 
09170                 | ' 
09170                 | ' 
09170                 | ' function compile_for() as ulong  
09170                 | _compile_for
09170     07 4A 05 F6 | 	mov	COUNT_, #7
09174     A8 00 A0 FD | 	call	#pushregs_
09178                 | ' 
09178                 | ' 
09178                 | ' 
09178                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
09178     37 00 00 FF 
0917c     44 E4 05 F1 | 	add	objptr, ##28228
09180     F2 14 02 FB | 	rdlong	arg02, objptr
09184     01 14 06 F1 | 	add	arg02, #1
09188     03 14 66 F0 | 	shl	arg02, #3
0918c     02 00 00 FF 
09190     38 E4 85 F1 | 	sub	objptr, ##1080
09194     F2 14 02 F1 | 	add	arg02, objptr
09198     0A 13 02 FB | 	rdlong	arg01, arg02
0919c     35 00 00 FF 
091a0     0C E4 85 F1 | 	sub	objptr, ##27148
091a4                 | ' 
091a4                 | ' select case s
091a4     82 01 00 FF 
091a8     46 14 06 F6 | 	mov	arg02, ##@LR__5173
091ac     94 78 B1 FD | 	call	#__system___string_cmp
091b0     00 FA 0D F2 | 	cmp	result1, #0 wz
091b4     1B FA 05 A6 |  if_e	mov	result1, #27
091b8     00 FA 05 56 |  if_ne	mov	result1, #0
091bc     00 FA 0D F2 | 	cmp	result1, #0 wz
091c0     0C 00 90 AD |  if_e	jmp	#LR__0830
091c4     05 12 06 F6 | 	mov	arg01, #5
091c8     F4 E4 BF FD | 	call	#_compile_immediate_assign
091cc     10 00 90 FD | 	jmp	#LR__0831
091d0                 | LR__0830
091d0     20 12 06 F6 | 	mov	arg01, #32
091d4     48 E9 BF FD | 	call	#_compile_error
091d8     20 FA 05 F6 | 	mov	result1, #32
091dc     E8 02 90 FD | 	jmp	#LR__0837
091e0                 | LR__0831
091e0     4A 00 00 FF 
091e4     7C E4 05 F1 | 	add	objptr, ##38012
091e8     F2 12 02 FB | 	rdlong	arg01, objptr
091ec     09 25 02 F6 | 	mov	local04, arg01
091f0     01 24 86 F1 | 	sub	local04, #1
091f4     12 15 02 F6 | 	mov	arg02, local04
091f8     01 14 66 F0 | 	shl	arg02, #1
091fc     12 15 02 F1 | 	add	arg02, local04
09200     02 14 66 F0 | 	shl	arg02, #2
09204     03 00 00 FF 
09208     00 E4 85 F1 | 	sub	objptr, ##1536
0920c     F2 14 02 F1 | 	add	arg02, objptr
09210     0A 1F 02 FB | 	rdlong	local01, arg02
09214     04 14 06 F1 | 	add	arg02, #4
09218     0A 27 02 FB | 	rdlong	local05, arg02
0921c     01 12 86 F1 | 	sub	arg01, #1
09220     09 29 02 F6 | 	mov	local06, arg01
09224     01 28 66 F0 | 	shl	local06, #1
09228     09 29 02 F1 | 	add	local06, arg01
0922c     02 28 66 F0 | 	shl	local06, #2
09230     F2 28 02 F1 | 	add	local06, objptr
09234     08 28 06 F1 | 	add	local06, #8
09238     14 13 02 FB | 	rdlong	arg01, local06
0923c     13 21 02 F6 | 	mov	local02, local05
09240     09 23 02 F6 | 	mov	local03, arg01
09244                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
09244                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
09244     17 22 0E F2 | 	cmp	local03, #23 wz
09248     47 00 00 FF 
0924c     7C E4 85 F1 | 	sub	objptr, ##36476
09250     10 00 90 AD |  if_e	jmp	#LR__0832
09254     22 12 06 F6 | 	mov	arg01, #34
09258     C4 E8 BF FD | 	call	#_compile_error
0925c     22 FA 05 F6 | 	mov	result1, #34
09260     64 02 90 FD | 	jmp	#LR__0837
09264                 | LR__0832
09264     0F 2B 02 F6 | 	mov	local07, local01
09268                 | ' varnum=t1.result.uresult
09268                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
09268     37 00 00 FF 
0926c     44 E4 05 F1 | 	add	objptr, ##28228
09270     F2 24 02 FB | 	rdlong	local04, objptr
09274     03 24 66 F0 | 	shl	local04, #3
09278     02 00 00 FF 
0927c     38 E4 85 F1 | 	sub	objptr, ##1080
09280     F2 24 02 F1 | 	add	local04, objptr
09284     12 13 02 FB | 	rdlong	arg01, local04
09288     84 01 00 FF 
0928c     E2 14 06 F6 | 	mov	arg02, ##@LR__5426
09290     35 00 00 FF 
09294     0C E4 85 F1 | 	sub	objptr, ##27148
09298     A8 77 B1 FD | 	call	#__system___string_cmp
0929c     00 FA 0D F2 | 	cmp	result1, #0 wz
092a0     10 00 90 AD |  if_e	jmp	#LR__0833
092a4     21 12 06 F6 | 	mov	arg01, #33
092a8     74 E8 BF FD | 	call	#_compile_error
092ac     21 FA 05 F6 | 	mov	result1, #33
092b0     14 02 90 FD | 	jmp	#LR__0837
092b4                 | LR__0833
092b4     37 00 00 FF 
092b8     44 E4 05 F1 | 	add	objptr, ##28228
092bc     F2 24 02 FB | 	rdlong	local04, objptr
092c0     01 24 06 F1 | 	add	local04, #1
092c4     F2 24 62 FC | 	wrlong	local04, objptr
092c8     37 00 00 FF 
092cc     44 E4 85 F1 | 	sub	objptr, ##28228
092d0     38 10 B0 FD | 	call	#_expr
092d4                 | ' ct+=1
092d4                 | ' expr()  ' there is "to" value pushed on the stack
092d4                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
092d4     37 00 00 FF 
092d8     44 E4 05 F1 | 	add	objptr, ##28228
092dc     F2 24 02 FB | 	rdlong	local04, objptr
092e0     03 24 66 F0 | 	shl	local04, #3
092e4     02 00 00 FF 
092e8     38 E4 85 F1 | 	sub	objptr, ##1080
092ec     F2 24 02 F1 | 	add	local04, objptr
092f0     12 13 02 FB | 	rdlong	arg01, local04
092f4     84 01 00 FF 
092f8     E5 14 06 F6 | 	mov	arg02, ##@LR__5427
092fc     35 00 00 FF 
09300     0C E4 85 F1 | 	sub	objptr, ##27148
09304     3C 77 B1 FD | 	call	#__system___string_cmp
09308     00 FA 0D F2 | 	cmp	result1, #0 wz
0930c     3C 00 90 AD |  if_e	jmp	#LR__0834
09310     37 00 00 FF 
09314     44 E4 05 F1 | 	add	objptr, ##28228
09318     F2 28 02 FB | 	rdlong	local06, objptr
0931c     03 28 66 F0 | 	shl	local06, #3
09320     02 00 00 FF 
09324     38 E4 85 F1 | 	sub	objptr, ##1080
09328     F2 28 02 F1 | 	add	local06, objptr
0932c     14 13 02 FB | 	rdlong	arg01, local06
09330     84 01 00 FF 
09334     EA 14 06 F6 | 	mov	arg02, ##@LR__5428
09338     35 00 00 FF 
0933c     0C E4 85 F1 | 	sub	objptr, ##27148
09340     00 77 B1 FD | 	call	#__system___string_cmp
09344     00 FA 0D F2 | 	cmp	result1, #0 wz
09348     24 00 90 5D |  if_ne	jmp	#LR__0835
0934c                 | LR__0834
0934c     37 00 00 FF 
09350     44 E4 05 F1 | 	add	objptr, ##28228
09354     F2 28 02 FB | 	rdlong	local06, objptr
09358     01 28 06 F1 | 	add	local06, #1
0935c     F2 28 62 FC | 	wrlong	local06, objptr
09360     37 00 00 FF 
09364     44 E4 85 F1 | 	sub	objptr, ##28228
09368     A0 0F B0 FD | 	call	#_expr
0936c     78 00 90 FD | 	jmp	#LR__0836
09370                 | LR__0835
09370     4A 00 00 FF 
09374     7C E4 05 F1 | 	add	objptr, ##38012
09378     F2 28 02 FB | 	rdlong	local06, objptr
0937c     14 27 02 F6 | 	mov	local05, local06
09380     01 26 66 F0 | 	shl	local05, #1
09384     14 27 02 F1 | 	add	local05, local06
09388     02 26 66 F0 | 	shl	local05, #2
0938c     03 00 00 FF 
09390     00 E4 85 F1 | 	sub	objptr, ##1536
09394     F2 26 02 F1 | 	add	local05, objptr
09398     08 26 06 F1 | 	add	local05, #8
0939c     13 39 68 FC | 	wrlong	#28, local05
093a0     03 00 00 FF 
093a4     00 E4 05 F1 | 	add	objptr, ##1536
093a8     F2 28 02 FB | 	rdlong	local06, objptr
093ac     14 27 02 F6 | 	mov	local05, local06
093b0     01 26 66 F0 | 	shl	local05, #1
093b4     14 27 02 F1 | 	add	local05, local06
093b8     02 26 66 F0 | 	shl	local05, #2
093bc     03 00 00 FF 
093c0     00 E4 85 F1 | 	sub	objptr, ##1536
093c4     F2 26 02 F1 | 	add	local05, objptr
093c8     13 03 68 FC | 	wrlong	#1, local05
093cc     03 00 00 FF 
093d0     00 E4 05 F1 | 	add	objptr, ##1536
093d4     F2 28 02 FB | 	rdlong	local06, objptr
093d8     01 28 06 F1 | 	add	local06, #1
093dc     F2 28 62 FC | 	wrlong	local06, objptr
093e0     4A 00 00 FF 
093e4     7C E4 85 F1 | 	sub	objptr, ##38012
093e8                 | LR__0836
093e8     4A 00 00 FF 
093ec     7C E4 05 F1 | 	add	objptr, ##38012
093f0     F2 28 02 FB | 	rdlong	local06, objptr
093f4     14 27 02 F6 | 	mov	local05, local06
093f8     01 26 66 F0 | 	shl	local05, #1
093fc     14 27 02 F1 | 	add	local05, local06
09400     02 26 66 F0 | 	shl	local05, #2
09404     03 00 00 FF 
09408     00 E4 85 F1 | 	sub	objptr, ##1536
0940c     F2 26 02 F1 | 	add	local05, objptr
09410     08 26 06 F1 | 	add	local05, #8
09414     13 39 68 FC | 	wrlong	#28, local05
09418     03 00 00 FF 
0941c     00 E4 05 F1 | 	add	objptr, ##1536
09420     F2 28 02 FB | 	rdlong	local06, objptr
09424     14 27 02 F6 | 	mov	local05, local06
09428     01 26 66 F0 | 	shl	local05, #1
0942c     14 27 02 F1 | 	add	local05, local06
09430     02 26 66 F0 | 	shl	local05, #2
09434     03 00 00 FF 
09438     00 E4 85 F1 | 	sub	objptr, ##1536
0943c     F2 26 02 F1 | 	add	local05, objptr
09440     13 2B 62 FC | 	wrlong	local07, local05
09444     03 00 00 FF 
09448     00 E4 05 F1 | 	add	objptr, ##1536
0944c     F2 2A 02 FB | 	rdlong	local07, objptr
09450     01 2A 06 F1 | 	add	local07, #1
09454     F2 2A 62 FC | 	wrlong	local07, objptr
09458     15 29 02 F6 | 	mov	local06, local07
0945c     01 28 66 F0 | 	shl	local06, #1
09460     15 29 02 F1 | 	add	local06, local07
09464     02 28 66 F0 | 	shl	local06, #2
09468     03 00 00 FF 
0946c     00 E4 85 F1 | 	sub	objptr, ##1536
09470     F2 28 02 F1 | 	add	local06, objptr
09474     08 28 06 F1 | 	add	local06, #8
09478     14 95 68 FC | 	wrlong	#74, local06
0947c     03 00 00 FF 
09480     00 E4 05 F1 | 	add	objptr, ##1536
09484     F2 2A 02 FB | 	rdlong	local07, objptr
09488     15 29 02 F6 | 	mov	local06, local07
0948c     01 28 66 F0 | 	shl	local06, #1
09490     15 29 02 F1 | 	add	local06, local07
09494     02 28 66 F0 | 	shl	local06, #2
09498     03 00 00 FF 
0949c     00 E4 85 F1 | 	sub	objptr, ##1536
094a0     F2 28 02 F1 | 	add	local06, objptr
094a4     14 01 68 FC | 	wrlong	#0, local06
094a8     03 00 00 FF 
094ac     00 E4 05 F1 | 	add	objptr, ##1536
094b0     F2 2A 02 FB | 	rdlong	local07, objptr
094b4     01 2A 06 F1 | 	add	local07, #1
094b8     F2 2A 62 FC | 	wrlong	local07, objptr
094bc     4A 00 00 FF 
094c0     7C E4 85 F1 | 	sub	objptr, ##38012
094c4                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
094c4                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
094c4                 | ' 
094c4                 | ' 
094c4                 | ' return 0
094c4     00 FA 05 F6 | 	mov	result1, #0
094c8                 | LR__0837
094c8     A7 F0 03 F6 | 	mov	ptra, fp
094cc     B2 00 A0 FD | 	call	#popregs_
094d0                 | _compile_for_ret
094d0     2D 00 64 FD | 	ret
094d4                 | 
094d4                 | ' 
094d4                 | ' 
094d4                 | ' sub do_gosub()
094d4                 | _do_gosub
094d4     50 00 00 FF 
094d8     08 E5 05 F1 | 	add	objptr, ##41224
094dc     F2 00 02 FB | 	rdlong	_var01, objptr
094e0     01 00 06 F1 | 	add	_var01, #1
094e4     F2 00 62 FC | 	wrlong	_var01, objptr
094e8                 | ' gosubtop+=1
094e8                 | ' if compiledline(lineptr_e+1).result_type=token_end then
094e8     06 00 00 FF 
094ec     88 E4 85 F1 | 	sub	objptr, ##3208
094f0     F2 00 02 FB | 	rdlong	_var01, objptr
094f4     01 00 06 F1 | 	add	_var01, #1
094f8     00 03 02 F6 | 	mov	_var02, _var01
094fc     01 02 66 F0 | 	shl	_var02, #1
09500     00 03 02 F1 | 	add	_var02, _var01
09504     02 02 66 F0 | 	shl	_var02, #2
09508     03 00 00 FF 
0950c     04 E4 85 F1 | 	sub	objptr, ##1540
09510     F2 02 02 F1 | 	add	_var02, objptr
09514     08 02 06 F1 | 	add	_var02, #8
09518     01 03 02 FB | 	rdlong	_var02, _var02
0951c     FE 03 0E F2 | 	cmp	_var02, #510 wz
09520     47 00 00 FF 
09524     7C E4 85 F1 | 	sub	objptr, ##36476
09528     58 00 90 5D |  if_ne	jmp	#LR__0840
0952c     50 00 00 FF 
09530     08 E5 05 F1 | 	add	objptr, ##41224
09534     F2 02 02 FB | 	rdlong	_var02, objptr
09538     03 02 66 F0 | 	shl	_var02, #3
0953c     03 00 00 FF 
09540     60 E5 85 F1 | 	sub	objptr, ##1888
09544     F2 02 02 F1 | 	add	_var02, objptr
09548     03 00 00 FF 
0954c     0C E5 05 F1 | 	add	objptr, ##1804
09550     F2 00 02 FB | 	rdlong	_var01, objptr
09554     01 01 62 FC | 	wrlong	_var01, _var02
09558     54 E4 05 F1 | 	add	objptr, #84
0955c     F2 02 02 FB | 	rdlong	_var02, objptr
09560     03 02 66 F0 | 	shl	_var02, #3
09564     03 00 00 FF 
09568     60 E5 85 F1 | 	sub	objptr, ##1888
0956c     F2 02 02 F1 | 	add	_var02, objptr
09570     04 02 06 F1 | 	add	_var02, #4
09574     01 01 68 FC | 	wrlong	#0, _var02
09578     4C 00 00 FF 
0957c     A8 E5 85 F1 | 	sub	objptr, ##39336
09580     64 00 90 FD | 	jmp	#LR__0841
09584                 | LR__0840
09584     50 00 00 FF 
09588     08 E5 05 F1 | 	add	objptr, ##41224
0958c     F2 02 02 FB | 	rdlong	_var02, objptr
09590     03 02 66 F0 | 	shl	_var02, #3
09594     03 00 00 FF 
09598     60 E5 85 F1 | 	sub	objptr, ##1888
0959c     F2 02 02 F1 | 	add	_var02, objptr
095a0     03 00 00 FF 
095a4     14 E5 05 F1 | 	add	objptr, ##1812
095a8     F2 00 02 FB | 	rdlong	_var01, objptr
095ac     01 01 62 FC | 	wrlong	_var01, _var02
095b0     4C E4 05 F1 | 	add	objptr, #76
095b4     F2 02 02 FB | 	rdlong	_var02, objptr
095b8     03 02 66 F0 | 	shl	_var02, #3
095bc     03 00 00 FF 
095c0     60 E5 85 F1 | 	sub	objptr, ##1888
095c4     F2 02 02 F1 | 	add	_var02, objptr
095c8     02 00 00 FF 
095cc     28 E5 85 F1 | 	sub	objptr, ##1320
095d0     F2 00 02 FB | 	rdlong	_var01, objptr
095d4     4A 00 00 FF 
095d8     80 E4 85 F1 | 	sub	objptr, ##38016
095dc     02 00 06 F1 | 	add	_var01, #2
095e0     04 02 06 F1 | 	add	_var02, #4
095e4     01 01 62 FC | 	wrlong	_var01, _var02
095e8                 | LR__0841
095e8                 | _do_gosub_ret
095e8     2D 00 64 FD | 	ret
095ec                 | 
095ec                 | ' 
095ec                 | ' 
095ec                 | ' sub do_for()
095ec                 | _do_for
095ec     01 4A 05 F6 | 	mov	COUNT_, #1
095f0     A8 00 A0 FD | 	call	#pushregs_
095f4     10 F0 07 F1 | 	add	ptra, #16
095f8     50 00 00 FF 
095fc     04 E5 05 F1 | 	add	objptr, ##41220
09600     F2 12 02 FB | 	rdlong	arg01, objptr
09604     01 12 06 F1 | 	add	arg01, #1
09608     F2 12 62 FC | 	wrlong	arg01, objptr
0960c     50 00 00 FF 
09610     04 E5 85 F1 | 	sub	objptr, ##41220
09614     40 24 B0 FD | 	call	#_pop
09618     A7 FA 61 FC | 	wrlong	result1, fp
0961c     04 4E 05 F1 | 	add	fp, #4
09620     A7 FC 61 FC | 	wrlong	result2, fp
09624     04 4E 05 F1 | 	add	fp, #4
09628     A7 FE 61 FC | 	wrlong	result3, fp
0962c     08 4E 85 F1 | 	sub	fp, #8
09630     50 00 00 FF 
09634     04 E5 05 F1 | 	add	objptr, ##41220
09638     F2 12 02 FB | 	rdlong	arg01, objptr
0963c     09 1F 02 F6 | 	mov	local01, arg01
09640     02 1E 66 F0 | 	shl	local01, #2
09644     09 1F 02 F1 | 	add	local01, arg01
09648     02 1E 66 F0 | 	shl	local01, #2
0964c     06 00 00 FF 
09650     70 E4 85 F1 | 	sub	objptr, ##3184
09654     F2 1E 02 F1 | 	add	local01, objptr
09658     A7 12 02 FB | 	rdlong	arg01, fp
0965c     08 1E 06 F1 | 	add	local01, #8
09660     0F 13 62 FC | 	wrlong	arg01, local01
09664     4A 00 00 FF 
09668     94 E4 85 F1 | 	sub	objptr, ##38036
0966c     E8 23 B0 FD | 	call	#_pop
09670     A7 FA 61 FC | 	wrlong	result1, fp
09674     04 4E 05 F1 | 	add	fp, #4
09678     A7 FC 61 FC | 	wrlong	result2, fp
0967c     04 4E 05 F1 | 	add	fp, #4
09680     A7 FE 61 FC | 	wrlong	result3, fp
09684     08 4E 85 F1 | 	sub	fp, #8
09688     50 00 00 FF 
0968c     04 E5 05 F1 | 	add	objptr, ##41220
09690     F2 12 02 FB | 	rdlong	arg01, objptr
09694     09 1F 02 F6 | 	mov	local01, arg01
09698     02 1E 66 F0 | 	shl	local01, #2
0969c     09 1F 02 F1 | 	add	local01, arg01
096a0     02 1E 66 F0 | 	shl	local01, #2
096a4     06 00 00 FF 
096a8     70 E4 85 F1 | 	sub	objptr, ##3184
096ac     F2 1E 02 F1 | 	add	local01, objptr
096b0     A7 12 02 F6 | 	mov	arg01, fp
096b4     4A 00 00 FF 
096b8     94 E4 85 F1 | 	sub	objptr, ##38036
096bc     68 C4 B0 FD | 	call	#_converttoint
096c0     FD 12 02 F6 | 	mov	arg01, result1
096c4     0C 1E 06 F1 | 	add	local01, #12
096c8     0F 13 62 FC | 	wrlong	arg01, local01
096cc     88 23 B0 FD | 	call	#_pop
096d0     A7 FA 61 FC | 	wrlong	result1, fp
096d4     04 4E 05 F1 | 	add	fp, #4
096d8     A7 FC 61 FC | 	wrlong	result2, fp
096dc     04 4E 05 F1 | 	add	fp, #4
096e0     A7 FE 61 FC | 	wrlong	result3, fp
096e4     08 4E 85 F1 | 	sub	fp, #8
096e8     50 00 00 FF 
096ec     04 E5 05 F1 | 	add	objptr, ##41220
096f0     F2 12 02 FB | 	rdlong	arg01, objptr
096f4     09 1F 02 F6 | 	mov	local01, arg01
096f8     02 1E 66 F0 | 	shl	local01, #2
096fc     09 1F 02 F1 | 	add	local01, arg01
09700     02 1E 66 F0 | 	shl	local01, #2
09704     06 00 00 FF 
09708     70 E4 85 F1 | 	sub	objptr, ##3184
0970c     F2 1E 02 F1 | 	add	local01, objptr
09710     A7 12 02 F6 | 	mov	arg01, fp
09714     4A 00 00 FF 
09718     94 E4 85 F1 | 	sub	objptr, ##38036
0971c     08 C4 B0 FD | 	call	#_converttoint
09720     10 1E 06 F1 | 	add	local01, #16
09724     0F FB 61 FC | 	wrlong	result1, local01
09728                 | ' fortop+=1
09728                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
09728                 | ' 'if i> maxfor then printerror(36) : return
09728                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
09728                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
09728                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
09728                 | ' if compiledline(lineptr_e).result_type=token_end then
09728     4A 00 00 FF 
0972c     80 E4 05 F1 | 	add	objptr, ##38016
09730     F2 12 02 FB | 	rdlong	arg01, objptr
09734     09 1F 02 F6 | 	mov	local01, arg01
09738     01 1E 66 F0 | 	shl	local01, #1
0973c     09 1F 02 F1 | 	add	local01, arg01
09740     02 1E 66 F0 | 	shl	local01, #2
09744     03 00 00 FF 
09748     04 E4 85 F1 | 	sub	objptr, ##1540
0974c     F2 1E 02 F1 | 	add	local01, objptr
09750     08 1E 06 F1 | 	add	local01, #8
09754     0F 1F 02 FB | 	rdlong	local01, local01
09758     FE 1F 0E F2 | 	cmp	local01, #510 wz
0975c     47 00 00 FF 
09760     7C E4 85 F1 | 	sub	objptr, ##36476
09764     70 00 90 5D |  if_ne	jmp	#LR__0850
09768     50 00 00 FF 
0976c     04 E5 05 F1 | 	add	objptr, ##41220
09770     F2 12 02 FB | 	rdlong	arg01, objptr
09774     09 1F 02 F6 | 	mov	local01, arg01
09778     02 1E 66 F0 | 	shl	local01, #2
0977c     09 1F 02 F1 | 	add	local01, arg01
09780     02 1E 66 F0 | 	shl	local01, #2
09784     06 00 00 FF 
09788     70 E4 85 F1 | 	sub	objptr, ##3184
0978c     F2 1E 02 F1 | 	add	local01, objptr
09790     06 00 00 FF 
09794     20 E4 05 F1 | 	add	objptr, ##3104
09798     F2 12 02 FB | 	rdlong	arg01, objptr
0979c     0F 13 62 FC | 	wrlong	arg01, local01
097a0     50 E4 05 F1 | 	add	objptr, #80
097a4     F2 12 02 FB | 	rdlong	arg01, objptr
097a8     09 1F 02 F6 | 	mov	local01, arg01
097ac     02 1E 66 F0 | 	shl	local01, #2
097b0     09 1F 02 F1 | 	add	local01, arg01
097b4     02 1E 66 F0 | 	shl	local01, #2
097b8     06 00 00 FF 
097bc     70 E4 85 F1 | 	sub	objptr, ##3184
097c0     F2 1E 02 F1 | 	add	local01, objptr
097c4     04 1E 06 F1 | 	add	local01, #4
097c8     0F 01 68 FC | 	wrlong	#0, local01
097cc     4A 00 00 FF 
097d0     94 E4 85 F1 | 	sub	objptr, ##38036
097d4     78 00 90 FD | 	jmp	#LR__0851
097d8                 | LR__0850
097d8     50 00 00 FF 
097dc     04 E5 05 F1 | 	add	objptr, ##41220
097e0     F2 12 02 FB | 	rdlong	arg01, objptr
097e4     09 1F 02 F6 | 	mov	local01, arg01
097e8     02 1E 66 F0 | 	shl	local01, #2
097ec     09 1F 02 F1 | 	add	local01, arg01
097f0     02 1E 66 F0 | 	shl	local01, #2
097f4     06 00 00 FF 
097f8     70 E4 85 F1 | 	sub	objptr, ##3184
097fc     F2 1E 02 F1 | 	add	local01, objptr
09800     06 00 00 FF 
09804     28 E4 05 F1 | 	add	objptr, ##3112
09808     F2 12 02 FB | 	rdlong	arg01, objptr
0980c     0F 13 62 FC | 	wrlong	arg01, local01
09810     48 E4 05 F1 | 	add	objptr, #72
09814     F2 12 02 FB | 	rdlong	arg01, objptr
09818     09 1F 02 F6 | 	mov	local01, arg01
0981c     02 1E 66 F0 | 	shl	local01, #2
09820     09 1F 02 F1 | 	add	local01, arg01
09824     02 1E 66 F0 | 	shl	local01, #2
09828     06 00 00 FF 
0982c     70 E4 85 F1 | 	sub	objptr, ##3184
09830     F2 1E 02 F1 | 	add	local01, objptr
09834     14 E4 85 F1 | 	sub	objptr, #20
09838     F2 12 02 FB | 	rdlong	arg01, objptr
0983c     4A 00 00 FF 
09840     80 E4 85 F1 | 	sub	objptr, ##38016
09844     01 12 06 F1 | 	add	arg01, #1
09848     04 1E 06 F1 | 	add	local01, #4
0984c     0F 13 62 FC | 	wrlong	arg01, local01
09850                 | LR__0851
09850     A7 F0 03 F6 | 	mov	ptra, fp
09854     B2 00 A0 FD | 	call	#popregs_
09858                 | _do_for_ret
09858     2D 00 64 FD | 	ret
0985c                 | 
0985c                 | ' 
0985c                 | ' ' now do_next todo
0985c                 | ' 
0985c                 | ' sub do_return()
0985c                 | _do_return
0985c                 | ' if gosubtop>0 then
0985c     50 00 00 FF 
09860     08 E5 05 F1 | 	add	objptr, ##41224
09864     F2 00 02 FB | 	rdlong	_var01, objptr
09868     50 00 00 FF 
0986c     08 E5 85 F1 | 	sub	objptr, ##41224
09870     01 00 56 F2 | 	cmps	_var01, #1 wc
09874     8C 00 90 CD |  if_b	jmp	#LR__0860
09878     50 00 00 FF 
0987c     08 E5 05 F1 | 	add	objptr, ##41224
09880     F2 00 02 FB | 	rdlong	_var01, objptr
09884     03 00 66 F0 | 	shl	_var01, #3
09888     03 00 00 FF 
0988c     60 E5 85 F1 | 	sub	objptr, ##1888
09890     F2 00 02 F1 | 	add	_var01, objptr
09894     00 01 02 FB | 	rdlong	_var01, _var01
09898     03 00 00 FF 
0989c     0C E5 05 F1 | 	add	objptr, ##1804
098a0     F2 00 62 FC | 	wrlong	_var01, objptr
098a4     54 E4 05 F1 | 	add	objptr, #84
098a8     F2 00 02 FB | 	rdlong	_var01, objptr
098ac     03 00 66 F0 | 	shl	_var01, #3
098b0     03 00 00 FF 
098b4     60 E5 85 F1 | 	sub	objptr, ##1888
098b8     F2 00 02 F1 | 	add	_var01, objptr
098bc     04 00 06 F1 | 	add	_var01, #4
098c0     00 01 02 FB | 	rdlong	_var01, _var01
098c4     03 00 00 FF 
098c8     10 E5 05 F1 | 	add	objptr, ##1808
098cc     F2 00 62 FC | 	wrlong	_var01, objptr
098d0     06 00 00 FF 
098d4     3C E4 85 F1 | 	sub	objptr, ##3132
098d8     F2 00 02 FB | 	rdlong	_var01, objptr
098dc     01 00 86 F1 | 	sub	_var01, #1
098e0     04 E4 05 F1 | 	add	objptr, #4
098e4     F2 00 62 FC | 	wrlong	_var01, objptr
098e8     06 00 00 FF 
098ec     88 E4 05 F1 | 	add	objptr, ##3208
098f0     F2 00 02 FB | 	rdlong	_var01, objptr
098f4     01 00 86 F1 | 	sub	_var01, #1
098f8     F2 00 62 FC | 	wrlong	_var01, objptr
098fc     50 00 00 FF 
09900     08 E5 85 F1 | 	sub	objptr, ##41224
09904                 | LR__0860
09904                 | _do_return_ret
09904     2D 00 64 FD | 	ret
09908                 | 
09908                 | ' 
09908                 | ' sub do_pop()
09908                 | _do_pop
09908                 | ' if gosubtop>0 then  gosubtop -=1 
09908     50 00 00 FF 
0990c     08 E5 05 F1 | 	add	objptr, ##41224
09910     F2 00 02 FB | 	rdlong	_var01, objptr
09914     50 00 00 FF 
09918     08 E5 85 F1 | 	sub	objptr, ##41224
0991c     01 00 56 F2 | 	cmps	_var01, #1 wc
09920     50 00 00 3F 
09924     08 E5 05 31 |  if_ae	add	objptr, ##41224
09928     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
0992c     01 00 86 31 |  if_ae	sub	_var01, #1
09930     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
09934     50 00 00 3F 
09938     08 E5 85 31 |  if_ae	sub	objptr, ##41224
0993c                 | _do_pop_ret
0993c     2D 00 64 FD | 	ret
09940                 | 
09940                 | ' 
09940                 | ' sub do_next()
09940                 | _do_next
09940     04 4A 05 F6 | 	mov	COUNT_, #4
09944     A8 00 A0 FD | 	call	#pushregs_
09948     0C 21 B0 FD | 	call	#_pop
0994c     FD 1E 02 F6 | 	mov	local01, result1
09950     FE 20 02 F6 | 	mov	local02, result2
09954     FF 22 02 F6 | 	mov	local03, result3
09958                 | ' 
09958                 | ' t1=pop() :varnum=t1.result.uresult
09958                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
09958     50 00 00 FF 
0995c     04 E5 05 F1 | 	add	objptr, ##41220
09960     F2 12 02 FB | 	rdlong	arg01, objptr
09964     09 15 02 F6 | 	mov	arg02, arg01
09968     02 14 66 F0 | 	shl	arg02, #2
0996c     09 15 02 F1 | 	add	arg02, arg01
09970     02 14 66 F0 | 	shl	arg02, #2
09974     06 00 00 FF 
09978     70 E4 85 F1 | 	sub	objptr, ##3184
0997c     F2 14 02 F1 | 	add	arg02, objptr
09980     08 14 06 F1 | 	add	arg02, #8
09984     0A 15 02 FB | 	rdlong	arg02, arg02
09988     0F 15 0A F2 | 	cmp	arg02, local01 wz
0998c     4A 00 00 FF 
09990     94 E4 85 F1 | 	sub	objptr, ##38036
09994     0C 00 90 AD |  if_e	jmp	#LR__0870
09998     25 12 06 F6 | 	mov	arg01, #37
0999c     E4 3A B1 FD | 	call	#_printerror
099a0     54 03 90 FD | 	jmp	#LR__0877
099a4                 | LR__0870
099a4                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
099a4     0F 15 02 F6 | 	mov	arg02, local01
099a8     04 14 66 F0 | 	shl	arg02, #4
099ac     14 00 00 FF 
099b0     F8 E5 05 F1 | 	add	objptr, ##10744
099b4     F2 14 02 F1 | 	add	arg02, objptr
099b8     0C 14 06 F1 | 	add	arg02, #12
099bc     0A 15 02 FB | 	rdlong	arg02, arg02
099c0     1E 14 0E F2 | 	cmp	arg02, #30 wz
099c4     14 00 00 FF 
099c8     F8 E5 85 F1 | 	sub	objptr, ##10744
099cc     54 00 90 5D |  if_ne	jmp	#LR__0871
099d0     0F 15 02 F6 | 	mov	arg02, local01
099d4     04 14 66 F0 | 	shl	arg02, #4
099d8     14 00 00 FF 
099dc     F8 E5 05 F1 | 	add	objptr, ##10744
099e0     F2 14 02 F1 | 	add	arg02, objptr
099e4     0C 14 06 F1 | 	add	arg02, #12
099e8     0A 39 68 FC | 	wrlong	#28, arg02
099ec     0F 25 02 F6 | 	mov	local04, local01
099f0     04 24 66 F0 | 	shl	local04, #4
099f4     F2 24 02 F1 | 	add	local04, objptr
099f8     0F 13 02 F6 | 	mov	arg01, local01
099fc     04 12 66 F0 | 	shl	arg01, #4
09a00     F2 12 02 F1 | 	add	arg01, objptr
09a04     04 12 06 F1 | 	add	arg01, #4
09a08     09 13 02 FB | 	rdlong	arg01, arg01
09a0c     14 00 00 FF 
09a10     F8 E5 85 F1 | 	sub	objptr, ##10744
09a14     01 14 06 F6 | 	mov	arg02, #1
09a18     7C A0 B1 FD | 	call	#__system___float_tointeger
09a1c     04 24 06 F1 | 	add	local04, #4
09a20     12 FB 61 FC | 	wrlong	result1, local04
09a24                 | LR__0871
09a24     50 00 00 FF 
09a28     04 E5 05 F1 | 	add	objptr, ##41220
09a2c     F2 12 02 FB | 	rdlong	arg01, objptr
09a30     09 25 02 F6 | 	mov	local04, arg01
09a34     02 24 66 F0 | 	shl	local04, #2
09a38     09 25 02 F1 | 	add	local04, arg01
09a3c     02 24 66 F0 | 	shl	local04, #2
09a40     06 00 00 FF 
09a44     70 E4 85 F1 | 	sub	objptr, ##3184
09a48     F2 24 02 F1 | 	add	local04, objptr
09a4c     0C 24 06 F1 | 	add	local04, #12
09a50     12 25 02 FB | 	rdlong	local04, local04
09a54     0F 13 02 F6 | 	mov	arg01, local01
09a58     04 12 66 F0 | 	shl	arg01, #4
09a5c     35 00 00 FF 
09a60     9C E4 85 F1 | 	sub	objptr, ##27292
09a64     F2 12 02 F1 | 	add	arg01, objptr
09a68     0F FF 01 F6 | 	mov	result3, local01
09a6c     04 FE 65 F0 | 	shl	result3, #4
09a70     F2 FE 01 F1 | 	add	result3, objptr
09a74     04 FE 05 F1 | 	add	result3, #4
09a78     FF FE 01 FB | 	rdlong	result3, result3
09a7c     12 FF 01 F1 | 	add	result3, local04
09a80     04 12 06 F1 | 	add	arg01, #4
09a84     09 FF 61 FC | 	wrlong	result3, arg01
09a88                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
09a88                 | ' if fortable(fortop).stepval>=0 then
09a88     3B 00 00 FF 
09a8c     0C E5 05 F1 | 	add	objptr, ##30476
09a90     F2 12 02 FB | 	rdlong	arg01, objptr
09a94     09 25 02 F6 | 	mov	local04, arg01
09a98     02 24 66 F0 | 	shl	local04, #2
09a9c     09 25 02 F1 | 	add	local04, arg01
09aa0     02 24 66 F0 | 	shl	local04, #2
09aa4     06 00 00 FF 
09aa8     70 E4 85 F1 | 	sub	objptr, ##3184
09aac     F2 24 02 F1 | 	add	local04, objptr
09ab0     0C 24 06 F1 | 	add	local04, #12
09ab4     12 25 02 FB | 	rdlong	local04, local04
09ab8     00 24 56 F2 | 	cmps	local04, #0 wc
09abc     4A 00 00 FF 
09ac0     94 E4 85 F1 | 	sub	objptr, ##38036
09ac4     78 00 90 CD |  if_b	jmp	#LR__0872
09ac8                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
09ac8     04 1E 66 F0 | 	shl	local01, #4
09acc     14 00 00 FF 
09ad0     F8 E5 05 F1 | 	add	objptr, ##10744
09ad4     F2 1E 02 F1 | 	add	local01, objptr
09ad8     3B 00 00 FF 
09adc     0C E5 05 F1 | 	add	objptr, ##30476
09ae0     F2 24 02 FB | 	rdlong	local04, objptr
09ae4     12 13 02 F6 | 	mov	arg01, local04
09ae8     02 12 66 F0 | 	shl	arg01, #2
09aec     12 13 02 F1 | 	add	arg01, local04
09af0     02 12 66 F0 | 	shl	arg01, #2
09af4     06 00 00 FF 
09af8     70 E4 85 F1 | 	sub	objptr, ##3184
09afc     F2 12 02 F1 | 	add	arg01, objptr
09b00     04 1E 06 F1 | 	add	local01, #4
09b04     0F 25 02 FB | 	rdlong	local04, local01
09b08     10 12 06 F1 | 	add	arg01, #16
09b0c     09 13 02 FB | 	rdlong	arg01, arg01
09b10     09 25 5A F2 | 	cmps	local04, arg01 wcz
09b14     4A 00 00 FF 
09b18     94 E4 85 F1 | 	sub	objptr, ##38036
09b1c     9C 00 90 ED |  if_be	jmp	#LR__0874
09b20     50 00 00 FF 
09b24     04 E5 05 F1 | 	add	objptr, ##41220
09b28     F2 24 02 FB | 	rdlong	local04, objptr
09b2c     01 24 86 F1 | 	sub	local04, #1
09b30     F2 24 62 FC | 	wrlong	local04, objptr
09b34     50 00 00 FF 
09b38     04 E5 85 F1 | 	sub	objptr, ##41220
09b3c     B8 01 90 FD | 	jmp	#LR__0877
09b40                 | LR__0872
09b40                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
09b40     0F 13 02 F6 | 	mov	arg01, local01
09b44     04 12 66 F0 | 	shl	arg01, #4
09b48     14 00 00 FF 
09b4c     F8 E5 05 F1 | 	add	objptr, ##10744
09b50     F2 12 02 F1 | 	add	arg01, objptr
09b54     3B 00 00 FF 
09b58     0C E5 05 F1 | 	add	objptr, ##30476
09b5c     F2 24 02 FB | 	rdlong	local04, objptr
09b60     12 1F 02 F6 | 	mov	local01, local04
09b64     02 1E 66 F0 | 	shl	local01, #2
09b68     12 1F 02 F1 | 	add	local01, local04
09b6c     02 1E 66 F0 | 	shl	local01, #2
09b70     06 00 00 FF 
09b74     70 E4 85 F1 | 	sub	objptr, ##3184
09b78     F2 1E 02 F1 | 	add	local01, objptr
09b7c     04 12 06 F1 | 	add	arg01, #4
09b80     09 13 02 FB | 	rdlong	arg01, arg01
09b84     10 1E 06 F1 | 	add	local01, #16
09b88     0F 1F 02 FB | 	rdlong	local01, local01
09b8c     0F 13 52 F2 | 	cmps	arg01, local01 wc
09b90     4A 00 00 FF 
09b94     94 E4 85 F1 | 	sub	objptr, ##38036
09b98     20 00 90 3D |  if_ae	jmp	#LR__0873
09b9c     50 00 00 FF 
09ba0     04 E5 05 F1 | 	add	objptr, ##41220
09ba4     F2 24 02 FB | 	rdlong	local04, objptr
09ba8     01 24 86 F1 | 	sub	local04, #1
09bac     F2 24 62 FC | 	wrlong	local04, objptr
09bb0     50 00 00 FF 
09bb4     04 E5 85 F1 | 	sub	objptr, ##41220
09bb8     3C 01 90 FD | 	jmp	#LR__0877
09bbc                 | LR__0873
09bbc                 | LR__0874
09bbc                 | ' ' if not returned, goto pointer 
09bbc                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
09bbc     50 00 00 FF 
09bc0     E8 E4 05 F1 | 	add	objptr, ##41192
09bc4     F2 24 02 FB | 	rdlong	local04, objptr
09bc8     50 00 00 FF 
09bcc     E8 E4 85 F1 | 	sub	objptr, ##41192
09bd0     01 24 16 F2 | 	cmp	local04, #1 wc
09bd4     DC 00 90 CD |  if_b	jmp	#LR__0875
09bd8     50 00 00 FF 
09bdc     04 E5 05 F1 | 	add	objptr, ##41220
09be0     F2 1E 02 FB | 	rdlong	local01, objptr
09be4     0F 25 02 F6 | 	mov	local04, local01
09be8     02 24 66 F0 | 	shl	local04, #2
09bec     0F 25 02 F1 | 	add	local04, local01
09bf0     02 24 66 F0 | 	shl	local04, #2
09bf4     06 00 00 FF 
09bf8     70 E4 85 F1 | 	sub	objptr, ##3184
09bfc     F2 24 02 F1 | 	add	local04, objptr
09c00     06 00 00 FF 
09c04     20 E4 05 F1 | 	add	objptr, ##3104
09c08     F2 1E 02 FB | 	rdlong	local01, objptr
09c0c     50 00 00 FF 
09c10     B4 E4 85 F1 | 	sub	objptr, ##41140
09c14     12 25 02 FB | 	rdlong	local04, local04
09c18     12 1F 0A F2 | 	cmp	local01, local04 wz
09c1c     94 00 90 AD |  if_e	jmp	#LR__0875
09c20     50 00 00 FF 
09c24     04 E5 05 F1 | 	add	objptr, ##41220
09c28     F2 1E 02 FB | 	rdlong	local01, objptr
09c2c     0F 25 02 F6 | 	mov	local04, local01
09c30     02 24 66 F0 | 	shl	local04, #2
09c34     0F 25 02 F1 | 	add	local04, local01
09c38     02 24 66 F0 | 	shl	local04, #2
09c3c     06 00 00 FF 
09c40     70 E4 85 F1 | 	sub	objptr, ##3184
09c44     F2 24 02 F1 | 	add	local04, objptr
09c48     12 25 02 FB | 	rdlong	local04, local04
09c4c     06 00 00 FF 
09c50     20 E4 05 F1 | 	add	objptr, ##3104
09c54     F2 24 62 FC | 	wrlong	local04, objptr
09c58     50 E4 05 F1 | 	add	objptr, #80
09c5c     F2 1E 02 FB | 	rdlong	local01, objptr
09c60     0F 25 02 F6 | 	mov	local04, local01
09c64     02 24 66 F0 | 	shl	local04, #2
09c68     0F 25 02 F1 | 	add	local04, local01
09c6c     02 24 66 F0 | 	shl	local04, #2
09c70     06 00 00 FF 
09c74     70 E4 85 F1 | 	sub	objptr, ##3184
09c78     F2 24 02 F1 | 	add	local04, objptr
09c7c     04 24 06 F1 | 	add	local04, #4
09c80     12 25 02 FB | 	rdlong	local04, local04
09c84     06 00 00 FF 
09c88     24 E4 05 F1 | 	add	objptr, ##3108
09c8c     F2 24 62 FC | 	wrlong	local04, objptr
09c90     06 00 00 FF 
09c94     3C E4 85 F1 | 	sub	objptr, ##3132
09c98     F2 24 02 FB | 	rdlong	local04, objptr
09c9c     01 24 86 F1 | 	sub	local04, #1
09ca0     04 E4 05 F1 | 	add	objptr, #4
09ca4     F2 24 62 FC | 	wrlong	local04, objptr
09ca8     4A 00 00 FF 
09cac     80 E4 85 F1 | 	sub	objptr, ##38016
09cb0     44 00 90 FD | 	jmp	#LR__0876
09cb4                 | LR__0875
09cb4     50 00 00 FF 
09cb8     04 E5 05 F1 | 	add	objptr, ##41220
09cbc     F2 24 02 FB | 	rdlong	local04, objptr
09cc0     12 1F 02 F6 | 	mov	local01, local04
09cc4     02 1E 66 F0 | 	shl	local01, #2
09cc8     12 1F 02 F1 | 	add	local01, local04
09ccc     02 1E 66 F0 | 	shl	local01, #2
09cd0     06 00 00 FF 
09cd4     70 E4 85 F1 | 	sub	objptr, ##3184
09cd8     F2 1E 02 F1 | 	add	local01, objptr
09cdc     04 1E 06 F1 | 	add	local01, #4
09ce0     0F 1F 02 FB | 	rdlong	local01, local01
09ce4     01 1E 86 F1 | 	sub	local01, #1
09ce8     14 E4 85 F1 | 	sub	objptr, #20
09cec     F2 1E 62 FC | 	wrlong	local01, objptr
09cf0     4A 00 00 FF 
09cf4     80 E4 85 F1 | 	sub	objptr, ##38016
09cf8                 | LR__0876
09cf8                 | LR__0877
09cf8     A7 F0 03 F6 | 	mov	ptra, fp
09cfc     B2 00 A0 FD | 	call	#popregs_
09d00                 | _do_next_ret
09d00     2D 00 64 FD | 	ret
09d04                 | 
09d04                 | ' 
09d04                 | ' 
09d04                 | ' function compile_next() as ulong
09d04                 | _compile_next
09d04     04 4A 05 F6 | 	mov	COUNT_, #4
09d08     A8 00 A0 FD | 	call	#pushregs_
09d0c     37 00 00 FF 
09d10     44 E4 05 F1 | 	add	objptr, ##28228
09d14     F2 12 02 FB | 	rdlong	arg01, objptr
09d18     03 12 66 F0 | 	shl	arg01, #3
09d1c     02 00 00 FF 
09d20     38 E4 85 F1 | 	sub	objptr, ##1080
09d24     F2 12 02 F1 | 	add	arg01, objptr
09d28     09 1F 02 FB | 	rdlong	local01, arg01
09d2c                 | ' 
09d2c                 | ' varname$=lparts(ct).part$ 
09d2c                 | ' 'suffix$=right$(varname$,1)
09d2c                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
09d2c                 | ' if varnum=0 then compile_error(35)  : return 35
09d2c     04 E4 85 F1 | 	sub	objptr, #4
09d30     F2 14 0A FB | 	rdlong	arg02, objptr wz
09d34     35 00 00 FF 
09d38     08 E4 85 F1 | 	sub	objptr, ##27144
09d3c     10 00 90 5D |  if_ne	jmp	#LR__0880
09d40     23 12 06 F6 | 	mov	arg01, #35
09d44     D8 DD BF FD | 	call	#_compile_error
09d48     23 FA 05 F6 | 	mov	result1, #35
09d4c     58 01 90 FD | 	jmp	#LR__0884
09d50                 | LR__0880
09d50     01 20 66 F6 | 	neg	local02, #1
09d54                 | ' j=-1
09d54                 | ' for i=0 to varnum-1
09d54     00 22 06 F6 | 	mov	local03, #0
09d58     35 00 00 FF 
09d5c     08 E4 05 F1 | 	add	objptr, ##27144
09d60     F2 24 02 FB | 	rdlong	local04, objptr
09d64     35 00 00 FF 
09d68     08 E4 85 F1 | 	sub	objptr, ##27144
09d6c                 | LR__0881
09d6c     12 23 12 F2 | 	cmp	local03, local04 wc
09d70     38 00 90 3D |  if_ae	jmp	#LR__0882
09d74                 | '   if variables(i).name=varname$ then j=i : exit
09d74     11 15 02 F6 | 	mov	arg02, local03
09d78     04 14 66 F0 | 	shl	arg02, #4
09d7c     14 00 00 FF 
09d80     F8 E5 05 F1 | 	add	objptr, ##10744
09d84     F2 14 02 F1 | 	add	arg02, objptr
09d88     0A 13 02 FB | 	rdlong	arg01, arg02
09d8c     0F 15 02 F6 | 	mov	arg02, local01
09d90     14 00 00 FF 
09d94     F8 E5 85 F1 | 	sub	objptr, ##10744
09d98     A8 6C B1 FD | 	call	#__system___string_cmp
09d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
09da0     11 21 02 A6 |  if_e	mov	local02, local03
09da4     01 22 06 51 |  if_ne	add	local03, #1
09da8     C0 FF 9F 5D |  if_ne	jmp	#LR__0881
09dac                 | LR__0882
09dac                 | ' if j=-1 then compile_error(35) : return 35
09dac     FF FF 7F FF 
09db0     FF 21 0E F2 | 	cmp	local02, ##-1 wz
09db4     10 00 90 5D |  if_ne	jmp	#LR__0883
09db8     23 12 06 F6 | 	mov	arg01, #35
09dbc     60 DD BF FD | 	call	#_compile_error
09dc0     23 FA 05 F6 | 	mov	result1, #35
09dc4     E0 00 90 FD | 	jmp	#LR__0884
09dc8                 | LR__0883
09dc8     4A 00 00 FF 
09dcc     7C E4 05 F1 | 	add	objptr, ##38012
09dd0     F2 24 02 FB | 	rdlong	local04, objptr
09dd4     12 23 02 F6 | 	mov	local03, local04
09dd8     01 22 66 F0 | 	shl	local03, #1
09ddc     12 23 02 F1 | 	add	local03, local04
09de0     02 22 66 F0 | 	shl	local03, #2
09de4     03 00 00 FF 
09de8     00 E4 85 F1 | 	sub	objptr, ##1536
09dec     F2 22 02 F1 | 	add	local03, objptr
09df0     08 22 06 F1 | 	add	local03, #8
09df4     11 39 68 FC | 	wrlong	#28, local03
09df8     03 00 00 FF 
09dfc     00 E4 05 F1 | 	add	objptr, ##1536
09e00     F2 24 02 FB | 	rdlong	local04, objptr
09e04     12 23 02 F6 | 	mov	local03, local04
09e08     01 22 66 F0 | 	shl	local03, #1
09e0c     12 23 02 F1 | 	add	local03, local04
09e10     02 22 66 F0 | 	shl	local03, #2
09e14     03 00 00 FF 
09e18     00 E4 85 F1 | 	sub	objptr, ##1536
09e1c     F2 22 02 F1 | 	add	local03, objptr
09e20     11 21 62 FC | 	wrlong	local02, local03
09e24     03 00 00 FF 
09e28     00 E4 05 F1 | 	add	objptr, ##1536
09e2c     F2 24 02 FB | 	rdlong	local04, objptr
09e30     01 24 06 F1 | 	add	local04, #1
09e34     F2 24 62 FC | 	wrlong	local04, objptr
09e38     12 23 02 F6 | 	mov	local03, local04
09e3c     01 22 66 F0 | 	shl	local03, #1
09e40     12 23 02 F1 | 	add	local03, local04
09e44     02 22 66 F0 | 	shl	local03, #2
09e48     03 00 00 FF 
09e4c     00 E4 85 F1 | 	sub	objptr, ##1536
09e50     F2 22 02 F1 | 	add	local03, objptr
09e54     08 22 06 F1 | 	add	local03, #8
09e58     11 97 68 FC | 	wrlong	#75, local03
09e5c     03 00 00 FF 
09e60     00 E4 05 F1 | 	add	objptr, ##1536
09e64     F2 24 02 FB | 	rdlong	local04, objptr
09e68     12 23 02 F6 | 	mov	local03, local04
09e6c     01 22 66 F0 | 	shl	local03, #1
09e70     12 23 02 F1 | 	add	local03, local04
09e74     02 22 66 F0 | 	shl	local03, #2
09e78     03 00 00 FF 
09e7c     00 E4 85 F1 | 	sub	objptr, ##1536
09e80     F2 22 02 F1 | 	add	local03, objptr
09e84     11 01 68 FC | 	wrlong	#0, local03
09e88     03 00 00 FF 
09e8c     00 E4 05 F1 | 	add	objptr, ##1536
09e90     F2 24 02 FB | 	rdlong	local04, objptr
09e94     01 24 06 F1 | 	add	local04, #1
09e98     F2 24 62 FC | 	wrlong	local04, objptr
09e9c     4A 00 00 FF 
09ea0     7C E4 85 F1 | 	sub	objptr, ##38012
09ea4                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
09ea4                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
09ea4                 | ' return 0
09ea4     00 FA 05 F6 | 	mov	result1, #0
09ea8                 | LR__0884
09ea8     A7 F0 03 F6 | 	mov	ptra, fp
09eac     B2 00 A0 FD | 	call	#popregs_
09eb0                 | _compile_next_ret
09eb0     2D 00 64 FD | 	ret
09eb4                 | 
09eb4                 | ' 
09eb4                 | ' 
09eb4                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
09eb4                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
09eb4                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
09eb4                 | ' 
09eb4                 | ' function compile_gosub() as ulong
09eb4                 | _compile_gosub
09eb4     01 4A 05 F6 | 	mov	COUNT_, #1
09eb8     A8 00 A0 FD | 	call	#pushregs_
09ebc     4A 00 00 FF 
09ec0     7C E4 05 F1 | 	add	objptr, ##38012
09ec4     F2 1E 02 FB | 	rdlong	local01, objptr
09ec8     0F FB 01 F6 | 	mov	result1, local01
09ecc     01 FA 65 F0 | 	shl	result1, #1
09ed0     0F FB 01 F1 | 	add	result1, local01
09ed4     02 FA 65 F0 | 	shl	result1, #2
09ed8     03 00 00 FF 
09edc     00 E4 85 F1 | 	sub	objptr, ##1536
09ee0     F2 FA 01 F1 | 	add	result1, objptr
09ee4     08 FA 05 F1 | 	add	result1, #8
09ee8     FD 52 69 FC | 	wrlong	#169, result1
09eec     03 00 00 FF 
09ef0     00 E4 05 F1 | 	add	objptr, ##1536
09ef4     F2 1E 02 FB | 	rdlong	local01, objptr
09ef8     01 1E 06 F1 | 	add	local01, #1
09efc     F2 1E 62 FC | 	wrlong	local01, objptr
09f00     4A 00 00 FF 
09f04     7C E4 85 F1 | 	sub	objptr, ##38012
09f08     10 00 B0 FD | 	call	#_compile_goto
09f0c                 | ' 
09f0c                 | ' compiledline(lineptr).result_type=token_gosub
09f0c                 | ' lineptr+=1
09f0c                 | ' compile_goto()
09f0c                 | ' return 0
09f0c     00 FA 05 F6 | 	mov	result1, #0
09f10     A7 F0 03 F6 | 	mov	ptra, fp
09f14     B2 00 A0 FD | 	call	#popregs_
09f18                 | _compile_gosub_ret
09f18     2D 00 64 FD | 	ret
09f1c                 | 
09f1c                 | ' 
09f1c                 | ' function compile_goto( ) as ulong
09f1c                 | _compile_goto
09f1c     03 4A 05 F6 | 	mov	COUNT_, #3
09f20     A8 00 A0 FD | 	call	#pushregs_
09f24     34 F0 07 F1 | 	add	ptra, #52
09f28                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
09f28     37 00 00 FF 
09f2c     44 E4 05 F1 | 	add	objptr, ##28228
09f30     F2 16 02 FB | 	rdlong	arg03, objptr
09f34     03 16 66 F0 | 	shl	arg03, #3
09f38     02 00 00 FF 
09f3c     38 E4 85 F1 | 	sub	objptr, ##1080
09f40     F2 16 02 F1 | 	add	arg03, objptr
09f44     04 16 06 F1 | 	add	arg03, #4
09f48     0B 17 02 FB | 	rdlong	arg03, arg03
09f4c     01 00 00 FF 
09f50     00 16 0E F2 | 	cmp	arg03, ##512 wz
09f54     35 00 00 FF 
09f58     0C E4 85 F1 | 	sub	objptr, ##27148
09f5c     CC 02 90 5D |  if_ne	jmp	#LR__0895
09f60     37 00 00 FF 
09f64     44 E4 05 F1 | 	add	objptr, ##28228
09f68     F2 16 02 FB | 	rdlong	arg03, objptr
09f6c     01 16 06 F1 | 	add	arg03, #1
09f70     03 16 66 F0 | 	shl	arg03, #3
09f74     02 00 00 FF 
09f78     38 E4 85 F1 | 	sub	objptr, ##1080
09f7c     F2 16 02 F1 | 	add	arg03, objptr
09f80     04 16 06 F1 | 	add	arg03, #4
09f84     0B 17 02 FB | 	rdlong	arg03, arg03
09f88     FE 17 0E F2 | 	cmp	arg03, #510 wz
09f8c     35 00 00 FF 
09f90     0C E4 85 F1 | 	sub	objptr, ##27148
09f94     94 02 90 5D |  if_ne	jmp	#LR__0895
09f98     37 00 00 FF 
09f9c     44 E4 05 F1 | 	add	objptr, ##28228
09fa0     F2 16 02 FB | 	rdlong	arg03, objptr
09fa4     03 16 66 F0 | 	shl	arg03, #3
09fa8     02 00 00 FF 
09fac     38 E4 85 F1 | 	sub	objptr, ##1080
09fb0     F2 16 02 F1 | 	add	arg03, objptr
09fb4     0B 13 02 FB | 	rdlong	arg01, arg03
09fb8     00 14 06 F6 | 	mov	arg02, #0
09fbc     35 00 00 FF 
09fc0     0C E4 85 F1 | 	sub	objptr, ##27148
09fc4     80 9C B1 FD | 	call	#__system____builtin_atoi
09fc8     04 4E 05 F1 | 	add	fp, #4
09fcc     A7 FA 61 FC | 	wrlong	result1, fp
09fd0     4A 00 00 FF 
09fd4     7C E4 05 F1 | 	add	objptr, ##38012
09fd8     F2 1E 02 FB | 	rdlong	local01, objptr
09fdc     0F 21 02 F6 | 	mov	local02, local01
09fe0     01 20 66 F0 | 	shl	local02, #1
09fe4     0F 21 02 F1 | 	add	local02, local01
09fe8     02 20 66 F0 | 	shl	local02, #2
09fec     03 00 00 FF 
09ff0     00 E4 85 F1 | 	sub	objptr, ##1536
09ff4     F2 20 02 F1 | 	add	local02, objptr
09ff8     08 20 06 F1 | 	add	local02, #8
09ffc     10 9D 68 FC | 	wrlong	#78, local02
0a000     03 00 00 FF 
0a004     08 E4 05 F1 | 	add	objptr, ##1544
0a008     F2 22 02 FB | 	rdlong	local03, objptr
0a00c     4A 00 00 FF 
0a010     84 E4 85 F1 | 	sub	objptr, ##38020
0a014     04 4E 05 F1 | 	add	fp, #4
0a018     A7 22 62 FC | 	wrlong	local03, fp
0a01c     08 4E 85 F1 | 	sub	fp, #8
0a020                 | ' 
0a020                 | '   gotoline=val%(lparts(ct).part$) 
0a020                 | '   compiledline(lineptr).result_type=token_fast_goto
0a020                 | ' ' now find a pointer to goto
0a020                 | '   gotoptr=programstart
0a020                 | '   do
0a020                 | LR__0890
0a020     10 4E 05 F1 | 	add	fp, #16
0a024     A7 12 02 F6 | 	mov	arg01, fp
0a028     08 4E 85 F1 | 	sub	fp, #8
0a02c     A7 14 02 FB | 	rdlong	arg02, fp
0a030     08 4E 85 F1 | 	sub	fp, #8
0a034     18 16 06 F6 | 	mov	arg03, #24
0a038     0B 00 00 FF 
0a03c     CC E4 05 F1 | 	add	objptr, ##5836
0a040     98 5D B1 FD | 	call	#_psram_spin2_read1
0a044     0B 00 00 FF 
0a048     CC E4 85 F1 | 	sub	objptr, ##5836
0a04c                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0a04c                 | '     if gotoheader(0)<>$FFFFFFFF then
0a04c     10 4E 05 F1 | 	add	fp, #16
0a050     A7 22 02 FB | 	rdlong	local03, fp
0a054     10 4E 85 F1 | 	sub	fp, #16
0a058     FF FF 7F FF 
0a05c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0a060     24 00 90 AD |  if_e	jmp	#LR__0891
0a064     08 4E 05 F1 | 	add	fp, #8
0a068     A7 22 02 FB | 	rdlong	local03, fp
0a06c     04 4E 05 F1 | 	add	fp, #4
0a070     A7 22 62 FC | 	wrlong	local03, fp
0a074     18 4E 05 F1 | 	add	fp, #24
0a078     A7 22 02 FB | 	rdlong	local03, fp
0a07c     1C 4E 85 F1 | 	sub	fp, #28
0a080     A7 22 62 FC | 	wrlong	local03, fp
0a084     08 4E 85 F1 | 	sub	fp, #8
0a088                 | LR__0891
0a088     24 4E 05 F1 | 	add	fp, #36
0a08c     A7 22 02 FB | 	rdlong	local03, fp
0a090     24 4E 85 F1 | 	sub	fp, #36
0a094     FF FF 3F FF 
0a098     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0a09c     10 4E 05 51 |  if_ne	add	fp, #16
0a0a0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0a0a4     10 4E 85 51 |  if_ne	sub	fp, #16
0a0a8     FF FF 7F 5F 
0a0ac     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0a0b0     1C 00 90 AD |  if_e	jmp	#LR__0892
0a0b4     10 4E 05 F1 | 	add	fp, #16
0a0b8     A7 22 02 FB | 	rdlong	local03, fp
0a0bc     0C 4E 85 F1 | 	sub	fp, #12
0a0c0     A7 20 02 FB | 	rdlong	local02, fp
0a0c4     04 4E 85 F1 | 	sub	fp, #4
0a0c8     10 23 0A F2 | 	cmp	local03, local02 wz
0a0cc     50 FF 9F 5D |  if_ne	jmp	#LR__0890
0a0d0                 | LR__0892
0a0d0                 | '   if gotoheader(0)=gotoline then
0a0d0     10 4E 05 F1 | 	add	fp, #16
0a0d4     A7 22 02 FB | 	rdlong	local03, fp
0a0d8     0C 4E 85 F1 | 	sub	fp, #12
0a0dc     A7 1E 02 FB | 	rdlong	local01, fp
0a0e0     04 4E 85 F1 | 	sub	fp, #4
0a0e4     0F 23 0A F2 | 	cmp	local03, local01 wz
0a0e8     7C 00 90 5D |  if_ne	jmp	#LR__0893
0a0ec     4A 00 00 FF 
0a0f0     7C E4 05 F1 | 	add	objptr, ##38012
0a0f4     F2 1E 02 FB | 	rdlong	local01, objptr
0a0f8     0F 21 02 F6 | 	mov	local02, local01
0a0fc     01 20 66 F0 | 	shl	local02, #1
0a100     0F 21 02 F1 | 	add	local02, local01
0a104     02 20 66 F0 | 	shl	local02, #2
0a108     03 00 00 FF 
0a10c     00 E4 85 F1 | 	sub	objptr, ##1536
0a110     F2 20 02 F1 | 	add	local02, objptr
0a114     0C 4E 05 F1 | 	add	fp, #12
0a118     A7 22 02 FB | 	rdlong	local03, fp
0a11c     10 23 62 FC | 	wrlong	local03, local02
0a120     03 00 00 FF 
0a124     00 E4 05 F1 | 	add	objptr, ##1536
0a128     F2 1E 02 FB | 	rdlong	local01, objptr
0a12c     0F 21 02 F6 | 	mov	local02, local01
0a130     01 20 66 F0 | 	shl	local02, #1
0a134     0F 21 02 F1 | 	add	local02, local01
0a138     02 20 66 F0 | 	shl	local02, #2
0a13c     03 00 00 FF 
0a140     00 E4 85 F1 | 	sub	objptr, ##1536
0a144     F2 20 02 F1 | 	add	local02, objptr
0a148     08 4E 85 F1 | 	sub	fp, #8
0a14c     A7 22 02 FB | 	rdlong	local03, fp
0a150     04 4E 85 F1 | 	sub	fp, #4
0a154     04 20 06 F1 | 	add	local02, #4
0a158     10 23 62 FC | 	wrlong	local03, local02
0a15c     47 00 00 FF 
0a160     7C E4 85 F1 | 	sub	objptr, ##36476
0a164     A4 00 90 FD | 	jmp	#LR__0894
0a168                 | LR__0893
0a168     4A 00 00 FF 
0a16c     7C E4 05 F1 | 	add	objptr, ##38012
0a170     F2 1E 02 FB | 	rdlong	local01, objptr
0a174     0F 21 02 F6 | 	mov	local02, local01
0a178     01 20 66 F0 | 	shl	local02, #1
0a17c     0F 21 02 F1 | 	add	local02, local01
0a180     02 20 66 F0 | 	shl	local02, #2
0a184     03 00 00 FF 
0a188     00 E4 85 F1 | 	sub	objptr, ##1536
0a18c     F2 20 02 F1 | 	add	local02, objptr
0a190     00 00 C0 FF 
0a194     10 01 68 FC | 	wrlong	##-2147483648, local02
0a198     03 00 00 FF 
0a19c     00 E4 05 F1 | 	add	objptr, ##1536
0a1a0     F2 1E 02 FB | 	rdlong	local01, objptr
0a1a4     0F 21 02 F6 | 	mov	local02, local01
0a1a8     01 20 66 F0 | 	shl	local02, #1
0a1ac     0F 21 02 F1 | 	add	local02, local01
0a1b0     02 20 66 F0 | 	shl	local02, #2
0a1b4     03 00 00 FF 
0a1b8     00 E4 85 F1 | 	sub	objptr, ##1536
0a1bc     F2 20 02 F1 | 	add	local02, objptr
0a1c0     04 4E 05 F1 | 	add	fp, #4
0a1c4     A7 22 02 FB | 	rdlong	local03, fp
0a1c8     04 4E 85 F1 | 	sub	fp, #4
0a1cc     04 20 06 F1 | 	add	local02, #4
0a1d0     10 23 62 FC | 	wrlong	local03, local02
0a1d4     03 00 00 FF 
0a1d8     00 E4 05 F1 | 	add	objptr, ##1536
0a1dc     F2 1E 02 FB | 	rdlong	local01, objptr
0a1e0     0F 21 02 F6 | 	mov	local02, local01
0a1e4     01 20 66 F0 | 	shl	local02, #1
0a1e8     0F 21 02 F1 | 	add	local02, local01
0a1ec     02 20 66 F0 | 	shl	local02, #2
0a1f0     03 00 00 FF 
0a1f4     00 E4 85 F1 | 	sub	objptr, ##1536
0a1f8     F2 20 02 F1 | 	add	local02, objptr
0a1fc     08 20 06 F1 | 	add	local02, #8
0a200     10 A7 68 FC | 	wrlong	#83, local02
0a204     47 00 00 FF 
0a208     7C E4 85 F1 | 	sub	objptr, ##36476
0a20c                 | LR__0894
0a20c     4A 00 00 FF 
0a210     7C E4 05 F1 | 	add	objptr, ##38012
0a214     F2 22 02 FB | 	rdlong	local03, objptr
0a218     01 22 06 F1 | 	add	local03, #1
0a21c     F2 22 62 FC | 	wrlong	local03, objptr
0a220     4A 00 00 FF 
0a224     7C E4 85 F1 | 	sub	objptr, ##38012
0a228     D0 00 90 FD | 	jmp	#LR__0896
0a22c                 | LR__0895
0a22c     DC 00 B0 FD | 	call	#_expr
0a230     30 4E 05 F1 | 	add	fp, #48
0a234     A7 9E 68 FC | 	wrlong	#79, fp
0a238     08 4E 85 F1 | 	sub	fp, #8
0a23c     A7 00 68 FC | 	wrlong	#0, fp
0a240     04 4E 05 F1 | 	add	fp, #4
0a244     A7 22 02 FB | 	rdlong	local03, fp
0a248     04 4E 05 F1 | 	add	fp, #4
0a24c     A7 1E 02 FB | 	rdlong	local01, fp
0a250     30 4E 85 F1 | 	sub	fp, #48
0a254     4A 00 00 FF 
0a258     7C E4 05 F1 | 	add	objptr, ##38012
0a25c     F2 20 02 FB | 	rdlong	local02, objptr
0a260     10 17 02 F6 | 	mov	arg03, local02
0a264     01 16 66 F0 | 	shl	arg03, #1
0a268     10 17 02 F1 | 	add	arg03, local02
0a26c     02 16 66 F0 | 	shl	arg03, #2
0a270     03 00 00 FF 
0a274     00 E4 85 F1 | 	sub	objptr, ##1536
0a278     F2 16 02 F1 | 	add	arg03, objptr
0a27c     0B 01 68 FC | 	wrlong	#0, arg03
0a280     03 00 00 FF 
0a284     00 E4 05 F1 | 	add	objptr, ##1536
0a288     F2 20 02 FB | 	rdlong	local02, objptr
0a28c     10 17 02 F6 | 	mov	arg03, local02
0a290     01 16 66 F0 | 	shl	arg03, #1
0a294     10 17 02 F1 | 	add	arg03, local02
0a298     02 16 66 F0 | 	shl	arg03, #2
0a29c     03 00 00 FF 
0a2a0     00 E4 85 F1 | 	sub	objptr, ##1536
0a2a4     F2 16 02 F1 | 	add	arg03, objptr
0a2a8     04 16 06 F1 | 	add	arg03, #4
0a2ac     0B 23 62 FC | 	wrlong	local03, arg03
0a2b0     03 00 00 FF 
0a2b4     00 E4 05 F1 | 	add	objptr, ##1536
0a2b8     F2 22 02 FB | 	rdlong	local03, objptr
0a2bc     11 21 02 F6 | 	mov	local02, local03
0a2c0     01 20 66 F0 | 	shl	local02, #1
0a2c4     11 21 02 F1 | 	add	local02, local03
0a2c8     02 20 66 F0 | 	shl	local02, #2
0a2cc     03 00 00 FF 
0a2d0     00 E4 85 F1 | 	sub	objptr, ##1536
0a2d4     F2 20 02 F1 | 	add	local02, objptr
0a2d8     08 20 06 F1 | 	add	local02, #8
0a2dc     10 1F 62 FC | 	wrlong	local01, local02
0a2e0     03 00 00 FF 
0a2e4     00 E4 05 F1 | 	add	objptr, ##1536
0a2e8     F2 22 02 FB | 	rdlong	local03, objptr
0a2ec     01 22 06 F1 | 	add	local03, #1
0a2f0     F2 22 62 FC | 	wrlong	local03, objptr
0a2f4     4A 00 00 FF 
0a2f8     7C E4 85 F1 | 	sub	objptr, ##38012
0a2fc                 | LR__0896
0a2fc                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
0a2fc                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
0a2fc                 | ' return 0
0a2fc     00 FA 05 F6 | 	mov	result1, #0
0a300     A7 F0 03 F6 | 	mov	ptra, fp
0a304     B2 00 A0 FD | 	call	#popregs_
0a308                 | _compile_goto_ret
0a308     2D 00 64 FD | 	ret
0a30c                 | 
0a30c                 | ' 
0a30c                 | ' 
0a30c                 | ' 
0a30c                 | ' 
0a30c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a30c                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
0a30c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a30c                 | ' 
0a30c                 | ' 
0a30c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a30c                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
0a30c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a30c                 | ' 
0a30c                 | ' 
0a30c                 | ' function expr() as integer 
0a30c                 | _expr
0a30c     07 4A 05 F6 | 	mov	COUNT_, #7
0a310     A8 00 A0 FD | 	call	#pushregs_
0a314                 | _expr_enter
0a314     37 00 00 FF 
0a318     44 E4 05 F1 | 	add	objptr, ##28228
0a31c     F2 24 02 FB | 	rdlong	local04, objptr
0a320     03 24 66 F0 | 	shl	local04, #3
0a324     02 00 00 FF 
0a328     38 E4 85 F1 | 	sub	objptr, ##1080
0a32c     F2 24 02 F1 | 	add	local04, objptr
0a330     04 24 06 F1 | 	add	local04, #4
0a334     12 27 02 FB | 	rdlong	local05, local04
0a338                 | ' 
0a338                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0a338     FE 27 0E F2 | 	cmp	local05, #510 wz
0a33c     35 00 00 FF 
0a340     0C E4 85 F1 | 	sub	objptr, ##27148
0a344     C4 00 90 5D |  if_ne	jmp	#LR__0900
0a348     1D 1E 06 F6 | 	mov	local01, #29
0a34c     FF 22 06 F6 | 	mov	local03, #255
0a350     0F 29 02 F6 | 	mov	local06, local01
0a354     10 2B 02 F6 | 	mov	local07, local02
0a358     11 1F 02 F6 | 	mov	local01, local03
0a35c     4A 00 00 FF 
0a360     7C E4 05 F1 | 	add	objptr, ##38012
0a364     F2 26 02 FB | 	rdlong	local05, objptr
0a368     13 25 02 F6 | 	mov	local04, local05
0a36c     01 24 66 F0 | 	shl	local04, #1
0a370     13 25 02 F1 | 	add	local04, local05
0a374     02 24 66 F0 | 	shl	local04, #2
0a378     03 00 00 FF 
0a37c     00 E4 85 F1 | 	sub	objptr, ##1536
0a380     F2 24 02 F1 | 	add	local04, objptr
0a384     12 29 62 FC | 	wrlong	local06, local04
0a388     03 00 00 FF 
0a38c     00 E4 05 F1 | 	add	objptr, ##1536
0a390     F2 28 02 FB | 	rdlong	local06, objptr
0a394     14 27 02 F6 | 	mov	local05, local06
0a398     01 26 66 F0 | 	shl	local05, #1
0a39c     14 27 02 F1 | 	add	local05, local06
0a3a0     02 26 66 F0 | 	shl	local05, #2
0a3a4     03 00 00 FF 
0a3a8     00 E4 85 F1 | 	sub	objptr, ##1536
0a3ac     F2 26 02 F1 | 	add	local05, objptr
0a3b0     04 26 06 F1 | 	add	local05, #4
0a3b4     13 2B 62 FC | 	wrlong	local07, local05
0a3b8     03 00 00 FF 
0a3bc     00 E4 05 F1 | 	add	objptr, ##1536
0a3c0     F2 2A 02 FB | 	rdlong	local07, objptr
0a3c4     15 29 02 F6 | 	mov	local06, local07
0a3c8     01 28 66 F0 | 	shl	local06, #1
0a3cc     15 29 02 F1 | 	add	local06, local07
0a3d0     02 28 66 F0 | 	shl	local06, #2
0a3d4     03 00 00 FF 
0a3d8     00 E4 85 F1 | 	sub	objptr, ##1536
0a3dc     F2 28 02 F1 | 	add	local06, objptr
0a3e0     08 28 06 F1 | 	add	local06, #8
0a3e4     14 1F 62 FC | 	wrlong	local01, local06
0a3e8     03 00 00 FF 
0a3ec     00 E4 05 F1 | 	add	objptr, ##1536
0a3f0     F2 28 02 FB | 	rdlong	local06, objptr
0a3f4     01 28 06 F1 | 	add	local06, #1
0a3f8     F2 28 62 FC | 	wrlong	local06, objptr
0a3fc     4A 00 00 FF 
0a400     7C E4 85 F1 | 	sub	objptr, ##38012
0a404     1D FA 05 F6 | 	mov	result1, #29
0a408     54 01 90 FD | 	jmp	#LR__0903
0a40c                 | LR__0900
0a40c     00 1E 06 F6 | 	mov	local01, #0
0a410     58 01 B0 FD | 	call	#_addsub
0a414     37 00 00 FF 
0a418     44 E4 05 F1 | 	add	objptr, ##28228
0a41c     F2 24 02 FB | 	rdlong	local04, objptr
0a420     03 24 66 F0 | 	shl	local04, #3
0a424     02 00 00 FF 
0a428     38 E4 85 F1 | 	sub	objptr, ##1080
0a42c     F2 24 02 F1 | 	add	local04, objptr
0a430     04 24 06 F1 | 	add	local04, #4
0a434     12 27 02 FB | 	rdlong	local05, local04
0a438                 | ' t3.result.uresult=0
0a438                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
0a438                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
0a438                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0a438     35 00 00 FF 
0a43c     0C E4 85 F1 | 	sub	objptr, ##27148
0a440                 | LR__0901
0a440     1B 26 0E F2 | 	cmp	local05, #27 wz
0a444     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
0a448     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
0a44c     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
0a450     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
0a454     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
0a458     00 01 90 5D |  if_ne	jmp	#LR__0902
0a45c     37 00 00 FF 
0a460     44 E4 05 F1 | 	add	objptr, ##28228
0a464     F2 28 02 FB | 	rdlong	local06, objptr
0a468     01 28 06 F1 | 	add	local06, #1
0a46c     F2 28 62 FC | 	wrlong	local06, objptr
0a470     37 00 00 FF 
0a474     44 E4 85 F1 | 	sub	objptr, ##28228
0a478     F0 00 B0 FD | 	call	#_addsub
0a47c     13 23 02 F6 | 	mov	local03, local05
0a480     0F 29 02 F6 | 	mov	local06, local01
0a484     10 2B 02 F6 | 	mov	local07, local02
0a488     11 27 02 F6 | 	mov	local05, local03
0a48c     4A 00 00 FF 
0a490     7C E4 05 F1 | 	add	objptr, ##38012
0a494     F2 24 02 FB | 	rdlong	local04, objptr
0a498     12 FB 01 F6 | 	mov	result1, local04
0a49c     01 FA 65 F0 | 	shl	result1, #1
0a4a0     12 FB 01 F1 | 	add	result1, local04
0a4a4     02 FA 65 F0 | 	shl	result1, #2
0a4a8     03 00 00 FF 
0a4ac     00 E4 85 F1 | 	sub	objptr, ##1536
0a4b0     F2 FA 01 F1 | 	add	result1, objptr
0a4b4     FD 28 62 FC | 	wrlong	local06, result1
0a4b8     03 00 00 FF 
0a4bc     00 E4 05 F1 | 	add	objptr, ##1536
0a4c0     F2 28 02 FB | 	rdlong	local06, objptr
0a4c4     14 25 02 F6 | 	mov	local04, local06
0a4c8     01 24 66 F0 | 	shl	local04, #1
0a4cc     14 25 02 F1 | 	add	local04, local06
0a4d0     02 24 66 F0 | 	shl	local04, #2
0a4d4     03 00 00 FF 
0a4d8     00 E4 85 F1 | 	sub	objptr, ##1536
0a4dc     F2 24 02 F1 | 	add	local04, objptr
0a4e0     04 24 06 F1 | 	add	local04, #4
0a4e4     12 2B 62 FC | 	wrlong	local07, local04
0a4e8     03 00 00 FF 
0a4ec     00 E4 05 F1 | 	add	objptr, ##1536
0a4f0     F2 2A 02 FB | 	rdlong	local07, objptr
0a4f4     15 29 02 F6 | 	mov	local06, local07
0a4f8     01 28 66 F0 | 	shl	local06, #1
0a4fc     15 29 02 F1 | 	add	local06, local07
0a500     02 28 66 F0 | 	shl	local06, #2
0a504     03 00 00 FF 
0a508     00 E4 85 F1 | 	sub	objptr, ##1536
0a50c     F2 28 02 F1 | 	add	local06, objptr
0a510     08 28 06 F1 | 	add	local06, #8
0a514     14 27 62 FC | 	wrlong	local05, local06
0a518     03 00 00 FF 
0a51c     00 E4 05 F1 | 	add	objptr, ##1536
0a520     F2 28 02 FB | 	rdlong	local06, objptr
0a524     01 28 06 F1 | 	add	local06, #1
0a528     F2 28 62 FC | 	wrlong	local06, objptr
0a52c     13 00 00 FF 
0a530     38 E4 85 F1 | 	sub	objptr, ##9784
0a534     F2 24 02 FB | 	rdlong	local04, objptr
0a538     03 24 66 F0 | 	shl	local04, #3
0a53c     02 00 00 FF 
0a540     38 E4 85 F1 | 	sub	objptr, ##1080
0a544     F2 24 02 F1 | 	add	local04, objptr
0a548     04 24 06 F1 | 	add	local04, #4
0a54c     12 27 02 FB | 	rdlong	local05, local04
0a550     35 00 00 FF 
0a554     0C E4 85 F1 | 	sub	objptr, ##27148
0a558     E4 FE 9F FD | 	jmp	#LR__0901
0a55c                 | LR__0902
0a55c                 | ' return 0  
0a55c     00 FA 05 F6 | 	mov	result1, #0
0a560                 | LR__0903
0a560     A7 F0 03 F6 | 	mov	ptra, fp
0a564     B2 00 A0 FD | 	call	#popregs_
0a568                 | _expr_ret
0a568     2D 00 64 FD | 	ret
0a56c                 | 
0a56c                 | ' 
0a56c                 | ' 
0a56c                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
0a56c                 | ' 
0a56c                 | ' function addsub() as integer 
0a56c                 | _addsub
0a56c     07 4A 05 F6 | 	mov	COUNT_, #7
0a570     A8 00 A0 FD | 	call	#pushregs_
0a574                 | _addsub_enter
0a574     00 1E 06 F6 | 	mov	local01, #0
0a578     50 01 B0 FD | 	call	#_muldiv
0a57c     37 00 00 FF 
0a580     44 E4 05 F1 | 	add	objptr, ##28228
0a584     F2 24 02 FB | 	rdlong	local04, objptr
0a588     03 24 66 F0 | 	shl	local04, #3
0a58c     02 00 00 FF 
0a590     38 E4 85 F1 | 	sub	objptr, ##1080
0a594     F2 24 02 F1 | 	add	local04, objptr
0a598     04 24 06 F1 | 	add	local04, #4
0a59c     12 27 02 FB | 	rdlong	local05, local04
0a5a0                 | ' t3.result.uresult=0
0a5a0                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
0a5a0                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
0a5a0                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0a5a0     35 00 00 FF 
0a5a4     0C E4 85 F1 | 	sub	objptr, ##27148
0a5a8                 | LR__0910
0a5a8     01 26 0E F2 | 	cmp	local05, #1 wz
0a5ac     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
0a5b0     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
0a5b4     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
0a5b8     00 01 90 5D |  if_ne	jmp	#LR__0911
0a5bc     37 00 00 FF 
0a5c0     44 E4 05 F1 | 	add	objptr, ##28228
0a5c4     F2 24 02 FB | 	rdlong	local04, objptr
0a5c8     01 24 06 F1 | 	add	local04, #1
0a5cc     F2 24 62 FC | 	wrlong	local04, objptr
0a5d0     37 00 00 FF 
0a5d4     44 E4 85 F1 | 	sub	objptr, ##28228
0a5d8     F0 00 B0 FD | 	call	#_muldiv
0a5dc     13 23 02 F6 | 	mov	local03, local05
0a5e0     0F 29 02 F6 | 	mov	local06, local01
0a5e4     10 2B 02 F6 | 	mov	local07, local02
0a5e8     11 27 02 F6 | 	mov	local05, local03
0a5ec     4A 00 00 FF 
0a5f0     7C E4 05 F1 | 	add	objptr, ##38012
0a5f4     F2 24 02 FB | 	rdlong	local04, objptr
0a5f8     12 FB 01 F6 | 	mov	result1, local04
0a5fc     01 FA 65 F0 | 	shl	result1, #1
0a600     12 FB 01 F1 | 	add	result1, local04
0a604     02 FA 65 F0 | 	shl	result1, #2
0a608     03 00 00 FF 
0a60c     00 E4 85 F1 | 	sub	objptr, ##1536
0a610     F2 FA 01 F1 | 	add	result1, objptr
0a614     FD 28 62 FC | 	wrlong	local06, result1
0a618     03 00 00 FF 
0a61c     00 E4 05 F1 | 	add	objptr, ##1536
0a620     F2 28 02 FB | 	rdlong	local06, objptr
0a624     14 25 02 F6 | 	mov	local04, local06
0a628     01 24 66 F0 | 	shl	local04, #1
0a62c     14 25 02 F1 | 	add	local04, local06
0a630     02 24 66 F0 | 	shl	local04, #2
0a634     03 00 00 FF 
0a638     00 E4 85 F1 | 	sub	objptr, ##1536
0a63c     F2 24 02 F1 | 	add	local04, objptr
0a640     04 24 06 F1 | 	add	local04, #4
0a644     12 2B 62 FC | 	wrlong	local07, local04
0a648     03 00 00 FF 
0a64c     00 E4 05 F1 | 	add	objptr, ##1536
0a650     F2 2A 02 FB | 	rdlong	local07, objptr
0a654     15 29 02 F6 | 	mov	local06, local07
0a658     01 28 66 F0 | 	shl	local06, #1
0a65c     15 29 02 F1 | 	add	local06, local07
0a660     02 28 66 F0 | 	shl	local06, #2
0a664     03 00 00 FF 
0a668     00 E4 85 F1 | 	sub	objptr, ##1536
0a66c     F2 28 02 F1 | 	add	local06, objptr
0a670     08 28 06 F1 | 	add	local06, #8
0a674     14 27 62 FC | 	wrlong	local05, local06
0a678     03 00 00 FF 
0a67c     00 E4 05 F1 | 	add	objptr, ##1536
0a680     F2 28 02 FB | 	rdlong	local06, objptr
0a684     01 28 06 F1 | 	add	local06, #1
0a688     F2 28 62 FC | 	wrlong	local06, objptr
0a68c     13 00 00 FF 
0a690     38 E4 85 F1 | 	sub	objptr, ##9784
0a694     F2 24 02 FB | 	rdlong	local04, objptr
0a698     03 24 66 F0 | 	shl	local04, #3
0a69c     02 00 00 FF 
0a6a0     38 E4 85 F1 | 	sub	objptr, ##1080
0a6a4     F2 24 02 F1 | 	add	local04, objptr
0a6a8     04 24 06 F1 | 	add	local04, #4
0a6ac     12 27 02 FB | 	rdlong	local05, local04
0a6b0     35 00 00 FF 
0a6b4     0C E4 85 F1 | 	sub	objptr, ##27148
0a6b8     EC FE 9F FD | 	jmp	#LR__0910
0a6bc                 | LR__0911
0a6bc                 | '   return 0
0a6bc     00 FA 05 F6 | 	mov	result1, #0
0a6c0     A7 F0 03 F6 | 	mov	ptra, fp
0a6c4     B2 00 A0 FD | 	call	#popregs_
0a6c8                 | _addsub_ret
0a6c8     2D 00 64 FD | 	ret
0a6cc                 | 
0a6cc                 | ' 
0a6cc                 | ' sub muldiv()
0a6cc                 | _muldiv
0a6cc     08 4A 05 F6 | 	mov	COUNT_, #8
0a6d0     A8 00 A0 FD | 	call	#pushregs_
0a6d4                 | _muldiv_enter
0a6d4     00 1E 06 F6 | 	mov	local01, #0
0a6d8     58 01 B0 FD | 	call	#_getvalue
0a6dc     37 00 00 FF 
0a6e0     44 E4 05 F1 | 	add	objptr, ##28228
0a6e4     F2 24 02 FB | 	rdlong	local04, objptr
0a6e8     03 24 66 F0 | 	shl	local04, #3
0a6ec     02 00 00 FF 
0a6f0     38 E4 85 F1 | 	sub	objptr, ##1080
0a6f4     F2 24 02 F1 | 	add	local04, objptr
0a6f8     04 24 06 F1 | 	add	local04, #4
0a6fc     12 27 02 FB | 	rdlong	local05, local04
0a700                 | ' t3.result.uresult=0
0a700                 | ' getvalue()    
0a700                 | ' op = lparts(ct).token
0a700                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0a700     35 00 00 FF 
0a704     0C E4 85 F1 | 	sub	objptr, ##27148
0a708                 | LR__0920
0a708     05 26 0E F2 | 	cmp	local05, #5 wz
0a70c     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
0a710     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
0a714     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
0a718     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
0a71c     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
0a720     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
0a724     00 01 90 5D |  if_ne	jmp	#LR__0921
0a728     37 00 00 FF 
0a72c     44 E4 05 F1 | 	add	objptr, ##28228
0a730     F2 24 02 FB | 	rdlong	local04, objptr
0a734     01 24 06 F1 | 	add	local04, #1
0a738     F2 24 62 FC | 	wrlong	local04, objptr
0a73c     37 00 00 FF 
0a740     44 E4 85 F1 | 	sub	objptr, ##28228
0a744     EC 00 B0 FD | 	call	#_getvalue
0a748     13 23 02 F6 | 	mov	local03, local05
0a74c     0F 29 02 F6 | 	mov	local06, local01
0a750     10 2B 02 F6 | 	mov	local07, local02
0a754     11 27 02 F6 | 	mov	local05, local03
0a758     4A 00 00 FF 
0a75c     7C E4 05 F1 | 	add	objptr, ##38012
0a760     F2 24 02 FB | 	rdlong	local04, objptr
0a764     12 2D 02 F6 | 	mov	local08, local04
0a768     01 2C 66 F0 | 	shl	local08, #1
0a76c     12 2D 02 F1 | 	add	local08, local04
0a770     02 2C 66 F0 | 	shl	local08, #2
0a774     03 00 00 FF 
0a778     00 E4 85 F1 | 	sub	objptr, ##1536
0a77c     F2 2C 02 F1 | 	add	local08, objptr
0a780     16 29 62 FC | 	wrlong	local06, local08
0a784     03 00 00 FF 
0a788     00 E4 05 F1 | 	add	objptr, ##1536
0a78c     F2 2C 02 FB | 	rdlong	local08, objptr
0a790     16 29 02 F6 | 	mov	local06, local08
0a794     01 28 66 F0 | 	shl	local06, #1
0a798     16 29 02 F1 | 	add	local06, local08
0a79c     02 28 66 F0 | 	shl	local06, #2
0a7a0     03 00 00 FF 
0a7a4     00 E4 85 F1 | 	sub	objptr, ##1536
0a7a8     F2 28 02 F1 | 	add	local06, objptr
0a7ac     04 28 06 F1 | 	add	local06, #4
0a7b0     14 2B 62 FC | 	wrlong	local07, local06
0a7b4     03 00 00 FF 
0a7b8     00 E4 05 F1 | 	add	objptr, ##1536
0a7bc     F2 2C 02 FB | 	rdlong	local08, objptr
0a7c0     16 2B 02 F6 | 	mov	local07, local08
0a7c4     01 2A 66 F0 | 	shl	local07, #1
0a7c8     16 2B 02 F1 | 	add	local07, local08
0a7cc     02 2A 66 F0 | 	shl	local07, #2
0a7d0     03 00 00 FF 
0a7d4     00 E4 85 F1 | 	sub	objptr, ##1536
0a7d8     F2 2A 02 F1 | 	add	local07, objptr
0a7dc     08 2A 06 F1 | 	add	local07, #8
0a7e0     15 27 62 FC | 	wrlong	local05, local07
0a7e4     03 00 00 FF 
0a7e8     00 E4 05 F1 | 	add	objptr, ##1536
0a7ec     F2 28 02 FB | 	rdlong	local06, objptr
0a7f0     01 28 06 F1 | 	add	local06, #1
0a7f4     F2 28 62 FC | 	wrlong	local06, objptr
0a7f8     13 00 00 FF 
0a7fc     38 E4 85 F1 | 	sub	objptr, ##9784
0a800     F2 24 02 FB | 	rdlong	local04, objptr
0a804     03 24 66 F0 | 	shl	local04, #3
0a808     02 00 00 FF 
0a80c     38 E4 85 F1 | 	sub	objptr, ##1080
0a810     F2 24 02 F1 | 	add	local04, objptr
0a814     04 24 06 F1 | 	add	local04, #4
0a818     12 27 02 FB | 	rdlong	local05, local04
0a81c     35 00 00 FF 
0a820     0C E4 85 F1 | 	sub	objptr, ##27148
0a824     E0 FE 9F FD | 	jmp	#LR__0920
0a828                 | LR__0921
0a828     A7 F0 03 F6 | 	mov	ptra, fp
0a82c     B2 00 A0 FD | 	call	#popregs_
0a830                 | _muldiv_ret
0a830     2D 00 64 FD | 	ret
0a834                 | 
0a834                 | ' 
0a834                 | ' sub getvalue() 
0a834                 | _getvalue
0a834     0B 4A 05 F6 | 	mov	COUNT_, #11
0a838     A8 00 A0 FD | 	call	#pushregs_
0a83c                 | _getvalue_enter
0a83c     01 24 06 F6 | 	mov	local04, #1
0a840     00 1E 06 F6 | 	mov	local01, #0
0a844     1D 22 06 F6 | 	mov	local03, #29
0a848     37 00 00 FF 
0a84c     44 E4 05 F1 | 	add	objptr, ##28228
0a850     F2 16 02 FB | 	rdlong	arg03, objptr
0a854     03 16 66 F0 | 	shl	arg03, #3
0a858     02 00 00 FF 
0a85c     38 E4 85 F1 | 	sub	objptr, ##1080
0a860     F2 16 02 F1 | 	add	arg03, objptr
0a864     04 16 06 F1 | 	add	arg03, #4
0a868     0B 27 02 FB | 	rdlong	local05, arg03
0a86c                 | ' m=1
0a86c                 | ' t1.result.uresult=0: t1.result_type=result_uint
0a86c                 | ' op=lparts(ct).token
0a86c                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
0a86c     02 26 0E F2 | 	cmp	local05, #2 wz
0a870     35 00 00 FF 
0a874     0C E4 85 F1 | 	sub	objptr, ##27148
0a878     38 00 90 5D |  if_ne	jmp	#LR__0930
0a87c     01 24 66 F6 | 	neg	local04, #1
0a880     37 00 00 FF 
0a884     44 E4 05 F1 | 	add	objptr, ##28228
0a888     F2 26 02 FB | 	rdlong	local05, objptr
0a88c     01 26 06 F1 | 	add	local05, #1
0a890     F2 26 62 FC | 	wrlong	local05, objptr
0a894     03 26 66 F0 | 	shl	local05, #3
0a898     02 00 00 FF 
0a89c     38 E4 85 F1 | 	sub	objptr, ##1080
0a8a0     F2 26 02 F1 | 	add	local05, objptr
0a8a4     04 26 06 F1 | 	add	local05, #4
0a8a8     13 27 02 FB | 	rdlong	local05, local05
0a8ac     35 00 00 FF 
0a8b0     0C E4 85 F1 | 	sub	objptr, ##27148
0a8b4                 | LR__0930
0a8b4                 | ' select case op
0a8b4     01 00 00 FF 
0a8b8     00 26 0E F2 | 	cmp	local05, ##512 wz
0a8bc     44 00 90 AD |  if_e	jmp	#LR__0931
0a8c0     01 00 00 FF 
0a8c4     01 26 0E F2 | 	cmp	local05, ##513 wz
0a8c8     90 01 90 AD |  if_e	jmp	#LR__0934
0a8cc     01 00 00 FF 
0a8d0     02 26 0E F2 | 	cmp	local05, ##514 wz
0a8d4     44 04 90 AD |  if_e	jmp	#LR__0941
0a8d8     01 00 00 FF 
0a8dc     03 26 0E F2 | 	cmp	local05, ##515 wz
0a8e0     A8 05 90 AD |  if_e	jmp	#LR__0944
0a8e4     2C 26 0E F2 | 	cmp	local05, #44 wz
0a8e8     7C 07 90 AD |  if_e	jmp	#LR__0949
0a8ec     01 00 00 FF 
0a8f0     04 26 0E F2 | 	cmp	local05, ##516 wz
0a8f4     74 08 90 AD |  if_e	jmp	#LR__0950
0a8f8     15 26 0E F2 | 	cmp	local05, #21 wz
0a8fc     94 08 90 AD |  if_e	jmp	#LR__0951
0a900     04 09 90 FD | 	jmp	#LR__0952
0a904                 | LR__0931
0a904                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
0a904     01 24 0E F2 | 	cmp	local04, #1 wz
0a908     3C 00 90 5D |  if_ne	jmp	#LR__0932
0a90c     37 00 00 FF 
0a910     44 E4 05 F1 | 	add	objptr, ##28228
0a914     F2 26 02 FB | 	rdlong	local05, objptr
0a918     03 26 66 F0 | 	shl	local05, #3
0a91c     02 00 00 FF 
0a920     38 E4 85 F1 | 	sub	objptr, ##1080
0a924     F2 26 02 F1 | 	add	local05, objptr
0a928     13 13 02 FB | 	rdlong	arg01, local05
0a92c     00 14 06 F6 | 	mov	arg02, #0
0a930     35 00 00 FF 
0a934     0C E4 85 F1 | 	sub	objptr, ##27148
0a938     0C 93 B1 FD | 	call	#__system____builtin_atoi
0a93c     FD 24 02 FD | 	qmul	local04, result1
0a940     18 1E 62 FD | 	getqx	local01
0a944     1C 22 06 F6 | 	mov	local03, #28
0a948                 | LR__0932
0a948                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
0a948     FF FF 7F FF 
0a94c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a950     3C 00 90 5D |  if_ne	jmp	#LR__0933
0a954     37 00 00 FF 
0a958     44 E4 05 F1 | 	add	objptr, ##28228
0a95c     F2 26 02 FB | 	rdlong	local05, objptr
0a960     03 26 66 F0 | 	shl	local05, #3
0a964     02 00 00 FF 
0a968     38 E4 85 F1 | 	sub	objptr, ##1080
0a96c     F2 26 02 F1 | 	add	local05, objptr
0a970     13 13 02 FB | 	rdlong	arg01, local05
0a974     00 14 06 F6 | 	mov	arg02, #0
0a978     35 00 00 FF 
0a97c     0C E4 85 F1 | 	sub	objptr, ##27148
0a980     C4 92 B1 FD | 	call	#__system____builtin_atoi
0a984     FD 24 02 FD | 	qmul	local04, result1
0a988     18 1E 62 FD | 	getqx	local01
0a98c     1C 22 06 F6 | 	mov	local03, #28
0a990                 | LR__0933
0a990     0F 29 02 F6 | 	mov	local06, local01
0a994     10 2B 02 F6 | 	mov	local07, local02
0a998     11 27 02 F6 | 	mov	local05, local03
0a99c     4A 00 00 FF 
0a9a0     7C E4 05 F1 | 	add	objptr, ##38012
0a9a4     F2 1E 02 FB | 	rdlong	local01, objptr
0a9a8     0F 25 02 F6 | 	mov	local04, local01
0a9ac     01 24 66 F0 | 	shl	local04, #1
0a9b0     0F 25 02 F1 | 	add	local04, local01
0a9b4     02 24 66 F0 | 	shl	local04, #2
0a9b8     03 00 00 FF 
0a9bc     00 E4 85 F1 | 	sub	objptr, ##1536
0a9c0     F2 24 02 F1 | 	add	local04, objptr
0a9c4     12 29 62 FC | 	wrlong	local06, local04
0a9c8     03 00 00 FF 
0a9cc     00 E4 05 F1 | 	add	objptr, ##1536
0a9d0     F2 28 02 FB | 	rdlong	local06, objptr
0a9d4     14 1F 02 F6 | 	mov	local01, local06
0a9d8     01 1E 66 F0 | 	shl	local01, #1
0a9dc     14 1F 02 F1 | 	add	local01, local06
0a9e0     02 1E 66 F0 | 	shl	local01, #2
0a9e4     03 00 00 FF 
0a9e8     00 E4 85 F1 | 	sub	objptr, ##1536
0a9ec     F2 1E 02 F1 | 	add	local01, objptr
0a9f0     04 1E 06 F1 | 	add	local01, #4
0a9f4     0F 2B 62 FC | 	wrlong	local07, local01
0a9f8     03 00 00 FF 
0a9fc     00 E4 05 F1 | 	add	objptr, ##1536
0aa00     F2 2A 02 FB | 	rdlong	local07, objptr
0aa04     15 29 02 F6 | 	mov	local06, local07
0aa08     01 28 66 F0 | 	shl	local06, #1
0aa0c     15 29 02 F1 | 	add	local06, local07
0aa10     02 28 66 F0 | 	shl	local06, #2
0aa14     03 00 00 FF 
0aa18     00 E4 85 F1 | 	sub	objptr, ##1536
0aa1c     F2 28 02 F1 | 	add	local06, objptr
0aa20     08 28 06 F1 | 	add	local06, #8
0aa24     14 27 62 FC | 	wrlong	local05, local06
0aa28     03 00 00 FF 
0aa2c     00 E4 05 F1 | 	add	objptr, ##1536
0aa30     F2 28 02 FB | 	rdlong	local06, objptr
0aa34     01 28 06 F1 | 	add	local06, #1
0aa38     F2 28 62 FC | 	wrlong	local06, objptr
0aa3c     13 00 00 FF 
0aa40     38 E4 85 F1 | 	sub	objptr, ##9784
0aa44     F2 28 02 FB | 	rdlong	local06, objptr
0aa48     01 28 06 F1 | 	add	local06, #1
0aa4c     F2 28 62 FC | 	wrlong	local06, objptr
0aa50     37 00 00 FF 
0aa54     44 E4 85 F1 | 	sub	objptr, ##28228
0aa58     D0 07 90 FD | 	jmp	#LR__0953
0aa5c                 | LR__0934
0aa5c                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0aa5c     37 00 00 FF 
0aa60     44 E4 05 F1 | 	add	objptr, ##28228
0aa64     F2 16 02 FB | 	rdlong	arg03, objptr
0aa68     03 16 66 F0 | 	shl	arg03, #3
0aa6c     02 00 00 FF 
0aa70     38 E4 85 F1 | 	sub	objptr, ##1080
0aa74     F2 16 02 F1 | 	add	arg03, objptr
0aa78     0B 13 02 FB | 	rdlong	arg01, arg03
0aa7c     01 14 06 F6 | 	mov	arg02, #1
0aa80     35 00 00 FF 
0aa84     0C E4 85 F1 | 	sub	objptr, ##27148
0aa88     0C 80 B1 FD | 	call	#__system__Left_S
0aa8c     FD 12 02 F6 | 	mov	arg01, result1
0aa90     84 01 00 FF 
0aa94     ED 14 06 F6 | 	mov	arg02, ##@LR__5429
0aa98     A8 5F B1 FD | 	call	#__system___string_cmp
0aa9c     00 FA 0D F2 | 	cmp	result1, #0 wz
0aaa0     94 00 90 5D |  if_ne	jmp	#LR__0937
0aaa4     37 00 00 FF 
0aaa8     44 E4 05 F1 | 	add	objptr, ##28228
0aaac     F2 2A 02 FB | 	rdlong	local07, objptr
0aab0     15 29 02 F6 | 	mov	local06, local07
0aab4     03 28 66 F0 | 	shl	local06, #3
0aab8     02 00 00 FF 
0aabc     38 E4 85 F1 | 	sub	objptr, ##1080
0aac0     F2 28 02 F1 | 	add	local06, objptr
0aac4     84 01 00 FF 
0aac8     EF 26 06 F6 | 	mov	local05, ##@LR__5430
0aacc     03 2A 66 F0 | 	shl	local07, #3
0aad0     F2 2A 02 F1 | 	add	local07, objptr
0aad4     15 2B 02 FB | 	rdlong	local07, local07
0aad8     02 00 00 FF 
0aadc     38 E4 05 F1 | 	add	objptr, ##1080
0aae0     F2 1E 02 FB | 	rdlong	local01, objptr
0aae4     03 1E 66 F0 | 	shl	local01, #3
0aae8     02 00 00 FF 
0aaec     38 E4 85 F1 | 	sub	objptr, ##1080
0aaf0     F2 1E 02 F1 | 	add	local01, objptr
0aaf4     0F 13 02 FB | 	rdlong	arg01, local01
0aaf8     35 00 00 FF 
0aafc     0C E4 85 F1 | 	sub	objptr, ##27148
0ab00     09 2D 02 F6 | 	mov	local08, arg01
0ab04     97 06 48 FB | 	callpa	#(@LR__0936-@LR__0935)>>2,fcache_load_ptr_
0ab08                 | LR__0935
0ab08     16 FB C9 FA | 	rdbyte	result1, local08 wz
0ab0c     01 2C 06 51 |  if_ne	add	local08, #1
0ab10     F4 FF 9F 5D |  if_ne	jmp	#LR__0935
0ab14                 | LR__0936
0ab14     09 2D 82 F1 | 	sub	local08, arg01
0ab18     16 15 02 F6 | 	mov	arg02, local08
0ab1c     01 14 86 F1 | 	sub	arg02, #1
0ab20     15 13 02 F6 | 	mov	arg01, local07
0ab24     F8 7F B1 FD | 	call	#__system__Right_S
0ab28     FD 14 02 F6 | 	mov	arg02, result1
0ab2c     13 13 02 F6 | 	mov	arg01, local05
0ab30     44 5F B1 FD | 	call	#__system___string_concat
0ab34     14 FB 61 FC | 	wrlong	result1, local06
0ab38                 | LR__0937
0ab38                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0ab38     37 00 00 FF 
0ab3c     44 E4 05 F1 | 	add	objptr, ##28228
0ab40     F2 16 02 FB | 	rdlong	arg03, objptr
0ab44     03 16 66 F0 | 	shl	arg03, #3
0ab48     02 00 00 FF 
0ab4c     38 E4 85 F1 | 	sub	objptr, ##1080
0ab50     F2 16 02 F1 | 	add	arg03, objptr
0ab54     0B 13 02 FB | 	rdlong	arg01, arg03
0ab58     01 14 06 F6 | 	mov	arg02, #1
0ab5c     35 00 00 FF 
0ab60     0C E4 85 F1 | 	sub	objptr, ##27148
0ab64     30 7F B1 FD | 	call	#__system__Left_S
0ab68     FD 12 02 F6 | 	mov	arg01, result1
0ab6c     84 01 00 FF 
0ab70     F2 14 06 F6 | 	mov	arg02, ##@LR__5431
0ab74     CC 5E B1 FD | 	call	#__system___string_cmp
0ab78     00 FA 0D F2 | 	cmp	result1, #0 wz
0ab7c     94 00 90 5D |  if_ne	jmp	#LR__0940
0ab80     37 00 00 FF 
0ab84     44 E4 05 F1 | 	add	objptr, ##28228
0ab88     F2 2A 02 FB | 	rdlong	local07, objptr
0ab8c     15 29 02 F6 | 	mov	local06, local07
0ab90     03 28 66 F0 | 	shl	local06, #3
0ab94     02 00 00 FF 
0ab98     38 E4 85 F1 | 	sub	objptr, ##1080
0ab9c     F2 28 02 F1 | 	add	local06, objptr
0aba0     84 01 00 FF 
0aba4     F4 26 06 F6 | 	mov	local05, ##@LR__5432
0aba8     03 2A 66 F0 | 	shl	local07, #3
0abac     F2 2A 02 F1 | 	add	local07, objptr
0abb0     15 2B 02 FB | 	rdlong	local07, local07
0abb4     02 00 00 FF 
0abb8     38 E4 05 F1 | 	add	objptr, ##1080
0abbc     F2 1E 02 FB | 	rdlong	local01, objptr
0abc0     03 1E 66 F0 | 	shl	local01, #3
0abc4     02 00 00 FF 
0abc8     38 E4 85 F1 | 	sub	objptr, ##1080
0abcc     F2 1E 02 F1 | 	add	local01, objptr
0abd0     0F 13 02 FB | 	rdlong	arg01, local01
0abd4     35 00 00 FF 
0abd8     0C E4 85 F1 | 	sub	objptr, ##27148
0abdc     09 2D 02 F6 | 	mov	local08, arg01
0abe0     97 06 48 FB | 	callpa	#(@LR__0939-@LR__0938)>>2,fcache_load_ptr_
0abe4                 | LR__0938
0abe4     16 FB C9 FA | 	rdbyte	result1, local08 wz
0abe8     01 2C 06 51 |  if_ne	add	local08, #1
0abec     F4 FF 9F 5D |  if_ne	jmp	#LR__0938
0abf0                 | LR__0939
0abf0     09 2D 82 F1 | 	sub	local08, arg01
0abf4     16 15 02 F6 | 	mov	arg02, local08
0abf8     01 14 86 F1 | 	sub	arg02, #1
0abfc     15 13 02 F6 | 	mov	arg01, local07
0ac00     1C 7F B1 FD | 	call	#__system__Right_S
0ac04     FD 14 02 F6 | 	mov	arg02, result1
0ac08     13 13 02 F6 | 	mov	arg01, local05
0ac0c     68 5E B1 FD | 	call	#__system___string_concat
0ac10     14 FB 61 FC | 	wrlong	result1, local06
0ac14                 | LR__0940
0ac14     37 00 00 FF 
0ac18     44 E4 05 F1 | 	add	objptr, ##28228
0ac1c     F2 28 02 FB | 	rdlong	local06, objptr
0ac20     03 28 66 F0 | 	shl	local06, #3
0ac24     02 00 00 FF 
0ac28     38 E4 85 F1 | 	sub	objptr, ##1080
0ac2c     F2 28 02 F1 | 	add	local06, objptr
0ac30     14 13 02 FB | 	rdlong	arg01, local06
0ac34     00 14 06 F6 | 	mov	arg02, #0
0ac38     35 00 00 FF 
0ac3c     0C E4 85 F1 | 	sub	objptr, ##27148
0ac40     04 90 B1 FD | 	call	#__system____builtin_atoi
0ac44     FD 24 02 FD | 	qmul	local04, result1
0ac48     4A 00 00 FF 
0ac4c     7C E4 05 F1 | 	add	objptr, ##38012
0ac50     F2 28 02 FB | 	rdlong	local06, objptr
0ac54     14 2F 02 F6 | 	mov	local09, local06
0ac58     01 2E 66 F0 | 	shl	local09, #1
0ac5c     14 2F 02 F1 | 	add	local09, local06
0ac60     02 2E 66 F0 | 	shl	local09, #2
0ac64     03 00 00 FF 
0ac68     00 E4 85 F1 | 	sub	objptr, ##1536
0ac6c     F2 2E 02 F1 | 	add	local09, objptr
0ac70     03 00 00 FF 
0ac74     00 E4 05 F1 | 	add	objptr, ##1536
0ac78     18 1E 62 FD | 	getqx	local01
0ac7c     1C 22 06 F6 | 	mov	local03, #28
0ac80     0F 29 02 F6 | 	mov	local06, local01
0ac84     10 2B 02 F6 | 	mov	local07, local02
0ac88     17 29 62 FC | 	wrlong	local06, local09
0ac8c     11 2F 02 F6 | 	mov	local09, local03
0ac90     F2 28 02 FB | 	rdlong	local06, objptr
0ac94     14 27 02 F6 | 	mov	local05, local06
0ac98     01 26 66 F0 | 	shl	local05, #1
0ac9c     14 27 02 F1 | 	add	local05, local06
0aca0     02 26 66 F0 | 	shl	local05, #2
0aca4     03 00 00 FF 
0aca8     00 E4 85 F1 | 	sub	objptr, ##1536
0acac     F2 26 02 F1 | 	add	local05, objptr
0acb0     04 26 06 F1 | 	add	local05, #4
0acb4     13 2B 62 FC | 	wrlong	local07, local05
0acb8     03 00 00 FF 
0acbc     00 E4 05 F1 | 	add	objptr, ##1536
0acc0     F2 2A 02 FB | 	rdlong	local07, objptr
0acc4     15 29 02 F6 | 	mov	local06, local07
0acc8     01 28 66 F0 | 	shl	local06, #1
0accc     15 29 02 F1 | 	add	local06, local07
0acd0     02 28 66 F0 | 	shl	local06, #2
0acd4     03 00 00 FF 
0acd8     00 E4 85 F1 | 	sub	objptr, ##1536
0acdc     F2 28 02 F1 | 	add	local06, objptr
0ace0     08 28 06 F1 | 	add	local06, #8
0ace4     14 2F 62 FC | 	wrlong	local09, local06
0ace8     03 00 00 FF 
0acec     00 E4 05 F1 | 	add	objptr, ##1536
0acf0     F2 28 02 FB | 	rdlong	local06, objptr
0acf4     01 28 06 F1 | 	add	local06, #1
0acf8     F2 28 62 FC | 	wrlong	local06, objptr
0acfc     13 00 00 FF 
0ad00     38 E4 85 F1 | 	sub	objptr, ##9784
0ad04     F2 28 02 FB | 	rdlong	local06, objptr
0ad08     01 28 06 F1 | 	add	local06, #1
0ad0c     F2 28 62 FC | 	wrlong	local06, objptr
0ad10     37 00 00 FF 
0ad14     44 E4 85 F1 | 	sub	objptr, ##28228
0ad18     10 05 90 FD | 	jmp	#LR__0953
0ad1c                 | LR__0941
0ad1c                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0ad1c     01 24 0E F2 | 	cmp	local04, #1 wz
0ad20     48 00 90 5D |  if_ne	jmp	#LR__0942
0ad24     00 C0 1F FF 
0ad28     00 28 06 F6 | 	mov	local06, ##1065353216
0ad2c     37 00 00 FF 
0ad30     44 E4 05 F1 | 	add	objptr, ##28228
0ad34     F2 2E 02 FB | 	rdlong	local09, objptr
0ad38     03 2E 66 F0 | 	shl	local09, #3
0ad3c     02 00 00 FF 
0ad40     38 E4 85 F1 | 	sub	objptr, ##1080
0ad44     F2 2E 02 F1 | 	add	local09, objptr
0ad48     17 13 02 FB | 	rdlong	arg01, local09
0ad4c     35 00 00 FF 
0ad50     0C E4 85 F1 | 	sub	objptr, ##27148
0ad54     60 90 B1 FD | 	call	#__system____builtin_atof
0ad58     FD 14 02 F6 | 	mov	arg02, result1
0ad5c     14 13 02 F6 | 	mov	arg01, local06
0ad60     6C 88 B1 FD | 	call	#__system___float_mul
0ad64     FD 1E 02 F6 | 	mov	local01, result1
0ad68     1E 22 06 F6 | 	mov	local03, #30
0ad6c                 | LR__0942
0ad6c                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0ad6c     FF FF 7F FF 
0ad70     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0ad74     48 00 90 5D |  if_ne	jmp	#LR__0943
0ad78     00 C0 5F FF 
0ad7c     00 28 06 F6 | 	mov	local06, ##-1082130432
0ad80     37 00 00 FF 
0ad84     44 E4 05 F1 | 	add	objptr, ##28228
0ad88     F2 2E 02 FB | 	rdlong	local09, objptr
0ad8c     03 2E 66 F0 | 	shl	local09, #3
0ad90     02 00 00 FF 
0ad94     38 E4 85 F1 | 	sub	objptr, ##1080
0ad98     F2 2E 02 F1 | 	add	local09, objptr
0ad9c     17 13 02 FB | 	rdlong	arg01, local09
0ada0     35 00 00 FF 
0ada4     0C E4 85 F1 | 	sub	objptr, ##27148
0ada8     0C 90 B1 FD | 	call	#__system____builtin_atof
0adac     FD 14 02 F6 | 	mov	arg02, result1
0adb0     14 13 02 F6 | 	mov	arg01, local06
0adb4     18 88 B1 FD | 	call	#__system___float_mul
0adb8     FD 1E 02 F6 | 	mov	local01, result1
0adbc     1E 22 06 F6 | 	mov	local03, #30
0adc0                 | LR__0943
0adc0     0F 29 02 F6 | 	mov	local06, local01
0adc4     10 2B 02 F6 | 	mov	local07, local02
0adc8     11 27 02 F6 | 	mov	local05, local03
0adcc     4A 00 00 FF 
0add0     7C E4 05 F1 | 	add	objptr, ##38012
0add4     F2 1E 02 FB | 	rdlong	local01, objptr
0add8     0F 2F 02 F6 | 	mov	local09, local01
0addc     01 2E 66 F0 | 	shl	local09, #1
0ade0     0F 2F 02 F1 | 	add	local09, local01
0ade4     02 2E 66 F0 | 	shl	local09, #2
0ade8     03 00 00 FF 
0adec     00 E4 85 F1 | 	sub	objptr, ##1536
0adf0     F2 2E 02 F1 | 	add	local09, objptr
0adf4     17 29 62 FC | 	wrlong	local06, local09
0adf8     03 00 00 FF 
0adfc     00 E4 05 F1 | 	add	objptr, ##1536
0ae00     F2 2E 02 FB | 	rdlong	local09, objptr
0ae04     17 29 02 F6 | 	mov	local06, local09
0ae08     01 28 66 F0 | 	shl	local06, #1
0ae0c     17 29 02 F1 | 	add	local06, local09
0ae10     02 28 66 F0 | 	shl	local06, #2
0ae14     03 00 00 FF 
0ae18     00 E4 85 F1 | 	sub	objptr, ##1536
0ae1c     F2 28 02 F1 | 	add	local06, objptr
0ae20     04 28 06 F1 | 	add	local06, #4
0ae24     14 2B 62 FC | 	wrlong	local07, local06
0ae28     03 00 00 FF 
0ae2c     00 E4 05 F1 | 	add	objptr, ##1536
0ae30     F2 2E 02 FB | 	rdlong	local09, objptr
0ae34     17 2B 02 F6 | 	mov	local07, local09
0ae38     01 2A 66 F0 | 	shl	local07, #1
0ae3c     17 2B 02 F1 | 	add	local07, local09
0ae40     02 2A 66 F0 | 	shl	local07, #2
0ae44     03 00 00 FF 
0ae48     00 E4 85 F1 | 	sub	objptr, ##1536
0ae4c     F2 2A 02 F1 | 	add	local07, objptr
0ae50     08 2A 06 F1 | 	add	local07, #8
0ae54     15 27 62 FC | 	wrlong	local05, local07
0ae58     03 00 00 FF 
0ae5c     00 E4 05 F1 | 	add	objptr, ##1536
0ae60     F2 28 02 FB | 	rdlong	local06, objptr
0ae64     01 28 06 F1 | 	add	local06, #1
0ae68     F2 28 62 FC | 	wrlong	local06, objptr
0ae6c     13 00 00 FF 
0ae70     38 E4 85 F1 | 	sub	objptr, ##9784
0ae74     F2 28 02 FB | 	rdlong	local06, objptr
0ae78     01 28 06 F1 | 	add	local06, #1
0ae7c     F2 28 62 FC | 	wrlong	local06, objptr
0ae80     37 00 00 FF 
0ae84     44 E4 85 F1 | 	sub	objptr, ##28228
0ae88     A0 03 90 FD | 	jmp	#LR__0953
0ae8c                 | LR__0944
0ae8c     1F 22 06 F6 | 	mov	local03, #31
0ae90     37 00 00 FF 
0ae94     44 E4 05 F1 | 	add	objptr, ##28228
0ae98     F2 16 02 FB | 	rdlong	arg03, objptr
0ae9c     03 16 66 F0 | 	shl	arg03, #3
0aea0     02 00 00 FF 
0aea4     38 E4 85 F1 | 	sub	objptr, ##1080
0aea8     F2 16 02 F1 | 	add	arg03, objptr
0aeac     0B 13 02 FB | 	rdlong	arg01, arg03
0aeb0     35 00 00 FF 
0aeb4     0C E4 85 F1 | 	sub	objptr, ##27148
0aeb8     09 2D 02 F6 | 	mov	local08, arg01
0aebc     97 06 48 FB | 	callpa	#(@LR__0946-@LR__0945)>>2,fcache_load_ptr_
0aec0                 | LR__0945
0aec0     16 FB C9 FA | 	rdbyte	result1, local08 wz
0aec4     01 2C 06 51 |  if_ne	add	local08, #1
0aec8     F4 FF 9F 5D |  if_ne	jmp	#LR__0945
0aecc                 | LR__0946
0aecc     09 2D 82 F1 | 	sub	local08, arg01
0aed0     16 FB 01 F6 | 	mov	result1, local08
0aed4     51 00 00 FF 
0aed8     F0 E5 05 F1 | 	add	objptr, ##41968
0aedc     F2 FA 61 FC | 	wrlong	result1, objptr
0aee0     48 E4 85 F1 | 	sub	objptr, #72
0aee4     F2 12 02 FB | 	rdlong	arg01, objptr
0aee8     FD 12 82 F1 | 	sub	arg01, result1
0aeec     04 12 86 F1 | 	sub	arg01, #4
0aef0     03 12 26 F5 | 	andn	arg01, #3
0aef4     F2 12 62 FC | 	wrlong	arg01, objptr
0aef8     48 E4 05 F1 | 	add	objptr, #72
0aefc     F2 14 02 FB | 	rdlong	arg02, objptr
0af00     51 00 00 FF 
0af04     F0 E5 85 F1 | 	sub	objptr, ##41968
0af08     DC 26 B1 FD | 	call	#_pslpoke
0af0c                 | '     pslpoke memtop,l
0af0c                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0af0c     01 30 06 F6 | 	mov	local10, #1
0af10     51 00 00 FF 
0af14     F0 E5 05 F1 | 	add	objptr, ##41968
0af18     F2 32 02 FB | 	rdlong	local11, objptr
0af1c     51 00 00 FF 
0af20     F0 E5 85 F1 | 	sub	objptr, ##41968
0af24     01 32 06 F1 | 	add	local11, #1
0af28                 | LR__0947
0af28     19 31 52 F2 | 	cmps	local10, local11 wc
0af2c     5C 00 90 3D |  if_ae	jmp	#LR__0948
0af30     51 00 00 FF 
0af34     A8 E5 05 F1 | 	add	objptr, ##41896
0af38     F2 2A 02 FB | 	rdlong	local07, objptr
0af3c     03 2A 06 F1 | 	add	local07, #3
0af40     18 2B 02 F1 | 	add	local07, local10
0af44     1A 00 00 FF 
0af48     64 E5 85 F1 | 	sub	objptr, ##13668
0af4c     F2 2E 02 FB | 	rdlong	local09, objptr
0af50     03 2E 66 F0 | 	shl	local09, #3
0af54     02 00 00 FF 
0af58     38 E4 85 F1 | 	sub	objptr, ##1080
0af5c     F2 2E 02 F1 | 	add	local09, objptr
0af60     17 13 02 FB | 	rdlong	arg01, local09
0af64     18 15 02 F6 | 	mov	arg02, local10
0af68     01 16 06 F6 | 	mov	arg03, #1
0af6c     35 00 00 FF 
0af70     0C E4 85 F1 | 	sub	objptr, ##27148
0af74     38 7C B1 FD | 	call	#__system__Mid_S
0af78     FD 14 C2 FA | 	rdbyte	arg02, result1
0af7c     15 13 02 F6 | 	mov	arg01, local07
0af80     F4 26 B1 FD | 	call	#_pspoke
0af84     01 30 06 F1 | 	add	local10, #1
0af88     9C FF 9F FD | 	jmp	#LR__0947
0af8c                 | LR__0948
0af8c     51 00 00 FF 
0af90     A8 E5 05 F1 | 	add	objptr, ##41896
0af94     F2 1E 02 FB | 	rdlong	local01, objptr
0af98     2B 22 06 F6 | 	mov	local03, #43
0af9c     0F 29 02 F6 | 	mov	local06, local01
0afa0     10 2B 02 F6 | 	mov	local07, local02
0afa4     11 33 02 F6 | 	mov	local11, local03
0afa8     07 00 00 FF 
0afac     2C E5 85 F1 | 	sub	objptr, ##3884
0afb0     F2 30 02 FB | 	rdlong	local10, objptr
0afb4     18 2F 02 F6 | 	mov	local09, local10
0afb8     01 2E 66 F0 | 	shl	local09, #1
0afbc     18 2F 02 F1 | 	add	local09, local10
0afc0     02 2E 66 F0 | 	shl	local09, #2
0afc4     03 00 00 FF 
0afc8     00 E4 85 F1 | 	sub	objptr, ##1536
0afcc     F2 2E 02 F1 | 	add	local09, objptr
0afd0     17 29 62 FC | 	wrlong	local06, local09
0afd4     03 00 00 FF 
0afd8     00 E4 05 F1 | 	add	objptr, ##1536
0afdc     F2 30 02 FB | 	rdlong	local10, objptr
0afe0     18 2F 02 F6 | 	mov	local09, local10
0afe4     01 2E 66 F0 | 	shl	local09, #1
0afe8     18 2F 02 F1 | 	add	local09, local10
0afec     02 2E 66 F0 | 	shl	local09, #2
0aff0     03 00 00 FF 
0aff4     00 E4 85 F1 | 	sub	objptr, ##1536
0aff8     F2 2E 02 F1 | 	add	local09, objptr
0affc     04 2E 06 F1 | 	add	local09, #4
0b000     17 2B 62 FC | 	wrlong	local07, local09
0b004     03 00 00 FF 
0b008     00 E4 05 F1 | 	add	objptr, ##1536
0b00c     F2 30 02 FB | 	rdlong	local10, objptr
0b010     18 2F 02 F6 | 	mov	local09, local10
0b014     01 2E 66 F0 | 	shl	local09, #1
0b018     18 2F 02 F1 | 	add	local09, local10
0b01c     02 2E 66 F0 | 	shl	local09, #2
0b020     03 00 00 FF 
0b024     00 E4 85 F1 | 	sub	objptr, ##1536
0b028     F2 2E 02 F1 | 	add	local09, objptr
0b02c     08 2E 06 F1 | 	add	local09, #8
0b030     17 33 62 FC | 	wrlong	local11, local09
0b034     03 00 00 FF 
0b038     00 E4 05 F1 | 	add	objptr, ##1536
0b03c     F2 28 02 FB | 	rdlong	local06, objptr
0b040     01 28 06 F1 | 	add	local06, #1
0b044     F2 28 62 FC | 	wrlong	local06, objptr
0b048     13 00 00 FF 
0b04c     38 E4 85 F1 | 	sub	objptr, ##9784
0b050     F2 28 02 FB | 	rdlong	local06, objptr
0b054     01 28 06 F1 | 	add	local06, #1
0b058     F2 28 62 FC | 	wrlong	local06, objptr
0b05c     37 00 00 FF 
0b060     44 E4 85 F1 | 	sub	objptr, ##28228
0b064     C4 01 90 FD | 	jmp	#LR__0953
0b068                 | LR__0949
0b068     2C 22 06 F6 | 	mov	local03, #44
0b06c     37 00 00 FF 
0b070     44 E4 05 F1 | 	add	objptr, ##28228
0b074     F2 28 02 FB | 	rdlong	local06, objptr
0b078     03 28 66 F0 | 	shl	local06, #3
0b07c     02 00 00 FF 
0b080     38 E4 85 F1 | 	sub	objptr, ##1080
0b084     F2 28 02 F1 | 	add	local06, objptr
0b088     14 13 02 FB | 	rdlong	arg01, local06
0b08c     00 14 06 F6 | 	mov	arg02, #0
0b090     35 00 00 FF 
0b094     0C E4 85 F1 | 	sub	objptr, ##27148
0b098     AC 8B B1 FD | 	call	#__system____builtin_atoi
0b09c     FD 1E 02 F6 | 	mov	local01, result1
0b0a0     0F 29 02 F6 | 	mov	local06, local01
0b0a4     10 2B 02 F6 | 	mov	local07, local02
0b0a8     11 33 02 F6 | 	mov	local11, local03
0b0ac     4A 00 00 FF 
0b0b0     7C E4 05 F1 | 	add	objptr, ##38012
0b0b4     F2 30 02 FB | 	rdlong	local10, objptr
0b0b8     18 2F 02 F6 | 	mov	local09, local10
0b0bc     01 2E 66 F0 | 	shl	local09, #1
0b0c0     18 2F 02 F1 | 	add	local09, local10
0b0c4     02 2E 66 F0 | 	shl	local09, #2
0b0c8     03 00 00 FF 
0b0cc     00 E4 85 F1 | 	sub	objptr, ##1536
0b0d0     F2 2E 02 F1 | 	add	local09, objptr
0b0d4     17 29 62 FC | 	wrlong	local06, local09
0b0d8     03 00 00 FF 
0b0dc     00 E4 05 F1 | 	add	objptr, ##1536
0b0e0     F2 30 02 FB | 	rdlong	local10, objptr
0b0e4     18 2F 02 F6 | 	mov	local09, local10
0b0e8     01 2E 66 F0 | 	shl	local09, #1
0b0ec     18 2F 02 F1 | 	add	local09, local10
0b0f0     02 2E 66 F0 | 	shl	local09, #2
0b0f4     03 00 00 FF 
0b0f8     00 E4 85 F1 | 	sub	objptr, ##1536
0b0fc     F2 2E 02 F1 | 	add	local09, objptr
0b100     04 2E 06 F1 | 	add	local09, #4
0b104     17 2B 62 FC | 	wrlong	local07, local09
0b108     03 00 00 FF 
0b10c     00 E4 05 F1 | 	add	objptr, ##1536
0b110     F2 30 02 FB | 	rdlong	local10, objptr
0b114     18 2F 02 F6 | 	mov	local09, local10
0b118     01 2E 66 F0 | 	shl	local09, #1
0b11c     18 2F 02 F1 | 	add	local09, local10
0b120     02 2E 66 F0 | 	shl	local09, #2
0b124     03 00 00 FF 
0b128     00 E4 85 F1 | 	sub	objptr, ##1536
0b12c     F2 2E 02 F1 | 	add	local09, objptr
0b130     08 2E 06 F1 | 	add	local09, #8
0b134     17 33 62 FC | 	wrlong	local11, local09
0b138     03 00 00 FF 
0b13c     00 E4 05 F1 | 	add	objptr, ##1536
0b140     F2 28 02 FB | 	rdlong	local06, objptr
0b144     01 28 06 F1 | 	add	local06, #1
0b148     F2 28 62 FC | 	wrlong	local06, objptr
0b14c     13 00 00 FF 
0b150     38 E4 85 F1 | 	sub	objptr, ##9784
0b154     F2 28 02 FB | 	rdlong	local06, objptr
0b158     01 28 06 F1 | 	add	local06, #1
0b15c     F2 28 62 FC | 	wrlong	local06, objptr
0b160     37 00 00 FF 
0b164     44 E4 85 F1 | 	sub	objptr, ##28228
0b168     C0 00 90 FD | 	jmp	#LR__0953
0b16c                 | LR__0950
0b16c     12 13 02 F6 | 	mov	arg01, local04
0b170     B8 03 B0 FD | 	call	#_getvar
0b174     37 00 00 FF 
0b178     44 E4 05 F1 | 	add	objptr, ##28228
0b17c     F2 28 02 FB | 	rdlong	local06, objptr
0b180     01 28 06 F1 | 	add	local06, #1
0b184     F2 28 62 FC | 	wrlong	local06, objptr
0b188     37 00 00 FF 
0b18c     44 E4 85 F1 | 	sub	objptr, ##28228
0b190     98 00 90 FD | 	jmp	#LR__0953
0b194                 | LR__0951
0b194     37 00 00 FF 
0b198     44 E4 05 F1 | 	add	objptr, ##28228
0b19c     F2 28 02 FB | 	rdlong	local06, objptr
0b1a0     01 28 06 F1 | 	add	local06, #1
0b1a4     F2 28 62 FC | 	wrlong	local06, objptr
0b1a8     37 00 00 FF 
0b1ac     44 E4 85 F1 | 	sub	objptr, ##28228
0b1b0     58 F1 BF FD | 	call	#_expr
0b1b4                 | '     ct+=1
0b1b4                 | '     expr() 
0b1b4                 | '     if lparts(ct).token=token_rpar then ct+=1
0b1b4     37 00 00 FF 
0b1b8     44 E4 05 F1 | 	add	objptr, ##28228
0b1bc     F2 32 02 FB | 	rdlong	local11, objptr
0b1c0     03 32 66 F0 | 	shl	local11, #3
0b1c4     02 00 00 FF 
0b1c8     38 E4 85 F1 | 	sub	objptr, ##1080
0b1cc     F2 32 02 F1 | 	add	local11, objptr
0b1d0     04 32 06 F1 | 	add	local11, #4
0b1d4     19 33 02 FB | 	rdlong	local11, local11
0b1d8     14 32 0E F2 | 	cmp	local11, #20 wz
0b1dc     35 00 00 FF 
0b1e0     0C E4 85 F1 | 	sub	objptr, ##27148
0b1e4     44 00 90 5D |  if_ne	jmp	#LR__0953
0b1e8     37 00 00 FF 
0b1ec     44 E4 05 F1 | 	add	objptr, ##28228
0b1f0     F2 28 02 FB | 	rdlong	local06, objptr
0b1f4     01 28 06 F1 | 	add	local06, #1
0b1f8     F2 28 62 FC | 	wrlong	local06, objptr
0b1fc     37 00 00 FF 
0b200     44 E4 85 F1 | 	sub	objptr, ##28228
0b204     24 00 90 FD | 	jmp	#LR__0953
0b208                 | LR__0952
0b208     12 13 02 F6 | 	mov	arg01, local04
0b20c     28 00 B0 FD | 	call	#_getfun
0b210     37 00 00 FF 
0b214     44 E4 05 F1 | 	add	objptr, ##28228
0b218     F2 28 02 FB | 	rdlong	local06, objptr
0b21c     01 28 06 F1 | 	add	local06, #1
0b220     F2 28 62 FC | 	wrlong	local06, objptr
0b224     37 00 00 FF 
0b228     44 E4 85 F1 | 	sub	objptr, ##28228
0b22c                 | LR__0953
0b22c     A7 F0 03 F6 | 	mov	ptra, fp
0b230     B2 00 A0 FD | 	call	#popregs_
0b234                 | _getvalue_ret
0b234     2D 00 64 FD | 	ret
0b238                 | 
0b238                 | ' 
0b238                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
0b238                 | _getfun
0b238     0A 4A 05 F6 | 	mov	COUNT_, #10
0b23c     A8 00 A0 FD | 	call	#pushregs_
0b240                 | _getfun_enter
0b240     09 25 02 F6 | 	mov	local04, arg01
0b244     37 00 00 FF 
0b248     44 E4 05 F1 | 	add	objptr, ##28228
0b24c     F2 26 02 FB | 	rdlong	local05, objptr
0b250     13 29 02 F6 | 	mov	local06, local05
0b254     00 2A 06 F6 | 	mov	local07, #0
0b258                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
0b258                 | ' oldct=ct
0b258                 | ' numpar=0
0b258                 | '   
0b258                 | ' if lparts(ct+1).token=token_lpar then
0b258     01 26 06 F1 | 	add	local05, #1
0b25c     03 26 66 F0 | 	shl	local05, #3
0b260     02 00 00 FF 
0b264     38 E4 85 F1 | 	sub	objptr, ##1080
0b268     F2 26 02 F1 | 	add	local05, objptr
0b26c     04 26 06 F1 | 	add	local05, #4
0b270     13 27 02 FB | 	rdlong	local05, local05
0b274     15 26 0E F2 | 	cmp	local05, #21 wz
0b278     35 00 00 FF 
0b27c     0C E4 85 F1 | 	sub	objptr, ##27148
0b280     08 01 90 5D |  if_ne	jmp	#LR__0964
0b284     37 00 00 FF 
0b288     44 E4 05 F1 | 	add	objptr, ##28228
0b28c     F2 2C 02 FB | 	rdlong	local08, objptr
0b290     01 2C 06 F1 | 	add	local08, #1
0b294     F2 2C 62 FC | 	wrlong	local08, objptr
0b298     37 00 00 FF 
0b29c     44 E4 85 F1 | 	sub	objptr, ##28228
0b2a0                 | '   ct+=1 											' omit this lpar, this is for expr list
0b2a0                 | '   do
0b2a0                 | LR__0960
0b2a0     37 00 00 FF 
0b2a4     44 E4 05 F1 | 	add	objptr, ##28228
0b2a8     F2 26 02 FB | 	rdlong	local05, objptr
0b2ac     01 26 06 F1 | 	add	local05, #1
0b2b0     F2 26 62 FC | 	wrlong	local05, objptr
0b2b4                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0b2b4                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0b2b4     03 26 66 F0 | 	shl	local05, #3
0b2b8     02 00 00 FF 
0b2bc     38 E4 85 F1 | 	sub	objptr, ##1080
0b2c0     F2 26 02 F1 | 	add	local05, objptr
0b2c4     04 26 06 F1 | 	add	local05, #4
0b2c8     13 2D 02 FB | 	rdlong	local08, local05
0b2cc     15 2C 0E F2 | 	cmp	local08, #21 wz
0b2d0     35 00 00 FF 
0b2d4     0C E4 85 F1 | 	sub	objptr, ##27148
0b2d8     40 00 90 5D |  if_ne	jmp	#LR__0961
0b2dc     37 00 00 FF 
0b2e0     44 E4 05 F1 | 	add	objptr, ##28228
0b2e4     F2 2C 02 FB | 	rdlong	local08, objptr
0b2e8     01 2C 06 F1 | 	add	local08, #1
0b2ec     F2 2C 62 FC | 	wrlong	local08, objptr
0b2f0     37 00 00 FF 
0b2f4     44 E4 85 F1 | 	sub	objptr, ##28228
0b2f8     10 F0 BF FD | 	call	#_expr
0b2fc     37 00 00 FF 
0b300     44 E4 05 F1 | 	add	objptr, ##28228
0b304     F2 2C 02 FB | 	rdlong	local08, objptr
0b308     01 2C 06 F1 | 	add	local08, #1
0b30c     F2 2C 62 FC | 	wrlong	local08, objptr
0b310     37 00 00 FF 
0b314     44 E4 85 F1 | 	sub	objptr, ##28228
0b318     04 00 90 FD | 	jmp	#LR__0962
0b31c                 | LR__0961
0b31c     EC EF BF FD | 	call	#_expr
0b320                 | LR__0962
0b320     01 2A 06 F1 | 	add	local07, #1
0b324     37 00 00 FF 
0b328     44 E4 05 F1 | 	add	objptr, ##28228
0b32c     F2 26 02 FB | 	rdlong	local05, objptr
0b330     03 26 66 F0 | 	shl	local05, #3
0b334     02 00 00 FF 
0b338     38 E4 85 F1 | 	sub	objptr, ##1080
0b33c     F2 26 02 F1 | 	add	local05, objptr
0b340     04 26 06 F1 | 	add	local05, #4
0b344     13 2D 02 FB | 	rdlong	local08, local05
0b348     14 2C 0E F2 | 	cmp	local08, #20 wz
0b34c     35 00 00 FF 
0b350     0C E4 85 F1 | 	sub	objptr, ##27148
0b354     34 00 90 AD |  if_e	jmp	#LR__0963
0b358     37 00 00 FF 
0b35c     44 E4 05 F1 | 	add	objptr, ##28228
0b360     F2 2C 02 FB | 	rdlong	local08, objptr
0b364     03 2C 66 F0 | 	shl	local08, #3
0b368     02 00 00 FF 
0b36c     38 E4 85 F1 | 	sub	objptr, ##1080
0b370     F2 2C 02 F1 | 	add	local08, objptr
0b374     04 2C 06 F1 | 	add	local08, #4
0b378     16 2D 02 FB | 	rdlong	local08, local08
0b37c     FE 2D 0E F2 | 	cmp	local08, #510 wz
0b380     35 00 00 FF 
0b384     0C E4 85 F1 | 	sub	objptr, ##27148
0b388     14 FF 9F 5D |  if_ne	jmp	#LR__0960
0b38c                 | LR__0963
0b38c                 | LR__0964
0b38c     15 1F 02 F6 | 	mov	local01, local07
0b390     03 28 66 F0 | 	shl	local06, #3
0b394     35 00 00 FF 
0b398     0C E4 05 F1 | 	add	objptr, ##27148
0b39c     F2 28 02 F1 | 	add	local06, objptr
0b3a0     04 28 06 F1 | 	add	local06, #4
0b3a4     14 23 02 FB | 	rdlong	local03, local06
0b3a8     0F 2D 02 F6 | 	mov	local08, local01
0b3ac     10 2B 02 F6 | 	mov	local07, local02
0b3b0     11 29 02 F6 | 	mov	local06, local03
0b3b4     15 00 00 FF 
0b3b8     70 E4 05 F1 | 	add	objptr, ##10864
0b3bc     F2 26 02 FB | 	rdlong	local05, objptr
0b3c0     13 13 02 F6 | 	mov	arg01, local05
0b3c4     01 12 66 F0 | 	shl	arg01, #1
0b3c8     13 13 02 F1 | 	add	arg01, local05
0b3cc     02 12 66 F0 | 	shl	arg01, #2
0b3d0     03 00 00 FF 
0b3d4     00 E4 85 F1 | 	sub	objptr, ##1536
0b3d8     F2 12 02 F1 | 	add	arg01, objptr
0b3dc     09 2D 62 FC | 	wrlong	local08, arg01
0b3e0     03 00 00 FF 
0b3e4     00 E4 05 F1 | 	add	objptr, ##1536
0b3e8     F2 2C 02 FB | 	rdlong	local08, objptr
0b3ec     16 2F 02 F6 | 	mov	local09, local08
0b3f0     01 2E 66 F0 | 	shl	local09, #1
0b3f4     16 2F 02 F1 | 	add	local09, local08
0b3f8     02 2E 66 F0 | 	shl	local09, #2
0b3fc     03 00 00 FF 
0b400     00 E4 85 F1 | 	sub	objptr, ##1536
0b404     F2 2E 02 F1 | 	add	local09, objptr
0b408     04 2E 06 F1 | 	add	local09, #4
0b40c     17 2B 62 FC | 	wrlong	local07, local09
0b410     03 00 00 FF 
0b414     00 E4 05 F1 | 	add	objptr, ##1536
0b418     F2 2C 02 FB | 	rdlong	local08, objptr
0b41c     16 31 02 F6 | 	mov	local10, local08
0b420     01 30 66 F0 | 	shl	local10, #1
0b424     16 31 02 F1 | 	add	local10, local08
0b428     02 30 66 F0 | 	shl	local10, #2
0b42c     03 00 00 FF 
0b430     00 E4 85 F1 | 	sub	objptr, ##1536
0b434     F2 30 02 F1 | 	add	local10, objptr
0b438     08 30 06 F1 | 	add	local10, #8
0b43c     18 29 62 FC | 	wrlong	local06, local10
0b440     03 00 00 FF 
0b444     00 E4 05 F1 | 	add	objptr, ##1536
0b448     F2 2C 02 FB | 	rdlong	local08, objptr
0b44c     01 2C 06 F1 | 	add	local08, #1
0b450     F2 2C 62 FC | 	wrlong	local08, objptr
0b454     4A 00 00 FF 
0b458     7C E4 85 F1 | 	sub	objptr, ##38012
0b45c                 | ' 
0b45c                 | ' t2.result.uresult=numpar
0b45c                 | ' 
0b45c                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0b45c                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b45c                 | ' 
0b45c                 | '   
0b45c                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0b45c     FF FF 7F FF 
0b460     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0b464     B8 00 90 5D |  if_ne	jmp	#LR__0965
0b468     15 22 06 F6 | 	mov	local03, #21
0b46c     0F 2D 02 F6 | 	mov	local08, local01
0b470     10 2B 02 F6 | 	mov	local07, local02
0b474     11 29 02 F6 | 	mov	local06, local03
0b478     4A 00 00 FF 
0b47c     7C E4 05 F1 | 	add	objptr, ##38012
0b480     F2 26 02 FB | 	rdlong	local05, objptr
0b484     13 13 02 F6 | 	mov	arg01, local05
0b488     01 12 66 F0 | 	shl	arg01, #1
0b48c     13 13 02 F1 | 	add	arg01, local05
0b490     02 12 66 F0 | 	shl	arg01, #2
0b494     03 00 00 FF 
0b498     00 E4 85 F1 | 	sub	objptr, ##1536
0b49c     F2 12 02 F1 | 	add	arg01, objptr
0b4a0     09 2D 62 FC | 	wrlong	local08, arg01
0b4a4     03 00 00 FF 
0b4a8     00 E4 05 F1 | 	add	objptr, ##1536
0b4ac     F2 30 02 FB | 	rdlong	local10, objptr
0b4b0     18 2F 02 F6 | 	mov	local09, local10
0b4b4     01 2E 66 F0 | 	shl	local09, #1
0b4b8     18 2F 02 F1 | 	add	local09, local10
0b4bc     02 2E 66 F0 | 	shl	local09, #2
0b4c0     03 00 00 FF 
0b4c4     00 E4 85 F1 | 	sub	objptr, ##1536
0b4c8     F2 2E 02 F1 | 	add	local09, objptr
0b4cc     04 2E 06 F1 | 	add	local09, #4
0b4d0     17 2B 62 FC | 	wrlong	local07, local09
0b4d4     03 00 00 FF 
0b4d8     00 E4 05 F1 | 	add	objptr, ##1536
0b4dc     F2 2E 02 FB | 	rdlong	local09, objptr
0b4e0     17 31 02 F6 | 	mov	local10, local09
0b4e4     01 30 66 F0 | 	shl	local10, #1
0b4e8     17 31 02 F1 | 	add	local10, local09
0b4ec     02 30 66 F0 | 	shl	local10, #2
0b4f0     03 00 00 FF 
0b4f4     00 E4 85 F1 | 	sub	objptr, ##1536
0b4f8     F2 30 02 F1 | 	add	local10, objptr
0b4fc     08 30 06 F1 | 	add	local10, #8
0b500     18 29 62 FC | 	wrlong	local06, local10
0b504     03 00 00 FF 
0b508     00 E4 05 F1 | 	add	objptr, ##1536
0b50c     F2 2C 02 FB | 	rdlong	local08, objptr
0b510     01 2C 06 F1 | 	add	local08, #1
0b514     F2 2C 62 FC | 	wrlong	local08, objptr
0b518     4A 00 00 FF 
0b51c     7C E4 85 F1 | 	sub	objptr, ##38012
0b520                 | LR__0965
0b520     A7 F0 03 F6 | 	mov	ptra, fp
0b524     B2 00 A0 FD | 	call	#popregs_
0b528                 | _getfun_ret
0b528     2D 00 64 FD | 	ret
0b52c                 | 
0b52c                 | '   
0b52c                 | '   
0b52c                 | ' sub getvar(m as integer) 
0b52c                 | _getvar
0b52c     0A 4A 05 F6 | 	mov	COUNT_, #10
0b530     A8 00 A0 FD | 	call	#pushregs_
0b534                 | _getvar_enter
0b534     09 25 02 F6 | 	mov	local04, arg01
0b538     37 00 00 FF 
0b53c     44 E4 05 F1 | 	add	objptr, ##28228
0b540     F2 14 02 FB | 	rdlong	arg02, objptr
0b544     03 14 66 F0 | 	shl	arg02, #3
0b548     02 00 00 FF 
0b54c     38 E4 85 F1 | 	sub	objptr, ##1080
0b550     F2 14 02 F1 | 	add	arg02, objptr
0b554     0A 27 02 FB | 	rdlong	local05, arg02
0b558     13 13 02 F6 | 	mov	arg01, local05
0b55c     01 14 06 F6 | 	mov	arg02, #1
0b560     35 00 00 FF 
0b564     0C E4 85 F1 | 	sub	objptr, ##27148
0b568     B4 75 B1 FD | 	call	#__system__Right_S
0b56c     FD 28 02 F6 | 	mov	local06, result1
0b570     01 2A 66 F6 | 	neg	local07, #1
0b574                 | ' 
0b574                 | ' varname$=lparts(ct).part$
0b574                 | ' suffix$=right$(varname$,1)
0b574                 | ' j=-1
0b574                 | ' 
0b574                 | ' for i=0 to varnum-1
0b574     00 2C 06 F6 | 	mov	local08, #0
0b578     35 00 00 FF 
0b57c     08 E4 05 F1 | 	add	objptr, ##27144
0b580     F2 2E 02 FB | 	rdlong	local09, objptr
0b584     35 00 00 FF 
0b588     08 E4 85 F1 | 	sub	objptr, ##27144
0b58c                 | LR__0970
0b58c     17 2D 52 F2 | 	cmps	local08, local09 wc
0b590     38 00 90 3D |  if_ae	jmp	#LR__0971
0b594                 | '   if variables(i).name=varname$ then j=i : exit
0b594     16 15 02 F6 | 	mov	arg02, local08
0b598     04 14 66 F0 | 	shl	arg02, #4
0b59c     14 00 00 FF 
0b5a0     F8 E5 05 F1 | 	add	objptr, ##10744
0b5a4     F2 14 02 F1 | 	add	arg02, objptr
0b5a8     0A 13 02 FB | 	rdlong	arg01, arg02
0b5ac     13 15 02 F6 | 	mov	arg02, local05
0b5b0     14 00 00 FF 
0b5b4     F8 E5 85 F1 | 	sub	objptr, ##10744
0b5b8     88 54 B1 FD | 	call	#__system___string_cmp
0b5bc     00 FA 0D F2 | 	cmp	result1, #0 wz
0b5c0     16 2B 02 A6 |  if_e	mov	local07, local08
0b5c4     01 2C 06 51 |  if_ne	add	local08, #1
0b5c8     C0 FF 9F 5D |  if_ne	jmp	#LR__0970
0b5cc                 | LR__0971
0b5cc                 | ' if  j=-1 andalso varnum<maxvars then   
0b5cc     FF FF 7F FF 
0b5d0     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
0b5d4     A8 00 90 5D |  if_ne	jmp	#LR__0972
0b5d8     35 00 00 FF 
0b5dc     08 E4 05 F1 | 	add	objptr, ##27144
0b5e0     F2 2E 02 FB | 	rdlong	local09, objptr
0b5e4     35 00 00 FF 
0b5e8     08 E4 85 F1 | 	sub	objptr, ##27144
0b5ec     02 00 00 FF 
0b5f0     00 2E 56 F2 | 	cmps	local09, ##1024 wc
0b5f4     88 00 90 3D |  if_ae	jmp	#LR__0972
0b5f8     35 00 00 FF 
0b5fc     08 E4 05 F1 | 	add	objptr, ##27144
0b600     F2 2E 02 FB | 	rdlong	local09, objptr
0b604     04 2E 66 F0 | 	shl	local09, #4
0b608     20 00 00 FF 
0b60c     10 E4 85 F1 | 	sub	objptr, ##16400
0b610     F2 2E 02 F1 | 	add	local09, objptr
0b614     17 27 62 FC | 	wrlong	local05, local09
0b618     20 00 00 FF 
0b61c     10 E4 05 F1 | 	add	objptr, ##16400
0b620     F2 2E 02 FB | 	rdlong	local09, objptr
0b624     04 2E 66 F0 | 	shl	local09, #4
0b628     20 00 00 FF 
0b62c     10 E4 85 F1 | 	sub	objptr, ##16400
0b630     F2 2E 02 F1 | 	add	local09, objptr
0b634     04 2E 06 F1 | 	add	local09, #4
0b638     17 01 68 FC | 	wrlong	#0, local09
0b63c     20 00 00 FF 
0b640     10 E4 05 F1 | 	add	objptr, ##16400
0b644     F2 2E 02 FB | 	rdlong	local09, objptr
0b648     04 2E 66 F0 | 	shl	local09, #4
0b64c     20 00 00 FF 
0b650     10 E4 85 F1 | 	sub	objptr, ##16400
0b654     F2 2E 02 F1 | 	add	local09, objptr
0b658     0C 2E 06 F1 | 	add	local09, #12
0b65c     17 39 68 FC | 	wrlong	#28, local09
0b660     20 00 00 FF 
0b664     10 E4 05 F1 | 	add	objptr, ##16400
0b668     F2 2E 02 FB | 	rdlong	local09, objptr
0b66c     17 2B 02 F6 | 	mov	local07, local09
0b670     01 2E 06 F1 | 	add	local09, #1
0b674     F2 2E 62 FC | 	wrlong	local09, objptr
0b678     35 00 00 FF 
0b67c     08 E4 85 F1 | 	sub	objptr, ##27144
0b680                 | LR__0972
0b680     00 2E 06 F6 | 	mov	local09, #0
0b684                 | ' numpar=0
0b684                 | ' ' check if it is an array
0b684                 | ' 
0b684                 | ' if lparts(ct+1).token=token_lpar then
0b684     37 00 00 FF 
0b688     44 E4 05 F1 | 	add	objptr, ##28228
0b68c     F2 2C 02 FB | 	rdlong	local08, objptr
0b690     01 2C 06 F1 | 	add	local08, #1
0b694     03 2C 66 F0 | 	shl	local08, #3
0b698     02 00 00 FF 
0b69c     38 E4 85 F1 | 	sub	objptr, ##1080
0b6a0     F2 2C 02 F1 | 	add	local08, objptr
0b6a4     04 2C 06 F1 | 	add	local08, #4
0b6a8     16 2D 02 FB | 	rdlong	local08, local08
0b6ac     15 2C 0E F2 | 	cmp	local08, #21 wz
0b6b0     35 00 00 FF 
0b6b4     0C E4 85 F1 | 	sub	objptr, ##27148
0b6b8     08 01 90 5D |  if_ne	jmp	#LR__0977
0b6bc     37 00 00 FF 
0b6c0     44 E4 05 F1 | 	add	objptr, ##28228
0b6c4     F2 30 02 FB | 	rdlong	local10, objptr
0b6c8     01 30 06 F1 | 	add	local10, #1
0b6cc     F2 30 62 FC | 	wrlong	local10, objptr
0b6d0     37 00 00 FF 
0b6d4     44 E4 85 F1 | 	sub	objptr, ##28228
0b6d8                 | '   ct+=1 											' omit this lpar, this is for expr list
0b6d8                 | '   do
0b6d8                 | LR__0973
0b6d8     37 00 00 FF 
0b6dc     44 E4 05 F1 | 	add	objptr, ##28228
0b6e0     F2 2C 02 FB | 	rdlong	local08, objptr
0b6e4     01 2C 06 F1 | 	add	local08, #1
0b6e8     F2 2C 62 FC | 	wrlong	local08, objptr
0b6ec                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0b6ec                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0b6ec     03 2C 66 F0 | 	shl	local08, #3
0b6f0     02 00 00 FF 
0b6f4     38 E4 85 F1 | 	sub	objptr, ##1080
0b6f8     F2 2C 02 F1 | 	add	local08, objptr
0b6fc     04 2C 06 F1 | 	add	local08, #4
0b700     16 31 02 FB | 	rdlong	local10, local08
0b704     15 30 0E F2 | 	cmp	local10, #21 wz
0b708     35 00 00 FF 
0b70c     0C E4 85 F1 | 	sub	objptr, ##27148
0b710     40 00 90 5D |  if_ne	jmp	#LR__0974
0b714     37 00 00 FF 
0b718     44 E4 05 F1 | 	add	objptr, ##28228
0b71c     F2 30 02 FB | 	rdlong	local10, objptr
0b720     01 30 06 F1 | 	add	local10, #1
0b724     F2 30 62 FC | 	wrlong	local10, objptr
0b728     37 00 00 FF 
0b72c     44 E4 85 F1 | 	sub	objptr, ##28228
0b730     D8 EB BF FD | 	call	#_expr
0b734     37 00 00 FF 
0b738     44 E4 05 F1 | 	add	objptr, ##28228
0b73c     F2 30 02 FB | 	rdlong	local10, objptr
0b740     01 30 06 F1 | 	add	local10, #1
0b744     F2 30 62 FC | 	wrlong	local10, objptr
0b748     37 00 00 FF 
0b74c     44 E4 85 F1 | 	sub	objptr, ##28228
0b750     04 00 90 FD | 	jmp	#LR__0975
0b754                 | LR__0974
0b754     B4 EB BF FD | 	call	#_expr
0b758                 | LR__0975
0b758     01 2E 06 F1 | 	add	local09, #1
0b75c     37 00 00 FF 
0b760     44 E4 05 F1 | 	add	objptr, ##28228
0b764     F2 2C 02 FB | 	rdlong	local08, objptr
0b768     03 2C 66 F0 | 	shl	local08, #3
0b76c     02 00 00 FF 
0b770     38 E4 85 F1 | 	sub	objptr, ##1080
0b774     F2 2C 02 F1 | 	add	local08, objptr
0b778     04 2C 06 F1 | 	add	local08, #4
0b77c     16 31 02 FB | 	rdlong	local10, local08
0b780     14 30 0E F2 | 	cmp	local10, #20 wz
0b784     35 00 00 FF 
0b788     0C E4 85 F1 | 	sub	objptr, ##27148
0b78c     34 00 90 AD |  if_e	jmp	#LR__0976
0b790     37 00 00 FF 
0b794     44 E4 05 F1 | 	add	objptr, ##28228
0b798     F2 30 02 FB | 	rdlong	local10, objptr
0b79c     03 30 66 F0 | 	shl	local10, #3
0b7a0     02 00 00 FF 
0b7a4     38 E4 85 F1 | 	sub	objptr, ##1080
0b7a8     F2 30 02 F1 | 	add	local10, objptr
0b7ac     04 30 06 F1 | 	add	local10, #4
0b7b0     18 31 02 FB | 	rdlong	local10, local10
0b7b4     FE 31 0E F2 | 	cmp	local10, #510 wz
0b7b8     35 00 00 FF 
0b7bc     0C E4 85 F1 | 	sub	objptr, ##27148
0b7c0     14 FF 9F 5D |  if_ne	jmp	#LR__0973
0b7c4                 | LR__0976
0b7c4                 | LR__0977
0b7c4     17 21 02 F6 | 	mov	local02, local09
0b7c8     11 22 06 F6 | 	mov	local03, #17
0b7cc     15 1F 02 F6 | 	mov	local01, local07
0b7d0     0F 31 02 F6 | 	mov	local10, local01
0b7d4     10 2F 02 F6 | 	mov	local09, local02
0b7d8     11 2D 02 F6 | 	mov	local08, local03
0b7dc     4A 00 00 FF 
0b7e0     7C E4 05 F1 | 	add	objptr, ##38012
0b7e4     F2 2A 02 FB | 	rdlong	local07, objptr
0b7e8     15 29 02 F6 | 	mov	local06, local07
0b7ec     01 28 66 F0 | 	shl	local06, #1
0b7f0     15 29 02 F1 | 	add	local06, local07
0b7f4     02 28 66 F0 | 	shl	local06, #2
0b7f8     03 00 00 FF 
0b7fc     00 E4 85 F1 | 	sub	objptr, ##1536
0b800     F2 28 02 F1 | 	add	local06, objptr
0b804     14 31 62 FC | 	wrlong	local10, local06
0b808     03 00 00 FF 
0b80c     00 E4 05 F1 | 	add	objptr, ##1536
0b810     F2 30 02 FB | 	rdlong	local10, objptr
0b814     18 27 02 F6 | 	mov	local05, local10
0b818     01 26 66 F0 | 	shl	local05, #1
0b81c     18 27 02 F1 | 	add	local05, local10
0b820     02 26 66 F0 | 	shl	local05, #2
0b824     03 00 00 FF 
0b828     00 E4 85 F1 | 	sub	objptr, ##1536
0b82c     F2 26 02 F1 | 	add	local05, objptr
0b830     04 26 06 F1 | 	add	local05, #4
0b834     13 2F 62 FC | 	wrlong	local09, local05
0b838     03 00 00 FF 
0b83c     00 E4 05 F1 | 	add	objptr, ##1536
0b840     F2 30 02 FB | 	rdlong	local10, objptr
0b844     18 FB 01 F6 | 	mov	result1, local10
0b848     01 FA 65 F0 | 	shl	result1, #1
0b84c     18 FB 01 F1 | 	add	result1, local10
0b850     02 FA 65 F0 | 	shl	result1, #2
0b854     03 00 00 FF 
0b858     00 E4 85 F1 | 	sub	objptr, ##1536
0b85c     F2 FA 01 F1 | 	add	result1, objptr
0b860     08 FA 05 F1 | 	add	result1, #8
0b864     FD 2C 62 FC | 	wrlong	local08, result1
0b868     03 00 00 FF 
0b86c     00 E4 05 F1 | 	add	objptr, ##1536
0b870     F2 30 02 FB | 	rdlong	local10, objptr
0b874     01 30 06 F1 | 	add	local10, #1
0b878     F2 30 62 FC | 	wrlong	local10, objptr
0b87c     4A 00 00 FF 
0b880     7C E4 85 F1 | 	sub	objptr, ##38012
0b884                 | ' 
0b884                 | ' t2.result.twowords(1)=numpar
0b884                 | ' 
0b884                 | ' 
0b884                 | ' 
0b884                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0b884                 | ' 
0b884                 | ' 
0b884                 | '  
0b884                 | ' 
0b884                 | ' 701 
0b884                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b884                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0b884     FF FF 7F FF 
0b888     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0b88c     B8 00 90 5D |  if_ne	jmp	#LR__0978
0b890     15 22 06 F6 | 	mov	local03, #21
0b894     0F 31 02 F6 | 	mov	local10, local01
0b898     10 2F 02 F6 | 	mov	local09, local02
0b89c     11 2D 02 F6 | 	mov	local08, local03
0b8a0     4A 00 00 FF 
0b8a4     7C E4 05 F1 | 	add	objptr, ##38012
0b8a8     F2 2A 02 FB | 	rdlong	local07, objptr
0b8ac     15 29 02 F6 | 	mov	local06, local07
0b8b0     01 28 66 F0 | 	shl	local06, #1
0b8b4     15 29 02 F1 | 	add	local06, local07
0b8b8     02 28 66 F0 | 	shl	local06, #2
0b8bc     03 00 00 FF 
0b8c0     00 E4 85 F1 | 	sub	objptr, ##1536
0b8c4     F2 28 02 F1 | 	add	local06, objptr
0b8c8     14 31 62 FC | 	wrlong	local10, local06
0b8cc     03 00 00 FF 
0b8d0     00 E4 05 F1 | 	add	objptr, ##1536
0b8d4     F2 1E 02 FB | 	rdlong	local01, objptr
0b8d8     0F 27 02 F6 | 	mov	local05, local01
0b8dc     01 26 66 F0 | 	shl	local05, #1
0b8e0     0F 27 02 F1 | 	add	local05, local01
0b8e4     02 26 66 F0 | 	shl	local05, #2
0b8e8     03 00 00 FF 
0b8ec     00 E4 85 F1 | 	sub	objptr, ##1536
0b8f0     F2 26 02 F1 | 	add	local05, objptr
0b8f4     04 26 06 F1 | 	add	local05, #4
0b8f8     13 2F 62 FC | 	wrlong	local09, local05
0b8fc     03 00 00 FF 
0b900     00 E4 05 F1 | 	add	objptr, ##1536
0b904     F2 1E 02 FB | 	rdlong	local01, objptr
0b908     0F FB 01 F6 | 	mov	result1, local01
0b90c     01 FA 65 F0 | 	shl	result1, #1
0b910     0F FB 01 F1 | 	add	result1, local01
0b914     02 FA 65 F0 | 	shl	result1, #2
0b918     03 00 00 FF 
0b91c     00 E4 85 F1 | 	sub	objptr, ##1536
0b920     F2 FA 01 F1 | 	add	result1, objptr
0b924     08 FA 05 F1 | 	add	result1, #8
0b928     FD 2C 62 FC | 	wrlong	local08, result1
0b92c     03 00 00 FF 
0b930     00 E4 05 F1 | 	add	objptr, ##1536
0b934     F2 30 02 FB | 	rdlong	local10, objptr
0b938     01 30 06 F1 | 	add	local10, #1
0b93c     F2 30 62 FC | 	wrlong	local10, objptr
0b940     4A 00 00 FF 
0b944     7C E4 85 F1 | 	sub	objptr, ##38012
0b948                 | LR__0978
0b948     A7 F0 03 F6 | 	mov	ptra, fp
0b94c     B2 00 A0 FD | 	call	#popregs_
0b950                 | _getvar_ret
0b950     2D 00 64 FD | 	ret
0b954                 | 
0b954                 | ' 
0b954                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b954                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0b954                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b954                 | ' 
0b954                 | ' 
0b954                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b954                 | ' '                                                                                                                                       -
0b954                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0b954                 | ' '                                                                                                                                       -
0b954                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b954                 | ' 
0b954                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b954                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0b954                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b954                 | ' 
0b954                 | ' function execute_line (astart=0 as integer) as integer
0b954                 | _execute_line
0b954     04 4A 05 F6 | 	mov	COUNT_, #4
0b958     A8 00 A0 FD | 	call	#pushregs_
0b95c     50 00 00 FF 
0b960     B8 E4 05 F1 | 	add	objptr, ##41144
0b964     F2 00 68 FC | 	wrlong	#0, objptr
0b968                 | ' runptr2=0
0b968                 | ' for lineptr_e=astart to lineptr-1
0b968     06 00 00 FF 
0b96c     38 E4 85 F1 | 	sub	objptr, ##3128
0b970     F2 12 62 FC | 	wrlong	arg01, objptr
0b974     04 E4 85 F1 | 	sub	objptr, #4
0b978     F2 1E 02 FB | 	rdlong	local01, objptr
0b97c     4A 00 00 FF 
0b980     7C E4 85 F1 | 	sub	objptr, ##38012
0b984                 | LR__0980
0b984     4A 00 00 FF 
0b988     80 E4 05 F1 | 	add	objptr, ##38016
0b98c     F2 FA 01 FB | 	rdlong	result1, objptr
0b990     4A 00 00 FF 
0b994     80 E4 85 F1 | 	sub	objptr, ##38016
0b998     0F FB 51 F2 | 	cmps	result1, local01 wc
0b99c     98 00 90 3D |  if_ae	jmp	#LR__0981
0b9a0     4A 00 00 FF 
0b9a4     80 E4 05 F1 | 	add	objptr, ##38016
0b9a8     F2 FA 01 FB | 	rdlong	result1, objptr
0b9ac     FD 20 02 F6 | 	mov	local02, result1
0b9b0     01 20 66 F0 | 	shl	local02, #1
0b9b4     FD 20 02 F1 | 	add	local02, result1
0b9b8     02 20 66 F0 | 	shl	local02, #2
0b9bc     03 00 00 FF 
0b9c0     04 E4 85 F1 | 	sub	objptr, ##1540
0b9c4     F2 20 02 F1 | 	add	local02, objptr
0b9c8     08 20 06 F1 | 	add	local02, #8
0b9cc     10 21 02 FB | 	rdlong	local02, local02
0b9d0     10 21 E2 F8 | 	getbyte	local02, local02, #0
0b9d4     02 20 66 F0 | 	shl	local02, #2
0b9d8     04 00 00 FF 
0b9dc     1C E4 85 F1 | 	sub	objptr, ##2076
0b9e0     F2 20 02 F1 | 	add	local02, objptr
0b9e4     10 21 02 FB | 	rdlong	local02, local02
0b9e8     10 23 02 F6 | 	mov	local03, local02
0b9ec     13 20 46 F7 | 	zerox	local02, #19
0b9f0     14 22 46 F0 | 	shr	local03, #20
0b9f4     02 22 66 F0 | 	shl	local03, #2
0b9f8     ED 22 02 F1 | 	add	local03, __methods__
0b9fc     11 23 02 FB | 	rdlong	local03, local03
0ba00     43 00 00 FF 
0ba04     60 E4 85 F1 | 	sub	objptr, ##34400
0ba08     F2 24 02 F6 | 	mov	local04, objptr
0ba0c     10 E5 01 F6 | 	mov	objptr, local02
0ba10     2D 22 62 FD | 	call	local03
0ba14     12 E5 01 F6 | 	mov	objptr, local04
0ba18     4A 00 00 FF 
0ba1c     80 E4 05 F1 | 	add	objptr, ##38016
0ba20     F2 24 02 FB | 	rdlong	local04, objptr
0ba24     01 24 06 F1 | 	add	local04, #1
0ba28     F2 24 62 FC | 	wrlong	local04, objptr
0ba2c     4A 00 00 FF 
0ba30     80 E4 85 F1 | 	sub	objptr, ##38016
0ba34     4C FF 9F FD | 	jmp	#LR__0980
0ba38                 | LR__0981
0ba38                 | ' return runptr2
0ba38     50 00 00 FF 
0ba3c     B8 E4 05 F1 | 	add	objptr, ##41144
0ba40     F2 FA 01 FB | 	rdlong	result1, objptr
0ba44     50 00 00 FF 
0ba48     B8 E4 85 F1 | 	sub	objptr, ##41144
0ba4c     A7 F0 03 F6 | 	mov	ptra, fp
0ba50     B2 00 A0 FD | 	call	#popregs_
0ba54                 | _execute_line_ret
0ba54     2D 00 64 FD | 	ret
0ba58                 | 
0ba58                 | ' 
0ba58                 | ' 
0ba58                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0ba58                 | ' 
0ba58                 | ' function pop() as expr_result
0ba58                 | _pop
0ba58                 | ' 
0ba58                 | ' if stackpointer=0 then
0ba58     43 00 00 FF 
0ba5c     58 E4 05 F1 | 	add	objptr, ##34392
0ba60     F2 FA 09 FB | 	rdlong	result1, objptr wz
0ba64     43 00 00 FF 
0ba68     58 E4 85 F1 | 	sub	objptr, ##34392
0ba6c     FF 04 06 A6 |  if_e	mov	_var03, #255
0ba70     18 00 06 A6 |  if_e	mov	_var01, #24
0ba74     68 00 90 AD |  if_e	jmp	#LR__0990
0ba78     43 00 00 FF 
0ba7c     58 E4 05 F1 | 	add	objptr, ##34392
0ba80     F2 FA 01 FB | 	rdlong	result1, objptr
0ba84     01 FA 85 F1 | 	sub	result1, #1
0ba88     F2 FA 61 FC | 	wrlong	result1, objptr
0ba8c     FD FE 01 F6 | 	mov	result3, result1
0ba90     01 FE 65 F0 | 	shl	result3, #1
0ba94     FD FE 01 F1 | 	add	result3, result1
0ba98     02 FE 65 F0 | 	shl	result3, #2
0ba9c     0C 00 00 FF 
0baa0     0C E4 85 F1 | 	sub	objptr, ##6156
0baa4     F2 FE 01 F1 | 	add	result3, objptr
0baa8     FF 00 02 FB | 	rdlong	_var01, result3
0baac     04 FE 05 F1 | 	add	result3, #4
0bab0     FF FE 01 FB | 	rdlong	result3, result3
0bab4     FD FC 01 F6 | 	mov	result2, result1
0bab8     01 FC 65 F0 | 	shl	result2, #1
0babc     FD FC 01 F1 | 	add	result2, result1
0bac0     02 FC 65 F0 | 	shl	result2, #2
0bac4     F2 FC 01 F1 | 	add	result2, objptr
0bac8     08 FC 05 F1 | 	add	result2, #8
0bacc     FE FA 01 FB | 	rdlong	result1, result2
0bad0     FF 02 02 F6 | 	mov	_var02, result3
0bad4     FD 04 02 F6 | 	mov	_var03, result1
0bad8     37 00 00 FF 
0badc     4C E4 85 F1 | 	sub	objptr, ##28236
0bae0                 | LR__0990
0bae0                 | ' return t1
0bae0     01 FD 01 F6 | 	mov	result2, _var02
0bae4     02 FF 01 F6 | 	mov	result3, _var03
0bae8     00 FB 01 F6 | 	mov	result1, _var01
0baec                 | _pop_ret
0baec     2D 00 64 FD | 	ret
0baf0                 | 
0baf0                 | ' 
0baf0                 | ' sub push(t1 as expr_result )
0baf0                 | _push
0baf0                 | ' 
0baf0                 | ' 'print "In push: "; t1.result_type
0baf0                 | ' 'print "In push: "; t1.result.uresult
0baf0                 | ' 
0baf0                 | ' if stackpointer<maxstack then 
0baf0     43 00 00 FF 
0baf4     58 E4 05 F1 | 	add	objptr, ##34392
0baf8     F2 00 02 FB | 	rdlong	_var01, objptr
0bafc     43 00 00 FF 
0bb00     58 E4 85 F1 | 	sub	objptr, ##34392
0bb04     01 00 00 FF 
0bb08     00 00 56 F2 | 	cmps	_var01, ##512 wc
0bb0c     BC 00 90 3D |  if_ae	jmp	#LR__1000
0bb10     09 01 02 FB | 	rdlong	_var01, arg01
0bb14     04 12 06 F1 | 	add	arg01, #4
0bb18     09 03 02 FB | 	rdlong	_var02, arg01
0bb1c     04 12 06 F1 | 	add	arg01, #4
0bb20     09 13 02 FB | 	rdlong	arg01, arg01
0bb24     43 00 00 FF 
0bb28     58 E4 05 F1 | 	add	objptr, ##34392
0bb2c     F2 04 02 FB | 	rdlong	_var03, objptr
0bb30     02 07 02 F6 | 	mov	_var04, _var03
0bb34     01 06 66 F0 | 	shl	_var04, #1
0bb38     02 07 02 F1 | 	add	_var04, _var03
0bb3c     02 06 66 F0 | 	shl	_var04, #2
0bb40     0C 00 00 FF 
0bb44     0C E4 85 F1 | 	sub	objptr, ##6156
0bb48     F2 06 02 F1 | 	add	_var04, objptr
0bb4c     03 01 62 FC | 	wrlong	_var01, _var04
0bb50     0C 00 00 FF 
0bb54     0C E4 05 F1 | 	add	objptr, ##6156
0bb58     F2 06 02 FB | 	rdlong	_var04, objptr
0bb5c     03 05 02 F6 | 	mov	_var03, _var04
0bb60     01 04 66 F0 | 	shl	_var03, #1
0bb64     03 05 02 F1 | 	add	_var03, _var04
0bb68     02 04 66 F0 | 	shl	_var03, #2
0bb6c     0C 00 00 FF 
0bb70     0C E4 85 F1 | 	sub	objptr, ##6156
0bb74     F2 04 02 F1 | 	add	_var03, objptr
0bb78     04 04 06 F1 | 	add	_var03, #4
0bb7c     02 03 62 FC | 	wrlong	_var02, _var03
0bb80     0C 00 00 FF 
0bb84     0C E4 05 F1 | 	add	objptr, ##6156
0bb88     F2 06 02 FB | 	rdlong	_var04, objptr
0bb8c     03 05 02 F6 | 	mov	_var03, _var04
0bb90     01 04 66 F0 | 	shl	_var03, #1
0bb94     03 05 02 F1 | 	add	_var03, _var04
0bb98     02 04 66 F0 | 	shl	_var03, #2
0bb9c     0C 00 00 FF 
0bba0     0C E4 85 F1 | 	sub	objptr, ##6156
0bba4     F2 04 02 F1 | 	add	_var03, objptr
0bba8     08 04 06 F1 | 	add	_var03, #8
0bbac     02 13 62 FC | 	wrlong	arg01, _var03
0bbb0     0C 00 00 FF 
0bbb4     0C E4 05 F1 | 	add	objptr, ##6156
0bbb8     F2 00 02 FB | 	rdlong	_var01, objptr
0bbbc     01 00 06 F1 | 	add	_var01, #1
0bbc0     F2 00 62 FC | 	wrlong	_var01, objptr
0bbc4     43 00 00 FF 
0bbc8     58 E4 85 F1 | 	sub	objptr, ##34392
0bbcc                 | LR__1000
0bbcc                 | _push_ret
0bbcc     2D 00 64 FD | 	ret
0bbd0                 | 
0bbd0                 | ' 
0bbd0                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
0bbd0                 | ' 
0bbd0                 | ' sub do_push
0bbd0                 | _do_push
0bbd0                 | ' if stackpointer<maxstack then 
0bbd0     43 00 00 FF 
0bbd4     58 E4 05 F1 | 	add	objptr, ##34392
0bbd8     F2 00 02 FB | 	rdlong	_var01, objptr
0bbdc     43 00 00 FF 
0bbe0     58 E4 85 F1 | 	sub	objptr, ##34392
0bbe4     01 00 00 FF 
0bbe8     00 00 56 F2 | 	cmps	_var01, ##512 wc
0bbec     F8 00 90 3D |  if_ae	jmp	#LR__1010
0bbf0     4A 00 00 FF 
0bbf4     80 E4 05 F1 | 	add	objptr, ##38016
0bbf8     F2 02 02 FB | 	rdlong	_var02, objptr
0bbfc     01 05 02 F6 | 	mov	_var03, _var02
0bc00     01 04 66 F0 | 	shl	_var03, #1
0bc04     01 05 02 F1 | 	add	_var03, _var02
0bc08     02 04 66 F0 | 	shl	_var03, #2
0bc0c     03 00 00 FF 
0bc10     04 E4 85 F1 | 	sub	objptr, ##1540
0bc14     F2 04 02 F1 | 	add	_var03, objptr
0bc18     02 01 02 FB | 	rdlong	_var01, _var03
0bc1c     04 04 06 F1 | 	add	_var03, #4
0bc20     02 07 02 FB | 	rdlong	_var04, _var03
0bc24     01 05 02 F6 | 	mov	_var03, _var02
0bc28     01 04 66 F0 | 	shl	_var03, #1
0bc2c     01 05 02 F1 | 	add	_var03, _var02
0bc30     02 04 66 F0 | 	shl	_var03, #2
0bc34     F2 04 02 F1 | 	add	_var03, objptr
0bc38     08 04 06 F1 | 	add	_var03, #8
0bc3c     02 03 02 FB | 	rdlong	_var02, _var03
0bc40     04 00 00 FF 
0bc44     24 E4 85 F1 | 	sub	objptr, ##2084
0bc48     F2 04 02 FB | 	rdlong	_var03, objptr
0bc4c     02 09 02 F6 | 	mov	_var05, _var03
0bc50     01 08 66 F0 | 	shl	_var05, #1
0bc54     02 09 02 F1 | 	add	_var05, _var03
0bc58     02 08 66 F0 | 	shl	_var05, #2
0bc5c     0C 00 00 FF 
0bc60     0C E4 85 F1 | 	sub	objptr, ##6156
0bc64     F2 08 02 F1 | 	add	_var05, objptr
0bc68     04 01 62 FC | 	wrlong	_var01, _var05
0bc6c     0C 00 00 FF 
0bc70     0C E4 05 F1 | 	add	objptr, ##6156
0bc74     F2 08 02 FB | 	rdlong	_var05, objptr
0bc78     04 05 02 F6 | 	mov	_var03, _var05
0bc7c     01 04 66 F0 | 	shl	_var03, #1
0bc80     04 05 02 F1 | 	add	_var03, _var05
0bc84     02 04 66 F0 | 	shl	_var03, #2
0bc88     0C 00 00 FF 
0bc8c     0C E4 85 F1 | 	sub	objptr, ##6156
0bc90     F2 04 02 F1 | 	add	_var03, objptr
0bc94     04 04 06 F1 | 	add	_var03, #4
0bc98     02 07 62 FC | 	wrlong	_var04, _var03
0bc9c     0C 00 00 FF 
0bca0     0C E4 05 F1 | 	add	objptr, ##6156
0bca4     F2 08 02 FB | 	rdlong	_var05, objptr
0bca8     04 07 02 F6 | 	mov	_var04, _var05
0bcac     01 06 66 F0 | 	shl	_var04, #1
0bcb0     04 07 02 F1 | 	add	_var04, _var05
0bcb4     02 06 66 F0 | 	shl	_var04, #2
0bcb8     0C 00 00 FF 
0bcbc     0C E4 85 F1 | 	sub	objptr, ##6156
0bcc0     F2 06 02 F1 | 	add	_var04, objptr
0bcc4     08 06 06 F1 | 	add	_var04, #8
0bcc8     03 03 62 FC | 	wrlong	_var02, _var04
0bccc     0C 00 00 FF 
0bcd0     0C E4 05 F1 | 	add	objptr, ##6156
0bcd4     F2 00 02 FB | 	rdlong	_var01, objptr
0bcd8     01 00 06 F1 | 	add	_var01, #1
0bcdc     F2 00 62 FC | 	wrlong	_var01, objptr
0bce0     43 00 00 FF 
0bce4     58 E4 85 F1 | 	sub	objptr, ##34392
0bce8                 | LR__1010
0bce8                 | _do_push_ret
0bce8     2D 00 64 FD | 	ret
0bcec                 | 
0bcec                 | ' 
0bcec                 | '   
0bcec                 | ' sub csave_block(address as ulong)
0bcec                 | _csave_block
0bcec     09 01 02 F6 | 	mov	_var01, arg01
0bcf0                 | ' 
0bcf0                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
0bcf0                 | ' ' we enter it at the state of playing 1 kHz header tone
0bcf0                 | ' 
0bcf0                 | ' for i=0 to 63 step 2
0bcf0     00 02 06 F6 | 	mov	_var02, #0
0bcf4                 | LR__1020
0bcf4                 | '   do: loop until lpeek(base+64*7)>32768
0bcf4     37 00 00 FF 
0bcf8     10 E4 05 F1 | 	add	objptr, ##28176
0bcfc     97 0C 48 FB | 	callpa	#(@LR__1022-@LR__1021)>>2,fcache_load_ptr_
0bd00                 | LR__1021
0bd00     F2 12 02 FB | 	rdlong	arg01, objptr
0bd04     C0 13 06 F1 | 	add	arg01, #448
0bd08     09 FB 01 FB | 	rdlong	result1, arg01
0bd0c     40 00 00 FF 
0bd10     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0bd14     E8 FF 9F CD |  if_b	jmp	#LR__1021
0bd18                 | LR__1022
0bd18     00 13 02 F6 | 	mov	arg01, _var01
0bd1c     01 05 02 F6 | 	mov	_var03, _var02
0bd20     02 04 66 F0 | 	shl	_var03, #2
0bd24     02 13 02 F1 | 	add	arg01, _var03
0bd28     09 07 02 FB | 	rdlong	_var04, arg01
0bd2c     1A 00 00 FF 
0bd30     F8 E5 05 F1 | 	add	objptr, ##13816
0bd34     F2 06 62 FC | 	wrlong	_var04, objptr
0bd38     52 00 00 FF 
0bd3c     08 E4 85 F1 | 	sub	objptr, ##41992
0bd40                 | '   q=lpeek(address+4*i)
0bd40                 | '      for bit=0 to 31
0bd40     00 08 06 F6 | 	mov	_var05, #0
0bd44     97 84 48 FB | 	callpa	#(@LR__1027-@LR__1023)>>2,fcache_load_ptr_
0bd48                 | LR__1023
0bd48                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0bd48     52 00 00 FF 
0bd4c     08 E4 05 F1 | 	add	objptr, ##41992
0bd50     F2 06 02 FB | 	rdlong	_var04, objptr
0bd54     52 00 00 FF 
0bd58     08 E4 85 F1 | 	sub	objptr, ##41992
0bd5c     04 05 C2 F9 | 	decod	_var03, _var05
0bd60     02 07 CA F7 | 	test	_var04, _var03 wz
0bd64     60 00 90 AD |  if_e	jmp	#LR__1024
0bd68     04 05 02 F6 | 	mov	_var03, _var05
0bd6c     02 04 66 F0 | 	shl	_var03, #2
0bd70     4D 00 00 FF 
0bd74     B0 E5 05 F1 | 	add	objptr, ##39856
0bd78     F2 04 02 F1 | 	add	_var03, objptr
0bd7c     02 FF 48 FC | 	wrbyte	#127, _var03
0bd80     04 05 02 F6 | 	mov	_var03, _var05
0bd84     02 04 66 F0 | 	shl	_var03, #2
0bd88     01 04 06 F1 | 	add	_var03, #1
0bd8c     F2 04 02 F1 | 	add	_var03, objptr
0bd90     02 01 49 FC | 	wrbyte	#128, _var03
0bd94     04 05 02 F6 | 	mov	_var03, _var05
0bd98     02 04 66 F0 | 	shl	_var03, #2
0bd9c     02 04 06 F1 | 	add	_var03, #2
0bda0     F2 04 02 F1 | 	add	_var03, objptr
0bda4     02 FF 48 FC | 	wrbyte	#127, _var03
0bda8     04 05 02 F6 | 	mov	_var03, _var05
0bdac     02 04 66 F0 | 	shl	_var03, #2
0bdb0     03 04 06 F1 | 	add	_var03, #3
0bdb4     F2 04 02 F1 | 	add	_var03, objptr
0bdb8     02 01 49 FC | 	wrbyte	#128, _var03
0bdbc     4D 00 00 FF 
0bdc0     B0 E5 85 F1 | 	sub	objptr, ##39856
0bdc4     5C 00 90 FD | 	jmp	#LR__1025
0bdc8                 | LR__1024
0bdc8     04 05 02 F6 | 	mov	_var03, _var05
0bdcc     02 04 66 F0 | 	shl	_var03, #2
0bdd0     4D 00 00 FF 
0bdd4     B0 E5 05 F1 | 	add	objptr, ##39856
0bdd8     F2 04 02 F1 | 	add	_var03, objptr
0bddc     02 01 49 FC | 	wrbyte	#128, _var03
0bde0     04 05 02 F6 | 	mov	_var03, _var05
0bde4     02 04 66 F0 | 	shl	_var03, #2
0bde8     01 04 06 F1 | 	add	_var03, #1
0bdec     F2 04 02 F1 | 	add	_var03, objptr
0bdf0     02 01 49 FC | 	wrbyte	#128, _var03
0bdf4     04 05 02 F6 | 	mov	_var03, _var05
0bdf8     02 04 66 F0 | 	shl	_var03, #2
0bdfc     02 04 06 F1 | 	add	_var03, #2
0be00     F2 04 02 F1 | 	add	_var03, objptr
0be04     02 FF 48 FC | 	wrbyte	#127, _var03
0be08     04 05 02 F6 | 	mov	_var03, _var05
0be0c     02 04 66 F0 | 	shl	_var03, #2
0be10     03 04 06 F1 | 	add	_var03, #3
0be14     F2 04 02 F1 | 	add	_var03, objptr
0be18     02 FF 48 FC | 	wrbyte	#127, _var03
0be1c     4D 00 00 FF 
0be20     B0 E5 85 F1 | 	sub	objptr, ##39856
0be24                 | LR__1025
0be24     01 08 06 F1 | 	add	_var05, #1
0be28     20 08 56 F2 | 	cmps	_var05, #32 wc
0be2c     18 FF 9F CD |  if_b	jmp	#LR__1023
0be30                 | '   do: loop until lpeek(base+64*7)<32768
0be30     37 00 00 FF 
0be34     10 E4 05 F1 | 	add	objptr, ##28176
0be38                 | LR__1026
0be38     F2 12 02 FB | 	rdlong	arg01, objptr
0be3c     C0 13 06 F1 | 	add	arg01, #448
0be40     09 FB 01 FB | 	rdlong	result1, arg01
0be44     40 00 00 FF 
0be48     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0be4c     E8 FF 9F 3D |  if_ae	jmp	#LR__1026
0be50                 | LR__1027
0be50     00 13 02 F6 | 	mov	arg01, _var01
0be54     04 12 06 F1 | 	add	arg01, #4
0be58     01 05 02 F6 | 	mov	_var03, _var02
0be5c     02 04 66 F0 | 	shl	_var03, #2
0be60     02 13 02 F1 | 	add	arg01, _var03
0be64     09 07 02 FB | 	rdlong	_var04, arg01
0be68     1A 00 00 FF 
0be6c     F8 E5 05 F1 | 	add	objptr, ##13816
0be70     F2 06 62 FC | 	wrlong	_var04, objptr
0be74     52 00 00 FF 
0be78     08 E4 85 F1 | 	sub	objptr, ##41992
0be7c                 | '   q=lpeek(address+4+4*i)
0be7c                 | '      for bit=0 to 31
0be7c     00 08 06 F6 | 	mov	_var05, #0
0be80     97 94 48 FB | 	callpa	#(@LR__1031-@LR__1028)>>2,fcache_load_ptr_
0be84                 | LR__1028
0be84                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0be84     52 00 00 FF 
0be88     08 E4 05 F1 | 	add	objptr, ##41992
0be8c     F2 06 02 FB | 	rdlong	_var04, objptr
0be90     52 00 00 FF 
0be94     08 E4 85 F1 | 	sub	objptr, ##41992
0be98     04 05 C2 F9 | 	decod	_var03, _var05
0be9c     02 07 CA F7 | 	test	_var04, _var03 wz
0bea0     80 00 90 AD |  if_e	jmp	#LR__1029
0bea4     04 0B 02 F6 | 	mov	_var06, _var05
0bea8     02 0A 66 F0 | 	shl	_var06, #2
0beac     80 04 06 F6 | 	mov	_var03, #128
0beb0     05 05 02 F1 | 	add	_var03, _var06
0beb4     4D 00 00 FF 
0beb8     B0 E5 05 F1 | 	add	objptr, ##39856
0bebc     F2 04 02 F1 | 	add	_var03, objptr
0bec0     02 FF 48 FC | 	wrbyte	#127, _var03
0bec4     04 0B 02 F6 | 	mov	_var06, _var05
0bec8     02 0A 66 F0 | 	shl	_var06, #2
0becc     80 04 06 F6 | 	mov	_var03, #128
0bed0     05 05 02 F1 | 	add	_var03, _var06
0bed4     01 04 06 F1 | 	add	_var03, #1
0bed8     F2 04 02 F1 | 	add	_var03, objptr
0bedc     02 01 49 FC | 	wrbyte	#128, _var03
0bee0     04 0B 02 F6 | 	mov	_var06, _var05
0bee4     02 0A 66 F0 | 	shl	_var06, #2
0bee8     80 04 06 F6 | 	mov	_var03, #128
0beec     05 05 02 F1 | 	add	_var03, _var06
0bef0     02 04 06 F1 | 	add	_var03, #2
0bef4     F2 04 02 F1 | 	add	_var03, objptr
0bef8     02 FF 48 FC | 	wrbyte	#127, _var03
0befc     04 0B 02 F6 | 	mov	_var06, _var05
0bf00     02 0A 66 F0 | 	shl	_var06, #2
0bf04     80 04 06 F6 | 	mov	_var03, #128
0bf08     05 05 02 F1 | 	add	_var03, _var06
0bf0c     03 04 06 F1 | 	add	_var03, #3
0bf10     F2 04 02 F1 | 	add	_var03, objptr
0bf14     02 01 49 FC | 	wrbyte	#128, _var03
0bf18     4D 00 00 FF 
0bf1c     B0 E5 85 F1 | 	sub	objptr, ##39856
0bf20     7C 00 90 FD | 	jmp	#LR__1030
0bf24                 | LR__1029
0bf24     04 0B 02 F6 | 	mov	_var06, _var05
0bf28     02 0A 66 F0 | 	shl	_var06, #2
0bf2c     80 04 06 F6 | 	mov	_var03, #128
0bf30     05 05 02 F1 | 	add	_var03, _var06
0bf34     4D 00 00 FF 
0bf38     B0 E5 05 F1 | 	add	objptr, ##39856
0bf3c     F2 04 02 F1 | 	add	_var03, objptr
0bf40     02 01 49 FC | 	wrbyte	#128, _var03
0bf44     04 0B 02 F6 | 	mov	_var06, _var05
0bf48     02 0A 66 F0 | 	shl	_var06, #2
0bf4c     80 04 06 F6 | 	mov	_var03, #128
0bf50     05 05 02 F1 | 	add	_var03, _var06
0bf54     01 04 06 F1 | 	add	_var03, #1
0bf58     F2 04 02 F1 | 	add	_var03, objptr
0bf5c     02 01 49 FC | 	wrbyte	#128, _var03
0bf60     04 0B 02 F6 | 	mov	_var06, _var05
0bf64     02 0A 66 F0 | 	shl	_var06, #2
0bf68     80 04 06 F6 | 	mov	_var03, #128
0bf6c     05 05 02 F1 | 	add	_var03, _var06
0bf70     02 04 06 F1 | 	add	_var03, #2
0bf74     F2 04 02 F1 | 	add	_var03, objptr
0bf78     02 FF 48 FC | 	wrbyte	#127, _var03
0bf7c     04 0B 02 F6 | 	mov	_var06, _var05
0bf80     02 0A 66 F0 | 	shl	_var06, #2
0bf84     80 04 06 F6 | 	mov	_var03, #128
0bf88     05 05 02 F1 | 	add	_var03, _var06
0bf8c     03 04 06 F1 | 	add	_var03, #3
0bf90     F2 04 02 F1 | 	add	_var03, objptr
0bf94     02 FF 48 FC | 	wrbyte	#127, _var03
0bf98     4D 00 00 FF 
0bf9c     B0 E5 85 F1 | 	sub	objptr, ##39856
0bfa0                 | LR__1030
0bfa0     01 08 06 F1 | 	add	_var05, #1
0bfa4     20 08 56 F2 | 	cmps	_var05, #32 wc
0bfa8     D8 FE 9F CD |  if_b	jmp	#LR__1028
0bfac                 | LR__1031
0bfac     02 02 06 F1 | 	add	_var02, #2
0bfb0     40 02 56 F2 | 	cmps	_var02, #64 wc
0bfb4     3C FD 9F CD |  if_b	jmp	#LR__1020
0bfb8                 | ' do: loop until lpeek(base+64*7)>32768
0bfb8     37 00 00 FF 
0bfbc     10 E4 05 F1 | 	add	objptr, ##28176
0bfc0     97 84 48 FB | 	callpa	#(@LR__1040-@LR__1032)>>2,fcache_load_ptr_
0bfc4                 | LR__1032
0bfc4     F2 12 02 FB | 	rdlong	arg01, objptr
0bfc8     C0 13 06 F1 | 	add	arg01, #448
0bfcc     09 FB 01 FB | 	rdlong	result1, arg01
0bfd0     40 00 00 FF 
0bfd4     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0bfd8     E8 FF 9F CD |  if_b	jmp	#LR__1032
0bfdc     37 00 00 FF 
0bfe0     10 E4 85 F1 | 	sub	objptr, ##28176
0bfe4                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0bfe4     00 02 06 F6 | 	mov	_var02, #0
0bfe8                 | LR__1033
0bfe8     01 07 52 F6 | 	abs	_var04, _var02 wc
0bfec     07 06 06 F5 | 	and	_var04, #7
0bff0     03 07 82 F6 | 	negc	_var04, _var04
0bff4     04 06 56 F2 | 	cmps	_var04, #4 wc
0bff8     20 00 90 3D |  if_ae	jmp	#LR__1034
0bffc     01 0B 02 F6 | 	mov	_var06, _var02
0c000     4D 00 00 FF 
0c004     B0 E5 05 F1 | 	add	objptr, ##39856
0c008     F2 0A 02 F1 | 	add	_var06, objptr
0c00c     05 FF 48 FC | 	wrbyte	#127, _var06
0c010     4D 00 00 FF 
0c014     B0 E5 85 F1 | 	sub	objptr, ##39856
0c018     1C 00 90 FD | 	jmp	#LR__1035
0c01c                 | LR__1034
0c01c     01 0B 02 F6 | 	mov	_var06, _var02
0c020     4D 00 00 FF 
0c024     B0 E5 05 F1 | 	add	objptr, ##39856
0c028     F2 0A 02 F1 | 	add	_var06, objptr
0c02c     05 01 49 FC | 	wrbyte	#128, _var06
0c030     4D 00 00 FF 
0c034     B0 E5 85 F1 | 	sub	objptr, ##39856
0c038                 | LR__1035
0c038     01 02 06 F1 | 	add	_var02, #1
0c03c     80 02 56 F2 | 	cmps	_var02, #128 wc
0c040     A4 FF 9F CD |  if_b	jmp	#LR__1033
0c044                 | ' 
0c044                 | ' do: loop until lpeek(base+64*7)<32768
0c044     37 00 00 FF 
0c048     10 E4 05 F1 | 	add	objptr, ##28176
0c04c                 | LR__1036
0c04c     F2 12 02 FB | 	rdlong	arg01, objptr
0c050     C0 13 06 F1 | 	add	arg01, #448
0c054     09 FB 01 FB | 	rdlong	result1, arg01
0c058     40 00 00 FF 
0c05c     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0c060     E8 FF 9F 3D |  if_ae	jmp	#LR__1036
0c064     37 00 00 FF 
0c068     10 E4 85 F1 | 	sub	objptr, ##28176
0c06c                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0c06c     80 02 06 F6 | 	mov	_var02, #128
0c070                 | LR__1037
0c070     01 07 52 F6 | 	abs	_var04, _var02 wc
0c074     07 06 06 F5 | 	and	_var04, #7
0c078     03 07 82 F6 | 	negc	_var04, _var04
0c07c     04 06 56 F2 | 	cmps	_var04, #4 wc
0c080     20 00 90 3D |  if_ae	jmp	#LR__1038
0c084     01 0B 02 F6 | 	mov	_var06, _var02
0c088     4D 00 00 FF 
0c08c     B0 E5 05 F1 | 	add	objptr, ##39856
0c090     F2 0A 02 F1 | 	add	_var06, objptr
0c094     05 FF 48 FC | 	wrbyte	#127, _var06
0c098     4D 00 00 FF 
0c09c     B0 E5 85 F1 | 	sub	objptr, ##39856
0c0a0     1C 00 90 FD | 	jmp	#LR__1039
0c0a4                 | LR__1038
0c0a4     01 0B 02 F6 | 	mov	_var06, _var02
0c0a8     4D 00 00 FF 
0c0ac     B0 E5 05 F1 | 	add	objptr, ##39856
0c0b0     F2 0A 02 F1 | 	add	_var06, objptr
0c0b4     05 01 49 FC | 	wrbyte	#128, _var06
0c0b8     4D 00 00 FF 
0c0bc     B0 E5 85 F1 | 	sub	objptr, ##39856
0c0c0                 | LR__1039
0c0c0     01 02 06 F1 | 	add	_var02, #1
0c0c4     00 03 16 F2 | 	cmp	_var02, #256 wc
0c0c8     A4 FF 9F CD |  if_b	jmp	#LR__1037
0c0cc                 | LR__1040
0c0cc                 | _csave_block_ret
0c0cc     2D 00 64 FD | 	ret
0c0d0                 | 
0c0d0                 | ' 
0c0d0                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0c0d0                 | _csave_addtoblock
0c0d0     04 4A 05 F6 | 	mov	COUNT_, #4
0c0d4     A8 00 A0 FD | 	call	#pushregs_
0c0d8     09 1F 02 F6 | 	mov	local01, arg01
0c0dc                 | ' 
0c0dc                 | ' 
0c0dc                 | ' if force=0 then
0c0dc     07 14 4E F7 | 	zerox	arg02, #7 wz
0c0e0     78 00 90 5D |  if_ne	jmp	#LR__1050
0c0e4     50 00 00 FF 
0c0e8     B0 E4 05 F1 | 	add	objptr, ##41136
0c0ec     F2 14 02 FB | 	rdlong	arg02, objptr
0c0f0     02 00 00 FF 
0c0f4     00 E4 85 F1 | 	sub	objptr, ##1024
0c0f8     F2 14 02 F1 | 	add	arg02, objptr
0c0fc     0A 1F 42 FC | 	wrbyte	local01, arg02
0c100     02 00 00 FF 
0c104     00 E4 05 F1 | 	add	objptr, ##1024
0c108     F2 1E 02 FB | 	rdlong	local01, objptr
0c10c     01 1E 06 F1 | 	add	local01, #1
0c110     F2 1E 62 FC | 	wrlong	local01, objptr
0c114                 | '   block(blockptr)=d
0c114                 | '   blockptr+=1
0c114                 | '   if blockptr>=255 then
0c114     50 00 00 FF 
0c118     B0 E4 85 F1 | 	sub	objptr, ##41136
0c11c     FF 1E 16 F2 | 	cmp	local01, #255 wc
0c120     E4 00 90 CD |  if_b	jmp	#LR__1054
0c124     4E 00 00 FF 
0c128     B0 E4 05 F1 | 	add	objptr, ##40112
0c12c     F2 12 02 F6 | 	mov	arg01, objptr
0c130     4E 00 00 FF 
0c134     B0 E4 85 F1 | 	sub	objptr, ##40112
0c138     B0 FB BF FD | 	call	#_csave_block
0c13c     50 00 00 FF 
0c140     B0 E4 05 F1 | 	add	objptr, ##41136
0c144     F2 00 68 FC | 	wrlong	#0, objptr
0c148     50 00 00 FF 
0c14c     B0 E4 85 F1 | 	sub	objptr, ##41136
0c150     2C 13 06 F6 | 	mov	arg01, #300
0c154     B8 4B B1 FD | 	call	#__system___waitms
0c158     AC 00 90 FD | 	jmp	#LR__1054
0c15c                 | LR__1050
0c15c     50 00 00 FF 
0c160     B0 E4 05 F1 | 	add	objptr, ##41136
0c164     F2 20 02 FB | 	rdlong	local02, objptr
0c168     02 00 00 FF 
0c16c     00 E4 85 F1 | 	sub	objptr, ##1024
0c170     F2 20 02 F1 | 	add	local02, objptr
0c174     10 1F 42 FC | 	wrbyte	local01, local02
0c178                 | '   block(blockptr)=d
0c178                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0c178     02 00 00 FF 
0c17c     00 E4 05 F1 | 	add	objptr, ##1024
0c180     F2 22 02 FB | 	rdlong	local03, objptr
0c184     50 00 00 FF 
0c188     B0 E4 85 F1 | 	sub	objptr, ##41136
0c18c     FF 22 16 F2 | 	cmp	local03, #255 wc
0c190     40 00 90 3D |  if_ae	jmp	#LR__1053
0c194     50 00 00 FF 
0c198     B0 E4 05 F1 | 	add	objptr, ##41136
0c19c     F2 24 02 FB | 	rdlong	local04, objptr
0c1a0     50 00 00 FF 
0c1a4     B0 E4 85 F1 | 	sub	objptr, ##41136
0c1a8                 | LR__1051
0c1a8     00 25 56 F2 | 	cmps	local04, #256 wc
0c1ac     24 00 90 3D |  if_ae	jmp	#LR__1052
0c1b0     12 21 02 F6 | 	mov	local02, local04
0c1b4     4E 00 00 FF 
0c1b8     B0 E4 05 F1 | 	add	objptr, ##40112
0c1bc     F2 20 02 F1 | 	add	local02, objptr
0c1c0     10 01 48 FC | 	wrbyte	#0, local02
0c1c4     01 24 06 F1 | 	add	local04, #1
0c1c8     4E 00 00 FF 
0c1cc     B0 E4 85 F1 | 	sub	objptr, ##40112
0c1d0     D4 FF 9F FD | 	jmp	#LR__1051
0c1d4                 | LR__1052
0c1d4                 | LR__1053
0c1d4     4E 00 00 FF 
0c1d8     B0 E4 05 F1 | 	add	objptr, ##40112
0c1dc     F2 12 02 F6 | 	mov	arg01, objptr
0c1e0     4E 00 00 FF 
0c1e4     B0 E4 85 F1 | 	sub	objptr, ##40112
0c1e8     00 FB BF FD | 	call	#_csave_block
0c1ec     50 00 00 FF 
0c1f0     B0 E4 05 F1 | 	add	objptr, ##41136
0c1f4     F2 00 68 FC | 	wrlong	#0, objptr
0c1f8     50 00 00 FF 
0c1fc     B0 E4 85 F1 | 	sub	objptr, ##41136
0c200     2C 13 06 F6 | 	mov	arg01, #300
0c204     08 4B B1 FD | 	call	#__system___waitms
0c208                 | LR__1054
0c208     A7 F0 03 F6 | 	mov	ptra, fp
0c20c     B2 00 A0 FD | 	call	#popregs_
0c210                 | _csave_addtoblock_ret
0c210     2D 00 64 FD | 	ret
0c214                 | 
0c214                 | ' 
0c214                 | ' sub test_csave
0c214                 | _test_csave
0c214     04 4A 05 F6 | 	mov	COUNT_, #4
0c218     A8 00 A0 FD | 	call	#pushregs_
0c21c     C0 F0 07 F1 | 	add	ptra, #192
0c220                 | ' 'dim fileheader,savestart, saveptr as ulong
0c220                 | ' 
0c220                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0c220     4A 00 00 FF 
0c224     84 E4 05 F1 | 	add	objptr, ##38020
0c228     F2 12 02 FB | 	rdlong	arg01, objptr
0c22c     4A 00 00 FF 
0c230     84 E4 85 F1 | 	sub	objptr, ##38020
0c234     E0 14 B1 FD | 	call	#_pslpeek
0c238     FF FF 7F FF 
0c23c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0c240     0C 00 90 5D |  if_ne	jmp	#LR__1060
0c244     1B 12 06 F6 | 	mov	arg01, #27
0c248     38 12 B1 FD | 	call	#_printerror
0c24c     1C 03 90 FD | 	jmp	#LR__1074
0c250                 | LR__1060
0c250     04 F8 BF FD | 	call	#_pop
0c254     90 4E 05 F1 | 	add	fp, #144
0c258     A7 FA 61 FC | 	wrlong	result1, fp
0c25c     04 4E 05 F1 | 	add	fp, #4
0c260     A7 FC 61 FC | 	wrlong	result2, fp
0c264     04 4E 05 F1 | 	add	fp, #4
0c268     A7 FE 61 FC | 	wrlong	result3, fp
0c26c                 | ' t1=pop()
0c26c                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0c26c     98 4E 85 F1 | 	sub	fp, #152
0c270     1F FE 0D F2 | 	cmp	result3, #31 wz
0c274     24 00 90 AD |  if_e	jmp	#LR__1061
0c278     51 00 00 FF 
0c27c     D4 E5 05 F1 | 	add	objptr, ##41940
0c280     F2 1C 02 FB | 	rdlong	arg06, objptr
0c284     51 00 00 FF 
0c288     D4 E5 85 F1 | 	sub	objptr, ##41940
0c28c     8C 4E 05 F1 | 	add	fp, #140
0c290     A7 1C 62 FC | 	wrlong	arg06, fp
0c294     8C 4E 85 F1 | 	sub	fp, #140
0c298     14 00 90 FD | 	jmp	#LR__1062
0c29c                 | LR__1061
0c29c     90 4E 05 F1 | 	add	fp, #144
0c2a0     A7 1C 02 FB | 	rdlong	arg06, fp
0c2a4     04 4E 85 F1 | 	sub	fp, #4
0c2a8     A7 1C 62 FC | 	wrlong	arg06, fp
0c2ac     8C 4E 85 F1 | 	sub	fp, #140
0c2b0                 | LR__1062
0c2b0                 | ' 
0c2b0                 | ' ' prepare 1 kHz header wave
0c2b0                 | ' 
0c2b0                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0c2b0     A7 00 68 FC | 	wrlong	#0, fp
0c2b4     97 34 48 FB | 	callpa	#(@LR__1066-@LR__1063)>>2,fcache_load_ptr_
0c2b8                 | LR__1063
0c2b8     A7 1C 02 FB | 	rdlong	arg06, fp
0c2bc     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0c2c0     07 1A 06 F5 | 	and	arg05, #7
0c2c4     0D 1B 82 F6 | 	negc	arg05, arg05
0c2c8     04 1A 56 F2 | 	cmps	arg05, #4 wc
0c2cc     20 00 90 3D |  if_ae	jmp	#LR__1064
0c2d0     A7 1A 02 FB | 	rdlong	arg05, fp
0c2d4     4D 00 00 FF 
0c2d8     B0 E5 05 F1 | 	add	objptr, ##39856
0c2dc     F2 1A 02 F1 | 	add	arg05, objptr
0c2e0     0D FF 48 FC | 	wrbyte	#127, arg05
0c2e4     4D 00 00 FF 
0c2e8     B0 E5 85 F1 | 	sub	objptr, ##39856
0c2ec     1C 00 90 FD | 	jmp	#LR__1065
0c2f0                 | LR__1064
0c2f0     A7 1A 02 FB | 	rdlong	arg05, fp
0c2f4     4D 00 00 FF 
0c2f8     B0 E5 05 F1 | 	add	objptr, ##39856
0c2fc     F2 1A 02 F1 | 	add	arg05, objptr
0c300     0D 01 49 FC | 	wrbyte	#128, arg05
0c304     4D 00 00 FF 
0c308     B0 E5 85 F1 | 	sub	objptr, ##39856
0c30c                 | LR__1065
0c30c     A7 1A 02 FB | 	rdlong	arg05, fp
0c310     01 1A 06 F1 | 	add	arg05, #1
0c314     A7 1A 62 FC | 	wrlong	arg05, fp
0c318     00 1B 56 F2 | 	cmps	arg05, #256 wc
0c31c     98 FF 9F CD |  if_b	jmp	#LR__1063
0c320                 | LR__1066
0c320     4D 00 00 FF 
0c324     B0 E5 05 F1 | 	add	objptr, ##39856
0c328     F2 14 02 F6 | 	mov	arg02, objptr
0c32c     07 12 06 F6 | 	mov	arg01, #7
0c330     0F 00 00 FF 
0c334     40 17 06 F6 | 	mov	arg03, ##8000
0c338     0E 18 C6 F9 | 	decod	arg04, #14
0c33c     00 1B 06 F6 | 	mov	arg05, #256
0c340     00 1C 06 F6 | 	mov	arg06, #0
0c344     42 00 00 FF 
0c348     E4 E4 85 F1 | 	sub	objptr, ##34020
0c34c     28 43 B1 FD | 	call	#_audio096_spin2_play8
0c350     0B 00 00 FF 
0c354     CC E4 85 F1 | 	sub	objptr, ##5836
0c358     05 00 00 FF 
0c35c     B8 13 06 F6 | 	mov	arg01, ##3000
0c360     AC 49 B1 FD | 	call	#__system___waitms
0c364     50 00 00 FF 
0c368     B0 E4 05 F1 | 	add	objptr, ##41136
0c36c     F2 00 68 FC | 	wrlong	#0, objptr
0c370     50 00 00 FF 
0c374     B0 E4 85 F1 | 	sub	objptr, ##41136
0c378     72 12 06 F6 | 	mov	arg01, #114
0c37c     00 14 06 F6 | 	mov	arg02, #0
0c380     4C FD BF FD | 	call	#_csave_addtoblock
0c384     62 12 06 F6 | 	mov	arg01, #98
0c388     00 14 06 F6 | 	mov	arg02, #0
0c38c     40 FD BF FD | 	call	#_csave_addtoblock
0c390     61 12 06 F6 | 	mov	arg01, #97
0c394     00 14 06 F6 | 	mov	arg02, #0
0c398     34 FD BF FD | 	call	#_csave_addtoblock
0c39c     0D 12 06 F6 | 	mov	arg01, #13
0c3a0     00 14 06 F6 | 	mov	arg02, #0
0c3a4     28 FD BF FD | 	call	#_csave_addtoblock
0c3a8                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0c3a8                 | ' waitms 3000 
0c3a8                 | ' 
0c3a8                 | ' blockptr=0
0c3a8                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0c3a8                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0c3a8     A7 02 68 FC | 	wrlong	#1, fp
0c3ac     8C 4E 05 F1 | 	add	fp, #140
0c3b0     A7 12 02 FB | 	rdlong	arg01, fp
0c3b4     8C 4E 85 F1 | 	sub	fp, #140
0c3b8     09 1F 02 F6 | 	mov	local01, arg01
0c3bc     97 06 48 FB | 	callpa	#(@LR__1068-@LR__1067)>>2,fcache_load_ptr_
0c3c0                 | LR__1067
0c3c0     0F FB C9 FA | 	rdbyte	result1, local01 wz
0c3c4     01 1E 06 51 |  if_ne	add	local01, #1
0c3c8     F4 FF 9F 5D |  if_ne	jmp	#LR__1067
0c3cc                 | LR__1068
0c3cc     09 1F 82 F1 | 	sub	local01, arg01
0c3d0     0F 21 02 F6 | 	mov	local02, local01
0c3d4     01 20 06 F1 | 	add	local02, #1
0c3d8                 | LR__1069
0c3d8     A7 1A 02 FB | 	rdlong	arg05, fp
0c3dc     10 1B 52 F2 | 	cmps	arg05, local02 wc
0c3e0     34 00 90 3D |  if_ae	jmp	#LR__1070
0c3e4     8C 4E 05 F1 | 	add	fp, #140
0c3e8     A7 12 02 FB | 	rdlong	arg01, fp
0c3ec     8C 4E 85 F1 | 	sub	fp, #140
0c3f0     A7 14 02 FB | 	rdlong	arg02, fp
0c3f4     01 16 06 F6 | 	mov	arg03, #1
0c3f8     B4 67 B1 FD | 	call	#__system__Mid_S
0c3fc     FD 12 C2 FA | 	rdbyte	arg01, result1
0c400     00 14 06 F6 | 	mov	arg02, #0
0c404     C8 FC BF FD | 	call	#_csave_addtoblock
0c408     A7 1A 02 FB | 	rdlong	arg05, fp
0c40c     01 1A 06 F1 | 	add	arg05, #1
0c410     A7 1A 62 FC | 	wrlong	arg05, fp
0c414     C0 FF 9F FD | 	jmp	#LR__1069
0c418                 | LR__1070
0c418     00 12 06 F6 | 	mov	arg01, #0
0c41c     00 14 06 F6 | 	mov	arg02, #0
0c420     AC FC BF FD | 	call	#_csave_addtoblock
0c424     72 12 06 F6 | 	mov	arg01, #114
0c428     00 14 06 F6 | 	mov	arg02, #0
0c42c     A0 FC BF FD | 	call	#_csave_addtoblock
0c430     62 12 06 F6 | 	mov	arg01, #98
0c434     00 14 06 F6 | 	mov	arg02, #0
0c438     94 FC BF FD | 	call	#_csave_addtoblock
0c43c     73 12 06 F6 | 	mov	arg01, #115
0c440     00 14 06 F6 | 	mov	arg02, #0
0c444     88 FC BF FD | 	call	#_csave_addtoblock
0c448     0D 12 06 F6 | 	mov	arg01, #13
0c44c     00 14 06 F6 | 	mov	arg02, #0
0c450     7C FC BF FD | 	call	#_csave_addtoblock
0c454     4A 00 00 FF 
0c458     84 E4 05 F1 | 	add	objptr, ##38020
0c45c     F2 22 02 FB | 	rdlong	local03, objptr
0c460     4A 00 00 FF 
0c464     84 E4 85 F1 | 	sub	objptr, ##38020
0c468     9C 4E 05 F1 | 	add	fp, #156
0c46c     A7 22 62 FC | 	wrlong	local03, fp
0c470     9C 4E 85 F1 | 	sub	fp, #156
0c474                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0c474                 | ' 
0c474                 | ' saveptr=programstart
0c474                 | ' do
0c474                 | LR__1071
0c474     A0 4E 05 F1 | 	add	fp, #160
0c478     A7 12 02 F6 | 	mov	arg01, fp
0c47c     04 4E 85 F1 | 	sub	fp, #4
0c480     A7 14 02 FB | 	rdlong	arg02, fp
0c484     9C 4E 85 F1 | 	sub	fp, #156
0c488     18 16 06 F6 | 	mov	arg03, #24
0c48c     0B 00 00 FF 
0c490     CC E4 05 F1 | 	add	objptr, ##5836
0c494     44 39 B1 FD | 	call	#_psram_spin2_read1
0c498     0C 4E 05 F1 | 	add	fp, #12
0c49c     A7 12 02 F6 | 	mov	arg01, fp
0c4a0     9C 4E 05 F1 | 	add	fp, #156
0c4a4     A7 14 02 FB | 	rdlong	arg02, fp
0c4a8     04 4E 05 F1 | 	add	fp, #4
0c4ac     A7 16 02 FB | 	rdlong	arg03, fp
0c4b0     AC 4E 85 F1 | 	sub	fp, #172
0c4b4     24 39 B1 FD | 	call	#_psram_spin2_read1
0c4b8     0B 00 00 FF 
0c4bc     CC E4 85 F1 | 	sub	objptr, ##5836
0c4c0     AC 4E 05 F1 | 	add	fp, #172
0c4c4     A7 12 02 FB | 	rdlong	arg01, fp
0c4c8     AC 4E 85 F1 | 	sub	fp, #172
0c4cc     00 14 06 F6 | 	mov	arg02, #0
0c4d0     FC FB BF FD | 	call	#_csave_addtoblock
0c4d4                 | ' 
0c4d4                 | '   psram.read1(varptr(header(0)),saveptr,24)
0c4d4                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0c4d4                 | '   csave_addtoblock(header(3),0) ' that's always <255
0c4d4                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)  :next i
0c4d4     A7 00 68 FC | 	wrlong	#0, fp
0c4d8     AC 4E 05 F1 | 	add	fp, #172
0c4dc     A7 24 02 FB | 	rdlong	local04, fp
0c4e0     AC 4E 85 F1 | 	sub	fp, #172
0c4e4                 | LR__1072
0c4e4     A7 22 02 FB | 	rdlong	local03, fp
0c4e8     12 23 52 F2 | 	cmps	local03, local04 wc
0c4ec     2C 00 90 3D |  if_ae	jmp	#LR__1073
0c4f0     A7 22 02 FB | 	rdlong	local03, fp
0c4f4     0C 4E 05 F1 | 	add	fp, #12
0c4f8     A7 22 02 F1 | 	add	local03, fp
0c4fc     11 13 C2 FA | 	rdbyte	arg01, local03
0c500     00 14 06 F6 | 	mov	arg02, #0
0c504     0C 4E 85 F1 | 	sub	fp, #12
0c508     C4 FB BF FD | 	call	#_csave_addtoblock
0c50c     A7 22 02 FB | 	rdlong	local03, fp
0c510     01 22 06 F1 | 	add	local03, #1
0c514     A7 22 62 FC | 	wrlong	local03, fp
0c518     C8 FF 9F FD | 	jmp	#LR__1072
0c51c                 | LR__1073
0c51c     B4 4E 05 F1 | 	add	fp, #180
0c520     A7 22 02 FB | 	rdlong	local03, fp
0c524     18 4E 85 F1 | 	sub	fp, #24
0c528     A7 22 62 FC | 	wrlong	local03, fp
0c52c     18 4E 05 F1 | 	add	fp, #24
0c530     A7 22 02 FB | 	rdlong	local03, fp
0c534     B4 4E 85 F1 | 	sub	fp, #180
0c538     FF FF 3F FF 
0c53c     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0c540     30 FF 9F 5D |  if_ne	jmp	#LR__1071
0c544     00 12 06 F6 | 	mov	arg01, #0
0c548     01 14 06 F6 | 	mov	arg02, #1
0c54c     80 FB BF FD | 	call	#_csave_addtoblock
0c550     37 00 00 FF 
0c554     10 E4 05 F1 | 	add	objptr, ##28176
0c558     F2 12 02 FB | 	rdlong	arg01, objptr
0c55c     37 00 00 FF 
0c560     10 E4 85 F1 | 	sub	objptr, ##28176
0c564     D4 13 06 F1 | 	add	arg01, #468
0c568     09 01 58 FC | 	wrword	#0, arg01
0c56c                 | LR__1074
0c56c     A7 F0 03 F6 | 	mov	ptra, fp
0c570     B2 00 A0 FD | 	call	#popregs_
0c574                 | _test_csave_ret
0c574     2D 00 64 FD | 	ret
0c578                 | 
0c578                 | ' 
0c578                 | ' ' ----------------- Save the program
0c578                 | ' 
0c578                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0c578                 | _do_save
0c578     04 4A 05 F6 | 	mov	COUNT_, #4
0c57c     A8 00 A0 FD | 	call	#pushregs_
0c580     01 00 00 FF 
0c584     C0 F0 07 F1 | 	add	ptra, ##704
0c588     4A 00 00 FF 
0c58c     80 E4 05 F1 | 	add	objptr, ##38016
0c590     F2 1E 02 FB | 	rdlong	local01, objptr
0c594     0F 21 02 F6 | 	mov	local02, local01
0c598     01 20 66 F0 | 	shl	local02, #1
0c59c     0F 21 02 F1 | 	add	local02, local01
0c5a0     02 20 66 F0 | 	shl	local02, #2
0c5a4     03 00 00 FF 
0c5a8     04 E4 85 F1 | 	sub	objptr, ##1540
0c5ac     F2 20 02 F1 | 	add	local02, objptr
0c5b0     10 23 02 FB | 	rdlong	local03, local02
0c5b4     01 00 00 FF 
0c5b8     10 4E 05 F1 | 	add	fp, ##528
0c5bc     A7 22 62 FC | 	wrlong	local03, fp
0c5c0                 | ' 
0c5c0                 | ' numpar=compiledline(lineptr_e).result.uresult
0c5c0                 | ' 
0c5c0                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0c5c0     01 00 00 FF 
0c5c4     10 4E 85 F1 | 	sub	fp, ##528
0c5c8     01 22 56 F2 | 	cmps	local03, #1 wc
0c5cc     47 00 00 FF 
0c5d0     7C E4 85 F1 | 	sub	objptr, ##36476
0c5d4     20 00 90 CD |  if_b	jmp	#LR__1080
0c5d8     7C F4 BF FD | 	call	#_pop
0c5dc     A7 FA 61 FC | 	wrlong	result1, fp
0c5e0     04 4E 05 F1 | 	add	fp, #4
0c5e4     A7 FC 61 FC | 	wrlong	result2, fp
0c5e8     04 4E 05 F1 | 	add	fp, #4
0c5ec     A7 FE 61 FC | 	wrlong	result3, fp
0c5f0     08 4E 85 F1 | 	sub	fp, #8
0c5f4     24 00 90 FD | 	jmp	#LR__1081
0c5f8                 | LR__1080
0c5f8     51 00 00 FF 
0c5fc     D4 E5 05 F1 | 	add	objptr, ##41940
0c600     F2 22 02 FB | 	rdlong	local03, objptr
0c604     51 00 00 FF 
0c608     D4 E5 85 F1 | 	sub	objptr, ##41940
0c60c     A7 22 62 FC | 	wrlong	local03, fp
0c610     08 4E 05 F1 | 	add	fp, #8
0c614     A7 3E 68 FC | 	wrlong	#31, fp
0c618     08 4E 85 F1 | 	sub	fp, #8
0c61c                 | LR__1081
0c61c                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0c61c     4A 00 00 FF 
0c620     84 E4 05 F1 | 	add	objptr, ##38020
0c624     F2 12 02 FB | 	rdlong	arg01, objptr
0c628     4A 00 00 FF 
0c62c     84 E4 85 F1 | 	sub	objptr, ##38020
0c630     E4 10 B1 FD | 	call	#_pslpeek
0c634     FF FF 7F FF 
0c638     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0c63c     0C 00 90 5D |  if_ne	jmp	#LR__1082
0c640     1B 12 06 F6 | 	mov	arg01, #27
0c644     3C 0E B1 FD | 	call	#_printerror
0c648     1C 03 90 FD | 	jmp	#LR__1088
0c64c                 | LR__1082
0c64c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0c64c     08 4E 05 F1 | 	add	fp, #8
0c650     A7 22 02 FB | 	rdlong	local03, fp
0c654     08 4E 85 F1 | 	sub	fp, #8
0c658     2B 22 0E F2 | 	cmp	local03, #43 wz
0c65c     18 00 90 5D |  if_ne	jmp	#LR__1083
0c660     A7 12 02 FB | 	rdlong	arg01, fp
0c664     9C 4C B0 FD | 	call	#_convertstring
0c668     A7 FA 61 FC | 	wrlong	result1, fp
0c66c     08 4E 05 F1 | 	add	fp, #8
0c670     A7 3E 68 FC | 	wrlong	#31, fp
0c674     08 4E 85 F1 | 	sub	fp, #8
0c678                 | LR__1083
0c678                 | ' if t1.result_type=result_string then
0c678     08 4E 05 F1 | 	add	fp, #8
0c67c     A7 22 02 FB | 	rdlong	local03, fp
0c680     08 4E 85 F1 | 	sub	fp, #8
0c684     1F 22 0E F2 | 	cmp	local03, #31 wz
0c688     DC 02 90 5D |  if_ne	jmp	#LR__1087
0c68c                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0c68c     A7 12 02 FB | 	rdlong	arg01, fp
0c690     84 01 00 FF 
0c694     F7 14 06 F6 | 	mov	arg02, ##@LR__5433
0c698     A8 43 B1 FD | 	call	#__system___string_cmp
0c69c     00 FA 0D F2 | 	cmp	result1, #0 wz
0c6a0     51 00 00 AF 
0c6a4     D4 E5 05 A1 |  if_e	add	objptr, ##41940
0c6a8     F2 22 02 AB |  if_e	rdlong	local03, objptr
0c6ac     A7 22 62 AC |  if_e	wrlong	local03, fp
0c6b0     51 00 00 AF 
0c6b4     D4 E5 85 A1 |  if_e	sub	objptr, ##41940
0c6b8     A7 22 02 5B |  if_ne	rdlong	local03, fp
0c6bc     51 00 00 5F 
0c6c0     D4 E5 05 51 |  if_ne	add	objptr, ##41940
0c6c4     F2 22 62 5C |  if_ne	wrlong	local03, objptr
0c6c8     51 00 00 5F 
0c6cc     D4 E5 85 51 |  if_ne	sub	objptr, ##41940
0c6d0                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0c6d0     09 12 06 F6 | 	mov	arg01, #9
0c6d4     B4 93 B1 FD | 	call	#__system__close
0c6d8     09 22 06 F6 | 	mov	local03, #9
0c6dc     4A 00 00 FF 
0c6e0     90 E4 05 F1 | 	add	objptr, ##38032
0c6e4     F2 12 02 FB | 	rdlong	arg01, objptr
0c6e8     4A 00 00 FF 
0c6ec     90 E4 85 F1 | 	sub	objptr, ##38032
0c6f0     84 01 00 FF 
0c6f4     F8 14 06 F6 | 	mov	arg02, ##@LR__5434
0c6f8     7C 43 B1 FD | 	call	#__system___string_concat
0c6fc     FD 12 02 F6 | 	mov	arg01, result1
0c700     A7 14 02 FB | 	rdlong	arg02, fp
0c704     70 43 B1 FD | 	call	#__system___string_concat
0c708     FD 14 02 F6 | 	mov	arg02, result1
0c70c     11 13 02 F6 | 	mov	arg01, local03
0c710     0D 16 06 F6 | 	mov	arg03, #13
0c714     08 4F B1 FD | 	call	#__system___basic_open_string
0c718     01 00 00 FF 
0c71c     0C 4E 05 F1 | 	add	fp, ##524
0c720     A7 0A 68 FC | 	wrlong	#5, fp
0c724     4A 00 00 FF 
0c728     84 E4 05 F1 | 	add	objptr, ##38020
0c72c     F2 22 02 FB | 	rdlong	local03, objptr
0c730     4A 00 00 FF 
0c734     84 E4 85 F1 | 	sub	objptr, ##38020
0c738     10 4E 05 F1 | 	add	fp, #16
0c73c     A7 22 62 FC | 	wrlong	local03, fp
0c740     01 00 00 FF 
0c744     1C 4E 85 F1 | 	sub	fp, ##540
0c748                 | ' '  put #9,1,fileheader,1
0c748                 | '   i=5
0c748                 | '   saveptr=programstart
0c748                 | '   do
0c748                 | LR__1084
0c748     01 00 00 FF 
0c74c     20 4E 05 F1 | 	add	fp, ##544
0c750     A7 12 02 F6 | 	mov	arg01, fp
0c754     04 4E 85 F1 | 	sub	fp, #4
0c758     A7 14 02 FB | 	rdlong	arg02, fp
0c75c     01 00 00 FF 
0c760     1C 4E 85 F1 | 	sub	fp, ##540
0c764     18 16 06 F6 | 	mov	arg03, #24
0c768     0B 00 00 FF 
0c76c     CC E4 05 F1 | 	add	objptr, ##5836
0c770     68 36 B1 FD | 	call	#_psram_spin2_read1
0c774     01 00 00 FF 
0c778     38 4E 05 F1 | 	add	fp, ##568
0c77c     A7 12 02 F6 | 	mov	arg01, fp
0c780     10 4E 85 F1 | 	sub	fp, #16
0c784     A7 14 02 FB | 	rdlong	arg02, fp
0c788     04 4E 05 F1 | 	add	fp, #4
0c78c     A7 16 02 FB | 	rdlong	arg03, fp
0c790     01 00 00 FF 
0c794     2C 4E 85 F1 | 	sub	fp, ##556
0c798     40 36 B1 FD | 	call	#_psram_spin2_read1
0c79c     0B 00 00 FF 
0c7a0     CC E4 85 F1 | 	sub	objptr, ##5836
0c7a4     84 01 00 FF 
0c7a8     FA 22 06 F6 | 	mov	local03, ##@LR__5435
0c7ac     01 00 00 FF 
0c7b0     B8 4E 05 F1 | 	add	fp, ##696
0c7b4     A7 22 62 FC | 	wrlong	local03, fp
0c7b8                 | '     psram.read1(varptr(header(0)),saveptr,24)
0c7b8                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0c7b8                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0c7b8     AC 4E 85 F1 | 	sub	fp, #172
0c7bc     A7 02 68 FC | 	wrlong	#1, fp
0c7c0     20 4E 05 F1 | 	add	fp, #32
0c7c4     A7 24 02 FB | 	rdlong	local04, fp
0c7c8     01 00 00 FF 
0c7cc     2C 4E 85 F1 | 	sub	fp, ##556
0c7d0     01 24 06 F1 | 	add	local04, #1
0c7d4                 | LR__1085
0c7d4     01 00 00 FF 
0c7d8     0C 4E 05 F1 | 	add	fp, ##524
0c7dc     A7 22 02 FB | 	rdlong	local03, fp
0c7e0     01 00 00 FF 
0c7e4     0C 4E 85 F1 | 	sub	fp, ##524
0c7e8     12 23 52 F2 | 	cmps	local03, local04 wc
0c7ec     64 00 90 3D |  if_ae	jmp	#LR__1086
0c7f0     01 00 00 FF 
0c7f4     B8 4E 05 F1 | 	add	fp, ##696
0c7f8     A7 1E 02 FB | 	rdlong	local01, fp
0c7fc     AC 4E 85 F1 | 	sub	fp, #172
0c800     A7 22 02 FB | 	rdlong	local03, fp
0c804     01 22 86 F1 | 	sub	local03, #1
0c808     2C 4E 05 F1 | 	add	fp, #44
0c80c     A7 22 02 F1 | 	add	local03, fp
0c810     11 13 C2 FA | 	rdbyte	arg01, local03
0c814     01 00 00 FF 
0c818     38 4E 85 F1 | 	sub	fp, ##568
0c81c     3C 64 B1 FD | 	call	#__system__Chr_S
0c820     FD 14 02 F6 | 	mov	arg02, result1
0c824     0F 13 02 F6 | 	mov	arg01, local01
0c828     4C 42 B1 FD | 	call	#__system___string_concat
0c82c     01 00 00 FF 
0c830     B8 4E 05 F1 | 	add	fp, ##696
0c834     A7 FA 61 FC | 	wrlong	result1, fp
0c838     AC 4E 85 F1 | 	sub	fp, #172
0c83c     A7 22 02 FB | 	rdlong	local03, fp
0c840     01 22 06 F1 | 	add	local03, #1
0c844     A7 22 62 FC | 	wrlong	local03, fp
0c848     01 00 00 FF 
0c84c     0C 4E 85 F1 | 	sub	fp, ##524
0c850     80 FF 9F FD | 	jmp	#LR__1085
0c854                 | LR__1086
0c854                 | '  '   put #9,i,header(3),1 : i+=4
0c854                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0c854                 | '      print #9, saveline$
0c854     09 12 06 F6 | 	mov	arg01, #9
0c858     00 9C B1 FD | 	call	#__system___getiolock_0540
0c85c     FD 12 02 F6 | 	mov	arg01, result1
0c860     B8 41 B1 FD | 	call	#__system___lockmem
0c864     01 00 00 FF 
0c868     B8 4E 05 F1 | 	add	fp, ##696
0c86c     A7 14 02 FB | 	rdlong	arg02, fp
0c870     01 00 00 FF 
0c874     B8 4E 85 F1 | 	sub	fp, ##696
0c878     09 12 06 F6 | 	mov	arg01, #9
0c87c     00 16 06 F6 | 	mov	arg03, #0
0c880     8C 4E B1 FD | 	call	#__system___basic_print_string
0c884     09 12 06 F6 | 	mov	arg01, #9
0c888     0A 14 06 F6 | 	mov	arg02, #10
0c88c     00 16 06 F6 | 	mov	arg03, #0
0c890     24 4E B1 FD | 	call	#__system___basic_print_char
0c894     09 12 06 F6 | 	mov	arg01, #9
0c898     C0 9B B1 FD | 	call	#__system___getiolock_0540
0c89c     FD 00 68 FC | 	wrlong	#0, result1
0c8a0     01 00 00 FF 
0c8a4     34 4E 05 F1 | 	add	fp, ##564
0c8a8     A7 22 02 FB | 	rdlong	local03, fp
0c8ac     18 4E 85 F1 | 	sub	fp, #24
0c8b0     A7 22 62 FC | 	wrlong	local03, fp
0c8b4     18 4E 05 F1 | 	add	fp, #24
0c8b8     A7 22 02 FB | 	rdlong	local03, fp
0c8bc     01 00 00 FF 
0c8c0     34 4E 85 F1 | 	sub	fp, ##564
0c8c4     FF FF 3F FF 
0c8c8     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0c8cc     78 FE 9F 5D |  if_ne	jmp	#LR__1084
0c8d0                 | '   close #9  
0c8d0     09 12 06 F6 | 	mov	arg01, #9
0c8d4     B4 91 B1 FD | 	call	#__system__close
0c8d8                 | '   print "Saved as ";currentdir$+"/"+loadname
0c8d8     00 12 06 F6 | 	mov	arg01, #0
0c8dc     7C 9B B1 FD | 	call	#__system___getiolock_0540
0c8e0     FD 12 02 F6 | 	mov	arg01, result1
0c8e4     34 41 B1 FD | 	call	#__system___lockmem
0c8e8     84 01 00 FF 
0c8ec     FB 14 06 F6 | 	mov	arg02, ##@LR__5436
0c8f0     00 12 06 F6 | 	mov	arg01, #0
0c8f4     00 16 06 F6 | 	mov	arg03, #0
0c8f8     14 4E B1 FD | 	call	#__system___basic_print_string
0c8fc     00 20 06 F6 | 	mov	local02, #0
0c900     4A 00 00 FF 
0c904     90 E4 05 F1 | 	add	objptr, ##38032
0c908     F2 12 02 FB | 	rdlong	arg01, objptr
0c90c     4A 00 00 FF 
0c910     90 E4 85 F1 | 	sub	objptr, ##38032
0c914     84 01 00 FF 
0c918     05 15 06 F6 | 	mov	arg02, ##@LR__5437
0c91c     58 41 B1 FD | 	call	#__system___string_concat
0c920     FD 12 02 F6 | 	mov	arg01, result1
0c924     51 00 00 FF 
0c928     D4 E5 05 F1 | 	add	objptr, ##41940
0c92c     F2 14 02 FB | 	rdlong	arg02, objptr
0c930     51 00 00 FF 
0c934     D4 E5 85 F1 | 	sub	objptr, ##41940
0c938     3C 41 B1 FD | 	call	#__system___string_concat
0c93c     FD 14 02 F6 | 	mov	arg02, result1
0c940     10 13 02 F6 | 	mov	arg01, local02
0c944     00 16 06 F6 | 	mov	arg03, #0
0c948     C4 4D B1 FD | 	call	#__system___basic_print_string
0c94c     00 12 06 F6 | 	mov	arg01, #0
0c950     0A 14 06 F6 | 	mov	arg02, #10
0c954     00 16 06 F6 | 	mov	arg03, #0
0c958     5C 4D B1 FD | 	call	#__system___basic_print_char
0c95c     00 12 06 F6 | 	mov	arg01, #0
0c960     F8 9A B1 FD | 	call	#__system___getiolock_0540
0c964     FD 00 68 FC | 	wrlong	#0, result1
0c968                 | LR__1087
0c968                 | LR__1088
0c968     A7 F0 03 F6 | 	mov	ptra, fp
0c96c     B2 00 A0 FD | 	call	#popregs_
0c970                 | _do_save_ret
0c970     2D 00 64 FD | 	ret
0c974                 | 
0c974                 | ' 
0c974                 | ' '----------------- Load the program
0c974                 | ' 'lo todo: errors while loading
0c974                 | ' 
0c974                 | ' sub do_enter
0c974                 | _do_enter
0c974     02 00 00 FF 
0c978     D2 12 06 F6 | 	mov	arg01, ##1234
0c97c     04 00 B0 FD | 	call	#_do_load
0c980                 | _do_enter_ret
0c980     2D 00 64 FD | 	ret
0c984                 | 
0c984                 | ' 
0c984                 | ' 
0c984                 | ' sub do_load(amode=0 as integer)   ' here amode = 2, why?
0c984                 | _do_load
0c984     01 4A 05 F6 | 	mov	COUNT_, #1
0c988     A8 00 A0 FD | 	call	#pushregs_
0c98c     AC F0 07 F1 | 	add	ptra, #172
0c990     A7 12 62 FC | 	wrlong	arg01, fp
0c994     4A 00 00 FF 
0c998     80 E4 05 F1 | 	add	objptr, ##38016
0c99c     F2 14 02 FB | 	rdlong	arg02, objptr
0c9a0     0A 13 02 F6 | 	mov	arg01, arg02
0c9a4     01 12 66 F0 | 	shl	arg01, #1
0c9a8     0A 13 02 F1 | 	add	arg01, arg02
0c9ac     02 12 66 F0 | 	shl	arg01, #2
0c9b0     03 00 00 FF 
0c9b4     04 E4 85 F1 | 	sub	objptr, ##1540
0c9b8     F2 12 02 F1 | 	add	arg01, objptr
0c9bc     09 15 02 FB | 	rdlong	arg02, arg01
0c9c0     1C 4E 05 F1 | 	add	fp, #28
0c9c4     A7 14 62 FC | 	wrlong	arg02, fp
0c9c8     8C 4E 05 F1 | 	add	fp, #140
0c9cc     A7 12 02 F6 | 	mov	arg01, fp
0c9d0     47 00 00 FF 
0c9d4     7C E4 85 F1 | 	sub	objptr, ##36476
0c9d8     80 4E 85 F1 | 	sub	fp, #128
0c9dc     09 4F 61 FC | 	wrlong	fp, arg01
0c9e0                 | ' numpar=compiledline(lineptr_e).result.uresult
0c9e0                 | ' lpoke varptr(line2$),varptr(line2)
0c9e0                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0c9e0     0C 4E 85 F1 | 	sub	fp, #12
0c9e4     A7 1E 02 FB | 	rdlong	local01, fp
0c9e8     1C 4E 85 F1 | 	sub	fp, #28
0c9ec     01 1E 56 F2 | 	cmps	local01, #1 wc
0c9f0     24 00 90 CD |  if_b	jmp	#LR__1090
0c9f4     60 F0 BF FD | 	call	#_pop
0c9f8     04 4E 05 F1 | 	add	fp, #4
0c9fc     A7 FA 61 FC | 	wrlong	result1, fp
0ca00     04 4E 05 F1 | 	add	fp, #4
0ca04     A7 FC 61 FC | 	wrlong	result2, fp
0ca08     04 4E 05 F1 | 	add	fp, #4
0ca0c     A7 FE 61 FC | 	wrlong	result3, fp
0ca10     0C 4E 85 F1 | 	sub	fp, #12
0ca14     28 00 90 FD | 	jmp	#LR__1091
0ca18                 | LR__1090
0ca18     51 00 00 FF 
0ca1c     D4 E5 05 F1 | 	add	objptr, ##41940
0ca20     F2 1E 02 FB | 	rdlong	local01, objptr
0ca24     51 00 00 FF 
0ca28     D4 E5 85 F1 | 	sub	objptr, ##41940
0ca2c     04 4E 05 F1 | 	add	fp, #4
0ca30     A7 1E 62 FC | 	wrlong	local01, fp
0ca34     08 4E 05 F1 | 	add	fp, #8
0ca38     A7 3E 68 FC | 	wrlong	#31, fp
0ca3c     0C 4E 85 F1 | 	sub	fp, #12
0ca40                 | LR__1091
0ca40                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0ca40                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0ca40     0C 4E 05 F1 | 	add	fp, #12
0ca44     A7 1E 02 FB | 	rdlong	local01, fp
0ca48     0C 4E 85 F1 | 	sub	fp, #12
0ca4c     2B 1E 0E F2 | 	cmp	local01, #43 wz
0ca50     24 00 90 5D |  if_ne	jmp	#LR__1092
0ca54     04 4E 05 F1 | 	add	fp, #4
0ca58     A7 12 02 FB | 	rdlong	arg01, fp
0ca5c     04 4E 85 F1 | 	sub	fp, #4
0ca60     A0 48 B0 FD | 	call	#_convertstring
0ca64     04 4E 05 F1 | 	add	fp, #4
0ca68     A7 FA 61 FC | 	wrlong	result1, fp
0ca6c     08 4E 05 F1 | 	add	fp, #8
0ca70     A7 3E 68 FC | 	wrlong	#31, fp
0ca74     0C 4E 85 F1 | 	sub	fp, #12
0ca78                 | LR__1092
0ca78                 | ' if t1.result_type=result_string then
0ca78     0C 4E 05 F1 | 	add	fp, #12
0ca7c     A7 1E 02 FB | 	rdlong	local01, fp
0ca80     0C 4E 85 F1 | 	sub	fp, #12
0ca84     1F 1E 0E F2 | 	cmp	local01, #31 wz
0ca88     E0 02 90 5D |  if_ne	jmp	#LR__1098
0ca8c                 | '   if amode<>1234 then do_new
0ca8c     A7 1E 02 FB | 	rdlong	local01, fp
0ca90     02 00 00 FF 
0ca94     D2 1E 0E F2 | 	cmp	local01, ##1234 wz
0ca98     68 32 B0 5D |  if_ne	call	#_do_new
0ca9c                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0ca9c     04 4E 05 F1 | 	add	fp, #4
0caa0     A7 12 02 FB | 	rdlong	arg01, fp
0caa4     04 4E 85 F1 | 	sub	fp, #4
0caa8     84 01 00 FF 
0caac     07 15 06 F6 | 	mov	arg02, ##@LR__5438
0cab0     90 3F B1 FD | 	call	#__system___string_cmp
0cab4     00 FA 0D F2 | 	cmp	result1, #0 wz
0cab8     24 00 90 5D |  if_ne	jmp	#LR__1093
0cabc     51 00 00 FF 
0cac0     D4 E5 05 F1 | 	add	objptr, ##41940
0cac4     F2 1E 02 FB | 	rdlong	local01, objptr
0cac8     51 00 00 FF 
0cacc     D4 E5 85 F1 | 	sub	objptr, ##41940
0cad0     04 4E 05 F1 | 	add	fp, #4
0cad4     A7 1E 62 FC | 	wrlong	local01, fp
0cad8     04 4E 85 F1 | 	sub	fp, #4
0cadc     20 00 90 FD | 	jmp	#LR__1094
0cae0                 | LR__1093
0cae0     04 4E 05 F1 | 	add	fp, #4
0cae4     A7 1E 02 FB | 	rdlong	local01, fp
0cae8     04 4E 85 F1 | 	sub	fp, #4
0caec     51 00 00 FF 
0caf0     D4 E5 05 F1 | 	add	objptr, ##41940
0caf4     F2 1E 62 FC | 	wrlong	local01, objptr
0caf8     51 00 00 FF 
0cafc     D4 E5 85 F1 | 	sub	objptr, ##41940
0cb00                 | LR__1094
0cb00                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0cb00     09 12 06 F6 | 	mov	arg01, #9
0cb04     84 8F B1 FD | 	call	#__system__close
0cb08     09 1E 06 F6 | 	mov	local01, #9
0cb0c     4A 00 00 FF 
0cb10     90 E4 05 F1 | 	add	objptr, ##38032
0cb14     F2 12 02 FB | 	rdlong	arg01, objptr
0cb18     4A 00 00 FF 
0cb1c     90 E4 85 F1 | 	sub	objptr, ##38032
0cb20     84 01 00 FF 
0cb24     08 15 06 F6 | 	mov	arg02, ##@LR__5439
0cb28     4C 3F B1 FD | 	call	#__system___string_concat
0cb2c     FD 12 02 F6 | 	mov	arg01, result1
0cb30     04 4E 05 F1 | 	add	fp, #4
0cb34     A7 14 02 FB | 	rdlong	arg02, fp
0cb38     04 4E 85 F1 | 	sub	fp, #4
0cb3c     38 3F B1 FD | 	call	#__system___string_concat
0cb40     FD 14 02 F6 | 	mov	arg02, result1
0cb44     0F 13 02 F6 | 	mov	arg01, local01
0cb48     00 16 06 F6 | 	mov	arg03, #0
0cb4c     D0 4A B1 FD | 	call	#__system___basic_open_string
0cb50     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0cb54     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0cb58     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0cb5c     14 4E 05 F1 | 	add	fp, #20
0cb60     A7 FA 61 FC | 	wrlong	result1, fp
0cb64                 | '   r=geterr() 
0cb64                 | '   if r then 
0cb64     14 4E 85 F1 | 	sub	fp, #20
0cb68     50 01 90 AD |  if_e	jmp	#LR__1096
0cb6c                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
0cb6c     09 12 06 F6 | 	mov	arg01, #9
0cb70     18 8F B1 FD | 	call	#__system__close
0cb74     09 1E 06 F6 | 	mov	local01, #9
0cb78     4A 00 00 FF 
0cb7c     90 E4 05 F1 | 	add	objptr, ##38032
0cb80     F2 12 02 FB | 	rdlong	arg01, objptr
0cb84     4A 00 00 FF 
0cb88     90 E4 85 F1 | 	sub	objptr, ##38032
0cb8c     84 01 00 FF 
0cb90     0A 15 06 F6 | 	mov	arg02, ##@LR__5440
0cb94     E0 3E B1 FD | 	call	#__system___string_concat
0cb98     FD 12 02 F6 | 	mov	arg01, result1
0cb9c     04 4E 05 F1 | 	add	fp, #4
0cba0     A7 14 02 FB | 	rdlong	arg02, fp
0cba4     04 4E 85 F1 | 	sub	fp, #4
0cba8     CC 3E B1 FD | 	call	#__system___string_concat
0cbac     FD 12 02 F6 | 	mov	arg01, result1
0cbb0     84 01 00 FF 
0cbb4     0C 15 06 F6 | 	mov	arg02, ##@LR__5441
0cbb8     BC 3E B1 FD | 	call	#__system___string_concat
0cbbc     FD 14 02 F6 | 	mov	arg02, result1
0cbc0     0F 13 02 F6 | 	mov	arg01, local01
0cbc4     00 16 06 F6 | 	mov	arg03, #0
0cbc8     54 4A B1 FD | 	call	#__system___basic_open_string
0cbcc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0cbd0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0cbd4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0cbd8     14 4E 05 F1 | 	add	fp, #20
0cbdc     A7 FA 61 FC | 	wrlong	result1, fp
0cbe0                 | '     r=geterr() 
0cbe0                 | '     if r then 
0cbe0     14 4E 85 F1 | 	sub	fp, #20
0cbe4     A0 00 90 AD |  if_e	jmp	#LR__1095
0cbe8                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
0cbe8     00 12 06 F6 | 	mov	arg01, #0
0cbec     6C 98 B1 FD | 	call	#__system___getiolock_0540
0cbf0     FD 12 02 F6 | 	mov	arg01, result1
0cbf4     24 3E B1 FD | 	call	#__system___lockmem
0cbf8     84 01 00 FF 
0cbfc     11 15 06 F6 | 	mov	arg02, ##@LR__5442
0cc00     00 12 06 F6 | 	mov	arg01, #0
0cc04     00 16 06 F6 | 	mov	arg03, #0
0cc08     04 4B B1 FD | 	call	#__system___basic_print_string
0cc0c     14 4E 05 F1 | 	add	fp, #20
0cc10     A7 14 02 FB | 	rdlong	arg02, fp
0cc14     14 4E 85 F1 | 	sub	fp, #20
0cc18     00 12 06 F6 | 	mov	arg01, #0
0cc1c     00 16 06 F6 | 	mov	arg03, #0
0cc20     0A 18 06 F6 | 	mov	arg04, #10
0cc24     2C 4B B1 FD | 	call	#__system___basic_print_integer
0cc28     84 01 00 FF 
0cc2c     1F 15 06 F6 | 	mov	arg02, ##@LR__5443
0cc30     00 12 06 F6 | 	mov	arg01, #0
0cc34     00 16 06 F6 | 	mov	arg03, #0
0cc38     D4 4A B1 FD | 	call	#__system___basic_print_string
0cc3c     00 1E 06 F6 | 	mov	local01, #0
0cc40     14 4E 05 F1 | 	add	fp, #20
0cc44     A7 12 02 FB | 	rdlong	arg01, fp
0cc48     14 4E 85 F1 | 	sub	fp, #20
0cc4c     94 64 B1 FD | 	call	#__system___strerror
0cc50     FD 14 02 F6 | 	mov	arg02, result1
0cc54     0F 13 02 F6 | 	mov	arg01, local01
0cc58     00 16 06 F6 | 	mov	arg03, #0
0cc5c     B0 4A B1 FD | 	call	#__system___basic_print_string
0cc60     00 12 06 F6 | 	mov	arg01, #0
0cc64     0A 14 06 F6 | 	mov	arg02, #10
0cc68     00 16 06 F6 | 	mov	arg03, #0
0cc6c     48 4A B1 FD | 	call	#__system___basic_print_char
0cc70     00 12 06 F6 | 	mov	arg01, #0
0cc74     E4 97 B1 FD | 	call	#__system___getiolock_0540
0cc78     FD 00 68 FC | 	wrlong	#0, result1
0cc7c     09 12 06 F6 | 	mov	arg01, #9
0cc80     08 8E B1 FD | 	call	#__system__close
0cc84     7C 01 90 FD | 	jmp	#LR__1100
0cc88                 | LR__1095
0cc88     51 00 00 FF 
0cc8c     D4 E5 05 F1 | 	add	objptr, ##41940
0cc90     F2 12 02 FB | 	rdlong	arg01, objptr
0cc94     51 00 00 FF 
0cc98     D4 E5 85 F1 | 	sub	objptr, ##41940
0cc9c     84 01 00 FF 
0cca0     22 15 06 F6 | 	mov	arg02, ##@LR__5444
0cca4     D0 3D B1 FD | 	call	#__system___string_concat
0cca8     51 00 00 FF 
0ccac     D4 E5 05 F1 | 	add	objptr, ##41940
0ccb0     F2 FA 61 FC | 	wrlong	result1, objptr
0ccb4     51 00 00 FF 
0ccb8     D4 E5 85 F1 | 	sub	objptr, ##41940
0ccbc                 | LR__1096
0ccbc                 | '   close #9: open currentdir$+"/"+loadname for input as #9
0ccbc     09 12 06 F6 | 	mov	arg01, #9
0ccc0     C8 8D B1 FD | 	call	#__system__close
0ccc4     09 1E 06 F6 | 	mov	local01, #9
0ccc8     4A 00 00 FF 
0cccc     90 E4 05 F1 | 	add	objptr, ##38032
0ccd0     F2 12 02 FB | 	rdlong	arg01, objptr
0ccd4     4A 00 00 FF 
0ccd8     90 E4 85 F1 | 	sub	objptr, ##38032
0ccdc     84 01 00 FF 
0cce0     27 15 06 F6 | 	mov	arg02, ##@LR__5445
0cce4     90 3D B1 FD | 	call	#__system___string_concat
0cce8     FD 12 02 F6 | 	mov	arg01, result1
0ccec     51 00 00 FF 
0ccf0     D4 E5 05 F1 | 	add	objptr, ##41940
0ccf4     F2 14 02 FB | 	rdlong	arg02, objptr
0ccf8     51 00 00 FF 
0ccfc     D4 E5 85 F1 | 	sub	objptr, ##41940
0cd00     74 3D B1 FD | 	call	#__system___string_concat
0cd04     FD 14 02 F6 | 	mov	arg02, result1
0cd08     0F 13 02 F6 | 	mov	arg01, local01
0cd0c     00 16 06 F6 | 	mov	arg03, #0
0cd10     0C 49 B1 FD | 	call	#__system___basic_open_string
0cd14                 | '   do
0cd14                 | LR__1097
0cd14     09 12 06 F6 | 	mov	arg01, #9
0cd18     0C 3F B1 FD | 	call	#__system___basic_read_line
0cd1c     FD 1E 02 F6 | 	mov	local01, result1
0cd20     37 00 00 FF 
0cd24     1C E4 05 F1 | 	add	objptr, ##28188
0cd28     F2 1E 62 FC | 	wrlong	local01, objptr
0cd2c     37 00 00 FF 
0cd30     1C E4 85 F1 | 	sub	objptr, ##28188
0cd34     40 49 BF FD | 	call	#_interpret
0cd38     37 00 00 FF 
0cd3c     1C E4 05 F1 | 	add	objptr, ##28188
0cd40     F2 12 02 FB | 	rdlong	arg01, objptr
0cd44     37 00 00 FF 
0cd48     1C E4 85 F1 | 	sub	objptr, ##28188
0cd4c     84 01 00 FF 
0cd50     29 15 06 F6 | 	mov	arg02, ##@LR__5446
0cd54     EC 3C B1 FD | 	call	#__system___string_cmp
0cd58     00 FA 0D F2 | 	cmp	result1, #0 wz
0cd5c     B4 FF 9F 5D |  if_ne	jmp	#LR__1097
0cd60                 | '   close #9   
0cd60     09 12 06 F6 | 	mov	arg01, #9
0cd64     24 8D B1 FD | 	call	#__system__close
0cd68     08 00 90 FD | 	jmp	#LR__1099
0cd6c                 | LR__1098
0cd6c     1E 12 06 F6 | 	mov	arg01, #30
0cd70     10 07 B1 FD | 	call	#_printerror
0cd74                 | LR__1099
0cd74                 | ' print "Loaded ";currentdir$+"/"+loadname
0cd74     00 12 06 F6 | 	mov	arg01, #0
0cd78     E0 96 B1 FD | 	call	#__system___getiolock_0540
0cd7c     FD 12 02 F6 | 	mov	arg01, result1
0cd80     98 3C B1 FD | 	call	#__system___lockmem
0cd84     84 01 00 FF 
0cd88     2A 15 06 F6 | 	mov	arg02, ##@LR__5447
0cd8c     00 12 06 F6 | 	mov	arg01, #0
0cd90     00 16 06 F6 | 	mov	arg03, #0
0cd94     78 49 B1 FD | 	call	#__system___basic_print_string
0cd98     00 1E 06 F6 | 	mov	local01, #0
0cd9c     4A 00 00 FF 
0cda0     90 E4 05 F1 | 	add	objptr, ##38032
0cda4     F2 12 02 FB | 	rdlong	arg01, objptr
0cda8     4A 00 00 FF 
0cdac     90 E4 85 F1 | 	sub	objptr, ##38032
0cdb0     84 01 00 FF 
0cdb4     32 15 06 F6 | 	mov	arg02, ##@LR__5448
0cdb8     BC 3C B1 FD | 	call	#__system___string_concat
0cdbc     FD 12 02 F6 | 	mov	arg01, result1
0cdc0     51 00 00 FF 
0cdc4     D4 E5 05 F1 | 	add	objptr, ##41940
0cdc8     F2 14 02 FB | 	rdlong	arg02, objptr
0cdcc     51 00 00 FF 
0cdd0     D4 E5 85 F1 | 	sub	objptr, ##41940
0cdd4     A0 3C B1 FD | 	call	#__system___string_concat
0cdd8     FD 14 02 F6 | 	mov	arg02, result1
0cddc     0F 13 02 F6 | 	mov	arg01, local01
0cde0     00 16 06 F6 | 	mov	arg03, #0
0cde4     28 49 B1 FD | 	call	#__system___basic_print_string
0cde8     00 12 06 F6 | 	mov	arg01, #0
0cdec     0A 14 06 F6 | 	mov	arg02, #10
0cdf0     00 16 06 F6 | 	mov	arg03, #0
0cdf4     C0 48 B1 FD | 	call	#__system___basic_print_char
0cdf8     00 12 06 F6 | 	mov	arg01, #0
0cdfc     5C 96 B1 FD | 	call	#__system___getiolock_0540
0ce00     FD 00 68 FC | 	wrlong	#0, result1
0ce04                 | LR__1100
0ce04     A7 F0 03 F6 | 	mov	ptra, fp
0ce08     B2 00 A0 FD | 	call	#popregs_
0ce0c                 | _do_load_ret
0ce0c     2D 00 64 FD | 	ret
0ce10                 | 
0ce10                 | ' 
0ce10                 | ' sub do_end
0ce10                 | _do_end
0ce10     4A 00 00 FF 
0ce14     7C E4 05 F1 | 	add	objptr, ##38012
0ce18     F2 00 02 FB | 	rdlong	_var01, objptr
0ce1c     01 00 86 F1 | 	sub	_var01, #1
0ce20     04 E4 05 F1 | 	add	objptr, #4
0ce24     F2 00 62 FC | 	wrlong	_var01, objptr
0ce28     06 00 00 FF 
0ce2c     34 E4 05 F1 | 	add	objptr, ##3124
0ce30     FF FF BF FF 
0ce34     F2 FE 6B FC | 	wrlong	##2147483647, objptr
0ce38     50 00 00 FF 
0ce3c     B4 E4 85 F1 | 	sub	objptr, ##41140
0ce40                 | _do_end_ret
0ce40     2D 00 64 FD | 	ret
0ce44                 | 
0ce44                 | ' 
0ce44                 | ' '----------------- Run the program 
0ce44                 | ' 
0ce44                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0ce44                 | ' 
0ce44                 | ' sub do_run
0ce44                 | _do_run
0ce44     01 4A 05 F6 | 	mov	COUNT_, #1
0ce48     A8 00 A0 FD | 	call	#pushregs_
0ce4c     4A 00 00 FF 
0ce50     80 E4 05 F1 | 	add	objptr, ##38016
0ce54     F2 18 02 FB | 	rdlong	arg04, objptr
0ce58     0C 17 02 F6 | 	mov	arg03, arg04
0ce5c     01 16 66 F0 | 	shl	arg03, #1
0ce60     0C 17 02 F1 | 	add	arg03, arg04
0ce64     02 16 66 F0 | 	shl	arg03, #2
0ce68     03 00 00 FF 
0ce6c     04 E4 85 F1 | 	sub	objptr, ##1540
0ce70     F2 16 02 F1 | 	add	arg03, objptr
0ce74     0B 15 02 FB | 	rdlong	arg02, arg03
0ce78                 | ' numpar=compiledline(lineptr_e).result.uresult
0ce78                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
0ce78     01 14 0E F2 | 	cmp	arg02, #1 wz
0ce7c     47 00 00 FF 
0ce80     7C E4 85 F1 | 	sub	objptr, ##36476
0ce84     00 12 06 A6 |  if_e	mov	arg01, #0
0ce88     F8 FA BF AD |  if_e	call	#_do_load
0ce8c     4A 00 00 FF 
0ce90     84 E4 05 F1 | 	add	objptr, ##38020
0ce94     F2 18 02 FB | 	rdlong	arg04, objptr
0ce98     06 00 00 FF 
0ce9c     30 E4 05 F1 | 	add	objptr, ##3120
0cea0     F2 18 62 FC | 	wrlong	arg04, objptr
0cea4     04 E4 05 F1 | 	add	objptr, #4
0cea8     F2 00 68 FC | 	wrlong	#0, objptr
0ceac     04 E4 05 F1 | 	add	objptr, #4
0ceb0     FF FF FF FF 
0ceb4     F2 FE 6B FC | 	wrlong	##-1, objptr
0ceb8                 | ' if inrun>0 then 
0ceb8     2C E4 05 F1 | 	add	objptr, #44
0cebc     F2 18 02 FB | 	rdlong	arg04, objptr
0cec0     50 00 00 FF 
0cec4     E8 E4 85 F1 | 	sub	objptr, ##41192
0cec8     01 18 16 F2 | 	cmp	arg04, #1 wc
0cecc     30 00 90 CD |  if_b	jmp	#LR__1110
0ced0     50 00 00 FF 
0ced4     EC E4 05 F1 | 	add	objptr, ##41196
0ced8     F2 12 02 F6 | 	mov	arg01, objptr
0cedc     38 E4 85 F1 | 	sub	objptr, #56
0cee0     F2 14 02 FB | 	rdlong	arg02, objptr
0cee4     18 16 06 F6 | 	mov	arg03, #24
0cee8     44 00 00 FF 
0ceec     E8 E5 85 F1 | 	sub	objptr, ##35304
0cef0     E8 2E B1 FD | 	call	#_psram_spin2_read1
0cef4     0B 00 00 FF 
0cef8     CC E4 85 F1 | 	sub	objptr, ##5836
0cefc                 | '   psram.read1(varptr(runheader),runptr,24)  
0cefc                 | '   return
0cefc     88 02 90 FD | 	jmp	#LR__1116
0cf00                 | LR__1110
0cf00     50 00 00 FF 
0cf04     E8 E4 05 F1 | 	add	objptr, ##41192
0cf08     F2 02 68 FC | 	wrlong	#1, objptr
0cf0c     04 E4 05 F1 | 	add	objptr, #4
0cf10     F2 12 02 F6 | 	mov	arg01, objptr
0cf14     38 E4 85 F1 | 	sub	objptr, #56
0cf18     F2 14 02 FB | 	rdlong	arg02, objptr
0cf1c     18 16 06 F6 | 	mov	arg03, #24
0cf20     44 00 00 FF 
0cf24     E8 E5 85 F1 | 	sub	objptr, ##35304
0cf28     B0 2E B1 FD | 	call	#_psram_spin2_read1
0cf2c                 | ' inrun=1
0cf2c                 | ' psram.read1(varptr(runheader),runptr,24) 
0cf2c                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0cf2c     45 00 00 FF 
0cf30     20 E4 05 F1 | 	add	objptr, ##35360
0cf34     F2 1E 02 FB | 	rdlong	local01, objptr
0cf38     50 00 00 FF 
0cf3c     EC E4 85 F1 | 	sub	objptr, ##41196
0cf40     FF FF 7F FF 
0cf44     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0cf48     50 00 00 AF 
0cf4c     E8 E4 05 A1 |  if_e	add	objptr, ##41192
0cf50     F2 00 68 AC |  if_e	wrlong	#0, objptr
0cf54     50 00 00 AF 
0cf58     E8 E4 85 A1 |  if_e	sub	objptr, ##41192
0cf5c     28 02 90 AD |  if_e	jmp	#LR__1116
0cf60                 | ' do 
0cf60                 | LR__1111
0cf60                 | '   if runptr<>oldrunptr then
0cf60     50 00 00 FF 
0cf64     B4 E4 05 F1 | 	add	objptr, ##41140
0cf68     F2 1E 02 FB | 	rdlong	local01, objptr
0cf6c     08 E4 05 F1 | 	add	objptr, #8
0cf70     F2 18 02 FB | 	rdlong	arg04, objptr
0cf74     50 00 00 FF 
0cf78     BC E4 85 F1 | 	sub	objptr, ##41148
0cf7c     0C 1F 0A F2 | 	cmp	local01, arg04 wz
0cf80     CC 00 90 AD |  if_e	jmp	#LR__1112
0cf84     50 00 00 FF 
0cf88     EC E4 05 F1 | 	add	objptr, ##41196
0cf8c     F2 12 02 F6 | 	mov	arg01, objptr
0cf90     38 E4 85 F1 | 	sub	objptr, #56
0cf94     F2 14 02 FB | 	rdlong	arg02, objptr
0cf98     18 16 06 F6 | 	mov	arg03, #24
0cf9c     44 00 00 FF 
0cfa0     E8 E5 85 F1 | 	sub	objptr, ##35304
0cfa4     34 2E B1 FD | 	call	#_psram_spin2_read1
0cfa8     3B 00 00 FF 
0cfac     B0 E5 05 F1 | 	add	objptr, ##30640
0cfb0     F2 12 02 F6 | 	mov	arg01, objptr
0cfb4     09 00 00 FF 
0cfb8     38 E4 05 F1 | 	add	objptr, ##4664
0cfbc     F2 14 02 FB | 	rdlong	arg02, objptr
0cfc0     0B 00 00 FF 
0cfc4     50 E4 85 F1 | 	sub	objptr, ##5712
0cfc8     F2 1E 02 FB | 	rdlong	local01, objptr
0cfcc     01 1E 66 F0 | 	shl	local01, #1
0cfd0     0F 15 02 F1 | 	add	arg02, local01
0cfd4     0B 00 00 FF 
0cfd8     90 E4 05 F1 | 	add	objptr, ##5776
0cfdc     F2 16 02 FB | 	rdlong	arg03, objptr
0cfe0     40 E4 85 F1 | 	sub	objptr, #64
0cfe4     F2 1E 02 FB | 	rdlong	local01, objptr
0cfe8     0F 17 82 F1 | 	sub	arg03, local01
0cfec     44 00 00 FF 
0cff0     E8 E5 85 F1 | 	sub	objptr, ##35304
0cff4     E4 2D B1 FD | 	call	#_psram_spin2_read1
0cff8     45 00 00 FF 
0cffc     28 E4 05 F1 | 	add	objptr, ##35368
0d000     F2 1E 02 FB | 	rdlong	local01, objptr
0d004     40 E4 85 F1 | 	sub	objptr, #64
0d008     F2 FA 01 FB | 	rdlong	result1, objptr
0d00c     FD 1E 82 F1 | 	sub	local01, result1
0d010     0B 00 00 FF 
0d014     50 E4 85 F1 | 	sub	objptr, ##5712
0d018     F2 FA 01 FB | 	rdlong	result1, objptr
0d01c     FD 1E 12 FD | 	qdiv	local01, result1
0d020     05 00 00 FF 
0d024     18 E4 05 F1 | 	add	objptr, ##2584
0d028     18 1E 62 FD | 	getqx	local01
0d02c     03 1E 86 F1 | 	sub	local01, #3
0d030     F2 1E 62 FC | 	wrlong	local01, objptr
0d034     06 00 00 FF 
0d038     38 E4 05 F1 | 	add	objptr, ##3128
0d03c     F2 1E 02 FB | 	rdlong	local01, objptr
0d040     08 E4 05 F1 | 	add	objptr, #8
0d044     F2 1E 62 FC | 	wrlong	local01, objptr
0d048     50 00 00 FF 
0d04c     BC E4 85 F1 | 	sub	objptr, ##41148
0d050                 | LR__1112
0d050     50 00 00 FF 
0d054     00 E5 05 F1 | 	add	objptr, ##41216
0d058     F2 1E 02 FB | 	rdlong	local01, objptr
0d05c     4C E4 85 F1 | 	sub	objptr, #76
0d060     F2 1E 62 FC | 	wrlong	local01, objptr
0d064     04 E4 05 F1 | 	add	objptr, #4
0d068     F2 12 02 FB | 	rdlong	arg01, objptr
0d06c     50 00 00 FF 
0d070     B8 E4 85 F1 | 	sub	objptr, ##41144
0d074     DC E8 BF FD | 	call	#_execute_line
0d078     50 00 00 FF 
0d07c     B8 E4 05 F1 | 	add	objptr, ##41144
0d080     F2 FA 61 FC | 	wrlong	result1, objptr
0d084     04 E4 85 F1 | 	sub	objptr, #4
0d088     F2 1E 02 FB | 	rdlong	local01, objptr
0d08c     50 00 00 FF 
0d090     B4 E4 85 F1 | 	sub	objptr, ##41140
0d094     FF FF 3F FF 
0d098     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0d09c     30 00 90 AD |  if_e	jmp	#LR__1114
0d0a0     E0 12 06 F6 | 	mov	arg01, #224
0d0a4     C4 30 B1 FD | 	call	#_usbnew_spin2_keystate
0d0a8     00 FA 0D F2 | 	cmp	result1, #0 wz
0d0ac     10 00 90 5D |  if_ne	jmp	#LR__1113
0d0b0     E4 12 06 F6 | 	mov	arg01, #228
0d0b4     B4 30 B1 FD | 	call	#_usbnew_spin2_keystate
0d0b8     00 FA 0D F2 | 	cmp	result1, #0 wz
0d0bc     A0 FE 9F AD |  if_e	jmp	#LR__1111
0d0c0                 | LR__1113
0d0c0     06 12 06 F6 | 	mov	arg01, #6
0d0c4     A4 30 B1 FD | 	call	#_usbnew_spin2_keystate
0d0c8     00 FA 0D F2 | 	cmp	result1, #0 wz
0d0cc     90 FE 9F AD |  if_e	jmp	#LR__1111
0d0d0                 | LR__1114
0d0d0                 | '   ''do whatever kbm.peek_latest_key()=$106 
0d0d0                 | ' if runptr<>$7FFF_FFFF then 
0d0d0     50 00 00 FF 
0d0d4     B4 E4 05 F1 | 	add	objptr, ##41140
0d0d8     F2 1E 02 FB | 	rdlong	local01, objptr
0d0dc     50 00 00 FF 
0d0e0     B4 E4 85 F1 | 	sub	objptr, ##41140
0d0e4     FF FF 3F FF 
0d0e8     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0d0ec     64 00 90 AD |  if_e	jmp	#LR__1115
0d0f0                 | '     print "Stopped at line ";runheader(0)
0d0f0     00 12 06 F6 | 	mov	arg01, #0
0d0f4     64 93 B1 FD | 	call	#__system___getiolock_0540
0d0f8     FD 12 02 F6 | 	mov	arg01, result1
0d0fc     1C 39 B1 FD | 	call	#__system___lockmem
0d100     84 01 00 FF 
0d104     34 15 06 F6 | 	mov	arg02, ##@LR__5449
0d108     00 12 06 F6 | 	mov	arg01, #0
0d10c     00 16 06 F6 | 	mov	arg03, #0
0d110     FC 45 B1 FD | 	call	#__system___basic_print_string
0d114     50 00 00 FF 
0d118     EC E4 05 F1 | 	add	objptr, ##41196
0d11c     F2 14 02 FB | 	rdlong	arg02, objptr
0d120     50 00 00 FF 
0d124     EC E4 85 F1 | 	sub	objptr, ##41196
0d128     00 12 06 F6 | 	mov	arg01, #0
0d12c     00 16 06 F6 | 	mov	arg03, #0
0d130     0A 18 06 F6 | 	mov	arg04, #10
0d134     5C 46 B1 FD | 	call	#__system___basic_print_unsigned
0d138     00 12 06 F6 | 	mov	arg01, #0
0d13c     0A 14 06 F6 | 	mov	arg02, #10
0d140     00 16 06 F6 | 	mov	arg03, #0
0d144     70 45 B1 FD | 	call	#__system___basic_print_char
0d148     00 12 06 F6 | 	mov	arg01, #0
0d14c     0C 93 B1 FD | 	call	#__system___getiolock_0540
0d150     FD 00 68 FC | 	wrlong	#0, result1
0d154                 | LR__1115
0d154     50 00 00 FF 
0d158     E8 E4 05 F1 | 	add	objptr, ##41192
0d15c     F2 00 68 FC | 	wrlong	#0, objptr
0d160     50 00 00 FF 
0d164     E8 E4 85 F1 | 	sub	objptr, ##41192
0d168     11 12 06 F6 | 	mov	arg01, #17
0d16c     08 14 06 F6 | 	mov	arg02, #8
0d170     10 16 06 F6 | 	mov	arg03, #16
0d174     A8 12 B1 FD | 	call	#_hg010b_spin2_setspritesize
0d178     10 12 06 F6 | 	mov	arg01, #16
0d17c     20 14 06 F6 | 	mov	arg02, #32
0d180     20 16 06 F6 | 	mov	arg03, #32
0d184     98 12 B1 FD | 	call	#_hg010b_spin2_setspritesize
0d188                 | LR__1116
0d188     A7 F0 03 F6 | 	mov	ptra, fp
0d18c     B2 00 A0 FD | 	call	#popregs_
0d190                 | _do_run_ret
0d190     2D 00 64 FD | 	ret
0d194                 | 
0d194                 | ' 
0d194                 | ' 
0d194                 | ' 
0d194                 | ' 
0d194                 | ' 
0d194                 | ' 
0d194                 | ' 
0d194                 | ' sub do_defenv
0d194                 | _do_defenv
0d194     08 4A 05 F6 | 	mov	COUNT_, #8
0d198     A8 00 A0 FD | 	call	#pushregs_
0d19c     B4 F0 07 F1 | 	add	ptra, #180
0d1a0     4A 00 00 FF 
0d1a4     80 E4 05 F1 | 	add	objptr, ##38016
0d1a8     F2 1E 02 FB | 	rdlong	local01, objptr
0d1ac     0F 1B 02 F6 | 	mov	arg05, local01
0d1b0     01 1A 66 F0 | 	shl	arg05, #1
0d1b4     0F 1B 02 F1 | 	add	arg05, local01
0d1b8     02 1A 66 F0 | 	shl	arg05, #2
0d1bc     03 00 00 FF 
0d1c0     04 E4 85 F1 | 	sub	objptr, ##1540
0d1c4     F2 20 02 F6 | 	mov	local02, objptr
0d1c8     F2 1A 02 F1 | 	add	arg05, objptr
0d1cc     0D 1B 02 FB | 	rdlong	arg05, arg05
0d1d0     10 4E 05 F1 | 	add	fp, #16
0d1d4     A7 1A 62 FC | 	wrlong	arg05, fp
0d1d8                 | ' 
0d1d8                 | ' numpar=compiledline(lineptr_e).result.uresult
0d1d8                 | ' 
0d1d8                 | ' 
0d1d8                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0d1d8                 | ' 'TODO for 2.0: ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0d1d8                 | ' ' defsnd channel, a,d,s,r - defines ADSR attack time, decay time, sus level, release time. Sus point has to be returned - how?
0d1d8                 | ' 
0d1d8                 | ' 
0d1d8                 | ' if numpar<>2 andalso numpar<>5 andalso numpar<>9 then return ' and print error
0d1d8     10 4E 85 F1 | 	sub	fp, #16
0d1dc     02 1A 0E F2 | 	cmp	arg05, #2 wz
0d1e0     47 00 00 FF 
0d1e4     7C E4 85 F1 | 	sub	objptr, ##36476
0d1e8     10 4E 05 51 |  if_ne	add	fp, #16
0d1ec     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0d1f0     10 4E 85 51 |  if_ne	sub	fp, #16
0d1f4     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0d1f8     10 4E 05 51 |  if_ne	add	fp, #16
0d1fc     0F 21 02 56 |  if_ne	mov	local02, local01
0d200     10 4E 85 51 |  if_ne	sub	fp, #16
0d204     09 20 0E 52 |  if_ne	cmp	local02, #9 wz
0d208     10 0C 90 5D |  if_ne	jmp	#LR__1141
0d20c                 | ' 
0d20c                 | '  
0d20c                 | ' if numpar=2 then
0d20c     10 4E 05 F1 | 	add	fp, #16
0d210     A7 20 02 FB | 	rdlong	local02, fp
0d214     10 4E 85 F1 | 	sub	fp, #16
0d218     02 20 0E F2 | 	cmp	local02, #2 wz
0d21c     24 04 90 5D |  if_ne	jmp	#LR__1133
0d220     34 E8 BF FD | 	call	#_pop
0d224     FF 1A 02 F6 | 	mov	arg05, result3
0d228     5C 4E 05 F1 | 	add	fp, #92
0d22c     A7 FA 61 FC | 	wrlong	result1, fp
0d230     04 4E 05 F1 | 	add	fp, #4
0d234     A7 FC 61 FC | 	wrlong	result2, fp
0d238     04 4E 05 F1 | 	add	fp, #4
0d23c     A7 1A 62 FC | 	wrlong	arg05, fp
0d240                 | '   t1=pop()
0d240                 | '   if t1.result_type=result_string2 then 
0d240     64 4E 85 F1 | 	sub	fp, #100
0d244     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0d248     20 00 90 5D |  if_ne	jmp	#LR__1120
0d24c     5C 4E 05 F1 | 	add	fp, #92
0d250     A7 12 02 FB | 	rdlong	arg01, fp
0d254     5C 4E 85 F1 | 	sub	fp, #92
0d258     A8 40 B0 FD | 	call	#_convertstring
0d25c     68 4E 05 F1 | 	add	fp, #104
0d260     A7 FA 61 FC | 	wrlong	result1, fp
0d264     68 4E 85 F1 | 	sub	fp, #104
0d268     58 00 90 FD | 	jmp	#LR__1123
0d26c                 | LR__1120
0d26c     64 4E 05 F1 | 	add	fp, #100
0d270     A7 20 02 FB | 	rdlong	local02, fp
0d274     64 4E 85 F1 | 	sub	fp, #100
0d278     1F 20 0E F2 | 	cmp	local02, #31 wz
0d27c     18 00 90 5D |  if_ne	jmp	#LR__1121
0d280     5C 4E 05 F1 | 	add	fp, #92
0d284     A7 20 02 FB | 	rdlong	local02, fp
0d288     0C 4E 05 F1 | 	add	fp, #12
0d28c     A7 20 62 FC | 	wrlong	local02, fp
0d290     68 4E 85 F1 | 	sub	fp, #104
0d294     2C 00 90 FD | 	jmp	#LR__1122
0d298                 | LR__1121
0d298     84 01 00 FF 
0d29c     45 21 06 F6 | 	mov	local02, ##@LR__5450
0d2a0     68 4E 05 F1 | 	add	fp, #104
0d2a4     A7 20 62 FC | 	wrlong	local02, fp
0d2a8     0C 4E 85 F1 | 	sub	fp, #12
0d2ac     A7 12 02 F6 | 	mov	arg01, fp
0d2b0     5C 4E 85 F1 | 	sub	fp, #92
0d2b4     70 88 B0 FD | 	call	#_converttoint
0d2b8     24 4E 05 F1 | 	add	fp, #36
0d2bc     A7 FA 61 FC | 	wrlong	result1, fp
0d2c0     24 4E 85 F1 | 	sub	fp, #36
0d2c4                 | LR__1122
0d2c4                 | LR__1123
0d2c4                 | ' 
0d2c4                 | '     
0d2c4                 | '   if s1<>"" then 
0d2c4     68 4E 05 F1 | 	add	fp, #104
0d2c8     A7 12 02 FB | 	rdlong	arg01, fp
0d2cc     68 4E 85 F1 | 	sub	fp, #104
0d2d0     84 01 00 FF 
0d2d4     46 15 06 F6 | 	mov	arg02, ##@LR__5451
0d2d8     68 37 B1 FD | 	call	#__system___string_cmp
0d2dc     00 FA 0D F2 | 	cmp	result1, #0 wz
0d2e0     24 02 90 AD |  if_e	jmp	#LR__1127
0d2e4     70 E7 BF FD | 	call	#_pop
0d2e8     FF 1E 02 F6 | 	mov	local01, result3
0d2ec     5C 4E 05 F1 | 	add	fp, #92
0d2f0     A7 FA 61 FC | 	wrlong	result1, fp
0d2f4     04 4E 05 F1 | 	add	fp, #4
0d2f8     A7 FC 61 FC | 	wrlong	result2, fp
0d2fc     04 4E 05 F1 | 	add	fp, #4
0d300     A7 1E 62 FC | 	wrlong	local01, fp
0d304     08 4E 85 F1 | 	sub	fp, #8
0d308     A7 12 02 F6 | 	mov	arg01, fp
0d30c     5C 4E 85 F1 | 	sub	fp, #92
0d310     14 88 B0 FD | 	call	#_converttoint
0d314     20 4E 05 F1 | 	add	fp, #32
0d318     A7 FA 61 FC | 	wrlong	result1, fp
0d31c     20 4E 85 F1 | 	sub	fp, #32
0d320                 | '     t1=pop()
0d320                 | '     channel=converttoint(t1) 
0d320                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0d320     09 12 06 F6 | 	mov	arg01, #9
0d324     64 87 B1 FD | 	call	#__system__close
0d328     09 20 06 F6 | 	mov	local02, #9
0d32c     84 01 00 FF 
0d330     47 13 06 F6 | 	mov	arg01, ##@LR__5452
0d334     68 4E 05 F1 | 	add	fp, #104
0d338     A7 14 02 FB | 	rdlong	arg02, fp
0d33c     68 4E 85 F1 | 	sub	fp, #104
0d340     34 37 B1 FD | 	call	#__system___string_concat
0d344     FD 14 02 F6 | 	mov	arg02, result1
0d348     10 13 02 F6 | 	mov	arg01, local02
0d34c     00 16 06 F6 | 	mov	arg03, #0
0d350     CC 42 B1 FD | 	call	#__system___basic_open_string
0d354     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d358     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0d35c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d360     0C 4E 05 F1 | 	add	fp, #12
0d364     A7 FA 61 FC | 	wrlong	result1, fp
0d368                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0d368     0C 4E 85 F1 | 	sub	fp, #12
0d36c     A0 00 90 AD |  if_e	jmp	#LR__1124
0d370     00 12 06 F6 | 	mov	arg01, #0
0d374     E4 90 B1 FD | 	call	#__system___getiolock_0540
0d378     FD 12 02 F6 | 	mov	arg01, result1
0d37c     9C 36 B1 FD | 	call	#__system___lockmem
0d380     84 01 00 FF 
0d384     54 15 06 F6 | 	mov	arg02, ##@LR__5453
0d388     00 12 06 F6 | 	mov	arg01, #0
0d38c     00 16 06 F6 | 	mov	arg03, #0
0d390     7C 43 B1 FD | 	call	#__system___basic_print_string
0d394     0C 4E 05 F1 | 	add	fp, #12
0d398     A7 14 02 FB | 	rdlong	arg02, fp
0d39c     0C 4E 85 F1 | 	sub	fp, #12
0d3a0     00 12 06 F6 | 	mov	arg01, #0
0d3a4     00 16 06 F6 | 	mov	arg03, #0
0d3a8     0A 18 06 F6 | 	mov	arg04, #10
0d3ac     A4 43 B1 FD | 	call	#__system___basic_print_integer
0d3b0     84 01 00 FF 
0d3b4     62 15 06 F6 | 	mov	arg02, ##@LR__5454
0d3b8     00 12 06 F6 | 	mov	arg01, #0
0d3bc     00 16 06 F6 | 	mov	arg03, #0
0d3c0     4C 43 B1 FD | 	call	#__system___basic_print_string
0d3c4     00 20 06 F6 | 	mov	local02, #0
0d3c8     0C 4E 05 F1 | 	add	fp, #12
0d3cc     A7 12 02 FB | 	rdlong	arg01, fp
0d3d0     0C 4E 85 F1 | 	sub	fp, #12
0d3d4     0C 5D B1 FD | 	call	#__system___strerror
0d3d8     FD 14 02 F6 | 	mov	arg02, result1
0d3dc     10 13 02 F6 | 	mov	arg01, local02
0d3e0     00 16 06 F6 | 	mov	arg03, #0
0d3e4     28 43 B1 FD | 	call	#__system___basic_print_string
0d3e8     00 12 06 F6 | 	mov	arg01, #0
0d3ec     0A 14 06 F6 | 	mov	arg02, #10
0d3f0     00 16 06 F6 | 	mov	arg03, #0
0d3f4     C0 42 B1 FD | 	call	#__system___basic_print_char
0d3f8     00 12 06 F6 | 	mov	arg01, #0
0d3fc     5C 90 B1 FD | 	call	#__system___getiolock_0540
0d400     FD 00 68 FC | 	wrlong	#0, result1
0d404     09 12 06 F6 | 	mov	arg01, #9
0d408     80 86 B1 FD | 	call	#__system__close
0d40c     0C 0A 90 FD | 	jmp	#LR__1141
0d410                 | LR__1124
0d410                 | '     get #9,17,envbuf8(channel,0),256
0d410     20 4E 05 F1 | 	add	fp, #32
0d414     A7 1A 02 FB | 	rdlong	arg05, fp
0d418     20 4E 85 F1 | 	sub	fp, #32
0d41c     0D 17 02 F6 | 	mov	arg03, arg05
0d420     09 16 66 F0 | 	shl	arg03, #9
0d424     0D 17 02 F1 | 	add	arg03, arg05
0d428     0C 00 00 FF 
0d42c     D8 E4 05 F1 | 	add	objptr, ##6360
0d430     F2 16 02 F1 | 	add	arg03, objptr
0d434     09 12 06 F6 | 	mov	arg01, #9
0d438     11 14 06 F6 | 	mov	arg02, #17
0d43c     00 19 06 F6 | 	mov	arg04, #256
0d440     01 1A 06 F6 | 	mov	arg05, #1
0d444     0C 00 00 FF 
0d448     D8 E4 85 F1 | 	sub	objptr, ##6360
0d44c     3C 44 B1 FD | 	call	#__system___basic_get
0d450                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0d450     14 4E 05 F1 | 	add	fp, #20
0d454     A7 FE 69 FC | 	wrlong	#255, fp
0d458     14 4E 85 F1 | 	sub	fp, #20
0d45c     0C 00 00 FF 
0d460     D8 E4 05 F1 | 	add	objptr, ##6360
0d464     97 30 48 FB | 	callpa	#(@LR__1126-@LR__1125)>>2,fcache_load_ptr_
0d468                 | LR__1125
0d468     20 4E 05 F1 | 	add	fp, #32
0d46c     A7 18 02 FB | 	rdlong	arg04, fp
0d470     0C 21 02 F6 | 	mov	local02, arg04
0d474     09 20 66 F0 | 	shl	local02, #9
0d478     F2 20 02 F1 | 	add	local02, objptr
0d47c     0C 4E 85 F1 | 	sub	fp, #12
0d480     A7 1E 02 FB | 	rdlong	local01, fp
0d484     0F 1B 02 F6 | 	mov	arg05, local01
0d488     01 1A 66 F0 | 	shl	arg05, #1
0d48c     10 1B 02 F1 | 	add	arg05, local02
0d490     0C 21 02 F6 | 	mov	local02, arg04
0d494     09 20 66 F0 | 	shl	local02, #9
0d498     0C 21 02 F1 | 	add	local02, arg04
0d49c     F2 20 02 F1 | 	add	local02, objptr
0d4a0     10 1F 02 F1 | 	add	local01, local02
0d4a4     0F 21 C2 FA | 	rdbyte	local02, local01
0d4a8     00 21 06 FA | 	mul	local02, #256
0d4ac     0D 21 52 FC | 	wrword	local02, arg05
0d4b0     A7 20 02 FB | 	rdlong	local02, fp
0d4b4     01 20 86 F1 | 	sub	local02, #1
0d4b8     A7 20 62 FC | 	wrlong	local02, fp
0d4bc     14 4E 85 F1 | 	sub	fp, #20
0d4c0     00 20 56 F2 | 	cmps	local02, #0 wc
0d4c4     A0 FF 9F 3D |  if_ae	jmp	#LR__1125
0d4c8                 | LR__1126
0d4c8     0C 00 00 FF 
0d4cc     D8 E4 85 F1 | 	sub	objptr, ##6360
0d4d0                 | '     close #9
0d4d0     09 12 06 F6 | 	mov	arg01, #9
0d4d4     B4 85 B1 FD | 	call	#__system__close
0d4d8     20 4E 05 F1 | 	add	fp, #32
0d4dc     A7 20 02 FB | 	rdlong	local02, fp
0d4e0     20 4E 85 F1 | 	sub	fp, #32
0d4e4     09 20 66 F0 | 	shl	local02, #9
0d4e8     0C 00 00 FF 
0d4ec     D8 E4 05 F1 | 	add	objptr, ##6360
0d4f0     F2 20 02 F1 | 	add	local02, objptr
0d4f4     FE 21 06 F1 | 	add	local02, #510
0d4f8     10 01 58 FC | 	wrword	#0, local02
0d4fc                 | '     envbuf(channel,255)=0                                                                   '  for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0d4fc                 | '     return
0d4fc     0C 00 00 FF 
0d500     D8 E4 85 F1 | 	sub	objptr, ##6360
0d504     14 09 90 FD | 	jmp	#LR__1141
0d508                 | LR__1127
0d508                 | '     if wptr < ($80000 - 2048) then 
0d508     24 4E 05 F1 | 	add	fp, #36
0d50c     A7 22 02 FB | 	rdlong	local03, fp
0d510     24 4E 85 F1 | 	sub	fp, #36
0d514     FC 03 00 FF 
0d518     00 22 56 F2 | 	cmps	local03, ##522240 wc
0d51c     7C 00 90 3D |  if_ae	jmp	#LR__1130
0d520                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0d520     14 4E 05 F1 | 	add	fp, #20
0d524     A7 00 68 FC | 	wrlong	#0, fp
0d528     14 4E 85 F1 | 	sub	fp, #20
0d52c     0C 00 00 FF 
0d530     D8 E4 05 F1 | 	add	objptr, ##6360
0d534     97 2C 48 FB | 	callpa	#(@LR__1129-@LR__1128)>>2,fcache_load_ptr_
0d538                 | LR__1128
0d538     20 4E 05 F1 | 	add	fp, #32
0d53c     A7 22 02 FB | 	rdlong	local03, fp
0d540     09 22 66 F0 | 	shl	local03, #9
0d544     F2 22 02 F1 | 	add	local03, objptr
0d548     0C 4E 85 F1 | 	sub	fp, #12
0d54c     A7 20 02 FB | 	rdlong	local02, fp
0d550     10 1F 02 F6 | 	mov	local01, local02
0d554     01 1E 66 F0 | 	shl	local01, #1
0d558     11 1F 02 F1 | 	add	local01, local03
0d55c     10 4E 05 F1 | 	add	fp, #16
0d560     A7 12 02 FB | 	rdlong	arg01, fp
0d564     01 20 66 F0 | 	shl	local02, #1
0d568     10 13 02 F1 | 	add	arg01, local02
0d56c     09 FB E1 FA | 	rdword	result1, arg01
0d570     0F FB 51 FC | 	wrword	result1, local01
0d574     10 4E 85 F1 | 	sub	fp, #16
0d578     A7 22 02 FB | 	rdlong	local03, fp
0d57c     01 22 06 F1 | 	add	local03, #1
0d580     A7 22 62 FC | 	wrlong	local03, fp
0d584     14 4E 85 F1 | 	sub	fp, #20
0d588     00 23 56 F2 | 	cmps	local03, #256 wc
0d58c     A8 FF 9F CD |  if_b	jmp	#LR__1128
0d590                 | LR__1129
0d590     0C 00 00 FF 
0d594     D8 E4 85 F1 | 	sub	objptr, ##6360
0d598     78 00 90 FD | 	jmp	#LR__1132
0d59c                 | LR__1130
0d59c                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0d59c     14 4E 05 F1 | 	add	fp, #20
0d5a0     A7 00 68 FC | 	wrlong	#0, fp
0d5a4     14 4E 85 F1 | 	sub	fp, #20
0d5a8                 | LR__1131
0d5a8     20 4E 05 F1 | 	add	fp, #32
0d5ac     A7 22 02 FB | 	rdlong	local03, fp
0d5b0     09 22 66 F0 | 	shl	local03, #9
0d5b4     0C 00 00 FF 
0d5b8     D8 E4 05 F1 | 	add	objptr, ##6360
0d5bc     F2 22 02 F1 | 	add	local03, objptr
0d5c0     0C 4E 85 F1 | 	sub	fp, #12
0d5c4     A7 20 02 FB | 	rdlong	local02, fp
0d5c8     10 1F 02 F6 | 	mov	local01, local02
0d5cc     01 1E 66 F0 | 	shl	local01, #1
0d5d0     11 1F 02 F1 | 	add	local01, local03
0d5d4     10 4E 05 F1 | 	add	fp, #16
0d5d8     A7 12 02 FB | 	rdlong	arg01, fp
0d5dc     24 4E 85 F1 | 	sub	fp, #36
0d5e0     01 20 66 F0 | 	shl	local02, #1
0d5e4     10 13 02 F1 | 	add	arg01, local02
0d5e8     0C 00 00 FF 
0d5ec     D8 E4 85 F1 | 	sub	objptr, ##6360
0d5f0     7C 01 B1 FD | 	call	#_psdpeek
0d5f4     0F FB 51 FC | 	wrword	result1, local01
0d5f8     14 4E 05 F1 | 	add	fp, #20
0d5fc     A7 22 02 FB | 	rdlong	local03, fp
0d600     01 22 06 F1 | 	add	local03, #1
0d604     A7 22 62 FC | 	wrlong	local03, fp
0d608     14 4E 85 F1 | 	sub	fp, #20
0d60c     00 23 56 F2 | 	cmps	local03, #256 wc
0d610     94 FF 9F CD |  if_b	jmp	#LR__1131
0d614                 | LR__1132
0d614     20 4E 05 F1 | 	add	fp, #32
0d618     A7 22 02 FB | 	rdlong	local03, fp
0d61c     20 4E 85 F1 | 	sub	fp, #32
0d620     09 22 66 F0 | 	shl	local03, #9
0d624     0C 00 00 FF 
0d628     D8 E4 05 F1 | 	add	objptr, ##6360
0d62c     F2 22 02 F1 | 	add	local03, objptr
0d630     FE 23 06 F1 | 	add	local03, #510
0d634     11 01 58 FC | 	wrword	#0, local03
0d638                 | '     envbuf(channel,255)=0
0d638                 | '     return   
0d638     0C 00 00 FF 
0d63c     D8 E4 85 F1 | 	sub	objptr, ##6360
0d640     D8 07 90 FD | 	jmp	#LR__1141
0d644                 | LR__1133
0d644                 | ' 
0d644                 | ' if numpar=5 then    'simple adsr
0d644     10 4E 05 F1 | 	add	fp, #16
0d648     A7 22 02 FB | 	rdlong	local03, fp
0d64c     10 4E 85 F1 | 	sub	fp, #16
0d650     05 22 0E F2 | 	cmp	local03, #5 wz
0d654     98 07 90 5D |  if_ne	jmp	#LR__1140
0d658     FC E3 BF FD | 	call	#_pop
0d65c     FF 1E 02 F6 | 	mov	local01, result3
0d660     5C 4E 05 F1 | 	add	fp, #92
0d664     A7 FA 61 FC | 	wrlong	result1, fp
0d668     04 4E 05 F1 | 	add	fp, #4
0d66c     A7 FC 61 FC | 	wrlong	result2, fp
0d670     04 4E 05 F1 | 	add	fp, #4
0d674     A7 1E 62 FC | 	wrlong	local01, fp
0d678     08 4E 85 F1 | 	sub	fp, #8
0d67c     A7 12 02 F6 | 	mov	arg01, fp
0d680     5C 4E 85 F1 | 	sub	fp, #92
0d684     5C 85 B0 FD | 	call	#_converttofloat
0d688     FD 22 02 F6 | 	mov	local03, result1
0d68c     34 4E 05 F1 | 	add	fp, #52
0d690     A7 22 62 FC | 	wrlong	local03, fp
0d694     34 4E 85 F1 | 	sub	fp, #52
0d698     BC E3 BF FD | 	call	#_pop
0d69c     FF 1E 02 F6 | 	mov	local01, result3
0d6a0     5C 4E 05 F1 | 	add	fp, #92
0d6a4     A7 FA 61 FC | 	wrlong	result1, fp
0d6a8     04 4E 05 F1 | 	add	fp, #4
0d6ac     A7 FC 61 FC | 	wrlong	result2, fp
0d6b0     04 4E 05 F1 | 	add	fp, #4
0d6b4     A7 1E 62 FC | 	wrlong	local01, fp
0d6b8     08 4E 85 F1 | 	sub	fp, #8
0d6bc     A7 12 02 F6 | 	mov	arg01, fp
0d6c0     5C 4E 85 F1 | 	sub	fp, #92
0d6c4     1C 85 B0 FD | 	call	#_converttofloat
0d6c8     FD 22 02 F6 | 	mov	local03, result1
0d6cc     30 4E 05 F1 | 	add	fp, #48
0d6d0     A7 22 62 FC | 	wrlong	local03, fp
0d6d4     30 4E 85 F1 | 	sub	fp, #48
0d6d8     7C E3 BF FD | 	call	#_pop
0d6dc     FF 1E 02 F6 | 	mov	local01, result3
0d6e0     5C 4E 05 F1 | 	add	fp, #92
0d6e4     A7 FA 61 FC | 	wrlong	result1, fp
0d6e8     04 4E 05 F1 | 	add	fp, #4
0d6ec     A7 FC 61 FC | 	wrlong	result2, fp
0d6f0     04 4E 05 F1 | 	add	fp, #4
0d6f4     A7 1E 62 FC | 	wrlong	local01, fp
0d6f8     08 4E 85 F1 | 	sub	fp, #8
0d6fc     A7 12 02 F6 | 	mov	arg01, fp
0d700     5C 4E 85 F1 | 	sub	fp, #92
0d704     DC 84 B0 FD | 	call	#_converttofloat
0d708     FD 22 02 F6 | 	mov	local03, result1
0d70c     2C 4E 05 F1 | 	add	fp, #44
0d710     A7 22 62 FC | 	wrlong	local03, fp
0d714     2C 4E 85 F1 | 	sub	fp, #44
0d718     3C E3 BF FD | 	call	#_pop
0d71c     FF 1E 02 F6 | 	mov	local01, result3
0d720     5C 4E 05 F1 | 	add	fp, #92
0d724     A7 FA 61 FC | 	wrlong	result1, fp
0d728     04 4E 05 F1 | 	add	fp, #4
0d72c     A7 FC 61 FC | 	wrlong	result2, fp
0d730     04 4E 05 F1 | 	add	fp, #4
0d734     A7 1E 62 FC | 	wrlong	local01, fp
0d738     08 4E 85 F1 | 	sub	fp, #8
0d73c     A7 12 02 F6 | 	mov	arg01, fp
0d740     5C 4E 85 F1 | 	sub	fp, #92
0d744     9C 84 B0 FD | 	call	#_converttofloat
0d748     FD 22 02 F6 | 	mov	local03, result1
0d74c     28 4E 05 F1 | 	add	fp, #40
0d750     A7 22 62 FC | 	wrlong	local03, fp
0d754     28 4E 85 F1 | 	sub	fp, #40
0d758     FC E2 BF FD | 	call	#_pop
0d75c     FF 1E 02 F6 | 	mov	local01, result3
0d760     5C 4E 05 F1 | 	add	fp, #92
0d764     A7 FA 61 FC | 	wrlong	result1, fp
0d768     04 4E 05 F1 | 	add	fp, #4
0d76c     A7 FC 61 FC | 	wrlong	result2, fp
0d770     04 4E 05 F1 | 	add	fp, #4
0d774     A7 1E 62 FC | 	wrlong	local01, fp
0d778     08 4E 85 F1 | 	sub	fp, #8
0d77c     A7 12 02 F6 | 	mov	arg01, fp
0d780     5C 4E 85 F1 | 	sub	fp, #92
0d784     A0 83 B0 FD | 	call	#_converttoint
0d788     20 4E 05 F1 | 	add	fp, #32
0d78c     A7 FA 61 FC | 	wrlong	result1, fp
0d790                 | ' 
0d790                 | '   t1=pop() : rr=converttofloat(t1)
0d790                 | '   t1=pop() : ss=converttofloat(t1) 
0d790                 | '   t1=pop() : dd=converttofloat(t1)
0d790                 | '   t1=pop() : aa=converttofloat(t1)
0d790                 | '   t1=pop() : channel=converttoint(t1)
0d790                 | '   if ss<0.0 then ss=0.0 
0d790     10 4E 05 F1 | 	add	fp, #16
0d794     A7 12 02 FB | 	rdlong	arg01, fp
0d798     30 4E 85 F1 | 	sub	fp, #48
0d79c     00 14 06 F6 | 	mov	arg02, #0
0d7a0     01 16 06 F6 | 	mov	arg03, #1
0d7a4     5C 62 B1 FD | 	call	#__system___float_cmp
0d7a8     00 FA 55 F2 | 	cmps	result1, #0 wc
0d7ac     30 4E 05 C1 |  if_b	add	fp, #48
0d7b0     A7 00 68 CC |  if_b	wrlong	#0, fp
0d7b4     30 4E 85 C1 |  if_b	sub	fp, #48
0d7b8                 | '   if ss>1.0 then ss=1.0
0d7b8     30 4E 05 F1 | 	add	fp, #48
0d7bc     A7 12 02 FB | 	rdlong	arg01, fp
0d7c0     30 4E 85 F1 | 	sub	fp, #48
0d7c4     00 C0 1F FF 
0d7c8     00 14 06 F6 | 	mov	arg02, ##1065353216
0d7cc     01 16 66 F6 | 	neg	arg03, #1
0d7d0     30 62 B1 FD | 	call	#__system___float_cmp
0d7d4     01 FA 55 F2 | 	cmps	result1, #1 wc
0d7d8     30 4E 05 31 |  if_ae	add	fp, #48
0d7dc     00 C0 9F 3F 
0d7e0     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0d7e4     30 4E 85 31 |  if_ae	sub	fp, #48
0d7e8     28 4E 05 F1 | 	add	fp, #40
0d7ec     A7 12 02 FB | 	rdlong	arg01, fp
0d7f0     04 4E 05 F1 | 	add	fp, #4
0d7f4     A7 14 02 FB | 	rdlong	arg02, fp
0d7f8     2C 4E 85 F1 | 	sub	fp, #44
0d7fc     00 5A B1 FD | 	call	#__system___float_add
0d800     FD 12 02 F6 | 	mov	arg01, result1
0d804     34 4E 05 F1 | 	add	fp, #52
0d808     A7 14 02 FB | 	rdlong	arg02, fp
0d80c     34 4E 85 F1 | 	sub	fp, #52
0d810     EC 59 B1 FD | 	call	#__system___float_add
0d814     4C 4E 05 F1 | 	add	fp, #76
0d818     A7 FA 61 FC | 	wrlong	result1, fp
0d81c     FD 14 02 F6 | 	mov	arg02, result1
0d820     4C 4E 85 F1 | 	sub	fp, #76
0d824     00 C0 21 FF 
0d828     00 12 06 F6 | 	mov	arg01, ##1132462080
0d82c     A4 5F B1 FD | 	call	#__system___float_div
0d830     50 4E 05 F1 | 	add	fp, #80
0d834     A7 FA 61 FC | 	wrlong	result1, fp
0d838     28 4E 85 F1 | 	sub	fp, #40
0d83c     A7 12 02 FB | 	rdlong	arg01, fp
0d840     FD 14 02 F6 | 	mov	arg02, result1
0d844     28 4E 85 F1 | 	sub	fp, #40
0d848     84 5D B1 FD | 	call	#__system___float_mul
0d84c     FD 12 02 F6 | 	mov	arg01, result1
0d850     01 14 06 F6 | 	mov	arg02, #1
0d854     40 62 B1 FD | 	call	#__system___float_tointeger
0d858     A7 FA 61 FC | 	wrlong	result1, fp
0d85c     2C 4E 05 F1 | 	add	fp, #44
0d860     A7 12 02 FB | 	rdlong	arg01, fp
0d864     24 4E 05 F1 | 	add	fp, #36
0d868     A7 14 02 FB | 	rdlong	arg02, fp
0d86c     50 4E 85 F1 | 	sub	fp, #80
0d870     5C 5D B1 FD | 	call	#__system___float_mul
0d874     FD 12 02 F6 | 	mov	arg01, result1
0d878     01 14 06 F6 | 	mov	arg02, #1
0d87c     18 62 B1 FD | 	call	#__system___float_tointeger
0d880     04 4E 05 F1 | 	add	fp, #4
0d884     A7 FA 61 FC | 	wrlong	result1, fp
0d888     30 4E 05 F1 | 	add	fp, #48
0d88c     A7 12 02 FB | 	rdlong	arg01, fp
0d890     1C 4E 05 F1 | 	add	fp, #28
0d894     A7 14 02 FB | 	rdlong	arg02, fp
0d898     50 4E 85 F1 | 	sub	fp, #80
0d89c     30 5D B1 FD | 	call	#__system___float_mul
0d8a0     FD 12 02 F6 | 	mov	arg01, result1
0d8a4     01 14 06 F6 | 	mov	arg02, #1
0d8a8     EC 61 B1 FD | 	call	#__system___float_tointeger
0d8ac     FD 22 02 F6 | 	mov	local03, result1
0d8b0     0C 4E 05 F1 | 	add	fp, #12
0d8b4     A7 22 62 FC | 	wrlong	local03, fp
0d8b8     0C 4E 85 F1 | 	sub	fp, #12
0d8bc                 | '   fulltime=aa+dd+rr
0d8bc                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit) :print a,d,r,a+d+r
0d8bc     00 12 06 F6 | 	mov	arg01, #0
0d8c0     98 8B B1 FD | 	call	#__system___getiolock_0540
0d8c4     FD 12 02 F6 | 	mov	arg01, result1
0d8c8     50 31 B1 FD | 	call	#__system___lockmem
0d8cc     A7 14 02 FB | 	rdlong	arg02, fp
0d8d0     00 12 06 F6 | 	mov	arg01, #0
0d8d4     00 16 06 F6 | 	mov	arg03, #0
0d8d8     0A 18 06 F6 | 	mov	arg04, #10
0d8dc     74 3E B1 FD | 	call	#__system___basic_print_integer
0d8e0     00 12 06 F6 | 	mov	arg01, #0
0d8e4     09 14 06 F6 | 	mov	arg02, #9
0d8e8     00 16 06 F6 | 	mov	arg03, #0
0d8ec     C8 3D B1 FD | 	call	#__system___basic_print_char
0d8f0     04 4E 05 F1 | 	add	fp, #4
0d8f4     A7 14 02 FB | 	rdlong	arg02, fp
0d8f8     04 4E 85 F1 | 	sub	fp, #4
0d8fc     00 12 06 F6 | 	mov	arg01, #0
0d900     00 16 06 F6 | 	mov	arg03, #0
0d904     0A 18 06 F6 | 	mov	arg04, #10
0d908     48 3E B1 FD | 	call	#__system___basic_print_integer
0d90c     00 12 06 F6 | 	mov	arg01, #0
0d910     09 14 06 F6 | 	mov	arg02, #9
0d914     00 16 06 F6 | 	mov	arg03, #0
0d918     9C 3D B1 FD | 	call	#__system___basic_print_char
0d91c     0C 4E 05 F1 | 	add	fp, #12
0d920     A7 14 02 FB | 	rdlong	arg02, fp
0d924     0C 4E 85 F1 | 	sub	fp, #12
0d928     00 12 06 F6 | 	mov	arg01, #0
0d92c     00 16 06 F6 | 	mov	arg03, #0
0d930     0A 18 06 F6 | 	mov	arg04, #10
0d934     1C 3E B1 FD | 	call	#__system___basic_print_integer
0d938     00 12 06 F6 | 	mov	arg01, #0
0d93c     09 14 06 F6 | 	mov	arg02, #9
0d940     00 16 06 F6 | 	mov	arg03, #0
0d944     70 3D B1 FD | 	call	#__system___basic_print_char
0d948     A7 14 02 FB | 	rdlong	arg02, fp
0d94c     04 4E 05 F1 | 	add	fp, #4
0d950     A7 22 02 FB | 	rdlong	local03, fp
0d954     11 15 02 F1 | 	add	arg02, local03
0d958     08 4E 05 F1 | 	add	fp, #8
0d95c     A7 22 02 FB | 	rdlong	local03, fp
0d960     0C 4E 85 F1 | 	sub	fp, #12
0d964     11 15 02 F1 | 	add	arg02, local03
0d968     00 12 06 F6 | 	mov	arg01, #0
0d96c     00 16 06 F6 | 	mov	arg03, #0
0d970     0A 18 06 F6 | 	mov	arg04, #10
0d974     DC 3D B1 FD | 	call	#__system___basic_print_integer
0d978     00 12 06 F6 | 	mov	arg01, #0
0d97c     0A 14 06 F6 | 	mov	arg02, #10
0d980     00 16 06 F6 | 	mov	arg03, #0
0d984     30 3D B1 FD | 	call	#__system___basic_print_char
0d988     00 12 06 F6 | 	mov	arg01, #0
0d98c     CC 8A B1 FD | 	call	#__system___getiolock_0540
0d990     FD 00 68 FC | 	wrlong	#0, result1
0d994     F8 BF 23 FF 
0d998     00 22 06 F6 | 	mov	local03, ##1199566848
0d99c     A7 12 02 FB | 	rdlong	arg01, fp
0d9a0     09 13 52 F6 | 	abs	arg01, arg01 wc
0d9a4     1F 24 C6 C9 |  if_b	decod	local04, #31
0d9a8     00 24 06 36 |  if_ae	mov	local04, #0
0d9ac     1C 58 B1 FD | 	call	#__system___float_fromuns
0d9b0     12 FB 61 F5 | 	xor	result1, local04
0d9b4     FD 14 02 F6 | 	mov	arg02, result1
0d9b8     11 13 02 F6 | 	mov	arg01, local03
0d9bc     14 5E B1 FD | 	call	#__system___float_div
0d9c0     54 4E 05 F1 | 	add	fp, #84
0d9c4     A7 FA 61 FC | 	wrlong	result1, fp
0d9c8     F8 BF 23 FF 
0d9cc     00 22 06 F6 | 	mov	local03, ##1199566848
0d9d0     24 4E 85 F1 | 	sub	fp, #36
0d9d4     A7 14 02 FB | 	rdlong	arg02, fp
0d9d8     30 4E 85 F1 | 	sub	fp, #48
0d9dc     F8 BF 23 FF 
0d9e0     00 12 06 F6 | 	mov	arg01, ##1199566848
0d9e4     E8 5B B1 FD | 	call	#__system___float_mul
0d9e8     FD 14 02 F6 | 	mov	arg02, result1
0d9ec     11 13 02 F6 | 	mov	arg01, local03
0d9f0     1F 14 E6 F4 | 	bitnot	arg02, #31
0d9f4     08 58 B1 FD | 	call	#__system___float_add
0d9f8     FD 22 02 F6 | 	mov	local03, result1
0d9fc     04 4E 05 F1 | 	add	fp, #4
0da00     A7 12 02 FB | 	rdlong	arg01, fp
0da04     04 4E 85 F1 | 	sub	fp, #4
0da08     09 13 52 F6 | 	abs	arg01, arg01 wc
0da0c     1F 24 C6 C9 |  if_b	decod	local04, #31
0da10     00 24 06 36 |  if_ae	mov	local04, #0
0da14     B4 57 B1 FD | 	call	#__system___float_fromuns
0da18     12 FB 61 F5 | 	xor	result1, local04
0da1c     FD 14 02 F6 | 	mov	arg02, result1
0da20     11 13 02 F6 | 	mov	arg01, local03
0da24     AC 5D B1 FD | 	call	#__system___float_div
0da28     2C 4E 05 F1 | 	add	fp, #44
0da2c     A7 FA 61 FC | 	wrlong	result1, fp
0da30     04 4E 05 F1 | 	add	fp, #4
0da34     A7 14 02 FB | 	rdlong	arg02, fp
0da38     30 4E 85 F1 | 	sub	fp, #48
0da3c     F8 BF 23 FF 
0da40     00 12 06 F6 | 	mov	arg01, ##1199566848
0da44     88 5B B1 FD | 	call	#__system___float_mul
0da48     FD 22 02 F6 | 	mov	local03, result1
0da4c     0C 4E 05 F1 | 	add	fp, #12
0da50     A7 12 02 FB | 	rdlong	arg01, fp
0da54     0C 4E 85 F1 | 	sub	fp, #12
0da58     09 13 52 F6 | 	abs	arg01, arg01 wc
0da5c     1F 24 C6 C9 |  if_b	decod	local04, #31
0da60     00 24 06 36 |  if_ae	mov	local04, #0
0da64     64 57 B1 FD | 	call	#__system___float_fromuns
0da68     12 FB 61 F5 | 	xor	result1, local04
0da6c     FD 14 02 F6 | 	mov	arg02, result1
0da70     11 13 02 F6 | 	mov	arg01, local03
0da74     5C 5D B1 FD | 	call	#__system___float_div
0da78     FD 22 02 F6 | 	mov	local03, result1
0da7c     58 4E 05 F1 | 	add	fp, #88
0da80     A7 22 62 FC | 	wrlong	local03, fp
0da84     58 4E 85 F1 | 	sub	fp, #88
0da88                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r : print da,dd,dr
0da88     00 12 06 F6 | 	mov	arg01, #0
0da8c     CC 89 B1 FD | 	call	#__system___getiolock_0540
0da90     FD 12 02 F6 | 	mov	arg01, result1
0da94     84 2F B1 FD | 	call	#__system___lockmem
0da98     54 4E 05 F1 | 	add	fp, #84
0da9c     A7 14 02 FB | 	rdlong	arg02, fp
0daa0     54 4E 85 F1 | 	sub	fp, #84
0daa4     00 12 06 F6 | 	mov	arg01, #0
0daa8     00 16 06 F6 | 	mov	arg03, #0
0daac     23 18 06 F6 | 	mov	arg04, #35
0dab0     34 61 B1 FD | 	call	#__system___basic_print_float
0dab4     00 12 06 F6 | 	mov	arg01, #0
0dab8     09 14 06 F6 | 	mov	arg02, #9
0dabc     00 16 06 F6 | 	mov	arg03, #0
0dac0     F4 3B B1 FD | 	call	#__system___basic_print_char
0dac4     2C 4E 05 F1 | 	add	fp, #44
0dac8     A7 14 02 FB | 	rdlong	arg02, fp
0dacc     2C 4E 85 F1 | 	sub	fp, #44
0dad0     00 12 06 F6 | 	mov	arg01, #0
0dad4     00 16 06 F6 | 	mov	arg03, #0
0dad8     23 18 06 F6 | 	mov	arg04, #35
0dadc     08 61 B1 FD | 	call	#__system___basic_print_float
0dae0     00 12 06 F6 | 	mov	arg01, #0
0dae4     09 14 06 F6 | 	mov	arg02, #9
0dae8     00 16 06 F6 | 	mov	arg03, #0
0daec     C8 3B B1 FD | 	call	#__system___basic_print_char
0daf0     58 4E 05 F1 | 	add	fp, #88
0daf4     A7 14 02 FB | 	rdlong	arg02, fp
0daf8     58 4E 85 F1 | 	sub	fp, #88
0dafc     00 12 06 F6 | 	mov	arg01, #0
0db00     00 16 06 F6 | 	mov	arg03, #0
0db04     23 18 06 F6 | 	mov	arg04, #35
0db08     DC 60 B1 FD | 	call	#__system___basic_print_float
0db0c     00 12 06 F6 | 	mov	arg01, #0
0db10     0A 14 06 F6 | 	mov	arg02, #10
0db14     00 16 06 F6 | 	mov	arg03, #0
0db18     9C 3B B1 FD | 	call	#__system___basic_print_char
0db1c     00 12 06 F6 | 	mov	arg01, #0
0db20     38 89 B1 FD | 	call	#__system___getiolock_0540
0db24     FD 00 68 FC | 	wrlong	#0, result1
0db28     20 4E 05 F1 | 	add	fp, #32
0db2c     A7 26 02 FB | 	rdlong	local05, fp
0db30     20 4E 85 F1 | 	sub	fp, #32
0db34     01 26 66 F0 | 	shl	local05, #1
0db38     51 00 00 FF 
0db3c     C4 E5 05 F1 | 	add	objptr, ##41924
0db40     F2 26 02 F1 | 	add	local05, objptr
0db44     A7 28 02 FB | 	rdlong	local06, fp
0db48     04 4E 05 F1 | 	add	fp, #4
0db4c     A7 22 02 FB | 	rdlong	local03, fp
0db50     11 29 02 F1 | 	add	local06, local03
0db54     13 29 52 FC | 	wrword	local06, local05
0db58     24 4E 05 F1 | 	add	fp, #36
0db5c     A7 00 68 FC | 	wrlong	#0, fp
0db60                 | '   suspoints(channel)=a+d
0db60                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0db60     14 4E 85 F1 | 	sub	fp, #20
0db64     A7 00 68 FC | 	wrlong	#0, fp
0db68     14 4E 85 F1 | 	sub	fp, #20
0db6c     A7 2A 02 FB | 	rdlong	local07, fp
0db70     51 00 00 FF 
0db74     C4 E5 85 F1 | 	sub	objptr, ##41924
0db78                 | LR__1134
0db78     14 4E 05 F1 | 	add	fp, #20
0db7c     A7 22 02 FB | 	rdlong	local03, fp
0db80     14 4E 85 F1 | 	sub	fp, #20
0db84     15 23 52 F2 | 	cmps	local03, local07 wc
0db88     80 00 90 3D |  if_ae	jmp	#LR__1135
0db8c     20 4E 05 F1 | 	add	fp, #32
0db90     A7 28 02 FB | 	rdlong	local06, fp
0db94     09 28 66 F0 | 	shl	local06, #9
0db98     0C 00 00 FF 
0db9c     D8 E4 05 F1 | 	add	objptr, ##6360
0dba0     F2 28 02 F1 | 	add	local06, objptr
0dba4     0C 4E 85 F1 | 	sub	fp, #12
0dba8     A7 26 02 FB | 	rdlong	local05, fp
0dbac     01 26 66 F0 | 	shl	local05, #1
0dbb0     14 27 02 F1 | 	add	local05, local06
0dbb4     14 4E 05 F1 | 	add	fp, #20
0dbb8     A7 12 02 FB | 	rdlong	arg01, fp
0dbbc     28 4E 85 F1 | 	sub	fp, #40
0dbc0     0C 00 00 FF 
0dbc4     D8 E4 85 F1 | 	sub	objptr, ##6360
0dbc8     01 14 06 F6 | 	mov	arg02, #1
0dbcc     C8 5E B1 FD | 	call	#__system___float_tointeger
0dbd0     13 FB 51 FC | 	wrword	result1, local05
0dbd4     28 4E 05 F1 | 	add	fp, #40
0dbd8     A7 12 02 FB | 	rdlong	arg01, fp
0dbdc     2C 4E 05 F1 | 	add	fp, #44
0dbe0     A7 14 02 FB | 	rdlong	arg02, fp
0dbe4     54 4E 85 F1 | 	sub	fp, #84
0dbe8     14 56 B1 FD | 	call	#__system___float_add
0dbec     28 4E 05 F1 | 	add	fp, #40
0dbf0     A7 FA 61 FC | 	wrlong	result1, fp
0dbf4     14 4E 85 F1 | 	sub	fp, #20
0dbf8     A7 20 02 FB | 	rdlong	local02, fp
0dbfc     01 20 06 F1 | 	add	local02, #1
0dc00     A7 20 62 FC | 	wrlong	local02, fp
0dc04     14 4E 85 F1 | 	sub	fp, #20
0dc08     6C FF 9F FD | 	jmp	#LR__1134
0dc0c                 | LR__1135
0dc0c                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0dc0c     A7 22 02 FB | 	rdlong	local03, fp
0dc10     14 4E 05 F1 | 	add	fp, #20
0dc14     A7 22 62 FC | 	wrlong	local03, fp
0dc18     14 4E 85 F1 | 	sub	fp, #20
0dc1c     A7 2C 02 FB | 	rdlong	local08, fp
0dc20     04 4E 05 F1 | 	add	fp, #4
0dc24     A7 22 02 FB | 	rdlong	local03, fp
0dc28     04 4E 85 F1 | 	sub	fp, #4
0dc2c     11 2D 02 F1 | 	add	local08, local03
0dc30                 | LR__1136
0dc30     14 4E 05 F1 | 	add	fp, #20
0dc34     A7 22 02 FB | 	rdlong	local03, fp
0dc38     14 4E 85 F1 | 	sub	fp, #20
0dc3c     16 23 52 F2 | 	cmps	local03, local08 wc
0dc40     A8 00 90 3D |  if_ae	jmp	#LR__1137
0dc44     20 4E 05 F1 | 	add	fp, #32
0dc48     A7 2A 02 FB | 	rdlong	local07, fp
0dc4c     09 2A 66 F0 | 	shl	local07, #9
0dc50     0C 00 00 FF 
0dc54     D8 E4 05 F1 | 	add	objptr, ##6360
0dc58     F2 2A 02 F1 | 	add	local07, objptr
0dc5c     0C 4E 85 F1 | 	sub	fp, #12
0dc60     A7 28 02 FB | 	rdlong	local06, fp
0dc64     01 28 66 F0 | 	shl	local06, #1
0dc68     15 29 02 F1 | 	add	local06, local07
0dc6c     14 4E 05 F1 | 	add	fp, #20
0dc70     A7 12 02 FB | 	rdlong	arg01, fp
0dc74     28 4E 85 F1 | 	sub	fp, #40
0dc78     0C 00 00 FF 
0dc7c     D8 E4 85 F1 | 	sub	objptr, ##6360
0dc80     01 14 06 F6 | 	mov	arg02, #1
0dc84     10 5E B1 FD | 	call	#__system___float_tointeger
0dc88     14 FB 51 FC | 	wrword	result1, local06
0dc8c     28 4E 05 F1 | 	add	fp, #40
0dc90     A7 12 02 FB | 	rdlong	arg01, fp
0dc94     04 4E 05 F1 | 	add	fp, #4
0dc98     A7 14 02 FB | 	rdlong	arg02, fp
0dc9c     2C 4E 85 F1 | 	sub	fp, #44
0dca0     1F 14 E6 F4 | 	bitnot	arg02, #31
0dca4     58 55 B1 FD | 	call	#__system___float_add
0dca8     28 4E 05 F1 | 	add	fp, #40
0dcac     A7 FA 61 FC | 	wrlong	result1, fp
0dcb0     28 4E 85 F1 | 	sub	fp, #40
0dcb4     FD 12 02 F6 | 	mov	arg01, result1
0dcb8     00 14 06 F6 | 	mov	arg02, #0
0dcbc     01 16 06 F6 | 	mov	arg03, #1
0dcc0     40 5D B1 FD | 	call	#__system___float_cmp
0dcc4     00 FA 55 F2 | 	cmps	result1, #0 wc
0dcc8     28 4E 05 C1 |  if_b	add	fp, #40
0dccc     A7 00 68 CC |  if_b	wrlong	#0, fp
0dcd0     28 4E 85 C1 |  if_b	sub	fp, #40
0dcd4     14 4E 05 F1 | 	add	fp, #20
0dcd8     A7 20 02 FB | 	rdlong	local02, fp
0dcdc     01 20 06 F1 | 	add	local02, #1
0dce0     A7 20 62 FC | 	wrlong	local02, fp
0dce4     14 4E 85 F1 | 	sub	fp, #20
0dce8     44 FF 9F FD | 	jmp	#LR__1136
0dcec                 | LR__1137
0dcec                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0dcec     A7 22 02 FB | 	rdlong	local03, fp
0dcf0     04 4E 05 F1 | 	add	fp, #4
0dcf4     A7 2C 02 FB | 	rdlong	local08, fp
0dcf8     16 23 02 F1 | 	add	local03, local08
0dcfc     10 4E 05 F1 | 	add	fp, #16
0dd00     A7 22 62 FC | 	wrlong	local03, fp
0dd04     14 4E 85 F1 | 	sub	fp, #20
0dd08                 | LR__1138
0dd08     14 4E 05 F1 | 	add	fp, #20
0dd0c     A7 26 02 FB | 	rdlong	local05, fp
0dd10     14 4E 85 F1 | 	sub	fp, #20
0dd14     00 27 56 F2 | 	cmps	local05, #256 wc
0dd18     A8 00 90 3D |  if_ae	jmp	#LR__1139
0dd1c     20 4E 05 F1 | 	add	fp, #32
0dd20     A7 2C 02 FB | 	rdlong	local08, fp
0dd24     09 2C 66 F0 | 	shl	local08, #9
0dd28     0C 00 00 FF 
0dd2c     D8 E4 05 F1 | 	add	objptr, ##6360
0dd30     F2 2C 02 F1 | 	add	local08, objptr
0dd34     0C 4E 85 F1 | 	sub	fp, #12
0dd38     A7 2A 02 FB | 	rdlong	local07, fp
0dd3c     01 2A 66 F0 | 	shl	local07, #1
0dd40     16 2B 02 F1 | 	add	local07, local08
0dd44     14 4E 05 F1 | 	add	fp, #20
0dd48     A7 12 02 FB | 	rdlong	arg01, fp
0dd4c     28 4E 85 F1 | 	sub	fp, #40
0dd50     0C 00 00 FF 
0dd54     D8 E4 85 F1 | 	sub	objptr, ##6360
0dd58     01 14 06 F6 | 	mov	arg02, #1
0dd5c     38 5D B1 FD | 	call	#__system___float_tointeger
0dd60     15 FB 51 FC | 	wrword	result1, local07
0dd64     28 4E 05 F1 | 	add	fp, #40
0dd68     A7 12 02 FB | 	rdlong	arg01, fp
0dd6c     30 4E 05 F1 | 	add	fp, #48
0dd70     A7 14 02 FB | 	rdlong	arg02, fp
0dd74     58 4E 85 F1 | 	sub	fp, #88
0dd78     1F 14 E6 F4 | 	bitnot	arg02, #31
0dd7c     80 54 B1 FD | 	call	#__system___float_add
0dd80     28 4E 05 F1 | 	add	fp, #40
0dd84     A7 FA 61 FC | 	wrlong	result1, fp
0dd88     28 4E 85 F1 | 	sub	fp, #40
0dd8c     FD 12 02 F6 | 	mov	arg01, result1
0dd90     00 14 06 F6 | 	mov	arg02, #0
0dd94     01 16 06 F6 | 	mov	arg03, #1
0dd98     68 5C B1 FD | 	call	#__system___float_cmp
0dd9c     00 FA 55 F2 | 	cmps	result1, #0 wc
0dda0     28 4E 05 C1 |  if_b	add	fp, #40
0dda4     A7 00 68 CC |  if_b	wrlong	#0, fp
0dda8     28 4E 85 C1 |  if_b	sub	fp, #40
0ddac     14 4E 05 F1 | 	add	fp, #20
0ddb0     A7 2C 02 FB | 	rdlong	local08, fp
0ddb4     01 2C 06 F1 | 	add	local08, #1
0ddb8     A7 2C 62 FC | 	wrlong	local08, fp
0ddbc     14 4E 85 F1 | 	sub	fp, #20
0ddc0     44 FF 9F FD | 	jmp	#LR__1138
0ddc4                 | LR__1139
0ddc4     20 4E 05 F1 | 	add	fp, #32
0ddc8     A7 26 02 FB | 	rdlong	local05, fp
0ddcc     20 4E 85 F1 | 	sub	fp, #32
0ddd0     09 26 66 F0 | 	shl	local05, #9
0ddd4     0C 00 00 FF 
0ddd8     D8 E4 05 F1 | 	add	objptr, ##6360
0dddc     F2 26 02 F1 | 	add	local05, objptr
0dde0     FE 27 06 F1 | 	add	local05, #510
0dde4     13 01 58 FC | 	wrword	#0, local05
0dde8     0C 00 00 FF 
0ddec     D8 E4 85 F1 | 	sub	objptr, ##6360
0ddf0                 | LR__1140
0ddf0     20 4E 05 F1 | 	add	fp, #32
0ddf4     A7 26 02 FB | 	rdlong	local05, fp
0ddf8     20 4E 85 F1 | 	sub	fp, #32
0ddfc     09 26 66 F0 | 	shl	local05, #9
0de00     0C 00 00 FF 
0de04     D8 E4 05 F1 | 	add	objptr, ##6360
0de08     F2 26 02 F1 | 	add	local05, objptr
0de0c     FE 27 06 F1 | 	add	local05, #510
0de10     13 01 58 FC | 	wrword	#0, local05
0de14     0C 00 00 FF 
0de18     D8 E4 85 F1 | 	sub	objptr, ##6360
0de1c                 | LR__1141
0de1c     A7 F0 03 F6 | 	mov	ptra, fp
0de20     B2 00 A0 FD | 	call	#popregs_
0de24                 | _do_defenv_ret
0de24     2D 00 64 FD | 	ret
0de28                 | 
0de28                 | ' 
0de28                 | ' 
0de28                 | ' sub do_play
0de28                 | _do_play
0de28     06 4A 05 F6 | 	mov	COUNT_, #6
0de2c     A8 00 A0 FD | 	call	#pushregs_
0de30     7C F0 07 F1 | 	add	ptra, #124
0de34     68 4E 05 F1 | 	add	fp, #104
0de38     AB CB A1 FF 
0de3c     A7 D6 6B FC | 	wrlong	##1133991915, fp
0de40                 | ' speed_coeff=815.6614449376854599406528189911*(95.0/256.0)
0de40                 | ' 
0de40                 | ' for i=0 to 8 : params(i)=-2.0 : next i
0de40     64 4E 85 F1 | 	sub	fp, #100
0de44     A7 00 68 FC | 	wrlong	#0, fp
0de48     97 18 48 FB | 	callpa	#(@LR__1151-@LR__1150)>>2,fcache_load_ptr_
0de4c                 | LR__1150
0de4c     A7 16 02 FB | 	rdlong	arg03, fp
0de50     02 16 66 F0 | 	shl	arg03, #2
0de54     34 4E 05 F1 | 	add	fp, #52
0de58     A7 16 02 F1 | 	add	arg03, fp
0de5c     00 00 E0 FF 
0de60     0B 01 68 FC | 	wrlong	##-1073741824, arg03
0de64     34 4E 85 F1 | 	sub	fp, #52
0de68     A7 1E 02 FB | 	rdlong	local01, fp
0de6c     01 1E 06 F1 | 	add	local01, #1
0de70     A7 1E 62 FC | 	wrlong	local01, fp
0de74     09 1E 56 F2 | 	cmps	local01, #9 wc
0de78     D0 FF 9F CD |  if_b	jmp	#LR__1150
0de7c                 | LR__1151
0de7c     04 4E 85 F1 | 	sub	fp, #4
0de80     4A 00 00 FF 
0de84     80 E4 05 F1 | 	add	objptr, ##38016
0de88     F2 20 02 FB | 	rdlong	local02, objptr
0de8c     10 23 02 F6 | 	mov	local03, local02
0de90     01 22 66 F0 | 	shl	local03, #1
0de94     10 23 02 F1 | 	add	local03, local02
0de98     02 22 66 F0 | 	shl	local03, #2
0de9c     03 00 00 FF 
0dea0     04 E4 85 F1 | 	sub	objptr, ##1540
0dea4     F2 22 02 F1 | 	add	local03, objptr
0dea8     11 25 02 FB | 	rdlong	local04, local03
0deac     A7 24 62 FC | 	wrlong	local04, fp
0deb0                 | ' 'params(0)=0: params(1)=440.0 : params(2)=16.0 : params(3)=0.0 : params(4)=0.0 : params(5)=1.0 : params(6)=0.0 : params(7)=0.0 : 
0deb0                 | ' 'chn		freq		   vol		   wave#	   env#		   len		   delay	   pan		: sus 
0deb0                 | ' numpar=compiledline(lineptr_e).result.uresult
0deb0                 | ' for i=numpar to 1 step -1 
0deb0     04 4E 05 F1 | 	add	fp, #4
0deb4     A7 24 62 FC | 	wrlong	local04, fp
0deb8     04 4E 85 F1 | 	sub	fp, #4
0debc     47 00 00 FF 
0dec0     7C E4 85 F1 | 	sub	objptr, ##36476
0dec4                 | LR__1152
0dec4     90 DB BF FD | 	call	#_pop
0dec8     5C 4E 05 F1 | 	add	fp, #92
0decc     A7 FA 61 FC | 	wrlong	result1, fp
0ded0     04 4E 05 F1 | 	add	fp, #4
0ded4     A7 FC 61 FC | 	wrlong	result2, fp
0ded8     04 4E 05 F1 | 	add	fp, #4
0dedc     A7 FE 61 FC | 	wrlong	result3, fp
0dee0     60 4E 85 F1 | 	sub	fp, #96
0dee4     A7 22 02 FB | 	rdlong	local03, fp
0dee8     01 22 86 F1 | 	sub	local03, #1
0deec     02 22 66 F0 | 	shl	local03, #2
0def0     34 4E 05 F1 | 	add	fp, #52
0def4     A7 22 02 F1 | 	add	local03, fp
0def8     24 4E 05 F1 | 	add	fp, #36
0defc     A7 26 02 F6 | 	mov	local05, fp
0df00     13 13 02 F6 | 	mov	arg01, local05
0df04     5C 4E 85 F1 | 	sub	fp, #92
0df08     D8 7C B0 FD | 	call	#_converttofloat
0df0c     11 FB 61 FC | 	wrlong	result1, local03
0df10     04 4E 05 F1 | 	add	fp, #4
0df14     A7 1E 02 FB | 	rdlong	local01, fp
0df18     01 1E 86 F1 | 	sub	local01, #1
0df1c     A7 1E 62 FC | 	wrlong	local01, fp
0df20     04 4E 85 F1 | 	sub	fp, #4
0df24     01 1E 56 F2 | 	cmps	local01, #1 wc
0df28     98 FF 9F 3D |  if_ae	jmp	#LR__1152
0df2c                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
0df2c     38 4E 05 F1 | 	add	fp, #56
0df30     A7 12 02 FB | 	rdlong	arg01, fp
0df34     38 4E 85 F1 | 	sub	fp, #56
0df38     00 14 06 F6 | 	mov	arg02, #0
0df3c     01 16 06 F6 | 	mov	arg03, #1
0df40     C0 5A B1 FD | 	call	#__system___float_cmp
0df44     00 FA 55 F2 | 	cmps	result1, #0 wc
0df48     0C 4E 05 C1 |  if_b	add	fp, #12
0df4c     A7 00 68 CC |  if_b	wrlong	#0, fp
0df50     0C 4E 85 C1 |  if_b	sub	fp, #12
0df54     2C 00 90 CD |  if_b	jmp	#LR__1153
0df58     38 4E 05 F1 | 	add	fp, #56
0df5c     A7 12 02 FB | 	rdlong	arg01, fp
0df60     38 4E 85 F1 | 	sub	fp, #56
0df64     01 14 06 F6 | 	mov	arg02, #1
0df68     2C 5B B1 FD | 	call	#__system___float_tointeger
0df6c     FD 1E 52 F6 | 	abs	local01, result1 wc
0df70     07 1E 06 F5 | 	and	local01, #7
0df74     0F 1F 82 F6 | 	negc	local01, local01
0df78     0C 4E 05 F1 | 	add	fp, #12
0df7c     A7 1E 62 FC | 	wrlong	local01, fp
0df80     0C 4E 85 F1 | 	sub	fp, #12
0df84                 | LR__1153
0df84                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
0df84     3C 4E 05 F1 | 	add	fp, #60
0df88     A7 12 02 FB | 	rdlong	arg01, fp
0df8c     3C 4E 85 F1 | 	sub	fp, #60
0df90     00 14 06 F6 | 	mov	arg02, #0
0df94     01 16 06 F6 | 	mov	arg03, #1
0df98     68 5A B1 FD | 	call	#__system___float_cmp
0df9c     00 FA 55 F2 | 	cmps	result1, #0 wc
0dfa0     40 00 90 3D |  if_ae	jmp	#LR__1154
0dfa4     0C 4E 05 F1 | 	add	fp, #12
0dfa8     A7 20 02 FB | 	rdlong	local02, fp
0dfac     10 23 02 F6 | 	mov	local03, local02
0dfb0     01 22 66 F0 | 	shl	local03, #1
0dfb4     10 23 02 F1 | 	add	local03, local02
0dfb8     03 22 66 F0 | 	shl	local03, #3
0dfbc     14 00 00 FF 
0dfc0     38 E5 05 F1 | 	add	objptr, ##10552
0dfc4     F2 22 02 F1 | 	add	local03, objptr
0dfc8     11 23 02 FB | 	rdlong	local03, local03
0dfcc     60 4E 05 F1 | 	add	fp, #96
0dfd0     A7 22 62 FC | 	wrlong	local03, fp
0dfd4     6C 4E 85 F1 | 	sub	fp, #108
0dfd8     14 00 00 FF 
0dfdc     38 E5 85 F1 | 	sub	objptr, ##10552
0dfe0     44 00 90 FD | 	jmp	#LR__1155
0dfe4                 | LR__1154
0dfe4     3C 4E 05 F1 | 	add	fp, #60
0dfe8     A7 24 02 FB | 	rdlong	local04, fp
0dfec     30 4E 05 F1 | 	add	fp, #48
0dff0     A7 24 62 FC | 	wrlong	local04, fp
0dff4     60 4E 85 F1 | 	sub	fp, #96
0dff8     A7 20 02 FB | 	rdlong	local02, fp
0dffc     10 23 02 F6 | 	mov	local03, local02
0e000     01 22 66 F0 | 	shl	local03, #1
0e004     10 23 02 F1 | 	add	local03, local02
0e008     03 22 66 F0 | 	shl	local03, #3
0e00c     14 00 00 FF 
0e010     38 E5 05 F1 | 	add	objptr, ##10552
0e014     F2 22 02 F1 | 	add	local03, objptr
0e018     0C 4E 85 F1 | 	sub	fp, #12
0e01c     11 25 62 FC | 	wrlong	local04, local03
0e020     14 00 00 FF 
0e024     38 E5 85 F1 | 	sub	objptr, ##10552
0e028                 | LR__1155
0e028                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
0e028     44 4E 05 F1 | 	add	fp, #68
0e02c     A7 12 02 FB | 	rdlong	arg01, fp
0e030     44 4E 85 F1 | 	sub	fp, #68
0e034     00 14 06 F6 | 	mov	arg02, #0
0e038     01 16 06 F6 | 	mov	arg03, #1
0e03c     C4 59 B1 FD | 	call	#__system___float_cmp
0e040     00 FA 55 F2 | 	cmps	result1, #0 wc
0e044     24 00 90 CD |  if_b	jmp	#LR__1156
0e048     44 4E 05 F1 | 	add	fp, #68
0e04c     A7 12 02 FB | 	rdlong	arg01, fp
0e050     44 4E 85 F1 | 	sub	fp, #68
0e054     89 C1 20 FF 
0e058     6F 14 06 F6 | 	mov	arg02, ##1099108975
0e05c     01 16 66 F6 | 	neg	arg03, #1
0e060     A0 59 B1 FD | 	call	#__system___float_cmp
0e064     01 FA 55 F2 | 	cmps	result1, #1 wc
0e068     44 00 90 CD |  if_b	jmp	#LR__1157
0e06c                 | LR__1156
0e06c     0C 4E 05 F1 | 	add	fp, #12
0e070     A7 20 02 FB | 	rdlong	local02, fp
0e074     10 23 02 F6 | 	mov	local03, local02
0e078     01 22 66 F0 | 	shl	local03, #1
0e07c     10 23 02 F1 | 	add	local03, local02
0e080     03 22 66 F0 | 	shl	local03, #3
0e084     14 00 00 FF 
0e088     38 E5 05 F1 | 	add	objptr, ##10552
0e08c     F2 22 02 F1 | 	add	local03, objptr
0e090     0C 22 06 F1 | 	add	local03, #12
0e094     11 23 02 FB | 	rdlong	local03, local03
0e098     68 4E 05 F1 | 	add	fp, #104
0e09c     A7 22 62 FC | 	wrlong	local03, fp
0e0a0     74 4E 85 F1 | 	sub	fp, #116
0e0a4     14 00 00 FF 
0e0a8     38 E5 85 F1 | 	sub	objptr, ##10552
0e0ac     48 00 90 FD | 	jmp	#LR__1158
0e0b0                 | LR__1157
0e0b0     44 4E 05 F1 | 	add	fp, #68
0e0b4     A7 24 02 FB | 	rdlong	local04, fp
0e0b8     30 4E 05 F1 | 	add	fp, #48
0e0bc     A7 24 62 FC | 	wrlong	local04, fp
0e0c0     68 4E 85 F1 | 	sub	fp, #104
0e0c4     A7 20 02 FB | 	rdlong	local02, fp
0e0c8     10 23 02 F6 | 	mov	local03, local02
0e0cc     01 22 66 F0 | 	shl	local03, #1
0e0d0     10 23 02 F1 | 	add	local03, local02
0e0d4     03 22 66 F0 | 	shl	local03, #3
0e0d8     14 00 00 FF 
0e0dc     38 E5 05 F1 | 	add	objptr, ##10552
0e0e0     F2 22 02 F1 | 	add	local03, objptr
0e0e4     0C 4E 85 F1 | 	sub	fp, #12
0e0e8     0C 22 06 F1 | 	add	local03, #12
0e0ec     11 25 62 FC | 	wrlong	local04, local03
0e0f0     14 00 00 FF 
0e0f4     38 E5 85 F1 | 	sub	objptr, ##10552
0e0f8                 | LR__1158
0e0f8                 | ' if params(4)<0 orelse params(4)>8.0 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
0e0f8     48 4E 05 F1 | 	add	fp, #72
0e0fc     A7 12 02 FB | 	rdlong	arg01, fp
0e100     48 4E 85 F1 | 	sub	fp, #72
0e104     00 14 06 F6 | 	mov	arg02, #0
0e108     01 16 06 F6 | 	mov	arg03, #1
0e10c     F4 58 B1 FD | 	call	#__system___float_cmp
0e110     00 FA 55 F2 | 	cmps	result1, #0 wc
0e114     24 00 90 CD |  if_b	jmp	#LR__1159
0e118     48 4E 05 F1 | 	add	fp, #72
0e11c     A7 12 02 FB | 	rdlong	arg01, fp
0e120     48 4E 85 F1 | 	sub	fp, #72
0e124     00 80 20 FF 
0e128     00 14 06 F6 | 	mov	arg02, ##1090519040
0e12c     01 16 66 F6 | 	neg	arg03, #1
0e130     D0 58 B1 FD | 	call	#__system___float_cmp
0e134     01 FA 55 F2 | 	cmps	result1, #1 wc
0e138     48 00 90 CD |  if_b	jmp	#LR__1160
0e13c                 | LR__1159
0e13c     0C 4E 05 F1 | 	add	fp, #12
0e140     A7 22 02 FB | 	rdlong	local03, fp
0e144     11 27 02 F6 | 	mov	local05, local03
0e148     01 26 66 F0 | 	shl	local05, #1
0e14c     11 27 02 F1 | 	add	local05, local03
0e150     03 26 66 F0 | 	shl	local05, #3
0e154     14 00 00 FF 
0e158     38 E5 05 F1 | 	add	objptr, ##10552
0e15c     F2 26 02 F1 | 	add	local05, objptr
0e160     04 26 06 F1 | 	add	local05, #4
0e164     13 27 C2 FA | 	rdbyte	local05, local05
0e168     13 25 E2 F8 | 	getbyte	local04, local05, #0
0e16c     14 4E 05 F1 | 	add	fp, #20
0e170     A7 24 62 FC | 	wrlong	local04, fp
0e174     20 4E 85 F1 | 	sub	fp, #32
0e178     14 00 00 FF 
0e17c     38 E5 85 F1 | 	sub	objptr, ##10552
0e180     54 00 90 FD | 	jmp	#LR__1161
0e184                 | LR__1160
0e184     48 4E 05 F1 | 	add	fp, #72
0e188     A7 12 02 FB | 	rdlong	arg01, fp
0e18c     48 4E 85 F1 | 	sub	fp, #72
0e190     01 14 06 F6 | 	mov	arg02, #1
0e194     00 59 B1 FD | 	call	#__system___float_tointeger
0e198     20 4E 05 F1 | 	add	fp, #32
0e19c     A7 FA 61 FC | 	wrlong	result1, fp
0e1a0     14 4E 85 F1 | 	sub	fp, #20
0e1a4     A7 20 02 FB | 	rdlong	local02, fp
0e1a8     10 23 02 F6 | 	mov	local03, local02
0e1ac     01 22 66 F0 | 	shl	local03, #1
0e1b0     10 23 02 F1 | 	add	local03, local02
0e1b4     03 22 66 F0 | 	shl	local03, #3
0e1b8     14 00 00 FF 
0e1bc     38 E5 05 F1 | 	add	objptr, ##10552
0e1c0     F2 22 02 F1 | 	add	local03, objptr
0e1c4     0C 4E 85 F1 | 	sub	fp, #12
0e1c8     04 22 06 F1 | 	add	local03, #4
0e1cc     11 FB 41 FC | 	wrbyte	result1, local03
0e1d0     14 00 00 FF 
0e1d4     38 E5 85 F1 | 	sub	objptr, ##10552
0e1d8                 | LR__1161
0e1d8                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
0e1d8     4C 4E 05 F1 | 	add	fp, #76
0e1dc     A7 12 02 FB | 	rdlong	arg01, fp
0e1e0     4C 4E 85 F1 | 	sub	fp, #76
0e1e4     00 14 06 F6 | 	mov	arg02, #0
0e1e8     01 16 06 F6 | 	mov	arg03, #1
0e1ec     14 58 B1 FD | 	call	#__system___float_cmp
0e1f0     00 FA 55 F2 | 	cmps	result1, #0 wc
0e1f4     24 00 90 CD |  if_b	jmp	#LR__1162
0e1f8     4C 4E 05 F1 | 	add	fp, #76
0e1fc     A7 12 02 FB | 	rdlong	arg01, fp
0e200     4C 4E 85 F1 | 	sub	fp, #76
0e204     00 80 20 FF 
0e208     00 14 06 F6 | 	mov	arg02, ##1090519040
0e20c     01 16 66 F6 | 	neg	arg03, #1
0e210     F0 57 B1 FD | 	call	#__system___float_cmp
0e214     01 FA 55 F2 | 	cmps	result1, #1 wc
0e218     48 00 90 CD |  if_b	jmp	#LR__1163
0e21c                 | LR__1162
0e21c     0C 4E 05 F1 | 	add	fp, #12
0e220     A7 22 02 FB | 	rdlong	local03, fp
0e224     11 27 02 F6 | 	mov	local05, local03
0e228     01 26 66 F0 | 	shl	local05, #1
0e22c     11 27 02 F1 | 	add	local05, local03
0e230     03 26 66 F0 | 	shl	local05, #3
0e234     14 00 00 FF 
0e238     38 E5 05 F1 | 	add	objptr, ##10552
0e23c     F2 26 02 F1 | 	add	local05, objptr
0e240     05 26 06 F1 | 	add	local05, #5
0e244     13 27 C2 FA | 	rdbyte	local05, local05
0e248     13 25 E2 F8 | 	getbyte	local04, local05, #0
0e24c     18 4E 05 F1 | 	add	fp, #24
0e250     A7 24 62 FC | 	wrlong	local04, fp
0e254     24 4E 85 F1 | 	sub	fp, #36
0e258     14 00 00 FF 
0e25c     38 E5 85 F1 | 	sub	objptr, ##10552
0e260     54 00 90 FD | 	jmp	#LR__1164
0e264                 | LR__1163
0e264     4C 4E 05 F1 | 	add	fp, #76
0e268     A7 12 02 FB | 	rdlong	arg01, fp
0e26c     4C 4E 85 F1 | 	sub	fp, #76
0e270     01 14 06 F6 | 	mov	arg02, #1
0e274     20 58 B1 FD | 	call	#__system___float_tointeger
0e278     24 4E 05 F1 | 	add	fp, #36
0e27c     A7 FA 61 FC | 	wrlong	result1, fp
0e280     18 4E 85 F1 | 	sub	fp, #24
0e284     A7 20 02 FB | 	rdlong	local02, fp
0e288     10 23 02 F6 | 	mov	local03, local02
0e28c     01 22 66 F0 | 	shl	local03, #1
0e290     10 23 02 F1 | 	add	local03, local02
0e294     03 22 66 F0 | 	shl	local03, #3
0e298     14 00 00 FF 
0e29c     38 E5 05 F1 | 	add	objptr, ##10552
0e2a0     F2 22 02 F1 | 	add	local03, objptr
0e2a4     0C 4E 85 F1 | 	sub	fp, #12
0e2a8     05 22 06 F1 | 	add	local03, #5
0e2ac     11 FB 41 FC | 	wrbyte	result1, local03
0e2b0     14 00 00 FF 
0e2b4     38 E5 85 F1 | 	sub	objptr, ##10552
0e2b8                 | LR__1164
0e2b8                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
0e2b8     50 4E 05 F1 | 	add	fp, #80
0e2bc     A7 12 02 FB | 	rdlong	arg01, fp
0e2c0     50 4E 85 F1 | 	sub	fp, #80
0e2c4     00 14 06 F6 | 	mov	arg02, #0
0e2c8     01 16 06 F6 | 	mov	arg03, #1
0e2cc     34 57 B1 FD | 	call	#__system___float_cmp
0e2d0     00 FA 55 F2 | 	cmps	result1, #0 wc
0e2d4     24 00 90 CD |  if_b	jmp	#LR__1165
0e2d8     50 4E 05 F1 | 	add	fp, #80
0e2dc     A7 12 02 FB | 	rdlong	arg01, fp
0e2e0     50 4E 85 F1 | 	sub	fp, #80
0e2e4     00 3D 22 FF 
0e2e8     00 14 06 F6 | 	mov	arg02, ##1148846080
0e2ec     01 16 66 F6 | 	neg	arg03, #1
0e2f0     10 57 B1 FD | 	call	#__system___float_cmp
0e2f4     01 FA 55 F2 | 	cmps	result1, #1 wc
0e2f8     44 00 90 CD |  if_b	jmp	#LR__1166
0e2fc                 | LR__1165
0e2fc     0C 4E 05 F1 | 	add	fp, #12
0e300     A7 20 02 FB | 	rdlong	local02, fp
0e304     10 23 02 F6 | 	mov	local03, local02
0e308     01 22 66 F0 | 	shl	local03, #1
0e30c     10 23 02 F1 | 	add	local03, local02
0e310     03 22 66 F0 | 	shl	local03, #3
0e314     14 00 00 FF 
0e318     38 E5 05 F1 | 	add	objptr, ##10552
0e31c     F2 22 02 F1 | 	add	local03, objptr
0e320     08 22 06 F1 | 	add	local03, #8
0e324     11 25 02 FB | 	rdlong	local04, local03
0e328     6C 4E 05 F1 | 	add	fp, #108
0e32c     A7 24 62 FC | 	wrlong	local04, fp
0e330     78 4E 85 F1 | 	sub	fp, #120
0e334     14 00 00 FF 
0e338     38 E5 85 F1 | 	sub	objptr, ##10552
0e33c     48 00 90 FD | 	jmp	#LR__1167
0e340                 | LR__1166
0e340     50 4E 05 F1 | 	add	fp, #80
0e344     A7 24 02 FB | 	rdlong	local04, fp
0e348     28 4E 05 F1 | 	add	fp, #40
0e34c     A7 24 62 FC | 	wrlong	local04, fp
0e350     6C 4E 85 F1 | 	sub	fp, #108
0e354     A7 20 02 FB | 	rdlong	local02, fp
0e358     10 23 02 F6 | 	mov	local03, local02
0e35c     01 22 66 F0 | 	shl	local03, #1
0e360     10 23 02 F1 | 	add	local03, local02
0e364     03 22 66 F0 | 	shl	local03, #3
0e368     14 00 00 FF 
0e36c     38 E5 05 F1 | 	add	objptr, ##10552
0e370     F2 22 02 F1 | 	add	local03, objptr
0e374     0C 4E 85 F1 | 	sub	fp, #12
0e378     08 22 06 F1 | 	add	local03, #8
0e37c     11 25 62 FC | 	wrlong	local04, local03
0e380     14 00 00 FF 
0e384     38 E5 85 F1 | 	sub	objptr, ##10552
0e388                 | LR__1167
0e388                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
0e388     40 4E 05 F1 | 	add	fp, #64
0e38c     A7 12 02 FB | 	rdlong	arg01, fp
0e390     40 4E 85 F1 | 	sub	fp, #64
0e394     00 14 06 F6 | 	mov	arg02, #0
0e398     01 16 06 F6 | 	mov	arg03, #1
0e39c     64 56 B1 FD | 	call	#__system___float_cmp
0e3a0     00 FA 55 F2 | 	cmps	result1, #0 wc
0e3a4     24 00 90 CD |  if_b	jmp	#LR__1168
0e3a8     40 4E 05 F1 | 	add	fp, #64
0e3ac     A7 12 02 FB | 	rdlong	arg01, fp
0e3b0     40 4E 85 F1 | 	sub	fp, #64
0e3b4     20 0E 23 FF 
0e3b8     00 14 06 F6 | 	mov	arg02, ##1176256512
0e3bc     01 16 66 F6 | 	neg	arg03, #1
0e3c0     40 56 B1 FD | 	call	#__system___float_cmp
0e3c4     01 FA 55 F2 | 	cmps	result1, #1 wc
0e3c8     44 00 90 CD |  if_b	jmp	#LR__1169
0e3cc                 | LR__1168
0e3cc     0C 4E 05 F1 | 	add	fp, #12
0e3d0     A7 22 02 FB | 	rdlong	local03, fp
0e3d4     11 25 02 F6 | 	mov	local04, local03
0e3d8     01 24 66 F0 | 	shl	local04, #1
0e3dc     11 25 02 F1 | 	add	local04, local03
0e3e0     03 24 66 F0 | 	shl	local04, #3
0e3e4     14 00 00 FF 
0e3e8     38 E5 05 F1 | 	add	objptr, ##10552
0e3ec     F2 24 02 F1 | 	add	local04, objptr
0e3f0     06 24 06 F1 | 	add	local04, #6
0e3f4     12 25 E2 FA | 	rdword	local04, local04
0e3f8     1C 4E 05 F1 | 	add	fp, #28
0e3fc     A7 24 62 FC | 	wrlong	local04, fp
0e400     28 4E 85 F1 | 	sub	fp, #40
0e404     14 00 00 FF 
0e408     38 E5 85 F1 | 	sub	objptr, ##10552
0e40c     54 00 90 FD | 	jmp	#LR__1170
0e410                 | LR__1169
0e410     40 4E 05 F1 | 	add	fp, #64
0e414     A7 12 02 FB | 	rdlong	arg01, fp
0e418     40 4E 85 F1 | 	sub	fp, #64
0e41c     01 14 06 F6 | 	mov	arg02, #1
0e420     74 56 B1 FD | 	call	#__system___float_tointeger
0e424     28 4E 05 F1 | 	add	fp, #40
0e428     A7 FA 61 FC | 	wrlong	result1, fp
0e42c     1C 4E 85 F1 | 	sub	fp, #28
0e430     A7 20 02 FB | 	rdlong	local02, fp
0e434     10 23 02 F6 | 	mov	local03, local02
0e438     01 22 66 F0 | 	shl	local03, #1
0e43c     10 23 02 F1 | 	add	local03, local02
0e440     03 22 66 F0 | 	shl	local03, #3
0e444     14 00 00 FF 
0e448     38 E5 05 F1 | 	add	objptr, ##10552
0e44c     F2 22 02 F1 | 	add	local03, objptr
0e450     0C 4E 85 F1 | 	sub	fp, #12
0e454     06 22 06 F1 | 	add	local03, #6
0e458     11 FB 51 FC | 	wrword	result1, local03
0e45c     14 00 00 FF 
0e460     38 E5 85 F1 | 	sub	objptr, ##10552
0e464                 | LR__1170
0e464                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
0e464     54 4E 05 F1 | 	add	fp, #84
0e468     A7 12 02 FB | 	rdlong	arg01, fp
0e46c     54 4E 85 F1 | 	sub	fp, #84
0e470     00 C0 5F FF 
0e474     00 14 06 F6 | 	mov	arg02, ##-1082130432
0e478     01 16 06 F6 | 	mov	arg03, #1
0e47c     84 55 B1 FD | 	call	#__system___float_cmp
0e480     00 FA 55 F2 | 	cmps	result1, #0 wc
0e484     24 00 90 CD |  if_b	jmp	#LR__1171
0e488     54 4E 05 F1 | 	add	fp, #84
0e48c     A7 12 02 FB | 	rdlong	arg01, fp
0e490     54 4E 85 F1 | 	sub	fp, #84
0e494     00 C0 1F FF 
0e498     00 14 06 F6 | 	mov	arg02, ##1065353216
0e49c     01 16 66 F6 | 	neg	arg03, #1
0e4a0     60 55 B1 FD | 	call	#__system___float_cmp
0e4a4     01 FA 55 F2 | 	cmps	result1, #1 wc
0e4a8     44 00 90 CD |  if_b	jmp	#LR__1172
0e4ac                 | LR__1171
0e4ac     0C 4E 05 F1 | 	add	fp, #12
0e4b0     A7 20 02 FB | 	rdlong	local02, fp
0e4b4     10 23 02 F6 | 	mov	local03, local02
0e4b8     01 22 66 F0 | 	shl	local03, #1
0e4bc     10 23 02 F1 | 	add	local03, local02
0e4c0     03 22 66 F0 | 	shl	local03, #3
0e4c4     14 00 00 FF 
0e4c8     38 E5 05 F1 | 	add	objptr, ##10552
0e4cc     F2 22 02 F1 | 	add	local03, objptr
0e4d0     10 22 06 F1 | 	add	local03, #16
0e4d4     11 25 02 FB | 	rdlong	local04, local03
0e4d8     64 4E 05 F1 | 	add	fp, #100
0e4dc     A7 24 62 FC | 	wrlong	local04, fp
0e4e0     70 4E 85 F1 | 	sub	fp, #112
0e4e4     14 00 00 FF 
0e4e8     38 E5 85 F1 | 	sub	objptr, ##10552
0e4ec     48 00 90 FD | 	jmp	#LR__1173
0e4f0                 | LR__1172
0e4f0     54 4E 05 F1 | 	add	fp, #84
0e4f4     A7 26 02 FB | 	rdlong	local05, fp
0e4f8     1C 4E 05 F1 | 	add	fp, #28
0e4fc     A7 26 62 FC | 	wrlong	local05, fp
0e500     64 4E 85 F1 | 	sub	fp, #100
0e504     A7 20 02 FB | 	rdlong	local02, fp
0e508     10 23 02 F6 | 	mov	local03, local02
0e50c     01 22 66 F0 | 	shl	local03, #1
0e510     10 23 02 F1 | 	add	local03, local02
0e514     03 22 66 F0 | 	shl	local03, #3
0e518     14 00 00 FF 
0e51c     38 E5 05 F1 | 	add	objptr, ##10552
0e520     F2 22 02 F1 | 	add	local03, objptr
0e524     0C 4E 85 F1 | 	sub	fp, #12
0e528     10 22 06 F1 | 	add	local03, #16
0e52c     11 27 62 FC | 	wrlong	local05, local03
0e530     14 00 00 FF 
0e534     38 E5 85 F1 | 	sub	objptr, ##10552
0e538                 | LR__1173
0e538                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
0e538     58 4E 05 F1 | 	add	fp, #88
0e53c     A7 12 02 FB | 	rdlong	arg01, fp
0e540     58 4E 85 F1 | 	sub	fp, #88
0e544     00 14 06 F6 | 	mov	arg02, #0
0e548     01 16 06 F6 | 	mov	arg03, #1
0e54c     B4 54 B1 FD | 	call	#__system___float_cmp
0e550     00 FA 55 F2 | 	cmps	result1, #0 wc
0e554     24 00 90 CD |  if_b	jmp	#LR__1174
0e558     58 4E 05 F1 | 	add	fp, #88
0e55c     A7 12 02 FB | 	rdlong	arg01, fp
0e560     58 4E 85 F1 | 	sub	fp, #88
0e564     80 BF 21 FF 
0e568     00 14 06 F6 | 	mov	arg02, ##1132396544
0e56c     01 16 66 F6 | 	neg	arg03, #1
0e570     90 54 B1 FD | 	call	#__system___float_cmp
0e574     01 FA 55 F2 | 	cmps	result1, #1 wc
0e578     44 00 90 CD |  if_b	jmp	#LR__1175
0e57c                 | LR__1174
0e57c     0C 4E 05 F1 | 	add	fp, #12
0e580     A7 22 02 FB | 	rdlong	local03, fp
0e584     11 27 02 F6 | 	mov	local05, local03
0e588     01 26 66 F0 | 	shl	local05, #1
0e58c     11 27 02 F1 | 	add	local05, local03
0e590     03 26 66 F0 | 	shl	local05, #3
0e594     14 00 00 FF 
0e598     38 E5 05 F1 | 	add	objptr, ##10552
0e59c     F2 26 02 F1 | 	add	local05, objptr
0e5a0     14 26 06 F1 | 	add	local05, #20
0e5a4     13 25 E2 FA | 	rdword	local04, local05
0e5a8     20 4E 05 F1 | 	add	fp, #32
0e5ac     A7 24 62 FC | 	wrlong	local04, fp
0e5b0     2C 4E 85 F1 | 	sub	fp, #44
0e5b4     14 00 00 FF 
0e5b8     38 E5 85 F1 | 	sub	objptr, ##10552
0e5bc     54 00 90 FD | 	jmp	#LR__1176
0e5c0                 | LR__1175
0e5c0     58 4E 05 F1 | 	add	fp, #88
0e5c4     A7 12 02 FB | 	rdlong	arg01, fp
0e5c8     58 4E 85 F1 | 	sub	fp, #88
0e5cc     01 14 06 F6 | 	mov	arg02, #1
0e5d0     C4 54 B1 FD | 	call	#__system___float_tointeger
0e5d4     2C 4E 05 F1 | 	add	fp, #44
0e5d8     A7 FA 61 FC | 	wrlong	result1, fp
0e5dc     20 4E 85 F1 | 	sub	fp, #32
0e5e0     A7 20 02 FB | 	rdlong	local02, fp
0e5e4     10 23 02 F6 | 	mov	local03, local02
0e5e8     01 22 66 F0 | 	shl	local03, #1
0e5ec     10 23 02 F1 | 	add	local03, local02
0e5f0     03 22 66 F0 | 	shl	local03, #3
0e5f4     14 00 00 FF 
0e5f8     38 E5 05 F1 | 	add	objptr, ##10552
0e5fc     F2 22 02 F1 | 	add	local03, objptr
0e600     0C 4E 85 F1 | 	sub	fp, #12
0e604     14 22 06 F1 | 	add	local03, #20
0e608     11 FB 51 FC | 	wrword	result1, local03
0e60c     14 00 00 FF 
0e610     38 E5 85 F1 | 	sub	objptr, ##10552
0e614                 | LR__1176
0e614     6C 4E 05 F1 | 	add	fp, #108
0e618     A7 14 02 FB | 	rdlong	arg02, fp
0e61c     6C 4E 85 F1 | 	sub	fp, #108
0e620     FC 16 20 FF 
0e624     54 12 06 F6 | 	mov	arg01, ##1076754516
0e628     50 5F B1 FD | 	call	#__system____builtin_logbase
0e62c     FD 24 02 F6 | 	mov	local04, result1
0e630     1E 14 C6 F9 | 	decod	arg02, #30
0e634     FC 16 20 FF 
0e638     54 12 06 F6 | 	mov	arg01, ##1076754516
0e63c     3C 5F B1 FD | 	call	#__system____builtin_logbase
0e640     FD 14 02 F6 | 	mov	arg02, result1
0e644     12 13 02 F6 | 	mov	arg01, local04
0e648     88 51 B1 FD | 	call	#__system___float_div
0e64c     FD 12 02 F6 | 	mov	arg01, result1
0e650     00 14 06 F6 | 	mov	arg02, #0
0e654     40 54 B1 FD | 	call	#__system___float_tointeger
0e658     30 4E 05 F1 | 	add	fp, #48
0e65c     A7 FA 61 FC | 	wrlong	result1, fp
0e660     1E 24 C6 F9 | 	decod	local04, #30
0e664     FD 12 02 F6 | 	mov	arg01, result1
0e668     30 4E 85 F1 | 	sub	fp, #48
0e66c     05 12 06 F1 | 	add	arg01, #5
0e670     09 13 52 F6 | 	abs	arg01, arg01 wc
0e674     1F 28 C6 C9 |  if_b	decod	local06, #31
0e678     00 28 06 36 |  if_ae	mov	local06, #0
0e67c     4C 4B B1 FD | 	call	#__system___float_fromuns
0e680     14 FB 61 F5 | 	xor	result1, local06
0e684     FD 14 02 F6 | 	mov	arg02, result1
0e688     12 13 02 F6 | 	mov	arg01, local04
0e68c     24 5E B1 FD | 	call	#__system____builtin_powf
0e690     FD 12 02 F6 | 	mov	arg01, result1
0e694     01 14 06 F6 | 	mov	arg02, #1
0e698     FC 53 B1 FD | 	call	#__system___float_tointeger
0e69c     10 4E 05 F1 | 	add	fp, #16
0e6a0     A7 FA 61 FC | 	wrlong	result1, fp
0e6a4                 | ' skip=round(2^(lfreq+5))
0e6a4                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0e6a4     10 4E 85 F1 | 	sub	fp, #16
0e6a8     40 00 00 FF 
0e6ac     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0e6b0     30 00 90 CD |  if_b	jmp	#LR__1177
0e6b4     10 4E 05 F1 | 	add	fp, #16
0e6b8     A7 1E 02 FB | 	rdlong	local01, fp
0e6bc     0F 25 52 F6 | 	abs	local04, local01 wc
0e6c0     0F 24 46 F0 | 	shr	local04, #15
0e6c4     12 25 82 F6 | 	negc	local04, local04
0e6c8     0C 4E 85 F1 | 	sub	fp, #12
0e6cc     A7 24 62 FC | 	wrlong	local04, fp
0e6d0     0C 4E 05 F1 | 	add	fp, #12
0e6d4     40 00 80 FF 
0e6d8     A7 00 68 FC | 	wrlong	##32768, fp
0e6dc     10 4E 85 F1 | 	sub	fp, #16
0e6e0     0C 00 90 FD | 	jmp	#LR__1178
0e6e4                 | LR__1177
0e6e4     04 4E 05 F1 | 	add	fp, #4
0e6e8     A7 02 68 FC | 	wrlong	#1, fp
0e6ec     04 4E 85 F1 | 	sub	fp, #4
0e6f0                 | LR__1178
0e6f0     6C 4E 05 F1 | 	add	fp, #108
0e6f4     A7 14 02 FB | 	rdlong	arg02, fp
0e6f8     6C 4E 85 F1 | 	sub	fp, #108
0e6fc     3E 2C 25 FF 
0e700     3C 12 06 F6 | 	mov	arg01, ##1247312956
0e704     CC 50 B1 FD | 	call	#__system___float_div
0e708     FD 24 02 F6 | 	mov	local04, result1
0e70c     04 4E 05 F1 | 	add	fp, #4
0e710     A7 12 02 FB | 	rdlong	arg01, fp
0e714     04 4E 85 F1 | 	sub	fp, #4
0e718     09 13 52 F6 | 	abs	arg01, arg01 wc
0e71c     1F 28 C6 C9 |  if_b	decod	local06, #31
0e720     00 28 06 36 |  if_ae	mov	local06, #0
0e724     A4 4A B1 FD | 	call	#__system___float_fromuns
0e728     14 FB 61 F5 | 	xor	result1, local06
0e72c     FD 1E 02 F6 | 	mov	local01, result1
0e730     1E 20 C6 F9 | 	decod	local02, #30
0e734     0D 12 06 F6 | 	mov	arg01, #13
0e738     30 4E 05 F1 | 	add	fp, #48
0e73c     A7 26 02 FB | 	rdlong	local05, fp
0e740     30 4E 85 F1 | 	sub	fp, #48
0e744     13 13 82 F1 | 	sub	arg01, local05
0e748     09 13 52 F6 | 	abs	arg01, arg01 wc
0e74c     1F 28 C6 C9 |  if_b	decod	local06, #31
0e750     00 28 06 36 |  if_ae	mov	local06, #0
0e754     74 4A B1 FD | 	call	#__system___float_fromuns
0e758     14 FB 61 F5 | 	xor	result1, local06
0e75c     FD 14 02 F6 | 	mov	arg02, result1
0e760     10 13 02 F6 | 	mov	arg01, local02
0e764     4C 5D B1 FD | 	call	#__system____builtin_powf
0e768     FD 14 02 F6 | 	mov	arg02, result1
0e76c     0F 13 02 F6 | 	mov	arg01, local01
0e770     5C 4E B1 FD | 	call	#__system___float_mul
0e774     FD 14 02 F6 | 	mov	arg02, result1
0e778     12 13 02 F6 | 	mov	arg01, local04
0e77c     54 50 B1 FD | 	call	#__system___float_div
0e780     FD 12 02 F6 | 	mov	arg01, result1
0e784     01 14 06 F6 | 	mov	arg02, #1
0e788     0C 53 B1 FD | 	call	#__system___float_tointeger
0e78c     34 4E 05 F1 | 	add	fp, #52
0e790     A7 FA 61 FC | 	wrlong	result1, fp
0e794     34 4E 05 F1 | 	add	fp, #52
0e798     A7 12 02 FB | 	rdlong	arg01, fp
0e79c     10 4E 05 F1 | 	add	fp, #16
0e7a0     A7 14 02 FB | 	rdlong	arg02, fp
0e7a4     78 4E 85 F1 | 	sub	fp, #120
0e7a8     28 50 B1 FD | 	call	#__system___float_div
0e7ac     FD 12 02 F6 | 	mov	arg01, result1
0e7b0     01 14 06 F6 | 	mov	arg02, #1
0e7b4     E0 52 B1 FD | 	call	#__system___float_tointeger
0e7b8     FD 24 02 F6 | 	mov	local04, result1
0e7bc     14 4E 05 F1 | 	add	fp, #20
0e7c0     A7 24 62 FC | 	wrlong	local04, fp
0e7c4     5C 4E 05 F1 | 	add	fp, #92
0e7c8     A7 14 02 FB | 	rdlong	arg02, fp
0e7cc     70 4E 85 F1 | 	sub	fp, #112
0e7d0     00 00 23 FF 
0e7d4     00 12 06 F6 | 	mov	arg01, ##1174405120
0e7d8     F4 4D B1 FD | 	call	#__system___float_mul
0e7dc     FD 12 02 F6 | 	mov	arg01, result1
0e7e0     01 14 06 F6 | 	mov	arg02, #1
0e7e4     B0 52 B1 FD | 	call	#__system___float_tointeger
0e7e8     0D 24 C6 F9 | 	decod	local04, #13
0e7ec     FD 24 02 F1 | 	add	local04, result1
0e7f0     18 4E 05 F1 | 	add	fp, #24
0e7f4     A7 24 62 FC | 	wrlong	local04, fp
0e7f8     5C 4E 05 F1 | 	add	fp, #92
0e7fc     A7 14 02 FB | 	rdlong	arg02, fp
0e800     74 4E 85 F1 | 	sub	fp, #116
0e804     00 3D 22 FF 
0e808     00 12 06 F6 | 	mov	arg01, ##1148846080
0e80c     C0 4D B1 FD | 	call	#__system___float_mul
0e810     FD 12 02 F6 | 	mov	arg01, result1
0e814     01 14 06 F6 | 	mov	arg02, #1
0e818     7C 52 B1 FD | 	call	#__system___float_tointeger
0e81c     1C 4E 05 F1 | 	add	fp, #28
0e820     A7 FA 61 FC | 	wrlong	result1, fp
0e824     37 00 00 FF 
0e828     10 E4 05 F1 | 	add	objptr, ##28176
0e82c     F2 24 02 FB | 	rdlong	local04, objptr
0e830     37 00 00 FF 
0e834     10 E4 85 F1 | 	sub	objptr, ##28176
0e838     10 4E 85 F1 | 	sub	fp, #16
0e83c     A7 20 02 FB | 	rdlong	local02, fp
0e840     06 20 66 F0 | 	shl	local02, #6
0e844     10 25 02 F1 | 	add	local04, local02
0e848     04 4E 85 F1 | 	sub	fp, #4
0e84c     A7 24 62 FC | 	wrlong	local04, fp
0e850                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
0e850                 | '  
0e850                 | '   
0e850                 | ' 'print period,skip
0e850                 | ' speed=round(speed_coeff/slen)
0e850                 | ' ipan=8192+round(8192*pan)
0e850                 | ' ivol=round(1000.0*vol)
0e850                 | ' base2=base+64*channel
0e850                 | ' 'skip=round(freq*3.9827219) 
0e850                 | ' if wave <32 then 
0e850     18 4E 05 F1 | 	add	fp, #24
0e854     A7 24 02 FB | 	rdlong	local04, fp
0e858     20 4E 85 F1 | 	sub	fp, #32
0e85c     20 24 56 F2 | 	cmps	local04, #32 wc
0e860     2C 00 90 3D |  if_ae	jmp	#LR__1179
0e864     08 4E 05 F1 | 	add	fp, #8
0e868     A7 12 02 FB | 	rdlong	arg01, fp
0e86c     08 12 06 F1 | 	add	arg01, #8
0e870     18 4E 05 F1 | 	add	fp, #24
0e874     A7 14 02 FB | 	rdlong	arg02, fp
0e878     20 4E 85 F1 | 	sub	fp, #32
0e87c     0B 14 66 F0 | 	shl	arg02, #11
0e880     00 00 60 FF 
0e884     00 14 06 F1 | 	add	arg02, ##-1073741824
0e888     09 15 62 FC | 	wrlong	arg02, arg01
0e88c     18 00 90 FD | 	jmp	#LR__1180
0e890                 | LR__1179
0e890     08 4E 05 F1 | 	add	fp, #8
0e894     A7 12 02 FB | 	rdlong	arg01, fp
0e898     08 4E 85 F1 | 	sub	fp, #8
0e89c     08 12 06 F1 | 	add	arg01, #8
0e8a0     00 00 E4 FF 
0e8a4     09 01 68 FC | 	wrlong	##-939524096, arg01
0e8a8                 | LR__1180
0e8a8     08 4E 05 F1 | 	add	fp, #8
0e8ac     A7 12 02 FB | 	rdlong	arg01, fp
0e8b0     10 12 06 F1 | 	add	arg01, #16
0e8b4     04 00 80 FF 
0e8b8     09 01 68 FC | 	wrlong	##2048, arg01
0e8bc     A7 12 02 FB | 	rdlong	arg01, fp
0e8c0     0C 12 06 F1 | 	add	arg01, #12
0e8c4     09 01 68 FC | 	wrlong	#0, arg01
0e8c8     A7 12 02 FB | 	rdlong	arg01, fp
0e8cc     14 12 06 F1 | 	add	arg01, #20
0e8d0     14 4E 05 F1 | 	add	fp, #20
0e8d4     A7 14 02 FB | 	rdlong	arg02, fp
0e8d8     09 15 52 FC | 	wrword	arg02, arg01
0e8dc     14 4E 85 F1 | 	sub	fp, #20
0e8e0     A7 12 02 FB | 	rdlong	arg01, fp
0e8e4     16 12 06 F1 | 	add	arg01, #22
0e8e8     10 4E 05 F1 | 	add	fp, #16
0e8ec     A7 14 02 FB | 	rdlong	arg02, fp
0e8f0     09 15 52 FC | 	wrword	arg02, arg01
0e8f4                 | ' lpoke base2+16,2048
0e8f4                 | ' lpoke base2+12,0
0e8f4                 | ' dpoke base2+20,ivol 
0e8f4                 | ' dpoke base2+22,ipan 
0e8f4                 | ' if wave<32 then
0e8f4     08 4E 05 F1 | 	add	fp, #8
0e8f8     A7 24 02 FB | 	rdlong	local04, fp
0e8fc     20 4E 85 F1 | 	sub	fp, #32
0e900     20 24 56 F2 | 	cmps	local04, #32 wc
0e904     38 00 90 3D |  if_ae	jmp	#LR__1181
0e908     08 4E 05 F1 | 	add	fp, #8
0e90c     A7 12 02 FB | 	rdlong	arg01, fp
0e910     18 12 06 F1 | 	add	arg01, #24
0e914     2C 4E 05 F1 | 	add	fp, #44
0e918     A7 14 02 FB | 	rdlong	arg02, fp
0e91c     09 15 52 FC | 	wrword	arg02, arg01
0e920     2C 4E 85 F1 | 	sub	fp, #44
0e924     A7 12 02 FB | 	rdlong	arg01, fp
0e928     1A 12 06 F1 | 	add	arg01, #26
0e92c     08 4E 05 F1 | 	add	fp, #8
0e930     A7 14 02 FB | 	rdlong	arg02, fp
0e934     10 4E 85 F1 | 	sub	fp, #16
0e938     09 15 52 FC | 	wrword	arg02, arg01
0e93c     48 00 90 FD | 	jmp	#LR__1182
0e940                 | LR__1181
0e940     08 4E 05 F1 | 	add	fp, #8
0e944     A7 24 02 FB | 	rdlong	local04, fp
0e948     18 24 06 F1 | 	add	local04, #24
0e94c     64 4E 05 F1 | 	add	fp, #100
0e950     A7 14 02 FB | 	rdlong	arg02, fp
0e954     6C 4E 85 F1 | 	sub	fp, #108
0e958     3E 2C 25 FF 
0e95c     3C 12 06 F6 | 	mov	arg01, ##1247312956
0e960     70 4E B1 FD | 	call	#__system___float_div
0e964     FD 12 02 F6 | 	mov	arg01, result1
0e968     01 14 06 F6 | 	mov	arg02, #1
0e96c     28 51 B1 FD | 	call	#__system___float_tointeger
0e970     12 FB 51 FC | 	wrword	result1, local04
0e974     08 4E 05 F1 | 	add	fp, #8
0e978     A7 12 02 FB | 	rdlong	arg01, fp
0e97c     08 4E 85 F1 | 	sub	fp, #8
0e980     1A 12 06 F1 | 	add	arg01, #26
0e984     09 01 5A FC | 	wrword	#256, arg01
0e988                 | LR__1182
0e988     08 4E 05 F1 | 	add	fp, #8
0e98c     A7 12 02 FB | 	rdlong	arg01, fp
0e990     1C 12 06 F1 | 	add	arg01, #28
0e994     09 01 68 FC | 	wrlong	#0, arg01
0e998     A7 12 02 FB | 	rdlong	arg01, fp
0e99c     20 12 06 F1 | 	add	arg01, #32
0e9a0     09 01 68 FC | 	wrlong	#0, arg01
0e9a4                 | ' lpoke base2+28,$0000_0000
0e9a4                 | ' lpoke base2+32,0 
0e9a4                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
0e9a4     1C 4E 05 F1 | 	add	fp, #28
0e9a8     A7 24 02 FB | 	rdlong	local04, fp
0e9ac     24 4E 85 F1 | 	sub	fp, #36
0e9b0     08 24 0E F2 | 	cmp	local04, #8 wz
0e9b4     18 00 90 5D |  if_ne	jmp	#LR__1183
0e9b8     08 4E 05 F1 | 	add	fp, #8
0e9bc     A7 12 02 FB | 	rdlong	arg01, fp
0e9c0     08 4E 85 F1 | 	sub	fp, #8
0e9c4     24 12 06 F1 | 	add	arg01, #36
0e9c8     09 01 68 FC | 	wrlong	#0, arg01
0e9cc     34 00 90 FD | 	jmp	#LR__1184
0e9d0                 | LR__1183
0e9d0     08 4E 05 F1 | 	add	fp, #8
0e9d4     A7 12 02 FB | 	rdlong	arg01, fp
0e9d8     24 12 06 F1 | 	add	arg01, #36
0e9dc     1C 4E 05 F1 | 	add	fp, #28
0e9e0     A7 14 02 FB | 	rdlong	arg02, fp
0e9e4     24 4E 85 F1 | 	sub	fp, #36
0e9e8     09 14 66 F0 | 	shl	arg02, #9
0e9ec     0C 00 00 FF 
0e9f0     D8 E4 05 F1 | 	add	objptr, ##6360
0e9f4     F2 14 02 F1 | 	add	arg02, objptr
0e9f8     0C 00 00 FF 
0e9fc     D8 E4 85 F1 | 	sub	objptr, ##6360
0ea00     09 15 62 FC | 	wrlong	arg02, arg01
0ea04                 | LR__1184
0ea04     08 4E 05 F1 | 	add	fp, #8
0ea08     A7 12 02 FB | 	rdlong	arg01, fp
0ea0c     28 12 06 F1 | 	add	arg01, #40
0ea10     0C 4E 05 F1 | 	add	fp, #12
0ea14     A7 14 02 FB | 	rdlong	arg02, fp
0ea18     09 15 62 FC | 	wrlong	arg02, arg01
0ea1c     0C 4E 85 F1 | 	sub	fp, #12
0ea20     A7 12 02 FB | 	rdlong	arg01, fp
0ea24     2C 12 06 F1 | 	add	arg01, #44
0ea28     24 4E 05 F1 | 	add	fp, #36
0ea2c     A7 14 02 FB | 	rdlong	arg02, fp
0ea30     09 15 62 FC | 	wrlong	arg02, arg01
0ea34                 | ' lpoke base2+40,speed' speed
0ea34                 | ' lpoke base2+44,sus 'len
0ea34                 | ' 
0ea34                 | ' if delay>0 then waitms(delay) ' : print "wait "; round(params(6)) : l
0ea34     04 4E 85 F1 | 	sub	fp, #4
0ea38     A7 24 02 FB | 	rdlong	local04, fp
0ea3c     28 4E 85 F1 | 	sub	fp, #40
0ea40     01 24 56 F2 | 	cmps	local04, #1 wc
0ea44     28 4E 05 31 |  if_ae	add	fp, #40
0ea48     A7 12 02 3B |  if_ae	rdlong	arg01, fp
0ea4c     28 4E 85 31 |  if_ae	sub	fp, #40
0ea50     BC 22 B1 3D |  if_ae	call	#__system___waitms
0ea54     A7 F0 03 F6 | 	mov	ptra, fp
0ea58     B2 00 A0 FD | 	call	#popregs_
0ea5c                 | _do_play_ret
0ea5c     2D 00 64 FD | 	ret
0ea60                 | 
0ea60                 | ' 
0ea60                 | ' sub do_changevol
0ea60                 | _do_changevol
0ea60     00 4A 05 F6 | 	mov	COUNT_, #0
0ea64     A8 00 A0 FD | 	call	#pushregs_
0ea68     14 F0 07 F1 | 	add	ptra, #20
0ea6c     E8 CF BF FD | 	call	#_pop
0ea70     FF 14 02 F6 | 	mov	arg02, result3
0ea74     A7 FA 61 FC | 	wrlong	result1, fp
0ea78     04 4E 05 F1 | 	add	fp, #4
0ea7c     A7 FC 61 FC | 	wrlong	result2, fp
0ea80     04 4E 05 F1 | 	add	fp, #4
0ea84     A7 14 62 FC | 	wrlong	arg02, fp
0ea88     08 4E 85 F1 | 	sub	fp, #8
0ea8c     A7 12 02 F6 | 	mov	arg01, fp
0ea90     50 71 B0 FD | 	call	#_converttofloat
0ea94     FD 12 02 F6 | 	mov	arg01, result1
0ea98     00 3D 22 FF 
0ea9c     00 14 06 F6 | 	mov	arg02, ##1148846080
0eaa0     2C 4B B1 FD | 	call	#__system___float_mul
0eaa4     FD 12 02 F6 | 	mov	arg01, result1
0eaa8     01 14 06 F6 | 	mov	arg02, #1
0eaac     E8 4F B1 FD | 	call	#__system___float_tointeger
0eab0     FD 14 52 F6 | 	abs	arg02, result1 wc
0eab4     0D 14 46 F7 | 	zerox	arg02, #13
0eab8     0A 15 82 F6 | 	negc	arg02, arg02
0eabc     10 4E 05 F1 | 	add	fp, #16
0eac0     A7 14 62 FC | 	wrlong	arg02, fp
0eac4     10 4E 85 F1 | 	sub	fp, #16
0eac8     8C CF BF FD | 	call	#_pop
0eacc     FF 14 02 F6 | 	mov	arg02, result3
0ead0     A7 FA 61 FC | 	wrlong	result1, fp
0ead4     04 4E 05 F1 | 	add	fp, #4
0ead8     A7 FC 61 FC | 	wrlong	result2, fp
0eadc     04 4E 05 F1 | 	add	fp, #4
0eae0     A7 14 62 FC | 	wrlong	arg02, fp
0eae4     08 4E 85 F1 | 	sub	fp, #8
0eae8     A7 12 02 F6 | 	mov	arg01, fp
0eaec     38 70 B0 FD | 	call	#_converttoint
0eaf0     FD 14 52 F6 | 	abs	arg02, result1 wc
0eaf4     07 14 06 F5 | 	and	arg02, #7
0eaf8     0A 15 82 F6 | 	negc	arg02, arg02
0eafc     0C 4E 05 F1 | 	add	fp, #12
0eb00     A7 14 62 FC | 	wrlong	arg02, fp
0eb04     37 00 00 FF 
0eb08     10 E4 05 F1 | 	add	objptr, ##28176
0eb0c     F2 12 02 FB | 	rdlong	arg01, objptr
0eb10     37 00 00 FF 
0eb14     10 E4 85 F1 | 	sub	objptr, ##28176
0eb18     06 14 66 F0 | 	shl	arg02, #6
0eb1c     0A 13 02 F1 | 	add	arg01, arg02
0eb20     14 12 06 F1 | 	add	arg01, #20
0eb24     04 4E 05 F1 | 	add	fp, #4
0eb28     A7 14 02 FB | 	rdlong	arg02, fp
0eb2c     10 4E 85 F1 | 	sub	fp, #16
0eb30     09 15 52 FC | 	wrword	arg02, arg01
0eb34     A7 F0 03 F6 | 	mov	ptra, fp
0eb38     B2 00 A0 FD | 	call	#popregs_
0eb3c                 | _do_changevol_ret
0eb3c     2D 00 64 FD | 	ret
0eb40                 | 
0eb40                 | ' 
0eb40                 | ' sub do_changepan
0eb40                 | _do_changepan
0eb40     01 4A 05 F6 | 	mov	COUNT_, #1
0eb44     A8 00 A0 FD | 	call	#pushregs_
0eb48     14 F0 07 F1 | 	add	ptra, #20
0eb4c     08 CF BF FD | 	call	#_pop
0eb50     A7 FA 61 FC | 	wrlong	result1, fp
0eb54     04 4E 05 F1 | 	add	fp, #4
0eb58     A7 FC 61 FC | 	wrlong	result2, fp
0eb5c     04 4E 05 F1 | 	add	fp, #4
0eb60     A7 FE 61 FC | 	wrlong	result3, fp
0eb64     08 4E 85 F1 | 	sub	fp, #8
0eb68     00 00 23 FF 
0eb6c     00 1E 06 F6 | 	mov	local01, ##1174405120
0eb70     A7 12 02 F6 | 	mov	arg01, fp
0eb74     6C 70 B0 FD | 	call	#_converttofloat
0eb78     FD 14 02 F6 | 	mov	arg02, result1
0eb7c     0F 13 02 F6 | 	mov	arg01, local01
0eb80     4C 4A B1 FD | 	call	#__system___float_mul
0eb84     FD 12 02 F6 | 	mov	arg01, result1
0eb88     01 14 06 F6 | 	mov	arg02, #1
0eb8c     08 4F B1 FD | 	call	#__system___float_tointeger
0eb90     0D 1E C6 F9 | 	decod	local01, #13
0eb94     FD 1E 02 F1 | 	add	local01, result1
0eb98     10 4E 05 F1 | 	add	fp, #16
0eb9c     A7 1E 62 FC | 	wrlong	local01, fp
0eba0                 | ' t1=pop()
0eba0                 | ' pan=8192+round(8192*converttofloat(t1)) 
0eba0                 | ' if pan<0 then pan=0
0eba0     10 4E 85 F1 | 	sub	fp, #16
0eba4     00 1E 56 F2 | 	cmps	local01, #0 wc
0eba8     10 4E 05 C1 |  if_b	add	fp, #16
0ebac     A7 00 68 CC |  if_b	wrlong	#0, fp
0ebb0     10 4E 85 C1 |  if_b	sub	fp, #16
0ebb4                 | ' if pan>16384 then pan=16384
0ebb4     10 4E 05 F1 | 	add	fp, #16
0ebb8     A7 1E 02 FB | 	rdlong	local01, fp
0ebbc     10 4E 85 F1 | 	sub	fp, #16
0ebc0     20 00 00 FF 
0ebc4     01 1E 56 F2 | 	cmps	local01, ##16385 wc
0ebc8     10 4E 05 31 |  if_ae	add	fp, #16
0ebcc     20 00 80 3F 
0ebd0     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0ebd4     10 4E 85 31 |  if_ae	sub	fp, #16
0ebd8     7C CE BF FD | 	call	#_pop
0ebdc     FF 1E 02 F6 | 	mov	local01, result3
0ebe0     A7 FA 61 FC | 	wrlong	result1, fp
0ebe4     04 4E 05 F1 | 	add	fp, #4
0ebe8     A7 FC 61 FC | 	wrlong	result2, fp
0ebec     04 4E 05 F1 | 	add	fp, #4
0ebf0     A7 1E 62 FC | 	wrlong	local01, fp
0ebf4     08 4E 85 F1 | 	sub	fp, #8
0ebf8     A7 12 02 F6 | 	mov	arg01, fp
0ebfc     28 6F B0 FD | 	call	#_converttoint
0ec00     FD 1E 52 F6 | 	abs	local01, result1 wc
0ec04     07 1E 06 F5 | 	and	local01, #7
0ec08     0F 1F 82 F6 | 	negc	local01, local01
0ec0c     0C 4E 05 F1 | 	add	fp, #12
0ec10     A7 1E 62 FC | 	wrlong	local01, fp
0ec14     37 00 00 FF 
0ec18     10 E4 05 F1 | 	add	objptr, ##28176
0ec1c     F2 12 02 FB | 	rdlong	arg01, objptr
0ec20     37 00 00 FF 
0ec24     10 E4 85 F1 | 	sub	objptr, ##28176
0ec28     06 1E 66 F0 | 	shl	local01, #6
0ec2c     0F 13 02 F1 | 	add	arg01, local01
0ec30     16 12 06 F1 | 	add	arg01, #22
0ec34     04 4E 05 F1 | 	add	fp, #4
0ec38     A7 14 02 FB | 	rdlong	arg02, fp
0ec3c     10 4E 85 F1 | 	sub	fp, #16
0ec40     09 15 52 FC | 	wrword	arg02, arg01
0ec44     A7 F0 03 F6 | 	mov	ptra, fp
0ec48     B2 00 A0 FD | 	call	#popregs_
0ec4c                 | _do_changepan_ret
0ec4c     2D 00 64 FD | 	ret
0ec50                 | 
0ec50                 | ' 
0ec50                 | ' sub do_changefreq
0ec50                 | _do_changefreq
0ec50     04 4A 05 F6 | 	mov	COUNT_, #4
0ec54     A8 00 A0 FD | 	call	#pushregs_
0ec58     28 F0 07 F1 | 	add	ptra, #40
0ec5c     F8 CD BF FD | 	call	#_pop
0ec60     FF 14 02 F6 | 	mov	arg02, result3
0ec64     A7 FA 61 FC | 	wrlong	result1, fp
0ec68     04 4E 05 F1 | 	add	fp, #4
0ec6c     A7 FC 61 FC | 	wrlong	result2, fp
0ec70     04 4E 05 F1 | 	add	fp, #4
0ec74     A7 14 62 FC | 	wrlong	arg02, fp
0ec78     08 4E 85 F1 | 	sub	fp, #8
0ec7c     A7 12 02 F6 | 	mov	arg01, fp
0ec80     60 6F B0 FD | 	call	#_converttofloat
0ec84     24 4E 05 F1 | 	add	fp, #36
0ec88     A7 FA 61 FC | 	wrlong	result1, fp
0ec8c     24 4E 85 F1 | 	sub	fp, #36
0ec90     FD 14 02 F6 | 	mov	arg02, result1
0ec94     FC 16 20 FF 
0ec98     54 12 06 F6 | 	mov	arg01, ##1076754516
0ec9c     DC 58 B1 FD | 	call	#__system____builtin_logbase
0eca0     FD 1E 02 F6 | 	mov	local01, result1
0eca4     1E 14 C6 F9 | 	decod	arg02, #30
0eca8     FC 16 20 FF 
0ecac     54 12 06 F6 | 	mov	arg01, ##1076754516
0ecb0     C8 58 B1 FD | 	call	#__system____builtin_logbase
0ecb4     FD 14 02 F6 | 	mov	arg02, result1
0ecb8     0F 13 02 F6 | 	mov	arg01, local01
0ecbc     14 4B B1 FD | 	call	#__system___float_div
0ecc0     FD 12 02 F6 | 	mov	arg01, result1
0ecc4     00 14 06 F6 | 	mov	arg02, #0
0ecc8     CC 4D B1 FD | 	call	#__system___float_tointeger
0eccc     10 4E 05 F1 | 	add	fp, #16
0ecd0     A7 FA 61 FC | 	wrlong	result1, fp
0ecd4     1E 1E C6 F9 | 	decod	local01, #30
0ecd8     FD 12 02 F6 | 	mov	arg01, result1
0ecdc     10 4E 85 F1 | 	sub	fp, #16
0ece0     05 12 06 F1 | 	add	arg01, #5
0ece4     09 13 52 F6 | 	abs	arg01, arg01 wc
0ece8     1F 20 C6 C9 |  if_b	decod	local02, #31
0ecec     00 20 06 36 |  if_ae	mov	local02, #0
0ecf0     D8 44 B1 FD | 	call	#__system___float_fromuns
0ecf4     10 FB 61 F5 | 	xor	result1, local02
0ecf8     FD 14 02 F6 | 	mov	arg02, result1
0ecfc     0F 13 02 F6 | 	mov	arg01, local01
0ed00     B0 57 B1 FD | 	call	#__system____builtin_powf
0ed04     FD 12 02 F6 | 	mov	arg01, result1
0ed08     01 14 06 F6 | 	mov	arg02, #1
0ed0c     88 4D B1 FD | 	call	#__system___float_tointeger
0ed10     14 4E 05 F1 | 	add	fp, #20
0ed14     A7 FA 61 FC | 	wrlong	result1, fp
0ed18                 | ' skip=round(2^(lfreq+5))
0ed18                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0ed18     14 4E 85 F1 | 	sub	fp, #20
0ed1c     40 00 00 FF 
0ed20     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0ed24     30 00 90 CD |  if_b	jmp	#LR__1190
0ed28     14 4E 05 F1 | 	add	fp, #20
0ed2c     A7 1E 02 FB | 	rdlong	local01, fp
0ed30     0F 1F 52 F6 | 	abs	local01, local01 wc
0ed34     0F 1E 46 F0 | 	shr	local01, #15
0ed38     0F 1F 82 F6 | 	negc	local01, local01
0ed3c     04 4E 05 F1 | 	add	fp, #4
0ed40     A7 1E 62 FC | 	wrlong	local01, fp
0ed44     04 4E 85 F1 | 	sub	fp, #4
0ed48     40 00 80 FF 
0ed4c     A7 00 68 FC | 	wrlong	##32768, fp
0ed50     14 4E 85 F1 | 	sub	fp, #20
0ed54     0C 00 90 FD | 	jmp	#LR__1191
0ed58                 | LR__1190
0ed58     18 4E 05 F1 | 	add	fp, #24
0ed5c     A7 02 68 FC | 	wrlong	#1, fp
0ed60     18 4E 85 F1 | 	sub	fp, #24
0ed64                 | LR__1191
0ed64     24 4E 05 F1 | 	add	fp, #36
0ed68     A7 14 02 FB | 	rdlong	arg02, fp
0ed6c     24 4E 85 F1 | 	sub	fp, #36
0ed70     3E 2C 25 FF 
0ed74     3C 12 06 F6 | 	mov	arg01, ##1247312956
0ed78     58 4A B1 FD | 	call	#__system___float_div
0ed7c     FD 1E 02 F6 | 	mov	local01, result1
0ed80     18 4E 05 F1 | 	add	fp, #24
0ed84     A7 12 02 FB | 	rdlong	arg01, fp
0ed88     18 4E 85 F1 | 	sub	fp, #24
0ed8c     09 13 52 F6 | 	abs	arg01, arg01 wc
0ed90     1F 20 C6 C9 |  if_b	decod	local02, #31
0ed94     00 20 06 36 |  if_ae	mov	local02, #0
0ed98     30 44 B1 FD | 	call	#__system___float_fromuns
0ed9c     10 FB 61 F5 | 	xor	result1, local02
0eda0     FD 22 02 F6 | 	mov	local03, result1
0eda4     1E 24 C6 F9 | 	decod	local04, #30
0eda8     0D 12 06 F6 | 	mov	arg01, #13
0edac     10 4E 05 F1 | 	add	fp, #16
0edb0     A7 14 02 FB | 	rdlong	arg02, fp
0edb4     10 4E 85 F1 | 	sub	fp, #16
0edb8     0A 13 82 F1 | 	sub	arg01, arg02
0edbc     09 13 52 F6 | 	abs	arg01, arg01 wc
0edc0     1F 20 C6 C9 |  if_b	decod	local02, #31
0edc4     00 20 06 36 |  if_ae	mov	local02, #0
0edc8     00 44 B1 FD | 	call	#__system___float_fromuns
0edcc     10 FB 61 F5 | 	xor	result1, local02
0edd0     FD 14 02 F6 | 	mov	arg02, result1
0edd4     12 13 02 F6 | 	mov	arg01, local04
0edd8     D8 56 B1 FD | 	call	#__system____builtin_powf
0eddc     FD 14 02 F6 | 	mov	arg02, result1
0ede0     11 13 02 F6 | 	mov	arg01, local03
0ede4     E8 47 B1 FD | 	call	#__system___float_mul
0ede8     FD 14 02 F6 | 	mov	arg02, result1
0edec     0F 13 02 F6 | 	mov	arg01, local01
0edf0     E0 49 B1 FD | 	call	#__system___float_div
0edf4     FD 12 02 F6 | 	mov	arg01, result1
0edf8     01 14 06 F6 | 	mov	arg02, #1
0edfc     98 4C B1 FD | 	call	#__system___float_tointeger
0ee00     FD 1E 02 F6 | 	mov	local01, result1
0ee04     1C 4E 05 F1 | 	add	fp, #28
0ee08     A7 1E 62 FC | 	wrlong	local01, fp
0ee0c     1C 4E 85 F1 | 	sub	fp, #28
0ee10     44 CC BF FD | 	call	#_pop
0ee14     FF 24 02 F6 | 	mov	local04, result3
0ee18     A7 FA 61 FC | 	wrlong	result1, fp
0ee1c     04 4E 05 F1 | 	add	fp, #4
0ee20     A7 FC 61 FC | 	wrlong	result2, fp
0ee24     04 4E 05 F1 | 	add	fp, #4
0ee28     A7 24 62 FC | 	wrlong	local04, fp
0ee2c     08 4E 85 F1 | 	sub	fp, #8
0ee30     A7 12 02 F6 | 	mov	arg01, fp
0ee34     F0 6C B0 FD | 	call	#_converttoint
0ee38     FD 22 52 F6 | 	abs	local03, result1 wc
0ee3c     07 22 06 F5 | 	and	local03, #7
0ee40     11 23 82 F6 | 	negc	local03, local03
0ee44     0C 4E 05 F1 | 	add	fp, #12
0ee48     A7 22 62 FC | 	wrlong	local03, fp
0ee4c     08 4E 05 F1 | 	add	fp, #8
0ee50     A7 14 02 FB | 	rdlong	arg02, fp
0ee54     10 14 66 F0 | 	shl	arg02, #16
0ee58     08 4E 05 F1 | 	add	fp, #8
0ee5c     A7 24 02 FB | 	rdlong	local04, fp
0ee60     12 15 02 F1 | 	add	arg02, local04
0ee64     04 4E 05 F1 | 	add	fp, #4
0ee68     A7 14 62 FC | 	wrlong	arg02, fp
0ee6c     37 00 00 FF 
0ee70     10 E4 05 F1 | 	add	objptr, ##28176
0ee74     F2 12 02 FB | 	rdlong	arg01, objptr
0ee78     37 00 00 FF 
0ee7c     10 E4 85 F1 | 	sub	objptr, ##28176
0ee80     14 4E 85 F1 | 	sub	fp, #20
0ee84     A7 24 02 FB | 	rdlong	local04, fp
0ee88     06 24 66 F0 | 	shl	local04, #6
0ee8c     12 13 02 F1 | 	add	arg01, local04
0ee90     18 12 06 F1 | 	add	arg01, #24
0ee94     0C 4E 85 F1 | 	sub	fp, #12
0ee98     09 15 62 FC | 	wrlong	arg02, arg01
0ee9c     A7 F0 03 F6 | 	mov	ptra, fp
0eea0     B2 00 A0 FD | 	call	#popregs_
0eea4                 | _do_changefreq_ret
0eea4     2D 00 64 FD | 	ret
0eea8                 | 
0eea8                 | ' 
0eea8                 | ' sub do_changewav
0eea8                 | _do_changewav
0eea8     00 4A 05 F6 | 	mov	COUNT_, #0
0eeac     A8 00 A0 FD | 	call	#pushregs_
0eeb0     14 F0 07 F1 | 	add	ptra, #20
0eeb4     A0 CB BF FD | 	call	#_pop
0eeb8     FF 14 02 F6 | 	mov	arg02, result3
0eebc     A7 FA 61 FC | 	wrlong	result1, fp
0eec0     04 4E 05 F1 | 	add	fp, #4
0eec4     A7 FC 61 FC | 	wrlong	result2, fp
0eec8     04 4E 05 F1 | 	add	fp, #4
0eecc     A7 14 62 FC | 	wrlong	arg02, fp
0eed0     08 4E 85 F1 | 	sub	fp, #8
0eed4     A7 12 02 F6 | 	mov	arg01, fp
0eed8     4C 6C B0 FD | 	call	#_converttoint
0eedc     10 4E 05 F1 | 	add	fp, #16
0eee0     A7 FA 61 FC | 	wrlong	result1, fp
0eee4                 | ' t1=pop()
0eee4                 | ' wave=converttoint(t1)
0eee4                 | ' if wave<0 then wave=0
0eee4     FD 14 02 F6 | 	mov	arg02, result1
0eee8     10 4E 85 F1 | 	sub	fp, #16
0eeec     00 14 56 F2 | 	cmps	arg02, #0 wc
0eef0     10 4E 05 C1 |  if_b	add	fp, #16
0eef4     A7 00 68 CC |  if_b	wrlong	#0, fp
0eef8     10 4E 85 C1 |  if_b	sub	fp, #16
0eefc     58 CB BF FD | 	call	#_pop
0ef00     FF 14 02 F6 | 	mov	arg02, result3
0ef04     A7 FA 61 FC | 	wrlong	result1, fp
0ef08     04 4E 05 F1 | 	add	fp, #4
0ef0c     A7 FC 61 FC | 	wrlong	result2, fp
0ef10     04 4E 05 F1 | 	add	fp, #4
0ef14     A7 14 62 FC | 	wrlong	arg02, fp
0ef18     08 4E 85 F1 | 	sub	fp, #8
0ef1c     A7 12 02 F6 | 	mov	arg01, fp
0ef20     04 6C B0 FD | 	call	#_converttoint
0ef24     FD 14 52 F6 | 	abs	arg02, result1 wc
0ef28     07 14 06 F5 | 	and	arg02, #7
0ef2c     0A 15 82 F6 | 	negc	arg02, arg02
0ef30     0C 4E 05 F1 | 	add	fp, #12
0ef34     A7 14 62 FC | 	wrlong	arg02, fp
0ef38                 | ' if wave <32 then 
0ef38     04 4E 05 F1 | 	add	fp, #4
0ef3c     A7 14 02 FB | 	rdlong	arg02, fp
0ef40     10 4E 85 F1 | 	sub	fp, #16
0ef44     20 14 56 F2 | 	cmps	arg02, #32 wc
0ef48     48 00 90 3D |  if_ae	jmp	#LR__1200
0ef4c     37 00 00 FF 
0ef50     10 E4 05 F1 | 	add	objptr, ##28176
0ef54     F2 12 02 FB | 	rdlong	arg01, objptr
0ef58     37 00 00 FF 
0ef5c     10 E4 85 F1 | 	sub	objptr, ##28176
0ef60     0C 4E 05 F1 | 	add	fp, #12
0ef64     A7 14 02 FB | 	rdlong	arg02, fp
0ef68     06 14 66 F0 | 	shl	arg02, #6
0ef6c     0A 13 02 F1 | 	add	arg01, arg02
0ef70     08 12 06 F1 | 	add	arg01, #8
0ef74     04 4E 05 F1 | 	add	fp, #4
0ef78     A7 14 02 FB | 	rdlong	arg02, fp
0ef7c     10 4E 85 F1 | 	sub	fp, #16
0ef80     0B 14 66 F0 | 	shl	arg02, #11
0ef84     00 00 60 FF 
0ef88     00 14 06 F1 | 	add	arg02, ##-1073741824
0ef8c     09 15 62 FC | 	wrlong	arg02, arg01
0ef90     34 00 90 FD | 	jmp	#LR__1201
0ef94                 | LR__1200
0ef94     37 00 00 FF 
0ef98     10 E4 05 F1 | 	add	objptr, ##28176
0ef9c     F2 12 02 FB | 	rdlong	arg01, objptr
0efa0     37 00 00 FF 
0efa4     10 E4 85 F1 | 	sub	objptr, ##28176
0efa8     0C 4E 05 F1 | 	add	fp, #12
0efac     A7 14 02 FB | 	rdlong	arg02, fp
0efb0     0C 4E 85 F1 | 	sub	fp, #12
0efb4     06 14 66 F0 | 	shl	arg02, #6
0efb8     0A 13 02 F1 | 	add	arg01, arg02
0efbc     08 12 06 F1 | 	add	arg01, #8
0efc0     00 00 E4 FF 
0efc4     09 01 68 FC | 	wrlong	##-939524096, arg01
0efc8                 | LR__1201
0efc8     A7 F0 03 F6 | 	mov	ptra, fp
0efcc     B2 00 A0 FD | 	call	#popregs_
0efd0                 | _do_changewav_ret
0efd0     2D 00 64 FD | 	ret
0efd4                 | 
0efd4                 | ' 
0efd4                 | ' 
0efd4                 | ' sub do_shutup
0efd4                 | _do_shutup
0efd4     03 4A 05 F6 | 	mov	COUNT_, #3
0efd8     A8 00 A0 FD | 	call	#pushregs_
0efdc     18 F0 07 F1 | 	add	ptra, #24
0efe0     4A 00 00 FF 
0efe4     80 E4 05 F1 | 	add	objptr, ##38016
0efe8     F2 1E 02 FB | 	rdlong	local01, objptr
0efec     0F 21 02 F6 | 	mov	local02, local01
0eff0     01 20 66 F0 | 	shl	local02, #1
0eff4     0F 21 02 F1 | 	add	local02, local01
0eff8     02 20 66 F0 | 	shl	local02, #2
0effc     03 00 00 FF 
0f000     04 E4 85 F1 | 	sub	objptr, ##1540
0f004     F2 20 02 F1 | 	add	local02, objptr
0f008     10 23 0A FB | 	rdlong	local03, local02 wz
0f00c     14 4E 05 F1 | 	add	fp, #20
0f010     A7 22 62 FC | 	wrlong	local03, fp
0f014                 | ' 
0f014                 | ' numpar=compiledline(lineptr_e).result.uresult
0f014                 | ' if numpar=0 then
0f014     14 4E 85 F1 | 	sub	fp, #20
0f018     47 00 00 FF 
0f01c     7C E4 85 F1 | 	sub	objptr, ##36476
0f020     50 00 90 5D |  if_ne	jmp	#LR__1212
0f024                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
0f024     10 4E 05 F1 | 	add	fp, #16
0f028     A7 00 68 FC | 	wrlong	#0, fp
0f02c     37 00 00 FF 
0f030     10 E4 05 F1 | 	add	objptr, ##28176
0f034     97 16 48 FB | 	callpa	#(@LR__1211-@LR__1210)>>2,fcache_load_ptr_
0f038                 | LR__1210
0f038     F2 12 02 FB | 	rdlong	arg01, objptr
0f03c     A7 22 02 FB | 	rdlong	local03, fp
0f040     06 22 66 F0 | 	shl	local03, #6
0f044     11 13 02 F1 | 	add	arg01, local03
0f048     14 12 06 F1 | 	add	arg01, #20
0f04c     09 01 58 FC | 	wrword	#0, arg01
0f050     A7 22 02 FB | 	rdlong	local03, fp
0f054     01 22 06 F1 | 	add	local03, #1
0f058     A7 22 62 FC | 	wrlong	local03, fp
0f05c     08 22 56 F2 | 	cmps	local03, #8 wc
0f060     D4 FF 9F CD |  if_b	jmp	#LR__1210
0f064                 | LR__1211
0f064     37 00 00 FF 
0f068     10 E4 85 F1 | 	sub	objptr, ##28176
0f06c     10 4E 85 F1 | 	sub	fp, #16
0f070     64 00 90 FD | 	jmp	#LR__1213
0f074                 | LR__1212
0f074     E0 C9 BF FD | 	call	#_pop
0f078     FF 1E 02 F6 | 	mov	local01, result3
0f07c     A7 FA 61 FC | 	wrlong	result1, fp
0f080     04 4E 05 F1 | 	add	fp, #4
0f084     A7 FC 61 FC | 	wrlong	result2, fp
0f088     04 4E 05 F1 | 	add	fp, #4
0f08c     A7 1E 62 FC | 	wrlong	local01, fp
0f090     08 4E 85 F1 | 	sub	fp, #8
0f094     A7 12 02 F6 | 	mov	arg01, fp
0f098     8C 6A B0 FD | 	call	#_converttoint
0f09c     FD 22 52 F6 | 	abs	local03, result1 wc
0f0a0     07 22 06 F5 | 	and	local03, #7
0f0a4     11 21 82 F6 | 	negc	local02, local03
0f0a8     0C 4E 05 F1 | 	add	fp, #12
0f0ac     A7 20 62 FC | 	wrlong	local02, fp
0f0b0     37 00 00 FF 
0f0b4     10 E4 05 F1 | 	add	objptr, ##28176
0f0b8     F2 12 02 FB | 	rdlong	arg01, objptr
0f0bc     37 00 00 FF 
0f0c0     10 E4 85 F1 | 	sub	objptr, ##28176
0f0c4     0C 4E 85 F1 | 	sub	fp, #12
0f0c8     06 20 66 F0 | 	shl	local02, #6
0f0cc     10 13 02 F1 | 	add	arg01, local02
0f0d0     14 12 06 F1 | 	add	arg01, #20
0f0d4     09 01 58 FC | 	wrword	#0, arg01
0f0d8                 | LR__1213
0f0d8     A7 F0 03 F6 | 	mov	ptra, fp
0f0dc     B2 00 A0 FD | 	call	#popregs_
0f0e0                 | _do_shutup_ret
0f0e0     2D 00 64 FD | 	ret
0f0e4                 | 
0f0e4                 | ' 
0f0e4                 | ' 
0f0e4                 | ' sub do_release
0f0e4                 | _do_release
0f0e4     00 4A 05 F6 | 	mov	COUNT_, #0
0f0e8     A8 00 A0 FD | 	call	#pushregs_
0f0ec     10 F0 07 F1 | 	add	ptra, #16
0f0f0     64 C9 BF FD | 	call	#_pop
0f0f4     FF 14 02 F6 | 	mov	arg02, result3
0f0f8     A7 FA 61 FC | 	wrlong	result1, fp
0f0fc     04 4E 05 F1 | 	add	fp, #4
0f100     A7 FC 61 FC | 	wrlong	result2, fp
0f104     04 4E 05 F1 | 	add	fp, #4
0f108     A7 14 62 FC | 	wrlong	arg02, fp
0f10c     08 4E 85 F1 | 	sub	fp, #8
0f110     A7 12 02 F6 | 	mov	arg01, fp
0f114     10 6A B0 FD | 	call	#_converttoint
0f118     0C 4E 05 F1 | 	add	fp, #12
0f11c     A7 FA 61 FC | 	wrlong	result1, fp
0f120                 | ' t1=pop()
0f120                 | ' channel=converttoint(t1)
0f120                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255 ' else printerror
0f120     0C 4E 85 F1 | 	sub	fp, #12
0f124     00 FA 55 F2 | 	cmps	result1, #0 wc
0f128     44 00 90 CD |  if_b	jmp	#LR__1220
0f12c     0C 4E 05 F1 | 	add	fp, #12
0f130     A7 14 02 FB | 	rdlong	arg02, fp
0f134     0C 4E 85 F1 | 	sub	fp, #12
0f138     08 14 56 F2 | 	cmps	arg02, #8 wc
0f13c     30 00 90 3D |  if_ae	jmp	#LR__1220
0f140     37 00 00 FF 
0f144     10 E4 05 F1 | 	add	objptr, ##28176
0f148     F2 12 02 FB | 	rdlong	arg01, objptr
0f14c     37 00 00 FF 
0f150     10 E4 85 F1 | 	sub	objptr, ##28176
0f154     0C 4E 05 F1 | 	add	fp, #12
0f158     A7 14 02 FB | 	rdlong	arg02, fp
0f15c     0C 4E 85 F1 | 	sub	fp, #12
0f160     06 14 66 F0 | 	shl	arg02, #6
0f164     0A 13 02 F1 | 	add	arg01, arg02
0f168     2C 12 06 F1 | 	add	arg01, #44
0f16c     09 FF 69 FC | 	wrlong	#255, arg01
0f170                 | LR__1220
0f170     A7 F0 03 F6 | 	mov	ptra, fp
0f174     B2 00 A0 FD | 	call	#popregs_
0f178                 | _do_release_ret
0f178     2D 00 64 FD | 	ret
0f17c                 | 
0f17c                 | ' 
0f17c                 | ' 
0f17c                 | ' sub do_defsnd
0f17c                 | _do_defsnd
0f17c     04 4A 05 F6 | 	mov	COUNT_, #4
0f180     A8 00 A0 FD | 	call	#pushregs_
0f184     88 F0 07 F1 | 	add	ptra, #136
0f188     4A 00 00 FF 
0f18c     80 E4 05 F1 | 	add	objptr, ##38016
0f190     F2 1A 02 FB | 	rdlong	arg05, objptr
0f194     0D 19 02 F6 | 	mov	arg04, arg05
0f198     01 18 66 F0 | 	shl	arg04, #1
0f19c     0D 19 02 F1 | 	add	arg04, arg05
0f1a0     02 18 66 F0 | 	shl	arg04, #2
0f1a4     03 00 00 FF 
0f1a8     04 E4 85 F1 | 	sub	objptr, ##1540
0f1ac     F2 18 02 F1 | 	add	arg04, objptr
0f1b0     0C 1B 02 FB | 	rdlong	arg05, arg04
0f1b4     A7 1A 62 FC | 	wrlong	arg05, fp
0f1b8                 | ' 
0f1b8                 | ' numpar=compiledline(lineptr_e).result.uresult
0f1b8                 | ' 
0f1b8                 | ' 
0f1b8                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0f1b8                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0f1b8                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0f1b8                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0f1b8                 | ' 
0f1b8                 | ' if numpar<2 then return
0f1b8     02 1A 56 F2 | 	cmps	arg05, #2 wc
0f1bc     47 00 00 FF 
0f1c0     7C E4 85 F1 | 	sub	objptr, ##36476
0f1c4     94 08 90 CD |  if_b	jmp	#LR__1253
0f1c8                 | ' 
0f1c8                 | '   
0f1c8                 | ' if numpar=2 then
0f1c8     A7 1A 02 FB | 	rdlong	arg05, fp
0f1cc     02 1A 0E F2 | 	cmp	arg05, #2 wz
0f1d0     A0 03 90 5D |  if_ne	jmp	#LR__1240
0f1d4     80 C8 BF FD | 	call	#_pop
0f1d8     FF 1A 02 F6 | 	mov	arg05, result3
0f1dc     2C 4E 05 F1 | 	add	fp, #44
0f1e0     A7 FA 61 FC | 	wrlong	result1, fp
0f1e4     04 4E 05 F1 | 	add	fp, #4
0f1e8     A7 FC 61 FC | 	wrlong	result2, fp
0f1ec     04 4E 05 F1 | 	add	fp, #4
0f1f0     A7 1A 62 FC | 	wrlong	arg05, fp
0f1f4                 | '   t1=pop()
0f1f4                 | '   if t1.result_type=result_string2 then 
0f1f4     34 4E 85 F1 | 	sub	fp, #52
0f1f8     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0f1fc     20 00 90 5D |  if_ne	jmp	#LR__1230
0f200     2C 4E 05 F1 | 	add	fp, #44
0f204     A7 12 02 FB | 	rdlong	arg01, fp
0f208     2C 4E 85 F1 | 	sub	fp, #44
0f20c     F4 20 B0 FD | 	call	#_convertstring
0f210     38 4E 05 F1 | 	add	fp, #56
0f214     A7 FA 61 FC | 	wrlong	result1, fp
0f218     38 4E 85 F1 | 	sub	fp, #56
0f21c     58 00 90 FD | 	jmp	#LR__1233
0f220                 | LR__1230
0f220     34 4E 05 F1 | 	add	fp, #52
0f224     A7 1A 02 FB | 	rdlong	arg05, fp
0f228     34 4E 85 F1 | 	sub	fp, #52
0f22c     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0f230     18 00 90 5D |  if_ne	jmp	#LR__1231
0f234     2C 4E 05 F1 | 	add	fp, #44
0f238     A7 1A 02 FB | 	rdlong	arg05, fp
0f23c     0C 4E 05 F1 | 	add	fp, #12
0f240     A7 1A 62 FC | 	wrlong	arg05, fp
0f244     38 4E 85 F1 | 	sub	fp, #56
0f248     2C 00 90 FD | 	jmp	#LR__1232
0f24c                 | LR__1231
0f24c     84 01 00 FF 
0f250     65 1B 06 F6 | 	mov	arg05, ##@LR__5455
0f254     38 4E 05 F1 | 	add	fp, #56
0f258     A7 1A 62 FC | 	wrlong	arg05, fp
0f25c     0C 4E 85 F1 | 	sub	fp, #12
0f260     A7 12 02 F6 | 	mov	arg01, fp
0f264     2C 4E 85 F1 | 	sub	fp, #44
0f268     BC 68 B0 FD | 	call	#_converttoint
0f26c     14 4E 05 F1 | 	add	fp, #20
0f270     A7 FA 61 FC | 	wrlong	result1, fp
0f274     14 4E 85 F1 | 	sub	fp, #20
0f278                 | LR__1232
0f278                 | LR__1233
0f278                 | ' 
0f278                 | '     
0f278                 | '   if s<>"" then 
0f278     38 4E 05 F1 | 	add	fp, #56
0f27c     A7 12 02 FB | 	rdlong	arg01, fp
0f280     38 4E 85 F1 | 	sub	fp, #56
0f284     84 01 00 FF 
0f288     66 15 06 F6 | 	mov	arg02, ##@LR__5456
0f28c     B4 17 B1 FD | 	call	#__system___string_cmp
0f290     00 FA 0D F2 | 	cmp	result1, #0 wz
0f294     E0 01 90 AD |  if_e	jmp	#LR__1236
0f298     BC C7 BF FD | 	call	#_pop
0f29c     FF 1A 02 F6 | 	mov	arg05, result3
0f2a0     2C 4E 05 F1 | 	add	fp, #44
0f2a4     A7 FA 61 FC | 	wrlong	result1, fp
0f2a8     04 4E 05 F1 | 	add	fp, #4
0f2ac     A7 FC 61 FC | 	wrlong	result2, fp
0f2b0     04 4E 05 F1 | 	add	fp, #4
0f2b4     A7 1A 62 FC | 	wrlong	arg05, fp
0f2b8     08 4E 85 F1 | 	sub	fp, #8
0f2bc     A7 12 02 F6 | 	mov	arg01, fp
0f2c0     2C 4E 85 F1 | 	sub	fp, #44
0f2c4     60 68 B0 FD | 	call	#_converttoint
0f2c8     10 4E 05 F1 | 	add	fp, #16
0f2cc     A7 FA 61 FC | 	wrlong	result1, fp
0f2d0                 | '     t1=pop()
0f2d0                 | '     channel=converttoint(t1) : if channel>31 then return
0f2d0     FD 1A 02 F6 | 	mov	arg05, result1
0f2d4     10 4E 85 F1 | 	sub	fp, #16
0f2d8     20 1A 56 F2 | 	cmps	arg05, #32 wc
0f2dc     7C 07 90 3D |  if_ae	jmp	#LR__1253
0f2e0                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0f2e0     09 12 06 F6 | 	mov	arg01, #9
0f2e4     A4 67 B1 FD | 	call	#__system__close
0f2e8     09 1E 06 F6 | 	mov	local01, #9
0f2ec     84 01 00 FF 
0f2f0     67 13 06 F6 | 	mov	arg01, ##@LR__5457
0f2f4     38 4E 05 F1 | 	add	fp, #56
0f2f8     A7 14 02 FB | 	rdlong	arg02, fp
0f2fc     38 4E 85 F1 | 	sub	fp, #56
0f300     74 17 B1 FD | 	call	#__system___string_concat
0f304     FD 14 02 F6 | 	mov	arg02, result1
0f308     0F 13 02 F6 | 	mov	arg01, local01
0f30c     00 16 06 F6 | 	mov	arg03, #0
0f310     0C 23 B1 FD | 	call	#__system___basic_open_string
0f314     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0f318     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0f31c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0f320     52 00 00 FF 
0f324     14 E4 05 F1 | 	add	objptr, ##42004
0f328     F2 FA 61 FC | 	wrlong	result1, objptr
0f32c                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0f32c     52 00 00 FF 
0f330     14 E4 85 F1 | 	sub	objptr, ##42004
0f334     B0 00 90 AD |  if_e	jmp	#LR__1234
0f338     00 12 06 F6 | 	mov	arg01, #0
0f33c     1C 71 B1 FD | 	call	#__system___getiolock_0540
0f340     FD 12 02 F6 | 	mov	arg01, result1
0f344     D4 16 B1 FD | 	call	#__system___lockmem
0f348     84 01 00 FF 
0f34c     74 15 06 F6 | 	mov	arg02, ##@LR__5458
0f350     00 12 06 F6 | 	mov	arg01, #0
0f354     00 16 06 F6 | 	mov	arg03, #0
0f358     B4 23 B1 FD | 	call	#__system___basic_print_string
0f35c     52 00 00 FF 
0f360     14 E4 05 F1 | 	add	objptr, ##42004
0f364     F2 14 02 FB | 	rdlong	arg02, objptr
0f368     52 00 00 FF 
0f36c     14 E4 85 F1 | 	sub	objptr, ##42004
0f370     00 12 06 F6 | 	mov	arg01, #0
0f374     00 16 06 F6 | 	mov	arg03, #0
0f378     0A 18 06 F6 | 	mov	arg04, #10
0f37c     D4 23 B1 FD | 	call	#__system___basic_print_integer
0f380     84 01 00 FF 
0f384     82 15 06 F6 | 	mov	arg02, ##@LR__5459
0f388     00 12 06 F6 | 	mov	arg01, #0
0f38c     00 16 06 F6 | 	mov	arg03, #0
0f390     7C 23 B1 FD | 	call	#__system___basic_print_string
0f394     00 1E 06 F6 | 	mov	local01, #0
0f398     52 00 00 FF 
0f39c     14 E4 05 F1 | 	add	objptr, ##42004
0f3a0     F2 12 02 FB | 	rdlong	arg01, objptr
0f3a4     52 00 00 FF 
0f3a8     14 E4 85 F1 | 	sub	objptr, ##42004
0f3ac     34 3D B1 FD | 	call	#__system___strerror
0f3b0     FD 14 02 F6 | 	mov	arg02, result1
0f3b4     0F 13 02 F6 | 	mov	arg01, local01
0f3b8     00 16 06 F6 | 	mov	arg03, #0
0f3bc     50 23 B1 FD | 	call	#__system___basic_print_string
0f3c0     00 12 06 F6 | 	mov	arg01, #0
0f3c4     0A 14 06 F6 | 	mov	arg02, #10
0f3c8     00 16 06 F6 | 	mov	arg03, #0
0f3cc     E8 22 B1 FD | 	call	#__system___basic_print_char
0f3d0     00 12 06 F6 | 	mov	arg01, #0
0f3d4     84 70 B1 FD | 	call	#__system___getiolock_0540
0f3d8     FD 00 68 FC | 	wrlong	#0, result1
0f3dc     09 12 06 F6 | 	mov	arg01, #9
0f3e0     A8 66 B1 FD | 	call	#__system__close
0f3e4     74 06 90 FD | 	jmp	#LR__1253
0f3e8                 | LR__1234
0f3e8                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
0f3e8     04 4E 05 F1 | 	add	fp, #4
0f3ec     A7 00 68 FC | 	wrlong	#0, fp
0f3f0                 | LR__1235
0f3f0     A7 1E 02 FB | 	rdlong	local01, fp
0f3f4     01 1E 66 F0 | 	shl	local01, #1
0f3f8     11 14 06 F6 | 	mov	arg02, #17
0f3fc     0F 15 02 F1 | 	add	arg02, local01
0f400     78 4E 05 F1 | 	add	fp, #120
0f404     A7 16 02 F6 | 	mov	arg03, fp
0f408     7C 4E 85 F1 | 	sub	fp, #124
0f40c     09 12 06 F6 | 	mov	arg01, #9
0f410     01 18 06 F6 | 	mov	arg04, #1
0f414     02 1A 06 F6 | 	mov	arg05, #2
0f418     70 24 B1 FD | 	call	#__system___basic_get
0f41c     10 4E 05 F1 | 	add	fp, #16
0f420     A7 12 02 FB | 	rdlong	arg01, fp
0f424     0B 12 66 F0 | 	shl	arg01, #11
0f428     0C 4E 85 F1 | 	sub	fp, #12
0f42c     A7 1E 02 FB | 	rdlong	local01, fp
0f430     01 1E 66 F0 | 	shl	local01, #1
0f434     0F 13 02 F1 | 	add	arg01, local01
0f438     78 4E 05 F1 | 	add	fp, #120
0f43c     A7 14 E2 FA | 	rdword	arg02, fp
0f440     7C 4E 85 F1 | 	sub	fp, #124
0f444     0F 14 66 F7 | 	signx	arg02, #15
0f448     E4 E1 B0 FD | 	call	#_psdpoke
0f44c     04 4E 05 F1 | 	add	fp, #4
0f450     A7 1E 02 FB | 	rdlong	local01, fp
0f454     01 1E 06 F1 | 	add	local01, #1
0f458     A7 1E 62 FC | 	wrlong	local01, fp
0f45c     02 00 00 FF 
0f460     01 1E 56 F2 | 	cmps	local01, ##1025 wc
0f464     88 FF 9F CD |  if_b	jmp	#LR__1235
0f468     04 4E 85 F1 | 	sub	fp, #4
0f46c                 | '     close #9
0f46c     09 12 06 F6 | 	mov	arg01, #9
0f470     18 66 B1 FD | 	call	#__system__close
0f474                 | '                                                                        'for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0f474                 | '     return
0f474     E4 05 90 FD | 	jmp	#LR__1253
0f478                 | LR__1236
0f478                 | '     if wptr < ($80000 - 2048) then 
0f478     14 4E 05 F1 | 	add	fp, #20
0f47c     A7 1E 02 FB | 	rdlong	local01, fp
0f480     14 4E 85 F1 | 	sub	fp, #20
0f484     FC 03 00 FF 
0f488     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0f48c     70 00 90 3D |  if_ae	jmp	#LR__1238
0f490                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
0f490     04 4E 05 F1 | 	add	fp, #4
0f494     A7 00 68 FC | 	wrlong	#0, fp
0f498     04 4E 85 F1 | 	sub	fp, #4
0f49c                 | LR__1237
0f49c     10 4E 05 F1 | 	add	fp, #16
0f4a0     A7 1E 02 FB | 	rdlong	local01, fp
0f4a4     0B 1E 66 F0 | 	shl	local01, #11
0f4a8     0C 4E 85 F1 | 	sub	fp, #12
0f4ac     A7 1A 02 FB | 	rdlong	arg05, fp
0f4b0     0D 19 02 F6 | 	mov	arg04, arg05
0f4b4     01 18 66 F0 | 	shl	arg04, #1
0f4b8     0C 1F 02 F1 | 	add	local01, arg04
0f4bc     10 4E 05 F1 | 	add	fp, #16
0f4c0     A7 12 02 FB | 	rdlong	arg01, fp
0f4c4     14 4E 85 F1 | 	sub	fp, #20
0f4c8     01 1A 66 F0 | 	shl	arg05, #1
0f4cc     0D 13 02 F1 | 	add	arg01, arg05
0f4d0     09 15 E2 FA | 	rdword	arg02, arg01
0f4d4     0F 13 02 F6 | 	mov	arg01, local01
0f4d8     54 E1 B0 FD | 	call	#_psdpoke
0f4dc     04 4E 05 F1 | 	add	fp, #4
0f4e0     A7 1E 02 FB | 	rdlong	local01, fp
0f4e4     01 1E 06 F1 | 	add	local01, #1
0f4e8     A7 1E 62 FC | 	wrlong	local01, fp
0f4ec     04 4E 85 F1 | 	sub	fp, #4
0f4f0     02 00 00 FF 
0f4f4     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0f4f8     A0 FF 9F CD |  if_b	jmp	#LR__1237
0f4fc     5C 05 90 FD | 	jmp	#LR__1253
0f500                 | LR__1238
0f500                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
0f500     04 4E 05 F1 | 	add	fp, #4
0f504     A7 00 68 FC | 	wrlong	#0, fp
0f508     04 4E 85 F1 | 	sub	fp, #4
0f50c                 | LR__1239
0f50c     10 4E 05 F1 | 	add	fp, #16
0f510     A7 1E 02 FB | 	rdlong	local01, fp
0f514     0B 1E 66 F0 | 	shl	local01, #11
0f518     0C 4E 85 F1 | 	sub	fp, #12
0f51c     A7 1A 02 FB | 	rdlong	arg05, fp
0f520     0D 19 02 F6 | 	mov	arg04, arg05
0f524     01 18 66 F0 | 	shl	arg04, #1
0f528     0C 1F 02 F1 | 	add	local01, arg04
0f52c     10 4E 05 F1 | 	add	fp, #16
0f530     A7 12 02 FB | 	rdlong	arg01, fp
0f534     14 4E 85 F1 | 	sub	fp, #20
0f538     01 1A 66 F0 | 	shl	arg05, #1
0f53c     0D 13 02 F1 | 	add	arg01, arg05
0f540     2C E2 B0 FD | 	call	#_psdpeek
0f544     FD 14 02 F6 | 	mov	arg02, result1
0f548     0F 13 02 F6 | 	mov	arg01, local01
0f54c     E0 E0 B0 FD | 	call	#_psdpoke
0f550     04 4E 05 F1 | 	add	fp, #4
0f554     A7 1E 02 FB | 	rdlong	local01, fp
0f558     01 1E 06 F1 | 	add	local01, #1
0f55c     A7 1E 62 FC | 	wrlong	local01, fp
0f560     04 4E 85 F1 | 	sub	fp, #4
0f564     02 00 00 FF 
0f568     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0f56c     9C FF 9F CD |  if_b	jmp	#LR__1239
0f570                 | '     return 
0f570     E8 04 90 FD | 	jmp	#LR__1253
0f574                 | '   
0f574                 | '                                                                         '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0f574                 | '   return
0f574                 | LR__1240
0f574                 | ' for i=0 to 15 : harm(i)=0: next i  
0f574     04 4E 05 F1 | 	add	fp, #4
0f578     A7 00 68 FC | 	wrlong	#0, fp
0f57c     97 16 48 FB | 	callpa	#(@LR__1242-@LR__1241)>>2,fcache_load_ptr_
0f580                 | LR__1241
0f580     A7 1E 02 FB | 	rdlong	local01, fp
0f584     02 1E 66 F0 | 	shl	local01, #2
0f588     38 4E 05 F1 | 	add	fp, #56
0f58c     A7 1E 02 F1 | 	add	local01, fp
0f590     0F 01 68 FC | 	wrlong	#0, local01
0f594     38 4E 85 F1 | 	sub	fp, #56
0f598     A7 1E 02 FB | 	rdlong	local01, fp
0f59c     01 1E 06 F1 | 	add	local01, #1
0f5a0     A7 1E 62 FC | 	wrlong	local01, fp
0f5a4     10 1E 56 F2 | 	cmps	local01, #16 wc
0f5a8     D4 FF 9F CD |  if_b	jmp	#LR__1241
0f5ac                 | LR__1242
0f5ac     04 4E 85 F1 | 	sub	fp, #4
0f5b0                 | ' for i=numpar to 2 step -1 
0f5b0     A7 1E 02 FB | 	rdlong	local01, fp
0f5b4     04 4E 05 F1 | 	add	fp, #4
0f5b8     A7 1E 62 FC | 	wrlong	local01, fp
0f5bc     04 4E 85 F1 | 	sub	fp, #4
0f5c0                 | LR__1243
0f5c0     94 C4 BF FD | 	call	#_pop
0f5c4     2C 4E 05 F1 | 	add	fp, #44
0f5c8     A7 FA 61 FC | 	wrlong	result1, fp
0f5cc     04 4E 05 F1 | 	add	fp, #4
0f5d0     A7 FC 61 FC | 	wrlong	result2, fp
0f5d4     04 4E 05 F1 | 	add	fp, #4
0f5d8     A7 FE 61 FC | 	wrlong	result3, fp
0f5dc     30 4E 85 F1 | 	sub	fp, #48
0f5e0     A7 1E 02 FB | 	rdlong	local01, fp
0f5e4     02 1E 86 F1 | 	sub	local01, #2
0f5e8     02 1E 66 F0 | 	shl	local01, #2
0f5ec     38 4E 05 F1 | 	add	fp, #56
0f5f0     A7 1E 02 F1 | 	add	local01, fp
0f5f4     10 4E 85 F1 | 	sub	fp, #16
0f5f8     A7 12 02 F6 | 	mov	arg01, fp
0f5fc     2C 4E 85 F1 | 	sub	fp, #44
0f600     E0 65 B0 FD | 	call	#_converttofloat
0f604     0F FB 61 FC | 	wrlong	result1, local01
0f608     04 4E 05 F1 | 	add	fp, #4
0f60c     A7 1E 02 FB | 	rdlong	local01, fp
0f610     01 1E 86 F1 | 	sub	local01, #1
0f614     A7 1E 62 FC | 	wrlong	local01, fp
0f618     04 4E 85 F1 | 	sub	fp, #4
0f61c     02 1E 56 F2 | 	cmps	local01, #2 wc
0f620     9C FF 9F 3D |  if_ae	jmp	#LR__1243
0f624     30 C4 BF FD | 	call	#_pop
0f628     FF 1E 02 F6 | 	mov	local01, result3
0f62c     2C 4E 05 F1 | 	add	fp, #44
0f630     A7 FA 61 FC | 	wrlong	result1, fp
0f634     04 4E 05 F1 | 	add	fp, #4
0f638     A7 FC 61 FC | 	wrlong	result2, fp
0f63c     04 4E 05 F1 | 	add	fp, #4
0f640     A7 1E 62 FC | 	wrlong	local01, fp
0f644     08 4E 85 F1 | 	sub	fp, #8
0f648     A7 12 02 F6 | 	mov	arg01, fp
0f64c     2C 4E 85 F1 | 	sub	fp, #44
0f650     D4 64 B0 FD | 	call	#_converttoint
0f654     10 4E 05 F1 | 	add	fp, #16
0f658     A7 FA 61 FC | 	wrlong	result1, fp
0f65c                 | ' t1=pop()
0f65c                 | ' channel=converttoint(t1) : : if channel>31 then return
0f65c     FD 1E 02 F6 | 	mov	local01, result1
0f660     10 4E 85 F1 | 	sub	fp, #16
0f664     20 1E 56 F2 | 	cmps	local01, #32 wc
0f668     F0 03 90 3D |  if_ae	jmp	#LR__1253
0f66c     20 4E 05 F1 | 	add	fp, #32
0f670     A7 00 68 FC | 	wrlong	#0, fp
0f674                 | ' max=0
0f674                 | ' if harm(0)<0 then
0f674     1C 4E 05 F1 | 	add	fp, #28
0f678     A7 12 02 FB | 	rdlong	arg01, fp
0f67c     3C 4E 85 F1 | 	sub	fp, #60
0f680     00 14 06 F6 | 	mov	arg02, #0
0f684     01 16 06 F6 | 	mov	arg03, #1
0f688     78 43 B1 FD | 	call	#__system___float_cmp
0f68c     00 FA 55 F2 | 	cmps	result1, #0 wc
0f690     04 01 90 3D |  if_ae	jmp	#LR__1246
0f694     3C 4E 05 F1 | 	add	fp, #60
0f698     A7 FA 01 FB | 	rdlong	result1, fp
0f69c     1F FA 05 F4 | 	bitl	result1, #31
0f6a0     24 4E 85 F1 | 	sub	fp, #36
0f6a4     A7 FA 61 FC | 	wrlong	result1, fp
0f6a8     28 4E 05 F1 | 	add	fp, #40
0f6ac     A7 FA 01 FB | 	rdlong	result1, fp
0f6b0     1F FA 05 F4 | 	bitl	result1, #31
0f6b4     24 4E 85 F1 | 	sub	fp, #36
0f6b8     A7 FA 61 FC | 	wrlong	result1, fp
0f6bc     20 4E 05 F1 | 	add	fp, #32
0f6c0     00 C0 9F FF 
0f6c4     A7 00 68 FC | 	wrlong	##1065353216, fp
0f6c8     24 4E 85 F1 | 	sub	fp, #36
0f6cc     A7 1E 02 FB | 	rdlong	local01, fp
0f6d0     28 4E 05 F1 | 	add	fp, #40
0f6d4     A7 1E 62 FC | 	wrlong	local01, fp
0f6d8     24 4E 85 F1 | 	sub	fp, #36
0f6dc     A7 1E 02 FB | 	rdlong	local01, fp
0f6e0     28 4E 05 F1 | 	add	fp, #40
0f6e4     A7 1E 62 FC | 	wrlong	local01, fp
0f6e8                 | '   harm(0)=1
0f6e8                 | '   harm(1)=even
0f6e8                 | '   harm(2)=odd
0f6e8                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0f6e8     40 4E 85 F1 | 	sub	fp, #64
0f6ec     A7 06 68 FC | 	wrlong	#3, fp
0f6f0                 | LR__1244
0f6f0     A7 1A 02 FB | 	rdlong	arg05, fp
0f6f4     0D 21 02 F6 | 	mov	local02, arg05
0f6f8     02 20 66 F0 | 	shl	local02, #2
0f6fc     38 4E 05 F1 | 	add	fp, #56
0f700     A7 20 02 F1 | 	add	local02, fp
0f704     02 1A 86 F1 | 	sub	arg05, #2
0f708     02 1A 66 F0 | 	shl	arg05, #2
0f70c     A7 1A 02 F1 | 	add	arg05, fp
0f710     0D 13 02 FB | 	rdlong	arg01, arg05
0f714     24 4E 85 F1 | 	sub	fp, #36
0f718     A7 14 02 FB | 	rdlong	arg02, fp
0f71c     18 4E 85 F1 | 	sub	fp, #24
0f720     AC 3E B1 FD | 	call	#__system___float_mul
0f724     10 FB 61 FC | 	wrlong	result1, local02
0f728     04 4E 05 F1 | 	add	fp, #4
0f72c     A7 22 02 FB | 	rdlong	local03, fp
0f730     02 22 06 F1 | 	add	local03, #2
0f734     A7 22 62 FC | 	wrlong	local03, fp
0f738     10 22 56 F2 | 	cmps	local03, #16 wc
0f73c     B0 FF 9F CD |  if_b	jmp	#LR__1244
0f740                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0f740     A7 08 68 FC | 	wrlong	#4, fp
0f744                 | LR__1245
0f744     A7 22 02 FB | 	rdlong	local03, fp
0f748     11 21 02 F6 | 	mov	local02, local03
0f74c     02 20 66 F0 | 	shl	local02, #2
0f750     38 4E 05 F1 | 	add	fp, #56
0f754     A7 20 02 F1 | 	add	local02, fp
0f758     02 22 86 F1 | 	sub	local03, #2
0f75c     02 22 66 F0 | 	shl	local03, #2
0f760     A7 22 02 F1 | 	add	local03, fp
0f764     11 13 02 FB | 	rdlong	arg01, local03
0f768     20 4E 85 F1 | 	sub	fp, #32
0f76c     A7 14 02 FB | 	rdlong	arg02, fp
0f770     1C 4E 85 F1 | 	sub	fp, #28
0f774     58 3E B1 FD | 	call	#__system___float_mul
0f778     10 FB 61 FC | 	wrlong	result1, local02
0f77c     04 4E 05 F1 | 	add	fp, #4
0f780     A7 22 02 FB | 	rdlong	local03, fp
0f784     02 22 06 F1 | 	add	local03, #2
0f788     A7 22 62 FC | 	wrlong	local03, fp
0f78c     0F 22 56 F2 | 	cmps	local03, #15 wc
0f790     B0 FF 9F CD |  if_b	jmp	#LR__1245
0f794     04 4E 85 F1 | 	sub	fp, #4
0f798                 | LR__1246
0f798                 | ' if harm(0)>=0 then ' synthesize with harmonics
0f798     3C 4E 05 F1 | 	add	fp, #60
0f79c     A7 12 02 FB | 	rdlong	arg01, fp
0f7a0     3C 4E 85 F1 | 	sub	fp, #60
0f7a4     00 14 06 F6 | 	mov	arg02, #0
0f7a8     01 16 66 F6 | 	neg	arg03, #1
0f7ac     54 42 B1 FD | 	call	#__system___float_cmp
0f7b0     00 FA 55 F2 | 	cmps	result1, #0 wc
0f7b4     A4 02 90 CD |  if_b	jmp	#LR__1252
0f7b8                 | '   for i=0 to 1023
0f7b8     04 4E 05 F1 | 	add	fp, #4
0f7bc     A7 00 68 FC | 	wrlong	#0, fp
0f7c0     04 4E 85 F1 | 	sub	fp, #4
0f7c4                 | LR__1247
0f7c4     24 4E 05 F1 | 	add	fp, #36
0f7c8     A7 00 68 FC | 	wrlong	#0, fp
0f7cc                 | '     spl=0
0f7cc                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0f7cc     1C 4E 85 F1 | 	sub	fp, #28
0f7d0     A7 00 68 FC | 	wrlong	#0, fp
0f7d4                 | LR__1248
0f7d4     A7 20 02 FB | 	rdlong	local02, fp
0f7d8     02 20 66 F0 | 	shl	local02, #2
0f7dc     34 4E 05 F1 | 	add	fp, #52
0f7e0     A7 20 02 F1 | 	add	local02, fp
0f7e4     10 23 02 FB | 	rdlong	local03, local02
0f7e8     87 E4 1D FF 
0f7ec     DB 21 06 F6 | 	mov	local02, ##1003032539
0f7f0     38 4E 85 F1 | 	sub	fp, #56
0f7f4     A7 12 02 FB | 	rdlong	arg01, fp
0f7f8     04 4E 85 F1 | 	sub	fp, #4
0f7fc     09 13 52 F6 | 	abs	arg01, arg01 wc
0f800     1F 24 C6 C9 |  if_b	decod	local04, #31
0f804     00 24 06 36 |  if_ae	mov	local04, #0
0f808     C0 39 B1 FD | 	call	#__system___float_fromuns
0f80c     12 FB 61 F5 | 	xor	result1, local04
0f810     FD 14 02 F6 | 	mov	arg02, result1
0f814     10 13 02 F6 | 	mov	arg01, local02
0f818     B4 3D B1 FD | 	call	#__system___float_mul
0f81c     FD 20 02 F6 | 	mov	local02, result1
0f820     08 4E 05 F1 | 	add	fp, #8
0f824     A7 12 02 FB | 	rdlong	arg01, fp
0f828     08 4E 85 F1 | 	sub	fp, #8
0f82c     01 12 06 F1 | 	add	arg01, #1
0f830     09 13 52 F6 | 	abs	arg01, arg01 wc
0f834     1F 24 C6 C9 |  if_b	decod	local04, #31
0f838     00 24 06 36 |  if_ae	mov	local04, #0
0f83c     8C 39 B1 FD | 	call	#__system___float_fromuns
0f840     12 FB 61 F5 | 	xor	result1, local04
0f844     FD 14 02 F6 | 	mov	arg02, result1
0f848     10 13 02 F6 | 	mov	arg01, local02
0f84c     80 3D B1 FD | 	call	#__system___float_mul
0f850     FD 12 02 F6 | 	mov	arg01, result1
0f854     B4 46 B1 FD | 	call	#__system____builtin_sinf
0f858     FD 14 02 F6 | 	mov	arg02, result1
0f85c     11 13 02 F6 | 	mov	arg01, local03
0f860     6C 3D B1 FD | 	call	#__system___float_mul
0f864     FD 14 02 F6 | 	mov	arg02, result1
0f868     24 4E 05 F1 | 	add	fp, #36
0f86c     A7 12 02 FB | 	rdlong	arg01, fp
0f870     24 4E 85 F1 | 	sub	fp, #36
0f874     88 39 B1 FD | 	call	#__system___float_add
0f878     24 4E 05 F1 | 	add	fp, #36
0f87c     A7 FA 61 FC | 	wrlong	result1, fp
0f880     1C 4E 85 F1 | 	sub	fp, #28
0f884     A7 16 02 FB | 	rdlong	arg03, fp
0f888     01 16 06 F1 | 	add	arg03, #1
0f88c     A7 16 62 FC | 	wrlong	arg03, fp
0f890     10 16 56 F2 | 	cmps	arg03, #16 wc
0f894     3C FF 9F CD |  if_b	jmp	#LR__1248
0f898                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0f898     1C 4E 05 F1 | 	add	fp, #28
0f89c     A7 12 02 FB | 	rdlong	arg01, fp
0f8a0     1F 12 06 F4 | 	bitl	arg01, #31
0f8a4     04 4E 85 F1 | 	sub	fp, #4
0f8a8     A7 14 02 FB | 	rdlong	arg02, fp
0f8ac     20 4E 85 F1 | 	sub	fp, #32
0f8b0     01 16 66 F6 | 	neg	arg03, #1
0f8b4     4C 41 B1 FD | 	call	#__system___float_cmp
0f8b8     01 FA 55 F2 | 	cmps	result1, #1 wc
0f8bc     18 00 90 CD |  if_b	jmp	#LR__1249
0f8c0     24 4E 05 F1 | 	add	fp, #36
0f8c4     A7 FA 01 FB | 	rdlong	result1, fp
0f8c8     1F FA 05 F4 | 	bitl	result1, #31
0f8cc     04 4E 85 F1 | 	sub	fp, #4
0f8d0     A7 FA 61 FC | 	wrlong	result1, fp
0f8d4     20 4E 85 F1 | 	sub	fp, #32
0f8d8                 | LR__1249
0f8d8     04 4E 05 F1 | 	add	fp, #4
0f8dc     A7 22 02 FB | 	rdlong	local03, fp
0f8e0     01 22 06 F1 | 	add	local03, #1
0f8e4     A7 22 62 FC | 	wrlong	local03, fp
0f8e8     04 4E 85 F1 | 	sub	fp, #4
0f8ec     02 00 00 FF 
0f8f0     00 22 56 F2 | 	cmps	local03, ##1024 wc
0f8f4     CC FE 9F CD |  if_b	jmp	#LR__1247
0f8f8                 | '   for i=0 to 1023
0f8f8     04 4E 05 F1 | 	add	fp, #4
0f8fc     A7 00 68 FC | 	wrlong	#0, fp
0f900     04 4E 85 F1 | 	sub	fp, #4
0f904                 | LR__1250
0f904     24 4E 05 F1 | 	add	fp, #36
0f908     A7 00 68 FC | 	wrlong	#0, fp
0f90c                 | '     spl=0
0f90c                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0f90c     1C 4E 85 F1 | 	sub	fp, #28
0f910     A7 00 68 FC | 	wrlong	#0, fp
0f914                 | LR__1251
0f914     A7 22 02 FB | 	rdlong	local03, fp
0f918     02 22 66 F0 | 	shl	local03, #2
0f91c     34 4E 05 F1 | 	add	fp, #52
0f920     A7 22 02 F1 | 	add	local03, fp
0f924     11 23 02 FB | 	rdlong	local03, local03
0f928     1C 4E 85 F1 | 	sub	fp, #28
0f92c     A7 14 02 FB | 	rdlong	arg02, fp
0f930     20 4E 85 F1 | 	sub	fp, #32
0f934     58 7F 23 FF 
0f938     00 12 06 F6 | 	mov	arg01, ##1191096320
0f93c     94 3E B1 FD | 	call	#__system___float_div
0f940     FD 14 02 F6 | 	mov	arg02, result1
0f944     11 13 02 F6 | 	mov	arg01, local03
0f948     84 3C B1 FD | 	call	#__system___float_mul
0f94c     FD 22 02 F6 | 	mov	local03, result1
0f950     87 E4 1D FF 
0f954     DB 21 06 F6 | 	mov	local02, ##1003032539
0f958     04 4E 05 F1 | 	add	fp, #4
0f95c     A7 12 02 FB | 	rdlong	arg01, fp
0f960     04 4E 85 F1 | 	sub	fp, #4
0f964     09 13 52 F6 | 	abs	arg01, arg01 wc
0f968     1F 24 C6 C9 |  if_b	decod	local04, #31
0f96c     00 24 06 36 |  if_ae	mov	local04, #0
0f970     58 38 B1 FD | 	call	#__system___float_fromuns
0f974     12 FB 61 F5 | 	xor	result1, local04
0f978     FD 14 02 F6 | 	mov	arg02, result1
0f97c     10 13 02 F6 | 	mov	arg01, local02
0f980     4C 3C B1 FD | 	call	#__system___float_mul
0f984     FD 20 02 F6 | 	mov	local02, result1
0f988     08 4E 05 F1 | 	add	fp, #8
0f98c     A7 12 02 FB | 	rdlong	arg01, fp
0f990     08 4E 85 F1 | 	sub	fp, #8
0f994     01 12 06 F1 | 	add	arg01, #1
0f998     09 13 52 F6 | 	abs	arg01, arg01 wc
0f99c     1F 24 C6 C9 |  if_b	decod	local04, #31
0f9a0     00 24 06 36 |  if_ae	mov	local04, #0
0f9a4     24 38 B1 FD | 	call	#__system___float_fromuns
0f9a8     12 FB 61 F5 | 	xor	result1, local04
0f9ac     FD 14 02 F6 | 	mov	arg02, result1
0f9b0     10 13 02 F6 | 	mov	arg01, local02
0f9b4     18 3C B1 FD | 	call	#__system___float_mul
0f9b8     FD 12 02 F6 | 	mov	arg01, result1
0f9bc     4C 45 B1 FD | 	call	#__system____builtin_sinf
0f9c0     FD 14 02 F6 | 	mov	arg02, result1
0f9c4     11 13 02 F6 | 	mov	arg01, local03
0f9c8     04 3C B1 FD | 	call	#__system___float_mul
0f9cc     FD 14 02 F6 | 	mov	arg02, result1
0f9d0     24 4E 05 F1 | 	add	fp, #36
0f9d4     A7 12 02 FB | 	rdlong	arg01, fp
0f9d8     24 4E 85 F1 | 	sub	fp, #36
0f9dc     20 38 B1 FD | 	call	#__system___float_add
0f9e0     24 4E 05 F1 | 	add	fp, #36
0f9e4     A7 FA 61 FC | 	wrlong	result1, fp
0f9e8     1C 4E 85 F1 | 	sub	fp, #28
0f9ec     A7 22 02 FB | 	rdlong	local03, fp
0f9f0     01 22 06 F1 | 	add	local03, #1
0f9f4     A7 22 62 FC | 	wrlong	local03, fp
0f9f8     10 22 56 F2 | 	cmps	local03, #16 wc
0f9fc     14 FF 9F CD |  if_b	jmp	#LR__1251
0fa00     08 4E 05 F1 | 	add	fp, #8
0fa04     A7 22 02 FB | 	rdlong	local03, fp
0fa08     0B 22 66 F0 | 	shl	local03, #11
0fa0c     0C 4E 85 F1 | 	sub	fp, #12
0fa10     A7 20 02 FB | 	rdlong	local02, fp
0fa14     01 20 66 F0 | 	shl	local02, #1
0fa18     10 23 02 F1 | 	add	local03, local02
0fa1c     20 4E 05 F1 | 	add	fp, #32
0fa20     A7 12 02 FB | 	rdlong	arg01, fp
0fa24     24 4E 85 F1 | 	sub	fp, #36
0fa28     01 14 06 F6 | 	mov	arg02, #1
0fa2c     68 40 B1 FD | 	call	#__system___float_tointeger
0fa30     FD 14 02 F6 | 	mov	arg02, result1
0fa34     11 13 02 F6 | 	mov	arg01, local03
0fa38     F4 DB B0 FD | 	call	#_psdpoke
0fa3c     04 4E 05 F1 | 	add	fp, #4
0fa40     A7 22 02 FB | 	rdlong	local03, fp
0fa44     01 22 06 F1 | 	add	local03, #1
0fa48     A7 22 62 FC | 	wrlong	local03, fp
0fa4c     04 4E 85 F1 | 	sub	fp, #4
0fa50     02 00 00 FF 
0fa54     00 22 56 F2 | 	cmps	local03, ##1024 wc
0fa58     A8 FE 9F CD |  if_b	jmp	#LR__1250
0fa5c                 | LR__1252
0fa5c                 | LR__1253
0fa5c     A7 F0 03 F6 | 	mov	ptra, fp
0fa60     B2 00 A0 FD | 	call	#popregs_
0fa64                 | _do_defsnd_ret
0fa64     2D 00 64 FD | 	ret
0fa68                 | 
0fa68                 | ' 
0fa68                 | ' ' ---------------  List the program. 
0fa68                 | ' 
0fa68                 | ' sub do_list
0fa68                 | _do_list
0fa68     02 4A 05 F6 | 	mov	COUNT_, #2
0fa6c     A8 00 A0 FD | 	call	#pushregs_
0fa70     B8 F0 07 F1 | 	add	ptra, #184
0fa74     04 4E 05 F1 | 	add	fp, #4
0fa78     A7 00 68 FC | 	wrlong	#0, fp
0fa7c     04 4E 05 F1 | 	add	fp, #4
0fa80     FF FF BF FF 
0fa84     A7 FE 6B FC | 	wrlong	##2147483647, fp
0fa88     08 4E 85 F1 | 	sub	fp, #8
0fa8c     4A 00 00 FF 
0fa90     80 E4 05 F1 | 	add	objptr, ##38016
0fa94     F2 1E 02 FB | 	rdlong	local01, objptr
0fa98     0F 17 02 F6 | 	mov	arg03, local01
0fa9c     01 16 66 F0 | 	shl	arg03, #1
0faa0     0F 17 02 F1 | 	add	arg03, local01
0faa4     02 16 66 F0 | 	shl	arg03, #2
0faa8     03 00 00 FF 
0faac     04 E4 85 F1 | 	sub	objptr, ##1540
0fab0     F2 16 02 F1 | 	add	arg03, objptr
0fab4     0B 17 02 FB | 	rdlong	arg03, arg03
0fab8     A7 16 62 FC | 	wrlong	arg03, fp
0fabc                 | ' 
0fabc                 | ' startline=0 : endline=$7FFFFFFF
0fabc                 | ' numpar=compiledline(lineptr_e).result.uresult
0fabc                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0fabc     01 16 0E F2 | 	cmp	arg03, #1 wz
0fac0     47 00 00 FF 
0fac4     7C E4 85 F1 | 	sub	objptr, ##36476
0fac8     3C 00 90 5D |  if_ne	jmp	#LR__1260
0facc     88 BF BF FD | 	call	#_pop
0fad0     FF 1E 02 F6 | 	mov	local01, result3
0fad4     0C 4E 05 F1 | 	add	fp, #12
0fad8     A7 FA 61 FC | 	wrlong	result1, fp
0fadc     04 4E 05 F1 | 	add	fp, #4
0fae0     A7 FC 61 FC | 	wrlong	result2, fp
0fae4     04 4E 05 F1 | 	add	fp, #4
0fae8     A7 1E 62 FC | 	wrlong	local01, fp
0faec     08 4E 85 F1 | 	sub	fp, #8
0faf0     A7 12 02 F6 | 	mov	arg01, fp
0faf4     0C 4E 85 F1 | 	sub	fp, #12
0faf8     2C 60 B0 FD | 	call	#_converttoint
0fafc     04 4E 05 F1 | 	add	fp, #4
0fb00     A7 FA 61 FC | 	wrlong	result1, fp
0fb04     04 4E 85 F1 | 	sub	fp, #4
0fb08                 | LR__1260
0fb08                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0fb08     A7 16 02 FB | 	rdlong	arg03, fp
0fb0c     02 16 0E F2 | 	cmp	arg03, #2 wz
0fb10     7C 00 90 5D |  if_ne	jmp	#LR__1261
0fb14     40 BF BF FD | 	call	#_pop
0fb18     FF 1E 02 F6 | 	mov	local01, result3
0fb1c     0C 4E 05 F1 | 	add	fp, #12
0fb20     A7 FA 61 FC | 	wrlong	result1, fp
0fb24     04 4E 05 F1 | 	add	fp, #4
0fb28     A7 FC 61 FC | 	wrlong	result2, fp
0fb2c     04 4E 05 F1 | 	add	fp, #4
0fb30     A7 1E 62 FC | 	wrlong	local01, fp
0fb34     08 4E 85 F1 | 	sub	fp, #8
0fb38     A7 12 02 F6 | 	mov	arg01, fp
0fb3c     0C 4E 85 F1 | 	sub	fp, #12
0fb40     E4 5F B0 FD | 	call	#_converttoint
0fb44     FD 1E 02 F6 | 	mov	local01, result1
0fb48     08 4E 05 F1 | 	add	fp, #8
0fb4c     A7 1E 62 FC | 	wrlong	local01, fp
0fb50     08 4E 85 F1 | 	sub	fp, #8
0fb54     00 BF BF FD | 	call	#_pop
0fb58     FF 1E 02 F6 | 	mov	local01, result3
0fb5c     0C 4E 05 F1 | 	add	fp, #12
0fb60     A7 FA 61 FC | 	wrlong	result1, fp
0fb64     04 4E 05 F1 | 	add	fp, #4
0fb68     A7 FC 61 FC | 	wrlong	result2, fp
0fb6c     04 4E 05 F1 | 	add	fp, #4
0fb70     A7 1E 62 FC | 	wrlong	local01, fp
0fb74     08 4E 85 F1 | 	sub	fp, #8
0fb78     A7 12 02 F6 | 	mov	arg01, fp
0fb7c     0C 4E 85 F1 | 	sub	fp, #12
0fb80     A4 5F B0 FD | 	call	#_converttoint
0fb84     04 4E 05 F1 | 	add	fp, #4
0fb88     A7 FA 61 FC | 	wrlong	result1, fp
0fb8c     04 4E 85 F1 | 	sub	fp, #4
0fb90                 | LR__1261
0fb90                 | ' 
0fb90                 | ' 
0fb90                 | ' print
0fb90     00 12 06 F6 | 	mov	arg01, #0
0fb94     C4 68 B1 FD | 	call	#__system___getiolock_0540
0fb98     FD 12 02 F6 | 	mov	arg01, result1
0fb9c     7C 0E B1 FD | 	call	#__system___lockmem
0fba0     00 12 06 F6 | 	mov	arg01, #0
0fba4     0A 14 06 F6 | 	mov	arg02, #10
0fba8     00 16 06 F6 | 	mov	arg03, #0
0fbac     08 1B B1 FD | 	call	#__system___basic_print_char
0fbb0     00 12 06 F6 | 	mov	arg01, #0
0fbb4     A4 68 B1 FD | 	call	#__system___getiolock_0540
0fbb8     FD 00 68 FC | 	wrlong	#0, result1
0fbbc     4A 00 00 FF 
0fbc0     84 E4 05 F1 | 	add	objptr, ##38020
0fbc4     F2 20 02 FB | 	rdlong	local02, objptr
0fbc8     07 00 00 FF 
0fbcc     88 E5 05 F1 | 	add	objptr, ##3976
0fbd0     F2 20 62 FC | 	wrlong	local02, objptr
0fbd4     52 00 00 FF 
0fbd8     0C E4 85 F1 | 	sub	objptr, ##41996
0fbdc                 | ' do 
0fbdc                 | LR__1262
0fbdc     20 4E 05 F1 | 	add	fp, #32
0fbe0     A7 12 02 F6 | 	mov	arg01, fp
0fbe4     20 4E 85 F1 | 	sub	fp, #32
0fbe8     52 00 00 FF 
0fbec     0C E4 05 F1 | 	add	objptr, ##41996
0fbf0     F2 14 02 FB | 	rdlong	arg02, objptr
0fbf4     18 16 06 F6 | 	mov	arg03, #24
0fbf8     46 00 00 FF 
0fbfc     40 E5 85 F1 | 	sub	objptr, ##36160
0fc00     D8 01 B1 FD | 	call	#_psram_spin2_read1
0fc04     0B 00 00 FF 
0fc08     CC E4 85 F1 | 	sub	objptr, ##5836
0fc0c                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
0fc0c                 | '   
0fc0c                 | '   if header(0)<> $FFFFFFFF then
0fc0c     20 4E 05 F1 | 	add	fp, #32
0fc10     A7 20 02 FB | 	rdlong	local02, fp
0fc14     20 4E 85 F1 | 	sub	fp, #32
0fc18     FF FF 7F FF 
0fc1c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0fc20     A8 00 90 AD |  if_e	jmp	#LR__1264
0fc24     38 4E 05 F1 | 	add	fp, #56
0fc28     3F 16 06 F6 | 	mov	arg03, #63
0fc2c     28 16 62 FD | 	setq	arg03
0fc30     A7 00 68 FC | 	wrlong	#0, fp
0fc34     A7 12 02 F6 | 	mov	arg01, fp
0fc38     10 4E 85 F1 | 	sub	fp, #16
0fc3c     A7 14 02 FB | 	rdlong	arg02, fp
0fc40     04 4E 05 F1 | 	add	fp, #4
0fc44     A7 16 02 FB | 	rdlong	arg03, fp
0fc48     2C 4E 85 F1 | 	sub	fp, #44
0fc4c     0B 00 00 FF 
0fc50     CC E4 05 F1 | 	add	objptr, ##5836
0fc54     84 01 B1 FD | 	call	#_psram_spin2_read1
0fc58     0B 00 00 FF 
0fc5c     CC E4 85 F1 | 	sub	objptr, ##5836
0fc60                 | '     longfill(linebuf,0,64)
0fc60                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0fc60                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0fc60     20 4E 05 F1 | 	add	fp, #32
0fc64     A7 20 02 FB | 	rdlong	local02, fp
0fc68     1C 4E 85 F1 | 	sub	fp, #28
0fc6c     A7 1E 02 FB | 	rdlong	local01, fp
0fc70     04 4E 85 F1 | 	sub	fp, #4
0fc74     0F 21 52 F2 | 	cmps	local02, local01 wc
0fc78     30 00 90 CD |  if_b	jmp	#LR__1263
0fc7c     20 4E 05 F1 | 	add	fp, #32
0fc80     A7 20 02 FB | 	rdlong	local02, fp
0fc84     18 4E 85 F1 | 	sub	fp, #24
0fc88     A7 16 02 FB | 	rdlong	arg03, fp
0fc8c     08 4E 85 F1 | 	sub	fp, #8
0fc90     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0fc94     14 00 90 1D |  if_a	jmp	#LR__1263
0fc98     38 4E 05 F1 | 	add	fp, #56
0fc9c     A7 12 02 F6 | 	mov	arg01, fp
0fca0     38 4E 85 F1 | 	sub	fp, #56
0fca4                 | ' 
0fca4                 | ' write(text)
0fca4     58 F8 B0 FD | 	call	#_hg010b_spin2_write
0fca8                 | ' crlf
0fca8     54 FD B0 FD | 	call	#_hg010b_spin2_crlf
0fcac                 | LR__1263
0fcac     34 4E 05 F1 | 	add	fp, #52
0fcb0     A7 20 02 FB | 	rdlong	local02, fp
0fcb4     34 4E 85 F1 | 	sub	fp, #52
0fcb8     52 00 00 FF 
0fcbc     0C E4 05 F1 | 	add	objptr, ##41996
0fcc0     F2 20 62 FC | 	wrlong	local02, objptr
0fcc4     52 00 00 FF 
0fcc8     0C E4 85 F1 | 	sub	objptr, ##41996
0fccc                 | LR__1264
0fccc     34 4E 05 F1 | 	add	fp, #52
0fcd0     A7 20 02 FB | 	rdlong	local02, fp
0fcd4     34 4E 85 F1 | 	sub	fp, #52
0fcd8     FF FF 3F FF 
0fcdc     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0fce0     20 4E 05 51 |  if_ne	add	fp, #32
0fce4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0fce8     20 4E 85 51 |  if_ne	sub	fp, #32
0fcec     FF FF 7F 5F 
0fcf0     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0fcf4     E4 FE 9F 5D |  if_ne	jmp	#LR__1262
0fcf8     A7 F0 03 F6 | 	mov	ptra, fp
0fcfc     B2 00 A0 FD | 	call	#popregs_
0fd00                 | _do_list_ret
0fd00     2D 00 64 FD | 	ret
0fd04                 | 
0fd04                 | ' 
0fd04                 | ' '---------------- Clear the program
0fd04                 | ' 
0fd04                 | ' sub do_new
0fd04                 | _do_new
0fd04     03 4A 05 F6 | 	mov	COUNT_, #3
0fd08     A8 00 A0 FD | 	call	#pushregs_
0fd0c     13 12 C6 F9 | 	decod	arg01, #19
0fd10     01 14 66 F6 | 	neg	arg02, #1
0fd14     D0 D8 B0 FD | 	call	#_pslpoke
0fd18     35 00 00 FF 
0fd1c     08 E4 05 F1 | 	add	objptr, ##27144
0fd20     F2 00 68 FC | 	wrlong	#0, objptr
0fd24                 | ' 
0fd24                 | ' pslpoke(memlo,$FFFFFFFF)
0fd24                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
0fd24     00 1E 06 F6 | 	mov	local01, #0
0fd28     20 00 00 FF 
0fd2c     10 E4 85 F1 | 	sub	objptr, ##16400
0fd30     97 1E 48 FB | 	callpa	#(@LR__1271-@LR__1270)>>2,fcache_load_ptr_
0fd34                 | LR__1270
0fd34     0F 17 02 F6 | 	mov	arg03, local01
0fd38     04 16 66 F0 | 	shl	arg03, #4
0fd3c     F2 16 02 F1 | 	add	arg03, objptr
0fd40     84 01 00 FF 
0fd44     85 15 06 F6 | 	mov	arg02, ##@LR__5460
0fd48     0B 15 62 FC | 	wrlong	arg02, arg03
0fd4c     0F 21 02 F6 | 	mov	local02, local01
0fd50     04 20 66 F0 | 	shl	local02, #4
0fd54     F2 20 02 F1 | 	add	local02, objptr
0fd58     0C 20 06 F1 | 	add	local02, #12
0fd5c     10 01 68 FC | 	wrlong	#0, local02
0fd60     01 1E 06 F1 | 	add	local01, #1
0fd64     02 00 00 FF 
0fd68     01 1E 56 F2 | 	cmps	local01, ##1025 wc
0fd6c     C4 FF 9F CD |  if_b	jmp	#LR__1270
0fd70                 | LR__1271
0fd70     35 00 00 FF 
0fd74     8C E4 05 F1 | 	add	objptr, ##27276
0fd78     00 04 80 FF 
0fd7c     F2 00 68 FC | 	wrlong	##524288, objptr
0fd80     06 00 00 FF 
0fd84     30 E4 05 F1 | 	add	objptr, ##3120
0fd88     00 04 80 FF 
0fd8c     F2 00 68 FC | 	wrlong	##524288, objptr
0fd90     04 E4 05 F1 | 	add	objptr, #4
0fd94     00 04 80 FF 
0fd98     F2 00 68 FC | 	wrlong	##524288, objptr
0fd9c     0D 00 00 FF 
0fda0     60 E4 85 F1 | 	sub	objptr, ##6752
0fda4     F2 00 68 FC | 	wrlong	#0, objptr
0fda8     07 00 00 FF 
0fdac     24 E4 05 F1 | 	add	objptr, ##3620
0fdb0     F2 00 68 FC | 	wrlong	#0, objptr
0fdb4     07 00 00 FF 
0fdb8     20 E4 85 F1 | 	sub	objptr, ##3616
0fdbc     00 04 80 FF 
0fdc0     F2 00 68 FC | 	wrlong	##524288, objptr
0fdc4     07 00 00 FF 
0fdc8     2C E4 05 F1 | 	add	objptr, ##3628
0fdcc     F2 00 68 FC | 	wrlong	#0, objptr
0fdd0     04 E4 05 F1 | 	add	objptr, #4
0fdd4     FF FF FF FF 
0fdd8     F2 FE 6B FC | 	wrlong	##-1, objptr
0fddc     06 00 00 FF 
0fde0     78 E4 05 F1 | 	add	objptr, ##3192
0fde4     F2 00 68 FC | 	wrlong	#0, objptr
0fde8     04 E4 05 F1 | 	add	objptr, #4
0fdec     F2 00 68 FC | 	wrlong	#0, objptr
0fdf0                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
0fdf0                 | ' stackpointer=0
0fdf0                 | ' lineptr=0 
0fdf0                 | ' programptr=memlo ': stringptr=0
0fdf0                 | ' 
0fdf0                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
0fdf0                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0fdf0     00 1E 06 F6 | 	mov	local01, #0
0fdf4     06 00 00 FF 
0fdf8     74 E4 85 F1 | 	sub	objptr, ##3188
0fdfc     97 16 48 FB | 	callpa	#(@LR__1273-@LR__1272)>>2,fcache_load_ptr_
0fe00                 | LR__1272
0fe00     0F 21 02 F6 | 	mov	local02, local01
0fe04     02 20 66 F0 | 	shl	local02, #2
0fe08     0F 21 02 F1 | 	add	local02, local01
0fe0c     02 20 66 F0 | 	shl	local02, #2
0fe10     F2 20 02 F1 | 	add	local02, objptr
0fe14     08 20 06 F1 | 	add	local02, #8
0fe18     FF FF FF FF 
0fe1c     10 FF 6B FC | 	wrlong	##-1, local02
0fe20     01 1E 06 F1 | 	add	local01, #1
0fe24     41 1E 56 F2 | 	cmps	local01, #65 wc
0fe28     D4 FF 9F CD |  if_b	jmp	#LR__1272
0fe2c                 | LR__1273
0fe2c     4A 00 00 FF 
0fe30     94 E4 85 F1 | 	sub	objptr, ##38036
0fe34                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
0fe34     00 1E 06 F6 | 	mov	local01, #0
0fe38                 | LR__1274
0fe38     0F 21 02 F6 | 	mov	local02, local01
0fe3c     02 20 66 F0 | 	shl	local02, #2
0fe40     51 00 00 FF 
0fe44     64 E5 05 F1 | 	add	objptr, ##41828
0fe48     F2 20 02 F1 | 	add	local02, objptr
0fe4c     10 23 0A FB | 	rdlong	local03, local02 wz
0fe50     51 00 00 FF 
0fe54     64 E5 85 F1 | 	sub	objptr, ##41828
0fe58     34 00 90 AD |  if_e	jmp	#LR__1275
0fe5c     0F 13 02 F6 | 	mov	arg01, local01
0fe60     00 14 06 F6 | 	mov	arg02, #0
0fe64     00 16 06 F6 | 	mov	arg03, #0
0fe68     B4 E5 B0 FD | 	call	#_hg010b_spin2_setspritesize
0fe6c     0F 21 02 F6 | 	mov	local02, local01
0fe70     02 20 66 F0 | 	shl	local02, #2
0fe74     51 00 00 FF 
0fe78     64 E5 05 F1 | 	add	objptr, ##41828
0fe7c     F2 20 02 F1 | 	add	local02, objptr
0fe80     10 13 02 FB | 	rdlong	arg01, local02
0fe84     51 00 00 FF 
0fe88     64 E5 85 F1 | 	sub	objptr, ##41828
0fe8c     80 4B B1 FD | 	call	#__system___gc_free
0fe90                 | LR__1275
0fe90     01 1E 06 F1 | 	add	local01, #1
0fe94     10 1E 56 F2 | 	cmps	local01, #16 wc
0fe98     9C FF 9F CD |  if_b	jmp	#LR__1274
0fe9c     51 00 00 FF 
0fea0     B8 E5 05 F1 | 	add	objptr, ##41912
0fea4     00 C0 9F FF 
0fea8     F2 00 68 FC | 	wrlong	##1065353216, objptr
0feac     04 E4 05 F1 | 	add	objptr, #4
0feb0     00 C0 9F FF 
0feb4     F2 00 68 FC | 	wrlong	##1065353216, objptr
0feb8     51 00 00 FF 
0febc     B8 E5 85 F1 | 	sub	objptr, ##41912
0fec0     F2 22 02 FB | 	rdlong	local03, objptr
0fec4     51 00 00 FF 
0fec8     A4 E5 05 F1 | 	add	objptr, ##41892
0fecc     F2 22 62 FC | 	wrlong	local03, objptr
0fed0     51 00 00 FF 
0fed4     A8 E5 85 F1 | 	sub	objptr, ##41896
0fed8     11 12 06 F6 | 	mov	arg01, #17
0fedc     08 14 06 F6 | 	mov	arg02, #8
0fee0     10 16 06 F6 | 	mov	arg03, #16
0fee4     38 E5 B0 FD | 	call	#_hg010b_spin2_setspritesize
0fee8     10 12 06 F6 | 	mov	arg01, #16
0feec     20 14 06 F6 | 	mov	arg02, #32
0fef0     20 16 06 F6 | 	mov	arg03, #32
0fef4     28 E5 B0 FD | 	call	#_hg010b_spin2_setspritesize
0fef8     84 01 00 FF 
0fefc     86 23 06 F6 | 	mov	local03, ##@LR__5461
0ff00     51 00 00 FF 
0ff04     D4 E5 05 F1 | 	add	objptr, ##41940
0ff08     F2 22 62 FC | 	wrlong	local03, objptr
0ff0c     51 00 00 FF 
0ff10     D4 E5 85 F1 | 	sub	objptr, ##41940
0ff14     2C C9 B0 FD | 	call	#_init_audio
0ff18     A7 F0 03 F6 | 	mov	ptra, fp
0ff1c     B2 00 A0 FD | 	call	#popregs_
0ff20                 | _do_new_ret
0ff20     2D 00 64 FD | 	ret
0ff24                 | 
0ff24                 | ' 
0ff24                 | ' '----------------------- goto
0ff24                 | ' sub do_fast_goto
0ff24                 | _do_fast_goto
0ff24     02 4A 05 F6 | 	mov	COUNT_, #2
0ff28     A8 00 A0 FD | 	call	#pushregs_
0ff2c                 | _do_fast_goto_enter
0ff2c     4A 00 00 FF 
0ff30     80 E4 05 F1 | 	add	objptr, ##38016
0ff34     F2 12 02 FB | 	rdlong	arg01, objptr
0ff38     09 1F 02 F6 | 	mov	local01, arg01
0ff3c     01 1E 66 F0 | 	shl	local01, #1
0ff40     09 1F 02 F1 | 	add	local01, arg01
0ff44     02 1E 66 F0 | 	shl	local01, #2
0ff48     03 00 00 FF 
0ff4c     04 E4 85 F1 | 	sub	objptr, ##1540
0ff50     F2 1E 02 F1 | 	add	local01, objptr
0ff54     0F 21 02 FB | 	rdlong	local02, local01
0ff58     10 13 02 F6 | 	mov	arg01, local02
0ff5c     47 00 00 FF 
0ff60     7C E4 85 F1 | 	sub	objptr, ##36476
0ff64     B0 D7 B0 FD | 	call	#_pslpeek
0ff68     FD 12 02 F6 | 	mov	arg01, result1
0ff6c                 | ' 
0ff6c                 | ' testptr=compiledline(lineptr_e).result.uresult
0ff6c                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0ff6c                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0ff6c     4A 00 00 FF 
0ff70     80 E4 05 F1 | 	add	objptr, ##38016
0ff74     F2 FA 01 FB | 	rdlong	result1, objptr
0ff78     FD 1E 02 F6 | 	mov	local01, result1
0ff7c     01 1E 66 F0 | 	shl	local01, #1
0ff80     FD 1E 02 F1 | 	add	local01, result1
0ff84     02 1E 66 F0 | 	shl	local01, #2
0ff88     03 00 00 FF 
0ff8c     04 E4 85 F1 | 	sub	objptr, ##1540
0ff90     F2 1E 02 F1 | 	add	local01, objptr
0ff94     04 1E 06 F1 | 	add	local01, #4
0ff98     0F 1F 02 FB | 	rdlong	local01, local01
0ff9c     0F 13 0A F2 | 	cmp	arg01, local01 wz
0ffa0     47 00 00 FF 
0ffa4     7C E4 85 F1 | 	sub	objptr, ##36476
0ffa8     58 00 90 5D |  if_ne	jmp	#LR__1280
0ffac     50 00 00 FF 
0ffb0     B4 E4 05 F1 | 	add	objptr, ##41140
0ffb4     F2 20 62 FC | 	wrlong	local02, objptr
0ffb8     06 00 00 FF 
0ffbc     38 E4 85 F1 | 	sub	objptr, ##3128
0ffc0     F2 20 02 FB | 	rdlong	local02, objptr
0ffc4     01 20 86 F1 | 	sub	local02, #1
0ffc8     04 E4 05 F1 | 	add	objptr, #4
0ffcc     F2 20 62 FC | 	wrlong	local02, objptr
0ffd0                 | '   runptr=testptr
0ffd0                 | '   lineptr_e=lineptr-1
0ffd0                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0ffd0     06 00 00 FF 
0ffd4     80 E4 05 F1 | 	add	objptr, ##3200
0ffd8     F2 20 02 FB | 	rdlong	local02, objptr
0ffdc     50 00 00 FF 
0ffe0     00 E5 85 F1 | 	sub	objptr, ##41216
0ffe4     FF FF 3F FF 
0ffe8     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0ffec     50 00 00 AF 
0fff0     00 E5 05 A1 |  if_e	add	objptr, ##41216
0fff4     F2 00 68 AC |  if_e	wrlong	#0, objptr
0fff8     50 00 00 AF 
0fffc     00 E5 85 A1 |  if_e	sub	objptr, ##41216
10000     04 00 90 FD | 	jmp	#LR__1281
10004                 | LR__1280
10004     84 0E B0 FD | 	call	#_do_find_goto
10008                 | LR__1281
10008     A7 F0 03 F6 | 	mov	ptra, fp
1000c     B2 00 A0 FD | 	call	#popregs_
10010                 | _do_fast_goto_ret
10010     2D 00 64 FD | 	ret
10014                 | 
10014                 | ' 
10014                 | ' sub do_open
10014                 | _do_open
10014     02 4A 05 F6 | 	mov	COUNT_, #2
10018     A8 00 A0 FD | 	call	#pushregs_
1001c     20 F0 07 F1 | 	add	ptra, #32
10020     4A 00 00 FF 
10024     80 E4 05 F1 | 	add	objptr, ##38016
10028     F2 16 02 FB | 	rdlong	arg03, objptr
1002c     0B 15 02 F6 | 	mov	arg02, arg03
10030     01 14 66 F0 | 	shl	arg02, #1
10034     0B 15 02 F1 | 	add	arg02, arg03
10038     02 14 66 F0 | 	shl	arg02, #2
1003c     03 00 00 FF 
10040     04 E4 85 F1 | 	sub	objptr, ##1540
10044     F2 14 02 F1 | 	add	arg02, objptr
10048     0A 17 02 FB | 	rdlong	arg03, arg02
1004c     10 4E 05 F1 | 	add	fp, #16
10050     A7 16 62 FC | 	wrlong	arg03, fp
10054     10 4E 85 F1 | 	sub	fp, #16
10058     47 00 00 FF 
1005c     7C E4 85 F1 | 	sub	objptr, ##36476
10060     F4 B9 BF FD | 	call	#_pop
10064     FF 16 02 F6 | 	mov	arg03, result3
10068     A7 FA 61 FC | 	wrlong	result1, fp
1006c     04 4E 05 F1 | 	add	fp, #4
10070     A7 FC 61 FC | 	wrlong	result2, fp
10074     04 4E 05 F1 | 	add	fp, #4
10078     A7 16 62 FC | 	wrlong	arg03, fp
1007c                 | ' 
1007c                 | ' numpar=compiledline(lineptr_e).result.uresult
1007c                 | ' 
1007c                 | ' t1=pop()
1007c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1007c     08 4E 85 F1 | 	sub	fp, #8
10080     2B 16 0E F2 | 	cmp	arg03, #43 wz
10084     18 00 90 5D |  if_ne	jmp	#LR__1290
10088     A7 12 02 FB | 	rdlong	arg01, fp
1008c     74 12 B0 FD | 	call	#_convertstring
10090     A7 FA 61 FC | 	wrlong	result1, fp
10094     08 4E 05 F1 | 	add	fp, #8
10098     A7 3E 68 FC | 	wrlong	#31, fp
1009c     08 4E 85 F1 | 	sub	fp, #8
100a0                 | LR__1290
100a0                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
100a0     08 4E 05 F1 | 	add	fp, #8
100a4     A7 16 02 FB | 	rdlong	arg03, fp
100a8     08 4E 85 F1 | 	sub	fp, #8
100ac     1F 16 0E F2 | 	cmp	arg03, #31 wz
100b0     44 00 90 AD |  if_e	jmp	#LR__1291
100b4     00 12 06 F6 | 	mov	arg01, #0
100b8     A0 63 B1 FD | 	call	#__system___getiolock_0540
100bc     FD 12 02 F6 | 	mov	arg01, result1
100c0     58 09 B1 FD | 	call	#__system___lockmem
100c4     84 01 00 FF 
100c8     91 15 06 F6 | 	mov	arg02, ##@LR__5462
100cc     00 12 06 F6 | 	mov	arg01, #0
100d0     00 16 06 F6 | 	mov	arg03, #0
100d4     38 16 B1 FD | 	call	#__system___basic_print_string
100d8     00 12 06 F6 | 	mov	arg01, #0
100dc     0A 14 06 F6 | 	mov	arg02, #10
100e0     00 16 06 F6 | 	mov	arg03, #0
100e4     D0 15 B1 FD | 	call	#__system___basic_print_char
100e8     00 12 06 F6 | 	mov	arg01, #0
100ec     6C 63 B1 FD | 	call	#__system___getiolock_0540
100f0     FD 00 68 FC | 	wrlong	#0, result1
100f4     28 02 90 FD | 	jmp	#LR__1302
100f8                 | LR__1291
100f8     A7 16 02 FB | 	rdlong	arg03, fp
100fc     0C 4E 05 F1 | 	add	fp, #12
10100     A7 16 62 FC | 	wrlong	arg03, fp
10104     0C 4E 85 F1 | 	sub	fp, #12
10108     4C B9 BF FD | 	call	#_pop
1010c     FF 16 02 F6 | 	mov	arg03, result3
10110     A7 FA 61 FC | 	wrlong	result1, fp
10114     04 4E 05 F1 | 	add	fp, #4
10118     A7 FC 61 FC | 	wrlong	result2, fp
1011c     04 4E 05 F1 | 	add	fp, #4
10120     A7 16 62 FC | 	wrlong	arg03, fp
10124                 | ' filename=t1.result.sresult
10124                 | ' t1=pop()
10124                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
10124     08 4E 85 F1 | 	sub	fp, #8
10128     2B 16 0E F2 | 	cmp	arg03, #43 wz
1012c     18 00 90 5D |  if_ne	jmp	#LR__1292
10130     A7 12 02 FB | 	rdlong	arg01, fp
10134     CC 11 B0 FD | 	call	#_convertstring
10138     A7 FA 61 FC | 	wrlong	result1, fp
1013c     08 4E 05 F1 | 	add	fp, #8
10140     A7 3E 68 FC | 	wrlong	#31, fp
10144     08 4E 85 F1 | 	sub	fp, #8
10148                 | LR__1292
10148     14 4E 05 F1 | 	add	fp, #20
1014c     A7 00 68 FC | 	wrlong	#0, fp
10150                 | ' mode=0
10150                 | ' if t1.result_type=result_string then
10150     0C 4E 85 F1 | 	sub	fp, #12
10154     A7 14 02 FB | 	rdlong	arg02, fp
10158     08 4E 85 F1 | 	sub	fp, #8
1015c     1F 14 0E F2 | 	cmp	arg02, #31 wz
10160     64 00 90 5D |  if_ne	jmp	#LR__1293
10164                 | '   if t1.result.sresult="read" then mode=1
10164     A7 12 02 FB | 	rdlong	arg01, fp
10168     84 01 00 FF 
1016c     A3 15 06 F6 | 	mov	arg02, ##@LR__5463
10170     D0 08 B1 FD | 	call	#__system___string_cmp
10174     00 FA 0D F2 | 	cmp	result1, #0 wz
10178     14 4E 05 A1 |  if_e	add	fp, #20
1017c     A7 02 68 AC |  if_e	wrlong	#1, fp
10180     14 4E 85 A1 |  if_e	sub	fp, #20
10184                 | '   if t1.result.sresult="write" then mode=2
10184     A7 12 02 FB | 	rdlong	arg01, fp
10188     84 01 00 FF 
1018c     A8 15 06 F6 | 	mov	arg02, ##@LR__5464
10190     B0 08 B1 FD | 	call	#__system___string_cmp
10194     00 FA 0D F2 | 	cmp	result1, #0 wz
10198     14 4E 05 A1 |  if_e	add	fp, #20
1019c     A7 04 68 AC |  if_e	wrlong	#2, fp
101a0     14 4E 85 A1 |  if_e	sub	fp, #20
101a4                 | '   if t1.result.sresult="append" then mode=4
101a4     A7 12 02 FB | 	rdlong	arg01, fp
101a8     84 01 00 FF 
101ac     AE 15 06 F6 | 	mov	arg02, ##@LR__5465
101b0     90 08 B1 FD | 	call	#__system___string_cmp
101b4     00 FA 0D F2 | 	cmp	result1, #0 wz
101b8     14 4E 05 A1 |  if_e	add	fp, #20
101bc     A7 08 68 AC |  if_e	wrlong	#4, fp
101c0     14 4E 85 A1 |  if_e	sub	fp, #20
101c4     14 00 90 FD | 	jmp	#LR__1294
101c8                 | LR__1293
101c8     A7 12 02 F6 | 	mov	arg01, fp
101cc     58 59 B0 FD | 	call	#_converttoint
101d0     14 4E 05 F1 | 	add	fp, #20
101d4     A7 FA 61 FC | 	wrlong	result1, fp
101d8     14 4E 85 F1 | 	sub	fp, #20
101dc                 | LR__1294
101dc     78 B8 BF FD | 	call	#_pop
101e0     FF 16 02 F6 | 	mov	arg03, result3
101e4     A7 FA 61 FC | 	wrlong	result1, fp
101e8     04 4E 05 F1 | 	add	fp, #4
101ec     A7 FC 61 FC | 	wrlong	result2, fp
101f0     04 4E 05 F1 | 	add	fp, #4
101f4     A7 16 62 FC | 	wrlong	arg03, fp
101f8                 | ' t1=pop()
101f8                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
101f8     08 4E 85 F1 | 	sub	fp, #8
101fc     2C 16 0E F2 | 	cmp	arg03, #44 wz
10200     44 00 90 AD |  if_e	jmp	#LR__1295
10204     00 12 06 F6 | 	mov	arg01, #0
10208     50 62 B1 FD | 	call	#__system___getiolock_0540
1020c     FD 12 02 F6 | 	mov	arg01, result1
10210     08 08 B1 FD | 	call	#__system___lockmem
10214     84 01 00 FF 
10218     B5 15 06 F6 | 	mov	arg02, ##@LR__5466
1021c     00 12 06 F6 | 	mov	arg01, #0
10220     00 16 06 F6 | 	mov	arg03, #0
10224     E8 14 B1 FD | 	call	#__system___basic_print_string
10228     00 12 06 F6 | 	mov	arg01, #0
1022c     0A 14 06 F6 | 	mov	arg02, #10
10230     00 16 06 F6 | 	mov	arg03, #0
10234     80 14 B1 FD | 	call	#__system___basic_print_char
10238     00 12 06 F6 | 	mov	arg01, #0
1023c     1C 62 B1 FD | 	call	#__system___getiolock_0540
10240     FD 00 68 FC | 	wrlong	#0, result1
10244     D8 00 90 FD | 	jmp	#LR__1302
10248                 | LR__1295
10248     A7 1E 02 FB | 	rdlong	local01, fp
1024c     18 4E 05 F1 | 	add	fp, #24
10250     A7 1E 62 FC | 	wrlong	local01, fp
10254                 | ' channel  = t1.result.iresult
10254                 | ' 'print "Open,  channel=";channel; " mode=";mode;  " filename=";filename
10254                 | ' select case  mode
10254     04 4E 85 F1 | 	sub	fp, #4
10258     A7 20 02 FB | 	rdlong	local02, fp
1025c     14 4E 85 F1 | 	sub	fp, #20
10260     01 20 86 F1 | 	sub	local02, #1
10264     04 20 26 F3 | 	fle	local02, #4
10268     30 20 62 FD | 	jmprel	local02
1026c                 | LR__1296
1026c     10 00 90 FD | 	jmp	#LR__1297
10270     2C 00 90 FD | 	jmp	#LR__1298
10274     68 00 90 FD | 	jmp	#LR__1300
10278     44 00 90 FD | 	jmp	#LR__1299
1027c     60 00 90 FD | 	jmp	#LR__1300
10280                 | LR__1297
10280     18 4E 05 F1 | 	add	fp, #24
10284     A7 12 02 FB | 	rdlong	arg01, fp
10288     0C 4E 85 F1 | 	sub	fp, #12
1028c     A7 14 02 FB | 	rdlong	arg02, fp
10290     0C 4E 85 F1 | 	sub	fp, #12
10294     00 16 06 F6 | 	mov	arg03, #0
10298     84 13 B1 FD | 	call	#__system___basic_open_string
1029c     80 00 90 FD | 	jmp	#LR__1301
102a0                 | LR__1298
102a0     18 4E 05 F1 | 	add	fp, #24
102a4     A7 12 02 FB | 	rdlong	arg01, fp
102a8     0C 4E 85 F1 | 	sub	fp, #12
102ac     A7 14 02 FB | 	rdlong	arg02, fp
102b0     0C 4E 85 F1 | 	sub	fp, #12
102b4     0D 16 06 F6 | 	mov	arg03, #13
102b8     64 13 B1 FD | 	call	#__system___basic_open_string
102bc     60 00 90 FD | 	jmp	#LR__1301
102c0                 | LR__1299
102c0     18 4E 05 F1 | 	add	fp, #24
102c4     A7 12 02 FB | 	rdlong	arg01, fp
102c8     0C 4E 85 F1 | 	sub	fp, #12
102cc     A7 14 02 FB | 	rdlong	arg02, fp
102d0     0C 4E 85 F1 | 	sub	fp, #12
102d4     25 16 06 F6 | 	mov	arg03, #37
102d8     44 13 B1 FD | 	call	#__system___basic_open_string
102dc     40 00 90 FD | 	jmp	#LR__1301
102e0                 | LR__1300
102e0     00 12 06 F6 | 	mov	arg01, #0
102e4     74 61 B1 FD | 	call	#__system___getiolock_0540
102e8     FD 12 02 F6 | 	mov	arg01, result1
102ec     2C 07 B1 FD | 	call	#__system___lockmem
102f0     84 01 00 FF 
102f4     C7 15 06 F6 | 	mov	arg02, ##@LR__5467
102f8     00 12 06 F6 | 	mov	arg01, #0
102fc     00 16 06 F6 | 	mov	arg03, #0
10300     0C 14 B1 FD | 	call	#__system___basic_print_string
10304     00 12 06 F6 | 	mov	arg01, #0
10308     0A 14 06 F6 | 	mov	arg02, #10
1030c     00 16 06 F6 | 	mov	arg03, #0
10310     A4 13 B1 FD | 	call	#__system___basic_print_char
10314     00 12 06 F6 | 	mov	arg01, #0
10318     40 61 B1 FD | 	call	#__system___getiolock_0540
1031c     FD 00 68 FC | 	wrlong	#0, result1
10320                 | LR__1301
10320                 | LR__1302
10320     A7 F0 03 F6 | 	mov	ptra, fp
10324     B2 00 A0 FD | 	call	#popregs_
10328                 | _do_open_ret
10328     2D 00 64 FD | 	ret
1032c                 | 
1032c                 | ' 
1032c                 | ' 
1032c                 | ' sub do_close
1032c                 | _do_close
1032c     03 4A 05 F6 | 	mov	COUNT_, #3
10330     A8 00 A0 FD | 	call	#pushregs_
10334     20 B7 BF FD | 	call	#_pop
10338     FD 1E 02 F6 | 	mov	local01, result1
1033c     FF 16 02 F6 | 	mov	arg03, result3
10340     FE 20 02 F6 | 	mov	local02, result2
10344     0B 23 02 F6 | 	mov	local03, arg03
10348                 | ' numpar=compiledline(lineptr_e).result.uresult
10348                 | ' 
10348                 | ' t1=pop()
10348                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
10348     2C 22 0E F2 | 	cmp	local03, #44 wz
1034c     44 00 90 AD |  if_e	jmp	#LR__1310
10350     00 12 06 F6 | 	mov	arg01, #0
10354     04 61 B1 FD | 	call	#__system___getiolock_0540
10358     FD 12 02 F6 | 	mov	arg01, result1
1035c     BC 06 B1 FD | 	call	#__system___lockmem
10360     84 01 00 FF 
10364     DA 15 06 F6 | 	mov	arg02, ##@LR__5468
10368     00 12 06 F6 | 	mov	arg01, #0
1036c     00 16 06 F6 | 	mov	arg03, #0
10370     9C 13 B1 FD | 	call	#__system___basic_print_string
10374     00 12 06 F6 | 	mov	arg01, #0
10378     0A 14 06 F6 | 	mov	arg02, #10
1037c     00 16 06 F6 | 	mov	arg03, #0
10380     34 13 B1 FD | 	call	#__system___basic_print_char
10384     00 12 06 F6 | 	mov	arg01, #0
10388     D0 60 B1 FD | 	call	#__system___getiolock_0540
1038c     FD 00 68 FC | 	wrlong	#0, result1
10390     08 00 90 FD | 	jmp	#LR__1311
10394                 | LR__1310
10394                 | ' channel  = t1.result.iresult
10394                 | ' close #channel
10394     0F 13 02 F6 | 	mov	arg01, local01
10398     F0 56 B1 FD | 	call	#__system__close
1039c                 | LR__1311
1039c     A7 F0 03 F6 | 	mov	ptra, fp
103a0     B2 00 A0 FD | 	call	#popregs_
103a4                 | _do_close_ret
103a4     2D 00 64 FD | 	ret
103a8                 | 
103a8                 | ' 
103a8                 | ' sub  do_get
103a8                 | _do_get
103a8     09 4A 05 F6 | 	mov	COUNT_, #9
103ac     A8 00 A0 FD | 	call	#pushregs_
103b0     40 F0 07 F1 | 	add	ptra, #64
103b4     4A 00 00 FF 
103b8     80 E4 05 F1 | 	add	objptr, ##38016
103bc     F2 1A 02 FB | 	rdlong	arg05, objptr
103c0     0D 19 02 F6 | 	mov	arg04, arg05
103c4     01 18 66 F0 | 	shl	arg04, #1
103c8     0D 19 02 F1 | 	add	arg04, arg05
103cc     02 18 66 F0 | 	shl	arg04, #2
103d0     03 00 00 FF 
103d4     04 E4 85 F1 | 	sub	objptr, ##1540
103d8     F2 18 02 F1 | 	add	arg04, objptr
103dc     0C 1B 02 FB | 	rdlong	arg05, arg04
103e0     A7 1A 62 FC | 	wrlong	arg05, fp
103e4                 | ' numpar=compiledline(lineptr_e).result.uresult
103e4                 | ' if  numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
103e4     04 1A 0E F2 | 	cmp	arg05, #4 wz
103e8     47 00 00 FF 
103ec     7C E4 85 F1 | 	sub	objptr, ##36476
103f0     48 00 90 5D |  if_ne	jmp	#LR__1320
103f4     60 B6 BF FD | 	call	#_pop
103f8     FF 1A 02 F6 | 	mov	arg05, result3
103fc     1C 4E 05 F1 | 	add	fp, #28
10400     A7 FA 61 FC | 	wrlong	result1, fp
10404     04 4E 05 F1 | 	add	fp, #4
10408     A7 FC 61 FC | 	wrlong	result2, fp
1040c     04 4E 05 F1 | 	add	fp, #4
10410     A7 1A 62 FC | 	wrlong	arg05, fp
10414     08 4E 85 F1 | 	sub	fp, #8
10418     A7 12 02 F6 | 	mov	arg01, fp
1041c     1C 4E 85 F1 | 	sub	fp, #28
10420     04 57 B0 FD | 	call	#_converttoint
10424     52 00 00 FF 
10428     10 E4 05 F1 | 	add	objptr, ##42000
1042c     F2 FA 61 FC | 	wrlong	result1, objptr
10430     52 00 00 FF 
10434     10 E4 85 F1 | 	sub	objptr, ##42000
10438     18 00 90 FD | 	jmp	#LR__1321
1043c                 | LR__1320
1043c     52 00 00 FF 
10440     10 E4 05 F1 | 	add	objptr, ##42000
10444     FF FF FF FF 
10448     F2 FE 6B FC | 	wrlong	##-1, objptr
1044c     52 00 00 FF 
10450     10 E4 85 F1 | 	sub	objptr, ##42000
10454                 | LR__1321
10454                 | ' if  numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
10454     A7 16 02 FB | 	rdlong	arg03, fp
10458     03 16 56 F2 | 	cmps	arg03, #3 wc
1045c     40 00 90 CD |  if_b	jmp	#LR__1322
10460     F4 B5 BF FD | 	call	#_pop
10464     FF 16 02 F6 | 	mov	arg03, result3
10468     1C 4E 05 F1 | 	add	fp, #28
1046c     A7 FA 61 FC | 	wrlong	result1, fp
10470     04 4E 05 F1 | 	add	fp, #4
10474     A7 FC 61 FC | 	wrlong	result2, fp
10478     04 4E 05 F1 | 	add	fp, #4
1047c     A7 16 62 FC | 	wrlong	arg03, fp
10480     08 4E 85 F1 | 	sub	fp, #8
10484     A7 12 02 F6 | 	mov	arg01, fp
10488     1C 4E 85 F1 | 	sub	fp, #28
1048c     98 56 B0 FD | 	call	#_converttoint
10490     08 4E 05 F1 | 	add	fp, #8
10494     A7 FA 61 FC | 	wrlong	result1, fp
10498     08 4E 85 F1 | 	sub	fp, #8
1049c     0C 00 90 FD | 	jmp	#LR__1323
104a0                 | LR__1322
104a0     08 4E 05 F1 | 	add	fp, #8
104a4     A7 02 68 FC | 	wrlong	#1, fp
104a8     08 4E 85 F1 | 	sub	fp, #8
104ac                 | LR__1323
104ac                 | ' if  numpar>=2  then t1=pop() : adr=converttoint(t1)
104ac     A7 16 02 FB | 	rdlong	arg03, fp
104b0     02 16 56 F2 | 	cmps	arg03, #2 wc
104b4     3C 00 90 CD |  if_b	jmp	#LR__1324
104b8     9C B5 BF FD | 	call	#_pop
104bc     FF 16 02 F6 | 	mov	arg03, result3
104c0     1C 4E 05 F1 | 	add	fp, #28
104c4     A7 FA 61 FC | 	wrlong	result1, fp
104c8     04 4E 05 F1 | 	add	fp, #4
104cc     A7 FC 61 FC | 	wrlong	result2, fp
104d0     04 4E 05 F1 | 	add	fp, #4
104d4     A7 16 62 FC | 	wrlong	arg03, fp
104d8     08 4E 85 F1 | 	sub	fp, #8
104dc     A7 12 02 F6 | 	mov	arg01, fp
104e0     1C 4E 85 F1 | 	sub	fp, #28
104e4     40 56 B0 FD | 	call	#_converttoint
104e8     0C 4E 05 F1 | 	add	fp, #12
104ec     A7 FA 61 FC | 	wrlong	result1, fp
104f0     0C 4E 85 F1 | 	sub	fp, #12
104f4                 | LR__1324
104f4     60 B5 BF FD | 	call	#_pop
104f8     FF 16 02 F6 | 	mov	arg03, result3
104fc     1C 4E 05 F1 | 	add	fp, #28
10500     A7 FA 61 FC | 	wrlong	result1, fp
10504     04 4E 05 F1 | 	add	fp, #4
10508     A7 FC 61 FC | 	wrlong	result2, fp
1050c     04 4E 05 F1 | 	add	fp, #4
10510     A7 16 62 FC | 	wrlong	arg03, fp
10514     08 4E 85 F1 | 	sub	fp, #8
10518     A7 12 02 F6 | 	mov	arg01, fp
1051c     1C 4E 85 F1 | 	sub	fp, #28
10520     04 56 B0 FD | 	call	#_converttoint
10524     04 4E 05 F1 | 	add	fp, #4
10528     A7 FA 61 FC | 	wrlong	result1, fp
1052c     10 4E 05 F1 | 	add	fp, #16
10530     A7 16 02 FB | 	rdlong	arg03, fp
10534     14 4E 85 F1 | 	sub	fp, #20
10538     02 16 66 F0 | 	shl	arg03, #2
1053c     50 00 00 FF 
10540     C0 E4 05 F1 | 	add	objptr, ##41152
10544     F2 1E 02 F6 | 	mov	local01, objptr
10548     F2 16 02 F1 | 	add	arg03, objptr
1054c     0B 01 68 FC | 	wrlong	#0, arg03
10550                 | ' t1=pop() : channel=converttoint(t1)
10550                 | ' 
10550                 | ' getres(j)=0
10550                 | ' if pos>=0 then
10550     01 00 00 FF 
10554     50 E5 05 F1 | 	add	objptr, ##848
10558     F2 20 02 FB | 	rdlong	local02, objptr
1055c     52 00 00 FF 
10560     10 E4 85 F1 | 	sub	objptr, ##42000
10564     00 20 56 F2 | 	cmps	local02, #0 wc
10568     F0 01 90 CD |  if_b	jmp	#LR__1331
1056c                 | '   for i=0 to  amount/1024
1056c     10 4E 05 F1 | 	add	fp, #16
10570     A7 00 68 FC | 	wrlong	#0, fp
10574     08 4E 85 F1 | 	sub	fp, #8
10578     A7 22 02 FB | 	rdlong	local03, fp
1057c     08 4E 85 F1 | 	sub	fp, #8
10580     11 25 52 F6 | 	abs	local04, local03 wc
10584     0A 24 46 F0 | 	shr	local04, #10
10588     12 25 82 F6 | 	negc	local04, local04
1058c     01 24 06 F1 | 	add	local04, #1
10590                 | LR__1325
10590     10 4E 05 F1 | 	add	fp, #16
10594     A7 22 02 FB | 	rdlong	local03, fp
10598     10 4E 85 F1 | 	sub	fp, #16
1059c     12 23 52 F2 | 	cmps	local03, local04 wc
105a0     9C 03 90 3D |  if_ae	jmp	#LR__1339
105a4                 | '     get #channel,pos+1,block(0),amount,r
105a4     04 4E 05 F1 | 	add	fp, #4
105a8     A7 12 02 FB | 	rdlong	arg01, fp
105ac     52 00 00 FF 
105b0     10 E4 05 F1 | 	add	objptr, ##42000
105b4     F2 14 02 FB | 	rdlong	arg02, objptr
105b8     01 14 06 F1 | 	add	arg02, #1
105bc     03 00 00 FF 
105c0     60 E5 85 F1 | 	sub	objptr, ##1888
105c4     F2 16 02 F6 | 	mov	arg03, objptr
105c8     4E 00 00 FF 
105cc     B0 E4 85 F1 | 	sub	objptr, ##40112
105d0     04 4E 05 F1 | 	add	fp, #4
105d4     A7 18 02 FB | 	rdlong	arg04, fp
105d8     08 4E 85 F1 | 	sub	fp, #8
105dc     01 1A 06 F6 | 	mov	arg05, #1
105e0     A8 12 B1 FD | 	call	#__system___basic_get
105e4     18 4E 05 F1 | 	add	fp, #24
105e8     A7 FA 61 FC | 	wrlong	result1, fp
105ec                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
105ec     0C 4E 85 F1 | 	sub	fp, #12
105f0     A7 20 02 FB | 	rdlong	local02, fp
105f4     0C 4E 85 F1 | 	sub	fp, #12
105f8     00 04 00 FF 
105fc     00 20 56 F2 | 	cmps	local02, ##524288 wc
10600     7C 00 90 3D |  if_ae	jmp	#LR__1327
10604     14 4E 05 F1 | 	add	fp, #20
10608     A7 00 68 FC | 	wrlong	#0, fp
1060c     04 4E 05 F1 | 	add	fp, #4
10610     A7 26 02 FB | 	rdlong	local05, fp
10614     18 4E 85 F1 | 	sub	fp, #24
10618                 | LR__1326
10618     14 4E 05 F1 | 	add	fp, #20
1061c     A7 20 02 FB | 	rdlong	local02, fp
10620     14 4E 85 F1 | 	sub	fp, #20
10624     13 21 52 F2 | 	cmps	local02, local05 wc
10628     D8 00 90 3D |  if_ae	jmp	#LR__1330
1062c     0C 4E 05 F1 | 	add	fp, #12
10630     A7 12 02 FB | 	rdlong	arg01, fp
10634     04 4E 05 F1 | 	add	fp, #4
10638     A7 22 02 FB | 	rdlong	local03, fp
1063c     0A 22 66 F0 | 	shl	local03, #10
10640     11 13 02 F1 | 	add	arg01, local03
10644     04 4E 05 F1 | 	add	fp, #4
10648     A7 22 02 FB | 	rdlong	local03, fp
1064c     11 13 02 F1 | 	add	arg01, local03
10650     4E 00 00 FF 
10654     B0 E4 05 F1 | 	add	objptr, ##40112
10658     F2 22 02 F1 | 	add	local03, objptr
1065c     11 15 C2 FA | 	rdbyte	arg02, local03
10660     09 15 42 FC | 	wrbyte	arg02, arg01
10664     4E 00 00 FF 
10668     B0 E4 85 F1 | 	sub	objptr, ##40112
1066c     A7 22 02 FB | 	rdlong	local03, fp
10670     01 22 06 F1 | 	add	local03, #1
10674     A7 22 62 FC | 	wrlong	local03, fp
10678     14 4E 85 F1 | 	sub	fp, #20
1067c     98 FF 9F FD | 	jmp	#LR__1326
10680                 | LR__1327
10680     14 4E 05 F1 | 	add	fp, #20
10684     A7 00 68 FC | 	wrlong	#0, fp
10688     04 4E 05 F1 | 	add	fp, #4
1068c     A7 28 02 FB | 	rdlong	local06, fp
10690     18 4E 85 F1 | 	sub	fp, #24
10694                 | LR__1328
10694     14 4E 05 F1 | 	add	fp, #20
10698     A7 20 02 FB | 	rdlong	local02, fp
1069c     14 4E 85 F1 | 	sub	fp, #20
106a0     14 21 52 F2 | 	cmps	local02, local06 wc
106a4     5C 00 90 3D |  if_ae	jmp	#LR__1329
106a8     0C 4E 05 F1 | 	add	fp, #12
106ac     A7 12 02 FB | 	rdlong	arg01, fp
106b0     04 4E 05 F1 | 	add	fp, #4
106b4     A7 26 02 FB | 	rdlong	local05, fp
106b8     0A 26 66 F0 | 	shl	local05, #10
106bc     13 13 02 F1 | 	add	arg01, local05
106c0     04 4E 05 F1 | 	add	fp, #4
106c4     A7 26 02 FB | 	rdlong	local05, fp
106c8     13 13 02 F1 | 	add	arg01, local05
106cc     14 4E 85 F1 | 	sub	fp, #20
106d0     4E 00 00 FF 
106d4     B0 E4 05 F1 | 	add	objptr, ##40112
106d8     F2 26 02 F1 | 	add	local05, objptr
106dc     13 15 C2 FA | 	rdbyte	arg02, local05
106e0     4E 00 00 FF 
106e4     B0 E4 85 F1 | 	sub	objptr, ##40112
106e8     8C CF B0 FD | 	call	#_pspoke
106ec     14 4E 05 F1 | 	add	fp, #20
106f0     A7 26 02 FB | 	rdlong	local05, fp
106f4     01 26 06 F1 | 	add	local05, #1
106f8     A7 26 62 FC | 	wrlong	local05, fp
106fc     14 4E 85 F1 | 	sub	fp, #20
10700     90 FF 9F FD | 	jmp	#LR__1328
10704                 | LR__1329
10704                 | LR__1330
10704     14 4E 05 F1 | 	add	fp, #20
10708     A7 28 02 FB | 	rdlong	local06, fp
1070c     14 23 02 F6 | 	mov	local03, local06
10710     02 22 66 F0 | 	shl	local03, #2
10714     50 00 00 FF 
10718     C0 E4 05 F1 | 	add	objptr, ##41152
1071c     F2 22 02 F1 | 	add	local03, objptr
10720     02 28 66 F0 | 	shl	local06, #2
10724     F2 28 02 F1 | 	add	local06, objptr
10728     14 29 02 FB | 	rdlong	local06, local06
1072c     04 4E 05 F1 | 	add	fp, #4
10730     A7 26 02 FB | 	rdlong	local05, fp
10734     13 29 02 F1 | 	add	local06, local05
10738     11 29 62 FC | 	wrlong	local06, local03
1073c     08 4E 85 F1 | 	sub	fp, #8
10740     A7 28 02 FB | 	rdlong	local06, fp
10744     01 28 06 F1 | 	add	local06, #1
10748     A7 28 62 FC | 	wrlong	local06, fp
1074c     10 4E 85 F1 | 	sub	fp, #16
10750     50 00 00 FF 
10754     C0 E4 85 F1 | 	sub	objptr, ##41152
10758     34 FE 9F FD | 	jmp	#LR__1325
1075c                 | LR__1331
1075c                 | '   for i=0 to  amount/1024
1075c     10 4E 05 F1 | 	add	fp, #16
10760     A7 00 68 FC | 	wrlong	#0, fp
10764     08 4E 85 F1 | 	sub	fp, #8
10768     A7 22 02 FB | 	rdlong	local03, fp
1076c     08 4E 85 F1 | 	sub	fp, #8
10770     11 2B 52 F6 | 	abs	local07, local03 wc
10774     0A 2A 46 F0 | 	shr	local07, #10
10778     15 2B 82 F6 | 	negc	local07, local07
1077c     01 2A 06 F1 | 	add	local07, #1
10780                 | LR__1332
10780     10 4E 05 F1 | 	add	fp, #16
10784     A7 22 02 FB | 	rdlong	local03, fp
10788     10 4E 85 F1 | 	sub	fp, #16
1078c     15 23 52 F2 | 	cmps	local03, local07 wc
10790     AC 01 90 3D |  if_ae	jmp	#LR__1338
10794                 | '     get #channel,,block(0),amount,r
10794     04 4E 05 F1 | 	add	fp, #4
10798     A7 12 02 FB | 	rdlong	arg01, fp
1079c     4E 00 00 FF 
107a0     B0 E4 05 F1 | 	add	objptr, ##40112
107a4     F2 16 02 F6 | 	mov	arg03, objptr
107a8     4E 00 00 FF 
107ac     B0 E4 85 F1 | 	sub	objptr, ##40112
107b0     04 4E 05 F1 | 	add	fp, #4
107b4     A7 18 02 FB | 	rdlong	arg04, fp
107b8     08 4E 85 F1 | 	sub	fp, #8
107bc     00 14 06 F6 | 	mov	arg02, #0
107c0     01 1A 06 F6 | 	mov	arg05, #1
107c4     C4 10 B1 FD | 	call	#__system___basic_get
107c8     18 4E 05 F1 | 	add	fp, #24
107cc     A7 FA 61 FC | 	wrlong	result1, fp
107d0                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
107d0     0C 4E 85 F1 | 	sub	fp, #12
107d4     A7 20 02 FB | 	rdlong	local02, fp
107d8     0C 4E 85 F1 | 	sub	fp, #12
107dc     00 04 00 FF 
107e0     00 20 56 F2 | 	cmps	local02, ##524288 wc
107e4     7C 00 90 3D |  if_ae	jmp	#LR__1334
107e8     14 4E 05 F1 | 	add	fp, #20
107ec     A7 00 68 FC | 	wrlong	#0, fp
107f0     04 4E 05 F1 | 	add	fp, #4
107f4     A7 2C 02 FB | 	rdlong	local08, fp
107f8     18 4E 85 F1 | 	sub	fp, #24
107fc                 | LR__1333
107fc     14 4E 05 F1 | 	add	fp, #20
10800     A7 20 02 FB | 	rdlong	local02, fp
10804     14 4E 85 F1 | 	sub	fp, #20
10808     16 21 52 F2 | 	cmps	local02, local08 wc
1080c     D8 00 90 3D |  if_ae	jmp	#LR__1337
10810     0C 4E 05 F1 | 	add	fp, #12
10814     A7 12 02 FB | 	rdlong	arg01, fp
10818     04 4E 05 F1 | 	add	fp, #4
1081c     A7 28 02 FB | 	rdlong	local06, fp
10820     0A 28 66 F0 | 	shl	local06, #10
10824     14 13 02 F1 | 	add	arg01, local06
10828     04 4E 05 F1 | 	add	fp, #4
1082c     A7 28 02 FB | 	rdlong	local06, fp
10830     14 13 02 F1 | 	add	arg01, local06
10834     4E 00 00 FF 
10838     B0 E4 05 F1 | 	add	objptr, ##40112
1083c     F2 28 02 F1 | 	add	local06, objptr
10840     14 15 C2 FA | 	rdbyte	arg02, local06
10844     09 15 42 FC | 	wrbyte	arg02, arg01
10848     4E 00 00 FF 
1084c     B0 E4 85 F1 | 	sub	objptr, ##40112
10850     A7 28 02 FB | 	rdlong	local06, fp
10854     01 28 06 F1 | 	add	local06, #1
10858     A7 28 62 FC | 	wrlong	local06, fp
1085c     14 4E 85 F1 | 	sub	fp, #20
10860     98 FF 9F FD | 	jmp	#LR__1333
10864                 | LR__1334
10864     14 4E 05 F1 | 	add	fp, #20
10868     A7 00 68 FC | 	wrlong	#0, fp
1086c     04 4E 05 F1 | 	add	fp, #4
10870     A7 2E 02 FB | 	rdlong	local09, fp
10874     18 4E 85 F1 | 	sub	fp, #24
10878                 | LR__1335
10878     14 4E 05 F1 | 	add	fp, #20
1087c     A7 20 02 FB | 	rdlong	local02, fp
10880     14 4E 85 F1 | 	sub	fp, #20
10884     17 21 52 F2 | 	cmps	local02, local09 wc
10888     5C 00 90 3D |  if_ae	jmp	#LR__1336
1088c     0C 4E 05 F1 | 	add	fp, #12
10890     A7 12 02 FB | 	rdlong	arg01, fp
10894     04 4E 05 F1 | 	add	fp, #4
10898     A7 2C 02 FB | 	rdlong	local08, fp
1089c     0A 2C 66 F0 | 	shl	local08, #10
108a0     16 13 02 F1 | 	add	arg01, local08
108a4     04 4E 05 F1 | 	add	fp, #4
108a8     A7 2C 02 FB | 	rdlong	local08, fp
108ac     16 13 02 F1 | 	add	arg01, local08
108b0     14 4E 85 F1 | 	sub	fp, #20
108b4     4E 00 00 FF 
108b8     B0 E4 05 F1 | 	add	objptr, ##40112
108bc     F2 2C 02 F1 | 	add	local08, objptr
108c0     16 15 C2 FA | 	rdbyte	arg02, local08
108c4     4E 00 00 FF 
108c8     B0 E4 85 F1 | 	sub	objptr, ##40112
108cc     A8 CD B0 FD | 	call	#_pspoke
108d0     14 4E 05 F1 | 	add	fp, #20
108d4     A7 2C 02 FB | 	rdlong	local08, fp
108d8     01 2C 06 F1 | 	add	local08, #1
108dc     A7 2C 62 FC | 	wrlong	local08, fp
108e0     14 4E 85 F1 | 	sub	fp, #20
108e4     90 FF 9F FD | 	jmp	#LR__1335
108e8                 | LR__1336
108e8                 | LR__1337
108e8     14 4E 05 F1 | 	add	fp, #20
108ec     A7 2E 02 FB | 	rdlong	local09, fp
108f0     17 29 02 F6 | 	mov	local06, local09
108f4     02 28 66 F0 | 	shl	local06, #2
108f8     50 00 00 FF 
108fc     C0 E4 05 F1 | 	add	objptr, ##41152
10900     F2 28 02 F1 | 	add	local06, objptr
10904     02 2E 66 F0 | 	shl	local09, #2
10908     F2 2E 02 F1 | 	add	local09, objptr
1090c     17 2F 02 FB | 	rdlong	local09, local09
10910     04 4E 05 F1 | 	add	fp, #4
10914     A7 2C 02 FB | 	rdlong	local08, fp
10918     16 2F 02 F1 | 	add	local09, local08
1091c     14 2F 62 FC | 	wrlong	local09, local06
10920     08 4E 85 F1 | 	sub	fp, #8
10924     A7 2E 02 FB | 	rdlong	local09, fp
10928     01 2E 06 F1 | 	add	local09, #1
1092c     A7 2E 62 FC | 	wrlong	local09, fp
10930     10 4E 85 F1 | 	sub	fp, #16
10934     50 00 00 FF 
10938     C0 E4 85 F1 | 	sub	objptr, ##41152
1093c     40 FE 9F FD | 	jmp	#LR__1332
10940                 | LR__1338
10940                 | LR__1339
10940     A7 F0 03 F6 | 	mov	ptra, fp
10944     B2 00 A0 FD | 	call	#popregs_
10948                 | _do_get_ret
10948     2D 00 64 FD | 	ret
1094c                 | 
1094c                 | ' 
1094c                 | ' sub  do_put
1094c                 | _do_put
1094c     03 4A 05 F6 | 	mov	COUNT_, #3
10950     A8 00 A0 FD | 	call	#pushregs_
10954     28 F0 07 F1 | 	add	ptra, #40
10958     4A 00 00 FF 
1095c     80 E4 05 F1 | 	add	objptr, ##38016
10960     F2 1A 02 FB | 	rdlong	arg05, objptr
10964     0D 19 02 F6 | 	mov	arg04, arg05
10968     01 18 66 F0 | 	shl	arg04, #1
1096c     0D 19 02 F1 | 	add	arg04, arg05
10970     02 18 66 F0 | 	shl	arg04, #2
10974     03 00 00 FF 
10978     04 E4 85 F1 | 	sub	objptr, ##1540
1097c     F2 18 02 F1 | 	add	arg04, objptr
10980     0C 1B 02 FB | 	rdlong	arg05, arg04
10984     A7 1A 62 FC | 	wrlong	arg05, fp
10988                 | ' numpar=compiledline(lineptr_e).result.uresult
10988                 | ' if  numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
10988     04 1A 0E F2 | 	cmp	arg05, #4 wz
1098c     47 00 00 FF 
10990     7C E4 85 F1 | 	sub	objptr, ##36476
10994     48 00 90 5D |  if_ne	jmp	#LR__1340
10998     BC B0 BF FD | 	call	#_pop
1099c     FF 1A 02 F6 | 	mov	arg05, result3
109a0     1C 4E 05 F1 | 	add	fp, #28
109a4     A7 FA 61 FC | 	wrlong	result1, fp
109a8     04 4E 05 F1 | 	add	fp, #4
109ac     A7 FC 61 FC | 	wrlong	result2, fp
109b0     04 4E 05 F1 | 	add	fp, #4
109b4     A7 1A 62 FC | 	wrlong	arg05, fp
109b8     08 4E 85 F1 | 	sub	fp, #8
109bc     A7 12 02 F6 | 	mov	arg01, fp
109c0     1C 4E 85 F1 | 	sub	fp, #28
109c4     60 51 B0 FD | 	call	#_converttoint
109c8     52 00 00 FF 
109cc     10 E4 05 F1 | 	add	objptr, ##42000
109d0     F2 FA 61 FC | 	wrlong	result1, objptr
109d4     52 00 00 FF 
109d8     10 E4 85 F1 | 	sub	objptr, ##42000
109dc     18 00 90 FD | 	jmp	#LR__1341
109e0                 | LR__1340
109e0     52 00 00 FF 
109e4     10 E4 05 F1 | 	add	objptr, ##42000
109e8     FF FF FF FF 
109ec     F2 FE 6B FC | 	wrlong	##-1, objptr
109f0     52 00 00 FF 
109f4     10 E4 85 F1 | 	sub	objptr, ##42000
109f8                 | LR__1341
109f8                 | ' if  numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
109f8     A7 1A 02 FB | 	rdlong	arg05, fp
109fc     03 1A 56 F2 | 	cmps	arg05, #3 wc
10a00     40 00 90 CD |  if_b	jmp	#LR__1342
10a04     50 B0 BF FD | 	call	#_pop
10a08     FF 1A 02 F6 | 	mov	arg05, result3
10a0c     1C 4E 05 F1 | 	add	fp, #28
10a10     A7 FA 61 FC | 	wrlong	result1, fp
10a14     04 4E 05 F1 | 	add	fp, #4
10a18     A7 FC 61 FC | 	wrlong	result2, fp
10a1c     04 4E 05 F1 | 	add	fp, #4
10a20     A7 1A 62 FC | 	wrlong	arg05, fp
10a24     08 4E 85 F1 | 	sub	fp, #8
10a28     A7 12 02 F6 | 	mov	arg01, fp
10a2c     1C 4E 85 F1 | 	sub	fp, #28
10a30     F4 50 B0 FD | 	call	#_converttoint
10a34     08 4E 05 F1 | 	add	fp, #8
10a38     A7 FA 61 FC | 	wrlong	result1, fp
10a3c     08 4E 85 F1 | 	sub	fp, #8
10a40     0C 00 90 FD | 	jmp	#LR__1343
10a44                 | LR__1342
10a44     08 4E 05 F1 | 	add	fp, #8
10a48     A7 02 68 FC | 	wrlong	#1, fp
10a4c     08 4E 85 F1 | 	sub	fp, #8
10a50                 | LR__1343
10a50                 | ' if  numpar>=2  then t1=pop() : adr=converttoint(t1)
10a50     A7 18 02 FB | 	rdlong	arg04, fp
10a54     02 18 56 F2 | 	cmps	arg04, #2 wc
10a58     3C 00 90 CD |  if_b	jmp	#LR__1344
10a5c     F8 AF BF FD | 	call	#_pop
10a60     FF 18 02 F6 | 	mov	arg04, result3
10a64     1C 4E 05 F1 | 	add	fp, #28
10a68     A7 FA 61 FC | 	wrlong	result1, fp
10a6c     04 4E 05 F1 | 	add	fp, #4
10a70     A7 FC 61 FC | 	wrlong	result2, fp
10a74     04 4E 05 F1 | 	add	fp, #4
10a78     A7 18 62 FC | 	wrlong	arg04, fp
10a7c     08 4E 85 F1 | 	sub	fp, #8
10a80     A7 12 02 F6 | 	mov	arg01, fp
10a84     1C 4E 85 F1 | 	sub	fp, #28
10a88     9C 50 B0 FD | 	call	#_converttoint
10a8c     0C 4E 05 F1 | 	add	fp, #12
10a90     A7 FA 61 FC | 	wrlong	result1, fp
10a94     0C 4E 85 F1 | 	sub	fp, #12
10a98                 | LR__1344
10a98     BC AF BF FD | 	call	#_pop
10a9c     FF 18 02 F6 | 	mov	arg04, result3
10aa0     1C 4E 05 F1 | 	add	fp, #28
10aa4     A7 FA 61 FC | 	wrlong	result1, fp
10aa8     04 4E 05 F1 | 	add	fp, #4
10aac     A7 FC 61 FC | 	wrlong	result2, fp
10ab0     04 4E 05 F1 | 	add	fp, #4
10ab4     A7 18 62 FC | 	wrlong	arg04, fp
10ab8     08 4E 85 F1 | 	sub	fp, #8
10abc     A7 12 02 F6 | 	mov	arg01, fp
10ac0     1C 4E 85 F1 | 	sub	fp, #28
10ac4     60 50 B0 FD | 	call	#_converttoint
10ac8     04 4E 05 F1 | 	add	fp, #4
10acc     A7 FA 61 FC | 	wrlong	result1, fp
10ad0     10 4E 05 F1 | 	add	fp, #16
10ad4     A7 1E 02 FB | 	rdlong	local01, fp
10ad8     14 4E 85 F1 | 	sub	fp, #20
10adc     02 1E 66 F0 | 	shl	local01, #2
10ae0     50 00 00 FF 
10ae4     C0 E4 05 F1 | 	add	objptr, ##41152
10ae8     F2 1E 02 F1 | 	add	local01, objptr
10aec     0F 01 68 FC | 	wrlong	#0, local01
10af0                 | ' t1=pop() : channel=converttoint(t1)
10af0                 | ' 
10af0                 | ' getres(j)=0
10af0                 | ' if pos>=0 then
10af0     01 00 00 FF 
10af4     50 E5 05 F1 | 	add	objptr, ##848
10af8     F2 20 02 FB | 	rdlong	local02, objptr
10afc     52 00 00 FF 
10b00     10 E4 85 F1 | 	sub	objptr, ##42000
10b04     00 20 56 F2 | 	cmps	local02, #0 wc
10b08     C0 01 90 CD |  if_b	jmp	#LR__1350
10b0c     10 4E 05 F1 | 	add	fp, #16
10b10     A7 00 68 FC | 	wrlong	#0, fp
10b14     10 4E 85 F1 | 	sub	fp, #16
10b18                 | '    i=0: do
10b18                 | LR__1345
10b18     14 4E 05 F1 | 	add	fp, #20
10b1c     A7 00 68 FC | 	wrlong	#0, fp
10b20     14 4E 85 F1 | 	sub	fp, #20
10b24                 | '    j=0: do    
10b24                 | LR__1346
10b24                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
10b24     0C 4E 05 F1 | 	add	fp, #12
10b28     A7 20 02 FB | 	rdlong	local02, fp
10b2c     0C 4E 85 F1 | 	sub	fp, #12
10b30     00 04 00 FF 
10b34     00 20 56 F2 | 	cmps	local02, ##524288 wc
10b38     4C 00 90 3D |  if_ae	jmp	#LR__1347
10b3c     14 4E 05 F1 | 	add	fp, #20
10b40     A7 20 02 FB | 	rdlong	local02, fp
10b44     10 1F 02 F6 | 	mov	local01, local02
10b48     4E 00 00 FF 
10b4c     B0 E4 05 F1 | 	add	objptr, ##40112
10b50     F2 1E 02 F1 | 	add	local01, objptr
10b54     08 4E 85 F1 | 	sub	fp, #8
10b58     A7 12 02 FB | 	rdlong	arg01, fp
10b5c     04 4E 05 F1 | 	add	fp, #4
10b60     A7 18 02 FB | 	rdlong	arg04, fp
10b64     0A 18 66 F0 | 	shl	arg04, #10
10b68     0C 13 02 F1 | 	add	arg01, arg04
10b6c     10 4E 85 F1 | 	sub	fp, #16
10b70     10 13 02 F1 | 	add	arg01, local02
10b74     09 FB C1 FA | 	rdbyte	result1, arg01
10b78     4E 00 00 FF 
10b7c     B0 E4 85 F1 | 	sub	objptr, ##40112
10b80     0F FB 41 FC | 	wrbyte	result1, local01
10b84     48 00 90 FD | 	jmp	#LR__1348
10b88                 | LR__1347
10b88     14 4E 05 F1 | 	add	fp, #20
10b8c     A7 20 02 FB | 	rdlong	local02, fp
10b90     10 1F 02 F6 | 	mov	local01, local02
10b94     4E 00 00 FF 
10b98     B0 E4 05 F1 | 	add	objptr, ##40112
10b9c     F2 1E 02 F1 | 	add	local01, objptr
10ba0     08 4E 85 F1 | 	sub	fp, #8
10ba4     A7 12 02 FB | 	rdlong	arg01, fp
10ba8     04 4E 05 F1 | 	add	fp, #4
10bac     A7 18 02 FB | 	rdlong	arg04, fp
10bb0     0A 18 66 F0 | 	shl	arg04, #10
10bb4     0C 13 02 F1 | 	add	arg01, arg04
10bb8     10 4E 85 F1 | 	sub	fp, #16
10bbc     10 13 02 F1 | 	add	arg01, local02
10bc0     4E 00 00 FF 
10bc4     B0 E4 85 F1 | 	sub	objptr, ##40112
10bc8     F4 CA B0 FD | 	call	#_pspeek
10bcc     0F FB 41 FC | 	wrbyte	result1, local01
10bd0                 | LR__1348
10bd0     14 4E 05 F1 | 	add	fp, #20
10bd4     A7 20 02 FB | 	rdlong	local02, fp
10bd8     01 20 06 F1 | 	add	local02, #1
10bdc     A7 20 62 FC | 	wrlong	local02, fp
10be0     14 4E 85 F1 | 	sub	fp, #20
10be4     02 00 00 FF 
10be8     00 20 56 F2 | 	cmps	local02, ##1024 wc
10bec     2C 00 90 3D |  if_ae	jmp	#LR__1349
10bf0     10 4E 05 F1 | 	add	fp, #16
10bf4     A7 1E 02 FB | 	rdlong	local01, fp
10bf8     0A 1E 66 F0 | 	shl	local01, #10
10bfc     04 4E 05 F1 | 	add	fp, #4
10c00     A7 20 02 FB | 	rdlong	local02, fp
10c04     10 1F 02 F1 | 	add	local01, local02
10c08     0C 4E 85 F1 | 	sub	fp, #12
10c0c     A7 20 02 FB | 	rdlong	local02, fp
10c10     08 4E 85 F1 | 	sub	fp, #8
10c14     10 1F 5A F2 | 	cmps	local01, local02 wcz
10c18     08 FF 9F ED |  if_be	jmp	#LR__1346
10c1c                 | LR__1349
10c1c                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
10c1c     04 4E 05 F1 | 	add	fp, #4
10c20     A7 12 02 FB | 	rdlong	arg01, fp
10c24     52 00 00 FF 
10c28     10 E4 05 F1 | 	add	objptr, ##42000
10c2c     F2 14 02 FB | 	rdlong	arg02, objptr
10c30     01 14 06 F1 | 	add	arg02, #1
10c34     03 00 00 FF 
10c38     60 E5 85 F1 | 	sub	objptr, ##1888
10c3c     F2 16 02 F6 | 	mov	arg03, objptr
10c40     4E 00 00 FF 
10c44     B0 E4 85 F1 | 	sub	objptr, ##40112
10c48     04 4E 05 F1 | 	add	fp, #4
10c4c     A7 18 02 FB | 	rdlong	arg04, fp
10c50     08 4E 85 F1 | 	sub	fp, #8
10c54     01 1A 06 F6 | 	mov	arg05, #1
10c58     C4 0B B1 FD | 	call	#__system___basic_put
10c5c     18 4E 05 F1 | 	add	fp, #24
10c60     A7 FA 61 FC | 	wrlong	result1, fp
10c64     14 4E 85 F1 | 	sub	fp, #20
10c68     A7 1E 02 FB | 	rdlong	local01, fp
10c6c     02 1E 66 F0 | 	shl	local01, #2
10c70     50 00 00 FF 
10c74     C0 E4 05 F1 | 	add	objptr, ##41152
10c78     F2 1E 02 F1 | 	add	local01, objptr
10c7c     0F FB 61 FC | 	wrlong	result1, local01
10c80                 | '    if 1024*i+j>amount then exit loop
10c80     0C 4E 05 F1 | 	add	fp, #12
10c84     A7 20 02 FB | 	rdlong	local02, fp
10c88     0A 20 66 F0 | 	shl	local02, #10
10c8c     04 4E 05 F1 | 	add	fp, #4
10c90     A7 1E 02 FB | 	rdlong	local01, fp
10c94     0F 21 02 F1 | 	add	local02, local01
10c98     0C 4E 85 F1 | 	sub	fp, #12
10c9c     A7 1E 02 FB | 	rdlong	local01, fp
10ca0     08 4E 85 F1 | 	sub	fp, #8
10ca4     0F 21 5A F2 | 	cmps	local02, local01 wcz
10ca8     50 00 00 FF 
10cac     C0 E4 85 F1 | 	sub	objptr, ##41152
10cb0     CC 01 90 1D |  if_a	jmp	#LR__1357
10cb4     10 4E 05 F1 | 	add	fp, #16
10cb8     A7 20 02 FB | 	rdlong	local02, fp
10cbc     01 20 06 F1 | 	add	local02, #1
10cc0     A7 20 62 FC | 	wrlong	local02, fp
10cc4     10 4E 85 F1 | 	sub	fp, #16
10cc8     4C FE 9F FD | 	jmp	#LR__1345
10ccc                 | LR__1350
10ccc     10 4E 05 F1 | 	add	fp, #16
10cd0     A7 00 68 FC | 	wrlong	#0, fp
10cd4     10 4E 85 F1 | 	sub	fp, #16
10cd8                 | '    i=0: do
10cd8                 | LR__1351
10cd8     14 4E 05 F1 | 	add	fp, #20
10cdc     A7 00 68 FC | 	wrlong	#0, fp
10ce0     14 4E 85 F1 | 	sub	fp, #20
10ce4                 | '    j=0: do  
10ce4                 | LR__1352
10ce4                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
10ce4     0C 4E 05 F1 | 	add	fp, #12
10ce8     A7 20 02 FB | 	rdlong	local02, fp
10cec     0C 4E 85 F1 | 	sub	fp, #12
10cf0     00 04 00 FF 
10cf4     00 20 56 F2 | 	cmps	local02, ##524288 wc
10cf8     4C 00 90 3D |  if_ae	jmp	#LR__1353
10cfc     14 4E 05 F1 | 	add	fp, #20
10d00     A7 20 02 FB | 	rdlong	local02, fp
10d04     10 1F 02 F6 | 	mov	local01, local02
10d08     4E 00 00 FF 
10d0c     B0 E4 05 F1 | 	add	objptr, ##40112
10d10     F2 1E 02 F1 | 	add	local01, objptr
10d14     08 4E 85 F1 | 	sub	fp, #8
10d18     A7 12 02 FB | 	rdlong	arg01, fp
10d1c     04 4E 05 F1 | 	add	fp, #4
10d20     A7 18 02 FB | 	rdlong	arg04, fp
10d24     0A 18 66 F0 | 	shl	arg04, #10
10d28     0C 13 02 F1 | 	add	arg01, arg04
10d2c     10 4E 85 F1 | 	sub	fp, #16
10d30     10 13 02 F1 | 	add	arg01, local02
10d34     09 FB C1 FA | 	rdbyte	result1, arg01
10d38     4E 00 00 FF 
10d3c     B0 E4 85 F1 | 	sub	objptr, ##40112
10d40     0F FB 41 FC | 	wrbyte	result1, local01
10d44     48 00 90 FD | 	jmp	#LR__1354
10d48                 | LR__1353
10d48     14 4E 05 F1 | 	add	fp, #20
10d4c     A7 20 02 FB | 	rdlong	local02, fp
10d50     10 1F 02 F6 | 	mov	local01, local02
10d54     4E 00 00 FF 
10d58     B0 E4 05 F1 | 	add	objptr, ##40112
10d5c     F2 1E 02 F1 | 	add	local01, objptr
10d60     08 4E 85 F1 | 	sub	fp, #8
10d64     A7 12 02 FB | 	rdlong	arg01, fp
10d68     04 4E 05 F1 | 	add	fp, #4
10d6c     A7 18 02 FB | 	rdlong	arg04, fp
10d70     0A 18 66 F0 | 	shl	arg04, #10
10d74     0C 13 02 F1 | 	add	arg01, arg04
10d78     10 4E 85 F1 | 	sub	fp, #16
10d7c     10 13 02 F1 | 	add	arg01, local02
10d80     4E 00 00 FF 
10d84     B0 E4 85 F1 | 	sub	objptr, ##40112
10d88     34 C9 B0 FD | 	call	#_pspeek
10d8c     0F FB 41 FC | 	wrbyte	result1, local01
10d90                 | LR__1354
10d90     14 4E 05 F1 | 	add	fp, #20
10d94     A7 20 02 FB | 	rdlong	local02, fp
10d98     01 20 06 F1 | 	add	local02, #1
10d9c     A7 20 62 FC | 	wrlong	local02, fp
10da0     14 4E 85 F1 | 	sub	fp, #20
10da4     02 00 00 FF 
10da8     00 20 56 F2 | 	cmps	local02, ##1024 wc
10dac     2C 00 90 3D |  if_ae	jmp	#LR__1355
10db0     10 4E 05 F1 | 	add	fp, #16
10db4     A7 1E 02 FB | 	rdlong	local01, fp
10db8     0A 1E 66 F0 | 	shl	local01, #10
10dbc     04 4E 05 F1 | 	add	fp, #4
10dc0     A7 20 02 FB | 	rdlong	local02, fp
10dc4     10 1F 02 F1 | 	add	local01, local02
10dc8     0C 4E 85 F1 | 	sub	fp, #12
10dcc     A7 20 02 FB | 	rdlong	local02, fp
10dd0     08 4E 85 F1 | 	sub	fp, #8
10dd4     10 1F 5A F2 | 	cmps	local01, local02 wcz
10dd8     08 FF 9F ED |  if_be	jmp	#LR__1352
10ddc                 | LR__1355
10ddc                 | '    put #channel,,block(0),amount, r : getres(channel)=r
10ddc     04 4E 05 F1 | 	add	fp, #4
10de0     A7 12 02 FB | 	rdlong	arg01, fp
10de4     4E 00 00 FF 
10de8     B0 E4 05 F1 | 	add	objptr, ##40112
10dec     F2 16 02 F6 | 	mov	arg03, objptr
10df0     4E 00 00 FF 
10df4     B0 E4 85 F1 | 	sub	objptr, ##40112
10df8     04 4E 05 F1 | 	add	fp, #4
10dfc     A7 18 02 FB | 	rdlong	arg04, fp
10e00     08 4E 85 F1 | 	sub	fp, #8
10e04     00 14 06 F6 | 	mov	arg02, #0
10e08     01 1A 06 F6 | 	mov	arg05, #1
10e0c     10 0A B1 FD | 	call	#__system___basic_put
10e10     18 4E 05 F1 | 	add	fp, #24
10e14     A7 FA 61 FC | 	wrlong	result1, fp
10e18     14 4E 85 F1 | 	sub	fp, #20
10e1c     A7 1E 02 FB | 	rdlong	local01, fp
10e20     02 1E 66 F0 | 	shl	local01, #2
10e24     50 00 00 FF 
10e28     C0 E4 05 F1 | 	add	objptr, ##41152
10e2c     F2 1E 02 F1 | 	add	local01, objptr
10e30     0F FB 61 FC | 	wrlong	result1, local01
10e34                 | '    if 1024*i+j>amount then exit loop
10e34     0C 4E 05 F1 | 	add	fp, #12
10e38     A7 20 02 FB | 	rdlong	local02, fp
10e3c     0A 20 66 F0 | 	shl	local02, #10
10e40     04 4E 05 F1 | 	add	fp, #4
10e44     A7 1E 02 FB | 	rdlong	local01, fp
10e48     0F 21 02 F1 | 	add	local02, local01
10e4c     0C 4E 85 F1 | 	sub	fp, #12
10e50     A7 22 02 FB | 	rdlong	local03, fp
10e54     08 4E 85 F1 | 	sub	fp, #8
10e58     11 21 5A F2 | 	cmps	local02, local03 wcz
10e5c     50 00 00 FF 
10e60     C0 E4 85 F1 | 	sub	objptr, ##41152
10e64     18 00 90 1D |  if_a	jmp	#LR__1356
10e68     10 4E 05 F1 | 	add	fp, #16
10e6c     A7 20 02 FB | 	rdlong	local02, fp
10e70     01 20 06 F1 | 	add	local02, #1
10e74     A7 20 62 FC | 	wrlong	local02, fp
10e78     10 4E 85 F1 | 	sub	fp, #16
10e7c     58 FE 9F FD | 	jmp	#LR__1351
10e80                 | LR__1356
10e80                 | LR__1357
10e80     A7 F0 03 F6 | 	mov	ptra, fp
10e84     B2 00 A0 FD | 	call	#popregs_
10e88                 | _do_put_ret
10e88     2D 00 64 FD | 	ret
10e8c                 | 
10e8c                 | '   
10e8c                 | ' sub do_find_goto
10e8c                 | _do_find_goto
10e8c     03 4A 05 F6 | 	mov	COUNT_, #3
10e90     A8 00 A0 FD | 	call	#pushregs_
10e94     24 F0 07 F1 | 	add	ptra, #36
10e98                 | _do_find_goto_enter
10e98     4A 00 00 FF 
10e9c     80 E4 05 F1 | 	add	objptr, ##38016
10ea0     F2 1E 02 FB | 	rdlong	local01, objptr
10ea4     0F 21 02 F6 | 	mov	local02, local01
10ea8     01 20 66 F0 | 	shl	local02, #1
10eac     0F 21 02 F1 | 	add	local02, local01
10eb0     02 20 66 F0 | 	shl	local02, #2
10eb4     03 00 00 FF 
10eb8     04 E4 85 F1 | 	sub	objptr, ##1540
10ebc     F2 20 02 F1 | 	add	local02, objptr
10ec0     04 20 06 F1 | 	add	local02, #4
10ec4     10 21 02 FB | 	rdlong	local02, local02
10ec8     A7 20 62 FC | 	wrlong	local02, fp
10ecc     03 00 00 FF 
10ed0     08 E4 05 F1 | 	add	objptr, ##1544
10ed4     F2 22 02 FB | 	rdlong	local03, objptr
10ed8     4A 00 00 FF 
10edc     84 E4 85 F1 | 	sub	objptr, ##38020
10ee0     04 4E 05 F1 | 	add	fp, #4
10ee4     A7 22 62 FC | 	wrlong	local03, fp
10ee8     04 4E 85 F1 | 	sub	fp, #4
10eec                 | ' 
10eec                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
10eec                 | '  ' print "find goto"                                                                     'print gotoline 
10eec                 | ' gotoptr=programstart
10eec                 | ' do
10eec                 | LR__1360
10eec     0C 4E 05 F1 | 	add	fp, #12
10ef0     A7 12 02 F6 | 	mov	arg01, fp
10ef4     08 4E 85 F1 | 	sub	fp, #8
10ef8     A7 14 02 FB | 	rdlong	arg02, fp
10efc     04 4E 85 F1 | 	sub	fp, #4
10f00     18 16 06 F6 | 	mov	arg03, #24
10f04     0B 00 00 FF 
10f08     CC E4 05 F1 | 	add	objptr, ##5836
10f0c     CC EE B0 FD | 	call	#_psram_spin2_read1
10f10     0B 00 00 FF 
10f14     CC E4 85 F1 | 	sub	objptr, ##5836
10f18                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
10f18                 | '   if gotoheader(0)<>$FFFFFFFF then
10f18     0C 4E 05 F1 | 	add	fp, #12
10f1c     A7 22 02 FB | 	rdlong	local03, fp
10f20     0C 4E 85 F1 | 	sub	fp, #12
10f24     FF FF 7F FF 
10f28     FF 23 0E F2 | 	cmp	local03, ##-1 wz
10f2c     24 00 90 AD |  if_e	jmp	#LR__1361
10f30     04 4E 05 F1 | 	add	fp, #4
10f34     A7 22 02 FB | 	rdlong	local03, fp
10f38     04 4E 05 F1 | 	add	fp, #4
10f3c     A7 22 62 FC | 	wrlong	local03, fp
10f40     18 4E 05 F1 | 	add	fp, #24
10f44     A7 22 02 FB | 	rdlong	local03, fp
10f48     1C 4E 85 F1 | 	sub	fp, #28
10f4c     A7 22 62 FC | 	wrlong	local03, fp
10f50     04 4E 85 F1 | 	sub	fp, #4
10f54                 | LR__1361
10f54     20 4E 05 F1 | 	add	fp, #32
10f58     A7 22 02 FB | 	rdlong	local03, fp
10f5c     20 4E 85 F1 | 	sub	fp, #32
10f60     FF FF 3F FF 
10f64     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
10f68     0C 4E 05 51 |  if_ne	add	fp, #12
10f6c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10f70     0C 4E 85 51 |  if_ne	sub	fp, #12
10f74     FF FF 7F 5F 
10f78     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
10f7c     18 00 90 AD |  if_e	jmp	#LR__1362
10f80     0C 4E 05 F1 | 	add	fp, #12
10f84     A7 22 02 FB | 	rdlong	local03, fp
10f88     0C 4E 85 F1 | 	sub	fp, #12
10f8c     A7 20 02 FB | 	rdlong	local02, fp
10f90     10 23 0A F2 | 	cmp	local03, local02 wz
10f94     54 FF 9F 5D |  if_ne	jmp	#LR__1360
10f98                 | LR__1362
10f98                 | ' 
10f98                 | ' if gotoheader(0)=gotoline then
10f98     0C 4E 05 F1 | 	add	fp, #12
10f9c     A7 22 02 FB | 	rdlong	local03, fp
10fa0     0C 4E 85 F1 | 	sub	fp, #12
10fa4     A7 1E 02 FB | 	rdlong	local01, fp
10fa8     0F 23 0A F2 | 	cmp	local03, local01 wz
10fac     D8 00 90 5D |  if_ne	jmp	#LR__1363
10fb0     4A 00 00 FF 
10fb4     80 E4 05 F1 | 	add	objptr, ##38016
10fb8     F2 1E 02 FB | 	rdlong	local01, objptr
10fbc     0F 21 02 F6 | 	mov	local02, local01
10fc0     01 20 66 F0 | 	shl	local02, #1
10fc4     0F 21 02 F1 | 	add	local02, local01
10fc8     02 20 66 F0 | 	shl	local02, #2
10fcc     03 00 00 FF 
10fd0     04 E4 85 F1 | 	sub	objptr, ##1540
10fd4     F2 20 02 F1 | 	add	local02, objptr
10fd8     08 4E 05 F1 | 	add	fp, #8
10fdc     A7 22 02 FB | 	rdlong	local03, fp
10fe0     10 23 62 FC | 	wrlong	local03, local02
10fe4     03 00 00 FF 
10fe8     04 E4 05 F1 | 	add	objptr, ##1540
10fec     F2 1E 02 FB | 	rdlong	local01, objptr
10ff0     0F 21 02 F6 | 	mov	local02, local01
10ff4     01 20 66 F0 | 	shl	local02, #1
10ff8     0F 21 02 F1 | 	add	local02, local01
10ffc     02 20 66 F0 | 	shl	local02, #2
11000     03 00 00 FF 
11004     04 E4 85 F1 | 	sub	objptr, ##1540
11008     F2 20 02 F1 | 	add	local02, objptr
1100c     08 20 06 F1 | 	add	local02, #8
11010     10 9D 68 FC | 	wrlong	#78, local02
11014     03 00 00 FF 
11018     04 E4 05 F1 | 	add	objptr, ##1540
1101c     F2 20 02 FB | 	rdlong	local02, objptr
11020     10 13 02 F6 | 	mov	arg01, local02
11024     01 12 66 F0 | 	shl	arg01, #1
11028     10 13 02 F1 | 	add	arg01, local02
1102c     02 12 66 F0 | 	shl	arg01, #2
11030     03 00 00 FF 
11034     04 E4 85 F1 | 	sub	objptr, ##1540
11038     F2 12 02 F1 | 	add	arg01, objptr
1103c     09 00 00 FF 
11040     40 E4 05 F1 | 	add	objptr, ##4672
11044     F2 14 02 FB | 	rdlong	arg02, objptr
11048     02 22 06 F6 | 	mov	local03, #2
1104c     10 23 02 F1 | 	add	local03, local02
11050     0B 00 00 FF 
11054     58 E4 85 F1 | 	sub	objptr, ##5720
11058     F2 16 02 FB | 	rdlong	arg03, objptr
1105c     0B 23 02 FD | 	qmul	local03, arg03
11060     08 4E 85 F1 | 	sub	fp, #8
11064     39 00 00 FF 
11068     98 E5 85 F1 | 	sub	objptr, ##29592
1106c     18 22 62 FD | 	getqx	local03
11070     11 15 02 F1 | 	add	arg02, local03
11074     00 EE B0 FD | 	call	#_psram_spin2_write
11078     0B 00 00 FF 
1107c     CC E4 85 F1 | 	sub	objptr, ##5836
11080     A0 EE BF FD | 	call	#_do_fast_goto
11084     08 00 90 FD | 	jmp	#LR__1364
11088                 | LR__1363
11088     26 12 06 F6 | 	mov	arg01, #38
1108c     F4 C3 B0 FD | 	call	#_printerror
11090                 | LR__1364
11090     A7 F0 03 F6 | 	mov	ptra, fp
11094     B2 00 A0 FD | 	call	#popregs_
11098                 | _do_find_goto_ret
11098     2D 00 64 FD | 	ret
1109c                 | 
1109c                 | ' 
1109c                 | ' sub do_slow_goto
1109c                 | _do_slow_goto
1109c     02 4A 05 F6 | 	mov	COUNT_, #2
110a0     A8 00 A0 FD | 	call	#pushregs_
110a4     30 F0 07 F1 | 	add	ptra, #48
110a8     AC A9 BF FD | 	call	#_pop
110ac     FF 1E 02 F6 | 	mov	local01, result3
110b0     24 4E 05 F1 | 	add	fp, #36
110b4     A7 FA 61 FC | 	wrlong	result1, fp
110b8     04 4E 05 F1 | 	add	fp, #4
110bc     A7 FC 61 FC | 	wrlong	result2, fp
110c0     04 4E 05 F1 | 	add	fp, #4
110c4     A7 1E 62 FC | 	wrlong	local01, fp
110c8     08 4E 85 F1 | 	sub	fp, #8
110cc     A7 12 02 F6 | 	mov	arg01, fp
110d0     24 4E 85 F1 | 	sub	fp, #36
110d4     50 4A B0 FD | 	call	#_converttoint
110d8     A7 FA 61 FC | 	wrlong	result1, fp
110dc     4A 00 00 FF 
110e0     84 E4 05 F1 | 	add	objptr, ##38020
110e4     F2 20 02 FB | 	rdlong	local02, objptr
110e8     4A 00 00 FF 
110ec     84 E4 85 F1 | 	sub	objptr, ##38020
110f0     04 4E 05 F1 | 	add	fp, #4
110f4     A7 20 62 FC | 	wrlong	local02, fp
110f8     04 4E 85 F1 | 	sub	fp, #4
110fc                 | ' 
110fc                 | ' t1=pop() : gotoline=converttoint(t1)
110fc                 | ' gotoptr=programstart
110fc                 | ' do
110fc                 | LR__1370
110fc     0C 4E 05 F1 | 	add	fp, #12
11100     A7 12 02 F6 | 	mov	arg01, fp
11104     08 4E 85 F1 | 	sub	fp, #8
11108     A7 14 02 FB | 	rdlong	arg02, fp
1110c     04 4E 85 F1 | 	sub	fp, #4
11110     18 16 06 F6 | 	mov	arg03, #24
11114     0B 00 00 FF 
11118     CC E4 05 F1 | 	add	objptr, ##5836
1111c     BC EC B0 FD | 	call	#_psram_spin2_read1
11120     0B 00 00 FF 
11124     CC E4 85 F1 | 	sub	objptr, ##5836
11128                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
11128                 | '   if gotoheader(0)<>$FFFFFFFF then
11128     0C 4E 05 F1 | 	add	fp, #12
1112c     A7 20 02 FB | 	rdlong	local02, fp
11130     0C 4E 85 F1 | 	sub	fp, #12
11134     FF FF 7F FF 
11138     FF 21 0E F2 | 	cmp	local02, ##-1 wz
1113c     24 00 90 AD |  if_e	jmp	#LR__1371
11140     04 4E 05 F1 | 	add	fp, #4
11144     A7 20 02 FB | 	rdlong	local02, fp
11148     04 4E 05 F1 | 	add	fp, #4
1114c     A7 20 62 FC | 	wrlong	local02, fp
11150     18 4E 05 F1 | 	add	fp, #24
11154     A7 20 02 FB | 	rdlong	local02, fp
11158     1C 4E 85 F1 | 	sub	fp, #28
1115c     A7 20 62 FC | 	wrlong	local02, fp
11160     04 4E 85 F1 | 	sub	fp, #4
11164                 | LR__1371
11164     20 4E 05 F1 | 	add	fp, #32
11168     A7 20 02 FB | 	rdlong	local02, fp
1116c     20 4E 85 F1 | 	sub	fp, #32
11170     FF FF 3F FF 
11174     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
11178     0C 4E 05 51 |  if_ne	add	fp, #12
1117c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11180     0C 4E 85 51 |  if_ne	sub	fp, #12
11184     FF FF 7F 5F 
11188     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
1118c     18 00 90 AD |  if_e	jmp	#LR__1372
11190     0C 4E 05 F1 | 	add	fp, #12
11194     A7 20 02 FB | 	rdlong	local02, fp
11198     0C 4E 85 F1 | 	sub	fp, #12
1119c     A7 16 02 FB | 	rdlong	arg03, fp
111a0     0B 21 0A F2 | 	cmp	local02, arg03 wz
111a4     54 FF 9F 5D |  if_ne	jmp	#LR__1370
111a8                 | LR__1372
111a8                 | ' if gotoheader(0)=gotoline then  
111a8     0C 4E 05 F1 | 	add	fp, #12
111ac     A7 20 02 FB | 	rdlong	local02, fp
111b0     0C 4E 85 F1 | 	sub	fp, #12
111b4     A7 1E 02 FB | 	rdlong	local01, fp
111b8     0F 21 0A F2 | 	cmp	local02, local01 wz
111bc     60 00 90 5D |  if_ne	jmp	#LR__1373
111c0     08 4E 05 F1 | 	add	fp, #8
111c4     A7 20 02 FB | 	rdlong	local02, fp
111c8     08 4E 85 F1 | 	sub	fp, #8
111cc     50 00 00 FF 
111d0     B4 E4 05 F1 | 	add	objptr, ##41140
111d4     F2 20 62 FC | 	wrlong	local02, objptr
111d8     06 00 00 FF 
111dc     38 E4 85 F1 | 	sub	objptr, ##3128
111e0     F2 20 02 FB | 	rdlong	local02, objptr
111e4     01 20 86 F1 | 	sub	local02, #1
111e8     04 E4 05 F1 | 	add	objptr, #4
111ec     F2 20 62 FC | 	wrlong	local02, objptr
111f0                 | '    runptr=oldgotoptr
111f0                 | '    lineptr_e=lineptr-1
111f0                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
111f0     06 00 00 FF 
111f4     80 E4 05 F1 | 	add	objptr, ##3200
111f8     F2 20 02 FB | 	rdlong	local02, objptr
111fc     50 00 00 FF 
11200     00 E5 85 F1 | 	sub	objptr, ##41216
11204     FF FF 3F FF 
11208     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
1120c     50 00 00 AF 
11210     00 E5 05 A1 |  if_e	add	objptr, ##41216
11214     F2 00 68 AC |  if_e	wrlong	#0, objptr
11218     50 00 00 AF 
1121c     00 E5 85 A1 |  if_e	sub	objptr, ##41216
11220                 | LR__1373
11220     A7 F0 03 F6 | 	mov	ptra, fp
11224     B2 00 A0 FD | 	call	#popregs_
11228                 | _do_slow_goto_ret
11228     2D 00 64 FD | 	ret
1122c                 | 
1122c                 | ' 
1122c                 | ' '----------------------- Error processing
1122c                 | ' 
1122c                 | ' sub do_error
1122c                 | _do_error
1122c     01 4A 05 F6 | 	mov	COUNT_, #1
11230     A8 00 A0 FD | 	call	#pushregs_
11234     4A 00 00 FF 
11238     80 E4 05 F1 | 	add	objptr, ##38016
1123c     F2 18 02 FB | 	rdlong	arg04, objptr
11240     0C 17 02 F6 | 	mov	arg03, arg04
11244     01 16 66 F0 | 	shl	arg03, #1
11248     0C 17 02 F1 | 	add	arg03, arg04
1124c     02 16 66 F0 | 	shl	arg03, #2
11250     03 00 00 FF 
11254     04 E4 85 F1 | 	sub	objptr, ##1540
11258     F2 16 02 F1 | 	add	arg03, objptr
1125c     0B 1F 02 FB | 	rdlong	local01, arg03
11260                 | ' r=compiledline(lineptr_e).result.uresult
11260                 | ' print "Error ";r;": ";errors$(r)
11260     00 12 06 F6 | 	mov	arg01, #0
11264     47 00 00 FF 
11268     7C E4 85 F1 | 	sub	objptr, ##36476
1126c     EC 51 B1 FD | 	call	#__system___getiolock_0540
11270     FD 12 02 F6 | 	mov	arg01, result1
11274     A4 F7 B0 FD | 	call	#__system___lockmem
11278     84 01 00 FF 
1127c     EC 15 06 F6 | 	mov	arg02, ##@LR__5469
11280     00 12 06 F6 | 	mov	arg01, #0
11284     00 16 06 F6 | 	mov	arg03, #0
11288     84 04 B1 FD | 	call	#__system___basic_print_string
1128c     00 12 06 F6 | 	mov	arg01, #0
11290     0F 15 02 F6 | 	mov	arg02, local01
11294     00 16 06 F6 | 	mov	arg03, #0
11298     0A 18 06 F6 | 	mov	arg04, #10
1129c     F4 04 B1 FD | 	call	#__system___basic_print_unsigned
112a0     84 01 00 FF 
112a4     F3 15 06 F6 | 	mov	arg02, ##@LR__5470
112a8     00 12 06 F6 | 	mov	arg01, #0
112ac     00 16 06 F6 | 	mov	arg03, #0
112b0     5C 04 B1 FD | 	call	#__system___basic_print_string
112b4     02 1E 66 F0 | 	shl	local01, #2
112b8     45 00 00 FF 
112bc     7C E4 05 F1 | 	add	objptr, ##35452
112c0     F2 1E 02 F1 | 	add	local01, objptr
112c4     0F 15 02 FB | 	rdlong	arg02, local01
112c8     00 12 06 F6 | 	mov	arg01, #0
112cc     00 16 06 F6 | 	mov	arg03, #0
112d0     45 00 00 FF 
112d4     7C E4 85 F1 | 	sub	objptr, ##35452
112d8     34 04 B1 FD | 	call	#__system___basic_print_string
112dc     00 12 06 F6 | 	mov	arg01, #0
112e0     0A 14 06 F6 | 	mov	arg02, #10
112e4     00 16 06 F6 | 	mov	arg03, #0
112e8     CC 03 B1 FD | 	call	#__system___basic_print_char
112ec     00 12 06 F6 | 	mov	arg01, #0
112f0     68 51 B1 FD | 	call	#__system___getiolock_0540
112f4     FD 00 68 FC | 	wrlong	#0, result1
112f8     A7 F0 03 F6 | 	mov	ptra, fp
112fc     B2 00 A0 FD | 	call	#popregs_
11300                 | _do_error_ret
11300     2D 00 64 FD | 	ret
11304                 | 
11304                 | ' 
11304                 | ' 
11304                 | ' '------------------ Assigning to a variable  
11304                 | ' 
11304                 | ' function  convertstring(psaddr as ulong) as string
11304                 | _convertstring
11304     04 4A 05 F6 | 	mov	COUNT_, #4
11308     A8 00 A0 FD | 	call	#pushregs_
1130c     09 1F 02 F6 | 	mov	local01, arg01
11310     04 C4 B0 FD | 	call	#_pslpeek
11314     FD 20 02 F6 | 	mov	local02, result1
11318     84 01 00 FF 
1131c     F6 23 06 F6 | 	mov	local03, ##@LR__5471
11320                 | ' 'print "in convertstring: psaddr=";psaddr
11320                 | ' l=pslpeek(psaddr)
11320                 | ' 'print "in convertstring: len=";l
11320                 | ' s="" 
11320                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
11320     01 24 06 F6 | 	mov	local04, #1
11324     01 20 06 F1 | 	add	local02, #1
11328                 | LR__1380
11328     10 25 52 F2 | 	cmps	local04, local02 wc
1132c     30 00 90 3D |  if_ae	jmp	#LR__1381
11330     0F 13 02 F6 | 	mov	arg01, local01
11334     03 12 06 F1 | 	add	arg01, #3
11338     12 13 02 F1 | 	add	arg01, local04
1133c     80 C3 B0 FD | 	call	#_pspeek
11340     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
11344     14 19 B1 FD | 	call	#__system__Chr_S
11348     FD 14 02 F6 | 	mov	arg02, result1
1134c     11 13 02 F6 | 	mov	arg01, local03
11350     24 F7 B0 FD | 	call	#__system___string_concat
11354     FD 22 02 F6 | 	mov	local03, result1
11358     01 24 06 F1 | 	add	local04, #1
1135c     C8 FF 9F FD | 	jmp	#LR__1380
11360                 | LR__1381
11360                 | ' 'print "in convertstring: str=";s
11360                 | ' return s
11360     11 FB 01 F6 | 	mov	result1, local03
11364     A7 F0 03 F6 | 	mov	ptra, fp
11368     B2 00 A0 FD | 	call	#popregs_
1136c                 | _convertstring_ret
1136c     2D 00 64 FD | 	ret
11370                 | 
11370                 | ' 
11370                 | ' sub do_assign
11370                 | _do_assign
11370     05 4A 05 F6 | 	mov	COUNT_, #5
11374     A8 00 A0 FD | 	call	#pushregs_
11378     44 F0 07 F1 | 	add	ptra, #68
1137c     4A 00 00 FF 
11380     80 E4 05 F1 | 	add	objptr, ##38016
11384     F2 16 02 FB | 	rdlong	arg03, objptr
11388     0B 15 02 F6 | 	mov	arg02, arg03
1138c     01 14 66 F0 | 	shl	arg02, #1
11390     0B 15 02 F1 | 	add	arg02, arg03
11394     02 14 66 F0 | 	shl	arg02, #2
11398     03 00 00 FF 
1139c     04 E4 85 F1 | 	sub	objptr, ##1540
113a0     F2 14 02 F1 | 	add	arg02, objptr
113a4     0A 15 02 FB | 	rdlong	arg02, arg02
113a8     18 4E 05 F1 | 	add	fp, #24
113ac     A7 14 62 FC | 	wrlong	arg02, fp
113b0                 | ' 
113b0                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
113b0                 | ' if variables(varnum).vartype<array_no_type then 
113b0     18 4E 85 F1 | 	sub	fp, #24
113b4     04 14 66 F0 | 	shl	arg02, #4
113b8     32 00 00 FF 
113bc     84 E4 85 F1 | 	sub	objptr, ##25732
113c0     F2 14 02 F1 | 	add	arg02, objptr
113c4     0C 14 06 F1 | 	add	arg02, #12
113c8     0A 17 02 FB | 	rdlong	arg03, arg02
113cc     00 17 16 F2 | 	cmp	arg03, #256 wc
113d0     14 00 00 FF 
113d4     F8 E5 85 F1 | 	sub	objptr, ##10744
113d8     18 01 90 3D |  if_ae	jmp	#LR__1390
113dc     78 A6 BF FD | 	call	#_pop
113e0     A7 FA 61 FC | 	wrlong	result1, fp
113e4     04 4E 05 F1 | 	add	fp, #4
113e8     A7 FC 61 FC | 	wrlong	result2, fp
113ec     04 4E 05 F1 | 	add	fp, #4
113f0     A7 FE 61 FC | 	wrlong	result3, fp
113f4     08 4E 85 F1 | 	sub	fp, #8
113f8     A7 16 02 FB | 	rdlong	arg03, fp
113fc     04 4E 05 F1 | 	add	fp, #4
11400     A7 14 02 FB | 	rdlong	arg02, fp
11404     14 4E 05 F1 | 	add	fp, #20
11408     A7 12 02 FB | 	rdlong	arg01, fp
1140c     04 12 66 F0 | 	shl	arg01, #4
11410     14 00 00 FF 
11414     F8 E5 05 F1 | 	add	objptr, ##10744
11418     F2 12 02 F1 | 	add	arg01, objptr
1141c     04 12 06 F1 | 	add	arg01, #4
11420     09 17 62 FC | 	wrlong	arg03, arg01
11424     A7 16 02 FB | 	rdlong	arg03, fp
11428     04 16 66 F0 | 	shl	arg03, #4
1142c     F2 16 02 F1 | 	add	arg03, objptr
11430     08 16 06 F1 | 	add	arg03, #8
11434     0B 15 62 FC | 	wrlong	arg02, arg03
11438     A7 16 02 FB | 	rdlong	arg03, fp
1143c     04 16 66 F0 | 	shl	arg03, #4
11440     F2 16 02 F1 | 	add	arg03, objptr
11444     10 4E 85 F1 | 	sub	fp, #16
11448     A7 14 02 FB | 	rdlong	arg02, fp
1144c     0C 16 06 F1 | 	add	arg03, #12
11450     0B 15 62 FC | 	wrlong	arg02, arg03
11454                 | '   t1=pop() 
11454                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
11454                 | '   if variables(varnum).vartype<>result_string2 then return
11454     10 4E 05 F1 | 	add	fp, #16
11458     A7 16 02 FB | 	rdlong	arg03, fp
1145c     18 4E 85 F1 | 	sub	fp, #24
11460     04 16 66 F0 | 	shl	arg03, #4
11464     F2 16 02 F1 | 	add	arg03, objptr
11468     0C 16 06 F1 | 	add	arg03, #12
1146c     0B 17 02 FB | 	rdlong	arg03, arg03
11470     2B 16 0E F2 | 	cmp	arg03, #43 wz
11474     14 00 00 FF 
11478     F8 E5 85 F1 | 	sub	objptr, ##10744
1147c     E4 04 90 5D |  if_ne	jmp	#LR__1413
11480     18 4E 05 F1 | 	add	fp, #24
11484     A7 16 02 FB | 	rdlong	arg03, fp
11488     0B 1F 02 F6 | 	mov	local01, arg03
1148c     04 1E 66 F0 | 	shl	local01, #4
11490     14 00 00 FF 
11494     F8 E5 05 F1 | 	add	objptr, ##10744
11498     F2 1E 02 F1 | 	add	local01, objptr
1149c     18 4E 85 F1 | 	sub	fp, #24
114a0     04 16 66 F0 | 	shl	arg03, #4
114a4     F2 16 02 F1 | 	add	arg03, objptr
114a8     04 16 06 F1 | 	add	arg03, #4
114ac     0B 13 02 FB | 	rdlong	arg01, arg03
114b0     14 00 00 FF 
114b4     F8 E5 85 F1 | 	sub	objptr, ##10744
114b8     48 FE BF FD | 	call	#_convertstring
114bc     04 1E 06 F1 | 	add	local01, #4
114c0     0F FB 61 FC | 	wrlong	result1, local01
114c4     18 4E 05 F1 | 	add	fp, #24
114c8     A7 1E 02 FB | 	rdlong	local01, fp
114cc     18 4E 85 F1 | 	sub	fp, #24
114d0     04 1E 66 F0 | 	shl	local01, #4
114d4     14 00 00 FF 
114d8     F8 E5 05 F1 | 	add	objptr, ##10744
114dc     F2 1E 02 F1 | 	add	local01, objptr
114e0     0C 1E 06 F1 | 	add	local01, #12
114e4     0F 3F 68 FC | 	wrlong	#31, local01
114e8                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
114e8                 | '   variables(varnum).vartype=result_string
114e8                 | '   return
114e8     14 00 00 FF 
114ec     F8 E5 85 F1 | 	sub	objptr, ##10744
114f0     70 04 90 FD | 	jmp	#LR__1413
114f4                 | LR__1390
114f4                 | ' for i=0 to 2 : arrid(i)=0 : next i
114f4     1C 4E 05 F1 | 	add	fp, #28
114f8     A7 00 68 FC | 	wrlong	#0, fp
114fc     97 16 48 FB | 	callpa	#(@LR__1392-@LR__1391)>>2,fcache_load_ptr_
11500                 | LR__1391
11500     A7 1E 02 FB | 	rdlong	local01, fp
11504     02 1E 66 F0 | 	shl	local01, #2
11508     18 4E 05 F1 | 	add	fp, #24
1150c     A7 1E 02 F1 | 	add	local01, fp
11510     0F 01 68 FC | 	wrlong	#0, local01
11514     18 4E 85 F1 | 	sub	fp, #24
11518     A7 1E 02 FB | 	rdlong	local01, fp
1151c     01 1E 06 F1 | 	add	local01, #1
11520     A7 1E 62 FC | 	wrlong	local01, fp
11524     03 1E 16 F2 | 	cmp	local01, #3 wc
11528     D4 FF 9F CD |  if_b	jmp	#LR__1391
1152c                 | LR__1392
1152c     4A 00 00 FF 
11530     80 E4 05 F1 | 	add	objptr, ##38016
11534     F2 16 02 FB | 	rdlong	arg03, objptr
11538     0B 1F 02 F6 | 	mov	local01, arg03
1153c     01 1E 66 F0 | 	shl	local01, #1
11540     0B 1F 02 F1 | 	add	local01, arg03
11544     02 1E 66 F0 | 	shl	local01, #2
11548     03 00 00 FF 
1154c     04 E4 85 F1 | 	sub	objptr, ##1540
11550     F2 1E 02 F1 | 	add	local01, objptr
11554     04 1E 06 F1 | 	add	local01, #4
11558     0F 21 02 FB | 	rdlong	local02, local01
1155c     04 4E 05 F1 | 	add	fp, #4
11560     A7 20 62 FC | 	wrlong	local02, fp
11564     20 4E 85 F1 | 	sub	fp, #32
11568     47 00 00 FF 
1156c     7C E4 85 F1 | 	sub	objptr, ##36476
11570     E4 A4 BF FD | 	call	#_pop
11574     A7 FA 61 FC | 	wrlong	result1, fp
11578     04 4E 05 F1 | 	add	fp, #4
1157c     A7 FC 61 FC | 	wrlong	result2, fp
11580     04 4E 05 F1 | 	add	fp, #4
11584     A7 FE 61 FC | 	wrlong	result3, fp
11588                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
11588                 | ' t1=pop() ' var value
11588                 | ' if numpar>0 then
11588     18 4E 05 F1 | 	add	fp, #24
1158c     A7 22 02 FB | 	rdlong	local03, fp
11590     20 4E 85 F1 | 	sub	fp, #32
11594     01 22 16 F2 | 	cmp	local03, #1 wc
11598     78 00 90 CD |  if_b	jmp	#LR__1395
1159c                 | '   for i=numpar to 1 step -1
1159c     20 4E 05 F1 | 	add	fp, #32
115a0     A7 24 0A FB | 	rdlong	local04, fp wz
115a4     04 4E 85 F1 | 	sub	fp, #4
115a8     A7 24 62 FC | 	wrlong	local04, fp
115ac     1C 4E 85 F1 | 	sub	fp, #28
115b0     60 00 90 AD |  if_e	jmp	#LR__1394
115b4                 | LR__1393
115b4     A0 A4 BF FD | 	call	#_pop
115b8     0C 4E 05 F1 | 	add	fp, #12
115bc     A7 FA 61 FC | 	wrlong	result1, fp
115c0     04 4E 05 F1 | 	add	fp, #4
115c4     A7 FC 61 FC | 	wrlong	result2, fp
115c8     04 4E 05 F1 | 	add	fp, #4
115cc     A7 FE 61 FC | 	wrlong	result3, fp
115d0     08 4E 05 F1 | 	add	fp, #8
115d4     A7 22 02 FB | 	rdlong	local03, fp
115d8     01 22 86 F1 | 	sub	local03, #1
115dc     02 22 66 F0 | 	shl	local03, #2
115e0     18 4E 05 F1 | 	add	fp, #24
115e4     A7 22 02 F1 | 	add	local03, fp
115e8     28 4E 85 F1 | 	sub	fp, #40
115ec     A7 12 02 F6 | 	mov	arg01, fp
115f0     0C 4E 85 F1 | 	sub	fp, #12
115f4     30 45 B0 FD | 	call	#_converttoint
115f8     11 FB 61 FC | 	wrlong	result1, local03
115fc     1C 4E 05 F1 | 	add	fp, #28
11600     A7 24 02 FB | 	rdlong	local04, fp
11604     01 24 8E F1 | 	sub	local04, #1 wz
11608     A7 24 62 FC | 	wrlong	local04, fp
1160c     1C 4E 85 F1 | 	sub	fp, #28
11610     A0 FF 9F 5D |  if_ne	jmp	#LR__1393
11614                 | LR__1394
11614                 | LR__1395
11614     18 4E 05 F1 | 	add	fp, #24
11618     A7 1E 02 FB | 	rdlong	local01, fp
1161c     04 1E 66 F0 | 	shl	local01, #4
11620     14 00 00 FF 
11624     F8 E5 05 F1 | 	add	objptr, ##10744
11628     F2 1E 02 F1 | 	add	local01, objptr
1162c     04 1E 06 F1 | 	add	local01, #4
11630     0F 13 02 FB | 	rdlong	arg01, local01
11634     0C 4E 05 F1 | 	add	fp, #12
11638     A7 12 62 FC | 	wrlong	arg01, fp
1163c     24 4E 85 F1 | 	sub	fp, #36
11640     14 00 00 FF 
11644     F8 E5 85 F1 | 	sub	objptr, ##10744
11648     CC C0 B0 FD | 	call	#_pslpeek
1164c     FD 24 32 F9 | 	getword	local04, result1, #0
11650     28 4E 05 F1 | 	add	fp, #40
11654     A7 24 62 FC | 	wrlong	local04, fp
11658     04 4E 85 F1 | 	sub	fp, #4
1165c     A7 12 02 FB | 	rdlong	arg01, fp
11660     24 4E 85 F1 | 	sub	fp, #36
11664     02 12 06 F1 | 	add	arg01, #2
11668     54 C0 B0 FD | 	call	#_pspeek
1166c     FD FA E1 F8 | 	getbyte	result1, result1, #0
11670     2C 4E 05 F1 | 	add	fp, #44
11674     A7 FA 61 FC | 	wrlong	result1, fp
11678                 | ' esize=pspeek(arrptr+2)
11678                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
11678     08 4E 85 F1 | 	sub	fp, #8
1167c     A7 12 02 FB | 	rdlong	arg01, fp
11680     24 4E 85 F1 | 	sub	fp, #36
11684     04 12 06 F1 | 	add	arg01, #4
11688     8C C0 B0 FD | 	call	#_pslpeek
1168c     FD 24 02 F6 | 	mov	local04, result1
11690     34 4E 05 F1 | 	add	fp, #52
11694     A7 1E 02 FB | 	rdlong	local01, fp
11698     34 4E 85 F1 | 	sub	fp, #52
1169c     12 1F 12 F2 | 	cmp	local01, local04 wc
116a0     54 00 90 3D |  if_ae	jmp	#LR__1396
116a4     24 4E 05 F1 | 	add	fp, #36
116a8     A7 12 02 FB | 	rdlong	arg01, fp
116ac     24 4E 85 F1 | 	sub	fp, #36
116b0     08 12 06 F1 | 	add	arg01, #8
116b4     60 C0 B0 FD | 	call	#_pslpeek
116b8     FD 1E 02 F6 | 	mov	local01, result1
116bc     38 4E 05 F1 | 	add	fp, #56
116c0     A7 24 02 FB | 	rdlong	local04, fp
116c4     38 4E 85 F1 | 	sub	fp, #56
116c8     0F 25 12 F2 | 	cmp	local04, local01 wc
116cc     28 00 90 3D |  if_ae	jmp	#LR__1396
116d0     24 4E 05 F1 | 	add	fp, #36
116d4     A7 12 02 FB | 	rdlong	arg01, fp
116d8     24 4E 85 F1 | 	sub	fp, #36
116dc     0C 12 06 F1 | 	add	arg01, #12
116e0     34 C0 B0 FD | 	call	#_pslpeek
116e4     3C 4E 05 F1 | 	add	fp, #60
116e8     A7 24 02 FB | 	rdlong	local04, fp
116ec     3C 4E 85 F1 | 	sub	fp, #60
116f0     FD 24 12 F2 | 	cmp	local04, result1 wc
116f4     0C 00 90 CD |  if_b	jmp	#LR__1397
116f8                 | LR__1396
116f8     31 12 06 F6 | 	mov	arg01, #49
116fc     84 BD B0 FD | 	call	#_printerror
11700     60 02 90 FD | 	jmp	#LR__1413
11704                 | LR__1397
11704     24 4E 05 F1 | 	add	fp, #36
11708     A7 12 02 FB | 	rdlong	arg01, fp
1170c     09 25 02 F6 | 	mov	local04, arg01
11710     10 24 06 F1 | 	add	local04, #16
11714     24 4E 85 F1 | 	sub	fp, #36
11718     04 12 06 F1 | 	add	arg01, #4
1171c     F8 BF B0 FD | 	call	#_pslpeek
11720     FD 1E 02 F6 | 	mov	local01, result1
11724     38 4E 05 F1 | 	add	fp, #56
11728     A7 20 02 FB | 	rdlong	local02, fp
1172c     10 1F 02 FD | 	qmul	local01, local02
11730     04 4E 85 F1 | 	sub	fp, #4
11734     A7 22 02 FB | 	rdlong	local03, fp
11738     10 4E 85 F1 | 	sub	fp, #16
1173c     A7 12 02 FB | 	rdlong	arg01, fp
11740     24 4E 85 F1 | 	sub	fp, #36
11744     08 12 06 F1 | 	add	arg01, #8
11748     18 20 62 FD | 	getqx	local02
1174c     10 23 02 F1 | 	add	local03, local02
11750     C4 BF B0 FD | 	call	#_pslpeek
11754     FD 20 02 F6 | 	mov	local02, result1
11758     24 4E 05 F1 | 	add	fp, #36
1175c     A7 12 02 FB | 	rdlong	arg01, fp
11760     24 4E 85 F1 | 	sub	fp, #36
11764     04 12 06 F1 | 	add	arg01, #4
11768     AC BF B0 FD | 	call	#_pslpeek
1176c     FD 20 02 FD | 	qmul	local02, result1
11770     3C 4E 05 F1 | 	add	fp, #60
11774     A7 20 02 FB | 	rdlong	local02, fp
11778     18 1E 62 FD | 	getqx	local01
1177c     10 1F 02 FD | 	qmul	local01, local02
11780     10 4E 85 F1 | 	sub	fp, #16
11784     A7 20 02 FB | 	rdlong	local02, fp
11788     18 1E 62 FD | 	getqx	local01
1178c     0F 23 02 F1 | 	add	local03, local01
11790     11 21 02 FD | 	qmul	local02, local03
11794     04 4E 05 F1 | 	add	fp, #4
11798                 | ' 
11798                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
11798                 | ' select case arrtype
11798     18 22 62 FD | 	getqx	local03
1179c     11 25 02 F1 | 	add	local04, local03
117a0     A7 24 62 FC | 	wrlong	local04, fp
117a4     08 4E 85 F1 | 	sub	fp, #8
117a8     A7 26 02 FB | 	rdlong	local05, fp
117ac     28 4E 85 F1 | 	sub	fp, #40
117b0     00 27 86 F1 | 	sub	local05, #256
117b4     0C 26 26 F3 | 	fle	local05, #12
117b8     30 26 62 FD | 	jmprel	local05
117bc                 | LR__1398
117bc     30 00 90 FD | 	jmp	#LR__1399
117c0     58 00 90 FD | 	jmp	#LR__1400
117c4     6C 00 90 FD | 	jmp	#LR__1401
117c8     80 00 90 FD | 	jmp	#LR__1402
117cc     B0 00 90 FD | 	jmp	#LR__1403
117d0     E0 00 90 FD | 	jmp	#LR__1404
117d4     F4 00 90 FD | 	jmp	#LR__1405
117d8     08 01 90 FD | 	jmp	#LR__1406
117dc     1C 01 90 FD | 	jmp	#LR__1407
117e0     30 01 90 FD | 	jmp	#LR__1408
117e4     44 01 90 FD | 	jmp	#LR__1409
117e8     58 01 90 FD | 	jmp	#LR__1410
117ec     6C 01 90 FD | 	jmp	#LR__1411
117f0                 | LR__1399
117f0     A7 12 02 F6 | 	mov	arg01, fp
117f4     30 4E 05 F1 | 	add	fp, #48
117f8     A7 14 02 FB | 	rdlong	arg02, fp
117fc     30 4E 85 F1 | 	sub	fp, #48
11800     0C 16 06 F6 | 	mov	arg03, #12
11804     0B 00 00 FF 
11808     CC E4 05 F1 | 	add	objptr, ##5836
1180c     68 E6 B0 FD | 	call	#_psram_spin2_write
11810     0B 00 00 FF 
11814     CC E4 85 F1 | 	sub	objptr, ##5836
11818     48 01 90 FD | 	jmp	#LR__1412
1181c                 | LR__1400
1181c     30 4E 05 F1 | 	add	fp, #48
11820     A7 12 02 FB | 	rdlong	arg01, fp
11824     30 4E 85 F1 | 	sub	fp, #48
11828     A7 14 02 FB | 	rdlong	arg02, fp
1182c     48 BE B0 FD | 	call	#_pspoke
11830     30 01 90 FD | 	jmp	#LR__1412
11834                 | LR__1401
11834     30 4E 05 F1 | 	add	fp, #48
11838     A7 12 02 FB | 	rdlong	arg01, fp
1183c     30 4E 85 F1 | 	sub	fp, #48
11840     A7 14 02 FB | 	rdlong	arg02, fp
11844     30 BE B0 FD | 	call	#_pspoke
11848     18 01 90 FD | 	jmp	#LR__1412
1184c                 | LR__1402
1184c     30 4E 05 F1 | 	add	fp, #48
11850     A7 12 02 FB | 	rdlong	arg01, fp
11854     30 4E 85 F1 | 	sub	fp, #48
11858     A7 14 02 FB | 	rdlong	arg02, fp
1185c     18 BE B0 FD | 	call	#_pspoke
11860     30 4E 05 F1 | 	add	fp, #48
11864     A7 12 02 FB | 	rdlong	arg01, fp
11868     30 4E 85 F1 | 	sub	fp, #48
1186c     01 12 06 F1 | 	add	arg01, #1
11870     A7 14 02 FB | 	rdlong	arg02, fp
11874     08 14 46 F0 | 	shr	arg02, #8
11878     FC BD B0 FD | 	call	#_pspoke
1187c     E4 00 90 FD | 	jmp	#LR__1412
11880                 | LR__1403
11880     30 4E 05 F1 | 	add	fp, #48
11884     A7 12 02 FB | 	rdlong	arg01, fp
11888     30 4E 85 F1 | 	sub	fp, #48
1188c     A7 14 02 FB | 	rdlong	arg02, fp
11890     E4 BD B0 FD | 	call	#_pspoke
11894     30 4E 05 F1 | 	add	fp, #48
11898     A7 12 02 FB | 	rdlong	arg01, fp
1189c     30 4E 85 F1 | 	sub	fp, #48
118a0     01 12 06 F1 | 	add	arg01, #1
118a4     A7 14 02 FB | 	rdlong	arg02, fp
118a8     08 14 46 F0 | 	shr	arg02, #8
118ac     C8 BD B0 FD | 	call	#_pspoke
118b0     B0 00 90 FD | 	jmp	#LR__1412
118b4                 | LR__1404
118b4     30 4E 05 F1 | 	add	fp, #48
118b8     A7 12 02 FB | 	rdlong	arg01, fp
118bc     30 4E 85 F1 | 	sub	fp, #48
118c0     A7 14 02 FB | 	rdlong	arg02, fp
118c4     20 BD B0 FD | 	call	#_pslpoke
118c8     98 00 90 FD | 	jmp	#LR__1412
118cc                 | LR__1405
118cc     30 4E 05 F1 | 	add	fp, #48
118d0     A7 12 02 FB | 	rdlong	arg01, fp
118d4     30 4E 85 F1 | 	sub	fp, #48
118d8     A7 14 02 FB | 	rdlong	arg02, fp
118dc     08 BD B0 FD | 	call	#_pslpoke
118e0     80 00 90 FD | 	jmp	#LR__1412
118e4                 | LR__1406
118e4     30 4E 05 F1 | 	add	fp, #48
118e8     A7 12 02 FB | 	rdlong	arg01, fp
118ec     30 4E 85 F1 | 	sub	fp, #48
118f0     A7 14 02 FB | 	rdlong	arg02, fp
118f4     F0 BC B0 FD | 	call	#_pslpoke
118f8     68 00 90 FD | 	jmp	#LR__1412
118fc                 | LR__1407
118fc     30 4E 05 F1 | 	add	fp, #48
11900     A7 12 02 FB | 	rdlong	arg01, fp
11904     30 4E 85 F1 | 	sub	fp, #48
11908     A7 14 02 FB | 	rdlong	arg02, fp
1190c     D8 BC B0 FD | 	call	#_pslpoke
11910     50 00 90 FD | 	jmp	#LR__1412
11914                 | LR__1408
11914     30 4E 05 F1 | 	add	fp, #48
11918     A7 12 02 FB | 	rdlong	arg01, fp
1191c     30 4E 85 F1 | 	sub	fp, #48
11920     A7 14 02 FB | 	rdlong	arg02, fp
11924     C0 BC B0 FD | 	call	#_pslpoke
11928     38 00 90 FD | 	jmp	#LR__1412
1192c                 | LR__1409
1192c     30 4E 05 F1 | 	add	fp, #48
11930     A7 12 02 FB | 	rdlong	arg01, fp
11934     30 4E 85 F1 | 	sub	fp, #48
11938     A7 14 02 FB | 	rdlong	arg02, fp
1193c     A8 BC B0 FD | 	call	#_pslpoke
11940     20 00 90 FD | 	jmp	#LR__1412
11944                 | LR__1410
11944     30 4E 05 F1 | 	add	fp, #48
11948     A7 12 02 FB | 	rdlong	arg01, fp
1194c     30 4E 85 F1 | 	sub	fp, #48
11950     A7 14 02 FB | 	rdlong	arg02, fp
11954     90 BC B0 FD | 	call	#_pslpoke
11958     08 00 90 FD | 	jmp	#LR__1412
1195c                 | LR__1411
1195c     32 12 06 F6 | 	mov	arg01, #50
11960     20 BB B0 FD | 	call	#_printerror
11964                 | LR__1412
11964                 | LR__1413
11964     A7 F0 03 F6 | 	mov	ptra, fp
11968     B2 00 A0 FD | 	call	#popregs_
1196c                 | _do_assign_ret
1196c     2D 00 64 FD | 	ret
11970                 | 
11970                 | ' 
11970                 | ' 
11970                 | ' ' --------------------- Read a variable and push to the stack
11970                 | ' 
11970                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
11970                 | ' 
11970                 | ' sub do_getvar
11970                 | _do_getvar
11970     04 4A 05 F6 | 	mov	COUNT_, #4
11974     A8 00 A0 FD | 	call	#pushregs_
11978     3C F0 07 F1 | 	add	ptra, #60
1197c                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
1197c                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1197c     4A 00 00 FF 
11980     80 E4 05 F1 | 	add	objptr, ##38016
11984     F2 1E 02 FB | 	rdlong	local01, objptr
11988     0F 17 02 F6 | 	mov	arg03, local01
1198c     01 16 66 F0 | 	shl	arg03, #1
11990     0F 17 02 F1 | 	add	arg03, local01
11994     02 16 66 F0 | 	shl	arg03, #2
11998     03 00 00 FF 
1199c     04 E4 85 F1 | 	sub	objptr, ##1540
119a0     F2 16 02 F1 | 	add	arg03, objptr
119a4     04 16 06 F1 | 	add	arg03, #4
119a8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
119ac     47 00 00 FF 
119b0     7C E4 85 F1 | 	sub	objptr, ##36476
119b4     C4 00 90 5D |  if_ne	jmp	#LR__1421
119b8     4A 00 00 FF 
119bc     80 E4 05 F1 | 	add	objptr, ##38016
119c0     F2 1E 02 FB | 	rdlong	local01, objptr
119c4     0F 13 02 F6 | 	mov	arg01, local01
119c8     01 12 66 F0 | 	shl	arg01, #1
119cc     0F 13 02 F1 | 	add	arg01, local01
119d0     02 12 66 F0 | 	shl	arg01, #2
119d4     03 00 00 FF 
119d8     04 E4 85 F1 | 	sub	objptr, ##1540
119dc     F2 12 02 F1 | 	add	arg01, objptr
119e0     09 1F 02 FB | 	rdlong	local01, arg01
119e4     04 1E 66 F0 | 	shl	local01, #4
119e8     32 00 00 FF 
119ec     84 E4 85 F1 | 	sub	objptr, ##25732
119f0     F2 1E 02 F1 | 	add	local01, objptr
119f4     04 1E 06 F1 | 	add	local01, #4
119f8     0F 13 02 FB | 	rdlong	arg01, local01
119fc     04 1E 06 F1 | 	add	local01, #4
11a00     0F 1F 02 FB | 	rdlong	local01, local01
11a04     A7 12 62 FC | 	wrlong	arg01, fp
11a08     04 4E 05 F1 | 	add	fp, #4
11a0c     A7 1E 62 FC | 	wrlong	local01, fp
11a10     35 00 00 FF 
11a14     88 E4 05 F1 | 	add	objptr, ##27272
11a18     F2 1E 02 FB | 	rdlong	local01, objptr
11a1c     0F 13 02 F6 | 	mov	arg01, local01
11a20     01 12 66 F0 | 	shl	arg01, #1
11a24     0F 13 02 F1 | 	add	arg01, local01
11a28     02 12 66 F0 | 	shl	arg01, #2
11a2c     03 00 00 FF 
11a30     04 E4 85 F1 | 	sub	objptr, ##1540
11a34     F2 12 02 F1 | 	add	arg01, objptr
11a38     09 1F 02 FB | 	rdlong	local01, arg01
11a3c     04 1E 66 F0 | 	shl	local01, #4
11a40     32 00 00 FF 
11a44     84 E4 85 F1 | 	sub	objptr, ##25732
11a48     F2 1E 02 F1 | 	add	local01, objptr
11a4c     0C 1E 06 F1 | 	add	local01, #12
11a50     0F 1F 02 FB | 	rdlong	local01, local01
11a54     04 4E 05 F1 | 	add	fp, #4
11a58     A7 1E 62 FC | 	wrlong	local01, fp
11a5c                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
11a5c                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
11a5c                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
11a5c     08 4E 85 F1 | 	sub	fp, #8
11a60     00 1F 16 F2 | 	cmp	local01, #256 wc
11a64     14 00 00 FF 
11a68     F8 E5 85 F1 | 	sub	objptr, ##10744
11a6c     0C 00 90 3D |  if_ae	jmp	#LR__1420
11a70     A7 12 02 F6 | 	mov	arg01, fp
11a74     78 A0 BF FD | 	call	#_push
11a78     A0 04 90 FD | 	jmp	#LR__1442
11a7c                 | LR__1420
11a7c                 | LR__1421
11a7c     4A 00 00 FF 
11a80     80 E4 05 F1 | 	add	objptr, ##38016
11a84     F2 16 02 FB | 	rdlong	arg03, objptr
11a88     0B 15 02 F6 | 	mov	arg02, arg03
11a8c     01 14 66 F0 | 	shl	arg02, #1
11a90     0B 15 02 F1 | 	add	arg02, arg03
11a94     02 14 66 F0 | 	shl	arg02, #2
11a98     03 00 00 FF 
11a9c     04 E4 85 F1 | 	sub	objptr, ##1540
11aa0     F2 14 02 F1 | 	add	arg02, objptr
11aa4     0A 17 02 FB | 	rdlong	arg03, arg02
11aa8     04 16 66 F0 | 	shl	arg03, #4
11aac     32 00 00 FF 
11ab0     84 E4 85 F1 | 	sub	objptr, ##25732
11ab4     F2 16 02 F1 | 	add	arg03, objptr
11ab8     04 16 06 F1 | 	add	arg03, #4
11abc     0B 13 02 FB | 	rdlong	arg01, arg03
11ac0     0C 4E 05 F1 | 	add	fp, #12
11ac4     A7 12 62 FC | 	wrlong	arg01, fp
11ac8     0C 4E 85 F1 | 	sub	fp, #12
11acc     14 00 00 FF 
11ad0     F8 E5 85 F1 | 	sub	objptr, ##10744
11ad4     40 BC B0 FD | 	call	#_pslpeek
11ad8     FD FA 31 F9 | 	getword	result1, result1, #0
11adc     10 4E 05 F1 | 	add	fp, #16
11ae0     A7 FA 61 FC | 	wrlong	result1, fp
11ae4     4A 00 00 FF 
11ae8     80 E4 05 F1 | 	add	objptr, ##38016
11aec     F2 16 02 FB | 	rdlong	arg03, objptr
11af0     0B 15 02 F6 | 	mov	arg02, arg03
11af4     01 14 66 F0 | 	shl	arg02, #1
11af8     0B 15 02 F1 | 	add	arg02, arg03
11afc     02 14 66 F0 | 	shl	arg02, #2
11b00     03 00 00 FF 
11b04     04 E4 85 F1 | 	sub	objptr, ##1540
11b08     F2 14 02 F1 | 	add	arg02, objptr
11b0c     04 14 06 F1 | 	add	arg02, #4
11b10     0A 17 02 FB | 	rdlong	arg03, arg02
11b14     04 4E 05 F1 | 	add	fp, #4
11b18     A7 16 62 FC | 	wrlong	arg03, fp
11b1c     08 4E 85 F1 | 	sub	fp, #8
11b20     A7 12 02 FB | 	rdlong	arg01, fp
11b24     0C 4E 85 F1 | 	sub	fp, #12
11b28     02 12 06 F1 | 	add	arg01, #2
11b2c     47 00 00 FF 
11b30     7C E4 85 F1 | 	sub	objptr, ##36476
11b34     88 BB B0 FD | 	call	#_pspeek
11b38     FD FA E1 F8 | 	getbyte	result1, result1, #0
11b3c     18 4E 05 F1 | 	add	fp, #24
11b40     A7 FA 61 FC | 	wrlong	result1, fp
11b44     0C 4E 85 F1 | 	sub	fp, #12
11b48     A7 12 02 FB | 	rdlong	arg01, fp
11b4c     0C 4E 85 F1 | 	sub	fp, #12
11b50     04 12 06 F1 | 	add	arg01, #4
11b54     C0 BB B0 FD | 	call	#_pslpeek
11b58     1C 4E 05 F1 | 	add	fp, #28
11b5c     A7 FA 61 FC | 	wrlong	result1, fp
11b60     10 4E 85 F1 | 	sub	fp, #16
11b64     A7 12 02 FB | 	rdlong	arg01, fp
11b68     0C 4E 85 F1 | 	sub	fp, #12
11b6c     08 12 06 F1 | 	add	arg01, #8
11b70     A4 BB B0 FD | 	call	#_pslpeek
11b74     20 4E 05 F1 | 	add	fp, #32
11b78     A7 FA 61 FC | 	wrlong	result1, fp
11b7c     14 4E 85 F1 | 	sub	fp, #20
11b80     A7 12 02 FB | 	rdlong	arg01, fp
11b84     0C 4E 85 F1 | 	sub	fp, #12
11b88     0C 12 06 F1 | 	add	arg01, #12
11b8c     88 BB B0 FD | 	call	#_pslpeek
11b90     24 4E 05 F1 | 	add	fp, #36
11b94     A7 FA 61 FC | 	wrlong	result1, fp
11b98                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
11b98                 | ' esize=pspeek(arrptr+2)
11b98                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
11b98                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
11b98                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
11b98                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
11b98     10 4E 85 F1 | 	sub	fp, #16
11b9c     A7 16 02 FB | 	rdlong	arg03, fp
11ba0     14 4E 85 F1 | 	sub	fp, #20
11ba4     03 16 16 F2 | 	cmp	arg03, #3 wc
11ba8     38 00 90 CD |  if_b	jmp	#LR__1422
11bac     A8 9E BF FD | 	call	#_pop
11bb0     FF 16 02 F6 | 	mov	arg03, result3
11bb4     A7 FA 61 FC | 	wrlong	result1, fp
11bb8     04 4E 05 F1 | 	add	fp, #4
11bbc     A7 FC 61 FC | 	wrlong	result2, fp
11bc0     04 4E 05 F1 | 	add	fp, #4
11bc4     A7 16 62 FC | 	wrlong	arg03, fp
11bc8     08 4E 85 F1 | 	sub	fp, #8
11bcc     A7 12 02 F6 | 	mov	arg01, fp
11bd0     54 3F B0 FD | 	call	#_converttoint
11bd4     30 4E 05 F1 | 	add	fp, #48
11bd8     A7 FA 61 FC | 	wrlong	result1, fp
11bdc     30 4E 85 F1 | 	sub	fp, #48
11be0     0C 00 90 FD | 	jmp	#LR__1423
11be4                 | LR__1422
11be4     30 4E 05 F1 | 	add	fp, #48
11be8     A7 00 68 FC | 	wrlong	#0, fp
11bec     30 4E 85 F1 | 	sub	fp, #48
11bf0                 | LR__1423
11bf0                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
11bf0     14 4E 05 F1 | 	add	fp, #20
11bf4     A7 16 02 FB | 	rdlong	arg03, fp
11bf8     14 4E 85 F1 | 	sub	fp, #20
11bfc     02 16 16 F2 | 	cmp	arg03, #2 wc
11c00     38 00 90 CD |  if_b	jmp	#LR__1424
11c04     50 9E BF FD | 	call	#_pop
11c08     FF 16 02 F6 | 	mov	arg03, result3
11c0c     A7 FA 61 FC | 	wrlong	result1, fp
11c10     04 4E 05 F1 | 	add	fp, #4
11c14     A7 FC 61 FC | 	wrlong	result2, fp
11c18     04 4E 05 F1 | 	add	fp, #4
11c1c     A7 16 62 FC | 	wrlong	arg03, fp
11c20     08 4E 85 F1 | 	sub	fp, #8
11c24     A7 12 02 F6 | 	mov	arg01, fp
11c28     FC 3E B0 FD | 	call	#_converttoint
11c2c     2C 4E 05 F1 | 	add	fp, #44
11c30     A7 FA 61 FC | 	wrlong	result1, fp
11c34     2C 4E 85 F1 | 	sub	fp, #44
11c38     0C 00 90 FD | 	jmp	#LR__1425
11c3c                 | LR__1424
11c3c     2C 4E 05 F1 | 	add	fp, #44
11c40     A7 00 68 FC | 	wrlong	#0, fp
11c44     2C 4E 85 F1 | 	sub	fp, #44
11c48                 | LR__1425
11c48                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
11c48     14 4E 05 F1 | 	add	fp, #20
11c4c     A7 16 02 FB | 	rdlong	arg03, fp
11c50     14 4E 85 F1 | 	sub	fp, #20
11c54     01 16 16 F2 | 	cmp	arg03, #1 wc
11c58     38 00 90 CD |  if_b	jmp	#LR__1426
11c5c     F8 9D BF FD | 	call	#_pop
11c60     FF 16 02 F6 | 	mov	arg03, result3
11c64     A7 FA 61 FC | 	wrlong	result1, fp
11c68     04 4E 05 F1 | 	add	fp, #4
11c6c     A7 FC 61 FC | 	wrlong	result2, fp
11c70     04 4E 05 F1 | 	add	fp, #4
11c74     A7 16 62 FC | 	wrlong	arg03, fp
11c78     08 4E 85 F1 | 	sub	fp, #8
11c7c     A7 12 02 F6 | 	mov	arg01, fp
11c80     A4 3E B0 FD | 	call	#_converttoint
11c84     28 4E 05 F1 | 	add	fp, #40
11c88     A7 FA 61 FC | 	wrlong	result1, fp
11c8c     28 4E 85 F1 | 	sub	fp, #40
11c90     0C 00 90 FD | 	jmp	#LR__1427
11c94                 | LR__1426
11c94     28 4E 05 F1 | 	add	fp, #40
11c98     A7 00 68 FC | 	wrlong	#0, fp
11c9c     28 4E 85 F1 | 	sub	fp, #40
11ca0                 | LR__1427
11ca0     0C 4E 05 F1 | 	add	fp, #12
11ca4     A7 20 02 FB | 	rdlong	local02, fp
11ca8     1C 4E 05 F1 | 	add	fp, #28
11cac     A7 22 02 FB | 	rdlong	local03, fp
11cb0     04 4E 05 F1 | 	add	fp, #4
11cb4     A7 FC 01 FB | 	rdlong	result2, fp
11cb8     10 4E 85 F1 | 	sub	fp, #16
11cbc     A7 FE 01 FB | 	rdlong	result3, fp
11cc0     FF FC 01 FD | 	qmul	result2, result3
11cc4     10 20 06 F1 | 	add	local02, #16
11cc8     14 4E 05 F1 | 	add	fp, #20
11ccc     A7 FC 01 FB | 	rdlong	result2, fp
11cd0     18 FA 61 FD | 	getqx	result1
11cd4     FF FC 01 FD | 	qmul	result2, result3
11cd8     FD 22 02 F1 | 	add	local03, result1
11cdc     10 4E 85 F1 | 	sub	fp, #16
11ce0     A7 FE 01 FB | 	rdlong	result3, fp
11ce4     18 FC 61 FD | 	getqx	result2
11ce8     FF FC 01 FD | 	qmul	result2, result3
11cec     08 4E 85 F1 | 	sub	fp, #8
11cf0     A7 FE 01 FB | 	rdlong	result3, fp
11cf4     18 FC 61 FD | 	getqx	result2
11cf8     FE 22 02 F1 | 	add	local03, result2
11cfc     FF 22 02 FD | 	qmul	local03, result3
11d00     1C 4E 05 F1 | 	add	fp, #28
11d04                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
11d04                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
11d04                 | ' 
11d04                 | ' select case vartype
11d04     18 FC 61 FD | 	getqx	result2
11d08     FE 20 02 F1 | 	add	local02, result2
11d0c     A7 20 62 FC | 	wrlong	local02, fp
11d10     24 4E 85 F1 | 	sub	fp, #36
11d14     A7 24 02 FB | 	rdlong	local04, fp
11d18     10 4E 85 F1 | 	sub	fp, #16
11d1c     00 25 86 F1 | 	sub	local04, #256
11d20     0C 24 26 F3 | 	fle	local04, #12
11d24     30 24 62 FD | 	jmprel	local04
11d28                 | LR__1428
11d28     30 00 90 FD | 	jmp	#LR__1429
11d2c     58 00 90 FD | 	jmp	#LR__1430
11d30     8C 00 90 FD | 	jmp	#LR__1431
11d34     AC 00 90 FD | 	jmp	#LR__1432
11d38     E8 00 90 FD | 	jmp	#LR__1433
11d3c     08 01 90 FD | 	jmp	#LR__1434
11d40     24 01 90 FD | 	jmp	#LR__1435
11d44     40 01 90 FD | 	jmp	#LR__1436
11d48     50 01 90 FD | 	jmp	#LR__1437
11d4c     60 01 90 FD | 	jmp	#LR__1438
11d50     7C 01 90 FD | 	jmp	#LR__1439
11d54     8C 01 90 FD | 	jmp	#LR__1440
11d58     B8 01 90 FD | 	jmp	#LR__1441
11d5c                 | LR__1429
11d5c     A7 12 02 F6 | 	mov	arg01, fp
11d60     34 4E 05 F1 | 	add	fp, #52
11d64     A7 14 02 FB | 	rdlong	arg02, fp
11d68     34 4E 85 F1 | 	sub	fp, #52
11d6c     0C 16 06 F6 | 	mov	arg03, #12
11d70     0B 00 00 FF 
11d74     CC E4 05 F1 | 	add	objptr, ##5836
11d78     60 E0 B0 FD | 	call	#_psram_spin2_read1
11d7c     0B 00 00 FF 
11d80     CC E4 85 F1 | 	sub	objptr, ##5836
11d84     8C 01 90 FD | 	jmp	#LR__1441
11d88                 | LR__1430
11d88     08 4E 05 F1 | 	add	fp, #8
11d8c     A7 38 68 FC | 	wrlong	#28, fp
11d90     2C 4E 05 F1 | 	add	fp, #44
11d94     A7 12 02 FB | 	rdlong	arg01, fp
11d98     34 4E 85 F1 | 	sub	fp, #52
11d9c     20 B9 B0 FD | 	call	#_pspeek
11da0     FD FA E1 F8 | 	getbyte	result1, result1, #0
11da4     A7 FA 61 FC | 	wrlong	result1, fp
11da8     80 FA 15 F2 | 	cmp	result1, #128 wc
11dac     00 1F 66 36 |  if_ae	neg	local01, #256
11db0     A7 22 02 3B |  if_ae	rdlong	local03, fp
11db4     11 1F 42 35 |  if_ae	or	local01, local03
11db8     A7 1E 62 3C |  if_ae	wrlong	local01, fp
11dbc     54 01 90 FD | 	jmp	#LR__1441
11dc0                 | LR__1431
11dc0     08 4E 05 F1 | 	add	fp, #8
11dc4     A7 3A 68 FC | 	wrlong	#29, fp
11dc8     2C 4E 05 F1 | 	add	fp, #44
11dcc     A7 12 02 FB | 	rdlong	arg01, fp
11dd0     34 4E 85 F1 | 	sub	fp, #52
11dd4     E8 B8 B0 FD | 	call	#_pspeek
11dd8     FD FA E1 F8 | 	getbyte	result1, result1, #0
11ddc     A7 FA 61 FC | 	wrlong	result1, fp
11de0     30 01 90 FD | 	jmp	#LR__1441
11de4                 | LR__1432
11de4     08 4E 05 F1 | 	add	fp, #8
11de8     A7 38 68 FC | 	wrlong	#28, fp
11dec     2C 4E 05 F1 | 	add	fp, #44
11df0     A7 12 02 FB | 	rdlong	arg01, fp
11df4     34 4E 85 F1 | 	sub	fp, #52
11df8     1C B9 B0 FD | 	call	#_pslpeek
11dfc     FD FA 31 F9 | 	getword	result1, result1, #0
11e00     A7 FA 61 FC | 	wrlong	result1, fp
11e04     40 00 00 FF 
11e08     00 FA 15 F2 | 	cmp	result1, ##32768 wc
11e0c     FF 7F 00 3F 
11e10     00 1F 06 36 |  if_ae	mov	local01, ##16776960
11e14     A7 22 02 3B |  if_ae	rdlong	local03, fp
11e18     11 1F 42 35 |  if_ae	or	local01, local03
11e1c     A7 1E 62 3C |  if_ae	wrlong	local01, fp
11e20     F0 00 90 FD | 	jmp	#LR__1441
11e24                 | LR__1433
11e24     08 4E 05 F1 | 	add	fp, #8
11e28     A7 3A 68 FC | 	wrlong	#29, fp
11e2c     2C 4E 05 F1 | 	add	fp, #44
11e30     A7 12 02 FB | 	rdlong	arg01, fp
11e34     34 4E 85 F1 | 	sub	fp, #52
11e38     DC B8 B0 FD | 	call	#_pslpeek
11e3c     FD FA 31 F9 | 	getword	result1, result1, #0
11e40     A7 FA 61 FC | 	wrlong	result1, fp
11e44     CC 00 90 FD | 	jmp	#LR__1441
11e48                 | LR__1434
11e48     08 4E 05 F1 | 	add	fp, #8
11e4c     A7 38 68 FC | 	wrlong	#28, fp
11e50     2C 4E 05 F1 | 	add	fp, #44
11e54     A7 12 02 FB | 	rdlong	arg01, fp
11e58     34 4E 85 F1 | 	sub	fp, #52
11e5c     B8 B8 B0 FD | 	call	#_pslpeek
11e60     A7 FA 61 FC | 	wrlong	result1, fp
11e64     AC 00 90 FD | 	jmp	#LR__1441
11e68                 | LR__1435
11e68     08 4E 05 F1 | 	add	fp, #8
11e6c     A7 3A 68 FC | 	wrlong	#29, fp
11e70     2C 4E 05 F1 | 	add	fp, #44
11e74     A7 12 02 FB | 	rdlong	arg01, fp
11e78     34 4E 85 F1 | 	sub	fp, #52
11e7c     98 B8 B0 FD | 	call	#_pslpeek
11e80     A7 FA 61 FC | 	wrlong	result1, fp
11e84     8C 00 90 FD | 	jmp	#LR__1441
11e88                 | LR__1436
11e88     08 4E 05 F1 | 	add	fp, #8
11e8c     A7 FE 69 FC | 	wrlong	#255, fp
11e90     08 4E 85 F1 | 	sub	fp, #8
11e94     A7 60 68 FC | 	wrlong	#48, fp
11e98     78 00 90 FD | 	jmp	#LR__1441
11e9c                 | LR__1437
11e9c     08 4E 05 F1 | 	add	fp, #8
11ea0     A7 FE 69 FC | 	wrlong	#255, fp
11ea4     08 4E 85 F1 | 	sub	fp, #8
11ea8     A7 60 68 FC | 	wrlong	#48, fp
11eac     64 00 90 FD | 	jmp	#LR__1441
11eb0                 | LR__1438
11eb0     08 4E 05 F1 | 	add	fp, #8
11eb4     A7 3C 68 FC | 	wrlong	#30, fp
11eb8     2C 4E 05 F1 | 	add	fp, #44
11ebc     A7 12 02 FB | 	rdlong	arg01, fp
11ec0     34 4E 85 F1 | 	sub	fp, #52
11ec4     50 B8 B0 FD | 	call	#_pslpeek
11ec8     A7 FA 61 FC | 	wrlong	result1, fp
11ecc     44 00 90 FD | 	jmp	#LR__1441
11ed0                 | LR__1439
11ed0     08 4E 05 F1 | 	add	fp, #8
11ed4     A7 FE 69 FC | 	wrlong	#255, fp
11ed8     08 4E 85 F1 | 	sub	fp, #8
11edc     A7 60 68 FC | 	wrlong	#48, fp
11ee0     30 00 90 FD | 	jmp	#LR__1441
11ee4                 | LR__1440
11ee4     08 4E 05 F1 | 	add	fp, #8
11ee8     A7 3E 68 FC | 	wrlong	#31, fp
11eec     2C 4E 05 F1 | 	add	fp, #44
11ef0     A7 12 02 FB | 	rdlong	arg01, fp
11ef4     34 4E 85 F1 | 	sub	fp, #52
11ef8     1C B8 B0 FD | 	call	#_pslpeek
11efc     A7 FA 61 FC | 	wrlong	result1, fp
11f00     00 04 00 FF 
11f04     00 FA 15 F2 | 	cmp	result1, ##524288 wc
11f08     08 4E 05 31 |  if_ae	add	fp, #8
11f0c     A7 56 68 3C |  if_ae	wrlong	#43, fp
11f10     08 4E 85 31 |  if_ae	sub	fp, #8
11f14                 | LR__1441
11f14     A7 12 02 F6 | 	mov	arg01, fp
11f18     D4 9B BF FD | 	call	#_push
11f1c                 | LR__1442
11f1c     A7 F0 03 F6 | 	mov	ptra, fp
11f20     B2 00 A0 FD | 	call	#popregs_
11f24                 | _do_getvar_ret
11f24     2D 00 64 FD | 	ret
11f28                 | 
11f28                 | ' 
11f28                 | ' 
11f28                 | ' sub do_getaddr
11f28                 | _do_getaddr
11f28     01 4A 05 F6 | 	mov	COUNT_, #1
11f2c     A8 00 A0 FD | 	call	#pushregs_
11f30     38 F0 07 F1 | 	add	ptra, #56
11f34                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
11f34                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
11f34     4A 00 00 FF 
11f38     80 E4 05 F1 | 	add	objptr, ##38016
11f3c     F2 12 02 FB | 	rdlong	arg01, objptr
11f40     09 FD 01 F6 | 	mov	result2, arg01
11f44     01 FC 65 F0 | 	shl	result2, #1
11f48     09 FD 01 F1 | 	add	result2, arg01
11f4c     02 FC 65 F0 | 	shl	result2, #2
11f50     03 00 00 FF 
11f54     04 E4 85 F1 | 	sub	objptr, ##1540
11f58     F2 FC 01 F1 | 	add	result2, objptr
11f5c     04 FC 05 F1 | 	add	result2, #4
11f60     FE FC 09 FB | 	rdlong	result2, result2 wz
11f64     47 00 00 FF 
11f68     7C E4 85 F1 | 	sub	objptr, ##36476
11f6c     C4 00 90 5D |  if_ne	jmp	#LR__1450
11f70     4A 00 00 FF 
11f74     80 E4 05 F1 | 	add	objptr, ##38016
11f78     F2 12 02 FB | 	rdlong	arg01, objptr
11f7c     09 FD 01 F6 | 	mov	result2, arg01
11f80     01 FC 65 F0 | 	shl	result2, #1
11f84     09 FD 01 F1 | 	add	result2, arg01
11f88     02 FC 65 F0 | 	shl	result2, #2
11f8c     03 00 00 FF 
11f90     04 E4 85 F1 | 	sub	objptr, ##1540
11f94     F2 FC 01 F1 | 	add	result2, objptr
11f98     FE 12 02 FB | 	rdlong	arg01, result2
11f9c     04 12 66 F0 | 	shl	arg01, #4
11fa0     32 00 00 FF 
11fa4     84 E4 85 F1 | 	sub	objptr, ##25732
11fa8     F2 12 02 F1 | 	add	arg01, objptr
11fac     0C 12 06 F1 | 	add	arg01, #12
11fb0     09 13 02 FB | 	rdlong	arg01, arg01
11fb4     08 4E 05 F1 | 	add	fp, #8
11fb8     A7 12 62 FC | 	wrlong	arg01, fp
11fbc                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
11fbc                 | '    if t1.result_type>=array_no_type then goto 2200
11fbc     08 4E 85 F1 | 	sub	fp, #8
11fc0     00 13 16 F2 | 	cmp	arg01, #256 wc
11fc4     14 00 00 FF 
11fc8     F8 E5 85 F1 | 	sub	objptr, ##10744
11fcc     64 00 90 3D |  if_ae	jmp	#LR__1451
11fd0     4A 00 00 FF 
11fd4     80 E4 05 F1 | 	add	objptr, ##38016
11fd8     F2 12 02 FB | 	rdlong	arg01, objptr
11fdc     09 FB 01 F6 | 	mov	result1, arg01
11fe0     01 FA 65 F0 | 	shl	result1, #1
11fe4     09 FB 01 F1 | 	add	result1, arg01
11fe8     02 FA 65 F0 | 	shl	result1, #2
11fec     03 00 00 FF 
11ff0     04 E4 85 F1 | 	sub	objptr, ##1540
11ff4     F2 FA 01 F1 | 	add	result1, objptr
11ff8     FD FA 01 FB | 	rdlong	result1, result1
11ffc     04 FA 65 F0 | 	shl	result1, #4
12000     32 00 00 FF 
12004     84 E4 85 F1 | 	sub	objptr, ##25732
12008     F2 FA 01 F1 | 	add	result1, objptr
1200c     04 FA 05 F1 | 	add	result1, #4
12010     14 00 00 FF 
12014     F8 E5 85 F1 | 	sub	objptr, ##10744
12018     A7 FA 61 FC | 	wrlong	result1, fp
1201c     08 4E 05 F1 | 	add	fp, #8
12020     A7 3A 68 FC | 	wrlong	#29, fp
12024     08 4E 85 F1 | 	sub	fp, #8
12028     A7 12 02 F6 | 	mov	arg01, fp
1202c     C0 9A BF FD | 	call	#_push
12030                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
12030                 | '   t1.result_type=result_uint
12030                 | '   push t1 : return
12030     D8 02 90 FD | 	jmp	#LR__1460
12034                 | LR__1450
12034                 | LR__1451
12034     4A 00 00 FF 
12038     80 E4 05 F1 | 	add	objptr, ##38016
1203c     F2 FE 01 FB | 	rdlong	result3, objptr
12040     FF 12 02 F6 | 	mov	arg01, result3
12044     01 12 66 F0 | 	shl	arg01, #1
12048     FF 12 02 F1 | 	add	arg01, result3
1204c     02 12 66 F0 | 	shl	arg01, #2
12050     03 00 00 FF 
12054     04 E4 85 F1 | 	sub	objptr, ##1540
12058     F2 12 02 F1 | 	add	arg01, objptr
1205c     09 13 02 FB | 	rdlong	arg01, arg01
12060     04 12 66 F0 | 	shl	arg01, #4
12064     32 00 00 FF 
12068     84 E4 85 F1 | 	sub	objptr, ##25732
1206c     F2 12 02 F1 | 	add	arg01, objptr
12070     04 12 06 F1 | 	add	arg01, #4
12074     09 13 02 FB | 	rdlong	arg01, arg01
12078     0C 4E 05 F1 | 	add	fp, #12
1207c     A7 12 62 FC | 	wrlong	arg01, fp
12080     0C 4E 85 F1 | 	sub	fp, #12
12084     14 00 00 FF 
12088     F8 E5 85 F1 | 	sub	objptr, ##10744
1208c     88 B6 B0 FD | 	call	#_pslpeek
12090     FD FA 31 F9 | 	getword	result1, result1, #0
12094     10 4E 05 F1 | 	add	fp, #16
12098     A7 FA 61 FC | 	wrlong	result1, fp
1209c     4A 00 00 FF 
120a0     80 E4 05 F1 | 	add	objptr, ##38016
120a4     F2 FE 01 FB | 	rdlong	result3, objptr
120a8     FF 12 02 F6 | 	mov	arg01, result3
120ac     01 12 66 F0 | 	shl	arg01, #1
120b0     FF 12 02 F1 | 	add	arg01, result3
120b4     02 12 66 F0 | 	shl	arg01, #2
120b8     03 00 00 FF 
120bc     04 E4 85 F1 | 	sub	objptr, ##1540
120c0     F2 12 02 F1 | 	add	arg01, objptr
120c4     04 12 06 F1 | 	add	arg01, #4
120c8     09 13 02 FB | 	rdlong	arg01, arg01
120cc     04 4E 05 F1 | 	add	fp, #4
120d0     A7 12 62 FC | 	wrlong	arg01, fp
120d4     08 4E 85 F1 | 	sub	fp, #8
120d8     A7 12 02 FB | 	rdlong	arg01, fp
120dc     0C 4E 85 F1 | 	sub	fp, #12
120e0     02 12 06 F1 | 	add	arg01, #2
120e4     47 00 00 FF 
120e8     7C E4 85 F1 | 	sub	objptr, ##36476
120ec     D0 B5 B0 FD | 	call	#_pspeek
120f0     FD FA E1 F8 | 	getbyte	result1, result1, #0
120f4     18 4E 05 F1 | 	add	fp, #24
120f8     A7 FA 61 FC | 	wrlong	result1, fp
120fc     0C 4E 85 F1 | 	sub	fp, #12
12100     A7 12 02 FB | 	rdlong	arg01, fp
12104     0C 4E 85 F1 | 	sub	fp, #12
12108     04 12 06 F1 | 	add	arg01, #4
1210c     08 B6 B0 FD | 	call	#_pslpeek
12110     1C 4E 05 F1 | 	add	fp, #28
12114     A7 FA 61 FC | 	wrlong	result1, fp
12118     10 4E 85 F1 | 	sub	fp, #16
1211c     A7 12 02 FB | 	rdlong	arg01, fp
12120     0C 4E 85 F1 | 	sub	fp, #12
12124     08 12 06 F1 | 	add	arg01, #8
12128     EC B5 B0 FD | 	call	#_pslpeek
1212c     20 4E 05 F1 | 	add	fp, #32
12130     A7 FA 61 FC | 	wrlong	result1, fp
12134     14 4E 85 F1 | 	sub	fp, #20
12138     A7 12 02 FB | 	rdlong	arg01, fp
1213c     0C 4E 85 F1 | 	sub	fp, #12
12140     0C 12 06 F1 | 	add	arg01, #12
12144     D0 B5 B0 FD | 	call	#_pslpeek
12148     24 4E 05 F1 | 	add	fp, #36
1214c     A7 FA 61 FC | 	wrlong	result1, fp
12150                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
12150                 | ' esize=pspeek(arrptr+2)
12150                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
12150                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
12150                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
12150                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
12150     10 4E 85 F1 | 	sub	fp, #16
12154     A7 12 02 FB | 	rdlong	arg01, fp
12158     14 4E 85 F1 | 	sub	fp, #20
1215c     03 12 16 F2 | 	cmp	arg01, #3 wc
12160     34 00 90 CD |  if_b	jmp	#LR__1452
12164     F0 98 BF FD | 	call	#_pop
12168     A7 FA 61 FC | 	wrlong	result1, fp
1216c     04 4E 05 F1 | 	add	fp, #4
12170     A7 FC 61 FC | 	wrlong	result2, fp
12174     04 4E 05 F1 | 	add	fp, #4
12178     A7 FE 61 FC | 	wrlong	result3, fp
1217c     08 4E 85 F1 | 	sub	fp, #8
12180     A7 12 02 F6 | 	mov	arg01, fp
12184     A0 39 B0 FD | 	call	#_converttoint
12188     30 4E 05 F1 | 	add	fp, #48
1218c     A7 FA 61 FC | 	wrlong	result1, fp
12190     30 4E 85 F1 | 	sub	fp, #48
12194     0C 00 90 FD | 	jmp	#LR__1453
12198                 | LR__1452
12198     30 4E 05 F1 | 	add	fp, #48
1219c     A7 00 68 FC | 	wrlong	#0, fp
121a0     30 4E 85 F1 | 	sub	fp, #48
121a4                 | LR__1453
121a4                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
121a4     14 4E 05 F1 | 	add	fp, #20
121a8     A7 12 02 FB | 	rdlong	arg01, fp
121ac     14 4E 85 F1 | 	sub	fp, #20
121b0     02 12 16 F2 | 	cmp	arg01, #2 wc
121b4     34 00 90 CD |  if_b	jmp	#LR__1454
121b8     9C 98 BF FD | 	call	#_pop
121bc     A7 FA 61 FC | 	wrlong	result1, fp
121c0     04 4E 05 F1 | 	add	fp, #4
121c4     A7 FC 61 FC | 	wrlong	result2, fp
121c8     04 4E 05 F1 | 	add	fp, #4
121cc     A7 FE 61 FC | 	wrlong	result3, fp
121d0     08 4E 85 F1 | 	sub	fp, #8
121d4     A7 12 02 F6 | 	mov	arg01, fp
121d8     4C 39 B0 FD | 	call	#_converttoint
121dc     2C 4E 05 F1 | 	add	fp, #44
121e0     A7 FA 61 FC | 	wrlong	result1, fp
121e4     2C 4E 85 F1 | 	sub	fp, #44
121e8     0C 00 90 FD | 	jmp	#LR__1455
121ec                 | LR__1454
121ec     2C 4E 05 F1 | 	add	fp, #44
121f0     A7 00 68 FC | 	wrlong	#0, fp
121f4     2C 4E 85 F1 | 	sub	fp, #44
121f8                 | LR__1455
121f8                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
121f8     14 4E 05 F1 | 	add	fp, #20
121fc     A7 12 02 FB | 	rdlong	arg01, fp
12200     14 4E 85 F1 | 	sub	fp, #20
12204     01 12 16 F2 | 	cmp	arg01, #1 wc
12208     34 00 90 CD |  if_b	jmp	#LR__1456
1220c     48 98 BF FD | 	call	#_pop
12210     A7 FA 61 FC | 	wrlong	result1, fp
12214     04 4E 05 F1 | 	add	fp, #4
12218     A7 FC 61 FC | 	wrlong	result2, fp
1221c     04 4E 05 F1 | 	add	fp, #4
12220     A7 FE 61 FC | 	wrlong	result3, fp
12224     08 4E 85 F1 | 	sub	fp, #8
12228     A7 12 02 F6 | 	mov	arg01, fp
1222c     F8 38 B0 FD | 	call	#_converttoint
12230     28 4E 05 F1 | 	add	fp, #40
12234     A7 FA 61 FC | 	wrlong	result1, fp
12238     28 4E 85 F1 | 	sub	fp, #40
1223c     0C 00 90 FD | 	jmp	#LR__1457
12240                 | LR__1456
12240     28 4E 05 F1 | 	add	fp, #40
12244     A7 00 68 FC | 	wrlong	#0, fp
12248     28 4E 85 F1 | 	sub	fp, #40
1224c                 | LR__1457
1224c                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1224c                 | ' if numpar>0 then
1224c     14 4E 05 F1 | 	add	fp, #20
12250     A7 FE 01 FB | 	rdlong	result3, fp
12254     14 4E 85 F1 | 	sub	fp, #20
12258     01 FE 15 F2 | 	cmp	result3, #1 wc
1225c     8C 00 90 CD |  if_b	jmp	#LR__1458
12260     0C 4E 05 F1 | 	add	fp, #12
12264     A7 FC 01 FB | 	rdlong	result2, fp
12268     1C 4E 05 F1 | 	add	fp, #28
1226c     A7 FE 01 FB | 	rdlong	result3, fp
12270     04 4E 05 F1 | 	add	fp, #4
12274     A7 12 02 FB | 	rdlong	arg01, fp
12278     10 4E 85 F1 | 	sub	fp, #16
1227c     A7 FA 01 FB | 	rdlong	result1, fp
12280     FD 12 02 FD | 	qmul	arg01, result1
12284     10 FC 05 F1 | 	add	result2, #16
12288     14 4E 05 F1 | 	add	fp, #20
1228c     A7 1E 02 FB | 	rdlong	local01, fp
12290     18 12 62 FD | 	getqx	arg01
12294     FD 1E 02 FD | 	qmul	local01, result1
12298     09 FF 01 F1 | 	add	result3, arg01
1229c     10 4E 85 F1 | 	sub	fp, #16
122a0     A7 1E 02 FB | 	rdlong	local01, fp
122a4     18 FA 61 FD | 	getqx	result1
122a8     0F FB 01 FD | 	qmul	result1, local01
122ac     08 4E 85 F1 | 	sub	fp, #8
122b0     A7 1E 02 FB | 	rdlong	local01, fp
122b4     18 FA 61 FD | 	getqx	result1
122b8     FD FE 01 F1 | 	add	result3, result1
122bc     0F FF 01 FD | 	qmul	result3, local01
122c0     1C 4E 05 F1 | 	add	fp, #28
122c4     18 1E 62 FD | 	getqx	local01
122c8     0F FD 01 F1 | 	add	result2, local01
122cc     A7 FC 61 FC | 	wrlong	result2, fp
122d0     2C 4E 85 F1 | 	sub	fp, #44
122d4     A7 3A 68 FC | 	wrlong	#29, fp
122d8     2C 4E 05 F1 | 	add	fp, #44
122dc     A7 1E 02 FB | 	rdlong	local01, fp
122e0     34 4E 85 F1 | 	sub	fp, #52
122e4     A7 1E 62 FC | 	wrlong	local01, fp
122e8     18 00 90 FD | 	jmp	#LR__1459
122ec                 | LR__1458
122ec     08 4E 05 F1 | 	add	fp, #8
122f0     A7 3A 68 FC | 	wrlong	#29, fp
122f4     04 4E 05 F1 | 	add	fp, #4
122f8     A7 1E 02 FB | 	rdlong	local01, fp
122fc     0C 4E 85 F1 | 	sub	fp, #12
12300     A7 1E 62 FC | 	wrlong	local01, fp
12304                 | LR__1459
12304     A7 12 02 F6 | 	mov	arg01, fp
12308     E4 97 BF FD | 	call	#_push
1230c                 | LR__1460
1230c     A7 F0 03 F6 | 	mov	ptra, fp
12310     B2 00 A0 FD | 	call	#popregs_
12314                 | _do_getaddr_ret
12314     2D 00 64 FD | 	ret
12318                 | 
12318                 | ' 
12318                 | ' 
12318                 | ' sub do_inkey
12318                 | _do_inkey
12318     02 4A 05 F6 | 	mov	COUNT_, #2
1231c     A8 00 A0 FD | 	call	#pushregs_
12320     0C F0 07 F1 | 	add	ptra, #12
12324     E0 DE B0 FD | 	call	#_usbnew_spin2_get_key
12328     45 00 00 FF 
1232c     74 E4 05 F1 | 	add	objptr, ##35444
12330     F2 FA 61 FC | 	wrlong	result1, objptr
12334                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
12334     45 00 00 FF 
12338     74 E4 85 F1 | 	sub	objptr, ##35444
1233c     00 FA 0D F2 | 	cmp	result1, #0 wz
12340     94 00 90 AD |  if_e	jmp	#LR__1471
12344     45 00 00 FF 
12348     74 E4 05 F1 | 	add	objptr, ##35444
1234c     F2 1C 02 FB | 	rdlong	arg06, objptr
12350     45 00 00 FF 
12354     74 E4 85 F1 | 	sub	objptr, ##35444
12358     00 00 40 FF 
1235c     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
12360     45 00 00 CF 
12364     74 E4 05 C1 |  if_b	add	objptr, ##35444
12368     F2 1E 02 CB |  if_b	rdlong	local01, objptr
1236c     45 00 00 CF 
12370     74 E4 85 C1 |  if_b	sub	objptr, ##35444
12374     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
12378     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
1237c     58 00 90 3D |  if_ae	jmp	#LR__1471
12380                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
12380     50 00 00 FF 
12384     10 E5 05 F1 | 	add	objptr, ##41232
12388     F2 1C 02 FB | 	rdlong	arg06, objptr
1238c     50 00 00 FF 
12390     10 E5 85 F1 | 	sub	objptr, ##41232
12394     01 1C 0E F2 | 	cmp	arg06, #1 wz
12398     3C 00 90 5D |  if_ne	jmp	#LR__1470
1239c     51 00 00 FF 
123a0     B4 E5 05 F1 | 	add	objptr, ##41908
123a4     F2 14 02 FB | 	rdlong	arg02, objptr
123a8     04 E4 85 F1 | 	sub	objptr, #4
123ac     F2 1A 02 FB | 	rdlong	arg05, objptr
123b0     07 12 06 F6 | 	mov	arg01, #7
123b4     56 00 00 FF 
123b8     44 16 06 F6 | 	mov	arg03, ##44100
123bc     0C 18 C6 F9 | 	decod	arg04, #12
123c0     01 1C 66 F6 | 	neg	arg06, #1
123c4     46 00 00 FF 
123c8     E4 E4 85 F1 | 	sub	objptr, ##36068
123cc     DC E1 B0 FD | 	call	#_audio096_spin2_play
123d0     0B 00 00 FF 
123d4     CC E4 85 F1 | 	sub	objptr, ##5836
123d8                 | LR__1470
123d8                 | LR__1471
123d8                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
123d8     45 00 00 FF 
123dc     74 E4 05 F1 | 	add	objptr, ##35444
123e0     F2 1C 0A FB | 	rdlong	arg06, objptr wz
123e4     45 00 00 FF 
123e8     74 E4 85 F1 | 	sub	objptr, ##35444
123ec     D4 01 90 AD |  if_e	jmp	#LR__1480
123f0     45 00 00 FF 
123f4     74 E4 05 F1 | 	add	objptr, ##35444
123f8     F2 1C 02 FB | 	rdlong	arg06, objptr
123fc     45 00 00 FF 
12400     74 E4 85 F1 | 	sub	objptr, ##35444
12404     00 00 40 FF 
12408     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
1240c     45 00 00 CF 
12410     74 E4 05 C1 |  if_b	add	objptr, ##35444
12414     F2 1E 02 CB |  if_b	rdlong	local01, objptr
12418     45 00 00 CF 
1241c     74 E4 85 C1 |  if_b	sub	objptr, ##35444
12420     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
12424     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
12428     98 01 90 3D |  if_ae	jmp	#LR__1480
1242c                 | '   if leds and 2 = 2 then 
1242c     51 00 00 FF 
12430     DC E5 05 F1 | 	add	objptr, ##41948
12434     F2 1E 0A FB | 	rdlong	local01, objptr wz
12438     51 00 00 FF 
1243c     DC E5 85 F1 | 	sub	objptr, ##41948
12440     58 01 90 AD |  if_e	jmp	#LR__1479
12444                 | '     if key>96 andalso key<123 then
12444     45 00 00 FF 
12448     74 E4 05 F1 | 	add	objptr, ##35444
1244c     F2 1E 02 FB | 	rdlong	local01, objptr
12450     45 00 00 FF 
12454     74 E4 85 F1 | 	sub	objptr, ##35444
12458     61 1E 16 F2 | 	cmp	local01, #97 wc
1245c     3C 00 90 CD |  if_b	jmp	#LR__1472
12460     45 00 00 FF 
12464     74 E4 05 F1 | 	add	objptr, ##35444
12468     F2 1E 02 FB | 	rdlong	local01, objptr
1246c     45 00 00 FF 
12470     74 E4 85 F1 | 	sub	objptr, ##35444
12474     7B 1E 16 F2 | 	cmp	local01, #123 wc
12478     20 00 90 3D |  if_ae	jmp	#LR__1472
1247c     45 00 00 FF 
12480     74 E4 05 F1 | 	add	objptr, ##35444
12484     F2 1E 02 FB | 	rdlong	local01, objptr
12488     20 1E 86 F1 | 	sub	local01, #32
1248c     F2 1E 62 FC | 	wrlong	local01, objptr
12490     45 00 00 FF 
12494     74 E4 85 F1 | 	sub	objptr, ##35444
12498     00 01 90 FD | 	jmp	#LR__1478
1249c                 | LR__1472
1249c     45 00 00 FF 
124a0     74 E4 05 F1 | 	add	objptr, ##35444
124a4     F2 1E 02 FB | 	rdlong	local01, objptr
124a8     45 00 00 FF 
124ac     74 E4 85 F1 | 	sub	objptr, ##35444
124b0     41 1E 16 F2 | 	cmp	local01, #65 wc
124b4     3C 00 90 CD |  if_b	jmp	#LR__1473
124b8     45 00 00 FF 
124bc     74 E4 05 F1 | 	add	objptr, ##35444
124c0     F2 1E 02 FB | 	rdlong	local01, objptr
124c4     45 00 00 FF 
124c8     74 E4 85 F1 | 	sub	objptr, ##35444
124cc     5B 1E 16 F2 | 	cmp	local01, #91 wc
124d0     20 00 90 3D |  if_ae	jmp	#LR__1473
124d4     45 00 00 FF 
124d8     74 E4 05 F1 | 	add	objptr, ##35444
124dc     F2 1E 02 FB | 	rdlong	local01, objptr
124e0     20 1E 06 F1 | 	add	local01, #32
124e4     F2 1E 62 FC | 	wrlong	local01, objptr
124e8     45 00 00 FF 
124ec     74 E4 85 F1 | 	sub	objptr, ##35444
124f0     A8 00 90 FD | 	jmp	#LR__1477
124f4                 | LR__1473
124f4     45 00 00 FF 
124f8     74 E4 05 F1 | 	add	objptr, ##35444
124fc     F2 1E 02 FB | 	rdlong	local01, objptr
12500     45 00 00 FF 
12504     74 E4 85 F1 | 	sub	objptr, ##35444
12508     17 1E 16 F2 | 	cmp	local01, #23 wc
1250c     3C 00 90 CD |  if_b	jmp	#LR__1474
12510     45 00 00 FF 
12514     74 E4 05 F1 | 	add	objptr, ##35444
12518     F2 1E 02 FB | 	rdlong	local01, objptr
1251c     45 00 00 FF 
12520     74 E4 85 F1 | 	sub	objptr, ##35444
12524     20 1E 16 F2 | 	cmp	local01, #32 wc
12528     20 00 90 3D |  if_ae	jmp	#LR__1474
1252c     45 00 00 FF 
12530     74 E4 05 F1 | 	add	objptr, ##35444
12534     F2 1E 02 FB | 	rdlong	local01, objptr
12538     09 1E 86 F1 | 	sub	local01, #9
1253c     F2 1E 62 FC | 	wrlong	local01, objptr
12540     45 00 00 FF 
12544     74 E4 85 F1 | 	sub	objptr, ##35444
12548     50 00 90 FD | 	jmp	#LR__1476
1254c                 | LR__1474
1254c     45 00 00 FF 
12550     74 E4 05 F1 | 	add	objptr, ##35444
12554     F2 20 02 FB | 	rdlong	local02, objptr
12558     45 00 00 FF 
1255c     74 E4 85 F1 | 	sub	objptr, ##35444
12560     0E 20 16 F2 | 	cmp	local02, #14 wc
12564     34 00 90 CD |  if_b	jmp	#LR__1475
12568     45 00 00 FF 
1256c     74 E4 05 F1 | 	add	objptr, ##35444
12570     F2 1E 02 FB | 	rdlong	local01, objptr
12574     45 00 00 FF 
12578     74 E4 85 F1 | 	sub	objptr, ##35444
1257c     17 1E 16 F2 | 	cmp	local01, #23 wc
12580     51 00 00 CF 
12584     E0 E5 05 C1 |  if_b	add	objptr, ##41952
12588     F2 20 02 CB |  if_b	rdlong	local02, objptr
1258c     27 20 06 C1 |  if_b	add	local02, #39
12590     F2 20 62 CC |  if_b	wrlong	local02, objptr
12594     51 00 00 CF 
12598     E0 E5 85 C1 |  if_b	sub	objptr, ##41952
1259c                 | LR__1475
1259c                 | LR__1476
1259c                 | LR__1477
1259c                 | LR__1478
1259c                 | LR__1479
1259c     45 00 00 FF 
125a0     74 E4 05 F1 | 	add	objptr, ##35444
125a4     F2 12 02 FB | 	rdlong	arg01, objptr
125a8     45 00 00 FF 
125ac     74 E4 85 F1 | 	sub	objptr, ##35444
125b0     14 B2 B0 FD | 	call	#_scantochar
125b4     FD 12 02 F6 | 	mov	arg01, result1
125b8     A0 06 B1 FD | 	call	#__system__Chr_S
125bc     A7 FA 61 FC | 	wrlong	result1, fp
125c0     0C 00 90 FD | 	jmp	#LR__1481
125c4                 | LR__1480
125c4     84 01 00 FF 
125c8     F7 21 06 F6 | 	mov	local02, ##@LR__5472
125cc     A7 20 62 FC | 	wrlong	local02, fp
125d0                 | LR__1481
125d0     08 4E 05 F1 | 	add	fp, #8
125d4     A7 3E 68 FC | 	wrlong	#31, fp
125d8     08 4E 85 F1 | 	sub	fp, #8
125dc     A7 12 02 F6 | 	mov	arg01, fp
125e0     0C 95 BF FD | 	call	#_push
125e4     A7 F0 03 F6 | 	mov	ptra, fp
125e8     B2 00 A0 FD | 	call	#popregs_
125ec                 | _do_inkey_ret
125ec     2D 00 64 FD | 	ret
125f0                 | 
125f0                 | '  
125f0                 | ' '------------------------ Operators 
125f0                 | ' 
125f0                 | ' sub do_plus 
125f0                 | _do_plus
125f0     05 4A 05 F6 | 	mov	COUNT_, #5
125f4     A8 00 A0 FD | 	call	#pushregs_
125f8     18 F0 07 F1 | 	add	ptra, #24
125fc     58 94 BF FD | 	call	#_pop
12600     FD 1E 02 F6 | 	mov	local01, result1
12604     FE 20 02 F6 | 	mov	local02, result2
12608     FF 22 02 F6 | 	mov	local03, result3
1260c     0C 4E 05 F1 | 	add	fp, #12
12610     A7 1E 62 FC | 	wrlong	local01, fp
12614     04 4E 05 F1 | 	add	fp, #4
12618     A7 20 62 FC | 	wrlong	local02, fp
1261c     04 4E 05 F1 | 	add	fp, #4
12620     A7 22 62 FC | 	wrlong	local03, fp
12624     14 4E 85 F1 | 	sub	fp, #20
12628     2C 94 BF FD | 	call	#_pop
1262c     FF 22 02 F6 | 	mov	local03, result3
12630     A7 FA 61 FC | 	wrlong	result1, fp
12634     04 4E 05 F1 | 	add	fp, #4
12638     A7 FC 61 FC | 	wrlong	result2, fp
1263c     04 4E 05 F1 | 	add	fp, #4
12640     A7 22 62 FC | 	wrlong	local03, fp
12644                 | ' 
12644                 | ' t2=pop()
12644                 | ' t1=pop()
12644                 | ' 
12644                 | ' 
12644                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
12644     08 4E 85 F1 | 	sub	fp, #8
12648     1D 22 0E F2 | 	cmp	local03, #29 wz
1264c     14 4E 05 A1 |  if_e	add	fp, #20
12650     A7 24 02 AB |  if_e	rdlong	local04, fp
12654     14 4E 85 A1 |  if_e	sub	fp, #20
12658     12 23 02 A6 |  if_e	mov	local03, local04
1265c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12660     1C 00 90 5D |  if_ne	jmp	#LR__1490
12664     A7 1E 02 FB | 	rdlong	local01, fp
12668     0C 4E 05 F1 | 	add	fp, #12
1266c     A7 20 02 FB | 	rdlong	local02, fp
12670     0C 4E 85 F1 | 	sub	fp, #12
12674     10 1F 02 F1 | 	add	local01, local02
12678     A7 1E 62 FC | 	wrlong	local01, fp
1267c     48 04 90 FD | 	jmp	#LR__1505
12680                 | LR__1490
12680                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
12680     08 4E 05 F1 | 	add	fp, #8
12684     A7 1E 02 FB | 	rdlong	local01, fp
12688     08 4E 85 F1 | 	sub	fp, #8
1268c     1D 1E 0E F2 | 	cmp	local01, #29 wz
12690     14 4E 05 A1 |  if_e	add	fp, #20
12694     A7 24 02 AB |  if_e	rdlong	local04, fp
12698     14 4E 85 A1 |  if_e	sub	fp, #20
1269c     12 23 02 A6 |  if_e	mov	local03, local04
126a0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
126a4     28 00 90 5D |  if_ne	jmp	#LR__1491
126a8     A7 1E 02 FB | 	rdlong	local01, fp
126ac     0C 4E 05 F1 | 	add	fp, #12
126b0     A7 20 02 FB | 	rdlong	local02, fp
126b4     0C 4E 85 F1 | 	sub	fp, #12
126b8     10 1F 02 F1 | 	add	local01, local02
126bc     A7 1E 62 FC | 	wrlong	local01, fp
126c0     08 4E 05 F1 | 	add	fp, #8
126c4     A7 38 68 FC | 	wrlong	#28, fp
126c8     08 4E 85 F1 | 	sub	fp, #8
126cc     F8 03 90 FD | 	jmp	#LR__1505
126d0                 | LR__1491
126d0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
126d0     08 4E 05 F1 | 	add	fp, #8
126d4     A7 1E 02 FB | 	rdlong	local01, fp
126d8     08 4E 85 F1 | 	sub	fp, #8
126dc     1D 1E 0E F2 | 	cmp	local01, #29 wz
126e0     14 4E 05 A1 |  if_e	add	fp, #20
126e4     A7 24 02 AB |  if_e	rdlong	local04, fp
126e8     14 4E 85 A1 |  if_e	sub	fp, #20
126ec     12 23 02 A6 |  if_e	mov	local03, local04
126f0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
126f4     30 00 90 5D |  if_ne	jmp	#LR__1492
126f8     A7 12 02 FB | 	rdlong	arg01, fp
126fc     CC 0A B1 FD | 	call	#__system___float_fromuns
12700     FD 12 02 F6 | 	mov	arg01, result1
12704     0C 4E 05 F1 | 	add	fp, #12
12708     A7 14 02 FB | 	rdlong	arg02, fp
1270c     0C 4E 85 F1 | 	sub	fp, #12
12710     EC 0A B1 FD | 	call	#__system___float_add
12714     A7 FA 61 FC | 	wrlong	result1, fp
12718     08 4E 05 F1 | 	add	fp, #8
1271c     A7 3C 68 FC | 	wrlong	#30, fp
12720     08 4E 85 F1 | 	sub	fp, #8
12724     A0 03 90 FD | 	jmp	#LR__1505
12728                 | LR__1492
12728                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
12728     08 4E 05 F1 | 	add	fp, #8
1272c     A7 1E 02 FB | 	rdlong	local01, fp
12730     08 4E 85 F1 | 	sub	fp, #8
12734     1C 1E 0E F2 | 	cmp	local01, #28 wz
12738     14 4E 05 A1 |  if_e	add	fp, #20
1273c     A7 24 02 AB |  if_e	rdlong	local04, fp
12740     14 4E 85 A1 |  if_e	sub	fp, #20
12744     12 23 02 A6 |  if_e	mov	local03, local04
12748     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1274c     1C 00 90 5D |  if_ne	jmp	#LR__1493
12750     A7 1E 02 FB | 	rdlong	local01, fp
12754     0C 4E 05 F1 | 	add	fp, #12
12758     A7 20 02 FB | 	rdlong	local02, fp
1275c     0C 4E 85 F1 | 	sub	fp, #12
12760     10 1F 02 F1 | 	add	local01, local02
12764     A7 1E 62 FC | 	wrlong	local01, fp
12768     5C 03 90 FD | 	jmp	#LR__1505
1276c                 | LR__1493
1276c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
1276c     08 4E 05 F1 | 	add	fp, #8
12770     A7 1E 02 FB | 	rdlong	local01, fp
12774     08 4E 85 F1 | 	sub	fp, #8
12778     1C 1E 0E F2 | 	cmp	local01, #28 wz
1277c     14 4E 05 A1 |  if_e	add	fp, #20
12780     A7 24 02 AB |  if_e	rdlong	local04, fp
12784     14 4E 85 A1 |  if_e	sub	fp, #20
12788     12 23 02 A6 |  if_e	mov	local03, local04
1278c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12790     1C 00 90 5D |  if_ne	jmp	#LR__1494
12794     A7 1E 02 FB | 	rdlong	local01, fp
12798     0C 4E 05 F1 | 	add	fp, #12
1279c     A7 20 02 FB | 	rdlong	local02, fp
127a0     0C 4E 85 F1 | 	sub	fp, #12
127a4     10 1F 02 F1 | 	add	local01, local02
127a8     A7 1E 62 FC | 	wrlong	local01, fp
127ac     18 03 90 FD | 	jmp	#LR__1505
127b0                 | LR__1494
127b0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
127b0     08 4E 05 F1 | 	add	fp, #8
127b4     A7 1E 02 FB | 	rdlong	local01, fp
127b8     08 4E 85 F1 | 	sub	fp, #8
127bc     1C 1E 0E F2 | 	cmp	local01, #28 wz
127c0     14 4E 05 A1 |  if_e	add	fp, #20
127c4     A7 24 02 AB |  if_e	rdlong	local04, fp
127c8     14 4E 85 A1 |  if_e	sub	fp, #20
127cc     12 23 02 A6 |  if_e	mov	local03, local04
127d0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
127d4     40 00 90 5D |  if_ne	jmp	#LR__1495
127d8     A7 12 02 FB | 	rdlong	arg01, fp
127dc     09 13 52 F6 | 	abs	arg01, arg01 wc
127e0     1F 26 C6 C9 |  if_b	decod	local05, #31
127e4     00 26 06 36 |  if_ae	mov	local05, #0
127e8     E0 09 B1 FD | 	call	#__system___float_fromuns
127ec     13 FB 61 F5 | 	xor	result1, local05
127f0     FD 12 02 F6 | 	mov	arg01, result1
127f4     0C 4E 05 F1 | 	add	fp, #12
127f8     A7 14 02 FB | 	rdlong	arg02, fp
127fc     0C 4E 85 F1 | 	sub	fp, #12
12800     FC 09 B1 FD | 	call	#__system___float_add
12804     A7 FA 61 FC | 	wrlong	result1, fp
12808     08 4E 05 F1 | 	add	fp, #8
1280c     A7 3C 68 FC | 	wrlong	#30, fp
12810     08 4E 85 F1 | 	sub	fp, #8
12814     B0 02 90 FD | 	jmp	#LR__1505
12818                 | LR__1495
12818                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
12818     08 4E 05 F1 | 	add	fp, #8
1281c     A7 1E 02 FB | 	rdlong	local01, fp
12820     08 4E 85 F1 | 	sub	fp, #8
12824     1E 1E 0E F2 | 	cmp	local01, #30 wz
12828     14 4E 05 A1 |  if_e	add	fp, #20
1282c     A7 24 02 AB |  if_e	rdlong	local04, fp
12830     14 4E 85 A1 |  if_e	sub	fp, #20
12834     12 23 02 A6 |  if_e	mov	local03, local04
12838     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1283c     28 00 90 5D |  if_ne	jmp	#LR__1496
12840     A7 1E 02 FB | 	rdlong	local01, fp
12844     0C 4E 05 F1 | 	add	fp, #12
12848     A7 12 02 FB | 	rdlong	arg01, fp
1284c     0C 4E 85 F1 | 	sub	fp, #12
12850     78 09 B1 FD | 	call	#__system___float_fromuns
12854     FD 14 02 F6 | 	mov	arg02, result1
12858     0F 13 02 F6 | 	mov	arg01, local01
1285c     A0 09 B1 FD | 	call	#__system___float_add
12860     A7 FA 61 FC | 	wrlong	result1, fp
12864     60 02 90 FD | 	jmp	#LR__1505
12868                 | LR__1496
12868                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
12868     08 4E 05 F1 | 	add	fp, #8
1286c     A7 1E 02 FB | 	rdlong	local01, fp
12870     08 4E 85 F1 | 	sub	fp, #8
12874     1E 1E 0E F2 | 	cmp	local01, #30 wz
12878     14 4E 05 A1 |  if_e	add	fp, #20
1287c     A7 24 02 AB |  if_e	rdlong	local04, fp
12880     14 4E 85 A1 |  if_e	sub	fp, #20
12884     12 23 02 A6 |  if_e	mov	local03, local04
12888     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1288c     38 00 90 5D |  if_ne	jmp	#LR__1497
12890     A7 1E 02 FB | 	rdlong	local01, fp
12894     0C 4E 05 F1 | 	add	fp, #12
12898     A7 12 02 FB | 	rdlong	arg01, fp
1289c     0C 4E 85 F1 | 	sub	fp, #12
128a0     09 13 52 F6 | 	abs	arg01, arg01 wc
128a4     1F 26 C6 C9 |  if_b	decod	local05, #31
128a8     00 26 06 36 |  if_ae	mov	local05, #0
128ac     1C 09 B1 FD | 	call	#__system___float_fromuns
128b0     13 FB 61 F5 | 	xor	result1, local05
128b4     FD 14 02 F6 | 	mov	arg02, result1
128b8     0F 13 02 F6 | 	mov	arg01, local01
128bc     40 09 B1 FD | 	call	#__system___float_add
128c0     A7 FA 61 FC | 	wrlong	result1, fp
128c4     00 02 90 FD | 	jmp	#LR__1505
128c8                 | LR__1497
128c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
128c8     08 4E 05 F1 | 	add	fp, #8
128cc     A7 1E 02 FB | 	rdlong	local01, fp
128d0     08 4E 85 F1 | 	sub	fp, #8
128d4     1E 1E 0E F2 | 	cmp	local01, #30 wz
128d8     14 4E 05 A1 |  if_e	add	fp, #20
128dc     A7 24 02 AB |  if_e	rdlong	local04, fp
128e0     14 4E 85 A1 |  if_e	sub	fp, #20
128e4     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
128e8     1C 00 90 5D |  if_ne	jmp	#LR__1498
128ec     A7 12 02 FB | 	rdlong	arg01, fp
128f0     0C 4E 05 F1 | 	add	fp, #12
128f4     A7 14 02 FB | 	rdlong	arg02, fp
128f8     0C 4E 85 F1 | 	sub	fp, #12
128fc     00 09 B1 FD | 	call	#__system___float_add
12900     A7 FA 61 FC | 	wrlong	result1, fp
12904     C0 01 90 FD | 	jmp	#LR__1505
12908                 | LR__1498
12908                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
12908     08 4E 05 F1 | 	add	fp, #8
1290c     A7 1E 02 FB | 	rdlong	local01, fp
12910     08 4E 85 F1 | 	sub	fp, #8
12914     1F 1E 0E F2 | 	cmp	local01, #31 wz
12918     24 00 90 5D |  if_ne	jmp	#LR__1499
1291c     14 4E 05 F1 | 	add	fp, #20
12920     A7 22 02 FB | 	rdlong	local03, fp
12924     14 4E 85 F1 | 	sub	fp, #20
12928     1F 22 0E F2 | 	cmp	local03, #31 wz
1292c     A7 04 68 5C |  if_ne	wrlong	#2, fp
12930     08 4E 05 51 |  if_ne	add	fp, #8
12934     A7 FE 69 5C |  if_ne	wrlong	#255, fp
12938     08 4E 85 51 |  if_ne	sub	fp, #8
1293c     88 01 90 5D |  if_ne	jmp	#LR__1505
12940                 | LR__1499
12940                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
12940     14 4E 05 F1 | 	add	fp, #20
12944     A7 1E 02 FB | 	rdlong	local01, fp
12948     14 4E 85 F1 | 	sub	fp, #20
1294c     1F 1E 0E F2 | 	cmp	local01, #31 wz
12950     24 00 90 5D |  if_ne	jmp	#LR__1500
12954     08 4E 05 F1 | 	add	fp, #8
12958     A7 22 02 FB | 	rdlong	local03, fp
1295c     08 4E 85 F1 | 	sub	fp, #8
12960     1F 22 0E F2 | 	cmp	local03, #31 wz
12964     A7 04 68 5C |  if_ne	wrlong	#2, fp
12968     08 4E 05 51 |  if_ne	add	fp, #8
1296c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
12970     08 4E 85 51 |  if_ne	sub	fp, #8
12974     50 01 90 5D |  if_ne	jmp	#LR__1505
12978                 | LR__1500
12978                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
12978     08 4E 05 F1 | 	add	fp, #8
1297c     A7 1E 02 FB | 	rdlong	local01, fp
12980     08 4E 85 F1 | 	sub	fp, #8
12984     1F 1E 0E F2 | 	cmp	local01, #31 wz
12988     14 4E 05 A1 |  if_e	add	fp, #20
1298c     A7 22 02 AB |  if_e	rdlong	local03, fp
12990     14 4E 85 A1 |  if_e	sub	fp, #20
12994     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12998     1C 00 90 5D |  if_ne	jmp	#LR__1501
1299c     A7 12 02 FB | 	rdlong	arg01, fp
129a0     0C 4E 05 F1 | 	add	fp, #12
129a4     A7 14 02 FB | 	rdlong	arg02, fp
129a8     0C 4E 85 F1 | 	sub	fp, #12
129ac     C8 E0 B0 FD | 	call	#__system___string_concat
129b0     A7 FA 61 FC | 	wrlong	result1, fp
129b4     10 01 90 FD | 	jmp	#LR__1505
129b8                 | LR__1501
129b8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
129b8     08 4E 05 F1 | 	add	fp, #8
129bc     A7 1E 02 FB | 	rdlong	local01, fp
129c0     08 4E 85 F1 | 	sub	fp, #8
129c4     2B 1E 0E F2 | 	cmp	local01, #43 wz
129c8     14 4E 05 A1 |  if_e	add	fp, #20
129cc     A7 22 02 AB |  if_e	rdlong	local03, fp
129d0     14 4E 85 A1 |  if_e	sub	fp, #20
129d4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
129d8     30 00 90 5D |  if_ne	jmp	#LR__1502
129dc     A7 12 02 FB | 	rdlong	arg01, fp
129e0     20 E9 BF FD | 	call	#_convertstring
129e4     FD 12 02 F6 | 	mov	arg01, result1
129e8     0C 4E 05 F1 | 	add	fp, #12
129ec     A7 14 02 FB | 	rdlong	arg02, fp
129f0     0C 4E 85 F1 | 	sub	fp, #12
129f4     80 E0 B0 FD | 	call	#__system___string_concat
129f8     A7 FA 61 FC | 	wrlong	result1, fp
129fc     08 4E 05 F1 | 	add	fp, #8
12a00     A7 3E 68 FC | 	wrlong	#31, fp
12a04     08 4E 85 F1 | 	sub	fp, #8
12a08     BC 00 90 FD | 	jmp	#LR__1505
12a0c                 | LR__1502
12a0c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
12a0c     08 4E 05 F1 | 	add	fp, #8
12a10     A7 1E 02 FB | 	rdlong	local01, fp
12a14     08 4E 85 F1 | 	sub	fp, #8
12a18     1F 1E 0E F2 | 	cmp	local01, #31 wz
12a1c     14 4E 05 A1 |  if_e	add	fp, #20
12a20     A7 22 02 AB |  if_e	rdlong	local03, fp
12a24     14 4E 85 A1 |  if_e	sub	fp, #20
12a28     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12a2c     28 00 90 5D |  if_ne	jmp	#LR__1503
12a30     A7 1E 02 FB | 	rdlong	local01, fp
12a34     0C 4E 05 F1 | 	add	fp, #12
12a38     A7 12 02 FB | 	rdlong	arg01, fp
12a3c     0C 4E 85 F1 | 	sub	fp, #12
12a40     C0 E8 BF FD | 	call	#_convertstring
12a44     FD 14 02 F6 | 	mov	arg02, result1
12a48     0F 13 02 F6 | 	mov	arg01, local01
12a4c     28 E0 B0 FD | 	call	#__system___string_concat
12a50     A7 FA 61 FC | 	wrlong	result1, fp
12a54     70 00 90 FD | 	jmp	#LR__1505
12a58                 | LR__1503
12a58                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
12a58     08 4E 05 F1 | 	add	fp, #8
12a5c     A7 1E 02 FB | 	rdlong	local01, fp
12a60     08 4E 85 F1 | 	sub	fp, #8
12a64     2B 1E 0E F2 | 	cmp	local01, #43 wz
12a68     14 4E 05 A1 |  if_e	add	fp, #20
12a6c     A7 22 02 AB |  if_e	rdlong	local03, fp
12a70     14 4E 85 A1 |  if_e	sub	fp, #20
12a74     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12a78     3C 00 90 5D |  if_ne	jmp	#LR__1504
12a7c     A7 12 02 FB | 	rdlong	arg01, fp
12a80     80 E8 BF FD | 	call	#_convertstring
12a84     FD 1E 02 F6 | 	mov	local01, result1
12a88     0C 4E 05 F1 | 	add	fp, #12
12a8c     A7 12 02 FB | 	rdlong	arg01, fp
12a90     0C 4E 85 F1 | 	sub	fp, #12
12a94     6C E8 BF FD | 	call	#_convertstring
12a98     FD 14 02 F6 | 	mov	arg02, result1
12a9c     0F 13 02 F6 | 	mov	arg01, local01
12aa0     D4 DF B0 FD | 	call	#__system___string_concat
12aa4     A7 FA 61 FC | 	wrlong	result1, fp
12aa8     08 4E 05 F1 | 	add	fp, #8
12aac     A7 3E 68 FC | 	wrlong	#31, fp
12ab0     08 4E 85 F1 | 	sub	fp, #8
12ab4     10 00 90 FD | 	jmp	#LR__1505
12ab8                 | LR__1504
12ab8     A7 08 68 FC | 	wrlong	#4, fp
12abc     08 4E 05 F1 | 	add	fp, #8
12ac0     A7 FE 69 FC | 	wrlong	#255, fp
12ac4     08 4E 85 F1 | 	sub	fp, #8
12ac8                 | LR__1505
12ac8     A7 12 02 F6 | 	mov	arg01, fp
12acc     20 90 BF FD | 	call	#_push
12ad0     A7 F0 03 F6 | 	mov	ptra, fp
12ad4     B2 00 A0 FD | 	call	#popregs_
12ad8                 | _do_plus_ret
12ad8     2D 00 64 FD | 	ret
12adc                 | 
12adc                 | ' 
12adc                 | ' sub do_minus
12adc                 | _do_minus
12adc     05 4A 05 F6 | 	mov	COUNT_, #5
12ae0     A8 00 A0 FD | 	call	#pushregs_
12ae4     18 F0 07 F1 | 	add	ptra, #24
12ae8     6C 8F BF FD | 	call	#_pop
12aec     FD 1E 02 F6 | 	mov	local01, result1
12af0     FE 20 02 F6 | 	mov	local02, result2
12af4     FF 22 02 F6 | 	mov	local03, result3
12af8     0C 4E 05 F1 | 	add	fp, #12
12afc     A7 1E 62 FC | 	wrlong	local01, fp
12b00     04 4E 05 F1 | 	add	fp, #4
12b04     A7 20 62 FC | 	wrlong	local02, fp
12b08     04 4E 05 F1 | 	add	fp, #4
12b0c     A7 22 62 FC | 	wrlong	local03, fp
12b10     14 4E 85 F1 | 	sub	fp, #20
12b14     40 8F BF FD | 	call	#_pop
12b18     FF 22 02 F6 | 	mov	local03, result3
12b1c     A7 FA 61 FC | 	wrlong	result1, fp
12b20     04 4E 05 F1 | 	add	fp, #4
12b24     A7 FC 61 FC | 	wrlong	result2, fp
12b28     04 4E 05 F1 | 	add	fp, #4
12b2c     A7 22 62 FC | 	wrlong	local03, fp
12b30                 | ' 
12b30                 | ' t2=pop()
12b30                 | ' t1=pop()
12b30                 | ' 
12b30                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
12b30     08 4E 85 F1 | 	sub	fp, #8
12b34     1D 22 0E F2 | 	cmp	local03, #29 wz
12b38     14 4E 05 A1 |  if_e	add	fp, #20
12b3c     A7 24 02 AB |  if_e	rdlong	local04, fp
12b40     14 4E 85 A1 |  if_e	sub	fp, #20
12b44     12 23 02 A6 |  if_e	mov	local03, local04
12b48     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12b4c     5C 00 90 5D |  if_ne	jmp	#LR__1511
12b50                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
12b50     0C 4E 05 F1 | 	add	fp, #12
12b54     A7 1E 02 FB | 	rdlong	local01, fp
12b58     0C 4E 85 F1 | 	sub	fp, #12
12b5c     A7 22 02 FB | 	rdlong	local03, fp
12b60     11 1F 12 F2 | 	cmp	local01, local03 wc
12b64     1C 00 90 3D |  if_ae	jmp	#LR__1510
12b68     A7 1E 02 FB | 	rdlong	local01, fp
12b6c     0C 4E 05 F1 | 	add	fp, #12
12b70     A7 20 02 FB | 	rdlong	local02, fp
12b74     0C 4E 85 F1 | 	sub	fp, #12
12b78     10 1F 82 F1 | 	sub	local01, local02
12b7c     A7 1E 62 FC | 	wrlong	local01, fp
12b80     F4 02 90 FD | 	jmp	#LR__1520
12b84                 | LR__1510
12b84     A7 1E 02 FB | 	rdlong	local01, fp
12b88     0C 4E 05 F1 | 	add	fp, #12
12b8c     A7 20 02 FB | 	rdlong	local02, fp
12b90     0C 4E 85 F1 | 	sub	fp, #12
12b94     10 1F 82 F1 | 	sub	local01, local02
12b98     A7 1E 62 FC | 	wrlong	local01, fp
12b9c     08 4E 05 F1 | 	add	fp, #8
12ba0     A7 38 68 FC | 	wrlong	#28, fp
12ba4     08 4E 85 F1 | 	sub	fp, #8
12ba8     CC 02 90 FD | 	jmp	#LR__1520
12bac                 | LR__1511
12bac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
12bac     08 4E 05 F1 | 	add	fp, #8
12bb0     A7 1E 02 FB | 	rdlong	local01, fp
12bb4     08 4E 85 F1 | 	sub	fp, #8
12bb8     1D 1E 0E F2 | 	cmp	local01, #29 wz
12bbc     14 4E 05 A1 |  if_e	add	fp, #20
12bc0     A7 24 02 AB |  if_e	rdlong	local04, fp
12bc4     14 4E 85 A1 |  if_e	sub	fp, #20
12bc8     12 23 02 A6 |  if_e	mov	local03, local04
12bcc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12bd0     28 00 90 5D |  if_ne	jmp	#LR__1512
12bd4     A7 1E 02 FB | 	rdlong	local01, fp
12bd8     0C 4E 05 F1 | 	add	fp, #12
12bdc     A7 20 02 FB | 	rdlong	local02, fp
12be0     0C 4E 85 F1 | 	sub	fp, #12
12be4     10 1F 82 F1 | 	sub	local01, local02
12be8     A7 1E 62 FC | 	wrlong	local01, fp
12bec     08 4E 05 F1 | 	add	fp, #8
12bf0     A7 38 68 FC | 	wrlong	#28, fp
12bf4     08 4E 85 F1 | 	sub	fp, #8
12bf8     7C 02 90 FD | 	jmp	#LR__1520
12bfc                 | LR__1512
12bfc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
12bfc     08 4E 05 F1 | 	add	fp, #8
12c00     A7 1E 02 FB | 	rdlong	local01, fp
12c04     08 4E 85 F1 | 	sub	fp, #8
12c08     1D 1E 0E F2 | 	cmp	local01, #29 wz
12c0c     14 4E 05 A1 |  if_e	add	fp, #20
12c10     A7 24 02 AB |  if_e	rdlong	local04, fp
12c14     14 4E 85 A1 |  if_e	sub	fp, #20
12c18     12 23 02 A6 |  if_e	mov	local03, local04
12c1c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12c20     34 00 90 5D |  if_ne	jmp	#LR__1513
12c24     A7 12 02 FB | 	rdlong	arg01, fp
12c28     A0 05 B1 FD | 	call	#__system___float_fromuns
12c2c     FD 12 02 F6 | 	mov	arg01, result1
12c30     0C 4E 05 F1 | 	add	fp, #12
12c34     A7 14 02 FB | 	rdlong	arg02, fp
12c38     0C 4E 85 F1 | 	sub	fp, #12
12c3c     1F 14 E6 F4 | 	bitnot	arg02, #31
12c40     BC 05 B1 FD | 	call	#__system___float_add
12c44     A7 FA 61 FC | 	wrlong	result1, fp
12c48     08 4E 05 F1 | 	add	fp, #8
12c4c     A7 3C 68 FC | 	wrlong	#30, fp
12c50     08 4E 85 F1 | 	sub	fp, #8
12c54     20 02 90 FD | 	jmp	#LR__1520
12c58                 | LR__1513
12c58                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
12c58     08 4E 05 F1 | 	add	fp, #8
12c5c     A7 1E 02 FB | 	rdlong	local01, fp
12c60     08 4E 85 F1 | 	sub	fp, #8
12c64     1C 1E 0E F2 | 	cmp	local01, #28 wz
12c68     14 4E 05 A1 |  if_e	add	fp, #20
12c6c     A7 24 02 AB |  if_e	rdlong	local04, fp
12c70     14 4E 85 A1 |  if_e	sub	fp, #20
12c74     12 23 02 A6 |  if_e	mov	local03, local04
12c78     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12c7c     1C 00 90 5D |  if_ne	jmp	#LR__1514
12c80     A7 1E 02 FB | 	rdlong	local01, fp
12c84     0C 4E 05 F1 | 	add	fp, #12
12c88     A7 20 02 FB | 	rdlong	local02, fp
12c8c     0C 4E 85 F1 | 	sub	fp, #12
12c90     10 1F 82 F1 | 	sub	local01, local02
12c94     A7 1E 62 FC | 	wrlong	local01, fp
12c98     DC 01 90 FD | 	jmp	#LR__1520
12c9c                 | LR__1514
12c9c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
12c9c     08 4E 05 F1 | 	add	fp, #8
12ca0     A7 1E 02 FB | 	rdlong	local01, fp
12ca4     08 4E 85 F1 | 	sub	fp, #8
12ca8     1C 1E 0E F2 | 	cmp	local01, #28 wz
12cac     14 4E 05 A1 |  if_e	add	fp, #20
12cb0     A7 24 02 AB |  if_e	rdlong	local04, fp
12cb4     14 4E 85 A1 |  if_e	sub	fp, #20
12cb8     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
12cbc     1C 00 90 5D |  if_ne	jmp	#LR__1515
12cc0     A7 1E 02 FB | 	rdlong	local01, fp
12cc4     0C 4E 05 F1 | 	add	fp, #12
12cc8     A7 20 02 FB | 	rdlong	local02, fp
12ccc     0C 4E 85 F1 | 	sub	fp, #12
12cd0     10 1F 82 F1 | 	sub	local01, local02
12cd4     A7 1E 62 FC | 	wrlong	local01, fp
12cd8     9C 01 90 FD | 	jmp	#LR__1520
12cdc                 | LR__1515
12cdc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
12cdc     08 4E 05 F1 | 	add	fp, #8
12ce0     A7 1E 02 FB | 	rdlong	local01, fp
12ce4     08 4E 85 F1 | 	sub	fp, #8
12ce8     1C 1E 0E F2 | 	cmp	local01, #28 wz
12cec     14 4E 05 A1 |  if_e	add	fp, #20
12cf0     A7 22 02 AB |  if_e	rdlong	local03, fp
12cf4     14 4E 85 A1 |  if_e	sub	fp, #20
12cf8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12cfc     44 00 90 5D |  if_ne	jmp	#LR__1516
12d00     A7 12 02 FB | 	rdlong	arg01, fp
12d04     09 13 52 F6 | 	abs	arg01, arg01 wc
12d08     1F 26 C6 C9 |  if_b	decod	local05, #31
12d0c     00 26 06 36 |  if_ae	mov	local05, #0
12d10     B8 04 B1 FD | 	call	#__system___float_fromuns
12d14     13 FB 61 F5 | 	xor	result1, local05
12d18     FD 12 02 F6 | 	mov	arg01, result1
12d1c     0C 4E 05 F1 | 	add	fp, #12
12d20     A7 14 02 FB | 	rdlong	arg02, fp
12d24     0C 4E 85 F1 | 	sub	fp, #12
12d28     1F 14 E6 F4 | 	bitnot	arg02, #31
12d2c     D0 04 B1 FD | 	call	#__system___float_add
12d30     A7 FA 61 FC | 	wrlong	result1, fp
12d34     08 4E 05 F1 | 	add	fp, #8
12d38     A7 3C 68 FC | 	wrlong	#30, fp
12d3c     08 4E 85 F1 | 	sub	fp, #8
12d40     34 01 90 FD | 	jmp	#LR__1520
12d44                 | LR__1516
12d44                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
12d44     08 4E 05 F1 | 	add	fp, #8
12d48     A7 1E 02 FB | 	rdlong	local01, fp
12d4c     08 4E 85 F1 | 	sub	fp, #8
12d50     1E 1E 0E F2 | 	cmp	local01, #30 wz
12d54     14 4E 05 A1 |  if_e	add	fp, #20
12d58     A7 22 02 AB |  if_e	rdlong	local03, fp
12d5c     14 4E 85 A1 |  if_e	sub	fp, #20
12d60     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12d64     2C 00 90 5D |  if_ne	jmp	#LR__1517
12d68     A7 1E 02 FB | 	rdlong	local01, fp
12d6c     0C 4E 05 F1 | 	add	fp, #12
12d70     A7 12 02 FB | 	rdlong	arg01, fp
12d74     0C 4E 85 F1 | 	sub	fp, #12
12d78     50 04 B1 FD | 	call	#__system___float_fromuns
12d7c     FD 14 02 F6 | 	mov	arg02, result1
12d80     0F 13 02 F6 | 	mov	arg01, local01
12d84     1F 14 E6 F4 | 	bitnot	arg02, #31
12d88     74 04 B1 FD | 	call	#__system___float_add
12d8c     A7 FA 61 FC | 	wrlong	result1, fp
12d90     E4 00 90 FD | 	jmp	#LR__1520
12d94                 | LR__1517
12d94                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
12d94     08 4E 05 F1 | 	add	fp, #8
12d98     A7 1E 02 FB | 	rdlong	local01, fp
12d9c     08 4E 85 F1 | 	sub	fp, #8
12da0     1E 1E 0E F2 | 	cmp	local01, #30 wz
12da4     14 4E 05 A1 |  if_e	add	fp, #20
12da8     A7 22 02 AB |  if_e	rdlong	local03, fp
12dac     14 4E 85 A1 |  if_e	sub	fp, #20
12db0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12db4     3C 00 90 5D |  if_ne	jmp	#LR__1518
12db8     A7 1E 02 FB | 	rdlong	local01, fp
12dbc     0C 4E 05 F1 | 	add	fp, #12
12dc0     A7 12 02 FB | 	rdlong	arg01, fp
12dc4     0C 4E 85 F1 | 	sub	fp, #12
12dc8     09 13 52 F6 | 	abs	arg01, arg01 wc
12dcc     1F 26 C6 C9 |  if_b	decod	local05, #31
12dd0     00 26 06 36 |  if_ae	mov	local05, #0
12dd4     F4 03 B1 FD | 	call	#__system___float_fromuns
12dd8     13 FB 61 F5 | 	xor	result1, local05
12ddc     FD 14 02 F6 | 	mov	arg02, result1
12de0     0F 13 02 F6 | 	mov	arg01, local01
12de4     1F 14 E6 F4 | 	bitnot	arg02, #31
12de8     14 04 B1 FD | 	call	#__system___float_add
12dec     A7 FA 61 FC | 	wrlong	result1, fp
12df0     84 00 90 FD | 	jmp	#LR__1520
12df4                 | LR__1518
12df4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
12df4     08 4E 05 F1 | 	add	fp, #8
12df8     A7 1E 02 FB | 	rdlong	local01, fp
12dfc     08 4E 85 F1 | 	sub	fp, #8
12e00     1E 1E 0E F2 | 	cmp	local01, #30 wz
12e04     14 4E 05 A1 |  if_e	add	fp, #20
12e08     A7 22 02 AB |  if_e	rdlong	local03, fp
12e0c     14 4E 85 A1 |  if_e	sub	fp, #20
12e10     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12e14     20 00 90 5D |  if_ne	jmp	#LR__1519
12e18     A7 12 02 FB | 	rdlong	arg01, fp
12e1c     0C 4E 05 F1 | 	add	fp, #12
12e20     A7 14 02 FB | 	rdlong	arg02, fp
12e24     0C 4E 85 F1 | 	sub	fp, #12
12e28     1F 14 E6 F4 | 	bitnot	arg02, #31
12e2c     D0 03 B1 FD | 	call	#__system___float_add
12e30     A7 FA 61 FC | 	wrlong	result1, fp
12e34     40 00 90 FD | 	jmp	#LR__1520
12e38                 | LR__1519
12e38                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
12e38     08 4E 05 F1 | 	add	fp, #8
12e3c     A7 1E 02 FB | 	rdlong	local01, fp
12e40     08 4E 85 F1 | 	sub	fp, #8
12e44     1F 1E 0E F2 | 	cmp	local01, #31 wz
12e48     14 4E 05 51 |  if_ne	add	fp, #20
12e4c     A7 22 02 5B |  if_ne	rdlong	local03, fp
12e50     14 4E 85 51 |  if_ne	sub	fp, #20
12e54     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
12e58     A7 06 68 AC |  if_e	wrlong	#3, fp
12e5c     08 4E 05 A1 |  if_e	add	fp, #8
12e60     A7 FE 69 AC |  if_e	wrlong	#255, fp
12e64     08 4E 85 A1 |  if_e	sub	fp, #8
12e68     A7 0A 68 5C |  if_ne	wrlong	#5, fp
12e6c     08 4E 05 51 |  if_ne	add	fp, #8
12e70     A7 FE 69 5C |  if_ne	wrlong	#255, fp
12e74     08 4E 85 51 |  if_ne	sub	fp, #8
12e78                 | LR__1520
12e78     A7 12 02 F6 | 	mov	arg01, fp
12e7c     70 8C BF FD | 	call	#_push
12e80     A7 F0 03 F6 | 	mov	ptra, fp
12e84     B2 00 A0 FD | 	call	#popregs_
12e88                 | _do_minus_ret
12e88     2D 00 64 FD | 	ret
12e8c                 | 
12e8c                 | ' 
12e8c                 | ' sub do_and 
12e8c                 | _do_and
12e8c     03 4A 05 F6 | 	mov	COUNT_, #3
12e90     A8 00 A0 FD | 	call	#pushregs_
12e94     18 F0 07 F1 | 	add	ptra, #24
12e98     BC 8B BF FD | 	call	#_pop
12e9c     FD 12 02 F6 | 	mov	arg01, result1
12ea0     FE 1E 02 F6 | 	mov	local01, result2
12ea4     FF 20 02 F6 | 	mov	local02, result3
12ea8     0C 4E 05 F1 | 	add	fp, #12
12eac     A7 12 62 FC | 	wrlong	arg01, fp
12eb0     04 4E 05 F1 | 	add	fp, #4
12eb4     A7 1E 62 FC | 	wrlong	local01, fp
12eb8     04 4E 05 F1 | 	add	fp, #4
12ebc     A7 20 62 FC | 	wrlong	local02, fp
12ec0     14 4E 85 F1 | 	sub	fp, #20
12ec4     90 8B BF FD | 	call	#_pop
12ec8     FF 22 02 F6 | 	mov	local03, result3
12ecc     A7 FA 61 FC | 	wrlong	result1, fp
12ed0     04 4E 05 F1 | 	add	fp, #4
12ed4     A7 FC 61 FC | 	wrlong	result2, fp
12ed8     04 4E 05 F1 | 	add	fp, #4
12edc     A7 22 62 FC | 	wrlong	local03, fp
12ee0                 | ' 
12ee0                 | ' t2=pop()
12ee0                 | ' t1=pop()
12ee0                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
12ee0     08 4E 85 F1 | 	sub	fp, #8
12ee4     1C 22 0E F2 | 	cmp	local03, #28 wz
12ee8     A7 22 02 AB |  if_e	rdlong	local03, fp
12eec     A7 22 62 AC |  if_e	wrlong	local03, fp
12ef0     08 4E 05 A1 |  if_e	add	fp, #8
12ef4     A7 3A 68 AC |  if_e	wrlong	#29, fp
12ef8     08 4E 85 A1 |  if_e	sub	fp, #8
12efc                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
12efc     14 4E 05 F1 | 	add	fp, #20
12f00     A7 22 02 FB | 	rdlong	local03, fp
12f04     14 4E 85 F1 | 	sub	fp, #20
12f08     1C 22 0E F2 | 	cmp	local03, #28 wz
12f0c     18 00 90 5D |  if_ne	jmp	#LR__1530
12f10     0C 4E 05 F1 | 	add	fp, #12
12f14     A7 22 02 FB | 	rdlong	local03, fp
12f18     A7 22 62 FC | 	wrlong	local03, fp
12f1c     08 4E 05 F1 | 	add	fp, #8
12f20     A7 3A 68 FC | 	wrlong	#29, fp
12f24     14 4E 85 F1 | 	sub	fp, #20
12f28                 | LR__1530
12f28                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
12f28     08 4E 05 F1 | 	add	fp, #8
12f2c     A7 22 02 FB | 	rdlong	local03, fp
12f30     08 4E 85 F1 | 	sub	fp, #8
12f34     1F 22 0E F2 | 	cmp	local03, #31 wz
12f38     14 4E 05 51 |  if_ne	add	fp, #20
12f3c     A7 20 02 5B |  if_ne	rdlong	local02, fp
12f40     14 4E 85 51 |  if_ne	sub	fp, #20
12f44     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
12f48     08 4E 05 51 |  if_ne	add	fp, #8
12f4c     A7 22 02 5B |  if_ne	rdlong	local03, fp
12f50     08 4E 85 51 |  if_ne	sub	fp, #8
12f54     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
12f58     14 4E 05 51 |  if_ne	add	fp, #20
12f5c     14 4E 85 51 |  if_ne	sub	fp, #20
12f60     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
12f64     A7 0C 68 AC |  if_e	wrlong	#6, fp
12f68     08 4E 05 A1 |  if_e	add	fp, #8
12f6c     A7 FE 69 AC |  if_e	wrlong	#255, fp
12f70     08 4E 85 A1 |  if_e	sub	fp, #8
12f74     18 00 90 AD |  if_e	jmp	#LR__1531
12f78     A7 22 02 FB | 	rdlong	local03, fp
12f7c     0C 4E 05 F1 | 	add	fp, #12
12f80     A7 1E 02 FB | 	rdlong	local01, fp
12f84     0C 4E 85 F1 | 	sub	fp, #12
12f88     0F 23 02 F5 | 	and	local03, local01
12f8c     A7 22 62 FC | 	wrlong	local03, fp
12f90                 | LR__1531
12f90     A7 12 02 F6 | 	mov	arg01, fp
12f94     58 8B BF FD | 	call	#_push
12f98     A7 F0 03 F6 | 	mov	ptra, fp
12f9c     B2 00 A0 FD | 	call	#popregs_
12fa0                 | _do_and_ret
12fa0     2D 00 64 FD | 	ret
12fa4                 | 
12fa4                 | ' 
12fa4                 | ' sub do_or 
12fa4                 | _do_or
12fa4     03 4A 05 F6 | 	mov	COUNT_, #3
12fa8     A8 00 A0 FD | 	call	#pushregs_
12fac     18 F0 07 F1 | 	add	ptra, #24
12fb0     A4 8A BF FD | 	call	#_pop
12fb4     FD 12 02 F6 | 	mov	arg01, result1
12fb8     FE 1E 02 F6 | 	mov	local01, result2
12fbc     FF 20 02 F6 | 	mov	local02, result3
12fc0     0C 4E 05 F1 | 	add	fp, #12
12fc4     A7 12 62 FC | 	wrlong	arg01, fp
12fc8     04 4E 05 F1 | 	add	fp, #4
12fcc     A7 1E 62 FC | 	wrlong	local01, fp
12fd0     04 4E 05 F1 | 	add	fp, #4
12fd4     A7 20 62 FC | 	wrlong	local02, fp
12fd8     14 4E 85 F1 | 	sub	fp, #20
12fdc     78 8A BF FD | 	call	#_pop
12fe0     FF 22 02 F6 | 	mov	local03, result3
12fe4     A7 FA 61 FC | 	wrlong	result1, fp
12fe8     04 4E 05 F1 | 	add	fp, #4
12fec     A7 FC 61 FC | 	wrlong	result2, fp
12ff0     04 4E 05 F1 | 	add	fp, #4
12ff4     A7 22 62 FC | 	wrlong	local03, fp
12ff8                 | ' 
12ff8                 | ' t2=pop()
12ff8                 | ' t1=pop()
12ff8                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
12ff8     08 4E 85 F1 | 	sub	fp, #8
12ffc     1C 22 0E F2 | 	cmp	local03, #28 wz
13000     A7 22 02 AB |  if_e	rdlong	local03, fp
13004     A7 22 62 AC |  if_e	wrlong	local03, fp
13008     08 4E 05 A1 |  if_e	add	fp, #8
1300c     A7 3A 68 AC |  if_e	wrlong	#29, fp
13010     08 4E 85 A1 |  if_e	sub	fp, #8
13014                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
13014     14 4E 05 F1 | 	add	fp, #20
13018     A7 22 02 FB | 	rdlong	local03, fp
1301c     14 4E 85 F1 | 	sub	fp, #20
13020     1C 22 0E F2 | 	cmp	local03, #28 wz
13024     18 00 90 5D |  if_ne	jmp	#LR__1540
13028     0C 4E 05 F1 | 	add	fp, #12
1302c     A7 22 02 FB | 	rdlong	local03, fp
13030     A7 22 62 FC | 	wrlong	local03, fp
13034     08 4E 05 F1 | 	add	fp, #8
13038     A7 3A 68 FC | 	wrlong	#29, fp
1303c     14 4E 85 F1 | 	sub	fp, #20
13040                 | LR__1540
13040                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
13040     08 4E 05 F1 | 	add	fp, #8
13044     A7 22 02 FB | 	rdlong	local03, fp
13048     08 4E 85 F1 | 	sub	fp, #8
1304c     1F 22 0E F2 | 	cmp	local03, #31 wz
13050     14 4E 05 51 |  if_ne	add	fp, #20
13054     A7 20 02 5B |  if_ne	rdlong	local02, fp
13058     14 4E 85 51 |  if_ne	sub	fp, #20
1305c     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
13060     08 4E 05 51 |  if_ne	add	fp, #8
13064     A7 22 02 5B |  if_ne	rdlong	local03, fp
13068     08 4E 85 51 |  if_ne	sub	fp, #8
1306c     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
13070     14 4E 05 51 |  if_ne	add	fp, #20
13074     14 4E 85 51 |  if_ne	sub	fp, #20
13078     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
1307c     A7 0C 68 AC |  if_e	wrlong	#6, fp
13080     08 4E 05 A1 |  if_e	add	fp, #8
13084     A7 FE 69 AC |  if_e	wrlong	#255, fp
13088     08 4E 85 A1 |  if_e	sub	fp, #8
1308c     18 00 90 AD |  if_e	jmp	#LR__1541
13090     A7 22 02 FB | 	rdlong	local03, fp
13094     0C 4E 05 F1 | 	add	fp, #12
13098     A7 1E 02 FB | 	rdlong	local01, fp
1309c     0C 4E 85 F1 | 	sub	fp, #12
130a0     0F 23 42 F5 | 	or	local03, local01
130a4     A7 22 62 FC | 	wrlong	local03, fp
130a8                 | LR__1541
130a8     A7 12 02 F6 | 	mov	arg01, fp
130ac     40 8A BF FD | 	call	#_push
130b0     A7 F0 03 F6 | 	mov	ptra, fp
130b4     B2 00 A0 FD | 	call	#popregs_
130b8                 | _do_or_ret
130b8     2D 00 64 FD | 	ret
130bc                 | 
130bc                 | ' 
130bc                 | ' sub do_mul
130bc                 | _do_mul
130bc     05 4A 05 F6 | 	mov	COUNT_, #5
130c0     A8 00 A0 FD | 	call	#pushregs_
130c4     18 F0 07 F1 | 	add	ptra, #24
130c8     8C 89 BF FD | 	call	#_pop
130cc     FD 1E 02 F6 | 	mov	local01, result1
130d0     FE 20 02 F6 | 	mov	local02, result2
130d4     FF 22 02 F6 | 	mov	local03, result3
130d8     0C 4E 05 F1 | 	add	fp, #12
130dc     A7 1E 62 FC | 	wrlong	local01, fp
130e0     04 4E 05 F1 | 	add	fp, #4
130e4     A7 20 62 FC | 	wrlong	local02, fp
130e8     04 4E 05 F1 | 	add	fp, #4
130ec     A7 22 62 FC | 	wrlong	local03, fp
130f0     14 4E 85 F1 | 	sub	fp, #20
130f4     60 89 BF FD | 	call	#_pop
130f8     FF 22 02 F6 | 	mov	local03, result3
130fc     A7 FA 61 FC | 	wrlong	result1, fp
13100     04 4E 05 F1 | 	add	fp, #4
13104     A7 FC 61 FC | 	wrlong	result2, fp
13108     04 4E 05 F1 | 	add	fp, #4
1310c     A7 22 62 FC | 	wrlong	local03, fp
13110                 | ' 
13110                 | ' t2=pop()
13110                 | ' t1=pop()
13110                 | ' 
13110                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
13110     08 4E 85 F1 | 	sub	fp, #8
13114     1D 22 0E F2 | 	cmp	local03, #29 wz
13118     14 4E 05 A1 |  if_e	add	fp, #20
1311c     A7 24 02 AB |  if_e	rdlong	local04, fp
13120     14 4E 85 A1 |  if_e	sub	fp, #20
13124     12 23 02 A6 |  if_e	mov	local03, local04
13128     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1312c     20 00 90 5D |  if_ne	jmp	#LR__1550
13130     A7 20 02 FB | 	rdlong	local02, fp
13134     0C 4E 05 F1 | 	add	fp, #12
13138     A7 22 02 FB | 	rdlong	local03, fp
1313c     11 21 02 FD | 	qmul	local02, local03
13140     0C 4E 85 F1 | 	sub	fp, #12
13144     18 1E 62 FD | 	getqx	local01
13148     A7 1E 62 FC | 	wrlong	local01, fp
1314c     C4 02 90 FD | 	jmp	#LR__1559
13150                 | LR__1550
13150                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
13150     08 4E 05 F1 | 	add	fp, #8
13154     A7 1E 02 FB | 	rdlong	local01, fp
13158     08 4E 85 F1 | 	sub	fp, #8
1315c     1D 1E 0E F2 | 	cmp	local01, #29 wz
13160     14 4E 05 A1 |  if_e	add	fp, #20
13164     A7 24 02 AB |  if_e	rdlong	local04, fp
13168     14 4E 85 A1 |  if_e	sub	fp, #20
1316c     12 23 02 A6 |  if_e	mov	local03, local04
13170     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13174     2C 00 90 5D |  if_ne	jmp	#LR__1551
13178     A7 20 02 FB | 	rdlong	local02, fp
1317c     0C 4E 05 F1 | 	add	fp, #12
13180     A7 22 02 FB | 	rdlong	local03, fp
13184     11 21 02 FD | 	qmul	local02, local03
13188     0C 4E 85 F1 | 	sub	fp, #12
1318c     18 1E 62 FD | 	getqx	local01
13190     A7 1E 62 FC | 	wrlong	local01, fp
13194     08 4E 05 F1 | 	add	fp, #8
13198     A7 38 68 FC | 	wrlong	#28, fp
1319c     08 4E 85 F1 | 	sub	fp, #8
131a0     70 02 90 FD | 	jmp	#LR__1559
131a4                 | LR__1551
131a4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
131a4     08 4E 05 F1 | 	add	fp, #8
131a8     A7 1E 02 FB | 	rdlong	local01, fp
131ac     08 4E 85 F1 | 	sub	fp, #8
131b0     1D 1E 0E F2 | 	cmp	local01, #29 wz
131b4     14 4E 05 A1 |  if_e	add	fp, #20
131b8     A7 24 02 AB |  if_e	rdlong	local04, fp
131bc     14 4E 85 A1 |  if_e	sub	fp, #20
131c0     12 23 02 A6 |  if_e	mov	local03, local04
131c4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
131c8     30 00 90 5D |  if_ne	jmp	#LR__1552
131cc     A7 12 02 FB | 	rdlong	arg01, fp
131d0     F8 FF B0 FD | 	call	#__system___float_fromuns
131d4     FD 12 02 F6 | 	mov	arg01, result1
131d8     0C 4E 05 F1 | 	add	fp, #12
131dc     A7 14 02 FB | 	rdlong	arg02, fp
131e0     0C 4E 85 F1 | 	sub	fp, #12
131e4     E8 03 B1 FD | 	call	#__system___float_mul
131e8     A7 FA 61 FC | 	wrlong	result1, fp
131ec     08 4E 05 F1 | 	add	fp, #8
131f0     A7 3C 68 FC | 	wrlong	#30, fp
131f4     08 4E 85 F1 | 	sub	fp, #8
131f8     18 02 90 FD | 	jmp	#LR__1559
131fc                 | LR__1552
131fc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
131fc     08 4E 05 F1 | 	add	fp, #8
13200     A7 1E 02 FB | 	rdlong	local01, fp
13204     08 4E 85 F1 | 	sub	fp, #8
13208     1C 1E 0E F2 | 	cmp	local01, #28 wz
1320c     14 4E 05 A1 |  if_e	add	fp, #20
13210     A7 24 02 AB |  if_e	rdlong	local04, fp
13214     14 4E 85 A1 |  if_e	sub	fp, #20
13218     12 23 02 A6 |  if_e	mov	local03, local04
1321c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
13220     20 00 90 5D |  if_ne	jmp	#LR__1553
13224     A7 20 02 FB | 	rdlong	local02, fp
13228     0C 4E 05 F1 | 	add	fp, #12
1322c     A7 22 02 FB | 	rdlong	local03, fp
13230     11 21 02 FD | 	qmul	local02, local03
13234     0C 4E 85 F1 | 	sub	fp, #12
13238     18 1E 62 FD | 	getqx	local01
1323c     A7 1E 62 FC | 	wrlong	local01, fp
13240     D0 01 90 FD | 	jmp	#LR__1559
13244                 | LR__1553
13244                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
13244     08 4E 05 F1 | 	add	fp, #8
13248     A7 1E 02 FB | 	rdlong	local01, fp
1324c     08 4E 85 F1 | 	sub	fp, #8
13250     1C 1E 0E F2 | 	cmp	local01, #28 wz
13254     14 4E 05 A1 |  if_e	add	fp, #20
13258     A7 24 02 AB |  if_e	rdlong	local04, fp
1325c     14 4E 85 A1 |  if_e	sub	fp, #20
13260     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
13264     20 00 90 5D |  if_ne	jmp	#LR__1554
13268     A7 20 02 FB | 	rdlong	local02, fp
1326c     0C 4E 05 F1 | 	add	fp, #12
13270     A7 22 02 FB | 	rdlong	local03, fp
13274     11 21 02 FD | 	qmul	local02, local03
13278     0C 4E 85 F1 | 	sub	fp, #12
1327c     18 1E 62 FD | 	getqx	local01
13280     A7 1E 62 FC | 	wrlong	local01, fp
13284     8C 01 90 FD | 	jmp	#LR__1559
13288                 | LR__1554
13288                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
13288     08 4E 05 F1 | 	add	fp, #8
1328c     A7 1E 02 FB | 	rdlong	local01, fp
13290     08 4E 85 F1 | 	sub	fp, #8
13294     1C 1E 0E F2 | 	cmp	local01, #28 wz
13298     14 4E 05 A1 |  if_e	add	fp, #20
1329c     A7 22 02 AB |  if_e	rdlong	local03, fp
132a0     14 4E 85 A1 |  if_e	sub	fp, #20
132a4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
132a8     40 00 90 5D |  if_ne	jmp	#LR__1555
132ac     A7 12 02 FB | 	rdlong	arg01, fp
132b0     09 13 52 F6 | 	abs	arg01, arg01 wc
132b4     1F 26 C6 C9 |  if_b	decod	local05, #31
132b8     00 26 06 36 |  if_ae	mov	local05, #0
132bc     0C FF B0 FD | 	call	#__system___float_fromuns
132c0     13 FB 61 F5 | 	xor	result1, local05
132c4     FD 12 02 F6 | 	mov	arg01, result1
132c8     0C 4E 05 F1 | 	add	fp, #12
132cc     A7 14 02 FB | 	rdlong	arg02, fp
132d0     0C 4E 85 F1 | 	sub	fp, #12
132d4     F8 02 B1 FD | 	call	#__system___float_mul
132d8     A7 FA 61 FC | 	wrlong	result1, fp
132dc     08 4E 05 F1 | 	add	fp, #8
132e0     A7 3C 68 FC | 	wrlong	#30, fp
132e4     08 4E 85 F1 | 	sub	fp, #8
132e8     28 01 90 FD | 	jmp	#LR__1559
132ec                 | LR__1555
132ec                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
132ec     08 4E 05 F1 | 	add	fp, #8
132f0     A7 1E 02 FB | 	rdlong	local01, fp
132f4     08 4E 85 F1 | 	sub	fp, #8
132f8     1E 1E 0E F2 | 	cmp	local01, #30 wz
132fc     14 4E 05 A1 |  if_e	add	fp, #20
13300     A7 22 02 AB |  if_e	rdlong	local03, fp
13304     14 4E 85 A1 |  if_e	sub	fp, #20
13308     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1330c     28 00 90 5D |  if_ne	jmp	#LR__1556
13310     A7 1E 02 FB | 	rdlong	local01, fp
13314     0C 4E 05 F1 | 	add	fp, #12
13318     A7 12 02 FB | 	rdlong	arg01, fp
1331c     0C 4E 85 F1 | 	sub	fp, #12
13320     A8 FE B0 FD | 	call	#__system___float_fromuns
13324     FD 14 02 F6 | 	mov	arg02, result1
13328     0F 13 02 F6 | 	mov	arg01, local01
1332c     A0 02 B1 FD | 	call	#__system___float_mul
13330     A7 FA 61 FC | 	wrlong	result1, fp
13334     DC 00 90 FD | 	jmp	#LR__1559
13338                 | LR__1556
13338                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
13338     08 4E 05 F1 | 	add	fp, #8
1333c     A7 1E 02 FB | 	rdlong	local01, fp
13340     08 4E 85 F1 | 	sub	fp, #8
13344     1E 1E 0E F2 | 	cmp	local01, #30 wz
13348     14 4E 05 A1 |  if_e	add	fp, #20
1334c     A7 22 02 AB |  if_e	rdlong	local03, fp
13350     14 4E 85 A1 |  if_e	sub	fp, #20
13354     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13358     38 00 90 5D |  if_ne	jmp	#LR__1557
1335c     A7 1E 02 FB | 	rdlong	local01, fp
13360     0C 4E 05 F1 | 	add	fp, #12
13364     A7 12 02 FB | 	rdlong	arg01, fp
13368     0C 4E 85 F1 | 	sub	fp, #12
1336c     09 13 52 F6 | 	abs	arg01, arg01 wc
13370     1F 26 C6 C9 |  if_b	decod	local05, #31
13374     00 26 06 36 |  if_ae	mov	local05, #0
13378     50 FE B0 FD | 	call	#__system___float_fromuns
1337c     13 FB 61 F5 | 	xor	result1, local05
13380     FD 14 02 F6 | 	mov	arg02, result1
13384     0F 13 02 F6 | 	mov	arg01, local01
13388     44 02 B1 FD | 	call	#__system___float_mul
1338c     A7 FA 61 FC | 	wrlong	result1, fp
13390     80 00 90 FD | 	jmp	#LR__1559
13394                 | LR__1557
13394                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
13394     08 4E 05 F1 | 	add	fp, #8
13398     A7 1E 02 FB | 	rdlong	local01, fp
1339c     08 4E 85 F1 | 	sub	fp, #8
133a0     1E 1E 0E F2 | 	cmp	local01, #30 wz
133a4     14 4E 05 A1 |  if_e	add	fp, #20
133a8     A7 22 02 AB |  if_e	rdlong	local03, fp
133ac     14 4E 85 A1 |  if_e	sub	fp, #20
133b0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
133b4     1C 00 90 5D |  if_ne	jmp	#LR__1558
133b8     A7 12 02 FB | 	rdlong	arg01, fp
133bc     0C 4E 05 F1 | 	add	fp, #12
133c0     A7 14 02 FB | 	rdlong	arg02, fp
133c4     0C 4E 85 F1 | 	sub	fp, #12
133c8     04 02 B1 FD | 	call	#__system___float_mul
133cc     A7 FA 61 FC | 	wrlong	result1, fp
133d0     40 00 90 FD | 	jmp	#LR__1559
133d4                 | LR__1558
133d4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
133d4     08 4E 05 F1 | 	add	fp, #8
133d8     A7 1E 02 FB | 	rdlong	local01, fp
133dc     08 4E 85 F1 | 	sub	fp, #8
133e0     1F 1E 0E F2 | 	cmp	local01, #31 wz
133e4     14 4E 05 51 |  if_ne	add	fp, #20
133e8     A7 22 02 5B |  if_ne	rdlong	local03, fp
133ec     14 4E 85 51 |  if_ne	sub	fp, #20
133f0     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
133f4     A7 10 68 AC |  if_e	wrlong	#8, fp
133f8     08 4E 05 A1 |  if_e	add	fp, #8
133fc     A7 FE 69 AC |  if_e	wrlong	#255, fp
13400     08 4E 85 A1 |  if_e	sub	fp, #8
13404     A7 12 68 5C |  if_ne	wrlong	#9, fp
13408     08 4E 05 51 |  if_ne	add	fp, #8
1340c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
13410     08 4E 85 51 |  if_ne	sub	fp, #8
13414                 | LR__1559
13414     A7 12 02 F6 | 	mov	arg01, fp
13418     D4 86 BF FD | 	call	#_push
1341c     A7 F0 03 F6 | 	mov	ptra, fp
13420     B2 00 A0 FD | 	call	#popregs_
13424                 | _do_mul_ret
13424     2D 00 64 FD | 	ret
13428                 | 
13428                 | ' 
13428                 | ' sub do_div 
13428                 | _do_div
13428     01 4A 05 F6 | 	mov	COUNT_, #1
1342c     A8 00 A0 FD | 	call	#pushregs_
13430     18 F0 07 F1 | 	add	ptra, #24
13434     20 86 BF FD | 	call	#_pop
13438     FD 7E 02 F6 | 	mov	muldivb_, result1
1343c     FE 7C 02 F6 | 	mov	muldiva_, result2
13440     FF 1E 02 F6 | 	mov	local01, result3
13444     0C 4E 05 F1 | 	add	fp, #12
13448     A7 7E 62 FC | 	wrlong	muldivb_, fp
1344c     04 4E 05 F1 | 	add	fp, #4
13450     A7 7C 62 FC | 	wrlong	muldiva_, fp
13454     04 4E 05 F1 | 	add	fp, #4
13458     A7 1E 62 FC | 	wrlong	local01, fp
1345c     14 4E 85 F1 | 	sub	fp, #20
13460     F4 85 BF FD | 	call	#_pop
13464     A7 FA 61 FC | 	wrlong	result1, fp
13468     04 4E 05 F1 | 	add	fp, #4
1346c     A7 FC 61 FC | 	wrlong	result2, fp
13470     04 4E 05 F1 | 	add	fp, #4
13474     A7 FE 61 FC | 	wrlong	result3, fp
13478                 | ' 
13478                 | ' t2=pop()
13478                 | ' t1=pop()
13478                 | ' 
13478                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
13478     08 4E 85 F1 | 	sub	fp, #8
1347c     1F FE 0D F2 | 	cmp	result3, #31 wz
13480     14 4E 05 51 |  if_ne	add	fp, #20
13484     A7 12 02 5B |  if_ne	rdlong	arg01, fp
13488     14 4E 85 51 |  if_ne	sub	fp, #20
1348c     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
13490     A7 14 68 AC |  if_e	wrlong	#10, fp
13494     08 4E 05 A1 |  if_e	add	fp, #8
13498     A7 FE 69 AC |  if_e	wrlong	#255, fp
1349c     08 4E 85 A1 |  if_e	sub	fp, #8
134a0     90 01 90 AD |  if_e	jmp	#LR__1566
134a4                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
134a4     08 4E 05 F1 | 	add	fp, #8
134a8     A7 7E 02 FB | 	rdlong	muldivb_, fp
134ac     08 4E 85 F1 | 	sub	fp, #8
134b0     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
134b4     1C 00 90 5D |  if_ne	jmp	#LR__1560
134b8     08 4E 05 F1 | 	add	fp, #8
134bc     A7 38 68 FC | 	wrlong	#28, fp
134c0     08 4E 85 F1 | 	sub	fp, #8
134c4     A7 12 02 FB | 	rdlong	arg01, fp
134c8     00 14 06 F6 | 	mov	arg02, #0
134cc     C8 05 B1 FD | 	call	#__system___float_tointeger
134d0     A7 FA 61 FC | 	wrlong	result1, fp
134d4                 | LR__1560
134d4                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
134d4     14 4E 05 F1 | 	add	fp, #20
134d8     A7 7E 02 FB | 	rdlong	muldivb_, fp
134dc     14 4E 85 F1 | 	sub	fp, #20
134e0     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
134e4     28 00 90 5D |  if_ne	jmp	#LR__1561
134e8     14 4E 05 F1 | 	add	fp, #20
134ec     A7 38 68 FC | 	wrlong	#28, fp
134f0     08 4E 85 F1 | 	sub	fp, #8
134f4     A7 12 02 FB | 	rdlong	arg01, fp
134f8     0C 4E 85 F1 | 	sub	fp, #12
134fc     00 14 06 F6 | 	mov	arg02, #0
13500     94 05 B1 FD | 	call	#__system___float_tointeger
13504     0C 4E 05 F1 | 	add	fp, #12
13508     A7 FA 61 FC | 	wrlong	result1, fp
1350c     0C 4E 85 F1 | 	sub	fp, #12
13510                 | LR__1561
13510                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
13510     08 4E 05 F1 | 	add	fp, #8
13514     A7 7E 02 FB | 	rdlong	muldivb_, fp
13518     08 4E 85 F1 | 	sub	fp, #8
1351c     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
13520     14 4E 05 A1 |  if_e	add	fp, #20
13524     A7 1E 02 AB |  if_e	rdlong	local01, fp
13528     14 4E 85 A1 |  if_e	sub	fp, #20
1352c     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
13530     20 00 90 5D |  if_ne	jmp	#LR__1562
13534     0C 4E 05 F1 | 	add	fp, #12
13538     A7 1E 02 FB | 	rdlong	local01, fp
1353c     0C 4E 85 F1 | 	sub	fp, #12
13540     A7 7E 02 FB | 	rdlong	muldivb_, fp
13544     0F 7F 12 FD | 	qdiv	muldivb_, local01
13548     18 1E 62 FD | 	getqx	local01
1354c     A7 1E 62 FC | 	wrlong	local01, fp
13550     E0 00 90 FD | 	jmp	#LR__1566
13554                 | LR__1562
13554                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
13554     08 4E 05 F1 | 	add	fp, #8
13558     A7 7E 02 FB | 	rdlong	muldivb_, fp
1355c     08 4E 85 F1 | 	sub	fp, #8
13560     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
13564     14 4E 05 A1 |  if_e	add	fp, #20
13568     A7 1E 02 AB |  if_e	rdlong	local01, fp
1356c     14 4E 85 A1 |  if_e	sub	fp, #20
13570     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
13574     2C 00 90 5D |  if_ne	jmp	#LR__1563
13578     0C 4E 05 F1 | 	add	fp, #12
1357c     A7 1E 02 FB | 	rdlong	local01, fp
13580     0C 4E 85 F1 | 	sub	fp, #12
13584     A7 7E 02 FB | 	rdlong	muldivb_, fp
13588     0F 7F 12 FD | 	qdiv	muldivb_, local01
1358c     18 1E 62 FD | 	getqx	local01
13590     A7 1E 62 FC | 	wrlong	local01, fp
13594     08 4E 05 F1 | 	add	fp, #8
13598     A7 38 68 FC | 	wrlong	#28, fp
1359c     08 4E 85 F1 | 	sub	fp, #8
135a0     90 00 90 FD | 	jmp	#LR__1566
135a4                 | LR__1563
135a4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
135a4     08 4E 05 F1 | 	add	fp, #8
135a8     A7 7E 02 FB | 	rdlong	muldivb_, fp
135ac     08 4E 85 F1 | 	sub	fp, #8
135b0     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
135b4     14 4E 05 A1 |  if_e	add	fp, #20
135b8     A7 1E 02 AB |  if_e	rdlong	local01, fp
135bc     14 4E 85 A1 |  if_e	sub	fp, #20
135c0     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
135c4     1C 00 90 5D |  if_ne	jmp	#LR__1564
135c8     A7 7C 02 FB | 	rdlong	muldiva_, fp
135cc     0C 4E 05 F1 | 	add	fp, #12
135d0     A7 7E 02 FB | 	rdlong	muldivb_, fp
135d4     0C 4E 85 F1 | 	sub	fp, #12
135d8     BA 00 A0 FD | 	call	#divide_
135dc     A7 7E 62 FC | 	wrlong	muldivb_, fp
135e0     50 00 90 FD | 	jmp	#LR__1566
135e4                 | LR__1564
135e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
135e4     08 4E 05 F1 | 	add	fp, #8
135e8     A7 7E 02 FB | 	rdlong	muldivb_, fp
135ec     08 4E 85 F1 | 	sub	fp, #8
135f0     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
135f4     14 4E 05 A1 |  if_e	add	fp, #20
135f8     A7 1E 02 AB |  if_e	rdlong	local01, fp
135fc     14 4E 85 A1 |  if_e	sub	fp, #20
13600     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
13604     1C 00 90 5D |  if_ne	jmp	#LR__1565
13608     A7 7C 02 FB | 	rdlong	muldiva_, fp
1360c     0C 4E 05 F1 | 	add	fp, #12
13610     A7 7E 02 FB | 	rdlong	muldivb_, fp
13614     0C 4E 85 F1 | 	sub	fp, #12
13618     BA 00 A0 FD | 	call	#divide_
1361c     A7 7E 62 FC | 	wrlong	muldivb_, fp
13620     10 00 90 FD | 	jmp	#LR__1566
13624                 | LR__1565
13624     A7 16 68 FC | 	wrlong	#11, fp
13628     08 4E 05 F1 | 	add	fp, #8
1362c     A7 FE 69 FC | 	wrlong	#255, fp
13630     08 4E 85 F1 | 	sub	fp, #8
13634                 | LR__1566
13634     A7 12 02 F6 | 	mov	arg01, fp
13638     B4 84 BF FD | 	call	#_push
1363c     A7 F0 03 F6 | 	mov	ptra, fp
13640     B2 00 A0 FD | 	call	#popregs_
13644                 | _do_div_ret
13644     2D 00 64 FD | 	ret
13648                 | 
13648                 | ' 
13648                 | ' sub do_fdiv 
13648                 | _do_fdiv
13648     02 4A 05 F6 | 	mov	COUNT_, #2
1364c     A8 00 A0 FD | 	call	#pushregs_
13650     18 F0 07 F1 | 	add	ptra, #24
13654     00 84 BF FD | 	call	#_pop
13658     FD 14 02 F6 | 	mov	arg02, result1
1365c     FE 12 02 F6 | 	mov	arg01, result2
13660     FF 1E 02 F6 | 	mov	local01, result3
13664     0C 4E 05 F1 | 	add	fp, #12
13668     A7 14 62 FC | 	wrlong	arg02, fp
1366c     04 4E 05 F1 | 	add	fp, #4
13670     A7 12 62 FC | 	wrlong	arg01, fp
13674     04 4E 05 F1 | 	add	fp, #4
13678     A7 1E 62 FC | 	wrlong	local01, fp
1367c     14 4E 85 F1 | 	sub	fp, #20
13680     D4 83 BF FD | 	call	#_pop
13684     A7 FA 61 FC | 	wrlong	result1, fp
13688     04 4E 05 F1 | 	add	fp, #4
1368c     A7 FC 61 FC | 	wrlong	result2, fp
13690     04 4E 05 F1 | 	add	fp, #4
13694     A7 FE 61 FC | 	wrlong	result3, fp
13698                 | ' 
13698                 | ' t2=pop()
13698                 | ' t1=pop()
13698                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
13698     08 4E 85 F1 | 	sub	fp, #8
1369c     1F FE 0D F2 | 	cmp	result3, #31 wz
136a0     14 4E 05 51 |  if_ne	add	fp, #20
136a4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
136a8     14 4E 85 51 |  if_ne	sub	fp, #20
136ac     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
136b0     A7 14 68 AC |  if_e	wrlong	#10, fp
136b4     08 4E 05 A1 |  if_e	add	fp, #8
136b8     A7 FE 69 AC |  if_e	wrlong	#255, fp
136bc     08 4E 85 A1 |  if_e	sub	fp, #8
136c0     38 01 90 AD |  if_e	jmp	#LR__1575
136c4                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
136c4     08 4E 05 F1 | 	add	fp, #8
136c8     A7 14 02 FB | 	rdlong	arg02, fp
136cc     08 4E 85 F1 | 	sub	fp, #8
136d0     1C 14 0E F2 | 	cmp	arg02, #28 wz
136d4     28 00 90 5D |  if_ne	jmp	#LR__1570
136d8     08 4E 05 F1 | 	add	fp, #8
136dc     A7 3C 68 FC | 	wrlong	#30, fp
136e0     08 4E 85 F1 | 	sub	fp, #8
136e4     A7 12 02 FB | 	rdlong	arg01, fp
136e8     09 13 52 F6 | 	abs	arg01, arg01 wc
136ec     1F 20 C6 C9 |  if_b	decod	local02, #31
136f0     00 20 06 36 |  if_ae	mov	local02, #0
136f4     D4 FA B0 FD | 	call	#__system___float_fromuns
136f8     10 FB 61 F5 | 	xor	result1, local02
136fc     A7 FA 61 FC | 	wrlong	result1, fp
13700                 | LR__1570
13700                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
13700     08 4E 05 F1 | 	add	fp, #8
13704     A7 14 02 FB | 	rdlong	arg02, fp
13708     08 4E 85 F1 | 	sub	fp, #8
1370c     1D 14 0E F2 | 	cmp	arg02, #29 wz
13710     18 00 90 5D |  if_ne	jmp	#LR__1571
13714     08 4E 05 F1 | 	add	fp, #8
13718     A7 3C 68 FC | 	wrlong	#30, fp
1371c     08 4E 85 F1 | 	sub	fp, #8
13720     A7 12 02 FB | 	rdlong	arg01, fp
13724     A4 FA B0 FD | 	call	#__system___float_fromuns
13728     A7 FA 61 FC | 	wrlong	result1, fp
1372c                 | LR__1571
1372c                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1372c     14 4E 05 F1 | 	add	fp, #20
13730     A7 14 02 FB | 	rdlong	arg02, fp
13734     14 4E 85 F1 | 	sub	fp, #20
13738     1C 14 0E F2 | 	cmp	arg02, #28 wz
1373c     34 00 90 5D |  if_ne	jmp	#LR__1572
13740     14 4E 05 F1 | 	add	fp, #20
13744     A7 3C 68 FC | 	wrlong	#30, fp
13748     08 4E 85 F1 | 	sub	fp, #8
1374c     A7 12 02 FB | 	rdlong	arg01, fp
13750     0C 4E 85 F1 | 	sub	fp, #12
13754     09 13 52 F6 | 	abs	arg01, arg01 wc
13758     1F 20 C6 C9 |  if_b	decod	local02, #31
1375c     00 20 06 36 |  if_ae	mov	local02, #0
13760     68 FA B0 FD | 	call	#__system___float_fromuns
13764     10 FB 61 F5 | 	xor	result1, local02
13768     0C 4E 05 F1 | 	add	fp, #12
1376c     A7 FA 61 FC | 	wrlong	result1, fp
13770     0C 4E 85 F1 | 	sub	fp, #12
13774                 | LR__1572
13774                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
13774     14 4E 05 F1 | 	add	fp, #20
13778     A7 14 02 FB | 	rdlong	arg02, fp
1377c     14 4E 85 F1 | 	sub	fp, #20
13780     1D 14 0E F2 | 	cmp	arg02, #29 wz
13784     24 00 90 5D |  if_ne	jmp	#LR__1573
13788     14 4E 05 F1 | 	add	fp, #20
1378c     A7 3C 68 FC | 	wrlong	#30, fp
13790     08 4E 85 F1 | 	sub	fp, #8
13794     A7 12 02 FB | 	rdlong	arg01, fp
13798     0C 4E 85 F1 | 	sub	fp, #12
1379c     2C FA B0 FD | 	call	#__system___float_fromuns
137a0     0C 4E 05 F1 | 	add	fp, #12
137a4     A7 FA 61 FC | 	wrlong	result1, fp
137a8     0C 4E 85 F1 | 	sub	fp, #12
137ac                 | LR__1573
137ac                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
137ac     08 4E 05 F1 | 	add	fp, #8
137b0     A7 14 02 FB | 	rdlong	arg02, fp
137b4     08 4E 85 F1 | 	sub	fp, #8
137b8     1E 14 0E F2 | 	cmp	arg02, #30 wz
137bc     14 4E 05 A1 |  if_e	add	fp, #20
137c0     A7 1E 02 AB |  if_e	rdlong	local01, fp
137c4     14 4E 85 A1 |  if_e	sub	fp, #20
137c8     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
137cc     1C 00 90 5D |  if_ne	jmp	#LR__1574
137d0     A7 12 02 FB | 	rdlong	arg01, fp
137d4     0C 4E 05 F1 | 	add	fp, #12
137d8     A7 14 02 FB | 	rdlong	arg02, fp
137dc     0C 4E 85 F1 | 	sub	fp, #12
137e0     F0 FF B0 FD | 	call	#__system___float_div
137e4     A7 FA 61 FC | 	wrlong	result1, fp
137e8     10 00 90 FD | 	jmp	#LR__1575
137ec                 | LR__1574
137ec     A7 16 68 FC | 	wrlong	#11, fp
137f0     08 4E 05 F1 | 	add	fp, #8
137f4     A7 FE 69 FC | 	wrlong	#255, fp
137f8     08 4E 85 F1 | 	sub	fp, #8
137fc                 | LR__1575
137fc     A7 12 02 F6 | 	mov	arg01, fp
13800     EC 82 BF FD | 	call	#_push
13804     A7 F0 03 F6 | 	mov	ptra, fp
13808     B2 00 A0 FD | 	call	#popregs_
1380c                 | _do_fdiv_ret
1380c     2D 00 64 FD | 	ret
13810                 | 
13810                 | ' 
13810                 | ' 
13810                 | ' sub do_mod 
13810                 | _do_mod
13810     01 4A 05 F6 | 	mov	COUNT_, #1
13814     A8 00 A0 FD | 	call	#pushregs_
13818     18 F0 07 F1 | 	add	ptra, #24
1381c     38 82 BF FD | 	call	#_pop
13820     FD 7E 02 F6 | 	mov	muldivb_, result1
13824     FE 7C 02 F6 | 	mov	muldiva_, result2
13828     FF 1E 02 F6 | 	mov	local01, result3
1382c     0C 4E 05 F1 | 	add	fp, #12
13830     A7 7E 62 FC | 	wrlong	muldivb_, fp
13834     04 4E 05 F1 | 	add	fp, #4
13838     A7 7C 62 FC | 	wrlong	muldiva_, fp
1383c     04 4E 05 F1 | 	add	fp, #4
13840     A7 1E 62 FC | 	wrlong	local01, fp
13844     14 4E 85 F1 | 	sub	fp, #20
13848     0C 82 BF FD | 	call	#_pop
1384c     A7 FA 61 FC | 	wrlong	result1, fp
13850     04 4E 05 F1 | 	add	fp, #4
13854     A7 FC 61 FC | 	wrlong	result2, fp
13858     04 4E 05 F1 | 	add	fp, #4
1385c     A7 FE 61 FC | 	wrlong	result3, fp
13860                 | ' 
13860                 | ' t2=pop()
13860                 | ' t1=pop()
13860                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
13860     08 4E 85 F1 | 	sub	fp, #8
13864     1F FE 0D F2 | 	cmp	result3, #31 wz
13868     14 4E 05 51 |  if_ne	add	fp, #20
1386c     A7 12 02 5B |  if_ne	rdlong	arg01, fp
13870     14 4E 85 51 |  if_ne	sub	fp, #20
13874     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
13878     A7 14 68 AC |  if_e	wrlong	#10, fp
1387c     08 4E 05 A1 |  if_e	add	fp, #8
13880     A7 FE 69 AC |  if_e	wrlong	#255, fp
13884     08 4E 85 A1 |  if_e	sub	fp, #8
13888     90 01 90 AD |  if_e	jmp	#LR__1586
1388c                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1388c     08 4E 05 F1 | 	add	fp, #8
13890     A7 7E 02 FB | 	rdlong	muldivb_, fp
13894     08 4E 85 F1 | 	sub	fp, #8
13898     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
1389c     1C 00 90 5D |  if_ne	jmp	#LR__1580
138a0     08 4E 05 F1 | 	add	fp, #8
138a4     A7 38 68 FC | 	wrlong	#28, fp
138a8     08 4E 85 F1 | 	sub	fp, #8
138ac     A7 12 02 FB | 	rdlong	arg01, fp
138b0     00 14 06 F6 | 	mov	arg02, #0
138b4     E0 01 B1 FD | 	call	#__system___float_tointeger
138b8     A7 FA 61 FC | 	wrlong	result1, fp
138bc                 | LR__1580
138bc                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
138bc     14 4E 05 F1 | 	add	fp, #20
138c0     A7 7E 02 FB | 	rdlong	muldivb_, fp
138c4     14 4E 85 F1 | 	sub	fp, #20
138c8     1E 7E 0E F2 | 	cmp	muldivb_, #30 wz
138cc     28 00 90 5D |  if_ne	jmp	#LR__1581
138d0     14 4E 05 F1 | 	add	fp, #20
138d4     A7 38 68 FC | 	wrlong	#28, fp
138d8     08 4E 85 F1 | 	sub	fp, #8
138dc     A7 12 02 FB | 	rdlong	arg01, fp
138e0     0C 4E 85 F1 | 	sub	fp, #12
138e4     00 14 06 F6 | 	mov	arg02, #0
138e8     AC 01 B1 FD | 	call	#__system___float_tointeger
138ec     0C 4E 05 F1 | 	add	fp, #12
138f0     A7 FA 61 FC | 	wrlong	result1, fp
138f4     0C 4E 85 F1 | 	sub	fp, #12
138f8                 | LR__1581
138f8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
138f8     08 4E 05 F1 | 	add	fp, #8
138fc     A7 7E 02 FB | 	rdlong	muldivb_, fp
13900     08 4E 85 F1 | 	sub	fp, #8
13904     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
13908     14 4E 05 A1 |  if_e	add	fp, #20
1390c     A7 1E 02 AB |  if_e	rdlong	local01, fp
13910     14 4E 85 A1 |  if_e	sub	fp, #20
13914     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
13918     20 00 90 5D |  if_ne	jmp	#LR__1582
1391c     0C 4E 05 F1 | 	add	fp, #12
13920     A7 1E 02 FB | 	rdlong	local01, fp
13924     0C 4E 85 F1 | 	sub	fp, #12
13928     A7 7E 02 FB | 	rdlong	muldivb_, fp
1392c     0F 7F 12 FD | 	qdiv	muldivb_, local01
13930     19 1E 62 FD | 	getqy	local01
13934     A7 1E 62 FC | 	wrlong	local01, fp
13938     E0 00 90 FD | 	jmp	#LR__1586
1393c                 | LR__1582
1393c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1393c     08 4E 05 F1 | 	add	fp, #8
13940     A7 7E 02 FB | 	rdlong	muldivb_, fp
13944     08 4E 85 F1 | 	sub	fp, #8
13948     1D 7E 0E F2 | 	cmp	muldivb_, #29 wz
1394c     14 4E 05 A1 |  if_e	add	fp, #20
13950     A7 1E 02 AB |  if_e	rdlong	local01, fp
13954     14 4E 85 A1 |  if_e	sub	fp, #20
13958     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
1395c     2C 00 90 5D |  if_ne	jmp	#LR__1583
13960     0C 4E 05 F1 | 	add	fp, #12
13964     A7 1E 02 FB | 	rdlong	local01, fp
13968     0C 4E 85 F1 | 	sub	fp, #12
1396c     A7 7E 02 FB | 	rdlong	muldivb_, fp
13970     0F 7F 12 FD | 	qdiv	muldivb_, local01
13974     19 1E 62 FD | 	getqy	local01
13978     A7 1E 62 FC | 	wrlong	local01, fp
1397c     08 4E 05 F1 | 	add	fp, #8
13980     A7 38 68 FC | 	wrlong	#28, fp
13984     08 4E 85 F1 | 	sub	fp, #8
13988     90 00 90 FD | 	jmp	#LR__1586
1398c                 | LR__1583
1398c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1398c     08 4E 05 F1 | 	add	fp, #8
13990     A7 7E 02 FB | 	rdlong	muldivb_, fp
13994     08 4E 85 F1 | 	sub	fp, #8
13998     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
1399c     14 4E 05 A1 |  if_e	add	fp, #20
139a0     A7 1E 02 AB |  if_e	rdlong	local01, fp
139a4     14 4E 85 A1 |  if_e	sub	fp, #20
139a8     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
139ac     1C 00 90 5D |  if_ne	jmp	#LR__1584
139b0     A7 7C 02 FB | 	rdlong	muldiva_, fp
139b4     0C 4E 05 F1 | 	add	fp, #12
139b8     A7 7E 02 FB | 	rdlong	muldivb_, fp
139bc     0C 4E 85 F1 | 	sub	fp, #12
139c0     BA 00 A0 FD | 	call	#divide_
139c4     A7 7C 62 FC | 	wrlong	muldiva_, fp
139c8     50 00 90 FD | 	jmp	#LR__1586
139cc                 | LR__1584
139cc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
139cc     08 4E 05 F1 | 	add	fp, #8
139d0     A7 7E 02 FB | 	rdlong	muldivb_, fp
139d4     08 4E 85 F1 | 	sub	fp, #8
139d8     1C 7E 0E F2 | 	cmp	muldivb_, #28 wz
139dc     14 4E 05 A1 |  if_e	add	fp, #20
139e0     A7 1E 02 AB |  if_e	rdlong	local01, fp
139e4     14 4E 85 A1 |  if_e	sub	fp, #20
139e8     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
139ec     1C 00 90 5D |  if_ne	jmp	#LR__1585
139f0     A7 7C 02 FB | 	rdlong	muldiva_, fp
139f4     0C 4E 05 F1 | 	add	fp, #12
139f8     A7 7E 02 FB | 	rdlong	muldivb_, fp
139fc     0C 4E 85 F1 | 	sub	fp, #12
13a00     BA 00 A0 FD | 	call	#divide_
13a04     A7 7C 62 FC | 	wrlong	muldiva_, fp
13a08     10 00 90 FD | 	jmp	#LR__1586
13a0c                 | LR__1585
13a0c     A7 16 68 FC | 	wrlong	#11, fp
13a10     08 4E 05 F1 | 	add	fp, #8
13a14     A7 FE 69 FC | 	wrlong	#255, fp
13a18     08 4E 85 F1 | 	sub	fp, #8
13a1c                 | LR__1586
13a1c     A7 12 02 F6 | 	mov	arg01, fp
13a20     CC 80 BF FD | 	call	#_push
13a24     A7 F0 03 F6 | 	mov	ptra, fp
13a28     B2 00 A0 FD | 	call	#popregs_
13a2c                 | _do_mod_ret
13a2c     2D 00 64 FD | 	ret
13a30                 | 
13a30                 | ' 
13a30                 | ' sub do_shl 
13a30                 | _do_shl
13a30     03 4A 05 F6 | 	mov	COUNT_, #3
13a34     A8 00 A0 FD | 	call	#pushregs_
13a38     18 F0 07 F1 | 	add	ptra, #24
13a3c     18 80 BF FD | 	call	#_pop
13a40     FD 12 02 F6 | 	mov	arg01, result1
13a44     FE 1E 02 F6 | 	mov	local01, result2
13a48     FF 20 02 F6 | 	mov	local02, result3
13a4c     0C 4E 05 F1 | 	add	fp, #12
13a50     A7 12 62 FC | 	wrlong	arg01, fp
13a54     04 4E 05 F1 | 	add	fp, #4
13a58     A7 1E 62 FC | 	wrlong	local01, fp
13a5c     04 4E 05 F1 | 	add	fp, #4
13a60     A7 20 62 FC | 	wrlong	local02, fp
13a64     14 4E 85 F1 | 	sub	fp, #20
13a68     EC 7F BF FD | 	call	#_pop
13a6c     FF 22 02 F6 | 	mov	local03, result3
13a70     A7 FA 61 FC | 	wrlong	result1, fp
13a74     04 4E 05 F1 | 	add	fp, #4
13a78     A7 FC 61 FC | 	wrlong	result2, fp
13a7c     04 4E 05 F1 | 	add	fp, #4
13a80     A7 22 62 FC | 	wrlong	local03, fp
13a84                 | ' 
13a84                 | ' t2=pop()
13a84                 | ' t1=pop()
13a84                 | ' 
13a84                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
13a84     08 4E 85 F1 | 	sub	fp, #8
13a88     1C 22 0E F2 | 	cmp	local03, #28 wz
13a8c     A7 22 02 AB |  if_e	rdlong	local03, fp
13a90     A7 22 62 AC |  if_e	wrlong	local03, fp
13a94     08 4E 05 A1 |  if_e	add	fp, #8
13a98     A7 3A 68 AC |  if_e	wrlong	#29, fp
13a9c     08 4E 85 A1 |  if_e	sub	fp, #8
13aa0                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
13aa0     14 4E 05 F1 | 	add	fp, #20
13aa4     A7 22 02 FB | 	rdlong	local03, fp
13aa8     14 4E 85 F1 | 	sub	fp, #20
13aac     1C 22 0E F2 | 	cmp	local03, #28 wz
13ab0     18 00 90 5D |  if_ne	jmp	#LR__1590
13ab4     0C 4E 05 F1 | 	add	fp, #12
13ab8     A7 22 02 FB | 	rdlong	local03, fp
13abc     A7 22 62 FC | 	wrlong	local03, fp
13ac0     08 4E 05 F1 | 	add	fp, #8
13ac4     A7 3A 68 FC | 	wrlong	#29, fp
13ac8     14 4E 85 F1 | 	sub	fp, #20
13acc                 | LR__1590
13acc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
13acc     08 4E 05 F1 | 	add	fp, #8
13ad0     A7 22 02 FB | 	rdlong	local03, fp
13ad4     08 4E 85 F1 | 	sub	fp, #8
13ad8     1F 22 0E F2 | 	cmp	local03, #31 wz
13adc     14 4E 05 51 |  if_ne	add	fp, #20
13ae0     A7 20 02 5B |  if_ne	rdlong	local02, fp
13ae4     14 4E 85 51 |  if_ne	sub	fp, #20
13ae8     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
13aec     08 4E 05 51 |  if_ne	add	fp, #8
13af0     A7 22 02 5B |  if_ne	rdlong	local03, fp
13af4     08 4E 85 51 |  if_ne	sub	fp, #8
13af8     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
13afc     14 4E 05 51 |  if_ne	add	fp, #20
13b00     14 4E 85 51 |  if_ne	sub	fp, #20
13b04     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
13b08     A7 0C 68 AC |  if_e	wrlong	#6, fp
13b0c     08 4E 05 A1 |  if_e	add	fp, #8
13b10     A7 FE 69 AC |  if_e	wrlong	#255, fp
13b14     08 4E 85 A1 |  if_e	sub	fp, #8
13b18     18 00 90 AD |  if_e	jmp	#LR__1591
13b1c     A7 22 02 FB | 	rdlong	local03, fp
13b20     0C 4E 05 F1 | 	add	fp, #12
13b24     A7 1E 02 FB | 	rdlong	local01, fp
13b28     0C 4E 85 F1 | 	sub	fp, #12
13b2c     0F 23 62 F0 | 	shl	local03, local01
13b30     A7 22 62 FC | 	wrlong	local03, fp
13b34                 | LR__1591
13b34     A7 12 02 F6 | 	mov	arg01, fp
13b38     B4 7F BF FD | 	call	#_push
13b3c     A7 F0 03 F6 | 	mov	ptra, fp
13b40     B2 00 A0 FD | 	call	#popregs_
13b44                 | _do_shl_ret
13b44     2D 00 64 FD | 	ret
13b48                 | 
13b48                 | ' 
13b48                 | ' sub do_shr 
13b48                 | _do_shr
13b48     03 4A 05 F6 | 	mov	COUNT_, #3
13b4c     A8 00 A0 FD | 	call	#pushregs_
13b50     18 F0 07 F1 | 	add	ptra, #24
13b54     00 7F BF FD | 	call	#_pop
13b58     FD 12 02 F6 | 	mov	arg01, result1
13b5c     FE 1E 02 F6 | 	mov	local01, result2
13b60     FF 20 02 F6 | 	mov	local02, result3
13b64     0C 4E 05 F1 | 	add	fp, #12
13b68     A7 12 62 FC | 	wrlong	arg01, fp
13b6c     04 4E 05 F1 | 	add	fp, #4
13b70     A7 1E 62 FC | 	wrlong	local01, fp
13b74     04 4E 05 F1 | 	add	fp, #4
13b78     A7 20 62 FC | 	wrlong	local02, fp
13b7c     14 4E 85 F1 | 	sub	fp, #20
13b80     D4 7E BF FD | 	call	#_pop
13b84     FF 22 02 F6 | 	mov	local03, result3
13b88     A7 FA 61 FC | 	wrlong	result1, fp
13b8c     04 4E 05 F1 | 	add	fp, #4
13b90     A7 FC 61 FC | 	wrlong	result2, fp
13b94     04 4E 05 F1 | 	add	fp, #4
13b98     A7 22 62 FC | 	wrlong	local03, fp
13b9c                 | ' t2=pop()
13b9c                 | ' t1=pop()
13b9c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
13b9c     08 4E 85 F1 | 	sub	fp, #8
13ba0     1C 22 0E F2 | 	cmp	local03, #28 wz
13ba4     A7 22 02 AB |  if_e	rdlong	local03, fp
13ba8     A7 22 62 AC |  if_e	wrlong	local03, fp
13bac     08 4E 05 A1 |  if_e	add	fp, #8
13bb0     A7 3A 68 AC |  if_e	wrlong	#29, fp
13bb4     08 4E 85 A1 |  if_e	sub	fp, #8
13bb8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
13bb8     14 4E 05 F1 | 	add	fp, #20
13bbc     A7 22 02 FB | 	rdlong	local03, fp
13bc0     14 4E 85 F1 | 	sub	fp, #20
13bc4     1C 22 0E F2 | 	cmp	local03, #28 wz
13bc8     18 00 90 5D |  if_ne	jmp	#LR__1600
13bcc     0C 4E 05 F1 | 	add	fp, #12
13bd0     A7 22 02 FB | 	rdlong	local03, fp
13bd4     A7 22 62 FC | 	wrlong	local03, fp
13bd8     08 4E 05 F1 | 	add	fp, #8
13bdc     A7 3A 68 FC | 	wrlong	#29, fp
13be0     14 4E 85 F1 | 	sub	fp, #20
13be4                 | LR__1600
13be4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
13be4     08 4E 05 F1 | 	add	fp, #8
13be8     A7 22 02 FB | 	rdlong	local03, fp
13bec     08 4E 85 F1 | 	sub	fp, #8
13bf0     1F 22 0E F2 | 	cmp	local03, #31 wz
13bf4     14 4E 05 51 |  if_ne	add	fp, #20
13bf8     A7 20 02 5B |  if_ne	rdlong	local02, fp
13bfc     14 4E 85 51 |  if_ne	sub	fp, #20
13c00     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
13c04     08 4E 05 51 |  if_ne	add	fp, #8
13c08     A7 22 02 5B |  if_ne	rdlong	local03, fp
13c0c     08 4E 85 51 |  if_ne	sub	fp, #8
13c10     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
13c14     14 4E 05 51 |  if_ne	add	fp, #20
13c18     14 4E 85 51 |  if_ne	sub	fp, #20
13c1c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
13c20     A7 0C 68 AC |  if_e	wrlong	#6, fp
13c24     08 4E 05 A1 |  if_e	add	fp, #8
13c28     A7 FE 69 AC |  if_e	wrlong	#255, fp
13c2c     08 4E 85 A1 |  if_e	sub	fp, #8
13c30     18 00 90 AD |  if_e	jmp	#LR__1601
13c34     A7 22 02 FB | 	rdlong	local03, fp
13c38     0C 4E 05 F1 | 	add	fp, #12
13c3c     A7 1E 02 FB | 	rdlong	local01, fp
13c40     0C 4E 85 F1 | 	sub	fp, #12
13c44     0F 23 42 F0 | 	shr	local03, local01
13c48     A7 22 62 FC | 	wrlong	local03, fp
13c4c                 | LR__1601
13c4c     A7 12 02 F6 | 	mov	arg01, fp
13c50     9C 7E BF FD | 	call	#_push
13c54     A7 F0 03 F6 | 	mov	ptra, fp
13c58     B2 00 A0 FD | 	call	#popregs_
13c5c                 | _do_shr_ret
13c5c     2D 00 64 FD | 	ret
13c60                 | 
13c60                 | ' 
13c60                 | ' sub do_power 
13c60                 | _do_power
13c60     02 4A 05 F6 | 	mov	COUNT_, #2
13c64     A8 00 A0 FD | 	call	#pushregs_
13c68     18 F0 07 F1 | 	add	ptra, #24
13c6c     E8 7D BF FD | 	call	#_pop
13c70     FD 14 02 F6 | 	mov	arg02, result1
13c74     FE 12 02 F6 | 	mov	arg01, result2
13c78     FF 1E 02 F6 | 	mov	local01, result3
13c7c     0C 4E 05 F1 | 	add	fp, #12
13c80     A7 14 62 FC | 	wrlong	arg02, fp
13c84     04 4E 05 F1 | 	add	fp, #4
13c88     A7 12 62 FC | 	wrlong	arg01, fp
13c8c     04 4E 05 F1 | 	add	fp, #4
13c90     A7 1E 62 FC | 	wrlong	local01, fp
13c94     14 4E 85 F1 | 	sub	fp, #20
13c98     BC 7D BF FD | 	call	#_pop
13c9c     A7 FA 61 FC | 	wrlong	result1, fp
13ca0     04 4E 05 F1 | 	add	fp, #4
13ca4     A7 FC 61 FC | 	wrlong	result2, fp
13ca8     04 4E 05 F1 | 	add	fp, #4
13cac     A7 FE 61 FC | 	wrlong	result3, fp
13cb0                 | ' t2=pop()
13cb0                 | ' t1=pop()
13cb0                 | ' 
13cb0                 | ' 
13cb0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
13cb0     08 4E 85 F1 | 	sub	fp, #8
13cb4     1F FE 0D F2 | 	cmp	result3, #31 wz
13cb8     14 4E 05 51 |  if_ne	add	fp, #20
13cbc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
13cc0     14 4E 85 51 |  if_ne	sub	fp, #20
13cc4     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
13cc8     A7 18 68 AC |  if_e	wrlong	#12, fp
13ccc     08 4E 05 A1 |  if_e	add	fp, #8
13cd0     A7 FE 69 AC |  if_e	wrlong	#255, fp
13cd4     08 4E 85 A1 |  if_e	sub	fp, #8
13cd8     38 01 90 AD |  if_e	jmp	#LR__1615
13cdc                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
13cdc     08 4E 05 F1 | 	add	fp, #8
13ce0     A7 14 02 FB | 	rdlong	arg02, fp
13ce4     08 4E 85 F1 | 	sub	fp, #8
13ce8     1C 14 0E F2 | 	cmp	arg02, #28 wz
13cec     28 00 90 5D |  if_ne	jmp	#LR__1610
13cf0     08 4E 05 F1 | 	add	fp, #8
13cf4     A7 3C 68 FC | 	wrlong	#30, fp
13cf8     08 4E 85 F1 | 	sub	fp, #8
13cfc     A7 12 02 FB | 	rdlong	arg01, fp
13d00     09 13 52 F6 | 	abs	arg01, arg01 wc
13d04     1F 20 C6 C9 |  if_b	decod	local02, #31
13d08     00 20 06 36 |  if_ae	mov	local02, #0
13d0c     BC F4 B0 FD | 	call	#__system___float_fromuns
13d10     10 FB 61 F5 | 	xor	result1, local02
13d14     A7 FA 61 FC | 	wrlong	result1, fp
13d18                 | LR__1610
13d18                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
13d18     08 4E 05 F1 | 	add	fp, #8
13d1c     A7 14 02 FB | 	rdlong	arg02, fp
13d20     08 4E 85 F1 | 	sub	fp, #8
13d24     1D 14 0E F2 | 	cmp	arg02, #29 wz
13d28     18 00 90 5D |  if_ne	jmp	#LR__1611
13d2c     08 4E 05 F1 | 	add	fp, #8
13d30     A7 3C 68 FC | 	wrlong	#30, fp
13d34     08 4E 85 F1 | 	sub	fp, #8
13d38     A7 12 02 FB | 	rdlong	arg01, fp
13d3c     8C F4 B0 FD | 	call	#__system___float_fromuns
13d40     A7 FA 61 FC | 	wrlong	result1, fp
13d44                 | LR__1611
13d44                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
13d44     14 4E 05 F1 | 	add	fp, #20
13d48     A7 14 02 FB | 	rdlong	arg02, fp
13d4c     14 4E 85 F1 | 	sub	fp, #20
13d50     1C 14 0E F2 | 	cmp	arg02, #28 wz
13d54     34 00 90 5D |  if_ne	jmp	#LR__1612
13d58     14 4E 05 F1 | 	add	fp, #20
13d5c     A7 3C 68 FC | 	wrlong	#30, fp
13d60     08 4E 85 F1 | 	sub	fp, #8
13d64     A7 12 02 FB | 	rdlong	arg01, fp
13d68     0C 4E 85 F1 | 	sub	fp, #12
13d6c     09 13 52 F6 | 	abs	arg01, arg01 wc
13d70     1F 20 C6 C9 |  if_b	decod	local02, #31
13d74     00 20 06 36 |  if_ae	mov	local02, #0
13d78     50 F4 B0 FD | 	call	#__system___float_fromuns
13d7c     10 FB 61 F5 | 	xor	result1, local02
13d80     0C 4E 05 F1 | 	add	fp, #12
13d84     A7 FA 61 FC | 	wrlong	result1, fp
13d88     0C 4E 85 F1 | 	sub	fp, #12
13d8c                 | LR__1612
13d8c                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
13d8c     14 4E 05 F1 | 	add	fp, #20
13d90     A7 14 02 FB | 	rdlong	arg02, fp
13d94     14 4E 85 F1 | 	sub	fp, #20
13d98     1D 14 0E F2 | 	cmp	arg02, #29 wz
13d9c     24 00 90 5D |  if_ne	jmp	#LR__1613
13da0     14 4E 05 F1 | 	add	fp, #20
13da4     A7 3C 68 FC | 	wrlong	#30, fp
13da8     08 4E 85 F1 | 	sub	fp, #8
13dac     A7 12 02 FB | 	rdlong	arg01, fp
13db0     0C 4E 85 F1 | 	sub	fp, #12
13db4     14 F4 B0 FD | 	call	#__system___float_fromuns
13db8     0C 4E 05 F1 | 	add	fp, #12
13dbc     A7 FA 61 FC | 	wrlong	result1, fp
13dc0     0C 4E 85 F1 | 	sub	fp, #12
13dc4                 | LR__1613
13dc4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
13dc4     08 4E 05 F1 | 	add	fp, #8
13dc8     A7 14 02 FB | 	rdlong	arg02, fp
13dcc     08 4E 85 F1 | 	sub	fp, #8
13dd0     1E 14 0E F2 | 	cmp	arg02, #30 wz
13dd4     14 4E 05 A1 |  if_e	add	fp, #20
13dd8     A7 1E 02 AB |  if_e	rdlong	local01, fp
13ddc     14 4E 85 A1 |  if_e	sub	fp, #20
13de0     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
13de4     1C 00 90 5D |  if_ne	jmp	#LR__1614
13de8     A7 12 02 FB | 	rdlong	arg01, fp
13dec     0C 4E 05 F1 | 	add	fp, #12
13df0     A7 14 02 FB | 	rdlong	arg02, fp
13df4     0C 4E 85 F1 | 	sub	fp, #12
13df8     B8 06 B1 FD | 	call	#__system____builtin_powf
13dfc     A7 FA 61 FC | 	wrlong	result1, fp
13e00     10 00 90 FD | 	jmp	#LR__1615
13e04                 | LR__1614
13e04     A7 1A 68 FC | 	wrlong	#13, fp
13e08     08 4E 05 F1 | 	add	fp, #8
13e0c     A7 FE 69 FC | 	wrlong	#255, fp
13e10     08 4E 85 F1 | 	sub	fp, #8
13e14                 | LR__1615
13e14     A7 12 02 F6 | 	mov	arg01, fp
13e18     D4 7C BF FD | 	call	#_push
13e1c     A7 F0 03 F6 | 	mov	ptra, fp
13e20     B2 00 A0 FD | 	call	#popregs_
13e24                 | _do_power_ret
13e24     2D 00 64 FD | 	ret
13e28                 | 
13e28                 | ' 
13e28                 | ' 
13e28                 | ' sub do_eq
13e28                 | _do_eq
13e28     05 4A 05 F6 | 	mov	COUNT_, #5
13e2c     A8 00 A0 FD | 	call	#pushregs_
13e30     18 F0 07 F1 | 	add	ptra, #24
13e34     20 7C BF FD | 	call	#_pop
13e38     FD 1E 02 F6 | 	mov	local01, result1
13e3c     FE 20 02 F6 | 	mov	local02, result2
13e40     FF 22 02 F6 | 	mov	local03, result3
13e44     0C 4E 05 F1 | 	add	fp, #12
13e48     A7 1E 62 FC | 	wrlong	local01, fp
13e4c     04 4E 05 F1 | 	add	fp, #4
13e50     A7 20 62 FC | 	wrlong	local02, fp
13e54     04 4E 05 F1 | 	add	fp, #4
13e58     A7 22 62 FC | 	wrlong	local03, fp
13e5c     14 4E 85 F1 | 	sub	fp, #20
13e60     F4 7B BF FD | 	call	#_pop
13e64     FF 22 02 F6 | 	mov	local03, result3
13e68     A7 FA 61 FC | 	wrlong	result1, fp
13e6c     04 4E 05 F1 | 	add	fp, #4
13e70     A7 FC 61 FC | 	wrlong	result2, fp
13e74     04 4E 05 F1 | 	add	fp, #4
13e78     A7 22 62 FC | 	wrlong	local03, fp
13e7c                 | ' t2=pop()
13e7c                 | ' t1=pop()
13e7c                 | ' 
13e7c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
13e7c     08 4E 85 F1 | 	sub	fp, #8
13e80     1F 22 0E F2 | 	cmp	local03, #31 wz
13e84     14 4E 05 A1 |  if_e	add	fp, #20
13e88     A7 24 02 AB |  if_e	rdlong	local04, fp
13e8c     14 4E 85 A1 |  if_e	sub	fp, #20
13e90     12 23 02 A6 |  if_e	mov	local03, local04
13e94     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
13e98     28 00 90 5D |  if_ne	jmp	#LR__1620
13e9c     00 1E 06 F6 | 	mov	local01, #0
13ea0     A7 12 02 FB | 	rdlong	arg01, fp
13ea4     0C 4E 05 F1 | 	add	fp, #12
13ea8     A7 14 02 FB | 	rdlong	arg02, fp
13eac     0C 4E 85 F1 | 	sub	fp, #12
13eb0     90 CB B0 FD | 	call	#__system___string_cmp
13eb4     00 FA 0D F2 | 	cmp	result1, #0 wz
13eb8     00 1E 26 A6 |  if_e	not	local01, #0
13ebc     A7 1E 62 FC | 	wrlong	local01, fp
13ec0     1C 04 90 FD | 	jmp	#LR__1633
13ec4                 | LR__1620
13ec4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
13ec4     08 4E 05 F1 | 	add	fp, #8
13ec8     A7 1E 02 FB | 	rdlong	local01, fp
13ecc     08 4E 85 F1 | 	sub	fp, #8
13ed0     1E 1E 0E F2 | 	cmp	local01, #30 wz
13ed4     14 4E 05 A1 |  if_e	add	fp, #20
13ed8     A7 24 02 AB |  if_e	rdlong	local04, fp
13edc     14 4E 85 A1 |  if_e	sub	fp, #20
13ee0     12 23 02 A6 |  if_e	mov	local03, local04
13ee4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13ee8     2C 00 90 5D |  if_ne	jmp	#LR__1621
13eec     00 1E 06 F6 | 	mov	local01, #0
13ef0     A7 12 02 FB | 	rdlong	arg01, fp
13ef4     0C 4E 05 F1 | 	add	fp, #12
13ef8     A7 14 02 FB | 	rdlong	arg02, fp
13efc     0C 4E 85 F1 | 	sub	fp, #12
13f00     01 16 06 F6 | 	mov	arg03, #1
13f04     FC FA B0 FD | 	call	#__system___float_cmp
13f08     00 FA 0D F2 | 	cmp	result1, #0 wz
13f0c     00 1E 26 A6 |  if_e	not	local01, #0
13f10     A7 1E 62 FC | 	wrlong	local01, fp
13f14     C8 03 90 FD | 	jmp	#LR__1633
13f18                 | LR__1621
13f18                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
13f18     08 4E 05 F1 | 	add	fp, #8
13f1c     A7 1E 02 FB | 	rdlong	local01, fp
13f20     08 4E 85 F1 | 	sub	fp, #8
13f24     1E 1E 0E F2 | 	cmp	local01, #30 wz
13f28     14 4E 05 A1 |  if_e	add	fp, #20
13f2c     A7 24 02 AB |  if_e	rdlong	local04, fp
13f30     14 4E 85 A1 |  if_e	sub	fp, #20
13f34     12 23 02 A6 |  if_e	mov	local03, local04
13f38     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13f3c     48 00 90 5D |  if_ne	jmp	#LR__1622
13f40     00 1E 06 F6 | 	mov	local01, #0
13f44     A7 20 02 FB | 	rdlong	local02, fp
13f48     0C 4E 05 F1 | 	add	fp, #12
13f4c     A7 12 02 FB | 	rdlong	arg01, fp
13f50     0C 4E 85 F1 | 	sub	fp, #12
13f54     09 13 52 F6 | 	abs	arg01, arg01 wc
13f58     1F 26 C6 C9 |  if_b	decod	local05, #31
13f5c     00 26 06 36 |  if_ae	mov	local05, #0
13f60     68 F2 B0 FD | 	call	#__system___float_fromuns
13f64     13 FB 61 F5 | 	xor	result1, local05
13f68     FD 14 02 F6 | 	mov	arg02, result1
13f6c     10 13 02 F6 | 	mov	arg01, local02
13f70     01 16 06 F6 | 	mov	arg03, #1
13f74     8C FA B0 FD | 	call	#__system___float_cmp
13f78     00 FA 0D F2 | 	cmp	result1, #0 wz
13f7c     00 1E 26 A6 |  if_e	not	local01, #0
13f80     A7 1E 62 FC | 	wrlong	local01, fp
13f84     58 03 90 FD | 	jmp	#LR__1633
13f88                 | LR__1622
13f88                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
13f88     08 4E 05 F1 | 	add	fp, #8
13f8c     A7 1E 02 FB | 	rdlong	local01, fp
13f90     08 4E 85 F1 | 	sub	fp, #8
13f94     1E 1E 0E F2 | 	cmp	local01, #30 wz
13f98     14 4E 05 A1 |  if_e	add	fp, #20
13f9c     A7 24 02 AB |  if_e	rdlong	local04, fp
13fa0     14 4E 85 A1 |  if_e	sub	fp, #20
13fa4     12 23 02 A6 |  if_e	mov	local03, local04
13fa8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
13fac     38 00 90 5D |  if_ne	jmp	#LR__1623
13fb0     00 1E 06 F6 | 	mov	local01, #0
13fb4     A7 20 02 FB | 	rdlong	local02, fp
13fb8     0C 4E 05 F1 | 	add	fp, #12
13fbc     A7 12 02 FB | 	rdlong	arg01, fp
13fc0     0C 4E 85 F1 | 	sub	fp, #12
13fc4     04 F2 B0 FD | 	call	#__system___float_fromuns
13fc8     FD 14 02 F6 | 	mov	arg02, result1
13fcc     10 13 02 F6 | 	mov	arg01, local02
13fd0     01 16 06 F6 | 	mov	arg03, #1
13fd4     2C FA B0 FD | 	call	#__system___float_cmp
13fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
13fdc     00 1E 26 A6 |  if_e	not	local01, #0
13fe0     A7 1E 62 FC | 	wrlong	local01, fp
13fe4     F8 02 90 FD | 	jmp	#LR__1633
13fe8                 | LR__1623
13fe8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
13fe8     08 4E 05 F1 | 	add	fp, #8
13fec     A7 1E 02 FB | 	rdlong	local01, fp
13ff0     08 4E 85 F1 | 	sub	fp, #8
13ff4     1C 1E 0E F2 | 	cmp	local01, #28 wz
13ff8     14 4E 05 A1 |  if_e	add	fp, #20
13ffc     A7 24 02 AB |  if_e	rdlong	local04, fp
14000     14 4E 85 A1 |  if_e	sub	fp, #20
14004     12 23 02 A6 |  if_e	mov	local03, local04
14008     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1400c     44 00 90 5D |  if_ne	jmp	#LR__1624
14010     00 1E 06 F6 | 	mov	local01, #0
14014     A7 12 02 FB | 	rdlong	arg01, fp
14018     09 13 52 F6 | 	abs	arg01, arg01 wc
1401c     1F 26 C6 C9 |  if_b	decod	local05, #31
14020     00 26 06 36 |  if_ae	mov	local05, #0
14024     A4 F1 B0 FD | 	call	#__system___float_fromuns
14028     13 FB 61 F5 | 	xor	result1, local05
1402c     FD 12 02 F6 | 	mov	arg01, result1
14030     0C 4E 05 F1 | 	add	fp, #12
14034     A7 14 02 FB | 	rdlong	arg02, fp
14038     0C 4E 85 F1 | 	sub	fp, #12
1403c     01 16 06 F6 | 	mov	arg03, #1
14040     C0 F9 B0 FD | 	call	#__system___float_cmp
14044     00 FA 0D F2 | 	cmp	result1, #0 wz
14048     00 1E 26 A6 |  if_e	not	local01, #0
1404c     A7 1E 62 FC | 	wrlong	local01, fp
14050     8C 02 90 FD | 	jmp	#LR__1633
14054                 | LR__1624
14054                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
14054     08 4E 05 F1 | 	add	fp, #8
14058     A7 1E 02 FB | 	rdlong	local01, fp
1405c     08 4E 85 F1 | 	sub	fp, #8
14060     1C 1E 0E F2 | 	cmp	local01, #28 wz
14064     14 4E 05 A1 |  if_e	add	fp, #20
14068     A7 24 02 AB |  if_e	rdlong	local04, fp
1406c     14 4E 85 A1 |  if_e	sub	fp, #20
14070     12 23 02 A6 |  if_e	mov	local03, local04
14074     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14078     24 00 90 5D |  if_ne	jmp	#LR__1625
1407c     00 1E 06 F6 | 	mov	local01, #0
14080     A7 20 02 FB | 	rdlong	local02, fp
14084     0C 4E 05 F1 | 	add	fp, #12
14088     A7 22 02 FB | 	rdlong	local03, fp
1408c     0C 4E 85 F1 | 	sub	fp, #12
14090     11 21 0A F2 | 	cmp	local02, local03 wz
14094     01 1E 66 A6 |  if_e	neg	local01, #1
14098     A7 1E 62 FC | 	wrlong	local01, fp
1409c     40 02 90 FD | 	jmp	#LR__1633
140a0                 | LR__1625
140a0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
140a0     08 4E 05 F1 | 	add	fp, #8
140a4     A7 1E 02 FB | 	rdlong	local01, fp
140a8     08 4E 85 F1 | 	sub	fp, #8
140ac     1C 1E 0E F2 | 	cmp	local01, #28 wz
140b0     14 4E 05 A1 |  if_e	add	fp, #20
140b4     A7 24 02 AB |  if_e	rdlong	local04, fp
140b8     14 4E 85 A1 |  if_e	sub	fp, #20
140bc     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
140c0     24 00 90 5D |  if_ne	jmp	#LR__1626
140c4     00 1E 06 F6 | 	mov	local01, #0
140c8     A7 20 02 FB | 	rdlong	local02, fp
140cc     0C 4E 05 F1 | 	add	fp, #12
140d0     A7 22 02 FB | 	rdlong	local03, fp
140d4     0C 4E 85 F1 | 	sub	fp, #12
140d8     11 21 0A F2 | 	cmp	local02, local03 wz
140dc     01 1E 66 A6 |  if_e	neg	local01, #1
140e0     A7 1E 62 FC | 	wrlong	local01, fp
140e4     F8 01 90 FD | 	jmp	#LR__1633
140e8                 | LR__1626
140e8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
140e8     08 4E 05 F1 | 	add	fp, #8
140ec     A7 1E 02 FB | 	rdlong	local01, fp
140f0     08 4E 85 F1 | 	sub	fp, #8
140f4     1D 1E 0E F2 | 	cmp	local01, #29 wz
140f8     14 4E 05 A1 |  if_e	add	fp, #20
140fc     A7 22 02 AB |  if_e	rdlong	local03, fp
14100     14 4E 85 A1 |  if_e	sub	fp, #20
14104     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14108     34 00 90 5D |  if_ne	jmp	#LR__1627
1410c     00 1E 06 F6 | 	mov	local01, #0
14110     A7 12 02 FB | 	rdlong	arg01, fp
14114     B4 F0 B0 FD | 	call	#__system___float_fromuns
14118     FD 12 02 F6 | 	mov	arg01, result1
1411c     0C 4E 05 F1 | 	add	fp, #12
14120     A7 14 02 FB | 	rdlong	arg02, fp
14124     0C 4E 85 F1 | 	sub	fp, #12
14128     01 16 06 F6 | 	mov	arg03, #1
1412c     D4 F8 B0 FD | 	call	#__system___float_cmp
14130     00 FA 0D F2 | 	cmp	result1, #0 wz
14134     00 1E 26 A6 |  if_e	not	local01, #0
14138     A7 1E 62 FC | 	wrlong	local01, fp
1413c     A0 01 90 FD | 	jmp	#LR__1633
14140                 | LR__1627
14140                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
14140     08 4E 05 F1 | 	add	fp, #8
14144     A7 1E 02 FB | 	rdlong	local01, fp
14148     08 4E 85 F1 | 	sub	fp, #8
1414c     1D 1E 0E F2 | 	cmp	local01, #29 wz
14150     14 4E 05 A1 |  if_e	add	fp, #20
14154     A7 22 02 AB |  if_e	rdlong	local03, fp
14158     14 4E 85 A1 |  if_e	sub	fp, #20
1415c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14160     24 00 90 5D |  if_ne	jmp	#LR__1628
14164     00 1E 06 F6 | 	mov	local01, #0
14168     A7 20 02 FB | 	rdlong	local02, fp
1416c     0C 4E 05 F1 | 	add	fp, #12
14170     A7 22 02 FB | 	rdlong	local03, fp
14174     0C 4E 85 F1 | 	sub	fp, #12
14178     11 21 0A F2 | 	cmp	local02, local03 wz
1417c     01 1E 66 A6 |  if_e	neg	local01, #1
14180     A7 1E 62 FC | 	wrlong	local01, fp
14184     58 01 90 FD | 	jmp	#LR__1633
14188                 | LR__1628
14188                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
14188     08 4E 05 F1 | 	add	fp, #8
1418c     A7 1E 02 FB | 	rdlong	local01, fp
14190     08 4E 85 F1 | 	sub	fp, #8
14194     1D 1E 0E F2 | 	cmp	local01, #29 wz
14198     14 4E 05 A1 |  if_e	add	fp, #20
1419c     A7 22 02 AB |  if_e	rdlong	local03, fp
141a0     14 4E 85 A1 |  if_e	sub	fp, #20
141a4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
141a8     24 00 90 5D |  if_ne	jmp	#LR__1629
141ac     00 1E 06 F6 | 	mov	local01, #0
141b0     A7 20 02 FB | 	rdlong	local02, fp
141b4     0C 4E 05 F1 | 	add	fp, #12
141b8     A7 22 02 FB | 	rdlong	local03, fp
141bc     0C 4E 85 F1 | 	sub	fp, #12
141c0     11 21 0A F2 | 	cmp	local02, local03 wz
141c4     01 1E 66 A6 |  if_e	neg	local01, #1
141c8     A7 1E 62 FC | 	wrlong	local01, fp
141cc     10 01 90 FD | 	jmp	#LR__1633
141d0                 | LR__1629
141d0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
141d0     08 4E 05 F1 | 	add	fp, #8
141d4     A7 1E 02 FB | 	rdlong	local01, fp
141d8     08 4E 85 F1 | 	sub	fp, #8
141dc     2B 1E 0E F2 | 	cmp	local01, #43 wz
141e0     14 4E 05 A1 |  if_e	add	fp, #20
141e4     A7 22 02 AB |  if_e	rdlong	local03, fp
141e8     14 4E 85 A1 |  if_e	sub	fp, #20
141ec     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
141f0     30 00 90 5D |  if_ne	jmp	#LR__1630
141f4     00 1E 06 F6 | 	mov	local01, #0
141f8     A7 12 02 FB | 	rdlong	arg01, fp
141fc     04 D1 BF FD | 	call	#_convertstring
14200     FD 12 02 F6 | 	mov	arg01, result1
14204     0C 4E 05 F1 | 	add	fp, #12
14208     A7 14 02 FB | 	rdlong	arg02, fp
1420c     0C 4E 85 F1 | 	sub	fp, #12
14210     30 C8 B0 FD | 	call	#__system___string_cmp
14214     00 FA 0D F2 | 	cmp	result1, #0 wz
14218     00 1E 26 A6 |  if_e	not	local01, #0
1421c     A7 1E 62 FC | 	wrlong	local01, fp
14220     BC 00 90 FD | 	jmp	#LR__1633
14224                 | LR__1630
14224                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
14224     08 4E 05 F1 | 	add	fp, #8
14228     A7 1E 02 FB | 	rdlong	local01, fp
1422c     08 4E 85 F1 | 	sub	fp, #8
14230     1F 1E 0E F2 | 	cmp	local01, #31 wz
14234     14 4E 05 A1 |  if_e	add	fp, #20
14238     A7 22 02 AB |  if_e	rdlong	local03, fp
1423c     14 4E 85 A1 |  if_e	sub	fp, #20
14240     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
14244     34 00 90 5D |  if_ne	jmp	#LR__1631
14248     00 1E 06 F6 | 	mov	local01, #0
1424c     A7 20 02 FB | 	rdlong	local02, fp
14250     0C 4E 05 F1 | 	add	fp, #12
14254     A7 12 02 FB | 	rdlong	arg01, fp
14258     0C 4E 85 F1 | 	sub	fp, #12
1425c     A4 D0 BF FD | 	call	#_convertstring
14260     FD 14 02 F6 | 	mov	arg02, result1
14264     10 13 02 F6 | 	mov	arg01, local02
14268     D8 C7 B0 FD | 	call	#__system___string_cmp
1426c     00 FA 0D F2 | 	cmp	result1, #0 wz
14270     00 1E 26 A6 |  if_e	not	local01, #0
14274     A7 1E 62 FC | 	wrlong	local01, fp
14278     64 00 90 FD | 	jmp	#LR__1633
1427c                 | LR__1631
1427c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1427c     08 4E 05 F1 | 	add	fp, #8
14280     A7 1E 02 FB | 	rdlong	local01, fp
14284     08 4E 85 F1 | 	sub	fp, #8
14288     2B 1E 0E F2 | 	cmp	local01, #43 wz
1428c     14 4E 05 A1 |  if_e	add	fp, #20
14290     A7 22 02 AB |  if_e	rdlong	local03, fp
14294     14 4E 85 A1 |  if_e	sub	fp, #20
14298     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1429c     3C 00 90 5D |  if_ne	jmp	#LR__1632
142a0     00 1E 06 F6 | 	mov	local01, #0
142a4     A7 12 02 FB | 	rdlong	arg01, fp
142a8     58 D0 BF FD | 	call	#_convertstring
142ac     FD 20 02 F6 | 	mov	local02, result1
142b0     0C 4E 05 F1 | 	add	fp, #12
142b4     A7 12 02 FB | 	rdlong	arg01, fp
142b8     0C 4E 85 F1 | 	sub	fp, #12
142bc     44 D0 BF FD | 	call	#_convertstring
142c0     FD 14 02 F6 | 	mov	arg02, result1
142c4     10 13 02 F6 | 	mov	arg01, local02
142c8     78 C7 B0 FD | 	call	#__system___string_cmp
142cc     00 FA 0D F2 | 	cmp	result1, #0 wz
142d0     00 1E 26 A6 |  if_e	not	local01, #0
142d4     A7 1E 62 FC | 	wrlong	local01, fp
142d8     04 00 90 FD | 	jmp	#LR__1633
142dc                 | LR__1632
142dc     A7 00 68 FC | 	wrlong	#0, fp
142e0                 | LR__1633
142e0     08 4E 05 F1 | 	add	fp, #8
142e4     A7 38 68 FC | 	wrlong	#28, fp
142e8     08 4E 85 F1 | 	sub	fp, #8
142ec     A7 12 02 F6 | 	mov	arg01, fp
142f0     FC 77 BF FD | 	call	#_push
142f4     A7 F0 03 F6 | 	mov	ptra, fp
142f8     B2 00 A0 FD | 	call	#popregs_
142fc                 | _do_eq_ret
142fc     2D 00 64 FD | 	ret
14300                 | 
14300                 | ' 
14300                 | ' sub do_gt
14300                 | _do_gt
14300     05 4A 05 F6 | 	mov	COUNT_, #5
14304     A8 00 A0 FD | 	call	#pushregs_
14308     18 F0 07 F1 | 	add	ptra, #24
1430c     48 77 BF FD | 	call	#_pop
14310     FD 1E 02 F6 | 	mov	local01, result1
14314     FE 20 02 F6 | 	mov	local02, result2
14318     FF 22 02 F6 | 	mov	local03, result3
1431c     0C 4E 05 F1 | 	add	fp, #12
14320     A7 1E 62 FC | 	wrlong	local01, fp
14324     04 4E 05 F1 | 	add	fp, #4
14328     A7 20 62 FC | 	wrlong	local02, fp
1432c     04 4E 05 F1 | 	add	fp, #4
14330     A7 22 62 FC | 	wrlong	local03, fp
14334     14 4E 85 F1 | 	sub	fp, #20
14338     1C 77 BF FD | 	call	#_pop
1433c     FF 22 02 F6 | 	mov	local03, result3
14340     A7 FA 61 FC | 	wrlong	result1, fp
14344     04 4E 05 F1 | 	add	fp, #4
14348     A7 FC 61 FC | 	wrlong	result2, fp
1434c     04 4E 05 F1 | 	add	fp, #4
14350     A7 22 62 FC | 	wrlong	local03, fp
14354                 | ' t2=pop()
14354                 | ' t1=pop()
14354                 | ' 
14354                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
14354     08 4E 85 F1 | 	sub	fp, #8
14358     1F 22 0E F2 | 	cmp	local03, #31 wz
1435c     14 4E 05 A1 |  if_e	add	fp, #20
14360     A7 24 02 AB |  if_e	rdlong	local04, fp
14364     14 4E 85 A1 |  if_e	sub	fp, #20
14368     12 23 02 A6 |  if_e	mov	local03, local04
1436c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14370     28 00 90 5D |  if_ne	jmp	#LR__1640
14374     00 1E 06 F6 | 	mov	local01, #0
14378     A7 12 02 FB | 	rdlong	arg01, fp
1437c     0C 4E 05 F1 | 	add	fp, #12
14380     A7 14 02 FB | 	rdlong	arg02, fp
14384     0C 4E 85 F1 | 	sub	fp, #12
14388     B8 C6 B0 FD | 	call	#__system___string_cmp
1438c     01 FA 55 F2 | 	cmps	result1, #1 wc
14390     00 1E 26 36 |  if_ae	not	local01, #0
14394     A7 1E 62 FC | 	wrlong	local01, fp
14398     1C 04 90 FD | 	jmp	#LR__1653
1439c                 | LR__1640
1439c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1439c     08 4E 05 F1 | 	add	fp, #8
143a0     A7 1E 02 FB | 	rdlong	local01, fp
143a4     08 4E 85 F1 | 	sub	fp, #8
143a8     1E 1E 0E F2 | 	cmp	local01, #30 wz
143ac     14 4E 05 A1 |  if_e	add	fp, #20
143b0     A7 24 02 AB |  if_e	rdlong	local04, fp
143b4     14 4E 85 A1 |  if_e	sub	fp, #20
143b8     12 23 02 A6 |  if_e	mov	local03, local04
143bc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
143c0     2C 00 90 5D |  if_ne	jmp	#LR__1641
143c4     00 1E 06 F6 | 	mov	local01, #0
143c8     A7 12 02 FB | 	rdlong	arg01, fp
143cc     0C 4E 05 F1 | 	add	fp, #12
143d0     A7 14 02 FB | 	rdlong	arg02, fp
143d4     0C 4E 85 F1 | 	sub	fp, #12
143d8     01 16 66 F6 | 	neg	arg03, #1
143dc     24 F6 B0 FD | 	call	#__system___float_cmp
143e0     01 FA 55 F2 | 	cmps	result1, #1 wc
143e4     00 1E 26 36 |  if_ae	not	local01, #0
143e8     A7 1E 62 FC | 	wrlong	local01, fp
143ec     C8 03 90 FD | 	jmp	#LR__1653
143f0                 | LR__1641
143f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
143f0     08 4E 05 F1 | 	add	fp, #8
143f4     A7 1E 02 FB | 	rdlong	local01, fp
143f8     08 4E 85 F1 | 	sub	fp, #8
143fc     1E 1E 0E F2 | 	cmp	local01, #30 wz
14400     14 4E 05 A1 |  if_e	add	fp, #20
14404     A7 24 02 AB |  if_e	rdlong	local04, fp
14408     14 4E 85 A1 |  if_e	sub	fp, #20
1440c     12 23 02 A6 |  if_e	mov	local03, local04
14410     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14414     48 00 90 5D |  if_ne	jmp	#LR__1642
14418     00 1E 06 F6 | 	mov	local01, #0
1441c     A7 20 02 FB | 	rdlong	local02, fp
14420     0C 4E 05 F1 | 	add	fp, #12
14424     A7 12 02 FB | 	rdlong	arg01, fp
14428     0C 4E 85 F1 | 	sub	fp, #12
1442c     09 13 52 F6 | 	abs	arg01, arg01 wc
14430     1F 26 C6 C9 |  if_b	decod	local05, #31
14434     00 26 06 36 |  if_ae	mov	local05, #0
14438     90 ED B0 FD | 	call	#__system___float_fromuns
1443c     13 FB 61 F5 | 	xor	result1, local05
14440     FD 14 02 F6 | 	mov	arg02, result1
14444     10 13 02 F6 | 	mov	arg01, local02
14448     01 16 66 F6 | 	neg	arg03, #1
1444c     B4 F5 B0 FD | 	call	#__system___float_cmp
14450     01 FA 55 F2 | 	cmps	result1, #1 wc
14454     00 1E 26 36 |  if_ae	not	local01, #0
14458     A7 1E 62 FC | 	wrlong	local01, fp
1445c     58 03 90 FD | 	jmp	#LR__1653
14460                 | LR__1642
14460                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
14460     08 4E 05 F1 | 	add	fp, #8
14464     A7 1E 02 FB | 	rdlong	local01, fp
14468     08 4E 85 F1 | 	sub	fp, #8
1446c     1E 1E 0E F2 | 	cmp	local01, #30 wz
14470     14 4E 05 A1 |  if_e	add	fp, #20
14474     A7 24 02 AB |  if_e	rdlong	local04, fp
14478     14 4E 85 A1 |  if_e	sub	fp, #20
1447c     12 23 02 A6 |  if_e	mov	local03, local04
14480     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14484     38 00 90 5D |  if_ne	jmp	#LR__1643
14488     00 1E 06 F6 | 	mov	local01, #0
1448c     A7 20 02 FB | 	rdlong	local02, fp
14490     0C 4E 05 F1 | 	add	fp, #12
14494     A7 12 02 FB | 	rdlong	arg01, fp
14498     0C 4E 85 F1 | 	sub	fp, #12
1449c     2C ED B0 FD | 	call	#__system___float_fromuns
144a0     FD 14 02 F6 | 	mov	arg02, result1
144a4     10 13 02 F6 | 	mov	arg01, local02
144a8     01 16 66 F6 | 	neg	arg03, #1
144ac     54 F5 B0 FD | 	call	#__system___float_cmp
144b0     01 FA 55 F2 | 	cmps	result1, #1 wc
144b4     00 1E 26 36 |  if_ae	not	local01, #0
144b8     A7 1E 62 FC | 	wrlong	local01, fp
144bc     F8 02 90 FD | 	jmp	#LR__1653
144c0                 | LR__1643
144c0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
144c0     08 4E 05 F1 | 	add	fp, #8
144c4     A7 1E 02 FB | 	rdlong	local01, fp
144c8     08 4E 85 F1 | 	sub	fp, #8
144cc     1C 1E 0E F2 | 	cmp	local01, #28 wz
144d0     14 4E 05 A1 |  if_e	add	fp, #20
144d4     A7 24 02 AB |  if_e	rdlong	local04, fp
144d8     14 4E 85 A1 |  if_e	sub	fp, #20
144dc     12 23 02 A6 |  if_e	mov	local03, local04
144e0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
144e4     44 00 90 5D |  if_ne	jmp	#LR__1644
144e8     00 1E 06 F6 | 	mov	local01, #0
144ec     A7 12 02 FB | 	rdlong	arg01, fp
144f0     09 13 52 F6 | 	abs	arg01, arg01 wc
144f4     1F 26 C6 C9 |  if_b	decod	local05, #31
144f8     00 26 06 36 |  if_ae	mov	local05, #0
144fc     CC EC B0 FD | 	call	#__system___float_fromuns
14500     13 FB 61 F5 | 	xor	result1, local05
14504     FD 12 02 F6 | 	mov	arg01, result1
14508     0C 4E 05 F1 | 	add	fp, #12
1450c     A7 14 02 FB | 	rdlong	arg02, fp
14510     0C 4E 85 F1 | 	sub	fp, #12
14514     01 16 66 F6 | 	neg	arg03, #1
14518     E8 F4 B0 FD | 	call	#__system___float_cmp
1451c     01 FA 55 F2 | 	cmps	result1, #1 wc
14520     00 1E 26 36 |  if_ae	not	local01, #0
14524     A7 1E 62 FC | 	wrlong	local01, fp
14528     8C 02 90 FD | 	jmp	#LR__1653
1452c                 | LR__1644
1452c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1452c     08 4E 05 F1 | 	add	fp, #8
14530     A7 1E 02 FB | 	rdlong	local01, fp
14534     08 4E 85 F1 | 	sub	fp, #8
14538     1C 1E 0E F2 | 	cmp	local01, #28 wz
1453c     14 4E 05 A1 |  if_e	add	fp, #20
14540     A7 24 02 AB |  if_e	rdlong	local04, fp
14544     14 4E 85 A1 |  if_e	sub	fp, #20
14548     12 23 02 A6 |  if_e	mov	local03, local04
1454c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14550     24 00 90 5D |  if_ne	jmp	#LR__1645
14554     00 1E 06 F6 | 	mov	local01, #0
14558     A7 20 02 FB | 	rdlong	local02, fp
1455c     0C 4E 05 F1 | 	add	fp, #12
14560     A7 22 02 FB | 	rdlong	local03, fp
14564     0C 4E 85 F1 | 	sub	fp, #12
14568     11 21 5A F2 | 	cmps	local02, local03 wcz
1456c     01 1E 66 16 |  if_a	neg	local01, #1
14570     A7 1E 62 FC | 	wrlong	local01, fp
14574     40 02 90 FD | 	jmp	#LR__1653
14578                 | LR__1645
14578                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
14578     08 4E 05 F1 | 	add	fp, #8
1457c     A7 1E 02 FB | 	rdlong	local01, fp
14580     08 4E 85 F1 | 	sub	fp, #8
14584     1C 1E 0E F2 | 	cmp	local01, #28 wz
14588     14 4E 05 A1 |  if_e	add	fp, #20
1458c     A7 24 02 AB |  if_e	rdlong	local04, fp
14590     14 4E 85 A1 |  if_e	sub	fp, #20
14594     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
14598     24 00 90 5D |  if_ne	jmp	#LR__1646
1459c     00 1E 06 F6 | 	mov	local01, #0
145a0     A7 20 02 FB | 	rdlong	local02, fp
145a4     0C 4E 05 F1 | 	add	fp, #12
145a8     A7 22 02 FB | 	rdlong	local03, fp
145ac     0C 4E 85 F1 | 	sub	fp, #12
145b0     11 21 5A F2 | 	cmps	local02, local03 wcz
145b4     01 1E 66 16 |  if_a	neg	local01, #1
145b8     A7 1E 62 FC | 	wrlong	local01, fp
145bc     F8 01 90 FD | 	jmp	#LR__1653
145c0                 | LR__1646
145c0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
145c0     08 4E 05 F1 | 	add	fp, #8
145c4     A7 1E 02 FB | 	rdlong	local01, fp
145c8     08 4E 85 F1 | 	sub	fp, #8
145cc     1D 1E 0E F2 | 	cmp	local01, #29 wz
145d0     14 4E 05 A1 |  if_e	add	fp, #20
145d4     A7 22 02 AB |  if_e	rdlong	local03, fp
145d8     14 4E 85 A1 |  if_e	sub	fp, #20
145dc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
145e0     34 00 90 5D |  if_ne	jmp	#LR__1647
145e4     00 1E 06 F6 | 	mov	local01, #0
145e8     A7 12 02 FB | 	rdlong	arg01, fp
145ec     DC EB B0 FD | 	call	#__system___float_fromuns
145f0     FD 12 02 F6 | 	mov	arg01, result1
145f4     0C 4E 05 F1 | 	add	fp, #12
145f8     A7 14 02 FB | 	rdlong	arg02, fp
145fc     0C 4E 85 F1 | 	sub	fp, #12
14600     01 16 66 F6 | 	neg	arg03, #1
14604     FC F3 B0 FD | 	call	#__system___float_cmp
14608     01 FA 55 F2 | 	cmps	result1, #1 wc
1460c     00 1E 26 36 |  if_ae	not	local01, #0
14610     A7 1E 62 FC | 	wrlong	local01, fp
14614     A0 01 90 FD | 	jmp	#LR__1653
14618                 | LR__1647
14618                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
14618     08 4E 05 F1 | 	add	fp, #8
1461c     A7 1E 02 FB | 	rdlong	local01, fp
14620     08 4E 85 F1 | 	sub	fp, #8
14624     1D 1E 0E F2 | 	cmp	local01, #29 wz
14628     14 4E 05 A1 |  if_e	add	fp, #20
1462c     A7 22 02 AB |  if_e	rdlong	local03, fp
14630     14 4E 85 A1 |  if_e	sub	fp, #20
14634     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14638     24 00 90 5D |  if_ne	jmp	#LR__1648
1463c     00 1E 06 F6 | 	mov	local01, #0
14640     A7 20 02 FB | 	rdlong	local02, fp
14644     0C 4E 05 F1 | 	add	fp, #12
14648     A7 22 02 FB | 	rdlong	local03, fp
1464c     0C 4E 85 F1 | 	sub	fp, #12
14650     11 21 5A F2 | 	cmps	local02, local03 wcz
14654     01 1E 66 16 |  if_a	neg	local01, #1
14658     A7 1E 62 FC | 	wrlong	local01, fp
1465c     58 01 90 FD | 	jmp	#LR__1653
14660                 | LR__1648
14660                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
14660     08 4E 05 F1 | 	add	fp, #8
14664     A7 1E 02 FB | 	rdlong	local01, fp
14668     08 4E 85 F1 | 	sub	fp, #8
1466c     1D 1E 0E F2 | 	cmp	local01, #29 wz
14670     14 4E 05 A1 |  if_e	add	fp, #20
14674     A7 22 02 AB |  if_e	rdlong	local03, fp
14678     14 4E 85 A1 |  if_e	sub	fp, #20
1467c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14680     24 00 90 5D |  if_ne	jmp	#LR__1649
14684     00 1E 06 F6 | 	mov	local01, #0
14688     A7 20 02 FB | 	rdlong	local02, fp
1468c     0C 4E 05 F1 | 	add	fp, #12
14690     A7 22 02 FB | 	rdlong	local03, fp
14694     0C 4E 85 F1 | 	sub	fp, #12
14698     11 21 1A F2 | 	cmp	local02, local03 wcz
1469c     01 1E 66 16 |  if_a	neg	local01, #1
146a0     A7 1E 62 FC | 	wrlong	local01, fp
146a4     10 01 90 FD | 	jmp	#LR__1653
146a8                 | LR__1649
146a8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
146a8     08 4E 05 F1 | 	add	fp, #8
146ac     A7 1E 02 FB | 	rdlong	local01, fp
146b0     08 4E 85 F1 | 	sub	fp, #8
146b4     2B 1E 0E F2 | 	cmp	local01, #43 wz
146b8     14 4E 05 A1 |  if_e	add	fp, #20
146bc     A7 22 02 AB |  if_e	rdlong	local03, fp
146c0     14 4E 85 A1 |  if_e	sub	fp, #20
146c4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
146c8     30 00 90 5D |  if_ne	jmp	#LR__1650
146cc     00 1E 06 F6 | 	mov	local01, #0
146d0     A7 12 02 FB | 	rdlong	arg01, fp
146d4     2C CC BF FD | 	call	#_convertstring
146d8     FD 12 02 F6 | 	mov	arg01, result1
146dc     0C 4E 05 F1 | 	add	fp, #12
146e0     A7 14 02 FB | 	rdlong	arg02, fp
146e4     0C 4E 85 F1 | 	sub	fp, #12
146e8     58 C3 B0 FD | 	call	#__system___string_cmp
146ec     01 FA 55 F2 | 	cmps	result1, #1 wc
146f0     00 1E 26 36 |  if_ae	not	local01, #0
146f4     A7 1E 62 FC | 	wrlong	local01, fp
146f8     BC 00 90 FD | 	jmp	#LR__1653
146fc                 | LR__1650
146fc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
146fc     08 4E 05 F1 | 	add	fp, #8
14700     A7 1E 02 FB | 	rdlong	local01, fp
14704     08 4E 85 F1 | 	sub	fp, #8
14708     1F 1E 0E F2 | 	cmp	local01, #31 wz
1470c     14 4E 05 A1 |  if_e	add	fp, #20
14710     A7 22 02 AB |  if_e	rdlong	local03, fp
14714     14 4E 85 A1 |  if_e	sub	fp, #20
14718     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1471c     34 00 90 5D |  if_ne	jmp	#LR__1651
14720     00 1E 06 F6 | 	mov	local01, #0
14724     A7 20 02 FB | 	rdlong	local02, fp
14728     0C 4E 05 F1 | 	add	fp, #12
1472c     A7 12 02 FB | 	rdlong	arg01, fp
14730     0C 4E 85 F1 | 	sub	fp, #12
14734     CC CB BF FD | 	call	#_convertstring
14738     FD 14 02 F6 | 	mov	arg02, result1
1473c     10 13 02 F6 | 	mov	arg01, local02
14740     00 C3 B0 FD | 	call	#__system___string_cmp
14744     01 FA 55 F2 | 	cmps	result1, #1 wc
14748     00 1E 26 36 |  if_ae	not	local01, #0
1474c     A7 1E 62 FC | 	wrlong	local01, fp
14750     64 00 90 FD | 	jmp	#LR__1653
14754                 | LR__1651
14754                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
14754     08 4E 05 F1 | 	add	fp, #8
14758     A7 1E 02 FB | 	rdlong	local01, fp
1475c     08 4E 85 F1 | 	sub	fp, #8
14760     2B 1E 0E F2 | 	cmp	local01, #43 wz
14764     14 4E 05 A1 |  if_e	add	fp, #20
14768     A7 22 02 AB |  if_e	rdlong	local03, fp
1476c     14 4E 85 A1 |  if_e	sub	fp, #20
14770     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
14774     3C 00 90 5D |  if_ne	jmp	#LR__1652
14778     00 1E 06 F6 | 	mov	local01, #0
1477c     A7 12 02 FB | 	rdlong	arg01, fp
14780     80 CB BF FD | 	call	#_convertstring
14784     FD 20 02 F6 | 	mov	local02, result1
14788     0C 4E 05 F1 | 	add	fp, #12
1478c     A7 12 02 FB | 	rdlong	arg01, fp
14790     0C 4E 85 F1 | 	sub	fp, #12
14794     6C CB BF FD | 	call	#_convertstring
14798     FD 14 02 F6 | 	mov	arg02, result1
1479c     10 13 02 F6 | 	mov	arg01, local02
147a0     A0 C2 B0 FD | 	call	#__system___string_cmp
147a4     01 FA 55 F2 | 	cmps	result1, #1 wc
147a8     00 1E 26 36 |  if_ae	not	local01, #0
147ac     A7 1E 62 FC | 	wrlong	local01, fp
147b0     04 00 90 FD | 	jmp	#LR__1653
147b4                 | LR__1652
147b4     A7 00 68 FC | 	wrlong	#0, fp
147b8                 | LR__1653
147b8     08 4E 05 F1 | 	add	fp, #8
147bc     A7 38 68 FC | 	wrlong	#28, fp
147c0     08 4E 85 F1 | 	sub	fp, #8
147c4     A7 12 02 F6 | 	mov	arg01, fp
147c8     24 73 BF FD | 	call	#_push
147cc     A7 F0 03 F6 | 	mov	ptra, fp
147d0     B2 00 A0 FD | 	call	#popregs_
147d4                 | _do_gt_ret
147d4     2D 00 64 FD | 	ret
147d8                 | 
147d8                 | ' 
147d8                 | ' sub do_lt
147d8                 | _do_lt
147d8     05 4A 05 F6 | 	mov	COUNT_, #5
147dc     A8 00 A0 FD | 	call	#pushregs_
147e0     18 F0 07 F1 | 	add	ptra, #24
147e4     70 72 BF FD | 	call	#_pop
147e8     FD 1E 02 F6 | 	mov	local01, result1
147ec     FE 20 02 F6 | 	mov	local02, result2
147f0     FF 22 02 F6 | 	mov	local03, result3
147f4     0C 4E 05 F1 | 	add	fp, #12
147f8     A7 1E 62 FC | 	wrlong	local01, fp
147fc     04 4E 05 F1 | 	add	fp, #4
14800     A7 20 62 FC | 	wrlong	local02, fp
14804     04 4E 05 F1 | 	add	fp, #4
14808     A7 22 62 FC | 	wrlong	local03, fp
1480c     14 4E 85 F1 | 	sub	fp, #20
14810     44 72 BF FD | 	call	#_pop
14814     FF 22 02 F6 | 	mov	local03, result3
14818     A7 FA 61 FC | 	wrlong	result1, fp
1481c     04 4E 05 F1 | 	add	fp, #4
14820     A7 FC 61 FC | 	wrlong	result2, fp
14824     04 4E 05 F1 | 	add	fp, #4
14828     A7 22 62 FC | 	wrlong	local03, fp
1482c                 | ' t2=pop()
1482c                 | ' t1=pop()
1482c                 | ' 
1482c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1482c     08 4E 85 F1 | 	sub	fp, #8
14830     1F 22 0E F2 | 	cmp	local03, #31 wz
14834     14 4E 05 A1 |  if_e	add	fp, #20
14838     A7 24 02 AB |  if_e	rdlong	local04, fp
1483c     14 4E 85 A1 |  if_e	sub	fp, #20
14840     12 23 02 A6 |  if_e	mov	local03, local04
14844     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14848     28 00 90 5D |  if_ne	jmp	#LR__1660
1484c     00 1E 06 F6 | 	mov	local01, #0
14850     A7 12 02 FB | 	rdlong	arg01, fp
14854     0C 4E 05 F1 | 	add	fp, #12
14858     A7 14 02 FB | 	rdlong	arg02, fp
1485c     0C 4E 85 F1 | 	sub	fp, #12
14860     E0 C1 B0 FD | 	call	#__system___string_cmp
14864     00 FA 55 F2 | 	cmps	result1, #0 wc
14868     00 1E 26 C6 |  if_b	not	local01, #0
1486c     A7 1E 62 FC | 	wrlong	local01, fp
14870     0C 04 90 FD | 	jmp	#LR__1673
14874                 | LR__1660
14874                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
14874     08 4E 05 F1 | 	add	fp, #8
14878     A7 1E 02 FB | 	rdlong	local01, fp
1487c     08 4E 85 F1 | 	sub	fp, #8
14880     1E 1E 0E F2 | 	cmp	local01, #30 wz
14884     14 4E 05 A1 |  if_e	add	fp, #20
14888     A7 24 02 AB |  if_e	rdlong	local04, fp
1488c     14 4E 85 A1 |  if_e	sub	fp, #20
14890     12 23 02 A6 |  if_e	mov	local03, local04
14894     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14898     2C 00 90 5D |  if_ne	jmp	#LR__1661
1489c     00 1E 06 F6 | 	mov	local01, #0
148a0     A7 12 02 FB | 	rdlong	arg01, fp
148a4     0C 4E 05 F1 | 	add	fp, #12
148a8     A7 14 02 FB | 	rdlong	arg02, fp
148ac     0C 4E 85 F1 | 	sub	fp, #12
148b0     01 16 06 F6 | 	mov	arg03, #1
148b4     4C F1 B0 FD | 	call	#__system___float_cmp
148b8     00 FA 55 F2 | 	cmps	result1, #0 wc
148bc     00 1E 26 C6 |  if_b	not	local01, #0
148c0     A7 1E 62 FC | 	wrlong	local01, fp
148c4     B8 03 90 FD | 	jmp	#LR__1673
148c8                 | LR__1661
148c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
148c8     08 4E 05 F1 | 	add	fp, #8
148cc     A7 1E 02 FB | 	rdlong	local01, fp
148d0     08 4E 85 F1 | 	sub	fp, #8
148d4     1E 1E 0E F2 | 	cmp	local01, #30 wz
148d8     14 4E 05 A1 |  if_e	add	fp, #20
148dc     A7 24 02 AB |  if_e	rdlong	local04, fp
148e0     14 4E 85 A1 |  if_e	sub	fp, #20
148e4     12 23 02 A6 |  if_e	mov	local03, local04
148e8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
148ec     48 00 90 5D |  if_ne	jmp	#LR__1662
148f0     00 1E 06 F6 | 	mov	local01, #0
148f4     A7 20 02 FB | 	rdlong	local02, fp
148f8     0C 4E 05 F1 | 	add	fp, #12
148fc     A7 12 02 FB | 	rdlong	arg01, fp
14900     0C 4E 85 F1 | 	sub	fp, #12
14904     09 13 52 F6 | 	abs	arg01, arg01 wc
14908     1F 26 C6 C9 |  if_b	decod	local05, #31
1490c     00 26 06 36 |  if_ae	mov	local05, #0
14910     B8 E8 B0 FD | 	call	#__system___float_fromuns
14914     13 FB 61 F5 | 	xor	result1, local05
14918     FD 14 02 F6 | 	mov	arg02, result1
1491c     10 13 02 F6 | 	mov	arg01, local02
14920     01 16 06 F6 | 	mov	arg03, #1
14924     DC F0 B0 FD | 	call	#__system___float_cmp
14928     00 FA 55 F2 | 	cmps	result1, #0 wc
1492c     00 1E 26 C6 |  if_b	not	local01, #0
14930     A7 1E 62 FC | 	wrlong	local01, fp
14934     48 03 90 FD | 	jmp	#LR__1673
14938                 | LR__1662
14938                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
14938     08 4E 05 F1 | 	add	fp, #8
1493c     A7 1E 02 FB | 	rdlong	local01, fp
14940     08 4E 85 F1 | 	sub	fp, #8
14944     1E 1E 0E F2 | 	cmp	local01, #30 wz
14948     14 4E 05 A1 |  if_e	add	fp, #20
1494c     A7 24 02 AB |  if_e	rdlong	local04, fp
14950     14 4E 85 A1 |  if_e	sub	fp, #20
14954     12 23 02 A6 |  if_e	mov	local03, local04
14958     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1495c     38 00 90 5D |  if_ne	jmp	#LR__1663
14960     00 1E 06 F6 | 	mov	local01, #0
14964     A7 20 02 FB | 	rdlong	local02, fp
14968     0C 4E 05 F1 | 	add	fp, #12
1496c     A7 12 02 FB | 	rdlong	arg01, fp
14970     0C 4E 85 F1 | 	sub	fp, #12
14974     54 E8 B0 FD | 	call	#__system___float_fromuns
14978     FD 14 02 F6 | 	mov	arg02, result1
1497c     10 13 02 F6 | 	mov	arg01, local02
14980     01 16 06 F6 | 	mov	arg03, #1
14984     7C F0 B0 FD | 	call	#__system___float_cmp
14988     00 FA 55 F2 | 	cmps	result1, #0 wc
1498c     00 1E 26 C6 |  if_b	not	local01, #0
14990     A7 1E 62 FC | 	wrlong	local01, fp
14994     E8 02 90 FD | 	jmp	#LR__1673
14998                 | LR__1663
14998                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
14998     08 4E 05 F1 | 	add	fp, #8
1499c     A7 1E 02 FB | 	rdlong	local01, fp
149a0     08 4E 85 F1 | 	sub	fp, #8
149a4     1C 1E 0E F2 | 	cmp	local01, #28 wz
149a8     14 4E 05 A1 |  if_e	add	fp, #20
149ac     A7 24 02 AB |  if_e	rdlong	local04, fp
149b0     14 4E 85 A1 |  if_e	sub	fp, #20
149b4     12 23 02 A6 |  if_e	mov	local03, local04
149b8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
149bc     44 00 90 5D |  if_ne	jmp	#LR__1664
149c0     00 1E 06 F6 | 	mov	local01, #0
149c4     A7 12 02 FB | 	rdlong	arg01, fp
149c8     09 13 52 F6 | 	abs	arg01, arg01 wc
149cc     1F 26 C6 C9 |  if_b	decod	local05, #31
149d0     00 26 06 36 |  if_ae	mov	local05, #0
149d4     F4 E7 B0 FD | 	call	#__system___float_fromuns
149d8     13 FB 61 F5 | 	xor	result1, local05
149dc     FD 12 02 F6 | 	mov	arg01, result1
149e0     0C 4E 05 F1 | 	add	fp, #12
149e4     A7 14 02 FB | 	rdlong	arg02, fp
149e8     0C 4E 85 F1 | 	sub	fp, #12
149ec     01 16 06 F6 | 	mov	arg03, #1
149f0     10 F0 B0 FD | 	call	#__system___float_cmp
149f4     00 FA 55 F2 | 	cmps	result1, #0 wc
149f8     00 1E 26 C6 |  if_b	not	local01, #0
149fc     A7 1E 62 FC | 	wrlong	local01, fp
14a00     7C 02 90 FD | 	jmp	#LR__1673
14a04                 | LR__1664
14a04                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
14a04     08 4E 05 F1 | 	add	fp, #8
14a08     A7 1E 02 FB | 	rdlong	local01, fp
14a0c     08 4E 85 F1 | 	sub	fp, #8
14a10     1C 1E 0E F2 | 	cmp	local01, #28 wz
14a14     14 4E 05 A1 |  if_e	add	fp, #20
14a18     A7 24 02 AB |  if_e	rdlong	local04, fp
14a1c     14 4E 85 A1 |  if_e	sub	fp, #20
14a20     12 23 02 A6 |  if_e	mov	local03, local04
14a24     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14a28     20 00 90 5D |  if_ne	jmp	#LR__1665
14a2c     A7 20 02 FB | 	rdlong	local02, fp
14a30     0C 4E 05 F1 | 	add	fp, #12
14a34     A7 22 02 FB | 	rdlong	local03, fp
14a38     0C 4E 85 F1 | 	sub	fp, #12
14a3c     11 21 52 F2 | 	cmps	local02, local03 wc
14a40     0F 1F A2 F1 | 	subx	local01, local01
14a44     A7 1E 62 FC | 	wrlong	local01, fp
14a48     34 02 90 FD | 	jmp	#LR__1673
14a4c                 | LR__1665
14a4c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
14a4c     08 4E 05 F1 | 	add	fp, #8
14a50     A7 1E 02 FB | 	rdlong	local01, fp
14a54     08 4E 85 F1 | 	sub	fp, #8
14a58     1C 1E 0E F2 | 	cmp	local01, #28 wz
14a5c     14 4E 05 A1 |  if_e	add	fp, #20
14a60     A7 24 02 AB |  if_e	rdlong	local04, fp
14a64     14 4E 85 A1 |  if_e	sub	fp, #20
14a68     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
14a6c     20 00 90 5D |  if_ne	jmp	#LR__1666
14a70     A7 20 02 FB | 	rdlong	local02, fp
14a74     0C 4E 05 F1 | 	add	fp, #12
14a78     A7 22 02 FB | 	rdlong	local03, fp
14a7c     0C 4E 85 F1 | 	sub	fp, #12
14a80     11 21 52 F2 | 	cmps	local02, local03 wc
14a84     0F 1F A2 F1 | 	subx	local01, local01
14a88     A7 1E 62 FC | 	wrlong	local01, fp
14a8c     F0 01 90 FD | 	jmp	#LR__1673
14a90                 | LR__1666
14a90                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
14a90     08 4E 05 F1 | 	add	fp, #8
14a94     A7 1E 02 FB | 	rdlong	local01, fp
14a98     08 4E 85 F1 | 	sub	fp, #8
14a9c     1D 1E 0E F2 | 	cmp	local01, #29 wz
14aa0     14 4E 05 A1 |  if_e	add	fp, #20
14aa4     A7 22 02 AB |  if_e	rdlong	local03, fp
14aa8     14 4E 85 A1 |  if_e	sub	fp, #20
14aac     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14ab0     34 00 90 5D |  if_ne	jmp	#LR__1667
14ab4     00 1E 06 F6 | 	mov	local01, #0
14ab8     A7 12 02 FB | 	rdlong	arg01, fp
14abc     0C E7 B0 FD | 	call	#__system___float_fromuns
14ac0     FD 12 02 F6 | 	mov	arg01, result1
14ac4     0C 4E 05 F1 | 	add	fp, #12
14ac8     A7 14 02 FB | 	rdlong	arg02, fp
14acc     0C 4E 85 F1 | 	sub	fp, #12
14ad0     01 16 06 F6 | 	mov	arg03, #1
14ad4     2C EF B0 FD | 	call	#__system___float_cmp
14ad8     00 FA 55 F2 | 	cmps	result1, #0 wc
14adc     00 1E 26 C6 |  if_b	not	local01, #0
14ae0     A7 1E 62 FC | 	wrlong	local01, fp
14ae4     98 01 90 FD | 	jmp	#LR__1673
14ae8                 | LR__1667
14ae8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
14ae8     08 4E 05 F1 | 	add	fp, #8
14aec     A7 1E 02 FB | 	rdlong	local01, fp
14af0     08 4E 85 F1 | 	sub	fp, #8
14af4     1D 1E 0E F2 | 	cmp	local01, #29 wz
14af8     14 4E 05 A1 |  if_e	add	fp, #20
14afc     A7 22 02 AB |  if_e	rdlong	local03, fp
14b00     14 4E 85 A1 |  if_e	sub	fp, #20
14b04     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14b08     20 00 90 5D |  if_ne	jmp	#LR__1668
14b0c     A7 20 02 FB | 	rdlong	local02, fp
14b10     0C 4E 05 F1 | 	add	fp, #12
14b14     A7 22 02 FB | 	rdlong	local03, fp
14b18     0C 4E 85 F1 | 	sub	fp, #12
14b1c     11 21 52 F2 | 	cmps	local02, local03 wc
14b20     0F 1F A2 F1 | 	subx	local01, local01
14b24     A7 1E 62 FC | 	wrlong	local01, fp
14b28     54 01 90 FD | 	jmp	#LR__1673
14b2c                 | LR__1668
14b2c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
14b2c     08 4E 05 F1 | 	add	fp, #8
14b30     A7 1E 02 FB | 	rdlong	local01, fp
14b34     08 4E 85 F1 | 	sub	fp, #8
14b38     1D 1E 0E F2 | 	cmp	local01, #29 wz
14b3c     14 4E 05 A1 |  if_e	add	fp, #20
14b40     A7 22 02 AB |  if_e	rdlong	local03, fp
14b44     14 4E 85 A1 |  if_e	sub	fp, #20
14b48     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14b4c     20 00 90 5D |  if_ne	jmp	#LR__1669
14b50     A7 20 02 FB | 	rdlong	local02, fp
14b54     0C 4E 05 F1 | 	add	fp, #12
14b58     A7 22 02 FB | 	rdlong	local03, fp
14b5c     0C 4E 85 F1 | 	sub	fp, #12
14b60     11 21 12 F2 | 	cmp	local02, local03 wc
14b64     0F 1F A2 F1 | 	subx	local01, local01
14b68     A7 1E 62 FC | 	wrlong	local01, fp
14b6c     10 01 90 FD | 	jmp	#LR__1673
14b70                 | LR__1669
14b70                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
14b70     08 4E 05 F1 | 	add	fp, #8
14b74     A7 1E 02 FB | 	rdlong	local01, fp
14b78     08 4E 85 F1 | 	sub	fp, #8
14b7c     2B 1E 0E F2 | 	cmp	local01, #43 wz
14b80     14 4E 05 A1 |  if_e	add	fp, #20
14b84     A7 22 02 AB |  if_e	rdlong	local03, fp
14b88     14 4E 85 A1 |  if_e	sub	fp, #20
14b8c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14b90     30 00 90 5D |  if_ne	jmp	#LR__1670
14b94     00 1E 06 F6 | 	mov	local01, #0
14b98     A7 12 02 FB | 	rdlong	arg01, fp
14b9c     64 C7 BF FD | 	call	#_convertstring
14ba0     FD 12 02 F6 | 	mov	arg01, result1
14ba4     0C 4E 05 F1 | 	add	fp, #12
14ba8     A7 14 02 FB | 	rdlong	arg02, fp
14bac     0C 4E 85 F1 | 	sub	fp, #12
14bb0     90 BE B0 FD | 	call	#__system___string_cmp
14bb4     00 FA 55 F2 | 	cmps	result1, #0 wc
14bb8     00 1E 26 C6 |  if_b	not	local01, #0
14bbc     A7 1E 62 FC | 	wrlong	local01, fp
14bc0     BC 00 90 FD | 	jmp	#LR__1673
14bc4                 | LR__1670
14bc4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
14bc4     08 4E 05 F1 | 	add	fp, #8
14bc8     A7 1E 02 FB | 	rdlong	local01, fp
14bcc     08 4E 85 F1 | 	sub	fp, #8
14bd0     1F 1E 0E F2 | 	cmp	local01, #31 wz
14bd4     14 4E 05 A1 |  if_e	add	fp, #20
14bd8     A7 22 02 AB |  if_e	rdlong	local03, fp
14bdc     14 4E 85 A1 |  if_e	sub	fp, #20
14be0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
14be4     34 00 90 5D |  if_ne	jmp	#LR__1671
14be8     00 1E 06 F6 | 	mov	local01, #0
14bec     A7 20 02 FB | 	rdlong	local02, fp
14bf0     0C 4E 05 F1 | 	add	fp, #12
14bf4     A7 12 02 FB | 	rdlong	arg01, fp
14bf8     0C 4E 85 F1 | 	sub	fp, #12
14bfc     04 C7 BF FD | 	call	#_convertstring
14c00     FD 14 02 F6 | 	mov	arg02, result1
14c04     10 13 02 F6 | 	mov	arg01, local02
14c08     38 BE B0 FD | 	call	#__system___string_cmp
14c0c     00 FA 55 F2 | 	cmps	result1, #0 wc
14c10     00 1E 26 C6 |  if_b	not	local01, #0
14c14     A7 1E 62 FC | 	wrlong	local01, fp
14c18     64 00 90 FD | 	jmp	#LR__1673
14c1c                 | LR__1671
14c1c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
14c1c     08 4E 05 F1 | 	add	fp, #8
14c20     A7 1E 02 FB | 	rdlong	local01, fp
14c24     08 4E 85 F1 | 	sub	fp, #8
14c28     2B 1E 0E F2 | 	cmp	local01, #43 wz
14c2c     14 4E 05 A1 |  if_e	add	fp, #20
14c30     A7 22 02 AB |  if_e	rdlong	local03, fp
14c34     14 4E 85 A1 |  if_e	sub	fp, #20
14c38     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
14c3c     3C 00 90 5D |  if_ne	jmp	#LR__1672
14c40     00 1E 06 F6 | 	mov	local01, #0
14c44     A7 12 02 FB | 	rdlong	arg01, fp
14c48     B8 C6 BF FD | 	call	#_convertstring
14c4c     FD 20 02 F6 | 	mov	local02, result1
14c50     0C 4E 05 F1 | 	add	fp, #12
14c54     A7 12 02 FB | 	rdlong	arg01, fp
14c58     0C 4E 85 F1 | 	sub	fp, #12
14c5c     A4 C6 BF FD | 	call	#_convertstring
14c60     FD 14 02 F6 | 	mov	arg02, result1
14c64     10 13 02 F6 | 	mov	arg01, local02
14c68     D8 BD B0 FD | 	call	#__system___string_cmp
14c6c     00 FA 55 F2 | 	cmps	result1, #0 wc
14c70     00 1E 26 C6 |  if_b	not	local01, #0
14c74     A7 1E 62 FC | 	wrlong	local01, fp
14c78     04 00 90 FD | 	jmp	#LR__1673
14c7c                 | LR__1672
14c7c     A7 00 68 FC | 	wrlong	#0, fp
14c80                 | LR__1673
14c80     08 4E 05 F1 | 	add	fp, #8
14c84     A7 38 68 FC | 	wrlong	#28, fp
14c88     08 4E 85 F1 | 	sub	fp, #8
14c8c     A7 12 02 F6 | 	mov	arg01, fp
14c90     5C 6E BF FD | 	call	#_push
14c94     A7 F0 03 F6 | 	mov	ptra, fp
14c98     B2 00 A0 FD | 	call	#popregs_
14c9c                 | _do_lt_ret
14c9c     2D 00 64 FD | 	ret
14ca0                 | 
14ca0                 | ' 
14ca0                 | ' sub do_ge
14ca0                 | _do_ge
14ca0     05 4A 05 F6 | 	mov	COUNT_, #5
14ca4     A8 00 A0 FD | 	call	#pushregs_
14ca8     18 F0 07 F1 | 	add	ptra, #24
14cac     A8 6D BF FD | 	call	#_pop
14cb0     FD 1E 02 F6 | 	mov	local01, result1
14cb4     FE 20 02 F6 | 	mov	local02, result2
14cb8     FF 22 02 F6 | 	mov	local03, result3
14cbc     0C 4E 05 F1 | 	add	fp, #12
14cc0     A7 1E 62 FC | 	wrlong	local01, fp
14cc4     04 4E 05 F1 | 	add	fp, #4
14cc8     A7 20 62 FC | 	wrlong	local02, fp
14ccc     04 4E 05 F1 | 	add	fp, #4
14cd0     A7 22 62 FC | 	wrlong	local03, fp
14cd4     14 4E 85 F1 | 	sub	fp, #20
14cd8     7C 6D BF FD | 	call	#_pop
14cdc     FF 22 02 F6 | 	mov	local03, result3
14ce0     A7 FA 61 FC | 	wrlong	result1, fp
14ce4     04 4E 05 F1 | 	add	fp, #4
14ce8     A7 FC 61 FC | 	wrlong	result2, fp
14cec     04 4E 05 F1 | 	add	fp, #4
14cf0     A7 22 62 FC | 	wrlong	local03, fp
14cf4                 | ' t2=pop()
14cf4                 | ' t1=pop()
14cf4                 | ' 
14cf4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
14cf4     08 4E 85 F1 | 	sub	fp, #8
14cf8     1F 22 0E F2 | 	cmp	local03, #31 wz
14cfc     14 4E 05 A1 |  if_e	add	fp, #20
14d00     A7 24 02 AB |  if_e	rdlong	local04, fp
14d04     14 4E 85 A1 |  if_e	sub	fp, #20
14d08     12 23 02 A6 |  if_e	mov	local03, local04
14d0c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14d10     28 00 90 5D |  if_ne	jmp	#LR__1680
14d14     00 1E 06 F6 | 	mov	local01, #0
14d18     A7 12 02 FB | 	rdlong	arg01, fp
14d1c     0C 4E 05 F1 | 	add	fp, #12
14d20     A7 14 02 FB | 	rdlong	arg02, fp
14d24     0C 4E 85 F1 | 	sub	fp, #12
14d28     18 BD B0 FD | 	call	#__system___string_cmp
14d2c     00 FA 55 F2 | 	cmps	result1, #0 wc
14d30     00 1E 26 36 |  if_ae	not	local01, #0
14d34     A7 1E 62 FC | 	wrlong	local01, fp
14d38     1C 04 90 FD | 	jmp	#LR__1693
14d3c                 | LR__1680
14d3c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
14d3c     08 4E 05 F1 | 	add	fp, #8
14d40     A7 1E 02 FB | 	rdlong	local01, fp
14d44     08 4E 85 F1 | 	sub	fp, #8
14d48     1E 1E 0E F2 | 	cmp	local01, #30 wz
14d4c     14 4E 05 A1 |  if_e	add	fp, #20
14d50     A7 24 02 AB |  if_e	rdlong	local04, fp
14d54     14 4E 85 A1 |  if_e	sub	fp, #20
14d58     12 23 02 A6 |  if_e	mov	local03, local04
14d5c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14d60     2C 00 90 5D |  if_ne	jmp	#LR__1681
14d64     00 1E 06 F6 | 	mov	local01, #0
14d68     A7 12 02 FB | 	rdlong	arg01, fp
14d6c     0C 4E 05 F1 | 	add	fp, #12
14d70     A7 14 02 FB | 	rdlong	arg02, fp
14d74     0C 4E 85 F1 | 	sub	fp, #12
14d78     01 16 66 F6 | 	neg	arg03, #1
14d7c     84 EC B0 FD | 	call	#__system___float_cmp
14d80     00 FA 55 F2 | 	cmps	result1, #0 wc
14d84     00 1E 26 36 |  if_ae	not	local01, #0
14d88     A7 1E 62 FC | 	wrlong	local01, fp
14d8c     C8 03 90 FD | 	jmp	#LR__1693
14d90                 | LR__1681
14d90                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
14d90     08 4E 05 F1 | 	add	fp, #8
14d94     A7 1E 02 FB | 	rdlong	local01, fp
14d98     08 4E 85 F1 | 	sub	fp, #8
14d9c     1E 1E 0E F2 | 	cmp	local01, #30 wz
14da0     14 4E 05 A1 |  if_e	add	fp, #20
14da4     A7 24 02 AB |  if_e	rdlong	local04, fp
14da8     14 4E 85 A1 |  if_e	sub	fp, #20
14dac     12 23 02 A6 |  if_e	mov	local03, local04
14db0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14db4     48 00 90 5D |  if_ne	jmp	#LR__1682
14db8     00 1E 06 F6 | 	mov	local01, #0
14dbc     A7 20 02 FB | 	rdlong	local02, fp
14dc0     0C 4E 05 F1 | 	add	fp, #12
14dc4     A7 12 02 FB | 	rdlong	arg01, fp
14dc8     0C 4E 85 F1 | 	sub	fp, #12
14dcc     09 13 52 F6 | 	abs	arg01, arg01 wc
14dd0     1F 26 C6 C9 |  if_b	decod	local05, #31
14dd4     00 26 06 36 |  if_ae	mov	local05, #0
14dd8     F0 E3 B0 FD | 	call	#__system___float_fromuns
14ddc     13 FB 61 F5 | 	xor	result1, local05
14de0     FD 14 02 F6 | 	mov	arg02, result1
14de4     10 13 02 F6 | 	mov	arg01, local02
14de8     01 16 66 F6 | 	neg	arg03, #1
14dec     14 EC B0 FD | 	call	#__system___float_cmp
14df0     00 FA 55 F2 | 	cmps	result1, #0 wc
14df4     00 1E 26 36 |  if_ae	not	local01, #0
14df8     A7 1E 62 FC | 	wrlong	local01, fp
14dfc     58 03 90 FD | 	jmp	#LR__1693
14e00                 | LR__1682
14e00                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
14e00     08 4E 05 F1 | 	add	fp, #8
14e04     A7 1E 02 FB | 	rdlong	local01, fp
14e08     08 4E 85 F1 | 	sub	fp, #8
14e0c     1E 1E 0E F2 | 	cmp	local01, #30 wz
14e10     14 4E 05 A1 |  if_e	add	fp, #20
14e14     A7 24 02 AB |  if_e	rdlong	local04, fp
14e18     14 4E 85 A1 |  if_e	sub	fp, #20
14e1c     12 23 02 A6 |  if_e	mov	local03, local04
14e20     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14e24     38 00 90 5D |  if_ne	jmp	#LR__1683
14e28     00 1E 06 F6 | 	mov	local01, #0
14e2c     A7 20 02 FB | 	rdlong	local02, fp
14e30     0C 4E 05 F1 | 	add	fp, #12
14e34     A7 12 02 FB | 	rdlong	arg01, fp
14e38     0C 4E 85 F1 | 	sub	fp, #12
14e3c     8C E3 B0 FD | 	call	#__system___float_fromuns
14e40     FD 14 02 F6 | 	mov	arg02, result1
14e44     10 13 02 F6 | 	mov	arg01, local02
14e48     01 16 66 F6 | 	neg	arg03, #1
14e4c     B4 EB B0 FD | 	call	#__system___float_cmp
14e50     00 FA 55 F2 | 	cmps	result1, #0 wc
14e54     00 1E 26 36 |  if_ae	not	local01, #0
14e58     A7 1E 62 FC | 	wrlong	local01, fp
14e5c     F8 02 90 FD | 	jmp	#LR__1693
14e60                 | LR__1683
14e60                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
14e60     08 4E 05 F1 | 	add	fp, #8
14e64     A7 1E 02 FB | 	rdlong	local01, fp
14e68     08 4E 85 F1 | 	sub	fp, #8
14e6c     1C 1E 0E F2 | 	cmp	local01, #28 wz
14e70     14 4E 05 A1 |  if_e	add	fp, #20
14e74     A7 24 02 AB |  if_e	rdlong	local04, fp
14e78     14 4E 85 A1 |  if_e	sub	fp, #20
14e7c     12 23 02 A6 |  if_e	mov	local03, local04
14e80     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14e84     44 00 90 5D |  if_ne	jmp	#LR__1684
14e88     00 1E 06 F6 | 	mov	local01, #0
14e8c     A7 12 02 FB | 	rdlong	arg01, fp
14e90     09 13 52 F6 | 	abs	arg01, arg01 wc
14e94     1F 26 C6 C9 |  if_b	decod	local05, #31
14e98     00 26 06 36 |  if_ae	mov	local05, #0
14e9c     2C E3 B0 FD | 	call	#__system___float_fromuns
14ea0     13 FB 61 F5 | 	xor	result1, local05
14ea4     FD 12 02 F6 | 	mov	arg01, result1
14ea8     0C 4E 05 F1 | 	add	fp, #12
14eac     A7 14 02 FB | 	rdlong	arg02, fp
14eb0     0C 4E 85 F1 | 	sub	fp, #12
14eb4     01 16 66 F6 | 	neg	arg03, #1
14eb8     48 EB B0 FD | 	call	#__system___float_cmp
14ebc     00 FA 55 F2 | 	cmps	result1, #0 wc
14ec0     00 1E 26 36 |  if_ae	not	local01, #0
14ec4     A7 1E 62 FC | 	wrlong	local01, fp
14ec8     8C 02 90 FD | 	jmp	#LR__1693
14ecc                 | LR__1684
14ecc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
14ecc     08 4E 05 F1 | 	add	fp, #8
14ed0     A7 1E 02 FB | 	rdlong	local01, fp
14ed4     08 4E 85 F1 | 	sub	fp, #8
14ed8     1C 1E 0E F2 | 	cmp	local01, #28 wz
14edc     14 4E 05 A1 |  if_e	add	fp, #20
14ee0     A7 24 02 AB |  if_e	rdlong	local04, fp
14ee4     14 4E 85 A1 |  if_e	sub	fp, #20
14ee8     12 23 02 A6 |  if_e	mov	local03, local04
14eec     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14ef0     24 00 90 5D |  if_ne	jmp	#LR__1685
14ef4     00 1E 06 F6 | 	mov	local01, #0
14ef8     A7 20 02 FB | 	rdlong	local02, fp
14efc     0C 4E 05 F1 | 	add	fp, #12
14f00     A7 22 02 FB | 	rdlong	local03, fp
14f04     0C 4E 85 F1 | 	sub	fp, #12
14f08     11 21 52 F2 | 	cmps	local02, local03 wc
14f0c     01 1E 66 36 |  if_ae	neg	local01, #1
14f10     A7 1E 62 FC | 	wrlong	local01, fp
14f14     40 02 90 FD | 	jmp	#LR__1693
14f18                 | LR__1685
14f18                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
14f18     08 4E 05 F1 | 	add	fp, #8
14f1c     A7 1E 02 FB | 	rdlong	local01, fp
14f20     08 4E 85 F1 | 	sub	fp, #8
14f24     1C 1E 0E F2 | 	cmp	local01, #28 wz
14f28     14 4E 05 A1 |  if_e	add	fp, #20
14f2c     A7 24 02 AB |  if_e	rdlong	local04, fp
14f30     14 4E 85 A1 |  if_e	sub	fp, #20
14f34     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
14f38     24 00 90 5D |  if_ne	jmp	#LR__1686
14f3c     00 1E 06 F6 | 	mov	local01, #0
14f40     A7 20 02 FB | 	rdlong	local02, fp
14f44     0C 4E 05 F1 | 	add	fp, #12
14f48     A7 22 02 FB | 	rdlong	local03, fp
14f4c     0C 4E 85 F1 | 	sub	fp, #12
14f50     11 21 52 F2 | 	cmps	local02, local03 wc
14f54     01 1E 66 36 |  if_ae	neg	local01, #1
14f58     A7 1E 62 FC | 	wrlong	local01, fp
14f5c     F8 01 90 FD | 	jmp	#LR__1693
14f60                 | LR__1686
14f60                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
14f60     08 4E 05 F1 | 	add	fp, #8
14f64     A7 1E 02 FB | 	rdlong	local01, fp
14f68     08 4E 85 F1 | 	sub	fp, #8
14f6c     1D 1E 0E F2 | 	cmp	local01, #29 wz
14f70     14 4E 05 A1 |  if_e	add	fp, #20
14f74     A7 22 02 AB |  if_e	rdlong	local03, fp
14f78     14 4E 85 A1 |  if_e	sub	fp, #20
14f7c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14f80     34 00 90 5D |  if_ne	jmp	#LR__1687
14f84     00 1E 06 F6 | 	mov	local01, #0
14f88     A7 12 02 FB | 	rdlong	arg01, fp
14f8c     3C E2 B0 FD | 	call	#__system___float_fromuns
14f90     FD 12 02 F6 | 	mov	arg01, result1
14f94     0C 4E 05 F1 | 	add	fp, #12
14f98     A7 14 02 FB | 	rdlong	arg02, fp
14f9c     0C 4E 85 F1 | 	sub	fp, #12
14fa0     01 16 66 F6 | 	neg	arg03, #1
14fa4     5C EA B0 FD | 	call	#__system___float_cmp
14fa8     00 FA 55 F2 | 	cmps	result1, #0 wc
14fac     00 1E 26 36 |  if_ae	not	local01, #0
14fb0     A7 1E 62 FC | 	wrlong	local01, fp
14fb4     A0 01 90 FD | 	jmp	#LR__1693
14fb8                 | LR__1687
14fb8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
14fb8     08 4E 05 F1 | 	add	fp, #8
14fbc     A7 1E 02 FB | 	rdlong	local01, fp
14fc0     08 4E 85 F1 | 	sub	fp, #8
14fc4     1D 1E 0E F2 | 	cmp	local01, #29 wz
14fc8     14 4E 05 A1 |  if_e	add	fp, #20
14fcc     A7 22 02 AB |  if_e	rdlong	local03, fp
14fd0     14 4E 85 A1 |  if_e	sub	fp, #20
14fd4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14fd8     24 00 90 5D |  if_ne	jmp	#LR__1688
14fdc     00 1E 06 F6 | 	mov	local01, #0
14fe0     A7 20 02 FB | 	rdlong	local02, fp
14fe4     0C 4E 05 F1 | 	add	fp, #12
14fe8     A7 22 02 FB | 	rdlong	local03, fp
14fec     0C 4E 85 F1 | 	sub	fp, #12
14ff0     11 21 52 F2 | 	cmps	local02, local03 wc
14ff4     01 1E 66 36 |  if_ae	neg	local01, #1
14ff8     A7 1E 62 FC | 	wrlong	local01, fp
14ffc     58 01 90 FD | 	jmp	#LR__1693
15000                 | LR__1688
15000                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
15000     08 4E 05 F1 | 	add	fp, #8
15004     A7 1E 02 FB | 	rdlong	local01, fp
15008     08 4E 85 F1 | 	sub	fp, #8
1500c     1D 1E 0E F2 | 	cmp	local01, #29 wz
15010     14 4E 05 A1 |  if_e	add	fp, #20
15014     A7 22 02 AB |  if_e	rdlong	local03, fp
15018     14 4E 85 A1 |  if_e	sub	fp, #20
1501c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
15020     24 00 90 5D |  if_ne	jmp	#LR__1689
15024     00 1E 06 F6 | 	mov	local01, #0
15028     A7 20 02 FB | 	rdlong	local02, fp
1502c     0C 4E 05 F1 | 	add	fp, #12
15030     A7 22 02 FB | 	rdlong	local03, fp
15034     0C 4E 85 F1 | 	sub	fp, #12
15038     11 21 12 F2 | 	cmp	local02, local03 wc
1503c     01 1E 66 36 |  if_ae	neg	local01, #1
15040     A7 1E 62 FC | 	wrlong	local01, fp
15044     10 01 90 FD | 	jmp	#LR__1693
15048                 | LR__1689
15048                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
15048     08 4E 05 F1 | 	add	fp, #8
1504c     A7 1E 02 FB | 	rdlong	local01, fp
15050     08 4E 85 F1 | 	sub	fp, #8
15054     2B 1E 0E F2 | 	cmp	local01, #43 wz
15058     14 4E 05 A1 |  if_e	add	fp, #20
1505c     A7 22 02 AB |  if_e	rdlong	local03, fp
15060     14 4E 85 A1 |  if_e	sub	fp, #20
15064     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
15068     30 00 90 5D |  if_ne	jmp	#LR__1690
1506c     00 1E 06 F6 | 	mov	local01, #0
15070     A7 12 02 FB | 	rdlong	arg01, fp
15074     8C C2 BF FD | 	call	#_convertstring
15078     FD 12 02 F6 | 	mov	arg01, result1
1507c     0C 4E 05 F1 | 	add	fp, #12
15080     A7 14 02 FB | 	rdlong	arg02, fp
15084     0C 4E 85 F1 | 	sub	fp, #12
15088     B8 B9 B0 FD | 	call	#__system___string_cmp
1508c     00 FA 55 F2 | 	cmps	result1, #0 wc
15090     00 1E 26 36 |  if_ae	not	local01, #0
15094     A7 1E 62 FC | 	wrlong	local01, fp
15098     BC 00 90 FD | 	jmp	#LR__1693
1509c                 | LR__1690
1509c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1509c     08 4E 05 F1 | 	add	fp, #8
150a0     A7 1E 02 FB | 	rdlong	local01, fp
150a4     08 4E 85 F1 | 	sub	fp, #8
150a8     1F 1E 0E F2 | 	cmp	local01, #31 wz
150ac     14 4E 05 A1 |  if_e	add	fp, #20
150b0     A7 22 02 AB |  if_e	rdlong	local03, fp
150b4     14 4E 85 A1 |  if_e	sub	fp, #20
150b8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
150bc     34 00 90 5D |  if_ne	jmp	#LR__1691
150c0     00 1E 06 F6 | 	mov	local01, #0
150c4     A7 20 02 FB | 	rdlong	local02, fp
150c8     0C 4E 05 F1 | 	add	fp, #12
150cc     A7 12 02 FB | 	rdlong	arg01, fp
150d0     0C 4E 85 F1 | 	sub	fp, #12
150d4     2C C2 BF FD | 	call	#_convertstring
150d8     FD 14 02 F6 | 	mov	arg02, result1
150dc     10 13 02 F6 | 	mov	arg01, local02
150e0     60 B9 B0 FD | 	call	#__system___string_cmp
150e4     00 FA 55 F2 | 	cmps	result1, #0 wc
150e8     00 1E 26 36 |  if_ae	not	local01, #0
150ec     A7 1E 62 FC | 	wrlong	local01, fp
150f0     64 00 90 FD | 	jmp	#LR__1693
150f4                 | LR__1691
150f4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
150f4     08 4E 05 F1 | 	add	fp, #8
150f8     A7 1E 02 FB | 	rdlong	local01, fp
150fc     08 4E 85 F1 | 	sub	fp, #8
15100     2B 1E 0E F2 | 	cmp	local01, #43 wz
15104     14 4E 05 A1 |  if_e	add	fp, #20
15108     A7 22 02 AB |  if_e	rdlong	local03, fp
1510c     14 4E 85 A1 |  if_e	sub	fp, #20
15110     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
15114     3C 00 90 5D |  if_ne	jmp	#LR__1692
15118     00 1E 06 F6 | 	mov	local01, #0
1511c     A7 12 02 FB | 	rdlong	arg01, fp
15120     E0 C1 BF FD | 	call	#_convertstring
15124     FD 20 02 F6 | 	mov	local02, result1
15128     0C 4E 05 F1 | 	add	fp, #12
1512c     A7 12 02 FB | 	rdlong	arg01, fp
15130     0C 4E 85 F1 | 	sub	fp, #12
15134     CC C1 BF FD | 	call	#_convertstring
15138     FD 14 02 F6 | 	mov	arg02, result1
1513c     10 13 02 F6 | 	mov	arg01, local02
15140     00 B9 B0 FD | 	call	#__system___string_cmp
15144     00 FA 55 F2 | 	cmps	result1, #0 wc
15148     00 1E 26 36 |  if_ae	not	local01, #0
1514c     A7 1E 62 FC | 	wrlong	local01, fp
15150     04 00 90 FD | 	jmp	#LR__1693
15154                 | LR__1692
15154     A7 00 68 FC | 	wrlong	#0, fp
15158                 | LR__1693
15158     08 4E 05 F1 | 	add	fp, #8
1515c     A7 38 68 FC | 	wrlong	#28, fp
15160     08 4E 85 F1 | 	sub	fp, #8
15164     A7 12 02 F6 | 	mov	arg01, fp
15168     84 69 BF FD | 	call	#_push
1516c     A7 F0 03 F6 | 	mov	ptra, fp
15170     B2 00 A0 FD | 	call	#popregs_
15174                 | _do_ge_ret
15174     2D 00 64 FD | 	ret
15178                 | 
15178                 | ' 
15178                 | ' sub do_le
15178                 | _do_le
15178     05 4A 05 F6 | 	mov	COUNT_, #5
1517c     A8 00 A0 FD | 	call	#pushregs_
15180     18 F0 07 F1 | 	add	ptra, #24
15184     D0 68 BF FD | 	call	#_pop
15188     FD 1E 02 F6 | 	mov	local01, result1
1518c     FE 20 02 F6 | 	mov	local02, result2
15190     FF 22 02 F6 | 	mov	local03, result3
15194     0C 4E 05 F1 | 	add	fp, #12
15198     A7 1E 62 FC | 	wrlong	local01, fp
1519c     04 4E 05 F1 | 	add	fp, #4
151a0     A7 20 62 FC | 	wrlong	local02, fp
151a4     04 4E 05 F1 | 	add	fp, #4
151a8     A7 22 62 FC | 	wrlong	local03, fp
151ac     14 4E 85 F1 | 	sub	fp, #20
151b0     A4 68 BF FD | 	call	#_pop
151b4     FF 22 02 F6 | 	mov	local03, result3
151b8     A7 FA 61 FC | 	wrlong	result1, fp
151bc     04 4E 05 F1 | 	add	fp, #4
151c0     A7 FC 61 FC | 	wrlong	result2, fp
151c4     04 4E 05 F1 | 	add	fp, #4
151c8     A7 22 62 FC | 	wrlong	local03, fp
151cc                 | ' t2=pop()
151cc                 | ' t1=pop()
151cc                 | ' 
151cc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
151cc     08 4E 85 F1 | 	sub	fp, #8
151d0     1F 22 0E F2 | 	cmp	local03, #31 wz
151d4     14 4E 05 A1 |  if_e	add	fp, #20
151d8     A7 24 02 AB |  if_e	rdlong	local04, fp
151dc     14 4E 85 A1 |  if_e	sub	fp, #20
151e0     12 23 02 A6 |  if_e	mov	local03, local04
151e4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
151e8     28 00 90 5D |  if_ne	jmp	#LR__1700
151ec     00 1E 06 F6 | 	mov	local01, #0
151f0     A7 12 02 FB | 	rdlong	arg01, fp
151f4     0C 4E 05 F1 | 	add	fp, #12
151f8     A7 14 02 FB | 	rdlong	arg02, fp
151fc     0C 4E 85 F1 | 	sub	fp, #12
15200     40 B8 B0 FD | 	call	#__system___string_cmp
15204     01 FA 55 F2 | 	cmps	result1, #1 wc
15208     00 1E 26 C6 |  if_b	not	local01, #0
1520c     A7 1E 62 FC | 	wrlong	local01, fp
15210     1C 04 90 FD | 	jmp	#LR__1713
15214                 | LR__1700
15214                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
15214     08 4E 05 F1 | 	add	fp, #8
15218     A7 1E 02 FB | 	rdlong	local01, fp
1521c     08 4E 85 F1 | 	sub	fp, #8
15220     1E 1E 0E F2 | 	cmp	local01, #30 wz
15224     14 4E 05 A1 |  if_e	add	fp, #20
15228     A7 24 02 AB |  if_e	rdlong	local04, fp
1522c     14 4E 85 A1 |  if_e	sub	fp, #20
15230     12 23 02 A6 |  if_e	mov	local03, local04
15234     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
15238     2C 00 90 5D |  if_ne	jmp	#LR__1701
1523c     00 1E 06 F6 | 	mov	local01, #0
15240     A7 12 02 FB | 	rdlong	arg01, fp
15244     0C 4E 05 F1 | 	add	fp, #12
15248     A7 14 02 FB | 	rdlong	arg02, fp
1524c     0C 4E 85 F1 | 	sub	fp, #12
15250     01 16 06 F6 | 	mov	arg03, #1
15254     AC E7 B0 FD | 	call	#__system___float_cmp
15258     01 FA 55 F2 | 	cmps	result1, #1 wc
1525c     00 1E 26 C6 |  if_b	not	local01, #0
15260     A7 1E 62 FC | 	wrlong	local01, fp
15264     C8 03 90 FD | 	jmp	#LR__1713
15268                 | LR__1701
15268                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
15268     08 4E 05 F1 | 	add	fp, #8
1526c     A7 1E 02 FB | 	rdlong	local01, fp
15270     08 4E 85 F1 | 	sub	fp, #8
15274     1E 1E 0E F2 | 	cmp	local01, #30 wz
15278     14 4E 05 A1 |  if_e	add	fp, #20
1527c     A7 24 02 AB |  if_e	rdlong	local04, fp
15280     14 4E 85 A1 |  if_e	sub	fp, #20
15284     12 23 02 A6 |  if_e	mov	local03, local04
15288     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1528c     48 00 90 5D |  if_ne	jmp	#LR__1702
15290     00 1E 06 F6 | 	mov	local01, #0
15294     A7 20 02 FB | 	rdlong	local02, fp
15298     0C 4E 05 F1 | 	add	fp, #12
1529c     A7 12 02 FB | 	rdlong	arg01, fp
152a0     0C 4E 85 F1 | 	sub	fp, #12
152a4     09 13 52 F6 | 	abs	arg01, arg01 wc
152a8     1F 26 C6 C9 |  if_b	decod	local05, #31
152ac     00 26 06 36 |  if_ae	mov	local05, #0
152b0     18 DF B0 FD | 	call	#__system___float_fromuns
152b4     13 FB 61 F5 | 	xor	result1, local05
152b8     FD 14 02 F6 | 	mov	arg02, result1
152bc     10 13 02 F6 | 	mov	arg01, local02
152c0     01 16 06 F6 | 	mov	arg03, #1
152c4     3C E7 B0 FD | 	call	#__system___float_cmp
152c8     01 FA 55 F2 | 	cmps	result1, #1 wc
152cc     00 1E 26 C6 |  if_b	not	local01, #0
152d0     A7 1E 62 FC | 	wrlong	local01, fp
152d4     58 03 90 FD | 	jmp	#LR__1713
152d8                 | LR__1702
152d8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
152d8     08 4E 05 F1 | 	add	fp, #8
152dc     A7 1E 02 FB | 	rdlong	local01, fp
152e0     08 4E 85 F1 | 	sub	fp, #8
152e4     1E 1E 0E F2 | 	cmp	local01, #30 wz
152e8     14 4E 05 A1 |  if_e	add	fp, #20
152ec     A7 24 02 AB |  if_e	rdlong	local04, fp
152f0     14 4E 85 A1 |  if_e	sub	fp, #20
152f4     12 23 02 A6 |  if_e	mov	local03, local04
152f8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
152fc     38 00 90 5D |  if_ne	jmp	#LR__1703
15300     00 1E 06 F6 | 	mov	local01, #0
15304     A7 20 02 FB | 	rdlong	local02, fp
15308     0C 4E 05 F1 | 	add	fp, #12
1530c     A7 12 02 FB | 	rdlong	arg01, fp
15310     0C 4E 85 F1 | 	sub	fp, #12
15314     B4 DE B0 FD | 	call	#__system___float_fromuns
15318     FD 14 02 F6 | 	mov	arg02, result1
1531c     10 13 02 F6 | 	mov	arg01, local02
15320     01 16 06 F6 | 	mov	arg03, #1
15324     DC E6 B0 FD | 	call	#__system___float_cmp
15328     01 FA 55 F2 | 	cmps	result1, #1 wc
1532c     00 1E 26 C6 |  if_b	not	local01, #0
15330     A7 1E 62 FC | 	wrlong	local01, fp
15334     F8 02 90 FD | 	jmp	#LR__1713
15338                 | LR__1703
15338                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
15338     08 4E 05 F1 | 	add	fp, #8
1533c     A7 1E 02 FB | 	rdlong	local01, fp
15340     08 4E 85 F1 | 	sub	fp, #8
15344     1C 1E 0E F2 | 	cmp	local01, #28 wz
15348     14 4E 05 A1 |  if_e	add	fp, #20
1534c     A7 24 02 AB |  if_e	rdlong	local04, fp
15350     14 4E 85 A1 |  if_e	sub	fp, #20
15354     12 23 02 A6 |  if_e	mov	local03, local04
15358     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1535c     44 00 90 5D |  if_ne	jmp	#LR__1704
15360     00 1E 06 F6 | 	mov	local01, #0
15364     A7 12 02 FB | 	rdlong	arg01, fp
15368     09 13 52 F6 | 	abs	arg01, arg01 wc
1536c     1F 26 C6 C9 |  if_b	decod	local05, #31
15370     00 26 06 36 |  if_ae	mov	local05, #0
15374     54 DE B0 FD | 	call	#__system___float_fromuns
15378     13 FB 61 F5 | 	xor	result1, local05
1537c     FD 12 02 F6 | 	mov	arg01, result1
15380     0C 4E 05 F1 | 	add	fp, #12
15384     A7 14 02 FB | 	rdlong	arg02, fp
15388     0C 4E 85 F1 | 	sub	fp, #12
1538c     01 16 06 F6 | 	mov	arg03, #1
15390     70 E6 B0 FD | 	call	#__system___float_cmp
15394     01 FA 55 F2 | 	cmps	result1, #1 wc
15398     00 1E 26 C6 |  if_b	not	local01, #0
1539c     A7 1E 62 FC | 	wrlong	local01, fp
153a0     8C 02 90 FD | 	jmp	#LR__1713
153a4                 | LR__1704
153a4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
153a4     08 4E 05 F1 | 	add	fp, #8
153a8     A7 1E 02 FB | 	rdlong	local01, fp
153ac     08 4E 85 F1 | 	sub	fp, #8
153b0     1C 1E 0E F2 | 	cmp	local01, #28 wz
153b4     14 4E 05 A1 |  if_e	add	fp, #20
153b8     A7 24 02 AB |  if_e	rdlong	local04, fp
153bc     14 4E 85 A1 |  if_e	sub	fp, #20
153c0     12 23 02 A6 |  if_e	mov	local03, local04
153c4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
153c8     24 00 90 5D |  if_ne	jmp	#LR__1705
153cc     00 1E 06 F6 | 	mov	local01, #0
153d0     A7 20 02 FB | 	rdlong	local02, fp
153d4     0C 4E 05 F1 | 	add	fp, #12
153d8     A7 22 02 FB | 	rdlong	local03, fp
153dc     0C 4E 85 F1 | 	sub	fp, #12
153e0     11 21 5A F2 | 	cmps	local02, local03 wcz
153e4     01 1E 66 E6 |  if_be	neg	local01, #1
153e8     A7 1E 62 FC | 	wrlong	local01, fp
153ec     40 02 90 FD | 	jmp	#LR__1713
153f0                 | LR__1705
153f0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
153f0     08 4E 05 F1 | 	add	fp, #8
153f4     A7 1E 02 FB | 	rdlong	local01, fp
153f8     08 4E 85 F1 | 	sub	fp, #8
153fc     1C 1E 0E F2 | 	cmp	local01, #28 wz
15400     14 4E 05 A1 |  if_e	add	fp, #20
15404     A7 24 02 AB |  if_e	rdlong	local04, fp
15408     14 4E 85 A1 |  if_e	sub	fp, #20
1540c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
15410     24 00 90 5D |  if_ne	jmp	#LR__1706
15414     00 1E 06 F6 | 	mov	local01, #0
15418     A7 20 02 FB | 	rdlong	local02, fp
1541c     0C 4E 05 F1 | 	add	fp, #12
15420     A7 22 02 FB | 	rdlong	local03, fp
15424     0C 4E 85 F1 | 	sub	fp, #12
15428     11 21 5A F2 | 	cmps	local02, local03 wcz
1542c     01 1E 66 E6 |  if_be	neg	local01, #1
15430     A7 1E 62 FC | 	wrlong	local01, fp
15434     F8 01 90 FD | 	jmp	#LR__1713
15438                 | LR__1706
15438                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
15438     08 4E 05 F1 | 	add	fp, #8
1543c     A7 1E 02 FB | 	rdlong	local01, fp
15440     08 4E 85 F1 | 	sub	fp, #8
15444     1D 1E 0E F2 | 	cmp	local01, #29 wz
15448     14 4E 05 A1 |  if_e	add	fp, #20
1544c     A7 22 02 AB |  if_e	rdlong	local03, fp
15450     14 4E 85 A1 |  if_e	sub	fp, #20
15454     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
15458     34 00 90 5D |  if_ne	jmp	#LR__1707
1545c     00 1E 06 F6 | 	mov	local01, #0
15460     A7 12 02 FB | 	rdlong	arg01, fp
15464     64 DD B0 FD | 	call	#__system___float_fromuns
15468     FD 12 02 F6 | 	mov	arg01, result1
1546c     0C 4E 05 F1 | 	add	fp, #12
15470     A7 14 02 FB | 	rdlong	arg02, fp
15474     0C 4E 85 F1 | 	sub	fp, #12
15478     01 16 06 F6 | 	mov	arg03, #1
1547c     84 E5 B0 FD | 	call	#__system___float_cmp
15480     01 FA 55 F2 | 	cmps	result1, #1 wc
15484     00 1E 26 C6 |  if_b	not	local01, #0
15488     A7 1E 62 FC | 	wrlong	local01, fp
1548c     A0 01 90 FD | 	jmp	#LR__1713
15490                 | LR__1707
15490                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
15490     08 4E 05 F1 | 	add	fp, #8
15494     A7 1E 02 FB | 	rdlong	local01, fp
15498     08 4E 85 F1 | 	sub	fp, #8
1549c     1D 1E 0E F2 | 	cmp	local01, #29 wz
154a0     14 4E 05 A1 |  if_e	add	fp, #20
154a4     A7 22 02 AB |  if_e	rdlong	local03, fp
154a8     14 4E 85 A1 |  if_e	sub	fp, #20
154ac     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
154b0     24 00 90 5D |  if_ne	jmp	#LR__1708
154b4     00 1E 06 F6 | 	mov	local01, #0
154b8     A7 20 02 FB | 	rdlong	local02, fp
154bc     0C 4E 05 F1 | 	add	fp, #12
154c0     A7 22 02 FB | 	rdlong	local03, fp
154c4     0C 4E 85 F1 | 	sub	fp, #12
154c8     11 21 5A F2 | 	cmps	local02, local03 wcz
154cc     01 1E 66 E6 |  if_be	neg	local01, #1
154d0     A7 1E 62 FC | 	wrlong	local01, fp
154d4     58 01 90 FD | 	jmp	#LR__1713
154d8                 | LR__1708
154d8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
154d8     08 4E 05 F1 | 	add	fp, #8
154dc     A7 1E 02 FB | 	rdlong	local01, fp
154e0     08 4E 85 F1 | 	sub	fp, #8
154e4     1D 1E 0E F2 | 	cmp	local01, #29 wz
154e8     14 4E 05 A1 |  if_e	add	fp, #20
154ec     A7 22 02 AB |  if_e	rdlong	local03, fp
154f0     14 4E 85 A1 |  if_e	sub	fp, #20
154f4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
154f8     24 00 90 5D |  if_ne	jmp	#LR__1709
154fc     00 1E 06 F6 | 	mov	local01, #0
15500     A7 20 02 FB | 	rdlong	local02, fp
15504     0C 4E 05 F1 | 	add	fp, #12
15508     A7 22 02 FB | 	rdlong	local03, fp
1550c     0C 4E 85 F1 | 	sub	fp, #12
15510     11 21 1A F2 | 	cmp	local02, local03 wcz
15514     01 1E 66 E6 |  if_be	neg	local01, #1
15518     A7 1E 62 FC | 	wrlong	local01, fp
1551c     10 01 90 FD | 	jmp	#LR__1713
15520                 | LR__1709
15520                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
15520     08 4E 05 F1 | 	add	fp, #8
15524     A7 1E 02 FB | 	rdlong	local01, fp
15528     08 4E 85 F1 | 	sub	fp, #8
1552c     2B 1E 0E F2 | 	cmp	local01, #43 wz
15530     14 4E 05 A1 |  if_e	add	fp, #20
15534     A7 22 02 AB |  if_e	rdlong	local03, fp
15538     14 4E 85 A1 |  if_e	sub	fp, #20
1553c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
15540     30 00 90 5D |  if_ne	jmp	#LR__1710
15544     00 1E 06 F6 | 	mov	local01, #0
15548     A7 12 02 FB | 	rdlong	arg01, fp
1554c     B4 BD BF FD | 	call	#_convertstring
15550     FD 12 02 F6 | 	mov	arg01, result1
15554     0C 4E 05 F1 | 	add	fp, #12
15558     A7 14 02 FB | 	rdlong	arg02, fp
1555c     0C 4E 85 F1 | 	sub	fp, #12
15560     E0 B4 B0 FD | 	call	#__system___string_cmp
15564     01 FA 55 F2 | 	cmps	result1, #1 wc
15568     00 1E 26 C6 |  if_b	not	local01, #0
1556c     A7 1E 62 FC | 	wrlong	local01, fp
15570     BC 00 90 FD | 	jmp	#LR__1713
15574                 | LR__1710
15574                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
15574     08 4E 05 F1 | 	add	fp, #8
15578     A7 1E 02 FB | 	rdlong	local01, fp
1557c     08 4E 85 F1 | 	sub	fp, #8
15580     1F 1E 0E F2 | 	cmp	local01, #31 wz
15584     14 4E 05 A1 |  if_e	add	fp, #20
15588     A7 22 02 AB |  if_e	rdlong	local03, fp
1558c     14 4E 85 A1 |  if_e	sub	fp, #20
15590     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
15594     34 00 90 5D |  if_ne	jmp	#LR__1711
15598     00 1E 06 F6 | 	mov	local01, #0
1559c     A7 20 02 FB | 	rdlong	local02, fp
155a0     0C 4E 05 F1 | 	add	fp, #12
155a4     A7 12 02 FB | 	rdlong	arg01, fp
155a8     0C 4E 85 F1 | 	sub	fp, #12
155ac     54 BD BF FD | 	call	#_convertstring
155b0     FD 14 02 F6 | 	mov	arg02, result1
155b4     10 13 02 F6 | 	mov	arg01, local02
155b8     88 B4 B0 FD | 	call	#__system___string_cmp
155bc     01 FA 55 F2 | 	cmps	result1, #1 wc
155c0     00 1E 26 C6 |  if_b	not	local01, #0
155c4     A7 1E 62 FC | 	wrlong	local01, fp
155c8     64 00 90 FD | 	jmp	#LR__1713
155cc                 | LR__1711
155cc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
155cc     08 4E 05 F1 | 	add	fp, #8
155d0     A7 1E 02 FB | 	rdlong	local01, fp
155d4     08 4E 85 F1 | 	sub	fp, #8
155d8     2B 1E 0E F2 | 	cmp	local01, #43 wz
155dc     14 4E 05 A1 |  if_e	add	fp, #20
155e0     A7 22 02 AB |  if_e	rdlong	local03, fp
155e4     14 4E 85 A1 |  if_e	sub	fp, #20
155e8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
155ec     3C 00 90 5D |  if_ne	jmp	#LR__1712
155f0     00 1E 06 F6 | 	mov	local01, #0
155f4     A7 12 02 FB | 	rdlong	arg01, fp
155f8     08 BD BF FD | 	call	#_convertstring
155fc     FD 20 02 F6 | 	mov	local02, result1
15600     0C 4E 05 F1 | 	add	fp, #12
15604     A7 12 02 FB | 	rdlong	arg01, fp
15608     0C 4E 85 F1 | 	sub	fp, #12
1560c     F4 BC BF FD | 	call	#_convertstring
15610     FD 14 02 F6 | 	mov	arg02, result1
15614     10 13 02 F6 | 	mov	arg01, local02
15618     28 B4 B0 FD | 	call	#__system___string_cmp
1561c     01 FA 55 F2 | 	cmps	result1, #1 wc
15620     00 1E 26 C6 |  if_b	not	local01, #0
15624     A7 1E 62 FC | 	wrlong	local01, fp
15628     04 00 90 FD | 	jmp	#LR__1713
1562c                 | LR__1712
1562c     A7 00 68 FC | 	wrlong	#0, fp
15630                 | LR__1713
15630     08 4E 05 F1 | 	add	fp, #8
15634     A7 38 68 FC | 	wrlong	#28, fp
15638     08 4E 85 F1 | 	sub	fp, #8
1563c     A7 12 02 F6 | 	mov	arg01, fp
15640     AC 64 BF FD | 	call	#_push
15644     A7 F0 03 F6 | 	mov	ptra, fp
15648     B2 00 A0 FD | 	call	#popregs_
1564c                 | _do_le_ret
1564c     2D 00 64 FD | 	ret
15650                 | 
15650                 | ' 
15650                 | ' 
15650                 | ' sub do_ne
15650                 | _do_ne
15650     05 4A 05 F6 | 	mov	COUNT_, #5
15654     A8 00 A0 FD | 	call	#pushregs_
15658     18 F0 07 F1 | 	add	ptra, #24
1565c     F8 63 BF FD | 	call	#_pop
15660     FD 1E 02 F6 | 	mov	local01, result1
15664     FE 20 02 F6 | 	mov	local02, result2
15668     FF 22 02 F6 | 	mov	local03, result3
1566c     0C 4E 05 F1 | 	add	fp, #12
15670     A7 1E 62 FC | 	wrlong	local01, fp
15674     04 4E 05 F1 | 	add	fp, #4
15678     A7 20 62 FC | 	wrlong	local02, fp
1567c     04 4E 05 F1 | 	add	fp, #4
15680     A7 22 62 FC | 	wrlong	local03, fp
15684     14 4E 85 F1 | 	sub	fp, #20
15688     CC 63 BF FD | 	call	#_pop
1568c     FF 22 02 F6 | 	mov	local03, result3
15690     A7 FA 61 FC | 	wrlong	result1, fp
15694     04 4E 05 F1 | 	add	fp, #4
15698     A7 FC 61 FC | 	wrlong	result2, fp
1569c     04 4E 05 F1 | 	add	fp, #4
156a0     A7 22 62 FC | 	wrlong	local03, fp
156a4                 | ' t2=pop()
156a4                 | ' t1=pop()
156a4                 | ' 
156a4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
156a4     08 4E 85 F1 | 	sub	fp, #8
156a8     1F 22 0E F2 | 	cmp	local03, #31 wz
156ac     14 4E 05 A1 |  if_e	add	fp, #20
156b0     A7 24 02 AB |  if_e	rdlong	local04, fp
156b4     14 4E 85 A1 |  if_e	sub	fp, #20
156b8     12 23 02 A6 |  if_e	mov	local03, local04
156bc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
156c0     28 00 90 5D |  if_ne	jmp	#LR__1720
156c4     00 1E 06 F6 | 	mov	local01, #0
156c8     A7 12 02 FB | 	rdlong	arg01, fp
156cc     0C 4E 05 F1 | 	add	fp, #12
156d0     A7 14 02 FB | 	rdlong	arg02, fp
156d4     0C 4E 85 F1 | 	sub	fp, #12
156d8     68 B3 B0 FD | 	call	#__system___string_cmp
156dc     00 FA 0D F2 | 	cmp	result1, #0 wz
156e0     00 1E 26 56 |  if_ne	not	local01, #0
156e4     A7 1E 62 FC | 	wrlong	local01, fp
156e8     1C 04 90 FD | 	jmp	#LR__1733
156ec                 | LR__1720
156ec                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
156ec     08 4E 05 F1 | 	add	fp, #8
156f0     A7 1E 02 FB | 	rdlong	local01, fp
156f4     08 4E 85 F1 | 	sub	fp, #8
156f8     1E 1E 0E F2 | 	cmp	local01, #30 wz
156fc     14 4E 05 A1 |  if_e	add	fp, #20
15700     A7 24 02 AB |  if_e	rdlong	local04, fp
15704     14 4E 85 A1 |  if_e	sub	fp, #20
15708     12 23 02 A6 |  if_e	mov	local03, local04
1570c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
15710     2C 00 90 5D |  if_ne	jmp	#LR__1721
15714     00 1E 06 F6 | 	mov	local01, #0
15718     A7 12 02 FB | 	rdlong	arg01, fp
1571c     0C 4E 05 F1 | 	add	fp, #12
15720     A7 14 02 FB | 	rdlong	arg02, fp
15724     0C 4E 85 F1 | 	sub	fp, #12
15728     01 16 06 F6 | 	mov	arg03, #1
1572c     D4 E2 B0 FD | 	call	#__system___float_cmp
15730     00 FA 0D F2 | 	cmp	result1, #0 wz
15734     00 1E 26 56 |  if_ne	not	local01, #0
15738     A7 1E 62 FC | 	wrlong	local01, fp
1573c     C8 03 90 FD | 	jmp	#LR__1733
15740                 | LR__1721
15740                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
15740     08 4E 05 F1 | 	add	fp, #8
15744     A7 1E 02 FB | 	rdlong	local01, fp
15748     08 4E 85 F1 | 	sub	fp, #8
1574c     1E 1E 0E F2 | 	cmp	local01, #30 wz
15750     14 4E 05 A1 |  if_e	add	fp, #20
15754     A7 24 02 AB |  if_e	rdlong	local04, fp
15758     14 4E 85 A1 |  if_e	sub	fp, #20
1575c     12 23 02 A6 |  if_e	mov	local03, local04
15760     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
15764     48 00 90 5D |  if_ne	jmp	#LR__1722
15768     00 1E 06 F6 | 	mov	local01, #0
1576c     A7 20 02 FB | 	rdlong	local02, fp
15770     0C 4E 05 F1 | 	add	fp, #12
15774     A7 12 02 FB | 	rdlong	arg01, fp
15778     0C 4E 85 F1 | 	sub	fp, #12
1577c     09 13 52 F6 | 	abs	arg01, arg01 wc
15780     1F 26 C6 C9 |  if_b	decod	local05, #31
15784     00 26 06 36 |  if_ae	mov	local05, #0
15788     40 DA B0 FD | 	call	#__system___float_fromuns
1578c     13 FB 61 F5 | 	xor	result1, local05
15790     FD 14 02 F6 | 	mov	arg02, result1
15794     10 13 02 F6 | 	mov	arg01, local02
15798     01 16 06 F6 | 	mov	arg03, #1
1579c     64 E2 B0 FD | 	call	#__system___float_cmp
157a0     00 FA 0D F2 | 	cmp	result1, #0 wz
157a4     00 1E 26 56 |  if_ne	not	local01, #0
157a8     A7 1E 62 FC | 	wrlong	local01, fp
157ac     58 03 90 FD | 	jmp	#LR__1733
157b0                 | LR__1722
157b0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
157b0     08 4E 05 F1 | 	add	fp, #8
157b4     A7 1E 02 FB | 	rdlong	local01, fp
157b8     08 4E 85 F1 | 	sub	fp, #8
157bc     1E 1E 0E F2 | 	cmp	local01, #30 wz
157c0     14 4E 05 A1 |  if_e	add	fp, #20
157c4     A7 24 02 AB |  if_e	rdlong	local04, fp
157c8     14 4E 85 A1 |  if_e	sub	fp, #20
157cc     12 23 02 A6 |  if_e	mov	local03, local04
157d0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
157d4     38 00 90 5D |  if_ne	jmp	#LR__1723
157d8     00 1E 06 F6 | 	mov	local01, #0
157dc     A7 20 02 FB | 	rdlong	local02, fp
157e0     0C 4E 05 F1 | 	add	fp, #12
157e4     A7 12 02 FB | 	rdlong	arg01, fp
157e8     0C 4E 85 F1 | 	sub	fp, #12
157ec     DC D9 B0 FD | 	call	#__system___float_fromuns
157f0     FD 14 02 F6 | 	mov	arg02, result1
157f4     10 13 02 F6 | 	mov	arg01, local02
157f8     01 16 06 F6 | 	mov	arg03, #1
157fc     04 E2 B0 FD | 	call	#__system___float_cmp
15800     00 FA 0D F2 | 	cmp	result1, #0 wz
15804     00 1E 26 56 |  if_ne	not	local01, #0
15808     A7 1E 62 FC | 	wrlong	local01, fp
1580c     F8 02 90 FD | 	jmp	#LR__1733
15810                 | LR__1723
15810                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
15810     08 4E 05 F1 | 	add	fp, #8
15814     A7 1E 02 FB | 	rdlong	local01, fp
15818     08 4E 85 F1 | 	sub	fp, #8
1581c     1C 1E 0E F2 | 	cmp	local01, #28 wz
15820     14 4E 05 A1 |  if_e	add	fp, #20
15824     A7 24 02 AB |  if_e	rdlong	local04, fp
15828     14 4E 85 A1 |  if_e	sub	fp, #20
1582c     12 23 02 A6 |  if_e	mov	local03, local04
15830     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
15834     44 00 90 5D |  if_ne	jmp	#LR__1724
15838     00 1E 06 F6 | 	mov	local01, #0
1583c     A7 12 02 FB | 	rdlong	arg01, fp
15840     09 13 52 F6 | 	abs	arg01, arg01 wc
15844     1F 26 C6 C9 |  if_b	decod	local05, #31
15848     00 26 06 36 |  if_ae	mov	local05, #0
1584c     7C D9 B0 FD | 	call	#__system___float_fromuns
15850     13 FB 61 F5 | 	xor	result1, local05
15854     FD 12 02 F6 | 	mov	arg01, result1
15858     0C 4E 05 F1 | 	add	fp, #12
1585c     A7 14 02 FB | 	rdlong	arg02, fp
15860     0C 4E 85 F1 | 	sub	fp, #12
15864     01 16 06 F6 | 	mov	arg03, #1
15868     98 E1 B0 FD | 	call	#__system___float_cmp
1586c     00 FA 0D F2 | 	cmp	result1, #0 wz
15870     00 1E 26 56 |  if_ne	not	local01, #0
15874     A7 1E 62 FC | 	wrlong	local01, fp
15878     8C 02 90 FD | 	jmp	#LR__1733
1587c                 | LR__1724
1587c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1587c     08 4E 05 F1 | 	add	fp, #8
15880     A7 1E 02 FB | 	rdlong	local01, fp
15884     08 4E 85 F1 | 	sub	fp, #8
15888     1C 1E 0E F2 | 	cmp	local01, #28 wz
1588c     14 4E 05 A1 |  if_e	add	fp, #20
15890     A7 24 02 AB |  if_e	rdlong	local04, fp
15894     14 4E 85 A1 |  if_e	sub	fp, #20
15898     12 23 02 A6 |  if_e	mov	local03, local04
1589c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
158a0     24 00 90 5D |  if_ne	jmp	#LR__1725
158a4     00 1E 06 F6 | 	mov	local01, #0
158a8     A7 20 02 FB | 	rdlong	local02, fp
158ac     0C 4E 05 F1 | 	add	fp, #12
158b0     A7 22 02 FB | 	rdlong	local03, fp
158b4     0C 4E 85 F1 | 	sub	fp, #12
158b8     11 21 0A F2 | 	cmp	local02, local03 wz
158bc     01 1E 66 56 |  if_ne	neg	local01, #1
158c0     A7 1E 62 FC | 	wrlong	local01, fp
158c4     40 02 90 FD | 	jmp	#LR__1733
158c8                 | LR__1725
158c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
158c8     08 4E 05 F1 | 	add	fp, #8
158cc     A7 1E 02 FB | 	rdlong	local01, fp
158d0     08 4E 85 F1 | 	sub	fp, #8
158d4     1C 1E 0E F2 | 	cmp	local01, #28 wz
158d8     14 4E 05 A1 |  if_e	add	fp, #20
158dc     A7 24 02 AB |  if_e	rdlong	local04, fp
158e0     14 4E 85 A1 |  if_e	sub	fp, #20
158e4     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
158e8     24 00 90 5D |  if_ne	jmp	#LR__1726
158ec     00 1E 06 F6 | 	mov	local01, #0
158f0     A7 20 02 FB | 	rdlong	local02, fp
158f4     0C 4E 05 F1 | 	add	fp, #12
158f8     A7 22 02 FB | 	rdlong	local03, fp
158fc     0C 4E 85 F1 | 	sub	fp, #12
15900     11 21 0A F2 | 	cmp	local02, local03 wz
15904     01 1E 66 56 |  if_ne	neg	local01, #1
15908     A7 1E 62 FC | 	wrlong	local01, fp
1590c     F8 01 90 FD | 	jmp	#LR__1733
15910                 | LR__1726
15910                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
15910     08 4E 05 F1 | 	add	fp, #8
15914     A7 1E 02 FB | 	rdlong	local01, fp
15918     08 4E 85 F1 | 	sub	fp, #8
1591c     1D 1E 0E F2 | 	cmp	local01, #29 wz
15920     14 4E 05 A1 |  if_e	add	fp, #20
15924     A7 22 02 AB |  if_e	rdlong	local03, fp
15928     14 4E 85 A1 |  if_e	sub	fp, #20
1592c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
15930     34 00 90 5D |  if_ne	jmp	#LR__1727
15934     00 1E 06 F6 | 	mov	local01, #0
15938     A7 12 02 FB | 	rdlong	arg01, fp
1593c     8C D8 B0 FD | 	call	#__system___float_fromuns
15940     FD 12 02 F6 | 	mov	arg01, result1
15944     0C 4E 05 F1 | 	add	fp, #12
15948     A7 14 02 FB | 	rdlong	arg02, fp
1594c     0C 4E 85 F1 | 	sub	fp, #12
15950     01 16 06 F6 | 	mov	arg03, #1
15954     AC E0 B0 FD | 	call	#__system___float_cmp
15958     00 FA 0D F2 | 	cmp	result1, #0 wz
1595c     00 1E 26 56 |  if_ne	not	local01, #0
15960     A7 1E 62 FC | 	wrlong	local01, fp
15964     A0 01 90 FD | 	jmp	#LR__1733
15968                 | LR__1727
15968                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
15968     08 4E 05 F1 | 	add	fp, #8
1596c     A7 1E 02 FB | 	rdlong	local01, fp
15970     08 4E 85 F1 | 	sub	fp, #8
15974     1D 1E 0E F2 | 	cmp	local01, #29 wz
15978     14 4E 05 A1 |  if_e	add	fp, #20
1597c     A7 22 02 AB |  if_e	rdlong	local03, fp
15980     14 4E 85 A1 |  if_e	sub	fp, #20
15984     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
15988     24 00 90 5D |  if_ne	jmp	#LR__1728
1598c     00 1E 06 F6 | 	mov	local01, #0
15990     A7 20 02 FB | 	rdlong	local02, fp
15994     0C 4E 05 F1 | 	add	fp, #12
15998     A7 22 02 FB | 	rdlong	local03, fp
1599c     0C 4E 85 F1 | 	sub	fp, #12
159a0     11 21 0A F2 | 	cmp	local02, local03 wz
159a4     01 1E 66 56 |  if_ne	neg	local01, #1
159a8     A7 1E 62 FC | 	wrlong	local01, fp
159ac     58 01 90 FD | 	jmp	#LR__1733
159b0                 | LR__1728
159b0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
159b0     08 4E 05 F1 | 	add	fp, #8
159b4     A7 1E 02 FB | 	rdlong	local01, fp
159b8     08 4E 85 F1 | 	sub	fp, #8
159bc     1D 1E 0E F2 | 	cmp	local01, #29 wz
159c0     14 4E 05 A1 |  if_e	add	fp, #20
159c4     A7 22 02 AB |  if_e	rdlong	local03, fp
159c8     14 4E 85 A1 |  if_e	sub	fp, #20
159cc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
159d0     24 00 90 5D |  if_ne	jmp	#LR__1729
159d4     00 1E 06 F6 | 	mov	local01, #0
159d8     A7 20 02 FB | 	rdlong	local02, fp
159dc     0C 4E 05 F1 | 	add	fp, #12
159e0     A7 22 02 FB | 	rdlong	local03, fp
159e4     0C 4E 85 F1 | 	sub	fp, #12
159e8     11 21 0A F2 | 	cmp	local02, local03 wz
159ec     01 1E 66 56 |  if_ne	neg	local01, #1
159f0     A7 1E 62 FC | 	wrlong	local01, fp
159f4     10 01 90 FD | 	jmp	#LR__1733
159f8                 | LR__1729
159f8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
159f8     08 4E 05 F1 | 	add	fp, #8
159fc     A7 1E 02 FB | 	rdlong	local01, fp
15a00     08 4E 85 F1 | 	sub	fp, #8
15a04     2B 1E 0E F2 | 	cmp	local01, #43 wz
15a08     14 4E 05 A1 |  if_e	add	fp, #20
15a0c     A7 22 02 AB |  if_e	rdlong	local03, fp
15a10     14 4E 85 A1 |  if_e	sub	fp, #20
15a14     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
15a18     30 00 90 5D |  if_ne	jmp	#LR__1730
15a1c     00 1E 06 F6 | 	mov	local01, #0
15a20     A7 12 02 FB | 	rdlong	arg01, fp
15a24     DC B8 BF FD | 	call	#_convertstring
15a28     FD 12 02 F6 | 	mov	arg01, result1
15a2c     0C 4E 05 F1 | 	add	fp, #12
15a30     A7 14 02 FB | 	rdlong	arg02, fp
15a34     0C 4E 85 F1 | 	sub	fp, #12
15a38     08 B0 B0 FD | 	call	#__system___string_cmp
15a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
15a40     00 1E 26 56 |  if_ne	not	local01, #0
15a44     A7 1E 62 FC | 	wrlong	local01, fp
15a48     BC 00 90 FD | 	jmp	#LR__1733
15a4c                 | LR__1730
15a4c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
15a4c     08 4E 05 F1 | 	add	fp, #8
15a50     A7 1E 02 FB | 	rdlong	local01, fp
15a54     08 4E 85 F1 | 	sub	fp, #8
15a58     1F 1E 0E F2 | 	cmp	local01, #31 wz
15a5c     14 4E 05 A1 |  if_e	add	fp, #20
15a60     A7 22 02 AB |  if_e	rdlong	local03, fp
15a64     14 4E 85 A1 |  if_e	sub	fp, #20
15a68     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
15a6c     34 00 90 5D |  if_ne	jmp	#LR__1731
15a70     00 1E 06 F6 | 	mov	local01, #0
15a74     A7 20 02 FB | 	rdlong	local02, fp
15a78     0C 4E 05 F1 | 	add	fp, #12
15a7c     A7 12 02 FB | 	rdlong	arg01, fp
15a80     0C 4E 85 F1 | 	sub	fp, #12
15a84     7C B8 BF FD | 	call	#_convertstring
15a88     FD 14 02 F6 | 	mov	arg02, result1
15a8c     10 13 02 F6 | 	mov	arg01, local02
15a90     B0 AF B0 FD | 	call	#__system___string_cmp
15a94     00 FA 0D F2 | 	cmp	result1, #0 wz
15a98     00 1E 26 56 |  if_ne	not	local01, #0
15a9c     A7 1E 62 FC | 	wrlong	local01, fp
15aa0     64 00 90 FD | 	jmp	#LR__1733
15aa4                 | LR__1731
15aa4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
15aa4     08 4E 05 F1 | 	add	fp, #8
15aa8     A7 1E 02 FB | 	rdlong	local01, fp
15aac     08 4E 85 F1 | 	sub	fp, #8
15ab0     2B 1E 0E F2 | 	cmp	local01, #43 wz
15ab4     14 4E 05 A1 |  if_e	add	fp, #20
15ab8     A7 22 02 AB |  if_e	rdlong	local03, fp
15abc     14 4E 85 A1 |  if_e	sub	fp, #20
15ac0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
15ac4     3C 00 90 5D |  if_ne	jmp	#LR__1732
15ac8     00 1E 06 F6 | 	mov	local01, #0
15acc     A7 12 02 FB | 	rdlong	arg01, fp
15ad0     30 B8 BF FD | 	call	#_convertstring
15ad4     FD 20 02 F6 | 	mov	local02, result1
15ad8     0C 4E 05 F1 | 	add	fp, #12
15adc     A7 12 02 FB | 	rdlong	arg01, fp
15ae0     0C 4E 85 F1 | 	sub	fp, #12
15ae4     1C B8 BF FD | 	call	#_convertstring
15ae8     FD 14 02 F6 | 	mov	arg02, result1
15aec     10 13 02 F6 | 	mov	arg01, local02
15af0     50 AF B0 FD | 	call	#__system___string_cmp
15af4     00 FA 0D F2 | 	cmp	result1, #0 wz
15af8     00 1E 26 56 |  if_ne	not	local01, #0
15afc     A7 1E 62 FC | 	wrlong	local01, fp
15b00     04 00 90 FD | 	jmp	#LR__1733
15b04                 | LR__1732
15b04     A7 00 68 FC | 	wrlong	#0, fp
15b08                 | LR__1733
15b08     08 4E 05 F1 | 	add	fp, #8
15b0c     A7 38 68 FC | 	wrlong	#28, fp
15b10     08 4E 85 F1 | 	sub	fp, #8
15b14     A7 12 02 F6 | 	mov	arg01, fp
15b18     D4 5F BF FD | 	call	#_push
15b1c     A7 F0 03 F6 | 	mov	ptra, fp
15b20     B2 00 A0 FD | 	call	#popregs_
15b24                 | _do_ne_ret
15b24     2D 00 64 FD | 	ret
15b28                 | 
15b28                 | ' 
15b28                 | ' 
15b28                 | ' 
15b28                 | ' function converttoint (t1 as expr_result) as integer 
15b28                 | _converttoint
15b28     02 4A 05 F6 | 	mov	COUNT_, #2
15b2c     A8 00 A0 FD | 	call	#pushregs_
15b30     09 1F 02 F6 | 	mov	local01, arg01
15b34                 | ' 
15b34                 | ' select case t1.result_type
15b34     08 1E 06 F1 | 	add	local01, #8
15b38     0F 21 02 FB | 	rdlong	local02, local01
15b3c     08 1E 86 F1 | 	sub	local01, #8
15b40     1C 20 0E F2 | 	cmp	local02, #28 wz
15b44     2C 00 90 AD |  if_e	jmp	#LR__1740
15b48     1D 20 0E F2 | 	cmp	local02, #29 wz
15b4c     2C 00 90 AD |  if_e	jmp	#LR__1741
15b50     1E 20 0E F2 | 	cmp	local02, #30 wz
15b54     2C 00 90 AD |  if_e	jmp	#LR__1742
15b58     1F 20 0E F2 | 	cmp	local02, #31 wz
15b5c     34 00 90 AD |  if_e	jmp	#LR__1743
15b60     2B 20 0E F2 | 	cmp	local02, #43 wz
15b64     44 00 90 AD |  if_e	jmp	#LR__1744
15b68     2C 20 0E F2 | 	cmp	local02, #44 wz
15b6c     5C 00 90 AD |  if_e	jmp	#LR__1745
15b70     60 00 90 FD | 	jmp	#LR__1746
15b74                 | LR__1740
15b74     0F FB 01 FB | 	rdlong	result1, local01
15b78     5C 00 90 FD | 	jmp	#LR__1747
15b7c                 | LR__1741
15b7c     0F FB 01 FB | 	rdlong	result1, local01
15b80     54 00 90 FD | 	jmp	#LR__1747
15b84                 | LR__1742
15b84     0F 13 02 FB | 	rdlong	arg01, local01
15b88     01 14 06 F6 | 	mov	arg02, #1
15b8c     08 DF B0 FD | 	call	#__system___float_tointeger
15b90     44 00 90 FD | 	jmp	#LR__1747
15b94                 | LR__1743
15b94     0F 13 02 FB | 	rdlong	arg01, local01
15b98     1C E2 B0 FD | 	call	#__system____builtin_atof
15b9c     FD 12 02 F6 | 	mov	arg01, result1
15ba0     01 14 06 F6 | 	mov	arg02, #1
15ba4     F0 DE B0 FD | 	call	#__system___float_tointeger
15ba8     2C 00 90 FD | 	jmp	#LR__1747
15bac                 | LR__1744
15bac     0F 13 02 FB | 	rdlong	arg01, local01
15bb0     50 B7 BF FD | 	call	#_convertstring
15bb4     FD 12 02 F6 | 	mov	arg01, result1
15bb8     FC E1 B0 FD | 	call	#__system____builtin_atof
15bbc     FD 12 02 F6 | 	mov	arg01, result1
15bc0     01 14 06 F6 | 	mov	arg02, #1
15bc4     D0 DE B0 FD | 	call	#__system___float_tointeger
15bc8     0C 00 90 FD | 	jmp	#LR__1747
15bcc                 | LR__1745
15bcc     0F FB 01 FB | 	rdlong	result1, local01
15bd0     04 00 90 FD | 	jmp	#LR__1747
15bd4                 | LR__1746
15bd4     00 FA 05 F6 | 	mov	result1, #0
15bd8                 | LR__1747
15bd8     A7 F0 03 F6 | 	mov	ptra, fp
15bdc     B2 00 A0 FD | 	call	#popregs_
15be0                 | _converttoint_ret
15be0     2D 00 64 FD | 	ret
15be4                 | 
15be4                 | ' 
15be4                 | ' function converttofloat (t1 as expr_result) as single
15be4                 | _converttofloat
15be4     03 4A 05 F6 | 	mov	COUNT_, #3
15be8     A8 00 A0 FD | 	call	#pushregs_
15bec     09 1F 02 F6 | 	mov	local01, arg01
15bf0                 | ' 
15bf0                 | ' select case t1.result_type
15bf0     08 1E 06 F1 | 	add	local01, #8
15bf4     0F 21 02 FB | 	rdlong	local02, local01
15bf8     08 1E 86 F1 | 	sub	local01, #8
15bfc     1C 20 0E F2 | 	cmp	local02, #28 wz
15c00     24 00 90 AD |  if_e	jmp	#LR__1750
15c04     1D 20 0E F2 | 	cmp	local02, #29 wz
15c08     38 00 90 AD |  if_e	jmp	#LR__1751
15c0c     1E 20 0E F2 | 	cmp	local02, #30 wz
15c10     3C 00 90 AD |  if_e	jmp	#LR__1752
15c14     1F 20 0E F2 | 	cmp	local02, #31 wz
15c18     3C 00 90 AD |  if_e	jmp	#LR__1753
15c1c     2B 20 0E F2 | 	cmp	local02, #43 wz
15c20     40 00 90 AD |  if_e	jmp	#LR__1754
15c24     50 00 90 FD | 	jmp	#LR__1755
15c28                 | LR__1750
15c28     0F 13 02 FB | 	rdlong	arg01, local01
15c2c     09 13 52 F6 | 	abs	arg01, arg01 wc
15c30     1F 22 C6 C9 |  if_b	decod	local03, #31
15c34     00 22 06 36 |  if_ae	mov	local03, #0
15c38     90 D5 B0 FD | 	call	#__system___float_fromuns
15c3c     11 FB 61 F5 | 	xor	result1, local03
15c40     38 00 90 FD | 	jmp	#LR__1756
15c44                 | LR__1751
15c44     0F 13 02 FB | 	rdlong	arg01, local01
15c48     80 D5 B0 FD | 	call	#__system___float_fromuns
15c4c     2C 00 90 FD | 	jmp	#LR__1756
15c50                 | LR__1752
15c50     0F FB 01 FB | 	rdlong	result1, local01
15c54     24 00 90 FD | 	jmp	#LR__1756
15c58                 | LR__1753
15c58     0F 13 02 FB | 	rdlong	arg01, local01
15c5c     58 E1 B0 FD | 	call	#__system____builtin_atof
15c60     18 00 90 FD | 	jmp	#LR__1756
15c64                 | LR__1754
15c64     0F 13 02 FB | 	rdlong	arg01, local01
15c68     98 B6 BF FD | 	call	#_convertstring
15c6c     FD 12 02 F6 | 	mov	arg01, result1
15c70     44 E1 B0 FD | 	call	#__system____builtin_atof
15c74     04 00 90 FD | 	jmp	#LR__1756
15c78                 | LR__1755
15c78     00 FA 05 F6 | 	mov	result1, #0
15c7c                 | LR__1756
15c7c     A7 F0 03 F6 | 	mov	ptra, fp
15c80     B2 00 A0 FD | 	call	#popregs_
15c84                 | _converttofloat_ret
15c84     2D 00 64 FD | 	ret
15c88                 | 
15c88                 | ' 
15c88                 | ' sub do_rnd
15c88                 | _do_rnd
15c88     01 4A 05 F6 | 	mov	COUNT_, #1
15c8c     A8 00 A0 FD | 	call	#pushregs_
15c90     10 F0 07 F1 | 	add	ptra, #16
15c94     4A 00 00 FF 
15c98     80 E4 05 F1 | 	add	objptr, ##38016
15c9c     F2 1E 02 FB | 	rdlong	local01, objptr
15ca0     0F 17 02 F6 | 	mov	arg03, local01
15ca4     01 16 66 F0 | 	shl	arg03, #1
15ca8     0F 17 02 F1 | 	add	arg03, local01
15cac     02 16 66 F0 | 	shl	arg03, #2
15cb0     03 00 00 FF 
15cb4     04 E4 85 F1 | 	sub	objptr, ##1540
15cb8     F2 16 02 F1 | 	add	arg03, objptr
15cbc     0B 17 02 FB | 	rdlong	arg03, arg03
15cc0     0C 4E 05 F1 | 	add	fp, #12
15cc4     A7 16 62 FC | 	wrlong	arg03, fp
15cc8                 | ' 
15cc8                 | ' numpar=compiledline(lineptr_e).result.uresult
15cc8                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
15cc8     0C 4E 85 F1 | 	sub	fp, #12
15ccc     02 16 16 F2 | 	cmp	arg03, #2 wc
15cd0     47 00 00 FF 
15cd4     7C E4 85 F1 | 	sub	objptr, ##36476
15cd8     3C 00 90 CD |  if_b	jmp	#LR__1760
15cdc     00 12 06 F6 | 	mov	arg01, #0
15ce0     78 07 B1 FD | 	call	#__system___getiolock_0540
15ce4     FD 12 02 F6 | 	mov	arg01, result1
15ce8     30 AD B0 FD | 	call	#__system___lockmem
15cec     84 01 00 FF 
15cf0     F8 15 06 F6 | 	mov	arg02, ##@LR__5473
15cf4     00 12 06 F6 | 	mov	arg01, #0
15cf8     00 16 06 F6 | 	mov	arg03, #0
15cfc     10 BA B0 FD | 	call	#__system___basic_print_string
15d00     00 12 06 F6 | 	mov	arg01, #0
15d04     54 07 B1 FD | 	call	#__system___getiolock_0540
15d08     FD 00 68 FC | 	wrlong	#0, result1
15d0c     27 12 06 F6 | 	mov	arg01, #39
15d10     70 77 B0 FD | 	call	#_printerror
15d14     2C 01 90 FD | 	jmp	#LR__1767
15d18                 | LR__1760
15d18                 | ' if numpar=0 then
15d18     0C 4E 05 F1 | 	add	fp, #12
15d1c     A7 FE 09 FB | 	rdlong	result3, fp wz
15d20     0C 4E 85 F1 | 	sub	fp, #12
15d24     20 00 90 5D |  if_ne	jmp	#LR__1761
15d28     08 4E 05 F1 | 	add	fp, #8
15d2c     A7 3A 68 FC | 	wrlong	#29, fp
15d30     08 4E 85 F1 | 	sub	fp, #8
15d34     1B FA 61 FD | 	getrnd	result1
15d38     A7 FA 61 FC | 	wrlong	result1, fp
15d3c     A7 12 02 F6 | 	mov	arg01, fp
15d40     AC 5D BF FD | 	call	#_push
15d44     FC 00 90 FD | 	jmp	#LR__1766
15d48                 | LR__1761
15d48     0C 5D BF FD | 	call	#_pop
15d4c     A7 FA 61 FC | 	wrlong	result1, fp
15d50     04 4E 05 F1 | 	add	fp, #4
15d54     A7 FC 61 FC | 	wrlong	result2, fp
15d58     04 4E 05 F1 | 	add	fp, #4
15d5c     A7 FE 61 FC | 	wrlong	result3, fp
15d60                 | '   t1=pop()
15d60                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
15d60     08 4E 85 F1 | 	sub	fp, #8
15d64     1C FE 0D F2 | 	cmp	result3, #28 wz
15d68     08 4E 05 51 |  if_ne	add	fp, #8
15d6c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15d70     08 4E 85 51 |  if_ne	sub	fp, #8
15d74     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15d78     2C 00 90 5D |  if_ne	jmp	#LR__1762
15d7c     1B FA 61 FD | 	getrnd	result1
15d80     A7 1E 02 FB | 	rdlong	local01, fp
15d84     0F FB 11 FD | 	qdiv	result1, local01
15d88     A7 12 02 F6 | 	mov	arg01, fp
15d8c     19 1E 62 FD | 	getqy	local01
15d90     A7 1E 62 FC | 	wrlong	local01, fp
15d94     08 4E 05 F1 | 	add	fp, #8
15d98     A7 3A 68 FC | 	wrlong	#29, fp
15d9c     08 4E 85 F1 | 	sub	fp, #8
15da0     4C 5D BF FD | 	call	#_push
15da4     9C 00 90 FD | 	jmp	#LR__1765
15da8                 | LR__1762
15da8     08 4E 05 F1 | 	add	fp, #8
15dac     A7 1E 02 FB | 	rdlong	local01, fp
15db0     08 4E 85 F1 | 	sub	fp, #8
15db4     1E 1E 0E F2 | 	cmp	local01, #30 wz
15db8     48 00 90 5D |  if_ne	jmp	#LR__1763
15dbc     A7 12 02 FB | 	rdlong	arg01, fp
15dc0     00 C0 24 FF 
15dc4     00 14 06 F6 | 	mov	arg02, ##1233125376
15dc8     08 DA B0 FD | 	call	#__system___float_div
15dcc     FD 1E 02 F6 | 	mov	local01, result1
15dd0     1B 12 62 FD | 	getrnd	arg01
15dd4     74 13 06 F4 | 	bitl	arg01, #372
15dd8     F0 D3 B0 FD | 	call	#__system___float_fromuns
15ddc     FD 14 02 F6 | 	mov	arg02, result1
15de0     0F 13 02 F6 | 	mov	arg01, local01
15de4     E8 D7 B0 FD | 	call	#__system___float_mul
15de8     A7 FA 61 FC | 	wrlong	result1, fp
15dec     08 4E 05 F1 | 	add	fp, #8
15df0     A7 3C 68 FC | 	wrlong	#30, fp
15df4     08 4E 85 F1 | 	sub	fp, #8
15df8     A7 12 02 F6 | 	mov	arg01, fp
15dfc     F0 5C BF FD | 	call	#_push
15e00     40 00 90 FD | 	jmp	#LR__1764
15e04                 | LR__1763
15e04                 | '     print "rnd: "; : printerror(40) 
15e04     00 12 06 F6 | 	mov	arg01, #0
15e08     50 06 B1 FD | 	call	#__system___getiolock_0540
15e0c     FD 12 02 F6 | 	mov	arg01, result1
15e10     08 AC B0 FD | 	call	#__system___lockmem
15e14     84 01 00 FF 
15e18     FE 15 06 F6 | 	mov	arg02, ##@LR__5474
15e1c     00 12 06 F6 | 	mov	arg01, #0
15e20     00 16 06 F6 | 	mov	arg03, #0
15e24     E8 B8 B0 FD | 	call	#__system___basic_print_string
15e28     00 12 06 F6 | 	mov	arg01, #0
15e2c     2C 06 B1 FD | 	call	#__system___getiolock_0540
15e30     FD 00 68 FC | 	wrlong	#0, result1
15e34     28 12 06 F6 | 	mov	arg01, #40
15e38     48 76 B0 FD | 	call	#_printerror
15e3c     A7 12 02 F6 | 	mov	arg01, fp
15e40     AC 5C BF FD | 	call	#_push
15e44                 | LR__1764
15e44                 | LR__1765
15e44                 | LR__1766
15e44                 | LR__1767
15e44     A7 F0 03 F6 | 	mov	ptra, fp
15e48     B2 00 A0 FD | 	call	#popregs_
15e4c                 | _do_rnd_ret
15e4c     2D 00 64 FD | 	ret
15e50                 | 
15e50                 | ' 
15e50                 | ' sub do_getenvsustain
15e50                 | _do_getenvsustain
15e50     01 4A 05 F6 | 	mov	COUNT_, #1
15e54     A8 00 A0 FD | 	call	#pushregs_
15e58     10 F0 07 F1 | 	add	ptra, #16
15e5c     4A 00 00 FF 
15e60     80 E4 05 F1 | 	add	objptr, ##38016
15e64     F2 1E 02 FB | 	rdlong	local01, objptr
15e68     0F 17 02 F6 | 	mov	arg03, local01
15e6c     01 16 66 F0 | 	shl	arg03, #1
15e70     0F 17 02 F1 | 	add	arg03, local01
15e74     02 16 66 F0 | 	shl	arg03, #2
15e78     03 00 00 FF 
15e7c     04 E4 85 F1 | 	sub	objptr, ##1540
15e80     F2 16 02 F1 | 	add	arg03, objptr
15e84     0B 17 02 FB | 	rdlong	arg03, arg03
15e88     0C 4E 05 F1 | 	add	fp, #12
15e8c     A7 16 62 FC | 	wrlong	arg03, fp
15e90                 | ' 
15e90                 | ' numpar=compiledline(lineptr_e).result.uresult
15e90                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
15e90     0C 4E 85 F1 | 	sub	fp, #12
15e94     02 16 16 F2 | 	cmp	arg03, #2 wc
15e98     47 00 00 FF 
15e9c     7C E4 85 F1 | 	sub	objptr, ##36476
15ea0     0C 4E 05 C1 |  if_b	add	fp, #12
15ea4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
15ea8     0C 4E 85 C1 |  if_b	sub	fp, #12
15eac     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1770
15eb0     00 12 06 F6 | 	mov	arg01, #0
15eb4     A4 05 B1 FD | 	call	#__system___getiolock_0540
15eb8     FD 12 02 F6 | 	mov	arg01, result1
15ebc     5C AB B0 FD | 	call	#__system___lockmem
15ec0     85 01 00 FF 
15ec4     04 14 06 F6 | 	mov	arg02, ##@LR__5475
15ec8     00 12 06 F6 | 	mov	arg01, #0
15ecc     00 16 06 F6 | 	mov	arg03, #0
15ed0     3C B8 B0 FD | 	call	#__system___basic_print_string
15ed4     00 12 06 F6 | 	mov	arg01, #0
15ed8     80 05 B1 FD | 	call	#__system___getiolock_0540
15edc     FD 00 68 FC | 	wrlong	#0, result1
15ee0     27 12 06 F6 | 	mov	arg01, #39
15ee4     9C 75 B0 FD | 	call	#_printerror
15ee8     64 00 90 FD | 	jmp	#LR__1771
15eec                 | LR__1770
15eec     68 5B BF FD | 	call	#_pop
15ef0     FD 1E 02 F6 | 	mov	local01, result1
15ef4     FE 16 02 F6 | 	mov	arg03, result2
15ef8     A7 1E 62 FC | 	wrlong	local01, fp
15efc     04 4E 05 F1 | 	add	fp, #4
15f00     A7 16 62 FC | 	wrlong	arg03, fp
15f04     04 4E 05 F1 | 	add	fp, #4
15f08     A7 FE 61 FC | 	wrlong	result3, fp
15f0c     08 4E 85 F1 | 	sub	fp, #8
15f10     A7 12 02 F6 | 	mov	arg01, fp
15f14     10 FC BF FD | 	call	#_converttoint
15f18     FD 1E 02 F6 | 	mov	local01, result1
15f1c     01 1E 66 F0 | 	shl	local01, #1
15f20     51 00 00 FF 
15f24     C4 E5 05 F1 | 	add	objptr, ##41924
15f28     F2 1E 02 F1 | 	add	local01, objptr
15f2c     0F 1F E2 FA | 	rdword	local01, local01
15f30     A7 1E 62 FC | 	wrlong	local01, fp
15f34     08 4E 05 F1 | 	add	fp, #8
15f38     A7 38 68 FC | 	wrlong	#28, fp
15f3c     08 4E 85 F1 | 	sub	fp, #8
15f40     A7 12 02 F6 | 	mov	arg01, fp
15f44     51 00 00 FF 
15f48     C4 E5 85 F1 | 	sub	objptr, ##41924
15f4c     A0 5B BF FD | 	call	#_push
15f50                 | LR__1771
15f50     A7 F0 03 F6 | 	mov	ptra, fp
15f54     B2 00 A0 FD | 	call	#popregs_
15f58                 | _do_getenvsustain_ret
15f58     2D 00 64 FD | 	ret
15f5c                 | 
15f5c                 | ' 
15f5c                 | ' sub do_sin
15f5c                 | _do_sin
15f5c     01 4A 05 F6 | 	mov	COUNT_, #1
15f60     A8 00 A0 FD | 	call	#pushregs_
15f64     10 F0 07 F1 | 	add	ptra, #16
15f68     4A 00 00 FF 
15f6c     80 E4 05 F1 | 	add	objptr, ##38016
15f70     F2 1E 02 FB | 	rdlong	local01, objptr
15f74     0F 17 02 F6 | 	mov	arg03, local01
15f78     01 16 66 F0 | 	shl	arg03, #1
15f7c     0F 17 02 F1 | 	add	arg03, local01
15f80     02 16 66 F0 | 	shl	arg03, #2
15f84     03 00 00 FF 
15f88     04 E4 85 F1 | 	sub	objptr, ##1540
15f8c     F2 16 02 F1 | 	add	arg03, objptr
15f90     0B 17 02 FB | 	rdlong	arg03, arg03
15f94     0C 4E 05 F1 | 	add	fp, #12
15f98     A7 16 62 FC | 	wrlong	arg03, fp
15f9c                 | ' 
15f9c                 | ' numpar=compiledline(lineptr_e).result.uresult
15f9c                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
15f9c     0C 4E 85 F1 | 	sub	fp, #12
15fa0     02 16 16 F2 | 	cmp	arg03, #2 wc
15fa4     47 00 00 FF 
15fa8     7C E4 85 F1 | 	sub	objptr, ##36476
15fac     0C 4E 05 C1 |  if_b	add	fp, #12
15fb0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
15fb4     0C 4E 85 C1 |  if_b	sub	fp, #12
15fb8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1780
15fbc     00 12 06 F6 | 	mov	arg01, #0
15fc0     98 04 B1 FD | 	call	#__system___getiolock_0540
15fc4     FD 12 02 F6 | 	mov	arg01, result1
15fc8     50 AA B0 FD | 	call	#__system___lockmem
15fcc     85 01 00 FF 
15fd0     14 14 06 F6 | 	mov	arg02, ##@LR__5476
15fd4     00 12 06 F6 | 	mov	arg01, #0
15fd8     00 16 06 F6 | 	mov	arg03, #0
15fdc     30 B7 B0 FD | 	call	#__system___basic_print_string
15fe0     00 12 06 F6 | 	mov	arg01, #0
15fe4     74 04 B1 FD | 	call	#__system___getiolock_0540
15fe8     FD 00 68 FC | 	wrlong	#0, result1
15fec     27 12 06 F6 | 	mov	arg01, #39
15ff0     90 74 B0 FD | 	call	#_printerror
15ff4     64 00 90 FD | 	jmp	#LR__1781
15ff8                 | LR__1780
15ff8     5C 5A BF FD | 	call	#_pop
15ffc     A7 FA 61 FC | 	wrlong	result1, fp
16000     04 4E 05 F1 | 	add	fp, #4
16004     A7 FC 61 FC | 	wrlong	result2, fp
16008     04 4E 05 F1 | 	add	fp, #4
1600c     A7 FE 61 FC | 	wrlong	result3, fp
16010     08 4E 85 F1 | 	sub	fp, #8
16014     51 00 00 FF 
16018     B8 E5 05 F1 | 	add	objptr, ##41912
1601c     F2 1E 02 FB | 	rdlong	local01, objptr
16020     51 00 00 FF 
16024     B8 E5 85 F1 | 	sub	objptr, ##41912
16028     A7 12 02 F6 | 	mov	arg01, fp
1602c     B4 FB BF FD | 	call	#_converttofloat
16030     FD 14 02 F6 | 	mov	arg02, result1
16034     0F 13 02 F6 | 	mov	arg01, local01
16038     94 D5 B0 FD | 	call	#__system___float_mul
1603c     FD 12 02 F6 | 	mov	arg01, result1
16040     C8 DE B0 FD | 	call	#__system____builtin_sinf
16044     A7 FA 61 FC | 	wrlong	result1, fp
16048     08 4E 05 F1 | 	add	fp, #8
1604c     A7 3C 68 FC | 	wrlong	#30, fp
16050     08 4E 85 F1 | 	sub	fp, #8
16054     A7 12 02 F6 | 	mov	arg01, fp
16058     94 5A BF FD | 	call	#_push
1605c                 | LR__1781
1605c     A7 F0 03 F6 | 	mov	ptra, fp
16060     B2 00 A0 FD | 	call	#popregs_
16064                 | _do_sin_ret
16064     2D 00 64 FD | 	ret
16068                 | 
16068                 | ' 
16068                 | ' 
16068                 | ' sub do_mid
16068                 | _do_mid
16068     00 4A 05 F6 | 	mov	COUNT_, #0
1606c     A8 00 A0 FD | 	call	#pushregs_
16070     18 F0 07 F1 | 	add	ptra, #24
16074     4A 00 00 FF 
16078     80 E4 05 F1 | 	add	objptr, ##38016
1607c     F2 16 02 FB | 	rdlong	arg03, objptr
16080     0B 15 02 F6 | 	mov	arg02, arg03
16084     01 14 66 F0 | 	shl	arg02, #1
16088     0B 15 02 F1 | 	add	arg02, arg03
1608c     02 14 66 F0 | 	shl	arg02, #2
16090     03 00 00 FF 
16094     04 E4 85 F1 | 	sub	objptr, ##1540
16098     F2 14 02 F1 | 	add	arg02, objptr
1609c     0A 17 02 FB | 	rdlong	arg03, arg02
160a0     0C 4E 05 F1 | 	add	fp, #12
160a4     A7 16 62 FC | 	wrlong	arg03, fp
160a8                 | ' 
160a8                 | ' numpar=compiledline(lineptr_e).result.uresult
160a8                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
160a8     0C 4E 85 F1 | 	sub	fp, #12
160ac     03 16 0E F2 | 	cmp	arg03, #3 wz
160b0     47 00 00 FF 
160b4     7C E4 85 F1 | 	sub	objptr, ##36476
160b8     3C 00 90 AD |  if_e	jmp	#LR__1790
160bc     00 12 06 F6 | 	mov	arg01, #0
160c0     98 03 B1 FD | 	call	#__system___getiolock_0540
160c4     FD 12 02 F6 | 	mov	arg01, result1
160c8     50 A9 B0 FD | 	call	#__system___lockmem
160cc     85 01 00 FF 
160d0     1A 14 06 F6 | 	mov	arg02, ##@LR__5477
160d4     00 12 06 F6 | 	mov	arg01, #0
160d8     00 16 06 F6 | 	mov	arg03, #0
160dc     30 B6 B0 FD | 	call	#__system___basic_print_string
160e0     00 12 06 F6 | 	mov	arg01, #0
160e4     74 03 B1 FD | 	call	#__system___getiolock_0540
160e8     FD 00 68 FC | 	wrlong	#0, result1
160ec     27 12 06 F6 | 	mov	arg01, #39
160f0     90 73 B0 FD | 	call	#_printerror
160f4     28 01 90 FD | 	jmp	#LR__1793
160f8                 | LR__1790
160f8     5C 59 BF FD | 	call	#_pop
160fc     FF 16 02 F6 | 	mov	arg03, result3
16100     A7 FA 61 FC | 	wrlong	result1, fp
16104     04 4E 05 F1 | 	add	fp, #4
16108     A7 FC 61 FC | 	wrlong	result2, fp
1610c     04 4E 05 F1 | 	add	fp, #4
16110     A7 16 62 FC | 	wrlong	arg03, fp
16114     08 4E 85 F1 | 	sub	fp, #8
16118     A7 12 02 F6 | 	mov	arg01, fp
1611c     08 FA BF FD | 	call	#_converttoint
16120     FD 16 02 F6 | 	mov	arg03, result1
16124     14 4E 05 F1 | 	add	fp, #20
16128     A7 16 62 FC | 	wrlong	arg03, fp
1612c     14 4E 85 F1 | 	sub	fp, #20
16130     24 59 BF FD | 	call	#_pop
16134     FF 16 02 F6 | 	mov	arg03, result3
16138     A7 FA 61 FC | 	wrlong	result1, fp
1613c     04 4E 05 F1 | 	add	fp, #4
16140     A7 FC 61 FC | 	wrlong	result2, fp
16144     04 4E 05 F1 | 	add	fp, #4
16148     A7 16 62 FC | 	wrlong	arg03, fp
1614c     08 4E 85 F1 | 	sub	fp, #8
16150     A7 12 02 F6 | 	mov	arg01, fp
16154     D0 F9 BF FD | 	call	#_converttoint
16158     FD 16 02 F6 | 	mov	arg03, result1
1615c     10 4E 05 F1 | 	add	fp, #16
16160     A7 16 62 FC | 	wrlong	arg03, fp
16164     10 4E 85 F1 | 	sub	fp, #16
16168     EC 58 BF FD | 	call	#_pop
1616c     FF 16 02 F6 | 	mov	arg03, result3
16170     A7 FA 61 FC | 	wrlong	result1, fp
16174     04 4E 05 F1 | 	add	fp, #4
16178     A7 FC 61 FC | 	wrlong	result2, fp
1617c     04 4E 05 F1 | 	add	fp, #4
16180     A7 16 62 FC | 	wrlong	arg03, fp
16184                 | ' t1=pop() : arg2=converttoint(t1)
16184                 | ' t1=pop() : arg1=converttoint(t1)
16184                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16184     08 4E 85 F1 | 	sub	fp, #8
16188     2B 16 0E F2 | 	cmp	arg03, #43 wz
1618c     18 00 90 5D |  if_ne	jmp	#LR__1791
16190     A7 12 02 FB | 	rdlong	arg01, fp
16194     6C B1 BF FD | 	call	#_convertstring
16198     A7 FA 61 FC | 	wrlong	result1, fp
1619c     08 4E 05 F1 | 	add	fp, #8
161a0     A7 3E 68 FC | 	wrlong	#31, fp
161a4     08 4E 85 F1 | 	sub	fp, #8
161a8                 | LR__1791
161a8                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
161a8     08 4E 05 F1 | 	add	fp, #8
161ac     A7 16 02 FB | 	rdlong	arg03, fp
161b0     08 4E 85 F1 | 	sub	fp, #8
161b4     1F 16 0E F2 | 	cmp	arg03, #31 wz
161b8     3C 00 90 AD |  if_e	jmp	#LR__1792
161bc     00 12 06 F6 | 	mov	arg01, #0
161c0     98 02 B1 FD | 	call	#__system___getiolock_0540
161c4     FD 12 02 F6 | 	mov	arg01, result1
161c8     50 A8 B0 FD | 	call	#__system___lockmem
161cc     85 01 00 FF 
161d0     21 14 06 F6 | 	mov	arg02, ##@LR__5478
161d4     00 12 06 F6 | 	mov	arg01, #0
161d8     00 16 06 F6 | 	mov	arg03, #0
161dc     30 B5 B0 FD | 	call	#__system___basic_print_string
161e0     00 12 06 F6 | 	mov	arg01, #0
161e4     74 02 B1 FD | 	call	#__system___getiolock_0540
161e8     FD 00 68 FC | 	wrlong	#0, result1
161ec     0F 12 06 F6 | 	mov	arg01, #15
161f0     90 72 B0 FD | 	call	#_printerror
161f4     28 00 90 FD | 	jmp	#LR__1793
161f8                 | LR__1792
161f8     A7 12 02 FB | 	rdlong	arg01, fp
161fc     10 4E 05 F1 | 	add	fp, #16
16200     A7 14 02 FB | 	rdlong	arg02, fp
16204     04 4E 05 F1 | 	add	fp, #4
16208     A7 16 02 FB | 	rdlong	arg03, fp
1620c     14 4E 85 F1 | 	sub	fp, #20
16210     9C C9 B0 FD | 	call	#__system__Mid_S
16214     A7 FA 61 FC | 	wrlong	result1, fp
16218     A7 12 02 F6 | 	mov	arg01, fp
1621c     D0 58 BF FD | 	call	#_push
16220                 | LR__1793
16220     A7 F0 03 F6 | 	mov	ptra, fp
16224     B2 00 A0 FD | 	call	#popregs_
16228                 | _do_mid_ret
16228     2D 00 64 FD | 	ret
1622c                 | 
1622c                 | ' 
1622c                 | ' sub do_right
1622c                 | _do_right
1622c     00 4A 05 F6 | 	mov	COUNT_, #0
16230     A8 00 A0 FD | 	call	#pushregs_
16234     14 F0 07 F1 | 	add	ptra, #20
16238     4A 00 00 FF 
1623c     80 E4 05 F1 | 	add	objptr, ##38016
16240     F2 16 02 FB | 	rdlong	arg03, objptr
16244     0B 15 02 F6 | 	mov	arg02, arg03
16248     01 14 66 F0 | 	shl	arg02, #1
1624c     0B 15 02 F1 | 	add	arg02, arg03
16250     02 14 66 F0 | 	shl	arg02, #2
16254     03 00 00 FF 
16258     04 E4 85 F1 | 	sub	objptr, ##1540
1625c     F2 14 02 F1 | 	add	arg02, objptr
16260     0A 17 02 FB | 	rdlong	arg03, arg02
16264     0C 4E 05 F1 | 	add	fp, #12
16268     A7 16 62 FC | 	wrlong	arg03, fp
1626c                 | ' 
1626c                 | ' numpar=compiledline(lineptr_e).result.uresult
1626c                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
1626c     0C 4E 85 F1 | 	sub	fp, #12
16270     02 16 0E F2 | 	cmp	arg03, #2 wz
16274     47 00 00 FF 
16278     7C E4 85 F1 | 	sub	objptr, ##36476
1627c     3C 00 90 AD |  if_e	jmp	#LR__1800
16280     00 12 06 F6 | 	mov	arg01, #0
16284     D4 01 B1 FD | 	call	#__system___getiolock_0540
16288     FD 12 02 F6 | 	mov	arg01, result1
1628c     8C A7 B0 FD | 	call	#__system___lockmem
16290     85 01 00 FF 
16294     28 14 06 F6 | 	mov	arg02, ##@LR__5479
16298     00 12 06 F6 | 	mov	arg01, #0
1629c     00 16 06 F6 | 	mov	arg03, #0
162a0     6C B4 B0 FD | 	call	#__system___basic_print_string
162a4     00 12 06 F6 | 	mov	arg01, #0
162a8     B0 01 B1 FD | 	call	#__system___getiolock_0540
162ac     FD 00 68 FC | 	wrlong	#0, result1
162b0     27 12 06 F6 | 	mov	arg01, #39
162b4     CC 71 B0 FD | 	call	#_printerror
162b8     E8 00 90 FD | 	jmp	#LR__1803
162bc                 | LR__1800
162bc     98 57 BF FD | 	call	#_pop
162c0     FF 16 02 F6 | 	mov	arg03, result3
162c4     A7 FA 61 FC | 	wrlong	result1, fp
162c8     04 4E 05 F1 | 	add	fp, #4
162cc     A7 FC 61 FC | 	wrlong	result2, fp
162d0     04 4E 05 F1 | 	add	fp, #4
162d4     A7 16 62 FC | 	wrlong	arg03, fp
162d8     08 4E 85 F1 | 	sub	fp, #8
162dc     A7 12 02 F6 | 	mov	arg01, fp
162e0     44 F8 BF FD | 	call	#_converttoint
162e4     FD 16 02 F6 | 	mov	arg03, result1
162e8     10 4E 05 F1 | 	add	fp, #16
162ec     A7 16 62 FC | 	wrlong	arg03, fp
162f0     10 4E 85 F1 | 	sub	fp, #16
162f4     60 57 BF FD | 	call	#_pop
162f8     FF 16 02 F6 | 	mov	arg03, result3
162fc     A7 FA 61 FC | 	wrlong	result1, fp
16300     04 4E 05 F1 | 	add	fp, #4
16304     A7 FC 61 FC | 	wrlong	result2, fp
16308     04 4E 05 F1 | 	add	fp, #4
1630c     A7 16 62 FC | 	wrlong	arg03, fp
16310                 | ' t1=pop() : arg=converttoint(t1)
16310                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16310     08 4E 85 F1 | 	sub	fp, #8
16314     2B 16 0E F2 | 	cmp	arg03, #43 wz
16318     18 00 90 5D |  if_ne	jmp	#LR__1801
1631c     A7 12 02 FB | 	rdlong	arg01, fp
16320     E0 AF BF FD | 	call	#_convertstring
16324     A7 FA 61 FC | 	wrlong	result1, fp
16328     08 4E 05 F1 | 	add	fp, #8
1632c     A7 3E 68 FC | 	wrlong	#31, fp
16330     08 4E 85 F1 | 	sub	fp, #8
16334                 | LR__1801
16334                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
16334     08 4E 05 F1 | 	add	fp, #8
16338     A7 16 02 FB | 	rdlong	arg03, fp
1633c     08 4E 85 F1 | 	sub	fp, #8
16340     1F 16 0E F2 | 	cmp	arg03, #31 wz
16344     3C 00 90 AD |  if_e	jmp	#LR__1802
16348     00 12 06 F6 | 	mov	arg01, #0
1634c     0C 01 B1 FD | 	call	#__system___getiolock_0540
16350     FD 12 02 F6 | 	mov	arg01, result1
16354     C4 A6 B0 FD | 	call	#__system___lockmem
16358     85 01 00 FF 
1635c     31 14 06 F6 | 	mov	arg02, ##@LR__5480
16360     00 12 06 F6 | 	mov	arg01, #0
16364     00 16 06 F6 | 	mov	arg03, #0
16368     A4 B3 B0 FD | 	call	#__system___basic_print_string
1636c     00 12 06 F6 | 	mov	arg01, #0
16370     E8 00 B1 FD | 	call	#__system___getiolock_0540
16374     FD 00 68 FC | 	wrlong	#0, result1
16378     0F 12 06 F6 | 	mov	arg01, #15
1637c     04 71 B0 FD | 	call	#_printerror
16380     20 00 90 FD | 	jmp	#LR__1803
16384                 | LR__1802
16384     A7 12 02 FB | 	rdlong	arg01, fp
16388     10 4E 05 F1 | 	add	fp, #16
1638c     A7 14 02 FB | 	rdlong	arg02, fp
16390     10 4E 85 F1 | 	sub	fp, #16
16394     88 C7 B0 FD | 	call	#__system__Right_S
16398     A7 FA 61 FC | 	wrlong	result1, fp
1639c     A7 12 02 F6 | 	mov	arg01, fp
163a0     4C 57 BF FD | 	call	#_push
163a4                 | LR__1803
163a4     A7 F0 03 F6 | 	mov	ptra, fp
163a8     B2 00 A0 FD | 	call	#popregs_
163ac                 | _do_right_ret
163ac     2D 00 64 FD | 	ret
163b0                 | 
163b0                 | ' 
163b0                 | ' sub do_left
163b0                 | _do_left
163b0     00 4A 05 F6 | 	mov	COUNT_, #0
163b4     A8 00 A0 FD | 	call	#pushregs_
163b8     14 F0 07 F1 | 	add	ptra, #20
163bc     4A 00 00 FF 
163c0     80 E4 05 F1 | 	add	objptr, ##38016
163c4     F2 16 02 FB | 	rdlong	arg03, objptr
163c8     0B 15 02 F6 | 	mov	arg02, arg03
163cc     01 14 66 F0 | 	shl	arg02, #1
163d0     0B 15 02 F1 | 	add	arg02, arg03
163d4     02 14 66 F0 | 	shl	arg02, #2
163d8     03 00 00 FF 
163dc     04 E4 85 F1 | 	sub	objptr, ##1540
163e0     F2 14 02 F1 | 	add	arg02, objptr
163e4     0A 17 02 FB | 	rdlong	arg03, arg02
163e8     0C 4E 05 F1 | 	add	fp, #12
163ec     A7 16 62 FC | 	wrlong	arg03, fp
163f0                 | ' 
163f0                 | ' numpar=compiledline(lineptr_e).result.uresult
163f0                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
163f0     0C 4E 85 F1 | 	sub	fp, #12
163f4     02 16 0E F2 | 	cmp	arg03, #2 wz
163f8     47 00 00 FF 
163fc     7C E4 85 F1 | 	sub	objptr, ##36476
16400     3C 00 90 AD |  if_e	jmp	#LR__1810
16404     00 12 06 F6 | 	mov	arg01, #0
16408     50 00 B1 FD | 	call	#__system___getiolock_0540
1640c     FD 12 02 F6 | 	mov	arg01, result1
16410     08 A6 B0 FD | 	call	#__system___lockmem
16414     85 01 00 FF 
16418     3A 14 06 F6 | 	mov	arg02, ##@LR__5481
1641c     00 12 06 F6 | 	mov	arg01, #0
16420     00 16 06 F6 | 	mov	arg03, #0
16424     E8 B2 B0 FD | 	call	#__system___basic_print_string
16428     00 12 06 F6 | 	mov	arg01, #0
1642c     2C 00 B1 FD | 	call	#__system___getiolock_0540
16430     FD 00 68 FC | 	wrlong	#0, result1
16434     27 12 06 F6 | 	mov	arg01, #39
16438     48 70 B0 FD | 	call	#_printerror
1643c     E8 00 90 FD | 	jmp	#LR__1813
16440                 | LR__1810
16440     14 56 BF FD | 	call	#_pop
16444     FF 16 02 F6 | 	mov	arg03, result3
16448     A7 FA 61 FC | 	wrlong	result1, fp
1644c     04 4E 05 F1 | 	add	fp, #4
16450     A7 FC 61 FC | 	wrlong	result2, fp
16454     04 4E 05 F1 | 	add	fp, #4
16458     A7 16 62 FC | 	wrlong	arg03, fp
1645c     08 4E 85 F1 | 	sub	fp, #8
16460     A7 12 02 F6 | 	mov	arg01, fp
16464     C0 F6 BF FD | 	call	#_converttoint
16468     FD 16 02 F6 | 	mov	arg03, result1
1646c     10 4E 05 F1 | 	add	fp, #16
16470     A7 16 62 FC | 	wrlong	arg03, fp
16474     10 4E 85 F1 | 	sub	fp, #16
16478     DC 55 BF FD | 	call	#_pop
1647c     FF 16 02 F6 | 	mov	arg03, result3
16480     A7 FA 61 FC | 	wrlong	result1, fp
16484     04 4E 05 F1 | 	add	fp, #4
16488     A7 FC 61 FC | 	wrlong	result2, fp
1648c     04 4E 05 F1 | 	add	fp, #4
16490     A7 16 62 FC | 	wrlong	arg03, fp
16494                 | ' t1=pop() : arg=converttoint(t1)
16494                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16494     08 4E 85 F1 | 	sub	fp, #8
16498     2B 16 0E F2 | 	cmp	arg03, #43 wz
1649c     18 00 90 5D |  if_ne	jmp	#LR__1811
164a0     A7 12 02 FB | 	rdlong	arg01, fp
164a4     5C AE BF FD | 	call	#_convertstring
164a8     A7 FA 61 FC | 	wrlong	result1, fp
164ac     08 4E 05 F1 | 	add	fp, #8
164b0     A7 3E 68 FC | 	wrlong	#31, fp
164b4     08 4E 85 F1 | 	sub	fp, #8
164b8                 | LR__1811
164b8                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
164b8     08 4E 05 F1 | 	add	fp, #8
164bc     A7 16 02 FB | 	rdlong	arg03, fp
164c0     08 4E 85 F1 | 	sub	fp, #8
164c4     1F 16 0E F2 | 	cmp	arg03, #31 wz
164c8     3C 00 90 AD |  if_e	jmp	#LR__1812
164cc     00 12 06 F6 | 	mov	arg01, #0
164d0     88 FF B0 FD | 	call	#__system___getiolock_0540
164d4     FD 12 02 F6 | 	mov	arg01, result1
164d8     40 A5 B0 FD | 	call	#__system___lockmem
164dc     85 01 00 FF 
164e0     42 14 06 F6 | 	mov	arg02, ##@LR__5482
164e4     00 12 06 F6 | 	mov	arg01, #0
164e8     00 16 06 F6 | 	mov	arg03, #0
164ec     20 B2 B0 FD | 	call	#__system___basic_print_string
164f0     00 12 06 F6 | 	mov	arg01, #0
164f4     64 FF B0 FD | 	call	#__system___getiolock_0540
164f8     FD 00 68 FC | 	wrlong	#0, result1
164fc     0F 12 06 F6 | 	mov	arg01, #15
16500     80 6F B0 FD | 	call	#_printerror
16504     20 00 90 FD | 	jmp	#LR__1813
16508                 | LR__1812
16508     A7 12 02 FB | 	rdlong	arg01, fp
1650c     10 4E 05 F1 | 	add	fp, #16
16510     A7 14 02 FB | 	rdlong	arg02, fp
16514     10 4E 85 F1 | 	sub	fp, #16
16518     7C C5 B0 FD | 	call	#__system__Left_S
1651c     A7 FA 61 FC | 	wrlong	result1, fp
16520     A7 12 02 F6 | 	mov	arg01, fp
16524     C8 55 BF FD | 	call	#_push
16528                 | LR__1813
16528     A7 F0 03 F6 | 	mov	ptra, fp
1652c     B2 00 A0 FD | 	call	#popregs_
16530                 | _do_left_ret
16530     2D 00 64 FD | 	ret
16534                 | 
16534                 | ' 
16534                 | ' sub do_asc
16534                 | _do_asc
16534     01 4A 05 F6 | 	mov	COUNT_, #1
16538     A8 00 A0 FD | 	call	#pushregs_
1653c     14 F0 07 F1 | 	add	ptra, #20
16540     4A 00 00 FF 
16544     80 E4 05 F1 | 	add	objptr, ##38016
16548     F2 1E 02 FB | 	rdlong	local01, objptr
1654c     0F 17 02 F6 | 	mov	arg03, local01
16550     01 16 66 F0 | 	shl	arg03, #1
16554     0F 17 02 F1 | 	add	arg03, local01
16558     02 16 66 F0 | 	shl	arg03, #2
1655c     03 00 00 FF 
16560     04 E4 85 F1 | 	sub	objptr, ##1540
16564     F2 16 02 F1 | 	add	arg03, objptr
16568     0B 17 02 FB | 	rdlong	arg03, arg03
1656c     0C 4E 05 F1 | 	add	fp, #12
16570     A7 16 62 FC | 	wrlong	arg03, fp
16574                 | ' 
16574                 | ' numpar=compiledline(lineptr_e).result.uresult
16574                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
16574     0C 4E 85 F1 | 	sub	fp, #12
16578     02 16 16 F2 | 	cmp	arg03, #2 wc
1657c     47 00 00 FF 
16580     7C E4 85 F1 | 	sub	objptr, ##36476
16584     0C 4E 05 C1 |  if_b	add	fp, #12
16588     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1658c     0C 4E 85 C1 |  if_b	sub	fp, #12
16590     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1820
16594     00 12 06 F6 | 	mov	arg01, #0
16598     C0 FE B0 FD | 	call	#__system___getiolock_0540
1659c     FD 12 02 F6 | 	mov	arg01, result1
165a0     78 A4 B0 FD | 	call	#__system___lockmem
165a4     85 01 00 FF 
165a8     4A 14 06 F6 | 	mov	arg02, ##@LR__5483
165ac     00 12 06 F6 | 	mov	arg01, #0
165b0     00 16 06 F6 | 	mov	arg03, #0
165b4     58 B1 B0 FD | 	call	#__system___basic_print_string
165b8     00 12 06 F6 | 	mov	arg01, #0
165bc     9C FE B0 FD | 	call	#__system___getiolock_0540
165c0     FD 00 68 FC | 	wrlong	#0, result1
165c4     27 12 06 F6 | 	mov	arg01, #39
165c8     B8 6E B0 FD | 	call	#_printerror
165cc     B0 00 90 FD | 	jmp	#LR__1823
165d0                 | LR__1820
165d0     84 54 BF FD | 	call	#_pop
165d4     FF 16 02 F6 | 	mov	arg03, result3
165d8     A7 FA 61 FC | 	wrlong	result1, fp
165dc     04 4E 05 F1 | 	add	fp, #4
165e0     A7 FC 61 FC | 	wrlong	result2, fp
165e4     04 4E 05 F1 | 	add	fp, #4
165e8     A7 16 62 FC | 	wrlong	arg03, fp
165ec                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
165ec     08 4E 85 F1 | 	sub	fp, #8
165f0     2B 16 0E F2 | 	cmp	arg03, #43 wz
165f4     18 00 90 5D |  if_ne	jmp	#LR__1821
165f8     A7 12 02 FB | 	rdlong	arg01, fp
165fc     04 AD BF FD | 	call	#_convertstring
16600     A7 FA 61 FC | 	wrlong	result1, fp
16604     08 4E 05 F1 | 	add	fp, #8
16608     A7 3E 68 FC | 	wrlong	#31, fp
1660c     08 4E 85 F1 | 	sub	fp, #8
16610                 | LR__1821
16610                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
16610     08 4E 05 F1 | 	add	fp, #8
16614     A7 16 02 FB | 	rdlong	arg03, fp
16618     08 4E 85 F1 | 	sub	fp, #8
1661c     1F 16 0E F2 | 	cmp	arg03, #31 wz
16620     3C 00 90 AD |  if_e	jmp	#LR__1822
16624     00 12 06 F6 | 	mov	arg01, #0
16628     30 FE B0 FD | 	call	#__system___getiolock_0540
1662c     FD 12 02 F6 | 	mov	arg01, result1
16630     E8 A3 B0 FD | 	call	#__system___lockmem
16634     85 01 00 FF 
16638     50 14 06 F6 | 	mov	arg02, ##@LR__5484
1663c     00 12 06 F6 | 	mov	arg01, #0
16640     00 16 06 F6 | 	mov	arg03, #0
16644     C8 B0 B0 FD | 	call	#__system___basic_print_string
16648     00 12 06 F6 | 	mov	arg01, #0
1664c     0C FE B0 FD | 	call	#__system___getiolock_0540
16650     FD 00 68 FC | 	wrlong	#0, result1
16654     0F 12 06 F6 | 	mov	arg01, #15
16658     28 6E B0 FD | 	call	#_printerror
1665c     20 00 90 FD | 	jmp	#LR__1823
16660                 | LR__1822
16660     A7 1E 02 FB | 	rdlong	local01, fp
16664     0F 1F C2 FA | 	rdbyte	local01, local01
16668     A7 1E 62 FC | 	wrlong	local01, fp
1666c     08 4E 05 F1 | 	add	fp, #8
16670     A7 38 68 FC | 	wrlong	#28, fp
16674     08 4E 85 F1 | 	sub	fp, #8
16678     A7 12 02 F6 | 	mov	arg01, fp
1667c     70 54 BF FD | 	call	#_push
16680                 | LR__1823
16680     A7 F0 03 F6 | 	mov	ptra, fp
16684     B2 00 A0 FD | 	call	#popregs_
16688                 | _do_asc_ret
16688     2D 00 64 FD | 	ret
1668c                 | 
1668c                 | ' 
1668c                 | ' sub do_len
1668c                 | _do_len
1668c     02 4A 05 F6 | 	mov	COUNT_, #2
16690     A8 00 A0 FD | 	call	#pushregs_
16694     14 F0 07 F1 | 	add	ptra, #20
16698     4A 00 00 FF 
1669c     80 E4 05 F1 | 	add	objptr, ##38016
166a0     F2 1E 02 FB | 	rdlong	local01, objptr
166a4     0F 17 02 F6 | 	mov	arg03, local01
166a8     01 16 66 F0 | 	shl	arg03, #1
166ac     0F 17 02 F1 | 	add	arg03, local01
166b0     02 16 66 F0 | 	shl	arg03, #2
166b4     03 00 00 FF 
166b8     04 E4 85 F1 | 	sub	objptr, ##1540
166bc     F2 16 02 F1 | 	add	arg03, objptr
166c0     0B 17 02 FB | 	rdlong	arg03, arg03
166c4     0C 4E 05 F1 | 	add	fp, #12
166c8     A7 16 62 FC | 	wrlong	arg03, fp
166cc                 | ' 
166cc                 | ' numpar=compiledline(lineptr_e).result.uresult
166cc                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
166cc     0C 4E 85 F1 | 	sub	fp, #12
166d0     02 16 16 F2 | 	cmp	arg03, #2 wc
166d4     47 00 00 FF 
166d8     7C E4 85 F1 | 	sub	objptr, ##36476
166dc     0C 4E 05 C1 |  if_b	add	fp, #12
166e0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
166e4     0C 4E 85 C1 |  if_b	sub	fp, #12
166e8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1830
166ec     00 12 06 F6 | 	mov	arg01, #0
166f0     68 FD B0 FD | 	call	#__system___getiolock_0540
166f4     FD 12 02 F6 | 	mov	arg01, result1
166f8     20 A3 B0 FD | 	call	#__system___lockmem
166fc     85 01 00 FF 
16700     56 14 06 F6 | 	mov	arg02, ##@LR__5485
16704     00 12 06 F6 | 	mov	arg01, #0
16708     00 16 06 F6 | 	mov	arg03, #0
1670c     00 B0 B0 FD | 	call	#__system___basic_print_string
16710     00 12 06 F6 | 	mov	arg01, #0
16714     44 FD B0 FD | 	call	#__system___getiolock_0540
16718     FD 00 68 FC | 	wrlong	#0, result1
1671c     27 12 06 F6 | 	mov	arg01, #39
16720     60 6D B0 FD | 	call	#_printerror
16724     C4 00 90 FD | 	jmp	#LR__1835
16728                 | LR__1830
16728     2C 53 BF FD | 	call	#_pop
1672c     FF 16 02 F6 | 	mov	arg03, result3
16730     A7 FA 61 FC | 	wrlong	result1, fp
16734     04 4E 05 F1 | 	add	fp, #4
16738     A7 FC 61 FC | 	wrlong	result2, fp
1673c     04 4E 05 F1 | 	add	fp, #4
16740     A7 16 62 FC | 	wrlong	arg03, fp
16744                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16744     08 4E 85 F1 | 	sub	fp, #8
16748     2B 16 0E F2 | 	cmp	arg03, #43 wz
1674c     18 00 90 5D |  if_ne	jmp	#LR__1831
16750     A7 12 02 FB | 	rdlong	arg01, fp
16754     AC AB BF FD | 	call	#_convertstring
16758     A7 FA 61 FC | 	wrlong	result1, fp
1675c     08 4E 05 F1 | 	add	fp, #8
16760     A7 3E 68 FC | 	wrlong	#31, fp
16764     08 4E 85 F1 | 	sub	fp, #8
16768                 | LR__1831
16768                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
16768     08 4E 05 F1 | 	add	fp, #8
1676c     A7 16 02 FB | 	rdlong	arg03, fp
16770     08 4E 85 F1 | 	sub	fp, #8
16774     1F 16 0E F2 | 	cmp	arg03, #31 wz
16778     3C 00 90 AD |  if_e	jmp	#LR__1832
1677c     00 12 06 F6 | 	mov	arg01, #0
16780     D8 FC B0 FD | 	call	#__system___getiolock_0540
16784     FD 12 02 F6 | 	mov	arg01, result1
16788     90 A2 B0 FD | 	call	#__system___lockmem
1678c     85 01 00 FF 
16790     5C 14 06 F6 | 	mov	arg02, ##@LR__5486
16794     00 12 06 F6 | 	mov	arg01, #0
16798     00 16 06 F6 | 	mov	arg03, #0
1679c     70 AF B0 FD | 	call	#__system___basic_print_string
167a0     00 12 06 F6 | 	mov	arg01, #0
167a4     B4 FC B0 FD | 	call	#__system___getiolock_0540
167a8     FD 00 68 FC | 	wrlong	#0, result1
167ac     0F 12 06 F6 | 	mov	arg01, #15
167b0     D0 6C B0 FD | 	call	#_printerror
167b4     34 00 90 FD | 	jmp	#LR__1835
167b8                 | LR__1832
167b8     A7 12 02 FB | 	rdlong	arg01, fp
167bc     09 21 02 F6 | 	mov	local02, arg01
167c0     97 06 48 FB | 	callpa	#(@LR__1834-@LR__1833)>>2,fcache_load_ptr_
167c4                 | LR__1833
167c4     10 FB C9 FA | 	rdbyte	result1, local02 wz
167c8     01 20 06 51 |  if_ne	add	local02, #1
167cc     F4 FF 9F 5D |  if_ne	jmp	#LR__1833
167d0                 | LR__1834
167d0     09 21 82 F1 | 	sub	local02, arg01
167d4     A7 20 62 FC | 	wrlong	local02, fp
167d8     08 4E 05 F1 | 	add	fp, #8
167dc     A7 38 68 FC | 	wrlong	#28, fp
167e0     08 4E 85 F1 | 	sub	fp, #8
167e4     A7 12 02 F6 | 	mov	arg01, fp
167e8     04 53 BF FD | 	call	#_push
167ec                 | LR__1835
167ec     A7 F0 03 F6 | 	mov	ptra, fp
167f0     B2 00 A0 FD | 	call	#popregs_
167f4                 | _do_len_ret
167f4     2D 00 64 FD | 	ret
167f8                 | 
167f8                 | ' 
167f8                 | ' sub do_chr
167f8                 | _do_chr
167f8     01 4A 05 F6 | 	mov	COUNT_, #1
167fc     A8 00 A0 FD | 	call	#pushregs_
16800     14 F0 07 F1 | 	add	ptra, #20
16804     4A 00 00 FF 
16808     80 E4 05 F1 | 	add	objptr, ##38016
1680c     F2 1E 02 FB | 	rdlong	local01, objptr
16810     0F 17 02 F6 | 	mov	arg03, local01
16814     01 16 66 F0 | 	shl	arg03, #1
16818     0F 17 02 F1 | 	add	arg03, local01
1681c     02 16 66 F0 | 	shl	arg03, #2
16820     03 00 00 FF 
16824     04 E4 85 F1 | 	sub	objptr, ##1540
16828     F2 16 02 F1 | 	add	arg03, objptr
1682c     0B 17 02 FB | 	rdlong	arg03, arg03
16830     0C 4E 05 F1 | 	add	fp, #12
16834     A7 16 62 FC | 	wrlong	arg03, fp
16838                 | ' 
16838                 | ' numpar=compiledline(lineptr_e).result.uresult
16838                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
16838     0C 4E 85 F1 | 	sub	fp, #12
1683c     02 16 16 F2 | 	cmp	arg03, #2 wc
16840     47 00 00 FF 
16844     7C E4 85 F1 | 	sub	objptr, ##36476
16848     0C 4E 05 C1 |  if_b	add	fp, #12
1684c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16850     0C 4E 85 C1 |  if_b	sub	fp, #12
16854     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1840
16858     00 12 06 F6 | 	mov	arg01, #0
1685c     FC FB B0 FD | 	call	#__system___getiolock_0540
16860     FD 12 02 F6 | 	mov	arg01, result1
16864     B4 A1 B0 FD | 	call	#__system___lockmem
16868     85 01 00 FF 
1686c     62 14 06 F6 | 	mov	arg02, ##@LR__5487
16870     00 12 06 F6 | 	mov	arg01, #0
16874     00 16 06 F6 | 	mov	arg03, #0
16878     94 AE B0 FD | 	call	#__system___basic_print_string
1687c     00 12 06 F6 | 	mov	arg01, #0
16880     D8 FB B0 FD | 	call	#__system___getiolock_0540
16884     FD 00 68 FC | 	wrlong	#0, result1
16888     27 12 06 F6 | 	mov	arg01, #39
1688c     F4 6B B0 FD | 	call	#_printerror
16890     54 00 90 FD | 	jmp	#LR__1841
16894                 | LR__1840
16894     C0 51 BF FD | 	call	#_pop
16898     FF 1E 02 F6 | 	mov	local01, result3
1689c     A7 FA 61 FC | 	wrlong	result1, fp
168a0     04 4E 05 F1 | 	add	fp, #4
168a4     A7 FC 61 FC | 	wrlong	result2, fp
168a8     04 4E 05 F1 | 	add	fp, #4
168ac     A7 1E 62 FC | 	wrlong	local01, fp
168b0     08 4E 85 F1 | 	sub	fp, #8
168b4     A7 12 02 F6 | 	mov	arg01, fp
168b8     6C F2 BF FD | 	call	#_converttoint
168bc     10 4E 05 F1 | 	add	fp, #16
168c0     A7 FA 61 FC | 	wrlong	result1, fp
168c4     FD 12 02 F6 | 	mov	arg01, result1
168c8     10 4E 85 F1 | 	sub	fp, #16
168cc     8C C3 B0 FD | 	call	#__system__Chr_S
168d0     A7 FA 61 FC | 	wrlong	result1, fp
168d4     08 4E 05 F1 | 	add	fp, #8
168d8     A7 3E 68 FC | 	wrlong	#31, fp
168dc     08 4E 85 F1 | 	sub	fp, #8
168e0     A7 12 02 F6 | 	mov	arg01, fp
168e4     08 52 BF FD | 	call	#_push
168e8                 | LR__1841
168e8     A7 F0 03 F6 | 	mov	ptra, fp
168ec     B2 00 A0 FD | 	call	#popregs_
168f0                 | _do_chr_ret
168f0     2D 00 64 FD | 	ret
168f4                 | 
168f4                 | ' 
168f4                 | ' sub do_val
168f4                 | _do_val
168f4     03 4A 05 F6 | 	mov	COUNT_, #3
168f8     A8 00 A0 FD | 	call	#pushregs_
168fc     20 F0 07 F1 | 	add	ptra, #32
16900     4A 00 00 FF 
16904     80 E4 05 F1 | 	add	objptr, ##38016
16908     F2 16 02 FB | 	rdlong	arg03, objptr
1690c     0B 1F 02 F6 | 	mov	local01, arg03
16910     01 1E 66 F0 | 	shl	local01, #1
16914     0B 1F 02 F1 | 	add	local01, arg03
16918     02 1E 66 F0 | 	shl	local01, #2
1691c     03 00 00 FF 
16920     04 E4 85 F1 | 	sub	objptr, ##1540
16924     F2 1E 02 F1 | 	add	local01, objptr
16928     0F 17 02 FB | 	rdlong	arg03, local01
1692c     0C 4E 05 F1 | 	add	fp, #12
16930     A7 16 62 FC | 	wrlong	arg03, fp
16934                 | ' 
16934                 | ' numpar=compiledline(lineptr_e).result.uresult
16934                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
16934     0C 4E 85 F1 | 	sub	fp, #12
16938     02 16 16 F2 | 	cmp	arg03, #2 wc
1693c     47 00 00 FF 
16940     7C E4 85 F1 | 	sub	objptr, ##36476
16944     0C 4E 05 C1 |  if_b	add	fp, #12
16948     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1694c     0C 4E 85 C1 |  if_b	sub	fp, #12
16950     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1850
16954     00 12 06 F6 | 	mov	arg01, #0
16958     00 FB B0 FD | 	call	#__system___getiolock_0540
1695c     FD 12 02 F6 | 	mov	arg01, result1
16960     B8 A0 B0 FD | 	call	#__system___lockmem
16964     85 01 00 FF 
16968     69 14 06 F6 | 	mov	arg02, ##@LR__5488
1696c     00 12 06 F6 | 	mov	arg01, #0
16970     00 16 06 F6 | 	mov	arg03, #0
16974     98 AD B0 FD | 	call	#__system___basic_print_string
16978     00 12 06 F6 | 	mov	arg01, #0
1697c     DC FA B0 FD | 	call	#__system___getiolock_0540
16980     FD 00 68 FC | 	wrlong	#0, result1
16984     27 12 06 F6 | 	mov	arg01, #39
16988     F8 6A B0 FD | 	call	#_printerror
1698c     5C 02 90 FD | 	jmp	#LR__1863
16990                 | LR__1850
16990     C4 50 BF FD | 	call	#_pop
16994     FF 16 02 F6 | 	mov	arg03, result3
16998     A7 FA 61 FC | 	wrlong	result1, fp
1699c     04 4E 05 F1 | 	add	fp, #4
169a0     A7 FC 61 FC | 	wrlong	result2, fp
169a4     04 4E 05 F1 | 	add	fp, #4
169a8     A7 16 62 FC | 	wrlong	arg03, fp
169ac                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
169ac     08 4E 85 F1 | 	sub	fp, #8
169b0     2B 16 0E F2 | 	cmp	arg03, #43 wz
169b4     18 00 90 5D |  if_ne	jmp	#LR__1851
169b8     A7 12 02 FB | 	rdlong	arg01, fp
169bc     44 A9 BF FD | 	call	#_convertstring
169c0     A7 FA 61 FC | 	wrlong	result1, fp
169c4     08 4E 05 F1 | 	add	fp, #8
169c8     A7 3E 68 FC | 	wrlong	#31, fp
169cc     08 4E 85 F1 | 	sub	fp, #8
169d0                 | LR__1851
169d0                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
169d0     08 4E 05 F1 | 	add	fp, #8
169d4     A7 16 02 FB | 	rdlong	arg03, fp
169d8     08 4E 85 F1 | 	sub	fp, #8
169dc     1F 16 0E F2 | 	cmp	arg03, #31 wz
169e0     3C 00 90 AD |  if_e	jmp	#LR__1852
169e4     00 12 06 F6 | 	mov	arg01, #0
169e8     70 FA B0 FD | 	call	#__system___getiolock_0540
169ec     FD 12 02 F6 | 	mov	arg01, result1
169f0     28 A0 B0 FD | 	call	#__system___lockmem
169f4     85 01 00 FF 
169f8     6F 14 06 F6 | 	mov	arg02, ##@LR__5489
169fc     00 12 06 F6 | 	mov	arg01, #0
16a00     00 16 06 F6 | 	mov	arg03, #0
16a04     08 AD B0 FD | 	call	#__system___basic_print_string
16a08     00 12 06 F6 | 	mov	arg01, #0
16a0c     4C FA B0 FD | 	call	#__system___getiolock_0540
16a10     FD 00 68 FC | 	wrlong	#0, result1
16a14     0F 12 06 F6 | 	mov	arg01, #15
16a18     68 6A B0 FD | 	call	#_printerror
16a1c     CC 01 90 FD | 	jmp	#LR__1863
16a20                 | LR__1852
16a20                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
16a20     A7 12 02 FB | 	rdlong	arg01, fp
16a24     01 14 06 F6 | 	mov	arg02, #1
16a28     6C C0 B0 FD | 	call	#__system__Left_S
16a2c     FD 12 02 F6 | 	mov	arg01, result1
16a30     85 01 00 FF 
16a34     75 14 06 F6 | 	mov	arg02, ##@LR__5490
16a38     08 A0 B0 FD | 	call	#__system___string_cmp
16a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
16a40     48 00 90 5D |  if_ne	jmp	#LR__1855
16a44     85 01 00 FF 
16a48     77 1E 06 F6 | 	mov	local01, ##@LR__5491
16a4c     A7 16 02 FB | 	rdlong	arg03, fp
16a50     0B 13 02 F6 | 	mov	arg01, arg03
16a54     09 21 02 F6 | 	mov	local02, arg01
16a58     97 06 48 FB | 	callpa	#(@LR__1854-@LR__1853)>>2,fcache_load_ptr_
16a5c                 | LR__1853
16a5c     10 FB C9 FA | 	rdbyte	result1, local02 wz
16a60     01 20 06 51 |  if_ne	add	local02, #1
16a64     F4 FF 9F 5D |  if_ne	jmp	#LR__1853
16a68                 | LR__1854
16a68     09 21 82 F1 | 	sub	local02, arg01
16a6c     10 15 02 F6 | 	mov	arg02, local02
16a70     01 14 86 F1 | 	sub	arg02, #1
16a74     0B 13 02 F6 | 	mov	arg01, arg03
16a78     A4 C0 B0 FD | 	call	#__system__Right_S
16a7c     FD 14 02 F6 | 	mov	arg02, result1
16a80     0F 13 02 F6 | 	mov	arg01, local01
16a84     F0 9F B0 FD | 	call	#__system___string_concat
16a88     A7 FA 61 FC | 	wrlong	result1, fp
16a8c                 | LR__1855
16a8c                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
16a8c     A7 12 02 FB | 	rdlong	arg01, fp
16a90     01 14 06 F6 | 	mov	arg02, #1
16a94     00 C0 B0 FD | 	call	#__system__Left_S
16a98     FD 12 02 F6 | 	mov	arg01, result1
16a9c     85 01 00 FF 
16aa0     7A 14 06 F6 | 	mov	arg02, ##@LR__5492
16aa4     9C 9F B0 FD | 	call	#__system___string_cmp
16aa8     00 FA 0D F2 | 	cmp	result1, #0 wz
16aac     48 00 90 5D |  if_ne	jmp	#LR__1858
16ab0     85 01 00 FF 
16ab4     7C 1E 06 F6 | 	mov	local01, ##@LR__5493
16ab8     A7 16 02 FB | 	rdlong	arg03, fp
16abc     0B 13 02 F6 | 	mov	arg01, arg03
16ac0     09 21 02 F6 | 	mov	local02, arg01
16ac4     97 06 48 FB | 	callpa	#(@LR__1857-@LR__1856)>>2,fcache_load_ptr_
16ac8                 | LR__1856
16ac8     10 FB C9 FA | 	rdbyte	result1, local02 wz
16acc     01 20 06 51 |  if_ne	add	local02, #1
16ad0     F4 FF 9F 5D |  if_ne	jmp	#LR__1856
16ad4                 | LR__1857
16ad4     09 21 82 F1 | 	sub	local02, arg01
16ad8     10 15 02 F6 | 	mov	arg02, local02
16adc     01 14 86 F1 | 	sub	arg02, #1
16ae0     0B 13 02 F6 | 	mov	arg01, arg03
16ae4     38 C0 B0 FD | 	call	#__system__Right_S
16ae8     FD 14 02 F6 | 	mov	arg02, result1
16aec     0F 13 02 F6 | 	mov	arg01, local01
16af0     84 9F B0 FD | 	call	#__system___string_concat
16af4     A7 FA 61 FC | 	wrlong	result1, fp
16af8                 | LR__1858
16af8     A7 12 02 FB | 	rdlong	arg01, fp
16afc     B8 D2 B0 FD | 	call	#__system____builtin_atof
16b00     1C 4E 05 F1 | 	add	fp, #28
16b04     A7 FA 61 FC | 	wrlong	result1, fp
16b08     1C 4E 85 F1 | 	sub	fp, #28
16b0c     A7 12 02 FB | 	rdlong	arg01, fp
16b10     00 14 06 F6 | 	mov	arg02, #0
16b14     30 D1 B0 FD | 	call	#__system____builtin_atoi
16b18     18 4E 05 F1 | 	add	fp, #24
16b1c     A7 FA 61 FC | 	wrlong	result1, fp
16b20                 | ' fval=val(t1.result.sresult)
16b20                 | ' ival=val%(t1.result.sresult)
16b20                 | ' if fval=ival then
16b20     04 4E 05 F1 | 	add	fp, #4
16b24     A7 1E 02 FB | 	rdlong	local01, fp
16b28     1C 4E 85 F1 | 	sub	fp, #28
16b2c     FD 12 52 F6 | 	abs	arg01, result1 wc
16b30     1F 22 C6 C9 |  if_b	decod	local03, #31
16b34     00 22 06 36 |  if_ae	mov	local03, #0
16b38     90 C6 B0 FD | 	call	#__system___float_fromuns
16b3c     11 FB 61 F5 | 	xor	result1, local03
16b40     FD 14 02 F6 | 	mov	arg02, result1
16b44     0F 13 02 F6 | 	mov	arg01, local01
16b48     01 16 06 F6 | 	mov	arg03, #1
16b4c     B4 CE B0 FD | 	call	#__system___float_cmp
16b50     00 FA 0D F2 | 	cmp	result1, #0 wz
16b54     20 00 90 5D |  if_ne	jmp	#LR__1859
16b58     18 4E 05 F1 | 	add	fp, #24
16b5c     A7 1E 02 FB | 	rdlong	local01, fp
16b60     18 4E 85 F1 | 	sub	fp, #24
16b64     A7 1E 62 FC | 	wrlong	local01, fp
16b68     08 4E 05 F1 | 	add	fp, #8
16b6c     A7 38 68 FC | 	wrlong	#28, fp
16b70     08 4E 85 F1 | 	sub	fp, #8
16b74     6C 00 90 FD | 	jmp	#LR__1862
16b78                 | LR__1859
16b78                 | '   if fval=0 andalso ival<>0 then
16b78     1C 4E 05 F1 | 	add	fp, #28
16b7c     A7 12 02 FB | 	rdlong	arg01, fp
16b80     1C 4E 85 F1 | 	sub	fp, #28
16b84     00 14 06 F6 | 	mov	arg02, #0
16b88     01 16 06 F6 | 	mov	arg03, #1
16b8c     74 CE B0 FD | 	call	#__system___float_cmp
16b90     00 FA 0D F2 | 	cmp	result1, #0 wz
16b94     30 00 90 5D |  if_ne	jmp	#LR__1860
16b98     18 4E 05 F1 | 	add	fp, #24
16b9c     A7 1E 0A FB | 	rdlong	local01, fp wz
16ba0     18 4E 85 F1 | 	sub	fp, #24
16ba4     20 00 90 AD |  if_e	jmp	#LR__1860
16ba8     18 4E 05 F1 | 	add	fp, #24
16bac     A7 1E 02 FB | 	rdlong	local01, fp
16bb0     18 4E 85 F1 | 	sub	fp, #24
16bb4     A7 1E 62 FC | 	wrlong	local01, fp
16bb8     08 4E 05 F1 | 	add	fp, #8
16bbc     A7 38 68 FC | 	wrlong	#28, fp
16bc0     08 4E 85 F1 | 	sub	fp, #8
16bc4     1C 00 90 FD | 	jmp	#LR__1861
16bc8                 | LR__1860
16bc8     1C 4E 05 F1 | 	add	fp, #28
16bcc     A7 1E 02 FB | 	rdlong	local01, fp
16bd0     1C 4E 85 F1 | 	sub	fp, #28
16bd4     A7 1E 62 FC | 	wrlong	local01, fp
16bd8     08 4E 05 F1 | 	add	fp, #8
16bdc     A7 3C 68 FC | 	wrlong	#30, fp
16be0     08 4E 85 F1 | 	sub	fp, #8
16be4                 | LR__1861
16be4                 | LR__1862
16be4     A7 12 02 F6 | 	mov	arg01, fp
16be8     04 4F BF FD | 	call	#_push
16bec                 | LR__1863
16bec     A7 F0 03 F6 | 	mov	ptra, fp
16bf0     B2 00 A0 FD | 	call	#popregs_
16bf4                 | _do_val_ret
16bf4     2D 00 64 FD | 	ret
16bf8                 | 
16bf8                 | ' 
16bf8                 | ' 
16bf8                 | ' sub do_hex
16bf8                 | _do_hex
16bf8     01 4A 05 F6 | 	mov	COUNT_, #1
16bfc     A8 00 A0 FD | 	call	#pushregs_
16c00     18 F0 07 F1 | 	add	ptra, #24
16c04     4A 00 00 FF 
16c08     80 E4 05 F1 | 	add	objptr, ##38016
16c0c     F2 1E 02 FB | 	rdlong	local01, objptr
16c10     0F 17 02 F6 | 	mov	arg03, local01
16c14     01 16 66 F0 | 	shl	arg03, #1
16c18     0F 17 02 F1 | 	add	arg03, local01
16c1c     02 16 66 F0 | 	shl	arg03, #2
16c20     03 00 00 FF 
16c24     04 E4 85 F1 | 	sub	objptr, ##1540
16c28     F2 16 02 F1 | 	add	arg03, objptr
16c2c     0B 17 02 FB | 	rdlong	arg03, arg03
16c30     0C 4E 05 F1 | 	add	fp, #12
16c34     A7 16 62 FC | 	wrlong	arg03, fp
16c38                 | ' 
16c38                 | ' numpar=compiledline(lineptr_e).result.uresult
16c38                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
16c38     0C 4E 85 F1 | 	sub	fp, #12
16c3c     03 16 16 F2 | 	cmp	arg03, #3 wc
16c40     47 00 00 FF 
16c44     7C E4 85 F1 | 	sub	objptr, ##36476
16c48     0C 4E 05 C1 |  if_b	add	fp, #12
16c4c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16c50     0C 4E 85 C1 |  if_b	sub	fp, #12
16c54     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1870
16c58     00 12 06 F6 | 	mov	arg01, #0
16c5c     FC F7 B0 FD | 	call	#__system___getiolock_0540
16c60     FD 12 02 F6 | 	mov	arg01, result1
16c64     B4 9D B0 FD | 	call	#__system___lockmem
16c68     85 01 00 FF 
16c6c     7F 14 06 F6 | 	mov	arg02, ##@LR__5494
16c70     00 12 06 F6 | 	mov	arg01, #0
16c74     00 16 06 F6 | 	mov	arg03, #0
16c78     94 AA B0 FD | 	call	#__system___basic_print_string
16c7c     00 12 06 F6 | 	mov	arg01, #0
16c80     D8 F7 B0 FD | 	call	#__system___getiolock_0540
16c84     FD 00 68 FC | 	wrlong	#0, result1
16c88     27 12 06 F6 | 	mov	arg01, #39
16c8c     F4 67 B0 FD | 	call	#_printerror
16c90     B8 00 90 FD | 	jmp	#LR__1873
16c94                 | LR__1870
16c94                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
16c94     0C 4E 05 F1 | 	add	fp, #12
16c98     A7 1E 02 FB | 	rdlong	local01, fp
16c9c     0C 4E 85 F1 | 	sub	fp, #12
16ca0     02 1E 0E F2 | 	cmp	local01, #2 wz
16ca4     38 00 90 5D |  if_ne	jmp	#LR__1871
16ca8     AC 4D BF FD | 	call	#_pop
16cac     FF 1E 02 F6 | 	mov	local01, result3
16cb0     A7 FA 61 FC | 	wrlong	result1, fp
16cb4     04 4E 05 F1 | 	add	fp, #4
16cb8     A7 FC 61 FC | 	wrlong	result2, fp
16cbc     04 4E 05 F1 | 	add	fp, #4
16cc0     A7 1E 62 FC | 	wrlong	local01, fp
16cc4     08 4E 85 F1 | 	sub	fp, #8
16cc8     A7 12 02 F6 | 	mov	arg01, fp
16ccc     58 EE BF FD | 	call	#_converttoint
16cd0     14 4E 05 F1 | 	add	fp, #20
16cd4     A7 FA 61 FC | 	wrlong	result1, fp
16cd8     14 4E 85 F1 | 	sub	fp, #20
16cdc     0C 00 90 FD | 	jmp	#LR__1872
16ce0                 | LR__1871
16ce0     14 4E 05 F1 | 	add	fp, #20
16ce4     A7 10 68 FC | 	wrlong	#8, fp
16ce8     14 4E 85 F1 | 	sub	fp, #20
16cec                 | LR__1872
16cec     68 4D BF FD | 	call	#_pop
16cf0     FF 1E 02 F6 | 	mov	local01, result3
16cf4     A7 FA 61 FC | 	wrlong	result1, fp
16cf8     04 4E 05 F1 | 	add	fp, #4
16cfc     A7 FC 61 FC | 	wrlong	result2, fp
16d00     04 4E 05 F1 | 	add	fp, #4
16d04     A7 1E 62 FC | 	wrlong	local01, fp
16d08     08 4E 85 F1 | 	sub	fp, #8
16d0c     A7 12 02 F6 | 	mov	arg01, fp
16d10     14 EE BF FD | 	call	#_converttoint
16d14     10 4E 05 F1 | 	add	fp, #16
16d18     A7 FA 61 FC | 	wrlong	result1, fp
16d1c     FD 12 02 F6 | 	mov	arg01, result1
16d20     04 4E 05 F1 | 	add	fp, #4
16d24     A7 14 02 FB | 	rdlong	arg02, fp
16d28     14 4E 85 F1 | 	sub	fp, #20
16d2c     10 16 06 F6 | 	mov	arg03, #16
16d30     B8 BF B0 FD | 	call	#__system__Number_S
16d34     A7 FA 61 FC | 	wrlong	result1, fp
16d38     08 4E 05 F1 | 	add	fp, #8
16d3c     A7 3E 68 FC | 	wrlong	#31, fp
16d40     08 4E 85 F1 | 	sub	fp, #8
16d44     A7 12 02 F6 | 	mov	arg01, fp
16d48     A4 4D BF FD | 	call	#_push
16d4c                 | LR__1873
16d4c     A7 F0 03 F6 | 	mov	ptra, fp
16d50     B2 00 A0 FD | 	call	#popregs_
16d54                 | _do_hex_ret
16d54     2D 00 64 FD | 	ret
16d58                 | 
16d58                 | ' 
16d58                 | ' sub do_bin
16d58                 | _do_bin
16d58     01 4A 05 F6 | 	mov	COUNT_, #1
16d5c     A8 00 A0 FD | 	call	#pushregs_
16d60     18 F0 07 F1 | 	add	ptra, #24
16d64     4A 00 00 FF 
16d68     80 E4 05 F1 | 	add	objptr, ##38016
16d6c     F2 1E 02 FB | 	rdlong	local01, objptr
16d70     0F 17 02 F6 | 	mov	arg03, local01
16d74     01 16 66 F0 | 	shl	arg03, #1
16d78     0F 17 02 F1 | 	add	arg03, local01
16d7c     02 16 66 F0 | 	shl	arg03, #2
16d80     03 00 00 FF 
16d84     04 E4 85 F1 | 	sub	objptr, ##1540
16d88     F2 16 02 F1 | 	add	arg03, objptr
16d8c     0B 17 02 FB | 	rdlong	arg03, arg03
16d90     0C 4E 05 F1 | 	add	fp, #12
16d94     A7 16 62 FC | 	wrlong	arg03, fp
16d98                 | ' 
16d98                 | ' numpar=compiledline(lineptr_e).result.uresult
16d98                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
16d98     0C 4E 85 F1 | 	sub	fp, #12
16d9c     03 16 16 F2 | 	cmp	arg03, #3 wc
16da0     47 00 00 FF 
16da4     7C E4 85 F1 | 	sub	objptr, ##36476
16da8     0C 4E 05 C1 |  if_b	add	fp, #12
16dac     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16db0     0C 4E 85 C1 |  if_b	sub	fp, #12
16db4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1880
16db8     00 12 06 F6 | 	mov	arg01, #0
16dbc     9C F6 B0 FD | 	call	#__system___getiolock_0540
16dc0     FD 12 02 F6 | 	mov	arg01, result1
16dc4     54 9C B0 FD | 	call	#__system___lockmem
16dc8     85 01 00 FF 
16dcc     86 14 06 F6 | 	mov	arg02, ##@LR__5495
16dd0     00 12 06 F6 | 	mov	arg01, #0
16dd4     00 16 06 F6 | 	mov	arg03, #0
16dd8     34 A9 B0 FD | 	call	#__system___basic_print_string
16ddc     00 12 06 F6 | 	mov	arg01, #0
16de0     78 F6 B0 FD | 	call	#__system___getiolock_0540
16de4     FD 00 68 FC | 	wrlong	#0, result1
16de8     27 12 06 F6 | 	mov	arg01, #39
16dec     94 66 B0 FD | 	call	#_printerror
16df0     B8 00 90 FD | 	jmp	#LR__1883
16df4                 | LR__1880
16df4                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
16df4     0C 4E 05 F1 | 	add	fp, #12
16df8     A7 1E 02 FB | 	rdlong	local01, fp
16dfc     0C 4E 85 F1 | 	sub	fp, #12
16e00     02 1E 0E F2 | 	cmp	local01, #2 wz
16e04     38 00 90 5D |  if_ne	jmp	#LR__1881
16e08     4C 4C BF FD | 	call	#_pop
16e0c     FF 1E 02 F6 | 	mov	local01, result3
16e10     A7 FA 61 FC | 	wrlong	result1, fp
16e14     04 4E 05 F1 | 	add	fp, #4
16e18     A7 FC 61 FC | 	wrlong	result2, fp
16e1c     04 4E 05 F1 | 	add	fp, #4
16e20     A7 1E 62 FC | 	wrlong	local01, fp
16e24     08 4E 85 F1 | 	sub	fp, #8
16e28     A7 12 02 F6 | 	mov	arg01, fp
16e2c     F8 EC BF FD | 	call	#_converttoint
16e30     14 4E 05 F1 | 	add	fp, #20
16e34     A7 FA 61 FC | 	wrlong	result1, fp
16e38     14 4E 85 F1 | 	sub	fp, #20
16e3c     0C 00 90 FD | 	jmp	#LR__1882
16e40                 | LR__1881
16e40     14 4E 05 F1 | 	add	fp, #20
16e44     A7 00 68 FC | 	wrlong	#0, fp
16e48     14 4E 85 F1 | 	sub	fp, #20
16e4c                 | LR__1882
16e4c     08 4C BF FD | 	call	#_pop
16e50     FF 1E 02 F6 | 	mov	local01, result3
16e54     A7 FA 61 FC | 	wrlong	result1, fp
16e58     04 4E 05 F1 | 	add	fp, #4
16e5c     A7 FC 61 FC | 	wrlong	result2, fp
16e60     04 4E 05 F1 | 	add	fp, #4
16e64     A7 1E 62 FC | 	wrlong	local01, fp
16e68     08 4E 85 F1 | 	sub	fp, #8
16e6c     A7 12 02 F6 | 	mov	arg01, fp
16e70     B4 EC BF FD | 	call	#_converttoint
16e74     10 4E 05 F1 | 	add	fp, #16
16e78     A7 FA 61 FC | 	wrlong	result1, fp
16e7c     FD 12 02 F6 | 	mov	arg01, result1
16e80     04 4E 05 F1 | 	add	fp, #4
16e84     A7 14 02 FB | 	rdlong	arg02, fp
16e88     14 4E 85 F1 | 	sub	fp, #20
16e8c     02 16 06 F6 | 	mov	arg03, #2
16e90     58 BE B0 FD | 	call	#__system__Number_S
16e94     A7 FA 61 FC | 	wrlong	result1, fp
16e98     08 4E 05 F1 | 	add	fp, #8
16e9c     A7 3E 68 FC | 	wrlong	#31, fp
16ea0     08 4E 85 F1 | 	sub	fp, #8
16ea4     A7 12 02 F6 | 	mov	arg01, fp
16ea8     44 4C BF FD | 	call	#_push
16eac                 | LR__1883
16eac     A7 F0 03 F6 | 	mov	ptra, fp
16eb0     B2 00 A0 FD | 	call	#popregs_
16eb4                 | _do_bin_ret
16eb4     2D 00 64 FD | 	ret
16eb8                 | 
16eb8                 | ' 
16eb8                 | ' sub do_cos
16eb8                 | _do_cos
16eb8     01 4A 05 F6 | 	mov	COUNT_, #1
16ebc     A8 00 A0 FD | 	call	#pushregs_
16ec0     10 F0 07 F1 | 	add	ptra, #16
16ec4     4A 00 00 FF 
16ec8     80 E4 05 F1 | 	add	objptr, ##38016
16ecc     F2 1E 02 FB | 	rdlong	local01, objptr
16ed0     0F 17 02 F6 | 	mov	arg03, local01
16ed4     01 16 66 F0 | 	shl	arg03, #1
16ed8     0F 17 02 F1 | 	add	arg03, local01
16edc     02 16 66 F0 | 	shl	arg03, #2
16ee0     03 00 00 FF 
16ee4     04 E4 85 F1 | 	sub	objptr, ##1540
16ee8     F2 16 02 F1 | 	add	arg03, objptr
16eec     0B 17 02 FB | 	rdlong	arg03, arg03
16ef0     0C 4E 05 F1 | 	add	fp, #12
16ef4     A7 16 62 FC | 	wrlong	arg03, fp
16ef8                 | ' 
16ef8                 | ' numpar=compiledline(lineptr_e).result.uresult
16ef8                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
16ef8     0C 4E 85 F1 | 	sub	fp, #12
16efc     02 16 16 F2 | 	cmp	arg03, #2 wc
16f00     47 00 00 FF 
16f04     7C E4 85 F1 | 	sub	objptr, ##36476
16f08     0C 4E 05 C1 |  if_b	add	fp, #12
16f0c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16f10     0C 4E 85 C1 |  if_b	sub	fp, #12
16f14     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1890
16f18     00 12 06 F6 | 	mov	arg01, #0
16f1c     3C F5 B0 FD | 	call	#__system___getiolock_0540
16f20     FD 12 02 F6 | 	mov	arg01, result1
16f24     F4 9A B0 FD | 	call	#__system___lockmem
16f28     85 01 00 FF 
16f2c     8D 14 06 F6 | 	mov	arg02, ##@LR__5496
16f30     00 12 06 F6 | 	mov	arg01, #0
16f34     00 16 06 F6 | 	mov	arg03, #0
16f38     D4 A7 B0 FD | 	call	#__system___basic_print_string
16f3c     00 12 06 F6 | 	mov	arg01, #0
16f40     18 F5 B0 FD | 	call	#__system___getiolock_0540
16f44     FD 00 68 FC | 	wrlong	#0, result1
16f48     27 12 06 F6 | 	mov	arg01, #39
16f4c     34 65 B0 FD | 	call	#_printerror
16f50     78 00 90 FD | 	jmp	#LR__1891
16f54                 | LR__1890
16f54     00 4B BF FD | 	call	#_pop
16f58     A7 FA 61 FC | 	wrlong	result1, fp
16f5c     04 4E 05 F1 | 	add	fp, #4
16f60     A7 FC 61 FC | 	wrlong	result2, fp
16f64     04 4E 05 F1 | 	add	fp, #4
16f68     A7 FE 61 FC | 	wrlong	result3, fp
16f6c     08 4E 85 F1 | 	sub	fp, #8
16f70     51 00 00 FF 
16f74     B8 E5 05 F1 | 	add	objptr, ##41912
16f78     F2 1E 02 FB | 	rdlong	local01, objptr
16f7c     51 00 00 FF 
16f80     B8 E5 85 F1 | 	sub	objptr, ##41912
16f84     A7 12 02 F6 | 	mov	arg01, fp
16f88     58 EC BF FD | 	call	#_converttofloat
16f8c     FD 14 02 F6 | 	mov	arg02, result1
16f90     0F 13 02 F6 | 	mov	arg01, local01
16f94     38 C6 B0 FD | 	call	#__system___float_mul
16f98     FD 14 02 F6 | 	mov	arg02, result1
16f9c     87 E4 1F FF 
16fa0     DB 13 06 F6 | 	mov	arg01, ##1070141403
16fa4     1F 14 E6 F4 | 	bitnot	arg02, #31
16fa8     54 C2 B0 FD | 	call	#__system___float_add
16fac     FD 12 02 F6 | 	mov	arg01, result1
16fb0     58 CF B0 FD | 	call	#__system____builtin_sinf
16fb4     A7 FA 61 FC | 	wrlong	result1, fp
16fb8     08 4E 05 F1 | 	add	fp, #8
16fbc     A7 3C 68 FC | 	wrlong	#30, fp
16fc0     08 4E 85 F1 | 	sub	fp, #8
16fc4     A7 12 02 F6 | 	mov	arg01, fp
16fc8     24 4B BF FD | 	call	#_push
16fcc                 | LR__1891
16fcc     A7 F0 03 F6 | 	mov	ptra, fp
16fd0     B2 00 A0 FD | 	call	#popregs_
16fd4                 | _do_cos_ret
16fd4     2D 00 64 FD | 	ret
16fd8                 | 
16fd8                 | ' 
16fd8                 | ' sub do_tan
16fd8                 | _do_tan
16fd8     01 4A 05 F6 | 	mov	COUNT_, #1
16fdc     A8 00 A0 FD | 	call	#pushregs_
16fe0     10 F0 07 F1 | 	add	ptra, #16
16fe4     4A 00 00 FF 
16fe8     80 E4 05 F1 | 	add	objptr, ##38016
16fec     F2 1E 02 FB | 	rdlong	local01, objptr
16ff0     0F 17 02 F6 | 	mov	arg03, local01
16ff4     01 16 66 F0 | 	shl	arg03, #1
16ff8     0F 17 02 F1 | 	add	arg03, local01
16ffc     02 16 66 F0 | 	shl	arg03, #2
17000     03 00 00 FF 
17004     04 E4 85 F1 | 	sub	objptr, ##1540
17008     F2 16 02 F1 | 	add	arg03, objptr
1700c     0B 17 02 FB | 	rdlong	arg03, arg03
17010     0C 4E 05 F1 | 	add	fp, #12
17014     A7 16 62 FC | 	wrlong	arg03, fp
17018                 | ' 
17018                 | ' numpar=compiledline(lineptr_e).result.uresult
17018                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
17018     0C 4E 85 F1 | 	sub	fp, #12
1701c     02 16 16 F2 | 	cmp	arg03, #2 wc
17020     47 00 00 FF 
17024     7C E4 85 F1 | 	sub	objptr, ##36476
17028     0C 4E 05 C1 |  if_b	add	fp, #12
1702c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
17030     0C 4E 85 C1 |  if_b	sub	fp, #12
17034     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1900
17038     00 12 06 F6 | 	mov	arg01, #0
1703c     1C F4 B0 FD | 	call	#__system___getiolock_0540
17040     FD 12 02 F6 | 	mov	arg01, result1
17044     D4 99 B0 FD | 	call	#__system___lockmem
17048     85 01 00 FF 
1704c     93 14 06 F6 | 	mov	arg02, ##@LR__5497
17050     00 12 06 F6 | 	mov	arg01, #0
17054     00 16 06 F6 | 	mov	arg03, #0
17058     B4 A6 B0 FD | 	call	#__system___basic_print_string
1705c     00 12 06 F6 | 	mov	arg01, #0
17060     F8 F3 B0 FD | 	call	#__system___getiolock_0540
17064     FD 00 68 FC | 	wrlong	#0, result1
17068     27 12 06 F6 | 	mov	arg01, #39
1706c     14 64 B0 FD | 	call	#_printerror
17070     64 00 90 FD | 	jmp	#LR__1901
17074                 | LR__1900
17074     E0 49 BF FD | 	call	#_pop
17078     A7 FA 61 FC | 	wrlong	result1, fp
1707c     04 4E 05 F1 | 	add	fp, #4
17080     A7 FC 61 FC | 	wrlong	result2, fp
17084     04 4E 05 F1 | 	add	fp, #4
17088     A7 FE 61 FC | 	wrlong	result3, fp
1708c     08 4E 85 F1 | 	sub	fp, #8
17090     51 00 00 FF 
17094     B8 E5 05 F1 | 	add	objptr, ##41912
17098     F2 1E 02 FB | 	rdlong	local01, objptr
1709c     51 00 00 FF 
170a0     B8 E5 85 F1 | 	sub	objptr, ##41912
170a4     A7 12 02 F6 | 	mov	arg01, fp
170a8     38 EB BF FD | 	call	#_converttofloat
170ac     FD 14 02 F6 | 	mov	arg02, result1
170b0     0F 13 02 F6 | 	mov	arg01, local01
170b4     18 C5 B0 FD | 	call	#__system___float_mul
170b8     FD 12 02 F6 | 	mov	arg01, result1
170bc     98 CF B0 FD | 	call	#__system____builtin_tanf
170c0     A7 FA 61 FC | 	wrlong	result1, fp
170c4     08 4E 05 F1 | 	add	fp, #8
170c8     A7 3C 68 FC | 	wrlong	#30, fp
170cc     08 4E 85 F1 | 	sub	fp, #8
170d0     A7 12 02 F6 | 	mov	arg01, fp
170d4     18 4A BF FD | 	call	#_push
170d8                 | LR__1901
170d8     A7 F0 03 F6 | 	mov	ptra, fp
170dc     B2 00 A0 FD | 	call	#popregs_
170e0                 | _do_tan_ret
170e0     2D 00 64 FD | 	ret
170e4                 | 
170e4                 | ' 
170e4                 | ' sub do_asin
170e4                 | _do_asin
170e4     01 4A 05 F6 | 	mov	COUNT_, #1
170e8     A8 00 A0 FD | 	call	#pushregs_
170ec     10 F0 07 F1 | 	add	ptra, #16
170f0     4A 00 00 FF 
170f4     80 E4 05 F1 | 	add	objptr, ##38016
170f8     F2 1E 02 FB | 	rdlong	local01, objptr
170fc     0F 17 02 F6 | 	mov	arg03, local01
17100     01 16 66 F0 | 	shl	arg03, #1
17104     0F 17 02 F1 | 	add	arg03, local01
17108     02 16 66 F0 | 	shl	arg03, #2
1710c     03 00 00 FF 
17110     04 E4 85 F1 | 	sub	objptr, ##1540
17114     F2 16 02 F1 | 	add	arg03, objptr
17118     0B 17 02 FB | 	rdlong	arg03, arg03
1711c     0C 4E 05 F1 | 	add	fp, #12
17120     A7 16 62 FC | 	wrlong	arg03, fp
17124                 | ' 
17124                 | ' numpar=compiledline(lineptr_e).result.uresult
17124                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
17124     0C 4E 85 F1 | 	sub	fp, #12
17128     02 16 16 F2 | 	cmp	arg03, #2 wc
1712c     47 00 00 FF 
17130     7C E4 85 F1 | 	sub	objptr, ##36476
17134     0C 4E 05 C1 |  if_b	add	fp, #12
17138     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1713c     0C 4E 85 C1 |  if_b	sub	fp, #12
17140     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1910
17144     00 12 06 F6 | 	mov	arg01, #0
17148     10 F3 B0 FD | 	call	#__system___getiolock_0540
1714c     FD 12 02 F6 | 	mov	arg01, result1
17150     C8 98 B0 FD | 	call	#__system___lockmem
17154     85 01 00 FF 
17158     99 14 06 F6 | 	mov	arg02, ##@LR__5498
1715c     00 12 06 F6 | 	mov	arg01, #0
17160     00 16 06 F6 | 	mov	arg03, #0
17164     A8 A5 B0 FD | 	call	#__system___basic_print_string
17168     00 12 06 F6 | 	mov	arg01, #0
1716c     EC F2 B0 FD | 	call	#__system___getiolock_0540
17170     FD 00 68 FC | 	wrlong	#0, result1
17174     27 12 06 F6 | 	mov	arg01, #39
17178     08 63 B0 FD | 	call	#_printerror
1717c     64 00 90 FD | 	jmp	#LR__1911
17180                 | LR__1910
17180     D4 48 BF FD | 	call	#_pop
17184     FF 1E 02 F6 | 	mov	local01, result3
17188     A7 FA 61 FC | 	wrlong	result1, fp
1718c     04 4E 05 F1 | 	add	fp, #4
17190     A7 FC 61 FC | 	wrlong	result2, fp
17194     04 4E 05 F1 | 	add	fp, #4
17198     A7 1E 62 FC | 	wrlong	local01, fp
1719c     08 4E 85 F1 | 	sub	fp, #8
171a0     A7 12 02 F6 | 	mov	arg01, fp
171a4     3C EA BF FD | 	call	#_converttofloat
171a8     FD 12 02 F6 | 	mov	arg01, result1
171ac     F0 CE B0 FD | 	call	#__system____builtin_asinf
171b0     FD 12 02 F6 | 	mov	arg01, result1
171b4     51 00 00 FF 
171b8     BC E5 05 F1 | 	add	objptr, ##41916
171bc     F2 14 02 FB | 	rdlong	arg02, objptr
171c0     51 00 00 FF 
171c4     BC E5 85 F1 | 	sub	objptr, ##41916
171c8     04 C4 B0 FD | 	call	#__system___float_mul
171cc     A7 FA 61 FC | 	wrlong	result1, fp
171d0     08 4E 05 F1 | 	add	fp, #8
171d4     A7 3C 68 FC | 	wrlong	#30, fp
171d8     08 4E 85 F1 | 	sub	fp, #8
171dc     A7 12 02 F6 | 	mov	arg01, fp
171e0     0C 49 BF FD | 	call	#_push
171e4                 | LR__1911
171e4     A7 F0 03 F6 | 	mov	ptra, fp
171e8     B2 00 A0 FD | 	call	#popregs_
171ec                 | _do_asin_ret
171ec     2D 00 64 FD | 	ret
171f0                 | 
171f0                 | ' 
171f0                 | ' sub do_acos
171f0                 | _do_acos
171f0     01 4A 05 F6 | 	mov	COUNT_, #1
171f4     A8 00 A0 FD | 	call	#pushregs_
171f8     10 F0 07 F1 | 	add	ptra, #16
171fc     4A 00 00 FF 
17200     80 E4 05 F1 | 	add	objptr, ##38016
17204     F2 1E 02 FB | 	rdlong	local01, objptr
17208     0F 17 02 F6 | 	mov	arg03, local01
1720c     01 16 66 F0 | 	shl	arg03, #1
17210     0F 17 02 F1 | 	add	arg03, local01
17214     02 16 66 F0 | 	shl	arg03, #2
17218     03 00 00 FF 
1721c     04 E4 85 F1 | 	sub	objptr, ##1540
17220     F2 16 02 F1 | 	add	arg03, objptr
17224     0B 17 02 FB | 	rdlong	arg03, arg03
17228     0C 4E 05 F1 | 	add	fp, #12
1722c     A7 16 62 FC | 	wrlong	arg03, fp
17230                 | ' 
17230                 | ' numpar=compiledline(lineptr_e).result.uresult
17230                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
17230     0C 4E 85 F1 | 	sub	fp, #12
17234     02 16 16 F2 | 	cmp	arg03, #2 wc
17238     47 00 00 FF 
1723c     7C E4 85 F1 | 	sub	objptr, ##36476
17240     0C 4E 05 C1 |  if_b	add	fp, #12
17244     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
17248     0C 4E 85 C1 |  if_b	sub	fp, #12
1724c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1920
17250     00 12 06 F6 | 	mov	arg01, #0
17254     04 F2 B0 FD | 	call	#__system___getiolock_0540
17258     FD 12 02 F6 | 	mov	arg01, result1
1725c     BC 97 B0 FD | 	call	#__system___lockmem
17260     85 01 00 FF 
17264     A0 14 06 F6 | 	mov	arg02, ##@LR__5499
17268     00 12 06 F6 | 	mov	arg01, #0
1726c     00 16 06 F6 | 	mov	arg03, #0
17270     9C A4 B0 FD | 	call	#__system___basic_print_string
17274     00 12 06 F6 | 	mov	arg01, #0
17278     E0 F1 B0 FD | 	call	#__system___getiolock_0540
1727c     FD 00 68 FC | 	wrlong	#0, result1
17280     27 12 06 F6 | 	mov	arg01, #39
17284     FC 61 B0 FD | 	call	#_printerror
17288     64 00 90 FD | 	jmp	#LR__1921
1728c                 | LR__1920
1728c     C8 47 BF FD | 	call	#_pop
17290     FF 1E 02 F6 | 	mov	local01, result3
17294     A7 FA 61 FC | 	wrlong	result1, fp
17298     04 4E 05 F1 | 	add	fp, #4
1729c     A7 FC 61 FC | 	wrlong	result2, fp
172a0     04 4E 05 F1 | 	add	fp, #4
172a4     A7 1E 62 FC | 	wrlong	local01, fp
172a8     08 4E 85 F1 | 	sub	fp, #8
172ac     A7 12 02 F6 | 	mov	arg01, fp
172b0     30 E9 BF FD | 	call	#_converttofloat
172b4     FD 12 02 F6 | 	mov	arg01, result1
172b8     30 CE B0 FD | 	call	#__system____builtin_acosf
172bc     FD 12 02 F6 | 	mov	arg01, result1
172c0     51 00 00 FF 
172c4     BC E5 05 F1 | 	add	objptr, ##41916
172c8     F2 14 02 FB | 	rdlong	arg02, objptr
172cc     51 00 00 FF 
172d0     BC E5 85 F1 | 	sub	objptr, ##41916
172d4     F8 C2 B0 FD | 	call	#__system___float_mul
172d8     A7 FA 61 FC | 	wrlong	result1, fp
172dc     08 4E 05 F1 | 	add	fp, #8
172e0     A7 3C 68 FC | 	wrlong	#30, fp
172e4     08 4E 85 F1 | 	sub	fp, #8
172e8     A7 12 02 F6 | 	mov	arg01, fp
172ec     00 48 BF FD | 	call	#_push
172f0                 | LR__1921
172f0     A7 F0 03 F6 | 	mov	ptra, fp
172f4     B2 00 A0 FD | 	call	#popregs_
172f8                 | _do_acos_ret
172f8     2D 00 64 FD | 	ret
172fc                 | 
172fc                 | ' 
172fc                 | ' sub do_atn
172fc                 | _do_atn
172fc     01 4A 05 F6 | 	mov	COUNT_, #1
17300     A8 00 A0 FD | 	call	#pushregs_
17304     10 F0 07 F1 | 	add	ptra, #16
17308     4A 00 00 FF 
1730c     80 E4 05 F1 | 	add	objptr, ##38016
17310     F2 1E 02 FB | 	rdlong	local01, objptr
17314     0F 17 02 F6 | 	mov	arg03, local01
17318     01 16 66 F0 | 	shl	arg03, #1
1731c     0F 17 02 F1 | 	add	arg03, local01
17320     02 16 66 F0 | 	shl	arg03, #2
17324     03 00 00 FF 
17328     04 E4 85 F1 | 	sub	objptr, ##1540
1732c     F2 16 02 F1 | 	add	arg03, objptr
17330     0B 17 02 FB | 	rdlong	arg03, arg03
17334     0C 4E 05 F1 | 	add	fp, #12
17338     A7 16 62 FC | 	wrlong	arg03, fp
1733c                 | ' 
1733c                 | ' numpar=compiledline(lineptr_e).result.uresult
1733c                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
1733c     0C 4E 85 F1 | 	sub	fp, #12
17340     02 16 16 F2 | 	cmp	arg03, #2 wc
17344     47 00 00 FF 
17348     7C E4 85 F1 | 	sub	objptr, ##36476
1734c     0C 4E 05 C1 |  if_b	add	fp, #12
17350     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
17354     0C 4E 85 C1 |  if_b	sub	fp, #12
17358     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1930
1735c     00 12 06 F6 | 	mov	arg01, #0
17360     F8 F0 B0 FD | 	call	#__system___getiolock_0540
17364     FD 12 02 F6 | 	mov	arg01, result1
17368     B0 96 B0 FD | 	call	#__system___lockmem
1736c     85 01 00 FF 
17370     A7 14 06 F6 | 	mov	arg02, ##@LR__5500
17374     00 12 06 F6 | 	mov	arg01, #0
17378     00 16 06 F6 | 	mov	arg03, #0
1737c     90 A3 B0 FD | 	call	#__system___basic_print_string
17380     00 12 06 F6 | 	mov	arg01, #0
17384     D4 F0 B0 FD | 	call	#__system___getiolock_0540
17388     FD 00 68 FC | 	wrlong	#0, result1
1738c     27 12 06 F6 | 	mov	arg01, #39
17390     F0 60 B0 FD | 	call	#_printerror
17394     6C 00 90 FD | 	jmp	#LR__1931
17398                 | LR__1930
17398     BC 46 BF FD | 	call	#_pop
1739c     FF 1E 02 F6 | 	mov	local01, result3
173a0     A7 FA 61 FC | 	wrlong	result1, fp
173a4     04 4E 05 F1 | 	add	fp, #4
173a8     A7 FC 61 FC | 	wrlong	result2, fp
173ac     04 4E 05 F1 | 	add	fp, #4
173b0     A7 1E 62 FC | 	wrlong	local01, fp
173b4     08 4E 85 F1 | 	sub	fp, #8
173b8     A7 12 02 F6 | 	mov	arg01, fp
173bc     24 E8 BF FD | 	call	#_converttofloat
173c0     FD 12 02 F6 | 	mov	arg01, result1
173c4     00 C0 1F FF 
173c8     00 14 06 F6 | 	mov	arg02, ##1065353216
173cc     68 CD B0 FD | 	call	#__system____builtin_atan2f
173d0     FD 12 02 F6 | 	mov	arg01, result1
173d4     51 00 00 FF 
173d8     BC E5 05 F1 | 	add	objptr, ##41916
173dc     F2 14 02 FB | 	rdlong	arg02, objptr
173e0     51 00 00 FF 
173e4     BC E5 85 F1 | 	sub	objptr, ##41916
173e8     E4 C1 B0 FD | 	call	#__system___float_mul
173ec     A7 FA 61 FC | 	wrlong	result1, fp
173f0     08 4E 05 F1 | 	add	fp, #8
173f4     A7 3C 68 FC | 	wrlong	#30, fp
173f8     08 4E 85 F1 | 	sub	fp, #8
173fc     A7 12 02 F6 | 	mov	arg01, fp
17400     EC 46 BF FD | 	call	#_push
17404                 | LR__1931
17404     A7 F0 03 F6 | 	mov	ptra, fp
17408     B2 00 A0 FD | 	call	#popregs_
1740c                 | _do_atn_ret
1740c     2D 00 64 FD | 	ret
17410                 | 
17410                 | ' 
17410                 | ' sub do_sqr
17410                 | _do_sqr
17410     01 4A 05 F6 | 	mov	COUNT_, #1
17414     A8 00 A0 FD | 	call	#pushregs_
17418     10 F0 07 F1 | 	add	ptra, #16
1741c     4A 00 00 FF 
17420     80 E4 05 F1 | 	add	objptr, ##38016
17424     F2 1E 02 FB | 	rdlong	local01, objptr
17428     0F 17 02 F6 | 	mov	arg03, local01
1742c     01 16 66 F0 | 	shl	arg03, #1
17430     0F 17 02 F1 | 	add	arg03, local01
17434     02 16 66 F0 | 	shl	arg03, #2
17438     03 00 00 FF 
1743c     04 E4 85 F1 | 	sub	objptr, ##1540
17440     F2 16 02 F1 | 	add	arg03, objptr
17444     0B 17 02 FB | 	rdlong	arg03, arg03
17448     0C 4E 05 F1 | 	add	fp, #12
1744c     A7 16 62 FC | 	wrlong	arg03, fp
17450                 | ' 
17450                 | ' numpar=compiledline(lineptr_e).result.uresult
17450                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
17450     0C 4E 85 F1 | 	sub	fp, #12
17454     02 16 16 F2 | 	cmp	arg03, #2 wc
17458     47 00 00 FF 
1745c     7C E4 85 F1 | 	sub	objptr, ##36476
17460     0C 4E 05 C1 |  if_b	add	fp, #12
17464     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
17468     0C 4E 85 C1 |  if_b	sub	fp, #12
1746c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1940
17470     00 12 06 F6 | 	mov	arg01, #0
17474     E4 EF B0 FD | 	call	#__system___getiolock_0540
17478     FD 12 02 F6 | 	mov	arg01, result1
1747c     9C 95 B0 FD | 	call	#__system___lockmem
17480     85 01 00 FF 
17484     AD 14 06 F6 | 	mov	arg02, ##@LR__5501
17488     00 12 06 F6 | 	mov	arg01, #0
1748c     00 16 06 F6 | 	mov	arg03, #0
17490     7C A2 B0 FD | 	call	#__system___basic_print_string
17494     00 12 06 F6 | 	mov	arg01, #0
17498     C0 EF B0 FD | 	call	#__system___getiolock_0540
1749c     FD 00 68 FC | 	wrlong	#0, result1
174a0     27 12 06 F6 | 	mov	arg01, #39
174a4     DC 5F B0 FD | 	call	#_printerror
174a8     48 00 90 FD | 	jmp	#LR__1941
174ac                 | LR__1940
174ac     A8 45 BF FD | 	call	#_pop
174b0     FF 1E 02 F6 | 	mov	local01, result3
174b4     A7 FA 61 FC | 	wrlong	result1, fp
174b8     04 4E 05 F1 | 	add	fp, #4
174bc     A7 FC 61 FC | 	wrlong	result2, fp
174c0     04 4E 05 F1 | 	add	fp, #4
174c4     A7 1E 62 FC | 	wrlong	local01, fp
174c8     08 4E 85 F1 | 	sub	fp, #8
174cc     A7 12 02 F6 | 	mov	arg01, fp
174d0     10 E7 BF FD | 	call	#_converttofloat
174d4     FD 12 02 F6 | 	mov	arg01, result1
174d8     1C C0 B0 FD | 	call	#__system___float_sqrt
174dc     A7 FA 61 FC | 	wrlong	result1, fp
174e0     08 4E 05 F1 | 	add	fp, #8
174e4     A7 3C 68 FC | 	wrlong	#30, fp
174e8     08 4E 85 F1 | 	sub	fp, #8
174ec     A7 12 02 F6 | 	mov	arg01, fp
174f0     FC 45 BF FD | 	call	#_push
174f4                 | LR__1941
174f4     A7 F0 03 F6 | 	mov	ptra, fp
174f8     B2 00 A0 FD | 	call	#popregs_
174fc                 | _do_sqr_ret
174fc     2D 00 64 FD | 	ret
17500                 | 
17500                 | ' 
17500                 | ' sub do_stick
17500                 | _do_stick
17500     01 4A 05 F6 | 	mov	COUNT_, #1
17504     A8 00 A0 FD | 	call	#pushregs_
17508     10 F0 07 F1 | 	add	ptra, #16
1750c     4A 00 00 FF 
17510     80 E4 05 F1 | 	add	objptr, ##38016
17514     F2 1E 02 FB | 	rdlong	local01, objptr
17518     0F 17 02 F6 | 	mov	arg03, local01
1751c     01 16 66 F0 | 	shl	arg03, #1
17520     0F 17 02 F1 | 	add	arg03, local01
17524     02 16 66 F0 | 	shl	arg03, #2
17528     03 00 00 FF 
1752c     04 E4 85 F1 | 	sub	objptr, ##1540
17530     F2 16 02 F1 | 	add	arg03, objptr
17534     0B 17 02 FB | 	rdlong	arg03, arg03
17538     0C 4E 05 F1 | 	add	fp, #12
1753c     A7 16 62 FC | 	wrlong	arg03, fp
17540                 | ' 
17540                 | ' numpar=compiledline(lineptr_e).result.uresult
17540                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
17540     0C 4E 85 F1 | 	sub	fp, #12
17544     02 16 16 F2 | 	cmp	arg03, #2 wc
17548     47 00 00 FF 
1754c     7C E4 85 F1 | 	sub	objptr, ##36476
17550     3C 00 90 CD |  if_b	jmp	#LR__1950
17554     00 12 06 F6 | 	mov	arg01, #0
17558     00 EF B0 FD | 	call	#__system___getiolock_0540
1755c     FD 12 02 F6 | 	mov	arg01, result1
17560     B8 94 B0 FD | 	call	#__system___lockmem
17564     85 01 00 FF 
17568     B3 14 06 F6 | 	mov	arg02, ##@LR__5502
1756c     00 12 06 F6 | 	mov	arg01, #0
17570     00 16 06 F6 | 	mov	arg03, #0
17574     98 A1 B0 FD | 	call	#__system___basic_print_string
17578     00 12 06 F6 | 	mov	arg01, #0
1757c     DC EE B0 FD | 	call	#__system___getiolock_0540
17580     FD 00 68 FC | 	wrlong	#0, result1
17584     27 12 06 F6 | 	mov	arg01, #39
17588     F8 5E B0 FD | 	call	#_printerror
1758c     E8 00 90 FD | 	jmp	#LR__1954
17590                 | LR__1950
17590                 | ' 
17590                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
17590     0C 4E 05 F1 | 	add	fp, #12
17594     A7 FE 09 FB | 	rdlong	result3, fp wz
17598     0C 4E 85 F1 | 	sub	fp, #12
1759c     30 00 90 5D |  if_ne	jmp	#LR__1951
175a0     51 00 00 FF 
175a4     2C E5 05 F1 | 	add	objptr, ##41772
175a8     F2 1E 02 FB | 	rdlong	local01, objptr
175ac     51 00 00 FF 
175b0     2C E5 85 F1 | 	sub	objptr, ##41772
175b4     A7 1E 62 FC | 	wrlong	local01, fp
175b8     08 4E 05 F1 | 	add	fp, #8
175bc     A7 3A 68 FC | 	wrlong	#29, fp
175c0     08 4E 85 F1 | 	sub	fp, #8
175c4     A7 12 02 F6 | 	mov	arg01, fp
175c8     24 45 BF FD | 	call	#_push
175cc     A8 00 90 FD | 	jmp	#LR__1954
175d0                 | LR__1951
175d0     84 44 BF FD | 	call	#_pop
175d4     A7 FA 61 FC | 	wrlong	result1, fp
175d8     04 4E 05 F1 | 	add	fp, #4
175dc     A7 FC 61 FC | 	wrlong	result2, fp
175e0     04 4E 05 F1 | 	add	fp, #4
175e4     A7 FE 61 FC | 	wrlong	result3, fp
175e8                 | ' 
175e8                 | ' t1=pop()
175e8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
175e8     08 4E 85 F1 | 	sub	fp, #8
175ec     1C FE 0D F2 | 	cmp	result3, #28 wz
175f0     08 4E 05 51 |  if_ne	add	fp, #8
175f4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
175f8     08 4E 85 51 |  if_ne	sub	fp, #8
175fc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
17600     6C 00 90 5D |  if_ne	jmp	#LR__1953
17604     A7 1E 02 FB | 	rdlong	local01, fp
17608     52 00 00 FF 
1760c     08 E4 05 F1 | 	add	objptr, ##41992
17610     F2 1E 62 FC | 	wrlong	local01, objptr
17614                 | '   q=t1.result.uresult
17614                 | '   if q<7 then 
17614     52 00 00 FF 
17618     08 E4 85 F1 | 	sub	objptr, ##41992
1761c     07 1E 56 F2 | 	cmps	local01, #7 wc
17620     40 00 90 3D |  if_ae	jmp	#LR__1952
17624     52 00 00 FF 
17628     08 E4 05 F1 | 	add	objptr, ##41992
1762c     F2 1E 02 FB | 	rdlong	local01, objptr
17630     02 1E 66 F0 | 	shl	local01, #2
17634     DC E4 85 F1 | 	sub	objptr, #220
17638     F2 1E 02 F1 | 	add	local01, objptr
1763c     0F 1F 02 FB | 	rdlong	local01, local01
17640     A7 1E 62 FC | 	wrlong	local01, fp
17644     08 4E 05 F1 | 	add	fp, #8
17648     A7 3A 68 FC | 	wrlong	#29, fp
1764c     08 4E 85 F1 | 	sub	fp, #8
17650     A7 12 02 F6 | 	mov	arg01, fp
17654     51 00 00 FF 
17658     2C E5 85 F1 | 	sub	objptr, ##41772
1765c     90 44 BF FD | 	call	#_push
17660                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
17660     14 00 90 FD | 	jmp	#LR__1954
17664                 | LR__1952
17664     29 12 06 F6 | 	mov	arg01, #41
17668     18 5E B0 FD | 	call	#_printerror
1766c                 | '      printerror(41) : return
1766c     08 00 90 FD | 	jmp	#LR__1954
17670                 | LR__1953
17670     29 12 06 F6 | 	mov	arg01, #41
17674     0C 5E B0 FD | 	call	#_printerror
17678                 | LR__1954
17678     A7 F0 03 F6 | 	mov	ptra, fp
1767c     B2 00 A0 FD | 	call	#popregs_
17680                 | _do_stick_ret
17680     2D 00 64 FD | 	ret
17684                 | 
17684                 | ' 
17684                 | ' sub do_strig
17684                 | _do_strig
17684     01 4A 05 F6 | 	mov	COUNT_, #1
17688     A8 00 A0 FD | 	call	#pushregs_
1768c     10 F0 07 F1 | 	add	ptra, #16
17690     4A 00 00 FF 
17694     80 E4 05 F1 | 	add	objptr, ##38016
17698     F2 1E 02 FB | 	rdlong	local01, objptr
1769c     0F 17 02 F6 | 	mov	arg03, local01
176a0     01 16 66 F0 | 	shl	arg03, #1
176a4     0F 17 02 F1 | 	add	arg03, local01
176a8     02 16 66 F0 | 	shl	arg03, #2
176ac     03 00 00 FF 
176b0     04 E4 85 F1 | 	sub	objptr, ##1540
176b4     F2 16 02 F1 | 	add	arg03, objptr
176b8     0B 17 02 FB | 	rdlong	arg03, arg03
176bc     0C 4E 05 F1 | 	add	fp, #12
176c0     A7 16 62 FC | 	wrlong	arg03, fp
176c4                 | ' 
176c4                 | ' numpar=compiledline(lineptr_e).result.uresult
176c4                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
176c4     0C 4E 85 F1 | 	sub	fp, #12
176c8     02 16 16 F2 | 	cmp	arg03, #2 wc
176cc     47 00 00 FF 
176d0     7C E4 85 F1 | 	sub	objptr, ##36476
176d4     3C 00 90 CD |  if_b	jmp	#LR__1960
176d8     00 12 06 F6 | 	mov	arg01, #0
176dc     7C ED B0 FD | 	call	#__system___getiolock_0540
176e0     FD 12 02 F6 | 	mov	arg01, result1
176e4     34 93 B0 FD | 	call	#__system___lockmem
176e8     85 01 00 FF 
176ec     BB 14 06 F6 | 	mov	arg02, ##@LR__5503
176f0     00 12 06 F6 | 	mov	arg01, #0
176f4     00 16 06 F6 | 	mov	arg03, #0
176f8     14 A0 B0 FD | 	call	#__system___basic_print_string
176fc     00 12 06 F6 | 	mov	arg01, #0
17700     58 ED B0 FD | 	call	#__system___getiolock_0540
17704     FD 00 68 FC | 	wrlong	#0, result1
17708     27 12 06 F6 | 	mov	arg01, #39
1770c     74 5D B0 FD | 	call	#_printerror
17710     E8 00 90 FD | 	jmp	#LR__1964
17714                 | LR__1960
17714                 | ' 
17714                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
17714     0C 4E 05 F1 | 	add	fp, #12
17718     A7 FE 09 FB | 	rdlong	result3, fp wz
1771c     0C 4E 85 F1 | 	sub	fp, #12
17720     30 00 90 5D |  if_ne	jmp	#LR__1961
17724     51 00 00 FF 
17728     48 E5 05 F1 | 	add	objptr, ##41800
1772c     F2 1E 02 FB | 	rdlong	local01, objptr
17730     51 00 00 FF 
17734     48 E5 85 F1 | 	sub	objptr, ##41800
17738     A7 1E 62 FC | 	wrlong	local01, fp
1773c     08 4E 05 F1 | 	add	fp, #8
17740     A7 3A 68 FC | 	wrlong	#29, fp
17744     08 4E 85 F1 | 	sub	fp, #8
17748     A7 12 02 F6 | 	mov	arg01, fp
1774c     A0 43 BF FD | 	call	#_push
17750     A8 00 90 FD | 	jmp	#LR__1964
17754                 | LR__1961
17754     00 43 BF FD | 	call	#_pop
17758     A7 FA 61 FC | 	wrlong	result1, fp
1775c     04 4E 05 F1 | 	add	fp, #4
17760     A7 FC 61 FC | 	wrlong	result2, fp
17764     04 4E 05 F1 | 	add	fp, #4
17768     A7 FE 61 FC | 	wrlong	result3, fp
1776c                 | ' 
1776c                 | ' t1=pop()
1776c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1776c     08 4E 85 F1 | 	sub	fp, #8
17770     1C FE 0D F2 | 	cmp	result3, #28 wz
17774     08 4E 05 51 |  if_ne	add	fp, #8
17778     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1777c     08 4E 85 51 |  if_ne	sub	fp, #8
17780     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
17784     6C 00 90 5D |  if_ne	jmp	#LR__1963
17788     A7 1E 02 FB | 	rdlong	local01, fp
1778c     52 00 00 FF 
17790     08 E4 05 F1 | 	add	objptr, ##41992
17794     F2 1E 62 FC | 	wrlong	local01, objptr
17798                 | '   q=t1.result.uresult
17798                 | '   if q<7 then 
17798     52 00 00 FF 
1779c     08 E4 85 F1 | 	sub	objptr, ##41992
177a0     07 1E 56 F2 | 	cmps	local01, #7 wc
177a4     40 00 90 3D |  if_ae	jmp	#LR__1962
177a8     52 00 00 FF 
177ac     08 E4 05 F1 | 	add	objptr, ##41992
177b0     F2 1E 02 FB | 	rdlong	local01, objptr
177b4     02 1E 66 F0 | 	shl	local01, #2
177b8     C0 E4 85 F1 | 	sub	objptr, #192
177bc     F2 1E 02 F1 | 	add	local01, objptr
177c0     0F 1F 02 FB | 	rdlong	local01, local01
177c4     A7 1E 62 FC | 	wrlong	local01, fp
177c8     08 4E 05 F1 | 	add	fp, #8
177cc     A7 3A 68 FC | 	wrlong	#29, fp
177d0     08 4E 85 F1 | 	sub	fp, #8
177d4     A7 12 02 F6 | 	mov	arg01, fp
177d8     51 00 00 FF 
177dc     48 E5 85 F1 | 	sub	objptr, ##41800
177e0     0C 43 BF FD | 	call	#_push
177e4                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
177e4     14 00 90 FD | 	jmp	#LR__1964
177e8                 | LR__1962
177e8     29 12 06 F6 | 	mov	arg01, #41
177ec     94 5C B0 FD | 	call	#_printerror
177f0                 | '      printerror(41) : return
177f0     08 00 90 FD | 	jmp	#LR__1964
177f4                 | LR__1963
177f4     29 12 06 F6 | 	mov	arg01, #41
177f8     88 5C B0 FD | 	call	#_printerror
177fc                 | LR__1964
177fc     A7 F0 03 F6 | 	mov	ptra, fp
17800     B2 00 A0 FD | 	call	#popregs_
17804                 | _do_strig_ret
17804     2D 00 64 FD | 	ret
17808                 | 
17808                 | ' 
17808                 | ' sub do_getpixel
17808                 | _do_getpixel
17808     00 4A 05 F6 | 	mov	COUNT_, #0
1780c     A8 00 A0 FD | 	call	#pushregs_
17810     24 F0 07 F1 | 	add	ptra, #36
17814     4A 00 00 FF 
17818     80 E4 05 F1 | 	add	objptr, ##38016
1781c     F2 16 02 FB | 	rdlong	arg03, objptr
17820     0B 15 02 F6 | 	mov	arg02, arg03
17824     01 14 66 F0 | 	shl	arg02, #1
17828     0B 15 02 F1 | 	add	arg02, arg03
1782c     02 14 66 F0 | 	shl	arg02, #2
17830     03 00 00 FF 
17834     04 E4 85 F1 | 	sub	objptr, ##1540
17838     F2 14 02 F1 | 	add	arg02, objptr
1783c     0A 17 02 FB | 	rdlong	arg03, arg02
17840     18 4E 05 F1 | 	add	fp, #24
17844     A7 16 62 FC | 	wrlong	arg03, fp
17848                 | ' 
17848                 | ' numpar=compiledline(lineptr_e).result.uresult
17848                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
17848     18 4E 85 F1 | 	sub	fp, #24
1784c     02 16 0E F2 | 	cmp	arg03, #2 wz
17850     47 00 00 FF 
17854     7C E4 85 F1 | 	sub	objptr, ##36476
17858     3C 00 90 AD |  if_e	jmp	#LR__1970
1785c     00 12 06 F6 | 	mov	arg01, #0
17860     F8 EB B0 FD | 	call	#__system___getiolock_0540
17864     FD 12 02 F6 | 	mov	arg01, result1
17868     B0 91 B0 FD | 	call	#__system___lockmem
1786c     85 01 00 FF 
17870     C3 14 06 F6 | 	mov	arg02, ##@LR__5504
17874     00 12 06 F6 | 	mov	arg01, #0
17878     00 16 06 F6 | 	mov	arg03, #0
1787c     90 9E B0 FD | 	call	#__system___basic_print_string
17880     00 12 06 F6 | 	mov	arg01, #0
17884     D4 EB B0 FD | 	call	#__system___getiolock_0540
17888     FD 00 68 FC | 	wrlong	#0, result1
1788c     27 12 06 F6 | 	mov	arg01, #39
17890     F0 5B B0 FD | 	call	#_printerror
17894     B4 00 90 FD | 	jmp	#LR__1971
17898                 | LR__1970
17898     BC 41 BF FD | 	call	#_pop
1789c     FD 16 02 F6 | 	mov	arg03, result1
178a0     FE 14 02 F6 | 	mov	arg02, result2
178a4     FF 12 02 F6 | 	mov	arg01, result3
178a8     0C 4E 05 F1 | 	add	fp, #12
178ac     A7 16 62 FC | 	wrlong	arg03, fp
178b0     04 4E 05 F1 | 	add	fp, #4
178b4     A7 14 62 FC | 	wrlong	arg02, fp
178b8     04 4E 05 F1 | 	add	fp, #4
178bc     A7 12 62 FC | 	wrlong	arg01, fp
178c0     14 4E 85 F1 | 	sub	fp, #20
178c4     90 41 BF FD | 	call	#_pop
178c8     FF 16 02 F6 | 	mov	arg03, result3
178cc     A7 FA 61 FC | 	wrlong	result1, fp
178d0     04 4E 05 F1 | 	add	fp, #4
178d4     A7 FC 61 FC | 	wrlong	result2, fp
178d8     04 4E 05 F1 | 	add	fp, #4
178dc     A7 16 62 FC | 	wrlong	arg03, fp
178e0     08 4E 85 F1 | 	sub	fp, #8
178e4     A7 12 02 F6 | 	mov	arg01, fp
178e8     3C E2 BF FD | 	call	#_converttoint
178ec     1C 4E 05 F1 | 	add	fp, #28
178f0     A7 FA 61 FC | 	wrlong	result1, fp
178f4     10 4E 85 F1 | 	sub	fp, #16
178f8     A7 12 02 F6 | 	mov	arg01, fp
178fc     0C 4E 85 F1 | 	sub	fp, #12
17900     24 E2 BF FD | 	call	#_converttoint
17904     FD 16 02 F6 | 	mov	arg03, result1
17908     20 4E 05 F1 | 	add	fp, #32
1790c     A7 16 62 FC | 	wrlong	arg03, fp
17910     F2 12 02 FB | 	rdlong	arg01, objptr
17914     04 4E 85 F1 | 	sub	fp, #4
17918     A7 FE 01 FB | 	rdlong	result3, fp
1791c     FF 12 02 F1 | 	add	arg01, result3
17920     1C 4E 85 F1 | 	sub	fp, #28
17924     0A 16 66 F0 | 	shl	arg03, #10
17928     0B 13 02 F1 | 	add	arg01, arg03
1792c     90 5D B0 FD | 	call	#_pspeek
17930     FD FA E1 F8 | 	getbyte	result1, result1, #0
17934     A7 FA 61 FC | 	wrlong	result1, fp
17938     08 4E 05 F1 | 	add	fp, #8
1793c     A7 3A 68 FC | 	wrlong	#29, fp
17940     08 4E 85 F1 | 	sub	fp, #8
17944     A7 12 02 F6 | 	mov	arg01, fp
17948     A4 41 BF FD | 	call	#_push
1794c                 | LR__1971
1794c     A7 F0 03 F6 | 	mov	ptra, fp
17950     B2 00 A0 FD | 	call	#popregs_
17954                 | _do_getpixel_ret
17954     2D 00 64 FD | 	ret
17958                 | 
17958                 | ' 
17958                 | ' sub do_log
17958                 | _do_log
17958     01 4A 05 F6 | 	mov	COUNT_, #1
1795c     A8 00 A0 FD | 	call	#pushregs_
17960     14 F0 07 F1 | 	add	ptra, #20
17964     4A 00 00 FF 
17968     80 E4 05 F1 | 	add	objptr, ##38016
1796c     F2 1E 02 FB | 	rdlong	local01, objptr
17970     0F 17 02 F6 | 	mov	arg03, local01
17974     01 16 66 F0 | 	shl	arg03, #1
17978     0F 17 02 F1 | 	add	arg03, local01
1797c     02 16 66 F0 | 	shl	arg03, #2
17980     03 00 00 FF 
17984     04 E4 85 F1 | 	sub	objptr, ##1540
17988     F2 16 02 F1 | 	add	arg03, objptr
1798c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
17990     0C 4E 05 F1 | 	add	fp, #12
17994     A7 16 62 FC | 	wrlong	arg03, fp
17998                 | ' 
17998                 | ' numpar=compiledline(lineptr_e).result.uresult
17998                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
17998     0C 4E 85 F1 | 	sub	fp, #12
1799c     47 00 00 FF 
179a0     7C E4 85 F1 | 	sub	objptr, ##36476
179a4     0C 4E 05 51 |  if_ne	add	fp, #12
179a8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
179ac     0C 4E 85 51 |  if_ne	sub	fp, #12
179b0     03 1E 16 52 |  if_ne	cmp	local01, #3 wc
179b4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1980
179b8     00 12 06 F6 | 	mov	arg01, #0
179bc     9C EA B0 FD | 	call	#__system___getiolock_0540
179c0     FD 12 02 F6 | 	mov	arg01, result1
179c4     54 90 B0 FD | 	call	#__system___lockmem
179c8     85 01 00 FF 
179cc     CE 14 06 F6 | 	mov	arg02, ##@LR__5505
179d0     00 12 06 F6 | 	mov	arg01, #0
179d4     00 16 06 F6 | 	mov	arg03, #0
179d8     34 9D B0 FD | 	call	#__system___basic_print_string
179dc     00 12 06 F6 | 	mov	arg01, #0
179e0     78 EA B0 FD | 	call	#__system___getiolock_0540
179e4     FD 00 68 FC | 	wrlong	#0, result1
179e8     27 12 06 F6 | 	mov	arg01, #39
179ec     94 5A B0 FD | 	call	#_printerror
179f0     D0 00 90 FD | 	jmp	#LR__1983
179f4                 | LR__1980
179f4                 | ' 
179f4                 | ' if numpar=2 then 
179f4     0C 4E 05 F1 | 	add	fp, #12
179f8     A7 1E 02 FB | 	rdlong	local01, fp
179fc     0C 4E 85 F1 | 	sub	fp, #12
17a00     02 1E 0E F2 | 	cmp	local01, #2 wz
17a04     48 00 90 5D |  if_ne	jmp	#LR__1981
17a08     4C 40 BF FD | 	call	#_pop
17a0c     FF 1E 02 F6 | 	mov	local01, result3
17a10     A7 FA 61 FC | 	wrlong	result1, fp
17a14     04 4E 05 F1 | 	add	fp, #4
17a18     A7 FC 61 FC | 	wrlong	result2, fp
17a1c     04 4E 05 F1 | 	add	fp, #4
17a20     A7 1E 62 FC | 	wrlong	local01, fp
17a24     08 4E 85 F1 | 	sub	fp, #8
17a28     A7 12 02 F6 | 	mov	arg01, fp
17a2c     B4 E1 BF FD | 	call	#_converttofloat
17a30     FD 14 02 F6 | 	mov	arg02, result1
17a34     FC 16 20 FF 
17a38     54 12 06 F6 | 	mov	arg01, ##1076754516
17a3c     3C CB B0 FD | 	call	#__system____builtin_logbase
17a40     10 4E 05 F1 | 	add	fp, #16
17a44     A7 FA 61 FC | 	wrlong	result1, fp
17a48     10 4E 85 F1 | 	sub	fp, #16
17a4c     10 00 90 FD | 	jmp	#LR__1982
17a50                 | LR__1981
17a50     10 4E 05 F1 | 	add	fp, #16
17a54     00 C0 9F FF 
17a58     A7 00 68 FC | 	wrlong	##1065353216, fp
17a5c     10 4E 85 F1 | 	sub	fp, #16
17a60                 | LR__1982
17a60     F4 3F BF FD | 	call	#_pop
17a64     FF 1E 02 F6 | 	mov	local01, result3
17a68     A7 FA 61 FC | 	wrlong	result1, fp
17a6c     04 4E 05 F1 | 	add	fp, #4
17a70     A7 FC 61 FC | 	wrlong	result2, fp
17a74     04 4E 05 F1 | 	add	fp, #4
17a78     A7 1E 62 FC | 	wrlong	local01, fp
17a7c     08 4E 85 F1 | 	sub	fp, #8
17a80     A7 12 02 F6 | 	mov	arg01, fp
17a84     5C E1 BF FD | 	call	#_converttofloat
17a88     FD 14 02 F6 | 	mov	arg02, result1
17a8c     FC 16 20 FF 
17a90     54 12 06 F6 | 	mov	arg01, ##1076754516
17a94     E4 CA B0 FD | 	call	#__system____builtin_logbase
17a98     FD 12 02 F6 | 	mov	arg01, result1
17a9c     10 4E 05 F1 | 	add	fp, #16
17aa0     A7 14 02 FB | 	rdlong	arg02, fp
17aa4     10 4E 85 F1 | 	sub	fp, #16
17aa8     28 BD B0 FD | 	call	#__system___float_div
17aac     A7 FA 61 FC | 	wrlong	result1, fp
17ab0     08 4E 05 F1 | 	add	fp, #8
17ab4     A7 3C 68 FC | 	wrlong	#30, fp
17ab8     08 4E 85 F1 | 	sub	fp, #8
17abc     A7 12 02 F6 | 	mov	arg01, fp
17ac0     2C 40 BF FD | 	call	#_push
17ac4                 | LR__1983
17ac4     A7 F0 03 F6 | 	mov	ptra, fp
17ac8     B2 00 A0 FD | 	call	#popregs_
17acc                 | _do_log_ret
17acc     2D 00 64 FD | 	ret
17ad0                 | 
17ad0                 | ' 
17ad0                 | ' sub do_defsprite
17ad0                 | _do_defsprite
17ad0     07 4A 05 F6 | 	mov	COUNT_, #7
17ad4     A8 00 A0 FD | 	call	#pushregs_
17ad8     60 F0 07 F1 | 	add	ptra, #96
17adc     78 3F BF FD | 	call	#_pop
17ae0     FD 16 02 F6 | 	mov	arg03, result1
17ae4     FE 14 02 F6 | 	mov	arg02, result2
17ae8     FF 12 02 F6 | 	mov	arg01, result3
17aec     30 4E 05 F1 | 	add	fp, #48
17af0     A7 16 62 FC | 	wrlong	arg03, fp
17af4     04 4E 05 F1 | 	add	fp, #4
17af8     A7 14 62 FC | 	wrlong	arg02, fp
17afc     04 4E 05 F1 | 	add	fp, #4
17b00     A7 12 62 FC | 	wrlong	arg01, fp
17b04     38 4E 85 F1 | 	sub	fp, #56
17b08     4C 3F BF FD | 	call	#_pop
17b0c     FD 16 02 F6 | 	mov	arg03, result1
17b10     FE 14 02 F6 | 	mov	arg02, result2
17b14     FF 12 02 F6 | 	mov	arg01, result3
17b18     24 4E 05 F1 | 	add	fp, #36
17b1c     A7 16 62 FC | 	wrlong	arg03, fp
17b20     04 4E 05 F1 | 	add	fp, #4
17b24     A7 14 62 FC | 	wrlong	arg02, fp
17b28     04 4E 05 F1 | 	add	fp, #4
17b2c     A7 12 62 FC | 	wrlong	arg01, fp
17b30     2C 4E 85 F1 | 	sub	fp, #44
17b34     20 3F BF FD | 	call	#_pop
17b38     FD 16 02 F6 | 	mov	arg03, result1
17b3c     FE 14 02 F6 | 	mov	arg02, result2
17b40     FF 12 02 F6 | 	mov	arg01, result3
17b44     18 4E 05 F1 | 	add	fp, #24
17b48     A7 16 62 FC | 	wrlong	arg03, fp
17b4c     04 4E 05 F1 | 	add	fp, #4
17b50     A7 14 62 FC | 	wrlong	arg02, fp
17b54     04 4E 05 F1 | 	add	fp, #4
17b58     A7 12 62 FC | 	wrlong	arg01, fp
17b5c     20 4E 85 F1 | 	sub	fp, #32
17b60     F4 3E BF FD | 	call	#_pop
17b64     FD 16 02 F6 | 	mov	arg03, result1
17b68     FE 14 02 F6 | 	mov	arg02, result2
17b6c     FF 12 02 F6 | 	mov	arg01, result3
17b70     0C 4E 05 F1 | 	add	fp, #12
17b74     A7 16 62 FC | 	wrlong	arg03, fp
17b78     04 4E 05 F1 | 	add	fp, #4
17b7c     A7 14 62 FC | 	wrlong	arg02, fp
17b80     04 4E 05 F1 | 	add	fp, #4
17b84     A7 12 62 FC | 	wrlong	arg01, fp
17b88     14 4E 85 F1 | 	sub	fp, #20
17b8c     C8 3E BF FD | 	call	#_pop
17b90     FF 16 02 F6 | 	mov	arg03, result3
17b94     A7 FA 61 FC | 	wrlong	result1, fp
17b98     04 4E 05 F1 | 	add	fp, #4
17b9c     A7 FC 61 FC | 	wrlong	result2, fp
17ba0     04 4E 05 F1 | 	add	fp, #4
17ba4     A7 16 62 FC | 	wrlong	arg03, fp
17ba8     08 4E 85 F1 | 	sub	fp, #8
17bac     A7 12 02 F6 | 	mov	arg01, fp
17bb0     74 DF BF FD | 	call	#_converttoint
17bb4     3C 4E 05 F1 | 	add	fp, #60
17bb8     A7 FA 61 FC | 	wrlong	result1, fp
17bbc     30 4E 85 F1 | 	sub	fp, #48
17bc0     A7 12 02 F6 | 	mov	arg01, fp
17bc4     0C 4E 85 F1 | 	sub	fp, #12
17bc8     5C DF BF FD | 	call	#_converttoint
17bcc     40 4E 05 F1 | 	add	fp, #64
17bd0     A7 FA 61 FC | 	wrlong	result1, fp
17bd4     28 4E 85 F1 | 	sub	fp, #40
17bd8     A7 12 02 F6 | 	mov	arg01, fp
17bdc     18 4E 85 F1 | 	sub	fp, #24
17be0     44 DF BF FD | 	call	#_converttoint
17be4     44 4E 05 F1 | 	add	fp, #68
17be8     A7 FA 61 FC | 	wrlong	result1, fp
17bec     20 4E 85 F1 | 	sub	fp, #32
17bf0     A7 12 02 F6 | 	mov	arg01, fp
17bf4     24 4E 85 F1 | 	sub	fp, #36
17bf8     2C DF BF FD | 	call	#_converttoint
17bfc     48 4E 05 F1 | 	add	fp, #72
17c00     A7 FA 61 FC | 	wrlong	result1, fp
17c04     18 4E 85 F1 | 	sub	fp, #24
17c08     A7 12 02 F6 | 	mov	arg01, fp
17c0c     30 4E 85 F1 | 	sub	fp, #48
17c10     14 DF BF FD | 	call	#_converttoint
17c14     4C 4E 05 F1 | 	add	fp, #76
17c18     A7 FA 61 FC | 	wrlong	result1, fp
17c1c                 | ' 
17c1c                 | ' t5=pop()
17c1c                 | ' t4=pop()
17c1c                 | ' t3=pop()
17c1c                 | ' t2=pop()
17c1c                 | ' t1=pop()
17c1c                 | ' 
17c1c                 | ' ' do convert, defsprite is not a racing command
17c1c                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
17c1c                 | '  
17c1c                 | ' ' todo: check parameters for linits
17c1c                 | ' if sprite(a1)<> nil then delete(sprite(a1))
17c1c     10 4E 85 F1 | 	sub	fp, #16
17c20     A7 16 02 FB | 	rdlong	arg03, fp
17c24     3C 4E 85 F1 | 	sub	fp, #60
17c28     02 16 66 F0 | 	shl	arg03, #2
17c2c     51 00 00 FF 
17c30     64 E5 05 F1 | 	add	objptr, ##41828
17c34     F2 16 02 F1 | 	add	arg03, objptr
17c38     0B 17 0A FB | 	rdlong	arg03, arg03 wz
17c3c     51 00 00 FF 
17c40     64 E5 85 F1 | 	sub	objptr, ##41828
17c44     2C 00 90 AD |  if_e	jmp	#LR__1990
17c48     3C 4E 05 F1 | 	add	fp, #60
17c4c     A7 16 02 FB | 	rdlong	arg03, fp
17c50     3C 4E 85 F1 | 	sub	fp, #60
17c54     02 16 66 F0 | 	shl	arg03, #2
17c58     51 00 00 FF 
17c5c     64 E5 05 F1 | 	add	objptr, ##41828
17c60     F2 16 02 F1 | 	add	arg03, objptr
17c64     0B 13 02 FB | 	rdlong	arg01, arg03
17c68     51 00 00 FF 
17c6c     64 E5 85 F1 | 	sub	objptr, ##41828
17c70     9C CD B0 FD | 	call	#__system___gc_free
17c74                 | LR__1990
17c74     3C 4E 05 F1 | 	add	fp, #60
17c78     A7 1E 02 FB | 	rdlong	local01, fp
17c7c     0C 4E 05 F1 | 	add	fp, #12
17c80     A7 16 02 FB | 	rdlong	arg03, fp
17c84     04 4E 05 F1 | 	add	fp, #4
17c88     A7 14 02 FB | 	rdlong	arg02, fp
17c8c     0A 17 02 FD | 	qmul	arg03, arg02
17c90     02 1E 66 F0 | 	shl	local01, #2
17c94     51 00 00 FF 
17c98     64 E5 05 F1 | 	add	objptr, ##41828
17c9c     F2 1E 02 F1 | 	add	local01, objptr
17ca0     4C 4E 85 F1 | 	sub	fp, #76
17ca4     51 00 00 FF 
17ca8     64 E5 85 F1 | 	sub	objptr, ##41828
17cac     18 12 62 FD | 	getqx	arg01
17cb0     20 CC B0 FD | 	call	#__system___gc_alloc_managed
17cb4     0F FB 61 FC | 	wrlong	result1, local01
17cb8                 | ' for y=a3 to a3+a5-1
17cb8     44 4E 05 F1 | 	add	fp, #68
17cbc     A7 20 02 FB | 	rdlong	local02, fp
17cc0     0C 4E 05 F1 | 	add	fp, #12
17cc4     A7 20 62 FC | 	wrlong	local02, fp
17cc8     0C 4E 85 F1 | 	sub	fp, #12
17ccc     A7 22 02 FB | 	rdlong	local03, fp
17cd0     08 4E 05 F1 | 	add	fp, #8
17cd4     A7 24 02 FB | 	rdlong	local04, fp
17cd8     4C 4E 85 F1 | 	sub	fp, #76
17cdc     12 23 02 F1 | 	add	local03, local04
17ce0                 | LR__1991
17ce0     50 4E 05 F1 | 	add	fp, #80
17ce4     A7 20 02 FB | 	rdlong	local02, fp
17ce8     50 4E 85 F1 | 	sub	fp, #80
17cec     11 21 52 F2 | 	cmps	local02, local03 wc
17cf0     F4 00 90 3D |  if_ae	jmp	#LR__1994
17cf4                 | '   for x=a2 to a4+a2-1
17cf4     40 4E 05 F1 | 	add	fp, #64
17cf8     A7 1E 02 FB | 	rdlong	local01, fp
17cfc     14 4E 05 F1 | 	add	fp, #20
17d00     A7 1E 62 FC | 	wrlong	local01, fp
17d04     0C 4E 85 F1 | 	sub	fp, #12
17d08     A7 26 02 FB | 	rdlong	local05, fp
17d0c     08 4E 85 F1 | 	sub	fp, #8
17d10     A7 28 02 FB | 	rdlong	local06, fp
17d14     40 4E 85 F1 | 	sub	fp, #64
17d18     14 27 02 F1 | 	add	local05, local06
17d1c                 | LR__1992
17d1c     54 4E 05 F1 | 	add	fp, #84
17d20     A7 1E 02 FB | 	rdlong	local01, fp
17d24     54 4E 85 F1 | 	sub	fp, #84
17d28     13 1F 52 F2 | 	cmps	local01, local05 wc
17d2c     A0 00 90 3D |  if_ae	jmp	#LR__1993
17d30     3C 4E 05 F1 | 	add	fp, #60
17d34     A7 28 02 FB | 	rdlong	local06, fp
17d38     18 4E 05 F1 | 	add	fp, #24
17d3c     A7 24 02 FB | 	rdlong	local04, fp
17d40     14 4E 85 F1 | 	sub	fp, #20
17d44     A7 20 02 FB | 	rdlong	local02, fp
17d48     10 4E 05 F1 | 	add	fp, #16
17d4c     A7 1E 02 FB | 	rdlong	local01, fp
17d50     0F 17 02 F6 | 	mov	arg03, local01
17d54     0C 4E 85 F1 | 	sub	fp, #12
17d58     A7 14 02 FB | 	rdlong	arg02, fp
17d5c     0A 17 82 F1 | 	sub	arg03, arg02
17d60     04 4E 05 F1 | 	add	fp, #4
17d64     A7 14 02 FB | 	rdlong	arg02, fp
17d68     0A 17 02 FD | 	qmul	arg03, arg02
17d6c     02 28 66 F0 | 	shl	local06, #2
17d70     51 00 00 FF 
17d74     64 E5 05 F1 | 	add	objptr, ##41828
17d78     F2 28 02 F1 | 	add	local06, objptr
17d7c     14 29 02 FB | 	rdlong	local06, local06
17d80     12 2B 02 F6 | 	mov	local07, local04
17d84     10 2B 82 F1 | 	sub	local07, local02
17d88     51 00 00 FF 
17d8c     64 E5 85 F1 | 	sub	objptr, ##41828
17d90     F2 12 02 FB | 	rdlong	arg01, objptr
17d94     12 13 02 F1 | 	add	arg01, local04
17d98     48 4E 85 F1 | 	sub	fp, #72
17d9c     0A 1E 66 F0 | 	shl	local01, #10
17da0     0F 13 02 F1 | 	add	arg01, local01
17da4     18 24 62 FD | 	getqx	local04
17da8     12 2B 02 F1 | 	add	local07, local04
17dac     14 2B 02 F1 | 	add	local07, local06
17db0     0C 59 B0 FD | 	call	#_pspeek
17db4     15 FB 41 FC | 	wrbyte	result1, local07
17db8     54 4E 05 F1 | 	add	fp, #84
17dbc     A7 2A 02 FB | 	rdlong	local07, fp
17dc0     01 2A 06 F1 | 	add	local07, #1
17dc4     A7 2A 62 FC | 	wrlong	local07, fp
17dc8     54 4E 85 F1 | 	sub	fp, #84
17dcc     4C FF 9F FD | 	jmp	#LR__1992
17dd0                 | LR__1993
17dd0     50 4E 05 F1 | 	add	fp, #80
17dd4     A7 2A 02 FB | 	rdlong	local07, fp
17dd8     01 2A 06 F1 | 	add	local07, #1
17ddc     A7 2A 62 FC | 	wrlong	local07, fp
17de0     50 4E 85 F1 | 	sub	fp, #80
17de4     F8 FE 9F FD | 	jmp	#LR__1991
17de8                 | LR__1994
17de8     3C 4E 05 F1 | 	add	fp, #60
17dec     A7 2A 02 FB | 	rdlong	local07, fp
17df0     15 13 02 F6 | 	mov	arg01, local07
17df4     3C 4E 85 F1 | 	sub	fp, #60
17df8     02 2A 66 F0 | 	shl	local07, #2
17dfc     51 00 00 FF 
17e00     64 E5 05 F1 | 	add	objptr, ##41828
17e04     F2 2A 02 F1 | 	add	local07, objptr
17e08     15 15 02 FB | 	rdlong	arg02, local07
17e0c     51 00 00 FF 
17e10     64 E5 85 F1 | 	sub	objptr, ##41828
17e14     78 65 B0 FD | 	call	#_hg010b_spin2_setspriteptr
17e18     3C 4E 05 F1 | 	add	fp, #60
17e1c     A7 12 02 FB | 	rdlong	arg01, fp
17e20     0C 4E 05 F1 | 	add	fp, #12
17e24     A7 14 02 FB | 	rdlong	arg02, fp
17e28     04 4E 05 F1 | 	add	fp, #4
17e2c     A7 16 02 FB | 	rdlong	arg03, fp
17e30     4C 4E 85 F1 | 	sub	fp, #76
17e34     E8 65 B0 FD | 	call	#_hg010b_spin2_setspritesize
17e38     A7 F0 03 F6 | 	mov	ptra, fp
17e3c     B2 00 A0 FD | 	call	#popregs_
17e40                 | _do_defsprite_ret
17e40     2D 00 64 FD | 	ret
17e44                 | 
17e44                 | ' 
17e44                 | ' sub do_sprite
17e44                 | _do_sprite
17e44     00 4A 05 F6 | 	mov	COUNT_, #0
17e48     A8 00 A0 FD | 	call	#pushregs_
17e4c     30 F0 07 F1 | 	add	ptra, #48
17e50     04 3C BF FD | 	call	#_pop
17e54     FD 16 02 F6 | 	mov	arg03, result1
17e58     FE 14 02 F6 | 	mov	arg02, result2
17e5c     FF 12 02 F6 | 	mov	arg01, result3
17e60     18 4E 05 F1 | 	add	fp, #24
17e64     A7 16 62 FC | 	wrlong	arg03, fp
17e68     04 4E 05 F1 | 	add	fp, #4
17e6c     A7 14 62 FC | 	wrlong	arg02, fp
17e70     04 4E 05 F1 | 	add	fp, #4
17e74     A7 12 62 FC | 	wrlong	arg01, fp
17e78     20 4E 85 F1 | 	sub	fp, #32
17e7c     D8 3B BF FD | 	call	#_pop
17e80     FD 16 02 F6 | 	mov	arg03, result1
17e84     FE 14 02 F6 | 	mov	arg02, result2
17e88     FF 12 02 F6 | 	mov	arg01, result3
17e8c     0C 4E 05 F1 | 	add	fp, #12
17e90     A7 16 62 FC | 	wrlong	arg03, fp
17e94     04 4E 05 F1 | 	add	fp, #4
17e98     A7 14 62 FC | 	wrlong	arg02, fp
17e9c     04 4E 05 F1 | 	add	fp, #4
17ea0     A7 12 62 FC | 	wrlong	arg01, fp
17ea4     14 4E 85 F1 | 	sub	fp, #20
17ea8     AC 3B BF FD | 	call	#_pop
17eac     FF 16 02 F6 | 	mov	arg03, result3
17eb0     A7 FA 61 FC | 	wrlong	result1, fp
17eb4     04 4E 05 F1 | 	add	fp, #4
17eb8     A7 FC 61 FC | 	wrlong	result2, fp
17ebc     04 4E 05 F1 | 	add	fp, #4
17ec0     A7 16 62 FC | 	wrlong	arg03, fp
17ec4     08 4E 85 F1 | 	sub	fp, #8
17ec8     A7 12 02 F6 | 	mov	arg01, fp
17ecc     58 DC BF FD | 	call	#_converttoint
17ed0     24 4E 05 F1 | 	add	fp, #36
17ed4     A7 FA 61 FC | 	wrlong	result1, fp
17ed8     18 4E 85 F1 | 	sub	fp, #24
17edc     A7 12 02 F6 | 	mov	arg01, fp
17ee0     0C 4E 85 F1 | 	sub	fp, #12
17ee4     40 DC BF FD | 	call	#_converttoint
17ee8     28 4E 05 F1 | 	add	fp, #40
17eec     A7 FA 61 FC | 	wrlong	result1, fp
17ef0     10 4E 85 F1 | 	sub	fp, #16
17ef4     A7 12 02 F6 | 	mov	arg01, fp
17ef8     18 4E 85 F1 | 	sub	fp, #24
17efc     28 DC BF FD | 	call	#_converttoint
17f00     2C 4E 05 F1 | 	add	fp, #44
17f04     A7 FA 61 FC | 	wrlong	result1, fp
17f08     08 4E 85 F1 | 	sub	fp, #8
17f0c     A7 12 02 FB | 	rdlong	arg01, fp
17f10     04 4E 05 F1 | 	add	fp, #4
17f14     A7 14 02 FB | 	rdlong	arg02, fp
17f18     FD 16 02 F6 | 	mov	arg03, result1
17f1c     28 4E 85 F1 | 	sub	fp, #40
17f20     94 64 B0 FD | 	call	#_hg010b_spin2_setspritepos
17f24     A7 F0 03 F6 | 	mov	ptra, fp
17f28     B2 00 A0 FD | 	call	#popregs_
17f2c                 | _do_sprite_ret
17f2c     2D 00 64 FD | 	ret
17f30                 | 
17f30                 | ' 
17f30                 | ' sub do_mousex
17f30                 | _do_mousex
17f30     00 4A 05 F6 | 	mov	COUNT_, #0
17f34     A8 00 A0 FD | 	call	#pushregs_
17f38     0C F0 07 F1 | 	add	ptra, #12
17f3c     08 4E 05 F1 | 	add	fp, #8
17f40     A7 3A 68 FC | 	wrlong	#29, fp
17f44     08 4E 85 F1 | 	sub	fp, #8
17f48     51 00 00 FF 
17f4c     1C E5 05 F1 | 	add	objptr, ##41756
17f50     F2 12 02 FB | 	rdlong	arg01, objptr
17f54     51 00 00 FF 
17f58     1C E5 85 F1 | 	sub	objptr, ##41756
17f5c     A7 12 62 FC | 	wrlong	arg01, fp
17f60     A7 12 02 F6 | 	mov	arg01, fp
17f64     88 3B BF FD | 	call	#_push
17f68     A7 F0 03 F6 | 	mov	ptra, fp
17f6c     B2 00 A0 FD | 	call	#popregs_
17f70                 | _do_mousex_ret
17f70     2D 00 64 FD | 	ret
17f74                 | 
17f74                 | ' 
17f74                 | ' sub do_mousey
17f74                 | _do_mousey
17f74     00 4A 05 F6 | 	mov	COUNT_, #0
17f78     A8 00 A0 FD | 	call	#pushregs_
17f7c     0C F0 07 F1 | 	add	ptra, #12
17f80     08 4E 05 F1 | 	add	fp, #8
17f84     A7 3A 68 FC | 	wrlong	#29, fp
17f88     08 4E 85 F1 | 	sub	fp, #8
17f8c     51 00 00 FF 
17f90     20 E5 05 F1 | 	add	objptr, ##41760
17f94     F2 12 02 FB | 	rdlong	arg01, objptr
17f98     51 00 00 FF 
17f9c     20 E5 85 F1 | 	sub	objptr, ##41760
17fa0     A7 12 62 FC | 	wrlong	arg01, fp
17fa4     A7 12 02 F6 | 	mov	arg01, fp
17fa8     44 3B BF FD | 	call	#_push
17fac     A7 F0 03 F6 | 	mov	ptra, fp
17fb0     B2 00 A0 FD | 	call	#popregs_
17fb4                 | _do_mousey_ret
17fb4     2D 00 64 FD | 	ret
17fb8                 | 
17fb8                 | ' 
17fb8                 | ' sub do_mousew
17fb8                 | _do_mousew
17fb8     00 4A 05 F6 | 	mov	COUNT_, #0
17fbc     A8 00 A0 FD | 	call	#pushregs_
17fc0     0C F0 07 F1 | 	add	ptra, #12
17fc4     08 4E 05 F1 | 	add	fp, #8
17fc8     A7 38 68 FC | 	wrlong	#28, fp
17fcc     08 4E 85 F1 | 	sub	fp, #8
17fd0     51 00 00 FF 
17fd4     28 E5 05 F1 | 	add	objptr, ##41768
17fd8     F2 12 02 FB | 	rdlong	arg01, objptr
17fdc     51 00 00 FF 
17fe0     28 E5 85 F1 | 	sub	objptr, ##41768
17fe4     A7 12 62 FC | 	wrlong	arg01, fp
17fe8     A7 12 02 F6 | 	mov	arg01, fp
17fec     00 3B BF FD | 	call	#_push
17ff0     A7 F0 03 F6 | 	mov	ptra, fp
17ff4     B2 00 A0 FD | 	call	#popregs_
17ff8                 | _do_mousew_ret
17ff8     2D 00 64 FD | 	ret
17ffc                 | 
17ffc                 | ' 
17ffc                 | ' sub do_mousek
17ffc                 | _do_mousek
17ffc     00 4A 05 F6 | 	mov	COUNT_, #0
18000     A8 00 A0 FD | 	call	#pushregs_
18004     0C F0 07 F1 | 	add	ptra, #12
18008     08 4E 05 F1 | 	add	fp, #8
1800c     A7 3A 68 FC | 	wrlong	#29, fp
18010     08 4E 85 F1 | 	sub	fp, #8
18014     51 00 00 FF 
18018     24 E5 05 F1 | 	add	objptr, ##41764
1801c     F2 12 02 FB | 	rdlong	arg01, objptr
18020     51 00 00 FF 
18024     24 E5 85 F1 | 	sub	objptr, ##41764
18028     A7 12 62 FC | 	wrlong	arg01, fp
1802c     A7 12 02 F6 | 	mov	arg01, fp
18030     BC 3A BF FD | 	call	#_push
18034     A7 F0 03 F6 | 	mov	ptra, fp
18038     B2 00 A0 FD | 	call	#popregs_
1803c                 | _do_mousek_ret
1803c     2D 00 64 FD | 	ret
18040                 | 
18040                 | ' 
18040                 | ' 
18040                 | ' sub do_rdpin
18040                 | _do_rdpin
18040     00 4A 05 F6 | 	mov	COUNT_, #0
18044     A8 00 A0 FD | 	call	#pushregs_
18048     0C F0 07 F1 | 	add	ptra, #12
1804c     08 3A BF FD | 	call	#_pop
18050     A7 FA 61 FC | 	wrlong	result1, fp
18054     04 4E 05 F1 | 	add	fp, #4
18058     A7 FC 61 FC | 	wrlong	result2, fp
1805c     04 4E 05 F1 | 	add	fp, #4
18060     A7 FE 61 FC | 	wrlong	result3, fp
18064     08 4E 85 F1 | 	sub	fp, #8
18068     A7 12 02 F6 | 	mov	arg01, fp
1806c     B8 DA BF FD | 	call	#_converttoint
18070     FD FA 89 FA | 	rdpin	result1, result1
18074     52 00 00 FF 
18078     14 E4 05 F1 | 	add	objptr, ##42004
1807c     F2 FA 61 FC | 	wrlong	result1, objptr
18080     52 00 00 FF 
18084     14 E4 85 F1 | 	sub	objptr, ##42004
18088     08 4E 05 F1 | 	add	fp, #8
1808c     A7 3A 68 FC | 	wrlong	#29, fp
18090     08 4E 85 F1 | 	sub	fp, #8
18094     A7 08 68 FC | 	wrlong	#4, fp
18098     A7 12 02 F6 | 	mov	arg01, fp
1809c     50 3A BF FD | 	call	#_push
180a0     A7 F0 03 F6 | 	mov	ptra, fp
180a4     B2 00 A0 FD | 	call	#popregs_
180a8                 | _do_rdpin_ret
180a8     2D 00 64 FD | 	ret
180ac                 | 
180ac                 | ' 
180ac                 | ' sub do_rqpin
180ac                 | _do_rqpin
180ac     00 4A 05 F6 | 	mov	COUNT_, #0
180b0     A8 00 A0 FD | 	call	#pushregs_
180b4     0C F0 07 F1 | 	add	ptra, #12
180b8     9C 39 BF FD | 	call	#_pop
180bc     A7 FA 61 FC | 	wrlong	result1, fp
180c0     04 4E 05 F1 | 	add	fp, #4
180c4     A7 FC 61 FC | 	wrlong	result2, fp
180c8     04 4E 05 F1 | 	add	fp, #4
180cc     A7 FE 61 FC | 	wrlong	result3, fp
180d0     08 4E 85 F1 | 	sub	fp, #8
180d4     A7 12 02 F6 | 	mov	arg01, fp
180d8     4C DA BF FD | 	call	#_converttoint
180dc     FD 12 02 F6 | 	mov	arg01, result1
180e0     00 FA 05 F6 | 	mov	result1, #0
180e4     09 FB 81 FA | 	rqpin	result1, arg01
180e8     52 00 00 FF 
180ec     14 E4 05 F1 | 	add	objptr, ##42004
180f0     F2 FA 61 FC | 	wrlong	result1, objptr
180f4     52 00 00 FF 
180f8     14 E4 85 F1 | 	sub	objptr, ##42004
180fc     08 4E 05 F1 | 	add	fp, #8
18100     A7 3A 68 FC | 	wrlong	#29, fp
18104     08 4E 85 F1 | 	sub	fp, #8
18108     A7 08 68 FC | 	wrlong	#4, fp
1810c     A7 12 02 F6 | 	mov	arg01, fp
18110     DC 39 BF FD | 	call	#_push
18114     A7 F0 03 F6 | 	mov	ptra, fp
18118     B2 00 A0 FD | 	call	#popregs_
1811c                 | _do_rqpin_ret
1811c     2D 00 64 FD | 	ret
18120                 | 
18120                 | ' 
18120                 | ' sub do_pinread
18120                 | _do_pinread
18120     00 4A 05 F6 | 	mov	COUNT_, #0
18124     A8 00 A0 FD | 	call	#pushregs_
18128     0C F0 07 F1 | 	add	ptra, #12
1812c     28 39 BF FD | 	call	#_pop
18130     A7 FA 61 FC | 	wrlong	result1, fp
18134     04 4E 05 F1 | 	add	fp, #4
18138     A7 FC 61 FC | 	wrlong	result2, fp
1813c     04 4E 05 F1 | 	add	fp, #4
18140     A7 FE 61 FC | 	wrlong	result3, fp
18144     08 4E 85 F1 | 	sub	fp, #8
18148     A7 12 02 F6 | 	mov	arg01, fp
1814c     D8 D9 BF FD | 	call	#_converttoint
18150     FD 12 02 F6 | 	mov	arg01, result1
18154     20 12 CE F7 | 	test	arg01, #32 wz
18158     FF FB 01 56 |  if_ne	mov	result1, inb
1815c     FE FB 01 A6 |  if_e	mov	result1, ina
18160     09 FB 41 F0 | 	shr	result1, arg01
18164     06 12 46 F0 | 	shr	arg01, #6
18168     09 FB 41 F7 | 	zerox	result1, arg01
1816c     52 00 00 FF 
18170     14 E4 05 F1 | 	add	objptr, ##42004
18174     F2 FA 61 FC | 	wrlong	result1, objptr
18178     52 00 00 FF 
1817c     14 E4 85 F1 | 	sub	objptr, ##42004
18180     08 4E 05 F1 | 	add	fp, #8
18184     A7 3A 68 FC | 	wrlong	#29, fp
18188     08 4E 85 F1 | 	sub	fp, #8
1818c     A7 08 68 FC | 	wrlong	#4, fp
18190     A7 12 02 F6 | 	mov	arg01, fp
18194     58 39 BF FD | 	call	#_push
18198     A7 F0 03 F6 | 	mov	ptra, fp
1819c     B2 00 A0 FD | 	call	#popregs_
181a0                 | _do_pinread_ret
181a0     2D 00 64 FD | 	ret
181a4                 | 
181a4                 | ' 
181a4                 | ' sub do_gettime
181a4                 | _do_gettime
181a4     02 4A 05 F6 | 	mov	COUNT_, #2
181a8     A8 00 A0 FD | 	call	#pushregs_
181ac     14 F0 07 F1 | 	add	ptra, #20
181b0                 | ' 
181b0                 | ' const asm 
181b0     1A 1E 72 FD | 	getct	local01 wc
181b4     1A 20 62 FD | 	getct	local02
181b8                 | ' 
181b8                 | ' return hi1, lo1
181b8     10 FD 01 F6 | 	mov	result2, local02
181bc     A7 1E 62 FC | 	wrlong	local01, fp
181c0     04 4E 05 F1 | 	add	fp, #4
181c4     A7 FC 61 FC | 	wrlong	result2, fp
181c8     0C 4E 05 F1 | 	add	fp, #12
181cc     A7 3A 68 FC | 	wrlong	#29, fp
181d0     0C 4E 85 F1 | 	sub	fp, #12
181d4     A7 12 02 FB | 	rdlong	arg01, fp
181d8     04 4E 05 F1 | 	add	fp, #4
181dc     A7 12 62 FC | 	wrlong	arg01, fp
181e0     08 4E 85 F1 | 	sub	fp, #8
181e4     A7 12 02 FB | 	rdlong	arg01, fp
181e8     0C 4E 05 F1 | 	add	fp, #12
181ec     A7 12 62 FC | 	wrlong	arg01, fp
181f0     04 4E 85 F1 | 	sub	fp, #4
181f4     A7 12 02 F6 | 	mov	arg01, fp
181f8     08 4E 85 F1 | 	sub	fp, #8
181fc     F0 38 BF FD | 	call	#_push
18200     A7 F0 03 F6 | 	mov	ptra, fp
18204     B2 00 A0 FD | 	call	#popregs_
18208                 | _do_gettime_ret
18208     2D 00 64 FD | 	ret
1820c                 | 
1820c                 | '    
1820c                 | ' 
1820c                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
1820c                 | ' 
1820c                 | ' '' ----------------------------- Clear the screen
1820c                 | ' 
1820c                 | ' sub do_cls
1820c                 | _do_cls
1820c     37 00 00 FF 
18210     3C E4 05 F1 | 	add	objptr, ##28220
18214     F2 12 02 FB | 	rdlong	arg01, objptr
18218     04 E4 85 F1 | 	sub	objptr, #4
1821c     F2 14 02 FB | 	rdlong	arg02, objptr
18220     37 00 00 FF 
18224     38 E4 85 F1 | 	sub	objptr, ##28216
18228     14 6F B0 FD | 	call	#_hg010b_spin2_cls
1822c     37 00 00 FF 
18230     3C E4 05 F1 | 	add	objptr, ##28220
18234     F2 14 02 FB | 	rdlong	arg02, objptr
18238     14 E4 85 F1 | 	sub	objptr, #20
1823c     F2 14 62 FC | 	wrlong	arg02, objptr
18240     37 00 00 FF 
18244     28 E4 85 F1 | 	sub	objptr, ##28200
18248                 | _do_cls_ret
18248     2D 00 64 FD | 	ret
1824c                 | 
1824c                 | ' 
1824c                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
1824c                 | ' 
1824c                 | ' sub do_color
1824c                 | _do_color
1824c     03 4A 05 F6 | 	mov	COUNT_, #3
18250     A8 00 A0 FD | 	call	#pushregs_
18254     00 38 BF FD | 	call	#_pop
18258     FD 1E 02 F6 | 	mov	local01, result1
1825c     FE 20 02 F6 | 	mov	local02, result2
18260     FF 22 02 F6 | 	mov	local03, result3
18264     37 00 00 FF 
18268     28 E4 05 F1 | 	add	objptr, ##28200
1826c     F2 1E 62 FC | 	wrlong	local01, objptr
18270     37 00 00 FF 
18274     28 E4 85 F1 | 	sub	objptr, ##28200
18278     A7 F0 03 F6 | 	mov	ptra, fp
1827c     B2 00 A0 FD | 	call	#popregs_
18280                 | _do_color_ret
18280     2D 00 64 FD | 	ret
18284                 | 
18284                 | ' 
18284                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
18284                 | ' 
18284                 | ' sub do_plot
18284                 | _do_plot
18284     00 4A 05 F6 | 	mov	COUNT_, #0
18288     A8 00 A0 FD | 	call	#pushregs_
1828c     20 F0 07 F1 | 	add	ptra, #32
18290     C4 37 BF FD | 	call	#_pop
18294     FD 16 02 F6 | 	mov	arg03, result1
18298     FE 14 02 F6 | 	mov	arg02, result2
1829c     FF 12 02 F6 | 	mov	arg01, result3
182a0     0C 4E 05 F1 | 	add	fp, #12
182a4     A7 16 62 FC | 	wrlong	arg03, fp
182a8     04 4E 05 F1 | 	add	fp, #4
182ac     A7 14 62 FC | 	wrlong	arg02, fp
182b0     04 4E 05 F1 | 	add	fp, #4
182b4     A7 12 62 FC | 	wrlong	arg01, fp
182b8     14 4E 85 F1 | 	sub	fp, #20
182bc     98 37 BF FD | 	call	#_pop
182c0     FF 16 02 F6 | 	mov	arg03, result3
182c4     A7 FA 61 FC | 	wrlong	result1, fp
182c8     04 4E 05 F1 | 	add	fp, #4
182cc     A7 FC 61 FC | 	wrlong	result2, fp
182d0     04 4E 05 F1 | 	add	fp, #4
182d4     A7 16 62 FC | 	wrlong	arg03, fp
182d8     08 4E 85 F1 | 	sub	fp, #8
182dc     A7 12 02 F6 | 	mov	arg01, fp
182e0     44 D8 BF FD | 	call	#_converttoint
182e4     18 4E 05 F1 | 	add	fp, #24
182e8     A7 FA 61 FC | 	wrlong	result1, fp
182ec     0C 4E 85 F1 | 	sub	fp, #12
182f0     A7 12 02 F6 | 	mov	arg01, fp
182f4     0C 4E 85 F1 | 	sub	fp, #12
182f8     2C D8 BF FD | 	call	#_converttoint
182fc     1C 4E 05 F1 | 	add	fp, #28
18300     A7 FA 61 FC | 	wrlong	result1, fp
18304     04 4E 85 F1 | 	sub	fp, #4
18308     A7 16 02 FB | 	rdlong	arg03, fp
1830c     37 00 00 FF 
18310     2C E4 05 F1 | 	add	objptr, ##28204
18314     F2 16 62 FC | 	wrlong	arg03, objptr
18318     04 4E 05 F1 | 	add	fp, #4
1831c     A7 14 02 FB | 	rdlong	arg02, fp
18320     1C 4E 85 F1 | 	sub	fp, #28
18324     04 E4 05 F1 | 	add	objptr, #4
18328     F2 14 62 FC | 	wrlong	arg02, objptr
1832c     04 E4 85 F1 | 	sub	objptr, #4
18330     F2 12 02 FB | 	rdlong	arg01, objptr
18334     04 E4 85 F1 | 	sub	objptr, #4
18338     F2 16 02 FB | 	rdlong	arg03, objptr
1833c     37 00 00 FF 
18340     28 E4 85 F1 | 	sub	objptr, ##28200
18344     24 61 B0 FD | 	call	#_hg010b_spin2_putpixel
18348     A7 F0 03 F6 | 	mov	ptra, fp
1834c     B2 00 A0 FD | 	call	#popregs_
18350                 | _do_plot_ret
18350     2D 00 64 FD | 	ret
18354                 | 
18354                 | ' 
18354                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
18354                 | ' 
18354                 | ' sub do_draw
18354                 | _do_draw
18354     00 4A 05 F6 | 	mov	COUNT_, #0
18358     A8 00 A0 FD | 	call	#pushregs_
1835c     20 F0 07 F1 | 	add	ptra, #32
18360     F4 36 BF FD | 	call	#_pop
18364     FD 1A 02 F6 | 	mov	arg05, result1
18368     FE 18 02 F6 | 	mov	arg04, result2
1836c     FF 16 02 F6 | 	mov	arg03, result3
18370     0C 4E 05 F1 | 	add	fp, #12
18374     A7 1A 62 FC | 	wrlong	arg05, fp
18378     04 4E 05 F1 | 	add	fp, #4
1837c     A7 18 62 FC | 	wrlong	arg04, fp
18380     04 4E 05 F1 | 	add	fp, #4
18384     A7 16 62 FC | 	wrlong	arg03, fp
18388     14 4E 85 F1 | 	sub	fp, #20
1838c     C8 36 BF FD | 	call	#_pop
18390     FF 1A 02 F6 | 	mov	arg05, result3
18394     A7 FA 61 FC | 	wrlong	result1, fp
18398     04 4E 05 F1 | 	add	fp, #4
1839c     A7 FC 61 FC | 	wrlong	result2, fp
183a0     04 4E 05 F1 | 	add	fp, #4
183a4     A7 1A 62 FC | 	wrlong	arg05, fp
183a8     08 4E 85 F1 | 	sub	fp, #8
183ac     A7 12 02 F6 | 	mov	arg01, fp
183b0     74 D7 BF FD | 	call	#_converttoint
183b4     18 4E 05 F1 | 	add	fp, #24
183b8     A7 FA 61 FC | 	wrlong	result1, fp
183bc     0C 4E 85 F1 | 	sub	fp, #12
183c0     A7 12 02 F6 | 	mov	arg01, fp
183c4     0C 4E 85 F1 | 	sub	fp, #12
183c8     5C D7 BF FD | 	call	#_converttoint
183cc     1C 4E 05 F1 | 	add	fp, #28
183d0     A7 FA 61 FC | 	wrlong	result1, fp
183d4     37 00 00 FF 
183d8     2C E4 05 F1 | 	add	objptr, ##28204
183dc     F2 12 02 FB | 	rdlong	arg01, objptr
183e0     04 E4 05 F1 | 	add	objptr, #4
183e4     F2 14 02 FB | 	rdlong	arg02, objptr
183e8     04 4E 85 F1 | 	sub	fp, #4
183ec     A7 16 02 FB | 	rdlong	arg03, fp
183f0     FD 18 02 F6 | 	mov	arg04, result1
183f4     18 4E 85 F1 | 	sub	fp, #24
183f8     08 E4 85 F1 | 	sub	objptr, #8
183fc     F2 1A 02 FB | 	rdlong	arg05, objptr
18400     37 00 00 FF 
18404     28 E4 85 F1 | 	sub	objptr, ##28200
18408     10 63 B0 FD | 	call	#_hg010b_spin2_draw
1840c     18 4E 05 F1 | 	add	fp, #24
18410     A7 1A 02 FB | 	rdlong	arg05, fp
18414     37 00 00 FF 
18418     2C E4 05 F1 | 	add	objptr, ##28204
1841c     F2 1A 62 FC | 	wrlong	arg05, objptr
18420     04 4E 05 F1 | 	add	fp, #4
18424     A7 1A 02 FB | 	rdlong	arg05, fp
18428     1C 4E 85 F1 | 	sub	fp, #28
1842c     04 E4 05 F1 | 	add	objptr, #4
18430     F2 1A 62 FC | 	wrlong	arg05, objptr
18434     37 00 00 FF 
18438     30 E4 85 F1 | 	sub	objptr, ##28208
1843c     A7 F0 03 F6 | 	mov	ptra, fp
18440     B2 00 A0 FD | 	call	#popregs_
18444                 | _do_draw_ret
18444     2D 00 64 FD | 	ret
18448                 | 
18448                 | ' 
18448                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
18448                 | ' 
18448                 | ' sub do_fcircle
18448                 | _do_fcircle
18448     02 4A 05 F6 | 	mov	COUNT_, #2
1844c     A8 00 A0 FD | 	call	#pushregs_
18450     24 F0 07 F1 | 	add	ptra, #36
18454     00 36 BF FD | 	call	#_pop
18458     FD 18 02 F6 | 	mov	arg04, result1
1845c     FE 16 02 F6 | 	mov	arg03, result2
18460     FF 14 02 F6 | 	mov	arg02, result3
18464     18 4E 05 F1 | 	add	fp, #24
18468     A7 18 62 FC | 	wrlong	arg04, fp
1846c     04 4E 05 F1 | 	add	fp, #4
18470     A7 16 62 FC | 	wrlong	arg03, fp
18474     04 4E 05 F1 | 	add	fp, #4
18478     A7 14 62 FC | 	wrlong	arg02, fp
1847c     20 4E 85 F1 | 	sub	fp, #32
18480     D4 35 BF FD | 	call	#_pop
18484     FD 18 02 F6 | 	mov	arg04, result1
18488     FE 16 02 F6 | 	mov	arg03, result2
1848c     FF 1E 02 F6 | 	mov	local01, result3
18490     0C 4E 05 F1 | 	add	fp, #12
18494     A7 18 62 FC | 	wrlong	arg04, fp
18498     04 4E 05 F1 | 	add	fp, #4
1849c     A7 16 62 FC | 	wrlong	arg03, fp
184a0     04 4E 05 F1 | 	add	fp, #4
184a4     A7 1E 62 FC | 	wrlong	local01, fp
184a8     14 4E 85 F1 | 	sub	fp, #20
184ac     A8 35 BF FD | 	call	#_pop
184b0     A7 FA 61 FC | 	wrlong	result1, fp
184b4     04 4E 05 F1 | 	add	fp, #4
184b8     A7 FC 61 FC | 	wrlong	result2, fp
184bc     04 4E 05 F1 | 	add	fp, #4
184c0     A7 FE 61 FC | 	wrlong	result3, fp
184c4                 | ' 
184c4                 | ' t3=pop()
184c4                 | ' t2=pop()
184c4                 | ' t1=pop()
184c4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
184c4     FF 18 02 F6 | 	mov	arg04, result3
184c8     08 4E 85 F1 | 	sub	fp, #8
184cc     1C 18 0E F2 | 	cmp	arg04, #28 wz
184d0     08 4E 05 51 |  if_ne	add	fp, #8
184d4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
184d8     08 4E 85 51 |  if_ne	sub	fp, #8
184dc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
184e0     7C 00 90 5D |  if_ne	jmp	#LR__2000
184e4     14 4E 05 F1 | 	add	fp, #20
184e8     A7 1E 02 FB | 	rdlong	local01, fp
184ec     14 4E 85 F1 | 	sub	fp, #20
184f0     1C 1E 0E F2 | 	cmp	local01, #28 wz
184f4     14 4E 05 51 |  if_ne	add	fp, #20
184f8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
184fc     14 4E 85 51 |  if_ne	sub	fp, #20
18500     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18504     58 00 90 5D |  if_ne	jmp	#LR__2000
18508     20 4E 05 F1 | 	add	fp, #32
1850c     A7 1E 02 FB | 	rdlong	local01, fp
18510     20 4E 85 F1 | 	sub	fp, #32
18514     1C 1E 0E F2 | 	cmp	local01, #28 wz
18518     20 4E 05 51 |  if_ne	add	fp, #32
1851c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18520     20 4E 85 51 |  if_ne	sub	fp, #32
18524     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18528     34 00 90 5D |  if_ne	jmp	#LR__2000
1852c     A7 12 02 FB | 	rdlong	arg01, fp
18530     0C 4E 05 F1 | 	add	fp, #12
18534     A7 14 02 FB | 	rdlong	arg02, fp
18538     0C 4E 05 F1 | 	add	fp, #12
1853c     A7 16 02 FB | 	rdlong	arg03, fp
18540     18 4E 85 F1 | 	sub	fp, #24
18544     37 00 00 FF 
18548     28 E4 05 F1 | 	add	objptr, ##28200
1854c     F2 18 02 FB | 	rdlong	arg04, objptr
18550     37 00 00 FF 
18554     28 E4 85 F1 | 	sub	objptr, ##28200
18558     44 66 B0 FD | 	call	#_hg010b_spin2_fcircle
1855c                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
1855c     54 00 90 FD | 	jmp	#LR__2001
18560                 | LR__2000
18560     A7 12 02 F6 | 	mov	arg01, fp
18564     C0 D5 BF FD | 	call	#_converttoint
18568     FD 1E 02 F6 | 	mov	local01, result1
1856c     0C 4E 05 F1 | 	add	fp, #12
18570     A7 12 02 F6 | 	mov	arg01, fp
18574     0C 4E 85 F1 | 	sub	fp, #12
18578     AC D5 BF FD | 	call	#_converttoint
1857c     FD 20 02 F6 | 	mov	local02, result1
18580     18 4E 05 F1 | 	add	fp, #24
18584     A7 12 02 F6 | 	mov	arg01, fp
18588     18 4E 85 F1 | 	sub	fp, #24
1858c     98 D5 BF FD | 	call	#_converttoint
18590     FD 16 02 F6 | 	mov	arg03, result1
18594     37 00 00 FF 
18598     28 E4 05 F1 | 	add	objptr, ##28200
1859c     F2 18 02 FB | 	rdlong	arg04, objptr
185a0     37 00 00 FF 
185a4     28 E4 85 F1 | 	sub	objptr, ##28200
185a8     0F 13 02 F6 | 	mov	arg01, local01
185ac     10 15 02 F6 | 	mov	arg02, local02
185b0     EC 65 B0 FD | 	call	#_hg010b_spin2_fcircle
185b4                 | LR__2001
185b4     A7 F0 03 F6 | 	mov	ptra, fp
185b8     B2 00 A0 FD | 	call	#popregs_
185bc                 | _do_fcircle_ret
185bc     2D 00 64 FD | 	ret
185c0                 | 
185c0                 | ' 
185c0                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
185c0                 | ' 
185c0                 | ' sub do_circle
185c0                 | _do_circle
185c0     02 4A 05 F6 | 	mov	COUNT_, #2
185c4     A8 00 A0 FD | 	call	#pushregs_
185c8     24 F0 07 F1 | 	add	ptra, #36
185cc     88 34 BF FD | 	call	#_pop
185d0     FD 18 02 F6 | 	mov	arg04, result1
185d4     FE 16 02 F6 | 	mov	arg03, result2
185d8     FF 14 02 F6 | 	mov	arg02, result3
185dc     18 4E 05 F1 | 	add	fp, #24
185e0     A7 18 62 FC | 	wrlong	arg04, fp
185e4     04 4E 05 F1 | 	add	fp, #4
185e8     A7 16 62 FC | 	wrlong	arg03, fp
185ec     04 4E 05 F1 | 	add	fp, #4
185f0     A7 14 62 FC | 	wrlong	arg02, fp
185f4     20 4E 85 F1 | 	sub	fp, #32
185f8     5C 34 BF FD | 	call	#_pop
185fc     FD 18 02 F6 | 	mov	arg04, result1
18600     FE 16 02 F6 | 	mov	arg03, result2
18604     FF 1E 02 F6 | 	mov	local01, result3
18608     0C 4E 05 F1 | 	add	fp, #12
1860c     A7 18 62 FC | 	wrlong	arg04, fp
18610     04 4E 05 F1 | 	add	fp, #4
18614     A7 16 62 FC | 	wrlong	arg03, fp
18618     04 4E 05 F1 | 	add	fp, #4
1861c     A7 1E 62 FC | 	wrlong	local01, fp
18620     14 4E 85 F1 | 	sub	fp, #20
18624     30 34 BF FD | 	call	#_pop
18628     A7 FA 61 FC | 	wrlong	result1, fp
1862c     04 4E 05 F1 | 	add	fp, #4
18630     A7 FC 61 FC | 	wrlong	result2, fp
18634     04 4E 05 F1 | 	add	fp, #4
18638     A7 FE 61 FC | 	wrlong	result3, fp
1863c                 | ' 
1863c                 | ' t3=pop()
1863c                 | ' t2=pop()
1863c                 | ' t1=pop()
1863c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
1863c     FF 18 02 F6 | 	mov	arg04, result3
18640     08 4E 85 F1 | 	sub	fp, #8
18644     1C 18 0E F2 | 	cmp	arg04, #28 wz
18648     08 4E 05 51 |  if_ne	add	fp, #8
1864c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
18650     08 4E 85 51 |  if_ne	sub	fp, #8
18654     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
18658     7C 00 90 5D |  if_ne	jmp	#LR__2010
1865c     14 4E 05 F1 | 	add	fp, #20
18660     A7 1E 02 FB | 	rdlong	local01, fp
18664     14 4E 85 F1 | 	sub	fp, #20
18668     1C 1E 0E F2 | 	cmp	local01, #28 wz
1866c     14 4E 05 51 |  if_ne	add	fp, #20
18670     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18674     14 4E 85 51 |  if_ne	sub	fp, #20
18678     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1867c     58 00 90 5D |  if_ne	jmp	#LR__2010
18680     20 4E 05 F1 | 	add	fp, #32
18684     A7 1E 02 FB | 	rdlong	local01, fp
18688     20 4E 85 F1 | 	sub	fp, #32
1868c     1C 1E 0E F2 | 	cmp	local01, #28 wz
18690     20 4E 05 51 |  if_ne	add	fp, #32
18694     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18698     20 4E 85 51 |  if_ne	sub	fp, #32
1869c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
186a0     34 00 90 5D |  if_ne	jmp	#LR__2010
186a4     A7 12 02 FB | 	rdlong	arg01, fp
186a8     0C 4E 05 F1 | 	add	fp, #12
186ac     A7 14 02 FB | 	rdlong	arg02, fp
186b0     0C 4E 05 F1 | 	add	fp, #12
186b4     A7 16 02 FB | 	rdlong	arg03, fp
186b8     18 4E 85 F1 | 	sub	fp, #24
186bc     37 00 00 FF 
186c0     28 E4 05 F1 | 	add	objptr, ##28200
186c4     F2 18 02 FB | 	rdlong	arg04, objptr
186c8     37 00 00 FF 
186cc     28 E4 85 F1 | 	sub	objptr, ##28200
186d0     D8 65 B0 FD | 	call	#_hg010b_spin2_circle
186d4                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
186d4     54 00 90 FD | 	jmp	#LR__2011
186d8                 | LR__2010
186d8     A7 12 02 F6 | 	mov	arg01, fp
186dc     48 D4 BF FD | 	call	#_converttoint
186e0     FD 1E 02 F6 | 	mov	local01, result1
186e4     0C 4E 05 F1 | 	add	fp, #12
186e8     A7 12 02 F6 | 	mov	arg01, fp
186ec     0C 4E 85 F1 | 	sub	fp, #12
186f0     34 D4 BF FD | 	call	#_converttoint
186f4     FD 20 02 F6 | 	mov	local02, result1
186f8     18 4E 05 F1 | 	add	fp, #24
186fc     A7 12 02 F6 | 	mov	arg01, fp
18700     18 4E 85 F1 | 	sub	fp, #24
18704     20 D4 BF FD | 	call	#_converttoint
18708     FD 16 02 F6 | 	mov	arg03, result1
1870c     37 00 00 FF 
18710     28 E4 05 F1 | 	add	objptr, ##28200
18714     F2 18 02 FB | 	rdlong	arg04, objptr
18718     37 00 00 FF 
1871c     28 E4 85 F1 | 	sub	objptr, ##28200
18720     0F 13 02 F6 | 	mov	arg01, local01
18724     10 15 02 F6 | 	mov	arg02, local02
18728     80 65 B0 FD | 	call	#_hg010b_spin2_circle
1872c                 | LR__2011
1872c     A7 F0 03 F6 | 	mov	ptra, fp
18730     B2 00 A0 FD | 	call	#popregs_
18734                 | _do_circle_ret
18734     2D 00 64 FD | 	ret
18738                 | 
18738                 | ' 
18738                 | ' ' -------------------------- Draw a rectangle
18738                 | ' 
18738                 | ' sub do_box
18738                 | _do_box
18738     03 4A 05 F6 | 	mov	COUNT_, #3
1873c     A8 00 A0 FD | 	call	#pushregs_
18740     30 F0 07 F1 | 	add	ptra, #48
18744     10 33 BF FD | 	call	#_pop
18748     FD 1A 02 F6 | 	mov	arg05, result1
1874c     FE 18 02 F6 | 	mov	arg04, result2
18750     FF 16 02 F6 | 	mov	arg03, result3
18754     24 4E 05 F1 | 	add	fp, #36
18758     A7 1A 62 FC | 	wrlong	arg05, fp
1875c     04 4E 05 F1 | 	add	fp, #4
18760     A7 18 62 FC | 	wrlong	arg04, fp
18764     04 4E 05 F1 | 	add	fp, #4
18768     A7 16 62 FC | 	wrlong	arg03, fp
1876c     2C 4E 85 F1 | 	sub	fp, #44
18770     E4 32 BF FD | 	call	#_pop
18774     FD 1A 02 F6 | 	mov	arg05, result1
18778     FE 18 02 F6 | 	mov	arg04, result2
1877c     FF 16 02 F6 | 	mov	arg03, result3
18780     18 4E 05 F1 | 	add	fp, #24
18784     A7 1A 62 FC | 	wrlong	arg05, fp
18788     04 4E 05 F1 | 	add	fp, #4
1878c     A7 18 62 FC | 	wrlong	arg04, fp
18790     04 4E 05 F1 | 	add	fp, #4
18794     A7 16 62 FC | 	wrlong	arg03, fp
18798     20 4E 85 F1 | 	sub	fp, #32
1879c     B8 32 BF FD | 	call	#_pop
187a0     FD 1A 02 F6 | 	mov	arg05, result1
187a4     FE 18 02 F6 | 	mov	arg04, result2
187a8     FF 1E 02 F6 | 	mov	local01, result3
187ac     0C 4E 05 F1 | 	add	fp, #12
187b0     A7 1A 62 FC | 	wrlong	arg05, fp
187b4     04 4E 05 F1 | 	add	fp, #4
187b8     A7 18 62 FC | 	wrlong	arg04, fp
187bc     04 4E 05 F1 | 	add	fp, #4
187c0     A7 1E 62 FC | 	wrlong	local01, fp
187c4     14 4E 85 F1 | 	sub	fp, #20
187c8     8C 32 BF FD | 	call	#_pop
187cc     A7 FA 61 FC | 	wrlong	result1, fp
187d0     04 4E 05 F1 | 	add	fp, #4
187d4     A7 FC 61 FC | 	wrlong	result2, fp
187d8     04 4E 05 F1 | 	add	fp, #4
187dc     A7 FE 61 FC | 	wrlong	result3, fp
187e0                 | ' 
187e0                 | ' t4=pop()
187e0                 | ' t3=pop()
187e0                 | ' t2=pop()
187e0                 | ' t1=pop()
187e0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
187e0     FF 1A 02 F6 | 	mov	arg05, result3
187e4     08 4E 85 F1 | 	sub	fp, #8
187e8     1C 1A 0E F2 | 	cmp	arg05, #28 wz
187ec     08 4E 05 51 |  if_ne	add	fp, #8
187f0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
187f4     08 4E 85 51 |  if_ne	sub	fp, #8
187f8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
187fc     A8 00 90 5D |  if_ne	jmp	#LR__2020
18800     14 4E 05 F1 | 	add	fp, #20
18804     A7 1E 02 FB | 	rdlong	local01, fp
18808     14 4E 85 F1 | 	sub	fp, #20
1880c     1C 1E 0E F2 | 	cmp	local01, #28 wz
18810     14 4E 05 51 |  if_ne	add	fp, #20
18814     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18818     14 4E 85 51 |  if_ne	sub	fp, #20
1881c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18820     84 00 90 5D |  if_ne	jmp	#LR__2020
18824     20 4E 05 F1 | 	add	fp, #32
18828     A7 1E 02 FB | 	rdlong	local01, fp
1882c     20 4E 85 F1 | 	sub	fp, #32
18830     1C 1E 0E F2 | 	cmp	local01, #28 wz
18834     20 4E 05 51 |  if_ne	add	fp, #32
18838     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
1883c     20 4E 85 51 |  if_ne	sub	fp, #32
18840     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18844     60 00 90 5D |  if_ne	jmp	#LR__2020
18848     2C 4E 05 F1 | 	add	fp, #44
1884c     A7 1E 02 FB | 	rdlong	local01, fp
18850     2C 4E 85 F1 | 	sub	fp, #44
18854     1C 1E 0E F2 | 	cmp	local01, #28 wz
18858     2C 4E 05 51 |  if_ne	add	fp, #44
1885c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18860     2C 4E 85 51 |  if_ne	sub	fp, #44
18864     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18868     3C 00 90 5D |  if_ne	jmp	#LR__2020
1886c     A7 12 02 FB | 	rdlong	arg01, fp
18870     0C 4E 05 F1 | 	add	fp, #12
18874     A7 14 02 FB | 	rdlong	arg02, fp
18878     0C 4E 05 F1 | 	add	fp, #12
1887c     A7 16 02 FB | 	rdlong	arg03, fp
18880     0C 4E 05 F1 | 	add	fp, #12
18884     A7 18 02 FB | 	rdlong	arg04, fp
18888     24 4E 85 F1 | 	sub	fp, #36
1888c     37 00 00 FF 
18890     28 E4 05 F1 | 	add	objptr, ##28200
18894     F2 1A 02 FB | 	rdlong	arg05, objptr
18898     37 00 00 FF 
1889c     28 E4 85 F1 | 	sub	objptr, ##28200
188a0     D4 65 B0 FD | 	call	#_hg010b_spin2_box
188a4                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
188a4     6C 00 90 FD | 	jmp	#LR__2021
188a8                 | LR__2020
188a8     A7 12 02 F6 | 	mov	arg01, fp
188ac     78 D2 BF FD | 	call	#_converttoint
188b0     FD 20 02 F6 | 	mov	local02, result1
188b4     0C 4E 05 F1 | 	add	fp, #12
188b8     A7 12 02 F6 | 	mov	arg01, fp
188bc     0C 4E 85 F1 | 	sub	fp, #12
188c0     64 D2 BF FD | 	call	#_converttoint
188c4     FD 22 02 F6 | 	mov	local03, result1
188c8     18 4E 05 F1 | 	add	fp, #24
188cc     A7 12 02 F6 | 	mov	arg01, fp
188d0     18 4E 85 F1 | 	sub	fp, #24
188d4     50 D2 BF FD | 	call	#_converttoint
188d8     FD 1E 02 F6 | 	mov	local01, result1
188dc     24 4E 05 F1 | 	add	fp, #36
188e0     A7 12 02 F6 | 	mov	arg01, fp
188e4     24 4E 85 F1 | 	sub	fp, #36
188e8     3C D2 BF FD | 	call	#_converttoint
188ec     FD 18 02 F6 | 	mov	arg04, result1
188f0     37 00 00 FF 
188f4     28 E4 05 F1 | 	add	objptr, ##28200
188f8     F2 1A 02 FB | 	rdlong	arg05, objptr
188fc     37 00 00 FF 
18900     28 E4 85 F1 | 	sub	objptr, ##28200
18904     10 13 02 F6 | 	mov	arg01, local02
18908     11 15 02 F6 | 	mov	arg02, local03
1890c     0F 17 02 F6 | 	mov	arg03, local01
18910     64 65 B0 FD | 	call	#_hg010b_spin2_box
18914                 | LR__2021
18914     A7 F0 03 F6 | 	mov	ptra, fp
18918     B2 00 A0 FD | 	call	#popregs_
1891c                 | _do_box_ret
1891c     2D 00 64 FD | 	ret
18920                 | 
18920                 | ' 
18920                 | ' sub do_fill
18920                 | _do_fill
18920     03 4A 05 F6 | 	mov	COUNT_, #3
18924     A8 00 A0 FD | 	call	#pushregs_
18928     30 F0 07 F1 | 	add	ptra, #48
1892c     28 31 BF FD | 	call	#_pop
18930     FD 18 02 F6 | 	mov	arg04, result1
18934     FE 16 02 F6 | 	mov	arg03, result2
18938     FF 14 02 F6 | 	mov	arg02, result3
1893c     24 4E 05 F1 | 	add	fp, #36
18940     A7 18 62 FC | 	wrlong	arg04, fp
18944     04 4E 05 F1 | 	add	fp, #4
18948     A7 16 62 FC | 	wrlong	arg03, fp
1894c     04 4E 05 F1 | 	add	fp, #4
18950     A7 14 62 FC | 	wrlong	arg02, fp
18954     2C 4E 85 F1 | 	sub	fp, #44
18958     FC 30 BF FD | 	call	#_pop
1895c     FD 18 02 F6 | 	mov	arg04, result1
18960     FE 16 02 F6 | 	mov	arg03, result2
18964     FF 14 02 F6 | 	mov	arg02, result3
18968     18 4E 05 F1 | 	add	fp, #24
1896c     A7 18 62 FC | 	wrlong	arg04, fp
18970     04 4E 05 F1 | 	add	fp, #4
18974     A7 16 62 FC | 	wrlong	arg03, fp
18978     04 4E 05 F1 | 	add	fp, #4
1897c     A7 14 62 FC | 	wrlong	arg02, fp
18980     20 4E 85 F1 | 	sub	fp, #32
18984     D0 30 BF FD | 	call	#_pop
18988     FD 18 02 F6 | 	mov	arg04, result1
1898c     FE 16 02 F6 | 	mov	arg03, result2
18990     FF 1E 02 F6 | 	mov	local01, result3
18994     0C 4E 05 F1 | 	add	fp, #12
18998     A7 18 62 FC | 	wrlong	arg04, fp
1899c     04 4E 05 F1 | 	add	fp, #4
189a0     A7 16 62 FC | 	wrlong	arg03, fp
189a4     04 4E 05 F1 | 	add	fp, #4
189a8     A7 1E 62 FC | 	wrlong	local01, fp
189ac     14 4E 85 F1 | 	sub	fp, #20
189b0     A4 30 BF FD | 	call	#_pop
189b4     A7 FA 61 FC | 	wrlong	result1, fp
189b8     04 4E 05 F1 | 	add	fp, #4
189bc     A7 FC 61 FC | 	wrlong	result2, fp
189c0     04 4E 05 F1 | 	add	fp, #4
189c4     A7 FE 61 FC | 	wrlong	result3, fp
189c8                 | ' 
189c8                 | ' t4=pop()
189c8                 | ' t3=pop()
189c8                 | ' t2=pop()
189c8                 | ' t1=pop()
189c8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
189c8     FF 18 02 F6 | 	mov	arg04, result3
189cc     08 4E 85 F1 | 	sub	fp, #8
189d0     1C 18 0E F2 | 	cmp	arg04, #28 wz
189d4     08 4E 05 51 |  if_ne	add	fp, #8
189d8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
189dc     08 4E 85 51 |  if_ne	sub	fp, #8
189e0     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
189e4     94 00 90 5D |  if_ne	jmp	#LR__2030
189e8     14 4E 05 F1 | 	add	fp, #20
189ec     A7 1E 02 FB | 	rdlong	local01, fp
189f0     14 4E 85 F1 | 	sub	fp, #20
189f4     1C 1E 0E F2 | 	cmp	local01, #28 wz
189f8     14 4E 05 51 |  if_ne	add	fp, #20
189fc     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18a00     14 4E 85 51 |  if_ne	sub	fp, #20
18a04     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18a08     70 00 90 5D |  if_ne	jmp	#LR__2030
18a0c     20 4E 05 F1 | 	add	fp, #32
18a10     A7 1E 02 FB | 	rdlong	local01, fp
18a14     20 4E 85 F1 | 	sub	fp, #32
18a18     1C 1E 0E F2 | 	cmp	local01, #28 wz
18a1c     20 4E 05 51 |  if_ne	add	fp, #32
18a20     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18a24     20 4E 85 51 |  if_ne	sub	fp, #32
18a28     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18a2c     4C 00 90 5D |  if_ne	jmp	#LR__2030
18a30     2C 4E 05 F1 | 	add	fp, #44
18a34     A7 1E 02 FB | 	rdlong	local01, fp
18a38     2C 4E 85 F1 | 	sub	fp, #44
18a3c     1C 1E 0E F2 | 	cmp	local01, #28 wz
18a40     2C 4E 05 51 |  if_ne	add	fp, #44
18a44     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18a48     2C 4E 85 51 |  if_ne	sub	fp, #44
18a4c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18a50     28 00 90 5D |  if_ne	jmp	#LR__2030
18a54     A7 12 02 FB | 	rdlong	arg01, fp
18a58     0C 4E 05 F1 | 	add	fp, #12
18a5c     A7 14 02 FB | 	rdlong	arg02, fp
18a60     0C 4E 05 F1 | 	add	fp, #12
18a64     A7 16 02 FB | 	rdlong	arg03, fp
18a68     0C 4E 05 F1 | 	add	fp, #12
18a6c     A7 18 02 FB | 	rdlong	arg04, fp
18a70     24 4E 85 F1 | 	sub	fp, #36
18a74     94 5E B0 FD | 	call	#_hg010b_spin2_fill
18a78                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
18a78     58 00 90 FD | 	jmp	#LR__2031
18a7c                 | LR__2030
18a7c     A7 12 02 F6 | 	mov	arg01, fp
18a80     A4 D0 BF FD | 	call	#_converttoint
18a84     FD 20 02 F6 | 	mov	local02, result1
18a88     0C 4E 05 F1 | 	add	fp, #12
18a8c     A7 12 02 F6 | 	mov	arg01, fp
18a90     0C 4E 85 F1 | 	sub	fp, #12
18a94     90 D0 BF FD | 	call	#_converttoint
18a98     FD 22 02 F6 | 	mov	local03, result1
18a9c     18 4E 05 F1 | 	add	fp, #24
18aa0     A7 12 02 F6 | 	mov	arg01, fp
18aa4     18 4E 85 F1 | 	sub	fp, #24
18aa8     7C D0 BF FD | 	call	#_converttoint
18aac     FD 1E 02 F6 | 	mov	local01, result1
18ab0     24 4E 05 F1 | 	add	fp, #36
18ab4     A7 12 02 F6 | 	mov	arg01, fp
18ab8     24 4E 85 F1 | 	sub	fp, #36
18abc     68 D0 BF FD | 	call	#_converttoint
18ac0     FD 18 02 F6 | 	mov	arg04, result1
18ac4     10 13 02 F6 | 	mov	arg01, local02
18ac8     11 15 02 F6 | 	mov	arg02, local03
18acc     0F 17 02 F6 | 	mov	arg03, local01
18ad0     38 5E B0 FD | 	call	#_hg010b_spin2_fill
18ad4                 | LR__2031
18ad4     A7 F0 03 F6 | 	mov	ptra, fp
18ad8     B2 00 A0 FD | 	call	#popregs_
18adc                 | _do_fill_ret
18adc     2D 00 64 FD | 	ret
18ae0                 | 
18ae0                 | ' 
18ae0                 | ' ' -------------------------- Draw a frane
18ae0                 | ' 
18ae0                 | ' sub do_frame
18ae0                 | _do_frame
18ae0     03 4A 05 F6 | 	mov	COUNT_, #3
18ae4     A8 00 A0 FD | 	call	#pushregs_
18ae8     30 F0 07 F1 | 	add	ptra, #48
18aec     68 2F BF FD | 	call	#_pop
18af0     FD 1A 02 F6 | 	mov	arg05, result1
18af4     FE 18 02 F6 | 	mov	arg04, result2
18af8     FF 16 02 F6 | 	mov	arg03, result3
18afc     24 4E 05 F1 | 	add	fp, #36
18b00     A7 1A 62 FC | 	wrlong	arg05, fp
18b04     04 4E 05 F1 | 	add	fp, #4
18b08     A7 18 62 FC | 	wrlong	arg04, fp
18b0c     04 4E 05 F1 | 	add	fp, #4
18b10     A7 16 62 FC | 	wrlong	arg03, fp
18b14     2C 4E 85 F1 | 	sub	fp, #44
18b18     3C 2F BF FD | 	call	#_pop
18b1c     FD 1A 02 F6 | 	mov	arg05, result1
18b20     FE 18 02 F6 | 	mov	arg04, result2
18b24     FF 16 02 F6 | 	mov	arg03, result3
18b28     18 4E 05 F1 | 	add	fp, #24
18b2c     A7 1A 62 FC | 	wrlong	arg05, fp
18b30     04 4E 05 F1 | 	add	fp, #4
18b34     A7 18 62 FC | 	wrlong	arg04, fp
18b38     04 4E 05 F1 | 	add	fp, #4
18b3c     A7 16 62 FC | 	wrlong	arg03, fp
18b40     20 4E 85 F1 | 	sub	fp, #32
18b44     10 2F BF FD | 	call	#_pop
18b48     FD 1A 02 F6 | 	mov	arg05, result1
18b4c     FE 18 02 F6 | 	mov	arg04, result2
18b50     FF 1E 02 F6 | 	mov	local01, result3
18b54     0C 4E 05 F1 | 	add	fp, #12
18b58     A7 1A 62 FC | 	wrlong	arg05, fp
18b5c     04 4E 05 F1 | 	add	fp, #4
18b60     A7 18 62 FC | 	wrlong	arg04, fp
18b64     04 4E 05 F1 | 	add	fp, #4
18b68     A7 1E 62 FC | 	wrlong	local01, fp
18b6c     14 4E 85 F1 | 	sub	fp, #20
18b70     E4 2E BF FD | 	call	#_pop
18b74     A7 FA 61 FC | 	wrlong	result1, fp
18b78     04 4E 05 F1 | 	add	fp, #4
18b7c     A7 FC 61 FC | 	wrlong	result2, fp
18b80     04 4E 05 F1 | 	add	fp, #4
18b84     A7 FE 61 FC | 	wrlong	result3, fp
18b88                 | ' 
18b88                 | ' t4=pop()
18b88                 | ' t3=pop()
18b88                 | ' t2=pop()
18b88                 | ' t1=pop()
18b88                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
18b88     FF 1A 02 F6 | 	mov	arg05, result3
18b8c     08 4E 85 F1 | 	sub	fp, #8
18b90     1C 1A 0E F2 | 	cmp	arg05, #28 wz
18b94     08 4E 05 51 |  if_ne	add	fp, #8
18b98     A7 1E 02 5B |  if_ne	rdlong	local01, fp
18b9c     08 4E 85 51 |  if_ne	sub	fp, #8
18ba0     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
18ba4     A8 00 90 5D |  if_ne	jmp	#LR__2040
18ba8     14 4E 05 F1 | 	add	fp, #20
18bac     A7 1E 02 FB | 	rdlong	local01, fp
18bb0     14 4E 85 F1 | 	sub	fp, #20
18bb4     1C 1E 0E F2 | 	cmp	local01, #28 wz
18bb8     14 4E 05 51 |  if_ne	add	fp, #20
18bbc     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18bc0     14 4E 85 51 |  if_ne	sub	fp, #20
18bc4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18bc8     84 00 90 5D |  if_ne	jmp	#LR__2040
18bcc     20 4E 05 F1 | 	add	fp, #32
18bd0     A7 1E 02 FB | 	rdlong	local01, fp
18bd4     20 4E 85 F1 | 	sub	fp, #32
18bd8     1C 1E 0E F2 | 	cmp	local01, #28 wz
18bdc     20 4E 05 51 |  if_ne	add	fp, #32
18be0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18be4     20 4E 85 51 |  if_ne	sub	fp, #32
18be8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18bec     60 00 90 5D |  if_ne	jmp	#LR__2040
18bf0     2C 4E 05 F1 | 	add	fp, #44
18bf4     A7 1E 02 FB | 	rdlong	local01, fp
18bf8     2C 4E 85 F1 | 	sub	fp, #44
18bfc     1C 1E 0E F2 | 	cmp	local01, #28 wz
18c00     2C 4E 05 51 |  if_ne	add	fp, #44
18c04     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18c08     2C 4E 85 51 |  if_ne	sub	fp, #44
18c0c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18c10     3C 00 90 5D |  if_ne	jmp	#LR__2040
18c14     A7 12 02 FB | 	rdlong	arg01, fp
18c18     0C 4E 05 F1 | 	add	fp, #12
18c1c     A7 14 02 FB | 	rdlong	arg02, fp
18c20     0C 4E 05 F1 | 	add	fp, #12
18c24     A7 16 02 FB | 	rdlong	arg03, fp
18c28     0C 4E 05 F1 | 	add	fp, #12
18c2c     A7 18 02 FB | 	rdlong	arg04, fp
18c30     24 4E 85 F1 | 	sub	fp, #36
18c34     37 00 00 FF 
18c38     28 E4 05 F1 | 	add	objptr, ##28200
18c3c     F2 1A 02 FB | 	rdlong	arg05, objptr
18c40     37 00 00 FF 
18c44     28 E4 85 F1 | 	sub	objptr, ##28200
18c48     AC 61 B0 FD | 	call	#_hg010b_spin2_frame
18c4c                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
18c4c     6C 00 90 FD | 	jmp	#LR__2041
18c50                 | LR__2040
18c50     A7 12 02 F6 | 	mov	arg01, fp
18c54     D0 CE BF FD | 	call	#_converttoint
18c58     FD 20 02 F6 | 	mov	local02, result1
18c5c     0C 4E 05 F1 | 	add	fp, #12
18c60     A7 12 02 F6 | 	mov	arg01, fp
18c64     0C 4E 85 F1 | 	sub	fp, #12
18c68     BC CE BF FD | 	call	#_converttoint
18c6c     FD 22 02 F6 | 	mov	local03, result1
18c70     18 4E 05 F1 | 	add	fp, #24
18c74     A7 12 02 F6 | 	mov	arg01, fp
18c78     18 4E 85 F1 | 	sub	fp, #24
18c7c     A8 CE BF FD | 	call	#_converttoint
18c80     FD 1E 02 F6 | 	mov	local01, result1
18c84     24 4E 05 F1 | 	add	fp, #36
18c88     A7 12 02 F6 | 	mov	arg01, fp
18c8c     24 4E 85 F1 | 	sub	fp, #36
18c90     94 CE BF FD | 	call	#_converttoint
18c94     FD 18 02 F6 | 	mov	arg04, result1
18c98     37 00 00 FF 
18c9c     28 E4 05 F1 | 	add	objptr, ##28200
18ca0     F2 1A 02 FB | 	rdlong	arg05, objptr
18ca4     37 00 00 FF 
18ca8     28 E4 85 F1 | 	sub	objptr, ##28200
18cac     10 13 02 F6 | 	mov	arg01, local02
18cb0     11 15 02 F6 | 	mov	arg02, local03
18cb4     0F 17 02 F6 | 	mov	arg03, local01
18cb8     3C 61 B0 FD | 	call	#_hg010b_spin2_frame
18cbc                 | LR__2041
18cbc     A7 F0 03 F6 | 	mov	ptra, fp
18cc0     B2 00 A0 FD | 	call	#popregs_
18cc4                 | _do_frame_ret
18cc4     2D 00 64 FD | 	ret
18cc8                 | 
18cc8                 | ' 
18cc8                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
18cc8                 | ' 
18cc8                 | ' ' ------------------------- Print to the screem
18cc8                 | ' 
18cc8                 | ' sub do_print  
18cc8                 | _do_print
18cc8     0B 4A 05 F6 | 	mov	COUNT_, #11
18ccc     A8 00 A0 FD | 	call	#pushregs_
18cd0     00 24 06 F6 | 	mov	local04, #0
18cd4     80 2D BF FD | 	call	#_pop
18cd8     FD 26 02 F6 | 	mov	local05, result1
18cdc     FE 28 02 F6 | 	mov	local06, result2
18ce0     FF 2A 02 F6 | 	mov	local07, result3
18ce4     13 1F 02 F6 | 	mov	local01, local05
18ce8     14 21 02 F6 | 	mov	local02, local06
18cec     15 23 02 F6 | 	mov	local03, local07
18cf0                 | '  
18cf0                 | ' r=0
18cf0                 | ' t1=pop() 
18cf0                 | ' 'print t1.result_type,t1.result.uresult
18cf0                 | ' 
18cf0                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
18cf0     21 22 0E F2 | 	cmp	local03, #33 wz
18cf4     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
18cf8     20 00 90 5D |  if_ne	jmp	#LR__2050
18cfc     11 25 02 F6 | 	mov	local04, local03
18d00     54 2D BF FD | 	call	#_pop
18d04     FD 26 02 F6 | 	mov	local05, result1
18d08     FE 28 02 F6 | 	mov	local06, result2
18d0c     FF 2A 02 F6 | 	mov	local07, result3
18d10     13 1F 02 F6 | 	mov	local01, local05
18d14     14 21 02 F6 | 	mov	local02, local06
18d18     15 23 02 F6 | 	mov	local03, local07
18d1c                 | LR__2050
18d1c                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
18d1c     20 22 0E F2 | 	cmp	local03, #32 wz
18d20     11 25 02 A6 |  if_e	mov	local04, local03
18d24                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
18d24     FF 22 0E F2 | 	cmp	local03, #255 wz
18d28     0C 00 90 5D |  if_ne	jmp	#LR__2051
18d2c     0F 13 02 F6 | 	mov	arg01, local01
18d30     50 47 B0 FD | 	call	#_printerror
18d34     D4 04 90 FD | 	jmp	#LR__2070
18d38                 | LR__2051
18d38                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
18d38     2B 22 0E F2 | 	cmp	local03, #43 wz
18d3c     14 00 90 5D |  if_ne	jmp	#LR__2052
18d40     0F 13 02 F6 | 	mov	arg01, local01
18d44     BC 85 BF FD | 	call	#_convertstring
18d48     FD 26 02 F6 | 	mov	local05, result1
18d4c     13 1F 02 F6 | 	mov	local01, local05
18d50     1F 22 06 F6 | 	mov	local03, #31
18d54                 | LR__2052
18d54                 | ' 
18d54                 | ' if t1.result_type=token_channel then print "Print to channel "; t1.result.iresult : t1=pop()
18d54     2C 22 0E F2 | 	cmp	local03, #44 wz
18d58     80 00 90 5D |  if_ne	jmp	#LR__2053
18d5c     00 12 06 F6 | 	mov	arg01, #0
18d60     F8 D6 B0 FD | 	call	#__system___getiolock_0540
18d64     FD 12 02 F6 | 	mov	arg01, result1
18d68     B0 7C B0 FD | 	call	#__system___lockmem
18d6c     85 01 00 FF 
18d70     D4 14 06 F6 | 	mov	arg02, ##@LR__5506
18d74     00 12 06 F6 | 	mov	arg01, #0
18d78     00 16 06 F6 | 	mov	arg03, #0
18d7c     90 89 B0 FD | 	call	#__system___basic_print_string
18d80     0A 2C 06 F6 | 	mov	local08, #10
18d84     00 12 06 F6 | 	mov	arg01, #0
18d88     0F 15 02 F6 | 	mov	arg02, local01
18d8c     00 16 06 F6 | 	mov	arg03, #0
18d90     0A 18 06 F6 | 	mov	arg04, #10
18d94     BC 89 B0 FD | 	call	#__system___basic_print_integer
18d98     FD 2E 02 F6 | 	mov	local09, result1
18d9c     00 12 06 F6 | 	mov	arg01, #0
18da0     0A 14 06 F6 | 	mov	arg02, #10
18da4     00 16 06 F6 | 	mov	arg03, #0
18da8     0C 89 B0 FD | 	call	#__system___basic_print_char
18dac     01 30 06 F6 | 	mov	local10, #1
18db0     00 12 06 F6 | 	mov	arg01, #0
18db4     A4 D6 B0 FD | 	call	#__system___getiolock_0540
18db8     FD 00 68 FC | 	wrlong	#0, result1
18dbc     00 32 06 F6 | 	mov	local11, #0
18dc0     94 2C BF FD | 	call	#_pop
18dc4     FD 26 02 F6 | 	mov	local05, result1
18dc8     FE 28 02 F6 | 	mov	local06, result2
18dcc     FF 2A 02 F6 | 	mov	local07, result3
18dd0     13 1F 02 F6 | 	mov	local01, local05
18dd4     14 21 02 F6 | 	mov	local02, local06
18dd8     15 23 02 F6 | 	mov	local03, local07
18ddc                 | LR__2053
18ddc                 | ' 
18ddc                 | ' if r=print_mod_comma  then
18ddc     21 24 0E F2 | 	cmp	local04, #33 wz
18de0     AC 01 90 5D |  if_ne	jmp	#LR__2058
18de4                 | '   if t1.result_type=result_int then print t1.result.iresult,
18de4     1C 22 0E F2 | 	cmp	local03, #28 wz
18de8     64 00 90 5D |  if_ne	jmp	#LR__2054
18dec     00 12 06 F6 | 	mov	arg01, #0
18df0     68 D6 B0 FD | 	call	#__system___getiolock_0540
18df4     FD 12 02 F6 | 	mov	arg01, result1
18df8     20 7C B0 FD | 	call	#__system___lockmem
18dfc     00 28 06 F6 | 	mov	local06, #0
18e00     00 12 06 F6 | 	mov	arg01, #0
18e04     0F 15 02 F6 | 	mov	arg02, local01
18e08     00 16 06 F6 | 	mov	arg03, #0
18e0c     0A 18 06 F6 | 	mov	arg04, #10
18e10     40 89 B0 FD | 	call	#__system___basic_print_integer
18e14     FD 2A 02 F6 | 	mov	local07, result1
18e18     14 27 02 F6 | 	mov	local05, local06
18e1c     15 27 02 F1 | 	add	local05, local07
18e20     00 32 06 F6 | 	mov	local11, #0
18e24     00 12 06 F6 | 	mov	arg01, #0
18e28     09 14 06 F6 | 	mov	arg02, #9
18e2c     00 16 06 F6 | 	mov	arg03, #0
18e30     84 88 B0 FD | 	call	#__system___basic_print_char
18e34     FD 2E 02 F6 | 	mov	local09, result1
18e38     FD 26 02 F1 | 	add	local05, result1
18e3c     00 12 06 F6 | 	mov	arg01, #0
18e40     18 D6 B0 FD | 	call	#__system___getiolock_0540
18e44     FD 00 68 FC | 	wrlong	#0, result1
18e48     00 FA 05 F6 | 	mov	result1, #0
18e4c     00 30 06 F6 | 	mov	local10, #0
18e50                 | LR__2054
18e50                 | '   if t1.result_type=result_uint then print t1.result.uresult,
18e50     1D 22 0E F2 | 	cmp	local03, #29 wz
18e54     64 00 90 5D |  if_ne	jmp	#LR__2055
18e58     00 12 06 F6 | 	mov	arg01, #0
18e5c     FC D5 B0 FD | 	call	#__system___getiolock_0540
18e60     FD 12 02 F6 | 	mov	arg01, result1
18e64     B4 7B B0 FD | 	call	#__system___lockmem
18e68     00 28 06 F6 | 	mov	local06, #0
18e6c     00 12 06 F6 | 	mov	arg01, #0
18e70     0F 15 02 F6 | 	mov	arg02, local01
18e74     00 16 06 F6 | 	mov	arg03, #0
18e78     0A 18 06 F6 | 	mov	arg04, #10
18e7c     14 89 B0 FD | 	call	#__system___basic_print_unsigned
18e80     FD 2A 02 F6 | 	mov	local07, result1
18e84     14 27 02 F6 | 	mov	local05, local06
18e88     15 27 02 F1 | 	add	local05, local07
18e8c     00 32 06 F6 | 	mov	local11, #0
18e90     00 12 06 F6 | 	mov	arg01, #0
18e94     09 14 06 F6 | 	mov	arg02, #9
18e98     00 16 06 F6 | 	mov	arg03, #0
18e9c     18 88 B0 FD | 	call	#__system___basic_print_char
18ea0     FD 2E 02 F6 | 	mov	local09, result1
18ea4     FD 26 02 F1 | 	add	local05, result1
18ea8     00 12 06 F6 | 	mov	arg01, #0
18eac     AC D5 B0 FD | 	call	#__system___getiolock_0540
18eb0     FD 00 68 FC | 	wrlong	#0, result1
18eb4     00 FA 05 F6 | 	mov	result1, #0
18eb8     00 30 06 F6 | 	mov	local10, #0
18ebc                 | LR__2055
18ebc                 | '   if t1.result_type=result_float then print t1.result.fresult,
18ebc     1E 22 0E F2 | 	cmp	local03, #30 wz
18ec0     64 00 90 5D |  if_ne	jmp	#LR__2056
18ec4     00 12 06 F6 | 	mov	arg01, #0
18ec8     90 D5 B0 FD | 	call	#__system___getiolock_0540
18ecc     FD 12 02 F6 | 	mov	arg01, result1
18ed0     48 7B B0 FD | 	call	#__system___lockmem
18ed4     00 28 06 F6 | 	mov	local06, #0
18ed8     00 12 06 F6 | 	mov	arg01, #0
18edc     0F 15 02 F6 | 	mov	arg02, local01
18ee0     00 16 06 F6 | 	mov	arg03, #0
18ee4     23 18 06 F6 | 	mov	arg04, #35
18ee8     FC AC B0 FD | 	call	#__system___basic_print_float
18eec     FD 2A 02 F6 | 	mov	local07, result1
18ef0     14 27 02 F6 | 	mov	local05, local06
18ef4     15 27 02 F1 | 	add	local05, local07
18ef8     00 32 06 F6 | 	mov	local11, #0
18efc     00 12 06 F6 | 	mov	arg01, #0
18f00     09 14 06 F6 | 	mov	arg02, #9
18f04     00 16 06 F6 | 	mov	arg03, #0
18f08     AC 87 B0 FD | 	call	#__system___basic_print_char
18f0c     FD 2E 02 F6 | 	mov	local09, result1
18f10     FD 26 02 F1 | 	add	local05, result1
18f14     00 12 06 F6 | 	mov	arg01, #0
18f18     40 D5 B0 FD | 	call	#__system___getiolock_0540
18f1c     FD 00 68 FC | 	wrlong	#0, result1
18f20     00 FA 05 F6 | 	mov	result1, #0
18f24     00 30 06 F6 | 	mov	local10, #0
18f28                 | LR__2056
18f28                 | '   if t1.result_type=result_string then print t1.result.sresult,
18f28     1F 22 0E F2 | 	cmp	local03, #31 wz
18f2c     60 00 90 5D |  if_ne	jmp	#LR__2057
18f30     00 12 06 F6 | 	mov	arg01, #0
18f34     24 D5 B0 FD | 	call	#__system___getiolock_0540
18f38     FD 12 02 F6 | 	mov	arg01, result1
18f3c     DC 7A B0 FD | 	call	#__system___lockmem
18f40     00 28 06 F6 | 	mov	local06, #0
18f44     00 12 06 F6 | 	mov	arg01, #0
18f48     0F 15 02 F6 | 	mov	arg02, local01
18f4c     00 16 06 F6 | 	mov	arg03, #0
18f50     BC 87 B0 FD | 	call	#__system___basic_print_string
18f54     FD 2A 02 F6 | 	mov	local07, result1
18f58     14 27 02 F6 | 	mov	local05, local06
18f5c     15 27 02 F1 | 	add	local05, local07
18f60     00 32 06 F6 | 	mov	local11, #0
18f64     00 12 06 F6 | 	mov	arg01, #0
18f68     09 14 06 F6 | 	mov	arg02, #9
18f6c     00 16 06 F6 | 	mov	arg03, #0
18f70     44 87 B0 FD | 	call	#__system___basic_print_char
18f74     FD 2E 02 F6 | 	mov	local09, result1
18f78     FD 26 02 F1 | 	add	local05, result1
18f7c     00 12 06 F6 | 	mov	arg01, #0
18f80     D8 D4 B0 FD | 	call	#__system___getiolock_0540
18f84     FD 00 68 FC | 	wrlong	#0, result1
18f88     00 FA 05 F6 | 	mov	result1, #0
18f8c     00 30 06 F6 | 	mov	local10, #0
18f90                 | LR__2057
18f90                 | LR__2058
18f90                 | ' if r=print_mod_semicolon then 
18f90     22 24 0E F2 | 	cmp	local04, #34 wz
18f94     1C 01 90 5D |  if_ne	jmp	#LR__2063
18f98                 | '   if t1.result_type=result_int then print t1.result.iresult;
18f98     1C 22 0E F2 | 	cmp	local03, #28 wz
18f9c     50 00 90 5D |  if_ne	jmp	#LR__2059
18fa0     00 12 06 F6 | 	mov	arg01, #0
18fa4     B4 D4 B0 FD | 	call	#__system___getiolock_0540
18fa8     FD 12 02 F6 | 	mov	arg01, result1
18fac     6C 7A B0 FD | 	call	#__system___lockmem
18fb0     00 28 06 F6 | 	mov	local06, #0
18fb4     00 30 06 F6 | 	mov	local10, #0
18fb8     0A 32 06 F6 | 	mov	local11, #10
18fbc     00 12 06 F6 | 	mov	arg01, #0
18fc0     0F 15 02 F6 | 	mov	arg02, local01
18fc4     00 16 06 F6 | 	mov	arg03, #0
18fc8     0A 18 06 F6 | 	mov	arg04, #10
18fcc     84 87 B0 FD | 	call	#__system___basic_print_integer
18fd0     FD 2A 02 F6 | 	mov	local07, result1
18fd4     14 27 02 F6 | 	mov	local05, local06
18fd8     15 27 02 F1 | 	add	local05, local07
18fdc     00 12 06 F6 | 	mov	arg01, #0
18fe0     78 D4 B0 FD | 	call	#__system___getiolock_0540
18fe4     FD 00 68 FC | 	wrlong	#0, result1
18fe8     00 FA 05 F6 | 	mov	result1, #0
18fec     00 2E 06 F6 | 	mov	local09, #0
18ff0                 | LR__2059
18ff0                 | '   if t1.result_type=result_uint then print t1.result.uresult;
18ff0     1D 22 0E F2 | 	cmp	local03, #29 wz
18ff4     50 00 90 5D |  if_ne	jmp	#LR__2060
18ff8     00 12 06 F6 | 	mov	arg01, #0
18ffc     5C D4 B0 FD | 	call	#__system___getiolock_0540
19000     FD 12 02 F6 | 	mov	arg01, result1
19004     14 7A B0 FD | 	call	#__system___lockmem
19008     00 28 06 F6 | 	mov	local06, #0
1900c     00 30 06 F6 | 	mov	local10, #0
19010     0A 32 06 F6 | 	mov	local11, #10
19014     00 12 06 F6 | 	mov	arg01, #0
19018     0F 15 02 F6 | 	mov	arg02, local01
1901c     00 16 06 F6 | 	mov	arg03, #0
19020     0A 18 06 F6 | 	mov	arg04, #10
19024     6C 87 B0 FD | 	call	#__system___basic_print_unsigned
19028     FD 2A 02 F6 | 	mov	local07, result1
1902c     14 27 02 F6 | 	mov	local05, local06
19030     15 27 02 F1 | 	add	local05, local07
19034     00 12 06 F6 | 	mov	arg01, #0
19038     20 D4 B0 FD | 	call	#__system___getiolock_0540
1903c     FD 00 68 FC | 	wrlong	#0, result1
19040     00 FA 05 F6 | 	mov	result1, #0
19044     00 2E 06 F6 | 	mov	local09, #0
19048                 | LR__2060
19048                 | '   if t1.result_type=result_float then print t1.result.fresult;
19048     1E 22 0E F2 | 	cmp	local03, #30 wz
1904c     30 00 90 5D |  if_ne	jmp	#LR__2061
19050     00 12 06 F6 | 	mov	arg01, #0
19054     04 D4 B0 FD | 	call	#__system___getiolock_0540
19058     FD 12 02 F6 | 	mov	arg01, result1
1905c     BC 79 B0 FD | 	call	#__system___lockmem
19060     00 12 06 F6 | 	mov	arg01, #0
19064     0F 15 02 F6 | 	mov	arg02, local01
19068     00 16 06 F6 | 	mov	arg03, #0
1906c     23 18 06 F6 | 	mov	arg04, #35
19070     74 AB B0 FD | 	call	#__system___basic_print_float
19074     00 12 06 F6 | 	mov	arg01, #0
19078     E0 D3 B0 FD | 	call	#__system___getiolock_0540
1907c     FD 00 68 FC | 	wrlong	#0, result1
19080                 | LR__2061
19080                 | '   if t1.result_type=result_string then print t1.result.sresult;
19080     1F 22 0E F2 | 	cmp	local03, #31 wz
19084     2C 00 90 5D |  if_ne	jmp	#LR__2062
19088     00 12 06 F6 | 	mov	arg01, #0
1908c     CC D3 B0 FD | 	call	#__system___getiolock_0540
19090     FD 12 02 F6 | 	mov	arg01, result1
19094     84 79 B0 FD | 	call	#__system___lockmem
19098     00 12 06 F6 | 	mov	arg01, #0
1909c     0F 15 02 F6 | 	mov	arg02, local01
190a0     00 16 06 F6 | 	mov	arg03, #0
190a4     68 86 B0 FD | 	call	#__system___basic_print_string
190a8     00 12 06 F6 | 	mov	arg01, #0
190ac     AC D3 B0 FD | 	call	#__system___getiolock_0540
190b0     FD 00 68 FC | 	wrlong	#0, result1
190b4                 | LR__2062
190b4                 | LR__2063
190b4                 | ' if r=0 then 
190b4     00 24 0E F2 | 	cmp	local04, #0 wz
190b8     1C 01 90 5D |  if_ne	jmp	#LR__2068
190bc                 | '   if t1.result_type=result_int then print t1.result.iresult
190bc     1C 22 0E F2 | 	cmp	local03, #28 wz
190c0     40 00 90 5D |  if_ne	jmp	#LR__2064
190c4     00 12 06 F6 | 	mov	arg01, #0
190c8     90 D3 B0 FD | 	call	#__system___getiolock_0540
190cc     FD 12 02 F6 | 	mov	arg01, result1
190d0     48 79 B0 FD | 	call	#__system___lockmem
190d4     00 12 06 F6 | 	mov	arg01, #0
190d8     0F 15 02 F6 | 	mov	arg02, local01
190dc     00 16 06 F6 | 	mov	arg03, #0
190e0     0A 18 06 F6 | 	mov	arg04, #10
190e4     6C 86 B0 FD | 	call	#__system___basic_print_integer
190e8     00 12 06 F6 | 	mov	arg01, #0
190ec     0A 14 06 F6 | 	mov	arg02, #10
190f0     00 16 06 F6 | 	mov	arg03, #0
190f4     C0 85 B0 FD | 	call	#__system___basic_print_char
190f8     00 12 06 F6 | 	mov	arg01, #0
190fc     5C D3 B0 FD | 	call	#__system___getiolock_0540
19100     FD 00 68 FC | 	wrlong	#0, result1
19104                 | LR__2064
19104                 | '   if t1.result_type=result_uint then print t1.result.uresult
19104     1D 22 0E F2 | 	cmp	local03, #29 wz
19108     40 00 90 5D |  if_ne	jmp	#LR__2065
1910c     00 12 06 F6 | 	mov	arg01, #0
19110     48 D3 B0 FD | 	call	#__system___getiolock_0540
19114     FD 12 02 F6 | 	mov	arg01, result1
19118     00 79 B0 FD | 	call	#__system___lockmem
1911c     00 12 06 F6 | 	mov	arg01, #0
19120     0F 15 02 F6 | 	mov	arg02, local01
19124     00 16 06 F6 | 	mov	arg03, #0
19128     0A 18 06 F6 | 	mov	arg04, #10
1912c     64 86 B0 FD | 	call	#__system___basic_print_unsigned
19130     00 12 06 F6 | 	mov	arg01, #0
19134     0A 14 06 F6 | 	mov	arg02, #10
19138     00 16 06 F6 | 	mov	arg03, #0
1913c     78 85 B0 FD | 	call	#__system___basic_print_char
19140     00 12 06 F6 | 	mov	arg01, #0
19144     14 D3 B0 FD | 	call	#__system___getiolock_0540
19148     FD 00 68 FC | 	wrlong	#0, result1
1914c                 | LR__2065
1914c                 | '   if t1.result_type=result_float then print t1.result.fresult
1914c     1E 22 0E F2 | 	cmp	local03, #30 wz
19150     40 00 90 5D |  if_ne	jmp	#LR__2066
19154     00 12 06 F6 | 	mov	arg01, #0
19158     00 D3 B0 FD | 	call	#__system___getiolock_0540
1915c     FD 12 02 F6 | 	mov	arg01, result1
19160     B8 78 B0 FD | 	call	#__system___lockmem
19164     00 12 06 F6 | 	mov	arg01, #0
19168     0F 15 02 F6 | 	mov	arg02, local01
1916c     00 16 06 F6 | 	mov	arg03, #0
19170     23 18 06 F6 | 	mov	arg04, #35
19174     70 AA B0 FD | 	call	#__system___basic_print_float
19178     00 12 06 F6 | 	mov	arg01, #0
1917c     0A 14 06 F6 | 	mov	arg02, #10
19180     00 16 06 F6 | 	mov	arg03, #0
19184     30 85 B0 FD | 	call	#__system___basic_print_char
19188     00 12 06 F6 | 	mov	arg01, #0
1918c     CC D2 B0 FD | 	call	#__system___getiolock_0540
19190     FD 00 68 FC | 	wrlong	#0, result1
19194                 | LR__2066
19194                 | '   if t1.result_type=result_string then print t1.result.sresult
19194     1F 22 0E F2 | 	cmp	local03, #31 wz
19198     3C 00 90 5D |  if_ne	jmp	#LR__2067
1919c     00 12 06 F6 | 	mov	arg01, #0
191a0     B8 D2 B0 FD | 	call	#__system___getiolock_0540
191a4     FD 12 02 F6 | 	mov	arg01, result1
191a8     70 78 B0 FD | 	call	#__system___lockmem
191ac     00 12 06 F6 | 	mov	arg01, #0
191b0     0F 15 02 F6 | 	mov	arg02, local01
191b4     00 16 06 F6 | 	mov	arg03, #0
191b8     54 85 B0 FD | 	call	#__system___basic_print_string
191bc     00 12 06 F6 | 	mov	arg01, #0
191c0     0A 14 06 F6 | 	mov	arg02, #10
191c4     00 16 06 F6 | 	mov	arg03, #0
191c8     EC 84 B0 FD | 	call	#__system___basic_print_char
191cc     00 12 06 F6 | 	mov	arg01, #0
191d0     88 D2 B0 FD | 	call	#__system___getiolock_0540
191d4     FD 00 68 FC | 	wrlong	#0, result1
191d8                 | LR__2067
191d8                 | LR__2068
191d8                 | ' if r=print_mod_empty then print
191d8     20 24 0E F2 | 	cmp	local04, #32 wz
191dc     2C 00 90 5D |  if_ne	jmp	#LR__2069
191e0     00 12 06 F6 | 	mov	arg01, #0
191e4     74 D2 B0 FD | 	call	#__system___getiolock_0540
191e8     FD 12 02 F6 | 	mov	arg01, result1
191ec     2C 78 B0 FD | 	call	#__system___lockmem
191f0     00 12 06 F6 | 	mov	arg01, #0
191f4     0A 14 06 F6 | 	mov	arg02, #10
191f8     00 16 06 F6 | 	mov	arg03, #0
191fc     B8 84 B0 FD | 	call	#__system___basic_print_char
19200     00 12 06 F6 | 	mov	arg01, #0
19204     54 D2 B0 FD | 	call	#__system___getiolock_0540
19208     FD 00 68 FC | 	wrlong	#0, result1
1920c                 | LR__2069
1920c                 | LR__2070
1920c     A7 F0 03 F6 | 	mov	ptra, fp
19210     B2 00 A0 FD | 	call	#popregs_
19214                 | _do_print_ret
19214     2D 00 64 FD | 	ret
19218                 | 
19218                 | ' 
19218                 | ' 
19218                 | ' sub do_paper
19218                 | _do_paper
19218     03 4A 05 F6 | 	mov	COUNT_, #3
1921c     A8 00 A0 FD | 	call	#pushregs_
19220     34 28 BF FD | 	call	#_pop
19224     FD 1E 02 F6 | 	mov	local01, result1
19228     FE 20 02 F6 | 	mov	local02, result2
1922c     FF 22 02 F6 | 	mov	local03, result3
19230                 | ' t1=pop() 
19230                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
19230     1E 22 0E F2 | 	cmp	local03, #30 wz
19234     10 00 90 5D |  if_ne	jmp	#LR__2080
19238     0F 13 02 F6 | 	mov	arg01, local01
1923c     00 14 06 F6 | 	mov	arg02, #0
19240     54 A8 B0 FD | 	call	#__system___float_tointeger
19244     FD 1E 02 F6 | 	mov	local01, result1
19248                 | LR__2080
19248                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
19248     1F 22 0E F2 | 	cmp	local03, #31 wz
1924c     18 00 90 5D |  if_ne	jmp	#LR__2081
19250     0F 13 02 F6 | 	mov	arg01, local01
19254     60 AB B0 FD | 	call	#__system____builtin_atof
19258     FD 12 02 F6 | 	mov	arg01, result1
1925c     00 14 06 F6 | 	mov	arg02, #0
19260     34 A8 B0 FD | 	call	#__system___float_tointeger
19264     FD 1E 02 F6 | 	mov	local01, result1
19268                 | LR__2081
19268     37 00 00 FF 
1926c     38 E4 05 F1 | 	add	objptr, ##28216
19270     F2 1E 62 FC | 	wrlong	local01, objptr
19274     04 E4 05 F1 | 	add	objptr, #4
19278     F2 12 02 FB | 	rdlong	arg01, objptr
1927c                 | ' 
1927c                 | ' write_color:=ff
1927c     36 00 00 FF 
19280     FB E5 85 F1 | 	sub	objptr, ##28155
19284     F2 12 62 FC | 	wrlong	arg01, objptr
19288                 | ' write_background:=bb
19288     04 E4 05 F1 | 	add	objptr, #4
1928c     F2 1E 62 FC | 	wrlong	local01, objptr
19290     45 E4 85 F1 | 	sub	objptr, #69
19294     A7 F0 03 F6 | 	mov	ptra, fp
19298     B2 00 A0 FD | 	call	#popregs_
1929c                 | _do_paper_ret
1929c     2D 00 64 FD | 	ret
192a0                 | 
192a0                 | ' 
192a0                 | ' sub do_ink
192a0                 | _do_ink
192a0     03 4A 05 F6 | 	mov	COUNT_, #3
192a4     A8 00 A0 FD | 	call	#pushregs_
192a8     AC 27 BF FD | 	call	#_pop
192ac     FD 1E 02 F6 | 	mov	local01, result1
192b0     FE 20 02 F6 | 	mov	local02, result2
192b4     FF 22 02 F6 | 	mov	local03, result3
192b8                 | ' t1=pop() 
192b8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
192b8     1E 22 0E F2 | 	cmp	local03, #30 wz
192bc     10 00 90 5D |  if_ne	jmp	#LR__2090
192c0     0F 13 02 F6 | 	mov	arg01, local01
192c4     00 14 06 F6 | 	mov	arg02, #0
192c8     CC A7 B0 FD | 	call	#__system___float_tointeger
192cc     FD 1E 02 F6 | 	mov	local01, result1
192d0                 | LR__2090
192d0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
192d0     1F 22 0E F2 | 	cmp	local03, #31 wz
192d4     18 00 90 5D |  if_ne	jmp	#LR__2091
192d8     0F 13 02 F6 | 	mov	arg01, local01
192dc     D8 AA B0 FD | 	call	#__system____builtin_atof
192e0     FD 12 02 F6 | 	mov	arg01, result1
192e4     00 14 06 F6 | 	mov	arg02, #0
192e8     AC A7 B0 FD | 	call	#__system___float_tointeger
192ec     FD 1E 02 F6 | 	mov	local01, result1
192f0                 | LR__2091
192f0     37 00 00 FF 
192f4     3C E4 05 F1 | 	add	objptr, ##28220
192f8     F2 1E 62 FC | 	wrlong	local01, objptr
192fc     04 E4 85 F1 | 	sub	objptr, #4
19300     F2 14 02 FB | 	rdlong	arg02, objptr
19304                 | ' 
19304                 | ' write_color:=ff
19304     36 00 00 FF 
19308     F7 E5 85 F1 | 	sub	objptr, ##28151
1930c     F2 1E 62 FC | 	wrlong	local01, objptr
19310                 | ' write_background:=bb
19310     04 E4 05 F1 | 	add	objptr, #4
19314     F2 14 62 FC | 	wrlong	arg02, objptr
19318     36 00 00 FF 
1931c     F7 E5 05 F1 | 	add	objptr, ##28151
19320     F2 12 02 FB | 	rdlong	arg01, objptr
19324     37 00 00 FF 
19328     3C E4 85 F1 | 	sub	objptr, ##28220
1932c     7C 4C B0 FD | 	call	#_hg010b_spin2_setcursorcolor
19330     A7 F0 03 F6 | 	mov	ptra, fp
19334     B2 00 A0 FD | 	call	#popregs_
19338                 | _do_ink_ret
19338     2D 00 64 FD | 	ret
1933c                 | 
1933c                 | ' 
1933c                 | ' 
1933c                 | ' sub do_font
1933c                 | _do_font
1933c     03 4A 05 F6 | 	mov	COUNT_, #3
19340     A8 00 A0 FD | 	call	#pushregs_
19344     10 27 BF FD | 	call	#_pop
19348     FD 1E 02 F6 | 	mov	local01, result1
1934c     FE 20 02 F6 | 	mov	local02, result2
19350     FF 22 02 F6 | 	mov	local03, result3
19354                 | ' t1=pop() 
19354                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
19354     1E 22 0E F2 | 	cmp	local03, #30 wz
19358     10 00 90 5D |  if_ne	jmp	#LR__2100
1935c     0F 13 02 F6 | 	mov	arg01, local01
19360     00 14 06 F6 | 	mov	arg02, #0
19364     30 A7 B0 FD | 	call	#__system___float_tointeger
19368     FD 1E 02 F6 | 	mov	local01, result1
1936c                 | LR__2100
1936c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1936c     1F 22 0E F2 | 	cmp	local03, #31 wz
19370     18 00 90 5D |  if_ne	jmp	#LR__2101
19374     0F 13 02 F6 | 	mov	arg01, local01
19378     3C AA B0 FD | 	call	#__system____builtin_atof
1937c     FD 12 02 F6 | 	mov	arg01, result1
19380     00 14 06 F6 | 	mov	arg02, #0
19384     10 A7 B0 FD | 	call	#__system___float_tointeger
19388     FD 1E 02 F6 | 	mov	local01, result1
1938c                 | LR__2101
1938c     37 00 00 FF 
19390     40 E4 05 F1 | 	add	objptr, ##28224
19394     F2 1E 62 FC | 	wrlong	local01, objptr
19398     37 00 00 FF 
1939c     40 E4 85 F1 | 	sub	objptr, ##28224
193a0     02 1E 66 F0 | 	shl	local01, #2
193a4     0F 13 02 F6 | 	mov	arg01, local01
193a8     44 5C B0 FD | 	call	#_hg010b_spin2_setfontfamily
193ac     A7 F0 03 F6 | 	mov	ptra, fp
193b0     B2 00 A0 FD | 	call	#popregs_
193b4                 | _do_font_ret
193b4     2D 00 64 FD | 	ret
193b8                 | 
193b8                 | ' 
193b8                 | ' sub do_mode
193b8                 | _do_mode
193b8     05 4A 05 F6 | 	mov	COUNT_, #5
193bc     A8 00 A0 FD | 	call	#pushregs_
193c0     94 26 BF FD | 	call	#_pop
193c4     FD 1E 02 F6 | 	mov	local01, result1
193c8     FE 20 02 F6 | 	mov	local02, result2
193cc     FF 22 02 F6 | 	mov	local03, result3
193d0                 | ' t1=pop() 
193d0                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
193d0     1E 22 0E F2 | 	cmp	local03, #30 wz
193d4     10 00 90 5D |  if_ne	jmp	#LR__2110
193d8     0F 13 02 F6 | 	mov	arg01, local01
193dc     00 14 06 F6 | 	mov	arg02, #0
193e0     B4 A6 B0 FD | 	call	#__system___float_tointeger
193e4     FD 1E 02 F6 | 	mov	local01, result1
193e8                 | LR__2110
193e8                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
193e8     1F 22 0E F2 | 	cmp	local03, #31 wz
193ec     18 00 90 5D |  if_ne	jmp	#LR__2111
193f0     0F 13 02 F6 | 	mov	arg01, local01
193f4     C0 A9 B0 FD | 	call	#__system____builtin_atof
193f8     FD 12 02 F6 | 	mov	arg01, result1
193fc     00 14 06 F6 | 	mov	arg02, #0
19400     94 A6 B0 FD | 	call	#__system___float_tointeger
19404     FD 1E 02 F6 | 	mov	local01, result1
19408                 | LR__2111
19408                 | ' select case t1.result.iresult
19408     0F 25 02 F6 | 	mov	local04, local01
1940c     05 24 26 F3 | 	fle	local04, #5
19410     30 24 62 FD | 	jmprel	local04
19414                 | LR__2112
19414     14 00 90 FD | 	jmp	#LR__2113
19418     A8 00 90 FD | 	jmp	#LR__2114
1941c     10 01 90 FD | 	jmp	#LR__2115
19420     78 01 90 FD | 	jmp	#LR__2116
19424     E0 01 90 FD | 	jmp	#LR__2117
19428     70 02 90 FD | 	jmp	#LR__2118
1942c                 | LR__2113
1942c     37 00 00 FF 
19430     40 E4 05 F1 | 	add	objptr, ##28224
19434     F2 02 68 FC | 	wrlong	#1, objptr
19438     04 E4 85 F1 | 	sub	objptr, #4
1943c     F2 34 69 FC | 	wrlong	#154, objptr
19440     19 00 00 FF 
19444     D4 E4 05 F1 | 	add	objptr, ##13012
19448     F2 02 68 FC | 	wrlong	#1, objptr
1944c     19 00 00 FF 
19450     D8 E4 85 F1 | 	sub	objptr, ##13016
19454     F2 26 69 FC | 	wrlong	#147, objptr
19458     37 00 00 FF 
1945c     38 E4 85 F1 | 	sub	objptr, ##28216
19460     04 12 06 F6 | 	mov	arg01, #4
19464     88 5B B0 FD | 	call	#_hg010b_spin2_setfontfamily
19468     37 00 00 FF 
1946c     3C E4 05 F1 | 	add	objptr, ##28220
19470     F2 12 02 FB | 	rdlong	arg01, objptr
19474     04 E4 85 F1 | 	sub	objptr, #4
19478     F2 14 02 FB | 	rdlong	arg02, objptr
1947c                 | ' 
1947c                 | ' write_color:=ff
1947c     36 00 00 FF 
19480     F7 E5 85 F1 | 	sub	objptr, ##28151
19484     F2 12 62 FC | 	wrlong	arg01, objptr
19488                 | ' write_background:=bb
19488     04 E4 05 F1 | 	add	objptr, #4
1948c     F2 14 62 FC | 	wrlong	arg02, objptr
19490     01 00 00 FF 
19494     00 EA 05 F1 | 	add	ptr__dat__, ##512
19498     51 00 00 FF 
1949c     6F E5 05 F1 | 	add	objptr, ##41839
194a0     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
194a4     04 E4 85 F1 | 	sub	objptr, #4
194a8     03 00 80 FF 
194ac     F2 30 69 FC | 	wrlong	##1688, objptr
194b0     51 00 00 FF 
194b4     B0 E5 85 F1 | 	sub	objptr, ##41904
194b8     01 00 00 FF 
194bc     00 EA 85 F1 | 	sub	ptr__dat__, ##512
194c0     D8 01 90 FD | 	jmp	#LR__2118
194c4                 | LR__2114
194c4     37 00 00 FF 
194c8     40 E4 05 F1 | 	add	objptr, ##28224
194cc     F2 00 68 FC | 	wrlong	#0, objptr
194d0     04 E4 85 F1 | 	sub	objptr, #4
194d4     F2 2E 68 FC | 	wrlong	#23, objptr
194d8     19 00 00 FF 
194dc     D4 E4 05 F1 | 	add	objptr, ##13012
194e0     F2 00 68 FC | 	wrlong	#0, objptr
194e4     19 00 00 FF 
194e8     D8 E4 85 F1 | 	sub	objptr, ##13016
194ec     F2 00 68 FC | 	wrlong	#0, objptr
194f0     37 00 00 FF 
194f4     38 E4 85 F1 | 	sub	objptr, ##28216
194f8     00 12 06 F6 | 	mov	arg01, #0
194fc     F0 5A B0 FD | 	call	#_hg010b_spin2_setfontfamily
19500     37 00 00 FF 
19504     3C E4 05 F1 | 	add	objptr, ##28220
19508     F2 12 02 FB | 	rdlong	arg01, objptr
1950c     04 E4 85 F1 | 	sub	objptr, #4
19510     F2 14 02 FB | 	rdlong	arg02, objptr
19514                 | ' 
19514                 | ' write_color:=ff
19514     36 00 00 FF 
19518     F7 E5 85 F1 | 	sub	objptr, ##28151
1951c     F2 12 62 FC | 	wrlong	arg01, objptr
19520                 | ' write_background:=bb
19520     04 E4 05 F1 | 	add	objptr, #4
19524     F2 14 62 FC | 	wrlong	arg02, objptr
19528     45 E4 85 F1 | 	sub	objptr, #69
1952c     6C 01 90 FD | 	jmp	#LR__2118
19530                 | LR__2115
19530     37 00 00 FF 
19534     40 E4 05 F1 | 	add	objptr, ##28224
19538     F2 00 68 FC | 	wrlong	#0, objptr
1953c     04 E4 85 F1 | 	sub	objptr, #4
19540     F2 6A 69 FC | 	wrlong	#181, objptr
19544     19 00 00 FF 
19548     D4 E4 05 F1 | 	add	objptr, ##13012
1954c     F2 00 68 FC | 	wrlong	#0, objptr
19550     19 00 00 FF 
19554     D8 E4 85 F1 | 	sub	objptr, ##13016
19558     F2 00 68 FC | 	wrlong	#0, objptr
1955c     37 00 00 FF 
19560     38 E4 85 F1 | 	sub	objptr, ##28216
19564     00 12 06 F6 | 	mov	arg01, #0
19568     84 5A B0 FD | 	call	#_hg010b_spin2_setfontfamily
1956c     37 00 00 FF 
19570     3C E4 05 F1 | 	add	objptr, ##28220
19574     F2 12 02 FB | 	rdlong	arg01, objptr
19578     04 E4 85 F1 | 	sub	objptr, #4
1957c     F2 14 02 FB | 	rdlong	arg02, objptr
19580                 | ' 
19580                 | ' write_color:=ff
19580     36 00 00 FF 
19584     F7 E5 85 F1 | 	sub	objptr, ##28151
19588     F2 12 62 FC | 	wrlong	arg01, objptr
1958c                 | ' write_background:=bb
1958c     04 E4 05 F1 | 	add	objptr, #4
19590     F2 14 62 FC | 	wrlong	arg02, objptr
19594     45 E4 85 F1 | 	sub	objptr, #69
19598     00 01 90 FD | 	jmp	#LR__2118
1959c                 | LR__2116
1959c     37 00 00 FF 
195a0     40 E4 05 F1 | 	add	objptr, ##28224
195a4     F2 00 68 FC | 	wrlong	#0, objptr
195a8     04 E4 85 F1 | 	sub	objptr, #4
195ac     F2 1E 68 FC | 	wrlong	#15, objptr
195b0     19 00 00 FF 
195b4     D4 E4 05 F1 | 	add	objptr, ##13012
195b8     F2 00 68 FC | 	wrlong	#0, objptr
195bc     19 00 00 FF 
195c0     D8 E4 85 F1 | 	sub	objptr, ##13016
195c4     F2 00 68 FC | 	wrlong	#0, objptr
195c8     37 00 00 FF 
195cc     38 E4 85 F1 | 	sub	objptr, ##28216
195d0     00 12 06 F6 | 	mov	arg01, #0
195d4     18 5A B0 FD | 	call	#_hg010b_spin2_setfontfamily
195d8     37 00 00 FF 
195dc     3C E4 05 F1 | 	add	objptr, ##28220
195e0     F2 12 02 FB | 	rdlong	arg01, objptr
195e4     04 E4 85 F1 | 	sub	objptr, #4
195e8     F2 14 02 FB | 	rdlong	arg02, objptr
195ec                 | ' 
195ec                 | ' write_color:=ff
195ec     36 00 00 FF 
195f0     F7 E5 85 F1 | 	sub	objptr, ##28151
195f4     F2 12 62 FC | 	wrlong	arg01, objptr
195f8                 | ' write_background:=bb
195f8     04 E4 05 F1 | 	add	objptr, #4
195fc     F2 14 62 FC | 	wrlong	arg02, objptr
19600     45 E4 85 F1 | 	sub	objptr, #69
19604     94 00 90 FD | 	jmp	#LR__2118
19608                 | LR__2117
19608     37 00 00 FF 
1960c     40 E4 05 F1 | 	add	objptr, ##28224
19610     F2 02 68 FC | 	wrlong	#1, objptr
19614     04 E4 85 F1 | 	sub	objptr, #4
19618     F2 02 68 FC | 	wrlong	#1, objptr
1961c     19 00 00 FF 
19620     D4 E4 05 F1 | 	add	objptr, ##13012
19624     F2 02 68 FC | 	wrlong	#1, objptr
19628     19 00 00 FF 
1962c     D8 E4 85 F1 | 	sub	objptr, ##13016
19630     F2 1C 68 FC | 	wrlong	#14, objptr
19634     37 00 00 FF 
19638     38 E4 85 F1 | 	sub	objptr, ##28216
1963c     04 12 06 F6 | 	mov	arg01, #4
19640     AC 59 B0 FD | 	call	#_hg010b_spin2_setfontfamily
19644     37 00 00 FF 
19648     3C E4 05 F1 | 	add	objptr, ##28220
1964c     F2 12 02 FB | 	rdlong	arg01, objptr
19650     04 E4 85 F1 | 	sub	objptr, #4
19654     F2 14 02 FB | 	rdlong	arg02, objptr
19658                 | ' 
19658                 | ' write_color:=ff
19658     36 00 00 FF 
1965c     F7 E5 85 F1 | 	sub	objptr, ##28151
19660     F2 12 62 FC | 	wrlong	arg01, objptr
19664                 | ' write_background:=bb
19664     04 E4 05 F1 | 	add	objptr, #4
19668     F2 14 62 FC | 	wrlong	arg02, objptr
1966c     07 00 00 FF 
19670     8A EB 05 F1 | 	add	ptr__dat__, ##3978
19674     51 00 00 FF 
19678     6F E5 05 F1 | 	add	objptr, ##41839
1967c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
19680     04 E4 85 F1 | 	sub	objptr, #4
19684     03 00 80 FF 
19688     F2 30 69 FC | 	wrlong	##1688, objptr
1968c     51 00 00 FF 
19690     B0 E5 85 F1 | 	sub	objptr, ##41904
19694     07 00 00 FF 
19698     8A EB 85 F1 | 	sub	ptr__dat__, ##3978
1969c                 | LR__2118
1969c     51 00 00 FF 
196a0     AC E5 05 F1 | 	add	objptr, ##41900
196a4     F2 1E 62 FC | 	wrlong	local01, objptr
196a8     04 E4 85 F1 | 	sub	objptr, #4
196ac     F2 12 02 FB | 	rdlong	arg01, objptr
196b0     0E 00 00 FF 
196b4     4C E5 85 F1 | 	sub	objptr, ##7500
196b8     F2 26 02 FB | 	rdlong	local05, objptr
196bc     43 00 00 FF 
196c0     5C E4 85 F1 | 	sub	objptr, ##34396
196c4     13 13 82 F1 | 	sub	arg01, local05
196c8     00 14 06 F6 | 	mov	arg02, #0
196cc     0A 16 06 F6 | 	mov	arg03, #10
196d0     18 96 B0 FD | 	call	#__system__Number_S
196d4     FD 12 02 F6 | 	mov	arg01, result1
196d8     85 01 00 FF 
196dc     E6 14 06 F6 | 	mov	arg02, ##@LR__5507
196e0     94 73 B0 FD | 	call	#__system___string_concat
196e4     50 00 00 FF 
196e8     0C E5 05 F1 | 	add	objptr, ##41228
196ec     F2 FA 61 FC | 	wrlong	result1, objptr
196f0     19 00 00 FF 
196f4     D0 E4 85 F1 | 	sub	objptr, ##13008
196f8     F2 12 02 FB | 	rdlong	arg01, objptr
196fc     04 E4 85 F1 | 	sub	objptr, #4
19700     F2 14 02 FB | 	rdlong	arg02, objptr
19704     37 00 00 FF 
19708     38 E4 85 F1 | 	sub	objptr, ##28216
1970c     30 5A B0 FD | 	call	#_hg010b_spin2_cls
19710     85 01 00 FF 
19714     F8 12 06 F6 | 	mov	arg01, ##@LR__5508
19718                 | ' 
19718                 | ' write(text)
19718     E4 5D B0 FD | 	call	#_hg010b_spin2_write
1971c                 | ' crlf
1971c     E0 62 B0 FD | 	call	#_hg010b_spin2_crlf
19720     18 00 00 FF 
19724     4C EB 05 F1 | 	add	ptr__dat__, ##12620
19728     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
1972c     18 00 00 FF 
19730     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
19734                 | ' 
19734                 | ' write(text)
19734     C8 5D B0 FD | 	call	#_hg010b_spin2_write
19738                 | ' crlf
19738     C4 62 B0 FD | 	call	#_hg010b_spin2_crlf
1973c     50 00 00 FF 
19740     0C E5 05 F1 | 	add	objptr, ##41228
19744     F2 12 02 FB | 	rdlong	arg01, objptr
19748     50 00 00 FF 
1974c     0C E5 85 F1 | 	sub	objptr, ##41228
19750                 | ' 
19750                 | ' write(text)
19750     AC 5D B0 FD | 	call	#_hg010b_spin2_write
19754                 | ' crlf
19754     A8 62 B0 FD | 	call	#_hg010b_spin2_crlf
19758     A7 F0 03 F6 | 	mov	ptra, fp
1975c     B2 00 A0 FD | 	call	#popregs_
19760                 | _do_mode_ret
19760     2D 00 64 FD | 	ret
19764                 | 
19764                 | ' 
19764                 | ' sub do_setwave
19764                 | _do_setwave
19764     02 4A 05 F6 | 	mov	COUNT_, #2
19768     A8 00 A0 FD | 	call	#pushregs_
1976c     18 F0 07 F1 | 	add	ptra, #24
19770     E4 22 BF FD | 	call	#_pop
19774     FD 12 02 F6 | 	mov	arg01, result1
19778     FE 1E 02 F6 | 	mov	local01, result2
1977c     FF 20 02 F6 | 	mov	local02, result3
19780     A7 12 62 FC | 	wrlong	arg01, fp
19784     04 4E 05 F1 | 	add	fp, #4
19788     A7 1E 62 FC | 	wrlong	local01, fp
1978c     04 4E 05 F1 | 	add	fp, #4
19790     A7 20 62 FC | 	wrlong	local02, fp
19794     08 4E 85 F1 | 	sub	fp, #8
19798     BC 22 BF FD | 	call	#_pop
1979c     FD 20 02 F6 | 	mov	local02, result1
197a0     0C 4E 05 F1 | 	add	fp, #12
197a4     A7 20 62 FC | 	wrlong	local02, fp
197a8     04 4E 05 F1 | 	add	fp, #4
197ac     A7 FC 61 FC | 	wrlong	result2, fp
197b0     04 4E 05 F1 | 	add	fp, #4
197b4     A7 FE 61 FC | 	wrlong	result3, fp
197b8     08 4E 85 F1 | 	sub	fp, #8
197bc     A7 12 02 F6 | 	mov	arg01, fp
197c0     0C 4E 85 F1 | 	sub	fp, #12
197c4     60 C3 BF FD | 	call	#_converttoint
197c8     FD 20 02 F6 | 	mov	local02, result1
197cc     10 1F 02 F6 | 	mov	local01, local02
197d0     01 1E 66 F0 | 	shl	local01, #1
197d4     10 1F 02 F1 | 	add	local01, local02
197d8     03 1E 66 F0 | 	shl	local01, #3
197dc     14 00 00 FF 
197e0     38 E5 05 F1 | 	add	objptr, ##10552
197e4     F2 1E 02 F1 | 	add	local01, objptr
197e8     A7 12 02 F6 | 	mov	arg01, fp
197ec     14 00 00 FF 
197f0     38 E5 85 F1 | 	sub	objptr, ##10552
197f4     30 C3 BF FD | 	call	#_converttoint
197f8     04 1E 06 F1 | 	add	local01, #4
197fc     0F FB 41 FC | 	wrbyte	result1, local01
19800     A7 F0 03 F6 | 	mov	ptra, fp
19804     B2 00 A0 FD | 	call	#popregs_
19808                 | _do_setwave_ret
19808     2D 00 64 FD | 	ret
1980c                 | 
1980c                 | ' 
1980c                 | ' sub do_setsustain
1980c                 | _do_setsustain
1980c     02 4A 05 F6 | 	mov	COUNT_, #2
19810     A8 00 A0 FD | 	call	#pushregs_
19814     18 F0 07 F1 | 	add	ptra, #24
19818     3C 22 BF FD | 	call	#_pop
1981c     FD 12 02 F6 | 	mov	arg01, result1
19820     FE 1E 02 F6 | 	mov	local01, result2
19824     FF 20 02 F6 | 	mov	local02, result3
19828     A7 12 62 FC | 	wrlong	arg01, fp
1982c     04 4E 05 F1 | 	add	fp, #4
19830     A7 1E 62 FC | 	wrlong	local01, fp
19834     04 4E 05 F1 | 	add	fp, #4
19838     A7 20 62 FC | 	wrlong	local02, fp
1983c     08 4E 85 F1 | 	sub	fp, #8
19840     14 22 BF FD | 	call	#_pop
19844     FD 20 02 F6 | 	mov	local02, result1
19848     0C 4E 05 F1 | 	add	fp, #12
1984c     A7 20 62 FC | 	wrlong	local02, fp
19850     04 4E 05 F1 | 	add	fp, #4
19854     A7 FC 61 FC | 	wrlong	result2, fp
19858     04 4E 05 F1 | 	add	fp, #4
1985c     A7 FE 61 FC | 	wrlong	result3, fp
19860     08 4E 85 F1 | 	sub	fp, #8
19864     A7 12 02 F6 | 	mov	arg01, fp
19868     0C 4E 85 F1 | 	sub	fp, #12
1986c     B8 C2 BF FD | 	call	#_converttoint
19870     FD 20 02 F6 | 	mov	local02, result1
19874     10 1F 02 F6 | 	mov	local01, local02
19878     01 1E 66 F0 | 	shl	local01, #1
1987c     10 1F 02 F1 | 	add	local01, local02
19880     03 1E 66 F0 | 	shl	local01, #3
19884     14 00 00 FF 
19888     38 E5 05 F1 | 	add	objptr, ##10552
1988c     F2 1E 02 F1 | 	add	local01, objptr
19890     A7 12 02 F6 | 	mov	arg01, fp
19894     14 00 00 FF 
19898     38 E5 85 F1 | 	sub	objptr, ##10552
1989c     88 C2 BF FD | 	call	#_converttoint
198a0     14 1E 06 F1 | 	add	local01, #20
198a4     0F FB 51 FC | 	wrword	result1, local01
198a8     A7 F0 03 F6 | 	mov	ptra, fp
198ac     B2 00 A0 FD | 	call	#popregs_
198b0                 | _do_setsustain_ret
198b0     2D 00 64 FD | 	ret
198b4                 | 
198b4                 | ' 
198b4                 | ' sub do_setenv
198b4                 | _do_setenv
198b4     02 4A 05 F6 | 	mov	COUNT_, #2
198b8     A8 00 A0 FD | 	call	#pushregs_
198bc     18 F0 07 F1 | 	add	ptra, #24
198c0     94 21 BF FD | 	call	#_pop
198c4     FD 12 02 F6 | 	mov	arg01, result1
198c8     FE 1E 02 F6 | 	mov	local01, result2
198cc     FF 20 02 F6 | 	mov	local02, result3
198d0     A7 12 62 FC | 	wrlong	arg01, fp
198d4     04 4E 05 F1 | 	add	fp, #4
198d8     A7 1E 62 FC | 	wrlong	local01, fp
198dc     04 4E 05 F1 | 	add	fp, #4
198e0     A7 20 62 FC | 	wrlong	local02, fp
198e4     08 4E 85 F1 | 	sub	fp, #8
198e8     6C 21 BF FD | 	call	#_pop
198ec     FD 20 02 F6 | 	mov	local02, result1
198f0     0C 4E 05 F1 | 	add	fp, #12
198f4     A7 20 62 FC | 	wrlong	local02, fp
198f8     04 4E 05 F1 | 	add	fp, #4
198fc     A7 FC 61 FC | 	wrlong	result2, fp
19900     04 4E 05 F1 | 	add	fp, #4
19904     A7 FE 61 FC | 	wrlong	result3, fp
19908     08 4E 85 F1 | 	sub	fp, #8
1990c     A7 12 02 F6 | 	mov	arg01, fp
19910     0C 4E 85 F1 | 	sub	fp, #12
19914     10 C2 BF FD | 	call	#_converttoint
19918     FD 20 02 F6 | 	mov	local02, result1
1991c     10 1F 02 F6 | 	mov	local01, local02
19920     01 1E 66 F0 | 	shl	local01, #1
19924     10 1F 02 F1 | 	add	local01, local02
19928     03 1E 66 F0 | 	shl	local01, #3
1992c     14 00 00 FF 
19930     38 E5 05 F1 | 	add	objptr, ##10552
19934     F2 1E 02 F1 | 	add	local01, objptr
19938     A7 12 02 F6 | 	mov	arg01, fp
1993c     14 00 00 FF 
19940     38 E5 85 F1 | 	sub	objptr, ##10552
19944     E0 C1 BF FD | 	call	#_converttoint
19948     05 1E 06 F1 | 	add	local01, #5
1994c     0F FB 41 FC | 	wrbyte	result1, local01
19950     A7 F0 03 F6 | 	mov	ptra, fp
19954     B2 00 A0 FD | 	call	#popregs_
19958                 | _do_setenv_ret
19958     2D 00 64 FD | 	ret
1995c                 | 
1995c                 | ' 
1995c                 | ' sub do_setdelay
1995c                 | _do_setdelay
1995c     02 4A 05 F6 | 	mov	COUNT_, #2
19960     A8 00 A0 FD | 	call	#pushregs_
19964     18 F0 07 F1 | 	add	ptra, #24
19968     EC 20 BF FD | 	call	#_pop
1996c     FD 12 02 F6 | 	mov	arg01, result1
19970     FE 1E 02 F6 | 	mov	local01, result2
19974     FF 20 02 F6 | 	mov	local02, result3
19978     A7 12 62 FC | 	wrlong	arg01, fp
1997c     04 4E 05 F1 | 	add	fp, #4
19980     A7 1E 62 FC | 	wrlong	local01, fp
19984     04 4E 05 F1 | 	add	fp, #4
19988     A7 20 62 FC | 	wrlong	local02, fp
1998c     08 4E 85 F1 | 	sub	fp, #8
19990     C4 20 BF FD | 	call	#_pop
19994     FD 20 02 F6 | 	mov	local02, result1
19998     0C 4E 05 F1 | 	add	fp, #12
1999c     A7 20 62 FC | 	wrlong	local02, fp
199a0     04 4E 05 F1 | 	add	fp, #4
199a4     A7 FC 61 FC | 	wrlong	result2, fp
199a8     04 4E 05 F1 | 	add	fp, #4
199ac     A7 FE 61 FC | 	wrlong	result3, fp
199b0     08 4E 85 F1 | 	sub	fp, #8
199b4     A7 12 02 F6 | 	mov	arg01, fp
199b8     0C 4E 85 F1 | 	sub	fp, #12
199bc     68 C1 BF FD | 	call	#_converttoint
199c0     FD 20 02 F6 | 	mov	local02, result1
199c4     10 1F 02 F6 | 	mov	local01, local02
199c8     01 1E 66 F0 | 	shl	local01, #1
199cc     10 1F 02 F1 | 	add	local01, local02
199d0     03 1E 66 F0 | 	shl	local01, #3
199d4     14 00 00 FF 
199d8     38 E5 05 F1 | 	add	objptr, ##10552
199dc     F2 1E 02 F1 | 	add	local01, objptr
199e0     A7 12 02 F6 | 	mov	arg01, fp
199e4     14 00 00 FF 
199e8     38 E5 85 F1 | 	sub	objptr, ##10552
199ec     38 C1 BF FD | 	call	#_converttoint
199f0     06 1E 06 F1 | 	add	local01, #6
199f4     0F FB 51 FC | 	wrword	result1, local01
199f8     A7 F0 03 F6 | 	mov	ptra, fp
199fc     B2 00 A0 FD | 	call	#popregs_
19a00                 | _do_setdelay_ret
19a00     2D 00 64 FD | 	ret
19a04                 | 
19a04                 | ' 
19a04                 | ' sub do_setlen
19a04                 | _do_setlen
19a04     02 4A 05 F6 | 	mov	COUNT_, #2
19a08     A8 00 A0 FD | 	call	#pushregs_
19a0c     18 F0 07 F1 | 	add	ptra, #24
19a10     44 20 BF FD | 	call	#_pop
19a14     FD 12 02 F6 | 	mov	arg01, result1
19a18     FE 1E 02 F6 | 	mov	local01, result2
19a1c     FF 20 02 F6 | 	mov	local02, result3
19a20     A7 12 62 FC | 	wrlong	arg01, fp
19a24     04 4E 05 F1 | 	add	fp, #4
19a28     A7 1E 62 FC | 	wrlong	local01, fp
19a2c     04 4E 05 F1 | 	add	fp, #4
19a30     A7 20 62 FC | 	wrlong	local02, fp
19a34     08 4E 85 F1 | 	sub	fp, #8
19a38     1C 20 BF FD | 	call	#_pop
19a3c     FD 20 02 F6 | 	mov	local02, result1
19a40     0C 4E 05 F1 | 	add	fp, #12
19a44     A7 20 62 FC | 	wrlong	local02, fp
19a48     04 4E 05 F1 | 	add	fp, #4
19a4c     A7 FC 61 FC | 	wrlong	result2, fp
19a50     04 4E 05 F1 | 	add	fp, #4
19a54     A7 FE 61 FC | 	wrlong	result3, fp
19a58     08 4E 85 F1 | 	sub	fp, #8
19a5c     A7 12 02 F6 | 	mov	arg01, fp
19a60     0C 4E 85 F1 | 	sub	fp, #12
19a64     C0 C0 BF FD | 	call	#_converttoint
19a68     FD 20 02 F6 | 	mov	local02, result1
19a6c     10 1F 02 F6 | 	mov	local01, local02
19a70     01 1E 66 F0 | 	shl	local01, #1
19a74     10 1F 02 F1 | 	add	local01, local02
19a78     03 1E 66 F0 | 	shl	local01, #3
19a7c     14 00 00 FF 
19a80     38 E5 05 F1 | 	add	objptr, ##10552
19a84     F2 1E 02 F1 | 	add	local01, objptr
19a88     A7 12 02 F6 | 	mov	arg01, fp
19a8c     14 00 00 FF 
19a90     38 E5 85 F1 | 	sub	objptr, ##10552
19a94     4C C1 BF FD | 	call	#_converttofloat
19a98     08 1E 06 F1 | 	add	local01, #8
19a9c     0F FB 61 FC | 	wrlong	result1, local01
19aa0     A7 F0 03 F6 | 	mov	ptra, fp
19aa4     B2 00 A0 FD | 	call	#popregs_
19aa8                 | _do_setlen_ret
19aa8     2D 00 64 FD | 	ret
19aac                 | 
19aac                 | ' 
19aac                 | ' sub do_setvol
19aac                 | _do_setvol
19aac     02 4A 05 F6 | 	mov	COUNT_, #2
19ab0     A8 00 A0 FD | 	call	#pushregs_
19ab4     18 F0 07 F1 | 	add	ptra, #24
19ab8     9C 1F BF FD | 	call	#_pop
19abc     FD 12 02 F6 | 	mov	arg01, result1
19ac0     FE 1E 02 F6 | 	mov	local01, result2
19ac4     FF 20 02 F6 | 	mov	local02, result3
19ac8     A7 12 62 FC | 	wrlong	arg01, fp
19acc     04 4E 05 F1 | 	add	fp, #4
19ad0     A7 1E 62 FC | 	wrlong	local01, fp
19ad4     04 4E 05 F1 | 	add	fp, #4
19ad8     A7 20 62 FC | 	wrlong	local02, fp
19adc     08 4E 85 F1 | 	sub	fp, #8
19ae0     74 1F BF FD | 	call	#_pop
19ae4     FD 20 02 F6 | 	mov	local02, result1
19ae8     0C 4E 05 F1 | 	add	fp, #12
19aec     A7 20 62 FC | 	wrlong	local02, fp
19af0     04 4E 05 F1 | 	add	fp, #4
19af4     A7 FC 61 FC | 	wrlong	result2, fp
19af8     04 4E 05 F1 | 	add	fp, #4
19afc     A7 FE 61 FC | 	wrlong	result3, fp
19b00     08 4E 85 F1 | 	sub	fp, #8
19b04     A7 12 02 F6 | 	mov	arg01, fp
19b08     0C 4E 85 F1 | 	sub	fp, #12
19b0c     18 C0 BF FD | 	call	#_converttoint
19b10     FD 20 02 F6 | 	mov	local02, result1
19b14     10 1F 02 F6 | 	mov	local01, local02
19b18     01 1E 66 F0 | 	shl	local01, #1
19b1c     10 1F 02 F1 | 	add	local01, local02
19b20     03 1E 66 F0 | 	shl	local01, #3
19b24     14 00 00 FF 
19b28     38 E5 05 F1 | 	add	objptr, ##10552
19b2c     F2 1E 02 F1 | 	add	local01, objptr
19b30     A7 12 02 F6 | 	mov	arg01, fp
19b34     14 00 00 FF 
19b38     38 E5 85 F1 | 	sub	objptr, ##10552
19b3c     A4 C0 BF FD | 	call	#_converttofloat
19b40     0C 1E 06 F1 | 	add	local01, #12
19b44     0F FB 61 FC | 	wrlong	result1, local01
19b48     A7 F0 03 F6 | 	mov	ptra, fp
19b4c     B2 00 A0 FD | 	call	#popregs_
19b50                 | _do_setvol_ret
19b50     2D 00 64 FD | 	ret
19b54                 | 
19b54                 | ' 
19b54                 | ' sub do_setpan
19b54                 | _do_setpan
19b54     02 4A 05 F6 | 	mov	COUNT_, #2
19b58     A8 00 A0 FD | 	call	#pushregs_
19b5c     18 F0 07 F1 | 	add	ptra, #24
19b60     F4 1E BF FD | 	call	#_pop
19b64     FD 12 02 F6 | 	mov	arg01, result1
19b68     FE 1E 02 F6 | 	mov	local01, result2
19b6c     FF 20 02 F6 | 	mov	local02, result3
19b70     A7 12 62 FC | 	wrlong	arg01, fp
19b74     04 4E 05 F1 | 	add	fp, #4
19b78     A7 1E 62 FC | 	wrlong	local01, fp
19b7c     04 4E 05 F1 | 	add	fp, #4
19b80     A7 20 62 FC | 	wrlong	local02, fp
19b84     08 4E 85 F1 | 	sub	fp, #8
19b88     CC 1E BF FD | 	call	#_pop
19b8c     FD 20 02 F6 | 	mov	local02, result1
19b90     0C 4E 05 F1 | 	add	fp, #12
19b94     A7 20 62 FC | 	wrlong	local02, fp
19b98     04 4E 05 F1 | 	add	fp, #4
19b9c     A7 FC 61 FC | 	wrlong	result2, fp
19ba0     04 4E 05 F1 | 	add	fp, #4
19ba4     A7 FE 61 FC | 	wrlong	result3, fp
19ba8     08 4E 85 F1 | 	sub	fp, #8
19bac     A7 12 02 F6 | 	mov	arg01, fp
19bb0     0C 4E 85 F1 | 	sub	fp, #12
19bb4     70 BF BF FD | 	call	#_converttoint
19bb8     FD 20 02 F6 | 	mov	local02, result1
19bbc     10 1F 02 F6 | 	mov	local01, local02
19bc0     01 1E 66 F0 | 	shl	local01, #1
19bc4     10 1F 02 F1 | 	add	local01, local02
19bc8     03 1E 66 F0 | 	shl	local01, #3
19bcc     14 00 00 FF 
19bd0     38 E5 05 F1 | 	add	objptr, ##10552
19bd4     F2 1E 02 F1 | 	add	local01, objptr
19bd8     A7 12 02 F6 | 	mov	arg01, fp
19bdc     14 00 00 FF 
19be0     38 E5 85 F1 | 	sub	objptr, ##10552
19be4     FC BF BF FD | 	call	#_converttofloat
19be8     10 1E 06 F1 | 	add	local01, #16
19bec     0F FB 61 FC | 	wrlong	result1, local01
19bf0     A7 F0 03 F6 | 	mov	ptra, fp
19bf4     B2 00 A0 FD | 	call	#popregs_
19bf8                 | _do_setpan_ret
19bf8     2D 00 64 FD | 	ret
19bfc                 | 
19bfc                 | ' 
19bfc                 | ' 
19bfc                 | ' sub do_pinwrite
19bfc                 | _do_pinwrite
19bfc     01 4A 05 F6 | 	mov	COUNT_, #1
19c00     A8 00 A0 FD | 	call	#pushregs_
19c04     18 F0 07 F1 | 	add	ptra, #24
19c08     4C 1E BF FD | 	call	#_pop
19c0c     FD 14 02 F6 | 	mov	arg02, result1
19c10     FE 12 02 F6 | 	mov	arg01, result2
19c14     FF 1E 02 F6 | 	mov	local01, result3
19c18     A7 14 62 FC | 	wrlong	arg02, fp
19c1c     04 4E 05 F1 | 	add	fp, #4
19c20     A7 12 62 FC | 	wrlong	arg01, fp
19c24     04 4E 05 F1 | 	add	fp, #4
19c28     A7 1E 62 FC | 	wrlong	local01, fp
19c2c     08 4E 85 F1 | 	sub	fp, #8
19c30     24 1E BF FD | 	call	#_pop
19c34     FF 1E 02 F6 | 	mov	local01, result3
19c38     0C 4E 05 F1 | 	add	fp, #12
19c3c     A7 FA 61 FC | 	wrlong	result1, fp
19c40     04 4E 05 F1 | 	add	fp, #4
19c44     A7 FC 61 FC | 	wrlong	result2, fp
19c48     04 4E 05 F1 | 	add	fp, #4
19c4c     A7 1E 62 FC | 	wrlong	local01, fp
19c50     08 4E 85 F1 | 	sub	fp, #8
19c54     A7 12 02 F6 | 	mov	arg01, fp
19c58     0C 4E 85 F1 | 	sub	fp, #12
19c5c     C8 BE BF FD | 	call	#_converttoint
19c60     FD 1E 02 F6 | 	mov	local01, result1
19c64     A7 12 02 F6 | 	mov	arg01, fp
19c68     BC BE BF FD | 	call	#_converttoint
19c6c     FD 14 02 F6 | 	mov	arg02, result1
19c70     0F 13 02 F6 | 	mov	arg01, local01
19c74     58 6F B0 FD | 	call	#__system___pinwrite
19c78     A7 F0 03 F6 | 	mov	ptra, fp
19c7c     B2 00 A0 FD | 	call	#popregs_
19c80                 | _do_pinwrite_ret
19c80     2D 00 64 FD | 	ret
19c84                 | 
19c84                 | ' 
19c84                 | ' sub do_pinfloat
19c84                 | _do_pinfloat
19c84     00 4A 05 F6 | 	mov	COUNT_, #0
19c88     A8 00 A0 FD | 	call	#pushregs_
19c8c     0C F0 07 F1 | 	add	ptra, #12
19c90     C4 1D BF FD | 	call	#_pop
19c94     A7 FA 61 FC | 	wrlong	result1, fp
19c98     04 4E 05 F1 | 	add	fp, #4
19c9c     A7 FC 61 FC | 	wrlong	result2, fp
19ca0     04 4E 05 F1 | 	add	fp, #4
19ca4     A7 FE 61 FC | 	wrlong	result3, fp
19ca8     08 4E 85 F1 | 	sub	fp, #8
19cac     A7 12 02 F6 | 	mov	arg01, fp
19cb0     74 BE BF FD | 	call	#_converttoint
19cb4     50 FA 61 FD | 	fltl	result1
19cb8     A7 F0 03 F6 | 	mov	ptra, fp
19cbc     B2 00 A0 FD | 	call	#popregs_
19cc0                 | _do_pinfloat_ret
19cc0     2D 00 64 FD | 	ret
19cc4                 | 
19cc4                 | ' 
19cc4                 | ' sub do_pinlo
19cc4                 | _do_pinlo
19cc4     00 4A 05 F6 | 	mov	COUNT_, #0
19cc8     A8 00 A0 FD | 	call	#pushregs_
19ccc     0C F0 07 F1 | 	add	ptra, #12
19cd0     84 1D BF FD | 	call	#_pop
19cd4     A7 FA 61 FC | 	wrlong	result1, fp
19cd8     04 4E 05 F1 | 	add	fp, #4
19cdc     A7 FC 61 FC | 	wrlong	result2, fp
19ce0     04 4E 05 F1 | 	add	fp, #4
19ce4     A7 FE 61 FC | 	wrlong	result3, fp
19ce8     08 4E 85 F1 | 	sub	fp, #8
19cec     A7 12 02 F6 | 	mov	arg01, fp
19cf0     34 BE BF FD | 	call	#_converttoint
19cf4     58 FA 61 FD | 	drvl	result1
19cf8     A7 F0 03 F6 | 	mov	ptra, fp
19cfc     B2 00 A0 FD | 	call	#popregs_
19d00                 | _do_pinlo_ret
19d00     2D 00 64 FD | 	ret
19d04                 | 
19d04                 | ' 
19d04                 | ' sub do_pinhi
19d04                 | _do_pinhi
19d04     00 4A 05 F6 | 	mov	COUNT_, #0
19d08     A8 00 A0 FD | 	call	#pushregs_
19d0c     0C F0 07 F1 | 	add	ptra, #12
19d10     44 1D BF FD | 	call	#_pop
19d14     A7 FA 61 FC | 	wrlong	result1, fp
19d18     04 4E 05 F1 | 	add	fp, #4
19d1c     A7 FC 61 FC | 	wrlong	result2, fp
19d20     04 4E 05 F1 | 	add	fp, #4
19d24     A7 FE 61 FC | 	wrlong	result3, fp
19d28     08 4E 85 F1 | 	sub	fp, #8
19d2c     A7 12 02 F6 | 	mov	arg01, fp
19d30     F4 BD BF FD | 	call	#_converttoint
19d34     59 FA 61 FD | 	drvh	result1
19d38     A7 F0 03 F6 | 	mov	ptra, fp
19d3c     B2 00 A0 FD | 	call	#popregs_
19d40                 | _do_pinhi_ret
19d40     2D 00 64 FD | 	ret
19d44                 | 
19d44                 | ' 
19d44                 | ' sub do_pintoggle
19d44                 | _do_pintoggle
19d44     00 4A 05 F6 | 	mov	COUNT_, #0
19d48     A8 00 A0 FD | 	call	#pushregs_
19d4c     0C F0 07 F1 | 	add	ptra, #12
19d50     04 1D BF FD | 	call	#_pop
19d54     A7 FA 61 FC | 	wrlong	result1, fp
19d58     04 4E 05 F1 | 	add	fp, #4
19d5c     A7 FC 61 FC | 	wrlong	result2, fp
19d60     04 4E 05 F1 | 	add	fp, #4
19d64     A7 FE 61 FC | 	wrlong	result3, fp
19d68     08 4E 85 F1 | 	sub	fp, #8
19d6c     A7 12 02 F6 | 	mov	arg01, fp
19d70     B4 BD BF FD | 	call	#_converttoint
19d74     5F FA 61 FD | 	drvnot	result1
19d78     A7 F0 03 F6 | 	mov	ptra, fp
19d7c     B2 00 A0 FD | 	call	#popregs_
19d80                 | _do_pintoggle_ret
19d80     2D 00 64 FD | 	ret
19d84                 | 
19d84                 | ' 
19d84                 | ' 
19d84                 | ' sub do_pinstart
19d84                 | _do_pinstart
19d84     03 4A 05 F6 | 	mov	COUNT_, #3
19d88     A8 00 A0 FD | 	call	#pushregs_
19d8c     30 F0 07 F1 | 	add	ptra, #48
19d90     C4 1C BF FD | 	call	#_pop
19d94     FD 16 02 F6 | 	mov	arg03, result1
19d98     FE 14 02 F6 | 	mov	arg02, result2
19d9c     FF 18 02 F6 | 	mov	arg04, result3
19da0     A7 16 62 FC | 	wrlong	arg03, fp
19da4     04 4E 05 F1 | 	add	fp, #4
19da8     A7 14 62 FC | 	wrlong	arg02, fp
19dac     04 4E 05 F1 | 	add	fp, #4
19db0     A7 18 62 FC | 	wrlong	arg04, fp
19db4     08 4E 85 F1 | 	sub	fp, #8
19db8     9C 1C BF FD | 	call	#_pop
19dbc     FD 16 02 F6 | 	mov	arg03, result1
19dc0     FE 14 02 F6 | 	mov	arg02, result2
19dc4     FF 18 02 F6 | 	mov	arg04, result3
19dc8     0C 4E 05 F1 | 	add	fp, #12
19dcc     A7 16 62 FC | 	wrlong	arg03, fp
19dd0     04 4E 05 F1 | 	add	fp, #4
19dd4     A7 14 62 FC | 	wrlong	arg02, fp
19dd8     04 4E 05 F1 | 	add	fp, #4
19ddc     A7 18 62 FC | 	wrlong	arg04, fp
19de0     14 4E 85 F1 | 	sub	fp, #20
19de4     70 1C BF FD | 	call	#_pop
19de8     FD 16 02 F6 | 	mov	arg03, result1
19dec     FE 14 02 F6 | 	mov	arg02, result2
19df0     FF 18 02 F6 | 	mov	arg04, result3
19df4     18 4E 05 F1 | 	add	fp, #24
19df8     A7 16 62 FC | 	wrlong	arg03, fp
19dfc     04 4E 05 F1 | 	add	fp, #4
19e00     A7 14 62 FC | 	wrlong	arg02, fp
19e04     04 4E 05 F1 | 	add	fp, #4
19e08     A7 18 62 FC | 	wrlong	arg04, fp
19e0c     20 4E 85 F1 | 	sub	fp, #32
19e10     44 1C BF FD | 	call	#_pop
19e14     FF 16 02 F6 | 	mov	arg03, result3
19e18     24 4E 05 F1 | 	add	fp, #36
19e1c     A7 FA 61 FC | 	wrlong	result1, fp
19e20     04 4E 05 F1 | 	add	fp, #4
19e24     A7 FC 61 FC | 	wrlong	result2, fp
19e28     04 4E 05 F1 | 	add	fp, #4
19e2c     A7 16 62 FC | 	wrlong	arg03, fp
19e30     08 4E 85 F1 | 	sub	fp, #8
19e34     A7 12 02 F6 | 	mov	arg01, fp
19e38     24 4E 85 F1 | 	sub	fp, #36
19e3c     E8 BC BF FD | 	call	#_converttoint
19e40     FD 1E 02 F6 | 	mov	local01, result1
19e44     18 4E 05 F1 | 	add	fp, #24
19e48     A7 12 02 F6 | 	mov	arg01, fp
19e4c     18 4E 85 F1 | 	sub	fp, #24
19e50     D4 BC BF FD | 	call	#_converttoint
19e54     FD 20 02 F6 | 	mov	local02, result1
19e58     0C 4E 05 F1 | 	add	fp, #12
19e5c     A7 12 02 F6 | 	mov	arg01, fp
19e60     0C 4E 85 F1 | 	sub	fp, #12
19e64     C0 BC BF FD | 	call	#_converttoint
19e68     FD 22 02 F6 | 	mov	local03, result1
19e6c     A7 12 02 F6 | 	mov	arg01, fp
19e70     B4 BC BF FD | 	call	#_converttoint
19e74     40 1E 62 FD | 	dirl	local01
19e78     0F 21 02 FC | 	wrpin	local02, local01
19e7c     0F 23 12 FC | 	wxpin	local03, local01
19e80     0F FB 21 FC | 	wypin	result1, local01
19e84     41 1E 62 FD | 	dirh	local01
19e88     A7 F0 03 F6 | 	mov	ptra, fp
19e8c     B2 00 A0 FD | 	call	#popregs_
19e90                 | _do_pinstart_ret
19e90     2D 00 64 FD | 	ret
19e94                 | 
19e94                 | ' 
19e94                 | ' 
19e94                 | ' sub do_wrpin
19e94                 | _do_wrpin
19e94     01 4A 05 F6 | 	mov	COUNT_, #1
19e98     A8 00 A0 FD | 	call	#pushregs_
19e9c     18 F0 07 F1 | 	add	ptra, #24
19ea0     B4 1B BF FD | 	call	#_pop
19ea4     FD 14 02 F6 | 	mov	arg02, result1
19ea8     FE 12 02 F6 | 	mov	arg01, result2
19eac     FF 1E 02 F6 | 	mov	local01, result3
19eb0     A7 14 62 FC | 	wrlong	arg02, fp
19eb4     04 4E 05 F1 | 	add	fp, #4
19eb8     A7 12 62 FC | 	wrlong	arg01, fp
19ebc     04 4E 05 F1 | 	add	fp, #4
19ec0     A7 1E 62 FC | 	wrlong	local01, fp
19ec4     08 4E 85 F1 | 	sub	fp, #8
19ec8     8C 1B BF FD | 	call	#_pop
19ecc     FF 1E 02 F6 | 	mov	local01, result3
19ed0     0C 4E 05 F1 | 	add	fp, #12
19ed4     A7 FA 61 FC | 	wrlong	result1, fp
19ed8     04 4E 05 F1 | 	add	fp, #4
19edc     A7 FC 61 FC | 	wrlong	result2, fp
19ee0     04 4E 05 F1 | 	add	fp, #4
19ee4     A7 1E 62 FC | 	wrlong	local01, fp
19ee8     08 4E 85 F1 | 	sub	fp, #8
19eec     A7 12 02 F6 | 	mov	arg01, fp
19ef0     0C 4E 85 F1 | 	sub	fp, #12
19ef4     30 BC BF FD | 	call	#_converttoint
19ef8     FD 1E 02 F6 | 	mov	local01, result1
19efc     A7 12 02 F6 | 	mov	arg01, fp
19f00     24 BC BF FD | 	call	#_converttoint
19f04     0F FB 01 FC | 	wrpin	result1, local01
19f08     A7 F0 03 F6 | 	mov	ptra, fp
19f0c     B2 00 A0 FD | 	call	#popregs_
19f10                 | _do_wrpin_ret
19f10     2D 00 64 FD | 	ret
19f14                 | 
19f14                 | ' 
19f14                 | ' sub do_wxpin
19f14                 | _do_wxpin
19f14     01 4A 05 F6 | 	mov	COUNT_, #1
19f18     A8 00 A0 FD | 	call	#pushregs_
19f1c     18 F0 07 F1 | 	add	ptra, #24
19f20     34 1B BF FD | 	call	#_pop
19f24     FD 14 02 F6 | 	mov	arg02, result1
19f28     FE 12 02 F6 | 	mov	arg01, result2
19f2c     FF 1E 02 F6 | 	mov	local01, result3
19f30     A7 14 62 FC | 	wrlong	arg02, fp
19f34     04 4E 05 F1 | 	add	fp, #4
19f38     A7 12 62 FC | 	wrlong	arg01, fp
19f3c     04 4E 05 F1 | 	add	fp, #4
19f40     A7 1E 62 FC | 	wrlong	local01, fp
19f44     08 4E 85 F1 | 	sub	fp, #8
19f48     0C 1B BF FD | 	call	#_pop
19f4c     FF 1E 02 F6 | 	mov	local01, result3
19f50     0C 4E 05 F1 | 	add	fp, #12
19f54     A7 FA 61 FC | 	wrlong	result1, fp
19f58     04 4E 05 F1 | 	add	fp, #4
19f5c     A7 FC 61 FC | 	wrlong	result2, fp
19f60     04 4E 05 F1 | 	add	fp, #4
19f64     A7 1E 62 FC | 	wrlong	local01, fp
19f68     08 4E 85 F1 | 	sub	fp, #8
19f6c     A7 12 02 F6 | 	mov	arg01, fp
19f70     0C 4E 85 F1 | 	sub	fp, #12
19f74     B0 BB BF FD | 	call	#_converttoint
19f78     FD 1E 02 F6 | 	mov	local01, result1
19f7c     A7 12 02 F6 | 	mov	arg01, fp
19f80     A4 BB BF FD | 	call	#_converttoint
19f84     0F FB 11 FC | 	wxpin	result1, local01
19f88     A7 F0 03 F6 | 	mov	ptra, fp
19f8c     B2 00 A0 FD | 	call	#popregs_
19f90                 | _do_wxpin_ret
19f90     2D 00 64 FD | 	ret
19f94                 | 
19f94                 | ' 
19f94                 | ' sub do_wypin
19f94                 | _do_wypin
19f94     01 4A 05 F6 | 	mov	COUNT_, #1
19f98     A8 00 A0 FD | 	call	#pushregs_
19f9c     18 F0 07 F1 | 	add	ptra, #24
19fa0     B4 1A BF FD | 	call	#_pop
19fa4     FD 14 02 F6 | 	mov	arg02, result1
19fa8     FE 12 02 F6 | 	mov	arg01, result2
19fac     FF 1E 02 F6 | 	mov	local01, result3
19fb0     A7 14 62 FC | 	wrlong	arg02, fp
19fb4     04 4E 05 F1 | 	add	fp, #4
19fb8     A7 12 62 FC | 	wrlong	arg01, fp
19fbc     04 4E 05 F1 | 	add	fp, #4
19fc0     A7 1E 62 FC | 	wrlong	local01, fp
19fc4     08 4E 85 F1 | 	sub	fp, #8
19fc8     8C 1A BF FD | 	call	#_pop
19fcc     FF 1E 02 F6 | 	mov	local01, result3
19fd0     0C 4E 05 F1 | 	add	fp, #12
19fd4     A7 FA 61 FC | 	wrlong	result1, fp
19fd8     04 4E 05 F1 | 	add	fp, #4
19fdc     A7 FC 61 FC | 	wrlong	result2, fp
19fe0     04 4E 05 F1 | 	add	fp, #4
19fe4     A7 1E 62 FC | 	wrlong	local01, fp
19fe8     08 4E 85 F1 | 	sub	fp, #8
19fec     A7 12 02 F6 | 	mov	arg01, fp
19ff0     0C 4E 85 F1 | 	sub	fp, #12
19ff4     30 BB BF FD | 	call	#_converttoint
19ff8     FD 1E 02 F6 | 	mov	local01, result1
19ffc     A7 12 02 F6 | 	mov	arg01, fp
1a000     24 BB BF FD | 	call	#_converttoint
1a004     0F FB 21 FC | 	wypin	result1, local01
1a008     A7 F0 03 F6 | 	mov	ptra, fp
1a00c     B2 00 A0 FD | 	call	#popregs_
1a010                 | _do_wypin_ret
1a010     2D 00 64 FD | 	ret
1a014                 | 
1a014                 | ' 
1a014                 | ' sub do_position
1a014                 | _do_position
1a014     01 4A 05 F6 | 	mov	COUNT_, #1
1a018     A8 00 A0 FD | 	call	#pushregs_
1a01c     18 F0 07 F1 | 	add	ptra, #24
1a020     34 1A BF FD | 	call	#_pop
1a024     FD 14 02 F6 | 	mov	arg02, result1
1a028     FE 12 02 F6 | 	mov	arg01, result2
1a02c     FF 1E 02 F6 | 	mov	local01, result3
1a030     A7 14 62 FC | 	wrlong	arg02, fp
1a034     04 4E 05 F1 | 	add	fp, #4
1a038     A7 12 62 FC | 	wrlong	arg01, fp
1a03c     04 4E 05 F1 | 	add	fp, #4
1a040     A7 1E 62 FC | 	wrlong	local01, fp
1a044     08 4E 85 F1 | 	sub	fp, #8
1a048     0C 1A BF FD | 	call	#_pop
1a04c     FF 1E 02 F6 | 	mov	local01, result3
1a050     0C 4E 05 F1 | 	add	fp, #12
1a054     A7 FA 61 FC | 	wrlong	result1, fp
1a058     04 4E 05 F1 | 	add	fp, #4
1a05c     A7 FC 61 FC | 	wrlong	result2, fp
1a060     04 4E 05 F1 | 	add	fp, #4
1a064     A7 1E 62 FC | 	wrlong	local01, fp
1a068     08 4E 85 F1 | 	sub	fp, #8
1a06c     A7 12 02 F6 | 	mov	arg01, fp
1a070     0C 4E 85 F1 | 	sub	fp, #12
1a074     B0 BA BF FD | 	call	#_converttoint
1a078     FD 1E 02 F6 | 	mov	local01, result1
1a07c     A7 12 02 F6 | 	mov	arg01, fp
1a080     A4 BA BF FD | 	call	#_converttoint
1a084     FD 14 02 F6 | 	mov	arg02, result1
1a088     0F 13 02 F6 | 	mov	arg01, local01
1a08c     A0 4F B0 FD | 	call	#_hg010b_spin2_setcursorpos
1a090     A7 F0 03 F6 | 	mov	ptra, fp
1a094     B2 00 A0 FD | 	call	#popregs_
1a098                 | _do_position_ret
1a098     2D 00 64 FD | 	ret
1a09c                 | 
1a09c                 | ' 
1a09c                 | ' sub do_poke
1a09c                 | _do_poke
1a09c     01 4A 05 F6 | 	mov	COUNT_, #1
1a0a0     A8 00 A0 FD | 	call	#pushregs_
1a0a4     20 F0 07 F1 | 	add	ptra, #32
1a0a8     AC 19 BF FD | 	call	#_pop
1a0ac     FD 14 02 F6 | 	mov	arg02, result1
1a0b0     FE 12 02 F6 | 	mov	arg01, result2
1a0b4     FF 1E 02 F6 | 	mov	local01, result3
1a0b8     A7 14 62 FC | 	wrlong	arg02, fp
1a0bc     04 4E 05 F1 | 	add	fp, #4
1a0c0     A7 12 62 FC | 	wrlong	arg01, fp
1a0c4     04 4E 05 F1 | 	add	fp, #4
1a0c8     A7 1E 62 FC | 	wrlong	local01, fp
1a0cc     08 4E 85 F1 | 	sub	fp, #8
1a0d0     84 19 BF FD | 	call	#_pop
1a0d4     FF 1E 02 F6 | 	mov	local01, result3
1a0d8     0C 4E 05 F1 | 	add	fp, #12
1a0dc     A7 FA 61 FC | 	wrlong	result1, fp
1a0e0     04 4E 05 F1 | 	add	fp, #4
1a0e4     A7 FC 61 FC | 	wrlong	result2, fp
1a0e8     04 4E 05 F1 | 	add	fp, #4
1a0ec     A7 1E 62 FC | 	wrlong	local01, fp
1a0f0     08 4E 85 F1 | 	sub	fp, #8
1a0f4     A7 12 02 F6 | 	mov	arg01, fp
1a0f8     0C 4E 85 F1 | 	sub	fp, #12
1a0fc     28 BA BF FD | 	call	#_converttoint
1a100     18 4E 05 F1 | 	add	fp, #24
1a104     A7 FA 61 FC | 	wrlong	result1, fp
1a108     18 4E 85 F1 | 	sub	fp, #24
1a10c     A7 12 02 F6 | 	mov	arg01, fp
1a110     14 BA BF FD | 	call	#_converttoint
1a114     1C 4E 05 F1 | 	add	fp, #28
1a118     A7 FA 61 FC | 	wrlong	result1, fp
1a11c                 | ' t1=pop() 'value
1a11c                 | ' t2=pop() 
1a11c                 | ' a=converttoint(t2) : v=converttoint(t1)
1a11c                 | ' if a<$80000 then poke a,v else pspoke a,v
1a11c     04 4E 85 F1 | 	sub	fp, #4
1a120     A7 1E 02 FB | 	rdlong	local01, fp
1a124     18 4E 85 F1 | 	sub	fp, #24
1a128     00 04 00 FF 
1a12c     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1a130     1C 00 90 3D |  if_ae	jmp	#LR__2120
1a134     18 4E 05 F1 | 	add	fp, #24
1a138     A7 12 02 FB | 	rdlong	arg01, fp
1a13c     04 4E 05 F1 | 	add	fp, #4
1a140     A7 14 02 FB | 	rdlong	arg02, fp
1a144     1C 4E 85 F1 | 	sub	fp, #28
1a148     09 15 42 FC | 	wrbyte	arg02, arg01
1a14c     18 00 90 FD | 	jmp	#LR__2121
1a150                 | LR__2120
1a150     18 4E 05 F1 | 	add	fp, #24
1a154     A7 12 02 FB | 	rdlong	arg01, fp
1a158     04 4E 05 F1 | 	add	fp, #4
1a15c     A7 14 02 FB | 	rdlong	arg02, fp
1a160     1C 4E 85 F1 | 	sub	fp, #28
1a164     10 35 B0 FD | 	call	#_pspoke
1a168                 | LR__2121
1a168     A7 F0 03 F6 | 	mov	ptra, fp
1a16c     B2 00 A0 FD | 	call	#popregs_
1a170                 | _do_poke_ret
1a170     2D 00 64 FD | 	ret
1a174                 | 
1a174                 | ' 
1a174                 | ' sub do_dpoke
1a174                 | _do_dpoke
1a174     01 4A 05 F6 | 	mov	COUNT_, #1
1a178     A8 00 A0 FD | 	call	#pushregs_
1a17c     20 F0 07 F1 | 	add	ptra, #32
1a180     D4 18 BF FD | 	call	#_pop
1a184     FD 14 02 F6 | 	mov	arg02, result1
1a188     FE 12 02 F6 | 	mov	arg01, result2
1a18c     FF 1E 02 F6 | 	mov	local01, result3
1a190     A7 14 62 FC | 	wrlong	arg02, fp
1a194     04 4E 05 F1 | 	add	fp, #4
1a198     A7 12 62 FC | 	wrlong	arg01, fp
1a19c     04 4E 05 F1 | 	add	fp, #4
1a1a0     A7 1E 62 FC | 	wrlong	local01, fp
1a1a4     08 4E 85 F1 | 	sub	fp, #8
1a1a8     AC 18 BF FD | 	call	#_pop
1a1ac     FF 1E 02 F6 | 	mov	local01, result3
1a1b0     0C 4E 05 F1 | 	add	fp, #12
1a1b4     A7 FA 61 FC | 	wrlong	result1, fp
1a1b8     04 4E 05 F1 | 	add	fp, #4
1a1bc     A7 FC 61 FC | 	wrlong	result2, fp
1a1c0     04 4E 05 F1 | 	add	fp, #4
1a1c4     A7 1E 62 FC | 	wrlong	local01, fp
1a1c8     08 4E 85 F1 | 	sub	fp, #8
1a1cc     A7 12 02 F6 | 	mov	arg01, fp
1a1d0     0C 4E 85 F1 | 	sub	fp, #12
1a1d4     50 B9 BF FD | 	call	#_converttoint
1a1d8     18 4E 05 F1 | 	add	fp, #24
1a1dc     A7 FA 61 FC | 	wrlong	result1, fp
1a1e0     18 4E 85 F1 | 	sub	fp, #24
1a1e4     A7 12 02 F6 | 	mov	arg01, fp
1a1e8     3C B9 BF FD | 	call	#_converttoint
1a1ec     1C 4E 05 F1 | 	add	fp, #28
1a1f0     A7 FA 61 FC | 	wrlong	result1, fp
1a1f4                 | ' t1=pop() 'value
1a1f4                 | ' t2=pop() 
1a1f4                 | ' a=converttoint(t2) : v=converttoint(t1)
1a1f4                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
1a1f4     04 4E 85 F1 | 	sub	fp, #4
1a1f8     A7 1E 02 FB | 	rdlong	local01, fp
1a1fc     18 4E 85 F1 | 	sub	fp, #24
1a200     00 04 00 FF 
1a204     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1a208     1C 00 90 3D |  if_ae	jmp	#LR__2130
1a20c     18 4E 05 F1 | 	add	fp, #24
1a210     A7 12 02 FB | 	rdlong	arg01, fp
1a214     04 4E 05 F1 | 	add	fp, #4
1a218     A7 14 02 FB | 	rdlong	arg02, fp
1a21c     1C 4E 85 F1 | 	sub	fp, #28
1a220     09 15 52 FC | 	wrword	arg02, arg01
1a224     18 00 90 FD | 	jmp	#LR__2131
1a228                 | LR__2130
1a228     18 4E 05 F1 | 	add	fp, #24
1a22c     A7 12 02 FB | 	rdlong	arg01, fp
1a230     04 4E 05 F1 | 	add	fp, #4
1a234     A7 14 02 FB | 	rdlong	arg02, fp
1a238     1C 4E 85 F1 | 	sub	fp, #28
1a23c     F0 33 B0 FD | 	call	#_psdpoke
1a240                 | LR__2131
1a240     A7 F0 03 F6 | 	mov	ptra, fp
1a244     B2 00 A0 FD | 	call	#popregs_
1a248                 | _do_dpoke_ret
1a248     2D 00 64 FD | 	ret
1a24c                 | 
1a24c                 | ' 
1a24c                 | ' sub do_lpoke
1a24c                 | _do_lpoke
1a24c     01 4A 05 F6 | 	mov	COUNT_, #1
1a250     A8 00 A0 FD | 	call	#pushregs_
1a254     20 F0 07 F1 | 	add	ptra, #32
1a258     FC 17 BF FD | 	call	#_pop
1a25c     FD 14 02 F6 | 	mov	arg02, result1
1a260     FE 12 02 F6 | 	mov	arg01, result2
1a264     FF 1E 02 F6 | 	mov	local01, result3
1a268     A7 14 62 FC | 	wrlong	arg02, fp
1a26c     04 4E 05 F1 | 	add	fp, #4
1a270     A7 12 62 FC | 	wrlong	arg01, fp
1a274     04 4E 05 F1 | 	add	fp, #4
1a278     A7 1E 62 FC | 	wrlong	local01, fp
1a27c     08 4E 85 F1 | 	sub	fp, #8
1a280     D4 17 BF FD | 	call	#_pop
1a284     FF 1E 02 F6 | 	mov	local01, result3
1a288     0C 4E 05 F1 | 	add	fp, #12
1a28c     A7 FA 61 FC | 	wrlong	result1, fp
1a290     04 4E 05 F1 | 	add	fp, #4
1a294     A7 FC 61 FC | 	wrlong	result2, fp
1a298     04 4E 05 F1 | 	add	fp, #4
1a29c     A7 1E 62 FC | 	wrlong	local01, fp
1a2a0     08 4E 85 F1 | 	sub	fp, #8
1a2a4     A7 12 02 F6 | 	mov	arg01, fp
1a2a8     0C 4E 85 F1 | 	sub	fp, #12
1a2ac     78 B8 BF FD | 	call	#_converttoint
1a2b0     18 4E 05 F1 | 	add	fp, #24
1a2b4     A7 FA 61 FC | 	wrlong	result1, fp
1a2b8     18 4E 85 F1 | 	sub	fp, #24
1a2bc     A7 12 02 F6 | 	mov	arg01, fp
1a2c0     64 B8 BF FD | 	call	#_converttoint
1a2c4     1C 4E 05 F1 | 	add	fp, #28
1a2c8     A7 FA 61 FC | 	wrlong	result1, fp
1a2cc                 | ' t1=pop() 'value
1a2cc                 | ' t2=pop() 
1a2cc                 | ' a=converttoint(t2) : v=converttoint(t1)
1a2cc                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
1a2cc     04 4E 85 F1 | 	sub	fp, #4
1a2d0     A7 1E 02 FB | 	rdlong	local01, fp
1a2d4     18 4E 85 F1 | 	sub	fp, #24
1a2d8     00 04 00 FF 
1a2dc     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1a2e0     1C 00 90 3D |  if_ae	jmp	#LR__2140
1a2e4     18 4E 05 F1 | 	add	fp, #24
1a2e8     A7 12 02 FB | 	rdlong	arg01, fp
1a2ec     04 4E 05 F1 | 	add	fp, #4
1a2f0     A7 14 02 FB | 	rdlong	arg02, fp
1a2f4     1C 4E 85 F1 | 	sub	fp, #28
1a2f8     09 15 62 FC | 	wrlong	arg02, arg01
1a2fc     18 00 90 FD | 	jmp	#LR__2141
1a300                 | LR__2140
1a300     18 4E 05 F1 | 	add	fp, #24
1a304     A7 12 02 FB | 	rdlong	arg01, fp
1a308     04 4E 05 F1 | 	add	fp, #4
1a30c     A7 14 02 FB | 	rdlong	arg02, fp
1a310     1C 4E 85 F1 | 	sub	fp, #28
1a314     D0 32 B0 FD | 	call	#_pslpoke
1a318                 | LR__2141
1a318     A7 F0 03 F6 | 	mov	ptra, fp
1a31c     B2 00 A0 FD | 	call	#popregs_
1a320                 | _do_lpoke_ret
1a320     2D 00 64 FD | 	ret
1a324                 | 
1a324                 | ' 
1a324                 | ' sub do_peek
1a324                 | _do_peek
1a324     00 4A 05 F6 | 	mov	COUNT_, #0
1a328     A8 00 A0 FD | 	call	#pushregs_
1a32c     14 F0 07 F1 | 	add	ptra, #20
1a330     24 17 BF FD | 	call	#_pop
1a334     A7 FA 61 FC | 	wrlong	result1, fp
1a338     04 4E 05 F1 | 	add	fp, #4
1a33c     A7 FC 61 FC | 	wrlong	result2, fp
1a340     04 4E 05 F1 | 	add	fp, #4
1a344     A7 FE 61 FC | 	wrlong	result3, fp
1a348     08 4E 85 F1 | 	sub	fp, #8
1a34c     A7 12 02 F6 | 	mov	arg01, fp
1a350     D4 B7 BF FD | 	call	#_converttoint
1a354     0C 4E 05 F1 | 	add	fp, #12
1a358     A7 FA 61 FC | 	wrlong	result1, fp
1a35c                 | ' t1=pop()
1a35c                 | ' a=converttoint(t1)
1a35c                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
1a35c     0C 4E 85 F1 | 	sub	fp, #12
1a360     00 04 00 FF 
1a364     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1a368     1C 00 90 3D |  if_ae	jmp	#LR__2150
1a36c     0C 4E 05 F1 | 	add	fp, #12
1a370     A7 12 02 FB | 	rdlong	arg01, fp
1a374     09 FB C1 FA | 	rdbyte	result1, arg01
1a378     04 4E 05 F1 | 	add	fp, #4
1a37c     A7 FA 61 FC | 	wrlong	result1, fp
1a380     10 4E 85 F1 | 	sub	fp, #16
1a384     20 00 90 FD | 	jmp	#LR__2151
1a388                 | LR__2150
1a388     0C 4E 05 F1 | 	add	fp, #12
1a38c     A7 12 02 FB | 	rdlong	arg01, fp
1a390     0C 4E 85 F1 | 	sub	fp, #12
1a394     28 33 B0 FD | 	call	#_pspeek
1a398     FD FA E1 F8 | 	getbyte	result1, result1, #0
1a39c     10 4E 05 F1 | 	add	fp, #16
1a3a0     A7 FA 61 FC | 	wrlong	result1, fp
1a3a4     10 4E 85 F1 | 	sub	fp, #16
1a3a8                 | LR__2151
1a3a8     08 4E 05 F1 | 	add	fp, #8
1a3ac     A7 3A 68 FC | 	wrlong	#29, fp
1a3b0     08 4E 05 F1 | 	add	fp, #8
1a3b4     A7 12 02 FB | 	rdlong	arg01, fp
1a3b8     10 4E 85 F1 | 	sub	fp, #16
1a3bc     A7 12 62 FC | 	wrlong	arg01, fp
1a3c0     A7 12 02 F6 | 	mov	arg01, fp
1a3c4     28 17 BF FD | 	call	#_push
1a3c8     A7 F0 03 F6 | 	mov	ptra, fp
1a3cc     B2 00 A0 FD | 	call	#popregs_
1a3d0                 | _do_peek_ret
1a3d0     2D 00 64 FD | 	ret
1a3d4                 | 
1a3d4                 | ' 
1a3d4                 | ' sub do_dpeek
1a3d4                 | _do_dpeek
1a3d4     00 4A 05 F6 | 	mov	COUNT_, #0
1a3d8     A8 00 A0 FD | 	call	#pushregs_
1a3dc     14 F0 07 F1 | 	add	ptra, #20
1a3e0     74 16 BF FD | 	call	#_pop
1a3e4     A7 FA 61 FC | 	wrlong	result1, fp
1a3e8     04 4E 05 F1 | 	add	fp, #4
1a3ec     A7 FC 61 FC | 	wrlong	result2, fp
1a3f0     04 4E 05 F1 | 	add	fp, #4
1a3f4     A7 FE 61 FC | 	wrlong	result3, fp
1a3f8     08 4E 85 F1 | 	sub	fp, #8
1a3fc     A7 12 02 F6 | 	mov	arg01, fp
1a400     24 B7 BF FD | 	call	#_converttoint
1a404     0C 4E 05 F1 | 	add	fp, #12
1a408     A7 FA 61 FC | 	wrlong	result1, fp
1a40c                 | ' t1=pop()
1a40c                 | ' a=converttoint(t1)
1a40c                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
1a40c     0C 4E 85 F1 | 	sub	fp, #12
1a410     00 04 00 FF 
1a414     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1a418     1C 00 90 3D |  if_ae	jmp	#LR__2160
1a41c     0C 4E 05 F1 | 	add	fp, #12
1a420     A7 12 02 FB | 	rdlong	arg01, fp
1a424     09 FB E1 FA | 	rdword	result1, arg01
1a428     04 4E 05 F1 | 	add	fp, #4
1a42c     A7 FA 61 FC | 	wrlong	result1, fp
1a430     10 4E 85 F1 | 	sub	fp, #16
1a434     1C 00 90 FD | 	jmp	#LR__2161
1a438                 | LR__2160
1a438     0C 4E 05 F1 | 	add	fp, #12
1a43c     A7 12 02 FB | 	rdlong	arg01, fp
1a440     0C 4E 85 F1 | 	sub	fp, #12
1a444     28 33 B0 FD | 	call	#_psdpeek
1a448     10 4E 05 F1 | 	add	fp, #16
1a44c     A7 FA 61 FC | 	wrlong	result1, fp
1a450     10 4E 85 F1 | 	sub	fp, #16
1a454                 | LR__2161
1a454     08 4E 05 F1 | 	add	fp, #8
1a458     A7 3A 68 FC | 	wrlong	#29, fp
1a45c     08 4E 05 F1 | 	add	fp, #8
1a460     A7 12 02 FB | 	rdlong	arg01, fp
1a464     10 4E 85 F1 | 	sub	fp, #16
1a468     A7 12 62 FC | 	wrlong	arg01, fp
1a46c     A7 12 02 F6 | 	mov	arg01, fp
1a470     7C 16 BF FD | 	call	#_push
1a474     A7 F0 03 F6 | 	mov	ptra, fp
1a478     B2 00 A0 FD | 	call	#popregs_
1a47c                 | _do_dpeek_ret
1a47c     2D 00 64 FD | 	ret
1a480                 | 
1a480                 | ' 
1a480                 | ' 
1a480                 | ' sub do_lpeek
1a480                 | _do_lpeek
1a480     00 4A 05 F6 | 	mov	COUNT_, #0
1a484     A8 00 A0 FD | 	call	#pushregs_
1a488     14 F0 07 F1 | 	add	ptra, #20
1a48c     C8 15 BF FD | 	call	#_pop
1a490     A7 FA 61 FC | 	wrlong	result1, fp
1a494     04 4E 05 F1 | 	add	fp, #4
1a498     A7 FC 61 FC | 	wrlong	result2, fp
1a49c     04 4E 05 F1 | 	add	fp, #4
1a4a0     A7 FE 61 FC | 	wrlong	result3, fp
1a4a4     08 4E 85 F1 | 	sub	fp, #8
1a4a8     A7 12 02 F6 | 	mov	arg01, fp
1a4ac     78 B6 BF FD | 	call	#_converttoint
1a4b0     0C 4E 05 F1 | 	add	fp, #12
1a4b4     A7 FA 61 FC | 	wrlong	result1, fp
1a4b8                 | ' t1=pop()
1a4b8                 | ' a=converttoint(t1)
1a4b8                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
1a4b8     0C 4E 85 F1 | 	sub	fp, #12
1a4bc     00 04 00 FF 
1a4c0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1a4c4     1C 00 90 3D |  if_ae	jmp	#LR__2170
1a4c8     0C 4E 05 F1 | 	add	fp, #12
1a4cc     A7 12 02 FB | 	rdlong	arg01, fp
1a4d0     09 FB 01 FB | 	rdlong	result1, arg01
1a4d4     04 4E 05 F1 | 	add	fp, #4
1a4d8     A7 FA 61 FC | 	wrlong	result1, fp
1a4dc     10 4E 85 F1 | 	sub	fp, #16
1a4e0     1C 00 90 FD | 	jmp	#LR__2171
1a4e4                 | LR__2170
1a4e4     0C 4E 05 F1 | 	add	fp, #12
1a4e8     A7 12 02 FB | 	rdlong	arg01, fp
1a4ec     0C 4E 85 F1 | 	sub	fp, #12
1a4f0     24 32 B0 FD | 	call	#_pslpeek
1a4f4     10 4E 05 F1 | 	add	fp, #16
1a4f8     A7 FA 61 FC | 	wrlong	result1, fp
1a4fc     10 4E 85 F1 | 	sub	fp, #16
1a500                 | LR__2171
1a500     08 4E 05 F1 | 	add	fp, #8
1a504     A7 3A 68 FC | 	wrlong	#29, fp
1a508     08 4E 05 F1 | 	add	fp, #8
1a50c     A7 12 02 FB | 	rdlong	arg01, fp
1a510     10 4E 85 F1 | 	sub	fp, #16
1a514     A7 12 62 FC | 	wrlong	arg01, fp
1a518     A7 12 02 F6 | 	mov	arg01, fp
1a51c     D0 15 BF FD | 	call	#_push
1a520     A7 F0 03 F6 | 	mov	ptra, fp
1a524     B2 00 A0 FD | 	call	#popregs_
1a528                 | _do_lpeek_ret
1a528     2D 00 64 FD | 	ret
1a52c                 | 
1a52c                 | ' 
1a52c                 | ' sub do_fre
1a52c                 | _do_fre
1a52c     01 4A 05 F6 | 	mov	COUNT_, #1
1a530     A8 00 A0 FD | 	call	#pushregs_
1a534     0C F0 07 F1 | 	add	ptra, #12
1a538     51 00 00 FF 
1a53c     A8 E5 05 F1 | 	add	objptr, ##41896
1a540     F2 12 02 FB | 	rdlong	arg01, objptr
1a544     0E 00 00 FF 
1a548     4C E5 85 F1 | 	sub	objptr, ##7500
1a54c     F2 1E 02 FB | 	rdlong	local01, objptr
1a550     0F 13 82 F1 | 	sub	arg01, local01
1a554     0E 00 00 FF 
1a558     B8 E5 05 F1 | 	add	objptr, ##7608
1a55c     F2 12 62 FC | 	wrlong	arg01, objptr
1a560     08 4E 05 F1 | 	add	fp, #8
1a564     A7 3A 68 FC | 	wrlong	#29, fp
1a568     08 4E 85 F1 | 	sub	fp, #8
1a56c     F2 1E 02 FB | 	rdlong	local01, objptr
1a570     52 00 00 FF 
1a574     14 E4 85 F1 | 	sub	objptr, ##42004
1a578     A7 1E 62 FC | 	wrlong	local01, fp
1a57c     A7 12 02 F6 | 	mov	arg01, fp
1a580     6C 15 BF FD | 	call	#_push
1a584     A7 F0 03 F6 | 	mov	ptra, fp
1a588     B2 00 A0 FD | 	call	#popregs_
1a58c                 | _do_fre_ret
1a58c     2D 00 64 FD | 	ret
1a590                 | 
1a590                 | ' 
1a590                 | ' sub do_adr
1a590                 | _do_adr
1a590                 | _do_adr_ret
1a590     2D 00 64 FD | 	ret
1a594                 | 
1a594                 | ' 
1a594                 | ' sub do_getnotevalue
1a594                 | _do_getnotevalue
1a594     01 4A 05 F6 | 	mov	COUNT_, #1
1a598     A8 00 A0 FD | 	call	#pushregs_
1a59c     1C F0 07 F1 | 	add	ptra, #28
1a5a0     B4 14 BF FD | 	call	#_pop
1a5a4     FF 14 02 F6 | 	mov	arg02, result3
1a5a8     10 4E 05 F1 | 	add	fp, #16
1a5ac     A7 FA 61 FC | 	wrlong	result1, fp
1a5b0     04 4E 05 F1 | 	add	fp, #4
1a5b4     A7 FC 61 FC | 	wrlong	result2, fp
1a5b8     04 4E 05 F1 | 	add	fp, #4
1a5bc     A7 14 62 FC | 	wrlong	arg02, fp
1a5c0     08 4E 85 F1 | 	sub	fp, #8
1a5c4     A7 12 02 F6 | 	mov	arg01, fp
1a5c8     10 4E 85 F1 | 	sub	fp, #16
1a5cc     58 B5 BF FD | 	call	#_converttoint
1a5d0     FD 14 52 F6 | 	abs	arg02, result1 wc
1a5d4     0C 14 16 FD | 	qdiv	arg02, #12
1a5d8     0C 4E 05 F1 | 	add	fp, #12
1a5dc     A7 FA 61 FC | 	wrlong	result1, fp
1a5e0     14 00 00 FF 
1a5e4     D8 E4 05 F1 | 	add	objptr, ##10456
1a5e8     08 4E 85 F1 | 	sub	fp, #8
1a5ec     19 14 62 FD | 	getqy	arg02
1a5f0     0A 15 82 F6 | 	negc	arg02, arg02
1a5f4     02 14 66 F0 | 	shl	arg02, #2
1a5f8     F2 14 02 F1 | 	add	arg02, objptr
1a5fc     0A 15 02 FB | 	rdlong	arg02, arg02
1a600     A7 14 62 FC | 	wrlong	arg02, fp
1a604     08 4E 05 F1 | 	add	fp, #8
1a608     A7 14 02 FB | 	rdlong	arg02, fp
1a60c     0A 15 52 F6 | 	abs	arg02, arg02 wc
1a610     0C 14 16 FD | 	qdiv	arg02, #12
1a614     0C 4E 85 F1 | 	sub	fp, #12
1a618     14 00 00 FF 
1a61c     D8 E4 85 F1 | 	sub	objptr, ##10456
1a620     18 14 62 FD | 	getqx	arg02
1a624     0A 13 82 F6 | 	negc	arg01, arg02
1a628     09 13 52 F6 | 	abs	arg01, arg01 wc
1a62c     1F 1E C6 C9 |  if_b	decod	local01, #31
1a630     00 1E 06 36 |  if_ae	mov	local01, #0
1a634     94 8B B0 FD | 	call	#__system___float_fromuns
1a638     0F FB 61 F5 | 	xor	result1, local01
1a63c     08 4E 05 F1 | 	add	fp, #8
1a640     A7 FA 61 FC | 	wrlong	result1, fp
1a644     FD 14 02 F6 | 	mov	arg02, result1
1a648     08 4E 85 F1 | 	sub	fp, #8
1a64c     1E 12 C6 F9 | 	decod	arg01, #30
1a650     60 9E B0 FD | 	call	#__system____builtin_powf
1a654     FD 12 02 F6 | 	mov	arg01, result1
1a658     04 4E 05 F1 | 	add	fp, #4
1a65c     A7 14 02 FB | 	rdlong	arg02, fp
1a660     04 4E 85 F1 | 	sub	fp, #4
1a664     68 8F B0 FD | 	call	#__system___float_mul
1a668     A7 FA 61 FC | 	wrlong	result1, fp
1a66c     10 4E 05 F1 | 	add	fp, #16
1a670     A7 FA 61 FC | 	wrlong	result1, fp
1a674     08 4E 05 F1 | 	add	fp, #8
1a678     A7 3C 68 FC | 	wrlong	#30, fp
1a67c     08 4E 85 F1 | 	sub	fp, #8
1a680     A7 12 02 F6 | 	mov	arg01, fp
1a684     10 4E 85 F1 | 	sub	fp, #16
1a688     64 14 BF FD | 	call	#_push
1a68c     A7 F0 03 F6 | 	mov	ptra, fp
1a690     B2 00 A0 FD | 	call	#popregs_
1a694                 | _do_getnotevalue_ret
1a694     2D 00 64 FD | 	ret
1a698                 | 
1a698                 | ' 
1a698                 | ' 
1a698                 | ' sub do_waitms
1a698                 | _do_waitms
1a698     01 4A 05 F6 | 	mov	COUNT_, #1
1a69c     A8 00 A0 FD | 	call	#pushregs_
1a6a0     18 F0 07 F1 | 	add	ptra, #24
1a6a4     B0 13 BF FD | 	call	#_pop
1a6a8     A7 FA 61 FC | 	wrlong	result1, fp
1a6ac     04 4E 05 F1 | 	add	fp, #4
1a6b0     A7 FC 61 FC | 	wrlong	result2, fp
1a6b4     04 4E 05 F1 | 	add	fp, #4
1a6b8     A7 FE 61 FC | 	wrlong	result3, fp
1a6bc                 | ' 
1a6bc                 | ' t1=pop() 'value
1a6bc                 | ' 
1a6bc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
1a6bc     08 4E 85 F1 | 	sub	fp, #8
1a6c0     1C FE 0D F2 | 	cmp	result3, #28 wz
1a6c4     08 4E 05 51 |  if_ne	add	fp, #8
1a6c8     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1a6cc     08 4E 85 51 |  if_ne	sub	fp, #8
1a6d0     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
1a6d4     A7 12 02 AB |  if_e	rdlong	arg01, fp
1a6d8     0C 4E 05 A1 |  if_e	add	fp, #12
1a6dc     A7 12 62 AC |  if_e	wrlong	arg01, fp
1a6e0     0C 4E 85 A1 |  if_e	sub	fp, #12
1a6e4     14 00 90 AD |  if_e	jmp	#LR__2180
1a6e8     A7 12 02 F6 | 	mov	arg01, fp
1a6ec     38 B4 BF FD | 	call	#_converttoint
1a6f0     0C 4E 05 F1 | 	add	fp, #12
1a6f4     A7 FA 61 FC | 	wrlong	result1, fp
1a6f8     0C 4E 85 F1 | 	sub	fp, #12
1a6fc                 | LR__2180
1a6fc                 | ' if t<0 then return
1a6fc     0C 4E 05 F1 | 	add	fp, #12
1a700     A7 12 02 FB | 	rdlong	arg01, fp
1a704     0C 4E 85 F1 | 	sub	fp, #12
1a708     00 12 56 F2 | 	cmps	arg01, #0 wc
1a70c     B8 00 90 CD |  if_b	jmp	#LR__2185
1a710                 | ' if t < 5000 then 
1a710     0C 4E 05 F1 | 	add	fp, #12
1a714     A7 12 02 FB | 	rdlong	arg01, fp
1a718     0C 4E 85 F1 | 	sub	fp, #12
1a71c     09 00 00 FF 
1a720     88 13 56 F2 | 	cmps	arg01, ##5000 wc
1a724     14 00 90 3D |  if_ae	jmp	#LR__2181
1a728     0C 4E 05 F1 | 	add	fp, #12
1a72c     A7 12 02 FB | 	rdlong	arg01, fp
1a730     0C 4E 85 F1 | 	sub	fp, #12
1a734     D8 65 B0 FD | 	call	#__system___waitms
1a738     8C 00 90 FD | 	jmp	#LR__2184
1a73c                 | LR__2181
1a73c     10 4E 05 F1 | 	add	fp, #16
1a740     A7 02 68 FC | 	wrlong	#1, fp
1a744     04 4E 85 F1 | 	sub	fp, #4
1a748     A7 12 02 FB | 	rdlong	arg01, fp
1a74c     09 13 52 F6 | 	abs	arg01, arg01 wc
1a750     09 00 00 FF 
1a754     88 13 16 FD | 	qdiv	arg01, ##5000
1a758                 | '   for i=1 to t/5000
1a758     0C 4E 85 F1 | 	sub	fp, #12
1a75c     18 1E 62 FD | 	getqx	local01
1a760     0F 1F 82 F6 | 	negc	local01, local01
1a764     01 1E 06 F1 | 	add	local01, #1
1a768                 | LR__2182
1a768     10 4E 05 F1 | 	add	fp, #16
1a76c     A7 12 02 FB | 	rdlong	arg01, fp
1a770     10 4E 85 F1 | 	sub	fp, #16
1a774     0F 13 52 F2 | 	cmps	arg01, local01 wc
1a778     28 00 90 3D |  if_ae	jmp	#LR__2183
1a77c     0C 4E 05 F1 | 	add	fp, #12
1a780     A7 12 02 FB | 	rdlong	arg01, fp
1a784     0C 4E 85 F1 | 	sub	fp, #12
1a788     84 65 B0 FD | 	call	#__system___waitms
1a78c     10 4E 05 F1 | 	add	fp, #16
1a790     A7 12 02 FB | 	rdlong	arg01, fp
1a794     01 12 06 F1 | 	add	arg01, #1
1a798     A7 12 62 FC | 	wrlong	arg01, fp
1a79c     10 4E 85 F1 | 	sub	fp, #16
1a7a0     C4 FF 9F FD | 	jmp	#LR__2182
1a7a4                 | LR__2183
1a7a4     0C 4E 05 F1 | 	add	fp, #12
1a7a8     A7 1E 02 FB | 	rdlong	local01, fp
1a7ac     0F 1F 52 F6 | 	abs	local01, local01 wc
1a7b0     09 00 00 FF 
1a7b4     88 1F 16 FD | 	qdiv	local01, ##5000
1a7b8     0C 4E 85 F1 | 	sub	fp, #12
1a7bc     19 1E 62 FD | 	getqy	local01
1a7c0     0F 13 82 F6 | 	negc	arg01, local01
1a7c4     48 65 B0 FD | 	call	#__system___waitms
1a7c8                 | LR__2184
1a7c8                 | LR__2185
1a7c8     A7 F0 03 F6 | 	mov	ptra, fp
1a7cc     B2 00 A0 FD | 	call	#popregs_
1a7d0                 | _do_waitms_ret
1a7d0     2D 00 64 FD | 	ret
1a7d4                 | 
1a7d4                 | ' 
1a7d4                 | ' sub do_waitvbl
1a7d4                 | _do_waitvbl
1a7d4     01 12 06 F6 | 	mov	arg01, #1
1a7d8     F4 48 B0 FD | 	call	#_hg010b_spin2_waitvbl
1a7dc                 | _do_waitvbl_ret
1a7dc     2D 00 64 FD | 	ret
1a7e0                 | 
1a7e0                 | ' 
1a7e0                 | ' sub do_waitclock
1a7e0                 | _do_waitclock
1a7e0     51 00 00 FF 
1a7e4     A4 E5 05 F1 | 	add	objptr, ##41892
1a7e8     F2 00 02 FB | 	rdlong	_var01, objptr
1a7ec                 | ' c=hkcnt
1a7ec                 | ' do: loop until hkcnt<>c
1a7ec                 | LR__2190
1a7ec     F2 02 02 FB | 	rdlong	_var02, objptr
1a7f0     00 03 0A F2 | 	cmp	_var02, _var01 wz
1a7f4     F4 FF 9F AD |  if_e	jmp	#LR__2190
1a7f8     51 00 00 FF 
1a7fc     A4 E5 85 F1 | 	sub	objptr, ##41892
1a800                 | _do_waitclock_ret
1a800     2D 00 64 FD | 	ret
1a804                 | 
1a804                 | ' 
1a804                 | ' 
1a804                 | ' 
1a804                 | ' sub do_dir
1a804                 | _do_dir
1a804     13 4A 05 F6 | 	mov	COUNT_, #19
1a808     A8 00 A0 FD | 	call	#pushregs_
1a80c     01 00 00 FF 
1a810     38 F0 07 F1 | 	add	ptra, ##568
1a814     85 01 00 FF 
1a818     F9 12 06 F6 | 	mov	arg01, ##@LR__5509
1a81c     88 68 B0 FD | 	call	#__system___chdir
1a820                 | ' 
1a820                 | ' chdir("/sd/bas")       ' set working directory
1a820                 | ' print "Working directory: "; currentdir$ 
1a820     00 12 06 F6 | 	mov	arg01, #0
1a824     34 BC B0 FD | 	call	#__system___getiolock_0540
1a828     FD 12 02 F6 | 	mov	arg01, result1
1a82c     EC 61 B0 FD | 	call	#__system___lockmem
1a830     85 01 00 FF 
1a834     01 15 06 F6 | 	mov	arg02, ##@LR__5510
1a838     00 12 06 F6 | 	mov	arg01, #0
1a83c     00 16 06 F6 | 	mov	arg03, #0
1a840     CC 6E B0 FD | 	call	#__system___basic_print_string
1a844     4A 00 00 FF 
1a848     90 E4 05 F1 | 	add	objptr, ##38032
1a84c     F2 14 02 FB | 	rdlong	arg02, objptr
1a850     4A 00 00 FF 
1a854     90 E4 85 F1 | 	sub	objptr, ##38032
1a858     00 12 06 F6 | 	mov	arg01, #0
1a85c     00 16 06 F6 | 	mov	arg03, #0
1a860     AC 6E B0 FD | 	call	#__system___basic_print_string
1a864     00 12 06 F6 | 	mov	arg01, #0
1a868     0A 14 06 F6 | 	mov	arg02, #10
1a86c     00 16 06 F6 | 	mov	arg03, #0
1a870     44 6E B0 FD | 	call	#__system___basic_print_char
1a874     01 1E 06 F6 | 	mov	local01, #1
1a878     00 12 06 F6 | 	mov	arg01, #0
1a87c     DC BB B0 FD | 	call	#__system___getiolock_0540
1a880     FD 00 68 FC | 	wrlong	#0, result1
1a884     00 20 06 F6 | 	mov	local02, #0
1a888     00 22 06 F6 | 	mov	local03, #0
1a88c                 | ' px=0
1a88c                 | ' for i=0 to 127: filelist(i)="" : next i
1a88c     00 24 06 F6 | 	mov	local04, #0
1a890     1C 4E 05 F1 | 	add	fp, #28
1a894     97 12 48 FB | 	callpa	#(@LR__2201-@LR__2200)>>2,fcache_load_ptr_
1a898                 | LR__2200
1a898     12 27 02 F6 | 	mov	local05, local04
1a89c     02 26 66 F0 | 	shl	local05, #2
1a8a0     A7 26 02 F1 | 	add	local05, fp
1a8a4     85 01 00 FF 
1a8a8     15 29 06 F6 | 	mov	local06, ##@LR__5511
1a8ac     13 29 62 FC | 	wrlong	local06, local05
1a8b0     01 24 06 F1 | 	add	local04, #1
1a8b4     80 24 56 F2 | 	cmps	local04, #128 wc
1a8b8     DC FF 9F CD |  if_b	jmp	#LR__2200
1a8bc                 | LR__2201
1a8bc     1C 4E 85 F1 | 	sub	fp, #28
1a8c0     85 01 00 FF 
1a8c4     16 13 06 F6 | 	mov	arg01, ##@LR__5512
1a8c8     10 14 06 F6 | 	mov	arg02, #16
1a8cc     C4 BC B0 FD | 	call	#__system___basic_dir
1a8d0     FD 2A 02 F6 | 	mov	local07, result1
1a8d4     00 2C 06 F6 | 	mov	local08, #0
1a8d8                 | ' filename=dir$("*", fbDirectory)
1a8d8                 | ' n=0
1a8d8                 | ' while filename <> "" andalso filename <> nil andalso n<128
1a8d8                 | LR__2202
1a8d8     85 01 00 FF 
1a8dc     18 2F 06 F6 | 	mov	local09, ##@LR__5513
1a8e0     15 13 02 F6 | 	mov	arg01, local07
1a8e4     17 15 02 F6 | 	mov	arg02, local09
1a8e8     58 61 B0 FD | 	call	#__system___string_cmp
1a8ec     00 FA 0D F2 | 	cmp	result1, #0 wz
1a8f0     68 00 90 AD |  if_e	jmp	#LR__2203
1a8f4     00 2E 06 F6 | 	mov	local09, #0
1a8f8     15 13 02 F6 | 	mov	arg01, local07
1a8fc     00 14 06 F6 | 	mov	arg02, #0
1a900     40 61 B0 FD | 	call	#__system___string_cmp
1a904     00 FA 0D F2 | 	cmp	result1, #0 wz
1a908     50 00 90 AD |  if_e	jmp	#LR__2203
1a90c     80 2C 56 F2 | 	cmps	local08, #128 wc
1a910     48 00 90 3D |  if_ae	jmp	#LR__2203
1a914     85 01 00 FF 
1a918     19 13 06 F6 | 	mov	arg01, ##@LR__5514
1a91c     15 15 02 F6 | 	mov	arg02, local07
1a920     54 61 B0 FD | 	call	#__system___string_concat
1a924     FD 2A 02 F6 | 	mov	local07, result1
1a928     16 27 02 F6 | 	mov	local05, local08
1a92c     02 26 66 F0 | 	shl	local05, #2
1a930     1C 4E 05 F1 | 	add	fp, #28
1a934     A7 26 02 F1 | 	add	local05, fp
1a938     13 2B 62 FC | 	wrlong	local07, local05
1a93c     01 2C 06 F1 | 	add	local08, #1
1a940     00 26 06 F6 | 	mov	local05, #0
1a944     00 12 06 F6 | 	mov	arg01, #0
1a948     00 14 06 F6 | 	mov	arg02, #0
1a94c     1C 4E 85 F1 | 	sub	fp, #28
1a950     40 BC B0 FD | 	call	#__system___basic_dir
1a954     FD 2A 02 F6 | 	mov	local07, result1
1a958     7C FF 9F FD | 	jmp	#LR__2202
1a95c                 | LR__2203
1a95c                 | ' ' now sort this
1a95c                 | ' 
1a95c                 | ' for i =0 to n-1
1a95c     00 24 06 F6 | 	mov	local04, #0
1a960     16 31 02 F6 | 	mov	local10, local08
1a964                 | LR__2204
1a964     18 25 52 F2 | 	cmps	local04, local10 wc
1a968     DC 00 90 3D |  if_ae	jmp	#LR__2208
1a96c     00 32 06 F6 | 	mov	local11, #0
1a970                 | '   swapped=false
1a970                 | '   for j=0 to n-i-2
1a970     00 34 06 F6 | 	mov	local12, #0
1a974     16 37 02 F6 | 	mov	local13, local08
1a978     12 37 82 F1 | 	sub	local13, local04
1a97c     01 36 86 F1 | 	sub	local13, #1
1a980                 | LR__2205
1a980     1B 35 52 F2 | 	cmps	local12, local13 wc
1a984     B0 00 90 3D |  if_ae	jmp	#LR__2207
1a988                 | '     if filelist(j) > filelist(j+1) then
1a988     1A 2F 02 F6 | 	mov	local09, local12
1a98c     02 2E 66 F0 | 	shl	local09, #2
1a990     1C 4E 05 F1 | 	add	fp, #28
1a994     A7 2E 02 F1 | 	add	local09, fp
1a998     17 13 02 FB | 	rdlong	arg01, local09
1a99c     1A 2F 02 F6 | 	mov	local09, local12
1a9a0     01 2E 06 F1 | 	add	local09, #1
1a9a4     17 29 02 F6 | 	mov	local06, local09
1a9a8     02 28 66 F0 | 	shl	local06, #2
1a9ac     A7 1E 02 F6 | 	mov	local01, fp
1a9b0     A7 28 02 F1 | 	add	local06, fp
1a9b4     14 27 02 FB | 	rdlong	local05, local06
1a9b8     13 15 02 F6 | 	mov	arg02, local05
1a9bc     1C 4E 85 F1 | 	sub	fp, #28
1a9c0     80 60 B0 FD | 	call	#__system___string_cmp
1a9c4     01 FA 55 F2 | 	cmps	result1, #1 wc
1a9c8     64 00 90 CD |  if_b	jmp	#LR__2206
1a9cc     1A 2F 02 F6 | 	mov	local09, local12
1a9d0     01 2E 06 F1 | 	add	local09, #1
1a9d4     02 2E 66 F0 | 	shl	local09, #2
1a9d8     1C 4E 05 F1 | 	add	fp, #28
1a9dc     A7 2E 02 F1 | 	add	local09, fp
1a9e0     17 33 02 FB | 	rdlong	local11, local09
1a9e4     1A 29 02 F6 | 	mov	local06, local12
1a9e8     02 28 66 F0 | 	shl	local06, #2
1a9ec     A7 28 02 F1 | 	add	local06, fp
1a9f0     14 27 02 FB | 	rdlong	local05, local06
1a9f4     1A 2F 02 F6 | 	mov	local09, local12
1a9f8     17 29 02 F6 | 	mov	local06, local09
1a9fc     02 28 66 F0 | 	shl	local06, #2
1aa00     A7 1E 02 F6 | 	mov	local01, fp
1aa04     A7 28 02 F1 | 	add	local06, fp
1aa08     14 33 62 FC | 	wrlong	local11, local06
1aa0c     1A 21 02 F6 | 	mov	local02, local12
1aa10     01 20 06 F1 | 	add	local02, #1
1aa14     10 39 02 F6 | 	mov	local14, local02
1aa18     02 38 66 F0 | 	shl	local14, #2
1aa1c     A7 3A 02 F6 | 	mov	local15, fp
1aa20     A7 38 02 F1 | 	add	local14, fp
1aa24     1C 27 62 FC | 	wrlong	local05, local14
1aa28     01 32 66 F6 | 	neg	local11, #1
1aa2c     1C 4E 85 F1 | 	sub	fp, #28
1aa30                 | LR__2206
1aa30     01 34 06 F1 | 	add	local12, #1
1aa34     48 FF 9F FD | 	jmp	#LR__2205
1aa38                 | LR__2207
1aa38                 | ' if not swapped then exit for
1aa38     19 3D 22 F6 | 	not	local16, local11
1aa3c     00 3C 0E F2 | 	cmp	local16, #0 wz
1aa40     01 24 06 A1 |  if_e	add	local04, #1
1aa44     1C FF 9F AD |  if_e	jmp	#LR__2204
1aa48                 | LR__2208
1aa48                 | ' for i=0 to n-1
1aa48     00 24 06 F6 | 	mov	local04, #0
1aa4c     16 3F 02 F6 | 	mov	local17, local08
1aa50                 | LR__2209
1aa50     1F 25 52 F2 | 	cmps	local04, local17 wc
1aa54     94 00 90 3D |  if_ae	jmp	#LR__2211
1aa58                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
1aa58     00 12 06 F6 | 	mov	arg01, #0
1aa5c     FC B9 B0 FD | 	call	#__system___getiolock_0540
1aa60     FD 12 02 F6 | 	mov	arg01, result1
1aa64     B4 5F B0 FD | 	call	#__system___lockmem
1aa68     12 21 02 F6 | 	mov	local02, local04
1aa6c     02 20 66 F0 | 	shl	local02, #2
1aa70     1C 4E 05 F1 | 	add	fp, #28
1aa74     A7 38 02 F6 | 	mov	local14, fp
1aa78     A7 20 02 F1 | 	add	local02, fp
1aa7c     10 15 02 FB | 	rdlong	arg02, local02
1aa80     00 1E 06 F6 | 	mov	local01, #0
1aa84     00 12 06 F6 | 	mov	arg01, #0
1aa88     00 16 06 F6 | 	mov	arg03, #0
1aa8c     1C 4E 85 F1 | 	sub	fp, #28
1aa90     7C 6C B0 FD | 	call	#__system___basic_print_string
1aa94     00 12 06 F6 | 	mov	arg01, #0
1aa98     C0 B9 B0 FD | 	call	#__system___getiolock_0540
1aa9c     FD 00 68 FC | 	wrlong	#0, result1
1aaa0     40 22 06 F1 | 	add	local03, #64
1aaa4     11 13 02 F6 | 	mov	arg01, local03
1aaa8     C0 45 B0 FD | 	call	#_hg010b_spin2_setcursorx
1aaac     00 23 56 F2 | 	cmps	local03, #256 wc
1aab0     30 00 90 CD |  if_b	jmp	#LR__2210
1aab4     00 22 06 F6 | 	mov	local03, #0
1aab8     00 12 06 F6 | 	mov	arg01, #0
1aabc     9C B9 B0 FD | 	call	#__system___getiolock_0540
1aac0     FD 12 02 F6 | 	mov	arg01, result1
1aac4     54 5F B0 FD | 	call	#__system___lockmem
1aac8     00 12 06 F6 | 	mov	arg01, #0
1aacc     0A 14 06 F6 | 	mov	arg02, #10
1aad0     00 16 06 F6 | 	mov	arg03, #0
1aad4     E0 6B B0 FD | 	call	#__system___basic_print_char
1aad8     00 12 06 F6 | 	mov	arg01, #0
1aadc     7C B9 B0 FD | 	call	#__system___getiolock_0540
1aae0     FD 00 68 FC | 	wrlong	#0, result1
1aae4                 | LR__2210
1aae4     01 24 06 F1 | 	add	local04, #1
1aae8     64 FF 9F FD | 	jmp	#LR__2209
1aaec                 | LR__2211
1aaec                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
1aaec     80 2C 56 F2 | 	cmps	local08, #128 wc
1aaf0     44 00 90 CD |  if_b	jmp	#LR__2212
1aaf4     00 12 06 F6 | 	mov	arg01, #0
1aaf8     60 B9 B0 FD | 	call	#__system___getiolock_0540
1aafc     FD 12 02 F6 | 	mov	arg01, result1
1ab00     18 5F B0 FD | 	call	#__system___lockmem
1ab04     85 01 00 FF 
1ab08     20 15 06 F6 | 	mov	arg02, ##@LR__5515
1ab0c     00 12 06 F6 | 	mov	arg01, #0
1ab10     00 16 06 F6 | 	mov	arg03, #0
1ab14     F8 6B B0 FD | 	call	#__system___basic_print_string
1ab18     00 12 06 F6 | 	mov	arg01, #0
1ab1c     0A 14 06 F6 | 	mov	arg02, #10
1ab20     00 16 06 F6 | 	mov	arg03, #0
1ab24     90 6B B0 FD | 	call	#__system___basic_print_char
1ab28     00 12 06 F6 | 	mov	arg01, #0
1ab2c     2C B9 B0 FD | 	call	#__system___getiolock_0540
1ab30     FD 00 68 FC | 	wrlong	#0, result1
1ab34     00 1E 06 F6 | 	mov	local01, #0
1ab38                 | LR__2212
1ab38                 | ' print
1ab38     00 12 06 F6 | 	mov	arg01, #0
1ab3c     1C B9 B0 FD | 	call	#__system___getiolock_0540
1ab40     FD 12 02 F6 | 	mov	arg01, result1
1ab44     D4 5E B0 FD | 	call	#__system___lockmem
1ab48     00 12 06 F6 | 	mov	arg01, #0
1ab4c     0A 14 06 F6 | 	mov	arg02, #10
1ab50     00 16 06 F6 | 	mov	arg03, #0
1ab54     60 6B B0 FD | 	call	#__system___basic_print_char
1ab58     00 12 06 F6 | 	mov	arg01, #0
1ab5c     FC B8 B0 FD | 	call	#__system___getiolock_0540
1ab60     FD 00 68 FC | 	wrlong	#0, result1
1ab64     00 28 06 F6 | 	mov	local06, #0
1ab68     00 2C 06 F6 | 	mov	local08, #0
1ab6c     00 22 06 F6 | 	mov	local03, #0
1ab70                 | ' return cursor_y
1ab70     3E E4 05 F1 | 	add	objptr, #62
1ab74     F2 40 C2 FA | 	rdbyte	local18, objptr
1ab78     3E E4 85 F1 | 	sub	objptr, #62
1ab7c     85 01 00 FF 
1ab80     52 13 06 F6 | 	mov	arg01, ##@LR__5516
1ab84     21 14 06 F6 | 	mov	arg02, #33
1ab88     08 BA B0 FD | 	call	#__system___basic_dir
1ab8c     FD 2A 02 F6 | 	mov	local07, result1
1ab90                 | ' n=0
1ab90                 | ' 
1ab90                 | ' px=0: py=v.getcursory()
1ab90                 | ' 
1ab90                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
1ab90                 | ' do while filename <> "" andalso filename <> nil andalso n<128
1ab90                 | LR__2213
1ab90     85 01 00 FF 
1ab94     54 2F 06 F6 | 	mov	local09, ##@LR__5517
1ab98     15 13 02 F6 | 	mov	arg01, local07
1ab9c     17 15 02 F6 | 	mov	arg02, local09
1aba0     A0 5E B0 FD | 	call	#__system___string_cmp
1aba4     00 FA 0D F2 | 	cmp	result1, #0 wz
1aba8     54 00 90 AD |  if_e	jmp	#LR__2214
1abac     00 2E 06 F6 | 	mov	local09, #0
1abb0     15 13 02 F6 | 	mov	arg01, local07
1abb4     00 14 06 F6 | 	mov	arg02, #0
1abb8     88 5E B0 FD | 	call	#__system___string_cmp
1abbc     00 FA 0D F2 | 	cmp	result1, #0 wz
1abc0     3C 00 90 AD |  if_e	jmp	#LR__2214
1abc4     80 2C 56 F2 | 	cmps	local08, #128 wc
1abc8     34 00 90 3D |  if_ae	jmp	#LR__2214
1abcc     16 27 02 F6 | 	mov	local05, local08
1abd0     02 26 66 F0 | 	shl	local05, #2
1abd4     1C 4E 05 F1 | 	add	fp, #28
1abd8     A7 26 02 F1 | 	add	local05, fp
1abdc     13 2B 62 FC | 	wrlong	local07, local05
1abe0     01 2C 06 F1 | 	add	local08, #1
1abe4     00 26 06 F6 | 	mov	local05, #0
1abe8     00 12 06 F6 | 	mov	arg01, #0
1abec     00 14 06 F6 | 	mov	arg02, #0
1abf0     1C 4E 85 F1 | 	sub	fp, #28
1abf4     9C B9 B0 FD | 	call	#__system___basic_dir
1abf8     FD 2A 02 F6 | 	mov	local07, result1
1abfc     90 FF 9F FD | 	jmp	#LR__2213
1ac00                 | LR__2214
1ac00                 | ' 
1ac00                 | ' for i =0 to n-1
1ac00     00 24 06 F6 | 	mov	local04, #0
1ac04                 | LR__2215
1ac04     16 25 52 F2 | 	cmps	local04, local08 wc
1ac08     D8 00 90 3D |  if_ae	jmp	#LR__2219
1ac0c     00 32 06 F6 | 	mov	local11, #0
1ac10                 | '   swapped=false
1ac10                 | '   for j=0 to n-i-2
1ac10     00 34 06 F6 | 	mov	local12, #0
1ac14     16 43 02 F6 | 	mov	local19, local08
1ac18     12 43 82 F1 | 	sub	local19, local04
1ac1c     01 42 86 F1 | 	sub	local19, #1
1ac20                 | LR__2216
1ac20     21 35 52 F2 | 	cmps	local12, local19 wc
1ac24     AC 00 90 3D |  if_ae	jmp	#LR__2218
1ac28                 | '     if filelist(j) > filelist(j+1) then
1ac28     1A 2F 02 F6 | 	mov	local09, local12
1ac2c     02 2E 66 F0 | 	shl	local09, #2
1ac30     1C 4E 05 F1 | 	add	fp, #28
1ac34     A7 2E 02 F1 | 	add	local09, fp
1ac38     17 13 02 FB | 	rdlong	arg01, local09
1ac3c     1A 2F 02 F6 | 	mov	local09, local12
1ac40     01 2E 06 F1 | 	add	local09, #1
1ac44     17 29 02 F6 | 	mov	local06, local09
1ac48     02 28 66 F0 | 	shl	local06, #2
1ac4c     A7 1E 02 F6 | 	mov	local01, fp
1ac50     A7 28 02 F1 | 	add	local06, fp
1ac54     14 27 02 FB | 	rdlong	local05, local06
1ac58     13 15 02 F6 | 	mov	arg02, local05
1ac5c     1C 4E 85 F1 | 	sub	fp, #28
1ac60     E0 5D B0 FD | 	call	#__system___string_cmp
1ac64     01 FA 55 F2 | 	cmps	result1, #1 wc
1ac68     60 00 90 CD |  if_b	jmp	#LR__2217
1ac6c     1A 2F 02 F6 | 	mov	local09, local12
1ac70     01 2E 06 F1 | 	add	local09, #1
1ac74     02 2E 66 F0 | 	shl	local09, #2
1ac78     1C 4E 05 F1 | 	add	fp, #28
1ac7c     A7 2E 02 F1 | 	add	local09, fp
1ac80     17 3D 02 FB | 	rdlong	local16, local09
1ac84     1A 29 02 F6 | 	mov	local06, local12
1ac88     02 28 66 F0 | 	shl	local06, #2
1ac8c     A7 28 02 F1 | 	add	local06, fp
1ac90     14 27 02 FB | 	rdlong	local05, local06
1ac94     1A 2F 02 F6 | 	mov	local09, local12
1ac98     17 29 02 F6 | 	mov	local06, local09
1ac9c     02 28 66 F0 | 	shl	local06, #2
1aca0     A7 1E 02 F6 | 	mov	local01, fp
1aca4     A7 28 02 F1 | 	add	local06, fp
1aca8     14 3D 62 FC | 	wrlong	local16, local06
1acac     1A 39 02 F6 | 	mov	local14, local12
1acb0     01 38 06 F1 | 	add	local14, #1
1acb4     02 38 66 F0 | 	shl	local14, #2
1acb8     A7 3A 02 F6 | 	mov	local15, fp
1acbc     A7 38 02 F1 | 	add	local14, fp
1acc0     1C 27 62 FC | 	wrlong	local05, local14
1acc4     01 32 66 F6 | 	neg	local11, #1
1acc8     1C 4E 85 F1 | 	sub	fp, #28
1accc                 | LR__2217
1accc     01 34 06 F1 | 	add	local12, #1
1acd0     4C FF 9F FD | 	jmp	#LR__2216
1acd4                 | LR__2218
1acd4                 | ' if not swapped then exit for
1acd4     19 3D 22 F6 | 	not	local16, local11
1acd8     00 3C 0E F2 | 	cmp	local16, #0 wz
1acdc     01 24 06 A1 |  if_e	add	local04, #1
1ace0     20 FF 9F AD |  if_e	jmp	#LR__2215
1ace4                 | LR__2219
1ace4                 | ' for i=0 to n-1
1ace4     00 24 06 F6 | 	mov	local04, #0
1ace8                 | LR__2220
1ace8     16 25 52 F2 | 	cmps	local04, local08 wc
1acec     8C 00 90 3D |  if_ae	jmp	#LR__2222
1acf0                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
1acf0     00 12 06 F6 | 	mov	arg01, #0
1acf4     64 B7 B0 FD | 	call	#__system___getiolock_0540
1acf8     FD 12 02 F6 | 	mov	arg01, result1
1acfc     1C 5D B0 FD | 	call	#__system___lockmem
1ad00     12 21 02 F6 | 	mov	local02, local04
1ad04     02 20 66 F0 | 	shl	local02, #2
1ad08     1C 4E 05 F1 | 	add	fp, #28
1ad0c     A7 20 02 F1 | 	add	local02, fp
1ad10     10 15 02 FB | 	rdlong	arg02, local02
1ad14     00 12 06 F6 | 	mov	arg01, #0
1ad18     00 16 06 F6 | 	mov	arg03, #0
1ad1c     1C 4E 85 F1 | 	sub	fp, #28
1ad20     EC 69 B0 FD | 	call	#__system___basic_print_string
1ad24     00 12 06 F6 | 	mov	arg01, #0
1ad28     30 B7 B0 FD | 	call	#__system___getiolock_0540
1ad2c     FD 00 68 FC | 	wrlong	#0, result1
1ad30     40 22 06 F1 | 	add	local03, #64
1ad34     11 13 02 F6 | 	mov	arg01, local03
1ad38     30 43 B0 FD | 	call	#_hg010b_spin2_setcursorx
1ad3c     00 23 56 F2 | 	cmps	local03, #256 wc
1ad40     30 00 90 CD |  if_b	jmp	#LR__2221
1ad44     00 22 06 F6 | 	mov	local03, #0
1ad48     00 12 06 F6 | 	mov	arg01, #0
1ad4c     0C B7 B0 FD | 	call	#__system___getiolock_0540
1ad50     FD 12 02 F6 | 	mov	arg01, result1
1ad54     C4 5C B0 FD | 	call	#__system___lockmem
1ad58     00 12 06 F6 | 	mov	arg01, #0
1ad5c     0A 14 06 F6 | 	mov	arg02, #10
1ad60     00 16 06 F6 | 	mov	arg03, #0
1ad64     50 69 B0 FD | 	call	#__system___basic_print_char
1ad68     00 12 06 F6 | 	mov	arg01, #0
1ad6c     EC B6 B0 FD | 	call	#__system___getiolock_0540
1ad70     FD 00 68 FC | 	wrlong	#0, result1
1ad74                 | LR__2221
1ad74     01 24 06 F1 | 	add	local04, #1
1ad78     6C FF 9F FD | 	jmp	#LR__2220
1ad7c                 | LR__2222
1ad7c                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
1ad7c     80 2C 56 F2 | 	cmps	local08, #128 wc
1ad80     40 00 90 CD |  if_b	jmp	#LR__2223
1ad84     00 12 06 F6 | 	mov	arg01, #0
1ad88     D0 B6 B0 FD | 	call	#__system___getiolock_0540
1ad8c     FD 12 02 F6 | 	mov	arg01, result1
1ad90     88 5C B0 FD | 	call	#__system___lockmem
1ad94     85 01 00 FF 
1ad98     55 15 06 F6 | 	mov	arg02, ##@LR__5518
1ad9c     00 12 06 F6 | 	mov	arg01, #0
1ada0     00 16 06 F6 | 	mov	arg03, #0
1ada4     68 69 B0 FD | 	call	#__system___basic_print_string
1ada8     00 12 06 F6 | 	mov	arg01, #0
1adac     0A 14 06 F6 | 	mov	arg02, #10
1adb0     00 16 06 F6 | 	mov	arg03, #0
1adb4     00 69 B0 FD | 	call	#__system___basic_print_char
1adb8     00 12 06 F6 | 	mov	arg01, #0
1adbc     9C B6 B0 FD | 	call	#__system___getiolock_0540
1adc0     FD 00 68 FC | 	wrlong	#0, result1
1adc4                 | LR__2223
1adc4                 | ' print
1adc4     00 12 06 F6 | 	mov	arg01, #0
1adc8     90 B6 B0 FD | 	call	#__system___getiolock_0540
1adcc     FD 12 02 F6 | 	mov	arg01, result1
1add0     48 5C B0 FD | 	call	#__system___lockmem
1add4     00 12 06 F6 | 	mov	arg01, #0
1add8     0A 14 06 F6 | 	mov	arg02, #10
1addc     00 16 06 F6 | 	mov	arg03, #0
1ade0     D4 68 B0 FD | 	call	#__system___basic_print_char
1ade4     00 12 06 F6 | 	mov	arg01, #0
1ade8     70 B6 B0 FD | 	call	#__system___getiolock_0540
1adec     FD 00 68 FC | 	wrlong	#0, result1
1adf0     A7 F0 03 F6 | 	mov	ptra, fp
1adf4     B2 00 A0 FD | 	call	#popregs_
1adf8                 | _do_dir_ret
1adf8     2D 00 64 FD | 	ret
1adfc                 | 
1adfc                 | ' 
1adfc                 | ' sub do_if
1adfc                 | _do_if
1adfc     05 4A 05 F6 | 	mov	COUNT_, #5
1ae00     A8 00 A0 FD | 	call	#pushregs_
1ae04     50 0C BF FD | 	call	#_pop
1ae08     FD 1E 0A F6 | 	mov	local01, result1 wz
1ae0c     FE 20 02 F6 | 	mov	local02, result2
1ae10     FF 22 02 F6 | 	mov	local03, result3
1ae14                 | ' t1=pop()
1ae14                 | ' ' if uresult=0, jump over else
1ae14                 | ' if t1.result.uresult = 0 then 
1ae14     BC 00 90 5D |  if_ne	jmp	#LR__2232
1ae18                 | '   for i=lineptr_e to lineptr-1
1ae18     4A 00 00 FF 
1ae1c     80 E4 05 F1 | 	add	objptr, ##38016
1ae20     F2 24 02 FB | 	rdlong	local04, objptr
1ae24     04 E4 85 F1 | 	sub	objptr, #4
1ae28     F2 26 02 FB | 	rdlong	local05, objptr
1ae2c     4A 00 00 FF 
1ae30     7C E4 85 F1 | 	sub	objptr, ##38012
1ae34                 | LR__2230
1ae34     13 25 52 F2 | 	cmps	local04, local05 wc
1ae38     78 00 90 3D |  if_ae	jmp	#LR__2231
1ae3c     12 FF 01 F6 | 	mov	result3, local04
1ae40     01 FE 65 F0 | 	shl	result3, #1
1ae44     12 FF 01 F1 | 	add	result3, local04
1ae48     02 FE 65 F0 | 	shl	result3, #2
1ae4c     47 00 00 FF 
1ae50     7C E4 05 F1 | 	add	objptr, ##36476
1ae54     F2 FE 01 F1 | 	add	result3, objptr
1ae58     FF 1E 02 FB | 	rdlong	local01, result3
1ae5c     04 FE 05 F1 | 	add	result3, #4
1ae60     FF FC 01 FB | 	rdlong	result2, result3
1ae64     12 FF 01 F6 | 	mov	result3, local04
1ae68     01 FE 65 F0 | 	shl	result3, #1
1ae6c     12 FF 01 F1 | 	add	result3, local04
1ae70     02 FE 65 F0 | 	shl	result3, #2
1ae74     F2 FE 01 F1 | 	add	result3, objptr
1ae78     08 FE 05 F1 | 	add	result3, #8
1ae7c     FF FE 01 FB | 	rdlong	result3, result3
1ae80     FE 20 02 F6 | 	mov	local02, result2
1ae84     FF 22 02 F6 | 	mov	local03, result3
1ae88                 | '     t1=compiledline(i)
1ae88                 | '     if t1.result_type=token_else then lineptr_e=i : return
1ae88     5A 22 0E F2 | 	cmp	local03, #90 wz
1ae8c     47 00 00 FF 
1ae90     7C E4 85 F1 | 	sub	objptr, ##36476
1ae94     4A 00 00 AF 
1ae98     80 E4 05 A1 |  if_e	add	objptr, ##38016
1ae9c     F2 24 62 AC |  if_e	wrlong	local04, objptr
1aea0     4A 00 00 AF 
1aea4     80 E4 85 A1 |  if_e	sub	objptr, ##38016
1aea8     28 00 90 AD |  if_e	jmp	#LR__2233
1aeac     01 24 06 F1 | 	add	local04, #1
1aeb0     80 FF 9F FD | 	jmp	#LR__2230
1aeb4                 | LR__2231
1aeb4     4A 00 00 FF 
1aeb8     7C E4 05 F1 | 	add	objptr, ##38012
1aebc     F2 26 02 FB | 	rdlong	local05, objptr
1aec0     01 26 86 F1 | 	sub	local05, #1
1aec4     04 E4 05 F1 | 	add	objptr, #4
1aec8     F2 26 62 FC | 	wrlong	local05, objptr
1aecc     4A 00 00 FF 
1aed0     80 E4 85 F1 | 	sub	objptr, ##38016
1aed4                 | LR__2232
1aed4                 | LR__2233
1aed4     A7 F0 03 F6 | 	mov	ptra, fp
1aed8     B2 00 A0 FD | 	call	#popregs_
1aedc                 | _do_if_ret
1aedc     2D 00 64 FD | 	ret
1aee0                 | 
1aee0                 | ' 
1aee0                 | ' sub do_else
1aee0                 | _do_else
1aee0     4A 00 00 FF 
1aee4     7C E4 05 F1 | 	add	objptr, ##38012
1aee8     F2 00 02 FB | 	rdlong	_var01, objptr
1aeec     01 00 86 F1 | 	sub	_var01, #1
1aef0     04 E4 05 F1 | 	add	objptr, #4
1aef4     F2 00 62 FC | 	wrlong	_var01, objptr
1aef8     4A 00 00 FF 
1aefc     80 E4 85 F1 | 	sub	objptr, ##38016
1af00                 | _do_else_ret
1af00     2D 00 64 FD | 	ret
1af04                 | 
1af04                 | ' 
1af04                 | ' sub do_rad
1af04                 | _do_rad
1af04     51 00 00 FF 
1af08     B8 E5 05 F1 | 	add	objptr, ##41912
1af0c     00 C0 9F FF 
1af10     F2 00 68 FC | 	wrlong	##1065353216, objptr
1af14     04 E4 05 F1 | 	add	objptr, #4
1af18     00 C0 9F FF 
1af1c     F2 00 68 FC | 	wrlong	##1065353216, objptr
1af20     51 00 00 FF 
1af24     BC E5 85 F1 | 	sub	objptr, ##41916
1af28                 | _do_rad_ret
1af28     2D 00 64 FD | 	ret
1af2c                 | 
1af2c                 | ' 
1af2c                 | ' sub do_deg
1af2c                 | _do_deg
1af2c     51 00 00 FF 
1af30     B8 E5 05 F1 | 	add	objptr, ##41912
1af34     7D 47 9E FF 
1af38     F2 6A 68 FC | 	wrlong	##1016003125, objptr
1af3c     04 E4 05 F1 | 	add	objptr, #4
1af40     97 32 A1 FF 
1af44     F2 C2 69 FC | 	wrlong	##1113927393, objptr
1af48     51 00 00 FF 
1af4c     BC E5 85 F1 | 	sub	objptr, ##41916
1af50                 | _do_deg_ret
1af50     2D 00 64 FD | 	ret
1af54                 | 
1af54                 | ' 
1af54                 | ' sub do_round
1af54                 | _do_round
1af54     00 4A 05 F6 | 	mov	COUNT_, #0
1af58     A8 00 A0 FD | 	call	#pushregs_
1af5c     0C F0 07 F1 | 	add	ptra, #12
1af60     F4 0A BF FD | 	call	#_pop
1af64     A7 FA 61 FC | 	wrlong	result1, fp
1af68     04 4E 05 F1 | 	add	fp, #4
1af6c     A7 FC 61 FC | 	wrlong	result2, fp
1af70     04 4E 05 F1 | 	add	fp, #4
1af74     A7 FE 61 FC | 	wrlong	result3, fp
1af78     08 4E 85 F1 | 	sub	fp, #8
1af7c     A7 12 02 F6 | 	mov	arg01, fp
1af80     A4 AB BF FD | 	call	#_converttoint
1af84     A7 FA 61 FC | 	wrlong	result1, fp
1af88     08 4E 05 F1 | 	add	fp, #8
1af8c     A7 38 68 FC | 	wrlong	#28, fp
1af90     08 4E 85 F1 | 	sub	fp, #8
1af94     A7 12 02 F6 | 	mov	arg01, fp
1af98     54 0B BF FD | 	call	#_push
1af9c     A7 F0 03 F6 | 	mov	ptra, fp
1afa0     B2 00 A0 FD | 	call	#popregs_
1afa4                 | _do_round_ret
1afa4     2D 00 64 FD | 	ret
1afa8                 | 
1afa8                 | ' 
1afa8                 | ' sub do_int
1afa8                 | _do_int
1afa8     02 4A 05 F6 | 	mov	COUNT_, #2
1afac     A8 00 A0 FD | 	call	#pushregs_
1afb0     10 F0 07 F1 | 	add	ptra, #16
1afb4     A0 0A BF FD | 	call	#_pop
1afb8     FE 1E 02 F6 | 	mov	local01, result2
1afbc     FF 20 02 F6 | 	mov	local02, result3
1afc0     A7 FA 61 FC | 	wrlong	result1, fp
1afc4     04 4E 05 F1 | 	add	fp, #4
1afc8     A7 1E 62 FC | 	wrlong	local01, fp
1afcc     04 4E 05 F1 | 	add	fp, #4
1afd0     A7 20 62 FC | 	wrlong	local02, fp
1afd4                 | ' 
1afd4                 | ' t1=pop()
1afd4                 | ' select case t1.result_type
1afd4     08 4E 85 F1 | 	sub	fp, #8
1afd8     1E 20 0E F2 | 	cmp	local02, #30 wz
1afdc     14 00 90 AD |  if_e	jmp	#LR__2240
1afe0     1F 20 0E F2 | 	cmp	local02, #31 wz
1afe4     20 00 90 AD |  if_e	jmp	#LR__2241
1afe8     2B 20 0E F2 | 	cmp	local02, #43 wz
1afec     34 00 90 AD |  if_e	jmp	#LR__2242
1aff0     50 00 90 FD | 	jmp	#LR__2243
1aff4                 | LR__2240
1aff4     A7 12 02 FB | 	rdlong	arg01, fp
1aff8     00 14 06 F6 | 	mov	arg02, #0
1affc     98 8A B0 FD | 	call	#__system___float_tointeger
1b000     A7 FA 61 FC | 	wrlong	result1, fp
1b004     3C 00 90 FD | 	jmp	#LR__2243
1b008                 | LR__2241
1b008     A7 12 02 FB | 	rdlong	arg01, fp
1b00c     A8 8D B0 FD | 	call	#__system____builtin_atof
1b010     FD 12 02 F6 | 	mov	arg01, result1
1b014     00 14 06 F6 | 	mov	arg02, #0
1b018     7C 8A B0 FD | 	call	#__system___float_tointeger
1b01c     A7 FA 61 FC | 	wrlong	result1, fp
1b020     20 00 90 FD | 	jmp	#LR__2243
1b024                 | LR__2242
1b024     A7 12 02 FB | 	rdlong	arg01, fp
1b028     D8 62 BF FD | 	call	#_convertstring
1b02c     FD 12 02 F6 | 	mov	arg01, result1
1b030     84 8D B0 FD | 	call	#__system____builtin_atof
1b034     FD 12 02 F6 | 	mov	arg01, result1
1b038     00 14 06 F6 | 	mov	arg02, #0
1b03c     58 8A B0 FD | 	call	#__system___float_tointeger
1b040     A7 FA 61 FC | 	wrlong	result1, fp
1b044                 | LR__2243
1b044     08 4E 05 F1 | 	add	fp, #8
1b048     A7 38 68 FC | 	wrlong	#28, fp
1b04c     08 4E 85 F1 | 	sub	fp, #8
1b050     A7 12 02 F6 | 	mov	arg01, fp
1b054     98 0A BF FD | 	call	#_push
1b058     A7 F0 03 F6 | 	mov	ptra, fp
1b05c     B2 00 A0 FD | 	call	#popregs_
1b060                 | _do_int_ret
1b060     2D 00 64 FD | 	ret
1b064                 | 
1b064                 | ' 
1b064                 | ' 
1b064                 | ' sub do_nothing
1b064                 | _do_nothing
1b064                 | _do_nothing_ret
1b064     2D 00 64 FD | 	ret
1b068                 | 
1b068                 | ' 
1b068                 | ' sub do_brun
1b068                 | _do_brun
1b068     08 4A 05 F6 | 	mov	COUNT_, #8
1b06c     A8 00 A0 FD | 	call	#pushregs_
1b070     E4 09 BF FD | 	call	#_pop
1b074     FE 1A 02 F6 | 	mov	arg05, result2
1b078     FF 18 02 F6 | 	mov	arg04, result3
1b07c     FD 1E 02 F6 | 	mov	local01, result1
1b080     0D 21 02 F6 | 	mov	local02, arg05
1b084     0C 23 02 F6 | 	mov	local03, arg04
1b088                 | ' 
1b088                 | ' t1=pop() 
1b088                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1b088     2B 22 0E F2 | 	cmp	local03, #43 wz
1b08c     10 00 90 5D |  if_ne	jmp	#LR__2250
1b090     0F 13 02 F6 | 	mov	arg01, local01
1b094     6C 62 BF FD | 	call	#_convertstring
1b098     FD 1E 02 F6 | 	mov	local01, result1
1b09c     1F 22 06 F6 | 	mov	local03, #31
1b0a0                 | LR__2250
1b0a0                 | ' if t1.result_type=result_string then
1b0a0     1F 22 0E F2 | 	cmp	local03, #31 wz
1b0a4     EC 01 90 5D |  if_ne	jmp	#LR__2254
1b0a8     0F 25 02 F6 | 	mov	local04, local01
1b0ac                 | '   filename=t1.result.sresult
1b0ac                 | '   if left$(filename,1)="/" then 
1b0ac     12 13 02 F6 | 	mov	arg01, local04
1b0b0     01 14 06 F6 | 	mov	arg02, #1
1b0b4     E0 79 B0 FD | 	call	#__system__Left_S
1b0b8     FD 12 02 F6 | 	mov	arg01, result1
1b0bc     85 01 00 FF 
1b0c0     87 15 06 F6 | 	mov	arg02, ##@LR__5519
1b0c4     7C 59 B0 FD | 	call	#__system___string_cmp
1b0c8     00 FA 0D F2 | 	cmp	result1, #0 wz
1b0cc     12 27 02 A6 |  if_e	mov	local05, local04
1b0d0     14 00 90 AD |  if_e	jmp	#LR__2251
1b0d4     85 01 00 FF 
1b0d8     89 13 06 F6 | 	mov	arg01, ##@LR__5520
1b0dc     12 15 02 F6 | 	mov	arg02, local04
1b0e0     94 59 B0 FD | 	call	#__system___string_concat
1b0e4     FD 26 02 F6 | 	mov	local05, result1
1b0e8                 | LR__2251
1b0e8                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
1b0e8                 | '   open fullfilename for input as #9
1b0e8     09 12 06 F6 | 	mov	arg01, #9
1b0ec     13 15 02 F6 | 	mov	arg02, local05
1b0f0     00 16 06 F6 | 	mov	arg03, #0
1b0f4     28 65 B0 FD | 	call	#__system___basic_open_string
1b0f8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1b0fc     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1b100     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1b104     FD 28 0A F6 | 	mov	local06, result1 wz
1b108                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
1b108     8C 00 90 AD |  if_e	jmp	#LR__2252
1b10c     00 12 06 F6 | 	mov	arg01, #0
1b110     48 B3 B0 FD | 	call	#__system___getiolock_0540
1b114     FD 12 02 F6 | 	mov	arg01, result1
1b118     00 59 B0 FD | 	call	#__system___lockmem
1b11c     85 01 00 FF 
1b120     92 15 06 F6 | 	mov	arg02, ##@LR__5521
1b124     00 12 06 F6 | 	mov	arg01, #0
1b128     00 16 06 F6 | 	mov	arg03, #0
1b12c     E0 65 B0 FD | 	call	#__system___basic_print_string
1b130     00 12 06 F6 | 	mov	arg01, #0
1b134     14 15 02 F6 | 	mov	arg02, local06
1b138     00 16 06 F6 | 	mov	arg03, #0
1b13c     0A 18 06 F6 | 	mov	arg04, #10
1b140     10 66 B0 FD | 	call	#__system___basic_print_integer
1b144     85 01 00 FF 
1b148     A0 15 06 F6 | 	mov	arg02, ##@LR__5522
1b14c     00 12 06 F6 | 	mov	arg01, #0
1b150     00 16 06 F6 | 	mov	arg03, #0
1b154     B8 65 B0 FD | 	call	#__system___basic_print_string
1b158     14 13 02 F6 | 	mov	arg01, local06
1b15c     84 7F B0 FD | 	call	#__system___strerror
1b160     FD 14 02 F6 | 	mov	arg02, result1
1b164     00 12 06 F6 | 	mov	arg01, #0
1b168     00 16 06 F6 | 	mov	arg03, #0
1b16c     A0 65 B0 FD | 	call	#__system___basic_print_string
1b170     00 12 06 F6 | 	mov	arg01, #0
1b174     0A 14 06 F6 | 	mov	arg02, #10
1b178     00 16 06 F6 | 	mov	arg03, #0
1b17c     38 65 B0 FD | 	call	#__system___basic_print_char
1b180     00 12 06 F6 | 	mov	arg01, #0
1b184     D4 B2 B0 FD | 	call	#__system___getiolock_0540
1b188     FD 00 68 FC | 	wrlong	#0, result1
1b18c     09 12 06 F6 | 	mov	arg01, #9
1b190     F8 A8 B0 FD | 	call	#__system__close
1b194     FC 00 90 FD | 	jmp	#LR__2255
1b198                 | LR__2252
1b198     01 2A 06 F6 | 	mov	local07, #1
1b19c     00 2C 06 F6 | 	mov	local08, #0
1b1a0                 | '   do
1b1a0                 | LR__2253
1b1a0                 | '     get #9,pos,block(0),1024,r : pos+=r	
1b1a0     4E 00 00 FF 
1b1a4     B0 E4 05 F1 | 	add	objptr, ##40112
1b1a8     F2 16 02 F6 | 	mov	arg03, objptr
1b1ac     4E 00 00 FF 
1b1b0     B0 E4 85 F1 | 	sub	objptr, ##40112
1b1b4     09 12 06 F6 | 	mov	arg01, #9
1b1b8     15 15 02 F6 | 	mov	arg02, local07
1b1bc     0A 18 C6 F9 | 	decod	arg04, #10
1b1c0     01 1A 06 F6 | 	mov	arg05, #1
1b1c4     C4 66 B0 FD | 	call	#__system___basic_get
1b1c8     FD 28 02 F6 | 	mov	local06, result1
1b1cc     FD 2A 02 F1 | 	add	local07, result1
1b1d0     4E 00 00 FF 
1b1d4     B0 E4 05 F1 | 	add	objptr, ##40112
1b1d8     F2 12 02 F6 | 	mov	arg01, objptr
1b1dc     16 15 02 F6 | 	mov	arg02, local08
1b1e0     0A 16 C6 F9 | 	decod	arg03, #10
1b1e4     42 00 00 FF 
1b1e8     E4 E5 85 F1 | 	sub	objptr, ##34276
1b1ec     88 4C B0 FD | 	call	#_psram_spin2_write
1b1f0     0B 00 00 FF 
1b1f4     CC E4 85 F1 | 	sub	objptr, ##5836
1b1f8     14 2D 02 F1 | 	add	local08, local06
1b1fc     02 00 00 FF 
1b200     00 28 0E F2 | 	cmp	local06, ##1024 wz
1b204     E0 03 00 AF 
1b208     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
1b20c     90 FF 9F 8D |  if_c_and_z	jmp	#LR__2253
1b210     36 00 00 FF 
1b214     FC E5 05 F1 | 	add	objptr, ##28156
1b218     F2 12 02 FB | 	rdlong	arg01, objptr
1b21c     03 12 62 FD | 	cogstop	arg01
1b220     04 E4 05 F1 | 	add	objptr, #4
1b224     F2 12 02 FB | 	rdlong	arg01, objptr
1b228     03 12 62 FD | 	cogstop	arg01
1b22c     04 E4 05 F1 | 	add	objptr, #4
1b230     F2 12 02 FB | 	rdlong	arg01, objptr
1b234     03 12 62 FD | 	cogstop	arg01
1b238     19 00 00 FF 
1b23c     10 E5 05 F1 | 	add	objptr, ##13072
1b240     F2 12 02 FB | 	rdlong	arg01, objptr
1b244     03 12 62 FD | 	cogstop	arg01
1b248     18 00 00 FF 
1b24c     D8 EA 05 F1 | 	add	ptr__dat__, ##12504
1b250     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1b254     18 00 00 FF 
1b258     D8 EA 85 F1 | 	sub	ptr__dat__, ##12504
1b25c     19 00 00 FF 
1b260     08 E5 85 F1 | 	sub	objptr, ##13064
1b264     1E 2C 06 F6 | 	mov	local08, #30
1b268     28 E4 61 FD | 	setq	objptr
1b26c     0A 2D F2 FC | 	coginit	local08, arg02 wc
1b270     01 2C 66 C6 |  if_b	neg	local08, #1
1b274     1B 00 00 FF 
1b278     10 E4 05 F1 | 	add	objptr, ##13840
1b27c     F2 2C 62 FC | 	wrlong	local08, objptr
1b280     52 00 00 FF 
1b284     1C E4 85 F1 | 	sub	objptr, ##42012
1b288     00 12 06 F6 | 	mov	arg01, #0
1b28c     01 12 62 FD | 	cogid	arg01
1b290     03 12 62 FD | 	cogstop	arg01
1b294                 | LR__2254
1b294                 | LR__2255
1b294     A7 F0 03 F6 | 	mov	ptra, fp
1b298     B2 00 A0 FD | 	call	#popregs_
1b29c                 | _do_brun_ret
1b29c     2D 00 64 FD | 	ret
1b2a0                 | 
1b2a0                 | ' 
1b2a0                 | ' 
1b2a0                 | ' sub do_mouse
1b2a0                 | _do_mouse
1b2a0     B4 07 BF FD | 	call	#_pop
1b2a4     00 FA 4D F2 | 	cmps	result1, #0 wz
1b2a8                 | ' t1=pop()
1b2a8                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
1b2a8     14 00 90 5D |  if_ne	jmp	#LR__2260
1b2ac     10 12 06 F6 | 	mov	arg01, #16
1b2b0     00 14 06 F6 | 	mov	arg02, #0
1b2b4     00 16 06 F6 | 	mov	arg03, #0
1b2b8     64 31 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b2bc     10 00 90 FD | 	jmp	#LR__2261
1b2c0                 | LR__2260
1b2c0     10 12 06 F6 | 	mov	arg01, #16
1b2c4     20 14 06 F6 | 	mov	arg02, #32
1b2c8     20 16 06 F6 | 	mov	arg03, #32
1b2cc     50 31 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b2d0                 | LR__2261
1b2d0                 | _do_mouse_ret
1b2d0     2D 00 64 FD | 	ret
1b2d4                 | 
1b2d4                 | ' 
1b2d4                 | ' sub do_cursor
1b2d4                 | _do_cursor
1b2d4     80 07 BF FD | 	call	#_pop
1b2d8     00 FA 4D F2 | 	cmps	result1, #0 wz
1b2dc                 | ' t1=pop()
1b2dc                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
1b2dc     14 00 90 5D |  if_ne	jmp	#LR__2270
1b2e0     11 12 06 F6 | 	mov	arg01, #17
1b2e4     00 14 06 F6 | 	mov	arg02, #0
1b2e8     00 16 06 F6 | 	mov	arg03, #0
1b2ec     30 31 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b2f0     10 00 90 FD | 	jmp	#LR__2271
1b2f4                 | LR__2270
1b2f4     11 12 06 F6 | 	mov	arg01, #17
1b2f8     08 14 06 F6 | 	mov	arg02, #8
1b2fc     10 16 06 F6 | 	mov	arg03, #16
1b300     1C 31 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b304                 | LR__2271
1b304                 | _do_cursor_ret
1b304     2D 00 64 FD | 	ret
1b308                 | 
1b308                 | ' 
1b308                 | ' 
1b308                 | ' sub do_click
1b308                 | _do_click
1b308     4C 07 BF FD | 	call	#_pop
1b30c     00 FA 4D F2 | 	cmps	result1, #0 wz
1b310                 | ' t1=pop()
1b310                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
1b310     50 00 00 AF 
1b314     10 E5 05 A1 |  if_e	add	objptr, ##41232
1b318     F2 00 68 AC |  if_e	wrlong	#0, objptr
1b31c     50 00 00 FF 
1b320     10 E5 C5 F3 | 	sumz	objptr, ##41232
1b324     F2 02 68 5C |  if_ne	wrlong	#1, objptr
1b328     50 00 00 5F 
1b32c     10 E5 85 51 |  if_ne	sub	objptr, ##41232
1b330                 | _do_click_ret
1b330     2D 00 64 FD | 	ret
1b334                 | 
1b334                 | ' 
1b334                 | ' 
1b334                 | ' sub do_beep
1b334                 | _do_beep
1b334     02 4A 05 F6 | 	mov	COUNT_, #2
1b338     A8 00 A0 FD | 	call	#pushregs_
1b33c     20 F0 07 F1 | 	add	ptra, #32
1b340     14 07 BF FD | 	call	#_pop
1b344     FD 1E 02 F6 | 	mov	local01, result1
1b348     FE 1C 02 F6 | 	mov	arg06, result2
1b34c     FF 20 02 F6 | 	mov	local02, result3
1b350     0C 4E 05 F1 | 	add	fp, #12
1b354     A7 1E 62 FC | 	wrlong	local01, fp
1b358     04 4E 05 F1 | 	add	fp, #4
1b35c     A7 1C 62 FC | 	wrlong	arg06, fp
1b360     04 4E 05 F1 | 	add	fp, #4
1b364     A7 20 62 FC | 	wrlong	local02, fp
1b368     14 4E 85 F1 | 	sub	fp, #20
1b36c     E8 06 BF FD | 	call	#_pop
1b370     A7 FA 61 FC | 	wrlong	result1, fp
1b374     04 4E 05 F1 | 	add	fp, #4
1b378     A7 FC 61 FC | 	wrlong	result2, fp
1b37c     04 4E 05 F1 | 	add	fp, #4
1b380     A7 FE 61 FC | 	wrlong	result3, fp
1b384                 | ' 
1b384                 | ' t2=pop()
1b384                 | ' t1=pop()
1b384                 | ' 
1b384                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
1b384     08 4E 85 F1 | 	sub	fp, #8
1b388     1C FE 0D F2 | 	cmp	result3, #28 wz
1b38c     08 4E 05 51 |  if_ne	add	fp, #8
1b390     A7 20 02 5B |  if_ne	rdlong	local02, fp
1b394     08 4E 85 51 |  if_ne	sub	fp, #8
1b398     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
1b39c     A7 1E 02 AB |  if_e	rdlong	local01, fp
1b3a0     18 4E 05 A1 |  if_e	add	fp, #24
1b3a4     A7 1E 62 AC |  if_e	wrlong	local01, fp
1b3a8     18 4E 85 A1 |  if_e	sub	fp, #24
1b3ac     14 00 90 AD |  if_e	jmp	#LR__2280
1b3b0     A7 12 02 F6 | 	mov	arg01, fp
1b3b4     70 A7 BF FD | 	call	#_converttoint
1b3b8     18 4E 05 F1 | 	add	fp, #24
1b3bc     A7 FA 61 FC | 	wrlong	result1, fp
1b3c0     18 4E 85 F1 | 	sub	fp, #24
1b3c4                 | LR__2280
1b3c4     1C 4E 05 F1 | 	add	fp, #28
1b3c8     A7 FE 48 FC | 	wrbyte	#127, fp
1b3cc     01 4E 05 F1 | 	add	fp, #1
1b3d0     A7 00 49 FC | 	wrbyte	#128, fp
1b3d4     01 4E 85 F1 | 	sub	fp, #1
1b3d8     A7 14 02 F6 | 	mov	arg02, fp
1b3dc     04 4E 85 F1 | 	sub	fp, #4
1b3e0     A7 16 02 FB | 	rdlong	arg03, fp
1b3e4     18 4E 85 F1 | 	sub	fp, #24
1b3e8     01 16 66 F0 | 	shl	arg03, #1
1b3ec     07 12 06 F6 | 	mov	arg01, #7
1b3f0     0E 18 C6 F9 | 	decod	arg04, #14
1b3f4     02 1A 06 F6 | 	mov	arg05, #2
1b3f8     00 1C 06 F6 | 	mov	arg06, #0
1b3fc     0B 00 00 FF 
1b400     CC E4 05 F1 | 	add	objptr, ##5836
1b404     70 52 B0 FD | 	call	#_audio096_spin2_play8
1b408     0B 00 00 FF 
1b40c     CC E4 85 F1 | 	sub	objptr, ##5836
1b410     0C 4E 05 F1 | 	add	fp, #12
1b414     A7 12 02 F6 | 	mov	arg01, fp
1b418     0C 4E 85 F1 | 	sub	fp, #12
1b41c     D0 06 BF FD | 	call	#_push
1b420     74 F2 BF FD | 	call	#_do_waitms
1b424     07 12 06 F6 | 	mov	arg01, #7
1b428     0B 00 00 FF 
1b42c     CC E4 05 F1 | 	add	objptr, ##5836
1b430     E8 52 B0 FD | 	call	#_audio096_spin2_stop
1b434     0B 00 00 FF 
1b438     CC E4 85 F1 | 	sub	objptr, ##5836
1b43c     A7 F0 03 F6 | 	mov	ptra, fp
1b440     B2 00 A0 FD | 	call	#popregs_
1b444                 | _do_beep_ret
1b444     2D 00 64 FD | 	ret
1b448                 | 
1b448                 | ' 
1b448                 | ' sub do_no_command
1b448                 | _do_no_command
1b448     17 12 06 F6 | 	mov	arg01, #23
1b44c     34 20 B0 FD | 	call	#_printerror
1b450                 | _do_no_command_ret
1b450     2D 00 64 FD | 	ret
1b454                 | 
1b454                 | ' 
1b454                 | ' sub do_negative
1b454                 | _do_negative
1b454     02 4A 05 F6 | 	mov	COUNT_, #2
1b458     A8 00 A0 FD | 	call	#pushregs_
1b45c     0C F0 07 F1 | 	add	ptra, #12
1b460     F4 05 BF FD | 	call	#_pop
1b464     FF 1E 02 F6 | 	mov	local01, result3
1b468     A7 FA 61 FC | 	wrlong	result1, fp
1b46c     04 4E 05 F1 | 	add	fp, #4
1b470     A7 FC 61 FC | 	wrlong	result2, fp
1b474     04 4E 05 F1 | 	add	fp, #4
1b478     A7 1E 62 FC | 	wrlong	local01, fp
1b47c                 | ' t1=pop()
1b47c                 | ' if t1.result_type=result_int then 
1b47c     08 4E 85 F1 | 	sub	fp, #8
1b480     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b484     A7 20 02 AB |  if_e	rdlong	local02, fp
1b488     10 1F 62 A6 |  if_e	neg	local01, local02
1b48c     A7 1E 62 AC |  if_e	wrlong	local01, fp
1b490     5C 00 90 AD |  if_e	jmp	#LR__2292
1b494     08 4E 05 F1 | 	add	fp, #8
1b498     A7 1E 02 FB | 	rdlong	local01, fp
1b49c     08 4E 85 F1 | 	sub	fp, #8
1b4a0     1D 1E 0E F2 | 	cmp	local01, #29 wz
1b4a4     1C 00 90 5D |  if_ne	jmp	#LR__2290
1b4a8     A7 20 02 FB | 	rdlong	local02, fp
1b4ac     10 1F 62 F6 | 	neg	local01, local02
1b4b0     A7 1E 62 FC | 	wrlong	local01, fp
1b4b4     08 4E 05 F1 | 	add	fp, #8
1b4b8     A7 38 68 FC | 	wrlong	#28, fp
1b4bc     08 4E 85 F1 | 	sub	fp, #8
1b4c0     2C 00 90 FD | 	jmp	#LR__2291
1b4c4                 | LR__2290
1b4c4     08 4E 05 F1 | 	add	fp, #8
1b4c8     A7 1E 02 FB | 	rdlong	local01, fp
1b4cc     08 4E 85 F1 | 	sub	fp, #8
1b4d0     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b4d4     A7 FA 01 AB |  if_e	rdlong	result1, fp
1b4d8     1F FA E5 A4 |  if_e	bitnot	result1, #31
1b4dc     A7 FA 61 AC |  if_e	wrlong	result1, fp
1b4e0     08 4E 05 51 |  if_ne	add	fp, #8
1b4e4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1b4e8     08 4E 85 51 |  if_ne	sub	fp, #8
1b4ec     A7 50 68 5C |  if_ne	wrlong	#40, fp
1b4f0                 | LR__2291
1b4f0                 | LR__2292
1b4f0     A7 12 02 F6 | 	mov	arg01, fp
1b4f4     F8 05 BF FD | 	call	#_push
1b4f8     A7 F0 03 F6 | 	mov	ptra, fp
1b4fc     B2 00 A0 FD | 	call	#popregs_
1b500                 | _do_negative_ret
1b500     2D 00 64 FD | 	ret
1b504                 | 
1b504                 | ' 
1b504                 | ' sub do_abs
1b504                 | _do_abs
1b504     01 4A 05 F6 | 	mov	COUNT_, #1
1b508     A8 00 A0 FD | 	call	#pushregs_
1b50c     0C F0 07 F1 | 	add	ptra, #12
1b510     44 05 BF FD | 	call	#_pop
1b514     FF 1E 02 F6 | 	mov	local01, result3
1b518     A7 FA 61 FC | 	wrlong	result1, fp
1b51c     04 4E 05 F1 | 	add	fp, #4
1b520     A7 FC 61 FC | 	wrlong	result2, fp
1b524     04 4E 05 F1 | 	add	fp, #4
1b528     A7 1E 62 FC | 	wrlong	local01, fp
1b52c                 | ' t1=pop()
1b52c                 | ' if t1.result_type=result_int then 
1b52c     08 4E 85 F1 | 	sub	fp, #8
1b530     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b534     A7 12 02 AB |  if_e	rdlong	arg01, fp
1b538     09 1F 42 A6 |  if_e	abs	local01, arg01
1b53c     A7 1E 62 AC |  if_e	wrlong	local01, fp
1b540     2C 00 90 AD |  if_e	jmp	#LR__2300
1b544     08 4E 05 F1 | 	add	fp, #8
1b548     A7 1E 02 FB | 	rdlong	local01, fp
1b54c     08 4E 85 F1 | 	sub	fp, #8
1b550     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b554     A7 FA 01 AB |  if_e	rdlong	result1, fp
1b558     1F FA 05 A4 |  if_e	bitl	result1, #31
1b55c     A7 FA 61 AC |  if_e	wrlong	result1, fp
1b560     08 4E 05 51 |  if_ne	add	fp, #8
1b564     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1b568     08 4E 85 51 |  if_ne	sub	fp, #8
1b56c     A7 50 68 5C |  if_ne	wrlong	#40, fp
1b570                 | LR__2300
1b570     A7 12 02 F6 | 	mov	arg01, fp
1b574     78 05 BF FD | 	call	#_push
1b578     A7 F0 03 F6 | 	mov	ptra, fp
1b57c     B2 00 A0 FD | 	call	#popregs_
1b580                 | _do_abs_ret
1b580     2D 00 64 FD | 	ret
1b584                 | 
1b584                 | ' 
1b584                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1b584                 | ' 
1b584                 | ' ''----------------------------------------------------------------------------------------------------
1b584                 | ' ''------------------ Initialization procedures -------------------------------------------------------
1b584                 | ' ''----------------------------------------------------------------------------------------------------
1b584                 | ' 
1b584                 | ' ''--------------------------- Command function pointers
1b584                 | ' 
1b584                 | ' sub init_commands
1b584                 | _init_commands
1b584                 | ' 
1b584                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1b584     00 00 06 F6 | 	mov	_var01, #0
1b588     97 16 48 FB | 	callpa	#(@LR__2311-@LR__2310)>>2,fcache_load_ptr_
1b58c                 | LR__2310
1b58c     00 FB 01 F6 | 	mov	result1, _var01
1b590     02 FA 65 F0 | 	shl	result1, #2
1b594     43 00 00 FF 
1b598     60 E4 05 F1 | 	add	objptr, ##34400
1b59c     F2 FA 01 F1 | 	add	result1, objptr
1b5a0     43 00 00 FF 
1b5a4     60 E4 85 F1 | 	sub	objptr, ##34400
1b5a8     FD E4 61 FC | 	wrlong	objptr, result1
1b5ac     01 00 06 F1 | 	add	_var01, #1
1b5b0     00 01 56 F2 | 	cmps	_var01, #256 wc
1b5b4     D4 FF 9F CD |  if_b	jmp	#LR__2310
1b5b8                 | LR__2311
1b5b8     F2 FA 01 F6 | 	mov	result1, objptr
1b5bc     14 FA 25 F4 | 	bith	result1, #20
1b5c0     43 00 00 FF 
1b5c4     64 E4 05 F1 | 	add	objptr, ##34404
1b5c8     F2 FA 61 FC | 	wrlong	result1, objptr
1b5cc     43 00 00 FF 
1b5d0     64 E4 85 F1 | 	sub	objptr, ##34404
1b5d4     F2 FA 01 F6 | 	mov	result1, objptr
1b5d8     15 FA 25 F4 | 	bith	result1, #21
1b5dc     43 00 00 FF 
1b5e0     68 E4 05 F1 | 	add	objptr, ##34408
1b5e4     F2 FA 61 FC | 	wrlong	result1, objptr
1b5e8     43 00 00 FF 
1b5ec     68 E4 85 F1 | 	sub	objptr, ##34408
1b5f0     F2 FA 01 F6 | 	mov	result1, objptr
1b5f4     34 FA 25 F4 | 	bith	result1, #52
1b5f8     43 00 00 FF 
1b5fc     6C E4 05 F1 | 	add	objptr, ##34412
1b600     F2 FA 61 FC | 	wrlong	result1, objptr
1b604     43 00 00 FF 
1b608     6C E4 85 F1 | 	sub	objptr, ##34412
1b60c     F2 FA 01 F6 | 	mov	result1, objptr
1b610     16 FA 25 F4 | 	bith	result1, #22
1b614     43 00 00 FF 
1b618     74 E4 05 F1 | 	add	objptr, ##34420
1b61c     F2 FA 61 FC | 	wrlong	result1, objptr
1b620     43 00 00 FF 
1b624     74 E4 85 F1 | 	sub	objptr, ##34420
1b628     F2 FA 01 F6 | 	mov	result1, objptr
1b62c     00 28 00 FF 
1b630     00 FA 45 F5 | 	or	result1, ##5242880
1b634     43 00 00 FF 
1b638     78 E4 05 F1 | 	add	objptr, ##34424
1b63c     F2 FA 61 FC | 	wrlong	result1, objptr
1b640     43 00 00 FF 
1b644     78 E4 85 F1 | 	sub	objptr, ##34424
1b648     F2 FA 01 F6 | 	mov	result1, objptr
1b64c     35 FA 25 F4 | 	bith	result1, #53
1b650     43 00 00 FF 
1b654     7C E4 05 F1 | 	add	objptr, ##34428
1b658     F2 FA 61 FC | 	wrlong	result1, objptr
1b65c     43 00 00 FF 
1b660     7C E4 85 F1 | 	sub	objptr, ##34428
1b664     F2 FA 01 F6 | 	mov	result1, objptr
1b668     54 FA 25 F4 | 	bith	result1, #84
1b66c     43 00 00 FF 
1b670     80 E4 05 F1 | 	add	objptr, ##34432
1b674     F2 FA 61 FC | 	wrlong	result1, objptr
1b678     43 00 00 FF 
1b67c     80 E4 85 F1 | 	sub	objptr, ##34432
1b680     F2 FA 01 F6 | 	mov	result1, objptr
1b684     17 FA 25 F4 | 	bith	result1, #23
1b688     43 00 00 FF 
1b68c     84 E4 05 F1 | 	add	objptr, ##34436
1b690     F2 FA 61 FC | 	wrlong	result1, objptr
1b694     43 00 00 FF 
1b698     84 E4 85 F1 | 	sub	objptr, ##34436
1b69c     F2 FA 01 F6 | 	mov	result1, objptr
1b6a0     00 48 00 FF 
1b6a4     00 FA 45 F5 | 	or	result1, ##9437184
1b6a8     43 00 00 FF 
1b6ac     88 E4 05 F1 | 	add	objptr, ##34440
1b6b0     F2 FA 61 FC | 	wrlong	result1, objptr
1b6b4     43 00 00 FF 
1b6b8     88 E4 85 F1 | 	sub	objptr, ##34440
1b6bc     F2 FA 01 F6 | 	mov	result1, objptr
1b6c0     00 50 00 FF 
1b6c4     00 FA 45 F5 | 	or	result1, ##10485760
1b6c8     43 00 00 FF 
1b6cc     8C E4 05 F1 | 	add	objptr, ##34444
1b6d0     F2 FA 61 FC | 	wrlong	result1, objptr
1b6d4     43 00 00 FF 
1b6d8     8C E4 85 F1 | 	sub	objptr, ##34444
1b6dc     F2 FA 01 F6 | 	mov	result1, objptr
1b6e0     00 58 00 FF 
1b6e4     00 FA 45 F5 | 	or	result1, ##11534336
1b6e8     43 00 00 FF 
1b6ec     90 E4 05 F1 | 	add	objptr, ##34448
1b6f0     F2 FA 61 FC | 	wrlong	result1, objptr
1b6f4     43 00 00 FF 
1b6f8     90 E4 85 F1 | 	sub	objptr, ##34448
1b6fc     F2 FA 01 F6 | 	mov	result1, objptr
1b700     36 FA 25 F4 | 	bith	result1, #54
1b704     43 00 00 FF 
1b708     A4 E4 05 F1 | 	add	objptr, ##34468
1b70c     F2 FA 61 FC | 	wrlong	result1, objptr
1b710     43 00 00 FF 
1b714     A4 E4 85 F1 | 	sub	objptr, ##34468
1b718     F2 FA 01 F6 | 	mov	result1, objptr
1b71c     00 68 00 FF 
1b720     00 FA 45 F5 | 	or	result1, ##13631488
1b724     43 00 00 FF 
1b728     D4 E4 05 F1 | 	add	objptr, ##34516
1b72c     F2 FA 61 FC | 	wrlong	result1, objptr
1b730     43 00 00 FF 
1b734     D4 E4 85 F1 | 	sub	objptr, ##34516
1b738     F2 FA 01 F6 | 	mov	result1, objptr
1b73c     00 68 00 FF 
1b740     00 FA 45 F5 | 	or	result1, ##13631488
1b744     43 00 00 FF 
1b748     D0 E4 05 F1 | 	add	objptr, ##34512
1b74c     F2 FA 61 FC | 	wrlong	result1, objptr
1b750     43 00 00 FF 
1b754     D0 E4 85 F1 | 	sub	objptr, ##34512
1b758     F2 FA 01 F6 | 	mov	result1, objptr
1b75c     00 68 00 FF 
1b760     00 FA 45 F5 | 	or	result1, ##13631488
1b764     43 00 00 FF 
1b768     D8 E4 05 F1 | 	add	objptr, ##34520
1b76c     F2 FA 61 FC | 	wrlong	result1, objptr
1b770     43 00 00 FF 
1b774     D8 E4 85 F1 | 	sub	objptr, ##34520
1b778     F2 FA 01 F6 | 	mov	result1, objptr
1b77c     00 68 00 FF 
1b780     00 FA 45 F5 | 	or	result1, ##13631488
1b784     43 00 00 FF 
1b788     DC E4 05 F1 | 	add	objptr, ##34524
1b78c     F2 FA 61 FC | 	wrlong	result1, objptr
1b790     43 00 00 FF 
1b794     DC E4 85 F1 | 	sub	objptr, ##34524
1b798     F2 FA 01 F6 | 	mov	result1, objptr
1b79c     00 68 00 FF 
1b7a0     00 FA 45 F5 | 	or	result1, ##13631488
1b7a4     43 00 00 FF 
1b7a8     0C E5 05 F1 | 	add	objptr, ##34572
1b7ac     F2 FA 61 FC | 	wrlong	result1, objptr
1b7b0     43 00 00 FF 
1b7b4     0C E5 85 F1 | 	sub	objptr, ##34572
1b7b8     F2 FA 01 F6 | 	mov	result1, objptr
1b7bc     55 FA 25 F4 | 	bith	result1, #85
1b7c0     43 00 00 FF 
1b7c4     BC E4 05 F1 | 	add	objptr, ##34492
1b7c8     F2 FA 61 FC | 	wrlong	result1, objptr
1b7cc     43 00 00 FF 
1b7d0     BC E4 85 F1 | 	sub	objptr, ##34492
1b7d4     F2 FA 01 F6 | 	mov	result1, objptr
1b7d8     00 68 00 FF 
1b7dc     00 FA 45 F5 | 	or	result1, ##13631488
1b7e0     43 00 00 FF 
1b7e4     10 E5 05 F1 | 	add	objptr, ##34576
1b7e8     F2 FA 61 FC | 	wrlong	result1, objptr
1b7ec     43 00 00 FF 
1b7f0     10 E5 85 F1 | 	sub	objptr, ##34576
1b7f4     F2 FA 01 F6 | 	mov	result1, objptr
1b7f8     00 68 00 FF 
1b7fc     00 FA 45 F5 | 	or	result1, ##13631488
1b800     43 00 00 FF 
1b804     E0 E4 05 F1 | 	add	objptr, ##34528
1b808     F2 FA 61 FC | 	wrlong	result1, objptr
1b80c     43 00 00 FF 
1b810     E0 E4 85 F1 | 	sub	objptr, ##34528
1b814     F2 FA 01 F6 | 	mov	result1, objptr
1b818     00 68 00 FF 
1b81c     00 FA 45 F5 | 	or	result1, ##13631488
1b820     43 00 00 FF 
1b824     E4 E4 05 F1 | 	add	objptr, ##34532
1b828     F2 FA 61 FC | 	wrlong	result1, objptr
1b82c     43 00 00 FF 
1b830     E4 E4 85 F1 | 	sub	objptr, ##34532
1b834     F2 FA 01 F6 | 	mov	result1, objptr
1b838     00 68 00 FF 
1b83c     00 FA 45 F5 | 	or	result1, ##13631488
1b840     43 00 00 FF 
1b844     E8 E4 05 F1 | 	add	objptr, ##34536
1b848     F2 FA 61 FC | 	wrlong	result1, objptr
1b84c     43 00 00 FF 
1b850     E8 E4 85 F1 | 	sub	objptr, ##34536
1b854     F2 FA 01 F6 | 	mov	result1, objptr
1b858     74 FA 25 F4 | 	bith	result1, #116
1b85c     43 00 00 FF 
1b860     60 E5 05 F1 | 	add	objptr, ##34656
1b864     F2 FA 61 FC | 	wrlong	result1, objptr
1b868     43 00 00 FF 
1b86c     60 E5 85 F1 | 	sub	objptr, ##34656
1b870     F2 FA 01 F6 | 	mov	result1, objptr
1b874     18 FA 25 F4 | 	bith	result1, #24
1b878     43 00 00 FF 
1b87c     64 E5 05 F1 | 	add	objptr, ##34660
1b880     F2 FA 61 FC | 	wrlong	result1, objptr
1b884     43 00 00 FF 
1b888     64 E5 85 F1 | 	sub	objptr, ##34660
1b88c     F2 FA 01 F6 | 	mov	result1, objptr
1b890     00 88 00 FF 
1b894     00 FA 45 F5 | 	or	result1, ##17825792
1b898     43 00 00 FF 
1b89c     68 E5 05 F1 | 	add	objptr, ##34664
1b8a0     F2 FA 61 FC | 	wrlong	result1, objptr
1b8a4     43 00 00 FF 
1b8a8     68 E5 85 F1 | 	sub	objptr, ##34664
1b8ac     F2 FA 01 F6 | 	mov	result1, objptr
1b8b0     00 90 00 FF 
1b8b4     00 FA 45 F5 | 	or	result1, ##18874368
1b8b8     43 00 00 FF 
1b8bc     6C E5 05 F1 | 	add	objptr, ##34668
1b8c0     F2 FA 61 FC | 	wrlong	result1, objptr
1b8c4     43 00 00 FF 
1b8c8     6C E5 85 F1 | 	sub	objptr, ##34668
1b8cc     F2 FA 01 F6 | 	mov	result1, objptr
1b8d0     00 98 00 FF 
1b8d4     00 FA 45 F5 | 	or	result1, ##19922944
1b8d8     43 00 00 FF 
1b8dc     70 E5 05 F1 | 	add	objptr, ##34672
1b8e0     F2 FA 61 FC | 	wrlong	result1, objptr
1b8e4     43 00 00 FF 
1b8e8     70 E5 85 F1 | 	sub	objptr, ##34672
1b8ec     F2 FA 01 F6 | 	mov	result1, objptr
1b8f0     00 A0 00 FF 
1b8f4     00 FA 45 F5 | 	or	result1, ##20971520
1b8f8     43 00 00 FF 
1b8fc     74 E5 05 F1 | 	add	objptr, ##34676
1b900     F2 FA 61 FC | 	wrlong	result1, objptr
1b904     43 00 00 FF 
1b908     74 E5 85 F1 | 	sub	objptr, ##34676
1b90c     F2 FA 01 F6 | 	mov	result1, objptr
1b910     00 A8 00 FF 
1b914     00 FA 45 F5 | 	or	result1, ##22020096
1b918     43 00 00 FF 
1b91c     78 E5 05 F1 | 	add	objptr, ##34680
1b920     F2 FA 61 FC | 	wrlong	result1, objptr
1b924     43 00 00 FF 
1b928     78 E5 85 F1 | 	sub	objptr, ##34680
1b92c     F2 FA 01 F6 | 	mov	result1, objptr
1b930     00 B0 00 FF 
1b934     00 FA 45 F5 | 	or	result1, ##23068672
1b938     43 00 00 FF 
1b93c     7C E5 05 F1 | 	add	objptr, ##34684
1b940     F2 FA 61 FC | 	wrlong	result1, objptr
1b944     43 00 00 FF 
1b948     7C E5 85 F1 | 	sub	objptr, ##34684
1b94c     F2 FA 01 F6 | 	mov	result1, objptr
1b950     00 B8 00 FF 
1b954     00 FA 45 F5 | 	or	result1, ##24117248
1b958     43 00 00 FF 
1b95c     80 E5 05 F1 | 	add	objptr, ##34688
1b960     F2 FA 61 FC | 	wrlong	result1, objptr
1b964     43 00 00 FF 
1b968     80 E5 85 F1 | 	sub	objptr, ##34688
1b96c     F2 FA 01 F6 | 	mov	result1, objptr
1b970     37 FA 25 F4 | 	bith	result1, #55
1b974     43 00 00 FF 
1b978     84 E5 05 F1 | 	add	objptr, ##34692
1b97c     F2 FA 61 FC | 	wrlong	result1, objptr
1b980     43 00 00 FF 
1b984     84 E5 85 F1 | 	sub	objptr, ##34692
1b988     F2 FA 01 F6 | 	mov	result1, objptr
1b98c     00 C8 00 FF 
1b990     00 FA 45 F5 | 	or	result1, ##26214400
1b994     43 00 00 FF 
1b998     88 E5 05 F1 | 	add	objptr, ##34696
1b99c     F2 FA 61 FC | 	wrlong	result1, objptr
1b9a0     43 00 00 FF 
1b9a4     88 E5 85 F1 | 	sub	objptr, ##34696
1b9a8     F2 FA 01 F6 | 	mov	result1, objptr
1b9ac     00 D0 00 FF 
1b9b0     00 FA 45 F5 | 	or	result1, ##27262976
1b9b4     43 00 00 FF 
1b9b8     8C E5 05 F1 | 	add	objptr, ##34700
1b9bc     F2 FA 61 FC | 	wrlong	result1, objptr
1b9c0     43 00 00 FF 
1b9c4     8C E5 85 F1 | 	sub	objptr, ##34700
1b9c8     F2 FA 01 F6 | 	mov	result1, objptr
1b9cc     00 D8 00 FF 
1b9d0     00 FA 45 F5 | 	or	result1, ##28311552
1b9d4     43 00 00 FF 
1b9d8     90 E5 05 F1 | 	add	objptr, ##34704
1b9dc     F2 FA 61 FC | 	wrlong	result1, objptr
1b9e0     43 00 00 FF 
1b9e4     90 E5 85 F1 | 	sub	objptr, ##34704
1b9e8     F2 FA 01 F6 | 	mov	result1, objptr
1b9ec     56 FA 25 F4 | 	bith	result1, #86
1b9f0     43 00 00 FF 
1b9f4     94 E5 05 F1 | 	add	objptr, ##34708
1b9f8     F2 FA 61 FC | 	wrlong	result1, objptr
1b9fc     43 00 00 FF 
1ba00     94 E5 85 F1 | 	sub	objptr, ##34708
1ba04     F2 FA 01 F6 | 	mov	result1, objptr
1ba08     00 E8 00 FF 
1ba0c     00 FA 45 F5 | 	or	result1, ##30408704
1ba10     45 00 00 FF 
1ba14     5C E4 05 F1 | 	add	objptr, ##35420
1ba18     F2 FA 61 FC | 	wrlong	result1, objptr
1ba1c     45 00 00 FF 
1ba20     5C E4 85 F1 | 	sub	objptr, ##35420
1ba24     F2 FA 01 F6 | 	mov	result1, objptr
1ba28     75 FA 25 F4 | 	bith	result1, #117
1ba2c     43 00 00 FF 
1ba30     98 E5 05 F1 | 	add	objptr, ##34712
1ba34     F2 FA 61 FC | 	wrlong	result1, objptr
1ba38     43 00 00 FF 
1ba3c     98 E5 85 F1 | 	sub	objptr, ##34712
1ba40     F2 FA 01 F6 | 	mov	result1, objptr
1ba44     94 FA 25 F4 | 	bith	result1, #148
1ba48     43 00 00 FF 
1ba4c     AC E5 05 F1 | 	add	objptr, ##34732
1ba50     F2 FA 61 FC | 	wrlong	result1, objptr
1ba54     43 00 00 FF 
1ba58     AC E5 85 F1 | 	sub	objptr, ##34732
1ba5c     F2 FA 01 F6 | 	mov	result1, objptr
1ba60     19 FA 25 F4 | 	bith	result1, #25
1ba64     43 00 00 FF 
1ba68     9C E5 05 F1 | 	add	objptr, ##34716
1ba6c     F2 FA 61 FC | 	wrlong	result1, objptr
1ba70     43 00 00 FF 
1ba74     9C E5 85 F1 | 	sub	objptr, ##34716
1ba78     F2 FA 01 F6 | 	mov	result1, objptr
1ba7c     00 08 01 FF 
1ba80     00 FA 45 F5 | 	or	result1, ##34603008
1ba84     43 00 00 FF 
1ba88     B8 E4 05 F1 | 	add	objptr, ##34488
1ba8c     F2 FA 61 FC | 	wrlong	result1, objptr
1ba90     43 00 00 FF 
1ba94     B8 E4 85 F1 | 	sub	objptr, ##34488
1ba98     F2 FA 01 F6 | 	mov	result1, objptr
1ba9c     00 10 01 FF 
1baa0     00 FA 45 F5 | 	or	result1, ##35651584
1baa4     43 00 00 FF 
1baa8     A0 E5 05 F1 | 	add	objptr, ##34720
1baac     F2 FA 61 FC | 	wrlong	result1, objptr
1bab0     43 00 00 FF 
1bab4     A0 E5 85 F1 | 	sub	objptr, ##34720
1bab8     F2 FA 01 F6 | 	mov	result1, objptr
1babc     00 18 01 FF 
1bac0     00 FA 45 F5 | 	or	result1, ##36700160
1bac4     43 00 00 FF 
1bac8     A4 E5 05 F1 | 	add	objptr, ##34724
1bacc     F2 FA 61 FC | 	wrlong	result1, objptr
1bad0     43 00 00 FF 
1bad4     A4 E5 85 F1 | 	sub	objptr, ##34724
1bad8     F2 FA 01 F6 | 	mov	result1, objptr
1badc     00 20 01 FF 
1bae0     00 FA 45 F5 | 	or	result1, ##37748736
1bae4     43 00 00 FF 
1bae8     A8 E5 05 F1 | 	add	objptr, ##34728
1baec     F2 FA 61 FC | 	wrlong	result1, objptr
1baf0     43 00 00 FF 
1baf4     A8 E5 85 F1 | 	sub	objptr, ##34728
1baf8     F2 FA 01 F6 | 	mov	result1, objptr
1bafc     00 28 01 FF 
1bb00     00 FA 45 F5 | 	or	result1, ##38797312
1bb04     43 00 00 FF 
1bb08     B4 E5 05 F1 | 	add	objptr, ##34740
1bb0c     F2 FA 61 FC | 	wrlong	result1, objptr
1bb10     43 00 00 FF 
1bb14     B4 E5 85 F1 | 	sub	objptr, ##34740
1bb18     F2 FA 01 F6 | 	mov	result1, objptr
1bb1c     00 30 01 FF 
1bb20     00 FA 45 F5 | 	or	result1, ##39845888
1bb24     43 00 00 FF 
1bb28     B8 E5 05 F1 | 	add	objptr, ##34744
1bb2c     F2 FA 61 FC | 	wrlong	result1, objptr
1bb30     43 00 00 FF 
1bb34     B8 E5 85 F1 | 	sub	objptr, ##34744
1bb38     F2 FA 01 F6 | 	mov	result1, objptr
1bb3c     00 38 01 FF 
1bb40     00 FA 45 F5 | 	or	result1, ##40894464
1bb44     43 00 00 FF 
1bb48     BC E5 05 F1 | 	add	objptr, ##34748
1bb4c     F2 FA 61 FC | 	wrlong	result1, objptr
1bb50     43 00 00 FF 
1bb54     BC E5 85 F1 | 	sub	objptr, ##34748
1bb58     F2 FA 01 F6 | 	mov	result1, objptr
1bb5c     00 40 01 FF 
1bb60     00 FA 45 F5 | 	or	result1, ##41943040
1bb64     43 00 00 FF 
1bb68     C0 E5 05 F1 | 	add	objptr, ##34752
1bb6c     F2 FA 61 FC | 	wrlong	result1, objptr
1bb70     43 00 00 FF 
1bb74     C0 E5 85 F1 | 	sub	objptr, ##34752
1bb78     F2 FA 01 F6 | 	mov	result1, objptr
1bb7c     00 48 01 FF 
1bb80     00 FA 45 F5 | 	or	result1, ##42991616
1bb84     43 00 00 FF 
1bb88     C8 E5 05 F1 | 	add	objptr, ##34760
1bb8c     F2 FA 61 FC | 	wrlong	result1, objptr
1bb90     43 00 00 FF 
1bb94     C8 E5 85 F1 | 	sub	objptr, ##34760
1bb98     F2 FA 01 F6 | 	mov	result1, objptr
1bb9c     00 08 01 FF 
1bba0     00 FA 45 F5 | 	or	result1, ##34603008
1bba4     43 00 00 FF 
1bba8     CC E5 05 F1 | 	add	objptr, ##34764
1bbac     F2 FA 61 FC | 	wrlong	result1, objptr
1bbb0     43 00 00 FF 
1bbb4     CC E5 85 F1 | 	sub	objptr, ##34764
1bbb8     F2 FA 01 F6 | 	mov	result1, objptr
1bbbc     00 50 01 FF 
1bbc0     00 FA 45 F5 | 	or	result1, ##44040192
1bbc4     43 00 00 FF 
1bbc8     CC E4 05 F1 | 	add	objptr, ##34508
1bbcc     F2 FA 61 FC | 	wrlong	result1, objptr
1bbd0     43 00 00 FF 
1bbd4     CC E4 85 F1 | 	sub	objptr, ##34508
1bbd8     F2 FA 01 F6 | 	mov	result1, objptr
1bbdc     00 58 01 FF 
1bbe0     00 FA 45 F5 | 	or	result1, ##45088768
1bbe4     43 00 00 FF 
1bbe8     FC E4 05 F1 | 	add	objptr, ##34556
1bbec     F2 FA 61 FC | 	wrlong	result1, objptr
1bbf0     43 00 00 FF 
1bbf4     FC E4 85 F1 | 	sub	objptr, ##34556
1bbf8     F2 FA 01 F6 | 	mov	result1, objptr
1bbfc     00 60 01 FF 
1bc00     00 FA 45 F5 | 	or	result1, ##46137344
1bc04     43 00 00 FF 
1bc08     F8 E4 05 F1 | 	add	objptr, ##34552
1bc0c     F2 FA 61 FC | 	wrlong	result1, objptr
1bc10     43 00 00 FF 
1bc14     F8 E4 85 F1 | 	sub	objptr, ##34552
1bc18     F2 FA 01 F6 | 	mov	result1, objptr
1bc1c     00 68 01 FF 
1bc20     00 FA 45 F5 | 	or	result1, ##47185920
1bc24     43 00 00 FF 
1bc28     9C E4 05 F1 | 	add	objptr, ##34460
1bc2c     F2 FA 61 FC | 	wrlong	result1, objptr
1bc30     43 00 00 FF 
1bc34     9C E4 85 F1 | 	sub	objptr, ##34460
1bc38     F2 FA 01 F6 | 	mov	result1, objptr
1bc3c     00 70 01 FF 
1bc40     00 FA 45 F5 | 	or	result1, ##48234496
1bc44     43 00 00 FF 
1bc48     A0 E4 05 F1 | 	add	objptr, ##34464
1bc4c     F2 FA 61 FC | 	wrlong	result1, objptr
1bc50     43 00 00 FF 
1bc54     A0 E4 85 F1 | 	sub	objptr, ##34464
1bc58     F2 FA 01 F6 | 	mov	result1, objptr
1bc5c     00 78 01 FF 
1bc60     00 FA 45 F5 | 	or	result1, ##49283072
1bc64     43 00 00 FF 
1bc68     08 E5 05 F1 | 	add	objptr, ##34568
1bc6c     F2 FA 61 FC | 	wrlong	result1, objptr
1bc70     43 00 00 FF 
1bc74     08 E5 85 F1 | 	sub	objptr, ##34568
1bc78     F2 FA 01 F6 | 	mov	result1, objptr
1bc7c     38 FA 25 F4 | 	bith	result1, #56
1bc80     43 00 00 FF 
1bc84     B0 E5 05 F1 | 	add	objptr, ##34736
1bc88     F2 FA 61 FC | 	wrlong	result1, objptr
1bc8c     43 00 00 FF 
1bc90     B0 E5 85 F1 | 	sub	objptr, ##34736
1bc94     F2 FA 01 F6 | 	mov	result1, objptr
1bc98     00 88 01 FF 
1bc9c     00 FA 45 F5 | 	or	result1, ##51380224
1bca0     43 00 00 FF 
1bca4     C4 E5 05 F1 | 	add	objptr, ##34756
1bca8     F2 FA 61 FC | 	wrlong	result1, objptr
1bcac     43 00 00 FF 
1bcb0     C4 E5 85 F1 | 	sub	objptr, ##34756
1bcb4     F2 FA 01 F6 | 	mov	result1, objptr
1bcb8     00 90 01 FF 
1bcbc     00 FA 45 F5 | 	or	result1, ##52428800
1bcc0     43 00 00 FF 
1bcc4     D0 E5 05 F1 | 	add	objptr, ##34768
1bcc8     F2 FA 61 FC | 	wrlong	result1, objptr
1bccc     43 00 00 FF 
1bcd0     D0 E5 85 F1 | 	sub	objptr, ##34768
1bcd4     F2 FA 01 F6 | 	mov	result1, objptr
1bcd8     00 98 01 FF 
1bcdc     00 FA 45 F5 | 	or	result1, ##53477376
1bce0     43 00 00 FF 
1bce4     D4 E5 05 F1 | 	add	objptr, ##34772
1bce8     F2 FA 61 FC | 	wrlong	result1, objptr
1bcec     43 00 00 FF 
1bcf0     D4 E5 85 F1 | 	sub	objptr, ##34772
1bcf4     F2 FA 01 F6 | 	mov	result1, objptr
1bcf8     00 A0 01 FF 
1bcfc     00 FA 45 F5 | 	or	result1, ##54525952
1bd00     43 00 00 FF 
1bd04     D8 E5 05 F1 | 	add	objptr, ##34776
1bd08     F2 FA 61 FC | 	wrlong	result1, objptr
1bd0c     43 00 00 FF 
1bd10     D8 E5 85 F1 | 	sub	objptr, ##34776
1bd14     F2 FA 01 F6 | 	mov	result1, objptr
1bd18     00 A8 01 FF 
1bd1c     00 FA 45 F5 | 	or	result1, ##55574528
1bd20     43 00 00 FF 
1bd24     DC E5 05 F1 | 	add	objptr, ##34780
1bd28     F2 FA 61 FC | 	wrlong	result1, objptr
1bd2c     43 00 00 FF 
1bd30     DC E5 85 F1 | 	sub	objptr, ##34780
1bd34     F2 FA 01 F6 | 	mov	result1, objptr
1bd38     00 B0 01 FF 
1bd3c     00 FA 45 F5 | 	or	result1, ##56623104
1bd40     43 00 00 FF 
1bd44     E0 E5 05 F1 | 	add	objptr, ##34784
1bd48     F2 FA 61 FC | 	wrlong	result1, objptr
1bd4c     43 00 00 FF 
1bd50     E0 E5 85 F1 | 	sub	objptr, ##34784
1bd54     F2 FA 01 F6 | 	mov	result1, objptr
1bd58     00 B8 01 FF 
1bd5c     00 FA 45 F5 | 	or	result1, ##57671680
1bd60     43 00 00 FF 
1bd64     E4 E5 05 F1 | 	add	objptr, ##34788
1bd68     F2 FA 61 FC | 	wrlong	result1, objptr
1bd6c     43 00 00 FF 
1bd70     E4 E5 85 F1 | 	sub	objptr, ##34788
1bd74     F2 FA 01 F6 | 	mov	result1, objptr
1bd78     94 FA 25 F4 | 	bith	result1, #148
1bd7c     43 00 00 FF 
1bd80     AC E5 05 F1 | 	add	objptr, ##34732
1bd84     F2 FA 61 FC | 	wrlong	result1, objptr
1bd88     43 00 00 FF 
1bd8c     AC E5 85 F1 | 	sub	objptr, ##34732
1bd90     F2 FA 01 F6 | 	mov	result1, objptr
1bd94     57 FA 25 F4 | 	bith	result1, #87
1bd98     43 00 00 FF 
1bd9c     EC E5 05 F1 | 	add	objptr, ##34796
1bda0     F2 FA 61 FC | 	wrlong	result1, objptr
1bda4     43 00 00 FF 
1bda8     EC E5 85 F1 | 	sub	objptr, ##34796
1bdac     F2 FA 01 F6 | 	mov	result1, objptr
1bdb0     00 C8 01 FF 
1bdb4     00 FA 45 F5 | 	or	result1, ##59768832
1bdb8     43 00 00 FF 
1bdbc     E8 E5 05 F1 | 	add	objptr, ##34792
1bdc0     F2 FA 61 FC | 	wrlong	result1, objptr
1bdc4     43 00 00 FF 
1bdc8     E8 E5 85 F1 | 	sub	objptr, ##34792
1bdcc     F2 FA 01 F6 | 	mov	result1, objptr
1bdd0     00 D0 01 FF 
1bdd4     00 FA 45 F5 | 	or	result1, ##60817408
1bdd8     44 00 00 FF 
1bddc     00 E4 05 F1 | 	add	objptr, ##34816
1bde0     F2 FA 61 FC | 	wrlong	result1, objptr
1bde4     44 00 00 FF 
1bde8     00 E4 85 F1 | 	sub	objptr, ##34816
1bdec     F2 FA 01 F6 | 	mov	result1, objptr
1bdf0     00 D8 01 FF 
1bdf4     00 FA 45 F5 | 	or	result1, ##61865984
1bdf8     44 00 00 FF 
1bdfc     04 E4 05 F1 | 	add	objptr, ##34820
1be00     F2 FA 61 FC | 	wrlong	result1, objptr
1be04     44 00 00 FF 
1be08     04 E4 85 F1 | 	sub	objptr, ##34820
1be0c     F2 FA 01 F6 | 	mov	result1, objptr
1be10     76 FA 25 F4 | 	bith	result1, #118
1be14     43 00 00 FF 
1be18     F0 E5 05 F1 | 	add	objptr, ##34800
1be1c     F2 FA 61 FC | 	wrlong	result1, objptr
1be20     43 00 00 FF 
1be24     F0 E5 85 F1 | 	sub	objptr, ##34800
1be28     F2 FA 01 F6 | 	mov	result1, objptr
1be2c     00 E8 01 FF 
1be30     00 FA 45 F5 | 	or	result1, ##63963136
1be34     43 00 00 FF 
1be38     F4 E5 05 F1 | 	add	objptr, ##34804
1be3c     F2 FA 61 FC | 	wrlong	result1, objptr
1be40     43 00 00 FF 
1be44     F4 E5 85 F1 | 	sub	objptr, ##34804
1be48     F2 FA 01 F6 | 	mov	result1, objptr
1be4c     95 FA 25 F4 | 	bith	result1, #149
1be50     43 00 00 FF 
1be54     F8 E5 05 F1 | 	add	objptr, ##34808
1be58     F2 FA 61 FC | 	wrlong	result1, objptr
1be5c     43 00 00 FF 
1be60     F8 E5 85 F1 | 	sub	objptr, ##34808
1be64     F2 FA 01 F6 | 	mov	result1, objptr
1be68     B4 FA 25 F4 | 	bith	result1, #180
1be6c     43 00 00 FF 
1be70     FC E5 05 F1 | 	add	objptr, ##34812
1be74     F2 FA 61 FC | 	wrlong	result1, objptr
1be78     43 00 00 FF 
1be7c     FC E5 85 F1 | 	sub	objptr, ##34812
1be80     F2 FA 01 F6 | 	mov	result1, objptr
1be84     1A FA 25 F4 | 	bith	result1, #26
1be88     44 00 00 FF 
1be8c     0C E4 05 F1 | 	add	objptr, ##34828
1be90     F2 FA 61 FC | 	wrlong	result1, objptr
1be94     44 00 00 FF 
1be98     0C E4 85 F1 | 	sub	objptr, ##34828
1be9c     F2 FA 01 F6 | 	mov	result1, objptr
1bea0     00 08 02 FF 
1bea4     00 FA 45 F5 | 	or	result1, ##68157440
1bea8     44 00 00 FF 
1beac     08 E4 05 F1 | 	add	objptr, ##34824
1beb0     F2 FA 61 FC | 	wrlong	result1, objptr
1beb4     44 00 00 FF 
1beb8     08 E4 85 F1 | 	sub	objptr, ##34824
1bebc     F2 FA 01 F6 | 	mov	result1, objptr
1bec0     00 10 02 FF 
1bec4     00 FA 45 F5 | 	or	result1, ##69206016
1bec8     44 00 00 FF 
1becc     18 E4 05 F1 | 	add	objptr, ##34840
1bed0     F2 FA 61 FC | 	wrlong	result1, objptr
1bed4     44 00 00 FF 
1bed8     18 E4 85 F1 | 	sub	objptr, ##34840
1bedc     F2 FA 01 F6 | 	mov	result1, objptr
1bee0     00 18 02 FF 
1bee4     00 FA 45 F5 | 	or	result1, ##70254592
1bee8     44 00 00 FF 
1beec     14 E4 05 F1 | 	add	objptr, ##34836
1bef0     F2 FA 61 FC | 	wrlong	result1, objptr
1bef4     44 00 00 FF 
1bef8     14 E4 85 F1 | 	sub	objptr, ##34836
1befc     F2 FA 01 F6 | 	mov	result1, objptr
1bf00     00 20 02 FF 
1bf04     00 FA 45 F5 | 	or	result1, ##71303168
1bf08     44 00 00 FF 
1bf0c     10 E4 05 F1 | 	add	objptr, ##34832
1bf10     F2 FA 61 FC | 	wrlong	result1, objptr
1bf14     44 00 00 FF 
1bf18     10 E4 85 F1 | 	sub	objptr, ##34832
1bf1c     F2 FA 01 F6 | 	mov	result1, objptr
1bf20     00 28 02 FF 
1bf24     00 FA 45 F5 | 	or	result1, ##72351744
1bf28     44 00 00 FF 
1bf2c     1C E4 05 F1 | 	add	objptr, ##34844
1bf30     F2 FA 61 FC | 	wrlong	result1, objptr
1bf34     44 00 00 FF 
1bf38     1C E4 85 F1 | 	sub	objptr, ##34844
1bf3c     F2 FA 01 F6 | 	mov	result1, objptr
1bf40     00 30 02 FF 
1bf44     00 FA 45 F5 | 	or	result1, ##73400320
1bf48     44 00 00 FF 
1bf4c     20 E4 05 F1 | 	add	objptr, ##34848
1bf50     F2 FA 61 FC | 	wrlong	result1, objptr
1bf54     44 00 00 FF 
1bf58     20 E4 85 F1 | 	sub	objptr, ##34848
1bf5c     F2 FA 01 F6 | 	mov	result1, objptr
1bf60     00 38 02 FF 
1bf64     00 FA 45 F5 | 	or	result1, ##74448896
1bf68     43 00 00 FF 
1bf6c     B4 E4 05 F1 | 	add	objptr, ##34484
1bf70     F2 FA 61 FC | 	wrlong	result1, objptr
1bf74     43 00 00 FF 
1bf78     B4 E4 85 F1 | 	sub	objptr, ##34484
1bf7c     F2 FA 01 F6 | 	mov	result1, objptr
1bf80     00 40 02 FF 
1bf84     00 FA 45 F5 | 	or	result1, ##75497472
1bf88     44 00 00 FF 
1bf8c     38 E4 05 F1 | 	add	objptr, ##34872
1bf90     F2 FA 61 FC | 	wrlong	result1, objptr
1bf94     44 00 00 FF 
1bf98     38 E4 85 F1 | 	sub	objptr, ##34872
1bf9c     F2 FA 01 F6 | 	mov	result1, objptr
1bfa0     00 48 02 FF 
1bfa4     00 FA 45 F5 | 	or	result1, ##76546048
1bfa8     44 00 00 FF 
1bfac     48 E4 05 F1 | 	add	objptr, ##34888
1bfb0     F2 FA 61 FC | 	wrlong	result1, objptr
1bfb4     44 00 00 FF 
1bfb8     48 E4 85 F1 | 	sub	objptr, ##34888
1bfbc     F2 FA 01 F6 | 	mov	result1, objptr
1bfc0     00 50 02 FF 
1bfc4     00 FA 45 F5 | 	or	result1, ##77594624
1bfc8     44 00 00 FF 
1bfcc     4C E4 05 F1 | 	add	objptr, ##34892
1bfd0     F2 FA 61 FC | 	wrlong	result1, objptr
1bfd4     44 00 00 FF 
1bfd8     4C E4 85 F1 | 	sub	objptr, ##34892
1bfdc     F2 FA 01 F6 | 	mov	result1, objptr
1bfe0     00 58 02 FF 
1bfe4     00 FA 45 F5 | 	or	result1, ##78643200
1bfe8     44 00 00 FF 
1bfec     44 E4 05 F1 | 	add	objptr, ##34884
1bff0     F2 FA 61 FC | 	wrlong	result1, objptr
1bff4     44 00 00 FF 
1bff8     44 E4 85 F1 | 	sub	objptr, ##34884
1bffc     F2 FA 01 F6 | 	mov	result1, objptr
1c000     00 60 02 FF 
1c004     00 FA 45 F5 | 	or	result1, ##79691776
1c008     44 00 00 FF 
1c00c     3C E4 05 F1 | 	add	objptr, ##34876
1c010     F2 FA 61 FC | 	wrlong	result1, objptr
1c014     44 00 00 FF 
1c018     3C E4 85 F1 | 	sub	objptr, ##34876
1c01c     F2 FA 01 F6 | 	mov	result1, objptr
1c020     00 68 02 FF 
1c024     00 FA 45 F5 | 	or	result1, ##80740352
1c028     44 00 00 FF 
1c02c     40 E4 05 F1 | 	add	objptr, ##34880
1c030     F2 FA 61 FC | 	wrlong	result1, objptr
1c034     44 00 00 FF 
1c038     40 E4 85 F1 | 	sub	objptr, ##34880
1c03c     F2 FA 01 F6 | 	mov	result1, objptr
1c040     00 70 02 FF 
1c044     00 FA 45 F5 | 	or	result1, ##81788928
1c048     44 00 00 FF 
1c04c     50 E4 05 F1 | 	add	objptr, ##34896
1c050     F2 FA 61 FC | 	wrlong	result1, objptr
1c054     44 00 00 FF 
1c058     50 E4 85 F1 | 	sub	objptr, ##34896
1c05c     F2 FA 01 F6 | 	mov	result1, objptr
1c060     00 78 02 FF 
1c064     00 FA 45 F5 | 	or	result1, ##82837504
1c068     44 00 00 FF 
1c06c     54 E4 05 F1 | 	add	objptr, ##34900
1c070     F2 FA 61 FC | 	wrlong	result1, objptr
1c074     44 00 00 FF 
1c078     54 E4 85 F1 | 	sub	objptr, ##34900
1c07c     F2 FA 01 F6 | 	mov	result1, objptr
1c080     00 80 02 FF 
1c084     00 FA 45 F5 | 	or	result1, ##83886080
1c088     44 00 00 FF 
1c08c     58 E4 05 F1 | 	add	objptr, ##34904
1c090     F2 FA 61 FC | 	wrlong	result1, objptr
1c094     44 00 00 FF 
1c098     58 E4 85 F1 | 	sub	objptr, ##34904
1c09c     F2 FA 01 F6 | 	mov	result1, objptr
1c0a0     00 88 02 FF 
1c0a4     00 FA 45 F5 | 	or	result1, ##84934656
1c0a8     44 00 00 FF 
1c0ac     5C E4 05 F1 | 	add	objptr, ##34908
1c0b0     F2 FA 61 FC | 	wrlong	result1, objptr
1c0b4     44 00 00 FF 
1c0b8     5C E4 85 F1 | 	sub	objptr, ##34908
1c0bc     F2 FA 01 F6 | 	mov	result1, objptr
1c0c0     00 90 02 FF 
1c0c4     00 FA 45 F5 | 	or	result1, ##85983232
1c0c8     44 00 00 FF 
1c0cc     60 E4 05 F1 | 	add	objptr, ##34912
1c0d0     F2 FA 61 FC | 	wrlong	result1, objptr
1c0d4     44 00 00 FF 
1c0d8     60 E4 85 F1 | 	sub	objptr, ##34912
1c0dc     F2 FA 01 F6 | 	mov	result1, objptr
1c0e0     00 98 02 FF 
1c0e4     00 FA 45 F5 | 	or	result1, ##87031808
1c0e8     44 00 00 FF 
1c0ec     64 E4 05 F1 | 	add	objptr, ##34916
1c0f0     F2 FA 61 FC | 	wrlong	result1, objptr
1c0f4     44 00 00 FF 
1c0f8     64 E4 85 F1 | 	sub	objptr, ##34916
1c0fc     F2 FA 01 F6 | 	mov	result1, objptr
1c100     00 A0 02 FF 
1c104     00 FA 45 F5 | 	or	result1, ##88080384
1c108     44 00 00 FF 
1c10c     68 E4 05 F1 | 	add	objptr, ##34920
1c110     F2 FA 61 FC | 	wrlong	result1, objptr
1c114     44 00 00 FF 
1c118     68 E4 85 F1 | 	sub	objptr, ##34920
1c11c     F2 FA 01 F6 | 	mov	result1, objptr
1c120     00 A8 02 FF 
1c124     00 FA 45 F5 | 	or	result1, ##89128960
1c128     44 00 00 FF 
1c12c     6C E4 05 F1 | 	add	objptr, ##34924
1c130     F2 FA 61 FC | 	wrlong	result1, objptr
1c134     44 00 00 FF 
1c138     6C E4 85 F1 | 	sub	objptr, ##34924
1c13c     F2 FA 01 F6 | 	mov	result1, objptr
1c140     00 B0 02 FF 
1c144     00 FA 45 F5 | 	or	result1, ##90177536
1c148     44 00 00 FF 
1c14c     78 E4 05 F1 | 	add	objptr, ##34936
1c150     F2 FA 61 FC | 	wrlong	result1, objptr
1c154     44 00 00 FF 
1c158     78 E4 85 F1 | 	sub	objptr, ##34936
1c15c     F2 FA 01 F6 | 	mov	result1, objptr
1c160     00 B8 02 FF 
1c164     00 FA 45 F5 | 	or	result1, ##91226112
1c168     44 00 00 FF 
1c16c     70 E4 05 F1 | 	add	objptr, ##34928
1c170     F2 FA 61 FC | 	wrlong	result1, objptr
1c174     44 00 00 FF 
1c178     70 E4 85 F1 | 	sub	objptr, ##34928
1c17c     F2 FA 01 F6 | 	mov	result1, objptr
1c180     00 C0 02 FF 
1c184     00 FA 45 F5 | 	or	result1, ##92274688
1c188     44 00 00 FF 
1c18c     74 E4 05 F1 | 	add	objptr, ##34932
1c190     F2 FA 61 FC | 	wrlong	result1, objptr
1c194     44 00 00 FF 
1c198     74 E4 85 F1 | 	sub	objptr, ##34932
1c19c     F2 FA 01 F6 | 	mov	result1, objptr
1c1a0     00 C8 02 FF 
1c1a4     00 FA 45 F5 | 	or	result1, ##93323264
1c1a8     44 00 00 FF 
1c1ac     7C E4 05 F1 | 	add	objptr, ##34940
1c1b0     F2 FA 61 FC | 	wrlong	result1, objptr
1c1b4     44 00 00 FF 
1c1b8     7C E4 85 F1 | 	sub	objptr, ##34940
1c1bc     F2 FA 01 F6 | 	mov	result1, objptr
1c1c0     00 D0 02 FF 
1c1c4     00 FA 45 F5 | 	or	result1, ##94371840
1c1c8     44 00 00 FF 
1c1cc     24 E4 05 F1 | 	add	objptr, ##34852
1c1d0     F2 FA 61 FC | 	wrlong	result1, objptr
1c1d4     44 00 00 FF 
1c1d8     24 E4 85 F1 | 	sub	objptr, ##34852
1c1dc     F2 FA 01 F6 | 	mov	result1, objptr
1c1e0     00 D8 02 FF 
1c1e4     00 FA 45 F5 | 	or	result1, ##95420416
1c1e8     44 00 00 FF 
1c1ec     2C E4 05 F1 | 	add	objptr, ##34860
1c1f0     F2 FA 61 FC | 	wrlong	result1, objptr
1c1f4     44 00 00 FF 
1c1f8     2C E4 85 F1 | 	sub	objptr, ##34860
1c1fc     F2 FA 01 F6 | 	mov	result1, objptr
1c200     00 E0 02 FF 
1c204     00 FA 45 F5 | 	or	result1, ##96468992
1c208     44 00 00 FF 
1c20c     30 E4 05 F1 | 	add	objptr, ##34864
1c210     F2 FA 61 FC | 	wrlong	result1, objptr
1c214     44 00 00 FF 
1c218     30 E4 85 F1 | 	sub	objptr, ##34864
1c21c     F2 FA 01 F6 | 	mov	result1, objptr
1c220     00 E8 02 FF 
1c224     00 FA 45 F5 | 	or	result1, ##97517568
1c228     44 00 00 FF 
1c22c     80 E4 05 F1 | 	add	objptr, ##34944
1c230     F2 FA 61 FC | 	wrlong	result1, objptr
1c234     44 00 00 FF 
1c238     80 E4 85 F1 | 	sub	objptr, ##34944
1c23c     F2 FA 01 F6 | 	mov	result1, objptr
1c240     00 F0 02 FF 
1c244     00 FA 45 F5 | 	or	result1, ##98566144
1c248     44 00 00 FF 
1c24c     84 E4 05 F1 | 	add	objptr, ##34948
1c250     F2 FA 61 FC | 	wrlong	result1, objptr
1c254     44 00 00 FF 
1c258     84 E4 85 F1 | 	sub	objptr, ##34948
1c25c     F2 FA 01 F6 | 	mov	result1, objptr
1c260     00 F8 02 FF 
1c264     00 FA 45 F5 | 	or	result1, ##99614720
1c268     44 00 00 FF 
1c26c     88 E4 05 F1 | 	add	objptr, ##34952
1c270     F2 FA 61 FC | 	wrlong	result1, objptr
1c274     44 00 00 FF 
1c278     88 E4 85 F1 | 	sub	objptr, ##34952
1c27c     F2 FA 01 F6 | 	mov	result1, objptr
1c280     39 FA 25 F4 | 	bith	result1, #57
1c284     44 00 00 FF 
1c288     34 E4 05 F1 | 	add	objptr, ##34868
1c28c     F2 FA 61 FC | 	wrlong	result1, objptr
1c290     44 00 00 FF 
1c294     34 E4 85 F1 | 	sub	objptr, ##34868
1c298     F2 FA 01 F6 | 	mov	result1, objptr
1c29c     00 08 03 FF 
1c2a0     00 FA 45 F5 | 	or	result1, ##101711872
1c2a4     44 00 00 FF 
1c2a8     98 E4 05 F1 | 	add	objptr, ##34968
1c2ac     F2 FA 61 FC | 	wrlong	result1, objptr
1c2b0     44 00 00 FF 
1c2b4     98 E4 85 F1 | 	sub	objptr, ##34968
1c2b8     F2 FA 01 F6 | 	mov	result1, objptr
1c2bc     00 10 03 FF 
1c2c0     00 FA 45 F5 | 	or	result1, ##102760448
1c2c4     44 00 00 FF 
1c2c8     A0 E4 05 F1 | 	add	objptr, ##34976
1c2cc     F2 FA 61 FC | 	wrlong	result1, objptr
1c2d0     44 00 00 FF 
1c2d4     A0 E4 85 F1 | 	sub	objptr, ##34976
1c2d8     F2 FA 01 F6 | 	mov	result1, objptr
1c2dc     00 18 03 FF 
1c2e0     00 FA 45 F5 | 	or	result1, ##103809024
1c2e4     44 00 00 FF 
1c2e8     94 E4 05 F1 | 	add	objptr, ##34964
1c2ec     F2 FA 61 FC | 	wrlong	result1, objptr
1c2f0     44 00 00 FF 
1c2f4     94 E4 85 F1 | 	sub	objptr, ##34964
1c2f8     F2 FA 01 F6 | 	mov	result1, objptr
1c2fc     00 20 03 FF 
1c300     00 FA 45 F5 | 	or	result1, ##104857600
1c304     44 00 00 FF 
1c308     90 E4 05 F1 | 	add	objptr, ##34960
1c30c     F2 FA 61 FC | 	wrlong	result1, objptr
1c310     44 00 00 FF 
1c314     90 E4 85 F1 | 	sub	objptr, ##34960
1c318     F2 FA 01 F6 | 	mov	result1, objptr
1c31c     00 28 03 FF 
1c320     00 FA 45 F5 | 	or	result1, ##105906176
1c324     44 00 00 FF 
1c328     8C E4 05 F1 | 	add	objptr, ##34956
1c32c     F2 FA 61 FC | 	wrlong	result1, objptr
1c330     44 00 00 FF 
1c334     8C E4 85 F1 | 	sub	objptr, ##34956
1c338     F2 FA 01 F6 | 	mov	result1, objptr
1c33c     00 30 03 FF 
1c340     00 FA 45 F5 | 	or	result1, ##106954752
1c344     44 00 00 FF 
1c348     9C E4 05 F1 | 	add	objptr, ##34972
1c34c     F2 FA 61 FC | 	wrlong	result1, objptr
1c350     44 00 00 FF 
1c354     9C E4 85 F1 | 	sub	objptr, ##34972
1c358     F2 FA 01 F6 | 	mov	result1, objptr
1c35c     00 38 03 FF 
1c360     00 FA 45 F5 | 	or	result1, ##108003328
1c364     44 00 00 FF 
1c368     A4 E4 05 F1 | 	add	objptr, ##34980
1c36c     F2 FA 61 FC | 	wrlong	result1, objptr
1c370     44 00 00 FF 
1c374     A4 E4 85 F1 | 	sub	objptr, ##34980
1c378     F2 FA 01 F6 | 	mov	result1, objptr
1c37c     00 40 03 FF 
1c380     00 FA 45 F5 | 	or	result1, ##109051904
1c384     44 00 00 FF 
1c388     A8 E4 05 F1 | 	add	objptr, ##34984
1c38c     F2 FA 61 FC | 	wrlong	result1, objptr
1c390     44 00 00 FF 
1c394     A8 E4 85 F1 | 	sub	objptr, ##34984
1c398     F2 FA 01 F6 | 	mov	result1, objptr
1c39c     00 48 03 FF 
1c3a0     00 FA 45 F5 | 	or	result1, ##110100480
1c3a4     44 00 00 FF 
1c3a8     AC E4 05 F1 | 	add	objptr, ##34988
1c3ac     F2 FA 61 FC | 	wrlong	result1, objptr
1c3b0     44 00 00 FF 
1c3b4     AC E4 85 F1 | 	sub	objptr, ##34988
1c3b8     F2 FA 01 F6 | 	mov	result1, objptr
1c3bc     00 50 03 FF 
1c3c0     00 FA 45 F5 | 	or	result1, ##111149056
1c3c4     44 00 00 FF 
1c3c8     B4 E4 05 F1 | 	add	objptr, ##34996
1c3cc     F2 FA 61 FC | 	wrlong	result1, objptr
1c3d0     44 00 00 FF 
1c3d4     B4 E4 85 F1 | 	sub	objptr, ##34996
1c3d8     F2 FA 01 F6 | 	mov	result1, objptr
1c3dc     00 58 03 FF 
1c3e0     00 FA 45 F5 | 	or	result1, ##112197632
1c3e4     44 00 00 FF 
1c3e8     B8 E4 05 F1 | 	add	objptr, ##35000
1c3ec     F2 FA 61 FC | 	wrlong	result1, objptr
1c3f0     44 00 00 FF 
1c3f4     B8 E4 85 F1 | 	sub	objptr, ##35000
1c3f8     F2 FA 01 F6 | 	mov	result1, objptr
1c3fc     00 60 03 FF 
1c400     00 FA 45 F5 | 	or	result1, ##113246208
1c404     44 00 00 FF 
1c408     BC E4 05 F1 | 	add	objptr, ##35004
1c40c     F2 FA 61 FC | 	wrlong	result1, objptr
1c410     44 00 00 FF 
1c414     BC E4 85 F1 | 	sub	objptr, ##35004
1c418     F2 FA 01 F6 | 	mov	result1, objptr
1c41c     00 68 03 FF 
1c420     00 FA 45 F5 | 	or	result1, ##114294784
1c424     44 00 00 FF 
1c428     C0 E4 05 F1 | 	add	objptr, ##35008
1c42c     F2 FA 61 FC | 	wrlong	result1, objptr
1c430     44 00 00 FF 
1c434     C0 E4 85 F1 | 	sub	objptr, ##35008
1c438     F2 FA 01 F6 | 	mov	result1, objptr
1c43c     00 70 03 FF 
1c440     00 FA 45 F5 | 	or	result1, ##115343360
1c444     44 00 00 FF 
1c448     C4 E4 05 F1 | 	add	objptr, ##35012
1c44c     F2 FA 61 FC | 	wrlong	result1, objptr
1c450     44 00 00 FF 
1c454     C4 E4 85 F1 | 	sub	objptr, ##35012
1c458     F2 FA 01 F6 | 	mov	result1, objptr
1c45c     00 78 03 FF 
1c460     00 FA 45 F5 | 	or	result1, ##116391936
1c464     44 00 00 FF 
1c468     C8 E4 05 F1 | 	add	objptr, ##35016
1c46c     F2 FA 61 FC | 	wrlong	result1, objptr
1c470     44 00 00 FF 
1c474     C8 E4 85 F1 | 	sub	objptr, ##35016
1c478     F2 FA 01 F6 | 	mov	result1, objptr
1c47c     58 FA 25 F4 | 	bith	result1, #88
1c480     44 00 00 FF 
1c484     CC E4 05 F1 | 	add	objptr, ##35020
1c488     F2 FA 61 FC | 	wrlong	result1, objptr
1c48c     44 00 00 FF 
1c490     CC E4 85 F1 | 	sub	objptr, ##35020
1c494     F2 FA 01 F6 | 	mov	result1, objptr
1c498     00 88 03 FF 
1c49c     00 FA 45 F5 | 	or	result1, ##118489088
1c4a0     44 00 00 FF 
1c4a4     D0 E4 05 F1 | 	add	objptr, ##35024
1c4a8     F2 FA 61 FC | 	wrlong	result1, objptr
1c4ac     44 00 00 FF 
1c4b0     D0 E4 85 F1 | 	sub	objptr, ##35024
1c4b4     F2 FA 01 F6 | 	mov	result1, objptr
1c4b8     00 90 03 FF 
1c4bc     00 FA 45 F5 | 	or	result1, ##119537664
1c4c0     44 00 00 FF 
1c4c4     B0 E4 05 F1 | 	add	objptr, ##34992
1c4c8     F2 FA 61 FC | 	wrlong	result1, objptr
1c4cc     44 00 00 FF 
1c4d0     B0 E4 85 F1 | 	sub	objptr, ##34992
1c4d4     F2 FA 01 F6 | 	mov	result1, objptr
1c4d8     00 98 03 FF 
1c4dc     00 FA 45 F5 | 	or	result1, ##120586240
1c4e0     43 00 00 FF 
1c4e4     A8 E4 05 F1 | 	add	objptr, ##34472
1c4e8     F2 FA 61 FC | 	wrlong	result1, objptr
1c4ec     43 00 00 FF 
1c4f0     A8 E4 85 F1 | 	sub	objptr, ##34472
1c4f4     F2 FA 01 F6 | 	mov	result1, objptr
1c4f8     00 A0 03 FF 
1c4fc     00 FA 45 F5 | 	or	result1, ##121634816
1c500     44 00 00 FF 
1c504     D4 E4 05 F1 | 	add	objptr, ##35028
1c508     F2 FA 61 FC | 	wrlong	result1, objptr
1c50c     44 00 00 FF 
1c510     D4 E4 85 F1 | 	sub	objptr, ##35028
1c514     F2 FA 01 F6 | 	mov	result1, objptr
1c518     00 A8 03 FF 
1c51c     00 FA 45 F5 | 	or	result1, ##122683392
1c520     44 00 00 FF 
1c524     D8 E4 05 F1 | 	add	objptr, ##35032
1c528     F2 FA 61 FC | 	wrlong	result1, objptr
1c52c     44 00 00 FF 
1c530     D8 E4 85 F1 | 	sub	objptr, ##35032
1c534     F2 FA 01 F6 | 	mov	result1, objptr
1c538     00 B0 03 FF 
1c53c     00 FA 45 F5 | 	or	result1, ##123731968
1c540     44 00 00 FF 
1c544     EC E4 05 F1 | 	add	objptr, ##35052
1c548     F2 FA 61 FC | 	wrlong	result1, objptr
1c54c     44 00 00 FF 
1c550     EC E4 85 F1 | 	sub	objptr, ##35052
1c554     F2 FA 01 F6 | 	mov	result1, objptr
1c558     00 B8 03 FF 
1c55c     00 FA 45 F5 | 	or	result1, ##124780544
1c560     44 00 00 FF 
1c564     E8 E4 05 F1 | 	add	objptr, ##35048
1c568     F2 FA 61 FC | 	wrlong	result1, objptr
1c56c     44 00 00 FF 
1c570     E8 E4 85 F1 | 	sub	objptr, ##35048
1c574     F2 FA 01 F6 | 	mov	result1, objptr
1c578     77 FA 25 F4 | 	bith	result1, #119
1c57c     44 00 00 FF 
1c580     E0 E4 05 F1 | 	add	objptr, ##35040
1c584     F2 FA 61 FC | 	wrlong	result1, objptr
1c588     44 00 00 FF 
1c58c     E0 E4 85 F1 | 	sub	objptr, ##35040
1c590     F2 FA 01 F6 | 	mov	result1, objptr
1c594     00 C8 03 FF 
1c598     00 FA 45 F5 | 	or	result1, ##126877696
1c59c     44 00 00 FF 
1c5a0     DC E4 05 F1 | 	add	objptr, ##35036
1c5a4     F2 FA 61 FC | 	wrlong	result1, objptr
1c5a8     44 00 00 FF 
1c5ac     DC E4 85 F1 | 	sub	objptr, ##35036
1c5b0     F2 FA 01 F6 | 	mov	result1, objptr
1c5b4     00 D0 03 FF 
1c5b8     00 FA 45 F5 | 	or	result1, ##127926272
1c5bc     44 00 00 FF 
1c5c0     FC E4 05 F1 | 	add	objptr, ##35068
1c5c4     F2 FA 61 FC | 	wrlong	result1, objptr
1c5c8     44 00 00 FF 
1c5cc     FC E4 85 F1 | 	sub	objptr, ##35068
1c5d0     F2 FA 01 F6 | 	mov	result1, objptr
1c5d4     00 D8 03 FF 
1c5d8     00 FA 45 F5 | 	or	result1, ##128974848
1c5dc     44 00 00 FF 
1c5e0     F0 E4 05 F1 | 	add	objptr, ##35056
1c5e4     F2 FA 61 FC | 	wrlong	result1, objptr
1c5e8     44 00 00 FF 
1c5ec     F0 E4 85 F1 | 	sub	objptr, ##35056
1c5f0     F2 FA 01 F6 | 	mov	result1, objptr
1c5f4     96 FA 25 F4 | 	bith	result1, #150
1c5f8     44 00 00 FF 
1c5fc     F4 E4 05 F1 | 	add	objptr, ##35060
1c600     F2 FA 61 FC | 	wrlong	result1, objptr
1c604     44 00 00 FF 
1c608     F4 E4 85 F1 | 	sub	objptr, ##35060
1c60c     F2 FA 01 F6 | 	mov	result1, objptr
1c610     00 E8 03 FF 
1c614     00 FA 45 F5 | 	or	result1, ##131072000
1c618     44 00 00 FF 
1c61c     F8 E4 05 F1 | 	add	objptr, ##35064
1c620     F2 FA 61 FC | 	wrlong	result1, objptr
1c624     44 00 00 FF 
1c628     F8 E4 85 F1 | 	sub	objptr, ##35064
1c62c     F2 FA 01 F6 | 	mov	result1, objptr
1c630     B5 FA 25 F4 | 	bith	result1, #181
1c634     44 00 00 FF 
1c638     00 E5 05 F1 | 	add	objptr, ##35072
1c63c     F2 FA 61 FC | 	wrlong	result1, objptr
1c640     44 00 00 FF 
1c644     00 E5 85 F1 | 	sub	objptr, ##35072
1c648     F2 FA 01 F6 | 	mov	result1, objptr
1c64c     D4 FA 25 F4 | 	bith	result1, #212
1c650     44 00 00 FF 
1c654     04 E5 05 F1 | 	add	objptr, ##35076
1c658     F2 FA 61 FC | 	wrlong	result1, objptr
1c65c     44 00 00 FF 
1c660     04 E5 85 F1 | 	sub	objptr, ##35076
1c664     F2 FA 01 F6 | 	mov	result1, objptr
1c668     1B FA 25 F4 | 	bith	result1, #27
1c66c     44 00 00 FF 
1c670     08 E5 05 F1 | 	add	objptr, ##35080
1c674     F2 FA 61 FC | 	wrlong	result1, objptr
1c678     44 00 00 FF 
1c67c     08 E5 85 F1 | 	sub	objptr, ##35080
1c680     F2 FA 01 F6 | 	mov	result1, objptr
1c684     00 08 04 FF 
1c688     00 FA 45 F5 | 	or	result1, ##135266304
1c68c     44 00 00 FF 
1c690     0C E5 05 F1 | 	add	objptr, ##35084
1c694     F2 FA 61 FC | 	wrlong	result1, objptr
1c698     44 00 00 FF 
1c69c     0C E5 85 F1 | 	sub	objptr, ##35084
1c6a0     F2 FA 01 F6 | 	mov	result1, objptr
1c6a4     00 10 04 FF 
1c6a8     00 FA 45 F5 | 	or	result1, ##136314880
1c6ac     44 00 00 FF 
1c6b0     10 E5 05 F1 | 	add	objptr, ##35088
1c6b4     F2 FA 61 FC | 	wrlong	result1, objptr
1c6b8     44 00 00 FF 
1c6bc     10 E5 85 F1 | 	sub	objptr, ##35088
1c6c0     F2 FA 01 F6 | 	mov	result1, objptr
1c6c4     00 18 04 FF 
1c6c8     00 FA 45 F5 | 	or	result1, ##137363456
1c6cc     44 00 00 FF 
1c6d0     14 E5 05 F1 | 	add	objptr, ##35092
1c6d4     F2 FA 61 FC | 	wrlong	result1, objptr
1c6d8     44 00 00 FF 
1c6dc     14 E5 85 F1 | 	sub	objptr, ##35092
1c6e0     F2 FA 01 F6 | 	mov	result1, objptr
1c6e4     00 20 04 FF 
1c6e8     00 FA 45 F5 | 	or	result1, ##138412032
1c6ec     44 00 00 FF 
1c6f0     1C E5 05 F1 | 	add	objptr, ##35100
1c6f4     F2 FA 61 FC | 	wrlong	result1, objptr
1c6f8     44 00 00 FF 
1c6fc     1C E5 85 F1 | 	sub	objptr, ##35100
1c700     F2 FA 01 F6 | 	mov	result1, objptr
1c704     00 28 04 FF 
1c708     00 FA 45 F5 | 	or	result1, ##139460608
1c70c     44 00 00 FF 
1c710     20 E5 05 F1 | 	add	objptr, ##35104
1c714     F2 FA 61 FC | 	wrlong	result1, objptr
1c718     44 00 00 FF 
1c71c     20 E5 85 F1 | 	sub	objptr, ##35104
1c720     F2 FA 01 F6 | 	mov	result1, objptr
1c724     00 30 04 FF 
1c728     00 FA 45 F5 | 	or	result1, ##140509184
1c72c     44 00 00 FF 
1c730     24 E5 05 F1 | 	add	objptr, ##35108
1c734     F2 FA 61 FC | 	wrlong	result1, objptr
1c738     44 00 00 FF 
1c73c     24 E5 85 F1 | 	sub	objptr, ##35108
1c740     F2 FA 01 F6 | 	mov	result1, objptr
1c744     00 38 04 FF 
1c748     00 FA 45 F5 | 	or	result1, ##141557760
1c74c     44 00 00 FF 
1c750     18 E5 05 F1 | 	add	objptr, ##35096
1c754     F2 FA 61 FC | 	wrlong	result1, objptr
1c758     44 00 00 FF 
1c75c     18 E5 85 F1 | 	sub	objptr, ##35096
1c760     F2 FA 01 F6 | 	mov	result1, objptr
1c764     00 40 04 FF 
1c768     00 FA 45 F5 | 	or	result1, ##142606336
1c76c     44 00 00 FF 
1c770     28 E5 05 F1 | 	add	objptr, ##35112
1c774     F2 FA 61 FC | 	wrlong	result1, objptr
1c778     44 00 00 FF 
1c77c     28 E5 85 F1 | 	sub	objptr, ##35112
1c780     F2 FA 01 F6 | 	mov	result1, objptr
1c784     00 48 04 FF 
1c788     00 FA 45 F5 | 	or	result1, ##143654912
1c78c     44 00 00 FF 
1c790     5C E5 05 F1 | 	add	objptr, ##35164
1c794     F2 FA 61 FC | 	wrlong	result1, objptr
1c798     44 00 00 FF 
1c79c     5C E5 85 F1 | 	sub	objptr, ##35164
1c7a0     F2 FA 01 F6 | 	mov	result1, objptr
1c7a4     00 50 04 FF 
1c7a8     00 FA 45 F5 | 	or	result1, ##144703488
1c7ac     44 00 00 FF 
1c7b0     54 E5 05 F1 | 	add	objptr, ##35156
1c7b4     F2 FA 61 FC | 	wrlong	result1, objptr
1c7b8     44 00 00 FF 
1c7bc     54 E5 85 F1 | 	sub	objptr, ##35156
1c7c0     F2 FA 01 F6 | 	mov	result1, objptr
1c7c4     00 58 04 FF 
1c7c8     00 FA 45 F5 | 	or	result1, ##145752064
1c7cc     44 00 00 FF 
1c7d0     2C E5 05 F1 | 	add	objptr, ##35116
1c7d4     F2 FA 61 FC | 	wrlong	result1, objptr
1c7d8     44 00 00 FF 
1c7dc     2C E5 85 F1 | 	sub	objptr, ##35116
1c7e0     F2 FA 01 F6 | 	mov	result1, objptr
1c7e4     00 60 04 FF 
1c7e8     00 FA 45 F5 | 	or	result1, ##146800640
1c7ec     44 00 00 FF 
1c7f0     30 E5 05 F1 | 	add	objptr, ##35120
1c7f4     F2 FA 61 FC | 	wrlong	result1, objptr
1c7f8     44 00 00 FF 
1c7fc     30 E5 85 F1 | 	sub	objptr, ##35120
1c800     F2 FA 01 F6 | 	mov	result1, objptr
1c804     00 68 04 FF 
1c808     00 FA 45 F5 | 	or	result1, ##147849216
1c80c     44 00 00 FF 
1c810     4C E5 05 F1 | 	add	objptr, ##35148
1c814     F2 FA 61 FC | 	wrlong	result1, objptr
1c818     44 00 00 FF 
1c81c     4C E5 85 F1 | 	sub	objptr, ##35148
1c820     F2 FA 01 F6 | 	mov	result1, objptr
1c824     00 70 04 FF 
1c828     00 FA 45 F5 | 	or	result1, ##148897792
1c82c     44 00 00 FF 
1c830     50 E5 05 F1 | 	add	objptr, ##35152
1c834     F2 FA 61 FC | 	wrlong	result1, objptr
1c838     44 00 00 FF 
1c83c     50 E5 85 F1 | 	sub	objptr, ##35152
1c840                 | _init_commands_ret
1c840     2D 00 64 FD | 	ret
1c844                 | 
1c844                 | ' 
1c844                 | ' ''--------------------------------Error strings -------------------------------------
1c844                 | ' sub init_audio
1c844                 | _init_audio
1c844     06 4A 05 F6 | 	mov	COUNT_, #6
1c848     A8 00 A0 FD | 	call	#pushregs_
1c84c     00 C0 1F FF 
1c850     00 1E 06 F6 | 	mov	local01, ##1065353216
1c854                 | ' 'for i=0 to 1023 : samplebuf(0,i)=round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1c854                 | ' 'for i=0 to 511  : samplebuf(1,i)= -32512+127*i: samplebuf(1,512+i)=-samplebuf(1,i) : next i   		' 1 : triangle 
1c854                 | ' 'for i=0 to 1023 : samplebuf(2,i)= -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1c854                 | ' 'for i=0 to 127  : samplebuf(3,i)= -32600 : next i : for i=128 to 1023 : samplebuf(3,i) =32600 : next i 	' 3 pulse 12.5%
1c854                 | ' 'for i=0 to 511  : samplebuf(4,i)= -32600 : next i : for i=512 to 1023 : samplebuf(4,i) =32600 : next i 	' 4 square
1c854                 | ' 'for i=0 to 255  : samplebuf(5,i)= -32600 : next i : for i=256 to 1023 : samplebuf(5,i) =32600 : next i 	' 5 pulse 25%
1c854                 | ' 'for i=0 to 1023 : samplebuf(6,i)= dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1c854                 | ' 'for i=0 to 1023 : samplebuf(7,i)= dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1c854                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1c854     00 20 06 F6 | 	mov	local02, #0
1c858                 | LR__2320
1c858     10 23 02 F6 | 	mov	local03, local02
1c85c     01 22 66 F0 | 	shl	local03, #1
1c860     58 7F 23 FF 
1c864     00 24 06 F6 | 	mov	local04, ##1191096320
1c868     10 13 52 F6 | 	abs	arg01, local02 wc
1c86c     1F 26 C6 C9 |  if_b	decod	local05, #31
1c870     00 26 06 36 |  if_ae	mov	local05, #0
1c874     54 69 B0 FD | 	call	#__system___float_fromuns
1c878     13 FB 61 F5 | 	xor	result1, local05
1c87c     FD 12 02 F6 | 	mov	arg01, result1
1c880     87 24 20 FF 
1c884     DB 15 06 F6 | 	mov	arg02, ##1078530011
1c888     44 6D B0 FD | 	call	#__system___float_mul
1c88c     FD 12 02 F6 | 	mov	arg01, result1
1c890     00 00 22 FF 
1c894     00 14 06 F6 | 	mov	arg02, ##1140850688
1c898     38 6F B0 FD | 	call	#__system___float_div
1c89c     FD 12 02 F6 | 	mov	arg01, result1
1c8a0     68 76 B0 FD | 	call	#__system____builtin_sinf
1c8a4     FD 14 02 F6 | 	mov	arg02, result1
1c8a8     12 13 02 F6 | 	mov	arg01, local04
1c8ac     20 6D B0 FD | 	call	#__system___float_mul
1c8b0     FD 12 02 F6 | 	mov	arg01, result1
1c8b4     01 14 06 F6 | 	mov	arg02, #1
1c8b8     DC 71 B0 FD | 	call	#__system___float_tointeger
1c8bc     FD 14 02 F6 | 	mov	arg02, result1
1c8c0     11 13 02 F6 | 	mov	arg01, local03
1c8c4     68 0D B0 FD | 	call	#_psdpoke
1c8c8     01 20 06 F1 | 	add	local02, #1
1c8cc     02 00 00 FF 
1c8d0     00 20 56 F2 | 	cmps	local02, ##1024 wc
1c8d4     80 FF 9F CD |  if_b	jmp	#LR__2320
1c8d8                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
1c8d8     00 20 06 F6 | 	mov	local02, #0
1c8dc                 | LR__2321
1c8dc     10 15 02 F6 | 	mov	arg02, local02
1c8e0     01 14 66 F0 | 	shl	arg02, #1
1c8e4     0B 12 C6 F9 | 	decod	arg01, #11
1c8e8     0A 13 02 F1 | 	add	arg01, arg02
1c8ec     10 25 02 F6 | 	mov	local04, local02
1c8f0     07 24 66 F0 | 	shl	local04, #7
1c8f4     10 25 82 F1 | 	sub	local04, local02
1c8f8     C0 FF 7F FF 
1c8fc     00 15 06 F6 | 	mov	arg02, ##-32512
1c900     12 15 02 F1 | 	add	arg02, local04
1c904     28 0D B0 FD | 	call	#_psdpoke
1c908     09 24 C6 F9 | 	decod	local04, #9
1c90c     10 25 02 F1 | 	add	local04, local02
1c910     01 24 66 F0 | 	shl	local04, #1
1c914     0B 12 C6 F9 | 	decod	arg01, #11
1c918     12 13 02 F1 | 	add	arg01, local04
1c91c     10 27 02 F6 | 	mov	local05, local02
1c920     07 26 66 F0 | 	shl	local05, #7
1c924     10 27 82 F1 | 	sub	local05, local02
1c928     3F 00 00 FF 
1c92c     00 15 06 F6 | 	mov	arg02, ##32512
1c930     13 15 82 F1 | 	sub	arg02, local05
1c934     F8 0C B0 FD | 	call	#_psdpoke
1c938     01 20 06 F1 | 	add	local02, #1
1c93c     01 00 00 FF 
1c940     00 20 56 F2 | 	cmps	local02, ##512 wc
1c944     94 FF 9F CD |  if_b	jmp	#LR__2321
1c948                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1c948     00 20 06 F6 | 	mov	local02, #0
1c94c                 | LR__2322
1c94c     10 27 02 F6 | 	mov	local05, local02
1c950     01 26 66 F0 | 	shl	local05, #1
1c954     0C 12 C6 F9 | 	decod	arg01, #12
1c958     13 13 02 F1 | 	add	arg01, local05
1c95c     10 27 02 F6 | 	mov	local05, local02
1c960     06 26 66 F0 | 	shl	local05, #6
1c964     10 27 82 F1 | 	sub	local05, local02
1c968     C1 FF 7F FF 
1c96c     00 14 06 F6 | 	mov	arg02, ##-32256
1c970     13 15 02 F1 | 	add	arg02, local05
1c974     B8 0C B0 FD | 	call	#_psdpoke
1c978     01 20 06 F1 | 	add	local02, #1
1c97c     02 00 00 FF 
1c980     00 20 56 F2 | 	cmps	local02, ##1024 wc
1c984     C4 FF 9F CD |  if_b	jmp	#LR__2322
1c988                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
1c988     00 20 06 F6 | 	mov	local02, #0
1c98c                 | LR__2323
1c98c     10 27 02 F6 | 	mov	local05, local02
1c990     01 26 66 F0 | 	shl	local05, #1
1c994     0C 00 00 FF 
1c998     00 12 06 F6 | 	mov	arg01, ##6144
1c99c     13 13 02 F1 | 	add	arg01, local05
1c9a0     C0 FF 7F FF 
1c9a4     A8 14 06 F6 | 	mov	arg02, ##-32600
1c9a8     84 0C B0 FD | 	call	#_psdpoke
1c9ac     01 20 06 F1 | 	add	local02, #1
1c9b0     80 20 56 F2 | 	cmps	local02, #128 wc
1c9b4     D4 FF 9F CD |  if_b	jmp	#LR__2323
1c9b8     80 20 06 F6 | 	mov	local02, #128
1c9bc                 | LR__2324
1c9bc     10 27 02 F6 | 	mov	local05, local02
1c9c0     01 26 66 F0 | 	shl	local05, #1
1c9c4     0C 00 00 FF 
1c9c8     00 12 06 F6 | 	mov	arg01, ##6144
1c9cc     13 13 02 F1 | 	add	arg01, local05
1c9d0     3F 00 00 FF 
1c9d4     58 15 06 F6 | 	mov	arg02, ##32600
1c9d8     54 0C B0 FD | 	call	#_psdpoke
1c9dc     01 20 06 F1 | 	add	local02, #1
1c9e0     02 00 00 FF 
1c9e4     00 20 16 F2 | 	cmp	local02, ##1024 wc
1c9e8     D0 FF 9F CD |  if_b	jmp	#LR__2324
1c9ec                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
1c9ec     00 20 06 F6 | 	mov	local02, #0
1c9f0                 | LR__2325
1c9f0     10 27 02 F6 | 	mov	local05, local02
1c9f4     01 26 66 F0 | 	shl	local05, #1
1c9f8     0D 12 C6 F9 | 	decod	arg01, #13
1c9fc     13 13 02 F1 | 	add	arg01, local05
1ca00     C0 FF 7F FF 
1ca04     A8 14 06 F6 | 	mov	arg02, ##-32600
1ca08     24 0C B0 FD | 	call	#_psdpoke
1ca0c     01 20 06 F1 | 	add	local02, #1
1ca10     01 00 00 FF 
1ca14     00 20 56 F2 | 	cmps	local02, ##512 wc
1ca18     D4 FF 9F CD |  if_b	jmp	#LR__2325
1ca1c     09 20 C6 F9 | 	decod	local02, #9
1ca20                 | LR__2326
1ca20     10 27 02 F6 | 	mov	local05, local02
1ca24     01 26 66 F0 | 	shl	local05, #1
1ca28     0D 12 C6 F9 | 	decod	arg01, #13
1ca2c     13 13 02 F1 | 	add	arg01, local05
1ca30     3F 00 00 FF 
1ca34     58 15 06 F6 | 	mov	arg02, ##32600
1ca38     F4 0B B0 FD | 	call	#_psdpoke
1ca3c     01 20 06 F1 | 	add	local02, #1
1ca40     02 00 00 FF 
1ca44     00 20 16 F2 | 	cmp	local02, ##1024 wc
1ca48     D4 FF 9F CD |  if_b	jmp	#LR__2326
1ca4c                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
1ca4c     00 20 06 F6 | 	mov	local02, #0
1ca50                 | LR__2327
1ca50     10 27 02 F6 | 	mov	local05, local02
1ca54     01 26 66 F0 | 	shl	local05, #1
1ca58     14 00 00 FF 
1ca5c     00 12 06 F6 | 	mov	arg01, ##10240
1ca60     13 13 02 F1 | 	add	arg01, local05
1ca64     C0 FF 7F FF 
1ca68     A8 14 06 F6 | 	mov	arg02, ##-32600
1ca6c     C0 0B B0 FD | 	call	#_psdpoke
1ca70     01 20 06 F1 | 	add	local02, #1
1ca74     00 21 56 F2 | 	cmps	local02, #256 wc
1ca78     D4 FF 9F CD |  if_b	jmp	#LR__2327
1ca7c     00 21 06 F6 | 	mov	local02, #256
1ca80                 | LR__2328
1ca80     10 27 02 F6 | 	mov	local05, local02
1ca84     01 26 66 F0 | 	shl	local05, #1
1ca88     14 00 00 FF 
1ca8c     00 12 06 F6 | 	mov	arg01, ##10240
1ca90     13 13 02 F1 | 	add	arg01, local05
1ca94     3F 00 00 FF 
1ca98     58 15 06 F6 | 	mov	arg02, ##32600
1ca9c     90 0B B0 FD | 	call	#_psdpoke
1caa0     01 20 06 F1 | 	add	local02, #1
1caa4     02 00 00 FF 
1caa8     00 20 16 F2 | 	cmp	local02, ##1024 wc
1caac     D0 FF 9F CD |  if_b	jmp	#LR__2328
1cab0                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
1cab0     18 00 00 FF 
1cab4     00 20 06 F6 | 	mov	local02, ##12288
1cab8                 | LR__2329
1cab8     10 13 02 F6 | 	mov	arg01, local02
1cabc     00 14 06 F6 | 	mov	arg02, #0
1cac0     24 0B B0 FD | 	call	#_pslpoke
1cac4     04 20 06 F1 | 	add	local02, #4
1cac8     77 00 00 FF 
1cacc     FD 21 56 F2 | 	cmps	local02, ##61437 wc
1cad0     E4 FF 9F CD |  if_b	jmp	#LR__2329
1cad4                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1cad4     00 20 06 F6 | 	mov	local02, #0
1cad8                 | LR__2330
1cad8     10 27 02 F6 | 	mov	local05, local02
1cadc     01 26 66 F0 | 	shl	local05, #1
1cae0     78 00 00 FF 
1cae4     00 22 06 F6 | 	mov	local03, ##61440
1cae8     13 23 02 F1 | 	add	local03, local05
1caec     14 00 00 FF 
1caf0     C6 EA 05 F1 | 	add	ptr__dat__, ##10438
1caf4     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1caf8     14 00 00 FF 
1cafc     C6 EA 85 F1 | 	sub	ptr__dat__, ##10438
1cb00     10 12 06 F1 | 	add	arg01, #16
1cb04     10 15 02 F6 | 	mov	arg02, local02
1cb08     01 14 66 F0 | 	shl	arg02, #1
1cb0c     0A 13 02 F1 | 	add	arg01, arg02
1cb10     09 15 E2 FA | 	rdword	arg02, arg01
1cb14     11 13 02 F6 | 	mov	arg01, local03
1cb18     14 0B B0 FD | 	call	#_psdpoke
1cb1c     01 20 06 F1 | 	add	local02, #1
1cb20     02 00 00 FF 
1cb24     00 20 56 F2 | 	cmps	local02, ##1024 wc
1cb28     AC FF 9F CD |  if_b	jmp	#LR__2330
1cb2c                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1cb2c     00 20 06 F6 | 	mov	local02, #0
1cb30                 | LR__2331
1cb30     10 27 02 F6 | 	mov	local05, local02
1cb34     01 26 66 F0 | 	shl	local05, #1
1cb38     7C 00 00 FF 
1cb3c     00 22 06 F6 | 	mov	local03, ##63488
1cb40     13 23 02 F1 | 	add	local03, local05
1cb44     10 00 00 FF 
1cb48     B6 EA 05 F1 | 	add	ptr__dat__, ##8374
1cb4c     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1cb50     10 00 00 FF 
1cb54     B6 EA 85 F1 | 	sub	ptr__dat__, ##8374
1cb58     10 12 06 F1 | 	add	arg01, #16
1cb5c     10 15 02 F6 | 	mov	arg02, local02
1cb60     01 14 66 F0 | 	shl	arg02, #1
1cb64     0A 13 02 F1 | 	add	arg01, arg02
1cb68     09 15 E2 FA | 	rdword	arg02, arg01
1cb6c     11 13 02 F6 | 	mov	arg01, local03
1cb70     BC 0A B0 FD | 	call	#_psdpoke
1cb74     01 20 06 F1 | 	add	local02, #1
1cb78     02 00 00 FF 
1cb7c     00 20 56 F2 | 	cmps	local02, ##1024 wc
1cb80     AC FF 9F CD |  if_b	jmp	#LR__2331
1cb84                 | ' 
1cb84                 | ' 
1cb84                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
1cb84     00 20 06 F6 | 	mov	local02, #0
1cb88     0C 00 00 FF 
1cb8c     D8 E4 05 F1 | 	add	objptr, ##6360
1cb90     97 18 48 FB | 	callpa	#(@LR__2333-@LR__2332)>>2,fcache_load_ptr_
1cb94                 | LR__2332
1cb94     10 27 02 F6 | 	mov	local05, local02
1cb98     01 26 66 F0 | 	shl	local05, #1
1cb9c     F2 26 02 F1 | 	add	local05, objptr
1cba0     10 23 02 F6 | 	mov	local03, local02
1cba4     08 22 66 F0 | 	shl	local03, #8
1cba8     7F 00 00 FF 
1cbac     00 29 06 F6 | 	mov	local06, ##65280
1cbb0     11 29 82 F1 | 	sub	local06, local03
1cbb4     13 29 52 FC | 	wrword	local06, local05
1cbb8     01 20 06 F1 | 	add	local02, #1
1cbbc     00 21 56 F2 | 	cmps	local02, #256 wc
1cbc0     D0 FF 9F CD |  if_b	jmp	#LR__2332
1cbc4                 | LR__2333
1cbc4     0C 00 00 FF 
1cbc8     D8 E4 85 F1 | 	sub	objptr, ##6360
1cbcc                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
1cbcc     00 20 06 F6 | 	mov	local02, #0
1cbd0                 | LR__2334
1cbd0     10 27 02 F6 | 	mov	local05, local02
1cbd4     01 26 66 F0 | 	shl	local05, #1
1cbd8     0D 00 00 FF 
1cbdc     D8 E4 05 F1 | 	add	objptr, ##6872
1cbe0     F2 26 02 F1 | 	add	local05, objptr
1cbe4     80 BF 23 FF 
1cbe8     00 12 06 F6 | 	mov	arg01, ##1199505408
1cbec     0F 15 02 F6 | 	mov	arg02, local01
1cbf0     0D 00 00 FF 
1cbf4     D8 E4 85 F1 | 	sub	objptr, ##6872
1cbf8     D4 69 B0 FD | 	call	#__system___float_mul
1cbfc     FD 12 02 F6 | 	mov	arg01, result1
1cc00     01 14 06 F6 | 	mov	arg02, #1
1cc04     90 6E B0 FD | 	call	#__system___float_tointeger
1cc08     13 FB 51 FC | 	wrword	result1, local05
1cc0c     0F 13 02 F6 | 	mov	arg01, local01
1cc10     CC BC 1F FF 
1cc14     9A 15 06 F6 | 	mov	arg02, ##1064933786
1cc18     B4 69 B0 FD | 	call	#__system___float_mul
1cc1c     FD 1E 02 F6 | 	mov	local01, result1
1cc20     01 20 06 F1 | 	add	local02, #1
1cc24     00 21 56 F2 | 	cmps	local02, #256 wc
1cc28     A4 FF 9F CD |  if_b	jmp	#LR__2334
1cc2c     0E 00 00 FF 
1cc30     D6 E4 05 F1 | 	add	objptr, ##7382
1cc34     F2 00 58 FC | 	wrword	#0, objptr
1cc38                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
1cc38     00 20 06 F6 | 	mov	local02, #0
1cc3c     02 E4 05 F1 | 	add	objptr, #2
1cc40     97 10 48 FB | 	callpa	#(@LR__2336-@LR__2335)>>2,fcache_load_ptr_
1cc44                 | LR__2335
1cc44     10 27 02 F6 | 	mov	local05, local02
1cc48     01 26 66 F0 | 	shl	local05, #1
1cc4c     F2 26 02 F1 | 	add	local05, objptr
1cc50     7F 00 80 FF 
1cc54     13 01 5A FC | 	wrword	##65280, local05
1cc58     01 20 06 F1 | 	add	local02, #1
1cc5c     FF 20 56 F2 | 	cmps	local02, #255 wc
1cc60     E0 FF 9F CD |  if_b	jmp	#LR__2335
1cc64                 | LR__2336
1cc64     FE E5 05 F1 | 	add	objptr, #510
1cc68     F2 00 58 FC | 	wrword	#0, objptr
1cc6c                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
1cc6c     00 20 06 F6 | 	mov	local02, #0
1cc70     02 E4 05 F1 | 	add	objptr, #2
1cc74     97 52 48 FB | 	callpa	#(@LR__2341-@LR__2337)>>2,fcache_load_ptr_
1cc78                 | LR__2337
1cc78     10 27 02 F6 | 	mov	local05, local02
1cc7c     01 26 66 F0 | 	shl	local05, #1
1cc80     F2 26 02 F1 | 	add	local05, objptr
1cc84     10 29 02 F6 | 	mov	local06, local02
1cc88     0C 28 66 F0 | 	shl	local06, #12
1cc8c     13 29 52 FC | 	wrword	local06, local05
1cc90     01 20 06 F1 | 	add	local02, #1
1cc94     10 20 56 F2 | 	cmps	local02, #16 wc
1cc98     DC FF 9F CD |  if_b	jmp	#LR__2337
1cc9c                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
1cc9c     10 20 06 F6 | 	mov	local02, #16
1cca0                 | LR__2338
1cca0     10 27 02 F6 | 	mov	local05, local02
1cca4     01 26 66 F0 | 	shl	local05, #1
1cca8     F2 26 02 F1 | 	add	local05, objptr
1ccac     7F 00 80 FF 
1ccb0     13 01 5A FC | 	wrword	##65280, local05
1ccb4     01 20 06 F1 | 	add	local02, #1
1ccb8     F0 20 16 F2 | 	cmp	local02, #240 wc
1ccbc     E0 FF 9F CD |  if_b	jmp	#LR__2338
1ccc0                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
1ccc0     F0 20 06 F6 | 	mov	local02, #240
1ccc4                 | LR__2339
1ccc4     10 27 02 F6 | 	mov	local05, local02
1ccc8     01 26 66 F0 | 	shl	local05, #1
1cccc     F2 26 02 F1 | 	add	local05, objptr
1ccd0     FF 22 06 F6 | 	mov	local03, #255
1ccd4     10 23 82 F1 | 	sub	local03, local02
1ccd8     0C 22 66 F0 | 	shl	local03, #12
1ccdc     13 23 52 FC | 	wrword	local03, local05
1cce0     01 20 06 F1 | 	add	local02, #1
1cce4     00 21 16 F2 | 	cmp	local02, #256 wc
1cce8     D8 FF 9F CD |  if_b	jmp	#LR__2339
1ccec                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
1ccec     00 20 06 F6 | 	mov	local02, #0
1ccf0     01 00 00 FF 
1ccf4     00 E4 05 F1 | 	add	objptr, ##512
1ccf8                 | LR__2340
1ccf8     10 27 02 F6 | 	mov	local05, local02
1ccfc     01 26 66 F0 | 	shl	local05, #1
1cd00     F2 26 02 F1 | 	add	local05, objptr
1cd04     10 29 02 F6 | 	mov	local06, local02
1cd08     08 28 66 F0 | 	shl	local06, #8
1cd0c     13 29 52 FC | 	wrword	local06, local05
1cd10     01 20 06 F1 | 	add	local02, #1
1cd14     00 21 56 F2 | 	cmps	local02, #256 wc
1cd18     DC FF 9F CD |  if_b	jmp	#LR__2340
1cd1c                 | LR__2341
1cd1c     FE E5 05 F1 | 	add	objptr, #510
1cd20     F2 00 58 FC | 	wrword	#0, objptr
1cd24                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
1cd24     00 20 06 F6 | 	mov	local02, #0
1cd28     02 E4 05 F1 | 	add	objptr, #2
1cd2c     97 6A 48 FB | 	callpa	#(@LR__2346-@LR__2342)>>2,fcache_load_ptr_
1cd30                 | LR__2342
1cd30     10 27 02 F6 | 	mov	local05, local02
1cd34     01 26 66 F0 | 	shl	local05, #1
1cd38     F2 26 02 F1 | 	add	local05, objptr
1cd3c     10 29 02 F6 | 	mov	local06, local02
1cd40     04 28 66 F0 | 	shl	local06, #4
1cd44     10 29 02 F1 | 	add	local06, local02
1cd48     04 28 66 F0 | 	shl	local06, #4
1cd4c     13 29 52 FC | 	wrword	local06, local05
1cd50     01 20 06 F1 | 	add	local02, #1
1cd54     F0 20 56 F2 | 	cmps	local02, #240 wc
1cd58     D4 FF 9F CD |  if_b	jmp	#LR__2342
1cd5c     F0 20 06 F6 | 	mov	local02, #240
1cd60                 | LR__2343
1cd60     10 27 02 F6 | 	mov	local05, local02
1cd64     01 26 66 F0 | 	shl	local05, #1
1cd68     F2 26 02 F1 | 	add	local05, objptr
1cd6c     FF 22 06 F6 | 	mov	local03, #255
1cd70     10 23 82 F1 | 	sub	local03, local02
1cd74     0C 22 66 F0 | 	shl	local03, #12
1cd78     13 23 52 FC | 	wrword	local03, local05
1cd7c     01 20 06 F1 | 	add	local02, #1
1cd80     00 21 16 F2 | 	cmp	local02, #256 wc
1cd84     D8 FF 9F CD |  if_b	jmp	#LR__2343
1cd88                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
1cd88     00 20 06 F6 | 	mov	local02, #0
1cd8c     01 00 00 FF 
1cd90     00 E4 05 F1 | 	add	objptr, ##512
1cd94                 | LR__2344
1cd94     10 27 02 F6 | 	mov	local05, local02
1cd98     01 26 66 F0 | 	shl	local05, #1
1cd9c     F2 26 02 F1 | 	add	local05, objptr
1cda0     10 29 02 F6 | 	mov	local06, local02
1cda4     09 28 66 F0 | 	shl	local06, #9
1cda8     13 29 52 FC | 	wrword	local06, local05
1cdac     FF 26 06 F6 | 	mov	local05, #255
1cdb0     10 27 82 F1 | 	sub	local05, local02
1cdb4     01 26 66 F0 | 	shl	local05, #1
1cdb8     F2 26 02 F1 | 	add	local05, objptr
1cdbc     10 29 02 F6 | 	mov	local06, local02
1cdc0     09 28 66 F0 | 	shl	local06, #9
1cdc4     13 29 52 FC | 	wrword	local06, local05
1cdc8     01 20 06 F1 | 	add	local02, #1
1cdcc     80 20 56 F2 | 	cmps	local02, #128 wc
1cdd0     C0 FF 9F CD |  if_b	jmp	#LR__2344
1cdd4                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
1cdd4     00 20 06 F6 | 	mov	local02, #0
1cdd8     01 00 00 FF 
1cddc     00 E4 05 F1 | 	add	objptr, ##512
1cde0                 | LR__2345
1cde0     10 27 02 F6 | 	mov	local05, local02
1cde4     01 26 66 F0 | 	shl	local05, #1
1cde8     F2 26 02 F1 | 	add	local05, objptr
1cdec     10 29 02 F6 | 	mov	local06, local02
1cdf0     0D 28 66 F0 | 	shl	local06, #13
1cdf4     13 29 52 FC | 	wrword	local06, local05
1cdf8     01 20 06 F1 | 	add	local02, #1
1cdfc     08 20 56 F2 | 	cmps	local02, #8 wc
1ce00     DC FF 9F CD |  if_b	jmp	#LR__2345
1ce04                 | LR__2346
1ce04                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
1ce04     08 20 06 F6 | 	mov	local02, #8
1ce08     97 42 48 FB | 	callpa	#(@LR__2350-@LR__2347)>>2,fcache_load_ptr_
1ce0c                 | LR__2347
1ce0c     10 27 02 F6 | 	mov	local05, local02
1ce10     01 26 66 F0 | 	shl	local05, #1
1ce14     F2 26 02 F1 | 	add	local05, objptr
1ce18     10 1F 02 F6 | 	mov	local01, local02
1ce1c     08 1E 86 F1 | 	sub	local01, #8
1ce20     0B 1E 66 F0 | 	shl	local01, #11
1ce24     7F 00 00 FF 
1ce28     00 29 06 F6 | 	mov	local06, ##65280
1ce2c     0F 29 82 F1 | 	sub	local06, local01
1ce30     13 29 52 FC | 	wrword	local06, local05
1ce34     01 20 06 F1 | 	add	local02, #1
1ce38     18 20 16 F2 | 	cmp	local02, #24 wc
1ce3c     CC FF 9F CD |  if_b	jmp	#LR__2347
1ce40                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
1ce40     18 20 06 F6 | 	mov	local02, #24
1ce44                 | LR__2348
1ce44     10 27 02 F6 | 	mov	local05, local02
1ce48     01 26 66 F0 | 	shl	local05, #1
1ce4c     F2 26 02 F1 | 	add	local05, objptr
1ce50     40 00 80 FF 
1ce54     13 01 58 FC | 	wrword	##32768, local05
1ce58     01 20 06 F1 | 	add	local02, #1
1ce5c     81 20 16 F2 | 	cmp	local02, #129 wc
1ce60     E0 FF 9F CD |  if_b	jmp	#LR__2348
1ce64                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
1ce64     81 20 06 F6 | 	mov	local02, #129
1ce68                 | LR__2349
1ce68     10 27 02 F6 | 	mov	local05, local02
1ce6c     01 26 66 F0 | 	shl	local05, #1
1ce70     F2 26 02 F1 | 	add	local05, objptr
1ce74     FF 22 06 F6 | 	mov	local03, #255
1ce78     10 23 82 F1 | 	sub	local03, local02
1ce7c     08 22 66 F0 | 	shl	local03, #8
1ce80     13 23 52 FC | 	wrword	local03, local05
1ce84     01 20 06 F1 | 	add	local02, #1
1ce88     00 21 16 F2 | 	cmp	local02, #256 wc
1ce8c     D8 FF 9F CD |  if_b	jmp	#LR__2349
1ce90                 | LR__2350
1ce90     3E 00 00 FF 
1ce94     FA E4 05 F1 | 	add	objptr, ##31994
1ce98     F2 00 59 FC | 	wrword	#128, objptr
1ce9c     51 00 00 FF 
1cea0     D2 E5 85 F1 | 	sub	objptr, ##41938
1cea4                 | ' for i=0 to 7
1cea4     00 20 06 F6 | 	mov	local02, #0
1cea8     97 8E 48 FB | 	callpa	#(@LR__2352-@LR__2351)>>2,fcache_load_ptr_
1ceac                 | LR__2351
1ceac     10 27 02 F6 | 	mov	local05, local02
1ceb0     01 26 66 F0 | 	shl	local05, #1
1ceb4     10 27 02 F1 | 	add	local05, local02
1ceb8     03 26 66 F0 | 	shl	local05, #3
1cebc     14 00 00 FF 
1cec0     38 E5 05 F1 | 	add	objptr, ##10552
1cec4     F2 26 02 F1 | 	add	local05, objptr
1cec8     00 EE A1 FF 
1cecc     13 01 68 FC | 	wrlong	##1138491392, local05
1ced0     10 27 02 F6 | 	mov	local05, local02
1ced4     01 26 66 F0 | 	shl	local05, #1
1ced8     10 27 02 F1 | 	add	local05, local02
1cedc     03 26 66 F0 | 	shl	local05, #3
1cee0     F2 26 02 F1 | 	add	local05, objptr
1cee4     04 26 06 F1 | 	add	local05, #4
1cee8     13 21 42 FC | 	wrbyte	local02, local05
1ceec     10 27 02 F6 | 	mov	local05, local02
1cef0     01 26 66 F0 | 	shl	local05, #1
1cef4     10 27 02 F1 | 	add	local05, local02
1cef8     03 26 66 F0 | 	shl	local05, #3
1cefc     F2 26 02 F1 | 	add	local05, objptr
1cf00     05 26 06 F1 | 	add	local05, #5
1cf04     13 21 42 FC | 	wrbyte	local02, local05
1cf08     10 27 02 F6 | 	mov	local05, local02
1cf0c     01 26 66 F0 | 	shl	local05, #1
1cf10     10 27 02 F1 | 	add	local05, local02
1cf14     03 26 66 F0 | 	shl	local05, #3
1cf18     F2 26 02 F1 | 	add	local05, objptr
1cf1c     06 26 06 F1 | 	add	local05, #6
1cf20     13 01 58 FC | 	wrword	#0, local05
1cf24     10 27 02 F6 | 	mov	local05, local02
1cf28     01 26 66 F0 | 	shl	local05, #1
1cf2c     10 27 02 F1 | 	add	local05, local02
1cf30     03 26 66 F0 | 	shl	local05, #3
1cf34     F2 26 02 F1 | 	add	local05, objptr
1cf38     08 26 06 F1 | 	add	local05, #8
1cf3c     00 C0 9F FF 
1cf40     13 01 68 FC | 	wrlong	##1065353216, local05
1cf44     10 27 02 F6 | 	mov	local05, local02
1cf48     01 26 66 F0 | 	shl	local05, #1
1cf4c     10 27 02 F1 | 	add	local05, local02
1cf50     03 26 66 F0 | 	shl	local05, #3
1cf54     F2 26 02 F1 | 	add	local05, objptr
1cf58     0C 26 06 F1 | 	add	local05, #12
1cf5c     00 40 A0 FF 
1cf60     13 01 68 FC | 	wrlong	##1082130432, local05
1cf64     10 27 02 F6 | 	mov	local05, local02
1cf68     01 26 66 F0 | 	shl	local05, #1
1cf6c     10 27 02 F1 | 	add	local05, local02
1cf70     03 26 66 F0 | 	shl	local05, #3
1cf74     F2 26 02 F1 | 	add	local05, objptr
1cf78     10 26 06 F1 | 	add	local05, #16
1cf7c     13 01 68 FC | 	wrlong	#0, local05
1cf80     10 27 02 F6 | 	mov	local05, local02
1cf84     01 26 66 F0 | 	shl	local05, #1
1cf88     10 27 02 F1 | 	add	local05, local02
1cf8c     03 26 66 F0 | 	shl	local05, #3
1cf90     F2 26 02 F1 | 	add	local05, objptr
1cf94     14 26 06 F1 | 	add	local05, #20
1cf98     13 FF 59 FC | 	wrword	#255, local05
1cf9c     10 27 02 F6 | 	mov	local05, local02
1cfa0     01 26 66 F0 | 	shl	local05, #1
1cfa4     3D 00 00 FF 
1cfa8     8C E4 05 F1 | 	add	objptr, ##31372
1cfac     F2 26 02 F1 | 	add	local05, objptr
1cfb0     13 FF 59 FC | 	wrword	#255, local05
1cfb4     01 20 06 F1 | 	add	local02, #1
1cfb8     08 20 56 F2 | 	cmps	local02, #8 wc
1cfbc     51 00 00 FF 
1cfc0     C4 E5 85 F1 | 	sub	objptr, ##41924
1cfc4     E4 FE 9F CD |  if_b	jmp	#LR__2351
1cfc8                 | LR__2352
1cfc8     00 6E 20 FF 
1cfcc     00 28 06 F6 | 	mov	local06, ##1088159744
1cfd0                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
1cfd0     03 26 06 F6 | 	mov	local05, #3
1cfd4                 | LR__2353
1cfd4     14 13 02 F6 | 	mov	arg01, local06
1cfd8     CE C3 1F FF 
1cfdc     7D 14 06 F6 | 	mov	arg02, ##1065852029
1cfe0     EC 65 B0 FD | 	call	#__system___float_mul
1cfe4     FD 28 02 F6 | 	mov	local06, result1
1cfe8     FA 27 6E FB | 	djnz	local05, #LR__2353
1cfec     00 20 06 F6 | 	mov	local02, #0
1cff0                 | LR__2354
1cff0     10 25 02 F6 | 	mov	local04, local02
1cff4     02 24 66 F0 | 	shl	local04, #2
1cff8     14 00 00 FF 
1cffc     D8 E4 05 F1 | 	add	objptr, ##10456
1d000     F2 24 02 F1 | 	add	local04, objptr
1d004     12 29 62 FC | 	wrlong	local06, local04
1d008     14 13 02 F6 | 	mov	arg01, local06
1d00c     CE C3 1F FF 
1d010     7D 14 06 F6 | 	mov	arg02, ##1065852029
1d014     14 00 00 FF 
1d018     D8 E4 85 F1 | 	sub	objptr, ##10456
1d01c     B0 65 B0 FD | 	call	#__system___float_mul
1d020     FD 28 02 F6 | 	mov	local06, result1
1d024     01 20 06 F1 | 	add	local02, #1
1d028     0C 20 56 F2 | 	cmps	local02, #12 wc
1d02c     C0 FF 9F CD |  if_b	jmp	#LR__2354
1d030     14 00 00 FF 
1d034     08 E5 05 F1 | 	add	objptr, ##10504
1d038     F2 50 6B FC | 	wrlong	#424, objptr
1d03c     04 E4 05 F1 | 	add	objptr, #4
1d040     F2 20 6B FC | 	wrlong	#400, objptr
1d044     04 E4 05 F1 | 	add	objptr, #4
1d048     F2 F2 6A FC | 	wrlong	#377, objptr
1d04c     04 E4 05 F1 | 	add	objptr, #4
1d050     F2 C8 6A FC | 	wrlong	#356, objptr
1d054     04 E4 05 F1 | 	add	objptr, #4
1d058     F2 A0 6A FC | 	wrlong	#336, objptr
1d05c     04 E4 05 F1 | 	add	objptr, #4
1d060     F2 7A 6A FC | 	wrlong	#317, objptr
1d064     04 E4 05 F1 | 	add	objptr, #4
1d068     F2 58 6A FC | 	wrlong	#300, objptr
1d06c     04 E4 05 F1 | 	add	objptr, #4
1d070     F2 36 6A FC | 	wrlong	#283, objptr
1d074     04 E4 05 F1 | 	add	objptr, #4
1d078     F2 16 6A FC | 	wrlong	#267, objptr
1d07c     04 E4 05 F1 | 	add	objptr, #4
1d080     F2 F8 69 FC | 	wrlong	#252, objptr
1d084     04 E4 05 F1 | 	add	objptr, #4
1d088     F2 DC 69 FC | 	wrlong	#238, objptr
1d08c     04 E4 05 F1 | 	add	objptr, #4
1d090     F2 C0 69 FC | 	wrlong	#224, objptr
1d094     3D 00 00 FF 
1d098     9E E4 05 F1 | 	add	objptr, ##31390
1d09c     F2 00 59 FC | 	wrword	#128, objptr
1d0a0     02 E4 85 F1 | 	sub	objptr, #2
1d0a4     F2 00 59 FC | 	wrword	#128, objptr
1d0a8     51 00 00 FF 
1d0ac     D0 E5 85 F1 | 	sub	objptr, ##41936
1d0b0     A7 F0 03 F6 | 	mov	ptra, fp
1d0b4     B2 00 A0 FD | 	call	#popregs_
1d0b8                 | _init_audio_ret
1d0b8     2D 00 64 FD | 	ret
1d0bc                 | 
1d0bc                 | ' 
1d0bc                 | ' 
1d0bc                 | ' function getnoteval(token) as single
1d0bc                 | _getnoteval
1d0bc     02 4A 05 F6 | 	mov	COUNT_, #2
1d0c0     A8 00 A0 FD | 	call	#pushregs_
1d0c4     01 00 00 FF 
1d0c8     00 13 86 F1 | 	sub	arg01, ##768
1d0cc     09 15 52 F6 | 	abs	arg02, arg01 wc
1d0d0     0C 14 16 FD | 	qdiv	arg02, #12
1d0d4     14 00 00 FF 
1d0d8     D8 E4 05 F1 | 	add	objptr, ##10456
1d0dc     19 14 62 FD | 	getqy	arg02
1d0e0     0A 15 82 F6 | 	negc	arg02, arg02
1d0e4     02 14 66 F0 | 	shl	arg02, #2
1d0e8     F2 14 02 F1 | 	add	arg02, objptr
1d0ec     0A 1F 02 FB | 	rdlong	local01, arg02
1d0f0     09 15 52 F6 | 	abs	arg02, arg01 wc
1d0f4     0C 14 16 FD | 	qdiv	arg02, #12
1d0f8     14 00 00 FF 
1d0fc     D8 E4 85 F1 | 	sub	objptr, ##10456
1d100     01 12 06 F6 | 	mov	arg01, #1
1d104                 | ' noteexp=1+(note/12) 
1d104                 | ' return (2.0^noteexp)*notebase
1d104     18 14 62 FD | 	getqx	arg02
1d108     0A 13 82 F3 | 	sumc	arg01, arg02
1d10c     09 13 52 F6 | 	abs	arg01, arg01 wc
1d110     1F 20 C6 C9 |  if_b	decod	local02, #31
1d114     00 20 06 36 |  if_ae	mov	local02, #0
1d118     B0 60 B0 FD | 	call	#__system___float_fromuns
1d11c     10 FB 61 F5 | 	xor	result1, local02
1d120     FD 14 02 F6 | 	mov	arg02, result1
1d124     1E 12 C6 F9 | 	decod	arg01, #30
1d128     88 73 B0 FD | 	call	#__system____builtin_powf
1d12c     FD 12 02 F6 | 	mov	arg01, result1
1d130     0F 15 02 F6 | 	mov	arg02, local01
1d134     98 64 B0 FD | 	call	#__system___float_mul
1d138     A7 F0 03 F6 | 	mov	ptra, fp
1d13c     B2 00 A0 FD | 	call	#popregs_
1d140                 | _getnoteval_ret
1d140     2D 00 64 FD | 	ret
1d144                 | 
1d144                 | ' 
1d144                 | ' 
1d144                 | ' 
1d144                 | ' sub init_error_strings
1d144                 | _init_error_strings
1d144     85 01 00 FF 
1d148     A3 01 06 F6 | 	mov	_var01, ##@LR__5523
1d14c     45 00 00 FF 
1d150     7C E4 05 F1 | 	add	objptr, ##35452
1d154     F2 00 62 FC | 	wrlong	_var01, objptr
1d158     85 01 00 FF 
1d15c     A4 01 06 F6 | 	mov	_var01, ##@LR__5524
1d160     04 E4 05 F1 | 	add	objptr, #4
1d164     F2 00 62 FC | 	wrlong	_var01, objptr
1d168     85 01 00 FF 
1d16c     C9 01 06 F6 | 	mov	_var01, ##@LR__5525
1d170     04 E4 05 F1 | 	add	objptr, #4
1d174     F2 00 62 FC | 	wrlong	_var01, objptr
1d178     85 01 00 FF 
1d17c     EA 01 06 F6 | 	mov	_var01, ##@LR__5526
1d180     04 E4 05 F1 | 	add	objptr, #4
1d184     F2 00 62 FC | 	wrlong	_var01, objptr
1d188     86 01 00 FF 
1d18c     04 00 06 F6 | 	mov	_var01, ##@LR__5527
1d190     04 E4 05 F1 | 	add	objptr, #4
1d194     F2 00 62 FC | 	wrlong	_var01, objptr
1d198     86 01 00 FF 
1d19c     20 00 06 F6 | 	mov	_var01, ##@LR__5528
1d1a0     04 E4 05 F1 | 	add	objptr, #4
1d1a4     F2 00 62 FC | 	wrlong	_var01, objptr
1d1a8     86 01 00 FF 
1d1ac     42 00 06 F6 | 	mov	_var01, ##@LR__5529
1d1b0     04 E4 05 F1 | 	add	objptr, #4
1d1b4     F2 00 62 FC | 	wrlong	_var01, objptr
1d1b8     86 01 00 FF 
1d1bc     70 00 06 F6 | 	mov	_var01, ##@LR__5530
1d1c0     04 E4 05 F1 | 	add	objptr, #4
1d1c4     F2 00 62 FC | 	wrlong	_var01, objptr
1d1c8     86 01 00 FF 
1d1cc     9B 00 06 F6 | 	mov	_var01, ##@LR__5531
1d1d0     04 E4 05 F1 | 	add	objptr, #4
1d1d4     F2 00 62 FC | 	wrlong	_var01, objptr
1d1d8     86 01 00 FF 
1d1dc     B4 00 06 F6 | 	mov	_var01, ##@LR__5532
1d1e0     04 E4 05 F1 | 	add	objptr, #4
1d1e4     F2 00 62 FC | 	wrlong	_var01, objptr
1d1e8     86 01 00 FF 
1d1ec     D5 00 06 F6 | 	mov	_var01, ##@LR__5533
1d1f0     04 E4 05 F1 | 	add	objptr, #4
1d1f4     F2 00 62 FC | 	wrlong	_var01, objptr
1d1f8     86 01 00 FF 
1d1fc     EC 00 06 F6 | 	mov	_var01, ##@LR__5534
1d200     04 E4 05 F1 | 	add	objptr, #4
1d204     F2 00 62 FC | 	wrlong	_var01, objptr
1d208     86 01 00 FF 
1d20c     0A 01 06 F6 | 	mov	_var01, ##@LR__5535
1d210     04 E4 05 F1 | 	add	objptr, #4
1d214     F2 00 62 FC | 	wrlong	_var01, objptr
1d218     86 01 00 FF 
1d21c     2E 01 06 F6 | 	mov	_var01, ##@LR__5536
1d220     04 E4 05 F1 | 	add	objptr, #4
1d224     F2 00 62 FC | 	wrlong	_var01, objptr
1d228     86 01 00 FF 
1d22c     55 01 06 F6 | 	mov	_var01, ##@LR__5537
1d230     04 E4 05 F1 | 	add	objptr, #4
1d234     F2 00 62 FC | 	wrlong	_var01, objptr
1d238     86 01 00 FF 
1d23c     71 01 06 F6 | 	mov	_var01, ##@LR__5538
1d240     04 E4 05 F1 | 	add	objptr, #4
1d244     F2 00 62 FC | 	wrlong	_var01, objptr
1d248     86 01 00 FF 
1d24c     82 01 06 F6 | 	mov	_var01, ##@LR__5539
1d250     04 E4 05 F1 | 	add	objptr, #4
1d254     F2 00 62 FC | 	wrlong	_var01, objptr
1d258     86 01 00 FF 
1d25c     92 01 06 F6 | 	mov	_var01, ##@LR__5540
1d260     04 E4 05 F1 | 	add	objptr, #4
1d264     F2 00 62 FC | 	wrlong	_var01, objptr
1d268     86 01 00 FF 
1d26c     AD 01 06 F6 | 	mov	_var01, ##@LR__5541
1d270     04 E4 05 F1 | 	add	objptr, #4
1d274     F2 00 62 FC | 	wrlong	_var01, objptr
1d278     86 01 00 FF 
1d27c     BF 01 06 F6 | 	mov	_var01, ##@LR__5542
1d280     04 E4 05 F1 | 	add	objptr, #4
1d284     F2 00 62 FC | 	wrlong	_var01, objptr
1d288     86 01 00 FF 
1d28c     D7 01 06 F6 | 	mov	_var01, ##@LR__5543
1d290     04 E4 05 F1 | 	add	objptr, #4
1d294     F2 00 62 FC | 	wrlong	_var01, objptr
1d298     86 01 00 FF 
1d29c     EB 01 06 F6 | 	mov	_var01, ##@LR__5544
1d2a0     04 E4 05 F1 | 	add	objptr, #4
1d2a4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2a8     86 01 00 FF 
1d2ac     FB 01 06 F6 | 	mov	_var01, ##@LR__5545
1d2b0     04 E4 05 F1 | 	add	objptr, #4
1d2b4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2b8     87 01 00 FF 
1d2bc     18 00 06 F6 | 	mov	_var01, ##@LR__5546
1d2c0     04 E4 05 F1 | 	add	objptr, #4
1d2c4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2c8     87 01 00 FF 
1d2cc     29 00 06 F6 | 	mov	_var01, ##@LR__5547
1d2d0     04 E4 05 F1 | 	add	objptr, #4
1d2d4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2d8     87 01 00 FF 
1d2dc     3A 00 06 F6 | 	mov	_var01, ##@LR__5548
1d2e0     04 E4 05 F1 | 	add	objptr, #4
1d2e4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2e8     87 01 00 FF 
1d2ec     65 00 06 F6 | 	mov	_var01, ##@LR__5549
1d2f0     04 E4 05 F1 | 	add	objptr, #4
1d2f4     F2 00 62 FC | 	wrlong	_var01, objptr
1d2f8     87 01 00 FF 
1d2fc     81 00 06 F6 | 	mov	_var01, ##@LR__5550
1d300     04 E4 05 F1 | 	add	objptr, #4
1d304     F2 00 62 FC | 	wrlong	_var01, objptr
1d308     87 01 00 FF 
1d30c     97 00 06 F6 | 	mov	_var01, ##@LR__5551
1d310     04 E4 05 F1 | 	add	objptr, #4
1d314     F2 00 62 FC | 	wrlong	_var01, objptr
1d318     87 01 00 FF 
1d31c     A4 00 06 F6 | 	mov	_var01, ##@LR__5552
1d320     04 E4 05 F1 | 	add	objptr, #4
1d324     F2 00 62 FC | 	wrlong	_var01, objptr
1d328     87 01 00 FF 
1d32c     B6 00 06 F6 | 	mov	_var01, ##@LR__5553
1d330     04 E4 05 F1 | 	add	objptr, #4
1d334     F2 00 62 FC | 	wrlong	_var01, objptr
1d338     87 01 00 FF 
1d33c     C7 00 06 F6 | 	mov	_var01, ##@LR__5554
1d340     04 E4 05 F1 | 	add	objptr, #4
1d344     F2 00 62 FC | 	wrlong	_var01, objptr
1d348     87 01 00 FF 
1d34c     E3 00 06 F6 | 	mov	_var01, ##@LR__5555
1d350     04 E4 05 F1 | 	add	objptr, #4
1d354     F2 00 62 FC | 	wrlong	_var01, objptr
1d358     87 01 00 FF 
1d35c     F4 00 06 F6 | 	mov	_var01, ##@LR__5556
1d360     04 E4 05 F1 | 	add	objptr, #4
1d364     F2 00 62 FC | 	wrlong	_var01, objptr
1d368     87 01 00 FF 
1d36c     03 01 06 F6 | 	mov	_var01, ##@LR__5557
1d370     04 E4 05 F1 | 	add	objptr, #4
1d374     F2 00 62 FC | 	wrlong	_var01, objptr
1d378     87 01 00 FF 
1d37c     1E 01 06 F6 | 	mov	_var01, ##@LR__5558
1d380     04 E4 05 F1 | 	add	objptr, #4
1d384     F2 00 62 FC | 	wrlong	_var01, objptr
1d388     87 01 00 FF 
1d38c     52 01 06 F6 | 	mov	_var01, ##@LR__5559
1d390     04 E4 05 F1 | 	add	objptr, #4
1d394     F2 00 62 FC | 	wrlong	_var01, objptr
1d398     87 01 00 FF 
1d39c     6B 01 06 F6 | 	mov	_var01, ##@LR__5560
1d3a0     04 E4 05 F1 | 	add	objptr, #4
1d3a4     F2 00 62 FC | 	wrlong	_var01, objptr
1d3a8     87 01 00 FF 
1d3ac     87 01 06 F6 | 	mov	_var01, ##@LR__5561
1d3b0     04 E4 05 F1 | 	add	objptr, #4
1d3b4     F2 00 62 FC | 	wrlong	_var01, objptr
1d3b8     87 01 00 FF 
1d3bc     A5 01 06 F6 | 	mov	_var01, ##@LR__5562
1d3c0     04 E4 05 F1 | 	add	objptr, #4
1d3c4     F2 00 62 FC | 	wrlong	_var01, objptr
1d3c8     87 01 00 FF 
1d3cc     BE 01 06 F6 | 	mov	_var01, ##@LR__5563
1d3d0     04 E4 05 F1 | 	add	objptr, #4
1d3d4     F2 00 62 FC | 	wrlong	_var01, objptr
1d3d8     87 01 00 FF 
1d3dc     DD 01 06 F6 | 	mov	_var01, ##@LR__5564
1d3e0     04 E4 05 F1 | 	add	objptr, #4
1d3e4     F2 00 62 FC | 	wrlong	_var01, objptr
1d3e8     87 01 00 FF 
1d3ec     EC 01 06 F6 | 	mov	_var01, ##@LR__5565
1d3f0     04 E4 05 F1 | 	add	objptr, #4
1d3f4     F2 00 62 FC | 	wrlong	_var01, objptr
1d3f8     88 01 00 FF 
1d3fc     1A 00 06 F6 | 	mov	_var01, ##@LR__5566
1d400     04 E4 05 F1 | 	add	objptr, #4
1d404     F2 00 62 FC | 	wrlong	_var01, objptr
1d408     88 01 00 FF 
1d40c     28 00 06 F6 | 	mov	_var01, ##@LR__5567
1d410     04 E4 05 F1 | 	add	objptr, #4
1d414     F2 00 62 FC | 	wrlong	_var01, objptr
1d418     88 01 00 FF 
1d41c     3D 00 06 F6 | 	mov	_var01, ##@LR__5568
1d420     04 E4 05 F1 | 	add	objptr, #4
1d424     F2 00 62 FC | 	wrlong	_var01, objptr
1d428     88 01 00 FF 
1d42c     61 00 06 F6 | 	mov	_var01, ##@LR__5569
1d430     04 E4 05 F1 | 	add	objptr, #4
1d434     F2 00 62 FC | 	wrlong	_var01, objptr
1d438     88 01 00 FF 
1d43c     78 00 06 F6 | 	mov	_var01, ##@LR__5570
1d440     04 E4 05 F1 | 	add	objptr, #4
1d444     F2 00 62 FC | 	wrlong	_var01, objptr
1d448     88 01 00 FF 
1d44c     8B 00 06 F6 | 	mov	_var01, ##@LR__5571
1d450     04 E4 05 F1 | 	add	objptr, #4
1d454     F2 00 62 FC | 	wrlong	_var01, objptr
1d458     88 01 00 FF 
1d45c     A2 00 06 F6 | 	mov	_var01, ##@LR__5572
1d460     04 E4 05 F1 | 	add	objptr, #4
1d464     F2 00 62 FC | 	wrlong	_var01, objptr
1d468     88 01 00 FF 
1d46c     BB 00 06 F6 | 	mov	_var01, ##@LR__5573
1d470     04 E4 05 F1 | 	add	objptr, #4
1d474     F2 00 62 FC | 	wrlong	_var01, objptr
1d478     45 00 00 FF 
1d47c     44 E5 85 F1 | 	sub	objptr, ##35652
1d480                 | _init_error_strings_ret
1d480     2D 00 64 FD | 	ret
1d484                 | 
1d484                 | '         
1d484                 | ' sub printerror(err as integer)
1d484                 | _printerror
1d484     01 4A 05 F6 | 	mov	COUNT_, #1
1d488     A8 00 A0 FD | 	call	#pushregs_
1d48c     09 1F 02 F6 | 	mov	local01, arg01
1d490     88 01 00 FF 
1d494     DD 12 06 F6 | 	mov	arg01, ##@LR__5574
1d498     64 20 B0 FD | 	call	#_hg010b_spin2_write
1d49c     0F 13 02 F6 | 	mov	arg01, local01
1d4a0     00 26 B0 FD | 	call	#_hg010b_spin2_inttostr
1d4a4     FD 12 02 F6 | 	mov	arg01, result1
1d4a8     54 20 B0 FD | 	call	#_hg010b_spin2_write
1d4ac     88 01 00 FF 
1d4b0     E4 12 06 F6 | 	mov	arg01, ##@LR__5575
1d4b4     48 20 B0 FD | 	call	#_hg010b_spin2_write
1d4b8     02 1E 66 F0 | 	shl	local01, #2
1d4bc     45 00 00 FF 
1d4c0     7C E4 05 F1 | 	add	objptr, ##35452
1d4c4     F2 1E 02 F1 | 	add	local01, objptr
1d4c8     0F 13 02 FB | 	rdlong	arg01, local01
1d4cc     45 00 00 FF 
1d4d0     7C E4 85 F1 | 	sub	objptr, ##35452
1d4d4                 | ' 
1d4d4                 | ' write(text)
1d4d4     28 20 B0 FD | 	call	#_hg010b_spin2_write
1d4d8                 | ' crlf
1d4d8     24 25 B0 FD | 	call	#_hg010b_spin2_crlf
1d4dc     A7 F0 03 F6 | 	mov	ptra, fp
1d4e0     B2 00 A0 FD | 	call	#popregs_
1d4e4                 | _printerror_ret
1d4e4     2D 00 64 FD | 	ret
1d4e8                 | 
1d4e8                 | ' 
1d4e8                 | ' '' ------------------------------- Hardware start/stop/initialization 
1d4e8                 | ' 
1d4e8                 | ' sub startpsram
1d4e8                 | _startpsram
1d4e8     00 12 06 F6 | 	mov	arg01, #0
1d4ec     0A 14 C6 F9 | 	decod	arg02, #10
1d4f0     0B 16 06 F6 | 	mov	arg03, #11
1d4f4     07 18 06 F6 | 	mov	arg04, #7
1d4f8     0B 00 00 FF 
1d4fc     CC E4 05 F1 | 	add	objptr, ##5836
1d500     AC 26 B0 FD | 	call	#_psram_spin2_startx
1d504     2B 00 00 FF 
1d508     3C E5 05 F1 | 	add	objptr, ##22332
1d50c     F2 FA 61 FC | 	wrlong	result1, objptr
1d510                 | '     return $7FF00 + cog*12
1d510     0C E4 05 F1 | 	add	objptr, #12
1d514     FF 03 80 FF 
1d518     F2 00 6A FC | 	wrlong	##524032, objptr
1d51c     37 00 00 FF 
1d520     14 E4 85 F1 | 	sub	objptr, ##28180
1d524                 | _startpsram_ret
1d524     2D 00 64 FD | 	ret
1d528                 | 
1d528                 | ' 
1d528                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
1d528                 | _startvideo
1d528     01 4A 05 F6 | 	mov	COUNT_, #1
1d52c     A8 00 A0 FD | 	call	#pushregs_
1d530     37 00 00 FF 
1d534     14 E4 05 F1 | 	add	objptr, ##28180
1d538     F2 18 02 FB | 	rdlong	arg04, objptr
1d53c     37 00 00 FF 
1d540     14 E4 85 F1 | 	sub	objptr, ##28180
1d544     0A 13 02 F6 | 	mov	arg01, arg02
1d548     0C 15 02 F6 | 	mov	arg02, arg04
1d54c     A8 07 B0 FD | 	call	#_hg010b_spin2_start
1d550     37 00 00 FF 
1d554     00 E4 05 F1 | 	add	objptr, ##28160
1d558     F2 FA 61 FC | 	wrlong	result1, objptr
1d55c                 | ' 
1d55c                 | ' videocog=v.start(pin,mbox)
1d55c                 | ' 
1d55c                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1d55c     00 1E 06 F6 | 	mov	local01, #0
1d560     2B 00 00 FF 
1d564     34 E5 85 F1 | 	sub	objptr, ##22324
1d568                 | LR__2360
1d568     0F 13 02 F6 | 	mov	arg01, local01
1d56c     00 28 00 FF 
1d570     00 14 06 F6 | 	mov	arg02, ##5242880
1d574     90 2A B0 FD | 	call	#_psram_spin2_setQos
1d578     01 1E 06 F1 | 	add	local01, #1
1d57c     08 1E 56 F2 | 	cmps	local01, #8 wc
1d580     E4 FF 9F CD |  if_b	jmp	#LR__2360
1d584     2B 00 00 FF 
1d588     34 E5 05 F1 | 	add	objptr, ##22324
1d58c     F2 12 02 FB | 	rdlong	arg01, objptr
1d590     7A 00 02 FF 
1d594     00 14 06 F6 | 	mov	arg02, ##67171328
1d598     2B 00 00 FF 
1d59c     34 E5 85 F1 | 	sub	objptr, ##22324
1d5a0     64 2A B0 FD | 	call	#_psram_spin2_setQos
1d5a4     0B 00 00 FF 
1d5a8     CC E4 85 F1 | 	sub	objptr, ##5836
1d5ac                 | ' psram.setQoS(videocog, $0400f400) 
1d5ac                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
1d5ac     F2 14 02 F6 | 	mov	arg02, objptr
1d5b0     00 78 04 FF 
1d5b4     00 14 46 F5 | 	or	arg02, ##149946368
1d5b8     00 16 06 F6 | 	mov	arg03, #0
1d5bc     00 18 06 F6 | 	mov	arg04, #0
1d5c0     00 12 06 F6 | 	mov	arg01, #0
1d5c4     FC 3E B0 FD | 	call	#__system___basic_open
1d5c8                 | ' return videocog
1d5c8     37 00 00 FF 
1d5cc     00 E4 05 F1 | 	add	objptr, ##28160
1d5d0     F2 FA 01 FB | 	rdlong	result1, objptr
1d5d4     37 00 00 FF 
1d5d8     00 E4 85 F1 | 	sub	objptr, ##28160
1d5dc     A7 F0 03 F6 | 	mov	ptra, fp
1d5e0     B2 00 A0 FD | 	call	#popregs_
1d5e4                 | _startvideo_ret
1d5e4     2D 00 64 FD | 	ret
1d5e8                 | 
1d5e8                 | ' 
1d5e8                 | ' 
1d5e8                 | ' 
1d5e8                 | ' 
1d5e8                 | ' '' ------------------------------- Convenient psram peek/poke
1d5e8                 | ' 
1d5e8                 | ' sub pslpoke(addr as ulong,value as ulong)
1d5e8                 | _pslpoke
1d5e8     00 4A 05 F6 | 	mov	COUNT_, #0
1d5ec     A8 00 A0 FD | 	call	#pushregs_
1d5f0     08 F0 07 F1 | 	add	ptra, #8
1d5f4     A7 12 62 FC | 	wrlong	arg01, fp
1d5f8     04 4E 05 F1 | 	add	fp, #4
1d5fc     A7 14 62 FC | 	wrlong	arg02, fp
1d600     A7 12 02 F6 | 	mov	arg01, fp
1d604     04 4E 85 F1 | 	sub	fp, #4
1d608     A7 14 02 FB | 	rdlong	arg02, fp
1d60c     04 16 06 F6 | 	mov	arg03, #4
1d610     0B 00 00 FF 
1d614     CC E4 05 F1 | 	add	objptr, ##5836
1d618     5C 28 B0 FD | 	call	#_psram_spin2_write
1d61c     0B 00 00 FF 
1d620     CC E4 85 F1 | 	sub	objptr, ##5836
1d624     A7 F0 03 F6 | 	mov	ptra, fp
1d628     B2 00 A0 FD | 	call	#popregs_
1d62c                 | _pslpoke_ret
1d62c     2D 00 64 FD | 	ret
1d630                 | 
1d630                 | ' 
1d630                 | ' sub psdpoke(addr as ulong,value as ulong)
1d630                 | _psdpoke
1d630     00 4A 05 F6 | 	mov	COUNT_, #0
1d634     A8 00 A0 FD | 	call	#pushregs_
1d638     08 F0 07 F1 | 	add	ptra, #8
1d63c     A7 12 62 FC | 	wrlong	arg01, fp
1d640     04 4E 05 F1 | 	add	fp, #4
1d644     A7 14 62 FC | 	wrlong	arg02, fp
1d648     A7 12 02 F6 | 	mov	arg01, fp
1d64c     04 4E 85 F1 | 	sub	fp, #4
1d650     A7 14 02 FB | 	rdlong	arg02, fp
1d654     02 16 06 F6 | 	mov	arg03, #2
1d658     0B 00 00 FF 
1d65c     CC E4 05 F1 | 	add	objptr, ##5836
1d660     14 28 B0 FD | 	call	#_psram_spin2_write
1d664     0B 00 00 FF 
1d668     CC E4 85 F1 | 	sub	objptr, ##5836
1d66c     A7 F0 03 F6 | 	mov	ptra, fp
1d670     B2 00 A0 FD | 	call	#popregs_
1d674                 | _psdpoke_ret
1d674     2D 00 64 FD | 	ret
1d678                 | 
1d678                 | ' 
1d678                 | ' sub pspoke(addr as ulong,value as ulong)
1d678                 | _pspoke
1d678     00 4A 05 F6 | 	mov	COUNT_, #0
1d67c     A8 00 A0 FD | 	call	#pushregs_
1d680     08 F0 07 F1 | 	add	ptra, #8
1d684     A7 12 62 FC | 	wrlong	arg01, fp
1d688     04 4E 05 F1 | 	add	fp, #4
1d68c     A7 14 62 FC | 	wrlong	arg02, fp
1d690     A7 12 02 F6 | 	mov	arg01, fp
1d694     04 4E 85 F1 | 	sub	fp, #4
1d698     A7 14 02 FB | 	rdlong	arg02, fp
1d69c     01 16 06 F6 | 	mov	arg03, #1
1d6a0     0B 00 00 FF 
1d6a4     CC E4 05 F1 | 	add	objptr, ##5836
1d6a8     CC 27 B0 FD | 	call	#_psram_spin2_write
1d6ac     0B 00 00 FF 
1d6b0     CC E4 85 F1 | 	sub	objptr, ##5836
1d6b4     A7 F0 03 F6 | 	mov	ptra, fp
1d6b8     B2 00 A0 FD | 	call	#popregs_
1d6bc                 | _pspoke_ret
1d6bc     2D 00 64 FD | 	ret
1d6c0                 | 
1d6c0                 | ' 
1d6c0                 | ' function pspeek(adr as ulong) as ubyte
1d6c0                 | _pspeek
1d6c0     00 4A 05 F6 | 	mov	COUNT_, #0
1d6c4     A8 00 A0 FD | 	call	#pushregs_
1d6c8     0C F0 07 F1 | 	add	ptra, #12
1d6cc     04 4E 05 F1 | 	add	fp, #4
1d6d0     A7 12 62 FC | 	wrlong	arg01, fp
1d6d4     04 4E 05 F1 | 	add	fp, #4
1d6d8     A7 12 02 F6 | 	mov	arg01, fp
1d6dc     04 4E 85 F1 | 	sub	fp, #4
1d6e0     A7 14 02 FB | 	rdlong	arg02, fp
1d6e4     04 4E 85 F1 | 	sub	fp, #4
1d6e8     01 16 06 F6 | 	mov	arg03, #1
1d6ec     0B 00 00 FF 
1d6f0     CC E4 05 F1 | 	add	objptr, ##5836
1d6f4     E4 26 B0 FD | 	call	#_psram_spin2_read1
1d6f8     0B 00 00 FF 
1d6fc     CC E4 85 F1 | 	sub	objptr, ##5836
1d700                 | ' psram.read1(varptr(res),adr,1)
1d700                 | ' return res
1d700     08 4E 05 F1 | 	add	fp, #8
1d704     A7 FA C1 FA | 	rdbyte	result1, fp
1d708     08 4E 85 F1 | 	sub	fp, #8
1d70c     A7 F0 03 F6 | 	mov	ptra, fp
1d710     B2 00 A0 FD | 	call	#popregs_
1d714                 | _pspeek_ret
1d714     2D 00 64 FD | 	ret
1d718                 | 
1d718                 | ' 
1d718                 | ' function pslpeek(adr as ulong) as ulong
1d718                 | _pslpeek
1d718     00 4A 05 F6 | 	mov	COUNT_, #0
1d71c     A8 00 A0 FD | 	call	#pushregs_
1d720     0C F0 07 F1 | 	add	ptra, #12
1d724     04 4E 05 F1 | 	add	fp, #4
1d728     A7 12 62 FC | 	wrlong	arg01, fp
1d72c     04 4E 05 F1 | 	add	fp, #4
1d730     A7 12 02 F6 | 	mov	arg01, fp
1d734     04 4E 85 F1 | 	sub	fp, #4
1d738     A7 14 02 FB | 	rdlong	arg02, fp
1d73c     04 4E 85 F1 | 	sub	fp, #4
1d740     04 16 06 F6 | 	mov	arg03, #4
1d744     0B 00 00 FF 
1d748     CC E4 05 F1 | 	add	objptr, ##5836
1d74c     8C 26 B0 FD | 	call	#_psram_spin2_read1
1d750     0B 00 00 FF 
1d754     CC E4 85 F1 | 	sub	objptr, ##5836
1d758                 | ' psram.read1(varptr(res),adr,4)
1d758                 | ' return res
1d758     08 4E 05 F1 | 	add	fp, #8
1d75c     A7 FA 01 FB | 	rdlong	result1, fp
1d760     08 4E 85 F1 | 	sub	fp, #8
1d764     A7 F0 03 F6 | 	mov	ptra, fp
1d768     B2 00 A0 FD | 	call	#popregs_
1d76c                 | _pslpeek_ret
1d76c     2D 00 64 FD | 	ret
1d770                 | 
1d770                 | ' 
1d770                 | ' function psdpeek(adr as ulong) as ulong
1d770                 | _psdpeek
1d770     00 4A 05 F6 | 	mov	COUNT_, #0
1d774     A8 00 A0 FD | 	call	#pushregs_
1d778     0C F0 07 F1 | 	add	ptra, #12
1d77c     04 4E 05 F1 | 	add	fp, #4
1d780     A7 12 62 FC | 	wrlong	arg01, fp
1d784     04 4E 05 F1 | 	add	fp, #4
1d788     A7 12 02 F6 | 	mov	arg01, fp
1d78c     04 4E 85 F1 | 	sub	fp, #4
1d790     A7 14 02 FB | 	rdlong	arg02, fp
1d794     04 4E 85 F1 | 	sub	fp, #4
1d798     02 16 06 F6 | 	mov	arg03, #2
1d79c     0B 00 00 FF 
1d7a0     CC E4 05 F1 | 	add	objptr, ##5836
1d7a4     34 26 B0 FD | 	call	#_psram_spin2_read1
1d7a8     0B 00 00 FF 
1d7ac     CC E4 85 F1 | 	sub	objptr, ##5836
1d7b0                 | ' psram.read1(varptr(res),adr,2)
1d7b0                 | ' return res
1d7b0     08 4E 05 F1 | 	add	fp, #8
1d7b4     A7 FA E1 FA | 	rdword	result1, fp
1d7b8     08 4E 85 F1 | 	sub	fp, #8
1d7bc     A7 F0 03 F6 | 	mov	ptra, fp
1d7c0     B2 00 A0 FD | 	call	#popregs_
1d7c4                 | _psdpeek_ret
1d7c4     2D 00 64 FD | 	ret
1d7c8                 | 
1d7c8                 | ' 
1d7c8                 | ' '' ------------------------------- USB keyboard scan to char translator
1d7c8                 | ' 
1d7c8                 | ' function scantochar(key)
1d7c8                 | _scantochar
1d7c8                 | ' 
1d7c8                 | ' select case (key shr 8) and 255
1d7c8     09 01 02 F6 | 	mov	_var01, arg01
1d7cc     08 00 C6 F0 | 	sar	_var01, #8
1d7d0     FF 00 0E F5 | 	and	_var01, #255 wz
1d7d4     24 00 90 AD |  if_e	jmp	#LR__2370
1d7d8     02 00 0E F2 | 	cmp	_var01, #2 wz
1d7dc     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
1d7e0     30 00 90 AD |  if_e	jmp	#LR__2371
1d7e4     40 00 0E F2 | 	cmp	_var01, #64 wz
1d7e8     44 00 90 AD |  if_e	jmp	#LR__2372
1d7ec     42 00 0E F2 | 	cmp	_var01, #66 wz
1d7f0     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
1d7f4     70 00 90 5D |  if_ne	jmp	#LR__2374
1d7f8     50 00 90 FD | 	jmp	#LR__2373
1d7fc                 | LR__2370
1d7fc     09 FB 01 F6 | 	mov	result1, arg01
1d800     7F FA 05 F5 | 	and	result1, #127
1d804     02 FA 65 F0 | 	shl	result1, #2
1d808     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d80c     FD FA C1 FA | 	rdbyte	result1, result1
1d810     54 00 90 FD | 	jmp	#_scantochar_ret
1d814                 | LR__2371
1d814     09 FB 01 F6 | 	mov	result1, arg01
1d818     7F FA 05 F5 | 	and	result1, #127
1d81c     02 FA 65 F0 | 	shl	result1, #2
1d820     01 FA 05 F1 | 	add	result1, #1
1d824     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d828     FD FA C1 FA | 	rdbyte	result1, result1
1d82c     38 00 90 FD | 	jmp	#_scantochar_ret
1d830                 | LR__2372
1d830     09 FB 01 F6 | 	mov	result1, arg01
1d834     7F FA 05 F5 | 	and	result1, #127
1d838     02 FA 65 F0 | 	shl	result1, #2
1d83c     02 FA 05 F1 | 	add	result1, #2
1d840     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d844     FD FA C1 FA | 	rdbyte	result1, result1
1d848     1C 00 90 FD | 	jmp	#_scantochar_ret
1d84c                 | LR__2373
1d84c     09 FB 01 F6 | 	mov	result1, arg01
1d850     7F FA 05 F5 | 	and	result1, #127
1d854     02 FA 65 F0 | 	shl	result1, #2
1d858     03 FA 05 F1 | 	add	result1, #3
1d85c     F5 FA 01 F1 | 	add	result1, ptr__dat__
1d860     FD FA C1 FA | 	rdbyte	result1, result1
1d864     00 00 90 FD | 	jmp	#_scantochar_ret
1d868                 | LR__2374
1d868                 | _scantochar_ret
1d868     2D 00 64 FD | 	ret
1d86c                 | 
1d86c                 | _program
1d86c     01 4A 05 F6 | 	mov	COUNT_, #1
1d870     A8 00 A0 FD | 	call	#pushregs_
1d874     70 FC BF FD | 	call	#_startpsram
1d878     40 12 06 F6 | 	mov	arg01, #64
1d87c     00 14 06 F6 | 	mov	arg02, #0
1d880     00 16 06 F6 | 	mov	arg03, #0
1d884     A0 FC BF FD | 	call	#_startvideo
1d888     37 00 00 FF 
1d88c     14 E4 05 F1 | 	add	objptr, ##28180
1d890     F2 12 02 FB | 	rdlong	arg01, objptr
1d894     00 14 06 F6 | 	mov	arg02, #0
1d898     FB 03 00 FF 
1d89c     00 17 06 F6 | 	mov	arg03, ##521984
1d8a0     2B 00 00 FF 
1d8a4     48 E5 85 F1 | 	sub	objptr, ##22344
1d8a8     0C 2B B0 FD | 	call	#_audio096_spin2_start
1d8ac     FE 16 02 F6 | 	mov	arg03, result2
1d8b0     2B 00 00 FF 
1d8b4     30 E5 05 F1 | 	add	objptr, ##22320
1d8b8     F2 FA 61 FC | 	wrlong	result1, objptr
1d8bc     14 E4 05 F1 | 	add	objptr, #20
1d8c0     F2 16 62 FC | 	wrlong	arg03, objptr
1d8c4     37 00 00 FF 
1d8c8     10 E4 85 F1 | 	sub	objptr, ##28176
1d8cc     32 12 06 F6 | 	mov	arg01, #50
1d8d0     3C 34 B0 FD | 	call	#__system___waitms
1d8d4     37 00 00 FF 
1d8d8     10 E4 05 F1 | 	add	objptr, ##28176
1d8dc     F2 12 02 FB | 	rdlong	arg01, objptr
1d8e0     37 00 00 FF 
1d8e4     10 E4 85 F1 | 	sub	objptr, ##28176
1d8e8     14 12 06 F1 | 	add	arg01, #20
1d8ec     20 00 80 FF 
1d8f0     09 01 58 FC | 	wrword	##16384, arg01
1d8f4     18 28 B0 FD | 	call	#_usbnew_spin2_start
1d8f8     37 00 00 FF 
1d8fc     04 E4 05 F1 | 	add	objptr, ##28164
1d900     F2 FA 61 FC | 	wrlong	result1, objptr
1d904                 | '   mouse_limits[0] := xlim
1d904     0F 00 00 FF 
1d908     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
1d90c     01 00 80 FF 
1d910     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
1d914                 | '   mouse_limits[1] := ylim
1d914     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1d918     01 00 80 FF 
1d91c     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
1d920     36 00 00 FF 
1d924     F3 E4 85 F1 | 	sub	objptr, ##27891
1d928     F2 12 02 F6 | 	mov	arg01, objptr
1d92c     11 E5 85 F1 | 	sub	objptr, #273
1d930     C4 12 06 F1 | 	add	arg01, #196
1d934                 | '   mouse_outptr := ptr
1d934     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1d938     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
1d93c     0F 00 00 FF 
1d940     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1d944     0E 00 00 FF 
1d948     B6 EA 05 F1 | 	add	ptr__dat__, ##7350
1d94c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1d950     0E 00 00 FF 
1d954     B6 EA 85 F1 | 	sub	ptr__dat__, ##7350
1d958     10 12 06 F6 | 	mov	arg01, #16
1d95c     30 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
1d960     10 12 06 F6 | 	mov	arg01, #16
1d964     20 14 06 F6 | 	mov	arg02, #32
1d968     20 16 06 F6 | 	mov	arg03, #32
1d96c     B0 0A B0 FD | 	call	#_hg010b_spin2_setspritesize
1d970     09 12 C6 F9 | 	decod	arg01, #9
1d974     2C 15 06 F6 | 	mov	arg02, #300
1d978     EC 28 B0 FD | 	call	#_usbnew_spin2_mouse_move
1d97c     F2 16 02 F6 | 	mov	arg03, objptr
1d980     50 00 00 FF 
1d984     18 E5 05 F1 | 	add	objptr, ##41240
1d988     F2 14 02 F6 | 	mov	arg02, objptr
1d98c     0A 17 62 FC | 	wrlong	arg03, arg02
1d990     04 14 06 F1 | 	add	arg02, #4
1d994     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
1d998     EF 14 02 F6 | 	mov	arg02, entryptr__
1d99c     1E FA 05 F6 | 	mov	result1, #30
1d9a0     28 E4 61 FD | 	setq	objptr
1d9a4     0A FB F1 FC | 	coginit	result1, arg02 wc
1d9a8     01 FA 65 C6 |  if_b	neg	result1, #1
1d9ac     04 E4 85 F1 | 	sub	objptr, #4
1d9b0     F2 FA 61 FC | 	wrlong	result1, objptr
1d9b4     01 00 00 FF 
1d9b8     90 E4 05 F1 | 	add	objptr, ##656
1d9bc     F2 00 68 FC | 	wrlong	#0, objptr
1d9c0     1A 00 00 FF 
1d9c4     70 E5 85 F1 | 	sub	objptr, ##13680
1d9c8     F2 04 68 FC | 	wrlong	#2, objptr
1d9cc     04 E4 05 F1 | 	add	objptr, #4
1d9d0     F2 26 69 FC | 	wrlong	#147, objptr
1d9d4     04 E4 05 F1 | 	add	objptr, #4
1d9d8     F2 34 69 FC | 	wrlong	#154, objptr
1d9dc     04 E4 05 F1 | 	add	objptr, #4
1d9e0     F2 08 68 FC | 	wrlong	#4, objptr
1d9e4     04 E4 85 F1 | 	sub	objptr, #4
1d9e8     F2 16 02 FB | 	rdlong	arg03, objptr
1d9ec     14 E4 85 F1 | 	sub	objptr, #20
1d9f0     F2 16 62 FC | 	wrlong	arg03, objptr
1d9f4     04 E4 05 F1 | 	add	objptr, #4
1d9f8     F2 00 68 FC | 	wrlong	#0, objptr
1d9fc     04 E4 05 F1 | 	add	objptr, #4
1da00     F2 00 68 FC | 	wrlong	#0, objptr
1da04     19 00 00 FF 
1da08     E0 E4 05 F1 | 	add	objptr, ##13024
1da0c     F2 02 68 FC | 	wrlong	#1, objptr
1da10     01 00 00 FF 
1da14     9C E4 05 F1 | 	add	objptr, ##668
1da18     F2 00 68 FC | 	wrlong	#0, objptr
1da1c     01 00 00 FF 
1da20     00 EA 05 F1 | 	add	ptr__dat__, ##512
1da24     08 E4 05 F1 | 	add	objptr, #8
1da28     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1da2c     04 E4 85 F1 | 	sub	objptr, #4
1da30     03 00 80 FF 
1da34     F2 3C 69 FC | 	wrlong	##1694, objptr
1da38     0C 00 00 FF 
1da3c     4C E5 85 F1 | 	sub	objptr, ##6476
1da40     F2 18 68 FC | 	wrlong	#12, objptr
1da44     45 00 00 FF 
1da48     64 E4 85 F1 | 	sub	objptr, ##35428
1da4c     01 00 00 FF 
1da50     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1da54     2C DB BF FD | 	call	#_init_commands
1da58     E8 F6 BF FD | 	call	#_init_error_strings
1da5c     E4 ED BF FD | 	call	#_init_audio
1da60     A0 22 BF FD | 	call	#_do_new
1da64     37 00 00 FF 
1da68     3C E4 05 F1 | 	add	objptr, ##28220
1da6c     F2 12 02 FB | 	rdlong	arg01, objptr
1da70     04 E4 85 F1 | 	sub	objptr, #4
1da74     F2 14 02 FB | 	rdlong	arg02, objptr
1da78     37 00 00 FF 
1da7c     38 E4 85 F1 | 	sub	objptr, ##28216
1da80     BC 16 B0 FD | 	call	#_hg010b_spin2_cls
1da84     37 00 00 FF 
1da88     40 E4 05 F1 | 	add	objptr, ##28224
1da8c     F2 12 02 FB | 	rdlong	arg01, objptr
1da90     37 00 00 FF 
1da94     40 E4 85 F1 | 	sub	objptr, ##28224
1da98     54 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1da9c                 | ' 
1da9c                 | ' leading_spaces:=amount
1da9c     01 00 00 FF 
1daa0     B6 E4 05 F1 | 	add	objptr, ##694
1daa4     F2 04 68 FC | 	wrlong	#2, objptr
1daa8     01 00 00 FF 
1daac     B6 E4 85 F1 | 	sub	objptr, ##694
1dab0     88 01 00 FF 
1dab4     E7 1E 06 F6 | 	mov	local01, ##@LR__5576
1dab8     3D 12 06 F6 | 	mov	arg01, #61
1dabc     3C 14 06 F6 | 	mov	arg02, #60
1dac0     3B 16 06 F6 | 	mov	arg03, #59
1dac4     3A 18 06 F6 | 	mov	arg04, #58
1dac8     EC 79 B0 FD | 	call	#__system___vfs_open_sdcardx
1dacc     FD 14 02 F6 | 	mov	arg02, result1
1dad0     0F 13 02 F6 | 	mov	arg01, local01
1dad4     10 33 B0 FD | 	call	#__system___mount
1dad8     88 01 00 FF 
1dadc     EB 12 06 F6 | 	mov	arg01, ##@LR__5577
1dae0     C4 35 B0 FD | 	call	#__system___chdir
1dae4     88 01 00 FF 
1dae8     F3 1E 06 F6 | 	mov	local01, ##@LR__5578
1daec     4A 00 00 FF 
1daf0     90 E4 05 F1 | 	add	objptr, ##38032
1daf4     F2 1E 62 FC | 	wrlong	local01, objptr
1daf8     13 00 00 FF 
1dafc     5C E4 85 F1 | 	sub	objptr, ##9820
1db00     F2 12 02 FB | 	rdlong	arg01, objptr
1db04     37 00 00 FF 
1db08     34 E4 85 F1 | 	sub	objptr, ##28212
1db0c     01 12 66 F0 | 	shl	arg01, #1
1db10     01 14 06 F6 | 	mov	arg02, #1
1db14     18 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1db18                 | ' init_commands
1db18                 | ' init_error_strings
1db18                 | ' init_audio
1db18                 | ' do_new
1db18                 | ' cls(ink, paper)
1db18                 | ' v.setfontfamily(font) 				' use ST Mono font
1db18                 | ' v.setleadingspaces(2)
1db18                 | ' mount "/sd", _vfs_open_sdcard()
1db18                 | ' chdir "/sd/bas"
1db18                 | ' currentdir$="/sd/bas"
1db18                 | ' position 2*editor_spaces,1 : print ver$
1db18     00 12 06 F6 | 	mov	arg01, #0
1db1c     3C 89 B0 FD | 	call	#__system___getiolock_0540
1db20     FD 12 02 F6 | 	mov	arg01, result1
1db24     F4 2E B0 FD | 	call	#__system___lockmem
1db28     18 00 00 FF 
1db2c     4C EB 05 F1 | 	add	ptr__dat__, ##12620
1db30     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
1db34     18 00 00 FF 
1db38     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
1db3c     00 12 06 F6 | 	mov	arg01, #0
1db40     00 16 06 F6 | 	mov	arg03, #0
1db44     C8 3B B0 FD | 	call	#__system___basic_print_string
1db48     00 12 06 F6 | 	mov	arg01, #0
1db4c     0A 14 06 F6 | 	mov	arg02, #10
1db50     00 16 06 F6 | 	mov	arg03, #0
1db54     60 3B B0 FD | 	call	#__system___basic_print_char
1db58     00 12 06 F6 | 	mov	arg01, #0
1db5c     FC 88 B0 FD | 	call	#__system___getiolock_0540
1db60     FD 00 68 FC | 	wrlong	#0, result1
1db64     51 00 00 FF 
1db68     A8 E5 05 F1 | 	add	objptr, ##41896
1db6c     F2 12 02 FB | 	rdlong	arg01, objptr
1db70     0E 00 00 FF 
1db74     4C E5 85 F1 | 	sub	objptr, ##7500
1db78     F2 1E 02 FB | 	rdlong	local01, objptr
1db7c     43 00 00 FF 
1db80     5C E4 85 F1 | 	sub	objptr, ##34396
1db84     0F 13 82 F1 | 	sub	arg01, local01
1db88     00 14 06 F6 | 	mov	arg02, #0
1db8c     0A 16 06 F6 | 	mov	arg03, #10
1db90     58 51 B0 FD | 	call	#__system__Number_S
1db94     FD 12 02 F6 | 	mov	arg01, result1
1db98     88 01 00 FF 
1db9c     FB 14 06 F6 | 	mov	arg02, ##@LR__5579
1dba0     D4 2E B0 FD | 	call	#__system___string_concat
1dba4     FD 1E 02 F6 | 	mov	local01, result1
1dba8     50 00 00 FF 
1dbac     0C E5 05 F1 | 	add	objptr, ##41228
1dbb0     F2 1E 62 FC | 	wrlong	local01, objptr
1dbb4     50 00 00 FF 
1dbb8     0C E5 85 F1 | 	sub	objptr, ##41228
1dbbc                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
1dbbc     00 12 06 F6 | 	mov	arg01, #0
1dbc0     98 88 B0 FD | 	call	#__system___getiolock_0540
1dbc4     FD 12 02 F6 | 	mov	arg01, result1
1dbc8     50 2E B0 FD | 	call	#__system___lockmem
1dbcc     50 00 00 FF 
1dbd0     0C E5 05 F1 | 	add	objptr, ##41228
1dbd4     F2 14 02 FB | 	rdlong	arg02, objptr
1dbd8     50 00 00 FF 
1dbdc     0C E5 85 F1 | 	sub	objptr, ##41228
1dbe0     00 12 06 F6 | 	mov	arg01, #0
1dbe4     00 16 06 F6 | 	mov	arg03, #0
1dbe8     24 3B B0 FD | 	call	#__system___basic_print_string
1dbec     00 12 06 F6 | 	mov	arg01, #0
1dbf0     0A 14 06 F6 | 	mov	arg02, #10
1dbf4     00 16 06 F6 | 	mov	arg03, #0
1dbf8     BC 3A B0 FD | 	call	#__system___basic_print_char
1dbfc     00 12 06 F6 | 	mov	arg01, #0
1dc00     58 88 B0 FD | 	call	#__system___getiolock_0540
1dc04     FD 00 68 FC | 	wrlong	#0, result1
1dc08     37 00 00 FF 
1dc0c     34 E4 05 F1 | 	add	objptr, ##28212
1dc10     F2 12 02 FB | 	rdlong	arg01, objptr
1dc14     37 00 00 FF 
1dc18     34 E4 85 F1 | 	sub	objptr, ##28212
1dc1c     01 12 66 F0 | 	shl	arg01, #1
1dc20     04 14 06 F6 | 	mov	arg02, #4
1dc24     08 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1dc28                 | ' position 2*editor_spaces,4 : print "Ready"
1dc28     00 12 06 F6 | 	mov	arg01, #0
1dc2c     2C 88 B0 FD | 	call	#__system___getiolock_0540
1dc30     FD 12 02 F6 | 	mov	arg01, result1
1dc34     E4 2D B0 FD | 	call	#__system___lockmem
1dc38     88 01 00 FF 
1dc3c     0D 15 06 F6 | 	mov	arg02, ##@LR__5580
1dc40     00 12 06 F6 | 	mov	arg01, #0
1dc44     00 16 06 F6 | 	mov	arg03, #0
1dc48     C4 3A B0 FD | 	call	#__system___basic_print_string
1dc4c     00 12 06 F6 | 	mov	arg01, #0
1dc50     0A 14 06 F6 | 	mov	arg02, #10
1dc54     00 16 06 F6 | 	mov	arg03, #0
1dc58     5C 3A B0 FD | 	call	#__system___basic_print_char
1dc5c     00 12 06 F6 | 	mov	arg01, #0
1dc60     F8 87 B0 FD | 	call	#__system___getiolock_0540
1dc64     FD 00 68 FC | 	wrlong	#0, result1
1dc68     00 14 06 F6 | 	mov	arg02, #0
1dc6c     01 14 D6 F7 | 	test	arg02, #1 wc
1dc70     5A 4C 64 FD | 	drvc	#38
1dc74     01 14 D6 F7 | 	test	arg02, #1 wc
1dc78     5A 4E 64 FD | 	drvc	#39
1dc7c     88 01 00 FF 
1dc80     13 1F 06 F6 | 	mov	local01, ##@LR__5581
1dc84     51 00 00 FF 
1dc88     D4 E5 05 F1 | 	add	objptr, ##41940
1dc8c     F2 1E 62 FC | 	wrlong	local01, objptr
1dc90     04 E4 05 F1 | 	add	objptr, #4
1dc94     FF FF FF FF 
1dc98     F2 FE 6B FC | 	wrlong	##-1, objptr
1dc9c     51 00 00 FF 
1dca0     D8 E5 85 F1 | 	sub	objptr, ##41944
1dca4                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
1dca4                 | ' loadname="noname.bas"
1dca4                 | ' do_insert=-1
1dca4                 | ' 
1dca4                 | ' '-------------------------------------------------------------------------------------------------------- 
1dca4                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
1dca4                 | ' '--------------------------------------------------------------------------------------------------------
1dca4                 | ' 
1dca4                 | ' do
1dca4                 | LR__2380
1dca4     01 12 06 F6 | 	mov	arg01, #1
1dca8     24 14 B0 FD | 	call	#_hg010b_spin2_waitvbl
1dcac     54 2B BE FD | 	call	#_edit
1dcb0     FD 1E 02 F6 | 	mov	local01, result1
1dcb4     37 00 00 FF 
1dcb8     1C E4 05 F1 | 	add	objptr, ##28188
1dcbc     F2 1E 62 FC | 	wrlong	local01, objptr
1dcc0     37 00 00 FF 
1dcc4     1C E4 85 F1 | 	sub	objptr, ##28188
1dcc8     AC 39 BE FD | 	call	#_interpret
1dccc     88 01 00 FF 
1dcd0     1E 1F 06 F6 | 	mov	local01, ##@LR__5582
1dcd4     37 00 00 FF 
1dcd8     1C E4 05 F1 | 	add	objptr, ##28188
1dcdc     F2 1E 62 FC | 	wrlong	local01, objptr
1dce0     37 00 00 FF 
1dce4     1C E4 85 F1 | 	sub	objptr, ##28188
1dce8     B8 FF 9F FD | 	jmp	#LR__2380
1dcec     A7 F0 03 F6 | 	mov	ptra, fp
1dcf0     B2 00 A0 FD | 	call	#popregs_
1dcf4                 | _program_ret
1dcf4     2D 00 64 FD | 	ret
1dcf8                 | 
1dcf8                 | ' '' this is not a main program.
1dcf8                 | ' 
1dcf8                 | ' '****************************************************************************************************************
1dcf8                 | ' '                                                                                                             	*
1dcf8                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
1dcf8                 | ' '                                                                                                            	*
1dcf8                 | ' ' base - HDMI base pin												*
1dcf8                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1dcf8                 | ' '														*
1dcf8                 | ' '														*
1dcf8                 | ' '****************************************************************************************************************
1dcf8                 | ' 
1dcf8                 | ' pub start(base,mb):result |i
1dcf8                 | _hg010b_spin2_start
1dcf8                 | ' 
1dcf8                 | ' '--------------------------- initialize pointers and variables
1dcf8                 | ' 
1dcf8                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1dcf8     34 E4 05 F1 | 	add	objptr, #52
1dcfc     F2 FA 01 F6 | 	mov	result1, objptr
1dd00     28 E4 85 F1 | 	sub	objptr, #40
1dd04     F2 FA 61 FC | 	wrlong	result1, objptr
1dd08                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1dd08                 | ' hdmibase:=base							' HDMI base pin, 8*n
1dd08     18 E4 05 F1 | 	add	objptr, #24
1dd0c     F2 12 62 FC | 	wrlong	arg01, objptr
1dd10                 | ' mailbox_ptr:=mb		
1dd10     04 E4 05 F1 | 	add	objptr, #4
1dd14     F2 14 62 FC | 	wrlong	arg02, objptr
1dd18                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1dd18     C1 E5 05 F1 | 	add	objptr, #449
1dd1c     F2 14 62 FC | 	wrlong	arg02, objptr
1dd20                 | ' sprite_ptr:=@spr1ptr
1dd20     D8 E4 85 F1 | 	sub	objptr, #216
1dd24     F2 FA 01 F6 | 	mov	result1, objptr
1dd28     E5 E4 85 F1 | 	sub	objptr, #229
1dd2c     F2 FA 61 FC | 	wrlong	result1, objptr
1dd30                 | ' 
1dd30                 | ' 		'
1dd30                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1dd30     E5 E4 05 F1 | 	add	objptr, #229
1dd34     F2 FA 01 FB | 	rdlong	result1, objptr
1dd38     D0 FA 05 F1 | 	add	result1, #208
1dd3c     FD 10 58 FC | 	wrword	#8, result1
1dd40                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1dd40     F2 16 02 FB | 	rdlong	arg03, objptr
1dd44     D2 16 06 F1 | 	add	arg03, #210
1dd48     0B 21 58 FC | 	wrword	#16, arg03
1dd4c                 | ' leading_spaces:=0				'
1dd4c     A5 E5 05 F1 | 	add	objptr, #421
1dd50     F2 00 68 FC | 	wrlong	#0, objptr
1dd54                 | ' 
1dd54                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1dd54     99 E4 85 F1 | 	sub	objptr, #153
1dd58     00 00 A0 FF 
1dd5c     F2 0E 68 FC | 	wrlong	##1073741831, objptr
1dd60                 | ' emptydl[1]:=0
1dd60     04 E4 05 F1 | 	add	objptr, #4
1dd64     F2 00 68 FC | 	wrlong	#0, objptr
1dd68                 | ' 
1dd68                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1dd68                 | ' 
1dd68                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1dd68     28 E5 85 F1 | 	sub	objptr, #296
1dd6c     F2 02 68 FC | 	wrlong	#1, objptr
1dd70                 | ' if s_debug<>0
1dd70                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
1dd70     20 00 80 FF 
1dd74     F2 00 68 FC | 	wrlong	##16384, objptr
1dd78     F9 E4 85 F1 | 	sub	objptr, #249
1dd7c                 | ' setmode()							' set the mode, see below
1dd7c     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
1dd80                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
1dd80     49 E4 05 F1 | 	add	objptr, #73
1dd84     F2 FA 01 F6 | 	mov	result1, objptr
1dd88     35 E4 85 F1 | 	sub	objptr, #53
1dd8c     F2 FA 61 FC | 	wrlong	result1, objptr
1dd90                 | ' cursor_ptr:=@cursor_x						
1dd90     28 E4 05 F1 | 	add	objptr, #40
1dd94     F2 16 02 F6 | 	mov	arg03, objptr
1dd98     2C E4 85 F1 | 	sub	objptr, #44
1dd9c     F2 16 62 FC | 	wrlong	arg03, objptr
1dda0                 | ' fontnum:=0  							' start with a PC type font 
1dda0     55 E4 05 F1 | 	add	objptr, #85
1dda4     F2 00 68 FC | 	wrlong	#0, objptr
1dda8                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1dda8     1C E4 05 F1 | 	add	objptr, #28
1ddac     F2 12 02 F6 | 	mov	arg01, objptr
1ddb0     81 E4 85 F1 | 	sub	objptr, #129
1ddb4     10 00 00 FF 
1ddb8     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1ddbc     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1ddc0     10 00 00 FF 
1ddc4     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1ddc8     10 16 06 F6 | 	mov	arg03, #16
1ddcc     6C 2B B0 FD | 	call	#__system____builtin_memmove
1ddd0                 | ' leading_spaces:=0
1ddd0     01 00 00 FF 
1ddd4     B6 E4 05 F1 | 	add	objptr, ##694
1ddd8     F2 00 68 FC | 	wrlong	#0, objptr
1dddc     01 00 00 FF 
1dde0     B6 E4 85 F1 | 	sub	objptr, ##694
1dde4                 | ' '---------------------------- initialize a cursor (MSDOS type)
1dde4                 | ' 
1dde4                 | ' initcursor(154)
1dde4     9A 12 06 F6 | 	mov	arg01, #154
1dde8     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
1ddec                 | ' 
1ddec                 | ' '---------------------------- start the cog
1ddec                 | ' 
1ddec                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
1ddec     10 00 00 FF 
1ddf0     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1ddf4     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1ddf8     10 00 00 FF 
1ddfc     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1de00     14 E4 05 F1 | 	add	objptr, #20
1de04     10 FA 05 F6 | 	mov	result1, #16
1de08     28 E4 61 FD | 	setq	objptr
1de0c     0A FB F1 FC | 	coginit	result1, arg02 wc
1de10     01 FA 65 C6 |  if_b	neg	result1, #1
1de14     1C E4 05 F1 | 	add	objptr, #28
1de18     F2 FA 61 FC | 	wrlong	result1, objptr
1de1c     30 E4 85 F1 | 	sub	objptr, #48
1de20                 | ' waitms(40)							' wait for stabilize
1de20     28 12 06 F6 | 	mov	arg01, #40
1de24     E8 2E B0 FD | 	call	#__system___waitms
1de28                 | ' return cog							' return the driver's cog #
1de28     30 E4 05 F1 | 	add	objptr, #48
1de2c     F2 FA 01 FB | 	rdlong	result1, objptr
1de30     30 E4 85 F1 | 	sub	objptr, #48
1de34                 | _hg010b_spin2_start_ret
1de34     2D 00 64 FD | 	ret
1de38                 | 
1de38                 | ' 
1de38                 | ' 
1de38                 | ' '**************************************************************************************************************** 
1de38                 | ' '                                                                                                             	*
1de38                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
1de38                 | ' '  Mode number - see start() above or bits below								*
1de38                 | ' '                                                                                                             	*
1de38                 | ' '****************************************************************************************************************
1de38                 | ' 
1de38                 | ' '---------------------------- initialize a cursor (MSDOS type)
1de38                 | ' pub initcursor(color) |i
1de38                 | _hg010b_spin2_initcursor
1de38     03 4A 05 F6 | 	mov	COUNT_, #3
1de3c     A8 00 A0 FD | 	call	#pushregs_
1de40     09 1F 02 F6 | 	mov	local01, arg01
1de44                 | ' 
1de44                 | ' cursor_x:=0							' place the cursor at 0:0
1de44     3C E4 05 F1 | 	add	objptr, #60
1de48     F2 00 58 FC | 	wrword	#0, objptr
1de4c                 | ' cursor_y:=0
1de4c     02 E4 05 F1 | 	add	objptr, #2
1de50     F2 00 48 FC | 	wrbyte	#0, objptr
1de54                 | ' repeat i from 0 to 111
1de54     00 20 06 F6 | 	mov	local02, #0
1de58     F8 E5 05 F1 | 	add	objptr, #504
1de5c     97 1A 48 FB | 	callpa	#(@LR__2392-@LR__2390)>>2,fcache_load_ptr_
1de60                 | LR__2390
1de60                 | '   cursor[i]:=0
1de60     10 23 02 F6 | 	mov	local03, local02
1de64     F2 22 02 F1 | 	add	local03, objptr
1de68     11 01 48 FC | 	wrbyte	#0, local03
1de6c     01 20 06 F1 | 	add	local02, #1
1de70     70 20 56 F2 | 	cmps	local02, #112 wc
1de74     E8 FF 9F CD |  if_b	jmp	#LR__2390
1de78                 | ' repeat i from 112 to 127
1de78     70 20 06 F6 | 	mov	local02, #112
1de7c                 | LR__2391
1de7c                 | '   cursor[i]:=color  
1de7c     10 23 02 F6 | 	mov	local03, local02
1de80     F2 22 02 F1 | 	add	local03, objptr
1de84     11 1F 42 FC | 	wrbyte	local01, local03
1de88     01 20 06 F1 | 	add	local02, #1
1de8c     80 20 16 F2 | 	cmp	local02, #128 wc
1de90     E8 FF 9F CD |  if_b	jmp	#LR__2391
1de94                 | LR__2392
1de94                 | ' 'repeat i from 0 to 127
1de94                 | ' '  if ((i/8)//2)
1de94                 | ' '    cursor[i]:=15
1de94                 | ' '  else
1de94                 | ' '    cursor[i]:=0
1de94                 | ' '  if i>=120    
1de94                 | ' '    cursor[i]:=40
1de94                 | ' setspriteptr(17,@cursor)
1de94     F2 14 02 F6 | 	mov	arg02, objptr
1de98     01 00 00 FF 
1de9c     36 E4 85 F1 | 	sub	objptr, ##566
1dea0     11 12 06 F6 | 	mov	arg01, #17
1dea4     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1dea8                 | ' setspritesize(17,8,16)
1dea8     11 12 06 F6 | 	mov	arg01, #17
1deac     08 14 06 F6 | 	mov	arg02, #8
1deb0     10 16 06 F6 | 	mov	arg03, #16
1deb4     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
1deb8                 | ' setspritepos(17,0,0)
1deb8     11 12 06 F6 | 	mov	arg01, #17
1debc     00 14 06 F6 | 	mov	arg02, #0
1dec0     00 16 06 F6 | 	mov	arg03, #0
1dec4     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
1dec8                 | ' cursorshape:=14
1dec8     0B 00 00 FF 
1decc     C6 E4 05 F1 | 	add	objptr, ##5830
1ded0     F2 1C 68 FC | 	wrlong	#14, objptr
1ded4                 | ' cursorcolor:=color
1ded4     04 E4 85 F1 | 	sub	objptr, #4
1ded8     F2 1E 62 FC | 	wrlong	local01, objptr
1dedc     0B 00 00 FF 
1dee0     C2 E4 85 F1 | 	sub	objptr, ##5826
1dee4     A7 F0 03 F6 | 	mov	ptra, fp
1dee8     B2 00 A0 FD | 	call	#popregs_
1deec                 | _hg010b_spin2_initcursor_ret
1deec     2D 00 64 FD | 	ret
1def0                 | 
1def0                 | ' 
1def0                 | ' pub setcursorshape(shape) | i
1def0                 | _hg010b_spin2_setcursorshape
1def0                 | ' 
1def0                 | ' cursorshape:=shape
1def0     0B 00 00 FF 
1def4     C6 E4 05 F1 | 	add	objptr, ##5830
1def8     F2 12 62 FC | 	wrlong	arg01, objptr
1defc                 | ' repeat i from 0 to (8*cursorshape)-1
1defc     00 00 06 F6 | 	mov	_var01, #0
1df00     09 03 02 F6 | 	mov	_var02, arg01
1df04     03 02 66 F0 | 	shl	_var02, #3
1df08     01 02 86 F1 | 	sub	_var02, #1
1df0c     00 02 56 F2 | 	cmps	_var02, #0 wc
1df10     01 04 86 F6 | 	negc	_var03, #1
1df14     02 07 02 F6 | 	mov	_var04, _var03
1df18     02 03 02 F1 | 	add	_var02, _var03
1df1c     0A 00 00 FF 
1df20     90 E4 85 F1 | 	sub	objptr, ##5264
1df24     97 0C 48 FB | 	callpa	#(@LR__2401-@LR__2400)>>2,fcache_load_ptr_
1df28                 | LR__2400
1df28                 | '   cursor[i]:=0
1df28     00 05 02 F6 | 	mov	_var03, _var01
1df2c     F2 04 02 F1 | 	add	_var03, objptr
1df30     02 01 48 FC | 	wrbyte	#0, _var03
1df34     03 01 02 F1 | 	add	_var01, _var04
1df38     01 01 0A F2 | 	cmp	_var01, _var02 wz
1df3c     E8 FF 9F 5D |  if_ne	jmp	#LR__2400
1df40                 | LR__2401
1df40                 | ' repeat i from 8*cursorshape to 127
1df40     0A 00 00 FF 
1df44     90 E4 05 F1 | 	add	objptr, ##5264
1df48     F2 06 02 FB | 	rdlong	_var04, objptr
1df4c     03 01 02 F6 | 	mov	_var01, _var04
1df50     03 00 66 F0 | 	shl	_var01, #3
1df54     0B 00 00 FF 
1df58     C6 E4 85 F1 | 	sub	objptr, ##5830
1df5c     03 06 66 F0 | 	shl	_var04, #3
1df60     80 06 56 F2 | 	cmps	_var04, #128 wc
1df64     01 04 A6 F6 | 	negnc	_var03, #1
1df68     7F 02 06 F6 | 	mov	_var02, #127
1df6c     02 03 02 F1 | 	add	_var02, _var03
1df70     97 1A 48 FB | 	callpa	#(@LR__2403-@LR__2402)>>2,fcache_load_ptr_
1df74                 | LR__2402
1df74                 | '   cursor[i]:=cursorcolor
1df74     00 07 02 F6 | 	mov	_var04, _var01
1df78     01 00 00 FF 
1df7c     36 E4 05 F1 | 	add	objptr, ##566
1df80     F2 06 02 F1 | 	add	_var04, objptr
1df84     0A 00 00 FF 
1df88     8C E4 05 F1 | 	add	objptr, ##5260
1df8c     F2 12 02 FB | 	rdlong	arg01, objptr
1df90     0B 00 00 FF 
1df94     C2 E4 85 F1 | 	sub	objptr, ##5826
1df98     03 13 42 FC | 	wrbyte	arg01, _var04
1df9c     02 01 02 F1 | 	add	_var01, _var03
1dfa0     01 01 0A F2 | 	cmp	_var01, _var02 wz
1dfa4     CC FF 9F 5D |  if_ne	jmp	#LR__2402
1dfa8                 | LR__2403
1dfa8                 | _hg010b_spin2_setcursorshape_ret
1dfa8     2D 00 64 FD | 	ret
1dfac                 | 
1dfac                 | ' 
1dfac                 | ' pub setcursorcolor(color) | i
1dfac                 | _hg010b_spin2_setcursorcolor
1dfac                 | ' 
1dfac                 | ' cursorcolor:=color
1dfac     0B 00 00 FF 
1dfb0     C2 E4 05 F1 | 	add	objptr, ##5826
1dfb4     F2 12 62 FC | 	wrlong	arg01, objptr
1dfb8                 | ' repeat i from 0 to (8*cursorshape)-1
1dfb8     00 12 06 F6 | 	mov	arg01, #0
1dfbc     04 E4 05 F1 | 	add	objptr, #4
1dfc0     F2 00 02 FB | 	rdlong	_var01, objptr
1dfc4     03 00 66 F0 | 	shl	_var01, #3
1dfc8     01 00 86 F1 | 	sub	_var01, #1
1dfcc     00 00 56 F2 | 	cmps	_var01, #0 wc
1dfd0     01 02 86 F6 | 	negc	_var02, #1
1dfd4     01 05 02 F6 | 	mov	_var03, _var02
1dfd8     01 01 02 F1 | 	add	_var01, _var02
1dfdc     0A 00 00 FF 
1dfe0     90 E4 85 F1 | 	sub	objptr, ##5264
1dfe4     97 0C 48 FB | 	callpa	#(@LR__2411-@LR__2410)>>2,fcache_load_ptr_
1dfe8                 | LR__2410
1dfe8                 | '   cursor[i]:=0
1dfe8     09 03 02 F6 | 	mov	_var02, arg01
1dfec     F2 02 02 F1 | 	add	_var02, objptr
1dff0     01 01 48 FC | 	wrbyte	#0, _var02
1dff4     02 13 02 F1 | 	add	arg01, _var03
1dff8     00 13 0A F2 | 	cmp	arg01, _var01 wz
1dffc     E8 FF 9F 5D |  if_ne	jmp	#LR__2410
1e000                 | LR__2411
1e000                 | ' repeat i from 8*cursorshape to 127
1e000     0A 00 00 FF 
1e004     90 E4 05 F1 | 	add	objptr, ##5264
1e008     F2 04 02 FB | 	rdlong	_var03, objptr
1e00c     02 13 02 F6 | 	mov	arg01, _var03
1e010     03 12 66 F0 | 	shl	arg01, #3
1e014     0B 00 00 FF 
1e018     C6 E4 85 F1 | 	sub	objptr, ##5830
1e01c     03 04 66 F0 | 	shl	_var03, #3
1e020     80 04 56 F2 | 	cmps	_var03, #128 wc
1e024     01 02 A6 F6 | 	negnc	_var02, #1
1e028     7F 00 06 F6 | 	mov	_var01, #127
1e02c     01 01 02 F1 | 	add	_var01, _var02
1e030     97 1A 48 FB | 	callpa	#(@LR__2413-@LR__2412)>>2,fcache_load_ptr_
1e034                 | LR__2412
1e034                 | '   cursor[i]:=cursorcolor
1e034     09 05 02 F6 | 	mov	_var03, arg01
1e038     01 00 00 FF 
1e03c     36 E4 05 F1 | 	add	objptr, ##566
1e040     F2 04 02 F1 | 	add	_var03, objptr
1e044     0A 00 00 FF 
1e048     8C E4 05 F1 | 	add	objptr, ##5260
1e04c     F2 06 02 FB | 	rdlong	_var04, objptr
1e050     0B 00 00 FF 
1e054     C2 E4 85 F1 | 	sub	objptr, ##5826
1e058     02 07 42 FC | 	wrbyte	_var04, _var03
1e05c     01 13 02 F1 | 	add	arg01, _var02
1e060     00 13 0A F2 | 	cmp	arg01, _var01 wz
1e064     CC FF 9F 5D |  if_ne	jmp	#LR__2412
1e068                 | LR__2413
1e068                 | _hg010b_spin2_setcursorcolor_ret
1e068     2D 00 64 FD | 	ret
1e06c                 | 
1e06c                 | '   
1e06c                 | '   
1e06c                 | '   
1e06c                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1e06c                 | _hg010b_spin2_setmode
1e06c     02 4A 05 F6 | 	mov	COUNT_, #2
1e070     A8 00 A0 FD | 	call	#pushregs_
1e074                 | ' 
1e074                 | ' 
1e074                 | ' dl_ptr:=@emptydl[0]
1e074     01 00 00 FF 
1e078     1D E4 05 F1 | 	add	objptr, ##541
1e07c     F2 1A 02 F6 | 	mov	arg05, objptr
1e080     FD E5 85 F1 | 	sub	objptr, #509
1e084     F2 1A 62 FC | 	wrlong	arg05, objptr
1e088                 | ' 
1e088                 | ' if cog>0 
1e088     10 E4 05 F1 | 	add	objptr, #16
1e08c     F2 1A 02 FB | 	rdlong	arg05, objptr
1e090     30 E4 85 F1 | 	sub	objptr, #48
1e094     01 1A 56 F2 | 	cmps	arg05, #1 wc
1e098                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1e098     01 12 06 36 |  if_ae	mov	arg01, #1
1e09c     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1e0a0                 | ' xres:=1024
1e0a0     01 00 00 FF 
1e0a4     26 E4 05 F1 | 	add	objptr, ##550
1e0a8     02 00 80 FF 
1e0ac     F2 00 68 FC | 	wrlong	##1024, objptr
1e0b0                 | ' yres:=600
1e0b0     04 E4 05 F1 | 	add	objptr, #4
1e0b4     01 00 80 FF 
1e0b8     F2 B0 68 FC | 	wrlong	##600, objptr
1e0bc                 | ' ppl:=(timings[3])
1e0bc     10 00 00 FF 
1e0c0     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1e0c4     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1e0c8     51 E5 85 F1 | 	sub	objptr, #337
1e0cc     F2 1A 62 FC | 	wrlong	arg05, objptr
1e0d0                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1e0d0     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1e0d4     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1e0d8     01 1E 66 F0 | 	shl	local01, #1
1e0dc     80 E4 85 F1 | 	sub	objptr, #128
1e0e0     F2 1E 62 FC | 	wrlong	local01, objptr
1e0e4                 | ' cpl1:=cpl '' todo remove
1e0e4     04 E4 05 F1 | 	add	objptr, #4
1e0e8     F2 1E 62 FC | 	wrlong	local01, objptr
1e0ec                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1e0ec     02 00 00 FF 
1e0f0     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1e0f4     41 E4 85 F1 | 	sub	objptr, #65
1e0f8     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1e0fc                 | ' repeat i from 0 to 3
1e0fc     00 20 06 F6 | 	mov	local02, #0
1e100     02 00 00 FF 
1e104     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1e108     08 E4 05 F1 | 	add	objptr, #8
1e10c     97 20 48 FB | 	callpa	#(@LR__2421-@LR__2420)>>2,fcache_load_ptr_
1e110                 | LR__2420
1e110                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1e110     10 1F 02 F6 | 	mov	local01, local02
1e114     02 1E 66 F0 | 	shl	local01, #2
1e118     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1e11c     F2 1A 02 FB | 	rdlong	arg05, objptr
1e120     11 1A 66 F0 | 	shl	arg05, #17
1e124     0F 1F 02 FB | 	rdlong	local01, local01
1e128     0D 1F 02 F1 | 	add	local01, arg05
1e12c     80 40 38 FF 
1e130     00 1E 06 F1 | 	add	local01, ##1887502336
1e134     10 1B 02 F6 | 	mov	arg05, local02
1e138     02 1A 66 F0 | 	shl	arg05, #2
1e13c     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
1e140     0D 1F 62 FC | 	wrlong	local01, arg05
1e144     01 20 06 F1 | 	add	local02, #1
1e148     04 20 56 F2 | 	cmps	local02, #4 wc
1e14c     C0 FF 9F CD |  if_b	jmp	#LR__2420
1e150                 | LR__2421
1e150     24 E4 85 F1 | 	sub	objptr, #36
1e154                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
1e154     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1e158     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1e15c     14 1E 66 FC | 	wrlong	local01, #20
1e160                 | ' hubset(timings[10])
1e160     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
1e164     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1e168     10 00 00 FF 
1e16c     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
1e170     00 12 62 FD | 	hubset	arg01
1e174                 | ' waitms(1)                                                   	' wait for stabilization
1e174     01 12 06 F6 | 	mov	arg01, #1
1e178     94 2B B0 FD | 	call	#__system___waitms
1e17c     10 00 00 FF 
1e180     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1e184     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1e188     61 E4 05 F1 | 	add	objptr, #97
1e18c     F2 20 62 FC | 	wrlong	local02, objptr
1e190     10 1F 52 F6 | 	abs	local01, local02 wc
1e194     04 1E 46 F0 | 	shr	local01, #4
1e198     0F 1F 82 F6 | 	negc	local01, local01
1e19c     9C E4 05 F1 | 	add	objptr, #156
1e1a0     F2 1E 62 FC | 	wrlong	local01, objptr
1e1a4     A4 E4 85 F1 | 	sub	objptr, #164
1e1a8     F2 20 02 FB | 	rdlong	local02, objptr
1e1ac     08 E4 05 F1 | 	add	objptr, #8
1e1b0     F2 1E 02 FB | 	rdlong	local01, objptr
1e1b4     0F 21 02 FD | 	qmul	local02, local01
1e1b8                 | ' lines:=timings[11]
1e1b8                 | ' t_lines:=lines/16
1e1b8                 | ' buflen:=cpl*lines						' framebuffer length in longs
1e1b8     29 E4 85 F1 | 	sub	objptr, #41
1e1bc     19 1E C6 F9 | 	decod	local01, #25
1e1c0     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
1e1c4     18 20 62 FD | 	getqx	local02
1e1c8     F2 20 62 FC | 	wrlong	local02, objptr
1e1cc     38 E4 85 F1 | 	sub	objptr, #56
1e1d0     02 20 66 F0 | 	shl	local02, #2
1e1d4     10 1F 82 F1 | 	sub	local01, local02
1e1d8     F2 1E 62 FC | 	wrlong	local01, objptr
1e1dc     FD E4 05 F1 | 	add	objptr, #253
1e1e0     F2 20 02 FB | 	rdlong	local02, objptr
1e1e4     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1e1e8     0D 21 02 FD | 	qmul	local02, arg05
1e1ec                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1e1ec                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
1e1ec     F9 E4 85 F1 | 	sub	objptr, #249
1e1f0                 | ' mode_ptr:=@timings						' set pointers to timings
1e1f0     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
1e1f4                 | ' graphmode:=1024+512+192+48							' det global variable
1e1f4                 | ' makedl(graphmode)							' make a DL for the mode
1e1f4     03 00 00 FF 
1e1f8     F0 12 06 F6 | 	mov	arg01, ##1776
1e1fc     18 20 62 FD | 	getqx	local02
1e200     10 1F 82 F1 | 	sub	local01, local02
1e204     F2 1E 62 FC | 	wrlong	local01, objptr
1e208     14 E4 05 F1 | 	add	objptr, #20
1e20c     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1e210     79 E4 05 F1 | 	add	objptr, #121
1e214     03 00 80 FF 
1e218     F2 E0 69 FC | 	wrlong	##1776, objptr
1e21c     91 E4 85 F1 | 	sub	objptr, #145
1e220     10 00 00 FF 
1e224     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1e228     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
1e22c                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1e22c     F2 1E 02 FB | 	rdlong	local01, objptr
1e230     DD E4 05 F1 | 	add	objptr, #221
1e234     F2 1E 62 FC | 	wrlong	local01, objptr
1e238                 | ' s_font_ptr:=font_ptr
1e238     D5 E4 85 F1 | 	sub	objptr, #213
1e23c     F2 1E 02 FB | 	rdlong	local01, objptr
1e240     D9 E4 05 F1 | 	add	objptr, #217
1e244     F2 1E 62 FC | 	wrlong	local01, objptr
1e248                 | ' s_lines:=lines
1e248     80 E4 85 F1 | 	sub	objptr, #128
1e24c     F2 1E 02 FB | 	rdlong	local01, objptr
1e250     84 E4 05 F1 | 	add	objptr, #132
1e254     F2 1E 62 FC | 	wrlong	local01, objptr
1e258                 | ' s_buflen:=buflen
1e258     AD E4 85 F1 | 	sub	objptr, #173
1e25c     F2 1E 02 FB | 	rdlong	local01, objptr
1e260     B5 E4 05 F1 | 	add	objptr, #181
1e264     F2 1E 62 FC | 	wrlong	local01, objptr
1e268                 | ' s_cpl:=cpl
1e268     94 E4 85 F1 | 	sub	objptr, #148
1e26c     F2 1E 02 FB | 	rdlong	local01, objptr
1e270     90 E4 05 F1 | 	add	objptr, #144
1e274     F2 1E 62 FC | 	wrlong	local01, objptr
1e278                 | ' s_cpl1:=cpl
1e278     90 E4 85 F1 | 	sub	objptr, #144
1e27c     F2 1E 02 FB | 	rdlong	local01, objptr
1e280     98 E4 05 F1 | 	add	objptr, #152
1e284     F2 1E 62 FC | 	wrlong	local01, objptr
1e288                 | ' st_lines:=t_lines
1e288     0C E4 05 F1 | 	add	objptr, #12
1e28c     F2 1E 02 FB | 	rdlong	local01, objptr
1e290     04 E4 05 F1 | 	add	objptr, #4
1e294     F2 1E 62 FC | 	wrlong	local01, objptr
1e298                 | ' ppl:=ppl/xzoom  
1e298     28 E4 85 F1 | 	sub	objptr, #40
1e29c     F2 7C 02 FB | 	rdlong	muldiva_, objptr
1e2a0     2C E4 05 F1 | 	add	objptr, #44
1e2a4     F2 7E 02 FB | 	rdlong	muldivb_, objptr
1e2a8     05 E5 85 F1 | 	sub	objptr, #261
1e2ac     BA 00 A0 FD | 	call	#divide_
1e2b0     D9 E4 05 F1 | 	add	objptr, #217
1e2b4     F2 7E 62 FC | 	wrlong	muldivb_, objptr
1e2b8                 | ' s_ppl:=ppl
1e2b8     1C E4 05 F1 | 	add	objptr, #28
1e2bc     F2 7E 62 FC | 	wrlong	muldivb_, objptr
1e2c0     F5 E4 85 F1 | 	sub	objptr, #245
1e2c4                 | ' waitms(20)							' wait 
1e2c4     14 12 06 F6 | 	mov	arg01, #20
1e2c8     44 2A B0 FD | 	call	#__system___waitms
1e2cc                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1e2cc     04 E4 05 F1 | 	add	objptr, #4
1e2d0     F2 12 02 FB | 	rdlong	arg01, objptr
1e2d4     04 E4 85 F1 | 	sub	objptr, #4
1e2d8     F2 16 02 FB | 	rdlong	arg03, objptr
1e2dc     09 17 82 F1 | 	sub	arg03, arg01
1e2e0     20 14 06 F6 | 	mov	arg02, #32
1e2e4     00 18 06 F6 | 	mov	arg04, #0
1e2e8     01 1A 06 F6 | 	mov	arg05, #1
1e2ec     0B 00 00 FF 
1e2f0     CC E4 05 F1 | 	add	objptr, ##5836
1e2f4     1C 1C B0 FD | 	call	#_psram_spin2_fill
1e2f8     0B 00 00 FF 
1e2fc     CC E4 85 F1 | 	sub	objptr, ##5836
1e300     A7 F0 03 F6 | 	mov	ptra, fp
1e304     B2 00 A0 FD | 	call	#popregs_
1e308                 | _hg010b_spin2_setmode_ret
1e308     2D 00 64 FD | 	ret
1e30c                 | 
1e30c                 | ' 
1e30c                 | ' '****************************************************************************************************************
1e30c                 | ' '                                                                                                             	*
1e30c                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1e30c                 | ' '                                                                                                             	*
1e30c                 | ' '****************************************************************************************************************
1e30c                 | ' 
1e30c                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1e30c                 | _hg010b_spin2_makedl
1e30c                 | ' 
1e30c                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1e30c                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1e30c                 | ' repeat i from 0 to 11                                                           ' clear DL
1e30c     00 00 06 F6 | 	mov	_var01, #0
1e310     ED E5 05 F1 | 	add	objptr, #493
1e314     97 0E 48 FB | 	callpa	#(@LR__2431-@LR__2430)>>2,fcache_load_ptr_
1e318                 | LR__2430
1e318                 | '   displaylist[i]:=0 
1e318     00 03 02 F6 | 	mov	_var02, _var01
1e31c     02 02 66 F0 | 	shl	_var02, #2
1e320     F2 02 02 F1 | 	add	_var02, objptr
1e324     01 01 68 FC | 	wrlong	#0, _var02
1e328     01 00 06 F1 | 	add	_var01, #1
1e32c     0C 00 56 F2 | 	cmps	_var01, #12 wc
1e330     E4 FF 9F CD |  if_b	jmp	#LR__2430
1e334                 | LR__2431
1e334                 | '                         ' 
1e334                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1e334     8C E5 85 F1 | 	sub	objptr, #396
1e338     F2 02 02 FB | 	rdlong	_var02, objptr
1e33c     14 02 66 F0 | 	shl	_var02, #20
1e340     01 02 06 F1 | 	add	_var02, #1
1e344     04 E4 85 F1 | 	sub	objptr, #4
1e348     F2 00 02 FB | 	rdlong	_var01, objptr
1e34c     02 00 66 F0 | 	shl	_var01, #2
1e350     04 00 66 F0 | 	shl	_var01, #4
1e354     00 03 02 F1 | 	add	_var02, _var01
1e358     90 E5 05 F1 | 	add	objptr, #400
1e35c     F2 02 62 FC | 	wrlong	_var02, objptr
1e360     ED E5 85 F1 | 	sub	objptr, #493
1e364                 | ' displaylist[1]:=buf_ptr<<4+%10  
1e364     F2 02 02 FB | 	rdlong	_var02, objptr
1e368     04 02 66 F0 | 	shl	_var02, #4
1e36c     02 02 06 F1 | 	add	_var02, #2
1e370     F1 E5 05 F1 | 	add	objptr, #497
1e374     F2 02 62 FC | 	wrlong	_var02, objptr
1e378                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1e378     04 E4 85 F1 | 	sub	objptr, #4
1e37c     F2 02 02 F6 | 	mov	_var02, objptr
1e380     CD E5 85 F1 | 	sub	objptr, #461
1e384     F2 02 62 FC | 	wrlong	_var02, objptr
1e388     20 E4 85 F1 | 	sub	objptr, #32
1e38c                 | _hg010b_spin2_makedl_ret
1e38c     2D 00 64 FD | 	ret
1e390                 | 
1e390                 | ' 
1e390                 | ' 
1e390                 | ' '****************************************************************************************************************
1e390                 | ' '                                                                        					*
1e390                 | ' '  Graphic primitives                                                    					*
1e390                 | ' '                                                                        					*
1e390                 | ' '****************************************************************************************************************
1e390                 | ' 
1e390                 | ' pub setspriteptr(num,ptr)
1e390                 | _hg010b_spin2_setspriteptr
1e390                 | ' long[@spr1ptr+12*num]:=ptr
1e390     11 E5 05 F1 | 	add	objptr, #273
1e394     F2 00 02 F6 | 	mov	_var01, objptr
1e398     09 03 02 F6 | 	mov	_var02, arg01
1e39c     01 02 66 F0 | 	shl	_var02, #1
1e3a0     09 03 02 F1 | 	add	_var02, arg01
1e3a4     02 02 66 F0 | 	shl	_var02, #2
1e3a8     01 01 02 F1 | 	add	_var01, _var02
1e3ac     00 15 62 FC | 	wrlong	arg02, _var01
1e3b0     11 E5 85 F1 | 	sub	objptr, #273
1e3b4                 | _hg010b_spin2_setspriteptr_ret
1e3b4     2D 00 64 FD | 	ret
1e3b8                 | 
1e3b8                 | ' 
1e3b8                 | ' pub setspritepos(num,x,y)
1e3b8                 | _hg010b_spin2_setspritepos
1e3b8                 | ' if y>601
1e3b8     01 00 00 FF 
1e3bc     5A 16 56 F2 | 	cmps	arg03, ##602 wc
1e3c0                 | '   y:=601
1e3c0     01 00 00 3F 
1e3c4     59 16 06 36 |  if_ae	mov	arg03, ##601
1e3c8                 | ' if x>1024
1e3c8     02 00 00 FF 
1e3cc     01 14 56 F2 | 	cmps	arg02, ##1025 wc
1e3d0                 | '   x:=1024
1e3d0     0A 14 C6 39 |  if_ae	decod	arg02, #10
1e3d4                 | ' word[@spr1ptr+12*num+4]:=x
1e3d4     11 E5 05 F1 | 	add	objptr, #273
1e3d8     F2 00 02 F6 | 	mov	_var01, objptr
1e3dc     09 03 02 F6 | 	mov	_var02, arg01
1e3e0     01 02 66 F0 | 	shl	_var02, #1
1e3e4     09 03 02 F1 | 	add	_var02, arg01
1e3e8     02 02 66 F0 | 	shl	_var02, #2
1e3ec     01 01 02 F1 | 	add	_var01, _var02
1e3f0     04 00 06 F1 | 	add	_var01, #4
1e3f4     00 15 52 FC | 	wrword	arg02, _var01
1e3f8                 | ' word[@spr1ptr+12*num+6]:=y
1e3f8     F2 00 02 F6 | 	mov	_var01, objptr
1e3fc     09 03 02 F6 | 	mov	_var02, arg01
1e400     01 02 66 F0 | 	shl	_var02, #1
1e404     09 03 02 F1 | 	add	_var02, arg01
1e408     02 02 66 F0 | 	shl	_var02, #2
1e40c     01 01 02 F1 | 	add	_var01, _var02
1e410     06 00 06 F1 | 	add	_var01, #6
1e414     00 17 52 FC | 	wrword	arg03, _var01
1e418     11 E5 85 F1 | 	sub	objptr, #273
1e41c                 | _hg010b_spin2_setspritepos_ret
1e41c     2D 00 64 FD | 	ret
1e420                 | 
1e420                 | ' 
1e420                 | ' pub setspritesize(num,w,h)
1e420                 | _hg010b_spin2_setspritesize
1e420                 | ' word[@spr1ptr+12*num+8]:=w
1e420     11 E5 05 F1 | 	add	objptr, #273
1e424     F2 00 02 F6 | 	mov	_var01, objptr
1e428     09 03 02 F6 | 	mov	_var02, arg01
1e42c     01 02 66 F0 | 	shl	_var02, #1
1e430     09 03 02 F1 | 	add	_var02, arg01
1e434     02 02 66 F0 | 	shl	_var02, #2
1e438     01 01 02 F1 | 	add	_var01, _var02
1e43c     08 00 06 F1 | 	add	_var01, #8
1e440     00 15 52 FC | 	wrword	arg02, _var01
1e444                 | ' word[@spr1ptr+12*num+10]:=h
1e444     F2 00 02 F6 | 	mov	_var01, objptr
1e448     09 03 02 F6 | 	mov	_var02, arg01
1e44c     01 02 66 F0 | 	shl	_var02, #1
1e450     09 03 02 F1 | 	add	_var02, arg01
1e454     02 02 66 F0 | 	shl	_var02, #2
1e458     01 01 02 F1 | 	add	_var01, _var02
1e45c     0A 00 06 F1 | 	add	_var01, #10
1e460     00 17 52 FC | 	wrword	arg03, _var01
1e464     11 E5 85 F1 | 	sub	objptr, #273
1e468                 | _hg010b_spin2_setspritesize_ret
1e468     2D 00 64 FD | 	ret
1e46c                 | 
1e46c                 | ' 
1e46c                 | ' 
1e46c                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1e46c                 | ' 
1e46c                 | ' 
1e46c                 | ' pub putpixel(x,y,c)
1e46c                 | _hg010b_spin2_putpixel
1e46c     04 4A 05 F6 | 	mov	COUNT_, #4
1e470     A8 00 A0 FD | 	call	#pushregs_
1e474     09 1F 02 F6 | 	mov	local01, arg01
1e478                 | ' 
1e478                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1e478     00 20 06 F6 | 	mov	local02, #0
1e47c     00 1E 56 F2 | 	cmps	local01, #0 wc
1e480     01 20 66 36 |  if_ae	neg	local02, #1
1e484     E9 E4 05 F1 | 	add	objptr, #233
1e488     F2 1A 02 FB | 	rdlong	arg05, objptr
1e48c     02 1A 66 F0 | 	shl	arg05, #2
1e490     0D 1F 52 F2 | 	cmps	local01, arg05 wc
1e494     11 23 A2 F1 | 	subx	local03, local03
1e498     11 21 02 F5 | 	and	local02, local03
1e49c     00 22 06 F6 | 	mov	local03, #0
1e4a0     00 14 56 F2 | 	cmps	arg02, #0 wc
1e4a4     01 22 66 36 |  if_ae	neg	local03, #1
1e4a8     11 21 02 F5 | 	and	local02, local03
1e4ac     04 E4 85 F1 | 	sub	objptr, #4
1e4b0     F2 22 02 FB | 	rdlong	local03, objptr
1e4b4     E5 E4 85 F1 | 	sub	objptr, #229
1e4b8     11 15 52 F2 | 	cmps	arg02, local03 wc
1e4bc     12 25 A2 F1 | 	subx	local04, local04
1e4c0     12 21 CA F7 | 	test	local02, local04 wz
1e4c4     48 00 90 AD |  if_e	jmp	#LR__2440
1e4c8     DD E4 05 F1 | 	add	objptr, #221
1e4cc     F2 12 02 FB | 	rdlong	arg01, objptr
1e4d0     14 E4 05 F1 | 	add	objptr, #20
1e4d4     F2 24 02 FB | 	rdlong	local04, objptr
1e4d8     02 24 66 F0 | 	shl	local04, #2
1e4dc     0A 25 02 FD | 	qmul	local04, arg02
1e4e0                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1e4e0     0B 15 02 F6 | 	mov	arg02, arg03
1e4e4     01 16 06 F6 | 	mov	arg03, #1
1e4e8     00 18 06 F6 | 	mov	arg04, #0
1e4ec     01 1A 06 F6 | 	mov	arg05, #1
1e4f0     0A 00 00 FF 
1e4f4     DB E5 05 F1 | 	add	objptr, ##5595
1e4f8     18 24 62 FD | 	getqx	local04
1e4fc     0F 25 02 F1 | 	add	local04, local01
1e500     12 13 02 F1 | 	add	arg01, local04
1e504     0C 1A B0 FD | 	call	#_psram_spin2_fill
1e508     0B 00 00 FF 
1e50c     CC E4 85 F1 | 	sub	objptr, ##5836
1e510                 | LR__2440
1e510     A7 F0 03 F6 | 	mov	ptra, fp
1e514     B2 00 A0 FD | 	call	#popregs_
1e518                 | _hg010b_spin2_putpixel_ret
1e518     2D 00 64 FD | 	ret
1e51c                 | 
1e51c                 | ' 
1e51c                 | ' pub putpixel2(x,y,c)
1e51c                 | _hg010b_spin2_putpixel2
1e51c     02 4A 05 F6 | 	mov	COUNT_, #2
1e520     A8 00 A0 FD | 	call	#pushregs_
1e524     DD E4 05 F1 | 	add	objptr, #221
1e528     F2 1E 02 FB | 	rdlong	local01, objptr
1e52c     14 E4 05 F1 | 	add	objptr, #20
1e530     F2 1A 02 FB | 	rdlong	arg05, objptr
1e534     02 1A 66 F0 | 	shl	arg05, #2
1e538     0A 1B 02 FD | 	qmul	arg05, arg02
1e53c                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1e53c     0B 15 02 F6 | 	mov	arg02, arg03
1e540     01 16 06 F6 | 	mov	arg03, #1
1e544     00 18 06 F6 | 	mov	arg04, #0
1e548     01 1A 06 F6 | 	mov	arg05, #1
1e54c     0A 00 00 FF 
1e550     DB E5 05 F1 | 	add	objptr, ##5595
1e554     18 20 62 FD | 	getqx	local02
1e558     09 21 02 F1 | 	add	local02, arg01
1e55c     10 1F 02 F1 | 	add	local01, local02
1e560     0F 13 02 F6 | 	mov	arg01, local01
1e564     AC 19 B0 FD | 	call	#_psram_spin2_fill
1e568     0B 00 00 FF 
1e56c     CC E4 85 F1 | 	sub	objptr, ##5836
1e570     A7 F0 03 F6 | 	mov	ptra, fp
1e574     B2 00 A0 FD | 	call	#popregs_
1e578                 | _hg010b_spin2_putpixel2_ret
1e578     2D 00 64 FD | 	ret
1e57c                 | 
1e57c                 | ' 
1e57c                 | ' pub getpixel2(x,y): c 
1e57c                 | _hg010b_spin2_getpixel2
1e57c     02 4A 05 F6 | 	mov	COUNT_, #2
1e580     A8 00 A0 FD | 	call	#pushregs_
1e584     0C F0 07 F1 | 	add	ptra, #12
1e588     04 4E 05 F1 | 	add	fp, #4
1e58c     A7 12 62 FC | 	wrlong	arg01, fp
1e590     04 4E 05 F1 | 	add	fp, #4
1e594     A7 14 62 FC | 	wrlong	arg02, fp
1e598     08 4E 85 F1 | 	sub	fp, #8
1e59c     A7 00 68 FC | 	wrlong	#0, fp
1e5a0     A7 12 02 F6 | 	mov	arg01, fp
1e5a4     DD E4 05 F1 | 	add	objptr, #221
1e5a8     F2 14 02 FB | 	rdlong	arg02, objptr
1e5ac     14 E4 05 F1 | 	add	objptr, #20
1e5b0     F2 16 02 FB | 	rdlong	arg03, objptr
1e5b4     02 16 66 F0 | 	shl	arg03, #2
1e5b8     08 4E 05 F1 | 	add	fp, #8
1e5bc     A7 FA 01 FB | 	rdlong	result1, fp
1e5c0     FD 16 02 FD | 	qmul	arg03, result1
1e5c4                 | ' 
1e5c4                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1e5c4     04 4E 85 F1 | 	sub	fp, #4
1e5c8     A7 1E 02 FB | 	rdlong	local01, fp
1e5cc     04 4E 85 F1 | 	sub	fp, #4
1e5d0     01 16 06 F6 | 	mov	arg03, #1
1e5d4     0A 00 00 FF 
1e5d8     DB E5 05 F1 | 	add	objptr, ##5595
1e5dc     18 20 62 FD | 	getqx	local02
1e5e0     0F 21 02 F1 | 	add	local02, local01
1e5e4     10 15 02 F1 | 	add	arg02, local02
1e5e8     F0 17 B0 FD | 	call	#_psram_spin2_read1
1e5ec     0B 00 00 FF 
1e5f0     CC E4 85 F1 | 	sub	objptr, ##5836
1e5f4                 | ' return c
1e5f4     A7 FA 01 FB | 	rdlong	result1, fp
1e5f8     A7 F0 03 F6 | 	mov	ptra, fp
1e5fc     B2 00 A0 FD | 	call	#popregs_
1e600                 | _hg010b_spin2_getpixel2_ret
1e600     2D 00 64 FD | 	ret
1e604                 | 
1e604                 | '   
1e604                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1e604                 | ' 
1e604                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1e604                 | _hg010b_spin2_fastline
1e604     02 4A 05 F6 | 	mov	COUNT_, #2
1e608     A8 00 A0 FD | 	call	#pushregs_
1e60c     09 1F 02 F6 | 	mov	local01, arg01
1e610     0A 21 02 F6 | 	mov	local02, arg02
1e614                 | ' 
1e614                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1e614     00 16 56 F2 | 	cmps	arg03, #0 wc
1e618     F4 00 90 CD |  if_b	jmp	#LR__2450
1e61c     01 00 00 FF 
1e620     2A E4 05 F1 | 	add	objptr, ##554
1e624     F2 1A 02 FB | 	rdlong	arg05, objptr
1e628     01 00 00 FF 
1e62c     2A E4 85 F1 | 	sub	objptr, ##554
1e630     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1e634     D8 00 90 3D |  if_ae	jmp	#LR__2450
1e638     00 1E 56 F2 | 	cmps	local01, #0 wc
1e63c     00 20 56 C2 |  if_b	cmps	local02, #0 wc
1e640     CC 00 90 CD |  if_b	jmp	#LR__2450
1e644     01 00 00 FF 
1e648     26 E4 05 F1 | 	add	objptr, ##550
1e64c     F2 1A 02 FB | 	rdlong	arg05, objptr
1e650     01 00 00 FF 
1e654     26 E4 85 F1 | 	sub	objptr, ##550
1e658     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1e65c     01 00 00 1F 
1e660     26 E4 05 11 |  if_a	add	objptr, ##550
1e664     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1e668     01 00 00 1F 
1e66c     26 E4 85 11 |  if_a	sub	objptr, ##550
1e670     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
1e674                 | '   return
1e674     98 00 90 1D |  if_a	jmp	#LR__2450
1e678     10 1F 5A F2 | 	cmps	local01, local02 wcz
1e67c     0F 1B 02 16 |  if_a	mov	arg05, local01
1e680     10 1F 02 16 |  if_a	mov	local01, local02
1e684     0D 21 02 16 |  if_a	mov	local02, arg05
1e688     00 1E 56 F2 | 	cmps	local01, #0 wc
1e68c     00 1E 06 C6 |  if_b	mov	local01, #0
1e690     01 00 00 FF 
1e694     26 E4 05 F1 | 	add	objptr, ##550
1e698     F2 1A 02 FB | 	rdlong	arg05, objptr
1e69c     01 00 00 FF 
1e6a0     26 E4 85 F1 | 	sub	objptr, ##550
1e6a4     0D 21 52 F2 | 	cmps	local02, arg05 wc
1e6a8     01 00 00 3F 
1e6ac     26 E4 05 31 |  if_ae	add	objptr, ##550
1e6b0     F2 20 02 3B |  if_ae	rdlong	local02, objptr
1e6b4     01 00 00 3F 
1e6b8     26 E4 85 31 |  if_ae	sub	objptr, ##550
1e6bc     DD E4 05 F1 | 	add	objptr, #221
1e6c0     F2 12 02 FB | 	rdlong	arg01, objptr
1e6c4     14 E4 05 F1 | 	add	objptr, #20
1e6c8     F2 1A 02 FB | 	rdlong	arg05, objptr
1e6cc     02 1A 66 F0 | 	shl	arg05, #2
1e6d0     0B 1B 02 FD | 	qmul	arg05, arg03
1e6d4                 | ' if x1>x2
1e6d4                 | '   x1,x2:=x2,x1
1e6d4                 | ' if x1<0 
1e6d4                 | '   x1:=0
1e6d4                 | ' if x2>=xres
1e6d4                 | '   x2:=xres-1  
1e6d4     01 20 86 31 |  if_ae	sub	local02, #1
1e6d8                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1e6d8     01 16 06 F6 | 	mov	arg03, #1
1e6dc     10 17 02 F1 | 	add	arg03, local02
1e6e0     0F 17 82 F1 | 	sub	arg03, local01
1e6e4     0C 15 02 F6 | 	mov	arg02, arg04
1e6e8     00 18 06 F6 | 	mov	arg04, #0
1e6ec     01 1A 06 F6 | 	mov	arg05, #1
1e6f0     0A 00 00 FF 
1e6f4     DB E5 05 F1 | 	add	objptr, ##5595
1e6f8     18 20 62 FD | 	getqx	local02
1e6fc     0F 21 02 F1 | 	add	local02, local01
1e700     10 13 02 F1 | 	add	arg01, local02
1e704     0C 18 B0 FD | 	call	#_psram_spin2_fill
1e708     0B 00 00 FF 
1e70c     CC E4 85 F1 | 	sub	objptr, ##5836
1e710                 | LR__2450
1e710     A7 F0 03 F6 | 	mov	ptra, fp
1e714     B2 00 A0 FD | 	call	#popregs_
1e718                 | _hg010b_spin2_fastline_ret
1e718     2D 00 64 FD | 	ret
1e71c                 | 
1e71c                 | ' 
1e71c                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1e71c                 | _hg010b_spin2_draw
1e71c     0E 4A 05 F6 | 	mov	COUNT_, #14
1e720     A8 00 A0 FD | 	call	#pushregs_
1e724     09 1F 02 F6 | 	mov	local01, arg01
1e728     0A 21 02 F6 | 	mov	local02, arg02
1e72c     0B 23 02 F6 | 	mov	local03, arg03
1e730     0C 25 02 F6 | 	mov	local04, arg04
1e734     0D 27 02 F6 | 	mov	local05, arg05
1e738                 | ' 
1e738                 | ' if (y1==y2)
1e738     12 21 0A F2 | 	cmp	local02, local04 wz
1e73c     18 00 90 5D |  if_ne	jmp	#LR__2460
1e740                 | '   fastline(x1,x2,y1,c)
1e740     0F 13 02 F6 | 	mov	arg01, local01
1e744     11 15 02 F6 | 	mov	arg02, local03
1e748     10 17 02 F6 | 	mov	arg03, local02
1e74c     13 19 02 F6 | 	mov	arg04, local05
1e750     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1e754     F8 00 90 FD | 	jmp	#LR__2466
1e758                 | LR__2460
1e758                 | ' else  
1e758                 | '   x:=x1
1e758     0F 29 02 F6 | 	mov	local06, local01
1e75c                 | '   y:=y1
1e75c     10 2B 02 F6 | 	mov	local07, local02
1e760                 | ' 
1e760                 | '   if (x1<x2) 
1e760     11 1F 52 F2 | 	cmps	local01, local03 wc
1e764                 | '     xi:=1
1e764     01 2C 06 C6 |  if_b	mov	local08, #1
1e768                 | '     dx:=x2-x1
1e768     11 2F 02 C6 |  if_b	mov	local09, local03
1e76c     0F 2F 82 C1 |  if_b	sub	local09, local01
1e770                 | '   else
1e770                 | '     xi:=-1
1e770     01 2C 66 36 |  if_ae	neg	local08, #1
1e774                 | '     dx:=x1-x2
1e774     11 1F 82 31 |  if_ae	sub	local01, local03
1e778     0F 2F 02 36 |  if_ae	mov	local09, local01
1e77c                 | '   
1e77c                 | '   if (y1<y2) 
1e77c     12 21 52 F2 | 	cmps	local02, local04 wc
1e780                 | '     yi:=1
1e780     01 30 06 C6 |  if_b	mov	local10, #1
1e784                 | '     dy:=y2-y1
1e784     12 33 02 C6 |  if_b	mov	local11, local04
1e788     10 33 82 C1 |  if_b	sub	local11, local02
1e78c                 | '   else
1e78c                 | '     yi:=-1
1e78c     01 30 66 36 |  if_ae	neg	local10, #1
1e790                 | '     dy:=y1-y2
1e790     12 21 82 31 |  if_ae	sub	local02, local04
1e794     10 33 02 36 |  if_ae	mov	local11, local02
1e798                 | ' 
1e798                 | '   putpixel(x,y,c)
1e798     13 17 02 F6 | 	mov	arg03, local05
1e79c     14 13 02 F6 | 	mov	arg01, local06
1e7a0     15 15 02 F6 | 	mov	arg02, local07
1e7a4     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e7a8                 | ' 
1e7a8                 | '   if (dx>dy)
1e7a8     19 2F 5A F2 | 	cmps	local09, local11 wcz
1e7ac     50 00 90 ED |  if_be	jmp	#LR__2462
1e7b0                 | '     ai:=(dy-dx)*2
1e7b0     19 35 02 F6 | 	mov	local12, local11
1e7b4     17 35 82 F1 | 	sub	local12, local09
1e7b8     01 34 66 F0 | 	shl	local12, #1
1e7bc                 | '     bi:=dy*2
1e7bc     01 32 66 F0 | 	shl	local11, #1
1e7c0     19 37 02 F6 | 	mov	local13, local11
1e7c4                 | '     d:= bi-dx
1e7c4     1B 39 02 F6 | 	mov	local14, local13
1e7c8     17 39 82 F1 | 	sub	local14, local09
1e7cc                 | '     repeat while (x<>x2) 
1e7cc                 | LR__2461
1e7cc     11 29 0A F2 | 	cmp	local06, local03 wz
1e7d0     7C 00 90 AD |  if_e	jmp	#LR__2465
1e7d4                 | '       if (d>=0) 
1e7d4     00 38 56 F2 | 	cmps	local14, #0 wc
1e7d8                 | '         x+=xi
1e7d8     16 29 02 31 |  if_ae	add	local06, local08
1e7dc                 | '         y+=yi
1e7dc     18 2B 02 31 |  if_ae	add	local07, local10
1e7e0                 | '         d+=ai
1e7e0     1A 39 02 31 |  if_ae	add	local14, local12
1e7e4                 | '       else
1e7e4                 | '         d+=bi
1e7e4     1B 39 02 C1 |  if_b	add	local14, local13
1e7e8                 | '         x+=xi
1e7e8     16 29 02 C1 |  if_b	add	local06, local08
1e7ec                 | '       putpixel(x,y,c)
1e7ec     14 13 02 F6 | 	mov	arg01, local06
1e7f0     15 15 02 F6 | 	mov	arg02, local07
1e7f4     13 17 02 F6 | 	mov	arg03, local05
1e7f8     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e7fc     CC FF 9F FD | 	jmp	#LR__2461
1e800                 | LR__2462
1e800                 | '   else
1e800                 | '     ai:=(dx-dy)*2
1e800     17 35 02 F6 | 	mov	local12, local09
1e804     19 35 82 F1 | 	sub	local12, local11
1e808     01 34 66 F0 | 	shl	local12, #1
1e80c                 | '     bi:=dx*2
1e80c     01 2E 66 F0 | 	shl	local09, #1
1e810     17 37 02 F6 | 	mov	local13, local09
1e814                 | '     d:=bi-dy
1e814     1B 39 02 F6 | 	mov	local14, local13
1e818     19 39 82 F1 | 	sub	local14, local11
1e81c                 | '     repeat while (y<>y2)
1e81c                 | LR__2463
1e81c     12 2B 0A F2 | 	cmp	local07, local04 wz
1e820     2C 00 90 AD |  if_e	jmp	#LR__2464
1e824                 | '       if (d>=0)
1e824     00 38 56 F2 | 	cmps	local14, #0 wc
1e828                 | '         x+=xi
1e828     16 29 02 31 |  if_ae	add	local06, local08
1e82c                 | '         y+=yi
1e82c     18 2B 02 31 |  if_ae	add	local07, local10
1e830                 | '         d+=ai
1e830     1A 39 02 31 |  if_ae	add	local14, local12
1e834                 | '       else
1e834                 | '         d+=bi
1e834     1B 39 02 C1 |  if_b	add	local14, local13
1e838                 | '         y+=yi
1e838     18 2B 02 C1 |  if_b	add	local07, local10
1e83c                 | '       putpixel(x, y,c)
1e83c     14 13 02 F6 | 	mov	arg01, local06
1e840     15 15 02 F6 | 	mov	arg02, local07
1e844     13 17 02 F6 | 	mov	arg03, local05
1e848     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1e84c     CC FF 9F FD | 	jmp	#LR__2463
1e850                 | LR__2464
1e850                 | LR__2465
1e850                 | LR__2466
1e850     A7 F0 03 F6 | 	mov	ptra, fp
1e854     B2 00 A0 FD | 	call	#popregs_
1e858                 | _hg010b_spin2_draw_ret
1e858     2D 00 64 FD | 	ret
1e85c                 | 
1e85c                 | '  
1e85c                 | ' pub fillpush(val) 
1e85c                 | _hg010b_spin2_fillpush
1e85c                 | ' fillstack[fillptr]:=val
1e85c     0B 00 00 FF 
1e860     BA E4 05 F1 | 	add	objptr, ##5818
1e864     F2 00 02 FB | 	rdlong	_var01, objptr
1e868     02 00 66 F0 | 	shl	_var01, #2
1e86c     0A 00 00 FF 
1e870     00 E4 85 F1 | 	sub	objptr, ##5120
1e874     F2 00 02 F1 | 	add	_var01, objptr
1e878     00 13 62 FC | 	wrlong	arg01, _var01
1e87c                 | ' fillptr+=1   
1e87c     0A 00 00 FF 
1e880     00 E4 05 F1 | 	add	objptr, ##5120
1e884     F2 00 02 FB | 	rdlong	_var01, objptr
1e888     01 00 06 F1 | 	add	_var01, #1
1e88c     F2 00 62 FC | 	wrlong	_var01, objptr
1e890     0B 00 00 FF 
1e894     BA E4 85 F1 | 	sub	objptr, ##5818
1e898                 | _hg010b_spin2_fillpush_ret
1e898     2D 00 64 FD | 	ret
1e89c                 | 
1e89c                 | ' 
1e89c                 | '     
1e89c                 | ' pub fillpop() : val
1e89c                 | _hg010b_spin2_fillpop
1e89c                 | ' 
1e89c                 | ' fillptr-=1
1e89c     0B 00 00 FF 
1e8a0     BA E4 05 F1 | 	add	objptr, ##5818
1e8a4     F2 FA 01 FB | 	rdlong	result1, objptr
1e8a8     01 FA 85 F1 | 	sub	result1, #1
1e8ac     F2 FA 61 FC | 	wrlong	result1, objptr
1e8b0                 | ' if fillptr<0
1e8b0     0B 00 00 FF 
1e8b4     BA E4 85 F1 | 	sub	objptr, ##5818
1e8b8     00 FA 55 F2 | 	cmps	result1, #0 wc
1e8bc                 | '   fillptr:=0
1e8bc     0B 00 00 CF 
1e8c0     BA E4 05 C1 |  if_b	add	objptr, ##5818
1e8c4     F2 00 68 CC |  if_b	wrlong	#0, objptr
1e8c8     0B 00 00 CF 
1e8cc     BA E4 85 C1 |  if_b	sub	objptr, ##5818
1e8d0                 | '   val:=-12345
1e8d0     E7 FF 7F CF 
1e8d4     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1e8d8     28 00 90 CD |  if_b	jmp	#LR__2470
1e8dc                 | ' else 
1e8dc                 | '   val:=fillstack[fillptr]
1e8dc     0B 00 00 FF 
1e8e0     BA E4 05 F1 | 	add	objptr, ##5818
1e8e4     F2 00 02 FB | 	rdlong	_var01, objptr
1e8e8     02 00 66 F0 | 	shl	_var01, #2
1e8ec     0A 00 00 FF 
1e8f0     00 E4 85 F1 | 	sub	objptr, ##5120
1e8f4     F2 00 02 F1 | 	add	_var01, objptr
1e8f8     00 01 02 FB | 	rdlong	_var01, _var01
1e8fc     01 00 00 FF 
1e900     BA E4 85 F1 | 	sub	objptr, ##698
1e904                 | LR__2470
1e904                 | ' return val
1e904     00 FB 01 F6 | 	mov	result1, _var01
1e908                 | _hg010b_spin2_fillpop_ret
1e908     2D 00 64 FD | 	ret
1e90c                 | 
1e90c                 | ' 
1e90c                 | '       
1e90c                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1e90c                 | _hg010b_spin2_fill
1e90c     0B 4A 05 F6 | 	mov	COUNT_, #11
1e910     A8 00 A0 FD | 	call	#pushregs_
1e914                 | ' 
1e914                 | ' newcolor:=newcolor & 255
1e914     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1e918                 | ' oldcolor:=oldcolor & 255
1e918     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1e91c                 | ' 
1e91c                 | ' if (oldcolor == newcolor) 
1e91c     0F 21 0A F2 | 	cmp	local02, local01 wz
1e920                 | '   return
1e920     70 02 90 AD |  if_e	jmp	#LR__2489
1e924                 | ' 
1e924                 | ' fillptr:=0
1e924     0B 00 00 FF 
1e928     BA E4 05 F1 | 	add	objptr, ##5818
1e92c     F2 00 68 FC | 	wrlong	#0, objptr
1e930                 | ' fillmax:=0
1e930     04 E4 05 F1 | 	add	objptr, #4
1e934     F2 00 68 FC | 	wrlong	#0, objptr
1e938     0B 00 00 FF 
1e93c     BE E4 85 F1 | 	sub	objptr, ##5822
1e940                 | ' fillpush(x)
1e940     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1e944                 | ' fillpush(y)
1e944     0A 13 02 F6 | 	mov	arg01, arg02
1e948     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1e94c                 | ' y:=fillpop()
1e94c     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1e950     FD 22 02 F6 | 	mov	local03, result1
1e954                 | ' x:=fillpop()
1e954     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1e958     FD 24 02 F6 | 	mov	local04, result1
1e95c                 | ' 'pinhigh(38)
1e95c                 | ' repeat while (x>-1)       
1e95c                 | LR__2480
1e95c     00 24 56 F2 | 	cmps	local04, #0 wc
1e960     30 02 90 CD |  if_b	jmp	#LR__2488
1e964                 | '  ' pintoggle(39)
1e964                 | '   x1 := x
1e964     12 27 02 F6 | 	mov	local05, local04
1e968                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1e968                 | LR__2481
1e968     00 28 06 F6 | 	mov	local06, #0
1e96c     00 2A 06 F6 | 	mov	local07, #0
1e970     00 26 56 F2 | 	cmps	local05, #0 wc
1e974     01 2A 66 36 |  if_ae	neg	local07, #1
1e978     00 2A 0E F2 | 	cmp	local07, #0 wz
1e97c     00 28 26 56 |  if_ne	not	local06, #0
1e980     00 2C 06 F6 | 	mov	local08, #0
1e984     00 2E 06 F6 | 	mov	local09, #0
1e988     11 15 02 F6 | 	mov	arg02, local03
1e98c     13 13 02 F6 | 	mov	arg01, local05
1e990     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1e994     10 FB 09 F2 | 	cmp	result1, local02 wz
1e998     00 2E 26 A6 |  if_e	not	local09, #0
1e99c     00 2E 0E F2 | 	cmp	local09, #0 wz
1e9a0     00 2C 26 56 |  if_ne	not	local08, #0
1e9a4     16 29 CA F7 | 	test	local06, local08 wz
1e9a8                 | '     x1--
1e9a8     01 26 86 51 |  if_ne	sub	local05, #1
1e9ac     B8 FF 9F 5D |  if_ne	jmp	#LR__2481
1e9b0                 | '   x1++
1e9b0     01 26 06 F1 | 	add	local05, #1
1e9b4                 | '   spanabove := 0
1e9b4     00 30 06 F6 | 	mov	local10, #0
1e9b8                 | '   spanbelow := 0
1e9b8     00 32 06 F6 | 	mov	local11, #0
1e9bc                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1e9bc                 | LR__2482
1e9bc     00 28 06 F6 | 	mov	local06, #0
1e9c0     02 00 00 FF 
1e9c4     00 26 56 F2 | 	cmps	local05, ##1024 wc
1e9c8     00 28 26 C6 |  if_b	not	local06, #0
1e9cc     00 2C 06 F6 | 	mov	local08, #0
1e9d0     00 2E 06 F6 | 	mov	local09, #0
1e9d4     11 15 02 F6 | 	mov	arg02, local03
1e9d8     13 13 02 F6 | 	mov	arg01, local05
1e9dc     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1e9e0     10 FB 09 F2 | 	cmp	result1, local02 wz
1e9e4     00 2E 26 A6 |  if_e	not	local09, #0
1e9e8     00 2E 0E F2 | 	cmp	local09, #0 wz
1e9ec     00 2C 26 56 |  if_ne	not	local08, #0
1e9f0     16 29 CA F7 | 	test	local06, local08 wz
1e9f4     88 01 90 AD |  if_e	jmp	#LR__2487
1e9f8                 | '     putpixel2 (x1,y, newcolor & 255)
1e9f8     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1e9fc     13 13 02 F6 | 	mov	arg01, local05
1ea00     11 15 02 F6 | 	mov	arg02, local03
1ea04     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1ea08                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1ea08     00 28 06 F6 | 	mov	local06, #0
1ea0c     00 2A 06 F6 | 	mov	local07, #0
1ea10     00 30 0E F2 | 	cmp	local10, #0 wz
1ea14     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1ea18     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1ea1c     00 2A 0E F2 | 	cmp	local07, #0 wz
1ea20     00 28 26 56 |  if_ne	not	local06, #0
1ea24     00 2C 06 F6 | 	mov	local08, #0
1ea28     00 2E 06 F6 | 	mov	local09, #0
1ea2c     11 15 02 F6 | 	mov	arg02, local03
1ea30     01 14 86 F1 | 	sub	arg02, #1
1ea34     13 13 02 F6 | 	mov	arg01, local05
1ea38     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1ea3c     10 FB 09 F2 | 	cmp	result1, local02 wz
1ea40     00 2E 26 A6 |  if_e	not	local09, #0
1ea44     00 2E 0E F2 | 	cmp	local09, #0 wz
1ea48     00 2C 26 56 |  if_ne	not	local08, #0
1ea4c     16 29 CA F7 | 	test	local06, local08 wz
1ea50     1C 00 90 AD |  if_e	jmp	#LR__2483
1ea54                 | '       fillpush(x1)
1ea54     13 13 02 F6 | 	mov	arg01, local05
1ea58     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1ea5c                 | '       fillpush(y-1)
1ea5c     11 13 02 F6 | 	mov	arg01, local03
1ea60     01 12 86 F1 | 	sub	arg01, #1
1ea64     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1ea68                 | '       spanabove := 1 
1ea68     01 30 06 F6 | 	mov	local10, #1
1ea6c     4C 00 90 FD | 	jmp	#LR__2484
1ea70                 | LR__2483
1ea70                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1ea70     00 28 06 F6 | 	mov	local06, #0
1ea74     00 2A 06 F6 | 	mov	local07, #0
1ea78     00 30 0E F2 | 	cmp	local10, #0 wz
1ea7c     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1ea80     01 2A 66 16 |  if_a	neg	local07, #1
1ea84     00 2A 0E F2 | 	cmp	local07, #0 wz
1ea88     00 28 26 56 |  if_ne	not	local06, #0
1ea8c     00 2C 06 F6 | 	mov	local08, #0
1ea90     00 2E 06 F6 | 	mov	local09, #0
1ea94     11 15 02 F6 | 	mov	arg02, local03
1ea98     01 14 86 F1 | 	sub	arg02, #1
1ea9c     13 13 02 F6 | 	mov	arg01, local05
1eaa0     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1eaa4     10 FB 09 F2 | 	cmp	result1, local02 wz
1eaa8     00 2E 26 56 |  if_ne	not	local09, #0
1eaac     00 2E 0E F2 | 	cmp	local09, #0 wz
1eab0     00 2C 26 56 |  if_ne	not	local08, #0
1eab4     16 29 CA F7 | 	test	local06, local08 wz
1eab8                 | '       spanabove := 0 
1eab8     00 30 06 56 |  if_ne	mov	local10, #0
1eabc                 | LR__2484
1eabc                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1eabc     00 28 06 F6 | 	mov	local06, #0
1eac0     00 2A 06 F6 | 	mov	local07, #0
1eac4     00 32 0E F2 | 	cmp	local11, #0 wz
1eac8     01 00 00 AF 
1eacc     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1ead0     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1ead4     00 2A 0E F2 | 	cmp	local07, #0 wz
1ead8     00 28 26 56 |  if_ne	not	local06, #0
1eadc     00 2C 06 F6 | 	mov	local08, #0
1eae0     00 2E 06 F6 | 	mov	local09, #0
1eae4     11 15 02 F6 | 	mov	arg02, local03
1eae8     01 14 06 F1 | 	add	arg02, #1
1eaec     13 13 02 F6 | 	mov	arg01, local05
1eaf0     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1eaf4     10 FB 09 F2 | 	cmp	result1, local02 wz
1eaf8     00 2E 26 A6 |  if_e	not	local09, #0
1eafc     00 2E 0E F2 | 	cmp	local09, #0 wz
1eb00     00 2C 26 56 |  if_ne	not	local08, #0
1eb04     16 29 CA F7 | 	test	local06, local08 wz
1eb08     1C 00 90 AD |  if_e	jmp	#LR__2485
1eb0c                 | '       fillpush(x1)
1eb0c     13 13 02 F6 | 	mov	arg01, local05
1eb10     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1eb14                 | '       fillpush(y + 1)
1eb14     11 13 02 F6 | 	mov	arg01, local03
1eb18     01 12 06 F1 | 	add	arg01, #1
1eb1c     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1eb20                 | '       spanBelow := 1
1eb20     01 32 06 F6 | 	mov	local11, #1
1eb24     50 00 90 FD | 	jmp	#LR__2486
1eb28                 | LR__2485
1eb28                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1eb28     00 28 06 F6 | 	mov	local06, #0
1eb2c     00 2A 06 F6 | 	mov	local07, #0
1eb30     00 32 0E F2 | 	cmp	local11, #0 wz
1eb34     01 00 00 5F 
1eb38     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
1eb3c     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
1eb40     00 2A 0E F2 | 	cmp	local07, #0 wz
1eb44     00 28 26 56 |  if_ne	not	local06, #0
1eb48     00 2C 06 F6 | 	mov	local08, #0
1eb4c     00 2E 06 F6 | 	mov	local09, #0
1eb50     11 15 02 F6 | 	mov	arg02, local03
1eb54     01 14 06 F1 | 	add	arg02, #1
1eb58     13 13 02 F6 | 	mov	arg01, local05
1eb5c     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1eb60     10 FB 09 F2 | 	cmp	result1, local02 wz
1eb64     00 2E 26 56 |  if_ne	not	local09, #0
1eb68     00 2E 0E F2 | 	cmp	local09, #0 wz
1eb6c     00 2C 26 56 |  if_ne	not	local08, #0
1eb70     16 29 CA F7 | 	test	local06, local08 wz
1eb74                 | '       spanbelow := 0
1eb74     00 32 06 56 |  if_ne	mov	local11, #0
1eb78                 | LR__2486
1eb78                 | '     x1++
1eb78     01 26 06 F1 | 	add	local05, #1
1eb7c     3C FE 9F FD | 	jmp	#LR__2482
1eb80                 | LR__2487
1eb80                 | '   y:=fillpop()
1eb80     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1eb84     FD 22 02 F6 | 	mov	local03, result1
1eb88                 | '   x:=fillpop()
1eb88     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1eb8c     FD 24 02 F6 | 	mov	local04, result1
1eb90     C8 FD 9F FD | 	jmp	#LR__2480
1eb94                 | LR__2488
1eb94                 | LR__2489
1eb94     A7 F0 03 F6 | 	mov	ptra, fp
1eb98     B2 00 A0 FD | 	call	#popregs_
1eb9c                 | _hg010b_spin2_fill_ret
1eb9c     2D 00 64 FD | 	ret
1eba0                 | 
1eba0                 | ' 'pinlow(38)    
1eba0                 | ' 
1eba0                 | ' '-- A filled circle -----------------------------------------------------
1eba0                 | ' 
1eba0                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1eba0                 | _hg010b_spin2_fcircle
1eba0     08 4A 05 F6 | 	mov	COUNT_, #8
1eba4     A8 00 A0 FD | 	call	#pushregs_
1eba8     0B 1F 02 F6 | 	mov	local01, arg03
1ebac     FF FF 7F FF 
1ebb0     FE 1F 06 FD | 	qmul	local01, ##-2
1ebb4     09 21 02 F6 | 	mov	local02, arg01
1ebb8     0A 23 02 F6 | 	mov	local03, arg02
1ebbc     0C 25 02 F6 | 	mov	local04, arg04
1ebc0                 | ' 
1ebc0                 | ' d:=5-4*r
1ebc0     0F 19 02 F6 | 	mov	arg04, local01
1ebc4     02 18 66 F0 | 	shl	arg04, #2
1ebc8     05 26 06 F6 | 	mov	local05, #5
1ebcc     0C 27 82 F1 | 	sub	local05, arg04
1ebd0                 | ' x:=0
1ebd0     00 28 06 F6 | 	mov	local06, #0
1ebd4                 | ' y:=r
1ebd4                 | ' da:=(-2*r+5)*4
1ebd4                 | ' db:=3*4
1ebd4     0C 2A 06 F6 | 	mov	local07, #12
1ebd8                 | ' repeat while (x<=y) 
1ebd8     18 2C 62 FD | 	getqx	local08
1ebdc     05 2C 06 F1 | 	add	local08, #5
1ebe0     02 2C 66 F0 | 	shl	local08, #2
1ebe4                 | LR__2490
1ebe4     0F 29 5A F2 | 	cmps	local06, local01 wcz
1ebe8     B4 00 90 1D |  if_a	jmp	#LR__2492
1ebec                 | '   fastline(x0-x,x0+x,y0-y,c)
1ebec     10 13 02 F6 | 	mov	arg01, local02
1ebf0     14 13 82 F1 | 	sub	arg01, local06
1ebf4     10 15 02 F6 | 	mov	arg02, local02
1ebf8     14 15 02 F1 | 	add	arg02, local06
1ebfc     11 17 02 F6 | 	mov	arg03, local03
1ec00     0F 17 82 F1 | 	sub	arg03, local01
1ec04     12 19 02 F6 | 	mov	arg04, local04
1ec08     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ec0c                 | '   fastline(x0-x,x0+x,y0+y,c)
1ec0c     10 13 02 F6 | 	mov	arg01, local02
1ec10     14 13 82 F1 | 	sub	arg01, local06
1ec14     10 15 02 F6 | 	mov	arg02, local02
1ec18     14 15 02 F1 | 	add	arg02, local06
1ec1c     11 17 02 F6 | 	mov	arg03, local03
1ec20     0F 17 02 F1 | 	add	arg03, local01
1ec24     12 19 02 F6 | 	mov	arg04, local04
1ec28     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ec2c                 | '   fastline(x0-y,x0+y,y0-x,c)
1ec2c     10 13 02 F6 | 	mov	arg01, local02
1ec30     0F 13 82 F1 | 	sub	arg01, local01
1ec34     10 15 02 F6 | 	mov	arg02, local02
1ec38     0F 15 02 F1 | 	add	arg02, local01
1ec3c     11 17 02 F6 | 	mov	arg03, local03
1ec40     14 17 82 F1 | 	sub	arg03, local06
1ec44     12 19 02 F6 | 	mov	arg04, local04
1ec48     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ec4c                 | '   fastline(x0-y,x0+y,y0+x,c)
1ec4c     10 13 02 F6 | 	mov	arg01, local02
1ec50     0F 13 82 F1 | 	sub	arg01, local01
1ec54     10 15 02 F6 | 	mov	arg02, local02
1ec58     0F 15 02 F1 | 	add	arg02, local01
1ec5c     11 17 02 F6 | 	mov	arg03, local03
1ec60     14 17 02 F1 | 	add	arg03, local06
1ec64     12 19 02 F6 | 	mov	arg04, local04
1ec68     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1ec6c                 | '   if d>0 
1ec6c     01 26 56 F2 | 	cmps	local05, #1 wc
1ec70     18 00 90 CD |  if_b	jmp	#LR__2491
1ec74                 | '     d+=da
1ec74     16 27 02 F1 | 	add	local05, local08
1ec78                 | '     y-=1
1ec78     01 1E 86 F1 | 	sub	local01, #1
1ec7c                 | '     x+=1
1ec7c     01 28 06 F1 | 	add	local06, #1
1ec80                 | '     da+=4*4
1ec80     10 2C 06 F1 | 	add	local08, #16
1ec84                 | '     db+=2*4
1ec84     08 2A 06 F1 | 	add	local07, #8
1ec88     58 FF 9F FD | 	jmp	#LR__2490
1ec8c                 | LR__2491
1ec8c                 | '   else
1ec8c                 | '     d+=db
1ec8c     15 27 02 F1 | 	add	local05, local07
1ec90                 | '     x+=1
1ec90     01 28 06 F1 | 	add	local06, #1
1ec94                 | '     da+=2*4
1ec94     08 2C 06 F1 | 	add	local08, #8
1ec98                 | '     db+=2*4
1ec98     08 2A 06 F1 | 	add	local07, #8
1ec9c     44 FF 9F FD | 	jmp	#LR__2490
1eca0                 | LR__2492
1eca0     A7 F0 03 F6 | 	mov	ptra, fp
1eca4     B2 00 A0 FD | 	call	#popregs_
1eca8                 | _hg010b_spin2_fcircle_ret
1eca8     2D 00 64 FD | 	ret
1ecac                 | 
1ecac                 | '  
1ecac                 | ' '-- A circle ------------------------------------------------------------ 
1ecac                 | '  
1ecac                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1ecac                 | _hg010b_spin2_circle
1ecac     08 4A 05 F6 | 	mov	COUNT_, #8
1ecb0     A8 00 A0 FD | 	call	#pushregs_
1ecb4     0B 1F 02 F6 | 	mov	local01, arg03
1ecb8     FF FF 7F FF 
1ecbc     FE 1F 06 FD | 	qmul	local01, ##-2
1ecc0     09 21 02 F6 | 	mov	local02, arg01
1ecc4     0A 23 02 F6 | 	mov	local03, arg02
1ecc8     0C 25 02 F6 | 	mov	local04, arg04
1eccc                 | ' 
1eccc                 | '  
1eccc                 | ' d:=5-4*r
1eccc     0F 19 02 F6 | 	mov	arg04, local01
1ecd0     02 18 66 F0 | 	shl	arg04, #2
1ecd4     05 26 06 F6 | 	mov	local05, #5
1ecd8     0C 27 82 F1 | 	sub	local05, arg04
1ecdc                 | ' x:=0
1ecdc     00 28 06 F6 | 	mov	local06, #0
1ece0                 | ' y:=r
1ece0                 | ' da:=(-2*r+5)*4
1ece0                 | ' db:=3*4
1ece0     0C 2A 06 F6 | 	mov	local07, #12
1ece4                 | ' repeat while (x<=y) 
1ece4     18 2C 62 FD | 	getqx	local08
1ece8     05 2C 06 F1 | 	add	local08, #5
1ecec     02 2C 66 F0 | 	shl	local08, #2
1ecf0                 | LR__2500
1ecf0     0F 29 5A F2 | 	cmps	local06, local01 wcz
1ecf4     F4 00 90 1D |  if_a	jmp	#LR__2502
1ecf8                 | '   putpixel(x0-x,y0-y,c)
1ecf8     10 13 02 F6 | 	mov	arg01, local02
1ecfc     14 13 82 F1 | 	sub	arg01, local06
1ed00     11 15 02 F6 | 	mov	arg02, local03
1ed04     0F 15 82 F1 | 	sub	arg02, local01
1ed08     12 17 02 F6 | 	mov	arg03, local04
1ed0c     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ed10                 | '   putpixel(x0-x,y0+y,c)
1ed10     10 13 02 F6 | 	mov	arg01, local02
1ed14     14 13 82 F1 | 	sub	arg01, local06
1ed18     11 15 02 F6 | 	mov	arg02, local03
1ed1c     0F 15 02 F1 | 	add	arg02, local01
1ed20     12 17 02 F6 | 	mov	arg03, local04
1ed24     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ed28                 | '   putpixel(x0+x,y0-y,c)
1ed28     10 13 02 F6 | 	mov	arg01, local02
1ed2c     14 13 02 F1 | 	add	arg01, local06
1ed30     11 15 02 F6 | 	mov	arg02, local03
1ed34     0F 15 82 F1 | 	sub	arg02, local01
1ed38     12 17 02 F6 | 	mov	arg03, local04
1ed3c     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ed40                 | '   putpixel(x0+x,y0+y,c)
1ed40     10 13 02 F6 | 	mov	arg01, local02
1ed44     14 13 02 F1 | 	add	arg01, local06
1ed48     11 15 02 F6 | 	mov	arg02, local03
1ed4c     0F 15 02 F1 | 	add	arg02, local01
1ed50     12 17 02 F6 | 	mov	arg03, local04
1ed54     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1ed58                 | '   putpixel(x0-y,y0-x,c)
1ed58     10 13 02 F6 | 	mov	arg01, local02
1ed5c     0F 13 82 F1 | 	sub	arg01, local01
1ed60     11 15 02 F6 | 	mov	arg02, local03
1ed64     14 15 82 F1 | 	sub	arg02, local06
1ed68     12 17 02 F6 | 	mov	arg03, local04
1ed6c     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ed70                 | '   putpixel(x0-y,y0+x,c)
1ed70     10 13 02 F6 | 	mov	arg01, local02
1ed74     0F 13 82 F1 | 	sub	arg01, local01
1ed78     11 15 02 F6 | 	mov	arg02, local03
1ed7c     14 15 02 F1 | 	add	arg02, local06
1ed80     12 17 02 F6 | 	mov	arg03, local04
1ed84     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1ed88                 | '   putpixel(x0+y,y0-x,c)
1ed88     10 13 02 F6 | 	mov	arg01, local02
1ed8c     0F 13 02 F1 | 	add	arg01, local01
1ed90     11 15 02 F6 | 	mov	arg02, local03
1ed94     14 15 82 F1 | 	sub	arg02, local06
1ed98     12 17 02 F6 | 	mov	arg03, local04
1ed9c     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1eda0                 | '   putpixel(x0+y,y0+x,c)
1eda0     10 13 02 F6 | 	mov	arg01, local02
1eda4     0F 13 02 F1 | 	add	arg01, local01
1eda8     11 15 02 F6 | 	mov	arg02, local03
1edac     14 15 02 F1 | 	add	arg02, local06
1edb0     12 17 02 F6 | 	mov	arg03, local04
1edb4     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1edb8                 | '   if d>0 
1edb8     01 26 56 F2 | 	cmps	local05, #1 wc
1edbc     18 00 90 CD |  if_b	jmp	#LR__2501
1edc0                 | '     d+=da
1edc0     16 27 02 F1 | 	add	local05, local08
1edc4                 | '     y-=1
1edc4     01 1E 86 F1 | 	sub	local01, #1
1edc8                 | '     x+=1
1edc8     01 28 06 F1 | 	add	local06, #1
1edcc                 | '     da+=4*4
1edcc     10 2C 06 F1 | 	add	local08, #16
1edd0                 | '     db+=2*4
1edd0     08 2A 06 F1 | 	add	local07, #8
1edd4     18 FF 9F FD | 	jmp	#LR__2500
1edd8                 | LR__2501
1edd8                 | '   else
1edd8                 | '     d+=db
1edd8     15 27 02 F1 | 	add	local05, local07
1eddc                 | '     x+=1
1eddc     01 28 06 F1 | 	add	local06, #1
1ede0                 | '     da+=2*4
1ede0     08 2C 06 F1 | 	add	local08, #8
1ede4                 | '     db+=2*4
1ede4     08 2A 06 F1 | 	add	local07, #8
1ede8     04 FF 9F FD | 	jmp	#LR__2500
1edec                 | LR__2502
1edec     A7 F0 03 F6 | 	mov	ptra, fp
1edf0     B2 00 A0 FD | 	call	#popregs_
1edf4                 | _hg010b_spin2_circle_ret
1edf4     2D 00 64 FD | 	ret
1edf8                 | 
1edf8                 | '     
1edf8                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1edf8                 | ' 
1edf8                 | ' pub frame(x1,y1,x2,y2,c)
1edf8                 | _hg010b_spin2_frame
1edf8     05 4A 05 F6 | 	mov	COUNT_, #5
1edfc     A8 00 A0 FD | 	call	#pushregs_
1ee00     09 1F 02 F6 | 	mov	local01, arg01
1ee04     0A 21 02 F6 | 	mov	local02, arg02
1ee08     0B 23 02 F6 | 	mov	local03, arg03
1ee0c     0C 25 02 F6 | 	mov	local04, arg04
1ee10     0D 27 02 F6 | 	mov	local05, arg05
1ee14                 | ' 
1ee14                 | ' fastline(x1,x2,y1,c)
1ee14     0F 13 02 F6 | 	mov	arg01, local01
1ee18     11 15 02 F6 | 	mov	arg02, local03
1ee1c     10 17 02 F6 | 	mov	arg03, local02
1ee20     13 19 02 F6 | 	mov	arg04, local05
1ee24     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1ee28                 | ' fastline(x1,x2,y2,c)
1ee28     0F 13 02 F6 | 	mov	arg01, local01
1ee2c     11 15 02 F6 | 	mov	arg02, local03
1ee30     12 17 02 F6 | 	mov	arg03, local04
1ee34     13 19 02 F6 | 	mov	arg04, local05
1ee38     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1ee3c                 | ' line(x1,y1,x1,y2,c)
1ee3c     0F 13 02 F6 | 	mov	arg01, local01
1ee40     10 15 02 F6 | 	mov	arg02, local02
1ee44     0F 17 02 F6 | 	mov	arg03, local01
1ee48     12 19 02 F6 | 	mov	arg04, local04
1ee4c     13 1B 02 F6 | 	mov	arg05, local05
1ee50                 | ' draw(x1,y1,x2,y2,c)
1ee50     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1ee54                 | ' line(x2,y1,x2,y2,c)
1ee54     11 13 02 F6 | 	mov	arg01, local03
1ee58     10 15 02 F6 | 	mov	arg02, local02
1ee5c     11 17 02 F6 | 	mov	arg03, local03
1ee60     12 19 02 F6 | 	mov	arg04, local04
1ee64     13 1B 02 F6 | 	mov	arg05, local05
1ee68                 | ' draw(x1,y1,x2,y2,c)
1ee68     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1ee6c     A7 F0 03 F6 | 	mov	ptra, fp
1ee70     B2 00 A0 FD | 	call	#popregs_
1ee74                 | _hg010b_spin2_frame_ret
1ee74     2D 00 64 FD | 	ret
1ee78                 | 
1ee78                 | ' 
1ee78                 | ' '-- A box (a filled rectangle) ----------------------------------------
1ee78                 | ' 
1ee78                 | ' pub box(x1,y1,x2,y2,c) |yy
1ee78                 | _hg010b_spin2_box
1ee78     06 4A 05 F6 | 	mov	COUNT_, #6
1ee7c     A8 00 A0 FD | 	call	#pushregs_
1ee80     09 1F 02 F6 | 	mov	local01, arg01
1ee84     0A 21 02 F6 | 	mov	local02, arg02
1ee88     0B 23 02 F6 | 	mov	local03, arg03
1ee8c     0C 25 02 F6 | 	mov	local04, arg04
1ee90     0D 27 02 F6 | 	mov	local05, arg05
1ee94                 | ' 
1ee94                 | ' repeat yy from y1 to y2
1ee94     10 25 52 F2 | 	cmps	local04, local02 wc
1ee98     01 28 86 F6 | 	negc	local06, #1
1ee9c     14 25 02 F1 | 	add	local04, local06
1eea0                 | LR__2510
1eea0                 | '   fastline(x1,x2,yy,c)
1eea0     0F 13 02 F6 | 	mov	arg01, local01
1eea4     11 15 02 F6 | 	mov	arg02, local03
1eea8     13 19 02 F6 | 	mov	arg04, local05
1eeac     10 17 02 F6 | 	mov	arg03, local02
1eeb0     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1eeb4     14 21 02 F1 | 	add	local02, local06
1eeb8     12 21 0A F2 | 	cmp	local02, local04 wz
1eebc     E0 FF 9F 5D |  if_ne	jmp	#LR__2510
1eec0     A7 F0 03 F6 | 	mov	ptra, fp
1eec4     B2 00 A0 FD | 	call	#popregs_
1eec8                 | _hg010b_spin2_box_ret
1eec8     2D 00 64 FD | 	ret
1eecc                 | 
1eecc                 | '       
1eecc                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1eecc                 | _hg010b_spin2_putcharxycgf
1eecc                 | ' 
1eecc                 | '  
1eecc                 | ' repeat yy from 0 to 15
1eecc     00 00 06 F6 | 	mov	_var01, #0
1eed0     97 8C 48 FB | 	callpa	#(@LR__2522-@LR__2520)>>2,fcache_load_ptr_
1eed4                 | LR__2520
1eed4                 | ' 
1eed4                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1eed4     95 E4 05 F1 | 	add	objptr, #149
1eed8     F2 02 02 FB | 	rdlong	_var02, objptr
1eedc     0A 02 66 F0 | 	shl	_var02, #10
1eee0     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1eee4     01 05 02 F1 | 	add	_var03, _var02
1eee8     0B 03 02 F6 | 	mov	_var02, arg03
1eeec     04 02 66 F0 | 	shl	_var02, #4
1eef0     01 05 02 F1 | 	add	_var03, _var02
1eef4     00 05 02 F1 | 	add	_var03, _var01
1eef8     02 05 C2 FA | 	rdbyte	_var03, _var03
1eefc                 | '   asm
1eefc     00 04 0E F4 | 	testb	_var03, #0 wz
1ef00     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1ef04     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1ef08     01 04 0E F4 | 	testb	_var03, #1 wz
1ef0c     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1ef10     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1ef14     02 04 0E F4 | 	testb	_var03, #2 wz
1ef18     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1ef1c     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1ef20     03 04 0E F4 | 	testb	_var03, #3 wz
1ef24     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1ef28     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1ef2c     04 04 0E F4 | 	testb	_var03, #4 wz
1ef30     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1ef34     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1ef38     05 04 0E F4 | 	testb	_var03, #5 wz
1ef3c     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1ef40     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1ef44     06 04 0E F4 | 	testb	_var03, #6 wz
1ef48     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1ef4c     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1ef50     07 04 0E F4 | 	testb	_var03, #7 wz
1ef54     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1ef58     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1ef5c                 | '   
1ef5c                 | '   ccc[0]:=c1
1ef5c     99 E5 05 F1 | 	add	objptr, #409
1ef60     F2 06 62 FC | 	wrlong	_var04, objptr
1ef64                 | '   ccc[1]:=c2 
1ef64     04 E4 05 F1 | 	add	objptr, #4
1ef68     F2 08 62 FC | 	wrlong	_var05, objptr
1ef6c                 | '   long[mailbox0][2]:=8
1ef6c     49 E4 85 F1 | 	sub	objptr, #73
1ef70     F2 04 02 FB | 	rdlong	_var03, objptr
1ef74     08 04 06 F1 | 	add	_var03, #8
1ef78     02 11 68 FC | 	wrlong	#8, _var03
1ef7c                 | '   long[mailbox0][1]:=@ccc
1ef7c     45 E4 05 F1 | 	add	objptr, #69
1ef80     F2 04 02 F6 | 	mov	_var03, objptr
1ef84     45 E4 85 F1 | 	sub	objptr, #69
1ef88     F2 02 02 FB | 	rdlong	_var02, objptr
1ef8c     04 02 06 F1 | 	add	_var02, #4
1ef90     01 05 62 FC | 	wrlong	_var03, _var02
1ef94                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1ef94     0C E5 85 F1 | 	sub	objptr, #268
1ef98     F2 04 02 FB | 	rdlong	_var03, objptr
1ef9c     0A 03 02 F6 | 	mov	_var02, arg02
1efa0     00 03 02 F1 | 	add	_var02, _var01
1efa4     0A 02 66 F0 | 	shl	_var02, #10
1efa8     09 0B 02 F6 | 	mov	_var06, arg01
1efac     02 0A 66 F0 | 	shl	_var06, #2
1efb0     05 03 02 F1 | 	add	_var02, _var06
1efb4     01 05 02 F1 | 	add	_var03, _var02
1efb8     00 00 78 FF 
1efbc     00 04 06 F1 | 	add	_var03, ##-268435456
1efc0     0C E5 05 F1 | 	add	objptr, #268
1efc4     F2 0A 02 FB | 	rdlong	_var06, objptr
1efc8     05 05 62 FC | 	wrlong	_var03, _var06
1efcc                 | '   repeat
1efcc                 | LR__2521
1efcc     F2 04 02 FB | 	rdlong	_var03, objptr
1efd0     02 03 02 FB | 	rdlong	_var02, _var03
1efd4     00 02 56 F2 | 	cmps	_var02, #0 wc
1efd8     F0 FF 9F CD |  if_b	jmp	#LR__2521
1efdc     E9 E5 85 F1 | 	sub	objptr, #489
1efe0     01 00 06 F1 | 	add	_var01, #1
1efe4     10 00 56 F2 | 	cmps	_var01, #16 wc
1efe8     E8 FE 9F CD |  if_b	jmp	#LR__2520
1efec                 | LR__2522
1efec                 | _hg010b_spin2_putcharxycgf_ret
1efec     2D 00 64 FD | 	ret
1eff0                 | 
1eff0                 | ' 
1eff0                 | ' 
1eff0                 | ' '**********************************************************************r***
1eff0                 | ' '                                                                        *
1eff0                 | ' ' Font related functions                                                 *
1eff0                 | ' '                                                                        *
1eff0                 | ' '*************************************************************************
1eff0                 | ' 
1eff0                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1eff0                 | ' 
1eff0                 | ' pub setfontfamily(afontnum)
1eff0                 | _hg010b_spin2_setfontfamily
1eff0                 | ' 
1eff0                 | ' font_family:=afontnum
1eff0     95 E4 05 F1 | 	add	objptr, #149
1eff4     F2 12 62 FC | 	wrlong	arg01, objptr
1eff8     95 E4 85 F1 | 	sub	objptr, #149
1effc                 | ' 'if afontnum==8
1effc                 | ' '  font_ptr:=@amiga_font
1effc                 | ' 
1effc                 | ' if afontnum==4
1effc     04 12 0E F2 | 	cmp	arg01, #4 wz
1f000                 | '   font_ptr:=@st_font
1f000     08 00 00 AF 
1f004     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1f008     08 E4 05 A1 |  if_e	add	objptr, #8
1f00c     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1f010     08 E4 85 A1 |  if_e	sub	objptr, #8
1f014     08 00 00 AF 
1f018     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1f01c                 | ' if afontnum==0
1f01c     00 12 0E F2 | 	cmp	arg01, #0 wz
1f020                 | '   font_ptr:=@vga_font
1f020     08 E4 05 A1 |  if_e	add	objptr, #8
1f024     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1f028     08 E4 85 A1 |  if_e	sub	objptr, #8
1f02c                 | _hg010b_spin2_setfontfamily_ret
1f02c     2D 00 64 FD | 	ret
1f030                 | 
1f030                 | ' 
1f030                 | ' '*************************************************************************
1f030                 | ' '                                                                        *
1f030                 | ' '  Cursor functions                                                      *
1f030                 | ' '                                                                        *
1f030                 | ' '*************************************************************************
1f030                 | ' 
1f030                 | ' 
1f030                 | ' pub setcursorpos(x,y)
1f030                 | _hg010b_spin2_setcursorpos
1f030                 | ' 
1f030                 | ' ''---------- Set the (x,y) position of cursor
1f030                 | ' 
1f030                 | ' cursor_x:=x
1f030     3C E4 05 F1 | 	add	objptr, #60
1f034     F2 12 52 FC | 	wrword	arg01, objptr
1f038                 | ' cursor_y:=y
1f038     02 E4 05 F1 | 	add	objptr, #2
1f03c     F2 14 42 FC | 	wrbyte	arg02, objptr
1f040                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f040     02 E4 85 F1 | 	sub	objptr, #2
1f044     F2 14 E2 FA | 	rdword	arg02, objptr
1f048     02 14 66 F0 | 	shl	arg02, #2
1f04c     02 E4 05 F1 | 	add	objptr, #2
1f050     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f054     3E E4 85 F1 | 	sub	objptr, #62
1f058     04 16 66 F0 | 	shl	arg03, #4
1f05c     04 16 06 F1 | 	add	arg03, #4
1f060     11 12 06 F6 | 	mov	arg01, #17
1f064     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1f068                 | _hg010b_spin2_setcursorpos_ret
1f068     2D 00 64 FD | 	ret
1f06c                 | 
1f06c                 | ' 
1f06c                 | ' pub setcursorx(x)
1f06c                 | _hg010b_spin2_setcursorx
1f06c                 | ' cursor_x:=x
1f06c     3C E4 05 F1 | 	add	objptr, #60
1f070     F2 12 52 FC | 	wrword	arg01, objptr
1f074                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f074     F2 14 E2 FA | 	rdword	arg02, objptr
1f078     02 14 66 F0 | 	shl	arg02, #2
1f07c     02 E4 05 F1 | 	add	objptr, #2
1f080     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f084     3E E4 85 F1 | 	sub	objptr, #62
1f088     04 16 66 F0 | 	shl	arg03, #4
1f08c     04 16 06 F1 | 	add	arg03, #4
1f090     11 12 06 F6 | 	mov	arg01, #17
1f094     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1f098                 | _hg010b_spin2_setcursorx_ret
1f098     2D 00 64 FD | 	ret
1f09c                 | 
1f09c                 | ' 
1f09c                 | ' pub setcursory(y) 
1f09c                 | _hg010b_spin2_setcursory
1f09c                 | ' cursor_y:=y
1f09c     3E E4 05 F1 | 	add	objptr, #62
1f0a0     F2 12 42 FC | 	wrbyte	arg01, objptr
1f0a4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
1f0a4     02 E4 85 F1 | 	sub	objptr, #2
1f0a8     F2 14 E2 FA | 	rdword	arg02, objptr
1f0ac     02 14 66 F0 | 	shl	arg02, #2
1f0b0     02 E4 05 F1 | 	add	objptr, #2
1f0b4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f0b8     3E E4 85 F1 | 	sub	objptr, #62
1f0bc     04 16 66 F0 | 	shl	arg03, #4
1f0c0     04 16 06 F1 | 	add	arg03, #4
1f0c4     11 12 06 F6 | 	mov	arg01, #17
1f0c8     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1f0cc                 | _hg010b_spin2_setcursory_ret
1f0cc     2D 00 64 FD | 	ret
1f0d0                 | 
1f0d0                 | ' 
1f0d0                 | ' '*************************************************************************
1f0d0                 | ' '                                                                        *
1f0d0                 | ' '  VBlank functions                                                      *
1f0d0                 | ' '                                                                        *
1f0d0                 | ' '*************************************************************************
1f0d0                 | ' 
1f0d0                 | ' pub waitvbl(amount) | i
1f0d0                 | _hg010b_spin2_waitvbl
1f0d0     03 4A 05 F6 | 	mov	COUNT_, #3
1f0d4     A8 00 A0 FD | 	call	#pushregs_
1f0d8     09 1F 02 F6 | 	mov	local01, arg01
1f0dc                 | ' 
1f0dc                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1f0dc                 | ' 
1f0dc                 | ' repeat i from 1 to amount
1f0dc     01 20 06 F6 | 	mov	local02, #1
1f0e0     01 1E 56 F2 | 	cmps	local01, #1 wc
1f0e4     01 22 86 F6 | 	negc	local03, #1
1f0e8     11 1F 02 F1 | 	add	local01, local03
1f0ec                 | LR__2530
1f0ec                 | '   repeat until vblank==0
1f0ec                 | LR__2531
1f0ec     49 E4 05 F1 | 	add	objptr, #73
1f0f0     F2 12 0A FB | 	rdlong	arg01, objptr wz
1f0f4     49 E4 85 F1 | 	sub	objptr, #73
1f0f8     0C 00 90 AD |  if_e	jmp	#LR__2532
1f0fc                 | '     waitus(100)
1f0fc     64 12 06 F6 | 	mov	arg01, #100
1f100     78 1C B0 FD | 	call	#__system___waitus
1f104     E4 FF 9F FD | 	jmp	#LR__2531
1f108                 | LR__2532
1f108                 | '   repeat until vblank==1
1f108                 | LR__2533
1f108     49 E4 05 F1 | 	add	objptr, #73
1f10c     F2 12 02 FB | 	rdlong	arg01, objptr
1f110     49 E4 85 F1 | 	sub	objptr, #73
1f114     01 12 0E F2 | 	cmp	arg01, #1 wz
1f118     0C 00 90 AD |  if_e	jmp	#LR__2534
1f11c                 | '     waitus(100)
1f11c     64 12 06 F6 | 	mov	arg01, #100
1f120     58 1C B0 FD | 	call	#__system___waitus
1f124     E0 FF 9F FD | 	jmp	#LR__2533
1f128                 | LR__2534
1f128     11 21 02 F1 | 	add	local02, local03
1f12c     0F 21 0A F2 | 	cmp	local02, local01 wz
1f130     B8 FF 9F 5D |  if_ne	jmp	#LR__2530
1f134     A7 F0 03 F6 | 	mov	ptra, fp
1f138     B2 00 A0 FD | 	call	#popregs_
1f13c                 | _hg010b_spin2_waitvbl_ret
1f13c     2D 00 64 FD | 	ret
1f140                 | 
1f140                 | ' 
1f140                 | ' 
1f140                 | ' pub cls(fc,bc)   :c,i
1f140                 | _hg010b_spin2_cls
1f140     02 4A 05 F6 | 	mov	COUNT_, #2
1f144     A8 00 A0 FD | 	call	#pushregs_
1f148     09 1F 02 F6 | 	mov	local01, arg01
1f14c     0A 21 02 F6 | 	mov	local02, arg02
1f150                 | ' 
1f150                 | ' c:=bc
1f150                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1f150     DD E4 05 F1 | 	add	objptr, #221
1f154     F2 12 02 FB | 	rdlong	arg01, objptr
1f158     A5 E4 85 F1 | 	sub	objptr, #165
1f15c     F2 16 02 FB | 	rdlong	arg03, objptr
1f160     02 16 66 F0 | 	shl	arg03, #2
1f164     10 15 02 F6 | 	mov	arg02, local02
1f168     00 18 06 F6 | 	mov	arg04, #0
1f16c     01 1A 06 F6 | 	mov	arg05, #1
1f170     0B 00 00 FF 
1f174     94 E4 05 F1 | 	add	objptr, ##5780
1f178     98 0D B0 FD | 	call	#_psram_spin2_fill
1f17c                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1f17c     0B 00 00 FF 
1f180     C8 E4 85 F1 | 	sub	objptr, ##5832
1f184     F2 12 02 FB | 	rdlong	arg01, objptr
1f188     04 E4 85 F1 | 	sub	objptr, #4
1f18c     F2 16 02 FB | 	rdlong	arg03, objptr
1f190     09 17 82 F1 | 	sub	arg03, arg01
1f194     20 14 06 F6 | 	mov	arg02, #32
1f198     00 18 06 F6 | 	mov	arg04, #0
1f19c     01 1A 06 F6 | 	mov	arg05, #1
1f1a0     0B 00 00 FF 
1f1a4     CC E4 05 F1 | 	add	objptr, ##5836
1f1a8     68 0D B0 FD | 	call	#_psram_spin2_fill
1f1ac                 | ' setwritecolors(fc,bc)
1f1ac                 | ' 
1f1ac                 | ' write_color:=ff
1f1ac     0B 00 00 FF 
1f1b0     8B E4 85 F1 | 	sub	objptr, ##5771
1f1b4     F2 1E 62 FC | 	wrlong	local01, objptr
1f1b8                 | ' write_background:=bb
1f1b8     04 E4 05 F1 | 	add	objptr, #4
1f1bc     F2 20 62 FC | 	wrlong	local02, objptr
1f1c0                 | ' cursor_x:=0
1f1c0     09 E4 85 F1 | 	sub	objptr, #9
1f1c4     F2 00 58 FC | 	wrword	#0, objptr
1f1c8                 | ' cursor_y:=0
1f1c8     02 E4 05 F1 | 	add	objptr, #2
1f1cc     F2 00 48 FC | 	wrbyte	#0, objptr
1f1d0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f1d0     02 E4 85 F1 | 	sub	objptr, #2
1f1d4     F2 14 E2 FA | 	rdword	arg02, objptr
1f1d8     02 14 66 F0 | 	shl	arg02, #2
1f1dc     02 E4 05 F1 | 	add	objptr, #2
1f1e0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f1e4     3E E4 85 F1 | 	sub	objptr, #62
1f1e8     04 16 66 F0 | 	shl	arg03, #4
1f1ec     04 16 06 F1 | 	add	arg03, #4
1f1f0     11 12 06 F6 | 	mov	arg01, #17
1f1f4     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
1f1f8                 | ' setcursorcolor(fc)
1f1f8     0F 13 02 F6 | 	mov	arg01, local01
1f1fc     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
1f200     10 FB 01 F6 | 	mov	result1, local02
1f204     00 FC 05 F6 | 	mov	result2, #0
1f208     A7 F0 03 F6 | 	mov	ptra, fp
1f20c     B2 00 A0 FD | 	call	#popregs_
1f210                 | _hg010b_spin2_cls_ret
1f210     2D 00 64 FD | 	ret
1f214                 | 
1f214                 | ' 
1f214                 | ' ''---------- Output a char at the cursor position, move the cursor 
1f214                 | ' 
1f214                 | ' pub putchar(achar) | c,x,y,l,newcpl
1f214                 | _hg010b_spin2_putchar
1f214     02 4A 05 F6 | 	mov	COUNT_, #2
1f218     A8 00 A0 FD | 	call	#pushregs_
1f21c     09 1F 02 F6 | 	mov	local01, arg01
1f220                 | ' 
1f220                 | ' if achar==10
1f220     0A 1E 0E F2 | 	cmp	local01, #10 wz
1f224                 | '   crlf()
1f224     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1f228                 | ' if achar==9
1f228     09 1E 0E F2 | 	cmp	local01, #9 wz
1f22c     18 00 90 5D |  if_ne	jmp	#LR__2540
1f230                 | '   cursor_x:=(cursor_x& %11110000)+16
1f230     3C E4 05 F1 | 	add	objptr, #60
1f234     F2 16 E2 FA | 	rdword	arg03, objptr
1f238     F0 16 06 F5 | 	and	arg03, #240
1f23c     10 16 06 F1 | 	add	arg03, #16
1f240     F2 16 52 FC | 	wrword	arg03, objptr
1f244     3C E4 85 F1 | 	sub	objptr, #60
1f248                 | LR__2540
1f248                 | '   
1f248                 | ' if (achar<>9) && (achar<>10) 
1f248     09 1E 0E F2 | 	cmp	local01, #9 wz
1f24c     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1f250     A8 00 90 AD |  if_e	jmp	#LR__2541
1f254                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1f254     3C E4 05 F1 | 	add	objptr, #60
1f258     F2 12 E2 FA | 	rdword	arg01, objptr
1f25c     02 E4 05 F1 | 	add	objptr, #2
1f260     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f264     04 14 66 F0 | 	shl	arg02, #4
1f268     04 14 06 F1 | 	add	arg02, #4
1f26c     03 E4 05 F1 | 	add	objptr, #3
1f270     F2 18 02 FB | 	rdlong	arg04, objptr
1f274     04 E4 05 F1 | 	add	objptr, #4
1f278     F2 1A 02 FB | 	rdlong	arg05, objptr
1f27c     45 E4 85 F1 | 	sub	objptr, #69
1f280     0F 17 02 F6 | 	mov	arg03, local01
1f284     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
1f288     04 E4 05 F1 | 	add	objptr, #4
1f28c     F2 12 02 FB | 	rdlong	arg01, objptr
1f290     10 00 00 FF 
1f294     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f298     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f29c     3A E4 05 F1 | 	add	objptr, #58
1f2a0     F2 1A C2 FA | 	rdbyte	arg05, objptr
1f2a4     0D 17 02 FD | 	qmul	arg03, arg05
1f2a8                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1f2a8     10 00 00 FF 
1f2ac     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f2b0     02 E4 85 F1 | 	sub	objptr, #2
1f2b4     F2 20 E2 FA | 	rdword	local02, objptr
1f2b8     01 20 46 F0 | 	shr	local02, #1
1f2bc     0F 15 02 F6 | 	mov	arg02, local01
1f2c0     01 16 06 F6 | 	mov	arg03, #1
1f2c4     00 18 06 F6 | 	mov	arg04, #0
1f2c8     01 1A 06 F6 | 	mov	arg05, #1
1f2cc     0B 00 00 FF 
1f2d0     90 E4 05 F1 | 	add	objptr, ##5776
1f2d4     18 1E 62 FD | 	getqx	local01
1f2d8     10 1F 02 F1 | 	add	local01, local02
1f2dc     0F 13 02 F1 | 	add	arg01, local01
1f2e0     30 0C B0 FD | 	call	#_psram_spin2_fill
1f2e4                 | '   cursor_x+=2
1f2e4     0B 00 00 FF 
1f2e8     90 E4 85 F1 | 	sub	objptr, ##5776
1f2ec     F2 20 E2 FA | 	rdword	local02, objptr
1f2f0     02 20 06 F1 | 	add	local02, #2
1f2f4     F2 20 52 FC | 	wrword	local02, objptr
1f2f8     3C E4 85 F1 | 	sub	objptr, #60
1f2fc                 | LR__2541
1f2fc                 | ' 
1f2fc                 | ' if cursor_x>=256
1f2fc     3C E4 05 F1 | 	add	objptr, #60
1f300     F2 20 E2 FA | 	rdword	local02, objptr
1f304     3C E4 85 F1 | 	sub	objptr, #60
1f308     00 21 56 F2 | 	cmps	local02, #256 wc
1f30c     64 00 90 CD |  if_b	jmp	#LR__2543
1f310                 | '   cursor_x:=0
1f310     3C E4 05 F1 | 	add	objptr, #60
1f314     F2 00 58 FC | 	wrword	#0, objptr
1f318                 | '   cursor_y+=1
1f318     02 E4 05 F1 | 	add	objptr, #2
1f31c     F2 20 C2 FA | 	rdbyte	local02, objptr
1f320     01 20 06 F1 | 	add	local02, #1
1f324     F2 20 42 FC | 	wrbyte	local02, objptr
1f328                 | '   if cursor_y>st_lines-1
1f328     C3 E4 05 F1 | 	add	objptr, #195
1f32c     F2 20 02 FB | 	rdlong	local02, objptr
1f330     01 20 86 F1 | 	sub	local02, #1
1f334     C3 E4 85 F1 | 	sub	objptr, #195
1f338     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f33c     3E E4 85 F1 | 	sub	objptr, #62
1f340     10 17 5A F2 | 	cmps	arg03, local02 wcz
1f344     2C 00 90 ED |  if_be	jmp	#LR__2542
1f348                 | '     scrollup2()
1f348     00 12 06 F6 | 	mov	arg01, #0
1f34c     01 00 00 FF 
1f350     58 14 06 F6 | 	mov	arg02, ##600
1f354     10 16 06 F6 | 	mov	arg03, #16
1f358     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
1f35c                 | '     cursor_y:=st_lines-1
1f35c     01 E5 05 F1 | 	add	objptr, #257
1f360     F2 20 02 FB | 	rdlong	local02, objptr
1f364     01 20 86 F1 | 	sub	local02, #1
1f368     C3 E4 85 F1 | 	sub	objptr, #195
1f36c     F2 20 42 FC | 	wrbyte	local02, objptr
1f370     3E E4 85 F1 | 	sub	objptr, #62
1f374                 | LR__2542
1f374                 | LR__2543
1f374                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f374     3C E4 05 F1 | 	add	objptr, #60
1f378     F2 14 E2 FA | 	rdword	arg02, objptr
1f37c     02 14 66 F0 | 	shl	arg02, #2
1f380     02 E4 05 F1 | 	add	objptr, #2
1f384     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f388     3E E4 85 F1 | 	sub	objptr, #62
1f38c     04 16 66 F0 | 	shl	arg03, #4
1f390     04 16 06 F1 | 	add	arg03, #4
1f394     11 12 06 F6 | 	mov	arg01, #17
1f398     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1f39c     A7 F0 03 F6 | 	mov	ptra, fp
1f3a0     B2 00 A0 FD | 	call	#popregs_
1f3a4                 | _hg010b_spin2_putchar_ret
1f3a4     2D 00 64 FD | 	ret
1f3a8                 | 
1f3a8                 | '     
1f3a8                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1f3a8                 | ' 
1f3a8                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1f3a8                 | _hg010b_spin2_putchar2
1f3a8     02 4A 05 F6 | 	mov	COUNT_, #2
1f3ac     A8 00 A0 FD | 	call	#pushregs_
1f3b0     09 1F 02 F6 | 	mov	local01, arg01
1f3b4                 | ' 
1f3b4                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1f3b4     3C E4 05 F1 | 	add	objptr, #60
1f3b8     F2 12 E2 FA | 	rdword	arg01, objptr
1f3bc     02 E4 05 F1 | 	add	objptr, #2
1f3c0     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f3c4     04 14 66 F0 | 	shl	arg02, #4
1f3c8     04 14 06 F1 | 	add	arg02, #4
1f3cc     03 E4 05 F1 | 	add	objptr, #3
1f3d0     F2 18 02 FB | 	rdlong	arg04, objptr
1f3d4     04 E4 05 F1 | 	add	objptr, #4
1f3d8     F2 1A 02 FB | 	rdlong	arg05, objptr
1f3dc     45 E4 85 F1 | 	sub	objptr, #69
1f3e0     0F 17 02 F6 | 	mov	arg03, local01
1f3e4     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
1f3e8     04 E4 05 F1 | 	add	objptr, #4
1f3ec     F2 12 02 FB | 	rdlong	arg01, objptr
1f3f0     10 00 00 FF 
1f3f4     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f3f8     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f3fc     3A E4 05 F1 | 	add	objptr, #58
1f400     F2 1A C2 FA | 	rdbyte	arg05, objptr
1f404     0D 17 02 FD | 	qmul	arg03, arg05
1f408                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1f408     10 00 00 FF 
1f40c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f410     02 E4 85 F1 | 	sub	objptr, #2
1f414     F2 20 E2 FA | 	rdword	local02, objptr
1f418     01 20 46 F0 | 	shr	local02, #1
1f41c     0F 15 02 F6 | 	mov	arg02, local01
1f420     01 16 06 F6 | 	mov	arg03, #1
1f424     00 18 06 F6 | 	mov	arg04, #0
1f428     01 1A 06 F6 | 	mov	arg05, #1
1f42c     0B 00 00 FF 
1f430     90 E4 05 F1 | 	add	objptr, ##5776
1f434     18 1E 62 FD | 	getqx	local01
1f438     10 1F 02 F1 | 	add	local01, local02
1f43c     0F 13 02 F1 | 	add	arg01, local01
1f440     D0 0A B0 FD | 	call	#_psram_spin2_fill
1f444                 | ' 
1f444                 | ' cursor_x+=2
1f444     0B 00 00 FF 
1f448     90 E4 85 F1 | 	sub	objptr, ##5776
1f44c     F2 20 E2 FA | 	rdword	local02, objptr
1f450     02 20 06 F1 | 	add	local02, #2
1f454     F2 20 52 FC | 	wrword	local02, objptr
1f458                 | ' if cursor_x>=256
1f458     F2 20 E2 FA | 	rdword	local02, objptr
1f45c     3C E4 85 F1 | 	sub	objptr, #60
1f460     00 21 56 F2 | 	cmps	local02, #256 wc
1f464     64 00 90 CD |  if_b	jmp	#LR__2551
1f468                 | '   cursor_x:=0
1f468     3C E4 05 F1 | 	add	objptr, #60
1f46c     F2 00 58 FC | 	wrword	#0, objptr
1f470                 | '   cursor_y+=1
1f470     02 E4 05 F1 | 	add	objptr, #2
1f474     F2 20 C2 FA | 	rdbyte	local02, objptr
1f478     01 20 06 F1 | 	add	local02, #1
1f47c     F2 20 42 FC | 	wrbyte	local02, objptr
1f480                 | '   if cursor_y>st_lines-1
1f480     C3 E4 05 F1 | 	add	objptr, #195
1f484     F2 20 02 FB | 	rdlong	local02, objptr
1f488     01 20 86 F1 | 	sub	local02, #1
1f48c     C3 E4 85 F1 | 	sub	objptr, #195
1f490     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f494     3E E4 85 F1 | 	sub	objptr, #62
1f498     10 17 5A F2 | 	cmps	arg03, local02 wcz
1f49c     2C 00 90 ED |  if_be	jmp	#LR__2550
1f4a0                 | '     scrollup2()
1f4a0     00 12 06 F6 | 	mov	arg01, #0
1f4a4     01 00 00 FF 
1f4a8     58 14 06 F6 | 	mov	arg02, ##600
1f4ac     10 16 06 F6 | 	mov	arg03, #16
1f4b0     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
1f4b4                 | '     cursor_y:=st_lines-1
1f4b4     01 E5 05 F1 | 	add	objptr, #257
1f4b8     F2 20 02 FB | 	rdlong	local02, objptr
1f4bc     01 20 86 F1 | 	sub	local02, #1
1f4c0     C3 E4 85 F1 | 	sub	objptr, #195
1f4c4     F2 20 42 FC | 	wrbyte	local02, objptr
1f4c8     3E E4 85 F1 | 	sub	objptr, #62
1f4cc                 | LR__2550
1f4cc                 | LR__2551
1f4cc                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
1f4cc     3C E4 05 F1 | 	add	objptr, #60
1f4d0     F2 14 E2 FA | 	rdword	arg02, objptr
1f4d4     02 14 66 F0 | 	shl	arg02, #2
1f4d8     02 E4 05 F1 | 	add	objptr, #2
1f4dc     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f4e0     3E E4 85 F1 | 	sub	objptr, #62
1f4e4     04 16 66 F0 | 	shl	arg03, #4
1f4e8     04 16 06 F1 | 	add	arg03, #4
1f4ec     11 12 06 F6 | 	mov	arg01, #17
1f4f0     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
1f4f4     A7 F0 03 F6 | 	mov	ptra, fp
1f4f8     B2 00 A0 FD | 	call	#popregs_
1f4fc                 | _hg010b_spin2_putchar2_ret
1f4fc     2D 00 64 FD | 	ret
1f500                 | 
1f500                 | ' ''--------- Output a string at the cursor position, move the cursor  
1f500                 | ' 
1f500                 | ' pub write(text) | iii,c,ncx,ncy
1f500                 | _hg010b_spin2_write
1f500     04 4A 05 F6 | 	mov	COUNT_, #4
1f504     A8 00 A0 FD | 	call	#pushregs_
1f508     09 1F 02 F6 | 	mov	local01, arg01
1f50c                 | ' 
1f50c                 | ' repeat iii from 0 to strsize(text)-1
1f50c     00 20 06 F6 | 	mov	local02, #0
1f510     0F 13 02 F6 | 	mov	arg01, local01
1f514     09 23 02 F6 | 	mov	local03, arg01
1f518     97 06 48 FB | 	callpa	#(@LR__2561-@LR__2560)>>2,fcache_load_ptr_
1f51c                 | LR__2560
1f51c     11 FB C9 FA | 	rdbyte	result1, local03 wz
1f520     01 22 06 51 |  if_ne	add	local03, #1
1f524     F4 FF 9F 5D |  if_ne	jmp	#LR__2560
1f528                 | LR__2561
1f528     09 23 82 F1 | 	sub	local03, arg01
1f52c     01 22 86 F1 | 	sub	local03, #1
1f530     00 22 56 F2 | 	cmps	local03, #0 wc
1f534     01 24 86 F6 | 	negc	local04, #1
1f538     12 23 02 F1 | 	add	local03, local04
1f53c                 | LR__2562
1f53c                 | '   putchar2(byte[text+iii])
1f53c     0F 13 02 F6 | 	mov	arg01, local01
1f540     10 13 02 F1 | 	add	arg01, local02
1f544     09 13 C2 FA | 	rdbyte	arg01, arg01
1f548     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
1f54c     12 21 02 F1 | 	add	local02, local04
1f550     11 21 0A F2 | 	cmp	local02, local03 wz
1f554     E4 FF 9F 5D |  if_ne	jmp	#LR__2562
1f558     A7 F0 03 F6 | 	mov	ptra, fp
1f55c     B2 00 A0 FD | 	call	#popregs_
1f560                 | _hg010b_spin2_write_ret
1f560     2D 00 64 FD | 	ret
1f564                 | 
1f564                 | '    
1f564                 | ' ' a version for text scrolling in Basic shifted 4 lines down
1f564                 | ' 
1f564                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
1f564                 | _hg010b_spin2_scrollup2
1f564     03 4A 05 F6 | 	mov	COUNT_, #3
1f568     A8 00 A0 FD | 	call	#pushregs_
1f56c                 | ' 	
1f56c                 | ' repeat i from 4 to 579 
1f56c     04 1E 06 F6 | 	mov	local01, #4
1f570                 | LR__2570
1f570     F9 E4 05 F1 | 	add	objptr, #249
1f574     F2 1A 02 FB | 	rdlong	arg05, objptr
1f578     1C E4 85 F1 | 	sub	objptr, #28
1f57c     F2 14 02 FB | 	rdlong	arg02, objptr
1f580     0F 19 02 F6 | 	mov	arg04, local01
1f584     10 18 06 F1 | 	add	arg04, #16
1f588     02 18 66 F0 | 	shl	arg04, #2
1f58c     14 E4 05 F1 | 	add	objptr, #20
1f590     F2 16 02 FB | 	rdlong	arg03, objptr
1f594     0B 19 02 FD | 	qmul	arg04, arg03
1f598                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1f598     F6 03 00 FF 
1f59c     00 12 06 F6 | 	mov	arg01, ##519168
1f5a0     0D 13 82 F1 | 	sub	arg01, arg05
1f5a4     02 16 66 F0 | 	shl	arg03, #2
1f5a8     0A 00 00 FF 
1f5ac     DB E5 05 F1 | 	add	objptr, ##5595
1f5b0     18 1A 62 FD | 	getqx	arg05
1f5b4     0D 15 02 F1 | 	add	arg02, arg05
1f5b8     20 08 B0 FD | 	call	#_psram_spin2_read1
1f5bc     0A 00 00 FF 
1f5c0     D3 E5 85 F1 | 	sub	objptr, ##5587
1f5c4     F2 1A 02 FB | 	rdlong	arg05, objptr
1f5c8     1C E4 85 F1 | 	sub	objptr, #28
1f5cc     F2 14 02 FB | 	rdlong	arg02, objptr
1f5d0     0F 19 02 F6 | 	mov	arg04, local01
1f5d4     02 18 66 F0 | 	shl	arg04, #2
1f5d8     14 E4 05 F1 | 	add	objptr, #20
1f5dc     F2 16 02 FB | 	rdlong	arg03, objptr
1f5e0     0B 19 02 FD | 	qmul	arg04, arg03
1f5e4                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1f5e4     F6 03 00 FF 
1f5e8     00 12 06 F6 | 	mov	arg01, ##519168
1f5ec     0D 13 82 F1 | 	sub	arg01, arg05
1f5f0     02 16 66 F0 | 	shl	arg03, #2
1f5f4     0A 00 00 FF 
1f5f8     DB E5 05 F1 | 	add	objptr, ##5595
1f5fc     18 1A 62 FD | 	getqx	arg05
1f600     0D 15 02 F1 | 	add	arg02, arg05
1f604     70 08 B0 FD | 	call	#_psram_spin2_write
1f608     0B 00 00 FF 
1f60c     CC E4 85 F1 | 	sub	objptr, ##5836
1f610     01 1E 06 F1 | 	add	local01, #1
1f614     01 00 00 FF 
1f618     44 1E 16 F2 | 	cmp	local01, ##580 wc
1f61c     50 FF 9F CD |  if_b	jmp	#LR__2570
1f620                 | ' 
1f620                 | ' repeat i from 580 to 599
1f620     01 00 00 FF 
1f624     44 1E 06 F6 | 	mov	local01, ##580
1f628                 | LR__2571
1f628                 | '    fastline(0,1023,i,write_background)   
1f628     45 E4 05 F1 | 	add	objptr, #69
1f62c     F2 18 02 FB | 	rdlong	arg04, objptr
1f630     45 E4 85 F1 | 	sub	objptr, #69
1f634     00 12 06 F6 | 	mov	arg01, #0
1f638     09 14 CE F9 | 	bmask	arg02, #9
1f63c     0F 17 02 F6 | 	mov	arg03, local01
1f640     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
1f644     01 1E 06 F1 | 	add	local01, #1
1f648     01 00 00 FF 
1f64c     58 1E 16 F2 | 	cmp	local01, ##600 wc
1f650     D4 FF 9F CD |  if_b	jmp	#LR__2571
1f654                 | ' repeat i from 0 to 3
1f654     00 1E 06 F6 | 	mov	local01, #0
1f658                 | LR__2572
1f658                 | '    fastline(0,1023,i,write_background)      
1f658     45 E4 05 F1 | 	add	objptr, #69
1f65c     F2 18 02 FB | 	rdlong	arg04, objptr
1f660     45 E4 85 F1 | 	sub	objptr, #69
1f664     00 12 06 F6 | 	mov	arg01, #0
1f668     09 14 CE F9 | 	bmask	arg02, #9
1f66c     0F 17 02 F6 | 	mov	arg03, local01
1f670     90 EF BF FD | 	call	#_hg010b_spin2_fastline
1f674     01 1E 06 F1 | 	add	local01, #1
1f678     04 1E 56 F2 | 	cmps	local01, #4 wc
1f67c     D8 FF 9F CD |  if_b	jmp	#LR__2572
1f680                 | ' 
1f680                 | ' repeat i from 0 to 35
1f680     00 1E 06 F6 | 	mov	local01, #0
1f684                 | LR__2573
1f684     0F 1B 02 F6 | 	mov	arg05, local01
1f688     01 1A 06 F1 | 	add	arg05, #1
1f68c     10 00 00 FF 
1f690     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f694     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f698     0B 1B 02 FD | 	qmul	arg05, arg03
1f69c                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
1f69c     F6 03 00 FF 
1f6a0     00 12 06 F6 | 	mov	arg01, ##519168
1f6a4     F9 E4 05 F1 | 	add	objptr, #249
1f6a8     F2 1A 02 FB | 	rdlong	arg05, objptr
1f6ac     0D 13 82 F1 | 	sub	arg01, arg05
1f6b0     F5 E4 85 F1 | 	sub	objptr, #245
1f6b4     F2 14 02 FB | 	rdlong	arg02, objptr
1f6b8     10 00 00 FF 
1f6bc     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f6c0     0B 00 00 FF 
1f6c4     C8 E4 05 F1 | 	add	objptr, ##5832
1f6c8     18 1A 62 FD | 	getqx	arg05
1f6cc     0D 15 02 F1 | 	add	arg02, arg05
1f6d0     08 07 B0 FD | 	call	#_psram_spin2_read1
1f6d4     10 00 00 FF 
1f6d8     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f6dc     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f6e0     0B 1F 02 FD | 	qmul	local01, arg03
1f6e4                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
1f6e4     F6 03 00 FF 
1f6e8     00 12 06 F6 | 	mov	arg01, ##519168
1f6ec     0A 00 00 FF 
1f6f0     D3 E5 85 F1 | 	sub	objptr, ##5587
1f6f4     F2 1A 02 FB | 	rdlong	arg05, objptr
1f6f8     0D 13 82 F1 | 	sub	arg01, arg05
1f6fc     F5 E4 85 F1 | 	sub	objptr, #245
1f700     F2 14 02 FB | 	rdlong	arg02, objptr
1f704     10 00 00 FF 
1f708     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f70c     0B 00 00 FF 
1f710     C8 E4 05 F1 | 	add	objptr, ##5832
1f714     18 1A 62 FD | 	getqx	arg05
1f718     0D 15 02 F1 | 	add	arg02, arg05
1f71c     58 07 B0 FD | 	call	#_psram_spin2_write
1f720     0B 00 00 FF 
1f724     CC E4 85 F1 | 	sub	objptr, ##5836
1f728     01 1E 06 F1 | 	add	local01, #1
1f72c     24 1E 56 F2 | 	cmps	local01, #36 wc
1f730     50 FF 9F CD |  if_b	jmp	#LR__2573
1f734                 | ' repeat i from 0 to timings[7]-1
1f734     00 1E 06 F6 | 	mov	local01, #0
1f738     10 00 00 FF 
1f73c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f740     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1f744     10 00 00 FF 
1f748     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f74c     01 20 86 F1 | 	sub	local02, #1
1f750     00 20 56 F2 | 	cmps	local02, #0 wc
1f754     01 22 86 F6 | 	negc	local03, #1
1f758     11 21 02 F1 | 	add	local02, local03
1f75c                 | LR__2574
1f75c                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
1f75c     04 E4 05 F1 | 	add	objptr, #4
1f760     F2 12 02 FB | 	rdlong	arg01, objptr
1f764     10 00 00 FF 
1f768     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f76c     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1f770     10 00 00 FF 
1f774     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f778     0D 19 02 F6 | 	mov	arg04, arg05
1f77c     03 18 66 F0 | 	shl	arg04, #3
1f780     0D 19 02 F1 | 	add	arg04, arg05
1f784     02 18 66 F0 | 	shl	arg04, #2
1f788     0F 19 02 F1 | 	add	arg04, local01
1f78c     0C 13 02 F1 | 	add	arg01, arg04
1f790     20 14 06 F6 | 	mov	arg02, #32
1f794     01 16 06 F6 | 	mov	arg03, #1
1f798     00 18 06 F6 | 	mov	arg04, #0
1f79c     01 1A 06 F6 | 	mov	arg05, #1
1f7a0     0B 00 00 FF 
1f7a4     C8 E4 05 F1 | 	add	objptr, ##5832
1f7a8     68 07 B0 FD | 	call	#_psram_spin2_fill
1f7ac     0B 00 00 FF 
1f7b0     CC E4 85 F1 | 	sub	objptr, ##5836
1f7b4     11 1F 02 F1 | 	add	local01, local03
1f7b8     10 1F 0A F2 | 	cmp	local01, local02 wz
1f7bc     9C FF 9F 5D |  if_ne	jmp	#LR__2574
1f7c0     A7 F0 03 F6 | 	mov	ptra, fp
1f7c4     B2 00 A0 FD | 	call	#popregs_
1f7c8                 | _hg010b_spin2_scrollup2_ret
1f7c8     2D 00 64 FD | 	ret
1f7cc                 | 
1f7cc                 | '  
1f7cc                 | ' ''----------- Scroll the screen one line down 
1f7cc                 | ' 
1f7cc                 | ' pub scrolldown(start=0) | i
1f7cc                 | _hg010b_spin2_scrolldown
1f7cc     05 4A 05 F6 | 	mov	COUNT_, #5
1f7d0     A8 00 A0 FD | 	call	#pushregs_
1f7d4     09 1F 02 F6 | 	mov	local01, arg01
1f7d8                 | ' 
1f7d8                 | ' repeat i from 579 to (start*16)+4
1f7d8     01 00 00 FF 
1f7dc     43 20 06 F6 | 	mov	local02, ##579
1f7e0     0F 23 02 F6 | 	mov	local03, local01
1f7e4     04 22 66 F0 | 	shl	local03, #4
1f7e8     04 22 06 F1 | 	add	local03, #4
1f7ec     01 00 00 FF 
1f7f0     43 22 56 F2 | 	cmps	local03, ##579 wc
1f7f4     01 24 86 F6 | 	negc	local04, #1
1f7f8     12 27 02 F6 | 	mov	local05, local04
1f7fc     12 23 02 F1 | 	add	local03, local04
1f800                 | LR__2580
1f800     F9 E4 05 F1 | 	add	objptr, #249
1f804     F2 24 02 FB | 	rdlong	local04, objptr
1f808     1C E4 85 F1 | 	sub	objptr, #28
1f80c     F2 14 02 FB | 	rdlong	arg02, objptr
1f810     10 1B 02 F6 | 	mov	arg05, local02
1f814     02 1A 66 F0 | 	shl	arg05, #2
1f818     14 E4 05 F1 | 	add	objptr, #20
1f81c     F2 16 02 FB | 	rdlong	arg03, objptr
1f820     0B 1B 02 FD | 	qmul	arg05, arg03
1f824                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1f824     F6 03 00 FF 
1f828     00 12 06 F6 | 	mov	arg01, ##519168
1f82c     12 13 82 F1 | 	sub	arg01, local04
1f830     02 16 66 F0 | 	shl	arg03, #2
1f834     0A 00 00 FF 
1f838     DB E5 05 F1 | 	add	objptr, ##5595
1f83c     18 24 62 FD | 	getqx	local04
1f840     12 15 02 F1 | 	add	arg02, local04
1f844     94 05 B0 FD | 	call	#_psram_spin2_read1
1f848     0A 00 00 FF 
1f84c     D3 E5 85 F1 | 	sub	objptr, ##5587
1f850     F2 24 02 FB | 	rdlong	local04, objptr
1f854     1C E4 85 F1 | 	sub	objptr, #28
1f858     F2 14 02 FB | 	rdlong	arg02, objptr
1f85c     10 1B 02 F6 | 	mov	arg05, local02
1f860     10 1A 06 F1 | 	add	arg05, #16
1f864     02 1A 66 F0 | 	shl	arg05, #2
1f868     14 E4 05 F1 | 	add	objptr, #20
1f86c     F2 16 02 FB | 	rdlong	arg03, objptr
1f870     0B 1B 02 FD | 	qmul	arg05, arg03
1f874                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1f874     F6 03 00 FF 
1f878     00 12 06 F6 | 	mov	arg01, ##519168
1f87c     12 13 82 F1 | 	sub	arg01, local04
1f880     02 16 66 F0 | 	shl	arg03, #2
1f884     0A 00 00 FF 
1f888     DB E5 05 F1 | 	add	objptr, ##5595
1f88c     18 24 62 FD | 	getqx	local04
1f890     12 15 02 F1 | 	add	arg02, local04
1f894     E0 05 B0 FD | 	call	#_psram_spin2_write
1f898     0B 00 00 FF 
1f89c     CC E4 85 F1 | 	sub	objptr, ##5836
1f8a0     13 21 02 F1 | 	add	local02, local05
1f8a4     11 21 0A F2 | 	cmp	local02, local03 wz
1f8a8     54 FF 9F 5D |  if_ne	jmp	#LR__2580
1f8ac                 | ' 
1f8ac                 | ' repeat i from (start*16)+4 to (start*16)+19
1f8ac     0F 21 02 F6 | 	mov	local02, local01
1f8b0     04 20 66 F0 | 	shl	local02, #4
1f8b4     04 20 06 F1 | 	add	local02, #4
1f8b8     0F 27 02 F6 | 	mov	local05, local01
1f8bc     04 26 66 F0 | 	shl	local05, #4
1f8c0     13 26 06 F1 | 	add	local05, #19
1f8c4     0F 25 02 F6 | 	mov	local04, local01
1f8c8     04 24 66 F0 | 	shl	local04, #4
1f8cc     04 24 06 F1 | 	add	local04, #4
1f8d0     12 27 52 F2 | 	cmps	local05, local04 wc
1f8d4     01 24 86 F6 | 	negc	local04, #1
1f8d8     12 23 02 F6 | 	mov	local03, local04
1f8dc     12 27 02 F1 | 	add	local05, local04
1f8e0                 | LR__2581
1f8e0                 | '    fastline(0,1023,i,write_background)    
1f8e0     45 E4 05 F1 | 	add	objptr, #69
1f8e4     F2 18 02 FB | 	rdlong	arg04, objptr
1f8e8     45 E4 85 F1 | 	sub	objptr, #69
1f8ec     00 12 06 F6 | 	mov	arg01, #0
1f8f0     09 14 CE F9 | 	bmask	arg02, #9
1f8f4     10 17 02 F6 | 	mov	arg03, local02
1f8f8     08 ED BF FD | 	call	#_hg010b_spin2_fastline
1f8fc     11 21 02 F1 | 	add	local02, local03
1f900     13 21 0A F2 | 	cmp	local02, local05 wz
1f904     D8 FF 9F 5D |  if_ne	jmp	#LR__2581
1f908                 | '    
1f908                 | ' repeat i from 35 to start
1f908     23 20 06 F6 | 	mov	local02, #35
1f90c     23 1E 56 F2 | 	cmps	local01, #35 wc
1f910     01 24 86 F6 | 	negc	local04, #1
1f914     0F 27 02 F6 | 	mov	local05, local01
1f918     12 27 02 F1 | 	add	local05, local04
1f91c                 | LR__2582
1f91c                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
1f91c     F6 03 00 FF 
1f920     00 12 06 F6 | 	mov	arg01, ##519168
1f924     F9 E4 05 F1 | 	add	objptr, #249
1f928     F2 22 02 FB | 	rdlong	local03, objptr
1f92c     11 13 82 F1 | 	sub	arg01, local03
1f930     F5 E4 85 F1 | 	sub	objptr, #245
1f934     F2 14 02 FB | 	rdlong	arg02, objptr
1f938     10 23 02 F6 | 	mov	local03, local02
1f93c     07 22 66 F0 | 	shl	local03, #7
1f940     11 15 02 F1 | 	add	arg02, local03
1f944     80 16 06 F6 | 	mov	arg03, #128
1f948     0B 00 00 FF 
1f94c     C8 E4 05 F1 | 	add	objptr, ##5832
1f950     88 04 B0 FD | 	call	#_psram_spin2_read1
1f954                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
1f954     F6 03 00 FF 
1f958     00 12 06 F6 | 	mov	arg01, ##519168
1f95c     0A 00 00 FF 
1f960     D3 E5 85 F1 | 	sub	objptr, ##5587
1f964     F2 22 02 FB | 	rdlong	local03, objptr
1f968     11 13 82 F1 | 	sub	arg01, local03
1f96c     F5 E4 85 F1 | 	sub	objptr, #245
1f970     F2 14 02 FB | 	rdlong	arg02, objptr
1f974     10 23 02 F6 | 	mov	local03, local02
1f978     01 22 06 F1 | 	add	local03, #1
1f97c     07 22 66 F0 | 	shl	local03, #7
1f980     11 15 02 F1 | 	add	arg02, local03
1f984     80 16 06 F6 | 	mov	arg03, #128
1f988     0B 00 00 FF 
1f98c     C8 E4 05 F1 | 	add	objptr, ##5832
1f990     E4 04 B0 FD | 	call	#_psram_spin2_write
1f994     0B 00 00 FF 
1f998     CC E4 85 F1 | 	sub	objptr, ##5836
1f99c     12 21 02 F1 | 	add	local02, local04
1f9a0     13 21 0A F2 | 	cmp	local02, local05 wz
1f9a4     74 FF 9F 5D |  if_ne	jmp	#LR__2582
1f9a8                 | ' repeat i from 0 to 127
1f9a8     00 20 06 F6 | 	mov	local02, #0
1f9ac                 | LR__2583
1f9ac                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
1f9ac     04 E4 05 F1 | 	add	objptr, #4
1f9b0     F2 12 02 FB | 	rdlong	arg01, objptr
1f9b4     0F 27 02 F6 | 	mov	local05, local01
1f9b8     07 26 66 F0 | 	shl	local05, #7
1f9bc     13 13 02 F1 | 	add	arg01, local05
1f9c0     10 13 02 F1 | 	add	arg01, local02
1f9c4     20 14 06 F6 | 	mov	arg02, #32
1f9c8     01 16 06 F6 | 	mov	arg03, #1
1f9cc     00 18 06 F6 | 	mov	arg04, #0
1f9d0     01 1A 06 F6 | 	mov	arg05, #1
1f9d4     0B 00 00 FF 
1f9d8     C8 E4 05 F1 | 	add	objptr, ##5832
1f9dc     34 05 B0 FD | 	call	#_psram_spin2_fill
1f9e0     0B 00 00 FF 
1f9e4     CC E4 85 F1 | 	sub	objptr, ##5836
1f9e8     01 20 06 F1 | 	add	local02, #1
1f9ec     80 20 56 F2 | 	cmps	local02, #128 wc
1f9f0     B8 FF 9F CD |  if_b	jmp	#LR__2583
1f9f4     A7 F0 03 F6 | 	mov	ptra, fp
1f9f8     B2 00 A0 FD | 	call	#popregs_
1f9fc                 | _hg010b_spin2_scrolldown_ret
1f9fc     2D 00 64 FD | 	ret
1fa00                 | 
1fa00                 | ' 
1fa00                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
1fa00                 | ' 
1fa00                 | ' pub crlf()
1fa00                 | _hg010b_spin2_crlf
1fa00                 | ' 
1fa00                 | ' cursor_x:=leading_spaces*2
1fa00     01 00 00 FF 
1fa04     B6 E4 05 F1 | 	add	objptr, ##694
1fa08     F2 16 02 FB | 	rdlong	arg03, objptr
1fa0c     01 16 66 F0 | 	shl	arg03, #1
1fa10     01 00 00 FF 
1fa14     7A E4 85 F1 | 	sub	objptr, ##634
1fa18     F2 16 52 FC | 	wrword	arg03, objptr
1fa1c                 | ' cursor_y+=1
1fa1c     02 E4 05 F1 | 	add	objptr, #2
1fa20     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fa24     01 16 06 F1 | 	add	arg03, #1
1fa28     F2 16 42 FC | 	wrbyte	arg03, objptr
1fa2c                 | ' if cursor_y>st_lines-1
1fa2c     C3 E4 05 F1 | 	add	objptr, #195
1fa30     F2 16 02 FB | 	rdlong	arg03, objptr
1fa34     01 16 86 F1 | 	sub	arg03, #1
1fa38     C3 E4 85 F1 | 	sub	objptr, #195
1fa3c     F2 14 C2 FA | 	rdbyte	arg02, objptr
1fa40     3E E4 85 F1 | 	sub	objptr, #62
1fa44     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
1fa48     2C 00 90 ED |  if_be	jmp	#LR__2590
1fa4c                 | '   scrollup2()
1fa4c     00 12 06 F6 | 	mov	arg01, #0
1fa50     01 00 00 FF 
1fa54     58 14 06 F6 | 	mov	arg02, ##600
1fa58     10 16 06 F6 | 	mov	arg03, #16
1fa5c     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
1fa60                 | '   cursor_y:=st_lines-1
1fa60     01 E5 05 F1 | 	add	objptr, #257
1fa64     F2 16 02 FB | 	rdlong	arg03, objptr
1fa68     01 16 86 F1 | 	sub	arg03, #1
1fa6c     C3 E4 85 F1 | 	sub	objptr, #195
1fa70     F2 16 42 FC | 	wrbyte	arg03, objptr
1fa74     3E E4 85 F1 | 	sub	objptr, #62
1fa78                 | LR__2590
1fa78                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
1fa78     3C E4 05 F1 | 	add	objptr, #60
1fa7c     F2 14 E2 FA | 	rdword	arg02, objptr
1fa80     02 14 66 F0 | 	shl	arg02, #2
1fa84     02 E4 05 F1 | 	add	objptr, #2
1fa88     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fa8c     3E E4 85 F1 | 	sub	objptr, #62
1fa90     04 16 66 F0 | 	shl	arg03, #4
1fa94     04 16 06 F1 | 	add	arg03, #4
1fa98     11 12 06 F6 | 	mov	arg01, #17
1fa9c     18 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
1faa0                 | _hg010b_spin2_crlf_ret
1faa0     2D 00 64 FD | 	ret
1faa4                 | 
1faa4                 | ' 
1faa4                 | ' 
1faa4                 | ' '*************************************************************************
1faa4                 | ' '                                                                        *
1faa4                 | ' '  Conversions                                                           *
1faa4                 | ' '                                                                        *
1faa4                 | ' '*************************************************************************
1faa4                 | ' 
1faa4                 | ' ''---------- Convert a integer to dec string, return a pointer
1faa4                 | ' 
1faa4                 | ' pub inttostr(i):result |q,pos,k,j
1faa4                 | _hg010b_spin2_inttostr
1faa4     03 4A 05 F6 | 	mov	COUNT_, #3
1faa8     A8 00 A0 FD | 	call	#pushregs_
1faac     09 1F 0A F6 | 	mov	local01, arg01 wz
1fab0                 | ' 
1fab0                 | ' j:=i
1fab0                 | ' pos:=10
1fab0     0A 20 06 F6 | 	mov	local02, #10
1fab4                 | ' k:=0
1fab4     00 22 06 F6 | 	mov	local03, #0
1fab8                 | ' 
1fab8                 | ' if (j==0)
1fab8     18 00 90 5D |  if_ne	jmp	#LR__2600
1fabc                 | '   n_string[0]:=48
1fabc     4D E4 05 F1 | 	add	objptr, #77
1fac0     F2 60 48 FC | 	wrbyte	#48, objptr
1fac4                 | '   n_string[1]:=0
1fac4     01 E4 05 F1 | 	add	objptr, #1
1fac8     F2 00 48 FC | 	wrbyte	#0, objptr
1facc     4E E4 85 F1 | 	sub	objptr, #78
1fad0     C4 00 90 FD | 	jmp	#LR__2607
1fad4                 | LR__2600
1fad4                 | ' 
1fad4                 | ' else
1fad4                 | '   if (j<0)
1fad4     0F 1F 52 F6 | 	abs	local01, local01 wc
1fad8                 | '     j:=0-j
1fad8                 | '     k:=45
1fad8     2D 22 06 C6 |  if_b	mov	local03, #45
1fadc                 | ' 
1fadc                 | '   n_string[11]:=0
1fadc     58 E4 05 F1 | 	add	objptr, #88
1fae0     F2 00 48 FC | 	wrbyte	#0, objptr
1fae4     58 E4 85 F1 | 	sub	objptr, #88
1fae8     97 24 48 FB | 	callpa	#(@LR__2602-@LR__2601)>>2,fcache_load_ptr_
1faec                 | '   repeat while (pos>-1)
1faec                 | LR__2601
1faec     00 20 56 F2 | 	cmps	local02, #0 wc
1faf0     40 00 90 CD |  if_b	jmp	#LR__2603
1faf4     0F FB 51 F6 | 	abs	result1, local01 wc
1faf8     0A FA 15 FD | 	qdiv	result1, #10
1fafc                 | '     q:=j//10
1fafc     19 FA 61 FD | 	getqy	result1
1fb00     FD FA 81 F6 | 	negc	result1, result1
1fb04     0F 1F 52 F6 | 	abs	local01, local01 wc
1fb08     0A 1E 16 FD | 	qdiv	local01, #10
1fb0c                 | '     q:=48+q
1fb0c     30 FA 05 F1 | 	add	result1, #48
1fb10                 | '     n_string[pos]:=q
1fb10     10 1F 02 F6 | 	mov	local01, local02
1fb14     4D E4 05 F1 | 	add	objptr, #77
1fb18     F2 1E 02 F1 | 	add	local01, objptr
1fb1c     0F FB 41 FC | 	wrbyte	result1, local01
1fb20                 | '     j:=j/10
1fb20     4D E4 85 F1 | 	sub	objptr, #77
1fb24                 | '     pos-=1
1fb24     01 20 86 F1 | 	sub	local02, #1
1fb28     18 1E 62 FD | 	getqx	local01
1fb2c     0F 1F 82 F6 | 	negc	local01, local01
1fb30     B8 FF 9F FD | 	jmp	#LR__2601
1fb34                 | LR__2602
1fb34                 | LR__2603
1fb34                 | '   repeat while n_string[0]==48
1fb34                 | LR__2604
1fb34     4D E4 05 F1 | 	add	objptr, #77
1fb38     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fb3c     4D E4 85 F1 | 	sub	objptr, #77
1fb40     30 16 0E F2 | 	cmp	arg03, #48 wz
1fb44     20 00 90 5D |  if_ne	jmp	#LR__2605
1fb48                 | '     bytemove(@n_string,@n_string+1,12)
1fb48     4D E4 05 F1 | 	add	objptr, #77
1fb4c     F2 12 02 F6 | 	mov	arg01, objptr
1fb50     F2 14 02 F6 | 	mov	arg02, objptr
1fb54     4D E4 85 F1 | 	sub	objptr, #77
1fb58     01 14 06 F1 | 	add	arg02, #1
1fb5c     0C 16 06 F6 | 	mov	arg03, #12
1fb60     D8 0D B0 FD | 	call	#__system____builtin_memmove
1fb64     CC FF 9F FD | 	jmp	#LR__2604
1fb68                 | LR__2605
1fb68                 | ' 
1fb68                 | '   if k==45
1fb68     2D 22 0E F2 | 	cmp	local03, #45 wz
1fb6c     28 00 90 5D |  if_ne	jmp	#LR__2606
1fb70                 | '      bytemove(@n_string+1,@n_string,12)
1fb70     4D E4 05 F1 | 	add	objptr, #77
1fb74     F2 12 02 F6 | 	mov	arg01, objptr
1fb78     01 12 06 F1 | 	add	arg01, #1
1fb7c     F2 14 02 F6 | 	mov	arg02, objptr
1fb80     4D E4 85 F1 | 	sub	objptr, #77
1fb84     0C 16 06 F6 | 	mov	arg03, #12
1fb88     B0 0D B0 FD | 	call	#__system____builtin_memmove
1fb8c                 | '      n_string[0]:=k
1fb8c     4D E4 05 F1 | 	add	objptr, #77
1fb90     F2 22 42 FC | 	wrbyte	local03, objptr
1fb94     4D E4 85 F1 | 	sub	objptr, #77
1fb98                 | LR__2606
1fb98                 | LR__2607
1fb98                 | ' 
1fb98                 | ' q:=@n_string
1fb98     4D E4 05 F1 | 	add	objptr, #77
1fb9c     F2 FA 01 F6 | 	mov	result1, objptr
1fba0     4D E4 85 F1 | 	sub	objptr, #77
1fba4                 | ' return q
1fba4     A7 F0 03 F6 | 	mov	ptra, fp
1fba8     B2 00 A0 FD | 	call	#popregs_
1fbac                 | _hg010b_spin2_inttostr_ret
1fbac     2D 00 64 FD | 	ret
1fbb0                 | 
1fbb0                 | ' 
1fbb0                 | ' '..............................................................................
1fbb0                 | ' 
1fbb0                 | ' {{
1fbb0                 | ' }}
1fbb0                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
1fbb0                 | _psram_spin2_startx
1fbb0     04 4A 05 F6 | 	mov	COUNT_, #4
1fbb4     A8 00 A0 FD | 	call	#pushregs_
1fbb8     09 1F 02 F6 | 	mov	local01, arg01
1fbbc     0B 21 02 F6 | 	mov	local02, arg03
1fbc0     0C 23 02 F6 | 	mov	local03, arg04
1fbc4                 | '     stop() ' restart driver if required
1fbc4     54 01 B0 FD | 	call	#_psram_spin2_stop
1fbc8     00 1E 0E F2 | 	cmp	local01, #0 wz
1fbcc     14 1E 06 AB |  if_e	rdlong	local01, #20
1fbd0     0F 15 52 F6 | 	abs	arg02, local01 wc
1fbd4     A1 07 00 FF 
1fbd8     40 14 16 FD | 	qdiv	arg02, ##1000000
1fbdc                 | ' 
1fbdc                 | '     ' use current frequency if none specified
1fbdc                 | ' 
1fbdc                 | '     if freq == 0 
1fbdc                 | '         freq := clkfreq 
1fbdc                 | ' 
1fbdc                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
1fbdc                 | ' 
1fbdc                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
1fbdc                 | '     if burst < 0
1fbdc                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
1fbdc     18 14 62 FD | 	getqx	arg02
1fbe0     0A 19 82 F6 | 	negc	arg04, arg02
1fbe4     03 18 66 F0 | 	shl	arg04, #3
1fbe8     84 18 86 F1 | 	sub	arg04, #132
1fbec     04 18 46 F0 | 	shr	arg04, #4
1fbf0     04 18 66 F0 | 	shl	arg04, #4
1fbf4     00 18 56 F2 | 	cmps	arg04, #0 wc
1fbf8     0E FA 65 C6 |  if_b	neg	result1, #14
1fbfc     10 01 90 CD |  if_b	jmp	#LR__2613
1fc00                 | ' 
1fc00                 | '     ' compute the input delay
1fc00                 | ' 
1fc00                 | '     if delay <= 0
1fc00     01 20 56 F2 | 	cmps	local02, #1 wc
1fc04     10 00 90 3D |  if_ae	jmp	#LR__2610
1fc08                 | '         delay := lookupDelay(freq)
1fc08     0F 13 02 F6 | 	mov	arg01, local01
1fc0c     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
1fc10     FD 20 02 F6 | 	mov	local02, result1
1fc14     04 00 90 FD | 	jmp	#LR__2611
1fc18                 | LR__2610
1fc18                 | '     else
1fc18                 | '         delay <#= $f ' limit to 15
1fc18     0F 20 66 F3 | 	fles	local02, #15
1fc1c                 | LR__2611
1fc1c                 | ' 
1fc1c                 | '     ' create our lock
1fc1c                 | ' 
1fc1c                 | '     driverlock := LOCKNEW()  
1fc1c     00 FA 05 F6 | 	mov	result1, #0
1fc20     04 FA 61 FD | 	locknew	result1
1fc24     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1fc28     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
1fc2c                 | '     if driverlock == -1
1fc2c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1fc30     FF FF 7F FF 
1fc34     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1fc38                 | '         return ERR_NO_LOCK
1fc38     1A FA 65 A6 |  if_e	neg	result1, #26
1fc3c     D0 00 90 AD |  if_e	jmp	#LR__2613
1fc40                 | ' 
1fc40                 | '     ' patch in the proper data and HUB addresses to the startup structure
1fc40                 | ' 
1fc40                 | '     long[@startupData][0]:=clkfreq
1fc40     14 1E 06 FB | 	rdlong	local01, #20
1fc44     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
1fc48     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
1fc4c                 | ' '    long[@startupData][1]:=$1000_0000
1fc4c                 | '     long[@startupData][5]:=@deviceData
1fc4c     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1fc50     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1fc54     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
1fc58     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1fc5c     14 14 06 F1 | 	add	arg02, #20
1fc60     0A 1F 62 FC | 	wrlong	local01, arg02
1fc64                 | '     long[@startupData][6]:=@qosData
1fc64     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
1fc68     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1fc6c     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1fc70     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1fc74     18 14 06 F1 | 	add	arg02, #24
1fc78     0A 1F 62 FC | 	wrlong	local01, arg02
1fc7c                 | '     long[@startupData][7]:=$7FF00
1fc7c     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1fc80     1C 1E 06 F1 | 	add	local01, #28
1fc84     FF 03 80 FF 
1fc88     0F 01 6A FC | 	wrlong	##524032, local01
1fc8c                 | ' 
1fc8c                 | '     ' setup some default bank and QoS parameter values
1fc8c                 | ' 
1fc8c                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
1fc8c     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1fc90     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1fc94     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
1fc98     10 18 66 F0 | 	shl	arg04, #16
1fc9c     0C 20 66 F0 | 	shl	local02, #12
1fca0     10 19 42 F5 | 	or	arg04, local02
1fca4     18 18 46 F5 | 	or	arg04, #24
1fca8     0C 15 02 F6 | 	mov	arg02, arg04
1fcac     02 16 06 F6 | 	mov	arg03, #2
1fcb0     A0 00 A0 FD | 	call	#\builtin_longfill_
1fcb4                 | '     longfill(@qosData, $FFFF0000, 8)
1fcb4     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1fcb8     07 16 06 F6 | 	mov	arg03, #7
1fcbc     28 16 62 FD | 	setq	arg03
1fcc0     80 FF FF FF 
1fcc4     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
1fcc8                 | ' 
1fcc8                 | '     ' get the address of the PSRAM memory driver so we can start it
1fcc8                 | ' 
1fcc8                 | '     driverAddr:= driver.getDriverAddr()
1fcc8                 | '     return @driver_start
1fcc8     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
1fccc     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1fcd0     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
1fcd4                 | ' 
1fcd4                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
1fcd4                 | ' 
1fcd4                 | '     if desiredcog < 0
1fcd4     00 22 56 F2 | 	cmps	local03, #0 wc
1fcd8                 | '         desiredcog := NEWCOG
1fcd8     10 22 06 C6 |  if_b	mov	local03, #16
1fcdc                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1fcdc     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1fce0     11 25 02 F6 | 	mov	local04, local03
1fce4     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
1fce8     0A 25 F2 FC | 	coginit	local04, arg02 wc
1fcec     01 24 66 C6 |  if_b	neg	local04, #1
1fcf0     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1fcf4     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
1fcf8                 | '     repeat until long[@startupData] == 0 
1fcf8     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1fcfc                 | LR__2612
1fcfc     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
1fd00     F8 FF 9F 5D |  if_ne	jmp	#LR__2612
1fd04                 | ' 
1fd04                 | '     return drivercog
1fd04     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1fd08     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
1fd0c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fd10                 | LR__2613
1fd10     A7 F0 03 F6 | 	mov	ptra, fp
1fd14     B2 00 A0 FD | 	call	#popregs_
1fd18                 | _psram_spin2_startx_ret
1fd18     2D 00 64 FD | 	ret
1fd1c                 | 
1fd1c                 | ' 
1fd1c                 | ' '..............................................................................
1fd1c                 | ' 
1fd1c                 | ' {{
1fd1c                 | ' }}
1fd1c                 | ' PUB stop() : i
1fd1c                 | _psram_spin2_stop
1fd1c     00 00 06 F6 | 	mov	_var01, #0
1fd20                 | '     if drivercog <> -1
1fd20     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fd24     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1fd28     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fd2c     FF FF 7F FF 
1fd30     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1fd34     70 00 90 AD |  if_e	jmp	#LR__2623
1fd38                 | '         cogstop(drivercog) ' a rather brutal stop
1fd38     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fd3c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1fd40     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fd44     03 12 62 FD | 	cogstop	arg01
1fd48     97 26 48 FB | 	callpa	#(@LR__2622-@LR__2620)>>2,fcache_load_ptr_
1fd4c                 | '         repeat i from 0 to 7
1fd4c                 | LR__2620
1fd4c                 | '             if long[$7FF00][i*3] < 0
1fd4c     00 FB 01 F6 | 	mov	result1, _var01
1fd50     01 FA 65 F0 | 	shl	result1, #1
1fd54     00 FB 01 F1 | 	add	result1, _var01
1fd58     02 FA 65 F0 | 	shl	result1, #2
1fd5c     FF 03 00 FF 
1fd60     00 FB 05 F1 | 	add	result1, ##524032
1fd64     FD FA 01 FB | 	rdlong	result1, result1
1fd68     00 FA 55 F2 | 	cmps	result1, #0 wc
1fd6c     1C 00 90 3D |  if_ae	jmp	#LR__2621
1fd70                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1fd70     00 FB 01 F6 | 	mov	result1, _var01
1fd74     01 FA 65 F0 | 	shl	result1, #1
1fd78     00 FB 01 F1 | 	add	result1, _var01
1fd7c     02 FA 65 F0 | 	shl	result1, #2
1fd80     FF 03 00 FF 
1fd84     00 FB 05 F1 | 	add	result1, ##524032
1fd88     FD 20 68 FC | 	wrlong	#16, result1
1fd8c                 | LR__2621
1fd8c     01 00 06 F1 | 	add	_var01, #1
1fd90     08 00 56 F2 | 	cmps	_var01, #8 wc
1fd94     B4 FF 9F CD |  if_b	jmp	#LR__2620
1fd98                 | LR__2622
1fd98                 | '         drivercog := -1
1fd98     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fd9c     FF FF FF FF 
1fda0     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1fda4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fda8                 | LR__2623
1fda8                 | '     if driverlock <> -1
1fda8     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1fdac     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1fdb0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1fdb4     FF FF 7F FF 
1fdb8     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1fdbc                 | '         LOCKRET(driverlock)
1fdbc     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1fdc0     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
1fdc4     05 12 62 5D |  if_ne	lockret	arg01
1fdc8                 | '         driverlock := -1
1fdc8     FF FF FF 5F 
1fdcc     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1fdd0     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
1fdd4     00 FB 01 F6 | 	mov	result1, _var01
1fdd8                 | _psram_spin2_stop_ret
1fdd8     2D 00 64 FD | 	ret
1fddc                 | 
1fddc                 | ' 
1fddc                 | ' '..............................................................................
1fddc                 | ' 
1fddc                 | ' {{
1fddc                 | ' }}
1fddc                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1fddc                 | _psram_spin2_read1
1fddc                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1fddc                 | '     if drivercog == -1 ' driver must be running
1fddc     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fde0     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1fde4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fde8     FF FF 7F FF 
1fdec     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1fdf0                 | '         return ERR_INACTIVE
1fdf0     0F FA 65 A6 |  if_e	neg	result1, #15
1fdf4     7C 00 90 AD |  if_e	jmp	#LR__2631
1fdf8                 | '     if count == 0 ' don't even bother reading
1fdf8     00 16 0E F2 | 	cmp	arg03, #0 wz
1fdfc                 | '         return 0
1fdfc     00 FA 05 A6 |  if_e	mov	result1, #0
1fe00     70 00 90 AD |  if_e	jmp	#LR__2631
1fe04                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1fe04     00 FA 05 F6 | 	mov	result1, #0
1fe08     01 FA 61 FD | 	cogid	result1
1fe0c     FD 00 02 F6 | 	mov	_var01, result1
1fe10     01 00 66 F0 | 	shl	_var01, #1
1fe14     FD 00 02 F1 | 	add	_var01, result1
1fe18     02 00 66 F0 | 	shl	_var01, #2
1fe1c     FF 03 00 FF 
1fe20     00 03 06 F6 | 	mov	_var02, ##524032
1fe24     00 03 02 F1 | 	add	_var02, _var01
1fe28                 | '     if long[mailbox] < 0
1fe28     01 01 02 FB | 	rdlong	_var01, _var02
1fe2c     00 00 56 F2 | 	cmps	_var01, #0 wc
1fe30                 | '         return ERR_MAILBOX_BUSY
1fe30     1C FA 65 C6 |  if_b	neg	result1, #28
1fe34     3C 00 90 CD |  if_b	jmp	#LR__2631
1fe38                 | '     long[mailbox][2] := count
1fe38     08 02 06 F1 | 	add	_var02, #8
1fe3c     01 17 62 FC | 	wrlong	arg03, _var02
1fe40                 | '     long[mailbox][1] := dstHubAddr
1fe40     04 02 86 F1 | 	sub	_var02, #4
1fe44     01 13 62 FC | 	wrlong	arg01, _var02
1fe48     04 02 86 F1 | 	sub	_var02, #4
1fe4c                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
1fe4c     0A 05 02 F6 | 	mov	_var03, arg02
1fe50     D9 04 06 F4 | 	bitl	_var03, #217
1fe54     00 00 58 FF 
1fe58     00 00 06 F6 | 	mov	_var01, ##-1342177280
1fe5c     02 01 02 F1 | 	add	_var01, _var03
1fe60     01 01 62 FC | 	wrlong	_var01, _var02
1fe64                 | '     repeat
1fe64                 | LR__2630
1fe64                 | '         result := long[mailbox]    
1fe64     01 05 02 FB | 	rdlong	_var03, _var02
1fe68     00 04 56 F2 | 	cmps	_var03, #0 wc
1fe6c     F4 FF 9F CD |  if_b	jmp	#LR__2630
1fe70                 | '     while result < 0   
1fe70                 | '     return -result                       'return success or error
1fe70     02 FB 61 F6 | 	neg	result1, _var03
1fe74                 | LR__2631
1fe74                 | _psram_spin2_read1_ret
1fe74     2D 00 64 FD | 	ret
1fe78                 | 
1fe78                 | ' 
1fe78                 | ' '..............................................................................
1fe78                 | ' 
1fe78                 | ' {{
1fe78                 | ' }}
1fe78                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
1fe78                 | _psram_spin2_write
1fe78                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1fe78                 | '     if drivercog == -1 ' driver must be running
1fe78     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1fe7c     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1fe80     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1fe84     FF FF 7F FF 
1fe88     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1fe8c                 | '         return ERR_INACTIVE
1fe8c     0F FA 65 A6 |  if_e	neg	result1, #15
1fe90     7C 00 90 AD |  if_e	jmp	#LR__2641
1fe94                 | '     if count == 0 ' don't even bother writing
1fe94     00 16 0E F2 | 	cmp	arg03, #0 wz
1fe98                 | '         return 0
1fe98     00 FA 05 A6 |  if_e	mov	result1, #0
1fe9c     70 00 90 AD |  if_e	jmp	#LR__2641
1fea0                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1fea0     00 FA 05 F6 | 	mov	result1, #0
1fea4     01 FA 61 FD | 	cogid	result1
1fea8     FD 00 02 F6 | 	mov	_var01, result1
1feac     01 00 66 F0 | 	shl	_var01, #1
1feb0     FD 00 02 F1 | 	add	_var01, result1
1feb4     02 00 66 F0 | 	shl	_var01, #2
1feb8     FF 03 00 FF 
1febc     00 03 06 F6 | 	mov	_var02, ##524032
1fec0     00 03 02 F1 | 	add	_var02, _var01
1fec4                 | '     if long[mailbox] < 0
1fec4     01 01 02 FB | 	rdlong	_var01, _var02
1fec8     00 00 56 F2 | 	cmps	_var01, #0 wc
1fecc                 | '         return ERR_MAILBOX_BUSY
1fecc     1C FA 65 C6 |  if_b	neg	result1, #28
1fed0     3C 00 90 CD |  if_b	jmp	#LR__2641
1fed4                 | '     long[mailbox][2] := count
1fed4     08 02 06 F1 | 	add	_var02, #8
1fed8     01 17 62 FC | 	wrlong	arg03, _var02
1fedc                 | '     long[mailbox][1] := srcHubAddr
1fedc     04 02 86 F1 | 	sub	_var02, #4
1fee0     01 13 62 FC | 	wrlong	arg01, _var02
1fee4     04 02 86 F1 | 	sub	_var02, #4
1fee8                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
1fee8     0A 05 02 F6 | 	mov	_var03, arg02
1feec     D9 04 06 F4 | 	bitl	_var03, #217
1fef0     00 00 78 FF 
1fef4     00 00 06 F6 | 	mov	_var01, ##-268435456
1fef8     02 01 02 F1 | 	add	_var01, _var03
1fefc     01 01 62 FC | 	wrlong	_var01, _var02
1ff00                 | '     repeat
1ff00                 | LR__2640
1ff00                 | '         result := long[mailbox]    
1ff00     01 05 02 FB | 	rdlong	_var03, _var02
1ff04     00 04 56 F2 | 	cmps	_var03, #0 wc
1ff08     F4 FF 9F CD |  if_b	jmp	#LR__2640
1ff0c                 | '     while result < 0   
1ff0c                 | '     return -result                       'return success or error
1ff0c     02 FB 61 F6 | 	neg	result1, _var03
1ff10                 | LR__2641
1ff10                 | _psram_spin2_write_ret
1ff10     2D 00 64 FD | 	ret
1ff14                 | 
1ff14                 | ' 
1ff14                 | ' ' generalized fill
1ff14                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
1ff14                 | _psram_spin2_fill
1ff14     09 01 02 F6 | 	mov	_var01, arg01
1ff18     0A 03 02 F6 | 	mov	_var02, arg02
1ff1c     0B 05 02 F6 | 	mov	_var03, arg03
1ff20     0D 07 02 F6 | 	mov	_var04, arg05
1ff24                 | '     case datasize 
1ff24     01 06 86 F1 | 	sub	_var04, #1
1ff28     04 06 26 F3 | 	fle	_var04, #4
1ff2c     30 06 62 FD | 	jmprel	_var04
1ff30                 | LR__2650
1ff30     10 00 90 FD | 	jmp	#LR__2651
1ff34     18 00 90 FD | 	jmp	#LR__2652
1ff38     2C 00 90 FD | 	jmp	#LR__2654
1ff3c     1C 00 90 FD | 	jmp	#LR__2653
1ff40     24 00 90 FD | 	jmp	#LR__2654
1ff44                 | LR__2651
1ff44                 | '         1: req := driver.R_WRITEBYTE
1ff44     00 00 60 FF 
1ff48     00 08 06 F6 | 	mov	_var05, ##-1073741824
1ff4c     20 00 90 FD | 	jmp	#LR__2655
1ff50                 | LR__2652
1ff50                 | '         2: req := driver.R_WRITEWORD
1ff50     00 00 68 FF 
1ff54     00 08 06 F6 | 	mov	_var05, ##-805306368
1ff58     14 00 90 FD | 	jmp	#LR__2655
1ff5c                 | LR__2653
1ff5c                 | '         4: req := driver.R_WRITELONG
1ff5c     00 00 70 FF 
1ff60     00 08 06 F6 | 	mov	_var05, ##-536870912
1ff64     08 00 90 FD | 	jmp	#LR__2655
1ff68                 | LR__2654
1ff68                 | '         other : return ERR_INVALID
1ff68     06 FA 65 F6 | 	neg	result1, #6
1ff6c     94 00 90 FD | 	jmp	#LR__2657
1ff70                 | LR__2655
1ff70                 | '     if count == 0   ' nothing to do
1ff70     00 04 0E F2 | 	cmp	_var03, #0 wz
1ff74                 | '         return 0
1ff74     00 FA 05 A6 |  if_e	mov	result1, #0
1ff78     88 00 90 AD |  if_e	jmp	#LR__2657
1ff7c                 | '     if drivercog == -1
1ff7c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1ff80     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
1ff84     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1ff88     FF FF 7F FF 
1ff8c     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
1ff90                 | '         return ERR_INACTIVE
1ff90     0F FA 65 A6 |  if_e	neg	result1, #15
1ff94     6C 00 90 AD |  if_e	jmp	#LR__2657
1ff98                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
1ff98     00 FA 05 F6 | 	mov	result1, #0
1ff9c     01 FA 61 FD | 	cogid	result1
1ffa0     FD 06 02 F6 | 	mov	_var04, result1
1ffa4     01 06 66 F0 | 	shl	_var04, #1
1ffa8     FD 06 02 F1 | 	add	_var04, result1
1ffac     02 06 66 F0 | 	shl	_var04, #2
1ffb0     FF 03 00 FF 
1ffb4     00 0B 06 F6 | 	mov	_var06, ##524032
1ffb8     03 0B 02 F1 | 	add	_var06, _var04
1ffbc                 | '     if long[mailbox] < 0
1ffbc     05 07 02 FB | 	rdlong	_var04, _var06
1ffc0     00 06 56 F2 | 	cmps	_var04, #0 wc
1ffc4                 | '         return ERR_MAILBOX_BUSY
1ffc4     1C FA 65 C6 |  if_b	neg	result1, #28
1ffc8     38 00 90 CD |  if_b	jmp	#LR__2657
1ffcc                 | '     long[mailbox][2] := count
1ffcc     08 0A 06 F1 | 	add	_var06, #8
1ffd0     05 05 62 FC | 	wrlong	_var03, _var06
1ffd4                 | '     long[mailbox][1] := pattern
1ffd4     04 0A 86 F1 | 	sub	_var06, #4
1ffd8     05 03 62 FC | 	wrlong	_var02, _var06
1ffdc     04 0A 86 F1 | 	sub	_var06, #4
1ffe0                 | '     long[mailbox] := req + (addr & $1ffffff)
1ffe0     04 0D 02 F6 | 	mov	_var07, _var05
1ffe4     00 0F 02 F6 | 	mov	_var08, _var01
1ffe8     D9 0E 06 F4 | 	bitl	_var08, #217
1ffec     07 0D 02 F1 | 	add	_var07, _var08
1fff0     05 0D 62 FC | 	wrlong	_var07, _var06
1fff4                 | '     repeat
1fff4                 | LR__2656
1fff4                 | '         r := long[mailbox]
1fff4     05 0F 02 FB | 	rdlong	_var08, _var06
1fff8     00 0E 56 F2 | 	cmps	_var08, #0 wc
1fffc     F4 FF 9F CD |  if_b	jmp	#LR__2656
20000                 | '     while r < 0
20000                 | '     return -r                  ' return 0 for success or negated error code
20000     07 FB 61 F6 | 	neg	result1, _var08
20004                 | LR__2657
20004                 | _psram_spin2_fill_ret
20004     2D 00 64 FD | 	ret
20008                 | 
20008                 | ' 
20008                 | ' '..............................................................................
20008                 | ' 
20008                 | ' {{
20008                 | ' }}
20008                 | ' PUB setQos(cog, qos) : result | mailbox
20008                 | _psram_spin2_setQos
20008     09 01 02 F6 | 	mov	_var01, arg01
2000c                 | '     if drivercog == -1 ' driver must be running
2000c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
20010     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
20014     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20018     FF FF 7F FF 
2001c     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
20020                 | '         return ERR_INACTIVE
20020     0F FA 65 A6 |  if_e	neg	result1, #15
20024     9C 00 90 AD |  if_e	jmp	#LR__2664
20028                 | '     if cog < 0 or cog > 7 ' enforce cog id range
20028     00 00 56 F2 | 	cmps	_var01, #0 wc
2002c     08 00 90 CD |  if_b	jmp	#LR__2660
20030     08 00 56 F2 | 	cmps	_var01, #8 wc
20034     08 00 90 CD |  if_b	jmp	#LR__2661
20038                 | LR__2660
20038                 | '         return ERR_INVALID
20038     06 FA 65 F6 | 	neg	result1, #6
2003c     84 00 90 FD | 	jmp	#LR__2664
20040                 | LR__2661
20040                 | '     long[@qosData][cog] := qos & !$1ff
20040     FF 15 26 F5 | 	andn	arg02, #511
20044     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
20048     02 00 66 F0 | 	shl	_var01, #2
2004c     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
20050     00 15 62 FC | 	wrlong	arg02, _var01
20054                 | '     mailbox := $7FF00 + drivercog*12
20054     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
20058     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
2005c     02 07 02 F6 | 	mov	_var04, _var03
20060     01 06 66 F0 | 	shl	_var04, #1
20064     02 07 02 F1 | 	add	_var04, _var03
20068     02 06 66 F0 | 	shl	_var04, #2
2006c     FF 03 00 FF 
20070     00 09 06 F6 | 	mov	_var05, ##524032
20074     03 09 02 F1 | 	add	_var05, _var04
20078                 | '     repeat until LOCKTRY(driverlock)
20078     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
2007c                 | LR__2662
2007c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
20080     06 12 72 FD | 	locktry	arg01 wc
20084     F4 FF 9F 3D |  if_ae	jmp	#LR__2662
20088     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
2008c                 | '     long[mailbox] := driver.R_CONFIG + cogid()
2008c     00 06 06 F6 | 	mov	_var04, #0
20090     01 06 62 FD | 	cogid	_var04
20094     00 00 78 FF 
20098     00 02 06 F6 | 	mov	_var02, ##-268435456
2009c     03 03 02 F1 | 	add	_var02, _var04
200a0     04 03 62 FC | 	wrlong	_var02, _var05
200a4                 | '     repeat while long[mailbox] < 0
200a4                 | LR__2663
200a4     04 03 02 FB | 	rdlong	_var02, _var05
200a8     00 02 56 F2 | 	cmps	_var02, #0 wc
200ac     F4 FF 9F CD |  if_b	jmp	#LR__2663
200b0                 | '     LOCKREL(driverlock)
200b0     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
200b4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
200b8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
200bc     07 12 72 FD | 	lockrel	arg01 wc
200c0     00 FA 05 F6 | 	mov	result1, #0
200c4                 | LR__2664
200c4                 | _psram_spin2_setQos_ret
200c4     2D 00 64 FD | 	ret
200c8                 | 
200c8                 | ' 
200c8                 | ' '..............................................................................
200c8                 | ' 
200c8                 | ' {{
200c8                 | ' }}
200c8                 | ' PRI lookupDelay(freq) : delay | profile
200c8                 | _psram_spin2_lookupDelay
200c8                 | '     profile := @delayTable
200c8     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
200cc     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
200d0                 | '     delay := long[profile][0]
200d0     00 03 02 FB | 	rdlong	_var02, _var01
200d4                 | '     repeat while long[profile][1] 
200d4     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
200d8     97 16 48 FB | 	callpa	#(@LR__2671-@LR__2670)>>2,fcache_load_ptr_
200dc                 | LR__2670
200dc     04 00 06 F1 | 	add	_var01, #4
200e0     00 FB 09 FB | 	rdlong	result1, _var01 wz
200e4     04 00 86 F1 | 	sub	_var01, #4
200e8     1C 00 90 AD |  if_e	jmp	#LR__2672
200ec                 | '         if freq +< long[profile][1] 
200ec     04 00 06 F1 | 	add	_var01, #4
200f0     00 FB 01 FB | 	rdlong	result1, _var01
200f4     04 00 86 F1 | 	sub	_var01, #4
200f8     FD 12 12 F2 | 	cmp	arg01, result1 wc
200fc                 | '             quit
200fc                 | '         profile += 4
200fc     04 00 06 31 |  if_ae	add	_var01, #4
20100                 | '         delay++
20100     01 02 06 31 |  if_ae	add	_var02, #1
20104     D4 FF 9F 3D |  if_ae	jmp	#LR__2670
20108                 | LR__2671
20108                 | LR__2672
20108     01 FB 01 F6 | 	mov	result1, _var02
2010c                 | _psram_spin2_lookupDelay_ret
2010c     2D 00 64 FD | 	ret
20110                 | 
20110                 | ' 
20110                 | ' PUB start() : r
20110                 | _usbnew_spin2_start
20110     00 00 06 F6 | 	mov	_var01, #0
20114                 | '   ifnot driver_cog
20114     15 00 00 FF 
20118     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
2011c     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
20120     15 00 00 FF 
20124     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
20128     38 00 90 5D |  if_ne	jmp	#LR__2680
2012c                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
2012c     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
20130     10 00 06 F6 | 	mov	_var01, #16
20134     00 16 06 F6 | 	mov	arg03, #0
20138     28 16 62 FD | 	setq	arg03
2013c     0A 01 F2 FC | 	coginit	_var01, arg02 wc
20140     01 00 66 C6 |  if_b	neg	_var01, #1
20144                 | '     if r >= 0
20144     00 00 56 F2 | 	cmps	_var01, #0 wc
20148                 | '       driver_cog := r+1
20148     00 03 02 36 |  if_ae	mov	_var02, _var01
2014c     01 02 06 31 |  if_ae	add	_var02, #1
20150     15 00 00 3F 
20154     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
20158     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
2015c     15 00 00 3F 
20160     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
20164                 | LR__2680
20164     00 FB 01 F6 | 	mov	result1, _var01
20168                 | _usbnew_spin2_start_ret
20168     2D 00 64 FD | 	ret
2016c                 | 
2016c                 | '     '' (Always enabled)
2016c                 | ' 
2016c                 | ' '' Get current pressed state of a keyboard key
2016c                 | ' PUB keystate(key) : r | buf[2],tmp
2016c                 | _usbnew_spin2_keystate
2016c     00 04 06 F6 | 	mov	_var03, #0
20170                 | '   if key >= $E0 && key < $E8
20170     E0 12 56 F2 | 	cmps	arg01, #224 wc
20174     34 00 90 CD |  if_b	jmp	#LR__2690
20178     E8 12 56 F2 | 	cmps	arg01, #232 wc
2017c     2C 00 90 3D |  if_ae	jmp	#LR__2690
20180                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
20180     00 FA 05 F6 | 	mov	result1, #0
20184     13 00 00 FF 
20188     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
2018c     09 07 02 F6 | 	mov	_var04, arg01
20190     E0 06 86 F1 | 	sub	_var04, #224
20194     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
20198     03 09 4A F0 | 	shr	_var05, _var04 wz
2019c     13 00 00 FF 
201a0     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
201a4     01 FA 65 56 |  if_ne	neg	result1, #1
201a8     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
201ac                 | LR__2690
201ac                 | '   else
201ac                 | '     '' Do this in inline ASM to ensure atomicity
201ac                 | '     tmp := @hkbd_report
201ac     13 00 00 FF 
201b0     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
201b4     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
201b8                 | '     org
201b8     13 00 00 FF 
201bc     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
201c0     97 1E 48 FB | 	callpa	#(@LR__2692-@LR__2691)>>2,fcache_load_ptr_
201c4                 | LR__2691
201c4 000             | 	org	0
201c4 000 28 02 64 FD | 	setq	#1
201c8 001 04 01 02 FB | 	rdlong	_var01, _var05
201cc 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
201d0 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
201d4 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
201d8 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
201dc 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
201e0 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
201e4 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
201e8 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
201ec 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
201f0 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
201f4 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
201f8 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
201fc 00e 01 04 66 A6 |  if_e	neg	_var03, #1
20200 00f             | LR__2692
20200                 | 	orgh
20200     02 FB 01 F6 | 	mov	result1, _var03
20204                 | _usbnew_spin2_keystate_ret
20204     2D 00 64 FD | 	ret
20208                 | 
20208                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
20208                 | ' 
20208                 | ' '' Return key event from buffer if there is one
20208                 | ' PUB get_key() : r | tail
20208                 | _usbnew_spin2_get_key
20208                 | '   tail := keyq_tail
20208     0F 00 00 FF 
2020c     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
20210     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
20214                 | '   if keyq_head == tail
20214     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
20218     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
2021c     0F 00 00 FF 
20220     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
20224     00 03 0A F2 | 	cmp	_var02, _var01 wz
20228                 | '     return 0 ' No event
20228     00 FA 05 A6 |  if_e	mov	result1, #0
2022c     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
20230                 | '   r := keyq_data[tail]
20230     00 03 02 F6 | 	mov	_var02, _var01
20234     02 02 66 F0 | 	shl	_var02, #2
20238     0F 00 00 FF 
2023c     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
20240     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
20244     01 FB 01 FB | 	rdlong	result1, _var02
20248                 | '   if ++tail == KEYQUEUE_SIZE
20248     01 00 06 F1 | 	add	_var01, #1
2024c     80 00 0E F2 | 	cmp	_var01, #128 wz
20250                 | '     tail := 0
20250     00 00 06 A6 |  if_e	mov	_var01, #0
20254                 | '   keyq_tail := tail
20254     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
20258     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
2025c     0F 00 00 FF 
20260     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
20264                 | _usbnew_spin2_get_key_ret
20264     2D 00 64 FD | 	ret
20268                 | 
20268                 | ' 
20268                 | ' '' Emulate mouse movement
20268                 | ' PUB mouse_move(x,y)
20268                 | _usbnew_spin2_mouse_move
20268     02 4A 05 F6 | 	mov	COUNT_, #2
2026c     A8 00 A0 FD | 	call	#pushregs_
20270     09 1F 02 F6 | 	mov	local01, arg01
20274     0A 21 02 F6 | 	mov	local02, arg02
20278                 | '   mouse_lock := 1
20278     14 00 00 FF 
2027c     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
20280     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
20284     14 00 00 FF 
20288     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
2028c                 | '   waitus(2) ' hope driver is now done
2028c     02 12 06 F6 | 	mov	arg01, #2
20290     E8 0A B0 FD | 	call	#__system___waitus
20294                 | '   mouse_xacc := x
20294     14 00 00 FF 
20298     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
2029c     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
202a0                 | '   mouse_yacc := y
202a0     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
202a4     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
202a8                 | '   if mouse_outptr
202a8     04 00 00 FF 
202ac     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
202b0     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
202b4     0F 00 00 FF 
202b8     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
202bc     24 00 90 AD |  if_e	jmp	#LR__2700
202c0                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
202c0     10 20 66 F0 | 	shl	local02, #16
202c4     0F 1F 32 F9 | 	getword	local01, local01, #0
202c8     0F 21 42 F5 | 	or	local02, local01
202cc     0F 00 00 FF 
202d0     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
202d4     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
202d8     0F 00 00 FF 
202dc     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
202e0     0F 21 62 FC | 	wrlong	local02, local01
202e4                 | LR__2700
202e4                 | '   mouse_lock := 0
202e4     14 00 00 FF 
202e8     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
202ec     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
202f0     14 00 00 FF 
202f4     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
202f8     A7 F0 03 F6 | 	mov	ptra, fp
202fc     B2 00 A0 FD | 	call	#popregs_
20300                 | _usbnew_spin2_mouse_move_ret
20300     2D 00 64 FD | 	ret
20304                 | 
20304                 | '     '' Set HAVE_HIDPAD to enable.
20304                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
20304                 | ' 
20304                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
20304                 | ' PUB hidpad_id(dev) : r
20304                 | _usbnew_spin2_hidpad_id
20304                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
20304     13 00 00 FF 
20308     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
2030c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
20310     09 01 02 F6 | 	mov	_var01, arg01
20314     03 00 66 F0 | 	shl	_var01, #3
20318     09 01 82 F1 | 	sub	_var01, arg01
2031c     02 00 66 F0 | 	shl	_var01, #2
20320     00 FB 01 F1 | 	add	result1, _var01
20324     FD FA 01 FB | 	rdlong	result1, result1
20328     13 00 00 FF 
2032c     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
20330                 | _usbnew_spin2_hidpad_id_ret
20330     2D 00 64 FD | 	ret
20334                 | 
20334                 | ' 
20334                 | ' '' Get all button states for a device
20334                 | ' PUB hidpad_buttons(dev) : r 
20334                 | _usbnew_spin2_hidpad_buttons
20334                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
20334     13 00 00 FF 
20338     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
2033c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
20340     09 01 02 F6 | 	mov	_var01, arg01
20344     03 00 66 F0 | 	shl	_var01, #3
20348     09 01 82 F1 | 	sub	_var01, arg01
2034c     02 00 66 F0 | 	shl	_var01, #2
20350     00 FB 01 F1 | 	add	result1, _var01
20354     14 FA 05 F1 | 	add	result1, #20
20358     FD FA 01 FB | 	rdlong	result1, result1
2035c     13 00 00 FF 
20360     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
20364                 | _usbnew_spin2_hidpad_buttons_ret
20364     2D 00 64 FD | 	ret
20368                 | 
20368                 | ' 
20368                 | ' '' Get state of an axis (normalized between -32768 and 32767)
20368                 | ' PUB hidpad_axis(dev,axnum) : r
20368                 | _usbnew_spin2_hidpad_axis
20368                 | '   if axnum +>= 6
20368     06 14 16 F2 | 	cmp	arg02, #6 wc
2036c                 | '     return 0
2036c     00 FA 05 36 |  if_ae	mov	result1, #0
20370     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
20374                 | '   else 
20374                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
20374     13 00 00 FF 
20378     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
2037c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
20380     09 01 02 F6 | 	mov	_var01, arg01
20384     03 00 66 F0 | 	shl	_var01, #3
20388     09 01 82 F1 | 	sub	_var01, arg01
2038c     02 00 66 F0 | 	shl	_var01, #2
20390     00 FB 01 F1 | 	add	result1, _var01
20394     04 00 06 F6 | 	mov	_var01, #4
20398     0A 01 02 F1 | 	add	_var01, arg02
2039c     01 00 66 F0 | 	shl	_var01, #1
203a0     FD 00 02 F1 | 	add	_var01, result1
203a4     00 FB E1 FA | 	rdword	result1, _var01
203a8     0F FA 65 F7 | 	signx	result1, #15
203ac     13 00 00 FF 
203b0     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
203b4                 | _usbnew_spin2_hidpad_axis_ret
203b4     2D 00 64 FD | 	ret
203b8                 | 
203b8                 | ' 
203b8                 | ' 
203b8                 | ' '--------------------------------------------------------------
203b8                 | ' '---------- Init the variables, start the cog. ----------------
203b8                 | ' '--------------------------------------------------------------
203b8                 | ' 
203b8                 | ' pub start(mbox,scope,cache) :cog,base | iii
203b8                 | _audio096_spin2_start
203b8     04 4A 05 F6 | 	mov	COUNT_, #4
203bc     A8 00 A0 FD | 	call	#pushregs_
203c0     09 1F 02 F6 | 	mov	local01, arg01
203c4                 | ' 
203c4                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
203c4                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
203c4                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
203c4                 | ' 
203c4                 | ' mailboxaddr:=mbox 
203c4     F2 1E 62 FC | 	wrlong	local01, objptr
203c8                 | ' scope_ptr:=scope
203c8     04 E4 05 F1 | 	add	objptr, #4
203cc     F2 14 62 FC | 	wrlong	arg02, objptr
203d0                 | ' cache_ptr:=cache
203d0     04 E4 05 F1 | 	add	objptr, #4
203d4     F2 16 62 FC | 	wrlong	arg03, objptr
203d8                 | ' base:=@channel1[0]
203d8     04 E4 05 F1 | 	add	objptr, #4
203dc     F2 20 02 F6 | 	mov	local02, objptr
203e0                 | ' long[$40]:=mbox
203e0     40 1E 66 FC | 	wrlong	local01, #64
203e4                 | ' repeat iii from 0 to 7
203e4     00 22 06 F6 | 	mov	local03, #0
203e8     02 00 00 FF 
203ec     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
203f0     0C E4 85 F1 | 	sub	objptr, #12
203f4     97 BC 48 FB | 	callpa	#(@LR__2711-@LR__2710)>>2,fcache_load_ptr_
203f8                 | LR__2710
203f8                 | '   long[base+64*iii]:=0
203f8     10 1F 02 F6 | 	mov	local01, local02
203fc     11 FD 01 F6 | 	mov	result2, local03
20400     06 FC 65 F0 | 	shl	result2, #6
20404     FE 1E 02 F1 | 	add	local01, result2
20408     0F 01 68 FC | 	wrlong	#0, local01
2040c                 | '   long[base+64*iii+4]:=0
2040c     10 1F 02 F6 | 	mov	local01, local02
20410     11 FD 01 F6 | 	mov	result2, local03
20414     06 FC 65 F0 | 	shl	result2, #6
20418     FE 1E 02 F1 | 	add	local01, result2
2041c     04 1E 06 F1 | 	add	local01, #4
20420     0F 01 68 FC | 	wrlong	#0, local01
20424                 | '   long[base+64*iii+12]:=0
20424     10 25 02 F6 | 	mov	local04, local02
20428     11 1F 02 F6 | 	mov	local01, local03
2042c     06 1E 66 F0 | 	shl	local01, #6
20430     0F 25 02 F1 | 	add	local04, local01
20434     0C 24 06 F1 | 	add	local04, #12
20438     12 01 68 FC | 	wrlong	#0, local04
2043c                 | '   long[base+64*iii+16]:=2 
2043c     10 25 02 F6 | 	mov	local04, local02
20440     11 1F 02 F6 | 	mov	local01, local03
20444     06 1E 66 F0 | 	shl	local01, #6
20448     0F 25 02 F1 | 	add	local04, local01
2044c     10 24 06 F1 | 	add	local04, #16
20450     12 05 68 FC | 	wrlong	#2, local04
20454                 | '   word[base+64*iii+20]:=0
20454     10 25 02 F6 | 	mov	local04, local02
20458     11 1F 02 F6 | 	mov	local01, local03
2045c     06 1E 66 F0 | 	shl	local01, #6
20460     0F 25 02 F1 | 	add	local04, local01
20464     14 24 06 F1 | 	add	local04, #20
20468     12 01 58 FC | 	wrword	#0, local04
2046c                 | '   word[base+64*iii+22]:=8192
2046c     10 25 02 F6 | 	mov	local04, local02
20470     11 1F 02 F6 | 	mov	local01, local03
20474     06 1E 66 F0 | 	shl	local01, #6
20478     0F 25 02 F1 | 	add	local04, local01
2047c     16 24 06 F1 | 	add	local04, #22
20480     10 00 80 FF 
20484     12 01 58 FC | 	wrword	##8192, local04
20488                 | '   word[base+64*iii+24]:=4000+2*iii
20488     11 25 02 F6 | 	mov	local04, local03
2048c     01 24 66 F0 | 	shl	local04, #1
20490     07 00 00 FF 
20494     A0 1F 06 F6 | 	mov	local01, ##4000
20498     12 1F 02 F1 | 	add	local01, local04
2049c     10 25 02 F6 | 	mov	local04, local02
204a0     11 FD 01 F6 | 	mov	result2, local03
204a4     06 FC 65 F0 | 	shl	result2, #6
204a8     FE 24 02 F1 | 	add	local04, result2
204ac     18 24 06 F1 | 	add	local04, #24
204b0     12 1F 52 FC | 	wrword	local01, local04
204b4                 | '   word[base+64*iii+26]:=2
204b4     10 25 02 F6 | 	mov	local04, local02
204b8     11 1F 02 F6 | 	mov	local01, local03
204bc     06 1E 66 F0 | 	shl	local01, #6
204c0     0F 25 02 F1 | 	add	local04, local01
204c4     1A 24 06 F1 | 	add	local04, #26
204c8     12 05 58 FC | 	wrword	#2, local04
204cc                 | '   long [base+64*iii+8]:=@null | $C0000000
204cc     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
204d0     3E 1E 26 F4 | 	bith	local01, #62
204d4     10 25 02 F6 | 	mov	local04, local02
204d8     11 17 02 F6 | 	mov	arg03, local03
204dc     06 16 66 F0 | 	shl	arg03, #6
204e0     0B 25 02 F1 | 	add	local04, arg03
204e4     08 24 06 F1 | 	add	local04, #8
204e8     12 1F 62 FC | 	wrlong	local01, local04
204ec                 | '   long[base+64*iii+32]:=0
204ec     10 25 02 F6 | 	mov	local04, local02
204f0     11 1F 02 F6 | 	mov	local01, local03
204f4     06 1E 66 F0 | 	shl	local01, #6
204f8     0F 25 02 F1 | 	add	local04, local01
204fc     20 24 06 F1 | 	add	local04, #32
20500     12 01 68 FC | 	wrlong	#0, local04
20504                 | '   long[base+64*iii+36]:=0
20504     10 25 02 F6 | 	mov	local04, local02
20508     11 1F 02 F6 | 	mov	local01, local03
2050c     06 1E 66 F0 | 	shl	local01, #6
20510     0F 25 02 F1 | 	add	local04, local01
20514     24 24 06 F1 | 	add	local04, #36
20518     12 01 68 FC | 	wrlong	#0, local04
2051c                 | '   long[base+64*iii+40]:=0
2051c     10 25 02 F6 | 	mov	local04, local02
20520     11 1F 02 F6 | 	mov	local01, local03
20524     06 1E 66 F0 | 	shl	local01, #6
20528     0F 25 02 F1 | 	add	local04, local01
2052c     28 24 06 F1 | 	add	local04, #40
20530     12 01 68 FC | 	wrlong	#0, local04
20534                 | '   long[base+64*iii+44]:=0
20534     10 25 02 F6 | 	mov	local04, local02
20538     11 1F 02 F6 | 	mov	local01, local03
2053c     06 1E 66 F0 | 	shl	local01, #6
20540     0F 25 02 F1 | 	add	local04, local01
20544     2C 24 06 F1 | 	add	local04, #44
20548     12 01 68 FC | 	wrlong	#0, local04
2054c                 | '   long[base+64*iii+28]:=0
2054c     10 25 02 F6 | 	mov	local04, local02
20550     11 1F 02 F6 | 	mov	local01, local03
20554     06 1E 66 F0 | 	shl	local01, #6
20558     0F 25 02 F1 | 	add	local04, local01
2055c     1C 24 06 F1 | 	add	local04, #28
20560     12 01 68 FC | 	wrlong	#0, local04
20564     01 22 06 F1 | 	add	local03, #1
20568     08 22 56 F2 | 	cmps	local03, #8 wc
2056c     88 FE 9F CD |  if_b	jmp	#LR__2710
20570                 | LR__2711
20570     02 00 00 FF 
20574     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
20578                 | '   
20578                 | ' cog:=coginit(16,@audio,@mailboxaddr)
20578     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
2057c     F2 16 02 F6 | 	mov	arg03, objptr
20580     10 24 06 F6 | 	mov	local04, #16
20584     28 16 62 FD | 	setq	arg03
20588     0A 25 F2 FC | 	coginit	local04, arg02 wc
2058c     01 24 66 C6 |  if_b	neg	local04, #1
20590                 | ' waitms(100)
20590     64 12 06 F6 | 	mov	arg01, #100
20594     78 07 B0 FD | 	call	#__system___waitms
20598                 | ' return cog,base
20598     10 FD 01 F6 | 	mov	result2, local02
2059c     12 FB 01 F6 | 	mov	result1, local04
205a0     A7 F0 03 F6 | 	mov	ptra, fp
205a4     B2 00 A0 FD | 	call	#popregs_
205a8                 | _audio096_spin2_start_ret
205a8     2D 00 64 FD | 	ret
205ac                 | 
205ac                 | ' 
205ac                 | ' ' a simple play procedure to not poke everything. 
205ac                 | ' 
205ac                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
205ac                 | _audio096_spin2_play
205ac     0C E4 05 F1 | 	add	objptr, #12
205b0     F2 00 02 F6 | 	mov	_var01, objptr
205b4     06 12 66 F0 | 	shl	arg01, #6
205b8     09 01 02 F1 | 	add	_var01, arg01
205bc     00 13 02 F6 | 	mov	arg01, _var01
205c0     0C 12 06 F1 | 	add	arg01, #12
205c4     09 1B 62 FC | 	wrlong	arg05, arg01
205c8     00 1C 56 F2 | 	cmps	arg06, #0 wc
205cc     00 13 02 36 |  if_ae	mov	arg01, _var01
205d0     10 12 06 31 |  if_ae	add	arg01, #16
205d4     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
205d8     02 1A 06 C1 |  if_b	add	arg05, #2
205dc     00 13 02 C6 |  if_b	mov	arg01, _var01
205e0     10 12 06 C1 |  if_b	add	arg01, #16
205e4     09 1B 62 CC |  if_b	wrlong	arg05, arg01
205e8     0B 13 52 F6 | 	abs	arg01, arg03 wc
205ec     0F 1B 80 FF 
205f0     09 1F 1A FD | 	qdiv	##3546895, arg01
205f4                 | ' 
205f4                 | ' base2:=@channel1[0]+64*channel
205f4                 | ' 
205f4                 | ' 
205f4                 | ' long[base2+12]:= len
205f4                 | ' if loop >=0 
205f4                 | '   long[base2+16]:= loop
205f4     0C E4 85 F1 | 	sub	objptr, #12
205f8                 | ' else
205f8                 | '   long[base2+16]:= len+2
205f8                 | ' word[base2+20]:=vol
205f8     00 13 02 F6 | 	mov	arg01, _var01
205fc     14 12 06 F1 | 	add	arg01, #20
20600     09 19 52 FC | 	wrword	arg04, arg01
20604                 | ' word[base2+24]:= 3546895/splfreq 
20604     00 19 02 F6 | 	mov	arg04, _var01
20608     18 18 06 F1 | 	add	arg04, #24
2060c                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
2060c                 | ' long[base2+28]:=$40000000    
2060c                 | ' long[base2+32]:=0    
2060c                 | ' long[base2+36]:=0    
2060c                 | ' long[base2+40]:=0    
2060c                 | ' long[base2+44]:=0    
2060c                 | ' long[base2+8]:=sample+$C0000000     
2060c     00 00 60 FF 
20610     00 14 06 F1 | 	add	arg02, ##-1073741824
20614     18 12 62 FD | 	getqx	arg01
20618     09 13 82 F6 | 	negc	arg01, arg01
2061c     0C 13 52 FC | 	wrword	arg01, arg04
20620     00 13 02 F6 | 	mov	arg01, _var01
20624     1A 12 06 F1 | 	add	arg01, #26
20628     09 01 5A FC | 	wrword	#256, arg01
2062c     00 13 02 F6 | 	mov	arg01, _var01
20630     1C 12 06 F1 | 	add	arg01, #28
20634     00 00 A0 FF 
20638     09 01 68 FC | 	wrlong	##1073741824, arg01
2063c     00 13 02 F6 | 	mov	arg01, _var01
20640     20 12 06 F1 | 	add	arg01, #32
20644     09 01 68 FC | 	wrlong	#0, arg01
20648     00 13 02 F6 | 	mov	arg01, _var01
2064c     24 12 06 F1 | 	add	arg01, #36
20650     09 01 68 FC | 	wrlong	#0, arg01
20654     00 13 02 F6 | 	mov	arg01, _var01
20658     28 12 06 F1 | 	add	arg01, #40
2065c     09 01 68 FC | 	wrlong	#0, arg01
20660     00 13 02 F6 | 	mov	arg01, _var01
20664     2C 12 06 F1 | 	add	arg01, #44
20668     09 01 68 FC | 	wrlong	#0, arg01
2066c     08 00 06 F1 | 	add	_var01, #8
20670     00 15 62 FC | 	wrlong	arg02, _var01
20674                 | _audio096_spin2_play_ret
20674     2D 00 64 FD | 	ret
20678                 | 
20678                 | ' 
20678                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
20678                 | _audio096_spin2_play8
20678                 | ' 
20678                 | ' base2:=@channel1[0]+64*channel
20678     0C E4 05 F1 | 	add	objptr, #12
2067c     F2 00 02 F6 | 	mov	_var01, objptr
20680     06 12 66 F0 | 	shl	arg01, #6
20684     09 01 02 F1 | 	add	_var01, arg01
20688                 | ' long[base2]:=0
20688     00 01 68 FC | 	wrlong	#0, _var01
2068c                 | ' long[base2+8]:=sample+$40000000 
2068c     00 00 20 FF 
20690     00 14 06 F1 | 	add	arg02, ##1073741824
20694     00 13 02 F6 | 	mov	arg01, _var01
20698     08 12 06 F1 | 	add	arg01, #8
2069c     09 15 62 FC | 	wrlong	arg02, arg01
206a0                 | ' if loop>=0
206a0     00 1C 56 F2 | 	cmps	arg06, #0 wc
206a4     0C E4 85 F1 | 	sub	objptr, #12
206a8     1C 00 90 CD |  if_b	jmp	#LR__2720
206ac                 | '   long[base2+12]:=loop
206ac     00 15 02 F6 | 	mov	arg02, _var01
206b0     0C 14 06 F1 | 	add	arg02, #12
206b4     0A 1D 62 FC | 	wrlong	arg06, arg02
206b8                 | '   long[base2+16]:= len
206b8     00 1D 02 F6 | 	mov	arg06, _var01
206bc     10 1C 06 F1 | 	add	arg06, #16
206c0     0E 1B 62 FC | 	wrlong	arg05, arg06
206c4     1C 00 90 FD | 	jmp	#LR__2721
206c8                 | LR__2720
206c8                 | ' else
206c8                 | '   long[base2+12]:= len
206c8     00 1D 02 F6 | 	mov	arg06, _var01
206cc     0C 1C 06 F1 | 	add	arg06, #12
206d0     0E 1B 62 FC | 	wrlong	arg05, arg06
206d4                 | '   long[base2+16]:= len+1
206d4     01 1A 06 F1 | 	add	arg05, #1
206d8     00 13 02 F6 | 	mov	arg01, _var01
206dc     10 12 06 F1 | 	add	arg01, #16
206e0     09 1B 62 FC | 	wrlong	arg05, arg01
206e4                 | LR__2721
206e4     0B 17 52 F6 | 	abs	arg03, arg03 wc
206e8     0F 1B 80 FF 
206ec     0B 1F 1A FD | 	qdiv	##3546895, arg03
206f0                 | ' word[base2+20]:=vol
206f0     00 17 02 F6 | 	mov	arg03, _var01
206f4     14 16 06 F1 | 	add	arg03, #20
206f8     0B 19 52 FC | 	wrword	arg04, arg03
206fc                 | ' word[base2+24]:= 3546895 /splfreq 
206fc     00 13 02 F6 | 	mov	arg01, _var01
20700     18 12 06 F1 | 	add	arg01, #24
20704                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
20704     1A 00 06 F1 | 	add	_var01, #26
20708     18 18 62 FD | 	getqx	arg04
2070c     0C 19 82 F6 | 	negc	arg04, arg04
20710     09 19 52 FC | 	wrword	arg04, arg01
20714     00 01 5A FC | 	wrword	#256, _var01
20718                 | _audio096_spin2_play8_ret
20718     2D 00 64 FD | 	ret
2071c                 | 
2071c                 | ' 'long[base2+28]:=$40000000
2071c                 | ' 
2071c                 | '     
2071c                 | ' pub stop(channel) 'silence it
2071c                 | _audio096_spin2_stop
2071c                 | ' 
2071c                 | ' word[@channel1[0]+64*channel+20]:=0
2071c     0C E4 05 F1 | 	add	objptr, #12
20720     F2 00 02 F6 | 	mov	_var01, objptr
20724     09 03 02 F6 | 	mov	_var02, arg01
20728     06 02 66 F0 | 	shl	_var02, #6
2072c     01 01 02 F1 | 	add	_var01, _var02
20730     14 00 06 F1 | 	add	_var01, #20
20734     00 01 58 FC | 	wrword	#0, _var01
20738                 | ' word[@channel1[0]+64*channel+20]:=0
20738     F2 00 02 F6 | 	mov	_var01, objptr
2073c     06 12 66 F0 | 	shl	arg01, #6
20740     09 01 02 F1 | 	add	_var01, arg01
20744     14 00 06 F1 | 	add	_var01, #20
20748     00 01 58 FC | 	wrword	#0, _var01
2074c     0C E4 85 F1 | 	sub	objptr, #12
20750                 | _audio096_spin2_stop_ret
20750     2D 00 64 FD | 	ret
20754                 | hubexit
20754     81 00 80 FD | 	jmp	#cogexit
20758                 | 
20758                 | __system___setbaud
20758     14 7C 06 FB | 	rdlong	muldiva_, #20
2075c     09 7F 02 F6 | 	mov	muldivb_, arg01
20760     BA 00 A0 FD | 	call	#divide_
20764     97 06 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
20768                 | LR__2730
20768     3E FA 9D FA | 	rdpin	result1, #62 wc
2076c     FE FC A1 F1 | 	subx	result2, result2
20770     F4 FF 9F CD |  if_b	jmp	#LR__2730
20774                 | LR__2731
20774     40 7C 64 FD | 	dirl	#62
20778     40 7E 64 FD | 	dirl	#63
2077c     F3 7E 62 FC | 	wrlong	muldivb_, ptr___system__dat__
20780     10 7E 66 F0 | 	shl	muldivb_, #16
20784     07 14 06 F6 | 	mov	arg02, #7
20788     3F 15 02 F1 | 	add	arg02, muldivb_
2078c     3E F8 0C FC | 	wrpin	#124, #62
20790     3E 14 16 FC | 	wxpin	arg02, #62
20794     3F 7C 0C FC | 	wrpin	#62, #63
20798     14 14 06 F1 | 	add	arg02, #20
2079c     3F 14 16 FC | 	wxpin	arg02, #63
207a0     41 7C 64 FD | 	dirh	#62
207a4     41 7E 64 FD | 	dirh	#63
207a8                 | __system___setbaud_ret
207a8     2D 00 64 FD | 	ret
207ac                 | 
207ac                 | __system___txraw
207ac     01 4A 05 F6 | 	mov	COUNT_, #1
207b0     A8 00 A0 FD | 	call	#pushregs_
207b4     09 1F 02 F6 | 	mov	local01, arg01
207b8     97 06 48 FB | 	callpa	#(@LR__2741-@LR__2740)>>2,fcache_load_ptr_
207bc                 | LR__2740
207bc     3E FA 9D FA | 	rdpin	result1, #62 wc
207c0     FE FC A1 F1 | 	subx	result2, result2
207c4     F4 FF 9F CD |  if_b	jmp	#LR__2740
207c8                 | LR__2741
207c8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
207cc     C2 01 00 AF 
207d0     00 12 06 A6 |  if_e	mov	arg01, ##230400
207d4     80 FF BF AD |  if_e	call	#__system___setbaud
207d8     58 7C 64 FD | 	drvl	#62
207dc     3E 1E 26 FC | 	wypin	local01, #62
207e0     01 FA 05 F6 | 	mov	result1, #1
207e4     A7 F0 03 F6 | 	mov	ptra, fp
207e8     B2 00 A0 FD | 	call	#popregs_
207ec                 | __system___txraw_ret
207ec     2D 00 64 FD | 	ret
207f0                 | 
207f0                 | __system___rxraw
207f0     0D 4A 05 F6 | 	mov	COUNT_, #13
207f4     A8 00 A0 FD | 	call	#pushregs_
207f8     09 1F 02 F6 | 	mov	local01, arg01
207fc     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
20800     C2 01 00 AF 
20804     00 12 06 A6 |  if_e	mov	arg01, ##230400
20808     4C FF BF AD |  if_e	call	#__system___setbaud
2080c     00 1E 0E F2 | 	cmp	local01, #0 wz
20810     20 00 90 AD |  if_e	jmp	#LR__2750
20814     14 22 06 FB | 	rdlong	local03, #20
20818     0A 22 46 F0 | 	shr	local03, #10
2081c     11 1F 02 FD | 	qmul	local01, local03
20820     1A FA 61 FD | 	getct	result1
20824     18 24 62 FD | 	getqx	local04
20828     12 FB 01 F1 | 	add	result1, local04
2082c     FD 26 02 F6 | 	mov	local05, result1
20830     04 00 90 FD | 	jmp	#LR__2751
20834                 | LR__2750
20834     00 26 06 F6 | 	mov	local05, #0
20838                 | LR__2751
20838     01 28 66 F6 | 	neg	local06, #1
2083c     3F 2A 06 F6 | 	mov	local07, #63
20840     00 2C 06 F6 | 	mov	local08, #0
20844     04 E6 05 F1 | 	add	ptr___system__dat__, #4
20848     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
2084c     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
20850                 | LR__2752
20850     08 2E 16 F4 | 	testb	local09, #8 wc
20854     09 2E 76 F4 | 	testbn	local09, #9 andc
20858     0A 2E 46 F0 | 	shr	local09, #10
2085c     01 2C 06 C6 |  if_b	mov	local08, #1
20860     40 7E 6C 3D |  if_ae	testp	#63 wz
20864     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
20868     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
2086c     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
20870                 | LR__2753
20870     00 20 06 F6 | 	mov	local02, #0
20874     00 2C 0E F2 | 	cmp	local08, #0 wz
20878     01 20 66 56 |  if_ne	neg	local02, #1
2087c     00 30 06 F6 | 	mov	local10, #0
20880     00 22 06 F6 | 	mov	local03, #0
20884     00 1E 0E F2 | 	cmp	local01, #0 wz
20888     01 22 66 56 |  if_ne	neg	local03, #1
2088c     00 24 06 F6 | 	mov	local04, #0
20890     00 32 06 F6 | 	mov	local11, #0
20894     1A FA 61 FD | 	getct	result1
20898     FD 34 02 F6 | 	mov	local12, result1
2089c     1A 37 02 F6 | 	mov	local13, local12
208a0     13 37 82 F1 | 	sub	local13, local05
208a4     00 36 56 F2 | 	cmps	local13, #0 wc
208a8     00 32 26 C6 |  if_b	not	local11, #0
208ac     00 32 0E F2 | 	cmp	local11, #0 wz
208b0     00 24 26 56 |  if_ne	not	local04, #0
208b4     12 23 CA F7 | 	test	local03, local04 wz
208b8     00 30 26 56 |  if_ne	not	local10, #0
208bc     18 21 4A F5 | 	or	local02, local10 wz
208c0     8C FF 9F AD |  if_e	jmp	#LR__2752
208c4     00 2C 0E F2 | 	cmp	local08, #0 wz
208c8     17 29 02 56 |  if_ne	mov	local06, local09
208cc     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
208d0     04 E6 05 F1 | 	add	ptr___system__dat__, #4
208d4     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
208d8     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
208dc     14 FB 01 F6 | 	mov	result1, local06
208e0     A7 F0 03 F6 | 	mov	ptra, fp
208e4     B2 00 A0 FD | 	call	#popregs_
208e8                 | __system___rxraw_ret
208e8     2D 00 64 FD | 	ret
208ec                 | 
208ec                 | __system___getus
208ec     1A FC 71 FD | 	getct	result2 wc
208f0     1A 00 62 FD | 	getct	_var01
208f4     10 E6 05 F1 | 	add	ptr___system__dat__, #16
208f8     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
208fc     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
20900     20 00 90 5D |  if_ne	jmp	#LR__2760
20904     14 02 06 FB | 	rdlong	_var02, #20
20908     A1 07 00 FF 
2090c     40 02 16 FD | 	qdiv	_var02, ##1000000
20910     10 E6 05 F1 | 	add	ptr___system__dat__, #16
20914     18 FA 61 FD | 	getqx	result1
20918     FD 02 02 F6 | 	mov	_var02, result1
2091c     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
20920     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
20924                 | LR__2760
20924     01 FD 11 FD | 	qdiv	result2, _var02
20928     19 FC 61 FD | 	getqy	result2
2092c     28 FC 61 FD | 	setq	result2
20930     01 01 12 FD | 	qdiv	_var01, _var02
20934     18 FA 61 FD | 	getqx	result1
20938                 | __system___getus_ret
20938     2D 00 64 FD | 	ret
2093c                 | 
2093c                 | __system____builtin_memmove
2093c     09 01 02 F6 | 	mov	_var01, arg01
20940     0A 13 52 F2 | 	cmps	arg01, arg02 wc
20944     10 00 90 CD |  if_b	jmp	#LR__2770
20948     0A 03 02 F6 | 	mov	_var02, arg02
2094c     0B 03 02 F1 | 	add	_var02, arg03
20950     01 13 52 F2 | 	cmps	arg01, _var02 wc
20954     48 00 90 CD |  if_b	jmp	#LR__2776
20958                 | LR__2770
20958     0B 05 02 F6 | 	mov	_var03, arg03
2095c     02 04 4E F0 | 	shr	_var03, #2 wz
20960     18 00 90 AD |  if_e	jmp	#LR__2775
20964     97 0A 48 FB | 	callpa	#(@LR__2773-@LR__2771)>>2,fcache_load_ptr_
20968                 | LR__2771
20968     02 09 D8 FC | 	rep	@LR__2774, _var03
2096c                 | LR__2772
2096c     0A 05 02 FB | 	rdlong	_var03, arg02
20970     09 05 62 FC | 	wrlong	_var03, arg01
20974     04 12 06 F1 | 	add	arg01, #4
20978     04 14 06 F1 | 	add	arg02, #4
2097c                 | LR__2773
2097c                 | LR__2774
2097c                 | LR__2775
2097c     02 16 CE F7 | 	test	arg03, #2 wz
20980     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
20984     09 03 52 5C |  if_ne	wrword	_var02, arg01
20988     02 12 06 51 |  if_ne	add	arg01, #2
2098c     02 14 06 51 |  if_ne	add	arg02, #2
20990     01 16 CE F7 | 	test	arg03, #1 wz
20994     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
20998     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
2099c     28 00 90 FD | 	jmp	#LR__2782
209a0                 | LR__2776
209a0     0B 13 02 F1 | 	add	arg01, arg03
209a4     0B 15 02 F1 | 	add	arg02, arg03
209a8     0B 07 0A F6 | 	mov	_var04, arg03 wz
209ac     18 00 90 AD |  if_e	jmp	#LR__2781
209b0     97 0A 48 FB | 	callpa	#(@LR__2779-@LR__2777)>>2,fcache_load_ptr_
209b4                 | LR__2777
209b4     03 09 D8 FC | 	rep	@LR__2780, _var04
209b8                 | LR__2778
209b8     01 12 86 F1 | 	sub	arg01, #1
209bc     01 14 86 F1 | 	sub	arg02, #1
209c0     0A 03 C2 FA | 	rdbyte	_var02, arg02
209c4     09 03 42 FC | 	wrbyte	_var02, arg01
209c8                 | LR__2779
209c8                 | LR__2780
209c8                 | LR__2781
209c8                 | LR__2782
209c8     00 FB 01 F6 | 	mov	result1, _var01
209cc                 | __system____builtin_memmove_ret
209cc     2D 00 64 FD | 	ret
209d0                 | 
209d0                 | __system____builtin_strcpy
209d0     09 01 02 F6 | 	mov	_var01, arg01
209d4     97 0A 48 FB | 	callpa	#(@LR__2791-@LR__2790)>>2,fcache_load_ptr_
209d8                 | LR__2790
209d8     0A FB C9 FA | 	rdbyte	result1, arg02 wz
209dc     09 FB 41 FC | 	wrbyte	result1, arg01
209e0     01 14 06 F1 | 	add	arg02, #1
209e4     01 12 06 F1 | 	add	arg01, #1
209e8     EC FF 9F 5D |  if_ne	jmp	#LR__2790
209ec                 | LR__2791
209ec     00 FB 01 F6 | 	mov	result1, _var01
209f0                 | __system____builtin_strcpy_ret
209f0     2D 00 64 FD | 	ret
209f4                 | 
209f4                 | __system____topofstack
209f4     00 4A 05 F6 | 	mov	COUNT_, #0
209f8     A8 00 A0 FD | 	call	#pushregs_
209fc     08 F0 07 F1 | 	add	ptra, #8
20a00     04 4E 05 F1 | 	add	fp, #4
20a04     A7 12 62 FC | 	wrlong	arg01, fp
20a08     A7 FA 01 F6 | 	mov	result1, fp
20a0c     04 4E 85 F1 | 	sub	fp, #4
20a10     A7 F0 03 F6 | 	mov	ptra, fp
20a14     B2 00 A0 FD | 	call	#popregs_
20a18                 | __system____topofstack_ret
20a18     2D 00 64 FD | 	ret
20a1c                 | 
20a1c                 | __system___lockmem
20a1c     00 FA 05 F6 | 	mov	result1, #0
20a20     01 FA 61 FD | 	cogid	result1
20a24     00 FB 05 F1 | 	add	result1, #256
20a28                 | LR__2800
20a28     09 01 0A FB | 	rdlong	_var01, arg01 wz
20a2c     09 FB 61 AC |  if_e	wrlong	result1, arg01
20a30     09 01 02 AB |  if_e	rdlong	_var01, arg01
20a34     09 01 02 AB |  if_e	rdlong	_var01, arg01
20a38     FD 00 0A F2 | 	cmp	_var01, result1 wz
20a3c     E8 FF 9F 5D |  if_ne	jmp	#LR__2800
20a40                 | __system___lockmem_ret
20a40     2D 00 64 FD | 	ret
20a44                 | 
20a44                 | __system___string_cmp
20a44     97 14 48 FB | 	callpa	#(@LR__2811-@LR__2810)>>2,fcache_load_ptr_
20a48                 | LR__2810
20a48     09 01 C2 FA | 	rdbyte	_var01, arg01
20a4c     0A 03 C2 FA | 	rdbyte	_var02, arg02
20a50     00 05 02 F6 | 	mov	_var03, _var01
20a54     01 05 8A F1 | 	sub	_var03, _var02 wz
20a58     01 12 06 F1 | 	add	arg01, #1
20a5c     01 14 06 F1 | 	add	arg02, #1
20a60     0C 00 90 5D |  if_ne	jmp	#LR__2812
20a64     00 00 0E F2 | 	cmp	_var01, #0 wz
20a68     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
20a6c     D8 FF 9F 5D |  if_ne	jmp	#LR__2810
20a70                 | LR__2811
20a70                 | LR__2812
20a70     02 FB 01 F6 | 	mov	result1, _var03
20a74                 | __system___string_cmp_ret
20a74     2D 00 64 FD | 	ret
20a78                 | 
20a78                 | __system___string_concat
20a78     05 4A 05 F6 | 	mov	COUNT_, #5
20a7c     A8 00 A0 FD | 	call	#pushregs_
20a80     09 1F 02 F6 | 	mov	local01, arg01
20a84     0A 21 02 F6 | 	mov	local02, arg02
20a88     0F 13 02 F6 | 	mov	arg01, local01
20a8c     09 23 02 F6 | 	mov	local03, arg01
20a90     97 06 48 FB | 	callpa	#(@LR__2821-@LR__2820)>>2,fcache_load_ptr_
20a94                 | LR__2820
20a94     11 FB C9 FA | 	rdbyte	result1, local03 wz
20a98     01 22 06 51 |  if_ne	add	local03, #1
20a9c     F4 FF 9F 5D |  if_ne	jmp	#LR__2820
20aa0                 | LR__2821
20aa0     09 23 82 F1 | 	sub	local03, arg01
20aa4     11 25 02 F6 | 	mov	local04, local03
20aa8     10 13 02 F6 | 	mov	arg01, local02
20aac     09 23 02 F6 | 	mov	local03, arg01
20ab0     97 06 48 FB | 	callpa	#(@LR__2823-@LR__2822)>>2,fcache_load_ptr_
20ab4                 | LR__2822
20ab4     11 FB C9 FA | 	rdbyte	result1, local03 wz
20ab8     01 22 06 51 |  if_ne	add	local03, #1
20abc     F4 FF 9F 5D |  if_ne	jmp	#LR__2822
20ac0                 | LR__2823
20ac0     09 23 82 F1 | 	sub	local03, arg01
20ac4     12 13 02 F6 | 	mov	arg01, local04
20ac8     11 13 02 F1 | 	add	arg01, local03
20acc     01 12 06 F1 | 	add	arg01, #1
20ad0     00 3E B0 FD | 	call	#__system___gc_alloc_managed
20ad4     FD 26 0A F6 | 	mov	local05, result1 wz
20ad8     28 00 90 AD |  if_e	jmp	#LR__2824
20adc     13 13 02 F6 | 	mov	arg01, local05
20ae0     0F 15 02 F6 | 	mov	arg02, local01
20ae4     12 17 02 F6 | 	mov	arg03, local04
20ae8     50 FE BF FD | 	call	#__system____builtin_memmove
20aec     13 13 02 F6 | 	mov	arg01, local05
20af0     12 13 02 F1 | 	add	arg01, local04
20af4     01 22 06 F1 | 	add	local03, #1
20af8     10 15 02 F6 | 	mov	arg02, local02
20afc     11 17 02 F6 | 	mov	arg03, local03
20b00     38 FE BF FD | 	call	#__system____builtin_memmove
20b04                 | LR__2824
20b04     13 FB 01 F6 | 	mov	result1, local05
20b08     A7 F0 03 F6 | 	mov	ptra, fp
20b0c     B2 00 A0 FD | 	call	#popregs_
20b10                 | __system___string_concat_ret
20b10     2D 00 64 FD | 	ret
20b14                 | 
20b14                 | __system___tx
20b14     02 4A 05 F6 | 	mov	COUNT_, #2
20b18     A8 00 A0 FD | 	call	#pushregs_
20b1c     09 1F 02 F6 | 	mov	local01, arg01
20b20     0A 1E 0E F2 | 	cmp	local01, #10 wz
20b24     18 00 90 5D |  if_ne	jmp	#LR__2830
20b28     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20b2c     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
20b30     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20b34     02 20 CE F7 | 	test	local02, #2 wz
20b38     0D 12 06 56 |  if_ne	mov	arg01, #13
20b3c     6C FC BF 5D |  if_ne	call	#__system___txraw
20b40                 | LR__2830
20b40     0F 13 02 F6 | 	mov	arg01, local01
20b44     64 FC BF FD | 	call	#__system___txraw
20b48     A7 F0 03 F6 | 	mov	ptra, fp
20b4c     B2 00 A0 FD | 	call	#popregs_
20b50                 | __system___tx_ret
20b50     2D 00 64 FD | 	ret
20b54                 | 
20b54                 | __system___rx
20b54     01 4A 05 F6 | 	mov	COUNT_, #1
20b58     A8 00 A0 FD | 	call	#pushregs_
20b5c                 | LR__2840
20b5c     00 12 06 F6 | 	mov	arg01, #0
20b60     8C FC BF FD | 	call	#__system___rxraw
20b64     FD 1E 02 F6 | 	mov	local01, result1
20b68     FF FF 7F FF 
20b6c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
20b70     E8 FF 9F AD |  if_e	jmp	#LR__2840
20b74     0D 1E 0E F2 | 	cmp	local01, #13 wz
20b78     14 00 90 5D |  if_ne	jmp	#LR__2841
20b7c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20b80     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
20b84     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20b88     02 FA CD F7 | 	test	result1, #2 wz
20b8c     0A 1E 06 56 |  if_ne	mov	local01, #10
20b90                 | LR__2841
20b90     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20b94     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
20b98     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20b9c     01 12 CE F7 | 	test	arg01, #1 wz
20ba0     1C 00 90 AD |  if_e	jmp	#LR__2844
20ba4     7F 1E 0E F2 | 	cmp	local01, #127 wz
20ba8     0C 00 90 5D |  if_ne	jmp	#LR__2842
20bac     08 12 06 F6 | 	mov	arg01, #8
20bb0     60 FF BF FD | 	call	#__system___tx
20bb4     08 00 90 FD | 	jmp	#LR__2843
20bb8                 | LR__2842
20bb8     0F 13 02 F6 | 	mov	arg01, local01
20bbc     54 FF BF FD | 	call	#__system___tx
20bc0                 | LR__2843
20bc0                 | LR__2844
20bc0     0F FB 01 F6 | 	mov	result1, local01
20bc4     A7 F0 03 F6 | 	mov	ptra, fp
20bc8     B2 00 A0 FD | 	call	#popregs_
20bcc                 | __system___rx_ret
20bcc     2D 00 64 FD | 	ret
20bd0                 | 
20bd0                 | __system___pinwrite
20bd0     09 01 02 F6 | 	mov	_var01, arg01
20bd4     1F 00 06 F5 | 	and	_var01, #31
20bd8     20 12 CE F7 | 	test	arg01, #32 wz
20bdc     06 12 46 F0 | 	shr	arg01, #6
20be0     09 13 CA F9 | 	bmask	arg01, arg01
20be4     00 13 62 F0 | 	shl	arg01, _var01
20be8     00 15 62 F0 | 	shl	arg02, _var01
20bec     1C 00 90 AD |  if_e	jmp	#LR__2850
20bf0     09 F7 43 F5 | 	or	dirb, arg01
20bf4     FD 01 02 F6 | 	mov	_var01, outb
20bf8     09 01 22 F5 | 	andn	_var01, arg01
20bfc     09 15 02 F5 | 	and	arg02, arg01
20c00     0A 01 42 F5 | 	or	_var01, arg02
20c04     00 FB 03 F6 | 	mov	outb, _var01
20c08     18 00 90 FD | 	jmp	#LR__2851
20c0c                 | LR__2850
20c0c     09 F5 43 F5 | 	or	dira, arg01
20c10     FC 01 02 F6 | 	mov	_var01, outa
20c14     09 01 22 F5 | 	andn	_var01, arg01
20c18     09 15 02 F5 | 	and	arg02, arg01
20c1c     0A 01 42 F5 | 	or	_var01, arg02
20c20     00 F9 03 F6 | 	mov	outa, _var01
20c24                 | LR__2851
20c24                 | __system___pinwrite_ret
20c24     2D 00 64 FD | 	ret
20c28                 | 
20c28                 | __system___basic_read_line
20c28     06 4A 05 F6 | 	mov	COUNT_, #6
20c2c     A8 00 A0 FD | 	call	#pushregs_
20c30     09 1F 02 F6 | 	mov	local01, arg01
20c34     00 20 06 F6 | 	mov	local02, #0
20c38     18 22 06 F6 | 	mov	local03, #24
20c3c     00 24 06 F6 | 	mov	local04, #0
20c40     18 12 06 F6 | 	mov	arg01, #24
20c44     8C 3C B0 FD | 	call	#__system___gc_alloc_managed
20c48     FD 26 0A F6 | 	mov	local05, result1 wz
20c4c     13 FB 01 A6 |  if_e	mov	result1, local05
20c50     B0 00 90 AD |  if_e	jmp	#LR__2863
20c54                 | LR__2860
20c54     0F 13 02 F6 | 	mov	arg01, local01
20c58     78 0B B0 FD | 	call	#__system___basic_get_char
20c5c     FD 28 02 F6 | 	mov	local06, result1
20c60     01 28 56 F2 | 	cmps	local06, #1 wc
20c64     8C 00 90 CD |  if_b	jmp	#LR__2862
20c68     0A 28 0E F2 | 	cmp	local06, #10 wz
20c6c     10 00 90 5D |  if_ne	jmp	#LR__2861
20c70     00 24 0E F2 | 	cmp	local04, #0 wz
20c74     01 20 56 52 |  if_ne	cmps	local02, #1 wc
20c78     01 20 86 11 |  if_a	sub	local02, #1
20c7c     74 00 90 FD | 	jmp	#LR__2862
20c80                 | LR__2861
20c80     0D 28 0E F2 | 	cmp	local06, #13 wz
20c84     01 24 06 A6 |  if_e	mov	local04, #1
20c88     00 24 06 56 |  if_ne	mov	local04, #0
20c8c     08 28 0E F2 | 	cmp	local06, #8 wz
20c90     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
20c94     01 20 56 A2 |  if_e	cmps	local02, #1 wc
20c98     01 20 86 21 |  if_nc_and_z	sub	local02, #1
20c9c     B4 FF 9F AD |  if_e	jmp	#LR__2860
20ca0     13 17 02 F6 | 	mov	arg03, local05
20ca4     10 17 02 F1 | 	add	arg03, local02
20ca8     0B 29 42 FC | 	wrbyte	local06, arg03
20cac     01 20 06 F1 | 	add	local02, #1
20cb0     11 21 0A F2 | 	cmp	local02, local03 wz
20cb4     9C FF 9F 5D |  if_ne	jmp	#LR__2860
20cb8     11 13 02 F6 | 	mov	arg01, local03
20cbc     20 12 06 F1 | 	add	arg01, #32
20cc0     10 3C B0 FD | 	call	#__system___gc_alloc_managed
20cc4     FD 28 0A F6 | 	mov	local06, result1 wz
20cc8     14 FB 01 A6 |  if_e	mov	result1, local06
20ccc     34 00 90 AD |  if_e	jmp	#LR__2863
20cd0     14 13 02 F6 | 	mov	arg01, local06
20cd4     13 15 02 F6 | 	mov	arg02, local05
20cd8     11 17 02 F6 | 	mov	arg03, local03
20cdc     5C FC BF FD | 	call	#__system____builtin_memmove
20ce0     20 22 06 F1 | 	add	local03, #32
20ce4     13 13 02 F6 | 	mov	arg01, local05
20ce8     24 3D B0 FD | 	call	#__system___gc_free
20cec     14 27 02 F6 | 	mov	local05, local06
20cf0     60 FF 9F FD | 	jmp	#LR__2860
20cf4                 | LR__2862
20cf4     13 29 02 F6 | 	mov	local06, local05
20cf8     10 29 02 F1 | 	add	local06, local02
20cfc     14 01 48 FC | 	wrbyte	#0, local06
20d00     13 FB 01 F6 | 	mov	result1, local05
20d04                 | LR__2863
20d04     A7 F0 03 F6 | 	mov	ptra, fp
20d08     B2 00 A0 FD | 	call	#popregs_
20d0c                 | __system___basic_read_line_ret
20d0c     2D 00 64 FD | 	ret
20d10                 | 
20d10                 | __system___waitms
20d10     09 01 02 F6 | 	mov	_var01, arg01
20d14     1A 02 62 FD | 	getct	_var02
20d18     14 04 06 FB | 	rdlong	_var03, #20
20d1c     97 14 48 FB | 	callpa	#(@LR__2871-@LR__2870)>>2,fcache_load_ptr_
20d20                 | LR__2870
20d20     01 00 00 FF 
20d24     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
20d28     1C 00 90 CD |  if_b	jmp	#LR__2872
20d2c     02 03 02 F1 | 	add	_var02, _var03
20d30     01 13 02 F6 | 	mov	arg01, _var02
20d34     00 12 66 FA | 	addct1	arg01, #0
20d38     24 22 60 FD | 	waitct1
20d3c     01 00 00 FF 
20d40     E8 01 86 F1 | 	sub	_var01, ##1000
20d44     D8 FF 9F FD | 	jmp	#LR__2870
20d48                 | LR__2871
20d48                 | LR__2872
20d48     01 00 56 F2 | 	cmps	_var01, #1 wc
20d4c     28 00 90 CD |  if_b	jmp	#LR__2873
20d50     02 01 02 FD | 	qmul	_var01, _var03
20d54     01 00 00 FF 
20d58     E8 17 06 F6 | 	mov	arg03, ##1000
20d5c     19 FA 61 FD | 	getqy	result1
20d60     18 12 62 FD | 	getqx	arg01
20d64     28 FA 61 FD | 	setq	result1
20d68     0B 13 12 FD | 	qdiv	arg01, arg03
20d6c     18 12 62 FD | 	getqx	arg01
20d70     01 13 62 FA | 	addct1	arg01, _var02
20d74     24 22 60 FD | 	waitct1
20d78                 | LR__2873
20d78                 | __system___waitms_ret
20d78     2D 00 64 FD | 	ret
20d7c                 | 
20d7c                 | __system___waitus
20d7c     09 01 02 F6 | 	mov	_var01, arg01
20d80     1A 02 62 FD | 	getct	_var02
20d84     14 04 06 FB | 	rdlong	_var03, #20
20d88     97 14 48 FB | 	callpa	#(@LR__2881-@LR__2880)>>2,fcache_load_ptr_
20d8c                 | LR__2880
20d8c     A1 07 00 FF 
20d90     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
20d94     1C 00 90 CD |  if_b	jmp	#LR__2882
20d98     02 03 02 F1 | 	add	_var02, _var03
20d9c     01 13 02 F6 | 	mov	arg01, _var02
20da0     00 12 66 FA | 	addct1	arg01, #0
20da4     24 22 60 FD | 	waitct1
20da8     A1 07 00 FF 
20dac     40 00 86 F1 | 	sub	_var01, ##1000000
20db0     D8 FF 9F FD | 	jmp	#LR__2880
20db4                 | LR__2881
20db4                 | LR__2882
20db4     01 00 56 F2 | 	cmps	_var01, #1 wc
20db8     28 00 90 CD |  if_b	jmp	#LR__2883
20dbc     02 01 02 FD | 	qmul	_var01, _var03
20dc0     A1 07 00 FF 
20dc4     40 16 06 F6 | 	mov	arg03, ##1000000
20dc8     19 FA 61 FD | 	getqy	result1
20dcc     18 12 62 FD | 	getqx	arg01
20dd0     28 FA 61 FD | 	setq	result1
20dd4     0B 13 12 FD | 	qdiv	arg01, arg03
20dd8     18 FA 61 FD | 	getqx	result1
20ddc     FD 02 62 FA | 	addct1	_var02, result1
20de0     24 22 60 FD | 	waitct1
20de4                 | LR__2883
20de4                 | __system___waitus_ret
20de4     2D 00 64 FD | 	ret
20de8                 | 
20de8                 | __system___mount
20de8     0B 4A 05 F6 | 	mov	COUNT_, #11
20dec     A8 00 A0 FD | 	call	#pushregs_
20df0     09 1F 02 F6 | 	mov	local01, arg01
20df4     0A 21 0A F6 | 	mov	local02, arg02 wz
20df8     01 22 66 F6 | 	neg	local03, #1
20dfc     01 FA 65 A6 |  if_e	neg	result1, #1
20e00     98 02 90 AD |  if_e	jmp	#LR__2905
20e04     0F FB C1 FA | 	rdbyte	result1, local01
20e08     2F FA 0D F2 | 	cmp	result1, #47 wz
20e0c     28 00 90 5D |  if_ne	jmp	#LR__2892
20e10     0F 13 02 F6 | 	mov	arg01, local01
20e14     09 25 02 F6 | 	mov	local04, arg01
20e18     97 06 48 FB | 	callpa	#(@LR__2891-@LR__2890)>>2,fcache_load_ptr_
20e1c                 | LR__2890
20e1c     12 FB C9 FA | 	rdbyte	result1, local04 wz
20e20     01 24 06 51 |  if_ne	add	local04, #1
20e24     F4 FF 9F 5D |  if_ne	jmp	#LR__2890
20e28                 | LR__2891
20e28     09 25 82 F1 | 	sub	local04, arg01
20e2c     12 FB 01 F6 | 	mov	result1, local04
20e30     10 FA 55 F2 | 	cmps	result1, #16 wc
20e34     14 00 90 CD |  if_b	jmp	#LR__2893
20e38                 | LR__2892
20e38     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20e3c     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
20e40     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20e44     01 FA 65 F6 | 	neg	result1, #1
20e48     50 02 90 FD | 	jmp	#LR__2905
20e4c                 | LR__2893
20e4c     00 26 06 F6 | 	mov	local05, #0
20e50                 | LR__2894
20e50     04 26 56 F2 | 	cmps	local05, #4 wc
20e54     B0 00 90 3D |  if_ae	jmp	#LR__2899
20e58     13 13 02 F6 | 	mov	arg01, local05
20e5c     02 12 66 F0 | 	shl	arg01, #2
20e60     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20e64     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
20e68     09 FB 09 FB | 	rdlong	result1, arg01 wz
20e6c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20e70     00 22 56 A2 |  if_e	cmps	local03, #0 wc
20e74     13 23 02 86 |  if_c_and_z	mov	local03, local05
20e78     84 00 90 8D |  if_c_and_z	jmp	#LR__2898
20e7c     13 13 02 F6 | 	mov	arg01, local05
20e80     02 12 66 F0 | 	shl	arg01, #2
20e84     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20e88     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
20e8c     09 13 02 FB | 	rdlong	arg01, arg01
20e90     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20e94     09 25 02 F6 | 	mov	local04, arg01
20e98     97 06 48 FB | 	callpa	#(@LR__2896-@LR__2895)>>2,fcache_load_ptr_
20e9c                 | LR__2895
20e9c     12 FB C9 FA | 	rdbyte	result1, local04 wz
20ea0     01 24 06 51 |  if_ne	add	local04, #1
20ea4     F4 FF 9F 5D |  if_ne	jmp	#LR__2895
20ea8                 | LR__2896
20ea8     09 25 82 F1 | 	sub	local04, arg01
20eac     12 29 02 F6 | 	mov	local06, local04
20eb0     14 13 02 F6 | 	mov	arg01, local06
20eb4     0F 13 02 F1 | 	add	arg01, local01
20eb8     09 FB C1 FA | 	rdbyte	result1, arg01
20ebc     2F FA 0D F2 | 	cmp	result1, #47 wz
20ec0     14 2B 02 56 |  if_ne	mov	local07, local06
20ec4     0F 2B 02 51 |  if_ne	add	local07, local01
20ec8     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
20ecc     30 00 90 5D |  if_ne	jmp	#LR__2897
20ed0     13 17 02 F6 | 	mov	arg03, local05
20ed4     02 16 66 F0 | 	shl	arg03, #2
20ed8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20edc     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
20ee0     0B 15 02 FB | 	rdlong	arg02, arg03
20ee4     0F 13 02 F6 | 	mov	arg01, local01
20ee8     14 17 02 F6 | 	mov	arg03, local06
20eec     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20ef0     60 4E B0 FD | 	call	#__system__strncmp
20ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
20ef8     13 23 02 A6 |  if_e	mov	local03, local05
20efc     08 00 90 AD |  if_e	jmp	#LR__2899
20f00                 | LR__2897
20f00                 | LR__2898
20f00     01 26 06 F1 | 	add	local05, #1
20f04     48 FF 9F FD | 	jmp	#LR__2894
20f08                 | LR__2899
20f08     FF FF 7F FF 
20f0c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
20f10     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
20f14     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
20f18     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
20f1c     01 FA 65 A6 |  if_e	neg	result1, #1
20f20     78 01 90 AD |  if_e	jmp	#LR__2905
20f24     11 27 02 F6 | 	mov	local05, local03
20f28     13 2B 02 F6 | 	mov	local07, local05
20f2c     02 2A 66 F0 | 	shl	local07, #2
20f30     74 E6 05 F1 | 	add	ptr___system__dat__, #116
20f34     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
20f38     15 29 0A FB | 	rdlong	local06, local07 wz
20f3c     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
20f40     58 00 90 AD |  if_e	jmp	#LR__2900
20f44     4C 28 06 F1 | 	add	local06, #76
20f48     14 2B 0A FB | 	rdlong	local07, local06 wz
20f4c     4C 28 86 F1 | 	sub	local06, #76
20f50     48 00 90 AD |  if_e	jmp	#LR__2900
20f54     4C 28 06 F1 | 	add	local06, #76
20f58     14 2B 02 FB | 	rdlong	local07, local06
20f5c     15 23 02 F6 | 	mov	local03, local07
20f60     13 2A 46 F7 | 	zerox	local07, #19
20f64     14 22 46 F0 | 	shr	local03, #20
20f68     02 22 66 F0 | 	shl	local03, #2
20f6c     ED 22 02 F1 | 	add	local03, __methods__
20f70     11 23 02 FB | 	rdlong	local03, local03
20f74     13 29 02 F6 | 	mov	local06, local05
20f78     02 28 66 F0 | 	shl	local06, #2
20f7c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20f80     F3 28 02 F1 | 	add	local06, ptr___system__dat__
20f84     14 13 02 FB | 	rdlong	arg01, local06
20f88     F2 28 02 F6 | 	mov	local06, objptr
20f8c     15 E5 01 F6 | 	mov	objptr, local07
20f90     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20f94     2D 22 62 FD | 	call	local03
20f98     14 E5 01 F6 | 	mov	objptr, local06
20f9c                 | LR__2900
20f9c     13 2D 02 F6 | 	mov	local08, local05
20fa0     02 2C 66 F0 | 	shl	local08, #2
20fa4     74 E6 05 F1 | 	add	ptr___system__dat__, #116
20fa8     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
20fac     16 21 62 FC | 	wrlong	local02, local08
20fb0     00 20 0E F2 | 	cmp	local02, #0 wz
20fb4     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
20fb8     18 00 90 5D |  if_ne	jmp	#LR__2901
20fbc     02 26 66 F0 | 	shl	local05, #2
20fc0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
20fc4     F3 26 02 F1 | 	add	local05, ptr___system__dat__
20fc8     13 01 68 FC | 	wrlong	#0, local05
20fcc     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
20fd0     C4 00 90 FD | 	jmp	#LR__2904
20fd4                 | LR__2901
20fd4     13 2F 02 F6 | 	mov	local09, local05
20fd8     04 2E 66 F0 | 	shl	local09, #4
20fdc     24 E6 05 F1 | 	add	ptr___system__dat__, #36
20fe0     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
20fe4     17 13 02 F6 | 	mov	arg01, local09
20fe8     0F 15 02 F6 | 	mov	arg02, local01
20fec     10 16 06 F6 | 	mov	arg03, #16
20ff0     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
20ff4     B0 4C B0 FD | 	call	#__system__strncpy
20ff8     48 20 06 F1 | 	add	local02, #72
20ffc     10 2D 0A FB | 	rdlong	local08, local02 wz
21000     48 20 86 F1 | 	sub	local02, #72
21004     7C 00 90 AD |  if_e	jmp	#LR__2903
21008     48 20 06 F1 | 	add	local02, #72
2100c     10 2D 02 FB | 	rdlong	local08, local02
21010     16 31 02 F6 | 	mov	local10, local08
21014     13 2C 46 F7 | 	zerox	local08, #19
21018     14 30 46 F0 | 	shr	local10, #20
2101c     02 30 66 F0 | 	shl	local10, #2
21020     ED 30 02 F1 | 	add	local10, __methods__
21024     18 31 02 FB | 	rdlong	local10, local10
21028     17 13 02 F6 | 	mov	arg01, local09
2102c     F2 32 02 F6 | 	mov	local11, objptr
21030     16 E5 01 F6 | 	mov	objptr, local08
21034     2D 30 62 FD | 	call	local10
21038     19 E5 01 F6 | 	mov	objptr, local11
2103c     FD 12 0A F6 | 	mov	arg01, result1 wz
21040     40 00 90 AD |  if_e	jmp	#LR__2902
21044     13 2D 02 F6 | 	mov	local08, local05
21048     02 2C 66 F0 | 	shl	local08, #2
2104c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
21050     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
21054     16 01 68 FC | 	wrlong	#0, local08
21058     02 26 66 F0 | 	shl	local05, #2
2105c     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
21060     F3 26 02 F1 | 	add	local05, ptr___system__dat__
21064     13 01 68 FC | 	wrlong	#0, local05
21068     09 13 6A F6 | 	neg	arg01, arg01 wz
2106c     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
21070     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
21074     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
21078     01 FA 65 56 |  if_ne	neg	result1, #1
2107c     00 FA 05 A6 |  if_e	mov	result1, #0
21080     18 00 90 FD | 	jmp	#LR__2905
21084                 | LR__2902
21084                 | LR__2903
21084     02 26 66 F0 | 	shl	local05, #2
21088     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2108c     F3 26 02 F1 | 	add	local05, ptr___system__dat__
21090     13 2F 62 FC | 	wrlong	local09, local05
21094     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21098                 | LR__2904
21098     00 FA 05 F6 | 	mov	result1, #0
2109c                 | LR__2905
2109c     A7 F0 03 F6 | 	mov	ptra, fp
210a0     B2 00 A0 FD | 	call	#popregs_
210a4                 | __system___mount_ret
210a4     2D 00 64 FD | 	ret
210a8                 | 
210a8                 | __system___chdir
210a8     00 4A 05 F6 | 	mov	COUNT_, #0
210ac     A8 00 A0 FD | 	call	#pushregs_
210b0     40 F0 07 F1 | 	add	ptra, #64
210b4     04 4E 05 F1 | 	add	fp, #4
210b8     A7 12 62 FC | 	wrlong	arg01, fp
210bc     04 4E 05 F1 | 	add	fp, #4
210c0     A7 14 02 F6 | 	mov	arg02, fp
210c4     08 4E 85 F1 | 	sub	fp, #8
210c8     80 48 B0 FD | 	call	#__system__stat
210cc     3C 4E 05 F1 | 	add	fp, #60
210d0     A7 FA 61 FC | 	wrlong	result1, fp
210d4     3C 4E 85 F1 | 	sub	fp, #60
210d8     00 FA 0D F2 | 	cmp	result1, #0 wz
210dc     3C 4E 05 51 |  if_ne	add	fp, #60
210e0     A7 FA 01 5B |  if_ne	rdlong	result1, fp
210e4     3C 4E 85 51 |  if_ne	sub	fp, #60
210e8     BC 00 90 5D |  if_ne	jmp	#LR__2912
210ec     10 4E 05 F1 | 	add	fp, #16
210f0     A7 12 02 FB | 	rdlong	arg01, fp
210f4     10 4E 85 F1 | 	sub	fp, #16
210f8     78 00 00 FF 
210fc     00 12 06 F5 | 	and	arg01, ##61440
21100     08 00 00 FF 
21104     00 12 0E F2 | 	cmp	arg01, ##4096 wz
21108     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
2110c     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
21110     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
21114     01 FA 65 56 |  if_ne	neg	result1, #1
21118     8C 00 90 5D |  if_ne	jmp	#LR__2912
2111c     04 4E 05 F1 | 	add	fp, #4
21120     A7 16 02 FB | 	rdlong	arg03, fp
21124     04 4E 85 F1 | 	sub	fp, #4
21128     0B 17 C2 FA | 	rdbyte	arg03, arg03
2112c     2F 16 0E F2 | 	cmp	arg03, #47 wz
21130     24 00 90 5D |  if_ne	jmp	#LR__2910
21134     84 E6 05 F1 | 	add	ptr___system__dat__, #132
21138     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2113c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21140     04 4E 05 F1 | 	add	fp, #4
21144     A7 14 02 FB | 	rdlong	arg02, fp
21148     04 4E 85 F1 | 	sub	fp, #4
2114c     00 17 06 F6 | 	mov	arg03, #256
21150     54 4B B0 FD | 	call	#__system__strncpy
21154     4C 00 90 FD | 	jmp	#LR__2911
21158                 | LR__2910
21158     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2115c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
21160     38 4E 05 F1 | 	add	fp, #56
21164     A7 12 62 FC | 	wrlong	arg01, fp
21168     38 4E 85 F1 | 	sub	fp, #56
2116c     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
21170     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
21174     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21178     00 17 06 F6 | 	mov	arg03, #256
2117c     28 4B B0 FD | 	call	#__system__strncpy
21180     38 4E 05 F1 | 	add	fp, #56
21184     A7 12 02 FB | 	rdlong	arg01, fp
21188     34 4E 85 F1 | 	sub	fp, #52
2118c     A7 14 02 FB | 	rdlong	arg02, fp
21190     04 4E 85 F1 | 	sub	fp, #4
21194     84 E6 05 F1 | 	add	ptr___system__dat__, #132
21198     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
2119c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
211a0     10 00 B0 FD | 	call	#__system____getvfsforfile
211a4                 | LR__2911
211a4     00 FA 05 F6 | 	mov	result1, #0
211a8                 | LR__2912
211a8     A7 F0 03 F6 | 	mov	ptra, fp
211ac     B2 00 A0 FD | 	call	#popregs_
211b0                 | __system___chdir_ret
211b0     2D 00 64 FD | 	ret
211b4                 | 
211b4                 | __system____getvfsforfile
211b4     0E 4A 05 F6 | 	mov	COUNT_, #14
211b8     A8 00 A0 FD | 	call	#pushregs_
211bc     09 1F 02 F6 | 	mov	local01, arg01
211c0     0A 21 02 F6 | 	mov	local02, arg02
211c4     0B 23 02 F6 | 	mov	local03, arg03
211c8     97 10 48 FB | 	callpa	#(@LR__2921-@LR__2920)>>2,fcache_load_ptr_
211cc                 | LR__2920
211cc     10 FB C1 FA | 	rdbyte	result1, local02
211d0     2F FA 0D F2 | 	cmp	result1, #47 wz
211d4     01 20 06 A1 |  if_e	add	local02, #1
211d8     10 25 C2 AA |  if_e	rdbyte	local04, local02
211dc     01 20 86 A1 |  if_e	sub	local02, #1
211e0     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
211e4     01 20 06 A1 |  if_e	add	local02, #1
211e8     E0 FF 9F AD |  if_e	jmp	#LR__2920
211ec                 | LR__2921
211ec     10 25 C2 FA | 	rdbyte	local04, local02
211f0     2F 24 0E F2 | 	cmp	local04, #47 wz
211f4     14 00 90 5D |  if_ne	jmp	#LR__2922
211f8     0F 13 02 F6 | 	mov	arg01, local01
211fc     10 15 02 F6 | 	mov	arg02, local02
21200     00 17 06 F6 | 	mov	arg03, #256
21204     A0 4A B0 FD | 	call	#__system__strncpy
21208     7C 00 90 FD | 	jmp	#LR__2924
2120c                 | LR__2922
2120c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
21210     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
21214     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21218     0F 13 02 F6 | 	mov	arg01, local01
2121c     00 17 06 F6 | 	mov	arg03, #256
21220     84 4A B0 FD | 	call	#__system__strncpy
21224     10 25 CA FA | 	rdbyte	local04, local02 wz
21228     5C 00 90 AD |  if_e	jmp	#LR__2923
2122c     10 25 C2 FA | 	rdbyte	local04, local02
21230     2E 24 0E F2 | 	cmp	local04, #46 wz
21234     01 20 06 A1 |  if_e	add	local02, #1
21238     10 27 C2 AA |  if_e	rdbyte	local05, local02
2123c     01 20 86 A1 |  if_e	sub	local02, #1
21240     13 29 02 A6 |  if_e	mov	local06, local05
21244     07 28 4E A7 |  if_e	zerox	local06, #7 wz
21248     3C 00 90 AD |  if_e	jmp	#LR__2923
2124c     0F 27 C2 FA | 	rdbyte	local05, local01
21250     2F 26 0E F2 | 	cmp	local05, #47 wz
21254     01 1E 06 A1 |  if_e	add	local01, #1
21258     0F 25 C2 AA |  if_e	rdbyte	local04, local01
2125c     01 1E 86 A1 |  if_e	sub	local01, #1
21260     00 24 4E A2 |  if_e	cmps	local04, #0 wz
21264     81 01 00 5F 
21268     40 14 06 56 |  if_ne	mov	arg02, ##@LR__5010
2126c     0F 13 02 56 |  if_ne	mov	arg01, local01
21270     00 17 06 56 |  if_ne	mov	arg03, #256
21274     7C 4A B0 5D |  if_ne	call	#__system__strncat
21278     0F 13 02 F6 | 	mov	arg01, local01
2127c     10 15 02 F6 | 	mov	arg02, local02
21280     00 17 06 F6 | 	mov	arg03, #256
21284     6C 4A B0 FD | 	call	#__system__strncat
21288                 | LR__2923
21288                 | LR__2924
21288     0F 13 02 F6 | 	mov	arg01, local01
2128c     24 4C B0 FD | 	call	#__system___normalizeName
21290     0F 25 CA FA | 	rdbyte	local04, local01 wz
21294     1C 00 90 AD |  if_e	jmp	#LR__2925
21298     0F 25 C2 FA | 	rdbyte	local04, local01
2129c     2F 24 0E F2 | 	cmp	local04, #47 wz
212a0     01 1E 06 A1 |  if_e	add	local01, #1
212a4     0F 29 C2 AA |  if_e	rdbyte	local06, local01
212a8     01 1E 86 A1 |  if_e	sub	local01, #1
212ac     00 28 4E A2 |  if_e	cmps	local06, #0 wz
212b0     18 00 90 5D |  if_ne	jmp	#LR__2926
212b4                 | LR__2925
212b4     01 00 00 FF 
212b8     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
212bc     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
212c0     01 00 00 FF 
212c4     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
212c8     EC 01 90 FD | 	jmp	#LR__2940
212cc                 | LR__2926
212cc     00 2A 06 F6 | 	mov	local07, #0
212d0                 | LR__2927
212d0     04 2A 56 F2 | 	cmps	local07, #4 wc
212d4     CC 01 90 3D |  if_ae	jmp	#LR__2939
212d8     15 29 02 F6 | 	mov	local06, local07
212dc     02 28 66 F0 | 	shl	local06, #2
212e0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
212e4     F3 28 02 F1 | 	add	local06, ptr___system__dat__
212e8     14 29 0A FB | 	rdlong	local06, local06 wz
212ec     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
212f0     A8 01 90 AD |  if_e	jmp	#LR__2938
212f4     15 25 02 F6 | 	mov	local04, local07
212f8     02 24 66 F0 | 	shl	local04, #2
212fc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21300     F3 24 02 F1 | 	add	local04, ptr___system__dat__
21304     12 13 02 FB | 	rdlong	arg01, local04
21308     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2130c     09 2D 02 F6 | 	mov	local08, arg01
21310     97 06 48 FB | 	callpa	#(@LR__2929-@LR__2928)>>2,fcache_load_ptr_
21314                 | LR__2928
21314     16 FB C9 FA | 	rdbyte	result1, local08 wz
21318     01 2C 06 51 |  if_ne	add	local08, #1
2131c     F4 FF 9F 5D |  if_ne	jmp	#LR__2928
21320                 | LR__2929
21320     09 2D 82 F1 | 	sub	local08, arg01
21324     16 2F 02 F6 | 	mov	local09, local08
21328     17 25 02 F6 | 	mov	local04, local09
2132c     0F 25 02 F1 | 	add	local04, local01
21330     12 29 C2 FA | 	rdbyte	local06, local04
21334     2F 28 0E F2 | 	cmp	local06, #47 wz
21338     17 31 02 56 |  if_ne	mov	local10, local09
2133c     0F 31 02 51 |  if_ne	add	local10, local01
21340     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
21344     54 01 90 5D |  if_ne	jmp	#LR__2937
21348     15 17 02 F6 | 	mov	arg03, local07
2134c     02 16 66 F0 | 	shl	arg03, #2
21350     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21354     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
21358     0B 15 02 FB | 	rdlong	arg02, arg03
2135c     17 17 02 F6 | 	mov	arg03, local09
21360     0F 13 02 F6 | 	mov	arg01, local01
21364     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21368     E8 49 B0 FD | 	call	#__system__strncmp
2136c     00 FA 4D F2 | 	cmps	result1, #0 wz
21370     28 01 90 5D |  if_ne	jmp	#LR__2937
21374     15 33 02 F6 | 	mov	local11, local07
21378     02 32 66 F0 | 	shl	local11, #2
2137c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
21380     F3 32 02 F1 | 	add	local11, ptr___system__dat__
21384     19 35 02 FB | 	rdlong	local12, local11
21388     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2138c     97 22 48 FB | 	callpa	#(@LR__2931-@LR__2930)>>2,fcache_load_ptr_
21390                 | LR__2930
21390     17 29 02 F6 | 	mov	local06, local09
21394     01 28 06 F1 | 	add	local06, #1
21398     0F 29 02 F1 | 	add	local06, local01
2139c     14 33 C2 FA | 	rdbyte	local11, local06
213a0     2E 32 0E F2 | 	cmp	local11, #46 wz
213a4     2C 00 90 5D |  if_ne	jmp	#LR__2932
213a8     17 33 02 F6 | 	mov	local11, local09
213ac     02 32 06 F1 | 	add	local11, #2
213b0     0F 33 02 F1 | 	add	local11, local01
213b4     19 31 C2 FA | 	rdbyte	local10, local11
213b8     2F 30 0E F2 | 	cmp	local10, #47 wz
213bc     17 37 02 56 |  if_ne	mov	local13, local09
213c0     02 36 06 51 |  if_ne	add	local13, #2
213c4     0F 37 02 51 |  if_ne	add	local13, local01
213c8     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
213cc     01 2E 06 A1 |  if_e	add	local09, #1
213d0     BC FF 9F AD |  if_e	jmp	#LR__2930
213d4                 | LR__2931
213d4                 | LR__2932
213d4     00 22 0E F2 | 	cmp	local03, #0 wz
213d8     11 13 02 56 |  if_ne	mov	arg01, local03
213dc     0F 15 02 56 |  if_ne	mov	arg02, local01
213e0     00 17 06 56 |  if_ne	mov	arg03, #256
213e4     C0 48 B0 5D |  if_ne	call	#__system__strncpy
213e8     0F 15 02 F6 | 	mov	arg02, local01
213ec     17 15 02 F1 | 	add	arg02, local09
213f0     01 14 06 F1 | 	add	arg02, #1
213f4     0F 13 02 F6 | 	mov	arg01, local01
213f8     D4 F5 BF FD | 	call	#__system____builtin_strcpy
213fc     0F 13 02 F6 | 	mov	arg01, local01
21400     09 2D 02 F6 | 	mov	local08, arg01
21404     97 06 48 FB | 	callpa	#(@LR__2934-@LR__2933)>>2,fcache_load_ptr_
21408                 | LR__2933
21408     16 FB C9 FA | 	rdbyte	result1, local08 wz
2140c     01 2C 06 51 |  if_ne	add	local08, #1
21410     F4 FF 9F 5D |  if_ne	jmp	#LR__2933
21414                 | LR__2934
21414     09 2D 82 F1 | 	sub	local08, arg01
21418     16 2F 02 F6 | 	mov	local09, local08
2141c                 | LR__2935
2141c     01 2E 56 F2 | 	cmps	local09, #1 wc
21420     70 00 90 CD |  if_b	jmp	#LR__2936
21424     17 25 02 F6 | 	mov	local04, local09
21428     0F 25 02 F1 | 	add	local04, local01
2142c     12 33 C2 FA | 	rdbyte	local11, local04
21430     2F 32 0E F2 | 	cmp	local11, #47 wz
21434     17 33 02 A6 |  if_e	mov	local11, local09
21438     0F 33 02 A1 |  if_e	add	local11, local01
2143c     19 01 48 AC |  if_e	wrbyte	#0, local11
21440     01 2E 86 A1 |  if_e	sub	local09, #1
21444     D4 FF 9F AD |  if_e	jmp	#LR__2935
21448     17 25 02 F6 | 	mov	local04, local09
2144c     0F 25 02 F1 | 	add	local04, local01
21450     12 33 C2 FA | 	rdbyte	local11, local04
21454     2E 32 0E F2 | 	cmp	local11, #46 wz
21458     38 00 90 5D |  if_ne	jmp	#LR__2936
2145c     02 2E 56 F2 | 	cmps	local09, #2 wc
21460     30 00 90 CD |  if_b	jmp	#LR__2936
21464     17 39 02 F6 | 	mov	local14, local09
21468     01 38 86 F1 | 	sub	local14, #1
2146c     0F 39 02 F1 | 	add	local14, local01
21470     1C 27 C2 FA | 	rdbyte	local05, local14
21474     2F 26 0E F2 | 	cmp	local05, #47 wz
21478     18 00 90 5D |  if_ne	jmp	#LR__2936
2147c     17 25 02 F6 | 	mov	local04, local09
21480     01 24 86 F1 | 	sub	local04, #1
21484     0F 25 02 F1 | 	add	local04, local01
21488     12 01 48 FC | 	wrbyte	#0, local04
2148c     02 2E 86 F1 | 	sub	local09, #2
21490     88 FF 9F FD | 	jmp	#LR__2935
21494                 | LR__2936
21494     1A FB 01 F6 | 	mov	result1, local12
21498     1C 00 90 FD | 	jmp	#LR__2940
2149c                 | LR__2937
2149c                 | LR__2938
2149c     01 2A 06 F1 | 	add	local07, #1
214a0     2C FE 9F FD | 	jmp	#LR__2927
214a4                 | LR__2939
214a4     03 00 00 FF 
214a8     38 E7 05 F1 | 	add	ptr___system__dat__, ##1848
214ac     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
214b0     03 00 00 FF 
214b4     38 E7 85 F1 | 	sub	ptr___system__dat__, ##1848
214b8                 | LR__2940
214b8     A7 F0 03 F6 | 	mov	ptra, fp
214bc     B2 00 A0 FD | 	call	#popregs_
214c0                 | __system____getvfsforfile_ret
214c0     2D 00 64 FD | 	ret
214c4                 | 
214c4                 | __system___basic_open
214c4     05 4A 05 F6 | 	mov	COUNT_, #5
214c8     A8 00 A0 FD | 	call	#pushregs_
214cc     0A 1F 02 F6 | 	mov	local01, arg02
214d0     0B 21 02 F6 | 	mov	local02, arg03
214d4     0C 23 02 F6 | 	mov	local03, arg04
214d8     00 24 06 F6 | 	mov	local04, #0
214dc     A0 47 B0 FD | 	call	#__system____getftab
214e0     FD 26 0A F6 | 	mov	local05, result1 wz
214e4     18 00 90 5D |  if_ne	jmp	#LR__2950
214e8     EE 12 02 F6 | 	mov	arg01, abortchain
214ec     0C 14 06 F6 | 	mov	arg02, #12
214f0     01 16 06 F6 | 	mov	arg03, #1
214f4     DA 00 A0 FD | 	call	#__longjmp
214f8     01 FA 65 F6 | 	neg	result1, #1
214fc     14 01 90 FD | 	jmp	#LR__2959
21500                 | LR__2950
21500     08 26 06 F1 | 	add	local05, #8
21504     13 FB 09 FB | 	rdlong	result1, local05 wz
21508     08 26 86 F1 | 	sub	local05, #8
2150c     13 13 02 56 |  if_ne	mov	arg01, local05
21510     C0 3E B0 5D |  if_ne	call	#__system___closeraw
21514     00 1E 0E F2 | 	cmp	local01, #0 wz
21518     00 20 0E A2 |  if_e	cmp	local02, #0 wz
2151c     00 22 0E A2 |  if_e	cmp	local03, #0 wz
21520     3C 00 90 AD |  if_e	jmp	#LR__2952
21524     0C 12 06 F6 | 	mov	arg01, #12
21528     A8 33 B0 FD | 	call	#__system___gc_alloc_managed
2152c     FD 24 0A F6 | 	mov	local04, result1 wz
21530     18 00 90 5D |  if_ne	jmp	#LR__2951
21534     EE 12 02 F6 | 	mov	arg01, abortchain
21538     07 14 06 F6 | 	mov	arg02, #7
2153c     01 16 06 F6 | 	mov	arg03, #1
21540     DA 00 A0 FD | 	call	#__longjmp
21544     01 FA 65 F6 | 	neg	result1, #1
21548     C8 00 90 FD | 	jmp	#LR__2959
2154c                 | LR__2951
2154c     12 01 68 FC | 	wrlong	#0, local04
21550     04 24 06 F1 | 	add	local04, #4
21554     12 01 68 FC | 	wrlong	#0, local04
21558     04 24 86 F1 | 	sub	local04, #4
2155c     13 25 62 FC | 	wrlong	local04, local05
21560                 | LR__2952
21560     00 1E 0E F2 | 	cmp	local01, #0 wz
21564     20 00 90 AD |  if_e	jmp	#LR__2953
21568     12 1F 62 FC | 	wrlong	local01, local04
2156c     12 FB 01 F6 | 	mov	result1, local04
21570     00 80 04 FF 
21574     00 FA 45 F5 | 	or	result1, ##150994944
21578     1C 26 06 F1 | 	add	local05, #28
2157c     13 FB 61 FC | 	wrlong	result1, local05
21580     1C 26 86 F1 | 	sub	local05, #28
21584     0C 00 90 FD | 	jmp	#LR__2954
21588                 | LR__2953
21588     1C 26 06 F1 | 	add	local05, #28
2158c     13 01 68 FC | 	wrlong	#0, local05
21590     1C 26 86 F1 | 	sub	local05, #28
21594                 | LR__2954
21594     00 20 0E F2 | 	cmp	local02, #0 wz
21598     28 00 90 AD |  if_e	jmp	#LR__2955
2159c     04 24 06 F1 | 	add	local04, #4
215a0     12 21 62 FC | 	wrlong	local02, local04
215a4     04 24 86 F1 | 	sub	local04, #4
215a8     12 FB 01 F6 | 	mov	result1, local04
215ac     00 88 04 FF 
215b0     00 FA 45 F5 | 	or	result1, ##152043520
215b4     20 26 06 F1 | 	add	local05, #32
215b8     13 FB 61 FC | 	wrlong	result1, local05
215bc     20 26 86 F1 | 	sub	local05, #32
215c0     0C 00 90 FD | 	jmp	#LR__2956
215c4                 | LR__2955
215c4     20 26 06 F1 | 	add	local05, #32
215c8     13 01 68 FC | 	wrlong	#0, local05
215cc     20 26 86 F1 | 	sub	local05, #32
215d0                 | LR__2956
215d0     00 22 0E F2 | 	cmp	local03, #0 wz
215d4     24 00 90 AD |  if_e	jmp	#LR__2957
215d8     08 24 06 F1 | 	add	local04, #8
215dc     12 23 62 FC | 	wrlong	local03, local04
215e0     08 24 86 F1 | 	sub	local04, #8
215e4     00 90 04 FF 
215e8     00 24 46 F5 | 	or	local04, ##153092096
215ec     24 26 06 F1 | 	add	local05, #36
215f0     13 25 62 FC | 	wrlong	local04, local05
215f4     24 26 86 F1 | 	sub	local05, #36
215f8     0C 00 90 FD | 	jmp	#LR__2958
215fc                 | LR__2957
215fc     24 26 06 F1 | 	add	local05, #36
21600     13 01 68 FC | 	wrlong	#0, local05
21604     24 26 86 F1 | 	sub	local05, #36
21608                 | LR__2958
21608     08 26 06 F1 | 	add	local05, #8
2160c     13 0F 68 FC | 	wrlong	#7, local05
21610     00 FA 05 F6 | 	mov	result1, #0
21614                 | LR__2959
21614     A7 F0 03 F6 | 	mov	ptra, fp
21618     B2 00 A0 FD | 	call	#popregs_
2161c                 | __system___basic_open_ret
2161c     2D 00 64 FD | 	ret
21620                 | 
21620                 | __system___basic_open_string
21620     04 4A 05 F6 | 	mov	COUNT_, #4
21624     A8 00 A0 FD | 	call	#pushregs_
21628     0A 1F 02 F6 | 	mov	local01, arg02
2162c     0B 21 02 F6 | 	mov	local02, arg03
21630     4C 46 B0 FD | 	call	#__system____getftab
21634     FD 22 0A F6 | 	mov	local03, result1 wz
21638     18 00 90 5D |  if_ne	jmp	#LR__2960
2163c     EE 12 02 F6 | 	mov	arg01, abortchain
21640     0C 14 06 F6 | 	mov	arg02, #12
21644     01 16 06 F6 | 	mov	arg03, #1
21648     DA 00 A0 FD | 	call	#__longjmp
2164c     01 FA 65 F6 | 	neg	result1, #1
21650     58 00 90 FD | 	jmp	#LR__2962
21654                 | LR__2960
21654     08 22 06 F1 | 	add	local03, #8
21658     11 19 0A FB | 	rdlong	arg04, local03 wz
2165c     08 22 86 F1 | 	sub	local03, #8
21660     11 13 02 56 |  if_ne	mov	arg01, local03
21664     6C 3D B0 5D |  if_ne	call	#__system___closeraw
21668     0F 15 02 F6 | 	mov	arg02, local01
2166c     10 17 02 F6 | 	mov	arg03, local02
21670     11 13 02 F6 | 	mov	arg01, local03
21674     B6 19 06 F6 | 	mov	arg04, #438
21678     54 3A B0 FD | 	call	#__system___openraw
2167c     FD 24 02 F6 | 	mov	local04, result1
21680     00 24 56 F2 | 	cmps	local04, #0 wc
21684     20 00 90 3D |  if_ae	jmp	#LR__2961
21688     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2168c     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
21690     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
21694     EE 12 02 F6 | 	mov	arg01, abortchain
21698     01 16 06 F6 | 	mov	arg03, #1
2169c     DA 00 A0 FD | 	call	#__longjmp
216a0     01 FA 65 F6 | 	neg	result1, #1
216a4     04 00 90 FD | 	jmp	#LR__2962
216a8                 | LR__2961
216a8     12 FB 01 F6 | 	mov	result1, local04
216ac                 | LR__2962
216ac     A7 F0 03 F6 | 	mov	ptra, fp
216b0     B2 00 A0 FD | 	call	#popregs_
216b4                 | __system___basic_open_string_ret
216b4     2D 00 64 FD | 	ret
216b8                 | 
216b8                 | __system___basic_print_char
216b8     03 4A 05 F6 | 	mov	COUNT_, #3
216bc     A8 00 A0 FD | 	call	#pushregs_
216c0     0A 1F 02 F6 | 	mov	local01, arg02
216c4     0C 4D B0 FD | 	call	#__system___gettxfunc
216c8     FD 20 0A F6 | 	mov	local02, result1 wz
216cc     00 FA 05 A6 |  if_e	mov	result1, #0
216d0     30 00 90 AD |  if_e	jmp	#LR__2970
216d4     10 23 02 F6 | 	mov	local03, local02
216d8     13 20 46 F7 | 	zerox	local02, #19
216dc     14 22 46 F0 | 	shr	local03, #20
216e0     02 22 66 F0 | 	shl	local03, #2
216e4     ED 22 02 F1 | 	add	local03, __methods__
216e8     11 23 02 FB | 	rdlong	local03, local03
216ec     0F 13 02 F6 | 	mov	arg01, local01
216f0     F2 1E 02 F6 | 	mov	local01, objptr
216f4     10 E5 01 F6 | 	mov	objptr, local02
216f8     2D 22 62 FD | 	call	local03
216fc     0F E5 01 F6 | 	mov	objptr, local01
21700     01 FA 05 F6 | 	mov	result1, #1
21704                 | LR__2970
21704     A7 F0 03 F6 | 	mov	ptra, fp
21708     B2 00 A0 FD | 	call	#popregs_
2170c                 | __system___basic_print_char_ret
2170c     2D 00 64 FD | 	ret
21710                 | 
21710                 | __system___basic_print_string
21710     03 4A 05 F6 | 	mov	COUNT_, #3
21714     A8 00 A0 FD | 	call	#pushregs_
21718     0A 1F 02 F6 | 	mov	local01, arg02
2171c     0B 21 02 F6 | 	mov	local02, arg03
21720     B0 4C B0 FD | 	call	#__system___gettxfunc
21724     FD 22 0A F6 | 	mov	local03, result1 wz
21728     00 FA 05 A6 |  if_e	mov	result1, #0
2172c     18 00 90 AD |  if_e	jmp	#LR__2980
21730     00 1E 0E F2 | 	cmp	local01, #0 wz
21734     00 FA 05 A6 |  if_e	mov	result1, #0
21738     11 13 02 56 |  if_ne	mov	arg01, local03
2173c     10 15 02 56 |  if_ne	mov	arg02, local02
21740     0F 17 02 56 |  if_ne	mov	arg03, local01
21744     08 02 B0 5D |  if_ne	call	#__system___fmtstr
21748                 | LR__2980
21748     A7 F0 03 F6 | 	mov	ptra, fp
2174c     B2 00 A0 FD | 	call	#popregs_
21750                 | __system___basic_print_string_ret
21750     2D 00 64 FD | 	ret
21754                 | 
21754                 | __system___basic_print_integer
21754     04 4A 05 F6 | 	mov	COUNT_, #4
21758     A8 00 A0 FD | 	call	#pushregs_
2175c     0A 1F 02 F6 | 	mov	local01, arg02
21760     0B 21 02 F6 | 	mov	local02, arg03
21764     0C 23 02 F6 | 	mov	local03, arg04
21768     68 4C B0 FD | 	call	#__system___gettxfunc
2176c     FD 24 0A F6 | 	mov	local04, result1 wz
21770     00 FA 05 A6 |  if_e	mov	result1, #0
21774     12 13 02 56 |  if_ne	mov	arg01, local04
21778     10 15 02 56 |  if_ne	mov	arg02, local02
2177c     0F 17 02 56 |  if_ne	mov	arg03, local01
21780     11 19 02 56 |  if_ne	mov	arg04, local03
21784     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
21788     A7 F0 03 F6 | 	mov	ptra, fp
2178c     B2 00 A0 FD | 	call	#popregs_
21790                 | __system___basic_print_integer_ret
21790     2D 00 64 FD | 	ret
21794                 | 
21794                 | __system___basic_print_unsigned
21794     03 4A 05 F6 | 	mov	COUNT_, #3
21798     A8 00 A0 FD | 	call	#pushregs_
2179c     0A 1F 02 F6 | 	mov	local01, arg02
217a0     0B 21 02 F6 | 	mov	local02, arg03
217a4     0C 23 02 F6 | 	mov	local03, arg04
217a8     28 4C B0 FD | 	call	#__system___gettxfunc
217ac     FD 12 0A F6 | 	mov	arg01, result1 wz
217b0     00 FA 05 A6 |  if_e	mov	result1, #0
217b4     3A 20 26 54 |  if_ne	bith	local02, #58
217b8     10 15 02 56 |  if_ne	mov	arg02, local02
217bc     0F 17 02 56 |  if_ne	mov	arg03, local01
217c0     11 19 02 56 |  if_ne	mov	arg04, local03
217c4     74 02 B0 5D |  if_ne	call	#__system___fmtnum
217c8     A7 F0 03 F6 | 	mov	ptra, fp
217cc     B2 00 A0 FD | 	call	#popregs_
217d0                 | __system___basic_print_unsigned_ret
217d0     2D 00 64 FD | 	ret
217d4                 | 
217d4                 | __system___basic_get_char
217d4     03 4A 05 F6 | 	mov	COUNT_, #3
217d8     A8 00 A0 FD | 	call	#pushregs_
217dc     38 4C B0 FD | 	call	#__system___getrxfunc
217e0     FD 1E 0A F6 | 	mov	local01, result1 wz
217e4     01 FA 65 A6 |  if_e	neg	result1, #1
217e8     28 00 90 AD |  if_e	jmp	#LR__2990
217ec     0F 21 02 F6 | 	mov	local02, local01
217f0     13 1E 46 F7 | 	zerox	local01, #19
217f4     14 20 46 F0 | 	shr	local02, #20
217f8     02 20 66 F0 | 	shl	local02, #2
217fc     ED 20 02 F1 | 	add	local02, __methods__
21800     10 21 02 FB | 	rdlong	local02, local02
21804     F2 22 02 F6 | 	mov	local03, objptr
21808     0F E5 01 F6 | 	mov	objptr, local01
2180c     2D 20 62 FD | 	call	local02
21810     11 E5 01 F6 | 	mov	objptr, local03
21814                 | LR__2990
21814     A7 F0 03 F6 | 	mov	ptra, fp
21818     B2 00 A0 FD | 	call	#popregs_
2181c                 | __system___basic_get_char_ret
2181c     2D 00 64 FD | 	ret
21820                 | 
21820                 | __system___basic_put
21820     04 4A 05 F6 | 	mov	COUNT_, #4
21824     A8 00 A0 FD | 	call	#pushregs_
21828     0D 1F 02 F6 | 	mov	local01, arg05
2182c     0F 19 02 FD | 	qmul	arg04, local01
21830     09 21 02 F6 | 	mov	local02, arg01
21834     0B 23 02 F6 | 	mov	local03, arg03
21838     00 14 0E F2 | 	cmp	arg02, #0 wz
2183c     01 14 86 51 |  if_ne	sub	arg02, #1
21840     10 13 02 56 |  if_ne	mov	arg01, local02
21844     00 16 06 56 |  if_ne	mov	arg03, #0
21848     18 24 62 FD | 	getqx	local04
2184c     78 42 B0 5D |  if_ne	call	#__system__lseek
21850     11 15 02 F6 | 	mov	arg02, local03
21854     12 17 02 F6 | 	mov	arg03, local04
21858     10 13 02 F6 | 	mov	arg01, local02
2185c     B4 41 B0 FD | 	call	#__system__write
21860     FD 24 02 F6 | 	mov	local04, result1
21864     01 24 56 F2 | 	cmps	local04, #1 wc
21868     10 00 90 CD |  if_b	jmp	#LR__3000
2186c     12 7D 02 F6 | 	mov	muldiva_, local04
21870     0F 7F 02 F6 | 	mov	muldivb_, local01
21874     BA 00 A0 FD | 	call	#divide_
21878     3F 25 02 F6 | 	mov	local04, muldivb_
2187c                 | LR__3000
2187c     12 FB 01 F6 | 	mov	result1, local04
21880     A7 F0 03 F6 | 	mov	ptra, fp
21884     B2 00 A0 FD | 	call	#popregs_
21888                 | __system___basic_put_ret
21888     2D 00 64 FD | 	ret
2188c                 | 
2188c                 | __system___basic_get
2188c     04 4A 05 F6 | 	mov	COUNT_, #4
21890     A8 00 A0 FD | 	call	#pushregs_
21894     0D 1F 02 F6 | 	mov	local01, arg05
21898     0F 19 02 FD | 	qmul	arg04, local01
2189c     09 21 02 F6 | 	mov	local02, arg01
218a0     0B 23 02 F6 | 	mov	local03, arg03
218a4     00 14 0E F2 | 	cmp	arg02, #0 wz
218a8     01 14 86 51 |  if_ne	sub	arg02, #1
218ac     10 13 02 56 |  if_ne	mov	arg01, local02
218b0     00 16 06 56 |  if_ne	mov	arg03, #0
218b4     18 24 62 FD | 	getqx	local04
218b8     0C 42 B0 5D |  if_ne	call	#__system__lseek
218bc     11 15 02 F6 | 	mov	arg02, local03
218c0     12 17 02 F6 | 	mov	arg03, local04
218c4     10 13 02 F6 | 	mov	arg01, local02
218c8     84 41 B0 FD | 	call	#__system__read
218cc     FD 24 02 F6 | 	mov	local04, result1
218d0     01 24 56 F2 | 	cmps	local04, #1 wc
218d4     10 00 90 CD |  if_b	jmp	#LR__3010
218d8     12 7D 02 F6 | 	mov	muldiva_, local04
218dc     0F 7F 02 F6 | 	mov	muldivb_, local01
218e0     BA 00 A0 FD | 	call	#divide_
218e4     3F 25 02 F6 | 	mov	local04, muldivb_
218e8                 | LR__3010
218e8     12 FB 01 F6 | 	mov	result1, local04
218ec     A7 F0 03 F6 | 	mov	ptra, fp
218f0     B2 00 A0 FD | 	call	#popregs_
218f4                 | __system___basic_get_ret
218f4     2D 00 64 FD | 	ret
218f8                 | 
218f8                 | __system___fmtchar
218f8     00 4A 05 F6 | 	mov	COUNT_, #0
218fc     A8 00 A0 FD | 	call	#pushregs_
21900     10 F0 07 F1 | 	add	ptra, #16
21904     04 4E 05 F1 | 	add	fp, #4
21908     A7 12 62 FC | 	wrlong	arg01, fp
2190c     04 4E 05 F1 | 	add	fp, #4
21910     A7 14 62 FC | 	wrlong	arg02, fp
21914     04 4E 05 F1 | 	add	fp, #4
21918     A7 16 62 FC | 	wrlong	arg03, fp
2191c     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
21920     A7 16 62 FC | 	wrlong	arg03, fp
21924     08 4E 85 F1 | 	sub	fp, #8
21928     A7 12 02 FB | 	rdlong	arg01, fp
2192c     04 4E 05 F1 | 	add	fp, #4
21930     A7 14 02 FB | 	rdlong	arg02, fp
21934     04 4E 05 F1 | 	add	fp, #4
21938     A7 16 02 F6 | 	mov	arg03, fp
2193c     0C 4E 85 F1 | 	sub	fp, #12
21940     0C 00 B0 FD | 	call	#__system___fmtstr
21944     A7 F0 03 F6 | 	mov	ptra, fp
21948     B2 00 A0 FD | 	call	#popregs_
2194c                 | __system___fmtchar_ret
2194c     2D 00 64 FD | 	ret
21950                 | 
21950                 | __system___fmtstr
21950     09 4A 05 F6 | 	mov	COUNT_, #9
21954     A8 00 A0 FD | 	call	#pushregs_
21958     09 1F 02 F6 | 	mov	local01, arg01
2195c     0A 21 02 F6 | 	mov	local02, arg02
21960     0B 23 02 F6 | 	mov	local03, arg03
21964     10 19 E2 F8 | 	getbyte	arg04, local02, #0
21968     11 13 02 F6 | 	mov	arg01, local03
2196c     09 25 02 F6 | 	mov	local04, arg01
21970     97 06 48 FB | 	callpa	#(@LR__3021-@LR__3020)>>2,fcache_load_ptr_
21974                 | LR__3020
21974     12 FB C9 FA | 	rdbyte	result1, local04 wz
21978     01 24 06 51 |  if_ne	add	local04, #1
2197c     F4 FF 9F 5D |  if_ne	jmp	#LR__3020
21980                 | LR__3021
21980     09 25 82 F1 | 	sub	local04, arg01
21984     00 18 0E F2 | 	cmp	arg04, #0 wz
21988     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
2198c     10 15 02 F6 | 	mov	arg02, local02
21990     12 17 02 F6 | 	mov	arg03, local04
21994     0F 13 02 F6 | 	mov	arg01, local01
21998     02 18 06 F6 | 	mov	arg04, #2
2199c     D4 46 B0 FD | 	call	#__system___fmtpad
219a0     FD 26 02 F6 | 	mov	local05, result1
219a4     00 26 56 F2 | 	cmps	local05, #0 wc
219a8     13 FB 01 C6 |  if_b	mov	result1, local05
219ac     80 00 90 CD |  if_b	jmp	#LR__3024
219b0     01 24 56 F2 | 	cmps	local04, #1 wc
219b4     50 00 90 CD |  if_b	jmp	#LR__3023
219b8     12 29 02 F6 | 	mov	local06, local04
219bc                 | LR__3022
219bc     0F 2B 02 F6 | 	mov	local07, local01
219c0     0F 2D 02 F6 | 	mov	local08, local01
219c4     13 2A 46 F7 | 	zerox	local07, #19
219c8     14 2C 46 F0 | 	shr	local08, #20
219cc     02 2C 66 F0 | 	shl	local08, #2
219d0     ED 2C 02 F1 | 	add	local08, __methods__
219d4     16 2D 02 FB | 	rdlong	local08, local08
219d8     11 13 C2 FA | 	rdbyte	arg01, local03
219dc     F2 2E 02 F6 | 	mov	local09, objptr
219e0     15 E5 01 F6 | 	mov	objptr, local07
219e4     01 22 06 F1 | 	add	local03, #1
219e8     2D 2C 62 FD | 	call	local08
219ec     17 E5 01 F6 | 	mov	objptr, local09
219f0     FD 2E 02 F6 | 	mov	local09, result1
219f4     00 2E 56 F2 | 	cmps	local09, #0 wc
219f8     17 FB 01 C6 |  if_b	mov	result1, local09
219fc     30 00 90 CD |  if_b	jmp	#LR__3024
21a00     17 27 02 F1 | 	add	local05, local09
21a04     ED 29 6E FB | 	djnz	local06, #LR__3022
21a08                 | LR__3023
21a08     10 15 02 F6 | 	mov	arg02, local02
21a0c     12 17 02 F6 | 	mov	arg03, local04
21a10     0F 13 02 F6 | 	mov	arg01, local01
21a14     01 18 06 F6 | 	mov	arg04, #1
21a18     58 46 B0 FD | 	call	#__system___fmtpad
21a1c     FD 2E 02 F6 | 	mov	local09, result1
21a20     00 2E 56 F2 | 	cmps	local09, #0 wc
21a24     17 FB 01 C6 |  if_b	mov	result1, local09
21a28     17 27 02 31 |  if_ae	add	local05, local09
21a2c     13 FB 01 36 |  if_ae	mov	result1, local05
21a30                 | LR__3024
21a30     A7 F0 03 F6 | 	mov	ptra, fp
21a34     B2 00 A0 FD | 	call	#popregs_
21a38                 | __system___fmtstr_ret
21a38     2D 00 64 FD | 	ret
21a3c                 | 
21a3c                 | __system___fmtnum
21a3c     0B 4A 05 F6 | 	mov	COUNT_, #11
21a40     A8 00 A0 FD | 	call	#pushregs_
21a44     09 1F 02 F6 | 	mov	local01, arg01
21a48     0A 21 02 F6 | 	mov	local02, arg02
21a4c     0B 23 02 F6 | 	mov	local03, arg03
21a50     0C 25 02 F6 | 	mov	local04, arg04
21a54     F8 27 02 F6 | 	mov	local05, ptra
21a58     13 29 02 F6 | 	mov	local06, local05
21a5c     00 2A 06 F6 | 	mov	local07, #0
21a60     10 2D 02 F6 | 	mov	local08, local02
21a64     10 2C 46 F0 | 	shr	local08, #16
21a68     3F 2C 06 F5 | 	and	local08, #63
21a6c     10 2F E2 F8 | 	getbyte	local09, local02, #0
21a70     10 31 02 F6 | 	mov	local10, local02
21a74     1A 30 46 F0 | 	shr	local10, #26
21a78     03 30 06 F5 | 	and	local10, #3
21a7c     18 33 02 F6 | 	mov	local11, local10
21a80     01 2C 56 F2 | 	cmps	local08, #1 wc
21a84     44 F0 07 F1 | 	add	ptra, #68
21a88     01 2C 86 31 |  if_ae	sub	local08, #1
21a8c     41 2E 56 F2 | 	cmps	local09, #65 wc
21a90     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
21a94     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
21a98     03 32 0E F2 | 	cmp	local11, #3 wz
21a9c     00 32 06 A6 |  if_e	mov	local11, #0
21aa0     00 22 56 52 |  if_ne	cmps	local03, #0 wc
21aa4     04 32 06 46 |  if_c_and_nz	mov	local11, #4
21aa8     11 23 62 46 |  if_c_and_nz	neg	local03, local03
21aac     00 32 0E F2 | 	cmp	local11, #0 wz
21ab0     4C 00 90 AD |  if_e	jmp	#LR__3033
21ab4     01 2A 06 F6 | 	mov	local07, #1
21ab8     17 2D 0A F2 | 	cmp	local08, local09 wz
21abc     18 00 90 5D |  if_ne	jmp	#LR__3031
21ac0     05 2C 6E FB | 	djnz	local08, #LR__3030
21ac4     0F 13 02 F6 | 	mov	arg01, local01
21ac8     10 15 02 F6 | 	mov	arg02, local02
21acc     23 16 06 F6 | 	mov	arg03, #35
21ad0     24 FE BF FD | 	call	#__system___fmtchar
21ad4     88 00 90 FD | 	jmp	#LR__3037
21ad8                 | LR__3030
21ad8                 | LR__3031
21ad8     02 32 0E F2 | 	cmp	local11, #2 wz
21adc     14 31 02 A6 |  if_e	mov	local10, local06
21ae0     01 28 06 A1 |  if_e	add	local06, #1
21ae4     18 41 48 AC |  if_e	wrbyte	#32, local10
21ae8     14 00 90 AD |  if_e	jmp	#LR__3032
21aec     04 32 0E F2 | 	cmp	local11, #4 wz
21af0     14 5B 48 AC |  if_e	wrbyte	#45, local06
21af4     01 28 06 A1 |  if_e	add	local06, #1
21af8     14 57 48 5C |  if_ne	wrbyte	#43, local06
21afc     01 28 06 51 |  if_ne	add	local06, #1
21b00                 | LR__3032
21b00                 | LR__3033
21b00     14 13 02 F6 | 	mov	arg01, local06
21b04     11 15 02 F6 | 	mov	arg02, local03
21b08     12 17 02 F6 | 	mov	arg03, local04
21b0c     16 19 02 F6 | 	mov	arg04, local08
21b10     00 1A 06 F6 | 	mov	arg05, #0
21b14     1D 20 2E F4 | 	testbn	local02, #29 wz
21b18     01 1A 06 56 |  if_ne	mov	arg05, #1
21b1c     1C 46 B0 FD | 	call	#__system___uitoa
21b20     FD 2A 02 F1 | 	add	local07, result1
21b24     17 2B 5A F2 | 	cmps	local07, local09 wcz
21b28     24 00 90 ED |  if_be	jmp	#LR__3036
21b2c     97 0E 48 FB | 	callpa	#(@LR__3035-@LR__3034)>>2,fcache_load_ptr_
21b30                 | LR__3034
21b30     17 31 02 F6 | 	mov	local10, local09
21b34     01 30 56 F2 | 	cmps	local10, #1 wc
21b38     01 2E 86 F1 | 	sub	local09, #1
21b3c     14 31 02 36 |  if_ae	mov	local10, local06
21b40     01 28 06 31 |  if_ae	add	local06, #1
21b44     18 47 48 3C |  if_ae	wrbyte	#35, local10
21b48     E4 FF 9F 3D |  if_ae	jmp	#LR__3034
21b4c                 | LR__3035
21b4c     14 01 48 FC | 	wrbyte	#0, local06
21b50                 | LR__3036
21b50     0F 13 02 F6 | 	mov	arg01, local01
21b54     10 15 02 F6 | 	mov	arg02, local02
21b58     13 17 02 F6 | 	mov	arg03, local05
21b5c     F0 FD BF FD | 	call	#__system___fmtstr
21b60                 | LR__3037
21b60     A7 F0 03 F6 | 	mov	ptra, fp
21b64     B2 00 A0 FD | 	call	#popregs_
21b68                 | __system___fmtnum_ret
21b68     2D 00 64 FD | 	ret
21b6c                 | 
21b6c                 | __system___fmtfloat
21b6c     10 4A 05 F6 | 	mov	COUNT_, #16
21b70     A8 00 A0 FD | 	call	#pushregs_
21b74     24 F1 07 F1 | 	add	ptra, #292
21b78     04 4E 05 F1 | 	add	fp, #4
21b7c     A7 12 62 FC | 	wrlong	arg01, fp
21b80     04 4E 05 F1 | 	add	fp, #4
21b84     A7 14 62 FC | 	wrlong	arg02, fp
21b88     04 4E 05 F1 | 	add	fp, #4
21b8c     A7 16 62 FC | 	wrlong	arg03, fp
21b90     04 4E 05 F1 | 	add	fp, #4
21b94     A7 18 62 FC | 	wrlong	arg04, fp
21b98     0C 4E 05 F1 | 	add	fp, #12
21b9c     A7 14 68 FC | 	wrlong	#10, fp
21ba0     08 4E 05 F1 | 	add	fp, #8
21ba4     A7 00 68 FC | 	wrlong	#0, fp
21ba8     08 4E 05 F1 | 	add	fp, #8
21bac     A7 00 68 FC | 	wrlong	#0, fp
21bb0     08 4E 05 F1 | 	add	fp, #8
21bb4     A7 00 68 FC | 	wrlong	#0, fp
21bb8     04 4E 05 F1 | 	add	fp, #4
21bbc     A7 04 68 FC | 	wrlong	#2, fp
21bc0     04 4E 05 F1 | 	add	fp, #4
21bc4     A7 00 68 FC | 	wrlong	#0, fp
21bc8     04 4E 05 F1 | 	add	fp, #4
21bcc     A7 00 68 FC | 	wrlong	#0, fp
21bd0     04 4E 05 F1 | 	add	fp, #4
21bd4     A7 00 68 FC | 	wrlong	#0, fp
21bd8     04 4E 05 F1 | 	add	fp, #4
21bdc     A7 00 68 FC | 	wrlong	#0, fp
21be0     18 4E 05 F1 | 	add	fp, #24
21be4     A7 00 68 FC | 	wrlong	#0, fp
21be8     68 4E 05 F1 | 	add	fp, #104
21bec     A7 1E 02 F6 | 	mov	local01, fp
21bf0     08 4E 85 F1 | 	sub	fp, #8
21bf4     A7 1E 62 FC | 	wrlong	local01, fp
21bf8     04 4E 05 F1 | 	add	fp, #4
21bfc     A7 1E 62 FC | 	wrlong	local01, fp
21c00     BC 4E 85 F1 | 	sub	fp, #188
21c04     A7 1E 02 FB | 	rdlong	local01, fp
21c08     10 1E 46 F0 | 	shr	local01, #16
21c0c     3F 1E 06 F5 | 	and	local01, #63
21c10     B0 4E 05 F1 | 	add	fp, #176
21c14     A7 1E 62 FC | 	wrlong	local01, fp
21c18     B0 4E 85 F1 | 	sub	fp, #176
21c1c     A7 1E 02 FB | 	rdlong	local01, fp
21c20     1C 1E 46 F0 | 	shr	local01, #28
21c24     01 1E 06 F5 | 	and	local01, #1
21c28     08 4F 05 F1 | 	add	fp, #264
21c2c     A7 1E 62 FC | 	wrlong	local01, fp
21c30     58 4E 85 F1 | 	sub	fp, #88
21c34     A7 1E 0A FB | 	rdlong	local01, fp wz
21c38     B8 4E 85 F1 | 	sub	fp, #184
21c3c     3C 00 90 5D |  if_ne	jmp	#LR__3041
21c40     10 4E 05 F1 | 	add	fp, #16
21c44     A7 1E 02 FB | 	rdlong	local01, fp
21c48     10 4E 85 F1 | 	sub	fp, #16
21c4c     61 1E 0E F2 | 	cmp	local01, #97 wz
21c50     18 00 90 5D |  if_ne	jmp	#LR__3040
21c54     B8 4E 05 F1 | 	add	fp, #184
21c58     A7 1A 68 FC | 	wrlong	#13, fp
21c5c     84 4E 85 F1 | 	sub	fp, #132
21c60     A7 02 68 FC | 	wrlong	#1, fp
21c64     34 4E 85 F1 | 	sub	fp, #52
21c68     24 00 90 FD | 	jmp	#LR__3042
21c6c                 | LR__3040
21c6c     B8 4E 05 F1 | 	add	fp, #184
21c70     A7 0C 68 FC | 	wrlong	#6, fp
21c74     B8 4E 85 F1 | 	sub	fp, #184
21c78     14 00 90 FD | 	jmp	#LR__3042
21c7c                 | LR__3041
21c7c     B8 4E 05 F1 | 	add	fp, #184
21c80     A7 1E 02 FB | 	rdlong	local01, fp
21c84     01 1E 86 F1 | 	sub	local01, #1
21c88     A7 1E 62 FC | 	wrlong	local01, fp
21c8c     B8 4E 85 F1 | 	sub	fp, #184
21c90                 | LR__3042
21c90     08 4E 05 F1 | 	add	fp, #8
21c94     A7 1E 02 FB | 	rdlong	local01, fp
21c98     16 1E 46 F0 | 	shr	local01, #22
21c9c     03 1E 06 F5 | 	and	local01, #3
21ca0     04 4F 05 F1 | 	add	fp, #260
21ca4     A7 1E 62 FC | 	wrlong	local01, fp
21ca8     04 4F 85 F1 | 	sub	fp, #260
21cac     A7 1E 02 FB | 	rdlong	local01, fp
21cb0     1D 1E 46 F0 | 	shr	local01, #29
21cb4     01 1E 06 F5 | 	and	local01, #1
21cb8     B4 4E 05 F1 | 	add	fp, #180
21cbc     A7 1E 62 FC | 	wrlong	local01, fp
21cc0     B4 4E 85 F1 | 	sub	fp, #180
21cc4     A7 1E 02 FB | 	rdlong	local01, fp
21cc8     0F 1F EA F8 | 	getbyte	local01, local01, #1
21ccc     60 4E 05 F1 | 	add	fp, #96
21cd0     A7 1E 62 FC | 	wrlong	local01, fp
21cd4     60 4E 85 F1 | 	sub	fp, #96
21cd8     A7 1E 02 FB | 	rdlong	local01, fp
21cdc     0F 1F E2 F8 | 	getbyte	local01, local01, #0
21ce0     64 4E 05 F1 | 	add	fp, #100
21ce4     A7 1E 62 FC | 	wrlong	local01, fp
21ce8     00 1E 06 F6 | 	mov	local01, #0
21cec     5C 4E 85 F1 | 	sub	fp, #92
21cf0     A7 1A 02 FB | 	rdlong	arg05, fp
21cf4     65 1A 0E F2 | 	cmp	arg05, #101 wz
21cf8     01 1E 06 A6 |  if_e	mov	local01, #1
21cfc     14 4E 05 F1 | 	add	fp, #20
21d00     A7 1E 62 FC | 	wrlong	local01, fp
21d04     98 4E 05 F1 | 	add	fp, #152
21d08     A7 20 0A FB | 	rdlong	local02, fp wz
21d0c     45 1E 06 56 |  if_ne	mov	local01, #69
21d10     65 1E 06 A6 |  if_e	mov	local01, #101
21d14     8C 4E 85 F1 | 	sub	fp, #140
21d18     A7 1E 62 FC | 	wrlong	local01, fp
21d1c     20 4E 85 F1 | 	sub	fp, #32
21d20     A7 1E 02 FB | 	rdlong	local01, fp
21d24     10 4E 85 F1 | 	sub	fp, #16
21d28     61 1E 0E F2 | 	cmp	local01, #97 wz
21d2c     4C 00 90 5D |  if_ne	jmp	#LR__3043
21d30     24 4E 05 F1 | 	add	fp, #36
21d34     A7 02 68 FC | 	wrlong	#1, fp
21d38     98 4E 05 F1 | 	add	fp, #152
21d3c     A7 20 0A FB | 	rdlong	local02, fp wz
21d40     50 1E 06 56 |  if_ne	mov	local01, #80
21d44     70 1E 06 A6 |  if_e	mov	local01, #112
21d48     8C 4E 85 F1 | 	sub	fp, #140
21d4c     A7 1E 62 FC | 	wrlong	local01, fp
21d50     14 4E 85 F1 | 	sub	fp, #20
21d54     A7 04 68 FC | 	wrlong	#2, fp
21d58     1C 4E 05 F1 | 	add	fp, #28
21d5c     A7 02 68 FC | 	wrlong	#1, fp
21d60     84 4E 05 F1 | 	add	fp, #132
21d64     A7 20 0A FB | 	rdlong	local02, fp wz
21d68     58 1E 06 56 |  if_ne	mov	local01, #88
21d6c     78 1E 06 A6 |  if_e	mov	local01, #120
21d70     7C 4E 85 F1 | 	sub	fp, #124
21d74     A7 1E 62 FC | 	wrlong	local01, fp
21d78     40 4E 85 F1 | 	sub	fp, #64
21d7c                 | LR__3043
21d7c     10 4E 05 F1 | 	add	fp, #16
21d80     A7 1E 02 FB | 	rdlong	local01, fp
21d84     10 4E 85 F1 | 	sub	fp, #16
21d88     23 1E 0E F2 | 	cmp	local01, #35 wz
21d8c     3C 00 90 5D |  if_ne	jmp	#LR__3046
21d90     48 4E 05 F1 | 	add	fp, #72
21d94     A7 02 68 FC | 	wrlong	#1, fp
21d98     C8 4E 05 F1 | 	add	fp, #200
21d9c     A7 1E 0A FB | 	rdlong	local01, fp wz
21da0     10 4F 85 F1 | 	sub	fp, #272
21da4     18 00 90 AD |  if_e	jmp	#LR__3044
21da8     10 4E 05 F1 | 	add	fp, #16
21dac     A7 CC 68 FC | 	wrlong	#102, fp
21db0     00 4F 05 F1 | 	add	fp, #256
21db4     A7 00 68 FC | 	wrlong	#0, fp
21db8     10 4F 85 F1 | 	sub	fp, #272
21dbc     0C 00 90 FD | 	jmp	#LR__3045
21dc0                 | LR__3044
21dc0     10 4F 05 F1 | 	add	fp, #272
21dc4     A7 02 68 FC | 	wrlong	#1, fp
21dc8     10 4F 85 F1 | 	sub	fp, #272
21dcc                 | LR__3045
21dcc                 | LR__3046
21dcc     08 4E 05 F1 | 	add	fp, #8
21dd0     A7 1E 02 FB | 	rdlong	local01, fp
21dd4     1A 1E 46 F0 | 	shr	local01, #26
21dd8     03 1E 06 F5 | 	and	local01, #3
21ddc     5C 4E 05 F1 | 	add	fp, #92
21de0     A7 1E 62 FC | 	wrlong	local01, fp
21de4     58 4E 85 F1 | 	sub	fp, #88
21de8     A7 FA 01 FB | 	rdlong	result1, fp
21dec     0C 4E 85 F1 | 	sub	fp, #12
21df0     1F FA 4D F0 | 	shr	result1, #31 wz
21df4     20 00 90 AD |  if_e	jmp	#LR__3047
21df8     2C 4E 05 F1 | 	add	fp, #44
21dfc     A7 5A 68 FC | 	wrlong	#45, fp
21e00     20 4E 85 F1 | 	sub	fp, #32
21e04     A7 FA 01 FB | 	rdlong	result1, fp
21e08     1F FA E5 F4 | 	bitnot	result1, #31
21e0c     A7 FA 61 FC | 	wrlong	result1, fp
21e10     0C 4E 85 F1 | 	sub	fp, #12
21e14     3C 00 90 FD | 	jmp	#LR__3049
21e18                 | LR__3047
21e18     64 4E 05 F1 | 	add	fp, #100
21e1c     A7 1E 02 FB | 	rdlong	local01, fp
21e20     64 4E 85 F1 | 	sub	fp, #100
21e24     01 1E 0E F2 | 	cmp	local01, #1 wz
21e28     2C 4E 05 A1 |  if_e	add	fp, #44
21e2c     A7 56 68 AC |  if_e	wrlong	#43, fp
21e30     2C 4E 85 A1 |  if_e	sub	fp, #44
21e34     1C 00 90 AD |  if_e	jmp	#LR__3048
21e38     64 4E 05 F1 | 	add	fp, #100
21e3c     A7 1E 02 FB | 	rdlong	local01, fp
21e40     64 4E 85 F1 | 	sub	fp, #100
21e44     02 1E 0E F2 | 	cmp	local01, #2 wz
21e48     2C 4E 05 A1 |  if_e	add	fp, #44
21e4c     A7 40 68 AC |  if_e	wrlong	#32, fp
21e50     2C 4E 85 A1 |  if_e	sub	fp, #44
21e54                 | LR__3048
21e54                 | LR__3049
21e54     08 4E 05 F1 | 	add	fp, #8
21e58     A7 1E 02 FB | 	rdlong	local01, fp
21e5c     18 1E 46 F0 | 	shr	local01, #24
21e60     03 1E 06 F5 | 	and	local01, #3
21e64     3C 4E 05 F1 | 	add	fp, #60
21e68     A7 1E 62 FC | 	wrlong	local01, fp
21e6c     00 1E 06 F6 | 	mov	local01, #0
21e70     18 4E 85 F1 | 	sub	fp, #24
21e74     A7 22 0A FB | 	rdlong	local03, fp wz
21e78     2C 4E 85 F1 | 	sub	fp, #44
21e7c     18 00 90 5D |  if_ne	jmp	#LR__3050
21e80     1C 4E 05 F1 | 	add	fp, #28
21e84     A7 24 02 FB | 	rdlong	local04, fp
21e88     1C 4E 85 F1 | 	sub	fp, #28
21e8c     12 27 02 F6 | 	mov	local05, local04
21e90     0A 26 0E F2 | 	cmp	local05, #10 wz
21e94     04 00 90 AD |  if_e	jmp	#LR__3051
21e98                 | LR__3050
21e98     01 1E 66 F5 | 	xor	local01, #1
21e9c                 | LR__3051
21e9c     3C 4E 05 F1 | 	add	fp, #60
21ea0     A7 1E 62 FC | 	wrlong	local01, fp
21ea4     3C 4E 85 F1 | 	sub	fp, #60
21ea8     00 1E 0E F2 | 	cmp	local01, #0 wz
21eac     0C 01 90 AD |  if_e	jmp	#LR__3053
21eb0     44 4E 05 F1 | 	add	fp, #68
21eb4     A7 26 02 FB | 	rdlong	local05, fp
21eb8     44 4E 85 F1 | 	sub	fp, #68
21ebc     13 23 02 F6 | 	mov	local03, local05
21ec0     02 22 0E F2 | 	cmp	local03, #2 wz
21ec4     F4 00 90 5D |  if_ne	jmp	#LR__3053
21ec8     0C 4F 05 F1 | 	add	fp, #268
21ecc     A7 28 02 FB | 	rdlong	local06, fp
21ed0     0C 4F 85 F1 | 	sub	fp, #268
21ed4     14 25 02 F6 | 	mov	local04, local06
21ed8     02 24 0E F2 | 	cmp	local04, #2 wz
21edc     DC 00 90 AD |  if_e	jmp	#LR__3053
21ee0     C0 4E 05 F1 | 	add	fp, #192
21ee4     A7 12 02 FB | 	rdlong	arg01, fp
21ee8     94 4E 85 F1 | 	sub	fp, #148
21eec     A7 14 02 FB | 	rdlong	arg02, fp
21ef0     14 4E 05 F1 | 	add	fp, #20
21ef4     A7 16 02 FB | 	rdlong	arg03, fp
21ef8     40 4E 85 F1 | 	sub	fp, #64
21efc     A4 44 B0 FD | 	call	#__system__emitsign_0500
21f00     14 4F 05 F1 | 	add	fp, #276
21f04     A7 FA 61 FC | 	wrlong	result1, fp
21f08     14 4F 85 F1 | 	sub	fp, #276
21f0c     00 FA 55 F2 | 	cmps	result1, #0 wc
21f10     14 4F 05 C1 |  if_b	add	fp, #276
21f14     A7 FA 01 CB |  if_b	rdlong	result1, fp
21f18     14 4F 85 C1 |  if_b	sub	fp, #276
21f1c     6C 0B 90 CD |  if_b	jmp	#LR__3103
21f20     C0 4E 05 F1 | 	add	fp, #192
21f24     A7 1E 02 FB | 	rdlong	local01, fp
21f28     54 4E 05 F1 | 	add	fp, #84
21f2c     A7 26 02 FB | 	rdlong	local05, fp
21f30     13 23 02 F6 | 	mov	local03, local05
21f34     13 1F 02 F1 | 	add	local01, local05
21f38     54 4E 85 F1 | 	sub	fp, #84
21f3c     A7 1E 62 FC | 	wrlong	local01, fp
21f40     58 4E 85 F1 | 	sub	fp, #88
21f44     A7 1E 0A FB | 	rdlong	local01, fp wz
21f48     68 4E 85 F1 | 	sub	fp, #104
21f4c     60 00 90 AD |  if_e	jmp	#LR__3052
21f50     68 4E 05 F1 | 	add	fp, #104
21f54     A7 1E 02 FB | 	rdlong	local01, fp
21f58     AC 4E 05 F1 | 	add	fp, #172
21f5c     A7 22 02 FB | 	rdlong	local03, fp
21f60     11 1F 82 F1 | 	sub	local01, local03
21f64     AC 4E 85 F1 | 	sub	fp, #172
21f68     A7 1E 62 FC | 	wrlong	local01, fp
21f6c     68 4E 85 F1 | 	sub	fp, #104
21f70     00 1E 56 F2 | 	cmps	local01, #0 wc
21f74     68 4E 05 C1 |  if_b	add	fp, #104
21f78     A7 00 68 CC |  if_b	wrlong	#0, fp
21f7c     68 4E 85 C1 |  if_b	sub	fp, #104
21f80     08 4E 05 F1 | 	add	fp, #8
21f84     A7 1E 02 FB | 	rdlong	local01, fp
21f88     E8 1E 06 F4 | 	bitl	local01, #232
21f8c     A7 1E 62 FC | 	wrlong	local01, fp
21f90     60 4E 05 F1 | 	add	fp, #96
21f94     A7 26 02 FB | 	rdlong	local05, fp
21f98     13 23 02 F6 | 	mov	local03, local05
21f9c     08 22 66 F0 | 	shl	local03, #8
21fa0     11 1F 42 F5 | 	or	local01, local03
21fa4     60 4E 85 F1 | 	sub	fp, #96
21fa8     A7 1E 62 FC | 	wrlong	local01, fp
21fac     08 4E 85 F1 | 	sub	fp, #8
21fb0                 | LR__3052
21fb0     3C 4E 05 F1 | 	add	fp, #60
21fb4     A7 00 68 FC | 	wrlong	#0, fp
21fb8     3C 4E 85 F1 | 	sub	fp, #60
21fbc                 | LR__3053
21fbc     0C 4E 05 F1 | 	add	fp, #12
21fc0     A7 12 02 FB | 	rdlong	arg01, fp
21fc4     0C 4E 85 F1 | 	sub	fp, #12
21fc8     04 1F B0 FD | 	call	#__system____builtin_ilogb
21fcc     FF FF 3F FF 
21fd0     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
21fd4     50 00 90 5D |  if_ne	jmp	#LR__3055
21fd8     2C 4E 05 F1 | 	add	fp, #44
21fdc     A7 1E 0A FB | 	rdlong	local01, fp wz
21fe0     2C 4E 85 F1 | 	sub	fp, #44
21fe4     24 00 90 AD |  if_e	jmp	#LR__3054
21fe8     C0 4E 05 F1 | 	add	fp, #192
21fec     A7 20 02 FB | 	rdlong	local02, fp
21ff0     10 23 02 F6 | 	mov	local03, local02
21ff4     01 22 06 F1 | 	add	local03, #1
21ff8     A7 22 62 FC | 	wrlong	local03, fp
21ffc     94 4E 85 F1 | 	sub	fp, #148
22000     A7 24 02 FB | 	rdlong	local04, fp
22004     2C 4E 85 F1 | 	sub	fp, #44
22008     10 25 42 FC | 	wrbyte	local04, local02
2200c                 | LR__3054
2200c     C0 4E 05 F1 | 	add	fp, #192
22010     A7 12 02 FB | 	rdlong	arg01, fp
22014     C0 4E 85 F1 | 	sub	fp, #192
22018     81 01 00 FF 
2201c     42 14 06 F6 | 	mov	arg02, ##@LR__5011
22020     AC E9 BF FD | 	call	#__system____builtin_strcpy
22024     A4 08 90 FD | 	jmp	#LR__3091
22028                 | LR__3055
22028     0C 4E 05 F1 | 	add	fp, #12
2202c     A7 20 02 FB | 	rdlong	local02, fp
22030     0C 4E 85 F1 | 	sub	fp, #12
22034     10 13 02 F6 | 	mov	arg01, local02
22038     94 1E B0 FD | 	call	#__system____builtin_ilogb
2203c     00 00 40 FF 
22040     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
22044     50 00 90 5D |  if_ne	jmp	#LR__3057
22048     2C 4E 05 F1 | 	add	fp, #44
2204c     A7 1E 0A FB | 	rdlong	local01, fp wz
22050     2C 4E 85 F1 | 	sub	fp, #44
22054     24 00 90 AD |  if_e	jmp	#LR__3056
22058     C0 4E 05 F1 | 	add	fp, #192
2205c     A7 20 02 FB | 	rdlong	local02, fp
22060     10 23 02 F6 | 	mov	local03, local02
22064     01 22 06 F1 | 	add	local03, #1
22068     A7 22 62 FC | 	wrlong	local03, fp
2206c     94 4E 85 F1 | 	sub	fp, #148
22070     A7 24 02 FB | 	rdlong	local04, fp
22074     2C 4E 85 F1 | 	sub	fp, #44
22078     10 25 42 FC | 	wrbyte	local04, local02
2207c                 | LR__3056
2207c     C0 4E 05 F1 | 	add	fp, #192
22080     A7 12 02 FB | 	rdlong	arg01, fp
22084     C0 4E 85 F1 | 	sub	fp, #192
22088     81 01 00 FF 
2208c     46 14 06 F6 | 	mov	arg02, ##@LR__5012
22090     3C E9 BF FD | 	call	#__system____builtin_strcpy
22094     34 08 90 FD | 	jmp	#LR__3091
22098                 | LR__3057
22098     10 4E 05 F1 | 	add	fp, #16
2209c     A7 1E 02 FB | 	rdlong	local01, fp
220a0     10 4E 85 F1 | 	sub	fp, #16
220a4     67 1E 0E F2 | 	cmp	local01, #103 wz
220a8     10 4E 05 51 |  if_ne	add	fp, #16
220ac     A7 22 02 5B |  if_ne	rdlong	local03, fp
220b0     10 4E 85 51 |  if_ne	sub	fp, #16
220b4     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
220b8     94 01 90 5D |  if_ne	jmp	#LR__3062
220bc     0C 4E 05 F1 | 	add	fp, #12
220c0     A7 12 02 FB | 	rdlong	arg01, fp
220c4     08 4E 05 F1 | 	add	fp, #8
220c8     A7 14 02 F6 | 	mov	arg02, fp
220cc     0C 4E 05 F1 | 	add	fp, #12
220d0     A7 16 02 F6 | 	mov	arg03, fp
220d4     98 4E 05 F1 | 	add	fp, #152
220d8     A7 18 02 FB | 	rdlong	arg04, fp
220dc     9C 4E 85 F1 | 	sub	fp, #156
220e0     A7 1A 02 FB | 	rdlong	arg05, fp
220e4     1C 4E 85 F1 | 	sub	fp, #28
220e8     C4 40 B0 FD | 	call	#__system__disassemble_0498
220ec     10 4E 05 F1 | 	add	fp, #16
220f0     A7 1E 02 FB | 	rdlong	local01, fp
220f4     10 4E 85 F1 | 	sub	fp, #16
220f8     23 1E 0E F2 | 	cmp	local01, #35 wz
220fc     A0 00 90 5D |  if_ne	jmp	#LR__3059
22100     20 4E 05 F1 | 	add	fp, #32
22104     A7 1E 02 FB | 	rdlong	local01, fp
22108     98 4E 05 F1 | 	add	fp, #152
2210c     A7 22 02 FB | 	rdlong	local03, fp
22110     B8 4E 85 F1 | 	sub	fp, #184
22114     11 1F 5A F2 | 	cmps	local01, local03 wcz
22118     24 4E 05 11 |  if_a	add	fp, #36
2211c     A7 02 68 1C |  if_a	wrlong	#1, fp
22120     24 4E 85 11 |  if_a	sub	fp, #36
22124     A4 01 90 1D |  if_a	jmp	#LR__3065
22128     20 4E 05 F1 | 	add	fp, #32
2212c     A7 1E 02 FB | 	rdlong	local01, fp
22130     20 4E 85 F1 | 	sub	fp, #32
22134     00 1E 56 F2 | 	cmps	local01, #0 wc
22138     2C 00 90 3D |  if_ae	jmp	#LR__3058
2213c     B8 4E 05 F1 | 	add	fp, #184
22140     A7 1E 02 FB | 	rdlong	local01, fp
22144     0F 1F 62 F6 | 	neg	local01, local01
22148     98 4E 85 F1 | 	sub	fp, #152
2214c     A7 22 02 FB | 	rdlong	local03, fp
22150     20 4E 85 F1 | 	sub	fp, #32
22154     0F 23 5A F2 | 	cmps	local03, local01 wcz
22158     24 4E 05 E1 |  if_be	add	fp, #36
2215c     A7 02 68 EC |  if_be	wrlong	#1, fp
22160     24 4E 85 E1 |  if_be	sub	fp, #36
22164     64 01 90 FD | 	jmp	#LR__3065
22168                 | LR__3058
22168     20 4E 05 F1 | 	add	fp, #32
2216c     A7 1E 02 FB | 	rdlong	local01, fp
22170     20 4E 85 F1 | 	sub	fp, #32
22174     01 1E 56 F2 | 	cmps	local01, #1 wc
22178     50 01 90 CD |  if_b	jmp	#LR__3065
2217c     B8 4E 05 F1 | 	add	fp, #184
22180     A7 1E 02 FB | 	rdlong	local01, fp
22184     98 4E 85 F1 | 	sub	fp, #152
22188     A7 22 02 FB | 	rdlong	local03, fp
2218c     11 1F 82 F1 | 	sub	local01, local03
22190     98 4E 05 F1 | 	add	fp, #152
22194     A7 1E 62 FC | 	wrlong	local01, fp
22198     B8 4E 85 F1 | 	sub	fp, #184
2219c     2C 01 90 FD | 	jmp	#LR__3065
221a0                 | LR__3059
221a0     00 1E 06 F6 | 	mov	local01, #0
221a4     08 4E 05 F1 | 	add	fp, #8
221a8     A7 20 02 FB | 	rdlong	local02, fp
221ac     1C 20 46 F0 | 	shr	local02, #28
221b0     01 20 0E F5 | 	and	local02, #1 wz
221b4     01 1E 06 A6 |  if_e	mov	local01, #1
221b8     2C 4E 05 F1 | 	add	fp, #44
221bc     A7 1E 62 FC | 	wrlong	local01, fp
221c0     14 4E 85 F1 | 	sub	fp, #20
221c4     A7 1E 02 FB | 	rdlong	local01, fp
221c8     98 4E 05 F1 | 	add	fp, #152
221cc     A7 22 02 FB | 	rdlong	local03, fp
221d0     B8 4E 85 F1 | 	sub	fp, #184
221d4     11 1F 52 F2 | 	cmps	local01, local03 wc
221d8     18 00 90 3D |  if_ae	jmp	#LR__3060
221dc     20 4E 05 F1 | 	add	fp, #32
221e0     A7 24 02 FB | 	rdlong	local04, fp
221e4     20 4E 85 F1 | 	sub	fp, #32
221e8     FF FF 7F FF 
221ec     FC 25 56 F2 | 	cmps	local04, ##-4 wc
221f0     10 00 90 3D |  if_ae	jmp	#LR__3061
221f4                 | LR__3060
221f4     24 4E 05 F1 | 	add	fp, #36
221f8     A7 02 68 FC | 	wrlong	#1, fp
221fc     24 4E 85 F1 | 	sub	fp, #36
22200     C8 00 90 FD | 	jmp	#LR__3065
22204                 | LR__3061
22204     B8 4E 05 F1 | 	add	fp, #184
22208     A7 24 02 FB | 	rdlong	local04, fp
2220c     98 4E 85 F1 | 	sub	fp, #152
22210     A7 22 02 FB | 	rdlong	local03, fp
22214     11 25 82 F1 | 	sub	local04, local03
22218     98 4E 05 F1 | 	add	fp, #152
2221c     A7 24 62 FC | 	wrlong	local04, fp
22220     AC 4E 85 F1 | 	sub	fp, #172
22224     A7 12 02 FB | 	rdlong	arg01, fp
22228     08 4E 05 F1 | 	add	fp, #8
2222c     A7 14 02 F6 | 	mov	arg02, fp
22230     0C 4E 05 F1 | 	add	fp, #12
22234     A7 16 02 F6 | 	mov	arg03, fp
22238     12 19 62 F6 | 	neg	arg04, local04
2223c     04 4E 85 F1 | 	sub	fp, #4
22240     A7 1A 02 FB | 	rdlong	arg05, fp
22244     1C 4E 85 F1 | 	sub	fp, #28
22248     64 3F B0 FD | 	call	#__system__disassemble_0498
2224c     7C 00 90 FD | 	jmp	#LR__3065
22250                 | LR__3062
22250     24 4E 05 F1 | 	add	fp, #36
22254     A7 1E 0A FB | 	rdlong	local01, fp wz
22258     24 4E 85 F1 | 	sub	fp, #36
2225c     34 00 90 AD |  if_e	jmp	#LR__3063
22260     0C 4E 05 F1 | 	add	fp, #12
22264     A7 12 02 FB | 	rdlong	arg01, fp
22268     08 4E 05 F1 | 	add	fp, #8
2226c     A7 14 02 F6 | 	mov	arg02, fp
22270     0C 4E 05 F1 | 	add	fp, #12
22274     A7 16 02 F6 | 	mov	arg03, fp
22278     98 4E 05 F1 | 	add	fp, #152
2227c     A7 18 02 FB | 	rdlong	arg04, fp
22280     9C 4E 85 F1 | 	sub	fp, #156
22284     A7 1A 02 FB | 	rdlong	arg05, fp
22288     1C 4E 85 F1 | 	sub	fp, #28
2228c     20 3F B0 FD | 	call	#__system__disassemble_0498
22290     38 00 90 FD | 	jmp	#LR__3064
22294                 | LR__3063
22294     0C 4E 05 F1 | 	add	fp, #12
22298     A7 12 02 FB | 	rdlong	arg01, fp
2229c     08 4E 05 F1 | 	add	fp, #8
222a0     A7 14 02 F6 | 	mov	arg02, fp
222a4     0C 4E 05 F1 | 	add	fp, #12
222a8     A7 16 02 F6 | 	mov	arg03, fp
222ac     98 4E 05 F1 | 	add	fp, #152
222b0     A7 24 02 FB | 	rdlong	local04, fp
222b4     01 24 06 F1 | 	add	local04, #1
222b8     12 19 62 F6 | 	neg	arg04, local04
222bc     9C 4E 85 F1 | 	sub	fp, #156
222c0     A7 1A 02 FB | 	rdlong	arg05, fp
222c4     1C 4E 85 F1 | 	sub	fp, #28
222c8     E4 3E B0 FD | 	call	#__system__disassemble_0498
222cc                 | LR__3064
222cc                 | LR__3065
222cc     1C 4E 05 F1 | 	add	fp, #28
222d0     A7 1E 02 FB | 	rdlong	local01, fp
222d4     1C 4E 85 F1 | 	sub	fp, #28
222d8     02 1E 0E F2 | 	cmp	local01, #2 wz
222dc     4C 00 90 5D |  if_ne	jmp	#LR__3068
222e0     1C 4E 05 F1 | 	add	fp, #28
222e4     A7 20 68 FC | 	wrlong	#16, fp
222e8     1C 4E 85 F1 | 	sub	fp, #28
222ec                 | LR__3066
222ec     14 4E 05 F1 | 	add	fp, #20
222f0     A7 1E 0A FB | 	rdlong	local01, fp wz
222f4     14 4E 85 F1 | 	sub	fp, #20
222f8     30 00 90 AD |  if_e	jmp	#LR__3067
222fc     14 4E 05 F1 | 	add	fp, #20
22300     A7 22 02 FB | 	rdlong	local03, fp
22304     14 4E 85 F1 | 	sub	fp, #20
22308     00 80 00 FF 
2230c     00 22 16 F2 | 	cmp	local03, ##16777216 wc
22310     18 00 90 3D |  if_ae	jmp	#LR__3067
22314     14 4E 05 F1 | 	add	fp, #20
22318     A7 1E 02 FB | 	rdlong	local01, fp
2231c     01 1E 66 F0 | 	shl	local01, #1
22320     A7 1E 62 FC | 	wrlong	local01, fp
22324     14 4E 85 F1 | 	sub	fp, #20
22328     C0 FF 9F FD | 	jmp	#LR__3066
2232c                 | LR__3067
2232c                 | LR__3068
2232c     70 4E 05 F1 | 	add	fp, #112
22330     A7 12 02 F6 | 	mov	arg01, fp
22334     5C 4E 85 F1 | 	sub	fp, #92
22338     A7 14 02 FB | 	rdlong	arg02, fp
2233c     08 4E 05 F1 | 	add	fp, #8
22340     A7 16 02 FB | 	rdlong	arg03, fp
22344     A0 4E 05 F1 | 	add	fp, #160
22348     A7 1A 02 FB | 	rdlong	arg05, fp
2234c     BC 4E 85 F1 | 	sub	fp, #188
22350     01 18 06 F6 | 	mov	arg04, #1
22354     E4 3D B0 FD | 	call	#__system___uitoa
22358     58 4E 05 F1 | 	add	fp, #88
2235c     A7 FA 61 FC | 	wrlong	result1, fp
22360     38 4E 85 F1 | 	sub	fp, #56
22364     A7 1E 02 FB | 	rdlong	local01, fp
22368     20 4E 85 F1 | 	sub	fp, #32
2236c     00 1E 56 F2 | 	cmps	local01, #0 wc
22370     50 00 90 3D |  if_ae	jmp	#LR__3069
22374     60 4E 05 F1 | 	add	fp, #96
22378     A7 5A 68 FC | 	wrlong	#45, fp
2237c     50 4E 05 F1 | 	add	fp, #80
22380     A7 12 02 F6 | 	mov	arg01, fp
22384     90 4E 85 F1 | 	sub	fp, #144
22388     A7 22 02 FB | 	rdlong	local03, fp
2238c     11 15 62 F6 | 	neg	arg02, local03
22390     18 4E 05 F1 | 	add	fp, #24
22394     A7 18 02 FB | 	rdlong	arg04, fp
22398     84 4E 05 F1 | 	add	fp, #132
2239c     A7 28 02 FB | 	rdlong	local06, fp
223a0     BC 4E 85 F1 | 	sub	fp, #188
223a4     14 25 02 F6 | 	mov	local04, local06
223a8     0A 16 06 F6 | 	mov	arg03, #10
223ac     12 1B 02 F6 | 	mov	arg05, local04
223b0     88 3D B0 FD | 	call	#__system___uitoa
223b4     5C 4E 05 F1 | 	add	fp, #92
223b8     A7 FA 61 FC | 	wrlong	result1, fp
223bc     5C 4E 85 F1 | 	sub	fp, #92
223c0     48 00 90 FD | 	jmp	#LR__3070
223c4                 | LR__3069
223c4     60 4E 05 F1 | 	add	fp, #96
223c8     A7 56 68 FC | 	wrlong	#43, fp
223cc     50 4E 05 F1 | 	add	fp, #80
223d0     A7 12 02 F6 | 	mov	arg01, fp
223d4     90 4E 85 F1 | 	sub	fp, #144
223d8     A7 14 02 FB | 	rdlong	arg02, fp
223dc     18 4E 05 F1 | 	add	fp, #24
223e0     A7 18 02 FB | 	rdlong	arg04, fp
223e4     84 4E 05 F1 | 	add	fp, #132
223e8     A7 28 02 FB | 	rdlong	local06, fp
223ec     BC 4E 85 F1 | 	sub	fp, #188
223f0     14 25 02 F6 | 	mov	local04, local06
223f4     0A 16 06 F6 | 	mov	arg03, #10
223f8     12 1B 02 F6 | 	mov	arg05, local04
223fc     3C 3D B0 FD | 	call	#__system___uitoa
22400     5C 4E 05 F1 | 	add	fp, #92
22404     A7 FA 61 FC | 	wrlong	result1, fp
22408     5C 4E 85 F1 | 	sub	fp, #92
2240c                 | LR__3070
2240c     24 4E 05 F1 | 	add	fp, #36
22410     A7 1E 0A FB | 	rdlong	local01, fp wz
22414     24 4E 85 F1 | 	sub	fp, #36
22418     2C 00 90 AD |  if_e	jmp	#LR__3071
2241c     50 4E 05 F1 | 	add	fp, #80
22420     A7 00 68 FC | 	wrlong	#0, fp
22424     04 4E 85 F1 | 	sub	fp, #4
22428     A7 00 68 FC | 	wrlong	#0, fp
2242c     6C 4E 05 F1 | 	add	fp, #108
22430     A7 1E 02 FB | 	rdlong	local01, fp
22434     01 1E 06 F1 | 	add	local01, #1
22438     64 4E 85 F1 | 	sub	fp, #100
2243c     A7 1E 62 FC | 	wrlong	local01, fp
22440     54 4E 85 F1 | 	sub	fp, #84
22444     88 00 90 FD | 	jmp	#LR__3074
22448                 | LR__3071
22448     20 4E 05 F1 | 	add	fp, #32
2244c     A7 1E 02 FB | 	rdlong	local01, fp
22450     20 4E 85 F1 | 	sub	fp, #32
22454     00 1E 56 F2 | 	cmps	local01, #0 wc
22458     40 00 90 3D |  if_ae	jmp	#LR__3072
2245c     20 4E 05 F1 | 	add	fp, #32
22460     A7 20 02 FB | 	rdlong	local02, fp
22464     30 4E 05 F1 | 	add	fp, #48
22468     A7 20 62 FC | 	wrlong	local02, fp
2246c     04 4E 85 F1 | 	sub	fp, #4
22470     A7 20 62 FC | 	wrlong	local02, fp
22474     2C 4E 85 F1 | 	sub	fp, #44
22478     A7 1E 02 FB | 	rdlong	local01, fp
2247c     98 4E 05 F1 | 	add	fp, #152
22480     A7 22 02 FB | 	rdlong	local03, fp
22484     11 1F 02 F1 | 	add	local01, local03
22488     01 1E 06 F1 | 	add	local01, #1
2248c     64 4E 85 F1 | 	sub	fp, #100
22490     A7 1E 62 FC | 	wrlong	local01, fp
22494     54 4E 85 F1 | 	sub	fp, #84
22498     34 00 90 FD | 	jmp	#LR__3073
2249c                 | LR__3072
2249c     4C 4E 05 F1 | 	add	fp, #76
224a0     A7 00 68 FC | 	wrlong	#0, fp
224a4     2C 4E 85 F1 | 	sub	fp, #44
224a8     A7 1E 02 FB | 	rdlong	local01, fp
224ac     30 4E 05 F1 | 	add	fp, #48
224b0     A7 1E 62 FC | 	wrlong	local01, fp
224b4     68 4E 05 F1 | 	add	fp, #104
224b8     A7 22 02 FB | 	rdlong	local03, fp
224bc     11 1F 02 F1 | 	add	local01, local03
224c0     01 1E 06 F1 | 	add	local01, #1
224c4     64 4E 85 F1 | 	sub	fp, #100
224c8     A7 1E 62 FC | 	wrlong	local01, fp
224cc     54 4E 85 F1 | 	sub	fp, #84
224d0                 | LR__3073
224d0                 | LR__3074
224d0     54 4E 05 F1 | 	add	fp, #84
224d4     A7 1E 02 FB | 	rdlong	local01, fp
224d8     08 4E 85 F1 | 	sub	fp, #8
224dc     A7 22 02 FB | 	rdlong	local03, fp
224e0     11 1F 82 F1 | 	sub	local01, local03
224e4     01 1E 06 F1 | 	add	local01, #1
224e8     24 4E 85 F1 | 	sub	fp, #36
224ec     A7 1E 62 FC | 	wrlong	local01, fp
224f0     04 4E 05 F1 | 	add	fp, #4
224f4     A7 1E 0A FB | 	rdlong	local01, fp wz
224f8     2C 4E 85 F1 | 	sub	fp, #44
224fc     28 4E 05 51 |  if_ne	add	fp, #40
22500     A7 22 02 5B |  if_ne	rdlong	local03, fp
22504     01 22 06 51 |  if_ne	add	local03, #1
22508     A7 22 62 5C |  if_ne	wrlong	local03, fp
2250c     28 4E 85 51 |  if_ne	sub	fp, #40
22510     1C 4E 05 F1 | 	add	fp, #28
22514     A7 1E 02 FB | 	rdlong	local01, fp
22518     1C 4E 85 F1 | 	sub	fp, #28
2251c     10 1E 0E F2 | 	cmp	local01, #16 wz
22520     28 4E 05 A1 |  if_e	add	fp, #40
22524     A7 1E 02 AB |  if_e	rdlong	local01, fp
22528     02 1E 06 A1 |  if_e	add	local01, #2
2252c     A7 1E 62 AC |  if_e	wrlong	local01, fp
22530     28 4E 85 A1 |  if_e	sub	fp, #40
22534     24 4E 05 F1 | 	add	fp, #36
22538     A7 1E 0A FB | 	rdlong	local01, fp wz
2253c     24 4E 85 F1 | 	sub	fp, #36
22540     28 00 90 AD |  if_e	jmp	#LR__3075
22544     28 4E 05 F1 | 	add	fp, #40
22548     A7 1E 02 FB | 	rdlong	local01, fp
2254c     02 22 06 F6 | 	mov	local03, #2
22550     34 4E 05 F1 | 	add	fp, #52
22554     A7 26 02 FB | 	rdlong	local05, fp
22558     13 23 02 F1 | 	add	local03, local05
2255c     11 1F 02 F1 | 	add	local01, local03
22560     34 4E 85 F1 | 	sub	fp, #52
22564     A7 1E 62 FC | 	wrlong	local01, fp
22568     28 4E 85 F1 | 	sub	fp, #40
2256c                 | LR__3075
2256c     28 4E 05 F1 | 	add	fp, #40
22570     A7 1E 02 FB | 	rdlong	local01, fp
22574     28 4E 85 F1 | 	sub	fp, #40
22578     41 1E 56 F2 | 	cmps	local01, #65 wc
2257c     01 FA 65 36 |  if_ae	neg	result1, #1
22580     08 05 90 3D |  if_ae	jmp	#LR__3103
22584     3C 4E 05 F1 | 	add	fp, #60
22588     A7 1E 0A FB | 	rdlong	local01, fp wz
2258c     3C 4E 85 F1 | 	sub	fp, #60
22590     60 00 90 AD |  if_e	jmp	#LR__3076
22594     C0 4E 05 F1 | 	add	fp, #192
22598     A7 12 02 FB | 	rdlong	arg01, fp
2259c     94 4E 85 F1 | 	sub	fp, #148
225a0     A7 14 02 FB | 	rdlong	arg02, fp
225a4     14 4E 05 F1 | 	add	fp, #20
225a8     A7 16 02 FB | 	rdlong	arg03, fp
225ac     40 4E 85 F1 | 	sub	fp, #64
225b0     F0 3D B0 FD | 	call	#__system__emitsign_0500
225b4     18 4F 05 F1 | 	add	fp, #280
225b8     A7 FA 61 FC | 	wrlong	result1, fp
225bc     18 4F 85 F1 | 	sub	fp, #280
225c0     00 FA 55 F2 | 	cmps	result1, #0 wc
225c4     18 4F 05 C1 |  if_b	add	fp, #280
225c8     A7 FA 01 CB |  if_b	rdlong	result1, fp
225cc     18 4F 85 C1 |  if_b	sub	fp, #280
225d0     B8 04 90 CD |  if_b	jmp	#LR__3103
225d4     C0 4E 05 F1 | 	add	fp, #192
225d8     A7 1E 02 FB | 	rdlong	local01, fp
225dc     58 4E 05 F1 | 	add	fp, #88
225e0     A7 22 02 FB | 	rdlong	local03, fp
225e4     11 1F 02 F1 | 	add	local01, local03
225e8     58 4E 85 F1 | 	sub	fp, #88
225ec     A7 1E 62 FC | 	wrlong	local01, fp
225f0     C0 4E 85 F1 | 	sub	fp, #192
225f4                 | LR__3076
225f4     4C 4E 05 F1 | 	add	fp, #76
225f8     A7 1E 02 FB | 	rdlong	local01, fp
225fc     34 4E 85 F1 | 	sub	fp, #52
22600     A7 1E 62 FC | 	wrlong	local01, fp
22604     18 4E 85 F1 | 	sub	fp, #24
22608     97 9E 48 FB | 	callpa	#(@LR__3082-@LR__3077)>>2,fcache_load_ptr_
2260c                 | LR__3077
2260c     18 4E 05 F1 | 	add	fp, #24
22610     A7 20 02 FB | 	rdlong	local02, fp
22614     3C 4E 05 F1 | 	add	fp, #60
22618     A7 26 02 FB | 	rdlong	local05, fp
2261c     54 4E 85 F1 | 	sub	fp, #84
22620     13 21 52 F2 | 	cmps	local02, local05 wc
22624     20 01 90 3D |  if_ae	jmp	#LR__3083
22628     18 4E 05 F1 | 	add	fp, #24
2262c     A7 28 02 FB | 	rdlong	local06, fp
22630     18 4E 85 F1 | 	sub	fp, #24
22634     00 28 56 F2 | 	cmps	local06, #0 wc
22638     58 00 90 CD |  if_b	jmp	#LR__3078
2263c     18 4E 05 F1 | 	add	fp, #24
22640     A7 28 02 FB | 	rdlong	local06, fp
22644     40 4E 05 F1 | 	add	fp, #64
22648     A7 2A 02 FB | 	rdlong	local07, fp
2264c     58 4E 85 F1 | 	sub	fp, #88
22650     15 29 52 F2 | 	cmps	local06, local07 wc
22654     3C 00 90 3D |  if_ae	jmp	#LR__3078
22658     C0 4E 05 F1 | 	add	fp, #192
2265c     A7 2C 02 FB | 	rdlong	local08, fp
22660     16 2B 02 F6 | 	mov	local07, local08
22664     01 2A 06 F1 | 	add	local07, #1
22668     A7 2A 62 FC | 	wrlong	local07, fp
2266c     A8 4E 85 F1 | 	sub	fp, #168
22670     A7 2A 02 FB | 	rdlong	local07, fp
22674     15 2F 02 F6 | 	mov	local09, local07
22678     58 4E 05 F1 | 	add	fp, #88
2267c     A7 30 02 F6 | 	mov	local10, fp
22680     A7 2E 02 F1 | 	add	local09, fp
22684     17 33 C2 FA | 	rdbyte	local11, local09
22688     16 33 42 FC | 	wrbyte	local11, local08
2268c     70 4E 85 F1 | 	sub	fp, #112
22690     20 00 90 FD | 	jmp	#LR__3079
22694                 | LR__3078
22694     C0 4E 05 F1 | 	add	fp, #192
22698     A7 2C 02 FB | 	rdlong	local08, fp
2269c     16 2F 02 F6 | 	mov	local09, local08
226a0     01 2E 06 F1 | 	add	local09, #1
226a4     A7 2E 62 FC | 	wrlong	local09, fp
226a8     C0 4E 85 F1 | 	sub	fp, #192
226ac     30 2E 06 F6 | 	mov	local09, #48
226b0     16 61 48 FC | 	wrbyte	#48, local08
226b4                 | LR__3079
226b4     18 4E 05 F1 | 	add	fp, #24
226b8     A7 28 02 FB | 	rdlong	local06, fp
226bc     38 4E 05 F1 | 	add	fp, #56
226c0     A7 34 02 FB | 	rdlong	local12, fp
226c4     50 4E 85 F1 | 	sub	fp, #80
226c8     1A 29 0A F2 | 	cmp	local06, local12 wz
226cc     5C 00 90 5D |  if_ne	jmp	#LR__3081
226d0     10 4F 05 F1 | 	add	fp, #272
226d4     A7 2A 02 FB | 	rdlong	local07, fp
226d8     10 4F 85 F1 | 	sub	fp, #272
226dc     15 2F 0A F6 | 	mov	local09, local07 wz
226e0     28 00 90 5D |  if_ne	jmp	#LR__3080
226e4     54 4E 05 F1 | 	add	fp, #84
226e8     A7 32 02 FB | 	rdlong	local11, fp
226ec     19 31 02 F6 | 	mov	local10, local11
226f0     01 30 86 F1 | 	sub	local10, #1
226f4     3C 4E 85 F1 | 	sub	fp, #60
226f8     A7 36 02 FB | 	rdlong	local13, fp
226fc     18 4E 85 F1 | 	sub	fp, #24
22700     1B 39 02 F6 | 	mov	local14, local13
22704     18 39 52 F2 | 	cmps	local14, local10 wc
22708     20 00 90 3D |  if_ae	jmp	#LR__3081
2270c                 | LR__3080
2270c     C0 4E 05 F1 | 	add	fp, #192
22710     A7 2C 02 FB | 	rdlong	local08, fp
22714     16 35 02 F6 | 	mov	local12, local08
22718     01 34 06 F1 | 	add	local12, #1
2271c     A7 34 62 FC | 	wrlong	local12, fp
22720     C0 4E 85 F1 | 	sub	fp, #192
22724     2E 2E 06 F6 | 	mov	local09, #46
22728     16 5D 48 FC | 	wrbyte	#46, local08
2272c                 | LR__3081
2272c     18 4E 05 F1 | 	add	fp, #24
22730     A7 3A 02 FB | 	rdlong	local15, fp
22734     1D 35 02 F6 | 	mov	local12, local15
22738     01 34 06 F1 | 	add	local12, #1
2273c     A7 34 62 FC | 	wrlong	local12, fp
22740     18 4E 85 F1 | 	sub	fp, #24
22744     C4 FE 9F FD | 	jmp	#LR__3077
22748                 | LR__3082
22748                 | LR__3083
22748     34 4E 05 F1 | 	add	fp, #52
2274c     A7 1E 0A FB | 	rdlong	local01, fp wz
22750     34 4E 85 F1 | 	sub	fp, #52
22754     A0 00 90 AD |  if_e	jmp	#LR__3087
22758     C0 4E 05 F1 | 	add	fp, #192
2275c     A7 1E 02 FB | 	rdlong	local01, fp
22760     01 1E 86 F1 | 	sub	local01, #1
22764     A7 1E 62 FC | 	wrlong	local01, fp
22768     C0 4E 85 F1 | 	sub	fp, #192
2276c     97 26 48 FB | 	callpa	#(@LR__3085-@LR__3084)>>2,fcache_load_ptr_
22770                 | LR__3084
22770     C0 4E 05 F1 | 	add	fp, #192
22774     A7 1E 02 FB | 	rdlong	local01, fp
22778     04 4E 05 F1 | 	add	fp, #4
2277c     A7 22 02 FB | 	rdlong	local03, fp
22780     C4 4E 85 F1 | 	sub	fp, #196
22784     11 1F 5A F2 | 	cmps	local01, local03 wcz
22788     30 00 90 ED |  if_be	jmp	#LR__3086
2278c     C0 4E 05 F1 | 	add	fp, #192
22790     A7 28 02 FB | 	rdlong	local06, fp
22794     C0 4E 85 F1 | 	sub	fp, #192
22798     14 25 C2 FA | 	rdbyte	local04, local06
2279c     30 24 0E F2 | 	cmp	local04, #48 wz
227a0     18 00 90 5D |  if_ne	jmp	#LR__3086
227a4     C0 4E 05 F1 | 	add	fp, #192
227a8     A7 1E 02 FB | 	rdlong	local01, fp
227ac     01 1E 86 F1 | 	sub	local01, #1
227b0     A7 1E 62 FC | 	wrlong	local01, fp
227b4     C0 4E 85 F1 | 	sub	fp, #192
227b8     B4 FF 9F FD | 	jmp	#LR__3084
227bc                 | LR__3085
227bc                 | LR__3086
227bc     C0 4E 05 F1 | 	add	fp, #192
227c0     A7 20 02 FB | 	rdlong	local02, fp
227c4     C0 4E 85 F1 | 	sub	fp, #192
227c8     10 1F C2 FA | 	rdbyte	local01, local02
227cc     2E 1E 0E F2 | 	cmp	local01, #46 wz
227d0     C0 4E 05 A1 |  if_e	add	fp, #192
227d4     A7 1E 02 AB |  if_e	rdlong	local01, fp
227d8     01 1E 86 A1 |  if_e	sub	local01, #1
227dc     A7 1E 62 AC |  if_e	wrlong	local01, fp
227e0     C0 4E 85 A1 |  if_e	sub	fp, #192
227e4     C0 4E 05 F1 | 	add	fp, #192
227e8     A7 22 02 FB | 	rdlong	local03, fp
227ec     01 22 06 F1 | 	add	local03, #1
227f0     A7 22 62 FC | 	wrlong	local03, fp
227f4     C0 4E 85 F1 | 	sub	fp, #192
227f8                 | LR__3087
227f8     24 4E 05 F1 | 	add	fp, #36
227fc     A7 1E 0A FB | 	rdlong	local01, fp wz
22800     24 4E 85 F1 | 	sub	fp, #36
22804     B4 00 90 AD |  if_e	jmp	#LR__3090
22808     C0 4E 05 F1 | 	add	fp, #192
2280c     A7 20 02 FB | 	rdlong	local02, fp
22810     10 23 02 F6 | 	mov	local03, local02
22814     01 22 06 F1 | 	add	local03, #1
22818     A7 22 62 FC | 	wrlong	local03, fp
2281c     90 4E 85 F1 | 	sub	fp, #144
22820     A7 24 02 FB | 	rdlong	local04, fp
22824     10 25 42 FC | 	wrbyte	local04, local02
22828     90 4E 05 F1 | 	add	fp, #144
2282c     A7 20 02 FB | 	rdlong	local02, fp
22830     10 23 02 F6 | 	mov	local03, local02
22834     01 22 06 F1 | 	add	local03, #1
22838     A7 22 62 FC | 	wrlong	local03, fp
2283c     60 4E 85 F1 | 	sub	fp, #96
22840     A7 24 02 FB | 	rdlong	local04, fp
22844     10 25 42 FC | 	wrbyte	local04, local02
22848     48 4E 85 F1 | 	sub	fp, #72
2284c     A7 00 68 FC | 	wrlong	#0, fp
22850     18 4E 85 F1 | 	sub	fp, #24
22854                 | LR__3088
22854     18 4E 05 F1 | 	add	fp, #24
22858     A7 20 02 FB | 	rdlong	local02, fp
2285c     44 4E 05 F1 | 	add	fp, #68
22860     A7 26 02 FB | 	rdlong	local05, fp
22864     5C 4E 85 F1 | 	sub	fp, #92
22868     13 21 52 F2 | 	cmps	local02, local05 wc
2286c     4C 00 90 3D |  if_ae	jmp	#LR__3089
22870     C0 4E 05 F1 | 	add	fp, #192
22874     A7 2C 02 FB | 	rdlong	local08, fp
22878     16 35 02 F6 | 	mov	local12, local08
2287c     01 34 06 F1 | 	add	local12, #1
22880     A7 34 62 FC | 	wrlong	local12, fp
22884     A8 4E 85 F1 | 	sub	fp, #168
22888     A7 2A 02 FB | 	rdlong	local07, fp
2288c     15 2F 02 F6 | 	mov	local09, local07
22890     98 4E 05 F1 | 	add	fp, #152
22894     A7 30 02 F6 | 	mov	local10, fp
22898     A7 2E 02 F1 | 	add	local09, fp
2289c     17 33 C2 FA | 	rdbyte	local11, local09
228a0     16 33 42 FC | 	wrbyte	local11, local08
228a4     98 4E 85 F1 | 	sub	fp, #152
228a8     A7 34 02 FB | 	rdlong	local12, fp
228ac     01 34 06 F1 | 	add	local12, #1
228b0     A7 34 62 FC | 	wrlong	local12, fp
228b4     18 4E 85 F1 | 	sub	fp, #24
228b8     98 FF 9F FD | 	jmp	#LR__3088
228bc                 | LR__3089
228bc                 | LR__3090
228bc     C0 4E 05 F1 | 	add	fp, #192
228c0     A7 1E 02 FB | 	rdlong	local01, fp
228c4     C0 4E 85 F1 | 	sub	fp, #192
228c8     0F 01 48 FC | 	wrbyte	#0, local01
228cc                 | LR__3091
228cc     6C 4E 05 F1 | 	add	fp, #108
228d0     A7 1E 0A FB | 	rdlong	local01, fp wz
228d4     6C 4E 85 F1 | 	sub	fp, #108
228d8     90 01 90 AD |  if_e	jmp	#LR__3102
228dc     48 4E 05 F1 | 	add	fp, #72
228e0     A7 22 0A FB | 	rdlong	local03, fp wz
228e4     48 4E 85 F1 | 	sub	fp, #72
228e8     80 01 90 AD |  if_e	jmp	#LR__3102
228ec     C4 4E 05 F1 | 	add	fp, #196
228f0     A7 12 02 FB | 	rdlong	arg01, fp
228f4     C4 4E 85 F1 | 	sub	fp, #196
228f8     09 3D 02 F6 | 	mov	local16, arg01
228fc     97 06 48 FB | 	callpa	#(@LR__3093-@LR__3092)>>2,fcache_load_ptr_
22900                 | LR__3092
22900     1E FB C9 FA | 	rdbyte	result1, local16 wz
22904     01 3C 06 51 |  if_ne	add	local16, #1
22908     F4 FF 9F 5D |  if_ne	jmp	#LR__3092
2290c                 | LR__3093
2290c     09 3D 82 F1 | 	sub	local16, arg01
22910     1E 25 02 F6 | 	mov	local04, local16
22914     6C 4E 05 F1 | 	add	fp, #108
22918     A7 28 02 FB | 	rdlong	local06, fp
2291c     6C 4E 85 F1 | 	sub	fp, #108
22920     14 25 5A F2 | 	cmps	local04, local06 wcz
22924     44 01 90 ED |  if_be	jmp	#LR__3102
22928     C4 4E 05 F1 | 	add	fp, #196
2292c     A7 1E 02 FB | 	rdlong	local01, fp
22930     5C 4E 05 F1 | 	add	fp, #92
22934     A7 1E 62 FC | 	wrlong	local01, fp
22938     FC 4E 85 F1 | 	sub	fp, #252
2293c     A7 1E 0A FB | 	rdlong	local01, fp wz
22940     24 4E 85 F1 | 	sub	fp, #36
22944     20 00 90 AD |  if_e	jmp	#LR__3094
22948     B8 4E 05 F1 | 	add	fp, #184
2294c     A7 00 68 FC | 	wrlong	#0, fp
22950     4C 4E 85 F1 | 	sub	fp, #76
22954     A7 1E 02 FB | 	rdlong	local01, fp
22958     B0 4E 05 F1 | 	add	fp, #176
2295c     A7 1E 62 FC | 	wrlong	local01, fp
22960     1C 4F 85 F1 | 	sub	fp, #284
22964     24 00 90 FD | 	jmp	#LR__3095
22968                 | LR__3094
22968     6C 4E 05 F1 | 	add	fp, #108
2296c     A7 1E 02 FB | 	rdlong	local01, fp
22970     01 1E 86 F1 | 	sub	local01, #1
22974     4C 4E 05 F1 | 	add	fp, #76
22978     A7 22 02 FB | 	rdlong	local03, fp
2297c     11 1F 82 F1 | 	sub	local01, local03
22980     64 4E 05 F1 | 	add	fp, #100
22984     A7 1E 62 FC | 	wrlong	local01, fp
22988     1C 4F 85 F1 | 	sub	fp, #284
2298c                 | LR__3095
2298c     97 20 48 FB | 	callpa	#(@LR__3097-@LR__3096)>>2,fcache_load_ptr_
22990                 | LR__3096
22990     1C 4F 05 F1 | 	add	fp, #284
22994     A7 1E 0A FB | 	rdlong	local01, fp wz
22998     1C 4F 85 F1 | 	sub	fp, #284
2299c     30 00 90 AD |  if_e	jmp	#LR__3098
229a0     20 4F 05 F1 | 	add	fp, #288
229a4     A7 20 02 FB | 	rdlong	local02, fp
229a8     10 23 02 F6 | 	mov	local03, local02
229ac     01 22 06 F1 | 	add	local03, #1
229b0     A7 22 62 FC | 	wrlong	local03, fp
229b4     10 55 48 FC | 	wrbyte	#42, local02
229b8     04 4E 85 F1 | 	sub	fp, #4
229bc     A7 1E 02 FB | 	rdlong	local01, fp
229c0     01 1E 86 F1 | 	sub	local01, #1
229c4     A7 1E 62 FC | 	wrlong	local01, fp
229c8     1C 4F 85 F1 | 	sub	fp, #284
229cc     C0 FF 9F FD | 	jmp	#LR__3096
229d0                 | LR__3097
229d0                 | LR__3098
229d0     B8 4E 05 F1 | 	add	fp, #184
229d4     A7 1E 0A FB | 	rdlong	local01, fp wz
229d8     B8 4E 85 F1 | 	sub	fp, #184
229dc     70 00 90 AD |  if_e	jmp	#LR__3101
229e0     20 4F 05 F1 | 	add	fp, #288
229e4     A7 20 02 FB | 	rdlong	local02, fp
229e8     10 23 02 F6 | 	mov	local03, local02
229ec     01 22 06 F1 | 	add	local03, #1
229f0     A7 22 62 FC | 	wrlong	local03, fp
229f4     10 5D 48 FC | 	wrbyte	#46, local02
229f8     04 4E 85 F1 | 	sub	fp, #4
229fc     A7 00 68 FC | 	wrlong	#0, fp
22a00     1C 4F 85 F1 | 	sub	fp, #284
22a04                 | LR__3099
22a04     1C 4F 05 F1 | 	add	fp, #284
22a08     A7 20 02 FB | 	rdlong	local02, fp
22a0c     64 4E 85 F1 | 	sub	fp, #100
22a10     A7 26 02 FB | 	rdlong	local05, fp
22a14     B8 4E 85 F1 | 	sub	fp, #184
22a18     13 21 52 F2 | 	cmps	local02, local05 wc
22a1c     30 00 90 3D |  if_ae	jmp	#LR__3100
22a20     20 4F 05 F1 | 	add	fp, #288
22a24     A7 2C 02 FB | 	rdlong	local08, fp
22a28     16 35 02 F6 | 	mov	local12, local08
22a2c     01 34 06 F1 | 	add	local12, #1
22a30     A7 34 62 FC | 	wrlong	local12, fp
22a34     16 55 48 FC | 	wrbyte	#42, local08
22a38     04 4E 85 F1 | 	sub	fp, #4
22a3c     A7 34 02 FB | 	rdlong	local12, fp
22a40     01 34 06 F1 | 	add	local12, #1
22a44     A7 34 62 FC | 	wrlong	local12, fp
22a48     1C 4F 85 F1 | 	sub	fp, #284
22a4c     B4 FF 9F FD | 	jmp	#LR__3099
22a50                 | LR__3100
22a50                 | LR__3101
22a50     20 4F 05 F1 | 	add	fp, #288
22a54     A7 20 02 FB | 	rdlong	local02, fp
22a58     10 23 02 F6 | 	mov	local03, local02
22a5c     01 22 06 F1 | 	add	local03, #1
22a60     A7 22 62 FC | 	wrlong	local03, fp
22a64     20 4F 85 F1 | 	sub	fp, #288
22a68     10 01 48 FC | 	wrbyte	#0, local02
22a6c                 | LR__3102
22a6c     04 4E 05 F1 | 	add	fp, #4
22a70     A7 12 02 FB | 	rdlong	arg01, fp
22a74     04 4E 05 F1 | 	add	fp, #4
22a78     A7 14 02 FB | 	rdlong	arg02, fp
22a7c     BC 4E 05 F1 | 	add	fp, #188
22a80     A7 16 02 FB | 	rdlong	arg03, fp
22a84     C4 4E 85 F1 | 	sub	fp, #196
22a88     C4 EE BF FD | 	call	#__system___fmtstr
22a8c                 | LR__3103
22a8c     A7 F0 03 F6 | 	mov	ptra, fp
22a90     B2 00 A0 FD | 	call	#popregs_
22a94                 | __system___fmtfloat_ret
22a94     2D 00 64 FD | 	ret
22a98                 | 
22a98                 | __system__Left_S
22a98     04 4A 05 F6 | 	mov	COUNT_, #4
22a9c     A8 00 A0 FD | 	call	#pushregs_
22aa0     09 1F 02 F6 | 	mov	local01, arg01
22aa4     0A 21 02 F6 | 	mov	local02, arg02
22aa8     01 20 56 F2 | 	cmps	local02, #1 wc
22aac     81 01 00 CF 
22ab0     4A FA 05 C6 |  if_b	mov	result1, ##@LR__5013
22ab4     5C 00 90 CD |  if_b	jmp	#LR__3113
22ab8     0F 13 02 F6 | 	mov	arg01, local01
22abc     09 23 02 F6 | 	mov	local03, arg01
22ac0     97 06 48 FB | 	callpa	#(@LR__3111-@LR__3110)>>2,fcache_load_ptr_
22ac4                 | LR__3110
22ac4     11 FB C9 FA | 	rdbyte	result1, local03 wz
22ac8     01 22 06 51 |  if_ne	add	local03, #1
22acc     F4 FF 9F 5D |  if_ne	jmp	#LR__3110
22ad0                 | LR__3111
22ad0     09 23 82 F1 | 	sub	local03, arg01
22ad4     11 FB 01 F6 | 	mov	result1, local03
22ad8     10 FB 59 F2 | 	cmps	result1, local02 wcz
22adc     0F FB 01 E6 |  if_be	mov	result1, local01
22ae0     30 00 90 ED |  if_be	jmp	#LR__3113
22ae4     10 13 02 F6 | 	mov	arg01, local02
22ae8     02 12 06 F1 | 	add	arg01, #2
22aec     E4 1D B0 FD | 	call	#__system___gc_alloc_managed
22af0     FD 24 0A F6 | 	mov	local04, result1 wz
22af4     18 00 90 AD |  if_e	jmp	#LR__3112
22af8     12 13 02 F6 | 	mov	arg01, local04
22afc     0F 15 02 F6 | 	mov	arg02, local01
22b00     10 17 02 F6 | 	mov	arg03, local02
22b04     34 DE BF FD | 	call	#__system____builtin_memmove
22b08     12 21 02 F1 | 	add	local02, local04
22b0c     10 01 48 FC | 	wrbyte	#0, local02
22b10                 | LR__3112
22b10     12 FB 01 F6 | 	mov	result1, local04
22b14                 | LR__3113
22b14     A7 F0 03 F6 | 	mov	ptra, fp
22b18     B2 00 A0 FD | 	call	#popregs_
22b1c                 | __system__Left_S_ret
22b1c     2D 00 64 FD | 	ret
22b20                 | 
22b20                 | __system__Right_S
22b20     05 4A 05 F6 | 	mov	COUNT_, #5
22b24     A8 00 A0 FD | 	call	#pushregs_
22b28     09 1F 02 F6 | 	mov	local01, arg01
22b2c     0A 21 02 F6 | 	mov	local02, arg02
22b30     01 20 56 F2 | 	cmps	local02, #1 wc
22b34     81 01 00 CF 
22b38     4B FA 05 C6 |  if_b	mov	result1, ##@LR__5014
22b3c     64 00 90 CD |  if_b	jmp	#LR__3123
22b40     0F 13 02 F6 | 	mov	arg01, local01
22b44     09 23 02 F6 | 	mov	local03, arg01
22b48     97 06 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
22b4c                 | LR__3120
22b4c     11 FB C9 FA | 	rdbyte	result1, local03 wz
22b50     01 22 06 51 |  if_ne	add	local03, #1
22b54     F4 FF 9F 5D |  if_ne	jmp	#LR__3120
22b58                 | LR__3121
22b58     09 23 82 F1 | 	sub	local03, arg01
22b5c     11 FB 01 F6 | 	mov	result1, local03
22b60     FD 24 02 F6 | 	mov	local04, result1
22b64     10 25 5A F2 | 	cmps	local04, local02 wcz
22b68     0F FB 01 E6 |  if_be	mov	result1, local01
22b6c     34 00 90 ED |  if_be	jmp	#LR__3123
22b70     10 13 02 F6 | 	mov	arg01, local02
22b74     02 12 06 F1 | 	add	arg01, #2
22b78     58 1D B0 FD | 	call	#__system___gc_alloc_managed
22b7c     FD 26 0A F6 | 	mov	local05, result1 wz
22b80     1C 00 90 AD |  if_e	jmp	#LR__3122
22b84     10 25 82 F1 | 	sub	local04, local02
22b88     0F 25 02 F1 | 	add	local04, local01
22b8c     01 20 06 F1 | 	add	local02, #1
22b90     13 13 02 F6 | 	mov	arg01, local05
22b94     12 15 02 F6 | 	mov	arg02, local04
22b98     10 17 02 F6 | 	mov	arg03, local02
22b9c     9C DD BF FD | 	call	#__system____builtin_memmove
22ba0                 | LR__3122
22ba0     13 FB 01 F6 | 	mov	result1, local05
22ba4                 | LR__3123
22ba4     A7 F0 03 F6 | 	mov	ptra, fp
22ba8     B2 00 A0 FD | 	call	#popregs_
22bac                 | __system__Right_S_ret
22bac     2D 00 64 FD | 	ret
22bb0                 | 
22bb0                 | __system__Mid_S
22bb0     05 4A 05 F6 | 	mov	COUNT_, #5
22bb4     A8 00 A0 FD | 	call	#pushregs_
22bb8     09 1F 02 F6 | 	mov	local01, arg01
22bbc     0A 21 02 F6 | 	mov	local02, arg02
22bc0     01 16 56 F2 | 	cmps	arg03, #1 wc
22bc4     81 01 00 CF 
22bc8     4C FA 05 C6 |  if_b	mov	result1, ##@LR__5015
22bcc     80 00 90 CD |  if_b	jmp	#LR__3133
22bd0     01 20 86 F1 | 	sub	local02, #1
22bd4     00 20 56 F3 | 	fges	local02, #0 wc
22bd8     0F 13 02 F6 | 	mov	arg01, local01
22bdc     09 23 02 F6 | 	mov	local03, arg01
22be0     97 06 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
22be4                 | LR__3130
22be4     11 FB C9 FA | 	rdbyte	result1, local03 wz
22be8     01 22 06 51 |  if_ne	add	local03, #1
22bec     F4 FF 9F 5D |  if_ne	jmp	#LR__3130
22bf0                 | LR__3131
22bf0     09 23 82 F1 | 	sub	local03, arg01
22bf4     11 FB 01 F6 | 	mov	result1, local03
22bf8     FD 14 02 F6 | 	mov	arg02, result1
22bfc     10 15 52 F2 | 	cmps	arg02, local02 wc
22c00     81 01 00 CF 
22c04     4D FA 05 C6 |  if_b	mov	result1, ##@LR__5016
22c08     44 00 90 CD |  if_b	jmp	#LR__3133
22c0c     0A 25 02 F6 | 	mov	local04, arg02
22c10     10 25 82 F1 | 	sub	local04, local02
22c14     0B 25 5A F2 | 	cmps	local04, arg03 wcz
22c18     0B 25 02 16 |  if_a	mov	local04, arg03
22c1c     12 13 02 F6 | 	mov	arg01, local04
22c20     02 12 06 F1 | 	add	arg01, #2
22c24     AC 1C B0 FD | 	call	#__system___gc_alloc_managed
22c28     FD 26 0A F6 | 	mov	local05, result1 wz
22c2c     1C 00 90 AD |  if_e	jmp	#LR__3132
22c30     0F 21 02 F1 | 	add	local02, local01
22c34     13 13 02 F6 | 	mov	arg01, local05
22c38     10 15 02 F6 | 	mov	arg02, local02
22c3c     12 17 02 F6 | 	mov	arg03, local04
22c40     F8 DC BF FD | 	call	#__system____builtin_memmove
22c44     13 25 02 F1 | 	add	local04, local05
22c48     12 01 48 FC | 	wrbyte	#0, local04
22c4c                 | LR__3132
22c4c     13 FB 01 F6 | 	mov	result1, local05
22c50                 | LR__3133
22c50     A7 F0 03 F6 | 	mov	ptra, fp
22c54     B2 00 A0 FD | 	call	#popregs_
22c58                 | __system__Mid_S_ret
22c58     2D 00 64 FD | 	ret
22c5c                 | 
22c5c                 | __system__Chr_S
22c5c     01 4A 05 F6 | 	mov	COUNT_, #1
22c60     A8 00 A0 FD | 	call	#pushregs_
22c64     09 1F 02 F6 | 	mov	local01, arg01
22c68     03 12 06 F6 | 	mov	arg01, #3
22c6c     64 1C B0 FD | 	call	#__system___gc_alloc_managed
22c70     00 FA 4D F2 | 	cmps	result1, #0 wz
22c74     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
22c78     01 FA 05 51 |  if_ne	add	result1, #1
22c7c     FD 00 48 5C |  if_ne	wrbyte	#0, result1
22c80     01 FA 85 51 |  if_ne	sub	result1, #1
22c84     A7 F0 03 F6 | 	mov	ptra, fp
22c88     B2 00 A0 FD | 	call	#popregs_
22c8c                 | __system__Chr_S_ret
22c8c     2D 00 64 FD | 	ret
22c90                 | 
22c90                 | __system__str_S
22c90     02 4A 05 F6 | 	mov	COUNT_, #2
22c94     A8 00 A0 FD | 	call	#pushregs_
22c98     09 1F 02 F6 | 	mov	local01, arg01
22c9c     10 12 06 F6 | 	mov	arg01, #16
22ca0     30 1C B0 FD | 	call	#__system___gc_alloc_managed
22ca4     FD 20 0A F6 | 	mov	local02, result1 wz
22ca8     30 00 90 AD |  if_e	jmp	#LR__3140
22cac     F8 13 02 F6 | 	mov	arg01, ptra
22cb0     08 F0 07 F1 | 	add	ptra, #8
22cb4     09 21 62 FC | 	wrlong	local02, arg01
22cb8     04 12 06 F1 | 	add	arg01, #4
22cbc     09 01 68 FC | 	wrlong	#0, arg01
22cc0     04 12 86 F1 | 	sub	arg01, #4
22cc4     00 A8 04 FF 
22cc8     00 12 46 F5 | 	or	arg01, ##156237824
22ccc     00 14 06 F6 | 	mov	arg02, #0
22cd0     0F 17 02 F6 | 	mov	arg03, local01
22cd4     67 18 06 F6 | 	mov	arg04, #103
22cd8     90 EE BF FD | 	call	#__system___fmtfloat
22cdc                 | LR__3140
22cdc     10 FB 01 F6 | 	mov	result1, local02
22ce0     A7 F0 03 F6 | 	mov	ptra, fp
22ce4     B2 00 A0 FD | 	call	#popregs_
22ce8                 | __system__str_S_ret
22ce8     2D 00 64 FD | 	ret
22cec                 | 
22cec                 | __system__Number_S
22cec     08 4A 05 F6 | 	mov	COUNT_, #8
22cf0     A8 00 A0 FD | 	call	#pushregs_
22cf4     09 1F 02 F6 | 	mov	local01, arg01
22cf8     0A 21 0A F6 | 	mov	local02, arg02 wz
22cfc     0B 23 02 F6 | 	mov	local03, arg03
22d00     3C 00 90 5D |  if_ne	jmp	#LR__3152
22d04     01 20 06 F6 | 	mov	local02, #1
22d08     11 25 02 F6 | 	mov	local04, local03
22d0c     01 26 06 F6 | 	mov	local05, #1
22d10     97 16 48 FB | 	callpa	#(@LR__3151-@LR__3150)>>2,fcache_load_ptr_
22d14                 | LR__3150
22d14     00 28 06 F6 | 	mov	local06, #0
22d18     0F 25 1A F2 | 	cmp	local04, local01 wcz
22d1c     01 28 66 E6 |  if_be	neg	local06, #1
22d20     12 27 12 F2 | 	cmp	local05, local04 wc
22d24     15 2B A2 F1 | 	subx	local07, local07
22d28     15 29 CA F7 | 	test	local06, local07 wz
22d2c     11 25 02 5D |  if_ne	qmul	local04, local03
22d30     12 27 02 56 |  if_ne	mov	local05, local04
22d34     01 20 06 51 |  if_ne	add	local02, #1
22d38     18 24 62 5D |  if_ne	getqx	local04
22d3c     D4 FF 9F 5D |  if_ne	jmp	#LR__3150
22d40                 | LR__3151
22d40                 | LR__3152
22d40     20 20 36 F3 | 	fle	local02, #32 wc
22d44     10 13 02 F6 | 	mov	arg01, local02
22d48     02 12 06 F1 | 	add	arg01, #2
22d4c     84 1B B0 FD | 	call	#__system___gc_alloc_managed
22d50     FD 28 02 F6 | 	mov	local06, result1
22d54     10 2B 02 F6 | 	mov	local07, local02
22d58     14 2B 02 F1 | 	add	local07, local06
22d5c     15 01 48 FC | 	wrbyte	#0, local07
22d60     97 1A 48 FB | 	callpa	#(@LR__3154-@LR__3153)>>2,fcache_load_ptr_
22d64                 | LR__3153
22d64     01 20 16 F2 | 	cmp	local02, #1 wc
22d68     2C 00 90 CD |  if_b	jmp	#LR__3155
22d6c     11 1F 12 FD | 	qdiv	local01, local03
22d70     01 20 86 F1 | 	sub	local02, #1
22d74     10 2B 02 F6 | 	mov	local07, local02
22d78     14 2B 02 F1 | 	add	local07, local06
22d7c     19 2C 62 FD | 	getqy	local08
22d80     0A 2C 16 F2 | 	cmp	local08, #10 wc
22d84     30 2C 06 C1 |  if_b	add	local08, #48
22d88     37 2C 06 31 |  if_ae	add	local08, #55
22d8c     15 2D 42 FC | 	wrbyte	local08, local07
22d90     18 1E 62 FD | 	getqx	local01
22d94     CC FF 9F FD | 	jmp	#LR__3153
22d98                 | LR__3154
22d98                 | LR__3155
22d98     14 FB 01 F6 | 	mov	result1, local06
22d9c     A7 F0 03 F6 | 	mov	ptra, fp
22da0     B2 00 A0 FD | 	call	#popregs_
22da4                 | __system__Number_S_ret
22da4     2D 00 64 FD | 	ret
22da8                 | 
22da8                 | __system__LCase_S
22da8     07 4A 05 F6 | 	mov	COUNT_, #7
22dac     A8 00 A0 FD | 	call	#pushregs_
22db0     09 1F 02 F6 | 	mov	local01, arg01
22db4     09 21 02 F6 | 	mov	local02, arg01
22db8     97 06 48 FB | 	callpa	#(@LR__3161-@LR__3160)>>2,fcache_load_ptr_
22dbc                 | LR__3160
22dbc     10 FB C9 FA | 	rdbyte	result1, local02 wz
22dc0     01 20 06 51 |  if_ne	add	local02, #1
22dc4     F4 FF 9F 5D |  if_ne	jmp	#LR__3160
22dc8                 | LR__3161
22dc8     09 21 82 F1 | 	sub	local02, arg01
22dcc     10 FB 01 F6 | 	mov	result1, local02
22dd0     FD 20 0A F6 | 	mov	local02, result1 wz
22dd4     81 01 00 AF 
22dd8     4E FA 05 A6 |  if_e	mov	result1, ##@LR__5017
22ddc     7C 00 90 AD |  if_e	jmp	#LR__3167
22de0     10 13 02 F6 | 	mov	arg01, local02
22de4     02 12 06 F1 | 	add	arg01, #2
22de8     E8 1A B0 FD | 	call	#__system___gc_alloc_managed
22dec     FD 22 0A F6 | 	mov	local03, result1 wz
22df0     64 00 90 AD |  if_e	jmp	#LR__3166
22df4     01 24 66 F6 | 	neg	local04, #1
22df8     97 26 48 FB | 	callpa	#(@LR__3165-@LR__3162)>>2,fcache_load_ptr_
22dfc                 | LR__3162
22dfc     01 24 06 F1 | 	add	local04, #1
22e00     12 27 02 F6 | 	mov	local05, local04
22e04     0F 27 02 F1 | 	add	local05, local01
22e08     13 29 C2 FA | 	rdbyte	local06, local05
22e0c     41 28 56 F2 | 	cmps	local06, #65 wc
22e10     18 00 90 CD |  if_b	jmp	#LR__3163
22e14     5B 28 56 F2 | 	cmps	local06, #91 wc
22e18     12 2B 02 C6 |  if_b	mov	local07, local04
22e1c     11 2B 02 C1 |  if_b	add	local07, local03
22e20     20 28 06 C1 |  if_b	add	local06, #32
22e24     15 29 42 CC |  if_b	wrbyte	local06, local07
22e28     0C 00 90 CD |  if_b	jmp	#LR__3164
22e2c                 | LR__3163
22e2c     12 2B 02 F6 | 	mov	local07, local04
22e30     11 2B 02 F1 | 	add	local07, local03
22e34     15 29 42 FC | 	wrbyte	local06, local07
22e38                 | LR__3164
22e38     10 29 02 F6 | 	mov	local06, local02
22e3c     01 28 86 F1 | 	sub	local06, #1
22e40     14 25 0A F2 | 	cmp	local04, local06 wz
22e44     B4 FF 9F 5D |  if_ne	jmp	#LR__3162
22e48                 | LR__3165
22e48     11 21 02 F1 | 	add	local02, local03
22e4c     10 01 48 FC | 	wrbyte	#0, local02
22e50     11 FB 01 F6 | 	mov	result1, local03
22e54     04 00 90 FD | 	jmp	#LR__3167
22e58                 | LR__3166
22e58     11 FB 01 F6 | 	mov	result1, local03
22e5c                 | LR__3167
22e5c     A7 F0 03 F6 | 	mov	ptra, fp
22e60     B2 00 A0 FD | 	call	#popregs_
22e64                 | __system__LCase_S_ret
22e64     2D 00 64 FD | 	ret
22e68                 | 
22e68                 | __system__LTrim_S
22e68     05 4A 05 F6 | 	mov	COUNT_, #5
22e6c     A8 00 A0 FD | 	call	#pushregs_
22e70     09 1F 02 F6 | 	mov	local01, arg01
22e74     09 21 02 F6 | 	mov	local02, arg01
22e78     97 06 48 FB | 	callpa	#(@LR__3171-@LR__3170)>>2,fcache_load_ptr_
22e7c                 | LR__3170
22e7c     10 FB C9 FA | 	rdbyte	result1, local02 wz
22e80     01 20 06 51 |  if_ne	add	local02, #1
22e84     F4 FF 9F 5D |  if_ne	jmp	#LR__3170
22e88                 | LR__3171
22e88     09 21 82 F1 | 	sub	local02, arg01
22e8c     10 FB 01 F6 | 	mov	result1, local02
22e90     FD 20 0A F6 | 	mov	local02, result1 wz
22e94     81 01 00 AF 
22e98     4F FA 05 A6 |  if_e	mov	result1, ##@LR__5018
22e9c     7C 00 90 AD |  if_e	jmp	#LR__3176
22ea0     00 22 06 F6 | 	mov	local03, #0
22ea4     10 25 02 F6 | 	mov	local04, local02
22ea8                 | LR__3172
22ea8     12 23 52 F2 | 	cmps	local03, local04 wc
22eac     68 00 90 3D |  if_ae	jmp	#LR__3175
22eb0     11 17 02 F6 | 	mov	arg03, local03
22eb4     0F 17 02 F1 | 	add	arg03, local01
22eb8     0B 17 C2 FA | 	rdbyte	arg03, arg03
22ebc     20 16 0E F2 | 	cmp	arg03, #32 wz
22ec0     4C 00 90 AD |  if_e	jmp	#LR__3174
22ec4     10 13 02 F6 | 	mov	arg01, local02
22ec8     11 13 82 F1 | 	sub	arg01, local03
22ecc     02 12 06 F1 | 	add	arg01, #2
22ed0     00 1A B0 FD | 	call	#__system___gc_alloc_managed
22ed4     FD 26 0A F6 | 	mov	local05, result1 wz
22ed8     2C 00 90 AD |  if_e	jmp	#LR__3173
22edc     11 15 02 F6 | 	mov	arg02, local03
22ee0     0F 15 02 F1 | 	add	arg02, local01
22ee4     10 17 02 F6 | 	mov	arg03, local02
22ee8     11 17 82 F1 | 	sub	arg03, local03
22eec     13 13 02 F6 | 	mov	arg01, local05
22ef0     48 DA BF FD | 	call	#__system____builtin_memmove
22ef4     11 21 82 F1 | 	sub	local02, local03
22ef8     13 21 02 F1 | 	add	local02, local05
22efc     10 01 48 FC | 	wrbyte	#0, local02
22f00     13 FB 01 F6 | 	mov	result1, local05
22f04     14 00 90 FD | 	jmp	#LR__3176
22f08                 | LR__3173
22f08     13 FB 01 F6 | 	mov	result1, local05
22f0c     0C 00 90 FD | 	jmp	#LR__3176
22f10                 | LR__3174
22f10     01 22 06 F1 | 	add	local03, #1
22f14     90 FF 9F FD | 	jmp	#LR__3172
22f18                 | LR__3175
22f18     0F FB 01 F6 | 	mov	result1, local01
22f1c                 | LR__3176
22f1c     A7 F0 03 F6 | 	mov	ptra, fp
22f20     B2 00 A0 FD | 	call	#popregs_
22f24                 | __system__LTrim_S_ret
22f24     2D 00 64 FD | 	ret
22f28                 | 
22f28                 | __system__RTrim_S
22f28     04 4A 05 F6 | 	mov	COUNT_, #4
22f2c     A8 00 A0 FD | 	call	#pushregs_
22f30     09 1F 02 F6 | 	mov	local01, arg01
22f34     09 21 02 F6 | 	mov	local02, arg01
22f38     97 06 48 FB | 	callpa	#(@LR__3181-@LR__3180)>>2,fcache_load_ptr_
22f3c                 | LR__3180
22f3c     10 FB C9 FA | 	rdbyte	result1, local02 wz
22f40     01 20 06 51 |  if_ne	add	local02, #1
22f44     F4 FF 9F 5D |  if_ne	jmp	#LR__3180
22f48                 | LR__3181
22f48     09 21 82 F1 | 	sub	local02, arg01
22f4c     10 FB 01 F6 | 	mov	result1, local02
22f50     FD 20 0A F6 | 	mov	local02, result1 wz
22f54     81 01 00 AF 
22f58     50 FA 05 A6 |  if_e	mov	result1, ##@LR__5019
22f5c     74 00 90 AD |  if_e	jmp	#LR__3185
22f60     10 23 02 F6 | 	mov	local03, local02
22f64     01 22 86 F1 | 	sub	local03, #1
22f68                 | LR__3182
22f68     11 15 02 F6 | 	mov	arg02, local03
22f6c     0F 15 02 F1 | 	add	arg02, local01
22f70     0A 21 C2 FA | 	rdbyte	local02, arg02
22f74     20 20 0E F2 | 	cmp	local02, #32 wz
22f78     44 00 90 AD |  if_e	jmp	#LR__3184
22f7c     11 13 02 F6 | 	mov	arg01, local03
22f80     02 12 06 F1 | 	add	arg01, #2
22f84     4C 19 B0 FD | 	call	#__system___gc_alloc_managed
22f88     FD 24 0A F6 | 	mov	local04, result1 wz
22f8c     28 00 90 AD |  if_e	jmp	#LR__3183
22f90     11 17 02 F6 | 	mov	arg03, local03
22f94     01 16 06 F1 | 	add	arg03, #1
22f98     12 13 02 F6 | 	mov	arg01, local04
22f9c     0F 15 02 F6 | 	mov	arg02, local01
22fa0     98 D9 BF FD | 	call	#__system____builtin_memmove
22fa4     01 22 06 F1 | 	add	local03, #1
22fa8     12 23 02 F1 | 	add	local03, local04
22fac     11 01 48 FC | 	wrbyte	#0, local03
22fb0     12 FB 01 F6 | 	mov	result1, local04
22fb4     1C 00 90 FD | 	jmp	#LR__3185
22fb8                 | LR__3183
22fb8     12 FB 01 F6 | 	mov	result1, local04
22fbc     14 00 90 FD | 	jmp	#LR__3185
22fc0                 | LR__3184
22fc0     01 22 86 F1 | 	sub	local03, #1
22fc4     00 22 56 F2 | 	cmps	local03, #0 wc
22fc8     9C FF 9F 3D |  if_ae	jmp	#LR__3182
22fcc     81 01 00 FF 
22fd0     51 FA 05 F6 | 	mov	result1, ##@LR__5020
22fd4                 | LR__3185
22fd4     A7 F0 03 F6 | 	mov	ptra, fp
22fd8     B2 00 A0 FD | 	call	#popregs_
22fdc                 | __system__RTrim_S_ret
22fdc     2D 00 64 FD | 	ret
22fe0                 | 
22fe0                 | __system__Instr
22fe0     07 4A 05 F6 | 	mov	COUNT_, #7
22fe4     A8 00 A0 FD | 	call	#pushregs_
22fe8     09 1F 02 F6 | 	mov	local01, arg01
22fec     0A 21 02 F6 | 	mov	local02, arg02
22ff0     0B 23 02 F6 | 	mov	local03, arg03
22ff4     11 13 02 F6 | 	mov	arg01, local03
22ff8     09 25 02 F6 | 	mov	local04, arg01
22ffc     97 06 48 FB | 	callpa	#(@LR__3191-@LR__3190)>>2,fcache_load_ptr_
23000                 | LR__3190
23000     12 FB C9 FA | 	rdbyte	result1, local04 wz
23004     01 24 06 51 |  if_ne	add	local04, #1
23008     F4 FF 9F 5D |  if_ne	jmp	#LR__3190
2300c                 | LR__3191
2300c     09 25 82 F1 | 	sub	local04, arg01
23010     12 27 02 F6 | 	mov	local05, local04
23014     10 13 02 F6 | 	mov	arg01, local02
23018     09 25 02 F6 | 	mov	local04, arg01
2301c     97 06 48 FB | 	callpa	#(@LR__3193-@LR__3192)>>2,fcache_load_ptr_
23020                 | LR__3192
23020     12 FB C9 FA | 	rdbyte	result1, local04 wz
23024     01 24 06 51 |  if_ne	add	local04, #1
23028     F4 FF 9F 5D |  if_ne	jmp	#LR__3192
2302c                 | LR__3193
2302c     09 25 82 F1 | 	sub	local04, arg01
23030     12 FB 01 F6 | 	mov	result1, local04
23034     FD 18 0A F6 | 	mov	arg04, result1 wz
23038     00 FA 05 A6 |  if_e	mov	result1, #0
2303c     98 00 90 AD |  if_e	jmp	#LR__3197
23040     00 26 0E F2 | 	cmp	local05, #0 wz
23044     00 FA 05 A6 |  if_e	mov	result1, #0
23048     8C 00 90 AD |  if_e	jmp	#LR__3197
2304c     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
23050     00 FA 05 16 |  if_a	mov	result1, #0
23054     80 00 90 1D |  if_a	jmp	#LR__3197
23058     01 1E 56 F2 | 	cmps	local01, #1 wc
2305c     01 1E 06 C6 |  if_b	mov	local01, #1
23060     11 29 C2 FA | 	rdbyte	local06, local03
23064     01 26 0E F2 | 	cmp	local05, #1 wz
23068     18 00 90 5D |  if_ne	jmp	#LR__3194
2306c     10 13 02 F6 | 	mov	arg01, local02
23070     14 15 02 F6 | 	mov	arg02, local06
23074     0F 17 02 F6 | 	mov	arg03, local01
23078     00 18 06 F6 | 	mov	arg04, #0
2307c     2C 34 B0 FD | 	call	#__system____ScanForChar
23080     54 00 90 FD | 	jmp	#LR__3197
23084                 | LR__3194
23084     0F 2B 02 F6 | 	mov	local07, local01
23088                 | LR__3195
23088     10 13 02 F6 | 	mov	arg01, local02
2308c     14 15 02 F6 | 	mov	arg02, local06
23090     15 17 02 F6 | 	mov	arg03, local07
23094     00 18 06 F6 | 	mov	arg04, #0
23098     10 34 B0 FD | 	call	#__system____ScanForChar
2309c     FD 2A 0A F6 | 	mov	local07, result1 wz
230a0     30 00 90 AD |  if_e	jmp	#LR__3196
230a4     13 17 02 F6 | 	mov	arg03, local05
230a8     10 13 02 F6 | 	mov	arg01, local02
230ac     15 15 02 F6 | 	mov	arg02, local07
230b0     FC FA BF FD | 	call	#__system__Mid_S
230b4     FD 12 02 F6 | 	mov	arg01, result1
230b8     11 15 02 F6 | 	mov	arg02, local03
230bc     84 D9 BF FD | 	call	#__system___string_cmp
230c0     00 FA 0D F2 | 	cmp	result1, #0 wz
230c4     15 FB 01 A6 |  if_e	mov	result1, local07
230c8     0C 00 90 AD |  if_e	jmp	#LR__3197
230cc     13 2B 02 F1 | 	add	local07, local05
230d0     B4 FF 9F FD | 	jmp	#LR__3195
230d4                 | LR__3196
230d4     00 FA 05 F6 | 	mov	result1, #0
230d8                 | LR__3197
230d8     A7 F0 03 F6 | 	mov	ptra, fp
230dc     B2 00 A0 FD | 	call	#popregs_
230e0                 | __system__Instr_ret
230e0     2D 00 64 FD | 	ret
230e4                 | 
230e4                 | __system___strerror
230e4     00 12 56 F2 | 	cmps	arg01, #0 wc
230e8     08 00 90 CD |  if_b	jmp	#LR__3200
230ec     1A 12 56 F2 | 	cmps	arg01, #26 wc
230f0     04 00 90 CD |  if_b	jmp	#LR__3201
230f4                 | LR__3200
230f4     19 12 06 F6 | 	mov	arg01, #25
230f8                 | LR__3201
230f8     02 12 66 F0 | 	shl	arg01, #2
230fc     01 00 00 FF 
23100     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
23104     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
23108     09 FB 01 FB | 	rdlong	result1, arg01
2310c     01 00 00 FF 
23110     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
23114                 | __system___strerror_ret
23114     2D 00 64 FD | 	ret
23118                 | 
23118                 | __system___int64_shl
23118     20 16 CE F7 | 	test	arg03, #32 wz
2311c     09 15 02 56 |  if_ne	mov	arg02, arg01
23120     00 12 06 56 |  if_ne	mov	arg01, #0
23124     1F 16 CE F7 | 	test	arg03, #31 wz
23128     18 00 90 AD |  if_e	jmp	#LR__3210
2312c     0B 15 62 F0 | 	shl	arg02, arg03
23130     09 FB 01 F6 | 	mov	result1, arg01
23134     0B FD 61 F6 | 	neg	result2, arg03
23138     FE FA 41 F0 | 	shr	result1, result2
2313c     FD 14 42 F5 | 	or	arg02, result1
23140     0B 13 62 F0 | 	shl	arg01, arg03
23144                 | LR__3210
23144     0A FD 01 F6 | 	mov	result2, arg02
23148     09 FB 01 F6 | 	mov	result1, arg01
2314c                 | __system___int64_shl_ret
2314c     2D 00 64 FD | 	ret
23150                 | 
23150                 | __system___usepins
23150     14 E6 05 F1 | 	add	ptr___system__dat__, #20
23154     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
23158     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
2315c     00 13 CA F7 | 	test	arg01, _var01 wz
23160     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
23164     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
23168     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
2316c     01 15 CA A7 |  if_e	test	arg02, _var02 wz
23170     00 FA 05 56 |  if_ne	mov	result1, #0
23174     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
23178     14 E6 05 F1 | 	add	ptr___system__dat__, #20
2317c     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
23180     09 03 42 F5 | 	or	_var02, arg01
23184     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
23188     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2318c     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
23190     0A 03 42 F5 | 	or	_var02, arg02
23194     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
23198     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
2319c     01 FA 65 F6 | 	neg	result1, #1
231a0                 | __system___usepins_ret
231a0     2D 00 64 FD | 	ret
231a4                 | 
231a4                 | __system___freepins
231a4     14 E6 05 F1 | 	add	ptr___system__dat__, #20
231a8     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
231ac     09 01 22 F5 | 	andn	_var01, arg01
231b0     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
231b4     04 E6 05 F1 | 	add	ptr___system__dat__, #4
231b8     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
231bc     0A 01 22 F5 | 	andn	_var01, arg02
231c0     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
231c4     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
231c8                 | __system___freepins_ret
231c8     2D 00 64 FD | 	ret
231cc                 | 
231cc                 | __system___float_fromuns
231cc     09 17 0A F6 | 	mov	arg03, arg01 wz
231d0     0B FB 01 A6 |  if_e	mov	result1, arg03
231d4     24 00 90 AD |  if_e	jmp	#LR__3220
231d8     0B 15 92 F7 | 	encod	arg02, arg03 wc
231dc     01 14 06 C1 |  if_b	add	arg02, #1
231e0     01 14 86 F1 | 	sub	arg02, #1
231e4     1F 12 06 F6 | 	mov	arg01, #31
231e8     0A 13 82 F1 | 	sub	arg01, arg02
231ec     09 17 62 F0 | 	shl	arg03, arg01
231f0     02 16 46 F0 | 	shr	arg03, #2
231f4     00 12 06 F6 | 	mov	arg01, #0
231f8     4C 09 B0 FD | 	call	#__system___float_Pack
231fc                 | LR__3220
231fc                 | __system___float_fromuns_ret
231fc     2D 00 64 FD | 	ret
23200                 | 
23200                 | __system___float_add
23200     0F 4A 05 F6 | 	mov	COUNT_, #15
23204     A8 00 A0 FD | 	call	#pushregs_
23208     09 1F 02 F6 | 	mov	local01, arg01
2320c     0A 21 02 F6 | 	mov	local02, arg02
23210     00 22 06 F6 | 	mov	local03, #0
23214     0F 25 02 F6 | 	mov	local04, local01
23218     12 27 02 F6 | 	mov	local05, local04
2321c     16 26 46 F7 | 	zerox	local05, #22
23220     12 29 02 F6 | 	mov	local06, local04
23224     01 28 66 F0 | 	shl	local06, #1
23228     18 28 46 F0 | 	shr	local06, #24
2322c     1F 24 46 F0 | 	shr	local04, #31
23230     10 13 02 F6 | 	mov	arg01, local02
23234     09 FB 01 F6 | 	mov	result1, arg01
23238     FD 2A 02 F6 | 	mov	local07, result1
2323c     15 2D 02 F6 | 	mov	local08, local07
23240     16 2C 46 F7 | 	zerox	local08, #22
23244     15 2F 02 F6 | 	mov	local09, local07
23248     01 2E 66 F0 | 	shl	local09, #1
2324c     18 2E 46 F0 | 	shr	local09, #24
23250     17 31 02 F6 | 	mov	local10, local09
23254     1F 2A 46 F0 | 	shr	local07, #31
23258     00 32 06 F6 | 	mov	local11, #0
2325c     00 34 06 F6 | 	mov	local12, #0
23260     18 29 12 F2 | 	cmp	local06, local10 wc
23264     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
23268     2C 00 90 1D |  if_a	jmp	#LR__3230
2326c     16 27 12 32 |  if_ae	cmp	local05, local08 wc
23270     24 00 90 3D |  if_ae	jmp	#LR__3230
23274     13 37 02 F6 | 	mov	local13, local05
23278     16 27 02 F6 | 	mov	local05, local08
2327c     1B 2D 02 F6 | 	mov	local08, local13
23280     14 37 02 F6 | 	mov	local13, local06
23284     18 29 02 F6 | 	mov	local06, local10
23288     1B 31 02 F6 | 	mov	local10, local13
2328c     12 37 02 F6 | 	mov	local13, local04
23290     15 25 02 F6 | 	mov	local04, local07
23294     1B 2B 02 F6 | 	mov	local07, local13
23298                 | LR__3230
23298     FF 28 0E F2 | 	cmp	local06, #255 wz
2329c     70 01 90 AD |  if_e	jmp	#LR__3245
232a0     00 28 0E F2 | 	cmp	local06, #0 wz
232a4     AC 01 90 AD |  if_e	jmp	#LR__3247
232a8     17 26 26 F4 | 	bith	local05, #23
232ac                 | LR__3231
232ac     00 30 0E F2 | 	cmp	local10, #0 wz
232b0     F0 01 90 AD |  if_e	jmp	#LR__3251
232b4     17 2C 26 F4 | 	bith	local08, #23
232b8                 | LR__3232
232b8     7F 28 86 F1 | 	sub	local06, #127
232bc     7F 30 86 F1 | 	sub	local10, #127
232c0     14 39 02 F6 | 	mov	local14, local06
232c4     18 39 82 F1 | 	sub	local14, local10
232c8     97 14 48 FB | 	callpa	#(@LR__3234-@LR__3233)>>2,fcache_load_ptr_
232cc                 | LR__3233
232cc     20 38 56 F2 | 	cmps	local14, #32 wc
232d0     20 00 90 CD |  if_b	jmp	#LR__3235
232d4     16 2F 02 F6 | 	mov	local09, local08
232d8     00 32 0E F2 | 	cmp	local11, #0 wz
232dc     6F 32 62 FD | 	wrnz	local11
232e0     19 2F 42 F5 | 	or	local09, local11
232e4     17 33 02 F6 | 	mov	local11, local09
232e8     00 2C 06 F6 | 	mov	local08, #0
232ec     20 38 86 F1 | 	sub	local14, #32
232f0     D8 FF 9F FD | 	jmp	#LR__3233
232f4                 | LR__3234
232f4                 | LR__3235
232f4     00 38 0E F2 | 	cmp	local14, #0 wz
232f8     38 00 90 AD |  if_e	jmp	#LR__3236
232fc     16 37 02 F6 | 	mov	local13, local08
23300     20 30 06 F6 | 	mov	local10, #32
23304     1C 31 82 F1 | 	sub	local10, local14
23308     18 37 62 F0 | 	shl	local13, local10
2330c     19 31 02 F6 | 	mov	local10, local11
23310     20 2E 06 F6 | 	mov	local09, #32
23314     1C 2F 82 F1 | 	sub	local09, local14
23318     17 31 6A F0 | 	shl	local10, local09 wz
2331c     1C 33 42 F0 | 	shr	local11, local14
23320     1C 2D 42 F0 | 	shr	local08, local14
23324     1B 33 42 F5 | 	or	local11, local13
23328     00 3A 06 F6 | 	mov	local15, #0
2332c     01 3A 06 56 |  if_ne	mov	local15, #1
23330     1D 33 42 F5 | 	or	local11, local15
23334                 | LR__3236
23334     12 3B 02 F6 | 	mov	local15, local04
23338     15 3B 62 F5 | 	xor	local15, local07
2333c     01 3A CE F7 | 	test	local15, #1 wz
23340     18 00 90 AD |  if_e	jmp	#LR__3237
23344     16 2D 22 F6 | 	not	local08, local08
23348     19 33 22 F6 | 	not	local11, local11
2334c     01 32 0E F1 | 	add	local11, #1 wz
23350     00 3A 06 F6 | 	mov	local15, #0
23354     01 3A 06 A6 |  if_e	mov	local15, #1
23358     1D 2D 02 F1 | 	add	local08, local15
2335c                 | LR__3237
2335c     19 35 12 F1 | 	add	local12, local11 wc
23360     16 27 22 F1 | 	addx	local05, local08
23364     00 26 56 F2 | 	cmps	local05, #0 wc
23368     1C 00 90 3D |  if_ae	jmp	#LR__3238
2336c     01 24 66 F5 | 	xor	local04, #1
23370     13 27 22 F6 | 	not	local05, local05
23374     1A 35 22 F6 | 	not	local12, local12
23378     01 34 0E F1 | 	add	local12, #1 wz
2337c     00 3A 06 F6 | 	mov	local15, #0
23380     01 3A 06 A6 |  if_e	mov	local15, #1
23384     1D 27 02 F1 | 	add	local05, local15
23388                 | LR__3238
23388     00 80 00 FF 
2338c     00 26 16 F2 | 	cmp	local05, ##16777216 wc
23390     28 00 90 CD |  if_b	jmp	#LR__3239
23394     01 28 06 F1 | 	add	local06, #1
23398     1A 39 02 F6 | 	mov	local14, local12
2339c     01 38 06 F5 | 	and	local14, #1
233a0     01 34 46 F0 | 	shr	local12, #1
233a4     13 3B 02 F6 | 	mov	local15, local05
233a8     1F 3A 66 F0 | 	shl	local15, #31
233ac     1D 35 42 F5 | 	or	local12, local15
233b0     1C 35 42 F5 | 	or	local12, local14
233b4     01 26 46 F0 | 	shr	local05, #1
233b8     3C 00 90 FD | 	jmp	#LR__3244
233bc                 | LR__3239
233bc     00 40 00 FF 
233c0     00 26 16 F2 | 	cmp	local05, ##8388608 wc
233c4     30 00 90 3D |  if_ae	jmp	#LR__3243
233c8     00 26 0E F2 | 	cmp	local05, #0 wz
233cc     00 34 0E A2 |  if_e	cmp	local12, #0 wz
233d0     08 24 46 A5 |  if_e	or	local04, #8
233d4     01 24 26 A5 |  if_e	andn	local04, #1
233d8     1C 00 90 AD |  if_e	jmp	#LR__3242
233dc                 | LR__3240
233dc     00 40 00 FF 
233e0     00 26 16 F2 | 	cmp	local05, ##8388608 wc
233e4     10 00 90 3D |  if_ae	jmp	#LR__3241
233e8     1A 35 12 F1 | 	add	local12, local12 wc
233ec     13 27 22 F1 | 	addx	local05, local05
233f0     01 28 86 F1 | 	sub	local06, #1
233f4     E4 FF 9F FD | 	jmp	#LR__3240
233f8                 | LR__3241
233f8                 | LR__3242
233f8                 | LR__3243
233f8                 | LR__3244
233f8     13 13 02 F6 | 	mov	arg01, local05
233fc     1A 15 02 F6 | 	mov	arg02, local12
23400     14 17 02 F6 | 	mov	arg03, local06
23404     12 19 02 F6 | 	mov	arg04, local04
23408     E4 34 B0 FD | 	call	#__system__pack_0606
2340c     DC 00 90 FD | 	jmp	#LR__3255
23410                 | LR__3245
23410     FF 30 0E F2 | 	cmp	local10, #255 wz
23414     10 00 90 5D |  if_ne	jmp	#LR__3246
23418     12 2B 0A F2 | 	cmp	local07, local04 wz
2341c     00 F8 3F 5F 
23420     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
23424     C4 00 90 5D |  if_ne	jmp	#LR__3255
23428                 | LR__3246
23428     00 26 0E F2 | 	cmp	local05, #0 wz
2342c     00 F8 3F 5F 
23430     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
23434     B4 00 90 5D |  if_ne	jmp	#LR__3255
23438     1A 15 02 F6 | 	mov	arg02, local12
2343c     14 17 02 F6 | 	mov	arg03, local06
23440     12 19 02 F6 | 	mov	arg04, local04
23444     02 18 46 F5 | 	or	arg04, #2
23448     13 13 02 F6 | 	mov	arg01, local05
2344c     A0 34 B0 FD | 	call	#__system__pack_0606
23450     98 00 90 FD | 	jmp	#LR__3255
23454                 | LR__3247
23454     00 26 0E F2 | 	cmp	local05, #0 wz
23458     28 00 90 AD |  if_e	jmp	#LR__3250
2345c     01 26 66 F0 | 	shl	local05, #1
23460     97 0E 48 FB | 	callpa	#(@LR__3249-@LR__3248)>>2,fcache_load_ptr_
23464                 | LR__3248
23464     00 40 00 FF 
23468     00 26 16 F2 | 	cmp	local05, ##8388608 wc
2346c     14 3B 02 C6 |  if_b	mov	local15, local06
23470     01 3A 86 C1 |  if_b	sub	local15, #1
23474     1D 29 02 C6 |  if_b	mov	local06, local15
23478     01 26 66 C0 |  if_b	shl	local05, #1
2347c     E4 FF 9F CD |  if_b	jmp	#LR__3248
23480                 | LR__3249
23480     28 FE 9F FD | 	jmp	#LR__3231
23484                 | LR__3250
23484     15 25 02 F5 | 	and	local04, local07
23488     12 19 02 F6 | 	mov	arg04, local04
2348c     08 18 46 F5 | 	or	arg04, #8
23490     00 12 06 F6 | 	mov	arg01, #0
23494     00 14 06 F6 | 	mov	arg02, #0
23498     00 16 06 F6 | 	mov	arg03, #0
2349c     50 34 B0 FD | 	call	#__system__pack_0606
234a0     48 00 90 FD | 	jmp	#LR__3255
234a4                 | LR__3251
234a4     00 2C 0E F2 | 	cmp	local08, #0 wz
234a8     28 00 90 AD |  if_e	jmp	#LR__3254
234ac     01 2C 66 F0 | 	shl	local08, #1
234b0     97 0E 48 FB | 	callpa	#(@LR__3253-@LR__3252)>>2,fcache_load_ptr_
234b4                 | LR__3252
234b4     00 40 00 FF 
234b8     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
234bc     18 3B 02 C6 |  if_b	mov	local15, local10
234c0     01 3A 86 C1 |  if_b	sub	local15, #1
234c4     1D 31 02 C6 |  if_b	mov	local10, local15
234c8     01 2C 66 C0 |  if_b	shl	local08, #1
234cc     E4 FF 9F CD |  if_b	jmp	#LR__3252
234d0                 | LR__3253
234d0     E4 FD 9F FD | 	jmp	#LR__3232
234d4                 | LR__3254
234d4     7F 28 86 F1 | 	sub	local06, #127
234d8     13 13 02 F6 | 	mov	arg01, local05
234dc     1A 15 02 F6 | 	mov	arg02, local12
234e0     14 17 02 F6 | 	mov	arg03, local06
234e4     12 19 02 F6 | 	mov	arg04, local04
234e8     04 34 B0 FD | 	call	#__system__pack_0606
234ec                 | LR__3255
234ec     A7 F0 03 F6 | 	mov	ptra, fp
234f0     B2 00 A0 FD | 	call	#popregs_
234f4                 | __system___float_add_ret
234f4     2D 00 64 FD | 	ret
234f8                 | 
234f8                 | __system___float_sqrt
234f8     04 4A 05 F6 | 	mov	COUNT_, #4
234fc     A8 00 A0 FD | 	call	#pushregs_
23500     09 1F 02 F6 | 	mov	local01, arg01
23504     09 FB 01 F6 | 	mov	result1, arg01
23508     FD 20 02 F6 | 	mov	local02, result1
2350c     10 23 02 F6 | 	mov	local03, local02
23510     16 22 46 F7 | 	zerox	local03, #22
23514     10 25 02 F6 | 	mov	local04, local02
23518     01 24 66 F0 | 	shl	local04, #1
2351c     18 24 4E F0 | 	shr	local04, #24 wz
23520     1F 20 46 F0 | 	shr	local02, #31
23524     70 00 90 AD |  if_e	jmp	#LR__3261
23528     17 22 26 F4 | 	bith	local03, #23
2352c                 | LR__3260
2352c     00 20 0E F2 | 	cmp	local02, #0 wz
23530     00 F8 3F 5F 
23534     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
23538     88 00 90 5D |  if_ne	jmp	#LR__3264
2353c     FF 24 0E F2 | 	cmp	local04, #255 wz
23540     0F FB 01 A6 |  if_e	mov	result1, local01
23544     7C 00 90 AD |  if_e	jmp	#LR__3264
23548     7F 24 86 F1 | 	sub	local04, #127
2354c     01 24 CE F7 | 	test	local04, #1 wz
23550     01 22 66 50 |  if_ne	shl	local03, #1
23554     05 22 66 F0 | 	shl	local03, #5
23558     11 01 38 FD | 	qsqrt	#0, local03
2355c     01 24 86 51 |  if_ne	sub	local04, #1
23560     12 25 52 F6 | 	abs	local04, local04 wc
23564     01 24 46 F0 | 	shr	local04, #1
23568     12 17 82 F6 | 	negc	arg03, local04
2356c     10 19 02 F6 | 	mov	arg04, local02
23570     18 12 62 FD | 	getqx	arg01
23574     09 15 02 F6 | 	mov	arg02, arg01
23578     19 14 66 F0 | 	shl	arg02, #25
2357c     07 12 46 F0 | 	shr	arg01, #7
23580     00 80 00 FF 
23584     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
23588     01 16 06 31 |  if_ae	add	arg03, #1
2358c     01 12 46 30 |  if_ae	shr	arg01, #1
23590     5C 33 B0 FD | 	call	#__system__pack_0606
23594     2C 00 90 FD | 	jmp	#LR__3264
23598                 | LR__3261
23598     00 22 0E F2 | 	cmp	local03, #0 wz
2359c     0F FB 01 A6 |  if_e	mov	result1, local01
235a0     20 00 90 AD |  if_e	jmp	#LR__3264
235a4     01 22 66 F0 | 	shl	local03, #1
235a8     97 0A 48 FB | 	callpa	#(@LR__3263-@LR__3262)>>2,fcache_load_ptr_
235ac                 | LR__3262
235ac     00 40 00 FF 
235b0     00 22 16 F2 | 	cmp	local03, ##8388608 wc
235b4     01 24 86 C1 |  if_b	sub	local04, #1
235b8     01 22 66 C0 |  if_b	shl	local03, #1
235bc     EC FF 9F CD |  if_b	jmp	#LR__3262
235c0                 | LR__3263
235c0     68 FF 9F FD | 	jmp	#LR__3260
235c4                 | LR__3264
235c4     A7 F0 03 F6 | 	mov	ptra, fp
235c8     B2 00 A0 FD | 	call	#popregs_
235cc                 | __system___float_sqrt_ret
235cc     2D 00 64 FD | 	ret
235d0                 | 
235d0                 | __system___float_mul
235d0     0B 4A 05 F6 | 	mov	COUNT_, #11
235d4     A8 00 A0 FD | 	call	#pushregs_
235d8     09 1F 02 F6 | 	mov	local01, arg01
235dc     0A 21 02 F6 | 	mov	local02, arg02
235e0     0F 23 02 F6 | 	mov	local03, local01
235e4     11 25 02 F6 | 	mov	local04, local03
235e8     16 24 46 F7 | 	zerox	local04, #22
235ec     11 27 02 F6 | 	mov	local05, local03
235f0     01 26 66 F0 | 	shl	local05, #1
235f4     18 26 46 F0 | 	shr	local05, #24
235f8     1F 22 46 F0 | 	shr	local03, #31
235fc     10 FB 01 F6 | 	mov	result1, local02
23600     FD 28 02 F6 | 	mov	local06, result1
23604     14 2B 02 F6 | 	mov	local07, local06
23608     16 2A 46 F7 | 	zerox	local07, #22
2360c     14 2D 02 F6 | 	mov	local08, local06
23610     01 2C 66 F0 | 	shl	local08, #1
23614     18 2C 46 F0 | 	shr	local08, #24
23618     1F 28 46 F0 | 	shr	local06, #31
2361c     14 23 62 F5 | 	xor	local03, local06
23620     FF 26 0E F2 | 	cmp	local05, #255 wz
23624     90 00 90 AD |  if_e	jmp	#LR__3273
23628     FF 2C 0E F2 | 	cmp	local08, #255 wz
2362c     D8 00 90 AD |  if_e	jmp	#LR__3275
23630     00 26 0E F2 | 	cmp	local05, #0 wz
23634     0C 01 90 AD |  if_e	jmp	#LR__3276
23638     17 24 26 F4 | 	bith	local04, #23
2363c                 | LR__3270
2363c     00 2C 0E F2 | 	cmp	local08, #0 wz
23640     44 01 90 AD |  if_e	jmp	#LR__3280
23644     17 2A 26 F4 | 	bith	local07, #23
23648                 | LR__3271
23648     12 21 02 F6 | 	mov	local02, local04
2364c     04 20 66 F0 | 	shl	local02, #4
23650     15 29 02 F6 | 	mov	local06, local07
23654     05 28 66 F0 | 	shl	local06, #5
23658     14 21 02 FD | 	qmul	local02, local06
2365c     16 27 02 F1 | 	add	local05, local08
23660     FE 26 86 F1 | 	sub	local05, #254
23664     13 2F 02 F6 | 	mov	local09, local05
23668     04 24 66 F0 | 	shl	local04, #4
2366c     05 2A 66 F0 | 	shl	local07, #5
23670     18 30 62 FD | 	getqx	local10
23674     15 25 02 FD | 	qmul	local04, local07
23678     19 32 62 FD | 	getqy	local11
2367c     00 80 00 FF 
23680     00 32 16 F2 | 	cmp	local11, ##16777216 wc
23684     18 00 90 CD |  if_b	jmp	#LR__3272
23688     01 2E 06 F1 | 	add	local09, #1
2368c     01 30 46 F0 | 	shr	local10, #1
23690     19 2D 02 F6 | 	mov	local08, local11
23694     1F 2C 66 F0 | 	shl	local08, #31
23698     16 31 42 F5 | 	or	local10, local08
2369c     01 32 46 F0 | 	shr	local11, #1
236a0                 | LR__3272
236a0     19 13 02 F6 | 	mov	arg01, local11
236a4     18 15 02 F6 | 	mov	arg02, local10
236a8     17 17 02 F6 | 	mov	arg03, local09
236ac     11 19 02 F6 | 	mov	arg04, local03
236b0     3C 32 B0 FD | 	call	#__system__pack_0606
236b4     10 01 90 FD | 	jmp	#LR__3284
236b8                 | LR__3273
236b8     00 24 0E F2 | 	cmp	local04, #0 wz
236bc     0F FB 01 56 |  if_ne	mov	result1, local01
236c0     04 01 90 5D |  if_ne	jmp	#LR__3284
236c4     FF 2C 56 F2 | 	cmps	local08, #255 wc
236c8     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
236cc     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
236d0     18 00 90 4D |  if_c_and_nz	jmp	#LR__3274
236d4     00 F8 3F CF 
236d8     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
236dc     E8 00 90 CD |  if_b	jmp	#LR__3284
236e0     00 2A 0E F2 | 	cmp	local07, #0 wz
236e4     10 FB 01 56 |  if_ne	mov	result1, local02
236e8     DC 00 90 5D |  if_ne	jmp	#LR__3284
236ec                 | LR__3274
236ec     02 22 46 F5 | 	or	local03, #2
236f0     00 12 06 F6 | 	mov	arg01, #0
236f4     00 14 06 F6 | 	mov	arg02, #0
236f8     13 17 02 F6 | 	mov	arg03, local05
236fc     11 19 02 F6 | 	mov	arg04, local03
23700     EC 31 B0 FD | 	call	#__system__pack_0606
23704     C0 00 90 FD | 	jmp	#LR__3284
23708                 | LR__3275
23708     00 26 0E F2 | 	cmp	local05, #0 wz
2370c     00 24 0E A2 |  if_e	cmp	local04, #0 wz
23710     00 F8 3F AF 
23714     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
23718     AC 00 90 AD |  if_e	jmp	#LR__3284
2371c     00 2A 0E F2 | 	cmp	local07, #0 wz
23720     10 FB 01 56 |  if_ne	mov	result1, local02
23724     A0 00 90 5D |  if_ne	jmp	#LR__3284
23728     16 17 02 F6 | 	mov	arg03, local08
2372c     11 19 02 F6 | 	mov	arg04, local03
23730     02 18 46 F5 | 	or	arg04, #2
23734     00 12 06 F6 | 	mov	arg01, #0
23738     00 14 06 F6 | 	mov	arg02, #0
2373c     B0 31 B0 FD | 	call	#__system__pack_0606
23740     84 00 90 FD | 	jmp	#LR__3284
23744                 | LR__3276
23744     00 24 0E F2 | 	cmp	local04, #0 wz
23748     20 00 90 AD |  if_e	jmp	#LR__3279
2374c     01 24 66 F0 | 	shl	local04, #1
23750     97 0A 48 FB | 	callpa	#(@LR__3278-@LR__3277)>>2,fcache_load_ptr_
23754                 | LR__3277
23754     00 40 00 FF 
23758     00 24 16 F2 | 	cmp	local04, ##8388608 wc
2375c     01 26 86 C1 |  if_b	sub	local05, #1
23760     01 24 66 C0 |  if_b	shl	local04, #1
23764     EC FF 9F CD |  if_b	jmp	#LR__3277
23768                 | LR__3278
23768     D0 FE 9F FD | 	jmp	#LR__3270
2376c                 | LR__3279
2376c     08 22 46 F5 | 	or	local03, #8
23770     00 12 06 F6 | 	mov	arg01, #0
23774     00 14 06 F6 | 	mov	arg02, #0
23778     00 16 06 F6 | 	mov	arg03, #0
2377c     11 19 02 F6 | 	mov	arg04, local03
23780     6C 31 B0 FD | 	call	#__system__pack_0606
23784     40 00 90 FD | 	jmp	#LR__3284
23788                 | LR__3280
23788     00 2A 0E F2 | 	cmp	local07, #0 wz
2378c     20 00 90 AD |  if_e	jmp	#LR__3283
23790     01 2A 66 F0 | 	shl	local07, #1
23794     97 0A 48 FB | 	callpa	#(@LR__3282-@LR__3281)>>2,fcache_load_ptr_
23798                 | LR__3281
23798     00 40 00 FF 
2379c     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
237a0     01 2C 86 C1 |  if_b	sub	local08, #1
237a4     01 2A 66 C0 |  if_b	shl	local07, #1
237a8     EC FF 9F CD |  if_b	jmp	#LR__3281
237ac                 | LR__3282
237ac     98 FE 9F FD | 	jmp	#LR__3271
237b0                 | LR__3283
237b0     08 22 46 F5 | 	or	local03, #8
237b4     00 12 06 F6 | 	mov	arg01, #0
237b8     00 14 06 F6 | 	mov	arg02, #0
237bc     00 16 06 F6 | 	mov	arg03, #0
237c0     11 19 02 F6 | 	mov	arg04, local03
237c4     28 31 B0 FD | 	call	#__system__pack_0606
237c8                 | LR__3284
237c8     A7 F0 03 F6 | 	mov	ptra, fp
237cc     B2 00 A0 FD | 	call	#popregs_
237d0                 | __system___float_mul_ret
237d0     2D 00 64 FD | 	ret
237d4                 | 
237d4                 | __system___float_div
237d4     0E 4A 05 F6 | 	mov	COUNT_, #14
237d8     A8 00 A0 FD | 	call	#pushregs_
237dc     09 23 02 F6 | 	mov	local03, arg01
237e0     0A 25 02 F6 | 	mov	local04, arg02
237e4     11 27 02 F6 | 	mov	local05, local03
237e8     13 29 02 F6 | 	mov	local06, local05
237ec     16 28 46 F7 | 	zerox	local06, #22
237f0     13 2B 02 F6 | 	mov	local07, local05
237f4     01 2A 66 F0 | 	shl	local07, #1
237f8     18 2A 46 F0 | 	shr	local07, #24
237fc     1F 26 46 F0 | 	shr	local05, #31
23800     12 FB 01 F6 | 	mov	result1, local04
23804     FD 2C 02 F6 | 	mov	local08, result1
23808     16 2F 02 F6 | 	mov	local09, local08
2380c     16 2E 46 F7 | 	zerox	local09, #22
23810     16 31 02 F6 | 	mov	local10, local08
23814     01 30 66 F0 | 	shl	local10, #1
23818     18 30 46 F0 | 	shr	local10, #24
2381c     1F 2C 46 F0 | 	shr	local08, #31
23820     16 27 62 F5 | 	xor	local05, local08
23824     FF 2A 0E F2 | 	cmp	local07, #255 wz
23828     D4 00 90 AD |  if_e	jmp	#LR__3295
2382c     FF 30 0E F2 | 	cmp	local10, #255 wz
23830     04 01 90 AD |  if_e	jmp	#LR__3296
23834     00 2A 0E F2 | 	cmp	local07, #0 wz
23838     24 01 90 AD |  if_e	jmp	#LR__3297
2383c     17 28 26 F4 | 	bith	local06, #23
23840                 | LR__3290
23840     00 30 0E F2 | 	cmp	local10, #0 wz
23844     70 01 90 AD |  if_e	jmp	#LR__3301
23848     17 2E 26 F4 | 	bith	local09, #23
2384c                 | LR__3291
2384c     18 2B 82 F1 | 	sub	local07, local10
23850     15 33 02 F6 | 	mov	local11, local07
23854     14 13 02 F6 | 	mov	arg01, local06
23858     02 12 46 F0 | 	shr	arg01, #2
2385c     1E 28 66 F0 | 	shl	local06, #30
23860     14 15 02 F6 | 	mov	arg02, local06
23864     17 17 02 F6 | 	mov	arg03, local09
23868     28 12 62 FD | 	setq	arg01
2386c     0B 15 12 FD | 	qdiv	arg02, arg03
23870     00 34 06 F6 | 	mov	local12, #0
23874     18 1E 62 FD | 	getqx	local01
23878     19 FC 61 FD | 	getqy	result2
2387c     FE 20 02 F6 | 	mov	local02, result2
23880     0F 37 02 F6 | 	mov	local13, local01
23884     00 20 4E F2 | 	cmps	local02, #0 wz
23888     1B 39 02 F6 | 	mov	local14, local13
2388c     19 38 66 F0 | 	shl	local14, #25
23890     01 34 06 56 |  if_ne	mov	local12, #1
23894     1A 39 42 F5 | 	or	local14, local12
23898     07 36 46 F0 | 	shr	local13, #7
2389c     00 80 00 FF 
238a0     00 36 16 F2 | 	cmp	local13, ##16777216 wc
238a4     1C 00 90 CD |  if_b	jmp	#LR__3292
238a8     01 32 06 F1 | 	add	local11, #1
238ac     01 38 46 F0 | 	shr	local14, #1
238b0     1B 35 02 F6 | 	mov	local12, local13
238b4     1F 34 66 F0 | 	shl	local12, #31
238b8     1A 39 42 F5 | 	or	local14, local12
238bc     01 36 46 F0 | 	shr	local13, #1
238c0     24 00 90 FD | 	jmp	#LR__3294
238c4                 | LR__3292
238c4     00 40 00 FF 
238c8     00 36 16 F2 | 	cmp	local13, ##8388608 wc
238cc     18 00 90 3D |  if_ae	jmp	#LR__3293
238d0     01 32 86 F1 | 	sub	local11, #1
238d4     01 36 66 F0 | 	shl	local13, #1
238d8     1C 35 02 F6 | 	mov	local12, local14
238dc     1F 34 46 F0 | 	shr	local12, #31
238e0     1A 37 42 F5 | 	or	local13, local12
238e4     01 38 66 F0 | 	shl	local14, #1
238e8                 | LR__3293
238e8                 | LR__3294
238e8     1B 13 02 F6 | 	mov	arg01, local13
238ec     1C 15 02 F6 | 	mov	arg02, local14
238f0     19 17 02 F6 | 	mov	arg03, local11
238f4     13 19 02 F6 | 	mov	arg04, local05
238f8     F4 2F B0 FD | 	call	#__system__pack_0606
238fc     F8 00 90 FD | 	jmp	#LR__3305
23900                 | LR__3295
23900     00 28 0E F2 | 	cmp	local06, #0 wz
23904     11 FB 01 56 |  if_ne	mov	result1, local03
23908     EC 00 90 5D |  if_ne	jmp	#LR__3305
2390c     FF 30 0E F2 | 	cmp	local10, #255 wz
23910     00 F8 3F AF 
23914     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
23918     DC 00 90 AD |  if_e	jmp	#LR__3305
2391c     02 26 46 F5 | 	or	local05, #2
23920     00 12 06 F6 | 	mov	arg01, #0
23924     00 14 06 F6 | 	mov	arg02, #0
23928     15 17 02 F6 | 	mov	arg03, local07
2392c     13 19 02 F6 | 	mov	arg04, local05
23930     BC 2F B0 FD | 	call	#__system__pack_0606
23934     C0 00 90 FD | 	jmp	#LR__3305
23938                 | LR__3296
23938     00 2E 0E F2 | 	cmp	local09, #0 wz
2393c     12 FB 01 56 |  if_ne	mov	result1, local04
23940     B4 00 90 5D |  if_ne	jmp	#LR__3305
23944     13 19 02 F6 | 	mov	arg04, local05
23948     08 18 46 F5 | 	or	arg04, #8
2394c     00 12 06 F6 | 	mov	arg01, #0
23950     00 14 06 F6 | 	mov	arg02, #0
23954     00 16 06 F6 | 	mov	arg03, #0
23958     94 2F B0 FD | 	call	#__system__pack_0606
2395c     98 00 90 FD | 	jmp	#LR__3305
23960                 | LR__3297
23960     00 28 0E F2 | 	cmp	local06, #0 wz
23964     20 00 90 AD |  if_e	jmp	#LR__3300
23968     01 28 66 F0 | 	shl	local06, #1
2396c     97 0A 48 FB | 	callpa	#(@LR__3299-@LR__3298)>>2,fcache_load_ptr_
23970                 | LR__3298
23970     00 40 00 FF 
23974     00 28 16 F2 | 	cmp	local06, ##8388608 wc
23978     01 2A 86 C1 |  if_b	sub	local07, #1
2397c     01 28 66 C0 |  if_b	shl	local06, #1
23980     EC FF 9F CD |  if_b	jmp	#LR__3298
23984                 | LR__3299
23984     B8 FE 9F FD | 	jmp	#LR__3290
23988                 | LR__3300
23988     00 30 0E F2 | 	cmp	local10, #0 wz
2398c     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
23990     00 F8 3F AF 
23994     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
23998     5C 00 90 AD |  if_e	jmp	#LR__3305
2399c     13 19 02 F6 | 	mov	arg04, local05
239a0     08 18 46 F5 | 	or	arg04, #8
239a4     00 12 06 F6 | 	mov	arg01, #0
239a8     00 14 06 F6 | 	mov	arg02, #0
239ac     00 16 06 F6 | 	mov	arg03, #0
239b0     3C 2F B0 FD | 	call	#__system__pack_0606
239b4     40 00 90 FD | 	jmp	#LR__3305
239b8                 | LR__3301
239b8     00 2E 0E F2 | 	cmp	local09, #0 wz
239bc     20 00 90 AD |  if_e	jmp	#LR__3304
239c0     01 2E 66 F0 | 	shl	local09, #1
239c4     97 0A 48 FB | 	callpa	#(@LR__3303-@LR__3302)>>2,fcache_load_ptr_
239c8                 | LR__3302
239c8     00 40 00 FF 
239cc     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
239d0     01 30 86 C1 |  if_b	sub	local10, #1
239d4     01 2E 66 C0 |  if_b	shl	local09, #1
239d8     EC FF 9F CD |  if_b	jmp	#LR__3302
239dc                 | LR__3303
239dc     6C FE 9F FD | 	jmp	#LR__3291
239e0                 | LR__3304
239e0     02 26 46 F5 | 	or	local05, #2
239e4     00 12 06 F6 | 	mov	arg01, #0
239e8     00 14 06 F6 | 	mov	arg02, #0
239ec     00 16 06 F6 | 	mov	arg03, #0
239f0     13 19 02 F6 | 	mov	arg04, local05
239f4     F8 2E B0 FD | 	call	#__system__pack_0606
239f8                 | LR__3305
239f8     A7 F0 03 F6 | 	mov	ptra, fp
239fc     B2 00 A0 FD | 	call	#popregs_
23a00                 | __system___float_div_ret
23a00     2D 00 64 FD | 	ret
23a04                 | 
23a04                 | __system___float_cmp
23a04     00 C0 3F FF 
23a08     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
23a0c     00 C0 3F CF 
23a10     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
23a14     0B FB 01 36 |  if_ae	mov	result1, arg03
23a18     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
23a1c     00 C0 7F FF 
23a20     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
23a24     00 C0 7F CF 
23a28     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
23a2c     0B FB 01 36 |  if_ae	mov	result1, arg03
23a30     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
23a34     00 12 56 F2 | 	cmps	arg01, #0 wc
23a38     2C 00 90 3D |  if_ae	jmp	#LR__3310
23a3c     00 14 56 F2 | 	cmps	arg02, #0 wc
23a40     0A FB 01 C6 |  if_b	mov	result1, arg02
23a44     09 FB 81 C1 |  if_b	sub	result1, arg01
23a48     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
23a4c     00 14 0E F2 | 	cmp	arg02, #0 wz
23a50     00 00 40 AF 
23a54     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
23a58     00 FA 05 A6 |  if_e	mov	result1, #0
23a5c     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
23a60     01 FA 65 F6 | 	neg	result1, #1
23a64     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
23a68                 | LR__3310
23a68     00 14 56 F2 | 	cmps	arg02, #0 wc
23a6c     1C 00 90 3D |  if_ae	jmp	#LR__3311
23a70     00 12 0E F2 | 	cmp	arg01, #0 wz
23a74     00 00 40 AF 
23a78     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
23a7c     00 FA 05 A6 |  if_e	mov	result1, #0
23a80     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
23a84     01 FA 05 F6 | 	mov	result1, #1
23a88     08 00 90 FD | 	jmp	#__system___float_cmp_ret
23a8c                 | LR__3311
23a8c     0A 13 82 F1 | 	sub	arg01, arg02
23a90     09 FB 01 F6 | 	mov	result1, arg01
23a94                 | __system___float_cmp_ret
23a94     2D 00 64 FD | 	ret
23a98                 | 
23a98                 | __system___float_tointeger
23a98     02 4A 05 F6 | 	mov	COUNT_, #2
23a9c     A8 00 A0 FD | 	call	#pushregs_
23aa0     50 00 B0 FD | 	call	#__system___float_Unpack
23aa4     FF FF 7F FF 
23aa8     FF FD 55 F2 | 	cmps	result2, ##-1 wc
23aac     34 00 90 CD |  if_b	jmp	#LR__3320
23ab0     1F FC 55 F2 | 	cmps	result2, #31 wc
23ab4     2C 00 90 3D |  if_ae	jmp	#LR__3320
23ab8     02 FE 65 F0 | 	shl	result3, #2
23abc     1E 1E 06 F6 | 	mov	local01, #30
23ac0     FE 1E 82 F1 | 	sub	local01, result2
23ac4     0F FF 41 F0 | 	shr	result3, local01
23ac8     FF 20 02 F6 | 	mov	local02, result3
23acc     0A 21 02 F1 | 	add	local02, arg02
23ad0     01 20 46 F0 | 	shr	local02, #1
23ad4     00 FA 0D F2 | 	cmp	result1, #0 wz
23ad8     10 21 62 56 |  if_ne	neg	local02, local02
23adc     10 FB 01 F6 | 	mov	result1, local02
23ae0     04 00 90 FD | 	jmp	#LR__3321
23ae4                 | LR__3320
23ae4     00 FA 05 F6 | 	mov	result1, #0
23ae8                 | LR__3321
23ae8     A7 F0 03 F6 | 	mov	ptra, fp
23aec     B2 00 A0 FD | 	call	#popregs_
23af0                 | __system___float_tointeger_ret
23af0     2D 00 64 FD | 	ret
23af4                 | 
23af4                 | __system___float_Unpack
23af4     09 01 02 F6 | 	mov	_var01, arg01
23af8     1F 00 46 F0 | 	shr	_var01, #31
23afc     09 03 02 F6 | 	mov	_var02, arg01
23b00     01 02 66 F0 | 	shl	_var02, #1
23b04     18 02 4E F0 | 	shr	_var02, #24 wz
23b08     17 13 06 F4 | 	bitl	arg01, #279
23b0c     06 12 66 50 |  if_ne	shl	arg01, #6
23b10     1D 12 26 54 |  if_ne	bith	arg01, #29
23b14     1C 00 90 5D |  if_ne	jmp	#LR__3330
23b18     09 05 92 F7 | 	encod	_var03, arg01 wc
23b1c     01 04 06 C1 |  if_b	add	_var03, #1
23b20     17 04 86 F1 | 	sub	_var03, #23
23b24     02 03 02 F6 | 	mov	_var02, _var03
23b28     07 FC 05 F6 | 	mov	result2, #7
23b2c     02 FD 81 F1 | 	sub	result2, _var03
23b30     FE 12 62 F0 | 	shl	arg01, result2
23b34                 | LR__3330
23b34     7F 02 86 F1 | 	sub	_var02, #127
23b38     09 FF 01 F6 | 	mov	result3, arg01
23b3c     00 FB 01 F6 | 	mov	result1, _var01
23b40     01 FD 01 F6 | 	mov	result2, _var02
23b44                 | __system___float_Unpack_ret
23b44     2D 00 64 FD | 	ret
23b48                 | 
23b48                 | __system___float_Pack
23b48     00 00 06 F6 | 	mov	_var01, #0
23b4c     00 16 0E F2 | 	cmp	arg03, #0 wz
23b50     8C 00 90 AD |  if_e	jmp	#LR__3341
23b54     0B 03 92 F7 | 	encod	_var02, arg03 wc
23b58     01 02 06 C1 |  if_b	add	_var02, #1
23b5c     21 00 06 F6 | 	mov	_var01, #33
23b60     01 01 82 F1 | 	sub	_var01, _var02
23b64     00 17 62 F0 | 	shl	arg03, _var01
23b68     03 02 06 F6 | 	mov	_var02, #3
23b6c     00 03 82 F1 | 	sub	_var02, _var01
23b70     01 15 02 F1 | 	add	arg02, _var02
23b74     0A 05 02 F6 | 	mov	_var03, arg02
23b78     00 17 06 F1 | 	add	arg03, #256
23b7c     0B 03 02 F6 | 	mov	_var02, arg03
23b80     FF 02 2E F5 | 	andn	_var02, #255 wz
23b84     01 04 06 A1 |  if_e	add	_var03, #1
23b88     7F 04 06 F1 | 	add	_var03, #127
23b8c     FF FF 7F FF 
23b90     E9 05 46 F3 | 	fges	_var03, ##-23
23b94     FF 04 66 F3 | 	fles	_var03, #255
23b98     01 04 56 F2 | 	cmps	_var03, #1 wc
23b9c     1C 00 90 3D |  if_ae	jmp	#LR__3340
23ba0     01 16 46 F0 | 	shr	arg03, #1
23ba4     1F 02 C6 F9 | 	decod	_var02, #31
23ba8     0B 03 02 F1 | 	add	_var02, arg03
23bac     02 05 62 F6 | 	neg	_var03, _var03
23bb0     02 03 42 F0 | 	shr	_var02, _var03
23bb4     01 17 02 F6 | 	mov	arg03, _var02
23bb8     00 04 06 F6 | 	mov	_var03, #0
23bbc                 | LR__3340
23bbc     09 FB 01 F6 | 	mov	result1, arg01
23bc0     1F FA 65 F0 | 	shl	result1, #31
23bc4     02 03 02 F6 | 	mov	_var02, _var03
23bc8     17 02 66 F0 | 	shl	_var02, #23
23bcc     01 FB 41 F5 | 	or	result1, _var02
23bd0     0B 07 02 F6 | 	mov	_var04, arg03
23bd4     09 06 46 F0 | 	shr	_var04, #9
23bd8     03 FB 41 F5 | 	or	result1, _var04
23bdc     04 00 90 FD | 	jmp	#__system___float_Pack_ret
23be0                 | LR__3341
23be0     00 FB 01 F6 | 	mov	result1, _var01
23be4                 | __system___float_Pack_ret
23be4     2D 00 64 FD | 	ret
23be8                 | 
23be8                 | __system___basic_print_float
23be8     05 4A 05 F6 | 	mov	COUNT_, #5
23bec     A8 00 A0 FD | 	call	#pushregs_
23bf0     09 1F 02 F6 | 	mov	local01, arg01
23bf4     0A 21 02 F6 | 	mov	local02, arg02
23bf8     0B 23 0A F6 | 	mov	local03, arg03 wz
23bfc     0C 25 02 F6 | 	mov	local04, arg04
23c00     14 00 90 5D |  if_ne	jmp	#LR__3350
23c04     23 24 0E F2 | 	cmp	local04, #35 wz
23c08     80 02 10 AF 
23c0c     00 26 06 A6 |  if_e	mov	local05, ##537198592
23c10     1D 26 C6 59 |  if_ne	decod	local05, #29
23c14     13 23 02 F6 | 	mov	local03, local05
23c18                 | LR__3350
23c18     0F 13 02 F6 | 	mov	arg01, local01
23c1c     B4 27 B0 FD | 	call	#__system___gettxfunc
23c20     FD 26 0A F6 | 	mov	local05, result1 wz
23c24     00 FA 05 A6 |  if_e	mov	result1, #0
23c28     13 13 02 56 |  if_ne	mov	arg01, local05
23c2c     11 15 02 56 |  if_ne	mov	arg02, local03
23c30     10 17 02 56 |  if_ne	mov	arg03, local02
23c34     12 19 02 56 |  if_ne	mov	arg04, local04
23c38     30 DF BF 5D |  if_ne	call	#__system___fmtfloat
23c3c     A7 F0 03 F6 | 	mov	ptra, fp
23c40     B2 00 A0 FD | 	call	#popregs_
23c44                 | __system___basic_print_float_ret
23c44     2D 00 64 FD | 	ret
23c48                 | 
23c48                 | __system____builtin_atoi
23c48     07 4A 05 F6 | 	mov	COUNT_, #7
23c4c     A8 00 A0 FD | 	call	#pushregs_
23c50                 | __system____builtin_atoi_enter
23c50     09 1F 02 F6 | 	mov	local01, arg01
23c54     0A 21 02 F6 | 	mov	local02, arg02
23c58     00 22 06 F6 | 	mov	local03, #0
23c5c     00 24 06 F6 | 	mov	local04, #0
23c60     00 26 06 F6 | 	mov	local05, #0
23c64     97 08 48 FB | 	callpa	#(@LR__3361-@LR__3360)>>2,fcache_load_ptr_
23c68                 | LR__3360
23c68     0F 29 C2 FA | 	rdbyte	local06, local01
23c6c     20 28 0E F2 | 	cmp	local06, #32 wz
23c70     01 1E 06 A1 |  if_e	add	local01, #1
23c74     F0 FF 9F AD |  if_e	jmp	#LR__3360
23c78                 | LR__3361
23c78     0F 2B C2 FA | 	rdbyte	local07, local01
23c7c                 | LR__3362
23c7c     2D 2A 0E F2 | 	cmp	local07, #45 wz
23c80     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
23c84     18 00 90 5D |  if_ne	jmp	#LR__3363
23c88     01 1E 06 F1 | 	add	local01, #1
23c8c     2D 2A 0E F2 | 	cmp	local07, #45 wz
23c90     01 28 06 A6 |  if_e	mov	local06, #1
23c94     14 27 C2 A2 |  if_e	subr	local05, local06
23c98     0F 2B C2 FA | 	rdbyte	local07, local01
23c9c     DC FF 9F FD | 	jmp	#LR__3362
23ca0                 | LR__3363
23ca0     97 48 48 FB | 	callpa	#(@LR__3371-@LR__3364)>>2,fcache_load_ptr_
23ca4                 | LR__3364
23ca4                 | LR__3365
23ca4     0F 2B C2 FA | 	rdbyte	local07, local01
23ca8     5F 2A 0E F2 | 	cmp	local07, #95 wz
23cac     01 1E 06 F1 | 	add	local01, #1
23cb0     F0 FF 9F AD |  if_e	jmp	#LR__3365
23cb4     30 2A 0E F2 | 	cmp	local07, #48 wz
23cb8     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
23cbc     00 24 06 A6 |  if_e	mov	local04, #0
23cc0     60 00 90 AD |  if_e	jmp	#LR__3370
23cc4     31 2A 56 F2 | 	cmps	local07, #49 wc
23cc8     18 00 90 CD |  if_b	jmp	#LR__3366
23ccc     3A 2A 56 F2 | 	cmps	local07, #58 wc
23cd0     15 25 02 C6 |  if_b	mov	local04, local07
23cd4     30 24 86 C1 |  if_b	sub	local04, #48
23cd8     00 20 0E C2 |  if_b	cmp	local02, #0 wz
23cdc     0A 20 06 86 |  if_c_and_z	mov	local02, #10
23ce0     40 00 90 CD |  if_b	jmp	#LR__3369
23ce4                 | LR__3366
23ce4     0B 20 56 F2 | 	cmps	local02, #11 wc
23ce8     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
23cec     14 00 90 CD |  if_b	jmp	#LR__3367
23cf0     67 2A 56 F2 | 	cmps	local07, #103 wc
23cf4     61 2A 86 C1 |  if_b	sub	local07, #97
23cf8     0A 24 06 C6 |  if_b	mov	local04, #10
23cfc     15 25 02 C1 |  if_b	add	local04, local07
23d00     20 00 90 CD |  if_b	jmp	#LR__3368
23d04                 | LR__3367
23d04     0B 20 56 F2 | 	cmps	local02, #11 wc
23d08     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
23d0c     24 00 90 CD |  if_b	jmp	#LR__3372
23d10     47 2A 56 F2 | 	cmps	local07, #71 wc
23d14     41 2A 86 C1 |  if_b	sub	local07, #65
23d18     0A 24 06 C6 |  if_b	mov	local04, #10
23d1c     15 25 02 C1 |  if_b	add	local04, local07
23d20     10 00 90 3D |  if_ae	jmp	#LR__3372
23d24                 | LR__3368
23d24                 | LR__3369
23d24                 | LR__3370
23d24     11 21 02 FD | 	qmul	local02, local03
23d28     18 22 62 FD | 	getqx	local03
23d2c     12 23 02 F1 | 	add	local03, local04
23d30     70 FF 9F FD | 	jmp	#LR__3364
23d34                 | LR__3371
23d34                 | LR__3372
23d34     00 20 0E F2 | 	cmp	local02, #0 wz
23d38     64 00 90 5D |  if_ne	jmp	#LR__3378
23d3c     78 2A 0E F2 | 	cmp	local07, #120 wz
23d40     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
23d44     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
23d48     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
23d4c     14 00 90 5D |  if_ne	jmp	#LR__3373
23d50     0F 13 02 F6 | 	mov	arg01, local01
23d54     10 14 06 F6 | 	mov	arg02, #16
23d58     EC FE BF FD | 	call	#__system____builtin_atoi
23d5c     FD 22 02 F6 | 	mov	local03, result1
23d60     3C 00 90 FD | 	jmp	#LR__3377
23d64                 | LR__3373
23d64     62 2A 0E F2 | 	cmp	local07, #98 wz
23d68     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
23d6c     14 00 90 5D |  if_ne	jmp	#LR__3374
23d70     0F 13 02 F6 | 	mov	arg01, local01
23d74     02 14 06 F6 | 	mov	arg02, #2
23d78     CC FE BF FD | 	call	#__system____builtin_atoi
23d7c     FD 22 02 F6 | 	mov	local03, result1
23d80     1C 00 90 FD | 	jmp	#LR__3376
23d84                 | LR__3374
23d84     6F 2A 0E F2 | 	cmp	local07, #111 wz
23d88     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
23d8c     10 00 90 5D |  if_ne	jmp	#LR__3375
23d90     0F 13 02 F6 | 	mov	arg01, local01
23d94     08 14 06 F6 | 	mov	arg02, #8
23d98     AC FE BF FD | 	call	#__system____builtin_atoi
23d9c     FD 22 02 F6 | 	mov	local03, result1
23da0                 | LR__3375
23da0                 | LR__3376
23da0                 | LR__3377
23da0                 | LR__3378
23da0     00 26 0E F2 | 	cmp	local05, #0 wz
23da4     11 23 62 56 |  if_ne	neg	local03, local03
23da8     11 FB 01 F6 | 	mov	result1, local03
23dac     A7 F0 03 F6 | 	mov	ptra, fp
23db0     B2 00 A0 FD | 	call	#popregs_
23db4                 | __system____builtin_atoi_ret
23db4     2D 00 64 FD | 	ret
23db8                 | 
23db8                 | __system____builtin_atof
23db8     07 4A 05 F6 | 	mov	COUNT_, #7
23dbc     A8 00 A0 FD | 	call	#pushregs_
23dc0     09 1F 02 F6 | 	mov	local01, arg01
23dc4     00 20 06 F6 | 	mov	local02, #0
23dc8     00 22 06 F6 | 	mov	local03, #0
23dcc     00 24 06 F6 | 	mov	local04, #0
23dd0     00 26 06 F6 | 	mov	local05, #0
23dd4     97 08 48 FB | 	callpa	#(@LR__3381-@LR__3380)>>2,fcache_load_ptr_
23dd8                 | LR__3380
23dd8     0F 17 C2 FA | 	rdbyte	arg03, local01
23ddc     20 16 0E F2 | 	cmp	arg03, #32 wz
23de0     01 1E 06 A1 |  if_e	add	local01, #1
23de4     F0 FF 9F AD |  if_e	jmp	#LR__3380
23de8                 | LR__3381
23de8     0F 29 C2 FA | 	rdbyte	local06, local01
23dec                 | LR__3382
23dec     2B 28 0E F2 | 	cmp	local06, #43 wz
23df0     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
23df4     14 00 90 5D |  if_ne	jmp	#LR__3383
23df8     2D 28 0E F2 | 	cmp	local06, #45 wz
23dfc     1F 24 E6 A4 |  if_e	bitnot	local04, #31
23e00     01 1E 06 F1 | 	add	local01, #1
23e04     0F 29 C2 FA | 	rdbyte	local06, local01
23e08     E0 FF 9F FD | 	jmp	#LR__3382
23e0c                 | LR__3383
23e0c                 | LR__3384
23e0c     97 08 48 FB | 	callpa	#(@LR__3386-@LR__3385)>>2,fcache_load_ptr_
23e10                 | LR__3385
23e10     0F 29 C2 FA | 	rdbyte	local06, local01
23e14     5F 28 0E F2 | 	cmp	local06, #95 wz
23e18     01 1E 06 F1 | 	add	local01, #1
23e1c     F0 FF 9F AD |  if_e	jmp	#LR__3385
23e20                 | LR__3386
23e20     00 28 0E F2 | 	cmp	local06, #0 wz
23e24     5C 00 90 AD |  if_e	jmp	#LR__3388
23e28     30 28 56 F2 | 	cmps	local06, #48 wc
23e2c     44 00 90 CD |  if_b	jmp	#LR__3387
23e30     3A 28 56 F2 | 	cmps	local06, #58 wc
23e34     3C 00 90 3D |  if_ae	jmp	#LR__3387
23e38     10 13 02 F6 | 	mov	arg01, local02
23e3c     00 90 20 FF 
23e40     00 14 06 F6 | 	mov	arg02, ##1092616192
23e44     88 F7 BF FD | 	call	#__system___float_mul
23e48     FD 20 02 F6 | 	mov	local02, result1
23e4c     30 28 86 F1 | 	sub	local06, #48
23e50     14 13 02 F6 | 	mov	arg01, local06
23e54     74 F3 BF FD | 	call	#__system___float_fromuns
23e58     FD 14 02 F6 | 	mov	arg02, result1
23e5c     10 13 02 F6 | 	mov	arg01, local02
23e60     9C F3 BF FD | 	call	#__system___float_add
23e64     FD 20 02 F6 | 	mov	local02, result1
23e68     00 26 0E F2 | 	cmp	local05, #0 wz
23e6c     01 22 86 51 |  if_ne	sub	local03, #1
23e70     98 FF 9F FD | 	jmp	#LR__3384
23e74                 | LR__3387
23e74     2E 28 0E F2 | 	cmp	local06, #46 wz
23e78     00 26 0E A2 |  if_e	cmp	local05, #0 wz
23e7c     01 26 06 A6 |  if_e	mov	local05, #1
23e80     88 FF 9F AD |  if_e	jmp	#LR__3384
23e84                 | LR__3388
23e84     45 28 0E F2 | 	cmp	local06, #69 wz
23e88     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
23e8c     18 00 90 5D |  if_ne	jmp	#LR__3389
23e90     0F 13 02 F6 | 	mov	arg01, local01
23e94     00 14 06 F6 | 	mov	arg02, #0
23e98     AC FD BF FD | 	call	#__system____builtin_atoi
23e9c     11 FB 01 F1 | 	add	result1, local03
23ea0     FD 2A 02 F6 | 	mov	local07, result1
23ea4     04 00 90 FD | 	jmp	#LR__3390
23ea8                 | LR__3389
23ea8     11 2B 02 F6 | 	mov	local07, local03
23eac                 | LR__3390
23eac     15 17 02 F6 | 	mov	arg03, local07
23eb0     10 13 02 F6 | 	mov	arg01, local02
23eb4     00 90 20 FF 
23eb8     00 14 06 F6 | 	mov	arg02, ##1092616192
23ebc     F4 06 B0 FD | 	call	#__system___float_pow_n
23ec0     12 FB 61 F5 | 	xor	result1, local04
23ec4     A7 F0 03 F6 | 	mov	ptra, fp
23ec8     B2 00 A0 FD | 	call	#popregs_
23ecc                 | __system____builtin_atof_ret
23ecc     2D 00 64 FD | 	ret
23ed0                 | 
23ed0                 | __system____builtin_ilogb
23ed0     20 FC BF FD | 	call	#__system___float_Unpack
23ed4     00 FE 0D F2 | 	cmp	result3, #0 wz
23ed8     00 00 40 AF 
23edc     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
23ee0     24 00 90 AD |  if_e	jmp	#LR__3401
23ee4     80 FC 0D F2 | 	cmp	result2, #128 wz
23ee8     18 00 90 5D |  if_ne	jmp	#LR__3400
23eec     00 00 10 FF 
23ef0     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
23ef4     1E FA CD A9 |  if_e	bmask	result1, #30
23ef8     0C 00 90 AD |  if_e	jmp	#LR__3401
23efc     1F FA C5 F9 | 	decod	result1, #31
23f00     04 00 90 FD | 	jmp	#LR__3401
23f04                 | LR__3400
23f04     FE FA 01 F6 | 	mov	result1, result2
23f08                 | LR__3401
23f08                 | __system____builtin_ilogb_ret
23f08     2D 00 64 FD | 	ret
23f0c                 | 
23f0c                 | __system____builtin_sinf
23f0c     03 4A 05 F6 | 	mov	COUNT_, #3
23f10     A8 00 A0 FD | 	call	#pushregs_
23f14     09 1F 02 F6 | 	mov	local01, arg01
23f18     87 64 20 FF 
23f1c     DB 15 06 F6 | 	mov	arg02, ##1086918619
23f20     B0 F8 BF FD | 	call	#__system___float_div
23f24     FD 12 02 F6 | 	mov	arg01, result1
23f28     00 14 06 F6 | 	mov	arg02, #0
23f2c     68 FB BF FD | 	call	#__system___float_tointeger
23f30     FD 16 0A F6 | 	mov	arg03, result1 wz
23f34     44 00 90 AD |  if_e	jmp	#LR__3410
23f38     0B 13 52 F6 | 	abs	arg01, arg03 wc
23f3c     1F 20 C6 C9 |  if_b	decod	local02, #31
23f40     00 20 06 36 |  if_ae	mov	local02, #0
23f44     84 F2 BF FD | 	call	#__system___float_fromuns
23f48     10 FB 61 F5 | 	xor	result1, local02
23f4c     FD 12 02 F6 | 	mov	arg01, result1
23f50     1E 14 C6 F9 | 	decod	arg02, #30
23f54     78 F6 BF FD | 	call	#__system___float_mul
23f58     FD 12 02 F6 | 	mov	arg01, result1
23f5c     87 24 20 FF 
23f60     DB 15 06 F6 | 	mov	arg02, ##1078530011
23f64     68 F6 BF FD | 	call	#__system___float_mul
23f68     FD 14 02 F6 | 	mov	arg02, result1
23f6c     0F 13 02 F6 | 	mov	arg01, local01
23f70     1F 14 E6 F4 | 	bitnot	arg02, #31
23f74     88 F2 BF FD | 	call	#__system___float_add
23f78     FD 1E 02 F6 | 	mov	local01, result1
23f7c                 | LR__3410
23f7c     0F 13 02 F6 | 	mov	arg01, local01
23f80     66 E6 1E FF 
23f84     CD 14 06 F6 | 	mov	arg02, ##1036831949
23f88     01 16 06 F6 | 	mov	arg03, #1
23f8c     74 FA BF FD | 	call	#__system___float_cmp
23f90     00 FA 55 F2 | 	cmps	result1, #0 wc
23f94     5C 00 90 3D |  if_ae	jmp	#LR__3411
23f98     0F 13 02 F6 | 	mov	arg01, local01
23f9c     66 E6 5E FF 
23fa0     CD 14 06 F6 | 	mov	arg02, ##-1110651699
23fa4     01 16 66 F6 | 	neg	arg03, #1
23fa8     58 FA BF FD | 	call	#__system___float_cmp
23fac     01 FA 55 F2 | 	cmps	result1, #1 wc
23fb0     40 00 90 CD |  if_b	jmp	#LR__3411
23fb4     0F 13 02 F6 | 	mov	arg01, local01
23fb8     0F 15 02 F6 | 	mov	arg02, local01
23fbc     10 F6 BF FD | 	call	#__system___float_mul
23fc0     FD 12 02 F6 | 	mov	arg01, result1
23fc4     0F 15 02 F6 | 	mov	arg02, local01
23fc8     04 F6 BF FD | 	call	#__system___float_mul
23fcc     FD 12 02 F6 | 	mov	arg01, result1
23fd0     00 60 20 FF 
23fd4     00 14 06 F6 | 	mov	arg02, ##1086324736
23fd8     F8 F7 BF FD | 	call	#__system___float_div
23fdc     FD 14 02 F6 | 	mov	arg02, result1
23fe0     0F 13 02 F6 | 	mov	arg01, local01
23fe4     1F 14 E6 F4 | 	bitnot	arg02, #31
23fe8     14 F2 BF FD | 	call	#__system___float_add
23fec     FD 22 02 F6 | 	mov	local03, result1
23ff0     54 00 90 FD | 	jmp	#LR__3412
23ff4                 | LR__3411
23ff4     0F 13 02 F6 | 	mov	arg01, local01
23ff8     7C 91 26 FF 
23ffc     83 15 06 F6 | 	mov	arg02, ##1294137731
24000     CC F5 BF FD | 	call	#__system___float_mul
24004     FD 12 02 F6 | 	mov	arg01, result1
24008     00 14 06 F6 | 	mov	arg02, #0
2400c     88 FA BF FD | 	call	#__system___float_tointeger
24010     02 FA 65 F0 | 	shl	result1, #2
24014     00 00 A0 FF 
24018     FD 00 48 FD | 	qrotate	##1073741824, result1
2401c     19 12 62 FD | 	getqy	arg01
24020     09 13 52 F6 | 	abs	arg01, arg01 wc
24024     1F 20 C6 C9 |  if_b	decod	local02, #31
24028     00 20 06 36 |  if_ae	mov	local02, #0
2402c     9C F1 BF FD | 	call	#__system___float_fromuns
24030     10 FB 61 F5 | 	xor	result1, local02
24034     FD 12 02 F6 | 	mov	arg01, result1
24038     00 40 27 FF 
2403c     00 14 06 F6 | 	mov	arg02, ##1317011456
24040     90 F7 BF FD | 	call	#__system___float_div
24044     FD 22 02 F6 | 	mov	local03, result1
24048                 | LR__3412
24048     11 FB 01 F6 | 	mov	result1, local03
2404c     A7 F0 03 F6 | 	mov	ptra, fp
24050     B2 00 A0 FD | 	call	#popregs_
24054                 | __system____builtin_sinf_ret
24054     2D 00 64 FD | 	ret
24058                 | 
24058                 | __system____builtin_tanf
24058     02 4A 05 F6 | 	mov	COUNT_, #2
2405c     A8 00 A0 FD | 	call	#pushregs_
24060     09 1F 02 F6 | 	mov	local01, arg01
24064     A4 FE BF FD | 	call	#__system____builtin_sinf
24068     FD 20 02 F6 | 	mov	local02, result1
2406c     0F 15 02 F6 | 	mov	arg02, local01
24070     87 E4 1F FF 
24074     DB 13 06 F6 | 	mov	arg01, ##1070141403
24078     1F 14 E6 F4 | 	bitnot	arg02, #31
2407c     80 F1 BF FD | 	call	#__system___float_add
24080     FD 12 02 F6 | 	mov	arg01, result1
24084     84 FE BF FD | 	call	#__system____builtin_sinf
24088     FD 14 02 F6 | 	mov	arg02, result1
2408c     10 13 02 F6 | 	mov	arg01, local02
24090     40 F7 BF FD | 	call	#__system___float_div
24094     A7 F0 03 F6 | 	mov	ptra, fp
24098     B2 00 A0 FD | 	call	#popregs_
2409c                 | __system____builtin_tanf_ret
2409c     2D 00 64 FD | 	ret
240a0                 | 
240a0                 | __system____builtin_asinf
240a0     01 4A 05 F6 | 	mov	COUNT_, #1
240a4     A8 00 A0 FD | 	call	#pushregs_
240a8     09 1F 02 F6 | 	mov	local01, arg01
240ac     0F 15 02 F6 | 	mov	arg02, local01
240b0     0F 13 02 F6 | 	mov	arg01, local01
240b4     18 F5 BF FD | 	call	#__system___float_mul
240b8     FD 14 02 F6 | 	mov	arg02, result1
240bc     00 C0 1F FF 
240c0     00 12 06 F6 | 	mov	arg01, ##1065353216
240c4     1F 14 E6 F4 | 	bitnot	arg02, #31
240c8     34 F1 BF FD | 	call	#__system___float_add
240cc     FD 12 02 F6 | 	mov	arg01, result1
240d0     24 F4 BF FD | 	call	#__system___float_sqrt
240d4     FD 14 02 F6 | 	mov	arg02, result1
240d8     0F 13 02 F6 | 	mov	arg01, local01
240dc     58 00 B0 FD | 	call	#__system____builtin_atan2f
240e0     A7 F0 03 F6 | 	mov	ptra, fp
240e4     B2 00 A0 FD | 	call	#popregs_
240e8                 | __system____builtin_asinf_ret
240e8     2D 00 64 FD | 	ret
240ec                 | 
240ec                 | __system____builtin_acosf
240ec     01 4A 05 F6 | 	mov	COUNT_, #1
240f0     A8 00 A0 FD | 	call	#pushregs_
240f4     09 1F 02 F6 | 	mov	local01, arg01
240f8     0F 15 02 F6 | 	mov	arg02, local01
240fc     0F 13 02 F6 | 	mov	arg01, local01
24100     CC F4 BF FD | 	call	#__system___float_mul
24104     FD 14 02 F6 | 	mov	arg02, result1
24108     00 C0 1F FF 
2410c     00 12 06 F6 | 	mov	arg01, ##1065353216
24110     1F 14 E6 F4 | 	bitnot	arg02, #31
24114     E8 F0 BF FD | 	call	#__system___float_add
24118     FD 12 02 F6 | 	mov	arg01, result1
2411c     D8 F3 BF FD | 	call	#__system___float_sqrt
24120     FD 12 02 F6 | 	mov	arg01, result1
24124     0F 15 02 F6 | 	mov	arg02, local01
24128     0C 00 B0 FD | 	call	#__system____builtin_atan2f
2412c     A7 F0 03 F6 | 	mov	ptra, fp
24130     B2 00 A0 FD | 	call	#popregs_
24134                 | __system____builtin_acosf_ret
24134     2D 00 64 FD | 	ret
24138                 | 
24138                 | __system____builtin_atan2f
24138     04 4A 05 F6 | 	mov	COUNT_, #4
2413c     A8 00 A0 FD | 	call	#pushregs_
24140     09 1F 02 F6 | 	mov	local01, arg01
24144     0A 21 02 F6 | 	mov	local02, arg02
24148     0F 13 02 F6 | 	mov	arg01, local01
2414c     00 14 06 F6 | 	mov	arg02, #0
24150     01 16 06 F6 | 	mov	arg03, #1
24154     AC F8 BF FD | 	call	#__system___float_cmp
24158     00 FA 0D F2 | 	cmp	result1, #0 wz
2415c     28 00 90 5D |  if_ne	jmp	#LR__3420
24160     10 13 02 F6 | 	mov	arg01, local02
24164     00 14 06 F6 | 	mov	arg02, #0
24168     01 16 06 F6 | 	mov	arg03, #1
2416c     94 F8 BF FD | 	call	#__system___float_cmp
24170     00 FA 55 F2 | 	cmps	result1, #0 wc
24174     87 24 60 CF 
24178     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
2417c     DC 00 90 CD |  if_b	jmp	#LR__3421
24180     00 FA 05 F6 | 	mov	result1, #0
24184     D4 00 90 FD | 	jmp	#LR__3421
24188                 | LR__3420
24188     10 13 02 F6 | 	mov	arg01, local02
2418c     10 15 02 F6 | 	mov	arg02, local02
24190     3C F4 BF FD | 	call	#__system___float_mul
24194     FD 22 02 F6 | 	mov	local03, result1
24198     0F 13 02 F6 | 	mov	arg01, local01
2419c     0F 15 02 F6 | 	mov	arg02, local01
241a0     2C F4 BF FD | 	call	#__system___float_mul
241a4     FD 14 02 F6 | 	mov	arg02, result1
241a8     11 13 02 F6 | 	mov	arg01, local03
241ac     50 F0 BF FD | 	call	#__system___float_add
241b0     FD 12 02 F6 | 	mov	arg01, result1
241b4     40 F3 BF FD | 	call	#__system___float_sqrt
241b8     FD 22 02 F6 | 	mov	local03, result1
241bc     10 13 02 F6 | 	mov	arg01, local02
241c0     11 15 02 F6 | 	mov	arg02, local03
241c4     0C F6 BF FD | 	call	#__system___float_div
241c8     FD 20 02 F6 | 	mov	local02, result1
241cc     0F 13 02 F6 | 	mov	arg01, local01
241d0     11 15 02 F6 | 	mov	arg02, local03
241d4     FC F5 BF FD | 	call	#__system___float_div
241d8     FD 1E 02 F6 | 	mov	local01, result1
241dc     00 40 27 FF 
241e0     00 12 06 F6 | 	mov	arg01, ##1317011456
241e4     10 15 02 F6 | 	mov	arg02, local02
241e8     E4 F3 BF FD | 	call	#__system___float_mul
241ec     FD 12 02 F6 | 	mov	arg01, result1
241f0     00 14 06 F6 | 	mov	arg02, #0
241f4     A0 F8 BF FD | 	call	#__system___float_tointeger
241f8     FD 22 02 F6 | 	mov	local03, result1
241fc     00 40 27 FF 
24200     00 12 06 F6 | 	mov	arg01, ##1317011456
24204     0F 15 02 F6 | 	mov	arg02, local01
24208     C4 F3 BF FD | 	call	#__system___float_mul
2420c     FD 12 02 F6 | 	mov	arg01, result1
24210     00 14 06 F6 | 	mov	arg02, #0
24214     80 F8 BF FD | 	call	#__system___float_tointeger
24218     FD 22 52 FD | 	qvector	local03, result1
2421c     87 24 20 FF 
24220     DB 23 06 F6 | 	mov	local03, ##1078530011
24224     19 12 62 FD | 	getqy	arg01
24228     01 12 C6 F0 | 	sar	arg01, #1
2422c     09 13 52 F6 | 	abs	arg01, arg01 wc
24230     1F 24 C6 C9 |  if_b	decod	local04, #31
24234     00 24 06 36 |  if_ae	mov	local04, #0
24238     90 EF BF FD | 	call	#__system___float_fromuns
2423c     12 FB 61 F5 | 	xor	result1, local04
24240     FD 12 02 F6 | 	mov	arg01, result1
24244     00 40 27 FF 
24248     00 14 06 F6 | 	mov	arg02, ##1317011456
2424c     84 F5 BF FD | 	call	#__system___float_div
24250     FD 14 02 F6 | 	mov	arg02, result1
24254     11 13 02 F6 | 	mov	arg01, local03
24258     74 F3 BF FD | 	call	#__system___float_mul
2425c                 | LR__3421
2425c     A7 F0 03 F6 | 	mov	ptra, fp
24260     B2 00 A0 FD | 	call	#popregs_
24264                 | __system____builtin_atan2f_ret
24264     2D 00 64 FD | 	ret
24268                 | 
24268                 | __system____builtin_exp2f
24268     04 4A 05 F6 | 	mov	COUNT_, #4
2426c     A8 00 A0 FD | 	call	#pushregs_
24270     09 1F 02 F6 | 	mov	local01, arg01
24274     00 7F 21 FF 
24278     00 14 06 F6 | 	mov	arg02, ##1123942400
2427c     01 16 66 F6 | 	neg	arg03, #1
24280     80 F7 BF FD | 	call	#__system___float_cmp
24284     00 FA 55 F2 | 	cmps	result1, #0 wc
24288     00 C0 3F 3F 
2428c     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
24290     DC 00 90 3D |  if_ae	jmp	#LR__3431
24294     0F 13 02 F6 | 	mov	arg01, local01
24298     00 7F 61 FF 
2429c     00 14 06 F6 | 	mov	arg02, ##-1023541248
242a0     01 16 06 F6 | 	mov	arg03, #1
242a4     5C F7 BF FD | 	call	#__system___float_cmp
242a8     00 FA 55 F2 | 	cmps	result1, #0 wc
242ac     00 FA 05 C6 |  if_b	mov	result1, #0
242b0     BC 00 90 CD |  if_b	jmp	#LR__3431
242b4     0F 13 02 F6 | 	mov	arg01, local01
242b8     00 14 06 F6 | 	mov	arg02, #0
242bc     D8 F7 BF FD | 	call	#__system___float_tointeger
242c0     FD 20 02 F6 | 	mov	local02, result1
242c4     10 13 52 F6 | 	abs	arg01, local02 wc
242c8     1F 22 C6 C9 |  if_b	decod	local03, #31
242cc     00 22 06 36 |  if_ae	mov	local03, #0
242d0     F8 EE BF FD | 	call	#__system___float_fromuns
242d4     11 FB 61 F5 | 	xor	result1, local03
242d8     FD 14 02 F6 | 	mov	arg02, result1
242dc     0F 13 02 F6 | 	mov	arg01, local01
242e0     1F 14 E6 F4 | 	bitnot	arg02, #31
242e4     18 EF BF FD | 	call	#__system___float_add
242e8     FD 24 02 F6 | 	mov	local04, result1
242ec     12 13 02 F6 | 	mov	arg01, local04
242f0     00 14 06 F6 | 	mov	arg02, #0
242f4     01 16 06 F6 | 	mov	arg03, #1
242f8     08 F7 BF FD | 	call	#__system___float_cmp
242fc     00 FA 55 F2 | 	cmps	result1, #0 wc
24300     18 00 90 3D |  if_ae	jmp	#LR__3430
24304     12 13 02 F6 | 	mov	arg01, local04
24308     00 C0 1F FF 
2430c     00 14 06 F6 | 	mov	arg02, ##1065353216
24310     EC EE BF FD | 	call	#__system___float_add
24314     FD 24 02 F6 | 	mov	local04, result1
24318     01 20 86 F1 | 	sub	local02, #1
2431c                 | LR__3430
2431c     7F 20 06 F1 | 	add	local02, #127
24320     17 20 66 F0 | 	shl	local02, #23
24324     12 13 02 F6 | 	mov	arg01, local04
24328     00 80 26 FF 
2432c     00 14 06 F6 | 	mov	arg02, ##1291845632
24330     9C F2 BF FD | 	call	#__system___float_mul
24334     FD 12 02 F6 | 	mov	arg01, result1
24338     00 14 06 F6 | 	mov	arg02, #0
2433c     58 F7 BF FD | 	call	#__system___float_tointeger
24340     FD 24 0A F6 | 	mov	local04, result1 wz
24344     10 FB 01 A6 |  if_e	mov	result1, local02
24348     24 00 90 AD |  if_e	jmp	#LR__3431
2434c     3E 24 26 F4 | 	bith	local04, #62
24350     0F 24 62 FD | 	qexp	local04
24354     10 13 02 F6 | 	mov	arg01, local02
24358     18 14 62 FD | 	getqx	arg02
2435c     01 14 06 F1 | 	add	arg02, #1
24360     01 14 46 F0 | 	shr	arg02, #1
24364     00 80 1F FF 
24368     00 14 06 F1 | 	add	arg02, ##1056964608
2436c     60 F2 BF FD | 	call	#__system___float_mul
24370                 | LR__3431
24370     A7 F0 03 F6 | 	mov	ptra, fp
24374     B2 00 A0 FD | 	call	#popregs_
24378                 | __system____builtin_exp2f_ret
24378     2D 00 64 FD | 	ret
2437c                 | 
2437c                 | __system____builtin_log2f
2437c     06 4A 05 F6 | 	mov	COUNT_, #6
24380     A8 00 A0 FD | 	call	#pushregs_
24384     09 1F 02 F6 | 	mov	local01, arg01
24388     09 21 0A F6 | 	mov	local02, arg01 wz
2438c     00 00 40 5F 
24390     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
24394     00 40 00 AF 
24398     00 FA 65 A6 |  if_e	neg	result1, ##8388608
2439c     08 01 90 AD |  if_e	jmp	#LR__3444
243a0     00 20 56 F2 | 	cmps	local02, #0 wc
243a4     00 E0 3F CF 
243a8     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
243ac     F8 00 90 CD |  if_b	jmp	#LR__3444
243b0     0F 13 02 F6 | 	mov	arg01, local01
243b4     00 90 20 FF 
243b8     00 14 06 F6 | 	mov	arg02, ##1092616192
243bc     01 16 06 F6 | 	mov	arg03, #1
243c0     40 F6 BF FD | 	call	#__system___float_cmp
243c4     00 FA 0D F2 | 	cmp	result1, #0 wz
243c8     4D 2A 20 AF 
243cc     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
243d0     D4 00 90 AD |  if_e	jmp	#LR__3444
243d4     0F 13 02 F6 | 	mov	arg01, local01
243d8     FC 16 20 FF 
243dc     54 14 06 F6 | 	mov	arg02, ##1076754516
243e0     01 16 06 F6 | 	mov	arg03, #1
243e4     1C F6 BF FD | 	call	#__system___float_cmp
243e8     00 FA 0D F2 | 	cmp	result1, #0 wz
243ec     55 DC 1F AF 
243f0     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
243f4     B0 00 90 AD |  if_e	jmp	#LR__3444
243f8     10 23 02 F6 | 	mov	local03, local02
243fc     17 22 46 F0 | 	shr	local03, #23
24400     11 23 E2 F8 | 	getbyte	local03, local03, #0
24404     17 21 06 F4 | 	bitl	local02, #279
24408     10 25 02 F6 | 	mov	local04, local02
2440c     FF 22 0E F2 | 	cmp	local03, #255 wz
24410     1C 00 90 5D |  if_ne	jmp	#LR__3440
24414     00 24 0E F2 | 	cmp	local04, #0 wz
24418     00 C0 3F 5F 
2441c     00 26 06 56 |  if_ne	mov	local05, ##2139095040
24420     00 E0 3F AF 
24424     00 26 06 A6 |  if_e	mov	local05, ##2143289344
24428     13 FB 01 F6 | 	mov	result1, local05
2442c     78 00 90 FD | 	jmp	#LR__3444
24430                 | LR__3440
24430     00 22 0E F2 | 	cmp	local03, #0 wz
24434     17 24 26 54 |  if_ne	bith	local04, #23
24438     7F 22 86 51 |  if_ne	sub	local03, #127
2443c     28 00 90 5D |  if_ne	jmp	#LR__3443
24440     00 24 0E F2 | 	cmp	local04, #0 wz
24444     00 40 00 AF 
24448     00 FA 65 A6 |  if_e	neg	result1, ##8388608
2444c     58 00 90 AD |  if_e	jmp	#LR__3444
24450     7E 22 66 F6 | 	neg	local03, #126
24454     97 08 48 FB | 	callpa	#(@LR__3442-@LR__3441)>>2,fcache_load_ptr_
24458                 | LR__3441
24458     17 24 2E F4 | 	testbn	local04, #23 wz
2445c     01 24 66 A0 |  if_e	shl	local04, #1
24460     01 22 06 A1 |  if_e	add	local03, #1
24464     F0 FF 9F AD |  if_e	jmp	#LR__3441
24468                 | LR__3442
24468                 | LR__3443
24468     0E 24 62 FD | 	qlog	local04
2446c     01 22 86 F1 | 	sub	local03, #1
24470     11 13 52 F6 | 	abs	arg01, local03 wc
24474     1F 28 C6 C9 |  if_b	decod	local06, #31
24478     00 28 06 36 |  if_ae	mov	local06, #0
2447c     18 26 62 FD | 	getqx	local05
24480     9B 26 06 F4 | 	bitl	local05, #155
24484     08 26 06 F1 | 	add	local05, #8
24488     04 26 46 F0 | 	shr	local05, #4
2448c     00 C0 1F FF 
24490     00 26 06 F1 | 	add	local05, ##1065353216
24494     34 ED BF FD | 	call	#__system___float_fromuns
24498     14 FB 61 F5 | 	xor	result1, local06
2449c     FD 14 02 F6 | 	mov	arg02, result1
244a0     13 13 02 F6 | 	mov	arg01, local05
244a4     58 ED BF FD | 	call	#__system___float_add
244a8                 | LR__3444
244a8     A7 F0 03 F6 | 	mov	ptra, fp
244ac     B2 00 A0 FD | 	call	#popregs_
244b0                 | __system____builtin_log2f_ret
244b0     2D 00 64 FD | 	ret
244b4                 | 
244b4                 | __system____builtin_powf
244b4     04 4A 05 F6 | 	mov	COUNT_, #4
244b8     A8 00 A0 FD | 	call	#pushregs_
244bc     09 1F 02 F6 | 	mov	local01, arg01
244c0     0A 21 02 F6 | 	mov	local02, arg02
244c4     10 13 02 F6 | 	mov	arg01, local02
244c8     00 14 06 F6 | 	mov	arg02, #0
244cc     C8 F5 BF FD | 	call	#__system___float_tointeger
244d0     FD 22 02 F6 | 	mov	local03, result1
244d4     11 13 52 F6 | 	abs	arg01, local03 wc
244d8     1F 24 C6 C9 |  if_b	decod	local04, #31
244dc     00 24 06 36 |  if_ae	mov	local04, #0
244e0     E8 EC BF FD | 	call	#__system___float_fromuns
244e4     12 FB 61 F5 | 	xor	result1, local04
244e8     FD 12 02 F6 | 	mov	arg01, result1
244ec     10 15 02 F6 | 	mov	arg02, local02
244f0     01 16 06 F6 | 	mov	arg03, #1
244f4     0C F5 BF FD | 	call	#__system___float_cmp
244f8     00 FA 0D F2 | 	cmp	result1, #0 wz
244fc     18 00 90 5D |  if_ne	jmp	#LR__3450
24500     00 C0 1F FF 
24504     00 12 06 F6 | 	mov	arg01, ##1065353216
24508     0F 15 02 F6 | 	mov	arg02, local01
2450c     11 17 02 F6 | 	mov	arg03, local03
24510     A0 00 B0 FD | 	call	#__system___float_pow_n
24514     58 00 90 FD | 	jmp	#LR__3451
24518                 | LR__3450
24518     0F 13 02 F6 | 	mov	arg01, local01
2451c     00 14 06 F6 | 	mov	arg02, #0
24520     01 16 06 F6 | 	mov	arg03, #1
24524     DC F4 BF FD | 	call	#__system___float_cmp
24528     00 FA 55 F2 | 	cmps	result1, #0 wc
2452c     00 E0 3F CF 
24530     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
24534     38 00 90 CD |  if_b	jmp	#LR__3451
24538     0F 13 02 F6 | 	mov	arg01, local01
2453c     00 14 06 F6 | 	mov	arg02, #0
24540     01 16 06 F6 | 	mov	arg03, #1
24544     BC F4 BF FD | 	call	#__system___float_cmp
24548     00 FA 0D F2 | 	cmp	result1, #0 wz
2454c     00 FA 05 A6 |  if_e	mov	result1, #0
24550     1C 00 90 AD |  if_e	jmp	#LR__3451
24554     0F 13 02 F6 | 	mov	arg01, local01
24558     20 FE BF FD | 	call	#__system____builtin_log2f
2455c     FD 12 02 F6 | 	mov	arg01, result1
24560     10 15 02 F6 | 	mov	arg02, local02
24564     68 F0 BF FD | 	call	#__system___float_mul
24568     FD 12 02 F6 | 	mov	arg01, result1
2456c     F8 FC BF FD | 	call	#__system____builtin_exp2f
24570                 | LR__3451
24570     A7 F0 03 F6 | 	mov	ptra, fp
24574     B2 00 A0 FD | 	call	#popregs_
24578                 | __system____builtin_powf_ret
24578     2D 00 64 FD | 	ret
2457c                 | 
2457c                 | __system____builtin_logbase
2457c     02 4A 05 F6 | 	mov	COUNT_, #2
24580     A8 00 A0 FD | 	call	#pushregs_
24584     09 1F 02 F6 | 	mov	local01, arg01
24588     0A 13 02 F6 | 	mov	arg01, arg02
2458c     EC FD BF FD | 	call	#__system____builtin_log2f
24590     FD 20 02 F6 | 	mov	local02, result1
24594     0F 13 02 F6 | 	mov	arg01, local01
24598     E0 FD BF FD | 	call	#__system____builtin_log2f
2459c     FD 14 02 F6 | 	mov	arg02, result1
245a0     10 13 02 F6 | 	mov	arg01, local02
245a4     2C F2 BF FD | 	call	#__system___float_div
245a8     A7 F0 03 F6 | 	mov	ptra, fp
245ac     B2 00 A0 FD | 	call	#popregs_
245b0                 | __system____builtin_logbase_ret
245b0     2D 00 64 FD | 	ret
245b4                 | 
245b4                 | __system___float_pow_n
245b4     05 4A 05 F6 | 	mov	COUNT_, #5
245b8     A8 00 A0 FD | 	call	#pushregs_
245bc     09 1F 02 F6 | 	mov	local01, arg01
245c0     0A 21 02 F6 | 	mov	local02, arg02
245c4     0B 23 02 F6 | 	mov	local03, arg03
245c8     00 22 56 F2 | 	cmps	local03, #0 wc
245cc     18 00 90 3D |  if_ae	jmp	#LR__3460
245d0     01 24 06 F6 | 	mov	local04, #1
245d4     11 23 62 F6 | 	neg	local03, local03
245d8     00 22 56 F2 | 	cmps	local03, #0 wc
245dc     00 FA 05 C6 |  if_b	mov	result1, #0
245e0     94 00 90 CD |  if_b	jmp	#LR__3468
245e4     04 00 90 FD | 	jmp	#LR__3461
245e8                 | LR__3460
245e8     00 24 06 F6 | 	mov	local04, #0
245ec                 | LR__3461
245ec     00 C0 1F FF 
245f0     00 26 06 F6 | 	mov	local05, ##1065353216
245f4                 | LR__3462
245f4     01 22 56 F2 | 	cmps	local03, #1 wc
245f8     30 00 90 CD |  if_b	jmp	#LR__3464
245fc     01 22 CE F7 | 	test	local03, #1 wz
24600     10 00 90 AD |  if_e	jmp	#LR__3463
24604     13 13 02 F6 | 	mov	arg01, local05
24608     10 15 02 F6 | 	mov	arg02, local02
2460c     C0 EF BF FD | 	call	#__system___float_mul
24610     FD 26 02 F6 | 	mov	local05, result1
24614                 | LR__3463
24614     01 22 C6 F0 | 	sar	local03, #1
24618     10 13 02 F6 | 	mov	arg01, local02
2461c     10 15 02 F6 | 	mov	arg02, local02
24620     AC EF BF FD | 	call	#__system___float_mul
24624     FD 20 02 F6 | 	mov	local02, result1
24628     C8 FF 9F FD | 	jmp	#LR__3462
2462c                 | LR__3464
2462c     00 24 0E F2 | 	cmp	local04, #0 wz
24630     14 00 90 AD |  if_e	jmp	#LR__3465
24634     0F 13 02 F6 | 	mov	arg01, local01
24638     13 15 02 F6 | 	mov	arg02, local05
2463c     94 F1 BF FD | 	call	#__system___float_div
24640     FD 26 02 F6 | 	mov	local05, result1
24644     2C 00 90 FD | 	jmp	#LR__3467
24648                 | LR__3465
24648     0F 13 02 F6 | 	mov	arg01, local01
2464c     00 C0 1F FF 
24650     00 14 06 F6 | 	mov	arg02, ##1065353216
24654     01 16 06 F6 | 	mov	arg03, #1
24658     A8 F3 BF FD | 	call	#__system___float_cmp
2465c     00 FA 0D F2 | 	cmp	result1, #0 wz
24660     10 00 90 AD |  if_e	jmp	#LR__3466
24664     0F 13 02 F6 | 	mov	arg01, local01
24668     13 15 02 F6 | 	mov	arg02, local05
2466c     60 EF BF FD | 	call	#__system___float_mul
24670     FD 26 02 F6 | 	mov	local05, result1
24674                 | LR__3466
24674                 | LR__3467
24674     13 FB 01 F6 | 	mov	result1, local05
24678                 | LR__3468
24678     A7 F0 03 F6 | 	mov	ptra, fp
2467c     B2 00 A0 FD | 	call	#popregs_
24680                 | __system___float_pow_n_ret
24680     2D 00 64 FD | 	ret
24684                 | 
24684                 | __system___gc_ptrs
24684     EC 00 02 F6 | 	mov	_var01, __heap_ptr
24688     00 03 02 F6 | 	mov	_var02, _var01
2468c     76 01 00 FF 
24690     F8 03 06 F1 | 	add	_var02, ##191992
24694     00 FD 09 FB | 	rdlong	result2, _var01 wz
24698     74 00 90 5D |  if_ne	jmp	#LR__3470
2469c     01 FD 01 F6 | 	mov	result2, _var02
246a0     00 FD 81 F1 | 	sub	result2, _var01
246a4     00 03 58 FC | 	wrword	#1, _var01
246a8     00 FB 01 F6 | 	mov	result1, _var01
246ac     02 FA 05 F1 | 	add	result1, #2
246b0     36 00 80 FF 
246b4     FD 20 59 FC | 	wrword	##27792, result1
246b8     00 FB 01 F6 | 	mov	result1, _var01
246bc     04 FA 05 F1 | 	add	result1, #4
246c0     FD 00 58 FC | 	wrword	#0, result1
246c4     00 FB 01 F6 | 	mov	result1, _var01
246c8     06 FA 05 F1 | 	add	result1, #6
246cc     FD 02 58 FC | 	wrword	#1, result1
246d0     10 00 06 F1 | 	add	_var01, #16
246d4     FE FC 51 F6 | 	abs	result2, result2 wc
246d8     04 FC 45 F0 | 	shr	result2, #4
246dc     FE FC 81 F6 | 	negc	result2, result2
246e0     00 FD 51 FC | 	wrword	result2, _var01
246e4     00 FD 01 F6 | 	mov	result2, _var01
246e8     02 FC 05 F1 | 	add	result2, #2
246ec     36 00 80 FF 
246f0     FE 1E 59 FC | 	wrword	##27791, result2
246f4     00 FD 01 F6 | 	mov	result2, _var01
246f8     04 FC 05 F1 | 	add	result2, #4
246fc     FE 00 58 FC | 	wrword	#0, result2
24700     00 FD 01 F6 | 	mov	result2, _var01
24704     06 FC 05 F1 | 	add	result2, #6
24708     FE 00 58 FC | 	wrword	#0, result2
2470c     10 00 86 F1 | 	sub	_var01, #16
24710                 | LR__3470
24710     00 FB 01 F6 | 	mov	result1, _var01
24714     01 FD 01 F6 | 	mov	result2, _var02
24718                 | __system___gc_ptrs_ret
24718     2D 00 64 FD | 	ret
2471c                 | 
2471c                 | __system___gc_tryalloc
2471c     0B 4A 05 F6 | 	mov	COUNT_, #11
24720     A8 00 A0 FD | 	call	#pushregs_
24724     09 1F 02 F6 | 	mov	local01, arg01
24728     0A 21 02 F6 | 	mov	local02, arg02
2472c     54 FF BF FD | 	call	#__system___gc_ptrs
24730     FD 22 02 F6 | 	mov	local03, result1
24734     FE 24 02 F6 | 	mov	local04, result2
24738     11 27 02 F6 | 	mov	local05, local03
2473c     00 28 06 F6 | 	mov	local06, #0
24740     97 1E 48 FB | 	callpa	#(@LR__3481-@LR__3480)>>2,fcache_load_ptr_
24744                 | LR__3480
24744     13 2B 02 F6 | 	mov	local07, local05
24748     06 26 06 F1 | 	add	local05, #6
2474c     13 15 EA FA | 	rdword	arg02, local05 wz
24750     11 13 02 F6 | 	mov	arg01, local03
24754     00 FA 05 A6 |  if_e	mov	result1, #0
24758     04 14 66 50 |  if_ne	shl	arg02, #4
2475c     0A 13 02 51 |  if_ne	add	arg01, arg02
24760     09 FB 01 56 |  if_ne	mov	result1, arg01
24764     FD 26 0A F6 | 	mov	local05, result1 wz
24768     13 29 E2 5A |  if_ne	rdword	local06, local05
2476c     00 26 0E F2 | 	cmp	local05, #0 wz
24770     12 27 52 52 |  if_ne	cmps	local05, local04 wc
24774     08 00 90 1D |  if_a	jmp	#LR__3482
24778     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
2477c     C4 FF 9F 1D |  if_a	jmp	#LR__3480
24780                 | LR__3481
24780                 | LR__3482
24780     00 26 0E F2 | 	cmp	local05, #0 wz
24784     13 FB 01 A6 |  if_e	mov	result1, local05
24788     3C 01 90 AD |  if_e	jmp	#LR__3485
2478c     13 FD 01 F6 | 	mov	result2, local05
24790     06 FC 05 F1 | 	add	result2, #6
24794     FE 2C E2 FA | 	rdword	local08, result2
24798     14 1F 52 F2 | 	cmps	local01, local06 wc
2479c     C0 00 90 3D |  if_ae	jmp	#LR__3484
247a0     13 1F 52 FC | 	wrword	local01, local05
247a4     13 13 02 F6 | 	mov	arg01, local05
247a8     0F 2D 02 F6 | 	mov	local08, local01
247ac     04 2C 66 F0 | 	shl	local08, #4
247b0     16 13 02 F1 | 	add	arg01, local08
247b4     0F 29 82 F1 | 	sub	local06, local01
247b8     09 29 52 FC | 	wrword	local06, arg01
247bc     09 2D 02 F6 | 	mov	local08, arg01
247c0     02 2C 06 F1 | 	add	local08, #2
247c4     36 00 80 FF 
247c8     16 1F 59 FC | 	wrword	##27791, local08
247cc     13 15 0A F6 | 	mov	arg02, local05 wz
247d0     00 FA 05 A6 |  if_e	mov	result1, #0
247d4     11 15 82 51 |  if_ne	sub	arg02, local03
247d8     04 14 46 50 |  if_ne	shr	arg02, #4
247dc     0A FB 01 56 |  if_ne	mov	result1, arg02
247e0     09 2D 02 F6 | 	mov	local08, arg01
247e4     04 2C 06 F1 | 	add	local08, #4
247e8     16 FB 51 FC | 	wrword	result1, local08
247ec     13 2D 02 F6 | 	mov	local08, local05
247f0     06 2C 06 F1 | 	add	local08, #6
247f4     09 15 02 F6 | 	mov	arg02, arg01
247f8     16 2D E2 FA | 	rdword	local08, local08
247fc     06 14 06 F1 | 	add	arg02, #6
24800     0A 2D 52 FC | 	wrword	local08, arg02
24804     09 2F 02 F6 | 	mov	local09, arg01
24808     17 15 0A F6 | 	mov	arg02, local09 wz
2480c     00 FA 05 A6 |  if_e	mov	result1, #0
24810     11 15 82 51 |  if_ne	sub	arg02, local03
24814     04 14 46 50 |  if_ne	shr	arg02, #4
24818     0A FB 01 56 |  if_ne	mov	result1, arg02
2481c     FD 2C 02 F6 | 	mov	local08, result1
24820     09 31 EA FA | 	rdword	local10, arg01 wz
24824     00 FA 05 A6 |  if_e	mov	result1, #0
24828     04 30 66 50 |  if_ne	shl	local10, #4
2482c     18 13 02 51 |  if_ne	add	arg01, local10
24830     09 FB 01 56 |  if_ne	mov	result1, arg01
24834     FD 32 0A F6 | 	mov	local11, result1 wz
24838     24 00 90 AD |  if_e	jmp	#LR__3483
2483c     12 33 52 F2 | 	cmps	local11, local04 wc
24840     1C 00 90 3D |  if_ae	jmp	#LR__3483
24844     17 15 0A F6 | 	mov	arg02, local09 wz
24848     00 FA 05 A6 |  if_e	mov	result1, #0
2484c     11 15 82 51 |  if_ne	sub	arg02, local03
24850     04 14 46 50 |  if_ne	shr	arg02, #4
24854     0A FB 01 56 |  if_ne	mov	result1, arg02
24858     04 32 06 F1 | 	add	local11, #4
2485c     19 FB 51 FC | 	wrword	result1, local11
24860                 | LR__3483
24860                 | LR__3484
24860     06 2A 06 F1 | 	add	local07, #6
24864     15 2D 52 FC | 	wrword	local08, local07
24868     36 00 00 FF 
2486c     80 2E 06 F6 | 	mov	local09, ##27776
24870     10 2F 42 F5 | 	or	local09, local02
24874     00 FA 05 F6 | 	mov	result1, #0
24878     01 FA 61 FD | 	cogid	result1
2487c     FD 2E 42 F5 | 	or	local09, result1
24880     13 33 02 F6 | 	mov	local11, local05
24884     02 32 06 F1 | 	add	local11, #2
24888     19 2F 52 FC | 	wrword	local09, local11
2488c     11 2F 02 F6 | 	mov	local09, local03
24890     08 2E 06 F1 | 	add	local09, #8
24894     13 33 02 F6 | 	mov	local11, local05
24898     17 2F E2 FA | 	rdword	local09, local09
2489c     06 32 06 F1 | 	add	local11, #6
248a0     19 2F 52 FC | 	wrword	local09, local11
248a4     13 15 0A F6 | 	mov	arg02, local05 wz
248a8     00 FA 05 A6 |  if_e	mov	result1, #0
248ac     11 15 82 51 |  if_ne	sub	arg02, local03
248b0     04 14 46 50 |  if_ne	shr	arg02, #4
248b4     0A FB 01 56 |  if_ne	mov	result1, arg02
248b8     08 22 06 F1 | 	add	local03, #8
248bc     11 FB 51 FC | 	wrword	result1, local03
248c0     08 26 06 F1 | 	add	local05, #8
248c4     13 FB 01 F6 | 	mov	result1, local05
248c8                 | LR__3485
248c8     A7 F0 03 F6 | 	mov	ptra, fp
248cc     B2 00 A0 FD | 	call	#popregs_
248d0                 | __system___gc_tryalloc_ret
248d0     2D 00 64 FD | 	ret
248d4                 | 
248d4                 | __system___gc_alloc_managed
248d4     01 4A 05 F6 | 	mov	COUNT_, #1
248d8     A8 00 A0 FD | 	call	#pushregs_
248dc     09 1F 02 F6 | 	mov	local01, arg01
248e0     00 14 06 F6 | 	mov	arg02, #0
248e4     1C 00 B0 FD | 	call	#__system___gc_doalloc
248e8     FD 14 0A F6 | 	mov	arg02, result1 wz
248ec     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
248f0     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
248f4     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
248f8     A7 F0 03 F6 | 	mov	ptra, fp
248fc     B2 00 A0 FD | 	call	#popregs_
24900                 | __system___gc_alloc_managed_ret
24900     2D 00 64 FD | 	ret
24904                 | 
24904                 | __system___gc_doalloc
24904     06 4A 05 F6 | 	mov	COUNT_, #6
24908     A8 00 A0 FD | 	call	#pushregs_
2490c     09 1F 0A F6 | 	mov	local01, arg01 wz
24910     0A 21 02 F6 | 	mov	local02, arg02
24914     00 FA 05 A6 |  if_e	mov	result1, #0
24918     8C 00 90 AD |  if_e	jmp	#LR__3497
2491c     17 1E 06 F1 | 	add	local01, #23
24920     0F 1E 26 F5 | 	andn	local01, #15
24924     04 1E 46 F0 | 	shr	local01, #4
24928     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2492c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24930     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
24934     E4 C0 BF FD | 	call	#__system___lockmem
24938     0F 13 02 F6 | 	mov	arg01, local01
2493c     10 15 02 F6 | 	mov	arg02, local02
24940     D8 FD BF FD | 	call	#__system___gc_tryalloc
24944     FD 22 0A F6 | 	mov	local03, result1 wz
24948     14 00 90 5D |  if_ne	jmp	#LR__3490
2494c     70 03 B0 FD | 	call	#__system___gc_docollect
24950     0F 13 02 F6 | 	mov	arg01, local01
24954     10 15 02 F6 | 	mov	arg02, local02
24958     C0 FD BF FD | 	call	#__system___gc_tryalloc
2495c     FD 22 02 F6 | 	mov	local03, result1
24960                 | LR__3490
24960     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24964     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24968     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2496c     09 01 68 FC | 	wrlong	#0, arg01
24970     00 22 0E F2 | 	cmp	local03, #0 wz
24974     2C 00 90 AD |  if_e	jmp	#LR__3496
24978     04 1E 66 F0 | 	shl	local01, #4
2497c     08 1E 86 F1 | 	sub	local01, #8
24980     0F 25 52 F6 | 	abs	local04, local01 wc
24984     02 24 46 F0 | 	shr	local04, #2
24988     12 27 8A F6 | 	negc	local05, local04 wz
2498c     11 29 02 F6 | 	mov	local06, local03
24990     10 00 90 AD |  if_e	jmp	#LR__3495
24994     97 06 48 FB | 	callpa	#(@LR__3493-@LR__3491)>>2,fcache_load_ptr_
24998                 | LR__3491
24998     13 05 D8 FC | 	rep	@LR__3494, local05
2499c                 | LR__3492
2499c     14 01 68 FC | 	wrlong	#0, local06
249a0     04 28 06 F1 | 	add	local06, #4
249a4                 | LR__3493
249a4                 | LR__3494
249a4                 | LR__3495
249a4                 | LR__3496
249a4     11 FB 01 F6 | 	mov	result1, local03
249a8                 | LR__3497
249a8     A7 F0 03 F6 | 	mov	ptra, fp
249ac     B2 00 A0 FD | 	call	#popregs_
249b0                 | __system___gc_doalloc_ret
249b0     2D 00 64 FD | 	ret
249b4                 | 
249b4                 | __system___gc_isvalidptr
249b4     F8 16 06 F4 | 	bitl	arg03, #248
249b8     08 16 86 F1 | 	sub	arg03, #8
249bc     09 17 52 F2 | 	cmps	arg03, arg01 wc
249c0     08 00 90 CD |  if_b	jmp	#LR__3500
249c4     0A 17 52 F2 | 	cmps	arg03, arg02 wc
249c8     08 00 90 CD |  if_b	jmp	#LR__3501
249cc                 | LR__3500
249cc     00 FA 05 F6 | 	mov	result1, #0
249d0     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
249d4                 | LR__3501
249d4     0B 01 02 F6 | 	mov	_var01, arg03
249d8     09 01 62 F5 | 	xor	_var01, arg01
249dc     0F 00 CE F7 | 	test	_var01, #15 wz
249e0     00 FA 05 56 |  if_ne	mov	result1, #0
249e4     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
249e8     0B 01 02 F6 | 	mov	_var01, arg03
249ec     02 00 06 F1 | 	add	_var01, #2
249f0     00 01 E2 FA | 	rdword	_var01, _var01
249f4     7F 00 00 FF 
249f8     C0 01 06 F5 | 	and	_var01, ##65472
249fc     36 00 00 FF 
24a00     80 00 0E F2 | 	cmp	_var01, ##27776 wz
24a04     00 FA 05 56 |  if_ne	mov	result1, #0
24a08     0B FB 01 A6 |  if_e	mov	result1, arg03
24a0c                 | __system___gc_isvalidptr_ret
24a0c     2D 00 64 FD | 	ret
24a10                 | 
24a10                 | __system___gc_free
24a10     09 17 02 F6 | 	mov	arg03, arg01
24a14     6C FC BF FD | 	call	#__system___gc_ptrs
24a18     FD 12 02 F6 | 	mov	arg01, result1
24a1c     FE 14 02 F6 | 	mov	arg02, result2
24a20     90 FF BF FD | 	call	#__system___gc_isvalidptr
24a24     FD 14 0A F6 | 	mov	arg02, result1 wz
24a28     28 00 90 AD |  if_e	jmp	#LR__3510
24a2c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24a30     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24a34     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
24a38     E0 BF BF FD | 	call	#__system___lockmem
24a3c     0A 13 02 F6 | 	mov	arg01, arg02
24a40     14 00 B0 FD | 	call	#__system___gc_dofree
24a44     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24a48     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24a4c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
24a50     09 01 68 FC | 	wrlong	#0, arg01
24a54                 | LR__3510
24a54                 | __system___gc_free_ret
24a54     2D 00 64 FD | 	ret
24a58                 | 
24a58                 | __system___gc_dofree
24a58     06 4A 05 F6 | 	mov	COUNT_, #6
24a5c     A8 00 A0 FD | 	call	#pushregs_
24a60     09 1F 02 F6 | 	mov	local01, arg01
24a64     1C FC BF FD | 	call	#__system___gc_ptrs
24a68     FD 20 02 F6 | 	mov	local02, result1
24a6c     FE 22 02 F6 | 	mov	local03, result2
24a70     0F 15 02 F6 | 	mov	arg02, local01
24a74     02 14 06 F1 | 	add	arg02, #2
24a78     36 00 80 FF 
24a7c     0A 1F 59 FC | 	wrword	##27791, arg02
24a80     0F 25 02 F6 | 	mov	local04, local01
24a84     0F 13 02 F6 | 	mov	arg01, local01
24a88     09 27 EA FA | 	rdword	local05, arg01 wz
24a8c     00 FA 05 A6 |  if_e	mov	result1, #0
24a90     04 26 66 50 |  if_ne	shl	local05, #4
24a94     13 13 02 51 |  if_ne	add	arg01, local05
24a98     09 FB 01 56 |  if_ne	mov	result1, arg01
24a9c     FD 28 02 F6 | 	mov	local06, result1
24aa0     97 24 48 FB | 	callpa	#(@LR__3521-@LR__3520)>>2,fcache_load_ptr_
24aa4                 | LR__3520
24aa4     04 24 06 F1 | 	add	local04, #4
24aa8     12 15 EA FA | 	rdword	arg02, local04 wz
24aac     10 13 02 F6 | 	mov	arg01, local02
24ab0     00 FA 05 A6 |  if_e	mov	result1, #0
24ab4     04 14 66 50 |  if_ne	shl	arg02, #4
24ab8     0A 13 02 51 |  if_ne	add	arg01, arg02
24abc     09 FB 01 56 |  if_ne	mov	result1, arg01
24ac0     FD 24 0A F6 | 	mov	local04, result1 wz
24ac4     24 00 90 AD |  if_e	jmp	#LR__3522
24ac8     12 13 02 F6 | 	mov	arg01, local04
24acc     00 FA 05 F6 | 	mov	result1, #0
24ad0     02 12 06 F1 | 	add	arg01, #2
24ad4     09 13 E2 FA | 	rdword	arg01, arg01
24ad8     36 00 00 FF 
24adc     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24ae0     01 FA 65 A6 |  if_e	neg	result1, #1
24ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
24ae8     B8 FF 9F AD |  if_e	jmp	#LR__3520
24aec                 | LR__3521
24aec                 | LR__3522
24aec     00 24 0E F2 | 	cmp	local04, #0 wz
24af0     10 25 02 A6 |  if_e	mov	local04, local02
24af4     12 15 02 F6 | 	mov	arg02, local04
24af8     06 14 06 F1 | 	add	arg02, #6
24afc     0F 13 02 F6 | 	mov	arg01, local01
24b00     0A 15 E2 FA | 	rdword	arg02, arg02
24b04     06 12 06 F1 | 	add	arg01, #6
24b08     09 15 52 FC | 	wrword	arg02, arg01
24b0c     0F 15 0A F6 | 	mov	arg02, local01 wz
24b10     00 FA 05 A6 |  if_e	mov	result1, #0
24b14     10 15 82 51 |  if_ne	sub	arg02, local02
24b18     04 14 46 50 |  if_ne	shr	arg02, #4
24b1c     0A FB 01 56 |  if_ne	mov	result1, arg02
24b20     12 15 02 F6 | 	mov	arg02, local04
24b24     06 14 06 F1 | 	add	arg02, #6
24b28     0A FB 51 FC | 	wrword	result1, arg02
24b2c     10 25 0A F2 | 	cmp	local04, local02 wz
24b30     A4 00 90 AD |  if_e	jmp	#LR__3525
24b34     12 13 02 F6 | 	mov	arg01, local04
24b38     09 27 EA FA | 	rdword	local05, arg01 wz
24b3c     00 FA 05 A6 |  if_e	mov	result1, #0
24b40     04 26 66 50 |  if_ne	shl	local05, #4
24b44     13 13 02 51 |  if_ne	add	arg01, local05
24b48     09 FB 01 56 |  if_ne	mov	result1, arg01
24b4c     0F FB 09 F2 | 	cmp	result1, local01 wz
24b50     84 00 90 5D |  if_ne	jmp	#LR__3524
24b54     12 29 E2 FA | 	rdword	local06, local04
24b58     0F 15 E2 FA | 	rdword	arg02, local01
24b5c     0A 29 02 F1 | 	add	local06, arg02
24b60     12 29 52 FC | 	wrword	local06, local04
24b64     0F 29 02 F6 | 	mov	local06, local01
24b68     02 28 06 F1 | 	add	local06, #2
24b6c     14 01 58 FC | 	wrword	#0, local06
24b70     0F 13 02 F6 | 	mov	arg01, local01
24b74     09 27 EA FA | 	rdword	local05, arg01 wz
24b78     00 FA 05 A6 |  if_e	mov	result1, #0
24b7c     04 26 66 50 |  if_ne	shl	local05, #4
24b80     13 13 02 51 |  if_ne	add	arg01, local05
24b84     09 FB 01 56 |  if_ne	mov	result1, arg01
24b88     FD 28 02 F6 | 	mov	local06, result1
24b8c     11 29 52 F2 | 	cmps	local06, local03 wc
24b90     20 00 90 3D |  if_ae	jmp	#LR__3523
24b94     12 15 0A F6 | 	mov	arg02, local04 wz
24b98     00 FA 05 A6 |  if_e	mov	result1, #0
24b9c     10 15 82 51 |  if_ne	sub	arg02, local02
24ba0     04 14 46 50 |  if_ne	shr	arg02, #4
24ba4     0A FB 01 56 |  if_ne	mov	result1, arg02
24ba8     14 15 02 F6 | 	mov	arg02, local06
24bac     04 14 06 F1 | 	add	arg02, #4
24bb0     0A FB 51 FC | 	wrword	result1, arg02
24bb4                 | LR__3523
24bb4     0F 15 02 F6 | 	mov	arg02, local01
24bb8     06 14 06 F1 | 	add	arg02, #6
24bbc     12 FD 01 F6 | 	mov	result2, local04
24bc0     0A 15 E2 FA | 	rdword	arg02, arg02
24bc4     06 FC 05 F1 | 	add	result2, #6
24bc8     FE 14 52 FC | 	wrword	arg02, result2
24bcc     06 1E 06 F1 | 	add	local01, #6
24bd0     0F 01 58 FC | 	wrword	#0, local01
24bd4     12 1F 02 F6 | 	mov	local01, local04
24bd8                 | LR__3524
24bd8                 | LR__3525
24bd8     0F 13 02 F6 | 	mov	arg01, local01
24bdc     09 27 EA FA | 	rdword	local05, arg01 wz
24be0     00 FA 05 A6 |  if_e	mov	result1, #0
24be4     04 26 66 50 |  if_ne	shl	local05, #4
24be8     13 13 02 51 |  if_ne	add	arg01, local05
24bec     09 FB 01 56 |  if_ne	mov	result1, arg01
24bf0     FD 14 0A F6 | 	mov	arg02, result1 wz
24bf4     B8 00 90 AD |  if_e	jmp	#LR__3527
24bf8     11 15 52 F2 | 	cmps	arg02, local03 wc
24bfc     B0 00 90 3D |  if_ae	jmp	#LR__3527
24c00     0A 13 02 F6 | 	mov	arg01, arg02
24c04     00 FA 05 F6 | 	mov	result1, #0
24c08     02 12 06 F1 | 	add	arg01, #2
24c0c     09 13 E2 FA | 	rdword	arg01, arg01
24c10     36 00 00 FF 
24c14     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24c18     01 FA 65 A6 |  if_e	neg	result1, #1
24c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
24c20     8C 00 90 AD |  if_e	jmp	#LR__3527
24c24     0F 25 02 F6 | 	mov	local04, local01
24c28     12 29 E2 FA | 	rdword	local06, local04
24c2c     0A 13 02 F6 | 	mov	arg01, arg02
24c30     09 1F E2 FA | 	rdword	local01, arg01
24c34     0F 29 02 F1 | 	add	local06, local01
24c38     12 29 52 FC | 	wrword	local06, local04
24c3c     09 29 02 F6 | 	mov	local06, arg01
24c40     06 28 06 F1 | 	add	local06, #6
24c44     12 1F 02 F6 | 	mov	local01, local04
24c48     14 29 E2 FA | 	rdword	local06, local06
24c4c     06 1E 06 F1 | 	add	local01, #6
24c50     0F 29 52 FC | 	wrword	local06, local01
24c54     09 29 02 F6 | 	mov	local06, arg01
24c58     02 28 06 F1 | 	add	local06, #2
24c5c     14 55 59 FC | 	wrword	#170, local06
24c60     09 29 02 F6 | 	mov	local06, arg01
24c64     06 28 06 F1 | 	add	local06, #6
24c68     14 01 58 FC | 	wrword	#0, local06
24c6c     09 27 EA FA | 	rdword	local05, arg01 wz
24c70     00 FA 05 A6 |  if_e	mov	result1, #0
24c74     04 26 66 50 |  if_ne	shl	local05, #4
24c78     13 13 02 51 |  if_ne	add	arg01, local05
24c7c     09 FB 01 56 |  if_ne	mov	result1, arg01
24c80     FD 28 0A F6 | 	mov	local06, result1 wz
24c84     28 00 90 AD |  if_e	jmp	#LR__3526
24c88     11 29 52 F2 | 	cmps	local06, local03 wc
24c8c     20 00 90 3D |  if_ae	jmp	#LR__3526
24c90     12 15 0A F6 | 	mov	arg02, local04 wz
24c94     00 FA 05 A6 |  if_e	mov	result1, #0
24c98     10 15 82 51 |  if_ne	sub	arg02, local02
24c9c     04 14 46 50 |  if_ne	shr	arg02, #4
24ca0     0A FB 01 56 |  if_ne	mov	result1, arg02
24ca4     14 25 02 F6 | 	mov	local04, local06
24ca8     04 24 06 F1 | 	add	local04, #4
24cac     12 FB 51 FC | 	wrword	result1, local04
24cb0                 | LR__3526
24cb0                 | LR__3527
24cb0     14 FB 01 F6 | 	mov	result1, local06
24cb4     A7 F0 03 F6 | 	mov	ptra, fp
24cb8     B2 00 A0 FD | 	call	#popregs_
24cbc                 | __system___gc_dofree_ret
24cbc     2D 00 64 FD | 	ret
24cc0                 | 
24cc0                 | __system___gc_docollect
24cc0     05 4A 05 F6 | 	mov	COUNT_, #5
24cc4     A8 00 A0 FD | 	call	#pushregs_
24cc8     B8 F9 BF FD | 	call	#__system___gc_ptrs
24ccc     FE 1E 02 F6 | 	mov	local01, result2
24cd0     FD 20 02 F6 | 	mov	local02, result1
24cd4     10 13 02 F6 | 	mov	arg01, local02
24cd8     09 23 EA FA | 	rdword	local03, arg01 wz
24cdc     00 FA 05 A6 |  if_e	mov	result1, #0
24ce0     04 22 66 50 |  if_ne	shl	local03, #4
24ce4     11 13 02 51 |  if_ne	add	arg01, local03
24ce8     09 FB 01 56 |  if_ne	mov	result1, arg01
24cec     FD 24 0A F6 | 	mov	local04, result1 wz
24cf0     00 FA 05 F6 | 	mov	result1, #0
24cf4     01 FA 61 FD | 	cogid	result1
24cf8     FD 26 02 F6 | 	mov	local05, result1
24cfc     48 00 90 AD |  if_e	jmp	#LR__3532
24d00     97 22 48 FB | 	callpa	#(@LR__3531-@LR__3530)>>2,fcache_load_ptr_
24d04                 | LR__3530
24d04     0F 25 52 F2 | 	cmps	local04, local01 wc
24d08     3C 00 90 3D |  if_ae	jmp	#LR__3532
24d0c     12 15 02 F6 | 	mov	arg02, local04
24d10     02 14 06 F1 | 	add	arg02, #2
24d14     0A 15 E2 FA | 	rdword	arg02, arg02
24d18     20 14 26 F5 | 	andn	arg02, #32
24d1c     12 13 02 F6 | 	mov	arg01, local04
24d20     02 12 06 F1 | 	add	arg01, #2
24d24     09 15 52 FC | 	wrword	arg02, arg01
24d28     12 13 02 F6 | 	mov	arg01, local04
24d2c     09 23 EA FA | 	rdword	local03, arg01 wz
24d30     00 FA 05 A6 |  if_e	mov	result1, #0
24d34     04 22 66 50 |  if_ne	shl	local03, #4
24d38     11 13 02 51 |  if_ne	add	arg01, local03
24d3c     09 FB 01 56 |  if_ne	mov	result1, arg01
24d40     FD 24 0A F6 | 	mov	local04, result1 wz
24d44     BC FF 9F 5D |  if_ne	jmp	#LR__3530
24d48                 | LR__3531
24d48                 | LR__3532
24d48     00 22 06 F6 | 	mov	local03, #0
24d4c     00 12 06 F6 | 	mov	arg01, #0
24d50     A0 BC BF FD | 	call	#__system____topofstack
24d54     FD 14 02 F6 | 	mov	arg02, result1
24d58     11 13 02 F6 | 	mov	arg01, local03
24d5c     90 00 B0 FD | 	call	#__system___gc_markhub
24d60     1C 01 B0 FD | 	call	#__system___gc_markcog
24d64     10 13 02 F6 | 	mov	arg01, local02
24d68     09 23 EA FA | 	rdword	local03, arg01 wz
24d6c     00 FA 05 A6 |  if_e	mov	result1, #0
24d70     04 22 66 50 |  if_ne	shl	local03, #4
24d74     11 13 02 51 |  if_ne	add	arg01, local03
24d78     09 FB 01 56 |  if_ne	mov	result1, arg01
24d7c     FD 20 0A F6 | 	mov	local02, result1 wz
24d80     60 00 90 AD |  if_e	jmp	#LR__3536
24d84                 | LR__3533
24d84     10 25 02 F6 | 	mov	local04, local02
24d88     12 13 02 F6 | 	mov	arg01, local04
24d8c     09 23 EA FA | 	rdword	local03, arg01 wz
24d90     00 FA 05 A6 |  if_e	mov	result1, #0
24d94     04 22 66 50 |  if_ne	shl	local03, #4
24d98     11 13 02 51 |  if_ne	add	arg01, local03
24d9c     09 FB 01 56 |  if_ne	mov	result1, arg01
24da0     FD 20 02 F6 | 	mov	local02, result1
24da4     12 15 02 F6 | 	mov	arg02, local04
24da8     02 14 06 F1 | 	add	arg02, #2
24dac     0A 15 E2 FA | 	rdword	arg02, arg02
24db0     20 14 CE F7 | 	test	arg02, #32 wz
24db4     10 14 CE A7 |  if_e	test	arg02, #16 wz
24db8     1C 00 90 5D |  if_ne	jmp	#LR__3535
24dbc     0A 15 42 F8 | 	getnib	arg02, arg02, #0
24dc0     13 15 0A F2 | 	cmp	arg02, local05 wz
24dc4     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
24dc8     0C 00 90 5D |  if_ne	jmp	#LR__3534
24dcc     12 13 02 F6 | 	mov	arg01, local04
24dd0     84 FC BF FD | 	call	#__system___gc_dofree
24dd4     FD 20 02 F6 | 	mov	local02, result1
24dd8                 | LR__3534
24dd8                 | LR__3535
24dd8     00 20 0E F2 | 	cmp	local02, #0 wz
24ddc     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
24de0     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3533
24de4                 | LR__3536
24de4     A7 F0 03 F6 | 	mov	ptra, fp
24de8     B2 00 A0 FD | 	call	#popregs_
24dec                 | __system___gc_docollect_ret
24dec     2D 00 64 FD | 	ret
24df0                 | 
24df0                 | __system___gc_markhub
24df0     04 4A 05 F6 | 	mov	COUNT_, #4
24df4     A8 00 A0 FD | 	call	#pushregs_
24df8     09 1F 02 F6 | 	mov	local01, arg01
24dfc     0A 21 02 F6 | 	mov	local02, arg02
24e00     80 F8 BF FD | 	call	#__system___gc_ptrs
24e04     FD 22 02 F6 | 	mov	local03, result1
24e08     FE 24 02 F6 | 	mov	local04, result2
24e0c                 | LR__3540
24e0c     10 1F 52 F2 | 	cmps	local01, local02 wc
24e10     60 00 90 3D |  if_ae	jmp	#LR__3541
24e14     0F 17 02 FB | 	rdlong	arg03, local01
24e18     04 1E 06 F1 | 	add	local01, #4
24e1c     12 15 02 F6 | 	mov	arg02, local04
24e20     11 13 02 F6 | 	mov	arg01, local03
24e24     8C FB BF FD | 	call	#__system___gc_isvalidptr
24e28     FD 16 0A F6 | 	mov	arg03, result1 wz
24e2c     DC FF 9F AD |  if_e	jmp	#LR__3540
24e30     0B 13 02 F6 | 	mov	arg01, arg03
24e34     00 FA 05 F6 | 	mov	result1, #0
24e38     02 12 06 F1 | 	add	arg01, #2
24e3c     09 13 E2 FA | 	rdword	arg01, arg01
24e40     36 00 00 FF 
24e44     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24e48     01 FA 65 A6 |  if_e	neg	result1, #1
24e4c     00 FA 0D F2 | 	cmp	result1, #0 wz
24e50     B8 FF 9F 5D |  if_ne	jmp	#LR__3540
24e54     0B FD 01 F6 | 	mov	result2, arg03
24e58     02 FC 05 F1 | 	add	result2, #2
24e5c     FE FC E1 FA | 	rdword	result2, result2
24e60     0F FC 25 F5 | 	andn	result2, #15
24e64     2E FC 45 F5 | 	or	result2, #46
24e68     02 16 06 F1 | 	add	arg03, #2
24e6c     0B FD 51 FC | 	wrword	result2, arg03
24e70     98 FF 9F FD | 	jmp	#LR__3540
24e74                 | LR__3541
24e74     A7 F0 03 F6 | 	mov	ptra, fp
24e78     B2 00 A0 FD | 	call	#popregs_
24e7c                 | __system___gc_markhub_ret
24e7c     2D 00 64 FD | 	ret
24e80                 | 
24e80                 | __system___gc_markcog
24e80     04 4A 05 F6 | 	mov	COUNT_, #4
24e84     A8 00 A0 FD | 	call	#pushregs_
24e88     F8 F7 BF FD | 	call	#__system___gc_ptrs
24e8c     FD 1E 02 F6 | 	mov	local01, result1
24e90     FE 20 02 F6 | 	mov	local02, result2
24e94     EF 23 06 F6 | 	mov	local03, #495
24e98                 | LR__3550
24e98                 | 	'.live	local03
24e98     00 22 96 F9 | 	alts	local03, #0
24e9c     11 25 02 F6 | 	mov	local04, local03
24ea0     0F 13 02 F6 | 	mov	arg01, local01
24ea4     10 15 02 F6 | 	mov	arg02, local02
24ea8     12 17 02 F6 | 	mov	arg03, local04
24eac     04 FB BF FD | 	call	#__system___gc_isvalidptr
24eb0     00 FA 0D F2 | 	cmp	result1, #0 wz
24eb4     18 00 90 AD |  if_e	jmp	#LR__3551
24eb8     FD 24 02 F6 | 	mov	local04, result1
24ebc     02 24 06 F1 | 	add	local04, #2
24ec0     12 25 E2 FA | 	rdword	local04, local04
24ec4     20 24 46 F5 | 	or	local04, #32
24ec8     02 FA 05 F1 | 	add	result1, #2
24ecc     FD 24 52 FC | 	wrword	local04, result1
24ed0                 | LR__3551
24ed0     01 22 86 F1 | 	sub	local03, #1
24ed4     00 22 56 F2 | 	cmps	local03, #0 wc
24ed8     BC FF 9F 3D |  if_ae	jmp	#LR__3550
24edc     A7 F0 03 F6 | 	mov	ptra, fp
24ee0     B2 00 A0 FD | 	call	#popregs_
24ee4                 | __system___gc_markcog_ret
24ee4     2D 00 64 FD | 	ret
24ee8                 | 
24ee8                 | __system__opendir
24ee8     06 4A 05 F6 | 	mov	COUNT_, #6
24eec     A8 00 A0 FD | 	call	#pushregs_
24ef0     84 E7 05 F1 | 	add	ptr___system__dat__, #388
24ef4     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
24ef8     09 15 02 F6 | 	mov	arg02, arg01
24efc     0F 13 02 F6 | 	mov	arg01, local01
24f00     00 16 06 F6 | 	mov	arg03, #0
24f04     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
24f08     A8 C2 BF FD | 	call	#__system____getvfsforfile
24f0c     FD 20 0A F6 | 	mov	local02, result1 wz
24f10     10 00 90 AD |  if_e	jmp	#LR__3560
24f14     28 20 06 F1 | 	add	local02, #40
24f18     10 17 0A FB | 	rdlong	arg03, local02 wz
24f1c     28 20 86 F1 | 	sub	local02, #40
24f20     14 00 90 5D |  if_ne	jmp	#LR__3561
24f24                 | LR__3560
24f24     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24f28     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
24f2c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24f30     00 FA 05 F6 | 	mov	result1, #0
24f34     90 00 90 FD | 	jmp	#LR__3563
24f38                 | LR__3561
24f38     5C 12 06 F6 | 	mov	arg01, #92
24f3c     10 14 06 F6 | 	mov	arg02, #16
24f40     C0 F9 BF FD | 	call	#__system___gc_doalloc
24f44     FD 22 0A F6 | 	mov	local03, result1 wz
24f48     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
24f4c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
24f50     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
24f54     00 FA 05 A6 |  if_e	mov	result1, #0
24f58     6C 00 90 AD |  if_e	jmp	#LR__3563
24f5c     28 20 06 F1 | 	add	local02, #40
24f60     10 25 02 FB | 	rdlong	local04, local02
24f64     12 27 02 F6 | 	mov	local05, local04
24f68     28 20 86 F1 | 	sub	local02, #40
24f6c     13 26 46 F7 | 	zerox	local05, #19
24f70     14 24 46 F0 | 	shr	local04, #20
24f74     02 24 66 F0 | 	shl	local04, #2
24f78     ED 24 02 F1 | 	add	local04, __methods__
24f7c     12 25 02 FB | 	rdlong	local04, local04
24f80     11 13 02 F6 | 	mov	arg01, local03
24f84     0F 15 02 F6 | 	mov	arg02, local01
24f88     F2 28 02 F6 | 	mov	local06, objptr
24f8c     13 E5 01 F6 | 	mov	objptr, local05
24f90     2D 24 62 FD | 	call	local04
24f94     14 E5 01 F6 | 	mov	objptr, local06
24f98     FD 16 0A F6 | 	mov	arg03, result1 wz
24f9c     20 00 90 AD |  if_e	jmp	#LR__3562
24fa0     00 16 4E F2 | 	cmps	arg03, #0 wz
24fa4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24fa8     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
24fac     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24fb0     11 13 02 F6 | 	mov	arg01, local03
24fb4     58 FA BF FD | 	call	#__system___gc_free
24fb8     00 FA 05 F6 | 	mov	result1, #0
24fbc     08 00 90 FD | 	jmp	#LR__3563
24fc0                 | LR__3562
24fc0     11 21 62 FC | 	wrlong	local02, local03
24fc4     11 FB 01 F6 | 	mov	result1, local03
24fc8                 | LR__3563
24fc8     A7 F0 03 F6 | 	mov	ptra, fp
24fcc     B2 00 A0 FD | 	call	#popregs_
24fd0                 | __system__opendir_ret
24fd0     2D 00 64 FD | 	ret
24fd4                 | 
24fd4                 | __system__closedir
24fd4     04 4A 05 F6 | 	mov	COUNT_, #4
24fd8     A8 00 A0 FD | 	call	#pushregs_
24fdc     09 1F 02 F6 | 	mov	local01, arg01
24fe0     0F 13 02 FB | 	rdlong	arg01, local01
24fe4     2C 12 06 F1 | 	add	arg01, #44
24fe8     09 21 02 FB | 	rdlong	local02, arg01
24fec     10 23 02 F6 | 	mov	local03, local02
24ff0     13 22 46 F7 | 	zerox	local03, #19
24ff4     14 20 46 F0 | 	shr	local02, #20
24ff8     02 20 66 F0 | 	shl	local02, #2
24ffc     ED 20 02 F1 | 	add	local02, __methods__
25000     10 21 02 FB | 	rdlong	local02, local02
25004     0F 13 02 F6 | 	mov	arg01, local01
25008     F2 24 02 F6 | 	mov	local04, objptr
2500c     11 E5 01 F6 | 	mov	objptr, local03
25010     2D 20 62 FD | 	call	local02
25014     12 E5 01 F6 | 	mov	objptr, local04
25018     FD 24 02 F6 | 	mov	local04, result1
2501c     0F 13 02 F6 | 	mov	arg01, local01
25020     EC F9 BF FD | 	call	#__system___gc_free
25024     00 24 4E F2 | 	cmps	local04, #0 wz
25028     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2502c     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
25030     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25034     01 FA 65 56 |  if_ne	neg	result1, #1
25038     00 FA 05 A6 |  if_e	mov	result1, #0
2503c     A7 F0 03 F6 | 	mov	ptra, fp
25040     B2 00 A0 FD | 	call	#popregs_
25044                 | __system__closedir_ret
25044     2D 00 64 FD | 	ret
25048                 | 
25048                 | __system__readdir
25048     04 4A 05 F6 | 	mov	COUNT_, #4
2504c     A8 00 A0 FD | 	call	#pushregs_
25050     09 15 0A FB | 	rdlong	arg02, arg01 wz
25054     08 12 06 F1 | 	add	arg01, #8
25058     09 1F 02 F6 | 	mov	local01, arg01
2505c     08 12 86 F1 | 	sub	arg01, #8
25060     00 FA 05 A6 |  if_e	mov	result1, #0
25064     5C 00 90 AD |  if_e	jmp	#LR__3571
25068     30 14 06 F1 | 	add	arg02, #48
2506c     0A 21 02 FB | 	rdlong	local02, arg02
25070     10 23 02 F6 | 	mov	local03, local02
25074     13 22 46 F7 | 	zerox	local03, #19
25078     14 20 46 F0 | 	shr	local02, #20
2507c     02 20 66 F0 | 	shl	local02, #2
25080     ED 20 02 F1 | 	add	local02, __methods__
25084     10 21 02 FB | 	rdlong	local02, local02
25088     0F 15 02 F6 | 	mov	arg02, local01
2508c     F2 24 02 F6 | 	mov	local04, objptr
25090     11 E5 01 F6 | 	mov	objptr, local03
25094     2D 20 62 FD | 	call	local02
25098     12 E5 01 F6 | 	mov	objptr, local04
2509c     00 FA 4D F2 | 	cmps	result1, #0 wz
250a0     1C 00 90 AD |  if_e	jmp	#LR__3570
250a4     01 FA 55 F2 | 	cmps	result1, #1 wc
250a8     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
250ac     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
250b0     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
250b4     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
250b8     00 FA 05 F6 | 	mov	result1, #0
250bc     04 00 90 FD | 	jmp	#LR__3571
250c0                 | LR__3570
250c0     0F FB 01 F6 | 	mov	result1, local01
250c4                 | LR__3571
250c4     A7 F0 03 F6 | 	mov	ptra, fp
250c8     B2 00 A0 FD | 	call	#popregs_
250cc                 | __system__readdir_ret
250cc     2D 00 64 FD | 	ret
250d0                 | 
250d0                 | __system___openraw
250d0     15 4A 05 F6 | 	mov	COUNT_, #21
250d4     A8 00 A0 FD | 	call	#pushregs_
250d8     09 1F 02 F6 | 	mov	local01, arg01
250dc     0A 21 02 F6 | 	mov	local02, arg02
250e0     0B 23 02 F6 | 	mov	local03, arg03
250e4     0C 25 02 F6 | 	mov	local04, arg04
250e8     04 26 06 F6 | 	mov	local05, #4
250ec     0F 29 02 F6 | 	mov	local06, local01
250f0     00 2A 06 F6 | 	mov	local07, #0
250f4     84 E7 05 F1 | 	add	ptr___system__dat__, #388
250f8     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
250fc     16 13 02 F6 | 	mov	arg01, local08
25100     10 15 02 F6 | 	mov	arg02, local02
25104     00 16 06 F6 | 	mov	arg03, #0
25108     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2510c     A4 C0 BF FD | 	call	#__system____getvfsforfile
25110     FD 2E 0A F6 | 	mov	local09, result1 wz
25114     10 00 90 AD |  if_e	jmp	#LR__3580
25118     20 2E 06 F1 | 	add	local09, #32
2511c     17 FB 09 FB | 	rdlong	result1, local09 wz
25120     20 2E 86 F1 | 	sub	local09, #32
25124     14 00 90 5D |  if_ne	jmp	#LR__3581
25128                 | LR__3580
25128     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2512c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
25130     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25134     01 FA 65 F6 | 	neg	result1, #1
25138     8C 02 90 FD | 	jmp	#LR__3594
2513c                 | LR__3581
2513c     14 13 02 F6 | 	mov	arg01, local06
25140     00 14 06 F6 | 	mov	arg02, #0
25144     34 16 06 F6 | 	mov	arg03, #52
25148     09 31 02 F6 | 	mov	local10, arg01
2514c     98 00 A0 FD | 	call	#\builtin_bytefill_
25150     20 2E 06 F1 | 	add	local09, #32
25154     17 33 02 FB | 	rdlong	local11, local09
25158     19 35 02 F6 | 	mov	local12, local11
2515c     19 37 02 F6 | 	mov	local13, local11
25160     20 2E 86 F1 | 	sub	local09, #32
25164     1B 39 02 F6 | 	mov	local14, local13
25168     13 34 46 F7 | 	zerox	local12, #19
2516c     14 38 46 F0 | 	shr	local14, #20
25170     02 38 66 F0 | 	shl	local14, #2
25174     ED 38 02 F1 | 	add	local14, __methods__
25178     1C 39 02 FB | 	rdlong	local14, local14
2517c     14 3B 02 F6 | 	mov	local15, local06
25180     16 3D 02 F6 | 	mov	local16, local08
25184     11 3F 02 F6 | 	mov	local17, local03
25188     1D 13 02 F6 | 	mov	arg01, local15
2518c     1E 15 02 F6 | 	mov	arg02, local16
25190     1F 17 02 F6 | 	mov	arg03, local17
25194     F2 40 02 F6 | 	mov	local18, objptr
25198     1A E5 01 F6 | 	mov	objptr, local12
2519c     2D 38 62 FD | 	call	local14
251a0     20 E5 01 F6 | 	mov	objptr, local18
251a4     FD 42 0A F6 | 	mov	local19, result1 wz
251a8     04 22 CE 57 |  if_ne	test	local03, #4 wz
251ac     58 00 90 AD |  if_e	jmp	#LR__3582
251b0     24 2E 06 F1 | 	add	local09, #36
251b4     17 33 02 FB | 	rdlong	local11, local09
251b8     19 35 02 F6 | 	mov	local12, local11
251bc     19 37 02 F6 | 	mov	local13, local11
251c0     24 2E 86 F1 | 	sub	local09, #36
251c4     1B 39 02 F6 | 	mov	local14, local13
251c8     13 34 46 F7 | 	zerox	local12, #19
251cc     14 38 46 F0 | 	shr	local14, #20
251d0     02 38 66 F0 | 	shl	local14, #2
251d4     ED 38 02 F1 | 	add	local14, __methods__
251d8     1C 39 02 FB | 	rdlong	local14, local14
251dc     14 3B 02 F6 | 	mov	local15, local06
251e0     16 3D 02 F6 | 	mov	local16, local08
251e4     12 3F 02 F6 | 	mov	local17, local04
251e8     1D 13 02 F6 | 	mov	arg01, local15
251ec     1E 15 02 F6 | 	mov	arg02, local16
251f0     1F 17 02 F6 | 	mov	arg03, local17
251f4     F2 40 02 F6 | 	mov	local18, objptr
251f8     1A E5 01 F6 | 	mov	objptr, local12
251fc     2D 38 62 FD | 	call	local14
25200     20 E5 01 F6 | 	mov	objptr, local18
25204     FD 42 02 F6 | 	mov	local19, result1
25208                 | LR__3582
25208     00 42 0E F2 | 	cmp	local19, #0 wz
2520c     8C 01 90 5D |  if_ne	jmp	#LR__3592
25210     11 45 02 F6 | 	mov	local20, local03
25214     03 44 0E F5 | 	and	local20, #3 wz
25218     02 26 46 55 |  if_ne	or	local05, #2
2521c     01 44 0E F2 | 	cmp	local20, #1 wz
25220     01 26 46 55 |  if_ne	or	local05, #1
25224     20 22 CE F7 | 	test	local03, #32 wz
25228     C0 26 46 55 |  if_ne	or	local05, #192
2522c     08 28 06 F1 | 	add	local06, #8
25230     14 27 62 FC | 	wrlong	local05, local06
25234     0C 28 06 F1 | 	add	local06, #12
25238     14 47 0A FB | 	rdlong	local21, local06 wz
2523c     14 28 86 F1 | 	sub	local06, #20
25240     18 00 90 5D |  if_ne	jmp	#LR__3583
25244     04 2E 06 F1 | 	add	local09, #4
25248     17 47 02 FB | 	rdlong	local21, local09
2524c     04 2E 86 F1 | 	sub	local09, #4
25250     14 28 06 F1 | 	add	local06, #20
25254     14 47 62 FC | 	wrlong	local21, local06
25258     14 28 86 F1 | 	sub	local06, #20
2525c                 | LR__3583
2525c     18 28 06 F1 | 	add	local06, #24
25260     14 47 0A FB | 	rdlong	local21, local06 wz
25264     18 28 86 F1 | 	sub	local06, #24
25268     18 00 90 5D |  if_ne	jmp	#LR__3584
2526c     08 2E 06 F1 | 	add	local09, #8
25270     17 47 02 FB | 	rdlong	local21, local09
25274     08 2E 86 F1 | 	sub	local09, #8
25278     18 28 06 F1 | 	add	local06, #24
2527c     14 47 62 FC | 	wrlong	local21, local06
25280     18 28 86 F1 | 	sub	local06, #24
25284                 | LR__3584
25284     24 28 06 F1 | 	add	local06, #36
25288     14 47 0A FB | 	rdlong	local21, local06 wz
2528c     24 28 86 F1 | 	sub	local06, #36
25290     17 47 02 AB |  if_e	rdlong	local21, local09
25294     24 28 06 A1 |  if_e	add	local06, #36
25298     14 47 62 AC |  if_e	wrlong	local21, local06
2529c     24 28 86 A1 |  if_e	sub	local06, #36
252a0     28 28 06 F1 | 	add	local06, #40
252a4     14 47 0A FB | 	rdlong	local21, local06 wz
252a8     28 28 86 F1 | 	sub	local06, #40
252ac     18 00 90 5D |  if_ne	jmp	#LR__3585
252b0     10 2E 06 F1 | 	add	local09, #16
252b4     17 47 02 FB | 	rdlong	local21, local09
252b8     10 2E 86 F1 | 	sub	local09, #16
252bc     28 28 06 F1 | 	add	local06, #40
252c0     14 47 62 FC | 	wrlong	local21, local06
252c4     28 28 86 F1 | 	sub	local06, #40
252c8                 | LR__3585
252c8     30 28 06 F1 | 	add	local06, #48
252cc     14 47 0A FB | 	rdlong	local21, local06 wz
252d0     30 28 86 F1 | 	sub	local06, #48
252d4     18 00 90 5D |  if_ne	jmp	#LR__3586
252d8     0C 2E 06 F1 | 	add	local09, #12
252dc     17 47 02 FB | 	rdlong	local21, local09
252e0     0C 2E 86 F1 | 	sub	local09, #12
252e4     30 28 06 F1 | 	add	local06, #48
252e8     14 47 62 FC | 	wrlong	local21, local06
252ec     30 28 86 F1 | 	sub	local06, #48
252f0                 | LR__3586
252f0     1C 28 06 F1 | 	add	local06, #28
252f4     14 47 0A FB | 	rdlong	local21, local06 wz
252f8     1C 28 86 F1 | 	sub	local06, #28
252fc     1C 00 90 5D |  if_ne	jmp	#LR__3587
25300     01 2A 06 F6 | 	mov	local07, #1
25304     F2 12 02 F6 | 	mov	arg01, objptr
25308     00 D0 04 FF 
2530c     00 12 46 F5 | 	or	arg01, ##161480704
25310     1C 28 06 F1 | 	add	local06, #28
25314     14 13 62 FC | 	wrlong	arg01, local06
25318     1C 28 86 F1 | 	sub	local06, #28
2531c                 | LR__3587
2531c     20 28 06 F1 | 	add	local06, #32
25320     14 47 0A FB | 	rdlong	local21, local06 wz
25324     20 28 86 F1 | 	sub	local06, #32
25328     1C 00 90 5D |  if_ne	jmp	#LR__3588
2532c     01 2A 06 F6 | 	mov	local07, #1
25330     F2 12 02 F6 | 	mov	arg01, objptr
25334     00 D8 04 FF 
25338     00 12 46 F5 | 	or	arg01, ##162529280
2533c     20 28 06 F1 | 	add	local06, #32
25340     14 13 62 FC | 	wrlong	arg01, local06
25344     20 28 86 F1 | 	sub	local06, #32
25348                 | LR__3588
25348     2C 28 06 F1 | 	add	local06, #44
2534c     14 47 0A FB | 	rdlong	local21, local06 wz
25350     2C 28 86 F1 | 	sub	local06, #44
25354     44 00 90 5D |  if_ne	jmp	#LR__3591
25358     14 2E 06 F1 | 	add	local09, #20
2535c     17 47 0A FB | 	rdlong	local21, local09 wz
25360     14 2E 86 F1 | 	sub	local09, #20
25364     18 00 90 AD |  if_e	jmp	#LR__3589
25368     14 2E 06 F1 | 	add	local09, #20
2536c     17 47 02 FB | 	rdlong	local21, local09
25370     2C 28 06 F1 | 	add	local06, #44
25374     14 47 62 FC | 	wrlong	local21, local06
25378     2C 28 86 F1 | 	sub	local06, #44
2537c     1C 00 90 FD | 	jmp	#LR__3590
25380                 | LR__3589
25380     01 2A 06 F6 | 	mov	local07, #1
25384     F2 12 02 F6 | 	mov	arg01, objptr
25388     00 E0 04 FF 
2538c     00 12 46 F5 | 	or	arg01, ##163577856
25390     2C 28 06 F1 | 	add	local06, #44
25394     14 13 62 FC | 	wrlong	arg01, local06
25398     2C 28 86 F1 | 	sub	local06, #44
2539c                 | LR__3590
2539c                 | LR__3591
2539c                 | LR__3592
2539c     00 2A 0E F2 | 	cmp	local07, #0 wz
253a0     14 13 02 56 |  if_ne	mov	arg01, local06
253a4     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
253a8     00 42 0E F2 | 	cmp	local19, #0 wz
253ac     00 12 06 A6 |  if_e	mov	arg01, #0
253b0     10 00 90 5D |  if_ne	jmp	#LR__3593
253b4     00 12 4E F2 | 	cmps	arg01, #0 wz
253b8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
253bc     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
253c0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
253c4                 | LR__3593
253c4     21 FB 01 F6 | 	mov	result1, local19
253c8                 | LR__3594
253c8     A7 F0 03 F6 | 	mov	ptra, fp
253cc     B2 00 A0 FD | 	call	#popregs_
253d0                 | __system___openraw_ret
253d0     2D 00 64 FD | 	ret
253d4                 | 
253d4                 | __system___closeraw
253d4     05 4A 05 F6 | 	mov	COUNT_, #5
253d8     A8 00 A0 FD | 	call	#pushregs_
253dc     09 1F 02 F6 | 	mov	local01, arg01
253e0     00 20 06 F6 | 	mov	local02, #0
253e4     08 1E 06 F1 | 	add	local01, #8
253e8     0F FB 09 FB | 	rdlong	result1, local01 wz
253ec     08 1E 86 F1 | 	sub	local01, #8
253f0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
253f4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
253f8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
253fc     01 FA 65 A6 |  if_e	neg	result1, #1
25400     A8 00 90 AD |  if_e	jmp	#LR__3602
25404     2C 1E 06 F1 | 	add	local01, #44
25408     0F FB 09 FB | 	rdlong	result1, local01 wz
2540c     2C 1E 86 F1 | 	sub	local01, #44
25410     38 00 90 AD |  if_e	jmp	#LR__3600
25414     2C 1E 06 F1 | 	add	local01, #44
25418     0F 23 02 FB | 	rdlong	local03, local01
2541c     11 25 02 F6 | 	mov	local04, local03
25420     2C 1E 86 F1 | 	sub	local01, #44
25424     13 24 46 F7 | 	zerox	local04, #19
25428     14 22 46 F0 | 	shr	local03, #20
2542c     02 22 66 F0 | 	shl	local03, #2
25430     ED 22 02 F1 | 	add	local03, __methods__
25434     11 23 02 FB | 	rdlong	local03, local03
25438     0F 13 02 F6 | 	mov	arg01, local01
2543c     F2 26 02 F6 | 	mov	local05, objptr
25440     12 E5 01 F6 | 	mov	objptr, local04
25444     2D 22 62 FD | 	call	local03
25448     13 E5 01 F6 | 	mov	objptr, local05
2544c                 | LR__3600
2544c     24 1E 06 F1 | 	add	local01, #36
25450     0F 27 0A FB | 	rdlong	local05, local01 wz
25454     24 1E 86 F1 | 	sub	local01, #36
25458     3C 00 90 AD |  if_e	jmp	#LR__3601
2545c     24 1E 06 F1 | 	add	local01, #36
25460     0F 23 02 FB | 	rdlong	local03, local01
25464     11 25 02 F6 | 	mov	local04, local03
25468     24 1E 86 F1 | 	sub	local01, #36
2546c     13 24 46 F7 | 	zerox	local04, #19
25470     14 22 46 F0 | 	shr	local03, #20
25474     02 22 66 F0 | 	shl	local03, #2
25478     ED 22 02 F1 | 	add	local03, __methods__
2547c     11 23 02 FB | 	rdlong	local03, local03
25480     0F 13 02 F6 | 	mov	arg01, local01
25484     F2 26 02 F6 | 	mov	local05, objptr
25488     12 E5 01 F6 | 	mov	objptr, local04
2548c     2D 22 62 FD | 	call	local03
25490     13 E5 01 F6 | 	mov	objptr, local05
25494     FD 20 02 F6 | 	mov	local02, result1
25498                 | LR__3601
25498     0F 13 02 F6 | 	mov	arg01, local01
2549c     00 14 06 F6 | 	mov	arg02, #0
254a0     34 16 06 F6 | 	mov	arg03, #52
254a4     98 00 A0 FD | 	call	#\builtin_bytefill_
254a8     10 FB 01 F6 | 	mov	result1, local02
254ac                 | LR__3602
254ac     A7 F0 03 F6 | 	mov	ptra, fp
254b0     B2 00 A0 FD | 	call	#popregs_
254b4                 | __system___closeraw_ret
254b4     2D 00 64 FD | 	ret
254b8                 | 
254b8                 | __system___vfs_open_sdcardx
254b8     0B 4A 05 F6 | 	mov	COUNT_, #11
254bc     A8 00 A0 FD | 	call	#pushregs_
254c0     09 23 02 F6 | 	mov	local03, arg01
254c4     0A 25 02 F6 | 	mov	local04, arg02
254c8     0B 27 02 F6 | 	mov	local05, arg03
254cc     0C 29 02 F6 | 	mov	local06, arg04
254d0     01 00 00 FF 
254d4     24 12 06 F6 | 	mov	arg01, ##548
254d8     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
254dc     FD 2A 02 F6 | 	mov	local07, result1
254e0     01 00 00 FF 
254e4     34 12 06 F6 | 	mov	arg01, ##564
254e8     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
254ec     FD 2C 02 F6 | 	mov	local08, result1
254f0     11 19 02 F6 | 	mov	arg04, local03
254f4     1F 18 C6 F0 | 	sar	arg04, #31
254f8     11 17 02 F6 | 	mov	arg03, local03
254fc     01 12 06 F6 | 	mov	arg01, #1
25500     00 14 06 F6 | 	mov	arg02, #0
25504     10 DC BF FD | 	call	#__system___int64_shl
25508     FD 1E 02 F6 | 	mov	local01, result1
2550c     FE 2E 02 F6 | 	mov	local09, result2
25510     12 19 02 F6 | 	mov	arg04, local04
25514     1F 18 C6 F0 | 	sar	arg04, #31
25518     12 17 02 F6 | 	mov	arg03, local04
2551c     01 12 06 F6 | 	mov	arg01, #1
25520     00 14 06 F6 | 	mov	arg02, #0
25524     F0 DB BF FD | 	call	#__system___int64_shl
25528     FD 1E 42 F5 | 	or	local01, result1
2552c     FE 2E 42 F5 | 	or	local09, result2
25530     13 19 02 F6 | 	mov	arg04, local05
25534     1F 18 C6 F0 | 	sar	arg04, #31
25538     13 17 02 F6 | 	mov	arg03, local05
2553c     01 12 06 F6 | 	mov	arg01, #1
25540     00 14 06 F6 | 	mov	arg02, #0
25544     D0 DB BF FD | 	call	#__system___int64_shl
25548     FD 1E 42 F5 | 	or	local01, result1
2554c     FE 2E 42 F5 | 	or	local09, result2
25550     14 19 02 F6 | 	mov	arg04, local06
25554     1F 18 C6 F0 | 	sar	arg04, #31
25558     14 17 02 F6 | 	mov	arg03, local06
2555c     01 12 06 F6 | 	mov	arg01, #1
25560     00 14 06 F6 | 	mov	arg02, #0
25564     B0 DB BF FD | 	call	#__system___int64_shl
25568     17 15 02 F6 | 	mov	arg02, local09
2556c     FD 1E 42 F5 | 	or	local01, result1
25570     0A FD 41 F5 | 	or	result2, arg02
25574     FE 20 02 F6 | 	mov	local02, result2
25578     0F 13 02 F6 | 	mov	arg01, local01
2557c     10 15 02 F6 | 	mov	arg02, local02
25580     CC DB BF FD | 	call	#__system___usepins
25584     00 FA 0D F2 | 	cmp	result1, #0 wz
25588     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2558c     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
25590     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25594     00 FA 05 A6 |  if_e	mov	result1, #0
25598     B4 00 90 AD |  if_e	jmp	#LR__3612
2559c     0F 31 02 F6 | 	mov	local10, local01
255a0     10 2F 02 F6 | 	mov	local09, local02
255a4     01 00 00 FF 
255a8     08 2A 06 F1 | 	add	local07, ##520
255ac     15 31 62 FC | 	wrlong	local10, local07
255b0     04 2A 06 F1 | 	add	local07, #4
255b4     15 2F 62 FC | 	wrlong	local09, local07
255b8     01 00 00 FF 
255bc     0C 2A 86 F1 | 	sub	local07, ##524
255c0     14 1B 02 F6 | 	mov	arg05, local06
255c4     00 12 06 F6 | 	mov	arg01, #0
255c8     11 15 02 F6 | 	mov	arg02, local03
255cc     12 17 02 F6 | 	mov	arg03, local04
255d0     13 19 02 F6 | 	mov	arg04, local05
255d4     F2 30 02 F6 | 	mov	local10, objptr
255d8     15 E5 01 F6 | 	mov	objptr, local07
255dc     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
255e0     18 E5 01 F6 | 	mov	objptr, local10
255e4     FD 32 0A F6 | 	mov	local11, result1 wz
255e8     24 00 90 5D |  if_ne	jmp	#LR__3610
255ec     81 01 00 FF 
255f0     AA 14 06 F6 | 	mov	arg02, ##@LR__5027
255f4     16 13 02 F6 | 	mov	arg01, local08
255f8     00 16 06 F6 | 	mov	arg03, #0
255fc     F2 32 02 F6 | 	mov	local11, objptr
25600     15 E5 01 F6 | 	mov	objptr, local07
25604     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
25608     19 E5 01 F6 | 	mov	objptr, local11
2560c     FD 32 02 F6 | 	mov	local11, result1
25610                 | LR__3610
25610     00 32 0E F2 | 	cmp	local11, #0 wz
25614     24 00 90 AD |  if_e	jmp	#LR__3611
25618     0F 13 02 F6 | 	mov	arg01, local01
2561c     10 15 02 F6 | 	mov	arg02, local02
25620     80 DB BF FD | 	call	#__system___freepins
25624     19 13 6A F6 | 	neg	arg01, local11 wz
25628     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2562c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25630     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25634     00 FA 05 F6 | 	mov	result1, #0
25638     14 00 90 FD | 	jmp	#LR__3612
2563c                 | LR__3611
2563c     15 13 02 F6 | 	mov	arg01, local07
25640     F2 32 02 F6 | 	mov	local11, objptr
25644     15 E5 01 F6 | 	mov	objptr, local07
25648     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
2564c     19 E5 01 F6 | 	mov	objptr, local11
25650                 | LR__3612
25650     A7 F0 03 F6 | 	mov	ptra, fp
25654     B2 00 A0 FD | 	call	#popregs_
25658                 | __system___vfs_open_sdcardx_ret
25658     2D 00 64 FD | 	ret
2565c                 | 
2565c                 | __system____default_getc
2565c     03 4A 05 F6 | 	mov	COUNT_, #3
25660     A8 00 A0 FD | 	call	#pushregs_
25664     09 1F 02 F6 | 	mov	local01, arg01
25668     0F 21 02 FB | 	rdlong	local02, local01
2566c     08 20 06 F1 | 	add	local02, #8
25670     10 23 02 FB | 	rdlong	local03, local02
25674     02 22 CE F7 | 	test	local03, #2 wz
25678     0F 13 02 56 |  if_ne	mov	arg01, local01
2567c     00 01 B0 5D |  if_ne	call	#__system____default_flush
25680     10 23 02 FB | 	rdlong	local03, local02
25684     01 22 46 F5 | 	or	local03, #1
25688     10 23 62 FC | 	wrlong	local03, local02
2568c     08 20 86 F1 | 	sub	local02, #8
25690     10 23 0A FB | 	rdlong	local03, local02 wz
25694     0C 00 90 5D |  if_ne	jmp	#LR__3620
25698     0F 13 02 F6 | 	mov	arg01, local01
2569c     68 18 B0 FD | 	call	#__system____default_filbuf
256a0     FD 22 02 F6 | 	mov	local03, result1
256a4                 | LR__3620
256a4     01 22 56 F2 | 	cmps	local03, #1 wc
256a8     01 FA 65 C6 |  if_b	neg	result1, #1
256ac     1C 00 90 CD |  if_b	jmp	#LR__3621
256b0     01 22 86 F1 | 	sub	local03, #1
256b4     10 23 62 FC | 	wrlong	local03, local02
256b8     04 20 06 F1 | 	add	local02, #4
256bc     10 23 02 FB | 	rdlong	local03, local02
256c0     11 FB C1 FA | 	rdbyte	result1, local03
256c4     01 22 06 F1 | 	add	local03, #1
256c8     10 23 62 FC | 	wrlong	local03, local02
256cc                 | LR__3621
256cc     A7 F0 03 F6 | 	mov	ptra, fp
256d0     B2 00 A0 FD | 	call	#popregs_
256d4                 | __system____default_getc_ret
256d4     2D 00 64 FD | 	ret
256d8                 | 
256d8                 | __system____default_putc
256d8     06 4A 05 F6 | 	mov	COUNT_, #6
256dc     A8 00 A0 FD | 	call	#pushregs_
256e0     09 1F 02 F6 | 	mov	local01, arg01
256e4     0A 21 02 F6 | 	mov	local02, arg02
256e8     10 23 02 FB | 	rdlong	local03, local02
256ec     08 22 06 F1 | 	add	local03, #8
256f0     11 FB 01 FB | 	rdlong	result1, local03
256f4     01 FA CD F7 | 	test	result1, #1 wz
256f8     10 13 02 56 |  if_ne	mov	arg01, local02
256fc     80 00 B0 5D |  if_ne	call	#__system____default_flush
25700     11 25 02 FB | 	rdlong	local04, local03
25704     02 24 46 F5 | 	or	local04, #2
25708     11 25 62 FC | 	wrlong	local04, local03
2570c     08 22 86 F1 | 	sub	local03, #8
25710     11 27 02 FB | 	rdlong	local05, local03
25714     10 22 06 F1 | 	add	local03, #16
25718     11 15 02 FB | 	rdlong	arg02, local03
2571c     10 22 86 F1 | 	sub	local03, #16
25720     13 FB 01 F6 | 	mov	result1, local05
25724     0A FB 01 F1 | 	add	result1, arg02
25728     FD 1E 42 FC | 	wrbyte	local01, result1
2572c     0F 1F E2 F8 | 	getbyte	local01, local01, #0
25730     01 26 06 F1 | 	add	local05, #1
25734     11 27 62 FC | 	wrlong	local05, local03
25738     06 20 06 F1 | 	add	local02, #6
2573c     10 29 EA FA | 	rdword	local06, local02 wz
25740     06 20 86 F1 | 	sub	local02, #6
25744     0C 22 06 51 |  if_ne	add	local03, #12
25748     11 25 02 5B |  if_ne	rdlong	local04, local03
2574c     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
25750     0C 00 90 AD |  if_e	jmp	#LR__3630
25754     0A 1E 0E F2 | 	cmp	local01, #10 wz
25758     01 28 0E A2 |  if_e	cmp	local06, #1 wz
2575c     10 00 90 5D |  if_ne	jmp	#LR__3631
25760                 | LR__3630
25760     10 13 02 F6 | 	mov	arg01, local02
25764     18 00 B0 FD | 	call	#__system____default_flush
25768     00 FA 0D F2 | 	cmp	result1, #0 wz
2576c     01 1E 66 56 |  if_ne	neg	local01, #1
25770                 | LR__3631
25770     0F FB 01 F6 | 	mov	result1, local01
25774     A7 F0 03 F6 | 	mov	ptra, fp
25778     B2 00 A0 FD | 	call	#popregs_
2577c                 | __system____default_putc_ret
2577c     2D 00 64 FD | 	ret
25780                 | 
25780                 | __system____default_flush
25780     06 4A 05 F6 | 	mov	COUNT_, #6
25784     A8 00 A0 FD | 	call	#pushregs_
25788     09 1F 02 F6 | 	mov	local01, arg01
2578c     0F 21 02 FB | 	rdlong	local02, local01
25790     10 23 02 FB | 	rdlong	local03, local02
25794     08 20 06 F1 | 	add	local02, #8
25798     10 FB 01 FB | 	rdlong	result1, local02
2579c     08 20 86 F1 | 	sub	local02, #8
257a0     02 FA CD F7 | 	test	result1, #2 wz
257a4     D0 00 90 AD |  if_e	jmp	#LR__3642
257a8     01 22 56 F2 | 	cmps	local03, #1 wc
257ac     20 01 90 CD |  if_b	jmp	#LR__3644
257b0     08 1E 06 F1 | 	add	local01, #8
257b4     0F FB 01 FB | 	rdlong	result1, local01
257b8     08 1E 86 F1 | 	sub	local01, #8
257bc     40 FA CD F7 | 	test	result1, #64 wz
257c0     68 00 90 AD |  if_e	jmp	#LR__3641
257c4     08 1E 06 F1 | 	add	local01, #8
257c8     0F 17 02 FB | 	rdlong	arg03, local01
257cc     08 1E 86 F1 | 	sub	local01, #8
257d0     80 16 CE F7 | 	test	arg03, #128 wz
257d4     54 00 90 AD |  if_e	jmp	#LR__3640
257d8     30 1E 06 F1 | 	add	local01, #48
257dc     0F 25 02 FB | 	rdlong	local04, local01
257e0     12 27 02 F6 | 	mov	local05, local04
257e4     30 1E 86 F1 | 	sub	local01, #48
257e8     13 26 46 F7 | 	zerox	local05, #19
257ec     14 24 46 F0 | 	shr	local04, #20
257f0     02 24 66 F0 | 	shl	local04, #2
257f4     ED 24 02 F1 | 	add	local04, __methods__
257f8     12 25 02 FB | 	rdlong	local04, local04
257fc     0F 13 02 F6 | 	mov	arg01, local01
25800     00 14 06 F6 | 	mov	arg02, #0
25804     02 16 06 F6 | 	mov	arg03, #2
25808     F2 28 02 F6 | 	mov	local06, objptr
2580c     13 E5 01 F6 | 	mov	objptr, local05
25810     2D 24 62 FD | 	call	local04
25814     14 E5 01 F6 | 	mov	objptr, local06
25818     08 1E 06 F1 | 	add	local01, #8
2581c     0F 29 02 FB | 	rdlong	local06, local01
25820     80 28 26 F5 | 	andn	local06, #128
25824     0F 29 62 FC | 	wrlong	local06, local01
25828     08 1E 86 F1 | 	sub	local01, #8
2582c                 | LR__3640
2582c                 | LR__3641
2582c     18 1E 06 F1 | 	add	local01, #24
25830     0F 25 02 FB | 	rdlong	local04, local01
25834     12 27 02 F6 | 	mov	local05, local04
25838     18 1E 86 F1 | 	sub	local01, #24
2583c     13 26 46 F7 | 	zerox	local05, #19
25840     14 24 46 F0 | 	shr	local04, #20
25844     02 24 66 F0 | 	shl	local04, #2
25848     ED 24 02 F1 | 	add	local04, __methods__
2584c     12 25 02 FB | 	rdlong	local04, local04
25850     10 20 06 F1 | 	add	local02, #16
25854     10 15 02 FB | 	rdlong	arg02, local02
25858     10 20 86 F1 | 	sub	local02, #16
2585c     0F 13 02 F6 | 	mov	arg01, local01
25860     11 17 02 F6 | 	mov	arg03, local03
25864     F2 28 02 F6 | 	mov	local06, objptr
25868     13 E5 01 F6 | 	mov	objptr, local05
2586c     2D 24 62 FD | 	call	local04
25870     14 E5 01 F6 | 	mov	objptr, local06
25874     58 00 90 FD | 	jmp	#LR__3644
25878                 | LR__3642
25878     08 20 06 F1 | 	add	local02, #8
2587c     10 29 02 FB | 	rdlong	local06, local02
25880     08 20 86 F1 | 	sub	local02, #8
25884     01 28 CE F7 | 	test	local06, #1 wz
25888     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
2588c     40 00 90 AD |  if_e	jmp	#LR__3643
25890     30 1E 06 F1 | 	add	local01, #48
25894     0F 25 02 FB | 	rdlong	local04, local01
25898     12 27 02 F6 | 	mov	local05, local04
2589c     30 1E 86 F1 | 	sub	local01, #48
258a0     13 26 46 F7 | 	zerox	local05, #19
258a4     14 24 46 F0 | 	shr	local04, #20
258a8     02 24 66 F0 | 	shl	local04, #2
258ac     ED 24 02 F1 | 	add	local04, __methods__
258b0     12 25 02 FB | 	rdlong	local04, local04
258b4     0F 13 02 F6 | 	mov	arg01, local01
258b8     11 15 62 F6 | 	neg	arg02, local03
258bc     01 16 06 F6 | 	mov	arg03, #1
258c0     F2 28 02 F6 | 	mov	local06, objptr
258c4     13 E5 01 F6 | 	mov	objptr, local05
258c8     2D 24 62 FD | 	call	local04
258cc     14 E5 01 F6 | 	mov	objptr, local06
258d0                 | LR__3643
258d0                 | LR__3644
258d0     10 01 68 FC | 	wrlong	#0, local02
258d4     04 20 06 F1 | 	add	local02, #4
258d8     10 01 68 FC | 	wrlong	#0, local02
258dc     04 20 06 F1 | 	add	local02, #4
258e0     10 01 68 FC | 	wrlong	#0, local02
258e4     00 FA 05 F6 | 	mov	result1, #0
258e8     A7 F0 03 F6 | 	mov	ptra, fp
258ec     B2 00 A0 FD | 	call	#popregs_
258f0                 | __system____default_flush_ret
258f0     2D 00 64 FD | 	ret
258f4                 | 
258f4                 | __system____default_buffer_init
258f4     02 4A 05 F6 | 	mov	COUNT_, #2
258f8     A8 00 A0 FD | 	call	#pushregs_
258fc     09 1F 02 F6 | 	mov	local01, arg01
25900     0F 21 02 FB | 	rdlong	local02, local01
25904     0F 13 02 F6 | 	mov	arg01, local01
25908     34 03 B0 FD | 	call	#__system___isatty
2590c     00 FA 0D F2 | 	cmp	result1, #0 wz
25910     06 1E 06 51 |  if_ne	add	local01, #6
25914     0F 0B 58 5C |  if_ne	wrword	#5, local01
25918     06 1E 06 A1 |  if_e	add	local01, #6
2591c     0F 0D 58 AC |  if_e	wrword	#6, local01
25920     14 20 06 F1 | 	add	local02, #20
25924     10 1F 02 F6 | 	mov	local01, local02
25928     04 20 86 F1 | 	sub	local02, #4
2592c     10 1F 62 FC | 	wrlong	local01, local02
25930     04 20 86 F1 | 	sub	local02, #4
25934     02 00 80 FF 
25938     10 01 68 FC | 	wrlong	##1024, local02
2593c     00 FA 05 F6 | 	mov	result1, #0
25940     A7 F0 03 F6 | 	mov	ptra, fp
25944     B2 00 A0 FD | 	call	#popregs_
25948                 | __system____default_buffer_init_ret
25948     2D 00 64 FD | 	ret
2594c                 | 
2594c                 | __system__stat
2594c     04 4A 05 F6 | 	mov	COUNT_, #4
25950     A8 00 A0 FD | 	call	#pushregs_
25954     0A 1F 02 F6 | 	mov	local01, arg02
25958     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2595c     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
25960     09 15 02 F6 | 	mov	arg02, arg01
25964     10 13 02 F6 | 	mov	arg01, local02
25968     00 16 06 F6 | 	mov	arg03, #0
2596c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
25970     40 B8 BF FD | 	call	#__system____getvfsforfile
25974     FD 22 0A F6 | 	mov	local03, result1 wz
25978     10 00 90 AD |  if_e	jmp	#LR__3650
2597c     34 22 06 F1 | 	add	local03, #52
25980     11 17 0A FB | 	rdlong	arg03, local03 wz
25984     34 22 86 F1 | 	sub	local03, #52
25988     14 00 90 5D |  if_ne	jmp	#LR__3651
2598c                 | LR__3650
2598c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25990     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
25994     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25998     01 FA 65 F6 | 	neg	result1, #1
2599c     68 00 90 FD | 	jmp	#LR__3652
259a0                 | LR__3651
259a0     0F 13 02 F6 | 	mov	arg01, local01
259a4     00 14 06 F6 | 	mov	arg02, #0
259a8     30 16 06 F6 | 	mov	arg03, #48
259ac     09 25 02 F6 | 	mov	local04, arg01
259b0     98 00 A0 FD | 	call	#\builtin_bytefill_
259b4     12 FB 01 F6 | 	mov	result1, local04
259b8     10 13 CA FA | 	rdbyte	arg01, local02 wz
259bc     08 1E 06 A1 |  if_e	add	local01, #8
259c0     08 00 80 AF 
259c4     0F FF 6B AC |  if_e	wrlong	##4607, local01
259c8     00 FA 05 A6 |  if_e	mov	result1, #0
259cc     38 00 90 AD |  if_e	jmp	#LR__3652
259d0     34 22 06 F1 | 	add	local03, #52
259d4     11 23 02 FB | 	rdlong	local03, local03
259d8     11 25 02 F6 | 	mov	local04, local03
259dc     13 22 46 F7 | 	zerox	local03, #19
259e0     14 24 46 F0 | 	shr	local04, #20
259e4     02 24 66 F0 | 	shl	local04, #2
259e8     ED 24 02 F1 | 	add	local04, __methods__
259ec     12 25 02 FB | 	rdlong	local04, local04
259f0     10 13 02 F6 | 	mov	arg01, local02
259f4     0F 15 02 F6 | 	mov	arg02, local01
259f8     F2 20 02 F6 | 	mov	local02, objptr
259fc     11 E5 01 F6 | 	mov	objptr, local03
25a00     2D 24 62 FD | 	call	local04
25a04     10 E5 01 F6 | 	mov	objptr, local02
25a08                 | LR__3652
25a08     A7 F0 03 F6 | 	mov	ptra, fp
25a0c     B2 00 A0 FD | 	call	#popregs_
25a10                 | __system__stat_ret
25a10     2D 00 64 FD | 	ret
25a14                 | 
25a14                 | __system__write
25a14     0A 12 16 F2 | 	cmp	arg01, #10 wc
25a18     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25a1c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25a20     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25a24     01 FA 65 36 |  if_ae	neg	result1, #1
25a28     20 00 90 3D |  if_ae	jmp	#LR__3660
25a2c     34 12 06 FD | 	qmul	arg01, #52
25a30     02 00 00 FF 
25a34     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25a38     18 12 62 FD | 	getqx	arg01
25a3c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
25a40     02 00 00 FF 
25a44     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25a48     0C 10 B0 FD | 	call	#__system___vfswrite
25a4c                 | LR__3660
25a4c                 | __system__write_ret
25a4c     2D 00 64 FD | 	ret
25a50                 | 
25a50                 | __system__read
25a50     0A 12 16 F2 | 	cmp	arg01, #10 wc
25a54     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25a58     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25a5c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25a60     01 FA 65 36 |  if_ae	neg	result1, #1
25a64     20 00 90 3D |  if_ae	jmp	#LR__3670
25a68     34 12 06 FD | 	qmul	arg01, #52
25a6c     02 00 00 FF 
25a70     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25a74     18 12 62 FD | 	getqx	arg01
25a78     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
25a7c     02 00 00 FF 
25a80     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25a84     98 11 B0 FD | 	call	#__system___vfsread
25a88                 | LR__3670
25a88                 | __system__read_ret
25a88     2D 00 64 FD | 	ret
25a8c                 | 
25a8c                 | __system__close
25a8c     0A 12 16 F2 | 	cmp	arg01, #10 wc
25a90     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25a94     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25a98     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25a9c     01 FA 65 36 |  if_ae	neg	result1, #1
25aa0     20 00 90 3D |  if_ae	jmp	#LR__3680
25aa4     34 12 06 FD | 	qmul	arg01, #52
25aa8     02 00 00 FF 
25aac     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25ab0     18 12 62 FD | 	getqx	arg01
25ab4     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
25ab8     02 00 00 FF 
25abc     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25ac0     10 F9 BF FD | 	call	#__system___closeraw
25ac4                 | LR__3680
25ac4                 | __system__close_ret
25ac4     2D 00 64 FD | 	ret
25ac8                 | 
25ac8                 | __system__lseek
25ac8     06 4A 05 F6 | 	mov	COUNT_, #6
25acc     A8 00 A0 FD | 	call	#pushregs_
25ad0     0A 12 16 F2 | 	cmp	arg01, #10 wc
25ad4     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25ad8     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25adc     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25ae0     01 FA 65 36 |  if_ae	neg	result1, #1
25ae4     C4 00 90 3D |  if_ae	jmp	#LR__3691
25ae8     34 12 06 FD | 	qmul	arg01, #52
25aec     02 00 00 FF 
25af0     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25af4     18 1E 62 FD | 	getqx	local01
25af8     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
25afc     30 1E 06 F1 | 	add	local01, #48
25b00     0F 13 0A FB | 	rdlong	arg01, local01 wz
25b04     30 1E 86 F1 | 	sub	local01, #48
25b08     02 00 00 FF 
25b0c     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25b10     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25b14     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
25b18     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25b1c     01 FA 65 A6 |  if_e	neg	result1, #1
25b20     88 00 90 AD |  if_e	jmp	#LR__3691
25b24     08 1E 06 F1 | 	add	local01, #8
25b28     0F 21 02 FB | 	rdlong	local02, local01
25b2c     08 1E 86 F1 | 	sub	local01, #8
25b30     40 20 CE F7 | 	test	local02, #64 wz
25b34     08 1E 06 51 |  if_ne	add	local01, #8
25b38     0F 21 02 5B |  if_ne	rdlong	local02, local01
25b3c     80 20 46 55 |  if_ne	or	local02, #128
25b40     0F 21 62 5C |  if_ne	wrlong	local02, local01
25b44     08 1E 86 51 |  if_ne	sub	local01, #8
25b48     30 1E 06 F1 | 	add	local01, #48
25b4c     0F 23 02 FB | 	rdlong	local03, local01
25b50     11 25 02 F6 | 	mov	local04, local03
25b54     30 1E 86 F1 | 	sub	local01, #48
25b58     13 24 46 F7 | 	zerox	local04, #19
25b5c     14 22 46 F0 | 	shr	local03, #20
25b60     02 22 66 F0 | 	shl	local03, #2
25b64     ED 22 02 F1 | 	add	local03, __methods__
25b68     11 23 02 FB | 	rdlong	local03, local03
25b6c     0F 13 02 F6 | 	mov	arg01, local01
25b70     F2 26 02 F6 | 	mov	local05, objptr
25b74     12 E5 01 F6 | 	mov	objptr, local04
25b78     2D 22 62 FD | 	call	local03
25b7c     13 E5 01 F6 | 	mov	objptr, local05
25b80     FD 28 02 F6 | 	mov	local06, result1
25b84     00 28 56 F2 | 	cmps	local06, #0 wc
25b88     1C 00 90 3D |  if_ae	jmp	#LR__3690
25b8c     14 13 6A F6 | 	neg	arg01, local06 wz
25b90     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25b94     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25b98     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25b9c     01 FA 65 56 |  if_ne	neg	result1, #1
25ba0     00 FA 05 A6 |  if_e	mov	result1, #0
25ba4     04 00 90 FD | 	jmp	#LR__3691
25ba8                 | LR__3690
25ba8     14 FB 01 F6 | 	mov	result1, local06
25bac                 | LR__3691
25bac     A7 F0 03 F6 | 	mov	ptra, fp
25bb0     B2 00 A0 FD | 	call	#popregs_
25bb4                 | __system__lseek_ret
25bb4     2D 00 64 FD | 	ret
25bb8                 | 
25bb8                 | __system___ioctl
25bb8     03 4A 05 F6 | 	mov	COUNT_, #3
25bbc     A8 00 A0 FD | 	call	#pushregs_
25bc0     00 12 4E F2 | 	cmps	arg01, #0 wz
25bc4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25bc8     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
25bcc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25bd0     01 FA 65 A6 |  if_e	neg	result1, #1
25bd4     5C 00 90 AD |  if_e	jmp	#LR__3701
25bd8     28 12 06 F1 | 	add	arg01, #40
25bdc     09 1F 02 FB | 	rdlong	local01, arg01
25be0     0F 21 02 F6 | 	mov	local02, local01
25be4     28 12 86 F1 | 	sub	arg01, #40
25be8     13 20 46 F7 | 	zerox	local02, #19
25bec     14 1E 46 F0 | 	shr	local01, #20
25bf0     02 1E 66 F0 | 	shl	local01, #2
25bf4     ED 1E 02 F1 | 	add	local01, __methods__
25bf8     0F 1F 02 FB | 	rdlong	local01, local01
25bfc     F2 22 02 F6 | 	mov	local03, objptr
25c00     10 E5 01 F6 | 	mov	objptr, local02
25c04     2D 1E 62 FD | 	call	local01
25c08     11 E5 01 F6 | 	mov	objptr, local03
25c0c     FD 12 0A F6 | 	mov	arg01, result1 wz
25c10     1C 00 90 AD |  if_e	jmp	#LR__3700
25c14     00 12 4E F2 | 	cmps	arg01, #0 wz
25c18     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25c1c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25c20     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25c24     01 FA 65 56 |  if_ne	neg	result1, #1
25c28     00 FA 05 A6 |  if_e	mov	result1, #0
25c2c     04 00 90 FD | 	jmp	#LR__3701
25c30                 | LR__3700
25c30     00 FA 05 F6 | 	mov	result1, #0
25c34                 | LR__3701
25c34     A7 F0 03 F6 | 	mov	ptra, fp
25c38     B2 00 A0 FD | 	call	#popregs_
25c3c                 | __system___ioctl_ret
25c3c     2D 00 64 FD | 	ret
25c40                 | 
25c40                 | __system___isatty
25c40     00 4A 05 F6 | 	mov	COUNT_, #0
25c44     A8 00 A0 FD | 	call	#pushregs_
25c48     0C F0 07 F1 | 	add	ptra, #12
25c4c     04 4E 05 F1 | 	add	fp, #4
25c50     A7 12 62 FC | 	wrlong	arg01, fp
25c54     04 4E 05 F1 | 	add	fp, #4
25c58     A7 16 02 F6 | 	mov	arg03, fp
25c5c     08 4E 85 F1 | 	sub	fp, #8
25c60     00 15 06 F6 | 	mov	arg02, #256
25c64     50 FF BF FD | 	call	#__system___ioctl
25c68     00 FA 0D F2 | 	cmp	result1, #0 wz
25c6c     01 FA 05 A6 |  if_e	mov	result1, #1
25c70     00 FA 05 56 |  if_ne	mov	result1, #0
25c74     A7 F0 03 F6 | 	mov	ptra, fp
25c78     B2 00 A0 FD | 	call	#popregs_
25c7c                 | __system___isatty_ret
25c7c     2D 00 64 FD | 	ret
25c80                 | 
25c80                 | __system____getftab
25c80     0A 12 16 F2 | 	cmp	arg01, #10 wc
25c84     34 12 06 CD |  if_b	qmul	arg01, #52
25c88     00 FA 05 36 |  if_ae	mov	result1, #0
25c8c     02 00 00 CF 
25c90     20 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1312
25c94     18 FA 61 CD |  if_b	getqx	result1
25c98     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
25c9c     02 00 00 CF 
25ca0     20 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
25ca4                 | __system____getftab_ret
25ca4     2D 00 64 FD | 	ret
25ca8                 | 
25ca8                 | __system__strncpy
25ca8     09 01 02 F6 | 	mov	_var01, arg01
25cac                 | LR__3710
25cac     01 16 86 F1 | 	sub	arg03, #1
25cb0     00 16 56 F2 | 	cmps	arg03, #0 wc
25cb4     18 00 90 CD |  if_b	jmp	#LR__3711
25cb8     0A FB C1 FA | 	rdbyte	result1, arg02
25cbc     00 FB 41 FC | 	wrbyte	result1, _var01
25cc0     01 14 06 F1 | 	add	arg02, #1
25cc4     00 FB C9 FA | 	rdbyte	result1, _var01 wz
25cc8     01 00 06 F1 | 	add	_var01, #1
25ccc     DC FF 9F 5D |  if_ne	jmp	#LR__3710
25cd0                 | LR__3711
25cd0     97 0C 48 FB | 	callpa	#(@LR__3713-@LR__3712)>>2,fcache_load_ptr_
25cd4                 | LR__3712
25cd4     01 16 86 F1 | 	sub	arg03, #1
25cd8     00 16 56 F2 | 	cmps	arg03, #0 wc
25cdc     00 03 02 36 |  if_ae	mov	_var02, _var01
25ce0     01 00 06 31 |  if_ae	add	_var01, #1
25ce4     01 01 48 3C |  if_ae	wrbyte	#0, _var02
25ce8     E8 FF 9F 3D |  if_ae	jmp	#LR__3712
25cec                 | LR__3713
25cec     09 FB 01 F6 | 	mov	result1, arg01
25cf0                 | __system__strncpy_ret
25cf0     2D 00 64 FD | 	ret
25cf4                 | 
25cf4                 | __system__strncat
25cf4     00 14 4E F2 | 	cmps	arg02, #0 wz
25cf8     50 00 90 AD |  if_e	jmp	#LR__3724
25cfc     01 16 16 F2 | 	cmp	arg03, #1 wc
25d00     48 00 90 CD |  if_b	jmp	#LR__3724
25d04     09 01 02 F6 | 	mov	_var01, arg01
25d08     97 1E 48 FB | 	callpa	#(@LR__3722-@LR__3720)>>2,fcache_load_ptr_
25d0c                 | LR__3720
25d0c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
25d10     01 00 06 51 |  if_ne	add	_var01, #1
25d14     F4 FF 9F 5D |  if_ne	jmp	#LR__3720
25d18     0B 03 02 F6 | 	mov	_var02, arg03
25d1c                 | LR__3721
25d1c     0A 05 C2 FA | 	rdbyte	_var03, arg02
25d20     02 07 02 F6 | 	mov	_var04, _var03
25d24     07 06 4E F7 | 	zerox	_var04, #7 wz
25d28     01 14 06 F1 | 	add	arg02, #1
25d2c     18 00 90 AD |  if_e	jmp	#LR__3723
25d30     01 02 86 F1 | 	sub	_var02, #1
25d34     00 02 56 F2 | 	cmps	_var02, #0 wc
25d38     00 07 02 36 |  if_ae	mov	_var04, _var01
25d3c     01 00 06 31 |  if_ae	add	_var01, #1
25d40     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
25d44     D4 FF 9F 3D |  if_ae	jmp	#LR__3721
25d48                 | LR__3722
25d48                 | LR__3723
25d48     00 01 48 FC | 	wrbyte	#0, _var01
25d4c                 | LR__3724
25d4c     09 FB 01 F6 | 	mov	result1, arg01
25d50                 | __system__strncat_ret
25d50     2D 00 64 FD | 	ret
25d54                 | 
25d54                 | __system__strncmp
25d54     09 01 0A F6 | 	mov	_var01, arg01 wz
25d58     14 00 90 5D |  if_ne	jmp	#LR__3730
25d5c     00 14 0E F2 | 	cmp	arg02, #0 wz
25d60     01 02 66 56 |  if_ne	neg	_var02, #1
25d64     00 02 06 A6 |  if_e	mov	_var02, #0
25d68     01 FB 01 F6 | 	mov	result1, _var02
25d6c     74 00 90 FD | 	jmp	#__system__strncmp_ret
25d70                 | LR__3730
25d70     00 14 0E F2 | 	cmp	arg02, #0 wz
25d74     01 FA 05 A6 |  if_e	mov	result1, #1
25d78     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25d7c     0B 05 02 F6 | 	mov	_var03, arg03
25d80     97 16 48 FB | 	callpa	#(@LR__3732-@LR__3731)>>2,fcache_load_ptr_
25d84                 | LR__3731
25d84     00 07 C2 FA | 	rdbyte	_var04, _var01
25d88     0A 09 02 F6 | 	mov	_var05, arg02
25d8c     04 0B C2 FA | 	rdbyte	_var06, _var05
25d90     01 04 86 F1 | 	sub	_var03, #1
25d94     00 04 56 F2 | 	cmps	_var03, #0 wc
25d98     01 00 06 F1 | 	add	_var01, #1
25d9c     01 14 06 F1 | 	add	arg02, #1
25da0     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
25da4     08 00 90 2D |  if_nc_and_z	jmp	#LR__3733
25da8     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
25dac     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3731
25db0                 | LR__3732
25db0                 | LR__3733
25db0     00 04 56 F2 | 	cmps	_var03, #0 wc
25db4     00 FA 05 C6 |  if_b	mov	result1, #0
25db8     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
25dbc     05 07 0A F2 | 	cmp	_var04, _var06 wz
25dc0     00 FA 05 A6 |  if_e	mov	result1, #0
25dc4     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25dc8     00 06 0E F2 | 	cmp	_var04, #0 wz
25dcc     01 FA 65 A6 |  if_e	neg	result1, #1
25dd0     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
25dd4     00 0A 0E F2 | 	cmp	_var06, #0 wz
25dd8     01 FA 05 A6 |  if_e	mov	result1, #1
25ddc     03 FB 01 56 |  if_ne	mov	result1, _var04
25de0     05 FB 81 51 |  if_ne	sub	result1, _var06
25de4                 | __system__strncmp_ret
25de4     2D 00 64 FD | 	ret
25de8                 | 
25de8                 | __system____root_opendir
25de8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
25dec     04 12 06 F1 | 	add	arg01, #4
25df0     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
25df4     00 FA 05 F6 | 	mov	result1, #0
25df8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
25dfc                 | __system____root_opendir_ret
25dfc     2D 00 64 FD | 	ret
25e00                 | 
25e00                 | __system____root_readdir
25e00     03 4A 05 F6 | 	mov	COUNT_, #3
25e04     A8 00 A0 FD | 	call	#pushregs_
25e08     09 1F 02 F6 | 	mov	local01, arg01
25e0c     0A 21 02 F6 | 	mov	local02, arg02
25e10     04 1E 06 F1 | 	add	local01, #4
25e14     0F 23 02 FB | 	rdlong	local03, local01
25e18     04 1E 86 F1 | 	sub	local01, #4
25e1c                 | LR__3740
25e1c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
25e20     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
25e24     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
25e28     01 FA 65 A6 |  if_e	neg	result1, #1
25e2c     48 00 90 AD |  if_e	jmp	#LR__3741
25e30     11 17 0A FB | 	rdlong	arg03, local03 wz
25e34     04 22 06 A1 |  if_e	add	local03, #4
25e38     E0 FF 9F AD |  if_e	jmp	#LR__3740
25e3c     11 15 02 FB | 	rdlong	arg02, local03
25e40     01 14 06 F1 | 	add	arg02, #1
25e44     10 13 02 F6 | 	mov	arg01, local02
25e48     40 16 06 F6 | 	mov	arg03, #64
25e4c     58 FE BF FD | 	call	#__system__strncpy
25e50     50 20 06 F1 | 	add	local02, #80
25e54     10 03 48 FC | 	wrbyte	#1, local02
25e58     08 20 86 F1 | 	sub	local02, #8
25e5c     10 01 68 FC | 	wrlong	#0, local02
25e60     04 20 06 F1 | 	add	local02, #4
25e64     10 01 68 FC | 	wrlong	#0, local02
25e68     04 22 06 F1 | 	add	local03, #4
25e6c     04 1E 06 F1 | 	add	local01, #4
25e70     0F 23 62 FC | 	wrlong	local03, local01
25e74     00 FA 05 F6 | 	mov	result1, #0
25e78                 | LR__3741
25e78     A7 F0 03 F6 | 	mov	ptra, fp
25e7c     B2 00 A0 FD | 	call	#popregs_
25e80                 | __system____root_readdir_ret
25e80     2D 00 64 FD | 	ret
25e84                 | 
25e84                 | __system____root_closedir
25e84     00 FA 05 F6 | 	mov	result1, #0
25e88                 | __system____root_closedir_ret
25e88     2D 00 64 FD | 	ret
25e8c                 | 
25e8c                 | __system____root_stat
25e8c     0A 01 02 F6 | 	mov	_var01, arg02
25e90     00 13 02 F6 | 	mov	arg01, _var01
25e94     00 14 06 F6 | 	mov	arg02, #0
25e98     30 16 06 F6 | 	mov	arg03, #48
25e9c     98 00 A0 FD | 	call	#\builtin_bytefill_
25ea0     08 00 06 F1 | 	add	_var01, #8
25ea4     08 00 80 FF 
25ea8     00 FF 6B FC | 	wrlong	##4607, _var01
25eac     00 FA 05 F6 | 	mov	result1, #0
25eb0                 | __system____root_stat_ret
25eb0     2D 00 64 FD | 	ret
25eb4                 | 
25eb4                 | __system___normalizeName
25eb4     00 00 06 F6 | 	mov	_var01, #0
25eb8     09 03 02 F6 | 	mov	_var02, arg01
25ebc     01 05 02 F6 | 	mov	_var03, _var02
25ec0                 | LR__3750
25ec0     01 07 CA FA | 	rdbyte	_var04, _var02 wz
25ec4     5C 01 90 AD |  if_e	jmp	#LR__3769
25ec8     00 00 0E F2 | 	cmp	_var01, #0 wz
25ecc     02 07 02 56 |  if_ne	mov	_var04, _var03
25ed0     01 04 06 51 |  if_ne	add	_var03, #1
25ed4     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
25ed8     00 00 06 56 |  if_ne	mov	_var01, #0
25edc     01 07 C2 FA | 	rdbyte	_var04, _var02
25ee0     2E 06 0E F2 | 	cmp	_var04, #46 wz
25ee4     D8 00 90 5D |  if_ne	jmp	#LR__3762
25ee8     01 02 06 F1 | 	add	_var02, #1
25eec     01 07 C2 FA | 	rdbyte	_var04, _var02
25ef0     01 02 86 F1 | 	sub	_var02, #1
25ef4     2F 06 0E F2 | 	cmp	_var04, #47 wz
25ef8     18 00 90 AD |  if_e	jmp	#LR__3751
25efc     01 02 06 F1 | 	add	_var02, #1
25f00     01 09 C2 FA | 	rdbyte	_var05, _var02
25f04     01 02 86 F1 | 	sub	_var02, #1
25f08     04 0B 02 F6 | 	mov	_var06, _var05
25f0c     07 0A 4E F7 | 	zerox	_var06, #7 wz
25f10     10 00 90 5D |  if_ne	jmp	#LR__3752
25f14                 | LR__3751
25f14     01 0D 02 F6 | 	mov	_var07, _var02
25f18     01 0C 06 F1 | 	add	_var07, #1
25f1c     06 03 02 F6 | 	mov	_var02, _var07
25f20     E0 00 90 FD | 	jmp	#LR__3766
25f24                 | LR__3752
25f24     01 02 06 F1 | 	add	_var02, #1
25f28     01 0D C2 FA | 	rdbyte	_var07, _var02
25f2c     01 02 86 F1 | 	sub	_var02, #1
25f30     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
25f34     2E 06 0E F2 | 	cmp	_var04, #46 wz
25f38     84 00 90 5D |  if_ne	jmp	#LR__3761
25f3c     02 02 06 F1 | 	add	_var02, #2
25f40     01 0D C2 FA | 	rdbyte	_var07, _var02
25f44     02 02 86 F1 | 	sub	_var02, #2
25f48     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
25f4c     2F 06 0E F2 | 	cmp	_var04, #47 wz
25f50     18 00 90 AD |  if_e	jmp	#LR__3753
25f54     02 02 06 F1 | 	add	_var02, #2
25f58     01 09 C2 FA | 	rdbyte	_var05, _var02
25f5c     02 02 86 F1 | 	sub	_var02, #2
25f60     04 0B 02 F6 | 	mov	_var06, _var05
25f64     07 0A 4E F7 | 	zerox	_var06, #7 wz
25f68     54 00 90 5D |  if_ne	jmp	#LR__3760
25f6c                 | LR__3753
25f6c     02 02 06 F1 | 	add	_var02, #2
25f70     09 05 5A F2 | 	cmps	_var03, arg01 wcz
25f74     40 00 90 ED |  if_be	jmp	#LR__3759
25f78     02 0F 02 F6 | 	mov	_var08, _var03
25f7c     01 0E 86 F1 | 	sub	_var08, #1
25f80                 | LR__3754
25f80     07 07 C2 FA | 	rdbyte	_var04, _var08
25f84     2F 06 0E F2 | 	cmp	_var04, #47 wz
25f88     0C 00 90 5D |  if_ne	jmp	#LR__3755
25f8c     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
25f90     01 0E 86 11 |  if_a	sub	_var08, #1
25f94     E8 FF 9F 1D |  if_a	jmp	#LR__3754
25f98                 | LR__3755
25f98     97 0C 48 FB | 	callpa	#(@LR__3757-@LR__3756)>>2,fcache_load_ptr_
25f9c                 | LR__3756
25f9c     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
25fa0     10 00 90 ED |  if_be	jmp	#LR__3758
25fa4     07 07 C2 FA | 	rdbyte	_var04, _var08
25fa8     2F 06 0E F2 | 	cmp	_var04, #47 wz
25fac     01 0E 86 51 |  if_ne	sub	_var08, #1
25fb0     E8 FF 9F 5D |  if_ne	jmp	#LR__3756
25fb4                 | LR__3757
25fb4                 | LR__3758
25fb4     07 05 02 F6 | 	mov	_var03, _var08
25fb8                 | LR__3759
25fb8     01 00 06 F6 | 	mov	_var01, #1
25fbc     44 00 90 FD | 	jmp	#LR__3766
25fc0                 | LR__3760
25fc0                 | LR__3761
25fc0                 | LR__3762
25fc0     97 18 48 FB | 	callpa	#(@LR__3764-@LR__3763)>>2,fcache_load_ptr_
25fc4                 | LR__3763
25fc4     01 07 CA FA | 	rdbyte	_var04, _var02 wz
25fc8     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
25fcc     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
25fd0     20 00 90 AD |  if_e	jmp	#LR__3765
25fd4     01 0B 02 F6 | 	mov	_var06, _var02
25fd8     01 09 02 F6 | 	mov	_var05, _var02
25fdc     01 08 06 F1 | 	add	_var05, #1
25fe0     05 11 C2 FA | 	rdbyte	_var09, _var06
25fe4     04 03 02 F6 | 	mov	_var02, _var05
25fe8     02 11 42 FC | 	wrbyte	_var09, _var03
25fec     01 04 06 F1 | 	add	_var03, #1
25ff0     D0 FF 9F FD | 	jmp	#LR__3763
25ff4                 | LR__3764
25ff4                 | LR__3765
25ff4     01 07 C2 FA | 	rdbyte	_var04, _var02
25ff8     2F 06 0E F2 | 	cmp	_var04, #47 wz
25ffc     C0 FE 9F 5D |  if_ne	jmp	#LR__3750
26000     01 00 06 F6 | 	mov	_var01, #1
26004                 | LR__3766
26004     97 0C 48 FB | 	callpa	#(@LR__3768-@LR__3767)>>2,fcache_load_ptr_
26008                 | LR__3767
26008     01 07 C2 FA | 	rdbyte	_var04, _var02
2600c     2F 06 0E F2 | 	cmp	_var04, #47 wz
26010     01 0D 02 A6 |  if_e	mov	_var07, _var02
26014     01 0C 06 A1 |  if_e	add	_var07, #1
26018     06 03 02 A6 |  if_e	mov	_var02, _var07
2601c     E8 FF 9F AD |  if_e	jmp	#LR__3767
26020                 | LR__3768
26020     9C FE 9F FD | 	jmp	#LR__3750
26024                 | LR__3769
26024     02 01 48 FC | 	wrbyte	#0, _var03
26028                 | __system___normalizeName_ret
26028     2D 00 64 FD | 	ret
2602c                 | 
2602c                 | __system___strrev
2602c     09 01 CA FA | 	rdbyte	_var01, arg01 wz
26030     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
26034     09 03 02 F6 | 	mov	_var02, arg01
26038     97 1A 48 FB | 	callpa	#(@LR__3772-@LR__3770)>>2,fcache_load_ptr_
2603c                 | LR__3770
2603c     01 01 CA FA | 	rdbyte	_var01, _var02 wz
26040     01 02 06 51 |  if_ne	add	_var02, #1
26044     F4 FF 9F 5D |  if_ne	jmp	#LR__3770
26048     01 02 86 F1 | 	sub	_var02, #1
2604c                 | LR__3771
2604c     09 03 5A F2 | 	cmps	_var02, arg01 wcz
26050     1C 00 90 ED |  if_be	jmp	#LR__3773
26054     09 01 C2 FA | 	rdbyte	_var01, arg01
26058     01 05 C2 FA | 	rdbyte	_var03, _var02
2605c     09 05 42 FC | 	wrbyte	_var03, arg01
26060     01 01 42 FC | 	wrbyte	_var01, _var02
26064     01 12 06 F1 | 	add	arg01, #1
26068     01 02 86 F1 | 	sub	_var02, #1
2606c     DC FF 9F FD | 	jmp	#LR__3771
26070                 | LR__3772
26070                 | LR__3773
26070                 | __system___strrev_ret
26070     2D 00 64 FD | 	ret
26074                 | 
26074                 | __system___fmtpad
26074     06 4A 05 F6 | 	mov	COUNT_, #6
26078     A8 00 A0 FD | 	call	#pushregs_
2607c     09 1F 02 F6 | 	mov	local01, arg01
26080     0A 21 02 F6 | 	mov	local02, arg02
26084     0B 23 02 F6 | 	mov	local03, arg03
26088     10 13 EA F8 | 	getbyte	arg01, local02, #1
2608c     16 20 46 F0 | 	shr	local02, #22
26090     03 20 0E F5 | 	and	local02, #3 wz
26094     00 24 06 F6 | 	mov	local04, #0
26098     01 20 06 A6 |  if_e	mov	local02, #1
2609c     0C 21 CA F7 | 	test	local02, arg04 wz
260a0     00 FA 05 A6 |  if_e	mov	result1, #0
260a4     88 00 90 AD |  if_e	jmp	#LR__3783
260a8     09 23 C2 F2 | 	subr	local03, arg01
260ac     01 22 56 F2 | 	cmps	local03, #1 wc
260b0     00 FA 05 C6 |  if_b	mov	result1, #0
260b4     78 00 90 CD |  if_b	jmp	#LR__3783
260b8     03 20 0E F2 | 	cmp	local02, #3 wz
260bc     18 00 90 5D |  if_ne	jmp	#LR__3780
260c0     01 18 0E F2 | 	cmp	arg04, #1 wz
260c4     6E 20 62 FD | 	wrz	local02
260c8     10 23 02 F1 | 	add	local03, local02
260cc     11 23 52 F6 | 	abs	local03, local03 wc
260d0     01 22 46 F0 | 	shr	local03, #1
260d4     11 23 82 F6 | 	negc	local03, local03
260d8                 | LR__3780
260d8     01 22 56 F2 | 	cmps	local03, #1 wc
260dc     4C 00 90 CD |  if_b	jmp	#LR__3782
260e0     11 27 02 F6 | 	mov	local05, local03
260e4                 | LR__3781
260e4     0F 21 02 F6 | 	mov	local02, local01
260e8     0F 29 02 F6 | 	mov	local06, local01
260ec     13 20 46 F7 | 	zerox	local02, #19
260f0     14 28 46 F0 | 	shr	local06, #20
260f4     02 28 66 F0 | 	shl	local06, #2
260f8     ED 28 02 F1 | 	add	local06, __methods__
260fc     14 29 02 FB | 	rdlong	local06, local06
26100     20 12 06 F6 | 	mov	arg01, #32
26104     F2 22 02 F6 | 	mov	local03, objptr
26108     10 E5 01 F6 | 	mov	objptr, local02
2610c     2D 28 62 FD | 	call	local06
26110     11 E5 01 F6 | 	mov	objptr, local03
26114     FD 28 02 F6 | 	mov	local06, result1
26118     00 28 56 F2 | 	cmps	local06, #0 wc
2611c     14 FB 01 C6 |  if_b	mov	result1, local06
26120     0C 00 90 CD |  if_b	jmp	#LR__3783
26124     14 25 02 F1 | 	add	local04, local06
26128     EE 27 6E FB | 	djnz	local05, #LR__3781
2612c                 | LR__3782
2612c     12 FB 01 F6 | 	mov	result1, local04
26130                 | LR__3783
26130     A7 F0 03 F6 | 	mov	ptra, fp
26134     B2 00 A0 FD | 	call	#popregs_
26138                 | __system___fmtpad_ret
26138     2D 00 64 FD | 	ret
2613c                 | 
2613c                 | __system___uitoa
2613c     04 4A 05 F6 | 	mov	COUNT_, #4
26140     A8 00 A0 FD | 	call	#pushregs_
26144     09 1F 02 F6 | 	mov	local01, arg01
26148     00 1A 4E F2 | 	cmps	arg05, #0 wz
2614c     0F 1B 02 F6 | 	mov	arg05, local01
26150     00 20 06 F6 | 	mov	local02, #0
26154     37 22 06 56 |  if_ne	mov	local03, #55
26158     57 22 06 A6 |  if_e	mov	local03, #87
2615c                 | LR__3790
2615c     0B 15 12 FD | 	qdiv	arg02, arg03
26160     19 24 62 FD | 	getqy	local04
26164     0B 15 12 FD | 	qdiv	arg02, arg03
26168     0A 24 16 F2 | 	cmp	local04, #10 wc
2616c     30 24 06 C1 |  if_b	add	local04, #48
26170     11 25 02 31 |  if_ae	add	local04, local03
26174     0D 25 42 FC | 	wrbyte	local04, arg05
26178     01 1A 06 F1 | 	add	arg05, #1
2617c     01 20 06 F1 | 	add	local02, #1
26180     18 14 62 FD | 	getqx	arg02
26184     00 14 0E F2 | 	cmp	arg02, #0 wz
26188     D0 FF 9F 5D |  if_ne	jmp	#LR__3790
2618c     0C 21 12 F2 | 	cmp	local02, arg04 wc
26190     C8 FF 9F CD |  if_b	jmp	#LR__3790
26194     0D 01 48 FC | 	wrbyte	#0, arg05
26198     0F 13 02 F6 | 	mov	arg01, local01
2619c     8C FE BF FD | 	call	#__system___strrev
261a0     10 FB 01 F6 | 	mov	result1, local02
261a4     A7 F0 03 F6 | 	mov	ptra, fp
261a8     B2 00 A0 FD | 	call	#popregs_
261ac                 | __system___uitoa_ret
261ac     2D 00 64 FD | 	ret
261b0                 | 
261b0                 | __system__disassemble_0498
261b0     10 4A 05 F6 | 	mov	COUNT_, #16
261b4     A8 00 A0 FD | 	call	#pushregs_
261b8     09 1F 02 F6 | 	mov	local01, arg01
261bc     0A 21 02 F6 | 	mov	local02, arg02
261c0     0B 23 02 F6 | 	mov	local03, arg03
261c4     0C 25 02 F6 | 	mov	local04, arg04
261c8     0D 27 02 F6 | 	mov	local05, arg05
261cc     13 13 52 F6 | 	abs	arg01, local05 wc
261d0     1F 28 C6 C9 |  if_b	decod	local06, #31
261d4     00 28 06 36 |  if_ae	mov	local06, #0
261d8     F0 CF BF FD | 	call	#__system___float_fromuns
261dc     14 FB 61 F5 | 	xor	result1, local06
261e0     FD 2A 02 F6 | 	mov	local07, result1
261e4     00 2C 06 F6 | 	mov	local08, #0
261e8     0F 13 02 F6 | 	mov	arg01, local01
261ec     00 14 06 F6 | 	mov	arg02, #0
261f0     01 16 06 F6 | 	mov	arg03, #1
261f4     0C D8 BF FD | 	call	#__system___float_cmp
261f8     00 FA 0D F2 | 	cmp	result1, #0 wz
261fc     00 2E 06 A6 |  if_e	mov	local09, #0
26200     10 01 68 AC |  if_e	wrlong	#0, local02
26204     11 2F 62 AC |  if_e	wrlong	local09, local03
26208     8C 01 90 AD |  if_e	jmp	#LR__3812
2620c     0F 13 02 F6 | 	mov	arg01, local01
26210     BC DC BF FD | 	call	#__system____builtin_ilogb
26214     FD 30 02 F6 | 	mov	local10, result1
26218     0A 26 0E F2 | 	cmp	local05, #10 wz
2621c     24 00 90 5D |  if_ne	jmp	#LR__3800
26220     18 2F 02 F6 | 	mov	local09, local10
26224     01 2E 66 F0 | 	shl	local09, #1
26228     18 2F 02 F1 | 	add	local09, local10
2622c     17 31 52 F6 | 	abs	local10, local09 wc
26230     0A 30 16 FD | 	qdiv	local10, #10
26234     09 32 06 F6 | 	mov	local11, #9
26238     18 30 62 FD | 	getqx	local10
2623c     18 31 82 F6 | 	negc	local10, local10
26240     04 00 90 FD | 	jmp	#LR__3801
26244                 | LR__3800
26244     18 32 06 F6 | 	mov	local11, #24
26248                 | LR__3801
26248                 | LR__3802
26248     08 2C 56 F2 | 	cmps	local08, #8 wc
2624c     01 2C 06 F1 | 	add	local08, #1
26250     60 00 90 3D |  if_ae	jmp	#LR__3803
26254     00 C0 1F FF 
26258     00 12 06 F6 | 	mov	arg01, ##1065353216
2625c     15 15 02 F6 | 	mov	arg02, local07
26260     18 17 02 F6 | 	mov	arg03, local10
26264     4C E3 BF FD | 	call	#__system___float_pow_n
26268     FD 14 02 F6 | 	mov	arg02, result1
2626c     0F 13 02 F6 | 	mov	arg01, local01
26270     60 D5 BF FD | 	call	#__system___float_div
26274     FD 34 02 F6 | 	mov	local12, result1
26278     1A 13 02 F6 | 	mov	arg01, local12
2627c     00 C0 1F FF 
26280     00 14 06 F6 | 	mov	arg02, ##1065353216
26284     01 16 06 F6 | 	mov	arg03, #1
26288     78 D7 BF FD | 	call	#__system___float_cmp
2628c     00 FA 55 F2 | 	cmps	result1, #0 wc
26290     01 30 86 C1 |  if_b	sub	local10, #1
26294     B0 FF 9F CD |  if_b	jmp	#LR__3802
26298     15 15 02 F6 | 	mov	arg02, local07
2629c     1A 13 02 F6 | 	mov	arg01, local12
262a0     01 16 66 F6 | 	neg	arg03, #1
262a4     5C D7 BF FD | 	call	#__system___float_cmp
262a8     00 FA 55 F2 | 	cmps	result1, #0 wc
262ac     01 30 06 31 |  if_ae	add	local10, #1
262b0     94 FF 9F 3D |  if_ae	jmp	#LR__3802
262b4                 | LR__3803
262b4     1A 13 02 F6 | 	mov	arg01, local12
262b8     14 DC BF FD | 	call	#__system____builtin_ilogb
262bc     FD 36 02 F6 | 	mov	local13, result1
262c0     1A 39 02 F6 | 	mov	local14, local12
262c4     17 39 06 F4 | 	bitl	local14, #279
262c8     17 38 26 F4 | 	bith	local14, #23
262cc     1B 39 62 F0 | 	shl	local14, local13
262d0     02 26 0E F2 | 	cmp	local05, #2 wz
262d4     02 24 66 A0 |  if_e	shl	local04, #2
262d8     00 3A 06 F6 | 	mov	local15, #0
262dc     00 24 56 F2 | 	cmps	local04, #0 wc
262e0     10 00 90 3D |  if_ae	jmp	#LR__3804
262e4     18 25 C2 F2 | 	subr	local04, local10
262e8     00 24 56 F2 | 	cmps	local04, #0 wc
262ec     A0 00 90 CD |  if_b	jmp	#LR__3811
262f0     04 00 90 FD | 	jmp	#LR__3805
262f4                 | LR__3804
262f4     01 24 06 F1 | 	add	local04, #1
262f8                 | LR__3805
262f8     19 25 7A F3 | 	fles	local04, local11 wcz
262fc     01 3C 06 F6 | 	mov	local16, #1
26300     97 22 48 FB | 	callpa	#(@LR__3807-@LR__3806)>>2,fcache_load_ptr_
26304                 | LR__3806
26304     00 40 00 FF 
26308     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
2630c     38 00 90 3D |  if_ae	jmp	#LR__3808
26310     01 24 56 F2 | 	cmps	local04, #1 wc
26314     01 24 86 F1 | 	sub	local04, #1
26318     2C 00 90 CD |  if_b	jmp	#LR__3808
2631c     13 3B 02 FD | 	qmul	local15, local05
26320     1C 37 02 F6 | 	mov	local13, local14
26324     17 36 46 F0 | 	shr	local13, #23
26328     17 39 06 F4 | 	bitl	local14, #279
2632c     18 3A 62 FD | 	getqx	local15
26330     13 3D 02 FD | 	qmul	local16, local05
26334     18 3C 62 FD | 	getqx	local16
26338     13 39 02 FD | 	qmul	local14, local05
2633c     1B 3B 02 F1 | 	add	local15, local13
26340     18 38 62 FD | 	getqx	local14
26344     BC FF 9F FD | 	jmp	#LR__3806
26348                 | LR__3807
26348                 | LR__3808
26348     13 2F 02 F6 | 	mov	local09, local05
2634c     17 2E 66 F0 | 	shl	local09, #23
26350     17 37 52 F6 | 	abs	local13, local09 wc
26354     01 36 46 F0 | 	shr	local13, #1
26358     1B 37 82 F6 | 	negc	local13, local13
2635c     1B 39 1A F2 | 	cmp	local14, local13 wcz
26360     20 00 90 1D |  if_a	jmp	#LR__3809
26364     17 26 66 F0 | 	shl	local05, #23
26368     13 37 52 F6 | 	abs	local13, local05 wc
2636c     01 36 46 F0 | 	shr	local13, #1
26370     1B 37 82 F6 | 	negc	local13, local13
26374     1B 39 0A F2 | 	cmp	local14, local13 wz
26378     14 00 90 5D |  if_ne	jmp	#LR__3810
2637c     01 3A CE F7 | 	test	local15, #1 wz
26380     0C 00 90 AD |  if_e	jmp	#LR__3810
26384                 | LR__3809
26384     01 3A 06 F1 | 	add	local15, #1
26388     1E 3B 0A F2 | 	cmp	local15, local16 wz
2638c     01 30 06 A1 |  if_e	add	local10, #1
26390                 | LR__3810
26390                 | LR__3811
26390     10 3B 62 FC | 	wrlong	local15, local02
26394     11 31 62 FC | 	wrlong	local10, local03
26398                 | LR__3812
26398     A7 F0 03 F6 | 	mov	ptra, fp
2639c     B2 00 A0 FD | 	call	#popregs_
263a0                 | __system__disassemble_0498_ret
263a0     2D 00 64 FD | 	ret
263a4                 | 
263a4                 | __system__emitsign_0500
263a4     00 FA 05 F6 | 	mov	result1, #0
263a8     00 14 0E F2 | 	cmp	arg02, #0 wz
263ac     09 01 02 56 |  if_ne	mov	_var01, arg01
263b0     01 12 06 51 |  if_ne	add	arg01, #1
263b4     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
263b8     01 FA 05 56 |  if_ne	mov	result1, #1
263bc     00 16 0E F2 | 	cmp	arg03, #0 wz
263c0     09 61 48 5C |  if_ne	wrbyte	#48, arg01
263c4     01 12 06 51 |  if_ne	add	arg01, #1
263c8     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
263cc     02 FA 05 51 |  if_ne	add	result1, #2
263d0                 | __system__emitsign_0500_ret
263d0     2D 00 64 FD | 	ret
263d4                 | 
263d4                 | __system___gettxfunc
263d4     01 4A 05 F6 | 	mov	COUNT_, #1
263d8     A8 00 A0 FD | 	call	#pushregs_
263dc     A0 F8 BF FD | 	call	#__system____getftab
263e0     FD 1E 0A F6 | 	mov	local01, result1 wz
263e4     10 00 90 AD |  if_e	jmp	#LR__3820
263e8     08 1E 06 F1 | 	add	local01, #8
263ec     0F 15 0A FB | 	rdlong	arg02, local01 wz
263f0     08 1E 86 F1 | 	sub	local01, #8
263f4     08 00 90 5D |  if_ne	jmp	#LR__3821
263f8                 | LR__3820
263f8     00 FA 05 F6 | 	mov	result1, #0
263fc     0C 00 90 FD | 	jmp	#LR__3822
26400                 | LR__3821
26400     00 98 04 FF 
26404     00 1E 46 F5 | 	or	local01, ##154140672
26408     0F FB 01 F6 | 	mov	result1, local01
2640c                 | LR__3822
2640c     A7 F0 03 F6 | 	mov	ptra, fp
26410     B2 00 A0 FD | 	call	#popregs_
26414                 | __system___gettxfunc_ret
26414     2D 00 64 FD | 	ret
26418                 | 
26418                 | __system___getrxfunc
26418     01 4A 05 F6 | 	mov	COUNT_, #1
2641c     A8 00 A0 FD | 	call	#pushregs_
26420     5C F8 BF FD | 	call	#__system____getftab
26424     FD 1E 0A F6 | 	mov	local01, result1 wz
26428     10 00 90 AD |  if_e	jmp	#LR__3830
2642c     08 1E 06 F1 | 	add	local01, #8
26430     0F 15 0A FB | 	rdlong	arg02, local01 wz
26434     08 1E 86 F1 | 	sub	local01, #8
26438     08 00 90 5D |  if_ne	jmp	#LR__3831
2643c                 | LR__3830
2643c     00 FA 05 F6 | 	mov	result1, #0
26440     0C 00 90 FD | 	jmp	#LR__3832
26444                 | LR__3831
26444     00 A0 04 FF 
26448     00 1E 46 F5 | 	or	local01, ##155189248
2644c     0F FB 01 F6 | 	mov	result1, local01
26450                 | LR__3832
26450     A7 F0 03 F6 | 	mov	ptra, fp
26454     B2 00 A0 FD | 	call	#popregs_
26458                 | __system___getrxfunc_ret
26458     2D 00 64 FD | 	ret
2645c                 | 
2645c                 | __system___getiolock_0540
2645c     01 4A 05 F6 | 	mov	COUNT_, #1
26460     A8 00 A0 FD | 	call	#pushregs_
26464     18 F8 BF FD | 	call	#__system____getftab
26468     FD 1E 0A F6 | 	mov	local01, result1 wz
2646c     10 00 90 AD |  if_e	jmp	#LR__3840
26470     08 1E 06 F1 | 	add	local01, #8
26474     0F FB 09 FB | 	rdlong	result1, local01 wz
26478     08 1E 86 F1 | 	sub	local01, #8
2647c     18 00 90 5D |  if_ne	jmp	#LR__3841
26480                 | LR__3840
26480     01 00 00 FF 
26484     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
26488     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2648c     01 00 00 FF 
26490     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
26494     08 00 90 FD | 	jmp	#LR__3842
26498                 | LR__3841
26498     0C 1E 06 F1 | 	add	local01, #12
2649c     0F FB 01 F6 | 	mov	result1, local01
264a0                 | LR__3842
264a0     A7 F0 03 F6 | 	mov	ptra, fp
264a4     B2 00 A0 FD | 	call	#popregs_
264a8                 | __system___getiolock_0540_ret
264a8     2D 00 64 FD | 	ret
264ac                 | 
264ac                 | __system____ScanForChar
264ac     09 01 02 F6 | 	mov	_var01, arg01
264b0     09 03 02 F6 | 	mov	_var02, arg01
264b4     97 06 48 FB | 	callpa	#(@LR__3851-@LR__3850)>>2,fcache_load_ptr_
264b8                 | LR__3850
264b8     01 FB C9 FA | 	rdbyte	result1, _var02 wz
264bc     01 02 06 51 |  if_ne	add	_var02, #1
264c0     F4 FF 9F 5D |  if_ne	jmp	#LR__3850
264c4                 | LR__3851
264c4     09 03 82 F1 | 	sub	_var02, arg01
264c8     01 FB 01 F6 | 	mov	result1, _var02
264cc     FD 12 0A F6 | 	mov	arg01, result1 wz
264d0     00 FA 05 A6 |  if_e	mov	result1, #0
264d4     B8 00 90 AD |  if_e	jmp	#LR__3858
264d8     0A 05 02 F6 | 	mov	_var03, arg02
264dc     07 04 4E F7 | 	zerox	_var03, #7 wz
264e0     00 FA 05 A6 |  if_e	mov	result1, #0
264e4     A8 00 90 AD |  if_e	jmp	#LR__3858
264e8     01 16 16 F2 | 	cmp	arg03, #1 wc
264ec     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
264f0     01 16 06 86 |  if_c_and_z	mov	arg03, #1
264f4     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
264f8     94 00 90 4D |  if_c_and_nz	jmp	#LR__3858
264fc     09 17 1A F2 | 	cmp	arg03, arg01 wcz
26500     10 00 90 ED |  if_be	jmp	#LR__3852
26504     00 18 0E F2 | 	cmp	arg04, #0 wz
26508     00 FA 05 A6 |  if_e	mov	result1, #0
2650c     80 00 90 AD |  if_e	jmp	#LR__3858
26510     09 17 02 F6 | 	mov	arg03, arg01
26514                 | LR__3852
26514     01 16 86 F1 | 	sub	arg03, #1
26518     00 18 0E F2 | 	cmp	arg04, #0 wz
2651c     38 00 90 5D |  if_ne	jmp	#LR__3854
26520     0B 07 02 F6 | 	mov	_var04, arg03
26524     09 09 02 F6 | 	mov	_var05, arg01
26528                 | LR__3853
26528     04 07 12 F2 | 	cmp	_var04, _var05 wc
2652c     5C 00 90 3D |  if_ae	jmp	#LR__3857
26530     03 05 02 F6 | 	mov	_var03, _var04
26534     00 05 02 F1 | 	add	_var03, _var01
26538     02 05 C2 FA | 	rdbyte	_var03, _var03
2653c     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
26540     0C 05 0A F2 | 	cmp	_var03, arg04 wz
26544     01 06 06 A1 |  if_e	add	_var04, #1
26548     03 FB 01 A6 |  if_e	mov	result1, _var04
2654c     40 00 90 AD |  if_e	jmp	#LR__3858
26550     01 06 06 F1 | 	add	_var04, #1
26554     D0 FF 9F FD | 	jmp	#LR__3853
26558                 | LR__3854
26558     0B 07 02 F6 | 	mov	_var04, arg03
2655c                 | LR__3855
2655c     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
26560     28 00 90 1D |  if_a	jmp	#LR__3856
26564     03 09 02 F6 | 	mov	_var05, _var04
26568     00 09 02 F1 | 	add	_var05, _var01
2656c     04 05 C2 FA | 	rdbyte	_var03, _var05
26570     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
26574     04 05 0A F2 | 	cmp	_var03, _var05 wz
26578     01 06 06 A1 |  if_e	add	_var04, #1
2657c     03 FB 01 A6 |  if_e	mov	result1, _var04
26580     0C 00 90 AD |  if_e	jmp	#LR__3858
26584     01 06 86 F1 | 	sub	_var04, #1
26588     D0 FF 9F FD | 	jmp	#LR__3855
2658c                 | LR__3856
2658c                 | LR__3857
2658c     00 FA 05 F6 | 	mov	result1, #0
26590                 | LR__3858
26590                 | __system____ScanForChar_ret
26590     2D 00 64 FD | 	ret
26594                 | 
26594                 | __system___basic_dir
26594     05 4A 05 F6 | 	mov	COUNT_, #5
26598     A8 00 A0 FD | 	call	#pushregs_
2659c     4C F0 07 F1 | 	add	ptra, #76
265a0     04 4E 05 F1 | 	add	fp, #4
265a4     A7 12 62 FC | 	wrlong	arg01, fp
265a8     04 4E 05 F1 | 	add	fp, #4
265ac     A7 14 62 FC | 	wrlong	arg02, fp
265b0     04 4E 85 F1 | 	sub	fp, #4
265b4     A7 14 0A FB | 	rdlong	arg02, fp wz
265b8     04 4E 85 F1 | 	sub	fp, #4
265bc     04 4E 05 51 |  if_ne	add	fp, #4
265c0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
265c4     04 4E 85 51 |  if_ne	sub	fp, #4
265c8     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
265cc     70 00 90 AD |  if_e	jmp	#LR__3860
265d0     03 00 00 FF 
265d4     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
265d8     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
265dc     03 00 00 FF 
265e0     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
265e4     03 00 00 5F 
265e8     28 E7 05 51 |  if_ne	add	ptr___system__dat__, ##1832
265ec     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
265f0     03 00 00 5F 
265f4     28 E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
265f8     D8 E9 BF 5D |  if_ne	call	#__system__closedir
265fc     81 01 00 FF 
26600     AC 12 06 F6 | 	mov	arg01, ##@LR__5028
26604     E0 E8 BF FD | 	call	#__system__opendir
26608     03 00 00 FF 
2660c     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
26610     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
26614     08 4E 05 F1 | 	add	fp, #8
26618     A7 20 02 FB | 	rdlong	local02, fp
2661c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26620     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
26624     04 4E 85 F1 | 	sub	fp, #4
26628     A7 20 02 FB | 	rdlong	local02, fp
2662c     04 4E 85 F1 | 	sub	fp, #4
26630     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26634     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
26638     03 00 00 FF 
2663c     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
26640                 | LR__3860
26640     03 00 00 FF 
26644     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
26648     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2664c     03 00 00 FF 
26650     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
26654     81 01 00 AF 
26658     AE FA 05 A6 |  if_e	mov	result1, ##@LR__5029
2665c     84 02 90 AD |  if_e	jmp	#LR__3873
26660                 | LR__3861
26660     03 00 00 FF 
26664     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
26668     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2666c     03 00 00 FF 
26670     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
26674     D0 E9 BF FD | 	call	#__system__readdir
26678     0C 4E 05 F1 | 	add	fp, #12
2667c     A7 FA 61 FC | 	wrlong	result1, fp
26680     0C 4E 85 F1 | 	sub	fp, #12
26684     00 FA 0D F2 | 	cmp	result1, #0 wz
26688     38 00 90 5D |  if_ne	jmp	#LR__3862
2668c     03 00 00 FF 
26690     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
26694     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
26698     03 00 00 FF 
2669c     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
266a0     30 E9 BF FD | 	call	#__system__closedir
266a4     03 00 00 FF 
266a8     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
266ac     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
266b0     03 00 00 FF 
266b4     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
266b8     81 01 00 FF 
266bc     B0 FA 05 F6 | 	mov	result1, ##@LR__5030
266c0     20 02 90 FD | 	jmp	#LR__3873
266c4                 | LR__3862
266c4     0C 4E 05 F1 | 	add	fp, #12
266c8     A7 12 02 FB | 	rdlong	arg01, fp
266cc     0C 4E 85 F1 | 	sub	fp, #12
266d0     03 00 00 FF 
266d4     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
266d8     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
266dc     03 00 00 FF 
266e0     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
266e4     10 09 B0 FD | 	call	#__system___pat_match
266e8     00 FA 0D F2 | 	cmp	result1, #0 wz
266ec     70 FF 9F AD |  if_e	jmp	#LR__3861
266f0     03 00 00 FF 
266f4     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
266f8     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
266fc     03 00 00 FF 
26700     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
26704     78 01 90 AD |  if_e	jmp	#LR__3869
26708     0C 4E 05 F1 | 	add	fp, #12
2670c     A7 12 02 FB | 	rdlong	arg01, fp
26710     04 4E 05 F1 | 	add	fp, #4
26714     A7 14 02 F6 | 	mov	arg02, fp
26718     10 4E 85 F1 | 	sub	fp, #16
2671c     2C F2 BF FD | 	call	#__system__stat
26720     40 4E 05 F1 | 	add	fp, #64
26724     A7 FA 61 FC | 	wrlong	result1, fp
26728     40 4E 85 F1 | 	sub	fp, #64
2672c     00 FA 0D F2 | 	cmp	result1, #0 wz
26730     81 01 00 5F 
26734     B2 FA 05 56 |  if_ne	mov	result1, ##@LR__5031
26738     A8 01 90 5D |  if_ne	jmp	#LR__3873
2673c     18 4E 05 F1 | 	add	fp, #24
26740     A7 20 02 FB | 	rdlong	local02, fp
26744     78 00 00 FF 
26748     00 20 06 F5 | 	and	local02, ##61440
2674c     2C 4E 05 F1 | 	add	fp, #44
26750     A7 20 62 FC | 	wrlong	local02, fp
26754     38 4E 85 F1 | 	sub	fp, #56
26758     A7 20 02 FB | 	rdlong	local02, fp
2675c     0C 4E 85 F1 | 	sub	fp, #12
26760     10 21 C2 FA | 	rdbyte	local02, local02
26764     2E 20 0E F2 | 	cmp	local02, #46 wz
26768     08 4E 05 A1 |  if_e	add	fp, #8
2676c     A7 04 68 AC |  if_e	wrlong	#2, fp
26770     08 4E C5 F3 | 	sumz	fp, #8
26774     A7 00 68 5C |  if_ne	wrlong	#0, fp
26778     08 4E 85 51 |  if_ne	sub	fp, #8
2677c     44 4E 05 F1 | 	add	fp, #68
26780     A7 20 02 FB | 	rdlong	local02, fp
26784     44 4E 85 F1 | 	sub	fp, #68
26788     08 00 00 FF 
2678c     00 20 0E F2 | 	cmp	local02, ##4096 wz
26790     18 00 90 5D |  if_ne	jmp	#LR__3863
26794     08 4E 05 F1 | 	add	fp, #8
26798     A7 20 02 FB | 	rdlong	local02, fp
2679c     10 20 46 F5 | 	or	local02, #16
267a0     A7 20 62 FC | 	wrlong	local02, fp
267a4     08 4E 85 F1 | 	sub	fp, #8
267a8     AC 00 90 FD | 	jmp	#LR__3868
267ac                 | LR__3863
267ac     44 4E 05 F1 | 	add	fp, #68
267b0     A7 20 02 FB | 	rdlong	local02, fp
267b4     44 4E 85 F1 | 	sub	fp, #68
267b8     10 00 00 FF 
267bc     00 20 0E F2 | 	cmp	local02, ##8192 wz
267c0     44 4E 05 51 |  if_ne	add	fp, #68
267c4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
267c8     44 4E 85 51 |  if_ne	sub	fp, #68
267cc     18 00 00 5F 
267d0     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
267d4     44 4E 05 51 |  if_ne	add	fp, #68
267d8     0F 23 02 56 |  if_ne	mov	local03, local01
267dc     44 4E 85 51 |  if_ne	sub	fp, #68
267e0     20 00 00 5F 
267e4     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
267e8     18 00 90 5D |  if_ne	jmp	#LR__3864
267ec     08 4E 05 F1 | 	add	fp, #8
267f0     A7 20 02 FB | 	rdlong	local02, fp
267f4     04 20 46 F5 | 	or	local02, #4
267f8     A7 20 62 FC | 	wrlong	local02, fp
267fc     08 4E 85 F1 | 	sub	fp, #8
26800     54 00 90 FD | 	jmp	#LR__3867
26804                 | LR__3864
26804     18 4E 05 F1 | 	add	fp, #24
26808     A7 20 02 FB | 	rdlong	local02, fp
2680c     18 4E 85 F1 | 	sub	fp, #24
26810     92 20 CE F7 | 	test	local02, #146 wz
26814     18 00 90 5D |  if_ne	jmp	#LR__3865
26818     08 4E 05 F1 | 	add	fp, #8
2681c     A7 20 02 FB | 	rdlong	local02, fp
26820     01 20 46 F5 | 	or	local02, #1
26824     A7 20 62 FC | 	wrlong	local02, fp
26828     08 4E 85 F1 | 	sub	fp, #8
2682c     28 00 90 FD | 	jmp	#LR__3866
26830                 | LR__3865
26830     44 4E 05 F1 | 	add	fp, #68
26834     A7 24 02 FB | 	rdlong	local04, fp
26838     44 4E 85 F1 | 	sub	fp, #68
2683c     08 00 00 FF 
26840     00 24 0E F2 | 	cmp	local04, ##4096 wz
26844     08 4E 05 51 |  if_ne	add	fp, #8
26848     A7 24 02 5B |  if_ne	rdlong	local04, fp
2684c     20 24 46 55 |  if_ne	or	local04, #32
26850     A7 24 62 5C |  if_ne	wrlong	local04, fp
26854     08 4E 85 51 |  if_ne	sub	fp, #8
26858                 | LR__3866
26858                 | LR__3867
26858                 | LR__3868
26858     08 4E 05 F1 | 	add	fp, #8
2685c     A7 24 02 FB | 	rdlong	local04, fp
26860     08 4E 85 F1 | 	sub	fp, #8
26864     03 00 00 FF 
26868     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2686c     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
26870     03 00 00 FF 
26874     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
26878     0F 25 CA F7 | 	test	local04, local01 wz
2687c     E0 FD 9F AD |  if_e	jmp	#LR__3861
26880                 | LR__3869
26880     0C 4E 05 F1 | 	add	fp, #12
26884     A7 12 02 FB | 	rdlong	arg01, fp
26888     0C 4E 85 F1 | 	sub	fp, #12
2688c     09 27 02 F6 | 	mov	local05, arg01
26890     97 06 48 FB | 	callpa	#(@LR__3871-@LR__3870)>>2,fcache_load_ptr_
26894                 | LR__3870
26894     13 FB C9 FA | 	rdbyte	result1, local05 wz
26898     01 26 06 51 |  if_ne	add	local05, #1
2689c     F4 FF 9F 5D |  if_ne	jmp	#LR__3870
268a0                 | LR__3871
268a0     13 13 C2 F2 | 	subr	arg01, local05
268a4     01 12 06 F1 | 	add	arg01, #1
268a8     28 E0 BF FD | 	call	#__system___gc_alloc_managed
268ac     48 4E 05 F1 | 	add	fp, #72
268b0     A7 FA 61 FC | 	wrlong	result1, fp
268b4     48 4E 85 F1 | 	sub	fp, #72
268b8     00 FA 0D F2 | 	cmp	result1, #0 wz
268bc     18 00 90 AD |  if_e	jmp	#LR__3872
268c0     48 4E 05 F1 | 	add	fp, #72
268c4     A7 12 02 FB | 	rdlong	arg01, fp
268c8     3C 4E 85 F1 | 	sub	fp, #60
268cc     A7 14 02 FB | 	rdlong	arg02, fp
268d0     0C 4E 85 F1 | 	sub	fp, #12
268d4     F8 A0 BF FD | 	call	#__system____builtin_strcpy
268d8                 | LR__3872
268d8     48 4E 05 F1 | 	add	fp, #72
268dc     A7 FA 01 FB | 	rdlong	result1, fp
268e0     48 4E 85 F1 | 	sub	fp, #72
268e4                 | LR__3873
268e4     A7 F0 03 F6 | 	mov	ptra, fp
268e8     B2 00 A0 FD | 	call	#popregs_
268ec                 | __system___basic_dir_ret
268ec     2D 00 64 FD | 	ret
268f0                 | 
268f0                 | __system__pack_0606
268f0     09 01 02 F6 | 	mov	_var01, arg01
268f4     7F 16 06 F1 | 	add	arg03, #127
268f8     04 18 CE F7 | 	test	arg04, #4 wz
268fc     10 00 90 AD |  if_e	jmp	#LR__3880
26900     00 00 0E F2 | 	cmp	_var01, #0 wz
26904     16 00 C6 A9 |  if_e	decod	_var01, #22
26908     F7 00 26 F4 | 	bith	_var01, #247
2690c     B4 00 90 FD | 	jmp	#LR__3889
26910                 | LR__3880
26910     02 18 CE F7 | 	test	arg04, #2 wz
26914     00 C0 3F 5F 
26918     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
2691c     00 14 06 56 |  if_ne	mov	arg02, #0
26920     A0 00 90 5D |  if_ne	jmp	#LR__3888
26924     08 18 CE F7 | 	test	arg04, #8 wz
26928     00 00 06 56 |  if_ne	mov	_var01, #0
2692c     94 00 90 5D |  if_ne	jmp	#LR__3887
26930     FF 16 56 F2 | 	cmps	arg03, #255 wc
26934     00 C0 3F 3F 
26938     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
2693c     00 14 06 36 |  if_ae	mov	arg02, #0
26940     80 00 90 3D |  if_ae	jmp	#LR__3886
26944     01 16 56 F2 | 	cmps	arg03, #1 wc
26948     6C 00 90 3D |  if_ae	jmp	#LR__3884
2694c     01 14 46 F0 | 	shr	arg02, #1
26950     00 03 02 F6 | 	mov	_var02, _var01
26954     01 02 06 F5 | 	and	_var02, #1
26958     1F 02 66 F0 | 	shl	_var02, #31
2695c     01 15 42 F5 | 	or	arg02, _var02
26960     01 00 46 F0 | 	shr	_var01, #1
26964     97 1E 48 FB | 	callpa	#(@LR__3882-@LR__3881)>>2,fcache_load_ptr_
26968                 | LR__3881
26968     00 16 56 F2 | 	cmps	arg03, #0 wc
2696c     34 00 90 3D |  if_ae	jmp	#LR__3883
26970     00 00 0E F2 | 	cmp	_var01, #0 wz
26974     2C 00 90 AD |  if_e	jmp	#LR__3883
26978     0A 13 02 F6 | 	mov	arg01, arg02
2697c     01 12 06 F5 | 	and	arg01, #1
26980     01 16 06 F1 | 	add	arg03, #1
26984     01 14 46 F0 | 	shr	arg02, #1
26988     00 03 02 F6 | 	mov	_var02, _var01
2698c     01 02 06 F5 | 	and	_var02, #1
26990     1F 02 66 F0 | 	shl	_var02, #31
26994     01 15 42 F5 | 	or	arg02, _var02
26998     09 15 42 F5 | 	or	arg02, arg01
2699c     01 00 46 F0 | 	shr	_var01, #1
269a0     C4 FF 9F FD | 	jmp	#LR__3881
269a4                 | LR__3882
269a4                 | LR__3883
269a4     00 16 56 F2 | 	cmps	arg03, #0 wc
269a8     18 00 90 3D |  if_ae	jmp	#LR__3885
269ac     00 14 0E F2 | 	cmp	arg02, #0 wz
269b0     6F 14 62 FD | 	wrnz	arg02
269b4     0C 00 90 FD | 	jmp	#LR__3885
269b8                 | LR__3884
269b8     17 01 06 F4 | 	bitl	_var01, #279
269bc     17 16 66 F0 | 	shl	arg03, #23
269c0     0B 01 42 F5 | 	or	_var01, arg03
269c4                 | LR__3885
269c4                 | LR__3886
269c4                 | LR__3887
269c4                 | LR__3888
269c4                 | LR__3889
269c4     01 00 CE F7 | 	test	_var01, #1 wz
269c8     01 14 46 55 |  if_ne	or	arg02, #1
269cc     0A 17 02 F6 | 	mov	arg03, arg02
269d0     00 02 06 F6 | 	mov	_var02, #0
269d4     FF FF 3F FF 
269d8     FF 15 06 F1 | 	add	arg02, ##2147483647
269dc     0B 15 12 F2 | 	cmp	arg02, arg03 wc
269e0     01 02 06 C6 |  if_b	mov	_var02, #1
269e4     01 01 02 F1 | 	add	_var01, _var02
269e8     01 18 CE F7 | 	test	arg04, #1 wz
269ec     1F 00 26 54 |  if_ne	bith	_var01, #31
269f0     00 FB 01 F6 | 	mov	result1, _var01
269f4                 | __system__pack_0606_ret
269f4     2D 00 64 FD | 	ret
269f8                 | 
269f8                 | __system___rxtxioctl_0696
269f8     00 15 0E F2 | 	cmp	arg02, #256 wz
269fc     0C 00 90 AD |  if_e	jmp	#LR__3890
26a00     01 15 0E F2 | 	cmp	arg02, #257 wz
26a04     1C 00 90 AD |  if_e	jmp	#LR__3891
26a08     30 00 90 FD | 	jmp	#LR__3892
26a0c                 | LR__3890
26a0c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26a10     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
26a14     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26a18     0B FB 61 FC | 	wrlong	result1, arg03
26a1c     00 FA 05 F6 | 	mov	result1, #0
26a20     28 00 90 FD | 	jmp	#LR__3893
26a24                 | LR__3891
26a24     0B 13 02 FB | 	rdlong	arg01, arg03
26a28     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26a2c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26a30     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26a34     00 FA 05 F6 | 	mov	result1, #0
26a38     10 00 90 FD | 	jmp	#LR__3893
26a3c                 | LR__3892
26a3c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26a40     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
26a44     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26a48     01 FA 65 F6 | 	neg	result1, #1
26a4c                 | LR__3893
26a4c                 | __system___rxtxioctl_0696_ret
26a4c     2D 00 64 FD | 	ret
26a50                 | 
26a50                 | __system____dummy_flush_0697
26a50     00 FA 05 F6 | 	mov	result1, #0
26a54                 | __system____dummy_flush_0697_ret
26a54     2D 00 64 FD | 	ret
26a58                 | 
26a58                 | __system___vfswrite
26a58     09 4A 05 F6 | 	mov	COUNT_, #9
26a5c     A8 00 A0 FD | 	call	#pushregs_
26a60     09 1F 02 F6 | 	mov	local01, arg01
26a64     0A 21 02 F6 | 	mov	local02, arg02
26a68     0B 23 02 F6 | 	mov	local03, arg03
26a6c     10 25 02 F6 | 	mov	local04, local02
26a70     08 1E 06 F1 | 	add	local01, #8
26a74     0F 13 02 FB | 	rdlong	arg01, local01
26a78     08 1E 86 F1 | 	sub	local01, #8
26a7c     02 12 CE F7 | 	test	arg01, #2 wz
26a80     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26a84     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26a88     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26a8c     01 FA 65 A6 |  if_e	neg	result1, #1
26a90     80 01 90 AD |  if_e	jmp	#LR__3906
26a94     08 1E 06 F1 | 	add	local01, #8
26a98     0F FB 01 FB | 	rdlong	result1, local01
26a9c     08 1E 86 F1 | 	sub	local01, #8
26aa0     40 FA CD F7 | 	test	result1, #64 wz
26aa4     68 00 90 AD |  if_e	jmp	#LR__3901
26aa8     08 1E 06 F1 | 	add	local01, #8
26aac     0F 15 02 FB | 	rdlong	arg02, local01
26ab0     08 1E 86 F1 | 	sub	local01, #8
26ab4     80 14 CE F7 | 	test	arg02, #128 wz
26ab8     54 00 90 AD |  if_e	jmp	#LR__3900
26abc     30 1E 06 F1 | 	add	local01, #48
26ac0     0F 27 02 FB | 	rdlong	local05, local01
26ac4     13 29 02 F6 | 	mov	local06, local05
26ac8     30 1E 86 F1 | 	sub	local01, #48
26acc     13 28 46 F7 | 	zerox	local06, #19
26ad0     14 26 46 F0 | 	shr	local05, #20
26ad4     02 26 66 F0 | 	shl	local05, #2
26ad8     ED 26 02 F1 | 	add	local05, __methods__
26adc     13 27 02 FB | 	rdlong	local05, local05
26ae0     0F 13 02 F6 | 	mov	arg01, local01
26ae4     00 14 06 F6 | 	mov	arg02, #0
26ae8     02 16 06 F6 | 	mov	arg03, #2
26aec     F2 2A 02 F6 | 	mov	local07, objptr
26af0     14 E5 01 F6 | 	mov	objptr, local06
26af4     2D 26 62 FD | 	call	local05
26af8     15 E5 01 F6 | 	mov	objptr, local07
26afc     08 1E 06 F1 | 	add	local01, #8
26b00     0F 2B 02 FB | 	rdlong	local07, local01
26b04     80 2A 26 F5 | 	andn	local07, #128
26b08     0F 2B 62 FC | 	wrlong	local07, local01
26b0c     08 1E 86 F1 | 	sub	local01, #8
26b10                 | LR__3900
26b10                 | LR__3901
26b10     18 1E 06 F1 | 	add	local01, #24
26b14     0F 2B 0A FB | 	rdlong	local07, local01 wz
26b18     18 1E 86 F1 | 	sub	local01, #24
26b1c     80 00 90 AD |  if_e	jmp	#LR__3903
26b20     18 1E 06 F1 | 	add	local01, #24
26b24     0F 27 02 FB | 	rdlong	local05, local01
26b28     13 29 02 F6 | 	mov	local06, local05
26b2c     18 1E 86 F1 | 	sub	local01, #24
26b30     13 28 46 F7 | 	zerox	local06, #19
26b34     14 26 46 F0 | 	shr	local05, #20
26b38     02 26 66 F0 | 	shl	local05, #2
26b3c     ED 26 02 F1 | 	add	local05, __methods__
26b40     13 27 02 FB | 	rdlong	local05, local05
26b44     10 15 02 F6 | 	mov	arg02, local02
26b48     11 17 02 F6 | 	mov	arg03, local03
26b4c     0F 13 02 F6 | 	mov	arg01, local01
26b50     F2 2A 02 F6 | 	mov	local07, objptr
26b54     14 E5 01 F6 | 	mov	objptr, local06
26b58     2D 26 62 FD | 	call	local05
26b5c     15 E5 01 F6 | 	mov	objptr, local07
26b60     FD 2C 02 F6 | 	mov	local08, result1
26b64     00 2C 56 F2 | 	cmps	local08, #0 wc
26b68     2C 00 90 3D |  if_ae	jmp	#LR__3902
26b6c     08 1E 06 F1 | 	add	local01, #8
26b70     0F 2B 02 FB | 	rdlong	local07, local01
26b74     20 2A 46 F5 | 	or	local07, #32
26b78     0F 2B 62 FC | 	wrlong	local07, local01
26b7c     00 2C 4E F2 | 	cmps	local08, #0 wz
26b80     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26b84     F3 2C 62 FC | 	wrlong	local08, ptr___system__dat__
26b88     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26b8c     01 FA 65 56 |  if_ne	neg	result1, #1
26b90     00 FA 05 A6 |  if_e	mov	result1, #0
26b94     7C 00 90 FD | 	jmp	#LR__3906
26b98                 | LR__3902
26b98     16 FB 01 F6 | 	mov	result1, local08
26b9c     74 00 90 FD | 	jmp	#LR__3906
26ba0                 | LR__3903
26ba0     1C 1E 06 F1 | 	add	local01, #28
26ba4     0F 2F 0A FB | 	rdlong	local09, local01 wz
26ba8     1C 1E 86 F1 | 	sub	local01, #28
26bac     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26bb0     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26bb4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26bb8     01 FA 65 A6 |  if_e	neg	result1, #1
26bbc     54 00 90 AD |  if_e	jmp	#LR__3906
26bc0     00 2C 06 F6 | 	mov	local08, #0
26bc4                 | LR__3904
26bc4     01 22 16 F2 | 	cmp	local03, #1 wc
26bc8     44 00 90 CD |  if_b	jmp	#LR__3905
26bcc     17 29 02 F6 | 	mov	local06, local09
26bd0     17 27 02 F6 | 	mov	local05, local09
26bd4     13 28 46 F7 | 	zerox	local06, #19
26bd8     14 26 46 F0 | 	shr	local05, #20
26bdc     02 26 66 F0 | 	shl	local05, #2
26be0     ED 26 02 F1 | 	add	local05, __methods__
26be4     13 27 02 FB | 	rdlong	local05, local05
26be8     12 13 C2 FA | 	rdbyte	arg01, local04
26bec     0F 15 02 F6 | 	mov	arg02, local01
26bf0     F2 2A 02 F6 | 	mov	local07, objptr
26bf4     14 E5 01 F6 | 	mov	objptr, local06
26bf8     01 24 06 F1 | 	add	local04, #1
26bfc     2D 26 62 FD | 	call	local05
26c00     15 E5 01 F6 | 	mov	objptr, local07
26c04     FD 2C 02 F1 | 	add	local08, result1
26c08     01 22 86 F1 | 	sub	local03, #1
26c0c     B4 FF 9F FD | 	jmp	#LR__3904
26c10                 | LR__3905
26c10     16 FB 01 F6 | 	mov	result1, local08
26c14                 | LR__3906
26c14     A7 F0 03 F6 | 	mov	ptra, fp
26c18     B2 00 A0 FD | 	call	#popregs_
26c1c                 | __system___vfswrite_ret
26c1c     2D 00 64 FD | 	ret
26c20                 | 
26c20                 | __system___vfsread
26c20     03 4A 05 F6 | 	mov	COUNT_, #3
26c24     A8 00 A0 FD | 	call	#pushregs_
26c28     28 F0 07 F1 | 	add	ptra, #40
26c2c     04 4E 05 F1 | 	add	fp, #4
26c30     A7 12 62 FC | 	wrlong	arg01, fp
26c34     04 4E 05 F1 | 	add	fp, #4
26c38     A7 14 62 FC | 	wrlong	arg02, fp
26c3c     04 4E 05 F1 | 	add	fp, #4
26c40     A7 16 62 FC | 	wrlong	arg03, fp
26c44     04 4E 85 F1 | 	sub	fp, #4
26c48     A7 FA 01 FB | 	rdlong	result1, fp
26c4c     14 4E 05 F1 | 	add	fp, #20
26c50     A7 FA 61 FC | 	wrlong	result1, fp
26c54     04 4E 05 F1 | 	add	fp, #4
26c58     A7 00 68 FC | 	wrlong	#0, fp
26c5c     1C 4E 85 F1 | 	sub	fp, #28
26c60     A7 12 02 FB | 	rdlong	arg01, fp
26c64     04 4E 85 F1 | 	sub	fp, #4
26c68     08 12 06 F1 | 	add	arg01, #8
26c6c     09 FB 01 FB | 	rdlong	result1, arg01
26c70     01 FA CD F7 | 	test	result1, #1 wz
26c74     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26c78     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26c7c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26c80     01 FA 65 A6 |  if_e	neg	result1, #1
26c84     74 02 90 AD |  if_e	jmp	#LR__3916
26c88     04 4E 05 F1 | 	add	fp, #4
26c8c     A7 12 02 FB | 	rdlong	arg01, fp
26c90     04 4E 85 F1 | 	sub	fp, #4
26c94     14 12 06 F1 | 	add	arg01, #20
26c98     09 FB 09 FB | 	rdlong	result1, arg01 wz
26c9c     B8 00 90 AD |  if_e	jmp	#LR__3911
26ca0     04 4E 05 F1 | 	add	fp, #4
26ca4     A7 12 02 FB | 	rdlong	arg01, fp
26ca8     09 17 02 F6 | 	mov	arg03, arg01
26cac     14 16 06 F1 | 	add	arg03, #20
26cb0     0B 1F 02 FB | 	rdlong	local01, arg03
26cb4     0F 21 02 F6 | 	mov	local02, local01
26cb8     13 1E 46 F7 | 	zerox	local01, #19
26cbc     14 20 46 F0 | 	shr	local02, #20
26cc0     02 20 66 F0 | 	shl	local02, #2
26cc4     ED 20 02 F1 | 	add	local02, __methods__
26cc8     10 21 02 FB | 	rdlong	local02, local02
26ccc     04 4E 05 F1 | 	add	fp, #4
26cd0     A7 14 02 FB | 	rdlong	arg02, fp
26cd4     04 4E 05 F1 | 	add	fp, #4
26cd8     A7 16 02 FB | 	rdlong	arg03, fp
26cdc     0C 4E 85 F1 | 	sub	fp, #12
26ce0     F2 22 02 F6 | 	mov	local03, objptr
26ce4     0F E5 01 F6 | 	mov	objptr, local01
26ce8     2D 20 62 FD | 	call	local02
26cec     11 E5 01 F6 | 	mov	objptr, local03
26cf0     10 4E 05 F1 | 	add	fp, #16
26cf4     A7 FA 61 FC | 	wrlong	result1, fp
26cf8     10 4E 85 F1 | 	sub	fp, #16
26cfc     00 FA 55 F2 | 	cmps	result1, #0 wc
26d00     44 00 90 3D |  if_ae	jmp	#LR__3910
26d04     04 4E 05 F1 | 	add	fp, #4
26d08     A7 22 02 FB | 	rdlong	local03, fp
26d0c     11 1F 02 F6 | 	mov	local01, local03
26d10     08 22 06 F1 | 	add	local03, #8
26d14     11 21 02 FB | 	rdlong	local02, local03
26d18     20 20 46 F5 | 	or	local02, #32
26d1c     08 1E 06 F1 | 	add	local01, #8
26d20     0F 21 62 FC | 	wrlong	local02, local01
26d24     0C 4E 05 F1 | 	add	fp, #12
26d28     A7 12 0A FB | 	rdlong	arg01, fp wz
26d2c     10 4E 85 F1 | 	sub	fp, #16
26d30     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26d34     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26d38     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26d3c     01 FA 65 56 |  if_ne	neg	result1, #1
26d40     00 FA 05 A6 |  if_e	mov	result1, #0
26d44     B4 01 90 FD | 	jmp	#LR__3916
26d48                 | LR__3910
26d48     10 4E 05 F1 | 	add	fp, #16
26d4c     A7 FA 01 FB | 	rdlong	result1, fp
26d50     10 4E 85 F1 | 	sub	fp, #16
26d54     A4 01 90 FD | 	jmp	#LR__3916
26d58                 | LR__3911
26d58     04 4E 05 F1 | 	add	fp, #4
26d5c     A7 12 02 FB | 	rdlong	arg01, fp
26d60     20 12 06 F1 | 	add	arg01, #32
26d64     09 13 0A FB | 	rdlong	arg01, arg01 wz
26d68     14 4E 05 F1 | 	add	fp, #20
26d6c     A7 12 62 FC | 	wrlong	arg01, fp
26d70     18 4E 85 F1 | 	sub	fp, #24
26d74     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26d78     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26d7c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26d80     01 FA 65 A6 |  if_e	neg	result1, #1
26d84     74 01 90 AD |  if_e	jmp	#LR__3916
26d88     04 4E 05 F1 | 	add	fp, #4
26d8c     A7 22 02 FB | 	rdlong	local03, fp
26d90     04 4E 85 F1 | 	sub	fp, #4
26d94     28 22 06 F1 | 	add	local03, #40
26d98     11 21 0A FB | 	rdlong	local02, local03 wz
26d9c     7C 00 90 AD |  if_e	jmp	#LR__3913
26da0     04 4E 05 F1 | 	add	fp, #4
26da4     A7 12 02 FB | 	rdlong	arg01, fp
26da8     09 23 02 F6 | 	mov	local03, arg01
26dac     28 22 06 F1 | 	add	local03, #40
26db0     11 1F 02 FB | 	rdlong	local01, local03
26db4     0F 21 02 F6 | 	mov	local02, local01
26db8     13 1E 46 F7 | 	zerox	local01, #19
26dbc     14 20 46 F0 | 	shr	local02, #20
26dc0     02 20 66 F0 | 	shl	local02, #2
26dc4     ED 20 02 F1 | 	add	local02, __methods__
26dc8     10 21 02 FB | 	rdlong	local02, local02
26dcc     20 4E 05 F1 | 	add	fp, #32
26dd0     A7 16 02 F6 | 	mov	arg03, fp
26dd4     24 4E 85 F1 | 	sub	fp, #36
26dd8     00 15 06 F6 | 	mov	arg02, #256
26ddc     F2 22 02 F6 | 	mov	local03, objptr
26de0     0F E5 01 F6 | 	mov	objptr, local01
26de4     2D 20 62 FD | 	call	local02
26de8     11 E5 01 F6 | 	mov	objptr, local03
26dec     10 4E 05 F1 | 	add	fp, #16
26df0     A7 FA 61 FC | 	wrlong	result1, fp
26df4     00 FA 4D F2 | 	cmps	result1, #0 wz
26df8     10 4E 85 F1 | 	sub	fp, #16
26dfc     1C 00 90 5D |  if_ne	jmp	#LR__3912
26e00     24 4E 05 F1 | 	add	fp, #36
26e04     A7 20 02 FB | 	rdlong	local02, fp
26e08     24 4E 85 F1 | 	sub	fp, #36
26e0c     02 20 CE F7 | 	test	local02, #2 wz
26e10     20 4E 05 51 |  if_ne	add	fp, #32
26e14     A7 02 68 5C |  if_ne	wrlong	#1, fp
26e18     20 4E 85 51 |  if_ne	sub	fp, #32
26e1c                 | LR__3912
26e1c                 | LR__3913
26e1c     10 4E 05 F1 | 	add	fp, #16
26e20     A7 00 68 FC | 	wrlong	#0, fp
26e24     10 4E 85 F1 | 	sub	fp, #16
26e28                 | LR__3914
26e28     0C 4E 05 F1 | 	add	fp, #12
26e2c     A7 22 02 FB | 	rdlong	local03, fp
26e30     0C 4E 85 F1 | 	sub	fp, #12
26e34     01 22 16 F2 | 	cmp	local03, #1 wc
26e38     B4 00 90 CD |  if_b	jmp	#LR__3915
26e3c     18 4E 05 F1 | 	add	fp, #24
26e40     A7 20 02 FB | 	rdlong	local02, fp
26e44     10 23 02 F6 | 	mov	local03, local02
26e48     13 22 46 F7 | 	zerox	local03, #19
26e4c     14 20 46 F0 | 	shr	local02, #20
26e50     02 20 66 F0 | 	shl	local02, #2
26e54     ED 20 02 F1 | 	add	local02, __methods__
26e58     10 21 02 FB | 	rdlong	local02, local02
26e5c     14 4E 85 F1 | 	sub	fp, #20
26e60     A7 12 02 FB | 	rdlong	arg01, fp
26e64     04 4E 85 F1 | 	sub	fp, #4
26e68     F2 1E 02 F6 | 	mov	local01, objptr
26e6c     11 E5 01 F6 | 	mov	objptr, local03
26e70     2D 20 62 FD | 	call	local02
26e74     0F E5 01 F6 | 	mov	objptr, local01
26e78     14 4E 05 F1 | 	add	fp, #20
26e7c     A7 FA 61 FC | 	wrlong	result1, fp
26e80     14 4E 85 F1 | 	sub	fp, #20
26e84     00 FA 55 F2 | 	cmps	result1, #0 wc
26e88     64 00 90 CD |  if_b	jmp	#LR__3915
26e8c     1C 4E 05 F1 | 	add	fp, #28
26e90     A7 22 02 FB | 	rdlong	local03, fp
26e94     11 21 02 F6 | 	mov	local02, local03
26e98     01 20 06 F1 | 	add	local02, #1
26e9c     A7 20 62 FC | 	wrlong	local02, fp
26ea0     08 4E 85 F1 | 	sub	fp, #8
26ea4     A7 20 02 FB | 	rdlong	local02, fp
26ea8     11 21 42 FC | 	wrbyte	local02, local03
26eac     04 4E 85 F1 | 	sub	fp, #4
26eb0     A7 22 02 FB | 	rdlong	local03, fp
26eb4     01 22 06 F1 | 	add	local03, #1
26eb8     A7 22 62 FC | 	wrlong	local03, fp
26ebc     04 4E 85 F1 | 	sub	fp, #4
26ec0     A7 22 02 FB | 	rdlong	local03, fp
26ec4     01 22 86 F1 | 	sub	local03, #1
26ec8     A7 22 62 FC | 	wrlong	local03, fp
26ecc     14 4E 05 F1 | 	add	fp, #20
26ed0     A7 22 0A FB | 	rdlong	local03, fp wz
26ed4     20 4E 85 F1 | 	sub	fp, #32
26ed8     4C FF 9F AD |  if_e	jmp	#LR__3914
26edc     14 4E 05 F1 | 	add	fp, #20
26ee0     A7 20 02 FB | 	rdlong	local02, fp
26ee4     14 4E 85 F1 | 	sub	fp, #20
26ee8     0A 20 0E F2 | 	cmp	local02, #10 wz
26eec     38 FF 9F 5D |  if_ne	jmp	#LR__3914
26ef0                 | LR__3915
26ef0     10 4E 05 F1 | 	add	fp, #16
26ef4     A7 FA 01 FB | 	rdlong	result1, fp
26ef8     10 4E 85 F1 | 	sub	fp, #16
26efc                 | LR__3916
26efc     A7 F0 03 F6 | 	mov	ptra, fp
26f00     B2 00 A0 FD | 	call	#popregs_
26f04                 | __system___vfsread_ret
26f04     2D 00 64 FD | 	ret
26f08                 | 
26f08                 | __system____default_filbuf
26f08     04 4A 05 F6 | 	mov	COUNT_, #4
26f0c     A8 00 A0 FD | 	call	#pushregs_
26f10     09 1F 02 F6 | 	mov	local01, arg01
26f14     0F 21 02 FB | 	rdlong	local02, local01
26f18     0C 20 06 F1 | 	add	local02, #12
26f1c     10 FB 09 FB | 	rdlong	result1, local02 wz
26f20     0C 20 86 F1 | 	sub	local02, #12
26f24     20 00 90 5D |  if_ne	jmp	#LR__3920
26f28     14 20 06 F1 | 	add	local02, #20
26f2c     10 FB 01 F6 | 	mov	result1, local02
26f30     04 20 86 F1 | 	sub	local02, #4
26f34     10 FB 61 FC | 	wrlong	result1, local02
26f38     04 20 86 F1 | 	sub	local02, #4
26f3c     02 00 80 FF 
26f40     10 01 68 FC | 	wrlong	##1024, local02
26f44     0C 20 86 F1 | 	sub	local02, #12
26f48                 | LR__3920
26f48     14 1E 06 F1 | 	add	local01, #20
26f4c     0F 23 02 FB | 	rdlong	local03, local01
26f50     11 25 02 F6 | 	mov	local04, local03
26f54     14 1E 86 F1 | 	sub	local01, #20
26f58     13 24 46 F7 | 	zerox	local04, #19
26f5c     14 22 46 F0 | 	shr	local03, #20
26f60     02 22 66 F0 | 	shl	local03, #2
26f64     ED 22 02 F1 | 	add	local03, __methods__
26f68     11 23 02 FB | 	rdlong	local03, local03
26f6c     10 20 06 F1 | 	add	local02, #16
26f70     10 15 02 FB | 	rdlong	arg02, local02
26f74     04 20 86 F1 | 	sub	local02, #4
26f78     10 17 02 FB | 	rdlong	arg03, local02
26f7c     0C 20 86 F1 | 	sub	local02, #12
26f80     0F 13 02 F6 | 	mov	arg01, local01
26f84     F2 1E 02 F6 | 	mov	local01, objptr
26f88     12 E5 01 F6 | 	mov	objptr, local04
26f8c     2D 22 62 FD | 	call	local03
26f90     0F E5 01 F6 | 	mov	objptr, local01
26f94     FD 24 02 F6 | 	mov	local04, result1
26f98     00 24 56 F2 | 	cmps	local04, #0 wc
26f9c     01 FA 65 C6 |  if_b	neg	result1, #1
26fa0     28 00 90 CD |  if_b	jmp	#LR__3921
26fa4     10 25 62 FC | 	wrlong	local04, local02
26fa8     10 20 06 F1 | 	add	local02, #16
26fac     10 23 02 FB | 	rdlong	local03, local02
26fb0     0C 20 86 F1 | 	sub	local02, #12
26fb4     10 23 62 FC | 	wrlong	local03, local02
26fb8     04 20 06 F1 | 	add	local02, #4
26fbc     10 23 02 FB | 	rdlong	local03, local02
26fc0     01 22 46 F5 | 	or	local03, #1
26fc4     10 23 62 FC | 	wrlong	local03, local02
26fc8     12 FB 01 F6 | 	mov	result1, local04
26fcc                 | LR__3921
26fcc     A7 F0 03 F6 | 	mov	ptra, fp
26fd0     B2 00 A0 FD | 	call	#popregs_
26fd4                 | __system____default_filbuf_ret
26fd4     2D 00 64 FD | 	ret
26fd8                 | 
26fd8                 | __system__getlower_1082
26fd8     41 12 56 F2 | 	cmps	arg01, #65 wc
26fdc     10 00 90 CD |  if_b	jmp	#LR__3930
26fe0     5B 12 56 F2 | 	cmps	arg01, #91 wc
26fe4     09 FB 01 C6 |  if_b	mov	result1, arg01
26fe8     20 FA 05 C1 |  if_b	add	result1, #32
26fec     04 00 90 CD |  if_b	jmp	#__system__getlower_1082_ret
26ff0                 | LR__3930
26ff0     09 FB 01 F6 | 	mov	result1, arg01
26ff4                 | __system__getlower_1082_ret
26ff4     2D 00 64 FD | 	ret
26ff8                 | 
26ff8                 | __system___pat_match
26ff8     08 4A 05 F6 | 	mov	COUNT_, #8
26ffc     A8 00 A0 FD | 	call	#pushregs_
27000     09 1F 02 F6 | 	mov	local01, arg01
27004                 | LR__3940
27004     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
27008     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
2700c     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
27010     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
27014     2C 00 90 AD |  if_e	jmp	#LR__3941
27018     0A 13 C2 FA | 	rdbyte	arg01, arg02
2701c     B8 FF BF FD | 	call	#__system__getlower_1082
27020     FD 22 02 F6 | 	mov	local03, result1
27024     0F 13 C2 FA | 	rdbyte	arg01, local01
27028     AC FF BF FD | 	call	#__system__getlower_1082
2702c     11 FB 09 F2 | 	cmp	result1, local03 wz
27030     00 FA 05 56 |  if_ne	mov	result1, #0
27034     FC 00 90 5D |  if_ne	jmp	#LR__3949
27038     01 1E 06 F1 | 	add	local01, #1
2703c     01 14 06 F1 | 	add	arg02, #1
27040     C0 FF 9F FD | 	jmp	#LR__3940
27044                 | LR__3941
27044     0A 23 C2 FA | 	rdbyte	local03, arg02
27048     2A 22 0E F2 | 	cmp	local03, #42 wz
2704c     D4 00 90 5D |  if_ne	jmp	#LR__3948
27050     01 14 06 F1 | 	add	arg02, #1
27054     0A 21 C2 FA | 	rdbyte	local02, arg02
27058     01 14 86 F1 | 	sub	arg02, #1
2705c     2E 20 0E F2 | 	cmp	local02, #46 wz
27060     28 00 90 5D |  if_ne	jmp	#LR__3942
27064     02 14 06 F1 | 	add	arg02, #2
27068     0A 21 C2 FA | 	rdbyte	local02, arg02
2706c     02 14 86 F1 | 	sub	arg02, #2
27070     2A 20 0E F2 | 	cmp	local02, #42 wz
27074     03 14 06 A1 |  if_e	add	arg02, #3
27078     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
2707c     03 14 86 A1 |  if_e	sub	arg02, #3
27080     12 27 0A A6 |  if_e	mov	local05, local04 wz
27084     01 FA 05 A6 |  if_e	mov	result1, #1
27088     A8 00 90 AD |  if_e	jmp	#LR__3949
2708c                 | LR__3942
2708c     01 14 06 F1 | 	add	arg02, #1
27090     00 28 06 F6 | 	mov	local06, #0
27094     97 1E 48 FB | 	callpa	#(@LR__3945-@LR__3943)>>2,fcache_load_ptr_
27098                 | LR__3943
27098     14 2B 02 F6 | 	mov	local07, local06
2709c     0A 2B 02 F1 | 	add	local07, arg02
270a0     15 2B CA FA | 	rdbyte	local07, local07 wz
270a4     14 27 02 56 |  if_ne	mov	local05, local06
270a8     01 26 06 51 |  if_ne	add	local05, #1
270ac     13 29 02 56 |  if_ne	mov	local06, local05
270b0     E4 FF 9F 5D |  if_ne	jmp	#LR__3943
270b4     00 2C 06 F6 | 	mov	local08, #0
270b8                 | LR__3944
270b8     16 2B 02 F6 | 	mov	local07, local08
270bc     0F 2B 02 F1 | 	add	local07, local01
270c0     15 2B CA FA | 	rdbyte	local07, local07 wz
270c4     16 27 02 56 |  if_ne	mov	local05, local08
270c8     01 26 06 51 |  if_ne	add	local05, #1
270cc     13 2D 02 56 |  if_ne	mov	local08, local05
270d0     E4 FF 9F 5D |  if_ne	jmp	#LR__3944
270d4                 | LR__3945
270d4     14 2D 52 F2 | 	cmps	local08, local06 wc
270d8     00 FA 05 C6 |  if_b	mov	result1, #0
270dc     54 00 90 CD |  if_b	jmp	#LR__3949
270e0     16 21 02 F6 | 	mov	local02, local08
270e4     14 21 82 F1 | 	sub	local02, local06
270e8     10 1F 02 F1 | 	add	local01, local02
270ec                 | LR__3946
270ec     01 28 56 F2 | 	cmps	local06, #1 wc
270f0     30 00 90 CD |  if_b	jmp	#LR__3947
270f4     0F 13 C2 FA | 	rdbyte	arg01, local01
270f8     DC FE BF FD | 	call	#__system__getlower_1082
270fc     FD 2C 02 F6 | 	mov	local08, result1
27100     0A 13 C2 FA | 	rdbyte	arg01, arg02
27104     D0 FE BF FD | 	call	#__system__getlower_1082
27108     FD 2C 0A F2 | 	cmp	local08, result1 wz
2710c     00 FA 05 56 |  if_ne	mov	result1, #0
27110     20 00 90 5D |  if_ne	jmp	#LR__3949
27114     01 1E 06 F1 | 	add	local01, #1
27118     01 14 06 F1 | 	add	arg02, #1
2711c     01 28 86 F1 | 	sub	local06, #1
27120     C8 FF 9F FD | 	jmp	#LR__3946
27124                 | LR__3947
27124                 | LR__3948
27124     0A 2D CA FA | 	rdbyte	local08, arg02 wz
27128     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
2712c     01 FA 05 A6 |  if_e	mov	result1, #1
27130     00 FA 05 56 |  if_ne	mov	result1, #0
27134                 | LR__3949
27134     A7 F0 03 F6 | 	mov	ptra, fp
27138     B2 00 A0 FD | 	call	#popregs_
2713c                 | __system___pat_match_ret
2713c     2D 00 64 FD | 	ret
27140                 | 
27140                 | _fatfs_cc_ff_uni2oem
27140     00 00 06 F6 | 	mov	_var01, #0
27144     80 12 16 F2 | 	cmp	arg01, #128 wc
27148     09 01 02 C6 |  if_b	mov	_var01, arg01
2714c     58 00 90 CD |  if_b	jmp	#LR__3954
27150     80 00 00 FF 
27154     00 12 16 F2 | 	cmp	arg01, ##65536 wc
27158     4C 00 90 3D |  if_ae	jmp	#LR__3953
2715c     0A FB 31 F9 | 	getword	result1, arg02, #0
27160     01 00 00 FF 
27164     52 FB 0D F2 | 	cmp	result1, ##850 wz
27168     3C 00 90 5D |  if_ne	jmp	#LR__3953
2716c                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
2716c     00 00 06 F6 | 	mov	_var01, #0
27170     97 14 48 FB | 	callpa	#(@LR__3951-@LR__3950)>>2,fcache_load_ptr_
27174                 | LR__3950
27174     00 FB 31 F9 | 	getword	result1, _var01, #0
27178     80 FA 15 F2 | 	cmp	result1, #128 wc
2717c     1C 00 90 3D |  if_ae	jmp	#LR__3952
27180     00 FB 31 F9 | 	getword	result1, _var01, #0
27184     01 FA 65 F0 | 	shl	result1, #1
27188     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
2718c     FD FA E1 FA | 	rdword	result1, result1
27190     FD 12 0A F2 | 	cmp	arg01, result1 wz
27194     01 00 06 51 |  if_ne	add	_var01, #1
27198     D8 FF 9F 5D |  if_ne	jmp	#LR__3950
2719c                 | LR__3951
2719c                 | LR__3952
2719c     00 01 32 F9 | 	getword	_var01, _var01, #0
271a0     80 00 06 F1 | 	add	_var01, #128
271a4     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
271a8                 | LR__3953
271a8                 | LR__3954
271a8                 | ' 			c = (c + 0x80) & 0xFF;
271a8                 | ' 		}
271a8                 | ' 	}
271a8                 | ' 
271a8                 | ' 	return c;
271a8     00 FB 01 F6 | 	mov	result1, _var01
271ac                 | _fatfs_cc_ff_uni2oem_ret
271ac     2D 00 64 FD | 	ret
271b0                 | 
271b0                 | _fatfs_cc_ff_oem2uni
271b0     00 00 06 F6 | 	mov	_var01, #0
271b4     09 FB 31 F9 | 	getword	result1, arg01, #0
271b8     80 FA 15 F2 | 	cmp	result1, #128 wc
271bc     09 01 02 C6 |  if_b	mov	_var01, arg01
271c0     2C 00 90 CD |  if_b	jmp	#LR__3961
271c4     0A 15 32 F9 | 	getword	arg02, arg02, #0
271c8     01 00 00 FF 
271cc     52 15 0E F2 | 	cmp	arg02, ##850 wz
271d0     1C 00 90 5D |  if_ne	jmp	#LR__3960
271d4     09 FB 31 F9 | 	getword	result1, arg01, #0
271d8     00 FB 15 F2 | 	cmp	result1, #256 wc
271dc     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
271e0     80 12 86 C1 |  if_b	sub	arg01, #128
271e4     01 12 66 C0 |  if_b	shl	arg01, #1
271e8     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
271ec     09 01 E2 CA |  if_b	rdword	_var01, arg01
271f0                 | LR__3960
271f0                 | LR__3961
271f0                 | ' 		}
271f0                 | ' 	}
271f0                 | ' 
271f0                 | ' 	return c;
271f0     00 FB 01 F6 | 	mov	result1, _var01
271f4                 | _fatfs_cc_ff_oem2uni_ret
271f4     2D 00 64 FD | 	ret
271f8                 | 
271f8                 | _fatfs_cc_ff_wtoupper
271f8     09 01 02 F6 | 	mov	_var01, arg01
271fc     80 00 00 FF 
27200     00 00 16 F2 | 	cmp	_var01, ##65536 wc
27204     60 01 90 3D |  if_ae	jmp	#LR__3983
27208     00 03 02 F6 | 	mov	_var02, _var01
2720c     01 01 32 F9 | 	getword	_var01, _var02, #0
27210     08 00 00 FF 
27214     00 00 16 F2 | 	cmp	_var01, ##4096 wc
27218     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
2721c     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
27220     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
27224     01 00 00 3F 
27228     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
2722c     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
27230     01 00 00 3F 
27234     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
27238     02 07 02 F6 | 	mov	_var04, _var03
2723c                 | ' 		uc = (WORD)uni;
2723c                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
2723c                 | ' 		for (;;) {
2723c                 | LR__3970
2723c     03 09 E2 FA | 	rdword	_var05, _var04
27240     04 05 02 F6 | 	mov	_var03, _var05
27244     0F 04 4E F7 | 	zerox	_var03, #15 wz
27248     02 06 06 F1 | 	add	_var04, #2
2724c     14 01 90 AD |  if_e	jmp	#LR__3982
27250     01 05 32 F9 | 	getword	_var03, _var02, #0
27254     04 01 32 F9 | 	getword	_var01, _var05, #0
27258     00 05 12 F2 | 	cmp	_var03, _var01 wc
2725c     04 01 90 CD |  if_b	jmp	#LR__3982
27260     03 0B E2 FA | 	rdword	_var06, _var04
27264     05 0D 32 F9 | 	getword	_var07, _var06, #0
27268     08 0C 46 F0 | 	shr	_var07, #8
2726c     05 0B 32 F9 | 	getword	_var06, _var06, #0
27270     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
27274     01 05 32 F9 | 	getword	_var03, _var02, #0
27278     04 0F 32 F9 | 	getword	_var08, _var05, #0
2727c     05 01 32 F9 | 	getword	_var01, _var06, #0
27280     00 0F 02 F1 | 	add	_var08, _var01
27284     07 05 52 F2 | 	cmps	_var03, _var08 wc
27288     02 06 06 F1 | 	add	_var04, #2
2728c     C4 00 90 3D |  if_ae	jmp	#LR__3981
27290                 | ' 				switch (cmd) {
27290     06 11 32 F9 | 	getword	_var09, _var07, #0
27294     09 10 26 F3 | 	fle	_var09, #9
27298     30 10 62 FD | 	jmprel	_var09
2729c                 | LR__3971
2729c     24 00 90 FD | 	jmp	#LR__3972
272a0     3C 00 90 FD | 	jmp	#LR__3973
272a4     54 00 90 FD | 	jmp	#LR__3974
272a8     5C 00 90 FD | 	jmp	#LR__3975
272ac     64 00 90 FD | 	jmp	#LR__3976
272b0     6C 00 90 FD | 	jmp	#LR__3977
272b4     74 00 90 FD | 	jmp	#LR__3978
272b8     7C 00 90 FD | 	jmp	#LR__3979
272bc     84 00 90 FD | 	jmp	#LR__3980
272c0     A0 00 90 FD | 	jmp	#LR__3982
272c4                 | LR__3972
272c4     01 03 32 F9 | 	getword	_var02, _var02, #0
272c8     04 09 32 F9 | 	getword	_var05, _var05, #0
272cc     04 03 82 F1 | 	sub	_var02, _var05
272d0     01 02 66 F0 | 	shl	_var02, #1
272d4     03 03 02 F1 | 	add	_var02, _var04
272d8     01 03 E2 FA | 	rdword	_var02, _var02
272dc     84 00 90 FD | 	jmp	#LR__3982
272e0                 | LR__3973
272e0     01 05 32 F9 | 	getword	_var03, _var02, #0
272e4     01 03 32 F9 | 	getword	_var02, _var02, #0
272e8     04 09 32 F9 | 	getword	_var05, _var05, #0
272ec     04 03 82 F1 | 	sub	_var02, _var05
272f0     01 02 06 F5 | 	and	_var02, #1
272f4     02 03 C2 F2 | 	subr	_var02, _var03
272f8     68 00 90 FD | 	jmp	#LR__3982
272fc                 | LR__3974
272fc     01 03 32 F9 | 	getword	_var02, _var02, #0
27300     10 02 86 F1 | 	sub	_var02, #16
27304     5C 00 90 FD | 	jmp	#LR__3982
27308                 | LR__3975
27308     01 03 32 F9 | 	getword	_var02, _var02, #0
2730c     20 02 86 F1 | 	sub	_var02, #32
27310     50 00 90 FD | 	jmp	#LR__3982
27314                 | LR__3976
27314     01 03 32 F9 | 	getword	_var02, _var02, #0
27318     30 02 86 F1 | 	sub	_var02, #48
2731c     44 00 90 FD | 	jmp	#LR__3982
27320                 | LR__3977
27320     01 03 32 F9 | 	getword	_var02, _var02, #0
27324     1A 02 86 F1 | 	sub	_var02, #26
27328     38 00 90 FD | 	jmp	#LR__3982
2732c                 | LR__3978
2732c     01 03 32 F9 | 	getword	_var02, _var02, #0
27330     08 02 06 F1 | 	add	_var02, #8
27334     2C 00 90 FD | 	jmp	#LR__3982
27338                 | LR__3979
27338     01 03 32 F9 | 	getword	_var02, _var02, #0
2733c     50 02 86 F1 | 	sub	_var02, #80
27340     20 00 90 FD | 	jmp	#LR__3982
27344                 | LR__3980
27344     01 03 32 F9 | 	getword	_var02, _var02, #0
27348     0E 00 00 FF 
2734c     60 02 86 F1 | 	sub	_var02, ##7264
27350                 | ' 				}
27350                 | ' 				break;
27350     10 00 90 FD | 	jmp	#LR__3982
27354                 | LR__3981
27354     0F 0C 4E F7 | 	zerox	_var07, #15 wz
27358     02 0A 06 AA |  if_e	mul	_var06, #2
2735c     05 07 02 A1 |  if_e	add	_var04, _var06
27360     D8 FE 9F FD | 	jmp	#LR__3970
27364                 | LR__3982
27364     01 01 32 F9 | 	getword	_var01, _var02, #0
27368                 | LR__3983
27368                 | ' 		}
27368                 | ' 		uni = uc;
27368                 | ' 	}
27368                 | ' 
27368                 | ' 	return uni;
27368     00 FB 01 F6 | 	mov	result1, _var01
2736c                 | _fatfs_cc_ff_wtoupper_ret
2736c     2D 00 64 FD | 	ret
27370                 | 
27370                 | _fatfs_cc_strncpy
27370     09 01 02 F6 | 	mov	_var01, arg01
27374     97 12 48 FB | 	callpa	#(@LR__3991-@LR__3990)>>2,fcache_load_ptr_
27378                 | ' 
27378                 | ' 	dscan = dst;
27378                 | ' 	sscan = src;
27378                 | ' 	count = n;
27378                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
27378                 | LR__3990
27378     01 16 86 F1 | 	sub	arg03, #1
2737c     00 16 56 F2 | 	cmps	arg03, #0 wc
27380     18 00 90 CD |  if_b	jmp	#LR__3992
27384     0A FB C1 FA | 	rdbyte	result1, arg02
27388     00 FB 41 FC | 	wrbyte	result1, _var01
2738c     01 14 06 F1 | 	add	arg02, #1
27390     00 FB C9 FA | 	rdbyte	result1, _var01 wz
27394                 | ' 		continue;
27394     01 00 06 F1 | 	add	_var01, #1
27398     DC FF 9F 5D |  if_ne	jmp	#LR__3990
2739c                 | LR__3991
2739c                 | LR__3992
2739c     97 0C 48 FB | 	callpa	#(@LR__3994-@LR__3993)>>2,fcache_load_ptr_
273a0                 | ' 	while (--count >= 0)
273a0                 | LR__3993
273a0     01 16 86 F1 | 	sub	arg03, #1
273a4     00 16 56 F2 | 	cmps	arg03, #0 wc
273a8     00 03 02 36 |  if_ae	mov	_var02, _var01
273ac     01 00 06 31 |  if_ae	add	_var01, #1
273b0     01 01 48 3C |  if_ae	wrbyte	#0, _var02
273b4     E8 FF 9F 3D |  if_ae	jmp	#LR__3993
273b8                 | LR__3994
273b8                 | ' 		*dscan++ = '\0';
273b8                 | ' 	return(dst);
273b8     09 FB 01 F6 | 	mov	result1, arg01
273bc                 | _fatfs_cc_strncpy_ret
273bc     2D 00 64 FD | 	ret
273c0                 | 
273c0                 | _fatfs_cc_memcmp
273c0                 | ' 	for (n = size; n > 0; n--)
273c0     00 16 0E F2 | 	cmp	arg03, #0 wz
273c4     28 00 90 AD |  if_e	jmp	#LR__4001
273c8                 | LR__4000
273c8     09 01 C2 FA | 	rdbyte	_var01, arg01
273cc     0A 03 C2 FA | 	rdbyte	_var02, arg02
273d0     01 01 0A F2 | 	cmp	_var01, _var02 wz
273d4     01 12 06 A1 |  if_e	add	arg01, #1
273d8     01 14 06 A1 |  if_e	add	arg02, #1
273dc                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
273dc     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
273e0     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
273e4     01 FB 81 51 |  if_ne	sub	result1, _var02
273e8     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
273ec     F6 17 6E FB | 	djnz	arg03, #LR__4000
273f0                 | LR__4001
273f0                 | ' 
273f0                 | ' 	return(0);
273f0     00 FA 05 F6 | 	mov	result1, #0
273f4                 | _fatfs_cc_memcmp_ret
273f4     2D 00 64 FD | 	ret
273f8                 | 
273f8                 | _fatfs_cc_strncmp
273f8     09 01 0A F6 | 	mov	_var01, arg01 wz
273fc     14 00 90 5D |  if_ne	jmp	#LR__4010
27400                 | ' 		return scan2 ? -1 : 0;
27400     00 14 0E F2 | 	cmp	arg02, #0 wz
27404     01 02 66 56 |  if_ne	neg	_var02, #1
27408     00 02 06 A6 |  if_e	mov	_var02, #0
2740c     01 FB 01 F6 | 	mov	result1, _var02
27410     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
27414                 | LR__4010
27414     00 14 0E F2 | 	cmp	arg02, #0 wz
27418     01 FA 05 A6 |  if_e	mov	result1, #1
2741c     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
27420     0B 05 02 F6 | 	mov	_var03, arg03
27424     97 16 48 FB | 	callpa	#(@LR__4012-@LR__4011)>>2,fcache_load_ptr_
27428                 | ' 	count = n;
27428                 | ' 	do {
27428                 | LR__4011
27428     00 07 C2 FA | 	rdbyte	_var04, _var01
2742c     0A 09 02 F6 | 	mov	_var05, arg02
27430     04 0B C2 FA | 	rdbyte	_var06, _var05
27434     01 04 86 F1 | 	sub	_var03, #1
27438     00 04 56 F2 | 	cmps	_var03, #0 wc
2743c     01 00 06 F1 | 	add	_var01, #1
27440     01 14 06 F1 | 	add	arg02, #1
27444     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
27448     08 00 90 2D |  if_nc_and_z	jmp	#LR__4013
2744c     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
27450     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4011
27454                 | LR__4012
27454                 | LR__4013
27454     00 04 56 F2 | 	cmps	_var03, #0 wc
27458                 | ' 		return(0);
27458     00 FA 05 C6 |  if_b	mov	result1, #0
2745c     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
27460     05 07 0A F2 | 	cmp	_var04, _var06 wz
27464                 | ' 		return(0);
27464     00 FA 05 A6 |  if_e	mov	result1, #0
27468     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2746c     00 06 0E F2 | 	cmp	_var04, #0 wz
27470                 | ' 		return(-1);
27470     01 FA 65 A6 |  if_e	neg	result1, #1
27474     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
27478     00 0A 0E F2 | 	cmp	_var06, #0 wz
2747c                 | ' 		return(1);
2747c     01 FA 05 A6 |  if_e	mov	result1, #1
27480                 | ' 		return(c1 - c2);
27480     03 FB 01 56 |  if_ne	mov	result1, _var04
27484     05 FB 81 51 |  if_ne	sub	result1, _var06
27488                 | _fatfs_cc_strncmp_ret
27488     2D 00 64 FD | 	ret
2748c                 | 
2748c                 | _fatfs_cc_strchr
2748c                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
2748c                 | ' 	while ((c = *s++) != (char) charwanted)
2748c                 | LR__4020
2748c     09 01 02 F6 | 	mov	_var01, arg01
27490     00 03 C2 FA | 	rdbyte	_var02, _var01
27494     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
27498     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
2749c     03 05 0A F2 | 	cmp	_var03, _var04 wz
274a0     01 12 06 F1 | 	add	arg01, #1
274a4     14 00 90 AD |  if_e	jmp	#LR__4021
274a8     01 05 02 F6 | 	mov	_var03, _var02
274ac     07 04 4E F7 | 	zerox	_var03, #7 wz
274b0     00 FA 05 A6 |  if_e	mov	result1, #0
274b4     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
274b8     D0 FF 9F FD | 	jmp	#LR__4020
274bc                 | LR__4021
274bc                 | ' 	return((char *)--s);
274bc     01 12 86 F1 | 	sub	arg01, #1
274c0     09 FB 01 F6 | 	mov	result1, arg01
274c4                 | _fatfs_cc_strchr_ret
274c4     2D 00 64 FD | 	ret
274c8                 | 
274c8                 | _fatfs_cc_disk_initialize
274c8     04 4A 05 F6 | 	mov	COUNT_, #4
274cc     A8 00 A0 FD | 	call	#pushregs_
274d0     40 F0 07 F1 | 	add	ptra, #64
274d4     04 4E 05 F1 | 	add	fp, #4
274d8     A7 12 42 FC | 	wrbyte	arg01, fp
274dc     01 00 00 FF 
274e0     14 E4 05 F1 | 	add	objptr, ##532
274e4     F2 18 02 FB | 	rdlong	arg04, objptr
274e8     2C 4E 05 F1 | 	add	fp, #44
274ec     A7 18 62 FC | 	wrlong	arg04, fp
274f0     04 E4 85 F1 | 	sub	objptr, #4
274f4     F2 18 02 FB | 	rdlong	arg04, objptr
274f8     04 4E 05 F1 | 	add	fp, #4
274fc     A7 18 62 FC | 	wrlong	arg04, fp
27500     08 E4 05 F1 | 	add	objptr, #8
27504     F2 18 02 FB | 	rdlong	arg04, objptr
27508     04 4E 05 F1 | 	add	fp, #4
2750c     A7 18 62 FC | 	wrlong	arg04, fp
27510     04 E4 05 F1 | 	add	objptr, #4
27514     F2 18 02 FB | 	rdlong	arg04, objptr
27518     04 4E 05 F1 | 	add	fp, #4
2751c     A7 18 62 FC | 	wrlong	arg04, fp
27520     04 E4 05 F1 | 	add	objptr, #4
27524     F2 02 48 FC | 	wrbyte	#1, objptr
27528     01 00 00 FF 
2752c     20 E4 85 F1 | 	sub	objptr, ##544
27530     38 4E 85 F1 | 	sub	fp, #56
27534     A7 18 CA FA | 	rdbyte	arg04, fp wz
27538     04 4E 85 F1 | 	sub	fp, #4
2753c                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2753c                 | '             return RES_NOTRDY;
2753c     03 FA 05 56 |  if_ne	mov	result1, #3
27540     D8 05 90 5D |  if_ne	jmp	#LR__4048
27544     13 00 00 FF 
27548     10 13 06 F6 | 	mov	arg01, ##10000
2754c     2C 98 BF FD | 	call	#__system___waitus
27550     30 4E 05 F1 | 	add	fp, #48
27554     A7 12 02 FB | 	rdlong	arg01, fp
27558     09 01 08 FC | 	wrpin	#0, arg01
2755c     04 4E 05 F1 | 	add	fp, #4
27560     A7 12 02 FB | 	rdlong	arg01, fp
27564     09 01 08 FC | 	wrpin	#0, arg01
27568     04 4E 05 F1 | 	add	fp, #4
2756c     A7 12 02 FB | 	rdlong	arg01, fp
27570     09 01 08 FC | 	wrpin	#0, arg01
27574     04 4E 05 F1 | 	add	fp, #4
27578     A7 12 02 FB | 	rdlong	arg01, fp
2757c     09 00 80 FF 
27580     09 01 08 FC | 	wrpin	##4608, arg01
27584     0C 4E 85 F1 | 	sub	fp, #12
27588     A7 12 02 FB | 	rdlong	arg01, fp
2758c     59 12 62 FD | 	drvh	arg01
27590     04 4E 05 F1 | 	add	fp, #4
27594     A7 12 02 FB | 	rdlong	arg01, fp
27598     59 12 62 FD | 	drvh	arg01
2759c     04 4E 05 F1 | 	add	fp, #4
275a0     A7 12 02 FB | 	rdlong	arg01, fp
275a4     59 12 62 FD | 	drvh	arg01
275a8     04 4E 05 F1 | 	add	fp, #4
275ac     A7 12 02 FB | 	rdlong	arg01, fp
275b0     59 12 62 FD | 	drvh	arg01
275b4     20 4E 85 F1 | 	sub	fp, #32
275b8     00 04 80 FF 
275bc     A7 20 68 FC | 	wrlong	##524304, fp
275c0     04 4E 05 F1 | 	add	fp, #4
275c4     20 03 80 FF 
275c8     A7 90 68 FC | 	wrlong	##409672, fp
275cc     14 4E 05 F1 | 	add	fp, #20
275d0     A7 1E 02 FB | 	rdlong	local01, fp
275d4     18 4E 85 F1 | 	sub	fp, #24
275d8     A7 16 02 FB | 	rdlong	arg03, fp
275dc     40 1E 62 FD | 	dirl	local01
275e0     A0 03 80 FF 
275e4     0F 91 08 FC | 	wrpin	##475208, local01
275e8     0F 17 12 FC | 	wxpin	arg03, local01
275ec     0F 01 28 FC | 	wypin	#0, local01
275f0     41 1E 62 FD | 	dirh	local01
275f4     1C 4E 05 F1 | 	add	fp, #28
275f8     A7 20 02 FB | 	rdlong	local02, fp
275fc     10 1F 82 F1 | 	sub	local01, local02
27600     07 1E 06 F5 | 	and	local01, #7
27604     18 1E 66 F0 | 	shl	local01, #24
27608     78 14 06 F6 | 	mov	arg02, #120
2760c     0F 15 42 F5 | 	or	arg02, local01
27610     14 4E 85 F1 | 	sub	fp, #20
27614     A7 14 62 FC | 	wrlong	arg02, fp
27618     14 4E 05 F1 | 	add	fp, #20
2761c     A7 12 02 FB | 	rdlong	arg01, fp
27620     10 14 26 F4 | 	bith	arg02, #16
27624     40 12 62 FD | 	dirl	arg01
27628     09 15 02 FC | 	wrpin	arg02, arg01
2762c     09 3F 18 FC | 	wxpin	#31, arg01
27630     FF FF FF FF 
27634     09 FF 2B FC | 	wypin	##-1, arg01
27638     41 12 62 FD | 	dirh	arg01
2763c     04 4E 85 F1 | 	sub	fp, #4
27640     A7 14 02 FB | 	rdlong	arg02, fp
27644     08 4E 05 F1 | 	add	fp, #8
27648     A7 22 02 FB | 	rdlong	local03, fp
2764c     11 15 82 F1 | 	sub	arg02, local03
27650     07 14 06 F5 | 	and	arg02, #7
27654     18 14 66 F0 | 	shl	arg02, #24
27658     14 4E 85 F1 | 	sub	fp, #20
2765c     A7 14 62 FC | 	wrlong	arg02, fp
27660     29 00 00 FF 
27664     7A 14 46 F5 | 	or	arg02, ##21114
27668     A7 14 62 FC | 	wrlong	arg02, fp
2766c     14 4E 05 F1 | 	add	fp, #20
27670     A7 12 02 FB | 	rdlong	arg01, fp
27674     40 12 62 FD | 	dirl	arg01
27678     09 15 02 FC | 	wrpin	arg02, arg01
2767c     09 4F 18 FC | 	wxpin	#39, arg01
27680     09 01 28 FC | 	wypin	#0, arg01
27684     41 12 62 FD | 	dirh	arg01
27688     28 4E 85 F1 | 	sub	fp, #40
2768c     A7 12 02 F6 | 	mov	arg01, fp
27690     14 4E 85 F1 | 	sub	fp, #20
27694     0A 14 06 F6 | 	mov	arg02, #10
27698     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2769c     00 12 06 F6 | 	mov	arg01, #0
276a0     00 14 06 F6 | 	mov	arg02, #0
276a4     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
276a8     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1126
276ac     64 12 06 F6 | 	mov	arg01, #100
276b0     C8 96 BF FD | 	call	#__system___waitus
276b4     14 4E 05 F1 | 	add	fp, #20
276b8     A7 12 02 F6 | 	mov	arg01, fp
276bc     14 4E 85 F1 | 	sub	fp, #20
276c0     0A 14 06 F6 | 	mov	arg02, #10
276c4     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
276c8     0C 4E 05 F1 | 	add	fp, #12
276cc     A7 00 48 FC | 	wrbyte	#0, fp
276d0     0C 4E 85 F1 | 	sub	fp, #12
276d4     00 12 06 F6 | 	mov	arg01, #0
276d8     00 14 06 F6 | 	mov	arg02, #0
276dc     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
276e0     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
276e4     01 18 0E F2 | 	cmp	arg04, #1 wz
276e8     B8 03 90 5D |  if_ne	jmp	#LR__4047
276ec     08 12 06 F6 | 	mov	arg01, #8
276f0     AA 15 06 F6 | 	mov	arg02, #426
276f4     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
276f8     FD FA E1 F8 | 	getbyte	result1, result1, #0
276fc     01 FA 0D F2 | 	cmp	result1, #1 wz
27700     98 01 90 5D |  if_ne	jmp	#LR__4033
27704     14 4E 05 F1 | 	add	fp, #20
27708     A7 12 02 F6 | 	mov	arg01, fp
2770c     14 4E 85 F1 | 	sub	fp, #20
27710     04 14 06 F6 | 	mov	arg02, #4
27714     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
27718     16 4E 05 F1 | 	add	fp, #22
2771c     A7 24 C2 FA | 	rdbyte	local04, fp
27720     16 4E 85 F1 | 	sub	fp, #22
27724     01 24 0E F2 | 	cmp	local04, #1 wz
27728     17 4E 05 A1 |  if_e	add	fp, #23
2772c     A7 22 C2 AA |  if_e	rdbyte	local03, fp
27730     17 4E 85 A1 |  if_e	sub	fp, #23
27734     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
27738     68 03 90 5D |  if_ne	jmp	#LR__4046
2773c                 | ' 				for (tmr = 1000; tmr; tmr--) {
2773c     18 4E 05 F1 | 	add	fp, #24
27740     01 00 80 FF 
27744     A7 D0 6B FC | 	wrlong	##1000, fp
27748     18 4E 85 F1 | 	sub	fp, #24
2774c                 | LR__4030
2774c     18 4E 05 F1 | 	add	fp, #24
27750     A7 1E 0A FB | 	rdlong	local01, fp wz
27754     18 4E 85 F1 | 	sub	fp, #24
27758     3C 00 90 AD |  if_e	jmp	#LR__4031
2775c     A9 12 06 F6 | 	mov	arg01, #169
27760     1E 14 C6 F9 | 	decod	arg02, #30
27764     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27768     FD 24 02 F6 | 	mov	local04, result1
2776c     07 24 4E F7 | 	zerox	local04, #7 wz
27770     24 00 90 AD |  if_e	jmp	#LR__4031
27774     01 00 00 FF 
27778     E8 13 06 F6 | 	mov	arg01, ##1000
2777c     FC 95 BF FD | 	call	#__system___waitus
27780     18 4E 05 F1 | 	add	fp, #24
27784     A7 24 02 FB | 	rdlong	local04, fp
27788     01 24 86 F1 | 	sub	local04, #1
2778c     A7 24 62 FC | 	wrlong	local04, fp
27790     18 4E 85 F1 | 	sub	fp, #24
27794     B4 FF 9F FD | 	jmp	#LR__4030
27798                 | LR__4031
27798     18 4E 05 F1 | 	add	fp, #24
2779c     A7 24 0A FB | 	rdlong	local04, fp wz
277a0     18 4E 85 F1 | 	sub	fp, #24
277a4     4C 00 90 AD |  if_e	jmp	#LR__4032
277a8     3A 12 06 F6 | 	mov	arg01, #58
277ac     00 14 06 F6 | 	mov	arg02, #0
277b0     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
277b4     FD 22 02 F6 | 	mov	local03, result1
277b8     07 22 4E F7 | 	zerox	local03, #7 wz
277bc     34 00 90 5D |  if_ne	jmp	#LR__4032
277c0     14 4E 05 F1 | 	add	fp, #20
277c4     A7 12 02 F6 | 	mov	arg01, fp
277c8     14 4E 85 F1 | 	sub	fp, #20
277cc     04 14 06 F6 | 	mov	arg02, #4
277d0     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
277d4     14 4E 05 F1 | 	add	fp, #20
277d8     A7 1E C2 FA | 	rdbyte	local01, fp
277dc     40 1E CE F7 | 	test	local01, #64 wz
277e0     0C 24 06 56 |  if_ne	mov	local04, #12
277e4     04 24 06 A6 |  if_e	mov	local04, #4
277e8     08 4E 85 F1 | 	sub	fp, #8
277ec     A7 24 42 FC | 	wrbyte	local04, fp
277f0     0C 4E 85 F1 | 	sub	fp, #12
277f4                 | LR__4032
277f4     14 24 06 FB | 	rdlong	local04, #20
277f8     18 4E 05 F1 | 	add	fp, #24
277fc     A7 24 62 FC | 	wrlong	local04, fp
27800     0C 4E 05 F1 | 	add	fp, #12
27804     A7 24 02 FB | 	rdlong	local04, fp
27808     1B 24 26 F4 | 	bith	local04, #27
2780c     A7 24 62 FC | 	wrlong	local04, fp
27810     0C 4E 85 F1 | 	sub	fp, #12
27814     A7 24 02 FB | 	rdlong	local04, fp
27818     18 4E 85 F1 | 	sub	fp, #24
2781c     68 78 04 FF 
27820     81 25 16 F2 | 	cmp	local04, ##150000001 wc
27824     1C 4E 05 C1 |  if_b	add	fp, #28
27828     00 01 80 CF 
2782c     A7 08 68 CC |  if_b	wrlong	##131076, fp
27830     1C 4E 85 C1 |  if_b	sub	fp, #28
27834     6C 02 90 CD |  if_b	jmp	#LR__4046
27838     18 4E 05 F1 | 	add	fp, #24
2783c     A7 24 02 FB | 	rdlong	local04, fp
27840     18 4E 85 F1 | 	sub	fp, #24
27844     E1 F5 05 FF 
27848     01 24 16 F2 | 	cmp	local04, ##200000001 wc
2784c     1C 4E 05 C1 |  if_b	add	fp, #28
27850     00 01 80 CF 
27854     A7 0A 68 CC |  if_b	wrlong	##131077, fp
27858     1C 4E 85 C1 |  if_b	sub	fp, #28
2785c     44 02 90 CD |  if_b	jmp	#LR__4046
27860     18 4E 05 F1 | 	add	fp, #24
27864     A7 24 02 FB | 	rdlong	local04, fp
27868     18 4E 85 F1 | 	sub	fp, #24
2786c     3B 58 08 FF 
27870     01 24 16 F2 | 	cmp	local04, ##280000001 wc
27874     1C 4E 05 C1 |  if_b	add	fp, #28
27878     00 01 80 CF 
2787c     A7 0C 68 CC |  if_b	wrlong	##131078, fp
27880     1C 4E 85 C1 |  if_b	sub	fp, #28
27884     1C 02 90 CD |  if_b	jmp	#LR__4046
27888     1C 4E 05 F1 | 	add	fp, #28
2788c     80 01 80 FF 
27890     A7 10 68 FC | 	wrlong	##196616, fp
27894     1C 4E 85 F1 | 	sub	fp, #28
27898     08 02 90 FD | 	jmp	#LR__4046
2789c                 | LR__4033
2789c     A9 12 06 F6 | 	mov	arg01, #169
278a0     00 14 06 F6 | 	mov	arg02, #0
278a4     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
278a8     FD 24 E2 F8 | 	getbyte	local04, result1, #0
278ac     02 24 16 F2 | 	cmp	local04, #2 wc
278b0     18 00 90 3D |  if_ae	jmp	#LR__4034
278b4     0C 4E 05 F1 | 	add	fp, #12
278b8     A7 04 48 FC | 	wrbyte	#2, fp
278bc     04 4E 05 F1 | 	add	fp, #4
278c0     A7 52 49 FC | 	wrbyte	#169, fp
278c4     10 4E 85 F1 | 	sub	fp, #16
278c8     14 00 90 FD | 	jmp	#LR__4035
278cc                 | LR__4034
278cc     0C 4E 05 F1 | 	add	fp, #12
278d0     A7 02 48 FC | 	wrbyte	#1, fp
278d4     04 4E 05 F1 | 	add	fp, #4
278d8     A7 02 48 FC | 	wrbyte	#1, fp
278dc     10 4E 85 F1 | 	sub	fp, #16
278e0                 | LR__4035
278e0                 | ' 				ty =  0x01 ; cmd =  (1) ;
278e0                 | ' 			}
278e0                 | ' 			for (tmr = 1000; tmr; tmr--) {
278e0     18 4E 05 F1 | 	add	fp, #24
278e4     01 00 80 FF 
278e8     A7 D0 6B FC | 	wrlong	##1000, fp
278ec     18 4E 85 F1 | 	sub	fp, #24
278f0                 | LR__4036
278f0     18 4E 05 F1 | 	add	fp, #24
278f4     A7 22 0A FB | 	rdlong	local03, fp wz
278f8     18 4E 85 F1 | 	sub	fp, #24
278fc     44 00 90 AD |  if_e	jmp	#LR__4037
27900     10 4E 05 F1 | 	add	fp, #16
27904     A7 12 C2 FA | 	rdbyte	arg01, fp
27908     10 4E 85 F1 | 	sub	fp, #16
2790c     00 14 06 F6 | 	mov	arg02, #0
27910     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27914     FD 24 02 F6 | 	mov	local04, result1
27918     07 24 4E F7 | 	zerox	local04, #7 wz
2791c     24 00 90 AD |  if_e	jmp	#LR__4037
27920     01 00 00 FF 
27924     E8 13 06 F6 | 	mov	arg01, ##1000
27928     50 94 BF FD | 	call	#__system___waitus
2792c     18 4E 05 F1 | 	add	fp, #24
27930     A7 24 02 FB | 	rdlong	local04, fp
27934     01 24 86 F1 | 	sub	local04, #1
27938     A7 24 62 FC | 	wrlong	local04, fp
2793c     18 4E 85 F1 | 	sub	fp, #24
27940     AC FF 9F FD | 	jmp	#LR__4036
27944                 | LR__4037
27944     18 4E 05 F1 | 	add	fp, #24
27948     A7 24 0A FB | 	rdlong	local04, fp wz
2794c     18 4E 85 F1 | 	sub	fp, #24
27950     14 00 90 AD |  if_e	jmp	#LR__4038
27954     10 12 06 F6 | 	mov	arg01, #16
27958     09 14 C6 F9 | 	decod	arg02, #9
2795c     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27960     07 FA 4D F7 | 	zerox	result1, #7 wz
27964     0C 00 90 AD |  if_e	jmp	#LR__4039
27968                 | LR__4038
27968     0C 4E 05 F1 | 	add	fp, #12
2796c     A7 00 48 FC | 	wrbyte	#0, fp
27970     0C 4E 85 F1 | 	sub	fp, #12
27974                 | LR__4039
27974     14 24 06 FB | 	rdlong	local04, #20
27978     18 4E 05 F1 | 	add	fp, #24
2797c     A7 24 62 FC | 	wrlong	local04, fp
27980     18 4E 85 F1 | 	sub	fp, #24
27984     F0 FA 02 FF 
27988     01 25 16 F2 | 	cmp	local04, ##100000001 wc
2798c     18 00 90 3D |  if_ae	jmp	#LR__4040
27990     24 4E 05 F1 | 	add	fp, #36
27994     A7 24 02 FB | 	rdlong	local04, fp
27998     1B 24 26 F4 | 	bith	local04, #27
2799c     A7 24 62 FC | 	wrlong	local04, fp
279a0     24 4E 85 F1 | 	sub	fp, #36
279a4     2C 00 90 FD | 	jmp	#LR__4041
279a8                 | LR__4040
279a8     18 4E 05 F1 | 	add	fp, #24
279ac     A7 24 02 FB | 	rdlong	local04, fp
279b0     18 4E 85 F1 | 	sub	fp, #24
279b4     E1 F5 05 FF 
279b8     01 24 16 F2 | 	cmp	local04, ##200000001 wc
279bc     24 4E 05 C1 |  if_b	add	fp, #36
279c0     A7 24 02 CB |  if_b	rdlong	local04, fp
279c4     80 00 04 CF 
279c8     00 24 46 C5 |  if_b	or	local04, ##134283264
279cc     A7 24 62 CC |  if_b	wrlong	local04, fp
279d0     24 4E 85 C1 |  if_b	sub	fp, #36
279d4                 | LR__4041
279d4     18 4E 05 F1 | 	add	fp, #24
279d8     A7 24 02 FB | 	rdlong	local04, fp
279dc     18 4E 85 F1 | 	sub	fp, #24
279e0     F0 FA 02 FF 
279e4     01 25 16 F2 | 	cmp	local04, ##100000001 wc
279e8     1C 4E 05 C1 |  if_b	add	fp, #28
279ec     00 01 80 CF 
279f0     A7 08 68 CC |  if_b	wrlong	##131076, fp
279f4     1C 4E 85 C1 |  if_b	sub	fp, #28
279f8     A8 00 90 CD |  if_b	jmp	#LR__4045
279fc     18 4E 05 F1 | 	add	fp, #24
27a00     A7 24 02 FB | 	rdlong	local04, fp
27a04     18 4E 85 F1 | 	sub	fp, #24
27a08     68 78 04 FF 
27a0c     81 25 16 F2 | 	cmp	local04, ##150000001 wc
27a10     1C 4E 05 C1 |  if_b	add	fp, #28
27a14     80 01 80 CF 
27a18     A7 0C 68 CC |  if_b	wrlong	##196614, fp
27a1c     1C 4E 85 C1 |  if_b	sub	fp, #28
27a20     80 00 90 CD |  if_b	jmp	#LR__4044
27a24     18 4E 05 F1 | 	add	fp, #24
27a28     A7 24 02 FB | 	rdlong	local04, fp
27a2c     18 4E 85 F1 | 	sub	fp, #24
27a30     E1 F5 05 FF 
27a34     01 24 16 F2 | 	cmp	local04, ##200000001 wc
27a38     1C 4E 05 C1 |  if_b	add	fp, #28
27a3c     00 02 80 CF 
27a40     A7 10 68 CC |  if_b	wrlong	##262152, fp
27a44     1C 4E 85 C1 |  if_b	sub	fp, #28
27a48     58 00 90 CD |  if_b	jmp	#LR__4043
27a4c     18 4E 05 F1 | 	add	fp, #24
27a50     A7 24 02 FB | 	rdlong	local04, fp
27a54     18 4E 85 F1 | 	sub	fp, #24
27a58     59 73 07 FF 
27a5c     81 24 16 F2 | 	cmp	local04, ##250000001 wc
27a60     1C 4E 05 C1 |  if_b	add	fp, #28
27a64     80 02 80 CF 
27a68     A7 14 68 CC |  if_b	wrlong	##327690, fp
27a6c     1C 4E 85 C1 |  if_b	sub	fp, #28
27a70     30 00 90 CD |  if_b	jmp	#LR__4042
27a74     18 4E 05 F1 | 	add	fp, #24
27a78     A7 24 02 FB | 	rdlong	local04, fp
27a7c     18 4E 85 F1 | 	sub	fp, #24
27a80     D1 F0 08 FF 
27a84     01 25 16 F2 | 	cmp	local04, ##300000001 wc
27a88     1C 4E 05 C1 |  if_b	add	fp, #28
27a8c     00 03 80 CF 
27a90     A7 18 68 CC |  if_b	wrlong	##393228, fp
27a94     1C 4E 85 F3 | 	sumc	fp, #28
27a98     80 03 80 3F 
27a9c     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
27aa0     1C 4E 85 31 |  if_ae	sub	fp, #28
27aa4                 | LR__4042
27aa4                 | LR__4043
27aa4                 | LR__4044
27aa4                 | LR__4045
27aa4                 | LR__4046
27aa4                 | LR__4047
27aa4     0C 4E 05 F1 | 	add	fp, #12
27aa8     A7 24 C2 FA | 	rdbyte	local04, fp
27aac     01 00 00 FF 
27ab0     21 E4 05 F1 | 	add	objptr, ##545
27ab4     F2 24 42 FC | 	wrbyte	local04, objptr
27ab8     A7 1E CA FA | 	rdbyte	local01, fp wz
27abc     00 24 06 56 |  if_ne	mov	local04, #0
27ac0     01 24 06 A6 |  if_e	mov	local04, #1
27ac4     20 4E 05 F1 | 	add	fp, #32
27ac8     A7 24 42 FC | 	wrbyte	local04, fp
27acc     A7 24 C2 FA | 	rdbyte	local04, fp
27ad0     2C 4E 85 F1 | 	sub	fp, #44
27ad4     01 E4 85 F1 | 	sub	objptr, #1
27ad8     F2 24 42 FC | 	wrbyte	local04, objptr
27adc     01 00 00 FF 
27ae0     20 E4 85 F1 | 	sub	objptr, ##544
27ae4     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1126
27ae8     34 4E 05 F1 | 	add	fp, #52
27aec     A7 12 02 FB | 	rdlong	arg01, fp
27af0     18 4E 85 F1 | 	sub	fp, #24
27af4     A7 14 02 FB | 	rdlong	arg02, fp
27af8     09 15 12 FC | 	wxpin	arg02, arg01
27afc     1C 4E 05 F1 | 	add	fp, #28
27b00     A7 12 02 FB | 	rdlong	arg01, fp
27b04     14 4E 85 F1 | 	sub	fp, #20
27b08     A7 14 02 FB | 	rdlong	arg02, fp
27b0c     09 15 02 FC | 	wrpin	arg02, arg01
27b10                 | ' 
27b10                 | ' 		}
27b10                 | ' 	}
27b10                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
27b10                 | ' 	CardType = ty;
27b10                 | ' 	s = ty ? 0 :  0x01 ;
27b10                 | ' 	Stat = s;
27b10                 | ' 
27b10                 | ' 	deselect();
27b10                 | ' 
27b10                 | ' 
27b10                 | ' 	_wxpin( PIN_CLK, ck_div );
27b10                 | ' 	_wrpin( PIN_DI, spm_tx );
27b10                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
27b10                 | ' 	return s;
27b10     08 4E 05 F1 | 	add	fp, #8
27b14     A7 FA C1 FA | 	rdbyte	result1, fp
27b18     2C 4E 85 F1 | 	sub	fp, #44
27b1c                 | LR__4048
27b1c     A7 F0 03 F6 | 	mov	ptra, fp
27b20     B2 00 A0 FD | 	call	#popregs_
27b24                 | _fatfs_cc_disk_initialize_ret
27b24     2D 00 64 FD | 	ret
27b28                 | 
27b28                 | _fatfs_cc_disk_read
27b28     05 4A 05 F6 | 	mov	COUNT_, #5
27b2c     A8 00 A0 FD | 	call	#pushregs_
27b30     0A 1F 02 F6 | 	mov	local01, arg02
27b34     0B 21 02 F6 | 	mov	local02, arg03
27b38     0C 23 02 F6 | 	mov	local03, arg04
27b3c     00 12 0E F2 | 	cmp	arg01, #0 wz
27b40     01 FA 05 56 |  if_ne	mov	result1, #1
27b44                 | ' 
27b44                 | ' 	return Stat;
27b44     01 00 00 AF 
27b48     20 E4 05 A1 |  if_e	add	objptr, ##544
27b4c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27b50     01 00 00 AF 
27b54     20 E4 85 A1 |  if_e	sub	objptr, ##544
27b58     FD FA E1 F8 | 	getbyte	result1, result1, #0
27b5c     01 FA CD F7 | 	test	result1, #1 wz
27b60     03 FA 05 56 |  if_ne	mov	result1, #3
27b64     84 00 90 5D |  if_ne	jmp	#LR__4052
27b68     01 00 00 FF 
27b6c     21 E4 05 F1 | 	add	objptr, ##545
27b70     F2 24 C2 FA | 	rdbyte	local04, objptr
27b74     01 00 00 FF 
27b78     21 E4 85 F1 | 	sub	objptr, ##545
27b7c     08 24 CE F7 | 	test	local04, #8 wz
27b80     09 20 66 A0 |  if_e	shl	local02, #9
27b84     02 22 16 F2 | 	cmp	local03, #2 wc
27b88     12 24 06 36 |  if_ae	mov	local04, #18
27b8c     11 24 06 C6 |  if_b	mov	local04, #17
27b90     10 15 02 F6 | 	mov	arg02, local02
27b94     12 13 02 F6 | 	mov	arg01, local04
27b98     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27b9c     FD 26 02 F6 | 	mov	local05, result1
27ba0     07 26 4E F7 | 	zerox	local05, #7 wz
27ba4     30 00 90 5D |  if_ne	jmp	#LR__4051
27ba8                 | ' 		do {
27ba8                 | LR__4050
27ba8     0F 13 02 F6 | 	mov	arg01, local01
27bac     09 14 C6 F9 | 	decod	arg02, #9
27bb0     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1134
27bb4     00 FA 0D F2 | 	cmp	result1, #0 wz
27bb8     01 00 00 5F 
27bbc     00 1E 06 51 |  if_ne	add	local01, ##512
27bc0     F9 23 6E 5B |  if_ne	djnz	local03, #LR__4050
27bc4     12 25 E2 F8 | 	getbyte	local04, local04, #0
27bc8     12 24 0E F2 | 	cmp	local04, #18 wz
27bcc     0C 12 06 A6 |  if_e	mov	arg01, #12
27bd0     00 14 06 A6 |  if_e	mov	arg02, #0
27bd4     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1140
27bd8                 | LR__4051
27bd8     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1126
27bdc                 | ' 	}
27bdc                 | ' 	deselect();
27bdc                 | ' 
27bdc                 | ' 	return count ? RES_ERROR : RES_OK;
27bdc     00 22 0E F2 | 	cmp	local03, #0 wz
27be0     01 26 06 56 |  if_ne	mov	local05, #1
27be4     00 26 06 A6 |  if_e	mov	local05, #0
27be8     13 FB 01 F6 | 	mov	result1, local05
27bec                 | LR__4052
27bec     A7 F0 03 F6 | 	mov	ptra, fp
27bf0     B2 00 A0 FD | 	call	#popregs_
27bf4                 | _fatfs_cc_disk_read_ret
27bf4     2D 00 64 FD | 	ret
27bf8                 | 
27bf8                 | _fatfs_cc_disk_write
27bf8     04 4A 05 F6 | 	mov	COUNT_, #4
27bfc     A8 00 A0 FD | 	call	#pushregs_
27c00     0A 1F 02 F6 | 	mov	local01, arg02
27c04     0C 21 02 F6 | 	mov	local02, arg04
27c08     0B 23 02 F6 | 	mov	local03, arg03
27c0c     00 12 0E F2 | 	cmp	arg01, #0 wz
27c10     01 FA 05 56 |  if_ne	mov	result1, #1
27c14                 | ' 
27c14                 | ' 	return Stat;
27c14     01 00 00 AF 
27c18     20 E4 05 A1 |  if_e	add	objptr, ##544
27c1c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27c20     01 00 00 AF 
27c24     20 E4 85 A1 |  if_e	sub	objptr, ##544
27c28     FD FA E1 F8 | 	getbyte	result1, result1, #0
27c2c     01 FA CD F7 | 	test	result1, #1 wz
27c30     03 FA 05 56 |  if_ne	mov	result1, #3
27c34     D4 00 90 5D |  if_ne	jmp	#LR__4064
27c38     01 00 00 FF 
27c3c     21 E4 05 F1 | 	add	objptr, ##545
27c40     F2 16 C2 FA | 	rdbyte	arg03, objptr
27c44     01 00 00 FF 
27c48     21 E4 85 F1 | 	sub	objptr, ##545
27c4c     08 16 CE F7 | 	test	arg03, #8 wz
27c50     09 22 66 A0 |  if_e	shl	local03, #9
27c54     01 20 0E F2 | 	cmp	local02, #1 wz
27c58     30 00 90 5D |  if_ne	jmp	#LR__4060
27c5c     18 12 06 F6 | 	mov	arg01, #24
27c60     11 15 02 F6 | 	mov	arg02, local03
27c64     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27c68     FD 24 02 F6 | 	mov	local04, result1
27c6c     07 24 4E F7 | 	zerox	local04, #7 wz
27c70     84 00 90 5D |  if_ne	jmp	#LR__4063
27c74     0F 13 02 F6 | 	mov	arg01, local01
27c78     FE 14 06 F6 | 	mov	arg02, #254
27c7c     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1136
27c80     00 FA 0D F2 | 	cmp	result1, #0 wz
27c84     00 20 06 56 |  if_ne	mov	local02, #0
27c88     6C 00 90 FD | 	jmp	#LR__4063
27c8c                 | LR__4060
27c8c     01 00 00 FF 
27c90     21 E4 05 F1 | 	add	objptr, ##545
27c94     F2 24 C2 FA | 	rdbyte	local04, objptr
27c98     01 00 00 FF 
27c9c     21 E4 85 F1 | 	sub	objptr, ##545
27ca0     06 24 CE F7 | 	test	local04, #6 wz
27ca4     97 12 06 56 |  if_ne	mov	arg01, #151
27ca8     10 15 02 56 |  if_ne	mov	arg02, local02
27cac     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1140
27cb0     11 15 02 F6 | 	mov	arg02, local03
27cb4     19 12 06 F6 | 	mov	arg01, #25
27cb8     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27cbc     FD 24 02 F6 | 	mov	local04, result1
27cc0     07 24 4E F7 | 	zerox	local04, #7 wz
27cc4     30 00 90 5D |  if_ne	jmp	#LR__4062
27cc8                 | ' 			do {
27cc8                 | LR__4061
27cc8     0F 13 02 F6 | 	mov	arg01, local01
27ccc     FC 14 06 F6 | 	mov	arg02, #252
27cd0     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1136
27cd4     00 FA 0D F2 | 	cmp	result1, #0 wz
27cd8     01 00 00 5F 
27cdc     00 1E 06 51 |  if_ne	add	local01, ##512
27ce0     F9 21 6E 5B |  if_ne	djnz	local02, #LR__4061
27ce4     00 12 06 F6 | 	mov	arg01, #0
27ce8     FD 14 06 F6 | 	mov	arg02, #253
27cec     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1136
27cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
27cf4     01 20 06 A6 |  if_e	mov	local02, #1
27cf8                 | LR__4062
27cf8                 | LR__4063
27cf8     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1126
27cfc                 | ' 				count = 1;
27cfc                 | ' 		}
27cfc                 | ' 	}
27cfc                 | ' 	deselect();
27cfc                 | ' 
27cfc                 | ' 	return count ? RES_ERROR : RES_OK;
27cfc     00 20 0E F2 | 	cmp	local02, #0 wz
27d00     01 24 06 56 |  if_ne	mov	local04, #1
27d04     00 24 06 A6 |  if_e	mov	local04, #0
27d08     12 FB 01 F6 | 	mov	result1, local04
27d0c                 | LR__4064
27d0c     A7 F0 03 F6 | 	mov	ptra, fp
27d10     B2 00 A0 FD | 	call	#popregs_
27d14                 | _fatfs_cc_disk_write_ret
27d14     2D 00 64 FD | 	ret
27d18                 | 
27d18                 | _fatfs_cc_disk_ioctl
27d18     01 4A 05 F6 | 	mov	COUNT_, #1
27d1c     A8 00 A0 FD | 	call	#pushregs_
27d20     30 F0 07 F1 | 	add	ptra, #48
27d24     04 4E 05 F1 | 	add	fp, #4
27d28     A7 12 42 FC | 	wrbyte	arg01, fp
27d2c     04 4E 05 F1 | 	add	fp, #4
27d30     A7 14 42 FC | 	wrbyte	arg02, fp
27d34     04 4E 05 F1 | 	add	fp, #4
27d38     A7 16 62 FC | 	wrlong	arg03, fp
27d3c     08 4E 85 F1 | 	sub	fp, #8
27d40     A7 12 CA FA | 	rdbyte	arg01, fp wz
27d44     04 4E 85 F1 | 	sub	fp, #4
27d48     01 FA 05 56 |  if_ne	mov	result1, #1
27d4c                 | ' 
27d4c                 | ' 	return Stat;
27d4c     01 00 00 AF 
27d50     20 E4 05 A1 |  if_e	add	objptr, ##544
27d54     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27d58     01 00 00 AF 
27d5c     20 E4 85 A1 |  if_e	sub	objptr, ##544
27d60     FD FA E1 F8 | 	getbyte	result1, result1, #0
27d64     01 FA CD F7 | 	test	result1, #1 wz
27d68     03 FA 05 56 |  if_ne	mov	result1, #3
27d6c     E4 01 90 5D |  if_ne	jmp	#LR__4078
27d70     10 4E 05 F1 | 	add	fp, #16
27d74     A7 02 68 FC | 	wrlong	#1, fp
27d78                 | ' 
27d78                 | ' 	res = RES_ERROR;
27d78                 | ' 	switch (ctrl) {
27d78     08 4E 85 F1 | 	sub	fp, #8
27d7c     A7 1E C2 FA | 	rdbyte	local01, fp
27d80     08 4E 85 F1 | 	sub	fp, #8
27d84     04 1E 26 F3 | 	fle	local01, #4
27d88     30 1E 62 FD | 	jmprel	local01
27d8c                 | LR__4070
27d8c     10 00 90 FD | 	jmp	#LR__4071
27d90     24 00 90 FD | 	jmp	#LR__4072
27d94     A0 01 90 FD | 	jmp	#LR__4076
27d98     80 01 90 FD | 	jmp	#LR__4075
27d9c     98 01 90 FD | 	jmp	#LR__4076
27da0                 | LR__4071
27da0     B4 79 B0 FD | 	call	#_fatfs_cc_select_1130
27da4     00 FA 0D F2 | 	cmp	result1, #0 wz
27da8     10 4E 05 51 |  if_ne	add	fp, #16
27dac     A7 00 68 5C |  if_ne	wrlong	#0, fp
27db0     10 4E 85 51 |  if_ne	sub	fp, #16
27db4                 | ' 			break;
27db4     8C 01 90 FD | 	jmp	#LR__4077
27db8                 | LR__4072
27db8     09 12 06 F6 | 	mov	arg01, #9
27dbc     00 14 06 F6 | 	mov	arg02, #0
27dc0     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27dc4     FD 1E 02 F6 | 	mov	local01, result1
27dc8     07 1E 4E F7 | 	zerox	local01, #7 wz
27dcc     74 01 90 5D |  if_ne	jmp	#LR__4077
27dd0     18 4E 05 F1 | 	add	fp, #24
27dd4     A7 12 02 F6 | 	mov	arg01, fp
27dd8     18 4E 85 F1 | 	sub	fp, #24
27ddc     10 14 06 F6 | 	mov	arg02, #16
27de0     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1134
27de4     00 FA 0D F2 | 	cmp	result1, #0 wz
27de8     58 01 90 AD |  if_e	jmp	#LR__4077
27dec     18 4E 05 F1 | 	add	fp, #24
27df0     A7 1E C2 FA | 	rdbyte	local01, fp
27df4     18 4E 85 F1 | 	sub	fp, #24
27df8     06 1E 46 F0 | 	shr	local01, #6
27dfc     01 1E 0E F2 | 	cmp	local01, #1 wz
27e00     5C 00 90 5D |  if_ne	jmp	#LR__4073
27e04     21 4E 05 F1 | 	add	fp, #33
27e08     A7 1E C2 FA | 	rdbyte	local01, fp
27e0c     01 4E 85 F1 | 	sub	fp, #1
27e10     A7 FA C1 FA | 	rdbyte	result1, fp
27e14     FD FA 31 F9 | 	getword	result1, result1, #0
27e18     08 FA 65 F0 | 	shl	result1, #8
27e1c     FD 1E 02 F1 | 	add	local01, result1
27e20     01 4E 85 F1 | 	sub	fp, #1
27e24     A7 FA C1 FA | 	rdbyte	result1, fp
27e28     3F FA 05 F5 | 	and	result1, #63
27e2c     10 FA 65 F0 | 	shl	result1, #16
27e30     FD 1E 02 F1 | 	add	local01, result1
27e34     01 1E 06 F1 | 	add	local01, #1
27e38     09 4E 05 F1 | 	add	fp, #9
27e3c     A7 1E 62 FC | 	wrlong	local01, fp
27e40     1C 4E 85 F1 | 	sub	fp, #28
27e44     A7 1E 02 FB | 	rdlong	local01, fp
27e48     1C 4E 05 F1 | 	add	fp, #28
27e4c     A7 FA 01 FB | 	rdlong	result1, fp
27e50     28 4E 85 F1 | 	sub	fp, #40
27e54     0A FA 65 F0 | 	shl	result1, #10
27e58     0F FB 61 FC | 	wrlong	result1, local01
27e5c     AC 00 90 FD | 	jmp	#LR__4074
27e60                 | LR__4073
27e60     1D 4E 05 F1 | 	add	fp, #29
27e64     A7 1E C2 FA | 	rdbyte	local01, fp
27e68     0F 1F 42 F8 | 	getnib	local01, local01, #0
27e6c     05 4E 05 F1 | 	add	fp, #5
27e70     A7 FA C1 FA | 	rdbyte	result1, fp
27e74     80 FA 05 F5 | 	and	result1, #128
27e78     07 FA C5 F0 | 	sar	result1, #7
27e7c     FD 1E 02 F1 | 	add	local01, result1
27e80     01 4E 85 F1 | 	sub	fp, #1
27e84     A7 FA C1 FA | 	rdbyte	result1, fp
27e88     03 FA 05 F5 | 	and	result1, #3
27e8c     01 FA 65 F0 | 	shl	result1, #1
27e90     FD 1E 02 F1 | 	add	local01, result1
27e94     02 1E 06 F1 | 	add	local01, #2
27e98     0D 4E 85 F1 | 	sub	fp, #13
27e9c     A7 1E 42 FC | 	wrbyte	local01, fp
27ea0     0C 4E 05 F1 | 	add	fp, #12
27ea4     A7 1E C2 FA | 	rdbyte	local01, fp
27ea8     06 1E 46 F0 | 	shr	local01, #6
27eac     01 4E 85 F1 | 	sub	fp, #1
27eb0     A7 FA C1 FA | 	rdbyte	result1, fp
27eb4     FD FA 31 F9 | 	getword	result1, result1, #0
27eb8     02 FA 65 F0 | 	shl	result1, #2
27ebc     FD 1E 02 F1 | 	add	local01, result1
27ec0     01 4E 85 F1 | 	sub	fp, #1
27ec4     A7 FA C1 FA | 	rdbyte	result1, fp
27ec8     03 FA 05 F5 | 	and	result1, #3
27ecc     FD FA 31 F9 | 	getword	result1, result1, #0
27ed0     0A FA 65 F0 | 	shl	result1, #10
27ed4     FD 1E 02 F1 | 	add	local01, result1
27ed8     01 1E 06 F1 | 	add	local01, #1
27edc     0A 4E 05 F1 | 	add	fp, #10
27ee0     A7 1E 62 FC | 	wrlong	local01, fp
27ee4     1C 4E 85 F1 | 	sub	fp, #28
27ee8     A7 1E 02 FB | 	rdlong	local01, fp
27eec     1C 4E 05 F1 | 	add	fp, #28
27ef0     A7 FA 01 FB | 	rdlong	result1, fp
27ef4     14 4E 85 F1 | 	sub	fp, #20
27ef8     A7 16 C2 FA | 	rdbyte	arg03, fp
27efc     14 4E 85 F1 | 	sub	fp, #20
27f00     09 16 86 F1 | 	sub	arg03, #9
27f04     0B FB 61 F0 | 	shl	result1, arg03
27f08     0F FB 61 FC | 	wrlong	result1, local01
27f0c                 | LR__4074
27f0c     10 4E 05 F1 | 	add	fp, #16
27f10     A7 00 68 FC | 	wrlong	#0, fp
27f14     10 4E 85 F1 | 	sub	fp, #16
27f18                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
27f18                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
27f18                 | ' 					*(LBA_t*)buff = cs << (n - 9);
27f18                 | ' 				}
27f18                 | ' 				res = RES_OK;
27f18                 | ' 			}
27f18                 | ' 			break;
27f18     28 00 90 FD | 	jmp	#LR__4077
27f1c                 | LR__4075
27f1c     0C 4E 05 F1 | 	add	fp, #12
27f20     A7 1E 02 FB | 	rdlong	local01, fp
27f24     0F 01 69 FC | 	wrlong	#128, local01
27f28     04 4E 05 F1 | 	add	fp, #4
27f2c     A7 00 68 FC | 	wrlong	#0, fp
27f30     10 4E 85 F1 | 	sub	fp, #16
27f34                 | ' 			*(DWORD*)buff = 128;
27f34                 | ' 			res = RES_OK;
27f34                 | ' 			break;
27f34     0C 00 90 FD | 	jmp	#LR__4077
27f38                 | LR__4076
27f38     10 4E 05 F1 | 	add	fp, #16
27f3c     A7 08 68 FC | 	wrlong	#4, fp
27f40     10 4E 85 F1 | 	sub	fp, #16
27f44                 | LR__4077
27f44     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1126
27f48                 | ' 			res = RES_PARERR;
27f48                 | ' 	}
27f48                 | ' 
27f48                 | ' 	deselect();
27f48                 | ' 
27f48                 | ' 	return res;
27f48     10 4E 05 F1 | 	add	fp, #16
27f4c     A7 FA 01 FB | 	rdlong	result1, fp
27f50     10 4E 85 F1 | 	sub	fp, #16
27f54                 | LR__4078
27f54     A7 F0 03 F6 | 	mov	ptra, fp
27f58     B2 00 A0 FD | 	call	#popregs_
27f5c                 | _fatfs_cc_disk_ioctl_ret
27f5c     2D 00 64 FD | 	ret
27f60                 | 
27f60                 | _fatfs_cc_disk_setpins
27f60     00 12 0E F2 | 	cmp	arg01, #0 wz
27f64     01 FA 65 56 |  if_ne	neg	result1, #1
27f68     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
27f6c     01 00 00 FF 
27f70     10 E4 05 F1 | 	add	objptr, ##528
27f74     F2 14 62 FC | 	wrlong	arg02, objptr
27f78     04 E4 05 F1 | 	add	objptr, #4
27f7c     F2 16 62 FC | 	wrlong	arg03, objptr
27f80     04 E4 05 F1 | 	add	objptr, #4
27f84     F2 18 62 FC | 	wrlong	arg04, objptr
27f88     04 E4 05 F1 | 	add	objptr, #4
27f8c     F2 1A 62 FC | 	wrlong	arg05, objptr
27f90     01 00 00 FF 
27f94     1C E4 85 F1 | 	sub	objptr, ##540
27f98     00 FA 05 F6 | 	mov	result1, #0
27f9c                 | _fatfs_cc_disk_setpins_ret
27f9c     2D 00 64 FD | 	ret
27fa0                 | 
27fa0                 | _fatfs_cc_tchar2uni
27fa0     09 01 02 FB | 	rdlong	_var01, arg01
27fa4     00 03 02 F6 | 	mov	_var02, _var01
27fa8     01 00 06 F1 | 	add	_var01, #1
27fac     00 05 02 F6 | 	mov	_var03, _var01
27fb0     01 07 C2 FA | 	rdbyte	_var04, _var02
27fb4     80 06 CE F7 | 	test	_var04, #128 wz
27fb8     E8 00 90 AD |  if_e	jmp	#LR__4087
27fbc     03 09 02 F6 | 	mov	_var05, _var04
27fc0     E0 08 06 F5 | 	and	_var05, #224
27fc4     C0 08 0E F2 | 	cmp	_var05, #192 wz
27fc8     1F 06 06 A5 |  if_e	and	_var04, #31
27fcc     01 0A 06 A6 |  if_e	mov	_var06, #1
27fd0     34 00 90 AD |  if_e	jmp	#LR__4081
27fd4     03 09 02 F6 | 	mov	_var05, _var04
27fd8     F0 08 06 F5 | 	and	_var05, #240
27fdc     E0 08 0E F2 | 	cmp	_var05, #224 wz
27fe0     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
27fe4     02 0A 06 A6 |  if_e	mov	_var06, #2
27fe8     1C 00 90 AD |  if_e	jmp	#LR__4080
27fec     03 09 02 F6 | 	mov	_var05, _var04
27ff0     F8 08 06 F5 | 	and	_var05, #248
27ff4     F0 08 0E F2 | 	cmp	_var05, #240 wz
27ff8     07 06 06 A5 |  if_e	and	_var04, #7
27ffc     03 0A 06 A6 |  if_e	mov	_var06, #3
28000                 | ' 			return 0xFFFFFFFF;
28000     01 FA 65 56 |  if_ne	neg	result1, #1
28004     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
28008                 | LR__4080
28008                 | LR__4081
28008                 | ' 		}
28008                 | ' 		do {
28008                 | LR__4082
28008     02 0D C2 FA | 	rdbyte	_var07, _var03
2800c     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
28010     C0 08 06 F5 | 	and	_var05, #192
28014     80 08 0E F2 | 	cmp	_var05, #128 wz
28018     01 04 06 F1 | 	add	_var03, #1
2801c     01 FA 65 56 |  if_ne	neg	result1, #1
28020     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
28024     06 06 66 F0 | 	shl	_var04, #6
28028     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
2802c     3F 02 06 F5 | 	and	_var02, #63
28030     01 07 42 F5 | 	or	_var04, _var02
28034     F4 0B 6E FB | 	djnz	_var06, #LR__4082
28038     80 06 16 F2 | 	cmp	_var04, #128 wc
2803c     24 00 90 CD |  if_b	jmp	#LR__4084
28040     6C 00 00 FF 
28044     00 06 16 F2 | 	cmp	_var04, ##55296 wc
28048     0C 00 90 CD |  if_b	jmp	#LR__4083
2804c     70 00 00 FF 
28050     00 06 16 F2 | 	cmp	_var04, ##57344 wc
28054     0C 00 90 CD |  if_b	jmp	#LR__4084
28058                 | LR__4083
28058     80 08 00 FF 
2805c     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
28060     08 00 90 CD |  if_b	jmp	#LR__4085
28064                 | LR__4084
28064     01 FA 65 F6 | 	neg	result1, #1
28068     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2806c                 | LR__4085
2806c     80 00 00 FF 
28070     00 06 16 F2 | 	cmp	_var04, ##65536 wc
28074     2C 00 90 CD |  if_b	jmp	#LR__4086
28078     03 03 02 F6 | 	mov	_var02, _var04
2807c     80 00 00 FF 
28080     00 02 86 F1 | 	sub	_var02, ##65536
28084     06 02 66 F0 | 	shl	_var02, #6
28088     80 FF 01 FF 
2808c     00 02 06 F5 | 	and	_var02, ##67043328
28090     6E 00 6C FF 
28094     00 08 06 F6 | 	mov	_var05, ##-671032320
28098     01 09 42 F5 | 	or	_var05, _var02
2809c     09 06 46 F7 | 	zerox	_var04, #9
280a0     04 07 42 F5 | 	or	_var04, _var05
280a4                 | LR__4086
280a4                 | LR__4087
280a4     09 05 62 FC | 	wrlong	_var03, arg01
280a8                 | ' 	}
280a8                 | ' #line 811 "ff.c"
280a8                 | ' 	*str = p;
280a8                 | ' 	return uc;
280a8     03 FB 01 F6 | 	mov	result1, _var04
280ac                 | _fatfs_cc_tchar2uni_ret
280ac     2D 00 64 FD | 	ret
280b0                 | 
280b0                 | _fatfs_cc_put_utf
280b0     80 12 16 F2 | 	cmp	arg01, #128 wc
280b4     18 00 90 3D |  if_ae	jmp	#LR__4090
280b8     01 16 16 F2 | 	cmp	arg03, #1 wc
280bc     00 FA 05 C6 |  if_b	mov	result1, #0
280c0     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
280c4     0A 13 42 FC | 	wrbyte	arg01, arg02
280c8                 | ' 		*buf = (TCHAR)chr;
280c8                 | ' 		return 1;
280c8     01 FA 05 F6 | 	mov	result1, #1
280cc     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
280d0                 | LR__4090
280d0     04 00 00 FF 
280d4     00 12 16 F2 | 	cmp	arg01, ##2048 wc
280d8     40 00 90 3D |  if_ae	jmp	#LR__4091
280dc     02 16 16 F2 | 	cmp	arg03, #2 wc
280e0     00 FA 05 C6 |  if_b	mov	result1, #0
280e4     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
280e8     09 FB 01 F6 | 	mov	result1, arg01
280ec     06 FA 45 F0 | 	shr	result1, #6
280f0     1F FA 05 F5 | 	and	result1, #31
280f4     C0 16 06 F6 | 	mov	arg03, #192
280f8     FD 16 42 F5 | 	or	arg03, result1
280fc     0A 17 42 FC | 	wrbyte	arg03, arg02
28100     01 14 06 F1 | 	add	arg02, #1
28104     3F 12 06 F5 | 	and	arg01, #63
28108     80 FA 05 F6 | 	mov	result1, #128
2810c     09 FB 41 F5 | 	or	result1, arg01
28110     0A FB 41 FC | 	wrbyte	result1, arg02
28114                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
28114                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
28114                 | ' 		return 2;
28114     02 FA 05 F6 | 	mov	result1, #2
28118     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2811c                 | LR__4091
2811c     80 00 00 FF 
28120     00 12 16 F2 | 	cmp	arg01, ##65536 wc
28124     70 00 90 3D |  if_ae	jmp	#LR__4094
28128     03 16 16 F2 | 	cmp	arg03, #3 wc
2812c     18 00 90 CD |  if_b	jmp	#LR__4092
28130     6C 00 00 FF 
28134     00 12 16 F2 | 	cmp	arg01, ##55296 wc
28138     14 00 90 CD |  if_b	jmp	#LR__4093
2813c     70 00 00 FF 
28140     00 12 16 F2 | 	cmp	arg01, ##57344 wc
28144     08 00 90 3D |  if_ae	jmp	#LR__4093
28148                 | LR__4092
28148     00 FA 05 F6 | 	mov	result1, #0
2814c     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
28150                 | LR__4093
28150     09 FB 59 F8 | 	getnib	result1, arg01, #3
28154     E0 16 06 F6 | 	mov	arg03, #224
28158     FD 16 42 F5 | 	or	arg03, result1
2815c     0A 17 42 FC | 	wrbyte	arg03, arg02
28160     01 14 06 F1 | 	add	arg02, #1
28164     09 FB 01 F6 | 	mov	result1, arg01
28168     06 FA 45 F0 | 	shr	result1, #6
2816c     3F FA 05 F5 | 	and	result1, #63
28170     80 16 06 F6 | 	mov	arg03, #128
28174     FD 16 42 F5 | 	or	arg03, result1
28178     0A 17 42 FC | 	wrbyte	arg03, arg02
2817c     01 14 06 F1 | 	add	arg02, #1
28180     3F 12 06 F5 | 	and	arg01, #63
28184     80 FA 05 F6 | 	mov	result1, #128
28188     09 FB 41 F5 | 	or	result1, arg01
2818c     0A FB 41 FC | 	wrbyte	result1, arg02
28190                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
28190                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
28190                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
28190                 | ' 		return 3;
28190     03 FA 05 F6 | 	mov	result1, #3
28194     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
28198                 | LR__4094
28198     04 16 16 F2 | 	cmp	arg03, #4 wc
2819c     00 FA 05 C6 |  if_b	mov	result1, #0
281a0     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
281a4     09 01 02 F6 | 	mov	_var01, arg01
281a8     E0 01 06 F4 | 	bitl	_var01, #480
281ac     00 00 6C FF 
281b0     00 00 86 F1 | 	sub	_var01, ##-671088640
281b4     06 00 46 F0 | 	shr	_var01, #6
281b8     09 13 32 F9 | 	getword	arg01, arg01, #0
281bc     6E 00 00 FF 
281c0     00 12 86 F1 | 	sub	arg01, ##56320
281c4     00 08 00 FF 
281c8     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
281cc     02 00 00 CF 
281d0     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
281d4     00 FA 05 36 |  if_ae	mov	result1, #0
281d8     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
281dc     09 01 42 F5 | 	or	_var01, arg01
281e0     80 00 00 FF 
281e4     00 00 06 F1 | 	add	_var01, ##65536
281e8     00 FB 01 F6 | 	mov	result1, _var01
281ec     12 FA 45 F0 | 	shr	result1, #18
281f0     07 FA 05 F5 | 	and	result1, #7
281f4     F0 16 06 F6 | 	mov	arg03, #240
281f8     FD 16 42 F5 | 	or	arg03, result1
281fc     0A 17 42 FC | 	wrbyte	arg03, arg02
28200     01 14 06 F1 | 	add	arg02, #1
28204     00 FB 01 F6 | 	mov	result1, _var01
28208     0C FA 45 F0 | 	shr	result1, #12
2820c     3F FA 05 F5 | 	and	result1, #63
28210     80 16 06 F6 | 	mov	arg03, #128
28214     FD 16 42 F5 | 	or	arg03, result1
28218     0A 17 42 FC | 	wrbyte	arg03, arg02
2821c     01 14 06 F1 | 	add	arg02, #1
28220     00 FB 01 F6 | 	mov	result1, _var01
28224     06 FA 45 F0 | 	shr	result1, #6
28228     3F FA 05 F5 | 	and	result1, #63
2822c     80 16 06 F6 | 	mov	arg03, #128
28230     FD 16 42 F5 | 	or	arg03, result1
28234     0A 17 42 FC | 	wrbyte	arg03, arg02
28238     01 14 06 F1 | 	add	arg02, #1
2823c     3F 00 06 F5 | 	and	_var01, #63
28240     80 FA 05 F6 | 	mov	result1, #128
28244     00 FB 41 F5 | 	or	result1, _var01
28248     0A FB 41 FC | 	wrbyte	result1, arg02
2824c                 | ' 	chr = (hc | chr) + 0x10000;
2824c                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2824c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2824c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2824c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2824c                 | ' 	return 4;
2824c     04 FA 05 F6 | 	mov	result1, #4
28250                 | _fatfs_cc_put_utf_ret
28250     2D 00 64 FD | 	ret
28254                 | 
28254                 | _fatfs_cc_sync_window
28254     02 4A 05 F6 | 	mov	COUNT_, #2
28258     A8 00 A0 FD | 	call	#pushregs_
2825c     09 1F 02 F6 | 	mov	local01, arg01
28260     00 20 06 F6 | 	mov	local02, #0
28264     03 1E 06 F1 | 	add	local01, #3
28268     0F FB C9 FA | 	rdbyte	result1, local01 wz
2826c     03 1E 86 F1 | 	sub	local01, #3
28270     A4 00 90 AD |  if_e	jmp	#LR__4102
28274     01 1E 06 F1 | 	add	local01, #1
28278     0F 13 C2 FA | 	rdbyte	arg01, local01
2827c     33 1E 06 F1 | 	add	local01, #51
28280     0F 15 02 F6 | 	mov	arg02, local01
28284     04 1E 86 F1 | 	sub	local01, #4
28288     0F 17 02 FB | 	rdlong	arg03, local01
2828c     30 1E 86 F1 | 	sub	local01, #48
28290     01 18 06 F6 | 	mov	arg04, #1
28294     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
28298     00 FA 0D F2 | 	cmp	result1, #0 wz
2829c     74 00 90 5D |  if_ne	jmp	#LR__4100
282a0     03 1E 06 F1 | 	add	local01, #3
282a4     0F 01 48 FC | 	wrbyte	#0, local01
282a8     2D 1E 06 F1 | 	add	local01, #45
282ac     0F FB 01 FB | 	rdlong	result1, local01
282b0     0C 1E 86 F1 | 	sub	local01, #12
282b4     0F 19 02 FB | 	rdlong	arg04, local01
282b8     0C FB 81 F1 | 	sub	result1, arg04
282bc     08 1E 86 F1 | 	sub	local01, #8
282c0     0F 19 02 FB | 	rdlong	arg04, local01
282c4     1C 1E 86 F1 | 	sub	local01, #28
282c8     0C FB 11 F2 | 	cmp	result1, arg04 wc
282cc     48 00 90 3D |  if_ae	jmp	#LR__4101
282d0     02 1E 06 F1 | 	add	local01, #2
282d4     0F 19 C2 FA | 	rdbyte	arg04, local01
282d8     02 1E 86 F1 | 	sub	local01, #2
282dc     02 18 0E F2 | 	cmp	arg04, #2 wz
282e0     34 00 90 5D |  if_ne	jmp	#LR__4101
282e4     01 1E 06 F1 | 	add	local01, #1
282e8     0F 13 C2 FA | 	rdbyte	arg01, local01
282ec     33 1E 06 F1 | 	add	local01, #51
282f0     0F 15 02 F6 | 	mov	arg02, local01
282f4     04 1E 86 F1 | 	sub	local01, #4
282f8     0F 17 02 FB | 	rdlong	arg03, local01
282fc     14 1E 86 F1 | 	sub	local01, #20
28300     0F 1F 02 FB | 	rdlong	local01, local01
28304     0F 17 02 F1 | 	add	arg03, local01
28308     01 18 06 F6 | 	mov	arg04, #1
2830c     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
28310     04 00 90 FD | 	jmp	#LR__4101
28314                 | LR__4100
28314     01 20 06 F6 | 	mov	local02, #1
28318                 | LR__4101
28318                 | LR__4102
28318                 | ' 			res = FR_DISK_ERR;
28318                 | ' 		}
28318                 | ' 	}
28318                 | ' 	return res;
28318     10 FB 01 F6 | 	mov	result1, local02
2831c     A7 F0 03 F6 | 	mov	ptra, fp
28320     B2 00 A0 FD | 	call	#popregs_
28324                 | _fatfs_cc_sync_window_ret
28324     2D 00 64 FD | 	ret
28328                 | 
28328                 | _fatfs_cc_move_window
28328     03 4A 05 F6 | 	mov	COUNT_, #3
2832c     A8 00 A0 FD | 	call	#pushregs_
28330     09 1F 02 F6 | 	mov	local01, arg01
28334     0A 21 02 F6 | 	mov	local02, arg02
28338     00 22 06 F6 | 	mov	local03, #0
2833c     30 1E 06 F1 | 	add	local01, #48
28340     0F 19 02 FB | 	rdlong	arg04, local01
28344     30 1E 86 F1 | 	sub	local01, #48
28348     0C 21 0A F2 | 	cmp	local02, arg04 wz
2834c     40 00 90 AD |  if_e	jmp	#LR__4111
28350     0F 13 02 F6 | 	mov	arg01, local01
28354     FC FE BF FD | 	call	#_fatfs_cc_sync_window
28358     FD 22 0A F6 | 	mov	local03, result1 wz
2835c     30 00 90 5D |  if_ne	jmp	#LR__4110
28360     01 1E 06 F1 | 	add	local01, #1
28364     0F 13 C2 FA | 	rdbyte	arg01, local01
28368     33 1E 06 F1 | 	add	local01, #51
2836c     0F 15 02 F6 | 	mov	arg02, local01
28370     10 17 02 F6 | 	mov	arg03, local02
28374     01 18 06 F6 | 	mov	arg04, #1
28378     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
2837c     00 FA 0D F2 | 	cmp	result1, #0 wz
28380     01 20 66 56 |  if_ne	neg	local02, #1
28384     01 22 06 56 |  if_ne	mov	local03, #1
28388     04 1E 86 F1 | 	sub	local01, #4
2838c     0F 21 62 FC | 	wrlong	local02, local01
28390                 | LR__4110
28390                 | LR__4111
28390                 | ' 				sect = (LBA_t)0 - 1;
28390                 | ' 				res = FR_DISK_ERR;
28390                 | ' 			}
28390                 | ' 			fs->winsect = sect;
28390                 | ' 		}
28390                 | ' 	}
28390                 | ' 	return res;
28390     11 FB 01 F6 | 	mov	result1, local03
28394     A7 F0 03 F6 | 	mov	ptra, fp
28398     B2 00 A0 FD | 	call	#popregs_
2839c                 | _fatfs_cc_move_window_ret
2839c     2D 00 64 FD | 	ret
283a0                 | 
283a0                 | _fatfs_cc_sync_fs
283a0     02 4A 05 F6 | 	mov	COUNT_, #2
283a4     A8 00 A0 FD | 	call	#pushregs_
283a8     09 1F 02 F6 | 	mov	local01, arg01
283ac     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
283b0     FD 20 0A F6 | 	mov	local02, result1 wz
283b4     D8 00 90 5D |  if_ne	jmp	#LR__4121
283b8     0F 19 C2 FA | 	rdbyte	arg04, local01
283bc     03 18 0E F2 | 	cmp	arg04, #3 wz
283c0     04 1E 06 A1 |  if_e	add	local01, #4
283c4     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
283c8     04 1E 86 A1 |  if_e	sub	local01, #4
283cc     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
283d0     A0 00 90 5D |  if_ne	jmp	#LR__4120
283d4     34 1E 06 F1 | 	add	local01, #52
283d8     0F 13 02 F6 | 	mov	arg01, local01
283dc     00 14 06 F6 | 	mov	arg02, #0
283e0     09 16 C6 F9 | 	decod	arg03, #9
283e4     98 00 A0 FD | 	call	#\builtin_bytefill_
283e8     0F 13 02 F6 | 	mov	arg01, local01
283ec     FE 13 06 F1 | 	add	arg01, #510
283f0     55 00 80 FF 
283f4     09 AB 58 FC | 	wrword	##43605, arg01
283f8     A9 B0 A0 FF 
283fc     0F A5 68 FC | 	wrlong	##1096897106, local01
28400     0F 13 02 F6 | 	mov	arg01, local01
28404     E4 13 06 F1 | 	add	arg01, #484
28408     B9 A0 B0 FF 
2840c     09 E5 68 FC | 	wrlong	##1631679090, arg01
28410     0F 13 02 F6 | 	mov	arg01, local01
28414     E8 13 06 F1 | 	add	arg01, #488
28418     20 1E 86 F1 | 	sub	local01, #32
2841c     0F 15 02 FB | 	rdlong	arg02, local01
28420     09 15 62 FC | 	wrlong	arg02, arg01
28424     20 1E 06 F1 | 	add	local01, #32
28428     0F 13 02 F6 | 	mov	arg01, local01
2842c     EC 13 06 F1 | 	add	arg01, #492
28430     24 1E 86 F1 | 	sub	local01, #36
28434     0F 15 02 FB | 	rdlong	arg02, local01
28438     09 15 62 FC | 	wrlong	arg02, arg01
2843c     10 1E 06 F1 | 	add	local01, #16
28440     0F 17 02 FB | 	rdlong	arg03, local01
28444     01 16 06 F1 | 	add	arg03, #1
28448     10 1E 06 F1 | 	add	local01, #16
2844c     0F 17 62 FC | 	wrlong	arg03, local01
28450     2F 1E 86 F1 | 	sub	local01, #47
28454     0F 13 C2 FA | 	rdbyte	arg01, local01
28458     33 1E 06 F1 | 	add	local01, #51
2845c     0F 15 02 F6 | 	mov	arg02, local01
28460     01 18 06 F6 | 	mov	arg04, #1
28464     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
28468     30 1E 86 F1 | 	sub	local01, #48
2846c     0F 01 48 FC | 	wrbyte	#0, local01
28470     04 1E 86 F1 | 	sub	local01, #4
28474                 | LR__4120
28474     01 1E 06 F1 | 	add	local01, #1
28478     0F 13 C2 FA | 	rdbyte	arg01, local01
2847c     00 14 06 F6 | 	mov	arg02, #0
28480     00 16 06 F6 | 	mov	arg03, #0
28484     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
28488     00 FA 0D F2 | 	cmp	result1, #0 wz
2848c     01 20 06 56 |  if_ne	mov	local02, #1
28490                 | LR__4121
28490                 | ' 	}
28490                 | ' 
28490                 | ' 	return res;
28490     10 FB 01 F6 | 	mov	result1, local02
28494     A7 F0 03 F6 | 	mov	ptra, fp
28498     B2 00 A0 FD | 	call	#popregs_
2849c                 | _fatfs_cc_sync_fs_ret
2849c     2D 00 64 FD | 	ret
284a0                 | 
284a0                 | _fatfs_cc_clst2sect
284a0     02 14 86 F1 | 	sub	arg02, #2
284a4     18 12 06 F1 | 	add	arg01, #24
284a8     09 01 02 FB | 	rdlong	_var01, arg01
284ac     18 12 86 F1 | 	sub	arg01, #24
284b0     02 00 86 F1 | 	sub	_var01, #2
284b4     00 15 12 F2 | 	cmp	arg02, _var01 wc
284b8     00 FA 05 36 |  if_ae	mov	result1, #0
284bc     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
284c0     0A 12 06 F1 | 	add	arg01, #10
284c4     09 01 E2 FA | 	rdword	_var01, arg01
284c8     0A 01 02 FD | 	qmul	_var01, arg02
284cc                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
284cc     22 12 06 F1 | 	add	arg01, #34
284d0     09 FB 01 FB | 	rdlong	result1, arg01
284d4     18 00 62 FD | 	getqx	_var01
284d8     00 FB 01 F1 | 	add	result1, _var01
284dc                 | _fatfs_cc_clst2sect_ret
284dc     2D 00 64 FD | 	ret
284e0                 | 
284e0                 | _fatfs_cc_get_fat
284e0     07 4A 05 F6 | 	mov	COUNT_, #7
284e4     A8 00 A0 FD | 	call	#pushregs_
284e8     0A 1F 02 F6 | 	mov	local01, arg02
284ec     09 21 02 FB | 	rdlong	local02, arg01
284f0     02 1E 16 F2 | 	cmp	local01, #2 wc
284f4     14 00 90 CD |  if_b	jmp	#LR__4130
284f8     18 20 06 F1 | 	add	local02, #24
284fc     10 23 02 FB | 	rdlong	local03, local02
28500     18 20 86 F1 | 	sub	local02, #24
28504     11 1F 12 F2 | 	cmp	local01, local03 wc
28508     08 00 90 CD |  if_b	jmp	#LR__4131
2850c                 | LR__4130
2850c     01 24 06 F6 | 	mov	local04, #1
28510     60 01 90 FD | 	jmp	#LR__4138
28514                 | LR__4131
28514     01 24 66 F6 | 	neg	local04, #1
28518                 | ' 		val = 0xFFFFFFFF;
28518                 | ' 
28518                 | ' 		switch (fs->fs_type) {
28518     10 27 C2 FA | 	rdbyte	local05, local02
2851c     01 26 86 F1 | 	sub	local05, #1
28520     03 26 26 F3 | 	fle	local05, #3
28524     30 26 62 FD | 	jmprel	local05
28528                 | LR__4132
28528     0C 00 90 FD | 	jmp	#LR__4133
2852c     B8 00 90 FD | 	jmp	#LR__4134
28530     F8 00 90 FD | 	jmp	#LR__4135
28534     38 01 90 FD | 	jmp	#LR__4136
28538                 | LR__4133
28538     0F 27 02 F6 | 	mov	local05, local01
2853c     0F 13 02 F6 | 	mov	arg01, local01
28540     01 12 46 F0 | 	shr	arg01, #1
28544     09 27 02 F1 | 	add	local05, arg01
28548     10 13 02 F6 | 	mov	arg01, local02
2854c     13 29 02 F6 | 	mov	local06, local05
28550     09 28 46 F0 | 	shr	local06, #9
28554     24 20 06 F1 | 	add	local02, #36
28558     10 15 02 FB | 	rdlong	arg02, local02
2855c     24 20 86 F1 | 	sub	local02, #36
28560     14 15 02 F1 | 	add	arg02, local06
28564     C0 FD BF FD | 	call	#_fatfs_cc_move_window
28568     00 FA 0D F2 | 	cmp	result1, #0 wz
2856c     04 01 90 5D |  if_ne	jmp	#LR__4137
28570     13 29 02 F6 | 	mov	local06, local05
28574     FF 29 06 F5 | 	and	local06, #511
28578     34 20 06 F1 | 	add	local02, #52
2857c     10 29 02 F1 | 	add	local06, local02
28580     14 2B C2 FA | 	rdbyte	local07, local06
28584     34 20 86 F1 | 	sub	local02, #52
28588     10 13 02 F6 | 	mov	arg01, local02
2858c     01 26 06 F1 | 	add	local05, #1
28590     13 29 02 F6 | 	mov	local06, local05
28594     09 28 46 F0 | 	shr	local06, #9
28598     24 20 06 F1 | 	add	local02, #36
2859c     10 15 02 FB | 	rdlong	arg02, local02
285a0     24 20 86 F1 | 	sub	local02, #36
285a4     14 15 02 F1 | 	add	arg02, local06
285a8     7C FD BF FD | 	call	#_fatfs_cc_move_window
285ac     00 FA 0D F2 | 	cmp	result1, #0 wz
285b0     C0 00 90 5D |  if_ne	jmp	#LR__4137
285b4     FF 27 06 F5 | 	and	local05, #511
285b8     34 20 06 F1 | 	add	local02, #52
285bc     10 27 02 F1 | 	add	local05, local02
285c0     13 29 C2 FA | 	rdbyte	local06, local05
285c4     08 28 66 F0 | 	shl	local06, #8
285c8     14 2B 42 F5 | 	or	local07, local06
285cc     01 1E CE F7 | 	test	local01, #1 wz
285d0     04 2A 46 50 |  if_ne	shr	local07, #4
285d4     15 23 02 56 |  if_ne	mov	local03, local07
285d8     0B 2A 46 A7 |  if_e	zerox	local07, #11
285dc     15 23 02 A6 |  if_e	mov	local03, local07
285e0     11 25 02 F6 | 	mov	local04, local03
285e4                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
285e4                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
285e4                 | ' 			break;
285e4     8C 00 90 FD | 	jmp	#LR__4137
285e8                 | LR__4134
285e8     10 13 02 F6 | 	mov	arg01, local02
285ec     0F 29 02 F6 | 	mov	local06, local01
285f0     08 28 46 F0 | 	shr	local06, #8
285f4     24 20 06 F1 | 	add	local02, #36
285f8     10 15 02 FB | 	rdlong	arg02, local02
285fc     24 20 86 F1 | 	sub	local02, #36
28600     14 15 02 F1 | 	add	arg02, local06
28604     20 FD BF FD | 	call	#_fatfs_cc_move_window
28608     00 FA 0D F2 | 	cmp	result1, #0 wz
2860c     64 00 90 5D |  if_ne	jmp	#LR__4137
28610     34 20 06 F1 | 	add	local02, #52
28614     01 1E 66 F0 | 	shl	local01, #1
28618     FF 1F 06 F5 | 	and	local01, #511
2861c     0F 21 02 F1 | 	add	local02, local01
28620                 | ' {
28620                 | ' 
28620                 | ' 	return *((WORD*)ptr);
28620     10 FB E1 FA | 	rdword	result1, local02
28624     FD 24 32 F9 | 	getword	local04, result1, #0
28628                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
28628                 | ' 			break;
28628     48 00 90 FD | 	jmp	#LR__4137
2862c                 | LR__4135
2862c     10 13 02 F6 | 	mov	arg01, local02
28630     0F 29 02 F6 | 	mov	local06, local01
28634     07 28 46 F0 | 	shr	local06, #7
28638     24 20 06 F1 | 	add	local02, #36
2863c     10 15 02 FB | 	rdlong	arg02, local02
28640     24 20 86 F1 | 	sub	local02, #36
28644     14 15 02 F1 | 	add	arg02, local06
28648     DC FC BF FD | 	call	#_fatfs_cc_move_window
2864c     00 FA 0D F2 | 	cmp	result1, #0 wz
28650     20 00 90 5D |  if_ne	jmp	#LR__4137
28654     34 20 06 F1 | 	add	local02, #52
28658     02 1E 66 F0 | 	shl	local01, #2
2865c     FF 1F 06 F5 | 	and	local01, #511
28660     0F 21 02 F1 | 	add	local02, local01
28664                 | ' {
28664                 | ' 
28664                 | ' 	return *((DWORD*)ptr);
28664     10 25 02 FB | 	rdlong	local04, local02
28668     7C 24 06 F4 | 	bitl	local04, #124
2866c                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2866c                 | ' 			break;
2866c     04 00 90 FD | 	jmp	#LR__4137
28670                 | LR__4136
28670     01 24 06 F6 | 	mov	local04, #1
28674                 | LR__4137
28674                 | LR__4138
28674                 | ' 			val = 1;
28674                 | ' 		}
28674                 | ' 	}
28674                 | ' 
28674                 | ' 	return val;
28674     12 FB 01 F6 | 	mov	result1, local04
28678     A7 F0 03 F6 | 	mov	ptra, fp
2867c     B2 00 A0 FD | 	call	#popregs_
28680                 | _fatfs_cc_get_fat_ret
28680     2D 00 64 FD | 	ret
28684                 | 
28684                 | _fatfs_cc_put_fat
28684     08 4A 05 F6 | 	mov	COUNT_, #8
28688     A8 00 A0 FD | 	call	#pushregs_
2868c     09 1F 02 F6 | 	mov	local01, arg01
28690     0A 21 02 F6 | 	mov	local02, arg02
28694     0B 23 02 F6 | 	mov	local03, arg03
28698     02 24 06 F6 | 	mov	local04, #2
2869c     02 20 16 F2 | 	cmp	local02, #2 wc
286a0     E0 01 90 CD |  if_b	jmp	#LR__4147
286a4     18 1E 06 F1 | 	add	local01, #24
286a8     0F 27 02 FB | 	rdlong	local05, local01
286ac     18 1E 86 F1 | 	sub	local01, #24
286b0     13 21 12 F2 | 	cmp	local02, local05 wc
286b4     CC 01 90 3D |  if_ae	jmp	#LR__4147
286b8                 | ' 		switch (fs->fs_type) {
286b8     0F 29 C2 FA | 	rdbyte	local06, local01
286bc     01 28 86 F1 | 	sub	local06, #1
286c0     03 28 26 F3 | 	fle	local06, #3
286c4     30 28 62 FD | 	jmprel	local06
286c8                 | LR__4140
286c8     0C 00 90 FD | 	jmp	#LR__4141
286cc     F8 00 90 FD | 	jmp	#LR__4144
286d0     40 01 90 FD | 	jmp	#LR__4145
286d4     AC 01 90 FD | 	jmp	#LR__4146
286d8                 | LR__4141
286d8     10 2B 02 F6 | 	mov	local07, local02
286dc     10 27 02 F6 | 	mov	local05, local02
286e0     01 26 46 F0 | 	shr	local05, #1
286e4     13 2B 02 F1 | 	add	local07, local05
286e8     0F 13 02 F6 | 	mov	arg01, local01
286ec     15 29 02 F6 | 	mov	local06, local07
286f0     09 28 46 F0 | 	shr	local06, #9
286f4     24 1E 06 F1 | 	add	local01, #36
286f8     0F 15 02 FB | 	rdlong	arg02, local01
286fc     24 1E 86 F1 | 	sub	local01, #36
28700     14 15 02 F1 | 	add	arg02, local06
28704     20 FC BF FD | 	call	#_fatfs_cc_move_window
28708     FD 24 0A F6 | 	mov	local04, result1 wz
2870c     74 01 90 5D |  if_ne	jmp	#LR__4146
28710     34 1E 06 F1 | 	add	local01, #52
28714     0F 2D 02 F6 | 	mov	local08, local01
28718     15 27 02 F6 | 	mov	local05, local07
2871c     FF 27 06 F5 | 	and	local05, #511
28720     13 2D 02 F1 | 	add	local08, local05
28724     01 20 CE F7 | 	test	local02, #1 wz
28728     34 1E 86 F1 | 	sub	local01, #52
2872c     01 2A 06 F1 | 	add	local07, #1
28730     18 00 90 AD |  if_e	jmp	#LR__4142
28734     16 27 C2 FA | 	rdbyte	local05, local08
28738     13 27 42 F8 | 	getnib	local05, local05, #0
2873c     11 29 E2 F8 | 	getbyte	local06, local03, #0
28740     04 28 66 F0 | 	shl	local06, #4
28744     14 27 42 F5 | 	or	local05, local06
28748     04 00 90 FD | 	jmp	#LR__4143
2874c                 | LR__4142
2874c     11 27 02 F6 | 	mov	local05, local03
28750                 | LR__4143
28750     16 27 42 FC | 	wrbyte	local05, local08
28754     03 1E 06 F1 | 	add	local01, #3
28758     0F 03 48 FC | 	wrbyte	#1, local01
2875c     03 1E 86 F1 | 	sub	local01, #3
28760     0F 13 02 F6 | 	mov	arg01, local01
28764     15 2D 02 F6 | 	mov	local08, local07
28768     09 2C 46 F0 | 	shr	local08, #9
2876c     24 1E 06 F1 | 	add	local01, #36
28770     0F 15 02 FB | 	rdlong	arg02, local01
28774     24 1E 86 F1 | 	sub	local01, #36
28778     16 15 02 F1 | 	add	arg02, local08
2877c     A8 FB BF FD | 	call	#_fatfs_cc_move_window
28780     FD 24 0A F6 | 	mov	local04, result1 wz
28784     FC 00 90 5D |  if_ne	jmp	#LR__4146
28788     34 1E 06 F1 | 	add	local01, #52
2878c     0F 2D 02 F6 | 	mov	local08, local01
28790     FF 2B 06 F5 | 	and	local07, #511
28794     15 2D 02 F1 | 	add	local08, local07
28798     01 20 CE F7 | 	test	local02, #1 wz
2879c     04 22 46 50 |  if_ne	shr	local03, #4
287a0     11 27 02 56 |  if_ne	mov	local05, local03
287a4     16 27 C2 AA |  if_e	rdbyte	local05, local08
287a8     F0 26 06 A5 |  if_e	and	local05, #240
287ac     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
287b0     11 23 42 A8 |  if_e	getnib	local03, local03, #0
287b4     11 27 42 A5 |  if_e	or	local05, local03
287b8     16 27 42 FC | 	wrbyte	local05, local08
287bc     31 1E 86 F1 | 	sub	local01, #49
287c0     0F 03 48 FC | 	wrbyte	#1, local01
287c4                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
287c4                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
287c4                 | ' 			fs->wflag = 1;
287c4                 | ' 			break;
287c4     BC 00 90 FD | 	jmp	#LR__4146
287c8                 | LR__4144
287c8     0F 13 02 F6 | 	mov	arg01, local01
287cc     10 2D 02 F6 | 	mov	local08, local02
287d0     08 2C 46 F0 | 	shr	local08, #8
287d4     24 1E 06 F1 | 	add	local01, #36
287d8     0F 15 02 FB | 	rdlong	arg02, local01
287dc     24 1E 86 F1 | 	sub	local01, #36
287e0     16 15 02 F1 | 	add	arg02, local08
287e4     40 FB BF FD | 	call	#_fatfs_cc_move_window
287e8     FD 24 0A F6 | 	mov	local04, result1 wz
287ec     94 00 90 5D |  if_ne	jmp	#LR__4146
287f0     34 1E 06 F1 | 	add	local01, #52
287f4     0F 13 02 F6 | 	mov	arg01, local01
287f8     01 20 66 F0 | 	shl	local02, #1
287fc     FF 21 06 F5 | 	and	local02, #511
28800     10 13 02 F1 | 	add	arg01, local02
28804     09 23 52 FC | 	wrword	local03, arg01
28808     31 1E 86 F1 | 	sub	local01, #49
2880c     0F 03 48 FC | 	wrbyte	#1, local01
28810                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
28810                 | ' 			fs->wflag = 1;
28810                 | ' 			break;
28810     70 00 90 FD | 	jmp	#LR__4146
28814                 | LR__4145
28814     0F 13 02 F6 | 	mov	arg01, local01
28818     10 2D 02 F6 | 	mov	local08, local02
2881c     07 2C 46 F0 | 	shr	local08, #7
28820     24 1E 06 F1 | 	add	local01, #36
28824     0F 15 02 FB | 	rdlong	arg02, local01
28828     24 1E 86 F1 | 	sub	local01, #36
2882c     16 15 02 F1 | 	add	arg02, local08
28830     F4 FA BF FD | 	call	#_fatfs_cc_move_window
28834     FD 24 0A F6 | 	mov	local04, result1 wz
28838     48 00 90 5D |  if_ne	jmp	#LR__4146
2883c     7C 22 06 F4 | 	bitl	local03, #124
28840     34 1E 06 F1 | 	add	local01, #52
28844     10 2D 02 F6 | 	mov	local08, local02
28848     02 2C 66 F0 | 	shl	local08, #2
2884c     FF 2D 06 F5 | 	and	local08, #511
28850     0F 13 02 F6 | 	mov	arg01, local01
28854     16 13 02 F1 | 	add	arg01, local08
28858                 | ' {
28858                 | ' 
28858                 | ' 	return *((DWORD*)ptr);
28858     09 2D 02 FB | 	rdlong	local08, arg01
2885c     00 00 78 FF 
28860     00 2C 06 F5 | 	and	local08, ##-268435456
28864     16 23 42 F5 | 	or	local03, local08
28868     0F 13 02 F6 | 	mov	arg01, local01
2886c     02 20 66 F0 | 	shl	local02, #2
28870     FF 21 06 F5 | 	and	local02, #511
28874     10 13 02 F1 | 	add	arg01, local02
28878     09 23 62 FC | 	wrlong	local03, arg01
2887c     31 1E 86 F1 | 	sub	local01, #49
28880     0F 03 48 FC | 	wrbyte	#1, local01
28884                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
28884                 | ' 			}
28884                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
28884                 | ' 			fs->wflag = 1;
28884                 | ' 			break;
28884                 | LR__4146
28884                 | LR__4147
28884                 | ' 		}
28884                 | ' 	}
28884                 | ' 	return res;
28884     12 FB 01 F6 | 	mov	result1, local04
28888     A7 F0 03 F6 | 	mov	ptra, fp
2888c     B2 00 A0 FD | 	call	#popregs_
28890                 | _fatfs_cc_put_fat_ret
28890     2D 00 64 FD | 	ret
28894                 | 
28894                 | _fatfs_cc_remove_chain
28894     05 4A 05 F6 | 	mov	COUNT_, #5
28898     A8 00 A0 FD | 	call	#pushregs_
2889c     09 1F 02 F6 | 	mov	local01, arg01
288a0     0A 21 02 F6 | 	mov	local02, arg02
288a4     0B 23 02 F6 | 	mov	local03, arg03
288a8     0F 25 02 FB | 	rdlong	local04, local01
288ac     02 20 16 F2 | 	cmp	local02, #2 wc
288b0     14 00 90 CD |  if_b	jmp	#LR__4150
288b4     18 24 06 F1 | 	add	local04, #24
288b8     12 FB 01 FB | 	rdlong	result1, local04
288bc     18 24 86 F1 | 	sub	local04, #24
288c0     FD 20 12 F2 | 	cmp	local02, result1 wc
288c4     08 00 90 CD |  if_b	jmp	#LR__4151
288c8                 | LR__4150
288c8     02 FA 05 F6 | 	mov	result1, #2
288cc     CC 00 90 FD | 	jmp	#LR__4156
288d0                 | LR__4151
288d0     00 22 0E F2 | 	cmp	local03, #0 wz
288d4     18 00 90 AD |  if_e	jmp	#LR__4152
288d8     11 15 02 F6 | 	mov	arg02, local03
288dc     12 13 02 F6 | 	mov	arg01, local04
288e0     01 16 66 F6 | 	neg	arg03, #1
288e4     9C FD BF FD | 	call	#_fatfs_cc_put_fat
288e8     00 FA 0D F2 | 	cmp	result1, #0 wz
288ec     AC 00 90 5D |  if_ne	jmp	#LR__4156
288f0                 | LR__4152
288f0                 | ' 	}
288f0                 | ' 
288f0                 | ' 
288f0                 | ' 	do {
288f0                 | LR__4153
288f0     10 15 02 F6 | 	mov	arg02, local02
288f4     0F 13 02 F6 | 	mov	arg01, local01
288f8     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
288fc     FD 26 0A F6 | 	mov	local05, result1 wz
28900     94 00 90 AD |  if_e	jmp	#LR__4155
28904     01 26 0E F2 | 	cmp	local05, #1 wz
28908     02 FA 05 A6 |  if_e	mov	result1, #2
2890c     8C 00 90 AD |  if_e	jmp	#LR__4156
28910     FF FF 7F FF 
28914     FF 27 0E F2 | 	cmp	local05, ##-1 wz
28918     01 FA 05 A6 |  if_e	mov	result1, #1
2891c     7C 00 90 AD |  if_e	jmp	#LR__4156
28920     10 15 02 F6 | 	mov	arg02, local02
28924     12 13 02 F6 | 	mov	arg01, local04
28928     00 16 06 F6 | 	mov	arg03, #0
2892c     54 FD BF FD | 	call	#_fatfs_cc_put_fat
28930     FD 22 0A F6 | 	mov	local03, result1 wz
28934     11 FB 01 56 |  if_ne	mov	result1, local03
28938     60 00 90 5D |  if_ne	jmp	#LR__4156
2893c     18 24 06 F1 | 	add	local04, #24
28940     12 23 02 FB | 	rdlong	local03, local04
28944     02 22 86 F1 | 	sub	local03, #2
28948     04 24 86 F1 | 	sub	local04, #4
2894c     12 21 02 FB | 	rdlong	local02, local04
28950     14 24 86 F1 | 	sub	local04, #20
28954     11 21 12 F2 | 	cmp	local02, local03 wc
28958     24 00 90 3D |  if_ae	jmp	#LR__4154
2895c     14 24 06 F1 | 	add	local04, #20
28960     12 23 02 FB | 	rdlong	local03, local04
28964     01 22 06 F1 | 	add	local03, #1
28968     12 23 62 FC | 	wrlong	local03, local04
2896c     10 24 86 F1 | 	sub	local04, #16
28970     12 23 C2 FA | 	rdbyte	local03, local04
28974     01 22 46 F5 | 	or	local03, #1
28978     12 23 42 FC | 	wrbyte	local03, local04
2897c     04 24 86 F1 | 	sub	local04, #4
28980                 | LR__4154
28980     13 21 02 F6 | 	mov	local02, local05
28984     18 24 06 F1 | 	add	local04, #24
28988     12 27 02 FB | 	rdlong	local05, local04
2898c     18 24 86 F1 | 	sub	local04, #24
28990     13 21 12 F2 | 	cmp	local02, local05 wc
28994     58 FF 9F CD |  if_b	jmp	#LR__4153
28998                 | LR__4155
28998                 | ' #line 1500 "ff.c"
28998                 | ' 	return FR_OK;
28998     00 FA 05 F6 | 	mov	result1, #0
2899c                 | LR__4156
2899c     A7 F0 03 F6 | 	mov	ptra, fp
289a0     B2 00 A0 FD | 	call	#popregs_
289a4                 | _fatfs_cc_remove_chain_ret
289a4     2D 00 64 FD | 	ret
289a8                 | 
289a8                 | _fatfs_cc_create_chain
289a8     09 4A 05 F6 | 	mov	COUNT_, #9
289ac     A8 00 A0 FD | 	call	#pushregs_
289b0     09 1F 02 F6 | 	mov	local01, arg01
289b4     0A 21 0A F6 | 	mov	local02, arg02 wz
289b8     0F 23 02 FB | 	rdlong	local03, local01
289bc     28 00 90 5D |  if_ne	jmp	#LR__4160
289c0     10 22 06 F1 | 	add	local03, #16
289c4     11 25 0A FB | 	rdlong	local04, local03 wz
289c8     10 22 86 F1 | 	sub	local03, #16
289cc     18 22 06 51 |  if_ne	add	local03, #24
289d0     11 27 02 5B |  if_ne	rdlong	local05, local03
289d4     18 22 86 51 |  if_ne	sub	local03, #24
289d8     13 25 12 52 |  if_ne	cmp	local04, local05 wc
289dc     50 00 90 4D |  if_c_and_nz	jmp	#LR__4161
289e0     01 24 06 F6 | 	mov	local04, #1
289e4     48 00 90 FD | 	jmp	#LR__4161
289e8                 | LR__4160
289e8     10 15 02 F6 | 	mov	arg02, local02
289ec     0F 13 02 F6 | 	mov	arg01, local01
289f0     EC FA BF FD | 	call	#_fatfs_cc_get_fat
289f4     FD 24 02 F6 | 	mov	local04, result1
289f8     02 24 16 F2 | 	cmp	local04, #2 wc
289fc     01 FA 05 C6 |  if_b	mov	result1, #1
28a00     BC 01 90 CD |  if_b	jmp	#LR__4171
28a04     FF FF 7F FF 
28a08     FF 25 0E F2 | 	cmp	local04, ##-1 wz
28a0c     12 FB 01 A6 |  if_e	mov	result1, local04
28a10     AC 01 90 AD |  if_e	jmp	#LR__4171
28a14     18 22 06 F1 | 	add	local03, #24
28a18     11 27 02 FB | 	rdlong	local05, local03
28a1c     18 22 86 F1 | 	sub	local03, #24
28a20     13 25 12 F2 | 	cmp	local04, local05 wc
28a24     12 FB 01 C6 |  if_b	mov	result1, local04
28a28     94 01 90 CD |  if_b	jmp	#LR__4171
28a2c     10 25 02 F6 | 	mov	local04, local02
28a30                 | LR__4161
28a30     14 22 06 F1 | 	add	local03, #20
28a34     11 27 0A FB | 	rdlong	local05, local03 wz
28a38     14 22 86 F1 | 	sub	local03, #20
28a3c     00 FA 05 A6 |  if_e	mov	result1, #0
28a40     7C 01 90 AD |  if_e	jmp	#LR__4171
28a44     00 28 06 F6 | 	mov	local06, #0
28a48     10 25 0A F2 | 	cmp	local04, local02 wz
28a4c     74 00 90 5D |  if_ne	jmp	#LR__4164
28a50     12 29 02 F6 | 	mov	local06, local04
28a54     01 28 06 F1 | 	add	local06, #1
28a58     18 22 06 F1 | 	add	local03, #24
28a5c     11 27 02 FB | 	rdlong	local05, local03
28a60     18 22 86 F1 | 	sub	local03, #24
28a64     13 29 12 F2 | 	cmp	local06, local05 wc
28a68     02 28 06 36 |  if_ae	mov	local06, #2
28a6c     14 15 02 F6 | 	mov	arg02, local06
28a70     0F 13 02 F6 | 	mov	arg01, local01
28a74     68 FA BF FD | 	call	#_fatfs_cc_get_fat
28a78     FD 26 02 F6 | 	mov	local05, result1
28a7c     01 26 0E F2 | 	cmp	local05, #1 wz
28a80     FF FF 7F 5F 
28a84     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
28a88     13 FB 01 A6 |  if_e	mov	result1, local05
28a8c     30 01 90 AD |  if_e	jmp	#LR__4171
28a90     00 26 0E F2 | 	cmp	local05, #0 wz
28a94     2C 00 90 AD |  if_e	jmp	#LR__4163
28a98     10 22 06 F1 | 	add	local03, #16
28a9c     11 2B 02 FB | 	rdlong	local07, local03
28aa0     10 22 86 F1 | 	sub	local03, #16
28aa4     02 2A 16 F2 | 	cmp	local07, #2 wc
28aa8     14 00 90 CD |  if_b	jmp	#LR__4162
28aac     18 22 06 F1 | 	add	local03, #24
28ab0     11 27 02 FB | 	rdlong	local05, local03
28ab4     18 22 86 F1 | 	sub	local03, #24
28ab8     13 2B 12 F2 | 	cmp	local07, local05 wc
28abc     15 25 02 C6 |  if_b	mov	local04, local07
28ac0                 | LR__4162
28ac0     00 28 06 F6 | 	mov	local06, #0
28ac4                 | LR__4163
28ac4                 | LR__4164
28ac4     00 28 0E F2 | 	cmp	local06, #0 wz
28ac8     60 00 90 5D |  if_ne	jmp	#LR__4167
28acc     12 29 02 F6 | 	mov	local06, local04
28ad0                 | ' 			ncl = scl;
28ad0                 | ' 			for (;;) {
28ad0                 | LR__4165
28ad0     01 28 06 F1 | 	add	local06, #1
28ad4     18 22 06 F1 | 	add	local03, #24
28ad8     11 27 02 FB | 	rdlong	local05, local03
28adc     18 22 86 F1 | 	sub	local03, #24
28ae0     13 29 12 F2 | 	cmp	local06, local05 wc
28ae4     02 28 06 36 |  if_ae	mov	local06, #2
28ae8     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
28aec     00 FA 05 16 |  if_a	mov	result1, #0
28af0     CC 00 90 1D |  if_a	jmp	#LR__4171
28af4     14 15 02 F6 | 	mov	arg02, local06
28af8     0F 13 02 F6 | 	mov	arg01, local01
28afc     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
28b00     FD 2A 0A F6 | 	mov	local07, result1 wz
28b04     24 00 90 AD |  if_e	jmp	#LR__4166
28b08     01 2A 0E F2 | 	cmp	local07, #1 wz
28b0c     FF FF 7F 5F 
28b10     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
28b14     15 FB 01 A6 |  if_e	mov	result1, local07
28b18     A4 00 90 AD |  if_e	jmp	#LR__4171
28b1c     12 29 0A F2 | 	cmp	local06, local04 wz
28b20     00 FA 05 A6 |  if_e	mov	result1, #0
28b24     98 00 90 AD |  if_e	jmp	#LR__4171
28b28     A4 FF 9F FD | 	jmp	#LR__4165
28b2c                 | LR__4166
28b2c                 | LR__4167
28b2c     11 13 02 F6 | 	mov	arg01, local03
28b30     14 15 02 F6 | 	mov	arg02, local06
28b34     01 16 66 F6 | 	neg	arg03, #1
28b38     48 FB BF FD | 	call	#_fatfs_cc_put_fat
28b3c     FD 2C 0A F6 | 	mov	local08, result1 wz
28b40     1C 00 90 5D |  if_ne	jmp	#LR__4168
28b44     00 20 0E F2 | 	cmp	local02, #0 wz
28b48     14 00 90 AD |  if_e	jmp	#LR__4168
28b4c     11 13 02 F6 | 	mov	arg01, local03
28b50     10 15 02 F6 | 	mov	arg02, local02
28b54     14 17 02 F6 | 	mov	arg03, local06
28b58     28 FB BF FD | 	call	#_fatfs_cc_put_fat
28b5c     FD 2C 02 F6 | 	mov	local08, result1
28b60                 | LR__4168
28b60     00 2C 0E F2 | 	cmp	local08, #0 wz
28b64     4C 00 90 5D |  if_ne	jmp	#LR__4169
28b68     10 22 06 F1 | 	add	local03, #16
28b6c     11 29 62 FC | 	wrlong	local06, local03
28b70     08 22 06 F1 | 	add	local03, #8
28b74     11 27 02 FB | 	rdlong	local05, local03
28b78     02 26 86 F1 | 	sub	local05, #2
28b7c     04 22 86 F1 | 	sub	local03, #4
28b80     11 2F 02 FB | 	rdlong	local09, local03
28b84     14 22 86 F1 | 	sub	local03, #20
28b88     13 2F 1A F2 | 	cmp	local09, local05 wcz
28b8c     14 22 06 E1 |  if_be	add	local03, #20
28b90     11 2F 02 EB |  if_be	rdlong	local09, local03
28b94     01 2E 86 E1 |  if_be	sub	local09, #1
28b98     11 2F 62 EC |  if_be	wrlong	local09, local03
28b9c     14 22 86 E1 |  if_be	sub	local03, #20
28ba0     04 22 06 F1 | 	add	local03, #4
28ba4     11 27 C2 FA | 	rdbyte	local05, local03
28ba8     01 26 46 F5 | 	or	local05, #1
28bac     11 27 42 FC | 	wrbyte	local05, local03
28bb0     08 00 90 FD | 	jmp	#LR__4170
28bb4                 | LR__4169
28bb4     01 2C 0E F2 | 	cmp	local08, #1 wz
28bb8     01 28 C6 F6 | 	negz	local06, #1
28bbc                 | LR__4170
28bbc                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
28bbc                 | ' 	}
28bbc                 | ' 
28bbc                 | ' 	return ncl;
28bbc     14 FB 01 F6 | 	mov	result1, local06
28bc0                 | LR__4171
28bc0     A7 F0 03 F6 | 	mov	ptra, fp
28bc4     B2 00 A0 FD | 	call	#popregs_
28bc8                 | _fatfs_cc_create_chain_ret
28bc8     2D 00 64 FD | 	ret
28bcc                 | 
28bcc                 | _fatfs_cc_dir_clear
28bcc     06 4A 05 F6 | 	mov	COUNT_, #6
28bd0     A8 00 A0 FD | 	call	#pushregs_
28bd4     09 1F 02 F6 | 	mov	local01, arg01
28bd8     0A 21 02 F6 | 	mov	local02, arg02
28bdc     0F 13 02 F6 | 	mov	arg01, local01
28be0     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
28be4     00 FA 0D F2 | 	cmp	result1, #0 wz
28be8     01 FA 05 56 |  if_ne	mov	result1, #1
28bec     90 00 90 5D |  if_ne	jmp	#LR__4182
28bf0     0F 13 02 F6 | 	mov	arg01, local01
28bf4     10 15 02 F6 | 	mov	arg02, local02
28bf8     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
28bfc     FD 22 02 F6 | 	mov	local03, result1
28c00     30 1E 06 F1 | 	add	local01, #48
28c04     0F 23 62 FC | 	wrlong	local03, local01
28c08     04 1E 06 F1 | 	add	local01, #4
28c0c     0F 13 02 F6 | 	mov	arg01, local01
28c10     00 14 06 F6 | 	mov	arg02, #0
28c14     09 16 C6 F9 | 	decod	arg03, #9
28c18     98 00 A0 FD | 	call	#\builtin_bytefill_
28c1c     0F 25 02 F6 | 	mov	local04, local01
28c20                 | ' #line 1667 "ff.c"
28c20                 | ' 	{
28c20                 | ' 		ibuf = fs->win; szb = 1;
28c20                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
28c20     00 26 06 F6 | 	mov	local05, #0
28c24     34 1E 86 F1 | 	sub	local01, #52
28c28                 | LR__4180
28c28     0A 1E 06 F1 | 	add	local01, #10
28c2c     0F 29 E2 FA | 	rdword	local06, local01
28c30     0A 1E 86 F1 | 	sub	local01, #10
28c34     14 27 12 F2 | 	cmp	local05, local06 wc
28c38     2C 00 90 3D |  if_ae	jmp	#LR__4181
28c3c     01 1E 06 F1 | 	add	local01, #1
28c40     0F 13 C2 FA | 	rdbyte	arg01, local01
28c44     01 1E 86 F1 | 	sub	local01, #1
28c48     12 15 02 F6 | 	mov	arg02, local04
28c4c     11 17 02 F6 | 	mov	arg03, local03
28c50     13 17 02 F1 | 	add	arg03, local05
28c54     01 18 06 F6 | 	mov	arg04, #1
28c58     9C EF BF FD | 	call	#_fatfs_cc_disk_write
28c5c     00 FA 0D F2 | 	cmp	result1, #0 wz
28c60     01 26 06 A1 |  if_e	add	local05, #1
28c64     C0 FF 9F AD |  if_e	jmp	#LR__4180
28c68                 | LR__4181
28c68                 | ' 	}
28c68                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
28c68     0A 1E 06 F1 | 	add	local01, #10
28c6c     0F 25 E2 FA | 	rdword	local04, local01
28c70     12 27 0A F2 | 	cmp	local05, local04 wz
28c74     00 28 06 A6 |  if_e	mov	local06, #0
28c78     01 28 06 56 |  if_ne	mov	local06, #1
28c7c     14 FB 01 F6 | 	mov	result1, local06
28c80                 | LR__4182
28c80     A7 F0 03 F6 | 	mov	ptra, fp
28c84     B2 00 A0 FD | 	call	#popregs_
28c88                 | _fatfs_cc_dir_clear_ret
28c88     2D 00 64 FD | 	ret
28c8c                 | 
28c8c                 | _fatfs_cc_dir_sdi
28c8c     06 4A 05 F6 | 	mov	COUNT_, #6
28c90     A8 00 A0 FD | 	call	#pushregs_
28c94     09 1F 02 F6 | 	mov	local01, arg01
28c98     0A 21 02 F6 | 	mov	local02, arg02
28c9c     0F 23 02 FB | 	rdlong	local03, local01
28ca0     00 10 00 FF 
28ca4     00 20 16 F2 | 	cmp	local02, ##2097152 wc
28ca8     1F 20 CE C7 |  if_b	test	local02, #31 wz
28cac                 | ' 		return FR_INT_ERR;
28cac     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
28cb0     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4196
28cb4     10 1E 06 F1 | 	add	local01, #16
28cb8     0F 21 62 FC | 	wrlong	local02, local01
28cbc     08 1E 86 F1 | 	sub	local01, #8
28cc0     0F 25 0A FB | 	rdlong	local04, local01 wz
28cc4     08 1E 86 F1 | 	sub	local01, #8
28cc8     11 27 C2 AA |  if_e	rdbyte	local05, local03
28ccc     03 26 16 A2 |  if_e	cmp	local05, #3 wc
28cd0     28 22 06 21 |  if_nc_and_z	add	local03, #40
28cd4     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
28cd8     28 22 86 21 |  if_nc_and_z	sub	local03, #40
28cdc     00 24 0E F2 | 	cmp	local04, #0 wz
28ce0     3C 00 90 5D |  if_ne	jmp	#LR__4190
28ce4     10 27 02 F6 | 	mov	local05, local02
28ce8     05 26 46 F0 | 	shr	local05, #5
28cec     08 22 06 F1 | 	add	local03, #8
28cf0     11 15 E2 FA | 	rdword	arg02, local03
28cf4     08 22 86 F1 | 	sub	local03, #8
28cf8     0A 27 12 F2 | 	cmp	local05, arg02 wc
28cfc     02 FA 05 36 |  if_ae	mov	result1, #2
28d00     E4 00 90 3D |  if_ae	jmp	#LR__4196
28d04     28 22 06 F1 | 	add	local03, #40
28d08     11 27 02 FB | 	rdlong	local05, local03
28d0c     28 22 86 F1 | 	sub	local03, #40
28d10     18 1E 06 F1 | 	add	local01, #24
28d14     0F 27 62 FC | 	wrlong	local05, local01
28d18     18 1E 86 F1 | 	sub	local01, #24
28d1c     7C 00 90 FD | 	jmp	#LR__4195
28d20                 | LR__4190
28d20     0A 22 06 F1 | 	add	local03, #10
28d24     11 29 E2 FA | 	rdword	local06, local03
28d28     0A 22 86 F1 | 	sub	local03, #10
28d2c     09 28 66 F0 | 	shl	local06, #9
28d30                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
28d30                 | ' 		while (ofs >= csz) {
28d30                 | LR__4191
28d30     14 21 12 F2 | 	cmp	local02, local06 wc
28d34     4C 00 90 CD |  if_b	jmp	#LR__4194
28d38     0F 13 02 F6 | 	mov	arg01, local01
28d3c     12 15 02 F6 | 	mov	arg02, local04
28d40     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
28d44     FD 24 02 F6 | 	mov	local04, result1
28d48     FF FF 7F FF 
28d4c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
28d50     01 FA 05 A6 |  if_e	mov	result1, #1
28d54     90 00 90 AD |  if_e	jmp	#LR__4196
28d58     02 24 16 F2 | 	cmp	local04, #2 wc
28d5c     14 00 90 CD |  if_b	jmp	#LR__4192
28d60     18 22 06 F1 | 	add	local03, #24
28d64     11 27 02 FB | 	rdlong	local05, local03
28d68     18 22 86 F1 | 	sub	local03, #24
28d6c     13 25 12 F2 | 	cmp	local04, local05 wc
28d70     08 00 90 CD |  if_b	jmp	#LR__4193
28d74                 | LR__4192
28d74     02 FA 05 F6 | 	mov	result1, #2
28d78     6C 00 90 FD | 	jmp	#LR__4196
28d7c                 | LR__4193
28d7c     14 21 82 F1 | 	sub	local02, local06
28d80     AC FF 9F FD | 	jmp	#LR__4191
28d84                 | LR__4194
28d84     11 13 02 F6 | 	mov	arg01, local03
28d88     12 15 02 F6 | 	mov	arg02, local04
28d8c     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
28d90     18 1E 06 F1 | 	add	local01, #24
28d94     0F FB 61 FC | 	wrlong	result1, local01
28d98     18 1E 86 F1 | 	sub	local01, #24
28d9c                 | LR__4195
28d9c     14 1E 06 F1 | 	add	local01, #20
28da0     0F 25 62 FC | 	wrlong	local04, local01
28da4     04 1E 06 F1 | 	add	local01, #4
28da8     0F 27 0A FB | 	rdlong	local05, local01 wz
28dac     18 1E 86 F1 | 	sub	local01, #24
28db0     02 FA 05 A6 |  if_e	mov	result1, #2
28db4     30 00 90 AD |  if_e	jmp	#LR__4196
28db8     10 29 02 F6 | 	mov	local06, local02
28dbc     09 28 46 F0 | 	shr	local06, #9
28dc0     18 1E 06 F1 | 	add	local01, #24
28dc4     0F 27 02 FB | 	rdlong	local05, local01
28dc8     14 27 02 F1 | 	add	local05, local06
28dcc     0F 27 62 FC | 	wrlong	local05, local01
28dd0     34 22 06 F1 | 	add	local03, #52
28dd4     FF 21 06 F5 | 	and	local02, #511
28dd8     10 23 02 F1 | 	add	local03, local02
28ddc     04 1E 06 F1 | 	add	local01, #4
28de0     0F 23 62 FC | 	wrlong	local03, local01
28de4                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
28de4                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
28de4                 | ' 
28de4                 | ' 	return FR_OK;
28de4     00 FA 05 F6 | 	mov	result1, #0
28de8                 | LR__4196
28de8     A7 F0 03 F6 | 	mov	ptra, fp
28dec     B2 00 A0 FD | 	call	#popregs_
28df0                 | _fatfs_cc_dir_sdi_ret
28df0     2D 00 64 FD | 	ret
28df4                 | 
28df4                 | _fatfs_cc_dir_next
28df4     05 4A 05 F6 | 	mov	COUNT_, #5
28df8     A8 00 A0 FD | 	call	#pushregs_
28dfc     09 1F 02 F6 | 	mov	local01, arg01
28e00     0A 21 02 F6 | 	mov	local02, arg02
28e04     0F 23 02 FB | 	rdlong	local03, local01
28e08     10 1E 06 F1 | 	add	local01, #16
28e0c     0F 25 02 FB | 	rdlong	local04, local01
28e10     10 1E 86 F1 | 	sub	local01, #16
28e14     20 24 06 F1 | 	add	local04, #32
28e18     00 10 00 FF 
28e1c     00 24 16 F2 | 	cmp	local04, ##2097152 wc
28e20     18 1E 06 31 |  if_ae	add	local01, #24
28e24     0F 01 68 3C |  if_ae	wrlong	#0, local01
28e28     18 1E 86 31 |  if_ae	sub	local01, #24
28e2c     18 1E 06 F1 | 	add	local01, #24
28e30     0F 15 0A FB | 	rdlong	arg02, local01 wz
28e34     18 1E 86 F1 | 	sub	local01, #24
28e38     04 FA 05 A6 |  if_e	mov	result1, #4
28e3c     64 01 90 AD |  if_e	jmp	#LR__4205
28e40     FF 25 CE F7 | 	test	local04, #511 wz
28e44     3C 01 90 5D |  if_ne	jmp	#LR__4204
28e48     18 1E 06 F1 | 	add	local01, #24
28e4c     0F 15 02 FB | 	rdlong	arg02, local01
28e50     01 14 06 F1 | 	add	arg02, #1
28e54     0F 15 62 FC | 	wrlong	arg02, local01
28e58     04 1E 86 F1 | 	sub	local01, #4
28e5c     0F 15 0A FB | 	rdlong	arg02, local01 wz
28e60     14 1E 86 F1 | 	sub	local01, #20
28e64     2C 00 90 5D |  if_ne	jmp	#LR__4200
28e68     12 15 02 F6 | 	mov	arg02, local04
28e6c     05 14 46 F0 | 	shr	arg02, #5
28e70     08 22 06 F1 | 	add	local03, #8
28e74     11 21 E2 FA | 	rdword	local02, local03
28e78     08 22 86 F1 | 	sub	local03, #8
28e7c     10 15 12 F2 | 	cmp	arg02, local02 wc
28e80     18 1E 06 31 |  if_ae	add	local01, #24
28e84     0F 01 68 3C |  if_ae	wrlong	#0, local01
28e88                 | ' 				dp->sect = 0; return FR_NO_FILE;
28e88     04 FA 05 36 |  if_ae	mov	result1, #4
28e8c     14 01 90 3D |  if_ae	jmp	#LR__4205
28e90     F0 00 90 FD | 	jmp	#LR__4203
28e94                 | LR__4200
28e94     12 13 02 F6 | 	mov	arg01, local04
28e98     09 12 46 F0 | 	shr	arg01, #9
28e9c     0A 22 06 F1 | 	add	local03, #10
28ea0     11 15 E2 FA | 	rdword	arg02, local03
28ea4     0A 22 86 F1 | 	sub	local03, #10
28ea8     01 14 86 F1 | 	sub	arg02, #1
28eac     0A 13 CA F7 | 	test	arg01, arg02 wz
28eb0     D0 00 90 5D |  if_ne	jmp	#LR__4202
28eb4     0F 13 02 F6 | 	mov	arg01, local01
28eb8     14 1E 06 F1 | 	add	local01, #20
28ebc     0F 15 02 FB | 	rdlong	arg02, local01
28ec0     14 1E 86 F1 | 	sub	local01, #20
28ec4     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
28ec8     FD 26 02 F6 | 	mov	local05, result1
28ecc     02 26 16 F2 | 	cmp	local05, #2 wc
28ed0     02 FA 05 C6 |  if_b	mov	result1, #2
28ed4     CC 00 90 CD |  if_b	jmp	#LR__4205
28ed8     FF FF 7F FF 
28edc     FF 27 0E F2 | 	cmp	local05, ##-1 wz
28ee0     01 FA 05 A6 |  if_e	mov	result1, #1
28ee4     BC 00 90 AD |  if_e	jmp	#LR__4205
28ee8     18 22 06 F1 | 	add	local03, #24
28eec     11 15 02 FB | 	rdlong	arg02, local03
28ef0     18 22 86 F1 | 	sub	local03, #24
28ef4     0A 27 12 F2 | 	cmp	local05, arg02 wc
28ef8     68 00 90 CD |  if_b	jmp	#LR__4201
28efc     00 20 0E F2 | 	cmp	local02, #0 wz
28f00     18 1E 06 A1 |  if_e	add	local01, #24
28f04     0F 01 68 AC |  if_e	wrlong	#0, local01
28f08                 | ' 						dp->sect = 0; return FR_NO_FILE;
28f08     04 FA 05 A6 |  if_e	mov	result1, #4
28f0c     94 00 90 AD |  if_e	jmp	#LR__4205
28f10     0F 13 02 F6 | 	mov	arg01, local01
28f14     14 1E 06 F1 | 	add	local01, #20
28f18     0F 15 02 FB | 	rdlong	arg02, local01
28f1c     14 1E 86 F1 | 	sub	local01, #20
28f20     84 FA BF FD | 	call	#_fatfs_cc_create_chain
28f24     FD 26 0A F6 | 	mov	local05, result1 wz
28f28     07 FA 05 A6 |  if_e	mov	result1, #7
28f2c     74 00 90 AD |  if_e	jmp	#LR__4205
28f30     01 26 0E F2 | 	cmp	local05, #1 wz
28f34     02 FA 05 A6 |  if_e	mov	result1, #2
28f38     68 00 90 AD |  if_e	jmp	#LR__4205
28f3c     FF FF 7F FF 
28f40     FF 27 0E F2 | 	cmp	local05, ##-1 wz
28f44     01 FA 05 A6 |  if_e	mov	result1, #1
28f48     58 00 90 AD |  if_e	jmp	#LR__4205
28f4c     13 15 02 F6 | 	mov	arg02, local05
28f50     11 13 02 F6 | 	mov	arg01, local03
28f54     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
28f58     00 FA 0D F2 | 	cmp	result1, #0 wz
28f5c     01 FA 05 56 |  if_ne	mov	result1, #1
28f60     40 00 90 5D |  if_ne	jmp	#LR__4205
28f64                 | LR__4201
28f64     14 1E 06 F1 | 	add	local01, #20
28f68     0F 27 62 FC | 	wrlong	local05, local01
28f6c     11 13 02 F6 | 	mov	arg01, local03
28f70     13 15 02 F6 | 	mov	arg02, local05
28f74     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
28f78     04 1E 06 F1 | 	add	local01, #4
28f7c     0F FB 61 FC | 	wrlong	result1, local01
28f80     18 1E 86 F1 | 	sub	local01, #24
28f84                 | LR__4202
28f84                 | LR__4203
28f84                 | LR__4204
28f84     10 1E 06 F1 | 	add	local01, #16
28f88     0F 25 62 FC | 	wrlong	local04, local01
28f8c     34 22 06 F1 | 	add	local03, #52
28f90     FF 25 06 F5 | 	and	local04, #511
28f94     12 23 02 F1 | 	add	local03, local04
28f98     0C 1E 06 F1 | 	add	local01, #12
28f9c     0F 23 62 FC | 	wrlong	local03, local01
28fa0                 | ' #line 1771 "ff.c"
28fa0                 | ' 				}
28fa0                 | ' 				dp->clust = clst;
28fa0                 | ' 				dp->sect = clst2sect(fs, clst);
28fa0                 | ' 			}
28fa0                 | ' 		}
28fa0                 | ' 	}
28fa0                 | ' 	dp->dptr = ofs;
28fa0                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
28fa0                 | ' 
28fa0                 | ' 	return FR_OK;
28fa0     00 FA 05 F6 | 	mov	result1, #0
28fa4                 | LR__4205
28fa4     A7 F0 03 F6 | 	mov	ptra, fp
28fa8     B2 00 A0 FD | 	call	#popregs_
28fac                 | _fatfs_cc_dir_next_ret
28fac     2D 00 64 FD | 	ret
28fb0                 | 
28fb0                 | _fatfs_cc_dir_alloc
28fb0     08 4A 05 F6 | 	mov	COUNT_, #8
28fb4     A8 00 A0 FD | 	call	#pushregs_
28fb8     09 1F 02 F6 | 	mov	local01, arg01
28fbc     0A 21 02 F6 | 	mov	local02, arg02
28fc0     0F 23 02 FB | 	rdlong	local03, local01
28fc4     0F 13 02 F6 | 	mov	arg01, local01
28fc8     00 14 06 F6 | 	mov	arg02, #0
28fcc     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
28fd0     FD 24 0A F6 | 	mov	local04, result1 wz
28fd4     70 00 90 5D |  if_ne	jmp	#LR__4214
28fd8     00 26 06 F6 | 	mov	local05, #0
28fdc                 | ' 		n = 0;
28fdc                 | ' 		do {
28fdc                 | LR__4210
28fdc     18 1E 06 F1 | 	add	local01, #24
28fe0     0F 15 02 FB | 	rdlong	arg02, local01
28fe4     18 1E 86 F1 | 	sub	local01, #24
28fe8     11 13 02 F6 | 	mov	arg01, local03
28fec     38 F3 BF FD | 	call	#_fatfs_cc_move_window
28ff0     FD 24 0A F6 | 	mov	local04, result1 wz
28ff4     50 00 90 5D |  if_ne	jmp	#LR__4213
28ff8     1C 1E 06 F1 | 	add	local01, #28
28ffc     0F 29 02 FB | 	rdlong	local06, local01
29000     1C 1E 86 F1 | 	sub	local01, #28
29004     14 29 C2 FA | 	rdbyte	local06, local06
29008     E5 28 0E F2 | 	cmp	local06, #229 wz
2900c     1C 1E 06 51 |  if_ne	add	local01, #28
29010     0F 2B 02 5B |  if_ne	rdlong	local07, local01
29014     1C 1E 86 51 |  if_ne	sub	local01, #28
29018     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
2901c     10 00 90 5D |  if_ne	jmp	#LR__4211
29020     01 26 06 F1 | 	add	local05, #1
29024     10 27 0A F2 | 	cmp	local05, local02 wz
29028     1C 00 90 AD |  if_e	jmp	#LR__4213
2902c     04 00 90 FD | 	jmp	#LR__4212
29030                 | LR__4211
29030     00 26 06 F6 | 	mov	local05, #0
29034                 | LR__4212
29034     0F 13 02 F6 | 	mov	arg01, local01
29038     01 14 06 F6 | 	mov	arg02, #1
2903c     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
29040     FD 24 0A F6 | 	mov	local04, result1 wz
29044     94 FF 9F AD |  if_e	jmp	#LR__4210
29048                 | LR__4213
29048                 | LR__4214
29048     04 24 0E F2 | 	cmp	local04, #4 wz
2904c     07 24 06 A6 |  if_e	mov	local04, #7
29050                 | ' 	return res;
29050     12 FB 01 F6 | 	mov	result1, local04
29054     A7 F0 03 F6 | 	mov	ptra, fp
29058     B2 00 A0 FD | 	call	#popregs_
2905c                 | _fatfs_cc_dir_alloc_ret
2905c     2D 00 64 FD | 	ret
29060                 | 
29060                 | _fatfs_cc_ld_clust
29060     09 01 02 F6 | 	mov	_var01, arg01
29064     0A 13 02 F6 | 	mov	arg01, arg02
29068     1A 12 06 F1 | 	add	arg01, #26
2906c                 | ' {
2906c                 | ' 
2906c                 | ' 	return *((WORD*)ptr);
2906c     09 FB E1 FA | 	rdword	result1, arg01
29070     FD 12 32 F9 | 	getword	arg01, result1, #0
29074     00 01 C2 FA | 	rdbyte	_var01, _var01
29078     03 00 0E F2 | 	cmp	_var01, #3 wz
2907c     14 14 06 A1 |  if_e	add	arg02, #20
29080                 | ' {
29080                 | ' 
29080                 | ' 	return *((WORD*)ptr);
29080     0A FB E1 AA |  if_e	rdword	result1, arg02
29084     10 FA 65 A0 |  if_e	shl	result1, #16
29088     FD 12 42 A5 |  if_e	or	arg01, result1
2908c                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2908c                 | ' 	}
2908c                 | ' 
2908c                 | ' 	return cl;
2908c     09 FB 01 F6 | 	mov	result1, arg01
29090                 | _fatfs_cc_ld_clust_ret
29090     2D 00 64 FD | 	ret
29094                 | 
29094                 | _fatfs_cc_st_clust
29094     09 01 02 F6 | 	mov	_var01, arg01
29098     0A 13 02 F6 | 	mov	arg01, arg02
2909c     1A 12 06 F1 | 	add	arg01, #26
290a0     09 17 52 FC | 	wrword	arg03, arg01
290a4     00 01 C2 FA | 	rdbyte	_var01, _var01
290a8     03 00 0E F2 | 	cmp	_var01, #3 wz
290ac     14 14 06 A1 |  if_e	add	arg02, #20
290b0     10 16 46 A0 |  if_e	shr	arg03, #16
290b4     0A 17 52 AC |  if_e	wrword	arg03, arg02
290b8                 | _fatfs_cc_st_clust_ret
290b8     2D 00 64 FD | 	ret
290bc                 | 
290bc                 | _fatfs_cc_cmp_lfn
290bc     07 4A 05 F6 | 	mov	COUNT_, #7
290c0     A8 00 A0 FD | 	call	#pushregs_
290c4     09 1F 02 F6 | 	mov	local01, arg01
290c8     0A 13 02 F6 | 	mov	arg01, arg02
290cc     1A 12 06 F1 | 	add	arg01, #26
290d0                 | ' {
290d0                 | ' 
290d0                 | ' 	return *((WORD*)ptr);
290d0     09 FB E9 FA | 	rdword	result1, arg01 wz
290d4     00 FA 05 56 |  if_ne	mov	result1, #0
290d8     E0 00 90 5D |  if_ne	jmp	#LR__4226
290dc     0A 21 C2 FA | 	rdbyte	local02, arg02
290e0     3F 20 06 F5 | 	and	local02, #63
290e4     01 20 86 F1 | 	sub	local02, #1
290e8     0D 20 06 FD | 	qmul	local02, #13
290ec                 | ' 
290ec                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
290ec                 | ' 
290ec                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
290ec     01 22 06 F6 | 	mov	local03, #1
290f0     00 24 06 F6 | 	mov	local04, #0
290f4     18 26 62 FD | 	getqx	local05
290f8                 | LR__4220
290f8     0D 24 16 F2 | 	cmp	local04, #13 wc
290fc     9C 00 90 3D |  if_ae	jmp	#LR__4225
29100     0A 13 02 F6 | 	mov	arg01, arg02
29104     12 21 02 F6 | 	mov	local02, local04
29108     01 00 00 FF 
2910c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
29110     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
29114     10 21 C2 FA | 	rdbyte	local02, local02
29118     01 20 06 FA | 	mul	local02, #1
2911c     10 13 02 F1 | 	add	arg01, local02
29120     01 00 00 FF 
29124     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
29128                 | ' {
29128                 | ' 
29128                 | ' 	return *((WORD*)ptr);
29128     09 FB E1 FA | 	rdword	result1, arg01
2912c     FD 28 02 F6 | 	mov	local06, result1
29130     11 21 02 F6 | 	mov	local02, local03
29134     0F 20 4E F7 | 	zerox	local02, #15 wz
29138     44 00 90 AD |  if_e	jmp	#LR__4223
2913c     00 27 16 F2 | 	cmp	local05, #256 wc
29140     2C 00 90 3D |  if_ae	jmp	#LR__4221
29144     14 13 32 F9 | 	getword	arg01, local06, #0
29148     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2914c     FD 20 02 F6 | 	mov	local02, result1
29150     13 23 02 F6 | 	mov	local03, local05
29154     01 22 66 F0 | 	shl	local03, #1
29158     0F 23 02 F1 | 	add	local03, local01
2915c     11 13 E2 FA | 	rdword	arg01, local03
29160     01 26 06 F1 | 	add	local05, #1
29164     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
29168     FD 20 0A F2 | 	cmp	local02, result1 wz
2916c     08 00 90 AD |  if_e	jmp	#LR__4222
29170                 | LR__4221
29170                 | ' 				return 0;
29170     00 FA 05 F6 | 	mov	result1, #0
29174     44 00 90 FD | 	jmp	#LR__4226
29178                 | LR__4222
29178     14 23 02 F6 | 	mov	local03, local06
2917c     14 00 90 FD | 	jmp	#LR__4224
29180                 | LR__4223
29180     14 29 32 F9 | 	getword	local06, local06, #0
29184     7F 00 00 FF 
29188     FF 29 0E F2 | 	cmp	local06, ##65535 wz
2918c     00 FA 05 56 |  if_ne	mov	result1, #0
29190     28 00 90 5D |  if_ne	jmp	#LR__4226
29194                 | LR__4224
29194     01 24 06 F1 | 	add	local04, #1
29198     5C FF 9F FD | 	jmp	#LR__4220
2919c                 | LR__4225
2919c     0A 21 C2 FA | 	rdbyte	local02, arg02
291a0     40 20 CE F7 | 	test	local02, #64 wz
291a4     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
291a8     01 26 66 50 |  if_ne	shl	local05, #1
291ac     0F 27 02 51 |  if_ne	add	local05, local01
291b0     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
291b4     00 FA 05 56 |  if_ne	mov	result1, #0
291b8                 | ' 
291b8                 | ' 	return 1;
291b8     01 FA 05 A6 |  if_e	mov	result1, #1
291bc                 | LR__4226
291bc     A7 F0 03 F6 | 	mov	ptra, fp
291c0     B2 00 A0 FD | 	call	#popregs_
291c4                 | _fatfs_cc_cmp_lfn_ret
291c4     2D 00 64 FD | 	ret
291c8                 | 
291c8                 | _fatfs_cc_pick_lfn
291c8     09 01 02 F6 | 	mov	_var01, arg01
291cc     0A 13 02 F6 | 	mov	arg01, arg02
291d0     1A 12 06 F1 | 	add	arg01, #26
291d4                 | ' {
291d4                 | ' 
291d4                 | ' 	return *((WORD*)ptr);
291d4     09 FB E9 FA | 	rdword	result1, arg01 wz
291d8     00 FA 05 56 |  if_ne	mov	result1, #0
291dc     D4 00 90 5D |  if_ne	jmp	#LR__4235
291e0     0A 03 C2 FA | 	rdbyte	_var02, arg02
291e4     40 02 26 F5 | 	andn	_var02, #64
291e8     01 02 86 F1 | 	sub	_var02, #1
291ec     0D 02 06 FD | 	qmul	_var02, #13
291f0                 | ' 
291f0                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
291f0                 | ' 
291f0                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
291f0     01 04 06 F6 | 	mov	_var03, #1
291f4     00 06 06 F6 | 	mov	_var04, #0
291f8     18 08 62 FD | 	getqx	_var05
291fc                 | LR__4230
291fc     0D 06 16 F2 | 	cmp	_var04, #13 wc
29200     80 00 90 3D |  if_ae	jmp	#LR__4233
29204     0A 13 02 F6 | 	mov	arg01, arg02
29208     03 03 02 F6 | 	mov	_var02, _var04
2920c     01 00 00 FF 
29210     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
29214     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
29218     01 03 C2 FA | 	rdbyte	_var02, _var02
2921c     01 02 06 FA | 	mul	_var02, #1
29220     01 13 02 F1 | 	add	arg01, _var02
29224     01 00 00 FF 
29228     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2922c                 | ' {
2922c                 | ' 
2922c                 | ' 	return *((WORD*)ptr);
2922c     09 FB E1 FA | 	rdword	result1, arg01
29230     FD 0A 02 F6 | 	mov	_var06, result1
29234     02 03 02 F6 | 	mov	_var02, _var03
29238     0F 02 4E F7 | 	zerox	_var02, #15 wz
2923c     28 00 90 AD |  if_e	jmp	#LR__4231
29240     00 09 16 F2 | 	cmp	_var05, #256 wc
29244     00 FA 05 36 |  if_ae	mov	result1, #0
29248     68 00 90 3D |  if_ae	jmp	#LR__4235
2924c     04 03 02 F6 | 	mov	_var02, _var05
29250     01 02 66 F0 | 	shl	_var02, #1
29254     00 03 02 F1 | 	add	_var02, _var01
29258     05 05 02 F6 | 	mov	_var03, _var06
2925c     01 05 52 FC | 	wrword	_var03, _var02
29260     01 08 06 F1 | 	add	_var05, #1
29264     14 00 90 FD | 	jmp	#LR__4232
29268                 | LR__4231
29268     05 0B 32 F9 | 	getword	_var06, _var06, #0
2926c     7F 00 00 FF 
29270     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
29274     00 FA 05 56 |  if_ne	mov	result1, #0
29278     38 00 90 5D |  if_ne	jmp	#LR__4235
2927c                 | LR__4232
2927c     01 06 06 F1 | 	add	_var04, #1
29280     78 FF 9F FD | 	jmp	#LR__4230
29284                 | LR__4233
29284     0A 03 C2 FA | 	rdbyte	_var02, arg02
29288     40 02 CE F7 | 	test	_var02, #64 wz
2928c     02 0D 02 56 |  if_ne	mov	_var07, _var03
29290     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
29294     18 00 90 AD |  if_e	jmp	#LR__4234
29298     00 09 16 F2 | 	cmp	_var05, #256 wc
2929c     00 FA 05 36 |  if_ae	mov	result1, #0
292a0     10 00 90 3D |  if_ae	jmp	#LR__4235
292a4     01 08 66 F0 | 	shl	_var05, #1
292a8     00 09 02 F1 | 	add	_var05, _var01
292ac     04 01 58 FC | 	wrword	#0, _var05
292b0                 | LR__4234
292b0                 | ' 		lfnbuf[i] = 0;
292b0                 | ' 	}
292b0                 | ' 
292b0                 | ' 	return 1;
292b0     01 FA 05 F6 | 	mov	result1, #1
292b4                 | LR__4235
292b4                 | _fatfs_cc_pick_lfn_ret
292b4     2D 00 64 FD | 	ret
292b8                 | 
292b8                 | _fatfs_cc_put_lfn
292b8     0D 14 06 F1 | 	add	arg02, #13
292bc     0A 19 42 FC | 	wrbyte	arg04, arg02
292c0     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
292c4     01 18 86 F1 | 	sub	arg04, #1
292c8     0D 18 06 FD | 	qmul	arg04, #13
292cc     09 01 02 F6 | 	mov	_var01, arg01
292d0     02 14 86 F1 | 	sub	arg02, #2
292d4     0A 1F 48 FC | 	wrbyte	#15, arg02
292d8     01 14 06 F1 | 	add	arg02, #1
292dc     0A 01 48 FC | 	wrbyte	#0, arg02
292e0     0C 14 86 F1 | 	sub	arg02, #12
292e4     0A 13 02 F6 | 	mov	arg01, arg02
292e8     1A 12 06 F1 | 	add	arg01, #26
292ec     09 01 58 FC | 	wrword	#0, arg01
292f0     00 02 06 F6 | 	mov	_var02, #0
292f4     00 04 06 F6 | 	mov	_var03, #0
292f8                 | ' 	BYTE* dir,
292f8                 | ' 	BYTE ord,
292f8                 | ' 	BYTE sum
292f8                 | ' )
292f8                 | ' {
292f8                 | ' 	UINT i, s;
292f8                 | ' 	WCHAR wc;
292f8                 | ' 
292f8                 | ' 
292f8                 | ' 	dir[ 13 ] = sum;
292f8                 | ' 	dir[ 11 ] =  0x0F ;
292f8                 | ' 	dir[ 12 ] = 0;
292f8                 | ' 	st_word(dir +  26 , 0);
292f8                 | ' 
292f8                 | ' 	i = (ord - 1) * 13;
292f8                 | ' 	s = wc = 0;
292f8                 | ' 	do {
292f8     01 00 00 FF 
292fc     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
29300     18 06 62 FD | 	getqx	_var04
29304     97 2A 48 FB | 	callpa	#(@LR__4241-@LR__4240)>>2,fcache_load_ptr_
29308                 | LR__4240
29308     01 19 32 F9 | 	getword	arg04, _var02, #0
2930c     7F 00 00 FF 
29310     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
29314     03 13 02 56 |  if_ne	mov	arg01, _var04
29318     01 06 06 51 |  if_ne	add	_var04, #1
2931c     01 12 66 50 |  if_ne	shl	arg01, #1
29320     00 13 02 51 |  if_ne	add	arg01, _var01
29324     09 03 E2 5A |  if_ne	rdword	_var02, arg01
29328     0A 13 02 F6 | 	mov	arg01, arg02
2932c     02 19 02 F6 | 	mov	arg04, _var03
29330     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
29334     0C 19 C2 FA | 	rdbyte	arg04, arg04
29338     01 18 06 FA | 	mul	arg04, #1
2933c     0C 13 02 F1 | 	add	arg01, arg04
29340     09 03 52 FC | 	wrword	_var02, arg01
29344     01 19 02 F6 | 	mov	arg04, _var02
29348     0F 18 4E F7 | 	zerox	arg04, #15 wz
2934c     0F 02 CE A9 |  if_e	bmask	_var02, #15
29350     01 04 06 F1 | 	add	_var03, #1
29354     0D 04 16 F2 | 	cmp	_var03, #13 wc
29358     AC FF 9F CD |  if_b	jmp	#LR__4240
2935c                 | LR__4241
2935c     01 00 00 FF 
29360     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
29364     01 03 32 F9 | 	getword	_var02, _var02, #0
29368     7F 00 00 FF 
2936c     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
29370     01 06 66 50 |  if_ne	shl	_var04, #1
29374     00 07 02 51 |  if_ne	add	_var04, _var01
29378     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
2937c     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
29380     40 16 46 A5 |  if_e	or	arg03, #64
29384     0A 17 42 FC | 	wrbyte	arg03, arg02
29388                 | _fatfs_cc_put_lfn_ret
29388     2D 00 64 FD | 	ret
2938c                 | 
2938c                 | _fatfs_cc_gen_numname
2938c     08 4A 05 F6 | 	mov	COUNT_, #8
29390     A8 00 A0 FD | 	call	#pushregs_
29394     2C F0 07 F1 | 	add	ptra, #44
29398     09 1F 02 F6 | 	mov	local01, arg01
2939c     0A 21 02 F6 | 	mov	local02, arg02
293a0     0B 23 02 F6 | 	mov	local03, arg03
293a4     0C 25 02 F6 | 	mov	local04, arg04
293a8     0F 13 02 F6 | 	mov	arg01, local01
293ac     10 15 02 F6 | 	mov	arg02, local02
293b0     0B 16 06 F6 | 	mov	arg03, #11
293b4     84 75 BF FD | 	call	#__system____builtin_memmove
293b8     06 24 16 F2 | 	cmp	local04, #6 wc
293bc     48 00 90 CD |  if_b	jmp	#LR__4255
293c0     12 27 02 F6 | 	mov	local05, local04
293c4     97 1E 48 FB | 	callpa	#(@LR__4253-@LR__4250)>>2,fcache_load_ptr_
293c8                 | ' 		sreg = seq;
293c8                 | ' 		while (*lfn) {
293c8                 | LR__4250
293c8     11 29 EA FA | 	rdword	local06, local03 wz
293cc     34 00 90 AD |  if_e	jmp	#LR__4254
293d0     11 2B E2 FA | 	rdword	local07, local03
293d4                 | ' 			wc = *lfn++;
293d4                 | ' 			for (i = 0; i < 16; i++) {
293d4     02 22 06 F1 | 	add	local03, #2
293d8     10 12 DC FC | 	rep	@LR__4252, #16
293dc                 | LR__4251
293dc     01 26 66 F0 | 	shl	local05, #1
293e0     15 29 32 F9 | 	getword	local06, local07, #0
293e4     01 28 06 F5 | 	and	local06, #1
293e8     14 27 02 F1 | 	add	local05, local06
293ec     15 2B 32 F9 | 	getword	local07, local07, #0
293f0     01 2A 46 F0 | 	shr	local07, #1
293f4     10 26 2E F4 | 	testbn	local05, #16 wz
293f8     88 00 00 5F 
293fc     21 26 66 55 |  if_ne	xor	local05, ##69665
29400                 | LR__4252
29400     C4 FF 9F FD | 	jmp	#LR__4250
29404                 | LR__4253
29404                 | LR__4254
29404     13 25 02 F6 | 	mov	local04, local05
29408                 | LR__4255
29408     07 2A 06 F6 | 	mov	local07, #7
2940c                 | ' 			}
2940c                 | ' 		}
2940c                 | ' 		seq = (UINT)sreg;
2940c                 | ' 	}
2940c                 | ' 
2940c                 | ' 
2940c                 | ' 	i = 7;
2940c                 | ' 	do {
2940c     10 4E 05 F1 | 	add	fp, #16
29410     97 1A 48 FB | 	callpa	#(@LR__4257-@LR__4256)>>2,fcache_load_ptr_
29414                 | LR__4256
29414     12 27 42 F8 | 	getnib	local05, local04, #0
29418     30 26 06 F1 | 	add	local05, #48
2941c     04 24 46 F0 | 	shr	local04, #4
29420     13 29 E2 F8 | 	getbyte	local06, local05, #0
29424     3A 28 16 F2 | 	cmp	local06, #58 wc
29428     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
2942c     07 26 06 31 |  if_ae	add	local05, #7
29430     15 29 02 F6 | 	mov	local06, local07
29434     01 2A 8E F1 | 	sub	local07, #1 wz
29438     A7 28 02 F1 | 	add	local06, fp
2943c     14 27 42 FC | 	wrbyte	local05, local06
29440     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
29444     CC FF 9F 5D |  if_ne	jmp	#LR__4256
29448                 | LR__4257
29448     15 29 02 F6 | 	mov	local06, local07
2944c     A7 28 02 F1 | 	add	local06, fp
29450     14 FD 48 FC | 	wrbyte	#126, local06
29454                 | ' 	ns[i] = '~';
29454                 | ' 
29454                 | ' 
29454                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
29454     00 26 06 F6 | 	mov	local05, #0
29458     10 4E 85 F1 | 	sub	fp, #16
2945c     97 2A 48 FB | 	callpa	#(@LR__4260-@LR__4258)>>2,fcache_load_ptr_
29460                 | LR__4258
29460     15 27 12 F2 | 	cmp	local05, local07 wc
29464     4C 00 90 3D |  if_ae	jmp	#LR__4261
29468     13 29 02 F6 | 	mov	local06, local05
2946c     0F 29 02 F1 | 	add	local06, local01
29470     14 29 C2 FA | 	rdbyte	local06, local06
29474     20 28 0E F2 | 	cmp	local06, #32 wz
29478     38 00 90 AD |  if_e	jmp	#LR__4261
2947c     13 13 02 F6 | 	mov	arg01, local05
29480     0F 13 02 F1 | 	add	arg01, local01
29484     09 13 CA FA | 	rdbyte	arg01, arg01 wz
29488     00 FA 05 56 |  if_ne	mov	result1, #0
2948c                 | ' 
2948c                 | ' 	return 0;
2948c     00 FA 05 A6 |  if_e	mov	result1, #0
29490     00 FA 0D F2 | 	cmp	result1, #0 wz
29494     14 00 90 AD |  if_e	jmp	#LR__4259
29498     15 29 02 F6 | 	mov	local06, local07
2949c     01 28 86 F1 | 	sub	local06, #1
294a0     14 27 0A F2 | 	cmp	local05, local06 wz
294a4     0C 00 90 AD |  if_e	jmp	#LR__4261
294a8     01 26 06 F1 | 	add	local05, #1
294ac                 | LR__4259
294ac     01 26 06 F1 | 	add	local05, #1
294b0     AC FF 9F FD | 	jmp	#LR__4258
294b4                 | LR__4260
294b4                 | LR__4261
294b4     97 20 48 FB | 	callpa	#(@LR__4265-@LR__4262)>>2,fcache_load_ptr_
294b8                 | ' 			j++;
294b8                 | ' 		}
294b8                 | ' 	}
294b8                 | ' 	do {
294b8                 | LR__4262
294b8     13 29 02 F6 | 	mov	local06, local05
294bc     0F 29 02 F1 | 	add	local06, local01
294c0     08 2A 16 F2 | 	cmp	local07, #8 wc
294c4     01 26 06 F1 | 	add	local05, #1
294c8     1C 00 90 3D |  if_ae	jmp	#LR__4263
294cc     15 25 02 F6 | 	mov	local04, local07
294d0     10 4E 05 F1 | 	add	fp, #16
294d4     A7 24 02 F1 | 	add	local04, fp
294d8     12 2D C2 FA | 	rdbyte	local08, local04
294dc     01 2A 06 F1 | 	add	local07, #1
294e0     10 4E 85 F1 | 	sub	fp, #16
294e4     04 00 90 FD | 	jmp	#LR__4264
294e8                 | LR__4263
294e8     20 2C 06 F6 | 	mov	local08, #32
294ec                 | LR__4264
294ec     14 2D 42 FC | 	wrbyte	local08, local06
294f0     08 26 16 F2 | 	cmp	local05, #8 wc
294f4     C0 FF 9F CD |  if_b	jmp	#LR__4262
294f8                 | LR__4265
294f8     A7 F0 03 F6 | 	mov	ptra, fp
294fc     B2 00 A0 FD | 	call	#popregs_
29500                 | _fatfs_cc_gen_numname_ret
29500     2D 00 64 FD | 	ret
29504                 | 
29504                 | _fatfs_cc_sum_sfn
29504     00 00 06 F6 | 	mov	_var01, #0
29508                 | ' )
29508                 | ' {
29508                 | ' 	BYTE sum = 0;
29508                 | ' 	UINT n = 11;
29508                 | ' 
29508                 | ' 	do {
29508     97 12 48 FB | 	callpa	#(@LR__4272-@LR__4270)>>2,fcache_load_ptr_
2950c                 | LR__4270
2950c     0B 10 DC FC | 	rep	@LR__4273, #11
29510                 | LR__4271
29510     00 FB E1 F8 | 	getbyte	result1, _var01, #0
29514     01 FA 45 F0 | 	shr	result1, #1
29518     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2951c     07 00 66 F0 | 	shl	_var01, #7
29520     00 FB 01 F1 | 	add	result1, _var01
29524     09 01 C2 FA | 	rdbyte	_var01, arg01
29528     FD 00 02 F1 | 	add	_var01, result1
2952c     01 12 06 F1 | 	add	arg01, #1
29530                 | LR__4272
29530                 | LR__4273
29530                 | ' 	return sum;
29530     00 FB 01 F6 | 	mov	result1, _var01
29534                 | _fatfs_cc_sum_sfn_ret
29534     2D 00 64 FD | 	ret
29538                 | 
29538                 | _fatfs_cc_dir_read
29538     0C 4A 05 F6 | 	mov	COUNT_, #12
2953c     A8 00 A0 FD | 	call	#pushregs_
29540     09 1F 02 F6 | 	mov	local01, arg01
29544     0A 21 02 F6 | 	mov	local02, arg02
29548     04 22 06 F6 | 	mov	local03, #4
2954c     0F 25 02 FB | 	rdlong	local04, local01
29550     FF 26 06 F6 | 	mov	local05, #255
29554     FF 28 06 F6 | 	mov	local06, #255
29558                 | ' )
29558                 | ' {
29558                 | ' 	FRESULT res = FR_NO_FILE;
29558                 | ' 	FATFS *fs = dp->obj.fs;
29558                 | ' 	BYTE attr, b;
29558                 | ' 
29558                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
29558                 | ' 
29558                 | ' 
29558                 | ' 	while (dp->sect) {
29558                 | LR__4280
29558     18 1E 06 F1 | 	add	local01, #24
2955c     0F FB 09 FB | 	rdlong	result1, local01 wz
29560     18 1E 86 F1 | 	sub	local01, #24
29564     AC 01 90 AD |  if_e	jmp	#LR__4290
29568     18 1E 06 F1 | 	add	local01, #24
2956c     0F 15 02 FB | 	rdlong	arg02, local01
29570     18 1E 86 F1 | 	sub	local01, #24
29574     12 13 02 F6 | 	mov	arg01, local04
29578     AC ED BF FD | 	call	#_fatfs_cc_move_window
2957c     FD 22 0A F6 | 	mov	local03, result1 wz
29580     90 01 90 5D |  if_ne	jmp	#LR__4290
29584     1C 1E 06 F1 | 	add	local01, #28
29588     0F FB 01 FB | 	rdlong	result1, local01
2958c     1C 1E 86 F1 | 	sub	local01, #28
29590     FD 2A C2 FA | 	rdbyte	local07, result1
29594     15 FB 01 F6 | 	mov	result1, local07
29598     07 FA 4D F7 | 	zerox	result1, #7 wz
2959c     04 22 06 A6 |  if_e	mov	local03, #4
295a0                 | ' 			res = FR_NO_FILE; break;
295a0     70 01 90 AD |  if_e	jmp	#LR__4290
295a4     1C 1E 06 F1 | 	add	local01, #28
295a8     0F 2D 02 FB | 	rdlong	local08, local01
295ac     0B 2C 06 F1 | 	add	local08, #11
295b0     16 2F C2 FA | 	rdbyte	local09, local08
295b4     3F 2E 06 F5 | 	and	local09, #63
295b8     16 1E 86 F1 | 	sub	local01, #22
295bc     0F 2F 42 FC | 	wrbyte	local09, local01
295c0     06 1E 86 F1 | 	sub	local01, #6
295c4     15 FB E1 F8 | 	getbyte	result1, local07, #0
295c8     E5 FA 0D F2 | 	cmp	result1, #229 wz
295cc     15 2D 02 56 |  if_ne	mov	local08, local07
295d0     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
295d4     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
295d8     1C 00 90 AD |  if_e	jmp	#LR__4281
295dc     00 30 06 F6 | 	mov	local10, #0
295e0     17 2D E2 F8 | 	getbyte	local08, local09, #0
295e4     20 2C 26 F5 | 	andn	local08, #32
295e8     08 2C 0E F2 | 	cmp	local08, #8 wz
295ec     01 30 06 A6 |  if_e	mov	local10, #1
295f0     10 31 0A F2 | 	cmp	local10, local02 wz
295f4     08 00 90 AD |  if_e	jmp	#LR__4282
295f8                 | LR__4281
295f8     FF 26 06 F6 | 	mov	local05, #255
295fc     00 01 90 FD | 	jmp	#LR__4289
29600                 | LR__4282
29600     17 2F E2 F8 | 	getbyte	local09, local09, #0
29604     0F 2E 0E F2 | 	cmp	local09, #15 wz
29608     B4 00 90 5D |  if_ne	jmp	#LR__4286
2960c     15 33 E2 F8 | 	getbyte	local11, local07, #0
29610     40 32 CE F7 | 	test	local11, #64 wz
29614     30 00 90 AD |  if_e	jmp	#LR__4283
29618     1C 1E 06 F1 | 	add	local01, #28
2961c     0F 33 02 FB | 	rdlong	local11, local01
29620     0D 32 06 F1 | 	add	local11, #13
29624     19 29 C2 FA | 	rdbyte	local06, local11
29628     15 2B E2 F8 | 	getbyte	local07, local07, #0
2962c     BF 2A 06 F5 | 	and	local07, #191
29630     15 27 02 F6 | 	mov	local05, local07
29634     0C 1E 86 F1 | 	sub	local01, #12
29638     0F 33 02 FB | 	rdlong	local11, local01
2963c     1C 1E 06 F1 | 	add	local01, #28
29640     0F 33 62 FC | 	wrlong	local11, local01
29644     2C 1E 86 F1 | 	sub	local01, #44
29648                 | LR__4283
29648     15 2D E2 F8 | 	getbyte	local08, local07, #0
2964c     13 31 E2 F8 | 	getbyte	local10, local05, #0
29650     18 2D 0A F2 | 	cmp	local08, local10 wz
29654     5C 00 90 5D |  if_ne	jmp	#LR__4284
29658     14 31 E2 F8 | 	getbyte	local10, local06, #0
2965c     1C 1E 06 F1 | 	add	local01, #28
29660     0F 2F 02 FB | 	rdlong	local09, local01
29664     1C 1E 86 F1 | 	sub	local01, #28
29668     0D 2E 06 F1 | 	add	local09, #13
2966c     17 2D C2 FA | 	rdbyte	local08, local09
29670     16 2F E2 F8 | 	getbyte	local09, local08, #0
29674     17 31 0A F2 | 	cmp	local10, local09 wz
29678     38 00 90 5D |  if_ne	jmp	#LR__4284
2967c     0C 24 06 F1 | 	add	local04, #12
29680     12 13 02 FB | 	rdlong	arg01, local04
29684     0C 24 86 F1 | 	sub	local04, #12
29688     1C 1E 06 F1 | 	add	local01, #28
2968c     0F 35 02 FB | 	rdlong	local12, local01
29690     1C 1E 86 F1 | 	sub	local01, #28
29694     1A 15 02 F6 | 	mov	arg02, local12
29698     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
2969c     00 FA 4D F2 | 	cmps	result1, #0 wz
296a0     13 35 02 56 |  if_ne	mov	local12, local05
296a4     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
296a8     01 34 86 51 |  if_ne	sub	local12, #1
296ac     1A 33 02 56 |  if_ne	mov	local11, local12
296b0     04 00 90 5D |  if_ne	jmp	#LR__4285
296b4                 | LR__4284
296b4     FF 32 06 F6 | 	mov	local11, #255
296b8                 | LR__4285
296b8     19 27 02 F6 | 	mov	local05, local11
296bc     40 00 90 FD | 	jmp	#LR__4288
296c0                 | LR__4286
296c0     13 33 02 F6 | 	mov	local11, local05
296c4     07 32 4E F7 | 	zerox	local11, #7 wz
296c8     20 00 90 5D |  if_ne	jmp	#LR__4287
296cc     14 29 E2 F8 | 	getbyte	local06, local06, #0
296d0     1C 1E 06 F1 | 	add	local01, #28
296d4     0F 13 02 FB | 	rdlong	arg01, local01
296d8     1C 1E 86 F1 | 	sub	local01, #28
296dc     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
296e0     FD FA E1 F8 | 	getbyte	result1, result1, #0
296e4     FD 28 0A F2 | 	cmp	local06, result1 wz
296e8     28 00 90 AD |  if_e	jmp	#LR__4290
296ec                 | LR__4287
296ec     2C 1E 06 F1 | 	add	local01, #44
296f0     FF FF FF FF 
296f4     0F FF 6B FC | 	wrlong	##-1, local01
296f8     2C 1E 86 F1 | 	sub	local01, #44
296fc                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
296fc                 | ' 					}
296fc                 | ' 					break;
296fc     14 00 90 FD | 	jmp	#LR__4290
29700                 | LR__4288
29700                 | LR__4289
29700     0F 13 02 F6 | 	mov	arg01, local01
29704     00 14 06 F6 | 	mov	arg02, #0
29708     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
2970c     FD 22 0A F6 | 	mov	local03, result1 wz
29710     44 FE 9F AD |  if_e	jmp	#LR__4280
29714                 | LR__4290
29714     00 22 0E F2 | 	cmp	local03, #0 wz
29718     18 1E 06 51 |  if_ne	add	local01, #24
2971c     0F 01 68 5C |  if_ne	wrlong	#0, local01
29720                 | ' 	return res;
29720     11 FB 01 F6 | 	mov	result1, local03
29724     A7 F0 03 F6 | 	mov	ptra, fp
29728     B2 00 A0 FD | 	call	#popregs_
2972c                 | _fatfs_cc_dir_read_ret
2972c     2D 00 64 FD | 	ret
29730                 | 
29730                 | _fatfs_cc_dir_find
29730     0B 4A 05 F6 | 	mov	COUNT_, #11
29734     A8 00 A0 FD | 	call	#pushregs_
29738     09 1F 02 F6 | 	mov	local01, arg01
2973c     0F 21 02 FB | 	rdlong	local02, local01
29740     0F 13 02 F6 | 	mov	arg01, local01
29744     00 14 06 F6 | 	mov	arg02, #0
29748     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2974c     00 FA 0D F2 | 	cmp	result1, #0 wz
29750     18 02 90 5D |  if_ne	jmp	#LR__4312
29754     FF 22 06 F6 | 	mov	local03, #255
29758     FF 24 06 F6 | 	mov	local04, #255
2975c     2C 1E 06 F1 | 	add	local01, #44
29760     FF FF FF FF 
29764     0F FF 6B FC | 	wrlong	##-1, local01
29768     2C 1E 86 F1 | 	sub	local01, #44
2976c                 | ' #line 2404 "ff.c"
2976c                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2976c                 | ' 
2976c                 | ' 	do {
2976c                 | LR__4300
2976c     18 1E 06 F1 | 	add	local01, #24
29770     0F 15 02 FB | 	rdlong	arg02, local01
29774     18 1E 86 F1 | 	sub	local01, #24
29778     10 13 02 F6 | 	mov	arg01, local02
2977c     A8 EB BF FD | 	call	#_fatfs_cc_move_window
29780     FD 26 0A F6 | 	mov	local05, result1 wz
29784     E0 01 90 5D |  if_ne	jmp	#LR__4311
29788     1C 1E 06 F1 | 	add	local01, #28
2978c     0F 17 02 FB | 	rdlong	arg03, local01
29790     1C 1E 86 F1 | 	sub	local01, #28
29794     0B 29 C2 FA | 	rdbyte	local06, arg03
29798     14 17 02 F6 | 	mov	arg03, local06
2979c     07 16 4E F7 | 	zerox	arg03, #7 wz
297a0     04 26 06 A6 |  if_e	mov	local05, #4
297a4     C0 01 90 AD |  if_e	jmp	#LR__4311
297a8     1C 1E 06 F1 | 	add	local01, #28
297ac     0F 2B 02 FB | 	rdlong	local07, local01
297b0     15 17 02 F6 | 	mov	arg03, local07
297b4     0B 16 06 F1 | 	add	arg03, #11
297b8     0B 2D C2 FA | 	rdbyte	local08, arg03
297bc     3F 2C 06 F5 | 	and	local08, #63
297c0     16 1E 86 F1 | 	sub	local01, #22
297c4     0F 2D 42 FC | 	wrbyte	local08, local01
297c8     06 1E 86 F1 | 	sub	local01, #6
297cc     14 17 E2 F8 | 	getbyte	arg03, local06, #0
297d0     E5 16 0E F2 | 	cmp	arg03, #229 wz
297d4     18 00 90 AD |  if_e	jmp	#LR__4301
297d8     16 17 E2 F8 | 	getbyte	arg03, local08, #0
297dc     08 16 CE F7 | 	test	arg03, #8 wz
297e0     16 2B 02 56 |  if_ne	mov	local07, local08
297e4     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
297e8     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
297ec     18 00 90 AD |  if_e	jmp	#LR__4302
297f0                 | LR__4301
297f0     FF 24 06 F6 | 	mov	local04, #255
297f4     2C 1E 06 F1 | 	add	local01, #44
297f8     FF FF FF FF 
297fc     0F FF 6B FC | 	wrlong	##-1, local01
29800     2C 1E 86 F1 | 	sub	local01, #44
29804     4C 01 90 FD | 	jmp	#LR__4310
29808                 | LR__4302
29808     16 2D E2 F8 | 	getbyte	local08, local08, #0
2980c     0F 2C 0E F2 | 	cmp	local08, #15 wz
29810     C8 00 90 5D |  if_ne	jmp	#LR__4306
29814     2B 1E 06 F1 | 	add	local01, #43
29818     0F 2D C2 FA | 	rdbyte	local08, local01
2981c     2B 1E 86 F1 | 	sub	local01, #43
29820     40 2C CE F7 | 	test	local08, #64 wz
29824     2C 01 90 5D |  if_ne	jmp	#LR__4309
29828     14 2F E2 F8 | 	getbyte	local09, local06, #0
2982c     40 2E CE F7 | 	test	local09, #64 wz
29830     30 00 90 AD |  if_e	jmp	#LR__4303
29834     1C 1E 06 F1 | 	add	local01, #28
29838     0F 2F 02 FB | 	rdlong	local09, local01
2983c     0D 2E 06 F1 | 	add	local09, #13
29840     17 23 C2 FA | 	rdbyte	local03, local09
29844     14 29 E2 F8 | 	getbyte	local06, local06, #0
29848     BF 28 06 F5 | 	and	local06, #191
2984c     14 25 02 F6 | 	mov	local04, local06
29850     0C 1E 86 F1 | 	sub	local01, #12
29854     0F 2F 02 FB | 	rdlong	local09, local01
29858     1C 1E 06 F1 | 	add	local01, #28
2985c     0F 2F 62 FC | 	wrlong	local09, local01
29860     2C 1E 86 F1 | 	sub	local01, #44
29864                 | LR__4303
29864     14 31 E2 F8 | 	getbyte	local10, local06, #0
29868     12 2B E2 F8 | 	getbyte	local07, local04, #0
2986c     15 31 0A F2 | 	cmp	local10, local07 wz
29870     5C 00 90 5D |  if_ne	jmp	#LR__4304
29874     11 2D E2 F8 | 	getbyte	local08, local03, #0
29878     1C 1E 06 F1 | 	add	local01, #28
2987c     0F 2B 02 FB | 	rdlong	local07, local01
29880     1C 1E 86 F1 | 	sub	local01, #28
29884     0D 2A 06 F1 | 	add	local07, #13
29888     15 29 C2 FA | 	rdbyte	local06, local07
2988c     14 2B E2 F8 | 	getbyte	local07, local06, #0
29890     15 2D 0A F2 | 	cmp	local08, local07 wz
29894     38 00 90 5D |  if_ne	jmp	#LR__4304
29898     0C 20 06 F1 | 	add	local02, #12
2989c     10 13 02 FB | 	rdlong	arg01, local02
298a0     0C 20 86 F1 | 	sub	local02, #12
298a4     1C 1E 06 F1 | 	add	local01, #28
298a8     0F 33 02 FB | 	rdlong	local11, local01
298ac     1C 1E 86 F1 | 	sub	local01, #28
298b0     19 15 02 F6 | 	mov	arg02, local11
298b4     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
298b8     00 FA 4D F2 | 	cmps	result1, #0 wz
298bc     12 33 02 56 |  if_ne	mov	local11, local04
298c0     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
298c4     01 32 86 51 |  if_ne	sub	local11, #1
298c8     19 2F 02 56 |  if_ne	mov	local09, local11
298cc     04 00 90 5D |  if_ne	jmp	#LR__4305
298d0                 | LR__4304
298d0     FF 2E 06 F6 | 	mov	local09, #255
298d4                 | LR__4305
298d4     17 25 02 F6 | 	mov	local04, local09
298d8     78 00 90 FD | 	jmp	#LR__4309
298dc                 | LR__4306
298dc     12 2F 02 F6 | 	mov	local09, local04
298e0     07 2E 4E F7 | 	zerox	local09, #7 wz
298e4     20 00 90 5D |  if_ne	jmp	#LR__4307
298e8     11 31 E2 F8 | 	getbyte	local10, local03, #0
298ec     1C 1E 06 F1 | 	add	local01, #28
298f0     0F 13 02 FB | 	rdlong	arg01, local01
298f4     1C 1E 86 F1 | 	sub	local01, #28
298f8     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
298fc     FD FA E1 F8 | 	getbyte	result1, result1, #0
29900     FD 30 0A F2 | 	cmp	local10, result1 wz
29904     60 00 90 AD |  if_e	jmp	#LR__4311
29908                 | LR__4307
29908     2B 1E 06 F1 | 	add	local01, #43
2990c     0F 2F C2 FA | 	rdbyte	local09, local01
29910     2B 1E 86 F1 | 	sub	local01, #43
29914     01 2E CE F7 | 	test	local09, #1 wz
29918     24 00 90 5D |  if_ne	jmp	#LR__4308
2991c     1C 1E 06 F1 | 	add	local01, #28
29920     0F 13 02 FB | 	rdlong	arg01, local01
29924     04 1E 06 F1 | 	add	local01, #4
29928     0F 15 02 F6 | 	mov	arg02, local01
2992c     20 1E 86 F1 | 	sub	local01, #32
29930     0B 16 06 F6 | 	mov	arg03, #11
29934     88 DA BF FD | 	call	#_fatfs_cc_memcmp
29938     00 FA 0D F2 | 	cmp	result1, #0 wz
2993c     28 00 90 AD |  if_e	jmp	#LR__4311
29940                 | LR__4308
29940     FF 24 06 F6 | 	mov	local04, #255
29944     2C 1E 06 F1 | 	add	local01, #44
29948     FF FF FF FF 
2994c     0F FF 6B FC | 	wrlong	##-1, local01
29950     2C 1E 86 F1 | 	sub	local01, #44
29954                 | LR__4309
29954                 | LR__4310
29954     0F 13 02 F6 | 	mov	arg01, local01
29958     00 14 06 F6 | 	mov	arg02, #0
2995c     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
29960     FD 26 0A F6 | 	mov	local05, result1 wz
29964     04 FE 9F AD |  if_e	jmp	#LR__4300
29968                 | LR__4311
29968                 | ' 
29968                 | ' 	return res;
29968     13 FB 01 F6 | 	mov	result1, local05
2996c                 | LR__4312
2996c     A7 F0 03 F6 | 	mov	ptra, fp
29970     B2 00 A0 FD | 	call	#popregs_
29974                 | _fatfs_cc_dir_find_ret
29974     2D 00 64 FD | 	ret
29978                 | 
29978                 | _fatfs_cc_dir_register
29978     0A 4A 05 F6 | 	mov	COUNT_, #10
2997c     A8 00 A0 FD | 	call	#pushregs_
29980     2C F0 07 F1 | 	add	ptra, #44
29984     04 4E 05 F1 | 	add	fp, #4
29988     A7 12 62 FC | 	wrlong	arg01, fp
2998c     09 1F 02 FB | 	rdlong	local01, arg01
29990     08 4E 05 F1 | 	add	fp, #8
29994     A7 1E 62 FC | 	wrlong	local01, fp
29998     08 4E 85 F1 | 	sub	fp, #8
2999c     A7 20 02 FB | 	rdlong	local02, fp
299a0     04 4E 85 F1 | 	sub	fp, #4
299a4     2B 20 06 F1 | 	add	local02, #43
299a8     10 21 C2 FA | 	rdbyte	local02, local02
299ac     A0 20 CE F7 | 	test	local02, #160 wz
299b0     06 FA 05 56 |  if_ne	mov	result1, #6
299b4     F8 03 90 5D |  if_ne	jmp	#LR__4335
299b8                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
299b8     14 4E 05 F1 | 	add	fp, #20
299bc     A7 00 68 FC | 	wrlong	#0, fp
299c0     14 4E 85 F1 | 	sub	fp, #20
299c4     97 28 48 FB | 	callpa	#(@LR__4321-@LR__4320)>>2,fcache_load_ptr_
299c8                 | LR__4320
299c8     0C 4E 05 F1 | 	add	fp, #12
299cc     A7 20 02 FB | 	rdlong	local02, fp
299d0     0C 20 06 F1 | 	add	local02, #12
299d4     10 23 02 FB | 	rdlong	local03, local02
299d8     08 4E 05 F1 | 	add	fp, #8
299dc     A7 24 02 FB | 	rdlong	local04, fp
299e0     14 4E 85 F1 | 	sub	fp, #20
299e4     01 24 66 F0 | 	shl	local04, #1
299e8     11 25 02 F1 | 	add	local04, local03
299ec     12 21 EA FA | 	rdword	local02, local04 wz
299f0     24 00 90 AD |  if_e	jmp	#LR__4322
299f4     14 4E 05 F1 | 	add	fp, #20
299f8     A7 26 02 FB | 	rdlong	local05, fp
299fc     13 29 02 F6 | 	mov	local06, local05
29a00     13 2B 02 F6 | 	mov	local07, local05
29a04     15 2D 02 F6 | 	mov	local08, local07
29a08     01 2C 06 F1 | 	add	local08, #1
29a0c     A7 2C 62 FC | 	wrlong	local08, fp
29a10     14 4E 85 F1 | 	sub	fp, #20
29a14     B0 FF 9F FD | 	jmp	#LR__4320
29a18                 | LR__4321
29a18                 | LR__4322
29a18     1C 4E 05 F1 | 	add	fp, #28
29a1c     A7 12 02 F6 | 	mov	arg01, fp
29a20     18 4E 85 F1 | 	sub	fp, #24
29a24     A7 14 02 FB | 	rdlong	arg02, fp
29a28     04 4E 85 F1 | 	sub	fp, #4
29a2c     20 14 06 F1 | 	add	arg02, #32
29a30     0C 16 06 F6 | 	mov	arg03, #12
29a34     04 6F BF FD | 	call	#__system____builtin_memmove
29a38     27 4E 05 F1 | 	add	fp, #39
29a3c     A7 2E C2 FA | 	rdbyte	local09, fp
29a40     27 4E 85 F1 | 	sub	fp, #39
29a44     01 2E CE F7 | 	test	local09, #1 wz
29a48     F4 00 90 AD |  if_e	jmp	#LR__4325
29a4c     04 4E 05 F1 | 	add	fp, #4
29a50     A7 30 02 FB | 	rdlong	local10, fp
29a54     2B 30 06 F1 | 	add	local10, #43
29a58     18 81 48 FC | 	wrbyte	#64, local10
29a5c                 | ' 		dp->fn[ 11 ] =  0x40 ;
29a5c                 | ' 		for (n = 1; n < 100; n++) {
29a5c     0C 4E 05 F1 | 	add	fp, #12
29a60     A7 02 68 FC | 	wrlong	#1, fp
29a64     10 4E 85 F1 | 	sub	fp, #16
29a68                 | LR__4323
29a68     10 4E 05 F1 | 	add	fp, #16
29a6c     A7 20 02 FB | 	rdlong	local02, fp
29a70     10 4E 85 F1 | 	sub	fp, #16
29a74     64 20 16 F2 | 	cmp	local02, #100 wc
29a78     70 00 90 3D |  if_ae	jmp	#LR__4324
29a7c     04 4E 05 F1 | 	add	fp, #4
29a80     A7 12 02 FB | 	rdlong	arg01, fp
29a84     20 12 06 F1 | 	add	arg01, #32
29a88     18 4E 05 F1 | 	add	fp, #24
29a8c     A7 14 02 F6 | 	mov	arg02, fp
29a90     10 4E 85 F1 | 	sub	fp, #16
29a94     A7 30 02 FB | 	rdlong	local10, fp
29a98     0C 30 06 F1 | 	add	local10, #12
29a9c     18 17 02 FB | 	rdlong	arg03, local10
29aa0     04 4E 05 F1 | 	add	fp, #4
29aa4     A7 18 02 FB | 	rdlong	arg04, fp
29aa8     10 4E 85 F1 | 	sub	fp, #16
29aac     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
29ab0     04 4E 05 F1 | 	add	fp, #4
29ab4     A7 12 02 FB | 	rdlong	arg01, fp
29ab8     04 4E 85 F1 | 	sub	fp, #4
29abc     70 FC BF FD | 	call	#_fatfs_cc_dir_find
29ac0     08 4E 05 F1 | 	add	fp, #8
29ac4     A7 FA 61 FC | 	wrlong	result1, fp
29ac8     00 FA 4D F2 | 	cmps	result1, #0 wz
29acc     08 4E 85 F1 | 	sub	fp, #8
29ad0     18 00 90 5D |  if_ne	jmp	#LR__4324
29ad4     10 4E 05 F1 | 	add	fp, #16
29ad8     A7 30 02 FB | 	rdlong	local10, fp
29adc     01 30 06 F1 | 	add	local10, #1
29ae0     A7 30 62 FC | 	wrlong	local10, fp
29ae4     10 4E 85 F1 | 	sub	fp, #16
29ae8     7C FF 9F FD | 	jmp	#LR__4323
29aec                 | LR__4324
29aec     10 4E 05 F1 | 	add	fp, #16
29af0     A7 30 02 FB | 	rdlong	local10, fp
29af4     10 4E 85 F1 | 	sub	fp, #16
29af8     64 30 0E F2 | 	cmp	local10, #100 wz
29afc     07 FA 05 A6 |  if_e	mov	result1, #7
29b00     AC 02 90 AD |  if_e	jmp	#LR__4335
29b04     08 4E 05 F1 | 	add	fp, #8
29b08     A7 30 02 FB | 	rdlong	local10, fp
29b0c     08 4E 85 F1 | 	sub	fp, #8
29b10     04 30 0E F2 | 	cmp	local10, #4 wz
29b14     08 4E 05 51 |  if_ne	add	fp, #8
29b18     A7 FA 01 5B |  if_ne	rdlong	result1, fp
29b1c     08 4E 85 51 |  if_ne	sub	fp, #8
29b20     8C 02 90 5D |  if_ne	jmp	#LR__4335
29b24     04 4E 05 F1 | 	add	fp, #4
29b28     A7 30 02 FB | 	rdlong	local10, fp
29b2c     23 4E 05 F1 | 	add	fp, #35
29b30     A7 1E C2 FA | 	rdbyte	local01, fp
29b34     27 4E 85 F1 | 	sub	fp, #39
29b38     2B 30 06 F1 | 	add	local10, #43
29b3c     18 1F 42 FC | 	wrbyte	local01, local10
29b40                 | LR__4325
29b40     27 4E 05 F1 | 	add	fp, #39
29b44     A7 20 C2 FA | 	rdbyte	local02, fp
29b48     27 4E 85 F1 | 	sub	fp, #39
29b4c     02 20 CE F7 | 	test	local02, #2 wz
29b50     20 00 90 AD |  if_e	jmp	#LR__4326
29b54     14 4E 05 F1 | 	add	fp, #20
29b58     A7 30 02 FB | 	rdlong	local10, fp
29b5c     0C 30 06 F1 | 	add	local10, #12
29b60     0D 30 16 FD | 	qdiv	local10, #13
29b64     14 4E 85 F1 | 	sub	fp, #20
29b68     18 30 62 FD | 	getqx	local10
29b6c     01 30 06 F1 | 	add	local10, #1
29b70     04 00 90 FD | 	jmp	#LR__4327
29b74                 | LR__4326
29b74     01 30 06 F6 | 	mov	local10, #1
29b78                 | LR__4327
29b78     18 4E 05 F1 | 	add	fp, #24
29b7c     A7 30 62 FC | 	wrlong	local10, fp
29b80     14 4E 85 F1 | 	sub	fp, #20
29b84     A7 12 02 FB | 	rdlong	arg01, fp
29b88     18 15 02 F6 | 	mov	arg02, local10
29b8c     04 4E 85 F1 | 	sub	fp, #4
29b90     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
29b94     08 4E 05 F1 | 	add	fp, #8
29b98     A7 FA 61 FC | 	wrlong	result1, fp
29b9c     08 4E 85 F1 | 	sub	fp, #8
29ba0     00 FA 0D F2 | 	cmp	result1, #0 wz
29ba4     38 01 90 5D |  if_ne	jmp	#LR__4332
29ba8     18 4E 05 F1 | 	add	fp, #24
29bac     A7 30 02 FB | 	rdlong	local10, fp
29bb0     01 30 8E F1 | 	sub	local10, #1 wz
29bb4     A7 30 62 FC | 	wrlong	local10, fp
29bb8     18 4E 85 F1 | 	sub	fp, #24
29bbc     20 01 90 AD |  if_e	jmp	#LR__4332
29bc0     04 4E 05 F1 | 	add	fp, #4
29bc4     A7 30 02 FB | 	rdlong	local10, fp
29bc8     18 13 02 F6 | 	mov	arg01, local10
29bcc     14 4E 05 F1 | 	add	fp, #20
29bd0     A7 18 02 FB | 	rdlong	arg04, fp
29bd4     18 4E 85 F1 | 	sub	fp, #24
29bd8     05 18 66 F0 | 	shl	arg04, #5
29bdc     10 30 06 F1 | 	add	local10, #16
29be0     18 15 02 FB | 	rdlong	arg02, local10
29be4     0C 15 82 F1 | 	sub	arg02, arg04
29be8     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
29bec     08 4E 05 F1 | 	add	fp, #8
29bf0     A7 FA 61 FC | 	wrlong	result1, fp
29bf4     08 4E 85 F1 | 	sub	fp, #8
29bf8     00 FA 0D F2 | 	cmp	result1, #0 wz
29bfc     E0 00 90 5D |  if_ne	jmp	#LR__4331
29c00     04 4E 05 F1 | 	add	fp, #4
29c04     A7 12 02 FB | 	rdlong	arg01, fp
29c08     04 4E 85 F1 | 	sub	fp, #4
29c0c     20 12 06 F1 | 	add	arg01, #32
29c10     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
29c14     FD 30 02 F6 | 	mov	local10, result1
29c18     28 4E 05 F1 | 	add	fp, #40
29c1c     A7 30 42 FC | 	wrbyte	local10, fp
29c20     28 4E 85 F1 | 	sub	fp, #40
29c24                 | ' 			sum = sum_sfn(dp->fn);
29c24                 | ' 			do {
29c24                 | LR__4328
29c24     0C 4E 05 F1 | 	add	fp, #12
29c28     A7 12 02 FB | 	rdlong	arg01, fp
29c2c     08 4E 85 F1 | 	sub	fp, #8
29c30     A7 1E 02 FB | 	rdlong	local01, fp
29c34     04 4E 85 F1 | 	sub	fp, #4
29c38     18 1E 06 F1 | 	add	local01, #24
29c3c     0F 15 02 FB | 	rdlong	arg02, local01
29c40     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
29c44     08 4E 05 F1 | 	add	fp, #8
29c48     A7 FA 61 FC | 	wrlong	result1, fp
29c4c     00 FA 4D F2 | 	cmps	result1, #0 wz
29c50     08 4E 85 F1 | 	sub	fp, #8
29c54     88 00 90 5D |  if_ne	jmp	#LR__4330
29c58     0C 4E 05 F1 | 	add	fp, #12
29c5c     A7 20 02 FB | 	rdlong	local02, fp
29c60     0C 20 06 F1 | 	add	local02, #12
29c64     10 13 02 FB | 	rdlong	arg01, local02
29c68     08 4E 85 F1 | 	sub	fp, #8
29c6c     A7 1E 02 FB | 	rdlong	local01, fp
29c70     1C 1E 06 F1 | 	add	local01, #28
29c74     0F 15 02 FB | 	rdlong	arg02, local01
29c78     14 4E 05 F1 | 	add	fp, #20
29c7c     A7 16 02 FB | 	rdlong	arg03, fp
29c80     10 4E 05 F1 | 	add	fp, #16
29c84     A7 18 C2 FA | 	rdbyte	arg04, fp
29c88     28 4E 85 F1 | 	sub	fp, #40
29c8c     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
29c90     0C 4E 05 F1 | 	add	fp, #12
29c94     A7 30 02 FB | 	rdlong	local10, fp
29c98     03 30 06 F1 | 	add	local10, #3
29c9c     18 03 48 FC | 	wrbyte	#1, local10
29ca0     08 4E 85 F1 | 	sub	fp, #8
29ca4     A7 12 02 FB | 	rdlong	arg01, fp
29ca8     04 4E 85 F1 | 	sub	fp, #4
29cac     00 14 06 F6 | 	mov	arg02, #0
29cb0     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
29cb4     08 4E 05 F1 | 	add	fp, #8
29cb8     A7 FA 61 FC | 	wrlong	result1, fp
29cbc     00 FA 4D F2 | 	cmps	result1, #0 wz
29cc0     08 4E 85 F1 | 	sub	fp, #8
29cc4     18 00 90 5D |  if_ne	jmp	#LR__4329
29cc8     18 4E 05 F1 | 	add	fp, #24
29ccc     A7 30 02 FB | 	rdlong	local10, fp
29cd0     01 30 8E F1 | 	sub	local10, #1 wz
29cd4     A7 30 62 FC | 	wrlong	local10, fp
29cd8     18 4E 85 F1 | 	sub	fp, #24
29cdc     44 FF 9F 5D |  if_ne	jmp	#LR__4328
29ce0                 | LR__4329
29ce0                 | LR__4330
29ce0                 | LR__4331
29ce0                 | LR__4332
29ce0     08 4E 05 F1 | 	add	fp, #8
29ce4     A7 30 0A FB | 	rdlong	local10, fp wz
29ce8     08 4E 85 F1 | 	sub	fp, #8
29cec     B4 00 90 5D |  if_ne	jmp	#LR__4334
29cf0     0C 4E 05 F1 | 	add	fp, #12
29cf4     A7 12 02 FB | 	rdlong	arg01, fp
29cf8     08 4E 85 F1 | 	sub	fp, #8
29cfc     A7 1E 02 FB | 	rdlong	local01, fp
29d00     04 4E 85 F1 | 	sub	fp, #4
29d04     18 1E 06 F1 | 	add	local01, #24
29d08     0F 15 02 FB | 	rdlong	arg02, local01
29d0c     18 E6 BF FD | 	call	#_fatfs_cc_move_window
29d10     08 4E 05 F1 | 	add	fp, #8
29d14     A7 FA 61 FC | 	wrlong	result1, fp
29d18     08 4E 85 F1 | 	sub	fp, #8
29d1c     00 FA 0D F2 | 	cmp	result1, #0 wz
29d20     80 00 90 5D |  if_ne	jmp	#LR__4333
29d24     04 4E 05 F1 | 	add	fp, #4
29d28     A7 20 02 FB | 	rdlong	local02, fp
29d2c     04 4E 85 F1 | 	sub	fp, #4
29d30     1C 20 06 F1 | 	add	local02, #28
29d34     10 13 02 FB | 	rdlong	arg01, local02
29d38     00 14 06 F6 | 	mov	arg02, #0
29d3c     20 16 06 F6 | 	mov	arg03, #32
29d40     98 00 A0 FD | 	call	#\builtin_bytefill_
29d44     04 4E 05 F1 | 	add	fp, #4
29d48     A7 14 02 FB | 	rdlong	arg02, fp
29d4c     0A 1F 02 F6 | 	mov	local01, arg02
29d50     1C 1E 06 F1 | 	add	local01, #28
29d54     0F 13 02 FB | 	rdlong	arg01, local01
29d58     04 4E 85 F1 | 	sub	fp, #4
29d5c     20 14 06 F1 | 	add	arg02, #32
29d60     0B 16 06 F6 | 	mov	arg03, #11
29d64     D4 6B BF FD | 	call	#__system____builtin_memmove
29d68     04 4E 05 F1 | 	add	fp, #4
29d6c     A7 2E 02 FB | 	rdlong	local09, fp
29d70     17 31 02 F6 | 	mov	local10, local09
29d74     1C 30 06 F1 | 	add	local10, #28
29d78     18 1F 02 FB | 	rdlong	local01, local10
29d7c     2B 2E 06 F1 | 	add	local09, #43
29d80     17 31 C2 FA | 	rdbyte	local10, local09
29d84     18 30 06 F5 | 	and	local10, #24
29d88     0C 1E 06 F1 | 	add	local01, #12
29d8c     0F 31 42 FC | 	wrbyte	local10, local01
29d90     08 4E 05 F1 | 	add	fp, #8
29d94     A7 30 02 FB | 	rdlong	local10, fp
29d98     0C 4E 85 F1 | 	sub	fp, #12
29d9c     03 30 06 F1 | 	add	local10, #3
29da0     18 03 48 FC | 	wrbyte	#1, local10
29da4                 | LR__4333
29da4                 | LR__4334
29da4                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
29da4                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
29da4                 | ' 
29da4                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
29da4                 | ' 
29da4                 | ' 			fs->wflag = 1;
29da4                 | ' 		}
29da4                 | ' 	}
29da4                 | ' 
29da4                 | ' 	return res;
29da4     08 4E 05 F1 | 	add	fp, #8
29da8     A7 FA 01 FB | 	rdlong	result1, fp
29dac     08 4E 85 F1 | 	sub	fp, #8
29db0                 | LR__4335
29db0     A7 F0 03 F6 | 	mov	ptra, fp
29db4     B2 00 A0 FD | 	call	#popregs_
29db8                 | _fatfs_cc_dir_register_ret
29db8     2D 00 64 FD | 	ret
29dbc                 | 
29dbc                 | _fatfs_cc_dir_remove
29dbc     05 4A 05 F6 | 	mov	COUNT_, #5
29dc0     A8 00 A0 FD | 	call	#pushregs_
29dc4     09 1F 02 F6 | 	mov	local01, arg01
29dc8     0F 21 02 FB | 	rdlong	local02, local01
29dcc     10 1E 06 F1 | 	add	local01, #16
29dd0     0F 23 02 FB | 	rdlong	local03, local01
29dd4     1C 1E 06 F1 | 	add	local01, #28
29dd8     0F 15 02 FB | 	rdlong	arg02, local01
29ddc     2C 1E 86 F1 | 	sub	local01, #44
29de0     FF FF 7F FF 
29de4     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
29de8     00 24 06 A6 |  if_e	mov	local04, #0
29dec     18 00 90 AD |  if_e	jmp	#LR__4340
29df0     0F 13 02 F6 | 	mov	arg01, local01
29df4     2C 1E 06 F1 | 	add	local01, #44
29df8     0F 15 02 FB | 	rdlong	arg02, local01
29dfc     2C 1E 86 F1 | 	sub	local01, #44
29e00     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
29e04     FD 24 02 F6 | 	mov	local04, result1
29e08                 | LR__4340
29e08     12 27 0A F6 | 	mov	local05, local04 wz
29e0c     64 00 90 5D |  if_ne	jmp	#LR__4343
29e10                 | ' 		do {
29e10                 | LR__4341
29e10     18 1E 06 F1 | 	add	local01, #24
29e14     0F 15 02 FB | 	rdlong	arg02, local01
29e18     18 1E 86 F1 | 	sub	local01, #24
29e1c     10 13 02 F6 | 	mov	arg01, local02
29e20     04 E5 BF FD | 	call	#_fatfs_cc_move_window
29e24     FD 26 0A F6 | 	mov	local05, result1 wz
29e28     40 00 90 5D |  if_ne	jmp	#LR__4342
29e2c     1C 1E 06 F1 | 	add	local01, #28
29e30     0F 25 02 FB | 	rdlong	local04, local01
29e34     12 CB 49 FC | 	wrbyte	#229, local04
29e38     03 20 06 F1 | 	add	local02, #3
29e3c     10 03 48 FC | 	wrbyte	#1, local02
29e40     03 20 86 F1 | 	sub	local02, #3
29e44     0C 1E 86 F1 | 	sub	local01, #12
29e48     0F 25 02 FB | 	rdlong	local04, local01
29e4c     10 1E 86 F1 | 	sub	local01, #16
29e50     11 25 12 F2 | 	cmp	local04, local03 wc
29e54     14 00 90 3D |  if_ae	jmp	#LR__4342
29e58     0F 13 02 F6 | 	mov	arg01, local01
29e5c     00 14 06 F6 | 	mov	arg02, #0
29e60     90 EF BF FD | 	call	#_fatfs_cc_dir_next
29e64     FD 26 0A F6 | 	mov	local05, result1 wz
29e68     A4 FF 9F AD |  if_e	jmp	#LR__4341
29e6c                 | LR__4342
29e6c     04 26 0E F2 | 	cmp	local05, #4 wz
29e70     02 26 06 A6 |  if_e	mov	local05, #2
29e74                 | LR__4343
29e74                 | ' 	}
29e74                 | ' #line 2590 "ff.c"
29e74                 | ' 	return res;
29e74     13 FB 01 F6 | 	mov	result1, local05
29e78     A7 F0 03 F6 | 	mov	ptra, fp
29e7c     B2 00 A0 FD | 	call	#popregs_
29e80                 | _fatfs_cc_dir_remove_ret
29e80     2D 00 64 FD | 	ret
29e84                 | 
29e84                 | _fatfs_cc_get_fileinfo
29e84     0F 4A 05 F6 | 	mov	COUNT_, #15
29e88     A8 00 A0 FD | 	call	#pushregs_
29e8c     09 1F 02 F6 | 	mov	local01, arg01
29e90     0A 21 02 F6 | 	mov	local02, arg02
29e94     0F 23 02 FB | 	rdlong	local03, local01
29e98     1C 20 06 F1 | 	add	local02, #28
29e9c     10 01 48 FC | 	wrbyte	#0, local02
29ea0     1C 20 86 F1 | 	sub	local02, #28
29ea4     18 1E 06 F1 | 	add	local01, #24
29ea8     0F 25 0A FB | 	rdlong	local04, local01 wz
29eac     18 1E 86 F1 | 	sub	local01, #24
29eb0     90 03 90 AD |  if_e	jmp	#LR__4364
29eb4     2C 1E 06 F1 | 	add	local01, #44
29eb8     0F 25 02 FB | 	rdlong	local04, local01
29ebc     2C 1E 86 F1 | 	sub	local01, #44
29ec0     FF FF 7F FF 
29ec4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
29ec8     D8 00 90 AD |  if_e	jmp	#LR__4353
29ecc     00 26 06 F6 | 	mov	local05, #0
29ed0     00 28 06 F6 | 	mov	local06, #0
29ed4     00 2A 06 F6 | 	mov	local07, #0
29ed8                 | ' 			si = di = 0;
29ed8                 | ' 			hs = 0;
29ed8                 | ' 			while (fs->lfnbuf[si] != 0) {
29ed8                 | LR__4350
29ed8     0C 22 06 F1 | 	add	local03, #12
29edc     11 25 02 FB | 	rdlong	local04, local03
29ee0     0C 22 86 F1 | 	sub	local03, #12
29ee4     14 2D 02 F6 | 	mov	local08, local06
29ee8     01 2C 66 F0 | 	shl	local08, #1
29eec     12 2D 02 F1 | 	add	local08, local04
29ef0     16 25 EA FA | 	rdword	local04, local08 wz
29ef4     90 00 90 AD |  if_e	jmp	#LR__4352
29ef8     0C 22 06 F1 | 	add	local03, #12
29efc     11 2F 02 FB | 	rdlong	local09, local03
29f00     0C 22 86 F1 | 	sub	local03, #12
29f04     14 31 02 F6 | 	mov	local10, local06
29f08     01 30 66 F0 | 	shl	local10, #1
29f0c     17 31 02 F1 | 	add	local10, local09
29f10     18 33 E2 FA | 	rdword	local11, local10
29f14     15 25 02 F6 | 	mov	local04, local07
29f18     0F 24 4E F7 | 	zerox	local04, #15 wz
29f1c     01 28 06 F1 | 	add	local06, #1
29f20     24 00 90 5D |  if_ne	jmp	#LR__4351
29f24     19 35 32 F9 | 	getword	local12, local11, #0
29f28     6C 00 00 FF 
29f2c     00 34 16 F2 | 	cmp	local12, ##55296 wc
29f30     14 00 90 CD |  if_b	jmp	#LR__4351
29f34     19 37 32 F9 | 	getword	local13, local11, #0
29f38     70 00 00 FF 
29f3c     00 36 16 F2 | 	cmp	local13, ##57344 wc
29f40     19 2B 02 C6 |  if_b	mov	local07, local11
29f44                 | ' 					hs = wc; continue;
29f44     90 FF 9F CD |  if_b	jmp	#LR__4350
29f48                 | LR__4351
29f48     15 13 32 F9 | 	getword	arg01, local07, #0
29f4c     10 12 66 F0 | 	shl	arg01, #16
29f50     19 33 32 F9 | 	getword	local11, local11, #0
29f54     19 13 42 F5 | 	or	arg01, local11
29f58     13 15 02 F6 | 	mov	arg02, local05
29f5c     1C 20 06 F1 | 	add	local02, #28
29f60     10 15 02 F1 | 	add	arg02, local02
29f64     FF 16 06 F6 | 	mov	arg03, #255
29f68     13 17 82 F1 | 	sub	arg03, local05
29f6c     1C 20 86 F1 | 	sub	local02, #28
29f70     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
29f74     FD 38 0A F6 | 	mov	local14, result1 wz
29f78     00 26 06 A6 |  if_e	mov	local05, #0
29f7c     1C 27 02 51 |  if_ne	add	local05, local14
29f80     00 2A 06 56 |  if_ne	mov	local07, #0
29f84     50 FF 9F 5D |  if_ne	jmp	#LR__4350
29f88                 | LR__4352
29f88     15 25 02 F6 | 	mov	local04, local07
29f8c     0F 24 4E F7 | 	zerox	local04, #15 wz
29f90     00 26 06 56 |  if_ne	mov	local05, #0
29f94     1C 20 06 F1 | 	add	local02, #28
29f98     10 27 02 F1 | 	add	local05, local02
29f9c     13 01 48 FC | 	wrbyte	#0, local05
29fa0     1C 20 86 F1 | 	sub	local02, #28
29fa4                 | LR__4353
29fa4     00 26 06 F6 | 	mov	local05, #0
29fa8     00 28 06 F6 | 	mov	local06, #0
29fac                 | ' 			fno->fname[di] = 0;
29fac                 | ' 		}
29fac                 | ' 	}
29fac                 | ' 
29fac                 | ' 	si = di = 0;
29fac                 | ' 	while (si < 11) {
29fac                 | LR__4354
29fac     0B 28 16 F2 | 	cmp	local06, #11 wc
29fb0     20 01 90 3D |  if_ae	jmp	#LR__4357
29fb4     1C 1E 06 F1 | 	add	local01, #28
29fb8     0F 2F 02 FB | 	rdlong	local09, local01
29fbc     1C 1E 86 F1 | 	sub	local01, #28
29fc0     14 31 02 F6 | 	mov	local10, local06
29fc4     17 31 02 F1 | 	add	local10, local09
29fc8     18 33 C2 FA | 	rdbyte	local11, local10
29fcc     19 25 32 F9 | 	getword	local04, local11, #0
29fd0     20 24 0E F2 | 	cmp	local04, #32 wz
29fd4     01 28 06 F1 | 	add	local06, #1
29fd8     D0 FF 9F AD |  if_e	jmp	#LR__4354
29fdc     19 25 32 F9 | 	getword	local04, local11, #0
29fe0     05 24 0E F2 | 	cmp	local04, #5 wz
29fe4     E5 32 06 A6 |  if_e	mov	local11, #229
29fe8     09 28 0E F2 | 	cmp	local06, #9 wz
29fec     20 00 90 5D |  if_ne	jmp	#LR__4355
29ff0     0C 26 16 F2 | 	cmp	local05, #12 wc
29ff4     18 00 90 3D |  if_ae	jmp	#LR__4355
29ff8     13 37 02 F6 | 	mov	local13, local05
29ffc     0C 20 06 F1 | 	add	local02, #12
2a000     10 37 02 F1 | 	add	local13, local02
2a004     1B 5D 48 FC | 	wrbyte	#46, local13
2a008     01 26 06 F1 | 	add	local05, #1
2a00c     0C 20 86 F1 | 	sub	local02, #12
2a010                 | LR__4355
2a010     19 13 32 F9 | 	getword	arg01, local11, #0
2a014     07 12 4E F7 | 	zerox	arg01, #7 wz
2a018     00 FA 05 56 |  if_ne	mov	result1, #0
2a01c                 | ' 
2a01c                 | ' 	return 0;
2a01c     00 FA 05 A6 |  if_e	mov	result1, #0
2a020     00 FA 0D F2 | 	cmp	result1, #0 wz
2a024     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
2a028     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
2a02c     50 00 90 AD |  if_e	jmp	#LR__4356
2a030     1C 1E 06 F1 | 	add	local01, #28
2a034     0F 31 02 FB | 	rdlong	local10, local01
2a038     1C 1E 86 F1 | 	sub	local01, #28
2a03c     14 2D 02 F6 | 	mov	local08, local06
2a040     18 2D 02 F1 | 	add	local08, local10
2a044     16 13 CA FA | 	rdbyte	arg01, local08 wz
2a048     00 FA 05 56 |  if_ne	mov	result1, #0
2a04c                 | ' 
2a04c                 | ' 	return 0;
2a04c     00 FA 05 A6 |  if_e	mov	result1, #0
2a050     00 FA 0D F2 | 	cmp	result1, #0 wz
2a054     28 00 90 AD |  if_e	jmp	#LR__4356
2a058     19 33 32 F9 | 	getword	local11, local11, #0
2a05c     08 32 66 F0 | 	shl	local11, #8
2a060     1C 1E 06 F1 | 	add	local01, #28
2a064     0F 39 02 FB | 	rdlong	local14, local01
2a068     1C 1E 86 F1 | 	sub	local01, #28
2a06c     14 2F 02 F6 | 	mov	local09, local06
2a070     1C 2F 02 F1 | 	add	local09, local14
2a074     17 35 C2 FA | 	rdbyte	local12, local09
2a078     1A 33 42 F5 | 	or	local11, local12
2a07c     01 28 06 F1 | 	add	local06, #1
2a080                 | LR__4356
2a080     19 13 02 F6 | 	mov	arg01, local11
2a084     01 00 00 FF 
2a088     52 15 06 F6 | 	mov	arg02, ##850
2a08c     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
2a090     FD 32 02 F6 | 	mov	local11, result1
2a094     19 25 02 F6 | 	mov	local04, local11
2a098     0F 24 4E F7 | 	zerox	local04, #15 wz
2a09c     00 26 06 A6 |  if_e	mov	local05, #0
2a0a0     30 00 90 AD |  if_e	jmp	#LR__4357
2a0a4     19 13 32 F9 | 	getword	arg01, local11, #0
2a0a8     13 15 02 F6 | 	mov	arg02, local05
2a0ac     0C 20 06 F1 | 	add	local02, #12
2a0b0     10 15 02 F1 | 	add	arg02, local02
2a0b4     0C 16 06 F6 | 	mov	arg03, #12
2a0b8     13 17 82 F1 | 	sub	arg03, local05
2a0bc     0C 20 86 F1 | 	sub	local02, #12
2a0c0     EC DF BF FD | 	call	#_fatfs_cc_put_utf
2a0c4     FD 38 0A F6 | 	mov	local14, result1 wz
2a0c8     00 26 06 A6 |  if_e	mov	local05, #0
2a0cc     1C 27 02 51 |  if_ne	add	local05, local14
2a0d0     D8 FE 9F 5D |  if_ne	jmp	#LR__4354
2a0d4                 | LR__4357
2a0d4     13 25 02 F6 | 	mov	local04, local05
2a0d8     0C 20 06 F1 | 	add	local02, #12
2a0dc     10 25 02 F1 | 	add	local04, local02
2a0e0     12 01 48 FC | 	wrbyte	#0, local04
2a0e4     10 20 06 F1 | 	add	local02, #16
2a0e8     10 25 CA FA | 	rdbyte	local04, local02 wz
2a0ec     1C 20 86 F1 | 	sub	local02, #28
2a0f0     F8 00 90 5D |  if_ne	jmp	#LR__4363
2a0f4     00 26 0E F2 | 	cmp	local05, #0 wz
2a0f8     1C 00 90 5D |  if_ne	jmp	#LR__4358
2a0fc     13 37 02 F6 | 	mov	local13, local05
2a100     1C 20 06 F1 | 	add	local02, #28
2a104     10 37 02 F1 | 	add	local13, local02
2a108     1B 7F 48 FC | 	wrbyte	#63, local13
2a10c     01 26 06 F1 | 	add	local05, #1
2a110     1C 20 86 F1 | 	sub	local02, #28
2a114     A4 00 90 FD | 	jmp	#LR__4362
2a118                 | LR__4358
2a118                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2a118     00 26 06 F6 | 	mov	local05, #0
2a11c     00 28 06 F6 | 	mov	local06, #0
2a120     08 3A 06 F6 | 	mov	local15, #8
2a124                 | LR__4359
2a124     14 25 02 F6 | 	mov	local04, local06
2a128     0C 20 06 F1 | 	add	local02, #12
2a12c     10 25 02 F1 | 	add	local04, local02
2a130     12 37 CA FA | 	rdbyte	local13, local04 wz
2a134     0C 20 86 F1 | 	sub	local02, #12
2a138     80 00 90 AD |  if_e	jmp	#LR__4361
2a13c     14 2D 02 F6 | 	mov	local08, local06
2a140     0C 20 06 F1 | 	add	local02, #12
2a144     10 2D 02 F1 | 	add	local08, local02
2a148     16 33 C2 FA | 	rdbyte	local11, local08
2a14c     19 39 32 F9 | 	getword	local14, local11, #0
2a150     2E 38 0E F2 | 	cmp	local14, #46 wz
2a154     0C 20 86 F1 | 	sub	local02, #12
2a158     10 3A 06 A6 |  if_e	mov	local15, #16
2a15c     19 39 32 F9 | 	getword	local14, local11, #0
2a160     41 38 16 F2 | 	cmp	local14, #65 wc
2a164     30 00 90 CD |  if_b	jmp	#LR__4360
2a168     19 2D 32 F9 | 	getword	local08, local11, #0
2a16c     5B 2C 16 F2 | 	cmp	local08, #91 wc
2a170     24 00 90 3D |  if_ae	jmp	#LR__4360
2a174     1C 1E 06 F1 | 	add	local01, #28
2a178     0F 2F 02 FB | 	rdlong	local09, local01
2a17c     1C 1E 86 F1 | 	sub	local01, #28
2a180     0C 2E 06 F1 | 	add	local09, #12
2a184     17 31 C2 FA | 	rdbyte	local10, local09
2a188     1D 39 E2 F8 | 	getbyte	local14, local15, #0
2a18c     1C 31 CA F7 | 	test	local10, local14 wz
2a190     19 33 32 59 |  if_ne	getword	local11, local11, #0
2a194     20 32 06 51 |  if_ne	add	local11, #32
2a198                 | LR__4360
2a198     13 39 02 F6 | 	mov	local14, local05
2a19c     1C 20 06 F1 | 	add	local02, #28
2a1a0     10 39 02 F1 | 	add	local14, local02
2a1a4     19 33 32 F9 | 	getword	local11, local11, #0
2a1a8     1C 33 42 FC | 	wrbyte	local11, local14
2a1ac     01 28 06 F1 | 	add	local06, #1
2a1b0     01 26 06 F1 | 	add	local05, #1
2a1b4     1C 20 86 F1 | 	sub	local02, #28
2a1b8     68 FF 9F FD | 	jmp	#LR__4359
2a1bc                 | LR__4361
2a1bc                 | LR__4362
2a1bc     1C 20 06 F1 | 	add	local02, #28
2a1c0     10 27 02 F1 | 	add	local05, local02
2a1c4     13 01 48 FC | 	wrbyte	#0, local05
2a1c8     1C 1E 06 F1 | 	add	local01, #28
2a1cc     0F 25 02 FB | 	rdlong	local04, local01
2a1d0     1C 1E 86 F1 | 	sub	local01, #28
2a1d4     0C 24 06 F1 | 	add	local04, #12
2a1d8     12 37 CA FA | 	rdbyte	local13, local04 wz
2a1dc     1C 20 86 F1 | 	sub	local02, #28
2a1e0     0C 20 06 A1 |  if_e	add	local02, #12
2a1e4     10 01 48 AC |  if_e	wrbyte	#0, local02
2a1e8     0C 20 86 A1 |  if_e	sub	local02, #12
2a1ec                 | LR__4363
2a1ec     1C 1E 06 F1 | 	add	local01, #28
2a1f0     0F 35 02 FB | 	rdlong	local12, local01
2a1f4     0B 34 06 F1 | 	add	local12, #11
2a1f8     1A 25 C2 FA | 	rdbyte	local04, local12
2a1fc     3F 24 06 F5 | 	and	local04, #63
2a200     08 20 06 F1 | 	add	local02, #8
2a204     10 25 42 FC | 	wrbyte	local04, local02
2a208     08 20 86 F1 | 	sub	local02, #8
2a20c     0F 13 02 FB | 	rdlong	arg01, local01
2a210     1C 12 06 F1 | 	add	arg01, #28
2a214                 | ' {
2a214                 | ' 
2a214                 | ' 	return *((DWORD*)ptr);
2a214     09 FB 01 FB | 	rdlong	result1, arg01
2a218     10 FB 61 FC | 	wrlong	result1, local02
2a21c     0F 13 02 FB | 	rdlong	arg01, local01
2a220     16 12 06 F1 | 	add	arg01, #22
2a224                 | ' {
2a224                 | ' 
2a224                 | ' 	return *((WORD*)ptr);
2a224     09 FB E1 FA | 	rdword	result1, arg01
2a228     06 20 06 F1 | 	add	local02, #6
2a22c     10 FB 51 FC | 	wrword	result1, local02
2a230     0F 13 02 FB | 	rdlong	arg01, local01
2a234     18 12 06 F1 | 	add	arg01, #24
2a238                 | ' {
2a238                 | ' 
2a238                 | ' 	return *((WORD*)ptr);
2a238     09 FB E1 FA | 	rdword	result1, arg01
2a23c     02 20 86 F1 | 	sub	local02, #2
2a240     10 FB 51 FC | 	wrword	result1, local02
2a244                 | LR__4364
2a244     A7 F0 03 F6 | 	mov	ptra, fp
2a248     B2 00 A0 FD | 	call	#popregs_
2a24c                 | _fatfs_cc_get_fileinfo_ret
2a24c     2D 00 64 FD | 	ret
2a250                 | 
2a250                 | _fatfs_cc_create_name
2a250     0D 4A 05 F6 | 	mov	COUNT_, #13
2a254     A8 00 A0 FD | 	call	#pushregs_
2a258     34 F0 07 F1 | 	add	ptra, #52
2a25c     04 4E 05 F1 | 	add	fp, #4
2a260     A7 12 62 FC | 	wrlong	arg01, fp
2a264     04 4E 05 F1 | 	add	fp, #4
2a268     A7 14 62 FC | 	wrlong	arg02, fp
2a26c     0A FB 01 FB | 	rdlong	result1, arg02
2a270     28 4E 05 F1 | 	add	fp, #40
2a274     A7 FA 61 FC | 	wrlong	result1, fp
2a278     2C 4E 85 F1 | 	sub	fp, #44
2a27c     A7 FA 01 FB | 	rdlong	result1, fp
2a280     FD 1E 02 FB | 	rdlong	local01, result1
2a284     0C 1E 06 F1 | 	add	local01, #12
2a288     0F 21 02 FB | 	rdlong	local02, local01
2a28c     14 4E 05 F1 | 	add	fp, #20
2a290     A7 20 62 FC | 	wrlong	local02, fp
2a294     14 4E 05 F1 | 	add	fp, #20
2a298     A7 00 68 FC | 	wrlong	#0, fp
2a29c     2C 4E 85 F1 | 	sub	fp, #44
2a2a0                 | ' 
2a2a0                 | ' 
2a2a0                 | ' 
2a2a0                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2a2a0                 | ' 	for (;;) {
2a2a0                 | LR__4370
2a2a0     30 4E 05 F1 | 	add	fp, #48
2a2a4     A7 12 02 F6 | 	mov	arg01, fp
2a2a8     30 4E 85 F1 | 	sub	fp, #48
2a2ac     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
2a2b0     1C 4E 05 F1 | 	add	fp, #28
2a2b4     A7 FA 61 FC | 	wrlong	result1, fp
2a2b8     1C 4E 85 F1 | 	sub	fp, #28
2a2bc     FF FF 7F FF 
2a2c0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2a2c4     06 FA 05 A6 |  if_e	mov	result1, #6
2a2c8     74 08 90 AD |  if_e	jmp	#LR__4410
2a2cc     1C 4E 05 F1 | 	add	fp, #28
2a2d0     A7 1E 02 FB | 	rdlong	local01, fp
2a2d4     1C 4E 85 F1 | 	sub	fp, #28
2a2d8     80 00 00 FF 
2a2dc     00 1E 16 F2 | 	cmp	local01, ##65536 wc
2a2e0     3C 00 90 CD |  if_b	jmp	#LR__4371
2a2e4     18 4E 05 F1 | 	add	fp, #24
2a2e8     A7 22 02 FB | 	rdlong	local03, fp
2a2ec     14 4E 05 F1 | 	add	fp, #20
2a2f0     A7 1E 02 FB | 	rdlong	local01, fp
2a2f4     0F 25 02 F6 | 	mov	local04, local01
2a2f8     01 24 06 F1 | 	add	local04, #1
2a2fc     A7 24 62 FC | 	wrlong	local04, fp
2a300     01 1E 66 F0 | 	shl	local01, #1
2a304     11 1F 02 F1 | 	add	local01, local03
2a308     10 4E 85 F1 | 	sub	fp, #16
2a30c     A7 26 02 FB | 	rdlong	local05, fp
2a310     1C 4E 85 F1 | 	sub	fp, #28
2a314     13 29 02 F6 | 	mov	local06, local05
2a318     10 28 46 F0 | 	shr	local06, #16
2a31c     0F 29 52 FC | 	wrword	local06, local01
2a320                 | LR__4371
2a320     1C 4E 05 F1 | 	add	fp, #28
2a324     A7 1E 02 FB | 	rdlong	local01, fp
2a328     08 4E 85 F1 | 	sub	fp, #8
2a32c     A7 1E 52 FC | 	wrword	local01, fp
2a330     A7 1E E2 FA | 	rdword	local01, fp
2a334     14 4E 85 F1 | 	sub	fp, #20
2a338     20 1E 16 F2 | 	cmp	local01, #32 wc
2a33c     B0 00 90 CD |  if_b	jmp	#LR__4373
2a340     14 4E 05 F1 | 	add	fp, #20
2a344     A7 1E E2 FA | 	rdword	local01, fp
2a348     14 4E 85 F1 | 	sub	fp, #20
2a34c     2F 1E 0E F2 | 	cmp	local01, #47 wz
2a350     14 4E 05 51 |  if_ne	add	fp, #20
2a354     A7 24 E2 5A |  if_ne	rdword	local04, fp
2a358     14 4E 85 51 |  if_ne	sub	fp, #20
2a35c     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
2a360     8C 00 90 AD |  if_e	jmp	#LR__4373
2a364     14 4E 05 F1 | 	add	fp, #20
2a368     A7 12 E2 FA | 	rdword	arg01, fp
2a36c     14 4E 85 F1 | 	sub	fp, #20
2a370     80 12 16 F2 | 	cmp	arg01, #128 wc
2a374     24 00 90 3D |  if_ae	jmp	#LR__4372
2a378     81 01 00 FF 
2a37c     B4 12 06 F6 | 	mov	arg01, ##@LR__5032
2a380     14 4E 05 F1 | 	add	fp, #20
2a384     A7 14 E2 FA | 	rdword	arg02, fp
2a388     14 4E 85 F1 | 	sub	fp, #20
2a38c     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2a390     00 FA 0D F2 | 	cmp	result1, #0 wz
2a394     06 FA 05 56 |  if_ne	mov	result1, #6
2a398     A4 07 90 5D |  if_ne	jmp	#LR__4410
2a39c                 | LR__4372
2a39c     2C 4E 05 F1 | 	add	fp, #44
2a3a0     A7 28 02 FB | 	rdlong	local06, fp
2a3a4     2C 4E 85 F1 | 	sub	fp, #44
2a3a8     FF 28 16 F2 | 	cmp	local06, #255 wc
2a3ac     06 FA 05 36 |  if_ae	mov	result1, #6
2a3b0     8C 07 90 3D |  if_ae	jmp	#LR__4410
2a3b4     18 4E 05 F1 | 	add	fp, #24
2a3b8     A7 22 02 FB | 	rdlong	local03, fp
2a3bc     14 4E 05 F1 | 	add	fp, #20
2a3c0     A7 20 02 FB | 	rdlong	local02, fp
2a3c4     10 25 02 F6 | 	mov	local04, local02
2a3c8     01 24 06 F1 | 	add	local04, #1
2a3cc     A7 24 62 FC | 	wrlong	local04, fp
2a3d0     10 1F 02 F6 | 	mov	local01, local02
2a3d4     01 1E 66 F0 | 	shl	local01, #1
2a3d8     11 1F 02 F1 | 	add	local01, local03
2a3dc     18 4E 85 F1 | 	sub	fp, #24
2a3e0     A7 28 E2 FA | 	rdword	local06, fp
2a3e4     14 4E 85 F1 | 	sub	fp, #20
2a3e8     0F 29 52 FC | 	wrword	local06, local01
2a3ec     B0 FE 9F FD | 	jmp	#LR__4370
2a3f0                 | LR__4373
2a3f0     14 4E 05 F1 | 	add	fp, #20
2a3f4     A7 2A E2 FA | 	rdword	local07, fp
2a3f8     14 4E 85 F1 | 	sub	fp, #20
2a3fc     20 2A 16 F2 | 	cmp	local07, #32 wc
2a400     10 4E 05 C1 |  if_b	add	fp, #16
2a404     A7 08 48 CC |  if_b	wrbyte	#4, fp
2a408     10 4E 85 C1 |  if_b	sub	fp, #16
2a40c     74 00 90 CD |  if_b	jmp	#LR__4378
2a410     97 24 48 FB | 	callpa	#(@LR__4376-@LR__4374)>>2,fcache_load_ptr_
2a414                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2a414                 | LR__4374
2a414     30 4E 05 F1 | 	add	fp, #48
2a418     A7 24 02 FB | 	rdlong	local04, fp
2a41c     30 4E 85 F1 | 	sub	fp, #48
2a420     12 2B C2 FA | 	rdbyte	local07, local04
2a424     2F 2A 0E F2 | 	cmp	local07, #47 wz
2a428     18 00 90 AD |  if_e	jmp	#LR__4375
2a42c     30 4E 05 F1 | 	add	fp, #48
2a430     A7 24 02 FB | 	rdlong	local04, fp
2a434     30 4E 85 F1 | 	sub	fp, #48
2a438     12 21 C2 FA | 	rdbyte	local02, local04
2a43c     5C 20 0E F2 | 	cmp	local02, #92 wz
2a440     18 00 90 5D |  if_ne	jmp	#LR__4377
2a444                 | LR__4375
2a444     30 4E 05 F1 | 	add	fp, #48
2a448     A7 1E 02 FB | 	rdlong	local01, fp
2a44c     01 1E 06 F1 | 	add	local01, #1
2a450     A7 1E 62 FC | 	wrlong	local01, fp
2a454     30 4E 85 F1 | 	sub	fp, #48
2a458     B8 FF 9F FD | 	jmp	#LR__4374
2a45c                 | LR__4376
2a45c                 | LR__4377
2a45c     10 4E 05 F1 | 	add	fp, #16
2a460     A7 00 48 FC | 	wrbyte	#0, fp
2a464     20 4E 05 F1 | 	add	fp, #32
2a468     A7 28 02 FB | 	rdlong	local06, fp
2a46c     30 4E 85 F1 | 	sub	fp, #48
2a470     14 2B C2 FA | 	rdbyte	local07, local06
2a474     20 2A 16 F2 | 	cmp	local07, #32 wc
2a478     10 4E 05 C1 |  if_b	add	fp, #16
2a47c     A7 08 48 CC |  if_b	wrbyte	#4, fp
2a480     10 4E 85 C1 |  if_b	sub	fp, #16
2a484                 | LR__4378
2a484     08 4E 05 F1 | 	add	fp, #8
2a488     A7 2A 02 FB | 	rdlong	local07, fp
2a48c     28 4E 05 F1 | 	add	fp, #40
2a490     A7 1E 02 FB | 	rdlong	local01, fp
2a494     30 4E 85 F1 | 	sub	fp, #48
2a498     15 1F 62 FC | 	wrlong	local01, local07
2a49c     97 38 48 FB | 	callpa	#(@LR__4380-@LR__4379)>>2,fcache_load_ptr_
2a4a0                 | ' 	}
2a4a0                 | ' 	*path = p;
2a4a0                 | ' #line 2862 "ff.c"
2a4a0                 | ' 	while (di) {
2a4a0                 | LR__4379
2a4a0     2C 4E 05 F1 | 	add	fp, #44
2a4a4     A7 2A 0A FB | 	rdlong	local07, fp wz
2a4a8     2C 4E 85 F1 | 	sub	fp, #44
2a4ac     60 00 90 AD |  if_e	jmp	#LR__4381
2a4b0     18 4E 05 F1 | 	add	fp, #24
2a4b4     A7 28 02 FB | 	rdlong	local06, fp
2a4b8     14 4E 05 F1 | 	add	fp, #20
2a4bc     A7 24 02 FB | 	rdlong	local04, fp
2a4c0     01 24 86 F1 | 	sub	local04, #1
2a4c4     01 24 66 F0 | 	shl	local04, #1
2a4c8     14 25 02 F1 | 	add	local04, local06
2a4cc     12 29 E2 FA | 	rdword	local06, local04
2a4d0     18 4E 85 F1 | 	sub	fp, #24
2a4d4     A7 28 52 FC | 	wrword	local06, fp
2a4d8     A7 2A E2 FA | 	rdword	local07, fp
2a4dc     14 4E 85 F1 | 	sub	fp, #20
2a4e0     20 2A 0E F2 | 	cmp	local07, #32 wz
2a4e4     14 4E 05 51 |  if_ne	add	fp, #20
2a4e8     A7 1E E2 5A |  if_ne	rdword	local01, fp
2a4ec     14 4E 85 51 |  if_ne	sub	fp, #20
2a4f0     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
2a4f4     18 00 90 5D |  if_ne	jmp	#LR__4381
2a4f8     2C 4E 05 F1 | 	add	fp, #44
2a4fc     A7 1E 02 FB | 	rdlong	local01, fp
2a500     01 1E 86 F1 | 	sub	local01, #1
2a504     A7 1E 62 FC | 	wrlong	local01, fp
2a508     2C 4E 85 F1 | 	sub	fp, #44
2a50c     90 FF 9F FD | 	jmp	#LR__4379
2a510                 | LR__4380
2a510                 | LR__4381
2a510     18 4E 05 F1 | 	add	fp, #24
2a514     A7 2C 02 FB | 	rdlong	local08, fp
2a518     14 4E 05 F1 | 	add	fp, #20
2a51c     A7 24 02 FB | 	rdlong	local04, fp
2a520     01 24 66 F0 | 	shl	local04, #1
2a524     16 25 02 F1 | 	add	local04, local08
2a528     12 01 58 FC | 	wrword	#0, local04
2a52c     A7 2A 0A FB | 	rdlong	local07, fp wz
2a530     2C 4E 85 F1 | 	sub	fp, #44
2a534     06 FA 05 A6 |  if_e	mov	result1, #6
2a538     04 06 90 AD |  if_e	jmp	#LR__4410
2a53c                 | ' 
2a53c                 | ' 
2a53c                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2a53c     28 4E 05 F1 | 	add	fp, #40
2a540     A7 00 68 FC | 	wrlong	#0, fp
2a544     28 4E 85 F1 | 	sub	fp, #40
2a548     97 22 48 FB | 	callpa	#(@LR__4383-@LR__4382)>>2,fcache_load_ptr_
2a54c                 | LR__4382
2a54c     18 4E 05 F1 | 	add	fp, #24
2a550     A7 2E 02 FB | 	rdlong	local09, fp
2a554     10 4E 05 F1 | 	add	fp, #16
2a558     A7 30 02 FB | 	rdlong	local10, fp
2a55c     28 4E 85 F1 | 	sub	fp, #40
2a560     01 30 66 F0 | 	shl	local10, #1
2a564     17 31 02 F1 | 	add	local10, local09
2a568     18 33 E2 FA | 	rdword	local11, local10
2a56c     20 32 0E F2 | 	cmp	local11, #32 wz
2a570     1C 00 90 5D |  if_ne	jmp	#LR__4384
2a574     28 4E 05 F1 | 	add	fp, #40
2a578     A7 34 02 FB | 	rdlong	local12, fp
2a57c     1A 27 02 F6 | 	mov	local05, local12
2a580     01 26 06 F1 | 	add	local05, #1
2a584     A7 26 62 FC | 	wrlong	local05, fp
2a588     28 4E 85 F1 | 	sub	fp, #40
2a58c     BC FF 9F FD | 	jmp	#LR__4382
2a590                 | LR__4383
2a590                 | LR__4384
2a590     28 4E 05 F1 | 	add	fp, #40
2a594     A7 2A 02 FB | 	rdlong	local07, fp
2a598     28 4E 85 F1 | 	sub	fp, #40
2a59c     01 2A 16 F2 | 	cmp	local07, #1 wc
2a5a0     28 00 90 3D |  if_ae	jmp	#LR__4385
2a5a4     18 4E 05 F1 | 	add	fp, #24
2a5a8     A7 22 02 FB | 	rdlong	local03, fp
2a5ac     10 4E 05 F1 | 	add	fp, #16
2a5b0     A7 2E 02 FB | 	rdlong	local09, fp
2a5b4     28 4E 85 F1 | 	sub	fp, #40
2a5b8     01 2E 66 F0 | 	shl	local09, #1
2a5bc     11 2F 02 F1 | 	add	local09, local03
2a5c0     17 1F E2 FA | 	rdword	local01, local09
2a5c4     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a5c8     14 00 90 5D |  if_ne	jmp	#LR__4386
2a5cc                 | LR__4385
2a5cc     10 4E 05 F1 | 	add	fp, #16
2a5d0     A7 2A C2 FA | 	rdbyte	local07, fp
2a5d4     03 2A 46 F5 | 	or	local07, #3
2a5d8     A7 2A 42 FC | 	wrbyte	local07, fp
2a5dc     10 4E 85 F1 | 	sub	fp, #16
2a5e0                 | LR__4386
2a5e0     97 2C 48 FB | 	callpa	#(@LR__4388-@LR__4387)>>2,fcache_load_ptr_
2a5e4                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2a5e4                 | LR__4387
2a5e4     2C 4E 05 F1 | 	add	fp, #44
2a5e8     A7 2A 02 FB | 	rdlong	local07, fp
2a5ec     2C 4E 85 F1 | 	sub	fp, #44
2a5f0     01 2A 16 F2 | 	cmp	local07, #1 wc
2a5f4     44 00 90 CD |  if_b	jmp	#LR__4389
2a5f8     18 4E 05 F1 | 	add	fp, #24
2a5fc     A7 28 02 FB | 	rdlong	local06, fp
2a600     14 4E 05 F1 | 	add	fp, #20
2a604     A7 22 02 FB | 	rdlong	local03, fp
2a608     2C 4E 85 F1 | 	sub	fp, #44
2a60c     01 22 86 F1 | 	sub	local03, #1
2a610     01 22 66 F0 | 	shl	local03, #1
2a614     14 23 02 F1 | 	add	local03, local06
2a618     11 1F E2 FA | 	rdword	local01, local03
2a61c     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a620     18 00 90 AD |  if_e	jmp	#LR__4389
2a624     2C 4E 05 F1 | 	add	fp, #44
2a628     A7 1E 02 FB | 	rdlong	local01, fp
2a62c     01 1E 86 F1 | 	sub	local01, #1
2a630     A7 1E 62 FC | 	wrlong	local01, fp
2a634     2C 4E 85 F1 | 	sub	fp, #44
2a638     A8 FF 9F FD | 	jmp	#LR__4387
2a63c                 | LR__4388
2a63c                 | LR__4389
2a63c     04 4E 05 F1 | 	add	fp, #4
2a640     A7 12 02 FB | 	rdlong	arg01, fp
2a644     04 4E 85 F1 | 	sub	fp, #4
2a648     20 12 06 F1 | 	add	arg01, #32
2a64c     20 14 06 F6 | 	mov	arg02, #32
2a650     0B 16 06 F6 | 	mov	arg03, #11
2a654     09 37 02 F6 | 	mov	local13, arg01
2a658     98 00 A0 FD | 	call	#\builtin_bytefill_
2a65c     1B FB 01 F6 | 	mov	result1, local13
2a660     0C 4E 05 F1 | 	add	fp, #12
2a664     A7 00 48 FC | 	wrbyte	#0, fp
2a668     A7 2A C2 FA | 	rdbyte	local07, fp
2a66c     14 4E 05 F1 | 	add	fp, #20
2a670     A7 2A 62 FC | 	wrlong	local07, fp
2a674     04 4E 05 F1 | 	add	fp, #4
2a678     A7 10 68 FC | 	wrlong	#8, fp
2a67c     24 4E 85 F1 | 	sub	fp, #36
2a680                 | ' 
2a680                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2a680                 | ' 	i = b = 0; ni = 8;
2a680                 | ' 	for (;;) {
2a680                 | LR__4390
2a680     18 4E 05 F1 | 	add	fp, #24
2a684     A7 22 02 FB | 	rdlong	local03, fp
2a688     10 4E 05 F1 | 	add	fp, #16
2a68c     A7 2E 02 FB | 	rdlong	local09, fp
2a690     17 25 02 F6 | 	mov	local04, local09
2a694     01 24 06 F1 | 	add	local04, #1
2a698     A7 24 62 FC | 	wrlong	local04, fp
2a69c     01 2E 66 F0 | 	shl	local09, #1
2a6a0     11 2F 02 F1 | 	add	local09, local03
2a6a4     17 29 E2 FA | 	rdword	local06, local09
2a6a8     14 4E 85 F1 | 	sub	fp, #20
2a6ac     A7 28 52 FC | 	wrword	local06, fp
2a6b0     A7 2A EA FA | 	rdword	local07, fp wz
2a6b4     14 4E 85 F1 | 	sub	fp, #20
2a6b8     74 03 90 AD |  if_e	jmp	#LR__4406
2a6bc     14 4E 05 F1 | 	add	fp, #20
2a6c0     A7 2A E2 FA | 	rdword	local07, fp
2a6c4     14 4E 85 F1 | 	sub	fp, #20
2a6c8     20 2A 0E F2 | 	cmp	local07, #32 wz
2a6cc     30 00 90 AD |  if_e	jmp	#LR__4391
2a6d0     14 4E 05 F1 | 	add	fp, #20
2a6d4     A7 1E E2 FA | 	rdword	local01, fp
2a6d8     14 4E 85 F1 | 	sub	fp, #20
2a6dc     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a6e0     34 00 90 5D |  if_ne	jmp	#LR__4392
2a6e4     28 4E 05 F1 | 	add	fp, #40
2a6e8     A7 24 02 FB | 	rdlong	local04, fp
2a6ec     04 4E 05 F1 | 	add	fp, #4
2a6f0     A7 30 02 FB | 	rdlong	local10, fp
2a6f4     2C 4E 85 F1 | 	sub	fp, #44
2a6f8     18 25 0A F2 | 	cmp	local04, local10 wz
2a6fc     18 00 90 AD |  if_e	jmp	#LR__4392
2a700                 | LR__4391
2a700     10 4E 05 F1 | 	add	fp, #16
2a704     A7 2A C2 FA | 	rdbyte	local07, fp
2a708     03 2A 46 F5 | 	or	local07, #3
2a70c     A7 2A 42 FC | 	wrbyte	local07, fp
2a710     10 4E 85 F1 | 	sub	fp, #16
2a714                 | ' 			cf |=  0x01  |  0x02 ;
2a714                 | ' 			continue;
2a714     68 FF 9F FD | 	jmp	#LR__4390
2a718                 | LR__4392
2a718     20 4E 05 F1 | 	add	fp, #32
2a71c     A7 2A 02 FB | 	rdlong	local07, fp
2a720     04 4E 05 F1 | 	add	fp, #4
2a724     A7 1E 02 FB | 	rdlong	local01, fp
2a728     24 4E 85 F1 | 	sub	fp, #36
2a72c     0F 2B 12 F2 | 	cmp	local07, local01 wc
2a730     1C 00 90 3D |  if_ae	jmp	#LR__4393
2a734     28 4E 05 F1 | 	add	fp, #40
2a738     A7 2C 02 FB | 	rdlong	local08, fp
2a73c     04 4E 05 F1 | 	add	fp, #4
2a740     A7 30 02 FB | 	rdlong	local10, fp
2a744     2C 4E 85 F1 | 	sub	fp, #44
2a748     18 2D 0A F2 | 	cmp	local08, local10 wz
2a74c     B0 00 90 5D |  if_ne	jmp	#LR__4395
2a750                 | LR__4393
2a750     24 4E 05 F1 | 	add	fp, #36
2a754     A7 2A 02 FB | 	rdlong	local07, fp
2a758     24 4E 85 F1 | 	sub	fp, #36
2a75c     0B 2A 0E F2 | 	cmp	local07, #11 wz
2a760     18 00 90 5D |  if_ne	jmp	#LR__4394
2a764     10 4E 05 F1 | 	add	fp, #16
2a768     A7 2A C2 FA | 	rdbyte	local07, fp
2a76c     03 2A 46 F5 | 	or	local07, #3
2a770     A7 2A 42 FC | 	wrbyte	local07, fp
2a774     10 4E 85 F1 | 	sub	fp, #16
2a778                 | ' 				cf |=  0x01  |  0x02 ;
2a778                 | ' 				break;
2a778     B4 02 90 FD | 	jmp	#LR__4406
2a77c                 | LR__4394
2a77c     28 4E 05 F1 | 	add	fp, #40
2a780     A7 2A 02 FB | 	rdlong	local07, fp
2a784     04 4E 05 F1 | 	add	fp, #4
2a788     A7 1E 02 FB | 	rdlong	local01, fp
2a78c     2C 4E 85 F1 | 	sub	fp, #44
2a790     0F 2B 0A F2 | 	cmp	local07, local01 wz
2a794     10 4E 05 51 |  if_ne	add	fp, #16
2a798     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2a79c     03 2A 46 55 |  if_ne	or	local07, #3
2a7a0     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2a7a4     10 4E 85 51 |  if_ne	sub	fp, #16
2a7a8     28 4E 05 F1 | 	add	fp, #40
2a7ac     A7 2A 02 FB | 	rdlong	local07, fp
2a7b0     04 4E 05 F1 | 	add	fp, #4
2a7b4     A7 20 02 FB | 	rdlong	local02, fp
2a7b8     2C 4E 85 F1 | 	sub	fp, #44
2a7bc     10 2B 1A F2 | 	cmp	local07, local02 wcz
2a7c0     6C 02 90 1D |  if_a	jmp	#LR__4406
2a7c4     2C 4E 05 F1 | 	add	fp, #44
2a7c8     A7 2A 02 FB | 	rdlong	local07, fp
2a7cc     04 4E 85 F1 | 	sub	fp, #4
2a7d0     A7 2A 62 FC | 	wrlong	local07, fp
2a7d4     08 4E 85 F1 | 	sub	fp, #8
2a7d8     A7 10 68 FC | 	wrlong	#8, fp
2a7dc     04 4E 05 F1 | 	add	fp, #4
2a7e0     A7 16 68 FC | 	wrlong	#11, fp
2a7e4     18 4E 85 F1 | 	sub	fp, #24
2a7e8     A7 32 C2 FA | 	rdbyte	local11, fp
2a7ec     19 2B E2 F8 | 	getbyte	local07, local11, #0
2a7f0     02 2A 66 F0 | 	shl	local07, #2
2a7f4     A7 2A 42 FC | 	wrbyte	local07, fp
2a7f8     0C 4E 85 F1 | 	sub	fp, #12
2a7fc                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2a7fc                 | ' 			continue;
2a7fc     80 FE 9F FD | 	jmp	#LR__4390
2a800                 | LR__4395
2a800     14 4E 05 F1 | 	add	fp, #20
2a804     A7 2A E2 FA | 	rdword	local07, fp
2a808     14 4E 85 F1 | 	sub	fp, #20
2a80c     80 2A 16 F2 | 	cmp	local07, #128 wc
2a810     6C 00 90 CD |  if_b	jmp	#LR__4397
2a814     10 4E 05 F1 | 	add	fp, #16
2a818     A7 2A C2 FA | 	rdbyte	local07, fp
2a81c     02 2A 46 F5 | 	or	local07, #2
2a820     A7 2A 42 FC | 	wrbyte	local07, fp
2a824     04 4E 05 F1 | 	add	fp, #4
2a828     A7 12 E2 FA | 	rdword	arg01, fp
2a82c     14 4E 85 F1 | 	sub	fp, #20
2a830     01 00 00 FF 
2a834     52 15 06 F6 | 	mov	arg02, ##850
2a838     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2a83c     14 4E 05 F1 | 	add	fp, #20
2a840     A7 FA 51 FC | 	wrword	result1, fp
2a844     A7 2A E2 FA | 	rdword	local07, fp
2a848     14 4E 85 F1 | 	sub	fp, #20
2a84c     80 2A CE F7 | 	test	local07, #128 wz
2a850     2C 00 90 AD |  if_e	jmp	#LR__4396
2a854     14 4E 05 F1 | 	add	fp, #20
2a858     A7 20 E2 FA | 	rdword	local02, fp
2a85c     7F 20 06 F5 | 	and	local02, #127
2a860     01 00 00 FF 
2a864     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
2a868     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2a86c     10 2B C2 FA | 	rdbyte	local07, local02
2a870     A7 2A 52 FC | 	wrword	local07, fp
2a874     14 4E 85 F1 | 	sub	fp, #20
2a878     01 00 00 FF 
2a87c     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
2a880                 | LR__4396
2a880                 | LR__4397
2a880     14 4E 05 F1 | 	add	fp, #20
2a884     A7 2A E2 FA | 	rdword	local07, fp
2a888     14 4E 85 F1 | 	sub	fp, #20
2a88c     00 2B 16 F2 | 	cmp	local07, #256 wc
2a890     88 00 90 CD |  if_b	jmp	#LR__4399
2a894     24 4E 05 F1 | 	add	fp, #36
2a898     A7 2A 02 FB | 	rdlong	local07, fp
2a89c     01 2A 86 F1 | 	sub	local07, #1
2a8a0     04 4E 85 F1 | 	sub	fp, #4
2a8a4     A7 20 02 FB | 	rdlong	local02, fp
2a8a8     20 4E 85 F1 | 	sub	fp, #32
2a8ac     15 21 12 F2 | 	cmp	local02, local07 wc
2a8b0     2C 00 90 CD |  if_b	jmp	#LR__4398
2a8b4     10 4E 05 F1 | 	add	fp, #16
2a8b8     A7 32 C2 FA | 	rdbyte	local11, fp
2a8bc     19 2B E2 F8 | 	getbyte	local07, local11, #0
2a8c0     03 2A 46 F5 | 	or	local07, #3
2a8c4     A7 2A 42 FC | 	wrbyte	local07, fp
2a8c8     14 4E 05 F1 | 	add	fp, #20
2a8cc     A7 2A 02 FB | 	rdlong	local07, fp
2a8d0     04 4E 85 F1 | 	sub	fp, #4
2a8d4     A7 2A 62 FC | 	wrlong	local07, fp
2a8d8     20 4E 85 F1 | 	sub	fp, #32
2a8dc                 | ' 				cf |=  0x01  |  0x02 ;
2a8dc                 | ' 				i = ni; continue;
2a8dc     A0 FD 9F FD | 	jmp	#LR__4390
2a8e0                 | LR__4398
2a8e0     04 4E 05 F1 | 	add	fp, #4
2a8e4     A7 2E 02 FB | 	rdlong	local09, fp
2a8e8     1C 4E 05 F1 | 	add	fp, #28
2a8ec     A7 30 02 FB | 	rdlong	local10, fp
2a8f0     18 25 02 F6 | 	mov	local04, local10
2a8f4     01 24 06 F1 | 	add	local04, #1
2a8f8     A7 24 62 FC | 	wrlong	local04, fp
2a8fc     20 2E 06 F1 | 	add	local09, #32
2a900     17 31 02 F1 | 	add	local10, local09
2a904     0C 4E 85 F1 | 	sub	fp, #12
2a908     A7 22 E2 FA | 	rdword	local03, fp
2a90c     14 4E 85 F1 | 	sub	fp, #20
2a910     08 22 46 F0 | 	shr	local03, #8
2a914     18 23 42 FC | 	wrbyte	local03, local10
2a918     D4 00 90 FD | 	jmp	#LR__4405
2a91c                 | LR__4399
2a91c     14 4E 05 F1 | 	add	fp, #20
2a920     A7 2A EA FA | 	rdword	local07, fp wz
2a924     14 4E 85 F1 | 	sub	fp, #20
2a928     20 00 90 AD |  if_e	jmp	#LR__4400
2a92c     81 01 00 FF 
2a930     BD 12 06 F6 | 	mov	arg01, ##@LR__5033
2a934     14 4E 05 F1 | 	add	fp, #20
2a938     A7 14 E2 FA | 	rdword	arg02, fp
2a93c     14 4E 85 F1 | 	sub	fp, #20
2a940     48 CB BF FD | 	call	#_fatfs_cc_strchr
2a944     00 FA 0D F2 | 	cmp	result1, #0 wz
2a948     20 00 90 AD |  if_e	jmp	#LR__4401
2a94c                 | LR__4400
2a94c     14 4E 05 F1 | 	add	fp, #20
2a950     A7 BE 58 FC | 	wrword	#95, fp
2a954     04 4E 85 F1 | 	sub	fp, #4
2a958     A7 2A C2 FA | 	rdbyte	local07, fp
2a95c     03 2A 46 F5 | 	or	local07, #3
2a960     A7 2A 42 FC | 	wrbyte	local07, fp
2a964     10 4E 85 F1 | 	sub	fp, #16
2a968     84 00 90 FD | 	jmp	#LR__4404
2a96c                 | LR__4401
2a96c     14 4E 05 F1 | 	add	fp, #20
2a970     A7 2A E2 FA | 	rdword	local07, fp
2a974     14 4E 85 F1 | 	sub	fp, #20
2a978     41 2A 16 F2 | 	cmp	local07, #65 wc
2a97c     24 00 90 CD |  if_b	jmp	#LR__4402
2a980     14 4E 05 F1 | 	add	fp, #20
2a984     A7 1E E2 FA | 	rdword	local01, fp
2a988     14 4E 85 F1 | 	sub	fp, #20
2a98c     5B 1E 16 F2 | 	cmp	local01, #91 wc
2a990     0C 4E 05 C1 |  if_b	add	fp, #12
2a994     A7 2A C2 CA |  if_b	rdbyte	local07, fp
2a998     02 2A 46 C5 |  if_b	or	local07, #2
2a99c     A7 2A 42 CC |  if_b	wrbyte	local07, fp
2a9a0     0C 4E 85 C1 |  if_b	sub	fp, #12
2a9a4                 | LR__4402
2a9a4     14 4E 05 F1 | 	add	fp, #20
2a9a8     A7 2A E2 FA | 	rdword	local07, fp
2a9ac     14 4E 85 F1 | 	sub	fp, #20
2a9b0     61 2A 16 F2 | 	cmp	local07, #97 wc
2a9b4     38 00 90 CD |  if_b	jmp	#LR__4403
2a9b8     14 4E 05 F1 | 	add	fp, #20
2a9bc     A7 1E E2 FA | 	rdword	local01, fp
2a9c0     14 4E 85 F1 | 	sub	fp, #20
2a9c4     7B 1E 16 F2 | 	cmp	local01, #123 wc
2a9c8     24 00 90 3D |  if_ae	jmp	#LR__4403
2a9cc     0C 4E 05 F1 | 	add	fp, #12
2a9d0     A7 2A C2 FA | 	rdbyte	local07, fp
2a9d4     01 2A 46 F5 | 	or	local07, #1
2a9d8     A7 2A 42 FC | 	wrbyte	local07, fp
2a9dc     08 4E 05 F1 | 	add	fp, #8
2a9e0     A7 2A E2 FA | 	rdword	local07, fp
2a9e4     20 2A 86 F1 | 	sub	local07, #32
2a9e8     A7 2A 52 FC | 	wrword	local07, fp
2a9ec     14 4E 85 F1 | 	sub	fp, #20
2a9f0                 | LR__4403
2a9f0                 | LR__4404
2a9f0                 | LR__4405
2a9f0     04 4E 05 F1 | 	add	fp, #4
2a9f4     A7 32 02 FB | 	rdlong	local11, fp
2a9f8     19 2F 02 F6 | 	mov	local09, local11
2a9fc     1C 4E 05 F1 | 	add	fp, #28
2aa00     A7 20 02 FB | 	rdlong	local02, fp
2aa04     10 25 02 F6 | 	mov	local04, local02
2aa08     01 24 06 F1 | 	add	local04, #1
2aa0c     A7 24 62 FC | 	wrlong	local04, fp
2aa10     10 31 02 F6 | 	mov	local10, local02
2aa14     20 2E 06 F1 | 	add	local09, #32
2aa18     17 31 02 F1 | 	add	local10, local09
2aa1c     0C 4E 85 F1 | 	sub	fp, #12
2aa20     A7 22 E2 FA | 	rdword	local03, fp
2aa24     14 4E 85 F1 | 	sub	fp, #20
2aa28     18 23 42 FC | 	wrbyte	local03, local10
2aa2c     50 FC 9F FD | 	jmp	#LR__4390
2aa30                 | LR__4406
2aa30     04 4E 05 F1 | 	add	fp, #4
2aa34     A7 32 02 FB | 	rdlong	local11, fp
2aa38     04 4E 85 F1 | 	sub	fp, #4
2aa3c     20 32 06 F1 | 	add	local11, #32
2aa40     19 2B C2 FA | 	rdbyte	local07, local11
2aa44     E5 2A 0E F2 | 	cmp	local07, #229 wz
2aa48     04 4E 05 A1 |  if_e	add	fp, #4
2aa4c     A7 2A 02 AB |  if_e	rdlong	local07, fp
2aa50     04 4E 85 A1 |  if_e	sub	fp, #4
2aa54     20 2A 06 A1 |  if_e	add	local07, #32
2aa58     15 0B 48 AC |  if_e	wrbyte	#5, local07
2aa5c     24 4E 05 F1 | 	add	fp, #36
2aa60     A7 2A 02 FB | 	rdlong	local07, fp
2aa64     24 4E 85 F1 | 	sub	fp, #36
2aa68     08 2A 0E F2 | 	cmp	local07, #8 wz
2aa6c     0C 4E 05 A1 |  if_e	add	fp, #12
2aa70     A7 2A C2 AA |  if_e	rdbyte	local07, fp
2aa74     02 2A 66 A0 |  if_e	shl	local07, #2
2aa78     A7 2A 42 AC |  if_e	wrbyte	local07, fp
2aa7c     0C 4E 85 A1 |  if_e	sub	fp, #12
2aa80     0C 4E 05 F1 | 	add	fp, #12
2aa84     A7 2A C2 FA | 	rdbyte	local07, fp
2aa88     0C 4E 85 F1 | 	sub	fp, #12
2aa8c     0C 2A 06 F5 | 	and	local07, #12
2aa90     0C 2A 0E F2 | 	cmp	local07, #12 wz
2aa94     18 00 90 AD |  if_e	jmp	#LR__4407
2aa98     0C 4E 05 F1 | 	add	fp, #12
2aa9c     A7 1E C2 FA | 	rdbyte	local01, fp
2aaa0     0C 4E 85 F1 | 	sub	fp, #12
2aaa4     03 1E 06 F5 | 	and	local01, #3
2aaa8     03 1E 0E F2 | 	cmp	local01, #3 wz
2aaac     14 00 90 5D |  if_ne	jmp	#LR__4408
2aab0                 | LR__4407
2aab0     10 4E 05 F1 | 	add	fp, #16
2aab4     A7 2A C2 FA | 	rdbyte	local07, fp
2aab8     02 2A 46 F5 | 	or	local07, #2
2aabc     A7 2A 42 FC | 	wrbyte	local07, fp
2aac0     10 4E 85 F1 | 	sub	fp, #16
2aac4                 | LR__4408
2aac4     10 4E 05 F1 | 	add	fp, #16
2aac8     A7 2A C2 FA | 	rdbyte	local07, fp
2aacc     10 4E 85 F1 | 	sub	fp, #16
2aad0     02 2A CE F7 | 	test	local07, #2 wz
2aad4     48 00 90 5D |  if_ne	jmp	#LR__4409
2aad8     0C 4E 05 F1 | 	add	fp, #12
2aadc     A7 2A C2 FA | 	rdbyte	local07, fp
2aae0     0C 4E 85 F1 | 	sub	fp, #12
2aae4     01 2A CE F7 | 	test	local07, #1 wz
2aae8     10 4E 05 51 |  if_ne	add	fp, #16
2aaec     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2aaf0     10 2A 46 55 |  if_ne	or	local07, #16
2aaf4     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2aaf8     10 4E 85 51 |  if_ne	sub	fp, #16
2aafc     0C 4E 05 F1 | 	add	fp, #12
2ab00     A7 2A C2 FA | 	rdbyte	local07, fp
2ab04     0C 4E 85 F1 | 	sub	fp, #12
2ab08     04 2A CE F7 | 	test	local07, #4 wz
2ab0c     10 4E 05 51 |  if_ne	add	fp, #16
2ab10     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2ab14     08 2A 46 55 |  if_ne	or	local07, #8
2ab18     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2ab1c     10 4E 85 51 |  if_ne	sub	fp, #16
2ab20                 | LR__4409
2ab20     04 4E 05 F1 | 	add	fp, #4
2ab24     A7 2A 02 FB | 	rdlong	local07, fp
2ab28     0C 4E 05 F1 | 	add	fp, #12
2ab2c     A7 1E C2 FA | 	rdbyte	local01, fp
2ab30     10 4E 85 F1 | 	sub	fp, #16
2ab34     2B 2A 06 F1 | 	add	local07, #43
2ab38     15 1F 42 FC | 	wrbyte	local01, local07
2ab3c                 | ' 	}
2ab3c                 | ' 
2ab3c                 | ' 	dp->fn[ 11 ] = cf;
2ab3c                 | ' 
2ab3c                 | ' 	return FR_OK;
2ab3c     00 FA 05 F6 | 	mov	result1, #0
2ab40                 | LR__4410
2ab40     A7 F0 03 F6 | 	mov	ptra, fp
2ab44     B2 00 A0 FD | 	call	#popregs_
2ab48                 | _fatfs_cc_create_name_ret
2ab48     2D 00 64 FD | 	ret
2ab4c                 | 
2ab4c                 | _fatfs_cc_follow_path
2ab4c     02 4A 05 F6 | 	mov	COUNT_, #2
2ab50     A8 00 A0 FD | 	call	#pushregs_
2ab54     18 F0 07 F1 | 	add	ptra, #24
2ab58     04 4E 05 F1 | 	add	fp, #4
2ab5c     A7 12 62 FC | 	wrlong	arg01, fp
2ab60     04 4E 05 F1 | 	add	fp, #4
2ab64     A7 14 62 FC | 	wrlong	arg02, fp
2ab68     04 4E 85 F1 | 	sub	fp, #4
2ab6c     A7 FA 01 FB | 	rdlong	result1, fp
2ab70     FD 1E 02 FB | 	rdlong	local01, result1
2ab74     10 4E 05 F1 | 	add	fp, #16
2ab78     A7 1E 62 FC | 	wrlong	local01, fp
2ab7c     14 4E 85 F1 | 	sub	fp, #20
2ab80     97 24 48 FB | 	callpa	#(@LR__4422-@LR__4420)>>2,fcache_load_ptr_
2ab84                 | ' )
2ab84                 | ' {
2ab84                 | ' 	FRESULT res;
2ab84                 | ' 	BYTE ns;
2ab84                 | ' 	FATFS *fs = dp->obj.fs;
2ab84                 | ' #line 3034 "ff.c"
2ab84                 | ' 	{
2ab84                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2ab84                 | LR__4420
2ab84     08 4E 05 F1 | 	add	fp, #8
2ab88     A7 1E 02 FB | 	rdlong	local01, fp
2ab8c     08 4E 85 F1 | 	sub	fp, #8
2ab90     0F 1F C2 FA | 	rdbyte	local01, local01
2ab94     2F 1E 0E F2 | 	cmp	local01, #47 wz
2ab98     18 00 90 AD |  if_e	jmp	#LR__4421
2ab9c     08 4E 05 F1 | 	add	fp, #8
2aba0     A7 1E 02 FB | 	rdlong	local01, fp
2aba4     08 4E 85 F1 | 	sub	fp, #8
2aba8     0F 1F C2 FA | 	rdbyte	local01, local01
2abac     5C 1E 0E F2 | 	cmp	local01, #92 wz
2abb0     18 00 90 5D |  if_ne	jmp	#LR__4423
2abb4                 | LR__4421
2abb4     08 4E 05 F1 | 	add	fp, #8
2abb8     A7 1E 02 FB | 	rdlong	local01, fp
2abbc     01 1E 06 F1 | 	add	local01, #1
2abc0     A7 1E 62 FC | 	wrlong	local01, fp
2abc4     08 4E 85 F1 | 	sub	fp, #8
2abc8     B8 FF 9F FD | 	jmp	#LR__4420
2abcc                 | LR__4422
2abcc                 | LR__4423
2abcc     04 4E 05 F1 | 	add	fp, #4
2abd0     A7 1E 02 FB | 	rdlong	local01, fp
2abd4     08 1E 06 F1 | 	add	local01, #8
2abd8     0F 01 68 FC | 	wrlong	#0, local01
2abdc     04 4E 05 F1 | 	add	fp, #4
2abe0     A7 1E 02 FB | 	rdlong	local01, fp
2abe4     08 4E 85 F1 | 	sub	fp, #8
2abe8     0F 1F C2 FA | 	rdbyte	local01, local01
2abec     20 1E 16 F2 | 	cmp	local01, #32 wc
2abf0     30 00 90 3D |  if_ae	jmp	#LR__4424
2abf4     04 4E 05 F1 | 	add	fp, #4
2abf8     A7 1E 02 FB | 	rdlong	local01, fp
2abfc     2B 1E 06 F1 | 	add	local01, #43
2ac00     0F 01 49 FC | 	wrbyte	#128, local01
2ac04     A7 12 02 FB | 	rdlong	arg01, fp
2ac08     04 4E 85 F1 | 	sub	fp, #4
2ac0c     00 14 06 F6 | 	mov	arg02, #0
2ac10     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
2ac14     0C 4E 05 F1 | 	add	fp, #12
2ac18     A7 FA 61 FC | 	wrlong	result1, fp
2ac1c     0C 4E 85 F1 | 	sub	fp, #12
2ac20     1C 01 90 FD | 	jmp	#LR__4428
2ac24                 | LR__4424
2ac24                 | ' 		for (;;) {
2ac24                 | LR__4425
2ac24     04 4E 05 F1 | 	add	fp, #4
2ac28     A7 12 02 FB | 	rdlong	arg01, fp
2ac2c     04 4E 05 F1 | 	add	fp, #4
2ac30     A7 14 02 F6 | 	mov	arg02, fp
2ac34     08 4E 85 F1 | 	sub	fp, #8
2ac38     14 F6 BF FD | 	call	#_fatfs_cc_create_name
2ac3c     0C 4E 05 F1 | 	add	fp, #12
2ac40     A7 FA 61 FC | 	wrlong	result1, fp
2ac44     00 FA 4D F2 | 	cmps	result1, #0 wz
2ac48     0C 4E 85 F1 | 	sub	fp, #12
2ac4c     F0 00 90 5D |  if_ne	jmp	#LR__4427
2ac50     04 4E 05 F1 | 	add	fp, #4
2ac54     A7 12 02 FB | 	rdlong	arg01, fp
2ac58     04 4E 85 F1 | 	sub	fp, #4
2ac5c     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
2ac60     0C 4E 05 F1 | 	add	fp, #12
2ac64     A7 FA 61 FC | 	wrlong	result1, fp
2ac68     08 4E 85 F1 | 	sub	fp, #8
2ac6c     A7 1E 02 FB | 	rdlong	local01, fp
2ac70     2B 1E 06 F1 | 	add	local01, #43
2ac74     0F 1F C2 FA | 	rdbyte	local01, local01
2ac78     0C 4E 05 F1 | 	add	fp, #12
2ac7c     A7 1E 42 FC | 	wrbyte	local01, fp
2ac80     04 4E 85 F1 | 	sub	fp, #4
2ac84     A7 1E 0A FB | 	rdlong	local01, fp wz
2ac88     0C 4E 85 F1 | 	sub	fp, #12
2ac8c     34 00 90 AD |  if_e	jmp	#LR__4426
2ac90     0C 4E 05 F1 | 	add	fp, #12
2ac94     A7 1E 02 FB | 	rdlong	local01, fp
2ac98     0C 4E 85 F1 | 	sub	fp, #12
2ac9c     04 1E 0E F2 | 	cmp	local01, #4 wz
2aca0     9C 00 90 5D |  if_ne	jmp	#LR__4427
2aca4     10 4E 05 F1 | 	add	fp, #16
2aca8     A7 1E C2 FA | 	rdbyte	local01, fp
2acac     10 4E 85 F1 | 	sub	fp, #16
2acb0     04 1E CE F7 | 	test	local01, #4 wz
2acb4     0C 4E 05 A1 |  if_e	add	fp, #12
2acb8     A7 0A 68 AC |  if_e	wrlong	#5, fp
2acbc     0C 4E 85 A1 |  if_e	sub	fp, #12
2acc0                 | ' 					}
2acc0                 | ' 				}
2acc0                 | ' 				break;
2acc0     7C 00 90 FD | 	jmp	#LR__4427
2acc4                 | LR__4426
2acc4     10 4E 05 F1 | 	add	fp, #16
2acc8     A7 1E C2 FA | 	rdbyte	local01, fp
2accc     10 4E 85 F1 | 	sub	fp, #16
2acd0     04 1E CE F7 | 	test	local01, #4 wz
2acd4     68 00 90 5D |  if_ne	jmp	#LR__4427
2acd8     04 4E 05 F1 | 	add	fp, #4
2acdc     A7 1E 02 FB | 	rdlong	local01, fp
2ace0     04 4E 85 F1 | 	sub	fp, #4
2ace4     06 1E 06 F1 | 	add	local01, #6
2ace8     0F 1F C2 FA | 	rdbyte	local01, local01
2acec     10 1E CE F7 | 	test	local01, #16 wz
2acf0     0C 4E 05 A1 |  if_e	add	fp, #12
2acf4     A7 0A 68 AC |  if_e	wrlong	#5, fp
2acf8     0C 4E 85 A1 |  if_e	sub	fp, #12
2acfc                 | ' 				res = FR_NO_PATH; break;
2acfc     40 00 90 AD |  if_e	jmp	#LR__4427
2ad00     04 4E 05 F1 | 	add	fp, #4
2ad04     A7 20 02 FB | 	rdlong	local02, fp
2ad08     10 1F 02 F6 | 	mov	local01, local02
2ad0c     10 4E 05 F1 | 	add	fp, #16
2ad10     A7 14 02 FB | 	rdlong	arg02, fp
2ad14     0A 13 02 F6 | 	mov	arg01, arg02
2ad18     34 14 06 F1 | 	add	arg02, #52
2ad1c     14 4E 85 F1 | 	sub	fp, #20
2ad20     10 20 06 F1 | 	add	local02, #16
2ad24     10 21 02 FB | 	rdlong	local02, local02
2ad28     FF 21 06 F5 | 	and	local02, #511
2ad2c     10 15 02 F1 | 	add	arg02, local02
2ad30     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
2ad34     08 1E 06 F1 | 	add	local01, #8
2ad38     0F FB 61 FC | 	wrlong	result1, local01
2ad3c     E4 FE 9F FD | 	jmp	#LR__4425
2ad40                 | LR__4427
2ad40                 | LR__4428
2ad40                 | ' 			}
2ad40                 | ' #line 3090 "ff.c"
2ad40                 | ' 			{
2ad40                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2ad40                 | ' 			}
2ad40                 | ' 		}
2ad40                 | ' 	}
2ad40                 | ' 
2ad40                 | ' 	return res;
2ad40     0C 4E 05 F1 | 	add	fp, #12
2ad44     A7 FA 01 FB | 	rdlong	result1, fp
2ad48     0C 4E 85 F1 | 	sub	fp, #12
2ad4c     A7 F0 03 F6 | 	mov	ptra, fp
2ad50     B2 00 A0 FD | 	call	#popregs_
2ad54                 | _fatfs_cc_follow_path_ret
2ad54     2D 00 64 FD | 	ret
2ad58                 | 
2ad58                 | _fatfs_cc_get_ldnumber
2ad58     01 00 66 F6 | 	neg	_var01, #1
2ad5c     09 03 0A FB | 	rdlong	_var02, arg01 wz
2ad60     01 05 02 F6 | 	mov	_var03, _var02
2ad64     01 FA 65 A6 |  if_e	neg	result1, #1
2ad68     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2ad6c     97 10 48 FB | 	callpa	#(@LR__4431-@LR__4430)>>2,fcache_load_ptr_
2ad70                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2ad70                 | LR__4430
2ad70     02 07 C2 FA | 	rdbyte	_var04, _var03
2ad74     03 FB E1 F8 | 	getbyte	result1, _var04, #0
2ad78     20 FA 15 F2 | 	cmp	result1, #32 wc
2ad7c     01 04 06 F1 | 	add	_var03, #1
2ad80     03 09 02 36 |  if_ae	mov	_var05, _var04
2ad84     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2ad88     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
2ad8c     E0 FF 9F 1D |  if_a	jmp	#LR__4430
2ad90                 | LR__4431
2ad90     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
2ad94     3A 06 0E F2 | 	cmp	_var04, #58 wz
2ad98     40 00 90 5D |  if_ne	jmp	#LR__4433
2ad9c     01 0A 06 F6 | 	mov	_var06, #1
2ada0     01 09 C2 FA | 	rdbyte	_var05, _var02
2ada4     30 08 16 F2 | 	cmp	_var05, #48 wc
2ada8     1C 00 90 CD |  if_b	jmp	#LR__4432
2adac     01 09 C2 FA | 	rdbyte	_var05, _var02
2adb0     3A 08 16 F2 | 	cmp	_var05, #58 wc
2adb4     01 0D 02 C6 |  if_b	mov	_var07, _var02
2adb8     02 0C 06 C1 |  if_b	add	_var07, #2
2adbc     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
2adc0     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
2adc4     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
2adc8                 | LR__4432
2adc8     01 0A 56 F2 | 	cmps	_var06, #1 wc
2adcc     05 01 02 C6 |  if_b	mov	_var01, _var06
2add0     09 05 62 CC |  if_b	wrlong	_var03, arg01
2add4                 | ' 			vol = i;
2add4                 | ' 			*path = tt;
2add4                 | ' 		}
2add4                 | ' 		return vol;
2add4     00 FB 01 F6 | 	mov	result1, _var01
2add8     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2addc                 | LR__4433
2addc                 | ' 	}
2addc                 | ' #line 3170 "ff.c"
2addc                 | ' 	vol = 0;
2addc                 | ' 
2addc                 | ' 	return vol;
2addc     00 FA 05 F6 | 	mov	result1, #0
2ade0                 | _fatfs_cc_get_ldnumber_ret
2ade0     2D 00 64 FD | 	ret
2ade4                 | 
2ade4                 | _fatfs_cc_check_fs
2ade4     04 4A 05 F6 | 	mov	COUNT_, #4
2ade8     A8 00 A0 FD | 	call	#pushregs_
2adec     09 1F 02 F6 | 	mov	local01, arg01
2adf0     03 1E 06 F1 | 	add	local01, #3
2adf4     0F 01 48 FC | 	wrbyte	#0, local01
2adf8     2D 1E 06 F1 | 	add	local01, #45
2adfc     FF FF FF FF 
2ae00     0F FF 6B FC | 	wrlong	##-1, local01
2ae04     30 1E 86 F1 | 	sub	local01, #48
2ae08     0F 13 02 F6 | 	mov	arg01, local01
2ae0c     18 D5 BF FD | 	call	#_fatfs_cc_move_window
2ae10     00 FA 0D F2 | 	cmp	result1, #0 wz
2ae14     04 FA 05 56 |  if_ne	mov	result1, #4
2ae18     94 01 90 5D |  if_ne	jmp	#LR__4444
2ae1c     34 1E 06 F1 | 	add	local01, #52
2ae20     0F 13 02 F6 | 	mov	arg01, local01
2ae24     FE 13 06 F1 | 	add	arg01, #510
2ae28                 | ' {
2ae28                 | ' 
2ae28                 | ' 	return *((WORD*)ptr);
2ae28     09 21 E2 FA | 	rdword	local02, arg01
2ae2c     0F 23 C2 FA | 	rdbyte	local03, local01
2ae30     34 1E 86 F1 | 	sub	local01, #52
2ae34     11 25 E2 F8 | 	getbyte	local04, local03, #0
2ae38     EB 24 0E F2 | 	cmp	local04, #235 wz
2ae3c     11 17 02 56 |  if_ne	mov	arg03, local03
2ae40     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2ae44     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
2ae48     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
2ae4c     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
2ae50     44 01 90 5D |  if_ne	jmp	#LR__4443
2ae54     10 25 32 F9 | 	getword	local04, local02, #0
2ae58     55 00 00 FF 
2ae5c     55 24 0E F2 | 	cmp	local04, ##43605 wz
2ae60     2C 00 90 5D |  if_ne	jmp	#LR__4440
2ae64     34 1E 06 F1 | 	add	local01, #52
2ae68     0F 13 02 F6 | 	mov	arg01, local01
2ae6c     34 1E 86 F1 | 	sub	local01, #52
2ae70     52 12 06 F1 | 	add	arg01, #82
2ae74     81 01 00 FF 
2ae78     C4 14 06 F6 | 	mov	arg02, ##@LR__5034
2ae7c     08 16 06 F6 | 	mov	arg03, #8
2ae80     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
2ae84     00 FA 0D F2 | 	cmp	result1, #0 wz
2ae88                 | ' 			return 0;
2ae88     00 FA 05 A6 |  if_e	mov	result1, #0
2ae8c     20 01 90 AD |  if_e	jmp	#LR__4444
2ae90                 | LR__4440
2ae90     34 1E 06 F1 | 	add	local01, #52
2ae94     0F 13 02 F6 | 	mov	arg01, local01
2ae98     0B 12 06 F1 | 	add	arg01, #11
2ae9c                 | ' {
2ae9c                 | ' 
2ae9c                 | ' 	return *((WORD*)ptr);
2ae9c     09 FB E1 FA | 	rdword	result1, arg01
2aea0     0D 1E 06 F1 | 	add	local01, #13
2aea4     0F 23 C2 FA | 	rdbyte	local03, local01
2aea8     41 1E 86 F1 | 	sub	local01, #65
2aeac     FD 24 32 F9 | 	getword	local04, result1, #0
2aeb0     FD 14 32 F9 | 	getword	arg02, result1, #0
2aeb4     01 14 86 F1 | 	sub	arg02, #1
2aeb8     0A 25 CA F7 | 	test	local04, arg02 wz
2aebc     D8 00 90 5D |  if_ne	jmp	#LR__4442
2aec0     FD 14 32 F9 | 	getword	arg02, result1, #0
2aec4     01 00 00 FF 
2aec8     00 14 16 F2 | 	cmp	arg02, ##512 wc
2aecc     C8 00 90 CD |  if_b	jmp	#LR__4442
2aed0     FD 14 32 F9 | 	getword	arg02, result1, #0
2aed4     01 00 00 FF 
2aed8     01 14 16 F2 | 	cmp	arg02, ##513 wc
2aedc     B8 00 90 3D |  if_ae	jmp	#LR__4442
2aee0     11 13 02 F6 | 	mov	arg01, local03
2aee4     07 12 4E F7 | 	zerox	arg01, #7 wz
2aee8     AC 00 90 AD |  if_e	jmp	#LR__4442
2aeec     11 13 E2 F8 | 	getbyte	arg01, local03, #0
2aef0     11 23 E2 F8 | 	getbyte	local03, local03, #0
2aef4     01 22 86 F1 | 	sub	local03, #1
2aef8     11 13 CA F7 | 	test	arg01, local03 wz
2aefc     98 00 90 5D |  if_ne	jmp	#LR__4442
2af00     34 1E 06 F1 | 	add	local01, #52
2af04     0F 13 02 F6 | 	mov	arg01, local01
2af08     34 1E 86 F1 | 	sub	local01, #52
2af0c     0E 12 06 F1 | 	add	arg01, #14
2af10                 | ' {
2af10                 | ' 
2af10                 | ' 	return *((WORD*)ptr);
2af10     09 FB E9 FA | 	rdword	result1, arg01 wz
2af14     80 00 90 AD |  if_e	jmp	#LR__4442
2af18     44 1E 06 F1 | 	add	local01, #68
2af1c     0F 13 C2 FA | 	rdbyte	arg01, local01
2af20     44 1E 86 F1 | 	sub	local01, #68
2af24     01 12 86 F1 | 	sub	arg01, #1
2af28     02 12 16 F2 | 	cmp	arg01, #2 wc
2af2c     68 00 90 3D |  if_ae	jmp	#LR__4442
2af30     34 1E 06 F1 | 	add	local01, #52
2af34     0F 13 02 F6 | 	mov	arg01, local01
2af38     34 1E 86 F1 | 	sub	local01, #52
2af3c     11 12 06 F1 | 	add	arg01, #17
2af40                 | ' {
2af40                 | ' 
2af40                 | ' 	return *((WORD*)ptr);
2af40     09 FB E9 FA | 	rdword	result1, arg01 wz
2af44     50 00 90 AD |  if_e	jmp	#LR__4442
2af48     34 1E 06 F1 | 	add	local01, #52
2af4c     0F 13 02 F6 | 	mov	arg01, local01
2af50     34 1E 86 F1 | 	sub	local01, #52
2af54     13 12 06 F1 | 	add	arg01, #19
2af58                 | ' {
2af58                 | ' 
2af58                 | ' 	return *((WORD*)ptr);
2af58     09 FB E1 FA | 	rdword	result1, arg01
2af5c     FD 22 32 F9 | 	getword	local03, result1, #0
2af60     80 22 16 F2 | 	cmp	local03, #128 wc
2af64     20 00 90 3D |  if_ae	jmp	#LR__4441
2af68     34 1E 06 F1 | 	add	local01, #52
2af6c     0F 13 02 F6 | 	mov	arg01, local01
2af70     34 1E 86 F1 | 	sub	local01, #52
2af74     20 12 06 F1 | 	add	arg01, #32
2af78                 | ' {
2af78                 | ' 
2af78                 | ' 	return *((DWORD*)ptr);
2af78     09 FB 01 FB | 	rdlong	result1, arg01
2af7c     80 00 00 FF 
2af80     00 FA 15 F2 | 	cmp	result1, ##65536 wc
2af84     10 00 90 CD |  if_b	jmp	#LR__4442
2af88                 | LR__4441
2af88     4A 1E 06 F1 | 	add	local01, #74
2af8c                 | ' {
2af8c                 | ' 
2af8c                 | ' 	return *((WORD*)ptr);
2af8c     0F FB E9 FA | 	rdword	result1, local01 wz
2af90                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2af90                 | ' 			&& ld_word(fs->win +  14 ) != 0
2af90                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2af90                 | ' 			&& ld_word(fs->win +  17 ) != 0
2af90                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2af90                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2af90                 | ' 				return 0;
2af90     00 FA 05 56 |  if_ne	mov	result1, #0
2af94     18 00 90 5D |  if_ne	jmp	#LR__4444
2af98                 | LR__4442
2af98                 | LR__4443
2af98                 | ' 		}
2af98                 | ' 	}
2af98                 | ' 	return sign == 0xAA55 ? 2 : 3;
2af98     10 23 32 F9 | 	getword	local03, local02, #0
2af9c     55 00 00 FF 
2afa0     55 22 0E F2 | 	cmp	local03, ##43605 wz
2afa4     02 24 06 A6 |  if_e	mov	local04, #2
2afa8     03 24 06 56 |  if_ne	mov	local04, #3
2afac     12 FB 01 F6 | 	mov	result1, local04
2afb0                 | LR__4444
2afb0     A7 F0 03 F6 | 	mov	ptra, fp
2afb4     B2 00 A0 FD | 	call	#popregs_
2afb8                 | _fatfs_cc_check_fs_ret
2afb8     2D 00 64 FD | 	ret
2afbc                 | 
2afbc                 | _fatfs_cc_find_volume
2afbc     05 4A 05 F6 | 	mov	COUNT_, #5
2afc0     A8 00 A0 FD | 	call	#pushregs_
2afc4     24 F0 07 F1 | 	add	ptra, #36
2afc8     09 1F 02 F6 | 	mov	local01, arg01
2afcc     0A 21 02 F6 | 	mov	local02, arg02
2afd0     0F 13 02 F6 | 	mov	arg01, local01
2afd4     00 14 06 F6 | 	mov	arg02, #0
2afd8     08 FE BF FD | 	call	#_fatfs_cc_check_fs
2afdc     02 FA 0D F2 | 	cmp	result1, #2 wz
2afe0     0C 00 90 AD |  if_e	jmp	#LR__4450
2afe4     03 FA 15 F2 | 	cmp	result1, #3 wc
2afe8     00 20 0E C2 |  if_b	cmp	local02, #0 wz
2afec     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4458
2aff0                 | LR__4450
2aff0                 | ' 	for (i = 0; i < 4; i++) {
2aff0     00 22 06 F6 | 	mov	local03, #0
2aff4     97 26 48 FB | 	callpa	#(@LR__4452-@LR__4451)>>2,fcache_load_ptr_
2aff8                 | LR__4451
2aff8     04 22 16 F2 | 	cmp	local03, #4 wc
2affc     44 00 90 3D |  if_ae	jmp	#LR__4453
2b000     11 25 02 F6 | 	mov	local04, local03
2b004     02 24 66 F0 | 	shl	local04, #2
2b008     14 4E 05 F1 | 	add	fp, #20
2b00c     A7 24 02 F1 | 	add	local04, fp
2b010     34 1E 06 F1 | 	add	local01, #52
2b014     0F 13 02 F6 | 	mov	arg01, local01
2b018     34 1E 86 F1 | 	sub	local01, #52
2b01c     BE 13 06 F1 | 	add	arg01, #446
2b020     11 15 02 F6 | 	mov	arg02, local03
2b024     04 14 66 F0 | 	shl	arg02, #4
2b028     0A 13 02 F1 | 	add	arg01, arg02
2b02c     08 12 06 F1 | 	add	arg01, #8
2b030                 | ' {
2b030                 | ' 
2b030                 | ' 	return *((DWORD*)ptr);
2b030     09 FB 01 FB | 	rdlong	result1, arg01
2b034     14 4E 85 F1 | 	sub	fp, #20
2b038     12 FB 61 FC | 	wrlong	result1, local04
2b03c     01 22 06 F1 | 	add	local03, #1
2b040     B4 FF 9F FD | 	jmp	#LR__4451
2b044                 | LR__4452
2b044                 | LR__4453
2b044     00 20 0E F2 | 	cmp	local02, #0 wz
2b048     10 25 02 56 |  if_ne	mov	local04, local02
2b04c     01 24 86 51 |  if_ne	sub	local04, #1
2b050     00 24 06 A6 |  if_e	mov	local04, #0
2b054     12 23 02 F6 | 	mov	local03, local04
2b058                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2b058                 | ' 	}
2b058                 | ' 	i = part ? part - 1 : 0;
2b058                 | ' 	do {
2b058                 | LR__4454
2b058     11 25 02 F6 | 	mov	local04, local03
2b05c     02 24 66 F0 | 	shl	local04, #2
2b060     14 4E 05 F1 | 	add	fp, #20
2b064     A7 24 02 F1 | 	add	local04, fp
2b068     12 25 0A FB | 	rdlong	local04, local04 wz
2b06c     14 4E 85 F1 | 	sub	fp, #20
2b070     28 00 90 AD |  if_e	jmp	#LR__4455
2b074     11 25 02 F6 | 	mov	local04, local03
2b078     02 24 66 F0 | 	shl	local04, #2
2b07c     14 4E 05 F1 | 	add	fp, #20
2b080     A7 24 02 F1 | 	add	local04, fp
2b084     12 15 02 FB | 	rdlong	arg02, local04
2b088     0F 13 02 F6 | 	mov	arg01, local01
2b08c     14 4E 85 F1 | 	sub	fp, #20
2b090     50 FD BF FD | 	call	#_fatfs_cc_check_fs
2b094     FD 24 02 F6 | 	mov	local04, result1
2b098     04 00 90 FD | 	jmp	#LR__4456
2b09c                 | LR__4455
2b09c     03 24 06 F6 | 	mov	local04, #3
2b0a0                 | LR__4456
2b0a0     12 27 02 F6 | 	mov	local05, local04
2b0a4     00 20 0E F2 | 	cmp	local02, #0 wz
2b0a8     02 26 16 A2 |  if_e	cmp	local05, #2 wc
2b0ac     0C 00 90 8D |  if_c_and_z	jmp	#LR__4457
2b0b0     01 22 06 A1 |  if_e	add	local03, #1
2b0b4     04 22 16 A2 |  if_e	cmp	local03, #4 wc
2b0b8     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4454
2b0bc                 | LR__4457
2b0bc                 | ' 	return fmt;
2b0bc     13 FB 01 F6 | 	mov	result1, local05
2b0c0                 | LR__4458
2b0c0     A7 F0 03 F6 | 	mov	ptra, fp
2b0c4     B2 00 A0 FD | 	call	#popregs_
2b0c8                 | _fatfs_cc_find_volume_ret
2b0c8     2D 00 64 FD | 	ret
2b0cc                 | 
2b0cc                 | _fatfs_cc_mount_volume
2b0cc     0B 4A 05 F6 | 	mov	COUNT_, #11
2b0d0     A8 00 A0 FD | 	call	#pushregs_
2b0d4     0A 1F 02 F6 | 	mov	local01, arg02
2b0d8     0B 21 02 F6 | 	mov	local02, arg03
2b0dc     0F 01 68 FC | 	wrlong	#0, local01
2b0e0     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2b0e4     FD 22 02 F6 | 	mov	local03, result1
2b0e8     00 22 56 F2 | 	cmps	local03, #0 wc
2b0ec     0B FA 05 C6 |  if_b	mov	result1, #11
2b0f0     3C 05 90 CD |  if_b	jmp	#LR__4470
2b0f4     11 17 02 F6 | 	mov	arg03, local03
2b0f8     02 16 66 F0 | 	shl	arg03, #2
2b0fc     F2 16 02 F1 | 	add	arg03, objptr
2b100     0B 25 0A FB | 	rdlong	local04, arg03 wz
2b104     0C FA 05 A6 |  if_e	mov	result1, #12
2b108     24 05 90 AD |  if_e	jmp	#LR__4470
2b10c     0F 25 62 FC | 	wrlong	local04, local01
2b110     10 21 E2 F8 | 	getbyte	local02, local02, #0
2b114     FE 20 06 F5 | 	and	local02, #254
2b118     12 17 CA FA | 	rdbyte	arg03, local04 wz
2b11c     4C 00 90 AD |  if_e	jmp	#LR__4461
2b120     01 24 06 F1 | 	add	local04, #1
2b124     12 13 CA FA | 	rdbyte	arg01, local04 wz
2b128     01 24 86 F1 | 	sub	local04, #1
2b12c     01 FA 05 56 |  if_ne	mov	result1, #1
2b130                 | ' 
2b130                 | ' 	return Stat;
2b130     01 00 00 AF 
2b134     20 E4 05 A1 |  if_e	add	objptr, ##544
2b138     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2b13c     01 00 00 AF 
2b140     20 E4 85 A1 |  if_e	sub	objptr, ##544
2b144     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
2b148     01 16 CE F7 | 	test	arg03, #1 wz
2b14c     1C 00 90 5D |  if_ne	jmp	#LR__4460
2b150     00 20 0E F2 | 	cmp	local02, #0 wz
2b154     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
2b158     04 FA CD 57 |  if_ne	test	result1, #4 wz
2b15c                 | ' 				return FR_WRITE_PROTECTED;
2b15c     0A FA 05 56 |  if_ne	mov	result1, #10
2b160     CC 04 90 5D |  if_ne	jmp	#LR__4470
2b164                 | ' 			}
2b164                 | ' 			return FR_OK;
2b164     00 FA 05 F6 | 	mov	result1, #0
2b168     C4 04 90 FD | 	jmp	#LR__4470
2b16c                 | LR__4460
2b16c                 | LR__4461
2b16c     12 01 48 FC | 	wrbyte	#0, local04
2b170     01 24 06 F1 | 	add	local04, #1
2b174     12 23 42 FC | 	wrbyte	local03, local04
2b178     12 13 C2 FA | 	rdbyte	arg01, local04
2b17c     01 24 86 F1 | 	sub	local04, #1
2b180     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
2b184     FD 16 02 F6 | 	mov	arg03, result1
2b188     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
2b18c     01 26 CE F7 | 	test	local05, #1 wz
2b190                 | ' 		return FR_NOT_READY;
2b190     03 FA 05 56 |  if_ne	mov	result1, #3
2b194     98 04 90 5D |  if_ne	jmp	#LR__4470
2b198     00 20 0E F2 | 	cmp	local02, #0 wz
2b19c     0B 27 02 56 |  if_ne	mov	local05, arg03
2b1a0     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
2b1a4     04 26 CE 57 |  if_ne	test	local05, #4 wz
2b1a8                 | ' 		return FR_WRITE_PROTECTED;
2b1a8     0A FA 05 56 |  if_ne	mov	result1, #10
2b1ac     80 04 90 5D |  if_ne	jmp	#LR__4470
2b1b0     12 13 02 F6 | 	mov	arg01, local04
2b1b4     00 14 06 F6 | 	mov	arg02, #0
2b1b8     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2b1bc     FD 12 02 F6 | 	mov	arg01, result1
2b1c0     04 12 0E F2 | 	cmp	arg01, #4 wz
2b1c4     01 FA 05 A6 |  if_e	mov	result1, #1
2b1c8     64 04 90 AD |  if_e	jmp	#LR__4470
2b1cc     02 12 16 F2 | 	cmp	arg01, #2 wc
2b1d0     0D FA 05 36 |  if_ae	mov	result1, #13
2b1d4     58 04 90 3D |  if_ae	jmp	#LR__4470
2b1d8     30 24 06 F1 | 	add	local04, #48
2b1dc     12 29 02 FB | 	rdlong	local06, local04
2b1e0     04 24 06 F1 | 	add	local04, #4
2b1e4     12 13 02 F6 | 	mov	arg01, local04
2b1e8     34 24 86 F1 | 	sub	local04, #52
2b1ec     0B 12 06 F1 | 	add	arg01, #11
2b1f0                 | ' {
2b1f0                 | ' 
2b1f0                 | ' 	return *((WORD*)ptr);
2b1f0     09 FB E1 FA | 	rdword	result1, arg01
2b1f4     01 00 00 FF 
2b1f8     00 FA 0D F2 | 	cmp	result1, ##512 wz
2b1fc     0D FA 05 56 |  if_ne	mov	result1, #13
2b200     2C 04 90 5D |  if_ne	jmp	#LR__4470
2b204     34 24 06 F1 | 	add	local04, #52
2b208     12 13 02 F6 | 	mov	arg01, local04
2b20c     34 24 86 F1 | 	sub	local04, #52
2b210     16 12 06 F1 | 	add	arg01, #22
2b214                 | ' {
2b214                 | ' 
2b214                 | ' 	return *((WORD*)ptr);
2b214     09 FB E1 FA | 	rdword	result1, arg01
2b218     FD 2A 0A F6 | 	mov	local07, result1 wz
2b21c     18 00 90 5D |  if_ne	jmp	#LR__4462
2b220     34 24 06 F1 | 	add	local04, #52
2b224     12 13 02 F6 | 	mov	arg01, local04
2b228     34 24 86 F1 | 	sub	local04, #52
2b22c     24 12 06 F1 | 	add	arg01, #36
2b230                 | ' {
2b230                 | ' 
2b230                 | ' 	return *((DWORD*)ptr);
2b230     09 FB 01 FB | 	rdlong	result1, arg01
2b234     FD 2A 02 F6 | 	mov	local07, result1
2b238                 | LR__4462
2b238     1C 24 06 F1 | 	add	local04, #28
2b23c     12 2B 62 FC | 	wrlong	local07, local04
2b240     28 24 06 F1 | 	add	local04, #40
2b244     12 27 C2 FA | 	rdbyte	local05, local04
2b248     42 24 86 F1 | 	sub	local04, #66
2b24c     12 27 42 FC | 	wrbyte	local05, local04
2b250     12 27 C2 FA | 	rdbyte	local05, local04
2b254     02 24 86 F1 | 	sub	local04, #2
2b258     01 26 0E F2 | 	cmp	local05, #1 wz
2b25c     02 24 06 51 |  if_ne	add	local04, #2
2b260     12 27 C2 5A |  if_ne	rdbyte	local05, local04
2b264     02 24 86 51 |  if_ne	sub	local04, #2
2b268     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
2b26c     0D FA 05 56 |  if_ne	mov	result1, #13
2b270     BC 03 90 5D |  if_ne	jmp	#LR__4470
2b274     02 24 06 F1 | 	add	local04, #2
2b278     12 27 C2 FA | 	rdbyte	local05, local04
2b27c     13 2B 02 FD | 	qmul	local07, local05
2b280     3F 24 06 F1 | 	add	local04, #63
2b284     12 27 C2 FA | 	rdbyte	local05, local04
2b288     37 24 86 F1 | 	sub	local04, #55
2b28c     12 27 52 FC | 	wrword	local05, local04
2b290     12 27 EA FA | 	rdword	local05, local04 wz
2b294     0A 24 86 F1 | 	sub	local04, #10
2b298     18 2A 62 FD | 	getqx	local07
2b29c     20 00 90 AD |  if_e	jmp	#LR__4463
2b2a0     0A 24 06 F1 | 	add	local04, #10
2b2a4     12 27 E2 FA | 	rdword	local05, local04
2b2a8     13 23 32 F9 | 	getword	local03, local05, #0
2b2ac     0A 24 86 F1 | 	sub	local04, #10
2b2b0     13 27 32 F9 | 	getword	local05, local05, #0
2b2b4     01 26 86 F1 | 	sub	local05, #1
2b2b8     13 23 CA F7 | 	test	local03, local05 wz
2b2bc     08 00 90 AD |  if_e	jmp	#LR__4464
2b2c0                 | LR__4463
2b2c0     0D FA 05 F6 | 	mov	result1, #13
2b2c4     68 03 90 FD | 	jmp	#LR__4470
2b2c8                 | LR__4464
2b2c8     34 24 06 F1 | 	add	local04, #52
2b2cc     12 13 02 F6 | 	mov	arg01, local04
2b2d0     11 12 06 F1 | 	add	arg01, #17
2b2d4                 | ' {
2b2d4                 | ' 
2b2d4                 | ' 	return *((WORD*)ptr);
2b2d4     09 FB E1 FA | 	rdword	result1, arg01
2b2d8     2C 24 86 F1 | 	sub	local04, #44
2b2dc     12 FB 51 FC | 	wrword	result1, local04
2b2e0     12 27 E2 FA | 	rdword	local05, local04
2b2e4     08 24 86 F1 | 	sub	local04, #8
2b2e8     13 13 52 F6 | 	abs	arg01, local05 wc
2b2ec     09 13 42 F8 | 	getnib	arg01, arg01, #0
2b2f0     09 13 8A F6 | 	negc	arg01, arg01 wz
2b2f4     0D FA 05 56 |  if_ne	mov	result1, #13
2b2f8     34 03 90 5D |  if_ne	jmp	#LR__4470
2b2fc     34 24 06 F1 | 	add	local04, #52
2b300     12 13 02 F6 | 	mov	arg01, local04
2b304     34 24 86 F1 | 	sub	local04, #52
2b308     13 12 06 F1 | 	add	arg01, #19
2b30c                 | ' {
2b30c                 | ' 
2b30c                 | ' 	return *((WORD*)ptr);
2b30c     09 FB E1 FA | 	rdword	result1, arg01
2b310     FD 2C 0A F6 | 	mov	local08, result1 wz
2b314     34 24 06 A1 |  if_e	add	local04, #52
2b318     12 13 02 A6 |  if_e	mov	arg01, local04
2b31c     34 24 86 A1 |  if_e	sub	local04, #52
2b320     20 12 06 A1 |  if_e	add	arg01, #32
2b324                 | ' {
2b324                 | ' 
2b324                 | ' 	return *((DWORD*)ptr);
2b324     09 2D 02 AB |  if_e	rdlong	local08, arg01
2b328     34 24 06 F1 | 	add	local04, #52
2b32c     12 13 02 F6 | 	mov	arg01, local04
2b330     34 24 86 F1 | 	sub	local04, #52
2b334     0E 12 06 F1 | 	add	arg01, #14
2b338                 | ' {
2b338                 | ' 
2b338                 | ' 	return *((WORD*)ptr);
2b338     09 FB E1 FA | 	rdword	result1, arg01
2b33c     FD 12 02 F6 | 	mov	arg01, result1
2b340     09 27 02 F6 | 	mov	local05, arg01
2b344     0F 26 4E F7 | 	zerox	local05, #15 wz
2b348     0D FA 05 A6 |  if_e	mov	result1, #13
2b34c     E0 02 90 AD |  if_e	jmp	#LR__4470
2b350     09 2F 32 F9 | 	getword	local09, arg01, #0
2b354     15 2F 02 F1 | 	add	local09, local07
2b358     08 24 06 F1 | 	add	local04, #8
2b35c     12 27 E2 FA | 	rdword	local05, local04
2b360     08 24 86 F1 | 	sub	local04, #8
2b364     13 27 52 F6 | 	abs	local05, local05 wc
2b368     04 26 46 F0 | 	shr	local05, #4
2b36c     13 2F 82 F3 | 	sumc	local09, local05
2b370     17 2D 12 F2 | 	cmp	local08, local09 wc
2b374     0D FA 05 C6 |  if_b	mov	result1, #13
2b378     B4 02 90 CD |  if_b	jmp	#LR__4470
2b37c     17 2D 82 F1 | 	sub	local08, local09
2b380     0A 24 06 F1 | 	add	local04, #10
2b384     12 27 E2 FA | 	rdword	local05, local04
2b388     13 2D 12 FD | 	qdiv	local08, local05
2b38c     0A 24 86 F1 | 	sub	local04, #10
2b390     18 26 62 FD | 	getqx	local05
2b394     00 26 0E F2 | 	cmp	local05, #0 wz
2b398     0D FA 05 A6 |  if_e	mov	result1, #13
2b39c     90 02 90 AD |  if_e	jmp	#LR__4470
2b3a0     00 30 06 F6 | 	mov	local10, #0
2b3a4     FF FF 07 FF 
2b3a8     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
2b3ac     03 30 06 C6 |  if_b	mov	local10, #3
2b3b0     7F 00 00 FF 
2b3b4     F6 27 16 F2 | 	cmp	local05, ##65526 wc
2b3b8     02 30 06 C6 |  if_b	mov	local10, #2
2b3bc     07 00 00 FF 
2b3c0     F6 27 16 F2 | 	cmp	local05, ##4086 wc
2b3c4     01 30 06 C6 |  if_b	mov	local10, #1
2b3c8     00 30 0E F2 | 	cmp	local10, #0 wz
2b3cc     0D FA 05 A6 |  if_e	mov	result1, #13
2b3d0     5C 02 90 AD |  if_e	jmp	#LR__4470
2b3d4     02 26 06 F1 | 	add	local05, #2
2b3d8     18 24 06 F1 | 	add	local04, #24
2b3dc     12 27 62 FC | 	wrlong	local05, local04
2b3e0     08 24 06 F1 | 	add	local04, #8
2b3e4     12 29 62 FC | 	wrlong	local06, local04
2b3e8     14 27 02 F6 | 	mov	local05, local06
2b3ec     09 13 32 F9 | 	getword	arg01, arg01, #0
2b3f0     09 27 02 F1 | 	add	local05, arg01
2b3f4     04 24 06 F1 | 	add	local04, #4
2b3f8     12 27 62 FC | 	wrlong	local05, local04
2b3fc     14 27 02 F6 | 	mov	local05, local06
2b400     17 27 02 F1 | 	add	local05, local09
2b404     08 24 06 F1 | 	add	local04, #8
2b408     12 27 62 FC | 	wrlong	local05, local04
2b40c     2C 24 86 F1 | 	sub	local04, #44
2b410     03 30 0E F2 | 	cmp	local10, #3 wz
2b414     5C 00 90 5D |  if_ne	jmp	#LR__4465
2b418     34 24 06 F1 | 	add	local04, #52
2b41c     12 13 02 F6 | 	mov	arg01, local04
2b420     34 24 86 F1 | 	sub	local04, #52
2b424     2A 12 06 F1 | 	add	arg01, #42
2b428                 | ' {
2b428                 | ' 
2b428                 | ' 	return *((WORD*)ptr);
2b428     09 FB E9 FA | 	rdword	result1, arg01 wz
2b42c     0D FA 05 56 |  if_ne	mov	result1, #13
2b430     FC 01 90 5D |  if_ne	jmp	#LR__4470
2b434     08 24 06 F1 | 	add	local04, #8
2b438     12 27 EA FA | 	rdword	local05, local04 wz
2b43c     08 24 86 F1 | 	sub	local04, #8
2b440     0D FA 05 56 |  if_ne	mov	result1, #13
2b444     E8 01 90 5D |  if_ne	jmp	#LR__4470
2b448     34 24 06 F1 | 	add	local04, #52
2b44c     12 13 02 F6 | 	mov	arg01, local04
2b450     2C 12 06 F1 | 	add	arg01, #44
2b454                 | ' {
2b454                 | ' 
2b454                 | ' 	return *((DWORD*)ptr);
2b454     09 FB 01 FB | 	rdlong	result1, arg01
2b458     0C 24 86 F1 | 	sub	local04, #12
2b45c     12 FB 61 FC | 	wrlong	result1, local04
2b460     10 24 86 F1 | 	sub	local04, #16
2b464     12 33 02 FB | 	rdlong	local11, local04
2b468     18 24 86 F1 | 	sub	local04, #24
2b46c     02 32 66 F0 | 	shl	local11, #2
2b470     6C 00 90 FD | 	jmp	#LR__4467
2b474                 | LR__4465
2b474     08 24 06 F1 | 	add	local04, #8
2b478     12 27 EA FA | 	rdword	local05, local04 wz
2b47c     08 24 86 F1 | 	sub	local04, #8
2b480     0D FA 05 A6 |  if_e	mov	result1, #13
2b484     A8 01 90 AD |  if_e	jmp	#LR__4470
2b488     24 24 06 F1 | 	add	local04, #36
2b48c     12 27 02 FB | 	rdlong	local05, local04
2b490     15 27 02 F1 | 	add	local05, local07
2b494     04 24 06 F1 | 	add	local04, #4
2b498     12 27 62 FC | 	wrlong	local05, local04
2b49c     28 24 86 F1 | 	sub	local04, #40
2b4a0     02 30 0E F2 | 	cmp	local10, #2 wz
2b4a4     18 24 06 A1 |  if_e	add	local04, #24
2b4a8     12 27 02 AB |  if_e	rdlong	local05, local04
2b4ac     18 24 86 A1 |  if_e	sub	local04, #24
2b4b0     01 26 66 A0 |  if_e	shl	local05, #1
2b4b4     24 00 90 AD |  if_e	jmp	#LR__4466
2b4b8     18 24 06 F1 | 	add	local04, #24
2b4bc     12 33 02 FB | 	rdlong	local11, local04
2b4c0     19 27 02 F6 | 	mov	local05, local11
2b4c4     01 26 66 F0 | 	shl	local05, #1
2b4c8     19 27 02 F1 | 	add	local05, local11
2b4cc     01 26 46 F0 | 	shr	local05, #1
2b4d0     18 24 86 F1 | 	sub	local04, #24
2b4d4     01 32 06 F5 | 	and	local11, #1
2b4d8     19 27 02 F1 | 	add	local05, local11
2b4dc                 | LR__4466
2b4dc     13 33 02 F6 | 	mov	local11, local05
2b4e0                 | LR__4467
2b4e0     FF 33 06 F1 | 	add	local11, #511
2b4e4     09 32 46 F0 | 	shr	local11, #9
2b4e8     1C 24 06 F1 | 	add	local04, #28
2b4ec     12 17 02 FB | 	rdlong	arg03, local04
2b4f0     1C 24 86 F1 | 	sub	local04, #28
2b4f4     19 17 12 F2 | 	cmp	arg03, local11 wc
2b4f8     0D FA 05 C6 |  if_b	mov	result1, #13
2b4fc     30 01 90 CD |  if_b	jmp	#LR__4470
2b500     14 24 06 F1 | 	add	local04, #20
2b504     FF FF FF FF 
2b508     12 FF 6B FC | 	wrlong	##-1, local04
2b50c     04 24 86 F1 | 	sub	local04, #4
2b510     FF FF FF FF 
2b514     12 FF 6B FC | 	wrlong	##-1, local04
2b518     0C 24 86 F1 | 	sub	local04, #12
2b51c     12 01 49 FC | 	wrbyte	#128, local04
2b520     04 24 86 F1 | 	sub	local04, #4
2b524     03 30 0E F2 | 	cmp	local10, #3 wz
2b528     D0 00 90 5D |  if_ne	jmp	#LR__4469
2b52c     34 24 06 F1 | 	add	local04, #52
2b530     12 13 02 F6 | 	mov	arg01, local04
2b534     34 24 86 F1 | 	sub	local04, #52
2b538     30 12 06 F1 | 	add	arg01, #48
2b53c                 | ' {
2b53c                 | ' 
2b53c                 | ' 	return *((WORD*)ptr);
2b53c     09 FB E1 FA | 	rdword	result1, arg01
2b540     FD 26 32 F9 | 	getword	local05, result1, #0
2b544     01 26 0E F2 | 	cmp	local05, #1 wz
2b548     B0 00 90 5D |  if_ne	jmp	#LR__4469
2b54c     01 28 06 F1 | 	add	local06, #1
2b550     12 13 02 F6 | 	mov	arg01, local04
2b554     14 15 02 F6 | 	mov	arg02, local06
2b558     CC CD BF FD | 	call	#_fatfs_cc_move_window
2b55c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b560     98 00 90 5D |  if_ne	jmp	#LR__4469
2b564     04 24 06 F1 | 	add	local04, #4
2b568     12 01 48 FC | 	wrbyte	#0, local04
2b56c     30 24 06 F1 | 	add	local04, #48
2b570     12 13 02 F6 | 	mov	arg01, local04
2b574     34 24 86 F1 | 	sub	local04, #52
2b578     FE 13 06 F1 | 	add	arg01, #510
2b57c                 | ' {
2b57c                 | ' 
2b57c                 | ' 	return *((WORD*)ptr);
2b57c     09 FB E1 FA | 	rdword	result1, arg01
2b580     FD 26 32 F9 | 	getword	local05, result1, #0
2b584     55 00 00 FF 
2b588     55 26 0E F2 | 	cmp	local05, ##43605 wz
2b58c     34 24 06 A1 |  if_e	add	local04, #52
2b590     12 13 02 A6 |  if_e	mov	arg01, local04
2b594     34 24 86 A1 |  if_e	sub	local04, #52
2b598                 | ' {
2b598                 | ' 
2b598                 | ' 	return *((DWORD*)ptr);
2b598     09 FB 01 AB |  if_e	rdlong	result1, arg01
2b59c     A9 B0 20 AF 
2b5a0     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
2b5a4     54 00 90 5D |  if_ne	jmp	#LR__4468
2b5a8     34 24 06 F1 | 	add	local04, #52
2b5ac     12 13 02 F6 | 	mov	arg01, local04
2b5b0     34 24 86 F1 | 	sub	local04, #52
2b5b4     E4 13 06 F1 | 	add	arg01, #484
2b5b8                 | ' {
2b5b8                 | ' 
2b5b8                 | ' 	return *((DWORD*)ptr);
2b5b8     09 FB 01 FB | 	rdlong	result1, arg01
2b5bc     B9 A0 30 FF 
2b5c0     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
2b5c4     34 00 90 5D |  if_ne	jmp	#LR__4468
2b5c8     34 24 06 F1 | 	add	local04, #52
2b5cc     12 13 02 F6 | 	mov	arg01, local04
2b5d0     E8 13 06 F1 | 	add	arg01, #488
2b5d4                 | ' {
2b5d4                 | ' 
2b5d4                 | ' 	return *((DWORD*)ptr);
2b5d4     09 FB 01 FB | 	rdlong	result1, arg01
2b5d8     20 24 86 F1 | 	sub	local04, #32
2b5dc     12 FB 61 FC | 	wrlong	result1, local04
2b5e0     20 24 06 F1 | 	add	local04, #32
2b5e4     12 13 02 F6 | 	mov	arg01, local04
2b5e8     EC 13 06 F1 | 	add	arg01, #492
2b5ec                 | ' {
2b5ec                 | ' 
2b5ec                 | ' 	return *((DWORD*)ptr);
2b5ec     09 FB 01 FB | 	rdlong	result1, arg01
2b5f0     24 24 86 F1 | 	sub	local04, #36
2b5f4     12 FB 61 FC | 	wrlong	result1, local04
2b5f8     10 24 86 F1 | 	sub	local04, #16
2b5fc                 | LR__4468
2b5fc                 | LR__4469
2b5fc     12 31 42 FC | 	wrbyte	local10, local04
2b600     04 E4 05 F1 | 	add	objptr, #4
2b604     F2 26 E2 FA | 	rdword	local05, objptr
2b608     01 26 06 F1 | 	add	local05, #1
2b60c     F2 26 52 FC | 	wrword	local05, objptr
2b610     F2 32 E2 FA | 	rdword	local11, objptr
2b614     06 24 06 F1 | 	add	local04, #6
2b618     12 33 52 FC | 	wrword	local11, local04
2b61c     04 E4 05 F1 | 	add	objptr, #4
2b620     06 24 06 F1 | 	add	local04, #6
2b624     12 E5 61 FC | 	wrlong	objptr, local04
2b628                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2b628                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2b628                 | ' 			{
2b628                 | ' 
2b628                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2b628                 | ' 
2b628                 | ' 
2b628                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2b628                 | ' 
2b628                 | ' 			}
2b628                 | ' 		}
2b628                 | ' 
2b628                 | ' 
2b628                 | ' 	}
2b628                 | ' 
2b628                 | ' 	fs->fs_type = (BYTE)fmt;
2b628                 | ' 	fs->id = ++Fsid;
2b628                 | ' 
2b628                 | ' 	fs->lfnbuf = LfnBuf;
2b628                 | ' #line 3567 "ff.c"
2b628                 | ' 	return FR_OK;
2b628     00 FA 05 F6 | 	mov	result1, #0
2b62c     08 E4 85 F1 | 	sub	objptr, #8
2b630                 | LR__4470
2b630     A7 F0 03 F6 | 	mov	ptra, fp
2b634     B2 00 A0 FD | 	call	#popregs_
2b638                 | _fatfs_cc_mount_volume_ret
2b638     2D 00 64 FD | 	ret
2b63c                 | 
2b63c                 | _fatfs_cc_validate
2b63c     09 01 0A F6 | 	mov	_var01, arg01 wz
2b640     09 02 06 F6 | 	mov	_var02, #9
2b644     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2b648     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2b64c     50 00 90 AD |  if_e	jmp	#LR__4480
2b650     04 00 06 F1 | 	add	_var01, #4
2b654     00 07 E2 FA | 	rdword	_var04, _var01
2b658     04 00 86 F1 | 	sub	_var01, #4
2b65c     00 13 02 FB | 	rdlong	arg01, _var01
2b660     06 12 06 F1 | 	add	arg01, #6
2b664     09 FB E1 FA | 	rdword	result1, arg01
2b668     FD 06 0A F2 | 	cmp	_var04, result1 wz
2b66c     30 00 90 5D |  if_ne	jmp	#LR__4480
2b670     00 07 02 FB | 	rdlong	_var04, _var01
2b674     01 06 06 F1 | 	add	_var04, #1
2b678     03 13 CA FA | 	rdbyte	arg01, _var04 wz
2b67c     01 FA 05 56 |  if_ne	mov	result1, #1
2b680                 | ' 
2b680                 | ' 	return Stat;
2b680     01 00 00 AF 
2b684     20 E4 05 A1 |  if_e	add	objptr, ##544
2b688     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2b68c     01 00 00 AF 
2b690     20 E4 85 A1 |  if_e	sub	objptr, ##544
2b694     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
2b698     01 04 CE F7 | 	test	_var03, #1 wz
2b69c     00 02 06 A6 |  if_e	mov	_var02, #0
2b6a0                 | LR__4480
2b6a0     00 02 0E F2 | 	cmp	_var02, #0 wz
2b6a4     00 05 02 AB |  if_e	rdlong	_var03, _var01
2b6a8     00 04 06 56 |  if_ne	mov	_var03, #0
2b6ac     0A 05 62 FC | 	wrlong	_var03, arg02
2b6b0                 | ' 			res = FR_OK;
2b6b0                 | ' 		}
2b6b0                 | ' 
2b6b0                 | ' 	}
2b6b0                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2b6b0                 | ' 	return res;
2b6b0     01 FB 01 F6 | 	mov	result1, _var02
2b6b4                 | _fatfs_cc_validate_ret
2b6b4     2D 00 64 FD | 	ret
2b6b8                 | 
2b6b8                 | _fatfs_cc_f_mount
2b6b8     01 4A 05 F6 | 	mov	COUNT_, #1
2b6bc     A8 00 A0 FD | 	call	#pushregs_
2b6c0     20 F0 07 F1 | 	add	ptra, #32
2b6c4     04 4E 05 F1 | 	add	fp, #4
2b6c8     A7 12 62 FC | 	wrlong	arg01, fp
2b6cc     04 4E 05 F1 | 	add	fp, #4
2b6d0     A7 14 62 FC | 	wrlong	arg02, fp
2b6d4     04 4E 05 F1 | 	add	fp, #4
2b6d8     A7 16 42 FC | 	wrbyte	arg03, fp
2b6dc     04 4E 85 F1 | 	sub	fp, #4
2b6e0     A7 16 02 FB | 	rdlong	arg03, fp
2b6e4     14 4E 05 F1 | 	add	fp, #20
2b6e8     A7 16 62 FC | 	wrlong	arg03, fp
2b6ec     A7 12 02 F6 | 	mov	arg01, fp
2b6f0     1C 4E 85 F1 | 	sub	fp, #28
2b6f4     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2b6f8     14 4E 05 F1 | 	add	fp, #20
2b6fc     A7 FA 61 FC | 	wrlong	result1, fp
2b700     14 4E 85 F1 | 	sub	fp, #20
2b704     00 FA 55 F2 | 	cmps	result1, #0 wc
2b708     0B FA 05 C6 |  if_b	mov	result1, #11
2b70c     C0 00 90 CD |  if_b	jmp	#LR__4491
2b710     14 4E 05 F1 | 	add	fp, #20
2b714     A7 16 02 FB | 	rdlong	arg03, fp
2b718     02 16 66 F0 | 	shl	arg03, #2
2b71c     F2 16 02 F1 | 	add	arg03, objptr
2b720     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2b724     04 4E 85 F1 | 	sub	fp, #4
2b728     A7 16 62 FC | 	wrlong	arg03, fp
2b72c     10 4E 85 F1 | 	sub	fp, #16
2b730     28 00 90 AD |  if_e	jmp	#LR__4490
2b734     10 4E 05 F1 | 	add	fp, #16
2b738     A7 16 02 FB | 	rdlong	arg03, fp
2b73c     10 4E 85 F1 | 	sub	fp, #16
2b740     01 16 06 F1 | 	add	arg03, #1
2b744     0B 13 C2 FA | 	rdbyte	arg01, arg03
2b748     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2b74c     10 4E 05 F1 | 	add	fp, #16
2b750     A7 16 02 FB | 	rdlong	arg03, fp
2b754     10 4E 85 F1 | 	sub	fp, #16
2b758     0B 01 48 FC | 	wrbyte	#0, arg03
2b75c                 | LR__4490
2b75c     04 4E 05 F1 | 	add	fp, #4
2b760     A7 1E 0A FB | 	rdlong	local01, fp wz
2b764     04 4E 85 F1 | 	sub	fp, #4
2b768     04 4E 05 51 |  if_ne	add	fp, #4
2b76c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2b770     04 4E 85 51 |  if_ne	sub	fp, #4
2b774     0F 01 48 5C |  if_ne	wrbyte	#0, local01
2b778     14 4E 05 F1 | 	add	fp, #20
2b77c     A7 1E 02 FB | 	rdlong	local01, fp
2b780     02 1E 66 F0 | 	shl	local01, #2
2b784     F2 1E 02 F1 | 	add	local01, objptr
2b788     10 4E 85 F1 | 	sub	fp, #16
2b78c     A7 16 02 FB | 	rdlong	arg03, fp
2b790     0F 17 62 FC | 	wrlong	arg03, local01
2b794     08 4E 05 F1 | 	add	fp, #8
2b798     A7 1E CA FA | 	rdbyte	local01, fp wz
2b79c     0C 4E 85 F1 | 	sub	fp, #12
2b7a0     00 FA 05 A6 |  if_e	mov	result1, #0
2b7a4     28 00 90 AD |  if_e	jmp	#LR__4491
2b7a8     08 4E 05 F1 | 	add	fp, #8
2b7ac     A7 12 02 F6 | 	mov	arg01, fp
2b7b0     04 4E 85 F1 | 	sub	fp, #4
2b7b4     A7 14 02 F6 | 	mov	arg02, fp
2b7b8     04 4E 85 F1 | 	sub	fp, #4
2b7bc     00 16 06 F6 | 	mov	arg03, #0
2b7c0     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2b7c4     18 4E 05 F1 | 	add	fp, #24
2b7c8     A7 FA 61 FC | 	wrlong	result1, fp
2b7cc                 | ' 
2b7cc                 | ' 	res = mount_volume(&path, &fs, 0);
2b7cc                 | ' 	return res ;
2b7cc     18 4E 85 F1 | 	sub	fp, #24
2b7d0                 | LR__4491
2b7d0     A7 F0 03 F6 | 	mov	ptra, fp
2b7d4     B2 00 A0 FD | 	call	#popregs_
2b7d8                 | _fatfs_cc_f_mount_ret
2b7d8     2D 00 64 FD | 	ret
2b7dc                 | 
2b7dc                 | _fatfs_cc_f_open
2b7dc     02 4A 05 F6 | 	mov	COUNT_, #2
2b7e0     A8 00 A0 FD | 	call	#pushregs_
2b7e4     60 F0 07 F1 | 	add	ptra, #96
2b7e8     04 4E 05 F1 | 	add	fp, #4
2b7ec     A7 12 62 FC | 	wrlong	arg01, fp
2b7f0     04 4E 05 F1 | 	add	fp, #4
2b7f4     A7 14 62 FC | 	wrlong	arg02, fp
2b7f8     04 4E 05 F1 | 	add	fp, #4
2b7fc     A7 16 42 FC | 	wrbyte	arg03, fp
2b800     08 4E 85 F1 | 	sub	fp, #8
2b804     A7 18 0A FB | 	rdlong	arg04, fp wz
2b808     04 4E 85 F1 | 	sub	fp, #4
2b80c     09 FA 05 A6 |  if_e	mov	result1, #9
2b810     98 06 90 AD |  if_e	jmp	#LR__4517
2b814     0C 4E 05 F1 | 	add	fp, #12
2b818     A7 18 C2 FA | 	rdbyte	arg04, fp
2b81c     3F 18 06 F5 | 	and	arg04, #63
2b820     A7 18 42 FC | 	wrbyte	arg04, fp
2b824     04 4E 85 F1 | 	sub	fp, #4
2b828     A7 12 02 F6 | 	mov	arg01, fp
2b82c     3C 4E 05 F1 | 	add	fp, #60
2b830     A7 14 02 F6 | 	mov	arg02, fp
2b834     38 4E 85 F1 | 	sub	fp, #56
2b838     A7 16 C2 FA | 	rdbyte	arg03, fp
2b83c     0C 4E 85 F1 | 	sub	fp, #12
2b840     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
2b844     10 4E 05 F1 | 	add	fp, #16
2b848     A7 FA 61 FC | 	wrlong	result1, fp
2b84c     10 4E 85 F1 | 	sub	fp, #16
2b850     00 FA 0D F2 | 	cmp	result1, #0 wz
2b854     2C 06 90 5D |  if_ne	jmp	#LR__4516
2b858     44 4E 05 F1 | 	add	fp, #68
2b85c     A7 18 02 FB | 	rdlong	arg04, fp
2b860     30 4E 85 F1 | 	sub	fp, #48
2b864     A7 18 62 FC | 	wrlong	arg04, fp
2b868     A7 12 02 F6 | 	mov	arg01, fp
2b86c     0C 4E 85 F1 | 	sub	fp, #12
2b870     A7 1E 02 FB | 	rdlong	local01, fp
2b874     08 4E 85 F1 | 	sub	fp, #8
2b878     0F 15 02 F6 | 	mov	arg02, local01
2b87c     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
2b880     10 4E 05 F1 | 	add	fp, #16
2b884     A7 FA 61 FC | 	wrlong	result1, fp
2b888     10 4E 85 F1 | 	sub	fp, #16
2b88c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b890     1C 00 90 5D |  if_ne	jmp	#LR__4500
2b894     3F 4E 05 F1 | 	add	fp, #63
2b898     A7 18 C2 FA | 	rdbyte	arg04, fp
2b89c     3F 4E 85 F1 | 	sub	fp, #63
2b8a0     80 18 CE F7 | 	test	arg04, #128 wz
2b8a4     10 4E 05 51 |  if_ne	add	fp, #16
2b8a8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2b8ac     10 4E 85 51 |  if_ne	sub	fp, #16
2b8b0                 | LR__4500
2b8b0     0C 4E 05 F1 | 	add	fp, #12
2b8b4     A7 18 C2 FA | 	rdbyte	arg04, fp
2b8b8     0C 4E 85 F1 | 	sub	fp, #12
2b8bc     1C 18 CE F7 | 	test	arg04, #28 wz
2b8c0     F0 01 90 AD |  if_e	jmp	#LR__4505
2b8c4     10 4E 05 F1 | 	add	fp, #16
2b8c8     A7 1E 0A FB | 	rdlong	local01, fp wz
2b8cc     10 4E 85 F1 | 	sub	fp, #16
2b8d0     48 00 90 AD |  if_e	jmp	#LR__4502
2b8d4     10 4E 05 F1 | 	add	fp, #16
2b8d8     A7 18 02 FB | 	rdlong	arg04, fp
2b8dc     10 4E 85 F1 | 	sub	fp, #16
2b8e0     04 18 0E F2 | 	cmp	arg04, #4 wz
2b8e4     1C 00 90 5D |  if_ne	jmp	#LR__4501
2b8e8     14 4E 05 F1 | 	add	fp, #20
2b8ec     A7 12 02 F6 | 	mov	arg01, fp
2b8f0     14 4E 85 F1 | 	sub	fp, #20
2b8f4     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
2b8f8     10 4E 05 F1 | 	add	fp, #16
2b8fc     A7 FA 61 FC | 	wrlong	result1, fp
2b900     10 4E 85 F1 | 	sub	fp, #16
2b904                 | LR__4501
2b904     0C 4E 05 F1 | 	add	fp, #12
2b908     A7 1E C2 FA | 	rdbyte	local01, fp
2b90c     08 1E 46 F5 | 	or	local01, #8
2b910     A7 1E 42 FC | 	wrbyte	local01, fp
2b914     0C 4E 85 F1 | 	sub	fp, #12
2b918     3C 00 90 FD | 	jmp	#LR__4504
2b91c                 | LR__4502
2b91c     1A 4E 05 F1 | 	add	fp, #26
2b920     A7 1E C2 FA | 	rdbyte	local01, fp
2b924     1A 4E 85 F1 | 	sub	fp, #26
2b928     11 1E CE F7 | 	test	local01, #17 wz
2b92c     10 4E 05 51 |  if_ne	add	fp, #16
2b930     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2b934     10 4E 85 51 |  if_ne	sub	fp, #16
2b938     1C 00 90 5D |  if_ne	jmp	#LR__4503
2b93c     0C 4E 05 F1 | 	add	fp, #12
2b940     A7 1E C2 FA | 	rdbyte	local01, fp
2b944     0C 4E 85 F1 | 	sub	fp, #12
2b948     04 1E CE F7 | 	test	local01, #4 wz
2b94c     10 4E 05 51 |  if_ne	add	fp, #16
2b950     A7 10 68 5C |  if_ne	wrlong	#8, fp
2b954     10 4E 85 51 |  if_ne	sub	fp, #16
2b958                 | LR__4503
2b958                 | LR__4504
2b958     10 4E 05 F1 | 	add	fp, #16
2b95c     A7 1E 0A FB | 	rdlong	local01, fp wz
2b960     10 4E 85 F1 | 	sub	fp, #16
2b964     A8 01 90 5D |  if_ne	jmp	#LR__4508
2b968     0C 4E 05 F1 | 	add	fp, #12
2b96c     A7 1E C2 FA | 	rdbyte	local01, fp
2b970     0C 4E 85 F1 | 	sub	fp, #12
2b974     08 1E CE F7 | 	test	local01, #8 wz
2b978     94 01 90 AD |  if_e	jmp	#LR__4508
2b97c     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
2b980     54 4E 05 F1 | 	add	fp, #84
2b984     A7 FA 61 FC | 	wrlong	result1, fp
2b988     24 4E 85 F1 | 	sub	fp, #36
2b98c     A7 12 02 FB | 	rdlong	arg01, fp
2b990     0E 12 06 F1 | 	add	arg01, #14
2b994     09 FB 61 FC | 	wrlong	result1, arg01
2b998     A7 12 02 FB | 	rdlong	arg01, fp
2b99c     16 12 06 F1 | 	add	arg01, #22
2b9a0     24 4E 05 F1 | 	add	fp, #36
2b9a4     A7 14 02 FB | 	rdlong	arg02, fp
2b9a8     09 15 62 FC | 	wrlong	arg02, arg01
2b9ac     10 4E 85 F1 | 	sub	fp, #16
2b9b0     A7 12 02 FB | 	rdlong	arg01, fp
2b9b4     14 4E 85 F1 | 	sub	fp, #20
2b9b8     A7 14 02 FB | 	rdlong	arg02, fp
2b9bc     30 4E 85 F1 | 	sub	fp, #48
2b9c0     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
2b9c4     48 4E 05 F1 | 	add	fp, #72
2b9c8     A7 FA 61 FC | 	wrlong	result1, fp
2b9cc     18 4E 85 F1 | 	sub	fp, #24
2b9d0     A7 1E 02 FB | 	rdlong	local01, fp
2b9d4     0B 1E 06 F1 | 	add	local01, #11
2b9d8     0F 41 48 FC | 	wrbyte	#32, local01
2b9dc     14 4E 05 F1 | 	add	fp, #20
2b9e0     A7 12 02 FB | 	rdlong	arg01, fp
2b9e4     14 4E 85 F1 | 	sub	fp, #20
2b9e8     A7 14 02 FB | 	rdlong	arg02, fp
2b9ec     30 4E 85 F1 | 	sub	fp, #48
2b9f0     00 16 06 F6 | 	mov	arg03, #0
2b9f4     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
2b9f8     30 4E 05 F1 | 	add	fp, #48
2b9fc     A7 12 02 FB | 	rdlong	arg01, fp
2ba00     1C 12 06 F1 | 	add	arg01, #28
2ba04     09 01 68 FC | 	wrlong	#0, arg01
2ba08     14 4E 05 F1 | 	add	fp, #20
2ba0c     A7 1E 02 FB | 	rdlong	local01, fp
2ba10     03 1E 06 F1 | 	add	local01, #3
2ba14     0F 03 48 FC | 	wrbyte	#1, local01
2ba18     04 4E 05 F1 | 	add	fp, #4
2ba1c     A7 1E 0A FB | 	rdlong	local01, fp wz
2ba20     48 4E 85 F1 | 	sub	fp, #72
2ba24     E8 00 90 AD |  if_e	jmp	#LR__4508
2ba28     44 4E 05 F1 | 	add	fp, #68
2ba2c     A7 1E 02 FB | 	rdlong	local01, fp
2ba30     30 1E 06 F1 | 	add	local01, #48
2ba34     0F 1F 02 FB | 	rdlong	local01, local01
2ba38     14 4E 05 F1 | 	add	fp, #20
2ba3c     A7 1E 62 FC | 	wrlong	local01, fp
2ba40     44 4E 85 F1 | 	sub	fp, #68
2ba44     A7 12 02 F6 | 	mov	arg01, fp
2ba48     34 4E 05 F1 | 	add	fp, #52
2ba4c     A7 14 02 FB | 	rdlong	arg02, fp
2ba50     48 4E 85 F1 | 	sub	fp, #72
2ba54     00 16 06 F6 | 	mov	arg03, #0
2ba58     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
2ba5c     10 4E 05 F1 | 	add	fp, #16
2ba60     A7 FA 61 FC | 	wrlong	result1, fp
2ba64     10 4E 85 F1 | 	sub	fp, #16
2ba68     00 FA 0D F2 | 	cmp	result1, #0 wz
2ba6c     A0 00 90 5D |  if_ne	jmp	#LR__4508
2ba70     44 4E 05 F1 | 	add	fp, #68
2ba74     A7 12 02 FB | 	rdlong	arg01, fp
2ba78     14 4E 05 F1 | 	add	fp, #20
2ba7c     A7 14 02 FB | 	rdlong	arg02, fp
2ba80     58 4E 85 F1 | 	sub	fp, #88
2ba84     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
2ba88     10 4E 05 F1 | 	add	fp, #16
2ba8c     A7 FA 61 FC | 	wrlong	result1, fp
2ba90     34 4E 05 F1 | 	add	fp, #52
2ba94     A7 18 02 FB | 	rdlong	arg04, fp
2ba98     04 4E 05 F1 | 	add	fp, #4
2ba9c     A7 1E 02 FB | 	rdlong	local01, fp
2baa0     48 4E 85 F1 | 	sub	fp, #72
2baa4     01 1E 86 F1 | 	sub	local01, #1
2baa8     10 18 06 F1 | 	add	arg04, #16
2baac     0C 1F 62 FC | 	wrlong	local01, arg04
2bab0     5C 00 90 FD | 	jmp	#LR__4508
2bab4                 | LR__4505
2bab4     10 4E 05 F1 | 	add	fp, #16
2bab8     A7 18 0A FB | 	rdlong	arg04, fp wz
2babc     10 4E 85 F1 | 	sub	fp, #16
2bac0     4C 00 90 5D |  if_ne	jmp	#LR__4507
2bac4     1A 4E 05 F1 | 	add	fp, #26
2bac8     A7 18 C2 FA | 	rdbyte	arg04, fp
2bacc     1A 4E 85 F1 | 	sub	fp, #26
2bad0     10 18 CE F7 | 	test	arg04, #16 wz
2bad4     10 4E 05 51 |  if_ne	add	fp, #16
2bad8     A7 08 68 5C |  if_ne	wrlong	#4, fp
2badc     10 4E 85 51 |  if_ne	sub	fp, #16
2bae0     2C 00 90 5D |  if_ne	jmp	#LR__4506
2bae4     0C 4E 05 F1 | 	add	fp, #12
2bae8     A7 18 C2 FA | 	rdbyte	arg04, fp
2baec     0C 4E 85 F1 | 	sub	fp, #12
2baf0     02 18 CE F7 | 	test	arg04, #2 wz
2baf4     1A 4E 05 51 |  if_ne	add	fp, #26
2baf8     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
2bafc     1A 4E 85 51 |  if_ne	sub	fp, #26
2bb00     01 1E CE 57 |  if_ne	test	local01, #1 wz
2bb04     10 4E 05 51 |  if_ne	add	fp, #16
2bb08     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2bb0c     10 4E 85 51 |  if_ne	sub	fp, #16
2bb10                 | LR__4506
2bb10                 | LR__4507
2bb10                 | LR__4508
2bb10     10 4E 05 F1 | 	add	fp, #16
2bb14     A7 1E 0A FB | 	rdlong	local01, fp wz
2bb18     10 4E 85 F1 | 	sub	fp, #16
2bb1c     60 00 90 5D |  if_ne	jmp	#LR__4509
2bb20     0C 4E 05 F1 | 	add	fp, #12
2bb24     A7 20 C2 FA | 	rdbyte	local02, fp
2bb28     0C 4E 85 F1 | 	sub	fp, #12
2bb2c     08 20 CE F7 | 	test	local02, #8 wz
2bb30     0C 4E 05 51 |  if_ne	add	fp, #12
2bb34     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
2bb38     40 20 46 55 |  if_ne	or	local02, #64
2bb3c     A7 20 42 5C |  if_ne	wrbyte	local02, fp
2bb40     0C 4E 85 51 |  if_ne	sub	fp, #12
2bb44     04 4E 05 F1 | 	add	fp, #4
2bb48     A7 20 02 FB | 	rdlong	local02, fp
2bb4c     40 4E 05 F1 | 	add	fp, #64
2bb50     A7 1E 02 FB | 	rdlong	local01, fp
2bb54     30 1E 06 F1 | 	add	local01, #48
2bb58     0F 1F 02 FB | 	rdlong	local01, local01
2bb5c     20 20 06 F1 | 	add	local02, #32
2bb60     10 1F 62 FC | 	wrlong	local01, local02
2bb64     40 4E 85 F1 | 	sub	fp, #64
2bb68     A7 20 02 FB | 	rdlong	local02, fp
2bb6c     2C 4E 05 F1 | 	add	fp, #44
2bb70     A7 1E 02 FB | 	rdlong	local01, fp
2bb74     30 4E 85 F1 | 	sub	fp, #48
2bb78     24 20 06 F1 | 	add	local02, #36
2bb7c     10 1F 62 FC | 	wrlong	local01, local02
2bb80                 | LR__4509
2bb80     10 4E 05 F1 | 	add	fp, #16
2bb84     A7 20 0A FB | 	rdlong	local02, fp wz
2bb88     10 4E 85 F1 | 	sub	fp, #16
2bb8c     F4 02 90 5D |  if_ne	jmp	#LR__4515
2bb90     04 4E 05 F1 | 	add	fp, #4
2bb94     A7 20 02 FB | 	rdlong	local02, fp
2bb98     40 4E 05 F1 | 	add	fp, #64
2bb9c     A7 12 02 FB | 	rdlong	arg01, fp
2bba0     14 4E 85 F1 | 	sub	fp, #20
2bba4     A7 14 02 FB | 	rdlong	arg02, fp
2bba8     30 4E 85 F1 | 	sub	fp, #48
2bbac     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
2bbb0     08 20 06 F1 | 	add	local02, #8
2bbb4     10 FB 61 FC | 	wrlong	result1, local02
2bbb8     04 4E 05 F1 | 	add	fp, #4
2bbbc     A7 20 02 FB | 	rdlong	local02, fp
2bbc0     2C 4E 05 F1 | 	add	fp, #44
2bbc4     A7 12 02 FB | 	rdlong	arg01, fp
2bbc8     1C 12 06 F1 | 	add	arg01, #28
2bbcc                 | ' {
2bbcc                 | ' 
2bbcc                 | ' 	return *((DWORD*)ptr);
2bbcc     09 FB 01 FB | 	rdlong	result1, arg01
2bbd0     0C 20 06 F1 | 	add	local02, #12
2bbd4     10 FB 61 FC | 	wrlong	result1, local02
2bbd8     2C 4E 85 F1 | 	sub	fp, #44
2bbdc     A7 20 02 FB | 	rdlong	local02, fp
2bbe0     40 4E 05 F1 | 	add	fp, #64
2bbe4     A7 1E 02 FB | 	rdlong	local01, fp
2bbe8     10 1F 62 FC | 	wrlong	local01, local02
2bbec     40 4E 85 F1 | 	sub	fp, #64
2bbf0     A7 20 02 FB | 	rdlong	local02, fp
2bbf4     40 4E 05 F1 | 	add	fp, #64
2bbf8     A7 1E 02 FB | 	rdlong	local01, fp
2bbfc     06 1E 06 F1 | 	add	local01, #6
2bc00     0F 1F E2 FA | 	rdword	local01, local01
2bc04     04 20 06 F1 | 	add	local02, #4
2bc08     10 1F 52 FC | 	wrword	local01, local02
2bc0c     40 4E 85 F1 | 	sub	fp, #64
2bc10     A7 20 02 FB | 	rdlong	local02, fp
2bc14     08 4E 05 F1 | 	add	fp, #8
2bc18     A7 1E C2 FA | 	rdbyte	local01, fp
2bc1c     10 20 06 F1 | 	add	local02, #16
2bc20     10 1F 42 FC | 	wrbyte	local01, local02
2bc24     08 4E 85 F1 | 	sub	fp, #8
2bc28     A7 20 02 FB | 	rdlong	local02, fp
2bc2c     11 20 06 F1 | 	add	local02, #17
2bc30     10 01 48 FC | 	wrbyte	#0, local02
2bc34     A7 20 02 FB | 	rdlong	local02, fp
2bc38     1C 20 06 F1 | 	add	local02, #28
2bc3c     10 01 68 FC | 	wrlong	#0, local02
2bc40     A7 20 02 FB | 	rdlong	local02, fp
2bc44     14 20 06 F1 | 	add	local02, #20
2bc48     10 01 68 FC | 	wrlong	#0, local02
2bc4c     A7 12 02 FB | 	rdlong	arg01, fp
2bc50     04 4E 85 F1 | 	sub	fp, #4
2bc54     28 12 06 F1 | 	add	arg01, #40
2bc58     00 14 06 F6 | 	mov	arg02, #0
2bc5c     09 16 C6 F9 | 	decod	arg03, #9
2bc60     98 00 A0 FD | 	call	#\builtin_bytefill_
2bc64     0C 4E 05 F1 | 	add	fp, #12
2bc68     A7 20 C2 FA | 	rdbyte	local02, fp
2bc6c     0C 4E 85 F1 | 	sub	fp, #12
2bc70     20 20 CE F7 | 	test	local02, #32 wz
2bc74     0C 02 90 AD |  if_e	jmp	#LR__4514
2bc78     04 4E 05 F1 | 	add	fp, #4
2bc7c     A7 1E 02 FB | 	rdlong	local01, fp
2bc80     04 4E 85 F1 | 	sub	fp, #4
2bc84     0C 1E 06 F1 | 	add	local01, #12
2bc88     0F 21 02 FB | 	rdlong	local02, local01
2bc8c     01 20 16 F2 | 	cmp	local02, #1 wc
2bc90     F0 01 90 CD |  if_b	jmp	#LR__4514
2bc94     04 4E 05 F1 | 	add	fp, #4
2bc98     A7 1E 02 FB | 	rdlong	local01, fp
2bc9c     0F 21 02 F6 | 	mov	local02, local01
2bca0     0C 1E 06 F1 | 	add	local01, #12
2bca4     0F 1F 02 FB | 	rdlong	local01, local01
2bca8     14 20 06 F1 | 	add	local02, #20
2bcac     10 1F 62 FC | 	wrlong	local01, local02
2bcb0     40 4E 05 F1 | 	add	fp, #64
2bcb4     A7 20 02 FB | 	rdlong	local02, fp
2bcb8     0A 20 06 F1 | 	add	local02, #10
2bcbc     10 21 E2 FA | 	rdword	local02, local02
2bcc0     09 20 66 F0 | 	shl	local02, #9
2bcc4     08 4E 05 F1 | 	add	fp, #8
2bcc8     A7 20 62 FC | 	wrlong	local02, fp
2bccc     48 4E 85 F1 | 	sub	fp, #72
2bcd0     A7 20 02 FB | 	rdlong	local02, fp
2bcd4     08 20 06 F1 | 	add	local02, #8
2bcd8     10 1F 02 FB | 	rdlong	local01, local02
2bcdc     4C 4E 05 F1 | 	add	fp, #76
2bce0     A7 1E 62 FC | 	wrlong	local01, fp
2bce4                 | ' 				fp->fptr = fp->obj.objsize;
2bce4                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2bce4                 | ' 				clst = fp->obj.sclust;
2bce4                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2bce4     4C 4E 85 F1 | 	sub	fp, #76
2bce8     A7 20 02 FB | 	rdlong	local02, fp
2bcec     0C 20 06 F1 | 	add	local02, #12
2bcf0     10 1F 02 FB | 	rdlong	local01, local02
2bcf4     58 4E 05 F1 | 	add	fp, #88
2bcf8     A7 1E 62 FC | 	wrlong	local01, fp
2bcfc     5C 4E 85 F1 | 	sub	fp, #92
2bd00                 | LR__4510
2bd00     10 4E 05 F1 | 	add	fp, #16
2bd04     A7 20 0A FB | 	rdlong	local02, fp wz
2bd08     10 4E 85 F1 | 	sub	fp, #16
2bd0c     94 00 90 5D |  if_ne	jmp	#LR__4511
2bd10     5C 4E 05 F1 | 	add	fp, #92
2bd14     A7 20 02 FB | 	rdlong	local02, fp
2bd18     10 4E 85 F1 | 	sub	fp, #16
2bd1c     A7 1E 02 FB | 	rdlong	local01, fp
2bd20     4C 4E 85 F1 | 	sub	fp, #76
2bd24     0F 21 1A F2 | 	cmp	local02, local01 wcz
2bd28     78 00 90 ED |  if_be	jmp	#LR__4511
2bd2c     04 4E 05 F1 | 	add	fp, #4
2bd30     A7 12 02 FB | 	rdlong	arg01, fp
2bd34     4C 4E 05 F1 | 	add	fp, #76
2bd38     A7 14 02 FB | 	rdlong	arg02, fp
2bd3c     50 4E 85 F1 | 	sub	fp, #80
2bd40     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
2bd44     50 4E 05 F1 | 	add	fp, #80
2bd48     A7 FA 61 FC | 	wrlong	result1, fp
2bd4c     50 4E 85 F1 | 	sub	fp, #80
2bd50     02 FA 15 F2 | 	cmp	result1, #2 wc
2bd54     10 4E 05 C1 |  if_b	add	fp, #16
2bd58     A7 04 68 CC |  if_b	wrlong	#2, fp
2bd5c     10 4E 85 C1 |  if_b	sub	fp, #16
2bd60     50 4E 05 F1 | 	add	fp, #80
2bd64     A7 20 02 FB | 	rdlong	local02, fp
2bd68     50 4E 85 F1 | 	sub	fp, #80
2bd6c     FF FF 7F FF 
2bd70     FF 21 0E F2 | 	cmp	local02, ##-1 wz
2bd74     10 4E 05 A1 |  if_e	add	fp, #16
2bd78     A7 02 68 AC |  if_e	wrlong	#1, fp
2bd7c     10 4E 85 A1 |  if_e	sub	fp, #16
2bd80     5C 4E 05 F1 | 	add	fp, #92
2bd84     A7 20 02 FB | 	rdlong	local02, fp
2bd88     10 4E 85 F1 | 	sub	fp, #16
2bd8c     A7 1E 02 FB | 	rdlong	local01, fp
2bd90     0F 21 82 F1 | 	sub	local02, local01
2bd94     10 4E 05 F1 | 	add	fp, #16
2bd98     A7 20 62 FC | 	wrlong	local02, fp
2bd9c     5C 4E 85 F1 | 	sub	fp, #92
2bda0     5C FF 9F FD | 	jmp	#LR__4510
2bda4                 | LR__4511
2bda4     04 4E 05 F1 | 	add	fp, #4
2bda8     A7 20 02 FB | 	rdlong	local02, fp
2bdac     4C 4E 05 F1 | 	add	fp, #76
2bdb0     A7 1E 02 FB | 	rdlong	local01, fp
2bdb4     18 20 06 F1 | 	add	local02, #24
2bdb8     10 1F 62 FC | 	wrlong	local01, local02
2bdbc     40 4E 85 F1 | 	sub	fp, #64
2bdc0     A7 20 0A FB | 	rdlong	local02, fp wz
2bdc4     10 4E 85 F1 | 	sub	fp, #16
2bdc8     B8 00 90 5D |  if_ne	jmp	#LR__4513
2bdcc     5C 4E 05 F1 | 	add	fp, #92
2bdd0     A7 1E 02 FB | 	rdlong	local01, fp
2bdd4     5C 4E 85 F1 | 	sub	fp, #92
2bdd8     FF 1F CE F7 | 	test	local01, #511 wz
2bddc     A4 00 90 AD |  if_e	jmp	#LR__4513
2bde0     44 4E 05 F1 | 	add	fp, #68
2bde4     A7 12 02 FB | 	rdlong	arg01, fp
2bde8     0C 4E 05 F1 | 	add	fp, #12
2bdec     A7 14 02 FB | 	rdlong	arg02, fp
2bdf0     50 4E 85 F1 | 	sub	fp, #80
2bdf4     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
2bdf8     58 4E 05 F1 | 	add	fp, #88
2bdfc     A7 FA 61 FC | 	wrlong	result1, fp
2be00     00 FA 4D F2 | 	cmps	result1, #0 wz
2be04     58 4E 85 F1 | 	sub	fp, #88
2be08     10 4E 05 A1 |  if_e	add	fp, #16
2be0c     A7 04 68 AC |  if_e	wrlong	#2, fp
2be10     10 4E 85 A1 |  if_e	sub	fp, #16
2be14     6C 00 90 AD |  if_e	jmp	#LR__4512
2be18     04 4E 05 F1 | 	add	fp, #4
2be1c     A7 20 02 FB | 	rdlong	local02, fp
2be20     54 4E 05 F1 | 	add	fp, #84
2be24     A7 1E 02 FB | 	rdlong	local01, fp
2be28     04 4E 05 F1 | 	add	fp, #4
2be2c     A7 18 02 FB | 	rdlong	arg04, fp
2be30     09 18 46 F0 | 	shr	arg04, #9
2be34     0C 1F 02 F1 | 	add	local01, arg04
2be38     1C 20 06 F1 | 	add	local02, #28
2be3c     10 1F 62 FC | 	wrlong	local01, local02
2be40     18 4E 85 F1 | 	sub	fp, #24
2be44     A7 20 02 FB | 	rdlong	local02, fp
2be48     01 20 06 F1 | 	add	local02, #1
2be4c     10 13 C2 FA | 	rdbyte	arg01, local02
2be50     40 4E 85 F1 | 	sub	fp, #64
2be54     A7 20 02 FB | 	rdlong	local02, fp
2be58     10 15 02 F6 | 	mov	arg02, local02
2be5c     28 14 06 F1 | 	add	arg02, #40
2be60     04 4E 85 F1 | 	sub	fp, #4
2be64     1C 20 06 F1 | 	add	local02, #28
2be68     10 17 02 FB | 	rdlong	arg03, local02
2be6c     01 18 06 F6 | 	mov	arg04, #1
2be70     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
2be74     00 FA 0D F2 | 	cmp	result1, #0 wz
2be78     10 4E 05 51 |  if_ne	add	fp, #16
2be7c     A7 02 68 5C |  if_ne	wrlong	#1, fp
2be80     10 4E 85 51 |  if_ne	sub	fp, #16
2be84                 | LR__4512
2be84                 | LR__4513
2be84                 | LR__4514
2be84                 | LR__4515
2be84                 | LR__4516
2be84     10 4E 05 F1 | 	add	fp, #16
2be88     A7 20 0A FB | 	rdlong	local02, fp wz
2be8c     10 4E 85 F1 | 	sub	fp, #16
2be90     04 4E 05 51 |  if_ne	add	fp, #4
2be94     A7 20 02 5B |  if_ne	rdlong	local02, fp
2be98     04 4E 85 51 |  if_ne	sub	fp, #4
2be9c     10 01 68 5C |  if_ne	wrlong	#0, local02
2bea0                 | ' 
2bea0                 | ' 	return res ;
2bea0     10 4E 05 F1 | 	add	fp, #16
2bea4     A7 FA 01 FB | 	rdlong	result1, fp
2bea8     10 4E 85 F1 | 	sub	fp, #16
2beac                 | LR__4517
2beac     A7 F0 03 F6 | 	mov	ptra, fp
2beb0     B2 00 A0 FD | 	call	#popregs_
2beb4                 | _fatfs_cc_f_open_ret
2beb4     2D 00 64 FD | 	ret
2beb8                 | 
2beb8                 | _fatfs_cc_f_read
2beb8     0E 4A 05 F6 | 	mov	COUNT_, #14
2bebc     A8 00 A0 FD | 	call	#pushregs_
2bec0     38 F0 07 F1 | 	add	ptra, #56
2bec4     04 4E 05 F1 | 	add	fp, #4
2bec8     A7 12 62 FC | 	wrlong	arg01, fp
2becc     04 4E 05 F1 | 	add	fp, #4
2bed0     A7 14 62 FC | 	wrlong	arg02, fp
2bed4     04 4E 05 F1 | 	add	fp, #4
2bed8     A7 16 62 FC | 	wrlong	arg03, fp
2bedc     04 4E 05 F1 | 	add	fp, #4
2bee0     A7 18 62 FC | 	wrlong	arg04, fp
2bee4     08 4E 85 F1 | 	sub	fp, #8
2bee8     A7 FA 01 FB | 	rdlong	result1, fp
2beec     2C 4E 05 F1 | 	add	fp, #44
2bef0     A7 FA 61 FC | 	wrlong	result1, fp
2bef4     24 4E 85 F1 | 	sub	fp, #36
2bef8     A7 FA 01 FB | 	rdlong	result1, fp
2befc     FD 00 68 FC | 	wrlong	#0, result1
2bf00     0C 4E 85 F1 | 	sub	fp, #12
2bf04     A7 12 02 FB | 	rdlong	arg01, fp
2bf08     14 4E 05 F1 | 	add	fp, #20
2bf0c     A7 14 02 F6 | 	mov	arg02, fp
2bf10     18 4E 85 F1 | 	sub	fp, #24
2bf14     24 F7 BF FD | 	call	#_fatfs_cc_validate
2bf18     14 4E 05 F1 | 	add	fp, #20
2bf1c     A7 FA 61 FC | 	wrlong	result1, fp
2bf20     00 FA 4D F2 | 	cmps	result1, #0 wz
2bf24     14 4E 85 F1 | 	sub	fp, #20
2bf28     20 00 90 5D |  if_ne	jmp	#LR__4520
2bf2c     04 4E 05 F1 | 	add	fp, #4
2bf30     A7 14 02 FB | 	rdlong	arg02, fp
2bf34     11 14 06 F1 | 	add	arg02, #17
2bf38     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2bf3c     10 4E 05 F1 | 	add	fp, #16
2bf40     A7 14 62 FC | 	wrlong	arg02, fp
2bf44     14 4E 85 F1 | 	sub	fp, #20
2bf48     10 00 90 AD |  if_e	jmp	#LR__4521
2bf4c                 | LR__4520
2bf4c     14 4E 05 F1 | 	add	fp, #20
2bf50     A7 FA 01 FB | 	rdlong	result1, fp
2bf54     14 4E 85 F1 | 	sub	fp, #20
2bf58     EC 05 90 FD | 	jmp	#LR__4540
2bf5c                 | LR__4521
2bf5c     04 4E 05 F1 | 	add	fp, #4
2bf60     A7 18 02 FB | 	rdlong	arg04, fp
2bf64     04 4E 85 F1 | 	sub	fp, #4
2bf68     10 18 06 F1 | 	add	arg04, #16
2bf6c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2bf70     01 18 CE F7 | 	test	arg04, #1 wz
2bf74     07 FA 05 A6 |  if_e	mov	result1, #7
2bf78     CC 05 90 AD |  if_e	jmp	#LR__4540
2bf7c     04 4E 05 F1 | 	add	fp, #4
2bf80     A7 1E 02 FB | 	rdlong	local01, fp
2bf84     0F 21 02 F6 | 	mov	local02, local01
2bf88     0C 20 06 F1 | 	add	local02, #12
2bf8c     10 23 02 FB | 	rdlong	local03, local02
2bf90     14 1E 06 F1 | 	add	local01, #20
2bf94     0F 1F 02 FB | 	rdlong	local01, local01
2bf98     0F 23 82 F1 | 	sub	local03, local01
2bf9c     20 4E 05 F1 | 	add	fp, #32
2bfa0     A7 22 62 FC | 	wrlong	local03, fp
2bfa4     18 4E 85 F1 | 	sub	fp, #24
2bfa8     A7 24 02 FB | 	rdlong	local04, fp
2bfac     0C 4E 85 F1 | 	sub	fp, #12
2bfb0     11 25 1A F2 | 	cmp	local04, local03 wcz
2bfb4     24 4E 05 11 |  if_a	add	fp, #36
2bfb8     A7 24 02 1B |  if_a	rdlong	local04, fp
2bfbc     18 4E 85 11 |  if_a	sub	fp, #24
2bfc0     A7 24 62 1C |  if_a	wrlong	local04, fp
2bfc4     0C 4E 85 11 |  if_a	sub	fp, #12
2bfc8                 | ' 
2bfc8                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2bfc8                 | LR__4522
2bfc8     0C 4E 05 F1 | 	add	fp, #12
2bfcc     A7 20 02 FB | 	rdlong	local02, fp
2bfd0     0C 4E 85 F1 | 	sub	fp, #12
2bfd4     10 25 02 F6 | 	mov	local04, local02
2bfd8     01 24 16 F2 | 	cmp	local04, #1 wc
2bfdc     64 05 90 CD |  if_b	jmp	#LR__4539
2bfe0     04 4E 05 F1 | 	add	fp, #4
2bfe4     A7 22 02 FB | 	rdlong	local03, fp
2bfe8     04 4E 85 F1 | 	sub	fp, #4
2bfec     14 22 06 F1 | 	add	local03, #20
2bff0     11 23 02 FB | 	rdlong	local03, local03
2bff4     FF 23 CE F7 | 	test	local03, #511 wz
2bff8     3C 04 90 5D |  if_ne	jmp	#LR__4537
2bffc     04 4E 05 F1 | 	add	fp, #4
2c000     A7 1E 02 FB | 	rdlong	local01, fp
2c004     14 1E 06 F1 | 	add	local01, #20
2c008     0F 23 02 FB | 	rdlong	local03, local01
2c00c     09 22 46 F0 | 	shr	local03, #9
2c010     14 4E 05 F1 | 	add	fp, #20
2c014     A7 26 02 FB | 	rdlong	local05, fp
2c018     13 29 02 F6 | 	mov	local06, local05
2c01c     0A 28 06 F1 | 	add	local06, #10
2c020     14 2B E2 FA | 	rdword	local07, local06
2c024     0A 28 86 F1 | 	sub	local06, #10
2c028     15 2D 32 F9 | 	getword	local08, local07, #0
2c02c     01 2C 86 F1 | 	sub	local08, #1
2c030     16 23 0A F5 | 	and	local03, local08 wz
2c034     18 4E 05 F1 | 	add	fp, #24
2c038     A7 22 62 FC | 	wrlong	local03, fp
2c03c     30 4E 85 F1 | 	sub	fp, #48
2c040     E0 00 90 5D |  if_ne	jmp	#LR__4527
2c044     04 4E 05 F1 | 	add	fp, #4
2c048     A7 22 02 FB | 	rdlong	local03, fp
2c04c     04 4E 85 F1 | 	sub	fp, #4
2c050     14 22 06 F1 | 	add	local03, #20
2c054     11 23 0A FB | 	rdlong	local03, local03 wz
2c058     20 00 90 5D |  if_ne	jmp	#LR__4523
2c05c     04 4E 05 F1 | 	add	fp, #4
2c060     A7 22 02 FB | 	rdlong	local03, fp
2c064     08 22 06 F1 | 	add	local03, #8
2c068     11 23 02 FB | 	rdlong	local03, local03
2c06c     18 4E 05 F1 | 	add	fp, #24
2c070     A7 22 62 FC | 	wrlong	local03, fp
2c074     1C 4E 85 F1 | 	sub	fp, #28
2c078     28 00 90 FD | 	jmp	#LR__4524
2c07c                 | LR__4523
2c07c     04 4E 05 F1 | 	add	fp, #4
2c080     A7 2C 02 FB | 	rdlong	local08, fp
2c084     16 13 02 F6 | 	mov	arg01, local08
2c088     04 4E 85 F1 | 	sub	fp, #4
2c08c     18 2C 06 F1 | 	add	local08, #24
2c090     16 15 02 FB | 	rdlong	arg02, local08
2c094     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
2c098     1C 4E 05 F1 | 	add	fp, #28
2c09c     A7 FA 61 FC | 	wrlong	result1, fp
2c0a0     1C 4E 85 F1 | 	sub	fp, #28
2c0a4                 | LR__4524
2c0a4     1C 4E 05 F1 | 	add	fp, #28
2c0a8     A7 22 02 FB | 	rdlong	local03, fp
2c0ac     1C 4E 85 F1 | 	sub	fp, #28
2c0b0     02 22 16 F2 | 	cmp	local03, #2 wc
2c0b4     1C 00 90 3D |  if_ae	jmp	#LR__4525
2c0b8     04 4E 05 F1 | 	add	fp, #4
2c0bc     A7 22 02 FB | 	rdlong	local03, fp
2c0c0     04 4E 85 F1 | 	sub	fp, #4
2c0c4     11 22 06 F1 | 	add	local03, #17
2c0c8     11 05 48 FC | 	wrbyte	#2, local03
2c0cc     02 FA 05 F6 | 	mov	result1, #2
2c0d0     74 04 90 FD | 	jmp	#LR__4540
2c0d4                 | LR__4525
2c0d4     1C 4E 05 F1 | 	add	fp, #28
2c0d8     A7 22 02 FB | 	rdlong	local03, fp
2c0dc     1C 4E 85 F1 | 	sub	fp, #28
2c0e0     FF FF 7F FF 
2c0e4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
2c0e8     1C 00 90 5D |  if_ne	jmp	#LR__4526
2c0ec     04 4E 05 F1 | 	add	fp, #4
2c0f0     A7 22 02 FB | 	rdlong	local03, fp
2c0f4     04 4E 85 F1 | 	sub	fp, #4
2c0f8     11 22 06 F1 | 	add	local03, #17
2c0fc     11 03 48 FC | 	wrbyte	#1, local03
2c100     01 FA 05 F6 | 	mov	result1, #1
2c104     40 04 90 FD | 	jmp	#LR__4540
2c108                 | LR__4526
2c108     04 4E 05 F1 | 	add	fp, #4
2c10c     A7 22 02 FB | 	rdlong	local03, fp
2c110     18 4E 05 F1 | 	add	fp, #24
2c114     A7 2C 02 FB | 	rdlong	local08, fp
2c118     1C 4E 85 F1 | 	sub	fp, #28
2c11c     18 22 06 F1 | 	add	local03, #24
2c120     11 2D 62 FC | 	wrlong	local08, local03
2c124                 | LR__4527
2c124     18 4E 05 F1 | 	add	fp, #24
2c128     A7 12 02 FB | 	rdlong	arg01, fp
2c12c     14 4E 85 F1 | 	sub	fp, #20
2c130     A7 22 02 FB | 	rdlong	local03, fp
2c134     04 4E 85 F1 | 	sub	fp, #4
2c138     18 22 06 F1 | 	add	local03, #24
2c13c     11 15 02 FB | 	rdlong	arg02, local03
2c140     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
2c144     20 4E 05 F1 | 	add	fp, #32
2c148     A7 FA 61 FC | 	wrlong	result1, fp
2c14c     20 4E 85 F1 | 	sub	fp, #32
2c150     00 FA 0D F2 | 	cmp	result1, #0 wz
2c154     1C 00 90 5D |  if_ne	jmp	#LR__4528
2c158     04 4E 05 F1 | 	add	fp, #4
2c15c     A7 22 02 FB | 	rdlong	local03, fp
2c160     04 4E 85 F1 | 	sub	fp, #4
2c164     11 22 06 F1 | 	add	local03, #17
2c168     11 05 48 FC | 	wrbyte	#2, local03
2c16c     02 FA 05 F6 | 	mov	result1, #2
2c170     D4 03 90 FD | 	jmp	#LR__4540
2c174                 | LR__4528
2c174     20 4E 05 F1 | 	add	fp, #32
2c178     A7 22 02 FB | 	rdlong	local03, fp
2c17c     10 4E 05 F1 | 	add	fp, #16
2c180     A7 2C 02 FB | 	rdlong	local08, fp
2c184     16 23 02 F1 | 	add	local03, local08
2c188     10 4E 85 F1 | 	sub	fp, #16
2c18c     A7 22 62 FC | 	wrlong	local03, fp
2c190     14 4E 85 F1 | 	sub	fp, #20
2c194     A7 22 02 FB | 	rdlong	local03, fp
2c198     09 22 46 F0 | 	shr	local03, #9
2c19c     20 4E 05 F1 | 	add	fp, #32
2c1a0     A7 22 62 FC | 	wrlong	local03, fp
2c1a4     2C 4E 85 F1 | 	sub	fp, #44
2c1a8     01 22 16 F2 | 	cmp	local03, #1 wc
2c1ac     5C 01 90 CD |  if_b	jmp	#LR__4532
2c1b0     30 4E 05 F1 | 	add	fp, #48
2c1b4     A7 22 02 FB | 	rdlong	local03, fp
2c1b8     04 4E 85 F1 | 	sub	fp, #4
2c1bc     A7 2C 02 FB | 	rdlong	local08, fp
2c1c0     16 23 02 F1 | 	add	local03, local08
2c1c4     14 4E 85 F1 | 	sub	fp, #20
2c1c8     A7 2C 02 FB | 	rdlong	local08, fp
2c1cc     18 4E 85 F1 | 	sub	fp, #24
2c1d0     0A 2C 06 F1 | 	add	local08, #10
2c1d4     16 2D E2 FA | 	rdword	local08, local08
2c1d8     16 23 1A F2 | 	cmp	local03, local08 wcz
2c1dc     28 00 90 ED |  if_be	jmp	#LR__4529
2c1e0     18 4E 05 F1 | 	add	fp, #24
2c1e4     A7 1E 02 FB | 	rdlong	local01, fp
2c1e8     0A 1E 06 F1 | 	add	local01, #10
2c1ec     0F 23 E2 FA | 	rdword	local03, local01
2c1f0     18 4E 05 F1 | 	add	fp, #24
2c1f4     A7 2C 02 FB | 	rdlong	local08, fp
2c1f8     16 23 82 F1 | 	sub	local03, local08
2c1fc     04 4E 85 F1 | 	sub	fp, #4
2c200     A7 22 62 FC | 	wrlong	local03, fp
2c204     2C 4E 85 F1 | 	sub	fp, #44
2c208                 | LR__4529
2c208     18 4E 05 F1 | 	add	fp, #24
2c20c     A7 1E 02 FB | 	rdlong	local01, fp
2c210     01 1E 06 F1 | 	add	local01, #1
2c214     0F 13 C2 FA | 	rdbyte	arg01, local01
2c218     1C 4E 05 F1 | 	add	fp, #28
2c21c     A7 14 02 FB | 	rdlong	arg02, fp
2c220     14 4E 85 F1 | 	sub	fp, #20
2c224     A7 16 02 FB | 	rdlong	arg03, fp
2c228     0C 4E 05 F1 | 	add	fp, #12
2c22c     A7 18 02 FB | 	rdlong	arg04, fp
2c230     2C 4E 85 F1 | 	sub	fp, #44
2c234     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
2c238     00 FA 0D F2 | 	cmp	result1, #0 wz
2c23c     1C 00 90 AD |  if_e	jmp	#LR__4530
2c240     04 4E 05 F1 | 	add	fp, #4
2c244     A7 22 02 FB | 	rdlong	local03, fp
2c248     04 4E 85 F1 | 	sub	fp, #4
2c24c     11 22 06 F1 | 	add	local03, #17
2c250     11 03 48 FC | 	wrbyte	#1, local03
2c254     01 FA 05 F6 | 	mov	result1, #1
2c258     EC 02 90 FD | 	jmp	#LR__4540
2c25c                 | LR__4530
2c25c     04 4E 05 F1 | 	add	fp, #4
2c260     A7 1E 02 FB | 	rdlong	local01, fp
2c264     04 4E 85 F1 | 	sub	fp, #4
2c268     10 1E 06 F1 | 	add	local01, #16
2c26c     0F 23 C2 FA | 	rdbyte	local03, local01
2c270     80 22 CE F7 | 	test	local03, #128 wz
2c274     78 00 90 AD |  if_e	jmp	#LR__4531
2c278     04 4E 05 F1 | 	add	fp, #4
2c27c     A7 2C 02 FB | 	rdlong	local08, fp
2c280     1C 2C 06 F1 | 	add	local08, #28
2c284     16 2D 02 FB | 	rdlong	local08, local08
2c288     1C 4E 05 F1 | 	add	fp, #28
2c28c     A7 2E 02 FB | 	rdlong	local09, fp
2c290     17 2D 82 F1 | 	sub	local08, local09
2c294     0C 4E 05 F1 | 	add	fp, #12
2c298     A7 30 02 FB | 	rdlong	local10, fp
2c29c     2C 4E 85 F1 | 	sub	fp, #44
2c2a0     18 33 02 F6 | 	mov	local11, local10
2c2a4     19 2D 12 F2 | 	cmp	local08, local11 wc
2c2a8     44 00 90 3D |  if_ae	jmp	#LR__4531
2c2ac     34 4E 05 F1 | 	add	fp, #52
2c2b0     A7 12 02 FB | 	rdlong	arg01, fp
2c2b4     30 4E 85 F1 | 	sub	fp, #48
2c2b8     A7 14 02 FB | 	rdlong	arg02, fp
2c2bc     0A 33 02 F6 | 	mov	local11, arg02
2c2c0     1C 32 06 F1 | 	add	local11, #28
2c2c4     19 2F 02 FB | 	rdlong	local09, local11
2c2c8     1C 4E 05 F1 | 	add	fp, #28
2c2cc     A7 26 02 FB | 	rdlong	local05, fp
2c2d0     13 2F 82 F1 | 	sub	local09, local05
2c2d4     09 2E 66 F0 | 	shl	local09, #9
2c2d8     17 33 02 F6 | 	mov	local11, local09
2c2dc     17 13 02 F1 | 	add	arg01, local09
2c2e0     20 4E 85 F1 | 	sub	fp, #32
2c2e4     28 14 06 F1 | 	add	arg02, #40
2c2e8     09 16 C6 F9 | 	decod	arg03, #9
2c2ec     4C 46 BF FD | 	call	#__system____builtin_memmove
2c2f0                 | LR__4531
2c2f0     2C 4E 05 F1 | 	add	fp, #44
2c2f4     A7 22 02 FB | 	rdlong	local03, fp
2c2f8     09 22 66 F0 | 	shl	local03, #9
2c2fc     04 4E 85 F1 | 	sub	fp, #4
2c300     A7 22 62 FC | 	wrlong	local03, fp
2c304     28 4E 85 F1 | 	sub	fp, #40
2c308                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2c308                 | ' 				}
2c308                 | ' 
2c308                 | ' 
2c308                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2c308                 | ' 				continue;
2c308     B4 01 90 FD | 	jmp	#LR__4538
2c30c                 | LR__4532
2c30c     04 4E 05 F1 | 	add	fp, #4
2c310     A7 22 02 FB | 	rdlong	local03, fp
2c314     1C 22 06 F1 | 	add	local03, #28
2c318     11 23 02 FB | 	rdlong	local03, local03
2c31c     1C 4E 05 F1 | 	add	fp, #28
2c320     A7 1E 02 FB | 	rdlong	local01, fp
2c324     20 4E 85 F1 | 	sub	fp, #32
2c328     0F 23 0A F2 | 	cmp	local03, local01 wz
2c32c     EC 00 90 AD |  if_e	jmp	#LR__4536
2c330     04 4E 05 F1 | 	add	fp, #4
2c334     A7 1E 02 FB | 	rdlong	local01, fp
2c338     04 4E 85 F1 | 	sub	fp, #4
2c33c     10 1E 06 F1 | 	add	local01, #16
2c340     0F 23 C2 FA | 	rdbyte	local03, local01
2c344     80 22 CE F7 | 	test	local03, #128 wz
2c348     7C 00 90 AD |  if_e	jmp	#LR__4534
2c34c     18 4E 05 F1 | 	add	fp, #24
2c350     A7 1E 02 FB | 	rdlong	local01, fp
2c354     01 1E 06 F1 | 	add	local01, #1
2c358     0F 13 C2 FA | 	rdbyte	arg01, local01
2c35c     14 4E 85 F1 | 	sub	fp, #20
2c360     A7 22 02 FB | 	rdlong	local03, fp
2c364     11 15 02 F6 | 	mov	arg02, local03
2c368     28 14 06 F1 | 	add	arg02, #40
2c36c     04 4E 85 F1 | 	sub	fp, #4
2c370     1C 22 06 F1 | 	add	local03, #28
2c374     11 17 02 FB | 	rdlong	arg03, local03
2c378     01 18 06 F6 | 	mov	arg04, #1
2c37c     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
2c380     00 FA 0D F2 | 	cmp	result1, #0 wz
2c384     1C 00 90 AD |  if_e	jmp	#LR__4533
2c388     04 4E 05 F1 | 	add	fp, #4
2c38c     A7 22 02 FB | 	rdlong	local03, fp
2c390     04 4E 85 F1 | 	sub	fp, #4
2c394     11 22 06 F1 | 	add	local03, #17
2c398     11 03 48 FC | 	wrbyte	#1, local03
2c39c     01 FA 05 F6 | 	mov	result1, #1
2c3a0     A4 01 90 FD | 	jmp	#LR__4540
2c3a4                 | LR__4533
2c3a4     04 4E 05 F1 | 	add	fp, #4
2c3a8     A7 32 02 FB | 	rdlong	local11, fp
2c3ac     19 23 02 F6 | 	mov	local03, local11
2c3b0     04 4E 85 F1 | 	sub	fp, #4
2c3b4     10 32 06 F1 | 	add	local11, #16
2c3b8     19 33 C2 FA | 	rdbyte	local11, local11
2c3bc     7F 32 06 F5 | 	and	local11, #127
2c3c0     10 22 06 F1 | 	add	local03, #16
2c3c4     11 33 42 FC | 	wrbyte	local11, local03
2c3c8                 | LR__4534
2c3c8     18 4E 05 F1 | 	add	fp, #24
2c3cc     A7 1E 02 FB | 	rdlong	local01, fp
2c3d0     01 1E 06 F1 | 	add	local01, #1
2c3d4     0F 13 C2 FA | 	rdbyte	arg01, local01
2c3d8     14 4E 85 F1 | 	sub	fp, #20
2c3dc     A7 14 02 FB | 	rdlong	arg02, fp
2c3e0     28 14 06 F1 | 	add	arg02, #40
2c3e4     1C 4E 05 F1 | 	add	fp, #28
2c3e8     A7 16 02 FB | 	rdlong	arg03, fp
2c3ec     20 4E 85 F1 | 	sub	fp, #32
2c3f0     01 18 06 F6 | 	mov	arg04, #1
2c3f4     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
2c3f8     00 FA 0D F2 | 	cmp	result1, #0 wz
2c3fc     1C 00 90 AD |  if_e	jmp	#LR__4535
2c400     04 4E 05 F1 | 	add	fp, #4
2c404     A7 22 02 FB | 	rdlong	local03, fp
2c408     04 4E 85 F1 | 	sub	fp, #4
2c40c     11 22 06 F1 | 	add	local03, #17
2c410     11 03 48 FC | 	wrbyte	#1, local03
2c414     01 FA 05 F6 | 	mov	result1, #1
2c418     2C 01 90 FD | 	jmp	#LR__4540
2c41c                 | LR__4535
2c41c                 | LR__4536
2c41c     04 4E 05 F1 | 	add	fp, #4
2c420     A7 22 02 FB | 	rdlong	local03, fp
2c424     1C 4E 05 F1 | 	add	fp, #28
2c428     A7 32 02 FB | 	rdlong	local11, fp
2c42c     20 4E 85 F1 | 	sub	fp, #32
2c430     1C 22 06 F1 | 	add	local03, #28
2c434     11 33 62 FC | 	wrlong	local11, local03
2c438                 | LR__4537
2c438     04 4E 05 F1 | 	add	fp, #4
2c43c     A7 1E 02 FB | 	rdlong	local01, fp
2c440     14 1E 06 F1 | 	add	local01, #20
2c444     0F 33 02 FB | 	rdlong	local11, local01
2c448     FF 33 06 F5 | 	and	local11, #511
2c44c     09 22 C6 F9 | 	decod	local03, #9
2c450     19 23 82 F1 | 	sub	local03, local11
2c454     24 4E 05 F1 | 	add	fp, #36
2c458     A7 22 62 FC | 	wrlong	local03, fp
2c45c     1C 4E 85 F1 | 	sub	fp, #28
2c460     A7 32 02 FB | 	rdlong	local11, fp
2c464     0C 4E 85 F1 | 	sub	fp, #12
2c468     19 23 1A F2 | 	cmp	local03, local11 wcz
2c46c     0C 4E 05 11 |  if_a	add	fp, #12
2c470     A7 22 02 1B |  if_a	rdlong	local03, fp
2c474     1C 4E 05 11 |  if_a	add	fp, #28
2c478     A7 22 62 1C |  if_a	wrlong	local03, fp
2c47c     28 4E 85 11 |  if_a	sub	fp, #40
2c480     34 4E 05 F1 | 	add	fp, #52
2c484     A7 12 02 FB | 	rdlong	arg01, fp
2c488     30 4E 85 F1 | 	sub	fp, #48
2c48c     A7 28 02 FB | 	rdlong	local06, fp
2c490     14 15 02 F6 | 	mov	arg02, local06
2c494     28 14 06 F1 | 	add	arg02, #40
2c498     14 28 06 F1 | 	add	local06, #20
2c49c     14 33 02 FB | 	rdlong	local11, local06
2c4a0     19 2F 02 F6 | 	mov	local09, local11
2c4a4     17 31 02 F6 | 	mov	local10, local09
2c4a8     FF 31 06 F5 | 	and	local10, #511
2c4ac     18 15 02 F1 | 	add	arg02, local10
2c4b0     24 4E 05 F1 | 	add	fp, #36
2c4b4     A7 16 02 FB | 	rdlong	arg03, fp
2c4b8     28 4E 85 F1 | 	sub	fp, #40
2c4bc     7C 44 BF FD | 	call	#__system____builtin_memmove
2c4c0                 | LR__4538
2c4c0     0C 4E 05 F1 | 	add	fp, #12
2c4c4     A7 22 02 FB | 	rdlong	local03, fp
2c4c8     1C 4E 05 F1 | 	add	fp, #28
2c4cc     A7 2C 02 FB | 	rdlong	local08, fp
2c4d0     16 23 82 F1 | 	sub	local03, local08
2c4d4     1C 4E 85 F1 | 	sub	fp, #28
2c4d8     A7 22 62 FC | 	wrlong	local03, fp
2c4dc     04 4E 05 F1 | 	add	fp, #4
2c4e0     A7 1E 02 FB | 	rdlong	local01, fp
2c4e4     0F 2B 02 FB | 	rdlong	local07, local01
2c4e8     18 4E 05 F1 | 	add	fp, #24
2c4ec     A7 2C 02 FB | 	rdlong	local08, fp
2c4f0     16 2B 02 F1 | 	add	local07, local08
2c4f4     0F 2B 62 FC | 	wrlong	local07, local01
2c4f8     0C 4E 05 F1 | 	add	fp, #12
2c4fc     A7 22 02 FB | 	rdlong	local03, fp
2c500     0C 4E 85 F1 | 	sub	fp, #12
2c504     A7 34 02 FB | 	rdlong	local12, fp
2c508     1A 23 02 F1 | 	add	local03, local12
2c50c     0C 4E 05 F1 | 	add	fp, #12
2c510     A7 22 62 FC | 	wrlong	local03, fp
2c514     30 4E 85 F1 | 	sub	fp, #48
2c518     A7 36 02 FB | 	rdlong	local13, fp
2c51c     1B 23 02 F6 | 	mov	local03, local13
2c520     14 36 06 F1 | 	add	local13, #20
2c524     1B 39 02 FB | 	rdlong	local14, local13
2c528     24 4E 05 F1 | 	add	fp, #36
2c52c     A7 28 02 FB | 	rdlong	local06, fp
2c530     28 4E 85 F1 | 	sub	fp, #40
2c534     14 39 02 F1 | 	add	local14, local06
2c538     14 22 06 F1 | 	add	local03, #20
2c53c     11 39 62 FC | 	wrlong	local14, local03
2c540     84 FA 9F FD | 	jmp	#LR__4522
2c544                 | LR__4539
2c544                 | ' 
2c544                 | ' 
2c544                 | ' 
2c544                 | ' 
2c544                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2c544                 | ' 
2c544                 | ' 	}
2c544                 | ' 
2c544                 | ' 	return FR_OK ;
2c544     00 FA 05 F6 | 	mov	result1, #0
2c548                 | LR__4540
2c548     A7 F0 03 F6 | 	mov	ptra, fp
2c54c     B2 00 A0 FD | 	call	#popregs_
2c550                 | _fatfs_cc_f_read_ret
2c550     2D 00 64 FD | 	ret
2c554                 | 
2c554                 | _fatfs_cc_f_write
2c554     15 4A 05 F6 | 	mov	COUNT_, #21
2c558     A8 00 A0 FD | 	call	#pushregs_
2c55c     34 F0 07 F1 | 	add	ptra, #52
2c560     04 4E 05 F1 | 	add	fp, #4
2c564     A7 12 62 FC | 	wrlong	arg01, fp
2c568     04 4E 05 F1 | 	add	fp, #4
2c56c     A7 14 62 FC | 	wrlong	arg02, fp
2c570     04 4E 05 F1 | 	add	fp, #4
2c574     A7 16 62 FC | 	wrlong	arg03, fp
2c578     04 4E 05 F1 | 	add	fp, #4
2c57c     A7 18 62 FC | 	wrlong	arg04, fp
2c580     08 4E 85 F1 | 	sub	fp, #8
2c584     A7 FA 01 FB | 	rdlong	result1, fp
2c588     28 4E 05 F1 | 	add	fp, #40
2c58c     A7 FA 61 FC | 	wrlong	result1, fp
2c590     20 4E 85 F1 | 	sub	fp, #32
2c594     A7 FA 01 FB | 	rdlong	result1, fp
2c598     FD 00 68 FC | 	wrlong	#0, result1
2c59c     0C 4E 85 F1 | 	sub	fp, #12
2c5a0     A7 12 02 FB | 	rdlong	arg01, fp
2c5a4     14 4E 05 F1 | 	add	fp, #20
2c5a8     A7 14 02 F6 | 	mov	arg02, fp
2c5ac     18 4E 85 F1 | 	sub	fp, #24
2c5b0     88 F0 BF FD | 	call	#_fatfs_cc_validate
2c5b4     14 4E 05 F1 | 	add	fp, #20
2c5b8     A7 FA 61 FC | 	wrlong	result1, fp
2c5bc     00 FA 4D F2 | 	cmps	result1, #0 wz
2c5c0     14 4E 85 F1 | 	sub	fp, #20
2c5c4     20 00 90 5D |  if_ne	jmp	#LR__4550
2c5c8     04 4E 05 F1 | 	add	fp, #4
2c5cc     A7 14 02 FB | 	rdlong	arg02, fp
2c5d0     11 14 06 F1 | 	add	arg02, #17
2c5d4     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2c5d8     10 4E 05 F1 | 	add	fp, #16
2c5dc     A7 14 62 FC | 	wrlong	arg02, fp
2c5e0     14 4E 85 F1 | 	sub	fp, #20
2c5e4     10 00 90 AD |  if_e	jmp	#LR__4551
2c5e8                 | LR__4550
2c5e8     14 4E 05 F1 | 	add	fp, #20
2c5ec     A7 FA 01 FB | 	rdlong	result1, fp
2c5f0     14 4E 85 F1 | 	sub	fp, #20
2c5f4     44 07 90 FD | 	jmp	#LR__4573
2c5f8                 | LR__4551
2c5f8     04 4E 05 F1 | 	add	fp, #4
2c5fc     A7 14 02 FB | 	rdlong	arg02, fp
2c600     04 4E 85 F1 | 	sub	fp, #4
2c604     10 14 06 F1 | 	add	arg02, #16
2c608     0A 15 C2 FA | 	rdbyte	arg02, arg02
2c60c     02 14 CE F7 | 	test	arg02, #2 wz
2c610     07 FA 05 A6 |  if_e	mov	result1, #7
2c614     24 07 90 AD |  if_e	jmp	#LR__4573
2c618     04 4E 05 F1 | 	add	fp, #4
2c61c     A7 14 02 FB | 	rdlong	arg02, fp
2c620     0A 13 02 F6 | 	mov	arg01, arg02
2c624     14 12 06 F1 | 	add	arg01, #20
2c628     09 13 02 FB | 	rdlong	arg01, arg01
2c62c     08 4E 05 F1 | 	add	fp, #8
2c630     A7 FA 01 FB | 	rdlong	result1, fp
2c634     FD 12 02 F1 | 	add	arg01, result1
2c638     0C 4E 85 F1 | 	sub	fp, #12
2c63c     14 14 06 F1 | 	add	arg02, #20
2c640     0A FB 01 FB | 	rdlong	result1, arg02
2c644     FD 12 12 F2 | 	cmp	arg01, result1 wc
2c648     24 00 90 3D |  if_ae	jmp	#LR__4552
2c64c     04 4E 05 F1 | 	add	fp, #4
2c650     A7 14 02 FB | 	rdlong	arg02, fp
2c654     01 FA 65 F6 | 	neg	result1, #1
2c658     14 14 06 F1 | 	add	arg02, #20
2c65c     0A 15 02 FB | 	rdlong	arg02, arg02
2c660     0A FB 81 F1 | 	sub	result1, arg02
2c664     08 4E 05 F1 | 	add	fp, #8
2c668     A7 FA 61 FC | 	wrlong	result1, fp
2c66c     0C 4E 85 F1 | 	sub	fp, #12
2c670                 | LR__4552
2c670                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2c670                 | ' 	}
2c670                 | ' 
2c670                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2c670                 | LR__4553
2c670     0C 4E 05 F1 | 	add	fp, #12
2c674     A7 FA 01 FB | 	rdlong	result1, fp
2c678     0C 4E 85 F1 | 	sub	fp, #12
2c67c     01 FA 15 F2 | 	cmp	result1, #1 wc
2c680     90 06 90 CD |  if_b	jmp	#LR__4572
2c684     04 4E 05 F1 | 	add	fp, #4
2c688     A7 FA 01 FB | 	rdlong	result1, fp
2c68c     04 4E 85 F1 | 	sub	fp, #4
2c690     14 FA 05 F1 | 	add	result1, #20
2c694     FD FA 01 FB | 	rdlong	result1, result1
2c698     FF FB CD F7 | 	test	result1, #511 wz
2c69c     D8 04 90 5D |  if_ne	jmp	#LR__4568
2c6a0     04 4E 05 F1 | 	add	fp, #4
2c6a4     A7 FA 01 FB | 	rdlong	result1, fp
2c6a8     14 FA 05 F1 | 	add	result1, #20
2c6ac     FD FA 01 FB | 	rdlong	result1, result1
2c6b0     09 FA 45 F0 | 	shr	result1, #9
2c6b4     14 4E 05 F1 | 	add	fp, #20
2c6b8     A7 14 02 FB | 	rdlong	arg02, fp
2c6bc     0A 14 06 F1 | 	add	arg02, #10
2c6c0     0A 19 E2 FA | 	rdword	arg04, arg02
2c6c4     0C 15 32 F9 | 	getword	arg02, arg04, #0
2c6c8     01 14 86 F1 | 	sub	arg02, #1
2c6cc     0A FB 09 F5 | 	and	result1, arg02 wz
2c6d0     14 4E 05 F1 | 	add	fp, #20
2c6d4     A7 FA 61 FC | 	wrlong	result1, fp
2c6d8     2C 4E 85 F1 | 	sub	fp, #44
2c6dc     44 01 90 5D |  if_ne	jmp	#LR__4559
2c6e0     04 4E 05 F1 | 	add	fp, #4
2c6e4     A7 FA 01 FB | 	rdlong	result1, fp
2c6e8     04 4E 85 F1 | 	sub	fp, #4
2c6ec     14 FA 05 F1 | 	add	result1, #20
2c6f0     FD 14 0A FB | 	rdlong	arg02, result1 wz
2c6f4     44 00 90 5D |  if_ne	jmp	#LR__4554
2c6f8     04 4E 05 F1 | 	add	fp, #4
2c6fc     A7 14 02 FB | 	rdlong	arg02, fp
2c700     08 14 06 F1 | 	add	arg02, #8
2c704     0A 15 0A FB | 	rdlong	arg02, arg02 wz
2c708     18 4E 05 F1 | 	add	fp, #24
2c70c     A7 14 62 FC | 	wrlong	arg02, fp
2c710     1C 4E 85 F1 | 	sub	fp, #28
2c714     4C 00 90 5D |  if_ne	jmp	#LR__4555
2c718     04 4E 05 F1 | 	add	fp, #4
2c71c     A7 12 02 FB | 	rdlong	arg01, fp
2c720     04 4E 85 F1 | 	sub	fp, #4
2c724     00 14 06 F6 | 	mov	arg02, #0
2c728     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
2c72c     1C 4E 05 F1 | 	add	fp, #28
2c730     A7 FA 61 FC | 	wrlong	result1, fp
2c734     1C 4E 85 F1 | 	sub	fp, #28
2c738     28 00 90 FD | 	jmp	#LR__4555
2c73c                 | LR__4554
2c73c     04 4E 05 F1 | 	add	fp, #4
2c740     A7 18 02 FB | 	rdlong	arg04, fp
2c744     0C 13 02 F6 | 	mov	arg01, arg04
2c748     04 4E 85 F1 | 	sub	fp, #4
2c74c     18 18 06 F1 | 	add	arg04, #24
2c750     0C 15 02 FB | 	rdlong	arg02, arg04
2c754     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2c758     1C 4E 05 F1 | 	add	fp, #28
2c75c     A7 FA 61 FC | 	wrlong	result1, fp
2c760     1C 4E 85 F1 | 	sub	fp, #28
2c764                 | LR__4555
2c764     1C 4E 05 F1 | 	add	fp, #28
2c768     A7 FA 09 FB | 	rdlong	result1, fp wz
2c76c     1C 4E 85 F1 | 	sub	fp, #28
2c770     A0 05 90 AD |  if_e	jmp	#LR__4572
2c774     1C 4E 05 F1 | 	add	fp, #28
2c778     A7 FA 01 FB | 	rdlong	result1, fp
2c77c     1C 4E 85 F1 | 	sub	fp, #28
2c780     01 FA 0D F2 | 	cmp	result1, #1 wz
2c784     1C 00 90 5D |  if_ne	jmp	#LR__4556
2c788     04 4E 05 F1 | 	add	fp, #4
2c78c     A7 FA 01 FB | 	rdlong	result1, fp
2c790     04 4E 85 F1 | 	sub	fp, #4
2c794     11 FA 05 F1 | 	add	result1, #17
2c798     FD 04 48 FC | 	wrbyte	#2, result1
2c79c     02 FA 05 F6 | 	mov	result1, #2
2c7a0     98 05 90 FD | 	jmp	#LR__4573
2c7a4                 | LR__4556
2c7a4     1C 4E 05 F1 | 	add	fp, #28
2c7a8     A7 FA 01 FB | 	rdlong	result1, fp
2c7ac     1C 4E 85 F1 | 	sub	fp, #28
2c7b0     FF FF 7F FF 
2c7b4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2c7b8     1C 00 90 5D |  if_ne	jmp	#LR__4557
2c7bc     04 4E 05 F1 | 	add	fp, #4
2c7c0     A7 FA 01 FB | 	rdlong	result1, fp
2c7c4     04 4E 85 F1 | 	sub	fp, #4
2c7c8     11 FA 05 F1 | 	add	result1, #17
2c7cc     FD 02 48 FC | 	wrbyte	#1, result1
2c7d0     01 FA 05 F6 | 	mov	result1, #1
2c7d4     64 05 90 FD | 	jmp	#LR__4573
2c7d8                 | LR__4557
2c7d8     04 4E 05 F1 | 	add	fp, #4
2c7dc     A7 FA 01 FB | 	rdlong	result1, fp
2c7e0     18 4E 05 F1 | 	add	fp, #24
2c7e4     A7 18 02 FB | 	rdlong	arg04, fp
2c7e8     18 FA 05 F1 | 	add	result1, #24
2c7ec     FD 18 62 FC | 	wrlong	arg04, result1
2c7f0     18 4E 85 F1 | 	sub	fp, #24
2c7f4     A7 FA 01 FB | 	rdlong	result1, fp
2c7f8     04 4E 85 F1 | 	sub	fp, #4
2c7fc     08 FA 05 F1 | 	add	result1, #8
2c800     FD FA 09 FB | 	rdlong	result1, result1 wz
2c804     1C 00 90 5D |  if_ne	jmp	#LR__4558
2c808     04 4E 05 F1 | 	add	fp, #4
2c80c     A7 18 02 FB | 	rdlong	arg04, fp
2c810     18 4E 05 F1 | 	add	fp, #24
2c814     A7 FA 01 FB | 	rdlong	result1, fp
2c818     1C 4E 85 F1 | 	sub	fp, #28
2c81c     08 18 06 F1 | 	add	arg04, #8
2c820     0C FB 61 FC | 	wrlong	result1, arg04
2c824                 | LR__4558
2c824                 | LR__4559
2c824     04 4E 05 F1 | 	add	fp, #4
2c828     A7 18 02 FB | 	rdlong	arg04, fp
2c82c     04 4E 85 F1 | 	sub	fp, #4
2c830     10 18 06 F1 | 	add	arg04, #16
2c834     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c838     80 18 CE F7 | 	test	arg04, #128 wz
2c83c     7C 00 90 AD |  if_e	jmp	#LR__4561
2c840     18 4E 05 F1 | 	add	fp, #24
2c844     A7 18 02 FB | 	rdlong	arg04, fp
2c848     01 18 06 F1 | 	add	arg04, #1
2c84c     0C 13 C2 FA | 	rdbyte	arg01, arg04
2c850     14 4E 85 F1 | 	sub	fp, #20
2c854     A7 18 02 FB | 	rdlong	arg04, fp
2c858     0C 15 02 F6 | 	mov	arg02, arg04
2c85c     28 14 06 F1 | 	add	arg02, #40
2c860     04 4E 85 F1 | 	sub	fp, #4
2c864     1C 18 06 F1 | 	add	arg04, #28
2c868     0C 17 02 FB | 	rdlong	arg03, arg04
2c86c     01 18 06 F6 | 	mov	arg04, #1
2c870     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2c874     00 FA 0D F2 | 	cmp	result1, #0 wz
2c878     1C 00 90 AD |  if_e	jmp	#LR__4560
2c87c     04 4E 05 F1 | 	add	fp, #4
2c880     A7 FA 01 FB | 	rdlong	result1, fp
2c884     04 4E 85 F1 | 	sub	fp, #4
2c888     11 FA 05 F1 | 	add	result1, #17
2c88c     FD 02 48 FC | 	wrbyte	#1, result1
2c890     01 FA 05 F6 | 	mov	result1, #1
2c894     A4 04 90 FD | 	jmp	#LR__4573
2c898                 | LR__4560
2c898     04 4E 05 F1 | 	add	fp, #4
2c89c     A7 18 02 FB | 	rdlong	arg04, fp
2c8a0     0C FB 01 F6 | 	mov	result1, arg04
2c8a4     04 4E 85 F1 | 	sub	fp, #4
2c8a8     10 18 06 F1 | 	add	arg04, #16
2c8ac     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c8b0     7F 18 06 F5 | 	and	arg04, #127
2c8b4     10 FA 05 F1 | 	add	result1, #16
2c8b8     FD 18 42 FC | 	wrbyte	arg04, result1
2c8bc                 | LR__4561
2c8bc     18 4E 05 F1 | 	add	fp, #24
2c8c0     A7 12 02 FB | 	rdlong	arg01, fp
2c8c4     14 4E 85 F1 | 	sub	fp, #20
2c8c8     A7 14 02 FB | 	rdlong	arg02, fp
2c8cc     04 4E 85 F1 | 	sub	fp, #4
2c8d0     18 14 06 F1 | 	add	arg02, #24
2c8d4     0A 15 02 FB | 	rdlong	arg02, arg02
2c8d8     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
2c8dc     20 4E 05 F1 | 	add	fp, #32
2c8e0     A7 FA 61 FC | 	wrlong	result1, fp
2c8e4     20 4E 85 F1 | 	sub	fp, #32
2c8e8     00 FA 0D F2 | 	cmp	result1, #0 wz
2c8ec     1C 00 90 5D |  if_ne	jmp	#LR__4562
2c8f0     04 4E 05 F1 | 	add	fp, #4
2c8f4     A7 FA 01 FB | 	rdlong	result1, fp
2c8f8     04 4E 85 F1 | 	sub	fp, #4
2c8fc     11 FA 05 F1 | 	add	result1, #17
2c900     FD 04 48 FC | 	wrbyte	#2, result1
2c904     02 FA 05 F6 | 	mov	result1, #2
2c908     30 04 90 FD | 	jmp	#LR__4573
2c90c                 | LR__4562
2c90c     20 4E 05 F1 | 	add	fp, #32
2c910     A7 FA 01 FB | 	rdlong	result1, fp
2c914     0C 4E 05 F1 | 	add	fp, #12
2c918     A7 1E 02 FB | 	rdlong	local01, fp
2c91c     0F FB 01 F1 | 	add	result1, local01
2c920     0C 4E 85 F1 | 	sub	fp, #12
2c924     A7 FA 61 FC | 	wrlong	result1, fp
2c928     14 4E 85 F1 | 	sub	fp, #20
2c92c     A7 FA 01 FB | 	rdlong	result1, fp
2c930     09 FA 45 F0 | 	shr	result1, #9
2c934     1C 4E 05 F1 | 	add	fp, #28
2c938     A7 FA 61 FC | 	wrlong	result1, fp
2c93c     28 4E 85 F1 | 	sub	fp, #40
2c940     01 FA 15 F2 | 	cmp	result1, #1 wc
2c944     60 01 90 CD |  if_b	jmp	#LR__4566
2c948     2C 4E 05 F1 | 	add	fp, #44
2c94c     A7 FA 01 FB | 	rdlong	result1, fp
2c950     04 4E 85 F1 | 	sub	fp, #4
2c954     A7 18 02 FB | 	rdlong	arg04, fp
2c958     0C FB 01 F1 | 	add	result1, arg04
2c95c     10 4E 85 F1 | 	sub	fp, #16
2c960     A7 18 02 FB | 	rdlong	arg04, fp
2c964     18 4E 85 F1 | 	sub	fp, #24
2c968     0A 18 06 F1 | 	add	arg04, #10
2c96c     0C 19 E2 FA | 	rdword	arg04, arg04
2c970     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2c974     28 00 90 ED |  if_be	jmp	#LR__4563
2c978     18 4E 05 F1 | 	add	fp, #24
2c97c     A7 FA 01 FB | 	rdlong	result1, fp
2c980     0A FA 05 F1 | 	add	result1, #10
2c984     FD FA E1 FA | 	rdword	result1, result1
2c988     14 4E 05 F1 | 	add	fp, #20
2c98c     A7 18 02 FB | 	rdlong	arg04, fp
2c990     0C FB 81 F1 | 	sub	result1, arg04
2c994     04 4E 85 F1 | 	sub	fp, #4
2c998     A7 FA 61 FC | 	wrlong	result1, fp
2c99c     28 4E 85 F1 | 	sub	fp, #40
2c9a0                 | LR__4563
2c9a0     18 4E 05 F1 | 	add	fp, #24
2c9a4     A7 18 02 FB | 	rdlong	arg04, fp
2c9a8     01 18 06 F1 | 	add	arg04, #1
2c9ac     0C 13 C2 FA | 	rdbyte	arg01, arg04
2c9b0     18 4E 05 F1 | 	add	fp, #24
2c9b4     A7 14 02 FB | 	rdlong	arg02, fp
2c9b8     10 4E 85 F1 | 	sub	fp, #16
2c9bc     A7 16 02 FB | 	rdlong	arg03, fp
2c9c0     08 4E 05 F1 | 	add	fp, #8
2c9c4     A7 18 02 FB | 	rdlong	arg04, fp
2c9c8     28 4E 85 F1 | 	sub	fp, #40
2c9cc     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
2c9d0     00 FA 0D F2 | 	cmp	result1, #0 wz
2c9d4     1C 00 90 AD |  if_e	jmp	#LR__4564
2c9d8     04 4E 05 F1 | 	add	fp, #4
2c9dc     A7 1E 02 FB | 	rdlong	local01, fp
2c9e0     04 4E 85 F1 | 	sub	fp, #4
2c9e4     11 1E 06 F1 | 	add	local01, #17
2c9e8     0F 03 48 FC | 	wrbyte	#1, local01
2c9ec     01 FA 05 F6 | 	mov	result1, #1
2c9f0     48 03 90 FD | 	jmp	#LR__4573
2c9f4                 | LR__4564
2c9f4     04 4E 05 F1 | 	add	fp, #4
2c9f8     A7 FA 01 FB | 	rdlong	result1, fp
2c9fc     1C FA 05 F1 | 	add	result1, #28
2ca00     FD FA 01 FB | 	rdlong	result1, result1
2ca04     1C 4E 05 F1 | 	add	fp, #28
2ca08     A7 20 02 FB | 	rdlong	local02, fp
2ca0c     10 FB 81 F1 | 	sub	result1, local02
2ca10     08 4E 05 F1 | 	add	fp, #8
2ca14     A7 18 02 FB | 	rdlong	arg04, fp
2ca18     28 4E 85 F1 | 	sub	fp, #40
2ca1c     0C FB 11 F2 | 	cmp	result1, arg04 wc
2ca20     68 00 90 3D |  if_ae	jmp	#LR__4565
2ca24     04 4E 05 F1 | 	add	fp, #4
2ca28     A7 12 02 FB | 	rdlong	arg01, fp
2ca2c     28 12 06 F1 | 	add	arg01, #40
2ca30     2C 4E 05 F1 | 	add	fp, #44
2ca34     A7 14 02 FB | 	rdlong	arg02, fp
2ca38     2C 4E 85 F1 | 	sub	fp, #44
2ca3c     A7 FA 01 FB | 	rdlong	result1, fp
2ca40     1C FA 05 F1 | 	add	result1, #28
2ca44     FD 22 02 FB | 	rdlong	local03, result1
2ca48     1C 4E 05 F1 | 	add	fp, #28
2ca4c     A7 18 02 FB | 	rdlong	arg04, fp
2ca50     20 4E 85 F1 | 	sub	fp, #32
2ca54     0C 23 82 F1 | 	sub	local03, arg04
2ca58     09 22 66 F0 | 	shl	local03, #9
2ca5c     11 15 02 F1 | 	add	arg02, local03
2ca60     09 16 C6 F9 | 	decod	arg03, #9
2ca64     D4 3E BF FD | 	call	#__system____builtin_memmove
2ca68     04 4E 05 F1 | 	add	fp, #4
2ca6c     A7 18 02 FB | 	rdlong	arg04, fp
2ca70     0C FB 01 F6 | 	mov	result1, arg04
2ca74     04 4E 85 F1 | 	sub	fp, #4
2ca78     10 18 06 F1 | 	add	arg04, #16
2ca7c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ca80     7F 18 06 F5 | 	and	arg04, #127
2ca84     10 FA 05 F1 | 	add	result1, #16
2ca88     FD 18 42 FC | 	wrbyte	arg04, result1
2ca8c                 | LR__4565
2ca8c     28 4E 05 F1 | 	add	fp, #40
2ca90     A7 FA 01 FB | 	rdlong	result1, fp
2ca94     09 FA 65 F0 | 	shl	result1, #9
2ca98     04 4E 85 F1 | 	sub	fp, #4
2ca9c     A7 FA 61 FC | 	wrlong	result1, fp
2caa0     24 4E 85 F1 | 	sub	fp, #36
2caa4                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2caa4                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2caa4                 | ' 				}
2caa4                 | ' 
2caa4                 | ' 
2caa4                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2caa4                 | ' 				continue;
2caa4     74 01 90 FD | 	jmp	#LR__4569
2caa8                 | LR__4566
2caa8     04 4E 05 F1 | 	add	fp, #4
2caac     A7 20 02 FB | 	rdlong	local02, fp
2cab0     1C 20 06 F1 | 	add	local02, #28
2cab4     10 FB 01 FB | 	rdlong	result1, local02
2cab8     1C 4E 05 F1 | 	add	fp, #28
2cabc     A7 20 02 FB | 	rdlong	local02, fp
2cac0     20 4E 85 F1 | 	sub	fp, #32
2cac4     10 FB 09 F2 | 	cmp	result1, local02 wz
2cac8     90 00 90 AD |  if_e	jmp	#LR__4567
2cacc     04 4E 05 F1 | 	add	fp, #4
2cad0     A7 FA 01 FB | 	rdlong	result1, fp
2cad4     FD 22 02 F6 | 	mov	local03, result1
2cad8     04 4E 85 F1 | 	sub	fp, #4
2cadc     14 22 06 F1 | 	add	local03, #20
2cae0     11 23 02 FB | 	rdlong	local03, local03
2cae4     0C FA 05 F1 | 	add	result1, #12
2cae8     FD 24 02 FB | 	rdlong	local04, result1
2caec     12 27 02 F6 | 	mov	local05, local04
2caf0     13 23 12 F2 | 	cmp	local03, local05 wc
2caf4     64 00 90 3D |  if_ae	jmp	#LR__4567
2caf8     18 4E 05 F1 | 	add	fp, #24
2cafc     A7 18 02 FB | 	rdlong	arg04, fp
2cb00     01 18 06 F1 | 	add	arg04, #1
2cb04     0C 13 C2 FA | 	rdbyte	arg01, arg04
2cb08     14 4E 85 F1 | 	sub	fp, #20
2cb0c     A7 28 02 FB | 	rdlong	local06, fp
2cb10     28 28 06 F1 | 	add	local06, #40
2cb14     14 2B 02 F6 | 	mov	local07, local06
2cb18     1C 4E 05 F1 | 	add	fp, #28
2cb1c     A7 2C 02 FB | 	rdlong	local08, fp
2cb20     20 4E 85 F1 | 	sub	fp, #32
2cb24     01 2E 06 F6 | 	mov	local09, #1
2cb28     15 15 02 F6 | 	mov	arg02, local07
2cb2c     16 17 02 F6 | 	mov	arg03, local08
2cb30     01 18 06 F6 | 	mov	arg04, #1
2cb34     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
2cb38     FD 30 0A F6 | 	mov	local10, result1 wz
2cb3c     1C 00 90 AD |  if_e	jmp	#LR__4567
2cb40     04 4E 05 F1 | 	add	fp, #4
2cb44     A7 30 02 FB | 	rdlong	local10, fp
2cb48     04 4E 85 F1 | 	sub	fp, #4
2cb4c     11 30 06 F1 | 	add	local10, #17
2cb50     18 03 48 FC | 	wrbyte	#1, local10
2cb54                 | ' 				fp->fptr < fp->obj.objsize &&
2cb54                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2cb54                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2cb54     01 FA 05 F6 | 	mov	result1, #1
2cb58     E0 01 90 FD | 	jmp	#LR__4573
2cb5c                 | LR__4567
2cb5c     04 4E 05 F1 | 	add	fp, #4
2cb60     A7 18 02 FB | 	rdlong	arg04, fp
2cb64     1C 4E 05 F1 | 	add	fp, #28
2cb68     A7 FA 01 FB | 	rdlong	result1, fp
2cb6c     20 4E 85 F1 | 	sub	fp, #32
2cb70     1C 18 06 F1 | 	add	arg04, #28
2cb74     0C FB 61 FC | 	wrlong	result1, arg04
2cb78                 | LR__4568
2cb78     04 4E 05 F1 | 	add	fp, #4
2cb7c     A7 FA 01 FB | 	rdlong	result1, fp
2cb80     14 FA 05 F1 | 	add	result1, #20
2cb84     FD FA 01 FB | 	rdlong	result1, result1
2cb88     FF FB 05 F5 | 	and	result1, #511
2cb8c     09 32 C6 F9 | 	decod	local11, #9
2cb90     FD 32 82 F1 | 	sub	local11, result1
2cb94     20 4E 05 F1 | 	add	fp, #32
2cb98     A7 32 62 FC | 	wrlong	local11, fp
2cb9c     18 4E 85 F1 | 	sub	fp, #24
2cba0     A7 FA 01 FB | 	rdlong	result1, fp
2cba4     0C 4E 85 F1 | 	sub	fp, #12
2cba8     FD 32 1A F2 | 	cmp	local11, result1 wcz
2cbac     0C 4E 05 11 |  if_a	add	fp, #12
2cbb0     A7 32 02 1B |  if_a	rdlong	local11, fp
2cbb4     18 4E 05 11 |  if_a	add	fp, #24
2cbb8     A7 32 62 1C |  if_a	wrlong	local11, fp
2cbbc     24 4E 85 11 |  if_a	sub	fp, #36
2cbc0     04 4E 05 F1 | 	add	fp, #4
2cbc4     A7 32 02 FB | 	rdlong	local11, fp
2cbc8     19 13 02 F6 | 	mov	arg01, local11
2cbcc     28 12 06 F1 | 	add	arg01, #40
2cbd0     14 32 06 F1 | 	add	local11, #20
2cbd4     19 33 02 FB | 	rdlong	local11, local11
2cbd8     FF 33 06 F5 | 	and	local11, #511
2cbdc     19 13 02 F1 | 	add	arg01, local11
2cbe0     2C 4E 05 F1 | 	add	fp, #44
2cbe4     A7 14 02 FB | 	rdlong	arg02, fp
2cbe8     0C 4E 85 F1 | 	sub	fp, #12
2cbec     A7 16 02 FB | 	rdlong	arg03, fp
2cbf0     24 4E 85 F1 | 	sub	fp, #36
2cbf4     44 3D BF FD | 	call	#__system____builtin_memmove
2cbf8     04 4E 05 F1 | 	add	fp, #4
2cbfc     A7 FA 01 FB | 	rdlong	result1, fp
2cc00     FD 32 02 F6 | 	mov	local11, result1
2cc04     04 4E 85 F1 | 	sub	fp, #4
2cc08     10 FA 05 F1 | 	add	result1, #16
2cc0c     FD FA C1 FA | 	rdbyte	result1, result1
2cc10     80 FA 45 F5 | 	or	result1, #128
2cc14     10 32 06 F1 | 	add	local11, #16
2cc18     19 FB 41 FC | 	wrbyte	result1, local11
2cc1c                 | LR__4569
2cc1c     0C 4E 05 F1 | 	add	fp, #12
2cc20     A7 32 02 FB | 	rdlong	local11, fp
2cc24     18 4E 05 F1 | 	add	fp, #24
2cc28     A7 FA 01 FB | 	rdlong	result1, fp
2cc2c     FD 32 82 F1 | 	sub	local11, result1
2cc30     18 4E 85 F1 | 	sub	fp, #24
2cc34     A7 32 62 FC | 	wrlong	local11, fp
2cc38     04 4E 05 F1 | 	add	fp, #4
2cc3c     A7 34 02 FB | 	rdlong	local12, fp
2cc40     1A 33 02 FB | 	rdlong	local11, local12
2cc44     14 4E 05 F1 | 	add	fp, #20
2cc48     A7 36 02 FB | 	rdlong	local13, fp
2cc4c     1B 33 02 F1 | 	add	local11, local13
2cc50     1A 33 62 FC | 	wrlong	local11, local12
2cc54     0C 4E 05 F1 | 	add	fp, #12
2cc58     A7 32 02 FB | 	rdlong	local11, fp
2cc5c     0C 4E 85 F1 | 	sub	fp, #12
2cc60     A7 38 02 FB | 	rdlong	local14, fp
2cc64     1C 33 02 F1 | 	add	local11, local14
2cc68     0C 4E 05 F1 | 	add	fp, #12
2cc6c     A7 32 62 FC | 	wrlong	local11, fp
2cc70     2C 4E 85 F1 | 	sub	fp, #44
2cc74     A7 3A 02 FB | 	rdlong	local15, fp
2cc78     1D 33 02 F6 | 	mov	local11, local15
2cc7c     14 3A 06 F1 | 	add	local15, #20
2cc80     1D 3B 02 FB | 	rdlong	local15, local15
2cc84     20 4E 05 F1 | 	add	fp, #32
2cc88     A7 3C 02 FB | 	rdlong	local16, fp
2cc8c     1E 3B 02 F1 | 	add	local15, local16
2cc90     14 32 06 F1 | 	add	local11, #20
2cc94     19 3B 62 FC | 	wrlong	local15, local11
2cc98     20 4E 85 F1 | 	sub	fp, #32
2cc9c     A7 3E 02 FB | 	rdlong	local17, fp
2cca0     1F 33 02 F6 | 	mov	local11, local17
2cca4     1F 41 02 F6 | 	mov	local18, local17
2cca8     04 4E 85 F1 | 	sub	fp, #4
2ccac     14 3E 06 F1 | 	add	local17, #20
2ccb0     1F 43 02 FB | 	rdlong	local19, local17
2ccb4     0C 40 06 F1 | 	add	local18, #12
2ccb8     20 45 02 FB | 	rdlong	local20, local18
2ccbc     22 43 1A F2 | 	cmp	local19, local20 wcz
2ccc0     24 00 90 ED |  if_be	jmp	#LR__4570
2ccc4     04 4E 05 F1 | 	add	fp, #4
2ccc8     A7 26 02 FB | 	rdlong	local05, fp
2cccc     04 4E 85 F1 | 	sub	fp, #4
2ccd0     13 23 02 F6 | 	mov	local03, local05
2ccd4     14 22 06 F1 | 	add	local03, #20
2ccd8     11 25 02 FB | 	rdlong	local04, local03
2ccdc     14 22 86 F1 | 	sub	local03, #20
2cce0     12 47 02 F6 | 	mov	local21, local04
2cce4     20 00 90 FD | 	jmp	#LR__4571
2cce8                 | LR__4570
2cce8     04 4E 05 F1 | 	add	fp, #4
2ccec     A7 2A 02 FB | 	rdlong	local07, fp
2ccf0     04 4E 85 F1 | 	sub	fp, #4
2ccf4     15 31 02 F6 | 	mov	local10, local07
2ccf8     0C 30 06 F1 | 	add	local10, #12
2ccfc     18 2D 02 FB | 	rdlong	local08, local10
2cd00     0C 30 86 F1 | 	sub	local10, #12
2cd04     16 47 02 F6 | 	mov	local21, local08
2cd08                 | LR__4571
2cd08     0C 32 06 F1 | 	add	local11, #12
2cd0c     19 47 62 FC | 	wrlong	local21, local11
2cd10     5C F9 9F FD | 	jmp	#LR__4553
2cd14                 | LR__4572
2cd14     04 4E 05 F1 | 	add	fp, #4
2cd18     A7 34 02 FB | 	rdlong	local12, fp
2cd1c     1A 1F 02 F6 | 	mov	local01, local12
2cd20     04 4E 85 F1 | 	sub	fp, #4
2cd24     10 34 06 F1 | 	add	local12, #16
2cd28     1A 33 C2 FA | 	rdbyte	local11, local12
2cd2c     40 32 46 F5 | 	or	local11, #64
2cd30     10 1E 06 F1 | 	add	local01, #16
2cd34     0F 33 42 FC | 	wrbyte	local11, local01
2cd38                 | ' 
2cd38                 | ' 
2cd38                 | ' 
2cd38                 | ' 
2cd38                 | ' 
2cd38                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
2cd38                 | ' 		fp->flag |=  0x80 ;
2cd38                 | ' 
2cd38                 | ' 	}
2cd38                 | ' 
2cd38                 | ' 	fp->flag |=  0x40 ;
2cd38                 | ' 
2cd38                 | ' 	return FR_OK ;
2cd38     00 FA 05 F6 | 	mov	result1, #0
2cd3c                 | LR__4573
2cd3c     A7 F0 03 F6 | 	mov	ptra, fp
2cd40     B2 00 A0 FD | 	call	#popregs_
2cd44                 | _fatfs_cc_f_write_ret
2cd44     2D 00 64 FD | 	ret
2cd48                 | 
2cd48                 | _fatfs_cc_f_sync
2cd48     00 4A 05 F6 | 	mov	COUNT_, #0
2cd4c     A8 00 A0 FD | 	call	#pushregs_
2cd50     18 F0 07 F1 | 	add	ptra, #24
2cd54     04 4E 05 F1 | 	add	fp, #4
2cd58     A7 12 62 FC | 	wrlong	arg01, fp
2cd5c     08 4E 05 F1 | 	add	fp, #8
2cd60     A7 14 02 F6 | 	mov	arg02, fp
2cd64     0C 4E 85 F1 | 	sub	fp, #12
2cd68     D0 E8 BF FD | 	call	#_fatfs_cc_validate
2cd6c     08 4E 05 F1 | 	add	fp, #8
2cd70     A7 FA 61 FC | 	wrlong	result1, fp
2cd74     08 4E 85 F1 | 	sub	fp, #8
2cd78     00 FA 0D F2 | 	cmp	result1, #0 wz
2cd7c     C0 01 90 5D |  if_ne	jmp	#LR__4583
2cd80     04 4E 05 F1 | 	add	fp, #4
2cd84     A7 18 02 FB | 	rdlong	arg04, fp
2cd88     04 4E 85 F1 | 	sub	fp, #4
2cd8c     10 18 06 F1 | 	add	arg04, #16
2cd90     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cd94     40 18 CE F7 | 	test	arg04, #64 wz
2cd98     A4 01 90 AD |  if_e	jmp	#LR__4582
2cd9c     04 4E 05 F1 | 	add	fp, #4
2cda0     A7 18 02 FB | 	rdlong	arg04, fp
2cda4     04 4E 85 F1 | 	sub	fp, #4
2cda8     10 18 06 F1 | 	add	arg04, #16
2cdac     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cdb0     80 18 CE F7 | 	test	arg04, #128 wz
2cdb4     64 00 90 AD |  if_e	jmp	#LR__4580
2cdb8     0C 4E 05 F1 | 	add	fp, #12
2cdbc     A7 18 02 FB | 	rdlong	arg04, fp
2cdc0     01 18 06 F1 | 	add	arg04, #1
2cdc4     0C 13 C2 FA | 	rdbyte	arg01, arg04
2cdc8     08 4E 85 F1 | 	sub	fp, #8
2cdcc     A7 18 02 FB | 	rdlong	arg04, fp
2cdd0     0C 15 02 F6 | 	mov	arg02, arg04
2cdd4     28 14 06 F1 | 	add	arg02, #40
2cdd8     04 4E 85 F1 | 	sub	fp, #4
2cddc     1C 18 06 F1 | 	add	arg04, #28
2cde0     0C 17 02 FB | 	rdlong	arg03, arg04
2cde4     01 18 06 F6 | 	mov	arg04, #1
2cde8     0C AE BF FD | 	call	#_fatfs_cc_disk_write
2cdec     00 FA 0D F2 | 	cmp	result1, #0 wz
2cdf0     01 FA 05 56 |  if_ne	mov	result1, #1
2cdf4     54 01 90 5D |  if_ne	jmp	#LR__4584
2cdf8     04 4E 05 F1 | 	add	fp, #4
2cdfc     A7 18 02 FB | 	rdlong	arg04, fp
2ce00     0C 17 02 F6 | 	mov	arg03, arg04
2ce04     04 4E 85 F1 | 	sub	fp, #4
2ce08     10 18 06 F1 | 	add	arg04, #16
2ce0c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ce10     7F 18 06 F5 | 	and	arg04, #127
2ce14     10 16 06 F1 | 	add	arg03, #16
2ce18     0B 19 42 FC | 	wrbyte	arg04, arg03
2ce1c                 | LR__4580
2ce1c     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2ce20     10 4E 05 F1 | 	add	fp, #16
2ce24     A7 FA 61 FC | 	wrlong	result1, fp
2ce28     04 4E 85 F1 | 	sub	fp, #4
2ce2c     A7 12 02 FB | 	rdlong	arg01, fp
2ce30     08 4E 85 F1 | 	sub	fp, #8
2ce34     A7 18 02 FB | 	rdlong	arg04, fp
2ce38     04 4E 85 F1 | 	sub	fp, #4
2ce3c     20 18 06 F1 | 	add	arg04, #32
2ce40     0C 15 02 FB | 	rdlong	arg02, arg04
2ce44     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
2ce48     08 4E 05 F1 | 	add	fp, #8
2ce4c     A7 FA 61 FC | 	wrlong	result1, fp
2ce50     08 4E 85 F1 | 	sub	fp, #8
2ce54     00 FA 0D F2 | 	cmp	result1, #0 wz
2ce58     E4 00 90 5D |  if_ne	jmp	#LR__4581
2ce5c     04 4E 05 F1 | 	add	fp, #4
2ce60     A7 18 02 FB | 	rdlong	arg04, fp
2ce64     24 18 06 F1 | 	add	arg04, #36
2ce68     0C 19 02 FB | 	rdlong	arg04, arg04
2ce6c     10 4E 05 F1 | 	add	fp, #16
2ce70     A7 18 62 FC | 	wrlong	arg04, fp
2ce74     0C 17 02 F6 | 	mov	arg03, arg04
2ce78     0B 16 06 F1 | 	add	arg03, #11
2ce7c     0B 17 C2 FA | 	rdbyte	arg03, arg03
2ce80     20 16 46 F5 | 	or	arg03, #32
2ce84     0B 18 06 F1 | 	add	arg04, #11
2ce88     0C 17 42 FC | 	wrbyte	arg03, arg04
2ce8c     10 4E 85 F1 | 	sub	fp, #16
2ce90     A7 18 02 FB | 	rdlong	arg04, fp
2ce94     0C 13 02 FB | 	rdlong	arg01, arg04
2ce98     10 4E 05 F1 | 	add	fp, #16
2ce9c     A7 14 02 FB | 	rdlong	arg02, fp
2cea0     14 4E 85 F1 | 	sub	fp, #20
2cea4     08 18 06 F1 | 	add	arg04, #8
2cea8     0C 17 02 FB | 	rdlong	arg03, arg04
2ceac     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
2ceb0     14 4E 05 F1 | 	add	fp, #20
2ceb4     A7 12 02 FB | 	rdlong	arg01, fp
2ceb8     1C 12 06 F1 | 	add	arg01, #28
2cebc     10 4E 85 F1 | 	sub	fp, #16
2cec0     A7 18 02 FB | 	rdlong	arg04, fp
2cec4     0C 18 06 F1 | 	add	arg04, #12
2cec8     0C 15 02 FB | 	rdlong	arg02, arg04
2cecc     09 15 62 FC | 	wrlong	arg02, arg01
2ced0     10 4E 05 F1 | 	add	fp, #16
2ced4     A7 12 02 FB | 	rdlong	arg01, fp
2ced8     16 12 06 F1 | 	add	arg01, #22
2cedc     04 4E 85 F1 | 	sub	fp, #4
2cee0     A7 14 02 FB | 	rdlong	arg02, fp
2cee4     09 15 62 FC | 	wrlong	arg02, arg01
2cee8     04 4E 05 F1 | 	add	fp, #4
2ceec     A7 12 02 FB | 	rdlong	arg01, fp
2cef0     12 12 06 F1 | 	add	arg01, #18
2cef4     09 01 58 FC | 	wrword	#0, arg01
2cef8     08 4E 85 F1 | 	sub	fp, #8
2cefc     A7 18 02 FB | 	rdlong	arg04, fp
2cf00     03 18 06 F1 | 	add	arg04, #3
2cf04     0C 03 48 FC | 	wrbyte	#1, arg04
2cf08     A7 12 02 FB | 	rdlong	arg01, fp
2cf0c     0C 4E 85 F1 | 	sub	fp, #12
2cf10     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
2cf14     08 4E 05 F1 | 	add	fp, #8
2cf18     A7 FA 61 FC | 	wrlong	result1, fp
2cf1c     04 4E 85 F1 | 	sub	fp, #4
2cf20     A7 18 02 FB | 	rdlong	arg04, fp
2cf24     0C 17 02 F6 | 	mov	arg03, arg04
2cf28     04 4E 85 F1 | 	sub	fp, #4
2cf2c     10 18 06 F1 | 	add	arg04, #16
2cf30     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cf34     BF 18 06 F5 | 	and	arg04, #191
2cf38     10 16 06 F1 | 	add	arg03, #16
2cf3c     0B 19 42 FC | 	wrbyte	arg04, arg03
2cf40                 | LR__4581
2cf40                 | LR__4582
2cf40                 | LR__4583
2cf40                 | ' 					dir = fp->dir_ptr;
2cf40                 | ' 					dir[ 11 ] |=  0x20 ;
2cf40                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2cf40                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2cf40                 | ' 					st_dword(dir +  22 , tm);
2cf40                 | ' 					st_word(dir +  18 , 0);
2cf40                 | ' 					fs->wflag = 1;
2cf40                 | ' 					res = sync_fs(fs);
2cf40                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2cf40                 | ' 				}
2cf40                 | ' 			}
2cf40                 | ' 		}
2cf40                 | ' 	}
2cf40                 | ' 
2cf40                 | ' 	return res ;
2cf40     08 4E 05 F1 | 	add	fp, #8
2cf44     A7 FA 01 FB | 	rdlong	result1, fp
2cf48     08 4E 85 F1 | 	sub	fp, #8
2cf4c                 | LR__4584
2cf4c     A7 F0 03 F6 | 	mov	ptra, fp
2cf50     B2 00 A0 FD | 	call	#popregs_
2cf54                 | _fatfs_cc_f_sync_ret
2cf54     2D 00 64 FD | 	ret
2cf58                 | 
2cf58                 | _fatfs_cc_f_close
2cf58     01 4A 05 F6 | 	mov	COUNT_, #1
2cf5c     A8 00 A0 FD | 	call	#pushregs_
2cf60     10 F0 07 F1 | 	add	ptra, #16
2cf64     04 4E 05 F1 | 	add	fp, #4
2cf68     A7 12 62 FC | 	wrlong	arg01, fp
2cf6c     04 4E 85 F1 | 	sub	fp, #4
2cf70     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2cf74     08 4E 05 F1 | 	add	fp, #8
2cf78     A7 FA 61 FC | 	wrlong	result1, fp
2cf7c     08 4E 85 F1 | 	sub	fp, #8
2cf80     00 FA 0D F2 | 	cmp	result1, #0 wz
2cf84     38 00 90 5D |  if_ne	jmp	#LR__4590
2cf88     04 4E 05 F1 | 	add	fp, #4
2cf8c     A7 12 02 FB | 	rdlong	arg01, fp
2cf90     08 4E 05 F1 | 	add	fp, #8
2cf94     A7 14 02 F6 | 	mov	arg02, fp
2cf98     0C 4E 85 F1 | 	sub	fp, #12
2cf9c     9C E6 BF FD | 	call	#_fatfs_cc_validate
2cfa0     08 4E 05 F1 | 	add	fp, #8
2cfa4     A7 FA 61 FC | 	wrlong	result1, fp
2cfa8     08 4E 85 F1 | 	sub	fp, #8
2cfac     00 FA 0D F2 | 	cmp	result1, #0 wz
2cfb0     04 4E 05 A1 |  if_e	add	fp, #4
2cfb4     A7 1E 02 AB |  if_e	rdlong	local01, fp
2cfb8     04 4E 85 A1 |  if_e	sub	fp, #4
2cfbc     0F 01 68 AC |  if_e	wrlong	#0, local01
2cfc0                 | LR__4590
2cfc0                 | ' 
2cfc0                 | ' 
2cfc0                 | ' 
2cfc0                 | ' 
2cfc0                 | ' 			fp->obj.fs = 0;
2cfc0                 | ' #line 4192 "ff.c"
2cfc0                 | ' 		}
2cfc0                 | ' 	}
2cfc0                 | ' 	return res;
2cfc0     08 4E 05 F1 | 	add	fp, #8
2cfc4     A7 FA 01 FB | 	rdlong	result1, fp
2cfc8     08 4E 85 F1 | 	sub	fp, #8
2cfcc     A7 F0 03 F6 | 	mov	ptra, fp
2cfd0     B2 00 A0 FD | 	call	#popregs_
2cfd4                 | _fatfs_cc_f_close_ret
2cfd4     2D 00 64 FD | 	ret
2cfd8                 | 
2cfd8                 | _fatfs_cc_f_lseek
2cfd8     00 4A 05 F6 | 	mov	COUNT_, #0
2cfdc     A8 00 A0 FD | 	call	#pushregs_
2cfe0     24 F0 07 F1 | 	add	ptra, #36
2cfe4     04 4E 05 F1 | 	add	fp, #4
2cfe8     A7 12 62 FC | 	wrlong	arg01, fp
2cfec     04 4E 05 F1 | 	add	fp, #4
2cff0     A7 14 62 FC | 	wrlong	arg02, fp
2cff4     04 4E 85 F1 | 	sub	fp, #4
2cff8     A7 12 02 FB | 	rdlong	arg01, fp
2cffc     0C 4E 05 F1 | 	add	fp, #12
2d000     A7 14 02 F6 | 	mov	arg02, fp
2d004     10 4E 85 F1 | 	sub	fp, #16
2d008     30 E6 BF FD | 	call	#_fatfs_cc_validate
2d00c     0C 4E 05 F1 | 	add	fp, #12
2d010     A7 FA 61 FC | 	wrlong	result1, fp
2d014     0C 4E 85 F1 | 	sub	fp, #12
2d018     00 FA 0D F2 | 	cmp	result1, #0 wz
2d01c     1C 00 90 5D |  if_ne	jmp	#LR__4600
2d020     04 4E 05 F1 | 	add	fp, #4
2d024     A7 18 02 FB | 	rdlong	arg04, fp
2d028     11 18 06 F1 | 	add	arg04, #17
2d02c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d030     08 4E 05 F1 | 	add	fp, #8
2d034     A7 18 62 FC | 	wrlong	arg04, fp
2d038     0C 4E 85 F1 | 	sub	fp, #12
2d03c                 | LR__4600
2d03c     0C 4E 05 F1 | 	add	fp, #12
2d040     A7 18 0A FB | 	rdlong	arg04, fp wz
2d044     0C 4E 85 F1 | 	sub	fp, #12
2d048     0C 4E 05 51 |  if_ne	add	fp, #12
2d04c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2d050     0C 4E 85 51 |  if_ne	sub	fp, #12
2d054     40 06 90 5D |  if_ne	jmp	#LR__4623
2d058     04 4E 05 F1 | 	add	fp, #4
2d05c     A7 18 02 FB | 	rdlong	arg04, fp
2d060     04 4E 05 F1 | 	add	fp, #4
2d064     A7 16 02 FB | 	rdlong	arg03, fp
2d068     08 4E 85 F1 | 	sub	fp, #8
2d06c     0C 18 06 F1 | 	add	arg04, #12
2d070     0C 19 02 FB | 	rdlong	arg04, arg04
2d074     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2d078     3C 00 90 ED |  if_be	jmp	#LR__4601
2d07c     04 4E 05 F1 | 	add	fp, #4
2d080     A7 16 02 FB | 	rdlong	arg03, fp
2d084     04 4E 85 F1 | 	sub	fp, #4
2d088     10 16 06 F1 | 	add	arg03, #16
2d08c     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d090     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2d094     02 16 CE F7 | 	test	arg03, #2 wz
2d098     1C 00 90 5D |  if_ne	jmp	#LR__4601
2d09c     04 4E 05 F1 | 	add	fp, #4
2d0a0     A7 16 02 FB | 	rdlong	arg03, fp
2d0a4     0C 16 06 F1 | 	add	arg03, #12
2d0a8     0B 17 02 FB | 	rdlong	arg03, arg03
2d0ac     04 4E 05 F1 | 	add	fp, #4
2d0b0     A7 16 62 FC | 	wrlong	arg03, fp
2d0b4     08 4E 85 F1 | 	sub	fp, #8
2d0b8                 | LR__4601
2d0b8     04 4E 05 F1 | 	add	fp, #4
2d0bc     A7 16 02 FB | 	rdlong	arg03, fp
2d0c0     14 16 06 F1 | 	add	arg03, #20
2d0c4     0B 17 02 FB | 	rdlong	arg03, arg03
2d0c8     1C 4E 05 F1 | 	add	fp, #28
2d0cc     A7 16 62 FC | 	wrlong	arg03, fp
2d0d0     1C 4E 85 F1 | 	sub	fp, #28
2d0d4     A7 16 02 FB | 	rdlong	arg03, fp
2d0d8     18 4E 05 F1 | 	add	fp, #24
2d0dc     A7 00 68 FC | 	wrlong	#0, fp
2d0e0     14 16 06 F1 | 	add	arg03, #20
2d0e4     0B 01 68 FC | 	wrlong	#0, arg03
2d0e8     14 4E 85 F1 | 	sub	fp, #20
2d0ec     A7 16 02 FB | 	rdlong	arg03, fp
2d0f0     08 4E 85 F1 | 	sub	fp, #8
2d0f4     01 16 16 F2 | 	cmp	arg03, #1 wc
2d0f8     E4 03 90 CD |  if_b	jmp	#LR__4617
2d0fc     10 4E 05 F1 | 	add	fp, #16
2d100     A7 16 02 FB | 	rdlong	arg03, fp
2d104     0A 16 06 F1 | 	add	arg03, #10
2d108     0B 19 E2 FA | 	rdword	arg04, arg03
2d10c     09 18 66 F0 | 	shl	arg04, #9
2d110     08 4E 05 F1 | 	add	fp, #8
2d114     A7 18 62 FC | 	wrlong	arg04, fp
2d118     08 4E 05 F1 | 	add	fp, #8
2d11c     A7 18 02 FB | 	rdlong	arg04, fp
2d120     20 4E 85 F1 | 	sub	fp, #32
2d124     01 18 16 F2 | 	cmp	arg04, #1 wc
2d128     AC 00 90 CD |  if_b	jmp	#LR__4602
2d12c     08 4E 05 F1 | 	add	fp, #8
2d130     A7 18 02 FB | 	rdlong	arg04, fp
2d134     01 18 86 F1 | 	sub	arg04, #1
2d138     10 4E 05 F1 | 	add	fp, #16
2d13c     A7 16 02 FB | 	rdlong	arg03, fp
2d140     0B 19 12 FD | 	qdiv	arg04, arg03
2d144     08 4E 05 F1 | 	add	fp, #8
2d148     A7 FA 01 FB | 	rdlong	result1, fp
2d14c     01 FA 85 F1 | 	sub	result1, #1
2d150     18 18 62 FD | 	getqx	arg04
2d154     0B FB 11 FD | 	qdiv	result1, arg03
2d158     20 4E 85 F1 | 	sub	fp, #32
2d15c     18 16 62 FD | 	getqx	arg03
2d160     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2d164     70 00 90 CD |  if_b	jmp	#LR__4602
2d168     04 4E 05 F1 | 	add	fp, #4
2d16c     A7 16 02 FB | 	rdlong	arg03, fp
2d170     1C 4E 05 F1 | 	add	fp, #28
2d174     A7 FA 01 FB | 	rdlong	result1, fp
2d178     01 FA 85 F1 | 	sub	result1, #1
2d17c     08 4E 85 F1 | 	sub	fp, #8
2d180     A7 18 02 FB | 	rdlong	arg04, fp
2d184     01 18 86 F1 | 	sub	arg04, #1
2d188     0C FB 21 F5 | 	andn	result1, arg04
2d18c     14 16 06 F1 | 	add	arg03, #20
2d190     0B FB 61 FC | 	wrlong	result1, arg03
2d194     10 4E 85 F1 | 	sub	fp, #16
2d198     A7 16 02 FB | 	rdlong	arg03, fp
2d19c     04 4E 85 F1 | 	sub	fp, #4
2d1a0     A7 18 02 FB | 	rdlong	arg04, fp
2d1a4     14 18 06 F1 | 	add	arg04, #20
2d1a8     0C 19 02 FB | 	rdlong	arg04, arg04
2d1ac     0C 17 82 F1 | 	sub	arg03, arg04
2d1b0     04 4E 05 F1 | 	add	fp, #4
2d1b4     A7 16 62 FC | 	wrlong	arg03, fp
2d1b8     04 4E 85 F1 | 	sub	fp, #4
2d1bc     A7 16 02 FB | 	rdlong	arg03, fp
2d1c0     18 16 06 F1 | 	add	arg03, #24
2d1c4     0B 17 02 FB | 	rdlong	arg03, arg03
2d1c8     10 4E 05 F1 | 	add	fp, #16
2d1cc     A7 16 62 FC | 	wrlong	arg03, fp
2d1d0     14 4E 85 F1 | 	sub	fp, #20
2d1d4     D0 00 90 FD | 	jmp	#LR__4606
2d1d8                 | LR__4602
2d1d8     04 4E 05 F1 | 	add	fp, #4
2d1dc     A7 16 02 FB | 	rdlong	arg03, fp
2d1e0     08 16 06 F1 | 	add	arg03, #8
2d1e4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2d1e8     10 4E 05 F1 | 	add	fp, #16
2d1ec     A7 16 62 FC | 	wrlong	arg03, fp
2d1f0     14 4E 85 F1 | 	sub	fp, #20
2d1f4     94 00 90 5D |  if_ne	jmp	#LR__4605
2d1f8     04 4E 05 F1 | 	add	fp, #4
2d1fc     A7 12 02 FB | 	rdlong	arg01, fp
2d200     04 4E 85 F1 | 	sub	fp, #4
2d204     00 14 06 F6 | 	mov	arg02, #0
2d208     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
2d20c     14 4E 05 F1 | 	add	fp, #20
2d210     A7 FA 61 FC | 	wrlong	result1, fp
2d214     14 4E 85 F1 | 	sub	fp, #20
2d218     01 FA 0D F2 | 	cmp	result1, #1 wz
2d21c     1C 00 90 5D |  if_ne	jmp	#LR__4603
2d220     04 4E 05 F1 | 	add	fp, #4
2d224     A7 16 02 FB | 	rdlong	arg03, fp
2d228     04 4E 85 F1 | 	sub	fp, #4
2d22c     11 16 06 F1 | 	add	arg03, #17
2d230     0B 05 48 FC | 	wrbyte	#2, arg03
2d234     02 FA 05 F6 | 	mov	result1, #2
2d238     5C 04 90 FD | 	jmp	#LR__4623
2d23c                 | LR__4603
2d23c     14 4E 05 F1 | 	add	fp, #20
2d240     A7 FA 01 FB | 	rdlong	result1, fp
2d244     14 4E 85 F1 | 	sub	fp, #20
2d248     FF FF 7F FF 
2d24c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2d250     1C 00 90 5D |  if_ne	jmp	#LR__4604
2d254     04 4E 05 F1 | 	add	fp, #4
2d258     A7 16 02 FB | 	rdlong	arg03, fp
2d25c     04 4E 85 F1 | 	sub	fp, #4
2d260     11 16 06 F1 | 	add	arg03, #17
2d264     0B 03 48 FC | 	wrbyte	#1, arg03
2d268     01 FA 05 F6 | 	mov	result1, #1
2d26c     28 04 90 FD | 	jmp	#LR__4623
2d270                 | LR__4604
2d270     04 4E 05 F1 | 	add	fp, #4
2d274     A7 16 02 FB | 	rdlong	arg03, fp
2d278     10 4E 05 F1 | 	add	fp, #16
2d27c     A7 18 02 FB | 	rdlong	arg04, fp
2d280     14 4E 85 F1 | 	sub	fp, #20
2d284     08 16 06 F1 | 	add	arg03, #8
2d288     0B 19 62 FC | 	wrlong	arg04, arg03
2d28c                 | LR__4605
2d28c     04 4E 05 F1 | 	add	fp, #4
2d290     A7 16 02 FB | 	rdlong	arg03, fp
2d294     10 4E 05 F1 | 	add	fp, #16
2d298     A7 18 02 FB | 	rdlong	arg04, fp
2d29c     14 4E 85 F1 | 	sub	fp, #20
2d2a0     18 16 06 F1 | 	add	arg03, #24
2d2a4     0B 19 62 FC | 	wrlong	arg04, arg03
2d2a8                 | LR__4606
2d2a8     14 4E 05 F1 | 	add	fp, #20
2d2ac     A7 16 0A FB | 	rdlong	arg03, fp wz
2d2b0     14 4E 85 F1 | 	sub	fp, #20
2d2b4     28 02 90 AD |  if_e	jmp	#LR__4616
2d2b8                 | ' 				while (ofs > bcs) {
2d2b8                 | LR__4607
2d2b8     08 4E 05 F1 | 	add	fp, #8
2d2bc     A7 18 02 FB | 	rdlong	arg04, fp
2d2c0     10 4E 05 F1 | 	add	fp, #16
2d2c4     A7 16 02 FB | 	rdlong	arg03, fp
2d2c8     18 4E 85 F1 | 	sub	fp, #24
2d2cc     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
2d2d0     68 01 90 ED |  if_be	jmp	#LR__4613
2d2d4     08 4E 05 F1 | 	add	fp, #8
2d2d8     A7 18 02 FB | 	rdlong	arg04, fp
2d2dc     10 4E 05 F1 | 	add	fp, #16
2d2e0     A7 16 02 FB | 	rdlong	arg03, fp
2d2e4     0B 19 82 F1 | 	sub	arg04, arg03
2d2e8     10 4E 85 F1 | 	sub	fp, #16
2d2ec     A7 18 62 FC | 	wrlong	arg04, fp
2d2f0     04 4E 85 F1 | 	sub	fp, #4
2d2f4     A7 18 02 FB | 	rdlong	arg04, fp
2d2f8     0C FB 01 F6 | 	mov	result1, arg04
2d2fc     14 18 06 F1 | 	add	arg04, #20
2d300     0C 19 02 FB | 	rdlong	arg04, arg04
2d304     14 4E 05 F1 | 	add	fp, #20
2d308     A7 16 02 FB | 	rdlong	arg03, fp
2d30c     0B 19 02 F1 | 	add	arg04, arg03
2d310     14 FA 05 F1 | 	add	result1, #20
2d314     FD 18 62 FC | 	wrlong	arg04, result1
2d318     14 4E 85 F1 | 	sub	fp, #20
2d31c     A7 16 02 FB | 	rdlong	arg03, fp
2d320     04 4E 85 F1 | 	sub	fp, #4
2d324     10 16 06 F1 | 	add	arg03, #16
2d328     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d32c     02 16 CE F7 | 	test	arg03, #2 wz
2d330     3C 00 90 AD |  if_e	jmp	#LR__4608
2d334     04 4E 05 F1 | 	add	fp, #4
2d338     A7 12 02 FB | 	rdlong	arg01, fp
2d33c     10 4E 05 F1 | 	add	fp, #16
2d340     A7 14 02 FB | 	rdlong	arg02, fp
2d344     14 4E 85 F1 | 	sub	fp, #20
2d348     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
2d34c     14 4E 05 F1 | 	add	fp, #20
2d350     A7 FA 61 FC | 	wrlong	result1, fp
2d354     00 FA 4D F2 | 	cmps	result1, #0 wz
2d358     14 4E 85 F1 | 	sub	fp, #20
2d35c     08 4E 05 A1 |  if_e	add	fp, #8
2d360     A7 00 68 AC |  if_e	wrlong	#0, fp
2d364     08 4E 85 A1 |  if_e	sub	fp, #8
2d368                 | ' 							ofs = 0; break;
2d368     D0 00 90 AD |  if_e	jmp	#LR__4613
2d36c     24 00 90 FD | 	jmp	#LR__4609
2d370                 | LR__4608
2d370     04 4E 05 F1 | 	add	fp, #4
2d374     A7 12 02 FB | 	rdlong	arg01, fp
2d378     10 4E 05 F1 | 	add	fp, #16
2d37c     A7 14 02 FB | 	rdlong	arg02, fp
2d380     14 4E 85 F1 | 	sub	fp, #20
2d384     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
2d388     14 4E 05 F1 | 	add	fp, #20
2d38c     A7 FA 61 FC | 	wrlong	result1, fp
2d390     14 4E 85 F1 | 	sub	fp, #20
2d394                 | LR__4609
2d394     14 4E 05 F1 | 	add	fp, #20
2d398     A7 16 02 FB | 	rdlong	arg03, fp
2d39c     14 4E 85 F1 | 	sub	fp, #20
2d3a0     FF FF 7F FF 
2d3a4     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2d3a8     1C 00 90 5D |  if_ne	jmp	#LR__4610
2d3ac     04 4E 05 F1 | 	add	fp, #4
2d3b0     A7 16 02 FB | 	rdlong	arg03, fp
2d3b4     04 4E 85 F1 | 	sub	fp, #4
2d3b8     11 16 06 F1 | 	add	arg03, #17
2d3bc     0B 03 48 FC | 	wrbyte	#1, arg03
2d3c0     01 FA 05 F6 | 	mov	result1, #1
2d3c4     D0 02 90 FD | 	jmp	#LR__4623
2d3c8                 | LR__4610
2d3c8     14 4E 05 F1 | 	add	fp, #20
2d3cc     A7 16 02 FB | 	rdlong	arg03, fp
2d3d0     14 4E 85 F1 | 	sub	fp, #20
2d3d4     02 16 16 F2 | 	cmp	arg03, #2 wc
2d3d8     24 00 90 CD |  if_b	jmp	#LR__4611
2d3dc     10 4E 05 F1 | 	add	fp, #16
2d3e0     A7 18 02 FB | 	rdlong	arg04, fp
2d3e4     04 4E 05 F1 | 	add	fp, #4
2d3e8     A7 16 02 FB | 	rdlong	arg03, fp
2d3ec     14 4E 85 F1 | 	sub	fp, #20
2d3f0     18 18 06 F1 | 	add	arg04, #24
2d3f4     0C 19 02 FB | 	rdlong	arg04, arg04
2d3f8     0C 17 12 F2 | 	cmp	arg03, arg04 wc
2d3fc     1C 00 90 CD |  if_b	jmp	#LR__4612
2d400                 | LR__4611
2d400     04 4E 05 F1 | 	add	fp, #4
2d404     A7 16 02 FB | 	rdlong	arg03, fp
2d408     04 4E 85 F1 | 	sub	fp, #4
2d40c     11 16 06 F1 | 	add	arg03, #17
2d410     0B 05 48 FC | 	wrbyte	#2, arg03
2d414     02 FA 05 F6 | 	mov	result1, #2
2d418     7C 02 90 FD | 	jmp	#LR__4623
2d41c                 | LR__4612
2d41c     04 4E 05 F1 | 	add	fp, #4
2d420     A7 18 02 FB | 	rdlong	arg04, fp
2d424     10 4E 05 F1 | 	add	fp, #16
2d428     A7 16 02 FB | 	rdlong	arg03, fp
2d42c     14 4E 85 F1 | 	sub	fp, #20
2d430     18 18 06 F1 | 	add	arg04, #24
2d434     0C 17 62 FC | 	wrlong	arg03, arg04
2d438     7C FE 9F FD | 	jmp	#LR__4607
2d43c                 | LR__4613
2d43c     04 4E 05 F1 | 	add	fp, #4
2d440     A7 16 02 FB | 	rdlong	arg03, fp
2d444     0B 13 02 F6 | 	mov	arg01, arg03
2d448     14 16 06 F1 | 	add	arg03, #20
2d44c     0B 15 02 FB | 	rdlong	arg02, arg03
2d450     04 4E 05 F1 | 	add	fp, #4
2d454     A7 16 02 FB | 	rdlong	arg03, fp
2d458     0B 15 02 F1 | 	add	arg02, arg03
2d45c     14 12 06 F1 | 	add	arg01, #20
2d460     09 15 62 FC | 	wrlong	arg02, arg01
2d464     A7 16 02 FB | 	rdlong	arg03, fp
2d468     08 4E 85 F1 | 	sub	fp, #8
2d46c     FF 17 CE F7 | 	test	arg03, #511 wz
2d470     6C 00 90 AD |  if_e	jmp	#LR__4615
2d474     10 4E 05 F1 | 	add	fp, #16
2d478     A7 12 02 FB | 	rdlong	arg01, fp
2d47c     04 4E 05 F1 | 	add	fp, #4
2d480     A7 14 02 FB | 	rdlong	arg02, fp
2d484     14 4E 85 F1 | 	sub	fp, #20
2d488     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2d48c     1C 4E 05 F1 | 	add	fp, #28
2d490     A7 FA 61 FC | 	wrlong	result1, fp
2d494     1C 4E 85 F1 | 	sub	fp, #28
2d498     00 FA 0D F2 | 	cmp	result1, #0 wz
2d49c     1C 00 90 5D |  if_ne	jmp	#LR__4614
2d4a0     04 4E 05 F1 | 	add	fp, #4
2d4a4     A7 16 02 FB | 	rdlong	arg03, fp
2d4a8     04 4E 85 F1 | 	sub	fp, #4
2d4ac     11 16 06 F1 | 	add	arg03, #17
2d4b0     0B 05 48 FC | 	wrbyte	#2, arg03
2d4b4     02 FA 05 F6 | 	mov	result1, #2
2d4b8     DC 01 90 FD | 	jmp	#LR__4623
2d4bc                 | LR__4614
2d4bc     1C 4E 05 F1 | 	add	fp, #28
2d4c0     A7 18 02 FB | 	rdlong	arg04, fp
2d4c4     14 4E 85 F1 | 	sub	fp, #20
2d4c8     A7 16 02 FB | 	rdlong	arg03, fp
2d4cc     09 16 46 F0 | 	shr	arg03, #9
2d4d0     0B 19 02 F1 | 	add	arg04, arg03
2d4d4     14 4E 05 F1 | 	add	fp, #20
2d4d8     A7 18 62 FC | 	wrlong	arg04, fp
2d4dc     1C 4E 85 F1 | 	sub	fp, #28
2d4e0                 | LR__4615
2d4e0                 | LR__4616
2d4e0                 | LR__4617
2d4e0     04 4E 05 F1 | 	add	fp, #4
2d4e4     A7 18 02 FB | 	rdlong	arg04, fp
2d4e8     0C 17 02 F6 | 	mov	arg03, arg04
2d4ec     04 4E 85 F1 | 	sub	fp, #4
2d4f0     14 16 06 F1 | 	add	arg03, #20
2d4f4     0B 17 02 FB | 	rdlong	arg03, arg03
2d4f8     0C 18 06 F1 | 	add	arg04, #12
2d4fc     0C 19 02 FB | 	rdlong	arg04, arg04
2d500     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2d504     3C 00 90 ED |  if_be	jmp	#LR__4618
2d508     04 4E 05 F1 | 	add	fp, #4
2d50c     A7 18 02 FB | 	rdlong	arg04, fp
2d510     0C 17 02 F6 | 	mov	arg03, arg04
2d514     14 18 06 F1 | 	add	arg04, #20
2d518     0C 19 02 FB | 	rdlong	arg04, arg04
2d51c     0C 16 06 F1 | 	add	arg03, #12
2d520     0B 19 62 FC | 	wrlong	arg04, arg03
2d524     A7 18 02 FB | 	rdlong	arg04, fp
2d528     0C 17 02 F6 | 	mov	arg03, arg04
2d52c     04 4E 85 F1 | 	sub	fp, #4
2d530     10 18 06 F1 | 	add	arg04, #16
2d534     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d538     40 18 46 F5 | 	or	arg04, #64
2d53c     10 16 06 F1 | 	add	arg03, #16
2d540     0B 19 42 FC | 	wrbyte	arg04, arg03
2d544                 | LR__4618
2d544     04 4E 05 F1 | 	add	fp, #4
2d548     A7 16 02 FB | 	rdlong	arg03, fp
2d54c     04 4E 85 F1 | 	sub	fp, #4
2d550     14 16 06 F1 | 	add	arg03, #20
2d554     0B 17 02 FB | 	rdlong	arg03, arg03
2d558     FF 17 CE F7 | 	test	arg03, #511 wz
2d55c     2C 01 90 AD |  if_e	jmp	#LR__4622
2d560     04 4E 05 F1 | 	add	fp, #4
2d564     A7 18 02 FB | 	rdlong	arg04, fp
2d568     18 4E 05 F1 | 	add	fp, #24
2d56c     A7 16 02 FB | 	rdlong	arg03, fp
2d570     1C 4E 85 F1 | 	sub	fp, #28
2d574     1C 18 06 F1 | 	add	arg04, #28
2d578     0C 19 02 FB | 	rdlong	arg04, arg04
2d57c     0C 17 0A F2 | 	cmp	arg03, arg04 wz
2d580     08 01 90 AD |  if_e	jmp	#LR__4622
2d584     04 4E 05 F1 | 	add	fp, #4
2d588     A7 16 02 FB | 	rdlong	arg03, fp
2d58c     04 4E 85 F1 | 	sub	fp, #4
2d590     10 16 06 F1 | 	add	arg03, #16
2d594     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d598     80 16 CE F7 | 	test	arg03, #128 wz
2d59c     7C 00 90 AD |  if_e	jmp	#LR__4620
2d5a0     10 4E 05 F1 | 	add	fp, #16
2d5a4     A7 16 02 FB | 	rdlong	arg03, fp
2d5a8     01 16 06 F1 | 	add	arg03, #1
2d5ac     0B 13 C2 FA | 	rdbyte	arg01, arg03
2d5b0     0C 4E 85 F1 | 	sub	fp, #12
2d5b4     A7 16 02 FB | 	rdlong	arg03, fp
2d5b8     0B 15 02 F6 | 	mov	arg02, arg03
2d5bc     28 14 06 F1 | 	add	arg02, #40
2d5c0     04 4E 85 F1 | 	sub	fp, #4
2d5c4     1C 16 06 F1 | 	add	arg03, #28
2d5c8     0B 17 02 FB | 	rdlong	arg03, arg03
2d5cc     01 18 06 F6 | 	mov	arg04, #1
2d5d0     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
2d5d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2d5d8     1C 00 90 AD |  if_e	jmp	#LR__4619
2d5dc     04 4E 05 F1 | 	add	fp, #4
2d5e0     A7 16 02 FB | 	rdlong	arg03, fp
2d5e4     04 4E 85 F1 | 	sub	fp, #4
2d5e8     11 16 06 F1 | 	add	arg03, #17
2d5ec     0B 03 48 FC | 	wrbyte	#1, arg03
2d5f0     01 FA 05 F6 | 	mov	result1, #1
2d5f4     A0 00 90 FD | 	jmp	#LR__4623
2d5f8                 | LR__4619
2d5f8     04 4E 05 F1 | 	add	fp, #4
2d5fc     A7 18 02 FB | 	rdlong	arg04, fp
2d600     0C 17 02 F6 | 	mov	arg03, arg04
2d604     04 4E 85 F1 | 	sub	fp, #4
2d608     10 18 06 F1 | 	add	arg04, #16
2d60c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d610     7F 18 06 F5 | 	and	arg04, #127
2d614     10 16 06 F1 | 	add	arg03, #16
2d618     0B 19 42 FC | 	wrbyte	arg04, arg03
2d61c                 | LR__4620
2d61c     10 4E 05 F1 | 	add	fp, #16
2d620     A7 16 02 FB | 	rdlong	arg03, fp
2d624     01 16 06 F1 | 	add	arg03, #1
2d628     0B 13 C2 FA | 	rdbyte	arg01, arg03
2d62c     0C 4E 85 F1 | 	sub	fp, #12
2d630     A7 14 02 FB | 	rdlong	arg02, fp
2d634     28 14 06 F1 | 	add	arg02, #40
2d638     18 4E 05 F1 | 	add	fp, #24
2d63c     A7 16 02 FB | 	rdlong	arg03, fp
2d640     1C 4E 85 F1 | 	sub	fp, #28
2d644     01 18 06 F6 | 	mov	arg04, #1
2d648     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
2d64c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d650     1C 00 90 AD |  if_e	jmp	#LR__4621
2d654     04 4E 05 F1 | 	add	fp, #4
2d658     A7 16 02 FB | 	rdlong	arg03, fp
2d65c     04 4E 85 F1 | 	sub	fp, #4
2d660     11 16 06 F1 | 	add	arg03, #17
2d664     0B 03 48 FC | 	wrbyte	#1, arg03
2d668     01 FA 05 F6 | 	mov	result1, #1
2d66c     28 00 90 FD | 	jmp	#LR__4623
2d670                 | LR__4621
2d670     04 4E 05 F1 | 	add	fp, #4
2d674     A7 18 02 FB | 	rdlong	arg04, fp
2d678     18 4E 05 F1 | 	add	fp, #24
2d67c     A7 16 02 FB | 	rdlong	arg03, fp
2d680     1C 4E 85 F1 | 	sub	fp, #28
2d684     1C 18 06 F1 | 	add	arg04, #28
2d688     0C 17 62 FC | 	wrlong	arg03, arg04
2d68c                 | LR__4622
2d68c                 | ' 
2d68c                 | ' 			fp->sect = nsect;
2d68c                 | ' 		}
2d68c                 | ' 	}
2d68c                 | ' 
2d68c                 | ' 	return res ;
2d68c     0C 4E 05 F1 | 	add	fp, #12
2d690     A7 FA 01 FB | 	rdlong	result1, fp
2d694     0C 4E 85 F1 | 	sub	fp, #12
2d698                 | LR__4623
2d698     A7 F0 03 F6 | 	mov	ptra, fp
2d69c     B2 00 A0 FD | 	call	#popregs_
2d6a0                 | _fatfs_cc_f_lseek_ret
2d6a0     2D 00 64 FD | 	ret
2d6a4                 | 
2d6a4                 | _fatfs_cc_f_opendir
2d6a4     01 4A 05 F6 | 	mov	COUNT_, #1
2d6a8     A8 00 A0 FD | 	call	#pushregs_
2d6ac     14 F0 07 F1 | 	add	ptra, #20
2d6b0     04 4E 05 F1 | 	add	fp, #4
2d6b4     A7 12 62 FC | 	wrlong	arg01, fp
2d6b8     04 4E 05 F1 | 	add	fp, #4
2d6bc     A7 14 62 FC | 	wrlong	arg02, fp
2d6c0     04 4E 85 F1 | 	sub	fp, #4
2d6c4     A7 16 0A FB | 	rdlong	arg03, fp wz
2d6c8     04 4E 85 F1 | 	sub	fp, #4
2d6cc     09 FA 05 A6 |  if_e	mov	result1, #9
2d6d0     78 01 90 AD |  if_e	jmp	#LR__4636
2d6d4     08 4E 05 F1 | 	add	fp, #8
2d6d8     A7 12 02 F6 | 	mov	arg01, fp
2d6dc     08 4E 05 F1 | 	add	fp, #8
2d6e0     A7 14 02 F6 | 	mov	arg02, fp
2d6e4     10 4E 85 F1 | 	sub	fp, #16
2d6e8     00 16 06 F6 | 	mov	arg03, #0
2d6ec     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
2d6f0     0C 4E 05 F1 | 	add	fp, #12
2d6f4     A7 FA 61 FC | 	wrlong	result1, fp
2d6f8     0C 4E 85 F1 | 	sub	fp, #12
2d6fc     00 FA 0D F2 | 	cmp	result1, #0 wz
2d700     20 01 90 5D |  if_ne	jmp	#LR__4635
2d704     04 4E 05 F1 | 	add	fp, #4
2d708     A7 16 02 FB | 	rdlong	arg03, fp
2d70c     0C 4E 05 F1 | 	add	fp, #12
2d710     A7 FA 01 FB | 	rdlong	result1, fp
2d714     0B FB 61 FC | 	wrlong	result1, arg03
2d718     0C 4E 85 F1 | 	sub	fp, #12
2d71c     A7 12 02 FB | 	rdlong	arg01, fp
2d720     04 4E 05 F1 | 	add	fp, #4
2d724     A7 14 02 FB | 	rdlong	arg02, fp
2d728     08 4E 85 F1 | 	sub	fp, #8
2d72c     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
2d730     0C 4E 05 F1 | 	add	fp, #12
2d734     A7 FA 61 FC | 	wrlong	result1, fp
2d738     0C 4E 85 F1 | 	sub	fp, #12
2d73c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d740     C4 00 90 5D |  if_ne	jmp	#LR__4634
2d744     04 4E 05 F1 | 	add	fp, #4
2d748     A7 16 02 FB | 	rdlong	arg03, fp
2d74c     04 4E 85 F1 | 	sub	fp, #4
2d750     2B 16 06 F1 | 	add	arg03, #43
2d754     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d758     80 16 CE F7 | 	test	arg03, #128 wz
2d75c     58 00 90 5D |  if_ne	jmp	#LR__4632
2d760     04 4E 05 F1 | 	add	fp, #4
2d764     A7 16 02 FB | 	rdlong	arg03, fp
2d768     04 4E 85 F1 | 	sub	fp, #4
2d76c     06 16 06 F1 | 	add	arg03, #6
2d770     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d774     10 16 CE F7 | 	test	arg03, #16 wz
2d778     30 00 90 AD |  if_e	jmp	#LR__4630
2d77c     04 4E 05 F1 | 	add	fp, #4
2d780     A7 16 02 FB | 	rdlong	arg03, fp
2d784     0B 1F 02 F6 | 	mov	local01, arg03
2d788     0C 4E 05 F1 | 	add	fp, #12
2d78c     A7 12 02 FB | 	rdlong	arg01, fp
2d790     10 4E 85 F1 | 	sub	fp, #16
2d794     1C 16 06 F1 | 	add	arg03, #28
2d798     0B 15 02 FB | 	rdlong	arg02, arg03
2d79c     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
2d7a0     08 1E 06 F1 | 	add	local01, #8
2d7a4     0F FB 61 FC | 	wrlong	result1, local01
2d7a8     0C 00 90 FD | 	jmp	#LR__4631
2d7ac                 | LR__4630
2d7ac     0C 4E 05 F1 | 	add	fp, #12
2d7b0     A7 0A 68 FC | 	wrlong	#5, fp
2d7b4     0C 4E 85 F1 | 	sub	fp, #12
2d7b8                 | LR__4631
2d7b8                 | LR__4632
2d7b8     0C 4E 05 F1 | 	add	fp, #12
2d7bc     A7 1E 0A FB | 	rdlong	local01, fp wz
2d7c0     0C 4E 85 F1 | 	sub	fp, #12
2d7c4     40 00 90 5D |  if_ne	jmp	#LR__4633
2d7c8     04 4E 05 F1 | 	add	fp, #4
2d7cc     A7 1E 02 FB | 	rdlong	local01, fp
2d7d0     0C 4E 05 F1 | 	add	fp, #12
2d7d4     A7 16 02 FB | 	rdlong	arg03, fp
2d7d8     06 16 06 F1 | 	add	arg03, #6
2d7dc     0B 17 E2 FA | 	rdword	arg03, arg03
2d7e0     04 1E 06 F1 | 	add	local01, #4
2d7e4     0F 17 52 FC | 	wrword	arg03, local01
2d7e8     0C 4E 85 F1 | 	sub	fp, #12
2d7ec     A7 12 02 FB | 	rdlong	arg01, fp
2d7f0     04 4E 85 F1 | 	sub	fp, #4
2d7f4     00 14 06 F6 | 	mov	arg02, #0
2d7f8     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
2d7fc     0C 4E 05 F1 | 	add	fp, #12
2d800     A7 FA 61 FC | 	wrlong	result1, fp
2d804     0C 4E 85 F1 | 	sub	fp, #12
2d808                 | LR__4633
2d808                 | LR__4634
2d808     0C 4E 05 F1 | 	add	fp, #12
2d80c     A7 1E 02 FB | 	rdlong	local01, fp
2d810     0C 4E 85 F1 | 	sub	fp, #12
2d814     04 1E 0E F2 | 	cmp	local01, #4 wz
2d818     0C 4E 05 A1 |  if_e	add	fp, #12
2d81c     A7 0A 68 AC |  if_e	wrlong	#5, fp
2d820     0C 4E 85 A1 |  if_e	sub	fp, #12
2d824                 | LR__4635
2d824     0C 4E 05 F1 | 	add	fp, #12
2d828     A7 1E 0A FB | 	rdlong	local01, fp wz
2d82c     0C 4E 85 F1 | 	sub	fp, #12
2d830     04 4E 05 51 |  if_ne	add	fp, #4
2d834     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2d838     04 4E 85 51 |  if_ne	sub	fp, #4
2d83c     0F 01 68 5C |  if_ne	wrlong	#0, local01
2d840                 | ' 
2d840                 | ' 	return res ;
2d840     0C 4E 05 F1 | 	add	fp, #12
2d844     A7 FA 01 FB | 	rdlong	result1, fp
2d848     0C 4E 85 F1 | 	sub	fp, #12
2d84c                 | LR__4636
2d84c     A7 F0 03 F6 | 	mov	ptra, fp
2d850     B2 00 A0 FD | 	call	#popregs_
2d854                 | _fatfs_cc_f_opendir_ret
2d854     2D 00 64 FD | 	ret
2d858                 | 
2d858                 | _fatfs_cc_f_closedir
2d858     00 4A 05 F6 | 	mov	COUNT_, #0
2d85c     A8 00 A0 FD | 	call	#pushregs_
2d860     10 F0 07 F1 | 	add	ptra, #16
2d864     04 4E 05 F1 | 	add	fp, #4
2d868     A7 12 62 FC | 	wrlong	arg01, fp
2d86c     08 4E 05 F1 | 	add	fp, #8
2d870     A7 14 02 F6 | 	mov	arg02, fp
2d874     0C 4E 85 F1 | 	sub	fp, #12
2d878     C0 DD BF FD | 	call	#_fatfs_cc_validate
2d87c     08 4E 05 F1 | 	add	fp, #8
2d880     A7 FA 61 FC | 	wrlong	result1, fp
2d884     08 4E 85 F1 | 	sub	fp, #8
2d888     00 FA 0D F2 | 	cmp	result1, #0 wz
2d88c     04 4E 05 A1 |  if_e	add	fp, #4
2d890     A7 FA 01 AB |  if_e	rdlong	result1, fp
2d894     04 4E 85 A1 |  if_e	sub	fp, #4
2d898     FD 00 68 AC |  if_e	wrlong	#0, result1
2d89c                 | ' 
2d89c                 | ' 
2d89c                 | ' 
2d89c                 | ' 
2d89c                 | ' 		dp->obj.fs = 0;
2d89c                 | ' #line 4633 "ff.c"
2d89c                 | ' 	}
2d89c                 | ' 	return res;
2d89c     08 4E 05 F1 | 	add	fp, #8
2d8a0     A7 FA 01 FB | 	rdlong	result1, fp
2d8a4     08 4E 85 F1 | 	sub	fp, #8
2d8a8     A7 F0 03 F6 | 	mov	ptra, fp
2d8ac     B2 00 A0 FD | 	call	#popregs_
2d8b0                 | _fatfs_cc_f_closedir_ret
2d8b0     2D 00 64 FD | 	ret
2d8b4                 | 
2d8b4                 | _fatfs_cc_f_readdir
2d8b4     00 4A 05 F6 | 	mov	COUNT_, #0
2d8b8     A8 00 A0 FD | 	call	#pushregs_
2d8bc     14 F0 07 F1 | 	add	ptra, #20
2d8c0     04 4E 05 F1 | 	add	fp, #4
2d8c4     A7 12 62 FC | 	wrlong	arg01, fp
2d8c8     04 4E 05 F1 | 	add	fp, #4
2d8cc     A7 14 62 FC | 	wrlong	arg02, fp
2d8d0     04 4E 85 F1 | 	sub	fp, #4
2d8d4     A7 12 02 FB | 	rdlong	arg01, fp
2d8d8     0C 4E 05 F1 | 	add	fp, #12
2d8dc     A7 14 02 F6 | 	mov	arg02, fp
2d8e0     10 4E 85 F1 | 	sub	fp, #16
2d8e4     54 DD BF FD | 	call	#_fatfs_cc_validate
2d8e8     0C 4E 05 F1 | 	add	fp, #12
2d8ec     A7 FA 61 FC | 	wrlong	result1, fp
2d8f0     0C 4E 85 F1 | 	sub	fp, #12
2d8f4     00 FA 0D F2 | 	cmp	result1, #0 wz
2d8f8     BC 00 90 5D |  if_ne	jmp	#LR__4643
2d8fc     08 4E 05 F1 | 	add	fp, #8
2d900     A7 FA 09 FB | 	rdlong	result1, fp wz
2d904     08 4E 85 F1 | 	sub	fp, #8
2d908     24 00 90 5D |  if_ne	jmp	#LR__4640
2d90c     04 4E 05 F1 | 	add	fp, #4
2d910     A7 12 02 FB | 	rdlong	arg01, fp
2d914     04 4E 85 F1 | 	sub	fp, #4
2d918     00 14 06 F6 | 	mov	arg02, #0
2d91c     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
2d920     0C 4E 05 F1 | 	add	fp, #12
2d924     A7 FA 61 FC | 	wrlong	result1, fp
2d928     0C 4E 85 F1 | 	sub	fp, #12
2d92c     88 00 90 FD | 	jmp	#LR__4642
2d930                 | LR__4640
2d930     04 4E 05 F1 | 	add	fp, #4
2d934     A7 12 02 FB | 	rdlong	arg01, fp
2d938     04 4E 85 F1 | 	sub	fp, #4
2d93c     00 14 06 F6 | 	mov	arg02, #0
2d940     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
2d944     0C 4E 05 F1 | 	add	fp, #12
2d948     A7 FA 61 FC | 	wrlong	result1, fp
2d94c     0C 4E 85 F1 | 	sub	fp, #12
2d950     04 FA 0D F2 | 	cmp	result1, #4 wz
2d954     0C 4E 05 A1 |  if_e	add	fp, #12
2d958     A7 00 68 AC |  if_e	wrlong	#0, fp
2d95c     0C 4E 85 A1 |  if_e	sub	fp, #12
2d960     0C 4E 05 F1 | 	add	fp, #12
2d964     A7 FA 09 FB | 	rdlong	result1, fp wz
2d968     0C 4E 85 F1 | 	sub	fp, #12
2d96c     48 00 90 5D |  if_ne	jmp	#LR__4641
2d970     04 4E 05 F1 | 	add	fp, #4
2d974     A7 12 02 FB | 	rdlong	arg01, fp
2d978     04 4E 05 F1 | 	add	fp, #4
2d97c     A7 14 02 FB | 	rdlong	arg02, fp
2d980     08 4E 85 F1 | 	sub	fp, #8
2d984     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
2d988     04 4E 05 F1 | 	add	fp, #4
2d98c     A7 12 02 FB | 	rdlong	arg01, fp
2d990     04 4E 85 F1 | 	sub	fp, #4
2d994     00 14 06 F6 | 	mov	arg02, #0
2d998     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
2d99c     0C 4E 05 F1 | 	add	fp, #12
2d9a0     A7 FA 61 FC | 	wrlong	result1, fp
2d9a4     0C 4E 85 F1 | 	sub	fp, #12
2d9a8     04 FA 0D F2 | 	cmp	result1, #4 wz
2d9ac     0C 4E 05 A1 |  if_e	add	fp, #12
2d9b0     A7 00 68 AC |  if_e	wrlong	#0, fp
2d9b4     0C 4E 85 A1 |  if_e	sub	fp, #12
2d9b8                 | LR__4641
2d9b8                 | LR__4642
2d9b8                 | LR__4643
2d9b8                 | ' 			}
2d9b8                 | ' 			;
2d9b8                 | ' 		}
2d9b8                 | ' 	}
2d9b8                 | ' 	return res ;
2d9b8     0C 4E 05 F1 | 	add	fp, #12
2d9bc     A7 FA 01 FB | 	rdlong	result1, fp
2d9c0     0C 4E 85 F1 | 	sub	fp, #12
2d9c4     A7 F0 03 F6 | 	mov	ptra, fp
2d9c8     B2 00 A0 FD | 	call	#popregs_
2d9cc                 | _fatfs_cc_f_readdir_ret
2d9cc     2D 00 64 FD | 	ret
2d9d0                 | 
2d9d0                 | _fatfs_cc_f_stat
2d9d0     00 4A 05 F6 | 	mov	COUNT_, #0
2d9d4     A8 00 A0 FD | 	call	#pushregs_
2d9d8     40 F0 07 F1 | 	add	ptra, #64
2d9dc     04 4E 05 F1 | 	add	fp, #4
2d9e0     A7 12 62 FC | 	wrlong	arg01, fp
2d9e4     04 4E 05 F1 | 	add	fp, #4
2d9e8     A7 14 62 FC | 	wrlong	arg02, fp
2d9ec     04 4E 85 F1 | 	sub	fp, #4
2d9f0     A7 12 02 F6 | 	mov	arg01, fp
2d9f4     0C 4E 05 F1 | 	add	fp, #12
2d9f8     A7 14 02 F6 | 	mov	arg02, fp
2d9fc     10 4E 85 F1 | 	sub	fp, #16
2da00     00 16 06 F6 | 	mov	arg03, #0
2da04     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
2da08     0C 4E 05 F1 | 	add	fp, #12
2da0c     A7 FA 61 FC | 	wrlong	result1, fp
2da10     0C 4E 85 F1 | 	sub	fp, #12
2da14     00 FA 0D F2 | 	cmp	result1, #0 wz
2da18     74 00 90 5D |  if_ne	jmp	#LR__4653
2da1c     10 4E 05 F1 | 	add	fp, #16
2da20     A7 12 02 F6 | 	mov	arg01, fp
2da24     0C 4E 85 F1 | 	sub	fp, #12
2da28     A7 14 02 FB | 	rdlong	arg02, fp
2da2c     04 4E 85 F1 | 	sub	fp, #4
2da30     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
2da34     0C 4E 05 F1 | 	add	fp, #12
2da38     A7 FA 61 FC | 	wrlong	result1, fp
2da3c     0C 4E 85 F1 | 	sub	fp, #12
2da40     00 FA 0D F2 | 	cmp	result1, #0 wz
2da44     48 00 90 5D |  if_ne	jmp	#LR__4652
2da48     3B 4E 05 F1 | 	add	fp, #59
2da4c     A7 FA C1 FA | 	rdbyte	result1, fp
2da50     3B 4E 85 F1 | 	sub	fp, #59
2da54     80 FA CD F7 | 	test	result1, #128 wz
2da58     0C 4E 05 51 |  if_ne	add	fp, #12
2da5c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2da60     0C 4E 85 51 |  if_ne	sub	fp, #12
2da64     28 00 90 5D |  if_ne	jmp	#LR__4651
2da68     08 4E 05 F1 | 	add	fp, #8
2da6c     A7 FA 09 FB | 	rdlong	result1, fp wz
2da70     08 4E 85 F1 | 	sub	fp, #8
2da74     18 00 90 AD |  if_e	jmp	#LR__4650
2da78     10 4E 05 F1 | 	add	fp, #16
2da7c     A7 12 02 F6 | 	mov	arg01, fp
2da80     08 4E 85 F1 | 	sub	fp, #8
2da84     A7 14 02 FB | 	rdlong	arg02, fp
2da88     08 4E 85 F1 | 	sub	fp, #8
2da8c     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
2da90                 | LR__4650
2da90                 | LR__4651
2da90                 | LR__4652
2da90                 | LR__4653
2da90                 | ' 			}
2da90                 | ' 		}
2da90                 | ' 		;
2da90                 | ' 	}
2da90                 | ' 
2da90                 | ' 	return res ;
2da90     0C 4E 05 F1 | 	add	fp, #12
2da94     A7 FA 01 FB | 	rdlong	result1, fp
2da98     0C 4E 85 F1 | 	sub	fp, #12
2da9c     A7 F0 03 F6 | 	mov	ptra, fp
2daa0     B2 00 A0 FD | 	call	#popregs_
2daa4                 | _fatfs_cc_f_stat_ret
2daa4     2D 00 64 FD | 	ret
2daa8                 | 
2daa8                 | _fatfs_cc_f_unlink
2daa8     00 4A 05 F6 | 	mov	COUNT_, #0
2daac     A8 00 A0 FD | 	call	#pushregs_
2dab0     74 F0 07 F1 | 	add	ptra, #116
2dab4     04 4E 05 F1 | 	add	fp, #4
2dab8     A7 12 62 FC | 	wrlong	arg01, fp
2dabc     68 4E 05 F1 | 	add	fp, #104
2dac0     A7 00 68 FC | 	wrlong	#0, fp
2dac4     68 4E 85 F1 | 	sub	fp, #104
2dac8     A7 12 02 F6 | 	mov	arg01, fp
2dacc     6C 4E 05 F1 | 	add	fp, #108
2dad0     A7 14 02 F6 | 	mov	arg02, fp
2dad4     70 4E 85 F1 | 	sub	fp, #112
2dad8     02 16 06 F6 | 	mov	arg03, #2
2dadc     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
2dae0     08 4E 05 F1 | 	add	fp, #8
2dae4     A7 FA 61 FC | 	wrlong	result1, fp
2dae8     08 4E 85 F1 | 	sub	fp, #8
2daec     00 FA 0D F2 | 	cmp	result1, #0 wz
2daf0     E4 01 90 5D |  if_ne	jmp	#LR__4668
2daf4     70 4E 05 F1 | 	add	fp, #112
2daf8     A7 16 02 FB | 	rdlong	arg03, fp
2dafc     64 4E 85 F1 | 	sub	fp, #100
2db00     A7 16 62 FC | 	wrlong	arg03, fp
2db04     A7 12 02 F6 | 	mov	arg01, fp
2db08     08 4E 85 F1 | 	sub	fp, #8
2db0c     A7 14 02 FB | 	rdlong	arg02, fp
2db10     04 4E 85 F1 | 	sub	fp, #4
2db14     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
2db18     08 4E 05 F1 | 	add	fp, #8
2db1c     A7 FA 61 FC | 	wrlong	result1, fp
2db20     00 FA 4D F2 | 	cmps	result1, #0 wz
2db24     08 4E 85 F1 | 	sub	fp, #8
2db28     AC 01 90 5D |  if_ne	jmp	#LR__4667
2db2c     37 4E 05 F1 | 	add	fp, #55
2db30     A7 FA C1 FA | 	rdbyte	result1, fp
2db34     37 4E 85 F1 | 	sub	fp, #55
2db38     80 FA CD F7 | 	test	result1, #128 wz
2db3c     08 4E 05 51 |  if_ne	add	fp, #8
2db40     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2db44     08 4E 85 51 |  if_ne	sub	fp, #8
2db48     1C 00 90 5D |  if_ne	jmp	#LR__4660
2db4c     12 4E 05 F1 | 	add	fp, #18
2db50     A7 FA C1 FA | 	rdbyte	result1, fp
2db54     12 4E 85 F1 | 	sub	fp, #18
2db58     01 FA CD F7 | 	test	result1, #1 wz
2db5c     08 4E 05 51 |  if_ne	add	fp, #8
2db60     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2db64     08 4E 85 51 |  if_ne	sub	fp, #8
2db68                 | LR__4660
2db68     08 4E 05 F1 | 	add	fp, #8
2db6c     A7 FA 09 FB | 	rdlong	result1, fp wz
2db70     08 4E 85 F1 | 	sub	fp, #8
2db74     C8 00 90 5D |  if_ne	jmp	#LR__4663
2db78     70 4E 05 F1 | 	add	fp, #112
2db7c     A7 12 02 FB | 	rdlong	arg01, fp
2db80     48 4E 85 F1 | 	sub	fp, #72
2db84     A7 14 02 FB | 	rdlong	arg02, fp
2db88     28 4E 85 F1 | 	sub	fp, #40
2db8c     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
2db90     6C 4E 05 F1 | 	add	fp, #108
2db94     A7 FA 61 FC | 	wrlong	result1, fp
2db98     5A 4E 85 F1 | 	sub	fp, #90
2db9c     A7 FA C1 FA | 	rdbyte	result1, fp
2dba0     12 4E 85 F1 | 	sub	fp, #18
2dba4     10 FA CD F7 | 	test	result1, #16 wz
2dba8     94 00 90 AD |  if_e	jmp	#LR__4662
2dbac     70 4E 05 F1 | 	add	fp, #112
2dbb0     A7 FA 01 FB | 	rdlong	result1, fp
2dbb4     34 4E 85 F1 | 	sub	fp, #52
2dbb8     A7 FA 61 FC | 	wrlong	result1, fp
2dbbc     30 4E 05 F1 | 	add	fp, #48
2dbc0     A7 16 02 FB | 	rdlong	arg03, fp
2dbc4     28 4E 85 F1 | 	sub	fp, #40
2dbc8     A7 16 62 FC | 	wrlong	arg03, fp
2dbcc     08 4E 85 F1 | 	sub	fp, #8
2dbd0     A7 12 02 F6 | 	mov	arg01, fp
2dbd4     3C 4E 85 F1 | 	sub	fp, #60
2dbd8     00 14 06 F6 | 	mov	arg02, #0
2dbdc     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
2dbe0     08 4E 05 F1 | 	add	fp, #8
2dbe4     A7 FA 61 FC | 	wrlong	result1, fp
2dbe8     08 4E 85 F1 | 	sub	fp, #8
2dbec     00 FA 0D F2 | 	cmp	result1, #0 wz
2dbf0     4C 00 90 5D |  if_ne	jmp	#LR__4661
2dbf4     3C 4E 05 F1 | 	add	fp, #60
2dbf8     A7 12 02 F6 | 	mov	arg01, fp
2dbfc     3C 4E 85 F1 | 	sub	fp, #60
2dc00     00 14 06 F6 | 	mov	arg02, #0
2dc04     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
2dc08     08 4E 05 F1 | 	add	fp, #8
2dc0c     A7 FA 61 FC | 	wrlong	result1, fp
2dc10     00 FA 4D F2 | 	cmps	result1, #0 wz
2dc14     08 4E 85 F1 | 	sub	fp, #8
2dc18     08 4E 05 A1 |  if_e	add	fp, #8
2dc1c     A7 0E 68 AC |  if_e	wrlong	#7, fp
2dc20     08 4E 85 A1 |  if_e	sub	fp, #8
2dc24     08 4E 05 F1 | 	add	fp, #8
2dc28     A7 FA 01 FB | 	rdlong	result1, fp
2dc2c     08 4E 85 F1 | 	sub	fp, #8
2dc30     04 FA 0D F2 | 	cmp	result1, #4 wz
2dc34     08 4E 05 A1 |  if_e	add	fp, #8
2dc38     A7 00 68 AC |  if_e	wrlong	#0, fp
2dc3c     08 4E 85 A1 |  if_e	sub	fp, #8
2dc40                 | LR__4661
2dc40                 | LR__4662
2dc40                 | LR__4663
2dc40     08 4E 05 F1 | 	add	fp, #8
2dc44     A7 FA 09 FB | 	rdlong	result1, fp wz
2dc48     08 4E 85 F1 | 	sub	fp, #8
2dc4c     88 00 90 5D |  if_ne	jmp	#LR__4666
2dc50     0C 4E 05 F1 | 	add	fp, #12
2dc54     A7 12 02 F6 | 	mov	arg01, fp
2dc58     0C 4E 85 F1 | 	sub	fp, #12
2dc5c     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
2dc60     08 4E 05 F1 | 	add	fp, #8
2dc64     A7 FA 61 FC | 	wrlong	result1, fp
2dc68     08 4E 85 F1 | 	sub	fp, #8
2dc6c     00 FA 0D F2 | 	cmp	result1, #0 wz
2dc70     38 00 90 5D |  if_ne	jmp	#LR__4664
2dc74     6C 4E 05 F1 | 	add	fp, #108
2dc78     A7 FA 09 FB | 	rdlong	result1, fp wz
2dc7c     6C 4E 85 F1 | 	sub	fp, #108
2dc80     28 00 90 AD |  if_e	jmp	#LR__4664
2dc84     0C 4E 05 F1 | 	add	fp, #12
2dc88     A7 12 02 F6 | 	mov	arg01, fp
2dc8c     60 4E 05 F1 | 	add	fp, #96
2dc90     A7 14 02 FB | 	rdlong	arg02, fp
2dc94     6C 4E 85 F1 | 	sub	fp, #108
2dc98     00 16 06 F6 | 	mov	arg03, #0
2dc9c     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
2dca0     08 4E 05 F1 | 	add	fp, #8
2dca4     A7 FA 61 FC | 	wrlong	result1, fp
2dca8     08 4E 85 F1 | 	sub	fp, #8
2dcac                 | LR__4664
2dcac     08 4E 05 F1 | 	add	fp, #8
2dcb0     A7 FA 09 FB | 	rdlong	result1, fp wz
2dcb4     08 4E 85 F1 | 	sub	fp, #8
2dcb8     1C 00 90 5D |  if_ne	jmp	#LR__4665
2dcbc     70 4E 05 F1 | 	add	fp, #112
2dcc0     A7 12 02 FB | 	rdlong	arg01, fp
2dcc4     70 4E 85 F1 | 	sub	fp, #112
2dcc8     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
2dccc     08 4E 05 F1 | 	add	fp, #8
2dcd0     A7 FA 61 FC | 	wrlong	result1, fp
2dcd4     08 4E 85 F1 | 	sub	fp, #8
2dcd8                 | LR__4665
2dcd8                 | LR__4666
2dcd8                 | LR__4667
2dcd8                 | LR__4668
2dcd8                 | ' 			}
2dcd8                 | ' 		}
2dcd8                 | ' 		;
2dcd8                 | ' 	}
2dcd8                 | ' 
2dcd8                 | ' 	return res ;
2dcd8     08 4E 05 F1 | 	add	fp, #8
2dcdc     A7 FA 01 FB | 	rdlong	result1, fp
2dce0     08 4E 85 F1 | 	sub	fp, #8
2dce4     A7 F0 03 F6 | 	mov	ptra, fp
2dce8     B2 00 A0 FD | 	call	#popregs_
2dcec                 | _fatfs_cc_f_unlink_ret
2dcec     2D 00 64 FD | 	ret
2dcf0                 | 
2dcf0                 | _fatfs_cc_f_mkdir
2dcf0     00 4A 05 F6 | 	mov	COUNT_, #0
2dcf4     A8 00 A0 FD | 	call	#pushregs_
2dcf8     5C F0 07 F1 | 	add	ptra, #92
2dcfc     04 4E 05 F1 | 	add	fp, #4
2dd00     A7 12 62 FC | 	wrlong	arg01, fp
2dd04     A7 12 02 F6 | 	mov	arg01, fp
2dd08     48 4E 05 F1 | 	add	fp, #72
2dd0c     A7 14 02 F6 | 	mov	arg02, fp
2dd10     4C 4E 85 F1 | 	sub	fp, #76
2dd14     02 16 06 F6 | 	mov	arg03, #2
2dd18     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
2dd1c     08 4E 05 F1 | 	add	fp, #8
2dd20     A7 FA 61 FC | 	wrlong	result1, fp
2dd24     08 4E 85 F1 | 	sub	fp, #8
2dd28     00 FA 0D F2 | 	cmp	result1, #0 wz
2dd2c     C4 02 90 5D |  if_ne	jmp	#LR__4675
2dd30     4C 4E 05 F1 | 	add	fp, #76
2dd34     A7 16 02 FB | 	rdlong	arg03, fp
2dd38     40 4E 85 F1 | 	sub	fp, #64
2dd3c     A7 16 62 FC | 	wrlong	arg03, fp
2dd40     A7 12 02 F6 | 	mov	arg01, fp
2dd44     08 4E 85 F1 | 	sub	fp, #8
2dd48     A7 14 02 FB | 	rdlong	arg02, fp
2dd4c     04 4E 85 F1 | 	sub	fp, #4
2dd50     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2dd54     08 4E 05 F1 | 	add	fp, #8
2dd58     A7 FA 61 FC | 	wrlong	result1, fp
2dd5c     00 FA 4D F2 | 	cmps	result1, #0 wz
2dd60     08 4E 85 F1 | 	sub	fp, #8
2dd64     08 4E 05 A1 |  if_e	add	fp, #8
2dd68     A7 10 68 AC |  if_e	wrlong	#8, fp
2dd6c     08 4E 85 A1 |  if_e	sub	fp, #8
2dd70     08 4E 05 F1 | 	add	fp, #8
2dd74     A7 FA 01 FB | 	rdlong	result1, fp
2dd78     08 4E 85 F1 | 	sub	fp, #8
2dd7c     04 FA 0D F2 | 	cmp	result1, #4 wz
2dd80     70 02 90 5D |  if_ne	jmp	#LR__4674
2dd84     4C 4E 05 F1 | 	add	fp, #76
2dd88     A7 16 02 FB | 	rdlong	arg03, fp
2dd8c     10 4E 85 F1 | 	sub	fp, #16
2dd90     A7 16 62 FC | 	wrlong	arg03, fp
2dd94     A7 12 02 F6 | 	mov	arg01, fp
2dd98     3C 4E 85 F1 | 	sub	fp, #60
2dd9c     00 14 06 F6 | 	mov	arg02, #0
2dda0     04 AC BF FD | 	call	#_fatfs_cc_create_chain
2dda4     50 4E 05 F1 | 	add	fp, #80
2dda8     A7 FA 61 FC | 	wrlong	result1, fp
2ddac     48 4E 85 F1 | 	sub	fp, #72
2ddb0     A7 00 68 FC | 	wrlong	#0, fp
2ddb4     48 4E 05 F1 | 	add	fp, #72
2ddb8     A7 FA 09 FB | 	rdlong	result1, fp wz
2ddbc     50 4E 85 F1 | 	sub	fp, #80
2ddc0     08 4E 05 A1 |  if_e	add	fp, #8
2ddc4     A7 0E 68 AC |  if_e	wrlong	#7, fp
2ddc8     08 4E 85 A1 |  if_e	sub	fp, #8
2ddcc     50 4E 05 F1 | 	add	fp, #80
2ddd0     A7 FA 01 FB | 	rdlong	result1, fp
2ddd4     50 4E 85 F1 | 	sub	fp, #80
2ddd8     01 FA 0D F2 | 	cmp	result1, #1 wz
2dddc     08 4E 05 A1 |  if_e	add	fp, #8
2dde0     A7 04 68 AC |  if_e	wrlong	#2, fp
2dde4     08 4E 85 A1 |  if_e	sub	fp, #8
2dde8     50 4E 05 F1 | 	add	fp, #80
2ddec     A7 16 02 FB | 	rdlong	arg03, fp
2ddf0     50 4E 85 F1 | 	sub	fp, #80
2ddf4     FF FF 7F FF 
2ddf8     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2ddfc     08 4E 05 A1 |  if_e	add	fp, #8
2de00     A7 02 68 AC |  if_e	wrlong	#1, fp
2de04     08 4E 85 A1 |  if_e	sub	fp, #8
2de08     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
2de0c     58 4E 05 F1 | 	add	fp, #88
2de10     A7 FA 61 FC | 	wrlong	result1, fp
2de14     50 4E 85 F1 | 	sub	fp, #80
2de18     A7 FA 09 FB | 	rdlong	result1, fp wz
2de1c     08 4E 85 F1 | 	sub	fp, #8
2de20     1C 01 90 5D |  if_ne	jmp	#LR__4671
2de24     4C 4E 05 F1 | 	add	fp, #76
2de28     A7 12 02 FB | 	rdlong	arg01, fp
2de2c     04 4E 05 F1 | 	add	fp, #4
2de30     A7 14 02 FB | 	rdlong	arg02, fp
2de34     50 4E 85 F1 | 	sub	fp, #80
2de38     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
2de3c     08 4E 05 F1 | 	add	fp, #8
2de40     A7 FA 61 FC | 	wrlong	result1, fp
2de44     00 FA 4D F2 | 	cmps	result1, #0 wz
2de48     08 4E 85 F1 | 	sub	fp, #8
2de4c     F0 00 90 5D |  if_ne	jmp	#LR__4670
2de50     4C 4E 05 F1 | 	add	fp, #76
2de54     A7 12 02 FB | 	rdlong	arg01, fp
2de58     4C 4E 85 F1 | 	sub	fp, #76
2de5c     34 12 06 F1 | 	add	arg01, #52
2de60     20 14 06 F6 | 	mov	arg02, #32
2de64     0B 16 06 F6 | 	mov	arg03, #11
2de68     98 00 A0 FD | 	call	#\builtin_bytefill_
2de6c     4C 4E 05 F1 | 	add	fp, #76
2de70     A7 FA 01 FB | 	rdlong	result1, fp
2de74     34 FA 05 F1 | 	add	result1, #52
2de78     FD 5C 48 FC | 	wrbyte	#46, result1
2de7c     A7 16 02 FB | 	rdlong	arg03, fp
2de80     3F 16 06 F1 | 	add	arg03, #63
2de84     0B 21 48 FC | 	wrbyte	#16, arg03
2de88     A7 12 02 FB | 	rdlong	arg01, fp
2de8c     4A 12 06 F1 | 	add	arg01, #74
2de90     0C 4E 05 F1 | 	add	fp, #12
2de94     A7 14 02 FB | 	rdlong	arg02, fp
2de98     09 15 62 FC | 	wrlong	arg02, arg01
2de9c     0C 4E 85 F1 | 	sub	fp, #12
2dea0     A7 14 02 FB | 	rdlong	arg02, fp
2dea4     0A 13 02 F6 | 	mov	arg01, arg02
2dea8     34 14 06 F1 | 	add	arg02, #52
2deac     04 4E 05 F1 | 	add	fp, #4
2deb0     A7 16 02 FB | 	rdlong	arg03, fp
2deb4     50 4E 85 F1 | 	sub	fp, #80
2deb8     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
2debc     4C 4E 05 F1 | 	add	fp, #76
2dec0     A7 14 02 FB | 	rdlong	arg02, fp
2dec4     0A 13 02 F6 | 	mov	arg01, arg02
2dec8     54 12 06 F1 | 	add	arg01, #84
2decc     4C 4E 85 F1 | 	sub	fp, #76
2ded0     34 14 06 F1 | 	add	arg02, #52
2ded4     20 16 06 F6 | 	mov	arg03, #32
2ded8     60 2A BF FD | 	call	#__system____builtin_memmove
2dedc     4C 4E 05 F1 | 	add	fp, #76
2dee0     A7 16 02 FB | 	rdlong	arg03, fp
2dee4     55 16 06 F1 | 	add	arg03, #85
2dee8     0B 5D 48 FC | 	wrbyte	#46, arg03
2deec     38 4E 85 F1 | 	sub	fp, #56
2def0     A7 16 02 FB | 	rdlong	arg03, fp
2def4     40 4E 05 F1 | 	add	fp, #64
2def8     A7 16 62 FC | 	wrlong	arg03, fp
2defc     08 4E 85 F1 | 	sub	fp, #8
2df00     A7 14 02 FB | 	rdlong	arg02, fp
2df04     0A 13 02 F6 | 	mov	arg01, arg02
2df08     54 14 06 F1 | 	add	arg02, #84
2df0c     4C 4E 85 F1 | 	sub	fp, #76
2df10     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
2df14     4C 4E 05 F1 | 	add	fp, #76
2df18     A7 16 02 FB | 	rdlong	arg03, fp
2df1c     03 16 06 F1 | 	add	arg03, #3
2df20     0B 03 48 FC | 	wrbyte	#1, arg03
2df24     40 4E 85 F1 | 	sub	fp, #64
2df28     A7 12 02 F6 | 	mov	arg01, fp
2df2c     0C 4E 85 F1 | 	sub	fp, #12
2df30     44 BA BF FD | 	call	#_fatfs_cc_dir_register
2df34     08 4E 05 F1 | 	add	fp, #8
2df38     A7 FA 61 FC | 	wrlong	result1, fp
2df3c     08 4E 85 F1 | 	sub	fp, #8
2df40                 | LR__4670
2df40                 | LR__4671
2df40     08 4E 05 F1 | 	add	fp, #8
2df44     A7 FA 09 FB | 	rdlong	result1, fp wz
2df48     08 4E 85 F1 | 	sub	fp, #8
2df4c     88 00 90 5D |  if_ne	jmp	#LR__4672
2df50     28 4E 05 F1 | 	add	fp, #40
2df54     A7 12 02 FB | 	rdlong	arg01, fp
2df58     16 12 06 F1 | 	add	arg01, #22
2df5c     30 4E 05 F1 | 	add	fp, #48
2df60     A7 14 02 FB | 	rdlong	arg02, fp
2df64     09 15 62 FC | 	wrlong	arg02, arg01
2df68     0C 4E 85 F1 | 	sub	fp, #12
2df6c     A7 12 02 FB | 	rdlong	arg01, fp
2df70     24 4E 85 F1 | 	sub	fp, #36
2df74     A7 14 02 FB | 	rdlong	arg02, fp
2df78     28 4E 05 F1 | 	add	fp, #40
2df7c     A7 16 02 FB | 	rdlong	arg03, fp
2df80     50 4E 85 F1 | 	sub	fp, #80
2df84     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
2df88     28 4E 05 F1 | 	add	fp, #40
2df8c     A7 FA 01 FB | 	rdlong	result1, fp
2df90     0B FA 05 F1 | 	add	result1, #11
2df94     FD 20 48 FC | 	wrbyte	#16, result1
2df98     24 4E 05 F1 | 	add	fp, #36
2df9c     A7 FA 01 FB | 	rdlong	result1, fp
2dfa0     03 FA 05 F1 | 	add	result1, #3
2dfa4     FD 02 48 FC | 	wrbyte	#1, result1
2dfa8     44 4E 85 F1 | 	sub	fp, #68
2dfac     A7 FA 09 FB | 	rdlong	result1, fp wz
2dfb0     08 4E 85 F1 | 	sub	fp, #8
2dfb4     3C 00 90 5D |  if_ne	jmp	#LR__4673
2dfb8     4C 4E 05 F1 | 	add	fp, #76
2dfbc     A7 12 02 FB | 	rdlong	arg01, fp
2dfc0     4C 4E 85 F1 | 	sub	fp, #76
2dfc4     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
2dfc8     08 4E 05 F1 | 	add	fp, #8
2dfcc     A7 FA 61 FC | 	wrlong	result1, fp
2dfd0     08 4E 85 F1 | 	sub	fp, #8
2dfd4     1C 00 90 FD | 	jmp	#LR__4673
2dfd8                 | LR__4672
2dfd8     3C 4E 05 F1 | 	add	fp, #60
2dfdc     A7 12 02 F6 | 	mov	arg01, fp
2dfe0     14 4E 05 F1 | 	add	fp, #20
2dfe4     A7 14 02 FB | 	rdlong	arg02, fp
2dfe8     50 4E 85 F1 | 	sub	fp, #80
2dfec     00 16 06 F6 | 	mov	arg03, #0
2dff0     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2dff4                 | LR__4673
2dff4                 | LR__4674
2dff4                 | LR__4675
2dff4                 | ' 				remove_chain(&sobj, dcl, 0);
2dff4                 | ' 			}
2dff4                 | ' 		}
2dff4                 | ' 		;
2dff4                 | ' 	}
2dff4                 | ' 
2dff4                 | ' 	return res ;
2dff4     08 4E 05 F1 | 	add	fp, #8
2dff8     A7 FA 01 FB | 	rdlong	result1, fp
2dffc     08 4E 85 F1 | 	sub	fp, #8
2e000     A7 F0 03 F6 | 	mov	ptra, fp
2e004     B2 00 A0 FD | 	call	#popregs_
2e008                 | _fatfs_cc_f_mkdir_ret
2e008     2D 00 64 FD | 	ret
2e00c                 | 
2e00c                 | _fatfs_cc_f_rename
2e00c     01 4A 05 F6 | 	mov	COUNT_, #1
2e010     A8 00 A0 FD | 	call	#pushregs_
2e014     9C F0 07 F1 | 	add	ptra, #156
2e018     04 4E 05 F1 | 	add	fp, #4
2e01c     A7 12 62 FC | 	wrlong	arg01, fp
2e020     04 4E 05 F1 | 	add	fp, #4
2e024     A7 14 62 FC | 	wrlong	arg02, fp
2e028     A7 12 02 F6 | 	mov	arg01, fp
2e02c     08 4E 85 F1 | 	sub	fp, #8
2e030     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2e034     04 4E 05 F1 | 	add	fp, #4
2e038     A7 12 02 F6 | 	mov	arg01, fp
2e03c     6C 4E 05 F1 | 	add	fp, #108
2e040     A7 14 02 F6 | 	mov	arg02, fp
2e044     70 4E 85 F1 | 	sub	fp, #112
2e048     02 16 06 F6 | 	mov	arg03, #2
2e04c     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2e050     0C 4E 05 F1 | 	add	fp, #12
2e054     A7 FA 61 FC | 	wrlong	result1, fp
2e058     0C 4E 85 F1 | 	sub	fp, #12
2e05c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e060     44 03 90 5D |  if_ne	jmp	#LR__4693
2e064     70 4E 05 F1 | 	add	fp, #112
2e068     A7 16 02 FB | 	rdlong	arg03, fp
2e06c     60 4E 85 F1 | 	sub	fp, #96
2e070     A7 16 62 FC | 	wrlong	arg03, fp
2e074     A7 12 02 F6 | 	mov	arg01, fp
2e078     0C 4E 85 F1 | 	sub	fp, #12
2e07c     A7 14 02 FB | 	rdlong	arg02, fp
2e080     04 4E 85 F1 | 	sub	fp, #4
2e084     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
2e088     0C 4E 05 F1 | 	add	fp, #12
2e08c     A7 FA 61 FC | 	wrlong	result1, fp
2e090     00 FA 4D F2 | 	cmps	result1, #0 wz
2e094     0C 4E 85 F1 | 	sub	fp, #12
2e098     1C 00 90 5D |  if_ne	jmp	#LR__4680
2e09c     3B 4E 05 F1 | 	add	fp, #59
2e0a0     A7 FA C1 FA | 	rdbyte	result1, fp
2e0a4     3B 4E 85 F1 | 	sub	fp, #59
2e0a8     A0 FA CD F7 | 	test	result1, #160 wz
2e0ac     0C 4E 05 51 |  if_ne	add	fp, #12
2e0b0     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2e0b4     0C 4E 85 51 |  if_ne	sub	fp, #12
2e0b8                 | LR__4680
2e0b8     0C 4E 05 F1 | 	add	fp, #12
2e0bc     A7 1E 0A FB | 	rdlong	local01, fp wz
2e0c0     0C 4E 85 F1 | 	sub	fp, #12
2e0c4     E0 02 90 5D |  if_ne	jmp	#LR__4692
2e0c8     74 4E 05 F1 | 	add	fp, #116
2e0cc     A7 12 02 F6 | 	mov	arg01, fp
2e0d0     48 4E 85 F1 | 	sub	fp, #72
2e0d4     A7 14 02 FB | 	rdlong	arg02, fp
2e0d8     2C 4E 85 F1 | 	sub	fp, #44
2e0dc     20 16 06 F6 | 	mov	arg03, #32
2e0e0     58 28 BF FD | 	call	#__system____builtin_memmove
2e0e4     40 4E 05 F1 | 	add	fp, #64
2e0e8     A7 12 02 F6 | 	mov	arg01, fp
2e0ec     30 4E 85 F1 | 	sub	fp, #48
2e0f0     A7 14 02 F6 | 	mov	arg02, fp
2e0f4     10 4E 85 F1 | 	sub	fp, #16
2e0f8     30 16 06 F6 | 	mov	arg03, #48
2e0fc     3C 28 BF FD | 	call	#__system____builtin_memmove
2e100     40 4E 05 F1 | 	add	fp, #64
2e104     A7 12 02 F6 | 	mov	arg01, fp
2e108     38 4E 85 F1 | 	sub	fp, #56
2e10c     A7 14 02 FB | 	rdlong	arg02, fp
2e110     08 4E 85 F1 | 	sub	fp, #8
2e114     34 CA BF FD | 	call	#_fatfs_cc_follow_path
2e118     0C 4E 05 F1 | 	add	fp, #12
2e11c     A7 FA 61 FC | 	wrlong	result1, fp
2e120     0C 4E 85 F1 | 	sub	fp, #12
2e124     00 FA 0D F2 | 	cmp	result1, #0 wz
2e128     4C 00 90 5D |  if_ne	jmp	#LR__4683
2e12c     48 4E 05 F1 | 	add	fp, #72
2e130     A7 FA 01 FB | 	rdlong	result1, fp
2e134     30 4E 85 F1 | 	sub	fp, #48
2e138     A7 16 02 FB | 	rdlong	arg03, fp
2e13c     18 4E 85 F1 | 	sub	fp, #24
2e140     0B FB 09 F2 | 	cmp	result1, arg03 wz
2e144     20 00 90 5D |  if_ne	jmp	#LR__4681
2e148     50 4E 05 F1 | 	add	fp, #80
2e14c     A7 FA 01 FB | 	rdlong	result1, fp
2e150     30 4E 85 F1 | 	sub	fp, #48
2e154     A7 16 02 FB | 	rdlong	arg03, fp
2e158     20 4E 85 F1 | 	sub	fp, #32
2e15c     0B FB 09 F2 | 	cmp	result1, arg03 wz
2e160     04 1E 06 A6 |  if_e	mov	local01, #4
2e164     04 00 90 AD |  if_e	jmp	#LR__4682
2e168                 | LR__4681
2e168     08 1E 06 F6 | 	mov	local01, #8
2e16c                 | LR__4682
2e16c     0C 4E 05 F1 | 	add	fp, #12
2e170     A7 1E 62 FC | 	wrlong	local01, fp
2e174     0C 4E 85 F1 | 	sub	fp, #12
2e178                 | LR__4683
2e178     0C 4E 05 F1 | 	add	fp, #12
2e17c     A7 1E 02 FB | 	rdlong	local01, fp
2e180     0C 4E 85 F1 | 	sub	fp, #12
2e184     04 1E 0E F2 | 	cmp	local01, #4 wz
2e188     CC 01 90 5D |  if_ne	jmp	#LR__4689
2e18c     40 4E 05 F1 | 	add	fp, #64
2e190     A7 12 02 F6 | 	mov	arg01, fp
2e194     40 4E 85 F1 | 	sub	fp, #64
2e198     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
2e19c     0C 4E 05 F1 | 	add	fp, #12
2e1a0     A7 FA 61 FC | 	wrlong	result1, fp
2e1a4     0C 4E 85 F1 | 	sub	fp, #12
2e1a8     00 FA 0D F2 | 	cmp	result1, #0 wz
2e1ac     A8 01 90 5D |  if_ne	jmp	#LR__4688
2e1b0     5C 4E 05 F1 | 	add	fp, #92
2e1b4     A7 12 02 FB | 	rdlong	arg01, fp
2e1b8     38 4E 05 F1 | 	add	fp, #56
2e1bc     A7 12 62 FC | 	wrlong	arg01, fp
2e1c0     0D 12 06 F1 | 	add	arg01, #13
2e1c4     20 4E 85 F1 | 	sub	fp, #32
2e1c8     A7 14 02 F6 | 	mov	arg02, fp
2e1cc     74 4E 85 F1 | 	sub	fp, #116
2e1d0     0D 14 06 F1 | 	add	arg02, #13
2e1d4     13 16 06 F6 | 	mov	arg03, #19
2e1d8     60 27 BF FD | 	call	#__system____builtin_memmove
2e1dc     94 4E 05 F1 | 	add	fp, #148
2e1e0     A7 1E 02 FB | 	rdlong	local01, fp
2e1e4     15 4E 85 F1 | 	sub	fp, #21
2e1e8     A7 FA C1 FA | 	rdbyte	result1, fp
2e1ec     0B 1E 06 F1 | 	add	local01, #11
2e1f0     0F FB 41 FC | 	wrbyte	result1, local01
2e1f4     15 4E 05 F1 | 	add	fp, #21
2e1f8     A7 1E 02 FB | 	rdlong	local01, fp
2e1fc     94 4E 85 F1 | 	sub	fp, #148
2e200     0B 1E 06 F1 | 	add	local01, #11
2e204     0F 1F C2 FA | 	rdbyte	local01, local01
2e208     10 1E CE F7 | 	test	local01, #16 wz
2e20c     24 00 90 5D |  if_ne	jmp	#LR__4684
2e210     94 4E 05 F1 | 	add	fp, #148
2e214     A7 FA 01 FB | 	rdlong	result1, fp
2e218     FD 1E 02 F6 | 	mov	local01, result1
2e21c     94 4E 85 F1 | 	sub	fp, #148
2e220     0B FA 05 F1 | 	add	result1, #11
2e224     FD FA C1 FA | 	rdbyte	result1, result1
2e228     20 FA 45 F5 | 	or	result1, #32
2e22c     0B 1E 06 F1 | 	add	local01, #11
2e230     0F FB 41 FC | 	wrbyte	result1, local01
2e234                 | LR__4684
2e234     70 4E 05 F1 | 	add	fp, #112
2e238     A7 1E 02 FB | 	rdlong	local01, fp
2e23c     03 1E 06 F1 | 	add	local01, #3
2e240     0F 03 48 FC | 	wrbyte	#1, local01
2e244     24 4E 05 F1 | 	add	fp, #36
2e248     A7 1E 02 FB | 	rdlong	local01, fp
2e24c     94 4E 85 F1 | 	sub	fp, #148
2e250     0B 1E 06 F1 | 	add	local01, #11
2e254     0F 1F C2 FA | 	rdbyte	local01, local01
2e258     10 1E CE F7 | 	test	local01, #16 wz
2e25c     F8 00 90 AD |  if_e	jmp	#LR__4687
2e260     18 4E 05 F1 | 	add	fp, #24
2e264     A7 16 02 FB | 	rdlong	arg03, fp
2e268     30 4E 05 F1 | 	add	fp, #48
2e26c     A7 1E 02 FB | 	rdlong	local01, fp
2e270     48 4E 85 F1 | 	sub	fp, #72
2e274     0F 17 0A F2 | 	cmp	arg03, local01 wz
2e278     DC 00 90 AD |  if_e	jmp	#LR__4687
2e27c     70 4E 05 F1 | 	add	fp, #112
2e280     A7 12 02 FB | 	rdlong	arg01, fp
2e284     09 1F 02 F6 | 	mov	local01, arg01
2e288     24 4E 05 F1 | 	add	fp, #36
2e28c     A7 14 02 FB | 	rdlong	arg02, fp
2e290     94 4E 85 F1 | 	sub	fp, #148
2e294     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
2e298     FD 14 02 F6 | 	mov	arg02, result1
2e29c     0F 13 02 F6 | 	mov	arg01, local01
2e2a0     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
2e2a4     98 4E 05 F1 | 	add	fp, #152
2e2a8     A7 FA 61 FC | 	wrlong	result1, fp
2e2ac     00 FA 4D F2 | 	cmps	result1, #0 wz
2e2b0     98 4E 85 F1 | 	sub	fp, #152
2e2b4     0C 4E 05 A1 |  if_e	add	fp, #12
2e2b8     A7 04 68 AC |  if_e	wrlong	#2, fp
2e2bc     0C 4E 85 A1 |  if_e	sub	fp, #12
2e2c0     94 00 90 AD |  if_e	jmp	#LR__4686
2e2c4     70 4E 05 F1 | 	add	fp, #112
2e2c8     A7 12 02 FB | 	rdlong	arg01, fp
2e2cc     28 4E 05 F1 | 	add	fp, #40
2e2d0     A7 14 02 FB | 	rdlong	arg02, fp
2e2d4     98 4E 85 F1 | 	sub	fp, #152
2e2d8     4C A0 BF FD | 	call	#_fatfs_cc_move_window
2e2dc     0C 4E 05 F1 | 	add	fp, #12
2e2e0     A7 FA 61 FC | 	wrlong	result1, fp
2e2e4     64 4E 05 F1 | 	add	fp, #100
2e2e8     A7 1E 02 FB | 	rdlong	local01, fp
2e2ec     54 1E 06 F1 | 	add	local01, #84
2e2f0     24 4E 05 F1 | 	add	fp, #36
2e2f4     A7 1E 62 FC | 	wrlong	local01, fp
2e2f8     88 4E 85 F1 | 	sub	fp, #136
2e2fc     A7 1E 0A FB | 	rdlong	local01, fp wz
2e300     0C 4E 85 F1 | 	sub	fp, #12
2e304     50 00 90 5D |  if_ne	jmp	#LR__4685
2e308     94 4E 05 F1 | 	add	fp, #148
2e30c     A7 1E 02 FB | 	rdlong	local01, fp
2e310     94 4E 85 F1 | 	sub	fp, #148
2e314     01 1E 06 F1 | 	add	local01, #1
2e318     0F 1F C2 FA | 	rdbyte	local01, local01
2e31c     2E 1E 0E F2 | 	cmp	local01, #46 wz
2e320     34 00 90 5D |  if_ne	jmp	#LR__4685
2e324     70 4E 05 F1 | 	add	fp, #112
2e328     A7 12 02 FB | 	rdlong	arg01, fp
2e32c     24 4E 05 F1 | 	add	fp, #36
2e330     A7 14 02 FB | 	rdlong	arg02, fp
2e334     4C 4E 85 F1 | 	sub	fp, #76
2e338     A7 16 02 FB | 	rdlong	arg03, fp
2e33c     48 4E 85 F1 | 	sub	fp, #72
2e340     50 AD BF FD | 	call	#_fatfs_cc_st_clust
2e344     70 4E 05 F1 | 	add	fp, #112
2e348     A7 1E 02 FB | 	rdlong	local01, fp
2e34c     70 4E 85 F1 | 	sub	fp, #112
2e350     03 1E 06 F1 | 	add	local01, #3
2e354     0F 03 48 FC | 	wrbyte	#1, local01
2e358                 | LR__4685
2e358                 | LR__4686
2e358                 | LR__4687
2e358                 | LR__4688
2e358                 | LR__4689
2e358     0C 4E 05 F1 | 	add	fp, #12
2e35c     A7 1E 0A FB | 	rdlong	local01, fp wz
2e360     0C 4E 85 F1 | 	sub	fp, #12
2e364     40 00 90 5D |  if_ne	jmp	#LR__4691
2e368     10 4E 05 F1 | 	add	fp, #16
2e36c     A7 12 02 F6 | 	mov	arg01, fp
2e370     10 4E 85 F1 | 	sub	fp, #16
2e374     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
2e378     0C 4E 05 F1 | 	add	fp, #12
2e37c     A7 FA 61 FC | 	wrlong	result1, fp
2e380     0C 4E 85 F1 | 	sub	fp, #12
2e384     00 FA 0D F2 | 	cmp	result1, #0 wz
2e388     1C 00 90 5D |  if_ne	jmp	#LR__4690
2e38c     70 4E 05 F1 | 	add	fp, #112
2e390     A7 12 02 FB | 	rdlong	arg01, fp
2e394     70 4E 85 F1 | 	sub	fp, #112
2e398     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
2e39c     0C 4E 05 F1 | 	add	fp, #12
2e3a0     A7 FA 61 FC | 	wrlong	result1, fp
2e3a4     0C 4E 85 F1 | 	sub	fp, #12
2e3a8                 | LR__4690
2e3a8                 | LR__4691
2e3a8                 | LR__4692
2e3a8                 | LR__4693
2e3a8                 | ' 					res = sync_fs(fs);
2e3a8                 | ' 				}
2e3a8                 | ' 			}
2e3a8                 | ' 
2e3a8                 | ' 		}
2e3a8                 | ' 		;
2e3a8                 | ' 	}
2e3a8                 | ' 
2e3a8                 | ' 	return res ;
2e3a8     0C 4E 05 F1 | 	add	fp, #12
2e3ac     A7 FA 01 FB | 	rdlong	result1, fp
2e3b0     0C 4E 85 F1 | 	sub	fp, #12
2e3b4     A7 F0 03 F6 | 	mov	ptra, fp
2e3b8     B2 00 A0 FD | 	call	#popregs_
2e3bc                 | _fatfs_cc_f_rename_ret
2e3bc     2D 00 64 FD | 	ret
2e3c0                 | 
2e3c0                 | _fatfs_cc_time
2e3c0     00 4A 05 F6 | 	mov	COUNT_, #0
2e3c4     A8 00 A0 FD | 	call	#pushregs_
2e3c8     14 F0 07 F1 | 	add	ptra, #20
2e3cc     04 4E 05 F1 | 	add	fp, #4
2e3d0     A7 12 62 FC | 	wrlong	arg01, fp
2e3d4     04 4E 05 F1 | 	add	fp, #4
2e3d8     A7 12 02 F6 | 	mov	arg01, fp
2e3dc     08 4E 85 F1 | 	sub	fp, #8
2e3e0     00 14 06 F6 | 	mov	arg02, #0
2e3e4     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
2e3e8     08 4E 05 F1 | 	add	fp, #8
2e3ec     A7 FA 01 FB | 	rdlong	result1, fp
2e3f0     08 4E 05 F1 | 	add	fp, #8
2e3f4     A7 FA 61 FC | 	wrlong	result1, fp
2e3f8     0C 4E 85 F1 | 	sub	fp, #12
2e3fc     A7 FA 09 FB | 	rdlong	result1, fp wz
2e400     04 4E 85 F1 | 	sub	fp, #4
2e404     18 00 90 AD |  if_e	jmp	#LR__4700
2e408     04 4E 05 F1 | 	add	fp, #4
2e40c     A7 FA 01 FB | 	rdlong	result1, fp
2e410     0C 4E 05 F1 | 	add	fp, #12
2e414     A7 14 02 FB | 	rdlong	arg02, fp
2e418     10 4E 85 F1 | 	sub	fp, #16
2e41c     FD 14 62 FC | 	wrlong	arg02, result1
2e420                 | LR__4700
2e420                 | '         *tp = now;
2e420                 | '     return now;
2e420     10 4E 05 F1 | 	add	fp, #16
2e424     A7 FA 01 FB | 	rdlong	result1, fp
2e428     10 4E 85 F1 | 	sub	fp, #16
2e42c     A7 F0 03 F6 | 	mov	ptra, fp
2e430     B2 00 A0 FD | 	call	#popregs_
2e434                 | _fatfs_cc_time_ret
2e434     2D 00 64 FD | 	ret
2e438                 | 
2e438                 | _fatfs_cc_mktime
2e438     06 4A 05 F6 | 	mov	COUNT_, #6
2e43c     A8 00 A0 FD | 	call	#pushregs_
2e440     09 1F 02 F6 | 	mov	local01, arg01
2e444     14 1E 06 F1 | 	add	local01, #20
2e448     0F 13 02 FB | 	rdlong	arg01, local01
2e44c     14 1E 86 F1 | 	sub	local01, #20
2e450     46 12 56 F2 | 	cmps	arg01, #70 wc
2e454                 | '                 return (time_t) -1;
2e454     01 FA 65 C6 |  if_b	neg	result1, #1
2e458     7C 01 90 CD |  if_b	jmp	#LR__4714
2e45c     03 00 00 FF 
2e460     6C 21 06 F6 | 	mov	local02, ##1900
2e464     14 1E 06 F1 | 	add	local01, #20
2e468     0F FB 01 FB | 	rdlong	result1, local01
2e46c     FD 20 02 F1 | 	add	local02, result1
2e470     08 1E 86 F1 | 	sub	local01, #8
2e474     0F 23 02 FB | 	rdlong	local03, local01
2e478     01 22 86 F1 | 	sub	local03, #1
2e47c     04 1E 06 F1 | 	add	local01, #4
2e480     0F 13 02 FB | 	rdlong	arg01, local01
2e484     10 1E 86 F1 | 	sub	local01, #16
2e488     02 12 66 F0 | 	shl	arg01, #2
2e48c     02 00 00 FF 
2e490     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
2e494     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2e498     09 FB 01 FB | 	rdlong	result1, arg01
2e49c     FD 22 02 F1 | 	add	local03, result1
2e4a0     10 13 02 F6 | 	mov	arg01, local02
2e4a4     02 00 00 FF 
2e4a8     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
2e4ac     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e4b0     00 FA 0D F2 | 	cmp	result1, #0 wz
2e4b4     1C 00 90 AD |  if_e	jmp	#LR__4710
2e4b8     00 24 06 F6 | 	mov	local04, #0
2e4bc     10 1E 06 F1 | 	add	local01, #16
2e4c0     0F FB 01 FB | 	rdlong	result1, local01
2e4c4     10 1E 86 F1 | 	sub	local01, #16
2e4c8     02 FA 55 F2 | 	cmps	result1, #2 wc
2e4cc     01 24 06 36 |  if_ae	mov	local04, #1
2e4d0     04 00 90 FD | 	jmp	#LR__4711
2e4d4                 | LR__4710
2e4d4     00 24 06 F6 | 	mov	local04, #0
2e4d8                 | LR__4711
2e4d8     04 1E 06 F1 | 	add	local01, #4
2e4dc     0F FB 01 FB | 	rdlong	result1, local01
2e4e0     04 1E 86 F1 | 	sub	local01, #4
2e4e4     0F 27 02 FB | 	rdlong	local05, local01
2e4e8     08 1E 06 F1 | 	add	local01, #8
2e4ec     0F 13 02 FB | 	rdlong	arg01, local01
2e4f0     07 00 00 FF 
2e4f4     10 12 06 FD | 	qmul	arg01, ##3600
2e4f8     12 23 02 F1 | 	add	local03, local04
2e4fc     FD 24 02 F6 | 	mov	local04, result1
2e500     04 24 66 F0 | 	shl	local04, #4
2e504     FD 24 82 F1 | 	sub	local04, result1
2e508     02 24 66 F0 | 	shl	local04, #2
2e50c     12 27 02 F1 | 	add	local05, local04
2e510     08 1E 86 F1 | 	sub	local01, #8
2e514     18 24 62 FD | 	getqx	local04
2e518     A8 00 00 FF 
2e51c     80 23 06 FD | 	qmul	local03, ##86400
2e520     12 27 02 F1 | 	add	local05, local04
2e524     10 23 02 F6 | 	mov	local03, local02
2e528     03 00 00 FF 
2e52c     B2 23 86 F1 | 	sub	local03, ##1970
2e530     18 24 62 FD | 	getqx	local04
2e534     99 F0 00 FF 
2e538     80 23 06 FD | 	qmul	local03, ##31536000
2e53c     12 27 02 F1 | 	add	local05, local04
2e540     10 23 02 F6 | 	mov	local03, local02
2e544     03 00 00 FF 
2e548     B1 23 86 F1 | 	sub	local03, ##1969
2e54c     11 29 52 F6 | 	abs	local06, local03 wc
2e550     02 28 46 F0 | 	shr	local06, #2
2e554     14 29 82 F6 | 	negc	local06, local06
2e558     03 00 00 FF 
2e55c     D1 21 56 F2 | 	cmps	local02, ##2001 wc
2e560     18 24 62 FD | 	getqx	local04
2e564     12 27 02 F1 | 	add	local05, local04
2e568     18 00 90 CD |  if_b	jmp	#LR__4712
2e56c     03 00 00 FF 
2e570     D0 21 86 F1 | 	sub	local02, ##2000
2e574     10 25 52 F6 | 	abs	local04, local02 wc
2e578     64 24 16 FD | 	qdiv	local04, #100
2e57c     18 24 62 FD | 	getqx	local04
2e580     12 29 A2 F3 | 	sumnc	local06, local04
2e584                 | LR__4712
2e584     A8 00 00 FF 
2e588     80 29 06 FD | 	qmul	local06, ##86400
2e58c     18 28 62 FD | 	getqx	local06
2e590     14 27 02 F1 | 	add	local05, local06
2e594     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2e598     02 00 00 FF 
2e59c     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2e5a0     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2e5a4     14 27 02 F1 | 	add	local05, local06
2e5a8     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2e5ac     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2e5b0     02 00 00 FF 
2e5b4     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2e5b8     01 22 0E F2 | 	cmp	local03, #1 wz
2e5bc     14 00 90 5D |  if_ne	jmp	#LR__4713
2e5c0     0F 13 02 F6 | 	mov	arg01, local01
2e5c4     DC 19 B0 FD | 	call	#_fatfs_cc___indst
2e5c8     00 FA 0D F2 | 	cmp	result1, #0 wz
2e5cc     07 00 00 5F 
2e5d0     10 26 86 51 |  if_ne	sub	local05, ##3600
2e5d4                 | LR__4713
2e5d4                 | '                 s -=  (3600L) ;
2e5d4                 | ' 
2e5d4                 | '         return s;
2e5d4     13 FB 01 F6 | 	mov	result1, local05
2e5d8                 | LR__4714
2e5d8     A7 F0 03 F6 | 	mov	ptra, fp
2e5dc     B2 00 A0 FD | 	call	#popregs_
2e5e0                 | _fatfs_cc_mktime_ret
2e5e0     2D 00 64 FD | 	ret
2e5e4                 | 
2e5e4                 | _fatfs_cc__gmtime_r
2e5e4     03 4A 05 F6 | 	mov	COUNT_, #3
2e5e8     A8 00 A0 FD | 	call	#pushregs_
2e5ec     09 1F 02 FB | 	rdlong	local01, arg01
2e5f0     A8 00 00 FF 
2e5f4     80 1F 16 FD | 	qdiv	local01, ##86400
2e5f8     18 FA 61 FD | 	getqx	result1
2e5fc     04 FA 05 F1 | 	add	result1, #4
2e600     07 FA 15 FD | 	qdiv	result1, #7
2e604     18 14 06 F1 | 	add	arg02, #24
2e608     D1 7F 27 FF 
2e60c     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
2e610     D1 7F 27 3F 
2e614     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
2e618     03 00 00 3F 
2e61c     DC 21 06 36 |  if_ae	mov	local02, ##2012
2e620     03 00 00 CF 
2e624     B2 21 06 C6 |  if_b	mov	local02, ##1970
2e628                 | ' 	  year = 1970;
2e628                 | ' 	}
2e628                 | ' 
2e628                 | ' 	for(;;) {
2e628     19 FA 61 FD | 	getqy	result1
2e62c     0A FB 61 FC | 	wrlong	result1, arg02
2e630     18 14 86 F1 | 	sub	arg02, #24
2e634                 | LR__4720
2e634     10 13 02 F6 | 	mov	arg01, local02
2e638     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e63c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e640     42 F1 00 5F 
2e644     00 23 06 56 |  if_ne	mov	local03, ##31622400
2e648     99 F0 00 AF 
2e64c     80 23 06 A6 |  if_e	mov	local03, ##31536000
2e650     11 1F 12 F2 | 	cmp	local01, local03 wc
2e654                 | ' 	    break;
2e654     01 20 06 31 |  if_ae	add	local02, #1
2e658     11 1F 82 31 |  if_ae	sub	local01, local03
2e65c     D4 FF 9F 3D |  if_ae	jmp	#LR__4720
2e660     A8 00 00 FF 
2e664     80 1F 16 FD | 	qdiv	local01, ##86400
2e668     10 23 02 F6 | 	mov	local03, local02
2e66c     03 00 00 FF 
2e670     6C 23 86 F1 | 	sub	local03, ##1900
2e674     14 14 06 F1 | 	add	arg02, #20
2e678     0A 23 62 FC | 	wrlong	local03, arg02
2e67c     08 14 06 F1 | 	add	arg02, #8
2e680     10 13 02 F6 | 	mov	arg01, local02
2e684     18 20 62 FD | 	getqx	local02
2e688     0A 21 62 FC | 	wrlong	local02, arg02
2e68c     1C 14 86 F1 | 	sub	arg02, #28
2e690     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e694     00 FA 0D F2 | 	cmp	result1, #0 wz
2e698     1D 22 06 56 |  if_ne	mov	local03, #29
2e69c     1C 22 06 A6 |  if_e	mov	local03, #28
2e6a0     02 00 00 FF 
2e6a4     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2e6a8     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2e6ac     02 00 00 FF 
2e6b0     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2e6b4                 | ' 
2e6b4                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2e6b4                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2e6b4     00 12 06 F6 | 	mov	arg01, #0
2e6b8     97 2A 48 FB | 	callpa	#(@LR__4722-@LR__4721)>>2,fcache_load_ptr_
2e6bc                 | LR__4721
2e6bc     09 23 02 F6 | 	mov	local03, arg01
2e6c0     02 22 66 F0 | 	shl	local03, #2
2e6c4     02 00 00 FF 
2e6c8     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2e6cc     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2e6d0     11 23 02 FB | 	rdlong	local03, local03
2e6d4     11 21 52 F2 | 	cmps	local02, local03 wc
2e6d8     02 00 00 FF 
2e6dc     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2e6e0     2C 00 90 CD |  if_b	jmp	#LR__4723
2e6e4     09 23 02 F6 | 	mov	local03, arg01
2e6e8     02 22 66 F0 | 	shl	local03, #2
2e6ec     02 00 00 FF 
2e6f0     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2e6f4     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2e6f8     11 23 02 FB | 	rdlong	local03, local03
2e6fc     11 21 82 F1 | 	sub	local02, local03
2e700     01 12 06 F1 | 	add	arg01, #1
2e704     02 00 00 FF 
2e708     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2e70c     AC FF 9F FD | 	jmp	#LR__4721
2e710                 | LR__4722
2e710                 | LR__4723
2e710     A8 00 00 FF 
2e714     80 1F 16 FD | 	qdiv	local01, ##86400
2e718     10 14 06 F1 | 	add	arg02, #16
2e71c     0A 13 62 FC | 	wrlong	arg01, arg02
2e720     01 20 06 F1 | 	add	local02, #1
2e724     04 14 86 F1 | 	sub	arg02, #4
2e728     0A 21 62 FC | 	wrlong	local02, arg02
2e72c     19 1E 62 FD | 	getqy	local01
2e730     07 00 00 FF 
2e734     10 1E 16 FD | 	qdiv	local01, ##3600
2e738     18 22 62 FD | 	getqx	local03
2e73c     07 00 00 FF 
2e740     10 1E 16 FD | 	qdiv	local01, ##3600
2e744     04 14 86 F1 | 	sub	arg02, #4
2e748     0A 23 62 FC | 	wrlong	local03, arg02
2e74c     19 1E 62 FD | 	getqy	local01
2e750     3C 1E 16 FD | 	qdiv	local01, #60
2e754     18 22 62 FD | 	getqx	local03
2e758     3C 1E 16 FD | 	qdiv	local01, #60
2e75c     04 14 86 F1 | 	sub	arg02, #4
2e760     0A 23 62 FC | 	wrlong	local03, arg02
2e764     04 14 86 F1 | 	sub	arg02, #4
2e768                 | '         stm->tm_isdst = 0;
2e768                 | ' 
2e768                 | ' ;
2e768                 | '         return stm;
2e768     0A FB 01 F6 | 	mov	result1, arg02
2e76c     19 22 62 FD | 	getqy	local03
2e770     0A 23 62 FC | 	wrlong	local03, arg02
2e774     20 14 06 F1 | 	add	arg02, #32
2e778     0A 01 68 FC | 	wrlong	#0, arg02
2e77c     A7 F0 03 F6 | 	mov	ptra, fp
2e780     B2 00 A0 FD | 	call	#popregs_
2e784                 | _fatfs_cc__gmtime_r_ret
2e784     2D 00 64 FD | 	ret
2e788                 | 
2e788                 | _fatfs_cc__tzset
2e788     81 01 00 FF 
2e78c     CD 12 06 F6 | 	mov	arg01, ##@LR__5035
2e790     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2e794     FD 12 02 F6 | 	mov	arg01, result1
2e798     02 00 00 FF 
2e79c     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
2e7a0     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2e7a4     02 00 00 FF 
2e7a8     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2e7ac     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
2e7b0     02 00 00 FF 
2e7b4     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2e7b8     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2e7bc     02 00 00 FF 
2e7c0     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2e7c4                 | _fatfs_cc__tzset_ret
2e7c4     2D 00 64 FD | 	ret
2e7c8                 | 
2e7c8                 | _fatfs_cc_getenv
2e7c8     06 4A 05 F6 | 	mov	COUNT_, #6
2e7cc     A8 00 A0 FD | 	call	#pushregs_
2e7d0     09 1F 02 F6 | 	mov	local01, arg01
2e7d4     09 21 02 F6 | 	mov	local02, arg01
2e7d8     97 06 48 FB | 	callpa	#(@LR__4731-@LR__4730)>>2,fcache_load_ptr_
2e7dc                 | LR__4730
2e7dc     10 FB C9 FA | 	rdbyte	result1, local02 wz
2e7e0     01 20 06 51 |  if_ne	add	local02, #1
2e7e4     F4 FF 9F 5D |  if_ne	jmp	#LR__4730
2e7e8                 | LR__4731
2e7e8     09 21 82 F1 | 	sub	local02, arg01
2e7ec     10 FB 01 F6 | 	mov	result1, local02
2e7f0     02 00 00 FF 
2e7f4     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2e7f8     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
2e7fc     02 00 00 FF 
2e800     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2e804                 | '             return 0;
2e804     00 FA 05 A6 |  if_e	mov	result1, #0
2e808     5C 00 90 AD |  if_e	jmp	#LR__4734
2e80c                 | ' 
2e80c                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
2e80c     02 00 00 FF 
2e810     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2e814     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2e818     02 00 00 FF 
2e81c     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2e820                 | LR__4732
2e820     11 25 0A FB | 	rdlong	local04, local03 wz
2e824     3C 00 90 AD |  if_e	jmp	#LR__4733
2e828     12 13 02 F6 | 	mov	arg01, local04
2e82c     0F 15 02 F6 | 	mov	arg02, local01
2e830     10 17 02 F6 | 	mov	arg03, local02
2e834     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
2e838     00 FA 0D F2 | 	cmp	result1, #0 wz
2e83c     10 27 02 A6 |  if_e	mov	local05, local02
2e840     12 27 02 A1 |  if_e	add	local05, local04
2e844     13 29 C2 AA |  if_e	rdbyte	local06, local05
2e848     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
2e84c                 | ' 			return name+len+1;
2e84c     10 25 02 A1 |  if_e	add	local04, local02
2e850     01 24 06 A1 |  if_e	add	local04, #1
2e854     12 FB 01 A6 |  if_e	mov	result1, local04
2e858     0C 00 90 AD |  if_e	jmp	#LR__4734
2e85c     04 22 06 F1 | 	add	local03, #4
2e860     BC FF 9F FD | 	jmp	#LR__4732
2e864                 | LR__4733
2e864                 | ' 	}
2e864                 | ' 	return 0;
2e864     00 FA 05 F6 | 	mov	result1, #0
2e868                 | LR__4734
2e868     A7 F0 03 F6 | 	mov	ptra, fp
2e86c     B2 00 A0 FD | 	call	#popregs_
2e870                 | _fatfs_cc_getenv_ret
2e870     2D 00 64 FD | 	ret
2e874                 | 
2e874                 | _fatfs_cc__get_fattime
2e874     00 4A 05 F6 | 	mov	COUNT_, #0
2e878     A8 00 A0 FD | 	call	#pushregs_
2e87c     34 F0 07 F1 | 	add	ptra, #52
2e880     00 12 06 F6 | 	mov	arg01, #0
2e884     38 FB BF FD | 	call	#_fatfs_cc_time
2e888     04 4E 05 F1 | 	add	fp, #4
2e88c     A7 FA 61 FC | 	wrlong	result1, fp
2e890     A7 12 02 F6 | 	mov	arg01, fp
2e894     0C 4E 05 F1 | 	add	fp, #12
2e898     A7 14 02 F6 | 	mov	arg02, fp
2e89c     10 4E 85 F1 | 	sub	fp, #16
2e8a0     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2e8a4     24 4E 05 F1 | 	add	fp, #36
2e8a8     A7 14 02 FB | 	rdlong	arg02, fp
2e8ac     50 14 86 F1 | 	sub	arg02, #80
2e8b0     09 14 66 F0 | 	shl	arg02, #9
2e8b4     04 4E 85 F1 | 	sub	fp, #4
2e8b8     A7 FA 01 FB | 	rdlong	result1, fp
2e8bc     01 FA 05 F1 | 	add	result1, #1
2e8c0     05 FA 65 F0 | 	shl	result1, #5
2e8c4     FD 14 42 F5 | 	or	arg02, result1
2e8c8     04 4E 85 F1 | 	sub	fp, #4
2e8cc     A7 FA 01 FB | 	rdlong	result1, fp
2e8d0     FD 14 42 F5 | 	or	arg02, result1
2e8d4     14 4E 85 F1 | 	sub	fp, #20
2e8d8     A7 14 62 FC | 	wrlong	arg02, fp
2e8dc     10 4E 05 F1 | 	add	fp, #16
2e8e0     A7 14 02 FB | 	rdlong	arg02, fp
2e8e4     0B 14 66 F0 | 	shl	arg02, #11
2e8e8     04 4E 85 F1 | 	sub	fp, #4
2e8ec     A7 FA 01 FB | 	rdlong	result1, fp
2e8f0     05 FA 65 F0 | 	shl	result1, #5
2e8f4     FD 14 42 F5 | 	or	arg02, result1
2e8f8     04 4E 85 F1 | 	sub	fp, #4
2e8fc     A7 FA 01 FB | 	rdlong	result1, fp
2e900     FD 14 42 F5 | 	or	arg02, result1
2e904     04 4E 85 F1 | 	sub	fp, #4
2e908     A7 14 62 FC | 	wrlong	arg02, fp
2e90c                 | ' 
2e90c                 | '     now = time(0);
2e90c                 | '     _gmtime_r (&now, &date);
2e90c                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
2e90c                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
2e90c                 | '     return (ffdate << 16) | fftime;
2e90c     04 4E 85 F1 | 	sub	fp, #4
2e910     A7 FA 01 FB | 	rdlong	result1, fp
2e914     10 FA 65 F0 | 	shl	result1, #16
2e918     08 4E 85 F1 | 	sub	fp, #8
2e91c     0A FB 41 F5 | 	or	result1, arg02
2e920     A7 F0 03 F6 | 	mov	ptra, fp
2e924     B2 00 A0 FD | 	call	#popregs_
2e928                 | _fatfs_cc__get_fattime_ret
2e928     2D 00 64 FD | 	ret
2e92c                 | 
2e92c                 | _fatfs_cc_unixtime_0960
2e92c     00 4A 05 F6 | 	mov	COUNT_, #0
2e930     A8 00 A0 FD | 	call	#pushregs_
2e934     34 F0 07 F1 | 	add	ptra, #52
2e938     04 4E 05 F1 | 	add	fp, #4
2e93c     A7 12 62 FC | 	wrlong	arg01, fp
2e940     04 4E 05 F1 | 	add	fp, #4
2e944     A7 14 62 FC | 	wrlong	arg02, fp
2e948     04 4E 85 F1 | 	sub	fp, #4
2e94c     A7 14 02 FB | 	rdlong	arg02, fp
2e950     09 14 46 F0 | 	shr	arg02, #9
2e954     7F 14 06 F5 | 	and	arg02, #127
2e958     50 FA 05 F6 | 	mov	result1, #80
2e95c     0A FB 01 F1 | 	add	result1, arg02
2e960     20 4E 05 F1 | 	add	fp, #32
2e964     A7 FA 61 FC | 	wrlong	result1, fp
2e968     20 4E 85 F1 | 	sub	fp, #32
2e96c     A7 FA 01 FB | 	rdlong	result1, fp
2e970     05 FA 45 F0 | 	shr	result1, #5
2e974     FD FA 41 F8 | 	getnib	result1, result1, #0
2e978     01 FA 85 F1 | 	sub	result1, #1
2e97c     1C 4E 05 F1 | 	add	fp, #28
2e980     A7 FA 61 FC | 	wrlong	result1, fp
2e984     1C 4E 85 F1 | 	sub	fp, #28
2e988     A7 FA 01 FB | 	rdlong	result1, fp
2e98c     1F FA 05 F5 | 	and	result1, #31
2e990     18 4E 05 F1 | 	add	fp, #24
2e994     A7 FA 61 FC | 	wrlong	result1, fp
2e998     14 4E 85 F1 | 	sub	fp, #20
2e99c     A7 FA 01 FB | 	rdlong	result1, fp
2e9a0     0B FA 45 F0 | 	shr	result1, #11
2e9a4     1F FA 05 F5 | 	and	result1, #31
2e9a8     10 4E 05 F1 | 	add	fp, #16
2e9ac     A7 FA 61 FC | 	wrlong	result1, fp
2e9b0     10 4E 85 F1 | 	sub	fp, #16
2e9b4     A7 FA 01 FB | 	rdlong	result1, fp
2e9b8     05 FA 45 F0 | 	shr	result1, #5
2e9bc     3F FA 05 F5 | 	and	result1, #63
2e9c0     0C 4E 05 F1 | 	add	fp, #12
2e9c4     A7 FA 61 FC | 	wrlong	result1, fp
2e9c8     0C 4E 85 F1 | 	sub	fp, #12
2e9cc     A7 14 02 FB | 	rdlong	arg02, fp
2e9d0     1F 14 06 F5 | 	and	arg02, #31
2e9d4     01 14 66 F0 | 	shl	arg02, #1
2e9d8     08 4E 05 F1 | 	add	fp, #8
2e9dc     A7 14 62 FC | 	wrlong	arg02, fp
2e9e0     A7 12 02 F6 | 	mov	arg01, fp
2e9e4     10 4E 85 F1 | 	sub	fp, #16
2e9e8     4C FA BF FD | 	call	#_fatfs_cc_mktime
2e9ec     0C 4E 05 F1 | 	add	fp, #12
2e9f0     A7 FA 61 FC | 	wrlong	result1, fp
2e9f4                 | ' 
2e9f4                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2e9f4                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2e9f4                 | '     date.tm_mday = (dosdate & 0x1f);
2e9f4                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2e9f4                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2e9f4                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2e9f4                 | ' 
2e9f4                 | '     t = mktime(&date);
2e9f4                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2e9f4                 | '     return t;
2e9f4     0C 4E 85 F1 | 	sub	fp, #12
2e9f8     A7 F0 03 F6 | 	mov	ptra, fp
2e9fc     B2 00 A0 FD | 	call	#popregs_
2ea00                 | _fatfs_cc_unixtime_0960_ret
2ea00     2D 00 64 FD | 	ret
2ea04                 | 
2ea04                 | _fatfs_cc__set_dos_error_0962
2ea04     09 01 02 F6 | 	mov	_var01, arg01
2ea08                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ea08                 | '     switch (derr) {
2ea08     14 00 26 F3 | 	fle	_var01, #20
2ea0c     30 00 62 FD | 	jmprel	_var01
2ea10                 | LR__4740
2ea10     50 00 90 FD | 	jmp	#LR__4741
2ea14     84 00 90 FD | 	jmp	#LR__4755
2ea18     80 00 90 FD | 	jmp	#LR__4756
2ea1c     7C 00 90 FD | 	jmp	#LR__4757
2ea20     48 00 90 FD | 	jmp	#LR__4742
2ea24     44 00 90 FD | 	jmp	#LR__4743
2ea28     40 00 90 FD | 	jmp	#LR__4744
2ea2c     44 00 90 FD | 	jmp	#LR__4745
2ea30     48 00 90 FD | 	jmp	#LR__4747
2ea34     54 00 90 FD | 	jmp	#LR__4750
2ea38     38 00 90 FD | 	jmp	#LR__4746
2ea3c     4C 00 90 FD | 	jmp	#LR__4751
2ea40     48 00 90 FD | 	jmp	#LR__4752
2ea44     44 00 90 FD | 	jmp	#LR__4753
2ea48     50 00 90 FD | 	jmp	#LR__4758
2ea4c     4C 00 90 FD | 	jmp	#LR__4758
2ea50     48 00 90 FD | 	jmp	#LR__4758
2ea54     2C 00 90 FD | 	jmp	#LR__4748
2ea58     38 00 90 FD | 	jmp	#LR__4754
2ea5c     2C 00 90 FD | 	jmp	#LR__4749
2ea60     38 00 90 FD | 	jmp	#LR__4758
2ea64                 | LR__4741
2ea64     00 02 06 F6 | 	mov	_var02, #0
2ea68                 | '         r = 0;
2ea68                 | '         break;
2ea68     34 00 90 FD | 	jmp	#LR__4759
2ea6c                 | LR__4742
2ea6c                 | LR__4743
2ea6c                 | LR__4744
2ea6c     04 02 06 F6 | 	mov	_var02, #4
2ea70                 | '         r =  4 ;
2ea70                 | '         break;
2ea70     2C 00 90 FD | 	jmp	#LR__4759
2ea74                 | LR__4745
2ea74                 | LR__4746
2ea74     06 02 06 F6 | 	mov	_var02, #6
2ea78                 | '         r =  6 ;
2ea78                 | '         break;
2ea78     24 00 90 FD | 	jmp	#LR__4759
2ea7c                 | LR__4747
2ea7c     09 02 06 F6 | 	mov	_var02, #9
2ea80                 | '         r =  9 ;
2ea80                 | '         break;
2ea80     1C 00 90 FD | 	jmp	#LR__4759
2ea84                 | LR__4748
2ea84     07 02 06 F6 | 	mov	_var02, #7
2ea88                 | '         r =  7 ;
2ea88                 | '         break;
2ea88     14 00 90 FD | 	jmp	#LR__4759
2ea8c                 | LR__4749
2ea8c                 | LR__4750
2ea8c                 | LR__4751
2ea8c                 | LR__4752
2ea8c                 | LR__4753
2ea8c     0A 02 06 F6 | 	mov	_var02, #10
2ea90                 | '         r =  10 ;
2ea90                 | '         break;
2ea90     0C 00 90 FD | 	jmp	#LR__4759
2ea94                 | LR__4754
2ea94     0B 02 06 F6 | 	mov	_var02, #11
2ea98                 | '         r =  11 ;
2ea98                 | '         break;
2ea98     04 00 90 FD | 	jmp	#LR__4759
2ea9c                 | LR__4755
2ea9c                 | LR__4756
2ea9c                 | LR__4757
2ea9c                 | LR__4758
2ea9c     0C 02 06 F6 | 	mov	_var02, #12
2eaa0                 | '         r =  12 ;
2eaa0                 | '         break;
2eaa0                 | LR__4759
2eaa0                 | '     }
2eaa0                 | '     return _seterror(r);
2eaa0     00 02 4E F2 | 	cmps	_var02, #0 wz
2eaa4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2eaa8     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2eaac     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2eab0     01 FA 65 56 |  if_ne	neg	result1, #1
2eab4     00 FA 05 A6 |  if_e	mov	result1, #0
2eab8                 | _fatfs_cc__set_dos_error_0962_ret
2eab8     2D 00 64 FD | 	ret
2eabc                 | 
2eabc                 | _fatfs_cc_v_creat
2eabc     04 4A 05 F6 | 	mov	COUNT_, #4
2eac0     A8 00 A0 FD | 	call	#pushregs_
2eac4     09 1F 02 F6 | 	mov	local01, arg01
2eac8     0A 21 02 F6 | 	mov	local02, arg02
2eacc     03 00 00 FF 
2ead0     3C 12 06 F6 | 	mov	arg01, ##1596
2ead4                 | '     return _gc_alloc(size);
2ead4     10 14 06 F6 | 	mov	arg02, #16
2ead8     28 5E BF FD | 	call	#__system___gc_doalloc
2eadc     FD 22 0A F6 | 	mov	local03, result1 wz
2eae0                 | '       return _seterror( 7 );
2eae0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2eae4     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2eae8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2eaec     01 FA 65 A6 |  if_e	neg	result1, #1
2eaf0     58 00 90 AD |  if_e	jmp	#LR__4761
2eaf4     11 13 02 F6 | 	mov	arg01, local03
2eaf8     00 14 06 F6 | 	mov	arg02, #0
2eafc     03 00 00 FF 
2eb00     3C 16 06 F6 | 	mov	arg03, ##1596
2eb04     98 00 A0 FD | 	call	#\builtin_bytefill_
2eb08     02 00 00 FF 
2eb0c     14 22 06 F1 | 	add	local03, ##1044
2eb10     11 13 02 F6 | 	mov	arg01, local03
2eb14     02 00 00 FF 
2eb18     14 22 86 F1 | 	sub	local03, ##1044
2eb1c     10 15 02 F6 | 	mov	arg02, local02
2eb20     07 16 06 F6 | 	mov	arg03, #7
2eb24     B4 CC BF FD | 	call	#_fatfs_cc_f_open
2eb28     FD 24 0A F6 | 	mov	local04, result1 wz
2eb2c     14 00 90 AD |  if_e	jmp	#LR__4760
2eb30     11 13 02 F6 | 	mov	arg01, local03
2eb34                 | '     return _gc_free(ptr);
2eb34     D8 5E BF FD | 	call	#__system___gc_free
2eb38                 | '     free(f);
2eb38                 | '     return _set_dos_error(r);
2eb38     12 13 02 F6 | 	mov	arg01, local04
2eb3c     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2eb40     08 00 90 FD | 	jmp	#LR__4761
2eb44                 | LR__4760
2eb44     0F 23 62 FC | 	wrlong	local03, local01
2eb48                 | '   }
2eb48                 | '   fil->vfsdata = f;
2eb48                 | '   return 0;
2eb48     00 FA 05 F6 | 	mov	result1, #0
2eb4c                 | LR__4761
2eb4c     A7 F0 03 F6 | 	mov	ptra, fp
2eb50     B2 00 A0 FD | 	call	#popregs_
2eb54                 | _fatfs_cc_v_creat_ret
2eb54     2D 00 64 FD | 	ret
2eb58                 | 
2eb58                 | _fatfs_cc_v_close
2eb58     02 4A 05 F6 | 	mov	COUNT_, #2
2eb5c     A8 00 A0 FD | 	call	#pushregs_
2eb60     09 1F 02 FB | 	rdlong	local01, arg01
2eb64     02 00 00 FF 
2eb68     14 1E 06 F1 | 	add	local01, ##1044
2eb6c     0F 13 02 F6 | 	mov	arg01, local01
2eb70     02 00 00 FF 
2eb74     14 1E 86 F1 | 	sub	local01, ##1044
2eb78     DC E3 BF FD | 	call	#_fatfs_cc_f_close
2eb7c     FD 20 02 F6 | 	mov	local02, result1
2eb80     0F 13 02 F6 | 	mov	arg01, local01
2eb84                 | '     return _gc_free(ptr);
2eb84     88 5E BF FD | 	call	#__system___gc_free
2eb88                 | '     FAT_FIL *f = fil->vfsdata;
2eb88                 | '     r=f_close(&f->fil);
2eb88                 | '     free(f);
2eb88                 | '     return _set_dos_error(r);
2eb88     10 13 02 F6 | 	mov	arg01, local02
2eb8c     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2eb90     A7 F0 03 F6 | 	mov	ptra, fp
2eb94     B2 00 A0 FD | 	call	#popregs_
2eb98                 | _fatfs_cc_v_close_ret
2eb98     2D 00 64 FD | 	ret
2eb9c                 | 
2eb9c                 | _fatfs_cc_v_opendir
2eb9c     04 4A 05 F6 | 	mov	COUNT_, #4
2eba0     A8 00 A0 FD | 	call	#pushregs_
2eba4     09 1F 02 F6 | 	mov	local01, arg01
2eba8     0A 21 02 F6 | 	mov	local02, arg02
2ebac     30 12 06 F6 | 	mov	arg01, #48
2ebb0                 | '     return _gc_alloc(size);
2ebb0     10 14 06 F6 | 	mov	arg02, #16
2ebb4     4C 5D BF FD | 	call	#__system___gc_doalloc
2ebb8     FD 22 0A F6 | 	mov	local03, result1 wz
2ebbc                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ebbc                 | '       return _seterror( 7 );
2ebbc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ebc0     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2ebc4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ebc8     01 FA 65 A6 |  if_e	neg	result1, #1
2ebcc     34 00 90 AD |  if_e	jmp	#LR__4771
2ebd0     10 15 02 F6 | 	mov	arg02, local02
2ebd4     11 13 02 F6 | 	mov	arg01, local03
2ebd8     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
2ebdc     FD 24 0A F6 | 	mov	local04, result1 wz
2ebe0     14 00 90 AD |  if_e	jmp	#LR__4770
2ebe4     11 13 02 F6 | 	mov	arg01, local03
2ebe8                 | '     return _gc_free(ptr);
2ebe8     24 5E BF FD | 	call	#__system___gc_free
2ebec                 | '         free(f);
2ebec                 | '         return _set_dos_error(r);
2ebec     12 13 02 F6 | 	mov	arg01, local04
2ebf0     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ebf4     0C 00 90 FD | 	jmp	#LR__4771
2ebf8                 | LR__4770
2ebf8     04 1E 06 F1 | 	add	local01, #4
2ebfc     0F 23 62 FC | 	wrlong	local03, local01
2ec00                 | '     }
2ec00                 | '     dir->vfsdata = f;
2ec00                 | '     return 0;
2ec00     00 FA 05 F6 | 	mov	result1, #0
2ec04                 | LR__4771
2ec04     A7 F0 03 F6 | 	mov	ptra, fp
2ec08     B2 00 A0 FD | 	call	#popregs_
2ec0c                 | _fatfs_cc_v_opendir_ret
2ec0c     2D 00 64 FD | 	ret
2ec10                 | 
2ec10                 | _fatfs_cc_v_closedir
2ec10     02 4A 05 F6 | 	mov	COUNT_, #2
2ec14     A8 00 A0 FD | 	call	#pushregs_
2ec18     04 12 06 F1 | 	add	arg01, #4
2ec1c     09 1F 02 FB | 	rdlong	local01, arg01
2ec20     0F 13 02 F6 | 	mov	arg01, local01
2ec24     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
2ec28     FD 20 02 F6 | 	mov	local02, result1
2ec2c     0F 13 02 F6 | 	mov	arg01, local01
2ec30                 | '     return _gc_free(ptr);
2ec30     DC 5D BF FD | 	call	#__system___gc_free
2ec34     00 20 0E F2 | 	cmp	local02, #0 wz
2ec38     10 13 02 56 |  if_ne	mov	arg01, local02
2ec3c     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0962
2ec40                 | '     return r;
2ec40     10 FB 01 F6 | 	mov	result1, local02
2ec44     A7 F0 03 F6 | 	mov	ptra, fp
2ec48     B2 00 A0 FD | 	call	#popregs_
2ec4c                 | _fatfs_cc_v_closedir_ret
2ec4c     2D 00 64 FD | 	ret
2ec50                 | 
2ec50                 | _fatfs_cc_v_readdir
2ec50     01 4A 05 F6 | 	mov	COUNT_, #1
2ec54     A8 00 A0 FD | 	call	#pushregs_
2ec58     2C F1 07 F1 | 	add	ptra, #300
2ec5c     04 4E 05 F1 | 	add	fp, #4
2ec60     A7 12 62 FC | 	wrlong	arg01, fp
2ec64     04 4E 05 F1 | 	add	fp, #4
2ec68     A7 14 62 FC | 	wrlong	arg02, fp
2ec6c     04 4E 85 F1 | 	sub	fp, #4
2ec70     A7 16 02 FB | 	rdlong	arg03, fp
2ec74     04 16 06 F1 | 	add	arg03, #4
2ec78     0B 13 02 FB | 	rdlong	arg01, arg03
2ec7c     08 4E 05 F1 | 	add	fp, #8
2ec80     A7 14 02 F6 | 	mov	arg02, fp
2ec84     0C 4E 85 F1 | 	sub	fp, #12
2ec88     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
2ec8c     28 4F 05 F1 | 	add	fp, #296
2ec90     A7 FA 61 FC | 	wrlong	result1, fp
2ec94     28 4F 85 F1 | 	sub	fp, #296
2ec98     00 FA 0D F2 | 	cmp	result1, #0 wz
2ec9c     14 00 90 AD |  if_e	jmp	#LR__4780
2eca0                 | '         return _set_dos_error(r);
2eca0     28 4F 05 F1 | 	add	fp, #296
2eca4     A7 12 02 FB | 	rdlong	arg01, fp
2eca8     28 4F 85 F1 | 	sub	fp, #296
2ecac     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ecb0     C4 00 90 FD | 	jmp	#LR__4783
2ecb4                 | LR__4780
2ecb4     28 4E 05 F1 | 	add	fp, #40
2ecb8     A7 16 CA FA | 	rdbyte	arg03, fp wz
2ecbc     28 4E 85 F1 | 	sub	fp, #40
2ecc0                 | '         return -1;
2ecc0     01 FA 65 A6 |  if_e	neg	result1, #1
2ecc4     B0 00 90 AD |  if_e	jmp	#LR__4783
2ecc8     08 4E 05 F1 | 	add	fp, #8
2eccc     A7 12 02 FB | 	rdlong	arg01, fp
2ecd0     20 4E 05 F1 | 	add	fp, #32
2ecd4     A7 14 02 F6 | 	mov	arg02, fp
2ecd8     28 4E 85 F1 | 	sub	fp, #40
2ecdc     3F 16 06 F6 | 	mov	arg03, #63
2ece0     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
2ece4     08 4E 05 F1 | 	add	fp, #8
2ece8     A7 16 02 FB | 	rdlong	arg03, fp
2ecec     3F 16 06 F1 | 	add	arg03, #63
2ecf0     0B 01 48 FC | 	wrbyte	#0, arg03
2ecf4     0C 4E 05 F1 | 	add	fp, #12
2ecf8     A7 16 C2 FA | 	rdbyte	arg03, fp
2ecfc     14 4E 85 F1 | 	sub	fp, #20
2ed00     10 16 CE F7 | 	test	arg03, #16 wz
2ed04     18 00 90 AD |  if_e	jmp	#LR__4781
2ed08     08 4E 05 F1 | 	add	fp, #8
2ed0c     A7 16 02 FB | 	rdlong	arg03, fp
2ed10     08 4E 85 F1 | 	sub	fp, #8
2ed14     50 16 06 F1 | 	add	arg03, #80
2ed18     0B 03 48 FC | 	wrbyte	#1, arg03
2ed1c     14 00 90 FD | 	jmp	#LR__4782
2ed20                 | LR__4781
2ed20     08 4E 05 F1 | 	add	fp, #8
2ed24     A7 16 02 FB | 	rdlong	arg03, fp
2ed28     08 4E 85 F1 | 	sub	fp, #8
2ed2c     50 16 06 F1 | 	add	arg03, #80
2ed30     0B 01 48 FC | 	wrbyte	#0, arg03
2ed34                 | LR__4782
2ed34     08 4E 05 F1 | 	add	fp, #8
2ed38     A7 16 02 FB | 	rdlong	arg03, fp
2ed3c     04 4E 05 F1 | 	add	fp, #4
2ed40     A7 14 02 FB | 	rdlong	arg02, fp
2ed44     48 16 06 F1 | 	add	arg03, #72
2ed48     0B 15 62 FC | 	wrlong	arg02, arg03
2ed4c     04 4E 85 F1 | 	sub	fp, #4
2ed50     A7 1E 02 FB | 	rdlong	local01, fp
2ed54     08 4E 05 F1 | 	add	fp, #8
2ed58     A7 12 E2 FA | 	rdword	arg01, fp
2ed5c     02 4E 05 F1 | 	add	fp, #2
2ed60     A7 14 E2 FA | 	rdword	arg02, fp
2ed64     12 4E 85 F1 | 	sub	fp, #18
2ed68     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0960
2ed6c     4C 1E 06 F1 | 	add	local01, #76
2ed70     0F FB 61 FC | 	wrlong	result1, local01
2ed74                 | '         ent->d_type =  (0) ;
2ed74                 | '     }
2ed74                 | '     ent->d_size = finfo.fsize;
2ed74                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2ed74                 | '     return 0;
2ed74     00 FA 05 F6 | 	mov	result1, #0
2ed78                 | LR__4783
2ed78     A7 F0 03 F6 | 	mov	ptra, fp
2ed7c     B2 00 A0 FD | 	call	#popregs_
2ed80                 | _fatfs_cc_v_readdir_ret
2ed80     2D 00 64 FD | 	ret
2ed84                 | 
2ed84                 | _fatfs_cc_v_stat
2ed84     03 4A 05 F6 | 	mov	COUNT_, #3
2ed88     A8 00 A0 FD | 	call	#pushregs_
2ed8c     30 F1 07 F1 | 	add	ptra, #304
2ed90     04 4E 05 F1 | 	add	fp, #4
2ed94     A7 12 62 FC | 	wrlong	arg01, fp
2ed98     04 4E 05 F1 | 	add	fp, #4
2ed9c     A7 14 62 FC | 	wrlong	arg02, fp
2eda0     08 4E 85 F1 | 	sub	fp, #8
2eda4     0A 13 02 F6 | 	mov	arg01, arg02
2eda8     00 14 06 F6 | 	mov	arg02, #0
2edac     30 16 06 F6 | 	mov	arg03, #48
2edb0     98 00 A0 FD | 	call	#\builtin_bytefill_
2edb4     04 4E 05 F1 | 	add	fp, #4
2edb8     A7 FA 01 FB | 	rdlong	result1, fp
2edbc     04 4E 85 F1 | 	sub	fp, #4
2edc0     FD FA C9 FA | 	rdbyte	result1, result1 wz
2edc4     2C 00 90 AD |  if_e	jmp	#LR__4790
2edc8     04 4E 05 F1 | 	add	fp, #4
2edcc     A7 FA 01 FB | 	rdlong	result1, fp
2edd0     04 4E 85 F1 | 	sub	fp, #4
2edd4     FD FA C1 FA | 	rdbyte	result1, result1
2edd8     2E FA 0D F2 | 	cmp	result1, #46 wz
2eddc     04 4E 05 A1 |  if_e	add	fp, #4
2ede0     A7 1E 02 AB |  if_e	rdlong	local01, fp
2ede4     04 4E 85 A1 |  if_e	sub	fp, #4
2ede8     01 1E 06 A1 |  if_e	add	local01, #1
2edec     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2edf0     18 00 90 5D |  if_ne	jmp	#LR__4791
2edf4                 | LR__4790
2edf4     18 4E 05 F1 | 	add	fp, #24
2edf8     A7 20 48 FC | 	wrbyte	#16, fp
2edfc     0C 4E 85 F1 | 	sub	fp, #12
2ee00     A7 00 68 FC | 	wrlong	#0, fp
2ee04     0C 4E 85 F1 | 	sub	fp, #12
2ee08     24 00 90 FD | 	jmp	#LR__4792
2ee0c                 | LR__4791
2ee0c     04 4E 05 F1 | 	add	fp, #4
2ee10     A7 12 02 FB | 	rdlong	arg01, fp
2ee14     0C 4E 05 F1 | 	add	fp, #12
2ee18     A7 14 02 F6 | 	mov	arg02, fp
2ee1c     10 4E 85 F1 | 	sub	fp, #16
2ee20     AC EB BF FD | 	call	#_fatfs_cc_f_stat
2ee24     0C 4E 05 F1 | 	add	fp, #12
2ee28     A7 FA 61 FC | 	wrlong	result1, fp
2ee2c     0C 4E 85 F1 | 	sub	fp, #12
2ee30                 | LR__4792
2ee30     0C 4E 05 F1 | 	add	fp, #12
2ee34     A7 20 0A FB | 	rdlong	local02, fp wz
2ee38     0C 4E 85 F1 | 	sub	fp, #12
2ee3c     14 00 90 AD |  if_e	jmp	#LR__4793
2ee40                 | '         return _set_dos_error(r);
2ee40     0C 4E 05 F1 | 	add	fp, #12
2ee44     A7 12 02 FB | 	rdlong	arg01, fp
2ee48     0C 4E 85 F1 | 	sub	fp, #12
2ee4c     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ee50     14 01 90 FD | 	jmp	#LR__4794
2ee54                 | LR__4793
2ee54     2C 4F 05 F1 | 	add	fp, #300
2ee58     A7 48 6A FC | 	wrlong	#292, fp
2ee5c     14 4F 85 F1 | 	sub	fp, #276
2ee60     A7 22 C2 FA | 	rdbyte	local03, fp
2ee64     18 4E 85 F1 | 	sub	fp, #24
2ee68     01 22 CE F7 | 	test	local03, #1 wz
2ee6c     2C 4F 05 A1 |  if_e	add	fp, #300
2ee70     A7 22 02 AB |  if_e	rdlong	local03, fp
2ee74     92 22 46 A5 |  if_e	or	local03, #146
2ee78     A7 22 62 AC |  if_e	wrlong	local03, fp
2ee7c     2C 4F 85 A1 |  if_e	sub	fp, #300
2ee80     18 4E 05 F1 | 	add	fp, #24
2ee84     A7 22 C2 FA | 	rdbyte	local03, fp
2ee88     18 4E 85 F1 | 	sub	fp, #24
2ee8c     10 22 CE F7 | 	test	local03, #16 wz
2ee90     2C 4F 05 51 |  if_ne	add	fp, #300
2ee94     A7 22 02 5B |  if_ne	rdlong	local03, fp
2ee98     08 00 00 5F 
2ee9c     49 22 46 55 |  if_ne	or	local03, ##4169
2eea0     A7 22 62 5C |  if_ne	wrlong	local03, fp
2eea4     2C 4F 85 51 |  if_ne	sub	fp, #300
2eea8     08 4E 05 F1 | 	add	fp, #8
2eeac     A7 22 02 FB | 	rdlong	local03, fp
2eeb0     24 4F 05 F1 | 	add	fp, #292
2eeb4     A7 20 02 FB | 	rdlong	local02, fp
2eeb8     08 22 06 F1 | 	add	local03, #8
2eebc     11 21 62 FC | 	wrlong	local02, local03
2eec0     24 4F 85 F1 | 	sub	fp, #292
2eec4     A7 22 02 FB | 	rdlong	local03, fp
2eec8     0C 22 06 F1 | 	add	local03, #12
2eecc     11 03 68 FC | 	wrlong	#1, local03
2eed0     A7 22 02 FB | 	rdlong	local03, fp
2eed4     08 4E 05 F1 | 	add	fp, #8
2eed8     A7 20 02 FB | 	rdlong	local02, fp
2eedc     18 22 06 F1 | 	add	local03, #24
2eee0     11 21 62 FC | 	wrlong	local02, local03
2eee4     08 4E 85 F1 | 	sub	fp, #8
2eee8     A7 22 02 FB | 	rdlong	local03, fp
2eeec     1C 22 06 F1 | 	add	local03, #28
2eef0     01 00 80 FF 
2eef4     11 01 68 FC | 	wrlong	##512, local03
2eef8     A7 20 02 FB | 	rdlong	local02, fp
2eefc     10 23 02 F6 | 	mov	local03, local02
2ef00     18 20 06 F1 | 	add	local02, #24
2ef04     10 21 02 FB | 	rdlong	local02, local02
2ef08     FF 21 06 F1 | 	add	local02, #511
2ef0c     10 21 52 F6 | 	abs	local02, local02 wc
2ef10     09 20 46 F0 | 	shr	local02, #9
2ef14     10 21 82 F6 | 	negc	local02, local02
2ef18     20 22 06 F1 | 	add	local03, #32
2ef1c     11 21 62 FC | 	wrlong	local02, local03
2ef20     A7 20 02 FB | 	rdlong	local02, fp
2ef24     10 23 02 F6 | 	mov	local03, local02
2ef28     10 1F 02 F6 | 	mov	local01, local02
2ef2c     0C 4E 05 F1 | 	add	fp, #12
2ef30     A7 12 E2 FA | 	rdword	arg01, fp
2ef34     02 4E 05 F1 | 	add	fp, #2
2ef38     A7 14 E2 FA | 	rdword	arg02, fp
2ef3c     16 4E 85 F1 | 	sub	fp, #22
2ef40     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0960
2ef44     2C 1E 06 F1 | 	add	local01, #44
2ef48     0F FB 61 FC | 	wrlong	result1, local01
2ef4c     28 20 06 F1 | 	add	local02, #40
2ef50     10 FB 61 FC | 	wrlong	result1, local02
2ef54     24 22 06 F1 | 	add	local03, #36
2ef58     11 FB 61 FC | 	wrlong	result1, local03
2ef5c                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
2ef5c                 | '     }
2ef5c                 | '     buf->st_mode = mode;
2ef5c                 | '     buf->st_nlink = 1;
2ef5c                 | '     buf->st_size = finfo.fsize;
2ef5c                 | '     buf->st_blksize = 512;
2ef5c                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
2ef5c                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
2ef5c                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ef5c                 | '     return r;
2ef5c     0C 4E 05 F1 | 	add	fp, #12
2ef60     A7 FA 01 FB | 	rdlong	result1, fp
2ef64     0C 4E 85 F1 | 	sub	fp, #12
2ef68                 | LR__4794
2ef68     A7 F0 03 F6 | 	mov	ptra, fp
2ef6c     B2 00 A0 FD | 	call	#popregs_
2ef70                 | _fatfs_cc_v_stat_ret
2ef70     2D 00 64 FD | 	ret
2ef74                 | 
2ef74                 | _fatfs_cc_v_read
2ef74     00 4A 05 F6 | 	mov	COUNT_, #0
2ef78     A8 00 A0 FD | 	call	#pushregs_
2ef7c     1C F0 07 F1 | 	add	ptra, #28
2ef80     04 4E 05 F1 | 	add	fp, #4
2ef84     A7 12 62 FC | 	wrlong	arg01, fp
2ef88     04 4E 05 F1 | 	add	fp, #4
2ef8c     A7 14 62 FC | 	wrlong	arg02, fp
2ef90     04 4E 05 F1 | 	add	fp, #4
2ef94     A7 16 62 FC | 	wrlong	arg03, fp
2ef98     08 4E 85 F1 | 	sub	fp, #8
2ef9c     A7 12 02 FB | 	rdlong	arg01, fp
2efa0     09 13 0A FB | 	rdlong	arg01, arg01 wz
2efa4     0C 4E 05 F1 | 	add	fp, #12
2efa8     A7 12 62 FC | 	wrlong	arg01, fp
2efac     10 4E 85 F1 | 	sub	fp, #16
2efb0                 | '         return _seterror( 5 );
2efb0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2efb4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2efb8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2efbc     01 FA 65 A6 |  if_e	neg	result1, #1
2efc0     B8 00 90 AD |  if_e	jmp	#LR__4802
2efc4     10 4E 05 F1 | 	add	fp, #16
2efc8     A7 12 02 FB | 	rdlong	arg01, fp
2efcc     02 00 00 FF 
2efd0     14 12 06 F1 | 	add	arg01, ##1044
2efd4     08 4E 85 F1 | 	sub	fp, #8
2efd8     A7 14 02 FB | 	rdlong	arg02, fp
2efdc     04 4E 05 F1 | 	add	fp, #4
2efe0     A7 16 02 FB | 	rdlong	arg03, fp
2efe4     0C 4E 05 F1 | 	add	fp, #12
2efe8     A7 18 02 F6 | 	mov	arg04, fp
2efec     18 4E 85 F1 | 	sub	fp, #24
2eff0     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2eff4     14 4E 05 F1 | 	add	fp, #20
2eff8     A7 FA 61 FC | 	wrlong	result1, fp
2effc     14 4E 85 F1 | 	sub	fp, #20
2f000     00 FA 0D F2 | 	cmp	result1, #0 wz
2f004     34 00 90 AD |  if_e	jmp	#LR__4800
2f008     04 4E 05 F1 | 	add	fp, #4
2f00c     A7 18 02 FB | 	rdlong	arg04, fp
2f010     0C 17 02 F6 | 	mov	arg03, arg04
2f014     08 18 06 F1 | 	add	arg04, #8
2f018     0C 19 02 FB | 	rdlong	arg04, arg04
2f01c     20 18 46 F5 | 	or	arg04, #32
2f020     08 16 06 F1 | 	add	arg03, #8
2f024     0B 19 62 FC | 	wrlong	arg04, arg03
2f028                 | '         fil->state |=  (0x20) ;
2f028                 | '         return _set_dos_error(r);
2f028     10 4E 05 F1 | 	add	fp, #16
2f02c     A7 12 02 FB | 	rdlong	arg01, fp
2f030     14 4E 85 F1 | 	sub	fp, #20
2f034     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f038     40 00 90 FD | 	jmp	#LR__4802
2f03c                 | LR__4800
2f03c     18 4E 05 F1 | 	add	fp, #24
2f040     A7 FA 09 FB | 	rdlong	result1, fp wz
2f044     18 4E 85 F1 | 	sub	fp, #24
2f048     24 00 90 5D |  if_ne	jmp	#LR__4801
2f04c     04 4E 05 F1 | 	add	fp, #4
2f050     A7 FA 01 FB | 	rdlong	result1, fp
2f054     FD 18 02 F6 | 	mov	arg04, result1
2f058     04 4E 85 F1 | 	sub	fp, #4
2f05c     08 FA 05 F1 | 	add	result1, #8
2f060     FD FA 01 FB | 	rdlong	result1, result1
2f064     10 FA 45 F5 | 	or	result1, #16
2f068     08 18 06 F1 | 	add	arg04, #8
2f06c     0C FB 61 FC | 	wrlong	result1, arg04
2f070                 | LR__4801
2f070                 | '         fil->state |=  (0x10) ;
2f070                 | '     }
2f070                 | '     return x;
2f070     18 4E 05 F1 | 	add	fp, #24
2f074     A7 FA 01 FB | 	rdlong	result1, fp
2f078     18 4E 85 F1 | 	sub	fp, #24
2f07c                 | LR__4802
2f07c     A7 F0 03 F6 | 	mov	ptra, fp
2f080     B2 00 A0 FD | 	call	#popregs_
2f084                 | _fatfs_cc_v_read_ret
2f084     2D 00 64 FD | 	ret
2f088                 | 
2f088                 | _fatfs_cc_v_write
2f088     00 4A 05 F6 | 	mov	COUNT_, #0
2f08c     A8 00 A0 FD | 	call	#pushregs_
2f090     1C F0 07 F1 | 	add	ptra, #28
2f094     04 4E 05 F1 | 	add	fp, #4
2f098     A7 12 62 FC | 	wrlong	arg01, fp
2f09c     04 4E 05 F1 | 	add	fp, #4
2f0a0     A7 14 62 FC | 	wrlong	arg02, fp
2f0a4     04 4E 05 F1 | 	add	fp, #4
2f0a8     A7 16 62 FC | 	wrlong	arg03, fp
2f0ac     08 4E 85 F1 | 	sub	fp, #8
2f0b0     A7 12 02 FB | 	rdlong	arg01, fp
2f0b4     09 13 0A FB | 	rdlong	arg01, arg01 wz
2f0b8     0C 4E 05 F1 | 	add	fp, #12
2f0bc     A7 12 62 FC | 	wrlong	arg01, fp
2f0c0     10 4E 85 F1 | 	sub	fp, #16
2f0c4                 | '         return _seterror( 5 );
2f0c4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f0c8     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f0cc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f0d0     01 FA 65 A6 |  if_e	neg	result1, #1
2f0d4     84 00 90 AD |  if_e	jmp	#LR__4811
2f0d8     10 4E 05 F1 | 	add	fp, #16
2f0dc     A7 12 02 FB | 	rdlong	arg01, fp
2f0e0     02 00 00 FF 
2f0e4     14 12 06 F1 | 	add	arg01, ##1044
2f0e8     08 4E 85 F1 | 	sub	fp, #8
2f0ec     A7 14 02 FB | 	rdlong	arg02, fp
2f0f0     04 4E 05 F1 | 	add	fp, #4
2f0f4     A7 16 02 FB | 	rdlong	arg03, fp
2f0f8     0C 4E 05 F1 | 	add	fp, #12
2f0fc     A7 18 02 F6 | 	mov	arg04, fp
2f100     18 4E 85 F1 | 	sub	fp, #24
2f104     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2f108     14 4E 05 F1 | 	add	fp, #20
2f10c     A7 FA 61 FC | 	wrlong	result1, fp
2f110     14 4E 85 F1 | 	sub	fp, #20
2f114     00 FA 0D F2 | 	cmp	result1, #0 wz
2f118     34 00 90 AD |  if_e	jmp	#LR__4810
2f11c     04 4E 05 F1 | 	add	fp, #4
2f120     A7 18 02 FB | 	rdlong	arg04, fp
2f124     0C 17 02 F6 | 	mov	arg03, arg04
2f128     08 18 06 F1 | 	add	arg04, #8
2f12c     0C 19 02 FB | 	rdlong	arg04, arg04
2f130     20 18 46 F5 | 	or	arg04, #32
2f134     08 16 06 F1 | 	add	arg03, #8
2f138     0B 19 62 FC | 	wrlong	arg04, arg03
2f13c                 | '         fil->state |=  (0x20) ;
2f13c                 | '         return _set_dos_error(r);
2f13c     10 4E 05 F1 | 	add	fp, #16
2f140     A7 12 02 FB | 	rdlong	arg01, fp
2f144     14 4E 85 F1 | 	sub	fp, #20
2f148     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f14c     0C 00 90 FD | 	jmp	#LR__4811
2f150                 | LR__4810
2f150                 | '     }
2f150                 | '     return x;
2f150     18 4E 05 F1 | 	add	fp, #24
2f154     A7 FA 01 FB | 	rdlong	result1, fp
2f158     18 4E 85 F1 | 	sub	fp, #24
2f15c                 | LR__4811
2f15c     A7 F0 03 F6 | 	mov	ptra, fp
2f160     B2 00 A0 FD | 	call	#popregs_
2f164                 | _fatfs_cc_v_write_ret
2f164     2D 00 64 FD | 	ret
2f168                 | 
2f168                 | _fatfs_cc_v_lseek
2f168     04 4A 05 F6 | 	mov	COUNT_, #4
2f16c     A8 00 A0 FD | 	call	#pushregs_
2f170     0A 1F 02 F6 | 	mov	local01, arg02
2f174     0B 21 02 F6 | 	mov	local02, arg03
2f178     09 23 02 FB | 	rdlong	local03, arg01
2f17c     02 00 00 FF 
2f180     14 22 0E F1 | 	add	local03, ##1044 wz
2f184                 | '         return _seterror( 5 );
2f184     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f188     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f18c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f190     01 FA 65 A6 |  if_e	neg	result1, #1
2f194     4C 00 90 AD |  if_e	jmp	#LR__4822
2f198     00 20 0E F2 | 	cmp	local02, #0 wz
2f19c     24 00 90 AD |  if_e	jmp	#LR__4820
2f1a0     01 20 0E F2 | 	cmp	local02, #1 wz
2f1a4     14 22 06 A1 |  if_e	add	local03, #20
2f1a8     11 25 02 AB |  if_e	rdlong	local04, local03
2f1ac     14 22 86 A1 |  if_e	sub	local03, #20
2f1b0     12 1F 02 A1 |  if_e	add	local01, local04
2f1b4     0C 22 06 51 |  if_ne	add	local03, #12
2f1b8     11 25 02 5B |  if_ne	rdlong	local04, local03
2f1bc     0C 22 86 51 |  if_ne	sub	local03, #12
2f1c0     12 1F 02 51 |  if_ne	add	local01, local04
2f1c4                 | LR__4820
2f1c4     0F 15 02 F6 | 	mov	arg02, local01
2f1c8     11 13 02 F6 | 	mov	arg01, local03
2f1cc     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2f1d0     FD 12 0A F6 | 	mov	arg01, result1 wz
2f1d4     08 00 90 AD |  if_e	jmp	#LR__4821
2f1d8                 | '         return _set_dos_error(result);
2f1d8     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f1dc     04 00 90 FD | 	jmp	#LR__4822
2f1e0                 | LR__4821
2f1e0                 | '     }
2f1e0                 | '     return offset;
2f1e0     0F FB 01 F6 | 	mov	result1, local01
2f1e4                 | LR__4822
2f1e4     A7 F0 03 F6 | 	mov	ptra, fp
2f1e8     B2 00 A0 FD | 	call	#popregs_
2f1ec                 | _fatfs_cc_v_lseek_ret
2f1ec     2D 00 64 FD | 	ret
2f1f0                 | 
2f1f0                 | _fatfs_cc_v_ioctl
2f1f0                 | ' {
2f1f0                 | '     return _seterror( 10 );
2f1f0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2f1f4     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2f1f8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2f1fc     01 FA 65 F6 | 	neg	result1, #1
2f200                 | _fatfs_cc_v_ioctl_ret
2f200     2D 00 64 FD | 	ret
2f204                 | 
2f204                 | _fatfs_cc_v_mkdir
2f204     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
2f208     FD 12 02 F6 | 	mov	arg01, result1
2f20c                 | ' 
2f20c                 | '     r = f_mkdir(name);
2f20c                 | '     return _set_dos_error(r);
2f20c     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f210                 | _fatfs_cc_v_mkdir_ret
2f210     2D 00 64 FD | 	ret
2f214                 | 
2f214                 | _fatfs_cc_v_remove
2f214     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2f218     FD 12 02 F6 | 	mov	arg01, result1
2f21c                 | ' 
2f21c                 | '     r = f_unlink(name);
2f21c                 | '     return _set_dos_error(r);
2f21c     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f220                 | _fatfs_cc_v_remove_ret
2f220     2D 00 64 FD | 	ret
2f224                 | 
2f224                 | _fatfs_cc_v_rmdir
2f224     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2f228     FD 12 02 F6 | 	mov	arg01, result1
2f22c                 | ' 
2f22c                 | '     r = f_unlink(name);
2f22c                 | '     return _set_dos_error(r);
2f22c     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f230                 | _fatfs_cc_v_rmdir_ret
2f230     2D 00 64 FD | 	ret
2f234                 | 
2f234                 | _fatfs_cc_v_rename
2f234     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
2f238     FD 12 02 F6 | 	mov	arg01, result1
2f23c                 | '     return _set_dos_error(r);
2f23c     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f240                 | _fatfs_cc_v_rename_ret
2f240     2D 00 64 FD | 	ret
2f244                 | 
2f244                 | _fatfs_cc_v_open
2f244     07 4A 05 F6 | 	mov	COUNT_, #7
2f248     A8 00 A0 FD | 	call	#pushregs_
2f24c     09 1F 02 F6 | 	mov	local01, arg01
2f250     0A 21 02 F6 | 	mov	local02, arg02
2f254     0B 23 02 F6 | 	mov	local03, arg03
2f258     03 00 00 FF 
2f25c     3C 12 06 F6 | 	mov	arg01, ##1596
2f260                 | '     return _gc_alloc(size);
2f260     10 14 06 F6 | 	mov	arg02, #16
2f264     9C 56 BF FD | 	call	#__system___gc_doalloc
2f268     FD 24 0A F6 | 	mov	local04, result1 wz
2f26c                 | '       return _seterror( 7 );
2f26c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f270     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2f274     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f278     01 FA 65 A6 |  if_e	neg	result1, #1
2f27c     98 00 90 AD |  if_e	jmp	#LR__4836
2f280     12 13 02 F6 | 	mov	arg01, local04
2f284     00 14 06 F6 | 	mov	arg02, #0
2f288     03 00 00 FF 
2f28c     3C 16 06 F6 | 	mov	arg03, ##1596
2f290     98 00 A0 FD | 	call	#\builtin_bytefill_
2f294                 | '   switch (flags & 3) {
2f294     11 27 02 F6 | 	mov	local05, local03
2f298     03 26 0E F5 | 	and	local05, #3 wz
2f29c     0C 00 90 AD |  if_e	jmp	#LR__4830
2f2a0     01 26 0E F2 | 	cmp	local05, #1 wz
2f2a4     0C 00 90 AD |  if_e	jmp	#LR__4831
2f2a8     10 00 90 FD | 	jmp	#LR__4832
2f2ac                 | LR__4830
2f2ac     01 28 06 F6 | 	mov	local06, #1
2f2b0                 | '       fs_flags =  0x01 ;
2f2b0                 | '       break;
2f2b0     0C 00 90 FD | 	jmp	#LR__4833
2f2b4                 | LR__4831
2f2b4     02 28 06 F6 | 	mov	local06, #2
2f2b8                 | '       fs_flags =  0x02 ;
2f2b8                 | '       break;
2f2b8     04 00 90 FD | 	jmp	#LR__4833
2f2bc                 | LR__4832
2f2bc     03 28 06 F6 | 	mov	local06, #3
2f2c0                 | '       fs_flags =  0x01  |  0x02 ;
2f2c0                 | '       break;
2f2c0                 | LR__4833
2f2c0     08 22 CE F7 | 	test	local03, #8 wz
2f2c4     18 28 46 55 |  if_ne	or	local06, #24
2f2c8     08 00 90 5D |  if_ne	jmp	#LR__4834
2f2cc     20 22 CE F7 | 	test	local03, #32 wz
2f2d0     30 28 46 55 |  if_ne	or	local06, #48
2f2d4                 | LR__4834
2f2d4     02 00 00 FF 
2f2d8     14 24 06 F1 | 	add	local04, ##1044
2f2dc     12 13 02 F6 | 	mov	arg01, local04
2f2e0     02 00 00 FF 
2f2e4     14 24 86 F1 | 	sub	local04, ##1044
2f2e8     10 15 02 F6 | 	mov	arg02, local02
2f2ec     14 17 02 F6 | 	mov	arg03, local06
2f2f0     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
2f2f4     FD 2A 0A F6 | 	mov	local07, result1 wz
2f2f8     14 00 90 AD |  if_e	jmp	#LR__4835
2f2fc     12 13 02 F6 | 	mov	arg01, local04
2f300                 | '     return _gc_free(ptr);
2f300     0C 57 BF FD | 	call	#__system___gc_free
2f304                 | '     free(f);
2f304                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f304                 | '     return _set_dos_error(r);
2f304     15 13 02 F6 | 	mov	arg01, local07
2f308     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f30c     08 00 90 FD | 	jmp	#LR__4836
2f310                 | LR__4835
2f310     0F 25 62 FC | 	wrlong	local04, local01
2f314                 | '   }
2f314                 | '   fil->vfsdata = f;
2f314                 | '   return 0;
2f314     00 FA 05 F6 | 	mov	result1, #0
2f318                 | LR__4836
2f318     A7 F0 03 F6 | 	mov	ptra, fp
2f31c     B2 00 A0 FD | 	call	#popregs_
2f320                 | _fatfs_cc_v_open_ret
2f320     2D 00 64 FD | 	ret
2f324                 | 
2f324                 | _fatfs_cc_v_flush
2f324     09 13 02 FB | 	rdlong	arg01, arg01
2f328     02 00 00 FF 
2f32c     14 12 0E F1 | 	add	arg01, ##1044 wz
2f330                 | '         return _seterror( 5 );
2f330     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f334     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f338     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f33c     01 FA 65 A6 |  if_e	neg	result1, #1
2f340     0C 00 90 AD |  if_e	jmp	#LR__4840
2f344     00 DA BF FD | 	call	#_fatfs_cc_f_sync
2f348     FD 12 02 F6 | 	mov	arg01, result1
2f34c                 | '     }
2f34c                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f34c                 | '     result = f_sync(f);
2f34c                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f34c                 | '     return _set_dos_error(result);
2f34c     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f350                 | LR__4840
2f350                 | _fatfs_cc_v_flush_ret
2f350     2D 00 64 FD | 	ret
2f354                 | 
2f354                 | _fatfs_cc_v_init
2f354                 | ' {
2f354                 | '     return 0;
2f354     00 FA 05 F6 | 	mov	result1, #0
2f358                 | _fatfs_cc_v_init_ret
2f358     2D 00 64 FD | 	ret
2f35c                 | 
2f35c                 | _fatfs_cc_v_deinit
2f35c     81 01 00 FF 
2f360     D0 14 06 F6 | 	mov	arg02, ##@LR__5036
2f364     00 12 06 F6 | 	mov	arg01, #0
2f368     00 16 06 F6 | 	mov	arg03, #0
2f36c     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
2f370     01 00 00 FF 
2f374     08 E4 05 F1 | 	add	objptr, ##520
2f378     F2 12 02 FB | 	rdlong	arg01, objptr
2f37c     04 E4 05 F1 | 	add	objptr, #4
2f380     F2 14 02 FB | 	rdlong	arg02, objptr
2f384     01 00 00 FF 
2f388     0C E4 85 F1 | 	sub	objptr, ##524
2f38c     14 3E BF FD | 	call	#__system___freepins
2f390                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f390                 | '     _freepins(f_pinmask);
2f390                 | '     return 0;
2f390     00 FA 05 F6 | 	mov	result1, #0
2f394                 | _fatfs_cc_v_deinit_ret
2f394     2D 00 64 FD | 	ret
2f398                 | 
2f398                 | _fatfs_cc_get_vfs
2f398     01 4A 05 F6 | 	mov	COUNT_, #1
2f39c     A8 00 A0 FD | 	call	#pushregs_
2f3a0     09 1F 02 F6 | 	mov	local01, arg01
2f3a4     50 12 06 F6 | 	mov	arg01, #80
2f3a8     28 55 BF FD | 	call	#__system___gc_alloc_managed
2f3ac     FD 12 02 F6 | 	mov	arg01, result1
2f3b0     F2 FA 01 F6 | 	mov	result1, objptr
2f3b4     00 E8 04 FF 
2f3b8     00 FA 45 F5 | 	or	result1, ##164626432
2f3bc     09 FB 61 FC | 	wrlong	result1, arg01
2f3c0     F2 FA 01 F6 | 	mov	result1, objptr
2f3c4     00 F0 04 FF 
2f3c8     00 FA 45 F5 | 	or	result1, ##165675008
2f3cc     04 12 06 F1 | 	add	arg01, #4
2f3d0     09 FB 61 FC | 	wrlong	result1, arg01
2f3d4     F2 FA 01 F6 | 	mov	result1, objptr
2f3d8     00 F8 04 FF 
2f3dc     00 FA 45 F5 | 	or	result1, ##166723584
2f3e0     04 12 06 F1 | 	add	arg01, #4
2f3e4     09 FB 61 FC | 	wrlong	result1, arg01
2f3e8     F2 FA 01 F6 | 	mov	result1, objptr
2f3ec     00 00 05 FF 
2f3f0     00 FA 45 F5 | 	or	result1, ##167772160
2f3f4     04 12 06 F1 | 	add	arg01, #4
2f3f8     09 FB 61 FC | 	wrlong	result1, arg01
2f3fc     F2 FA 01 F6 | 	mov	result1, objptr
2f400     00 08 05 FF 
2f404     00 FA 45 F5 | 	or	result1, ##168820736
2f408     04 12 06 F1 | 	add	arg01, #4
2f40c     09 FB 61 FC | 	wrlong	result1, arg01
2f410     04 12 06 F1 | 	add	arg01, #4
2f414     09 01 68 FC | 	wrlong	#0, arg01
2f418     04 12 06 F1 | 	add	arg01, #4
2f41c     09 1F 62 FC | 	wrlong	local01, arg01
2f420     04 12 06 F1 | 	add	arg01, #4
2f424     09 01 68 FC | 	wrlong	#0, arg01
2f428     F2 FA 01 F6 | 	mov	result1, objptr
2f42c     00 10 05 FF 
2f430     00 FA 45 F5 | 	or	result1, ##169869312
2f434     04 12 06 F1 | 	add	arg01, #4
2f438     09 FB 61 FC | 	wrlong	result1, arg01
2f43c     F2 FA 01 F6 | 	mov	result1, objptr
2f440     00 18 05 FF 
2f444     00 FA 45 F5 | 	or	result1, ##170917888
2f448     04 12 06 F1 | 	add	arg01, #4
2f44c     09 FB 61 FC | 	wrlong	result1, arg01
2f450     F2 FA 01 F6 | 	mov	result1, objptr
2f454     00 20 05 FF 
2f458     00 FA 45 F5 | 	or	result1, ##171966464
2f45c     04 12 06 F1 | 	add	arg01, #4
2f460     09 FB 61 FC | 	wrlong	result1, arg01
2f464     F2 FA 01 F6 | 	mov	result1, objptr
2f468     00 28 05 FF 
2f46c     00 FA 45 F5 | 	or	result1, ##173015040
2f470     04 12 06 F1 | 	add	arg01, #4
2f474     09 FB 61 FC | 	wrlong	result1, arg01
2f478     F2 FA 01 F6 | 	mov	result1, objptr
2f47c     00 30 05 FF 
2f480     00 FA 45 F5 | 	or	result1, ##174063616
2f484     04 12 06 F1 | 	add	arg01, #4
2f488     09 FB 61 FC | 	wrlong	result1, arg01
2f48c     F2 FA 01 F6 | 	mov	result1, objptr
2f490     00 38 05 FF 
2f494     00 FA 45 F5 | 	or	result1, ##175112192
2f498     04 12 06 F1 | 	add	arg01, #4
2f49c     09 FB 61 FC | 	wrlong	result1, arg01
2f4a0     F2 FA 01 F6 | 	mov	result1, objptr
2f4a4     00 40 05 FF 
2f4a8     00 FA 45 F5 | 	or	result1, ##176160768
2f4ac     04 12 06 F1 | 	add	arg01, #4
2f4b0     09 FB 61 FC | 	wrlong	result1, arg01
2f4b4     F2 FA 01 F6 | 	mov	result1, objptr
2f4b8     00 48 05 FF 
2f4bc     00 FA 45 F5 | 	or	result1, ##177209344
2f4c0     04 12 06 F1 | 	add	arg01, #4
2f4c4     09 FB 61 FC | 	wrlong	result1, arg01
2f4c8     F2 FA 01 F6 | 	mov	result1, objptr
2f4cc     00 50 05 FF 
2f4d0     00 FA 45 F5 | 	or	result1, ##178257920
2f4d4     04 12 06 F1 | 	add	arg01, #4
2f4d8     09 FB 61 FC | 	wrlong	result1, arg01
2f4dc     F2 FA 01 F6 | 	mov	result1, objptr
2f4e0     00 58 05 FF 
2f4e4     00 FA 45 F5 | 	or	result1, ##179306496
2f4e8     04 12 06 F1 | 	add	arg01, #4
2f4ec     09 FB 61 FC | 	wrlong	result1, arg01
2f4f0     F2 FA 01 F6 | 	mov	result1, objptr
2f4f4     00 60 05 FF 
2f4f8     00 FA 45 F5 | 	or	result1, ##180355072
2f4fc     04 12 06 F1 | 	add	arg01, #4
2f500     09 FB 61 FC | 	wrlong	result1, arg01
2f504     F2 FA 01 F6 | 	mov	result1, objptr
2f508     00 68 05 FF 
2f50c     00 FA 45 F5 | 	or	result1, ##181403648
2f510     04 12 06 F1 | 	add	arg01, #4
2f514     09 FB 61 FC | 	wrlong	result1, arg01
2f518     4C 12 86 F1 | 	sub	arg01, #76
2f51c                 | ' 
2f51c                 | '     v->close = &v_close;
2f51c                 | '     v->read = &v_read;
2f51c                 | '     v->write = &v_write;
2f51c                 | '     v->lseek = &v_lseek;
2f51c                 | '     v->ioctl = &v_ioctl;
2f51c                 | '     v->flush = 0;
2f51c                 | '     v->vfs_data = ptr;
2f51c                 | '     v->reserved = 0;
2f51c                 | ' 
2f51c                 | '     v->open = &v_open;
2f51c                 | '     v->creat = &v_creat;
2f51c                 | '     v->opendir = &v_opendir;
2f51c                 | '     v->closedir = &v_closedir;
2f51c                 | '     v->readdir = &v_readdir;
2f51c                 | '     v->stat = &v_stat;
2f51c                 | ' 
2f51c                 | '     v->mkdir = &v_mkdir;
2f51c                 | '     v->rmdir = &v_rmdir;
2f51c                 | ' 
2f51c                 | '     v->remove = &v_remove;
2f51c                 | '     v->rename = &v_rename;
2f51c                 | ' 
2f51c                 | '     v->init = &v_init;
2f51c                 | '     v->deinit = &v_deinit;
2f51c                 | ' 
2f51c                 | '     return v;
2f51c     09 FB 01 F6 | 	mov	result1, arg01
2f520     A7 F0 03 F6 | 	mov	ptra, fp
2f524     B2 00 A0 FD | 	call	#popregs_
2f528                 | _fatfs_cc_get_vfs_ret
2f528     2D 00 64 FD | 	ret
2f52c                 | 
2f52c                 | _fatfs_cc_xmit_mmc_1109
2f52c     01 00 00 FF 
2f530     10 E4 05 F1 | 	add	objptr, ##528
2f534     F2 00 02 FB | 	rdlong	_var01, objptr
2f538     08 E4 05 F1 | 	add	objptr, #8
2f53c     F2 02 02 FB | 	rdlong	_var02, objptr
2f540     01 00 00 FF 
2f544     18 E4 85 F1 | 	sub	objptr, ##536
2f548     40 02 62 FD | 	dirl	_var02
2f54c     28 02 64 FD | 	setq	#1
2f550     09 05 02 FB | 	rdlong	_var03, arg01
2f554     69 04 62 FD | 	rev	_var03
2f558     1B 04 FE F9 | 	movbyts	_var03, #27
2f55c     01 05 22 FC | 	wypin	_var03, _var02
2f560     0A 05 02 F6 | 	mov	_var03, arg02
2f564     02 14 4E F0 | 	shr	arg02, #2 wz
2f568     03 04 66 F0 | 	shl	_var03, #3
2f56c     00 05 22 FC | 	wypin	_var03, _var01
2f570     41 02 62 FD | 	dirh	_var02
2f574     08 12 06 F1 | 	add	arg01, #8
2f578     69 06 62 FD | 	rev	_var04
2f57c     1B 06 FE F9 | 	movbyts	_var04, #27
2f580                 | LR__4850
2f580     01 07 22 5C |  if_ne	wypin	_var04, _var02
2f584     09 07 02 5B |  if_ne	rdlong	_var04, arg01
2f588     04 12 06 51 |  if_ne	add	arg01, #4
2f58c     69 06 62 5D |  if_ne	rev	_var04
2f590     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
2f594                 | LR__4851
2f594     40 02 72 5D |  if_ne	testp	_var02 wc
2f598     F8 FF 9F 1D |  if_a	jmp	#LR__4851
2f59c     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4850
2f5a0                 | LR__4852
2f5a0     40 00 72 FD | 	testp	_var01 wc
2f5a4     F8 FF 9F 3D |  if_ae	jmp	#LR__4852
2f5a8     40 02 62 FD | 	dirl	_var02
2f5ac     FF FF FF FF 
2f5b0     01 FF 2B FC | 	wypin	##-1, _var02
2f5b4     41 02 62 FD | 	dirh	_var02
2f5b8                 | _fatfs_cc_xmit_mmc_1109_ret
2f5b8     2D 00 64 FD | 	ret
2f5bc                 | 
2f5bc                 | _fatfs_cc_rcvr_mmc_1116
2f5bc     01 00 00 FF 
2f5c0     10 E4 05 F1 | 	add	objptr, ##528
2f5c4     F2 00 02 FB | 	rdlong	_var01, objptr
2f5c8     0C E4 05 F1 | 	add	objptr, #12
2f5cc     F2 02 02 FB | 	rdlong	_var02, objptr
2f5d0     01 00 00 FF 
2f5d4     1C E4 85 F1 | 	sub	objptr, ##540
2f5d8     01 03 08 FC | 	akpin	_var02
2f5dc     0A 05 0A F6 | 	mov	_var03, arg02 wz
2f5e0     02 04 4E F0 | 	shr	_var03, #2 wz
2f5e4     30 00 90 AD |  if_e	jmp	#LR__4862
2f5e8     02 07 02 F6 | 	mov	_var04, _var03
2f5ec     05 06 66 F0 | 	shl	_var04, #5
2f5f0     00 07 22 FC | 	wypin	_var04, _var01
2f5f4     01 7F 18 FC | 	wxpin	#63, _var02
2f5f8                 | LR__4860
2f5f8                 | LR__4861
2f5f8     40 02 72 FD | 	testp	_var02 wc
2f5fc     F8 FF 9F 3D |  if_ae	jmp	#LR__4861
2f600     01 07 8A FA | 	rdpin	_var04, _var02
2f604     69 06 62 FD | 	rev	_var04
2f608     1B 06 FE F9 | 	movbyts	_var04, #27
2f60c     09 07 62 FC | 	wrlong	_var04, arg01
2f610     04 12 06 F1 | 	add	arg01, #4
2f614     F8 05 6E FB | 	djnz	_var03, #LR__4860
2f618                 | LR__4862
2f618     03 14 0E F5 | 	and	arg02, #3 wz
2f61c     24 00 90 AD |  if_e	jmp	#LR__4865
2f620     01 4F 18 FC | 	wxpin	#39, _var02
2f624                 | LR__4863
2f624     00 11 28 FC | 	wypin	#8, _var01
2f628                 | LR__4864
2f628     40 02 72 FD | 	testp	_var02 wc
2f62c     F8 FF 9F 3D |  if_ae	jmp	#LR__4864
2f630     01 07 8A FA | 	rdpin	_var04, _var02
2f634     69 06 62 FD | 	rev	_var04
2f638     09 07 42 FC | 	wrbyte	_var04, arg01
2f63c     01 12 06 F1 | 	add	arg01, #1
2f640     F8 15 6E FB | 	djnz	arg02, #LR__4863
2f644                 | LR__4865
2f644                 | _fatfs_cc_rcvr_mmc_1116_ret
2f644     2D 00 64 FD | 	ret
2f648                 | 
2f648                 | _fatfs_cc_wait_ready_1120
2f648     01 4A 05 F6 | 	mov	COUNT_, #1
2f64c     A8 00 A0 FD | 	call	#pushregs_
2f650     10 F0 07 F1 | 	add	ptra, #16
2f654     1A FA 61 FD | 	getct	result1
2f658     08 4E 05 F1 | 	add	fp, #8
2f65c     A7 FA 61 FC | 	wrlong	result1, fp
2f660     14 1E 06 FB | 	rdlong	local01, #20
2f664     01 1E 46 F0 | 	shr	local01, #1
2f668     04 4E 05 F1 | 	add	fp, #4
2f66c     A7 1E 62 FC | 	wrlong	local01, fp
2f670     0C 4E 85 F1 | 	sub	fp, #12
2f674                 | ' {
2f674                 | ' 	BYTE d;
2f674                 | ' 	UINT tmr, tmout;
2f674                 | ' 
2f674                 | ' 	tmr = _cnt();
2f674                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2f674                 | ' 	for(;;) {
2f674                 | LR__4870
2f674     04 4E 05 F1 | 	add	fp, #4
2f678     A7 12 02 F6 | 	mov	arg01, fp
2f67c     04 4E 85 F1 | 	sub	fp, #4
2f680     01 14 06 F6 | 	mov	arg02, #1
2f684     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f688     04 4E 05 F1 | 	add	fp, #4
2f68c     A7 1E C2 FA | 	rdbyte	local01, fp
2f690     04 4E 85 F1 | 	sub	fp, #4
2f694     FF 1E 0E F2 | 	cmp	local01, #255 wz
2f698     01 FA 05 A6 |  if_e	mov	result1, #1
2f69c     28 00 90 AD |  if_e	jmp	#LR__4871
2f6a0     1A FA 61 FD | 	getct	result1
2f6a4     08 4E 05 F1 | 	add	fp, #8
2f6a8     A7 1E 02 FB | 	rdlong	local01, fp
2f6ac     0F FB 81 F1 | 	sub	result1, local01
2f6b0     04 4E 05 F1 | 	add	fp, #4
2f6b4     A7 1E 02 FB | 	rdlong	local01, fp
2f6b8     0C 4E 85 F1 | 	sub	fp, #12
2f6bc     0F FB 11 F2 | 	cmp	result1, local01 wc
2f6c0     00 FA 05 36 |  if_ae	mov	result1, #0
2f6c4     AC FF 9F CD |  if_b	jmp	#LR__4870
2f6c8                 | LR__4871
2f6c8     A7 F0 03 F6 | 	mov	ptra, fp
2f6cc     B2 00 A0 FD | 	call	#popregs_
2f6d0                 | _fatfs_cc_wait_ready_1120_ret
2f6d0     2D 00 64 FD | 	ret
2f6d4                 | 
2f6d4                 | _fatfs_cc_deselect_1126
2f6d4     00 4A 05 F6 | 	mov	COUNT_, #0
2f6d8     A8 00 A0 FD | 	call	#pushregs_
2f6dc     14 F0 07 F1 | 	add	ptra, #20
2f6e0     01 00 00 FF 
2f6e4     14 E4 05 F1 | 	add	objptr, ##532
2f6e8     F2 14 02 FB | 	rdlong	arg02, objptr
2f6ec     04 4E 05 F1 | 	add	fp, #4
2f6f0     A7 14 62 FC | 	wrlong	arg02, fp
2f6f4     04 E4 85 F1 | 	sub	objptr, #4
2f6f8     F2 14 02 FB | 	rdlong	arg02, objptr
2f6fc     04 4E 05 F1 | 	add	fp, #4
2f700     A7 14 62 FC | 	wrlong	arg02, fp
2f704     08 E4 05 F1 | 	add	objptr, #8
2f708     F2 14 02 FB | 	rdlong	arg02, objptr
2f70c     04 4E 05 F1 | 	add	fp, #4
2f710     A7 14 62 FC | 	wrlong	arg02, fp
2f714     04 E4 05 F1 | 	add	objptr, #4
2f718     F2 14 02 FB | 	rdlong	arg02, objptr
2f71c     01 00 00 FF 
2f720     1C E4 85 F1 | 	sub	objptr, ##540
2f724     04 4E 05 F1 | 	add	fp, #4
2f728     A7 14 62 FC | 	wrlong	arg02, fp
2f72c     0C 4E 85 F1 | 	sub	fp, #12
2f730     A7 12 02 FB | 	rdlong	arg01, fp
2f734     04 4E 85 F1 | 	sub	fp, #4
2f738     59 12 62 FD | 	drvh	arg01
2f73c     1F 20 64 FD | 	waitx	#16
2f740     A7 12 02 F6 | 	mov	arg01, fp
2f744     01 14 06 F6 | 	mov	arg02, #1
2f748     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f74c     A7 F0 03 F6 | 	mov	ptra, fp
2f750     B2 00 A0 FD | 	call	#popregs_
2f754                 | _fatfs_cc_deselect_1126_ret
2f754     2D 00 64 FD | 	ret
2f758                 | 
2f758                 | _fatfs_cc_select_1130
2f758     00 4A 05 F6 | 	mov	COUNT_, #0
2f75c     A8 00 A0 FD | 	call	#pushregs_
2f760     10 F0 07 F1 | 	add	ptra, #16
2f764     01 00 00 FF 
2f768     14 E4 05 F1 | 	add	objptr, ##532
2f76c     F2 14 02 FB | 	rdlong	arg02, objptr
2f770     08 4E 05 F1 | 	add	fp, #8
2f774     A7 14 62 FC | 	wrlong	arg02, fp
2f778     08 E4 05 F1 | 	add	objptr, #8
2f77c     F2 12 02 FB | 	rdlong	arg01, objptr
2f780     01 00 00 FF 
2f784     1C E4 85 F1 | 	sub	objptr, ##540
2f788     04 4E 05 F1 | 	add	fp, #4
2f78c     A7 12 62 FC | 	wrlong	arg01, fp
2f790     50 12 62 FD | 	fltl	arg01
2f794     04 4E 85 F1 | 	sub	fp, #4
2f798     A7 12 02 FB | 	rdlong	arg01, fp
2f79c     58 12 62 FD | 	drvl	arg01
2f7a0     1F 20 64 FD | 	waitx	#16
2f7a4     04 4E 05 F1 | 	add	fp, #4
2f7a8     A7 12 02 FB | 	rdlong	arg01, fp
2f7ac     41 12 62 FD | 	dirh	arg01
2f7b0     08 4E 85 F1 | 	sub	fp, #8
2f7b4     A7 12 02 F6 | 	mov	arg01, fp
2f7b8     04 4E 85 F1 | 	sub	fp, #4
2f7bc     01 14 06 F6 | 	mov	arg02, #1
2f7c0     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f7c4     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1120
2f7c8     00 FA 0D F2 | 	cmp	result1, #0 wz
2f7cc     01 FA 05 56 |  if_ne	mov	result1, #1
2f7d0     08 00 90 5D |  if_ne	jmp	#LR__4880
2f7d4     FC FE BF FD | 	call	#_fatfs_cc_deselect_1126
2f7d8                 | ' 
2f7d8                 | ' 	deselect();
2f7d8                 | ' 	return 0;
2f7d8     00 FA 05 F6 | 	mov	result1, #0
2f7dc                 | LR__4880
2f7dc     A7 F0 03 F6 | 	mov	ptra, fp
2f7e0     B2 00 A0 FD | 	call	#popregs_
2f7e4                 | _fatfs_cc_select_1130_ret
2f7e4     2D 00 64 FD | 	ret
2f7e8                 | 
2f7e8                 | _fatfs_cc_rcvr_datablock_1134
2f7e8     01 4A 05 F6 | 	mov	COUNT_, #1
2f7ec     A8 00 A0 FD | 	call	#pushregs_
2f7f0     18 F0 07 F1 | 	add	ptra, #24
2f7f4     04 4E 05 F1 | 	add	fp, #4
2f7f8     A7 12 62 FC | 	wrlong	arg01, fp
2f7fc     04 4E 05 F1 | 	add	fp, #4
2f800     A7 14 62 FC | 	wrlong	arg02, fp
2f804     1A FA 61 FD | 	getct	result1
2f808     08 4E 05 F1 | 	add	fp, #8
2f80c     A7 FA 61 FC | 	wrlong	result1, fp
2f810     14 1E 06 FB | 	rdlong	local01, #20
2f814     03 1E 46 F0 | 	shr	local01, #3
2f818     04 4E 05 F1 | 	add	fp, #4
2f81c     A7 1E 62 FC | 	wrlong	local01, fp
2f820     14 4E 85 F1 | 	sub	fp, #20
2f824                 | ' 	BYTE *buff,
2f824                 | ' 	UINT btr
2f824                 | ' )
2f824                 | ' {
2f824                 | ' 	BYTE d[2];
2f824                 | ' 	UINT tmr, tmout;
2f824                 | ' 
2f824                 | ' 	tmr = _cnt();
2f824                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2f824                 | ' 	for(;;) {
2f824                 | LR__4890
2f824     0C 4E 05 F1 | 	add	fp, #12
2f828     A7 12 02 F6 | 	mov	arg01, fp
2f82c     0C 4E 85 F1 | 	sub	fp, #12
2f830     01 14 06 F6 | 	mov	arg02, #1
2f834     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f838     0C 4E 05 F1 | 	add	fp, #12
2f83c     A7 1E C2 FA | 	rdbyte	local01, fp
2f840     0C 4E 85 F1 | 	sub	fp, #12
2f844     FF 1E 0E F2 | 	cmp	local01, #255 wz
2f848     28 00 90 5D |  if_ne	jmp	#LR__4891
2f84c     1A FA 61 FD | 	getct	result1
2f850     FD 1E 02 F6 | 	mov	local01, result1
2f854     10 4E 05 F1 | 	add	fp, #16
2f858     A7 14 02 FB | 	rdlong	arg02, fp
2f85c     0A 1F 82 F1 | 	sub	local01, arg02
2f860     04 4E 05 F1 | 	add	fp, #4
2f864     A7 14 02 FB | 	rdlong	arg02, fp
2f868     14 4E 85 F1 | 	sub	fp, #20
2f86c     0A 1F 12 F2 | 	cmp	local01, arg02 wc
2f870     B0 FF 9F CD |  if_b	jmp	#LR__4890
2f874                 | LR__4891
2f874     0C 4E 05 F1 | 	add	fp, #12
2f878     A7 1E C2 FA | 	rdbyte	local01, fp
2f87c     0C 4E 85 F1 | 	sub	fp, #12
2f880     FE 1E 0E F2 | 	cmp	local01, #254 wz
2f884     00 FA 05 56 |  if_ne	mov	result1, #0
2f888     30 00 90 5D |  if_ne	jmp	#LR__4892
2f88c     04 4E 05 F1 | 	add	fp, #4
2f890     A7 12 02 FB | 	rdlong	arg01, fp
2f894     04 4E 05 F1 | 	add	fp, #4
2f898     A7 14 02 FB | 	rdlong	arg02, fp
2f89c     08 4E 85 F1 | 	sub	fp, #8
2f8a0     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f8a4     0C 4E 05 F1 | 	add	fp, #12
2f8a8     A7 12 02 F6 | 	mov	arg01, fp
2f8ac     0C 4E 85 F1 | 	sub	fp, #12
2f8b0     02 14 06 F6 | 	mov	arg02, #2
2f8b4     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f8b8                 | ' 
2f8b8                 | ' 	rcvr_mmc(buff, btr);
2f8b8                 | ' 	rcvr_mmc(d, 2);
2f8b8                 | ' 
2f8b8                 | ' 	return 1;
2f8b8     01 FA 05 F6 | 	mov	result1, #1
2f8bc                 | LR__4892
2f8bc     A7 F0 03 F6 | 	mov	ptra, fp
2f8c0     B2 00 A0 FD | 	call	#popregs_
2f8c4                 | _fatfs_cc_rcvr_datablock_1134_ret
2f8c4     2D 00 64 FD | 	ret
2f8c8                 | 
2f8c8                 | _fatfs_cc_xmit_datablock_1136
2f8c8     00 4A 05 F6 | 	mov	COUNT_, #0
2f8cc     A8 00 A0 FD | 	call	#pushregs_
2f8d0     10 F0 07 F1 | 	add	ptra, #16
2f8d4     04 4E 05 F1 | 	add	fp, #4
2f8d8     A7 12 62 FC | 	wrlong	arg01, fp
2f8dc     04 4E 05 F1 | 	add	fp, #4
2f8e0     A7 14 42 FC | 	wrbyte	arg02, fp
2f8e4     08 4E 85 F1 | 	sub	fp, #8
2f8e8     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1120
2f8ec     00 FA 0D F2 | 	cmp	result1, #0 wz
2f8f0     00 FA 05 A6 |  if_e	mov	result1, #0
2f8f4     90 00 90 AD |  if_e	jmp	#LR__4901
2f8f8     08 4E 05 F1 | 	add	fp, #8
2f8fc     A7 14 C2 FA | 	rdbyte	arg02, fp
2f900     04 4E 05 F1 | 	add	fp, #4
2f904     A7 14 42 FC | 	wrbyte	arg02, fp
2f908     A7 12 02 F6 | 	mov	arg01, fp
2f90c     0C 4E 85 F1 | 	sub	fp, #12
2f910     01 14 06 F6 | 	mov	arg02, #1
2f914     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1109
2f918     08 4E 05 F1 | 	add	fp, #8
2f91c     A7 14 C2 FA | 	rdbyte	arg02, fp
2f920     08 4E 85 F1 | 	sub	fp, #8
2f924     FD 14 0E F2 | 	cmp	arg02, #253 wz
2f928     58 00 90 AD |  if_e	jmp	#LR__4900
2f92c     04 4E 05 F1 | 	add	fp, #4
2f930     A7 12 02 FB | 	rdlong	arg01, fp
2f934     04 4E 85 F1 | 	sub	fp, #4
2f938     09 14 C6 F9 | 	decod	arg02, #9
2f93c     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1109
2f940     0C 4E 05 F1 | 	add	fp, #12
2f944     A7 12 02 F6 | 	mov	arg01, fp
2f948     0C 4E 85 F1 | 	sub	fp, #12
2f94c     02 14 06 F6 | 	mov	arg02, #2
2f950     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f954     0C 4E 05 F1 | 	add	fp, #12
2f958     A7 12 02 F6 | 	mov	arg01, fp
2f95c     0C 4E 85 F1 | 	sub	fp, #12
2f960     01 14 06 F6 | 	mov	arg02, #1
2f964     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f968     0C 4E 05 F1 | 	add	fp, #12
2f96c     A7 14 C2 FA | 	rdbyte	arg02, fp
2f970     0C 4E 85 F1 | 	sub	fp, #12
2f974     1F 14 06 F5 | 	and	arg02, #31
2f978     05 14 0E F2 | 	cmp	arg02, #5 wz
2f97c                 | ' 			return 0;
2f97c     00 FA 05 56 |  if_ne	mov	result1, #0
2f980     04 00 90 5D |  if_ne	jmp	#LR__4901
2f984                 | LR__4900
2f984                 | ' 	}
2f984                 | ' 
2f984                 | ' 	return 1;
2f984     01 FA 05 F6 | 	mov	result1, #1
2f988                 | LR__4901
2f988     A7 F0 03 F6 | 	mov	ptra, fp
2f98c     B2 00 A0 FD | 	call	#popregs_
2f990                 | _fatfs_cc_xmit_datablock_1136_ret
2f990     2D 00 64 FD | 	ret
2f994                 | 
2f994                 | _fatfs_cc_send_cmd_1140
2f994     01 4A 05 F6 | 	mov	COUNT_, #1
2f998     A8 00 A0 FD | 	call	#pushregs_
2f99c     1C F0 07 F1 | 	add	ptra, #28
2f9a0                 | _fatfs_cc_send_cmd_1140_enter
2f9a0     04 4E 05 F1 | 	add	fp, #4
2f9a4     A7 12 42 FC | 	wrbyte	arg01, fp
2f9a8     04 4E 05 F1 | 	add	fp, #4
2f9ac     A7 14 62 FC | 	wrlong	arg02, fp
2f9b0     04 4E 85 F1 | 	sub	fp, #4
2f9b4     A7 FA C1 FA | 	rdbyte	result1, fp
2f9b8     04 4E 85 F1 | 	sub	fp, #4
2f9bc     80 FA CD F7 | 	test	result1, #128 wz
2f9c0     44 00 90 AD |  if_e	jmp	#LR__4910
2f9c4     04 4E 05 F1 | 	add	fp, #4
2f9c8     A7 14 C2 FA | 	rdbyte	arg02, fp
2f9cc     7F 14 06 F5 | 	and	arg02, #127
2f9d0     A7 14 42 FC | 	wrbyte	arg02, fp
2f9d4     04 4E 85 F1 | 	sub	fp, #4
2f9d8     37 12 06 F6 | 	mov	arg01, #55
2f9dc     00 14 06 F6 | 	mov	arg02, #0
2f9e0     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1140
2f9e4     0C 4E 05 F1 | 	add	fp, #12
2f9e8     A7 FA 41 FC | 	wrbyte	result1, fp
2f9ec     A7 14 C2 FA | 	rdbyte	arg02, fp
2f9f0     0C 4E 85 F1 | 	sub	fp, #12
2f9f4     02 14 16 F2 | 	cmp	arg02, #2 wc
2f9f8     0C 4E 05 31 |  if_ae	add	fp, #12
2f9fc     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
2fa00     0C 4E 85 31 |  if_ae	sub	fp, #12
2fa04     6C 01 90 3D |  if_ae	jmp	#LR__4914
2fa08                 | LR__4910
2fa08     04 4E 05 F1 | 	add	fp, #4
2fa0c     A7 14 C2 FA | 	rdbyte	arg02, fp
2fa10     04 4E 85 F1 | 	sub	fp, #4
2fa14     0C 14 0E F2 | 	cmp	arg02, #12 wz
2fa18     14 00 90 AD |  if_e	jmp	#LR__4911
2fa1c     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1126
2fa20     34 FD BF FD | 	call	#_fatfs_cc_select_1130
2fa24     00 FA 0D F2 | 	cmp	result1, #0 wz
2fa28     FF FA 05 A6 |  if_e	mov	result1, #255
2fa2c     44 01 90 AD |  if_e	jmp	#LR__4914
2fa30                 | LR__4911
2fa30     04 4E 05 F1 | 	add	fp, #4
2fa34     A7 14 C2 FA | 	rdbyte	arg02, fp
2fa38     40 FA 05 F6 | 	mov	result1, #64
2fa3c     0A FB 41 F5 | 	or	result1, arg02
2fa40     10 4E 05 F1 | 	add	fp, #16
2fa44     A7 FA 41 FC | 	wrbyte	result1, fp
2fa48     0C 4E 85 F1 | 	sub	fp, #12
2fa4c     A7 FA 01 FB | 	rdlong	result1, fp
2fa50     18 FA 45 F0 | 	shr	result1, #24
2fa54     0D 4E 05 F1 | 	add	fp, #13
2fa58     A7 FA 41 FC | 	wrbyte	result1, fp
2fa5c     0D 4E 85 F1 | 	sub	fp, #13
2fa60     A7 FA 01 FB | 	rdlong	result1, fp
2fa64     10 FA 45 F0 | 	shr	result1, #16
2fa68     0E 4E 05 F1 | 	add	fp, #14
2fa6c     A7 FA 41 FC | 	wrbyte	result1, fp
2fa70     0E 4E 85 F1 | 	sub	fp, #14
2fa74     A7 FA 01 FB | 	rdlong	result1, fp
2fa78     08 FA 45 F0 | 	shr	result1, #8
2fa7c     0F 4E 05 F1 | 	add	fp, #15
2fa80     A7 FA 41 FC | 	wrbyte	result1, fp
2fa84     0F 4E 85 F1 | 	sub	fp, #15
2fa88     A7 FA 01 FB | 	rdlong	result1, fp
2fa8c     10 4E 05 F1 | 	add	fp, #16
2fa90     A7 FA 41 FC | 	wrbyte	result1, fp
2fa94     0C 4E 85 F1 | 	sub	fp, #12
2fa98     A7 02 48 FC | 	wrbyte	#1, fp
2fa9c     08 4E 85 F1 | 	sub	fp, #8
2faa0     A7 FA C9 FA | 	rdbyte	result1, fp wz
2faa4     04 4E 85 F1 | 	sub	fp, #4
2faa8     0C 4E 05 A1 |  if_e	add	fp, #12
2faac     A7 2A 49 AC |  if_e	wrbyte	#149, fp
2fab0     0C 4E 85 A1 |  if_e	sub	fp, #12
2fab4     04 4E 05 F1 | 	add	fp, #4
2fab8     A7 FA C1 FA | 	rdbyte	result1, fp
2fabc     04 4E 85 F1 | 	sub	fp, #4
2fac0     08 FA 0D F2 | 	cmp	result1, #8 wz
2fac4     0C 4E 05 A1 |  if_e	add	fp, #12
2fac8     A7 0E 49 AC |  if_e	wrbyte	#135, fp
2facc     0C 4E 85 A1 |  if_e	sub	fp, #12
2fad0     0C 4E 05 F1 | 	add	fp, #12
2fad4     A7 14 C2 FA | 	rdbyte	arg02, fp
2fad8     0D 4E 05 F1 | 	add	fp, #13
2fadc     A7 14 42 FC | 	wrbyte	arg02, fp
2fae0     05 4E 85 F1 | 	sub	fp, #5
2fae4     A7 12 02 F6 | 	mov	arg01, fp
2fae8     14 4E 85 F1 | 	sub	fp, #20
2faec     06 14 06 F6 | 	mov	arg02, #6
2faf0     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1109
2faf4     04 4E 05 F1 | 	add	fp, #4
2faf8     A7 1E C2 FA | 	rdbyte	local01, fp
2fafc     04 4E 85 F1 | 	sub	fp, #4
2fb00     0C 1E 0E F2 | 	cmp	local01, #12 wz
2fb04     10 4E 05 A1 |  if_e	add	fp, #16
2fb08     A7 12 02 A6 |  if_e	mov	arg01, fp
2fb0c     10 4E 85 A1 |  if_e	sub	fp, #16
2fb10     01 14 06 A6 |  if_e	mov	arg02, #1
2fb14     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1116
2fb18     0C 4E 05 F1 | 	add	fp, #12
2fb1c     A7 14 48 FC | 	wrbyte	#10, fp
2fb20     0C 4E 85 F1 | 	sub	fp, #12
2fb24                 | ' 	n = 10;
2fb24                 | ' 	do
2fb24                 | LR__4912
2fb24     10 4E 05 F1 | 	add	fp, #16
2fb28     A7 12 02 F6 | 	mov	arg01, fp
2fb2c     10 4E 85 F1 | 	sub	fp, #16
2fb30     01 14 06 F6 | 	mov	arg02, #1
2fb34     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2fb38     10 4E 05 F1 | 	add	fp, #16
2fb3c     A7 1E C2 FA | 	rdbyte	local01, fp
2fb40     10 4E 85 F1 | 	sub	fp, #16
2fb44     80 1E CE F7 | 	test	local01, #128 wz
2fb48     1C 00 90 AD |  if_e	jmp	#LR__4913
2fb4c     0C 4E 05 F1 | 	add	fp, #12
2fb50     A7 1E C2 FA | 	rdbyte	local01, fp
2fb54     01 1E 86 F1 | 	sub	local01, #1
2fb58     A7 1E 42 FC | 	wrbyte	local01, fp
2fb5c     A7 1E CA FA | 	rdbyte	local01, fp wz
2fb60     0C 4E 85 F1 | 	sub	fp, #12
2fb64     BC FF 9F 5D |  if_ne	jmp	#LR__4912
2fb68                 | LR__4913
2fb68                 | ' 
2fb68                 | ' 	return d;
2fb68     10 4E 05 F1 | 	add	fp, #16
2fb6c     A7 FA C1 FA | 	rdbyte	result1, fp
2fb70     10 4E 85 F1 | 	sub	fp, #16
2fb74                 | LR__4914
2fb74     A7 F0 03 F6 | 	mov	ptra, fp
2fb78     B2 00 A0 FD | 	call	#popregs_
2fb7c                 | _fatfs_cc_send_cmd_1140_ret
2fb7c     2D 00 64 FD | 	ret
2fb80                 | 
2fb80                 | _fatfs_cc_disk_deinitialize
2fb80     03 4A 05 F6 | 	mov	COUNT_, #3
2fb84     A8 00 A0 FD | 	call	#pushregs_
2fb88     00 12 4E F2 | 	cmps	arg01, #0 wz
2fb8c     01 00 00 FF 
2fb90     14 E4 05 F1 | 	add	objptr, ##532
2fb94     F2 12 02 FB | 	rdlong	arg01, objptr
2fb98     04 E4 85 F1 | 	sub	objptr, #4
2fb9c     F2 1E 02 FB | 	rdlong	local01, objptr
2fba0     08 E4 05 F1 | 	add	objptr, #8
2fba4     F2 20 02 FB | 	rdlong	local02, objptr
2fba8     04 E4 05 F1 | 	add	objptr, #4
2fbac     F2 22 02 FB | 	rdlong	local03, objptr
2fbb0     01 00 00 FF 
2fbb4     1C E4 85 F1 | 	sub	objptr, ##540
2fbb8                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2fbb8                 | '         return RES_NOTRDY;
2fbb8     03 FA 05 56 |  if_ne	mov	result1, #3
2fbbc     2C 00 90 5D |  if_ne	jmp	#LR__4920
2fbc0     50 12 62 FD | 	fltl	arg01
2fbc4     09 01 08 FC | 	wrpin	#0, arg01
2fbc8     50 1E 62 FD | 	fltl	local01
2fbcc     0F 01 08 FC | 	wrpin	#0, local01
2fbd0     50 20 62 FD | 	fltl	local02
2fbd4     10 01 08 FC | 	wrpin	#0, local02
2fbd8     50 22 62 FD | 	fltl	local03
2fbdc     11 01 08 FC | 	wrpin	#0, local03
2fbe0     0A 12 06 F6 | 	mov	arg01, #10
2fbe4     28 11 BF FD | 	call	#__system___waitms
2fbe8                 | '     }
2fbe8                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2fbe8                 | '     _pinclear(PIN_SS);
2fbe8                 | '     _pinclear(PIN_CLK);
2fbe8                 | '     _pinclear(PIN_DI);
2fbe8                 | '     _pinclear(PIN_DO);
2fbe8                 | ' 
2fbe8                 | '     _waitms(10);
2fbe8                 | ' 
2fbe8                 | '     return 0;
2fbe8     00 FA 05 F6 | 	mov	result1, #0
2fbec                 | LR__4920
2fbec     A7 F0 03 F6 | 	mov	ptra, fp
2fbf0     B2 00 A0 FD | 	call	#popregs_
2fbf4                 | _fatfs_cc_disk_deinitialize_ret
2fbf4     2D 00 64 FD | 	ret
2fbf8                 | 
2fbf8                 | _fatfs_cc_gettimeofday
2fbf8     04 4A 05 F6 | 	mov	COUNT_, #4
2fbfc     A8 00 A0 FD | 	call	#pushregs_
2fc00     09 1F 02 F6 | 	mov	local01, arg01
2fc04     E4 0C BF FD | 	call	#__system___getus
2fc08     FD 12 02 F6 | 	mov	arg01, result1
2fc0c     02 00 00 FF 
2fc10     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
2fc14     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
2fc18     09 FB 01 F6 | 	mov	result1, arg01
2fc1c     10 FB 81 F1 | 	sub	result1, local02
2fc20     A1 07 00 FF 
2fc24     40 FA 15 FD | 	qdiv	result1, ##1000000
2fc28     02 00 00 FF 
2fc2c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2fc30     18 20 62 FD | 	getqx	local02
2fc34     A1 07 00 FF 
2fc38     40 FA 15 FD | 	qdiv	result1, ##1000000
2fc3c     00 20 0E F2 | 	cmp	local02, #0 wz
2fc40     19 22 62 FD | 	getqy	local03
2fc44     28 00 90 AD |  if_e	jmp	#LR__4930
2fc48     02 00 00 FF 
2fc4c     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2fc50     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2fc54     10 25 02 F1 | 	add	local04, local02
2fc58     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2fc5c     11 13 82 F1 | 	sub	arg01, local03
2fc60     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
2fc64     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
2fc68     02 00 00 FF 
2fc6c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2fc70                 | LR__4930
2fc70     02 00 00 FF 
2fc74     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2fc78     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2fc7c     02 00 00 FF 
2fc80     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
2fc84     0F 25 62 FC | 	wrlong	local04, local01
2fc88     04 1E 06 F1 | 	add	local01, #4
2fc8c     0F 23 62 FC | 	wrlong	local03, local01
2fc90                 | '         lastsec += secs;
2fc90                 | '         lastus = now - leftover;
2fc90                 | '     }
2fc90                 | '     tv->tv_sec = lastsec;
2fc90                 | '     tv->tv_usec = leftover;
2fc90                 | '     return 0;
2fc90     00 FA 05 F6 | 	mov	result1, #0
2fc94     A7 F0 03 F6 | 	mov	ptra, fp
2fc98     B2 00 A0 FD | 	call	#popregs_
2fc9c                 | _fatfs_cc_gettimeofday_ret
2fc9c     2D 00 64 FD | 	ret
2fca0                 | 
2fca0                 | _fatfs_cc__is_leap_year
2fca0     09 FB 51 F6 | 	abs	result1, arg01 wc
2fca4     03 FA 05 F5 | 	and	result1, #3
2fca8     FD FA 89 F6 | 	negc	result1, result1 wz
2fcac     38 00 90 5D |  if_ne	jmp	#LR__4941
2fcb0     09 FB 51 F6 | 	abs	result1, arg01 wc
2fcb4     64 FA 15 FD | 	qdiv	result1, #100
2fcb8     19 FA 61 FD | 	getqy	result1
2fcbc     FD FA 89 F6 | 	negc	result1, result1 wz
2fcc0     1C 00 90 5D |  if_ne	jmp	#LR__4940
2fcc4     09 FB 51 F6 | 	abs	result1, arg01 wc
2fcc8     90 FB 15 FD | 	qdiv	result1, #400
2fccc                 | '       return (0 == y % 400);
2fccc     00 FA 05 F6 | 	mov	result1, #0
2fcd0     19 00 62 FD | 	getqy	_var01
2fcd4     00 01 8A F6 | 	negc	_var01, _var01 wz
2fcd8     01 FA 05 A6 |  if_e	mov	result1, #1
2fcdc     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2fce0                 | LR__4940
2fce0                 | '     return 1;
2fce0     01 FA 05 F6 | 	mov	result1, #1
2fce4     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2fce8                 | LR__4941
2fce8                 | '   }
2fce8                 | '   return 0;
2fce8     00 FA 05 F6 | 	mov	result1, #0
2fcec                 | _fatfs_cc__is_leap_year_ret
2fcec     2D 00 64 FD | 	ret
2fcf0                 | 
2fcf0                 | _fatfs_cc___tzoffset
2fcf0     09 01 0A F6 | 	mov	_var01, arg01 wz
2fcf4     FF FF FF FF 
2fcf8     0A FF 6B FC | 	wrlong	##-1, arg02
2fcfc     01 02 06 F6 | 	mov	_var02, #1
2fd00     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
2fd04                 | '                 return 0;
2fd04     00 FA 05 A6 |  if_e	mov	result1, #0
2fd08     94 02 90 AD |  if_e	jmp	#LR__4967
2fd0c     0A 01 68 FC | 	wrlong	#0, arg02
2fd10     02 00 00 FF 
2fd14     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fd18     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2fd1c                 | ' 
2fd1c                 | '        *hasdst = 0;
2fd1c                 | ' 
2fd1c                 | ' 	n = stdname;
2fd1c                 | '         while (*s && isalpha(*s)) {
2fd1c     02 00 00 FF 
2fd20     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2fd24     97 28 48 FB | 	callpa	#(@LR__4951-@LR__4950)>>2,fcache_load_ptr_
2fd28                 | LR__4950
2fd28     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2fd2c     48 00 90 AD |  if_e	jmp	#LR__4952
2fd30     00 13 C2 FA | 	rdbyte	arg01, _var01
2fd34                 | ' {
2fd34                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2fd34     80 12 36 F3 | 	fle	arg01, #128 wc
2fd38                 | '     return __ctype[c];
2fd38     02 00 00 FF 
2fd3c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fd40     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fd44     09 FB C1 FA | 	rdbyte	result1, arg01
2fd48     02 00 00 FF 
2fd4c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fd50     0C FA CD F7 | 	test	result1, #12 wz
2fd54     20 00 90 AD |  if_e	jmp	#LR__4952
2fd58     00 09 02 F6 | 	mov	_var05, _var01
2fd5c     00 0B 02 F6 | 	mov	_var06, _var01
2fd60     01 0A 06 F1 | 	add	_var06, #1
2fd64     04 0D C2 FA | 	rdbyte	_var07, _var05
2fd68     05 01 02 F6 | 	mov	_var01, _var06
2fd6c     03 0D 42 FC | 	wrbyte	_var07, _var04
2fd70     01 06 06 F1 | 	add	_var04, #1
2fd74     B0 FF 9F FD | 	jmp	#LR__4950
2fd78                 | LR__4951
2fd78                 | LR__4952
2fd78     03 01 48 FC | 	wrbyte	#0, _var04
2fd7c     00 0E 06 F6 | 	mov	_var08, #0
2fd80     00 05 C2 FA | 	rdbyte	_var03, _var01
2fd84     2D 04 0E F2 | 	cmp	_var03, #45 wz
2fd88     01 02 66 A6 |  if_e	neg	_var02, #1
2fd8c     01 00 06 A1 |  if_e	add	_var01, #1
2fd90     97 28 48 FB | 	callpa	#(@LR__4954-@LR__4953)>>2,fcache_load_ptr_
2fd94                 | '                 sgn = -1;
2fd94                 | '                 s++;
2fd94                 | '         }
2fd94                 | '         while (isdigit(*s)) {
2fd94                 | LR__4953
2fd94     00 13 C2 FA | 	rdbyte	arg01, _var01
2fd98                 | ' {
2fd98                 | '   return  (__ctype_get(c) & 0x02 ) ;
2fd98     80 12 36 F3 | 	fle	arg01, #128 wc
2fd9c                 | '     return __ctype[c];
2fd9c     02 00 00 FF 
2fda0     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fda4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fda8     09 FB C1 FA | 	rdbyte	result1, arg01
2fdac     02 00 00 FF 
2fdb0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fdb4     02 FA CD F7 | 	test	result1, #2 wz
2fdb8     28 00 90 AD |  if_e	jmp	#LR__4955
2fdbc     07 05 02 F6 | 	mov	_var03, _var08
2fdc0     02 04 66 F0 | 	shl	_var03, #2
2fdc4     07 05 02 F1 | 	add	_var03, _var08
2fdc8     01 04 66 F0 | 	shl	_var03, #1
2fdcc     00 09 C2 FA | 	rdbyte	_var05, _var01
2fdd0     30 08 86 F1 | 	sub	_var05, #48
2fdd4     04 05 02 F1 | 	add	_var03, _var05
2fdd8     02 0F 02 F6 | 	mov	_var08, _var03
2fddc     01 00 06 F1 | 	add	_var01, #1
2fde0     B0 FF 9F FD | 	jmp	#LR__4953
2fde4                 | LR__4954
2fde4                 | LR__4955
2fde4     07 00 00 FF 
2fde8     10 0E 06 FD | 	qmul	_var08, ##3600
2fdec     00 05 C2 FA | 	rdbyte	_var03, _var01
2fdf0     3A 04 0E F2 | 	cmp	_var03, #58 wz
2fdf4     18 10 62 FD | 	getqx	_var09
2fdf8     70 00 90 5D |  if_ne	jmp	#LR__4959
2fdfc     00 0E 06 F6 | 	mov	_var08, #0
2fe00     01 00 06 F1 | 	add	_var01, #1
2fe04     97 28 48 FB | 	callpa	#(@LR__4957-@LR__4956)>>2,fcache_load_ptr_
2fe08                 | '                 x = 0;
2fe08                 | '                 s++;
2fe08                 | '                 while (isdigit(*s)) {
2fe08                 | LR__4956
2fe08     00 13 C2 FA | 	rdbyte	arg01, _var01
2fe0c                 | ' {
2fe0c                 | '   return  (__ctype_get(c) & 0x02 ) ;
2fe0c     80 12 36 F3 | 	fle	arg01, #128 wc
2fe10                 | '     return __ctype[c];
2fe10     02 00 00 FF 
2fe14     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2fe18     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fe1c     09 FB C1 FA | 	rdbyte	result1, arg01
2fe20     02 00 00 FF 
2fe24     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fe28     02 FA CD F7 | 	test	result1, #2 wz
2fe2c     28 00 90 AD |  if_e	jmp	#LR__4958
2fe30     07 05 02 F6 | 	mov	_var03, _var08
2fe34     02 04 66 F0 | 	shl	_var03, #2
2fe38     07 05 02 F1 | 	add	_var03, _var08
2fe3c     01 04 66 F0 | 	shl	_var03, #1
2fe40     00 09 C2 FA | 	rdbyte	_var05, _var01
2fe44     30 08 86 F1 | 	sub	_var05, #48
2fe48     04 05 02 F1 | 	add	_var03, _var05
2fe4c     02 0F 02 F6 | 	mov	_var08, _var03
2fe50     01 00 06 F1 | 	add	_var01, #1
2fe54     B0 FF 9F FD | 	jmp	#LR__4956
2fe58                 | LR__4957
2fe58                 | LR__4958
2fe58     07 0D 02 F6 | 	mov	_var07, _var08
2fe5c     04 0C 66 F0 | 	shl	_var07, #4
2fe60     07 0D 82 F1 | 	sub	_var07, _var08
2fe64     02 0C 66 F0 | 	shl	_var07, #2
2fe68     06 11 02 F1 | 	add	_var09, _var07
2fe6c                 | LR__4959
2fe6c     02 00 00 FF 
2fe70     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2fe74     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2fe78     00 13 C2 FA | 	rdbyte	arg01, _var01
2fe7c                 | ' {
2fe7c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2fe7c     80 12 36 F3 | 	fle	arg01, #128 wc
2fe80                 | '     return __ctype[c];
2fe80     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
2fe84     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fe88     09 FB C1 FA | 	rdbyte	result1, arg01
2fe8c     02 00 00 FF 
2fe90     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fe94     0C FA CD F7 | 	test	result1, #12 wz
2fe98     50 00 90 AD |  if_e	jmp	#LR__4962
2fe9c     0A 03 68 FC | 	wrlong	#1, arg02
2fea0                 | '                 *hasdst = 1;
2fea0                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
2fea0                 | LR__4960
2fea0     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2fea4     44 00 90 AD |  if_e	jmp	#LR__4961
2fea8     00 13 C2 FA | 	rdbyte	arg01, _var01
2feac                 | ' {
2feac                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2feac     80 12 36 F3 | 	fle	arg01, #128 wc
2feb0                 | '     return __ctype[c];
2feb0     02 00 00 FF 
2feb4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2feb8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2febc     09 FB C1 FA | 	rdbyte	result1, arg01
2fec0     02 00 00 FF 
2fec4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2fec8     0C FA CD F7 | 	test	result1, #12 wz
2fecc     1C 00 90 AD |  if_e	jmp	#LR__4961
2fed0     00 0B 02 F6 | 	mov	_var06, _var01
2fed4     01 0A 06 F1 | 	add	_var06, #1
2fed8     00 0D C2 FA | 	rdbyte	_var07, _var01
2fedc     05 01 02 F6 | 	mov	_var01, _var06
2fee0     03 0D 42 FC | 	wrbyte	_var07, _var04
2fee4     01 06 06 F1 | 	add	_var04, #1
2fee8     B4 FF 9F FD | 	jmp	#LR__4960
2feec                 | LR__4961
2feec                 | LR__4962
2feec     03 01 48 FC | 	wrbyte	#0, _var04
2fef0     02 00 00 FF 
2fef4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2fef8     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2fefc     02 00 00 FF 
2ff00     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2ff04     20 00 90 AD |  if_e	jmp	#LR__4963
2ff08     02 00 00 FF 
2ff0c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2ff10     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2ff14     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
2ff18     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2ff1c     02 00 00 FF 
2ff20     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2ff24     1C 00 90 FD | 	jmp	#LR__4964
2ff28                 | LR__4963
2ff28     02 00 00 FF 
2ff2c     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
2ff30     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2ff34     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
2ff38     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2ff3c     02 00 00 FF 
2ff40     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2ff44                 | LR__4964
2ff44     02 00 00 FF 
2ff48     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2ff4c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2ff50     02 00 00 FF 
2ff54     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
2ff58     20 00 90 AD |  if_e	jmp	#LR__4965
2ff5c     02 00 00 FF 
2ff60     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2ff64     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2ff68     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
2ff6c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2ff70     02 00 00 FF 
2ff74     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2ff78     1C 00 90 FD | 	jmp	#LR__4966
2ff7c                 | LR__4965
2ff7c     02 00 00 FF 
2ff80     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2ff84     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2ff88     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
2ff8c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2ff90     02 00 00 FF 
2ff94     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2ff98                 | LR__4966
2ff98     08 03 02 FD | 	qmul	_var02, _var09
2ff9c                 | ' 		_tzname[1] = stdname;
2ff9c                 | ' 
2ff9c                 | '         return sgn * off;
2ff9c     18 FA 61 FD | 	getqx	result1
2ffa0                 | LR__4967
2ffa0                 | _fatfs_cc___tzoffset_ret
2ffa0     2D 00 64 FD | 	ret
2ffa4                 | 
2ffa4                 | _fatfs_cc___indst
2ffa4     10 12 06 F1 | 	add	arg01, #16
2ffa8     09 01 02 FB | 	rdlong	_var01, arg01
2ffac     10 12 86 F1 | 	sub	arg01, #16
2ffb0     02 00 0E F2 | 	cmp	_var01, #2 wz
2ffb4     30 00 90 5D |  if_ne	jmp	#LR__4970
2ffb8     07 00 06 F6 | 	mov	_var01, #7
2ffbc     18 12 06 F1 | 	add	arg01, #24
2ffc0     09 03 02 FB | 	rdlong	_var02, arg01
2ffc4     01 01 02 F1 | 	add	_var01, _var02
2ffc8     0C 12 86 F1 | 	sub	arg01, #12
2ffcc     09 05 02 FB | 	rdlong	_var03, arg01
2ffd0     02 01 82 F1 | 	sub	_var01, _var03
2ffd4     00 00 56 F2 | 	cmps	_var01, #0 wc
2ffd8                 | '                         return 1;
2ffd8     01 FA 05 C6 |  if_b	mov	result1, #1
2ffdc     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2ffe0                 | '                 return 0;
2ffe0     00 FA 05 F6 | 	mov	result1, #0
2ffe4     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2ffe8                 | LR__4970
2ffe8     10 12 06 F1 | 	add	arg01, #16
2ffec     09 01 02 FB | 	rdlong	_var01, arg01
2fff0     10 12 86 F1 | 	sub	arg01, #16
2fff4     0A 00 0E F2 | 	cmp	_var01, #10 wz
2fff8     28 00 90 5D |  if_ne	jmp	#LR__4971
2fffc     18 12 06 F1 | 	add	arg01, #24
30000     09 01 02 FB | 	rdlong	_var01, arg01
30004     0C 12 86 F1 | 	sub	arg01, #12
30008     09 07 02 FB | 	rdlong	_var04, arg01
3000c     03 01 82 F1 | 	sub	_var01, _var04
30010     00 00 56 F2 | 	cmps	_var01, #0 wc
30014                 | '                         return 0;
30014     00 FA 05 C6 |  if_b	mov	result1, #0
30018     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
3001c                 | '                 return 1;
3001c     01 FA 05 F6 | 	mov	result1, #1
30020     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
30024                 | LR__4971
30024                 | '         }
30024                 | ' 
30024                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
30024     00 00 06 F6 | 	mov	_var01, #0
30028     10 12 06 F1 | 	add	arg01, #16
3002c     09 03 02 FB | 	rdlong	_var02, arg01
30030     10 12 86 F1 | 	sub	arg01, #16
30034     03 02 56 F2 | 	cmps	_var02, #3 wc
30038     10 00 90 CD |  if_b	jmp	#LR__4972
3003c     10 12 06 F1 | 	add	arg01, #16
30040     09 05 02 FB | 	rdlong	_var03, arg01
30044     0A 04 56 F2 | 	cmps	_var03, #10 wc
30048     01 00 06 C6 |  if_b	mov	_var01, #1
3004c                 | LR__4972
3004c     00 FB 01 F6 | 	mov	result1, _var01
30050                 | _fatfs_cc___indst_ret
30050     2D 00 64 FD | 	ret
30054                 | 
30054                 | ' 	
30054                 | ' 	FUNCTION pfunc(c as integer) as integer
30054                 | ___strs_cl_pfunc
30054                 | ' 		if (i < 16) then
30054     04 E4 05 F1 | 	add	objptr, #4
30058     F2 FA 01 FB | 	rdlong	result1, objptr
3005c     04 E4 85 F1 | 	sub	objptr, #4
30060     10 FA 55 F2 | 	cmps	result1, #16 wc
30064     2C 00 90 3D |  if_ae	jmp	#LR__4980
30068     F2 FA 01 FB | 	rdlong	result1, objptr
3006c     04 E4 05 F1 | 	add	objptr, #4
30070     F2 00 02 FB | 	rdlong	_var01, objptr
30074     FD 00 02 F1 | 	add	_var01, result1
30078     00 13 42 FC | 	wrbyte	arg01, _var01
3007c     F2 FA 01 FB | 	rdlong	result1, objptr
30080     01 FA 05 F1 | 	add	result1, #1
30084     F2 FA 61 FC | 	wrlong	result1, objptr
30088     04 E4 85 F1 | 	sub	objptr, #4
3008c                 | ' 			p(i) = c
3008c                 | ' 			i = i+1
3008c                 | ' 			return 1
3008c     01 FA 05 F6 | 	mov	result1, #1
30090     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
30094                 | LR__4980
30094                 | ' 			return -1
30094     01 FA 65 F6 | 	neg	result1, #1
30098                 | ___strs_cl_pfunc_ret
30098     2D 00 64 FD | 	ret
3009c                 | 
3009c                 | __struct__s_vfs_file_t_putchar
3009c     04 4A 05 F6 | 	mov	COUNT_, #4
300a0     A8 00 A0 FD | 	call	#pushregs_
300a4     1C E4 05 F1 | 	add	objptr, #28
300a8     F2 1E 0A FB | 	rdlong	local01, objptr wz
300ac     1C E4 85 F1 | 	sub	objptr, #28
300b0     00 FA 05 A6 |  if_e	mov	result1, #0
300b4     48 00 90 AD |  if_e	jmp	#LR__4990
300b8     1C E4 05 F1 | 	add	objptr, #28
300bc     F2 20 02 FB | 	rdlong	local02, objptr
300c0     10 23 02 F6 | 	mov	local03, local02
300c4     1C E4 85 F1 | 	sub	objptr, #28
300c8     13 22 46 F7 | 	zerox	local03, #19
300cc     14 20 46 F0 | 	shr	local02, #20
300d0     02 20 66 F0 | 	shl	local02, #2
300d4     ED 20 02 F1 | 	add	local02, __methods__
300d8     10 21 02 FB | 	rdlong	local02, local02
300dc     F2 14 02 F6 | 	mov	arg02, objptr
300e0     F2 24 02 F6 | 	mov	local04, objptr
300e4     11 E5 01 F6 | 	mov	objptr, local03
300e8     2D 20 62 FD | 	call	local02
300ec     12 E5 01 F6 | 	mov	objptr, local04
300f0                 | '     return (i < 0) ? 0 : 1;
300f0     00 FA 55 F2 | 	cmps	result1, #0 wc
300f4     00 1E 06 C6 |  if_b	mov	local01, #0
300f8     01 1E 06 36 |  if_ae	mov	local01, #1
300fc     0F FB 01 F6 | 	mov	result1, local01
30100                 | LR__4990
30100     A7 F0 03 F6 | 	mov	ptra, fp
30104     B2 00 A0 FD | 	call	#popregs_
30108                 | __struct__s_vfs_file_t_putchar_ret
30108     2D 00 64 FD | 	ret
3010c                 | 
3010c                 | __struct__s_vfs_file_t_getchar
3010c     03 4A 05 F6 | 	mov	COUNT_, #3
30110     A8 00 A0 FD | 	call	#pushregs_
30114     20 E4 05 F1 | 	add	objptr, #32
30118     F2 12 0A FB | 	rdlong	arg01, objptr wz
3011c     20 E4 85 F1 | 	sub	objptr, #32
30120     01 FA 65 A6 |  if_e	neg	result1, #1
30124     38 00 90 AD |  if_e	jmp	#LR__5000
30128                 | '     return getcf(__this);
30128     20 E4 05 F1 | 	add	objptr, #32
3012c     F2 1E 02 FB | 	rdlong	local01, objptr
30130     0F 21 02 F6 | 	mov	local02, local01
30134     20 E4 85 F1 | 	sub	objptr, #32
30138     13 20 46 F7 | 	zerox	local02, #19
3013c     14 1E 46 F0 | 	shr	local01, #20
30140     02 1E 66 F0 | 	shl	local01, #2
30144     ED 1E 02 F1 | 	add	local01, __methods__
30148     0F 1F 02 FB | 	rdlong	local01, local01
3014c     F2 12 02 F6 | 	mov	arg01, objptr
30150     F2 22 02 F6 | 	mov	local03, objptr
30154     10 E5 01 F6 | 	mov	objptr, local02
30158     2D 1E 62 FD | 	call	local01
3015c     11 E5 01 F6 | 	mov	objptr, local03
30160                 | LR__5000
30160     A7 F0 03 F6 | 	mov	ptra, fp
30164     B2 00 A0 FD | 	call	#popregs_
30168                 | __struct__s_vfs_file_t_getchar_ret
30168     2D 00 64 FD | 	ret
3016c                 | 
3016c                 | __struct___bas_wrap_sender_tx
3016c     03 4A 05 F6 | 	mov	COUNT_, #3
30170     A8 00 A0 FD | 	call	#pushregs_
30174     F2 1E 02 FB | 	rdlong	local01, objptr
30178     0F 21 02 F6 | 	mov	local02, local01
3017c     13 1E 46 F7 | 	zerox	local01, #19
30180     14 20 46 F0 | 	shr	local02, #20
30184     02 20 66 F0 | 	shl	local02, #2
30188     ED 20 02 F1 | 	add	local02, __methods__
3018c     10 21 02 FB | 	rdlong	local02, local02
30190     F2 22 02 F6 | 	mov	local03, objptr
30194     0F E5 01 F6 | 	mov	objptr, local01
30198     2D 20 62 FD | 	call	local02
3019c     11 E5 01 F6 | 	mov	objptr, local03
301a0     01 FA 05 F6 | 	mov	result1, #1
301a4     A7 F0 03 F6 | 	mov	ptra, fp
301a8     B2 00 A0 FD | 	call	#popregs_
301ac                 | __struct___bas_wrap_sender_tx_ret
301ac     2D 00 64 FD | 	ret
301b0                 | 
301b0                 | __struct___bas_wrap_sender_rx
301b0     03 4A 05 F6 | 	mov	COUNT_, #3
301b4     A8 00 A0 FD | 	call	#pushregs_
301b8     04 E4 05 F1 | 	add	objptr, #4
301bc     F2 1E 02 FB | 	rdlong	local01, objptr
301c0     0F 21 02 F6 | 	mov	local02, local01
301c4     04 E4 85 F1 | 	sub	objptr, #4
301c8     13 20 46 F7 | 	zerox	local02, #19
301cc     14 1E 46 F0 | 	shr	local01, #20
301d0     02 1E 66 F0 | 	shl	local01, #2
301d4     ED 1E 02 F1 | 	add	local01, __methods__
301d8     0F 1F 02 FB | 	rdlong	local01, local01
301dc     F2 22 02 F6 | 	mov	local03, objptr
301e0     10 E5 01 F6 | 	mov	objptr, local02
301e4     2D 1E 62 FD | 	call	local01
301e8     11 E5 01 F6 | 	mov	objptr, local03
301ec     A7 F0 03 F6 | 	mov	ptra, fp
301f0     B2 00 A0 FD | 	call	#popregs_
301f4                 | __struct___bas_wrap_sender_rx_ret
301f4     2D 00 64 FD | 	ret
301f8                 | 
301f8                 | __struct___bas_wrap_sender_close
301f8     03 4A 05 F6 | 	mov	COUNT_, #3
301fc     A8 00 A0 FD | 	call	#pushregs_
30200     08 E4 05 F1 | 	add	objptr, #8
30204     F2 1E 02 FB | 	rdlong	local01, objptr
30208     0F 21 02 F6 | 	mov	local02, local01
3020c     08 E4 85 F1 | 	sub	objptr, #8
30210     13 20 46 F7 | 	zerox	local02, #19
30214     14 1E 46 F0 | 	shr	local01, #20
30218     02 1E 66 F0 | 	shl	local01, #2
3021c     ED 1E 02 F1 | 	add	local01, __methods__
30220     0F 1F 02 FB | 	rdlong	local01, local01
30224     F2 22 02 F6 | 	mov	local03, objptr
30228     10 E5 01 F6 | 	mov	objptr, local02
3022c     2D 1E 62 FD | 	call	local01
30230     11 E5 01 F6 | 	mov	objptr, local03
30234     A7 F0 03 F6 | 	mov	ptra, fp
30238     B2 00 A0 FD | 	call	#popregs_
3023c                 | __struct___bas_wrap_sender_close_ret
3023c     2D 00 64 FD | 	ret
30240                 | 
30240                 | LR__5010
30240     2F          | 	byte	"/"
30241     00          | 	byte	0
30242                 | LR__5011
30242     69 6E 66    | 	byte	"inf"
30245     00          | 	byte	0
30246                 | LR__5012
30246     6E 61 6E    | 	byte	"nan"
30249     00          | 	byte	0
3024a                 | LR__5013
3024a                 | 	byte	
3024a     00          | 	byte	0
3024b                 | LR__5014
3024b                 | 	byte	
3024b     00          | 	byte	0
3024c                 | LR__5015
3024c                 | 	byte	
3024c     00          | 	byte	0
3024d                 | LR__5016
3024d                 | 	byte	
3024d     00          | 	byte	0
3024e                 | LR__5017
3024e                 | 	byte	
3024e     00          | 	byte	0
3024f                 | LR__5018
3024f                 | 	byte	
3024f     00          | 	byte	0
30250                 | LR__5019
30250                 | 	byte	
30250     00          | 	byte	0
30251                 | LR__5020
30251                 | 	byte	
30251     00          | 	byte	0
30252                 | LR__5021
30252     00          | 	byte	0
30253     00          | 	byte	0
30254                 | LR__5022
30254     00          | 	byte	0
30255     00          | 	byte	0
30256                 | LR__5023
30256     00          | 	byte	0
30257     00          | 	byte	0
30258                 | LR__5024
30258     20 21 21 21 
3025c     20 63 6F 72 
30260     72 75 70 74 
30264     65 64 20 68 
30268     65 61 70 3F 
3026c     3F 3F 20 21 
30270     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
30273     00          | 	byte	0
30274                 | LR__5025
30274     20 21 21 21 
30278     20 6F 75 74 
3027c     20 6F 66 20 
30280     68 65 61 70 
30284     20 6D 65 6D 
30288     6F 72 79 20 
3028c     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
30290     00          | 	byte	0
30291                 | LR__5026
30291     20 21 21 21 
30295     20 63 6F 72 
30299     72 75 70 74 
3029d     65 64 20 68 
302a1     65 61 70 20 
302a5     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
302a9     00          | 	byte	0
302aa                 | LR__5027
302aa     00          | 	byte	0
302ab     00          | 	byte	0
302ac                 | LR__5028
302ac     2E          | 	byte	"."
302ad     00          | 	byte	0
302ae                 | LR__5029
302ae     00          | 	byte	0
302af     00          | 	byte	0
302b0                 | LR__5030
302b0     00          | 	byte	0
302b1     00          | 	byte	0
302b2                 | LR__5031
302b2     00          | 	byte	0
302b3     00          | 	byte	0
302b4                 | LR__5032
302b4     2A 3A 3C 3E 
302b8     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
302bc     00          | 	byte	0
302bd                 | LR__5033
302bd     2B 2C 3B 3D 
302c1     5B 5D       | 	byte	"+,;=[]"
302c3     00          | 	byte	0
302c4                 | LR__5034
302c4     46 41 54 33 
302c8     32 20 20 20 | 	byte	"FAT32   "
302cc     00          | 	byte	0
302cd                 | LR__5035
302cd     54 5A       | 	byte	"TZ"
302cf     00          | 	byte	0
302d0                 | LR__5036
302d0     00          | 	byte	0
302d1     00          | 	byte	0
302d2                 | LR__5037
302d2                 | 	byte	
302d2     00          | 	byte	0
302d3                 | LR__5038
302d3                 | 	byte	
302d3     00          | 	byte	0
302d4                 | LR__5039
302d4                 | 	byte	
302d4     00          | 	byte	0
302d5                 | LR__5040
302d5                 | 	byte	
302d5     00          | 	byte	0
302d6                 | LR__5041
302d6     22          | 	byte	34
302d7     00          | 	byte	0
302d8                 | LR__5042
302d8     22          | 	byte	34
302d9     00          | 	byte	0
302da                 | LR__5043
302da     3A          | 	byte	":"
302db     00          | 	byte	0
302dc                 | LR__5044
302dc                 | 	byte	
302dc     00          | 	byte	0
302dd                 | LR__5045
302dd                 | 	byte	
302dd     00          | 	byte	0
302de                 | LR__5046
302de                 | 	byte	
302de     00          | 	byte	0
302df                 | LR__5047
302df                 | 	byte	
302df     00          | 	byte	0
302e0                 | LR__5048
302e0                 | 	byte	
302e0     00          | 	byte	0
302e1                 | LR__5049
302e1                 | 	byte	
302e1     00          | 	byte	0
302e2                 | LR__5050
302e2                 | 	byte	
302e2     00          | 	byte	0
302e3                 | LR__5051
302e3     30          | 	byte	"0"
302e4     00          | 	byte	0
302e5                 | LR__5052
302e5     22          | 	byte	34
302e6     00          | 	byte	0
302e7                 | LR__5053
302e7     22          | 	byte	34
302e8     00          | 	byte	0
302e9                 | LR__5054
302e9     22          | 	byte	34
302ea     00          | 	byte	0
302eb                 | LR__5055
302eb     22          | 	byte	34
302ec     00          | 	byte	0
302ed                 | LR__5056
302ed     22          | 	byte	34
302ee     00          | 	byte	0
302ef                 | LR__5057
302ef     3E          | 	byte	">"
302f0     00          | 	byte	0
302f1                 | LR__5058
302f1     3C          | 	byte	"<"
302f2     00          | 	byte	0
302f3                 | LR__5059
302f3     2B          | 	byte	"+"
302f4     00          | 	byte	0
302f5                 | LR__5060
302f5     2D          | 	byte	"-"
302f6     00          | 	byte	0
302f7                 | LR__5061
302f7     2A          | 	byte	"*"
302f8     00          | 	byte	0
302f9                 | LR__5062
302f9     2F          | 	byte	"/"
302fa     00          | 	byte	0
302fb                 | LR__5063
302fb     5E          | 	byte	"^"
302fc     00          | 	byte	0
302fd                 | LR__5064
302fd     3D          | 	byte	"="
302fe     00          | 	byte	0
302ff                 | LR__5065
302ff     2B          | 	byte	"+"
30300     00          | 	byte	0
30301                 | LR__5066
30301     2B          | 	byte	"+"
30302     00          | 	byte	0
30303                 | LR__5067
30303     2D          | 	byte	"-"
30304     00          | 	byte	0
30305                 | LR__5068
30305     2D          | 	byte	"-"
30306     00          | 	byte	0
30307                 | LR__5069
30307     3C          | 	byte	"<"
30308     00          | 	byte	0
30309                 | LR__5070
30309     3E          | 	byte	">"
3030a     00          | 	byte	0
3030b                 | LR__5071
3030b     22          | 	byte	34
3030c     00          | 	byte	0
3030d                 | LR__5072
3030d     22          | 	byte	34
3030e     00          | 	byte	0
3030f                 | LR__5073
3030f     65 6C 73 65 | 	byte	"else"
30313     00          | 	byte	0
30314                 | LR__5074
30314     74 68 65 6E | 	byte	"then"
30318     00          | 	byte	0
30319                 | LR__5075
30319     2E          | 	byte	"."
3031a     00          | 	byte	0
3031b                 | LR__5076
3031b     3F          | 	byte	"?"
3031c     00          | 	byte	0
3031d                 | LR__5077
3031d     3F          | 	byte	"?"
3031e     00          | 	byte	0
3031f                 | LR__5078
3031f     6D 6F 75 73 
30323     65          | 	byte	"mouse"
30324     00          | 	byte	0
30325                 | LR__5079
30325     63 75 72 73 
30329     6F 72       | 	byte	"cursor"
3032b     00          | 	byte	0
3032c                 | LR__5080
3032c     63 6C 69 63 
30330     6B          | 	byte	"click"
30331     00          | 	byte	0
30332                 | LR__5081
30332     6F 6E       | 	byte	"on"
30334     00          | 	byte	0
30335                 | LR__5082
30335     31          | 	byte	"1"
30336     00          | 	byte	0
30337                 | LR__5083
30337     6F 66 66    | 	byte	"off"
3033a     00          | 	byte	0
3033b                 | LR__5084
3033b     30          | 	byte	"0"
3033c     00          | 	byte	0
3033d                 | LR__5085
3033d     6D 6F 64 65 | 	byte	"mode"
30341     00          | 	byte	0
30342                 | LR__5086
30342     6D 2E       | 	byte	"m."
30344     00          | 	byte	0
30345                 | LR__5087
30345     61 74 61 72 
30349     69          | 	byte	"atari"
3034a     00          | 	byte	0
3034b                 | LR__5088
3034b     30          | 	byte	"0"
3034c     00          | 	byte	0
3034d                 | LR__5089
3034d     70 63 5F 61 
30351     6D 62 65 72 | 	byte	"pc_amber"
30355     00          | 	byte	0
30356                 | LR__5090
30356     31          | 	byte	"1"
30357     00          | 	byte	0
30358                 | LR__5091
30358     70 63 5F 67 
3035c     72 65 65 6E | 	byte	"pc_green"
30360     00          | 	byte	0
30361                 | LR__5092
30361     32          | 	byte	"2"
30362     00          | 	byte	0
30363                 | LR__5093
30363     70 63 5F 77 
30367     68 69 74 65 | 	byte	"pc_white"
3036b     00          | 	byte	0
3036c                 | LR__5094
3036c     33          | 	byte	"3"
3036d     00          | 	byte	0
3036e                 | LR__5095
3036e     73 74       | 	byte	"st"
30370     00          | 	byte	0
30371                 | LR__5096
30371     34          | 	byte	"4"
30372     00          | 	byte	0
30373                 | LR__5097
30373                 | 	byte	
30373     00          | 	byte	0
30374                 | LR__5098
30374     6C 6F 61 64 | 	byte	"load"
30378     00          | 	byte	0
30379                 | LR__5099
30379     73 61 76 65 | 	byte	"save"
3037d     00          | 	byte	0
3037e                 | LR__5100
3037e     62 72 75 6E | 	byte	"brun"
30382     00          | 	byte	0
30383                 | LR__5101
30383     72 75 6E    | 	byte	"run"
30386     00          | 	byte	0
30387                 | LR__5102
30387     6C 6F 2E    | 	byte	"lo."
3038a     00          | 	byte	0
3038b                 | LR__5103
3038b     73 2E       | 	byte	"s."
3038d     00          | 	byte	0
3038e                 | LR__5104
3038e     62 72 2E    | 	byte	"br."
30391     00          | 	byte	0
30392                 | LR__5105
30392     65 6E 74 65 
30396     72          | 	byte	"enter"
30397     00          | 	byte	0
30398                 | LR__5106
30398     65 2E       | 	byte	"e."
3039a     00          | 	byte	0
3039b                 | LR__5107
3039b                 | 	byte	
3039b     00          | 	byte	0
3039c                 | LR__5108
3039c                 | 	byte	
3039c     00          | 	byte	0
3039d                 | LR__5109
3039d                 | 	byte	
3039d     00          | 	byte	0
3039e                 | LR__5110
3039e                 | 	byte	
3039e     00          | 	byte	0
3039f                 | LR__5111
3039f                 | 	byte	
3039f     00          | 	byte	0
303a0                 | LR__5112
303a0     52 65 61 64 
303a4     79          | 	byte	"Ready"
303a5     00          | 	byte	0
303a6                 | LR__5113
303a6     2B          | 	byte	"+"
303a7     00          | 	byte	0
303a8                 | LR__5114
303a8     2D          | 	byte	"-"
303a9     00          | 	byte	0
303aa                 | LR__5115
303aa     6F 72       | 	byte	"or"
303ac     00          | 	byte	0
303ad                 | LR__5116
303ad     78 6F 72    | 	byte	"xor"
303b0     00          | 	byte	0
303b1                 | LR__5117
303b1     2A          | 	byte	"*"
303b2     00          | 	byte	0
303b3                 | LR__5118
303b3     2F          | 	byte	"/"
303b4     00          | 	byte	0
303b5                 | LR__5119
303b5     61 6E 64    | 	byte	"and"
303b8     00          | 	byte	0
303b9                 | LR__5120
303b9     64 69 76    | 	byte	"div"
303bc     00          | 	byte	0
303bd                 | LR__5121
303bd     6D 6F 64    | 	byte	"mod"
303c0     00          | 	byte	0
303c1                 | LR__5122
303c1     73 68 6C    | 	byte	"shl"
303c4     00          | 	byte	0
303c5                 | LR__5123
303c5     73 68 72    | 	byte	"shr"
303c8     00          | 	byte	0
303c9                 | LR__5124
303c9     5E          | 	byte	"^"
303ca     00          | 	byte	0
303cb                 | LR__5125
303cb     6E 6F 74    | 	byte	"not"
303ce     00          | 	byte	0
303cf                 | LR__5126
303cf     40          | 	byte	"@"
303d0     00          | 	byte	0
303d1                 | LR__5127
303d1     3D          | 	byte	"="
303d2     00          | 	byte	0
303d3                 | LR__5128
303d3     3E 3D       | 	byte	">="
303d5     00          | 	byte	0
303d6                 | LR__5129
303d6     3C 3D       | 	byte	"<="
303d8     00          | 	byte	0
303d9                 | LR__5130
303d9     3C          | 	byte	"<"
303da     00          | 	byte	0
303db                 | LR__5131
303db     3E          | 	byte	">"
303dc     00          | 	byte	0
303dd                 | LR__5132
303dd     3C 3E       | 	byte	"<>"
303df     00          | 	byte	0
303e0                 | LR__5133
303e0     2B 2B       | 	byte	"++"
303e2     00          | 	byte	0
303e3                 | LR__5134
303e3     2D 2D       | 	byte	"--"
303e5     00          | 	byte	0
303e6                 | LR__5135
303e6     23          | 	byte	"#"
303e7     00          | 	byte	0
303e8                 | LR__5136
303e8     30          | 	byte	"0"
303e9     00          | 	byte	0
303ea                 | LR__5137
303ea     39          | 	byte	"9"
303eb     00          | 	byte	0
303ec                 | LR__5138
303ec     23 72 65 61 
303f0     64          | 	byte	"#read"
303f1     00          | 	byte	0
303f2                 | LR__5139
303f2     23 77 72 69 
303f6     74 65       | 	byte	"#write"
303f8     00          | 	byte	0
303f9                 | LR__5140
303f9     23 61 70 70 
303fd     65 6E 64    | 	byte	"#append"
30400     00          | 	byte	0
30401                 | LR__5141
30401     23          | 	byte	"#"
30402     00          | 	byte	0
30403                 | LR__5142
30403     23          | 	byte	"#"
30404     00          | 	byte	0
30405                 | LR__5143
30405     2D          | 	byte	"-"
30406     00          | 	byte	0
30407                 | LR__5144
30407     30          | 	byte	"0"
30408     00          | 	byte	0
30409                 | LR__5145
30409     63          | 	byte	"c"
3040a     00          | 	byte	0
3040b                 | LR__5146
3040b     63 23       | 	byte	"c#"
3040d     00          | 	byte	0
3040e                 | LR__5147
3040e     64          | 	byte	"d"
3040f     00          | 	byte	0
30410                 | LR__5148
30410     64 23       | 	byte	"d#"
30412     00          | 	byte	0
30413                 | LR__5149
30413     65          | 	byte	"e"
30414     00          | 	byte	0
30415                 | LR__5150
30415     66          | 	byte	"f"
30416     00          | 	byte	0
30417                 | LR__5151
30417     66 23       | 	byte	"f#"
30419     00          | 	byte	0
3041a                 | LR__5152
3041a     67          | 	byte	"g"
3041b     00          | 	byte	0
3041c                 | LR__5153
3041c     67 23       | 	byte	"g#"
3041e     00          | 	byte	0
3041f                 | LR__5154
3041f     61          | 	byte	"a"
30420     00          | 	byte	0
30421                 | LR__5155
30421     61 23       | 	byte	"a#"
30423     00          | 	byte	0
30424                 | LR__5156
30424     68          | 	byte	"h"
30425     00          | 	byte	0
30426                 | LR__5157
30426     62          | 	byte	"b"
30427     00          | 	byte	0
30428                 | LR__5158
30428     2B          | 	byte	"+"
30429     00          | 	byte	0
3042a                 | LR__5159
3042a     2D          | 	byte	"-"
3042b     00          | 	byte	0
3042c                 | LR__5160
3042c     3D          | 	byte	"="
3042d     00          | 	byte	0
3042e                 | LR__5161
3042e     2C          | 	byte	","
3042f     00          | 	byte	0
30430                 | LR__5162
30430     2A          | 	byte	"*"
30431     00          | 	byte	0
30432                 | LR__5163
30432     2F          | 	byte	"/"
30433     00          | 	byte	0
30434                 | LR__5164
30434     3B          | 	byte	";"
30435     00          | 	byte	0
30436                 | LR__5165
30436     22          | 	byte	34
30437     00          | 	byte	0
30438                 | LR__5166
30438     5E          | 	byte	"^"
30439     00          | 	byte	0
3043a                 | LR__5167
3043a     29          | 	byte	")"
3043b     00          | 	byte	0
3043c                 | LR__5168
3043c     28          | 	byte	"("
3043d     00          | 	byte	0
3043e                 | LR__5169
3043e     3A          | 	byte	":"
3043f     00          | 	byte	0
30440                 | LR__5170
30440     20          | 	byte	" "
30441     00          | 	byte	0
30442                 | LR__5171
30442     3E          | 	byte	">"
30443     00          | 	byte	0
30444                 | LR__5172
30444     3C          | 	byte	"<"
30445     00          | 	byte	0
30446                 | LR__5173
30446     3D          | 	byte	"="
30447     00          | 	byte	0
30448                 | LR__5174
30448     62 65 65 70 | 	byte	"beep"
3044c     00          | 	byte	0
3044d                 | LR__5175
3044d     62 2E       | 	byte	"b."
3044f     00          | 	byte	0
30450                 | LR__5176
30450     62 6F 78    | 	byte	"box"
30453     00          | 	byte	0
30454                 | LR__5177
30454     62 72 75 6E | 	byte	"brun"
30458     00          | 	byte	0
30459                 | LR__5178
30459     62 72 2E    | 	byte	"br."
3045c     00          | 	byte	0
3045d                 | LR__5179
3045d     63 68 61 6E 
30461     67 65 66 72 
30465     65 71       | 	byte	"changefreq"
30467     00          | 	byte	0
30468                 | LR__5180
30468     63 66 2E    | 	byte	"cf."
3046b     00          | 	byte	0
3046c                 | LR__5181
3046c     63 68 61 6E 
30470     67 65 70 61 
30474     6E          | 	byte	"changepan"
30475     00          | 	byte	0
30476                 | LR__5182
30476     63 70 2E    | 	byte	"cp."
30479     00          | 	byte	0
3047a                 | LR__5183
3047a     63 68 61 6E 
3047e     67 65 76 6F 
30482     6C          | 	byte	"changevol"
30483     00          | 	byte	0
30484                 | LR__5184
30484     63 76 2E    | 	byte	"cv."
30487     00          | 	byte	0
30488                 | LR__5185
30488     63 68 61 6E 
3048c     67 65 77 61 
30490     76 65       | 	byte	"changewave"
30492     00          | 	byte	0
30493                 | LR__5186
30493     63 77 2E    | 	byte	"cw."
30496     00          | 	byte	0
30497                 | LR__5187
30497     63 69 72 63 
3049b     6C 65       | 	byte	"circle"
3049d     00          | 	byte	0
3049e                 | LR__5188
3049e     63 69 2E    | 	byte	"ci."
304a1     00          | 	byte	0
304a2                 | LR__5189
304a2     63 6C 69 63 
304a6     6B          | 	byte	"click"
304a7     00          | 	byte	0
304a8                 | LR__5190
304a8     63 6C 6F 73 
304ac     65          | 	byte	"close"
304ad     00          | 	byte	0
304ae                 | LR__5191
304ae     63 6C 73    | 	byte	"cls"
304b1     00          | 	byte	0
304b2                 | LR__5192
304b2     63 6F 6C 6F 
304b6     72          | 	byte	"color"
304b7     00          | 	byte	0
304b8                 | LR__5193
304b8     63 2E       | 	byte	"c."
304ba     00          | 	byte	0
304bb                 | LR__5194
304bb     63 73 61 76 
304bf     65          | 	byte	"csave"
304c0     00          | 	byte	0
304c1                 | LR__5195
304c1     63 73 2E    | 	byte	"cs."
304c4     00          | 	byte	0
304c5                 | LR__5196
304c5     63 75 72 73 
304c9     6F 72       | 	byte	"cursor"
304cb     00          | 	byte	0
304cc                 | LR__5197
304cc     64 65 66 73 
304d0     6E 64       | 	byte	"defsnd"
304d2     00          | 	byte	0
304d3                 | LR__5198
304d3     64 65 66 65 
304d7     6E 76       | 	byte	"defenv"
304d9     00          | 	byte	0
304da                 | LR__5199
304da     64 65 66 73 
304de     70 72 69 74 
304e2     65          | 	byte	"defsprite"
304e3     00          | 	byte	0
304e4                 | LR__5200
304e4     64 73 2E    | 	byte	"ds."
304e7     00          | 	byte	0
304e8                 | LR__5201
304e8     64 65 67    | 	byte	"deg"
304eb     00          | 	byte	0
304ec                 | LR__5202
304ec     64 69 6D    | 	byte	"dim"
304ef     00          | 	byte	0
304f0                 | LR__5203
304f0     64 69 72    | 	byte	"dir"
304f3     00          | 	byte	0
304f4                 | LR__5204
304f4     64 70 6F 6B 
304f8     65          | 	byte	"dpoke"
304f9     00          | 	byte	0
304fa                 | LR__5205
304fa     64 72 61 77 | 	byte	"draw"
304fe     00          | 	byte	0
304ff                 | LR__5206
304ff     64 72 2E    | 	byte	"dr."
30502     00          | 	byte	0
30503                 | LR__5207
30503     65 6C 73 65 | 	byte	"else"
30507     00          | 	byte	0
30508                 | LR__5208
30508     65 6E 64    | 	byte	"end"
3050b     00          | 	byte	0
3050c                 | LR__5209
3050c     65 6E 74 65 
30510     72          | 	byte	"enter"
30511     00          | 	byte	0
30512                 | LR__5210
30512     65 2E       | 	byte	"e."
30514     00          | 	byte	0
30515                 | LR__5211
30515     66 63 69 72 
30519     63 6C 65    | 	byte	"fcircle"
3051c     00          | 	byte	0
3051d                 | LR__5212
3051d     66 63 2E    | 	byte	"fc."
30520     00          | 	byte	0
30521                 | LR__5213
30521     66 69 6C 6C | 	byte	"fill"
30525     00          | 	byte	0
30526                 | LR__5214
30526     66 69 2E    | 	byte	"fi."
30529     00          | 	byte	0
3052a                 | LR__5215
3052a     66 6F 6E 74 | 	byte	"font"
3052e     00          | 	byte	0
3052f                 | LR__5216
3052f     66 6F 72    | 	byte	"for"
30532     00          | 	byte	0
30533                 | LR__5217
30533     66 2E       | 	byte	"f."
30535     00          | 	byte	0
30536                 | LR__5218
30536     66 72 61 6D 
3053a     65          | 	byte	"frame"
3053b     00          | 	byte	0
3053c                 | LR__5219
3053c     66 72 2E    | 	byte	"fr."
3053f     00          | 	byte	0
30540                 | LR__5220
30540     67 65 74    | 	byte	"get"
30543     00          | 	byte	0
30544                 | LR__5221
30544     67 6F 73 75 
30548     62          | 	byte	"gosub"
30549     00          | 	byte	0
3054a                 | LR__5222
3054a     67 6F 74 6F | 	byte	"goto"
3054e     00          | 	byte	0
3054f                 | LR__5223
3054f     67 2E       | 	byte	"g."
30551     00          | 	byte	0
30552                 | LR__5224
30552     69 66       | 	byte	"if"
30554     00          | 	byte	0
30555                 | LR__5225
30555     69 6E 6B    | 	byte	"ink"
30558     00          | 	byte	0
30559                 | LR__5226
30559     69 2E       | 	byte	"i."
3055b     00          | 	byte	0
3055c                 | LR__5227
3055c     6C 69 73 74 | 	byte	"list"
30560     00          | 	byte	0
30561                 | LR__5228
30561     6C 2E       | 	byte	"l."
30563     00          | 	byte	0
30564                 | LR__5229
30564     6C 6F 61 64 | 	byte	"load"
30568     00          | 	byte	0
30569                 | LR__5230
30569     6C 6F 2E    | 	byte	"lo."
3056c     00          | 	byte	0
3056d                 | LR__5231
3056d     6C 70 6F 6B 
30571     65          | 	byte	"lpoke"
30572     00          | 	byte	0
30573                 | LR__5232
30573     6D 6F 64 65 | 	byte	"mode"
30577     00          | 	byte	0
30578                 | LR__5233
30578     6D 2E       | 	byte	"m."
3057a     00          | 	byte	0
3057b                 | LR__5234
3057b     6D 6F 75 73 
3057f     65          | 	byte	"mouse"
30580     00          | 	byte	0
30581                 | LR__5235
30581     6E 65 77    | 	byte	"new"
30584     00          | 	byte	0
30585                 | LR__5236
30585     6E 65 78 74 | 	byte	"next"
30589     00          | 	byte	0
3058a                 | LR__5237
3058a     6E 2E       | 	byte	"n."
3058c     00          | 	byte	0
3058d                 | LR__5238
3058d     6F 70 65 6E | 	byte	"open"
30591     00          | 	byte	0
30592                 | LR__5239
30592     70 61 70 65 
30596     72          | 	byte	"paper"
30597     00          | 	byte	0
30598                 | LR__5240
30598     70 61 2E    | 	byte	"pa."
3059b     00          | 	byte	0
3059c                 | LR__5241
3059c     70 69 6E 66 
305a0     6C 6F 61 74 | 	byte	"pinfloat"
305a4     00          | 	byte	0
305a5                 | LR__5242
305a5     70 69 6E 68 
305a9     69          | 	byte	"pinhi"
305aa     00          | 	byte	0
305ab                 | LR__5243
305ab     70 69 6E 6C 
305af     6F          | 	byte	"pinlo"
305b0     00          | 	byte	0
305b1                 | LR__5244
305b1     70 69 6E 73 
305b5     74 61 72 74 | 	byte	"pinstart"
305b9     00          | 	byte	0
305ba                 | LR__5245
305ba     70 69 6E 74 
305be     6F 67 67 6C 
305c2     65          | 	byte	"pintoggle"
305c3     00          | 	byte	0
305c4                 | LR__5246
305c4     70 69 6E 77 
305c8     72 69 74 65 | 	byte	"pinwrite"
305cc     00          | 	byte	0
305cd                 | LR__5247
305cd     70 6C 61 79 | 	byte	"play"
305d1     00          | 	byte	0
305d2                 | LR__5248
305d2     70 2E       | 	byte	"p."
305d4     00          | 	byte	0
305d5                 | LR__5249
305d5     70 6C 6F 74 | 	byte	"plot"
305d9     00          | 	byte	0
305da                 | LR__5250
305da     70 6C 2E    | 	byte	"pl."
305dd     00          | 	byte	0
305de                 | LR__5251
305de     70 6F 6B 65 | 	byte	"poke"
305e2     00          | 	byte	0
305e3                 | LR__5252
305e3     70 6F 70    | 	byte	"pop"
305e6     00          | 	byte	0
305e7                 | LR__5253
305e7     70 6F 73 69 
305eb     74 69 6F 6E | 	byte	"position"
305ef     00          | 	byte	0
305f0                 | LR__5254
305f0     70 6F 73 2E | 	byte	"pos."
305f4     00          | 	byte	0
305f5                 | LR__5255
305f5     70 72 69 6E 
305f9     74          | 	byte	"print"
305fa     00          | 	byte	0
305fb                 | LR__5256
305fb     3F          | 	byte	"?"
305fc     00          | 	byte	0
305fd                 | LR__5257
305fd     70 75 74    | 	byte	"put"
30600     00          | 	byte	0
30601                 | LR__5258
30601     72 61 64    | 	byte	"rad"
30604     00          | 	byte	0
30605                 | LR__5259
30605     72 65 6C 65 
30609     61 73 65    | 	byte	"release"
3060c     00          | 	byte	0
3060d                 | LR__5260
3060d     72 65 6D    | 	byte	"rem"
30610     00          | 	byte	0
30611                 | LR__5261
30611     27          | 	byte	"'"
30612     00          | 	byte	0
30613                 | LR__5262
30613     72 65 74 75 
30617     72 6E       | 	byte	"return"
30619     00          | 	byte	0
3061a                 | LR__5263
3061a     72 75 6E    | 	byte	"run"
3061d     00          | 	byte	0
3061e                 | LR__5264
3061e     73 61 76 65 | 	byte	"save"
30622     00          | 	byte	0
30623                 | LR__5265
30623     73 2E       | 	byte	"s."
30625     00          | 	byte	0
30626                 | LR__5266
30626     73 65 74 64 
3062a     65 6C 61 79 | 	byte	"setdelay"
3062e     00          | 	byte	0
3062f                 | LR__5267
3062f     73 64 2E    | 	byte	"sd."
30632     00          | 	byte	0
30633                 | LR__5268
30633     73 65 74 65 
30637     6E 76       | 	byte	"setenv"
30639     00          | 	byte	0
3063a                 | LR__5269
3063a     73 65 2E    | 	byte	"se."
3063d     00          | 	byte	0
3063e                 | LR__5270
3063e     73 65 74 6C 
30642     65 6E       | 	byte	"setlen"
30644     00          | 	byte	0
30645                 | LR__5271
30645     73 6C 2E    | 	byte	"sl."
30648     00          | 	byte	0
30649                 | LR__5272
30649     73 65 74 70 
3064d     61 6E       | 	byte	"setpan"
3064f     00          | 	byte	0
30650                 | LR__5273
30650     73 70       | 	byte	"sp"
30652     00          | 	byte	0
30653                 | LR__5274
30653     73 65 74 73 
30657     75 73 74 61 
3065b     69 6E       | 	byte	"setsustain"
3065d     00          | 	byte	0
3065e                 | LR__5275
3065e     73 73 2E    | 	byte	"ss."
30661     00          | 	byte	0
30662                 | LR__5276
30662     73 65 74 76 
30666     6F 6C       | 	byte	"setvol"
30668     00          | 	byte	0
30669                 | LR__5277
30669     73 76 2E    | 	byte	"sv."
3066c     00          | 	byte	0
3066d                 | LR__5278
3066d     73 65 74 77 
30671     61 76 65    | 	byte	"setwave"
30674     00          | 	byte	0
30675                 | LR__5279
30675     73 77 2E    | 	byte	"sw."
30678     00          | 	byte	0
30679                 | LR__5280
30679     73 65 74 77 
3067d     61 76       | 	byte	"setwav"
3067f     00          | 	byte	0
30680                 | LR__5281
30680     73 68 75 74 
30684     75 70       | 	byte	"shutup"
30686     00          | 	byte	0
30687                 | LR__5282
30687     73 68 2E    | 	byte	"sh."
3068a     00          | 	byte	0
3068b                 | LR__5283
3068b     73 6F 75 6E 
3068f     64          | 	byte	"sound"
30690     00          | 	byte	0
30691                 | LR__5284
30691     73 6F 2E    | 	byte	"so."
30694     00          | 	byte	0
30695                 | LR__5285
30695     73 70 72 69 
30699     74 65       | 	byte	"sprite"
3069b     00          | 	byte	0
3069c                 | LR__5286
3069c     73 70 72 2E | 	byte	"spr."
306a0     00          | 	byte	0
306a1                 | LR__5287
306a1     74 68 65 6E | 	byte	"then"
306a5     00          | 	byte	0
306a6                 | LR__5288
306a6     77 61 69 74 
306aa     6D 73       | 	byte	"waitms"
306ac     00          | 	byte	0
306ad                 | LR__5289
306ad     77 61 69 74 
306b1     63 6C 6F 63 
306b5     6B          | 	byte	"waitclock"
306b6     00          | 	byte	0
306b7                 | LR__5290
306b7     77 63 2E    | 	byte	"wc."
306ba     00          | 	byte	0
306bb                 | LR__5291
306bb     77 61 69 74 
306bf     76 62 6C    | 	byte	"waitvbl"
306c2     00          | 	byte	0
306c3                 | LR__5292
306c3     77 76 2E    | 	byte	"wv."
306c6     00          | 	byte	0
306c7                 | LR__5293
306c7     77 78 70 69 
306cb     6E          | 	byte	"wxpin"
306cc     00          | 	byte	0
306cd                 | LR__5294
306cd     77 79 70 69 
306d1     6E          | 	byte	"wypin"
306d2     00          | 	byte	0
306d3                 | LR__5295
306d3     61 62 73    | 	byte	"abs"
306d6     00          | 	byte	0
306d7                 | LR__5296
306d7     61 63 6F 73 | 	byte	"acos"
306db     00          | 	byte	0
306dc                 | LR__5297
306dc     61 64 72    | 	byte	"adr"
306df     00          | 	byte	0
306e0                 | LR__5298
306e0     61 64 64 72 | 	byte	"addr"
306e4     00          | 	byte	0
306e5                 | LR__5299
306e5     61 73 63    | 	byte	"asc"
306e8     00          | 	byte	0
306e9                 | LR__5300
306e9     61 73 69 6E | 	byte	"asin"
306ed     00          | 	byte	0
306ee                 | LR__5301
306ee     61 74 6E    | 	byte	"atn"
306f1     00          | 	byte	0
306f2                 | LR__5302
306f2     62 69 6E 24 | 	byte	"bin$"
306f6     00          | 	byte	0
306f7                 | LR__5303
306f7     63 68 72 24 | 	byte	"chr$"
306fb     00          | 	byte	0
306fc                 | LR__5304
306fc     63 6F 73    | 	byte	"cos"
306ff     00          | 	byte	0
30700                 | LR__5305
30700     64 70 65 65 
30704     6B          | 	byte	"dpeek"
30705     00          | 	byte	0
30706                 | LR__5306
30706     66 72 65    | 	byte	"fre"
30709     00          | 	byte	0
3070a                 | LR__5307
3070a     67 65 74 70 
3070e     69 78 65 6C | 	byte	"getpixel"
30712     00          | 	byte	0
30713                 | LR__5308
30713     67 65 2E    | 	byte	"ge."
30716     00          | 	byte	0
30717                 | LR__5309
30717     67 65 74 65 
3071b     6E 76 73 75 
3071f     73 74 61 69 
30723     6E          | 	byte	"getenvsustain"
30724     00          | 	byte	0
30725                 | LR__5310
30725     67 65 74 6E 
30729     6F 74 65 76 
3072d     61 6C 75 65 | 	byte	"getnotevalue"
30731     00          | 	byte	0
30732                 | LR__5311
30732     67 65 74 74 
30736     69 6D 65    | 	byte	"gettime"
30739     00          | 	byte	0
3073a                 | LR__5312
3073a     68 65 78 24 | 	byte	"hex$"
3073e     00          | 	byte	0
3073f                 | LR__5313
3073f     69 6E 6B 65 
30743     79 24       | 	byte	"inkey$"
30745     00          | 	byte	0
30746                 | LR__5314
30746     69 6E 74    | 	byte	"int"
30749     00          | 	byte	0
3074a                 | LR__5315
3074a     6C 65 66 74 
3074e     24          | 	byte	"left$"
3074f     00          | 	byte	0
30750                 | LR__5316
30750     6C 65 6E    | 	byte	"len"
30753     00          | 	byte	0
30754                 | LR__5317
30754     6C 6F 67    | 	byte	"log"
30757     00          | 	byte	0
30758                 | LR__5318
30758     6C 70 65 65 
3075c     6B          | 	byte	"lpeek"
3075d     00          | 	byte	0
3075e                 | LR__5319
3075e     6D 69 64 24 | 	byte	"mid$"
30762     00          | 	byte	0
30763                 | LR__5320
30763     6D 6F 75 73 
30767     65 6B       | 	byte	"mousek"
30769     00          | 	byte	0
3076a                 | LR__5321
3076a     6D 6F 75 73 
3076e     65 77       | 	byte	"mousew"
30770     00          | 	byte	0
30771                 | LR__5322
30771     6D 6F 75 73 
30775     65 78       | 	byte	"mousex"
30777     00          | 	byte	0
30778                 | LR__5323
30778     6D 6F 75 73 
3077c     65 79       | 	byte	"mousey"
3077e     00          | 	byte	0
3077f                 | LR__5324
3077f     70 65 65 6B | 	byte	"peek"
30783     00          | 	byte	0
30784                 | LR__5325
30784     70 69 6E 72 
30788     65 61 64    | 	byte	"pinread"
3078b     00          | 	byte	0
3078c                 | LR__5326
3078c     72 64 70 69 
30790     6E          | 	byte	"rdpin"
30791     00          | 	byte	0
30792                 | LR__5327
30792     72 69 67 68 
30796     74 24       | 	byte	"right$"
30798     00          | 	byte	0
30799                 | LR__5328
30799     72 71 70 69 
3079d     6E          | 	byte	"rqpin"
3079e     00          | 	byte	0
3079f                 | LR__5329
3079f     72 6F 75 6E 
307a3     64          | 	byte	"round"
307a4     00          | 	byte	0
307a5                 | LR__5330
307a5     72 6E 64    | 	byte	"rnd"
307a8     00          | 	byte	0
307a9                 | LR__5331
307a9     73 69 6E    | 	byte	"sin"
307ac     00          | 	byte	0
307ad                 | LR__5332
307ad     73 71 72    | 	byte	"sqr"
307b0     00          | 	byte	0
307b1                 | LR__5333
307b1     73 74 69 63 
307b5     6B          | 	byte	"stick"
307b6     00          | 	byte	0
307b7                 | LR__5334
307b7     73 74 72 69 
307bb     67          | 	byte	"strig"
307bc     00          | 	byte	0
307bd                 | LR__5335
307bd     73 74 72 24 | 	byte	"str$"
307c1     00          | 	byte	0
307c2                 | LR__5336
307c2     74 61 6E    | 	byte	"tan"
307c5     00          | 	byte	0
307c6                 | LR__5337
307c6     76 61 6C    | 	byte	"val"
307c9     00          | 	byte	0
307ca                 | LR__5338
307ca     76 61 72 70 
307ce     74 72       | 	byte	"varptr"
307d0     00          | 	byte	0
307d1                 | LR__5339
307d1     61          | 	byte	"a"
307d2     00          | 	byte	0
307d3                 | LR__5340
307d3     7A          | 	byte	"z"
307d4     00          | 	byte	0
307d5                 | LR__5341
307d5     5F          | 	byte	"_"
307d6     00          | 	byte	0
307d7                 | LR__5342
307d7     61          | 	byte	"a"
307d8     00          | 	byte	0
307d9                 | LR__5343
307d9     7A          | 	byte	"z"
307da     00          | 	byte	0
307db                 | LR__5344
307db     30          | 	byte	"0"
307dc     00          | 	byte	0
307dd                 | LR__5345
307dd     39          | 	byte	"9"
307de     00          | 	byte	0
307df                 | LR__5346
307df     5F          | 	byte	"_"
307e0     00          | 	byte	0
307e1                 | LR__5347
307e1     2E          | 	byte	"."
307e2     00          | 	byte	0
307e3                 | LR__5348
307e3     61          | 	byte	"a"
307e4     00          | 	byte	0
307e5                 | LR__5349
307e5     7A          | 	byte	"z"
307e6     00          | 	byte	0
307e7                 | LR__5350
307e7     30          | 	byte	"0"
307e8     00          | 	byte	0
307e9                 | LR__5351
307e9     39          | 	byte	"9"
307ea     00          | 	byte	0
307eb                 | LR__5352
307eb     5F          | 	byte	"_"
307ec     00          | 	byte	0
307ed                 | LR__5353
307ed     24          | 	byte	"$"
307ee     00          | 	byte	0
307ef                 | LR__5354
307ef     25          | 	byte	"%"
307f0     00          | 	byte	0
307f1                 | LR__5355
307f1     21          | 	byte	"!"
307f2     00          | 	byte	0
307f3                 | LR__5356
307f3     30          | 	byte	"0"
307f4     00          | 	byte	0
307f5                 | LR__5357
307f5     39          | 	byte	"9"
307f6     00          | 	byte	0
307f7                 | LR__5358
307f7     2E          | 	byte	"."
307f8     00          | 	byte	0
307f9                 | LR__5359
307f9     24          | 	byte	"$"
307fa     00          | 	byte	0
307fb                 | LR__5360
307fb     25          | 	byte	"%"
307fc     00          | 	byte	0
307fd                 | LR__5361
307fd     2D          | 	byte	"-"
307fe     00          | 	byte	0
307ff                 | LR__5362
307ff     2E          | 	byte	"."
30800     00          | 	byte	0
30801                 | LR__5363
30801     24          | 	byte	"$"
30802     00          | 	byte	0
30803                 | LR__5364
30803     25          | 	byte	"%"
30804     00          | 	byte	0
30805                 | LR__5365
30805     30          | 	byte	"0"
30806     00          | 	byte	0
30807                 | LR__5366
30807     39          | 	byte	"9"
30808     00          | 	byte	0
30809                 | LR__5367
30809     5F          | 	byte	"_"
3080a     00          | 	byte	0
3080b                 | LR__5368
3080b     2E          | 	byte	"."
3080c     00          | 	byte	0
3080d                 | LR__5369
3080d     45          | 	byte	"E"
3080e     00          | 	byte	0
3080f                 | LR__5370
3080f     65          | 	byte	"e"
30810     00          | 	byte	0
30811                 | LR__5371
30811     2D          | 	byte	"-"
30812     00          | 	byte	0
30813                 | LR__5372
30813     61          | 	byte	"a"
30814     00          | 	byte	0
30815                 | LR__5373
30815     66          | 	byte	"f"
30816     00          | 	byte	0
30817                 | LR__5374
30817     30          | 	byte	"0"
30818     00          | 	byte	0
30819                 | LR__5375
30819     31          | 	byte	"1"
3081a     00          | 	byte	0
3081b                 | LR__5376
3081b     5F          | 	byte	"_"
3081c     00          | 	byte	0
3081d                 | LR__5377
3081d     2D          | 	byte	"-"
3081e     00          | 	byte	0
3081f                 | LR__5378
3081f     65          | 	byte	"e"
30820     00          | 	byte	0
30821                 | LR__5379
30821     2E          | 	byte	"."
30822     00          | 	byte	0
30823                 | LR__5380
30823     45          | 	byte	"E"
30824     00          | 	byte	0
30825                 | LR__5381
30825     65          | 	byte	"e"
30826     00          | 	byte	0
30827                 | LR__5382
30827     30          | 	byte	"0"
30828     00          | 	byte	0
30829                 | LR__5383
30829     39          | 	byte	"9"
3082a     00          | 	byte	0
3082b                 | LR__5384
3082b     24          | 	byte	"$"
3082c     00          | 	byte	0
3082d                 | LR__5385
3082d     25          | 	byte	"%"
3082e     00          | 	byte	0
3082f                 | LR__5386
3082f     2D          | 	byte	"-"
30830     00          | 	byte	0
30831                 | LR__5387
30831     24          | 	byte	"$"
30832     00          | 	byte	0
30833                 | LR__5388
30833     25          | 	byte	"%"
30834     00          | 	byte	0
30835                 | LR__5389
30835     30          | 	byte	"0"
30836     00          | 	byte	0
30837                 | LR__5390
30837     39          | 	byte	"9"
30838     00          | 	byte	0
30839                 | LR__5391
30839     5F          | 	byte	"_"
3083a     00          | 	byte	0
3083b                 | LR__5392
3083b     30          | 	byte	"0"
3083c     00          | 	byte	0
3083d                 | LR__5393
3083d     39          | 	byte	"9"
3083e     00          | 	byte	0
3083f                 | LR__5394
3083f     61          | 	byte	"a"
30840     00          | 	byte	0
30841                 | LR__5395
30841     66          | 	byte	"f"
30842     00          | 	byte	0
30843                 | LR__5396
30843     5F          | 	byte	"_"
30844     00          | 	byte	0
30845                 | LR__5397
30845     30          | 	byte	"0"
30846     00          | 	byte	0
30847                 | LR__5398
30847     31          | 	byte	"1"
30848     00          | 	byte	0
30849                 | LR__5399
30849     5F          | 	byte	"_"
3084a     00          | 	byte	0
3084b                 | LR__5400
3084b     30          | 	byte	"0"
3084c     00          | 	byte	0
3084d                 | LR__5401
3084d     39          | 	byte	"9"
3084e     00          | 	byte	0
3084f                 | LR__5402
3084f     5F          | 	byte	"_"
30850     00          | 	byte	0
30851                 | LR__5403
30851     22          | 	byte	34
30852     00          | 	byte	0
30853                 | LR__5404
30853     22          | 	byte	34
30854     00          | 	byte	0
30855                 | LR__5405
30855     44 69 6D 3A 
30859     20 61 74 20 
3085d     6C 69 6E 65 
30861     20          | 	byte	"Dim: at line "
30862     00          | 	byte	0
30863                 | LR__5406
30863     3A 20 77 61 
30867     72 6E 69 6E 
3086b     67 3A 20 74 
3086f     68 65 20 76 
30873     61 72 69 61 
30877     62 6C 65 20 
3087b     65 78 69 73 
3087f     74 65 64 2E | 	byte	": warning: the variable existed."
30883     00          | 	byte	0
30884                 | LR__5407
30884     28          | 	byte	"("
30885     00          | 	byte	0
30886                 | LR__5408
30886     61 73       | 	byte	"as"
30888     00          | 	byte	0
30889                 | LR__5409
30889     61 73       | 	byte	"as"
3088b     00          | 	byte	0
3088c                 | LR__5410
3088c     2C          | 	byte	","
3088d     00          | 	byte	0
3088e                 | LR__5411
3088e     29          | 	byte	")"
3088f     00          | 	byte	0
30890                 | LR__5412
30890     29          | 	byte	")"
30891     00          | 	byte	0
30892                 | LR__5413
30892     61 73       | 	byte	"as"
30894     00          | 	byte	0
30895                 | LR__5414
30895     62 79 74 65 | 	byte	"byte"
30899     00          | 	byte	0
3089a                 | LR__5415
3089a     75 62 79 74 
3089e     65          | 	byte	"ubyte"
3089f     00          | 	byte	0
308a0                 | LR__5416
308a0     73 68 6F 72 
308a4     74          | 	byte	"short"
308a5     00          | 	byte	0
308a6                 | LR__5417
308a6     75 73 68 6F 
308aa     72 74       | 	byte	"ushort"
308ac     00          | 	byte	0
308ad                 | LR__5418
308ad     6C 6F 6E 67 | 	byte	"long"
308b1     00          | 	byte	0
308b2                 | LR__5419
308b2     69 6E 74 65 
308b6     67 65 72    | 	byte	"integer"
308b9     00          | 	byte	0
308ba                 | LR__5420
308ba     75 6C 6F 6E 
308be     67          | 	byte	"ulong"
308bf     00          | 	byte	0
308c0                 | LR__5421
308c0     69 6E 74 36 
308c4     34          | 	byte	"int64"
308c5     00          | 	byte	0
308c6                 | LR__5422
308c6     75 69 6E 74 
308ca     36 34       | 	byte	"uint64"
308cc     00          | 	byte	0
308cd                 | LR__5423
308cd     73 69 6E 67 
308d1     6C 65       | 	byte	"single"
308d3     00          | 	byte	0
308d4                 | LR__5424
308d4     64 6F 75 62 
308d8     6C 65       | 	byte	"double"
308da     00          | 	byte	0
308db                 | LR__5425
308db     73 74 72 69 
308df     6E 67       | 	byte	"string"
308e1     00          | 	byte	0
308e2                 | LR__5426
308e2     74 6F       | 	byte	"to"
308e4     00          | 	byte	0
308e5                 | LR__5427
308e5     73 74 65 70 | 	byte	"step"
308e9     00          | 	byte	0
308ea                 | LR__5428
308ea     73 2E       | 	byte	"s."
308ec     00          | 	byte	0
308ed                 | LR__5429
308ed     24          | 	byte	"$"
308ee     00          | 	byte	0
308ef                 | LR__5430
308ef     26 68       | 	byte	"&h"
308f1     00          | 	byte	0
308f2                 | LR__5431
308f2     25          | 	byte	"%"
308f3     00          | 	byte	0
308f4                 | LR__5432
308f4     26 62       | 	byte	"&b"
308f6     00          | 	byte	0
308f7                 | LR__5433
308f7                 | 	byte	
308f7     00          | 	byte	0
308f8                 | LR__5434
308f8     2F          | 	byte	"/"
308f9     00          | 	byte	0
308fa                 | LR__5435
308fa                 | 	byte	
308fa     00          | 	byte	0
308fb                 | LR__5436
308fb     53 61 76 65 
308ff     64 20 61 73 
30903     20          | 	byte	"Saved as "
30904     00          | 	byte	0
30905                 | LR__5437
30905     2F          | 	byte	"/"
30906     00          | 	byte	0
30907                 | LR__5438
30907                 | 	byte	
30907     00          | 	byte	0
30908                 | LR__5439
30908     2F          | 	byte	"/"
30909     00          | 	byte	0
3090a                 | LR__5440
3090a     2F          | 	byte	"/"
3090b     00          | 	byte	0
3090c                 | LR__5441
3090c     2E 62 61 73 | 	byte	".bas"
30910     00          | 	byte	0
30911                 | LR__5442
30911     53 79 73 74 
30915     65 6D 20 65 
30919     72 72 6F 72 
3091d     20          | 	byte	"System error "
3091e     00          | 	byte	0
3091f                 | LR__5443
3091f     3A 20       | 	byte	": "
30921     00          | 	byte	0
30922                 | LR__5444
30922     2E 62 61 73 | 	byte	".bas"
30926     00          | 	byte	0
30927                 | LR__5445
30927     2F          | 	byte	"/"
30928     00          | 	byte	0
30929                 | LR__5446
30929                 | 	byte	
30929     00          | 	byte	0
3092a                 | LR__5447
3092a     4C 6F 61 64 
3092e     65 64 20    | 	byte	"Loaded "
30931     00          | 	byte	0
30932                 | LR__5448
30932     2F          | 	byte	"/"
30933     00          | 	byte	0
30934                 | LR__5449
30934     53 74 6F 70 
30938     70 65 64 20 
3093c     61 74 20 6C 
30940     69 6E 65 20 | 	byte	"Stopped at line "
30944     00          | 	byte	0
30945                 | LR__5450
30945                 | 	byte	
30945     00          | 	byte	0
30946                 | LR__5451
30946                 | 	byte	
30946     00          | 	byte	0
30947                 | LR__5452
30947     2F 73 64 2F 
3094b     6D 65 64 69 
3094f     61 2F 68 2F | 	byte	"/sd/media/h/"
30953     00          | 	byte	0
30954                 | LR__5453
30954     53 79 73 74 
30958     65 6D 20 65 
3095c     72 72 6F 72 
30960     20          | 	byte	"System error "
30961     00          | 	byte	0
30962                 | LR__5454
30962     3A 20       | 	byte	": "
30964     00          | 	byte	0
30965                 | LR__5455
30965                 | 	byte	
30965     00          | 	byte	0
30966                 | LR__5456
30966                 | 	byte	
30966     00          | 	byte	0
30967                 | LR__5457
30967     2F 73 64 2F 
3096b     6D 65 64 69 
3096f     61 2F 73 2F | 	byte	"/sd/media/s/"
30973     00          | 	byte	0
30974                 | LR__5458
30974     53 79 73 74 
30978     65 6D 20 65 
3097c     72 72 6F 72 
30980     20          | 	byte	"System error "
30981     00          | 	byte	0
30982                 | LR__5459
30982     3A 20       | 	byte	": "
30984     00          | 	byte	0
30985                 | LR__5460
30985                 | 	byte	
30985     00          | 	byte	0
30986                 | LR__5461
30986     6E 6F 6E 61 
3098a     6D 65 2E 62 
3098e     61 73       | 	byte	"noname.bas"
30990     00          | 	byte	0
30991                 | LR__5462
30991     66 69 6C 65 
30995     6E 61 6D 65 
30999     20 65 78 70 
3099d     65 63 74 65 
309a1     64          | 	byte	"filename expected"
309a2     00          | 	byte	0
309a3                 | LR__5463
309a3     72 65 61 64 | 	byte	"read"
309a7     00          | 	byte	0
309a8                 | LR__5464
309a8     77 72 69 74 
309ac     65          | 	byte	"write"
309ad     00          | 	byte	0
309ae                 | LR__5465
309ae     61 70 70 65 
309b2     6E 64       | 	byte	"append"
309b4     00          | 	byte	0
309b5                 | LR__5466
309b5     63 68 61 6E 
309b9     6E 65 6C 23 
309bd     20 65 78 70 
309c1     65 63 74 65 
309c5     64          | 	byte	"channel# expected"
309c6     00          | 	byte	0
309c7                 | LR__5467
309c7     4F 70 65 6E 
309cb     3A 20 69 6E 
309cf     76 61 6C 69 
309d3     64 20 6D 6F 
309d7     64 65       | 	byte	"Open: invalid mode"
309d9     00          | 	byte	0
309da                 | LR__5468
309da     63 68 61 6E 
309de     6E 65 6C 23 
309e2     20 65 78 70 
309e6     65 63 74 65 
309ea     64          | 	byte	"channel# expected"
309eb     00          | 	byte	0
309ec                 | LR__5469
309ec     45 72 72 6F 
309f0     72 20       | 	byte	"Error "
309f2     00          | 	byte	0
309f3                 | LR__5470
309f3     3A 20       | 	byte	": "
309f5     00          | 	byte	0
309f6                 | LR__5471
309f6                 | 	byte	
309f6     00          | 	byte	0
309f7                 | LR__5472
309f7                 | 	byte	
309f7     00          | 	byte	0
309f8                 | LR__5473
309f8     72 6E 64 3A 
309fc     20          | 	byte	"rnd: "
309fd     00          | 	byte	0
309fe                 | LR__5474
309fe     72 6E 64 3A 
30a02     20          | 	byte	"rnd: "
30a03     00          | 	byte	0
30a04                 | LR__5475
30a04     67 65 74 65 
30a08     6E 76 73 75 
30a0c     73 74 61 69 
30a10     6E 3A 20    | 	byte	"getenvsustain: "
30a13     00          | 	byte	0
30a14                 | LR__5476
30a14     73 69 6E 3A 
30a18     20          | 	byte	"sin: "
30a19     00          | 	byte	0
30a1a                 | LR__5477
30a1a     6D 69 64 24 
30a1e     3A 20       | 	byte	"mid$: "
30a20     00          | 	byte	0
30a21                 | LR__5478
30a21     6D 69 64 24 
30a25     3A 20       | 	byte	"mid$: "
30a27     00          | 	byte	0
30a28                 | LR__5479
30a28     72 69 67 68 
30a2c     74 24 3A 20 | 	byte	"right$: "
30a30     00          | 	byte	0
30a31                 | LR__5480
30a31     72 69 67 68 
30a35     74 24 3A 20 | 	byte	"right$: "
30a39     00          | 	byte	0
30a3a                 | LR__5481
30a3a     6C 65 66 74 
30a3e     24 3A 20    | 	byte	"left$: "
30a41     00          | 	byte	0
30a42                 | LR__5482
30a42     6C 65 66 74 
30a46     24 3A 20    | 	byte	"left$: "
30a49     00          | 	byte	0
30a4a                 | LR__5483
30a4a     61 73 63 3A 
30a4e     20          | 	byte	"asc: "
30a4f     00          | 	byte	0
30a50                 | LR__5484
30a50     61 73 63 3A 
30a54     20          | 	byte	"asc: "
30a55     00          | 	byte	0
30a56                 | LR__5485
30a56     6C 65 6E 3A 
30a5a     20          | 	byte	"len: "
30a5b     00          | 	byte	0
30a5c                 | LR__5486
30a5c     6C 65 6E 3A 
30a60     20          | 	byte	"len: "
30a61     00          | 	byte	0
30a62                 | LR__5487
30a62     63 68 72 24 
30a66     3A 20       | 	byte	"chr$: "
30a68     00          | 	byte	0
30a69                 | LR__5488
30a69     76 61 6C 3A 
30a6d     20          | 	byte	"val: "
30a6e     00          | 	byte	0
30a6f                 | LR__5489
30a6f     76 61 6C 3A 
30a73     20          | 	byte	"val: "
30a74     00          | 	byte	0
30a75                 | LR__5490
30a75     24          | 	byte	"$"
30a76     00          | 	byte	0
30a77                 | LR__5491
30a77     26 68       | 	byte	"&h"
30a79     00          | 	byte	0
30a7a                 | LR__5492
30a7a     25          | 	byte	"%"
30a7b     00          | 	byte	0
30a7c                 | LR__5493
30a7c     26 62       | 	byte	"&b"
30a7e     00          | 	byte	0
30a7f                 | LR__5494
30a7f     68 65 78 24 
30a83     3A 20       | 	byte	"hex$: "
30a85     00          | 	byte	0
30a86                 | LR__5495
30a86     62 69 6E 24 
30a8a     3A 20       | 	byte	"bin$: "
30a8c     00          | 	byte	0
30a8d                 | LR__5496
30a8d     63 6F 73 3A 
30a91     20          | 	byte	"cos: "
30a92     00          | 	byte	0
30a93                 | LR__5497
30a93     74 61 6E 3A 
30a97     20          | 	byte	"tan: "
30a98     00          | 	byte	0
30a99                 | LR__5498
30a99     61 73 69 6E 
30a9d     3A 20       | 	byte	"asin: "
30a9f     00          | 	byte	0
30aa0                 | LR__5499
30aa0     61 63 6F 73 
30aa4     3A 20       | 	byte	"acos: "
30aa6     00          | 	byte	0
30aa7                 | LR__5500
30aa7     61 74 6E 3A 
30aab     20          | 	byte	"atn: "
30aac     00          | 	byte	0
30aad                 | LR__5501
30aad     73 71 72 3A 
30ab1     20          | 	byte	"sqr: "
30ab2     00          | 	byte	0
30ab3                 | LR__5502
30ab3     73 74 69 63 
30ab7     6B 3A 20    | 	byte	"stick: "
30aba     00          | 	byte	0
30abb                 | LR__5503
30abb     73 74 72 69 
30abf     67 3A 20    | 	byte	"strig: "
30ac2     00          | 	byte	0
30ac3                 | LR__5504
30ac3     67 65 74 70 
30ac7     69 78 65 6C 
30acb     3A 20       | 	byte	"getpixel: "
30acd     00          | 	byte	0
30ace                 | LR__5505
30ace     6C 6F 67 3A 
30ad2     20          | 	byte	"log: "
30ad3     00          | 	byte	0
30ad4                 | LR__5506
30ad4     50 72 69 6E 
30ad8     74 20 74 6F 
30adc     20 63 68 61 
30ae0     6E 6E 65 6C 
30ae4     20          | 	byte	"Print to channel "
30ae5     00          | 	byte	0
30ae6                 | LR__5507
30ae6     20 42 41 53 
30aea     49 43 20 62 
30aee     79 74 65 73 
30af2     20 66 72 65 
30af6     65          | 	byte	" BASIC bytes free"
30af7     00          | 	byte	0
30af8                 | LR__5508
30af8                 | 	byte	
30af8     00          | 	byte	0
30af9                 | LR__5509
30af9     2F 73 64 2F 
30afd     62 61 73    | 	byte	"/sd/bas"
30b00     00          | 	byte	0
30b01                 | LR__5510
30b01     57 6F 72 6B 
30b05     69 6E 67 20 
30b09     64 69 72 65 
30b0d     63 74 6F 72 
30b11     79 3A 20    | 	byte	"Working directory: "
30b14     00          | 	byte	0
30b15                 | LR__5511
30b15                 | 	byte	
30b15     00          | 	byte	0
30b16                 | LR__5512
30b16     2A          | 	byte	"*"
30b17     00          | 	byte	0
30b18                 | LR__5513
30b18                 | 	byte	
30b18     00          | 	byte	0
30b19                 | LR__5514
30b19     5B 64 69 72 
30b1d     5D 20       | 	byte	"[dir] "
30b1f     00          | 	byte	0
30b20                 | LR__5515
30b20     4D 6F 72 65 
30b24     20 74 68 61 
30b28     6E 20 31 32 
30b2c     38 20 65 6E 
30b30     74 72 69 65 
30b34     73 20 66 6F 
30b38     75 6E 64 3A 
30b3c     20 63 6C 65 
30b40     61 6E 20 79 
30b44     6F 75 72 20 
30b48     64 69 72 65 
30b4c     63 74 6F 72 
30b50     79          | 	byte	"More than 128 entries found: clean your directory"
30b51     00          | 	byte	0
30b52                 | LR__5516
30b52     2A          | 	byte	"*"
30b53     00          | 	byte	0
30b54                 | LR__5517
30b54                 | 	byte	
30b54     00          | 	byte	0
30b55                 | LR__5518
30b55     4D 6F 72 65 
30b59     20 74 68 61 
30b5d     6E 20 31 32 
30b61     38 20 65 6E 
30b65     74 72 69 65 
30b69     73 20 66 6F 
30b6d     75 6E 64 3A 
30b71     20 63 6C 65 
30b75     61 6E 20 79 
30b79     6F 75 72 20 
30b7d     64 69 72 65 
30b81     63 74 6F 72 
30b85     79          | 	byte	"More than 128 entries found: clean your directory"
30b86     00          | 	byte	0
30b87                 | LR__5519
30b87     2F          | 	byte	"/"
30b88     00          | 	byte	0
30b89                 | LR__5520
30b89     2F 73 64 2F 
30b8d     62 69 6E 2F | 	byte	"/sd/bin/"
30b91     00          | 	byte	0
30b92                 | LR__5521
30b92     53 79 73 74 
30b96     65 6D 20 65 
30b9a     72 72 6F 72 
30b9e     20          | 	byte	"System error "
30b9f     00          | 	byte	0
30ba0                 | LR__5522
30ba0     3A 20       | 	byte	": "
30ba2     00          | 	byte	0
30ba3                 | LR__5523
30ba3                 | 	byte	
30ba3     00          | 	byte	0
30ba4                 | LR__5524
30ba4     45 78 70 65 
30ba8     63 74 65 64 
30bac     20 6E 75 6D 
30bb0     62 65 72 2C 
30bb4     20 67 6F 74 
30bb8     20 73 6F 6D 
30bbc     65 74 68 69 
30bc0     6E 67 20 65 
30bc4     6C 73 65 2E | 	byte	"Expected number, got something else."
30bc8     00          | 	byte	0
30bc9                 | LR__5525
30bc9     43 61 6E 6E 
30bcd     6F 74 20 61 
30bd1     64 64 20 61 
30bd5     20 6E 75 6D 
30bd9     62 65 72 20 
30bdd     74 6F 20 61 
30be1     20 73 74 72 
30be5     69 6E 67 2E | 	byte	"Cannot add a number to a string."
30be9     00          | 	byte	0
30bea                 | LR__5526
30bea     43 61 6E 6E 
30bee     6F 74 20 73 
30bf2     75 62 73 74 
30bf6     72 61 63 74 
30bfa     20 73 74 72 
30bfe     69 6E 67 73 
30c02     2E          | 	byte	"Cannot substract strings."
30c03     00          | 	byte	0
30c04                 | LR__5527
30c04     55 6E 6B 6E 
30c08     6F 77 6E 20 
30c0c     65 72 72 6F 
30c10     72 20 77 68 
30c14     69 6C 65 20 
30c18     61 64 64 69 
30c1c     6E 67 2E    | 	byte	"Unknown error while adding."
30c1f     00          | 	byte	0
30c20                 | LR__5528
30c20     55 6E 6B 6E 
30c24     6F 77 6E 20 
30c28     65 72 72 6F 
30c2c     72 20 77 68 
30c30     69 6C 65 20 
30c34     73 75 62 73 
30c38     74 72 61 63 
30c3c     74 69 6E 67 
30c40     2E          | 	byte	"Unknown error while substracting."
30c41     00          | 	byte	0
30c42                 | LR__5529
30c42     43 61 6E 6E 
30c46     6F 74 20 64 
30c4a     6F 20 6C 6F 
30c4e     67 69 63 20 
30c52     6F 70 65 72 
30c56     61 74 69 6F 
30c5a     6E 20 6F 6E 
30c5e     20 73 74 72 
30c62     69 6E 67 20 
30c66     6F 72 20 66 
30c6a     6C 6F 61 74 
30c6e     2E          | 	byte	"Cannot do logic operation on string or float."
30c6f     00          | 	byte	0
30c70                 | LR__5530
30c70     55 6E 6B 6E 
30c74     6F 77 6E 20 
30c78     65 72 72 6F 
30c7c     72 20 77 68 
30c80     69 6C 65 20 
30c84     64 6F 69 6E 
30c88     67 20 6C 6F 
30c8c     67 69 63 20 
30c90     6F 70 65 72 
30c94     61 74 69 6F 
30c98     6E 2E       | 	byte	"Unknown error while doing logic operation."
30c9a     00          | 	byte	0
30c9b                 | LR__5531
30c9b     43 61 6E 6E 
30c9f     6F 74 20 6D 
30ca3     75 6C 74 69 
30ca7     70 6C 79 20 
30cab     73 74 72 69 
30caf     6E 67 73 2E | 	byte	"Cannot multiply strings."
30cb3     00          | 	byte	0
30cb4                 | LR__5532
30cb4     55 6E 6B 6E 
30cb8     6F 77 6E 20 
30cbc     65 72 72 6F 
30cc0     72 20 77 68 
30cc4     69 6C 65 20 
30cc8     6D 75 6C 74 
30ccc     69 70 6C 79 
30cd0     69 6E 67 2E | 	byte	"Unknown error while multiplying."
30cd4     00          | 	byte	0
30cd5                 | LR__5533
30cd5     43 61 6E 6E 
30cd9     6F 74 20 64 
30cdd     69 76 69 64 
30ce1     65 20 73 74 
30ce5     72 69 6E 67 
30ce9     73 2E       | 	byte	"Cannot divide strings."
30ceb     00          | 	byte	0
30cec                 | LR__5534
30cec     55 6E 6B 6E 
30cf0     6F 77 6E 20 
30cf4     65 72 72 6F 
30cf8     72 20 77 68 
30cfc     69 6C 65 20 
30d00     64 69 76 69 
30d04     64 69 6E 67 
30d08     2E          | 	byte	"Unknown error while dividing."
30d09     00          | 	byte	0
30d0a                 | LR__5535
30d0a     43 61 6E 6E 
30d0e     6F 74 20 63 
30d12     6F 6D 70 75 
30d16     74 65 20 61 
30d1a     20 70 6F 77 
30d1e     65 72 20 6F 
30d22     66 20 61 20 
30d26     73 74 72 69 
30d2a     6E 67 2E    | 	byte	"Cannot compute a power of a string."
30d2d     00          | 	byte	0
30d2e                 | LR__5536
30d2e     55 6E 6B 6E 
30d32     6F 77 6E 20 
30d36     65 72 72 6F 
30d3a     72 20 77 68 
30d3e     69 6C 65 20 
30d42     63 6F 6D 70 
30d46     75 74 69 6E 
30d4a     67 20 61 20 
30d4e     70 6F 77 65 
30d52     72 2E       | 	byte	"Unknown error while computing a power."
30d54     00          | 	byte	0
30d55                 | LR__5537
30d55     52 69 67 68 
30d59     74 20 70 61 
30d5d     72 65 6E 74 
30d61     68 65 73 69 
30d65     73 20 65 78 
30d69     70 65 63 74 
30d6d     65 64 2E    | 	byte	"Right parenthesis expected."
30d70     00          | 	byte	0
30d71                 | LR__5538
30d71     45 78 70 65 
30d75     63 74 65 64 
30d79     20 73 74 72 
30d7d     69 6E 67 2E | 	byte	"Expected string."
30d81     00          | 	byte	0
30d82                 | LR__5539
30d82     45 78 70 65 
30d86     63 74 65 64 
30d8a     20 66 6C 6F 
30d8e     61 74 2E    | 	byte	"Expected float."
30d91     00          | 	byte	0
30d92                 | LR__5540
30d92     45 78 70 65 
30d96     63 74 65 64 
30d9a     20 75 6E 73 
30d9e     69 67 6E 65 
30da2     64 20 69 6E 
30da6     74 65 67 65 
30daa     72 2E       | 	byte	"Expected unsigned integer."
30dac     00          | 	byte	0
30dad                 | LR__5541
30dad     45 78 70 65 
30db1     63 74 65 64 
30db5     20 69 6E 74 
30db9     65 67 65 72 
30dbd     2E          | 	byte	"Expected integer."
30dbe     00          | 	byte	0
30dbf                 | LR__5542
30dbf     4E 6F 20 6D 
30dc3     6F 72 65 20 
30dc7     76 61 72 69 
30dcb     61 62 6C 65 
30dcf     20 73 6C 6F 
30dd3     74 73 2E    | 	byte	"No more variable slots."
30dd6     00          | 	byte	0
30dd7                 | LR__5543
30dd7     56 61 72 69 
30ddb     61 62 6C 65 
30ddf     20 6E 6F 74 
30de3     20 66 6F 75 
30de7     6E 64 2E    | 	byte	"Variable not found."
30dea     00          | 	byte	0
30deb                 | LR__5544
30deb     43 6F 6D 6D 
30def     61 20 65 78 
30df3     70 65 63 74 
30df7     65 64 2E    | 	byte	"Comma expected."
30dfa     00          | 	byte	0
30dfb                 | LR__5545
30dfb     43 6F 6D 6D 
30dff     61 20 6F 72 
30e03     20 73 65 6D 
30e07     69 63 6F 6C 
30e0b     6F 6E 20 65 
30e0f     78 70 65 63 
30e13     74 65 64 2E | 	byte	"Comma or semicolon expected."
30e17     00          | 	byte	0
30e18                 | LR__5546
30e18     55 6E 6B 6E 
30e1c     6F 77 6E 20 
30e20     63 6F 6D 6D 
30e24     61 6E 64 2E | 	byte	"Unknown command."
30e28     00          | 	byte	0
30e29                 | LR__5547
30e29     53 74 61 63 
30e2d     6B 20 75 6E 
30e31     64 65 72 66 
30e35     6C 6F 77 2E | 	byte	"Stack underflow."
30e39     00          | 	byte	0
30e3a                 | LR__5548
30e3a     43 61 6E 6E 
30e3e     6F 74 20 65 
30e42     78 65 63 75 
30e46     74 65 20 67 
30e4a     6F 74 6F 20 
30e4e     69 6E 20 74 
30e52     68 65 20 69 
30e56     6D 6D 65 64 
30e5a     69 61 74 65 
30e5e     20 6D 6F 64 
30e62     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
30e64     00          | 	byte	0
30e65                 | LR__5549
30e65     43 61 6E 6E 
30e69     6F 74 20 6C 
30e6d     6F 61 64 20 
30e71     66 72 6F 6D 
30e75     20 74 68 69 
30e79     73 20 66 69 
30e7d     6C 65 2E    | 	byte	"Cannot load from this file."
30e80     00          | 	byte	0
30e81                 | LR__5550
30e81     54 68 65 20 
30e85     70 72 6F 67 
30e89     72 61 6D 20 
30e8d     69 73 20 65 
30e91     6D 70 74 79 
30e95     2E          | 	byte	"The program is empty."
30e96     00          | 	byte	0
30e97                 | LR__5551
30e97     49 66 20 61 
30e9b     66 74 65 72 
30e9f     20 69 66 2E | 	byte	"If after if."
30ea3     00          | 	byte	0
30ea4                 | LR__5552
30ea4     45 6D 70 74 
30ea8     79 20 65 78 
30eac     70 72 65 73 
30eb0     73 69 6F 6E 
30eb4     2E          | 	byte	"Empty expression."
30eb5     00          | 	byte	0
30eb6                 | LR__5553
30eb6     53 74 72 69 
30eba     6E 67 20 65 
30ebe     78 70 65 63 
30ec2     74 65 64 2E | 	byte	"String expected."
30ec6     00          | 	byte	0
30ec7                 | LR__5554
30ec7     49 6E 74 65 
30ecb     72 70 72 65 
30ecf     74 65 72 20 
30ed3     69 6E 74 65 
30ed7     72 6E 61 6C 
30edb     20 65 72 72 
30edf     6F 72 2E    | 	byte	"Interpreter internal error."
30ee2     00          | 	byte	0
30ee3                 | LR__5555
30ee3     45 78 70 65 
30ee7     63 74 65 64 
30eeb     20 61 73 73 
30eef     69 67 6E 2E | 	byte	"Expected assign."
30ef3     00          | 	byte	0
30ef4                 | LR__5556
30ef4     45 78 70 65 
30ef8     63 74 65 64 
30efc     20 27 74 6F 
30f00     27 2E       | 	byte	"Expected 'to'."
30f02     00          | 	byte	0
30f03                 | LR__5557
30f03     45 78 70 65 
30f07     63 74 65 64 
30f0b     20 69 6E 74 
30f0f     65 67 65 72 
30f13     20 76 61 72 
30f17     69 61 62 6C 
30f1b     65 2E       | 	byte	"Expected integer variable."
30f1d     00          | 	byte	0
30f1e                 | LR__5558
30f1e     55 6E 69 6E 
30f22     69 74 69 61 
30f26     6C 69 7A 65 
30f2a     64 20 76 61 
30f2e     72 69 61 62 
30f32     6C 65 20 69 
30f36     6E 20 27 6E 
30f3a     65 78 74 27 
30f3e     2C 20 75 73 
30f42     65 20 27 66 
30f46     6F 72 27 20 
30f4a     62 65 66 6F 
30f4e     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
30f51     00          | 	byte	0
30f52                 | LR__5559
30f52     4E 6F 20 6D 
30f56     6F 72 65 20 
30f5a     73 6C 6F 74 
30f5e     73 20 66 6F 
30f62     72 20 27 66 
30f66     6F 72 27 2E | 	byte	"No more slots for 'for'."
30f6a     00          | 	byte	0
30f6b                 | LR__5560
30f6b     27 4E 65 78 
30f6f     74 27 20 64 
30f73     6F 65 73 6E 
30f77     27 74 20 6D 
30f7b     61 74 63 68 
30f7f     20 27 66 6F 
30f83     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
30f86     00          | 	byte	0
30f87                 | LR__5561
30f87     27 47 6F 74 
30f8b     6F 27 20 74 
30f8f     61 72 67 65 
30f93     74 20 6C 69 
30f97     6E 65 20 6E 
30f9b     6F 74 20 66 
30f9f     6F 75 6E 64 
30fa3     2E          | 	byte	"'Goto' target line not found."
30fa4     00          | 	byte	0
30fa5                 | LR__5562
30fa5     42 61 64 20 
30fa9     6E 75 6D 62 
30fad     65 72 20 6F 
30fb1     66 20 70 61 
30fb5     72 61 6D 65 
30fb9     74 65 72 73 | 	byte	"Bad number of parameters"
30fbd     00          | 	byte	0
30fbe                 | LR__5563
30fbe     46 75 6E 63 
30fc2     74 69 6F 6E 
30fc6     20 75 6E 64 
30fca     65 66 69 6E 
30fce     65 64 20 66 
30fd2     6F 72 20 73 
30fd6     74 72 69 6E 
30fda     67 73       | 	byte	"Function undefined for strings"
30fdc     00          | 	byte	0
30fdd                 | LR__5564
30fdd     42 61 64 20 
30fe1     70 61 72 61 
30fe5     6D 65 74 65 
30fe9     72 2E       | 	byte	"Bad parameter."
30feb     00          | 	byte	0
30fec                 | LR__5565
30fec     43 61 6E 6E 
30ff0     6F 74 20 64 
30ff4     65 63 6C 61 
30ff8     72 65 20 61 
30ffc     6E 20 61 72 
31000     72 61 79 3A 
31004     20 74 68 65 
31008     20 76 61 72 
3100c     69 61 62 6C 
31010     65 20 65 78 
31014     69 73 74 73 
31018     2E          | 	byte	"Cannot declare an array: the variable exists."
31019     00          | 	byte	0
3101a                 | LR__5566
3101a     45 78 70 65 
3101e     63 74 65 64 
31022     20 27 28 27 
31026     2E          | 	byte	"Expected '('."
31027     00          | 	byte	0
31028                 | LR__5567
31028     45 78 70 65 
3102c     63 74 65 64 
31030     20 27 29 27 
31034     20 6F 72 20 
31038     27 2C 27 2E | 	byte	"Expected ')' or ','."
3103c     00          | 	byte	0
3103d                 | LR__5568
3103d     4E 6F 20 6D 
31041     6F 72 65 20 
31045     74 68 61 6E 
31049     20 33 20 64 
3104d     69 6D 65 6E 
31051     73 69 6F 6E 
31055     73 20 73 75 
31059     70 70 6F 72 
3105d     74 65 64    | 	byte	"No more than 3 dimensions supported"
31060     00          | 	byte	0
31061                 | LR__5569
31061     56 61 72 69 
31065     61 62 6C 65 
31069     20 6E 61 6D 
3106d     65 20 65 78 
31071     70 65 63 74 
31075     65 64       | 	byte	"Variable name expected"
31077     00          | 	byte	0
31078                 | LR__5570
31078     54 79 70 65 
3107c     20 6E 61 6D 
31080     65 20 65 78 
31084     70 65 63 74 
31088     65 64       | 	byte	"Type name expected"
3108a     00          | 	byte	0
3108b                 | LR__5571
3108b     54 79 70 65 
3108f     20 6E 6F 74 
31093     20 73 75 70 
31097     70 6F 72 74 
3109b     65 64 20 79 
3109f     65 74       | 	byte	"Type not supported yet"
310a1     00          | 	byte	0
310a2                 | LR__5572
310a2     41 72 72 61 
310a6     79 20 69 6E 
310aa     64 65 78 20 
310ae     6F 75 74 20 
310b2     6F 66 20 72 
310b6     61 6E 67 65 | 	byte	"Array index out of range"
310ba     00          | 	byte	0
310bb                 | LR__5573
310bb     42 61 64 20 
310bf     74 79 70 65 
310c3     20 77 68 69 
310c7     6C 65 20 61 
310cb     73 73 69 67 
310cf     6E 69 6E 67 
310d3     20 74 6F 20 
310d7     61 72 72 61 
310db     79          | 	byte	"Bad type while assigning to array"
310dc     00          | 	byte	0
310dd                 | LR__5574
310dd     45 72 72 6F 
310e1     72 20       | 	byte	"Error "
310e3     00          | 	byte	0
310e4                 | LR__5575
310e4     3A 20       | 	byte	": "
310e6     00          | 	byte	0
310e7                 | LR__5576
310e7     2F 73 64    | 	byte	"/sd"
310ea     00          | 	byte	0
310eb                 | LR__5577
310eb     2F 73 64 2F 
310ef     62 61 73    | 	byte	"/sd/bas"
310f2     00          | 	byte	0
310f3                 | LR__5578
310f3     2F 73 64 2F 
310f7     62 61 73    | 	byte	"/sd/bas"
310fa     00          | 	byte	0
310fb                 | LR__5579
310fb     20 42 41 53 
310ff     49 43 20 62 
31103     79 74 65 73 
31107     20 66 72 65 
3110b     65          | 	byte	" BASIC bytes free"
3110c     00          | 	byte	0
3110d                 | LR__5580
3110d     52 65 61 64 
31111     79          | 	byte	"Ready"
31112     00          | 	byte	0
31113                 | LR__5581
31113     6E 6F 6E 61 
31117     6D 65 2E 62 
3111b     61 73       | 	byte	"noname.bas"
3111d     00          | 	byte	0
3111e                 | LR__5582
3111e                 | 	byte	
3111e     00          | 	byte	0
3111f     00          | 	alignl
31120                 | _dat_
31120     00 00 00 00 
31124     00 00 00 00 
31128     00 00 00 00 
3112c     00 00 00 00 | 	byte	$00[16]
31130     61 41 17 0E 
31134     62 42 00 00 
31138     63 43 19 10 
3113c     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
31140     65 45 18 0F 
31144     66 46 00 00 
31148     67 47 00 00 
3114c     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
31150     69 49 00 00 
31154     6A 4A 00 00 
31158     6B 4B 00 00 
3115c     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
31160     6D 4D 00 00 
31164     6E 4E 1A 11 
31168     6F 4F 1E 15 
3116c     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
31170     71 51 00 00 
31174     72 52 00 00 
31178     73 53 1B 12 
3117c     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
31180     75 55 00 00 
31184     76 56 00 00 
31188     77 57 00 00 
3118c     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
31190     79 59 00 00 
31194     7A 5A 1D 14 
31198     31 21 04 00 
3119c     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
311a0     33 23 06 00 
311a4     34 24 07 00 
311a8     35 25 08 00 
311ac     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
311b0     37 26 0A 00 
311b4     38 2A 0B 00 
311b8     39 28 0C 00 
311bc     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
311c0     8D 8D 00 00 
311c4     9B 9B 00 00 
311c8     88 88 00 00 
311cc     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
311d0     20 20 00 00 
311d4     2D 5F 00 00 
311d8     3D 2B 00 00 
311dc     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
311e0     5D 7D 00 00 
311e4     5C 7C 00 00 
311e8     23 7E 00 00 
311ec     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
311f0     27 22 00 00 
311f4     60 7E 03 00 
311f8     2C 3C 00 00 
311fc     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
31200     2F 3F 00 00 
31204     B9 B9 00 00 
31208     BA 00 00 00 
3120c     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
31210     BC 00 00 00 
31214     BD 00 00 00 
31218     BE 00 00 00 
3121c     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
31220     C0 00 00 00 
31224     C1 00 00 00 
31228     C2 00 00 00 
3122c     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
31230     C4 00 00 00 
31234     C5 00 00 00 
31238     C6 00 00 00 
3123c     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
31240     C8 00 00 00 
31244     C9 00 00 00 
31248     CA 00 00 00 
3124c     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
31250     7F 7F 00 00 
31254     CC 00 00 00 
31258     CD 00 00 00 
3125c     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
31260     CF 00 00 00 
31264     D0 00 00 00 
31268     D1 00 00 00 
3126c     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
31270     2F 2F 00 00 
31274     2A 2A 00 00 
31278     2D 2D 00 00 
3127c     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
31280     8D 8D 00 00 
31284     31 31 00 00 
31288     32 32 00 00 
3128c     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
31290     34 34 00 00 
31294     35 35 00 00 
31298     36 36 00 00 
3129c     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
312a0     38 38 00 00 
312a4     39 39 00 00 
312a8     30 30 00 00 
312ac     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
312b0     5C 7C 00 00 
312b4     00 00 00 00 
312b8     00 00 00 00 
312bc     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
312c0     00 00 00 00 
      ...             
31318     00 00 00 00 
3131c     00 00 00 00 | 	byte	$00[96]
31320     2B 00 A6 F2 
31324     24 A7 09 80 
31328     5B 88 4D 89 
3132c     80 88 A5 88 | atari_spl file "atari.spl"
31330     6D 88 B8 88 
31334     80 88 CB 88 
31338     92 88 A5 88 
3133c     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
31340     A5 88 CA 88 
31344     A6 88 DD 88 
31348     B8 88 AB 89 
3134c     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
31350     C8 AD C6 F1 
31354     91 06 B6 FF 
31358     13 00 4A 00 
3135c     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
31360     5D 00 5E 00 
31364     5D 00 5E 00 
31368     5E 00 5D 00 
3136c     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
31370     38 00 83 00 
31374     25 00 83 00 
31378     C3 FE D1 04 
3137c     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
31380     48 88 38 85 
31384     41 8A CB 88 
31388     28 89 B8 88 
3138c     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
31390     15 89 03 89 
31394     02 89 15 89 
31398     16 89 15 89 
3139c     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
313a0     15 89 3A 89 
313a4     72 89 E3 89 
313a8     52 83 AD 97 
313ac     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
313b0     0C 02 B6 FF 
313b4     E1 00 A8 00 
313b8     F3 00 A8 00 
313bc     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
313c0     CE 00 CD 00 
313c4     CD 00 BA 00 
313c8     E1 00 BB 00 
313cc     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
313d0     DF 00 C9 FF 
313d4     E6 01 B6 06 
313d8     EE DD 8D 98 
313dc     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
313e0     97 89 73 89 
313e4     3B 89 60 89 
313e8     60 89 60 89 
313ec     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
313f0     73 89 72 89 
313f4     85 89 73 89 
313f8     AA 89 60 89 
313fc     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
31400     E8 8A 18 86 
31404     92 88 A5 C2 
31408     E0 00 C3 05 
3140c     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
31410     F2 00 64 01 
31414     06 01 3E 01 
31418     2B 01 2B 01 
3141c     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
31420     2B 01 2A 01 
31424     2B 01 2B 01 
31428     2B 01 18 01 
3142c     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
31430     39 07 61 F3 
31434     C0 AF 37 85 
31438     0F 88 8B 8A 
3143c     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
31440     AB 89 D0 89 
31444     AB 89 D0 89 
31448     D0 89 CF 89 
3144c     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
31450     D0 89 F5 89 
31454     BD 89 08 8A 
31458     CF 89 E8 8A 
3145c     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
31460     53 B3 0D F8 
31464     F4 07 38 00 
31468     63 01 63 01 
3146c     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
31470     88 01 88 01 
31474     76 01 88 01 
31478     88 01 89 01 
3147c     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
31480     75 01 AE 01 
31484     76 01 88 01 
31488     4A 00 46 06 
3148c     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
31490     08 8A 9A 86 
31494     33 8B 08 8A 
31498     2D 8A F5 89 
3149c     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
314a0     2D 8A 2D 8A 
314a4     2E 8A 1B 8A 
314a8     40 8A 2D 8A 
314ac     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
314b0     2E 8A 79 8A 
314b4     66 8A C8 8B 
314b8     72 82 2B 97 
314bc     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
314c0     1D 02 05 01 
314c4     F8 01 C0 01 
314c8     0B 02 C0 01 
314cc     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
314d0     F9 01 D3 01 
314d4     F8 01 D3 01 
314d8     F8 01 D2 01 
314dc     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
314e0     E6 01 2B 01 
314e4     8E 02 5F 07 
314e8     F7 E2 ED 9C 
314ec     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
314f0     E8 8A 78 8A 
314f4     78 8A 65 8A 
314f8     8B 8A 78 8A 
314fc     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
31500     8B 8A 9D 8A 
31504     9D 8A 8B 8A 
31508     C2 8A 78 8A 
3150c     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
31510     70 8C 18 86 
31514     8B 8A 23 C9 
31518     CB 03 C4 05 
3151c     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
31520     0B 02 7B 02 
31524     1E 02 55 02 
31528     30 02 43 02 
3152c     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
31530     43 02 44 02 
31534     43 02 30 02 
31538     68 02 31 02 
3153c     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
31540     07 08 3F F7 
31544     73 B2 13 85 
31548     15 89 ED 8B 
3154c     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
31550     B0 8A FB 8A 
31554     D5 8A FA 8A 
31558     E8 8A FB 8A 
3155c     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
31560     E8 8A 21 8B 
31564     E7 8A 33 8B 
31568     E8 8A 26 8C 
3156c     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
31570     8D B0 27 F6 
31574     9C 08 AD 01 
31578     7B 02 8D 02 
3157c     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
31580     A1 02 A0 02 
31584     A1 02 A0 02 
31588     A0 02 A0 02 
3158c     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
31590     7B 02 D8 02 
31594     7B 02 C6 02 
31598     3E 01 C3 05 
3159c     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
315a0     00 8C 2A 86 
315a4     E0 8C FA 8A 
315a8     6A 8B FB 8A 
315ac     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
315b0     45 8B 45 8B 
315b4     45 8B 6B 8B 
315b8     46 8B 59 8B 
315bc     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
315c0     6B 8B 6B 8B 
315c4     6B 8B 6B 8B 
315c8     7D 8B 7D 8B 
315cc     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
315d0     90 8B 91 8B 
315d4     90 8B 90 8B 
315d8     A3 8B A3 8B 
315dc     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
315e0     B5 8B B6 8B 
315e4     B5 8B B5 8B 
315e8     B6 8B C8 8B 
315ec     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
315f0     C8 8B DA 8B 
315f4     DB 8B DB 8B 
315f8     DB 8B DC 8B 
315fc     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
31600     EE 8B EE 8B 
31604     00 8C 01 8C 
31608     00 8C 01 8C 
3160c     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
31610     12 8C 13 8C 
31614     13 8C 26 8C 
31618     26 8C 26 8C 
3161c     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
31620     38 8C 38 8C 
31624     38 8C 38 8C 
31628     4B 8C 4B 8C 
3162c     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
31630     5E 8C 5E 8C 
31634     5E 8C 5E 8C 
31638     70 8C 70 8C 
3163c     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
31640     70 8C 83 8C 
31644     83 8C 83 8C 
31648     83 8C 96 8C 
3164c     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
31650     95 8C A9 8C 
31654     A9 8C A8 8C 
31658     A8 8C A8 8C 
3165c     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
31660     BB 8C BB 8C 
31664     BB 8C CE 8C 
31668     CE 8C CE 8C 
3166c     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
31670     E0 8C E1 8C 
31674     E1 8C E0 8C 
31678     F4 8C F2 8C 
3167c     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
31680     05 8D 05 8D 
31684     06 8D 06 8D 
31688     19 8D 19 8D 
3168c     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
31690     18 8D 2B 8D 
31694     2B 8D 2B 8D 
31698     2A 8D 3E 8D 
3169c     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
316a0     3E 8D 51 8D 
316a4     50 8D 50 8D 
316a8     50 8D 51 8D 
316ac     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
316b0     63 8D 64 8D 
316b4     76 8D 75 8D 
316b8     75 8D 76 8D 
316bc     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
316c0     88 8D 88 8D 
316c4     89 8D 9B 8D 
316c8     9A 8D 9B 8D 
316cc     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
316d0     AD 8D AE 8D 
316d4     AD 8D AE 8D 
316d8     C1 8D C1 8D 
316dc     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
316e0     D3 8D D3 8D 
316e4     D3 8D D3 8D 
316e8     D3 8D E6 8D 
316ec     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
316f0     E6 8D E6 8D 
316f4     F9 8D F9 8D 
316f8     F9 8D F8 8D 
316fc     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
31700     0B 8E 0B 8E 
31704     1D 8E 1D 8E 
31708     1E 8E 1E 8E 
3170c     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
31710     31 8E 31 8E 
31714     31 8E 42 8E 
31718     43 8E 43 8E 
3171c     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
31720     56 8E 56 8E 
31724     55 8E 56 8E 
31728     68 8E 69 8E 
3172c     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
31730     69 8E 7B 8E 
31734     7C 8E 7B 8E 
31738     7B 8E 8D 8E 
3173c     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
31740     8D 8E A1 8E 
31744     A0 8E A1 8E 
31748     A1 8E A0 8E 
3174c     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
31750     B3 8E B3 8E 
31754     C6 8E C5 8E 
31758     C6 8E C6 8E 
3175c     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
31760     D8 8E D9 8E 
31764     D8 8E EC 8E 
31768     EB 8E EC 8E 
3176c     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
31770     FE 8E FE 8E 
31774     FE 8E FE 8E 
31778     10 8F 10 8F 
3177c     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
31780     11 8F 23 8F 
31784     24 8F 23 8F 
31788     24 8F 37 8F 
3178c     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
31790     36 8F 36 8F 
31794     48 8F 49 8F 
31798     49 8F 49 8F 
3179c     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
317a0     5B 8F 5C 8F 
317a4     5B 8F 6E 8F 
317a8     6E 8F 6E 8F 
317ac     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
317b0     81 8F 81 8F 
317b4     81 8F 81 8F 
317b8     93 8F 93 8F 
317bc     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
317c0     93 8F A6 8F 
317c4     A6 8F A6 8F 
317c8     A6 8F B9 8F 
317cc     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
317d0     B9 8F B9 8F 
317d4     CC 8F CB 8F 
317d8     CB 8F CC 8F 
317dc     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
317e0     DF 8F DE 8F 
317e4     DE 8F F1 8F 
317e8     F1 8F F1 8F 
317ec     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
317f0     03 90 04 90 
317f4     04 90 04 90 
317f8     16 90 17 90 
317fc     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
31800     29 90 28 90 
31804     29 90 28 90 
31808     29 90 3C 90 
3180c     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
31810     3C 90 4F 90 
31814     4E 90 4E 90 
31818     4E 90 4E 90 
3181c     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
31820     61 90 61 90 
31824     73 90 74 90 
31828     74 90 74 90 
3182c     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
31830     87 90 86 90 
31834     87 90 86 90 
31838     99 90 99 90 
3183c     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
31840     AB 90 AB 90 
31844     AC 90 AB 90 
31848     AB 90 BF 90 
3184c     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
31850     BE 90 D1 90 
31854     D0 90 D1 90 
31858     D1 90 D1 90 
3185c     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
31860     E3 90 E4 90 
31864     F6 90 F6 90 
31868     F6 90 F6 90 
3186c     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
31870     09 91 0A 91 
31874     0A 91 1C 91 
31878     1C 91 1C 91 
3187c     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
31880     2F 91 2E 91 
31884     2F 91 2F 91 
31888     2E 91 41 91 
3188c     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
31890     41 91 53 91 
31894     54 91 54 91 
31898     53 91 54 91 
3189c     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
318a0     67 91 67 91 
318a4     79 91 7A 91 
318a8     79 91 78 91 
318ac     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
318b0     8C 91 8B 91 
318b4     8C 91 8C 91 
318b8     9E 91 9E 91 
318bc     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
318c0     B1 91 B1 91 
318c4     B2 91 B1 91 
318c8     B1 91 C4 91 
318cc     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
318d0     C4 91 D6 91 
318d4     D7 91 D7 91 
318d8     D7 91 D6 91 
318dc     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
318e0     EA 91 EA 91 
318e4     EA 91 FC 91 
318e8     FC 91 FB 91 
318ec     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
318f0     0E 92 0F 92 
318f4     0F 92 0E 92 
318f8     21 92 21 92 
318fc     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
31900     21 92 34 92 
31904     33 92 34 92 
31908     34 92 47 92 
3190c     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
31910     46 92 47 92 
31914     59 92 59 92 
31918     59 92 59 92 
3191c     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
31920     6C 92 6C 92 
31924     6B 92 7E 92 
31928     7E 92 7E 92 
3192c     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
31930     92 92 91 92 
31934     91 92 90 92 
31938     91 92 A4 92 
3193c     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
31940     A3 92 B6 92 
31944     B6 92 B7 92 
31948     B7 92 B6 92 
3194c     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
31950     CA 92 C9 92 
31954     CA 92 DC 92 
31958     DC 92 DC 92 
3195c     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
31960     EF 92 EF 92 
31964     EF 92 EF 92 
31968     01 93 01 93 
3196c     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
31970     15 93 14 93 
31974     14 93 14 93 
31978     14 93 27 93 
3197c     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
31980     27 93 39 93 
31984     3A 93 39 93 
31988     39 93 39 93 
3198c     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
31990     4B 93 4C 93 
31994     5F 93 5F 93 
31998     5F 93 5E 93 
3199c     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
319a0     5F 93 84 93 
319a4     4C 93 96 93 
319a8     5F 93 AE 94 
319ac     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
319b0     7B C1 00 00 
319b4     00 00 00 00 
319b8     00 00 00 00 
319bc     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
319c0     00 00 00 00 | 	byte	$00, $00, $00, $00
319c4     00 00 00 00 | zero long 0
319c8     7A D7 00 80 
319cc     87 8A 48 8F 
319d0     EC 8C 76 8D 
319d4     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
319d8     3C 8D 82 8D 
319dc     42 8D 88 8D 
319e0     8C 8D 8E 8D 
319e4     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
319e8     97 8D DE 8D 
319ec     E1 8D F1 8E 
319f0     D8 8C A3 83 
319f4     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
319f8     65 71 C9 65 
319fc     FC 64 C4 65 
31a00     C1 65 BF 65 
31a04     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
31a08     B6 65 B4 65 
31a0c     B2 65 AE 65 
31a10     AC 65 ED 65 
31a14     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
31a18     5E 65 25 66 
31a1c     FA 62 23 6B 
31a20     B5 6C 61 0A 
31a24     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
31a28     5D 90 BE 8D 
31a2c     47 8E C3 8D 
31a30     09 8E C9 8D 
31a34     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
31a38     15 8E 19 8E 
31a3c     1B 8E 62 8E 
31a40     64 8E 68 8E 
31a44     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
31a48     B5 8E 4C 90 
31a4c     FA 84 3C 9D 
31a50     98 13 79 6D 
31a54     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
31a58     D9 66 50 66 
31a5c     D4 66 4B 66 
31a60     8C 66 46 66 
31a64     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
31a68     81 66 3A 66 
31a6c     7C 66 36 66 
31a70     76 66 30 66 
31a74     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
31a78     6B 66 88 72 
31a7c     BF 37 E7 B7 
31a80     75 83 8B 8E 
31a84     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
31a88     94 8E 96 8E 
31a8c     DD 8E 9C 8E 
31a90     E2 8E A2 8E 
31a94     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
31a98     EE 8E AE 8E 
31a9c     38 8F B5 8E 
31aa0     3F 8F FD 8E 
31aa4     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
31aa8     A5 87 1E E3 
31aac     6D 5D FA 71 
31ab0     41 64 25 67 
31ab4     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
31ab8     D9 66 1A 67 
31abc     18 67 15 67 
31ac0     12 67 0F 67 
31ac4     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
31ac8     07 67 C0 66 
31acc     01 67 BC 66 
31ad0     B8 66 DE 64 
31ad4     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
31ad8     43 E5 1F 8B 
31adc     14 8A F1 90 
31ae0     1C 8F 63 8F 
31ae4     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
31ae8     29 8F 6E 8F 
31aec     72 8F 75 8F 
31af0     34 8F BE 8F 
31af4     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
31af8     84 8F 87 8F 
31afc     CC 8F 56 90 
31b00     67 91 49 80 
31b04     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
31b08     46 77 A6 66 
31b0c     E8 66 B0 67 
31b10     AD 67 ED 67 
31b14     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
31b18     A2 67 E3 67 
31b1c     9D 67 9A 67 
31b20     98 67 94 67 
31b24     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
31b28     49 67 CD 67 
31b2c     28 65 5F 6E 
31b30     82 67 3A 01 
31b34     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
31b38     C2 91 A9 8F 
31b3c     EF 8F AE 8F 
31b40     F4 8F B5 8F 
31b44     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
31b48     01 90 03 90 
31b4c     07 90 09 90 
31b50     0C 90 53 90 
31b54     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
31b58     18 90 44 93 
31b5c     85 84 D6 9D 
31b60     87 1F 2F 75 
31b64     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
31b68     C4 68 F6 67 
31b6c     BE 68 F1 67 
31b70     76 68 2E 68 
31b74     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
31b78     27 68 24 68 
31b7c     64 68 1E 68 
31b80     5F 68 19 68 
31b84     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
31b88     DC 68 56 72 
31b8c     7E 36 C2 B8 
31b90     D7 84 73 90 
31b94     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
31b98     7B 90 7F 90 
31b9c     82 90 84 90 
31ba0     CB 90 8B 90 
31ba4     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
31ba8     D7 90 96 90 
31bac     20 91 59 90 
31bb0     25 91 A2 90 
31bb4     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
31bb8     D0 89 40 EE 
31bbc     12 64 C4 71 
31bc0     29 66 0C 69 
31bc4     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
31bc8     C0 68 02 69 
31bcc     FE 68 FB 68 
31bd0     F9 68 F6 68 
31bd4     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
31bd8     EE 68 A8 68 
31bdc     2C 69 5F 68 
31be0     E2 68 81 66 
31be4     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
31be8     1E EB A6 8A 
31bec     73 8B 5E 93 
31bf0     7B 90 48 91 
31bf4     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
31bf8     0D 91 11 91 
31bfc     14 91 16 91 
31c00     5C 91 1C 91 
31c04     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
31c08     68 91 AF 91 
31c0c     2A 91 B5 91 
31c10     75 91 1A 94 
31c14     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
31c18     70 0E CB 6C 
31c1c     5D 6E C4 67 
31c20     99 69 54 69 
31c24     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
31c28     D2 69 49 69 
31c2c     89 69 86 69 
31c30     40 69 C4 69 
31c34     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
31c38     35 69 76 69 
31c3c     58 67 EB 6D 
31c40     E9 6D 89 0F 
31c44     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
31c48     33 94 94 91 
31c4c     D9 91 56 91 
31c50     E0 91 9F 91 
31c54     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
31c58     EC 91 EE 91 
31c5c     F1 91 F4 91 
31c60     F7 91 3D 92 
31c64     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
31c68     46 92 21 94 
31c6c     11 89 A4 9D 
31c70     FD 0E 8F 6C 
31c74     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
31c78     28 6A E1 69 
31c7c     65 6A 1F 6A 
31c80     5F 6A 1A 6A 
31c84     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
31c88     54 6A 0F 6A 
31c8c     4F 6A 09 6A 
31c90     06 6A 03 6A 
31c94     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
31c98     23 68 69 77 
31c9c     3A 4D 38 CA 
31ca0     38 86 4E 91 
31ca4     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
31ca8     64 92 24 92 
31cac     6A 92 2A 92 
31cb0     70 92 30 92 
31cb4     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
31cb8     7B 92 7E 92 
31cbc     C5 92 84 92 
31cc0     CB 92 8A 92 
31cc4     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
31cc8     4D 8D F9 E2 
31ccc     97 59 FE 74 
31cd0     DB 68 6D 6A 
31cd4     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
31cd8     A8 6A A5 6A 
31cdc     A3 6A 9F 6A 
31ce0     9D 6A 9B 6A 
31ce4     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
31ce8     D6 6A 8F 6A 
31cec     CF 6A 46 6A 
31cf0     CA 6A E1 67 
31cf4     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
31cf8     D3 F7 15 92 
31cfc     90 8C BF 94 
31d00     A6 92 EB 92 
31d04     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
31d08     B1 92 F7 92 
31d0c     FA 92 FD 92 
31d10     00 93 02 93 
31d14     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
31d18     4F 93 52 93 
31d1c     54 93 22 94 
31d20     5A 93 8F 88 
31d24     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
31d28     1C 77 07 6C 
31d2c     E8 69 7A 6B 
31d30     34 6B 75 6B 
31d34     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
31d38     29 6B 26 6B 
31d3c     24 6B 21 6B 
31d40     1D 6B 5E 6B 
31d44     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
31d48     12 6B 52 6B 
31d4c     34 69 34 6E 
31d50     BA 73 A4 24 
31d54     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
31d58     7A 94 B3 93 
31d5c     72 93 31 93 
31d60     78 93 7A 93 
31d64     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
31d68     83 93 86 93 
31d6c     89 93 D0 93 
31d70     D2 93 D5 93 
31d74     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
31d78     DD 93 40 96 
31d7c     30 8B 99 9C 
31d80     52 10 94 71 
31d84     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
31d88     46 6C 79 6B 
31d8c     40 6C B7 6B 
31d90     F7 6B B1 6B 
31d94     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
31d98     EC 6B A5 6B 
31d9c     A2 6B 9F 6B 
31da0     9D 6B 9A 6B 
31da4     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
31da8     C8 6A E4 76 
31dac     20 4B F9 CE 
31db0     2E 8A 1A 92 
31db4     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
31db8     FB 93 BA 93 
31dbc     01 94 03 94 
31dc0     4A 94 09 94 
31dc4     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
31dc8     55 94 14 94 
31dcc     9E 94 1A 94 
31dd0     61 94 20 94 
31dd4     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
31dd8     3E 87 E5 CD 
31ddc     5F 50 6C 78 
31de0     B5 6A 04 6C 
31de4     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
31de8     83 6C 7F 6C 
31dec     7C 6C 36 6C 
31df0     76 6C 74 6C 
31df4     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
31df8     6B 6C 25 6C 
31dfc     66 6C 1F 6C 
31e00     1D 6C 41 6A 
31e04     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
31e08     BA FA FC 94 
31e0c     5B 8D 97 96 
31e10     3B 94 C5 94 
31e14     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
31e18     89 94 8C 94 
31e1c     8F 94 92 94 
31e20     94 94 DB 94 
31e24     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
31e28     E4 94 E7 94 
31e2c     2D 95 74 95 
31e30     C8 96 15 89 
31e34     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
31e38     CB 75 31 6F 
31e3c     7E 6B 10 6D 
31e40     C9 6C 0A 6D 
31e44     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
31e48     BD 6C FF 6C 
31e4c     FB 6C F9 6C 
31e50     B2 6C F3 6C 
31e54     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
31e58     A7 6C E8 6C 
31e5c     0D 6B 85 6F 
31e60     C7 74 10 28 
31e64     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
31e68     96 96 47 95 
31e6c     06 95 0A 95 
31e70     0C 95 0F 95 
31e74     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
31e78     17 95 5E 95 
31e7c     61 95 63 95 
31e80     22 95 AC 95 
31e84     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
31e88     72 95 17 98 
31e8c     59 8E 01 96 
31e90     CF FC 5A 68 
31e94     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
31e98     96 6D 50 6D 
31e9c     D5 6D 4A 6D 
31ea0     8C 6D 89 6D 
31ea4     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
31ea8     80 6D 3A 6D 
31eac     7A 6D 77 6D 
31eb0     75 6D 71 6D 
31eb4     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
31eb8     18 6C BC 78 
31ebc     9A 4F 7E CF 
31ec0     1F 89 F1 93 
31ec4     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
31ec8     D2 95 4E 95 
31ecc     D7 95 53 95 
31ed0     DD 95 E0 95 
31ed4     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
31ed8     A5 95 EB 95 
31edc     EE 95 F0 95 
31ee0     37 96 B3 95 
31ee4     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
31ee8     1A 98 D5 8D 
31eec     C5 9F CD 0F 
31ef0     0F 71 F3 73 
31ef4     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
31ef8     D9 6D 5E 6E 
31efc     D3 6D 58 6E 
31f00     12 6E 0F 6E 
31f04     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
31f08     49 6E BF 6D 
31f0c     87 6E 76 6D 
31f10     81 6E 11 6B 
31f14     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
31f18     3F 09 44 95 
31f1c     E5 8D 3F 99 
31f20     D4 95 A2 96 
31f24     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
31f28     23 96 69 96 
31f2c     6B 96 6E 96 
31f30     71 96 74 96 
31f34     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
31f38     BF 96 3C 96 
31f3c     C6 96 C8 96 
31f40     A3 98 51 8D 
31f44     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
31f48     CF 75 29 73 
31f4c     90 6C EC 6E 
31f50     62 6E E7 6E 
31f54     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
31f58     9A 6E 98 6E 
31f5c     95 6E 91 6E 
31f60     8E 6E CF 6E 
31f64     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
31f68     40 6E C3 6E 
31f6c     E8 6C 45 6F 
31f70     A5 7B C9 35 
31f74     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
31f78     2D 98 23 97 
31f7c     E1 96 A0 96 
31f80     A4 96 EA 96 
31f84     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
31f88     AF 96 F4 96 
31f8c     F8 96 3E 97 
31f90     FD 96 43 97 
31f94     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
31f98     08 97 6B 99 
31f9c     D6 92 88 91 
31fa0     D8 EE 84 66 
31fa4     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
31fa8     2E 6F E7 6E 
31fac     6C 6F 24 6F 
31fb0     21 6F 1F 6F 
31fb4     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
31fb8     17 6F 13 6F 
31fbc     54 6F 0E 6F 
31fc0     0B 6F 4B 6F 
31fc4     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
31fc8     27 6D 1C 7B 
31fcc     19 59 9F DB 
31fd0     66 8E BC 94 
31fd4     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
31fd8     67 97 26 97 
31fdc     6D 97 2B 97 
31fe0     72 97 32 97 
31fe4     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
31fe8     C1 97 7F 97 
31fec     C6 97 85 97 
31ff0     CB 97 CE 97 
31ff4     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
31ff8     EC 8A C4 C6 
31ffc     68 4C F4 7D 
32000     63 6E E8 6E 
32004     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
32008     ED 6F A7 6F 
3200c     E7 6F A0 6F 
32010     E1 6F 9B 6F 
32014     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
32018     D5 6F 8F 6F 
3201c     CE 6F 45 6F 
32020     86 6F 68 6D 
32024     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
32028     C0 13 AD A2 
3202c     A7 8E 79 99 
32030     E6 97 E8 97 
32034     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
32038     F1 97 F3 97 
3203c     F6 97 F9 97 
32040     FB 97 FE 97 
32044     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
32048     4A 98 0A 98 
3204c     93 98 0F 98 
32050     7F 9B BF 8C 
32054     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
32058     91 7B 62 73 
3205c     1A 6E B9 70 
32060     EB 6F B3 70 
32064     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
32068     25 70 20 70 
3206c     1E 70 1B 70 
32070     18 70 15 70 
32074     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
32078     0D 70 09 70 
3207c     07 70 03 70 
32080     01 70 FD 6F 
32084     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
32088     F6 6F F2 6F 
3208c     EF 6F EC 6F 
32090     2C 70 E6 6F 
32094     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
32098     DD 6F 97 6F 
3209c     D7 6F 84 6E 
320a0     8F 6F 3F 7D 
320a4     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
320a6     00 00 00 00 | zero1 long 0
320aa     FF FF FF FF 
320ae     FF FF       | atarist_spl file "atarist.spl" '512
320b0     00 00 00 00 
320b4     00 00 00 00 
320b8     00 00       | 	byte	$00[10]
320ba     17 7F F2 7F 
320be     B2 7F 72 7F 
320c2     33 7F F4 7E 
320c6     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
320ca     36 7E F5 7D 
320ce     E9 51 F2 0D 
320d2     8E 00 F3 FD 
320d6     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
320da     57 FD 58 FD 
320de     5B FD 5C FD 
320e2     5C FD 60 7D 
320e6     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
320ea     D6 7C 98 7C 
320ee     59 7C 1A 7C 
320f2     DC 7B 9E 7B 
320f6     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
320fa     F3 05 00 FD 
320fe     41 FB EA FA 
32102     D9 FA DB FA 
32106     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
3210a     E4 FA 9B 36 
3210e     F8 7A C0 7A 
32112     84 7A 45 7A 
32116     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
3211a     8E 79 51 79 
3211e     15 79 D7 78 
32122     3C 1F EB FF 
32126     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
3212a     6D F8 65 F8 
3212e     68 F8 6D F8 
32132     70 F8 74 F8 
32136     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
3213a     AB 60 79 60 
3213e     4B 60 1A 60 
32142     E9 5F B9 5F 
32146     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
3214a     FB 59 B2 0B 
3214e     92 FA 3A F7 
32152     96 F6 79 F6 
32156     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
3215a     82 F6 86 F6 
3215e     8C F6 DB 5D 
32162     F1 5E C1 5E 
32166     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
3216a     34 5E 04 5E 
3216e     D6 5D A6 5D 
32172     78 5D D4 3E 
32176     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
3217a     27 F5 BA F4 
3217e     AB F4 AD F4 
32182     B2 F4 B8 F4 
32186     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
3218a     26 5D 2B 5D 
3218e     FC 5C CD 5C 
32192     9F 5C 70 5C 
32196     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
3219a     E5 5B B8 5B 
3219e     DB 24 A7 FC 
321a2     D1 F4 4D F3 
321a6     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
321aa     04 F3 0B F3 
321ae     11 F3 16 F3 
321b2     DE 18 98 5B 
321b6     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
321ba     4E 4A 29 48 
321be     A0 47 6A 47 
321c2     43 47 20 47 
321c6     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
321ca     E2 F6 98 F2 
321ce     C5 F1 A3 F1 
321d2     A3 F1 A8 F1 
321d6     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
321da     BF F1 00 3D 
321de     EF 46 CD 46 
321e2     AA 46 86 46 
321e6     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
321ea     1C 46 F9 45 
321ee     D7 45 EE 43 
321f2     DE 02 E8 F3 
321f6     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
321fa     61 F0 65 F0 
321fe     6D F0 74 F0 
32202     7C F0 84 F0 
32206     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
3220a     8E 45 6D 45 
3220e     49 45 27 45 
32212     05 45 E1 44 
32216     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
3221a     F1 2F A9 FB 
3221e     8B F1 9B EF 
32222     40 EF 36 EF 
32226     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
3222a     4D EF 56 EF 
3222e     5E EF 7B 44 
32232     8C 44 69 44 
32236     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
3223a     03 44 E1 43 
3223e     C0 43 F5 37 
32242     69 33 0F 11 
32246     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
3224a     66 EE 37 EE 
3224e     38 EE 40 EE 
32252     48 EE 51 EE 
32256     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
3225a     7D 32 6A 32 
3225e     51 32 37 32 
32262     1F 32 05 32 
32266     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
3226a     B9 31 A1 31 
3226e     F1 04 F4 F1 
32272     50 EE A0 ED 
32276     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
3227a     93 ED 9A ED 
3227e     A4 ED AD ED 
32282     F4 27 C1 31 
32286     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
3228a     78 31 5F 31 
3228e     46 31 2E 31 
32292     15 31 FC 30 
32296     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
3229a     C4 EF 4A ED 
3229e     DC EC CB EC 
322a2     D2 EC DA EC 
322a6     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
322aa     F9 EC 64 2F 
322ae     0A 31 F1 30 
322b2     D9 30 C0 30 
322b6     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
322ba     78 30 5F 30 
322be     46 30 38 23 
322c2     A6 F6 19 EE 
322c6     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
322ca     20 EC 28 EC 
322ce     32 EC 3C EC 
322d2     47 EC 51 EC 
322d6     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
322da     A3 22 93 22 
322de     7F 22 6E 22 
322e2     5D 22 4C 22 
322e6     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
322ea     77 09 76 F1 
322ee     CC EC F0 EB 
322f2     CD EB CE EB 
322f6     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
322fa     ED EB F5 EB 
322fe     3E F6 6B 22 
32302     5F 22 4E 22 
32306     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
3230a     1B 22 0B 22 
3230e     FA 21 E9 21 
32312     D8 21 4D FF 
32316     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
3231a     92 EB 7B EB 
3231e     82 EB 8C EB 
32322     97 EB A1 EB 
32326     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
3232a     15 22 04 22 
3232e     F3 21 E3 21 
32332     D2 21 C0 21 
32336     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
3233a     8E 21 7D 21 
3233e     9A F8 A4 ED 
32342     8E EB 2F EB 
32346     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
3234a     37 EB 42 EB 
3234e     4C EB 57 EB 
32352     B2 17 22 19 
32356     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
3235a     FD 18 EF 18 
3235e     E3 18 D6 18 
32362     CA 18 BD 18 
32366     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
3236a     60 EC 35 EB 
3236e     01 EB 01 EB 
32372     0C EB 16 EB 
32376     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
3237a     34 EB D0 18 
3237e     00 19 F4 18 
32382     E8 18 DA 18 
32386     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
3238a     B6 18 A9 18 
3238e     9D 18 91 05 
32392     F0 EF CA EB 
32396     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
3239a     E8 EA F2 EA 
3239e     FE EA 07 EB 
323a2     12 EB C2 EF 
323a6     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
323aa     D9 18 CD 18 
323ae     C0 18 B3 18 
323b2     A7 18 9B 18 
323b6     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
323ba     B8 FC 30 EE 
323be     61 EB DC EA 
323c2     CD EA D2 EA 
323c6     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
323ca     F3 EA FE EA 
323ce     D2 09 D1 18 
323d2     C3 18 17 18 
323d6     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
323da     66 11 52 11 
323de     49 11 41 11 
323e2     38 11 E0 F4 
323e6     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
323ea     C9 EA C5 EA 
323ee     CF EA DB EA 
323f2     E6 EA EF EA 
323f6     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
323fa     89 11 80 11 
323fe     78 11 6E 11 
32402     67 11 5D 11 
32406     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
3240a     43 11 32 0D 
3240e     9C F1 07 EC 
32412     F8 EA CD EA 
32416     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
3241a     E4 EA ED EA 
3241e     F8 EA 02 EB 
32422     55 11 91 11 
32426     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
3242a     75 11 6E 11 
3242e     64 11 5E 11 
32432     54 11 4A 11 
32436     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
3243a     A8 EB F1 EA 
3243e     D9 EA DC EA 
32442     E8 EA F1 EA 
32446     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
3244a     A6 EB 9E 11 
3244e     A0 11 96 11 
32452     8D 11 85 11 
32456     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
3245a     6A 11 CA 0D 
3245e     36 0B 57 F8 
32462     6C ED 57 EB 
32466     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
3246a     F4 EA FF EA 
3246e     09 EB 15 EB 
32472     1E EB 1A FD 
32476     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
3247a     ED 0A E8 0A 
3247e     E2 0A DC 0A 
32482     D6 0A D1 0A 
32486     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
3248a     F8 F3 BC EC 
3248e     57 EB 1E EB 
32492     18 EB 24 EB 
32496     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
3249a     42 EB 4D EB 
3249e     08 09 20 0B 
324a2     1A 0B 14 0B 
324a6     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
324aa     04 0B FE 0A 
324ae     F9 0A F2 0A 
324b2     84 08 3A F1 
324b6     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
324ba     42 EB 42 EB 
324be     4E EB 57 EB 
324c2     62 EB 6B EB 
324c6     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
324ca     48 0B 43 0B 
324ce     3C 0B 36 0B 
324d2     31 0B 2C 0B 
324d6     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
324da     1B 0B 5C 00 
324de     6A EF 1B EC 
324e2     81 EB 6A EB 
324e6     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
324ea     85 EB 8E EB 
324ee     99 EB A3 EB 
324f2     DD 05 E5 05 
324f6     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
324fa     DB 05 D8 05 
324fe     D5 05 D1 05 
32502     D0 05 CB 05 
32506     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
3250a     0C EC BB EB 
3250e     B3 EB BB EB 
32512     C5 EB D0 EB 
32516     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
3251a     E4 F7 2C 06 
3251e     28 06 24 06 
32522     22 06 1F 06 
32526     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
3252a     16 06 14 06 
3252e     0F 06 D0 F3 
32532     65 ED 2D EC 
32536     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
3253a     01 EC 0A EC 
3253e     14 EC 1E EC 
32542     29 EC FB 03 
32546     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
3254a     63 06 60 06 
3254e     5E 06 59 06 
32552     58 06 54 06 
32556     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
3255a     69 F1 21 ED 
3255e     55 EC 33 EC 
32562     36 EC 40 EC 
32566     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
3256a     5C EC 68 EC 
3256e     92 02 D9 02 
32572     D7 02 D7 02 
32576     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
3257a     D1 02 D1 02 
3257e     CE 02 CD 02 
32582     5D FC 80 EF 
32586     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
3258a     83 EC 8A EC 
3258e     93 EC 9C EC 
32592     A5 EC B1 EC 
32596     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
3259a     2B 03 2A 03 
3259e     29 03 26 03 
325a2     25 03 24 03 
325a6     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
325aa     1F 03 70 F7 
325ae     D0 EE 27 ED 
325b2     DB EC D4 EC 
325b6     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
325ba     F0 EC FA EC 
325be     02 ED F9 F4 
325c2     7B 03 7C 03 
325c6     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
325ca     75 03 73 03 
325ce     72 03 70 03 
325d2     6D 03 6C 03 
325d6     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
325da     54 ED 22 ED 
325de     22 ED 2C ED 
325e2     35 ED 3F ED 
325e6     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
325ea     14 01 C3 03 
325ee     C1 03 C0 03 
325f2     5F 01 A5 00 
325f6     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
325fa     7B 00 7C 00 
325fe     20 00 85 F1 
32602     2A EE 89 ED 
32606     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
3260a     80 ED 87 ED 
3260e     90 ED 9A ED 
32612     A3 ED 73 00 
32616     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
3261a     D0 00 D0 00 
3261e     D0 00 D0 00 
32622     D0 00 CF 00 
32626     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
3262a     80 F0 3D EE 
3262e     D5 ED C7 ED 
32632     CD ED D6 ED 
32636     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
3263a     F2 ED FA ED 
3263e     1D 01 29 01 
32642     27 01 27 01 
32646     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
3264a     25 01 26 01 
3264e     26 01 23 01 
32652     D0 F7 EC EF 
32656     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
3265a     1C EE 24 EE 
3265e     2D EE 37 EE 
32662     40 EE 47 EE 
32666     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
3266a     7D 01 7B 01 
3266e     7A 01 7A 01 
32672     79 01 78 01 
32676     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
3267a     84 FE DE F3 
3267e     6C EF 93 EE 
32682     72 EE 72 EE 
32686     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
3268a     8B EE 95 EE 
3268e     9E EE 15 FC 
32692     67 FE 67 FE 
32696     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
3269a     6B FE 6B FE 
3269e     6D FE 6D FE 
326a2     6D FE 6F FE 
326a6     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
326aa     DF EE CC EE 
326ae     CF EE D9 EE 
326b2     E1 EE EA EE 
326b6     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
326ba     5A FE C4 FE 
326be     C3 FE C5 FE 
326c2     C6 FE C6 FE 
326c6     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
326ca     C8 FE C7 FE 
326ce     DA FB 85 F1 
326d2     8D EF 31 EF 
326d6     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
326da     34 EF 3E EF 
326de     46 EF 4F EF 
326e2     57 EF 0D FF 
326e6     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
326ea     1F FF 1F FF 
326ee     21 FF 21 FF 
326f2     21 FF 21 FF 
326f6     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
326fa     15 F1 BE EF 
326fe     84 EF 7E EF 
32702     88 EF 8F EF 
32706     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
3270a     A9 EF 06 F2 
3270e     A6 FC AB FC 
32712     AD FC AE FC 
32716     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
3271a     B2 FC B4 FC 
3271e     B6 FC B7 FC 
32722     8B F4 BD F0 
32726     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
3272a     E4 EF EE EF 
3272e     F6 EF FD EF 
32732     04 F0 0E F0 
32736     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
3273a     0B FD 0D FD 
3273e     0F FD 11 FD 
32742     11 FD 13 FD 
32746     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
3274a     17 FD 64 F3 
3274e     CD F0 52 F0 
32752     41 F0 45 F0 
32756     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
3275a     5B F0 64 F0 
3275e     6D F0 FB FC 
32762     65 FD 68 FD 
32766     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
3276a     6C FD 6D FD 
3276e     6F FD 70 FD 
32772     72 FD B3 FB 
32776     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
3277a     A4 F0 99 F0 
3277e     A0 F0 A8 F0 
32782     AE F0 B9 F0 
32786     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
3278a     CB FB DD FB 
3278e     DE FB E0 FB 
32792     E3 FB E3 FB 
32796     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
3279a     E9 FB EC FB 
3279e     62 F7 27 F2 
327a2     2A F1 FF F0 
327a6     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
327aa     0C F1 13 F1 
327ae     1B F1 23 F1 
327b2     33 F2 3C FC 
327b6     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
327ba     42 FC 45 FC 
327be     47 FC 48 FC 
327c2     4A FC 4C FC 
327c6     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
327ca     20 F2 77 F1 
327ce     5C F1 5F F1 
327d2     64 F1 6C F1 
327d6     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
327da     83 F1 DC F8 
327de     9A FC 9A FC 
327e2     9B FC 9E FC 
327e6     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
327ea     A3 FC A4 FC 
327ee     A6 FC A9 FC 
327f2     90 F4 33 F2 
327f6     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
327fa     BA F1 BF F1 
327fe     C7 F1 CE F1 
32802     D6 F1 DC F1 
32806     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
3280a     F3 FC F5 FC 
3280e     FE FB 79 FB 
32812     62 FB 5F FB 
32816     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
3281a     6F FA AF F3 
3281e     53 F2 12 F2 
32822     0F F2 15 F2 
32826     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
3282a     2A F2 32 F2 
3282e     38 F2 9A FB 
32832     AF FB B1 FB 
32836     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
3283a     B7 FB B8 FB 
3283e     BA FB BC FB 
32842     C1 FB 3B F8 
32846     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
3284a     6E F2 6C F2 
3284e     74 F2 7A F2 
32852     81 F2 87 F2 
32856     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
3285a     06 FC 09 FC 
3285e     0C FC 0E FC 
32862     0F FC 12 FC 
32866     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
3286a     17 FC 1A FC 
3286e     B2 F6 7B F3 
32872     DD F2 C5 F2 
32876     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
3287a     D4 F2 DB F2 
3287e     E0 F2 E8 F2 
32882     28 F8 60 FC 
32886     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
3288a     64 FC 66 FC 
3288e     68 FC 6A FC 
32892     6D FC 52 FC 
32896     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
3289a     78 F3 24 F3 
3289e     1A F3 1E F3 
328a2     24 F3 2A F3 
328a6     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
328aa     3D F3 80 FA 
328ae     0C FB 0F FB 
328b2     10 FB 14 FB 
328b6     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
328ba     1B FB 1D FB 
328be     1F FB 92 FA 
328c2     DE F4 AE F3 
328c6     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
328ca     79 F3 7E F3 
328ce     84 F3 8C F3 
328d2     92 F3 97 F3 
328d6     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
328da     67 FB 69 FB 
328de     6B FB 6F FB 
328e2     71 FB 72 FB 
328e6     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
328ea     E3 F8 BA F4 
328ee     EE F3 CC F3 
328f2     CA F3 CF F3 
328f6     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
328fa     E2 F3 E8 F3 
328fe     ED F3 B7 FB 
32902     BC FB BE FB 
32906     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
3290a     C4 FB C6 FB 
3290e     C8 FB C9 FB 
32912     CC FB 8F F7 
32916     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
3291a     1E F4 1E F4 
3291e     24 F4 2A F4 
32922     30 F4 38 F4 
32926     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
3292a     AD FA B1 FA 
3292e     B4 FA B6 FA 
32932     BA FA BB FA 
32936     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
3293a     C2 FA C6 FA 
3293e     55 F6 C6 F4 
32942     7D F4 72 F4 
32946     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
3294a     83 F4 89 F4 
3294e     8F F4 94 F4 
32952     66 FA 03 FB 
32956     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
3295a     0A FB 0E FB 
3295e     10 FB 11 FB 
32962     16 FB 18 FB 
32966     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
3296a     F9 F4 CA F4 
3296e     C5 F4 CB F4 
32972     D1 F4 D7 F4 
32976     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
3297a     E8 F4 3F FB 
3297e     56 FB 58 FB 
32982     5A FB 5E FB 
32986     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
3298a     64 FB 64 FB 
3298e     69 FB 99 F9 
32992     E9 F5 33 F5 
32996     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
3299a     1D F5 22 F5 
3299e     27 F5 2E F5 
329a2     32 F5 37 F5 
329a6     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
329aa     BC FA BC FA 
329ae     C1 FA C2 FA 
329b2     C4 FA C8 FA 
329b6     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
329ba     F9 F7 DB F5 
329be     78 F5 69 F5 
329c2     6A F5 70 F5 
329c6     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
329ca     7F F5 85 F5 
329ce     6E F7 06 FB 
329d2     0A FB 0B FB 
329d6     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
329da     14 FB 15 FB 
329de     18 FB 1B FB 
329e2     1D FB 70 F7 
329e6     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
329ea     B6 F5 BB F5 
329ee     C0 F5 C6 F5 
329f2     CA F5 CF F5 
329f6     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
329fa     54 FB 56 FB 
329fe     5A FB 5B FB 
32a02     5E FB 5F FB 
32a06     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
32a0a     67 FB 52 FB 
32a0e     29 F7 33 F6 
32a12     06 F6 02 F6 
32a16     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
32a1a     10 F6 16 F6 
32a1e     1A F6 1F F6 
32a22     81 FB 9F FB 
32a26     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
32a2a     51 FB F2 FA 
32a2e     E3 FA E3 FA 
32a32     E5 FA E9 FA 
32a36     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
32a3a     64 F6 4D F6 
32a3e     4D F6 53 F6 
32a42     57 F6 5C F6 
32a46     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
32a4a     6A F6 19 FB 
32a4e     1E FB 22 FB 
32a52     23 FB 24 FB 
32a56     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
32a5a     2C FB 2E FB 
32a5e     32 FB F0 F8 
32a62     01 F7 A5 F6 
32a66     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
32a6a     9F F6 A3 F6 
32a6e     A6 F6 AC F6 
32a72     B0 F6 EB F7 
32a76     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
32a7a     68 FB 6C FB 
32a7e     6E FB 71 FB 
32a82     72 FB 74 FB 
32a86     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
32a8a     71 F8 21 F7 
32a8e     E5 F6 DD F6 
32a92     E1 F6 E6 F6 
32a96     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
32a9a     F5 F6 F7 F6 
32a9e     F7 FA AB FB 
32aa2     AD FB AF FB 
32aa6     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
32aaa     B6 FB B9 FB 
32aae     BB FB BC FB 
32ab2     21 FB 07 F8 
32ab6     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
32aba     22 F7 26 F7 
32abe     2B F7 2E F7 
32ac2     34 F7 38 F7 
32ac6     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
32aca     13 FB 16 FB 
32ace     17 FB 1B FB 
32ad2     1E FB 20 FB 
32ad6     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
32ada     26 FB 77 FA 
32ade     F3 F7 7C F7 
32ae2     67 F7 6A F7 
32ae6     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
32aea     74 F7 7A F7 
32aee     7E F7 82 F7 
32af2     53 FB 5A FB 
32af6     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
32afa     5F FB 63 FB 
32afe     65 FB 67 FB 
32b02     69 FB 6A FB 
32b06     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
32b0a     B5 F7 A9 F7 
32b0e     AD F7 B0 F7 
32b12     B5 F7 B8 F7 
32b16     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
32b1a     6E F8 99 FB 
32b1e     9C FB 9D FB 
32b22     9F FB A4 FB 
32b26     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
32b2a     A9 FB AB FB 
32b2e     AD FB 46 F9 
32b32     26 F8 F0 F7 
32b36     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
32b3a     F4 F7 F8 F7 
32b3e     FB F7 FF F7 
32b42     03 F8 65 FA 
32b46     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
32b4a     2B FB 2F FB 
32b4e     30 FB 32 FB 
32b52     34 FB 38 FB 
32b56     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
32b5a     E9 F8 4A F8 
32b5e     2E F8 2C F8 
32b62     2F F8 36 F8 
32b66     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
32b6a     41 F8 44 F8 
32b6e     4A FB 67 FB 
32b72     68 FB 6B FB 
32b76     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
32b7a     73 FB 74 FB 
32b7e     78 FB 7A FB 
32b82     14 FB E7 F8 
32b86     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
32b8a     6D F8 70 F8 
32b8e     73 F8 78 F8 
32b92     7C F8 80 F8 
32b96     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
32b9a     A6 FB A7 FB 
32b9e     A9 FB AC FB 
32ba2     AF FB B1 FB 
32ba6     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
32baa     B7 FB 73 FA 
32bae     F8 F8 B4 F8 
32bb2     A9 F8 AB F8 
32bb6     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
32bba     B4 F8 B8 F8 
32bbe     BB F8 FA F8 
32bc2     64 FB 65 FB 
32bc6     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
32bca     6D FB 6F FB 
32bce     70 FB 74 FB 
32bd2     77 FB 77 FB 
32bd6     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
32bda     E9 F8 E4 F8 
32bde     E8 F8 EB F8 
32be2     EE F8 F2 F8 
32be6     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
32bea     B5 FA 9F FB 
32bee     A1 FB A4 FB 
32bf2     A5 FB A9 FB 
32bf6     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
32bfa     AE FB B1 FB 
32bfe     B2 FB C7 F9 
32c02     39 F9 22 F9 
32c06     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
32c0a     26 F9 2A F9 
32c0e     2E F9 32 F9 
32c12     33 F9 BA FB 
32c16     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
32c1a     DE FB E1 FB 
32c1e     E2 FB E4 FB 
32c22     E5 FB E7 FB 
32c26     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
32c2a     C5 F9 67 F9 
32c2e     57 F9 56 F9 
32c32     5B F9 5F F9 
32c36     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
32c3a     68 F9 6C F9 
32c3e     0B FC 11 FC 
32c42     14 FC 15 FC 
32c46     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
32c4a     B5 FB B5 FB 
32c4e     B6 FB B8 FB 
32c52     E9 FA C8 F9 
32c56     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
32c5a     90 F9 94 F9 
32c5e     95 F9 99 F9 
32c62     9D F9 9F F9 
32c66     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
32c6a     DE FB DF FB 
32c6e     E2 FB E4 FB 
32c72     E6 FB E8 FB 
32c76     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
32c7a     EF FB AC FA 
32c7e     E9 F9 C7 F9 
32c82     C3 F9 C8 F9 
32c86     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
32c8a     D0 F9 D4 F9 
32c8e     D6 F9 0E FB 
32c92     11 FC 13 FC 
32c96     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
32c9a     19 FC 1B FC 
32c9e     1D FC 1E FC 
32ca2     21 FC 22 FC 
32ca6     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
32caa     F7 F9 F7 F9 
32cae     FB F9 FE F9 
32cb2     00 FA 03 FA 
32cb6     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
32cba     1B FC 45 FC 
32cbe     46 FC 48 FC 
32cc2     4A FC 4B FC 
32cc6     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
32cca     52 FC 54 FC 
32cce     F3 FB 82 FA 
32cd2     35 FA 28 FA 
32cd6     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
32cda     31 FA 32 FA 
32cde     37 FA 37 FA 
32ce2     3C FA 00 FC 
32ce6     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
32cea     09 FC 0B FC 
32cee     0F FC 12 FC 
32cf2     12 FC 15 FC 
32cf6     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
32cfa     8D FA 60 FA 
32cfe     5B FA 5C FA 
32d02     60 FA 61 FA 
32d06     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
32d0a     6C FA 6D FA 
32d0e     37 FC 3A FC 
32d12     3B FC 3D FC 
32d16     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
32d1a     43 FC 44 FC 
32d1e     45 FC 47 FC 
32d22     51 FB AB FA 
32d26     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
32d2a     8E FA 91 FA 
32d2e     93 FA 95 FA 
32d32     98 FA 9B FA 
32d36     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
32d3a     68 FC 6A FC 
32d3e     6C FC 6E FC 
32d42     70 FC 72 FC 
32d46     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
32d4a     76 FC 3B FB 
32d4e     D0 FA BB FA 
32d52     B9 FA BD FA 
32d56     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
32d5a     C4 FA C6 FA 
32d5e     CA FA 13 FC 
32d62     3A FC 3A FC 
32d66     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
32d6a     41 FC 43 FC 
32d6e     44 FC 47 FC 
32d72     48 FC 3C FC 
32d76     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
32d7a     E6 FA E8 FA 
32d7e     EB FA EE FA 
32d82     F0 FA F2 FA 
32d86     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
32d8a     61 FC 66 FC 
32d8e     68 FC 6B FC 
32d92     6C FC 6E FC 
32d96     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
32d9a     73 FC 75 FC 
32d9e     13 FC 3F FB 
32da2     17 FB 12 FB 
32da6     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
32daa     1A FB 1D FB 
32dae     1F FB 20 FB 
32db2     23 FB 92 FC 
32db6     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
32dba     96 FC 97 FC 
32dbe     9A FC 9C FC 
32dc2     9E FC 9F FC 
32dc6     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
32dca     5A FB 41 FB 
32dce     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
32dd2     00 00 00 00 | zero2 long 0
32dd6     01 00 00 00 
32dda     00 00 00 00 
32dde     00 00 00 00 
32de2     00 00 00 00 | mouse  file "mouse2.def"
32de6     00 00 00 00 
32dea     00 00 00 00 
32dee     00 00 00 00 
32df2     00 00 00 00 | 	byte	$00[16]
32df6     01 01 00 00 
32dfa     00 00 00 00 
32dfe     00 00 00 00 
32e02     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32e06     00 00 00 00 
32e0a     00 00 00 00 
32e0e     00 00 00 00 
32e12     00 00 00 00 | 	byte	$00[16]
32e16     01 0D 01 00 
32e1a     00 00 00 00 
32e1e     00 00 00 00 
32e22     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32e26     00 00 00 00 
32e2a     00 00 00 00 
32e2e     00 00 00 00 
32e32     00 00 00 00 | 	byte	$00[16]
32e36     01 0D 0D 01 
32e3a     00 00 00 00 
32e3e     00 00 00 00 
32e42     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32e46     00 00 00 00 
32e4a     00 00 00 00 
32e4e     00 00 00 00 
32e52     00 00 00 00 | 	byte	$00[16]
32e56     01 0D 0D 0D 
32e5a     01 00 00 00 
32e5e     00 00 00 00 
32e62     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32e66     00 00 00 00 
32e6a     00 00 00 00 
32e6e     00 00 00 00 
32e72     00 00 00 00 | 	byte	$00[16]
32e76     01 0D 0D 0D 
32e7a     0D 01 00 00 
32e7e     00 00 00 00 
32e82     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32e86     00 00 00 00 
32e8a     00 00 00 00 
32e8e     00 00 00 00 
32e92     00 00 00 00 | 	byte	$00[16]
32e96     01 0D 0D 0D 
32e9a     0D 0D 01 00 
32e9e     00 00 00 00 
32ea2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
32ea6     00 00 00 00 
32eaa     00 00 00 00 
32eae     00 00 00 00 
32eb2     00 00 00 00 | 	byte	$00[16]
32eb6     01 0D 0D 0D 
32eba     0D 0D 0D 01 
32ebe     00 00 00 00 
32ec2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
32ec6     00 00 00 00 
32eca     00 00 00 00 
32ece     00 00 00 00 
32ed2     00 00 00 00 | 	byte	$00[16]
32ed6     01 0D 0D 0D 
32eda     0D 0D 0D 0C 
32ede     01 00 00 00 
32ee2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
32ee6     00 00 00 00 
32eea     00 00 00 00 
32eee     00 00 00 00 
32ef2     00 00 00 00 | 	byte	$00[16]
32ef6     01 0D 0D 0D 
32efa     0D 0D 0D 0D 
32efe     0C 01 00 00 
32f02     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
32f06     00 00 00 00 
32f0a     00 00 00 00 
32f0e     00 00 00 00 
32f12     00 00 00 00 | 	byte	$00[16]
32f16     01 0D 0D 0D 
32f1a     0D 0D 0D 0D 
32f1e     0D 0C 01 00 
32f22     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
32f26     00 00 00 00 
32f2a     00 00 00 00 
32f2e     00 00 00 00 
32f32     00 00 00 00 | 	byte	$00[16]
32f36     01 0D 0D 0D 
32f3a     0D 0D 0D 0D 
32f3e     0D 0D 0B 01 
32f42     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
32f46     00 00 00 00 
32f4a     00 00 00 00 
32f4e     00 00 00 00 
32f52     00 00 00 00 | 	byte	$00[16]
32f56     01 0D 0D 0D 
32f5a     0C 0D 0D 03 
32f5e     01 01 01 01 
32f62     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
32f66     00 00 00 00 
32f6a     00 00 00 00 
32f6e     00 00 00 00 
32f72     00 00 00 00 | 	byte	$00[16]
32f76     01 0D 0D 0C 
32f7a     01 09 0D 03 
32f7e     00 00 00 00 
32f82     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
32f86     00 00 00 00 
32f8a     00 00 00 00 
32f8e     00 00 00 00 
32f92     00 00 00 00 | 	byte	$00[16]
32f96     01 0D 0C 01 
32f9a     00 01 0D 0B 
32f9e     01 00 00 00 
32fa2     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
32fa6     00 00 00 00 
32faa     00 00 00 00 
32fae     00 00 00 00 
32fb2     00 00 00 00 | 	byte	$00[16]
32fb6     01 0C 01 00 
32fba     00 01 0A 0D 
32fbe     01 00 00 00 
32fc2     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
32fc6     00 00 00 00 
32fca     00 00 00 00 
32fce     00 00 00 00 
32fd2     00 00 00 00 | 	byte	$00[16]
32fd6     01 01 00 00 
32fda     00 00 01 0D 
32fde     0B 01 00 00 
32fe2     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
32fe6     00 00 00 00 
32fea     00 00 00 00 
32fee     00 00 00 00 
32ff2     00 00 00 00 
32ff6     00 00 00 00 
32ffa     00 00       | 	byte	$00[22]
32ffc     01 0B 0D 01 
33000     00 00 00 00 
33004     00 00 00 00 
33008     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3300c     00 00 00 00 
33010     00 00 00 00 
33014     00 00 00 00 
33018     00 00 00 00 
3301c     00          | 	byte	$00[17]
3301d     01 01 00 00 
33021     00 00 00 00 
33025     00 00 00 00 
33029     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3302d     00 00 00 00 
      ...             
331d1     00 00 00 00 
331d5     00          | 	byte	$00[425]
331d6     73 32 00 04 
331da     00 00 10 00 
331de     00 00 00 00 
331e2     00 00 00 00 | atari2 file "atari2.s2"
331e6     43 87 43 87 
331ea     43 87 44 87 
331ee     43 87 44 87 
331f2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
331f6     43 87 43 87 
331fa     43 87 44 87 
331fe     43 87 43 87 
33202     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
33206     44 87 43 87 
3320a     44 87 43 87 
3320e     43 87 43 87 
33212     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
33216     43 87 43 87 
3321a     44 87 43 87 
3321e     44 87 44 87 
33222     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
33226     43 87 43 87 
3322a     44 87 43 87 
3322e     43 87 42 87 
33232     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
33236     43 87 43 87 
3323a     43 87 43 87 
3323e     44 87 43 87 
33242     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
33246     44 87 44 87 
3324a     43 87 44 87 
3324e     43 87 44 87 
33252     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
33256     44 87 43 87 
3325a     44 87 44 87 
3325e     43 87 43 87 
33262     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
33266     43 87 44 87 
3326a     44 87 43 87 
3326e     43 87 44 87 
33272     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
33276     43 87 43 87 
3327a     43 87 43 87 
3327e     43 87 43 87 
33282     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
33286     42 87 43 87 
3328a     44 87 42 87 
3328e     43 87 43 87 
33292     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
33296     43 87 44 87 
3329a     44 87 43 87 
3329e     43 87 43 87 
332a2     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
332a6     43 87 5C 87 
332aa     EE 86 AC 87 
332ae     4C 7C A3 78 
332b2     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
332b6     BC 78 BB 78 
332ba     BD 78 BC 78 
332be     BB 78 BD 78 
332c2     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
332c6     BB 78 BB 78 
332ca     BC 78 BC 78 
332ce     BC 78 BB 78 
332d2     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
332d6     BC 78 BC 78 
332da     BC 78 BC 78 
332de     BC 78 BC 78 
332e2     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
332e6     BB 78 BC 78 
332ea     A0 78 4C 7C 
332ee     11 7A 29 89 
332f2     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
332f6     44 87 43 87 
332fa     44 87 43 87 
332fe     43 87 42 87 
33302     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
33306     43 87 43 87 
3330a     44 87 ED 85 
3330e     71 85 52 79 
33312     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
33316     BC 78 BC 78 
3331a     BC 78 BC 78 
3331e     BC 78 BC 78 
33322     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
33326     BC 78 BC 78 
3332a     BC 78 A0 78 
3332e     CF 7A B9 81 
33332     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
33336     44 87 43 87 
3333a     43 87 44 87 
3333e     43 87 44 87 
33342     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
33346     43 87 43 87 
3334a     43 87 43 87 
3334e     44 87 43 87 
33352     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
33356     43 87 43 87 
3335a     44 87 43 87 
3335e     44 87 43 87 
33362     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
33366     44 87 43 87 
3336a     43 87 43 87 
3336e     5A 87 39 81 
33372     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
33376     A5 78 BC 78 
3337a     BB 78 BC 78 
3337e     BB 78 BC 78 
33382     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
33386     BC 78 BC 78 
3338a     BC 78 BC 78 
3338e     BC 78 8F 79 
33392     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
33396     09 85 47 87 
3339a     43 87 43 87 
3339e     42 87 42 87 
333a2     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
333a6     43 87 43 87 
333aa     43 87 43 87 
333ae     43 87 44 87 
333b2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
333b6     43 87 43 87 
333ba     44 87 43 87 
333be     42 87 43 87 
333c2     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
333c6     44 87 43 87 
333ca     43 87 43 87 
333ce     44 87 44 87 
333d2     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
333d6     94 78 55 7A 
333da     B9 78 BC 78 
333de     BC 78 BC 78 
333e2     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
333e6     BC 78 BB 78 
333ea     BC 78 BC 78 
333ee     BC 78 BC 78 
333f2     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
333f6     BB 78 BC 78 
333fa     BC 78 BC 78 
333fe     BB 78 BC 78 
33402     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33406     BC 78 BC 78 
3340a     BD 78 BC 78 
3340e     BC 78 BB 78 
33412     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
33416     94 78 B3 84 
3341a     36 84 4A 87 
3341e     43 87 43 87 
33422     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
33426     43 87 44 87 
3342a     43 87 43 87 
3342e     43 87 43 87 
33432     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
33436     43 87 44 87 
3343a     43 87 44 87 
3343e     43 87 43 87 
33442     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
33446     43 87 43 87 
3344a     43 87 45 87 
3344e     43 87 43 87 
33452     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
33456     43 87 44 87 
3345a     44 87 44 87 
3345e     43 87 43 87 
33462     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
33466     43 87 42 87 
3346a     43 87 43 87 
3346e     44 87 43 87 
33472     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
33476     54 87 3C 82 
3347a     36 83 52 79 
3347e     C6 78 BC 78 
33482     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
33486     BB 78 BB 78 
3348a     BC 78 BC 78 
3348e     BC 78 BC 78 
33492     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33496     BD 78 ED 78 
3349a     1B 79 F4 83 
3349e     4D 83 4E 87 
334a2     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
334a6     44 87 43 87 
334aa     42 87 44 87 
334ae     43 87 42 87 
334b2     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
334b6     43 87 54 87 
334ba     26 82 B3 84 
334be     D6 77 BB 78 
334c2     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
334c6     BC 78 BB 78 
334ca     BB 78 BB 78 
334ce     BB 78 BB 78 
334d2     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
334d6     BC 78 BC 78 
334da     26 79 18 75 
334de     36 83 1F 84 
334e2     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
334e6     43 87 43 87 
334ea     43 87 43 87 
334ee     43 87 44 87 
334f2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
334f6     43 87 44 87 
334fa     44 87 43 87 
334fe     43 87 43 87 
33502     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
33506     43 87 43 87 
3350a     43 87 43 87 
3350e     44 87 44 87 
33512     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
33516     44 87 43 87 
3351a     43 87 43 87 
3351e     43 87 44 87 
33522     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
33526     44 87 44 87 
3352a     44 87 43 87 
3352e     44 87 43 87 
33532     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
33536     43 87 43 87 
3353a     43 87 44 87 
3353e     44 87 43 87 
33542     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
33546     43 87 43 87 
3354a     43 87 43 87 
3354e     43 87 44 87 
33552     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
33556     43 87 44 87 
3355a     43 87 44 87 
3355e     19 87 7D 86 
33562     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
33566     B1 78 BC 78 
3356a     BC 78 BC 78 
3356e     BC 78 BC 78 
33572     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33576     BC 78 BC 78 
3357a     BD 78 BC 78 
3357e     B7 78 3B 7B 
33582     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
33586     96 86 44 87 
3358a     43 87 43 87 
3358e     43 87 43 87 
33592     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
33596     44 87 44 87 
3359a     43 87 44 87 
3359e     43 87 44 87 
335a2     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
335a6     43 87 44 87 
335aa     43 87 44 87 
335ae     43 87 44 87 
335b2     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
335b6     43 87 44 87 
335ba     43 87 43 87 
335be     44 87 43 87 
335c2     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
335c6     44 87 44 87 
335ca     43 87 43 87 
335ce     43 87 44 87 
335d2     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
335d6     43 87 43 87 
335da     43 87 43 87 
335de     44 87 44 87 
335e2     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
335e6     36 83 CF 7A 
335ea     AB 78 BB 78 
335ee     BC 78 BC 78 
335f2     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
335f6     BB 78 BC 78 
335fa     BC 78 BC 78 
335fe     BC 78 BC 78 
33602     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33606     BC 78 BC 78 
3360a     BC 78 BB 78 
3360e     BC 78 BC 78 
33612     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33616     BB 78 BC 78 
3361a     BB 78 BC 78 
3361e     BC 78 BD 78 
33622     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
33626     BC 78 BC 78 
3362a     BC 78 BC 78 
3362e     BC 78 BD 78 
33632     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
33636     BC 78 BB 78 
3363a     BC 78 BB 78 
3363e     BB 78 BC 78 
33642     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
33646     BC 78 BC 78 
3364a     BC 78 BC 78 
3364e     BC 78 BB 78 
33652     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
33656     BC 78 BC 78 
3365a     BC 78 BD 78 
3365e     BB 78 BC 78 
33662     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
33666     BC 78 BC 78 
3366a     BC 78 BB 78 
3366e     BC 78 BB 78 
33672     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
33676     BB 78 BC 78 
3367a     BC 78 BC 78 
3367e     BC 78 BB 78 
33682     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33686     BC 78 BC 78 
3368a     BC 78 BB 78 
3368e     BC 78 BB 78 
33692     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33696     BC 78 BC 78 
3369a     BC 78 BC 78 
3369e     BB 78 BC 78 
336a2     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
336a6     BC 78 9F 78 
336aa     52 79 B3 84 
336ae     2F 86 60 87 
336b2     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
336b6     44 87 43 87 
336ba     43 87 43 87 
336be     43 87 43 87 
336c2     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
336c6     43 87 43 87 
336ca     43 87 44 87 
336ce     43 87 43 87 
336d2     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
336d6     43 87 43 87 
336da     43 87 43 87 
336de     43 87 44 87 
336e2     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
336e6     44 87 44 87 
336ea     5E 87 BC 80 
336ee     FB 80 94 78 
336f2     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
336f6     BD 78 BC 78 
336fa     BB 78 BC 78 
336fe     BB 78 BB 78 
33702     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
33706     BC 78 BB 78 
3370a     BB 78 6B 79 
3370e     D6 77 AC 87 
33712     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
33716     43 87 44 87 
3371a     43 87 43 87 
3371e     44 87 43 87 
33722     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
33726     43 87 44 87 
3372a     43 87 5C 87 
3372e     E7 80 00 80 
33732     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
33736     BC 78 BD 78 
3373a     BC 78 BC 78 
3373e     BC 78 BB 78 
33742     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33746     BC 78 BC 78 
3374a     BB 78 BC 78 
3374e     BB 78 BC 78 
33752     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33756     BB 78 BC 78 
3375a     BC 78 BC 78 
3375e     BC 78 BC 78 
33762     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33766     BC 78 BC 78 
3376a     BC 78 BC 78 
3376e     A0 78 8D 7B 
33772     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
33776     60 87 43 87 
3377a     44 87 44 87 
3377e     43 87 43 87 
33782     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
33786     44 87 43 87 
3378a     43 87 43 87 
3378e     44 87 73 86 
33792     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
33796     51 7B B6 78 
3379a     BC 78 BD 78 
3379e     BC 78 BC 78 
337a2     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
337a6     BB 78 BC 78 
337aa     BD 78 BB 78 
337ae     BC 78 BB 78 
337b2     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
337b6     BC 78 BC 78 
337ba     BC 78 BC 78 
337be     BB 78 BC 78 
337c2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
337c6     BC 78 BB 78 
337ca     BB 78 BC 78 
337ce     BC 78 BB 78 
337d2     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
337d6     22 8C AF 84 
337da     48 87 43 87 
337de     44 87 43 87 
337e2     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
337e6     43 87 42 87 
337ea     43 87 43 87 
337ee     44 87 43 87 
337f2     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
337f6     43 87 43 87 
337fa     44 87 44 87 
337fe     43 87 43 87 
33802     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
33806     43 87 43 87 
3380a     43 87 43 87 
3380e     44 87 43 87 
33812     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
33816     9F 8B D6 77 
3381a     16 7C B3 78 
3381e     BC 78 BB 78 
33822     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
33826     BB 78 BC 78 
3382a     BB 78 BC 78 
3382e     BC 78 BC 78 
33832     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
33836     BC 78 BB 78 
3383a     BB 78 BC 78 
3383e     BB 78 BC 78 
33842     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
33846     BB 78 BB 78 
3384a     BC 78 BC 78 
3384e     BC 78 BB 78 
33852     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
33856     BC 78 BC 78 
3385a     BC 78 BD 78 
3385e     BB 78 BC 78 
33862     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
33866     BC 78 BC 78 
3386a     BC 78 BB 78 
3386e     BC 78 BC 78 
33872     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
33876     A8 78 54 7E 
3387a     F4 83 17 82 
3387e     50 87 43 87 
33882     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
33886     44 87 43 87 
3388a     44 87 43 87 
3388e     43 87 44 87 
33892     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
33896     43 87 28 87 
3389a     20 85 CF 7A 
3389e     70 7D AD 78 
338a2     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
338a6     BB 78 BC 78 
338aa     BC 78 BC 78 
338ae     BB 78 BB 78 
338b2     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
338b6     BB 78 B2 78 
338ba     9A 7C CF 7A 
338be     4A 87 0D 87 
338c2     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
338c6     43 87 44 87 
338ca     43 87 44 87 
338ce     43 87 43 87 
338d2     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
338d6     44 87 43 87 
338da     28 87 51 85 
338de     11 7A 1E 7D 
338e2     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
338e6     BC 78 BB 78 
338ea     BC 78 BC 78 
338ee     BC 78 BC 78 
338f2     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
338f6     BB 78 BC 78 
338fa     BB 78 BC 78 
338fe     BC 78 BC 78 
33902     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33906     BB 78 BC 78 
3390a     BC 78 BC 78 
3390e     BD 78 BB 78 
33912     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
33916     BC 78 BB 78 
3391a     BC 78 BC 78 
3391e     BC 78 BB 78 
33922     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33926     BC 78 BC 78 
3392a     BC 78 BC 78 
3392e     BB 78 BC 78 
33932     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33936     BC 78 BD 78 
3393a     BC 78 BC 78 
3393e     BC 78 BB 78 
33942     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33946     BC 78 BB 78 
3394a     BB 78 BC 78 
3394e     BC 78 BB 78 
33952     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33956     BB 78 BB 78 
3395a     BB 78 BC 78 
3395e     B6 78 48 7D 
33962     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
33966     56 87 43 87 
3396a     42 87 44 87 
3396e     44 87 43 87 
33972     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
33976     43 87 44 87 
3397a     43 87 44 87 
3397e     4C 87 7E 83 
33982     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
33986     F7 78 BC 78 
3398a     BC 78 BB 78 
3398e     BB 78 BC 78 
33992     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33996     BC 78 BB 78 
3399a     BC 78 BC 78 
3399e     BB 78 BC 78 
339a2     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
339a6     BB 78 BC 78 
339aa     BC 78 BC 78 
339ae     BC 78 BB 78 
339b2     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
339b6     BC 78 BC 78 
339ba     BC 78 BC 78 
339be     BC 78 BB 78 
339c2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
339c6     BC 78 BB 78 
339ca     BB 78 BC 78 
339ce     BC 78 BB 78 
339d2     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
339d6     BC 78 BC 78 
339da     BB 78 BC 78 
339de     BC 78 BC 78 
339e2     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
339e6     73 32 00 04 
339ea     00 00 10 00 
339ee     00 00 00 00 
339f2     00 00 00 00 | atari12 file "atari12.s2"
339f6     00 6D 00 6D 
339fa     00 6D 00 6D 
339fe     00 6D 00 6D 
33a02     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33a06     00 6D 00 6D 
33a0a     00 6D 00 6D 
33a0e     00 6D 00 6D 
33a12     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33a16     00 6D 00 6D 
33a1a     00 6D 00 6D 
33a1e     00 6D 00 6D 
33a22     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33a26     00 6D 00 6D 
33a2a     00 6D 00 6D 
33a2e     00 6D 00 6D 
33a32     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33a36     00 6D 00 6D 
33a3a     00 6D 00 6D 
33a3e     00 6D 00 6D 
33a42     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
33a46     00 6C 00 6C 
33a4a     00 6C 00 6C 
33a4e     00 6C 00 6C 
33a52     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33a56     00 6C 00 6C 
33a5a     00 6C 00 6C 
33a5e     00 6C 00 6C 
33a62     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33a66     00 6C 00 6C 
33a6a     00 6C 00 6C 
33a6e     00 6C 00 6C 
33a72     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33a76     00 6C 00 6C 
33a7a     00 6C 00 6C 
33a7e     00 6C 00 6C 
33a82     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33a86     00 6C 00 6C 
33a8a     00 6C 00 6C 
33a8e     00 6C 00 6C 
33a92     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33a96     00 6C 00 6C 
33a9a     00 6C 00 6C 
33a9e     00 6C 00 6C 
33aa2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33aa6     00 6C 00 6C 
33aaa     00 6C 00 6C 
33aae     00 6C 00 6C 
33ab2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33ab6     00 6C 00 6C 
33aba     00 6C 00 6C 
33abe     00 6C 00 6C 
33ac2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33ac6     00 6C 00 6C 
33aca     00 6C 00 6C 
33ace     00 6C 00 6C 
33ad2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33ad6     00 6C 00 6C 
33ada     00 6C 00 6C 
33ade     00 6C 00 6C 
33ae2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33ae6     00 6C 00 6C 
33aea     00 6C 00 6C 
33aee     00 6C 00 6C 
33af2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33af6     00 6C 00 6B 
33afa     00 6B 00 6B 
33afe     00 6B 00 6B 
33b02     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33b06     00 6B 00 6B 
33b0a     00 6B 00 6B 
33b0e     00 6B 00 6B 
33b12     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33b16     00 6B 00 6B 
33b1a     00 6B 00 6B 
33b1e     00 6B 00 6B 
33b22     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33b26     00 6B 00 6B 
33b2a     00 6B 00 6B 
33b2e     00 6B 00 6B 
33b32     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33b36     00 6B 00 6B 
33b3a     00 6B 00 6B 
33b3e     00 6B 00 6B 
33b42     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33b46     00 6B 00 6B 
33b4a     00 6B 00 6B 
33b4e     00 6B 00 6B 
33b52     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33b56     00 6B 00 6B 
33b5a     00 6B 00 6B 
33b5e     00 6B 00 6B 
33b62     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33b66     00 6B 00 6B 
33b6a     00 6B 00 6B 
33b6e     00 6B 00 6B 
33b72     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33b76     00 6B 00 6B 
33b7a     00 6B 00 6B 
33b7e     00 6B 00 6B 
33b82     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33b86     00 6B 00 6B 
33b8a     00 6B 00 6B 
33b8e     00 6A 00 9D 
33b92     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
33b96     00 9E 00 9E 
33b9a     00 9E 00 9E 
33b9e     00 9E 00 9E 
33ba2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33ba6     00 9E 00 9E 
33baa     00 9E 00 9E 
33bae     00 9E 00 9E 
33bb2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33bb6     00 9E 00 9E 
33bba     00 9E 00 9E 
33bbe     00 9E 00 9E 
33bc2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33bc6     00 9E 00 9E 
33bca     00 9E 00 9E 
33bce     00 9E 00 9E 
33bd2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33bd6     00 9E 00 9E 
33bda     00 9E 00 9E 
33bde     00 9E 00 9E 
33be2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33be6     00 9E 00 9E 
33bea     00 9E 00 9E 
33bee     00 9E 00 9E 
33bf2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33bf6     00 9E 00 9E 
33bfa     00 9E 00 9E 
33bfe     00 9E 00 9E 
33c02     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33c06     00 9E 00 9E 
33c0a     00 9E 00 9E 
33c0e     00 9E 00 9E 
33c12     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33c16     00 9E 00 9E 
33c1a     00 9E 00 9E 
33c1e     00 9E 00 9E 
33c22     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
33c26     00 9F 00 9F 
33c2a     00 9F 00 9F 
33c2e     00 9F 00 9F 
33c32     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33c36     00 9F 00 9F 
33c3a     00 9F 00 9F 
33c3e     00 9F 00 9F 
33c42     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33c46     00 9F 00 9F 
33c4a     00 9F 00 9F 
33c4e     00 9F 00 9F 
33c52     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33c56     00 9F 00 9F 
33c5a     00 9F 00 9F 
33c5e     00 9F 00 9F 
33c62     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33c66     00 9F 00 9F 
33c6a     00 9F 00 9F 
33c6e     00 9F 00 9F 
33c72     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33c76     00 9F 00 9F 
33c7a     00 9F 00 9F 
33c7e     00 9F 00 9F 
33c82     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33c86     00 9F 00 9F 
33c8a     00 9F 00 9F 
33c8e     00 9F 00 9F 
33c92     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33c96     00 9F 00 9F 
33c9a     00 9F 00 9F 
33c9e     00 9F 00 9F 
33ca2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33ca6     00 9F 00 9F 
33caa     00 9F 00 9F 
33cae     00 9F 00 9F 
33cb2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33cb6     00 9F 00 9F 
33cba     00 9F 00 9F 
33cbe     00 9F 00 9F 
33cc2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33cc6     00 9F 00 9F 
33cca     00 9F 00 9F 
33cce     00 9F 00 9F 
33cd2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33cd6     00 9F 00 9F 
33cda     00 9F 00 9F 
33cde     00 9F 00 9F 
33ce2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33ce6     00 9F 00 9F 
33cea     00 9F 00 A0 
33cee     00 A0 00 A0 
33cf2     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33cf6     00 A0 00 A0 
33cfa     00 A0 00 A0 
33cfe     00 A0 00 A0 
33d02     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33d06     00 A0 00 A0 
33d0a     00 A0 00 A0 
33d0e     00 A0 00 A0 
33d12     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33d16     00 A0 00 A0 
33d1a     00 A0 00 A0 
33d1e     00 A0 00 A0 
33d22     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33d26     00 A0 00 A0 
33d2a     00 A0 00 A0 
33d2e     00 A0 00 A0 
33d32     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33d36     00 A0 00 A0 
33d3a     00 A0 00 A0 
33d3e     00 A0 00 A0 
33d42     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33d46     00 A0 00 A0 
33d4a     00 A0 00 A0 
33d4e     00 A0 00 A0 
33d52     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33d56     00 A0 00 A0 
33d5a     00 A0 00 A0 
33d5e     00 A0 00 A0 
33d62     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33d66     00 A0 00 A0 
33d6a     00 A0 00 A0 
33d6e     00 A0 00 A0 
33d72     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33d76     00 A0 00 A0 
33d7a     00 A0 00 A0 
33d7e     00 A0 00 A0 
33d82     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33d86     00 A0 00 A0 
33d8a     00 A0 00 A0 
33d8e     00 A0 00 A0 
33d92     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33d96     00 A0 00 A0 
33d9a     00 A0 00 A0 
33d9e     00 A0 00 A0 
33da2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33da6     00 A0 00 A0 
33daa     00 A0 00 A0 
33dae     00 A0 00 A0 
33db2     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
33db6     00 6D 00 6D 
33dba     00 6D 00 6D 
33dbe     00 6D 00 6D 
33dc2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33dc6     00 6D 00 6D 
33dca     00 6D 00 6D 
33dce     00 6D 00 6D 
33dd2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33dd6     00 6D 00 6D 
33dda     00 6D 00 6D 
33dde     00 6D 00 6D 
33de2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33de6     00 6D 00 6D 
33dea     00 6D 00 6D 
33dee     00 6D 00 6D 
33df2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33df6     00 6D 00 6D 
33dfa     00 6D 00 6D 
33dfe     00 6D 00 6D 
33e02     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33e06     00 6D 00 6D 
33e0a     00 6D 00 6D 
33e0e     00 6D 00 6D 
33e12     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33e16     00 6D 00 6D 
33e1a     00 6D 00 6D 
33e1e     00 6D 00 6D 
33e22     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33e26     00 6D 00 6D 
33e2a     00 6D 00 6D 
33e2e     00 6D 00 6D 
33e32     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33e36     00 6D 00 6D 
33e3a     00 A0 00 A0 
33e3e     00 A0 00 A0 
33e42     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e46     00 A0 00 A0 
33e4a     00 A0 00 A0 
33e4e     00 A0 00 A0 
33e52     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e56     00 A0 00 A0 
33e5a     00 A0 00 A0 
33e5e     00 A0 00 A0 
33e62     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e66     00 A0 00 A0 
33e6a     00 A0 00 A0 
33e6e     00 A0 00 A0 
33e72     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e76     00 A0 00 A0 
33e7a     00 A0 00 A0 
33e7e     00 A0 00 A0 
33e82     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e86     00 A0 00 A0 
33e8a     00 A0 00 A0 
33e8e     00 A0 00 A0 
33e92     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33e96     00 A0 00 A0 
33e9a     00 A0 00 A0 
33e9e     00 A0 00 A0 
33ea2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33ea6     00 A0 00 A0 
33eaa     00 A0 00 A0 
33eae     00 A0 00 A0 
33eb2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33eb6     00 A0 00 A0 
33eba     00 A0 00 A0 
33ebe     00 A0 00 A0 
33ec2     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
33ec6     00 6D 00 6D 
33eca     00 6D 00 6D 
33ece     00 6D 00 6D 
33ed2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33ed6     00 6D 00 6D 
33eda     00 6D 00 6D 
33ede     00 6D 00 6D 
33ee2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33ee6     00 6D 00 6D 
33eea     00 6D 00 6D 
33eee     00 6D 00 6D 
33ef2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33ef6     00 6D 00 6D 
33efa     00 6D 00 6D 
33efe     00 6D 00 6D 
33f02     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33f06     00 6D 00 6D 
33f0a     00 6D 00 6D 
33f0e     00 6D 00 6D 
33f12     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33f16     00 6D 00 6D 
33f1a     00 6D 00 6D 
33f1e     00 6D 00 6D 
33f22     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33f26     00 6D 00 6D 
33f2a     00 6D 00 6D 
33f2e     00 6D 00 6D 
33f32     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33f36     00 6D 00 6D 
33f3a     00 6D 00 6D 
33f3e     00 6D 00 6D 
33f42     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33f46     00 6D 00 6D 
33f4a     00 6C 00 A0 
33f4e     00 9F 00 A0 
33f52     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
33f56     00 A0 00 A0 
33f5a     00 A0 00 A0 
33f5e     00 A0 00 A0 
33f62     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f66     00 A0 00 A0 
33f6a     00 A0 00 A0 
33f6e     00 A0 00 A0 
33f72     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f76     00 A0 00 A0 
33f7a     00 A0 00 A0 
33f7e     00 A0 00 A0 
33f82     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f86     00 A0 00 A0 
33f8a     00 A0 00 A0 
33f8e     00 A0 00 A0 
33f92     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33f96     00 A0 00 A0 
33f9a     00 A0 00 A0 
33f9e     00 A0 00 A0 
33fa2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33fa6     00 A0 00 A0 
33faa     00 A0 00 A0 
33fae     00 A0 00 A0 
33fb2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33fb6     00 A0 00 A0 
33fba     00 A0 00 A0 
33fbe     00 A0 00 A0 
33fc2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33fc6     00 A0 00 A0 
33fca     00 A0 00 A0 
33fce     00 A0 00 A0 
33fd2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33fd6     00 A0 00 A0 
33fda     00 A0 00 A0 
33fde     00 A0 00 A0 
33fe2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33fe6     00 A0 00 A0 
33fea     00 A0 00 A0 
33fee     00 A0 00 A0 
33ff2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33ff6     00 A0 00 A0 
33ffa     00 A0 00 A0 
33ffe     00 A0 00 A0 
34002     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
34006     00 A1 00 A1 
3400a     00 A1 00 A1 
3400e     00 A1 00 A1 
34012     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
34016     00 A1 00 A1 
3401a     00 A1 00 A1 
3401e     00 A1 00 A1 
34022     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
34026     00 A1 00 A1 
3402a     00 A1 00 A1 
3402e     00 A1 00 A1 
34032     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
34036     00 A1 00 A1 
3403a     00 A1 00 A1 
3403e     00 A1 00 A1 
34042     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
34046     00 A1 00 A1 
3404a     00 A1 00 A1 
3404e     00 A1 00 A1 
34052     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
34056     00 A1 00 A1 
3405a     00 A1 00 A1 
3405e     00 6E 00 6E 
34062     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
34066     00 6E 00 6E 
3406a     00 6E 00 6E 
3406e     00 6E 00 6E 
34072     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
34076     00 6E 00 6E 
3407a     00 6E 00 6E 
3407e     00 6E 00 6E 
34082     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
34086     00 6E 00 6E 
3408a     00 6E 00 6E 
3408e     00 6E 00 6E 
34092     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
34096     00 6E 00 6D 
3409a     00 6D 00 6D 
3409e     00 6D 00 6D 
340a2     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
340a6     00 6D 00 6D 
340aa     00 6D 00 6D 
340ae     00 6D 00 6D 
340b2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
340b6     00 6D 00 6D 
340ba     00 6D 00 6D 
340be     00 6D 00 6D 
340c2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
340c6     00 6D 00 6D 
340ca     00 6D 00 6D 
340ce     00 6D 00 6D 
340d2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
340d6     00 6D 00 6D 
340da     00 6D 00 6D 
340de     00 6D 00 6D 
340e2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
340e6     00 6D 00 6D 
340ea     00 6D 00 6D 
340ee     00 6D 00 6D 
340f2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
340f6     00 6D 00 6D 
340fa     00 6D 00 6D 
340fe     00 6D 00 6D 
34102     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34106     00 6D 00 6D 
3410a     00 6D 00 6D 
3410e     00 6D 00 6D 
34112     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34116     00 6D 00 6D 
3411a     00 6D 00 6D 
3411e     00 6D 00 6D 
34122     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34126     00 6D 00 6D 
3412a     00 6D 00 6D 
3412e     00 6D 00 6D 
34132     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34136     00 6D 00 6D 
3413a     00 6D 00 6D 
3413e     00 6D 00 6D 
34142     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34146     00 6D 00 6D 
3414a     00 6C 00 6C 
3414e     00 6C 00 6C 
34152     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34156     00 6C 00 6C 
3415a     00 6C 00 6C 
3415e     00 6C 00 6C 
34162     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34166     00 6C 00 6C 
3416a     00 6C 00 6C 
3416e     00 9D 00 9F 
34172     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
34176     00 9F 00 9F 
3417a     00 9F 00 9F 
3417e     00 A0 00 A0 
34182     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34186     00 A0 00 A0 
3418a     00 A0 00 A0 
3418e     00 A0 00 A0 
34192     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34196     00 A0 00 A0 
3419a     00 A0 00 A0 
3419e     00 A0 00 A0 
341a2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
341a6     00 A0 00 A0 
341aa     00 A0 00 A0 
341ae     00 A0 00 A0 
341b2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
341b6     00 A0 00 A0 
341ba     00 A0 00 A0 
341be     00 A0 00 A0 
341c2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
341c6     00 A0 00 A0 
341ca     00 A0 00 A0 
341ce     00 A0 00 A0 
341d2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
341d6     00 A0 00 A0 
341da     00 A0 00 A0 
341de     00 A0 00 A0 
341e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
341e6     00 A0 00 A0 
341ea     00 A0 00 A0 
341ee     00 A0 00 A0 
341f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
341f6                 | 
341f6     00 00       |              	org
341f8 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
341fc 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
34200 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
34204 003             | 
34204 003 00 30 04 F6 |                 mov     psramaddr,#0
34208 004             | 
34208 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
3420c 005 20 00 00 FF 
34210 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
34214 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
34218 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
3421c 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
34220 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
34224 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
34228 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
3422c 00d             | 
3422c 00d 20 00 00 FF 
34230 00e 00 30 04 F1 |                 add 	psramaddr,##16384
34234 00f E0 03 00 FF 
34238 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
3423c 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
34240 012             | 
34240 012             |                 
34240 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
34244 013             |     
34244 013 01 2C 60 FD |                 cogid 	t11				' get id
34248 014 00 00 EC FC |                 coginit #0,#0				' start the new program
3424c 015 03 2C 60 FD |                 cogstop t11				' stop the loader
34250 016             | 
34250 016 00 00 00 00 | t11 		long 	0
34254 017 00 FF 07 00 | mailbox 	long 	$7FF00
34258 018 00 00 00 00 | psramaddr 	long 	0
3425c 019 00 00 00 00 | pslockval	long 	0
34260 01a 00 00 00 00 | cmd             long    0
34264 01b 00 00 00 00 | buf1            long    0
34268 01c 00 40 00 00 | buf2            long    16384
3426c 01d 70 42 03 00 | 	long	@@@_dat_ + 12624
34270 01e 50 32 20 52 
34274 01f 65 74 72 6F 
34278 020 6D 61 63 68 
3427c 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
34280 022 42 41 53 49 
34284 023 43 20 76 65 
34288 024 72 73 69 6F 
3428c 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
34290 026 33 30 00 00 | 	byte	$33, $30, $00, $00
34294 027             | 	alignl
34294 027             | _hg010b_spin2_dat_
34294 027             | 
34294 027 00 00 00 00 
34298 028 00 00 00 00 
3429c 029 00 00 00 00 
342a0 02a 00 00 00 00 
342a4 02b 00 00 00    | vga_font       file "vgafont.def"
342a7 02b 7E 81 A5 81 
342ab 02c 81 BD 99 81 
342af 02d 81 7E 00 00 
342b3 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
342b7 02f 7E FF DB FF 
342bb 030 FF C3 E7 FF 
342bf 031 FF 7E 00 00 
342c3 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
342c7 033 00 36 7F 7F 
342cb 034 7F 7F 3E 1C 
342cf 035 08 00 00 00 
342d3 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
342d7 037 00 08 1C 3E 
342db 038 7F 3E 1C 08 
342df 039 00 00 00 00 
342e3 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
342e7 03b 18 3C 3C E7 
342eb 03c E7 E7 18 18 
342ef 03d 3C 00 00 00 
342f3 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
342f7 03f 18 3C 7E FF 
342fb 040 FF 7E 18 18 
342ff 041 3C 00 00 00 
34303 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
34307 043 00 00 00 18 
3430b 044 3C 3C 18 00 
3430f 045 00 00 00 00 
34313 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
34317 047 FF FF FF E7 
3431b 048 C3 C3 E7 FF 
3431f 049 FF FF FF FF 
34323 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
34327 04b 00 00 3C 66 
3432b 04c 42 42 66 3C 
3432f 04d 00 00 00 00 
34333 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
34337 04f FF FF C3 99 
3433b 050 BD BD 99 C3 
3433f 051 FF FF FF FF 
34343 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
34347 053 78 70 58 4C 
3434b 054 1E 33 33 33 
3434f 055 33 1E 00 00 
34353 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
34357 057 3C 66 66 66 
3435b 058 66 3C 18 7E 
3435f 059 18 18 00 00 
34363 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
34367 05b FC CC FC 0C 
3436b 05c 0C 0C 0C 0E 
3436f 05d 0F 07 00 00 
34373 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
34377 05f FE C6 FE C6 
3437b 060 C6 C6 C6 E6 
3437f 061 E7 67 03 00 
34383 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
34387 063 18 18 DB 3C 
3438b 064 E7 3C DB 18 
3438f 065 18 00 00 00 
34393 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
34397 067 03 07 0F 1F 
3439b 068 7F 1F 0F 07 
3439f 069 03 01 00 00 
343a3 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
343a7 06b 60 70 78 7C 
343ab 06c 7F 7C 78 70 
343af 06d 60 40 00 00 
343b3 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
343b7 06f 18 3C 7E 18 
343bb 070 18 18 7E 3C 
343bf 071 18 00 00 00 
343c3 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
343c7 073 66 66 66 66 
343cb 074 66 66 66    | 	byte	$66[7]
343ce 075 00 66 66 00 
343d2 076 00 00 00 00 
343d6 077 00 FE DB DB 
343da 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
343de 079 D8 D8 D8 00 
343e2 07a 00 00 00 3E 
343e6 07b 63 06 1C 36 
343ea 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
343ee 07d 30 63 3E 00 
343f2 07e 00 00 00 00 
343f6 07f 00 00 00 00 
343fa 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
343fe 081 7F 7F 7F 00 
34402 082 00 00 00 00 
34406 083 00 18 3C 7E 
3440a 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
3440e 085 3C 18 7E 00 
34412 086 00 00 00 00 
34416 087 00 18 3C 7E 
3441a 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
3441e 089 18 18 18 00 
34422 08a 00 00 00 00 
34426 08b 00 18 18 18 
3442a 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3442e 08d 7E 3C 18 00 
34432 08e 00 00 00 00 
34436 08f 00 00 00 18 
3443a 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
3443e 091 00 00 00 00 
34442 092 00 00 00 00 
34446 093 00 00 00    | 	byte	$00[11]
34449 094 0C 06 7F 06 
3444d 095 0C 00 00 00 
34451 096 00 00 00 00 
34455 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34459 098 00 03 03 03 
3445d 099 7F 00 00 00 
34461 09a 00 00 00 00 
34465 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34469 09c 14 36 7F 36 
3446d 09d 14 00 00 00 
34471 09e 00 00 00 00 
34475 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
34479 0a0 1C 1C 3E 3E 
3447d 0a1 7F 7F 00 00 
34481 0a2 00 00 00 00 
34485 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
34489 0a4 7F 3E 3E 1C 
3448d 0a5 1C 08 00 00 
34491 0a6 00 00 00 00 
34495 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34499 0a8 00 00 00 00 
3449d 0a9 00 00 00 00 
344a1 0aa 00 00 00 00 
344a5 0ab 00 00       | 	byte	$00[14]
344a7 0ab 18 3C 3C 3C 
344ab 0ac 18 18 18 00 
344af 0ad 18 18 00 00 
344b3 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
344b7 0af 66 24 00 00 
344bb 0b0 00 00 00 00 
344bf 0b1 00 00 00 00 
344c3 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
344c7 0b3 00 36 36 7F 
344cb 0b4 36 36 36 7F 
344cf 0b5 36 36 00 00 
344d3 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
344d7 0b7 3E 63 43 03 
344db 0b8 3E 60 60 61 
344df 0b9 63 3E 18 18 
344e3 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
344e7 0bb 00 00 43 63 
344eb 0bc 30 18 0C 06 
344ef 0bd 63 61 00 00 
344f3 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
344f7 0bf 1C 36 36 1C 
344fb 0c0 6E 3B 33 33 
344ff 0c1 33 6E 00 00 
34503 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
34507 0c3 0C 0C 0C 06 
3450b 0c4 00 00 00 00 
3450f 0c5 00 00 00 00 
34513 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34517 0c7 30 18 0C 0C 
3451b 0c8 0C 0C 0C 0C 
3451f 0c9 18 30 00 00 
34523 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
34527 0cb 0C 18 30 30 
3452b 0cc 30 30 30 30 
3452f 0cd 18 0C 00 00 
34533 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
34537 0cf 00 00 00 66 
3453b 0d0 3C FF 3C 66 
3453f 0d1 00 00 00 00 
34543 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
34547 0d3 00 00 00 18 
3454b 0d4 18 7E 18 18 
3454f 0d5 00 00 00 00 
34553 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
34557 0d7 00 00 00 00 
3455b 0d8 00 00 00 00 | 	byte	$00[8]
3455f 0d9 18 18 18 0C 
34563 0da 00 00 00 00 
34567 0db 00 00 00 00 
3456b 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
3456f 0dd 00 00 00 00 
34573 0de 00 00 00 00 
34577 0df 00 00 00 00 
3457b 0e0 00 00 00 00 | 	byte	$00[16]
3457f 0e1 18 18 00 00 
34583 0e2 00 00 00 00 
34587 0e3 00 00 40 60 
3458b 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
3458f 0e5 03 01 00 00 
34593 0e6 00 00 00 00 
34597 0e7 1C 36 63 63 
3459b 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
3459f 0e9 36 1C 00 00 
345a3 0ea 00 00 00 00 
345a7 0eb 18 1C 1E 18 
345ab 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
345af 0ed 18 7E 00 00 
345b3 0ee 00 00 00 00 
345b7 0ef 3E 63 60 30 
345bb 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
345bf 0f1 63 7F 00 00 
345c3 0f2 00 00 00 00 
345c7 0f3 3E 63 60 60 
345cb 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
345cf 0f5 63 3E 00 00 
345d3 0f6 00 00 00 00 
345d7 0f7 30 38 3C 36 
345db 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
345df 0f9 30 78 00 00 
345e3 0fa 00 00 00 00 
345e7 0fb 7F 03 03 03 
345eb 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
345ef 0fd 63 3E 00 00 
345f3 0fe 00 00 00 00 
345f7 0ff 1C 06 03 03 
345fb 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
345ff 101 63 3E 00 00 
34603 102 00 00 00 00 
34607 103 7F 63 60 60 
3460b 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
3460f 105 0C 0C 00 00 
34613 106 00 00 00 00 
34617 107 3E 63 63 63 
3461b 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
3461f 109 63 3E 00 00 
34623 10a 00 00 00 00 
34627 10b 3E 63 63 63 
3462b 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
3462f 10d 30 1E 00 00 
34633 10e 00 00 00 00 
34637 10f 00 00 00 18 
3463b 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3463f 111 18 18 00 00 
34643 112 00 00 00 00 
34647 113 00 00 00 18 
3464b 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3464f 115 18 18 0C 00 
34653 116 00 00 00 00 
34657 117 00 60 30 18 
3465b 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
3465f 119 30 60 00 00 
34663 11a 00 00 00 00 
34667 11b 00 00 00 7E 
3466b 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
3466f 11d 00 00 00 00 
34673 11e 00 00 00 00 
34677 11f 00          | 	byte	$00[9]
34678 120 06 0C 18 30 
3467c 121 60 30 18 0C 
34680 122 06 00 00 00 
34684 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
34688 124 63 63 30 18 
3468c 125 18 18 00 18 
34690 126 18 00 00 00 
34694 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
34698 128 3E 63 63 7B 
3469c 129 7B 7B 3B 03 
346a0 12a 3E 00 00 00 
346a4 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
346a8 12c 1C 36 63 63 
346ac 12d 7F 63 63 63 
346b0 12e 63 00 00 00 
346b4 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
346b8 130 66 66 66 3E 
346bc 131 66 66 66 66 
346c0 132 3F 00 00 00 
346c4 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
346c8 134 66 43 03 03 
346cc 135 03 03 43 66 
346d0 136 3C 00 00 00 
346d4 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
346d8 138 36 66 66 66 
346dc 139 66 66 66 36 
346e0 13a 1F 00 00 00 
346e4 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
346e8 13c 66 46 16 1E 
346ec 13d 16 06 46 66 
346f0 13e 7F 00 00 00 
346f4 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
346f8 140 66 46 16 1E 
346fc 141 16 06 06 06 
34700 142 0F 00 00 00 
34704 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
34708 144 66 43 03 03 
3470c 145 7B 63 63 66 
34710 146 5C 00 00 00 
34714 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
34718 148 63 63 63 7F 
3471c 149 63 63 63 63 
34720 14a 63 00 00 00 
34724 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
34728 14c 18 18 18 18 
3472c 14d 18 18 18 18 | 	byte	$18[8]
34730 14e 3C 00 00 00 
34734 14f 00 00 00 78 
34738 150 30 30 30 30 
3473c 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
34740 152 1E 00 00 00 
34744 153 00 00 00 67 
34748 154 66 66 36 1E 
3474c 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
34750 156 67 00 00 00 
34754 157 00 00 00 0F 
34758 158 06 06 06 06 
3475c 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
34760 15a 7F 00 00 00 
34764 15b 00 00 00 63 
34768 15c 77 7F 7F 6B 
3476c 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
34770 15e 63 00 00 00 
34774 15f 00 00 00 63 
34778 160 67 6F 7F 7B 
3477c 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
34780 162 63 00 00 00 
34784 163 00 00 00 3E 
34788 164 63 63 63 63 
3478c 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
34790 166 3E 00 00 00 
34794 167 00 00 00 3F 
34798 168 66 66 66 3E 
3479c 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
347a0 16a 0F 00 00 00 
347a4 16b 00 00 00 3E 
347a8 16c 63 63 63 63 
347ac 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
347b0 16e 3E 30 70 00 
347b4 16f 00 00 00 3F 
347b8 170 66 66 66 3E 
347bc 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
347c0 172 67 00 00 00 
347c4 173 00 00 00 3E 
347c8 174 63 63 06 1C 
347cc 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
347d0 176 3E 00 00 00 
347d4 177 00 00 00 7E 
347d8 178 7E 5A 18 18 
347dc 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
347e0 17a 3C 00 00 00 
347e4 17b 00 00 00 63 
347e8 17c 63 63 63 63 
347ec 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
347f0 17e 3E 00 00 00 
347f4 17f 00 00 00 63 
347f8 180 63 63 63 63 
347fc 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
34800 182 08 00 00 00 
34804 183 00 00 00 63 
34808 184 63 63 63 6B 
3480c 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
34810 186 36 00 00 00 
34814 187 00 00 00 63 
34818 188 63 36 3E 1C 
3481c 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
34820 18a 63 00 00 00 
34824 18b 00 00 00 66 
34828 18c 66 66 66 3C 
3482c 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
34830 18e 3C 00 00 00 
34834 18f 00 00 00 7F 
34838 190 63 61 30 18 
3483c 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
34840 192 7F 00 00 00 
34844 193 00 00 00 3C 
34848 194 0C 0C 0C 0C 
3484c 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
34850 196 3C 00 00 00 
34854 197 00 00 00 00 
34858 198 01 03 07 0E 
3485c 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
34860 19a 40 00 00 00 
34864 19b 00 00 00 3C 
34868 19c 30 30 30 30 
3486c 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
34870 19e 3C 00 00 00 
34874 19f 1C 36 00 00 
34878 1a0 00 00 00 00 
3487c 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34880 1a2 00 00 00 00 
34884 1a3 00 00 00 00 
34888 1a4 00 00 00 00 
3488c 1a5 00 00 00 00 
34890 1a6 00          | 	byte	$00[17]
34891 1a6 FF 00 00 0C 
34895 1a7 18 00 00 00 
34899 1a8 00 00 00 00 
3489d 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
348a1 1aa 00 00 00 00 
348a5 1ab 00 00 00 00 
348a9 1ac 00          | 	byte	$00[9]
348aa 1ac 1E 30 3E 33 
348ae 1ad 33 33 6E 00 
348b2 1ae 00 00 00 00 
348b6 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
348ba 1b0 1E 36 66 66 
348be 1b1 66 66 3E 00 
348c2 1b2 00 00 00 00 
348c6 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
348ca 1b4 3E 63 03 03 
348ce 1b5 03 63 3E 00 
348d2 1b6 00 00 00 00 
348d6 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
348da 1b8 3C 36 33 33 
348de 1b9 33 33 6E 00 
348e2 1ba 00 00 00 00 
348e6 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
348ea 1bc 3E 63 7F 03 
348ee 1bd 03 63 3E 00 
348f2 1be 00 00 00 00 
348f6 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
348fa 1c0 0C 1E 0C 0C 
348fe 1c1 0C 0C 1E 00 
34902 1c2 00 00 00 00 
34906 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3490a 1c4 6E 33 33 33 
3490e 1c5 33 33 3E 30 
34912 1c6 33 1E 00 00 
34916 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
3491a 1c8 36 6E 66 66 
3491e 1c9 66 66 67 00 
34922 1ca 00 00 00 00 
34926 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
3492a 1cc 1C 18 18 18 
3492e 1cd 18 18 3C 00 
34932 1ce 00 00 00 00 
34936 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
3493a 1d0 70 60 60 60 
3493e 1d1 60 60 60 66 
34942 1d2 66 3C 00 00 
34946 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
3494a 1d4 66 36 1E 1E 
3494e 1d5 36 66 67 00 
34952 1d6 00 00 00 00 
34956 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
3495a 1d8 18 18 18 18 
3495e 1d9 18 18       | 	byte	$18[6]
34960 1da 3C 00 00 00 
34964 1db 00 00 00 00 
34968 1dc 00 00 37 7F 
3496c 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
34970 1de 63 00 00 00 
34974 1df 00 00 00 00 
34978 1e0 00 00 3B 66 
3497c 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
34980 1e2 66 00 00 00 
34984 1e3 00 00 00 00 
34988 1e4 00 00 3E 63 
3498c 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
34990 1e6 3E 00 00 00 
34994 1e7 00 00 00 00 
34998 1e8 00 00 3B 66 
3499c 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
349a0 1ea 3E 06 06 0F 
349a4 1eb 00 00 00 00 
349a8 1ec 00 00 6E 33 
349ac 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
349b0 1ee 3E 30 30 78 
349b4 1ef 00 00 00 00 
349b8 1f0 00 00 3B 6E 
349bc 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
349c0 1f2 0F 00 00 00 
349c4 1f3 00 00 00 00 
349c8 1f4 00 00 3E 63 
349cc 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
349d0 1f6 3E 00 00 00 
349d4 1f7 00 00 00 08 
349d8 1f8 0C 0C 3F 0C 
349dc 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
349e0 1fa 38 00 00 00 
349e4 1fb 00 00 00 00 
349e8 1fc 00 00 33 33 
349ec 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
349f0 1fe 6E 00 00 00 
349f4 1ff 00 00 00 00 
349f8 200 00 00 63 63 
349fc 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
34a00 202 1C 00 00 00 
34a04 203 00 00 00 00 
34a08 204 00 00 63 63 
34a0c 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
34a10 206 36 00 00 00 
34a14 207 00 00 00 00 
34a18 208 00 00 63 36 
34a1c 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
34a20 20a 63 00 00 00 
34a24 20b 00 00 00 00 
34a28 20c 00 00 63 63 
34a2c 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
34a30 20e 7E 60 30 1F 
34a34 20f 00 00 00 00 
34a38 210 00 00 7F 33 
34a3c 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
34a40 212 7F 00 00 00 
34a44 213 00 00 00 70 
34a48 214 18 18 18 0E 
34a4c 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
34a50 216 70 00 00 00 
34a54 217 00 00 00 18 
34a58 218 18 18 18 18 
34a5c 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
34a60 21a 18 00 00 00 
34a64 21b 00 00 00 0E 
34a68 21c 18 18 18 70 
34a6c 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
34a70 21e 0E 00 00 00 
34a74 21f 6E 3B 00 00 
34a78 220 00 00 00 00 
34a7c 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34a80 222 00 00 00 00 
34a84 223 00 00 00 00 
34a88 224 00 00       | 	byte	$00[10]
34a8a 224 08 1C 36 63 
34a8e 225 63 63 7F 00 
34a92 226 00 00 00 00 
34a96 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
34a9a 228 03 03 03 03 
34a9e 229 43 66 3C 18 
34aa2 22a 30 1E 00 00 
34aa6 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
34aaa 22c 33 33 33 33 
34aae 22d 33 33       | 	byte	$33[6]
34ab0 22e 6E 00 00 00 
34ab4 22f 00 00 60 30 
34ab8 230 18 00 3E 63 
34abc 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
34ac0 232 3E 00 00 00 
34ac4 233 00 00 08 1C 
34ac8 234 36 00 1E 30 
34acc 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
34ad0 236 6E 00 00 00 
34ad4 237 00 00 00 00 
34ad8 238 33 00 1E 30 
34adc 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
34ae0 23a 6E 00 00 00 
34ae4 23b 00 00 1C 36 
34ae8 23c 1C 00 33 33 
34aec 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
34af0 23e 6E 00 00 00 
34af4 23f 00 00 60 30 
34af8 240 18 00 3E 63 
34afc 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
34b00 242 3E 00 00 00 
34b04 243 00 00 00 00 
34b08 244 00 00 3E 63 
34b0c 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
34b10 246 3E 18 30 1E 
34b14 247 00 00 00 1C 
34b18 248 58 78 38 18 
34b1c 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
34b20 24a 3C 00 00 00 
34b24 24b 00 00 00 00 
34b28 24c 63 00 3E 63 
34b2c 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
34b30 24e 3E 00 00 00 
34b34 24f 66 33 00 3E 
34b38 250 63 63 63 63 
34b3c 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
34b40 252 3E 00 00 00 
34b44 253 00 00 CC 66 
34b48 254 33 00 3E 63 
34b4c 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
34b50 256 3E 00 00 00 
34b54 257 00 00 18 3C 
34b58 258 66 00 1C 18 
34b5c 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
34b60 25a 3C 00 00 00 
34b64 25b 30 18 00 7F 
34b68 25c 63 61 30 18 
34b6c 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
34b70 25e 7F 00 00 00 
34b74 25f 00 63 00 08 
34b78 260 1C 36 63 63 
34b7c 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
34b80 262 63 00 00 00 
34b84 263 30 18 00 3C 
34b88 264 66 43 03 03 
34b8c 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
34b90 266 3C 00 00 00 
34b94 267 30 18 00 7F 
34b98 268 66 46 16 1E 
34b9c 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
34ba0 26a 7F 00 00 00 
34ba4 26b 0C 06 00 0F 
34ba8 26c 06 06 06 06 
34bac 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
34bb0 26e 7F 00 00 00 
34bb4 26f 30 18 00 1C 
34bb8 270 18 18 18 18 
34bbc 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
34bc0 272 3C 00 00 00 
34bc4 273 00 00 08 1C 
34bc8 274 36 00 3E 63 
34bcc 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
34bd0 276 3E 00 00 00 
34bd4 277 00 00 00 00 
34bd8 278 63 00 3E 63 
34bdc 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
34be0 27a 3E 00 00 00 
34be4 27b 00 00 00 6F 
34be8 27c 46 26 06 06 
34bec 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
34bf0 27e 7F 00 00 00 
34bf4 27f 00 00 00 6E 
34bf8 280 4C 2C 0C 0C 
34bfc 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
34c00 282 1E 00 00 00 
34c04 283 30 18 00 3E 
34c08 284 63 63 06 1C 
34c0c 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
34c10 286 3E 00 00 00 
34c14 287 00 00 60 30 
34c18 288 18 00 3E 63 
34c1c 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
34c20 28a 3E 00 00 00 
34c24 28b 00 63 00 3E 
34c28 28c 63 63 63 63 
34c2c 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
34c30 28e 3E 00 00 00 
34c34 28f 00 63 00 63 
34c38 290 63 63 63 63 
34c3c 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
34c40 292 3E 00 00 00 
34c44 293 6C 38 00 7E 
34c48 294 7E 5A 18 18 
34c4c 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
34c50 296 3C 00 00 00 
34c54 297 00 00 60 48 
34c58 298 2C 0C 3F 0C 
34c5c 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
34c60 29a 38 00 00 00 
34c64 29b 00 00 00 0F 
34c68 29c 26 36 1E 0E 
34c6c 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
34c70 29e 7F 00 00 00 
34c74 29f 00 00 00 00 
34c78 2a0 00 63 36 1C 
34c7c 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
34c80 2a2 00 00 00 00 
34c84 2a3 00 00       | 	byte	$00[6]
34c86 2a3 36 1C 08 00 
34c8a 2a4 3E 63 03 03 
34c8e 2a5 03 63 3E 00 
34c92 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
34c96 2a7 30 18 0C 00 
34c9a 2a8 1E 30 3E 33 
34c9e 2a9 33 33 6E 00 
34ca2 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
34ca6 2ab 60 30 18 00 
34caa 2ac 1C 18 18 18 
34cae 2ad 18 18 3C 00 
34cb2 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
34cb6 2af 60 30 18 00 
34cba 2b0 3E 63 63 63 
34cbe 2b1 63 63 3E 00 
34cc2 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
34cc6 2b3 30 18 0C 00 
34cca 2b4 33 33 33 33 
34cce 2b5 33 33 6E 00 
34cd2 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
34cd6 2b7 00 08 1C 36 
34cda 2b8 63 63 7F 63 
34cde 2b9 63 63 63 18 
34ce2 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
34ce6 2bb 00 00 00 00 
34cea 2bc 1E 30 3E 33 
34cee 2bd 33 33 6E 18 
34cf2 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
34cf6 2bf 00 7F 63 61 
34cfa 2c0 30 18 0C 06 
34cfe 2c1 43 63 7F 00 
34d02 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
34d06 2c3 36 1C 08 00 
34d0a 2c4 7F 33 18 0C 
34d0e 2c5 06 63 7F 00 
34d12 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
34d16 2c7 00 7F 66 46 
34d1a 2c8 16 1E 16 06 
34d1e 2c9 46 66 7F 18 
34d22 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
34d26 2cb 00 00 00 00 
34d2a 2cc 3E 63 7F 03 
34d2e 2cd 03 63 3E 18 
34d32 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
34d36 2cf 00 3C 66 03 
34d3a 2d0 1F 03 0F 03 
34d3e 2d1 03 66 3C 00 
34d42 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
34d46 2d3 60 30 18 00 
34d4a 2d4 7F 33 18 0C 
34d4e 2d5 06 63 7F 00 
34d52 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
34d56 2d7 00 3C 66 43 
34d5a 2d8 03 03 03 03 
34d5e 2d9 43 66 3C 00 
34d62 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
34d66 2db 00 00 00 00 
34d6a 2dc 3E 63 06 1C 
34d6e 2dd 30 63 3E 18 
34d72 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
34d76 2df 00 00 00 00 
34d7a 2e0 00 00       | 	byte	$00[6]
34d7c 2e1 6C 36 1B 36 
34d80 2e2 6C 00 00 00 
34d84 2e3 00 00 00 00 
34d88 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34d8c 2e5 1B 36 6C 36 
34d90 2e6 1B 00 00 00 
34d94 2e7 88 22 88 22 
34d98 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
34d9c 2e9 88 22 88 22 
34da0 2ea 88 22 88 22 
34da4 2eb AA 55 AA 55 
34da8 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
34dac 2ed AA 55 AA 55 
34db0 2ee AA 55 AA 55 
34db4 2ef BB EE BB EE 
34db8 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
34dbc 2f1 BB EE BB EE 
34dc0 2f2 BB EE BB EE 
34dc4 2f3 18 18 18 18 
34dc8 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
34dcc 2f5 18 18 18 18 
34dd0 2f6 18 18 18 18 
34dd4 2f7 18 18 18 18 
34dd8 2f8 18 18 18    | 	byte	$18[15]
34ddb 2f8 1F 18 18 18 
34ddf 2f9 18 18 18 18 
34de3 2fa 18 30 18 00 
34de7 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
34deb 2fc 63 7F 63 63 
34def 2fd 63 63 00 00 
34df3 2fe 00 1C 36 00 
34df7 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
34dfb 300 63 7F 63 63 
34dff 301 63 63 00 00 
34e03 302 00 36 1C 00 
34e07 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
34e0b 304 1E 16 06 46 
34e0f 305 66 7F 00 00 
34e13 306 00 00 00 00 
34e17 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
34e1b 308 1C 30 60 63 
34e1f 309 63 3E 18 30 
34e23 30a 1E 6C 6C 6C 
34e27 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
34e2b 30c 6F 6C 6C 6C 
34e2f 30d 6C 6C 6C 6C 
34e33 30e 6C 6C 6C 6C 
34e37 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34e3b 310 6C 6C 6C 6C 
34e3f 311 6C 6C 6C 6C 
34e43 312 6C          | 	byte	$6c[9]
34e44 313 00 00 00 00 
34e48 314 00          | 	byte	$00[5]
34e49 314 7F 60 6F 6C 
34e4d 315 6C 6C 6C 6C 
34e51 316 6C 6C 6C 6C 
34e55 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34e59 318 6F 60 7F 00 
34e5d 319 00 00 00 00 
34e61 31a 00 00 00 18 
34e65 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
34e69 31c 61 30 18 0C 
34e6d 31d 06 43 63 7F 
34e71 31e 00 00 00 00 
34e75 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
34e79 320 00 7F 33 18 
34e7d 321 0C 06 63 7F 
34e81 322 00 00 00 00 
34e85 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
34e89 324 00 00 1F 18 
34e8d 325 18 18 18 18 
34e91 326 18 18 18 18 
34e95 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
34e99 328 18 18 F8 00 
34e9d 329 00 00 00 00 
34ea1 32a 00 00 00 18 
34ea5 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
34ea9 32c 18 18 FF 00 
34ead 32d 00 00 00 00 
34eb1 32e 00 00 00 00 
34eb5 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34eb9 330 00 00 FF 18 
34ebd 331 18 18 18 18 
34ec1 332 18 18 18 18 
34ec5 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
34ec9 334 18 18 F8 18 
34ecd 335 18 18 18 18 
34ed1 336 18 18 18 00 
34ed5 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
34ed9 338 00 00 FF 00 
34edd 339 00 00 00 00 
34ee1 33a 00 00 00 18 
34ee5 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
34ee9 33c 18 18 FF 18 
34eed 33d 18 18 18 18 
34ef1 33e 18 18 18 63 
34ef5 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
34ef9 340 36 63 63 7F 
34efd 341 63 63 63 63 
34f01 342 00 00 00 00 
34f05 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
34f09 344 00 1E 30 3E 
34f0d 345 33 33 33 6E 
34f11 346 00 00 00 6C 
34f15 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
34f19 348 EC 0C FC 00 
34f1d 349 00 00 00 00 
34f21 34a 00 00 00 00 
34f25 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34f29 34c FC 0C EC 6C 
34f2d 34d 6C 6C 6C 6C 
34f31 34e 6C 6C 6C 6C 
34f35 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34f39 350 EF 00 FF 00 
34f3d 351 00 00 00 00 
34f41 352 00 00 00 00 
34f45 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34f49 354 FF 00 EF 6C 
34f4d 355 6C 6C 6C 6C 
34f51 356 6C 6C 6C 6C 
34f55 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
34f59 358 EC 0C EC 6C 
34f5d 359 6C 6C 6C 6C 
34f61 35a 6C 6C 6C 00 
34f65 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
34f69 35c FF 00 FF 00 
34f6d 35d 00 00 00 00 
34f71 35e 00 00 00 6C 
34f75 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
34f79 360 EF 00 EF 6C 
34f7d 361 6C 6C 6C 6C 
34f81 362 6C 6C 6C 00 
34f85 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
34f89 364 63 3E 63 63 
34f8d 365 63 63 3E 63 
34f91 366 00 00 00 00 
34f95 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
34f99 368 30 3C 36 33 
34f9d 369 33 33 33 6E 
34fa1 36a 00 00 00 00 
34fa5 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
34fa9 36c 66 66 6F 66 
34fad 36d 66 66 36 1F 
34fb1 36e 00 00 00 36 
34fb5 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
34fb9 370 66 66 66 66 
34fbd 371 66 66       | 	byte	$66[6]
34fbf 371 36 1F 00 00 
34fc3 372 00 00 63 00 
34fc7 373 7F 66 46 16 
34fcb 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
34fcf 375 66 7F 00 00 
34fd3 376 00 6C 38 00 
34fd7 377 38 30 30 3C 
34fdb 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
34fdf 379 33 6E 00 00 
34fe3 37a 00 36 1C 00 
34fe7 37b 63 67 6F 7F 
34feb 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
34fef 37d 63 63 00 00 
34ff3 37e 00 30 18 00 
34ff7 37f 3C 18 18 18 
34ffb 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
34fff 381 18 3C 00 00 
35003 382 00 3C 66 00 
35007 383 3C 18 18 18 
3500b 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3500f 385 18 3C 00 00 
35013 386 00 00 00 36 
35017 387 1C 08 00 3E 
3501b 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
3501f 389 63 3E 00 00 
35023 38a 00 18 18 18 
35027 38b 18 18 18 18 
3502b 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
3502f 38d 00 00 00 00 
35033 38e 00 00 00 00 
35037 38f 00 00 00 00 | 	byte	$00[12]
3503b 390 F8 18 18 18 
3503f 391 18 18 18 18 
35043 392 18 FF FF FF 
35047 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
3504b 394 FF FF FF FF 
3504f 395 FF FF FF FF 
35053 396 FF          | 	byte	$ff[9]
35054 397 00 00 00 00 
35058 398 00 00 00    | 	byte	$00[7]
3505b 398 FF FF FF FF 
3505f 399 FF FF FF FF 
35063 39a FF          | 	byte	$ff[9]
35064 39b 00 00 00 7E 
35068 39c 7E 5A 18 18 
3506c 39d 18 18 18 18 
35070 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
35074 39f 1C 36 1C 63 
35078 3a0 63 63 63 63 
3507c 3a1 63 63 63 63 
35080 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
35084 3a3 FF FF FF FF 
35088 3a4 FF FF FF    | 	byte	$ff[7]
3508b 3a4 00 00 00 00 
3508f 3a5 00 00 00 00 
35093 3a6 00          | 	byte	$00[9]
35094 3a7 30 18 00 3E 
35098 3a8 63 63 63 63 
3509c 3a9 63 63 63 63 
350a0 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
350a4 3ab 00 00 00 1E 
350a8 3ac 33 33 33 1B 
350ac 3ad 33 63 63 63 
350b0 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
350b4 3af 1C 36 00 3E 
350b8 3b0 63 63 63 63 
350bc 3b1 63 63 63 63 
350c0 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
350c4 3b3 30 18 00 63 
350c8 3b4 67 6F 7F 7B 
350cc 3b5 73 63 63 63 
350d0 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
350d4 3b7 00 00 60 30 
350d8 3b8 18 00 3B 66 
350dc 3b9 66 66 66 66 
350e0 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
350e4 3bb 00 00 36 1C 
350e8 3bc 08 00 3B 66 
350ec 3bd 66 66 66 66 
350f0 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
350f4 3bf 36 1C 00 3E 
350f8 3c0 63 63 06 1C 
350fc 3c1 30 60 63 63 
35100 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
35104 3c3 00 00 36 1C 
35108 3c4 08 00 3E 63 
3510c 3c5 06 1C 30 63 
35110 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
35114 3c7 30 18 00 3F 
35118 3c8 66 66 66 3E 
3511c 3c9 36 66 66 66 
35120 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
35124 3cb 30 18 00 63 
35128 3cc 63 63 63 63 
3512c 3cd 63 63 63 63 
35130 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
35134 3cf 00 00 60 30 
35138 3d0 18 00 3B 6E 
3513c 3d1 66 06 06 06 
35140 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
35144 3d3 66 33 00 63 
35148 3d4 63 63 63 63 
3514c 3d5 63 63 63 63 
35150 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
35154 3d7 00 00 60 30 
35158 3d8 18 00 63 63 
3515c 3d9 63 63 63 63 
35160 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
35164 3db 30 18 00 66 
35168 3dc 66 66 66 3C 
3516c 3dd 18 18 18 18 
35170 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
35174 3df 00 00 00 08 
35178 3e0 0C 0C 3F 0C 
3517c 3e1 0C 0C 0C 6C 
35180 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
35184 3e3 30 18 00 00 
35188 3e4 00 00 00 00 
3518c 3e5 00 00 00 00 
35190 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35194 3e7 00 00 00 00 
35198 3e8 00 00 00 00 | 	byte	$00[8]
3519c 3e9 7F 00 00 00 
351a0 3ea 00 00 00 00 
351a4 3eb 66 33 00 00 
351a8 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
351ac 3ed 00 00 00 00 
351b0 3ee 00 00 00 00 
351b4 3ef 00 00 00 00 
351b8 3f0 00 00 00 00 
351bc 3f1 00 00 00 00 
351c0 3f2 00          | 	byte	$00[21]
351c1 3f2 0C 06 3C 36 
351c5 3f3 1C 00 00 00 
351c9 3f4 00 00 00 00 
351cd 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
351d1 3f6 00 00 00 63 
351d5 3f7 3E 00 00 00 
351d9 3f8 00 00 00 00 
351dd 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
351e1 3fa 00 00 00 00 
351e5 3fb 3E 63 06 1C 
351e9 3fc 36 63 63 36 
351ed 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
351f1 3fe 00 00 00 00 
351f5 3ff 00 00 00 00 | 	byte	$00[8]
351f9 400 18 00 7E 00 
351fd 401 18 00 00 00 
35201 402 00 00 00 00 
35205 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35209 404 00 00 00 00 
3520d 405 00 00 00 00 | 	byte	$00[8]
35211 406 18 30 1E 00 
35215 407 00 00 1C 36 
35219 408 36 1C 00 00 
3521d 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
35221 40a 00 00 00 00 
35225 40b 63 00 00 00 
35229 40c 00 00 00 00 
3522d 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35231 40e 00 00 00 18 
35235 40f 18 00 00 00 
35239 410 00 00 00 00 
3523d 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35241 412 00 00 00 00 
35245 413 00          | 	byte	$00[5]
35246 413 CC 66 33 00 
3524a 414 33 33 33 33 
3524e 415 33 33 6E 00 
35252 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
35256 417 00 3F 66 66 
3525a 418 66 3E 36 66 
3525e 419 66 66 6F 00 
35262 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
35266 41b 36 1C 08 00 
3526a 41c 3B 6E 66 06 
3526e 41d 06 06 0F 00 
35272 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
35276 41f 00 00 00 7E 
3527a 420 7E 7E 7E 7E 
3527e 421 7E 7E 00 00 
35282 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
35286 423 00 00 00 00 
3528a 424 00 00 00 00 
3528e 425 00 00 00 00 
35292 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35294 427             | 'vga_font       file "vgafont.def"
35294 427 00 00 00 00 
      ...             
352c4 433 00 00 00 00 
352c8 434 00 00 00    | st_font        file "st4font.def"
352cb 434 FF FF 00 00 
352cf 435 00 00 00 00 
352d3 436 00 18 18 18 
352d7 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
352db 438 18 18 18 18 
352df 439 18 18 18 18 
352e3 43a 18          | 	byte	$18[9]
352e4 43b 00 00 00 00 
352e8 43c 00 00 00    | 	byte	$00[7]
352eb 43c FF FF 18 18 
352ef 43d 18 18 18 18 
352f3 43e 18 18 18 18 
352f7 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
352fb 440 FF FF 00 00 
352ff 441 00 00 00 00 
35303 442 00 18 18 18 
35307 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3530b 444 1F 1F 18 18 
3530f 445 18 18 18 18 
35313 446 18 18 18 18 
35317 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3531b 448 F8 F8 18 18 
3531f 449 18 18 18 18 
35323 44a 18 00 00 00 
35327 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3532b 44c 1F 1F 18 18 
3532f 44d 18 18 18 18 
35333 44e 18 00 00 00 
35337 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3533b 450 F8 F8 18 18 
3533f 451 18 18 18 18 
35343 452 18 18 18 18 
35347 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3534b 454 1F 1F 00 00 
3534f 455 00 00 00 00 
35353 456 00 18 18 18 
35357 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3535b 458 F8 F8 00 00 
3535f 459 00 00 00 00 
35363 45a 00 18 18 18 
35367 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3536b 45c FF FF 18 18 
3536f 45d 18 18 18 18 
35373 45e 18 00 00 18 
35377 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
3537b 460 66 7E 7E 66 
3537f 461 66 66 66 30 
35383 462 18 00 00 7E 
35387 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
3538b 464 3E 06 06 06 
3538f 465 06 7E 7E 18 
35393 466 0C 30 18 3C 
35397 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
3539b 468 06 06 06 66 
3539f 469 66 7E 3C 00 
353a3 46a 00 30 18 66 
353a7 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
353ab 46c 7E 7E 76 76 
353af 46d 66 66 66 00 
353b3 46e 00 30 18 7C 
353b7 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
353bb 470 1C 38 70 60 
353bf 471 60 7E 3E 00 
353c3 472 00 30 18 7E 
353c7 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
353cb 474 18 0C 0C 06 
353cf 475 06 7E 7E 00 
353d3 476 00 18 18 00 
353d7 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
353db 478 18 18 0C 0C 
353df 479 06 7E 7E 00 
353e3 47a 00 30 18 3C 
353e7 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
353eb 47c 66 66 66 66 
353ef 47d 66          | 	byte	$66[5]
353f0 47e 7E 3C 00 00 
353f4 47f 00 00 06 06 
353f8 480 06 06 16 1E 
353fc 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
35400 482 7E 7E 00 00 
35404 483 00 00 00 00 
35408 484 00 3C 7C 60 
3540c 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
35410 486 7E 7C 30 18 
35414 487 00 00 00 00 
35418 488 00 3C 7E 66 
3541c 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
35420 48a 7E 7C 18 0C 
35424 48b 00 00 30 18 
35428 48c 00 3C 3E 06 
3542c 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
35430 48e 7E 7C 00 00 
35434 48f 00 00 30 18 
35438 490 00 3E 7E 66 
3543c 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
35440 492 66 66 00 00 
35444 493 00 00 30 18 
35448 494 00 7C 7E 06 
3544c 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
35450 496 7E 3E 00 00 
35454 497 00 00 30 18 
35458 498 00 7E 7E 30 
3545c 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
35460 49a 7E 7E 00 00 
35464 49b 00 00 18 18 
35468 49c 00 7E 7E 30 
3546c 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
35470 49e 7E 7E 00 00 
35474 49f 00 00 30 18 
35478 4a0 00 3C 7E 66 
3547c 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
35480 4a2 7E 3C 00 00 
35484 4a3 00 00 1C 1C 
35488 4a4 18 18 38 3C 
3548c 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
35490 4a6 3C 3C 00 00 
35494 4a7 00 00 00 00 
35498 4a8 00 00 00 00 
3549c 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
354a0 4aa 00 00 00 00 
354a4 4ab 00 00       | 	byte	$00[6]
354a6 4ab 18 18 18 18 
354aa 4ac 18 18 18 18 | 	byte	$18[8]
354ae 4ad 00 00 18 18 
354b2 4ae 00 00 00 00 
354b6 4af 66 66 66 66 
354ba 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
354be 4b1 00 00 00 00 
354c2 4b2 00 00 00 00 
354c6 4b3 00          | 	byte	$00[9]
354c7 4b3 66 66 FF FF 
354cb 4b4 66 66 FF FF 
354cf 4b5 66 66 00 00 
354d3 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
354d7 4b7 7C 7E 06 06 
354db 4b8 3E 7C 60 60 
354df 4b9 7E 3E 18 18 
354e3 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
354e7 4bb 66 30 30 18 
354eb 4bc 18 0C 0C 66 
354ef 4bd 66 00 00 00 
354f3 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
354f7 4bf 66 66 3C 1C 
354fb 4c0 1C FC FE 66 
354ff 4c1 66 FE FC 00 
35503 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
35507 4c3 18 18 18 18 
3550b 4c4 00 00 00 00 
3550f 4c5 00 00 00 00 
35513 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
35517 4c7 18 1C 0C 0C 
3551b 4c8 0C 0C 0C 0C 
3551f 4c9 1C 18 30 00 
35523 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
35527 4cb 18 38 30 30 
3552b 4cc 30 30 30 30 
3552f 4cd 38 18 0C 00 
35533 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
35537 4cf 66 66 3C 3C 
3553b 4d0 FF FF 3C 3C 
3553f 4d1 66 66 00 00 
35543 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
35547 4d3 00 18 18 18 
3554b 4d4 7E 7E 18 18 
3554f 4d5 18 00 00 00 
35553 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
35557 4d7 00 00 00 00 
3555b 4d8 00 00       | 	byte	$00[6]
3555d 4d9 18 18 18 18 
35561 4da 18          | 	byte	$18[5]
35562 4da 0C 04 00 00 
35566 4db 00 00 00 00 
3556a 4dc 7E 7E 00 00 
3556e 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
35572 4de 00 00 00 00 
35576 4df 00 00 00 00 
3557a 4e0 00 00 00 00 
3557e 4e1 00          | 	byte	$00[13]
3557f 4e1 18 18 18 00 
35583 4e2 00 00 00 60 
35587 4e3 60 60 30 30 
3558b 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3558f 4e5 06 06 06 00 
35593 4e6 00 00 00 3C 
35597 4e7 7E 66 66 66 
3559b 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3559f 4e9 66 7E 3C 00 
355a3 4ea 00 00 00 18 
355a7 4eb 18 1C 1C 18 
355ab 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
355af 4ed 18 7E 7E 00 
355b3 4ee 00 00 00 3C 
355b7 4ef 7E 66 66 30 
355bb 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
355bf 4f1 0C 7E 7E 00 
355c3 4f2 00 00 00 7E 
355c7 4f3 7E 30 30 18 
355cb 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
355cf 4f5 66 7E 3C 00 
355d3 4f6 00 00 00 30 
355d7 4f7 30 38 38 3C 
355db 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
355df 4f9 7E 30 30 00 
355e3 4fa 00 00 00 7E 
355e7 4fb 7E 06 06 3E 
355eb 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
355ef 4fd 66 7E 3C 00 
355f3 4fe 00 00 00 38 
355f7 4ff 3C 0E 06 06 
355fb 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
355ff 501 66 7E 3C 00 
35603 502 00 00 00 7E 
35607 503 7E 60 60 30 
3560b 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
3560f 505 0C 0C 0C 00 
35613 506 00 00 00 3C 
35617 507 7E 66 66 3C 
3561b 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
3561f 509 66 7E 3C 00 
35623 50a 00 00 00 3C 
35627 50b 7E 66 66 7E 
3562b 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
3562f 50d 70 3C 1C 00 
35633 50e 00 00 00 00 
35637 50f 00 00 18 18 
3563b 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
3563f 511 18 18 18 00 
35643 512 00 00 00 00 
35647 513 00 00 18 18 
3564b 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
3564f 515 18 18 18 0C 
35653 516 04 00 00 00 
35657 517 70 38 1C 0E 
3565b 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
3565f 519 70 00 00 00 
35663 51a 00 00 00 00 
35667 51b 00 00 7E 7E 
3566b 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
3566f 51d 00 00 00 00 
35673 51e 00 00 00 00 | 	byte	$00[8]
35677 51f 0E 1C 38 70 
3567b 520 E0 70 38 1C 
3567f 521 0E 00 00 00 
35683 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
35687 523 7E 66 66 30 
3568b 524 30 18 18 18 
3568f 525 00 18 18 00 
35693 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
35697 527 7E 66 66 66 
3569b 528 66 36 06 66 
3569f 529 66 7E 3C 00 
356a3 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
356a7 52b 3C 7E 66 66 
356ab 52c 66 7E 7E 66 
356af 52d 66 66 66 00 
356b3 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
356b7 52f 7E 66 66 7E 
356bb 530 3E 66 66 66 
356bf 531 66 7E 3E 00 
356c3 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
356c7 533 7E 66 66 06 
356cb 534 06 06 06 66 
356cf 535 66 7E 3C 00 
356d3 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
356d7 537 7E 66 66 66 
356db 538 66 66 66 66 
356df 539 66 7E 3E 00 
356e3 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
356e7 53b 7E 06 06 3E 
356eb 53c 3E 06 06 06 
356ef 53d 06 7E 7E 00 
356f3 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
356f7 53f 7E 06 06 3E 
356fb 540 3E 06 06 06 
356ff 541 06 06 06 00 
35703 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
35707 543 7E 06 06 76 
3570b 544 76 66 66 66 
3570f 545 66 7E 3C 00 
35713 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
35717 547 66 66 66 7E 
3571b 548 7E 66 66 66 
3571f 549 66 66 66 00 
35723 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
35727 54b 7E 18 18 18 
3572b 54c 18 18 18 18 
3572f 54d 18 7E 7E 00 
35733 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
35737 54f 60 60 60 60 
3573b 550 60 60 60    | 	byte	$60[7]
3573e 551 66 66 7E 3C 
35742 552 00 00 00 00 
35746 553 66 66 36 36 
3574a 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
3574e 555 66 66 C6 C6 
35752 556 00 00 00 00 
35756 557 06 06 06 06 
3575a 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
3575e 559 06 06 7E 7E 
35762 55a 00 00 00 00 
35766 55b C6 C6 EE EE 
3576a 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
3576e 55d C6 C6 C6 C6 
35772 55e 00 00 00 00 
35776 55f 66 66 66 6E 
3577a 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3577e 561 76 66 66 66 
35782 562 00 00 00 00 
35786 563 3C 7E 66 66 
3578a 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3578e 565 66 66 7E 3C 
35792 566 00 00 00 00 
35796 567 3E 7E 66 66 
3579a 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3579e 569 06 06 06 06 
357a2 56a 00 00 00 00 
357a6 56b 3C 7E 66 66 
357aa 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
357ae 56d 66 56 3E 6C 
357b2 56e 00 00 00 00 
357b6 56f 3E 7E 66 66 
357ba 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
357be 571 66 66 C6 C6 
357c2 572 00 00 00 00 
357c6 573 7C 7E 06 06 
357ca 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
357ce 575 60 60 7E 3E 
357d2 576 00 00 00 00 
357d6 577 7E 7E 18 18 
357da 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
357de 579 18 18 18 18 
357e2 57a 00 00 00 00 
357e6 57b 66 66 66 66 
357ea 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
357ee 57d 66 66 7E 3C 
357f2 57e 00 00 00 00 
357f6 57f 66 66 66 66 
357fa 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
357fe 581 3C 3C 18 18 
35802 582 00 00 00 00 
35806 583 C6 C6 C6 C6 
3580a 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3580e 585 FE EE C6 82 
35812 586 00 00 00 00 
35816 587 66 66 66 3C 
3581a 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
3581e 589 3C 66 66 66 
35822 58a 00 00 00 00 
35826 58b 66 66 66 66 
3582a 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
3582e 58d 18 18 18 18 
35832 58e 00 00 00 00 
35836 58f 7E 7E 30 30 
3583a 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
3583e 591 06 06 7E 7E 
35842 592 00 00 00 00 
35846 593 3C 3C 0C 0C 
3584a 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
3584e 595 0C 0C 3C 3C 
35852 596 00 00 00 00 
35856 597 06 06 0C 0C 
3585a 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
3585e 599 60 60 C0 C0 
35862 59a 00 00 00 00 
35866 59b 3C 3C 30 30 
3586a 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
3586e 59d 30 30 3C 3C 
35872 59e 00 00 00 00 
35876 59f 18 18 3C 3C 
3587a 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3587e 5a1 00 00 00 00 
35882 5a2 00 00 00 00 
35886 5a3 00 00 00 00 
3588a 5a4 00 00 00 00 
3588e 5a5 00 00       | 	byte	$00[18]
35890 5a6 FE FE 00 00 
35894 5a7 00 00 0C 0C 
35898 5a8 18 18 00 00 
3589c 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
358a0 5aa 00 00 00 00 
358a4 5ab 00 00 00 00 
358a8 5ac 00          | 	byte	$00[9]
358a9 5ac 3C 7C 60 7C 
358ad 5ad 7E 66 66 7E 
358b1 5ae 7C 00 00 00 
358b5 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
358b9 5b0 3E 7E 66 66 
358bd 5b1 66 66 66 7E 
358c1 5b2 3E 00 00 00 
358c5 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
358c9 5b4 3C 3E 06 06 
358cd 5b5 06 06 06 7E 
358d1 5b6 7C 00 00 00 
358d5 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
358d9 5b8 7C 7E 66 66 
358dd 5b9 66 66 66 7E 
358e1 5ba 7C 00 00 00 
358e5 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
358e9 5bc 3C 7E 66 66 
358ed 5bd 7E 06 06 7E 
358f1 5be 7C 00 00 00 
358f5 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
358f9 5c0 18 7E 7E 18 
358fd 5c1 18 18 18 18 
35901 5c2 18 00 00 00 
35905 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
35909 5c4 7C 7E 66 66 
3590d 5c5 66 66 7E 7C 
35911 5c6 60 7E 3E 00 
35915 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
35919 5c8 3E 7E 66 66 
3591d 5c9 66 66 66 66 
35921 5ca 66 00 00 00 
35925 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
35929 5cc 1C 1C 18 18 
3592d 5cd 18 18 18 3C 
35931 5ce 3C 00 00 00 
35935 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
35939 5d0 30 30 30 30 
3593d 5d1 30 30 30 30 
35941 5d2 30          | 	byte	$30[9]
35942 5d2 3E 1E 00 00 
35946 5d3 06 06 06 36 
3594a 5d4 36 1E 1E 1E 
3594e 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
35952 5d6 00 00 00 00 
35956 5d7 1C 1C 18 18 
3595a 5d8 18 18 18 18 
3595e 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
35962 5da 00 00 00 00 
35966 5db 00 00 00    | 	byte	$00[7]
35969 5dc 6C FE FE D6 
3596d 5dd D6 C6 C6 C6 
35971 5de C6 00 00 00 
35975 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
35979 5e0 3E 7E 66 66 
3597d 5e1 66 66 66 66 
35981 5e2 66 00 00 00 
35985 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
35989 5e4 3C 7E 66 66 
3598d 5e5 66 66 66 7E 
35991 5e6 3C 00 00 00 
35995 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
35999 5e8 3E 7E 66 66 
3599d 5e9 66 66 66 7E 
359a1 5ea 3E 06 06 00 
359a5 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
359a9 5ec 7C 7E 66 66 
359ad 5ed 66 66 66 7E 
359b1 5ee 7C 60 60 00 
359b5 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
359b9 5f0 3E 7E 66 06 
359bd 5f1 06 06 06 06 
359c1 5f2 06 00 00 00 
359c5 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
359c9 5f4 7C 7E 06 0E 
359cd 5f5 3C 70 60 7E 
359d1 5f6 3E 00 00 00 
359d5 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
359d9 5f8 7E 7E 18 18 
359dd 5f9 18 18 18 78 
359e1 5fa 70 00 00 00 
359e5 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
359e9 5fc 66 66 66 66 
359ed 5fd 66 66 66    | 	byte	$66[7]
359f0 5fe 7E 7C 00 00 
359f4 5ff 00 00 00 00 
359f8 600 00 66 66 66 
359fc 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
35a00 602 18 18 00 00 
35a04 603 00 00 00 00 
35a08 604 00 C6 C6 D6 
35a0c 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
35a10 606 C6 82 00 00 
35a14 607 00 00 00 00 
35a18 608 00 66 66 3C 
35a1c 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
35a20 60a 66 66 00 00 
35a24 60b 00 00 00 00 
35a28 60c 00 66 66 66 
35a2c 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
35a30 60e 7C 60 7E 3E 
35a34 60f 00 00 00 00 
35a38 610 00 7E 7E 30 
35a3c 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
35a40 612 7E 7E 00 00 
35a44 613 00 00 30 18 
35a48 614 18 18 18 0C 
35a4c 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
35a50 616 18 30 00 00 
35a54 617 00 00 18 18 
35a58 618 18 18 18 18 
35a5c 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
35a60 61a 18 18 00 00 
35a64 61b 00 00 0C 18 
35a68 61c 18 18 18 30 
35a6c 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
35a70 61e 18 0C 00 00 
35a74 61f 00 00 6C 7E 
35a78 620 36 00 00 00 
35a7c 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
35a80 622 00 00 00 00 
35a84 623 00 00 00 00 
35a88 624 00          | 	byte	$00[9]
35a89 624 18 18 18 18 
35a8d 625 18 18 00 00 
35a91 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
35a94 627             | 'amiga_font     file "amigafont.def"
35a94 627 00 6C FE FE 
35a98 628 7C 38 10 00 
35a9c 629 18 18 18 F8 
35aa0 62a F8 18 18 18 | a8_font        file "atari8.fnt"
35aa4 62b C0 C0 C0 C0 
35aa8 62c C0 C0 C0 C0 | 	byte	$c0[8]
35aac 62d 18 18 18 1F 
35ab0 62e 1F 00 00 00 
35ab4 62f 18 18 18 1F 
35ab8 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
35abc 631 00 00 00 1F 
35ac0 632 1F 18 18 18 
35ac4 633 C0 E0 70 38 
35ac8 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
35acc 635 03 07 0E 1C 
35ad0 636 38 70 E0 C0 
35ad4 637 80 C0 E0 F0 
35ad8 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
35adc 639 00 00 00 00 
35ae0 63a F0 F0 F0 F0 
35ae4 63b 01 03 07 0F 
35ae8 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
35aec 63d F0 F0 F0 F0 
35af0 63e 00 00 00 00 
35af4 63f 0F 0F 0F 0F 
35af8 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
35afc 641 FF FF 00 00 
35b00 642 00 00 00 00 
35b04 643 00 00 00 00 
35b08 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
35b0c 645 00 00 00 00 
35b10 646 0F 0F 0F 0F 
35b14 647 00 38 38 EE 
35b18 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
35b1c 649 00 00 00 F8 
35b20 64a F8 18 18 18 
35b24 64b 00 00 00 FF 
35b28 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
35b2c 64d 18 18 18 FF 
35b30 64e FF 18 18 18 
35b34 64f 00 00 3C 7E 
35b38 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
35b3c 651 00 00 00 00 
35b40 652 FF FF FF FF 
35b44 653 03 03 03 03 
35b48 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
35b4c 655 00 00 00 FF 
35b50 656 FF 18 18 18 
35b54 657 18 18 18 FF 
35b58 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
35b5c 659 0F 0F 0F 0F 
35b60 65a 0F 0F 0F 0F | 	byte	$0f[8]
35b64 65b 18 18 18 F8 
35b68 65c F8 00 00 00 
35b6c 65d 1E 06 1E 06 
35b70 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
35b74 65f 00 18 3C 7E 
35b78 660 18 18 18 00 
35b7c 661 00 18 18 18 
35b80 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
35b84 663 00 18 0C 7E 
35b88 664 0C 18 00 00 
35b8c 665 00 18 30 7E 
35b90 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
35b94 667 00 00 00 00 
35b98 668 00 00 00 00 
35b9c 669 00          | 	byte	$00[9]
35b9d 669 18 18 18 18 
35ba1 66a 00 18 00 00 
35ba5 66b 66 66 66 00 
35ba9 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
35bad 66d 66 FF 66 66 
35bb1 66e FF 66 00 18 
35bb5 66f 7C 06 3C 60 
35bb9 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
35bbd 671 66 36 18 0C 
35bc1 672 66 62 00 38 
35bc5 673 6C 38 1C F6 
35bc9 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
35bcd 675 18 18 18 00 
35bd1 676 00 00 00 00 
35bd5 677 70 38 18 18 
35bd9 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
35bdd 679 0E 1C 18 18 
35be1 67a 1C 0E 00 00 
35be5 67b 66 3C FF 3C 
35be9 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
35bed 67d 18 18 7E 18 
35bf1 67e 18 00 00 00 
35bf5 67f 00 00 00 00 
35bf9 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
35bfd 681 00 00 7E 00 
35c01 682 00 00 00 00 
35c05 683 00 00 00 00 
35c09 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
35c0d 685 60 30 18 0C 
35c11 686 06 02 00 00 
35c15 687 3C 66 76 6E 
35c19 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
35c1d 689 18 1C 18 18 
35c21 68a 18 7E 00 00 
35c25 68b 3C 66 30 18 
35c29 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
35c2d 68d 7E 30 18 30 
35c31 68e 66 3C 00 00 
35c35 68f 30 38 3C 36 
35c39 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
35c3d 691 7E 06 3E 60 
35c41 692 66 3C 00 00 
35c45 693 3C 06 3E 66 
35c49 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
35c4d 695 7E 60 30 18 
35c51 696 0C 0C 00 00 
35c55 697 3C 66 3C 66 
35c59 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
35c5d 699 3C 66 7C 60 
35c61 69a 30 1C 00 00 
35c65 69b 00 18 18 00 
35c69 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
35c6d 69d 00 18 18 00 
35c71 69e 18 18 0C 60 
35c75 69f 30 18 0C 18 
35c79 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
35c7d 6a1 00 7E 00 00 
35c81 6a2 7E 00 00 06 
35c85 6a3 0C 18 30 18 
35c89 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
35c8d 6a5 3C 66 30 18 
35c91 6a6 00 18 00 00 
35c95 6a7 3C 66 76 76 
35c99 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
35c9d 6a9 18 3C 66 66 
35ca1 6aa 7E 66 00 00 
35ca5 6ab 3E 66 3E 66 
35ca9 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
35cad 6ad 3C 66 06 06 
35cb1 6ae 66 3C 00 00 
35cb5 6af 1E 36 66 66 
35cb9 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
35cbd 6b1 7E 06 3E 06 
35cc1 6b2 06 7E 00 00 
35cc5 6b3 7E 06 3E 06 
35cc9 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
35ccd 6b5 7C 06 06 76 
35cd1 6b6 66 7C 00 00 
35cd5 6b7 66 66 7E 66 
35cd9 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
35cdd 6b9 7E 18 18 18 
35ce1 6ba 18 7E 00 00 
35ce5 6bb 60 60 60 60 
35ce9 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
35ced 6bd 66 36 1E 1E 
35cf1 6be 36 66 00 00 
35cf5 6bf 06 06 06 06 
35cf9 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
35cfd 6c1 C6 EE FE D6 
35d01 6c2 C6 C6 00 00 
35d05 6c3 66 6E 7E 7E 
35d09 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
35d0d 6c5 3C 66 66 66 
35d11 6c6 66 3C 00 00 
35d15 6c7 3E 66 66 3E 
35d19 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
35d1d 6c9 3C 66 66 66 
35d21 6ca 36 6C 00 00 
35d25 6cb 3E 66 66 3E 
35d29 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
35d2d 6cd 3C 06 3C 60 
35d31 6ce 60 3C 00 00 
35d35 6cf 7E 18 18 18 
35d39 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
35d3d 6d1 66 66 66 66 
35d41 6d2 66          | 	byte	$66[5]
35d42 6d2 7E 00 00 66 
35d46 6d3 66 66 66 3C 
35d4a 6d4 18 00 00 C6 
35d4e 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
35d52 6d6 C6 00 00 66 
35d56 6d7 66 3C 3C 66 
35d5a 6d8 66 00 00 66 
35d5e 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
35d62 6da 18 00 00 7E 
35d66 6db 30 18 0C 06 
35d6a 6dc 7E 00 00 78 
35d6e 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
35d72 6de 78 00 00 02 
35d76 6df 06 0C 18 30 
35d7a 6e0 60 00 00 1E 
35d7e 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
35d82 6e2 1E 00 00 10 
35d86 6e3 38 6C C6 00 
35d8a 6e4 00 00 00 00 
35d8e 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
35d92 6e6 FF 00 00 18 
35d96 6e7 3C 7E 7E 3C 
35d9a 6e8 18 00 00 00 
35d9e 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
35da2 6ea 7C 00 00 06 
35da6 6eb 06 3E 66 66 
35daa 6ec 3E 00 00 00 
35dae 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
35db2 6ee 3C 00 00 60 
35db6 6ef 60 7C 66 66 
35dba 6f0 7C 00 00 00 
35dbe 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
35dc2 6f2 3C 00 00 70 
35dc6 6f3 18 7C 18 18 
35dca 6f4 18 00 00 00 
35dce 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
35dd2 6f6 60 3E 00 06 
35dd6 6f7 06 3E 66 66 
35dda 6f8 66 00 00 18 
35dde 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
35de2 6fa 3C 00 00 60 
35de6 6fb 00 60 60 60 
35dea 6fc 60 3C 00 06 
35dee 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
35df2 6fe 66 00 00 1C 
35df6 6ff 18 18 18 18 
35dfa 700 3C 00 00 00 
35dfe 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
35e02 702 C6 00 00 00 
35e06 703 3E 66 66 66 
35e0a 704 66 00 00 00 
35e0e 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
35e12 706 3C 00 00 00 
35e16 707 3E 66 66 3E 
35e1a 708 06 06 00 00 
35e1e 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
35e22 70a 60 60 00 00 
35e26 70b 3E 66 06 06 
35e2a 70c 06 00 00 00 
35e2e 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
35e32 70e 3E 00 00 18 
35e36 70f 7E 18 18 18 
35e3a 710 70 00 00 00 
35e3e 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
35e42 712 7C 00 00 00 
35e46 713 66 66 66 3C 
35e4a 714 18 00 00 00 
35e4e 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
35e52 716 6C 00 00 00 
35e56 717 66 3C 18 3C 
35e5a 718 66 00 00 00 
35e5e 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
35e62 71a 30 1E 00 00 
35e66 71b 7E 30 18 0C 
35e6a 71c 7E 00 00 18 
35e6e 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
35e72 71e 3C 00 18 18 
35e76 71f 18 18 18 18 
35e7a 720 18 18 00 7E 
35e7e 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
35e82 722 60 00 10 18 
35e86 723 1C 1E 1C 18 
35e8a 724 10 00 08 18 
35e8e 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
35e92 726 08 00       | 	byte	$08, $00
35e94 727 00 00 00 00 
35e98 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
35e99 728 80 00 00 00 
35e9d 729 00 80 00 00 
35ea1 72a 80 80 00 00 
35ea5 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
35ea9 72c 80 00 80 00 
35ead 72d 00 40 80 00 
35eb1 72e AA AA AA 00 
35eb5 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
35eb9 730 FF 00 00 00 
35ebd 731 00 FF 00 00 
35ec1 732 FF FF 00 00 
35ec5 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
35ec9 734 FF 00 FF 00 
35ecd 735 00 FF FF 00 
35ed1 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
35ed4 737 00 00 00 00 
35ed8 738 00          | ataripalette   file "ataripalettep2.def"
35ed9 738 11 11 11 00 
35edd 739 22 22 22 00 
35ee1 73a 33 33 33 00 
35ee5 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
35ee9 73c 55 55 55 00 
35eed 73d 66 66 66 00 
35ef1 73e 77 77 77 00 
35ef5 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
35ef9 740 99 99 99 00 
35efd 741 AA AA AA 00 
35f01 742 BB BB BB 00 
35f05 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
35f09 744 DD DD DD 00 
35f0d 745 EE EE EE 00 
35f11 746 FF FF FF 00 
35f15 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
35f19 748 00 14 40 00 
35f1d 749 00 1E 60 00 
35f21 74a 00 28 80 00 
35f25 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
35f29 74c 00 3C BF 00 
35f2d 74d 00 46 DF 00 
35f31 74e 00 50 FF 00 
35f35 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
35f39 750 39 77 FF 00 
35f3d 751 55 8A FF 00 
35f41 752 71 9E FF 00 
35f45 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
35f49 754 AA C5 FF 00 
35f4d 755 C6 D8 FF 00 
35f51 756 E3 EC FF 00 
35f55 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
35f59 758 00 00 40 00 
35f5d 759 00 00 60 00 
35f61 75a 00 00 80 00 
35f65 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
35f69 75c 00 00 BF 00 
35f6d 75d 00 00 DF 00 
35f71 75e 00 00 FF 00 
35f75 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
35f79 760 39 39 FF 00 
35f7d 761 55 55 FF 00 
35f81 762 71 71 FF 00 
35f85 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
35f89 764 AA AA FF 00 
35f8d 765 C6 C6 FF 00 
35f91 766 E3 E3 FF 00 
35f95 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
35f99 768 20 00 40 00 
35f9d 769 30 00 60 00 
35fa1 76a 40 00 80 00 
35fa5 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
35fa9 76c 60 00 BF 00 
35fad 76d 70 00 DF 00 
35fb1 76e 80 00 FF 00 
35fb5 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
35fb9 770 9C 39 FF 00 
35fbd 771 AA 55 FF 00 
35fc1 772 B8 71 FF 00 
35fc5 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
35fc9 774 D5 AA FF 00 
35fcd 775 E3 C6 FF 00 
35fd1 776 F1 E3 FF 00 
35fd5 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
35fd9 778 40 00 40 00 
35fdd 779 60 00 60 00 
35fe1 77a 80 00 80 00 
35fe5 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
35fe9 77c BF 00 BF 00 
35fed 77d DF 00 DF 00 
35ff1 77e FF 00 FF 00 
35ff5 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
35ff9 780 FF 39 FF 00 
35ffd 781 FF 55 FF 00 
36001 782 FF 71 FF 00 
36005 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
36009 784 FF AA FF 00 
3600d 785 FF C6 FF 00 
36011 786 FF E3 FF 00 
36015 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
36019 788 40 00 20 00 
3601d 789 60 00 30 00 
36021 78a 80 00 40 00 
36025 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
36029 78c BF 00 60 00 
3602d 78d DF 00 70 00 
36031 78e FF 00 80 00 
36035 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
36039 790 FF 39 9C 00 
3603d 791 FF 55 AA 00 
36041 792 FF 71 B8 00 
36045 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
36049 794 FF AA D5 00 
3604d 795 FF C6 E3 00 
36051 796 FF E3 F1 00 
36055 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
36059 798 40 00 00 00 
3605d 799 60 00 00 00 
36061 79a 80 00 00 00 
36065 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
36069 79c BF 00 00 00 
3606d 79d DF 00 00 00 
36071 79e FF 00 00 00 
36075 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
36079 7a0 FF 39 39 00 
3607d 7a1 FF 55 55 00 
36081 7a2 FF 71 71 00 
36085 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
36089 7a4 FF AA AA 00 
3608d 7a5 FF C6 C6 00 
36091 7a6 FF E3 E3 00 
36095 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
36099 7a8 40 10 00 00 
3609d 7a9 60 18 00 00 
360a1 7aa 80 20 00 00 
360a5 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
360a9 7ac BF 30 00 00 
360ad 7ad DF 38 00 00 
360b1 7ae FF 40 00 00 
360b5 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
360b9 7b0 FF 6A 39 00 
360bd 7b1 FF 80 55 00 
360c1 7b2 FF 95 71 00 
360c5 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
360c9 7b4 FF BF AA 00 
360cd 7b5 FF D5 C6 00 
360d1 7b6 FF EA E3 00 
360d5 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
360d9 7b8 40 20 00 00 
360dd 7b9 60 30 00 00 
360e1 7ba 80 40 00 00 
360e5 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
360e9 7bc BF 60 00 00 
360ed 7bd DF 70 00 00 
360f1 7be FF 80 00 00 
360f5 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
360f9 7c0 FF 9C 39 00 
360fd 7c1 FF AA 55 00 
36101 7c2 FF B8 71 00 
36105 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
36109 7c4 FF D5 AA 00 
3610d 7c5 FF E3 C6 00 
36111 7c6 FF F1 E3 00 
36115 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
36119 7c8 40 30 00 00 
3611d 7c9 60 48 00 00 
36121 7ca 80 60 00 00 
36125 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
36129 7cc BF 90 00 00 
3612d 7cd DF A8 00 00 
36131 7ce FF C0 00 00 
36135 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
36139 7d0 FF CE 39 00 
3613d 7d1 FF D5 55 00 
36141 7d2 FF DC 71 00 
36145 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
36149 7d4 FF EA AA 00 
3614d 7d5 FF F1 C6 00 
36151 7d6 FF F8 E3 00 
36155 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
36159 7d8 30 40 00 00 
3615d 7d9 48 60 00 00 
36161 7da 60 80 00 00 
36165 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
36169 7dc 90 BF 00 00 
3616d 7dd A8 DF 00 00 
36171 7de C0 FF 00 00 
36175 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
36179 7e0 CE FF 39 00 
3617d 7e1 D5 FF 55 00 
36181 7e2 DC FF 71 00 
36185 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
36189 7e4 EA FF AA 00 
3618d 7e5 F1 FF C6 00 
36191 7e6 F8 FF E3 00 
36195 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
36199 7e8 00 40 00 00 
3619d 7e9 00 60 00 00 
361a1 7ea 00 80 00 00 
361a5 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
361a9 7ec 00 BF 00 00 
361ad 7ed 00 DF 00 00 
361b1 7ee 00 FF 00 00 
361b5 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
361b9 7f0 39 FF 39 00 
361bd 7f1 55 FF 55 00 
361c1 7f2 71 FF 71 00 
361c5 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
361c9 7f4 AA FF AA 00 
361cd 7f5 C6 FF C6 00 
361d1 7f6 E3 FF E3 00 
361d5 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
361d9 7f8 00 40 14 00 
361dd 7f9 00 60 1E 00 
361e1 7fa 00 80 28 00 
361e5 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
361e9 7fc 00 BF 3C 00 
361ed 7fd 00 DF 46 00 
361f1 7fe 00 FF 50 00 
361f5 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
361f9 800 39 FF 77 00 
361fd 801 55 FF 8A 00 
36201 802 71 FF 9E 00 
36205 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
36209 804 AA FF C5 00 
3620d 805 C6 FF D8 00 
36211 806 E3 FF EC 00 
36215 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
36219 808 00 40 28 00 
3621d 809 00 60 3C 00 
36221 80a 00 80 50 00 
36225 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
36229 80c 00 BF 78 00 
3622d 80d 00 DF 8C 00 
36231 80e 00 FF A0 00 
36235 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
36239 810 39 FF B5 00 
3623d 811 55 FF C0 00 
36241 812 71 FF CA 00 
36245 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
36249 814 AA FF DF 00 
3624d 815 C6 FF EA 00 
36251 816 E3 FF F4 00 
36255 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
36259 818 00 40 40 00 
3625d 819 00 60 60 00 
36261 81a 00 80 80 00 
36265 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
36269 81c 00 BF BF 00 
3626d 81d 00 DF DF 00 
36271 81e 00 FF FF 00 
36275 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
36279 820 39 FF FF 00 
3627d 821 55 FF FF 00 
36281 822 71 FF FF 00 
36285 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
36289 824 AA FF FF 00 
3628d 825 C6 FF FF 00 
36291 826 E3 FF FF 00 
36295 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
36299 828 00 28 40 00 
3629d 829 00 3C 60 00 
362a1 82a 00 50 80 00 
362a5 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
362a9 82c 00 78 BF 00 
362ad 82d 00 8C DF 00 
362b1 82e 00 A0 FF 00 
362b5 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
362b9 830 39 B5 FF 00 
362bd 831 55 C0 FF 00 
362c1 832 71 CA FF 00 
362c5 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
362c9 834 AA DF FF 00 
362cd 835 C6 EA FF 00 
362d1 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
362d4 837             | 
362d4 837             | '**********************************************************************************
362d4 837             | '
362d4 837             | '        Timings and colors definitions
362d4 837             | '
362d4 837             | '**********************************************************************************
362d4 837             | 
362d4 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
362d4 837 08 00 00 00 
362d8 838 3C 00 00 00 
362dc 839 08 00 00 00 
362e0 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
362e4 83b 07 00 00 00 
362e8 83c 04 00 00 00 
362ec 83d 01 00 00 00 
362f0 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
362f4 83f 58 02 00 00 
362f8 840 20 9E 4B 14 
362fc 841 FB A8 9E 01 
36300 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
36304 843 00 00 00 00 
36308 844 C0 00 00 00 
3630c 845 00 00 00 00 
36310 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36314 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
36314 847 00 75 C7 97 
36318 848 27 47 F6 0A 
3631c 849 05 79 CB 9B 
36320 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
36324 84b             | 
36324 84b             | ''--------  Initialization  ----------------------------------------------------------------
36324 84b             | 
36324 84b 28 0C 64 FD | hdmi            setq    #6
36328 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
3632c 84d 28 10 64 FD |                 setq    #8
36330 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
36334 84f             | 
36334 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
36338 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
3633c 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
36340 852 D6 C6 01 F1 |                 add     t1,hbase
36344 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
36348 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
3634c 855 7B 0B 80 5F 
36350 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
36354 857 66 66 86 FF 
36358 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
3635c 859             | '
3635c 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
36360 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
36364 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
36368 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
3636c 85d             | 
3636c 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
36370 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
36374 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
36378 860             | 
36378 860             | ''--------  frame rendering main loop  ---------------------------------------------------
36378 860             | 
36378 860 28 06 64 FD | p101            setq 	#3
3637c 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
36380 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
36384 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
36388 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
3638c 865 00 A0 05 F6 |                 mov     dlinum, #0
36390 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
36394 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
36398 868             | 
36398 868             | 
36398 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3639c 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
363a0 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
363a4 86b             |                 
363a4 86b             | 
363a4 86b             | 
363a4 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
363a4 86b             |   
363a4 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
363a8 86c 29 FE 65 3D |          if_nc  setq2   #255
363ac 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
363b0 86e             | 
363b0 86e             | '' -----   up porch (before the picture)
363b0 86e             | 
363b0 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
363b4 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
363b8 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
363bc 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
363c0 872             |  
363c0 872             |    
363c0 872             |  
363c0 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
363c4 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
363c8 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
363cc 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
363d0 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
363d4 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
363d8 878             | 
363d8 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
363dc 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
363e0 87a 48 00 B0 FD | 		call    #dli
363e4 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
363e8 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
363ec 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
363f0 87e             |                 	
363f0 87e             |                 
363f0 87e             | 
363f0 87e             |  
363f0 87e             | '' ------- the main screen drawing starts here
363f0 87e             | 
363f0 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
363f4 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
363f8 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
363fc 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
36400 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
36404 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
36408 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3640c 885             |               
3640c 885             | 
3640c 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
36410 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
36414 887             | 
36414 887             | ' ---------------- All visible lines displayed now, start vblank  
36414 887             | 
36414 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
36418 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3641c 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
36420 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
36424 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
36428 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
3642c 88d             | 
3642c 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
3642c 88d             | 
3642c 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
3642c 88d             | 
3642c 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
36430 88e             | 
36430 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
36434 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
36438 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
3643c 891             | 
3643c 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
36440 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
36444 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
36448 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
3644c 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
36450 896             | 
36450 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
36454 897 DD C6 41 F8 |                 getnib  t1,dl,#0
36458 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
3645c 899 70 00 90 AD |     if_z        jmp     #preload
36460 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
36464 89b 94 00 90 AD |     if_z        jmp     #preload2
36468 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
3646c 89d 0C 00 90 AD |     if_z        jmp     #p390
36470 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
36474 89f 28 00 90 AD |     if_z        jmp     #p391  
36478 8a0             | 
36478 8a0 2D 00 64 FD | p308            ret
3647c 8a1             |    
3647c 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
36480 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
36484 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
36488 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3648c 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
36490 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
36494 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
36498 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3649c 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
364a0 8aa             |  
364a0 8aa             | '' --------  Reload palette. To do 
364a0 8aa             | 
364a0 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
364a4 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
364a8 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
364ac 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
364b0 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
364b4 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
364b8 8b0 70 FF 9F FD |         	jmp     #dli                
364bc 8b1             |       
364bc 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
364bc 8b1             | 
364bc 8b1             | 
364bc 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
364bc 8b1             | 
364bc 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
364c0 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
364c4 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
364c8 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
364cc 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
364d0 8b6             |         
364d0 8b6             | '' -------------- Preload a line from PSRAM        
364d0 8b6             |         
364d0 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
364d4 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
364d8 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
364dc 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
364e0 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
364e4 8bb             | 
364e4 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
364e8 8bc 32 B7 01 F6 |                 mov     buf2,a1024
364ec 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
364f0 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
364f4 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
364f8 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
364fc 8c1             |  
364fc 8c1             |  
364fc 8c1             | preload2      '  incmod  dlinum,#3
364fc 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
36500 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
36504 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
36508 8c4 28 02 64 FD |                 setq	#1
3650c 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
36510 8c6             |                 
36510 8c6             | 
36510 8c6             | '' -------------- Draw sprites
36510 8c6             | 
36510 8c6 CF 5C 02 F6 | sprite          mov t8,frames
36514 8c7 10 5C 0E F5 | 		and t8,#16 wz
36518 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
3651c 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
36520 8ca             | 		
36520 8ca             | 
36520 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
36524 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
36528 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
3652c 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
36530 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
36534 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
36538 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
3653c 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
36540 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
36544 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
36548 8d4 01 52 86 F1 |                 sub     sprite_h,#1
3654c 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
36550 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
36554 8d7             | 
36554 8d7             | 
36554 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
36558 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
3655c 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
36560 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
36564 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
36568 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
3656c 8dd 00 5E 06 F6 |                 mov 	t9,#0
36570 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
36574 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
36578 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
3657c 8e1             |      
3657c 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
36580 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
36584 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
36588 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3658c 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
36590 8e6             |                 
36590 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
36594 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
36598 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3659c 8e9             |   		
3659c 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
365a0 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
365a4 8eb             | 
365a4 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
365a8 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
365ac 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
365b0 8ee             |  
365b0 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
365b4 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
365b8 8f0 10 00 90 CD |      if_c 	jmp     #p899		
365bc 8f1             | 	
365bc 8f1             | 	
365bc 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
365c0 8f2 28 CD 01 F1 | 		add	t4,sprite_w
365c4 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
365c8 8f4             | 
365c8 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
365cc 8f5             | 
365cc 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
365d0 8f6 01 58 86 F1 | 	 	sub     t6,#1
365d4 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
365d8 8f8             | 
365d8 8f8 28 58 62 FD |                 setq   	t6
365dc 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
365e0 8fa 28 5D 02 F6 |                 mov t8,sprite_w
365e4 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
365e8 8fc 24 00 90 AD |         if_z    jmp #p898
365ec 8fd             |          
365ec 8fd             |         
365ec 8fd 70 5F 06 F6 |                 mov  t9,#368
365f0 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
365f4 8ff             | 
365f4 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
365f8 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
365fc 901 FF FF 7F FF 
36600 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
36604 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
36608 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
3660c 905 2D 01 00 F5 |                 and 0-0, t7
36610 906             |                
36610 906             | 
36610 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
36614 907 E5 E0 7A FA |                 wmlong 368,t3				
36618 908             |                 
36618 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3661c 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
36620 90a 2D 00 64 FD |                 ret
36624 90b             | 	
36624 90b             | 	
36624 90b             |                
36624 90b             |  
36624 90b             | '' -------------- Graphics line ------------------------------------------------------------
36624 90b             |  
36624 90b             | 
36624 90b             | '' consts and vars
36624 90b             | 
36624 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
36628 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
3662c 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
36630 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
36634 90f             | 
36634 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
36638 910             | 
36638 910             | '------ these longs will be set by setmode function
36638 910             | 
36638 910 00 00 00 00 | m_bs            long    0        'blanks before sync
3663c 911 00 00 00 00 | m_sn            long    0        'sync
36640 912 00 00 00 00 | m_bv            long    0        'blanks before visible
36644 913 00 00 00 00 | m_vi            long    0        'visible pixels #
36648 914             | 'm_border        long    0        'left/right borders
36648 914 00 00 00 00 | i_upporch       long    0        'up porch lines
3664c 915 00 00 00 00 | i_vsync         long    0        'vsync lines
36650 916 00 00 00 00 | i_downporch     long    0        'down porch lines
36654 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
36658 918 00 00 00 00 | i_totalvis      long    0
3665c 919             | 
3665c 919             | '-------------------------------------
3665c 919             |  
3665c 919 00 00 00 00 | linenum         long    0
36660 91a 00 00 00 00 | frames          long    0
36664 91b 00 00 00 00 | dlinum long 0
36668 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
3666c 91d             | 
3666c 91d 00 00 00 00 | vblankptr       long    0
36670 91e 00 00 00 00 | modeptr         long    0
36674 91f 00 00 00 00 | paletteptr      long    0
36678 920 00 00 00 00 | dlptr           long    0
3667c 921 01 00 00 00 | hbase           long    1
36680 922 00 00 00 00 | mailbox         long    0
36684 923 00 00 00 00 | spriteptr          long 0
36688 924             | 
36688 924 00 00 00 00 | cmd             long    0
3668c 925 00 B0 07 00 | buf1            long    $80000-16384-4096
36690 926 00 04 00 00 | buf2            long    1024
36694 927 01 00 00 00 | dlptr2          long    1
36698 928 01 00 00 00 | dl              long    1
3669c 929             | 
3669c 929 00 00 00 00 | buf1c long 0
366a0 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
366a4 92b 01 00 00 00 | framebuf2       long    1
366a8 92c 01 00 00 00 | hsync0          long    1
366ac 92d 01 00 00 00 | hsync1          long    1
366b0 92e             | 
366b0 92e 01 00 00 00 | t1              long    1
366b4 92f 00 00 00 00 | t2 long 0
366b8 930 00 00 00 00 | t3 long 0
366bc 931 00 00 00 00 | t4 long 0
366c0 932             | 
366c0 932 00 00 00 00 | rcnt            long    0  'dl repeat count
366c4 933 00 00 00 00 | rcnt2           long    0
366c8 934 00 00 00 00 | rcnt2a          long    0
366cc 935 00 00 00 00 | roffset         long    0
366d0 936 00 00 00 00 | rdl             long    0  'dl repeat line
366d4 937 00 00 00 00 | dlc             long    0  'dl command
366d8 938             | 
366d8 938 FF FF FF FF | affffffff       long    $ffffffff
366dc 939 00 00 00 00 | sprite1pointer long 0
366e0 93a 00 00 00 00 | sprite1xy      long 0
366e4 93b 00 00 00 00 | sprite1wh      long 0
366e8 93c 00 00 00 00 | sprite2pointer long 0
366ec 93d 00 00 00 00 | sprite2xy      long 0
366f0 93e 00 00 00 00 | sprite2wh      long 0
366f4 93f 00 00 00 00 | sprite3pointer long 0
366f8 940 00 00 00 00 | sprite3xy      long 0
366fc 941 00 00 00 00 | sprite3wh      long 0
36700 942 00 00 00 00 | sprite4pointer long 0
36704 943 00 00 00 00 | sprite4xy      long 0
36708 944 00 00 00 00 | sprite4wh      long 0
3670c 945 00 00 00 00 | sprite5pointer long 0
36710 946 00 00 00 00 | sprite5xy      long 0
36714 947 00 00 00 00 | sprite5wh      long 0
36718 948 00 00 00 00 | sprite6pointer long 0
3671c 949 00 00 00 00 | sprite6xy      long 0
36720 94a 00 00 00 00 | sprite6wh      long 0
36724 94b 00 00 00 00 | sprite7pointer long 0
36728 94c 00 00 00 00 | sprite7xy      long 0
3672c 94d 00 00 00 00 | sprite7wh      long 0
36730 94e 00 00 00 00 | sprite8pointer long 0
36734 94f 00 00 00 00 | sprite8xy      long 0
36738 950 00 00 00 00 | sprite8wh      long 0
3673c 951 00 00 00 00 | sprite9pointer long 0
36740 952 00 00 00 00 | sprite9xy      long 0
36744 953 00 00 00 00 | sprite9wh      long 0
36748 954 00 00 00 00 | sprite10pointer long 0
3674c 955 00 00 00 00 | sprite10xy      long 0
36750 956 00 00 00 00 | sprite10wh      long 0
36754 957 00 00 00 00 | sprite11pointer long 0
36758 958 00 00 00 00 | sprite11xy      long 0
3675c 959 00 00 00 00 | sprite11wh      long 0
36760 95a 00 00 00 00 | sprite12pointer long 0
36764 95b 00 00 00 00 | sprite12xy      long 0
36768 95c 00 00 00 00 | sprite12wh      long 0
3676c 95d 00 00 00 00 | sprite13pointer long 0
36770 95e 00 00 00 00 | sprite13xy      long 0
36774 95f 00 00 00 00 | sprite13wh      long 0
36778 960 00 00 00 00 | sprite14pointer long 0
3677c 961 00 00 00 00 | sprite14xy      long 0
36780 962 00 00 00 00 | sprite14wh      long 0
36784 963 00 00 00 00 | sprite15pointer long 0
36788 964 00 00 00 00 | sprite15xy      long 0
3678c 965 00 00 00 00 | sprite15wh      long 0
36790 966 00 00 00 00 | sprite16pointer long 0
36794 967 00 00 00 00 | sprite16xy      long 0
36798 968 00 00 00 00 | sprite16wh      long 0
3679c 969 00 00 00 00 | sprite17pointer long 0
367a0 96a 00 00 00 00 | sprite17xy      long 0
367a4 96b 00 00 00 00 | sprite17wh      long 0
367a8 96c 00 00 00 00 | sprite18pointer long 0
367ac 96d 00 00 00 00 | sprite18xy      long 0
367b0 96e 00 00 00 00 | sprite18wh      long 0
367b4 96f 00 00 00 00 | spritenum long 0
367b8 970             | 
367b8 970 00 00 00 00 | spriteline long 0
367bc 971 84 03 00 00 | sprite_x long 900
367c0 972 00 00 00 00 | sprite_y long 0
367c4 973 10 00 00 00 | sprite_w long 16
367c8 974 40 00 00 00 | sprite_h long 64
367cc 975 00 00 00 00 | l2 long 0
367d0 976 00 00 00 00 | t5 long 0
367d4 977 00 00 00 00 | t6 long 0
367d8 978 00 00 00 00 | t7 long 0
367dc 979 00 00 00 00 | t8 long 0
367e0 97a 00 00 00 00 | t9 long 0
367e4 97b 00 00 00 00 | preloadaddr long 0
367e8 97c 00 00 00 00 | preloadlineaddr long 0
367ec 97d 00 04 00 00 | a1024 long 1024
367f0 97e             | 
367f0 97e E0 03 00 00 | aa long 992
367f4 97f FF 03 00 00 | a1023 long 1023
367f8 980 00 10 00 00 | a4096 long 4096
367fc 981             |  fit 368
367fc 981             | _psram_spin2_dat_
367fc 981 00 00 00 00 
      ...             
368f4 9bf 00 00 00 00 
368f8 9c0 00 00 00 00 |     listdata long 0[8*8]
368fc 9c1             |             orgh
368fc                 | 
368fc                 | ' driver state
368fc     FF FF FF FF | drivercog   long    -1  ' COG id of driver
36900     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
36904                 | 
36904                 | ' delay profile
36904     07 00 00 00 
36908     00 CF 7B 05 
3690c     80 D1 F0 08 
36910     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
36914     80 C4 60 0F 
36918     80 39 7A 12 
3691c     40 2D D9 13 
36920     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
36924                 | 
36924                 | ' data to be passed to driver when starting it
36924                 | startupData
36924     00 00 00 00 |     long    0           ' current frequency
36928     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3692c     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
36930     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
36934     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
36938     44 69 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3693c     C4 69 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
36940     E4 69 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
36944                 | 
36944                 | ' data for memory
36944                 | deviceData
36944                 |     ' 16 bank parameters follow (16MB per bank)
36944     00 00 00 00 
      ...             
3697c     00 00 00 00 
36980     00 00 00 00 |     long    0[16]                               ' banks 0-15
36984                 |     ' 16 banks of pin parameters follow
36984     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
36988     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3698c     FF FF FF FF 
      ...             
369bc     FF FF FF FF 
369c0     FF FF FF FF |     long    -1[14]                              ' banks 2-15
369c4                 | 
369c4                 | ' data for COG polling
369c4                 | qosData 
369c4     00 00 FF FF 
369c8     00 00 FF FF 
369cc     00 00 FF FF 
369d0     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
369d4     00 00 FF FF 
369d8     00 00 FF FF 
369dc     00 00 FF FF 
369e0     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
369e4                 |     
369e4                 | ' mailbox storage
369e4                 | 
369e4                 | mailboxes
369e4     00 00 00 00 
      ...             
36a3c     00 00 00 00 
36a40     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
36a44                 | 	alignl
36a44                 | _psram16drv_spin2_dat_
36a44                 |                             orgh
36a44     00 00 00 00 
      ...             
36a5c     00 00 00 00 
36a60     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
36a64                 | 
36a64                 | driver_start
36a64                 |                             org
36a64 000             | '..................................................................................................
36a64 000             | ' Memory layout for COG RAM once operational:
36a64 000             | '
36a64 000             | '  COG RAM address      Usage
36a64 000             | '  ---------------      ----
36a64 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
36a64 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
36a64 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
36a64 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
36a64 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
36a64 000             | '  ~$198-$1F3           State and register variables
36a64 000             | '
36a64 000             | ' Also during driver COG startup:
36a64 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
36a64 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
36a64 000             | '..................................................................................................
36a64 000             |                             
36a64 000             | ' Mailbox storage after vector initialization
36a64 000             | 
36a64 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
36a68 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
36a6c 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
36a70 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
36a74 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
36a78 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
36a7c 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
36a80 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
36a84 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
36a88 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
36a8c 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
36a90 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
36a94 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
36a98 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
36a9c 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
36aa0 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
36aa4 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
36aa8 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
36aac 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
36ab0 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
36ab4 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
36ab8 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
36abc 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
36ac0 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
36ac4 018             | 
36ac4 018             | ' Mailbox parameter addresses per COG once patched
36ac4 018             |                             
36ac4 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
36ac8 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
36acc 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
36ad0 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
36ad4 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
36ad8 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
36adc 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
36ae0 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
36ae4 020             | 
36ae4 020             | '..................................................................................................
36ae4 020             | ' Per COG request and state setup and service branching
36ae4 020             |         
36ae4 020             | cog0                 
36ae4 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
36ae8 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
36aec 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
36af0 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
36af4 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36af8 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36afc 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
36b00 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
36b04 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
36b08 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36b0c 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36b10 02b 33 CA 63 FD |                             execf   request-0               'jump to service
36b14 02c             | cog1                        
36b14 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
36b18 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
36b1c 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
36b20 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
36b24 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36b28 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36b2c 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
36b30 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
36b34 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
36b38 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36b3c 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36b40 037 33 CA 63 FD |                             execf   request-0               'jump to service
36b44 038             | cog2                         
36b44 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
36b48 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
36b4c 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
36b50 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
36b54 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36b58 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36b5c 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
36b60 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
36b64 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
36b68 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36b6c 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36b70 043 33 CA 63 FD |                             execf   request-0               'jump to service
36b74 044             | cog3                        
36b74 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
36b78 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
36b7c 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
36b80 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
36b84 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36b88 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36b8c 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
36b90 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
36b94 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
36b98 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36b9c 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36ba0 04f 33 CA 63 FD |                             execf   request-0               'jump to service
36ba4 050             | cog4                        
36ba4 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
36ba8 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
36bac 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
36bb0 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
36bb4 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36bb8 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36bbc 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
36bc0 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
36bc4 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
36bc8 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36bcc 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36bd0 05b 33 CA 63 FD |                             execf   request-0               'jump to service
36bd4 05c             | cog5                        
36bd4 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
36bd8 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
36bdc 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
36be0 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
36be4 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36be8 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36bec 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
36bf0 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
36bf4 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
36bf8 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36bfc 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36c00 067 33 CA 63 FD |                             execf   request-0               'jump to service
36c04 068             | cog6                        
36c04 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
36c08 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
36c0c 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
36c10 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
36c14 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36c18 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36c1c 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
36c20 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
36c24 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
36c28 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36c2c 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36c30 073 33 CA 63 FD |                             execf   request-0               'jump to service
36c34 074             | cog7                        
36c34 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
36c38 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
36c3c 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
36c40 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
36c44 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36c48 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36c4c 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
36c50 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
36c54 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
36c58 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36c5c 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36c60 07f 33 CA 63 FD |                             execf   request-0               'jump to service
36c64 080             |                             fit     128
36c64 080             | 
36c64 080             |                             fit     128
36c64 080             | pad                         long    0[128-$]                'align init code to $80
36c64 080             | 
36c64 080             | '..................................................................................................
36c64 080             | 
36c64 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
36c64 080             | 
36c64 080             | init                        
36c64 080             |                             ' get driver scratch long address in hub
36c64 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
36c68 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
36c6c 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
36c70 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
36c74 084             |                     
36c74 084             |                             ' read in the additional LUT RAM code
36c74 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
36c78 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
36c7c 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
36c80 087             | 
36c80 087             |                             ' read the startup parameters
36c80 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
36c84 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
36c88 089             | 
36c88 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
36c88 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
36c8c 08a             | 
36c8c 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
36c90 08b 01 00 00 5F 
36c94 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
36c98 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
36c9c 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
36ca0 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
36ca4 090             | 
36ca4 090             |                             ' setup data pin modes and data bus pin group in streamer commands
36ca4 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
36ca8 091 01 00 00 FF 
36cac 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
36cb0 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
36cb4 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
36cb8 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
36cbc 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
36cc0 097 08 DE 47 F5 |                             or      a, #8
36cc4 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
36cc8 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
36ccc 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
36cd0 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
36cd4 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
36cd8 09d 01 DE 07 F1 |                             add     a, #1
36cdc 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
36ce0 09f             |  
36ce0 09f             |                             ' setup device control pin states
36ce0 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
36ce4 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
36ce8 0a1 01 00 00 FF 
36cec 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
36cf0 0a3             | 
36cf0 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
36cf4 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
36cf8 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
36cfc 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
36d00 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
36d04 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
36d08 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
36d0c 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
36d10 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
36d14 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
36d18 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
36d1c 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
36d20 0af             | pinloop
36d20 0af             |                             ' generate minimum CE high time before access
36d20 0af A1 07 00 FF 
36d24 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
36d28 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
36d2c 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
36d30 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
36d34 0b4 1F DE 63 FD |                             waitx   a                       'delay
36d38 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
36d3c 0b6             | 
36d3c 0b6             |                             ' setup the COG mailboxes and addresses 
36d3c 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
36d40 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
36d44 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
36d48 0b9             | 
36d48 0b9 28 2E 64 FD |                             setq    #24-1
36d4c 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
36d50 0bb             | 
36d50 0bb             |                             ' setup the polling loop for active COGs 
36d50 0bb 01 C2 63 FD |                             cogid   id
36d54 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
36d58 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
36d5c 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
36d60 0bf 0A F0 07 F6 |                             mov     ptra, #10
36d64 0c0 E1 F1 03 FA |                             mul     ptra, id
36d68 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
36d6c 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
36d70 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
36d74 0c4 03 C2 07 FA |                             mul     id, #3
36d78 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
36d7c 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
36d80 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
36d84 0c8 D8 01 B0 FD |                             call    #reloadcogs
36d88 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
36d8c 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
36d90 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
36d90 0cb D8 E5 B7 F9 |                             setd    d, #addr1
36d94 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
36d98 0cd 08 04 DC FC |                             rep     #2, #8
36d9c 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
36da0 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
36da4 0d0             | 
36da4 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
36da4 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
36da4 0d0 01 C2 63 FD |                             cogid   id
36da8 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
36dac 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
36db0 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
36db4 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
36db8 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
36dbc 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
36dc0 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
36dc4 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
36dc8 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
36dcc 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
36dd0 0db 3F E4 A7 F9 |                             alti    d, #%111_111
36dd4 0dc 00 00 00 F6 |                             mov     0-0, 0-0
36dd8 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
36ddc 0de A5 E5 03 F1 |                             add     d, const512
36de0 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
36de4 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
36de8 0e1 00 00 00 F6 |                             mov     0-0, 0-0
36dec 0e2             |                             
36dec 0e2             |                             ' setup register values for control vector loop setup after we return
36dec 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
36df0 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
36df4 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
36df8 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
36dfc 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
36e00 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
36e04 0e8 D0 C3 8F F9 |                             altd    id, #id0
36e08 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
36e0c 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
36e10 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
36e14 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
36e18 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
36e1c 0ee             |  
36e1c 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
36e20 0ef 07 CA 07 F5 |                             and     request, #7
36e24 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
36e28 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
36e2c 0f2             |                             fit     $100                    'ensure all init code fits this space
36e2c 0f2             | 
36e2c 0f2             |                             fit     $100                    'ensure all init code fits this space
36e2c 0f2             | 
36e2c 0f2 00 00 00 00 
      ...             
36e5c 0fe 00 00 00 00 
36e60 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
36e64 100             | 
36e64 100             | '..................................................................................................
36e64 100             | ' Error result handling and COG notification of request completion
36e64 100             | 
36e64 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
36e68 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
36e6c 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
36e70 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
36e74 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
36e78 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
36e7c 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
36e80 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
36e84 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
36e88 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
36e8c 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
36e90 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
36e94 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
36e98 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
36e9c 10e             | ' Poller re-starts here after a COG is serviced
36e9c 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
36ea0 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
36ea4 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
36ea8 111             | ' Main dynamic polling loop repeats until a request arrives
36ea8 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
36eac 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
36eb0 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
36eb4 114             | 
36eb4 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
36eb8 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
36ebc 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
36ec0 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
36ec4 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
36ec8 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
36ecc 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
36ed0 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
36ed4 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
36ed8 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
36edc 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
36ee0 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
36ee4 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
36ee8 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
36eec 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
36ef0 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
36ef4 124             | 
36ef4 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
36ef8 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
36efc 126             |  
36efc 126             | '..................................................................................................
36efc 126             | ' List handler                               
36efc 126             | 
36efc 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
36f00 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
36f04 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
36f08 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
36f0c 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
36f10 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
36f14 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
36f18 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
36f1c 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
36f20 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
36f24 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
36f28 131 33 00 60 FD |                             execf   0-0                     'process the request 
36f2c 132             | 
36f2c 132             | '..................................................................................................
36f2c 132             | ' Restoring per COG state and resuming where we left off
36f2c 132             | 
36f2c 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
36f30 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
36f34 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
36f38 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
36f3c 136 D8 CB FB F8 |                             getbyte request, addr1, #3
36f40 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
36f44 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
36f48 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
36f4c 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
36f50 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
36f54 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
36f58 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
36f5c 13e             |                    
36f5c 13e             | '..................................................................................................
36f5c 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
36f5c 13e             | 
36f5c 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
36f60 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
36f64 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
36f68 141 D0 DF B7 F9 |                             setd    a, #id0
36f6c 142 D8 DF BF F9 |                             sets    a, #addr1
36f70 143 FE FF FF FF 
36f74 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
36f78 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
36f7c 146 3F DE A7 F9 |                             alti    a, #%111_111 
36f80 147 00 00 F0 F9 |                             muxq    0-0, 0-0
36f84 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
36f88 149 01 E2 63 FD |                             cogid   c
36f8c 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
36f90 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
36f94 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
36f98 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
36f9c 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
36fa0 14f 00 E0 03 F6 |                             mov     b, 0-0
36fa4 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
36fa8 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
36fac 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
36fb0 153 0C 00 90 AD |             if_z            jmp     #excluded               
36fb4 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
36fb8 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
36fbc 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
36fc0 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
36fc4 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
36fc8 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
36fcc 15a             | 
36fcc 15a             | 'determine priority cogs and build instructions for the polling sequence
36fcc 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
36fd0 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
36fd4 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
36fd8 15d             | 
36fd8 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
36fdc 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
36fe0 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
36fe4 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
36fe8 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
36fec 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
36ff0 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
36ff4 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
36ff8 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
36ffc 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
37000 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
37004 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
37008 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3700c 16a             | endprioloop
3700c 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
37010 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
37014 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
37018 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
3701c 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
37020 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
37024 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
37028 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
3702c 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
37030 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
37034 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
37038 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
3703c 176             | 
3703c 176             | ' populate the round robin COG polling instructions
3703c 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
37040 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
37044 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
37048 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
3704c 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
37050 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
37054 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
37058 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
3705c 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
37060 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
37064 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
37068 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
3706c 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
37070 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
37074 184             | '..................................................................................................
37074 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
37074 184             | 
37074 184             | set_latency                                                 '            (a) set latency
37074 184             | get_latency                                                 '            (b) get latency
37074 184             | set_burst                                                   '            (c) set burst size of bank
37074 184             | get_burst                                                   '            (d) get burst size of bank
37074 184             |                                                             '            (e) dump state
37074 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
37078 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
3707c 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
37080 187             |                                                             ' | | | | e  account for following AUGS
37080 187 04 00 00 FF 
37084 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
37088 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3708c 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
37090 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
37094 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
37098 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3709c 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
370a0 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
370a4 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
370a8 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
370ac 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
370b0 193             | 
370b0 193             | '..................................................................................................
370b0 193             | ' Misc EXECF code
370b0 193             | 
370b0 193 33 72 63 FD | start_read_exec             execf   newburstr
370b4 194 33 7C 63 FD | start_write_exec            execf   resumewrites
370b8 195 33 78 63 FD | continue_read_exec          execf   lockedreads
370bc 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
370c0 197             | 
370c0 197             | '..................................................................................................
370c0 197             | ' Variables
370c0 197             | 
370c0 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
370c4 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
370c8 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
370cc 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
370d0 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
370d4 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
370d8 19d             | 
370d8 19d 00 00 00 80 | xfreq1          long    $80000000
370dc 19e 00 00 00 40 | xfreq2          long    $40000000
370e0 19f 03 00 00 00 | delay           long    3
370e4 1a0             | 
370e4 1a0             | lutcodeaddr                 
370e4 1a0             | startupparams
370e4 1a0             | excludedcogs                                    'careful: shared register use!
370e4 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
370e8 1a1 00 00 00 00 | flags           long    0
370ec 1a2             | mask                                            'careful: shared register use!
370ec 1a2 00 00 00 00 | resetmaskA      long    0
370f0 1a3             | limit                                           'careful: shared register use!
370f0 1a3 00 00 00 00 | resetmaskB      long    0
370f4 1a4 00 00 00 00 | datapins        long    0
370f8 1a5             | const512                                        'careful: shared register use!
370f8 1a5 00 00 00 00 | devicelist      long    0
370fc 1a6 00 00 00 00 | coglist         long    0
37100 1a7 00 00 00 00 | mbox            long    0 
37104 1a8             | 
37104 1a8             | clkpin                                          'shared with code patched during init
37104 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
37108 1a9             | cspin                                           'shared with code patched during init
37108 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3710c 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
37110 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
37114 1ac 01 00 00 00 | clkdelay        long    1
37118 1ad 00 00 00 00 | regdatabus      long    0
3711c 1ae             | 
3711c 1ae 10 00 00 00 | deviceaddr      long    $10
37120 1af             | rrcounter
37120 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
37124 1b0             | 
37124 1b0             | ' jump addresses for the per COG handlers
37124 1b0 20 00 00 00 | cog0_handler    long    cog0
37128 1b1 2C 00 00 00 | cog1_handler    long    cog1
3712c 1b2 38 00 00 00 | cog2_handler    long    cog2
37130 1b3 44 00 00 00 | cog3_handler    long    cog3
37134 1b4 50 00 00 00 | cog4_handler    long    cog4
37138 1b5 5C 00 00 00 | cog5_handler    long    cog5
3713c 1b6 68 00 00 00 | cog6_handler    long    cog6
37140 1b7 74 00 00 00 | cog7_handler    long    cog7
37144 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
37148 1b9             | 
37148 1b9             | ' EXECF sequences
37148 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
3714c 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
37150 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
37154 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
37158 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
3715c 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
37160 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
37164 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
37164 1c0             | 
37164 1c0             | 
37164 1c0             | ' SKIPF sequences
37164 1c0             | skiptable
37164 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
37168 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
3716c 1c2 00 00 00 00 |                 long    0                      ' read modify write long
37170 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
37174 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
37178 1c5 00 00 00 00 | pattern2        long    0
3717c 1c6 00 00 00 00 | pattern3        long    0
37180 1c7 77 02 00 00 | singlelong      long    %1001110111  
37184 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
37188 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3718c 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
37190 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
37194 1cc             | 
37194 1cc             | ' LUT RAM address values
37194 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
37198 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3719c 1ce DB 02 00 00 | continue_write  long    continue_write_lut
371a0 1cf F6 02 00 00 | noread          long    noread_lut
371a4 1d0             | 
371a4 1d0 00 00 00 00 | id0             long    0
371a8 1d1 01 00 00 00 | id1             long    1
371ac 1d2 02 00 00 00 | id2             long    2
371b0 1d3 03 00 00 00 | id3             long    3
371b4 1d4 04 00 00 00 | id4             long    4
371b8 1d5 05 00 00 00 | id5             long    5
371bc 1d6 06 00 00 00 | id6             long    6
371c0 1d7 07 00 00 00 | id7             long    7
371c4 1d8             | 
371c4 1d8             | 'These next 10 request registers below are also temporarily reused during init 
371c4 1d8             | 'and COG updates and need to follow immediately after id0-id7
371c4 1d8 00 00 00 00 | addr1           long    0
371c8 1d9 00 00 00 00 | hubdata         long    0
371cc 1da 00 00 00 00 | count           long    0
371d0 1db 00 00 00 00 | addr2           long    0
371d4 1dc 00 00 00 00 | total           long    0
371d8 1dd 00 00 00 00 | offset1         long    0
371dc 1de 00 00 00 00 | offset2         long    0
371e0 1df 00 00 00 00 | link            long    0
371e4 1e0             | 
371e4 1e0             | burstwrite                                      'note shared register use during init
371e4 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
371e8 1e1 00 00 00 00 | id              long    0
371ec 1e2             | 
371ec 1e2 00 00 00 00 | header          long    0
371f0 1e3 00 00 00 00 | trailer         long    0
371f4 1e4 00 00 00 00 | cmdaddr         long    0
371f8 1e5 00 00 00 00 | request         long    0
371fc 1e6 00 00 00 00 | rrlimit         long    0
37200 1e7 00 00 00 00 | pinconfig       long    0
37204 1e8 00 00 00 00 | clks            long    0
37208 1e9 00 00 00 00 | resume          long    0
3720c 1ea 00 00 00 00 | orighubsize     long    0
37210 1eb 00 00 00 00 | wrclks          long    0
37214 1ec             | 
37214 1ec 00 00 00 00 | pattern         long    0
37218 1ed 00 00 00 00 | hubscratch      long    0
3721c 1ee 00 10 00 00 | val4k           long    4096
37220 1ef             | 
37220 1ef             | ' temporary general purpose regs
37220 1ef 00 00 00 00 | a               long    0
37224 1f0 00 00 00 00 | b               long    0
37228 1f1 00 00 00 00 | c               long    0
3722c 1f2 00 00 00 00 | d               long    0
37230 1f3             |                 fit     502
37230 1f3             | 
37230 1f3             |                 fit     502
37230 1f3             | 
37230 1f3             | '..................................................................................................
37230 1f3             | 
37230 1f3             |             orgh
37230                 | 
37230                 | lut_code
37230                 | 'HW init code up to 80 longs
37230                 | 
37230                 | '..................................................................................................
37230                 | ' Memory layout for LUT RAM once operational:
37230                 | '
37230                 | '  LUT RAM address      Usage
37230                 | '  ---------------      ----
37230                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
37230                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
37230                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
37230                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
37230                 | '
37230                 | ' Also during driver COG startup:
37230                 | ' $230-$24F is used for HW init setup
37230                 | ' $250-$26F is used as temporary vector storage 
37230                 | '..................................................................................................
37230                 | 
37230                 |                 org $230    
37230 230             | 
37230 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
37230 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
37234 231 24 16 60 FD |                             pollxfi
37238 232 FF AA 2A FF 
3723c 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
37240 234 28 00 B0 FD |                             call    #sendqspi
37244 235 07 F8 07 FF 
37248 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
3724c 237 28 00 B0 FD |                             call    #sendspi
37250 238 F8 07 78 FF 
37254 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
37258 23a 1C 00 B0 FD |                             call    #sendspi
3725c 23b 7F 78 78 FF 
37260 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
37264 23d 10 00 B0 FD |                             call    #sendspi 
37268 23e 2D 00 64 FD |                             ret
3726c 23f             | 
3726c 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
37270 240 32 0C 64 FD |                             skipf   #%110
37274 241 9C EF 03 F6 |                             mov     pb, xsendimm
37278 242             | 
37278 242 10 D0 07 F6 | sendspi                     mov     clks, #16
3727c 243 97 EF 03 F6 |                             mov     pb, ximm8lut
37280 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
37284 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
37288 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3728c 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
37290 248 24 36 60 FD |                             waitxfi                         'wait for the completion
37294 249 50 48 63 FD |                             fltl    datapins                'float data bus
37298 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3729c 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
372a0 24c             | 
372a0 24c 00 00 00 00 
372a4 24d 00 00 00 00 
372a8 24e 00 00 00 00 
372ac 24f 00 00 00 00 |                 long    0[$270-32-$]
372b0 250             |                 fit     $270-32  ' keep room for 32 vector longs
372b0 250             |     
372b0 250             |                 fit     $270-32  ' keep room for 32 vector longs
372b0 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
372b0 250             | rw_vect ' PSRAM jump vectors
372b0 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
372b4 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
372b8 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
372bc 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
372c0 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
372c4 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
372c8 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
372cc 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
372d0 258             | ro_vect ' R/O PSRAM jump vectors
372d0 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
372d4 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
372d8 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
372dc 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
372e0 25c 00 01 00 00 |                 long    unsupported
372e4 25d 00 01 00 00 |                 long    unsupported
372e8 25e 00 01 00 00 |                 long    unsupported
372ec 25f 00 01 00 00 |                 long    unsupported
372f0 260             | ctrl_vect ' Control jump vectors
372f0 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
372f4 261 00 01 00 00 |                 long    unsupported
372f8 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
372fc 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
37300 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
37304 265 00 01 00 00 |                 long    unsupported
37308 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3730c 267 3E 01 00 00 |                 long    reconfig 
37310 268             | no_vect ' Invalid bank jump vectors
37310 268 01 01 00 00 |                 long    invalidbank
37314 269 01 01 00 00 |                 long    invalidbank
37318 26a 01 01 00 00 |                 long    invalidbank
3731c 26b 01 01 00 00 |                 long    invalidbank
37320 26c 01 01 00 00 |                 long    invalidbank
37324 26d 01 01 00 00 |                 long    invalidbank
37328 26e 01 01 00 00 |                 long    invalidbank
3732c 26f 01 01 00 00 |                 long    invalidbank
37330 270             |                 fit     $270
37330 270             | 
37330 270             |                 fit     $270
37330 270             | '..................................................................................................
37330 270             | ' PSRAM READS
37330 270             |                                                             ' a b c d e f
37330 270             |                                                             ' B W L B R L  (a) byte read
37330 270             |                                                             ' Y O O U E O  (b) word read
37330 270             |                                                             ' T R N R S C  (c) long read
37330 270             |                                                             ' E D G S U K  (d) new burst read
37330 270             |                                                             '       T M E  (e) resumed sub-burst
37330 270             |                                                             '         E D  (f) locked sub-burst
37330 270             | 
37330 270             | 
37330 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
37334 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
37338 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
3733c 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
37340 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
37344 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
37348 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
3734c 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
37350 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
37354 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
37358 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
3735c 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
37360 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
37364 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
37368 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
3736c 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
37370 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
37374 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
37378 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
3737c 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
37380 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
37384 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
37388 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
3738c 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
37390 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
37394 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
37398 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3739c 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
373a0 28c             | 
373a0 28c             |                             ' fall through to read bursts
373a0 28c             |                         
373a0 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
373a0 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
373a4 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
373a8 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
373ac 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
373b0 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
373b4 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
373b8 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
373bc 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
373c0 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
373c4 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
373c8 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
373cc 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
373d0 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
373d4 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
373d8 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
373dc 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
373e0 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
373e4 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
373e8 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
373ec 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
373f0 2a0 E8 D1 03 F1 |                             add     clks, clks
373f4 2a1             | readcommon
373f4 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
373f8 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
373fc 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
37400 2a4             | 
37400 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
37404 2a5 69 C8 63 FD |                             rev     cmdaddr
37408 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3740c 2a7 61 C8 63 FD |                             mergeb  cmdaddr
37410 2a8             | 
37410 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
37414 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
37418 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
37418 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
3741c 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
37420 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
37424 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
37428 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
37428 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
3742c 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
37430 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
37434 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
37438 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
3743c 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
37440 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
37440 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
37444 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
37448 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
3744c 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
37450 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
37454 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
37458 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
3745c 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
37460 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
37464 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
37468 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
3746c 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
37470 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
37474 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
37478 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
37478 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
3747c 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
37480 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
37484 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
37488 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
3748c 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
37490 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
37494 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
37498 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3749c 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
374a0 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
374a4 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
374a8 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
374ac 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
374b0 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
374b4 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
374b8 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
374bc 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
374c0 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
374c4 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
374c8 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
374cc 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
374d0 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
374d4 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
374d8 2da 10 03 90 FD |                             jmp     #writecommon
374dc 2db             | 
374dc 2db             | '..................................................................................................
374dc 2db             | ' Burst continuation testing
374dc 2db             | 
374dc 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
374e0 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
374e4 2dd             | continue_read_lut          
374e4 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
374e8 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
374ec 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
374f0 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
374f4 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
374f8 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
374fc 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
37500 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
37504 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
37508 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3750c 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
37510 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
37514 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
37518 2ea             | 
37518 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3751c 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
37520 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
37524 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
37528 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
3752c 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
37530 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
37534 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
37538 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
3753c 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
37540 2f4 2A 1C 66 0D |             _ret_           push    #poller
37544 2f5             | 
37544 2f5             | 
37544 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
37548 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
37548 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
3754c 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
37550 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
37554 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
37558 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
3755c 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
37560 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
37564 2fd 2D 00 64 FD |                             ret                             ' | continue processing
37568 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
3756c 2ff             | '..................................................................................................
3756c 2ff             | ' Completion of requests
3756c 2ff             | 
3756c 2ff             | complete_rw_lut             
3756c 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
37570 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
37574 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
37578 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
3757c 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
37580 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
37584 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
37588 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3758c 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
37590 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
37594 309 32 62 64 AD |             if_z            skipf   #%110001
37598 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3759c 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
375a0 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
375a4 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
375a8 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
375ac 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
375b0 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
375b4 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
375b8 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
375bc 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
375c0 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
375c4 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
375c8 316             |                                                             ' skipcase (a) gfx copy to/from hub
375c8 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
375c8 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
375c8 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
375cc 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
375d0 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
375d4 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
375d8 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
375dc 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
375e0 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
375e4 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
375e8 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
375ec 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
375f0 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
375f4 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
375f8 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
375fc 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
37600 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
37604 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
37608 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3760c 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
37610 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
37614 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
37618 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3761c 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
37620 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
37624 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
37628 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3762c 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
37630 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
37634 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
37638 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
3763c 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
37640 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
37644 335 DF B7 03 A6 |             if_z            mov     addr2, link
37648 336 34 FF 9F AD |             if_z            jmp     #checknext
3764c 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
37650 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
37654 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
37658 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
3765c 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
37660 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
37664 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
37668 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
3766c 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
37670 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
37674 341             | 
37674 341             | '..................................................................................................
37674 341             | ' PSRAM WRITES
37674 341             |                                                             '  a b c d e f g h
37674 341             | 
37674 341             |                                                             '  B W L F B R L L (a) byte write(s)
37674 341             |                                                             '  Y O O I U E O O (b) word write(s)
37674 341             |                                                             '  T R N L R S C C (c) long write(s)
37674 341             |                                                             '  E D G L S U K K (d) resumed fill
37674 341             |                                                             '          T M E E (e) new burst write
37674 341             |                                                             '            E D D (f) resumed burst
37674 341             |                                                             '              F B (g) locked fill
37674 341             |                                                             '              I U (h) locked burst write
37674 341             |                                                             '              L R 
37674 341             |                                                             '              L S 
37674 341             |                                                             '                T 
37674 341             | 
37674 341             | w_single                   
37674 341             | w_fill_cont           
37674 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
37678 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3767c 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
37680 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
37684 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
37688 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3768c 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
37690 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
37694 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
37698 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3769c 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
376a0 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
376a4 34d             |                ' disable call to r_resume_burst for single longs when z=0
376a4 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
376a8 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
376ac 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
376b0 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
376b4 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
376b8 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
376bc 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
376c0 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
376c4 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
376c8 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
376cc 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
376d0 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
376d4 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
376d8 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
376dc 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
376e0 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
376e4 35d             |         
376e4 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
376e4 35d             |             '
376e4 35d             |             '  At least one of these 3 optional components will be sent
376e4 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
376e4 35d             |             '     body - N x full longs of data
376e4 35d             |             '     trailer - last partial long of data
376e4 35d             |             '
376e4 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
376e4 35d             |             '
376e4 35d             |             'Case    Type                           Sends
376e4 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
376e4 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
376e4 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
376e4 35d             |             ' 4)     Multiple long fill             body only
376e4 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
376e4 35d             | 
376e4 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
376e4 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
376e8 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
376ec 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
376f0 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
376f4 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
376f8 362 13 8C 07 F6 |                             mov     pattern3, #%10011
376fc 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
37700 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
37704 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
37708 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3770c 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
37710 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
37714 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
37718 36a             |                             
37718 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3771c 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
37720 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
37724 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
37728 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
3772c 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
37730 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
37734 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
37738 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
3773c 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
37740 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
37744 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
37748 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
3774c 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
37750 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
37754 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
37758 37a             | 
37758 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3775c 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
37760 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
37764 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
37768 37e             |                  
37768 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
3776c 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
37770 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
37774 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
37778 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
3777c 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
37780 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
37784 385             | 
37784 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
37788 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3778c 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
37790 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
37794 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
37798 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3779c 38b             | 
3779c 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3779c 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
377a0 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
377a4 38d 2A B0 63 FD |                             push    addr1                   'save address
377a8 38e             | 
377a8 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
377a8 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
377ac 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
377b0 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
377b4 391             |             
377b4 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
377b8 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
377bc 393 2B B0 63 FD |                             pop     addr1                   'restore address
377c0 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
377c4 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
377c8 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
377cc 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
377d0 398             | 
377d0 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
377d4 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
377d8 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
377dc 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
377e0 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
377e4 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
377e8 39e             | 
377e8 39e             |                             'trailer is done
377e8 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
377ec 39f             | 
377ec 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
377f0 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
377f4 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
377f8 3a2             | 
377f8 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
377fc 3a3 69 C8 63 FD |                             rev     cmdaddr                 
37800 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
37804 3a5 61 C8 63 FD |                             mergeb  cmdaddr
37808 3a6             |                             
37808 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3780c 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
37810 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
37814 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
37818 3aa             |                                                          
37818 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3781c 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
37820 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
37824 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
37828 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
3782c 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
37830 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
37834 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
37838 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
3783c 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
37840 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
37844 3b5             |  
37844 3b5 59 52 63 FD |                             drvh    cspin
37848 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
3784c 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
37850 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
37854 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
37858 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
3785c 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
37860 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
37864 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
37868 3be EA E5 03 F6 |                             mov     d, orighubsize
3786c 3bf EF E5 63 F0 |                             shl     d, a
37870 3c0 F2 E3 83 F1 |                             sub     c, d
37874 3c1 DD E3 03 F1 |                             add     c, offset1
37878 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
3787c 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
37880 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
37884 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
37888 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3788c 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
37890 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
37894 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
37898 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3789c 3cb BB D3 03 F6 |                             mov     resume, restorefill
378a0 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
378a4 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
378a8 3ce 6C FC BF CD |             if_c            call    #yield
378ac 3cf 2D 00 64 FD |                             ret
378b0 3d0             |                            
378b0 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
378b0 3d0             |                       '     rczl    pa                      'rotate left into address offset
378b0 3d0             |                       '     rczl    c wcz                   'restore count and flags
378b0 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
378b4 3d1 02 EC 67 F0 |                             shl     pa, #2
378b8 3d2 28 06 64 AD |             if_z            setq    #3
378bc 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
378c0 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
378c4 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
378c8 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
378cc 3d7             | 
378cc 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
378d0 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
378d4 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
378d8 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
378dc 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
378e0 3dc             |                 fit 1024-32
378e0 3dc             |         
378e0 3dc             | 
378e0 3dc             | '..................................................................................................
378e0 3dc             | 
378e0 3dc             |                 fit 1024-32
378e0 3dc 00 00 00 00 
378e4 3dd 00 00 00 00 
378e8 3de 00 00 00 00 
378ec 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
378f0 3e0             |                 org 1024-32
378f0 000             | 
378f0 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
378f0 000 00 00 00 00 |                 long $0000
378f4 001 11 11 00 00 |                 long $1111
378f8 002 22 22 00 00 |                 long $2222
378fc 003 33 33 00 00 |                 long $3333
37900 004 44 44 00 00 |                 long $4444
37904 005 55 55 00 00 |                 long $5555
37908 006 66 66 00 00 |                 long $6666
3790c 007 77 77 00 00 |                 long $7777
37910 008 88 88 00 00 |                 long $8888
37914 009 99 99 00 00 |                 long $9999
37918 00a AA AA 00 00 |                 long $aaaa
3791c 00b BB BB 00 00 |                 long $bbbb
37920 00c CC CC 00 00 |                 long $cccc
37924 00d DD DD 00 00 |                 long $dddd
37928 00e EE EE 00 00 |                 long $eeee
3792c 00f FF FF 00 00 |                 long $ffff
37930 010             | 
37930 010             | 'masks
37930 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
37934 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
37938 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
3793c 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
37940 014             | 
37940 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
37944 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
37948 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
3794c 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
37950 018             | 
37950 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
37954 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
37958 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
3795c 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
37960 01c             | 
37960 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
37964 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
37968 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
3796c 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
37970 020             |         fit 1024
37970 020             | 
37970 020             |         fit 1024
37970 020             | 
37970 020             | '--------------------------------------------------------------------------------------------------
37970 020             |         orgh
37970                 | 
37970                 | gfxexpansion
37970                 |                             'simple line drawing graphics expansion of memory driver
37970                 |                             'jmp     #donerepeats                'just return for now
37970                 | 
37970     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
37974     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
37978     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
3797c     DD E1 03 F6 |                             mov     b, offset1              'get error term
37980     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
37984     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
37988     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3798c     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
37990     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
37994     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
37998     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3799c     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
379a0     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
379a4     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
379a8     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
379ac     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
379b0     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
379b4     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
379b8     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
379bc     DC E5 33 F9 |                             getword d, total, #0            'get line width
379c0     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
379c4     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
379c8     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
379cc     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
379d0     C3 03 80 FD |                             jmp     #readmask               'continue filling
379d4                 | 	alignl
379d4                 | _usbnew_spin2_dat_
379d4                 |                 org     $000
379d4 000             | 
379d4 000             | usb_host_start
379d4 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
379d8 001             | 
379d8 001 03 00 00 FF 
379dc 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
379e0 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
379e4 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
379e8 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
379ec 006 29 70 63 FD |                 setq2   htmp
379f0 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
379f4 008             | 
379f4 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
379f8 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
379fc 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
37a00 00b             | 
37a00 00b             | '------------------------------------------------------------------------------
37a00 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
37a00 00b             | ' special because the receiving function must not respond with either STALL or
37a00 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
37a00 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
37a00 00b             | ' corrupt packet, it must ignore the transaction
37a00 00b             | '------------------------------------------------------------------------------
37a00 00b             | ' On entry:
37a00 00b             | '   PTRA - start address of the SETUP data struct.
37a00 00b             | ' On exit:
37a00 00b             | '   retval - PID_ACK on success, otherwise error code.
37a00 00b             | '------------------------------------------------------------------------------
37a00 00b             | txn_setup
37a00 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
37a04 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
37a08 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
37a0c 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
37a10 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
37a14 010             | .setup
37a14 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
37a18 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37a1c 012 2D 00 64 AD |         if_z    ret
37a20 013 7C 0B B0 FD |                 call    #retry_wait
37a24 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
37a28 015 2D 00 64 AD |         if_z    ret
37a2c 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
37a30 017 E0 FF 9F FD |                 jmp     #.setup
37a34 018             | 
37a34 018             | '------------------------------------------------------------------------------
37a34 018             | ' IN/INTERRUPT transaction.
37a34 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
37a34 018             | '------------------------------------------------------------------------------
37a34 018             | ' On entry:
37a34 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
37a34 018             | '     CRC(b19..23).
37a34 018             | ' On exit:
37a34 018             | '------------------------------------------------------------------------------
37a34 018             | txn_in
37a34 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
37a38 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
37a3c 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
37a40 01b             | 
37a40 01b             |                 ' Fall through to urx_packet
37a40 01b             | 
37a40 01b             | '------------------------------------------------------------------------------
37a40 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
37a40 01b             | ' received are handshakes and IN DATAx.
37a40 01b             | '------------------------------------------------------------------------------
37a40 01b             | ' On entry:
37a40 01b             | ' On exit:
37a40 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
37a40 01b             | '     returned.
37a40 01b             | '------------------------------------------------------------------------------
37a40 01b             | urx_packet
37a40 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
37a44 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37a48 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
37a4c 01e 1A 92 63 FD |                 getct   hct2
37a50 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
37a54 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
37a58 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
37a5c 022             | .wait_sop
37a5c 022 22 A7 8A FA |                 rdpin   urx, dm
37a60 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37a64 024 08 00 90 CD |         if_c    jmp     #.get_pid
37a68 025 FC 25 CC FB |                 jnct2   #.wait_sop
37a6c 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
37a70 027             | .get_pid
37a70 027 28 02 B0 FD |                 call    #urx_next
37a74 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
37a78 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
37a7c 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
37a80 02b             | .chk_pid
37a80 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37a84 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
37a88 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
37a8c 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
37a90 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
37a94 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
37a98 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
37a9c 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
37aa0 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
37aa4 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
37aa8 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
37aac 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
37ab0 037             | .ack_resend
37ab0 037 22 A7 82 FA |                 rqpin   urx, dm
37ab4 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
37ab8 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
37abc 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
37ac0 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
37ac4 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
37ac8 03d             | .chk_eop
37ac8 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37acc 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
37ad0 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
37ad4 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
37ad8 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
37adc 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
37ae0 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
37ae4 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
37ae8 045 2D 00 64 FD |                 ret
37aec 046             | .idle
37aec 046 22 A7 82 FA |                 rqpin   urx, dm
37af0 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37af4 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
37af8 049 2D 00 64 FD |                 ret
37afc 04a             | 
37afc 04a             | '------------------------------------------------------------------------------
37afc 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
37afc 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
37afc 04a             | ' if one is required.
37afc 04a             | '------------------------------------------------------------------------------
37afc 04a             | ' On entry:
37afc 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
37afc 04a             | ' On exit:
37afc 04a             | '------------------------------------------------------------------------------
37afc 04a             | utx_token
37afc 04a 22 A7 82 FA |                 rqpin   urx, dm
37b00 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37b04 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
37b08 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
37b0c 04e 34 0D B0 CD |         if_c    call    #utx_pre
37b10 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
37b14 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
37b18 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
37b1c 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
37b20 053             | .next_byte
37b20 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
37b24 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
37b28 055             | .wait
37b28 055 40 46 72 FD |                 testp   dp                      wc
37b2c 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
37b30 057 23 03 08 FC |                 akpin   dp
37b34 058 22 A5 22 FC |                 wypin   utx, dm
37b38 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
37b3c 05a             | 
37b3c 05a             | '------------------------------------------------------------------------------
37b3c 05a             | ' SETUP/OUT/INTERRUPT transaction.
37b3c 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
37b3c 05a             | '------------------------------------------------------------------------------
37b3c 05a             | ' On entry:
37b3c 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
37b3c 05a             | '     CRC(b19..23).
37b3c 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
37b3c 05a             | '   pkt_data - count of DATAx payload bytes to send.
37b3c 05a             | ' On exit:
37b3c 05a             | '------------------------------------------------------------------------------
37b3c 05a             | txn_out
37b3c 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
37b40 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
37b44 05c 00 00 C0 FF 
37b48 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
37b4c 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
37b50 05f             | 
37b50 05f             |                 ' Fall through to utx_data
37b50 05f             | 
37b50 05f             | '------------------------------------------------------------------------------
37b50 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
37b50 05f             | ' calculated while the data byte is being shifted out. Since data stage
37b50 05f             | ' success/fail is not determined until the status stage of the transaction,
37b50 05f             | ' this routine is only concerned about the current DATAx packet.
37b50 05f             | '------------------------------------------------------------------------------
37b50 05f             | ' On entry:
37b50 05f             | '   PTRA - hub start address of the data to read.
37b50 05f             | '   pkt_cnt - data payload size.
37b50 05f             | ' On exit:
37b50 05f             | '------------------------------------------------------------------------------
37b50 05f             | utx_data
37b50 05f 22 A7 82 FA |                 rqpin   urx, dm
37b54 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37b58 061 F4 FF 9F CD |         if_c    jmp     #utx_data
37b5c 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
37b60 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
37b64 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
37b68 065 D8 0C B0 CD |         if_c    call    #utx_pre
37b6c 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
37b70 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
37b74 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
37b78 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
37b7c 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
37b80 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
37b84 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
37b88 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
37b8c 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
37b90 06f             | .read_byte
37b90 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
37b94 070 F0 00 B0 FD |                 call    #utx_byte
37b98 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
37b9c 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
37ba0 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
37ba4 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
37ba8 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
37bac 076             | .send_crc
37bac 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
37bb0 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
37bb4 078 D0 00 B0 FD |                 call    #utx_byte
37bb8 079 5D A5 EA F8 |                 getbyte utx, crc, #1
37bbc 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
37bc0 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
37bc4 07c             | 
37bc4 07c             | '------------------------------------------------------------------------------
37bc4 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
37bc4 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
37bc4 07c             | ' expects that the packet includes at least the CRC word.
37bc4 07c             | '
37bc4 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
37bc4 07c             | ' was requested, which makes it difficult to determine where the data stops
37bc4 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
37bc4 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
37bc4 07c             | ' USB-16 expected residual value of 0xB001.
37bc4 07c             | '
37bc4 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
37bc4 07c             | ' so the caller can verify IN success before writing the data to its final
37bc4 07c             | ' destination.
37bc4 07c             | '------------------------------------------------------------------------------
37bc4 07c             | ' On entry:
37bc4 07c             | '   pkt_data - max byte count expected to be in the packet.
37bc4 07c             | '   newb_flg - signals new byte ready when toggled.
37bc4 07c             | ' On exit:
37bc4 07c             | '   pkt_cnt - actual number of bytes read.
37bc4 07c             | '------------------------------------------------------------------------------
37bc4 07c             | urx_data
37bc4 07c F7 75 03 F6 |                 mov     htmp2, pb
37bc8 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
37bcc 07e 00 00 C0 FF 
37bd0 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
37bd4 080 BA EF 03 F6 |                 mov     pb, htmp2
37bd8 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
37bdc 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
37be0 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
37be4 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
37be8 085             | .wait_byte
37be8 085             | ' In-line rx for max speed
37be8 085 22 A7 82 FA |                 rqpin   urx, dm
37bec 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
37bf0 087 53 A5 02 F5 |                 and     utx, urx
37bf4 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
37bf8 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
37bfc 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
37c00 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
37c04 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
37c08 08d DC FF 9F FD |                 jmp     #.wait_byte
37c0c 08e             | .get_byte
37c0c 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
37c10 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
37c14 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
37c18 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
37c1c 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
37c20 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
37c24 094             | .end_crc
37c24 094 01 B8 06 F1 |                 add     pkt_cnt, #1
37c28 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
37c2c 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
37c30 097 2D 00 64 1D |         if_a    ret
37c34 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
37c34 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
37c34 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
37c34 098             | ' to miss it, so cheat a bit and look for SOP clear here.
37c34 098 22 A7 82 FA |                 rqpin   urx, dm
37c38 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
37c3c 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
37c40 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
37c40 09b             | .chk_crc
37c40 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
37c44 09c 58 00 00 FF 
37c48 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
37c4c 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
37c50 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
37c54 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
37c58 0a1 34 09 B0 FD |                 call    #poll_waitx
37c5c 0a2             | 
37c5c 0a2             |                 ' Fall through to utx_handshake
37c5c 0a2             | 
37c5c 0a2             | '------------------------------------------------------------------------------
37c5c 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
37c5c 0a2             | ' the appropriate IP delay has been inserted.
37c5c 0a2             | '------------------------------------------------------------------------------
37c5c 0a2             | ' On entry:
37c5c 0a2             | '   retval - handshake PID to send.
37c5c 0a2             | ' On exit:
37c5c 0a2             | '   retval unchanged.
37c5c 0a2             | '------------------------------------------------------------------------------
37c5c 0a2             | utx_handshake
37c5c 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
37c60 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
37c64 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
37c68 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
37c6c 0a6 5F A5 02 F6 |                 mov     utx, retval
37c70 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
37c74 0a8             | .idle
37c74 0a8 22 A7 82 FA |                 rqpin   urx, dm
37c78 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37c7c 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
37c80 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
37c84 0ac 08 09 90 FD |                 jmp     #poll_waitx
37c88 0ad             | 
37c88 0ad             | '------------------------------------------------------------------------------
37c88 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
37c88 0ad             | '------------------------------------------------------------------------------
37c88 0ad             | ' On entry:
37c88 0ad             | '   utx - byte to transmit.
37c88 0ad             | ' On exit:
37c88 0ad             | '------------------------------------------------------------------------------
37c88 0ad             | utx_byte
37c88 0ad 40 46 72 FD |                 testp   dp                      wc
37c8c 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
37c90 0af 23 03 08 FC |                 akpin   dp
37c94 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
37c98 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
37c9c 0b2             | 
37c9c 0b2             | '------------------------------------------------------------------------------
37c9c 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
37c9c 0b2             | '------------------------------------------------------------------------------
37c9c 0b2             | ' On entry:
37c9c 0b2             | ' On exit:
37c9c 0b2             | '   retval - the byte read.
37c9c 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
37c9c 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
37c9c 0b2             | '     received.
37c9c 0b2             | '------------------------------------------------------------------------------
37c9c 0b2             | urx_next
37c9c 0b2 22 A7 8A FA |                 rdpin   urx, dm
37ca0 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
37ca4 0b4 53 A5 02 F5 |                 and     utx, urx
37ca8 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
37cac 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
37cb0 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
37cb4 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
37cb8 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37cbc 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
37cc0 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
37cc4 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
37cc8 0bd 2D 00 64 FD |                 ret
37ccc 0be             | 
37ccc 0be             | '------------------------------------------------------------------------------
37ccc 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
37ccc 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
37ccc 0be             | ' length, and the PID is not included in the CRC calculation:
37ccc 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
37ccc 0be             | '  CRC5  ENDP ADDRESS PID
37ccc 0be             | ' %00000_1111_1111111_xxxxxxxx
37ccc 0be             | '------------------------------------------------------------------------------
37ccc 0be             | ' On entry:
37ccc 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
37ccc 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
37ccc 0be             | ' On exit:
37ccc 0be             | '   ep_addr_pid - CRC value appended to the packet.
37ccc 0be             | '------------------------------------------------------------------------------
37ccc 0be             | calc_crc5
37ccc 0be FF 03 00 FF 
37cd0 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
37cd4 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
37cd8 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
37cdc 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
37ce0 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
37ce4 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
37ce8 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
37cec 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
37cf0 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
37cf4 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
37cf8 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
37cfc 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
37d00 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
37d04 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
37d08 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
37d0c 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
37d10 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
37d14 0d0             | 
37d14 0d0             | '------------------------------------------------------------------------------
37d14 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
37d14 0d0             | '------------------------------------------------------------------------------
37d14 0d0             | isr1_fsframe
37d14 0d0 1A 92 62 FD |                 getct   iframe_ct_base
37d18 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37d1c 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37d20 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
37d24 0d4             | .wait
37d24 0d4 40 46 72 FD |                 testp   dp                      wc
37d28 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
37d2c 0d6 23 03 08 FC |                 akpin   dp
37d30 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
37d34 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
37d38 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
37d3c 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
37d40 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
37d44 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
37d48 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
37d4c 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
37d50 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
37d54 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
37d58 0e1 2C FF BF FD |                 call    #utx_byte
37d5c 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
37d60 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
37d64 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
37d68 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
37d6c 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
37d70 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
37d74 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
37d78 0e9 5B A5 42 F5 |                 or      utx, icrc
37d7c 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
37d80 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
37d84 0ec 20 00 90 FD |                 jmp     #isr1_wait
37d88 0ed             | isr1_lsframe
37d88 0ed 1A 92 62 FD |                 getct   iframe_ct_base
37d8c 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37d90 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37d94 0f0             | .wait
37d94 0f0 40 46 72 FD |                 testp   dp                      wc
37d98 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
37d9c 0f2 23 03 08 FC |                 akpin   dp
37da0 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
37da4 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
37da8 0f5             | isr1_wait
37da8 0f5 22 A5 82 FA |                 rqpin   utx, dm
37dac 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
37db0 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
37db4 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
37db8 0f9 03 00 00 FF 
37dbc 0fa FF B3 06 F5 |                 and     frame, ##$7ff
37dc0 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
37dc4 0fc F5 FF 3B FB |                 reti1
37dc8 0fd             | 
37dc8 0fd             | '------------------------------------------------------------------------------
37dc8 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
37dc8 0fd             | ' transaction will complete before the next frame is triggered.
37dc8 0fd             | '------------------------------------------------------------------------------
37dc8 0fd             | ' On entry:
37dc8 0fd             | ' On exit:
37dc8 0fd             | '------------------------------------------------------------------------------
37dc8 0fd             | wait_txn_ok
37dc8 0fd 1A 74 63 FD |                 getct   htmp2
37dcc 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
37dd0 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37dd4 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
37dd8 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
37ddc 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
37de0 103 2D 00 64 FD |                 ret
37de4 104             | 
37de4 104             | '------------------------------------------------------------------------------
37de4 104             | ' A device connection was detected, or a bus reset was requested by the USB
37de4 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
37de4 104             | ' and perform a reset sequence prior to device enumeration.
37de4 104             | '------------------------------------------------------------------------------
37de4 104             | dev_reset
37de4 104 22 A7 82 FA |                 rqpin   urx, dm
37de8 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
37dec 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
37df0 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
37df4 108             | reset
37df4 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
37df8 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
37dfc 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
37e00 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
37e04 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
37e08 10d 1A 92 62 FD |                 getct   iframe_ct_base
37e0c 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37e10 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37e14 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
37e18 111 24 70 07 F1 |                 add     htmp, #36
37e1c 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
37e20 113             | .framewait
37e20 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
37e24 114 F8 FF 9F CD |         if_b    jmp     #.framewait
37e28 115 2D 00 64 FD |                 ret
37e2c 116             | 
37e2c 116             | '------------------------------------------------------------------------------
37e2c 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
37e2c 116             | '------------------------------------------------------------------------------
37e2c 116             | ' On entry:
37e2c 116             | '   PTRA - source address.
37e2c 116             | '   PB - destination address.
37e2c 116             | '   hr0 - length of copy, in bytes.
37e2c 116             | ' On exit:
37e2c 116             | '------------------------------------------------------------------------------
37e2c 116             | hmemcpy
37e2c 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
37e30 117 F7 71 43 FC |                 wrbyte  htmp, pb
37e34 118 01 EE 07 F1 |                 add     pb, #1
37e38 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
37e3c 11a             | 
37e3c 11a             | '------------------------------------------------------------------------------
37e3c 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
37e3c 11a             | ' loop until the errant device is disconnected.
37e3c 11a             | '------------------------------------------------------------------------------
37e3c 11a             | ' On entry:
37e3c 11a             | ' On exit:
37e3c 11a             | '------------------------------------------------------------------------------
37e3c 11a             | host_error
37e3c 11a             |           if ERROR_LED >= 0
37e3c 11a             |           end
37e3c 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
37e40 11b             | 
37e40 11b             | '------------------------------------------------------------------------------
37e40 11b             | ' Get HID descriptor buffer for current port
37e40 11b             | '------------------------------------------------------------------------------
37e40 11b             | ' On entry:
37e40 11b             | ' On exit:
37e40 11b             | '   PB - HID descriptor buffer pointer
37e40 11b             | '------------------------------------------------------------------------------
37e40 11b             | get_hid_descr_buffer
37e40 11b 2D EF 03 F6 |                 mov     pb, hdev_port
37e44 11c 01 EE E7 F2 |                 cmpsub  pb, #1
37e48 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
37e4c 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
37e50 11f             | 
37e50 11f             | 
37e50 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
37e54 120             | 
37e54 120             | ' USB commands and error codes
37e54 120 00 00 00 00 | cmd_data        long    0
37e58 121 00 00 00 00 | usb_err_code    long    ERR_NONE
37e5c 122             | 
37e5c 122             | ' Parameters block assigned at cog startup
37e5c 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
37e60 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
37e64 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
37e68 125             | if ACTIVITY_LED >= 0
37e68 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
37e68 125             | end
37e68 125             | if ERROR_LED >= 0
37e68 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
37e68 125             | end
37e68 125 00 00 00 00 | hid_descr_p     long    0
37e6c 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
37e6c 126             | 'hkbd_report_p   long    0
37e6c 126 00 00 00 00 | hub_descr_p     long    0
37e70 127 00 00 00 00 | urx_buff_p      long    0
37e74 128 00 00 00 00 | dev_desc_buff_p long    0
37e78 129 00 00 00 00 | con_desc_buff_p long    0
37e7c 12a 00 00 00 00 | cache_start_p   long    0
37e80 12b 00 00 00 00 | cache_end_p     long    0
37e84 12c             | if EMUPAD_MAX_PLAYER > 0
37e84 12c             | emupad_out_ptr  long    0
37e84 12c             | end
37e84 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
37e88 12d             | 
37e88 12d             | hdev_init_start
37e88 12d             | hdev_port       res     1
37e88 12d             | hdev_port       res     1
37e88 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
37e88 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
37e88 12d             | kbm_next_datax  res     1
37e88 12d             | kbm_next_datax  res     1
37e88 12d             | hub_intf_num    res     1
37e88 12d             | hub_intf_num    res     1
37e88 12d             | hub_next_datax  res     1
37e88 12d             | hub_next_datax  res     1
37e88 12d             | hub_status_chg  res     1
37e88 12d             | hub_status_chg  res     1
37e88 12d             | hub_port_status res     1
37e88 12d             | hub_port_status res     1
37e88 12d             | if HAVE_MOUSE
37e88 12d             | ms_intf_num     res     1
37e88 12d             | ms_intf_num     res     1
37e88 12d             | ms_in_max_pkt   res     1
37e88 12d             | ms_in_max_pkt   res     1
37e88 12d             | end
37e88 12d             | kb_intf_num     res     1
37e88 12d             | kb_intf_num     res     1
37e88 12d             | kb_interval     res     1
37e88 12d             | kb_interval     res     1
37e88 12d             | kb_in_max_pkt   res     1
37e88 12d             | kb_in_max_pkt   res     1
37e88 12d             | kb_max_index    res     1
37e88 12d             | kb_max_index    res     1
37e88 12d             | kb_led_states   res     1
37e88 12d             | kb_led_states   res     1
37e88 12d             | gp_intf_num     res     1
37e88 12d             | gp_intf_num     res     1
37e88 12d             | gp_interval     res     1
37e88 12d             | gp_interval     res     1
37e88 12d             | gp_max_index    res     1
37e88 12d             | gp_max_index    res     1
37e88 12d             | gp_descr_len    res     1+MAX_DEVICES
37e88 12d             | gp_descr_len    res     1+MAX_DEVICES
37e88 12d             | hdev_init_end
37e88 12d             | 
37e88 12d             | ' Initialized at cog startup:
37e88 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
37e88 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
37e88 12d             | iframe_ct_new   res     1
37e88 12d             | iframe_ct_new   res     1
37e88 12d             | iframe_ct_base  res     1
37e88 12d             | iframe_ct_base  res     1
37e88 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
37e88 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
37e88 12d             | 
37e88 12d             | ' This register block is reset to zero when a USB device connects
37e88 12d             | hreg_init_start
37e88 12d             | hstatus         res     1         ' Host status flags
37e88 12d             | hstatus         res     1         ' Host status flags
37e88 12d             | hctwait         res     1         ' Poll-based wait clocks
37e88 12d             | hctwait         res     1         ' Poll-based wait clocks
37e88 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
37e88 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
37e88 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
37e88 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
37e88 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
37e88 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
37e88 12d             | xfer_retry      res     1         ' Control transfer retry count
37e88 12d             | xfer_retry      res     1         ' Control transfer retry count
37e88 12d             | retry           res     1         ' Transaction retry count
37e88 12d             | retry           res     1         ' Transaction retry count
37e88 12d             | utx             res     1         ' Byte to transmit on USB
37e88 12d             | utx             res     1         ' Byte to transmit on USB
37e88 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
37e88 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
37e88 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
37e88 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
37e88 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
37e88 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
37e88 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
37e88 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
37e88 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
37e88 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
37e88 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
37e88 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
37e88 12d             | frame           res     1         ' USB 1ms frame counter value
37e88 12d             | frame           res     1         ' USB 1ms frame counter value
37e88 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
37e88 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
37e88 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
37e88 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
37e88 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
37e88 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
37e88 12d             | crc             res     1         ' Used for CRC16 calculation
37e88 12d             | crc             res     1         ' Used for CRC16 calculation
37e88 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
37e88 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
37e88 12d             | retval          res     1         ' Global success/fail return parameter
37e88 12d             | retval          res     1         ' Global success/fail return parameter
37e88 12d             | context_retval  res     1         ' Operation contextual return parameter
37e88 12d             | context_retval  res     1         ' Operation contextual return parameter
37e88 12d             | ' Device stuff
37e88 12d             | hdev_id         res     1+MAX_DEVICES
37e88 12d             | hdev_id         res     1+MAX_DEVICES
37e88 12d             | hdev_bcd        res     1
37e88 12d             | hdev_bcd        res     1
37e88 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
37e88 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
37e88 12d             | ' Keyboard/mouse stuff
37e88 12d             | hctrl_ep_addr   res     1
37e88 12d             | hctrl_ep_addr   res     1
37e88 12d             | hctrl_max_pkt   res     1
37e88 12d             | hctrl_max_pkt   res     1
37e88 12d             | hconfig_base    res     1
37e88 12d             | hconfig_base    res     1
37e88 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
37e88 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
37e88 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
37e88 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
37e88 12d             | hdev_class      res     1
37e88 12d             | hdev_class      res     1
37e88 12d             | hdev_subclass   res     1
37e88 12d             | hdev_subclass   res     1
37e88 12d             | hdev_protocol   res     1
37e88 12d             | hdev_protocol   res     1
37e88 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
37e88 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
37e88 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
37e88 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
37e88 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
37e88 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
37e88 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
37e88 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
37e88 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
37e88 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
37e88 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
37e88 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
37e88 12d             | if HAVE_MOUSE
37e88 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
37e88 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
37e88 12d             | end
37e88 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
37e88 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
37e88 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
37e88 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
37e88 12d             | hdev_ep_addr    res     1+MAX_DEVICES
37e88 12d             | hdev_ep_addr    res     1+MAX_DEVICES
37e88 12d             | hdev_out_addr   res     1
37e88 12d             | hdev_out_addr   res     1
37e88 12d             | 
37e88 12d             | if EMUPAD_MAX_PLAYER > 0
37e88 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
37e88 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
37e88 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
37e88 12d             | end
37e88 12d             | 
37e88 12d             | hreg_init_end
37e88 12d             | 
37e88 12d             | hidr_start
37e88 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
37e88 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
37e88 12d             | hidr_flags      res     1
37e88 12d             | hidr_flags      res     1
37e88 12d             | hidr_axis       res     3
37e88 12d             | hidr_axis       res     3
37e88 12d             | hidr_buttons    res     1
37e88 12d             | hidr_buttons    res     1
37e88 12d             | hidr_hats       res     1
37e88 12d             | hidr_hats       res     1
37e88 12d             | '' Above are actually useful values, 6 longs
37e88 12d             | hidr_id         res     1
37e88 12d             | hidr_id         res     1
37e88 12d             | hidr_state      res     1
37e88 12d             | hidr_state      res     1
37e88 12d             | hidr_size       res     1
37e88 12d             | hidr_size       res     1
37e88 12d             | hidr_count      res     1
37e88 12d             | hidr_count      res     1
37e88 12d             | hidr_offset     res     1
37e88 12d             | hidr_offset     res     1
37e88 12d             | hidr_usage_idx  res     1
37e88 12d             | hidr_usage_idx  res     1
37e88 12d             | hidr_lminmax    res     1
37e88 12d             | hidr_lminmax    res     1
37e88 12d             | hidr_pminmax    res     1
37e88 12d             | hidr_pminmax    res     1
37e88 12d             | hidr_type       res     1
37e88 12d             | hidr_type       res     1
37e88 12d             | hidr_end
37e88 12d             | 
37e88 12d             | ' Variables dependent on the system freqency
37e88 12d             | _var_64_lower_  res     1
37e88 12d             | _var_64_lower_  res     1
37e88 12d             | _var_64_upper_  res     1
37e88 12d             | _var_64_upper_  res     1
37e88 12d             | _12Mbps_        res     1
37e88 12d             | _12Mbps_        res     1
37e88 12d             | _1_5Mbps_       res     1
37e88 12d             | _1_5Mbps_       res     1
37e88 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
37e88 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
37e88 12d             | _1us_           res     1         ' 1us
37e88 12d             | _1us_           res     1         ' 1us
37e88 12d             | _10us_          res     1         ' 10us
37e88 12d             | _10us_          res     1         ' 10us
37e88 12d             | _33us_          res     1         ' 33us
37e88 12d             | _33us_          res     1         ' 33us
37e88 12d             | _txn_err_       res     1         ' 250us
37e88 12d             | _txn_err_       res     1         ' 250us
37e88 12d             | _500us_         res     1         ' 500us
37e88 12d             | _500us_         res     1         ' 500us
37e88 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
37e88 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
37e88 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
37e88 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
37e88 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
37e88 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
37e88 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
37e88 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
37e88 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
37e88 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
37e88 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
37e88 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
37e88 12d             | _preamble_wait_ res     1
37e88 12d             | _preamble_wait_ res     1
37e88 12d             | _1ms_           res     1         ' 1ms
37e88 12d             | _1ms_           res     1         ' 1ms
37e88 12d             | _2ms_           res     1         ' 2ms
37e88 12d             | _2ms_           res     1         ' 2ms
37e88 12d             | _suspend_wait_  res     1         ' 3ms
37e88 12d             | _suspend_wait_  res     1         ' 3ms
37e88 12d             | _4ms_           res     1         ' 4ms
37e88 12d             | _4ms_           res     1         ' 4ms
37e88 12d             | _xfer_wait_     res     1         ' 5ms
37e88 12d             | _xfer_wait_     res     1         ' 5ms
37e88 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
37e88 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
37e88 12d             | _reset_hold_    res     1         ' 15ms
37e88 12d             | _reset_hold_    res     1         ' 15ms
37e88 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
37e88 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
37e88 12d             | _21ms_          res     1         ' 21ms
37e88 12d             | _21ms_          res     1         ' 21ms
37e88 12d             | _100ms_         res     1         ' 100ms
37e88 12d             | _100ms_         res     1         ' 100ms
37e88 12d             | _500ms_         res     1         ' 500ms
37e88 12d             | _500ms_         res     1         ' 500ms
37e88 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
37e88 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
37e88 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
37e88 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
37e88 12d             | '------------------------------------------------------------------------------
37e88 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
37e88 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
37e88 12d             | _usb_d_ls_nco_  res     1
37e88 12d             | _usb_d_ls_nco_  res     1
37e88 12d             | _usb_h_fs_nco_  res     1
37e88 12d             | _usb_h_fs_nco_  res     1
37e88 12d             | _usb_d_fs_nco_  res     1
37e88 12d             | _usb_d_fs_nco_  res     1
37e88 12d             | '------------------------------------------------------------------------------
37e88 12d             | ' Scratch registers
37e88 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
37e88 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
37e88 12d             | htmp1           res     1
37e88 12d             | htmp1           res     1
37e88 12d             | htmp2           res     1
37e88 12d             | htmp2           res     1
37e88 12d             | htmp3           res     1
37e88 12d             | htmp3           res     1
37e88 12d             | hrep            res     1         ' Repeat count
37e88 12d             | hrep            res     1         ' Repeat count
37e88 12d             | hsave0          res     1         ' Subroutine parameter saves
37e88 12d             | hsave0          res     1         ' Subroutine parameter saves
37e88 12d             | hsave1          res     1
37e88 12d             | hsave1          res     1
37e88 12d             | hsave2          res     1
37e88 12d             | hsave2          res     1
37e88 12d             | isrtmp1         res     1
37e88 12d             | isrtmp1         res     1
37e88 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
37e88 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
37e88 12d             | hr0             res     1         ' Multi-purpose registers
37e88 12d             | hr0             res     1         ' Multi-purpose registers
37e88 12d             | hr1             res     1
37e88 12d             | hr1             res     1
37e88 12d             | hr2             res     1
37e88 12d             | hr2             res     1
37e88 12d             | hr3             res     1
37e88 12d             | hr3             res     1
37e88 12d             | hpar1           res     1         ' Routine entry/exit parameters
37e88 12d             | hpar1           res     1         ' Routine entry/exit parameters
37e88 12d             | hpar2           res     1
37e88 12d             | hpar2           res     1
37e88 12d             | hpar3           res     1
37e88 12d             | hpar3           res     1
37e88 12d             | hct2            res     1         ' Function response bus turn-around timer
37e88 12d             | hct2            res     1         ' Function response bus turn-around timer
37e88 12d             | hct3            res     1         ' Keyboard/mouse poll timer
37e88 12d             | hct3            res     1         ' Keyboard/mouse poll timer
37e88 12d             | mod_cnt         res     1         ' Used in idle loops
37e88 12d             | mod_cnt         res     1         ' Used in idle loops
37e88 12d             |                 fit     $1F0
37e88 12d             |                 org     $200
37e88 200             | hlut_start
37e88 200             | 
37e88 200             | '------------------------------------------------------------------------------
37e88 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
37e88 200             | ' settings to startup defaults.
37e88 200             | '------------------------------------------------------------------------------
37e88 200             | ' On entry:
37e88 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
37e88 200             | '------------------------------------------------------------------------------
37e88 200             | set_speed_full
37e88 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
37e8c 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
37e90 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
37e94 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
37e98 204             | '                ret                             wcz     ' Restore caller flags on exit
37e98 204             | 
37e98 204             | '------------------------------------------------------------------------------
37e98 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
37e98 204             | ' is a downstream hub connected (not yet implemented), the baud generator
37e98 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
37e98 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
37e98 204             | ' putting the smart pins into reset.
37e98 204             | '------------------------------------------------------------------------------
37e98 204             | ' On entry:
37e98 204             | ' On exit: CZ flags restored to caller states
37e98 204             | '------------------------------------------------------------------------------
37e98 204             | set_speed_low
37e98 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
37e9c 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
37ea0 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
37ea4 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
37ea8 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
37eac 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
37eb0 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
37eb4 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
37eb8 20c             | 
37eb8 20c             | '------------------------------------------------------------------------------
37eb8 20c             | ' Perform configuration stuff required when a device intitially connects.
37eb8 20c             | '------------------------------------------------------------------------------
37eb8 20c             | ' On entry:
37eb8 20c             | ' On exit:
37eb8 20c             | '------------------------------------------------------------------------------
37eb8 20c             | on_connect
37eb8 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
37ebc 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
37ec0 20e             | .retry
37ec0 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37ec4 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
37ec8 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
37ecc 211 00 08 00 FF 
37ed0 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
37ed4 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
37ed8 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37edc 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
37ee0 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
37ee4 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
37ee8 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37eec 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
37ef0 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
37ef4 21b 4C 03 B0 FD |                 call    #poll_waitx
37ef8 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
37efc 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
37f00 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
37f04 21f B8 FF 9F FD |                 jmp     #.retry
37f08 220             | .get_dev_desc
37f08 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
37f0c 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
37f10 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
37f14 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
37f18 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
37f1c 225 88 FB BF FD |                 call    #reset
37f20 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
37f24 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37f28 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
37f2c 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
37f30 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37f34 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
37f38 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
37f3c 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
37f40 22e 04 00 00 FF 
37f44 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
37f48 230 34 FA BF FD |                 call    #calc_crc5
37f4c 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
37f50 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37f54 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
37f58 234 F7 AD C2 FA |                 rdbyte  total_data, pb
37f5c 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
37f60 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
37f64 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37f68 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
37f6c 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
37f70 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
37f74 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
37f78 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
37f7c 23d C4 02 B0 FD |                 call    #poll_waitx
37f80 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
37f84 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
37f88 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
37f8c 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
37f90 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
37f94 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37f98 244 2D 00 64 5D |         if_nz   ret
37f9c 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
37fa0 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
37fa4 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
37fa8 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
37fac 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
37fb0 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
37fb4 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
37fb8 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
37fbc 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
37fc0 24e 2C FB 9F CD |         if_b    jmp     #host_error
37fc4 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
37fc8 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
37fcc 251 2D EC 63 FD |                 call    pa
37fd0 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
37fd4 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
37fd8 254 2C EC 63 FD |                 jmp     pa
37fdc 255             | 
37fdc 255             | '------------------------------------------------------------------------------
37fdc 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
37fdc 255             | ' Status reporting is always in the function-to-host direction.
37fdc 255             | '------------------------------------------------------------------------------
37fdc 255             | ' On entry:
37fdc 255             | '   PTRA - start address of the SETUP data in hub.
37fdc 255             | '   PB - start address of the buffer/struct to be written to during the IN data
37fdc 255             | '     stage.
37fdc 255             | '   ep_addr_pid - device address, endpoint and CRC5.
37fdc 255             | ' On exit:
37fdc 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
37fdc 255             | '     contains the count of data stage bytes actually received, which must
37fdc 255             | '     always be <= the count requested.
37fdc 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
37fdc 255             | '     more specific USB operation error code.
37fdc 255             | '------------------------------------------------------------------------------
37fdc 255             | control_read
37fdc 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
37fe0 256 F8 8F 03 F6 |                 mov     hpar2, ptra
37fe4 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
37fe8 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
37fec 259             | .xfer_start
37fec 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
37ff0 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
37ff4 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37ff8 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
37ffc 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
38000 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
38004 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
38008 260 61 00 00 FF 
3800c 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
38010 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
38014 263             | .data
38014 263 56 B1 02 F6 |                 mov     pkt_data, total_data
38018 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
3801c 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
38020 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
38024 267             | .nak_retry
38024 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
38028 268             | .in_retry
38028 268 BC F6 BF FD |                 call    #txn_in
3802c 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
38030 26a 28 00 90 AD |         if_z    jmp     #.commit
38034 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
38038 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3803c 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
38040 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
38044 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
38048 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3804c 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
38050 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
38054 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
38058 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
3805c 275             | .commit
3805c 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
38060 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
38064 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
38068 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
3806c 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
38070 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
38074 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
38078 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
3807c 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
38080 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
38084 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
38088 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
3808c 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
38090 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
38094 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
38098 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
3809c 285             | .pre_status
3809c 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
380a0 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
380a4 287 00 B0 06 F6 |                 mov     pkt_data, #0
380a8 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
380ac 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
380b0 28a 61 00 00 FF 
380b4 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
380b8 28c             | .out_retry
380b8 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
380bc 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
380c0 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
380c4 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
380c8 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
380cc 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
380d0 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
380d4 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
380d8 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
380dc 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
380e0 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
380e4 297             | ' I've encountered transfer STALL, even though the data looks correct, and
380e4 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
380e4 297             | ' ControlRead() transfer gets things unstuck most of the time...
380e4 297             | .xfer_retry
380e4 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
380e8 298 58 01 B0 FD |                 call    #poll_waitx
380ec 299 8C F9 BF FD |                 call    #wait_txn_ok
380f0 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
380f4 29b C7 F1 03 F6 |                 mov     ptra, hpar2
380f8 29c C8 EF 03 F6 |                 mov     pb, hpar3
380fc 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
38100 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
38104 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
38108 2a0             | 
38108 2a0             | '------------------------------------------------------------------------------
38108 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
38108 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
38108 2a0             | ' the SETUP data struct is filled with the required values.
38108 2a0             | '------------------------------------------------------------------------------
38108 2a0             | ' On entry:
38108 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
38108 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
38108 2a0             | '     stage.
38108 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
38108 2a0             | ' On exit:
38108 2a0             | '   retval - used to convey the success/failure of each stage.
38108 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
38108 2a0             | '     more specific USB operation error code.
38108 2a0             | '------------------------------------------------------------------------------
38108 2a0             | control_write
38108 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3810c 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
38110 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
38114 2a3             | 
38114 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
38118 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
3811c 2a5 F7 91 03 F6 |                 mov     hpar3, pb
38120 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
38124 2a7             | .xfer_start
38124 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
38128 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3812c 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
38130 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38134 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
38138 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
3813c 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
38140 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
38144 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
38148 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3814c 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
38150 2b2             | .data
38150 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
38154 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
38158 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3815c 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
38160 2b6             | .out_retry
38160 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
38164 2b7 88 F6 BF FD |                 call    #txn_out
38168 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3816c 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
38170 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
38174 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
38178 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
3817c 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
38180 2be             | .commit
38180 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
38184 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
38188 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
3818c 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
38190 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
38194 2c3             | pre_status_in
38194 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
38198 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3819c 2c5             | .status_retry
3819c 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
381a0 2c6 44 F5 BF FD |                 call    #txn_in
381a4 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
381a8 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
381ac 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
381b0 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
381b4 2cb 2D 00 64 AD |         if_z    ret
381b8 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
381bc 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
381c0 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
381c4 2cf             | '               ret                                     ' Caller must handle transfer retirement
381c4 2cf             | 
381c4 2cf             | '------------------------------------------------------------------------------
381c4 2cf             | ' Execute an IN interrupt transaction.
381c4 2cf             | '------------------------------------------------------------------------------
381c4 2cf             | ' On entry:
381c4 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
381c4 2cf             | '   hpar2 - Address of the IN data buffer
381c4 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
381c4 2cf             | ' On exit:
381c4 2cf             | '   retval - the result of the operation.
381c4 2cf             | '   hpar3 - the count of IN data bytes actually received.
381c4 2cf             | '------------------------------------------------------------------------------
381c4 2cf             | do_int_in
381c4 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
381c8 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
381cc 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
381d0 2d2             | 
381d0 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
381d4 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
381d8 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
381dc 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
381e0 2d6             | .retry
381e0 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
381e4 2d7 00 F5 BF FD |                 call    #txn_in
381e8 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
381ec 2d9 1C 00 90 AD |         if_z    jmp     #.commit
381f0 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
381f4 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
381f8 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
381fc 2dd 54 00 B0 FD |                 call    #retry_wait
38200 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
38204 2df 18 00 90 AD |         if_z    jmp     #.post_ret
38208 2e0 D4 FF 9F FD |                 jmp     #.retry
3820c 2e1             | .commit
3820c 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
38210 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
38214 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
38218 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
3821c 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
38220 2e6             | .post_ret
38220 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
38224 2e7             | 
38224 2e7             | 
38224 2e7             | '------------------------------------------------------------------------------
38224 2e7             | ' Resets the downstream hub port to FS
38224 2e7             | '------------------------------------------------------------------------------
38224 2e7             | dwnstream_reset
38224 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
38228 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
3822c 2e9             | 
3822c 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
38230 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
38234 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
38238 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3823c 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
38240 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
38244 2ef             | 
38244 2ef             | '------------------------------------------------------------------------------
38244 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
38244 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
38244 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
38244 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
38244 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
38244 2ef             | '------------------------------------------------------------------------------
38244 2ef             | ' On entry:
38244 2ef             | '   hctwait - wait interval in sysclocks.
38244 2ef             | ' On exit:
38244 2ef             | '------------------------------------------------------------------------------
38244 2ef             | poll_waitx
38244 2ef 1A 92 63 FD |                 getct   hct2
38248 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
3824c 2f1             | .wait
3824c 2f1 FF 25 CC FB |                 jnct2   #.wait
38250 2f2 2D 00 64 FD |                 ret
38254 2f3             | 
38254 2f3             | '------------------------------------------------------------------------------
38254 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
38254 2f3             | '------------------------------------------------------------------------------
38254 2f3             | ' On entry:
38254 2f3             | '   retval - transaction response PID or error code.
38254 2f3             | ' On exit:
38254 2f3             | '------------------------------------------------------------------------------
38254 2f3             | retry_wait
38254 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
38258 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
3825c 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
38260 2f6 14 00 90 AD |         if_z    jmp     #.nak
38264 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
38268 2f8 D8 FF BF FD |                 call    #poll_waitx
3826c 2f9             | .dec
3826c 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
38270 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
38274 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
38278 2fc             | .nak
38278 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
3827c 2fd C4 FF BF FD |                 call    #poll_waitx
38280 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
38284 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
38288 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
3828c 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
38290 302 2D 00 64 FD |                 ret
38294 303             | 
38294 303             | host_reset
38294 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
38298 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3829c 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3829c 305 BD 01 05 FF 
382a0 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
382a4 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
382a8 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
382ac 309             | ' Check to see if the system clock has been changed.
382ac 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
382b0 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
382b4 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
382b8 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
382bc 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
382c0 30e 40 46 62 FD |                 dirl    dp
382c4 30f             | 
382c4 30f 28 02 64 FD |                 setq    #1
382c8 310 80 00 80 FF 
382cc 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
382d0 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
382d4 313             | .enable
382d4 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
382d8 314 41 46 62 FD |                 dirh    dp
382dc 315 1F 36 63 FD |                 waitx   _1us_
382e0 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
382e4 317             | 
382e4 317             |                 ' Handle Port protection enable and startup delay
382e4 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
382e8 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
382ec 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
382f0 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
382f4 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
382f8 31c             | 
382f8 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
382fc 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
38300 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
38304 31f 00 00 04 F6 |                 mov     0-0, #0
38308 320             | .regloop
38308 320             | 
38308 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
38308 320             | 
38308 320             | discon_entry
38308 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
3830c 321             | 
3830c 321             |               
3830c 321             |         if HAVE_HIDPAD
3830c 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
38310 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
38314 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
38318 324 F7 01 68 FC |                 wrlong  #0,pb
3831c 325             |         end
3831c 325             |         if EMUPAD_MAX_PLAYER > 0
3831c 325             |         end
3831c 325             | 
3831c 325             |                 ' Fall through to disconnected loop
3831c 325             | 
3831c 325             | '-----------------------------------------------------------------------------------------------------------------
3831c 325             | ' Device connect handling (Section 7.1.7.3).
3831c 325             | '-----------------------------------------------------------------------------------------------------------------
3831c 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
3831c 325             | ' device to connect (Section 7.1.7.3).
3831c 325             | '-----------------------------------------------------------------------------------------------------------------
3831c 325             | disconnected
3831c 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
38320 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
38324 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
38328 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
3832c 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
38330 32a             |         if ACTIVITY_LED >= 0
38330 32a             |         end
38330 32a 22 A7 82 FA |                 rqpin   urx, dm
38334 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
38338 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
3833c 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
38340 32e             | .se1_test
38340 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
38344 32f FC FE BF FD |                 call    #poll_waitx
38348 330 22 A7 82 FA |                 rqpin   urx, dm
3834c 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
38350 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
38354 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
38358 334             | .se1            'SE1 is a fatal error condition
38358 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
3835c 335 E4 FE BF FD |                 call    #poll_waitx
38360 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
38364 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
38368 338             | .connect_test                                           ' Test lines until stable J/K state seen
38368 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
3836c 339 22 A7 82 FA |                 rqpin   urx, dm
38370 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
38374 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
38378 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
3837c 33d             | connected
3837c 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
38380 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
38384 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
38388 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
3838c 341             | .set_pulse
3838c 341 1A 64 63 FD |                 getct   _pulse_time_
38390 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
38394 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
38394 343             | ' of 1ms and make a correction, if necessary.
38394 343             | '                mov     htmp, _1ms_
38394 343             | '                subs    htmp, iframe_delta
38394 343             | '                adds    _frame1ms_clks_, htmp
38394 343             | '                debug(udec(_frame1ms_clks_))
38394 343             | 
38394 343             |                 ' Fall through to idle/processing loop
38394 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
38398 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3839c 345             | 
3839c 345             | hidle
3839c 345 22 A7 82 FA |                 rqpin   urx, dm
383a0 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
383a4 347 98 00 90 CD |         if_c    jmp     #.se0_test
383a8 348 24 06 70 FD |                 pollct3                         wc
383ac 349 68 00 90 3D |         if_nc   jmp     #.nopoll
383b0 34a 1A 94 63 FD |                 getct   hct3
383b4 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
383b8 34c             | 
383b8 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
383bc 34d 00 70 E3 F8 |                 getbyte htmp
383c0 34e             | 
383c0 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
383c4 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
383c8 350 40 00 90 AD |         if_z    jmp     #.poll
383cc 351             | 
383cc 351             |         if _HAVE_GAMEPAD
383cc 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
383d0 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
383d4 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
383d8 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
383dc 355 2C 00 90 AD |         if_z    jmp     #.poll
383e0 356             |         end
383e0 356             | 
383e0 356             |         if HAVE_MOUSE
383e0 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
383e4 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
383e8 358 20 00 90 AD |         if_z    jmp     #.poll
383ec 359             |         end
383ec 359             | 
383ec 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
383f0 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
383f4 35b 14 00 90 AD |         if_z    jmp     #.poll
383f8 35c             | 
383f8 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
383fc 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
38400 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
38404 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
38408 360             |         if HAVE_MOUSE
38408 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
3840c 361             |         else
3840c 361             |         end
3840c 361             | 
3840c 361             | .poll
3840c 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
38410 362 2D EC 63 FD |                 call    pa
38414 363             | .skip_poll
38414 363             | 
38414 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
38418 364             | 
38418 364             | .nopoll
38418 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
3841c 365 44 00 90 AD |         if_z    jmp     #hsuspend
38420 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
38424 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
38428 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
3842c 369 1A 84 63 FD |                 getct   hr0
38430 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
38434 36b             |         if ACTIVITY_LED >= 0
38434 36b             |         end
38434 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
38438 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
3843c 36d 5C FF 9F FD |                 jmp     #hidle
38440 36e             | ' Check for extended SE0 state on the bus
38440 36e             | .se0_test
38440 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
38444 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
38448 370 22 A7 82 FA |                 rqpin   urx, dm
3844c 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
38450 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
38454 373 24 F6 BF FD |                 call    #wait_txn_ok
38458 374 00 00 80 FF 
3845c 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
38460 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
38460 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
38464 377             | 
38464 377             | hsuspend
38464 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
38468 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
3846c 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
38470 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
38474 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
38478 37c 00 96 07 F6 |                 mov     mod_cnt, #0
3847c 37d             | 
3847c 37d             |                 ' Fall through to resume wait loop
3847c 37d             | 
3847c 37d             | hwait_resume
3847c 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
38480 37e 02 86 47 F0 |                 shr     hr1, #2
38484 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
38488 380             |         if ACTIVITY_LED >= 0
38488 380             |         end
38488 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
3848c 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
38490 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
38494 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
38498 384 18 00 90 AD |         if_z    jmp     #.resume
3849c 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
384a0 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
384a4 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
384a8 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
384ac 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
384b0 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
384b4 38b             | .resume
384b4 38b 22 05 28 FC |                 wypin   #OUT_K, dm
384b8 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
384bc 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
384c0 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
384c4 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
384c8 390 1F 70 63 FD |                 waitx   htmp
384cc 391 22 07 28 FC |                 wypin   #OUT_J, dm
384d0 392 01 70 47 F0 |                 shr     htmp, #1
384d4 393 1F 70 63 FD |                 waitx   htmp
384d8 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
384dc 395 1A 92 62 FD |                 getct   iframe_ct_base
384e0 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
384e4 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
384e8 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
384ec 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
384f0 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
384f4 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
384f8 39c             | 
384f8 39c             | '------------------------------------------------------------------------------
384f8 39c             | ' Send preamble to enable low-speed HUB ports
384f8 39c             | '------------------------------------------------------------------------------
384f8 39c             | ' On entry:
384f8 39c             | ' On exit:
384f8 39c             | '   USB baud rate set to low-speed
384f8 39c             | '------------------------------------------------------------------------------
384f8 39c             | utx_pre
384f8 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
384fc 39d 40 46 62 FD |                 dirl    dp
38500 39e 28 02 64 FD |                 setq    #1
38504 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
38508 3a0 58 44 62 FD |                 drvl    dm
3850c 3a1 59 46 62 FD |                 drvh    dp
38510 3a2             | 
38510 3a2 1E 00 00 FF 
38514 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
38518 3a4             | 
38518 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
3851c 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
38520 3a6 28 02 64 3D |         if_nc   setq    #1
38524 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
38528 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
3852c 3a9             | .l1
3852c 3a9             | 
3852c 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
38530 3aa 40 46 62 FD |                 dirl    dp
38534 3ab 28 02 64 FD |                 setq    #1
38538 3ac 80 00 80 FF 
3853c 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
38540 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
38544 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
38548 3b0 41 46 62 FD |                 dirh    dp
3854c 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
38550 3b2             | 
38550 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
38554 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
38558 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3855c 3b5             | 
3855c 3b5             | hlut_end
3855c 3b5             |                 fit     $400
3855c 3b5             |                 orgh
3855c                 | if OVERLAP_MEMORY
3855c                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
3855c                 | end
3855c                 | '------------------------------------------------------------------------------
3855c                 | ' Routines called from cog space.
3855c                 | '------------------------------------------------------------------------------
3855c                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
3855c                 | '------------------------------------------------------------------------------
3855c                 | 
3855c                 | '------------------------------------------------------------------------------
3855c                 | ' USB host cog initialization.
3855c                 | '------------------------------------------------------------------------------
3855c                 | usb_host_init
3855c                 |                 ' Initialize buffer pointers
3855c                 |         if OVERLAP_MEMORY
3855c                 |         else
3855c     40 15 B0 FE |                 loc     pb, #hid_descr
38560                 |         end
38560     F7 4B 02 F6 |                 mov     hid_descr_p, pb
38564                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
38564                 |                 {
38564                 |                 }
38564                 |         
38564                 |                 {
38564                 |                 }
38564                 |                 'loc     pb,#hkbd_report
38564                 |                 'mov     hkbd_report_p,pb
38564                 | 
38564     08 1D B0 FE |                 loc     pb, #hub_descr
38568     F7 4D 02 F6 |                 mov     hub_descr_p, pb
3856c     1D 1D B0 FE |                 loc     pb, #urx_buff
38570     F7 4F 02 F6 |                 mov     urx_buff_p, pb
38574     95 1D B0 FE |                 loc     pb, #dev_desc_buff
38578     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
3857c     9F 1D B0 FE |                 loc     pb, #con_desc_buff
38580     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
38584     18 15 B0 FE |                 loc     pb, #usb_cache_start
38588     F7 55 02 F6 |                 mov     cache_start_p, pb
3858c     E9 1C B0 FE |                 loc     pb, #usb_cache_end
38590     F7 57 02 F6 |                 mov     cache_end_p, pb
38594                 | 
38594                 |         if ERROR_LED >= 0
38594                 |         end
38594                 | 
38594                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
38594                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
38594                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
38594                 | ' Configure and enable the Serial Host USB port.
38594     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
38598                 | 
38598                 | '------------------------------------------------------------------------------
38598                 | ' Timing calculations happen before any interrupt(s) are enabled.
38598                 | '------------------------------------------------------------------------------
38598                 | ' On entry:
38598                 | '   htmp - current CLKFREQ value.
38598                 | '------------------------------------------------------------------------------
38598                 | hinit_usb_timings
38598                 | '                getct   htmp2
38598     B8 59 02 F6 |                 mov     save_sysclk, htmp
3859c     8D 5B 80 FF 
385a0     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
385a4     18 30 63 FD |                 getqx   _12Mbps_
385a8     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
385ac     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
385b0     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
385b4     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
385b8     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
385bc     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
385c0     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
385c4     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
385c8     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
385cc     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
385d0     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
385d4     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
385d8     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
385dc     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
385e0     80 00 00 FF 
385e4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
385e8     18 2C 63 FD |                 getqx   _var_64_lower_
385ec     19 2E 63 FD |                 getqy   _var_64_upper_
385f0     28 2C 63 FD |                 setq    _var_64_lower_
385f4     65 CD 1D FF 
385f8     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
385fc     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
38600     01 00 00 FF 
38604     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
38608     18 2C 63 FD |                 getqx   _var_64_lower_
3860c     19 2E 63 FD |                 getqy   _var_64_upper_
38610     28 2C 63 FD |                 setq    _var_64_lower_
38614     A1 07 00 FF 
38618     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
3861c     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
38620     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
38624     09 36 57 F0 |                 shr     _1us_, #9               wc
38628     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
3862c     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
38630     18 38 63 FD |                 getqx   _10us_
38634     09 38 57 F0 |                 shr     _10us_, #9              wc
38638     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
3863c     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
38640     18 3A 63 FD |                 getqx   _33us_
38644     09 3A 57 F0 |                 shr     _33us_, #9              wc
38648     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
3864c     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
38650     18 3C 63 FD |                 getqx   _txn_err_
38654     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
38658     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
3865c     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
38660     18 3E 63 FD |                 getqx   _500us_
38664     09 3E 57 F0 |                 shr     _500us_, #9             wc
38668     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
3866c     01 00 00 FF 
38670     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
38674     18 40 63 FD |                 getqx   _txn_ok_ls_
38678     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
3867c     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
38680     01 00 00 FF 
38684     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
38688     18 42 63 FD |                 getqx   _txn_ok_fs_
3868c     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
38690     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
38694     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
38698     05 00 00 FF 
3869c     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
386a0     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
386a4     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
386a8     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
386ac     1C 00 00 FF 
386b0     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
386b4     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
386b8     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
386bc     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
386c0     00 00 00 FF 
386c4     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
386c8     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
386cc     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
386d0     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
386d4     04 00 00 FF 
386d8     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
386dc     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
386e0     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
386e4     8D 5B 00 FF 
386e8     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
386ec     18 4C 63 FD |                 getqx   _preamble_wait_
386f0     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
386f4     01 00 00 FF 
386f8     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
386fc     18 2C 63 FD |                 getqx   _var_64_lower_
38700     19 2E 63 FD |                 getqy   _var_64_upper_
38704     28 2C 63 FD |                 setq    _var_64_lower_
38708     01 00 00 FF 
3870c     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
38710     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
38714     09 4E 57 F0 |                 shr     _1ms_, #9               wc
38718     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
3871c     FF FF 7F FF 
38720     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
38724     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
38728     A7 51 03 F6 |                 mov     _2ms_, _1ms_
3872c     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
38730     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
38734     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
38738     A7 55 03 F6 |                 mov     _4ms_, _1ms_
3873c     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
38740     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
38744     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
38748     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
3874c     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
38750     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
38754     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
38758     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
3875c     A7 59 03 F6 |                 mov     _8ms_, _1ms_
38760     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
38764     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
38768     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
3876c     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
38770     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
38774     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
38778     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
3877c     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
38780     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
38784     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
38788     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
3878c                 | '        _ret_   mov     _1sec_, save_sysclk
3878c                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
3878c                 | '                ret
3878c                 | {
3878c                 | }
3878c                 | 
3878c                 | '------------------------------------------------------------------------------
3878c                 | ' Parse a configuration descriptor chain to see if the device is a recognized
3878c                 | ' one. If it is, start the task progression that will configure the device for
3878c                 | ' use.
3878c                 | '------------------------------------------------------------------------------
3878c                 | ' On entry:
3878c                 | '   hconfig_base - start address of the cached config descriptor chain.
3878c                 | ' On exit:
3878c                 | '------------------------------------------------------------------------------
3878c                 | hparse_con_desc
3878c     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
38790     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
38794     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
38798     4E 70 FF F9 |                 movbyts htmp,#%%1032
3879c     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
387a0                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
387a0                 | 
387a0     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
387a4     6E ED 03 F1 |                 add     pa, hconfig_base
387a8     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
387ac                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
387ac                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
387ac                 | ' that defines a keyboard and/or mouse.
387ac     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
387b0                 | .next_intf
387b0     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
387b4     BC 01 90 3D |         if_ae   jmp     #hset_config
387b8     6E F3 03 F6 |                 mov     ptrb, hconfig_base
387bc     75 F3 03 F1 |                 add     ptrb, hnext_desc
387c0     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
387c4     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
387c8     0C 00 90 AD |         if_z    jmp     #.intf
387cc     80 71 C7 FA |                 rdbyte  htmp, ptrb
387d0     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
387d4     D8 FF 9F FD |                 jmp     #.next_intf
387d8                 | .intf
387d8     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
387dc     00 90 07 F6 |                 mov     hpar3, #0
387e0     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
387e4     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
387e8     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
387ec     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
387f0                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
387f0                 | 
387f0                 | .endp
387f0     80 71 C7 FA |                 rdbyte  htmp, ptrb
387f4     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
387f8     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
387fc     78 00 90 3D |         if_ae   jmp     #.get_device
38800     6E F3 03 F6 |                 mov     ptrb, hconfig_base
38804     75 F3 03 F1 |                 add     ptrb, hnext_desc
38808     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3880c     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
38810     64 00 90 AD |         if_z    jmp     #.get_device
38814     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
38818     04 00 90 AD |         if_z    jmp     #.get_ep
3881c     D0 FF 9F FD |                 jmp     #.endp
38820                 | .get_ep
38820     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
38824     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
38828     0F 86 67 F0 |                 shl     hr1, #8 + 7
3882c     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
38830     3F 00 00 FF 
38834     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
38838     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
3883c     00 8E 0F F2 |                 cmp     hpar2, #0               wz
38840     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
38844     00 90 0F F2 |                 cmp     hpar3, #0               wz
38848     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
3884c     A0 FF 9F FD |                 jmp     #.endp
38850                 | .in_ep
38850     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
38854     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
38858                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
38858     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3885c     C2 89 DB F8 |                 setbyte hr2, hr0, #3
38860     8C FF 9F FD |                 jmp     #.endp
38864                 | .out_ep
38864     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
38868     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
3886c                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3886c     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
38870     C2 8B DB F8 |                 setbyte hr3, hr0, #3
38874     78 FF 9F FD |                 jmp     #.endp
38878                 | 
38878                 | .get_device
38878     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
3887c     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
38880     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
38884     68 00 90 AD |         if_z    jmp     #.gamepad
38888     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
3888c     AC 00 90 AD |         if_z    jmp     #.hub
38890     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
38894     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
38898     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3889c     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
388a0     4C 00 90 AD |         if_z    jmp     #.gamepad
388a4     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
388a8     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
388ac                 | .keyboard
388ac     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
388b0                 |         if HAVE_MOUSE
388b0     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
388b4                 |         else
388b4                 |         end
388b4     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
388b8     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
388bc     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
388c0     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
388c4     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
388c8     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
388cc                 |                 'debug(udec(kb_intf_num))
388cc                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
388cc     E0 FE 9F FD |                 jmp     #.next_intf
388d0                 | if HAVE_MOUSE
388d0                 | .mouse
388d0     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
388d4     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
388d8     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
388dc     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
388e0     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
388e4                 |                 'getbyte ms_interval, hr2, #3
388e4     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
388e8     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
388ec                 |                 'debug(udec(kb_intf_num))
388ec                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
388ec     C0 FE 9F FD |                 jmp     #.next_intf
388f0                 | end
388f0                 | .gamepad
388f0     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
388f4     C7 71 63 F5 |                 xor     htmp, hpar2
388f8     3F 00 00 FF 
388fc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38900     AC FE 9F AD |         if_z    jmp     #.next_intf
38904                 |         if HAVE_MOUSE
38904     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
38908     C7 71 63 F5 |                 xor     htmp, hpar2
3890c     3F 00 00 FF 
38910     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38914     98 FE 9F AD |         if_z    jmp     #.next_intf
38918                 |         end
38918     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
3891c     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
38920     8C FE 9F 5D |         if_nz   jmp     #.next_intf
38924                 | 
38924     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
38928     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
3892c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
38930     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
38934     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
38938                 |                 'debug(udec(gp_intf_num))
38938                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
38938     74 FE 9F FD |                 jmp     #.next_intf
3893c                 | .hub
3893c     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
38940     6C FE 9F 5D |         if_nz   jmp     #.next_intf
38944     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
38948     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
3894c     60 FE 9F 5D |         if_nz   jmp     #.next_intf
38950     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
38954     58 FE 9F 5D |         if_nz   jmp     #.next_intf
38958     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
3895c     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
38960     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
38964     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38968     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
3896c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
38970                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
38970     3C FE 9F FD |                 jmp     #.next_intf
38974                 | 
38974                 | '------------------------------------------------------------------------------
38974                 | ' If a newly-connected device is recognized, do whatever is needed to configure
38974                 | ' it according to its function, or functions. In the case of this boot protocol
38974                 | ' keyboard/mouse class driver:
38974                 | ' - SetConfiguration(config_num)
38974                 | ' - SetProtocol(boot)
38974                 | ' - SetIdle(indefinite)
38974                 | ' - Enter the device interrupt IN polling task stage.
38974                 | '------------------------------------------------------------------------------
38974                 | ' On entry:
38974                 | ' On exit:
38974                 | '------------------------------------------------------------------------------
38974                 | hset_config
38974                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
38974                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
38974     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
38978     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3897c     00 00 0C F2 |                 cmp     0-0, #0                 wz
38980     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
38984                 |         if HAVE_MOUSE
38984     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
38988                 |         end
38988     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
3898c     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
38990                 | .set_config
38990     6C 0E D0 FE |                 loc     ptra, #set_config
38994     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
38998     6E ED 03 F1 |                 add     pa, hconfig_base
3899c     F6 8D C3 FA |                 rdbyte  hpar1, pa
389a0     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
389a4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
389a8     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
389ac     A0 02 A0 FD |                 call    #control_write
389b0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
389b4     2D 00 64 5D |         if_nz   ret
389b8                 | .kbd_config
389b8     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
389bc     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
389c0                 | 
389c0     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
389c4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
389c8     3F 00 00 FF 
389cc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
389d0     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
389d4                 | 
389d4     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
389d8     34 0E D0 FE |                 loc     ptra, #set_protocol
389dc     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
389e0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
389e4     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
389e8     A0 02 A0 FD |                 call    #control_write
389ec     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
389f0     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
389f4     E4 02 90 5D |         if_nz   jmp     #.notify_client
389f8     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
389fc     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
38a00     30 03 B0 FD |                 call    #hset_idle
38a04                 |                 'cmp     retval, #PID_ACK        wz
38a04                 |         'if_nz   mov     hkbd_ep_addr, #0
38a04                 |         'if_nz   jmp     #.notify_client
38a04     A8 99 02 F6 |                 mov     hctwait, _2ms_
38a08     EF 02 A0 FD |                 call    #poll_waitx
38a0c     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
38a10     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
38a14     90 17 90 FE |                 loc     pa, #hkbd_led_rep
38a18     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
38a1c     2C 03 B0 FD |                 call    #hset_kbdled_report
38a20     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38a24     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
38a28     B0 02 90 5D |         if_nz   jmp     #.notify_client
38a2c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
38a30     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38a34     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38a38     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
38a3c     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
38a40     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
38a44     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
38a48     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
38a4c     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
38a50     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
38a54     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
38a58                 |         if !!HAVE_MOUSE
38a58                 |         end
38a58                 | 
38a58                 | .mouse_config
38a58                 | if HAVE_MOUSE
38a58     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
38a5c     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
38a60     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
38a64     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38a68     3F 00 00 FF 
38a6c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38a70     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
38a74                 | 
38a74                 |                 debug("mouse passed addr check")
38a74                 | 
38a74     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
38a78     00 00 80 FF 
38a7c     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
38a80     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
38a84     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38a88     55 02 A0 FD |                 call    #control_read
38a8c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38a90     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
38a94     44 02 90 5D |         if_nz   jmp     #.notify_client
38a98     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
38a9c     56 01 00 F6 |                 mov     0-0, total_data
38aa0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38aa4                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
38aa4                 | 
38aa4     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
38aa8     64 0D D0 FE |                 loc     ptra, #set_protocol
38aac     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
38ab0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38ab4     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
38ab8     A0 02 A0 FD |                 call    #control_write
38abc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38ac0     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
38ac4     14 02 90 5D |         if_nz   jmp     #.notify_client
38ac8                 |                 debug("mouse passed SetProtocol")
38ac8     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
38acc     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
38ad0     60 02 B0 FD |                 call    #hset_idle
38ad4                 |                 'cmp     retval, #PID_ACK        wz
38ad4                 |         'if_nz   mov     hmouse_ep_addr, #0
38ad4                 |         'if_nz   jmp     #.notify_client
38ad4                 |                 debug("mouse passed SetIdle")
38ad4     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
38ad8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38adc     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38ae0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
38ae4     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
38ae8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
38aec     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
38af0     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
38af4     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
38af8     3F 00 00 FF 
38afc     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
38b00     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
38b04     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
38b08     D0 01 90 FD |                 jmp     #.notify_client
38b0c                 | end
38b0c                 | .gamepad_config
38b0c                 | if _HAVE_GAMEPAD
38b0c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
38b10     00 00 0C F2 |                 cmp     0-0, #0                 wz
38b14     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
38b18     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
38b1c     00 70 03 F6 |                 mov     htmp, 0-0
38b20     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38b24     3F 00 00 FF 
38b28     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38b2c     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
38b30                 | 
38b30     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
38b34     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
38b38     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38b3c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38b40     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
38b44     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
38b48     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
38b4c     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
38b50     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
38b54     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38b58     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38b5c     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
38b60     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
38b64     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
38b68                 | 
38b68                 |                 if EMUPAD_MAX_PLAYER > 0
38b68                 |                 
38b68                 | .rule_loop           
38b68                 |                 end
38b68                 | 
38b68     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
38b6c     5C 00 90 AD |         if_e    jmp     #.xinput
38b70     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
38b74     00 70 03 F6 |                 mov     htmp,0-0
38b78     01 A6 02 FF 
38b7c     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
38b80     7C 00 90 AD |         if_e    jmp     #.ps3
38b84                 | 
38b84     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
38b88     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
38b8c     00 00 80 5F 
38b90     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
38b94     03 00 80 AF 
38b98     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
38b9c     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
38ba0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38ba4     55 02 A0 FD |                 call    #control_read
38ba8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38bac     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
38bb0     00 00 04 56 |         if_nz   mov     0-0, #0
38bb4     24 01 90 5D |         if_nz   jmp     #.notify_client
38bb8     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
38bbc     56 01 00 F6 |                 mov     0-0, total_data
38bc0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38bc4                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
38bc4                 | 
38bc4     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
38bc8     10 01 90 FD |                 jmp     #.notify_client
38bcc                 | .xinput
38bcc     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
38bd0     2D EF 03 F6 |                 mov     pb,hdev_port
38bd4     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
38bd8     03 EE 27 F3 |                 fle     pb,#3
38bdc     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
38be0     02 EF 47 FC |                 wrbyte  pb, ptra[2]
38be4                 | 
38be4     03 B0 06 F6 |                 mov     pkt_data, #3
38be8     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
38bec     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
38bf0     5A 00 A0 FD |                 call    #txn_out
38bf4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
38bf8                 | 
38bf8     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
38bfc     DC 00 90 FD |                 jmp     #.notify_client
38c00                 | .ps3
38c00     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
38c04     2D EF 03 F6 |                 mov     pb,hdev_port
38c08     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
38c0c     04 EE 27 F3 |                 fle     pb,#4
38c10     F7 EF C3 F9 |                 decod   pb
38c14     09 EF 47 FC |                 wrbyte  pb, ptra[9]
38c18                 | 
38c18     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
38c1c     00 0C D0 FE |                 loc     ptra, #set_report
38c20     01 00 80 FF 
38c24     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
38c28     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38c2c     03 61 5C FC |                 wrword  #48, ptra[wLength]
38c30     20 0C B0 FE |                 loc     pb, #ps3_command_buff
38c34     A0 02 A0 FD |                 call    #control_write
38c38                 | 
38c38     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
38c3c     E0 0B D0 FE |                 loc     ptra, #set_report
38c40     01 00 80 FF 
38c44     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
38c48     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38c4c     03 09 5C FC |                 wrword  #4, ptra[wLength]
38c50     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
38c54     A0 02 A0 FD |                 call    #control_write
38c58     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
38c5c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
38c60     00 00 04 56 |         if_nz   mov     0-0, #0
38c64     74 00 90 5D |         if_nz   jmp     #.notify_client
38c68                 | 
38c68     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
38c6c     6C 00 90 FD |                 jmp     #.notify_client
38c70                 | end
38c70                 | 
38c70                 | .hub_config
38c70     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
38c74     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
38c78     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
38c7c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38c80     3F 00 00 FF 
38c84     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38c88     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
38c8c                 | 
38c8c     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
38c90     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
38c94     26 EF 03 F6 |                 mov     pb, hub_descr_p
38c98     55 02 A0 FD |                 call    #control_read
38c9c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38ca0     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
38ca4     34 00 90 5D |         if_nz   jmp     #.notify_client
38ca8                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
38ca8                 | 
38ca8     26 F1 03 F6 |                 mov     ptra, hub_descr_p
38cac     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
38cb0     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
38cb4                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
38cb4                 | .pwr_loop
38cb4     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
38cb8     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
38cbc     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
38cc0     A0 02 A0 FD |                 call    #control_write
38cc4     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
38cc8                 | 
38cc8     B1 99 02 F6 |                 mov     hctwait, _500ms_
38ccc     B0 99 02 F1 |                 add     hctwait, _100ms_
38cd0     EF 02 A0 FD |                 call    #poll_waitx
38cd4                 | 
38cd4     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
38cd8     00 00 90 FD |                 jmp     #.notify_client
38cdc                 | 
38cdc                 | .notify_client
38cdc     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
38ce0     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
38ce4                 |                 debug(uhex_long(hdev_type,hdev_type+1))
38ce4                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
38ce4     2D 00 64 FD |                 ret
38ce8                 | 
38ce8                 | '------------------------------------------------------------------------------
38ce8                 | ' Initialize the keyboard/mouse data area to start-up values.
38ce8                 | '------------------------------------------------------------------------------
38ce8                 | ' On entry:
38ce8                 | ' On exit:
38ce8                 | '------------------------------------------------------------------------------
38ce8                 | init_kbdm_data
38ce8     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
38cec     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
38cf0                 | 
38cf0     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
38cf4     2B ED 03 F6 |                 mov     pa, cache_end_p
38cf8                 | .loop
38cf8     61 01 4C FC |                 wrbyte  #0, ptra++
38cfc     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
38d00     F4 FF 9F CD |         if_b    jmp     #.loop
38d04                 |         
38d04                 |         if EMUPAD_MAX_PLAYER > 0
38d04                 |         end
38d04                 | 
38d04                 | 
38d04     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
38d08                 | .regloop
38d08     00 EC 8F F9 |                 altd    pa
38d0c     00 00 04 F6 |                 mov     0-0, #0
38d10     01 EC 07 F1 |                 add     pa, #1
38d14     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
38d18     EC FF 9F 5D |         if_nz   jmp     #.regloop
38d1c                 | 
38d1c     E1 E1 61 FF 
38d20     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
38d24     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
38d28     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
38d2c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
38d30                 | 
38d30     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
38d34                 | 
38d34                 | '------------------------------------------------------------------------------
38d34                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
38d34                 | ' function.
38d34                 | '------------------------------------------------------------------------------
38d34                 | ' On entry:
38d34                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
38d34                 | '   hpar2 - index number of the target interface.
38d34                 | ' On exit:
38d34                 | '------------------------------------------------------------------------------
38d34                 | hset_idle
38d34     A8 99 02 F6 |                 mov     hctwait, _2ms_
38d38     EF 02 A0 FD |                 call    #poll_waitx
38d3c     D8 0A D0 FE |                 loc     ptra, #set_idle
38d40     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
38d44     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
38d48     A0 02 80 FD |                 jmp     #control_write
38d4c                 | 
38d4c                 | '------------------------------------------------------------------------------
38d4c                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
38d4c                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
38d4c                 | '------------------------------------------------------------------------------
38d4c                 | ' On entry:
38d4c                 | '   ep_addr_pid - device address and enpoint for the request.
38d4c                 | ' On exit:
38d4c                 | '   retval - transaction result.
38d4c                 | '------------------------------------------------------------------------------
38d4c                 | hset_kbdled_report
38d4c     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
38d50     CC 0A D0 FE |                 loc     ptra, #set_report
38d54     01 00 80 FF 
38d58     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
38d5c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38d60     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
38d64     27 EF 03 F6 |                 mov     pb, urx_buff_p
38d68     F7 77 42 FC |                 wrbyte  kb_led_states, pb
38d6c     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
38d70                 | 
38d70                 | '------------------------------------------------------------------------------
38d70                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
38d70                 | '------------------------------------------------------------------------------
38d70                 | ' On entry:
38d70                 | ' On exit:
38d70                 | '------------------------------------------------------------------------------
38d70                 | hget_kbd_in_report
38d70     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
38d74     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
38d78     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
38d7c     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
38d80     CF 02 A0 FD |                 call    #do_int_in
38d84     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38d88     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
38d8c                 | 
38d8c     00 90 0F F2 |                 cmp     hpar3, #0               wz
38d90     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
38d94                 | 
38d94     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
38d98     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
38d9c     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
38da0     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
38da4                 | 
38da4     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
38da8     18 00 B0 FD |                 call    #hkbd_compare
38dac                 |         if EMUPAD_MAX_PLAYER > 0
38dac                 |         end
38dac                 | 
38dac                 | .led_check
38dac     3B 71 03 F6 |                 mov     htmp, kb_led_states
38db0     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
38db4     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
38db8     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
38dbc     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
38dc0     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
38dc4                 | 
38dc4                 | '------------------------------------------------------------------------------
38dc4                 | ' Compare current and previous keyboard data buffers for keypress changes.
38dc4                 | '------------------------------------------------------------------------------
38dc4                 | hkbd_compare
38dc4     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38dc8     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
38dcc     61 73 07 FB |                 rdlong  htmp1, ptra++
38dd0     E1 75 07 FB |                 rdlong  htmp2, ptrb++
38dd4     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
38dd8     61 73 07 FB |                 rdlong  htmp1, ptra++
38ddc     E1 75 07 FB |                 rdlong  htmp2, ptrb++
38de0     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
38de4     2D 00 64 AD |         if_z    ret
38de8                 | 
38de8     B4 13 D0 FE |                 loc     ptra, #hkbd_report
38dec                 | 
38dec                 |                 ' Handle modifiers
38dec     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
38df0     00 87 C7 FA |                 rdbyte  hr1, ptra
38df4     C7 87 43 F9 |                 rolword hr1,hpar2,#0
38df8     63 86 63 FD |                 mergew  hr1
38dfc     08 EC 07 F6 |                 mov     pa,#8
38e00                 | .modloop
38e00     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
38e04     E8 8C 07 F6 |                 mov     hpar1,#$E8
38e08     F6 8D 83 F1 |                 sub     hpar1,pa
38e0c     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
38e10     FB ED 6F FB |                 djnz    pa,#.modloop
38e14                 | 
38e14     6F E0 75 FD | .release        modc    _set    wc
38e18                 |                 'alts    hdev_port, #hid_report_p
38e18                 |                 'mov     ptra, hid_report_p
38e18     02 F0 07 F1 |                 add     ptra, #2
38e1c     06 EC 07 F6 |                 mov     pa, #6
38e20     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
38e24     20 00 90 AD |         if_z    jmp     #.rl3
38e28     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
38e2c     02 F2 07 F1 |                 add     ptrb, #2
38e30     06 EE 07 F6 |                 mov     pb, #6
38e34     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
38e38     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
38e3c     08 00 90 AD |         if_z    jmp     #.rl3
38e40     FC EF 6F FB |                 djnz    pb, #.rl2
38e44     68 00 B0 FD |                 call    #hkbd_translate
38e48     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
38e4c                 | 
38e4c     00 90 07 F6 |                 mov     hpar3, #0
38e50     1F 90 27 F4 |                 bith    hpar3, #31
38e54                 | 
38e54     6F 00 74 FD | .press          modc    _clr    wc
38e58     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38e5c     02 F0 07 F1 |                 add     ptra, #2
38e60     06 EC 07 F6 |                 mov     pa, #6
38e64     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
38e68     20 00 90 AD |         if_z    jmp     #.pl3
38e6c     30 13 F0 FE |                 loc     ptrb, #hkbd_report
38e70     02 F2 07 F1 |                 add     ptrb, #2
38e74     06 EE 07 F6 |                 mov     pb, #6
38e78     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
38e7c     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
38e80     08 00 90 AD |         if_z    jmp     #.pl3
38e84     FC EF 6F FB |                 djnz    pb, #.pl2
38e88     24 00 B0 FD |                 call    #hkbd_translate
38e8c     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
38e90                 | 
38e90     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
38e94     08 13 F0 FE |                 loc     ptrb, #hkbd_report
38e98     28 02 64 FD |                 setq #1
38e9c     61 73 07 FB |                 rdlong  htmp1, ptra++
38ea0     28 02 64 FD |                 setq #1
38ea4     E1 73 67 FC |                 wrlong  htmp1, ptrb++
38ea8     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
38eac                 | 
38eac     2D 00 64 FD |                 ret
38eb0                 | 
38eb0                 | '------------------------------------------------------------------------------
38eb0                 | ' Translate keyboard scancode to ASCII
38eb0                 | '------------------------------------------------------------------------------
38eb0                 | ' On entry:
38eb0                 | '   hpar1 - scancode
38eb0                 | '   hpar2 - key modifiers state
38eb0                 | '       c - pressed (0) or released (1) flag
38eb0                 | ' On exit:
38eb0                 | '   hpar1 - bit     31 = 0 pressed, 1 released
38eb0                 | '               30..17 = unused
38eb0                 | '                   18 = scroll-lock state 
38eb0                 | '                   17 = caps-lock state
38eb0                 | '                   16 = num-lock state 
38eb0                 | '                15..8 = key modifiers state
38eb0                 | '                 7..0 = scancode
38eb0                 | '------------------------------------------------------------------------------
38eb0                 | hkbd_translate
38eb0     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
38eb4     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
38eb8     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
38ebc     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
38ec0     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
38ec4     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
38ec8                 | 
38ec8                 |         if EMUPAD_MAX_PLAYER > 0
38ec8                 | 
38ec8                 |         if EMUPAD_BT0_BIT >= 0
38ec8                 |         end
38ec8                 |         if EMUPAD_BT1_BIT >= 0
38ec8                 |         end
38ec8                 |         if EMUPAD_BT2_BIT >= 0
38ec8                 |         end
38ec8                 |         if EMUPAD_BT3_BIT >= 0
38ec8                 |         end
38ec8                 |         if EMUPAD_BT4_BIT >= 0
38ec8                 |         end
38ec8                 |         if EMUPAD_BT5_BIT >= 0
38ec8                 |         end
38ec8                 |         if EMUPAD_BT6_BIT >= 0
38ec8                 |         end
38ec8                 |         if EMUPAD_BT7_BIT >= 0
38ec8                 |         end
38ec8                 |         if EMUPAD_BT8_BIT >= 0
38ec8                 |         end
38ec8                 |         if EMUPAD_BT9_BIT >= 0
38ec8                 |         end
38ec8                 | 
38ec8                 |         end
38ec8     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
38ecc     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
38ed0     1F 8C 47 F4 |                 bitc    hpar1, #31
38ed4                 |         if KEYQUEUE_SIZE > 0
38ed4     C4 09 B0 FE |                 loc pb,#keyq_head
38ed8     F7 71 E3 FA |                 rdword htmp,pb
38edc     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
38ee0     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
38ee4     B8 75 03 F6 |                 mov htmp2,htmp
38ee8     04 74 07 FA |                 mul htmp2,#4
38eec     F7 75 03 F1 |                 add htmp2,pb
38ef0     02 74 07 F1 |                 add htmp2,#2
38ef4     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
38ef8     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
38efc     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
38f00     F7 71 43 5C |         if_nz   wrbyte htmp,pb
38f04                 |         end
38f04     2D 00 7C FD |                 ret wcz
38f08                 | 
38f08                 | if HAVE_MOUSE
38f08                 | '------------------------------------------------------------------------------
38f08                 | ' Execute an IN interrupt transaction to poll for mouse activity.
38f08                 | '------------------------------------------------------------------------------
38f08                 | ' On entry:
38f08                 | ' On exit:
38f08                 | '------------------------------------------------------------------------------
38f08                 | hget_mouse_in_report
38f08     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
38f0c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
38f10     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
38f14     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
38f18     CF 02 A0 FD |                 call    #do_int_in
38f1c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38f20     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
38f24                 | 
38f24     00 90 0F F2 |                 cmp     hpar3, #0               wz
38f28     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
38f2c                 | 
38f2c     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
38f30     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
38f34     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
38f38     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
38f3c                 | 
38f3c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
38f40     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
38f44     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
38f48     01 90 87 31 |         if_ae   sub     hpar3, #1
38f4c                 | 
38f4c     40 09 90 FE |                 loc     pa, #mouse_limits
38f50     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
38f54                 | 
38f54                 |                 ' load xacc,yacc,zacc
38f54     28 04 64 FD |                 setq    #3-1
38f58     80 87 07 FB |                 rdlong  hr1,ptrb
38f5c                 |                 ' load limits and outptr
38f5c     28 04 64 FD |                 setq    #3-1
38f60     F6 73 03 FB |                 rdlong  htmp1,pa
38f64                 | 
38f64     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
38f68     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
38f6c     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
38f70     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
38f74     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
38f78     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
38f7c     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
38f80     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
38f84                 |               
38f84                 | 
38f84     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
38f88     07 70 67 F7 |                 signx   htmp, #7
38f8c     B8 87 03 F1 |                 add     hr1,htmp
38f90     00 72 0F F2 |                 cmp     htmp1,#0 wz
38f94     B9 87 63 53 |         if_ne   fles    hr1,htmp1
38f98     00 86 47 53 |         if_ne   fges    hr1,#0
38f9c                 | 
38f9c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
38fa0     07 70 67 F7 |                 signx   htmp, #7
38fa4     B8 89 03 F1 |                 add     hr2,htmp
38fa8     00 74 0F F2 |                 cmp     htmp2,#0 wz
38fac     BA 89 63 53 |         if_ne   fles    hr2,htmp2
38fb0     00 88 47 53 |         if_ne   fges    hr2,#0
38fb4                 |                 
38fb4                 | 
38fb4     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
38fb8     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
38fbc     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
38fc0     B8 8B 03 A1 |         if_z    add     hr3,htmp
38fc4                 | 
38fc4     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
38fc8     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
38fcc                 | 
38fcc                 |                 ' write back accumulators
38fcc     28 04 64 FD |                 setq    #3-1
38fd0     80 87 67 FC |                 wrlong  hr1,ptrb
38fd4                 |                 ' if outptr set, write X/Y words
38fd4     00 76 0F F2 |                 cmp htmp3,#0                    wz
38fd8     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
38fdc     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
38fe0     2D 00 64 FD |                 ret
38fe4                 | end
38fe4                 | 
38fe4                 | '------------------------------------------------------------------------------
38fe4                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
38fe4                 | '------------------------------------------------------------------------------
38fe4                 | ' On entry:
38fe4                 | ' On exit:
38fe4                 | '------------------------------------------------------------------------------
38fe4                 | if _HAVE_GAMEPAD
38fe4                 | hget_gp_in_report
38fe4     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
38fe8     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
38fec                 | 
38fec     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
38ff0     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
38ff4     00 90 E3 F8 |                 getbyte hpar3
38ff8     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
38ffc     CF 02 A0 FD |                 call    #do_int_in
39000     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39004     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
39008                 | 
39008     00 90 0F F2 |                 cmp     hpar3, #0               wz
3900c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
39010                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
39010                 | 
39010     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
39014     00 70 E3 F8 |                 getbyte htmp                            ' |
39018     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3901c     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
39020     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
39024     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
39028     B8 01 C0 F8 |                 setbyte htmp                            ' |
3902c                 | 
3902c                 | ' Note: the following code compares the current and previous reports
3902c                 | ' and process the data if there are changes to ease the debug output.
3902c                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
3902c                 | ' gpPreReport buffer.
3902c                 | 
3902c                 |                 ' ----- start of block to remove
3902c                 |                 {
3902c                 |                 }
3902c                 |                 ' ----- end of block to remove
3902c     F4 04 90 FE |                 loc pa,#hpad_translate
39030     2A EC 63 FD |                 push pa
39034                 | 
39034                 |                 ' FALL THROUGH !!!!
39034                 | 
39034                 | '------------------------------------------------------------------------------
39034                 | ' Decode controller report
39034                 | '------------------------------------------------------------------------------
39034                 | hid_decode
39034                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
39034     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
39038     00 04 00 FF 
3903c     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
39040                 | 
39040     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
39044                 | 
39044     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
39048     00 2A E3 F8 |                 getbyte hidr_type
3904c     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
39050     34 02 90 AD |         if_z    jmp     #hpad_xinput
39054     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
39058     1C 03 90 AD |         if_z    jmp     #hpad_ps3
3905c     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
39060     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
39064     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
39068                 |                 
39068                 | 
39068                 | '------------------------------------------------------------------------------
39068                 | ' Handle HID controller (or mouse now
39068                 | ' On entry:
39068                 | '   ptrb - controller report
39068                 | '------------------------------------------------------------------------------
39068                 | hpad_hid
39068     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3906c     F7 F1 03 F6 |                 mov     ptra, pb
39070     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
39074     00 EC 03 F6 |                 mov     pa, 0-0
39078                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
39078     19 2A 3B FF 
3907c     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
39080                 | 
39080                 | .next
39080     00 EC 5F F2 |                 cmps    pa, #0      wcz
39084     2D 00 7C ED |         if_be   ret     wcz
39088                 | 
39088     61 8D C7 FA |                 rdbyte  hpar1, ptra++
3908c     01 EC 87 F1 |                 sub     pa, #1
39090     00 8E 07 F6 |                 mov     hpar2, #0
39094                 | 
39094     C6 71 03 F6 |                 mov     htmp, hpar1
39098     03 70 07 F5 |                 and     htmp, #$03
3909c     01 70 0F F2 |                 cmp     htmp, #1    wz
390a0     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
390a4     07 8E 67 A7 |         if_z    signx   hpar2,#7
390a8     01 EC 87 A1 |         if_z    sub     pa, #1
390ac     02 70 0F F2 |                 cmp     htmp, #2    wz
390b0     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
390b4     0F 8E 67 A7 |         if_z    signx   hpar2,#15
390b8     02 EC 87 A1 |         if_z    sub     pa, #2
390bc     03 70 0F F2 |                 cmp     htmp, #3    wz
390c0     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
390c4     04 EC 87 A1 |         if_z    sub     pa, #4
390c8                 | 
390c8     FC 8C 07 F5 |                 and     hpar1, #$FC
390cc                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
390cc                 | 
390cc     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
390d0     0C 01 90 AD |         if_z    jmp     #.report_id
390d4     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
390d8     24 01 90 AD |         if_z    jmp     #.usage_page
390dc     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
390e0     2C 01 90 AD |         if_z    jmp     #.usage
390e4     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
390e8     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
390ec     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
390f0     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
390f4     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
390f8     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
390fc     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
39100     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
39104     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
39108     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
3910c     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
39110     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
39114     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
39118     64 FF 9F 5D |         if_nz   jmp     #.next
3911c                 | 
3911c     D8 1D A7 FB |                 tjf     hidr_state,#.next
39120                 | 
39120     03 8E 07 F5 |                 and     hpar2, #$03
39124     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
39128     18 00 90 5D |         if_nz   jmp     #.skip
3912c                 | 
3912c     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
39130     20 00 90 AD |         if_z    jmp     #.axes
39134     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
39138     5C 00 90 AD |         if_z    jmp     #.hats
3913c     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
39140     70 00 90 AD |         if_z    jmp     #.buttons
39144                 | .skip
39144     8F 71 03 F6 |                 mov     htmp, hidr_size
39148     90 71 03 FA |                 mul     htmp, hidr_count
3914c     B8 23 03 F1 |                 add     hidr_offset, htmp
39150     2C FF 9F FD |                 jmp     #.next
39154                 | .axes
39154                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
39154     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
39158     90 87 03 F6 |                 mov     hr1, hidr_count
3915c                 | .l1
3915c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
39160     8F 8F 03 F6 |                 mov     hpar2, hidr_size
39164     04 03 B0 FD |                 call    #hpad_getbits
39168     64 03 B0 FD |                 call    #hpad_normalize
3916c     06 84 1F F2 |                 cmp     hr0, #6         wcz
39170     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
39174     00 88 43 C8 |         if_b    getnib  hr2
39178     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
3917c     5F 01 20 C9 |         if_b    setword retval
39180     01 84 07 C1 |         if_b    add     hr0, #1
39184     8F 23 03 F1 |                 add     hidr_offset, hidr_size
39188     F4 87 6F FB |                 djnz    hr1, #.l1
3918c                 | 
3918c     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
39190     01 1C 07 F6 |                 mov     hidr_state, #1
39194     E8 FE 9F FD |                 jmp     #.next
39198                 | .hats
39198                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
39198     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3919c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
391a0     C8 02 B0 FD |                 call    #hpad_getbits
391a4     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
391a8     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
391ac     01 1C 07 F6 |                 mov     hidr_state, #1
391b0     90 FF 9F FD |                 jmp     #.skip
391b4                 | .buttons
391b4                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
391b4     91 8D 03 F6 |                 mov     hpar1, hidr_offset
391b8     8F 8F 03 F6 |                 mov     hpar2, hidr_size
391bc     90 8F 03 FA |                 mul     hpar2, hidr_count
391c0     A8 02 B0 FD |                 call    #hpad_getbits
391c4     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
391c8     B8 BF 62 F0 |                 shl     retval, htmp
391cc     5F 17 43 F5 |                 or      hidr_buttons, retval
391d0     90 71 03 F1 |                 add     htmp, hidr_count
391d4     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
391d8     01 1C 07 F6 |                 mov     hidr_state, #1
391dc     64 FF 9F FD |                 jmp     #.skip
391e0                 | .report_id
391e0     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
391e4     2D 00 7C 5D |         if_nz   ret     wcz
391e8     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
391ec     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
391f0     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
391f4     01 1C 67 56 |         if_nz   neg     hidr_state,#1
391f8     01 F2 87 51 |         if_nz   sub     ptrb,#1
391fc     80 FE 9F FD |                 jmp     #.next
39200                 | .usage_page
39200     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
39204     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
39208     04 1C 07 A6 |         if_z    mov     hidr_state, #4
3920c     70 FE 9F FD |                 jmp     #.next
39210                 | .usage
39210     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
39214     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
39218     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3921c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
39220     5C FE 9F AD |         if_z    jmp     #.next
39224     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
39228     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
3922c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
39230     4C FE 9F AD |         if_z    jmp     #.next
39234     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
39238     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
3923c     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
39240     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
39244     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
39248     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
3924c     10 00 90 AD |         if_z    jmp     #.usage_axis
39250     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
39254     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
39258     03 1C 07 A6 |         if_z    mov     hidr_state, #3
3925c     20 FE 9F FD |                 jmp     #.next
39260                 | .usage_axis
39260     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
39264     18 FE 9F CD |         if_b    jmp     #.next
39268     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
3926c     C7 01 00 F8 |                 setnib  hpar2
39270                 | 
39270     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
39274     C7 8F C3 F9 |                 decod   hpar2
39278     C7 0F 43 F5 |                 or      hidr_flags, hpar2
3927c                 | 
3927c     01 24 07 F1 |                 add     hidr_usage_idx, #1
39280     02 1C 07 F6 |                 mov     hidr_state, #2
39284     F8 FD 9F FD |                 jmp     #.next
39288                 | 
39288                 | '------------------------------------------------------------------------------
39288                 | ' Handle XInput controller
39288                 | ' On entry:
39288                 | '   ptrb - controller report
39288                 | '------------------------------------------------------------------------------
39288                 | '   Default implementation translates the report to a pseudo-defacto hid
39288                 | '   standard and jumps to hpad_translate for actions.
39288                 | '   Implementors may take specific actions for this kind of controller.
39288                 | '------------------------------------------------------------------------------
39288                 | hpad_xinput
39288     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
3928c     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
39290     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
39294     14 70 0F F2 |                 cmp     htmp, #$14      wz
39298     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3929c                 | 
3929c                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3929c                 | 
3929c     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
392a0     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
392a4                 | 
392a4     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
392a8     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
392ac     5F BF 22 F6 |                 not     retval
392b0     5F 11 2B F9 |                 setword hidr_axis, retval, #1
392b4     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
392b8     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
392bc     5F BF 22 F6 |                 not     retval
392c0     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
392c4                 | 
392c4     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
392c8     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
392cc     C0 BE 1E F2 |                 cmp     retval, #192    wcz
392d0     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
392d4     F8 01 B0 FD |                 call    #hpad_normalize
392d8     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
392dc     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
392e0     C0 BE 1E F2 |                 cmp     retval, #192    wcz
392e4     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
392e8     E4 01 B0 FD |                 call    #hpad_normalize
392ec     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
392f0                 | 
392f0     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
392f4     81 BF E6 FA |                 rdword  retval, ptrb[1]
392f8     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
392fc     00 16 47 F4 |                 bitc    hidr_buttons, #0
39300     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
39304     01 16 47 F4 |                 bitc    hidr_buttons, #1
39308     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3930c     02 16 47 F4 |                 bitc    hidr_buttons, #2
39310     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
39314     03 16 47 F4 |                 bitc    hidr_buttons, #3
39318     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3931c     04 16 47 F4 |                 bitc    hidr_buttons, #4
39320     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
39324     05 16 47 F4 |                 bitc    hidr_buttons, #5
39328     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3932c     08 16 47 F4 |                 bitc    hidr_buttons, #8
39330     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
39334     09 16 47 F4 |                 bitc    hidr_buttons, #9
39338     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
3933c     0A 16 47 F4 |                 bitc    hidr_buttons, #10
39340     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
39344     0B 16 47 F4 |                 bitc    hidr_buttons, #11
39348     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3934c     0C 16 47 F4 |                 bitc    hidr_buttons, #12
39350                 | 
39350     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
39354     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
39358     7A BB 7A FF 
3935c     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
39360     F9 FF 7F FF 
39364     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
39368     B9 71 5F F9 |                 altgn   htmp, #htmp1
3936c     00 70 43 F8 |                 getnib  htmp
39370     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
39374                 | 
39374     AC 01 90 FD |                 jmp     #hpad_translate
39378                 | 
39378                 | '------------------------------------------------------------------------------
39378                 | ' Handle PS3 controller
39378                 | ' On entry:
39378                 | '   ptrb - controller report
39378                 | '------------------------------------------------------------------------------
39378                 | '   Default implementation translates the report to a pseudo-defacto hid
39378                 | '   standard and jumps to hpad_translate for actions.
39378                 | '   Implementors may take specific actions for this kind of controller.
39378                 | '------------------------------------------------------------------------------
39378                 | hpad_ps3
39378     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3937c     01 70 0F F2 |                 cmp     htmp, #$01      wz
39380     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
39384                 | 
39384                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
39384                 | 
39384     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
39388     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3938c     40 01 B0 FD |                 call    #hpad_normalize
39390     5F 11 23 F9 |                 setword hidr_axis, retval, #0
39394     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
39398     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3939c     30 01 B0 FD |                 call    #hpad_normalize
393a0     5F 11 2B F9 |                 setword hidr_axis, retval, #1
393a4     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
393a8     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
393ac     20 01 B0 FD |                 call    #hpad_normalize
393b0     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
393b4     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
393b8     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
393bc     10 01 B0 FD |                 call    #hpad_normalize
393c0     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
393c4     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
393c8     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
393cc                 | 
393cc     08 8C 07 F6 |                 mov     hpar1, #8
393d0     13 8E 07 F6 |                 mov     hpar2, #19
393d4     94 00 B0 FD |                 call    #hpad_getbits
393d8                 | 
393d8     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
393dc     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
393e0     00 16 47 F4 |                 bitc    hidr_buttons, #0
393e4     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
393e8     01 16 47 F4 |                 bitc    hidr_buttons, #1
393ec     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
393f0     02 16 47 F4 |                 bitc    hidr_buttons, #2
393f4     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
393f8     03 16 47 F4 |                 bitc    hidr_buttons, #3
393fc     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
39400     04 16 47 F4 |                 bitc    hidr_buttons, #4
39404     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
39408     05 16 47 F4 |                 bitc    hidr_buttons, #5
3940c     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
39410     06 16 47 F4 |                 bitc    hidr_buttons, #6
39414     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
39418     07 16 47 F4 |                 bitc    hidr_buttons, #7
3941c     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
39420     08 16 47 F4 |                 bitc    hidr_buttons, #8
39424     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
39428     09 16 47 F4 |                 bitc    hidr_buttons, #9
3942c     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
39430     0A 16 47 F4 |                 bitc    hidr_buttons, #10
39434     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
39438     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3943c     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
39440     0C 16 47 F4 |                 bitc    hidr_buttons, #12
39444                 | 
39444     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
39448     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3944c     09 FA 79 FF 
39450     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
39454     FF FA 7F FF 
39458     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3945c     B9 71 5F F9 |                 altgn   htmp, #htmp1
39460     00 70 43 F8 |                 getnib  htmp
39464     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
39468                 | 
39468     B8 00 90 FD |                 jmp     #hpad_translate
3946c                 | 
3946c                 | '------------------------------------------------------------------------------
3946c                 | ' Read bits from report data buffer
3946c                 | '------------------------------------------------------------------------------
3946c                 | ' On entry:
3946c                 | '   PTRB - report buffer
3946c                 | '   hpar1 - start bit
3946c                 | '   hpar2 - number of bits
3946c                 | ' On exit:
3946c                 | '   retval - bits
3946c                 | '------------------------------------------------------------------------------
3946c                 | hpad_getbits
3946c     C6 71 03 F6 |                 mov     htmp, hpar1
39470     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
39474     F9 71 03 F1 |                 add     htmp, ptrb
39478     B8 BF 02 FB |                 rdlong  retval, htmp
3947c                 | 
3947c     C6 73 03 F6 |                 mov     htmp1, hpar1
39480     07 72 07 F5 |                 and     htmp1, #$07     ' shift
39484     B9 BF 42 F0 |                 shr     retval, htmp1
39488                 | 
39488     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
3948c     10 00 90 1D |         if_a    jmp     #.l1
39490                 | 
39490     C7 8F C3 F9 |                 decod   hpar2
39494     01 8E 87 F1 |                 sub     hpar2, #1
39498     C7 BF 02 F5 |                 and     retval, hpar2
3949c     2D 00 64 FD |                 ret
394a0                 | .l1
394a0     FF 7F 00 FF 
394a4     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
394a8     03 70 07 F1 |                 add     htmp, #3
394ac     B8 75 03 FB |                 rdlong  htmp2, htmp
394b0     18 8E 87 F1 |                 sub     hpar2, #24
394b4     C7 8F C3 F9 |                 decod   hpar2
394b8     01 8E 87 F1 |                 sub     hpar2, #1
394bc     B9 75 43 F0 |                 shr     htmp2, htmp1
394c0     C7 75 03 F5 |                 and     htmp2, hpar2
394c4     18 74 67 F0 |                 shl     htmp2, #24
394c8     BA BF 42 F5 |                 or      retval, htmp2
394cc     2D 00 64 FD |                 ret
394d0                 | 
394d0                 | '------------------------------------------------------------------------------
394d0                 | ' Normalize value to signed word (-32768 / 32767)
394d0                 | '------------------------------------------------------------------------------
394d0                 | ' On entry:
394d0                 | '   retval - value to normalize
394d0                 | '   hidr_lminmax - min (word 1) max (word 0) value range
394d0                 | '   - or -
394d0                 | '   hidr_pminmax - min (word 1) max (word 0) value range
394d0                 | '   hidr_size - value bits length
394d0                 | ' On exit:
394d0                 | '   retval - normalized value
394d0                 | '------------------------------------------------------------------------------
394d0                 | hpad_normalize
394d0     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
394d4     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
394d8     2D 00 64 AD |         if_z    ret
394dc     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
394e0     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
394e4     0F 72 77 F7 |                 signx   htmp1, #15      wc
394e8     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
394ec     00 BE 66 C7 |         if_c    signx   retval, #0-0
394f0     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
394f4     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
394f8     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
394fc     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
39500     B8 71 53 F6 |                 abs     htmp            wc
39504     1F BE 0E F4 |                 testb   retval, #31     wz
39508     5F BF 42 F6 |                 abs     retval
3950c     B8 BF 12 FD |                 qdiv    retval, htmp
39510     18 BE 62 FD |                 getqx   retval
39514     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
39518     C0 FF 7F FF 
3951c     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
39520     2D 00 64 FD |                 ret
39524                 | 
39524                 | '------------------------------------------------------------------------------
39524                 | ' Perform controller actions
39524                 | ' On entry:
39524                 | '    hidr_id        report id
39524                 | '    hidr_axis      axis value (signed word, 2 axes per long)
39524                 | '                      X = hidr_axis+0, #0
39524                 | '                      Y = hidr_axis+0, #1
39524                 | '                      Z = hidr_axis+1, #0
39524                 | '                     RX = hidr_axis+1, #1
39524                 | '                     RY = hidr_axis+2, #0
39524                 | '                     RZ = hidr_axis+2, #1
39524                 | '    hidr_buttons   buttons state (bits 0 to 31)
39524                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
39524                 | '
39524                 | '                     -------3 -------2 -------1 -------0 byte
39524                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
39524                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
39524                 | '                                zyx||| |||||||| ++++++++ n. buttons
39524                 | '                                |||||| ||||++++--------- n. axes
39524                 | '                                |||||| ++++------------- n. hats
39524                 | '                                ++++++------------------ valid axes
39524                 | '------------------------------------------------------------------------------
39524                 | hpad_translate
39524                 | 
39524                 | 
39524                 |         if HAVE_HIDPAD
39524     84 0C F0 FE |                 loc     ptrb,#hidpad_report
39528     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
3952c     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
39530     01 70 E7 F2 |                 cmpsub  htmp,#1
39534     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
39538     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
3953c     2D 00 7C 3D |         if_ae   ret     wcz
39540     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
39544     B8 F3 03 F1 |                 add     ptrb,htmp
39548     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3954c     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
39550     28 0C 64 FD |                 setq    #7-1
39554     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
39558                 |         end
39558                 | 
39558                 | 
39558                 |         if EMUPAD_MAX_PLAYER > 0
39558                 | .emupad_no_hat
39558                 |         if EMUPAD_BT0_BIT >= 0
39558                 |         end
39558                 |         if EMUPAD_BT1_BIT >= 0
39558                 |         end
39558                 |         if EMUPAD_BT2_BIT >= 0
39558                 |         end
39558                 |         if EMUPAD_BT3_BIT >= 0
39558                 |         end
39558                 |         if EMUPAD_BT4_BIT >= 0
39558                 |         end
39558                 |         if EMUPAD_BT5_BIT >= 0
39558                 |         end
39558                 |         if EMUPAD_BT6_BIT >= 0
39558                 |         end
39558                 |         if EMUPAD_BT7_BIT >= 0
39558                 |         end
39558                 |         if EMUPAD_BT8_BIT >= 0
39558                 |         end
39558                 |         if EMUPAD_BT9_BIT >= 0
39558                 |         end
39558                 | .emupad_slot_over
39558                 |         end
39558                 | 
39558                 |         if 0
39558                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
39558                 | 
39558                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
39558                 | 
39558                 |         end
39558     2D 00 64 FD |                 ret
3955c                 | end
3955c                 | 
3955c                 | if EMUPAD_MAX_PLAYER > 0
3955c                 | '------------------------------------------------------------------------------
3955c                 | ' Clear EmuPad state
3955c                 | '------------------------------------------------------------------------------
3955c                 | emupad_reset
3955c                 | 
3955c                 | '------------------------------------------------------------------------------
3955c                 | ' Get EmuPad Player number for current device (into retval)
3955c                 | ' Z flag is also set if current device is valid
3955c                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3955c                 | '------------------------------------------------------------------------------
3955c                 | emupad_getnum
3955c                 | .loop
3955c                 | '------------------------------------------------------------------------------
3955c                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3955c                 | '------------------------------------------------------------------------------
3955c                 | emupad_discon
3955c                 | .loop         
3955c                 |         
3955c                 |         ' FALL THROUGH!!!
3955c                 | 
3955c                 | '------------------------------------------------------------------------------
3955c                 | ' Update EmuPad reports (all of them...)
3955c                 | '------------------------------------------------------------------------------
3955c                 | emupad_write_reports
3955c                 | .devloop
3955c                 | 
3955c                 | end
3955c                 | 
3955c                 | 
3955c                 | '------------------------------------------------------------------------------
3955c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3955c                 | '------------------------------------------------------------------------------
3955c                 | ' On entry:
3955c                 | ' On exit:
3955c                 | '------------------------------------------------------------------------------
3955c                 | hget_hub_status
3955c     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
39560     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
39564     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
39568     01 90 2F F9 |                 setword hpar3, #1, #1
3956c     CF 02 A0 FD |                 call    #do_int_in
39570     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39574     0C 00 90 AD |         if_z    jmp     #.data
39578     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3957c     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
39580     2D 00 64 FD |                 ret
39584                 | .data
39584     00 90 0F F2 |                 cmp     hpar3, #0               wz
39588     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3958c                 | 
3958c     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
39590     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
39594     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
39598     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3959c                 |                 debug(ubin_long(hub_status_chg))
3959c                 | 
3959c     01 5A 06 F6 |                 mov     hdev_port, #1
395a0                 | .loop
395a0     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
395a4     0C 00 B0 AD |         if_x1   call    #hub_port_handler
395a8     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
395ac     F0 FF 9F 3D |         if_nc   jmp     #.loop
395b0     2D 00 64 FD |                 ret
395b4                 | 
395b4                 | hub_port_handler
395b4     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
395b8     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
395bc     27 EF 03 F6 |                 mov     pb, urx_buff_p
395c0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
395c4     55 02 A0 FD |                 call    #control_read
395c8     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
395cc                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
395cc                 | 
395cc     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
395d0     50 01 90 5D |         if_x0   jmp     #.other
395d4     68 02 D0 FE |                 loc     ptra, #clr_port_feat
395d8     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
395dc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
395e0     A0 02 A0 FD |                 call    #control_write
395e4     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
395e8     7C 01 90 5D |         if_x0   jmp     #.disconnect
395ec     B0 99 02 F6 |                 mov     hctwait, _100ms_
395f0     EF 02 A0 FD |                 call    #poll_waitx
395f4                 | 
395f4     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
395f8     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
395fc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39600     A0 02 A0 FD |                 call    #control_write
39604                 | 
39604     02 76 07 F6 |                 mov     htmp3, #2
39608                 | .wait_reset
39608     AC 99 02 F6 |                 mov     hctwait, _8ms_
3960c     EF 02 A0 FD |                 call    #poll_waitx
39610     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
39614     27 EF 03 F6 |                 mov     pb, urx_buff_p
39618     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3961c     55 02 A0 FD |                 call    #control_read
39620     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
39624     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
39628     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3962c                 | 
3962c     10 02 D0 FE |                 loc     ptra, #clr_port_feat
39630     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
39634     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39638     A0 02 A0 FD |                 call    #control_write
3963c                 | 
3963c     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
39640                 | .wait_recover
39640     A7 99 02 F6 |                 mov     hctwait, _1ms_
39644     EF 02 A0 FD |                 call    #poll_waitx
39648     FD 71 6F FB |                 djnz    htmp,#.wait_recover
3964c                 | 
3964c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
39650     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
39654     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
39658                 | 
39658     00 08 00 FF 
3965c     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
39660     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
39664     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
39668     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3966c     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
39670     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39674     48 01 90 5D |         if_nz   jmp     #.done
39678                 | .get_dev_desc
39678     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3967c     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
39680     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
39684     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
39688     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3968c     01 71 57 FC |                 wrword  htmp, ptra[wValue]
39690     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
39694     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39698     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3969c     AC 99 02 F6 |                 mov     hctwait, _8ms_
396a0     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
396a4     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
396a8     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
396ac     BE 00 A0 FD |                 call    #calc_crc5
396b0     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
396b4     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
396b8     F7 AD C2 FA |                 rdbyte  total_data, pb
396bc     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
396c0     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
396c4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
396c8     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
396cc     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
396d0     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
396d4                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
396d4     9F 99 02 F6 |                 mov     hctwait, _500us_
396d8     EF 02 A0 FD |                 call    #poll_waitx
396dc     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
396e0     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
396e4     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
396e8     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
396ec     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
396f0     CC 00 90 5D |         if_nz   jmp     #.done
396f4     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
396f8     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
396fc     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
39700     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
39704     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
39708     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3970c     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
39710     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
39714     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
39718     A4 00 90 CD |         if_b    jmp     #.done
3971c     6C F0 BF FD |                 call    #hparse_con_desc
39720     9C 00 90 FD |                 jmp     #.done
39724                 | 
39724                 | .other
39724     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
39728     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3972c     28 00 90 AD |         if_x1   jmp     #.reset_feature
39730     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
39734     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
39738     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3973c     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
39740     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
39744     10 00 90 AD |         if_x1   jmp     #.reset_feature
39748     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3974c     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
39750     04 00 90 AD |         if_x1   jmp     #.reset_feature
39754     68 00 90 FD |                 jmp     #.done
39758                 | .reset_feature
39758     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3975c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39760     A0 02 A0 FD |                 call    #control_write
39764     58 00 90 FD |                 jmp     #.done
39768                 | .disconnect
39768                 | 
39768     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3976c     00 70 E3 F8 |                 getbyte htmp
39770     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
39774     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
39778     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3977c     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
39780     00 76 06 A6 |         if_z    mov     kb_led_states, #0
39784     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
39788                 |         if EMUPAD_MAX_PLAYER > 0
39788                 |         end
39788                 |         if HAVE_MOUSE
39788     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3978c     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
39790     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
39794                 |         end
39794                 |         if HAVE_HIDPAD
39794     14 0A F0 FE |                 loc ptrb,#hidpad_report
39798     2D 71 03 F6 |                 mov htmp,hdev_port
3979c     01 70 E7 F2 |                 cmpsub htmp,#1
397a0     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
397a4     B8 F3 03 F1 |                 add ptrb,htmp
397a8     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
397ac     80 01 6C FC |                 wrlong #0,ptrb
397b0                 |         end
397b0                 | 
397b0     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
397b4     00 00 C4 F8 |                 setbyte #0
397b8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
397bc     00 00 04 F6 |                 mov     0-0, #0
397c0                 | 
397c0                 | .done
397c0     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
397c4     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
397c8     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
397cc     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
397d0     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
397d4     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
397d8                 | 
397d8     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
397dc     27 EF 03 F6 |                 mov     pb, urx_buff_p
397e0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
397e4     55 02 A0 FD |                 call    #control_read
397e8     00 69 06 FB |                 rdlong  hub_port_status, ptra
397ec                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
397ec     2D 00 64 FD |                 ret
397f0                 | 
397f0                 | '------------------------------------------------------------------------------
397f0                 | ' Partially populated SETUP packets
397f0                 | '------------------------------------------------------------------------------
397f0     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
397f1     06          |                 byte    REQ_GET_DESC
397f2     00 01       |                 word    TYPE_DEVICE << 8
397f4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
397f6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
397f8     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
397f9     06          |                 byte    REQ_GET_DESC
397fa     00 02       |                 word    TYPE_CONFIG << 8
397fc     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
397fe     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39800     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
39801     09          |                 byte    REQ_SET_CONFIG
39802     00 00       |                 word    0       ' Configuration value
39804     00 00       |                 word    0       ' Zero
39806     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
39808     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
39809     05          |                 byte    REQ_SET_ADDR
3980a     00 00       |                 word    0       ' Zero
3980c     00 00       |                 word    0       ' Zero
3980e     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
39810                 | '------------------------------------------------------------------------------
39810                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
39810                 | ' wValue field dictates which protocol should be used.
39810                 | '
39810                 | ' When initialized, all devices default to report protocol. However the host
39810                 | ' should not make any assumptions about the device state and should set the
39810                 | ' desired protocol whenever initializing a device.
39810                 | '------------------------------------------------------------------------------
39810     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
39811     0B          |                 byte    HID_SET_PROTO
39812     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
39814                 |                                                 ' (HID 1.11 Section 7.2.6).
39814     00 00       |                 word    0               ' Interface index number.
39816     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
39818                 | '------------------------------------------------------------------------------
39818     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
39819     0A          |                 byte    HID_SET_IDLE
3981a     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3981c                 |                                         ' reporting until a change is detected in the report data
3981c                 | 
3981c                 |                                         ' (HID 1.11 Section 7.2.4).
3981c     00 00       |                 word    0       ' Interface index number.
3981e     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
39820     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
39821     09          |                 byte    HID_SET_REPORT
39822     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
39824                 |                                         ' (HID 1.11 Section 7.2.2).
39824     00 00       |                 word    0       ' Interface index number.
39826     00 00       |                 word    0       ' Size of the report, in bytes.
39828     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
39829     06          |                 byte    REQ_GET_DESC
3982a     00 22       |                 word    TYPE_REPORT << 8
3982c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3982e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39830                 | '------------------------------------------------------------------------------
39830     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
39831     06          |                 byte    REQ_GET_DESC
39832     00 29       |                 word    TYPE_HUB << 8
39834     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
39836     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39838     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
39839     03          |                 byte    REQ_SET_FEATURE
3983a     00 00       |                 word    0       ' port power
3983c     01 00       |                 word    1       ' Port index number (1+)
3983e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39840     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
39841     01          |                 byte    REQ_CLEAR_FEATURE
39842     00 00       |                 word    0       ' port power
39844     01 00       |                 word    1       ' Port index number (1+)
39846     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39848     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
39849     00          |                 byte    REQ_GET_STATUS
3984a     00 00       |                 word    0
3984c     01 00       |                 word    1       ' Port index number (1+)
3984e     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
39850                 | '------------------------------------------------------------------------------
39850                 | if _HAVE_GAMEPAD
39850     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
39854                 | ps3_command_buff
39854     00 00 00 00 
39858     00          |                 byte    $00, $00, $00, $00, $00
39859     00 00 00 00 
3985d     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3985e     FF 27 10 00 
39862     32          |                 byte    $FF, $27, $10, $00, $32
39863     FF 27 10 00 
39867     32          |                 byte    $FF, $27, $10, $00, $32
39868     FF 27 10 00 
3986c     32          |                 byte    $FF, $27, $10, $00, $32
3986d     FF 27 10 00 
39871     32          |                 byte    $FF, $27, $10, $00, $32
39872     00 00 00 00 
39876     00          |                 byte    $00, $00, $00, $00, $00
39877     00 00 00 00 
3987b     00          |                 byte    $00, $00, $00, $00, $00
3987c     00 00 00 00 
39880     00          |                 byte    $00, $00, $00, $00, $00
39881     00 00 00    |                 byte    $00, $00, $00
39884                 | '------------------------------------------------------------------------------
39884     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
39887                 |                                         ' 0x01 All blinking
39887                 |                                         ' 0x02 1 flashes, then on
39887                 |                                         ' 0x03 2 flashes, then on
39887                 |                                         ' 0x04 3 flashes, then on
39887                 |                                         ' 0x05 4 flashes, then on
39887                 |                                         ' 0x06 1 on
39887                 |                                         ' 0x07 2 on
39887                 |                                         ' 0x08 3 on
39887                 |                                         ' 0x09 4 on
39887                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
39887                 |                                         ' 0x0B Blinking*
39887                 |                                         ' 0x0C Slow blinking*
39887                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
39887     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3988a     00          |                 byte    $00             ' Left rumble
3988b     00          |                 byte    $00             ' Right rumble
3988c     00 00 00    |                 byte    $00, $00, $00
3988f     00          | end
39890                 | alignl
39890                 | 
39890                 | if HAVE_MOUSE
39890     00 00 00 00 
39894     00 00 00 00 | mouse_limits long 0[2]
39898     00 00 00 00 | mouse_outptr long 0
3989c                 | end
3989c                 | 
3989c                 | if KEYQUEUE_SIZE > 0
3989c     00          | keyq_head byte 0
3989d     00          | keyq_tail byte 0
3989e     00 00 00 00 
      ...             
39a9a     00 00 00 00 
39a9e     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
39aa0                 | alignl
39aa0                 | end
39aa0                 | 
39aa0                 | if EMUPAD_MAX_PLAYER > 0
39aa0                 | emupad_rule_buffer
39aa0                 | if EMUPAD_BUILTIN_RULES
39aa0                 | file "padmap_builtin.dat"
39aa0                 | end
39aa0                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
39aa0                 | '' Default rule directly follows!
39aa0                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
39aa0                 | end
39aa0                 | 
39aa0                 | '------------------------------------------------------------------------------
39aa0                 | ' The USB data cache area gets zero-filled at every device disconnect
39aa0                 | '------------------------------------------------------------------------------
39aa0                 | usb_cache_start
39aa0                 | 
39aa0                 | ' HID descriptor and report buffers
39aa0                 | if !!OVERLAP_MEMORY
39aa0     00 00 00 00 
      ...             
3a198     00 00 00 00 
3a19c     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3a1a0                 | end
3a1a0     00 00 00 00 
3a1a4     00 00 00 00 | hkbd_report     byte    0[8]
3a1a8     00 00 00 00 | hkbd_led_rep    byte    0
3a1ac                 | alignl
3a1ac                 | 
3a1ac                 | if HAVE_HIDPAD
3a1ac     00 00 00 00 
      ...             
3a268     00 00 00 00 
3a26c     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3a270                 | end
3a270                 | 
3a270                 | ' HUB descriptor
3a270     00          | hub_descr       byte    0   ' bDescLength
3a271     00          |                 byte    0   ' bDescriptorType
3a272     00          |                 byte    0   ' bNbrPorts
3a273     00 00       |                 word    0   ' wHubCharacteristics
3a275     00          |                 byte    0   ' bPwrOn2PwrGood
3a276     00          |                 byte    0   ' bHubContrCurrent
3a277     00          |                 byte    0   ' DeviceRemoveable
3a278     00          |                 byte    0   ' PortPwrCtrlMask
3a279                 | 
3a279                 | usb_cache_end
3a279                 | 
3a279                 | if HAVE_MOUSE
3a279     00 00 00 00 | mouse_xacc      long 0
3a27d     00 00 00 00 | mouse_yacc      long 0
3a281     00 00 00 00 | mouse_zacc      long 0
3a285     00          | mouse_bstate    byte 0
3a286     00          | mouse_lpending  byte 0
3a287     00          | mouse_rpending  byte 0
3a288     00          | mouse_mpending  byte 0
3a289     00          | mouse_lock      byte 0
3a28a     00 00 00    |                 byte 0[3] ' padding
3a28d                 | end
3a28d                 | 
3a28d     00 00 00 00 
      ...             
3a305     00 00 00 00 
3a309     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3a30d     00 00 00 00 
3a311     00 00 00 00 
3a315     00 00 00 00 
3a319     00 00 00 00 
3a31d     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3a31f     00 00 00 00 
      ...             
3a417     00 00 00 00 
3a41b     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3a41f                 | 
3a41f     00          | driver_cog      byte    0                       ' Current driver cog + 1
3a420                 | 	alignl
3a420                 | _audio096_spin2_dat_
3a420                 | 
3a420                 | audio       org     0
3a420                 | 
3a420     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3a424     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
3a428     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3a42c                 |  
3a42c     01 EC 63 FD |             cogid   pa                   ' compute cogid
3a430     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3a434     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3a438     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3a43c                 | 
3a43c     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
3a440     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3a444     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3a448     0F 24 06 FC |             wrpin   dac2,#right
3a44c     0F 00 1E FC |             wxpin   #256,#right    
3a450     41 9C 64 FD |             dirh    #left addpins 1
3a454     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3a458     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3a45c     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
3a460                 |             
3a460                 | '---------------------------------------------------------------------------------        
3a460                 | '----------------- The main loop -------------------------------------------------
3a460                 | '---------------------------------------------------------------------------------
3a460                 | 
3a460     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3a464     10 00 90 CD |       if_c  jmp     #loop1
3a468                 |   
3a468     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3a46c     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
3a470     D5 00 80 F1 |             sub     0-0,a40000000
3a474     FD 01 6E FB |             djnz    cn,#p402
3a478                 |     
3a478     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3a47c     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
3a480     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3a484     01 00 06 C6 |     if_c    mov     cn,#1
3a488     DA 02 3A F3 |             fle     ct,time3 wcz
3a48c     02 00 06 C6 |     if_c    mov     cn,#2     
3a490     DB 02 3A F3 |             fle     ct,time4 wcz
3a494     03 00 06 C6 |     if_c    mov     cn,#3
3a498     DC 02 3A F3 |             fle     ct,time5 wcz
3a49c     04 00 06 C6 |     if_c    mov     cn,#4
3a4a0     DD 02 3A F3 |             fle     ct,time6 wcz
3a4a4     05 00 06 C6 |     if_c    mov     cn,#5
3a4a8     DE 02 3A F3 |             fle     ct,time7 wcz
3a4ac     06 00 06 C6 |     if_c    mov     cn,#6
3a4b0     DF 02 3A F3 |             fle     ct,time8 wcz
3a4b4     07 00 06 C6 |     if_c    mov     cn,#7
3a4b8                 | 
3a4b8                 | 
3a4b8                 | '----------------------------------------------------------------------------------
3a4b8                 | '------------- Compute channel samples --------------------------------------------
3a4b8                 | '----------------------------------------------------------------------------------
3a4b8                 | 
3a4b8                 | 
3a4b8     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
3a4bc     06 C0 65 F0 |             shl     channeladd,#6
3a4c0     E0 F0 03 F1 |             add     ptra,channeladd
3a4c4                 | 
3a4c4     28 16 64 FD |             setq    #11                        	' read parameters
3a4c8     00 D7 05 FB |             rdlong  pointer0,ptra
3a4cc                 |     	    
3a4cc     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
3a4d0     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3a4d4     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
3a4d8     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
3a4dc     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
3a4e0     00 C4 0D F2 |             cmp     qq,#0 wz                         
3a4e4     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3a4e8     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3a4ec                 |             
3a4ec     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
3a4f0     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3a4f4     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
3a4f8                 | 
3a4f8     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
3a4fc     EC 08 3A F9 |             getword oldrs,sample0,#1
3a500     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3a504     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
3a508     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
3a50c     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
3a510                 | 
3a510     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3a514     00 04 02 F6 |             mov     dt0,0-0    
3a518     D7 04 82 F1 |             sub     dt0,time0
3a51c                 |             
3a51c     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
3a520     FB 00 00 F1 |             add     0-0,afreq0  	
3a524                 |             
3a524                 | '---- envelopes
3a524                 |             
3a524     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
3a528     20 00 00 AF 
3a52c     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
3a530     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3a534                 | 
3a534     FB 48 02 F6 |             mov     envs1,afreq0
3a538     F5 48 02 FA |             mul     envs1,envspd0
3a53c     24 E7 01 F1 |             add     envph0,envs1 
3a540                 | 
3a540     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3a544     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3a548     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
3a54c     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
3a550     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3a554     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
3a558     00 46 06 36 |     if_ge   mov     envlo,#0
3a55c     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
3a560     16 E6 65 30 |     if_ge   shl     envph0,#22
3a564                 | 
3a564     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
3a568     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
3a56c     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
3a570     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3a574     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
3a578     24 49 32 F9 |             getword envs1,envs1,#0		' current value
3a57c     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
3a580     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3a584     23 49 02 FA |             mul     envs1,envlo
3a588     25 49 02 F1 |             add     envs1,envs2
3a58c     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
3a590                 |             
3a590     1B DA 0D F4 | p410        testb   sstart0, #27 wz
3a594     1B C6 61 AD |     if_z    getrnd  spl
3a598     58 00 90 AD |     if_z    jmp     #p406
3a59c                 |  
3a59c     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
3a5a0     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
3a5a4     08 D6 45 F0 |             shr     pointer0,#8
3a5a8                 |          
3a5a8     1F DA 0D F4 |             testb   sstart0,#31 wz            
3a5ac     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3a5b0     1C DA 0D F4 |             testb   sstart0,#28 wz            
3a5b4     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3a5b8                 |         
3a5b8     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
3a5bc     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
3a5c0     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
3a5c4                 |             
3a5c4     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
3a5c8     ED C4 01 F1 |             add     qq,sstart0            
3a5cc                 | 
3a5cc     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3a5d0     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
3a5d4     1C 01 B0 1D |     if_gt   call    #cache_read
3a5d8                 |          
3a5d8     1F DA 0D F4 |             testb   sstart0,#31 wz 
3a5dc     08 C6 65 50 |     if_nz   shl     spl,#8
3a5e0     08 D6 65 50 |     if_nz   shl     pointer0,#8
3a5e4     07 D6 65 A0 |     if_z    shl     pointer0,#7
3a5e8     1C DA 0D F4 |             testb   sstart0,#28 wz            
3a5ec     01 D6 45 A0 |     if_z    shr     pointer0,#1    
3a5f0     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3a5f4                 | 
3a5f4                 | 
3a5f4     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
3a5f8     00 C6 01 F6 |             mov     spl,0-0
3a5fc     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
3a600     00 C6 01 F6 |             mov     spl,0-0
3a604                 | 
3a604     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
3a608     00 0A 02 F6 |             mov     ls0,0-0
3a60c     20 00 00 FF 
3a610     00 C4 05 F6 |             mov     qq,##16384
3a614     FE C4 81 F1 |             sub     qq,apan0
3a618     E2 C6 31 FA |             scas    spl,qq
3a61c     00 0C 02 F6 |             mov     rs0, 0-0
3a620                 | 
3a620     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
3a624     06 11 02 F1 |             add     rs,rs0
3a628     03 0F 82 F1 |             sub     ls,oldls
3a62c     05 0F 02 F1 |             add     ls,ls0
3a630                 |    
3a630     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
3a634     05 D9 21 F9 |             setword sample0,ls0,#0
3a638                 |             
3a638     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3a63c     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
3a640     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
3a644                 |   '  if_z    mov     sample0,#0
3a644     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
3a648     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
3a64c     04 00 00 AF 
3a650     00 B0 05 A1 |     if_z    add     time1,##2048
3a654     D8 B2 01 A6 |     if_z    mov     time2,time1
3a658     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
3a65c                 | 
3a65c     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
3a660     00 D7 65 FC |             wrlong  pointer0,ptra
3a664     08 E7 65 FC |             wrlong  envph0,ptra[8]
3a668     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
3a66c                 |                       
3a66c     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
3a670     FF C3 25 A7 |     if_z    decmod  front, #511          
3a674                 |          
3a674     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
3a678     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
3a67c     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
3a680     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
3a684                 | 	    
3a684                 | 		    
3a684     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
3a688     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
3a68c     04 15 02 F6 |             mov     newsample, oldrs       
3a690                 | 
3a690     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
3a694     02 AF 01 F1 |             add     time0,dt0    
3a698                 |                                      
3a698     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
3a69c     D8 FD 9F AD |     if_z    jmp     #loop1
3a6a0     02 C5 01 F6 |             mov     qq,dt0
3a6a4                 | 
3a6a4                 |     
3a6a4                 |             
3a6a4     01 4E 36 F0 | p301        rol     dropper,#1 wc
3a6a8     40 00 90 3D |     if_nc   jmp     #p399
3a6ac     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3a6b0     00 C2 9D F2 |             cmpr    front, #0-0 wcz
3a6b4     F4 FF 9F AD |     if_e    jmp     #p398   
3a6b8                 | 		
3a6b8     00 1A 0E F2 | 	    cmp     scbase,#0 wz
3a6bc     20 00 90 AD |     if_z    jmp     #p302	   
3a6c0                 |   
3a6c0     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
3a6c4     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
3a6c8     02 1E 66 C0 |     if_c    shl     scptr2,#2
3a6cc     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
3a6d0     60 1E 66 FC |             wrlong  scptr2,#$60
3a6d4     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
3a6d8     01 00 00 CF 
3a6dc     7F 1C 06 C7 |     if_c    incmod  scptr,##639
3a6e0                 | 			    
3a6e0     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
3a6e4     00 00 00 FF 
3a6e8     FF C3 05 F7 |             incmod  front, ##511
3a6ec     ED C5 6D FB | p399        djnz    qq,#p301
3a6f0                 |             
3a6f0     6C FD 9F FD |             jmp     #loop            'loop
3a6f4                 | 
3a6f4                 | '----------------------------------------------------------------------------------
3a6f4                 | '------------- This is the end of the main loop -----------------------------------
3a6f4                 | '----------------------------------------------------------------------------------
3a6f4                 | 
3a6f4                 | '----------------------------------------------------------------------------------
3a6f4                 | '------------- PSRAM cache ----------- --------------------------------------------
3a6f4                 | '----------------------------------------------------------------------------------
3a6f4                 | 
3a6f4                 | ' There are 8 cache pointers for 8 channels
3a6f4                 | ' if 24 higher bits of address=cache, then get a word from the cache
3a6f4                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3a6f4                 | 
3a6f4                 | 
3a6f4     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
3a6f8                 |             
3a6f8     E2 40 02 F6 | 	    mov     addrhi,qq		
3a6fc     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
3a700     14 01 96 F9 | 	    alts    cn,#cache1            
3a704     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
3a708     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3a70c                 | 	
3a70c     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
3a710     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
3a714     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
3a718     08 38 66 F0 | 	    shl     cmd,#8
3a71c     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3a720     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
3a724     08 3A 66 F0 |             shl     hubaddr,#8                  '
3a728     13 3B 02 F1 |             add     hubaddr,hubptr 
3a72c     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
3a730     28 04 64 FD |             setq    #2                          ' write 3 longs
3a734     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
3a738     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3a73c     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
3a740                 |             
3a740                 | 	
3a740     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
3a744     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
3a748     13 C5 01 F1 | 	    add     qq,hubptr
3a74c     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3a750     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
3a754                 |           
3a754                 | 
3a754                 | '--------------------------------------------------------------------------
3a754                 | '------ Interrupt service -------------------------------------------------
3a754                 | '------ Output the sample, get the next one if exists ---------------------
3a754                 | '--------------------------------------------------------------------------
3a754                 | 
3a754     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
3a758     0F D0 25 FC |             wypin   rsample,#right       '4
3a75c     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
3a760     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
3a764     FF F3 07 57 |     if_ne   incmod  ptrb,#511
3a768     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
3a76c     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
3a770                 |     
3a770     F5 FF 3B FB |             reti1                        '17/19 
3a774                 |           
3a774                 | '---------------------------------------------------------------------------
3a774                 | '-------- End of interrupt -------------------------------------------------
3a774                 | '---------------------------------------------------------------------------    
3a774                 | 
3a774                 | 
3a774                 | '---------------------------------------------------------------------------
3a774                 | '------- Variables ---------------------------------------------------------
3a774                 | '---------------------------------------------------------------------------
3a774                 | 
3a774                 | ' constants
3a774                 | 
3a774     00 00 00 40 | a40000000   long $40000000
3a778     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3a77c                 | 
3a77c                 | ' Time variables
3a77c                 | 
3a77c     00 00 00 00 | time0       long 0    ' Global sample computing time
3a780     01 00 00 00 | time1       long 1    ' Local channels time
3a784     02 00 00 00 | time2       long 2
3a788     03 00 00 00 | time3       long 3
3a78c     04 00 00 00 | time4       long 4
3a790     05 00 00 00 | time5       long 5
3a794     06 00 00 00 | time6       long 6
3a798     07 00 00 00 | time7       long 7
3a79c     08 00 00 00 | time8       long 8
3a7a0                 | 
3a7a0     00 00 00 00 | channeladd long 0
3a7a4                 | 
3a7a4     00 00 00 00 | front       long 0
3a7a8                 | 
3a7a8                 | ' temporary variables 
3a7a8     00 00 00 00 | qq          long 0
3a7ac     00 00 00 00 | spl         long 0
3a7b0     00 00 00 00 | zero        long 0
3a7b4     00 00 00 00 | mailbox     long 0
3a7b8     00 00 00 00 | mailbox2 long 0
3a7bc                 | 
3a7bc                 | ' Interrupt ISR variables
3a7bc                 | 
3a7bc     00 00 00 00 | lsample     long 0
3a7c0     00 00 00 00 | rsample     long 0
3a7c4     00 00 00 00 | lsnext      long 0
3a7c8     00 00 00 00 | rsnext      long 0 
3a7cc                 | 
3a7cc                 | ' channel parameter block
3a7cc                 | 
3a7cc     00 00 00 00 | pointer0    long 0     
3a7d0     00 00 00 00 | sample0     long 0
3a7d4     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
3a7d8     00 00 00 00 | lstart0     long 0
3a7dc     00 00 00 00 | lend0       long 0
3a7e0     00 00 00 00 | volpan0     long 0
3a7e4     00 00 00 00 | freqskip0   long 0
3a7e8     00 00 00 00 | command0    long 0
3a7ec     00 00 00 00 | envph0	    long 0
3a7f0     00 00 00 00 | envptr0	    long 0
3a7f4     00 00 00 00 | envspd0	    long 0
3a7f8     00 00 00 00 | envlen0	    long 0
3a7fc     00 00 00 00 | res5	    long 0
3a800     00 00 00 00 | res6	    long 0
3a804     00 00 00 00 | res7	    long 0
3a808     00 00 00 00 | res8	    long 0
3a80c                 | 
3a80c     00 00 00 00 | afreq0      long 0
3a810     00 00 00 00 | askip0      long 0
3a814     00 00 00 00 | avol0       long 0
3a818     00 00 00 00 | apan0       long 0
3a81c                 | 
3a81c     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3a820     00 00 00 00 | cn          long 0
3a824     00 00 00 00 | ct          long 0
3a828     00 00 00 00 | dt0         long 0
3a82c                 | 
3a82c                 | ' Samples
3a82c     00 00 00 00 | oldls       long 0
3a830     00 00 00 00 | oldrs       long 0
3a834                 | 
3a834     00 00 00 00 | ls0         long 0
3a838     00 00 00 00 | rs0         long 0
3a83c                 | 
3a83c     00 00 00 00 | ls          long 0    
3a840     00 00 00 00 | rs          long 0
3a844                 | 
3a844     00 00 00 00 | oldsample   long 0
3a848     00 00 00 00 | newsample   long 0
3a84c                 | 
3a84c     00 00 00 00 | nrsample    long 0
3a850     00 00 00 00 | nlsample    long 0
3a854                 | 
3a854     00 00 00 00 | scbase long 0
3a858     00 00 00 00 | scptr long 0
3a85c     00 00 00 00 | scptr2 long 0
3a860     00 00 00 00 | scope long 0
3a864                 | 
3a864     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
3a868     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3a86c                 | 
3a86c     00 18 07 00 | hubptr      long $71800
3a870     00 00 00 00 | cache1      long 0
3a874     00 00 00 00 | cache2      long 0
3a878     00 00 00 00 | cache3      long 0
3a87c     00 00 00 00 | cache4      long 0
3a880     00 00 00 00 | cache5      long 0
3a884     00 00 00 00 | cache6      long 0
3a888     00 00 00 00 | cache7      long 0
3a88c     00 00 00 00 | cache8      long 0
3a890                 | 
3a890                 | 
3a890     00 00 00 00 | cmd         long 0
3a894     00 00 00 00 | hubaddr     long 0
3a898     00 01 00 00 | count       long 256
3a89c     00 00 00 00 | addrlo long 0
3a8a0     00 00 00 00 | addrhi long 0
3a8a4     00 00 00 00 | pointer00 long 0
3a8a8     00 00 00 00 | envhi long 0
3a8ac     00 00 00 00 | envlo long 0
3a8b0     00 00 00 00 | envs1 long 0
3a8b4     00 00 00 00 | envs2 long 0
3a8b8     00 00 00 00 | noise0 long 0
3a8bc     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
3a8c0     00 00 00 00 
3a8c4     00 00 00 00 | null  			long 	0,0           ' for channel reset
3a8c8                 | 	alignl
3a8c8                 | __system__dat_
3a8c8     00 00 00 00 
3a8cc     00 00 00 00 | 	byte	$00[8]
3a8d0     03 00 00 00 
3a8d4     00 00 00 00 
3a8d8     00 00 00 00 
3a8dc     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a8e0     00 00 00 00 
      ...             
3ab6c     00 00 00 00 
3ab70     00 00 00 00 | 	byte	$00[660]
3ab74     00 00 60 09 | 	long	(150 {__system____root_opendir})<<20
3ab78     00 00 70 09 | 	long	(151 {__system____root_closedir})<<20
3ab7c     00 00 80 09 | 	long	(152 {__system____root_readdir})<<20
3ab80     00 00 90 09 | 	long	(153 {__system____root_stat})<<20
3ab84     00 00 00 00 
3ab88     00 00 00 00 
3ab8c     00 00 00 00 
3ab90     00 00 00 00 
3ab94     00 00 00 00 
3ab98     00 00 00 00 
3ab9c     00 00 00 00 | 	byte	$00[28]
3aba0     08 AC 03 00 | 	long	@@@__system__dat_ + 832
3aba4     0B AC 03 00 | 	long	@@@__system__dat_ + 835
3aba8     2C AC 03 00 | 	long	@@@__system__dat_ + 868
3abac     45 AC 03 00 | 	long	@@@__system__dat_ + 893
3abb0     60 AC 03 00 | 	long	@@@__system__dat_ + 920
3abb4     7A AC 03 00 | 	long	@@@__system__dat_ + 946
3abb8     8A AC 03 00 | 	long	@@@__system__dat_ + 962
3abbc     9C AC 03 00 | 	long	@@@__system__dat_ + 980
3abc0     AE AC 03 00 | 	long	@@@__system__dat_ + 998
3abc4     C0 AC 03 00 | 	long	@@@__system__dat_ + 1016
3abc8     CC AC 03 00 | 	long	@@@__system__dat_ + 1028
3abcc     DD AC 03 00 | 	long	@@@__system__dat_ + 1045
3abd0     F1 AC 03 00 | 	long	@@@__system__dat_ + 1065
3abd4     FB AC 03 00 | 	long	@@@__system__dat_ + 1075
3abd8     0B AD 03 00 | 	long	@@@__system__dat_ + 1091
3abdc     1A AD 03 00 | 	long	@@@__system__dat_ + 1106
3abe0     30 AD 03 00 | 	long	@@@__system__dat_ + 1128
3abe4     49 AD 03 00 | 	long	@@@__system__dat_ + 1153
3abe8     5D AD 03 00 | 	long	@@@__system__dat_ + 1173
3abec     6B AD 03 00 | 	long	@@@__system__dat_ + 1187
3abf0     7F AD 03 00 | 	long	@@@__system__dat_ + 1207
3abf4     8B AD 03 00 | 	long	@@@__system__dat_ + 1219
3abf8     9D AD 03 00 | 	long	@@@__system__dat_ + 1237
3abfc     B5 AD 03 00 | 	long	@@@__system__dat_ + 1261
3ac00     C7 AD 03 00 | 	long	@@@__system__dat_ + 1279
3ac04     DA AD 03 00 | 	long	@@@__system__dat_ + 1298
3ac08     4F 4B 00 4E 
3ac0c     75 6D 65 72 
3ac10     69 63 61 6C 
3ac14     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3ac18     75 6D 65 6E 
3ac1c     74 20 6F 75 
3ac20     74 20 6F 66 
3ac24     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3ac28     61 69 6E 00 
3ac2c     52 65 73 75 
3ac30     6C 74 20 6E 
3ac34     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3ac38     65 70 72 65 
3ac3c     73 65 6E 74 
3ac40     61 62 6C 65 
3ac44     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3ac48     65 67 61 6C 
3ac4c     20 6D 75 6C 
3ac50     74 69 62 79 
3ac54     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3ac58     65 71 75 65 
3ac5c     6E 63 65 00 
3ac60     4E 6F 20 73 
3ac64     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3ac68     66 69 6C 65 
3ac6c     20 6F 72 20 
3ac70     64 69 72 65 
3ac74     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3ac78     79 00 42 61 
3ac7c     64 20 66 69 
3ac80     6C 65 20 6E 
3ac84     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3ac88     72 00 50 65 
3ac8c     72 6D 69 73 
3ac90     73 69 6F 6E 
3ac94     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3ac98     69 65 64 00 
3ac9c     4E 6F 74 20 
3aca0     65 6E 6F 75 
3aca4     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3aca8     65 6D 6F 72 
3acac     79 00 54 65 
3acb0     6D 70 6F 72 
3acb4     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3acb8     66 61 69 6C 
3acbc     75 72 65 00 
3acc0     46 69 6C 65 
3acc4     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3acc8     73 74 73 00 
3accc     49 6E 76 61 
3acd0     6C 69 64 20 
3acd4     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3acd8     6D 65 6E 74 
3acdc     00 54 6F 6F 
3ace0     20 6D 61 6E 
3ace4     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3ace8     65 6E 20 66 
3acec     69 6C 65 73 
3acf0     00 49 2F 4F 
3acf4     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3acf8     6F 72 00 4E 
3acfc     6F 74 20 61 
3ad00     20 64 69 72 
3ad04     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3ad08     72 79 00 49 
3ad0c     73 20 61 20 
3ad10     64 69 72 65 
3ad14     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3ad18     79 00 52 65 
3ad1c     61 64 20 6F 
3ad20     6E 6C 79 20 
3ad24     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3ad28     20 73 79 73 
3ad2c     74 65 6D 00 
3ad30     46 75 6E 63 
3ad34     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3ad38     20 6E 6F 74 
3ad3c     20 69 6D 70 
3ad40     6C 65 6D 65 
3ad44     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3ad48     00 44 69 72 
3ad4c     65 63 74 6F 
3ad50     72 79 20 6E 
3ad54     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3ad58     6D 70 74 79 
3ad5c     00 4E 61 6D 
3ad60     65 20 74 6F 
3ad64     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3ad68     6E 67 00 44 
3ad6c     65 76 69 63 
3ad70     65 20 6E 6F 
3ad74     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3ad78     65 6B 61 62 
3ad7c     6C 65 00 42 
3ad80     61 64 20 61 
3ad84     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3ad88     73 73 00 42 
3ad8c     72 6F 6B 65 
3ad90     6E 20 63 6F 
3ad94     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3ad98     74 69 6F 6E 
3ad9c     00 44 65 76 
3ada0     69 63 65 20 
3ada4     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3ada8     65 73 6F 75 
3adac     72 63 65 20 
3adb0     62 75 73 79 
3adb4     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3adb8     73 73 20 64 
3adbc     65 76 69 63 
3adc0     65 20 6C 69 
3adc4     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3adc8     6F 20 73 70 
3adcc     61 63 65 20 
3add0     6F 6E 20 64 
3add4     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3add8     65 00 55 6E 
3addc     6B 6E 6F 77 
3ade0     6E 20 65 72 
3ade4     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3ade8     00 00 00 00 
3adec     00 00 00 00 | 	byte	$00[8]
3adf0     05 00 00 00 
3adf4     00 00 00 00 
3adf8     00 00 00 00 
3adfc     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ae00     00 00 00 00 | 	byte	$00, $00, $00, $00
3ae04     00 00 E0 0A | 	long	(174 {__system___tx})<<20
3ae08     00 00 F0 0A | 	long	(175 {__system___rx})<<20
3ae0c     00 00 00 00 | 	byte	$00, $00, $00, $00
3ae10     00 00 00 0B | 	long	(176 {__system___rxtxioctl_0696})<<20
3ae14     00 00 10 0B | 	long	(177 {__system____dummy_flush_0697})<<20
3ae18     00 00 00 00 
3ae1c     00 00 00 00 | 	byte	$00[8]
3ae20     01 00 00 00 
3ae24     06 00 00 00 
3ae28     00 00 00 00 
3ae2c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ae30     00 00 00 00 
3ae34     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3ae38     00 00 E0 0A | 	long	(174 {__system___tx})<<20
3ae3c     00 00 F0 0A | 	long	(175 {__system___rx})<<20
3ae40     00 00 00 00 | 	byte	$00, $00, $00, $00
3ae44     00 00 00 0B | 	long	(176 {__system___rxtxioctl_0696})<<20
3ae48     00 00 10 0B | 	long	(177 {__system____dummy_flush_0697})<<20
3ae4c     00 00 00 00 
3ae50     00 00 00 00 | 	byte	$00[8]
3ae54     01 00 00 00 
3ae58     06 00 00 00 
3ae5c     00 00 00 00 
3ae60     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ae64     00 00 00 00 
3ae68     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3ae6c     00 00 E0 0A | 	long	(174 {__system___tx})<<20
3ae70     00 00 F0 0A | 	long	(175 {__system___rx})<<20
3ae74     00 00 00 00 | 	byte	$00, $00, $00, $00
3ae78     00 00 00 0B | 	long	(176 {__system___rxtxioctl_0696})<<20
3ae7c     00 00 10 0B | 	long	(177 {__system____dummy_flush_0697})<<20
3ae80     00 00 00 00 
      ...             
3aff0     00 00 00 00 
3aff4     00 00 00 00 | 	byte	$00[376]
3aff8     FC AF 03 00 | 	long	@@@__system__dat_ + 1844
3affc     00 00 00 00 
3b000     00 00 00 00 
3b004     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b008                 | 	alignl
3b008                 | _fatfs_cc_dat_
3b008     C7 00 FC 00 
3b00c     E9 00 E2 00 
3b010     E4 00 E0 00 
3b014     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3b018     EA 00 EB 00 
3b01c     E8 00 EF 00 
3b020     EE 00 EC 00 
3b024     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3b028     C9 00 E6 00 
3b02c     C6 00 F4 00 
3b030     F6 00 F2 00 
3b034     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3b038     FF 00 D6 00 
3b03c     DC 00 F8 00 
3b040     A3 00 D8 00 
3b044     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3b048     E1 00 ED 00 
3b04c     F3 00 FA 00 
3b050     F1 00 D1 00 
3b054     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3b058     BF 00 AE 00 
3b05c     AC 00 BD 00 
3b060     BC 00 A1 00 
3b064     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3b068     91 25 92 25 
3b06c     93 25 02 25 
3b070     24 25 C1 00 
3b074     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3b078     A9 00 63 25 
3b07c     51 25 57 25 
3b080     5D 25 A2 00 
3b084     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3b088     14 25 34 25 
3b08c     2C 25 1C 25 
3b090     00 25 3C 25 
3b094     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3b098     5A 25 54 25 
3b09c     69 25 66 25 
3b0a0     60 25 50 25 
3b0a4     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3b0a8     F0 00 D0 00 
3b0ac     CA 00 CB 00 
3b0b0     C8 00 31 01 
3b0b4     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3b0b8     CF 00 18 25 
3b0bc     0C 25 88 25 
3b0c0     84 25 A6 00 
3b0c4     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3b0c8     D3 00 DF 00 
3b0cc     D4 00 D2 00 
3b0d0     F5 00 D5 00 
3b0d4     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3b0d8     DE 00 DA 00 
3b0dc     DB 00 D9 00 
3b0e0     FD 00 DD 00 
3b0e4     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3b0e8     AD 00 B1 00 
3b0ec     17 20 BE 00 
3b0f0     B6 00 A7 00 
3b0f4     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3b0f8     B0 00 A8 00 
3b0fc     B7 00 B9 00 
3b100     B3 00 B2 00 
3b104     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3b108     61 00 1A 03 
3b10c     E0 00 17 03 
3b110     F8 00 07 03 
3b114     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3b118     78 01 00 01 
3b11c     30 01 32 01 
3b120     06 01 39 01 
3b124     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3b128     2E 01 79 01 
3b12c     06 01 80 01 
3b130     4D 00 43 02 
3b134     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3b138     82 01 84 01 
3b13c     84 01 86 01 
3b140     87 01 87 01 
3b144     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3b148     8B 01 8B 01 
3b14c     8D 01 8E 01 
3b150     8F 01 90 01 
3b154     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3b158     93 01 94 01 
3b15c     F6 01 96 01 
3b160     97 01 98 01 
3b164     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3b168     9B 01 9C 01 
3b16c     9D 01 20 02 
3b170     9F 01 A0 01 
3b174     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3b178     A2 01 A4 01 
3b17c     A4 01 A6 01 
3b180     A7 01 A7 01 
3b184     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3b188     AB 01 AC 01 
3b18c     AC 01 AE 01 
3b190     AF 01 AF 01 
3b194     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3b198     B3 01 B3 01 
3b19c     B5 01 B5 01 
3b1a0     B7 01 B8 01 
3b1a4     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3b1a8     BB 01 BC 01 
3b1ac     BC 01 BE 01 
3b1b0     F7 01 C0 01 
3b1b4     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3b1b8     C3 01 C4 01 
3b1bc     C5 01 C4 01 
3b1c0     C7 01 C8 01 
3b1c4     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3b1c8     CB 01 CA 01 
3b1cc     CD 01 10 01 
3b1d0     DD 01 01 00 
3b1d4     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3b1d8     12 01 F3 01 
3b1dc     03 00 F1 01 
3b1e0     F4 01 F4 01 
3b1e4     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3b1e8     22 02 12 01 
3b1ec     3A 02 09 00 
3b1f0     65 2C 3B 02 
3b1f4     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3b1f8     66 2C 3F 02 
3b1fc     40 02 41 02 
3b200     41 02 46 02 
3b204     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3b208     40 00 81 01 
3b20c     86 01 55 02 
3b210     89 01 8A 01 
3b214     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3b218     5A 02 90 01 
3b21c     5C 02 5D 02 
3b220     5E 02 5F 02 
3b224     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3b228     62 02 94 01 
3b22c     64 02 65 02 
3b230     66 02 67 02 
3b234     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3b238     6A 02 62 2C 
3b23c     6C 02 6D 02 
3b240     6E 02 9C 01 
3b244     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3b248     9D 01 73 02 
3b24c     74 02 9F 01 
3b250     76 02 77 02 
3b254     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3b258     7A 02 7B 02 
3b25c     7C 02 64 2C 
3b260     7E 02 7F 02 
3b264     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3b268     82 02 A9 01 
3b26c     84 02 85 02 
3b270     86 02 87 02 
3b274     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3b278     B1 01 B2 01 
3b27c     45 02 8D 02 
3b280     8E 02 8F 02 
3b284     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3b288     B7 01 7B 03 
3b28c     03 00 FD 03 
3b290     FE 03 FF 03 
3b294     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3b298     86 03 88 03 
3b29c     89 03 8A 03 
3b2a0     B1 03 11 03 
3b2a4     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3b2a8     A3 03 A3 03 
3b2ac     C4 03 08 03 
3b2b0     CC 03 03 00 
3b2b4     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3b2b8     8F 03 D8 03 
3b2bc     18 01 F2 03 
3b2c0     0A 00 F9 03 
3b2c4     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3b2c8     F5 03 F6 03 
3b2cc     F7 03 F7 03 
3b2d0     F9 03 FA 03 
3b2d4     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3b2d8     20 03 50 04 
3b2dc     10 07 60 04 
3b2e0     22 01 8A 04 
3b2e4     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3b2e8     0E 01 CF 04 
3b2ec     01 00 C0 04 
3b2f0     D0 04 44 01 
3b2f4     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3b2f8     00 00 7D 1D 
3b2fc     01 00 63 2C 
3b300     00 1E 96 01 
3b304     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3b308     00 1F 08 06 
3b30c     10 1F 06 06 
3b310     20 1F 08 06 
3b314     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3b318     40 1F 06 06 
3b31c     51 1F 07 00 
3b320     59 1F 52 1F 
3b324     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3b328     5D 1F 56 1F 
3b32c     5F 1F 60 1F 
3b330     08 06 70 1F 
3b334     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3b338     BB 1F C8 1F 
3b33c     C9 1F CA 1F 
3b340     CB 1F DA 1F 
3b344     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3b348     F9 1F EA 1F 
3b34c     EB 1F FA 1F 
3b350     FB 1F 80 1F 
3b354     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3b358     08 06 A0 1F 
3b35c     08 06 B0 1F 
3b360     04 00 B8 1F 
3b364     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3b368     BC 1F CC 1F 
3b36c     01 00 C3 1F 
3b370     D0 1F 02 06 
3b374     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3b378     E5 1F 01 00 
3b37c     EC 1F F3 1F 
3b380     01 00 FC 1F 
3b384     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3b388     32 21 70 21 
3b38c     10 02 84 21 
3b390     01 00 83 21 
3b394     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3b398     30 2C 2F 04 
3b39c     60 2C 02 01 
3b3a0     67 2C 06 01 
3b3a4     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3b3a8     80 2C 64 01 
3b3ac     00 2D 26 08 
3b3b0     41 FF 1A 03 
3b3b4     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3b3b8     05 07 09 0E 
3b3bc     10 12 14 16 
3b3c0     18 1C 1E 43 
3b3c4     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3b3c8     41 41 43 45 
3b3cc     45 45 49 49 
3b3d0     49 41 41 45 
3b3d4     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3b3d8     4F 55 55 59 
3b3dc     4F 55 4F 9C 
3b3e0     4F 9E 9F 41 
3b3e4     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3b3e8     A5 A6 A7 A8 
3b3ec     A9 AA AB AC 
3b3f0     AD AE AF B0 
3b3f4     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3b3f8     41 41 41 B8 
3b3fc     B9 BA BB BC 
3b400     BD BE BF C0 
3b404     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3b408     C5 41 41 C8 
3b40c     C9 CA CB CC 
3b410     CD CE CF D1 
3b414     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3b418     49 49 49 49 
3b41c     D9 DA DB DC 
3b420     DD 49 DF 4F 
3b424     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3b428     4F E6 E8 E8 
3b42c     55 55 55 59 
3b430     59 EE EF F0 
3b434     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3b438     F5 F6 F7 F8 
3b43c     F9 FA FB FC 
3b440     FD FE FF 00 
3b444     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3b448     00 00 00 00 | 	byte	$00, $00, $00, $00
3b44c     00 00 D0 09 | 	long	(157 {_fatfs_cc_v_close})<<20
3b450     00 00 E0 09 | 	long	(158 {_fatfs_cc_v_read})<<20
3b454     00 00 F0 09 | 	long	(159 {_fatfs_cc_v_write})<<20
3b458     00 00 00 0A | 	long	(160 {_fatfs_cc_v_lseek})<<20
3b45c     00 00 10 0A | 	long	(161 {_fatfs_cc_v_ioctl})<<20
3b460     00 00 20 0B | 	long	(178 {_fatfs_cc_v_flush})<<20
3b464     00 00 00 00 
3b468     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3b46c     00 00 20 0A | 	long	(162 {_fatfs_cc_v_open})<<20
3b470     00 00 30 0A | 	long	(163 {_fatfs_cc_v_creat})<<20
3b474     00 00 40 0A | 	long	(164 {_fatfs_cc_v_opendir})<<20
3b478     00 00 50 0A | 	long	(165 {_fatfs_cc_v_closedir})<<20
3b47c     00 00 60 0A | 	long	(166 {_fatfs_cc_v_readdir})<<20
3b480     00 00 70 0A | 	long	(167 {_fatfs_cc_v_stat})<<20
3b484     00 00 80 0A | 	long	(168 {_fatfs_cc_v_mkdir})<<20
3b488     00 00 90 0A | 	long	(169 {_fatfs_cc_v_rmdir})<<20
3b48c     00 00 A0 0A | 	long	(170 {_fatfs_cc_v_remove})<<20
3b490     00 00 B0 0A | 	long	(171 {_fatfs_cc_v_rename})<<20
3b494     00 00 C0 0A | 	long	(172 {_fatfs_cc_v_init})<<20
3b498     00 00 D0 0A | 	long	(173 {_fatfs_cc_v_deinit})<<20
3b49c     FF FF FF FF 
3b4a0     1F 00 00 00 
3b4a4     1C 00 00 00 
3b4a8     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
3b4ac     1E 00 00 00 
3b4b0     1F 00 00 00 
3b4b4     1E 00 00 00 
3b4b8     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3b4bc     1F 00 00 00 
3b4c0     1E 00 00 00 
3b4c4     1F 00 00 00 
3b4c8     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3b4cc     1F 00 00 00 
3b4d0     00 00 00 00 
3b4d4     1F 00 00 00 
3b4d8     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
3b4dc     5A 00 00 00 
3b4e0     78 00 00 00 
3b4e4     97 00 00 00 
3b4e8     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
3b4ec     D4 00 00 00 
3b4f0     F3 00 00 00 
3b4f4     11 01 00 00 
3b4f8     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
3b4fc     4E 01 00 00 
3b500     6D 01 00 00 
3b504     FF FF FF FF 
3b508     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
3b50c     00 00 00 00 
      ...             
3b524     00 00 00 00 
3b528     00 00 00 00 | 	byte	$00[32]
3b52c     4A B5 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
3b530     4E B5 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
3b534     00 00 00 00 
3b538     00 00 00 00 
3b53c     00 00 00 00 
3b540     00 00 00 00 
3b544     00 00       | 	byte	$00[18]
3b546     3F 3F 3F 00 
3b54a     55 43 54 00 
3b54e     55 43 54 00 
3b552     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3b556     00 00 00 00 
3b55a     00 00 00    | 	byte	$00[7]
3b55d     CA 9A 3B 00 
3b561     00 00 00 01 
3b565     01 01 01 01 
3b569     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3b56d     91 11 11 11 
3b571     11 01 01 01 
3b575     01 01 01 01 
3b579     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3b57d     01 01 01 01 
3b581     01 01 01    | 	byte	$01[7]
3b584     90 20 20 20 
3b588     20 20 20 20 
3b58c     20 20 20 20 
3b590     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3b594     42 42 42 42 
3b598     42 42 42 42 
3b59c     42 42       | 	byte	$42[10]
3b59e     20 20 20 20 
3b5a2     20 20 20    | 	byte	$20[7]
3b5a5     44 44 44 44 
3b5a9     44 44       | 	byte	$44[6]
3b5ab     04 04 04 04 
3b5af     04 04 04 04 
3b5b3     04 04 04 04 
3b5b7     04 04 04 04 
3b5bb     04 04 04 04 | 	byte	$04[20]
3b5bf     20 20 20 20 
3b5c3     20 20       | 	byte	$20[6]
3b5c5     48 48 48 48 
3b5c9     48 48       | 	byte	$48[6]
3b5cb     08 08 08 08 
3b5cf     08 08 08 08 
3b5d3     08 08 08 08 
3b5d7     08 08 08 08 
3b5db     08 08 08 08 | 	byte	$08[20]
3b5df     20 20 20 20 
3b5e3     01 00 00 00 
3b5e7     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3b5e8                 | __methodtable__
3b5e8     48 B4 01 00 | 	long	@_do_no_command
3b5ec     F0 25 01 00 | 	long	@_do_plus
3b5f0     DC 2A 01 00 | 	long	@_do_minus
3b5f4     A4 2F 01 00 | 	long	@_do_or
3b5f8     BC 30 01 00 | 	long	@_do_mul
3b5fc     48 36 01 00 | 	long	@_do_fdiv
3b600     8C 2E 01 00 | 	long	@_do_and
3b604     28 34 01 00 | 	long	@_do_div
3b608     10 38 01 00 | 	long	@_do_mod
3b60c     30 3A 01 00 | 	long	@_do_shl
3b610     48 3B 01 00 | 	long	@_do_shr
3b614     60 3C 01 00 | 	long	@_do_power
3b618     70 19 01 00 | 	long	@_do_getvar
3b61c     D0 BB 00 00 | 	long	@_do_push
3b620     70 13 01 00 | 	long	@_do_assign
3b624     0C 82 01 00 | 	long	@_do_cls
3b628     04 FD 00 00 | 	long	@_do_new
3b62c     84 82 01 00 | 	long	@_do_plot
3b630     54 83 01 00 | 	long	@_do_draw
3b634     C8 8C 01 00 | 	long	@_do_print
3b638     C0 85 01 00 | 	long	@_do_circle
3b63c     48 84 01 00 | 	long	@_do_fcircle
3b640     38 87 01 00 | 	long	@_do_box
3b644     E0 8A 01 00 | 	long	@_do_frame
3b648     4C 82 01 00 | 	long	@_do_color
3b64c     EC 95 00 00 | 	long	@_do_for
3b650     40 99 00 00 | 	long	@_do_next
3b654     68 FA 00 00 | 	long	@_do_list
3b658     44 CE 00 00 | 	long	@_do_run
3b65c     2C 12 01 00 | 	long	@_do_error
3b660     24 FF 00 00 | 	long	@_do_fast_goto
3b664     8C 0E 01 00 | 	long	@_do_find_goto
3b668     9C 10 01 00 | 	long	@_do_slow_goto
3b66c     64 B0 01 00 | 	long	@_do_nothing
3b670     14 C2 00 00 | 	long	@_test_csave
3b674     78 C5 00 00 | 	long	@_do_save
3b678     84 C9 00 00 | 	long	@_do_load
3b67c     FC 9B 01 00 | 	long	@_do_pinwrite
3b680     98 A6 01 00 | 	long	@_do_waitms
3b684     D4 A7 01 00 | 	long	@_do_waitvbl
3b688     FC AD 01 00 | 	long	@_do_if
3b68c     E0 AE 01 00 | 	long	@_do_else
3b690     28 3E 01 00 | 	long	@_do_eq
3b694     A0 4C 01 00 | 	long	@_do_ge
3b698     78 51 01 00 | 	long	@_do_le
3b69c     00 43 01 00 | 	long	@_do_gt
3b6a0     D8 47 01 00 | 	long	@_do_lt
3b6a4     50 56 01 00 | 	long	@_do_ne
3b6a8     88 5C 01 00 | 	long	@_do_rnd
3b6ac     68 B0 01 00 | 	long	@_do_brun
3b6b0     34 B3 01 00 | 	long	@_do_beep
3b6b4     04 A8 01 00 | 	long	@_do_dir
3b6b8     18 92 01 00 | 	long	@_do_paper
3b6bc     A0 92 01 00 | 	long	@_do_ink
3b6c0     3C 93 01 00 | 	long	@_do_font
3b6c4     B8 93 01 00 | 	long	@_do_mode
3b6c8     A0 B2 01 00 | 	long	@_do_mouse
3b6cc     A4 81 01 00 | 	long	@_do_gettime
3b6d0     D4 B2 01 00 | 	long	@_do_cursor
3b6d4     08 B3 01 00 | 	long	@_do_click
3b6d8     30 7F 01 00 | 	long	@_do_mousex
3b6dc     74 7F 01 00 | 	long	@_do_mousey
3b6e0     FC 7F 01 00 | 	long	@_do_mousek
3b6e4     B8 7F 01 00 | 	long	@_do_mousew
3b6e8     5C 5F 01 00 | 	long	@_do_sin
3b6ec     00 75 01 00 | 	long	@_do_stick
3b6f0     84 76 01 00 | 	long	@_do_strig
3b6f4     44 7E 01 00 | 	long	@_do_sprite
3b6f8     D0 7A 01 00 | 	long	@_do_defsprite
3b6fc     08 78 01 00 | 	long	@_do_getpixel
3b700     E0 A7 01 00 | 	long	@_do_waitclock
3b704     54 B4 01 00 | 	long	@_do_negative
3b708     40 80 01 00 | 	long	@_do_rdpin
3b70c     AC 80 01 00 | 	long	@_do_rqpin
3b710     20 81 01 00 | 	long	@_do_pinread
3b714     94 9E 01 00 | 	long	@_do_wrpin
3b718     14 9F 01 00 | 	long	@_do_wxpin
3b71c     94 9F 01 00 | 	long	@_do_wypin
3b720     84 9C 01 00 | 	long	@_do_pinfloat
3b724     C4 9C 01 00 | 	long	@_do_pinlo
3b728     04 9D 01 00 | 	long	@_do_pinhi
3b72c     84 9D 01 00 | 	long	@_do_pinstart
3b730     44 9D 01 00 | 	long	@_do_pintoggle
3b734     14 A0 01 00 | 	long	@_do_position
3b738     B8 6E 01 00 | 	long	@_do_cos
3b73c     D8 6F 01 00 | 	long	@_do_tan
3b740     FC 72 01 00 | 	long	@_do_atn
3b744     E4 70 01 00 | 	long	@_do_asin
3b748     F0 71 01 00 | 	long	@_do_acos
3b74c     10 74 01 00 | 	long	@_do_sqr
3b750     20 89 01 00 | 	long	@_do_fill
3b754     7C F1 00 00 | 	long	@_do_defsnd
3b758     94 D1 00 00 | 	long	@_do_defenv
3b75c     04 AF 01 00 | 	long	@_do_rad
3b760     2C AF 01 00 | 	long	@_do_deg
3b764     A8 AF 01 00 | 	long	@_do_int
3b768     28 DE 00 00 | 	long	@_do_play
3b76c     5C 99 01 00 | 	long	@_do_setdelay
3b770     B4 98 01 00 | 	long	@_do_setenv
3b774     04 9A 01 00 | 	long	@_do_setlen
3b778     54 9B 01 00 | 	long	@_do_setpan
3b77c     AC 9A 01 00 | 	long	@_do_setvol
3b780     64 97 01 00 | 	long	@_do_setwave
3b784     0C 98 01 00 | 	long	@_do_setsustain
3b788     E4 F0 00 00 | 	long	@_do_release
3b78c     50 5E 01 00 | 	long	@_do_getenvsustain
3b790     9C A0 01 00 | 	long	@_do_poke
3b794     74 A1 01 00 | 	long	@_do_dpoke
3b798     4C A2 01 00 | 	long	@_do_lpoke
3b79c     24 A3 01 00 | 	long	@_do_peek
3b7a0     D4 A3 01 00 | 	long	@_do_dpeek
3b7a4     80 A4 01 00 | 	long	@_do_lpeek
3b7a8     90 A5 01 00 | 	long	@_do_adr
3b7ac     2C A5 01 00 | 	long	@_do_fre
3b7b0     94 A5 01 00 | 	long	@_do_getnotevalue
3b7b4     28 1F 01 00 | 	long	@_do_getaddr
3b7b8     18 23 01 00 | 	long	@_do_inkey
3b7bc     04 B5 01 00 | 	long	@_do_abs
3b7c0     F8 6B 01 00 | 	long	@_do_hex
3b7c4     58 6D 01 00 | 	long	@_do_bin
3b7c8     F4 68 01 00 | 	long	@_do_val
3b7cc     F8 67 01 00 | 	long	@_do_chr
3b7d0     34 65 01 00 | 	long	@_do_asc
3b7d4     B0 63 01 00 | 	long	@_do_left
3b7d8     2C 62 01 00 | 	long	@_do_right
3b7dc     68 60 01 00 | 	long	@_do_mid
3b7e0     8C 66 01 00 | 	long	@_do_len
3b7e4     D4 94 00 00 | 	long	@_do_gosub
3b7e8     5C 98 00 00 | 	long	@_do_return
3b7ec     10 CE 00 00 | 	long	@_do_end
3b7f0     08 99 00 00 | 	long	@_do_pop
3b7f4     58 79 01 00 | 	long	@_do_log
3b7f8     60 EA 00 00 | 	long	@_do_changevol
3b7fc     A8 EE 00 00 | 	long	@_do_changewav
3b800     40 EB 00 00 | 	long	@_do_changepan
3b804     50 EC 00 00 | 	long	@_do_changefreq
3b808     D4 EF 00 00 | 	long	@_do_shutup
3b80c     54 AF 01 00 | 	long	@_do_round
3b810     74 C9 00 00 | 	long	@_do_enter
3b814     14 00 01 00 | 	long	@_do_open
3b818     2C 03 01 00 | 	long	@_do_close
3b81c     A8 03 01 00 | 	long	@_do_get
3b820     4C 09 01 00 | 	long	@_do_put
3b824     14 F2 01 00 | 	long	@_hg010b_spin2_putchar
3b828     6C 01 03 00 | 	long	@__struct___bas_wrap_sender_tx
3b82c     B0 01 03 00 | 	long	@__struct___bas_wrap_sender_rx
3b830     F8 01 03 00 | 	long	@__struct___bas_wrap_sender_close
3b834     9C 00 03 00 | 	long	@__struct__s_vfs_file_t_putchar
3b838     0C 01 03 00 | 	long	@__struct__s_vfs_file_t_getchar
3b83c     54 00 03 00 | 	long	@___strs_cl_pfunc
3b840     E8 5D 02 00 | 	long	@__system____root_opendir
3b844     84 5E 02 00 | 	long	@__system____root_closedir
3b848     00 5E 02 00 | 	long	@__system____root_readdir
3b84c     8C 5E 02 00 | 	long	@__system____root_stat
3b850     D8 56 02 00 | 	long	@__system____default_putc
3b854     5C 56 02 00 | 	long	@__system____default_getc
3b858     80 57 02 00 | 	long	@__system____default_flush
3b85c     58 EB 02 00 | 	long	@_fatfs_cc_v_close
3b860     74 EF 02 00 | 	long	@_fatfs_cc_v_read
3b864     88 F0 02 00 | 	long	@_fatfs_cc_v_write
3b868     68 F1 02 00 | 	long	@_fatfs_cc_v_lseek
3b86c     F0 F1 02 00 | 	long	@_fatfs_cc_v_ioctl
3b870     44 F2 02 00 | 	long	@_fatfs_cc_v_open
3b874     BC EA 02 00 | 	long	@_fatfs_cc_v_creat
3b878     9C EB 02 00 | 	long	@_fatfs_cc_v_opendir
3b87c     10 EC 02 00 | 	long	@_fatfs_cc_v_closedir
3b880     50 EC 02 00 | 	long	@_fatfs_cc_v_readdir
3b884     84 ED 02 00 | 	long	@_fatfs_cc_v_stat
3b888     04 F2 02 00 | 	long	@_fatfs_cc_v_mkdir
3b88c     24 F2 02 00 | 	long	@_fatfs_cc_v_rmdir
3b890     14 F2 02 00 | 	long	@_fatfs_cc_v_remove
3b894     34 F2 02 00 | 	long	@_fatfs_cc_v_rename
3b898     54 F3 02 00 | 	long	@_fatfs_cc_v_init
3b89c     5C F3 02 00 | 	long	@_fatfs_cc_v_deinit
3b8a0     14 0B 02 00 | 	long	@__system___tx
3b8a4     54 0B 02 00 | 	long	@__system___rx
3b8a8     F8 69 02 00 | 	long	@__system___rxtxioctl_0696
3b8ac     50 6A 02 00 | 	long	@__system____dummy_flush_0697
3b8b0     24 F3 02 00 | 	long	@_fatfs_cc_v_flush
3b8b4                 | __heap_base
3b8b4     00 00 00 00 
      ...             
6a6b4     00 00 00 00 
6a6b8     00 00 00 00 | 	long	0[48002]
6a6bc                 | objmem
6a6bc     00 00 00 00 
      ...             
74ad4     00 00 00 00 
74ad8     00 00 00 00 | 	long	0[10504]
74adc                 | stackspace
74adc     00 00 00 00 | 	long	0[1]
74ae0 100             | 	org	COG_BSS_START
74ae0 100             | _var01
74ae0 100             | 	res	1
74ae0 101             | _var02
74ae0 101             | 	res	1
74ae0 102             | _var03
74ae0 102             | 	res	1
74ae0 103             | _var04
74ae0 103             | 	res	1
74ae0 104             | _var05
74ae0 104             | 	res	1
74ae0 105             | _var06
74ae0 105             | 	res	1
74ae0 106             | _var07
74ae0 106             | 	res	1
74ae0 107             | _var08
74ae0 107             | 	res	1
74ae0 108             | _var09
74ae0 108             | 	res	1
74ae0 109             | arg01
74ae0 109             | 	res	1
74ae0 10a             | arg02
74ae0 10a             | 	res	1
74ae0 10b             | arg03
74ae0 10b             | 	res	1
74ae0 10c             | arg04
74ae0 10c             | 	res	1
74ae0 10d             | arg05
74ae0 10d             | 	res	1
74ae0 10e             | arg06
74ae0 10e             | 	res	1
74ae0 10f             | local01
74ae0 10f             | 	res	1
74ae0 110             | local02
74ae0 110             | 	res	1
74ae0 111             | local03
74ae0 111             | 	res	1
74ae0 112             | local04
74ae0 112             | 	res	1
74ae0 113             | local05
74ae0 113             | 	res	1
74ae0 114             | local06
74ae0 114             | 	res	1
74ae0 115             | local07
74ae0 115             | 	res	1
74ae0 116             | local08
74ae0 116             | 	res	1
74ae0 117             | local09
74ae0 117             | 	res	1
74ae0 118             | local10
74ae0 118             | 	res	1
74ae0 119             | local11
74ae0 119             | 	res	1
74ae0 11a             | local12
74ae0 11a             | 	res	1
74ae0 11b             | local13
74ae0 11b             | 	res	1
74ae0 11c             | local14
74ae0 11c             | 	res	1
74ae0 11d             | local15
74ae0 11d             | 	res	1
74ae0 11e             | local16
74ae0 11e             | 	res	1
74ae0 11f             | local17
74ae0 11f             | 	res	1
74ae0 120             | local18
74ae0 120             | 	res	1
74ae0 121             | local19
74ae0 121             | 	res	1
74ae0 122             | local20
74ae0 122             | 	res	1
74ae0 123             | local21
74ae0 123             | 	res	1
74ae0 124             | local22
74ae0 124             | 	res	1
74ae0 125             | local23
74ae0 125             | 	res	1
74ae0 126             | local24
74ae0 126             | 	res	1
74ae0 127             | local25
74ae0 127             | 	res	1
74ae0 128             | local26
74ae0 128             | 	res	1
74ae0 129             | local27
74ae0 129             | 	res	1
74ae0 12a             | local28
74ae0 12a             | 	res	1
74ae0 12b             | local29
74ae0 12b             | 	res	1
74ae0 12c             | local30
74ae0 12c             | 	res	1
74ae0 12d             | local31
74ae0 12d             | 	res	1
74ae0 12e             | local32
74ae0 12e             | 	res	1
74ae0 12f             | local33
74ae0 12f             | 	res	1
74ae0 130             | local34
74ae0 130             | 	res	1
74ae0 131             | local35
74ae0 131             | 	res	1
74ae0 132             | local36
74ae0 132             | 	res	1
74ae0 133             | local37
74ae0 133             | 	res	1
74ae0 134             | local38
74ae0 134             | 	res	1
74ae0 135             | local39
74ae0 135             | 	res	1
74ae0 136             | local40
74ae0 136             | 	res	1
74ae0 137             | local41
74ae0 137             | 	res	1
74ae0 138             | local42
74ae0 138             | 	res	1
74ae0 139             | local43
74ae0 139             | 	res	1
74ae0 13a             | local44
74ae0 13a             | 	res	1
74ae0 13b             | local45
74ae0 13b             | 	res	1
74ae0 13c             | local46
74ae0 13c             | 	res	1
74ae0 13d             | local47
74ae0 13d             | 	res	1
74ae0 13e             | muldiva_
74ae0 13e             | 	res	1
74ae0 13f             | muldivb_
74ae0 13f             | 	res	1
74ae0 140             | 	fit	480
74ae0 140             | 
