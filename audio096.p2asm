con
	_clkfreq = 20000000
	_clkmode = 16779595
' 
' 
' left= 14
	left = 14
' right=15
	right = 15
' 
' c4=262
	c4 = 262
' d4=294
	d4 = 294
' e4=330
	e4 = 330
' f4=349
	f4 = 349
' g4=392
	g4 = 392
' a4=440
	a4 = 440
' h4=494
	h4 = 494
dat
	nop
	cogid	pa
	coginit	pa,##$404
	orgh	$10
	long	0	'reserved
	long	0 ' clock frequency: will default to 20000000
	long	0 ' clock mode: will default to $100094b
	orgh	$400
 _ret_	mov	result1, #0
	org	0
entry
	cmp	ptra, #0 wz
 if_ne	jmp	#spininit
	mov	ptra, ptr_stackspace_
	rdlong	pa, #20 wz
 if_ne	jmp	#skip_clock_set_
	hubset	#0
	hubset	##16779592
	waitx	##200000
	mov	pa, ##16779595
	hubset	pa
	wrlong	pa, #24
	wrlong	##20000000, #20
	jmp	#skip_clock_set_
	orgf	128
skip_clock_set_
	call	#_start
cogexit
	waitx	##160000
	cogid	arg01
	cogstop	arg01
spininit
	rdlong	objptr, ptra++
	rdlong	result1, ptra++
	setq	#3
	rdlong	arg01, ptra
	sub	ptra, #4
	call	result1
	jmp	#cogexit
FCACHE_LOAD_
    mov	fcache_tmpb_,ptrb
    pop	ptrb
    altd	pa,ret_instr_
    mov	 0-0, ret_instr_
    setq	pa
    rdlong	$0, ptrb++
    push	ptrb
    mov ptrb,fcache_tmpb_
    jmp	#\$0 ' jmp to cache
ret_instr_
    _ret_ cmp inb,#0
fcache_tmpb_
    long 0
fcache_load_ptr_
    long FCACHE_LOAD_
builtin_bytefill_
        shr	arg03, #1 wc
 if_c   wrbyte	arg02, arg01
 if_c   add	arg01, #1
        movbyts	arg02, #0
builtin_wordfill_
        shr	arg03, #1 wc
 if_c   wrword	arg02, arg01
 if_c   add	arg01, #2
        setword	arg02, arg02, #1
builtin_longfill_
        wrfast	#0,arg01
        cmp	arg03, #0 wz
 if_nz  rep	#1, arg03
 if_nz  wflong	arg02
        ret
COUNT_
    long 0
RETADDR_
    long 0
fp
    long 0
pushregs_
    pop  pa
    pop  RETADDR_
    tjz  COUNT_, #pushregs_done_
    altd  COUNT_, #511
    setq #0-0
    wrlong local01, ptra++
pushregs_done_
    setq #2 ' push 3 registers starting at COUNT_
    wrlong COUNT_, ptra++
    mov    fp, ptra
    jmp  pa
 popregs_
    pop    pa
    setq   #2
    rdlong COUNT_, --ptra
    djf    COUNT_, #popregs__ret
    setq   COUNT_
    rdlong local01, --ptra
popregs__ret
    push   RETADDR_
    jmp    pa

objptr
	long	@objmem
ptr__dat__
	long	@_dat_
ptr_stackspace_
	long	@stackspace
result1
	long	0
result2
	long	1
COG_BSS_START
	fit	480
	orgh
hubentry

' 
' 
' '--------------------------------------------------------------
' '---------- Init the variables, start the cog. ----------------
' '--------------------------------------------------------------
' 
' pub start(mbox,scope,cache) :cog,base | iii
_start
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
' 
' ' mbox: PSRAM mailbox or 0 if no PSRAM
' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
' 
' mailboxaddr:=mbox 
	wrlong	local01, objptr
' scope_ptr:=scope
	add	objptr, #4
	wrlong	arg02, objptr
' cache_ptr:=cache
	add	objptr, #4
	wrlong	arg03, objptr
' base:=@channel1[0]
	add	objptr, #4
	mov	local02, objptr
' 
' repeat iii from 0 to 7
	mov	local03, #0
	add	ptr__dat__, ##1172
	sub	objptr, #12
	callpa	#(@LR__0002-@LR__0001)>>2,fcache_load_ptr_
LR__0001
'   long[base+64*iii]:=0
	mov	local01, local02
	mov	result2, local03
	shl	result2, #6
	add	local01, result2
	wrlong	#0, local01
'   long[base+64*iii+4]:=0
	mov	local01, local02
	mov	result2, local03
	shl	result2, #6
	add	local01, result2
	add	local01, #4
	wrlong	#0, local01
'   long[base+64*iii+12]:=0
	mov	local04, local02
	mov	local01, local03
	shl	local01, #6
	add	local04, local01
	add	local04, #12
	wrlong	#0, local04
'   long[base+64*iii+16]:=2 
	mov	local04, local02
	mov	local01, local03
	shl	local01, #6
	add	local04, local01
	add	local04, #16
	wrlong	#2, local04
'   word[base+64*iii+20]:=0
	mov	local04, local02
	mov	local01, local03
	shl	local01, #6
	add	local04, local01
	add	local04, #20
	wrword	#0, local04
'   word[base+64*iii+22]:=8192
	mov	local04, local02
	mov	local01, local03
	shl	local01, #6
	add	local04, local01
	add	local04, #22
	wrword	##8192, local04
'   word[base+64*iii+24]:=4000+2*iii
	mov	local04, local03
	shl	local04, #1
	mov	local01, ##4000
	add	local01, local04
	mov	local04, local02
	mov	result2, local03
	shl	result2, #6
	add	local04, result2
	add	local04, #24
	wrword	local01, local04
'   word[base+64*iii+26]:=2
	mov	local04, local02
	mov	local01, local03
	shl	local01, #6
	add	local04, local01
	add	local04, #26
	wrword	#2, local04
'   long [base+64*iii+8]:=@null | $C0000000
	mov	local01, ptr__dat__
	bith	local01, #62
	mov	local04, local02
	mov	arg03, local03
	shl	arg03, #6
	add	local04, arg03
	add	local04, #8
	wrlong	local01, local04
'   long[base+64*iii+32]:=0
	mov	local04, local02
	mov	local01, local03
	shl	local01, #6
	add	local04, local01
	add	local04, #32
	wrlong	#0, local04
'   long[base+64*iii+36]:=0
	mov	local04, local02
	mov	local01, local03
	shl	local01, #6
	add	local04, local01
	add	local04, #36
	wrlong	#0, local04
'   long[base+64*iii+40]:=0
	mov	local04, local02
	mov	local01, local03
	shl	local01, #6
	add	local04, local01
	add	local04, #40
	wrlong	#0, local04
'   long[base+64*iii+44]:=0
	mov	local04, local02
	mov	local01, local03
	shl	local01, #6
	add	local04, local01
	add	local04, #44
	wrlong	#0, local04
	add	local03, #1
	cmps	local03, #8 wc
 if_b	jmp	#LR__0001
LR__0002
	sub	ptr__dat__, ##1172
'   
' cog:=coginit(16,@audio,@mailboxaddr)
	mov	arg02, ptr__dat__
	mov	arg03, objptr
	mov	local04, #16
	setq	arg03
	coginit	local04, arg02 wc
 if_b	neg	local04, #1
' waitms(100)
	mov	arg01, #100
	call	#__system___waitms
' return cog,base
	mov	result2, local02
	mov	result1, local04
	mov	ptra, fp
	call	#popregs_
_start_ret
	ret
hubexit
	jmp	#cogexit

__system___waitms
	mov	_var01, arg01
	getct	_var02
	rdlong	_var03, #20
	callpa	#(@LR__0011-@LR__0010)>>2,fcache_load_ptr_
LR__0010
	cmps	_var01, ##1000 wc
 if_b	jmp	#LR__0012
	add	_var02, _var03
	mov	arg01, _var02
	addct1	arg01, #0
	waitct1
	sub	_var01, ##1000
	jmp	#LR__0010
LR__0011
LR__0012
	cmps	_var01, #1 wc
 if_b	jmp	#LR__0013
	qmul	_var01, _var03
	mov	arg03, ##1000
	getqy	result1
	getqx	arg01
	setq	result1
	qdiv	arg01, arg03
	getqx	arg01
	addct1	arg01, _var02
	waitct1
LR__0013
__system___waitms_ret
	ret
	alignl
_dat_
'-' 
'-' audio       org     0
'-' 
'-'             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
	byte	$61, $c9, $05, $fb
'-'             rdlong  scbase, ptra++       ' get start address of scope buffer
	byte	$61, $17, $06, $fb
'-'             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
	byte	$61, $23, $06, $fb
'-' 
'-'             cogid   pa                   ' compute cogid
	byte	$01, $ec, $63, $fd
'-'             mul     pa, #12              ' and mailbox spacing
	byte	$0c, $ec, $07, $fa
'-'             add     mailbox2, pa         ' add offset to find this COG's mailbox
	byte	$f6, $c9, $01, $f1
'-'             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
	byte	$e4, $c6, $01, $f6
'-' 
'-'             mov     ptrb,#0              ' A tail pointer for the buffer
	byte	$00, $f2, $07, $f6
'-'             wrpin   dac2,#left            ' Noise dither DACs at clk/95
	byte	$0e, $20, $06, $fc
'-'             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
	byte	$0e, $00, $1e, $fc
'-'             wrpin   dac2,#right
	byte	$0f, $20, $06, $fc
'-'             wxpin   #256,#right    
	byte	$0f, $00, $1e, $fc
'-'             dirh    #left addpins 1
	byte	$41, $9c, $64, $fd
'-'             setse1  #%001<<6 + left      ' Set the event - DAC empty
	byte	$20, $9c, $64, $fd
'-'             mov     ijmp1,#isr1          ' Init the interrupt
	byte	$cb, $e8, $07, $f6
'-'             setint1 #4                   ' Interrupt from DAC empty event
	byte	$25, $08, $64, $fd
'-'             
'-' '---------------------------------------------------------------------------------        
'-' '----------------- The main loop -------------------------------------------------
'-' '---------------------------------------------------------------------------------
'-' 
'-' loop        cmp     time0,a41000000 wc  ' time counter overflow protection
	byte	$d4, $aa, $11, $f2
'-'       if_c  jmp     #loop1
	byte	$10, $00, $90, $cd
'-'   
'-'             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
	byte	$09, $fc, $05, $f6
'-' p402        altd    cn,#a41000000       ' this has to be done at once for all channels
	byte	$d4, $fc, $8d, $f9
'-'             sub     0-0,a40000000
	byte	$d3, $00, $80, $f1
'-'             djnz    cn,#p402
	byte	$fd, $fd, $6d, $fb
'-'     
'-' loop1       mov     cn,#0               ' Find the channel to compute
	byte	$00, $fc, $05, $f6
'-'             mov     ct,time1            ' with the lowest next sample time
	byte	$d6, $fe, $01, $f6
'-'             fle     ct,time2 wcz        ' How to size-optimize this???
	byte	$d7, $fe, $39, $f3
'-'     if_c    mov     cn,#1
	byte	$01, $fc, $05, $c6
'-'             fle     ct,time3 wcz
	byte	$d8, $fe, $39, $f3
'-'     if_c    mov     cn,#2     
	byte	$02, $fc, $05, $c6
'-'             fle     ct,time4 wcz
	byte	$d9, $fe, $39, $f3
'-'     if_c    mov     cn,#3
	byte	$03, $fc, $05, $c6
'-'             fle     ct,time5 wcz
	byte	$da, $fe, $39, $f3
'-'     if_c    mov     cn,#4
	byte	$04, $fc, $05, $c6
'-'             fle     ct,time6 wcz
	byte	$db, $fe, $39, $f3
'-'     if_c    mov     cn,#5
	byte	$05, $fc, $05, $c6
'-'             fle     ct,time7 wcz
	byte	$dc, $fe, $39, $f3
'-'     if_c    mov     cn,#6
	byte	$06, $fc, $05, $c6
'-'             fle     ct,time8 wcz
	byte	$dd, $fe, $39, $f3
'-'     if_c    mov     cn,#7
	byte	$07, $fc, $05, $c6
'-' 
'-' 
'-' '----------------------------------------------------------------------------------
'-' '------------- Compute channel samples --------------------------------------------
'-' '----------------------------------------------------------------------------------
'-' 
'-' 
'-' p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
	byte	$fe, $bc, $01, $f6
'-'             shl     channeladd,#6
	byte	$06, $bc, $65, $f0
'-'             add     ptra,channeladd
	byte	$de, $f0, $03, $f1
'-' 
'-'             setq    #11                        	' read parameters
	byte	$28, $16, $64, $fd
'-'             rdlong  pointer0,ptra
	byte	$00, $d3, $05, $fb
'-'     	    
'-' p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
	byte	$1f, $e0, $0d, $f4
'-'     if_nz   jmp     #p404                     	' if not set, proceed
	byte	$18, $00, $90, $5d
'-'             getword qq,command0,#0            	' get the new rate
	byte	$f0, $c0, $31, $f9
'-'             wxpin   qq,#left addpins 1        	' and program the pins
	byte	$4e, $c0, $15, $fc
'-'             getbyte qq,qq,#0 		      	' check if the rate is n*256
	byte	$e0, $c0, $e1, $f8
'-'             cmp     qq,#0 wz                         
	byte	$00, $c0, $0d, $f2
'-'     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
	byte	$4e, $20, $06, $ac
'-'     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
	byte	$4e, $1e, $06, $5c
'-'             
'-' p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
	byte	$1e, $e0, $1d, $f4
'-'     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
	byte	$e4, $c6, $01, $56
'-'     if_z    mov     mailbox,#0                  ' if set, use HUB 
	byte	$00, $c6, $05, $a6
'-' 
'-' p405        getword oldls,sample0,#0          ' extract old sample value
	byte	$ea, $02, $32, $f9
'-'             getword oldrs,sample0,#1
	byte	$ea, $04, $3a, $f9
'-'      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
	byte	$ee, $f8, $39, $f9
'-'     	    getword avol0,volpan0,#0
	byte	$ee, $f6, $31, $f9
'-'             getword askip0,freqskip0,#1    	    
	byte	$ef, $f4, $39, $f9
'-'             getword afreq0,freqskip0,#0
	byte	$ef, $f2, $31, $f9
'-' 
'-'             alts    cn, #time1                ' compute the time difference between this and previous sample
	byte	$d6, $fc, $95, $f9
'-'             mov     dt0,0-0    
	byte	$00, $00, $02, $f6
'-'             sub     dt0,time0
	byte	$d5, $00, $82, $f1
'-'             
'-'             altd    cn, #time1                ' add channel period to channel time
	byte	$d6, $fc, $8d, $f9
'-'             add     0-0,afreq0  	
	byte	$f9, $00, $00, $f1
'-'             
'-' '---- envelopes
'-'             
'-'             cmp     envptr0,#0 wcz    		' read the pointer
	byte	$00, $e4, $1d, $f2
'-'     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
	byte	$20, $00, $00, $af, $00, $44, $06, $a6
'-'     if_z    jmp     #p410			' and run away	
	byte	$5c, $00, $90, $ad
'-' 
'-'             mov     envs1,afreq0
	byte	$f9, $44, $02, $f6
'-'             mul     envs1,envspd0
	byte	$f3, $44, $02, $fa
'-'             add     envph0,envs1 
	byte	$22, $e3, $01, $f1
'-' 
'-'       	    mov     envhi, envph0		' move phase acc to high part of env pointer
	byte	$f1, $40, $02, $f6
'-' 	    shr     envhi,#6			' leave 10 bits in hi
	byte	$06, $40, $46, $f0
'-' 	    getword envlo,envhi,#0              ' and 16 bit in lo
	byte	$20, $43, $32, $f9
'-' 	    shr     envhi,#16			' move 10 bits of hi to the lower word
	byte	$10, $40, $46, $f0
'-' 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
	byte	$f4, $40, $1a, $f2
'-'     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
	byte	$f4, $40, $02, $36
'-'     if_ge   mov     envlo,#0
	byte	$00, $42, $06, $36
'-'     if_ge   mov     envph0,envlen0
	byte	$f4, $e2, $01, $36
'-'     if_ge   shl     envph0,#22
	byte	$16, $e2, $65, $30
'-' 
'-'             mov     envs1,envhi			' get the phase acc
	byte	$20, $45, $02, $f6
'-'             shl     envs1,#1			' env defs are words, so phase acc*=2
	byte	$01, $44, $66, $f0
'-'             add     envs1,envptr0		' and add the pointer
	byte	$f2, $44, $02, $f1
'-'             rdlong  envs1,envs1			' then read 2 entries
	byte	$22, $45, $02, $fb
'-'             getword envs2,envs1,#1		' next value
	byte	$22, $47, $3a, $f9
'-'             getword envs1,envs1,#0		' current value
	byte	$22, $45, $32, $f9
'-'             mul     envs2,envlo			' linear interpolate : new val x envlo
	byte	$21, $47, $02, $fa
'-'             not     envlo			' sum of envlo and not envlo is always $FFFF
	byte	$21, $43, $22, $f6
'-'             mul     envs1,envlo
	byte	$21, $45, $02, $fa
'-'             add     envs1,envs2
	byte	$23, $45, $02, $f1
'-'             shr     envs1,#18			' normalize it to $4000
	byte	$12, $44, $46, $f0
'-'             
'-' p410        testb   sstart0, #27 wz
	byte	$1b, $d6, $0d, $f4
'-'     if_z    getrnd  spl
	byte	$1b, $c2, $61, $ad
'-'     if_z    jmp     #p406
	byte	$58, $00, $90, $ad
'-'  
'-'             add     pointer0,askip0           	' compute the pointer to the next sample       
	byte	$fa, $d2, $01, $f1
'-'             setbyte pointer00,pointer0,#0
	byte	$e9, $3e, $c2, $f8
'-'             shr     pointer0,#8
	byte	$08, $d2, $45, $f0
'-'          
'-'             testb   sstart0,#31 wz            
	byte	$1f, $d6, $0d, $f4
'-'     if_z    shl     pointer0,#1        
	byte	$01, $d2, $65, $a0
'-'             testb   sstart0,#28 wz            
	byte	$1c, $d6, $0d, $f4
'-'     if_z    shl     pointer0,#1        
	byte	$01, $d2, $65, $a0
'-'         
'-'             cmp     pointer0,lend0 wcz
	byte	$ed, $d2, $19, $f2
'-'     if_ge   sub     pointer0,lend0	      	' and loop if needed     
	byte	$ed, $d2, $81, $31
'-'     if_ge   add     pointer0,lstart0       
	byte	$ec, $d2, $01, $31
'-'             
'-'             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
	byte	$e9, $c0, $01, $f6
'-'             add     qq,sstart0            
	byte	$eb, $c0, $01, $f1
'-' 
'-'             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
	byte	$ff, $c7, $5d, $f2
'-'     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
	byte	$e0, $c2, $e1, $ea
'-'     if_gt   call    #cache_read
	byte	$14, $01, $b0, $1d
'-'          
'-'             testb   sstart0,#31 wz 
	byte	$1f, $d6, $0d, $f4
'-'     if_nz   shl     spl,#8
	byte	$08, $c2, $65, $50
'-'     if_nz   shl     pointer0,#8
	byte	$08, $d2, $65, $50
'-'     if_z    shl     pointer0,#7
	byte	$07, $d2, $65, $a0
'-'             testb   sstart0,#28 wz            
	byte	$1c, $d6, $0d, $f4
'-'     if_z    shr     pointer0,#1    
	byte	$01, $d2, $45, $a0
'-' 	    setbyte pointer0,pointer00,#0       
	byte	$1f, $d3, $c1, $f8
'-' 
'-' 
'-' p406        scas    spl,envs1			' apply envelope
	byte	$22, $c3, $31, $fa
'-'             mov     spl,0-0
	byte	$00, $c2, $01, $f6
'-'             scas    spl,avol0                 	' apply volume
	byte	$fb, $c2, $31, $fa
'-'             mov     spl,0-0
	byte	$00, $c2, $01, $f6
'-' 
'-'             scas    spl,apan0                 	' apply pan
	byte	$fc, $c2, $31, $fa
'-'             mov     ls0,0-0
	byte	$00, $06, $02, $f6
'-'             mov     qq,##16384
	byte	$20, $00, $00, $ff, $00, $c0, $05, $f6
'-'             sub     qq,apan0
	byte	$fc, $c0, $81, $f1
'-'             scas    spl,qq
	byte	$e0, $c2, $31, $fa
'-'             mov     rs0, 0-0
	byte	$00, $08, $02, $f6
'-' 
'-'             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
	byte	$02, $0d, $82, $f1
'-'             add     rs,rs0
	byte	$04, $0d, $02, $f1
'-'             sub     ls,oldls
	byte	$01, $0b, $82, $f1
'-'             add     ls,ls0
	byte	$03, $0b, $02, $f1
'-'    
'-'             setword sample0,rs0,#1           	' pack samples into long
	byte	$04, $d5, $29, $f9
'-'             setword sample0,ls0,#0
	byte	$03, $d5, $21, $f9
'-'             
'-'             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
	byte	$1e, $d6, $1d, $f4
'-'     if_z    mov     pointer0, #0  		
	byte	$00, $d2, $05, $a6
'-'     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
	byte	$00, $e2, $05, $a6
'-'   '  if_z    mov     sample0,#0
'-'     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
	byte	$02, $d7, $65, $ac
'-'             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
	byte	$1d, $d6, $1d, $f4
'-'     if_z    add     time1,##2048
	byte	$04, $00, $00, $af, $00, $ac, $05, $a1
'-'     if_z    mov     time2,time1
	byte	$d6, $ae, $01, $a6
'-'     if_z    wrlong  sstart0,ptra[2]
	byte	$02, $d7, $65, $ac
'-' 
'-' p403        setq    #1                         	' write new pointer and sample value to the hub
	byte	$28, $02, $64, $fd
'-'             wrlong  pointer0,ptra
	byte	$00, $d3, $65, $fc
'-'             wrlong  envph0,ptra[8]
	byte	$08, $e3, $65, $fc
'-'             sub     ptra, channeladd         	' reset the pointer to channel parameters
	byte	$de, $f0, $83, $f1
'-'                       
'-'             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
	byte	$d5, $fa, $09, $f2
'-'     if_z    decmod  front, #511          
	byte	$ff, $bf, $25, $a7
'-'          
'-'             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
	byte	$05, $03, $32, $f9
'-'  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
	byte	$06, $05, $32, $f9
'-'             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
	byte	$0f, $02, $e6, $f4
'-'             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
	byte	$0f, $04, $e6, $f4
'-' 	    
'-' 		    
'-'             setword oldrs,oldls,#1           ' Pack L and R to one long    		
	byte	$01, $05, $2a, $f9
'-'             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
	byte	$08, $0f, $02, $f6
'-'             mov     newsample, oldrs       
	byte	$02, $11, $02, $f6
'-' 
'-'             mov     oldt0,time0              ' update global time
	byte	$d5, $fa, $01, $f6
'-'             add     time0,dt0    
	byte	$00, $ab, $01, $f1
'-'                                      
'-'             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
	byte	$00, $00, $0e, $f2
'-'     if_z    jmp     #loop1
	byte	$d8, $fd, $9f, $ad
'-'             mov     qq,dt0
	byte	$00, $c1, $01, $f6
'-'   
'-' p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
	byte	$ff, $f3, $97, $f9
'-'             cmpr    front, #0-0 wcz
	byte	$00, $be, $9d, $f2
'-'     if_e    jmp     #p301    
	byte	$f4, $ff, $9f, $ad
'-' 		
'-' 	    cmp     scbase,#0 wz
	byte	$00, $16, $0e, $f2
'-'     if_z    jmp     #p302	   
	byte	$20, $00, $90, $ad
'-'   
'-'             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
	byte	$3f, $1c, $16, $f7
'-'     if_c    mov     scptr2,scptr
	byte	$0c, $1b, $02, $c6
'-'     if_c    shl     scptr2,#2
	byte	$02, $1a, $66, $c0
'-'     if_c    add     scptr2,scbase     
	byte	$0b, $1b, $02, $c1
'-'             wrlong  scptr2,#$60
	byte	$60, $1a, $66, $fc
'-'     if_c    wrlong  oldsample,scptr2
	byte	$0d, $0f, $62, $cc
'-'     if_c    incmod  scptr,##639
	byte	$01, $00, $00, $cf, $7f, $18, $06, $c7
'-' 			    
'-' p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
	byte	$df, $0e, $32, $fc
'-'             incmod  front, ##511
	byte	$00, $00, $00, $ff, $ff, $bf, $05, $f7
'-'             djnz    qq,#p301
	byte	$ef, $c1, $6d, $fb
'-'             
'-'             jmp     #loop            'loop
	byte	$74, $fd, $9f, $fd
'-' 
'-' '----------------------------------------------------------------------------------
'-' '------------- This is the end of the main loop -----------------------------------
'-' '----------------------------------------------------------------------------------
'-' 
'-' '----------------------------------------------------------------------------------
'-' '------------- PSRAM cache ----------- --------------------------------------------
'-' '----------------------------------------------------------------------------------
'-' 
'-' ' There are 8 cache pointers for 8 channels
'-' ' if 24 higher bits of address=cache, then get a word from the cache
'-' ' else load the cache from PSRAM, update the pointer, then read a sample
'-' 
'-' 
'-' cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
	byte	$e0, $3a, $e2, $f8
'-'             
'-' 	    mov     addrhi,qq		
	byte	$e0, $3c, $02, $f6
'-' 	    shr     addrhi,#8		        ' get 24 upper bits
	byte	$08, $3c, $46, $f0
'-' 	    alts    cn,#cache1            
	byte	$12, $fd, $95, $f9
'-' 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
	byte	$00, $3c, $0a, $f2
'-'     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
	byte	$34, $00, $90, $ad
'-' 	
'-' p702	    altd    cn,#cache1			' cache miss. 
	byte	$12, $fd, $8d, $f9
'-' 	    mov     0-0,addrhi                  ' update the pointer
	byte	$1e, $01, $00, $f6
'-' 	    mov     cmd,addrhi			' prepare the mailbox
	byte	$1e, $35, $02, $f6
'-' 	    shl     cmd,#8
	byte	$08, $34, $66, $f0
'-'             setnib  cmd, #%1011, #7             ' read burst from the external memory
	byte	$0b, $34, $3e, $f8
'-'             mov     hubaddr,cn                  ' to the channel cache
	byte	$fe, $36, $02, $f6
'-'             shl     hubaddr,#8                  '
	byte	$08, $36, $66, $f0
'-'             add     hubaddr,hubptr 
	byte	$11, $37, $02, $f1
'-'             mov     count,#256                  ' 256 bytes
	byte	$00, $39, $06, $f6
'-'             setq    #2                          ' write 3 longs
	byte	$28, $04, $64, $fd
'-'             wrlong  cmd, mailbox                ' run it
	byte	$e3, $34, $62, $fc
'-' poll1       rdlong  cmd, mailbox                ' poll mailbox for result
	byte	$e3, $34, $02, $fb
'-'             tjs     cmd, #poll1                 ' retry until valid 
	byte	$fe, $35, $b6, $fb
'-'             
'-' 	
'-' p701	    mov     qq,cn			' cache hit
	byte	$fe, $c0, $01, $f6
'-' 	    shl     qq,#8			' compute the cache start
	byte	$08, $c0, $65, $f0
'-' 	    add     qq,hubptr
	byte	$11, $c1, $01, $f1
'-' 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
	byte	$1d, $c1, $01, $f1
'-'     _ret_   rdword  spl,qq                      ' read a word
	byte	$e0, $c2, $e1, $0a
'-'           
'-' 
'-' '--------------------------------------------------------------------------
'-' '------ Interrupt service -------------------------------------------------
'-' '------ Output the sample, get the next one if exists ---------------------
'-' '--------------------------------------------------------------------------
'-' 
'-' isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
	byte	$0e, $ca, $25, $fc
'-'             wypin   rsample,#right       '4
	byte	$0f, $cc, $25, $fc
'-'             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
	byte	$df, $f2, $1b, $f2
'-'     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
	byte	$80, $cf, $a5, $5a
'-'     if_ne   incmod  ptrb,#511
	byte	$ff, $f3, $07, $57
'-'     if_ne   getword rsample,lsnext,#1    '13
	byte	$e7, $cc, $39, $59
'-'     if_ne   getword lsample,lsnext,#0    '15
	byte	$e7, $ca, $31, $59
'-'     
'-'             reti1                        '17/19 
	byte	$f5, $ff, $3b, $fb
'-'           
'-' '---------------------------------------------------------------------------
'-' '-------- End of interrupt -------------------------------------------------
'-' '---------------------------------------------------------------------------    
'-' 
'-' 
'-' '---------------------------------------------------------------------------
'-' '------- Variables ---------------------------------------------------------
'-' '---------------------------------------------------------------------------
'-' 
'-' ' constants
'-' 
'-' a40000000   long $40000000
	byte	$00, $00, $00, $40
'-' a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
	byte	$00, $00, $00, $41
'-' 
'-' ' Time variables
'-' 
'-' time0       long 0    ' Global sample computing time
	byte	$00, $00, $00, $00
'-' time1       long 1    ' Local channels time
	byte	$01, $00, $00, $00
'-' time2       long 2
	byte	$02, $00, $00, $00
'-' time3       long 3
	byte	$03, $00, $00, $00
'-' time4       long 4
	byte	$04, $00, $00, $00
'-' time5       long 5
	byte	$05, $00, $00, $00
'-' time6       long 6
	byte	$06, $00, $00, $00
'-' time7       long 7
	byte	$07, $00, $00, $00
'-' time8       long 8
	byte	$08, $00, $00, $00
'-' 
'-' channeladd long 0
	byte	$00, $00, $00, $00
'-' 
'-' front       long 0
	byte	$00, $00, $00, $00
'-' 
'-' ' temporary variables 
'-' qq          long 0
	byte	$00, $00, $00, $00
'-' spl         long 0
	byte	$00, $00, $00, $00
'-' zero        long 0
	byte	$00, $00, $00, $00
'-' mailbox     long 0
	byte	$00, $00, $00, $00
'-' mailbox2 long 0
	byte	$00, $00, $00, $00
'-' 
'-' ' Interrupt ISR variables
'-' 
'-' lsample     long 0
	byte	$00, $00, $00, $00
'-' rsample     long 0
	byte	$00, $00, $00, $00
'-' lsnext      long 0
	byte	$00, $00, $00, $00
'-' rsnext      long 0 
	byte	$00, $00, $00, $00
'-' 
'-' ' channel parameter block
'-' 
'-' pointer0    long 0     
	byte	$00, $00, $00, $00
'-' sample0     long 0
	byte	$00, $00, $00, $00
'-' sstart0     long 0     ' start pointer and type at bit 31
	byte	$00, $00, $00, $00
'-' lstart0     long 0
	byte	$00, $00, $00, $00
'-' lend0       long 0
	byte	$00, $00, $00, $00
'-' volpan0     long 0
	byte	$00, $00, $00, $00
'-' freqskip0   long 0
	byte	$00, $00, $00, $00
'-' command0    long 0
	byte	$00, $00, $00, $00
'-' envph0	    long 0
	byte	$00, $00, $00, $00
'-' envptr0	    long 0
	byte	$00, $00, $00, $00
'-' envspd0	    long 0
	byte	$00, $00, $00, $00
'-' envlen0	    long 0
	byte	$00, $00, $00, $00
'-' res5	    long 0
	byte	$00, $00, $00, $00
'-' res6	    long 0
	byte	$00, $00, $00, $00
'-' res7	    long 0
	byte	$00, $00, $00, $00
'-' res8	    long 0
	byte	$00, $00, $00, $00
'-' 
'-' afreq0      long 0
	byte	$00, $00, $00, $00
'-' askip0      long 0
	byte	$00, $00, $00, $00
'-' avol0       long 0
	byte	$00, $00, $00, $00
'-' apan0       long 0
	byte	$00, $00, $00, $00
'-' 
'-' oldt0       long $FFFFFFFF    'Temporary time variables
	byte	$ff, $ff, $ff, $ff
'-' cn          long 0
	byte	$00, $00, $00, $00
'-' ct          long 0
	byte	$00, $00, $00, $00
'-' dt0         long 0
	byte	$00, $00, $00, $00
'-' 
'-' ' Samples
'-' oldls       long 0
	byte	$00, $00, $00, $00
'-' oldrs       long 0
	byte	$00, $00, $00, $00
'-' 
'-' ls0         long 0
	byte	$00, $00, $00, $00
'-' rs0         long 0
	byte	$00, $00, $00, $00
'-' 
'-' ls          long 0    
	byte	$00, $00, $00, $00
'-' rs          long 0
	byte	$00, $00, $00, $00
'-' 
'-' oldsample   long 0
	byte	$00, $00, $00, $00
'-' newsample   long 0
	byte	$00, $00, $00, $00
'-' 
'-' nrsample    long 0
	byte	$00, $00, $00, $00
'-' nlsample    long 0
	byte	$00, $00, $00, $00
'-' 
'-' scbase long 0
	byte	$00, $00, $00, $00
'-' scptr long 0
	byte	$00, $00, $00, $00
'-' scptr2 long 0
	byte	$00, $00, $00, $00
'-' scope long 0
	byte	$00, $00, $00, $00
'-' 
'-' dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
	byte	$44, $00, $17, $00
'-' dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
	byte	$46, $00, $17, $00
'-' 
'-' hubptr      long $71800
	byte	$00, $18, $07, $00
'-' cache1      long 0
	byte	$00, $00, $00, $00
'-' cache2      long 0
	byte	$00, $00, $00, $00
'-' cache3      long 0
	byte	$00, $00, $00, $00
'-' cache4      long 0
	byte	$00, $00, $00, $00
'-' cache5      long 0
	byte	$00, $00, $00, $00
'-' cache6      long 0
	byte	$00, $00, $00, $00
'-' cache7      long 0
	byte	$00, $00, $00, $00
'-' cache8      long 0
	byte	$00, $00, $00, $00
'-' 
'-' 
'-' cmd         long 0
	byte	$00, $00, $00, $00
'-' hubaddr     long 0
	byte	$00, $00, $00, $00
'-' count       long 256
	byte	$00, $01, $00, $00
'-' addrlo long 0
	byte	$00, $00, $00, $00
'-' addrhi long 0
	byte	$00, $00, $00, $00
'-' pointer00 long 0
	byte	$00, $00, $00, $00
'-' envhi long 0
	byte	$00, $00, $00, $00
'-' envlo long 0
	byte	$00, $00, $00, $00
'-' envs1 long 0
	byte	$00, $00, $00, $00
'-' envs2 long 0
	byte	$00, $00, $00, $00
'-' noise0 long 0
	byte	$00, $00, $00, $00
'-' null  			long 	0,0           ' for channel reset
	byte	$00, $00, $00, $00, $00, $00, $00, $00
objmem
	long	0[131]
stackspace
	long	0[1]
	org	COG_BSS_START
_var01
	res	1
_var02
	res	1
_var03
	res	1
arg01
	res	1
arg02
	res	1
arg03
	res	1
arg04
	res	1
local01
	res	1
local02
	res	1
local03
	res	1
local04
	res	1
	fit	480
